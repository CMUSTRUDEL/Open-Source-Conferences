Title: OSDC 2019: Running MySQL & MariaDB Server securely in 2019 by Colin Charles
Publication date: 2019-05-21
Playlist: OSDC 2019 | Open Source Data Center Conference
Description: 
	The Internet is filled with outdated information on how you in practice run MySQL and MariaDB Server securely in 2019. Naturally, this is not the fault of the Internet but the fact that the security models with modern MySQL 8 and MariaDB Server 10.3/10.4 have changed, giving you newer options.
More interestingly is also the fact that you tend to run in Wide Area Network (WAN) environments, and replication can happen across cloud-based environments. This is where we will also within this talk setup quickly a fully running 3-node Galera Cluster with MariaDB Server 10.4, in a secure fashion, showing you why you do not have to “run with SELinux turned off” or other poor practices (e.g. turning off the firewall).
Topics covered but not limited to: TLS/SSL for connections, replication, external authentication, encryption, and regular running and configuration of your MySQL and MariaDB Servers (both of which take on many different options).

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de
Blog: http://blog.netways.de
Webinare: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh

https://www.frametraxx.de/
Captions: 
	00:00:01,140 --> 00:00:10,550
[Music]

00:00:12,259 --> 00:00:20,580
demo gods will make will take away time

00:00:17,000 --> 00:00:26,430
but I did take screenshots from demos

00:00:20,580 --> 00:00:28,560
that should be useful so I'm sponsored

00:00:26,430 --> 00:00:30,060
to come here today by a coda ship to

00:00:28,560 --> 00:00:32,640
makers of gallery cluster but I also

00:00:30,060 --> 00:00:35,300
happen to want to spend more time at

00:00:32,640 --> 00:00:37,890
home in Malaysia so I do other stuff

00:00:35,300 --> 00:00:42,300
from home and I've done

00:00:37,890 --> 00:00:43,739
Morini be my SQL for a long time I'm

00:00:42,300 --> 00:00:45,660
going to use the terms fairly

00:00:43,739 --> 00:00:49,890
interchangeably I mean how many of you

00:00:45,660 --> 00:00:56,579
here use MySQL how many here use Maria

00:00:49,890 --> 00:01:01,789
dB okay percona server surprisingly a

00:00:56,579 --> 00:01:03,989
lot less I guess if you've used Maria DB

00:01:01,789 --> 00:01:06,540
recently at least for the last couple

00:01:03,989 --> 00:01:07,979
years you all know that it's really a

00:01:06,540 --> 00:01:11,159
fork of MySQL and there are lots of

00:01:07,979 --> 00:01:12,540
different stuff marietv server 10 4 is

00:01:11,159 --> 00:01:16,229
still a release candidate it should have

00:01:12,540 --> 00:01:17,630
been sort of released now but I guess

00:01:16,229 --> 00:01:19,950
it'll be released in a couple of weeks

00:01:17,630 --> 00:01:23,640
so we're gonna focus on the current

00:01:19,950 --> 00:01:27,210
latest releases 810 3 as well as a bit

00:01:23,640 --> 00:01:29,420
of 10 for and percona so for MySQL 8 it

00:01:27,210 --> 00:01:32,159
turns out breaches are really really bad

00:01:29,420 --> 00:01:33,479
Ashley Madison was a was a fairly bad

00:01:32,159 --> 00:01:36,780
breach so if you were cheating on your

00:01:33,479 --> 00:01:39,060
on your partner it got leaked and you

00:01:36,780 --> 00:01:43,439
know people got divorced divorce can be

00:01:39,060 --> 00:01:45,119
expensive philippine voter data also

00:01:43,439 --> 00:01:47,250
also got leaked and this one's quite

00:01:45,119 --> 00:01:49,409
quite bad actually because it turns out

00:01:47,250 --> 00:01:51,329
even your fingerprint data was leaked so

00:01:49,409 --> 00:01:53,729
you can actually find this on the dark

00:01:51,329 --> 00:01:55,200
web the Panama papers some of you may

00:01:53,729 --> 00:01:57,530
think this is a good thing but lots of

00:01:55,200 --> 00:01:59,219
rich people who are hiding from taxes

00:01:57,530 --> 00:02:01,320
also got into trouble

00:01:59,219 --> 00:02:04,920
Under Armour I use this app personally

00:02:01,320 --> 00:02:08,869
MyFitnessPal nice app to log how much

00:02:04,920 --> 00:02:12,870
food I eat 150 million accounts affected

00:02:08,869 --> 00:02:13,710
by anybody used MyFitnessPal they were

00:02:12,870 --> 00:02:16,220
forced to change

00:02:13,710 --> 00:02:18,930
a password eventually sync health

00:02:16,220 --> 00:02:22,020
Singapore health over one and a half

00:02:18,930 --> 00:02:24,180
million patient records leaked health

00:02:22,020 --> 00:02:26,940
records are really really serious you

00:02:24,180 --> 00:02:28,740
shouldn't leak them for whatever reason

00:02:26,940 --> 00:02:31,110
in fact this is one of the main reasons

00:02:28,740 --> 00:02:33,660
why Singapore actually says that going

00:02:31,110 --> 00:02:35,580
forward all government services will go

00:02:33,660 --> 00:02:37,620
offline they're not gonna be online any

00:02:35,580 --> 00:02:38,490
longer not connected to the public

00:02:37,620 --> 00:02:40,350
Internet anyway

00:02:38,490 --> 00:02:43,170
Equifax I don't know if you do credit

00:02:40,350 --> 00:02:45,360
reports here in Germany much but in most

00:02:43,170 --> 00:02:46,890
places credit reports are quite

00:02:45,360 --> 00:02:47,820
important they tell you like if you can

00:02:46,890 --> 00:02:51,950
get a credit card

00:02:47,820 --> 00:02:54,120
better limits loans Equifax leaked and

00:02:51,950 --> 00:02:56,310
stuff that even affected me personally

00:02:54,120 --> 00:03:00,270
British Airways Cathay Pacific credit

00:02:56,310 --> 00:03:04,100
cards loyalty info info about like what

00:03:00,270 --> 00:03:08,300
kind of quirks you have when you fly all

00:03:04,100 --> 00:03:11,610
leaks available on the dark web for you

00:03:08,300 --> 00:03:13,920
turns out there are many reasons why it

00:03:11,610 --> 00:03:15,690
matters in terms of security nowadays

00:03:13,920 --> 00:03:17,460
because you got to have PCI compliance

00:03:15,690 --> 00:03:19,770
for a fairly long time credit card data

00:03:17,460 --> 00:03:22,740
needed to be PCI compliant HIPAA

00:03:19,770 --> 00:03:25,830
compliance is quite important for

00:03:22,740 --> 00:03:28,020
American health care sarbanes-oxley has

00:03:25,830 --> 00:03:31,080
been around for a long time lots of

00:03:28,020 --> 00:03:33,450
companies that are public have to follow

00:03:31,080 --> 00:03:35,640
GD P R I'm sure all of you are familiar

00:03:33,450 --> 00:03:37,860
with this one every website you go to us

00:03:35,640 --> 00:03:39,750
a little pop up now thanks to it and

00:03:37,860 --> 00:03:42,600
maybe you even find websites that don't

00:03:39,750 --> 00:03:44,610
work anymore in Europe because they just

00:03:42,600 --> 00:03:49,380
chosen not to comply with the GD P R by

00:03:44,610 --> 00:03:51,120
blocking you many American like

00:03:49,380 --> 00:03:54,870
newspaper websites just don't work here

00:03:51,120 --> 00:03:56,610
like you go to LA Times it says no many

00:03:54,870 --> 00:03:58,830
data protection acts as well as privacy

00:03:56,610 --> 00:04:02,100
acts in individual jurisdictions caused

00:03:58,830 --> 00:04:03,930
you to need to secure your databases UK

00:04:02,100 --> 00:04:05,790
has their own Korea has do in Japan as

00:04:03,930 --> 00:04:07,830
they own in fact this is one of the main

00:04:05,790 --> 00:04:09,840
reasons why also see cloud companies

00:04:07,830 --> 00:04:12,300
like Amazon start building data centers

00:04:09,840 --> 00:04:13,710
inside of say Korea Japan because some

00:04:12,300 --> 00:04:16,410
of this data just can't leave the

00:04:13,710 --> 00:04:17,850
jurisdictions and you know there are

00:04:16,410 --> 00:04:19,830
lots of requirements are on continuous

00:04:17,850 --> 00:04:21,620
monitoring data protection via

00:04:19,830 --> 00:04:24,870
encryption privilege management

00:04:21,620 --> 00:04:26,940
retention via backups user activity as

00:04:24,870 --> 00:04:27,250
well as auditing your data via you know

00:04:26,940 --> 00:04:29,560
say

00:04:27,250 --> 00:04:33,460
use a car again user activity auditing

00:04:29,560 --> 00:04:35,620
so to secure your databases largely you

00:04:33,460 --> 00:04:39,070
want to assess basically locate risks

00:04:35,620 --> 00:04:41,590
and vulnerabilities prevent so use you

00:04:39,070 --> 00:04:44,560
know cryptography encryption have good

00:04:41,590 --> 00:04:46,030
user access and controls if anything

00:04:44,560 --> 00:04:48,850
goes wrong you want to be able to detect

00:04:46,030 --> 00:04:51,370
so audit so important regular monitoring

00:04:48,850 --> 00:04:53,920
is important as well as alerts and you

00:04:51,370 --> 00:04:55,960
also want to recover from security

00:04:53,920 --> 00:04:58,150
breach if you happen to get one you want

00:04:55,960 --> 00:05:00,730
uninterrupted services naturally you

00:04:58,150 --> 00:05:05,260
want to also forensic logs and and so

00:05:00,730 --> 00:05:07,930
forth so I suspect today MySQL eight how

00:05:05,260 --> 00:05:13,200
many use MySQL eight or per gonna say

00:05:07,930 --> 00:05:19,690
rate nobody likes to upgrade five seven

00:05:13,200 --> 00:05:21,370
okay it's five six five five okay what

00:05:19,690 --> 00:05:27,190
about Murray to be server ten three

00:05:21,370 --> 00:05:30,250
anybody use that tend to anybody still

00:05:27,190 --> 00:05:34,900
using five five from rel seven Center at

00:05:30,250 --> 00:05:36,640
seven no ok so we've gone leaps and

00:05:34,900 --> 00:05:38,229
bounds and you know the I think eight

00:05:36,640 --> 00:05:40,150
zero is something you should totally

00:05:38,229 --> 00:05:40,960
consider looking at because it's got

00:05:40,150 --> 00:05:43,350
lots of improvements around

00:05:40,960 --> 00:05:46,470
authentication authorization encryption

00:05:43,350 --> 00:05:49,090
auditing even extend firewalls

00:05:46,470 --> 00:05:52,000
historically MySQL kind of sucked

00:05:49,090 --> 00:05:54,040
defaults at extremely poor no password

00:05:52,000 --> 00:05:55,630
for the super user account in fact

00:05:54,040 --> 00:05:57,550
setting up Murray DB today there's still

00:05:55,630 --> 00:06:00,400
no password for the super user account

00:05:57,550 --> 00:06:03,700
if you enter password into your shell

00:06:00,400 --> 00:06:07,390
like if you type MySQL - you username -

00:06:03,700 --> 00:06:10,419
P password it's now saved in your you

00:06:07,390 --> 00:06:13,510
know bash history or MySQL history now I

00:06:10,419 --> 00:06:15,130
also got to make sure if you're like

00:06:13,510 --> 00:06:19,180
doing compiles you're not running mysql

00:06:15,130 --> 00:06:22,780
diaz route now lots of ways for you to

00:06:19,180 --> 00:06:25,479
get hosed if I can read your data

00:06:22,780 --> 00:06:28,120
directory valid MySQL like if I can run

00:06:25,479 --> 00:06:31,090
strings on it I can definitely look at

00:06:28,120 --> 00:06:32,860
it password information if I can start

00:06:31,090 --> 00:06:35,500
and stop the mysqld process I can

00:06:32,860 --> 00:06:38,530
definitely reset passwords and if I can

00:06:35,500 --> 00:06:40,540
read my let CNF I can also reset

00:06:38,530 --> 00:06:44,800
passwords if need be

00:06:40,540 --> 00:06:46,660
so signs of extremely poor security old

00:06:44,800 --> 00:06:48,310
passwords if you happen to use old

00:06:46,660 --> 00:06:50,590
passwords people still require this

00:06:48,310 --> 00:06:51,610
thankfully MySQL has disabled this it's

00:06:50,590 --> 00:06:54,280
not an option anymore

00:06:51,610 --> 00:06:57,070
Morini B still has this you don't want

00:06:54,280 --> 00:06:58,930
to use it it's not the default anyway my

00:06:57,070 --> 00:07:02,260
Murray DB's default is MySQL native

00:06:58,930 --> 00:07:04,720
password uses without passwords this you

00:07:02,260 --> 00:07:06,760
can totally set this is something you

00:07:04,720 --> 00:07:08,020
should totally not do nonnamous users

00:07:06,760 --> 00:07:10,180
it's not good

00:07:08,020 --> 00:07:13,690
granting all privileges to users also

00:07:10,180 --> 00:07:18,100
not good the root user without password

00:07:13,690 --> 00:07:24,370
Oh which you can get away with in still

00:07:18,100 --> 00:07:26,680
in Moorea DB disabling SC Linux or Obama

00:07:24,370 --> 00:07:29,470
today is extremely silly or even

00:07:26,680 --> 00:07:31,810
iptables for that matter there is no IP

00:07:29,470 --> 00:07:35,230
fw there's no reason to disable any of

00:07:31,810 --> 00:07:38,350
this because mysql maria DB comes with a

00:07:35,230 --> 00:07:40,690
palmer and i settings rules so so that

00:07:38,350 --> 00:07:42,670
you can run in enforcing mode without

00:07:40,690 --> 00:07:44,440
issue this is true even if you are

00:07:42,670 --> 00:07:47,440
loading up like Percona HTTP cluster

00:07:44,440 --> 00:07:50,020
gallery faster etc you don't have to

00:07:47,440 --> 00:07:55,470
disable any of this come did does

00:07:50,020 --> 00:08:00,850
anybody dis in disabled mode you do why

00:07:55,470 --> 00:08:02,620
for fun on your laptop maybe but yeah

00:08:00,850 --> 00:08:03,940
don't you really don't want to disable

00:08:02,620 --> 00:08:05,950
this stuff because we've worked so hard

00:08:03,940 --> 00:08:08,050
to make all these contacts available

00:08:05,950 --> 00:08:14,170
that it doesn't make any sense for you

00:08:08,050 --> 00:08:16,960
to disable it so Trust authentication is

00:08:14,170 --> 00:08:19,900
something that you could totally use but

00:08:16,960 --> 00:08:22,630
maybe not not always a good thing for

00:08:19,900 --> 00:08:24,370
you to use because anyone who connects

00:08:22,630 --> 00:08:25,990
to the server is basically authorized to

00:08:24,370 --> 00:08:29,140
access the database with whatever

00:08:25,990 --> 00:08:30,970
database username they specify so if you

00:08:29,140 --> 00:08:33,070
follow trust based authentication you

00:08:30,970 --> 00:08:35,349
could just type MySQL without - you

00:08:33,070 --> 00:08:39,940
username and authenticate against the

00:08:35,349 --> 00:08:41,800
user via the socket of course other

00:08:39,940 --> 00:08:45,460
restrictions may still apply like if you

00:08:41,800 --> 00:08:47,830
restrict via grants but this really

00:08:45,460 --> 00:08:49,720
should only be used if you have you know

00:08:47,830 --> 00:08:52,600
adequate OS level protection on

00:08:49,720 --> 00:08:54,370
connections to the server because it may

00:08:52,600 --> 00:08:57,760
be convenient for a local machine

00:08:54,370 --> 00:08:59,890
so say on a laptop but it's probably not

00:08:57,760 --> 00:09:01,570
great for a multi-user machine or

00:08:59,890 --> 00:09:05,110
something that you're going to keep in

00:09:01,570 --> 00:09:08,260
public and it turns out that Maria db10

00:09:05,110 --> 00:09:11,320
for which as I said will be released as

00:09:08,260 --> 00:09:13,120
GA Suen actually turns this on by

00:09:11,320 --> 00:09:16,060
default it's always been on by default

00:09:13,120 --> 00:09:18,640
in Debian for example if you used the

00:09:16,060 --> 00:09:21,910
Debian packages for quite a few years

00:09:18,640 --> 00:09:23,590
and in fact the first part of the

00:09:21,910 --> 00:09:26,800
documentation actually tells you now how

00:09:23,590 --> 00:09:28,810
to disable the plug-in because if you're

00:09:26,800 --> 00:09:30,640
running in a multi-user mode this is

00:09:28,810 --> 00:09:32,230
probably something you definitely do

00:09:30,640 --> 00:09:34,960
want to do is disable the plugin you

00:09:32,230 --> 00:09:41,370
don't want to create uniques users for

00:09:34,960 --> 00:09:45,160
all your MySQL users most likely now

00:09:41,370 --> 00:09:47,830
MySQL 8 and now even 5 7 actually has

00:09:45,160 --> 00:09:49,900
back part of this allows you to use

00:09:47,830 --> 00:09:51,340
caching sha-2 password so it's got

00:09:49,900 --> 00:09:55,930
excellent performance compared to

00:09:51,340 --> 00:09:57,940
sha-256 password and it basically caches

00:09:55,930 --> 00:10:02,080
caches it after you have the initial

00:09:57,940 --> 00:10:04,210
auth and this is now the default as

00:10:02,080 --> 00:10:06,100
opposed to using MySQL native password

00:10:04,210 --> 00:10:09,430
this is one of the reasons may be why

00:10:06,100 --> 00:10:11,170
people maybe find a little problem

00:10:09,430 --> 00:10:14,890
migrating from say five seven two eight

00:10:11,170 --> 00:10:17,290
zero it's also on the things that will

00:10:14,890 --> 00:10:21,750
prevent you from easily migrating from

00:10:17,290 --> 00:10:24,820
say MySQL 8 0 to Maria DB 10 3 or 10 for

00:10:21,750 --> 00:10:27,940
caching shot to password only works with

00:10:24,820 --> 00:10:30,250
mysql Maria DB server still defaults to

00:10:27,940 --> 00:10:32,620
MySQL native password but has a secure

00:10:30,250 --> 00:10:34,270
variant called add two five five one

00:10:32,620 --> 00:10:39,490
nine which is based on the elliptical

00:10:34,270 --> 00:10:43,360
curve DSA meridia B does not support

00:10:39,490 --> 00:10:45,370
this so moving between the two not going

00:10:43,360 --> 00:10:47,950
to work however moving from Maria DB

00:10:45,370 --> 00:10:52,930
MySQL native password to MySQL eight

00:10:47,950 --> 00:10:55,480
will work now when it comes to MySQL you

00:10:52,930 --> 00:10:57,670
may also think about connectors if you

00:10:55,480 --> 00:11:00,130
use the MySQL connect as you get from

00:10:57,670 --> 00:11:03,970
dev MySQL comm they're now tied to a

00:11:00,130 --> 00:11:05,800
version number so every eight zero 16

00:11:03,970 --> 00:11:08,259
version for example everything gets

00:11:05,800 --> 00:11:09,999
bumped up now some people don't want

00:11:08,259 --> 00:11:11,589
use those connectors before maybe

00:11:09,999 --> 00:11:13,929
licensing reasons and they choose to use

00:11:11,589 --> 00:11:17,259
the Maria DV connectors so the Maria be

00:11:13,929 --> 00:11:19,720
connected see supports the ability to

00:11:17,259 --> 00:11:22,809
connect to a server which uses caching

00:11:19,720 --> 00:11:25,289
shot to a password and but however the

00:11:22,809 --> 00:11:27,549
ODBC and the Java connectors do not and

00:11:25,289 --> 00:11:29,319
these are of course the the reason

00:11:27,549 --> 00:11:32,679
around licensing is because Maria do is

00:11:29,319 --> 00:11:35,649
connect as a LGPL whereas the MySQL

00:11:32,679 --> 00:11:40,589
connect as a GPL with a fast exception

00:11:35,649 --> 00:11:40,589
so you can't embed it for a better taps

00:11:41,939 --> 00:11:47,019
plenty of ways to have password attacks

00:11:44,410 --> 00:11:50,429
weak passwords reusing the old passwords

00:11:47,019 --> 00:11:50,429
brute forces and so forth

00:11:51,089 --> 00:11:59,109
SSL how many run replication today with

00:11:55,869 --> 00:12:03,129
mysql or mariadb how many have ssl

00:11:59,109 --> 00:12:06,429
turned on no okay

00:12:03,129 --> 00:12:08,499
so that would have been the practical

00:12:06,429 --> 00:12:11,079
had we had a bit more time in setting up

00:12:08,499 --> 00:12:12,959
stuff it turns out everything goes

00:12:11,079 --> 00:12:16,149
around in plain text it's it's wonderful

00:12:12,959 --> 00:12:19,629
passwords insert statements update

00:12:16,149 --> 00:12:21,879
statements all plaintext now running

00:12:19,629 --> 00:12:22,480
this in a datacenter you trust maybe not

00:12:21,879 --> 00:12:26,129
so bad

00:12:22,480 --> 00:12:28,689
running this in the cloud kind of bad

00:12:26,129 --> 00:12:31,269
lots of people tend to think that is an

00:12:28,689 --> 00:12:34,299
overhead argument it turns out it's

00:12:31,269 --> 00:12:36,339
actually relatively negligible mysql 8

00:12:34,299 --> 00:12:38,319
actually turns on SSL based connections

00:12:36,339 --> 00:12:40,919
by default that does the SSL based

00:12:38,319 --> 00:12:43,809
connections does not mean replication

00:12:40,919 --> 00:12:47,319
this is the connection is gonna sell on

00:12:43,809 --> 00:12:50,350
it I highly recommend turning it on so

00:12:47,319 --> 00:12:53,739
again people say performance is an issue

00:12:50,350 --> 00:12:56,259
this is from Daniel van Eden he's

00:12:53,739 --> 00:12:58,720
compared against using yazal and open

00:12:56,259 --> 00:13:01,119
SSL as well as without SSL and it turns

00:12:58,720 --> 00:13:04,239
out that connection times are really not

00:13:01,119 --> 00:13:06,100
all that bad you don't really lose much

00:13:04,239 --> 00:13:10,720
performance by having a cell turned on

00:13:06,100 --> 00:13:14,079
always so if there's maybe one takeaway

00:13:10,720 --> 00:13:17,319
you have and from all of this today is

00:13:14,079 --> 00:13:20,350
you should turn on SSL in fact MySQL

00:13:17,319 --> 00:13:22,089
makes it easy for you now by having SSL

00:13:20,350 --> 00:13:24,639
set up so again upgrade

00:13:22,089 --> 00:13:26,439
something new can be good this is true

00:13:24,639 --> 00:13:30,129
for MySQL 5/7

00:13:26,439 --> 00:13:32,889
it's true for MySQL 8 it is setting up

00:13:30,129 --> 00:13:34,240
our adb is not as easier because you

00:13:32,889 --> 00:13:38,740
still have to actually fire up the

00:13:34,240 --> 00:13:40,899
OpenSSL command lots of people also

00:13:38,740 --> 00:13:43,689
worry about data theft

00:13:40,899 --> 00:13:46,329
you can encrypt the entire volume via

00:13:43,689 --> 00:13:49,509
something like luxor or you could just

00:13:46,329 --> 00:13:50,230
use maria DB server mysql at rest

00:13:49,509 --> 00:13:55,749
encryption

00:13:50,230 --> 00:13:59,230
now lots of PF percona server

00:13:55,749 --> 00:14:02,050
XO DB cluster or maria DB server Galera

00:13:59,230 --> 00:14:03,160
cluster one comes with encryption 4G

00:14:02,050 --> 00:14:06,040
cache and one doesn't

00:14:03,160 --> 00:14:08,829
so the Maria DB variant now actually has

00:14:06,040 --> 00:14:12,879
G cache encryption so it can be a fully

00:14:08,829 --> 00:14:14,769
encrypted cluster whereas the PXE

00:14:12,879 --> 00:14:18,209
variant and even the one that you get

00:14:14,769 --> 00:14:20,800
from coda ship is actually not encrypted

00:14:18,209 --> 00:14:26,220
the gallery cache is not encrypted so

00:14:20,800 --> 00:14:29,649
this is also little niggling issues now

00:14:26,220 --> 00:14:33,360
you can do select our global SQL mode

00:14:29,649 --> 00:14:35,920
and you'll actually see what kind of

00:14:33,360 --> 00:14:37,179
what kind of SQL mode you're running in

00:14:35,920 --> 00:14:40,420
and it turns out it's getting stricter

00:14:37,179 --> 00:14:42,959
and stricter as MySQL progresses my

00:14:40,420 --> 00:14:46,389
skills also increase the security

00:14:42,959 --> 00:14:49,569
availability as its progressed from 323

00:14:46,389 --> 00:14:52,509
right up until you know even 8 anywhere

00:14:49,569 --> 00:14:55,870
you have roles today and in 323 were

00:14:52,509 --> 00:15:01,269
just getting grants the ability for you

00:14:55,870 --> 00:15:05,740
to do so much in maybe the last 10 years

00:15:01,269 --> 00:15:08,709
is actually amazing now if you have

00:15:05,740 --> 00:15:11,230
scripts that you use the MySQL user

00:15:08,709 --> 00:15:13,269
table for like you manipulated in some

00:15:11,230 --> 00:15:15,399
way shape or form it is worth noting

00:15:13,269 --> 00:15:18,759
that the MySQL user table has changed in

00:15:15,399 --> 00:15:20,230
innate zero in fact it is also different

00:15:18,759 --> 00:15:22,389
from what you get in Murray to be

00:15:20,230 --> 00:15:24,699
service summary DB server is more likely

00:15:22,389 --> 00:15:26,649
to work with your old scripts but if

00:15:24,699 --> 00:15:28,660
you're migrating to a new variant of

00:15:26,649 --> 00:15:33,160
MySQL it's time to take a look at those

00:15:28,660 --> 00:15:36,850
scripts again now again we've had so

00:15:33,160 --> 00:15:38,800
many key features outside of the server

00:15:36,850 --> 00:15:42,660
in the MySQL ecosystem as well and I

00:15:38,800 --> 00:15:45,730
said maybe arguably the first biggest

00:15:42,660 --> 00:15:47,320
security solution came from McAfee it

00:15:45,730 --> 00:15:49,810
was an external contribution in the

00:15:47,320 --> 00:15:51,640
audit plugin but the other plugins now

00:15:49,810 --> 00:15:53,740
you have so many audit plug-in variants

00:15:51,640 --> 00:15:55,600
that you don't actually need to use the

00:15:53,740 --> 00:15:57,790
McAfee audit plug-in any longer like

00:15:55,600 --> 00:16:01,060
today it doesn't have it doesn't have to

00:15:57,790 --> 00:16:03,730
be on your choice and so many

00:16:01,060 --> 00:16:06,060
improvements from five five giving you

00:16:03,730 --> 00:16:10,090
things like pluggable authentication

00:16:06,060 --> 00:16:12,640
audit capabilities five six with more

00:16:10,090 --> 00:16:16,330
encrypted credentials five seven where

00:16:12,640 --> 00:16:18,490
you have a lot more secure by default

00:16:16,330 --> 00:16:21,010
with encryption available eight zero

00:16:18,490 --> 00:16:24,970
with roles LDAP authentication with

00:16:21,010 --> 00:16:27,520
Active Directory really be also no

00:16:24,970 --> 00:16:32,050
slouch here kept on pushing from the ten

00:16:27,520 --> 00:16:33,670
zero series with things like roles user

00:16:32,050 --> 00:16:35,380
stats which is a lightweight way of

00:16:33,670 --> 00:16:37,570
finding out what's what's going on with

00:16:35,380 --> 00:16:42,120
your server uses it's opposed to using

00:16:37,570 --> 00:16:44,170
performance schema encryption of course

00:16:42,120 --> 00:16:48,940
in fact it was the first to get

00:16:44,170 --> 00:16:50,650
encryption followed by MySQL having

00:16:48,940 --> 00:16:52,600
things like the utility user in Percona

00:16:50,650 --> 00:16:56,470
server great if you happen to you know

00:16:52,600 --> 00:16:59,110
be running say OpenStack or and you need

00:16:56,470 --> 00:17:01,900
to be able to do stuff to this do stuff

00:16:59,110 --> 00:17:09,520
as like an admin user without having

00:17:01,900 --> 00:17:13,260
access to the schema and so forth so

00:17:09,520 --> 00:17:16,480
root user with no password very very bad

00:17:13,260 --> 00:17:18,310
so MySQL five seven onwards made it

00:17:16,480 --> 00:17:19,540
strict so you get expired random

00:17:18,310 --> 00:17:21,400
password you've got to change it the

00:17:19,540 --> 00:17:24,220
more you grab a log you change it

00:17:21,400 --> 00:17:26,650
excellent now eight zero also ensures

00:17:24,220 --> 00:17:30,480
you have a you know good good secure

00:17:26,650 --> 00:17:32,920
base again anonymous users also removed

00:17:30,480 --> 00:17:35,980
password passwords keep on getting

00:17:32,920 --> 00:17:38,290
changed so you know will five five or

00:17:35,980 --> 00:17:42,190
Maria DB basically you just saw

00:17:38,290 --> 00:17:44,410
passwords no plug in five six basically

00:17:42,190 --> 00:17:46,570
starts specifying a plug-in so you'll

00:17:44,410 --> 00:17:48,970
notice it says MySQL native password as

00:17:46,570 --> 00:17:49,840
a as an option with the authentication

00:17:48,970 --> 00:17:52,720
string

00:17:49,840 --> 00:17:54,580
five seven also tells you to Sigma is

00:17:52,720 --> 00:17:57,279
given a password and the odds

00:17:54,580 --> 00:18:00,669
authentication string tells you what's

00:17:57,279 --> 00:18:02,049
available and and you you'll notice that

00:18:00,669 --> 00:18:05,379
now I'm not actually selecting the

00:18:02,049 --> 00:18:08,139
password field so I did select user

00:18:05,379 --> 00:18:09,789
password plug-in odd string but okay

00:18:08,139 --> 00:18:12,190
it's gone in five seven five seven

00:18:09,789 --> 00:18:13,809
onwards removes removes that and also

00:18:12,190 --> 00:18:15,399
gives you the ability to see things like

00:18:13,809 --> 00:18:18,210
password lifetime when it was last

00:18:15,399 --> 00:18:22,749
changed and so forth and eight zero

00:18:18,210 --> 00:18:24,279
makes even more changes by giving you

00:18:22,749 --> 00:18:25,690
the option to actually switch over to

00:18:24,279 --> 00:18:30,220
something like caching shot to a

00:18:25,690 --> 00:18:32,379
password which is now the default and

00:18:30,220 --> 00:18:37,210
also makes use of authentication strings

00:18:32,379 --> 00:18:42,220
again you can now set a minimum password

00:18:37,210 --> 00:18:45,580
policy for example and you could then

00:18:42,220 --> 00:18:48,100
validate it again to see against what

00:18:45,580 --> 00:18:50,679
kind of password you have so maybe you

00:18:48,100 --> 00:18:53,769
you you enter something with just you

00:18:50,679 --> 00:18:56,139
know six characters it's not great it'll

00:18:53,769 --> 00:18:58,720
tell you it's low but if you enter with

00:18:56,139 --> 00:19:00,340
a full stop punctuate some kind of

00:18:58,720 --> 00:19:04,360
punctuation mark and a number it

00:19:00,340 --> 00:19:05,860
improves and again validate password

00:19:04,360 --> 00:19:08,950
strength is something that you can

00:19:05,860 --> 00:19:12,369
totally see why show global variables

00:19:08,950 --> 00:19:16,679
this only works with MySQL it does not

00:19:12,369 --> 00:19:23,200
actually work with Maria DB so again

00:19:16,679 --> 00:19:25,480
simple differences across both the mysql

00:19:23,200 --> 00:19:27,519
password is not some form of encryption

00:19:25,480 --> 00:19:31,869
it's actually just basically a checksum

00:19:27,519 --> 00:19:34,059
using the sha-1 function so the MySQL

00:19:31,869 --> 00:19:36,519
manual contrarily will tell you that

00:19:34,059 --> 00:19:40,330
encryption performed by password is one

00:19:36,519 --> 00:19:42,220
way not reversible that's that that was

00:19:40,330 --> 00:19:44,440
not necessarily true actually

00:19:42,220 --> 00:19:47,980
MySQL passwords actually do not use a

00:19:44,440 --> 00:19:50,080
salt so generated password on one MySQL

00:19:47,980 --> 00:19:53,230
server using MySQL native password will

00:19:50,080 --> 00:19:56,580
match another one created another server

00:19:53,230 --> 00:19:59,649
which is why this is removed in MySQL 8

00:19:56,580 --> 00:20:01,750
so you can't do select password as

00:19:59,649 --> 00:20:03,470
password any longer this still works in

00:20:01,750 --> 00:20:05,539
Moorea DB though

00:20:03,470 --> 00:20:07,850
you really should move away from it

00:20:05,539 --> 00:20:13,250
since you know my skill deprecated it as

00:20:07,850 --> 00:20:16,100
well so again remove test databases you

00:20:13,250 --> 00:20:18,409
know sad passwords for root MySQL secure

00:20:16,100 --> 00:20:20,179
installation run this after you set up

00:20:18,409 --> 00:20:21,890
because it gets even better even with

00:20:20,179 --> 00:20:23,570
eight it actually allows you to turn on

00:20:21,890 --> 00:20:25,429
validated password plug-in and so forth

00:20:23,570 --> 00:20:28,940
it gets better with every every release

00:20:25,429 --> 00:20:31,429
in my opinion removing anonymous users

00:20:28,940 --> 00:20:33,110
and on the moment you have the ability

00:20:31,429 --> 00:20:35,230
to have an anonymous user you could

00:20:33,110 --> 00:20:37,580
actually decide to just be malicious and

00:20:35,230 --> 00:20:40,039
you know fill up the disk if you wanted

00:20:37,580 --> 00:20:44,480
to just by inserting you know random

00:20:40,039 --> 00:20:46,789
values so some of you is still on five

00:20:44,480 --> 00:20:48,860
six and you'll note that password expiry

00:20:46,789 --> 00:20:50,330
appeared in five six the password

00:20:48,860 --> 00:20:53,570
validation plug-in which I just showed

00:20:50,330 --> 00:20:55,010
you appeared MySQL configurator there

00:20:53,570 --> 00:20:56,870
but you probably don't want to use it

00:20:55,010 --> 00:20:58,669
and also gave you the ability to have a

00:20:56,870 --> 00:21:01,610
random root password upon installation

00:20:58,669 --> 00:21:04,429
in the in your home directory as a MySQL

00:21:01,610 --> 00:21:06,620
secret and password expiry is actually

00:21:04,429 --> 00:21:09,020
very useful so this is an example of

00:21:06,620 --> 00:21:10,580
using it so I've created a user demo

00:21:09,020 --> 00:21:13,280
identified by a password I've altered

00:21:10,580 --> 00:21:14,360
the user tried to connect and then it

00:21:13,280 --> 00:21:17,270
actually tells me that I need to

00:21:14,360 --> 00:21:19,460
actually reset the password to a current

00:21:17,270 --> 00:21:23,270
value you can totally run all this

00:21:19,460 --> 00:21:26,030
yourself also five seven totally

00:21:23,270 --> 00:21:27,110
improved password expert so you can

00:21:26,030 --> 00:21:28,760
actually have automatic password

00:21:27,110 --> 00:21:30,559
expiration and a default password

00:21:28,760 --> 00:21:32,840
lifetime as well so you could say you

00:21:30,559 --> 00:21:35,450
passwords expire after ninety days if

00:21:32,840 --> 00:21:38,169
you want you can also require to be

00:21:35,450 --> 00:21:42,260
changed every 90 days if you want or

00:21:38,169 --> 00:21:43,820
longer and you can also lock and unlock

00:21:42,260 --> 00:21:45,860
an account so you don't have to remove

00:21:43,820 --> 00:21:47,299
the user and the privileges associated

00:21:45,860 --> 00:21:49,909
with said use it we just lock the

00:21:47,299 --> 00:21:52,159
account if you know someone leaves eight

00:21:49,909 --> 00:21:54,260
has also got great improvements there

00:21:52,159 --> 00:21:56,720
you can actually require the new

00:21:54,260 --> 00:21:58,789
passwords not to use old one so you know

00:21:56,720 --> 00:22:01,909
lots of people every few moments they

00:21:58,789 --> 00:22:05,090
decide to change you know likely type OS

00:22:01,909 --> 00:22:07,400
DC OSD c1o SDC to you know he make rules

00:22:05,090 --> 00:22:08,510
to say that that's not allowed the

00:22:07,400 --> 00:22:11,090
password history actually actually

00:22:08,510 --> 00:22:14,059
exists now so you can do this globally

00:22:11,090 --> 00:22:15,860
or on a per user basis you can also

00:22:14,059 --> 00:22:16,370
require to enter the old password and

00:22:15,860 --> 00:22:18,380
then

00:22:16,370 --> 00:22:20,929
and a new password this is not available

00:22:18,380 --> 00:22:23,630
before so that you have double make

00:22:20,929 --> 00:22:24,980
doubly sure and password retry rules

00:22:23,630 --> 00:22:27,789
have been around actually since late

00:22:24,980 --> 00:22:30,950
later releases are five seven as well

00:22:27,789 --> 00:22:34,130
now why do I put this in the eight zero

00:22:30,950 --> 00:22:35,960
slide because it turns out when my scale

00:22:34,130 --> 00:22:37,429
makes a release even if you're getting

00:22:35,960 --> 00:22:39,799
checked you're getting actually feature

00:22:37,429 --> 00:22:43,100
enhancements even in minored minor

00:22:39,799 --> 00:22:46,190
releases so 5.7 dot twenty-one could

00:22:43,100 --> 00:22:47,990
have new features from twenty this is

00:22:46,190 --> 00:22:50,210
not necessarily how most people like to

00:22:47,990 --> 00:22:52,370
release software but if you follow the

00:22:50,210 --> 00:22:54,830
eight zero train you'll notice the eight

00:22:52,370 --> 00:22:56,630
dot zero dot 13 has got way more

00:22:54,830 --> 00:22:58,460
features than eight zero twelve it's not

00:22:56,630 --> 00:23:00,559
just bug fixes it's actually new

00:22:58,460 --> 00:23:05,779
features so read those release notes

00:23:00,559 --> 00:23:08,929
carefully marie-louise server has a

00:23:05,779 --> 00:23:10,610
validation plug-in it's it's very

00:23:08,929 --> 00:23:12,409
rudimentary it's got a simple password

00:23:10,610 --> 00:23:15,169
check so you know you can basically

00:23:12,409 --> 00:23:18,620
allow you to do ABCD one two three four

00:23:15,169 --> 00:23:21,140
five hash and that's obviously not good

00:23:18,620 --> 00:23:22,940
so you should definitely try chained

00:23:21,140 --> 00:23:25,520
loading it with a cracker password check

00:23:22,940 --> 00:23:27,020
so uses the crack Lib library and helps

00:23:25,520 --> 00:23:31,010
you make sure that people don't give

00:23:27,020 --> 00:23:33,590
crappy passwords I don't how many use

00:23:31,010 --> 00:23:34,970
Debian but if you do now when you

00:23:33,590 --> 00:23:38,570
install MySQL eight you will see this

00:23:34,970 --> 00:23:41,750
wonderful warning message it is it is

00:23:38,570 --> 00:23:44,059
there to tell you that moving to caching

00:23:41,750 --> 00:23:46,190
shadow password is recommended but

00:23:44,059 --> 00:23:48,200
there's no way to go back and this also

00:23:46,190 --> 00:23:50,510
means it's it's not good for you to you

00:23:48,200 --> 00:23:52,100
know migrates to save Maria DB so if

00:23:50,510 --> 00:23:54,950
you're gonna migrate to Maria DB from 8

00:23:52,100 --> 00:23:56,210
0 using caching shot to password all the

00:23:54,950 --> 00:23:58,779
users gonna have to recreate their

00:23:56,210 --> 00:24:02,840
passwords there's no like migration path

00:23:58,779 --> 00:24:05,179
so I guess this is where really the you

00:24:02,840 --> 00:24:07,760
know the fork has met the road now you

00:24:05,179 --> 00:24:09,500
gotta take two choices I mean even even

00:24:07,760 --> 00:24:11,539
before you'd have all these choices

00:24:09,500 --> 00:24:16,039
around features but now this is pretty

00:24:11,539 --> 00:24:17,720
clear so MySQL of course has the ability

00:24:16,039 --> 00:24:19,700
now not only to have connections that

00:24:17,720 --> 00:24:21,649
are SSL for client connections as well

00:24:19,700 --> 00:24:26,840
as admin connections it also has the

00:24:21,649 --> 00:24:30,500
ability to have SSL for application so

00:24:26,840 --> 00:24:32,570
definitely run as a cell because if you

00:24:30,500 --> 00:24:35,090
can actually look at port 3306 traffic

00:24:32,570 --> 00:24:38,810
to see clear text SQL statements so this

00:24:35,090 --> 00:24:41,900
is an example use any rep on East one

00:24:38,810 --> 00:24:44,000
and you can actually see the island

00:24:41,900 --> 00:24:46,370
cryptid stuff if I type select you know

00:24:44,000 --> 00:24:48,470
unencrypted on the host it likely show

00:24:46,370 --> 00:24:52,640
up very nicely

00:24:48,470 --> 00:24:55,340
for anyone to snoop on five seven on the

00:24:52,640 --> 00:24:57,800
other hand I actually try to select

00:24:55,340 --> 00:25:00,680
encrypted and it actually does not show

00:24:57,800 --> 00:25:02,930
you anything that a human can read

00:25:00,680 --> 00:25:05,180
anyway maybe there's some magic way to

00:25:02,930 --> 00:25:09,740
break as a cell I just don't know how to

00:25:05,180 --> 00:25:12,950
and you actually have to now force SSL

00:25:09,740 --> 00:25:16,250
equals zero to actually make an

00:25:12,950 --> 00:25:18,200
unencrypted connection so you have to go

00:25:16,250 --> 00:25:21,020
out of your way to make sure that you're

00:25:18,200 --> 00:25:24,200
not using as a cell and I'm glad to say

00:25:21,020 --> 00:25:26,000
eight zero makes this much much more

00:25:24,200 --> 00:25:28,520
interesting so you've got a lot more

00:25:26,000 --> 00:25:30,980
options you also need to set up the cert

00:25:28,520 --> 00:25:35,960
and the key and actually an 8-0 server

00:25:30,980 --> 00:25:38,840
by default can run in FIPS mode this all

00:25:35,960 --> 00:25:44,240
does work on Maria db2 except you gotta

00:25:38,840 --> 00:25:45,980
set it up manually again you can show a

00:25:44,240 --> 00:25:48,860
cell version as well as a cell saver

00:25:45,980 --> 00:25:51,230
these versions they also change as

00:25:48,860 --> 00:25:54,920
servers get release or as people find

00:25:51,230 --> 00:25:56,480
vulnerabilities and so forth five seven

00:25:54,920 --> 00:25:58,970
onwards includes this wonderful tool

00:25:56,480 --> 00:26:01,640
called mysql ssl RSA setup highly

00:25:58,970 --> 00:26:02,900
recommend you use it solves you you know

00:26:01,640 --> 00:26:06,410
solves your problem in less than a

00:26:02,900 --> 00:26:09,020
minute open ssl not hard to use but

00:26:06,410 --> 00:26:13,790
requires more manual commands together

00:26:09,020 --> 00:26:17,050
cell working this is more for you to

00:26:13,790 --> 00:26:23,410
read later hmm

00:26:17,050 --> 00:26:27,560
so again an example of a much stronger

00:26:23,410 --> 00:26:29,800
sha-256 password that is available but

00:26:27,560 --> 00:26:33,400
now i want to move on to authentication

00:26:29,800 --> 00:26:36,380
Pamela's education is fairly common

00:26:33,400 --> 00:26:38,450
murray DB was probably the first to come

00:26:36,380 --> 00:26:40,070
up with a plug-in followed by well i see

00:26:38,450 --> 00:26:40,730
my skills to first come up with a plugin

00:26:40,070 --> 00:26:43,400
but they

00:26:40,730 --> 00:26:45,470
you paid for it so people don't like to

00:26:43,400 --> 00:26:46,970
use it maybe some really we came up with

00:26:45,470 --> 00:26:49,600
an open-source version as well as

00:26:46,970 --> 00:26:53,870
Percona also with an open-source version

00:26:49,600 --> 00:26:56,660
configuring Pam is relatively easy you

00:26:53,870 --> 00:26:58,850
can just if you follow these exact

00:26:56,660 --> 00:27:01,820
commands which you should obviously not

00:26:58,850 --> 00:27:04,580
do because I'm actually just basically

00:27:01,820 --> 00:27:08,210
saying go go ahead and have the shadow

00:27:04,580 --> 00:27:12,860
user that you can actually install am

00:27:08,210 --> 00:27:16,130
fairly quickly for for a demo now if

00:27:12,860 --> 00:27:17,870
you're installing the Pam plug-in they

00:27:16,130 --> 00:27:20,960
are of course two different ways to do

00:27:17,870 --> 00:27:22,730
this percona server and Marie DB have

00:27:20,960 --> 00:27:26,480
different ways of installing it but the

00:27:22,730 --> 00:27:28,580
good news is the Pam plugin work from

00:27:26,480 --> 00:27:30,919
both Percona or Murray DB actually work

00:27:28,580 --> 00:27:33,620
with MySQL so you don't have to change

00:27:30,919 --> 00:27:38,260
servers either but you'll actually

00:27:33,620 --> 00:27:41,630
notice auth Pam show up as well so

00:27:38,260 --> 00:27:44,330
here's a quick demo again of Pam I've

00:27:41,630 --> 00:27:47,840
created a user external identified with

00:27:44,330 --> 00:27:50,980
AWS Pam if I try to login it says it's

00:27:47,840 --> 00:27:53,900
not available but if I add the user and

00:27:50,980 --> 00:27:56,179
create a password for said user and then

00:27:53,900 --> 00:27:58,010
I try to log in it actually tells me

00:27:56,179 --> 00:28:02,240
that I've logged in as external at local

00:27:58,010 --> 00:28:04,460
localhost so and of course the plug-in

00:28:02,240 --> 00:28:08,630
is all spam not MySQL native password or

00:28:04,460 --> 00:28:10,880
caching shot to password meridia B also

00:28:08,630 --> 00:28:14,120
comes with auth plugins add two five

00:28:10,880 --> 00:28:17,419
five one nine being binky Murray DB also

00:28:14,120 --> 00:28:20,840
has gssapi auth which is synonymous with

00:28:17,419 --> 00:28:22,370
Kerberos but sspi it also works Active

00:28:20,840 --> 00:28:24,080
Directory for what it's worth so you can

00:28:22,370 --> 00:28:26,360
actually use that now this particular

00:28:24,080 --> 00:28:28,429
plugin does not work on MySQL or / gonna

00:28:26,360 --> 00:28:30,410
serve it only works and really be so if

00:28:28,429 --> 00:28:34,100
you happen to have a Kerberos in install

00:28:30,410 --> 00:28:38,059
really be might be great for you also as

00:28:34,100 --> 00:28:40,309
named pipes on Windows I'm sure nobody

00:28:38,059 --> 00:28:42,559
here runs Windows anyway so we'll just

00:28:40,309 --> 00:28:44,809
ignore that one and the UNIX socket by

00:28:42,559 --> 00:28:48,080
default which allows you to log in as a

00:28:44,809 --> 00:28:50,409
UNIX user again I suggest if you have a

00:28:48,080 --> 00:28:52,640
multi-user system you turn that one off

00:28:50,409 --> 00:28:53,750
example of added two five five one nine

00:28:52,640 --> 00:28:57,200
at

00:28:53,750 --> 00:28:58,520
work again fairly simple except look

00:28:57,200 --> 00:29:01,430
I've done the Select additive of an

00:28:58,520 --> 00:29:05,570
unknown password as password and I've

00:29:01,430 --> 00:29:07,520
created the said user UNIX socket off

00:29:05,570 --> 00:29:10,280
you don't have to set this up but if you

00:29:07,520 --> 00:29:14,630
if you if you actually did this is an

00:29:10,280 --> 00:29:17,390
example of how one will do that so many

00:29:14,630 --> 00:29:19,190
auditing plug-ins but really the only

00:29:17,390 --> 00:29:21,770
ones that you should care about today

00:29:19,190 --> 00:29:24,050
are the percona audit plug-in and the

00:29:21,770 --> 00:29:26,740
MariaDB audit plugin because the MySQL

00:29:24,050 --> 00:29:26,740
won't cost money

00:29:27,970 --> 00:29:32,900
there are obviously all the new formats

00:29:30,890 --> 00:29:34,670
where old actually old and new actually

00:29:32,900 --> 00:29:38,810
spits out XML but you have also the

00:29:34,670 --> 00:29:42,860
ability to have the all new JSON as well

00:29:38,810 --> 00:29:47,690
as CSV which I also have quick examples

00:29:42,860 --> 00:29:49,370
off here now you'll notice that if you

00:29:47,690 --> 00:29:50,870
look at this audit log and you look at

00:29:49,370 --> 00:29:53,570
this one it's actually different because

00:29:50,870 --> 00:29:55,670
it turns out that the audit plug-in from

00:29:53,570 --> 00:29:57,770
percona is more compatible with the

00:29:55,670 --> 00:30:00,140
MySQL variant so you can use tools like

00:29:57,770 --> 00:30:04,630
MySQL crap but the other plug-in for

00:30:00,140 --> 00:30:08,330
Murray ODB is not quite quite similar so

00:30:04,630 --> 00:30:10,190
Murray we initially has extensions so

00:30:08,330 --> 00:30:11,480
it's got user filtering available but

00:30:10,190 --> 00:30:14,000
user filtering is also now available

00:30:11,480 --> 00:30:17,000
inside the Percona plugin for MySQL

00:30:14,000 --> 00:30:18,590
without extending the audit API but the

00:30:17,000 --> 00:30:20,690
only plugins really good because you can

00:30:18,590 --> 00:30:23,420
log serve activity so who connects the

00:30:20,690 --> 00:30:26,660
server what queries they run what tables

00:30:23,420 --> 00:30:29,600
are touched and so forth and highly

00:30:26,660 --> 00:30:30,860
recommend you make sure you use them the

00:30:29,600 --> 00:30:32,870
percona ones also got a bit more

00:30:30,860 --> 00:30:34,190
performance tuning available to it you

00:30:32,870 --> 00:30:38,540
know in the way that it writes those

00:30:34,190 --> 00:30:43,100
audit audit logs the disk okay

00:30:38,540 --> 00:30:44,750
we're racing through and secure storage

00:30:43,100 --> 00:30:47,240
say you want to totally encrypt your

00:30:44,750 --> 00:30:51,230
data at rest this is important for all

00:30:47,240 --> 00:30:53,180
kinds of compliance with Maury DB you

00:30:51,230 --> 00:30:55,580
can encrypt either a tablespace or a

00:30:53,180 --> 00:30:57,680
table whereas in MySQL you encrypt the

00:30:55,580 --> 00:30:59,060
whole tablespace I highly recommend you

00:30:57,680 --> 00:31:02,150
also choose to encrypt a whole

00:30:59,060 --> 00:31:05,600
tablespace not just the table overheads

00:31:02,150 --> 00:31:07,100
fairly low again typically less than a

00:31:05,600 --> 00:31:10,700
percent you run

00:31:07,100 --> 00:31:12,410
bench maybe 3% it's it's very well

00:31:10,700 --> 00:31:16,010
documented it's also very easy to get

00:31:12,410 --> 00:31:17,660
set up so getting set up I recommend

00:31:16,010 --> 00:31:20,270
this thing called a preset it's

00:31:17,660 --> 00:31:23,840
available in your mind at CNF daddy as

00:31:20,270 --> 00:31:25,580
an encryption preset the only good key

00:31:23,840 --> 00:31:27,890
server you could use is the Amazon key

00:31:25,580 --> 00:31:31,970
management server that's available this

00:31:27,890 --> 00:31:33,799
is maybe not ideal for you my SQL bin

00:31:31,970 --> 00:31:36,770
log of course is no way to decrypt the

00:31:33,799 --> 00:31:39,020
encrypted binary log so this can be a

00:31:36,770 --> 00:31:41,240
problem if you encounter replication

00:31:39,020 --> 00:31:43,370
issues but the G cache as I mentioned

00:31:41,240 --> 00:31:45,350
earlier is encrypted in Moorea DB server

00:31:43,370 --> 00:31:48,230
when you use Murray TV cholera cluster

00:31:45,350 --> 00:31:49,760
and if you want to use encryption you

00:31:48,230 --> 00:31:52,010
can't use extra backup anymore with

00:31:49,760 --> 00:31:53,780
Maria DB you have to use Maria backup

00:31:52,010 --> 00:31:56,630
which can actually encrypt and decrypt

00:31:53,780 --> 00:31:59,659
backups as well Maria backup is a fork

00:31:56,630 --> 00:32:03,590
of extra backup so if you and it works

00:31:59,659 --> 00:32:05,030
with like ten to ten 310 for mysql

00:32:03,590 --> 00:32:06,860
introduced encryption in five seven

00:32:05,030 --> 00:32:10,190
eleven as well

00:32:06,860 --> 00:32:13,070
it initially basically did not work with

00:32:10,190 --> 00:32:14,659
the renew undo binary logs but it

00:32:13,070 --> 00:32:17,230
totally does work with eight zero eight

00:32:14,659 --> 00:32:20,299
zero can actually run a fairly encrypted

00:32:17,230 --> 00:32:22,850
service however the external key

00:32:20,299 --> 00:32:27,260
management is only via key vault kind

00:32:22,850 --> 00:32:29,690
expensive so the alternative might be

00:32:27,260 --> 00:32:31,700
the Percona server vault

00:32:29,690 --> 00:32:33,169
so percona actually has a vault plugin

00:32:31,700 --> 00:32:37,100
which actually does work with mysql

00:32:33,169 --> 00:32:43,520
vault is open source ideal for many

00:32:37,100 --> 00:32:46,190
people to potentially use so i think if

00:32:43,520 --> 00:32:48,740
you if you want to stick to encryption

00:32:46,190 --> 00:32:51,620
you try the vault plugin or the amazon

00:32:48,740 --> 00:32:56,980
KMS plugin we don't do column encryption

00:32:51,620 --> 00:32:59,450
in mysql today now if you're running

00:32:56,980 --> 00:33:03,280
replication or a gallery cluster either

00:32:59,450 --> 00:33:06,590
PXE or ruby keeler cluster remember that

00:33:03,280 --> 00:33:08,450
iptables rules should always apply you

00:33:06,590 --> 00:33:11,000
want to encrypt your cluster traffic so

00:33:08,450 --> 00:33:13,429
generate keys enable encryption as well

00:33:11,000 --> 00:33:15,409
as for the SSD traffic and you want to

00:33:13,429 --> 00:33:18,799
turn on tablespace encryption this one

00:33:15,409 --> 00:33:20,259
totally works fully if you use again

00:33:18,799 --> 00:33:23,899
Ruby

00:33:20,259 --> 00:33:26,600
SQL salad rolls a roll is basically a

00:33:23,899 --> 00:33:28,639
user account with login disabled it's a

00:33:26,600 --> 00:33:31,070
memory based hash of flattened

00:33:28,639 --> 00:33:34,100
privileges that I exist for each and

00:33:31,070 --> 00:33:36,110
active each active role and it's we can

00:33:34,100 --> 00:33:38,269
have an optional host as well and you

00:33:36,110 --> 00:33:41,200
user can have several roles this is SQL

00:33:38,269 --> 00:33:45,009
standard came to me really be first is

00:33:41,200 --> 00:33:47,330
implemented in both MySQL and Maury DB

00:33:45,009 --> 00:33:49,490
generally it's it's the same with the

00:33:47,330 --> 00:33:53,450
exception of the graph ml in Moorea DB

00:33:49,490 --> 00:33:58,039
you can't really screw around SQL in

00:33:53,450 --> 00:34:01,100
terms of a fork data masking also

00:33:58,039 --> 00:34:03,529
available in MySQL Enterprise eight zero

00:34:01,100 --> 00:34:05,330
it's basically a method to hide your

00:34:03,529 --> 00:34:06,830
sensitive information by replacing the

00:34:05,330 --> 00:34:09,379
real values of substitutes or credit

00:34:06,830 --> 00:34:11,210
card details could be mastered something

00:34:09,379 --> 00:34:15,139
else if someone breaks in they walk away

00:34:11,210 --> 00:34:17,179
with crap however if you don't want to

00:34:15,139 --> 00:34:19,280
pay the Poorman substitute is to

00:34:17,179 --> 00:34:21,109
actually use proxy SQL which actually

00:34:19,280 --> 00:34:23,869
has data masking built-in and a proxy

00:34:21,109 --> 00:34:26,059
layer or max scale also has data masking

00:34:23,869 --> 00:34:30,079
when Mac scale has licensing issues it's

00:34:26,059 --> 00:34:32,839
got the BSL licensed eight zero as even

00:34:30,079 --> 00:34:34,639
more goodness because they've moved the

00:34:32,839 --> 00:34:37,399
data dictionary to in ODB you have got

00:34:34,639 --> 00:34:39,049
the ability of atomic ACLs and you can

00:34:37,399 --> 00:34:41,419
have dynamic privileges so you can add

00:34:39,049 --> 00:34:43,669
revoke check global privileges as well

00:34:41,419 --> 00:34:45,470
and the syntax is very similar similar

00:34:43,669 --> 00:34:47,990
to what you already used to is just by a

00:34:45,470 --> 00:34:50,450
grant promise talk a little bit about

00:34:47,990 --> 00:34:51,319
firewalls MySQL actually does come with

00:34:50,450 --> 00:34:53,750
a firewall

00:34:51,319 --> 00:34:55,879
however again you gotta pay for it so

00:34:53,750 --> 00:34:58,490
the permanent solution is proxy SQL or

00:34:55,879 --> 00:35:00,980
max scale so you notice that I've talked

00:34:58,490 --> 00:35:03,619
a little bit about proxy SQL in the last

00:35:00,980 --> 00:35:05,780
couple of slides if you don't know what

00:35:03,619 --> 00:35:07,460
that is it's a proxy it's a

00:35:05,780 --> 00:35:09,710
man-in-the-middle can handle multiple

00:35:07,460 --> 00:35:12,230
backends I highly recommend you go check

00:35:09,710 --> 00:35:16,940
out proxy SQL comm it's you know GPL

00:35:12,230 --> 00:35:19,069
open source by DBAs for DBAs and and so

00:35:16,940 --> 00:35:21,890
forth so check that out it's not

00:35:19,069 --> 00:35:22,910
security per se it's generally quite

00:35:21,890 --> 00:35:27,500
good

00:35:22,910 --> 00:35:29,559
middleware so I say a lot can be thought

00:35:27,500 --> 00:35:33,200
about authentication authorization

00:35:29,559 --> 00:35:34,100
encryption firewalls audits I've only

00:35:33,200 --> 00:35:36,560
just given you

00:35:34,100 --> 00:35:39,890
very quick touch on the surface of

00:35:36,560 --> 00:35:42,440
what's available I highly recommend you

00:35:39,890 --> 00:35:44,870
use the new software so that that today

00:35:42,440 --> 00:35:49,040
is MySQL eight or Murray to be ten three

00:35:44,870 --> 00:35:50,870
or forego NASA rate upgrade frequently

00:35:49,040 --> 00:35:52,790
it's really not a bad thing because

00:35:50,870 --> 00:35:56,150
features keep on coming in every point

00:35:52,790 --> 00:35:58,160
release so with that I'm well five

00:35:56,150 --> 00:35:59,780
minutes over but I hear that this is the

00:35:58,160 --> 00:36:06,220
last session so I'm actually open to

00:35:59,780 --> 00:36:06,220
questions possibly thank you very much

00:36:09,310 --> 00:36:14,270
slides already was net way so who

00:36:12,290 --> 00:36:19,000
organizes wonderful events so thank you

00:36:14,270 --> 00:36:19,000
so you can obviously refer to the slides

00:36:19,240 --> 00:36:23,840
thank you very much we still have time

00:36:21,560 --> 00:36:26,050
for questions I think are there any

00:36:23,840 --> 00:36:26,050
questions

00:36:26,920 --> 00:36:31,300
who's gonna upgrade to eight zero today

00:36:33,460 --> 00:36:37,480
requested there's one question

00:36:41,609 --> 00:36:49,029
do you know anything on the release date

00:36:44,470 --> 00:36:50,680
of Kona cluster on eight zero do I know

00:36:49,029 --> 00:36:52,930
anything about the release of per cannot

00:36:50,680 --> 00:36:57,210
actually be cluster eight zero yeah

00:36:52,930 --> 00:37:00,339
great question so an educated guess

00:36:57,210 --> 00:37:04,230
would be the last week of me when

00:37:00,339 --> 00:37:04,230
percona is having a conference in Austin

00:37:04,710 --> 00:37:11,109
it'll come with Galera three now an

00:37:08,710 --> 00:37:13,859
educated guess as to when Murray db10

00:37:11,109 --> 00:37:16,809
fall will be released with Galera four

00:37:13,859 --> 00:37:22,769
would probably be the week before that

00:37:16,809 --> 00:37:24,849
so think late some a 25th 24th 25th I

00:37:22,769 --> 00:37:27,999
expect Murray to be 10 fall will come

00:37:24,849 --> 00:37:31,420
out before protonix TV cluster 8 0 that

00:37:27,999 --> 00:37:33,609
of course will bring two variants of

00:37:31,420 --> 00:37:36,069
Galera available one three one four one

00:37:33,609 --> 00:37:37,749
has obviously got more features for like

00:37:36,069 --> 00:37:40,839
you know a large transaction support and

00:37:37,749 --> 00:37:42,220
so forth one doesn't but yes that would

00:37:40,839 --> 00:37:48,069
be my educated guess

00:37:42,220 --> 00:37:50,769
okay thanks so everything should be

00:37:48,069 --> 00:37:52,779
released in like less than two weeks in

00:37:50,769 --> 00:37:56,559
theory 10-4 is like in its second

00:37:52,779 --> 00:37:59,170
release candidate and you could I mean I

00:37:56,559 --> 00:38:02,529
ran a bunch of this examples with 10 for

00:37:59,170 --> 00:38:11,230
earlier anyway but I could give you

00:38:02,529 --> 00:38:13,610
screenshots so further questions okay no

00:38:11,230 --> 00:38:19,800
more questions thank you so much

00:38:13,610 --> 00:38:19,800
[Applause]

00:38:20,780 --> 00:38:26,380
[Music]

00:38:24,320 --> 00:38:26,380

YouTube URL: https://www.youtube.com/watch?v=awFjNX67DRk


