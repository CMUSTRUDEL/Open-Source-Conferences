Title: OSDC 2019: Mgmt Config: Advanced demos and Internals for hackers by James Shubin
Publication date: 2019-05-21
Playlist: OSDC 2019 | Open Source Data Center Conference
Description: 
	Mgmt is a real-time automation tool that is fast and safe. One goal of the tool is to allow users to model and manage infrastructure that was previously very difficult or impossible to do so previously.
This presentation will briefly introduce the tool and spend most of the time presenting and demoing some of the advanced and/or lesser-known features in the project. We’re certain the audience will have experienced many infrastructure tool problems before, and we hope to convince you via many live demos that our novel approaches are efficient and elegant.We’ll also dive into some of the internals of the project for new contributors who want to peer into the core code and become an advanced user of the project. Finally we’ll talk about some of the future designs we’re planning and make it easy for new users to get involved and help shape the project. This talk will assume some prior knowledge from any earlier mgmt talk. Make sure to come to the first talk or workshop if you plan on attending this session.

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de
Blog: http://blog.netways.de
Webinare: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh

https://www.frametraxx.de/
Captions: 
	00:00:01,140 --> 00:00:10,550
[Music]

00:00:15,780 --> 00:00:21,840
all right hi everyone who did not see my

00:00:19,890 --> 00:00:25,470
first talk or who has not seen an MGMT

00:00:21,840 --> 00:00:26,550
talk of me before it was your hand if

00:00:25,470 --> 00:00:27,750
you're really shy and you don't like

00:00:26,550 --> 00:00:28,019
raising your hand just show me where you

00:00:27,750 --> 00:00:30,390
are

00:00:28,019 --> 00:00:31,859
anyone know alright so there's gonna be

00:00:30,390 --> 00:00:35,250
some soup knowledge so I'm sorry for

00:00:31,859 --> 00:00:37,200
that but that's the deal so just a

00:00:35,250 --> 00:00:38,579
really quick intro I'm gonna just show

00:00:37,200 --> 00:00:40,050
you some stuff I showed some fun videos

00:00:38,579 --> 00:00:42,480
and my other talks but you don't get see

00:00:40,050 --> 00:00:44,100
them I'm a hacker I'm sitting down don't

00:00:42,480 --> 00:00:45,690
be afraid I'm still here I work on

00:00:44,100 --> 00:00:46,980
config management things I read a

00:00:45,690 --> 00:00:48,719
technical blog called the technical blog

00:00:46,980 --> 00:00:50,640
of James who's seen my blog before raise

00:00:48,719 --> 00:00:51,809
your hand and as always if you haven't

00:00:50,640 --> 00:00:53,370
seen it just raise my hand raise your

00:00:51,809 --> 00:00:55,649
hands we seem really popular everyone

00:00:53,370 --> 00:01:02,030
seen my blog that's a bad joke

00:00:55,649 --> 00:01:04,110
I'm tired sorry so just a background and

00:01:02,030 --> 00:01:06,030
there a lot of problems with puppets so

00:01:04,110 --> 00:01:08,250
I've sort of moved on and I've been

00:01:06,030 --> 00:01:10,260
working on a new tool recently though

00:01:08,250 --> 00:01:13,080
past puppet sort of everyday we're sort

00:01:10,260 --> 00:01:15,090
of like yeah milling like kubernetes has

00:01:13,080 --> 00:01:16,560
this yamo thing and ants pauses llamó

00:01:15,090 --> 00:01:18,479
thing and the thing we're really trying

00:01:16,560 --> 00:01:20,939
to solve the fundamental problem is how

00:01:18,479 --> 00:01:22,650
we actually communicate what we want to

00:01:20,939 --> 00:01:24,560
our servers and I just don't think that

00:01:22,650 --> 00:01:27,570
yeah Mel is the right way to do that so

00:01:24,560 --> 00:01:28,770
there's crazy stuff out there do we

00:01:27,570 --> 00:01:29,880
really want to be Hamill programmers

00:01:28,770 --> 00:01:31,650
does anyone here want to be mo

00:01:29,880 --> 00:01:35,300
programmers

00:01:31,650 --> 00:01:35,300
let's see I don't think so

00:01:37,630 --> 00:01:42,520
so this is a total nope if llamo was the

00:01:41,170 --> 00:01:44,619
solution I would love it but I just

00:01:42,520 --> 00:01:47,350
don't believe that it is and so

00:01:44,619 --> 00:01:49,270
everything is just totally nope and so I

00:01:47,350 --> 00:01:51,399
have this tool called MGMT you've seen a

00:01:49,270 --> 00:01:52,990
bit of it before so you haven't seen

00:01:51,399 --> 00:01:54,820
this talk you're gonna have to sort of

00:01:52,990 --> 00:01:56,200
memorize everything I teach you go see

00:01:54,820 --> 00:01:58,420
the main talk and then come back and

00:01:56,200 --> 00:02:00,310
like ah very interesting so there's two

00:01:58,420 --> 00:02:02,560
main parts again just to recap the

00:02:00,310 --> 00:02:03,940
engine in the language the engine does a

00:02:02,560 --> 00:02:06,009
lot of cool stuff kind of like puppet

00:02:03,940 --> 00:02:07,360
runs your graph of resources in parallel

00:02:06,009 --> 00:02:09,369
and the question is how do we build

00:02:07,360 --> 00:02:10,660
these graph or resources and in fact

00:02:09,369 --> 00:02:12,430
what we want to do is we want to build a

00:02:10,660 --> 00:02:14,080
graph of resources and then switch to

00:02:12,430 --> 00:02:16,810
another graph of resources and do this

00:02:14,080 --> 00:02:18,040
very quickly as often as we need to and

00:02:16,810 --> 00:02:19,600
the language that actually lets us

00:02:18,040 --> 00:02:21,400
describe it is a special custom

00:02:19,600 --> 00:02:23,860
domain-specific language that we've

00:02:21,400 --> 00:02:26,800
built it's very safe it's very powerful

00:02:23,860 --> 00:02:30,010
and it's very easy to reason about so

00:02:26,800 --> 00:02:31,630
you want to see some demos if you don't

00:02:30,010 --> 00:02:34,120
interact with me I will stop and leave

00:02:31,630 --> 00:02:36,010
so do you want to see some demos thank

00:02:34,120 --> 00:02:37,660
you thank you alright so we'll just

00:02:36,010 --> 00:02:42,310
start off with something funny what

00:02:37,660 --> 00:02:43,510
about Unicode so I'm just going to show

00:02:42,310 --> 00:02:47,049
you the examples is that big enough for

00:02:43,510 --> 00:02:48,880
everyone to see yeah okay so here's

00:02:47,049 --> 00:02:51,459
basically some code I have this string

00:02:48,880 --> 00:02:53,140
this unicode string that has all sorts

00:02:51,459 --> 00:02:55,150
of scary Unicode characters in it and

00:02:53,140 --> 00:02:57,190
there's a print resource that's what

00:02:55,150 --> 00:02:58,600
this is here this block right here and

00:02:57,190 --> 00:03:01,120
there's also a file resource and that

00:02:58,600 --> 00:03:03,549
will actually create that resource for

00:03:01,120 --> 00:03:08,010
example this file with the contents of

00:03:03,549 --> 00:03:08,010
that variable ok so let's just run that

00:03:09,060 --> 00:03:13,890
we'll run it here on the left over that

00:03:11,070 --> 00:03:16,620
left and over here but you can see if

00:03:13,890 --> 00:03:17,760
the file gets created so it does and the

00:03:16,620 --> 00:03:20,220
cool thing is we actually remove the

00:03:17,760 --> 00:03:20,970
file and cat the file you can see it

00:03:20,220 --> 00:03:22,860
comes right back

00:03:20,970 --> 00:03:24,960
these MGMT is running continuously and

00:03:22,860 --> 00:03:28,470
the resources also have events so you

00:03:24,960 --> 00:03:31,140
can actually remove the file and cat a

00:03:28,470 --> 00:03:33,660
file and even before the second part of

00:03:31,140 --> 00:03:36,150
the command runs it fixes it you can see

00:03:33,660 --> 00:03:38,010
MGMT's sleeping until something happens

00:03:36,150 --> 00:03:40,260
and it wakes up and it fixes the state

00:03:38,010 --> 00:03:42,270
and I've shown this before but if I just

00:03:40,260 --> 00:03:43,590
watch this is watch command will run

00:03:42,270 --> 00:03:48,450
something over and over really quickly

00:03:43,590 --> 00:03:50,010
oops there we go if we just run it over

00:03:48,450 --> 00:03:52,170
and over you can see MGMT's constantly

00:03:50,010 --> 00:03:53,190
waking up and fix the state and it's so

00:03:52,170 --> 00:03:56,070
fast you don't even see the file

00:03:53,190 --> 00:03:59,760
disappear that cool very cool and

00:03:56,070 --> 00:04:01,739
unicode right huh so that was that was

00:03:59,760 --> 00:04:03,300
the spin so that's just one demo so this

00:04:01,739 --> 00:04:04,800
is how I'm Jim T works for every kind of

00:04:03,300 --> 00:04:06,330
resource whether it's a file whether

00:04:04,800 --> 00:04:08,220
it's a package on your machine whether

00:04:06,330 --> 00:04:10,290
it's a real time living virtual machine

00:04:08,220 --> 00:04:13,890
resource or container or whatever you

00:04:10,290 --> 00:04:18,950
want okay let's see some more demos yes

00:04:13,890 --> 00:04:18,950
good okay quick question very quick yeah

00:04:20,150 --> 00:04:24,419
hang on I'll show you that right now so

00:04:22,260 --> 00:04:26,490
it's a great question so the first thing

00:04:24,419 --> 00:04:27,780
that was just a static example but as I

00:04:26,490 --> 00:04:29,550
said this language allows you to build

00:04:27,780 --> 00:04:31,050
real time or one of the goals of

00:04:29,550 --> 00:04:33,479
language is to like to build real time

00:04:31,050 --> 00:04:35,040
systems so what if the values that go

00:04:33,479 --> 00:04:36,390
into things are changing over time and

00:04:35,040 --> 00:04:38,280
what I'm going to show you right now is

00:04:36,390 --> 00:04:39,660
an example of that exactly so I have

00:04:38,280 --> 00:04:40,919
this date time function I've actually

00:04:39,660 --> 00:04:42,840
shown this in the other talk but I just

00:04:40,919 --> 00:04:45,900
want to show it again quickly date time

00:04:42,840 --> 00:04:47,669
function which takes the time puts it

00:04:45,900 --> 00:04:51,210
into this value combines it with this

00:04:47,669 --> 00:04:54,419
struct and if we run this right here on

00:04:51,210 --> 00:05:00,979
the left and I watch the file that it's

00:04:54,419 --> 00:05:03,900
making its making this file right here

00:05:00,979 --> 00:05:05,370
you can see I'm just pulling the file to

00:05:03,900 --> 00:05:07,080
see what actually I'm GMT is doing to it

00:05:05,370 --> 00:05:08,910
and it's changing it every second you

00:05:07,080 --> 00:05:11,220
can see this value going up you can see

00:05:08,910 --> 00:05:12,720
these things going up and so on and I

00:05:11,220 --> 00:05:15,510
made a little view meter so you can see

00:05:12,720 --> 00:05:17,760
if you make noise the actual microphone

00:05:15,510 --> 00:05:19,140
that's building that string is in my

00:05:17,760 --> 00:05:20,820
computer and listening so we're

00:05:19,140 --> 00:05:21,540
integrating all these real-time events

00:05:20,820 --> 00:05:24,570
and

00:05:21,540 --> 00:05:26,220
values into the resource and this

00:05:24,570 --> 00:05:27,750
happens to change every second but it

00:05:26,220 --> 00:05:29,040
might only change when the load goes up

00:05:27,750 --> 00:05:31,470
or when the load goes down and so on

00:05:29,040 --> 00:05:32,870
okay all this is covered more on my

00:05:31,470 --> 00:05:34,710
first talk so if you didn't catch that

00:05:32,870 --> 00:05:39,290
unfortunately we have to move on this is

00:05:34,710 --> 00:05:42,030
the advanced gary talk so first thing

00:05:39,290 --> 00:05:43,140
let's talk about meta parameters again

00:05:42,030 --> 00:05:44,400
this is the boring talk but it's got

00:05:43,140 --> 00:05:46,020
some importing important things you

00:05:44,400 --> 00:05:48,570
should know so all of these are meta

00:05:46,020 --> 00:05:50,730
parameters in MGMT and what that means

00:05:48,570 --> 00:05:54,000
meta parameters are things that modify

00:05:50,730 --> 00:05:57,330
all of the resources in a central way so

00:05:54,000 --> 00:05:59,430
all of this code is built into the MGMT

00:05:57,330 --> 00:06:01,350
tool itself and all of the resources

00:05:59,430 --> 00:06:03,690
support these things for example

00:06:01,350 --> 00:06:05,100
noop is something that says if you don't

00:06:03,690 --> 00:06:07,230
want the resource to actually do any

00:06:05,100 --> 00:06:09,570
work if you set new to true for that

00:06:07,230 --> 00:06:11,700
resource it won't do any work if the

00:06:09,570 --> 00:06:14,190
resource itself errors then the retry

00:06:11,700 --> 00:06:15,660
meta parameter will let you decide it

00:06:14,190 --> 00:06:17,670
should you retry and try and run the

00:06:15,660 --> 00:06:19,440
resource again or just fail completely

00:06:17,670 --> 00:06:21,120
and so on and there's a whole bunch of

00:06:19,440 --> 00:06:23,370
other ones one of them is called auto

00:06:21,120 --> 00:06:26,460
edges and here's the cool thing so if

00:06:23,370 --> 00:06:28,080
you look at my laptop or you'll see that

00:06:26,460 --> 00:06:30,720
something like this you'll have a graph

00:06:28,080 --> 00:06:33,150
of resources and the graphs actually

00:06:30,720 --> 00:06:34,710
each resource is the bubble these

00:06:33,150 --> 00:06:36,540
vertices and the arrows are their

00:06:34,710 --> 00:06:38,340
dependencies so in this particular graph

00:06:36,540 --> 00:06:40,290
you can see that this tau is a Tau say

00:06:38,340 --> 00:06:42,300
resource is a package that wants to be

00:06:40,290 --> 00:06:44,490
installed before this file gets created

00:06:42,300 --> 00:06:47,340
and so on and if I just show you a quick

00:06:44,490 --> 00:06:50,999
example of this I'm just going to show

00:06:47,340 --> 00:06:54,929
you Auto edges so the code is like this

00:06:50,999 --> 00:06:59,069
and what we do is we just have a package

00:06:54,929 --> 00:07:01,739
resource dr BD we have a file the folder

00:06:59,069 --> 00:07:04,589
for dr BD and the service and we say

00:07:01,739 --> 00:07:06,289
auto edge equals true for each one of

00:07:04,589 --> 00:07:08,429
them can you see that on the screen

00:07:06,289 --> 00:07:10,559
that's the default but I'm just putting

00:07:08,429 --> 00:07:12,389
it explicitly just for fun and we put in

00:07:10,559 --> 00:07:13,409
new to false but whatever but here's the

00:07:12,389 --> 00:07:16,349
cool thing watch what happens when we

00:07:13,409 --> 00:07:20,219
actually run this I need route because

00:07:16,349 --> 00:07:22,319
it's using the package so what's doing

00:07:20,219 --> 00:07:23,669
it's actually Auto engaño internet

00:07:22,319 --> 00:07:25,319
checking the package but I'll just show

00:07:23,669 --> 00:07:27,569
you right here what it actually did is

00:07:25,319 --> 00:07:29,489
it detected without saying anything to

00:07:27,569 --> 00:07:32,699
it that the package resource right here

00:07:29,489 --> 00:07:34,499
has to happen before the service and

00:07:32,699 --> 00:07:36,929
also that the package has happened

00:07:34,499 --> 00:07:38,699
before the file and so it automatically

00:07:36,929 --> 00:07:40,139
knew that it's silly to try and start

00:07:38,699 --> 00:07:42,149
the service but the package isn't

00:07:40,139 --> 00:07:43,949
installed so we can do this for all

00:07:42,149 --> 00:07:46,289
sorts of different resources to make it

00:07:43,949 --> 00:07:47,729
less error-prone when you build your

00:07:46,289 --> 00:07:49,499
catalogs so you don't get the

00:07:47,729 --> 00:07:51,360
dependencies wrong and we do this it's

00:07:49,499 --> 00:07:52,379
very simple we just inspect the package

00:07:51,360 --> 00:07:54,719
thing and if we find that there's a

00:07:52,379 --> 00:07:56,219
service unit file in there for system D

00:07:54,719 --> 00:07:58,800
then we know there's an edge make sense

00:07:56,219 --> 00:08:01,349
is that cool that's gonna save your butt

00:07:58,800 --> 00:08:04,349
right okay you want to see another

00:08:01,349 --> 00:08:06,149
example or no if I don't hear resounding

00:08:04,349 --> 00:08:07,379
yes is I'm gonna stop and leave and

00:08:06,149 --> 00:08:08,149
Burns gonna be mad do you want to see

00:08:07,379 --> 00:08:10,499
another demo

00:08:08,149 --> 00:08:12,959
all right slightly better so here's the

00:08:10,499 --> 00:08:14,039
graph I just showed before and it turns

00:08:12,959 --> 00:08:15,479
out if you were to run this graph

00:08:14,039 --> 00:08:16,949
there's actually a way that we could

00:08:15,479 --> 00:08:18,460
optimize this can anyone think about

00:08:16,949 --> 00:08:21,000
that

00:08:18,460 --> 00:08:22,590
how can we optimize their screaming out

00:08:21,000 --> 00:08:24,850
hmm

00:08:22,590 --> 00:08:27,490
so it's one big graph and there's two

00:08:24,850 --> 00:08:29,620
disconnected pieces that's true so it

00:08:27,490 --> 00:08:30,550
turns out these blue things so puppet if

00:08:29,620 --> 00:08:32,200
you're using puppet or one of these

00:08:30,550 --> 00:08:34,330
traditional tools what do we actually do

00:08:32,200 --> 00:08:36,220
as well as startup it would install say

00:08:34,330 --> 00:08:38,560
the cows a package and it'll shut down

00:08:36,220 --> 00:08:40,960
or move to the next resource rather shut

00:08:38,560 --> 00:08:42,760
down the package manager install SL do

00:08:40,960 --> 00:08:44,170
the same thing one at a time and every

00:08:42,760 --> 00:08:45,550
time you start up the package manager

00:08:44,170 --> 00:08:47,350
and shut it down there's quite a lot of

00:08:45,550 --> 00:08:49,060
overhead and doing that so we actually

00:08:47,350 --> 00:08:51,010
do for certain resources that support

00:08:49,060 --> 00:08:52,960
this Auto grouping feature we actually

00:08:51,010 --> 00:08:54,700
will analyze the graph with a special

00:08:52,960 --> 00:08:56,200
algorithm and it will actually group

00:08:54,700 --> 00:08:57,880
together things that don't have

00:08:56,200 --> 00:08:59,680
dependencies on each other and which can

00:08:57,880 --> 00:09:01,540
be combined into a single operation so

00:08:59,680 --> 00:09:04,390
this graph and this graph are actually

00:09:01,540 --> 00:09:07,210
identical except that now they're

00:09:04,390 --> 00:09:08,680
merging a few vertices which really

00:09:07,210 --> 00:09:10,390
don't have any dependency so in this

00:09:08,680 --> 00:09:12,370
case we'll actually run and it will do

00:09:10,390 --> 00:09:14,710
all of those in a single operation which

00:09:12,370 --> 00:09:17,760
will make things way way way faster cool

00:09:14,710 --> 00:09:21,250
you want to see a quick demo of that

00:09:17,760 --> 00:09:24,820
okay that was a quiet less I think this

00:09:21,250 --> 00:09:27,160
is the right demo let's see so you can

00:09:24,820 --> 00:09:29,080
see right here this is the basically the

00:09:27,160 --> 00:09:30,190
log message and it says auto grouping so

00:09:29,080 --> 00:09:32,560
what it actually does is it does it

00:09:30,190 --> 00:09:35,290
stepwise so it grouped power top this

00:09:32,560 --> 00:09:37,480
package into the cow say and it grouped

00:09:35,290 --> 00:09:39,640
SL into cows a so these are all now

00:09:37,480 --> 00:09:40,950
grouped into one big versi and let's

00:09:39,640 --> 00:09:44,980
just test it this works

00:09:40,950 --> 00:09:50,640
cow say hey okay that works and we can

00:09:44,980 --> 00:09:54,970
even have fun we can do cows a house a

00:09:50,640 --> 00:09:56,620
hay OS DC and we can even go crazy just

00:09:54,970 --> 00:09:59,980
to really check the cows a is working

00:09:56,620 --> 00:10:01,920
properly and that's completely nonsense

00:09:59,980 --> 00:10:06,520
but it works okay makes sense

00:10:01,920 --> 00:10:09,460
does this make sense hello Germany guten

00:10:06,520 --> 00:10:12,490
morgen okay so move on you wanna see

00:10:09,460 --> 00:10:15,820
more stuff or we stop do you want to see

00:10:12,490 --> 00:10:18,160
more demos alright okay so edges so how

00:10:15,820 --> 00:10:21,430
to express dependencies so there's a few

00:10:18,160 --> 00:10:23,470
ways you actually we can actually create

00:10:21,430 --> 00:10:24,940
a dependency so whether the first

00:10:23,470 --> 00:10:27,790
resource points the second or vice-versa

00:10:24,940 --> 00:10:29,470
so that's with depend or before but in

00:10:27,790 --> 00:10:31,090
addition dependency is kind of like

00:10:29,470 --> 00:10:32,320
puppet like before and require the same

00:10:31,090 --> 00:10:34,390
sort of idea

00:10:32,320 --> 00:10:36,420
we can also have listen and notify which

00:10:34,390 --> 00:10:38,590
means that when it note when a resource

00:10:36,420 --> 00:10:40,480
changes state it will actually send a

00:10:38,590 --> 00:10:42,490
message along that edge to the next

00:10:40,480 --> 00:10:44,110
thing I'll just show you the code this

00:10:42,490 --> 00:10:46,060
is a very boring demo so it's not fun

00:10:44,110 --> 00:10:48,790
but and all this stuff isn't yet so you

00:10:46,060 --> 00:10:51,660
can do this at home this is basically

00:10:48,790 --> 00:10:54,160
what it looks like so right here we have

00:10:51,660 --> 00:10:57,130
before so we have our exec resource

00:10:54,160 --> 00:10:58,840
right here it's doing something and it's

00:10:57,130 --> 00:11:00,850
saying that it should happen before

00:10:58,840 --> 00:11:02,590
exact to and exact to is just sitting

00:11:00,850 --> 00:11:04,810
there by itself okay pretty

00:11:02,590 --> 00:11:10,060
straightforward not super fun let's move

00:11:04,810 --> 00:11:12,130
on so here's the thing so the really

00:11:10,060 --> 00:11:13,900
cool thing is when you write code and it

00:11:12,130 --> 00:11:14,650
runs and you never have to wake up in

00:11:13,900 --> 00:11:17,440
the middle of the night because it

00:11:14,650 --> 00:11:18,130
crashed right like who loves programs

00:11:17,440 --> 00:11:21,220
that crash

00:11:18,130 --> 00:11:22,780
just be honest raise your hand yeah we

00:11:21,220 --> 00:11:24,430
have the sarcastic man over here raising

00:11:22,780 --> 00:11:26,320
his hand for no reason so how do we make

00:11:24,430 --> 00:11:28,720
it so in puppet for example there's this

00:11:26,320 --> 00:11:30,850
problem with undef and you might have to

00:11:28,720 --> 00:11:32,800
like this undef value and if you manage

00:11:30,850 --> 00:11:35,800
to pass an undef value into the content

00:11:32,800 --> 00:11:38,050
field or in some of these fields or if

00:11:35,800 --> 00:11:39,340
you try and do undef plus for all these

00:11:38,050 --> 00:11:41,530
things will basically cause puppet to

00:11:39,340 --> 00:11:42,790
crash not crash but shut down and you're

00:11:41,530 --> 00:11:44,680
like error this doesn't make sense

00:11:42,790 --> 00:11:47,260
so we want to build a safe language and

00:11:44,680 --> 00:11:48,820
how we do it is for this example we're

00:11:47,260 --> 00:11:50,260
look at the file resource and at the

00:11:48,820 --> 00:11:53,260
bottom here you can see I have this file

00:11:50,260 --> 00:11:55,600
temp foo it has some parameter called

00:11:53,260 --> 00:11:57,160
James and the question is do I want to

00:11:55,600 --> 00:11:59,560
just create the file and ensure that the

00:11:57,160 --> 00:12:01,420
file exists or do I also want to specify

00:11:59,560 --> 00:12:02,800
the content right you might just want to

00:12:01,420 --> 00:12:04,390
ensure that there's a content that's

00:12:02,800 --> 00:12:05,890
there but not actually say what's in the

00:12:04,390 --> 00:12:08,280
contents and that's the difference

00:12:05,890 --> 00:12:10,690
between undefined the content or

00:12:08,280 --> 00:12:11,800
specifying the content and the way we do

00:12:10,690 --> 00:12:14,620
this you can actually just specify

00:12:11,800 --> 00:12:16,660
content equals some string or we can use

00:12:14,620 --> 00:12:19,270
this little colon equal symbol which is

00:12:16,660 --> 00:12:21,430
called the Elvis operator and it takes a

00:12:19,270 --> 00:12:22,660
boolean value right before it's kind of

00:12:21,430 --> 00:12:24,820
like a ternary but it's missing one of

00:12:22,660 --> 00:12:26,710
the conditions and this means if it's

00:12:24,820 --> 00:12:29,050
true it will actually use this string if

00:12:26,710 --> 00:12:31,900
it's not true it'll be undefined and

00:12:29,050 --> 00:12:34,480
this is actually the way we avoid any

00:12:31,900 --> 00:12:36,250
nil values in our program so there's no

00:12:34,480 --> 00:12:38,740
such thing as a null or a nil or

00:12:36,250 --> 00:12:40,420
undefined in the language and because we

00:12:38,740 --> 00:12:42,370
don't have those values we can guarantee

00:12:40,420 --> 00:12:44,650
that there's never an operation where a

00:12:42,370 --> 00:12:46,140
string tries to add together with a nil

00:12:44,650 --> 00:12:49,290
which would crash everything

00:12:46,140 --> 00:12:51,300
that makes sense so I can show you a

00:12:49,290 --> 00:12:57,300
example of this but again it's super

00:12:51,300 --> 00:12:59,310
boring I'll show you right here again

00:12:57,300 --> 00:13:01,019
all this is in github so very simple

00:12:59,310 --> 00:13:01,529
that's exactly the same example that I

00:13:01,019 --> 00:13:04,260
showed you

00:13:01,529 --> 00:13:07,399
so this boolean here is true so we'll

00:13:04,260 --> 00:13:10,050
run this and if we cat

00:13:07,399 --> 00:13:13,079
MGMT Elvis you can see that it has the

00:13:10,050 --> 00:13:17,040
right thing if we remove it it comes

00:13:13,079 --> 00:13:20,790
right back and if we move this to false

00:13:17,040 --> 00:13:24,779
just for fun and save we run the same

00:13:20,790 --> 00:13:29,790
thing so the file is there but if we

00:13:24,779 --> 00:13:30,959
echo foo into this file you can see that

00:13:29,790 --> 00:13:32,700
it did not change they change the

00:13:30,959 --> 00:13:34,470
content right so it's guaranteeing the

00:13:32,700 --> 00:13:38,120
files there if we actually remove the

00:13:34,470 --> 00:13:42,420
file you can see that it put it back

00:13:38,120 --> 00:13:43,620
files there but it has no contents was

00:13:42,420 --> 00:13:43,860
it okay can you see at the bottom of the

00:13:43,620 --> 00:13:45,750
screen

00:13:43,860 --> 00:13:47,760
you can sort of see what's happening

00:13:45,750 --> 00:13:49,230
alright so that's how we do that and

00:13:47,760 --> 00:13:51,360
many parameters can accept this

00:13:49,230 --> 00:13:54,839
undefined and that's how they're passed

00:13:51,360 --> 00:13:56,220
in with the nil any questions that make

00:13:54,839 --> 00:13:58,130
sense are you completely lost who's

00:13:56,220 --> 00:14:00,720
really lost and confused raise your hand

00:13:58,130 --> 00:14:03,149
nobody who is thinking this is awesome

00:14:00,720 --> 00:14:06,800
just let me know that's pretty good all

00:14:03,149 --> 00:14:10,079
right so do you want to see another demo

00:14:06,800 --> 00:14:12,060
do you want to see another demo okay

00:14:10,079 --> 00:14:13,829
good

00:14:12,060 --> 00:14:16,170
just some standard library functions

00:14:13,829 --> 00:14:19,380
here's a fun one just for showing you

00:14:16,170 --> 00:14:24,510
what's possible so I have this code here

00:14:19,380 --> 00:14:28,290
samples lying and I want to show you and

00:14:24,510 --> 00:14:30,660
one so we have packages we have built-in

00:14:28,290 --> 00:14:34,370
system packages that you can use one of

00:14:30,660 --> 00:14:36,990
them is FMT one of them is sis and

00:14:34,370 --> 00:14:39,149
here's just the sister and it has this

00:14:36,990 --> 00:14:41,850
env thing which looks up the environment

00:14:39,149 --> 00:14:43,860
variables so we have that and we can

00:14:41,850 --> 00:14:45,589
just print if sis tart hand has

00:14:43,860 --> 00:14:48,480
environment we're just doing like a

00:14:45,589 --> 00:14:51,839
boolean right here so if this function

00:14:48,480 --> 00:14:53,579
is true we'll print some contents and if

00:14:51,839 --> 00:14:55,620
not it's missing so let's run it and

00:14:53,579 --> 00:15:00,120
we'll see you can see that it printed

00:14:55,620 --> 00:15:04,020
out go path is unmai go path right

00:15:00,120 --> 00:15:07,110
and if I were to unset gopath and run it

00:15:04,020 --> 00:15:08,520
again you can see now it says go path is

00:15:07,110 --> 00:15:10,560
missing cool

00:15:08,520 --> 00:15:12,300
so a little things all these tiny little

00:15:10,560 --> 00:15:14,460
utility functions have been are in there

00:15:12,300 --> 00:15:16,650
we have one of the MGMT hackers who's

00:15:14,460 --> 00:15:18,510
actually generating all the functions

00:15:16,650 --> 00:15:20,130
from the standard library so you should

00:15:18,510 --> 00:15:22,650
have basically more all the functions

00:15:20,130 --> 00:15:23,940
that are in going very shortly and if

00:15:22,650 --> 00:15:25,500
you want a new function that's missing

00:15:23,940 --> 00:15:30,300
they're very easy to add we basically

00:15:25,500 --> 00:15:32,460
just add the mapping from going to mcl

00:15:30,300 --> 00:15:33,480
or you can just write a custom function

00:15:32,460 --> 00:15:35,400
that does something that we don't have

00:15:33,480 --> 00:15:36,930
at all all these things are needed our

00:15:35,400 --> 00:15:39,570
standard library isn't huge but it's

00:15:36,930 --> 00:15:44,520
growing and hopefully it helps quick

00:15:39,570 --> 00:15:46,529
question yeah so actually for this

00:15:44,520 --> 00:15:47,940
function you can or not it depends on

00:15:46,529 --> 00:15:49,260
which function you use this one does not

00:15:47,940 --> 00:15:50,790
have that implemented because in general

00:15:49,260 --> 00:15:52,920
you don't actually change environment

00:15:50,790 --> 00:15:54,960
variables from in the program so it

00:15:52,920 --> 00:15:57,330
doesn't actually make sense for n but

00:15:54,960 --> 00:15:58,830
other functions do support it maybe

00:15:57,330 --> 00:16:00,330
there's some proc hack where you can

00:15:58,830 --> 00:16:03,240
change the environment but I think it's

00:16:00,330 --> 00:16:06,480
inherited so I don't think it's actually

00:16:03,240 --> 00:16:08,130
possible but I don't know yeah so that's

00:16:06,480 --> 00:16:11,700
just one example you might see another

00:16:08,130 --> 00:16:13,410
example burned do I show them or do I

00:16:11,700 --> 00:16:17,830
stop

00:16:13,410 --> 00:16:19,690
all right so so how do we do it eration

00:16:17,830 --> 00:16:21,640
so we want to funk so this language is

00:16:19,690 --> 00:16:22,839
basically something called an FRP so

00:16:21,640 --> 00:16:25,660
it's a functional reactive programming

00:16:22,839 --> 00:16:27,640
language and we do this to make it very

00:16:25,660 --> 00:16:29,950
safe because we don't want random like

00:16:27,640 --> 00:16:31,570
off-by-one errors and crashes and things

00:16:29,950 --> 00:16:33,190
and the reason why we don't want those

00:16:31,570 --> 00:16:35,620
things his kids if you make it off by

00:16:33,190 --> 00:16:38,380
one error you might destroy a whole data

00:16:35,620 --> 00:16:39,970
center right that's that's super bad

00:16:38,380 --> 00:16:41,740
right you're having this all this

00:16:39,970 --> 00:16:43,300
infrastructure as code stuff and if you

00:16:41,740 --> 00:16:46,029
get really fancy you're gonna be using

00:16:43,300 --> 00:16:48,160
MGMT to build and destroy data centers

00:16:46,029 --> 00:16:49,779
based on the load and other variables so

00:16:48,160 --> 00:16:51,490
we don't want bugs all right because

00:16:49,779 --> 00:16:53,890
your boss is gonna be super angry if

00:16:51,490 --> 00:16:55,720
you're like yeah I took out like you

00:16:53,890 --> 00:16:57,970
know the Deutschland data center sorry

00:16:55,720 --> 00:17:00,610
boss Amazon is down so not a good idea

00:16:57,970 --> 00:17:03,310
and so we don't actually have native for

00:17:00,610 --> 00:17:06,280
loops and this kind of primitive error

00:17:03,310 --> 00:17:08,319
buggy iteration in MGMT but we do want

00:17:06,280 --> 00:17:10,480
to do iteration so let me show you how

00:17:08,319 --> 00:17:14,640
this works there's lots of ways but let

00:17:10,480 --> 00:17:19,059
me show you a few so I'm gonna show you

00:17:14,640 --> 00:17:20,140
this lovely example okay it's eration so

00:17:19,059 --> 00:17:23,079
here's the code that i'm going to show

00:17:20,140 --> 00:17:24,429
you so this is some end MGMT code we're

00:17:23,079 --> 00:17:26,199
gonna try and guess what it's gonna do

00:17:24,429 --> 00:17:28,270
and then I'm gonna run it so over here

00:17:26,199 --> 00:17:29,740
we just have a print resource and we're

00:17:28,270 --> 00:17:32,140
gonna try and count how many resources

00:17:29,740 --> 00:17:35,080
is gonna produce and how many edges it's

00:17:32,140 --> 00:17:37,809
gonna produce so if we count this this

00:17:35,080 --> 00:17:40,750
here is just one resource so everyone

00:17:37,809 --> 00:17:42,760
stick up one finger for one okay or in

00:17:40,750 --> 00:17:44,770
your mind down here we have a print

00:17:42,760 --> 00:17:46,330
resource and it actually instead of

00:17:44,770 --> 00:17:48,070
having a single string which is the

00:17:46,330 --> 00:17:50,590
unique identifier for the print resource

00:17:48,070 --> 00:17:52,900
or for any other resource we have a list

00:17:50,590 --> 00:17:54,970
and it's this list here which has two

00:17:52,900 --> 00:17:56,770
strings in it so that's kind of a

00:17:54,970 --> 00:17:58,540
built-in form of iteration if you have a

00:17:56,770 --> 00:18:01,090
list and you pass it into the name field

00:17:58,540 --> 00:18:04,090
that is going to use both of those

00:18:01,090 --> 00:18:05,669
things so together how many resources so

00:18:04,090 --> 00:18:10,919
far do we have

00:18:05,669 --> 00:18:12,749
louder ein-zwei-drei right good okay so

00:18:10,919 --> 00:18:17,040
we have three so far down here we have

00:18:12,749 --> 00:18:19,530
an inline list so how many total is that

00:18:17,040 --> 00:18:23,700
five yeah and down here we have more

00:18:19,530 --> 00:18:26,650
names and how many is that total

00:18:23,700 --> 00:18:27,970
how many yeah perfect that's eight I

00:18:26,650 --> 00:18:29,140
think it's eight so I need you to hold

00:18:27,970 --> 00:18:31,210
up eight fingers you're gonna memorize

00:18:29,140 --> 00:18:33,820
this value for us thank you don't move

00:18:31,210 --> 00:18:36,400
now now let's talk about the edges okay

00:18:33,820 --> 00:18:39,549
so right here this is a resource all by

00:18:36,400 --> 00:18:42,250
itself zero edges down here no edges

00:18:39,549 --> 00:18:44,770
down here we have this depend remember

00:18:42,250 --> 00:18:47,980
we talked about depend before and it is

00:18:44,770 --> 00:18:52,720
saying these two resources depend on

00:18:47,980 --> 00:18:55,710
print and then this variable so how many

00:18:52,720 --> 00:18:55,710
edges would that be

00:18:56,810 --> 00:19:02,670
how many it's four right because we have

00:19:00,210 --> 00:19:04,800
two resources and they both are pointing

00:19:02,670 --> 00:19:08,940
to names which is also two resources so

00:19:04,800 --> 00:19:10,350
2 times 2 is come on this is doing math

00:19:08,940 --> 00:19:14,340
with James is we're easy

00:19:10,350 --> 00:19:15,540
there's no calculus 2 times 2 is ok some

00:19:14,340 --> 00:19:17,550
of you are losing your general education

00:19:15,540 --> 00:19:20,490
diplomas after we're gonna have to talk

00:19:17,550 --> 00:19:23,210
about so 2 times 2 is 4 plus all this

00:19:20,490 --> 00:19:27,030
down here so we have more names here and

00:19:23,210 --> 00:19:29,190
right here we have this this edge but

00:19:27,030 --> 00:19:30,360
it's defined apart from the resources so

00:19:29,190 --> 00:19:32,070
you can just have it kind of like puppet

00:19:30,360 --> 00:19:34,230
does except the arrow actually points in

00:19:32,070 --> 00:19:35,730
the correct direction so we have to we

00:19:34,230 --> 00:19:38,190
have some number of resources here and

00:19:35,730 --> 00:19:40,340
those point to some number of resources

00:19:38,190 --> 00:19:42,720
here so on the left how many do we have

00:19:40,340 --> 00:19:46,890
names

00:19:42,720 --> 00:19:50,810
how many is this that's two and over

00:19:46,890 --> 00:19:54,200
here how many is here that's 3 so 2

00:19:50,810 --> 00:19:57,330
times 3 is

00:19:54,200 --> 00:19:58,710
six it's so much like I don't know is

00:19:57,330 --> 00:20:01,700
this a trick question no it's not a

00:19:58,710 --> 00:20:06,780
trick question so 2 times 3 is 6 plus

00:20:01,700 --> 00:20:08,670
the 4 we talked so 4 plus 6 is okay so

00:20:06,780 --> 00:20:10,920
that's 10 edges and how many resources

00:20:08,670 --> 00:20:12,270
did we have ok let's run this you're

00:20:10,920 --> 00:20:14,820
ready to run this this was the longest

00:20:12,270 --> 00:20:17,730
math example I've ever done okay

00:20:14,820 --> 00:20:18,840
iteration we're gonna run this and if

00:20:17,730 --> 00:20:21,150
you look it'll actually tell you right

00:20:18,840 --> 00:20:21,450
here in the graph eight vertices and 10

00:20:21,150 --> 00:20:23,070
edges

00:20:21,450 --> 00:20:26,070
congratulations give yourself a round of

00:20:23,070 --> 00:20:26,930
applause you are good at math very good

00:20:26,070 --> 00:20:29,070
cool

00:20:26,930 --> 00:20:31,110
silly stuff so that's how we do it

00:20:29,070 --> 00:20:32,460
eration okay there's other forms of

00:20:31,110 --> 00:20:34,950
innovation here's the math if you want

00:20:32,460 --> 00:20:36,180
to see the work map and reduce we don't

00:20:34,950 --> 00:20:37,560
have these functions in core yet but

00:20:36,180 --> 00:20:40,500
we're gonna add these functions as well

00:20:37,560 --> 00:20:41,940
and some other fun things so basic

00:20:40,500 --> 00:20:44,280
iteration possible all right

00:20:41,940 --> 00:20:46,500
so OS start read file so let's just run

00:20:44,280 --> 00:20:51,690
this example because I'm I have to run

00:20:46,500 --> 00:20:53,820
at a time and this is oops there we go

00:20:51,690 --> 00:20:56,160
so here's the simple example we have a

00:20:53,820 --> 00:20:59,250
file resource that's temp slash output

00:20:56,160 --> 00:21:02,430
and a content which is whatever is

00:20:59,250 --> 00:21:07,020
returned from this OS read file and it's

00:21:02,430 --> 00:21:10,380
looking at temp input okay so let's run

00:21:07,020 --> 00:21:14,550
this over here okay so I'm running MGMT

00:21:10,380 --> 00:21:19,350
here and then gonna echo hey OS DC into

00:21:14,550 --> 00:21:21,420
slash temp input okay and over here just

00:21:19,350 --> 00:21:24,480
so you can see what's going on actually

00:21:21,420 --> 00:21:27,630
just watch - and zero point one cat

00:21:24,480 --> 00:21:29,220
slash temp output hopefully it's gonna

00:21:27,630 --> 00:21:31,110
see the right thing so it says hey o

00:21:29,220 --> 00:21:32,910
East OS DC right because it's basically

00:21:31,110 --> 00:21:34,140
just reading that stuff in it's a

00:21:32,910 --> 00:21:39,060
function that's a stream that takes

00:21:34,140 --> 00:21:41,730
values and if we echo hey hey burned and

00:21:39,060 --> 00:21:44,309
OS DC

00:21:41,730 --> 00:21:47,220
and we put that into slash temp input

00:21:44,309 --> 00:21:49,289
you can see it changes in the background

00:21:47,220 --> 00:21:51,480
well so just a function that's built

00:21:49,289 --> 00:21:53,340
into MGMT takes a stream of file

00:21:51,480 --> 00:21:58,279
contents takes those strings and puts

00:21:53,340 --> 00:22:01,010
them in hay burned is this it's cool

00:21:58,279 --> 00:22:04,080
makes sense

00:22:01,010 --> 00:22:05,460
you want me to echo true you can you can

00:22:04,080 --> 00:22:07,620
echo anything yeah

00:22:05,460 --> 00:22:09,299
so basically very simple thing but just

00:22:07,620 --> 00:22:11,580
to show you all the functions are just

00:22:09,299 --> 00:22:14,309
providing real-world sources and you can

00:22:11,580 --> 00:22:17,100
do weird copying things like that you

00:22:14,309 --> 00:22:19,380
might see another demo okay so look at

00:22:17,100 --> 00:22:22,169
these two resources package resource one

00:22:19,380 --> 00:22:24,570
is called cows a state equals newest and

00:22:22,169 --> 00:22:27,570
another is packaged cows a state equals

00:22:24,570 --> 00:22:29,940
installed these are both valid code in

00:22:27,570 --> 00:22:32,039
MGMT what happens if you ran code that

00:22:29,940 --> 00:22:34,850
had both of these in it what would

00:22:32,039 --> 00:22:34,850
happen what should happen

00:22:35,590 --> 00:22:39,470
so you think you would install the

00:22:37,700 --> 00:22:42,530
newest version and here's what actually

00:22:39,470 --> 00:22:44,180
happens that's actually correct so we'll

00:22:42,530 --> 00:22:45,650
install the newest version and what it

00:22:44,180 --> 00:22:49,490
does is it looks at these two things in

00:22:45,650 --> 00:22:51,770
puppet what happens just for fun yeah it

00:22:49,490 --> 00:22:53,150
errors duplicate resource and in fact

00:22:51,770 --> 00:22:54,740
that's actually not the correct thing to

00:22:53,150 --> 00:22:56,690
do and the reason that's not the correct

00:22:54,740 --> 00:22:58,010
thing to do is because you might have

00:22:56,690 --> 00:23:00,050
different packages made by different

00:22:58,010 --> 00:23:02,150
people that both want the same package

00:23:00,050 --> 00:23:04,460
and even if they're consistent and what

00:23:02,150 --> 00:23:06,290
they want they all want like you know

00:23:04,460 --> 00:23:07,970
some utility package installed that will

00:23:06,290 --> 00:23:09,650
cause a duplicate resource problem in

00:23:07,970 --> 00:23:11,300
puppet which is a bug as far as I'm

00:23:09,650 --> 00:23:13,760
concerned so what this actually does is

00:23:11,300 --> 00:23:15,740
certain resources can check are they

00:23:13,760 --> 00:23:20,150
compatible with others of the same name

00:23:15,740 --> 00:23:21,950
and in this case if we run this right

00:23:20,150 --> 00:23:23,840
here you'll see it actually works

00:23:21,950 --> 00:23:25,100
perfectly there's no error it installs

00:23:23,840 --> 00:23:27,800
the callously package it's already

00:23:25,100 --> 00:23:29,660
installed and no problem and that's

00:23:27,800 --> 00:23:32,150
because if you say newest and you say

00:23:29,660 --> 00:23:34,550
installed no problem it will ensure that

00:23:32,150 --> 00:23:36,470
that's newest hang on a second and the

00:23:34,550 --> 00:23:38,450
second version of this is what if we

00:23:36,470 --> 00:23:41,030
have this version where one says

00:23:38,450 --> 00:23:44,840
installed and one says uninstalled in

00:23:41,030 --> 00:23:48,110
this case if we run that example what's

00:23:44,840 --> 00:23:50,360
gonna happen is an error and it will say

00:23:48,110 --> 00:23:52,400
graph state differs in in an

00:23:50,360 --> 00:23:55,520
incompatible way uninstalled versus

00:23:52,400 --> 00:23:58,510
installed so any resource can support

00:23:55,520 --> 00:24:01,100
allowing you to have compatible

00:23:58,510 --> 00:24:03,200
identically named resources based on

00:24:01,100 --> 00:24:04,730
some metric or some design that's built

00:24:03,200 --> 00:24:06,590
into the resource that says are these

00:24:04,730 --> 00:24:08,690
two things gonna conflict or not so that

00:24:06,590 --> 00:24:11,179
makes sense is that cool you want to see

00:24:08,690 --> 00:24:13,880
more demos I'm almost out of time so I

00:24:11,179 --> 00:24:15,740
gotta go here's how do you classes we

00:24:13,880 --> 00:24:20,360
have classes and stuff in the language

00:24:15,740 --> 00:24:22,160
I'll just show you this quickly so

00:24:20,360 --> 00:24:23,300
basically we don't have syntax

00:24:22,160 --> 00:24:25,100
highlighting yet so please submit

00:24:23,300 --> 00:24:28,220
patches here we're just defining a class

00:24:25,100 --> 00:24:29,600
foo it has a resource inside here we

00:24:28,220 --> 00:24:30,770
have a class here that we're defining

00:24:29,600 --> 00:24:33,020
with two parameters so you can have a

00:24:30,770 --> 00:24:35,120
parameterised class that uses those

00:24:33,020 --> 00:24:37,130
different values and down here you can

00:24:35,120 --> 00:24:38,780
include the thing multiple times because

00:24:37,130 --> 00:24:42,140
again duplicates are compatible if

00:24:38,780 --> 00:24:44,360
they're identical and here we're just

00:24:42,140 --> 00:24:48,020
including bar multiple times with

00:24:44,360 --> 00:24:50,420
different input parameters and basically

00:24:48,020 --> 00:24:52,070
if we run this we're gonna get a whole

00:24:50,420 --> 00:24:54,140
bunch of stuff basically exactly what we

00:24:52,070 --> 00:24:56,210
expect so if you want to build composite

00:24:54,140 --> 00:24:57,650
pieces of classes and include them and

00:24:56,210 --> 00:24:59,809
stuff like that all of this is possible

00:24:57,650 --> 00:25:01,280
it all does the logical same thing and

00:24:59,809 --> 00:25:04,400
there's documentation if you want to use

00:25:01,280 --> 00:25:07,520
it cool I'm rushing through these things

00:25:04,400 --> 00:25:09,290
now we're gonna be building function

00:25:07,520 --> 00:25:10,970
values that's not actually there yet but

00:25:09,290 --> 00:25:12,290
this is coming very very soon so if you

00:25:10,970 --> 00:25:14,900
actually want to read have a function

00:25:12,290 --> 00:25:17,420
that returns another function to do cool

00:25:14,900 --> 00:25:19,640
crazy hacks that's coming soon state

00:25:17,420 --> 00:25:22,790
machines and oscillators okay one last

00:25:19,640 --> 00:25:25,730
really crazy demo and I think you're

00:25:22,790 --> 00:25:26,929
gonna appreciate this one so here is I'm

00:25:25,730 --> 00:25:29,090
just gonna run this on a single machine

00:25:26,929 --> 00:25:30,650
but eventually this can run in the

00:25:29,090 --> 00:25:31,670
distributed system we're gonna keep it

00:25:30,650 --> 00:25:33,890
simple because I don't want to scare you

00:25:31,670 --> 00:25:35,510
too much so over here at the top here's

00:25:33,890 --> 00:25:37,190
some boilerplate stuff so don't worry

00:25:35,510 --> 00:25:38,090
about what's happening there but let's

00:25:37,190 --> 00:25:40,280
look at what's happening right here

00:25:38,090 --> 00:25:42,620
after that runs we're gonna build this

00:25:40,280 --> 00:25:44,750
state variable right here and it has

00:25:42,620 --> 00:25:47,080
this big if branch that says if the

00:25:44,750 --> 00:25:49,460
state equals one whatever state one is

00:25:47,080 --> 00:25:51,380
we're gonna set the contents of this

00:25:49,460 --> 00:25:53,630
text file to the string state equals one

00:25:51,380 --> 00:25:55,700
so we can see what happens then we have

00:25:53,630 --> 00:25:57,260
a timer which is gonna run it's gonna

00:25:55,700 --> 00:25:59,000
basically wait for one second so it

00:25:57,260 --> 00:26:00,860
doesn't go crazy and then we have this

00:25:59,000 --> 00:26:03,050
key value resource which is actually

00:26:00,860 --> 00:26:07,490
gonna put the string state equals one

00:26:03,050 --> 00:26:08,780
into a special spot and then we do the

00:26:07,490 --> 00:26:11,300
same thing if we happen to be in state

00:26:08,780 --> 00:26:14,120
to set the file contents of state two

00:26:11,300 --> 00:26:16,790
and so on and if we're in state three we

00:26:14,120 --> 00:26:18,110
set the state to state one so basically

00:26:16,790 --> 00:26:20,210
if we're in state one we'll wait a

00:26:18,110 --> 00:26:21,980
second move to stay two for in state two

00:26:20,210 --> 00:26:23,450
wait a second move to state three for in

00:26:21,980 --> 00:26:24,800
state 3 when we wait a second move to

00:26:23,450 --> 00:26:30,580
state one can you see what's gonna

00:26:24,800 --> 00:26:30,580
happen yes okay let's run this

00:26:31,779 --> 00:26:40,309
so I'm gonna run this here on the left

00:26:33,909 --> 00:26:43,130
and I'm gonna run this watch temp MGMT

00:26:40,309 --> 00:26:45,260
state so I'm just pulling the file on

00:26:43,130 --> 00:26:47,179
the right and you can see MGMT is

00:26:45,260 --> 00:26:49,159
running continuously oops drop my

00:26:47,179 --> 00:26:51,320
microphone it's running continuously and

00:26:49,159 --> 00:26:53,570
it's switching from state 1 to state 2

00:26:51,320 --> 00:26:55,669
to state 3 well we actually do is we've

00:26:53,570 --> 00:26:57,230
built an oscillator now if you were to

00:26:55,669 --> 00:26:58,340
write this kind of code this might be

00:26:57,230 --> 00:27:00,230
not what you want it's a little bit

00:26:58,340 --> 00:27:02,690
scary and maybe you don't want this but

00:27:00,230 --> 00:27:04,760
in fact real life real infrastructure

00:27:02,690 --> 00:27:06,860
does oscillate hopefully they don't

00:27:04,760 --> 00:27:09,919
oscillate this quickly but maybe in the

00:27:06,860 --> 00:27:12,470
morning the Sun comes up the load goes

00:27:09,919 --> 00:27:14,090
up you scale up some servers the load

00:27:12,470 --> 00:27:16,279
goes down we want to build these

00:27:14,090 --> 00:27:17,360
real-time systems and this is how you do

00:27:16,279 --> 00:27:19,789
it this is how I think you can do it

00:27:17,360 --> 00:27:22,460
this is a single machine but when we

00:27:19,789 --> 00:27:23,960
extend this or with a scarier demo we'll

00:27:22,460 --> 00:27:25,279
have multiple of these things running on

00:27:23,960 --> 00:27:26,779
different machines and all the

00:27:25,279 --> 00:27:28,909
distributed state machines will interact

00:27:26,779 --> 00:27:30,970
to build really clever autonomous

00:27:28,909 --> 00:27:32,929
clusters does that make sense

00:27:30,970 --> 00:27:35,179
so that would be sort of think about

00:27:32,929 --> 00:27:36,679
when we move from state one to two we

00:27:35,179 --> 00:27:38,210
care about our current state but we care

00:27:36,679 --> 00:27:39,380
that everyone else is also in that state

00:27:38,210 --> 00:27:41,570
so that sort of thing so we can

00:27:39,380 --> 00:27:42,860
synchronize on those steps so pre

00:27:41,570 --> 00:27:44,990
upgraded cluster by doing a bunch of

00:27:42,860 --> 00:27:46,460
stuff doing the upgrade step waiting for

00:27:44,990 --> 00:27:48,110
everyone to finish then starting the

00:27:46,460 --> 00:27:52,220
cluster service all this sort of crazy

00:27:48,110 --> 00:27:55,250
stuff cool that cool all right

00:27:52,220 --> 00:27:56,870
so we actually found a bug in MGMT

00:27:55,250 --> 00:27:58,520
because someone was running this at like

00:27:56,870 --> 00:28:00,110
thousands of times per second and

00:27:58,520 --> 00:28:01,850
there's a really really rare race which

00:28:00,110 --> 00:28:03,710
we passed patched last night so

00:28:01,850 --> 00:28:05,200
hopefully we kill all these bugs I don't

00:28:03,710 --> 00:28:07,429
have much time left so I'm just gonna

00:28:05,200 --> 00:28:09,230
finish I have some more demos to show

00:28:07,429 --> 00:28:14,059
but you'll have to wait till next year

00:28:09,230 --> 00:28:15,830
or next time I am a conference there's

00:28:14,059 --> 00:28:17,659
ways to deploy stuff into a cluster I'm

00:28:15,830 --> 00:28:19,760
not gonna talk about this now but you

00:28:17,659 --> 00:28:21,169
can ping me and get involved with the

00:28:19,760 --> 00:28:22,580
project and you'll learn how we push

00:28:21,169 --> 00:28:25,250
code to the entire cluster and how this

00:28:22,580 --> 00:28:27,080
works involves your laptop and it's

00:28:25,250 --> 00:28:28,730
super awesome scheduling I showed

00:28:27,080 --> 00:28:29,990
yesterday so I'm not gonna show that but

00:28:28,730 --> 00:28:31,610
there's still lots of stuff to do and I

00:28:29,990 --> 00:28:34,070
showed the magic CPU thing yesterday so

00:28:31,610 --> 00:28:36,260
I don't show today what's left to do I'm

00:28:34,070 --> 00:28:37,789
almost done so write some code like

00:28:36,260 --> 00:28:39,409
write some new functions in the library

00:28:37,789 --> 00:28:40,340
that we don't have if you want to if you

00:28:39,409 --> 00:28:41,480
want to build something in your

00:28:40,340 --> 00:28:43,550
infrastructure and you don't have a

00:28:41,480 --> 00:28:46,550
function you can add a patch to add them

00:28:43,550 --> 00:28:48,650
new resources we have about 30 or 20 or

00:28:46,550 --> 00:28:50,120
30 different resources in MGMT but

00:28:48,650 --> 00:28:51,679
there's some resources we don't have yet

00:28:50,120 --> 00:28:54,380
which would be kind of cool so we have

00:28:51,679 --> 00:28:55,670
an ec2 resource for example kind of like

00:28:54,380 --> 00:28:57,530
terraform and that sort of thing

00:28:55,670 --> 00:28:59,059
but we don't have say a Google Cloud one

00:28:57,530 --> 00:29:01,880
so if there's one that you want to add

00:28:59,059 --> 00:29:03,170
please let us know help get involved or

00:29:01,880 --> 00:29:05,000
if you want you could pay for one we

00:29:03,170 --> 00:29:06,740
could hire someone to build it for you

00:29:05,000 --> 00:29:08,780
stuff like that there's a few other

00:29:06,740 --> 00:29:10,790
things there's very few bugs that are

00:29:08,780 --> 00:29:12,559
left it's sort of on the final stretch

00:29:10,790 --> 00:29:15,050
of killing all the bugs and making this

00:29:12,559 --> 00:29:17,420
like 1000% production ready so get

00:29:15,050 --> 00:29:18,830
involved how can you help you can use

00:29:17,420 --> 00:29:20,720
this tested patch it share with your

00:29:18,830 --> 00:29:22,460
friends documented start on github

00:29:20,720 --> 00:29:24,890
tweeted if you have tweeter discuss it

00:29:22,460 --> 00:29:28,010
hack on this stuff and so I basically

00:29:24,890 --> 00:29:29,929
left my previous job to work on this

00:29:28,010 --> 00:29:31,610
sort of full-time living off my savings

00:29:29,929 --> 00:29:33,440
which totally sucks and we don't have

00:29:31,610 --> 00:29:34,730
very much funding and so if you don't

00:29:33,440 --> 00:29:36,800
want this to go proprietary if you want

00:29:34,730 --> 00:29:38,150
to have this useful and free for

00:29:36,800 --> 00:29:42,559
everyone you have to give me some money

00:29:38,150 --> 00:29:45,160
cuz otherwise yeah free software needs

00:29:42,559 --> 00:29:47,750
people to pay so send me some money

00:29:45,160 --> 00:29:49,370
funding a hacker is very sexy so you

00:29:47,750 --> 00:29:52,220
should tell all your friends let's just

00:29:49,370 --> 00:29:53,300
recap let me recap it's my usual

00:29:52,220 --> 00:29:56,090
recapping joke

00:29:53,300 --> 00:29:57,559
thank you we're on an IRC channel we're

00:29:56,090 --> 00:29:59,600
about 70 hackers in there just hanging

00:29:57,559 --> 00:30:01,040
out we have a Twitter account if you

00:29:59,600 --> 00:30:03,080
don't hear my rants on Twitter but you

00:30:01,040 --> 00:30:04,910
just want to like get the MGMT news

00:30:03,080 --> 00:30:07,190
check it out also on the mailing list

00:30:04,910 --> 00:30:09,590
new releases all those things that goes

00:30:07,190 --> 00:30:11,630
out there there's my technical blog

00:30:09,590 --> 00:30:13,130
which publishes articles and different

00:30:11,630 --> 00:30:16,040
things so you can check that out and you

00:30:13,130 --> 00:30:18,170
can always find me purple idea on IRC or

00:30:16,040 --> 00:30:21,440
Twitter or github or at gmail and stuff

00:30:18,170 --> 00:30:23,179
like that so that's it if you want a

00:30:21,440 --> 00:30:24,290
free sticker they're very expensive but

00:30:23,179 --> 00:30:26,300
I'll give you one if you promise to put

00:30:24,290 --> 00:30:28,280
it on your laptop okay and you can tweet

00:30:26,300 --> 00:30:30,350
me the photo and I'll know that you used

00:30:28,280 --> 00:30:32,330
it for a good cause last thing you have

00:30:30,350 --> 00:30:33,500
to do the very tall gentleman who was

00:30:32,330 --> 00:30:35,510
hiding in the back of the room is named

00:30:33,500 --> 00:30:37,970
burned he looks like this if you like

00:30:35,510 --> 00:30:39,830
this talk go up to him after the talk

00:30:37,970 --> 00:30:41,660
and just poke him on the shoulder and

00:30:39,830 --> 00:30:43,970
say hey burned James talk was super dope

00:30:41,660 --> 00:30:46,340
and if everyone does this it will be

00:30:43,970 --> 00:30:49,000
like a distributed Niall of bothering so

00:30:46,340 --> 00:30:49,000
thank you very much

00:30:52,580 --> 00:30:55,610
I don't know if we have time for

00:30:53,930 --> 00:30:56,750
questions we have Martin who's gonna be

00:30:55,610 --> 00:30:57,470
giving a talk soon so I'm sticking

00:30:56,750 --> 00:30:59,060
around for that

00:30:57,470 --> 00:31:00,800
maybe while Martin's getting ready I can

00:30:59,060 --> 00:31:01,820
answer one or two questions if you like

00:31:00,800 --> 00:31:04,070
does that make sense

00:31:01,820 --> 00:31:08,240
yeah thank you very much we have time

00:31:04,070 --> 00:31:10,100
for one or two questions yeah yeah

00:31:08,240 --> 00:31:11,870
anyone raise your hand happy to answer

00:31:10,100 --> 00:31:14,150
stuff I'm here till the end of the day

00:31:11,870 --> 00:31:16,040
too so if you have more questions and

00:31:14,150 --> 00:31:19,160
you're shy and always ask me in person

00:31:16,040 --> 00:31:21,710
anyone who's gonna get involved and used

00:31:19,160 --> 00:31:26,990
this raise your hand you're gonna get

00:31:21,710 --> 00:31:29,960
involved anyone maybe maybe yeah I'm not

00:31:26,990 --> 00:31:32,960
sure if I missed it but this is how is

00:31:29,960 --> 00:31:34,370
the infrastructure behind MGMT I'm

00:31:32,960 --> 00:31:36,470
working is it a client-server

00:31:34,370 --> 00:31:38,870
infrastructure great question yeah so

00:31:36,470 --> 00:31:41,720
what happens is so puppet client-server

00:31:38,870 --> 00:31:43,550
ansible Orchestrator we actually work as

00:31:41,720 --> 00:31:45,590
a distributed topology so we actually

00:31:43,550 --> 00:31:46,820
spin up any number of agents on all the

00:31:45,590 --> 00:31:48,590
machines that you want to manage and

00:31:46,820 --> 00:31:50,720
they will automatically cluster together

00:31:48,590 --> 00:31:52,460
using the raft algorithm it's a

00:31:50,720 --> 00:31:53,870
distributed consensus thing and that's

00:31:52,460 --> 00:31:55,520
how they communicate so there's no

00:31:53,870 --> 00:31:56,930
single point of failure there's just all

00:31:55,520 --> 00:31:58,040
these agents running everywhere and

00:31:56,930 --> 00:32:00,710
that's how they that's how it works

00:31:58,040 --> 00:32:01,940
whereas the central start configuration

00:32:00,710 --> 00:32:03,710
so that was the thing I was talking

00:32:01,940 --> 00:32:05,120
about the deploys so the way it

00:32:03,710 --> 00:32:07,940
basically works is if you want to deploy

00:32:05,120 --> 00:32:09,770
code to your cluster you on your laptop

00:32:07,940 --> 00:32:12,950
or wherever your git repository of code

00:32:09,770 --> 00:32:14,930
is you run git deploy it will bundle up

00:32:12,950 --> 00:32:16,760
all the code into a special like signed

00:32:14,930 --> 00:32:19,190
package and push it to any machine in

00:32:16,760 --> 00:32:20,390
the cluster and not inside of MGMT will

00:32:19,190 --> 00:32:22,670
ensure that it's replicated everywhere

00:32:20,390 --> 00:32:25,610
and then everyone will run that code so

00:32:22,670 --> 00:32:29,800
but if I have a large configuration and

00:32:25,610 --> 00:32:32,660
large like ezel files I don't know that

00:32:29,800 --> 00:32:35,210
smelling and it will replicate it to

00:32:32,660 --> 00:32:37,280
every machine ever I want to deploy so

00:32:35,210 --> 00:32:39,650
the we cannot replicate extremely large

00:32:37,280 --> 00:32:42,890
files yet so you have to limit the files

00:32:39,650 --> 00:32:44,030
to a reasonable size in the future what

00:32:42,890 --> 00:32:45,950
we will do is if you have an extremely

00:32:44,030 --> 00:32:47,720
large file like an ISO that you want on

00:32:45,950 --> 00:32:49,820
some of the machines then we will have

00:32:47,720 --> 00:32:52,760
selective replication that basically

00:32:49,820 --> 00:32:54,650
starts up temporary DHT BitTorrent type

00:32:52,760 --> 00:32:56,060
things and pushes those big files just

00:32:54,650 --> 00:32:59,090
to where they're needed rather than

00:32:56,060 --> 00:33:01,820
everywhere is it also possible to say

00:32:59,090 --> 00:33:02,150
okay MGMT there's a central storage like

00:33:01,820 --> 00:33:04,070
an

00:33:02,150 --> 00:33:06,740
and if s cher or something like that so

00:33:04,070 --> 00:33:09,440
I don't have to replicate every

00:33:06,740 --> 00:33:10,970
configuration file on every machine so

00:33:09,440 --> 00:33:12,410
the whole idea of a centralized thing is

00:33:10,970 --> 00:33:13,670
bad I mean we don't want this there's so

00:33:12,410 --> 00:33:15,500
many problems with centralized store

00:33:13,670 --> 00:33:17,480
however if for some reason you really

00:33:15,500 --> 00:33:19,310
want to have a file store and you really

00:33:17,480 --> 00:33:21,170
want to pull files from it then in your

00:33:19,310 --> 00:33:22,880
config and your resources just write a

00:33:21,170 --> 00:33:24,560
function that basically does a double

00:33:22,880 --> 00:33:26,150
you get and pulls that file down and

00:33:24,560 --> 00:33:28,670
that's what you'll get I mean I don't

00:33:26,150 --> 00:33:29,570
want that because I think it's a kind of

00:33:28,670 --> 00:33:30,770
a sloppy way to build your

00:33:29,570 --> 00:33:32,270
infrastructure but if that's what you

00:33:30,770 --> 00:33:33,800
really want then you could totally do

00:33:32,270 --> 00:33:36,170
that I'm just I'm not writing that

00:33:33,800 --> 00:33:39,110
function as part of the core I can't

00:33:36,170 --> 00:33:41,750
imagine the idea replicating every

00:33:39,110 --> 00:33:44,890
configuration file on every server where

00:33:41,750 --> 00:33:47,990
MGMT is running because

00:33:44,890 --> 00:33:50,300
most of the configuration files don't

00:33:47,990 --> 00:33:52,160
need to get replicated to just one

00:33:50,300 --> 00:33:54,050
specific server because they are not so

00:33:52,160 --> 00:33:56,630
the yeah so people people make this

00:33:54,050 --> 00:33:57,770
argument that like you don't need to

00:33:56,630 --> 00:33:59,990
share all that stuff but the thing is

00:33:57,770 --> 00:34:01,940
the amount of configuration code is not

00:33:59,990 --> 00:34:04,070
like terabytes it's like under a

00:34:01,940 --> 00:34:06,200
magnificus not huge crazy stuff there's

00:34:04,070 --> 00:34:08,179
no real serious negative overhead and

00:34:06,200 --> 00:34:09,230
replicating it and that's just the

00:34:08,179 --> 00:34:11,090
elegant thing to do because the whole

00:34:09,230 --> 00:34:14,030
point of passing the code everywhere is

00:34:11,090 --> 00:34:15,620
that everyone gets this distributed

00:34:14,030 --> 00:34:17,919
algorithm you've basically programmed

00:34:15,620 --> 00:34:19,880
with MGMT in this mcl language and

00:34:17,919 --> 00:34:21,710
independently even if everyone else dies

00:34:19,880 --> 00:34:24,230
you have the algorithm that you follow

00:34:21,710 --> 00:34:26,690
and so it's possible that you know you

00:34:24,230 --> 00:34:28,820
could write some compiler optimization

00:34:26,690 --> 00:34:30,470
to erase some of the code it's not

00:34:28,820 --> 00:34:31,970
needed on that machine but that's a lot

00:34:30,470 --> 00:34:34,190
of engineering effort for very little

00:34:31,970 --> 00:34:36,110
gain that's why we don't do it make

00:34:34,190 --> 00:34:37,370
sense okay thank you both all right

00:34:36,110 --> 00:34:40,120
thank you much if you want to sticker a

00:34:37,370 --> 00:34:40,120
co-op and grab one

00:34:40,530 --> 00:34:45,139
[Applause]

00:34:46,310 --> 00:34:52,210
[Music]

00:34:50,149 --> 00:34:52,210

YouTube URL: https://www.youtube.com/watch?v=umLLjtdZ6-M


