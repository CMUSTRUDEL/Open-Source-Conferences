Title: OSDC 2019: Terraform best practices with examples and arguments by Anton Babenko
Publication date: 2019-05-21
Playlist: OSDC 2019 | Open Source Data Center Conference
Description: 
	This talk is for the developers who want to learn best practices in using Terraform at companies and projects of various size (from small to very large), get pros&cons on code structuring, compositions, tools. Also, attendees will be able to learn Terraform (and Terragrunt) tricks and gotchas.

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de
Blog: http://blog.netways.de
Webinare: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh

https://www.frametraxx.de/
Captions: 
	00:00:01,140 --> 00:00:10,550
[Music]

00:00:14,120 --> 00:00:20,369
[Applause]

00:00:16,160 --> 00:00:22,020
hello everyone can you hear me yeah okay

00:00:20,369 --> 00:00:26,550
good because I don't hear me

00:00:22,020 --> 00:00:29,039
so my name is Anton and as I was just

00:00:26,550 --> 00:00:30,449
introduced I am pretty active in

00:00:29,039 --> 00:00:33,300
open-source communities and when it

00:00:30,449 --> 00:00:35,040
comes to terraform for the last four

00:00:33,300 --> 00:00:36,750
years I've been doing pretty active

00:00:35,040 --> 00:00:39,719
development on telephone community

00:00:36,750 --> 00:00:42,360
modules terraform AWS modules and I'm

00:00:39,719 --> 00:00:44,010
trying to be as active as possible so

00:00:42,360 --> 00:00:46,559
that every time when you work in

00:00:44,010 --> 00:00:49,890
Whistler reform in conjunction with AWS

00:00:46,559 --> 00:00:53,969
you should stumble upon at some point of

00:00:49,890 --> 00:00:57,510
time code blog posts different tools and

00:00:53,969 --> 00:01:01,530
so on which I put my hands on I really

00:00:57,510 --> 00:01:03,329
enjoyed this and in spare time when I'm

00:01:01,530 --> 00:01:05,220
not doing open-source

00:01:03,329 --> 00:01:08,159
I'm organizing and talking in different

00:01:05,220 --> 00:01:11,760
meetups Hashi Corp user groups AWS user

00:01:08,159 --> 00:01:16,200
groups DevOps Norway DevOps days Oslo

00:01:11,760 --> 00:01:19,409
I'm organizing as well so a few projects

00:01:16,200 --> 00:01:22,740
listed on this page are related to

00:01:19,409 --> 00:01:27,840
terraform and some of them I will cover

00:01:22,740 --> 00:01:31,049
to more degree during this talk and if

00:01:27,840 --> 00:01:34,640
you are curious about terraform best

00:01:31,049 --> 00:01:36,869
practices or Tara grant different

00:01:34,640 --> 00:01:38,759
approaches or reference architectures I

00:01:36,869 --> 00:01:41,820
encourage you to check out these

00:01:38,759 --> 00:01:45,360
repositories and don't hesitate to

00:01:41,820 --> 00:01:49,170
follow me on Twitter and github because

00:01:45,360 --> 00:01:52,770
I'm only working with the reformed and I

00:01:49,170 --> 00:01:55,799
will be glad to help you if you need so

00:01:52,770 --> 00:01:57,390
other than doing free open-source work I

00:01:55,799 --> 00:02:00,299
also do some paid work because

00:01:57,390 --> 00:02:02,070
open-source as we may imagine doesn't

00:02:00,299 --> 00:02:04,320
pay enough right

00:02:02,070 --> 00:02:07,259
I mean who work with open-source can

00:02:04,320 --> 00:02:09,569
probably guess that it's pretty hard to

00:02:07,259 --> 00:02:12,330
live an open-source primarily so I

00:02:09,569 --> 00:02:13,680
provide consultants services workshops

00:02:12,330 --> 00:02:16,230
trainings

00:02:13,680 --> 00:02:18,450
and receive code reviews and so on again

00:02:16,230 --> 00:02:22,560
most of this is related to a diverse and

00:02:18,450 --> 00:02:25,519
terraform and one of my project which I

00:02:22,560 --> 00:02:31,230
started about a year ago as modules TF

00:02:25,519 --> 00:02:34,849
where I take this reusable modules which

00:02:31,230 --> 00:02:37,620
I created over the last three years

00:02:34,849 --> 00:02:40,799
which were downloaded actually more than

00:02:37,620 --> 00:02:43,469
three millions of times for AWS

00:02:40,799 --> 00:02:48,260
infrastructure like PPC auto scaling

00:02:43,469 --> 00:02:50,760
group and so on and using this visual

00:02:48,260 --> 00:02:52,409
tool to visualize your a diverse

00:02:50,760 --> 00:02:55,230
infrastructure who is by the way

00:02:52,409 --> 00:02:56,849
sponsoring my time here right now so I

00:02:55,230 --> 00:02:59,189
would really encourage you to tweet this

00:02:56,849 --> 00:03:04,560
and say that hey cloud crafty awesome

00:02:59,189 --> 00:03:08,430
because you brought me here so this is a

00:03:04,560 --> 00:03:10,919
project which is allowing us to

00:03:08,430 --> 00:03:15,540
visualize a diverse infrastructure and

00:03:10,919 --> 00:03:18,479
convert it not converted but connected

00:03:15,540 --> 00:03:20,519
together and bad different relations

00:03:18,479 --> 00:03:23,340
specify different properties embed into

00:03:20,519 --> 00:03:26,220
Vicky and so on everything is happening

00:03:23,340 --> 00:03:29,069
in the browser but as you may imagine

00:03:26,220 --> 00:03:31,439
that we are in the conference which is

00:03:29,069 --> 00:03:34,769
called the open source data center where

00:03:31,439 --> 00:03:36,299
things should not be so visual right so

00:03:34,769 --> 00:03:39,299
we have to treat everything as called

00:03:36,299 --> 00:03:43,079
infrastructure as code itself makes the

00:03:39,299 --> 00:03:47,699
web's map makes devops possible so if we

00:03:43,079 --> 00:03:50,669
if we have been treating application as

00:03:47,699 --> 00:03:52,409
cold and we take it as granted we also

00:03:50,669 --> 00:03:54,780
have to tree its infrastructure has code

00:03:52,409 --> 00:03:57,180
because we need to know what what has

00:03:54,780 --> 00:03:59,939
changed or who has changed or when it

00:03:57,180 --> 00:04:02,189
was changed and we also need to put it

00:03:59,939 --> 00:04:04,530
in the same pipeline or similar pipeline

00:04:02,189 --> 00:04:06,689
so that we can actually validate changes

00:04:04,530 --> 00:04:11,849
before deployment it on production

00:04:06,689 --> 00:04:14,519
always fingers crossed mode and if we

00:04:11,849 --> 00:04:18,109
are talking about what kind of tools or

00:04:14,519 --> 00:04:20,940
of the the main tool which which

00:04:18,109 --> 00:04:23,219
associate with infrastructure as code or

00:04:20,940 --> 00:04:25,860
infrastructure management is terraform

00:04:23,219 --> 00:04:27,480
which was started in 2014 with an idea

00:04:25,860 --> 00:04:30,660
of

00:04:27,480 --> 00:04:33,060
making it possible to build and change

00:04:30,660 --> 00:04:36,510
inversion infrastructure in predictable

00:04:33,060 --> 00:04:38,640
way so there are no no surprises that

00:04:36,510 --> 00:04:41,160
something is going to be destroyed

00:04:38,640 --> 00:04:43,110
without you knowing it so you always

00:04:41,160 --> 00:04:45,750
know what is going to happen and

00:04:43,110 --> 00:04:50,760
terraform was started with this concept

00:04:45,750 --> 00:04:54,120
back in 2014 so let me ask few questions

00:04:50,760 --> 00:04:57,510
over this talk and the first question is

00:04:54,120 --> 00:05:00,570
when you look on this file who doesn't

00:04:57,510 --> 00:05:01,920
understand what is going on here raise

00:05:00,570 --> 00:05:05,580
your hand if you don't understand what

00:05:01,920 --> 00:05:07,260
what is this like okay then I assume

00:05:05,580 --> 00:05:10,230
that all of you guys know basics of

00:05:07,260 --> 00:05:12,840
terraform right so this is content of

00:05:10,230 --> 00:05:16,470
the file which has extension TF and

00:05:12,840 --> 00:05:19,350
terraform describes infrastructure in

00:05:16,470 --> 00:05:23,190
text file okay so we can declare some

00:05:19,350 --> 00:05:25,140
variable like a diverse region and then

00:05:23,190 --> 00:05:27,630
we specify what kind of resources we'll

00:05:25,140 --> 00:05:31,140
want to make in this example we're

00:05:27,630 --> 00:05:33,690
making s3 bucket with random name then

00:05:31,140 --> 00:05:37,170
we run terraform init to download some

00:05:33,690 --> 00:05:41,130
dependencies like providers then we run

00:05:37,170 --> 00:05:43,500
terraform apply to let telephone to

00:05:41,130 --> 00:05:45,480
calculate the graph and tell us what

00:05:43,500 --> 00:05:48,780
exactly is going to happen in this

00:05:45,480 --> 00:05:52,620
example terraform is going to tell us

00:05:48,780 --> 00:05:56,550
that s3 bucket will have to be created

00:05:52,620 --> 00:05:59,760
and we confirming it with yes and then

00:05:56,550 --> 00:06:04,040
terraform is talking to AWS SDK or

00:05:59,760 --> 00:06:06,870
through SDK to a diverse endpoint and

00:06:04,040 --> 00:06:09,240
produce an output that this bucket has

00:06:06,870 --> 00:06:12,540
been successfully created so this is all

00:06:09,240 --> 00:06:15,660
what terraform was designed to do more

00:06:12,540 --> 00:06:17,820
or less if you're looking from public

00:06:15,660 --> 00:06:20,820
cloud provider perspective you may think

00:06:17,820 --> 00:06:24,560
that AWS has already a cloud formation

00:06:20,820 --> 00:06:28,290
and they started it back in the days

00:06:24,560 --> 00:06:32,610
earlier than terraform and the idea was

00:06:28,290 --> 00:06:35,630
that the raw resources and people had to

00:06:32,610 --> 00:06:39,540
manage them in predictable way not just

00:06:35,630 --> 00:06:41,460
by literally automating through selenium

00:06:39,540 --> 00:06:43,740
but through the code and

00:06:41,460 --> 00:06:44,520
and they come up with a diverse

00:06:43,740 --> 00:06:47,430
CloudFormation

00:06:44,520 --> 00:06:49,050
and then google figure out that they

00:06:47,430 --> 00:06:51,990
also have some infrastructure resources

00:06:49,050 --> 00:06:54,300
but since Google is really developer

00:06:51,990 --> 00:06:56,640
oriented company then Python

00:06:54,300 --> 00:06:59,100
combining with ginger should be probably

00:06:56,640 --> 00:07:01,680
good idea so that's why Google cloud

00:06:59,100 --> 00:07:04,020
deployment manager started and the juror

00:07:01,680 --> 00:07:07,350
said that there is nothing wrong with

00:07:04,020 --> 00:07:11,460
just JSON so here you are resource

00:07:07,350 --> 00:07:16,230
manager so these three technologists are

00:07:11,460 --> 00:07:19,020
most well known for managing its own

00:07:16,230 --> 00:07:25,070
infrastructure there but then there is

00:07:19,020 --> 00:07:27,360
terraform which is which is combined

00:07:25,070 --> 00:07:29,820
possibility to manage infrastructure on

00:07:27,360 --> 00:07:31,980
all of these three public cloud

00:07:29,820 --> 00:07:37,800
providers but also more than hundred

00:07:31,980 --> 00:07:40,350
other providers and the main benefit of

00:07:37,800 --> 00:07:42,780
using telephone versus cloud formation

00:07:40,350 --> 00:07:46,560
or Google cloud deployment manager is

00:07:42,780 --> 00:07:50,190
that built in telephone the raft

00:07:46,560 --> 00:07:54,090
features which allows us to to have

00:07:50,190 --> 00:07:56,340
compositions and they have native

00:07:54,090 --> 00:08:01,680
support for code reuse through modules

00:07:56,340 --> 00:08:06,540
and there are also built in tooling

00:08:01,680 --> 00:08:08,790
around terraform which allows us to two

00:08:06,540 --> 00:08:12,660
separate planning from the execution

00:08:08,790 --> 00:08:14,610
like dry run and validation of what's

00:08:12,660 --> 00:08:19,530
going to happen in advance so it is

00:08:14,610 --> 00:08:23,120
possible to script this much easier if

00:08:19,530 --> 00:08:25,800
you know that terraform was designed to

00:08:23,120 --> 00:08:27,630
manage public cloud resources then I

00:08:25,800 --> 00:08:34,010
have bad news for you it was also

00:08:27,630 --> 00:08:37,050
designed to manage minecraft scenes and

00:08:34,010 --> 00:08:39,420
ordering them in a pizza right I mean

00:08:37,050 --> 00:08:43,290
you all knew this right that if you have

00:08:39,420 --> 00:08:46,050
an API endpoint then terraform can help

00:08:43,290 --> 00:08:48,570
you with talking to that endpoint so

00:08:46,050 --> 00:08:51,720
Domino turn out to be one of the most

00:08:48,570 --> 00:08:55,410
recent example how terraform can be used

00:08:51,720 --> 00:08:58,110
to order pizza and minecraft is

00:08:55,410 --> 00:09:01,379
also having rest endpoints so why not

00:08:58,110 --> 00:09:04,730
built all this scenes in Minecraft

00:09:01,379 --> 00:09:09,029
through HCl I think it's a good idea

00:09:04,730 --> 00:09:11,279
what can possibly go wrong so there are

00:09:09,029 --> 00:09:13,860
many many many many different types of

00:09:11,279 --> 00:09:15,660
providers and some of them are official

00:09:13,860 --> 00:09:18,829
which means that you can actually rely

00:09:15,660 --> 00:09:22,230
on them and don't have to worry about

00:09:18,829 --> 00:09:24,569
forward compatibilities with upcoming

00:09:22,230 --> 00:09:28,490
version of terraform but there are also

00:09:24,569 --> 00:09:31,230
a lot of them you can find on github or

00:09:28,490 --> 00:09:34,019
internally different companies where

00:09:31,230 --> 00:09:36,680
unfortunately you will have to maintain

00:09:34,019 --> 00:09:40,709
that it's actually compatible with

00:09:36,680 --> 00:09:42,360
latest version so let's start with

00:09:40,709 --> 00:09:44,509
something more or less three let's start

00:09:42,360 --> 00:09:48,300
in with managing a diverse network stack

00:09:44,509 --> 00:09:50,610
so this is an example where we sell

00:09:48,300 --> 00:09:56,490
telephone that we want to make resource

00:09:50,610 --> 00:09:59,220
in AWS VPC with specified silver block

00:09:56,490 --> 00:10:01,560
then we say that we also want to add

00:09:59,220 --> 00:10:04,170
Internet gateway to it okay pretty

00:10:01,560 --> 00:10:07,589
common right then we tell that we need

00:10:04,170 --> 00:10:11,579
to specify couple subnets then and then

00:10:07,589 --> 00:10:14,279
we need to output this IDs and then we

00:10:11,579 --> 00:10:15,720
actually have to add some nut gateways

00:10:14,279 --> 00:10:17,430
because we are talking about more or

00:10:15,720 --> 00:10:20,639
less real infrastructure so we are

00:10:17,430 --> 00:10:23,209
adding not gateways routes routing table

00:10:20,639 --> 00:10:28,189
and few other type of resources which

00:10:23,209 --> 00:10:31,889
just basic network is requiring so our

00:10:28,189 --> 00:10:36,149
configuration or main TF file for the

00:10:31,889 --> 00:10:39,029
network infrastructure will be will

00:10:36,149 --> 00:10:43,130
become 10 to 20 kilobytes of code if we

00:10:39,029 --> 00:10:46,410
are talking just about configuring basic

00:10:43,130 --> 00:10:49,470
basic things for the network ok and 300

00:10:46,410 --> 00:10:50,040
lines of code is it's not it's not

00:10:49,470 --> 00:10:53,160
uncommon

00:10:50,040 --> 00:10:55,500
so quite obviously we will see that code

00:10:53,160 --> 00:10:58,019
size is increasing and dependence has

00:10:55,500 --> 00:11:02,220
become not so straightforward pretty

00:10:58,019 --> 00:11:06,180
soon and when it comes to terraform

00:11:02,220 --> 00:11:08,850
terraform has very few concepts which

00:11:06,180 --> 00:11:13,410
are absolutely unique to

00:11:08,850 --> 00:11:15,600
and one of this concept which is known

00:11:13,410 --> 00:11:18,089
as there are four modules which is

00:11:15,600 --> 00:11:20,850
itself just self-contained package of

00:11:18,089 --> 00:11:23,399
terraform configuration or speaking it

00:11:20,850 --> 00:11:26,750
differently is collection of TF files in

00:11:23,399 --> 00:11:30,449
one folder so this is all what terraform

00:11:26,750 --> 00:11:33,120
modules are there are few types of

00:11:30,449 --> 00:11:35,430
terraform modules and it's really

00:11:33,120 --> 00:11:37,709
important to differentiate them so that

00:11:35,430 --> 00:11:39,389
you can become more productive and you

00:11:37,709 --> 00:11:42,680
can use sort of form more effectively

00:11:39,389 --> 00:11:46,800
the first type is resource modules and

00:11:42,680 --> 00:11:49,259
resource module is usually a great

00:11:46,800 --> 00:11:51,750
candidate to be open source because it

00:11:49,259 --> 00:11:53,940
doesn't contain anything what is limited

00:11:51,750 --> 00:11:56,759
by your company so it doesn't contain

00:11:53,940 --> 00:11:59,639
any secrets any hard-coded values it is

00:11:56,759 --> 00:12:03,959
absolutely reusable in your project ABC

00:11:59,639 --> 00:12:06,480
company ABC and so on so this is an

00:12:03,959 --> 00:12:08,850
example of how we invoke resource

00:12:06,480 --> 00:12:10,740
modules so we specify where these

00:12:08,850 --> 00:12:13,620
modules should be coming from in this

00:12:10,740 --> 00:12:16,860
case it's coming from terraform registry

00:12:13,620 --> 00:12:19,529
and we specify which version we want and

00:12:16,860 --> 00:12:22,730
we also specify what kind of arguments

00:12:19,529 --> 00:12:27,389
these modules this module should accept

00:12:22,730 --> 00:12:30,660
so I have another question for you as we

00:12:27,389 --> 00:12:35,220
reuse terraform module to manage a AWS

00:12:30,660 --> 00:12:37,380
ec2 security group or not or would you

00:12:35,220 --> 00:12:39,560
just write it in plain terraform like

00:12:37,380 --> 00:12:42,839
plain terraform means that you write two

00:12:39,560 --> 00:12:45,329
resources one is a double security group

00:12:42,839 --> 00:12:49,199
and second is a double security group

00:12:45,329 --> 00:12:52,439
rule and you can have a large amount of

00:12:49,199 --> 00:12:54,509
rules assigned to one security group so

00:12:52,439 --> 00:12:57,209
for security group you may think that

00:12:54,509 --> 00:13:01,560
it's probably good idea to just write

00:12:57,209 --> 00:13:05,670
security group and attach few group

00:13:01,560 --> 00:13:11,209
rules and it should be fine right so

00:13:05,670 --> 00:13:13,949
this is if you look in this source code

00:13:11,209 --> 00:13:15,449
you may see that it's maybe not so

00:13:13,949 --> 00:13:17,899
straightforward to understand what's

00:13:15,449 --> 00:13:17,899
going on

00:13:18,350 --> 00:13:26,300
it looks green and yellow but still it

00:13:21,170 --> 00:13:30,620
makes sense and the big thing here is

00:13:26,300 --> 00:13:33,160
that this much more than 255 they're

00:13:30,620 --> 00:13:38,569
approximately 600 lines of code is

00:13:33,160 --> 00:13:41,899
source of reusable AWS security group

00:13:38,569 --> 00:13:45,620
module which is the most popular module

00:13:41,899 --> 00:13:49,910
out there right now it was downloaded

00:13:45,620 --> 00:13:52,310
one and a half million of time or two

00:13:49,910 --> 00:13:55,009
years so people are really relying on

00:13:52,310 --> 00:13:58,250
this code and the benefit of using this

00:13:55,009 --> 00:14:02,060
module is that if you are willing to

00:13:58,250 --> 00:14:04,639
just use something existing and don't

00:14:02,060 --> 00:14:08,600
want to become an expert in terraform in

00:14:04,639 --> 00:14:11,660
AWS in internals of AWS in limitations

00:14:08,600 --> 00:14:14,300
of terraform specific versions in bugs

00:14:11,660 --> 00:14:16,250
in providers and so on you have to use

00:14:14,300 --> 00:14:20,420
something what is developed by someone

00:14:16,250 --> 00:14:25,610
else because it was simply tested and it

00:14:20,420 --> 00:14:31,190
was tested in very many crazy setups so

00:14:25,610 --> 00:14:33,019
I think that after you look on this 254

00:14:31,190 --> 00:14:35,329
lines of code you think that oh my god I

00:14:33,019 --> 00:14:37,730
don't want to write this piece of code

00:14:35,329 --> 00:14:39,470
if I want to manage just security group

00:14:37,730 --> 00:14:43,310
I will probably use something existing

00:14:39,470 --> 00:14:46,420
so hopefully yes second one is

00:14:43,310 --> 00:14:49,250
infrastructure modules they consist of

00:14:46,420 --> 00:14:52,970
something smaller like resource modules

00:14:49,250 --> 00:14:55,370
or individual resources and this is a

00:14:52,970 --> 00:14:57,170
great place for your company to be

00:14:55,370 --> 00:15:00,019
creative and actually implement what

00:14:57,170 --> 00:15:02,980
makes sense for your company needs like

00:15:00,019 --> 00:15:06,019
you can enforce encryption or some other

00:15:02,980 --> 00:15:08,779
company naming standards for example and

00:15:06,019 --> 00:15:11,389
you can also use different preprocessor

00:15:08,779 --> 00:15:13,430
JSON and cookie cutter to fulfill the

00:15:11,389 --> 00:15:16,730
missing bits of terraform providers or

00:15:13,430 --> 00:15:19,519
terraform features itself so this is the

00:15:16,730 --> 00:15:22,630
most important part in your

00:15:19,519 --> 00:15:26,120
infrastructure or in your terraform

00:15:22,630 --> 00:15:28,939
activities which you should be doing so

00:15:26,120 --> 00:15:31,189
you really know what exactly you're

00:15:28,939 --> 00:15:32,060
going to develop and you write

00:15:31,189 --> 00:15:36,170
infrastructure

00:15:32,060 --> 00:15:38,030
models for that so infrastructure

00:15:36,170 --> 00:15:41,390
modules in vacation looks very similar

00:15:38,030 --> 00:15:44,480
we specify where we wanted to get from

00:15:41,390 --> 00:15:47,120
and we specify different arguments which

00:15:44,480 --> 00:15:49,190
we pass into this module very similar

00:15:47,120 --> 00:15:52,280
inside of infrastructure model we are

00:15:49,190 --> 00:15:54,770
invoking several resource modules of

00:15:52,280 --> 00:15:57,370
specific versions this is very

00:15:54,770 --> 00:16:01,190
straightforward I think few things which

00:15:57,370 --> 00:16:03,020
I'd like to talk about what to do with

00:16:01,190 --> 00:16:03,530
there are four models and what don't do

00:16:03,020 --> 00:16:07,250
that

00:16:03,530 --> 00:16:09,920
and this is something what I experienced

00:16:07,250 --> 00:16:12,080
extremely often I deal with tariffs for

00:16:09,920 --> 00:16:14,660
models almost full-time for the last

00:16:12,080 --> 00:16:18,110
three years and I see a lot of code

00:16:14,660 --> 00:16:19,850
which people write inside of their

00:16:18,110 --> 00:16:21,590
project and they want to expose it to

00:16:19,850 --> 00:16:23,720
another project in the same company or

00:16:21,590 --> 00:16:25,820
they will they think that they are

00:16:23,720 --> 00:16:29,090
solving a pretty big problem and they

00:16:25,820 --> 00:16:31,850
want to to share it with the rest of

00:16:29,090 --> 00:16:34,340
community and then they are asking like

00:16:31,850 --> 00:16:38,690
why my model is not used but there are

00:16:34,340 --> 00:16:40,430
hundreds of forks yes it this is the

00:16:38,690 --> 00:16:42,320
main problem there are hundreds of works

00:16:40,430 --> 00:16:45,020
of your model is primarily because

00:16:42,320 --> 00:16:47,390
people cannot use it they use it as for

00:16:45,020 --> 00:16:51,140
for some cases people reference to my

00:16:47,390 --> 00:16:53,840
models thank you for inspiration they

00:16:51,140 --> 00:16:56,510
say to me so they cannot use some of my

00:16:53,840 --> 00:17:01,430
code but they thanks for inspiration so

00:16:56,510 --> 00:17:04,960
it's still count so this piece of code

00:17:01,430 --> 00:17:07,670
if you put in to terraform modules

00:17:04,960 --> 00:17:11,560
unfortunately is not gonna to be reused

00:17:07,670 --> 00:17:15,890
so despite the fact that region is not

00:17:11,560 --> 00:17:19,550
variable wine for contains assumption

00:17:15,890 --> 00:17:22,430
that users of this module will be Colin

00:17:19,550 --> 00:17:24,080
assume role and since it's not possible

00:17:22,430 --> 00:17:28,430
to override the whole provider block

00:17:24,080 --> 00:17:31,040
they will have to just fork this module

00:17:28,430 --> 00:17:33,470
remove this piece and the best practice

00:17:31,040 --> 00:17:35,840
for providers is to not put them into

00:17:33,470 --> 00:17:37,730
the module but put providers

00:17:35,840 --> 00:17:40,850
configuration on the higher level

00:17:37,730 --> 00:17:43,130
somewhere close to the root module so

00:17:40,850 --> 00:17:45,320
that your module in fact should not have

00:17:43,130 --> 00:17:49,340
this block at all

00:17:45,320 --> 00:17:52,190
if you want it to be reusable outside of

00:17:49,340 --> 00:17:54,650
your personal machine for example if

00:17:52,190 --> 00:17:57,830
wiser prefer to use default

00:17:54,650 --> 00:18:01,190
configuration then he used the top

00:17:57,830 --> 00:18:03,740
configuration while kata may like shared

00:18:01,190 --> 00:18:06,350
credentials file so he will configure it

00:18:03,740 --> 00:18:08,390
differently and if you enforce them to

00:18:06,350 --> 00:18:11,750
use assumed role then none of them can

00:18:08,390 --> 00:18:15,350
use your code this is absolutely the top

00:18:11,750 --> 00:18:19,700
frequent problem which I see in other

00:18:15,350 --> 00:18:23,210
people's code another evil part in

00:18:19,700 --> 00:18:26,090
tariffs or models which people not

00:18:23,210 --> 00:18:30,110
always understand that this is exactly

00:18:26,090 --> 00:18:32,120
the limitation is by using too much

00:18:30,110 --> 00:18:35,680
provisioners so provision works like

00:18:32,120 --> 00:18:39,830
local exact in this case will execute

00:18:35,680 --> 00:18:43,220
AWS CLI once a SS V PC resource is

00:18:39,830 --> 00:18:47,060
created in many cases this is not going

00:18:43,220 --> 00:18:50,720
to be possible to extend for example if

00:18:47,060 --> 00:18:53,030
we use a diverse instance and we want to

00:18:50,720 --> 00:18:57,380
call ansible playbook when this instance

00:18:53,030 --> 00:18:59,930
is started it's maybe a good idea for

00:18:57,380 --> 00:19:03,050
very short time you will think that yes

00:18:59,930 --> 00:19:05,590
you put in it in right place but then

00:19:03,050 --> 00:19:09,650
you figure out that this local exact

00:19:05,590 --> 00:19:11,330
block is not possible to use if you are

00:19:09,650 --> 00:19:13,370
using let's say auto scaling group

00:19:11,330 --> 00:19:16,760
because in auto scaling group the

00:19:13,370 --> 00:19:18,260
triggering is created by launch

00:19:16,760 --> 00:19:21,020
configuration so your launch

00:19:18,260 --> 00:19:23,570
configuration user data is a place where

00:19:21,020 --> 00:19:28,640
you have to put this kind of information

00:19:23,570 --> 00:19:32,030
and always try to put or use cloud init

00:19:28,640 --> 00:19:34,550
facilities other than using provisioners

00:19:32,030 --> 00:19:37,930
because they connect your machine where

00:19:34,550 --> 00:19:40,490
terraform is exceeded with

00:19:37,930 --> 00:19:42,920
infrastructure that's usually very bad

00:19:40,490 --> 00:19:46,880
idea if you still need to use

00:19:42,920 --> 00:19:50,020
provisioners to execute AWS CLI to to

00:19:46,880 --> 00:19:54,440
add mission features to provider or to

00:19:50,020 --> 00:19:56,060
add mission integrations then you may

00:19:54,440 --> 00:19:59,059
use special type of resource which is

00:19:56,060 --> 00:20:01,399
called new resource so new resources

00:19:59,059 --> 00:20:02,059
special because it is new it's not real

00:20:01,399 --> 00:20:04,009
resource

00:20:02,059 --> 00:20:07,159
it's just something what doesn't

00:20:04,009 --> 00:20:09,259
physically exist anywhere not in file

00:20:07,159 --> 00:20:13,580
not on cloud provider in nowhere and

00:20:09,259 --> 00:20:19,429
this piece of code tell that once VPC is

00:20:13,580 --> 00:20:24,769
created then execute a dover CLI and do

00:20:19,429 --> 00:20:27,499
something if we look into in general

00:20:24,769 --> 00:20:29,629
what are the common traits as I call

00:20:27,499 --> 00:20:33,700
them of tariffs or modules we will see

00:20:29,629 --> 00:20:36,169
that good modules they are always

00:20:33,700 --> 00:20:38,110
started with good documentation and

00:20:36,169 --> 00:20:40,789
examples it doesn't matter what kind of

00:20:38,110 --> 00:20:43,730
features are there they are not going to

00:20:40,789 --> 00:20:47,240
be discovered anyway right or how nice

00:20:43,730 --> 00:20:49,759
code is or how short the code is or do

00:20:47,240 --> 00:20:51,799
you put all the logic which you think

00:20:49,759 --> 00:20:54,470
you should be put in there if there are

00:20:51,799 --> 00:20:57,350
no examples how people can easily

00:20:54,470 --> 00:21:02,200
execute it and execution of example is

00:20:57,350 --> 00:21:04,549
always again without any kind of

00:21:02,200 --> 00:21:07,279
hesitation should be the easiest thing

00:21:04,549 --> 00:21:09,980
ever so that you go to the example

00:21:07,279 --> 00:21:12,470
folder and execute terraform init

00:21:09,980 --> 00:21:14,720
terraform plan and terraform apply and

00:21:12,470 --> 00:21:17,509
then telephone destroy without any

00:21:14,720 --> 00:21:21,049
single parameter specified other than

00:21:17,509 --> 00:21:23,119
that so I put this in the order of

00:21:21,049 --> 00:21:25,879
importance so once you have the

00:21:23,119 --> 00:21:30,019
commentation and example you should have

00:21:25,879 --> 00:21:32,059
pretty good feature feature set so that

00:21:30,019 --> 00:21:34,460
this module is not solving just your

00:21:32,059 --> 00:21:35,929
problem but also more generic use cases

00:21:34,460 --> 00:21:38,179
and so on

00:21:35,929 --> 00:21:41,200
and I put tests on the very end here

00:21:38,179 --> 00:21:45,409
because I still don't believe in

00:21:41,200 --> 00:21:47,629
existing a ecosystem or infrastructure

00:21:45,409 --> 00:21:50,840
tests and tools like terror tests or

00:21:47,629 --> 00:21:54,559
inspects or up spec and they're good for

00:21:50,840 --> 00:21:58,669
some cases but I don't believe that they

00:21:54,559 --> 00:22:01,999
will give enough value added comparing

00:21:58,669 --> 00:22:04,190
to for other things at the top they are

00:22:01,999 --> 00:22:07,460
totally different and maybe we will talk

00:22:04,190 --> 00:22:10,369
about this next year but right now it's

00:22:07,460 --> 00:22:12,930
just a bit too earlier and I'm not a big

00:22:10,369 --> 00:22:16,110
fan of any publicly available so

00:22:12,930 --> 00:22:17,990
right there if you have any ideas I will

00:22:16,110 --> 00:22:22,490
be really glad to hear from you

00:22:17,990 --> 00:22:26,220
so our tariffs or modules enough

00:22:22,490 --> 00:22:28,470
probably no because I mean yes it

00:22:26,220 --> 00:22:30,900
everything starts with figure out what

00:22:28,470 --> 00:22:33,480
is the reusable thing and then we go

00:22:30,900 --> 00:22:36,330
from there but it is definitely just the

00:22:33,480 --> 00:22:38,850
beginning let's look into how to

00:22:36,330 --> 00:22:43,910
structure telephone configurations and

00:22:38,850 --> 00:22:46,410
how to call them so when we have seen

00:22:43,910 --> 00:22:50,100
usage of tariffs or modules because

00:22:46,410 --> 00:22:52,440
amount of code and resources is just

00:22:50,100 --> 00:22:54,990
increasing okay we figure out that now

00:22:52,440 --> 00:22:57,630
we have to group them some but what

00:22:54,990 --> 00:22:59,520
about invoking these modules how should

00:22:57,630 --> 00:23:04,040
we call them like should we call them

00:22:59,520 --> 00:23:07,860
all in one or should we put them in like

00:23:04,040 --> 00:23:10,500
TF file and then put module after module

00:23:07,860 --> 00:23:12,630
of the module this is one pattern the

00:23:10,500 --> 00:23:16,530
bad side there is that we are now

00:23:12,630 --> 00:23:18,930
exposing pretty large blast radius so

00:23:16,530 --> 00:23:22,110
any small change which would do in some

00:23:18,930 --> 00:23:25,080
small thing may affect something totally

00:23:22,110 --> 00:23:29,790
bad it can be very long time to execute

00:23:25,080 --> 00:23:33,360
like 10-15 minutes is not it's not

00:23:29,790 --> 00:23:36,360
uncommon and also we will block everyone

00:23:33,360 --> 00:23:39,120
else so blocking everyone else in the

00:23:36,360 --> 00:23:42,090
team mean that we have to use slack much

00:23:39,120 --> 00:23:44,250
more and now we have to talk on slack to

00:23:42,090 --> 00:23:46,590
somebody and say hey don't touch this

00:23:44,250 --> 00:23:48,150
one because I'm changing this one hey

00:23:46,590 --> 00:23:50,820
have you finished this one because I'm

00:23:48,150 --> 00:23:53,730
going to touch another one and so on so

00:23:50,820 --> 00:23:56,760
if you are not big fan of using slack

00:23:53,730 --> 00:24:01,050
for this kind of discussion then keep in

00:23:56,760 --> 00:24:03,750
mind this on another specter of wait how

00:24:01,050 --> 00:24:06,060
we can organize telephone codes there is

00:24:03,750 --> 00:24:10,530
one and one where we have pretty

00:24:06,060 --> 00:24:13,280
granular invocation of modules one

00:24:10,530 --> 00:24:15,720
module for example take care of EPC and

00:24:13,280 --> 00:24:19,980
another one is taken care of

00:24:15,720 --> 00:24:22,170
alb but it has some trade-offs there so

00:24:19,980 --> 00:24:25,050
the good part obviously is we're not

00:24:22,170 --> 00:24:25,560
going to be changing in totally wrong

00:24:25,050 --> 00:24:26,759
place

00:24:25,560 --> 00:24:28,949
so if I have access

00:24:26,759 --> 00:24:31,619
to take care of my application because

00:24:28,949 --> 00:24:33,779
I'm a software developer then it doesn't

00:24:31,619 --> 00:24:36,979
matter if I want or not I simply will

00:24:33,779 --> 00:24:39,919
not be able to do any changes in V PC

00:24:36,979 --> 00:24:47,820
which I shared with 20 other developers

00:24:39,919 --> 00:24:52,409
so this is really a good point so which

00:24:47,820 --> 00:24:56,729
way you can imagine you group your code

00:24:52,409 --> 00:25:00,389
in your project so just imagine or

00:24:56,729 --> 00:25:03,259
remember at your work

00:25:00,389 --> 00:25:06,569
what kind of layout do you prefer like

00:25:03,259 --> 00:25:08,969
all in one or one and one can some of

00:25:06,569 --> 00:25:15,269
the raise hand and say all in one is

00:25:08,969 --> 00:25:16,799
what you use all in one half ok one

00:25:15,269 --> 00:25:21,769
person raised hand not like this but

00:25:16,799 --> 00:25:26,099
like this it's half right so ok half and

00:25:21,769 --> 00:25:29,309
who is using like one in one approach ok

00:25:26,099 --> 00:25:32,249
since five six people more good so I

00:25:29,309 --> 00:25:34,679
think the most frequent answer here is

00:25:32,249 --> 00:25:36,719
actually somewhere in between because

00:25:34,679 --> 00:25:39,389
when we don't know what's going to

00:25:36,719 --> 00:25:41,759
happen like if it's new project we

00:25:39,389 --> 00:25:44,309
always start with one file we put

00:25:41,759 --> 00:25:46,379
whatever experiments we want we invoke

00:25:44,309 --> 00:25:49,289
different modules there we figure out

00:25:46,379 --> 00:25:53,759
try different ideas how things can be

00:25:49,289 --> 00:25:56,669
organized and then when we get in clear

00:25:53,759 --> 00:25:58,919
picture about what's going to be needed

00:25:56,669 --> 00:26:03,509
then we can immigrate it into one and

00:25:58,919 --> 00:26:06,179
one or something very small like for

00:26:03,509 --> 00:26:09,690
example resource modules there is no no

00:26:06,179 --> 00:26:11,699
need to use one in one approach and

00:26:09,690 --> 00:26:14,039
group them somehow they are already

00:26:11,699 --> 00:26:16,739
small so they already tightly connected

00:26:14,039 --> 00:26:20,190
so that's why all-in-one is good for

00:26:16,739 --> 00:26:22,859
them but one in one I think that it's

00:26:20,190 --> 00:26:25,229
really a good approach when we already

00:26:22,859 --> 00:26:28,039
know what are we going to develop when

00:26:25,229 --> 00:26:30,839
we have pretty clear understanding or

00:26:28,039 --> 00:26:34,289
existing code base well we know that

00:26:30,839 --> 00:26:38,069
this is our project number 10 and from

00:26:34,289 --> 00:26:40,470
the past I had been said I'm VP see auto

00:26:38,069 --> 00:26:42,990
scaling group and other things then

00:26:40,470 --> 00:26:46,520
I can just replicate the same structure

00:26:42,990 --> 00:26:51,000
much easier in 1 & 1 and I can also work

00:26:46,520 --> 00:26:53,190
in interactively in one in one layout

00:26:51,000 --> 00:26:55,380
and allocate through missions to

00:26:53,190 --> 00:26:57,630
different types of developers and when

00:26:55,380 --> 00:27:00,840
we have different types of developers I

00:26:57,630 --> 00:27:04,919
want to think I want you to think about

00:27:00,840 --> 00:27:08,070
this as totally distinct type or

00:27:04,919 --> 00:27:10,049
expertise of developers because not

00:27:08,070 --> 00:27:13,140
everyone in this room are full-stack

00:27:10,049 --> 00:27:16,260
cset means including angular and Java

00:27:13,140 --> 00:27:18,720
and some other tools right so we have

00:27:16,260 --> 00:27:20,309
some qualification some better

00:27:18,720 --> 00:27:22,950
understanding in networking while

00:27:20,309 --> 00:27:25,530
someone else know let's say how to write

00:27:22,950 --> 00:27:27,179
business logic and Java and understand

00:27:25,530 --> 00:27:31,890
all these trade-offs in their business

00:27:27,179 --> 00:27:35,039
domain so what about tariffs for

00:27:31,890 --> 00:27:40,200
workspaces so who likes to use tariffs

00:27:35,039 --> 00:27:43,200
on workspaces cool to people wow that's

00:27:40,200 --> 00:27:44,970
amazing I don't like to use workspaces

00:27:43,200 --> 00:27:48,059
because there are so many problems with

00:27:44,970 --> 00:27:51,600
them so few problems related to

00:27:48,059 --> 00:27:54,690
workspaces are pretty fundamental the

00:27:51,600 --> 00:27:57,710
infrastructure as code friendliness as I

00:27:54,690 --> 00:28:00,659
call it is one of the most important

00:27:57,710 --> 00:28:02,610
thing out there otherwise we can still

00:28:00,659 --> 00:28:05,490
ultimate selenium right we can still

00:28:02,610 --> 00:28:08,549
call selenium to click in forums and

00:28:05,490 --> 00:28:11,460
fill in all fields and click buttons by

00:28:08,549 --> 00:28:14,280
their positions or XPath no it's not

00:28:11,460 --> 00:28:18,150
right so infrastructure as code means

00:28:14,280 --> 00:28:22,049
that we should not execute code which we

00:28:18,150 --> 00:28:24,659
see in the repo we should really be able

00:28:22,049 --> 00:28:27,780
to just read from specific place and get

00:28:24,659 --> 00:28:30,179
answers on how many workspaces do we

00:28:27,780 --> 00:28:34,679
have what is the difference between

00:28:30,179 --> 00:28:38,010
workspaces X and workspaces Y without us

00:28:34,679 --> 00:28:40,710
being able to execute all interpolations

00:28:38,010 --> 00:28:44,100
and see if works or count equal

00:28:40,710 --> 00:28:50,580
workspace name equal prod than 5

00:28:44,100 --> 00:28:51,710
otherwise 10 terraform had the concept

00:28:50,580 --> 00:28:54,560
of workspaces

00:28:51,710 --> 00:28:58,920
created for historical reasons

00:28:54,560 --> 00:29:01,190
back in the days I would say it was

00:28:58,920 --> 00:29:04,110
requirement for terraform enterprise

00:29:01,190 --> 00:29:07,980
normal people who don't use terraform

00:29:04,110 --> 00:29:11,910
enterprise can be pretty good without

00:29:07,980 --> 00:29:14,130
using it so the only use case if you

00:29:11,910 --> 00:29:16,590
let's say a familiar with terraform for

00:29:14,130 --> 00:29:18,480
quite some time and you think that there

00:29:16,590 --> 00:29:22,560
is nothing else what I can do or I have

00:29:18,480 --> 00:29:24,900
next two months three so yes then you

00:29:22,560 --> 00:29:26,550
can dive in to terraform workspaces you

00:29:24,900 --> 00:29:31,530
can invest some time you can write some

00:29:26,550 --> 00:29:34,160
tooling about it but the only use case

00:29:31,530 --> 00:29:38,130
where terraform workspaces make sense is

00:29:34,160 --> 00:29:41,730
for a short-lived branch so think about

00:29:38,130 --> 00:29:45,450
that you have github and pull requests

00:29:41,730 --> 00:29:46,410
and you want to spin up parts of your

00:29:45,450 --> 00:29:48,750
infrastructure

00:29:46,410 --> 00:29:51,810
every time when put new pull request is

00:29:48,750 --> 00:29:53,880
open so imagine the developer open pull

00:29:51,810 --> 00:29:57,780
request with some new feature then you

00:29:53,880 --> 00:30:00,750
have to spin up new service or ECS

00:29:57,780 --> 00:30:02,340
service or some sort of auto scaling

00:30:00,750 --> 00:30:04,620
group it doesn't matter what what you

00:30:02,340 --> 00:30:08,220
use but just for shortly for him to be

00:30:04,620 --> 00:30:09,840
able to test this feature then you click

00:30:08,220 --> 00:30:11,160
on that feature you figure out that it

00:30:09,840 --> 00:30:14,550
works and then you merge this pull

00:30:11,160 --> 00:30:16,140
request right so when this feature is

00:30:14,550 --> 00:30:20,970
merged then you have to delete that

00:30:16,140 --> 00:30:23,840
workspace and you done so that's the

00:30:20,970 --> 00:30:26,580
only situation when you can use

00:30:23,840 --> 00:30:32,370
terraform workspaces is for short-lived

00:30:26,580 --> 00:30:35,580
branches and if you think that yeah but

00:30:32,370 --> 00:30:40,680
workspaces I mean I already wrote all of

00:30:35,580 --> 00:30:44,790
this code and it works for me at some

00:30:40,680 --> 00:30:47,010
point you will probably realize that the

00:30:44,790 --> 00:30:50,480
same concept which we had before is

00:30:47,010 --> 00:30:53,700
called terraform modules is much better

00:30:50,480 --> 00:30:57,500
than workspaces again the idea is that

00:30:53,700 --> 00:31:00,210
you don't hide the code behind of some

00:30:57,500 --> 00:31:02,700
statements or some conditions and so on

00:31:00,210 --> 00:31:05,310
you have this infrastructure then you

00:31:02,700 --> 00:31:07,980
have this configuration as file laying

00:31:05,310 --> 00:31:09,929
in known place

00:31:07,980 --> 00:31:12,480
so we are not paying for disk storage

00:31:09,929 --> 00:31:15,510
anymore it's okay to copy five kilobytes

00:31:12,480 --> 00:31:17,840
file put it into non location and then I

00:31:15,510 --> 00:31:23,789
always know that yes this is workspace

00:31:17,840 --> 00:31:28,230
equivalent so who knows about terraform

00:31:23,789 --> 00:31:30,630
0:12 like who is overexcited so some

00:31:28,230 --> 00:31:34,559
people raise hand and then drop it

00:31:30,630 --> 00:31:36,690
because maybe you're not so excited no

00:31:34,559 --> 00:31:38,700
actually terraform 0:12 is one of the

00:31:36,690 --> 00:31:42,720
biggest release which has coming out

00:31:38,700 --> 00:31:46,860
pretty nicely and soon and you may think

00:31:42,720 --> 00:31:49,850
that terraform 0:12 has been totally

00:31:46,860 --> 00:31:52,580
rewritten and in fact it was because

00:31:49,850 --> 00:31:55,549
there are a lot of features implemented

00:31:52,580 --> 00:31:59,159
especially if you are coming from

00:31:55,549 --> 00:32:01,019
general-purpose programming you will

00:31:59,159 --> 00:32:04,399
think that oh my god finally there are

00:32:01,019 --> 00:32:07,710
loops there are like dynamic blocks

00:32:04,399 --> 00:32:09,480
there are correct condition operations

00:32:07,710 --> 00:32:11,970
where left and right parts are not

00:32:09,480 --> 00:32:14,039
executed simultaneously and there are

00:32:11,970 --> 00:32:15,330
many many other cool features which he

00:32:14,039 --> 00:32:19,919
was always dreaming about

00:32:15,330 --> 00:32:21,090
and finally terraform 0:12 will have all

00:32:19,919 --> 00:32:24,360
of this right

00:32:21,090 --> 00:32:27,120
so who think about this like I just

00:32:24,360 --> 00:32:29,730
explained right so there are people who

00:32:27,120 --> 00:32:32,399
think that terraform 0:12 is going to be

00:32:29,730 --> 00:32:35,429
absolutely cool exactly for these

00:32:32,399 --> 00:32:38,909
features so simplified syntax alone

00:32:35,429 --> 00:32:43,019
means that we don't have to unquote with

00:32:38,909 --> 00:32:46,830
double quotes dollar sign curly bracket

00:32:43,019 --> 00:32:49,649
sign and so on so but the thing which I

00:32:46,830 --> 00:32:52,889
just want to kind of try to ask

00:32:49,649 --> 00:32:55,529
critically is like will the everything

00:32:52,889 --> 00:32:57,960
be alright after zero twelve coming out

00:32:55,529 --> 00:33:00,779
let's say it will come up I don't know

00:32:57,960 --> 00:33:02,760
in 1 months because few days ago there

00:33:00,779 --> 00:33:04,200
was release candidate one then there

00:33:02,760 --> 00:33:09,360
will be release candidate two and then

00:33:04,200 --> 00:33:12,809
there will be final zero 12.0 so will

00:33:09,360 --> 00:33:15,450
there be any changes or like let's say

00:33:12,809 --> 00:33:18,090
on Monday I come back to work and I open

00:33:15,450 --> 00:33:19,620
computer download latest version execute

00:33:18,090 --> 00:33:21,910
migration script which will convert

00:33:19,620 --> 00:33:24,100
previous syntax into new scene

00:33:21,910 --> 00:33:26,200
which is realistic it will convert

00:33:24,100 --> 00:33:28,480
syntax because syntax is backward

00:33:26,200 --> 00:33:32,890
compatible this is partially why it took

00:33:28,480 --> 00:33:35,320
so long time so it will be converting

00:33:32,890 --> 00:33:39,130
all of my syntax and now my terraform

00:33:35,320 --> 00:33:40,960
will be using zero twelve right so I

00:33:39,130 --> 00:33:44,530
have some good news and some bad news

00:33:40,960 --> 00:33:48,610
for you so as I said earlier there are

00:33:44,530 --> 00:33:50,410
two types of terraform users so the

00:33:48,610 --> 00:33:53,590
first type of user is terraformed

00:33:50,410 --> 00:33:58,780
developers and one of the best practice

00:33:53,590 --> 00:34:02,350
which i really want to kind of to to

00:33:58,780 --> 00:34:05,560
make it clear is that there are no full

00:34:02,350 --> 00:34:09,340
stack developers for terraform even if

00:34:05,560 --> 00:34:11,410
we want everybody to be convinced the

00:34:09,340 --> 00:34:14,740
terraform is easy tool that you can just

00:34:11,410 --> 00:34:16,600
write TF files and then it will

00:34:14,740 --> 00:34:19,900
magically create these resources for you

00:34:16,600 --> 00:34:22,570
you see how it's easy there are a lot of

00:34:19,900 --> 00:34:25,440
things which we still have to know for

00:34:22,570 --> 00:34:29,429
example we have to know public cloud

00:34:25,440 --> 00:34:31,300
domain we have to understand networking

00:34:29,429 --> 00:34:33,760
internally we have to understand

00:34:31,300 --> 00:34:36,270
terraform syntaxes and we have to

00:34:33,760 --> 00:34:41,080
understand in general everything what

00:34:36,270 --> 00:34:45,090
typical typical DevOps engineer is doing

00:34:41,080 --> 00:34:47,800
so what we do during our work is that we

00:34:45,090 --> 00:34:50,020
consume a lot of information we become

00:34:47,800 --> 00:34:53,830
domain experts in that right so we know

00:34:50,020 --> 00:34:56,830
how to use terraform in a way that we

00:34:53,830 --> 00:35:00,600
can make something what can be consumed

00:34:56,830 --> 00:35:06,070
by other people and inside of company

00:35:00,600 --> 00:35:08,890
very good pattern is that so-called

00:35:06,070 --> 00:35:11,380
devops engineers I like them to be so

00:35:08,890 --> 00:35:14,530
cold because we all know that it's not

00:35:11,380 --> 00:35:16,900
just about tools so-called DevOps

00:35:14,530 --> 00:35:19,330
engineers are implementing and

00:35:16,900 --> 00:35:23,380
maintaining reference architectures for

00:35:19,330 --> 00:35:28,690
the parts which they have so for example

00:35:23,380 --> 00:35:33,610
if you're dealing with with your let's

00:35:28,690 --> 00:35:35,080
say the main specific we if you are

00:35:33,610 --> 00:35:35,890
dealing with something inside your

00:35:35,080 --> 00:35:38,529
company

00:35:35,890 --> 00:35:42,160
then it will be a pretty good idea to

00:35:38,529 --> 00:35:44,950
implement common practices and establish

00:35:42,160 --> 00:35:47,079
common solutions okay so this is where

00:35:44,950 --> 00:35:50,440
your expertise will be needed as DevOps

00:35:47,079 --> 00:35:52,269
engineers and another side another group

00:35:50,440 --> 00:35:54,930
of people which is usually a very big

00:35:52,269 --> 00:35:59,319
group of people is somebody who can

00:35:54,930 --> 00:36:02,499
really just use whatever is created by

00:35:59,319 --> 00:36:06,430
your team or by other people so I

00:36:02,499 --> 00:36:11,349
usually put them as like the terraform

00:36:06,430 --> 00:36:14,880
users so the idea is that terraform is

00:36:11,349 --> 00:36:18,009
so easier to use that a lot of people

00:36:14,880 --> 00:36:18,999
will just say that oh yeah I know how to

00:36:18,009 --> 00:36:21,970
use the rough form

00:36:18,999 --> 00:36:24,819
yes you do but will it be a pleasure to

00:36:21,970 --> 00:36:26,739
use your code after half year or maybe

00:36:24,819 --> 00:36:29,079
if you quit nobody will understand why

00:36:26,739 --> 00:36:31,119
you did this this way it's common

00:36:29,079 --> 00:36:34,569
problem as with many other technologies

00:36:31,119 --> 00:36:36,789
we are using right and the cool part is

00:36:34,569 --> 00:36:38,349
that in order to use the reform you

00:36:36,789 --> 00:36:40,900
don't have to have to reform in your

00:36:38,349 --> 00:36:47,349
LinkedIn profile right you can hire more

00:36:40,900 --> 00:36:50,529
people so I think it's achievement so to

00:36:47,349 --> 00:36:55,119
reform 0:12 for developers will allow to

00:36:50,529 --> 00:36:58,630
use all of these awesome features for

00:36:55,119 --> 00:37:01,259
loops dynamic blogs and so on but what I

00:36:58,630 --> 00:37:04,930
want to understand and what I want to

00:37:01,259 --> 00:37:07,119
kind of make sure that a lot of people

00:37:04,930 --> 00:37:09,819
understand is that this is not for

00:37:07,119 --> 00:37:13,690
everyone your end users don't really

00:37:09,819 --> 00:37:16,809
care if you specify or if you use for

00:37:13,690 --> 00:37:18,519
loops finally if your telephone code now

00:37:16,809 --> 00:37:21,190
is 20 lines

00:37:18,519 --> 00:37:23,739
smaller or longer they absolutely don't

00:37:21,190 --> 00:37:27,160
care they the only thing which they want

00:37:23,739 --> 00:37:30,279
to care is that they can use this

00:37:27,160 --> 00:37:33,130
terraform solution which you make in

00:37:30,279 --> 00:37:36,160
order to spin up what they need it can

00:37:33,130 --> 00:37:38,380
be s3 bucket okay but it has to be s3

00:37:36,160 --> 00:37:40,599
bucket according to your company

00:37:38,380 --> 00:37:44,640
standards name in taken encryption and

00:37:40,599 --> 00:37:49,029
so on and terraform 0:12

00:37:44,640 --> 00:37:50,080
has a lot of these for developers while

00:37:49,029 --> 00:37:53,020
for user

00:37:50,080 --> 00:37:56,170
I would say that the only benefit which

00:37:53,020 --> 00:37:58,630
users will gain is that yes they don't

00:37:56,170 --> 00:38:01,380
have to remember or become familiar with

00:37:58,630 --> 00:38:05,020
all of this interpolation syntaxes

00:38:01,380 --> 00:38:07,960
double quotes and everything can be

00:38:05,020 --> 00:38:10,510
leased but not maps and so on conversion

00:38:07,960 --> 00:38:13,030
between types yes this will be very much

00:38:10,510 --> 00:38:17,830
simplified simply because it's rewritten

00:38:13,030 --> 00:38:20,650
from scratch and as a summary of this I

00:38:17,830 --> 00:38:22,720
want to tell a few things again

00:38:20,650 --> 00:38:26,230
terraform modules is just must have I

00:38:22,720 --> 00:38:28,090
cannot emphasize this more because there

00:38:26,230 --> 00:38:33,400
is nothing else you cannot reduce one

00:38:28,090 --> 00:38:35,140
resource floating around or if you if

00:38:33,400 --> 00:38:37,150
you already know what you're going to do

00:38:35,140 --> 00:38:41,020
and how you structure your code then

00:38:37,150 --> 00:38:43,690
Tara grant is tool which can be used to

00:38:41,020 --> 00:38:47,380
orchestrate invocation of infrastructure

00:38:43,690 --> 00:38:50,700
modules and one in one approach gives

00:38:47,380 --> 00:38:54,640
you much much better life over time

00:38:50,700 --> 00:38:56,380
terraform workspaces is not good because

00:38:54,640 --> 00:38:58,330
we are not paying for disk storage and

00:38:56,380 --> 00:39:03,250
we don't need to execute all of this

00:38:58,330 --> 00:39:05,980
logic in our head anytime and 0:12

00:39:03,250 --> 00:39:09,190
is beneficial primarily for terraform

00:39:05,980 --> 00:39:13,630
developers and in many companies at

00:39:09,190 --> 00:39:17,500
least where I work I see a lot of people

00:39:13,630 --> 00:39:19,120
who may learn terraform but I really

00:39:17,500 --> 00:39:21,130
don't want them to learn telephone I

00:39:19,120 --> 00:39:24,010
mean if you have front-end developer

00:39:21,130 --> 00:39:26,110
with angular experience why on earth you

00:39:24,010 --> 00:39:29,440
should learn terraform yes you you will

00:39:26,110 --> 00:39:32,620
become cool but that's not given any

00:39:29,440 --> 00:39:36,430
benefit to the company or you can think

00:39:32,620 --> 00:39:38,860
that you will become you you will be

00:39:36,430 --> 00:39:43,360
better doing your angular work or

00:39:38,860 --> 00:39:48,670
terraform probably angular so for me

00:39:43,360 --> 00:39:51,300
that's it do you have question yeah we

00:39:48,670 --> 00:39:51,300
have to have four questions

00:39:52,359 --> 00:40:09,309
I have a question regarding the new

00:40:07,660 --> 00:40:12,249
configuration language and terraform

00:40:09,309 --> 00:40:15,339
0.12 do you think that with Tara from

00:40:12,249 --> 00:40:20,140
0.12 we can finally get rid of this hole

00:40:15,339 --> 00:40:22,509
count equals zero mess or do we still

00:40:20,140 --> 00:40:24,369
have to use it yeah

00:40:22,509 --> 00:40:29,230
count equals zero will unfortunately

00:40:24,369 --> 00:40:34,420
still be needed for no there is no e

00:40:29,230 --> 00:40:40,089
fails no there is no solution for that

00:40:34,420 --> 00:40:44,019
at all but I'm not sure if I understand

00:40:40,089 --> 00:40:47,109
why you're so afraid of this like yes

00:40:44,019 --> 00:40:50,140
this is one of one of Netta argument

00:40:47,109 --> 00:40:52,150
which we have to specify maybe it

00:40:50,140 --> 00:40:54,759
doesn't look so nice but if you hide it

00:40:52,150 --> 00:40:59,140
from your users and if you keep it for

00:40:54,759 --> 00:41:01,329
your telephone developers - let's say it

00:40:59,140 --> 00:41:03,430
replace it it can be replaced usually

00:41:01,329 --> 00:41:07,059
it's replaced with variable which is

00:41:03,430 --> 00:41:10,150
called create underscore VP C equal true

00:41:07,059 --> 00:41:12,400
and then if it is I mean it's it makes

00:41:10,150 --> 00:41:14,739
sense for your users right and then

00:41:12,400 --> 00:41:17,589
internally you can use it if it was true

00:41:14,739 --> 00:41:19,839
then create this bunch of resources so

00:41:17,589 --> 00:41:22,029
no there is no plan to do this as far as

00:41:19,839 --> 00:41:23,470
I know and there are a few people

00:41:22,029 --> 00:41:26,920
actually complain about this because

00:41:23,470 --> 00:41:28,530
maybe they get used to it no I mean

00:41:26,920 --> 00:41:31,619
people get used to it they

00:41:28,530 --> 00:41:31,619
[Music]

00:41:40,530 --> 00:41:46,609
great talk eh I wanted to ask you about

00:41:43,520 --> 00:41:49,530
terraform Enterprise I know you said

00:41:46,609 --> 00:41:52,230
yeah I think you said for normal people

00:41:49,530 --> 00:41:55,200
not using terraform Enterprise so where

00:41:52,230 --> 00:41:57,780
I'm one of the abnormal people that is

00:41:55,200 --> 00:42:00,780
using terraform Enterprise I'm curious I

00:41:57,780 --> 00:42:03,599
guess first why why is it not mentioned

00:42:00,780 --> 00:42:06,900
in your talk and then do you recommend

00:42:03,599 --> 00:42:11,760
it or or should you know we have a team

00:42:06,900 --> 00:42:15,840
of like five people that are managing

00:42:11,760 --> 00:42:17,790
our little section of infrastructure do

00:42:15,840 --> 00:42:20,190
we really need terraform enterprise for

00:42:17,790 --> 00:42:21,390
that yeah that's really good question so

00:42:20,190 --> 00:42:24,540
the the reason why I didn't mention

00:42:21,390 --> 00:42:26,250
anything about Terra for enterprise like

00:42:24,540 --> 00:42:28,950
first reason I'm not affiliated with

00:42:26,250 --> 00:42:30,750
Hoshi Corp they didn't pay me to talk

00:42:28,950 --> 00:42:33,150
about how awesome Enterprise is and

00:42:30,750 --> 00:42:34,190
second is terraform Enterprise is not

00:42:33,150 --> 00:42:37,859
awesome

00:42:34,190 --> 00:42:41,130
so it is not awesome because there are a

00:42:37,859 --> 00:42:44,450
bunch of things which you can get from

00:42:41,130 --> 00:42:46,859
open source to combine your own

00:42:44,450 --> 00:42:47,280
enterprise features the way you want

00:42:46,859 --> 00:42:50,520
them

00:42:47,280 --> 00:42:55,130
for example Atlantis Atlantis alone is

00:42:50,520 --> 00:42:57,570
tool which can be connected to your

00:42:55,130 --> 00:43:00,000
version control system and listen to

00:42:57,570 --> 00:43:02,900
pull requests and execute terraform in

00:43:00,000 --> 00:43:05,609
central place and submit comments

00:43:02,900 --> 00:43:07,800
containing terraform plan to this pull

00:43:05,609 --> 00:43:10,170
request so that everybody know what

00:43:07,800 --> 00:43:12,780
exactly is going to be executed and they

00:43:10,170 --> 00:43:16,500
can confirm or they can deny pull

00:43:12,780 --> 00:43:19,320
requests so this is like 50% of what

00:43:16,500 --> 00:43:22,109
terraform Enterprise has another

00:43:19,320 --> 00:43:24,060
downside which I absorb as terraform

00:43:22,109 --> 00:43:27,930
Enterprise people telling me is that

00:43:24,060 --> 00:43:29,970
it's pretty hard to jump off from it so

00:43:27,930 --> 00:43:33,570
yes if you start using all of this

00:43:29,970 --> 00:43:35,369
workspace related features to the way

00:43:33,570 --> 00:43:36,030
how they implement it in terraform

00:43:35,369 --> 00:43:40,280
Enterprise

00:43:36,030 --> 00:43:43,320
you cannot just easily use free version

00:43:40,280 --> 00:43:44,970
yes you will be able to do this but you

00:43:43,320 --> 00:43:46,970
will have to write tons of shell script

00:43:44,970 --> 00:43:51,060
to orchestrate or to replace all of that

00:43:46,970 --> 00:43:53,740
work space magic and this is one thing

00:43:51,060 --> 00:43:56,500
which is pretty hard

00:43:53,740 --> 00:44:01,630
and third points why terraform

00:43:56,500 --> 00:44:04,390
enterprise can be usually used wrongly

00:44:01,630 --> 00:44:07,690
is that there is Tara grant Tara grant

00:44:04,390 --> 00:44:10,450
is tool which allows you to use small

00:44:07,690 --> 00:44:13,030
crew usable pieces the way you want so

00:44:10,450 --> 00:44:15,130
you have your modules your terraform

00:44:13,030 --> 00:44:17,770
modules you group them the way you want

00:44:15,130 --> 00:44:19,450
and you go to the let's say root folder

00:44:17,770 --> 00:44:21,610
of this and you're on Tara grant apply

00:44:19,450 --> 00:44:23,740
all and then it will go through the

00:44:21,610 --> 00:44:26,560
whole tree of your dependencies and then

00:44:23,740 --> 00:44:30,040
execute execute resources or create

00:44:26,560 --> 00:44:33,550
resources step-by-step so VPC will be

00:44:30,040 --> 00:44:37,390
first than something else and so on so

00:44:33,550 --> 00:44:42,480
this is one of the cool features which

00:44:37,390 --> 00:44:45,250
you can get for free so overall I think

00:44:42,480 --> 00:44:48,490
terraform enterprise which cost several

00:44:45,250 --> 00:44:50,619
thousand dollars is not worth it if you

00:44:48,490 --> 00:44:53,710
have five people if you're a big company

00:44:50,619 --> 00:44:55,990
with lots of money then maybe yes I mean

00:44:53,710 --> 00:44:58,780
not maybe but definitely yes otherwise

00:44:55,990 --> 00:45:02,050
hajikko wouldn't exist so yes they pay

00:44:58,780 --> 00:45:03,850
it and they get good support but for

00:45:02,050 --> 00:45:07,090
small companies like me where it's from

00:45:03,850 --> 00:45:10,780
one to ten people it's usually much

00:45:07,090 --> 00:45:14,310
easier to get project like citizen to

00:45:10,780 --> 00:45:16,930
have your own terraform registry hosted

00:45:14,310 --> 00:45:19,660
combine it with Atlantis combine it with

00:45:16,930 --> 00:45:21,940
Tara grant some of these things I put

00:45:19,660 --> 00:45:24,100
into Tara grant reference architecture

00:45:21,940 --> 00:45:26,859
where I combined all of this and I show

00:45:24,100 --> 00:45:31,810
how it's done the missing part right now

00:45:26,859 --> 00:45:34,540
is UI so there is no you I like

00:45:31,810 --> 00:45:37,510
centralized UI where you can give people

00:45:34,540 --> 00:45:41,050
access or make sure that you have

00:45:37,510 --> 00:45:42,850
overview of your whole infrastructure so

00:45:41,050 --> 00:45:45,670
then you have to bring onboard project

00:45:42,850 --> 00:45:48,520
like Tara board to investigate your TF

00:45:45,670 --> 00:45:51,010
states and so on so yes as always if you

00:45:48,520 --> 00:45:52,960
want to use something free you can do

00:45:51,010 --> 00:45:58,150
this but you will have to pay some money

00:45:52,960 --> 00:45:59,420
to glue all these things together thanks

00:45:58,150 --> 00:46:06,250
again anthem thank

00:45:59,420 --> 00:46:06,250
[Applause]

00:46:07,500 --> 00:46:11,590

YouTube URL: https://www.youtube.com/watch?v=h6ofrj-JBgQ


