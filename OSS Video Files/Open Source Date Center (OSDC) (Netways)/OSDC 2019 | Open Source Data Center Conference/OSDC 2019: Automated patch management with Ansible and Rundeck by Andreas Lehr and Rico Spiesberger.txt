Title: OSDC 2019: Automated patch management with Ansible and Rundeck by Andreas Lehr and Rico Spiesberger
Publication date: 2019-05-23
Playlist: OSDC 2019 | Open Source Data Center Conference
Description: 
	In our On Premise hosting environment we still run a lot of applications on traditional stacks without using containers. In order to run them in a secured way we created a mature patch automation. Thanks to ansible, rundeck, icinga and a bunch of other opensource tools we are able to update and reboot most of our systems without our customers noticing. We do that throughout the day on a regular base using rundeck, or even on short notice if another “heartbleed” occurs.

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de
Blog: http://blog.netways.de
Webinare: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh

https://www.frametraxx.de/
Captions: 
	00:00:01,140 --> 00:00:10,550
[Music]

00:00:12,200 --> 00:00:18,180
so welcome to our talk

00:00:15,049 --> 00:00:20,699
so we'll take you on on our journey to

00:00:18,180 --> 00:00:23,660
automated patch management which we've

00:00:20,699 --> 00:00:26,670
implemented within Siebel and run deck

00:00:23,660 --> 00:00:27,949
but first of all some introduction on

00:00:26,670 --> 00:00:31,260
ourselves

00:00:27,949 --> 00:00:34,710
so Nicole already introduced us or my

00:00:31,260 --> 00:00:39,180
name's Andy or Andreas you can find me

00:00:34,710 --> 00:00:41,730
on twitter on Chacal Andy yeah my name

00:00:39,180 --> 00:00:44,250
is Rico I think some of you know me

00:00:41,730 --> 00:00:48,440
already from some other talks and from

00:00:44,250 --> 00:00:52,680
some regular conferencing meetings yes

00:00:48,440 --> 00:00:56,010
also on Twitter and what we should like

00:00:52,680 --> 00:00:59,809
to show you now is how we are we did it

00:00:56,010 --> 00:01:06,350
how to control our hundreds of machines

00:00:59,809 --> 00:01:06,350
our Linux machines in a shop environment

00:01:07,520 --> 00:01:16,280
which is also not only one shop but

00:01:11,510 --> 00:01:20,790
surroundings and environments and yeah

00:01:16,280 --> 00:01:22,290
let's see how we do it okay so what

00:01:20,790 --> 00:01:24,390
we're basically doing inside Schwartz

00:01:22,290 --> 00:01:28,229
idea you might not find anything on

00:01:24,390 --> 00:01:30,659
Google on it so I have a slide on it to

00:01:28,229 --> 00:01:34,009
get you some information our department

00:01:30,659 --> 00:01:36,869
consists of around 450 people currently

00:01:34,009 --> 00:01:39,799
and we are hosting the digital stuff for

00:01:36,869 --> 00:01:42,479
little and Kaufland which you might know

00:01:39,799 --> 00:01:44,930
so currently our biggest applications

00:01:42,479 --> 00:01:48,600
are the German shop which is on the de

00:01:44,930 --> 00:01:50,570
the travel portals which are run in

00:01:48,600 --> 00:01:52,829
several countries we also have

00:01:50,570 --> 00:01:54,210
internationalization on the shops we are

00:01:52,829 --> 00:01:59,909
running them in the Netherlands Belgium

00:01:54,210 --> 00:02:01,920
in Czech Republic Poland and in Spain we

00:01:59,909 --> 00:02:04,860
also have mobile app which you might

00:02:01,920 --> 00:02:09,330
have installed on your mobile phone it's

00:02:04,860 --> 00:02:12,150
on iOS available and Android and it's

00:02:09,330 --> 00:02:13,410
running in 30 countries it's using one

00:02:12,150 --> 00:02:18,510
back-end which

00:02:13,410 --> 00:02:21,060
we're also hosting so about rots IT we

00:02:18,510 --> 00:02:24,560
are currently around 3,000 employees our

00:02:21,060 --> 00:02:28,490
headquarters in vine spec or in highborn

00:02:24,560 --> 00:02:31,380
it's between Stuttgart and Frankfurt

00:02:28,490 --> 00:02:34,590
there's also the headquarters of little

00:02:31,380 --> 00:02:38,130
and Kaufland we recently announced that

00:02:34,590 --> 00:02:40,020
we passed a 100 billion sales volume in

00:02:38,130 --> 00:02:43,470
the last fiscal year I think it was two

00:02:40,020 --> 00:02:47,340
or three days ago so we are we have some

00:02:43,470 --> 00:02:49,440
things to do and it makes fun so usually

00:02:47,340 --> 00:02:54,080
we are not talking about stuff we are

00:02:49,440 --> 00:03:00,570
doing but in this case we make an

00:02:54,080 --> 00:03:02,880
exception for the guys from we also have

00:03:00,570 --> 00:03:06,270
some chops pre Siro is a new brand we

00:03:02,880 --> 00:03:10,440
have where we are recently bought 10

00:03:06,270 --> 00:03:12,960
smile which is a recycling company and I

00:03:10,440 --> 00:03:15,480
think they have over two or three

00:03:12,960 --> 00:03:18,060
thousand employers as well and we are

00:03:15,480 --> 00:03:20,070
sponsoring the stadium of hoffenheim

00:03:18,060 --> 00:03:22,950
with this new brand which is a

00:03:20,070 --> 00:03:26,240
Bundesliga soccer club you might know

00:03:22,950 --> 00:03:29,310
it's also around in the area of hi pod

00:03:26,240 --> 00:03:32,100
and they are doing recycling where we

00:03:29,310 --> 00:03:35,550
are also doing for the guys from DM as

00:03:32,100 --> 00:03:38,850
far as I know yes and we have chops you

00:03:35,550 --> 00:03:39,330
can visit our jobs page on chop stock

00:03:38,850 --> 00:03:41,910
parts

00:03:39,330 --> 00:03:48,300
yes we also have a top-level domain

00:03:41,910 --> 00:03:51,270
which we have to run somehow so what is

00:03:48,300 --> 00:03:53,459
this talk about what the I told it

00:03:51,270 --> 00:03:57,050
like that so in the past people often

00:03:53,459 --> 00:03:59,820
were proud on long uptime so this is a

00:03:57,050 --> 00:04:04,620
Amazon machine from a friend of mine and

00:03:59,820 --> 00:04:09,150
yes he's still a friend as you might see

00:04:04,620 --> 00:04:14,190
the machine has been rebooted for 1318

00:04:09,150 --> 00:04:22,530
80 days does not make fun it also runs

00:04:14,190 --> 00:04:24,450
PHP 5 3 but boot so I want to know who

00:04:22,530 --> 00:04:26,340
I'm talking to or who we're talking to I

00:04:24,450 --> 00:04:32,190
would be interested in

00:04:26,340 --> 00:04:33,000
who of you is cloud only nobody one okay

00:04:32,190 --> 00:04:36,180
that's interesting

00:04:33,000 --> 00:04:41,010
who is on-premise only so we without

00:04:36,180 --> 00:04:43,440
cloud okay and who is hybrid hybrid

00:04:41,010 --> 00:04:45,540
hybrid okay interesting so it's half

00:04:43,440 --> 00:04:50,400
half and who of you has to patch

00:04:45,540 --> 00:04:54,680
machines okay that's something everybody

00:04:50,400 --> 00:04:56,940
has to do welcome to the cloud

00:04:54,680 --> 00:04:58,800
except you losing server less but then

00:04:56,940 --> 00:05:03,600
somebody else has to patch your service

00:04:58,800 --> 00:05:07,410
as we might know okay so our journey on

00:05:03,600 --> 00:05:09,870
automated patching we want to tell you

00:05:07,410 --> 00:05:13,680
how we've done it why we've done it and

00:05:09,870 --> 00:05:20,340
we have a live demo at least sort of a

00:05:13,680 --> 00:05:22,050
live demo yeah so why did we spend time

00:05:20,340 --> 00:05:24,090
on automated patching because you're

00:05:22,050 --> 00:05:26,460
patching is a boring task nobody wants

00:05:24,090 --> 00:05:30,539
to do it it's something you have to do

00:05:26,460 --> 00:05:32,729
but it does not make fun it's a manual

00:05:30,539 --> 00:05:36,030
process or it was a manual process in

00:05:32,729 --> 00:05:37,680
the past and manual processes are bad

00:05:36,030 --> 00:05:40,800
and error-prone

00:05:37,680 --> 00:05:44,360
so maybe Rico does it in another style

00:05:40,800 --> 00:05:47,039
as I do and this does not make sense

00:05:44,360 --> 00:05:49,410
what's also bad on patching is that

00:05:47,039 --> 00:05:51,840
usually if you run online shop you have

00:05:49,410 --> 00:05:53,520
to coordinate a maintenance window or at

00:05:51,840 --> 00:05:56,010
least a window you can patch the

00:05:53,520 --> 00:05:57,600
machines so that hopefully there is no

00:05:56,010 --> 00:06:00,270
deployment of your application in the

00:05:57,600 --> 00:06:04,680
same time because otherwise things get

00:06:00,270 --> 00:06:07,620
messy and of course you need time for

00:06:04,680 --> 00:06:10,380
patching the machines because yeah we

00:06:07,620 --> 00:06:13,979
are only six people currently providing

00:06:10,380 --> 00:06:17,570
seven or eight hundred machines we don't

00:06:13,979 --> 00:06:25,889
want to spend that much time on patching

00:06:17,570 --> 00:06:30,120
window because like this and maybe also

00:06:25,889 --> 00:06:34,880
other stuff to do so this is always a

00:06:30,120 --> 00:06:36,700
pain for even coordinated with how many

00:06:34,880 --> 00:06:41,830
different

00:06:36,700 --> 00:06:45,910
we are we have different people some of

00:06:41,830 --> 00:06:48,450
them but yeah we have a lot of customers

00:06:45,910 --> 00:06:50,920
inside where we have to talk to and they

00:06:48,450 --> 00:06:52,870
some want to have a cheer our ticket

00:06:50,920 --> 00:06:55,000
someone to have email someone to have a

00:06:52,870 --> 00:06:59,260
phone call and this does not make sense

00:06:55,000 --> 00:07:01,240
takes too much time okay what else yeah

00:06:59,260 --> 00:07:06,280
we want to make security and auditors

00:07:01,240 --> 00:07:08,560
happy so we have this thing called ISO

00:07:06,280 --> 00:07:11,590
which is our information security

00:07:08,560 --> 00:07:16,330
officer it's a team of security officers

00:07:11,590 --> 00:07:17,800
obviously we run Qualys and regular

00:07:16,330 --> 00:07:20,170
scans of the machines and our whole

00:07:17,800 --> 00:07:21,430
environment and they often not on our

00:07:20,170 --> 00:07:24,250
door and say hey there's a new

00:07:21,430 --> 00:07:26,710
vulnerability and then we want to say

00:07:24,250 --> 00:07:30,420
yeah we know we already patched it so

00:07:26,710 --> 00:07:32,800
this would be the optimal situation and

00:07:30,420 --> 00:07:34,720
we also have regular audits from

00:07:32,800 --> 00:07:38,520
external companies they scan our

00:07:34,720 --> 00:07:41,200
machines or they try to hack stuff and

00:07:38,520 --> 00:07:43,480
having a process for automated patching

00:07:41,200 --> 00:07:48,130
helps there as well so you might want to

00:07:43,480 --> 00:07:50,290
have it as well with the payment stuff

00:07:48,130 --> 00:07:53,140
in background and something you have to

00:07:50,290 --> 00:07:55,060
be as secure as possible and even the

00:07:53,140 --> 00:07:58,450
machines itself have to be secured not

00:07:55,060 --> 00:08:00,910
only some firewall or web application

00:07:58,450 --> 00:08:04,060
firewalls perimeters around but also the

00:08:00,910 --> 00:08:08,500
machines itself has to be bulletproof as

00:08:04,060 --> 00:08:11,490
good as possible yeah and and you might

00:08:08,500 --> 00:08:15,850
all know something about hard pleat and

00:08:11,490 --> 00:08:17,980
what's what else awaits us tomorrow we

00:08:15,850 --> 00:08:20,740
don't know so you want to have a process

00:08:17,980 --> 00:08:22,930
for emergency patching so when the ISO

00:08:20,740 --> 00:08:24,640
knocks at the door and says hey there's

00:08:22,930 --> 00:08:27,280
this vulnerability from this night

00:08:24,640 --> 00:08:29,950
please patch it immediately so you want

00:08:27,280 --> 00:08:31,690
to have a process or at best it would be

00:08:29,950 --> 00:08:33,520
to have the same process as your normal

00:08:31,690 --> 00:08:39,420
patching process to make an emergency

00:08:33,520 --> 00:08:41,410
patching of all your service what else

00:08:39,420 --> 00:08:43,750
yeah you want to have a mature and

00:08:41,410 --> 00:08:45,820
reliable process that's what I told you

00:08:43,750 --> 00:08:48,130
before so we are six guys in in our

00:08:45,820 --> 00:08:50,410
department and if we wouldn't have a

00:08:48,130 --> 00:08:54,490
standard is the highest way on page

00:08:50,410 --> 00:08:56,260
everybody will do it on his own style so

00:08:54,490 --> 00:08:58,540
somebody will set a down time in the

00:08:56,260 --> 00:09:01,600
monitoring somebody will make a snapshot

00:08:58,540 --> 00:09:03,940
of the Machine sometimes they might

00:09:01,600 --> 00:09:05,710
forgot it because yeah they got an

00:09:03,940 --> 00:09:08,800
interruption and interruptions are

00:09:05,710 --> 00:09:12,040
always bad so you shouldn't have to care

00:09:08,800 --> 00:09:14,800
about this whole here things around your

00:09:12,040 --> 00:09:17,770
patching process thank you of course you

00:09:14,800 --> 00:09:19,930
always want to have the same process and

00:09:17,770 --> 00:09:22,240
workflow for every patching and it

00:09:19,930 --> 00:09:23,410
should be repeatable and the

00:09:22,240 --> 00:09:25,750
documentation should be done

00:09:23,410 --> 00:09:28,540
automatically as well so if some of the

00:09:25,750 --> 00:09:30,430
auditors comes and say hey when was your

00:09:28,540 --> 00:09:32,500
last patching you just show him your

00:09:30,430 --> 00:09:35,050
automatic documentation because you

00:09:32,500 --> 00:09:37,740
don't want to patch and then have a

00:09:35,050 --> 00:09:43,870
manual documentation does not make sense

00:09:37,740 --> 00:09:47,590
okay and basically this is how we do it

00:09:43,870 --> 00:09:50,500
so as I said you'll see it later on in

00:09:47,590 --> 00:09:53,170
our live demo we are using run deck

00:09:50,500 --> 00:09:56,050
which is an open source workflow tool

00:09:53,170 --> 00:09:58,060
something like a control-m light there's

00:09:56,050 --> 00:10:00,760
also a paid version available I believe

00:09:58,060 --> 00:10:03,790
but for us the open source version is

00:10:00,760 --> 00:10:07,450
completely fine we started with our

00:10:03,790 --> 00:10:09,610
automated patching when aw wasn't there

00:10:07,450 --> 00:10:12,490
so which is the open source or upstream

00:10:09,610 --> 00:10:15,550
project of ends about our we are now

00:10:12,490 --> 00:10:17,830
currently looking looking into it and it

00:10:15,550 --> 00:10:20,050
has some pros and cons and yeah we don't

00:10:17,830 --> 00:10:23,020
want to have a zoo of tools but we'll

00:10:20,050 --> 00:10:27,550
see what wins what is nice on rounding

00:10:23,020 --> 00:10:29,680
is that you can also you can also hand

00:10:27,550 --> 00:10:32,560
over chops to your to other departments

00:10:29,680 --> 00:10:34,780
without giving them access to machines

00:10:32,560 --> 00:10:37,270
so for example a restart of a service

00:10:34,780 --> 00:10:38,200
could be done we are an API of run tech

00:10:37,270 --> 00:10:40,270
or something like that

00:10:38,200 --> 00:10:42,520
and our ansible is running in the back

00:10:40,270 --> 00:10:48,700
so we have a complete set of ansible

00:10:42,520 --> 00:10:50,500
playbooks where we so who does know

00:10:48,700 --> 00:10:54,030
ansible I believe everybody knows

00:10:50,500 --> 00:10:56,920
ansible right so--okay so ansible is

00:10:54,030 --> 00:11:00,580
something Red Hat has also bought two

00:10:56,920 --> 00:11:02,410
years ago I believe it's used for

00:11:00,580 --> 00:11:04,329
configuration management but we use it

00:11:02,410 --> 00:11:06,189
for for the automation of

00:11:04,329 --> 00:11:08,319
Pech management and we'll show you in a

00:11:06,189 --> 00:11:10,509
minute why so we're doing the patching

00:11:08,319 --> 00:11:12,790
host by host or parallel depending on

00:11:10,509 --> 00:11:15,309
what we want to do so we have a host by

00:11:12,790 --> 00:11:18,369
host patching for life stuff so we're

00:11:15,309 --> 00:11:20,619
doing life patching at least every four

00:11:18,369 --> 00:11:23,350
weeks and we have a one week cycle for

00:11:20,619 --> 00:11:24,910
all development testing and QA systems

00:11:23,350 --> 00:11:28,569
so we're patching them usually on the

00:11:24,910 --> 00:11:30,309
weekend and have an automation there we

00:11:28,569 --> 00:11:31,989
then have a four week cycle for prod but

00:11:30,309 --> 00:11:35,170
we're thinking about having the one week

00:11:31,989 --> 00:11:38,529
cycle for broad in the future as well

00:11:35,170 --> 00:11:40,299
yeah emergency staff stuff can be

00:11:38,529 --> 00:11:42,279
patched without for your information

00:11:40,299 --> 00:11:44,259
that's what we usually do when we have

00:11:42,279 --> 00:11:45,999
something like heartbleed so we trust

00:11:44,259 --> 00:11:48,369
roll out the patches and inform the

00:11:45,999 --> 00:11:50,949
department's later on so the first goal

00:11:48,369 --> 00:11:55,449
would be to have the patch life and then

00:11:50,949 --> 00:11:57,189
make the information okay if you have

00:11:55,449 --> 00:12:00,129
any questions just interrupt me so we

00:11:57,189 --> 00:12:02,769
don't need to wait later on so this is

00:12:00,129 --> 00:12:05,589
how we do it so basically the basic

00:12:02,769 --> 00:12:07,029
steps of course we set it on time in our

00:12:05,589 --> 00:12:10,329
monitoring because we don't want to

00:12:07,029 --> 00:12:11,949
notify our on-call or someone else our

00:12:10,329 --> 00:12:16,619
monitoring to it currently is a singer

00:12:11,949 --> 00:12:18,999
so thanks to Rico and the other guys

00:12:16,619 --> 00:12:21,819
important thing is to set a down time

00:12:18,999 --> 00:12:22,629
and if you don't automate that somebody

00:12:21,819 --> 00:12:25,989
will forget it

00:12:22,629 --> 00:12:28,600
for sure and somebody will be alarmed

00:12:25,989 --> 00:12:31,269
and you don't want to be alarmed on the

00:12:28,600 --> 00:12:34,929
weekend or during the night if a

00:12:31,269 --> 00:12:37,179
patching occurs what else do we do of

00:12:34,929 --> 00:12:40,059
course we we create a VM parsnip shot

00:12:37,179 --> 00:12:44,019
it's currently our main virtualization

00:12:40,059 --> 00:12:46,569
layer we have around 95 96 percent of

00:12:44,019 --> 00:12:48,929
machines virtualized so we try not to

00:12:46,569 --> 00:12:51,610
use physical hardware because our whole

00:12:48,929 --> 00:12:54,699
operational process runs around the

00:12:51,610 --> 00:12:57,579
virtualized environment this is hard

00:12:54,699 --> 00:13:01,239
when when you talk about big sa P

00:12:57,579 --> 00:13:04,119
databases consuming much memory and and

00:13:01,239 --> 00:13:06,869
data store or even paid software you

00:13:04,119 --> 00:13:11,589
where you don't have that much

00:13:06,869 --> 00:13:17,019
self-developed or possibilities to self

00:13:11,589 --> 00:13:18,220
optimize your own code yeah and we try

00:13:17,019 --> 00:13:21,640
to make p2

00:13:18,220 --> 00:13:25,930
be physical to virtual migrations

00:13:21,640 --> 00:13:27,700
wherever possible because we really rely

00:13:25,930 --> 00:13:30,040
heavily on the visualization so for your

00:13:27,700 --> 00:13:31,360
automated patching do your automated

00:13:30,040 --> 00:13:36,250
snapshot of course that you have a

00:13:31,360 --> 00:13:38,590
rollback mechanism available what else

00:13:36,250 --> 00:13:42,160
send the Raven like the Game of Thrones

00:13:38,590 --> 00:13:44,650
viewers know sent notifications so we

00:13:42,160 --> 00:13:49,000
depending on our departments we have

00:13:44,650 --> 00:13:51,130
plenty of notification possibility so we

00:13:49,000 --> 00:13:54,310
are heavy users of rocket jet which is

00:13:51,130 --> 00:13:57,130
also open source slack we host ourselves

00:13:54,310 --> 00:13:59,800
so we can spam notifications on patching

00:13:57,130 --> 00:14:01,390
inside rocket jet we send emails we

00:13:59,800 --> 00:14:05,290
update JIRA tickets

00:14:01,390 --> 00:14:07,840
I think n subbu can even send the fax if

00:14:05,290 --> 00:14:10,840
some of your internal customers want to

00:14:07,840 --> 00:14:13,620
have it what we are not doing is

00:14:10,840 --> 00:14:16,480
automated phone calls but I believe

00:14:13,620 --> 00:14:18,190
updating to your our tickets and rocket

00:14:16,480 --> 00:14:22,570
jet email should be enough because they

00:14:18,190 --> 00:14:25,800
are already too many interruptions yeah

00:14:22,570 --> 00:14:28,420
and what's next after the notification

00:14:25,800 --> 00:14:30,100
we make some host preparations so we

00:14:28,420 --> 00:14:32,800
spend a lot of time in this host

00:14:30,100 --> 00:14:34,690
preparation stage we remove load

00:14:32,800 --> 00:14:37,660
balancer health checks we deactivate

00:14:34,690 --> 00:14:40,330
nodes in Apache proxy balance or or in

00:14:37,660 --> 00:14:42,820
other proxy balance or Suites we have or

00:14:40,330 --> 00:14:45,610
cluster Suites this all is done in

00:14:42,820 --> 00:14:49,960
ansible with ansible code we stop

00:14:45,610 --> 00:14:52,720
services for example even Oracle

00:14:49,960 --> 00:14:55,300
databases where we then get a switch

00:14:52,720 --> 00:14:58,270
over to another node or my sequel per

00:14:55,300 --> 00:15:00,580
corner cluster it's it's better to stop

00:14:58,270 --> 00:15:02,530
the service first and not do the hard

00:15:00,580 --> 00:15:04,750
reboot where the service automatically

00:15:02,530 --> 00:15:07,780
get stopped so the handover is a big a

00:15:04,750 --> 00:15:09,640
bit easier if you if you have your hand

00:15:07,780 --> 00:15:14,530
on stopping the services before the

00:15:09,640 --> 00:15:18,700
reboot yeah and then it's finally

00:15:14,530 --> 00:15:20,740
upgrade time if necessary

00:15:18,700 --> 00:15:22,840
so we also check is the upgrade

00:15:20,740 --> 00:15:25,090
necessary and then we'll do the upgrade

00:15:22,840 --> 00:15:27,880
if not we skip it so because not the

00:15:25,090 --> 00:15:29,950
hosts not all if you do a once a week

00:15:27,880 --> 00:15:32,080
patching and you're using Red Hat

00:15:29,950 --> 00:15:34,029
Enterprise 6 or send OS 6

00:15:32,080 --> 00:15:36,930
there's not a patch available anymore

00:15:34,029 --> 00:15:40,570
once a week so usually there is one

00:15:36,930 --> 00:15:44,580
small stuff available but not every week

00:15:40,570 --> 00:15:47,410
so we only patch if necessary of course

00:15:44,580 --> 00:15:49,630
yeah and there's also a thing called

00:15:47,410 --> 00:15:51,850
needs restarting which you can use in

00:15:49,630 --> 00:15:55,000
ansible there you can check if there are

00:15:51,850 --> 00:15:58,600
modules or if you upgraded package it's

00:15:55,000 --> 00:16:00,519
inside your machine and that the Machine

00:15:58,600 --> 00:16:02,950
needs restarting for example if a new

00:16:00,519 --> 00:16:05,320
kernel has been installed and you want

00:16:02,950 --> 00:16:07,570
to have the recent kernel active because

00:16:05,320 --> 00:16:11,800
that's also something what makes

00:16:07,570 --> 00:16:14,380
security happy obviously we always try

00:16:11,800 --> 00:16:17,050
to reboot a machine in any case so we

00:16:14,380 --> 00:16:19,570
have some some exceptions to that

00:16:17,050 --> 00:16:21,790
because you want to be sure that your

00:16:19,570 --> 00:16:23,620
your stuff comes up automatically in the

00:16:21,790 --> 00:16:26,950
right order which might also be a

00:16:23,620 --> 00:16:29,769
problem when you have external vendor

00:16:26,950 --> 00:16:33,420
software where you have to to stick to a

00:16:29,769 --> 00:16:36,220
specific restart order in the services

00:16:33,420 --> 00:16:38,140
so we have two or three applications

00:16:36,220 --> 00:16:45,040
where we have this problem and then you

00:16:38,140 --> 00:16:47,380
can also adjust your restart or reboot

00:16:45,040 --> 00:16:48,910
and take a look at which machine needs

00:16:47,380 --> 00:16:51,610
to be restarted so the database should

00:16:48,910 --> 00:16:55,620
be there before the before the

00:16:51,610 --> 00:16:59,500
middleware or the application server and

00:16:55,620 --> 00:17:01,750
yeah that's basically the thing what we

00:16:59,500 --> 00:17:04,630
then do we have a lot of after reboot

00:17:01,750 --> 00:17:07,839
tasks as well so for example we remove

00:17:04,630 --> 00:17:10,020
old kernels Qualis is also alarming

00:17:07,839 --> 00:17:12,459
security if we have old kernel installed

00:17:10,020 --> 00:17:16,809
and people can do that as well so you

00:17:12,459 --> 00:17:19,150
can we usually removed we keep the

00:17:16,809 --> 00:17:21,699
active running kernel and the pre or one

00:17:19,150 --> 00:17:23,559
on the machine and everyone else we

00:17:21,699 --> 00:17:26,020
delete automatically because we don't

00:17:23,559 --> 00:17:29,500
need it we know always that the recent

00:17:26,020 --> 00:17:32,460
version from before was active and so in

00:17:29,500 --> 00:17:36,160
that case we can remove all the rest

00:17:32,460 --> 00:17:39,040
what we also do is we store the patching

00:17:36,160 --> 00:17:41,559
date of the machine in a file called EDC

00:17:39,040 --> 00:17:45,820
last patching this is just a timestamp

00:17:41,559 --> 00:17:47,710
where we we know

00:17:45,820 --> 00:17:49,480
where we write down the patching date we

00:17:47,710 --> 00:17:51,790
use it for a single monitoring as well

00:17:49,480 --> 00:17:54,640
so where we can see that our automated

00:17:51,790 --> 00:17:57,280
patching is working we have a multi

00:17:54,640 --> 00:17:58,960
updater it's currently not live it's

00:17:57,280 --> 00:18:01,270
done twice a day you will see it later

00:17:58,960 --> 00:18:04,330
on where we also have this last patching

00:18:01,270 --> 00:18:06,550
when you log in into your machine we

00:18:04,330 --> 00:18:08,680
also use ansible CMDB where we are also

00:18:06,550 --> 00:18:12,070
using last patching so that the manager

00:18:08,680 --> 00:18:15,220
can go to the CMDB and make a salt on

00:18:12,070 --> 00:18:17,440
last patching and then he can see ah the

00:18:15,220 --> 00:18:19,870
patch automation the guys always told me

00:18:17,440 --> 00:18:24,430
about is it really working or not so you

00:18:19,870 --> 00:18:27,220
can look it up in the CMDB what we also

00:18:24,430 --> 00:18:28,720
do is of course we we need to reactivate

00:18:27,220 --> 00:18:30,640
the load balancer checks that the

00:18:28,720 --> 00:18:32,980
machines come back online we make

00:18:30,640 --> 00:18:35,560
cleanups on yum because you don't want

00:18:32,980 --> 00:18:39,130
to have several hundred servers with

00:18:35,560 --> 00:18:42,040
stuff in yum in the in the yum cache you

00:18:39,130 --> 00:18:43,930
don't need we update a patch list

00:18:42,040 --> 00:18:47,320
documentation this is something our

00:18:43,930 --> 00:18:49,180
departments can can check in the browser

00:18:47,320 --> 00:18:52,060
what's the state on the machine and

00:18:49,180 --> 00:18:54,760
which PAP PHP version was installed of

00:18:52,060 --> 00:18:57,220
which Java version upgrade was installed

00:18:54,760 --> 00:19:00,130
when so they can check hey my

00:18:57,220 --> 00:19:02,530
application is not behaving as yesterday

00:19:00,130 --> 00:19:05,140
what patches have been installed they

00:19:02,530 --> 00:19:07,060
don't need to contact us they can look

00:19:05,140 --> 00:19:10,590
it up in the browser for example or the

00:19:07,060 --> 00:19:13,750
auditors as well and security of course

00:19:10,590 --> 00:19:15,310
yeah what we then do after the patching

00:19:13,750 --> 00:19:16,930
we remove uh so the downtime in the

00:19:15,310 --> 00:19:18,970
monitoring because then the server is

00:19:16,930 --> 00:19:22,000
active again and if something else goes

00:19:18,970 --> 00:19:24,280
wrong we want to be notified when we

00:19:22,000 --> 00:19:27,400
moved we have a snapshot which is an

00:19:24,280 --> 00:19:29,440
important thing you don't want to have

00:19:27,400 --> 00:19:34,260
all snapshots but Rico will tell about

00:19:29,440 --> 00:19:36,370
that so we have some impediments and

00:19:34,260 --> 00:19:41,860
recommendations on automated patching

00:19:36,370 --> 00:19:46,390
yeah there are some findings if you

00:19:41,860 --> 00:19:49,240
build such a solution like every time

00:19:46,390 --> 00:19:53,200
you have to readjust or keep an eye on

00:19:49,240 --> 00:19:57,370
special things things we found out for

00:19:53,200 --> 00:19:59,710
our environment was for example that the

00:19:57,370 --> 00:20:02,440
deletion like and they already said

00:19:59,710 --> 00:20:06,970
of the Deneb shots is important because

00:20:02,440 --> 00:20:09,790
you know they pile up and maybe also one

00:20:06,970 --> 00:20:12,760
of the other guys creates a snapshot for

00:20:09,790 --> 00:20:15,280
some reason and then it's not clear

00:20:12,760 --> 00:20:17,920
which is what stage and whatever so we

00:20:15,280 --> 00:20:20,470
do it like this that we when we are

00:20:17,920 --> 00:20:21,670
finished with our patching just remove

00:20:20,470 --> 00:20:23,950
it if everything is fine

00:20:21,670 --> 00:20:31,810
nobody needs to snapshot anymore so go

00:20:23,950 --> 00:20:34,210
away the other thing is that there are

00:20:31,810 --> 00:20:38,080
some hardware service in our environment

00:20:34,210 --> 00:20:40,150
that are also patched automatically he

00:20:38,080 --> 00:20:41,740
behaves a little bit different like we

00:20:40,150 --> 00:20:44,620
embrace you know when you reboot a

00:20:41,740 --> 00:20:46,150
VMware three seconds so that's two pings

00:20:44,620 --> 00:20:46,740
or something like this machine is back

00:20:46,150 --> 00:20:48,730
online

00:20:46,740 --> 00:20:53,080
the hardware takes a little bit more

00:20:48,730 --> 00:20:55,450
time like our well-known HP servers for

00:20:53,080 --> 00:21:00,490
example this is my worst case scenario

00:20:55,450 --> 00:21:03,310
of already I always tell about they do

00:21:00,490 --> 00:21:07,110
some initialization DC of sensors needs

00:21:03,310 --> 00:21:10,870
to be initialized yeah it takes time so

00:21:07,110 --> 00:21:15,720
also ansible is waiting then and where

00:21:10,870 --> 00:21:19,120
is it and you think okay what is it so

00:21:15,720 --> 00:21:24,760
that's important hardware needs time so

00:21:19,120 --> 00:21:28,060
also schedule that and also leave it or

00:21:24,760 --> 00:21:31,270
keep an eye on maybe with a firmware

00:21:28,060 --> 00:21:34,090
update also on the hardware itself there

00:21:31,270 --> 00:21:37,840
are some changes in the behavior so for

00:21:34,090 --> 00:21:41,590
the next patch run it might be important

00:21:37,840 --> 00:21:47,170
so maybe if you can test it for example

00:21:41,590 --> 00:21:51,370
do it before the next patch run so to

00:21:47,170 --> 00:21:53,920
avoid some stuff you don't want to have

00:21:51,370 --> 00:21:57,280
for example when developers already in

00:21:53,920 --> 00:22:00,820
in in the in your neck and want to

00:21:57,280 --> 00:22:02,860
deploy something and you invade for you

00:22:00,820 --> 00:22:07,770
to to we finish with a bit of patch

00:22:02,860 --> 00:22:07,770
window that might cause some trouble

00:22:09,420 --> 00:22:14,720
preload packages that is

00:22:12,710 --> 00:22:18,200
also something that is important to do

00:22:14,720 --> 00:22:22,010
it before not just when you do some

00:22:18,200 --> 00:22:24,350
parallel tasks and they all deform the

00:22:22,010 --> 00:22:25,880
whole phone begins to download every

00:22:24,350 --> 00:22:30,230
patch and you know sometimes it's a

00:22:25,880 --> 00:22:32,570
little bit more that takes also time so

00:22:30,230 --> 00:22:35,870
you can pre download it to the machines

00:22:32,570 --> 00:22:39,380
and then just come up with a patching

00:22:35,870 --> 00:22:45,230
task and patch it what it says

00:22:39,380 --> 00:22:49,850
like saves time and you have some yeah

00:22:45,230 --> 00:22:53,000
things you can you can use the time

00:22:49,850 --> 00:22:54,740
better for do some there are some some

00:22:53,000 --> 00:22:56,330
things even some installations of some

00:22:54,740 --> 00:22:59,510
kernels sometimes takes a little bit

00:22:56,330 --> 00:23:02,000
longer the time is better used for that

00:22:59,510 --> 00:23:04,190
instead of downloading the packages and

00:23:02,000 --> 00:23:05,840
maybe some the package server is a

00:23:04,190 --> 00:23:08,950
little bit slow at the moment because we

00:23:05,840 --> 00:23:08,950
have a bottlenecks time in the network

00:23:10,660 --> 00:23:23,650
so and this hurts us sometimes very much

00:23:20,620 --> 00:23:30,140
because when there is not enough space

00:23:23,650 --> 00:23:31,940
in some folders in the yum folder for

00:23:30,140 --> 00:23:37,220
example yeah if the packets download is

00:23:31,940 --> 00:23:40,010
not done yeah that's something bad and

00:23:37,220 --> 00:23:43,190
even in the temp when you install a new

00:23:40,010 --> 00:23:48,490
kernel you know it uses the temp space

00:23:43,190 --> 00:23:56,600
and if the temp space is not big enough

00:23:48,490 --> 00:23:59,480
it will not do it and the machine comes

00:23:56,600 --> 00:24:03,350
up with a kernel panic that also happens

00:23:59,480 --> 00:24:07,220
so maybe have a look with a bit some pre

00:24:03,350 --> 00:24:12,380
tasks or even do it in the monitoring

00:24:07,220 --> 00:24:20,300
that you have to levels adjusted like

00:24:12,380 --> 00:24:23,900
that there is enough space and parallel

00:24:20,300 --> 00:24:26,360
patching is also important because when

00:24:23,900 --> 00:24:28,640
you really do in

00:24:26,360 --> 00:24:35,030
like we have when you do batching one by

00:24:28,640 --> 00:24:38,540
one takes time and also ansible waits

00:24:35,030 --> 00:24:40,490
for the next house to patch if the other

00:24:38,540 --> 00:24:46,990
one is coming up and stuff like this so

00:24:40,490 --> 00:24:52,220
a parallelization is yeah possible or

00:24:46,990 --> 00:24:55,630
has to be done as much as possible but

00:24:52,220 --> 00:24:59,060
yes it depends on how many amount of

00:24:55,630 --> 00:25:01,340
memory and CPU you have for example on

00:24:59,060 --> 00:25:10,120
your virtual platform sometimes it also

00:25:01,340 --> 00:25:18,020
uses heavily yeah feeling how your

00:25:10,120 --> 00:25:20,330
platform is behaving so life demo we

00:25:18,020 --> 00:25:23,960
missed one obviously and over

00:25:20,330 --> 00:25:24,610
unfortunately I just go back it's no

00:25:23,960 --> 00:25:27,680
problem

00:25:24,610 --> 00:25:31,430
but it's an important one so have to fix

00:25:27,680 --> 00:25:34,550
timeslots thing oh yeah by this what do

00:25:31,430 --> 00:25:35,840
we mean by fixed time slots so we

00:25:34,550 --> 00:25:37,940
mentioned before that we have a four

00:25:35,840 --> 00:25:39,710
week cycle so you can't say your

00:25:37,940 --> 00:25:42,080
developers we're patching on a four week

00:25:39,710 --> 00:25:44,090
cycle so they don't know when you patch

00:25:42,080 --> 00:25:46,550
so what's the fixed time slot for

00:25:44,090 --> 00:25:50,570
example it's every first Tuesday in the

00:25:46,550 --> 00:25:52,970
month or every second Thursday something

00:25:50,570 --> 00:25:54,860
like that that's a fixed time slot and

00:25:52,970 --> 00:25:58,430
it can be added to a calendar it can be

00:25:54,860 --> 00:26:00,950
automated every four weeks is how to

00:25:58,430 --> 00:26:03,500
automate and it's a different day of the

00:26:00,950 --> 00:26:05,420
week maybe it's on a on a public holiday

00:26:03,500 --> 00:26:08,990
or on the weekend and you don't want to

00:26:05,420 --> 00:26:10,940
do that and yeah that's our but besides

00:26:08,990 --> 00:26:14,450
this we also have to send out some

00:26:10,940 --> 00:26:16,520
loadings before yeah because it's always

00:26:14,450 --> 00:26:20,470
a big surprise that today is that day

00:26:16,520 --> 00:26:27,770
yeah and we don't patch on Friday so

00:26:20,470 --> 00:26:30,290
that's something you shouldn't do so on

00:26:27,770 --> 00:26:33,440
the weekend but the problem with this

00:26:30,290 --> 00:26:36,650
ecommerce stuff is that usually your

00:26:33,440 --> 00:26:40,250
customers are most active on the weekend

00:26:36,650 --> 00:26:41,630
so for our case at least so our most pop

00:26:40,250 --> 00:26:44,060
days when you're going in the retail

00:26:41,630 --> 00:26:45,650
store you're going on Saturday and if

00:26:44,060 --> 00:26:48,200
you're buying online it's usually on

00:26:45,650 --> 00:26:50,240
Sunday so we usually usually have the

00:26:48,200 --> 00:26:53,090
Sunday and Monday are the Crowder's days

00:26:50,240 --> 00:26:54,110
online for us so it's would be a hard

00:26:53,090 --> 00:26:56,540
thing to do

00:26:54,110 --> 00:27:00,320
patching there and that's why we're

00:26:56,540 --> 00:27:05,210
doing it on Wednesday or something like

00:27:00,320 --> 00:27:14,690
that so or today for example and that's

00:27:05,210 --> 00:27:17,560
what we show you now or yeah so I

00:27:14,690 --> 00:27:17,560
prepared something

00:27:20,620 --> 00:27:29,720
what would automatically be if I would

00:27:24,620 --> 00:27:32,570
have to start it now so oh yes so we

00:27:29,720 --> 00:27:34,850
have Spanish online shop as well

00:27:32,570 --> 00:27:37,040
they are also it's interesting because

00:27:34,850 --> 00:27:38,630
they are active in the night now that's

00:27:37,040 --> 00:27:41,810
completely different to the Germans

00:27:38,630 --> 00:27:43,820
Germans eat at 6 o'clock then they shop

00:27:41,810 --> 00:27:46,910
online then they go to bed and the

00:27:43,820 --> 00:27:48,710
Spanish guys they do it all the way

00:27:46,910 --> 00:27:50,840
around so they eat at 9 o'clock or

00:27:48,710 --> 00:27:53,900
something like that and at 11 o'clock

00:27:50,840 --> 00:27:56,330
the traffic increases so they have a

00:27:53,900 --> 00:27:58,580
traffic spike in the night so you can't

00:27:56,330 --> 00:28:01,300
use that as a Patrick window and it's

00:27:58,580 --> 00:28:04,760
why we decided to do it this morning so

00:28:01,300 --> 00:28:07,250
I think it's it's currently running as

00:28:04,760 --> 00:28:09,590
you might see here this is our mod D

00:28:07,250 --> 00:28:12,770
where you can see our last patching

00:28:09,590 --> 00:28:14,690
Motty which is so to prove that I'm not

00:28:12,770 --> 00:28:16,190
lying here this is a productive machine

00:28:14,690 --> 00:28:17,900
you can see it in a minute because I

00:28:16,190 --> 00:28:18,200
tailed the varnish lock or something

00:28:17,900 --> 00:28:20,240
like that

00:28:18,200 --> 00:28:24,200
it's a webserver and this is our last

00:28:20,240 --> 00:28:25,880
patching file it's the 9th of May so

00:28:24,200 --> 00:28:28,400
it's last Thursday when the machine was

00:28:25,880 --> 00:28:33,110
patched last time and obviously my

00:28:28,400 --> 00:28:35,960
connection got closed some time ago so

00:28:33,110 --> 00:28:37,880
hopefully I can log back in now oops

00:28:35,960 --> 00:28:40,300
so I'm locked in out of the VPN one

00:28:37,880 --> 00:28:40,300
second

00:28:45,920 --> 00:29:01,770
okay so I'm trying to read login

00:28:54,840 --> 00:29:03,600
obviously the Wi-Fi is a bit slow this

00:29:01,770 --> 00:29:05,310
should work come on that's the thing on

00:29:03,600 --> 00:29:08,070
life they were so okay I'm locked back

00:29:05,310 --> 00:29:11,220
in so Oh the mati already got updated as

00:29:08,070 --> 00:29:17,130
you can see here it's the 15th which is

00:29:11,220 --> 00:29:20,400
obviously today when we make a cat on

00:29:17,130 --> 00:29:24,990
last patching can you see that I'll

00:29:20,400 --> 00:29:26,760
increase the size a bit so as you might

00:29:24,990 --> 00:29:30,480
see it's it's the reason date and the

00:29:26,760 --> 00:29:32,880
Machine is up for 41 minutes now so we

00:29:30,480 --> 00:29:35,040
scheduled our patching process on 10:30

00:29:32,880 --> 00:29:38,460
it usually takes around 40 minutes or so

00:29:35,040 --> 00:29:40,560
on the shop so Minh you do it manually

00:29:38,460 --> 00:29:42,600
it would be a lot faster but we don't

00:29:40,560 --> 00:29:45,170
care how how long it takes because it's

00:29:42,600 --> 00:29:47,940
automated nobody has to take care about

00:29:45,170 --> 00:29:49,800
so obviously oh no this application

00:29:47,940 --> 00:29:57,540
server machine so I'll now go to the web

00:29:49,800 --> 00:30:10,830
server first thing here so that you can

00:29:57,540 --> 00:30:12,120
see that I'm not lying this one oops so

00:30:10,830 --> 00:30:19,280
that we have some traffic on this

00:30:12,120 --> 00:30:19,280
machine obviously not is it a bit slow

00:30:23,060 --> 00:30:26,820
obviously it's not handling that much

00:30:25,110 --> 00:30:34,920
traffic currently I have to check that

00:30:26,820 --> 00:30:39,930
in a minute that's the thing on live

00:30:34,920 --> 00:30:42,720
demo so it has worked some time ago so

00:30:39,930 --> 00:30:44,810
that's what I said what we're doing with

00:30:42,720 --> 00:30:48,000
our patch lists though these are all

00:30:44,810 --> 00:30:51,930
groups in ansible in inventory groups

00:30:48,000 --> 00:30:54,810
and we also have a group here for little

00:30:51,930 --> 00:30:55,290
espana which is a little espana of

00:30:54,810 --> 00:30:57,600
course

00:30:55,290 --> 00:31:00,510
and on the bottom of the page there's

00:30:57,600 --> 00:31:02,790
today's state and then you can just it's

00:31:00,510 --> 00:31:06,870
just a simple yum patch list where you

00:31:02,790 --> 00:31:10,230
can take a look at okay the host was has

00:31:06,870 --> 00:31:11,760
only a chili PC update and nacd so

00:31:10,230 --> 00:31:15,570
that's not that much so this couldn't

00:31:11,760 --> 00:31:20,310
can be looked by our developers and

00:31:15,570 --> 00:31:23,460
auditors as well so I can also show you

00:31:20,310 --> 00:31:26,190
on Pingdom that the service is still

00:31:23,460 --> 00:31:28,410
hopefully alive there's no other problem

00:31:26,190 --> 00:31:31,650
so there was no outage when we patched

00:31:28,410 --> 00:31:34,290
or maybe it's still running so we can

00:31:31,650 --> 00:31:39,050
check that in run deck so this is the

00:31:34,290 --> 00:31:39,050
job I have to be login

00:31:50,309 --> 00:31:57,929
so as we might see over here this is the

00:31:52,979 --> 00:32:01,200
Chop number twenty nine thousand zero 18

00:31:57,929 --> 00:32:06,659
so we scheduled twenty nine thousand

00:32:01,200 --> 00:32:10,440
shops in our run deck now I can take a

00:32:06,659 --> 00:32:13,559
look at the log output so this is

00:32:10,440 --> 00:32:16,229
basically things we do so you can see

00:32:13,559 --> 00:32:19,529
this is something like send a message to

00:32:16,229 --> 00:32:23,820
rocket jet this is the patch list we are

00:32:19,529 --> 00:32:27,450
generating and then we're setting the

00:32:23,820 --> 00:32:29,190
downtime between some some this is all

00:32:27,450 --> 00:32:31,320
the stuff which is handled by

00:32:29,190 --> 00:32:34,109
environment variables so there's no bare

00:32:31,320 --> 00:32:37,019
oracle database on that machine no no a

00:32:34,109 --> 00:32:42,269
listener no Oracle patch so this is

00:32:37,019 --> 00:32:45,330
everything is skipped and here so here

00:32:42,269 --> 00:32:47,909
it decided a machine it's restarting you

00:32:45,330 --> 00:32:52,349
see it's it wasn't 10:31 so it's around

00:32:47,909 --> 00:32:55,679
one hour ago 50 45 minutes then we

00:32:52,349 --> 00:33:04,320
restarted a machine and then we do stuff

00:32:55,679 --> 00:33:12,859
like a lot of cleanup tasks so now I'm

00:33:04,320 --> 00:33:12,859
interesting so this is our cray lock I

00:33:12,979 --> 00:33:21,779
wanted to check if obviously the varnish

00:33:18,059 --> 00:33:23,759
then the logo hasn't come up so that's

00:33:21,779 --> 00:33:26,129
not working now we have to check that

00:33:23,759 --> 00:33:28,200
later so sorry for that but it has

00:33:26,129 --> 00:33:30,769
worked in the morning so and that's what

00:33:28,200 --> 00:33:34,710
what I said that's our answer to CMDB

00:33:30,769 --> 00:33:38,159
where we can now check if that machine

00:33:34,710 --> 00:33:40,349
has been patched so it hasn't been run

00:33:38,159 --> 00:33:43,320
so ansible CMDB - you know hands we seem

00:33:40,349 --> 00:33:45,509
to be it's an asynchronous task which is

00:33:43,320 --> 00:33:48,089
running so this is running at 12 o clock

00:33:45,509 --> 00:33:51,229
again so it's scanning all your machines

00:33:48,089 --> 00:33:54,059
inside your ansible inventory and then

00:33:51,229 --> 00:33:56,669
generating your CMDB for you so you

00:33:54,059 --> 00:33:59,279
don't have to think about manually

00:33:56,669 --> 00:34:00,929
updating your CMDB so and obviously this

00:33:59,279 --> 00:34:03,179
hasn't done so it's running at 12

00:34:00,929 --> 00:34:04,050
o'clock we can now wait 40 minutes and

00:34:03,179 --> 00:34:06,930
it will be active

00:34:04,050 --> 00:34:11,520
over here and then somebody would be

00:34:06,930 --> 00:34:13,830
able to to see it in our CMDB so I have

00:34:11,520 --> 00:34:24,179
to check why why varnish isn't coming up

00:34:13,830 --> 00:34:28,760
so one second so this should work of

00:34:24,179 --> 00:34:31,380
course the main thing that is important

00:34:28,760 --> 00:34:33,570
I'm in the shop so everything is running

00:34:31,380 --> 00:34:37,770
why the customers can still use the

00:34:33,570 --> 00:34:42,060
platform and yeah you don't have to

00:34:37,770 --> 00:34:47,970
suffer from a downtime because always a

00:34:42,060 --> 00:34:49,679
little pain in the ass because we have

00:34:47,970 --> 00:34:51,929
some different behaviors also in the in

00:34:49,679 --> 00:34:53,910
the sites or in the in countries with

00:34:51,929 --> 00:34:58,350
using the online shop and using the

00:34:53,910 --> 00:35:01,260
different platforms and to create order

00:34:58,350 --> 00:35:04,920
to schedule the behavior manually for

00:35:01,260 --> 00:35:08,250
everything is something at the end you

00:35:04,920 --> 00:35:11,400
can't do and so the findings in our CMDB

00:35:08,250 --> 00:35:13,860
that there are some sometimes some

00:35:11,400 --> 00:35:15,950
machines you forgot to put in the

00:35:13,860 --> 00:35:22,560
inventory or something like this but

00:35:15,950 --> 00:35:25,770
it's only a handful I'm not but at the

00:35:22,560 --> 00:35:29,700
end also the monitoring it's alerting

00:35:25,770 --> 00:35:32,640
them so we can have a look for so as I

00:35:29,700 --> 00:35:37,890
said the main power the main reason is

00:35:32,640 --> 00:35:39,270
to keep this that job online so the

00:35:37,890 --> 00:35:41,160
demon was not running so you can see

00:35:39,270 --> 00:35:44,460
this some real-life traffic running on

00:35:41,160 --> 00:35:46,350
the machine so we just patched our

00:35:44,460 --> 00:35:48,600
Spanish online shop machines including

00:35:46,350 --> 00:35:53,310
application servers so you shouldn't be

00:35:48,600 --> 00:35:55,920
see the IP addresses so now life in this

00:35:53,310 --> 00:35:57,990
session and obviously not everything

00:35:55,920 --> 00:36:01,380
worked out but that's the that's the

00:35:57,990 --> 00:36:03,060
thing on a live demo right so I'd like

00:36:01,380 --> 00:36:05,310
to show you or I would love to show you

00:36:03,060 --> 00:36:07,200
how this would see in grey knob because

00:36:05,310 --> 00:36:09,630
then you can see that one of the web

00:36:07,200 --> 00:36:11,640
service was active and then the second

00:36:09,630 --> 00:36:14,270
one comes active again and first one

00:36:11,640 --> 00:36:17,609
goes down but obviously if the daemon

00:36:14,270 --> 00:36:19,319
which is locking chasing files now it

00:36:17,609 --> 00:36:22,920
was not running then the time stamps are

00:36:19,319 --> 00:36:29,480
messy now so we maybe will check that

00:36:22,920 --> 00:36:29,480
later on so we asked the presentation

00:36:34,279 --> 00:36:38,660
this would be our life demo most of it

00:36:38,039 --> 00:36:43,339
worked

00:36:38,660 --> 00:36:43,339
so we patched a productive machine now

00:36:46,190 --> 00:36:55,730
yeah I can show that's right yeah thanks

00:36:49,769 --> 00:36:55,730
for that hopefully this will work out

00:37:07,009 --> 00:37:13,470
one was it running I think it was around

00:37:11,339 --> 00:37:18,380
I don't know I think it was around ten

00:37:13,470 --> 00:37:18,380
to ten to twelve or something like that

00:37:34,700 --> 00:37:38,180
come on guy

00:37:39,900 --> 00:37:54,930
so I have to change this a cystogram is

00:37:50,579 --> 00:37:58,130
the problem on VM this really comes back

00:37:54,930 --> 00:37:58,130
up very fast

00:37:58,259 --> 00:38:02,999
I thought we might see in here spike

00:38:01,410 --> 00:38:05,400
somewhere around here it should be here

00:38:02,999 --> 00:38:07,950
around but it's not there obviously

00:38:05,400 --> 00:38:09,539
because the machines are not down for

00:38:07,950 --> 00:38:12,119
longer than one minute and then you can

00:38:09,539 --> 00:38:13,950
see it here that's a problem so maybe we

00:38:12,119 --> 00:38:20,579
migrated to Hardware back again for the

00:38:13,950 --> 00:38:24,150
team or next time so sorry for that but

00:38:20,579 --> 00:38:28,670
as you see it was online so everything

00:38:24,150 --> 00:38:28,670
is right so do you have any questions

00:38:29,420 --> 00:38:37,829
everything unclear yeah there's one in

00:38:35,249 --> 00:38:48,839
the back one second Nicole will hand you

00:38:37,829 --> 00:38:52,230
the microphone hi

00:38:48,839 --> 00:38:53,940
I'm interested in how do you handle the

00:38:52,230 --> 00:38:56,759
application errors that might occur

00:38:53,940 --> 00:38:59,430
after such a patching I mean to the

00:38:56,759 --> 00:39:01,680
application teams as a regular time slot

00:38:59,430 --> 00:39:05,489
to take care of those occurrences or

00:39:01,680 --> 00:39:06,930
ASIS look the story and the story on

00:39:05,489 --> 00:39:09,329
that is that we usually do in the

00:39:06,930 --> 00:39:11,609
patching of the testing systems way

00:39:09,329 --> 00:39:14,549
before that so that they are or

00:39:11,609 --> 00:39:17,249
hopefully occurs in your test

00:39:14,549 --> 00:39:19,200
environment that's not always the case

00:39:17,249 --> 00:39:21,150
when you for example you update a Java

00:39:19,200 --> 00:39:23,609
version and you have some old libraries

00:39:21,150 --> 00:39:28,140
inside your monolithic application which

00:39:23,609 --> 00:39:29,940
we also still have then you might it

00:39:28,140 --> 00:39:31,980
might be that your core that a problem

00:39:29,940 --> 00:39:36,359
occurs in your production system and

00:39:31,980 --> 00:39:40,769
then you have to fix it there but to be

00:39:36,359 --> 00:39:42,839
honest we haven't had I think I can

00:39:40,769 --> 00:39:46,799
remember one problem in the last two

00:39:42,839 --> 00:39:48,660
years we had with an application running

00:39:46,799 --> 00:39:50,910
on a recent package and then we rolled

00:39:48,660 --> 00:39:52,529
it back you have to decide will I

00:39:50,910 --> 00:39:54,269
rollback on the snapshot will I roll

00:39:52,529 --> 00:39:56,880
back the RPI

00:39:54,269 --> 00:39:58,440
so we are as I mentioned before we are

00:39:56,880 --> 00:40:01,079
running Red Hat Enterprise Linux these

00:39:58,440 --> 00:40:05,479
packages are usually very good tested

00:40:01,079 --> 00:40:08,309
and you can heavily rely on them and

00:40:05,479 --> 00:40:10,469
having this fast cycle helps as well

00:40:08,309 --> 00:40:13,170
because as you have seen before we only

00:40:10,469 --> 00:40:17,700
exchange GDP on that machine and NS CD 2

00:40:13,170 --> 00:40:21,809
packages which is not that much on on

00:40:17,700 --> 00:40:23,609
the other hand we also run to 250 s AP

00:40:21,809 --> 00:40:25,589
service where we don't have the

00:40:23,609 --> 00:40:27,329
possibility to run it live so that's why

00:40:25,589 --> 00:40:32,789
we mentioned the parallel patching so we

00:40:27,329 --> 00:40:35,039
have I think four downtime windows over

00:40:32,789 --> 00:40:37,469
the weekend and then you have 300

00:40:35,039 --> 00:40:39,809
packages or 400 packages beside which

00:40:37,469 --> 00:40:42,239
are going to be installed and if you

00:40:39,809 --> 00:40:44,249
then encounter an error you have a

00:40:42,239 --> 00:40:46,259
problem because you have 400 different

00:40:44,249 --> 00:40:49,019
packages where a problematic or so

00:40:46,259 --> 00:40:51,390
that's also the story behind why we want

00:40:49,019 --> 00:40:54,210
to have a fast patching cycle so that

00:40:51,390 --> 00:40:58,339
the changing the things changing on the

00:40:54,210 --> 00:41:02,339
machine it's it's very few things so

00:40:58,339 --> 00:41:03,930
usually that helps as well so yeah of

00:41:02,339 --> 00:41:06,420
course the developers have to take care

00:41:03,930 --> 00:41:09,210
as well that's why we notify them and we

00:41:06,420 --> 00:41:11,339
try to to say them hey look at your

00:41:09,210 --> 00:41:13,859
testing system when everything works

00:41:11,339 --> 00:41:19,079
there usually it works in production as

00:41:13,859 --> 00:41:22,739
well so we're happy with having recent

00:41:19,079 --> 00:41:25,289
versions of everything online and we

00:41:22,739 --> 00:41:27,150
would rather to a rollback then and not

00:41:25,289 --> 00:41:29,219
wait on the go from the developers

00:41:27,150 --> 00:41:38,009
because usually they have other things

00:41:29,219 --> 00:41:39,599
to do there's another question yeah just

00:41:38,009 --> 00:41:42,329
a little question you talked about your

00:41:39,599 --> 00:41:45,150
impediments and your requirements for

00:41:42,329 --> 00:41:46,829
patching are these your most painful

00:41:45,150 --> 00:41:49,140
things when you started this or I have

00:41:46,829 --> 00:41:52,380
you any other things when you started

00:41:49,140 --> 00:41:56,729
this process so what was the most

00:41:52,380 --> 00:41:59,410
painful if when you started the most

00:41:56,729 --> 00:42:01,839
painful thing was to start

00:41:59,410 --> 00:42:04,210
to be honest so so that this is

00:42:01,839 --> 00:42:05,829
something so the two guys who

00:42:04,210 --> 00:42:06,970
implemented this they are not there one

00:42:05,829 --> 00:42:11,380
is on public holiday

00:42:06,970 --> 00:42:12,910
so I Ricardo when you watch this so we

00:42:11,380 --> 00:42:14,710
spend a lot of time on that because we

00:42:12,910 --> 00:42:17,559
didn't want to have this manual thing

00:42:14,710 --> 00:42:19,210
and so we are not a web host are for

00:42:17,559 --> 00:42:21,730
example although we host web

00:42:19,210 --> 00:42:24,039
applications but we have five or six

00:42:21,730 --> 00:42:26,200
servers which are similar and the other

00:42:24,039 --> 00:42:29,920
ones are differing so you spend a lot of

00:42:26,200 --> 00:42:32,170
time in the in the edge cases and to

00:42:29,920 --> 00:42:35,319
polish everything that it's really

00:42:32,170 --> 00:42:37,259
possible to run on automatic style so so

00:42:35,319 --> 00:42:41,769
on the German leader site we have

00:42:37,259 --> 00:42:44,380
several million visitors some times a

00:42:41,769 --> 00:42:49,869
day and we are patching it live and it

00:42:44,380 --> 00:42:52,299
works now of course somebody of us is is

00:42:49,869 --> 00:42:54,369
there and knows the patching window but

00:42:52,299 --> 00:42:57,309
it's done automatically now as well and

00:42:54,369 --> 00:42:59,049
you start with small applications where

00:42:57,309 --> 00:43:01,269
you where you say hey we can test the

00:42:59,049 --> 00:43:04,150
process out and then you go further on

00:43:01,269 --> 00:43:04,960
to your top applications and that's

00:43:04,150 --> 00:43:07,359
basically it

00:43:04,960 --> 00:43:09,849
so one nasty thing was really the thing

00:43:07,359 --> 00:43:15,460
Rika mentioned that installing the

00:43:09,849 --> 00:43:18,670
kernel failed when some user was using /

00:43:15,460 --> 00:43:21,819
temp storing some CSV stuff and then

00:43:18,670 --> 00:43:24,700
your make in it RT it fails because it

00:43:21,819 --> 00:43:27,130
uses /tmp and ansible doesn't notice

00:43:24,700 --> 00:43:30,400
because the installation of the yum

00:43:27,130 --> 00:43:32,470
package it was done and it isn't wasn't

00:43:30,400 --> 00:43:34,269
returned as a failure so then you have a

00:43:32,470 --> 00:43:37,750
kernel panic of the machine and if you

00:43:34,269 --> 00:43:39,880
have several kernel panics then yeah you

00:43:37,750 --> 00:43:49,089
have to do manual work again and there's

00:43:39,880 --> 00:43:51,099
nothing you want - okay so you're

00:43:49,089 --> 00:43:53,799
talking about like seven eight hundred

00:43:51,099 --> 00:43:56,079
servers yeah do you have some kind of

00:43:53,799 --> 00:43:57,609
monitoring called the ansible tasks you

00:43:56,079 --> 00:44:13,390
are doing kind of patching so you know

00:43:57,609 --> 00:44:17,140
which fail - colleagues credit

00:44:13,390 --> 00:44:20,140
what does it called some some listing

00:44:17,140 --> 00:44:23,890
stuff where you see what the ansible

00:44:20,140 --> 00:44:26,680
job has done already here we had only

00:44:23,890 --> 00:44:28,600
some six service 608 service they have

00:44:26,680 --> 00:44:31,870
environments with more service for one

00:44:28,600 --> 00:44:34,810
shop application they put out the

00:44:31,870 --> 00:44:37,180
packages they've already finished and go

00:44:34,810 --> 00:44:38,770
on with the logging so if you are really

00:44:37,180 --> 00:44:44,020
interested you can see in the backlog of

00:44:38,770 --> 00:44:47,290
the rocket chat channel or we get also

00:44:44,020 --> 00:44:50,260
some notifications in between in the

00:44:47,290 --> 00:44:52,510
future yes you're right it's also on my

00:44:50,260 --> 00:44:54,040
list for a singer to make migration what

00:44:52,510 --> 00:44:56,700
is like if you if you don't have a locks

00:44:54,040 --> 00:45:02,730
for some amount of time you decide that

00:44:56,700 --> 00:45:02,730
I didn't get the question no well I mean

00:45:04,770 --> 00:45:09,970
you have 50 servers on one type yeah and

00:45:08,650 --> 00:45:14,740
some of them will don't go online

00:45:09,970 --> 00:45:18,610
because of yeah and you don't know which

00:45:14,740 --> 00:45:21,970
one what we currently do so we make a

00:45:18,610 --> 00:45:23,910
net reply in our rocket jet so we debug

00:45:21,970 --> 00:45:26,560
everything there and you get a net reply

00:45:23,910 --> 00:45:28,390
for a failed task so that's the first

00:45:26,560 --> 00:45:33,250
notification you get and usually it's

00:45:28,390 --> 00:45:35,490
very instant what's not cool on one deck

00:45:33,250 --> 00:45:38,830
is that you don't have a good and simple

00:45:35,490 --> 00:45:40,930
callback integration that's where awx

00:45:38,830 --> 00:45:43,000
comes in place and where you want to use

00:45:40,930 --> 00:45:45,670
it in the future so that you make use of

00:45:43,000 --> 00:45:48,520
the callback functionality and then have

00:45:45,670 --> 00:45:51,310
a single checking if everything was

00:45:48,520 --> 00:45:55,210
green on that task so this will be

00:45:51,310 --> 00:45:57,430
something we are currently doing but we

00:45:55,210 --> 00:46:02,950
are doing this since near two years now

00:45:57,430 --> 00:46:04,750
or so and so it's same as with an online

00:46:02,950 --> 00:46:06,700
shop you're not printing a book you have

00:46:04,750 --> 00:46:08,650
to constantly improve on that but we

00:46:06,700 --> 00:46:10,120
spent rather time on improving the

00:46:08,650 --> 00:46:13,120
automated patching then to ink it

00:46:10,120 --> 00:46:15,820
manually again so we're quite happy with

00:46:13,120 --> 00:46:18,480
that okay okay so another question in

00:46:15,820 --> 00:46:21,010
the back and it's also not a pain point

00:46:18,480 --> 00:46:22,840
because it's normally running and if you

00:46:21,010 --> 00:46:24,340
have some findings even the monitoring

00:46:22,840 --> 00:46:25,600
has set a down time so after the

00:46:24,340 --> 00:46:26,910
downtime is removed

00:46:25,600 --> 00:46:53,110
and the system has a problem you

00:46:26,910 --> 00:46:57,400
triggered and then the whole cluster is

00:46:53,110 --> 00:46:59,800
down so you should have yeah so we do

00:46:57,400 --> 00:47:04,660
get chance to look into the for man and

00:46:59,800 --> 00:47:06,820
its we also have a form and running now

00:47:04,660 --> 00:47:08,410
but we're not that happy with so we

00:47:06,820 --> 00:47:10,660
don't want to have a soo of tools you

00:47:08,410 --> 00:47:12,430
know because with six guys in the

00:47:10,660 --> 00:47:14,800
department you have to choose with your

00:47:12,430 --> 00:47:18,910
tools wisely so you can't do ansible

00:47:14,800 --> 00:47:21,160
saltstack puppet and you can't use form

00:47:18,910 --> 00:47:23,890
and satellite and zaboo tower and that

00:47:21,160 --> 00:47:26,230
so I think at least that's our opinion

00:47:23,890 --> 00:47:33,970
currently so but we'll check it out of

00:47:26,230 --> 00:47:37,420
course any more questions we have two

00:47:33,970 --> 00:47:40,570
chance to ask them they're still here

00:47:37,420 --> 00:47:44,260
you can also ping us in the break if you

00:47:40,570 --> 00:47:45,700
want so and that's it thank you thank

00:47:44,260 --> 00:47:50,850
you very much

00:47:45,700 --> 00:47:50,850
[Applause]

00:47:53,230 --> 00:47:57,320

YouTube URL: https://www.youtube.com/watch?v=qPoU6yfTx8k


