Title: OSDC 2016 - Scalable Systems Management with SaltStack by Sebastian Meyer
Publication date: 2016-05-02
Playlist: OSDC 2016 | Open Source Data Center Conference
Description: 
	SaltStack offers a highly scalable and versatile systems management solution. Managing ten thousands of systems can be easily done with SaltStack. Learn about several possible scenarios which would call for the use of SaltStack and the advantages of a SaltStack-based approach over traditional systems management approaches.
Captions: 
	00:00:11,760 --> 00:00:18,960
welcome back so next up on stage we have

00:00:15,870 --> 00:00:21,060
Sebastian Maya he is talking about a

00:00:18,960 --> 00:00:24,180
scalable systems management solution for

00:00:21,060 --> 00:00:27,330
data centers based on saltstack so lead

00:00:24,180 --> 00:00:32,430
back relax and enjoy it off hello and

00:00:27,330 --> 00:00:36,840
welcome is it ok yes chef yeah seems ok

00:00:32,430 --> 00:00:39,239
um yeah I want to present a small

00:00:36,840 --> 00:00:41,790
introduction into salt and how to do

00:00:39,239 --> 00:00:44,190
things with alt how to build a reactive

00:00:41,790 --> 00:00:47,960
environment you could use in your data

00:00:44,190 --> 00:00:51,089
centers to just improve things and

00:00:47,960 --> 00:00:57,449
automate everything that can be

00:00:51,089 --> 00:01:01,760
automated so um I work for b1 systems we

00:00:57,449 --> 00:01:04,379
are doing consulting and trainings and

00:01:01,760 --> 00:01:07,049
support for all kinds of linux and open

00:01:04,379 --> 00:01:10,409
source stuff don't know who of you have

00:01:07,049 --> 00:01:12,390
heard about us and yeah basically

00:01:10,409 --> 00:01:15,030
operating system systems management

00:01:12,390 --> 00:01:18,810
configuration management are declared

00:01:15,030 --> 00:01:21,780
stuff virtualization whatever there is

00:01:18,810 --> 00:01:27,210
we probably do it if you are asked

00:01:21,780 --> 00:01:29,010
nicely so now to solve arm what if sold

00:01:27,210 --> 00:01:34,830
is it just another systems management

00:01:29,010 --> 00:01:36,690
solution or what does it do well it

00:01:34,830 --> 00:01:38,400
takes inspiration from other

00:01:36,690 --> 00:01:42,990
configuration and systems management

00:01:38,400 --> 00:01:45,690
systems like puppet ansible or chef who

00:01:42,990 --> 00:01:50,610
you have has worked with salt stick

00:01:45,690 --> 00:01:54,890
already won okay and with some of the

00:01:50,610 --> 00:02:00,150
other puppet chef probably area run ok

00:01:54,890 --> 00:02:02,220
so you see that salt reuses a lot of

00:02:00,150 --> 00:02:05,240
things you've seen in puppet or some of

00:02:02,220 --> 00:02:09,209
the things you've seen an ansible and

00:02:05,240 --> 00:02:11,909
just does the mall spin on it but in the

00:02:09,209 --> 00:02:15,150
end it's a lot of the same paradigms you

00:02:11,909 --> 00:02:20,040
can use with puppet you can also use

00:02:15,150 --> 00:02:22,349
with salt here salt focuses on the full

00:02:20,040 --> 00:02:25,500
system life cycle so you can deploy your

00:02:22,349 --> 00:02:28,020
machines with salt from you

00:02:25,500 --> 00:02:30,630
nothing or just a hypervisor deploy your

00:02:28,020 --> 00:02:32,490
machines and then deploy your

00:02:30,630 --> 00:02:34,410
configuration and applications on it and

00:02:32,490 --> 00:02:36,870
in the end if you don't want to have it

00:02:34,410 --> 00:02:40,500
anymore you can also destroy the Machine

00:02:36,870 --> 00:02:44,209
automatically via saltstack so you can

00:02:40,500 --> 00:02:48,240
do all things with your systems it's

00:02:44,209 --> 00:02:51,440
relatively easy easily to scale to up to

00:02:48,240 --> 00:02:54,330
a few solving systems so I've seen

00:02:51,440 --> 00:02:58,220
environments up to 4,000 systems without

00:02:54,330 --> 00:03:03,720
much ado about them just normal sold our

00:02:58,220 --> 00:03:06,840
stuff you get with the installer and you

00:03:03,720 --> 00:03:08,750
don't have to build in a lot of tools as

00:03:06,840 --> 00:03:13,170
you would have to do with Bubba to

00:03:08,750 --> 00:03:16,080
easily scale it well since it uses llamo

00:03:13,170 --> 00:03:18,530
and ginger it's easy to learn yamel you

00:03:16,080 --> 00:03:23,400
all know probably of higher are or

00:03:18,530 --> 00:03:25,950
something like edible and ends will also

00:03:23,400 --> 00:03:28,080
use a ginger to where it's templating

00:03:25,950 --> 00:03:31,350
engine but you can also just write

00:03:28,080 --> 00:03:37,310
Python code and use that to define your

00:03:31,350 --> 00:03:39,239
state in salt stick so salt sick does

00:03:37,310 --> 00:03:42,390
configuration management systems

00:03:39,239 --> 00:03:44,760
management and remote execution that's

00:03:42,390 --> 00:03:47,630
the bit here that's a bit different than

00:03:44,760 --> 00:03:50,760
in puppet for example here you have

00:03:47,630 --> 00:03:54,209
inbuilt execution modules you can use to

00:03:50,760 --> 00:03:56,910
dl deploy some actions on your systems

00:03:54,209 --> 00:03:59,790
not just a command module which lets you

00:03:56,910 --> 00:04:02,579
run arbitrary commands but also already

00:03:59,790 --> 00:04:07,470
in build stuff you've could find useful

00:04:02,579 --> 00:04:09,480
for your system so the basic concept is

00:04:07,470 --> 00:04:13,440
you have a master server and your

00:04:09,480 --> 00:04:16,019
minions and on the master you save your

00:04:13,440 --> 00:04:19,500
configuration and from the master then

00:04:16,019 --> 00:04:22,290
you send commands or say hey get your

00:04:19,500 --> 00:04:25,169
configuration and apply it and then the

00:04:22,290 --> 00:04:28,100
minions apply that stuff and send back

00:04:25,169 --> 00:04:32,070
to results so business as usual

00:04:28,100 --> 00:04:36,330
communication is fully encrypted vrae es

00:04:32,070 --> 00:04:39,949
and so you also have to accept the keys

00:04:36,330 --> 00:04:44,969
here like we do on puppet

00:04:39,949 --> 00:04:48,060
then you can scale salt stick you have

00:04:44,969 --> 00:04:51,569
the possibility to use our so called

00:04:48,060 --> 00:04:56,370
Syndic systems which are sub masters of

00:04:51,569 --> 00:04:58,650
the global salt master and they each can

00:04:56,370 --> 00:05:02,009
manage their own systems but get their

00:04:58,650 --> 00:05:05,930
configuration from this old master so

00:05:02,009 --> 00:05:05,930
you have one master of masters and

00:05:06,199 --> 00:05:12,330
however many Finnick notes you want and

00:05:10,229 --> 00:05:15,120
then your clients can reduce this to

00:05:12,330 --> 00:05:18,000
those Syndic notes to get the load of

00:05:15,120 --> 00:05:21,979
the master that's all their unique

00:05:18,000 --> 00:05:24,389
basically to do to scale out salt stick

00:05:21,979 --> 00:05:27,930
if you want to achieve high availability

00:05:24,389 --> 00:05:30,330
or just want a bit more flexibility you

00:05:27,930 --> 00:05:33,990
can use multiple masters you can set

00:05:30,330 --> 00:05:38,789
that up as active active where you have

00:05:33,990 --> 00:05:40,770
all the keys on all servers and all the

00:05:38,789 --> 00:05:43,589
configuration on all service mirror and

00:05:40,770 --> 00:05:46,639
then your minions can connect to each of

00:05:43,589 --> 00:05:50,069
the master service or Syndic servers and

00:05:46,639 --> 00:05:53,099
get their configuration that's also a

00:05:50,069 --> 00:05:57,659
bit that you can do to load balance your

00:05:53,099 --> 00:06:00,930
stuff and you can set up the whole thing

00:05:57,659 --> 00:06:02,849
as failover so you can say hey minions

00:06:00,930 --> 00:06:06,740
please go to this master and if it's not

00:06:02,849 --> 00:06:09,659
available go to the other one then ah

00:06:06,740 --> 00:06:11,339
that's not that complicated to set up

00:06:09,659 --> 00:06:13,949
it's basically just keep everything in

00:06:11,339 --> 00:06:16,199
swing between the Masters which is easy

00:06:13,949 --> 00:06:20,900
to do with git repository or something

00:06:16,199 --> 00:06:25,080
like that so we have basically four

00:06:20,900 --> 00:06:27,569
possibilities we can achieve our state

00:06:25,080 --> 00:06:30,000
definition we sold our minions can pull

00:06:27,569 --> 00:06:31,830
from your master that's this thing we do

00:06:30,000 --> 00:06:34,620
is pop it all the time where the agent

00:06:31,830 --> 00:06:37,139
runs get the configuration the same

00:06:34,620 --> 00:06:39,210
thing we can do with salt where the

00:06:37,139 --> 00:06:41,849
minions just grab the configuration and

00:06:39,210 --> 00:06:43,529
apply it locally then we can do it the

00:06:41,849 --> 00:06:46,279
other way around the matter goes to the

00:06:43,529 --> 00:06:49,310
minions and say hey please apply those

00:06:46,279 --> 00:06:52,810
states or your state configuration and

00:06:49,310 --> 00:06:54,760
then they'll get are they

00:06:52,810 --> 00:06:58,210
do that and everything is happy

00:06:54,760 --> 00:07:00,160
everyone's happy if you want to set up

00:06:58,210 --> 00:07:02,139
for tech masterless you can do that too

00:07:00,160 --> 00:07:07,870
you can just apply your configuration

00:07:02,139 --> 00:07:11,290
locally and check out the configuration

00:07:07,870 --> 00:07:12,810
files and variable files from a git

00:07:11,290 --> 00:07:15,700
repository or something like that and

00:07:12,810 --> 00:07:18,190
just do it on the minions without any

00:07:15,700 --> 00:07:21,910
master that's obviously a lot better

00:07:18,190 --> 00:07:25,990
scalable than everything else but it's a

00:07:21,910 --> 00:07:28,840
bit more to do here so you would have to

00:07:25,990 --> 00:07:32,950
configure it on every minion and you

00:07:28,840 --> 00:07:34,540
don't get to you don't have a central

00:07:32,950 --> 00:07:37,990
node where you can just grab all the

00:07:34,540 --> 00:07:40,450
reports or something like that and we

00:07:37,990 --> 00:07:43,889
have a mode here which allows us to

00:07:40,450 --> 00:07:46,990
deploy our configuration of us SSH so

00:07:43,889 --> 00:07:51,010
the master connect / ssh to dominions

00:07:46,990 --> 00:07:53,880
and deploys a salt binary which lend us

00:07:51,010 --> 00:08:01,300
all the magic locally on the system's

00:07:53,880 --> 00:08:03,520
that's a bit like NW yeah yeah so in the

00:08:01,300 --> 00:08:05,530
second motor to mass pushes to dominions

00:08:03,520 --> 00:08:08,320
you have still the agent on the minions

00:08:05,530 --> 00:08:10,330
the master would create an event for the

00:08:08,320 --> 00:08:13,270
minions to please apply your state and

00:08:10,330 --> 00:08:17,350
then the minions would call or get that

00:08:13,270 --> 00:08:23,169
state from a master any other questions

00:08:17,350 --> 00:08:26,560
option here okay so with that with those

00:08:23,169 --> 00:08:30,039
four states armed let's have a look at a

00:08:26,560 --> 00:08:31,600
remote execution system it's called

00:08:30,039 --> 00:08:34,300
remote execution system but basically

00:08:31,600 --> 00:08:39,159
you can also run those commands locally

00:08:34,300 --> 00:08:42,729
on Dominion um you just won't do

00:08:39,159 --> 00:08:46,480
anything with reality the basic call you

00:08:42,729 --> 00:08:49,779
use with salt is salt then the target

00:08:46,480 --> 00:08:52,560
which can be either just normal normal

00:08:49,779 --> 00:08:55,750
globbing on the name where you have

00:08:52,560 --> 00:08:59,350
specified part of the name and put a

00:08:55,750 --> 00:09:01,420
esta risk in or you can target with

00:08:59,350 --> 00:09:05,620
effects or something like that whatever

00:09:01,420 --> 00:09:06,220
you want and then you have a module and

00:09:05,620 --> 00:09:08,590
function

00:09:06,220 --> 00:09:11,740
fault has a lot of execution modules

00:09:08,590 --> 00:09:15,670
which interface to different systems

00:09:11,740 --> 00:09:19,150
platforms on you have an Apogee disk

00:09:15,670 --> 00:09:22,270
whatever you want and those who have all

00:09:19,150 --> 00:09:23,890
functions that you can use to get

00:09:22,270 --> 00:09:26,470
information of your systems or do

00:09:23,890 --> 00:09:32,170
something there for example this dot

00:09:26,470 --> 00:09:36,220
person who just checks the argument for

00:09:32,170 --> 00:09:39,160
how much space is occupied on that

00:09:36,220 --> 00:09:42,400
partition for in this instance that

00:09:39,160 --> 00:09:45,880
would be ok check the sov petition if

00:09:42,400 --> 00:09:50,200
there how many space bears left or how

00:09:45,880 --> 00:09:52,990
many speech spaces occupied if you want

00:09:50,200 --> 00:09:56,910
to target with effects you'll have to

00:09:52,990 --> 00:09:56,910
collect them from the minions of course

00:09:56,940 --> 00:10:03,940
here those facts are called grains

00:10:00,540 --> 00:10:06,460
grains basically on just static

00:10:03,940 --> 00:10:09,730
information about your systems like okay

00:10:06,460 --> 00:10:12,450
which OS is on there which mac addresses

00:10:09,730 --> 00:10:17,470
do we have which IP it gets pulled in

00:10:12,450 --> 00:10:20,200
some regular intervals but it's not that

00:10:17,470 --> 00:10:22,870
it's up to date all the time so it

00:10:20,200 --> 00:10:26,020
doesn't collect that information each

00:10:22,870 --> 00:10:31,270
run but rather once and then a week

00:10:26,020 --> 00:10:33,970
later or so again and you can use this

00:10:31,270 --> 00:10:36,810
data to target your minions or do some

00:10:33,970 --> 00:10:43,900
basic flow control in your States or

00:10:36,810 --> 00:10:45,870
variables now most things you do with

00:10:43,900 --> 00:10:50,460
salt will be configuration management

00:10:45,870 --> 00:10:52,420
like you would do with puppet and on

00:10:50,460 --> 00:10:54,670
configuration management is done in

00:10:52,420 --> 00:10:58,600
states files state files have a basic

00:10:54,670 --> 00:11:00,310
llamo syntax you have your ID then the

00:10:58,600 --> 00:11:03,900
module and the function you want to use

00:11:00,310 --> 00:11:08,170
a name and arguments for that function

00:11:03,900 --> 00:11:09,760
you can have multiple functions with the

00:11:08,170 --> 00:11:12,310
same ID but they have to be from

00:11:09,760 --> 00:11:14,560
different modules so I can have the

00:11:12,310 --> 00:11:17,290
single ID controlling a package service

00:11:14,560 --> 00:11:19,390
and something else but I cannot specify

00:11:17,290 --> 00:11:26,560
two different package

00:11:19,390 --> 00:11:30,160
functions are on the same ID and if I

00:11:26,560 --> 00:11:33,580
have my states ready then I want to say

00:11:30,160 --> 00:11:36,310
someplace okay these states get applied

00:11:33,580 --> 00:11:39,880
to these minions this is done in the

00:11:36,310 --> 00:11:41,860
so-called top file the top file is same

00:11:39,880 --> 00:11:46,240
syntax as the state basically it's just

00:11:41,860 --> 00:11:50,310
llamo then are you have your environment

00:11:46,240 --> 00:11:53,650
based in this case you're targeting this

00:11:50,310 --> 00:11:56,140
asterisk here or the lamb and dmz here

00:11:53,650 --> 00:11:58,750
and then you list all the states you

00:11:56,140 --> 00:12:01,540
want to apply for example in this case

00:11:58,750 --> 00:12:05,410
okay all my systems get the monitoring

00:12:01,540 --> 00:12:08,710
SSH and this lower configuration and all

00:12:05,410 --> 00:12:10,780
my land systems get some ntp land

00:12:08,710 --> 00:12:13,870
configuration and all my DM jet systems

00:12:10,780 --> 00:12:18,760
get the dmz ntp configuration and a

00:12:13,870 --> 00:12:22,150
firewall that's basically the same like

00:12:18,760 --> 00:12:25,300
you do in a site VPN puppet you can also

00:12:22,150 --> 00:12:27,160
specify that in external software for

00:12:25,300 --> 00:12:31,200
example you can use Foreman to do that

00:12:27,160 --> 00:12:36,900
as well like we will do with puppet and

00:12:31,200 --> 00:12:40,510
um the difference here is that in salt

00:12:36,900 --> 00:12:42,730
those things get merged so when puppet

00:12:40,510 --> 00:12:46,360
you have okay I check for the first I

00:12:42,730 --> 00:12:48,940
match and do exactly that here you check

00:12:46,360 --> 00:12:51,700
everything in that file if the minion

00:12:48,940 --> 00:12:59,770
mattresses and if it matches it gets all

00:12:51,700 --> 00:13:01,540
the states in there so um you've written

00:12:59,770 --> 00:13:03,910
your straits you want to apply them to

00:13:01,540 --> 00:13:07,720
your host everything's fine but now you

00:13:03,910 --> 00:13:10,780
need some variables for example or you

00:13:07,720 --> 00:13:14,350
want to use different ntp servers or you

00:13:10,780 --> 00:13:18,280
want yeah basically just any

00:13:14,350 --> 00:13:21,190
configuration you want to do genomically

00:13:18,280 --> 00:13:24,010
you want to use variables for that you

00:13:21,190 --> 00:13:28,150
can use so-called pillar data pillar

00:13:24,010 --> 00:13:31,210
data is just llamo files again which

00:13:28,150 --> 00:13:32,230
where you store your variables and um

00:13:31,210 --> 00:13:36,220
let's

00:13:32,230 --> 00:13:41,140
small example with some ginger logic in

00:13:36,220 --> 00:13:44,530
it what it does here is specifies a

00:13:41,140 --> 00:13:49,030
dictionary called ntp and in that it

00:13:44,530 --> 00:13:54,130
sets two values ntp service and common

00:13:49,030 --> 00:13:56,110
and those values get set based on what

00:13:54,130 --> 00:13:58,990
the name of the minion is so it called

00:13:56,110 --> 00:14:01,990
checks the grains the facts we get from

00:13:58,990 --> 00:14:06,150
our systems for the system ID system ID

00:14:01,990 --> 00:14:09,550
is in usually the fqdn of the system and

00:14:06,150 --> 00:14:13,960
if that starts with my ntp server in

00:14:09,550 --> 00:14:17,560
this case then we use the apps yeah

00:14:13,960 --> 00:14:20,280
upstream pool ntp servers and for our

00:14:17,560 --> 00:14:23,490
other systems we want to use our

00:14:20,280 --> 00:14:27,910
internal ntp servers so that would be

00:14:23,490 --> 00:14:31,930
one possible way to set up are all your

00:14:27,910 --> 00:14:35,860
ntp servers with the same state file but

00:14:31,930 --> 00:14:38,500
different parameters here very just set

00:14:35,860 --> 00:14:41,680
different variables based on host names

00:14:38,500 --> 00:14:50,400
or you could set those based on OS or

00:14:41,680 --> 00:14:53,080
whatever you want and then you have

00:14:50,400 --> 00:14:56,250
follow pillar to a top file where you

00:14:53,080 --> 00:14:58,900
can specify okay those servers get those

00:14:56,250 --> 00:15:03,250
variable files and those servers get

00:14:58,900 --> 00:15:06,250
these others and basically what you want

00:15:03,250 --> 00:15:09,370
to do is to name them the same as the

00:15:06,250 --> 00:15:12,160
state files you have so i have my states

00:15:09,370 --> 00:15:15,790
monitoring ssh this lock ntp and

00:15:12,160 --> 00:15:18,790
firewall and on the pillar side i have

00:15:15,790 --> 00:15:21,460
monitoring ssh this long it's exactly

00:15:18,790 --> 00:15:23,680
the same for all my systems but then i

00:15:21,460 --> 00:15:27,460
want a different ntp config for my land

00:15:23,680 --> 00:15:29,260
and dmz service so i have a pillar file

00:15:27,460 --> 00:15:33,100
for my land service and appli file

00:15:29,260 --> 00:15:38,260
format the NZ service and define the

00:15:33,100 --> 00:15:40,450
same variables in those but one part of

00:15:38,260 --> 00:15:42,490
my service gets give one file and the

00:15:40,450 --> 00:15:43,720
other part gets the other file and my DM

00:15:42,490 --> 00:15:46,150
sets always get my firewall

00:15:43,720 --> 00:15:52,750
configuration as well

00:15:46,150 --> 00:15:55,600
simple as that you don't have to call

00:15:52,750 --> 00:16:01,210
the ER de state files in the pillar and

00:15:55,600 --> 00:16:04,390
the state's the same but it's advised

00:16:01,210 --> 00:16:07,330
because then you exactly no okay this is

00:16:04,390 --> 00:16:10,510
for that and you don't get confused that

00:16:07,330 --> 00:16:13,150
easy you can also use external Paula you

00:16:10,510 --> 00:16:17,440
could use Huayra or you could use as

00:16:13,150 --> 00:16:19,870
well form and again something whatever

00:16:17,440 --> 00:16:23,440
you there are a lot of different modules

00:16:19,870 --> 00:16:27,130
for external plus so you can use cobbler

00:16:23,440 --> 00:16:31,510
for example I have a lot of choices here

00:16:27,130 --> 00:16:34,540
again and if you have defined all this

00:16:31,510 --> 00:16:37,150
so your state files your top state file

00:16:34,540 --> 00:16:43,030
which is okay this machine's get those

00:16:37,150 --> 00:16:45,430
configuration files and those cells then

00:16:43,030 --> 00:16:49,840
you have to get your configuration all

00:16:45,430 --> 00:16:52,210
to your minions you can do that on with

00:16:49,840 --> 00:16:55,180
the salt command and the state at high

00:16:52,210 --> 00:16:58,210
state function the state atty state

00:16:55,180 --> 00:17:01,240
function basically just goes to the top

00:16:58,210 --> 00:17:05,170
file sees okay I met all these different

00:17:01,240 --> 00:17:07,270
states and applies those states so it's

00:17:05,170 --> 00:17:12,280
basically a puppet apply for everything

00:17:07,270 --> 00:17:15,130
I can also do a state SLS this is used

00:17:12,280 --> 00:17:17,709
to apply a single state to my system so

00:17:15,130 --> 00:17:20,140
for example if i have written new state

00:17:17,709 --> 00:17:22,060
and i want to test it on one of my

00:17:20,140 --> 00:17:24,940
systems i can just go and say okay

00:17:22,060 --> 00:17:27,910
please execute this state then it would

00:17:24,940 --> 00:17:31,360
just execute this state file but get

00:17:27,910 --> 00:17:33,970
again all my pillar data because are

00:17:31,360 --> 00:17:37,030
there i can set different variables and

00:17:33,970 --> 00:17:41,320
i don't have to say afton to name them

00:17:37,030 --> 00:17:43,030
the same um if I want you to do the

00:17:41,320 --> 00:17:47,350
other way around call it stuff from

00:17:43,030 --> 00:17:53,350
dominion then i would use fault call to

00:17:47,350 --> 00:17:55,120
just execute the same functions so in

00:17:53,350 --> 00:17:57,280
this case the minion would just go to

00:17:55,120 --> 00:18:01,170
the master say please give me my state

00:17:57,280 --> 00:18:01,170
and i want to execute it

00:18:05,399 --> 00:18:11,169
if you want to reuse your code which

00:18:08,919 --> 00:18:13,210
basically you want to do or want to

00:18:11,169 --> 00:18:16,389
reuse code other people have written

00:18:13,210 --> 00:18:18,340
there's the so-called formulas which are

00:18:16,389 --> 00:18:23,049
basically the same as enter the road or

00:18:18,340 --> 00:18:27,490
puppet modules um it's a collection of

00:18:23,049 --> 00:18:30,510
files and states which apply to a system

00:18:27,490 --> 00:18:33,070
and configure to say the way you want

00:18:30,510 --> 00:18:35,980
formulas are usually plural tries so

00:18:33,070 --> 00:18:39,490
that you can specify your variables and

00:18:35,980 --> 00:18:42,370
the pillar data and then you get all the

00:18:39,490 --> 00:18:44,830
information okay for these systems you

00:18:42,370 --> 00:18:48,130
want this those variables there's an

00:18:44,830 --> 00:18:52,000
official github organization for our

00:18:48,130 --> 00:18:56,130
souls egg formulas called or salt sig

00:18:52,000 --> 00:18:59,080
formulas and those are kind of official

00:18:56,130 --> 00:19:02,409
basically someone has written a formula

00:18:59,080 --> 00:19:04,299
say I want to share it please could you

00:19:02,409 --> 00:19:07,510
four get into your repository and then

00:19:04,299 --> 00:19:10,600
they do it and everything as well there

00:19:07,510 --> 00:19:16,809
is there are not that many formulas out

00:19:10,600 --> 00:19:18,789
there yet so no way to nowhere near the

00:19:16,809 --> 00:19:23,200
amount of puppet modules you could use

00:19:18,789 --> 00:19:32,200
or Salt roads end the roads but they are

00:19:23,200 --> 00:19:34,360
getting there slowly those formulas you

00:19:32,200 --> 00:19:37,899
can use directly from a version control

00:19:34,360 --> 00:19:42,039
system get svn probably whatever you

00:19:37,899 --> 00:19:46,980
want or you can make your local copy of

00:19:42,039 --> 00:19:53,519
that and then um include it from there

00:19:46,980 --> 00:19:57,179
you have to put the new formula into

00:19:53,519 --> 00:20:01,720
your master configuration as a new route

00:19:57,179 --> 00:20:04,990
where it looks for states so every time

00:20:01,720 --> 00:20:08,110
you want to use a new formula now that's

00:20:04,990 --> 00:20:11,470
not written by yourself or you have the

00:20:08,110 --> 00:20:13,830
problem that you have

00:20:11,470 --> 00:20:16,690
to stop the master and start it again I

00:20:13,830 --> 00:20:19,150
don't know why they chose that way to do

00:20:16,690 --> 00:20:24,580
it but that's certainly the way it is

00:20:19,150 --> 00:20:26,830
and there's no way around it for now the

00:20:24,580 --> 00:20:30,370
formula is configurable via Paula data

00:20:26,830 --> 00:20:33,250
and the mapping bear is done via via a

00:20:30,370 --> 00:20:34,780
ginger map so you have a map file which

00:20:33,250 --> 00:20:38,650
defines your default values in the

00:20:34,780 --> 00:20:42,010
formula puts out every variable matching

00:20:38,650 --> 00:20:44,110
from pillar and then merge those

00:20:42,010 --> 00:20:48,850
together that pull our values overwrite

00:20:44,110 --> 00:20:51,850
the values in the ginger file that way

00:20:48,850 --> 00:20:55,210
you should be able to deploy any formula

00:20:51,850 --> 00:20:59,140
without further configuration but you

00:20:55,210 --> 00:21:03,280
can configure it if you want and you can

00:20:59,140 --> 00:21:06,429
also use those existing formulas to

00:21:03,280 --> 00:21:09,940
include them in your own States so I can

00:21:06,429 --> 00:21:15,010
say please include me the Apache formula

00:21:09,940 --> 00:21:20,830
and put those vhosts to bed too and then

00:21:15,010 --> 00:21:24,070
please are require or watch those v host

00:21:20,830 --> 00:21:27,520
files in my Apache service defined in

00:21:24,070 --> 00:21:30,490
the formula so i can put requirements

00:21:27,520 --> 00:21:33,460
across formulas and i can extend them

00:21:30,490 --> 00:21:39,190
easy rather easily without having to

00:21:33,460 --> 00:21:44,559
change the original formula now I

00:21:39,190 --> 00:21:47,470
prepared a small demo to show you how it

00:21:44,559 --> 00:21:53,770
looks like on my system can everyone

00:21:47,470 --> 00:21:57,490
read that but big enough I'll take that

00:21:53,770 --> 00:22:01,480
as a yes so on the left side is my fault

00:21:57,490 --> 00:22:07,950
master and what I will do here is I will

00:22:01,480 --> 00:22:07,950
just for a moment I'll show you the

00:22:08,730 --> 00:22:17,799
configuration I've done I have in here

00:22:12,419 --> 00:22:22,659
Alexi configuration on my fault minion

00:22:17,799 --> 00:22:27,090
state and your fee state and

00:22:22,659 --> 00:22:30,369
my top file and my top five excuse me I

00:22:27,090 --> 00:22:32,830
just have defined okay all my minions

00:22:30,369 --> 00:22:36,249
get my ntp configuration and my soul

00:22:32,830 --> 00:22:39,820
minion configuration on everything

00:22:36,249 --> 00:22:41,799
that's you want to alter get the UAV

00:22:39,820 --> 00:22:45,460
which just disabled to the service

00:22:41,799 --> 00:22:51,129
because i r8 healing with firewalls here

00:22:45,460 --> 00:22:54,249
on my fault minion too I will deploy an

00:22:51,129 --> 00:22:58,299
NTP server on my fault minion three I

00:22:54,249 --> 00:23:00,220
will deploy some Alex see stuff and on

00:22:58,299 --> 00:23:06,369
my fault minion five we'll come to that

00:23:00,220 --> 00:23:11,889
later I will deploy a web application so

00:23:06,369 --> 00:23:14,320
now if I are look at this top file you

00:23:11,889 --> 00:23:17,349
see there are a lot of states mentioned

00:23:14,320 --> 00:23:21,129
that aren't in this directory where

00:23:17,349 --> 00:23:23,799
everything else is so SFO ever v salt is

00:23:21,129 --> 00:23:25,869
basically the default directory where

00:23:23,799 --> 00:23:29,919
you put your states but you can extend

00:23:25,869 --> 00:23:32,159
that and if you want to use formulas

00:23:29,919 --> 00:23:36,369
it's best practice to just add another

00:23:32,159 --> 00:23:39,099
formulas directory and in there there

00:23:36,369 --> 00:23:41,289
are the formulas are used from upstream

00:23:39,099 --> 00:23:45,070
so here we have my auntie V

00:23:41,289 --> 00:23:47,979
configuration and this stuff for my web

00:23:45,070 --> 00:23:55,239
app i will use to deploy your small

00:23:47,979 --> 00:24:00,210
wordpress instance yeah if if that's

00:23:55,239 --> 00:24:00,210
what you are see here um

00:24:04,930 --> 00:24:11,560
they're this environment is all base so

00:24:08,170 --> 00:24:14,950
you can have a development environment

00:24:11,560 --> 00:24:17,260
or something else and you just specify a

00:24:14,950 --> 00:24:19,810
different source for that environment

00:24:17,260 --> 00:24:23,010
could be are just a different directory

00:24:19,810 --> 00:24:26,500
or a different git branch for example

00:24:23,010 --> 00:24:28,240
though we don't have something like our

00:24:26,500 --> 00:24:32,410
10k yet which does it automatically

00:24:28,240 --> 00:24:39,580
automatically for us maybe we'll come to

00:24:32,410 --> 00:24:41,980
that um and when I now apply those

00:24:39,580 --> 00:24:45,280
states I want to set some variables i

00:24:41,980 --> 00:24:48,640
define that in the polar directory which

00:24:45,280 --> 00:24:53,230
has basically very roots for my ntp

00:24:48,640 --> 00:24:57,880
configuration mysql and wordpress and if

00:24:53,230 --> 00:25:01,300
i look here i have all my service get

00:24:57,880 --> 00:25:03,720
the ntp configuration and the salt

00:25:01,300 --> 00:25:07,080
menial get old also gets the ntp server

00:25:03,720 --> 00:25:13,080
configuration with the salt million-five

00:25:07,080 --> 00:25:13,080
getting a wordpress in mysql variables

00:25:13,620 --> 00:25:21,520
the notation is rather easy if you just

00:25:16,750 --> 00:25:25,270
want to use a file called um NT p dot

00:25:21,520 --> 00:25:28,120
sls then you could use just ntp if you

00:25:25,270 --> 00:25:30,520
want to have multiple files in a same

00:25:28,120 --> 00:25:33,550
namespace you will make a directory put

00:25:30,520 --> 00:25:35,530
in in it sls into that that's your

00:25:33,550 --> 00:25:38,080
normal that you can call with the

00:25:35,530 --> 00:25:41,400
directory name and every other file in

00:25:38,080 --> 00:25:46,300
there you would call with this notation

00:25:41,400 --> 00:25:48,670
so in my ntp directory i have a file in

00:25:46,300 --> 00:25:52,240
it sls and I should have a file server

00:25:48,670 --> 00:25:57,520
sls but that would explain why that

00:25:52,240 --> 00:26:01,260
state always fails whatever now I want

00:25:57,520 --> 00:26:01,260
to apply um

00:26:05,160 --> 00:26:17,020
hihi state on that minion ha well I

00:26:13,900 --> 00:26:21,309
can't because I don't have accepted this

00:26:17,020 --> 00:26:25,809
key it um we have here the salt key

00:26:21,309 --> 00:26:27,760
commando and we could define a auto sign

00:26:25,809 --> 00:26:30,429
map where I put my systems in that will

00:26:27,760 --> 00:26:35,799
be auto signed or I can just all to sign

00:26:30,429 --> 00:26:39,090
all systems or I just use this old key

00:26:35,799 --> 00:26:41,919
commando and accept all those keys and

00:26:39,090 --> 00:26:46,240
then I should be able to execute the

00:26:41,919 --> 00:26:49,450
salt high state for that minion this

00:26:46,240 --> 00:26:51,540
takes some time it's all not as an

00:26:49,450 --> 00:26:56,049
animal where you get status updates

00:26:51,540 --> 00:27:01,860
after each task but some things broken

00:26:56,049 --> 00:27:05,740
here yay let's check for a number three

00:27:01,860 --> 00:27:10,320
well let's see if it works if not we

00:27:05,740 --> 00:27:13,660
learn something um now in the meantime

00:27:10,320 --> 00:27:15,820
you get report after you deployed your

00:27:13,660 --> 00:27:19,720
state on files you get an answer okay

00:27:15,820 --> 00:27:21,250
that's what I've done and those things

00:27:19,720 --> 00:27:23,730
were okay those things I had to change

00:27:21,250 --> 00:27:27,309
and throw things they couldn't change

00:27:23,730 --> 00:27:30,130
you don't want to put them all on the

00:27:27,309 --> 00:27:32,919
master you can't do anything with them

00:27:30,130 --> 00:27:36,340
there so what you could can use a

00:27:32,919 --> 00:27:39,250
so-called returners return us are a

00:27:36,340 --> 00:27:42,100
mechanism to set tell the minion please

00:27:39,250 --> 00:27:45,750
don't send your data only to me but only

00:27:42,100 --> 00:27:50,020
send it there for example or reddit or a

00:27:45,750 --> 00:27:53,740
MongoDB um any SQL database whatever you

00:27:50,020 --> 00:27:57,280
want basically it's just a Python script

00:27:53,740 --> 00:27:59,640
on which takes the data and puts it

00:27:57,280 --> 00:28:03,490
wherever you want it there's also a

00:27:59,640 --> 00:28:07,510
sister crotona so we could see honest

00:28:03,490 --> 00:28:11,049
this log okay what happened to our

00:28:07,510 --> 00:28:15,640
systems see well it takes a long time

00:28:11,049 --> 00:28:21,310
but it didn't work as well too

00:28:15,640 --> 00:28:36,040
let's delete all those keys restart men

00:28:21,310 --> 00:28:45,400
and accept it again and now let's see if

00:28:36,040 --> 00:28:50,770
it works well that looks better so what

00:28:45,400 --> 00:28:54,550
happened here we've got it state um the

00:28:50,770 --> 00:28:56,260
package ntp is installed or ntp server

00:28:54,550 --> 00:29:00,820
is not running because the files aren't

00:28:56,260 --> 00:29:04,770
there and i missed putting in requisite

00:29:00,820 --> 00:29:07,120
there require this is config file and

00:29:04,770 --> 00:29:10,090
but the assault minion is installed

00:29:07,120 --> 00:29:13,170
assault repository is there on there

00:29:10,090 --> 00:29:17,170
additionally packages installed and

00:29:13,170 --> 00:29:19,570
Dassault minion is running but it

00:29:17,170 --> 00:29:34,050
couldn't install a legacy packages well

00:29:19,570 --> 00:29:39,310
why not see you in something drops my de

00:29:34,050 --> 00:29:44,130
PE so but now my ntp confess there and

00:29:39,310 --> 00:29:47,610
my service is running so it works keine

00:29:44,130 --> 00:29:47,610
not sure why

00:29:53,020 --> 00:30:00,050
good thing at work yesterday whatever um

00:29:57,340 --> 00:30:01,550
now that's basic configuration

00:30:00,050 --> 00:30:05,630
management you can do that with puppet

00:30:01,550 --> 00:30:07,930
as well and only to use all right but

00:30:05,630 --> 00:30:12,170
salt has a thing called event-driven

00:30:07,930 --> 00:30:15,050
infrastructure whenever you do something

00:30:12,170 --> 00:30:17,590
with told it triggers an event so you

00:30:15,050 --> 00:30:20,120
schedule an action you get an event

00:30:17,590 --> 00:30:23,840
dominions return that action you get

00:30:20,120 --> 00:30:28,460
another event for each minion and you

00:30:23,840 --> 00:30:33,710
can also define events yourself and on

00:30:28,460 --> 00:30:35,240
those events all go over zeromq and then

00:30:33,710 --> 00:30:37,190
you have on the fault master the

00:30:35,240 --> 00:30:41,500
possibility to define so-called reactors

00:30:37,190 --> 00:30:48,350
which are basically just executables run

00:30:41,500 --> 00:30:51,590
whenever and a specific event occurs so

00:30:48,350 --> 00:30:55,640
are the master does something on the

00:30:51,590 --> 00:30:58,010
minion and dominion returns are its

00:30:55,640 --> 00:31:04,100
results or whatever and events are

00:30:58,010 --> 00:31:07,670
created for example this salt oddest

00:31:04,100 --> 00:31:11,750
person function which gets the result

00:31:07,670 --> 00:31:14,660
eleven percent those are three different

00:31:11,750 --> 00:31:17,830
events the first event is ok here

00:31:14,660 --> 00:31:20,630
something happened that's relatively

00:31:17,830 --> 00:31:26,360
trivial and uninteresting because and

00:31:20,630 --> 00:31:30,050
that's why I put it out there and the

00:31:26,360 --> 00:31:33,350
next is ok here's a new job for you in a

00:31:30,050 --> 00:31:37,120
job there is the function which should

00:31:33,350 --> 00:31:40,670
be called arm which minions should

00:31:37,120 --> 00:31:43,520
execute that function and what target

00:31:40,670 --> 00:31:48,260
was specified so in this case I

00:31:43,520 --> 00:31:51,950
specified salt minion 01 if I would have

00:31:48,260 --> 00:31:55,370
are specified salt minion dot star minus

00:31:51,950 --> 00:32:00,640
star then I would get all my salt mines

00:31:55,370 --> 00:32:03,800
in this list and here just are one and

00:32:00,640 --> 00:32:07,810
after my minions finish I get

00:32:03,800 --> 00:32:10,490
from every sold Megan it's located

00:32:07,810 --> 00:32:13,450
directly under the job so i have here

00:32:10,490 --> 00:32:19,640
the new job sole job timestamp new and

00:32:13,450 --> 00:32:21,680
then sole job timestamp return and i can

00:32:19,640 --> 00:32:26,470
listen for those events and just execute

00:32:21,680 --> 00:32:30,800
whatever I want I'll come to that later

00:32:26,470 --> 00:32:35,870
in the return I have a lot of data which

00:32:30,800 --> 00:32:41,530
I can use to check in the returner and

00:32:35,870 --> 00:32:44,330
do something about that if I want to

00:32:41,530 --> 00:32:46,820
execute my high state I have the problem

00:32:44,330 --> 00:32:49,760
okay I get an even when I scheduled hi

00:32:46,820 --> 00:32:52,130
skate and then I get an event when

00:32:49,760 --> 00:32:55,490
everyone's finished or for each minion

00:32:52,130 --> 00:32:57,470
that has finished a high state but now I

00:32:55,490 --> 00:33:00,460
want to have an event in the middle of

00:32:57,470 --> 00:33:03,170
my state for example okay I'm ready I

00:33:00,460 --> 00:33:05,150
finished setting up the apache web

00:33:03,170 --> 00:33:09,080
server you can now put me into the load

00:33:05,150 --> 00:33:12,290
balancer pool for example um then I can

00:33:09,080 --> 00:33:14,900
just put an event into my state say okay

00:33:12,290 --> 00:33:17,840
right now I'm finished with all web

00:33:14,900 --> 00:33:20,390
server configuration you can now put me

00:33:17,840 --> 00:33:23,540
into that pool for the load balancer

00:33:20,390 --> 00:33:26,720
then I just sent an event from my state

00:33:23,540 --> 00:33:30,800
and listen to it on the master and send

00:33:26,720 --> 00:33:33,580
a set up a reactor another case where I

00:33:30,800 --> 00:33:36,850
want to create events are beacons

00:33:33,580 --> 00:33:41,020
beacons are a feature which hooks into

00:33:36,850 --> 00:33:43,460
system processes like I notify which

00:33:41,020 --> 00:33:47,000
check the load and intervals or

00:33:43,460 --> 00:33:50,990
something like that and based on that it

00:33:47,000 --> 00:33:53,420
creates event so i can say oh I want an

00:33:50,990 --> 00:33:57,020
event if that disk is eighty percent

00:33:53,420 --> 00:33:58,970
full or I want an event if my load is

00:33:57,020 --> 00:34:01,550
ninety percent on all across or

00:33:58,970 --> 00:34:04,850
something like that or if I have a

00:34:01,550 --> 00:34:07,250
special message in my journal neither

00:34:04,850 --> 00:34:10,460
example would be I notify where I can

00:34:07,250 --> 00:34:14,980
just say okay here if someone changes my

00:34:10,460 --> 00:34:17,360
ET ce mot please do something about it

00:34:14,980 --> 00:34:21,440
this is the beacon

00:34:17,360 --> 00:34:26,570
and this sends an event okay here new

00:34:21,440 --> 00:34:30,250
beacon event someone modified my are EGC

00:34:26,570 --> 00:34:32,690
mati and then i have my reactors which

00:34:30,250 --> 00:34:36,350
basically just listen on that event pass

00:34:32,690 --> 00:34:39,920
and get cold if they match that event we

00:34:36,350 --> 00:34:44,510
fire glob i define them on the master

00:34:39,920 --> 00:34:46,370
and i just put it again analyzing

00:34:44,510 --> 00:34:49,550
dictionary or price list in this case

00:34:46,370 --> 00:34:52,730
and list all those things that should be

00:34:49,550 --> 00:34:55,790
done for example if a salt minion starts

00:34:52,730 --> 00:34:58,880
up and connects to the master then there

00:34:55,790 --> 00:35:01,430
is the salt minion start event the star

00:34:58,880 --> 00:35:04,970
here stands for every minion because

00:35:01,430 --> 00:35:07,340
those get sorted by minion and then i

00:35:04,970 --> 00:35:10,850
can say okay if all my evil minion

00:35:07,340 --> 00:35:14,870
starts please execute that SRV react to

00:35:10,850 --> 00:35:19,220
our SLS files to start a CLS file or if

00:35:14,870 --> 00:35:21,830
something should react to my our event i

00:35:19,220 --> 00:35:27,200
defined in my state then please execute

00:35:21,830 --> 00:35:30,470
that status as a last file and another

00:35:27,200 --> 00:35:34,370
demo for that oh now it works perfectly

00:35:30,470 --> 00:35:37,460
so what this did is basically just

00:35:34,370 --> 00:35:42,350
install a bunch of packages for Alexei

00:35:37,460 --> 00:35:45,950
and i define 3 and its installed all the

00:35:42,350 --> 00:35:50,600
other stuff it needed for that that's

00:35:45,950 --> 00:35:56,590
great because we need net later and now

00:35:50,600 --> 00:35:56,590
i hope solving in five routes as well

00:36:11,030 --> 00:36:24,270
Sookie yes so now I accepted a single he

00:36:20,880 --> 00:36:32,070
not all of them and I should be able to

00:36:24,270 --> 00:36:34,140
just say arms salt salt mmm in 305 I can

00:36:32,070 --> 00:36:38,630
I have tab completion here so I don't

00:36:34,140 --> 00:36:43,590
need to put it all the way out there oh

00:36:38,630 --> 00:36:48,740
and if that works I should have working

00:36:43,590 --> 00:36:48,740
red press deployment afterwards with

00:36:58,070 --> 00:37:06,050
now for my beacon I have defined a

00:37:01,670 --> 00:37:09,030
beacon file which basically tells on

00:37:06,050 --> 00:37:12,800
Dominion if I changed of course it

00:37:09,030 --> 00:37:17,580
didn't work if i change the ET ce mot

00:37:12,800 --> 00:37:19,770
then please call that reactor it looks

00:37:17,580 --> 00:37:29,450
like this in the salt master

00:37:19,770 --> 00:37:34,290
configuration um please power reactor on

00:37:29,450 --> 00:37:37,560
the beacon event I notify and please

00:37:34,290 --> 00:37:42,740
execute male slf normally what it two 2

00:37:37,560 --> 00:37:45,510
is just execute ok here is my mail um

00:37:42,740 --> 00:37:50,930
but since on you want to mail isn't

00:37:45,510 --> 00:37:55,580
installed I just create a file called a

00:37:50,930 --> 00:37:55,580
new mail in the route home directory I

00:37:58,430 --> 00:38:05,160
have my beacon configuration on the

00:38:01,350 --> 00:38:08,760
minion not on the master and arm that

00:38:05,160 --> 00:38:12,720
basically just says ok here define my I

00:38:08,760 --> 00:38:19,290
notify beacon whenever I ET ce mot is

00:38:12,720 --> 00:38:25,140
modified fire an event so let's create

00:38:19,290 --> 00:38:31,170
that file nothing should happen and if i

00:38:25,140 --> 00:38:36,060
change it i now have on file new mail in

00:38:31,170 --> 00:38:39,810
my directory which says oh atc mati

00:38:36,060 --> 00:38:43,020
changed great i'm not sure why does

00:38:39,810 --> 00:38:45,780
theta twice probably because there are

00:38:43,020 --> 00:38:48,600
multiple minions running my no because I

00:38:45,780 --> 00:38:55,740
 up something in setup well if I

00:38:48,600 --> 00:39:00,200
do bet you can I get new entries they

00:38:55,740 --> 00:39:04,400
shouldn't be double that's my fault so

00:39:00,200 --> 00:39:09,720
what's done is on the master it execute

00:39:04,400 --> 00:39:13,590
the following file arm again I have

00:39:09,720 --> 00:39:15,780
ID send you mail and run a local command

00:39:13,590 --> 00:39:20,550
on the target machine so I say okay

00:39:15,780 --> 00:39:23,760
please target the machine or from rich

00:39:20,550 --> 00:39:29,720
the event comes which is stored in the

00:39:23,760 --> 00:39:34,020
data or dictionary and then please just

00:39:29,720 --> 00:39:37,440
echo the date and which file is changed

00:39:34,020 --> 00:39:40,920
into rule new mail you could also set

00:39:37,440 --> 00:39:43,830
their male command or execute it on the

00:39:40,920 --> 00:39:47,609
master if you want or do everything else

00:39:43,830 --> 00:39:52,220
you can use all execution modules they

00:39:47,609 --> 00:39:56,340
are and salt so you can yeah really do

00:39:52,220 --> 00:39:58,020
commands arm check something else put it

00:39:56,340 --> 00:40:00,540
in a load balancer pool whatever you

00:39:58,020 --> 00:40:03,000
want you could also oh my disk is eighty

00:40:00,540 --> 00:40:09,300
percent fall please resize it to a

00:40:03,000 --> 00:40:17,390
larger size works without problems let's

00:40:09,300 --> 00:40:17,390
see what failed here ah package install

00:40:18,290 --> 00:40:28,280
couldn't install the packages because I

00:40:23,780 --> 00:40:28,280
don't know let's try again

00:40:30,700 --> 00:40:40,310
so um we'll see if that works at all i

00:40:36,920 --> 00:40:42,290
really ask i already set we have use

00:40:40,310 --> 00:40:44,600
case load balancing we can do job

00:40:42,290 --> 00:40:48,290
automation like resize my disk if it's

00:40:44,600 --> 00:40:52,280
getting full or just send an alert to me

00:40:48,290 --> 00:40:56,020
with a male you have the small

00:40:52,280 --> 00:40:58,880
monitoring feature with the beacons and

00:40:56,020 --> 00:41:02,930
you can do really powerful things with

00:40:58,880 --> 00:41:05,210
it if you think about it and the last

00:41:02,930 --> 00:41:09,200
part i want to tell you about salt is

00:41:05,210 --> 00:41:12,410
salt cloud um salt cloud is an interface

00:41:09,200 --> 00:41:16,760
to basically every public or private

00:41:12,410 --> 00:41:20,690
cloud you can think of arm and it uses

00:41:16,760 --> 00:41:25,250
their API to do stuff on them so deploy

00:41:20,690 --> 00:41:28,460
machines and destroy machines define

00:41:25,250 --> 00:41:30,530
them with a profile and then check ok

00:41:28,460 --> 00:41:33,200
which states should be applied to them

00:41:30,530 --> 00:41:38,080
and apply those states so you could

00:41:33,200 --> 00:41:42,920
define your our whole infrastructure

00:41:38,080 --> 00:41:45,230
within sault ste ok my whole

00:41:42,920 --> 00:41:47,090
infrastructure runs on OpenStack now but

00:41:45,230 --> 00:41:50,120
now I want it to run on something else

00:41:47,090 --> 00:41:54,410
and just bring it over there by changing

00:41:50,120 --> 00:42:00,830
the provider you use and it should work

00:41:54,410 --> 00:42:02,630
out of the box first you have to define

00:42:00,830 --> 00:42:07,450
a so-called provider which in this case

00:42:02,630 --> 00:42:12,290
is easy to you could also have OpenStack

00:42:07,450 --> 00:42:17,030
google cloud engine either digital ocean

00:42:12,290 --> 00:42:20,840
oh there are multiple options there for

00:42:17,030 --> 00:42:26,870
you i have an example with alexi we get

00:42:20,840 --> 00:42:30,500
to that and there you specify um which

00:42:26,870 --> 00:42:36,470
driver should be used so which service

00:42:30,500 --> 00:42:41,530
is it and um your credentials you want

00:42:36,470 --> 00:42:43,310
to use to access that service and which

00:42:41,530 --> 00:42:45,080
minion options you want

00:42:43,310 --> 00:42:48,170
set for the minions installed on those

00:42:45,080 --> 00:42:50,330
systems for example here you can set the

00:42:48,170 --> 00:42:54,560
master server which those minions should

00:42:50,330 --> 00:42:56,810
connect to after you defined your

00:42:54,560 --> 00:43:03,070
provider you need to profile using that

00:42:56,810 --> 00:43:06,110
provider a profile is basically a yeah

00:43:03,070 --> 00:43:08,720
definition of your system afterwards

00:43:06,110 --> 00:43:12,190
where it sells you okay use this

00:43:08,720 --> 00:43:15,280
provider with this image or template and

00:43:12,190 --> 00:43:19,070
some other options for the instance and

00:43:15,280 --> 00:43:22,340
you can define more minion options so I

00:43:19,070 --> 00:43:26,260
could say for Alexei please use my

00:43:22,340 --> 00:43:26,260
Alexei provider i defined before and

00:43:26,890 --> 00:43:33,020
create a new machine based on newborn to

00:43:30,020 --> 00:43:38,660
trustee and set the password to test 123

00:43:33,020 --> 00:43:40,970
and that's called my fancy profile now

00:43:38,660 --> 00:43:42,860
you can go and say okay please salt

00:43:40,970 --> 00:43:47,210
cloud deploy me a machine with that

00:43:42,860 --> 00:43:48,710
profile manually that works but you

00:43:47,210 --> 00:43:52,010
don't want to do that for larger

00:43:48,710 --> 00:43:54,230
environments what you can do now is you

00:43:52,010 --> 00:43:57,170
specify a map file where you have your

00:43:54,230 --> 00:44:03,350
profile list your instances below that

00:43:57,170 --> 00:44:08,480
and then you can set some other options

00:44:03,350 --> 00:44:10,730
and say okay please salt I'll execute

00:44:08,480 --> 00:44:13,850
that map file and do everything what's

00:44:10,730 --> 00:44:16,130
in there and define those machines so in

00:44:13,850 --> 00:44:20,560
this case it would define instance one

00:44:16,130 --> 00:44:24,070
and two with the proof I won and

00:44:20,560 --> 00:44:26,510
instances three and four with profile to

00:44:24,070 --> 00:44:28,430
could be different providers could be

00:44:26,510 --> 00:44:30,050
everything that's all defined in the

00:44:28,430 --> 00:44:33,200
profile it just would deploy these

00:44:30,050 --> 00:44:35,690
machines I can also tell him to destroy

00:44:33,200 --> 00:44:37,760
all those machines in there or destroy

00:44:35,690 --> 00:44:41,060
all other machines deployed on their

00:44:37,760 --> 00:44:44,870
provider with accessible with my keys if

00:44:41,060 --> 00:44:46,550
I want that so that's where the whole

00:44:44,870 --> 00:44:49,280
lifecycle management comes into play

00:44:46,550 --> 00:44:52,900
where I can deploy machines destroy

00:44:49,280 --> 00:44:55,460
machines and put configuration on them I

00:44:52,900 --> 00:44:56,900
could also bootstrap a completely new

00:44:55,460 --> 00:45:02,810
salt environment

00:44:56,900 --> 00:45:05,300
where I define my instances and tell the

00:45:02,810 --> 00:45:07,400
first instance to be a new salt master

00:45:05,300 --> 00:45:11,300
and then on the other instances i would

00:45:07,400 --> 00:45:13,670
say okay this is your master or not so i

00:45:11,300 --> 00:45:21,740
could could create a casual environment

00:45:13,670 --> 00:45:24,860
basically and as a last step if you have

00:45:21,740 --> 00:45:27,320
probably thousands of existing machines

00:45:24,860 --> 00:45:31,340
how do you get sold on to all of them

00:45:27,320 --> 00:45:33,940
you could use salt SSH or you could use

00:45:31,340 --> 00:45:37,210
SSH and just just execute the script or

00:45:33,940 --> 00:45:40,190
you can use the salt salt if I driver

00:45:37,210 --> 00:45:44,990
which basically gives you the

00:45:40,190 --> 00:45:48,910
possibility to define a profile um where

00:45:44,990 --> 00:45:51,350
you specify your ssh username and like a

00:45:48,910 --> 00:45:54,860
key file that should be used to log in

00:45:51,350 --> 00:45:57,680
on that machine and then you can define

00:45:54,860 --> 00:46:01,010
a map file okay this machine is that

00:45:57,680 --> 00:46:04,520
house please fortify it those machines

00:46:01,010 --> 00:46:07,970
will get the name that is specified here

00:46:04,520 --> 00:46:11,090
and assault connects to the ipss okay

00:46:07,970 --> 00:46:14,840
please let me check on I will install

00:46:11,090 --> 00:46:17,270
salt now it does that using our default

00:46:14,840 --> 00:46:19,400
bootstrap script this whole boot

00:46:17,270 --> 00:46:24,590
subscript is transferred from the master

00:46:19,400 --> 00:46:28,160
to the minion and then on that minion

00:46:24,590 --> 00:46:30,890
it's executed looks for local

00:46:28,160 --> 00:46:33,470
repositories if they are there and the

00:46:30,890 --> 00:46:35,060
packages are available we'll just

00:46:33,470 --> 00:46:37,910
install them from the repositories

00:46:35,060 --> 00:46:41,830
otherwise it will add the repositories

00:46:37,910 --> 00:46:46,360
from upstream and install it from there

00:46:41,830 --> 00:46:50,330
so and before I end my presentation on

00:46:46,360 --> 00:46:56,030
okay the rarest example didn't work

00:46:50,330 --> 00:47:00,590
whyever um but I have prepared an Alexei

00:46:56,030 --> 00:47:06,950
example so i have here no ericsson

00:47:00,590 --> 00:47:09,590
machines running um I have to find my

00:47:06,950 --> 00:47:14,490
Alexei provider and

00:47:09,590 --> 00:47:18,330
my providers directory basically just

00:47:14,490 --> 00:47:20,580
tells me okay on salt minion 3r use

00:47:18,330 --> 00:47:26,640
Alexia's provider that's all that's

00:47:20,580 --> 00:47:39,210
needed for that then I have a Alexi

00:47:26,640 --> 00:47:42,000
profile that tells our salt to use this

00:47:39,210 --> 00:47:44,760
provider and put template you want to on

00:47:42,000 --> 00:47:48,990
their release trustee and sets the

00:47:44,760 --> 00:47:56,250
master options for Dominion and sets the

00:47:48,990 --> 00:48:01,050
password test 123 and now i have a cloud

00:47:56,250 --> 00:48:03,090
map file which just says okay roll this

00:48:01,050 --> 00:48:07,260
out this profile out for those three

00:48:03,090 --> 00:48:11,400
minions and what it will do is it will

00:48:07,260 --> 00:48:21,080
create those instances on our salt

00:48:11,400 --> 00:48:21,080
minion 34 cloudiness m and E TC is all

00:48:21,830 --> 00:48:30,030
you should be able to tap that as well

00:48:26,190 --> 00:48:32,760
but I couldn't get it to work what you

00:48:30,030 --> 00:48:35,160
want to do if you specify multiple

00:48:32,760 --> 00:48:39,450
instances in your map file you want to

00:48:35,160 --> 00:48:42,240
run it with minus large p because then

00:48:39,450 --> 00:48:44,910
it will do all the work in parallel so

00:48:42,240 --> 00:48:47,210
what it did now is it locked in on a

00:48:44,910 --> 00:48:50,970
minion check if there are any existing

00:48:47,210 --> 00:48:52,800
Alexi containers and if one of those

00:48:50,970 --> 00:48:55,980
containers already had existed it would

00:48:52,800 --> 00:48:57,720
have created it but they didn't so now I

00:48:55,980 --> 00:49:04,620
tell them okay please create those

00:48:57,720 --> 00:49:07,950
containers and now we see on that salt

00:49:04,620 --> 00:49:11,730
minion we have Alekseev minion the one

00:49:07,950 --> 00:49:16,170
two and three and they are based on

00:49:11,730 --> 00:49:18,870
you're going to trustee template and it

00:49:16,170 --> 00:49:21,360
will take a while now because now sold

00:49:18,870 --> 00:49:22,860
is using that soul bootstrap script to

00:49:21,360 --> 00:49:25,500
register those systems to

00:49:22,860 --> 00:49:28,080
after so they will download the

00:49:25,500 --> 00:49:31,920
necessary salt packages and then connect

00:49:28,080 --> 00:49:35,880
to my master what it also does is it

00:49:31,920 --> 00:49:38,040
precedes their keys so are they usually

00:49:35,880 --> 00:49:39,510
when you start sold minion and there is

00:49:38,040 --> 00:49:44,340
no key on the system it will create one

00:49:39,510 --> 00:49:46,410
arm but in this case this key will be

00:49:44,340 --> 00:49:48,180
created on the master and copied over to

00:49:46,410 --> 00:49:49,950
the client system so i don't have to

00:49:48,180 --> 00:49:53,490
accept them on the master anymore

00:49:49,950 --> 00:49:56,250
because i just created them and that's

00:49:53,490 --> 00:50:01,830
what should that shouldn't require any

00:49:56,250 --> 00:50:31,910
more work so while that takes a while do

00:50:01,830 --> 00:50:39,960
you have any questions yeah yeah um

00:50:31,910 --> 00:50:43,770
hidden how so so you mean if it so it

00:50:39,960 --> 00:50:47,790
just shows me if it changes those three

00:50:43,770 --> 00:50:49,620
packages but not D depends if I'm

00:50:47,790 --> 00:50:52,830
actually not sure if it's possible to do

00:50:49,620 --> 00:50:58,530
that uh I've never seen it before but I

00:50:52,830 --> 00:51:00,900
think our it's not possible because it

00:50:58,530 --> 00:51:03,600
always tells what a change on the system

00:51:00,900 --> 00:51:05,970
so it installed those packages though

00:51:03,600 --> 00:51:08,090
that is the change and it tells you

00:51:05,970 --> 00:51:08,090
about

00:51:12,410 --> 00:51:17,720
the question was how can you create

00:51:14,090 --> 00:51:23,540
custom grains are you can define them on

00:51:17,720 --> 00:51:25,580
Dominion arm it's basically just another

00:51:23,540 --> 00:51:30,380
option in the minion configuration or

00:51:25,580 --> 00:51:33,530
you can put a grain file there to put

00:51:30,380 --> 00:51:35,870
them on the minion or what else well

00:51:33,530 --> 00:51:40,250
another possibility if you run for

00:51:35,870 --> 00:51:42,320
example dick with the cloud map you can

00:51:40,250 --> 00:51:47,020
define them when you specify those there

00:51:42,320 --> 00:51:51,260
so I think there was an example

00:51:47,020 --> 00:51:52,640
somewhere here oh yeah here so in your

00:51:51,260 --> 00:51:55,040
cloud know if you could say okay please

00:51:52,640 --> 00:52:13,730
define migraine Mikey my value on that

00:51:55,040 --> 00:52:16,430
system oh no that's not there is no

00:52:13,730 --> 00:52:20,240
mechanism to do that automatically you

00:52:16,430 --> 00:52:22,730
would have to define them by yourself um

00:52:20,240 --> 00:52:24,770
because you ask that you have to be

00:52:22,730 --> 00:52:29,770
careful because if you have an iota phi

00:52:24,770 --> 00:52:32,540
i notify event on changing a file and

00:52:29,770 --> 00:52:36,250
you want to say ok if that fire gets

00:52:32,540 --> 00:52:39,800
changed manually please are we just

00:52:36,250 --> 00:52:41,540
redeploy in my old file for example my

00:52:39,800 --> 00:52:44,270
ET ce mot each will never change so

00:52:41,540 --> 00:52:48,830
instead of sending an email i would just

00:52:44,270 --> 00:52:51,980
redeploy dtc mati from my master what

00:52:48,830 --> 00:52:54,520
happens you create a new event because

00:52:51,980 --> 00:52:57,650
you're again modifying that file and

00:52:54,520 --> 00:53:00,890
then you have to specify in your beacon

00:52:57,650 --> 00:53:04,670
that please don't fire an event if a

00:53:00,890 --> 00:53:07,670
state run is running right now so that's

00:53:04,670 --> 00:53:14,260
just another pick up you could run into

00:53:07,670 --> 00:53:14,260
there any other questions

00:53:19,920 --> 00:53:35,970
so the download will should take awhile

00:53:24,400 --> 00:53:35,970
or should it worked or not

00:53:57,579 --> 00:54:03,589
basically what we do is we Artem to get

00:54:01,670 --> 00:54:06,529
comfortable with the command line

00:54:03,589 --> 00:54:09,489
interface first so let's see okay does

00:54:06,529 --> 00:54:13,219
it work everywhere if they already have

00:54:09,489 --> 00:54:15,289
Foreman experience then we tell them

00:54:13,219 --> 00:54:17,900
okay yeah sure you can use that we

00:54:15,289 --> 00:54:19,999
integrate that or if they are already

00:54:17,900 --> 00:54:22,519
run to the manager for example that

00:54:19,999 --> 00:54:25,279
integrates in a new version also sold

00:54:22,519 --> 00:54:28,249
stick Martha then they could use that

00:54:25,279 --> 00:54:30,979
but are usually we tell them okay just

00:54:28,249 --> 00:54:37,180
first start with normal stuff and then

00:54:30,979 --> 00:54:41,589
are you can think about adding and

00:54:37,180 --> 00:54:41,589
graphical interface to it or something

00:54:44,829 --> 00:54:50,839
yep so the question was if there is a

00:54:48,499 --> 00:54:52,999
possibility to do some fine finer

00:54:50,839 --> 00:54:57,829
grained debugging like in ansible where

00:54:52,999 --> 00:55:00,199
you get a return for each task so as of

00:54:57,829 --> 00:55:02,749
now you can't do that easily on a master

00:55:00,199 --> 00:55:07,759
you have the possibility to change the

00:55:02,749 --> 00:55:17,089
output level of the master to debug I'll

00:55:07,759 --> 00:55:19,579
just do that here I hope it works sold t

00:55:17,089 --> 00:55:23,299
back or there are multiple levels you

00:55:19,579 --> 00:55:31,969
can specify here it's basically just

00:55:23,299 --> 00:55:38,859
your lock level so one I think that one

00:55:31,969 --> 00:55:38,859
worked on 33 word um in each case and

00:55:40,509 --> 00:55:46,160
well you get some information what's

00:55:44,509 --> 00:55:48,979
happening on the mass but you don't get

00:55:46,160 --> 00:55:51,439
information from the client when what

00:55:48,979 --> 00:55:58,689
you have to do basically is check on the

00:55:51,439 --> 00:55:58,689
client in the log file there

00:56:05,740 --> 00:56:14,660
and basically here you get your

00:56:10,400 --> 00:56:21,020
information arm if there are errors or

00:56:14,660 --> 00:56:24,710
something else happened but you there's

00:56:21,020 --> 00:56:27,770
no possibility as of now to get your

00:56:24,710 --> 00:56:29,540
information for each state what you

00:56:27,770 --> 00:56:33,680
could do is basically you could fire

00:56:29,540 --> 00:56:36,350
events after each state's run but let's

00:56:33,680 --> 00:56:44,420
manual debugging you have to do not

00:56:36,350 --> 00:56:48,830
something that's involved buildin well

00:56:44,420 --> 00:56:53,410
then our thank you and I hope you find

00:56:48,830 --> 00:56:53,410

YouTube URL: https://www.youtube.com/watch?v=wwQ5UaEMaO8


