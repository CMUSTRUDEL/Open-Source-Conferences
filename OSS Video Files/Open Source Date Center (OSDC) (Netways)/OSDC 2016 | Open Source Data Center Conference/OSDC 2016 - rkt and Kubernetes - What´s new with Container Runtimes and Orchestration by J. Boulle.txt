Title: OSDC 2016 - rkt and Kubernetes - WhatÂ´s new with Container Runtimes and Orchestration by J. Boulle
Publication date: 2016-05-02
Playlist: OSDC 2016 | Open Source Data Center Conference
Description: 
	Application containers are changing some of the fundamentals of how Linux is used in the server environment. rkt is a daemon-free container runtime with a focus on security. rkt is also an implementation of the App Container (appc) runtime specification, which defines the concept of a pod: a grouping of multiple containerized applications in a single execution unit. Pods are also used as the abstraction within Kubernetes, and having rkt work natively with pods makes it uniquely suited as a Kubernetes container runtime engine. With different application container runtimes on Linux to choose from (including Docker, kurma and rkt) this session will cover the differences. It will also dive into use cases for rkt under Kubernetes
Captions: 
	00:00:11,590 --> 00:00:17,460
okay so we start again so next is

00:00:15,430 --> 00:00:20,400
Jonathan boo talking about

00:00:17,460 --> 00:00:23,699
koo benitez yeah it's your station

00:00:20,400 --> 00:00:25,590
thanks for hanging over all right thanks

00:00:23,699 --> 00:00:26,460
for coming everyone as you mentioned

00:00:25,590 --> 00:00:29,219
today I'm gonna be talking a bit about

00:00:26,460 --> 00:00:30,509
rocket and Cooper Nettie's and some of

00:00:29,219 --> 00:00:32,519
the things that have been happening more

00:00:30,509 --> 00:00:35,370
recently in this area and how we

00:00:32,519 --> 00:00:37,800
integrate the two so just for a little

00:00:35,370 --> 00:00:39,629
context i'm jonathan bull i'm john bull

00:00:37,800 --> 00:00:40,920
on github and this little bear sort of

00:00:39,629 --> 00:00:42,540
follows me around the internet and i

00:00:40,920 --> 00:00:44,879
work at core OS where I've been for

00:00:42,540 --> 00:00:46,170
about two years now working on a bunch

00:00:44,879 --> 00:00:50,250
of different things a bunch of different

00:00:46,170 --> 00:00:52,019
open-source software I like to give it a

00:00:50,250 --> 00:00:54,570
little context for you know why are we

00:00:52,019 --> 00:00:55,649
talking about these things so like you

00:00:54,570 --> 00:00:57,329
know the first question might be why am

00:00:55,649 --> 00:00:59,039
I here talking about rocket in Cuban 80s

00:00:57,329 --> 00:01:01,289
today but the more sort of general

00:00:59,039 --> 00:01:02,760
question is like why why are we talking

00:01:01,289 --> 00:01:05,309
about could container runtimes and

00:01:02,760 --> 00:01:07,470
orchestration so these are two topics

00:01:05,309 --> 00:01:09,149
two areas we work in a lot at core OS

00:01:07,470 --> 00:01:11,130
and we think are very important for sort

00:01:09,149 --> 00:01:12,420
of the future of the industry and

00:01:11,130 --> 00:01:14,640
obviously they're very popular in the

00:01:12,420 --> 00:01:15,780
open source world at the moment but I

00:01:14,640 --> 00:01:18,000
want to talk a little bit about you know

00:01:15,780 --> 00:01:20,220
our context our history for why we're

00:01:18,000 --> 00:01:23,700
working on these things because it mode

00:01:20,220 --> 00:01:25,350
it sort of that context explains in a

00:01:23,700 --> 00:01:27,390
sort of motivation drives you know some

00:01:25,350 --> 00:01:28,740
of the design decisions that we make and

00:01:27,390 --> 00:01:31,259
the technologies that we choose to work

00:01:28,740 --> 00:01:35,310
on and how weird architecting this

00:01:31,259 --> 00:01:37,799
software so koro has started about two

00:01:35,310 --> 00:01:39,479
years ago it's a company but it's

00:01:37,799 --> 00:01:41,759
fundamentally it's a lot of a bunch of

00:01:39,479 --> 00:01:43,469
open-source software and the sort of

00:01:41,759 --> 00:01:45,119
mission of the company is to secure the

00:01:43,469 --> 00:01:48,479
internet which is kind of this grandiose

00:01:45,119 --> 00:01:50,250
mission and the main sort of idea there

00:01:48,479 --> 00:01:51,600
is that you know software is always

00:01:50,250 --> 00:01:53,100
going to be insecure there's always

00:01:51,600 --> 00:01:55,619
going to be vulnerabilities and so the

00:01:53,100 --> 00:01:57,299
best way to deal with that like sensibly

00:01:55,619 --> 00:01:59,700
is just to make sure that updating is as

00:01:57,299 --> 00:02:01,560
seamless as possible so we started at

00:01:59,700 --> 00:02:03,659
the operating system level with a open

00:02:01,560 --> 00:02:06,539
source Linux distribution core OS Linux

00:02:03,659 --> 00:02:09,000
which is self-updating operating systems

00:02:06,539 --> 00:02:10,679
so it's quite a minute minimal sort of

00:02:09,000 --> 00:02:12,930
operating system a minimal distribution

00:02:10,679 --> 00:02:15,299
of linux there's no package manager for

00:02:12,930 --> 00:02:16,590
example so what you get what is baked

00:02:15,299 --> 00:02:18,980
into the operating system is what you

00:02:16,590 --> 00:02:22,019
get and it's a read-only sort of

00:02:18,980 --> 00:02:23,280
operating system image and you know

00:02:22,019 --> 00:02:25,350
we're constantly every time that there's

00:02:23,280 --> 00:02:26,910
a update we're pushing that out

00:02:25,350 --> 00:02:28,859
automatically in the update gets pulled

00:02:26,910 --> 00:02:31,300
down applied to the operating system

00:02:28,859 --> 00:02:35,110
your system reboots to apply the update

00:02:31,300 --> 00:02:36,160
and you get the latest version so you

00:02:35,110 --> 00:02:37,510
know that's kind of where we started at

00:02:36,160 --> 00:02:40,270
core OS is working on this operating

00:02:37,510 --> 00:02:41,560
system but you know at the end of the

00:02:40,270 --> 00:02:43,300
day why are people running operating

00:02:41,560 --> 00:02:45,130
systems well typically they're they're

00:02:43,300 --> 00:02:46,180
providing applications so you know since

00:02:45,130 --> 00:02:47,650
we're here talking at the data center

00:02:46,180 --> 00:02:49,210
conference we're mostly talking about

00:02:47,650 --> 00:02:51,640
servers that are running in data centers

00:02:49,210 --> 00:02:53,860
that are providing you know web services

00:02:51,640 --> 00:02:56,950
and other kind of services to to to

00:02:53,860 --> 00:02:58,240
customers into clients to users so if

00:02:56,950 --> 00:02:59,650
we're going to be updating the operating

00:02:58,240 --> 00:03:00,970
system and then you know rebooting

00:02:59,650 --> 00:03:03,310
everything or changing the underlying

00:03:00,970 --> 00:03:04,600
software in the operating system well

00:03:03,310 --> 00:03:05,890
what about these applications and

00:03:04,600 --> 00:03:08,260
services that we're running and that

00:03:05,890 --> 00:03:11,020
we're providing how can we provide you

00:03:08,260 --> 00:03:12,730
know continuity of service and so this

00:03:11,020 --> 00:03:14,860
is really the classic one of the classic

00:03:12,730 --> 00:03:16,480
use cases for for these two two

00:03:14,860 --> 00:03:18,910
solutions Canyon on the one side

00:03:16,480 --> 00:03:22,240
container runtimes and then on the other

00:03:18,910 --> 00:03:24,070
side orchestration so container you know

00:03:22,240 --> 00:03:25,840
decouples the operating system from the

00:03:24,070 --> 00:03:27,460
application that's running on it so that

00:03:25,840 --> 00:03:29,680
you can update the software in the

00:03:27,460 --> 00:03:31,750
operating system without affecting the

00:03:29,680 --> 00:03:33,910
application and then orchestration

00:03:31,750 --> 00:03:36,220
allows you to provide sort of high

00:03:33,910 --> 00:03:37,780
availability between the life of the the

00:03:36,220 --> 00:03:39,880
uptime of the operating system the

00:03:37,780 --> 00:03:41,260
uptime of one server and the uptime of

00:03:39,880 --> 00:03:44,230
the actual you know service that your

00:03:41,260 --> 00:03:45,459
application is providing so I'll talk

00:03:44,230 --> 00:03:47,230
about that in a little bit sure sure

00:03:45,459 --> 00:03:49,239
what that looks like in a visually in a

00:03:47,230 --> 00:03:51,430
minute so the first side of that

00:03:49,239 --> 00:03:53,620
container run times as i said the ideas

00:03:51,430 --> 00:03:55,060
that we can you know at core OS we

00:03:53,620 --> 00:03:57,130
provide this self-updating operating

00:03:55,060 --> 00:03:58,840
system and we want to be able to push

00:03:57,130 --> 00:04:00,190
out those updates without affecting your

00:03:58,840 --> 00:04:03,010
applications that are running on the

00:04:00,190 --> 00:04:04,900
operating system so you know if anyone's

00:04:03,010 --> 00:04:06,820
you know not familiar with the idea of

00:04:04,900 --> 00:04:08,830
containers and what that looks like just

00:04:06,820 --> 00:04:11,010
to give you an idea here you know in a

00:04:08,830 --> 00:04:13,090
kind of classic Linux distribution world

00:04:11,010 --> 00:04:14,530
everything to the left of this distro

00:04:13,090 --> 00:04:16,840
line is what the operating system

00:04:14,530 --> 00:04:19,090
provider is responsible for so you know

00:04:16,840 --> 00:04:21,640
the colonel and basic like in it in it

00:04:19,090 --> 00:04:23,650
functionality like systemd and ssh to

00:04:21,640 --> 00:04:25,990
provide you know remote access but then

00:04:23,650 --> 00:04:28,150
also a lot of application libraries and

00:04:25,990 --> 00:04:31,090
sort of databases and and things like

00:04:28,150 --> 00:04:32,740
that a language runtimes like Python and

00:04:31,090 --> 00:04:34,450
Java they're all provided as part of the

00:04:32,740 --> 00:04:36,370
operating system and what that means is

00:04:34,450 --> 00:04:37,870
when the operating system vendor wants

00:04:36,370 --> 00:04:40,360
to push out a new update they have to be

00:04:37,870 --> 00:04:41,680
careful because they might end up you

00:04:40,360 --> 00:04:44,979
know affecting the app that's leveraging

00:04:41,680 --> 00:04:45,520
all these libraries so moving to this

00:04:44,979 --> 00:04:48,160
container

00:04:45,520 --> 00:04:49,810
as world pushes all those dependencies

00:04:48,160 --> 00:04:51,729
into the into the responsibility

00:04:49,810 --> 00:04:53,319
application itself so now you know the

00:04:51,729 --> 00:04:55,599
distro is this much smaller set of

00:04:53,319 --> 00:04:57,430
software on the left and as we control

00:04:55,599 --> 00:04:59,259
that a much smaller set of software that

00:04:57,430 --> 00:05:01,360
doesn't have this strict dependency

00:04:59,259 --> 00:05:03,129
between with the application then we can

00:05:01,360 --> 00:05:05,849
update this at a different cadence you

00:05:03,129 --> 00:05:08,169
know without affecting the application

00:05:05,849 --> 00:05:10,270
this means that applications then need

00:05:08,169 --> 00:05:13,300
to include all the you know dependencies

00:05:10,270 --> 00:05:14,650
with themselves in their containers but

00:05:13,300 --> 00:05:16,449
it also means that then they can

00:05:14,650 --> 00:05:17,889
potentially run you know decouples

00:05:16,449 --> 00:05:19,630
applications from each other so you can

00:05:17,889 --> 00:05:21,069
potentially run multiple applications on

00:05:19,630 --> 00:05:23,409
the same system with multiple versions

00:05:21,069 --> 00:05:25,000
of libraries wouldn't necessarily

00:05:23,409 --> 00:05:26,560
recommend running multiple versions of

00:05:25,000 --> 00:05:29,440
SSL because one of them is probably

00:05:26,560 --> 00:05:33,819
broken but this is to give you an idea

00:05:29,440 --> 00:05:35,289
of you know what you know what contained

00:05:33,819 --> 00:05:36,400
one of the classic reasons why we use

00:05:35,289 --> 00:05:38,259
container runtimes and why are we

00:05:36,400 --> 00:05:40,180
interested in them and this is what core

00:05:38,259 --> 00:05:41,650
OS is so core OS Linux is you know

00:05:40,180 --> 00:05:43,810
everything on the left just that that

00:05:41,650 --> 00:05:45,819
minimal container minimal operating

00:05:43,810 --> 00:05:47,560
system and then users run their

00:05:45,819 --> 00:05:50,770
applications in containers on top of it

00:05:47,560 --> 00:05:52,509
you know in different container runtimes

00:05:50,770 --> 00:05:54,880
so in core OS we support things like

00:05:52,509 --> 00:05:55,960
Dhaka out of the box and the rocket

00:05:54,880 --> 00:05:58,000
runtime which you're going to talk about

00:05:55,960 --> 00:06:00,729
in more detail and then also sort of

00:05:58,000 --> 00:06:02,529
even simpler things like in spawn which

00:06:00,729 --> 00:06:03,490
means every time you execute a container

00:06:02,529 --> 00:06:07,300
it's this fully self-contained

00:06:03,490 --> 00:06:08,680
environment there so that's why we you

00:06:07,300 --> 00:06:10,000
know have contained a run times and why

00:06:08,680 --> 00:06:12,520
we're interested in them why we started

00:06:10,000 --> 00:06:14,590
working on them at core OS and how we

00:06:12,520 --> 00:06:17,020
use them to you know to drive our

00:06:14,590 --> 00:06:18,310
updates forward and then I'm going to

00:06:17,020 --> 00:06:21,159
talk a bit about orchestration and where

00:06:18,310 --> 00:06:22,930
that fits in so the basic idea is that

00:06:21,159 --> 00:06:24,430
let's say you have you know this cluster

00:06:22,930 --> 00:06:26,710
of servers and each of these servers is

00:06:24,430 --> 00:06:29,229
running some applications in this case

00:06:26,710 --> 00:06:31,389
you know apps one through seven and you

00:06:29,229 --> 00:06:33,130
know server one as I said it's you know

00:06:31,389 --> 00:06:34,719
the operating systems automatically

00:06:33,130 --> 00:06:36,940
updating so there's no intervention from

00:06:34,719 --> 00:06:38,860
the user from the administrator so the

00:06:36,940 --> 00:06:40,960
server one pulls down an update applies

00:06:38,860 --> 00:06:42,669
it to the filesystem and then it decides

00:06:40,960 --> 00:06:43,930
how I need to reboot because to you know

00:06:42,669 --> 00:06:45,849
to update the operating system to update

00:06:43,930 --> 00:06:47,259
the colonel we need to actually do a

00:06:45,849 --> 00:06:49,419
full reboot to get into the new file

00:06:47,259 --> 00:06:51,340
system we have some of you might be

00:06:49,419 --> 00:06:53,020
wondering or what about things like k

00:06:51,340 --> 00:06:55,120
exact to be able to like update on the

00:06:53,020 --> 00:06:57,039
fly and you know the short answer is

00:06:55,120 --> 00:06:59,200
that does work in some environments but

00:06:57,039 --> 00:07:00,400
it's not it's

00:06:59,200 --> 00:07:02,530
not always entirely clean and it's not

00:07:00,400 --> 00:07:03,820
supported in every environment so there

00:07:02,530 --> 00:07:05,260
can be some tricky interactions

00:07:03,820 --> 00:07:07,180
depending on like a hypervisor you're

00:07:05,260 --> 00:07:09,250
running on and with core OS one of our

00:07:07,180 --> 00:07:11,080
the ideas is to have this same operating

00:07:09,250 --> 00:07:12,400
system you can use across any different

00:07:11,080 --> 00:07:15,130
platform whether you're running in your

00:07:12,400 --> 00:07:16,810
own data center or in AWS and so for

00:07:15,130 --> 00:07:18,730
consistency across these environments

00:07:16,810 --> 00:07:21,130
and to be able to get into this new

00:07:18,730 --> 00:07:24,460
read-only file system we always apply a

00:07:21,130 --> 00:07:26,110
reboot so the server needs a reboot but

00:07:24,460 --> 00:07:27,610
it slides the applications running on it

00:07:26,110 --> 00:07:29,320
and you know ideally we want them to

00:07:27,610 --> 00:07:31,000
keep running so without any

00:07:29,320 --> 00:07:32,410
orchestration when the server reboots

00:07:31,000 --> 00:07:34,180
then we're just going to completely lose

00:07:32,410 --> 00:07:37,270
those applications while the servers

00:07:34,180 --> 00:07:40,060
while the servers out of service with

00:07:37,270 --> 00:07:41,650
orchestration you know in this case the

00:07:40,060 --> 00:07:43,390
updates been downloaded and server one

00:07:41,650 --> 00:07:46,630
realizes hey I need to apply this update

00:07:43,390 --> 00:07:48,810
I'm going to reboot it can the orchestra

00:07:46,630 --> 00:07:50,980
orchestrator can react to this and

00:07:48,810 --> 00:07:52,630
shuffle the apps around so it can move

00:07:50,980 --> 00:07:55,150
those applications to another server in

00:07:52,630 --> 00:07:56,650
the cluster and then while that server

00:07:55,150 --> 00:07:59,260
one is rebooting and applying the new

00:07:56,650 --> 00:08:01,660
update there's no loss in in in service

00:07:59,260 --> 00:08:03,610
there once the service comes server

00:08:01,660 --> 00:08:05,530
comes back then the orchestrator can if

00:08:03,610 --> 00:08:06,730
it once it can rebalance and you know in

00:08:05,530 --> 00:08:08,110
this case it's actually moved to

00:08:06,730 --> 00:08:09,790
different application back but just to

00:08:08,110 --> 00:08:12,730
make sure that there's the applications

00:08:09,790 --> 00:08:13,810
are distributed among the cluster so I

00:08:12,730 --> 00:08:15,910
was talking about sort of a magical

00:08:13,810 --> 00:08:17,710
orchestrator for us you know there's a

00:08:15,910 --> 00:08:20,770
few different options there some of the

00:08:17,710 --> 00:08:24,100
most popular being Mesa and communities

00:08:20,770 --> 00:08:26,470
but for us at core OS we may work mostly

00:08:24,100 --> 00:08:28,420
around qu benetti's and we think it's we

00:08:26,470 --> 00:08:30,430
think it's one of the best orchestrators

00:08:28,420 --> 00:08:32,620
out there and soku Bernie's is what

00:08:30,430 --> 00:08:35,290
provides that high availability to move

00:08:32,620 --> 00:08:39,340
the applications around the cluster to

00:08:35,290 --> 00:08:40,930
mitigate sort of down server downtime so

00:08:39,340 --> 00:08:42,220
again why are we working on these two

00:08:40,930 --> 00:08:44,530
technologies of course why I'm

00:08:42,220 --> 00:08:45,940
interested in them and it's all about so

00:08:44,530 --> 00:08:47,620
that we can provide these updates to the

00:08:45,940 --> 00:08:49,870
operating system and sort of drive

00:08:47,620 --> 00:08:52,780
forward security and application servers

00:08:49,870 --> 00:08:54,100
and then once we once we finished sort

00:08:52,780 --> 00:08:56,410
of think about that once we feel that's

00:08:54,100 --> 00:08:58,210
the sole problem at the server level or

00:08:56,410 --> 00:08:59,530
in parallel really will also start to

00:08:58,210 --> 00:09:02,050
work on that at the application level

00:08:59,530 --> 00:09:03,640
driving out providing seamless updates

00:09:02,050 --> 00:09:05,350
to applications and that's where the

00:09:03,640 --> 00:09:06,700
technology like qu benetti's really

00:09:05,350 --> 00:09:09,910
allows you to do that in a first-class

00:09:06,700 --> 00:09:11,710
way so that's sort of why we interested

00:09:09,910 --> 00:09:13,000
in these technologies more generally but

00:09:11,710 --> 00:09:16,540
why why specifically

00:09:13,000 --> 00:09:18,130
rocket and as a contain a runtime so to

00:09:16,540 --> 00:09:21,880
go over a bit of a history of the last

00:09:18,130 --> 00:09:24,760
couple of years back in 2014 core OS was

00:09:21,880 --> 00:09:26,590
about a year old the distribution and we

00:09:24,760 --> 00:09:29,020
shipped you know docker as the main

00:09:26,590 --> 00:09:30,700
container runtime and we had at the time

00:09:29,020 --> 00:09:31,870
you know the chorus some of the Kouros

00:09:30,700 --> 00:09:34,180
developers was some of the key

00:09:31,870 --> 00:09:37,540
maintained errs or top contributors to

00:09:34,180 --> 00:09:39,340
dhaka but you know at the time as

00:09:37,540 --> 00:09:41,410
containing runtime technology was

00:09:39,340 --> 00:09:42,820
becoming more and more popular you know

00:09:41,410 --> 00:09:44,170
we thought that there were some

00:09:42,820 --> 00:09:45,730
practices in the industry that weren't

00:09:44,170 --> 00:09:47,980
we didn't feel with their surly best

00:09:45,730 --> 00:09:49,960
practices and certainly as definitely as

00:09:47,980 --> 00:09:52,060
far as sort of security goes and then as

00:09:49,960 --> 00:09:53,920
far as integrating this technology with

00:09:52,060 --> 00:09:55,780
the operating system so some of the

00:09:53,920 --> 00:09:58,480
classic examples was that at the time

00:09:55,780 --> 00:10:00,640
you know in images weren't generally

00:09:58,480 --> 00:10:01,630
weren't weren't signed in any way and

00:10:00,640 --> 00:10:03,460
when they were distributed around the

00:10:01,630 --> 00:10:05,500
internet and we also didn't feel that

00:10:03,460 --> 00:10:07,750
the build the way the sort of de facto

00:10:05,500 --> 00:10:10,360
ways of building images were necessarily

00:10:07,750 --> 00:10:13,390
the most efficient or sort of secure and

00:10:10,360 --> 00:10:15,520
then we had trouble you know integrating

00:10:13,390 --> 00:10:17,920
this technology with things like system

00:10:15,520 --> 00:10:20,560
d which is systemd sort of forms the

00:10:17,920 --> 00:10:22,390
core of core OS because we were one of

00:10:20,560 --> 00:10:25,240
the earlier distributions to adopt

00:10:22,390 --> 00:10:26,380
system d as an init system and we try to

00:10:25,240 --> 00:10:28,270
integrate it with it as much as possible

00:10:26,380 --> 00:10:30,370
we think it's you know the future of

00:10:28,270 --> 00:10:31,960
linux distributions basically since it's

00:10:30,370 --> 00:10:34,180
now been adopted by every major

00:10:31,960 --> 00:10:35,589
distribution and so every tool that we

00:10:34,180 --> 00:10:37,950
integrate into course we want to be able

00:10:35,589 --> 00:10:39,850
to work really nicely with system d

00:10:37,950 --> 00:10:41,470
unfortunately there are a lot of a lot

00:10:39,850 --> 00:10:44,140
of sort of problems with doctors

00:10:41,470 --> 00:10:46,210
interaction with system d one of the

00:10:44,140 --> 00:10:50,860
classic ones is while i can talk about

00:10:46,210 --> 00:10:52,390
that a bit more detail later on so at

00:10:50,860 --> 00:10:53,740
the time since we felt that we weren't

00:10:52,390 --> 00:10:56,470
able to have these some of these

00:10:53,740 --> 00:10:58,839
concerns addressed upstream there were

00:10:56,470 --> 00:11:00,370
various you know issues that that the

00:10:58,839 --> 00:11:02,770
doctor developers didn't feel fit into

00:11:00,370 --> 00:11:05,430
the project we decided to create this

00:11:02,770 --> 00:11:07,990
new project rocket as an alternative

00:11:05,430 --> 00:11:09,730
with three kind of main drivers first

00:11:07,990 --> 00:11:11,680
was really just to you know create an

00:11:09,730 --> 00:11:13,450
alternative in the ecosystem and sort of

00:11:11,680 --> 00:11:14,770
drive innovation because we're big

00:11:13,450 --> 00:11:16,570
believers in open source you know

00:11:14,770 --> 00:11:18,550
innovation competition driving you know

00:11:16,570 --> 00:11:21,459
new features and pushing the software

00:11:18,550 --> 00:11:23,709
forward and we think that you know users

00:11:21,459 --> 00:11:25,209
should have alternatives and then one of

00:11:23,709 --> 00:11:26,830
the second big conversations we wanted

00:11:25,209 --> 00:11:29,290
to start was around secure

00:11:26,830 --> 00:11:30,970
early in composability so as I said some

00:11:29,290 --> 00:11:33,070
of these at the time the docket

00:11:30,970 --> 00:11:35,200
ecosystem we felt wasn't taking security

00:11:33,070 --> 00:11:36,460
very seriously and it's something we you

00:11:35,200 --> 00:11:38,410
know is very important to us since

00:11:36,460 --> 00:11:40,210
that's part of our mission and also

00:11:38,410 --> 00:11:41,740
composability in terms of being able to

00:11:40,210 --> 00:11:43,270
integrate container run times with

00:11:41,740 --> 00:11:45,250
different systems so with the operating

00:11:43,270 --> 00:11:48,850
system and with other with orchestration

00:11:45,250 --> 00:11:50,680
systems for example and then finally we

00:11:48,850 --> 00:11:52,960
wanted to spur this conversation around

00:11:50,680 --> 00:11:54,990
standards in the ecosystem we're big

00:11:52,960 --> 00:11:58,870
believers in open standards at Korres

00:11:54,990 --> 00:12:00,310
and the sort of interest there is that

00:11:58,870 --> 00:12:01,540
we want people to be able to build tools

00:12:00,310 --> 00:12:02,860
you know when you have a standard when

00:12:01,540 --> 00:12:04,420
you have stuff that's written down and

00:12:02,860 --> 00:12:05,740
people can go and build tools against

00:12:04,420 --> 00:12:07,510
them to integrate with them they don't

00:12:05,740 --> 00:12:09,640
need to buy into a particular set of

00:12:07,510 --> 00:12:14,320
tooling and you know not be sure what

00:12:09,640 --> 00:12:17,140
the future is so that's where our rocket

00:12:14,320 --> 00:12:18,880
came about and now sort of three line

00:12:17,140 --> 00:12:20,340
tag line of rocket is that it's you know

00:12:18,880 --> 00:12:23,170
it's a modern secure container and time

00:12:20,340 --> 00:12:25,360
and it's a it's also just a simple kind

00:12:23,170 --> 00:12:27,730
of composable tool and then finally it's

00:12:25,360 --> 00:12:28,810
an implementation of open standards I'm

00:12:27,730 --> 00:12:32,280
going to talk a little bit about these

00:12:28,810 --> 00:12:35,070
in kind of reverse order so as I said

00:12:32,280 --> 00:12:37,000
you know we wanted rocket to be

00:12:35,070 --> 00:12:38,080
implementation of open standards but at

00:12:37,000 --> 00:12:39,640
the time there weren't really open

00:12:38,080 --> 00:12:41,440
standards for water container is and

00:12:39,640 --> 00:12:42,730
they were different you know a lot of

00:12:41,440 --> 00:12:44,530
people would use container to talk about

00:12:42,730 --> 00:12:46,240
maybe an LX c container or maybe a

00:12:44,530 --> 00:12:47,890
docker container but it wasn't really

00:12:46,240 --> 00:12:50,050
written down what that meant it's sort

00:12:47,890 --> 00:12:52,270
of just a you know implementation

00:12:50,050 --> 00:12:53,680
dependent and it could mean or might be

00:12:52,270 --> 00:12:55,390
maybe I'm talking about some see groups

00:12:53,680 --> 00:12:57,700
and some namespaces on Linux or maybe

00:12:55,390 --> 00:13:00,040
I'm talking about a group of files and a

00:12:57,700 --> 00:13:01,090
tarball or different things like that

00:13:00,040 --> 00:13:04,210
maybe I'm just talking about at your

00:13:01,090 --> 00:13:05,380
root so the goal of the apps the project

00:13:04,210 --> 00:13:07,690
which we started at the same time as

00:13:05,380 --> 00:13:09,730
rocket is that we actually write down

00:13:07,690 --> 00:13:12,190
what exactly an application container is

00:13:09,730 --> 00:13:14,620
so it is a set of files you know in an

00:13:12,190 --> 00:13:16,240
in a tarball it is an execution

00:13:14,620 --> 00:13:18,850
environment which consists of this and

00:13:16,240 --> 00:13:20,770
this and this in a way that anyone can

00:13:18,850 --> 00:13:24,880
go out and build things to interoperate

00:13:20,770 --> 00:13:26,610
with with things that conform tapsee so

00:13:24,880 --> 00:13:29,350
there are kind of three main areas of

00:13:26,610 --> 00:13:31,600
the app see project or the app see spec

00:13:29,350 --> 00:13:33,940
the first as I said is the image format

00:13:31,600 --> 00:13:36,070
so that's just like literally bunch of

00:13:33,940 --> 00:13:38,260
files in a tarball you know all

00:13:36,070 --> 00:13:39,700
container runtimes and most package

00:13:38,260 --> 00:13:40,570
managers have pretty simple similar

00:13:39,700 --> 00:13:43,180
similar

00:13:40,570 --> 00:13:45,850
Diaz of what images are but we wanted to

00:13:43,180 --> 00:13:48,250
write that down and codify it so that we

00:13:45,850 --> 00:13:49,720
could make images you know more easily

00:13:48,250 --> 00:13:52,420
distributable around the internet in a

00:13:49,720 --> 00:13:54,340
secure way we one of the things we

00:13:52,420 --> 00:13:56,740
wanted to get away from was necessarily

00:13:54,340 --> 00:14:00,250
having kind of monolithic image

00:13:56,740 --> 00:14:01,900
discovery so we wanted to be able to for

00:14:00,250 --> 00:14:04,120
example for anyone to be able to host

00:14:01,900 --> 00:14:05,890
their own images and for other people to

00:14:04,120 --> 00:14:07,750
be able to find and discover them and

00:14:05,890 --> 00:14:10,270
download them securely in kind of an own

00:14:07,750 --> 00:14:12,250
way rather than having everyone having

00:14:10,270 --> 00:14:16,030
to run their own custom repository or

00:14:12,250 --> 00:14:17,520
things like that and then the second big

00:14:16,030 --> 00:14:19,750
part of the app see speck is around pods

00:14:17,520 --> 00:14:21,370
which is the sort of grouping of

00:14:19,750 --> 00:14:23,560
applications I'll talk a bit bit more

00:14:21,370 --> 00:14:25,240
about that in a sec and then finally the

00:14:23,560 --> 00:14:27,400
kind of nuts and bolts of like what it

00:14:25,240 --> 00:14:30,010
is to run a container so what see groups

00:14:27,400 --> 00:14:32,020
and namespaces you can expect what the

00:14:30,010 --> 00:14:33,970
execution environment looks like to the

00:14:32,020 --> 00:14:37,690
application so what it can expect when

00:14:33,970 --> 00:14:39,610
it's actually running in a container so

00:14:37,690 --> 00:14:40,990
pods as I said that's like the the

00:14:39,610 --> 00:14:43,030
second part of the spec and that's the

00:14:40,990 --> 00:14:46,180
fundamental execution unit so the idea

00:14:43,030 --> 00:14:48,220
here is that you know Google sort of

00:14:46,180 --> 00:14:50,290
painted or popularized this idea that

00:14:48,220 --> 00:14:52,360
you know it's very very common pattern

00:14:50,290 --> 00:14:54,790
to run multiple applications together in

00:14:52,360 --> 00:14:57,370
this shared context which they you know

00:14:54,790 --> 00:15:00,160
they found over there sort of 10-15

00:14:57,370 --> 00:15:01,540
years of running of running containers

00:15:00,160 --> 00:15:03,220
at scale or running applications at

00:15:01,540 --> 00:15:04,660
scale and their data centers they found

00:15:03,220 --> 00:15:06,370
that this pattern just kept reemerging

00:15:04,660 --> 00:15:07,990
where you might want to run like a

00:15:06,370 --> 00:15:09,310
database and then right next to the

00:15:07,990 --> 00:15:11,590
database you might want a little backup

00:15:09,310 --> 00:15:13,420
agent or something like that and you

00:15:11,590 --> 00:15:15,640
want them to share maybe some disk and

00:15:13,420 --> 00:15:17,080
memory and be sort of isolated from

00:15:15,640 --> 00:15:20,800
other things on the system but to be

00:15:17,080 --> 00:15:22,390
very tightly related together and the

00:15:20,800 --> 00:15:24,640
idea is that that's also becomes your

00:15:22,390 --> 00:15:26,170
core scheduling unit so when you're

00:15:24,640 --> 00:15:27,550
talking about scheduling things in a

00:15:26,170 --> 00:15:28,870
cluster somewhere you actually sched

00:15:27,550 --> 00:15:31,660
always going to be thinking about those

00:15:28,870 --> 00:15:33,250
things being scheduled together and that

00:15:31,660 --> 00:15:35,410
they share fate so if one of them dies

00:15:33,250 --> 00:15:38,320
the database dies then the backup worker

00:15:35,410 --> 00:15:39,940
dies alongside it and so in app see we

00:15:38,320 --> 00:15:42,010
made this the only execution primitive

00:15:39,940 --> 00:15:43,870
so instead of just thinking about

00:15:42,010 --> 00:15:46,480
executing applications one by one

00:15:43,870 --> 00:15:48,190
everything's in a pod so even as even

00:15:46,480 --> 00:15:51,010
just running a single application is in

00:15:48,190 --> 00:15:52,660
a single singleton pod and this

00:15:51,010 --> 00:15:54,650
definition is completely synonymous with

00:15:52,660 --> 00:15:56,820
ku benetti's pods basically

00:15:54,650 --> 00:15:59,250
in-app see we talked about it at quite a

00:15:56,820 --> 00:16:01,380
high level because we're the similar

00:15:59,250 --> 00:16:02,940
plantations across different different

00:16:01,380 --> 00:16:04,200
platforms or is in Coober Nettie's at

00:16:02,940 --> 00:16:05,880
the mount as of today the only

00:16:04,200 --> 00:16:07,650
implementation is on Linux so they talk

00:16:05,880 --> 00:16:09,510
about sort of Linux namespaces and see

00:16:07,650 --> 00:16:11,550
groups but in principle this can be

00:16:09,510 --> 00:16:12,870
applied across different platforms and

00:16:11,550 --> 00:16:15,000
we have implementation of ab c on

00:16:12,870 --> 00:16:16,320
freebsd for example which implements the

00:16:15,000 --> 00:16:21,060
pod using completely different

00:16:16,320 --> 00:16:22,560
technologies to to that on Linux so that

00:16:21,060 --> 00:16:24,270
was the the sort of first bit about

00:16:22,560 --> 00:16:27,930
rocket that it implements this open

00:16:24,270 --> 00:16:29,370
standard app see but that was it that

00:16:27,930 --> 00:16:31,260
was almost kind of two years ago when

00:16:29,370 --> 00:16:32,160
the apps you project came out and you

00:16:31,260 --> 00:16:33,690
know you might have heard a little bits

00:16:32,160 --> 00:16:35,910
and pieces about it since then but you

00:16:33,690 --> 00:16:36,900
know today it's not actually what we

00:16:35,910 --> 00:16:38,010
call one point oh and I'm going to

00:16:36,900 --> 00:16:39,570
explain a little bit about you know

00:16:38,010 --> 00:16:42,270
where that is and and and what's

00:16:39,570 --> 00:16:44,280
actually happening so jumping forward to

00:16:42,270 --> 00:16:46,830
now about a year and a half on from

00:16:44,280 --> 00:16:47,940
creating apps apps en rocket you know

00:16:46,830 --> 00:16:49,590
doctor and rocket are both considered

00:16:47,940 --> 00:16:51,930
like one point I o production-ready

00:16:49,590 --> 00:16:54,330
being actively used in production so as

00:16:51,930 --> 00:16:55,680
COO benetti's and then what's been

00:16:54,330 --> 00:16:57,090
happening with around all this sort of

00:16:55,680 --> 00:16:59,490
standard stuff that we tried to like

00:16:57,090 --> 00:17:00,660
kick off this discussion around well as

00:16:59,490 --> 00:17:04,020
I said apps he came out at the end of

00:17:00,660 --> 00:17:07,199
2014 at about six months later in jun

00:17:04,020 --> 00:17:10,620
2015 the linux foundation announced a

00:17:07,199 --> 00:17:11,760
new project or new foundation in the

00:17:10,620 --> 00:17:13,980
linux foundation called the open

00:17:11,760 --> 00:17:15,990
container initiative which was sort of

00:17:13,980 --> 00:17:19,980
spearheaded by Daka but chorus was also

00:17:15,990 --> 00:17:21,420
a part of that from the beginning and in

00:17:19,980 --> 00:17:23,130
principle the goal of the open container

00:17:21,420 --> 00:17:25,620
initiative was to standardize the stuff

00:17:23,130 --> 00:17:27,120
around containers most of the groups

00:17:25,620 --> 00:17:29,670
that you know join the initiative were

00:17:27,120 --> 00:17:31,320
hoping were hoping that it would

00:17:29,670 --> 00:17:33,270
standardize the container image format

00:17:31,320 --> 00:17:34,950
for example and the nice part about that

00:17:33,270 --> 00:17:36,570
is that then all these different you

00:17:34,950 --> 00:17:38,700
know providers you know Google and

00:17:36,570 --> 00:17:40,290
Amazon but also just open source open

00:17:38,700 --> 00:17:42,060
source implementations like chorus

00:17:40,290 --> 00:17:43,650
implementations darker implementations

00:17:42,060 --> 00:17:45,540
anyone's custom implementation could

00:17:43,650 --> 00:17:47,040
create their own you know registry to

00:17:45,540 --> 00:17:50,360
serve images and things like that and

00:17:47,040 --> 00:17:53,190
all agree on this common image format

00:17:50,360 --> 00:17:54,930
and then in a few months later in

00:17:53,190 --> 00:17:56,340
December 2015 another the links

00:17:54,930 --> 00:17:57,840
foundation created another foundation

00:17:56,340 --> 00:18:00,630
called the cloud native computing

00:17:57,840 --> 00:18:02,250
foundation which is a little bit less

00:18:00,630 --> 00:18:03,990
you know oriented directly around

00:18:02,250 --> 00:18:06,180
standards but the idea of clip the cloud

00:18:03,990 --> 00:18:07,920
native computing foundation CNC f is to

00:18:06,180 --> 00:18:10,140
sort of harmonize these different

00:18:07,920 --> 00:18:12,570
emerging technologies around containers

00:18:10,140 --> 00:18:14,040
and micro services so basically running

00:18:12,570 --> 00:18:16,980
apps in containers with using

00:18:14,040 --> 00:18:20,820
orchestrators and things like that and

00:18:16,980 --> 00:18:23,070
so to touch on cnc f as of a month or

00:18:20,820 --> 00:18:25,890
two ago kuber Nettie's for example has

00:18:23,070 --> 00:18:27,690
donated to the cnc f so it's now a cnc f

00:18:25,890 --> 00:18:30,210
project and we hope we're hopeful that

00:18:27,690 --> 00:18:31,410
some other software in that in the

00:18:30,210 --> 00:18:35,370
similar space is also going to become

00:18:31,410 --> 00:18:37,140
part of the cnc of but setting back to

00:18:35,370 --> 00:18:38,730
OC I since as I said this was a new

00:18:37,140 --> 00:18:42,570
project that was ostensibly around

00:18:38,730 --> 00:18:43,920
creating this image format you might be

00:18:42,570 --> 00:18:47,040
asking well then why does app cecil

00:18:43,920 --> 00:18:48,930
exist to be honest we didn't really

00:18:47,040 --> 00:18:50,970
don't really want it to we had wanted it

00:18:48,930 --> 00:18:52,590
to essentially to merge the two projects

00:18:50,970 --> 00:18:54,090
and for apps you to become part of OC I

00:18:52,590 --> 00:18:56,280
because we don't have any particular

00:18:54,090 --> 00:18:57,690
attachment to you know ab c in itself we

00:18:56,280 --> 00:18:59,640
just want there to be an image format

00:18:57,690 --> 00:19:01,290
that everyone can agree on but

00:18:59,640 --> 00:19:04,050
unfortunately it sort of quite quickly

00:19:01,290 --> 00:19:05,520
emerged that the main creators the OC i

00:19:04,050 --> 00:19:08,130
were only interested in standardizing

00:19:05,520 --> 00:19:10,230
just a little limited part the runtime

00:19:08,130 --> 00:19:11,880
format so i talked about how apps he has

00:19:10,230 --> 00:19:14,550
these three areas like the image format

00:19:11,880 --> 00:19:16,770
pods and then the runtime like the

00:19:14,550 --> 00:19:18,660
runtime environment and that runtime

00:19:16,770 --> 00:19:20,490
environment was the only bit that the OC

00:19:18,660 --> 00:19:22,380
i was initially interested in

00:19:20,490 --> 00:19:24,030
concentrating on to us that doesn't

00:19:22,380 --> 00:19:25,290
really provide much value because sort

00:19:24,030 --> 00:19:28,350
of a very low level implementation

00:19:25,290 --> 00:19:30,450
detail you know as a user as a developer

00:19:28,350 --> 00:19:32,430
as an administrator you probably don't

00:19:30,450 --> 00:19:35,160
care that much about the internals of

00:19:32,430 --> 00:19:37,050
the execution you you're more interest

00:19:35,160 --> 00:19:38,010
probably more interested in like the

00:19:37,050 --> 00:19:39,450
image format so when you're talking

00:19:38,010 --> 00:19:41,400
about building your software and

00:19:39,450 --> 00:19:42,840
deploying an image and hosting it

00:19:41,400 --> 00:19:45,720
somewhere and then transmitting it

00:19:42,840 --> 00:19:47,700
securely and things like that so that's

00:19:45,720 --> 00:19:49,620
why you know app see kind of continued

00:19:47,700 --> 00:19:52,320
to exist continue to have a have a place

00:19:49,620 --> 00:19:54,150
in the world but fortunately as of a

00:19:52,320 --> 00:19:57,090
month or two ago after a lot of

00:19:54,150 --> 00:19:58,290
politicking the oci has announced now

00:19:57,090 --> 00:20:01,890
announced that they will creating an

00:19:58,290 --> 00:20:03,330
image format alongside the existing the

00:20:01,890 --> 00:20:05,550
runtime format that they've been working

00:20:03,330 --> 00:20:07,950
on slowly over the last sort of last

00:20:05,550 --> 00:20:09,570
year us or last nine months or so and

00:20:07,950 --> 00:20:11,760
now finally in this new image spec

00:20:09,570 --> 00:20:13,320
project we are hoping to you know emerge

00:20:11,760 --> 00:20:16,590
in all of the kind of lessons that we

00:20:13,320 --> 00:20:18,360
learned developing apps e and take all

00:20:16,590 --> 00:20:20,850
the lessons from the latest docker image

00:20:18,360 --> 00:20:21,740
format and sort of merge them into one

00:20:20,850 --> 00:20:23,510
single image

00:20:21,740 --> 00:20:25,400
that you know all container runtimes can

00:20:23,510 --> 00:20:26,600
hopefully agree on and we can start to

00:20:25,400 --> 00:20:30,679
put into things like the Ku benetti's

00:20:26,600 --> 00:20:32,210
API so yeah as I mentioned sort of the

00:20:30,679 --> 00:20:34,370
latest stalker I can talk it a little

00:20:32,210 --> 00:20:35,630
bit show you what that looks like oh and

00:20:34,370 --> 00:20:37,100
to give you an idea of the maintain is

00:20:35,630 --> 00:20:38,840
of this new format it's a pretty

00:20:37,100 --> 00:20:40,670
interesting representation of you know

00:20:38,840 --> 00:20:43,550
some some of the bigger players in the

00:20:40,670 --> 00:20:45,080
industry but also a few consists of a

00:20:43,550 --> 00:20:46,340
couple of maintain a few maintain is

00:20:45,080 --> 00:20:48,350
from the app see spec as well as

00:20:46,340 --> 00:20:49,790
obviously representation from dhaka so

00:20:48,350 --> 00:20:51,559
we're really hopeful that this will be

00:20:49,790 --> 00:20:55,190
finally be the opportunity for us to all

00:20:51,559 --> 00:20:57,110
agree on something and to give you an

00:20:55,190 --> 00:21:00,590
idea of the what these different formats

00:20:57,110 --> 00:21:02,059
formats offer so as i said we saw things

00:21:00,590 --> 00:21:04,010
started with some of the dakka format

00:21:02,059 --> 00:21:06,590
being kind of the de facto standard but

00:21:04,010 --> 00:21:07,910
it wasn't written down anywhere and i

00:21:06,590 --> 00:21:09,590
had a few things we thought with

00:21:07,910 --> 00:21:12,230
shortcomings so that's why we what

00:21:09,590 --> 00:21:14,300
prompted us to create app see subsequent

00:21:12,230 --> 00:21:16,309
to app see doctor actually put in a lot

00:21:14,300 --> 00:21:18,710
of effort to creating a next-generation

00:21:16,309 --> 00:21:20,090
image format that ended up looking quite

00:21:18,710 --> 00:21:22,490
similar or implementing a lot of the

00:21:20,090 --> 00:21:25,400
things that we had needed and so we

00:21:22,490 --> 00:21:27,110
decided as we decided to actually to

00:21:25,400 --> 00:21:28,730
kind of in the interests of harmonizing

00:21:27,110 --> 00:21:30,740
and moving forward we decided that the

00:21:28,730 --> 00:21:32,960
oci next-generation image format will be

00:21:30,740 --> 00:21:34,610
based on the dock of e to format i'm

00:21:32,960 --> 00:21:36,140
still going to add some concepts from

00:21:34,610 --> 00:21:40,130
app see that hadn't quite made it into

00:21:36,140 --> 00:21:41,480
the doctor to format yet and then the

00:21:40,130 --> 00:21:44,090
idea is to have backwards compatibility

00:21:41,480 --> 00:21:45,710
so that we can you know move forward

00:21:44,090 --> 00:21:47,360
with this new image format with all the

00:21:45,710 --> 00:21:49,940
features that we need but keep providing

00:21:47,360 --> 00:21:53,240
service continually of service to end

00:21:49,940 --> 00:21:54,500
users so you might be wondering why the

00:21:53,240 --> 00:21:55,850
hell you're talking about this stuff

00:21:54,500 --> 00:21:58,150
what's interesting about kadena

00:21:55,850 --> 00:22:00,530
standards and honestly you probably

00:21:58,150 --> 00:22:01,640
shouldn't care too much there's just

00:22:00,530 --> 00:22:03,950
something that i've been thinking about

00:22:01,640 --> 00:22:06,380
and working on a lot but you know the

00:22:03,950 --> 00:22:07,910
goal here is that you know things should

00:22:06,380 --> 00:22:09,170
just work for you but you should be able

00:22:07,910 --> 00:22:12,110
to more importantly she'll be able to

00:22:09,170 --> 00:22:13,640
use these different tools and to you

00:22:12,110 --> 00:22:15,980
know to run images to run applications

00:22:13,640 --> 00:22:18,290
but they should just work and it should

00:22:15,980 --> 00:22:19,910
work in a secure way in a consistent way

00:22:18,290 --> 00:22:21,440
so you should be able to use different

00:22:19,910 --> 00:22:23,179
container runtimes to reference the same

00:22:21,440 --> 00:22:24,710
kind of image and have kind of

00:22:23,179 --> 00:22:28,309
predictable results that's really our

00:22:24,710 --> 00:22:30,650
goal here and for administrators you

00:22:28,309 --> 00:22:32,360
know since we aren't really trying to

00:22:30,650 --> 00:22:34,250
push having these things like image

00:22:32,360 --> 00:22:35,040
signing and potentially image encryption

00:22:34,250 --> 00:22:38,190
kind of built

00:22:35,040 --> 00:22:38,970
to the core spec we want that to be that

00:22:38,190 --> 00:22:40,350
should be more appealing to

00:22:38,970 --> 00:22:42,690
administrators looking to deploy a

00:22:40,350 --> 00:22:44,040
container the runtimes more securely and

00:22:42,690 --> 00:22:45,750
also but allowing that having that

00:22:44,040 --> 00:22:47,070
standard means you can you know mix and

00:22:45,750 --> 00:22:49,080
match tools you don't need to buy into

00:22:47,070 --> 00:22:50,730
an entire stack you can potentially

00:22:49,080 --> 00:22:56,460
write your own tools or use different

00:22:50,730 --> 00:22:57,540
bits and pieces from the ecosystem so

00:22:56,460 --> 00:22:58,800
I'm going to that was that was a bit

00:22:57,540 --> 00:23:00,990
about standards kind of getting up to

00:22:58,800 --> 00:23:01,920
date on what's happening there and then

00:23:00,990 --> 00:23:06,330
I want to talk a bit about the

00:23:01,920 --> 00:23:07,890
architecture of rocket itself so rocket

00:23:06,330 --> 00:23:09,180
is as I said it's sort of a simple

00:23:07,890 --> 00:23:12,870
composable tool so it's basically just

00:23:09,180 --> 00:23:14,940
to command line tool rkt and the key

00:23:12,870 --> 00:23:17,100
architectural you know difference here

00:23:14,940 --> 00:23:18,750
at the time from from dhaka was that

00:23:17,100 --> 00:23:22,260
there's no central demon through which

00:23:18,750 --> 00:23:24,000
all of your containers eggs you turd and

00:23:22,260 --> 00:23:25,770
there's no api it's just the command

00:23:24,000 --> 00:23:27,870
line interface there actually is an API

00:23:25,770 --> 00:23:30,150
which is quite new but it's an optional

00:23:27,870 --> 00:23:32,610
bottle rocket and I'll talk about what

00:23:30,150 --> 00:23:35,190
that's for and then since every pot

00:23:32,610 --> 00:23:36,900
execute in a self-contained way you you

00:23:35,190 --> 00:23:38,280
get this nice effect of being able to

00:23:36,900 --> 00:23:40,740
inherit the environment from whether

00:23:38,280 --> 00:23:42,510
you're executed so as an example if you

00:23:40,740 --> 00:23:43,920
do a rocket run command just you know

00:23:42,510 --> 00:23:45,660
from whichever context that's invoked

00:23:43,920 --> 00:23:48,030
from if you just run at a command line

00:23:45,660 --> 00:23:49,500
or from systemd or you know for a

00:23:48,030 --> 00:23:52,050
purposes today if it's invoke from the

00:23:49,500 --> 00:23:54,000
couplet it directly inherits whatever

00:23:52,050 --> 00:23:55,740
parameters of apply from that context

00:23:54,000 --> 00:23:58,140
and that gets passed on to the

00:23:55,740 --> 00:23:59,460
applications so for example any you know

00:23:58,140 --> 00:24:01,050
resource constraints or whatever you

00:23:59,460 --> 00:24:04,740
apply to the rocket process will apply

00:24:01,050 --> 00:24:07,170
to the applications as well so

00:24:04,740 --> 00:24:09,120
internally rockets execution is divided

00:24:07,170 --> 00:24:12,150
into into three different stages stages

00:24:09,120 --> 00:24:14,250
0 stage 1 stage 2 and one of these

00:24:12,150 --> 00:24:16,560
stages stage one is swappable and the

00:24:14,250 --> 00:24:17,790
point of that is that we think you know

00:24:16,560 --> 00:24:19,350
different container two containers

00:24:17,790 --> 00:24:21,630
technologies since they're so modern and

00:24:19,350 --> 00:24:23,400
still a very rapidly evolving area that

00:24:21,630 --> 00:24:25,530
you can new kind of containment

00:24:23,400 --> 00:24:27,210
technologies are going to emerge that we

00:24:25,530 --> 00:24:28,890
can take advantage of and we want to be

00:24:27,210 --> 00:24:30,510
able to swap them into rocket and use

00:24:28,890 --> 00:24:32,640
them you know too baby more securely

00:24:30,510 --> 00:24:36,780
contain things but have the same user

00:24:32,640 --> 00:24:37,950
experience to end-users and so since we

00:24:36,780 --> 00:24:41,220
define I'll show you what that looks

00:24:37,950 --> 00:24:42,720
like in a minute so as I mentioned the

00:24:41,220 --> 00:24:44,220
the fundamental execution unit is always

00:24:42,720 --> 00:24:45,750
a pod so actually when it's a

00:24:44,220 --> 00:24:48,330
applications here rockets really just

00:24:45,750 --> 00:24:48,960
running a pod and then to break that

00:24:48,330 --> 00:24:51,450
down into the

00:24:48,960 --> 00:24:53,309
different stages this is sort of where

00:24:51,450 --> 00:24:55,679
all the stages suit so stage zero is

00:24:53,309 --> 00:24:58,200
that command line interface to end users

00:24:55,679 --> 00:24:59,940
and so that that always stays the same

00:24:58,200 --> 00:25:01,950
so that defines what users can expect

00:24:59,940 --> 00:25:03,570
and then the part is kind of the stage

00:25:01,950 --> 00:25:05,070
one execution environment and that's

00:25:03,570 --> 00:25:06,870
what you think of as your container and

00:25:05,070 --> 00:25:08,640
then within the pod you know run your

00:25:06,870 --> 00:25:13,289
actual applications that you develop new

00:25:08,640 --> 00:25:15,000
packages images so stage zero as I said

00:25:13,289 --> 00:25:17,130
you know its command line interface does

00:25:15,000 --> 00:25:18,960
all the sort of basic things you would

00:25:17,130 --> 00:25:20,700
expect to contain a runtime to do like

00:25:18,960 --> 00:25:22,860
you can fetch images discover them over

00:25:20,700 --> 00:25:24,899
the Internet sets up the file system on

00:25:22,860 --> 00:25:26,700
dis kick and list the images that you

00:25:24,899 --> 00:25:30,330
have in your local store it can garbage

00:25:26,700 --> 00:25:31,620
collect old pods things like that stage

00:25:30,330 --> 00:25:33,659
1 is where all the interesting stuff

00:25:31,620 --> 00:25:36,750
happens so that's where the pod gets

00:25:33,659 --> 00:25:37,890
executed and as I said it's swappable so

00:25:36,750 --> 00:25:39,480
we have a you know default

00:25:37,890 --> 00:25:41,250
implementation today that is based

00:25:39,480 --> 00:25:43,470
around classic Linux containers see

00:25:41,250 --> 00:25:46,470
groups and namespaces and to do that we

00:25:43,470 --> 00:25:48,539
actually just use system dns born and

00:25:46,470 --> 00:25:50,779
then we also have a first-class

00:25:48,539 --> 00:25:52,860
implementation that's based around kvm

00:25:50,779 --> 00:25:56,700
contributed by the Intel folks at Intel

00:25:52,860 --> 00:25:59,640
and so we use the l kvm lk vm which is a

00:25:56,700 --> 00:26:01,649
user space virtualization tool that

00:25:59,640 --> 00:26:03,299
allows you that spins up a vm very very

00:26:01,649 --> 00:26:05,370
quickly and allows you to have your pot

00:26:03,299 --> 00:26:07,549
executing in that vm so you get the

00:26:05,370 --> 00:26:10,049
advantage of you know hardware isolation

00:26:07,549 --> 00:26:12,690
hardware extensions to isolate that pod

00:26:10,049 --> 00:26:13,919
from others on the system and then we

00:26:12,690 --> 00:26:15,659
also have a couple of proposals for

00:26:13,919 --> 00:26:17,760
alternative engines like for example an

00:26:15,659 --> 00:26:20,580
ex I've one would mean that rocket pods

00:26:17,760 --> 00:26:22,620
could execute on OSX and that actually

00:26:20,580 --> 00:26:24,330
shouldn't be too much work necessarily

00:26:22,620 --> 00:26:25,649
it's just we don't have any rocket

00:26:24,330 --> 00:26:27,570
developers who work on OS X at the

00:26:25,649 --> 00:26:29,029
moment and then there's also an

00:26:27,570 --> 00:26:31,620
interesting one around unk which is a

00:26:29,029 --> 00:26:32,789
written in go and it's a the idea is to

00:26:31,620 --> 00:26:34,649
create control the unprivileged

00:26:32,789 --> 00:26:36,570
containers so you don't need to be route

00:26:34,649 --> 00:26:41,340
since classically on Linux you need root

00:26:36,570 --> 00:26:42,750
to run containers and then the final

00:26:41,340 --> 00:26:44,750
stage stage 2 that's just your

00:26:42,750 --> 00:26:46,710
application executing inside the pod so

00:26:44,750 --> 00:26:49,620
that's when we talked about what the

00:26:46,710 --> 00:26:51,210
runtime environment is it's just what

00:26:49,620 --> 00:26:52,980
your app can expect to see so your app

00:26:51,210 --> 00:26:54,929
can expect to see its file system you

00:26:52,980 --> 00:26:56,669
know its image and it gets back to have

00:26:54,929 --> 00:26:59,490
access to may be shared volumes that

00:26:56,669 --> 00:27:01,080
you've mounted into the pod and to share

00:26:59,490 --> 00:27:02,400
different namespaces with the other apps

00:27:01,080 --> 00:27:08,670
in the pod and

00:27:02,400 --> 00:27:09,930
networking for example missing slide to

00:27:08,670 --> 00:27:12,900
some of the things that are quite new

00:27:09,930 --> 00:27:14,370
with rocket there's one of the one of

00:27:12,900 --> 00:27:15,960
the one of the features that we added in

00:27:14,370 --> 00:27:18,180
the last few months is called TPM

00:27:15,960 --> 00:27:19,620
measurement so the TPM the trusted

00:27:18,180 --> 00:27:21,150
platform module for any of you don't

00:27:19,620 --> 00:27:24,660
know it's this it's a physical chip on

00:27:21,150 --> 00:27:26,370
most modern until motherboards that you

00:27:24,660 --> 00:27:29,190
know has a set of cryptographic keys in

00:27:26,370 --> 00:27:30,390
a processor that performs some simple

00:27:29,190 --> 00:27:33,630
kind of cryptographic measurements and

00:27:30,390 --> 00:27:36,900
the idea is that it's done what's called

00:27:33,630 --> 00:27:39,030
in TPM verbiage is to measure the system

00:27:36,900 --> 00:27:41,640
state so the idea is that you can when

00:27:39,030 --> 00:27:43,290
code is executing on the cpu you can the

00:27:41,640 --> 00:27:44,910
TPM what kind of snapshot what code is

00:27:43,290 --> 00:27:47,430
being loaded and then it will write that

00:27:44,910 --> 00:27:49,680
into its little log so you can kind of

00:27:47,430 --> 00:27:51,960
measure the whole process of what's

00:27:49,680 --> 00:27:54,240
being executed on the system so starkly

00:27:51,960 --> 00:27:56,370
this is only possible with basically

00:27:54,240 --> 00:27:58,440
with Microsoft servers but one of the

00:27:56,370 --> 00:28:00,540
developers at core OS added support to

00:27:58,440 --> 00:28:03,840
grub which is the bootloader that we use

00:28:00,540 --> 00:28:05,490
and most Linux distributions use and so

00:28:03,840 --> 00:28:07,650
now you can actually verify the the boot

00:28:05,490 --> 00:28:10,880
process the linux boot process using

00:28:07,650 --> 00:28:13,380
this trusted module on the motherboard

00:28:10,880 --> 00:28:15,150
we also recently added support to rocket

00:28:13,380 --> 00:28:17,940
so that you get this sort of train of

00:28:15,150 --> 00:28:20,130
chess from the boot to the operating

00:28:17,940 --> 00:28:21,840
system and up to like what's running on

00:28:20,130 --> 00:28:23,820
the system so you know when you actually

00:28:21,840 --> 00:28:27,360
boot the when you actually physically

00:28:23,820 --> 00:28:28,980
power on the machine this you know the

00:28:27,360 --> 00:28:30,120
TPM will actually measure the firmware

00:28:28,980 --> 00:28:32,250
that gets loaded and then it will

00:28:30,120 --> 00:28:33,570
measure the the the bootloader and

00:28:32,250 --> 00:28:35,190
measure the you know the operating

00:28:33,570 --> 00:28:36,570
system that boots up and then now that

00:28:35,190 --> 00:28:38,760
with the support and rocket it will

00:28:36,570 --> 00:28:40,350
actually measure every single container

00:28:38,760 --> 00:28:42,300
that you launched with rocket so it'll

00:28:40,350 --> 00:28:43,770
actually right into its audit log you

00:28:42,300 --> 00:28:46,260
know here's what was actually executed

00:28:43,770 --> 00:28:48,210
on the system and this is you know

00:28:46,260 --> 00:28:49,740
nowadays with many people running in the

00:28:48,210 --> 00:28:51,420
cloud this isn't necessarily so

00:28:49,740 --> 00:28:53,160
important to them but we've had a lot of

00:28:51,420 --> 00:28:55,560
users who run you know on their physical

00:28:53,160 --> 00:28:56,850
hardware and their own data centers and

00:28:55,560 --> 00:28:59,760
this is a nice additional kind of

00:28:56,850 --> 00:29:03,720
security mechanism to be able to trust

00:28:59,760 --> 00:29:04,830
what's executing on your hardware the

00:29:03,720 --> 00:29:06,720
other thing that was added to rocket

00:29:04,830 --> 00:29:08,070
recently was the API service so I

00:29:06,720 --> 00:29:10,380
mentioned that you know we don't have a

00:29:08,070 --> 00:29:11,520
mandatory API service in rocket you can

00:29:10,380 --> 00:29:13,560
run it without it but there's an

00:29:11,520 --> 00:29:15,410
optional demon that can you can start on

00:29:13,560 --> 00:29:17,060
a system that has rocket and it

00:29:15,410 --> 00:29:18,560
supposes information about what's

00:29:17,060 --> 00:29:21,260
running on the system in a much more

00:29:18,560 --> 00:29:23,150
kind of efficient way so you know

00:29:21,260 --> 00:29:24,440
information around pods and images that

00:29:23,150 --> 00:29:26,150
are on the system instead of having to

00:29:24,440 --> 00:29:27,650
run the you know rocket command to do

00:29:26,150 --> 00:29:29,650
that you can just talk to this simple

00:29:27,650 --> 00:29:32,660
grp sea demon and get that information

00:29:29,650 --> 00:29:33,770
the other nice thing about this excuse

00:29:32,660 --> 00:29:34,970
me is that we can run it as an

00:29:33,770 --> 00:29:36,980
unprivileged user doesn't need to be

00:29:34,970 --> 00:29:38,840
root so we don't need to have any

00:29:36,980 --> 00:29:41,750
long-running root demons on the system

00:29:38,840 --> 00:29:43,970
and and we do that basically through

00:29:41,750 --> 00:29:45,620
just pretty much just through leveraging

00:29:43,970 --> 00:29:48,170
different sort of unix permissions on

00:29:45,620 --> 00:29:51,740
the file system to control access to 22

00:29:48,170 --> 00:29:52,850
stuff and that's that's one of the key

00:29:51,740 --> 00:29:54,200
parts of our integration with Cuba

00:29:52,850 --> 00:29:56,810
Nettie's which I'll talk about in a

00:29:54,200 --> 00:29:59,990
second so again these are the sort of

00:29:56,810 --> 00:30:01,190
the you know why rocket we think you

00:29:59,990 --> 00:30:03,470
should use rocket because it's you know

00:30:01,190 --> 00:30:04,700
secure security minded we're always

00:30:03,470 --> 00:30:08,150
trying to integrate new security

00:30:04,700 --> 00:30:10,010
features and have things secure by

00:30:08,150 --> 00:30:12,230
default so we have try to have all

00:30:10,010 --> 00:30:13,580
secure things as on by default if

00:30:12,230 --> 00:30:15,470
possible and then opt out rather than

00:30:13,580 --> 00:30:18,260
opt-in so that people can take advantage

00:30:15,470 --> 00:30:20,480
of them by default also because it's you

00:30:18,260 --> 00:30:23,120
know we have a very strong emphasis on

00:30:20,480 --> 00:30:24,710
standards so they said we you know any

00:30:23,120 --> 00:30:27,350
standard that emerges we're going to try

00:30:24,710 --> 00:30:29,690
and support and work actively to develop

00:30:27,350 --> 00:30:30,980
good standards for users and finally

00:30:29,690 --> 00:30:32,120
that it's composable so it can integrate

00:30:30,980 --> 00:30:34,760
very nicely with your different

00:30:32,120 --> 00:30:36,350
different tools and one of those tools

00:30:34,760 --> 00:30:39,520
is gubin it is so I want to talk about

00:30:36,350 --> 00:30:41,870
how rocket and cube entities integrate

00:30:39,520 --> 00:30:43,880
there's actually three kind of key ways

00:30:41,870 --> 00:30:46,430
that we use the COO benetti's and rocket

00:30:43,880 --> 00:30:48,590
go together the first of them which I'll

00:30:46,430 --> 00:30:50,420
probably mostly talk about is rocket

00:30:48,590 --> 00:30:52,550
Nettie's and that's using google it

00:30:50,420 --> 00:30:54,440
that's using the rocket inside of Coogan

00:30:52,550 --> 00:30:55,940
eighties itself and then the second way

00:30:54,440 --> 00:30:57,950
is sine of the flip side is actually

00:30:55,940 --> 00:30:59,330
using rocket to run google it is so

00:30:57,950 --> 00:31:00,560
using rocket run coo benetti's and then

00:30:59,330 --> 00:31:02,900
you can use rocket inside couv entities

00:31:00,560 --> 00:31:04,340
to run different applications and then

00:31:02,900 --> 00:31:06,230
finally there's been a lot of overlap

00:31:04,340 --> 00:31:07,610
between the rocket networking and the

00:31:06,230 --> 00:31:12,280
Cuban Air these networking so I'll talk

00:31:07,610 --> 00:31:14,360
a bit about what's happening there so

00:31:12,280 --> 00:31:15,920
hopefully you're all familiar with

00:31:14,360 --> 00:31:18,740
somewhat familiar with Cuban eighties

00:31:15,920 --> 00:31:19,970
but if not if you're not familiar with

00:31:18,740 --> 00:31:21,590
what the cool it is basically it's an

00:31:19,970 --> 00:31:23,150
agent that lives on every node and the

00:31:21,590 --> 00:31:24,590
COO vanadis cluster and that's what's

00:31:23,150 --> 00:31:26,990
responsible for actually running your

00:31:24,590 --> 00:31:28,460
applications running your containers and

00:31:26,990 --> 00:31:29,299
the way that that happens is that agent

00:31:28,460 --> 00:31:31,039
delegates out

00:31:29,299 --> 00:31:32,779
will contain a runtime so it's like a

00:31:31,039 --> 00:31:34,249
fault it to it it actually just talks to

00:31:32,779 --> 00:31:35,749
darker and darker starts out the

00:31:34,249 --> 00:31:38,149
applications the couplet itself doesn't

00:31:35,749 --> 00:31:39,679
doesn't run doesn't know you know it's

00:31:38,149 --> 00:31:41,119
not a container runtime it doesn't know

00:31:39,679 --> 00:31:43,190
how to start a container it just knows

00:31:41,119 --> 00:31:44,899
how to talk to a runtime and the way

00:31:43,190 --> 00:31:47,629
that's implemented today is that there's

00:31:44,899 --> 00:31:51,049
an interface I go interface in the in

00:31:47,629 --> 00:31:53,929
the actual couplet code called container

00:31:51,049 --> 00:31:55,489
runtime interface and it has the

00:31:53,929 --> 00:31:57,110
different sets of methods like for

00:31:55,489 --> 00:31:59,330
example the sink pod method the get pod

00:31:57,110 --> 00:32:00,529
method the kill pod method and then for

00:31:59,330 --> 00:32:02,389
each run time that you want you just

00:32:00,529 --> 00:32:04,220
need to implement in theory implement

00:32:02,389 --> 00:32:06,590
that method so for example for by

00:32:04,220 --> 00:32:08,600
default we would have a sink pod method

00:32:06,590 --> 00:32:11,539
that talks for daca and knows how to

00:32:08,600 --> 00:32:13,190
create a pod using docker so in theory

00:32:11,539 --> 00:32:14,419
it's quite easy to you know for anyone

00:32:13,190 --> 00:32:15,619
to implement this interface but in

00:32:14,419 --> 00:32:18,440
practice there's a lot of different

00:32:15,619 --> 00:32:20,330
assumptions in the code about docker so

00:32:18,440 --> 00:32:22,279
it's not a very clean interface and

00:32:20,330 --> 00:32:23,299
there are a lot of as we you know added

00:32:22,279 --> 00:32:24,799
support for rocket there are a lot of

00:32:23,299 --> 00:32:28,669
problems we came across where we need to

00:32:24,799 --> 00:32:29,659
refactor a lot of the couplet code to

00:32:28,669 --> 00:32:32,090
give you an idea of what that looks like

00:32:29,659 --> 00:32:33,950
architectural II like on the system so

00:32:32,090 --> 00:32:35,600
by default you know you have the couplet

00:32:33,950 --> 00:32:37,669
this is imagine that these are just kind

00:32:35,600 --> 00:32:39,529
of processes on the system and you have

00:32:37,669 --> 00:32:41,450
the couplet running somewhere in the

00:32:39,529 --> 00:32:43,070
system and then when it needs to start

00:32:41,450 --> 00:32:44,629
again do any of these pod interactions

00:32:43,070 --> 00:32:46,369
it talks to the doc a demon and it does

00:32:44,629 --> 00:32:48,409
that over the docker the docket API that

00:32:46,369 --> 00:32:51,080
they expose and then the doctor its dr.

00:32:48,409 --> 00:32:54,409
demon itself starts up individual

00:32:51,080 --> 00:32:56,419
containers so some of the problems with

00:32:54,409 --> 00:32:57,950
this model that you know motivated us to

00:32:56,419 --> 00:33:01,489
work on rocket and to integrate rocket

00:32:57,950 --> 00:33:04,039
and good but it is the first problem is

00:33:01,489 --> 00:33:05,269
that docker doesn't understand pods so

00:33:04,039 --> 00:33:07,879
it just understands individual

00:33:05,269 --> 00:33:09,559
containers and that's a that can be a

00:33:07,879 --> 00:33:10,820
problem because you know the couplet

00:33:09,559 --> 00:33:12,440
then needs to maintain a lot of

00:33:10,820 --> 00:33:14,899
information around you know which

00:33:12,440 --> 00:33:16,730
containers belong to a pod since dr.

00:33:14,899 --> 00:33:18,859
just considers it like a flat pool of

00:33:16,730 --> 00:33:20,359
different containers and then also the

00:33:18,859 --> 00:33:22,580
couplet needs to maintain a special

00:33:20,359 --> 00:33:24,950
container which they call a sleep pause

00:33:22,580 --> 00:33:26,929
container or an infra container to hold

00:33:24,950 --> 00:33:28,309
all the namespaces for the other

00:33:26,929 --> 00:33:29,869
containers in the pod so they basically

00:33:28,309 --> 00:33:31,759
just have a container that sits there

00:33:29,869 --> 00:33:33,529
just running sleep basically

00:33:31,759 --> 00:33:34,999
indefinitely and then they need to join

00:33:33,529 --> 00:33:36,679
the other containers to it it's a bit of

00:33:34,999 --> 00:33:40,460
a sort of patchwork way to assemble a

00:33:36,679 --> 00:33:42,769
pod another the second kind of problem

00:33:40,460 --> 00:33:43,190
is that the daka demon can be a single

00:33:42,769 --> 00:33:44,690
point of fair

00:33:43,190 --> 00:33:46,520
in the sense that if the daka diamond

00:33:44,690 --> 00:33:50,030
eyes in the scenario then it takes down

00:33:46,520 --> 00:33:52,520
all the containers with it and then

00:33:50,030 --> 00:33:54,500
finally we you know had problems with

00:33:52,520 --> 00:33:55,580
docket interacting the system d this

00:33:54,500 --> 00:33:57,770
actually initially wasn't really a

00:33:55,580 --> 00:33:58,850
problem for ku benetti's because they

00:33:57,770 --> 00:34:00,290
did most of their development on a

00:33:58,850 --> 00:34:02,120
version of debian that didn't have

00:34:00,290 --> 00:34:03,590
system d yet but now as you know all the

00:34:02,120 --> 00:34:05,420
distributions are moving to system d

00:34:03,590 --> 00:34:07,130
this is going to be more and more of a

00:34:05,420 --> 00:34:09,560
problem in future and was a problem for

00:34:07,130 --> 00:34:13,880
us running system running coogan ideas

00:34:09,560 --> 00:34:16,250
on core OS so that is that's kind of the

00:34:13,880 --> 00:34:18,230
architecture today but actually you know

00:34:16,250 --> 00:34:20,480
in terms of recent developments this is

00:34:18,230 --> 00:34:23,000
soon going to be out of date as coo

00:34:20,480 --> 00:34:24,890
vanadis looks to update dhaka because in

00:34:23,000 --> 00:34:26,690
newer versions of dakka dakka is moving

00:34:24,890 --> 00:34:28,040
to it a slightly different model where

00:34:26,690 --> 00:34:30,320
they're splitting out the rent contain a

00:34:28,040 --> 00:34:32,690
runtime part from the demon itself which

00:34:30,320 --> 00:34:33,530
we think is is partly a good thing sort

00:34:32,690 --> 00:34:34,580
of partly one of the things we were

00:34:33,530 --> 00:34:37,070
pushing for but there are some other

00:34:34,580 --> 00:34:38,720
kind of problems that emerge here so you

00:34:37,070 --> 00:34:40,790
might have heard of container d which i

00:34:38,720 --> 00:34:42,830
was in the last release of docker was

00:34:40,790 --> 00:34:44,420
the first release to have this split

00:34:42,830 --> 00:34:48,200
between the daka demon and the execution

00:34:44,420 --> 00:34:49,340
thing so now dot the dr demon which you

00:34:48,200 --> 00:34:50,750
know still what you talk to on the

00:34:49,340 --> 00:34:53,150
command line or with from couplet

00:34:50,750 --> 00:34:55,700
actually talks to another demon to spin

00:34:53,150 --> 00:34:57,920
up individual containers and the nice

00:34:55,700 --> 00:34:59,780
part about this in theory is that then

00:34:57,920 --> 00:35:01,970
you can you know survive the daka demon

00:34:59,780 --> 00:35:03,820
restarting for example without affecting

00:35:01,970 --> 00:35:05,810
the life of your containers

00:35:03,820 --> 00:35:07,340
unfortunately the current implementation

00:35:05,810 --> 00:35:09,200
you actually now have a new point of

00:35:07,340 --> 00:35:11,180
failure which is the container d-demon

00:35:09,200 --> 00:35:12,560
so you just kind of punted it across now

00:35:11,180 --> 00:35:14,270
they plan to get to a point where the

00:35:12,560 --> 00:35:18,410
container d demon as well can restart

00:35:14,270 --> 00:35:20,030
and then can recover state so that's not

00:35:18,410 --> 00:35:23,330
that shouldn't be a problem for too much

00:35:20,030 --> 00:35:25,130
longer but then the next part the next

00:35:23,330 --> 00:35:26,810
part that's responsible to like to be

00:35:25,130 --> 00:35:29,000
able to achieve that to be able to refer

00:35:26,810 --> 00:35:30,290
the container d demon to recover then

00:35:29,000 --> 00:35:32,420
you need to introduce another component

00:35:30,290 --> 00:35:34,010
which is the container diem which means

00:35:32,420 --> 00:35:36,170
that every for every container that

00:35:34,010 --> 00:35:38,240
container d starts up it needs to run

00:35:36,170 --> 00:35:41,090
another dedicated demon rather than

00:35:38,240 --> 00:35:43,310
executing the application directly to

00:35:41,090 --> 00:35:45,580
maintain the state for that so they can

00:35:43,310 --> 00:35:47,860
recover if container d needs to restart

00:35:45,580 --> 00:35:50,360
so there's a lot of moving parts here

00:35:47,860 --> 00:35:51,650
some of this is similar in a sense to

00:35:50,360 --> 00:35:53,630
the rocket architecture in that the

00:35:51,650 --> 00:35:55,640
rocket stage one is kind of analogous to

00:35:53,630 --> 00:35:56,810
the container detiene because rocket you

00:35:55,640 --> 00:35:58,910
know starts up a process

00:35:56,810 --> 00:36:00,950
to start your different things but you

00:35:58,910 --> 00:36:02,360
know you'll note that the rocket in the

00:36:00,950 --> 00:36:04,360
rocket model that the pot is then this

00:36:02,360 --> 00:36:07,400
self-contained thing underneath this one

00:36:04,360 --> 00:36:08,420
host process whereas in the in the

00:36:07,400 --> 00:36:10,580
docker world you're still going to have

00:36:08,420 --> 00:36:14,810
one of these shims you know for every

00:36:10,580 --> 00:36:16,910
single container in the pod so let's

00:36:14,810 --> 00:36:19,520
talk a little bit about what integration

00:36:16,910 --> 00:36:20,540
with rocket looks like instead so as I

00:36:19,520 --> 00:36:22,190
said you know some of the key

00:36:20,540 --> 00:36:23,990
motivations for us is that we think it's

00:36:22,190 --> 00:36:25,340
you know rocket since Rockets a pod

00:36:23,990 --> 00:36:27,230
native run time since it understands

00:36:25,340 --> 00:36:28,550
podras first class thing that it's you

00:36:27,230 --> 00:36:31,070
know going to provide some benefits when

00:36:28,550 --> 00:36:32,780
integrating with Google and also rockets

00:36:31,070 --> 00:36:34,730
seamless integration with system d means

00:36:32,780 --> 00:36:36,110
that you know as google ad starts to be

00:36:34,730 --> 00:36:37,760
deployed more and more on system d

00:36:36,110 --> 00:36:41,990
distributions that you get this nice

00:36:37,760 --> 00:36:43,850
first-class support there since we have

00:36:41,990 --> 00:36:45,980
this self-contained execution model with

00:36:43,850 --> 00:36:48,770
no central demon than there's no single

00:36:45,980 --> 00:36:50,360
point of failure and then finally you

00:36:48,770 --> 00:36:51,620
know a really important goal for us is

00:36:50,360 --> 00:36:54,140
that it's totally transparently

00:36:51,620 --> 00:36:56,000
swappable so that you can continue you

00:36:54,140 --> 00:36:57,830
know as a user user of coop Nettie's or

00:36:56,000 --> 00:36:59,690
a user of Daka you can continue using it

00:36:57,830 --> 00:37:01,430
as you would today but the actual

00:36:59,690 --> 00:37:02,960
underneath you know we can swap out and

00:37:01,430 --> 00:37:04,490
use rocket to execute and get some of

00:37:02,960 --> 00:37:06,050
the advantages of rocket and you don't

00:37:04,490 --> 00:37:08,690
even notice the difference and we do

00:37:06,050 --> 00:37:10,760
this by using for example dr. to ACI

00:37:08,690 --> 00:37:12,260
which is a project that will convert dr.

00:37:10,760 --> 00:37:13,970
image pull down doc images talk to the

00:37:12,260 --> 00:37:16,280
doc registry pull them down and convert

00:37:13,970 --> 00:37:18,250
them to the internal format for rocket

00:37:16,280 --> 00:37:24,320
to use so rocket has native support for

00:37:18,250 --> 00:37:25,490
doc images as well so again this is kind

00:37:24,320 --> 00:37:27,050
of what it looks like what the two

00:37:25,490 --> 00:37:28,850
different execution modes look like with

00:37:27,050 --> 00:37:31,550
when communities is using rocket the

00:37:28,850 --> 00:37:32,870
couplets using rocket instead so in the

00:37:31,550 --> 00:37:35,420
in the default mode that we're using at

00:37:32,870 --> 00:37:37,370
the moment couplet actually doesn't talk

00:37:35,420 --> 00:37:40,940
to rocket directly it talks to system d

00:37:37,370 --> 00:37:43,370
to start up rocket prods and then you

00:37:40,940 --> 00:37:46,010
know the system d itself is what spawns

00:37:43,370 --> 00:37:48,260
our rocket pods and and then finally to

00:37:46,010 --> 00:37:50,210
extract information as i talked about

00:37:48,260 --> 00:37:53,150
that API service earlier which can just

00:37:50,210 --> 00:37:54,740
run off to the side and that understands

00:37:53,150 --> 00:37:55,880
the underlying you know databases of

00:37:54,740 --> 00:37:57,650
rocket and you know the file system

00:37:55,880 --> 00:37:59,390
layout and things like that so that can

00:37:57,650 --> 00:38:01,010
provide information to couplet very very

00:37:59,390 --> 00:38:02,690
efficiently about the stuff that's

00:38:01,010 --> 00:38:04,760
running about stuff that's running on

00:38:02,690 --> 00:38:06,880
the operating sorry about rocket pods

00:38:04,760 --> 00:38:09,880
that are running running on the system

00:38:06,880 --> 00:38:11,500
the nice thing about this is that

00:38:09,880 --> 00:38:14,920
there's no real single point of failure

00:38:11,500 --> 00:38:16,480
well there is one but you can subvert

00:38:14,920 --> 00:38:18,100
it's quite tolerant tolerant to

00:38:16,480 --> 00:38:20,770
different failures so for example if the

00:38:18,100 --> 00:38:21,970
API service fails and needs to get

00:38:20,770 --> 00:38:23,320
restarted you know there's no

00:38:21,970 --> 00:38:24,810
interruption to the running containers

00:38:23,320 --> 00:38:27,370
the kugel it might just need to retry

00:38:24,810 --> 00:38:29,290
two for a second until it gets the

00:38:27,370 --> 00:38:31,180
information back but it doesn't affect

00:38:29,290 --> 00:38:32,920
any pilots running on the system if one

00:38:31,180 --> 00:38:34,360
of the rocket processors dies since each

00:38:32,920 --> 00:38:35,860
of these processes in capital H the

00:38:34,360 --> 00:38:37,420
whole pot if one of the pods dies and

00:38:35,860 --> 00:38:40,060
then it won't affect any other pods on

00:38:37,420 --> 00:38:41,350
the system if couplet dyers you know the

00:38:40,060 --> 00:38:43,480
pods will just happily keep running

00:38:41,350 --> 00:38:45,030
apparent it by system d public can come

00:38:43,480 --> 00:38:47,560
back and recover and that's just fine

00:38:45,030 --> 00:38:49,450
systemd dies then you're obviously

00:38:47,560 --> 00:38:50,470
completely hosed anyway so we don't we

00:38:49,450 --> 00:38:51,880
think that's a pretty fair trade-off

00:38:50,470 --> 00:38:53,680
because that's you know Pit one on the

00:38:51,880 --> 00:38:56,080
system so the only entity that we're

00:38:53,680 --> 00:38:57,790
trusting in this in this architecture is

00:38:56,080 --> 00:38:59,350
system d and we think that's a pretty

00:38:57,790 --> 00:39:03,640
reasonable thing to trust since you you

00:38:59,350 --> 00:39:05,290
have to trust it anyway I mentioned

00:39:03,640 --> 00:39:07,810
earlier I talked earlier about the the

00:39:05,290 --> 00:39:09,820
the you know rocket in being able to

00:39:07,810 --> 00:39:12,190
execute inheriting the contacts directly

00:39:09,820 --> 00:39:13,390
from where it's executed though you

00:39:12,190 --> 00:39:16,270
might be wondering why we need to use

00:39:13,390 --> 00:39:18,700
system d as I said we think it buys that

00:39:16,270 --> 00:39:22,120
nice kind of a high availability where

00:39:18,700 --> 00:39:23,890
the Kubla can die and easily recover but

00:39:22,120 --> 00:39:25,630
potentially you know we're exploring

00:39:23,890 --> 00:39:27,280
also implementing this model where the

00:39:25,630 --> 00:39:30,040
couplet just directly execute rocket

00:39:27,280 --> 00:39:32,110
pods and and and the motivation here is

00:39:30,040 --> 00:39:33,850
that if the couplet wants a very very

00:39:32,110 --> 00:39:35,830
direct granular control over what's

00:39:33,850 --> 00:39:37,600
happening in the pod then it might be

00:39:35,830 --> 00:39:39,280
helpful if it just can directly set it

00:39:37,600 --> 00:39:40,990
up so for example if the couplet wants

00:39:39,280 --> 00:39:43,650
to fiddle with see groups and things

00:39:40,990 --> 00:39:46,030
inside a pod then it can actually if the

00:39:43,650 --> 00:39:47,560
excuse me if the couplet process itself

00:39:46,030 --> 00:39:49,420
is responsible for starting that process

00:39:47,560 --> 00:39:52,990
then it can have much more fine great

00:39:49,420 --> 00:39:53,740
control and then obviously also you you

00:39:52,990 --> 00:39:55,390
know you get a little bit more

00:39:53,740 --> 00:39:57,970
efficiency by not needing to you know

00:39:55,390 --> 00:40:02,320
have that additional hop over the system

00:39:57,970 --> 00:40:03,780
dapi so this is oops this is another

00:40:02,320 --> 00:40:06,490
mode that we're potentially exploring

00:40:03,780 --> 00:40:08,890
but as of today we use the system d

00:40:06,490 --> 00:40:12,880
system demo by default when integrating

00:40:08,890 --> 00:40:15,490
couplet with rocket so where is this

00:40:12,880 --> 00:40:17,380
where is this at well it's not quite

00:40:15,490 --> 00:40:17,980
complete but it's very very close and

00:40:17,380 --> 00:40:19,600
the way that we're measuring

00:40:17,980 --> 00:40:21,340
completeness is by running the

00:40:19,600 --> 00:40:23,069
end-to-end tests Tsukuba Nettie's has a

00:40:21,340 --> 00:40:24,900
quite an exhaustive set of intent

00:40:23,069 --> 00:40:27,949
us too you know test the whole whole

00:40:24,900 --> 00:40:30,180
behavior of the system and so we have a

00:40:27,949 --> 00:40:32,519
continuous integration set up on Jenkins

00:40:30,180 --> 00:40:34,349
that is constantly testing you know the

00:40:32,519 --> 00:40:36,449
latest khoob khoob notice master against

00:40:34,349 --> 00:40:37,949
with the rocket back end we're about

00:40:36,449 --> 00:40:39,809
about ninety percent of tests are very

00:40:37,949 --> 00:40:42,630
very close and it's a top priority to

00:40:39,809 --> 00:40:44,279
get done for khoob internees 1.3 so we

00:40:42,630 --> 00:40:45,900
work the next major release of coconut

00:40:44,279 --> 00:40:48,359
is so we work very closely with the couv

00:40:45,900 --> 00:40:50,910
entities signode team to make sure that

00:40:48,359 --> 00:40:53,130
we're sort of unblocked and that you

00:40:50,910 --> 00:40:54,449
know we get what we need in and we're

00:40:53,130 --> 00:41:02,190
hoping to see this complete for coop

00:40:54,449 --> 00:41:04,170
attorneys 1.3 you know after that after

00:41:02,190 --> 00:41:07,109
that happens I talked a little bit about

00:41:04,170 --> 00:41:09,869
this in that about to contain a runtime

00:41:07,109 --> 00:41:11,640
interface in the KU blue and that in

00:41:09,869 --> 00:41:13,079
principle it's quite straightforward to

00:41:11,640 --> 00:41:14,729
implement that but in practice it's

00:41:13,079 --> 00:41:16,289
quite complicated because of a lot of

00:41:14,729 --> 00:41:18,660
assumptions well one of the things

00:41:16,289 --> 00:41:20,729
planned for as soon as 1.3 is done is

00:41:18,660 --> 00:41:23,640
for quite a big rework of that container

00:41:20,729 --> 00:41:25,049
runtime interface and one of the

00:41:23,640 --> 00:41:26,190
motivations there is as I said that

00:41:25,049 --> 00:41:28,589
cougar Nettie's wants much more granular

00:41:26,190 --> 00:41:30,440
control over applications and containers

00:41:28,589 --> 00:41:33,269
so wants to be able to you know tweak

00:41:30,440 --> 00:41:36,029
resources on the fly and maybe restart

00:41:33,269 --> 00:41:38,609
maybe add new applications into a pod

00:41:36,029 --> 00:41:40,079
and things like that and we're still in

00:41:38,609 --> 00:41:41,699
discussions with the cuckoo benetti's

00:41:40,079 --> 00:41:43,890
team about you know where the right

00:41:41,699 --> 00:41:45,719
balance is between you know we don't

00:41:43,890 --> 00:41:47,249
think it's right to go to that complete

00:41:45,719 --> 00:41:49,259
model where it's just a massive

00:41:47,249 --> 00:41:51,930
containers and the couplet ask them as

00:41:49,259 --> 00:41:54,029
to model as to maintain a whole bunch of

00:41:51,930 --> 00:41:55,259
state around water pot is but at the end

00:41:54,029 --> 00:41:56,609
of the day they are they are going to

00:41:55,259 --> 00:41:58,019
need to you know as we look at different

00:41:56,609 --> 00:41:59,400
things like over auto scaling and

00:41:58,019 --> 00:42:01,199
over-provisioning and communities

00:41:59,400 --> 00:42:02,969
clusters they are going to need more

00:42:01,199 --> 00:42:07,199
granular control over resource

00:42:02,969 --> 00:42:09,299
constraints and things like that so the

00:42:07,199 --> 00:42:12,509
second way that that that was rocket

00:42:09,299 --> 00:42:14,249
Nettie's and then the second way that we

00:42:12,509 --> 00:42:15,809
integrate with google uses said kind of

00:42:14,249 --> 00:42:16,949
the reverses instead of using crew

00:42:15,809 --> 00:42:18,809
benetti's to run rocket to run

00:42:16,949 --> 00:42:22,049
applications using rocket drunker better

00:42:18,809 --> 00:42:23,430
needs and the reason that we we need to

00:42:22,049 --> 00:42:24,779
do this is because you know as i

00:42:23,430 --> 00:42:25,979
mentioned on core OS we have this

00:42:24,779 --> 00:42:27,749
operating system that doesn't have a

00:42:25,979 --> 00:42:29,309
package manager and the only way to run

00:42:27,749 --> 00:42:30,479
things is to run them in containers so

00:42:29,309 --> 00:42:33,420
we need to run cuban aires in a

00:42:30,479 --> 00:42:35,670
container we actually originally tried

00:42:33,420 --> 00:42:36,410
putting the KU benetti's couplet into

00:42:35,670 --> 00:42:37,700
the operating system

00:42:36,410 --> 00:42:38,930
self but we had some issues around

00:42:37,700 --> 00:42:41,630
upgrades which I'll talk about in a

00:42:38,930 --> 00:42:43,910
second so we think it's better to run it

00:42:41,630 --> 00:42:45,410
in a container fundamentally but couplet

00:42:43,910 --> 00:42:47,480
is quite special because it needs a lot

00:42:45,410 --> 00:42:50,120
of access to the host it needs to like

00:42:47,480 --> 00:42:51,560
mount volumes for example so you can't

00:42:50,120 --> 00:42:54,380
just run it in a traditional kind of

00:42:51,560 --> 00:42:56,930
container in a completely isolated

00:42:54,380 --> 00:42:58,130
environment so we created this new

00:42:56,930 --> 00:43:00,110
feature and rocket a couple of months

00:42:58,130 --> 00:43:02,570
ago called which were calling fly

00:43:00,110 --> 00:43:04,250
basically and the idea is that it's

00:43:02,570 --> 00:43:05,900
basically just using rocket as a package

00:43:04,250 --> 00:43:07,550
manager rather than completely

00:43:05,900 --> 00:43:08,840
containing you know an application it

00:43:07,550 --> 00:43:11,450
just runs it in an unconstraint

00:43:08,840 --> 00:43:12,680
environment but you know you can run an

00:43:11,450 --> 00:43:14,420
application with all its dependencies

00:43:12,680 --> 00:43:16,640
without having to install them on the

00:43:14,420 --> 00:43:18,140
operating system it's similar if you're

00:43:16,640 --> 00:43:21,080
familiar with dr. it's somewhat similar

00:43:18,140 --> 00:43:24,290
to doctors privilege mode or system DS

00:43:21,080 --> 00:43:25,730
system dns pawns share host mode but you

00:43:24,290 --> 00:43:27,050
get all the other advantages of using a

00:43:25,730 --> 00:43:28,640
container runtime like you know

00:43:27,050 --> 00:43:30,770
discovering images and making sure

00:43:28,640 --> 00:43:34,070
they're signed and verified and managing

00:43:30,770 --> 00:43:35,240
them on disc and things like that so to

00:43:34,070 --> 00:43:37,580
give you an example what it looks like

00:43:35,240 --> 00:43:39,470
in the execution as I mentioned you know

00:43:37,580 --> 00:43:40,850
earlier the fundamental execution unit

00:43:39,470 --> 00:43:45,530
and rocket is the pod so all the

00:43:40,850 --> 00:43:47,480
applications run in pods and within the

00:43:45,530 --> 00:43:49,070
pod it's an isolated namespace from the

00:43:47,480 --> 00:43:51,590
from the host so isolated Mountain aim

00:43:49,070 --> 00:43:53,690
Space Network namespace dip kids and all

00:43:51,590 --> 00:43:55,280
those things with fly the application

00:43:53,690 --> 00:43:57,980
just execute directly underneath the

00:43:55,280 --> 00:44:00,170
process it actually executed that it's

00:43:57,980 --> 00:44:02,570
actually replaces the process and it's

00:44:00,170 --> 00:44:04,100
just in the complete host post context

00:44:02,570 --> 00:44:06,020
so everything is shared with the host

00:44:04,100 --> 00:44:08,690
the pids network mount and everything

00:44:06,020 --> 00:44:09,920
like that and the only thing that's

00:44:08,690 --> 00:44:11,210
different is that you have new the

00:44:09,920 --> 00:44:12,890
application starts in its own file

00:44:11,210 --> 00:44:14,690
system so that has access to all its own

00:44:12,890 --> 00:44:17,240
libraries and data and so forth and so

00:44:14,690 --> 00:44:18,740
that's how we run the couplet on core OS

00:44:17,240 --> 00:44:20,330
so we just basically have a simple

00:44:18,740 --> 00:44:22,970
wrapper script that executes the couplet

00:44:20,330 --> 00:44:24,140
that egg that uses rocket fly to pull

00:44:22,970 --> 00:44:26,480
down the version of the couplet that you

00:44:24,140 --> 00:44:31,220
specify and then run it on the honor

00:44:26,480 --> 00:44:35,420
system final area I want to touch on

00:44:31,220 --> 00:44:38,480
briefly is networking so you guys might

00:44:35,420 --> 00:44:41,570
have heard of CN i which is a sort of

00:44:38,480 --> 00:44:42,860
container networking specification CNI

00:44:41,570 --> 00:44:44,570
emerged from the rocket networking

00:44:42,860 --> 00:44:46,010
specification so when we develop rocket

00:44:44,570 --> 00:44:48,320
we wanted you know networking to be

00:44:46,010 --> 00:44:49,640
quite because it's quite a lot of

00:44:48,320 --> 00:44:50,299
different opinions on what networking

00:44:49,640 --> 00:44:51,799
should be

00:44:50,299 --> 00:44:53,769
and what different networking backends

00:44:51,799 --> 00:44:58,609
are so we want it to be quite pluggable

00:44:53,769 --> 00:45:00,140
and the key kind of concept the key

00:44:58,609 --> 00:45:01,609
defining concept here was that we could

00:45:00,140 --> 00:45:03,289
have one or more eye peas per pod

00:45:01,609 --> 00:45:04,999
assigned at the pod level and there

00:45:03,289 --> 00:45:08,959
would be assigned and allocated and set

00:45:04,999 --> 00:45:10,699
up via a plugins so basically what it

00:45:08,959 --> 00:45:11,900
looks like is that the you know rocket

00:45:10,699 --> 00:45:13,969
itself doesn't understand anything about

00:45:11,900 --> 00:45:15,739
networks it just knows how to talk to CN

00:45:13,969 --> 00:45:17,299
I and then C and I is that abstraction

00:45:15,739 --> 00:45:18,709
between the different kind of backends

00:45:17,299 --> 00:45:20,420
that you would have whether it's setting

00:45:18,709 --> 00:45:22,219
up a simple you know point-to-point

00:45:20,420 --> 00:45:23,660
interface between your container in your

00:45:22,219 --> 00:45:25,279
host or whether it's plugging into

00:45:23,660 --> 00:45:27,049
something like Mac VLANs you can share

00:45:25,279 --> 00:45:29,959
the interface network interface with a

00:45:27,049 --> 00:45:32,709
host or in two different backends like

00:45:29,959 --> 00:45:35,239
you know over open V switch for example

00:45:32,709 --> 00:45:36,859
so see now is very simple a command-line

00:45:35,239 --> 00:45:38,869
specification and simple configuration

00:45:36,859 --> 00:45:40,369
that just says you know add this

00:45:38,869 --> 00:45:41,929
container to this network remove this

00:45:40,369 --> 00:45:43,579
container to this network and then the

00:45:41,929 --> 00:45:45,859
plugins themselves are what you know go

00:45:43,579 --> 00:45:47,509
out and allocate you an IP and then set

00:45:45,859 --> 00:45:51,079
up the network name space and all these

00:45:47,509 --> 00:45:52,939
different things is a very very simple

00:45:51,079 --> 00:45:54,920
example configuration that just you know

00:45:52,939 --> 00:45:57,199
allocates a simple IP from from this

00:45:54,920 --> 00:45:58,219
subnet to your container and then you

00:45:57,199 --> 00:45:59,689
would just specify it on the command

00:45:58,219 --> 00:46:06,170
line to rock it for example with a dash

00:45:59,689 --> 00:46:07,309
dash net flag as I said rocket itself

00:46:06,170 --> 00:46:09,920
doesn't really know anything about

00:46:07,309 --> 00:46:11,660
network so it basically just creates a

00:46:09,920 --> 00:46:14,089
network name space and then execute the

00:46:11,660 --> 00:46:15,499
CNI plug-in and then the CNI plugin is

00:46:14,089 --> 00:46:19,009
responsible for all of the necessary

00:46:15,499 --> 00:46:20,420
network setup then rocket you know calls

00:46:19,009 --> 00:46:22,699
the stage one which as the set by

00:46:20,420 --> 00:46:24,319
default is based around n spawn and that

00:46:22,699 --> 00:46:29,869
executes within the network name space

00:46:24,319 --> 00:46:31,699
that's already been set up why I'm sort

00:46:29,869 --> 00:46:32,959
of talking about this is that scene so

00:46:31,699 --> 00:46:34,789
as I said C and I started out as the

00:46:32,959 --> 00:46:35,749
plug-in model for rocket but we kind of

00:46:34,789 --> 00:46:38,839
split it out to be something more

00:46:35,749 --> 00:46:40,249
generic since there's a lot of kind of

00:46:38,839 --> 00:46:42,979
alignment with what how cou benetti's

00:46:40,249 --> 00:46:44,630
wanted to do the networking you know a

00:46:42,979 --> 00:46:47,019
couple of months ago there was a blog

00:46:44,630 --> 00:46:49,339
post by the Cuban ids team saying that

00:46:47,019 --> 00:46:51,109
frame but negatively but actually it was

00:46:49,339 --> 00:46:52,189
quite positive in terms of they decided

00:46:51,109 --> 00:46:53,959
that si ni is going to be the network

00:46:52,189 --> 00:46:56,509
model that koo benetti's uses for all of

00:46:53,959 --> 00:46:58,099
its networking and so they're kind of

00:46:56,509 --> 00:46:59,329
working at the moment to rip out a lot

00:46:58,099 --> 00:47:00,890
of the networking code from coogan at

00:46:59,329 --> 00:47:02,959
ease and essentially just make sure that

00:47:00,890 --> 00:47:04,140
it understands CNI natively so that we

00:47:02,959 --> 00:47:06,300
can use all the cna

00:47:04,140 --> 00:47:09,930
gains across different systems and

00:47:06,300 --> 00:47:12,870
within Cuba natives cubed CNI today it's

00:47:09,930 --> 00:47:14,730
at sort of what we've basically called V

00:47:12,870 --> 00:47:17,790
0.2 which doesn't mean much in

00:47:14,730 --> 00:47:19,230
particular but it's used in rocket as I

00:47:17,790 --> 00:47:20,790
said for all Cuban all networking

00:47:19,230 --> 00:47:22,740
there's a lot of different plugins that

00:47:20,790 --> 00:47:24,540
have been developed by big projects like

00:47:22,740 --> 00:47:26,730
calico and we've works which also

00:47:24,540 --> 00:47:29,640
integrate very very nicely with mq

00:47:26,730 --> 00:47:31,770
benetti's and our hope is that we can

00:47:29,640 --> 00:47:33,750
donate the CNI project to see ncf where

00:47:31,770 --> 00:47:35,970
as i mentioned KU benetti's was recently

00:47:33,750 --> 00:47:38,160
donated to so that the CN i can have

00:47:35,970 --> 00:47:39,450
this this you know home to really

00:47:38,160 --> 00:47:41,160
flourish as a project and to make sure

00:47:39,450 --> 00:47:42,990
that it always has this first-class kind

00:47:41,160 --> 00:47:44,880
of integration with Cooper nineties and

00:47:42,990 --> 00:47:49,500
with other you know orchestration

00:47:44,880 --> 00:47:51,510
systems that that emerge so a little bit

00:47:49,500 --> 00:47:55,800
about what's coming up coming up on time

00:47:51,510 --> 00:47:59,160
so I'll be quick but as I said rocket

00:47:55,800 --> 00:48:01,110
Nettie's 1 point 0 is something we're

00:47:59,160 --> 00:48:03,030
hoping to have well we definitely want

00:48:01,110 --> 00:48:05,160
to have finished by cooney's 1.3 which

00:48:03,030 --> 00:48:06,390
is roughly the end of this quarter and

00:48:05,160 --> 00:48:07,980
what that means to be finish is that

00:48:06,390 --> 00:48:09,390
it's it's fully supported as a back-end

00:48:07,980 --> 00:48:10,620
and that it's you know it says full

00:48:09,390 --> 00:48:11,820
feature parity with docker so you

00:48:10,620 --> 00:48:14,280
literally just can't notice the

00:48:11,820 --> 00:48:15,870
difference as an end user and then the

00:48:14,280 --> 00:48:17,040
way that way I sort of get a guarantee

00:48:15,870 --> 00:48:18,450
there is that we have this automated

00:48:17,040 --> 00:48:20,670
end-to-end testing that's constantly

00:48:18,450 --> 00:48:23,850
running on core OS and other

00:48:20,670 --> 00:48:25,200
distributions hopefully and we plant it

00:48:23,850 --> 00:48:26,880
you know at the moment that's internal

00:48:25,200 --> 00:48:29,040
but we want to make that all expose so

00:48:26,880 --> 00:48:30,360
it's all publicly visible you know the

00:48:29,040 --> 00:48:32,040
constant state every time that there's a

00:48:30,360 --> 00:48:33,960
PR to cook than it is and that it's

00:48:32,040 --> 00:48:37,440
tested to end to end against rocket as

00:48:33,960 --> 00:48:38,940
well as stalker and then looking forward

00:48:37,440 --> 00:48:41,670
for things we want to do in rocket

00:48:38,940 --> 00:48:43,470
Nettie's one point oh I talked about

00:48:41,670 --> 00:48:45,540
that lk vm back end the virtualization

00:48:43,470 --> 00:48:47,220
back end and we really want to see that

00:48:45,540 --> 00:48:48,570
working with cuban eddies and we think

00:48:47,220 --> 00:48:50,010
that would be a great feature for

00:48:48,570 --> 00:48:51,090
communities to have to know that your

00:48:50,010 --> 00:48:52,980
containers in Cuba Nettie's are

00:48:51,090 --> 00:48:55,590
executing in in virtualized virtual

00:48:52,980 --> 00:48:57,720
machines and then one thing we haven't

00:48:55,590 --> 00:48:59,580
need to tackle is changing the

00:48:57,720 --> 00:49:01,650
communities API to support this new

00:48:59,580 --> 00:49:03,000
image format standard the oci standard

00:49:01,650 --> 00:49:04,890
that we ground since as of today the

00:49:03,000 --> 00:49:08,580
only standard it's the only image format

00:49:04,890 --> 00:49:11,490
you can specify a stalker and then

00:49:08,580 --> 00:49:13,200
finally we want to extend that TPM trust

00:49:11,490 --> 00:49:14,610
that I talked about up to the Cuban

00:49:13,200 --> 00:49:16,080
eighties cluster so I think the patches

00:49:14,610 --> 00:49:18,060
are out to do this today it just hasn't

00:49:16,080 --> 00:49:20,160
been merged yet but the idea is that

00:49:18,060 --> 00:49:21,840
you know in your coup benetti's cluster

00:49:20,160 --> 00:49:24,090
that's running on your hardware only

00:49:21,840 --> 00:49:26,310
machines that are trusted you know have

00:49:24,090 --> 00:49:31,290
an own key in the TPM are allowed to

00:49:26,310 --> 00:49:32,490
join the cluster and execute work if it

00:49:31,290 --> 00:49:34,680
was interested it hardly encourage you

00:49:32,490 --> 00:49:36,390
to try rocket Nettie's today since it's

00:49:34,680 --> 00:49:38,280
not all completely mainlined there's a

00:49:36,390 --> 00:49:42,470
little little script that you need to

00:49:38,280 --> 00:49:42,470
run which is available in this gist

00:49:45,290 --> 00:49:51,270
don't know what happened well there we

00:49:47,850 --> 00:49:52,980
go but hopefully by 1.3 we're hoping

00:49:51,270 --> 00:50:00,570
that we'll all be should all be main

00:49:52,980 --> 00:50:08,220
main strange today what's happening in

00:50:00,570 --> 00:50:09,750
rocket and when I still wanna talk about

00:50:08,220 --> 00:50:11,160
oh I wouldn't talk about CNI 1 point 0

00:50:09,750 --> 00:50:12,240
because I'm really interested in getting

00:50:11,160 --> 00:50:13,370
kind of feedback and involvement for

00:50:12,240 --> 00:50:15,180
anyone who's interested in networking

00:50:13,370 --> 00:50:16,200
see you know one point knows something

00:50:15,180 --> 00:50:17,850
you want to work towards in the next

00:50:16,200 --> 00:50:19,080
couple of months and one of the things

00:50:17,850 --> 00:50:21,810
we're really interested in is having

00:50:19,080 --> 00:50:23,640
ipv6 support baked in natively so

00:50:21,810 --> 00:50:25,020
there's quite a bit of active worker at

00:50:23,640 --> 00:50:28,400
the moment and if anyone's interested I

00:50:25,020 --> 00:50:31,500
would love to have more contributions

00:50:28,400 --> 00:50:34,590
but it oh it's coming off again and

00:50:31,500 --> 00:50:36,510
waiting for time one final thing I

00:50:34,590 --> 00:50:39,270
wanted to talk about is koo blood

00:50:36,510 --> 00:50:41,340
upgrades something that we're working on

00:50:39,270 --> 00:50:42,750
at the moment as I mentioned that you

00:50:41,340 --> 00:50:45,690
know with Korres we want updates to be

00:50:42,750 --> 00:50:47,310
seamless but if the couplet was baked

00:50:45,690 --> 00:50:48,690
into the up into the OS that meant when

00:50:47,310 --> 00:50:50,610
you do an OS upgrade it might update the

00:50:48,690 --> 00:50:52,200
coolant and in principle this is fine

00:50:50,610 --> 00:50:54,000
since the Cuban 80s is really big on

00:50:52,200 --> 00:50:55,680
backwards compatibility but we actually

00:50:54,000 --> 00:50:56,790
found when we tried putting it in the in

00:50:55,680 --> 00:50:58,260
the operating system that it doesn't

00:50:56,790 --> 00:50:59,790
work that there was some backwards and

00:50:58,260 --> 00:51:02,310
compatibilities unfortunately when

00:50:59,790 --> 00:51:03,720
having a mixed version cluster so that

00:51:02,310 --> 00:51:05,370
was one of our motivations for splitting

00:51:03,720 --> 00:51:06,480
it out to running it Nickatina but then

00:51:05,370 --> 00:51:07,830
it still means that you need some

00:51:06,480 --> 00:51:10,410
solution to being able to upgrade the

00:51:07,830 --> 00:51:12,240
couplets running in a live cluster so a

00:51:10,410 --> 00:51:15,060
plan here is to have a API driven

00:51:12,240 --> 00:51:17,370
upgrades where you can note note

00:51:15,060 --> 00:51:19,890
annotation like unakku benetti's node

00:51:17,370 --> 00:51:21,540
using the KU benetti's api and then that

00:51:19,890 --> 00:51:23,520
annotation specifies what version of the

00:51:21,540 --> 00:51:25,920
couplet is actually running on that note

00:51:23,520 --> 00:51:27,420
so we sort of using kuba kuba Nettie's

00:51:25,920 --> 00:51:29,400
itself to control what version of the

00:51:27,420 --> 00:51:30,480
coup blurred is going to run and then

00:51:29,400 --> 00:51:32,910
you can do it

00:51:30,480 --> 00:51:36,480
to perform an update in a in a in a well

00:51:32,910 --> 00:51:37,980
in a graceful manner and then the final

00:51:36,480 --> 00:51:39,690
bit of integration that we want to do

00:51:37,980 --> 00:51:42,090
with the couplet is I mentioned earlier

00:51:39,690 --> 00:51:43,680
when I was talking about up to updates

00:51:42,090 --> 00:51:45,480
when the machine needs an update and

00:51:43,680 --> 00:51:47,430
then it can notify your container

00:51:45,480 --> 00:51:49,490
orchestrate your orchestration run time

00:51:47,430 --> 00:51:51,990
and that knows that it can then

00:51:49,490 --> 00:51:53,190
proactively my great apps before a run

00:51:51,990 --> 00:51:55,230
down actually happens a shutdown

00:51:53,190 --> 00:51:56,670
actually happens so in Korres we have a

00:51:55,230 --> 00:51:58,680
component called locksmith it's also

00:51:56,670 --> 00:52:00,660
used in some other distributions that

00:51:58,680 --> 00:52:02,340
you know when the system download an

00:52:00,660 --> 00:52:05,220
update and says hey I need a reboot it

00:52:02,340 --> 00:52:06,930
actually tells this come this demon

00:52:05,220 --> 00:52:09,660
that's running locksmith and locks with

00:52:06,930 --> 00:52:11,130
controls the life cycle of the reboot so

00:52:09,660 --> 00:52:12,840
lock significant say like oh I'm only

00:52:11,130 --> 00:52:14,670
going to reboot between you know one and

00:52:12,840 --> 00:52:15,930
three am or I'm going to make sure that

00:52:14,670 --> 00:52:17,340
only one machine the cluster is

00:52:15,930 --> 00:52:18,990
rebooting at once or all these things

00:52:17,340 --> 00:52:20,730
like that so we plan to integrate

00:52:18,990 --> 00:52:22,980
locksmith with the cool book so that

00:52:20,730 --> 00:52:25,470
whenever update is necessary blocks with

00:52:22,980 --> 00:52:28,080
can tell the couplet hey stop scheduling

00:52:25,470 --> 00:52:30,210
any apps here drain all the apps from

00:52:28,080 --> 00:52:32,400
from this node and the communities can

00:52:30,210 --> 00:52:34,530
then move the apps elsewhere can reboot

00:52:32,400 --> 00:52:36,480
them the renault can reboot Cooney's can

00:52:34,530 --> 00:52:37,560
notice oh this this service is ipod and

00:52:36,480 --> 00:52:42,480
available again now I can start

00:52:37,560 --> 00:52:45,060
scheduling work to it again yep so

00:52:42,480 --> 00:52:46,500
that's basically the end and encourage

00:52:45,060 --> 00:52:47,910
you to you know hopefully use rocket use

00:52:46,500 --> 00:52:50,100
goober Nettie's and try using them

00:52:47,910 --> 00:52:51,570
together and all of this stuff is open

00:52:50,100 --> 00:52:54,120
source you know we do all development of

00:52:51,570 --> 00:52:56,640
rocket and app SI and si ni on github

00:52:54,120 --> 00:52:58,350
and we really love contributions so

00:52:56,640 --> 00:53:01,470
encourage you to check it out and get

00:52:58,350 --> 00:53:04,200
involved and we also have a conference

00:53:01,470 --> 00:53:05,940
on open source software in in May in

00:53:04,200 --> 00:53:09,510
Berlin if anyone's interested in joining

00:53:05,940 --> 00:53:11,010
love to have you there and we're also

00:53:09,510 --> 00:53:14,580
hiring if anyone wants to work on

00:53:11,010 --> 00:53:21,350
containers in Berlin so if you have a

00:53:14,580 --> 00:53:21,350
few minutes for any questions questions

00:53:22,250 --> 00:53:27,600
what are your plans for or do you have

00:53:25,170 --> 00:53:30,630
any plans to fully integrate with Cuba

00:53:27,600 --> 00:53:33,150
natives like getting rocket or alex c

00:53:30,630 --> 00:53:35,460
runtime into Cooper natives instead of

00:53:33,150 --> 00:53:37,380
pushing rocket netis as a separate

00:53:35,460 --> 00:53:38,670
product oh maybe I should've been

00:53:37,380 --> 00:53:40,290
clearer rocket daddy's is not a separate

00:53:38,670 --> 00:53:43,080
product this is all going into the

00:53:40,290 --> 00:53:43,950
couplet in the canaries code we just

00:53:43,080 --> 00:53:45,240
have a few

00:53:43,950 --> 00:53:46,950
model small patches at the moment that

00:53:45,240 --> 00:53:48,599
we haven't emerged upstream which is why

00:53:46,950 --> 00:53:51,210
I link to that just but we do all the

00:53:48,599 --> 00:53:52,650
work in in the canaries itself okay do

00:53:51,210 --> 00:53:54,540
you have any estimate on the time line

00:53:52,650 --> 00:53:56,730
when it will be accepted in main line

00:53:54,540 --> 00:54:01,260
open a time so it's a it's actually in

00:53:56,730 --> 00:54:03,750
main line today but it doesn't quite you

00:54:01,260 --> 00:54:08,010
know doesn't quiet oops kuvan Ares

00:54:03,750 --> 00:54:11,520
rocket so you can go to the official kou

00:54:08,010 --> 00:54:14,280
benetti's docks and you can see some

00:54:11,520 --> 00:54:15,450
information on getting started it is in

00:54:14,280 --> 00:54:17,430
main line today it's just that it

00:54:15,450 --> 00:54:18,810
doesn't all work one hundred percent and

00:54:17,430 --> 00:54:20,700
there's some some different requirements

00:54:18,810 --> 00:54:22,859
here but we're absolutely doing all this

00:54:20,700 --> 00:54:23,940
development upstream it's just that we

00:54:22,859 --> 00:54:26,730
have some patches that aren't yet

00:54:23,940 --> 00:54:32,160
available and if you actually go to the

00:54:26,730 --> 00:54:34,260
Ku benetti's project issues you can see

00:54:32,160 --> 00:54:36,240
there's a milestone at the moment which

00:54:34,260 --> 00:54:38,609
is for rocket nineties one point oh and

00:54:36,240 --> 00:54:40,680
you can see all the sort of patches and

00:54:38,609 --> 00:54:45,650
things that are going into all upstream

00:54:40,680 --> 00:54:45,650
goober Nerys to finalize that support

00:54:47,660 --> 00:54:51,109
more questions

00:54:58,980 --> 00:55:06,579
hello hello thank you for the

00:55:04,270 --> 00:55:08,910
presentation you have mentioned there is

00:55:06,579 --> 00:55:12,160
some effort to unify the format of the

00:55:08,910 --> 00:55:16,950
containers like up or the docker and the

00:55:12,160 --> 00:55:19,210
rocket one can you let go say how in

00:55:16,950 --> 00:55:22,900
which time frame we can expect this

00:55:19,210 --> 00:55:26,200
unified format that's a good question so

00:55:22,900 --> 00:55:27,820
our hope is that again we try to put all

00:55:26,200 --> 00:55:30,339
this on github so it's pretty

00:55:27,820 --> 00:55:34,450
transparent our hope is that we have a

00:55:30,339 --> 00:55:35,829
tentative timeline here so what the

00:55:34,450 --> 00:55:37,990
initial step here was just basically to

00:55:35,829 --> 00:55:40,060
import to start from the daka v2 format

00:55:37,990 --> 00:55:41,020
as i mentioned and then there's some

00:55:40,060 --> 00:55:42,820
things that we want to you know

00:55:41,020 --> 00:55:43,869
introduced from app see they didn't

00:55:42,820 --> 00:55:45,910
necessarily make it into the dock of e

00:55:43,869 --> 00:55:48,010
to format our hope is that we have this

00:55:45,910 --> 00:55:49,690
you know new spec kind of done around

00:55:48,010 --> 00:55:51,940
you know may and then around the main

00:55:49,690 --> 00:55:53,320
time Flint May time frame that you know

00:55:51,940 --> 00:55:55,300
one of the criteria for success is that

00:55:53,320 --> 00:55:56,950
we have independent implementations so

00:55:55,300 --> 00:55:58,420
for example that Amazon implements in

00:55:56,950 --> 00:56:02,319
their registry and then also that rocket

00:55:58,420 --> 00:56:03,819
can fully support it and yeah our hope

00:56:02,319 --> 00:56:05,530
is that by June we have something that

00:56:03,819 --> 00:56:14,020
we call at one point 0 for that for that

00:56:05,530 --> 00:56:17,800
spec sure great talk lots of details

00:56:14,020 --> 00:56:21,040
thanks a lot one little detail that you

00:56:17,800 --> 00:56:23,890
really mentioned on in passing is that

00:56:21,040 --> 00:56:26,410
rocket doesn't have a diamond now turns

00:56:23,890 --> 00:56:28,930
out that far developers docker and it's

00:56:26,410 --> 00:56:31,869
demon actually was a big win since they

00:56:28,930 --> 00:56:35,440
can use it on Windows and Mac as well so

00:56:31,869 --> 00:56:38,980
with taco machine for example so to have

00:56:35,440 --> 00:56:41,589
any thoughts on how to go how to

00:56:38,980 --> 00:56:44,200
continue developing software in a mixed

00:56:41,589 --> 00:56:46,960
environment while going forward with

00:56:44,200 --> 00:56:49,480
rocket mmm yeah it's a good question we

00:56:46,960 --> 00:56:51,460
and and to be honest that's not an area

00:56:49,480 --> 00:56:52,810
that we focused on for a long time we

00:56:51,460 --> 00:56:55,329
focused really on it being like a

00:56:52,810 --> 00:56:56,970
low-level tool and that did make it

00:56:55,329 --> 00:56:58,810
harder for you know developers to adopt

00:56:56,970 --> 00:57:00,849
what I'd say there's a couple of things

00:56:58,810 --> 00:57:03,700
first is that we want it to be like we

00:57:00,849 --> 00:57:04,839
want it to be part of you know something

00:57:03,700 --> 00:57:06,760
like good benetti's we just see it as

00:57:04,839 --> 00:57:07,770
this small component that's part of the

00:57:06,760 --> 00:57:09,840
communities thing so

00:57:07,770 --> 00:57:11,370
you would develop against basically KU

00:57:09,840 --> 00:57:12,960
benetti's in the KU benetti's api rather

00:57:11,370 --> 00:57:15,480
than necessarily need develop against

00:57:12,960 --> 00:57:18,150
rocket but in terms of you were

00:57:15,480 --> 00:57:19,530
developing against rocket itself the

00:57:18,150 --> 00:57:22,350
option today is you know we have a

00:57:19,530 --> 00:57:24,000
vagrant set up to run in a vagrant vm as

00:57:22,350 --> 00:57:26,940
i said we are kind of interested in

00:57:24,000 --> 00:57:30,360
exploring things like having a stage one

00:57:26,940 --> 00:57:31,830
that runs on on OSX there's not no real

00:57:30,360 --> 00:57:32,940
technical reason that I can think of why

00:57:31,830 --> 00:57:34,260
that where that shouldn't work it's just

00:57:32,940 --> 00:57:38,460
we haven't really put the work into it

00:57:34,260 --> 00:57:40,080
yet and then we've also toyed with the

00:57:38,460 --> 00:57:42,450
idea of having something similar to the

00:57:40,080 --> 00:57:45,710
docker demon that would expose an API to

00:57:42,450 --> 00:57:47,790
start containers and things like that I

00:57:45,710 --> 00:57:49,080
think it's I think we talked about it in

00:57:47,790 --> 00:57:50,910
some issues on github we just haven't

00:57:49,080 --> 00:57:53,070
prioritized it yet right now our main

00:57:50,910 --> 00:57:54,390
focus is on getting it integrated with

00:57:53,070 --> 00:57:56,400
the communities so basically all of the

00:57:54,390 --> 00:57:57,750
workers oriented around that and after

00:57:56,400 --> 00:57:59,640
that we might think about how we can

00:57:57,750 --> 00:58:02,700
make it a little bit more usable for

00:57:59,640 --> 00:58:04,650
developers um the other thing I would

00:58:02,700 --> 00:58:05,970
say on that is that it's a little bit

00:58:04,650 --> 00:58:07,500
one of the differences with rocket

00:58:05,970 --> 00:58:08,880
compared to dokur when you're doing

00:58:07,500 --> 00:58:11,730
development is that for example around

00:58:08,880 --> 00:58:12,990
building images we don't you know in the

00:58:11,730 --> 00:58:14,790
docker model that all happens through

00:58:12,990 --> 00:58:16,260
the daka demon whereas with rocket in a

00:58:14,790 --> 00:58:17,670
rocket itself can't doesn't know how to

00:58:16,260 --> 00:58:19,410
build images it doesn't really

00:58:17,670 --> 00:58:23,190
understand them and we have different

00:58:19,410 --> 00:58:25,800
tools like AC build which you know work

00:58:23,190 --> 00:58:27,110
against the app see spec so rocket

00:58:25,800 --> 00:58:31,370
understands the images that it builds

00:58:27,110 --> 00:58:34,260
and then this for example should work on

00:58:31,370 --> 00:58:35,640
actually it doesn't today but I'm there

00:58:34,260 --> 00:58:37,080
are different tools you would use rather

00:58:35,640 --> 00:58:39,240
than doing it all through the one single

00:58:37,080 --> 00:58:40,440
tool and those can be built against

00:58:39,240 --> 00:58:43,410
different platforms and stuff like that

00:58:40,440 --> 00:58:45,000
so it's quite a different sort of

00:58:43,410 --> 00:58:47,040
philosophically from the docker model

00:58:45,000 --> 00:58:48,750
today we make and we're definitely

00:58:47,040 --> 00:58:50,970
considering making ways of making that

00:58:48,750 --> 00:58:54,590
easier in future but right now we just

00:58:50,970 --> 00:58:54,590
want to focus on goober Nettie's

00:59:02,059 --> 00:59:08,930
and there has been recently published a

00:59:04,829 --> 00:59:11,670
white paper by docker related

00:59:08,930 --> 00:59:13,979
organization detailing the security and

00:59:11,670 --> 00:59:18,029
secure default I know that rocket has

00:59:13,979 --> 00:59:20,249
been kind of pushing the security way a

00:59:18,029 --> 00:59:22,650
little earlier than that and so can you

00:59:20,249 --> 00:59:25,469
comment on that a hundred page white

00:59:22,650 --> 00:59:28,079
paper detailing that docker is kind of

00:59:25,469 --> 00:59:30,209
secured by default and rocket is not

00:59:28,079 --> 00:59:32,039
really sure first I'll say we're

00:59:30,209 --> 00:59:34,140
thrilled that doctor is taking security

00:59:32,039 --> 00:59:36,150
really seriously now or at least

00:59:34,140 --> 00:59:37,769
purporting to on the specifics of that

00:59:36,150 --> 00:59:39,329
white paper we think they raised some

00:59:37,769 --> 00:59:40,920
valued issues and some issues that were

00:59:39,329 --> 00:59:43,380
a little bit strange like when they

00:59:40,920 --> 00:59:45,449
would you know have the same you know

00:59:43,380 --> 00:59:47,039
same implement its aim status in a

00:59:45,449 --> 00:59:48,839
column but the rocket column would be

00:59:47,039 --> 00:59:50,759
kind of yellow whereas the doctor on

00:59:48,839 --> 00:59:51,869
wasn't well for no particular reason so

00:59:50,759 --> 00:59:54,690
there are a few strange things in that

00:59:51,869 --> 00:59:55,949
report but i will say that they there

00:59:54,690 --> 00:59:57,299
are a couple of things in there that we

00:59:55,949 --> 00:59:59,130
you know definitely took to heart that

00:59:57,299 --> 01:00:00,839
we had on the roadmap as kind of known

00:59:59,130 --> 01:00:04,619
issues but we just hadn't got around to

01:00:00,839 --> 01:00:06,660
sorting out i would say look looked

01:00:04,619 --> 01:00:08,160
looked to a blog look expect a blog post

01:00:06,660 --> 01:00:10,680
from us in the next couple of weeks i'm

01:00:08,160 --> 01:00:12,059
detailing you know how we some of our

01:00:10,680 --> 01:00:13,319
kind of response to that there's a lot

01:00:12,059 --> 01:00:16,019
of stuff that we've been working on the

01:00:13,319 --> 01:00:16,920
last couple of weeks which we think we

01:00:16,019 --> 01:00:18,059
think a lot of the stuff in that white

01:00:16,920 --> 01:00:20,579
paper is not necessarily accurate

01:00:18,059 --> 01:00:22,619
up-to-date about the state of rocket but

01:00:20,579 --> 01:00:25,650
but we're very happy that there have a

01:00:22,619 --> 01:00:27,359
new emphasis on security since we have a

01:00:25,650 --> 01:00:28,349
lot you know as core OS we still have a

01:00:27,359 --> 01:00:29,699
lot of people using docker and we're

01:00:28,349 --> 01:00:34,650
happy them to keep using docker as long

01:00:29,699 --> 01:00:38,420
as it's makes sense okay thank you very

01:00:34,650 --> 01:00:38,420

YouTube URL: https://www.youtube.com/watch?v=k9KNahLcyHo


