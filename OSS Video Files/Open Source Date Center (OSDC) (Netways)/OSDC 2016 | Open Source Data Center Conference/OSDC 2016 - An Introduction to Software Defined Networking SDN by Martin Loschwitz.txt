Title: OSDC 2016 - An Introduction to Software Defined Networking SDN by Martin Loschwitz
Publication date: 2016-05-03
Playlist: OSDC 2016 | Open Source Data Center Conference
Description: 
	Clouds and massively scalable setups impose new requirements on datacenters; hardly anywhere does this become as obvious as in the storage and networking areas. While a number of Software Defined Storage (SDS) solutions are established by now, Software Defined Networking (SDN) is still a new topic for many administrators and IT managers. This presentation will give a basic introduction into Software Defined Networking; it will explain the basic concepts behind SDN and why it is required in modern datacenters. In addition, it will give a quick overview over the market and compare three solutions, namely Open vSwitch, Midonet by Midokura and OpenContrail by Juniper
Captions: 
	00:00:11,710 --> 00:00:17,300
okay welcome back everyone I hope you're

00:00:14,810 --> 00:00:19,100
ready for Martin Luther it's a topic

00:00:17,300 --> 00:00:23,180
about an introduction to Software

00:00:19,100 --> 00:00:25,040
Defined Networking enjoy thank you sir

00:00:23,180 --> 00:00:28,160
there's no microphone work can the

00:00:25,040 --> 00:00:30,050
people in allows ray understand me that

00:00:28,160 --> 00:00:32,690
sounds great welcome everybody to this

00:00:30,050 --> 00:00:34,820
presentation before i get into the

00:00:32,690 --> 00:00:36,770
subject of SDN i will actually introduce

00:00:34,820 --> 00:00:38,870
myself my name is Martin lush woods I

00:00:36,770 --> 00:00:42,020
work here in Berlin as you can see on

00:00:38,870 --> 00:00:44,180
the picture i work as the team lead for

00:00:42,020 --> 00:00:46,879
the OpenStack team at sea sola from sis

00:00:44,180 --> 00:00:49,339
11 is a company doing web hosting and we

00:00:46,879 --> 00:00:51,650
have invested roughly two years of work

00:00:49,339 --> 00:00:53,930
into evaluating OpenStack and bringing

00:00:51,650 --> 00:00:55,699
OpenStack into a state in which it

00:00:53,930 --> 00:00:57,830
actually does what we expect it to do

00:00:55,699 --> 00:01:00,680
and one of the things that we have

00:00:57,830 --> 00:01:02,089
evaluated a lot during this time was

00:01:00,680 --> 00:01:04,729
software-defined networking along with

00:01:02,089 --> 00:01:07,370
multiple solutions and implementations

00:01:04,729 --> 00:01:09,650
and today that is what I stand here in

00:01:07,370 --> 00:01:12,200
front of you and to our presentation on

00:01:09,650 --> 00:01:14,090
software-defined networking so what is

00:01:12,200 --> 00:01:17,180
soft when you find networking software

00:01:14,090 --> 00:01:20,360
defined networking really is network

00:01:17,180 --> 00:01:25,460
virtualization thanks sorry any

00:01:20,360 --> 00:01:26,750
questions I was trying to be pull out

00:01:25,460 --> 00:01:29,270
for those people needing to leave a bit

00:01:26,750 --> 00:01:31,100
earlier of course the presentation is

00:01:29,270 --> 00:01:32,750
going to carry on with a more detailed

00:01:31,100 --> 00:01:35,150
inside into software defined networking

00:01:32,750 --> 00:01:38,210
and before we understand what Sdn

00:01:35,150 --> 00:01:40,370
actually is we need to understand how IT

00:01:38,210 --> 00:01:42,710
has changed over the last few years

00:01:40,370 --> 00:01:44,150
because that is fundamental to the

00:01:42,710 --> 00:01:47,480
understanding of software-defined

00:01:44,150 --> 00:01:50,840
networking so years ago individual

00:01:47,480 --> 00:01:53,420
servers had individual tasks there was a

00:01:50,840 --> 00:01:55,610
server or there were many service in one

00:01:53,420 --> 00:01:58,400
data center and then there was a task

00:01:55,610 --> 00:02:00,500
the individual server was doing for

00:01:58,400 --> 00:02:02,030
instance monitoring could be such a task

00:02:00,500 --> 00:02:03,740
so there was one server and there was a

00:02:02,030 --> 00:02:06,500
monitoring system running on top of that

00:02:03,740 --> 00:02:09,800
server and there was no other task this

00:02:06,500 --> 00:02:12,050
server was acting for and in fact over

00:02:09,800 --> 00:02:14,840
the last few years the capacity of

00:02:12,050 --> 00:02:17,180
service has increased continuously so by

00:02:14,840 --> 00:02:19,430
now you can actually buy not only

00:02:17,180 --> 00:02:22,280
servers but you can buy big service lots

00:02:19,430 --> 00:02:24,750
of CPU lots of ram and it's almost

00:02:22,280 --> 00:02:27,090
impossible to use this with

00:02:24,750 --> 00:02:28,680
application unless you're using Java of

00:02:27,090 --> 00:02:31,320
course but we will not get into that

00:02:28,680 --> 00:02:34,110
today so the interesting question is how

00:02:31,320 --> 00:02:36,330
can I turn all the capacity in my rack

00:02:34,110 --> 00:02:37,800
inter actual food in my fridge because

00:02:36,330 --> 00:02:40,050
that is what it's all about right I'm

00:02:37,800 --> 00:02:42,360
buying hardware and I want to use it to

00:02:40,050 --> 00:02:44,130
the best to make money and to make as

00:02:42,360 --> 00:02:45,959
much money as I can with the hardware

00:02:44,130 --> 00:02:48,200
that I have and this is where

00:02:45,959 --> 00:02:52,140
virtualization comes in virtualization

00:02:48,200 --> 00:02:54,600
really follows a very simple idea the

00:02:52,140 --> 00:02:56,970
idea behind virtualization is to run

00:02:54,600 --> 00:02:59,760
multiple workloads at the same time on

00:02:56,970 --> 00:03:02,280
the same machine of course every

00:02:59,760 --> 00:03:04,110
workload needs to be strictly isolated

00:03:02,280 --> 00:03:07,700
from the other workloads that I have on

00:03:04,110 --> 00:03:10,709
the machine I still have one big server

00:03:07,700 --> 00:03:12,420
but I do not have one task for a machine

00:03:10,709 --> 00:03:14,700
anymore instead I have multiple

00:03:12,420 --> 00:03:17,150
workloads so I can have a monitoring

00:03:14,700 --> 00:03:19,440
system in a virtual machine I can have a

00:03:17,150 --> 00:03:21,720
database I can have a wordpress

00:03:19,440 --> 00:03:24,930
installation on a web server I can have

00:03:21,720 --> 00:03:27,060
a metering system all these applications

00:03:24,930 --> 00:03:29,130
are running separated from each other

00:03:27,060 --> 00:03:31,620
inside virtual machines on the same

00:03:29,130 --> 00:03:34,080
server at the same time and I've been

00:03:31,620 --> 00:03:36,150
using the word virtualization a lot in

00:03:34,080 --> 00:03:38,040
the last few minutes the interesting

00:03:36,150 --> 00:03:39,810
thing to understand the important thing

00:03:38,040 --> 00:03:42,330
to understand in this case is that

00:03:39,810 --> 00:03:44,400
virtualization in the sense that i have

00:03:42,330 --> 00:03:46,410
used word in the last minutes really

00:03:44,400 --> 00:03:48,750
refers to the virtualization of

00:03:46,410 --> 00:03:52,140
computing power so we are not talking so

00:03:48,750 --> 00:03:53,880
much about virtualization per se but

00:03:52,140 --> 00:03:55,980
really we are talking about one

00:03:53,880 --> 00:03:59,989
individual factor of virtualization and

00:03:55,980 --> 00:04:02,970
that is virtualizing computing power

00:03:59,989 --> 00:04:04,709
visualizing computing power by now is a

00:04:02,970 --> 00:04:07,410
very well-established technology we have

00:04:04,709 --> 00:04:10,440
kvm we have Zen we have vmware we have

00:04:07,410 --> 00:04:13,769
hyper-v for every major operating system

00:04:10,440 --> 00:04:15,570
there is at least one big solution for

00:04:13,769 --> 00:04:17,609
computing virtualization available and

00:04:15,570 --> 00:04:20,220
for most operating systems there are

00:04:17,609 --> 00:04:22,919
multiple solutions available for

00:04:20,220 --> 00:04:25,200
virtualization so in fact when it comes

00:04:22,919 --> 00:04:26,850
to computing virtualization everything

00:04:25,200 --> 00:04:28,740
is super awesome and we couldn't be

00:04:26,850 --> 00:04:30,660
happier with the situation that it

00:04:28,740 --> 00:04:33,300
currently is and now the interesting

00:04:30,660 --> 00:04:36,630
question is how does virtualizing

00:04:33,300 --> 00:04:39,020
network work or how has it worked in the

00:04:36,630 --> 00:04:41,569
last year's how have we actually doesn't

00:04:39,020 --> 00:04:43,460
at the interesting answer to that

00:04:41,569 --> 00:04:46,160
question is actually we haven't

00:04:43,460 --> 00:04:48,199
networking virtualization has not really

00:04:46,160 --> 00:04:51,349
happened what we have done is we have

00:04:48,199 --> 00:04:54,259
done a concept in which we treat and

00:04:51,349 --> 00:04:56,360
networking for virtual machines exactly

00:04:54,259 --> 00:04:58,819
like we would have done networking for

00:04:56,360 --> 00:05:01,610
actual physical machines in a great

00:04:58,819 --> 00:05:03,710
example for that is a setup that I have

00:05:01,610 --> 00:05:06,860
personally seen many times in the world

00:05:03,710 --> 00:05:08,900
I have tapped interfaces and i connect

00:05:06,860 --> 00:05:11,240
my virtual machines with their tap

00:05:08,900 --> 00:05:13,370
interfaces to bridge and I connect a

00:05:11,240 --> 00:05:15,560
VLAN tag device on the other side of

00:05:13,370 --> 00:05:18,110
that bridge that I call that virtual

00:05:15,560 --> 00:05:19,789
networking it's not it's exactly what I

00:05:18,110 --> 00:05:21,889
would do an actual iron an actual bare

00:05:19,789 --> 00:05:24,020
metal and that is not virtualization

00:05:21,889 --> 00:05:26,030
that really is just applying the

00:05:24,020 --> 00:05:28,880
concepts that we have used up to this

00:05:26,030 --> 00:05:31,940
point on the actual virtual machine that

00:05:28,880 --> 00:05:33,590
I have every person involved in

00:05:31,940 --> 00:05:35,770
software-defined networking at this

00:05:33,590 --> 00:05:37,759
point woods and that would be the nicest

00:05:35,770 --> 00:05:39,740
reaction you could get from that person

00:05:37,759 --> 00:05:41,419
just ask you if you are trying to get

00:05:39,740 --> 00:05:44,030
them because that is not virtualization

00:05:41,419 --> 00:05:46,880
that is in fact only applying old

00:05:44,030 --> 00:05:49,159
principles to a new scenario and

00:05:46,880 --> 00:05:51,020
surprisingly this worked well for quite

00:05:49,159 --> 00:05:52,669
a while we have done this for years we

00:05:51,020 --> 00:05:55,370
have basically set up virtual machines

00:05:52,669 --> 00:05:57,800
like this for a number of years it

00:05:55,370 --> 00:05:59,990
involves a lot of manual configuration

00:05:57,800 --> 00:06:01,639
so whenever somebody needs original

00:05:59,990 --> 00:06:03,699
machine somebody needs to configure a

00:06:01,639 --> 00:06:06,650
proper network device on that machine

00:06:03,699 --> 00:06:09,080
needs to act and needs to ensure that

00:06:06,650 --> 00:06:11,029
bonding is available on that machine and

00:06:09,080 --> 00:06:13,009
there at various I properly configured

00:06:11,029 --> 00:06:15,169
switch port to which that virtual

00:06:13,009 --> 00:06:17,599
machine can connect to and all this

00:06:15,169 --> 00:06:19,250
enquires manual intervention and it

00:06:17,599 --> 00:06:21,469
requires a lot of intervention and now

00:06:19,250 --> 00:06:23,419
the interesting question is why is that

00:06:21,469 --> 00:06:25,550
not good enough anymore why can we not

00:06:23,419 --> 00:06:28,039
continue to do what we have done in the

00:06:25,550 --> 00:06:31,880
last year's and what obviously has

00:06:28,039 --> 00:06:34,330
worked out rather well so who have used

00:06:31,880 --> 00:06:34,330
in the cloud

00:06:35,630 --> 00:06:39,180
this is impossible everybody's in the

00:06:37,980 --> 00:06:42,590
clock by now right the glad is

00:06:39,180 --> 00:06:42,590
everywhere so again who's in the cloud

00:06:43,040 --> 00:06:49,950
who's not in the cloud who doesn't want

00:06:46,350 --> 00:06:52,080
to be in the cloud okay anyway the cloud

00:06:49,950 --> 00:06:53,520
in this case in this context is a very

00:06:52,080 --> 00:06:56,610
important thing to understand because

00:06:53,520 --> 00:06:58,790
the cloud is the one reason that enables

00:06:56,610 --> 00:07:00,720
the requirements for new ways of

00:06:58,790 --> 00:07:03,000
virtualization on the networking level

00:07:00,720 --> 00:07:04,680
in fact by now as I have already

00:07:03,000 --> 00:07:06,180
mentioned the cloud is everywhere so

00:07:04,680 --> 00:07:09,000
everything is the cloud and everybody is

00:07:06,180 --> 00:07:11,310
in the cloud if you buy a local storage

00:07:09,000 --> 00:07:12,750
system by qnap and install it behind

00:07:11,310 --> 00:07:14,880
your telephone line you are in the cloud

00:07:12,750 --> 00:07:18,210
according to cube I don't know what

00:07:14,880 --> 00:07:20,940
these guys I'm not allowed to say that

00:07:18,210 --> 00:07:23,460
now anyway so um I don't know what

00:07:20,940 --> 00:07:24,810
exactly the marketing definition of

00:07:23,460 --> 00:07:26,670
cloud is but in fact there is a very

00:07:24,810 --> 00:07:29,670
clear definition of the cut per se and

00:07:26,670 --> 00:07:32,850
the cloud in fact is not so much

00:07:29,670 --> 00:07:35,520
something completely new it Morris

00:07:32,850 --> 00:07:37,590
logical evolution of virtualization and

00:07:35,520 --> 00:07:39,419
actually of computing virtualization

00:07:37,590 --> 00:07:42,240
because what has the cloud really done

00:07:39,419 --> 00:07:43,980
the cloud adds two features to computing

00:07:42,240 --> 00:07:46,950
virtualization namely the first

00:07:43,980 --> 00:07:49,860
important thing automation so I will no

00:07:46,950 --> 00:07:52,140
longer have to manually start a virtual

00:07:49,860 --> 00:07:54,450
machine I can actually just create a

00:07:52,140 --> 00:07:56,400
template and I can start as many

00:07:54,450 --> 00:07:59,130
instances of one particular virtual

00:07:56,400 --> 00:08:01,560
machine as i think i need and i can do

00:07:59,130 --> 00:08:03,180
that again and again i can just do it as

00:08:01,560 --> 00:08:04,650
many times as i need to and in the end i

00:08:03,180 --> 00:08:07,530
will have a number of setups all

00:08:04,650 --> 00:08:09,600
centrally managed all set up completely

00:08:07,530 --> 00:08:12,300
automatically and everything is going to

00:08:09,600 --> 00:08:16,070
be fine at the second important factor

00:08:12,300 --> 00:08:18,780
is only meant capabilities so I cloud

00:08:16,070 --> 00:08:21,840
actually allows me to just log in create

00:08:18,780 --> 00:08:24,600
an account at my credit card data and I

00:08:21,840 --> 00:08:26,520
can start virtual machines and this

00:08:24,600 --> 00:08:28,950
obviously creates a problem because by

00:08:26,520 --> 00:08:31,440
now the expectation is that I can just

00:08:28,950 --> 00:08:32,760
do this at any point in time I need to

00:08:31,440 --> 00:08:35,190
be able to log into the web interface

00:08:32,760 --> 00:08:37,830
and do that and it's impossible for me

00:08:35,190 --> 00:08:40,200
to wait for somebody to create you know

00:08:37,830 --> 00:08:42,659
my account to start regional machines

00:08:40,200 --> 00:08:45,240
for me or to ensure that these virtual

00:08:42,659 --> 00:08:47,810
machines network configuration is proper

00:08:45,240 --> 00:08:49,910
for the host that the vm is running on

00:08:47,810 --> 00:08:52,010
and this is where we have an obvious

00:08:49,910 --> 00:08:53,180
clash between conventional networking

00:08:52,010 --> 00:08:55,100
and cloud computing and cloud computing

00:08:53,180 --> 00:08:57,620
is to one reason that we need to look

00:08:55,100 --> 00:09:01,010
into new ways of virtualizing networks

00:08:57,620 --> 00:09:03,860
in our setups conventional networking

00:09:01,010 --> 00:09:05,570
makes three basic assumptions number one

00:09:03,860 --> 00:09:07,910
is the network is a managed centrally

00:09:05,570 --> 00:09:10,190
and relies on hardware functions such as

00:09:07,910 --> 00:09:11,690
VLAN whenever you take a look at

00:09:10,190 --> 00:09:13,970
conventional setups you will likely find

00:09:11,690 --> 00:09:15,800
switches actually doing management

00:09:13,970 --> 00:09:17,779
capabilities and then the one that is

00:09:15,800 --> 00:09:22,010
used most of the time are vlans so I

00:09:17,779 --> 00:09:24,710
have a logical separation of individual

00:09:22,010 --> 00:09:26,390
customers on the same switch I have

00:09:24,710 --> 00:09:28,490
actually something on my switch that

00:09:26,390 --> 00:09:31,040
ensures that customer a can not see the

00:09:28,490 --> 00:09:34,460
packets of customer be and the other way

00:09:31,040 --> 00:09:36,740
around the second assumption is machines

00:09:34,460 --> 00:09:39,230
belong to specific customers so I go I

00:09:36,740 --> 00:09:41,150
install a computer I'd install a server

00:09:39,230 --> 00:09:43,970
and that server is going to belong to

00:09:41,150 --> 00:09:45,860
this particular customer nobody else no

00:09:43,970 --> 00:09:48,830
other customer will be running stuff on

00:09:45,860 --> 00:09:50,720
that word on that machine nobody will be

00:09:48,830 --> 00:09:53,360
ever able to use it except for the one

00:09:50,720 --> 00:09:57,620
customer that I bought this machine for

00:09:53,360 --> 00:09:59,060
and that I built this machine to and the

00:09:57,620 --> 00:10:01,040
first assumption is there's little to no

00:09:59,060 --> 00:10:03,680
requirement for scale out so I customer

00:10:01,040 --> 00:10:06,080
now creates an order and she needs a few

00:10:03,680 --> 00:10:08,210
virtual machines or a server and we

00:10:06,080 --> 00:10:09,920
create the setup for the customer and

00:10:08,210 --> 00:10:11,870
then everything is going to be fine for

00:10:09,920 --> 00:10:13,940
a number of months before the customer

00:10:11,870 --> 00:10:15,500
gets back to me and tells me okay I need

00:10:13,940 --> 00:10:17,930
another virtual machine and as soon as

00:10:15,500 --> 00:10:20,450
the customer creates or needs another

00:10:17,930 --> 00:10:24,290
which little machine as a provider we

00:10:20,450 --> 00:10:26,780
just created this is a very manual

00:10:24,290 --> 00:10:28,700
process never we need to create a

00:10:26,780 --> 00:10:30,320
virtual machine we need to create the vm

00:10:28,700 --> 00:10:31,850
per se we need to create the storage for

00:10:30,320 --> 00:10:33,350
it we need to create the port

00:10:31,850 --> 00:10:36,680
configuration everything i've already

00:10:33,350 --> 00:10:38,690
mentioned obviously this doesn't scale

00:10:36,680 --> 00:10:40,250
and this doesn't work and this is

00:10:38,690 --> 00:10:42,920
exactly where cloud computing comes in

00:10:40,250 --> 00:10:44,779
to help it counts first of all the

00:10:42,920 --> 00:10:47,240
networking is managed by customers and

00:10:44,779 --> 00:10:49,370
cannot rely on hardware functionality so

00:10:47,240 --> 00:10:51,350
I cannot assume that I can reconfigure

00:10:49,370 --> 00:10:53,570
my switch just because a new customer

00:10:51,350 --> 00:10:55,700
has registered himself and has created

00:10:53,570 --> 00:11:00,020
an account and now wants to use a

00:10:55,700 --> 00:11:01,760
virtual machine inside the setup service

00:11:00,020 --> 00:11:04,640
host VMs of multiple different

00:11:01,760 --> 00:11:06,950
customers in fact I cannot dedicate a

00:11:04,640 --> 00:11:09,020
server to a particular customer inside a

00:11:06,950 --> 00:11:10,940
cloud because all servers need to be

00:11:09,020 --> 00:11:12,710
exactly the same they need to be

00:11:10,940 --> 00:11:15,200
configured the same they need to have

00:11:12,710 --> 00:11:16,880
similar capabilities and I must be able

00:11:15,200 --> 00:11:19,310
to start any customers which little

00:11:16,880 --> 00:11:21,230
machine on any server because everything

00:11:19,310 --> 00:11:22,910
else does not scale and anything that

00:11:21,230 --> 00:11:24,560
doesn't scale inside cloud computing

00:11:22,910 --> 00:11:27,560
environments it's not going to work very

00:11:24,560 --> 00:11:29,260
well which'll machines come and go

00:11:27,560 --> 00:11:32,030
static configuration doesn't work I

00:11:29,260 --> 00:11:34,220
cannot assume that a customer does not

00:11:32,030 --> 00:11:36,380
want a new machine just because it

00:11:34,220 --> 00:11:39,080
created five of them yesterday at any

00:11:36,380 --> 00:11:41,420
point in time inside clouds I need to

00:11:39,080 --> 00:11:43,700
expect my customer to come and say okay

00:11:41,420 --> 00:11:46,100
I need another 200 virtual instances and

00:11:43,700 --> 00:11:47,750
I need to create them myself because I

00:11:46,100 --> 00:11:49,550
have the configuration for that in place

00:11:47,750 --> 00:11:51,350
I have all my automation frameworks

00:11:49,550 --> 00:11:53,570
properly configured and I can just

00:11:51,350 --> 00:11:55,190
create those two hundred things and if

00:11:53,570 --> 00:11:57,410
my customer comes to me and tells me I

00:11:55,190 --> 00:12:00,200
need 200 VMS i just cannot sell one of

00:11:57,410 --> 00:12:02,360
my administrators okay please create 200

00:12:00,200 --> 00:12:03,740
bonded ports on individual service

00:12:02,360 --> 00:12:06,710
because that is what the requirement

00:12:03,740 --> 00:12:08,780
currently is that is exactly by

00:12:06,710 --> 00:12:10,940
conventional networking and all this

00:12:08,780 --> 00:12:13,010
manual stuff creating ports configuring

00:12:10,940 --> 00:12:15,170
switches does not work in cloud

00:12:13,010 --> 00:12:16,670
computing environments and thisis what

00:12:15,170 --> 00:12:19,220
requirements for software-defined

00:12:16,670 --> 00:12:21,560
networking actually comes from the

00:12:19,220 --> 00:12:24,050
interesting question is can we fix it so

00:12:21,560 --> 00:12:25,810
what can we do to work around the

00:12:24,050 --> 00:12:28,730
shortcomings that I have just mentioned

00:12:25,810 --> 00:12:30,500
number one network virtualization needs

00:12:28,730 --> 00:12:33,350
to fix these three issues of

00:12:30,500 --> 00:12:35,030
conventional network it needs to make

00:12:33,350 --> 00:12:38,270
network and functionality independent of

00:12:35,030 --> 00:12:40,310
the hardware in use I cannot ensure that

00:12:38,270 --> 00:12:42,320
configuring a switch as possible so I

00:12:40,310 --> 00:12:44,450
cannot rely on any home functionality

00:12:42,320 --> 00:12:47,510
that mice which is only going to provide

00:12:44,450 --> 00:12:49,010
if I configure it accordingly in fact I

00:12:47,510 --> 00:12:52,610
need to turn my switch into something

00:12:49,010 --> 00:12:54,200
very dump my cloud computing and

00:12:52,610 --> 00:12:55,700
virtualization environment needs to

00:12:54,200 --> 00:12:57,740
allow me to configure the whole network

00:12:55,700 --> 00:13:00,650
from within the actual platform because

00:12:57,740 --> 00:13:02,090
my customers need to maintain their own

00:13:00,650 --> 00:13:04,670
network configuration and there are

00:13:02,090 --> 00:13:05,960
network topology I need to enable them

00:13:04,670 --> 00:13:07,850
to do that I need to offer them

00:13:05,960 --> 00:13:10,190
functionality to just create their own

00:13:07,850 --> 00:13:13,430
virtual networks that any manual

00:13:10,190 --> 00:13:15,950
intervention from an administrator and

00:13:13,430 --> 00:13:17,600
the cloud also needs to make it easier

00:13:15,950 --> 00:13:20,240
for customers to set up their own

00:13:17,600 --> 00:13:23,089
network in topology in fact inside

00:13:20,240 --> 00:13:25,640
clouds as a provider I do not want to

00:13:23,089 --> 00:13:27,230
have anything to do with my customers

00:13:25,640 --> 00:13:29,210
doing then I work in configuration I

00:13:27,230 --> 00:13:31,160
want them to do this all on their own

00:13:29,210 --> 00:13:32,750
and of course they are free to contact

00:13:31,160 --> 00:13:34,940
me if they run into a technical issue

00:13:32,750 --> 00:13:36,680
that is something that is up to them I

00:13:34,940 --> 00:13:38,300
do not want to know anything about my

00:13:36,680 --> 00:13:40,100
customers networks because that is

00:13:38,300 --> 00:13:42,709
something that they need to do and only

00:13:40,100 --> 00:13:45,830
they have the actual knowledge to run

00:13:42,709 --> 00:13:47,540
would ever set up they may require this

00:13:45,830 --> 00:13:49,640
is a screenshot taken from OpenStack

00:13:47,540 --> 00:13:51,950
horizon so this is the ritual

00:13:49,640 --> 00:13:53,480
software-defined networking module that

00:13:51,950 --> 00:13:55,790
you can find it opens like here you can

00:13:53,480 --> 00:13:57,560
see the customers have created which

00:13:55,790 --> 00:13:59,270
will networks for themselves we have

00:13:57,560 --> 00:14:01,640
number of external networks we have

00:13:59,270 --> 00:14:04,100
internal networks and customers are free

00:14:01,640 --> 00:14:06,410
to create as many ritual networks as

00:14:04,100 --> 00:14:09,350
they think that require inside this

00:14:06,410 --> 00:14:11,360
platform so in fact whatever customers

00:14:09,350 --> 00:14:13,000
do they must be able to do it on their

00:14:11,360 --> 00:14:25,970
own and they may not require any

00:14:13,000 --> 00:14:27,680
intervention from me as the provider how

00:14:25,970 --> 00:14:29,330
can we do that what is the technical

00:14:27,680 --> 00:14:31,010
means what are the technical means to

00:14:29,330 --> 00:14:33,770
actually implement this type of

00:14:31,010 --> 00:14:35,240
networking inside our installation the

00:14:33,770 --> 00:14:36,560
most important thing you need to

00:14:35,240 --> 00:14:38,570
understand about software-defined

00:14:36,560 --> 00:14:40,880
networking is that software-defined

00:14:38,570 --> 00:14:42,740
networking really it's about decoupling

00:14:40,880 --> 00:14:45,440
decoupling is a word that you will hear

00:14:42,740 --> 00:14:47,930
a lot in the clap context and it hardly

00:14:45,440 --> 00:14:49,839
applies as well to anything as it does

00:14:47,930 --> 00:14:52,220
to software-defined networking

00:14:49,839 --> 00:14:53,810
decoupling means separating one thing

00:14:52,220 --> 00:14:56,420
from another what are we actually

00:14:53,810 --> 00:14:59,570
decoupling what are we dividing from

00:14:56,420 --> 00:15:02,140
each other we are dividing networking

00:14:59,570 --> 00:15:04,970
hardware and networking functionality

00:15:02,140 --> 00:15:06,680
this is the part where I actually

00:15:04,970 --> 00:15:09,230
earlier mentioned that you cannot

00:15:06,680 --> 00:15:11,899
reconfigure your switch so if we have a

00:15:09,230 --> 00:15:14,390
switch and we now rely on the switches

00:15:11,899 --> 00:15:15,890
functionality and we need to find a way

00:15:14,390 --> 00:15:17,209
to no longer do that we need to

00:15:15,890 --> 00:15:19,160
implement the functionality by the

00:15:17,209 --> 00:15:21,980
switch somewhere else and we need to

00:15:19,160 --> 00:15:24,760
implement it in a way that allows us to

00:15:21,980 --> 00:15:27,430
influence it from the running setup

00:15:24,760 --> 00:15:31,720
here's what you typically have inside a

00:15:27,430 --> 00:15:33,070
data center you have a host in this case

00:15:31,720 --> 00:15:34,510
that is the host running our original

00:15:33,070 --> 00:15:36,790
machine so this is the hypervisor and

00:15:34,510 --> 00:15:38,560
there's the switch the switch typically

00:15:36,790 --> 00:15:40,510
has two components the control plane and

00:15:38,560 --> 00:15:42,310
the data plane the data plane is the

00:15:40,510 --> 00:15:44,350
boring part of the switch because all

00:15:42,310 --> 00:15:46,660
the data plane really does is sending

00:15:44,350 --> 00:15:48,970
packets from one port to another so as

00:15:46,660 --> 00:15:51,310
soon as you just use a switch to send

00:15:48,970 --> 00:15:53,170
packets from one server or from one

00:15:51,310 --> 00:15:55,270
virtual machine through a server to

00:15:53,170 --> 00:15:58,150
another vm on another server all you

00:15:55,270 --> 00:16:00,160
really use as a data point the VLAN

00:15:58,150 --> 00:16:01,720
capabilities and all of our management

00:16:00,160 --> 00:16:04,000
functionality is typically provided by

00:16:01,720 --> 00:16:06,790
switches actually reside in the control

00:16:04,000 --> 00:16:08,830
plane and what we need to do is we need

00:16:06,790 --> 00:16:10,660
to decouple the control plane from the

00:16:08,830 --> 00:16:13,240
data plane so we need to make sure that

00:16:10,660 --> 00:16:16,120
these two components are separated from

00:16:13,240 --> 00:16:18,880
each other and we need to move the

00:16:16,120 --> 00:16:20,560
control plane onto the host why do we

00:16:18,880 --> 00:16:21,970
need to move down to the house because

00:16:20,560 --> 00:16:24,550
that's the place that we can influence

00:16:21,970 --> 00:16:27,030
from our cloud setup we have components

00:16:24,550 --> 00:16:29,260
of the cloud running on our host and

00:16:27,030 --> 00:16:31,900
actually we can influence the

00:16:29,260 --> 00:16:33,820
configuration of the host and hence we

00:16:31,900 --> 00:16:36,040
can influence the configuration of the

00:16:33,820 --> 00:16:39,130
control plane under host if we actually

00:16:36,040 --> 00:16:40,720
visualize our control plane and that's

00:16:39,130 --> 00:16:43,030
really what software-defined networking

00:16:40,720 --> 00:16:44,860
actually tries to achieve it really

00:16:43,030 --> 00:16:47,560
tries to decouple the data plane and the

00:16:44,860 --> 00:16:49,510
control plane on switches of course this

00:16:47,560 --> 00:16:51,220
effectively renders switches into dump

00:16:49,510 --> 00:16:52,930
packet forwarding devices i already

00:16:51,220 --> 00:16:55,330
mentioned that the important thing to

00:16:52,930 --> 00:16:57,310
understand is any major management

00:16:55,330 --> 00:16:59,860
functionality your switch is able to

00:16:57,310 --> 00:17:02,770
provide in a cloud computing setup it's

00:16:59,860 --> 00:17:04,839
probably going to be useless and I've

00:17:02,770 --> 00:17:06,280
seen customers running this with

00:17:04,839 --> 00:17:09,370
switches that didn't have any management

00:17:06,280 --> 00:17:10,839
capabilities at all this is something

00:17:09,370 --> 00:17:13,420
that actually can turn into a problem

00:17:10,839 --> 00:17:14,800
because typically those switches that do

00:17:13,420 --> 00:17:17,980
not have any management capabilities

00:17:14,800 --> 00:17:19,870
also provide only very few resources so

00:17:17,980 --> 00:17:22,720
they are not very capable of doing

00:17:19,870 --> 00:17:24,579
anything but in fact you wouldn't need

00:17:22,720 --> 00:17:26,290
most of the management functionality on

00:17:24,579 --> 00:17:28,270
your switch you should be able to run a

00:17:26,290 --> 00:17:30,490
software-defined networking without any

00:17:28,270 --> 00:17:32,680
particular switch configuration at all

00:17:30,490 --> 00:17:34,780
the network that your machines your

00:17:32,680 --> 00:17:37,240
actual bare metal servers belong to in

00:17:34,780 --> 00:17:38,840
fact should be a completely flat network

00:17:37,240 --> 00:17:42,799
that all servers

00:17:38,840 --> 00:17:45,159
r equal parts of step number two on our

00:17:42,799 --> 00:17:47,659
way to prepare network virtualization

00:17:45,159 --> 00:17:49,190
make your virtualization configure the

00:17:47,659 --> 00:17:51,590
network for you so whatever sort of

00:17:49,190 --> 00:17:53,150
virtualization you use and even if it's

00:17:51,590 --> 00:17:55,370
not the original ization solution itself

00:17:53,150 --> 00:17:56,720
but more precisely the software that is

00:17:55,370 --> 00:17:59,059
running your cloud computing environment

00:17:56,720 --> 00:18:01,789
such as OpenStack you need to make that

00:17:59,059 --> 00:18:04,159
port influence your configuration so in

00:18:01,789 --> 00:18:06,409
fact you need to use OpenStack or a

00:18:04,159 --> 00:18:09,020
cloud stack or VMware or whatever your

00:18:06,409 --> 00:18:11,299
solution for virtualization is and you

00:18:09,020 --> 00:18:13,549
need to make that component configure

00:18:11,299 --> 00:18:17,539
the control plane on your individual

00:18:13,549 --> 00:18:18,919
host and that's the way to go in fact if

00:18:17,539 --> 00:18:20,570
you manage to do that you can offer your

00:18:18,919 --> 00:18:22,309
customers a completely virtualized

00:18:20,570 --> 00:18:24,620
network environment and they will be

00:18:22,309 --> 00:18:28,390
able to perform any configuration they

00:18:24,620 --> 00:18:31,610
consider necessary inside the setup

00:18:28,390 --> 00:18:33,440
let's die for the bitter a delay a bit

00:18:31,610 --> 00:18:35,240
deeper into this let's take a look at

00:18:33,440 --> 00:18:37,640
the actual technical basics what are the

00:18:35,240 --> 00:18:39,740
technologies in use it's easy to say

00:18:37,640 --> 00:18:41,750
that we need to virtualize the control

00:18:39,740 --> 00:18:45,409
plane of switches but how does that work

00:18:41,750 --> 00:18:47,179
on the actual technical level almost all

00:18:45,409 --> 00:18:49,700
as the n approaches split the network

00:18:47,179 --> 00:18:51,950
into two logical layers these are also

00:18:49,700 --> 00:18:55,010
two words you will hear a lot inside

00:18:51,950 --> 00:18:57,230
PSTN contacts the first name actually is

00:18:55,010 --> 00:18:59,659
the overlay at the second is the

00:18:57,230 --> 00:19:01,039
underlay the underlay is what is

00:18:59,659 --> 00:19:02,870
happening on the hardware side of things

00:19:01,039 --> 00:19:04,880
so this is where our machines are

00:19:02,870 --> 00:19:08,149
talking to each other this is the flat

00:19:04,880 --> 00:19:09,830
network on my switch this is the network

00:19:08,149 --> 00:19:11,659
this is the physical link that my

00:19:09,830 --> 00:19:14,390
machines used to communicate with each

00:19:11,659 --> 00:19:17,179
other then I have my host in this

00:19:14,390 --> 00:19:21,020
picture the complete orange area is one

00:19:17,179 --> 00:19:23,510
host I have a hypervisor in our case it

00:19:21,020 --> 00:19:24,860
could kvm it could peek sign it doesn't

00:19:23,510 --> 00:19:27,799
really make a big difference and then i

00:19:24,860 --> 00:19:29,840
have my virtual switch and as we already

00:19:27,799 --> 00:19:32,539
understood the virtual switch in this

00:19:29,840 --> 00:19:34,549
case is our control plane the big

00:19:32,539 --> 00:19:37,090
difference is that on a switch I only

00:19:34,549 --> 00:19:39,770
have one control plane and on my ever

00:19:37,090 --> 00:19:41,690
sdn based setups I do have multiple

00:19:39,770 --> 00:19:43,220
control planes and I need the control

00:19:41,690 --> 00:19:45,169
planes on my individual house to

00:19:43,220 --> 00:19:48,289
communicate with each other in some way

00:19:45,169 --> 00:19:50,750
in fact how do we do that how do we

00:19:48,289 --> 00:19:52,790
implement the control plane on the host

00:19:50,750 --> 00:19:56,360
level typically we do that

00:19:52,790 --> 00:19:57,800
form of a bridge and i'm pretty sure

00:19:56,360 --> 00:20:00,050
that you have all used breeches and

00:19:57,800 --> 00:20:01,820
linux networking before but in this case

00:20:00,050 --> 00:20:03,740
it's not a normal bridge more precisely

00:20:01,820 --> 00:20:05,750
it's a bridge that has certain

00:20:03,740 --> 00:20:07,610
additional features for instance what

00:20:05,750 --> 00:20:10,460
our bridge in this case can do is it can

00:20:07,610 --> 00:20:13,550
do package tagging we can we will get to

00:20:10,460 --> 00:20:15,680
packet tagging on a later note in this

00:20:13,550 --> 00:20:18,170
presentation but for now remember that

00:20:15,680 --> 00:20:21,800
our control plane on our house actually

00:20:18,170 --> 00:20:23,330
has means of putting a stamp on every

00:20:21,800 --> 00:20:27,170
individual packet that comes in or goes

00:20:23,330 --> 00:20:29,240
out in order to assign that package to

00:20:27,170 --> 00:20:31,040
our particular virtual machine we will

00:20:29,240 --> 00:20:34,730
see where that is important on a later

00:20:31,040 --> 00:20:36,710
point in time the overlay is the ritual

00:20:34,730 --> 00:20:38,630
space in which the complete networking

00:20:36,710 --> 00:20:41,570
happens that's the room in which

00:20:38,630 --> 00:20:43,460
customer created networks exist this is

00:20:41,570 --> 00:20:45,560
the room where every customer is free to

00:20:43,460 --> 00:20:47,720
create as many virtual networks as he

00:20:45,560 --> 00:20:49,910
requires or as he thinks he requires in

00:20:47,720 --> 00:20:52,220
fact this is the case and this is the

00:20:49,910 --> 00:20:54,230
place where one customer can create

00:20:52,220 --> 00:20:56,530
thousand networks all move the same IP

00:20:54,230 --> 00:20:58,910
range if he considers that necessary and

00:20:56,530 --> 00:21:03,050
this is everything the customer has to

00:20:58,910 --> 00:21:04,700
configure in the actual setup how does

00:21:03,050 --> 00:21:07,040
the inter vm and inter host

00:21:04,700 --> 00:21:10,310
communication work in software-defined

00:21:07,040 --> 00:21:12,200
networking first let's understand how is

00:21:10,310 --> 00:21:15,020
signing packets to individual virtual

00:21:12,200 --> 00:21:18,560
machines works we have two hosts in the

00:21:15,020 --> 00:21:20,960
setup typically what almost all cloud

00:21:18,560 --> 00:21:23,570
computing or Sdn solutions do is they

00:21:20,960 --> 00:21:26,360
use week's LAN or GRE tunneling in the

00:21:23,570 --> 00:21:28,550
underlay remember that tunneling using

00:21:26,360 --> 00:21:30,320
VX line or giri is not stateful in fact

00:21:28,550 --> 00:21:32,120
it's stateless it's just a matter of the

00:21:30,320 --> 00:21:34,760
signing individual packets a certain

00:21:32,120 --> 00:21:37,040
level that is different a a certain tag

00:21:34,760 --> 00:21:40,370
that is to functionality I was referring

00:21:37,040 --> 00:21:42,800
to earlier and by using these texts or

00:21:40,370 --> 00:21:46,060
as they are typically called in the SDN

00:21:42,800 --> 00:21:49,280
context IDs I can actually determine

00:21:46,060 --> 00:21:51,560
what virtual machine a certain packet is

00:21:49,280 --> 00:21:54,020
coming from and I can determine what

00:21:51,560 --> 00:21:56,960
hosts on I am machine I am allowed to

00:21:54,020 --> 00:21:59,170
send an incoming packet tool and that's

00:21:56,960 --> 00:22:02,330
important because obviously VLAN on

00:21:59,170 --> 00:22:04,490
physical switches is used to separate

00:22:02,330 --> 00:22:06,290
customer traffic and of course I need

00:22:04,490 --> 00:22:09,440
the same functionality on my

00:22:06,290 --> 00:22:11,330
to networking infrastructure so just

00:22:09,440 --> 00:22:12,740
because I cannot use switches anymore it

00:22:11,330 --> 00:22:14,810
doesn't mean I do not need their

00:22:12,740 --> 00:22:17,120
features i still need packet separation

00:22:14,810 --> 00:22:18,950
between customers and if i have two

00:22:17,120 --> 00:22:21,080
virtual machines of two customers

00:22:18,950 --> 00:22:23,210
running on the same host i still need

00:22:21,080 --> 00:22:26,480
those VMS traffic somehow to be

00:22:23,210 --> 00:22:28,850
separated and this is where the VX land

00:22:26,480 --> 00:22:31,640
comes in and this is where the idea

00:22:28,850 --> 00:22:34,340
assignment of the ex land comes in very

00:22:31,640 --> 00:22:36,380
handy and very useful whenever a packet

00:22:34,340 --> 00:22:39,410
enters my host through the virtual

00:22:36,380 --> 00:22:41,930
switch through my bridge a certain ID is

00:22:39,410 --> 00:22:44,450
applied to that packet and that packet

00:22:41,930 --> 00:22:47,330
ID assigns this package to a certain

00:22:44,450 --> 00:22:49,820
customer and only those VMS on the host

00:22:47,330 --> 00:22:51,830
running with the same ID in place will

00:22:49,820 --> 00:22:53,630
ever receive the packet this is how

00:22:51,830 --> 00:23:00,950
packets route traffic separation on the

00:22:53,630 --> 00:23:02,660
host level works and this is also hot

00:23:00,950 --> 00:23:04,820
communication between two individual

00:23:02,660 --> 00:23:08,180
hypervisor words so if i have a virtual

00:23:04,820 --> 00:23:11,870
network I physical um is are a virtual

00:23:08,180 --> 00:23:13,700
network on two hosts and I do have that

00:23:11,870 --> 00:23:15,680
as soon as I have two virtual machines

00:23:13,700 --> 00:23:18,380
running on different hosts inside the

00:23:15,680 --> 00:23:21,020
couch everything that needs to happen is

00:23:18,380 --> 00:23:23,600
the packet coming out of my vm needs to

00:23:21,020 --> 00:23:26,480
be tacked by the SDN solution and this

00:23:23,600 --> 00:23:28,310
pays by the bridge that is responsible

00:23:26,480 --> 00:23:30,770
for doing via line into your eternal ink

00:23:28,310 --> 00:23:32,630
or GRE channeling then it needs to be

00:23:30,770 --> 00:23:34,760
sent over the cable and the host that

00:23:32,630 --> 00:23:36,890
receives the packet actually needs to

00:23:34,760 --> 00:23:40,340
read the ID that has been applied to the

00:23:36,890 --> 00:23:42,470
packet and then transmits the actual

00:23:40,340 --> 00:23:44,360
packet to the VMS on the same house with

00:23:42,470 --> 00:23:48,050
the same ID this is how traffic

00:23:44,360 --> 00:23:50,900
separation works as you can see here

00:23:48,050 --> 00:23:52,220
whenever you have a ritual or actually

00:23:50,900 --> 00:23:54,410
is whenever you have software-defined

00:23:52,220 --> 00:23:56,840
networking in place customer traffic is

00:23:54,410 --> 00:23:59,300
not going to get mixed because as soon

00:23:56,840 --> 00:24:01,250
as we have VX line or GRE channeling or

00:23:59,300 --> 00:24:03,770
any comparable solution in place we have

00:24:01,250 --> 00:24:05,990
packet ID assignments and as soon as

00:24:03,770 --> 00:24:07,610
we've packet ID assignments every actual

00:24:05,990 --> 00:24:10,340
packet is assigned to a virtual network

00:24:07,610 --> 00:24:12,260
and virtual networks do not mix I cannot

00:24:10,340 --> 00:24:14,600
reach one which will network from within

00:24:12,260 --> 00:24:16,700
another except for those cases in which

00:24:14,600 --> 00:24:18,560
I deliberately create a configuration

00:24:16,700 --> 00:24:19,879
that allows me to do that and I need to

00:24:18,560 --> 00:24:21,889
do that using a router so I

00:24:19,879 --> 00:24:23,959
the virtual router to correct to

00:24:21,889 --> 00:24:26,059
regional networks with each other but by

00:24:23,959 --> 00:24:27,979
means of default configurations I just

00:24:26,059 --> 00:24:29,479
cannot do that I do not have a rod to

00:24:27,979 --> 00:24:32,389
transmit packets from one server to

00:24:29,479 --> 00:24:34,789
another through the borders of virtual

00:24:32,389 --> 00:24:36,559
networks and the same goes for Internet

00:24:34,789 --> 00:24:37,999
connectivity so in this case it doesn't

00:24:36,559 --> 00:24:40,549
really matter a lot or with the hose

00:24:37,999 --> 00:24:42,769
that my target system is running on it's

00:24:40,549 --> 00:24:45,589
a virtual machine or something that

00:24:42,769 --> 00:24:46,849
connects me to the Internet network

00:24:45,589 --> 00:24:48,829
gateway is typically in the cloud

00:24:46,849 --> 00:24:51,109
context use another standard Linux

00:24:48,829 --> 00:24:53,209
kernel technology to allow network

00:24:51,109 --> 00:24:54,889
connectivity for virtual machines these

00:24:53,209 --> 00:24:57,079
are called network namespaces and in

00:24:54,889 --> 00:24:59,089
fact network name spaces on internet

00:24:57,079 --> 00:25:01,849
gateways do exactly the same thing that

00:24:59,089 --> 00:25:04,399
the VX land or Giri tunneling the San

00:25:01,849 --> 00:25:06,529
dividual individual hosts what network

00:25:04,399 --> 00:25:08,419
namespaces and internet gateways in

00:25:06,529 --> 00:25:10,579
clouds really do is they separate

00:25:08,419 --> 00:25:14,029
customer traffic from each other again

00:25:10,579 --> 00:25:15,619
if I have a network or if I have to

00:25:14,029 --> 00:25:18,739
virtual machines of two different

00:25:15,619 --> 00:25:20,719
tenants on the same physical server and

00:25:18,739 --> 00:25:22,609
they both need to talk to the Internet

00:25:20,719 --> 00:25:25,819
in clouds they will very often do it

00:25:22,609 --> 00:25:28,039
through one central gateway or there may

00:25:25,819 --> 00:25:29,359
be one then one central gateway of them

00:25:28,039 --> 00:25:31,759
there may be more than one central

00:25:29,359 --> 00:25:33,859
gateway but they are going to cross at

00:25:31,759 --> 00:25:36,349
some point so there would be danger of

00:25:33,859 --> 00:25:37,789
packet mix-up and abroad namespaces and

00:25:36,349 --> 00:25:40,759
software-defined networking are

00:25:37,789 --> 00:25:42,889
typically used to avoid traffic makes up

00:25:40,759 --> 00:25:49,690
of individual customer networks on the

00:25:42,889 --> 00:25:52,579
network gateways so with this in mind

00:25:49,690 --> 00:25:54,079
let's take a look at the SDN

00:25:52,579 --> 00:25:55,639
implementations we actually have

00:25:54,079 --> 00:25:58,519
available on the market right now I

00:25:55,639 --> 00:26:01,219
think the description of the

00:25:58,519 --> 00:26:02,929
presentation mentions free one is open

00:26:01,219 --> 00:26:05,929
we switch the other is controlled by

00:26:02,929 --> 00:26:08,209
juniper and the fruit is neural net by

00:26:05,929 --> 00:26:10,489
me to kula and i'm going to introduce

00:26:08,209 --> 00:26:12,949
these free individual solutions to you

00:26:10,489 --> 00:26:15,709
and mention the advantages disadvantages

00:26:12,949 --> 00:26:18,379
and also the most typical use cases for

00:26:15,709 --> 00:26:20,889
every one of them let's start with open

00:26:18,379 --> 00:26:24,499
we switch open we switch in fact is

00:26:20,889 --> 00:26:26,479
based on open flow open flow is an open

00:26:24,499 --> 00:26:28,969
standard on how to implement control

00:26:26,479 --> 00:26:30,949
planes in software so what OpenFlow

00:26:28,969 --> 00:26:33,210
actually describes this if you need to

00:26:30,949 --> 00:26:35,669
implement a virtual control play

00:26:33,210 --> 00:26:37,860
inside their installation then these are

00:26:35,669 --> 00:26:40,020
typical standard functionalities that

00:26:37,860 --> 00:26:42,120
you will require and if you implement

00:26:40,020 --> 00:26:44,700
them as we describe it you will be able

00:26:42,120 --> 00:26:48,600
to use them inside a network on many

00:26:44,700 --> 00:26:50,159
individual hosts OpenFlow is a standard

00:26:48,600 --> 00:26:52,980
that by now is available in a number of

00:26:50,159 --> 00:26:55,230
different revisions the most widespread

00:26:52,980 --> 00:26:58,919
implementation of open flow for linux is

00:26:55,230 --> 00:27:01,230
open V switch open reefs which itself is

00:26:58,919 --> 00:27:04,049
a kernel technology so there is a kernel

00:27:01,230 --> 00:27:06,299
module available on Linux machines named

00:27:04,049 --> 00:27:09,840
open vSwitch KO that open we switch

00:27:06,299 --> 00:27:11,179
module in fact is the part that on the

00:27:09,840 --> 00:27:14,429
bridge i have mentioned previously

00:27:11,179 --> 00:27:16,799
allows for the assignment of ids two

00:27:14,429 --> 00:27:19,110
packets coming out of VMs so whenever a

00:27:16,799 --> 00:27:21,149
packet comes out of vm the bridge that

00:27:19,110 --> 00:27:23,669
this vm is connected to automatically

00:27:21,149 --> 00:27:26,220
assigns the ID to the packet and that

00:27:23,669 --> 00:27:30,779
part is done by open we switch and the

00:27:26,220 --> 00:27:33,029
linux kernel the open we switch

00:27:30,779 --> 00:27:35,700
implementation in use on most linux

00:27:33,029 --> 00:27:37,350
systems actually requires help so the

00:27:35,700 --> 00:27:39,630
linux kernel module does not assign

00:27:37,350 --> 00:27:42,390
packets automatically actually what

00:27:39,630 --> 00:27:45,149
needs to happen is a configuration needs

00:27:42,390 --> 00:27:47,669
to put in place on the individual hosts

00:27:45,149 --> 00:27:50,640
and only individual breeches it needs to

00:27:47,669 --> 00:27:53,730
contain the information which ports are

00:27:50,640 --> 00:27:56,070
assigned which ID open V switch only

00:27:53,730 --> 00:27:58,169
provides the technology to do that but I

00:27:56,070 --> 00:28:00,390
need an agent or some other sort of

00:27:58,169 --> 00:28:03,779
external component to actually implement

00:28:00,390 --> 00:28:05,730
these hyman Dolph I teased or actually

00:28:03,779 --> 00:28:07,799
to configure it the assignment is done

00:28:05,730 --> 00:28:10,500
by open research yourself I'm sorry but

00:28:07,799 --> 00:28:12,480
the configuration on which port belongs

00:28:10,500 --> 00:28:16,350
to which ID needs to be done by an

00:28:12,480 --> 00:28:19,230
external agent openly switch has already

00:28:16,350 --> 00:28:21,090
mentioned earlier uses VX land or GRE is

00:28:19,230 --> 00:28:25,770
anyone in the room that not familiar

00:28:21,090 --> 00:28:27,779
with goe actually is ok so jury is

00:28:25,770 --> 00:28:29,760
generic routing encapsulation and it

00:28:27,779 --> 00:28:33,570
really is just an encapsulation protocol

00:28:29,760 --> 00:28:35,130
for standard ethernet links um it's an

00:28:33,570 --> 00:28:36,720
encapsulation protocol that does not do

00:28:35,130 --> 00:28:39,299
any encryption actually I think that's

00:28:36,720 --> 00:28:40,980
the best way to describe it I've already

00:28:39,299 --> 00:28:42,960
mentioned the kernel module the kernel

00:28:40,980 --> 00:28:46,330
module is used to create virtual

00:28:42,960 --> 00:28:48,490
switches on the individual hosts

00:28:46,330 --> 00:28:51,220
at the one problem the one big problem

00:28:48,490 --> 00:28:52,809
that open we switch actually has is the

00:28:51,220 --> 00:28:55,179
fact that there is no central database

00:28:52,809 --> 00:28:57,220
of networking information which leads to

00:28:55,179 --> 00:28:58,720
lot of overhead if you take a look at

00:28:57,220 --> 00:29:00,850
the OpenStack documentation that

00:28:58,720 --> 00:29:03,519
explains how to set up open we switch

00:29:00,850 --> 00:29:05,980
inside and openstack cloud you will see

00:29:03,519 --> 00:29:07,779
a big fat hind explaining that the

00:29:05,980 --> 00:29:10,990
documentation contains a valid set up

00:29:07,779 --> 00:29:13,570
but this setup is only valid for a

00:29:10,990 --> 00:29:15,070
proof-of-concept installation so let's

00:29:13,570 --> 00:29:17,110
take an example let's see what this

00:29:15,070 --> 00:29:19,269
actually means I have a network of

00:29:17,110 --> 00:29:21,070
hypervisors and I have many virtual

00:29:19,269 --> 00:29:23,559
machines running on these hypervisors

00:29:21,070 --> 00:29:25,809
inside my class they are belonging to

00:29:23,559 --> 00:29:29,529
individual and different customers so in

00:29:25,809 --> 00:29:33,250
fact I need a way to talk from one vm to

00:29:29,529 --> 00:29:35,110
another as you are probably all familiar

00:29:33,250 --> 00:29:37,899
with networking protocols you know that

00:29:35,110 --> 00:29:39,279
before a virtual machine inside I set up

00:29:37,899 --> 00:29:41,200
like this can talk to another virtual

00:29:39,279 --> 00:29:42,970
machine it needs to figure out where

00:29:41,200 --> 00:29:45,789
that virtual machine actually is needs

00:29:42,970 --> 00:29:48,190
to find out where it can wear it needs

00:29:45,789 --> 00:29:50,830
to send a packet in order to be able to

00:29:48,190 --> 00:29:53,380
reach the other virtual machine and an

00:29:50,830 --> 00:29:55,419
open V switch um let's imagine we have

00:29:53,380 --> 00:29:58,950
this example we want this virtual

00:29:55,419 --> 00:30:01,750
machine to talk to this virtual machine

00:29:58,950 --> 00:30:05,200
what would happen now is our proquest

00:30:01,750 --> 00:30:07,960
would descend to all hosts inside the

00:30:05,200 --> 00:30:10,750
Giri Network creating a lot of overhead

00:30:07,960 --> 00:30:12,850
because in fact our virtual machine is

00:30:10,750 --> 00:30:15,130
not actually knowing where the other

00:30:12,850 --> 00:30:17,769
virtual machine is running at the amount

00:30:15,130 --> 00:30:20,320
of overhead traffic produced inside an

00:30:17,769 --> 00:30:23,110
open V switch installation is massive

00:30:20,320 --> 00:30:25,720
compared to other solutions I have seen

00:30:23,110 --> 00:30:27,850
setups in which the overhead of the open

00:30:25,720 --> 00:30:30,039
we switch installation has actually

00:30:27,850 --> 00:30:32,409
saturated a network so the bigger the

00:30:30,039 --> 00:30:34,990
network grows the more traffic you have

00:30:32,409 --> 00:30:36,880
the more overhead traffic you have this

00:30:34,990 --> 00:30:38,799
is not traffic horse by a customer's

00:30:36,880 --> 00:30:41,080
this is all traffic caused only by the

00:30:38,799 --> 00:30:42,610
overhead of your as the end solution so

00:30:41,080 --> 00:30:46,330
whenever something goes wrong inside the

00:30:42,610 --> 00:30:50,169
set up there is very little spare amount

00:30:46,330 --> 00:30:53,710
of technol above capabilities left for

00:30:50,169 --> 00:30:55,210
for any emergencies this can easily set

00:30:53,710 --> 00:30:56,889
aright your network and this is why all

00:30:55,210 --> 00:30:58,539
open research solutions in fact are

00:30:56,889 --> 00:30:59,530
marked as experimental or proof of

00:30:58,539 --> 00:31:02,830
concept

00:30:59,530 --> 00:31:04,720
whenever you try to install OpenStack or

00:31:02,830 --> 00:31:06,550
do anything that is related to open we

00:31:04,720 --> 00:31:08,740
switch keep this in mind if you want to

00:31:06,550 --> 00:31:10,750
run open we switch in fact open research

00:31:08,740 --> 00:31:12,550
is a wonderful technology but as a

00:31:10,750 --> 00:31:15,040
standalone solution without any external

00:31:12,550 --> 00:31:19,240
hub it actually is not going to be very

00:31:15,040 --> 00:31:21,400
useful for your set up the second

00:31:19,240 --> 00:31:23,380
solution that we need to talk to serpent

00:31:21,400 --> 00:31:26,920
contrail open control is a solution that

00:31:23,380 --> 00:31:30,910
we at this 11 have tested and evaluated

00:31:26,920 --> 00:31:33,400
very intense and we actually invested at

00:31:30,910 --> 00:31:36,040
least one year of time into looking into

00:31:33,400 --> 00:31:38,410
open contrail and trying to work with it

00:31:36,040 --> 00:31:40,840
open control originally was designed by

00:31:38,410 --> 00:31:43,570
a company called contrail it was later

00:31:40,840 --> 00:31:48,360
bought by juniper and open control comes

00:31:43,570 --> 00:31:51,190
with a lot of very interesting and very

00:31:48,360 --> 00:31:54,310
great features when it comes to network

00:31:51,190 --> 00:31:58,000
connectivity um in terms of technology

00:31:54,310 --> 00:31:59,950
in fact open country probably is the

00:31:58,000 --> 00:32:01,900
most at one solution on the market there

00:31:59,950 --> 00:32:05,680
is a number of features inside up and

00:32:01,900 --> 00:32:08,160
contrail that will wonderfully connect

00:32:05,680 --> 00:32:10,450
the original machines one to another up

00:32:08,160 --> 00:32:12,010
the setup of the thing actually is

00:32:10,450 --> 00:32:14,260
something that's hairy but we'll come to

00:32:12,010 --> 00:32:16,630
that in a minute if you take a look at

00:32:14,260 --> 00:32:18,760
the diagrams and the actual standards

00:32:16,630 --> 00:32:22,120
describing how virtualization and open

00:32:18,760 --> 00:32:24,550
be an open control works um that is the

00:32:22,120 --> 00:32:27,160
one solution that will immediately give

00:32:24,550 --> 00:32:30,030
you the impression that these guys have

00:32:27,160 --> 00:32:33,790
actually gotten together their paperwork

00:32:30,030 --> 00:32:37,120
open contrail however comes with a very

00:32:33,790 --> 00:32:38,650
very big problem or actually it comes

00:32:37,120 --> 00:32:41,410
with a number of different problems and

00:32:38,650 --> 00:32:43,300
I will talk about these one after

00:32:41,410 --> 00:32:46,960
another first of all open contrail um

00:32:43,300 --> 00:32:49,360
actually consists of at least 11 demons

00:32:46,960 --> 00:32:51,130
or it did the last time I looked into

00:32:49,360 --> 00:32:53,320
the thing probably by now it's going to

00:32:51,130 --> 00:32:55,480
be free in 215 if they continued to

00:32:53,320 --> 00:32:57,700
invent new demons the speed they did

00:32:55,480 --> 00:32:59,620
when we were looking into it and many of

00:32:57,700 --> 00:33:01,750
these will just crash so many of these

00:32:59,620 --> 00:33:03,370
will basically just go away and you will

00:33:01,750 --> 00:33:04,780
not even notice because they're

00:33:03,370 --> 00:33:07,270
immediately we started by your unit

00:33:04,780 --> 00:33:10,240
system or by upstart or by whatever you

00:33:07,270 --> 00:33:11,500
have in place and still at some point

00:33:10,240 --> 00:33:13,240
you will realize that functionality

00:33:11,500 --> 00:33:16,240
inside your cloud is

00:33:13,240 --> 00:33:18,370
actually there because again this or

00:33:16,240 --> 00:33:21,550
that one component of open control has

00:33:18,370 --> 00:33:24,250
failed so open control and a number of

00:33:21,550 --> 00:33:27,930
components that are part of open control

00:33:24,250 --> 00:33:31,060
in fact will not run in a reliable way

00:33:27,930 --> 00:33:32,620
also there is a security problem so one

00:33:31,060 --> 00:33:34,870
of the thing the open control installer

00:33:32,620 --> 00:33:37,510
does is it downloads a very old version

00:33:34,870 --> 00:33:39,370
of pines monkey patches is and then

00:33:37,510 --> 00:33:42,190
install this on your system so you can

00:33:39,370 --> 00:33:44,290
have dns as a service and it's going to

00:33:42,190 --> 00:33:46,150
be a five years old bind and some

00:33:44,290 --> 00:33:48,580
whenever somebody finds a floor or a

00:33:46,150 --> 00:33:49,960
security hole in that bind obviously

00:33:48,580 --> 00:33:52,360
will be screwed because some you will

00:33:49,960 --> 00:33:54,340
just make the bike crash or in the worst

00:33:52,360 --> 00:33:55,930
case scenario will just overtake the

00:33:54,340 --> 00:33:58,690
control over the band installation that

00:33:55,930 --> 00:34:02,050
you would just have installed so in fact

00:33:58,690 --> 00:34:04,300
open flow is not only unstable it also

00:34:02,050 --> 00:34:06,580
is unreliable during our tests and

00:34:04,300 --> 00:34:08,440
trials we had a number of scenarios in

00:34:06,580 --> 00:34:10,510
which the software-defined networking

00:34:08,440 --> 00:34:12,370
layer did not actually behave as we

00:34:10,510 --> 00:34:15,070
would have expected and it was not

00:34:12,370 --> 00:34:17,560
obvious for us why that was the case we

00:34:15,070 --> 00:34:19,510
had a number of events in which the

00:34:17,560 --> 00:34:22,330
actual inventor of the software so the

00:34:19,510 --> 00:34:24,340
guy that originally found a contrail was

00:34:22,330 --> 00:34:27,040
logging on to our service using screen

00:34:24,340 --> 00:34:29,650
and then this assembled parts of open

00:34:27,040 --> 00:34:31,060
contrail on the shell in gdb just to

00:34:29,650 --> 00:34:33,670
figure out what exactly might be the

00:34:31,060 --> 00:34:35,470
problem this particular case at 3am the

00:34:33,670 --> 00:34:37,900
morning which was very awesome at least

00:34:35,470 --> 00:34:42,280
for for him because he's in the stairs

00:34:37,900 --> 00:34:44,470
obviously it's not something you want to

00:34:42,280 --> 00:34:46,600
have in production it's like a black box

00:34:44,470 --> 00:34:48,250
and whenever you something is wrong with

00:34:46,600 --> 00:34:49,630
it you will definitely require hub from

00:34:48,250 --> 00:34:53,700
Quantrell and you will need somebody

00:34:49,630 --> 00:34:53,700
from contrail to help you fix the thing

00:34:55,530 --> 00:35:01,210
another big problem that we have with

00:34:58,210 --> 00:35:03,910
open control is technology dinger what

00:35:01,210 --> 00:35:06,550
do I mean by that here is a list of

00:35:03,910 --> 00:35:08,740
technologies scripting languages and

00:35:06,550 --> 00:35:11,620
tools that are part of contrail or need

00:35:08,740 --> 00:35:13,690
to be used for contrary to work open

00:35:11,620 --> 00:35:16,900
country comes with a separate kernel

00:35:13,690 --> 00:35:19,210
module that actually installs a separate

00:35:16,900 --> 00:35:21,880
networking driver in the linux kernel so

00:35:19,210 --> 00:35:23,680
traffic is caught in the linux kernel by

00:35:21,880 --> 00:35:25,000
that kernel module and whenever

00:35:23,680 --> 00:35:27,100
something goes wrong with the kernel

00:35:25,000 --> 00:35:28,480
module if the machine actually boots up

00:35:27,100 --> 00:35:30,850
because the colonel mallu did not crash

00:35:28,480 --> 00:35:32,920
it this time you will need to find

00:35:30,850 --> 00:35:34,960
somebody who is experienced and Colonel

00:35:32,920 --> 00:35:36,850
programming to figure out why something

00:35:34,960 --> 00:35:38,950
why packets in the kernel are magically

00:35:36,850 --> 00:35:40,860
disappearing which happened quite a few

00:35:38,950 --> 00:35:46,150
number of times during our evaluation

00:35:40,860 --> 00:35:49,090
there is if map who knows if map when we

00:35:46,150 --> 00:35:50,680
talk to the vendor we were told that if

00:35:49,090 --> 00:35:53,200
map is I standard that everybody knows

00:35:50,680 --> 00:35:55,900
these days very happy that's apparently

00:35:53,200 --> 00:35:59,880
not the case we have sandesh sandesh is

00:35:55,900 --> 00:36:02,860
the indian word for a message it was a

00:35:59,880 --> 00:36:04,420
this is an invention by country so its

00:36:02,860 --> 00:36:06,490
intervention it's a protocol that was

00:36:04,420 --> 00:36:09,190
invented by the company that originally

00:36:06,490 --> 00:36:13,000
also invented contrary its ex-mla we're

00:36:09,190 --> 00:36:14,950
if munoz fift somebody at least so they

00:36:13,000 --> 00:36:16,990
talk xml / Rifton that is what they use

00:36:14,950 --> 00:36:18,430
as their internal message bus except for

00:36:16,990 --> 00:36:21,550
those cases where they require a

00:36:18,430 --> 00:36:24,670
rabbitmq because rift or sandesh didn't

00:36:21,550 --> 00:36:26,770
work for some reason we have C++ Python

00:36:24,670 --> 00:36:28,480
we have no GS we have iron d which is

00:36:26,770 --> 00:36:30,040
also is written in Java we have Ruby we

00:36:28,480 --> 00:36:33,160
have number a number of shell scripts

00:36:30,040 --> 00:36:36,850
for instance the thing that I just

00:36:33,160 --> 00:36:39,670
mentioned about downloading and patching

00:36:36,850 --> 00:36:42,610
binds actually is a shell script we have

00:36:39,670 --> 00:36:44,590
a number of databases and state

00:36:42,610 --> 00:36:46,330
configuration databases and use we have

00:36:44,590 --> 00:36:48,580
writers with Cassandra we have zookeeper

00:36:46,330 --> 00:36:50,530
we have Kafka in fact the amount of

00:36:48,580 --> 00:36:54,490
traffic and billing data produced by

00:36:50,530 --> 00:36:57,340
contrail was enough to SATA raid a free

00:36:54,490 --> 00:36:58,570
nodes Cassandra cluster at ease which

00:36:57,340 --> 00:37:01,690
was something that we also didn't like

00:36:58,570 --> 00:37:03,850
what we have XMPP we have BGP we have

00:37:01,690 --> 00:37:06,010
mpls these are the great parts of open

00:37:03,850 --> 00:37:07,510
control because then try to use official

00:37:06,010 --> 00:37:09,880
protocols because they try to use

00:37:07,510 --> 00:37:13,300
standards just the way they did it was

00:37:09,880 --> 00:37:16,060
not very smart in this case we have the

00:37:13,300 --> 00:37:18,400
enterprise edition of open country which

00:37:16,060 --> 00:37:20,230
comes as I 700 megabytes large Debian

00:37:18,400 --> 00:37:23,110
package that will basically contains X

00:37:20,230 --> 00:37:25,660
hundred as 600 w packages and unpack

00:37:23,110 --> 00:37:27,190
them to a temporary directory and then

00:37:25,660 --> 00:37:30,940
install them one after another using

00:37:27,190 --> 00:37:33,070
dpkg dash I in the person's latian

00:37:30,940 --> 00:37:34,900
script of the package and that is what

00:37:33,070 --> 00:37:36,940
they will charge you for so if you buy

00:37:34,900 --> 00:37:38,380
open contrail or if you buy control

00:37:36,940 --> 00:37:39,460
because that is the commercial product

00:37:38,380 --> 00:37:40,930
so it's controlling an open contract

00:37:39,460 --> 00:37:42,880
from juniper

00:37:40,930 --> 00:37:44,109
that is what you will basically get from

00:37:42,880 --> 00:37:47,050
them and that is what they expect you to

00:37:44,109 --> 00:37:50,260
install of course they have tested this

00:37:47,050 --> 00:37:53,770
probably on their debian and stands

00:37:50,260 --> 00:37:56,500
inside ritual books on your macbook air

00:37:53,770 --> 00:37:58,300
um I'm not sure about that but that's

00:37:56,500 --> 00:38:02,050
basically what you get if you actually

00:37:58,300 --> 00:38:03,309
get the commercial version of it so that

00:38:02,050 --> 00:38:05,200
is something you definitely don't want

00:38:03,309 --> 00:38:09,099
to have in the installation it's a big

00:38:05,200 --> 00:38:11,349
black box if it actually works the open

00:38:09,099 --> 00:38:14,079
slack and super integration is great so

00:38:11,349 --> 00:38:16,030
they have a separate module for the

00:38:14,079 --> 00:38:18,309
OpenStack networking service Neutron and

00:38:16,030 --> 00:38:20,020
you can just load that module and it's

00:38:18,309 --> 00:38:22,599
actually going to do what you expected

00:38:20,020 --> 00:38:24,309
to do at least most of the time if all

00:38:22,599 --> 00:38:27,059
the I reopen control components work of

00:38:24,309 --> 00:38:29,410
course which many times did or not and

00:38:27,059 --> 00:38:31,599
you have a prince or software in its

00:38:29,410 --> 00:38:33,520
core open control is available as open

00:38:31,599 --> 00:38:37,510
source software there is commercial

00:38:33,520 --> 00:38:39,339
support available in a certain way we

00:38:37,510 --> 00:38:41,559
were never able to actually find the one

00:38:39,339 --> 00:38:43,569
product inside juniper though that would

00:38:41,559 --> 00:38:46,210
have given us the support so we had

00:38:43,569 --> 00:38:48,640
contacts multiple people and they

00:38:46,210 --> 00:38:51,160
weren't able to actually just um sell us

00:38:48,640 --> 00:38:53,410
import some some sort of a commercial

00:38:51,160 --> 00:38:55,089
support for this solution you have a

00:38:53,410 --> 00:38:56,770
shiny web interface there so things

00:38:55,089 --> 00:38:58,210
don't work you can still click on the

00:38:56,770 --> 00:39:01,210
web interface and show up something gets

00:38:58,210 --> 00:39:03,579
better last button these there's media

00:39:01,210 --> 00:39:06,250
net media net is completely different

00:39:03,579 --> 00:39:08,500
from weapon contrail it's a development

00:39:06,250 --> 00:39:10,150
from scratch the company itself is

00:39:08,500 --> 00:39:13,150
called me to kula they are based in

00:39:10,150 --> 00:39:14,819
Japan which is helpful sometimes if

00:39:13,150 --> 00:39:16,780
there is a problem inside the card

00:39:14,819 --> 00:39:18,339
because all you need to do is telling

00:39:16,780 --> 00:39:20,200
them that they put shame on the name of

00:39:18,339 --> 00:39:29,680
the convenient that gets things thanks

00:39:20,200 --> 00:39:32,079
really quickly internet basically has

00:39:29,680 --> 00:39:33,520
open V switch at its core the awesome

00:39:32,079 --> 00:39:35,470
thing is that they do not require any

00:39:33,520 --> 00:39:37,930
custom kernel module they will just

00:39:35,470 --> 00:39:39,490
basically use whatever they find in the

00:39:37,930 --> 00:39:42,099
standard kernel of your distribution and

00:39:39,490 --> 00:39:43,809
then they will apply the configuration

00:39:42,099 --> 00:39:46,150
on top of that kernel module that they

00:39:43,809 --> 00:39:47,890
find it doesn't hurt to use an you're

00:39:46,150 --> 00:39:49,450
openly switch version then you can find

00:39:47,890 --> 00:39:51,700
in most of the newest distributions

00:39:49,450 --> 00:39:53,710
available on the market but in fact it's

00:39:51,700 --> 00:39:54,770
not deadly necessary so if you decide to

00:39:53,710 --> 00:39:56,960
go with your distribution

00:39:54,770 --> 00:40:00,470
you can just do that and actually things

00:39:56,960 --> 00:40:02,150
are games were pretty nifty the one big

00:40:00,470 --> 00:40:04,130
difference between little net and the

00:40:02,150 --> 00:40:06,260
standard open we switch configuration is

00:40:04,130 --> 00:40:08,390
that meter net at the central database

00:40:06,260 --> 00:40:10,370
of knowledge that open this which lacks

00:40:08,390 --> 00:40:12,920
so if you remember the scenario that I

00:40:10,370 --> 00:40:14,570
had on the slides earlier where one

00:40:12,920 --> 00:40:17,000
virtual machine tries to talk to another

00:40:14,570 --> 00:40:18,830
and suddenly every virtual machine in

00:40:17,000 --> 00:40:20,570
the setup and every host gets a number

00:40:18,830 --> 00:40:23,750
of up requests because the things need

00:40:20,570 --> 00:40:27,110
to find each other first this is solved

00:40:23,750 --> 00:40:29,180
in a very smart in a way smarter way in

00:40:27,110 --> 00:40:31,640
biddo net and it actually is solved

00:40:29,180 --> 00:40:33,410
inside the basic up in research setup

00:40:31,640 --> 00:40:35,090
let's imagine we have two virtual

00:40:33,410 --> 00:40:38,510
machines again and they want to talk to

00:40:35,090 --> 00:40:40,760
each other so the machine that is on the

00:40:38,510 --> 00:40:43,940
lower part of the slide needs to talk to

00:40:40,760 --> 00:40:45,770
the one that's on the upper part and it

00:40:43,940 --> 00:40:47,630
needs to know how to reach it it needs

00:40:45,770 --> 00:40:49,520
to know what physical house that virtual

00:40:47,630 --> 00:40:51,320
machine is on it gets to know where to

00:40:49,520 --> 00:40:53,300
find the ARP address for that particular

00:40:51,320 --> 00:40:55,820
I was typically a switch would do that

00:40:53,300 --> 00:40:57,260
having its ARP table available but we do

00:40:55,820 --> 00:40:59,180
not have a physical switch in this case

00:40:57,260 --> 00:41:01,100
with the ARP table so we need to replace

00:40:59,180 --> 00:41:04,220
that functionality the virtual machine

00:41:01,100 --> 00:41:06,260
can actually ask the central database

00:41:04,220 --> 00:41:08,900
inside meeeee Internet where to find

00:41:06,260 --> 00:41:11,780
that virtual machine it only needs to do

00:41:08,900 --> 00:41:13,610
so once because actually as soon as it

00:41:11,780 --> 00:41:15,680
knows where the virtual machine is it

00:41:13,610 --> 00:41:19,070
can just put packages to that machine on

00:41:15,680 --> 00:41:21,440
to the so-called fast path the answer in

00:41:19,070 --> 00:41:23,930
the machine that in the database is

00:41:21,440 --> 00:41:25,910
actually stored so the answer is this

00:41:23,930 --> 00:41:29,180
virtual machine can be found on that and

00:41:25,910 --> 00:41:30,650
that physical house and now the virtual

00:41:29,180 --> 00:41:32,510
machine that needs to talk to everyone

00:41:30,650 --> 00:41:34,040
just knows where to find it and can

00:41:32,510 --> 00:41:36,260
actually start talking to the other

00:41:34,040 --> 00:41:38,030
virtual machine and whenever these two

00:41:36,260 --> 00:41:40,700
need to talk again to each other the

00:41:38,030 --> 00:41:42,590
whole process of figuring out where the

00:41:40,700 --> 00:41:44,810
other machine this is not necessary

00:41:42,590 --> 00:41:47,930
anymore in fact this happens on the

00:41:44,810 --> 00:41:49,820
Asian side of things there is a separate

00:41:47,930 --> 00:41:52,130
agent for me to net that's called

00:41:49,820 --> 00:41:54,260
middleman and middleman actually

00:41:52,130 --> 00:41:56,180
emulates ARP answers so whenever a

00:41:54,260 --> 00:41:58,070
virtual machine tries to find another

00:41:56,180 --> 00:42:00,650
one in the installation and the fires

00:41:58,070 --> 00:42:02,120
our up requests this up request is never

00:42:00,650 --> 00:42:04,160
going to leave that particular machine

00:42:02,120 --> 00:42:06,140
it will automatically be answered by the

00:42:04,160 --> 00:42:07,850
middlemen agent and the virtual machine

00:42:06,140 --> 00:42:08,300
will still know where the other target

00:42:07,850 --> 00:42:12,050
which will

00:42:08,300 --> 00:42:14,060
is this reduces the overhead massively

00:42:12,050 --> 00:42:15,770
and as already mentioned it only

00:42:14,060 --> 00:42:19,100
requires the standard up in research

00:42:15,770 --> 00:42:21,020
kernel module module net is very well

00:42:19,100 --> 00:42:23,330
integrated with weapons tag in fact

00:42:21,020 --> 00:42:26,390
OpenStack is the number one de facto

00:42:23,330 --> 00:42:28,340
showcase form you donate I think they

00:42:26,390 --> 00:42:30,500
support other virtualization solutions

00:42:28,340 --> 00:42:32,870
but the only thing they ever actively

00:42:30,500 --> 00:42:34,750
advertise for is the open you switch

00:42:32,870 --> 00:42:37,250
port of things and there is by now a

00:42:34,750 --> 00:42:40,190
small number of really big public clouds

00:42:37,250 --> 00:42:41,810
running middle net in fact we also

00:42:40,190 --> 00:42:44,870
decided to go with the solution in the

00:42:41,810 --> 00:42:46,520
end at least for now based on the

00:42:44,870 --> 00:42:49,160
experiences that we have made for the

00:42:46,520 --> 00:42:50,630
other solutions it's open source

00:42:49,160 --> 00:42:52,910
software but commercial support is

00:42:50,630 --> 00:42:54,500
available if actually if you ask them

00:42:52,910 --> 00:42:56,720
that you want to buy support they will

00:42:54,500 --> 00:42:59,300
sell it to you which is awesome if you

00:42:56,720 --> 00:43:01,820
had been fiddling with juniper for a

00:42:59,300 --> 00:43:03,950
month prior to that and they also have a

00:43:01,820 --> 00:43:06,470
shiny web interface so whatever you want

00:43:03,950 --> 00:43:08,060
to do in sight lido net can be done on

00:43:06,470 --> 00:43:10,340
the command line it can be done using

00:43:08,060 --> 00:43:12,290
puppet they buy now are working on

00:43:10,340 --> 00:43:14,240
ansible integration which is going to be

00:43:12,290 --> 00:43:15,980
awesome and they also have a shiny

00:43:14,240 --> 00:43:20,270
weapons your face in which you can just

00:43:15,980 --> 00:43:22,100
click on things that was a brief

00:43:20,270 --> 00:43:23,600
comparison of the three different

00:43:22,100 --> 00:43:27,530
technologies are there any questions

00:43:23,600 --> 00:43:36,830
from your site mr. now is the time to

00:43:27,530 --> 00:43:41,650
ask them I will not go into somebody

00:43:36,830 --> 00:43:41,650
asks yes thanks just just a minute

00:43:42,570 --> 00:43:48,300
okay and what about failover

00:43:44,900 --> 00:43:50,820
functionality of this database rather

00:43:48,300 --> 00:43:53,760
than networking information is based on

00:43:50,820 --> 00:43:55,770
44 am internet you mean yeah okay so um

00:43:53,760 --> 00:43:57,480
all configurations inside leader net is

00:43:55,770 --> 00:43:59,340
in fact stored in zookeeper zookeeper

00:43:57,480 --> 00:44:00,690
itself is a reliable database or in

00:43:59,340 --> 00:44:04,020
redundant database you can't have a

00:44:00,690 --> 00:44:06,180
zookeeper cluster and in contrast to

00:44:04,020 --> 00:44:08,550
other solutions zookeeper is able to

00:44:06,180 --> 00:44:10,590
take care of its clustering very well so

00:44:08,550 --> 00:44:12,240
as soon as you have a zookeeper instance

00:44:10,590 --> 00:44:14,820
failing the only thing that will happen

00:44:12,240 --> 00:44:17,310
is other virtual machines or no sorry

00:44:14,820 --> 00:44:19,230
other middlemen agents in the setup that

00:44:17,310 --> 00:44:20,730
previously talked to the one now failed

00:44:19,230 --> 00:44:28,800
zookeeper instance will automatically

00:44:20,730 --> 00:44:33,620
talk to another one okay forever most

00:44:28,800 --> 00:44:33,620
recipes anyone first row

00:44:35,300 --> 00:44:38,990
what would happen if we have a field

00:44:37,340 --> 00:44:42,710
hyper voice on the Virtual Machine moves

00:44:38,990 --> 00:44:44,030
to the next one so the question is does

00:44:42,710 --> 00:44:46,070
a virtual machine migrated over to

00:44:44,030 --> 00:44:48,710
another hypervisor if the one that's

00:44:46,070 --> 00:44:50,240
running on fails from the SDN side of

00:44:48,710 --> 00:44:52,580
things and OpenStack that's another

00:44:50,240 --> 00:44:54,170
problem you donate can do that actually

00:44:52,580 --> 00:44:55,460
it will automatically depth in central

00:44:54,170 --> 00:44:56,890
database to know that the virtual

00:44:55,460 --> 00:44:59,030
machine is now running on another house

00:44:56,890 --> 00:45:00,620
just like it would if you live my

00:44:59,030 --> 00:45:02,780
greater machine live migration is

00:45:00,620 --> 00:45:05,030
supported as well the big problem in the

00:45:02,780 --> 00:45:06,650
OpenStack example is likely hearing to

00:45:05,030 --> 00:45:09,080
be OpenStack because OpenStack by now

00:45:06,650 --> 00:45:10,700
it's not able to migrate a virtual

00:45:09,080 --> 00:45:13,640
machine or inter actually restart a

00:45:10,700 --> 00:45:15,080
virtual machine from from a failed host

00:45:13,640 --> 00:45:17,180
on another host unless you explicitly

00:45:15,080 --> 00:45:18,740
tell it to do so so it doesn't do that

00:45:17,180 --> 00:45:20,120
automatically but that is more a problem

00:45:18,740 --> 00:45:22,160
of the cloud solution out of the SDN

00:45:20,120 --> 00:45:24,140
solution the SDN solution you don't net

00:45:22,160 --> 00:45:28,190
in this case I'm actually supports that

00:45:24,140 --> 00:45:32,270
without any trouble did it answer the

00:45:28,190 --> 00:45:38,720
question that's that's what I thought

00:45:32,270 --> 00:45:40,150
yeah seeing your face the middlemen

00:45:38,720 --> 00:45:43,820
agent running on the machine actually

00:45:40,150 --> 00:45:47,570
sends a typical ping to the actual tree

00:45:43,820 --> 00:45:52,190
actual mirror and API so there's an API

00:45:47,570 --> 00:45:54,230
available in the setup and every agent

00:45:52,190 --> 00:45:58,880
regularly reports to the API that it's

00:45:54,230 --> 00:46:00,770
still alive um again then that's

00:45:58,880 --> 00:46:03,650
important to understand here migrating

00:46:00,770 --> 00:46:05,240
or restarting a failed vm on another

00:46:03,650 --> 00:46:07,720
host is something the cloud needs the

00:46:05,240 --> 00:46:10,550
cloud solution needs to initialize so um

00:46:07,720 --> 00:46:12,350
what your net really needs to do is just

00:46:10,550 --> 00:46:14,240
catch the notice that this virtual

00:46:12,350 --> 00:46:16,400
machine now is migrated to another host

00:46:14,240 --> 00:46:17,840
or is started on another house and then

00:46:16,400 --> 00:46:20,990
act accordingly that's not something

00:46:17,840 --> 00:46:26,700
that the SDN solution has a lot of stake

00:46:20,990 --> 00:46:30,900
in yes please

00:46:26,700 --> 00:46:30,900
they make sure you get some training

00:46:32,880 --> 00:46:41,140
just to make sure for me donate the

00:46:37,330 --> 00:46:44,050
agent only lives in the host and the vm

00:46:41,140 --> 00:46:46,690
itself sees a standard ethernet

00:46:44,050 --> 00:46:48,160
interface that's right yeah the in fact

00:46:46,690 --> 00:46:50,260
what the middleman agent does is it does

00:46:48,160 --> 00:46:52,660
create a tap interface on the host that

00:46:50,260 --> 00:46:54,700
is then part of the virtual machine but

00:46:52,660 --> 00:46:56,860
there is no component of media net

00:46:54,700 --> 00:46:58,000
whatsoever of any sdn solution for that

00:46:56,860 --> 00:47:00,820
matter running inside the virtual

00:46:58,000 --> 00:47:02,770
machine for original machine when

00:47:00,820 --> 00:47:04,960
running on top of SDN the networking

00:47:02,770 --> 00:47:06,730
looks exactly like it would look if it

00:47:04,960 --> 00:47:08,470
just was a standard virtualization who

00:47:06,730 --> 00:47:10,890
has proved kvn auction or something and

00:47:08,470 --> 00:47:13,120
the peg agenda lling in the host is

00:47:10,890 --> 00:47:15,640
completely done with the open V switch

00:47:13,120 --> 00:47:17,740
kernel module and there's not no other

00:47:15,640 --> 00:47:20,170
handling concerning the data in the

00:47:17,740 --> 00:47:21,880
packet hoods of not for the SDN part of

00:47:20,170 --> 00:47:23,680
the solution anything that relates to

00:47:21,880 --> 00:47:25,090
the sdl solution is taken care of by the

00:47:23,680 --> 00:47:26,680
european greece which kernel module if

00:47:25,090 --> 00:47:29,800
the task needs to be done in the kernel

00:47:26,680 --> 00:47:34,690
is so the jury tunneling and antiques

00:47:29,800 --> 00:47:40,330
land tunneling for instance are there

00:47:34,690 --> 00:47:42,940
any further questions ok so I have some

00:47:40,330 --> 00:47:44,790
final remarks first of all if you are

00:47:42,940 --> 00:47:47,350
able to speak German there is an article

00:47:44,790 --> 00:47:50,440
on the whole thing I've been talking

00:47:47,350 --> 00:47:52,480
about on ghulam actually it was written

00:47:50,440 --> 00:47:53,590
by me which is a nice coincidence so if

00:47:52,480 --> 00:47:54,880
you want to read up on today's

00:47:53,590 --> 00:47:56,380
presentation you can just go ahead and

00:47:54,880 --> 00:47:59,040
read this article it's available for

00:47:56,380 --> 00:48:01,390
free on the internet if you want a more

00:47:59,040 --> 00:48:02,650
distinct explanation of open contrail

00:48:01,390 --> 00:48:04,210
and what open control actually is

00:48:02,650 --> 00:48:06,130
there's another article available also

00:48:04,210 --> 00:48:09,190
written by me and this is behind a

00:48:06,130 --> 00:48:11,440
paywall there so if you have this issue

00:48:09,190 --> 00:48:13,240
of the German X newspaper then you can

00:48:11,440 --> 00:48:14,860
still read it and the other if you don't

00:48:13,240 --> 00:48:16,960
have that you can actually buy the PDF

00:48:14,860 --> 00:48:20,080
on the link and the same goes four

00:48:16,960 --> 00:48:22,480
minutes um actually I just had this in

00:48:20,080 --> 00:48:24,820
the post yesterday so there's an article

00:48:22,480 --> 00:48:27,010
in this issue of the newspaper unmute Oh

00:48:24,820 --> 00:48:28,240
Ned written by me as well and if you

00:48:27,010 --> 00:48:31,590
want to look at it then just go ahead

00:48:28,240 --> 00:48:35,290
and the most important thing actually is

00:48:31,590 --> 00:48:36,910
if you like cake we are hiring so this

00:48:35,290 --> 00:48:39,100
is the man of cake that we had served in

00:48:36,910 --> 00:48:40,310
the last four months that's 11 by

00:48:39,100 --> 00:48:42,440
individual employees

00:48:40,310 --> 00:48:44,510
and if you like cake then please feel

00:48:42,440 --> 00:48:46,430
free to just give us a call or go to the

00:48:44,510 --> 00:48:48,260
website and have a look and I will be

00:48:46,430 --> 00:48:50,120
very happy to have you and have you

00:48:48,260 --> 00:48:53,230
bring cake or have you eat cake whatever

00:48:50,120 --> 00:48:53,230

YouTube URL: https://www.youtube.com/watch?v=FRK-uPky1_0


