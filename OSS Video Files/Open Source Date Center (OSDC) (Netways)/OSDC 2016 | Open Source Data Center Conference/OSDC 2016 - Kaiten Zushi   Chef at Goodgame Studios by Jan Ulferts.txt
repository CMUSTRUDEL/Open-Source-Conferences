Title: OSDC 2016 - Kaiten Zushi   Chef at Goodgame Studios by Jan Ulferts
Publication date: 2016-05-03
Playlist: OSDC 2016 | Open Source Data Center Conference
Description: 
	Goodgame Studios grew in the last past years to a company with about 1200 Employees. This leads to a huge amount of different kind of applications and projects.
Since the beginning of 2015 GGS also did a restructure on the whole company.  Instead of having a few huge departments with many teams Goodgame implemented a Studio structure with currently 7 studios for game development and several central departments responsible for the infrastructure (data centers, build infrastructure, software libraries, etc.).
Back in 2014 we realized that the server automation wasn't flexible enough to support the constantly growing company. So after some meetings the operations team came to the conclusion Chef might be tool to support GGS growth and change.
At the End of 2014 GGS formed a small Scrum Team („Platform Engineering“) with two engineers from each tech department - back then "Java Development", "Web Development (PHP)" and "Operations". Also the team got a PO and a scrum master. The task was simple - Get started with this shiny new automation stuff.
The engineers had just a little experience with Chef itself, but all where familiar with software development, testing and automation. So they start not only to build a configuration management but also automated the infrastructure for developing these Chef recipes.
This talk is about how we at Goodgame Studios work with Chef.  What tools we use to automate the development environment for cookbooks. How we do continuous configuration management.
And lets say how we automate the automation for testing and building the automation. Thats our Kaiten Sushi
Captions: 
	00:00:12,090 --> 00:00:16,230
okay everyone so I hope you're ready for

00:00:14,460 --> 00:00:16,880
the last track every cent by young wolf

00:00:16,230 --> 00:00:19,279
adds about

00:00:16,880 --> 00:00:24,500
fight ensued kaiten sushi at chef at

00:00:19,279 --> 00:00:29,419
good game studios enjoy hi good

00:00:24,500 --> 00:00:32,149
afternoon actually so may I and should

00:00:29,419 --> 00:00:35,750
use me and the company so I'm yeah no

00:00:32,149 --> 00:00:39,920
offense I'm working for a small company

00:00:35,750 --> 00:00:45,769
grown in the last six years to about

00:00:39,920 --> 00:00:47,629
thousand two hundred employees as the

00:00:45,769 --> 00:00:51,799
name States we actually in the gaming

00:00:47,629 --> 00:00:55,549
industry and we currently have about 12

00:00:51,799 --> 00:01:01,309
games in 26 languages but all around the

00:00:55,549 --> 00:01:04,699
world almost so this is actually how the

00:01:01,309 --> 00:01:08,079
infrastructure looks like so we actually

00:01:04,699 --> 00:01:11,659
have nine locations around the world

00:01:08,079 --> 00:01:16,670
rough mix of bare metal machines VMs

00:01:11,659 --> 00:01:20,240
cloud machines mixed to nearly all of

00:01:16,670 --> 00:01:28,969
the nearly all of the world it's all

00:01:20,240 --> 00:01:31,189
about 1200 hosts actually and well as

00:01:28,969 --> 00:01:34,819
you may expect we actually need some

00:01:31,189 --> 00:01:38,179
kind of automation in there so in the

00:01:34,819 --> 00:01:42,679
past before I started we actually had

00:01:38,179 --> 00:01:47,450
sea of engine well it basically did its

00:01:42,679 --> 00:01:50,329
job but at a certain point it may be

00:01:47,450 --> 00:01:53,030
hard to maintain especially in our case

00:01:50,329 --> 00:01:55,549
and how we actually build it and how we

00:01:53,030 --> 00:02:00,429
yeah actually wrote all the

00:01:55,549 --> 00:02:03,889
configuration stuff so for example a

00:02:00,429 --> 00:02:08,330
partial file of the sea of engine

00:02:03,889 --> 00:02:11,780
distribution was about 5k of lines which

00:02:08,330 --> 00:02:17,270
is as you may expect even with get hard

00:02:11,780 --> 00:02:19,220
to manage so you may be able to use see

00:02:17,270 --> 00:02:23,540
of engine and and just split this stuff

00:02:19,220 --> 00:02:26,090
up actually if you want also some of

00:02:23,540 --> 00:02:29,420
your deaths getting into this stuff and

00:02:26,090 --> 00:02:30,470
taking care of it you may think about

00:02:29,420 --> 00:02:33,950
reuse

00:02:30,470 --> 00:02:36,650
which of code and well actually deaths

00:02:33,950 --> 00:02:39,140
are more familiar with code and not with

00:02:36,650 --> 00:02:41,930
configuration and see if engine is more

00:02:39,140 --> 00:02:43,970
or less configuration and not cold so

00:02:41,930 --> 00:02:47,300
this is basically our perspective on

00:02:43,970 --> 00:02:48,980
this so we had to challenge to pick

00:02:47,300 --> 00:02:51,650
something else and we actually

00:02:48,980 --> 00:02:54,560
challenged also see of engine in a

00:02:51,650 --> 00:02:58,130
slightly different set up against I

00:02:54,560 --> 00:03:03,709
guess it was puppet and chef actually

00:02:58,130 --> 00:03:06,290
and we decided to go with with chef in

00:03:03,709 --> 00:03:09,080
this case because this is the main

00:03:06,290 --> 00:03:12,530
features we actually like about Chef so

00:03:09,080 --> 00:03:14,840
it's at first just Ruby code it's just

00:03:12,530 --> 00:03:17,780
methods you can actually do nearly

00:03:14,840 --> 00:03:21,020
everything you want with it you can

00:03:17,780 --> 00:03:24,170
version it and actually you can use

00:03:21,020 --> 00:03:27,590
constraints in in your recipes in well

00:03:24,170 --> 00:03:30,590
if you have dependencies and you

00:03:27,590 --> 00:03:35,360
actually can build artifacts about given

00:03:30,590 --> 00:03:37,580
versions with Burke shelf actually it's

00:03:35,360 --> 00:03:39,769
expandable by design so this is

00:03:37,580 --> 00:03:43,790
something we actually missed in the sea

00:03:39,769 --> 00:03:47,390
of engine is writing your own methods

00:03:43,790 --> 00:03:50,810
writing your own code inside of the of

00:03:47,390 --> 00:03:53,720
the automation so for example in this

00:03:50,810 --> 00:03:59,090
case I'm not quite you can see it I

00:03:53,720 --> 00:04:03,709
guess a bit ok M this is actually a

00:03:59,090 --> 00:04:05,900
piece of method which insults a MySQL

00:04:03,709 --> 00:04:07,910
service on a given port was given

00:04:05,900 --> 00:04:11,180
version and so on so actually you

00:04:07,910 --> 00:04:14,239
writing methods you can reuse again so

00:04:11,180 --> 00:04:19,340
this is possible with nearly everything

00:04:14,239 --> 00:04:22,510
in chef so you can for example rewrite

00:04:19,340 --> 00:04:25,070
some of the chef's given methods like

00:04:22,510 --> 00:04:29,270
templates and reuse this for your own

00:04:25,070 --> 00:04:36,320
purpose which is really quite useful if

00:04:29,270 --> 00:04:40,750
you have a big amount of code also the

00:04:36,320 --> 00:04:43,610
testing part and chef is quite handy so

00:04:40,750 --> 00:04:44,230
let's pick the unit tests which are

00:04:43,610 --> 00:04:47,110
really

00:04:44,230 --> 00:04:51,850
really useful if you want to control the

00:04:47,110 --> 00:04:56,070
current code you're writing so just

00:04:51,850 --> 00:04:59,680
imagine you have some logic in your

00:04:56,070 --> 00:05:03,400
configuration management and you just

00:04:59,680 --> 00:05:07,090
want to prove if the logic just works

00:05:03,400 --> 00:05:10,120
after you apply to your patch so what

00:05:07,090 --> 00:05:12,900
this unit test just does is somewhere in

00:05:10,120 --> 00:05:18,160
recipe is just checking in which kind of

00:05:12,900 --> 00:05:22,330
environment the the Chevron is working

00:05:18,160 --> 00:05:25,210
and in this case it's the production run

00:05:22,330 --> 00:05:28,270
and it actually should then include a

00:05:25,210 --> 00:05:31,510
given recipe so this is just proving the

00:05:28,270 --> 00:05:34,150
code flow it's it doesn't tell you

00:05:31,510 --> 00:05:37,180
anything about the result in the end but

00:05:34,150 --> 00:05:40,810
actually it's just testing the logic you

00:05:37,180 --> 00:05:45,400
wrote the second part is the acceptance

00:05:40,810 --> 00:05:50,020
which is the official naming of this but

00:05:45,400 --> 00:05:53,320
we call it integration testing where you

00:05:50,020 --> 00:05:56,590
just spawn a vm and apply all the

00:05:53,320 --> 00:06:00,520
cookbooks and afterwards just check ok

00:05:56,590 --> 00:06:04,180
thus the myszka service really run is it

00:06:00,520 --> 00:06:07,510
enabled is it installed and so on you

00:06:04,180 --> 00:06:11,140
also can check for open ports or just

00:06:07,510 --> 00:06:15,940
run commands whatever you want but this

00:06:11,140 --> 00:06:21,000
basically checks if the code you wrote

00:06:15,940 --> 00:06:26,470
really gets you to the result you expect

00:06:21,000 --> 00:06:29,250
so after we decided to go with Chef we

00:06:26,470 --> 00:06:32,560
actually build a small scrum team and

00:06:29,250 --> 00:06:35,830
back then we had about three major

00:06:32,560 --> 00:06:38,110
technical departments and if you start

00:06:35,830 --> 00:06:40,750
something new it's it's really useful to

00:06:38,110 --> 00:06:45,070
just get everybody on the same page and

00:06:40,750 --> 00:06:48,010
maybe introduce them to you being part

00:06:45,070 --> 00:06:51,550
of this so this is yeah let's say you

00:06:48,010 --> 00:06:54,310
live DevOps I don't know well I doesn't

00:06:51,550 --> 00:06:58,110
like to well the naming of this but

00:06:54,310 --> 00:07:02,889
anyways we just

00:06:58,110 --> 00:07:05,830
we use this to to get our deaths into

00:07:02,889 --> 00:07:08,469
this new configuration management tool

00:07:05,830 --> 00:07:11,199
and so we build a scrum team of six

00:07:08,469 --> 00:07:13,150
hundred years to from every major

00:07:11,199 --> 00:07:15,990
department every major technical

00:07:13,150 --> 00:07:19,089
department we have backed in and

00:07:15,990 --> 00:07:21,490
attitude is team a scrum master and a

00:07:19,089 --> 00:07:26,289
product owner to just have a kind of

00:07:21,490 --> 00:07:28,930
manage flow in there and this team got

00:07:26,289 --> 00:07:31,089
four major goals well this is another

00:07:28,930 --> 00:07:34,479
topic but actually it's it's quite

00:07:31,089 --> 00:07:38,710
important every goal was for about a

00:07:34,479 --> 00:07:42,550
month and each hat for sprints so a

00:07:38,710 --> 00:07:46,589
sprint a week and actually we introduced

00:07:42,550 --> 00:07:52,120
in four month a whole complete new

00:07:46,589 --> 00:07:55,149
configuration management what is also to

00:07:52,120 --> 00:07:59,680
note in there nobody of this team was

00:07:55,149 --> 00:08:01,959
really deep into Ruby or chef so the

00:07:59,680 --> 00:08:06,520
other two departments beside the

00:08:01,959 --> 00:08:08,409
operations department where the the

00:08:06,520 --> 00:08:12,909
server development team which is

00:08:08,409 --> 00:08:15,879
basically Java and the web development

00:08:12,909 --> 00:08:18,279
team which is basically PHP and we

00:08:15,879 --> 00:08:21,129
actually merged them together to this

00:08:18,279 --> 00:08:23,319
platform engineering team to just get

00:08:21,129 --> 00:08:26,849
the configuration management started and

00:08:23,319 --> 00:08:30,520
get everybody on this page and actually

00:08:26,849 --> 00:08:33,069
we hope to get more acceptance inside

00:08:30,520 --> 00:08:37,149
the teams of yeah just doing something

00:08:33,069 --> 00:08:39,519
new but actually after we finished this

00:08:37,149 --> 00:08:42,430
whole project the whole structure

00:08:39,519 --> 00:08:45,550
changed so the company changed and so on

00:08:42,430 --> 00:08:47,380
but nevertheless the team did a quite

00:08:45,550 --> 00:08:52,209
good job and this is actually where this

00:08:47,380 --> 00:08:55,779
talk is about that because the team was

00:08:52,209 --> 00:08:57,970
not about Chef itself this may also be

00:08:55,779 --> 00:08:59,980
interesting for somebody who's not using

00:08:57,970 --> 00:09:04,029
chef because it's it's a kind of

00:08:59,980 --> 00:09:07,180
workflow we introduced and kind of let's

00:09:04,029 --> 00:09:10,620
say standards we used and some tools I

00:09:07,180 --> 00:09:15,030
want to introduce which are

00:09:10,620 --> 00:09:19,710
out of this team so at first I would

00:09:15,030 --> 00:09:23,910
like to show the the structure we we

00:09:19,710 --> 00:09:26,220
decided in the team to yet to get the

00:09:23,910 --> 00:09:28,350
cookbook started and to have a point

00:09:26,220 --> 00:09:32,190
where you stayed okay this kind of

00:09:28,350 --> 00:09:36,480
cookbook is directing to this kind of

00:09:32,190 --> 00:09:40,100
server and we actually started with

00:09:36,480 --> 00:09:42,840
something I guess also all the other

00:09:40,100 --> 00:09:45,990
configuration management tools are using

00:09:42,840 --> 00:09:47,670
we call it base cookbook it's actually

00:09:45,990 --> 00:09:51,120
something you want to have on every

00:09:47,670 --> 00:09:54,720
server so it should be really the same

00:09:51,120 --> 00:09:57,900
stuff on every server may be authorised

00:09:54,720 --> 00:10:00,630
keys or some packages you want to have

00:09:57,900 --> 00:10:04,170
on every server or I don't know message

00:10:00,630 --> 00:10:05,850
of the day and maybe something more it

00:10:04,170 --> 00:10:08,810
should be the same on every host well

00:10:05,850 --> 00:10:11,820
this is actually a lie because yet as a

00:10:08,810 --> 00:10:13,740
given difference between VMs and half

00:10:11,820 --> 00:10:17,910
hour service and so on so this is also

00:10:13,740 --> 00:10:20,490
taken care of by the space cookbook the

00:10:17,910 --> 00:10:23,160
second special cookbook we introduced

00:10:20,490 --> 00:10:27,380
was the flavor cookbook the idea behind

00:10:23,160 --> 00:10:32,490
it was to have a kind of library of

00:10:27,380 --> 00:10:37,440
common tasks or common let's say roles

00:10:32,490 --> 00:10:41,730
roles is a kind of special word in in

00:10:37,440 --> 00:10:45,410
the chef context so but it's really a

00:10:41,730 --> 00:10:49,440
kind of role so for example in this case

00:10:45,410 --> 00:10:53,340
we have a flavor for mysql server which

00:10:49,440 --> 00:10:55,710
actually is doing some CT our

00:10:53,340 --> 00:11:01,410
configuration stuff doing the servers

00:10:55,710 --> 00:11:06,510
and doing some usual configuration for a

00:11:01,410 --> 00:11:10,770
mysql and so on but you're our be able

00:11:06,510 --> 00:11:12,600
to overwrite this in the third special

00:11:10,770 --> 00:11:16,500
cookbook it's the application cookbook

00:11:12,600 --> 00:11:19,350
and do your own stuff in there so it's

00:11:16,500 --> 00:11:21,750
just the usual stuff and afterwards if

00:11:19,350 --> 00:11:24,450
we want to just override it if you don't

00:11:21,750 --> 00:11:28,560
you just get the usual good game

00:11:24,450 --> 00:11:31,620
mysql server there's also something

00:11:28,560 --> 00:11:34,560
special I and well it's not really good

00:11:31,620 --> 00:11:38,880
shown here but anyways there is a

00:11:34,560 --> 00:11:42,420
project name and a note type in it and

00:11:38,880 --> 00:11:45,780
this is really something we actually

00:11:42,420 --> 00:11:48,840
liked about this whole structure because

00:11:45,780 --> 00:11:52,800
as you see in the server name we

00:11:48,840 --> 00:11:56,670
actually represent the node type and the

00:11:52,800 --> 00:11:59,430
project behind it and this means you

00:11:56,670 --> 00:12:01,650
actually cannot identify a server or an

00:11:59,430 --> 00:12:05,240
o-type or whatever the server does by

00:12:01,650 --> 00:12:14,700
its cookbook itself so it's it's kind of

00:12:05,240 --> 00:12:19,020
yeah fixed rules we actually have after

00:12:14,700 --> 00:12:23,160
we decided to have the structure we gone

00:12:19,020 --> 00:12:25,710
forward for the workflow so at first we

00:12:23,160 --> 00:12:29,670
just started writing cookbooks and just

00:12:25,710 --> 00:12:34,170
applying them to to get lab and yes some

00:12:29,670 --> 00:12:36,270
road tests are not well some road tests

00:12:34,170 --> 00:12:39,870
but didn't start them before they push

00:12:36,270 --> 00:12:43,650
and some just applied against the chef

00:12:39,870 --> 00:12:47,040
server and well it just mixed up so we

00:12:43,650 --> 00:12:50,970
actually decided to to close the whole

00:12:47,040 --> 00:12:52,830
group in get lab with the cookbooks so

00:12:50,970 --> 00:12:57,690
nobody is able to push to these

00:12:52,830 --> 00:13:01,440
cookbooks except Jenkins so we

00:12:57,690 --> 00:13:04,530
introduced a get flow-based workflow

00:13:01,440 --> 00:13:07,920
which is actually starting with creating

00:13:04,530 --> 00:13:10,020
a cookbook then well you 4get you coat

00:13:07,920 --> 00:13:12,570
your stuff you test you write the test

00:13:10,020 --> 00:13:15,270
you test it maybe if you want to if not

00:13:12,570 --> 00:13:18,210
well it actually doesn't matter you

00:13:15,270 --> 00:13:20,670
write the dogs just doing familiar

00:13:18,210 --> 00:13:23,940
commits and getting it to a merchant

00:13:20,670 --> 00:13:25,950
quest but this whole workflow is started

00:13:23,940 --> 00:13:29,420
by Jenkins again so you can do it

00:13:25,950 --> 00:13:34,260
locally but Jenkins will do it anyways

00:13:29,420 --> 00:13:37,220
so if you for example write a test which

00:13:34,260 --> 00:13:37,220
fails and

00:13:38,040 --> 00:13:42,690
apply this to a merge request Jenkins

00:13:40,230 --> 00:13:44,790
will catch up and just state okay well

00:13:42,690 --> 00:13:49,889
this is problem you're not allowed to

00:13:44,790 --> 00:13:53,029
apply it so let's get into some details

00:13:49,889 --> 00:13:57,079
of this workflow so the first one was

00:13:53,029 --> 00:13:59,850
creating a cookbook so there are some

00:13:57,079 --> 00:14:01,759
implemented features and chef to create

00:13:59,850 --> 00:14:06,449
a cookbook from from a kind of tablet

00:14:01,759 --> 00:14:11,819
but what what we actually wanted was we

00:14:06,449 --> 00:14:14,670
wanted a a repository where we can

00:14:11,819 --> 00:14:18,290
maintain this kind of template cookbook

00:14:14,670 --> 00:14:21,600
and have always the same procedure of

00:14:18,290 --> 00:14:24,779
building this cookbook and the second

00:14:21,600 --> 00:14:28,380
cool stuff of this is because we closed

00:14:24,779 --> 00:14:30,540
the cookbook group and get lab so nobody

00:14:28,380 --> 00:14:34,019
is able to change anything except

00:14:30,540 --> 00:14:37,500
Jenkins only Jenkins can create these

00:14:34,019 --> 00:14:39,870
cookbooks repositories in there so it's

00:14:37,500 --> 00:14:43,139
doing some more stuff like you need to

00:14:39,870 --> 00:14:47,370
login for Jenkins to just type the new

00:14:43,139 --> 00:14:49,410
program and in this case it will replace

00:14:47,370 --> 00:14:55,260
the maintenance informations in the

00:14:49,410 --> 00:14:59,310
readme and so on so after you just

00:14:55,260 --> 00:15:02,370
created your cookbook there is a github

00:14:59,310 --> 00:15:04,949
flow based workflow which actually means

00:15:02,370 --> 00:15:06,930
we try to keep the master always stable

00:15:04,949 --> 00:15:10,949
so the master is always the latest

00:15:06,930 --> 00:15:16,139
stable release of the cookbook there are

00:15:10,949 --> 00:15:19,500
more releases so actually we tag all our

00:15:16,139 --> 00:15:28,829
stable bills but anyways the master

00:15:19,500 --> 00:15:31,310
always is the latest stable build so the

00:15:28,829 --> 00:15:34,680
cold part is something which is actually

00:15:31,310 --> 00:15:37,019
yeah depending on everyone who wants to

00:15:34,680 --> 00:15:39,889
write code and maybe vim or whatever

00:15:37,019 --> 00:15:42,810
editor it actually doesn't matter so

00:15:39,889 --> 00:15:46,680
it's cool to have some highlighting in

00:15:42,810 --> 00:15:49,510
there it's maybe better well Adam as the

00:15:46,680 --> 00:15:53,320
editor of my choice

00:15:49,510 --> 00:15:55,630
some more features like linters so the

00:15:53,320 --> 00:15:59,650
foot critic Andrew Bachrach linters are

00:15:55,630 --> 00:16:01,540
really crucial for us also some some

00:15:59,650 --> 00:16:04,510
good features and so on but actually

00:16:01,540 --> 00:16:09,370
don't need it but it's really useful to

00:16:04,510 --> 00:16:13,320
have it so at the code part we

00:16:09,370 --> 00:16:16,780
introduced as you as I just told some

00:16:13,320 --> 00:16:21,100
cleaning up parts so we just noticed

00:16:16,780 --> 00:16:23,770
that if we have six engineers from three

00:16:21,100 --> 00:16:27,910
different departments with all of them

00:16:23,770 --> 00:16:31,450
at least have six or more different

00:16:27,910 --> 00:16:34,510
solutions for the same issue and in this

00:16:31,450 --> 00:16:37,500
case we came to the conclusion that

00:16:34,510 --> 00:16:43,330
actually something like Robocop to just

00:16:37,500 --> 00:16:49,930
check all the the Ruby related stuff

00:16:43,330 --> 00:16:52,260
like in this case it just states okay do

00:16:49,930 --> 00:16:56,890
this in a single line for example or

00:16:52,260 --> 00:16:59,710
just stating well this code is not clean

00:16:56,890 --> 00:17:02,650
enough you can do it really better so

00:16:59,710 --> 00:17:06,250
these are some handy stuff to keep the

00:17:02,650 --> 00:17:08,770
code clean because you otherwise will

00:17:06,250 --> 00:17:11,260
not get somebody new on it because it's

00:17:08,770 --> 00:17:15,550
always different if you have this amount

00:17:11,260 --> 00:17:18,670
of cookbooks it's really the same for

00:17:15,550 --> 00:17:22,540
the chef part of it there is a project

00:17:18,670 --> 00:17:25,150
called foot critic which actually state

00:17:22,540 --> 00:17:27,640
something about the usual chef behavior

00:17:25,150 --> 00:17:29,920
stuff I'm pretty sure there will be

00:17:27,640 --> 00:17:33,250
something for all the other languages

00:17:29,920 --> 00:17:38,200
but well for chef its foot critic and it

00:17:33,250 --> 00:17:40,390
basically did its job so it's in this

00:17:38,200 --> 00:17:42,580
case stating that you're not should use

00:17:40,390 --> 00:17:47,050
this kind of flow instead you should use

00:17:42,580 --> 00:17:52,470
to God rules to keep the template just

00:17:47,050 --> 00:17:55,300
run if something else happened and

00:17:52,470 --> 00:17:59,320
there's also the unit testing I just

00:17:55,300 --> 00:18:02,919
mentioned about checking if the code

00:17:59,320 --> 00:18:07,330
really does what it does so

00:18:02,919 --> 00:18:10,239
here is the whole part of this check if

00:18:07,330 --> 00:18:18,999
the production run really includes this

00:18:10,239 --> 00:18:22,889
kind of cookbook for the 40 integration

00:18:18,999 --> 00:18:26,379
tests you actually have several of

00:18:22,889 --> 00:18:28,989
options to check them we at first used

00:18:26,379 --> 00:18:33,639
service pack which really did its job

00:18:28,989 --> 00:18:37,480
it's based on the aspect it's it's based

00:18:33,639 --> 00:18:40,090
on a spec and it's nevertheless it's

00:18:37,480 --> 00:18:44,499
it's maintained till now as far as i

00:18:40,090 --> 00:18:48,909
know but chef as the company just bought

00:18:44,499 --> 00:18:53,739
a new company or is tiny company from

00:18:48,909 --> 00:18:56,859
cologne I guess they wrote a special

00:18:53,739 --> 00:18:59,080
part of server specs so they rewrote all

00:18:56,859 --> 00:19:04,379
the stuff and added some more features

00:18:59,080 --> 00:19:07,330
to it like you can do some kind of

00:19:04,379 --> 00:19:11,409
weighted tests in there so for example

00:19:07,330 --> 00:19:13,359
you just check if there are some usual

00:19:11,409 --> 00:19:16,119
behaviors on your server and then you

00:19:13,359 --> 00:19:19,179
can get give weight steward and so on so

00:19:16,119 --> 00:19:22,179
we decided later on to go with this way

00:19:19,179 --> 00:19:24,639
and we currently just rewrite all the

00:19:22,179 --> 00:19:29,980
tests but nevertheless it's it's really

00:19:24,639 --> 00:19:33,249
nearly the same what we also do in there

00:19:29,980 --> 00:19:36,399
is we apply these tests not on local VMs

00:19:33,249 --> 00:19:40,179
we just use AWS spot instances for this

00:19:36,399 --> 00:19:44,769
because it's really cheap its most of

00:19:40,179 --> 00:19:47,859
the time first not every time and for TC

00:19:44,769 --> 00:19:50,619
I is just re really easy to use so you

00:19:47,859 --> 00:19:53,499
just spin up in you vm just apply the

00:19:50,619 --> 00:19:55,450
cookbooks start a test and afterwards to

00:19:53,499 --> 00:19:59,470
jenkins just stating okay that's

00:19:55,450 --> 00:20:06,639
everything is working and go to the next

00:19:59,470 --> 00:20:10,600
part so because if you want all your

00:20:06,639 --> 00:20:12,970
teams and all the given departments to

00:20:10,600 --> 00:20:16,679
use all the stuff you write in this tiny

00:20:12,970 --> 00:20:21,059
team you just need some documentation

00:20:16,679 --> 00:20:23,429
in there and if you have insert

00:20:21,059 --> 00:20:28,070
infrastructure as code well why not use

00:20:23,429 --> 00:20:31,830
it to actually generate the

00:20:28,070 --> 00:20:35,070
documentation out of it so there is a

00:20:31,830 --> 00:20:40,889
cool tool called knife cookbook duck

00:20:35,070 --> 00:20:45,360
it's generating documentation out of

00:20:40,889 --> 00:20:48,749
some comments around for example the

00:20:45,360 --> 00:20:51,110
attributes or something more maybe I wrp

00:20:48,749 --> 00:20:53,909
or cookbook descriptions and so on

00:20:51,110 --> 00:20:57,269
Jenkins is doing this if the tests are

00:20:53,909 --> 00:20:59,789
finished all of them it's afterwards

00:20:57,269 --> 00:21:05,220
just doing generating a new read me out

00:20:59,789 --> 00:21:08,340
of the current code and the commit

00:21:05,220 --> 00:21:11,249
messages are also reused so we just

00:21:08,340 --> 00:21:16,129
stated to all our desks okay use proper

00:21:11,249 --> 00:21:20,190
commit messages so we can generate a a

00:21:16,129 --> 00:21:22,919
commit log out of it so get lab has cool

00:21:20,190 --> 00:21:25,379
feature which is just detecting commit

00:21:22,919 --> 00:21:29,610
logs and read Mees and so on and just

00:21:25,379 --> 00:21:32,100
setting them in the menu bar so you have

00:21:29,610 --> 00:21:34,710
for every version so there's not

00:21:32,100 --> 00:21:39,360
readable because I don't want you to

00:21:34,710 --> 00:21:44,070
read this but for every version we just

00:21:39,360 --> 00:21:46,860
add the committer and his commit message

00:21:44,070 --> 00:21:50,220
to the commit log and so we have a good

00:21:46,860 --> 00:21:55,710
overview of what of what habit happened

00:21:50,220 --> 00:22:00,389
in which word and last but not least the

00:21:55,710 --> 00:22:05,580
mercial Chris so this is the part where

00:22:00,389 --> 00:22:08,009
the magic actually happens so as in the

00:22:05,580 --> 00:22:10,200
time you just created the merge requests

00:22:08,009 --> 00:22:14,369
on get lab to this upstream cookbook

00:22:10,200 --> 00:22:17,279
we're not allowed to to push to it's

00:22:14,369 --> 00:22:19,649
just triggering a Jenkins job and a

00:22:17,279 --> 00:22:25,559
Jenkins job and just goes the whole flow

00:22:19,649 --> 00:22:29,670
we had in here go through the whole flow

00:22:25,559 --> 00:22:32,820
and at this point it just

00:22:29,670 --> 00:22:43,050
accepts the merge request but only if

00:22:32,820 --> 00:22:45,390
everything else just we're okay and this

00:22:43,050 --> 00:22:48,330
actually leads to the point where it

00:22:45,390 --> 00:22:51,420
just can state anymore well works on my

00:22:48,330 --> 00:22:55,830
machine because we you have a given

00:22:51,420 --> 00:22:58,220
workflow of getting all the stuff tested

00:22:55,830 --> 00:23:01,299
have leverage every time the same

00:22:58,220 --> 00:23:04,929
quality of code you

00:23:01,299 --> 00:23:07,869
and actually avoid it so after tests are

00:23:04,929 --> 00:23:15,369
finished it's also pushed to the chef

00:23:07,869 --> 00:23:19,679
server and then you can use it what it's

00:23:15,369 --> 00:23:22,360
also quite crucial in there is after you

00:23:19,679 --> 00:23:27,220
your emerge request is accepted by

00:23:22,360 --> 00:23:32,850
Jenkins you have the you have a Berk

00:23:27,220 --> 00:23:36,009
file log which is stating the whole arm

00:23:32,850 --> 00:23:38,710
the whole versions of all the depending

00:23:36,009 --> 00:23:41,889
cookbooks in this given project so you

00:23:38,710 --> 00:23:44,710
can apply them to your to your

00:23:41,889 --> 00:23:49,210
environment if you don't want to relay

00:23:44,710 --> 00:23:51,850
on on a on a chef server you actually

00:23:49,210 --> 00:23:54,789
can use Burke's vendor to generate an

00:23:51,850 --> 00:23:58,600
artifact which is then be able to just

00:23:54,789 --> 00:24:02,499
push on any on any server you want so

00:23:58,600 --> 00:24:05,499
each project is independent of others so

00:24:02,499 --> 00:24:08,710
all of them are just maintaining their

00:24:05,499 --> 00:24:11,019
own dependent versions which actually

00:24:08,710 --> 00:24:14,649
means that if you patch something

00:24:11,019 --> 00:24:16,600
somewhere you actually don't get these

00:24:14,649 --> 00:24:20,009
messages like oh did you change

00:24:16,600 --> 00:24:23,049
something in there my setup is broken or

00:24:20,009 --> 00:24:25,539
you're not being in there and the point

00:24:23,049 --> 00:24:28,269
that if you deploy a defending cookbook

00:24:25,539 --> 00:24:30,580
life for example the base cookbook you

00:24:28,269 --> 00:24:34,059
don't need to test any project by your

00:24:30,580 --> 00:24:37,269
own well as far as they update their

00:24:34,059 --> 00:24:45,159
setup they need to test their own stuff

00:24:37,269 --> 00:24:49,470
again so also every environment actually

00:24:45,159 --> 00:24:52,119
has their own dependent cookbooks so and

00:24:49,470 --> 00:24:58,450
last but not least we came to the

00:24:52,119 --> 00:25:00,369
conclusion that maintaining about 350

00:24:58,450 --> 00:25:03,899
cookbooks I guess and their

00:25:00,369 --> 00:25:09,279
corresponding three Jenkins jobs is um

00:25:03,899 --> 00:25:12,039
let's say quite hard so we use a cool

00:25:09,279 --> 00:25:14,220
project called Jenkins job builder to

00:25:12,039 --> 00:25:18,210
just generate or

00:25:14,220 --> 00:25:21,270
automatically generate the jobs as long

00:25:18,210 --> 00:25:24,390
as you just apply them to to get lab so

00:25:21,270 --> 00:25:26,880
it's working like we had in the first

00:25:24,390 --> 00:25:29,640
instance this create cookbook job which

00:25:26,880 --> 00:25:32,429
is just triggering AMD Jenkins job

00:25:29,640 --> 00:25:36,900
builder which then is crawling through

00:25:32,429 --> 00:25:40,289
the gate lab API and building all the

00:25:36,900 --> 00:25:43,890
new jobs and adding all the web hooks to

00:25:40,289 --> 00:25:46,470
these new repositories for all the

00:25:43,890 --> 00:25:48,690
cookbooks that are actually knew this

00:25:46,470 --> 00:25:51,690
actually also means that if the Jenkins

00:25:48,690 --> 00:25:53,700
job or if the Jenkins dies if the master

00:25:51,690 --> 00:25:57,570
is just gone away you actually can

00:25:53,700 --> 00:26:05,250
generate a new one in I guess about 20

00:25:57,570 --> 00:26:11,460
minutes and actually I'm a bit forest I

00:26:05,250 --> 00:26:13,230
guess so this is just the yadu tools we

00:26:11,460 --> 00:26:16,830
actually use and we actually like to in

00:26:13,230 --> 00:26:22,590
to show to you to maybe just try it out

00:26:16,830 --> 00:26:24,150
it's not all about chef it's also most

00:26:22,590 --> 00:26:37,700
of them are also useful for other

00:26:24,150 --> 00:26:37,700
projects so I'm finished any questions

00:26:41,110 --> 00:26:49,700
it's a chef server standalone the

00:26:45,169 --> 00:26:51,440
community version or yeah well the

00:26:49,700 --> 00:26:55,250
question was I guess in my crew was

00:26:51,440 --> 00:26:59,240
another so the question was what kind of

00:26:55,250 --> 00:27:01,340
Chef server do you use so there are on

00:26:59,240 --> 00:27:04,850
premise chef service for example there

00:27:01,340 --> 00:27:08,210
are the the enterprise versions we

00:27:04,850 --> 00:27:10,220
actually use the community one and we

00:27:08,210 --> 00:27:16,190
currently working on getting rid of it

00:27:10,220 --> 00:27:21,440
so we currently working on this Burke's

00:27:16,190 --> 00:27:24,559
vendor stuff which is in there to use

00:27:21,440 --> 00:27:28,850
another way of deploying the cookbooks

00:27:24,559 --> 00:27:32,980
to the servers because you just have two

00:27:28,850 --> 00:27:38,450
options buying the enterprise license or

00:27:32,980 --> 00:27:41,299
using the on-premise stuff because if

00:27:38,450 --> 00:27:43,130
you just have a single chef server and

00:27:41,299 --> 00:27:47,000
well it's not capable of doing

00:27:43,130 --> 00:27:50,299
replication and not not being AJ well

00:27:47,000 --> 00:27:54,410
it's it's a bit hard of maintaining a

00:27:50,299 --> 00:27:58,429
worldwide distributed system it actually

00:27:54,410 --> 00:28:00,740
works and it especially works because we

00:27:58,429 --> 00:28:04,010
are not using stuff like node search

00:28:00,740 --> 00:28:08,450
which is heavily relying on the chef

00:28:04,010 --> 00:28:11,960
server as well as we are not using yes

00:28:08,450 --> 00:28:19,000
chef server dependent features so we

00:28:11,960 --> 00:28:19,000
also not use the vault stuff and and D

00:28:19,480 --> 00:28:25,250
forgot about a name nevertheless so we

00:28:22,640 --> 00:28:31,450
are not using the chef server features

00:28:25,250 --> 00:28:38,299
so we are able to avoid it actually i'm

00:28:31,450 --> 00:28:42,980
currently 12 12 point mostly 12.6 i

00:28:38,299 --> 00:28:45,890
guess but the we actually try to to stay

00:28:42,980 --> 00:28:49,659
on the newest version so i guess

00:28:45,890 --> 00:28:53,029
currently it's 12.9

00:28:49,659 --> 00:29:01,419
or did you ask for the chef server so

00:28:53,029 --> 00:29:01,419
the chefs are is 12 any more questions

00:29:07,989 --> 00:29:14,149
can you talk about the integration tests

00:29:10,789 --> 00:29:16,039
running on AWS instances is that a

00:29:14,149 --> 00:29:18,649
function of a test kitchen or something

00:29:16,039 --> 00:29:23,840
or did you write this integration

00:29:18,649 --> 00:29:27,139
yourself yeah we are using the well we

00:29:23,840 --> 00:29:29,330
are using kitchen at first yes and we

00:29:27,139 --> 00:29:34,879
are also using the kitchen area yes

00:29:29,330 --> 00:29:37,399
plugin but we also wrote some scripts

00:29:34,879 --> 00:29:41,029
around it so actually if you have your

00:29:37,399 --> 00:29:44,809
kitchen yamel to being more in indy chef

00:29:41,029 --> 00:29:48,980
and kitchen detail it's not always the

00:29:44,809 --> 00:29:53,480
same options in in the local environment

00:29:48,980 --> 00:29:58,070
so locally the engineers are using for

00:29:53,480 --> 00:30:00,830
example vagrant and virtualbox for

00:29:58,070 --> 00:30:06,249
example for just spinning up there test

00:30:00,830 --> 00:30:06,249
machines and there are given special

00:30:06,639 --> 00:30:11,929
well you actually need some special

00:30:09,259 --> 00:30:14,299
attributes for 48 of a yes stuff and

00:30:11,929 --> 00:30:17,830
what we are doing is we let Jenkins

00:30:14,299 --> 00:30:21,799
supply this this stuff to to the test

00:30:17,830 --> 00:30:24,289
but we are also working on what we are

00:30:21,799 --> 00:30:30,049
playing around with doing this in inside

00:30:24,289 --> 00:30:33,710
of docker and we have some ideas of

00:30:30,049 --> 00:30:41,899
trying this in a combination of messrs

00:30:33,710 --> 00:30:45,759
and QA more soak a VM instances but this

00:30:41,899 --> 00:30:45,759
is actually not working currently

00:30:48,920 --> 00:30:59,890
anyone else all right and thank you for

00:30:56,660 --> 00:30:59,890

YouTube URL: https://www.youtube.com/watch?v=f85zJr2siYY


