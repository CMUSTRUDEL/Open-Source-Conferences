Title: OSDC 2016 - Introduction to Testing Puppet Modules by David Schmitt
Publication date: 2016-05-03
Playlist: OSDC 2016 | Open Source Data Center Conference
Description: 
	Are you a puppet module author? Do other people use your puppet code? Do you want to know what your change broke? Would future-you still know what you expected here? Using automated tests can help you with this. There are tools to help you answer all this for puppet modules, but only few use them. Join this talk to get an introduction to the rspec-puppet and beaker-rspec test frameworks, learn how to run automated tests on your puppet modules, and learn how to write good tests.
Captions: 
	00:00:11,780 --> 00:00:17,900
so welcome back everyone I hope you

00:00:14,510 --> 00:00:19,550
enjoyed lunch I'm now introducing David

00:00:17,900 --> 00:00:28,430
Smith who will tell us something about

00:00:19,550 --> 00:00:32,419
testing puppet modules enjoy hello

00:00:28,430 --> 00:00:35,440
everyone welcome to my talk about the

00:00:32,419 --> 00:00:40,670
various ways of testing puppet modules

00:00:35,440 --> 00:00:42,199
I've been I've been working out for Papa

00:00:40,670 --> 00:00:45,410
types for a year but I've been

00:00:42,199 --> 00:00:48,530
freelancing on puppet and Linux for

00:00:45,410 --> 00:00:50,899
quite some time before that now I'm one

00:00:48,530 --> 00:00:53,210
of the people working on the puppet the

00:00:50,899 --> 00:00:55,129
supported puppet modules and during the

00:00:53,210 --> 00:00:59,870
last year I've learned much about how

00:00:55,129 --> 00:01:02,870
people do tests and should test modules

00:00:59,870 --> 00:01:07,009
and since there's a certain cap on I

00:01:02,870 --> 00:01:10,340
will try to give you today and overview

00:01:07,009 --> 00:01:14,090
of what tools are available to test your

00:01:10,340 --> 00:01:17,689
modules and what are the smallest and

00:01:14,090 --> 00:01:19,430
easiest tests that you can run even if

00:01:17,689 --> 00:01:24,260
it's just on your local machine or your

00:01:19,430 --> 00:01:30,320
local workstation to gain confidence in

00:01:24,260 --> 00:01:32,119
your modules one thing I learned will

00:01:30,320 --> 00:01:34,340
while talking to people around here

00:01:32,119 --> 00:01:38,259
yesterday is that there is a wide range

00:01:34,340 --> 00:01:42,799
of organizations at very different

00:01:38,259 --> 00:01:47,060
development levels like some people are

00:01:42,799 --> 00:01:49,460
just committing to their kid repository

00:01:47,060 --> 00:01:51,770
their changes and then do know up runs

00:01:49,460 --> 00:01:56,119
to see if it works or not while other

00:01:51,770 --> 00:01:58,250
people are already have invested much

00:01:56,119 --> 00:02:01,850
more in their development and they have

00:01:58,250 --> 00:02:04,909
code review and automated testing

00:02:01,850 --> 00:02:08,380
pipelines that gives you feedback before

00:02:04,909 --> 00:02:12,049
anything touches production but I think

00:02:08,380 --> 00:02:15,140
the realization for me is that everybody

00:02:12,049 --> 00:02:17,180
is testing their puppet modules some of

00:02:15,140 --> 00:02:19,700
you are still doing it on the production

00:02:17,180 --> 00:02:23,480
systems and I hope I can I can today

00:02:19,700 --> 00:02:26,900
provide you with two

00:02:23,480 --> 00:02:29,930
so that you can do that on your local

00:02:26,900 --> 00:02:33,080
machine on a CI pipeline in a way that

00:02:29,930 --> 00:02:35,269
gives you the feedback so that you can

00:02:33,080 --> 00:02:38,379
be confident that your changes will do

00:02:35,269 --> 00:02:42,190
what you expect them to do for today I

00:02:38,379 --> 00:02:46,599
will go over the basic specifications

00:02:42,190 --> 00:02:50,930
that's more soft engineering topic on

00:02:46,599 --> 00:02:53,390
how those tests are written what to

00:02:50,930 --> 00:02:57,080
think about when writing those tests so

00:02:53,390 --> 00:02:59,239
that you have a tool box and you can

00:02:57,080 --> 00:03:01,130
start reading the existing tests in

00:02:59,239 --> 00:03:04,220
example modules there are quite a few

00:03:01,130 --> 00:03:08,720
out there that already have a big test

00:03:04,220 --> 00:03:12,410
suites that will give you tools to think

00:03:08,720 --> 00:03:14,930
about how to test modules and so that

00:03:12,410 --> 00:03:17,810
you can for yourself see which are the

00:03:14,930 --> 00:03:21,769
interesting tests which are the tests

00:03:17,810 --> 00:03:25,579
that maybe could be improved afterwards

00:03:21,769 --> 00:03:28,220
I will go on to testing catalogs which

00:03:25,579 --> 00:03:30,829
is a very quick way to get feedback on

00:03:28,220 --> 00:03:34,549
your change and the last part and will

00:03:30,829 --> 00:03:37,970
be thorough system testing where there

00:03:34,549 --> 00:03:40,940
are actually tools that will spin up

00:03:37,970 --> 00:03:42,680
complete VMs where your module runs and

00:03:40,940 --> 00:03:45,829
where you can have a high-quality

00:03:42,680 --> 00:03:50,959
feedback from an actual configuration of

00:03:45,829 --> 00:03:53,600
your module whether that created the

00:03:50,959 --> 00:03:56,829
configuration you were intending or

00:03:53,600 --> 00:04:02,239
whether something unexpected happened

00:03:56,829 --> 00:04:05,209
first let me talk about the basic

00:04:02,239 --> 00:04:06,349
specifications and as I said in the

00:04:05,209 --> 00:04:08,680
beginning that's more of a soft

00:04:06,349 --> 00:04:11,660
engineering topic and since

00:04:08,680 --> 00:04:13,790
infrastructure as code is a kind of soft

00:04:11,660 --> 00:04:18,950
engineering I want to spend a little bit

00:04:13,790 --> 00:04:24,110
of time on talking about how we can

00:04:18,950 --> 00:04:26,030
formulate the expectations we have on on

00:04:24,110 --> 00:04:27,590
the software way of writing on the

00:04:26,030 --> 00:04:35,659
infrastructure that we are coding up

00:04:27,590 --> 00:04:36,870
here in the in a very basic in a very

00:04:35,659 --> 00:04:39,750
basic

00:04:36,870 --> 00:04:42,330
form we have specifications like a

00:04:39,750 --> 00:04:45,740
bicycle on a flat surface when releasing

00:04:42,330 --> 00:04:47,340
it will topple over it's it's really

00:04:45,740 --> 00:04:52,320
very simple

00:04:47,340 --> 00:04:55,770
it has the object here that we are

00:04:52,320 --> 00:04:58,410
talking about it has some conditions in

00:04:55,770 --> 00:05:01,740
in which context are we talking about

00:04:58,410 --> 00:05:07,080
this object and it has at the end and

00:05:01,740 --> 00:05:10,620
expectation what are we expecting with

00:05:07,080 --> 00:05:13,410
this system to happen in in these in

00:05:10,620 --> 00:05:15,960
this context a different example over

00:05:13,410 --> 00:05:18,780
here on the right is a bicycle on effect

00:05:15,960 --> 00:05:20,070
surface when I push it it will roll on

00:05:18,780 --> 00:05:22,650
for a while of course it's a very

00:05:20,070 --> 00:05:24,900
trivial example but I think it already

00:05:22,650 --> 00:05:27,060
shows much of the structure that is

00:05:24,900 --> 00:05:29,970
happening here we have the same object

00:05:27,060 --> 00:05:31,430
we have the same precondition here on a

00:05:29,970 --> 00:05:35,100
flat surface

00:05:31,430 --> 00:05:38,120
because bicycles on stairs for example

00:05:35,100 --> 00:05:43,140
do not work as well but then we have

00:05:38,120 --> 00:05:44,910
additional additional context that is

00:05:43,140 --> 00:05:48,570
different and that represents the

00:05:44,910 --> 00:05:51,270
different use cases in in which this

00:05:48,570 --> 00:05:53,280
bicycle can be used of course the more

00:05:51,270 --> 00:05:56,070
interesting test and have humans or

00:05:53,280 --> 00:05:59,670
children on those bicycles but for today

00:05:56,070 --> 00:06:04,470
since we only have an hour I will skip

00:05:59,670 --> 00:06:09,180
the more painful parts in our spec

00:06:04,470 --> 00:06:11,480
r-spec is a Ruby DSL that encodes those

00:06:09,180 --> 00:06:16,340
expectations that we have on our systems

00:06:11,480 --> 00:06:19,590
in eight years Lu can read it here and

00:06:16,340 --> 00:06:22,350
there are very familiar elements already

00:06:19,590 --> 00:06:24,990
here we have the bicycle we have the

00:06:22,350 --> 00:06:28,920
context of being on a flat surface we

00:06:24,990 --> 00:06:30,930
have the context of when are we what are

00:06:28,920 --> 00:06:33,840
we doing with this cycle we are

00:06:30,930 --> 00:06:35,940
releasing it or we are pushing it and in

00:06:33,840 --> 00:06:38,850
in the center here we have the

00:06:35,940 --> 00:06:44,970
expectations that it either just falls

00:06:38,850 --> 00:06:46,560
on the ground or it rolls on a bit what

00:06:44,970 --> 00:06:49,560
is important here this is already

00:06:46,560 --> 00:06:50,280
executive or code you can run this as is

00:06:49,560 --> 00:06:54,150
and

00:06:50,280 --> 00:06:58,560
we'll give you the feedback on your

00:06:54,150 --> 00:07:02,040
expectations in in this case here it's

00:06:58,560 --> 00:07:05,060
just run the r-spec command with a few

00:07:02,040 --> 00:07:08,970
parameters so that is nice and readable

00:07:05,060 --> 00:07:13,740
and it will give you this documentation

00:07:08,970 --> 00:07:16,680
output here and in in this frame of

00:07:13,740 --> 00:07:19,230
thinking about what are we expecting

00:07:16,680 --> 00:07:24,419
from our modules from our system I think

00:07:19,230 --> 00:07:29,669
this is one of the primary outputs of

00:07:24,419 --> 00:07:31,830
those tests this is a list of what are

00:07:29,669 --> 00:07:36,980
we thinking about when we are when we

00:07:31,830 --> 00:07:40,250
wrote that module talking about or

00:07:36,980 --> 00:07:43,229
developing modules is already creating

00:07:40,250 --> 00:07:45,330
executable documentation and here it

00:07:43,229 --> 00:07:48,479
goes a step further here we are

00:07:45,330 --> 00:07:51,210
enumerated the use cases of how this

00:07:48,479 --> 00:07:54,990
code is expected to be used and it gives

00:07:51,210 --> 00:07:57,150
a list of in that case it's not yet

00:07:54,990 --> 00:08:00,630
implemented but it will give a list of

00:07:57,150 --> 00:08:03,479
expectations that those implementations

00:08:00,630 --> 00:08:07,110
are have to fulfill and this is

00:08:03,479 --> 00:08:08,640
something that even later we see when we

00:08:07,110 --> 00:08:10,590
run that after development this is

00:08:08,640 --> 00:08:13,950
something that you can integrate in your

00:08:10,590 --> 00:08:16,470
local workflow and that can give you a

00:08:13,950 --> 00:08:19,100
very quick feedback is my syntax correct

00:08:16,470 --> 00:08:19,100
and so on

00:08:20,610 --> 00:08:26,250
of course as I show before the

00:08:24,090 --> 00:08:29,940
expectations to not have yet any code

00:08:26,250 --> 00:08:34,860
attached so Ruby can't actually do

00:08:29,940 --> 00:08:37,080
anything with it and in in the case of

00:08:34,860 --> 00:08:41,099
the example of the basically it doesn't

00:08:37,080 --> 00:08:44,370
know what a bicycle is so the first

00:08:41,099 --> 00:08:48,870
thing that r-spec provides our methods

00:08:44,370 --> 00:08:52,500
to add data to those examples in the

00:08:48,870 --> 00:08:54,630
simplest case it's let and a name and it

00:08:52,500 --> 00:08:57,750
has back here some Ruby code that

00:08:54,630 --> 00:09:02,610
creates data for the examples we are

00:08:57,750 --> 00:09:03,550
running this data is then held for you

00:09:02,610 --> 00:09:05,890
you

00:09:03,550 --> 00:09:09,279
the runtime of an example and it's their

00:09:05,890 --> 00:09:14,740
rules and when this is refreshed so you

00:09:09,279 --> 00:09:17,740
get fresh instances of your code for the

00:09:14,740 --> 00:09:21,640
next example and there's a specific

00:09:17,740 --> 00:09:24,730
thing the so called subject that is the

00:09:21,640 --> 00:09:28,000
thing the the actual code thing that is

00:09:24,730 --> 00:09:31,779
being tested in the current context of a

00:09:28,000 --> 00:09:34,060
bicycle and in this case it's just the

00:09:31,779 --> 00:09:36,760
new class a new instance of the bicycle

00:09:34,060 --> 00:09:38,529
with the given owner and r-spec will

00:09:36,760 --> 00:09:42,160
take care in the background that for

00:09:38,529 --> 00:09:45,250
every example we get a fresh instance

00:09:42,160 --> 00:09:47,079
here that can be tested according to our

00:09:45,250 --> 00:09:49,180
expectations this is important to get

00:09:47,079 --> 00:09:52,209
fresh examples because if the if the

00:09:49,180 --> 00:09:56,430
tests are modifying the data our tests

00:09:52,209 --> 00:09:58,839
would maybe fail or have expectations or

00:09:56,430 --> 00:10:03,399
assumptions in there that are not

00:09:58,839 --> 00:10:06,220
uncovered the other thing of course that

00:10:03,399 --> 00:10:09,820
we have to add this behavior r-spec

00:10:06,220 --> 00:10:12,250
provides hooks in each context that

00:10:09,820 --> 00:10:16,420
provide you with a possibility of

00:10:12,250 --> 00:10:19,480
running Ruby code before or after each

00:10:16,420 --> 00:10:22,329
example in this case if I want to say

00:10:19,480 --> 00:10:27,730
what actually does it mean when I push a

00:10:22,329 --> 00:10:29,589
bicycle in in this pictures example

00:10:27,730 --> 00:10:33,130
implementation it means I need to call

00:10:29,589 --> 00:10:35,320
to two functions on that object and it

00:10:33,130 --> 00:10:39,399
will change the internal state of the

00:10:35,320 --> 00:10:42,459
object and in this case here this is run

00:10:39,399 --> 00:10:46,290
before each example so every time an

00:10:42,459 --> 00:10:50,730
example is evaluated it will also apply

00:10:46,290 --> 00:10:57,010
these actions to define what it means

00:10:50,730 --> 00:11:01,290
when pushing this bicycling another

00:10:57,010 --> 00:11:03,550
feature is sometimes expansive

00:11:01,290 --> 00:11:07,300
calculations need to be done like

00:11:03,550 --> 00:11:11,410
creating a puppet catalog that need to

00:11:07,300 --> 00:11:14,260
be shared across examples and the hook

00:11:11,410 --> 00:11:17,150
to do so is the all hook which is run

00:11:14,260 --> 00:11:22,270
once for the context and

00:11:17,150 --> 00:11:25,820
the the data is shared here using

00:11:22,270 --> 00:11:29,570
instance variables of course the danger

00:11:25,820 --> 00:11:31,700
here is that if this state is modified

00:11:29,570 --> 00:11:34,370
in one of the examples other examples

00:11:31,700 --> 00:11:36,640
again may have built-in assumptions in

00:11:34,370 --> 00:11:39,350
how the data looks like

00:11:36,640 --> 00:11:41,750
but it is important to keep that to a

00:11:39,350 --> 00:11:43,310
minimum because during development you

00:11:41,750 --> 00:11:44,630
want to maybe run only one of the

00:11:43,310 --> 00:11:47,120
examples because that's what you're

00:11:44,630 --> 00:11:48,710
currently working on and you don't want

00:11:47,120 --> 00:11:52,040
to have all the tests running because

00:11:48,710 --> 00:11:53,510
they take some time and so this is

00:11:52,040 --> 00:11:59,120
something to consider when you're

00:11:53,510 --> 00:12:04,339
writing this and finally you want to add

00:11:59,120 --> 00:12:07,910
those matters those expectations how the

00:12:04,339 --> 00:12:10,910
state after after you have defined the

00:12:07,910 --> 00:12:13,940
object and you have defined the behavior

00:12:10,910 --> 00:12:17,180
that you're looking at the final piece

00:12:13,940 --> 00:12:19,070
is what is actually expected of that

00:12:17,180 --> 00:12:22,430
what does it mean that it should fall

00:12:19,070 --> 00:12:25,580
over what does it mean to be rolling in

00:12:22,430 --> 00:12:28,150
this case a very again a very simple

00:12:25,580 --> 00:12:32,540
implementation I just have defined two

00:12:28,150 --> 00:12:34,880
accessors in in this Rubik sauce that is

00:12:32,540 --> 00:12:38,330
the bicycle rolling and what is its

00:12:34,880 --> 00:12:41,240
current speed and the simplest examples

00:12:38,330 --> 00:12:43,130
here are it is expected to be rolling or

00:12:41,240 --> 00:12:44,930
it is expected to have certain

00:12:43,130 --> 00:12:49,400
attributes with a value that is greater

00:12:44,930 --> 00:12:51,440
than 0 all these alternative syntax I

00:12:49,400 --> 00:12:54,200
just put this here for reference so if

00:12:51,440 --> 00:12:57,380
you look at the size afterwards you can

00:12:54,200 --> 00:12:59,570
see what those terms are meaning there

00:12:57,380 --> 00:13:03,230
is some Ruby magic going on that this is

00:12:59,570 --> 00:13:06,050
translated to a call on the subject

00:13:03,230 --> 00:13:10,880
which is referenced here by the default

00:13:06,050 --> 00:13:13,820
it is expected but again I think the

00:13:10,880 --> 00:13:16,220
goal here is for you to understand how

00:13:13,820 --> 00:13:19,370
those pieces are being put together on a

00:13:16,220 --> 00:13:22,580
very high level so that if you meet this

00:13:19,370 --> 00:13:24,740
then in in the example code or in

00:13:22,580 --> 00:13:26,870
further documentation you can already

00:13:24,740 --> 00:13:28,160
have an understanding of what's going on

00:13:26,870 --> 00:13:29,950
here how are these pieces fitting

00:13:28,160 --> 00:13:32,320
together

00:13:29,950 --> 00:13:36,970
for the second half where do I want to

00:13:32,320 --> 00:13:39,730
go with that running one of those

00:13:36,970 --> 00:13:43,540
examples now that we have integrated all

00:13:39,730 --> 00:13:47,500
this information and code and I think

00:13:43,540 --> 00:13:50,920
this is one of is another one of those

00:13:47,500 --> 00:13:54,580
things where this expectation based

00:13:50,920 --> 00:13:56,830
approach is very helpful with all this

00:13:54,580 --> 00:13:59,560
information r-spec when one of these

00:13:56,830 --> 00:14:02,200
expectations fails can now give me very

00:13:59,560 --> 00:14:07,180
detailed and specific information about

00:14:02,200 --> 00:14:10,060
what is going wrong here in this case we

00:14:07,180 --> 00:14:12,430
again have this example a bicycle on the

00:14:10,060 --> 00:14:14,710
flat surface when pushing it should have

00:14:12,430 --> 00:14:19,380
the attribute speed has a value greater

00:14:14,710 --> 00:14:23,740
than zero and to make this interesting

00:14:19,380 --> 00:14:27,990
the thing I ran here I had a negative

00:14:23,740 --> 00:14:31,000
speed which is weird and that's why

00:14:27,990 --> 00:14:34,270
r-spec is complaining about here and it

00:14:31,000 --> 00:14:36,400
can provide us with the source code the

00:14:34,270 --> 00:14:39,040
line of the source that is the

00:14:36,400 --> 00:14:41,020
expectation so when you have this

00:14:39,040 --> 00:14:43,300
running in your CI you already have the

00:14:41,020 --> 00:14:46,270
context of where this is happening and

00:14:43,300 --> 00:14:50,470
what was the expectation there so again

00:14:46,270 --> 00:14:53,950
it's not only a test tool but it's also

00:14:50,470 --> 00:14:58,240
a communication tool in where you can

00:14:53,950 --> 00:15:00,160
encode what your intent there was which

00:14:58,240 --> 00:15:03,070
is important when you come back like a

00:15:00,160 --> 00:15:05,470
month later or two months later or if

00:15:03,070 --> 00:15:10,000
it's just code from your colleague

00:15:05,470 --> 00:15:12,160
across the hallway and they are on on

00:15:10,000 --> 00:15:13,810
holidays or just in a different project

00:15:12,160 --> 00:15:17,520
now and you need to figure out what

00:15:13,810 --> 00:15:21,100
actually was the expectation there and

00:15:17,520 --> 00:15:24,270
being a tool with a ruby development

00:15:21,100 --> 00:15:27,610
background it will also provide here the

00:15:24,270 --> 00:15:31,740
actual Ruby class that was in the

00:15:27,610 --> 00:15:34,930
background with all its attributes and

00:15:31,740 --> 00:15:38,530
with the diff of what went wrong and

00:15:34,930 --> 00:15:41,020
what was expected and physik and if it's

00:15:38,530 --> 00:15:43,690
running in CI it tries to encode all the

00:15:41,020 --> 00:15:46,450
information to reproduce the

00:15:43,690 --> 00:15:50,350
so that you can go straight to the error

00:15:46,450 --> 00:15:54,240
and don't have to figure out for a long

00:15:50,350 --> 00:15:54,240
time what actually was going on there

00:15:54,990 --> 00:16:00,160
the final thing I want to show you is in

00:15:57,940 --> 00:16:04,150
some cases expectations are not just a

00:16:00,160 --> 00:16:06,250
singie value to be tested but a more

00:16:04,150 --> 00:16:08,950
complex ones and in this case you can do

00:16:06,250 --> 00:16:13,030
it like this right again a little

00:16:08,950 --> 00:16:17,740
description up here and add more code in

00:16:13,030 --> 00:16:22,560
here that does maybe another computation

00:16:17,740 --> 00:16:26,200
or execute a command and then you can

00:16:22,560 --> 00:16:29,470
add an expectation on on this value that

00:16:26,200 --> 00:16:32,760
will again lead to a error message if

00:16:29,470 --> 00:16:35,650
it's not matching like the before one I

00:16:32,760 --> 00:16:42,310
know I'm going very quickly those

00:16:35,650 --> 00:16:47,320
through those things oh sorry

00:16:42,310 --> 00:16:51,130
and final thing here if those

00:16:47,320 --> 00:16:54,790
expectations become bigger and more

00:16:51,130 --> 00:16:56,290
unwieldy or if you have several use

00:16:54,790 --> 00:16:58,810
cases that share some of their

00:16:56,290 --> 00:17:02,260
properties it is also possible to create

00:16:58,810 --> 00:17:04,720
shared examples like here I say a

00:17:02,260 --> 00:17:07,000
rolling bicycle needs to be rolling and

00:17:04,720 --> 00:17:10,540
again have a speed greater than zero and

00:17:07,000 --> 00:17:16,180
at any point in my in my test suite

00:17:10,540 --> 00:17:18,160
where I have a rolling bike I can I can

00:17:16,180 --> 00:17:21,040
use just it behaves like a rolling

00:17:18,160 --> 00:17:25,180
bicycle and it will use the local

00:17:21,040 --> 00:17:29,200
subject where that is defined and bring

00:17:25,180 --> 00:17:32,160
with it all those expectations this is

00:17:29,200 --> 00:17:35,050
like when I have a module with a class I

00:17:32,160 --> 00:17:39,940
as I reuse that class to provide a

00:17:35,050 --> 00:17:42,040
specific baseline for where use it this

00:17:39,940 --> 00:17:47,200
in the tests also provides a certain

00:17:42,040 --> 00:17:49,690
baseline of functionality how the the

00:17:47,200 --> 00:17:52,750
test subject here is expected to work

00:17:49,690 --> 00:17:56,289
and for example this is also useful if I

00:17:52,750 --> 00:17:59,210
then want to add an example like

00:17:56,289 --> 00:18:01,820
that it's not only rolling but it's also

00:17:59,210 --> 00:18:03,919
not yet fallen to the floor I can add

00:18:01,820 --> 00:18:06,500
this expectation here to the shared

00:18:03,919 --> 00:18:10,100
examples and when the test which runs it

00:18:06,500 --> 00:18:13,159
will be evaluated in every place where I

00:18:10,100 --> 00:18:16,720
expect a rolling basically and again

00:18:13,159 --> 00:18:19,250
might uncover unknown assumptions or

00:18:16,720 --> 00:18:22,700
maybe a place where the bicycle is

00:18:19,250 --> 00:18:26,269
rolling but it's mounted on on a carrier

00:18:22,700 --> 00:18:30,220
and it's has some different use cases

00:18:26,269 --> 00:18:30,220
where that means something different and

00:18:31,389 --> 00:18:36,169
exposing those assumptions then is only

00:18:34,429 --> 00:18:38,299
the first step to actually addressing

00:18:36,169 --> 00:18:41,240
the problem but you can address it

00:18:38,299 --> 00:18:43,279
before you push it to production and you

00:18:41,240 --> 00:18:45,950
can have those conversations over a

00:18:43,279 --> 00:18:47,840
coffee and not while your manager is

00:18:45,950 --> 00:18:49,549
standing over your shoulder and crying

00:18:47,840 --> 00:18:57,919
while production is currently love

00:18:49,549 --> 00:19:01,000
working during development of a module

00:18:57,919 --> 00:19:04,879
something that can be very helpful is

00:19:01,000 --> 00:19:09,799
this tagging here in in the most common

00:19:04,879 --> 00:19:13,730
form what you can do is add for a

00:19:09,799 --> 00:19:19,009
certain context or a single example just

00:19:13,730 --> 00:19:24,080
add this tag here : focus and then

00:19:19,009 --> 00:19:28,460
running the the our specs ad - - tag

00:19:24,080 --> 00:19:29,990
focus and it will only run the specific

00:19:28,460 --> 00:19:32,500
examples that are tagged with that focus

00:19:29,990 --> 00:19:35,240
for example if I'm currently working on

00:19:32,500 --> 00:19:38,210
the reverse proxy functionality of

00:19:35,240 --> 00:19:43,039
Apache and I don't want to run all the

00:19:38,210 --> 00:19:45,830
examples that are deal with a virtual

00:19:43,039 --> 00:19:49,519
hosting of PAP applications I can just

00:19:45,830 --> 00:19:54,019
tag for a while my local examples that

00:19:49,519 --> 00:19:56,899
are relevant to reverse proxying and i

00:19:54,019 --> 00:19:59,929
don't need to execute the whole test

00:19:56,899 --> 00:20:02,409
suite and can save some time during

00:19:59,929 --> 00:20:02,409
development

00:20:05,280 --> 00:20:09,270
I know I've been going quite fast

00:20:07,320 --> 00:20:11,820
through all those examples because I

00:20:09,270 --> 00:20:15,540
don't think that we today have the time

00:20:11,820 --> 00:20:17,790
for you to learn all the details or get

00:20:15,540 --> 00:20:21,240
familiar with how everything is put

00:20:17,790 --> 00:20:22,860
together and I only want to give you an

00:20:21,240 --> 00:20:24,900
overview that you have heard all of

00:20:22,860 --> 00:20:26,760
those parts that may be relevant to your

00:20:24,900 --> 00:20:29,640
work and if you're actually working with

00:20:26,760 --> 00:20:30,150
it looking at the documentation of

00:20:29,640 --> 00:20:32,580
r-spec

00:20:30,150 --> 00:20:35,460
on radio app is a much better way

00:20:32,580 --> 00:20:41,040
because there you have a list of all the

00:20:35,460 --> 00:20:42,750
possible measures of all the special

00:20:41,040 --> 00:20:45,150
things you can do with shared examples

00:20:42,750 --> 00:20:46,650
and shared contexts and how the tagging

00:20:45,150 --> 00:20:51,270
works you can read up on all of those

00:20:46,650 --> 00:20:55,550
features so that you can use the tool -

00:20:51,270 --> 00:20:58,170
it's for all its verse for for your work

00:20:55,550 --> 00:21:01,350
another site I would like to suggest to

00:20:58,170 --> 00:21:04,110
you is better specs on it's not specific

00:21:01,350 --> 00:21:08,940
to puppet modules but more geared

00:21:04,110 --> 00:21:11,850
towards other software engineering but

00:21:08,940 --> 00:21:13,590
it will if you browse through the

00:21:11,850 --> 00:21:15,810
examples they give and the

00:21:13,590 --> 00:21:20,250
recommendations it - it will give you an

00:21:15,810 --> 00:21:26,850
a feeling for how well written examples

00:21:20,250 --> 00:21:29,190
look like so that later on you can

00:21:26,850 --> 00:21:31,650
benefit from the experience that is

00:21:29,190 --> 00:21:34,080
encoded there in how to write examples

00:21:31,650 --> 00:21:36,870
that actually tell you what's going

00:21:34,080 --> 00:21:42,030
wrong when you hit one of those hidden

00:21:36,870 --> 00:21:46,470
assumptions but now let's get to - the

00:21:42,030 --> 00:21:48,870
real interesting thing how do these

00:21:46,470 --> 00:21:51,000
r-spec tests actually work when we have

00:21:48,870 --> 00:21:53,520
a puppet catalogue and what are the

00:21:51,000 --> 00:21:55,980
expectations we have on our puppet

00:21:53,520 --> 00:21:57,960
catalogues when you are developing a new

00:21:55,980 --> 00:22:01,080
piece of functionality for an existing

00:21:57,960 --> 00:22:04,650
system or if you're programming that

00:22:01,080 --> 00:22:07,260
from scratch again

00:22:04,650 --> 00:22:09,540
I can I will only show you the very

00:22:07,260 --> 00:22:14,940
minimal set of tests that everybody

00:22:09,540 --> 00:22:18,520
should run and that is the baseline of

00:22:14,940 --> 00:22:21,580
minimal stuff that will already keep

00:22:18,520 --> 00:22:23,200
from going back and forth with your

00:22:21,580 --> 00:22:27,120
production commits or with your

00:22:23,200 --> 00:22:30,040
colleagues or your test systems because

00:22:27,120 --> 00:22:31,870
and and I hope after my explanations

00:22:30,040 --> 00:22:35,580
from before you will be able to to

00:22:31,870 --> 00:22:38,920
follow me here we can have here a

00:22:35,580 --> 00:22:40,800
specification for a scanner class like a

00:22:38,920 --> 00:22:45,060
virus scanner or email scanner or

00:22:40,800 --> 00:22:49,720
anything like that and when you put this

00:22:45,060 --> 00:22:51,820
using the relevant pilot plate files

00:22:49,720 --> 00:22:53,860
that I again I will skip you for you

00:22:51,820 --> 00:22:55,780
because you can just look at the

00:22:53,860 --> 00:22:57,850
skeletons that are out there and use

00:22:55,780 --> 00:23:02,140
them to configure it but if you put that

00:22:57,850 --> 00:23:04,840
into the correct location and run the

00:23:02,140 --> 00:23:09,790
acceptance test you can have the class

00:23:04,840 --> 00:23:11,980
name here and it is expected to compile

00:23:09,790 --> 00:23:14,050
this all dependencies and the magic that

00:23:11,980 --> 00:23:17,230
is happening here is always in this

00:23:14,050 --> 00:23:24,910
metric here and it will create a catalog

00:23:17,230 --> 00:23:28,900
that has it will create a catalog that

00:23:24,910 --> 00:23:32,740
has the single include class include the

00:23:28,900 --> 00:23:39,760
scanner class and it will try to compile

00:23:32,740 --> 00:23:41,710
a catalog for that node so that this

00:23:39,760 --> 00:23:44,290
class is evaluated and it would act as

00:23:41,710 --> 00:23:47,920
if somewhere on a machine the puppet

00:23:44,290 --> 00:23:49,960
agent just asked for for a configuration

00:23:47,920 --> 00:23:56,380
for a node that is only classified with

00:23:49,960 --> 00:23:59,830
the scanner node and once the the thing

00:23:56,380 --> 00:24:02,770
is compiled it will check that the

00:23:59,830 --> 00:24:06,850
catalog does not have any dependency

00:24:02,770 --> 00:24:08,410
issues so it already provides at least

00:24:06,850 --> 00:24:10,990
the confidence that you didn't have any

00:24:08,410 --> 00:24:15,670
typos that all types you're referencing

00:24:10,990 --> 00:24:17,440
exist that you're not waiting for a

00:24:15,670 --> 00:24:19,690
notification of something that's not in

00:24:17,440 --> 00:24:25,060
your catalog all the classes you include

00:24:19,690 --> 00:24:26,560
exist and so on and so on of course that

00:24:25,060 --> 00:24:28,270
could still mean that the configuration

00:24:26,560 --> 00:24:30,700
files that the scanner class here is

00:24:28,270 --> 00:24:32,110
deploying has a syntax error that will

00:24:30,700 --> 00:24:34,929
cause the test

00:24:32,110 --> 00:24:39,280
cannot to fail but the big advantage of

00:24:34,929 --> 00:24:42,730
this one here is this runs on yeah on

00:24:39,280 --> 00:24:45,400
any of your laptops you can run this and

00:24:42,730 --> 00:24:48,760
you will get an answer within one or two

00:24:45,400 --> 00:24:51,460
seconds and it will already provide you

00:24:48,760 --> 00:24:53,410
with much information and confidence

00:24:51,460 --> 00:24:56,950
that what you've written is not total

00:24:53,410 --> 00:24:59,200
garbage I mean it's I hope something we

00:24:56,950 --> 00:25:01,570
all aim for but there are distractions

00:24:59,200 --> 00:25:05,290
and we need to get our work done and

00:25:01,570 --> 00:25:07,090
having this check already can give you

00:25:05,290 --> 00:25:12,309
the confidence that that you have missed

00:25:07,090 --> 00:25:16,230
anything I mean I usually can't write

00:25:12,309 --> 00:25:21,070
code on the first try that passes that

00:25:16,230 --> 00:25:24,160
and I don't think now I'm so stupid

00:25:21,070 --> 00:25:27,100
so it's it's not something to be too

00:25:24,160 --> 00:25:29,830
concerned about but having someone to

00:25:27,100 --> 00:25:32,890
double check that and give you an answer

00:25:29,830 --> 00:25:36,400
within the second or two is already very

00:25:32,890 --> 00:25:39,070
helpful to not have to commit it and

00:25:36,400 --> 00:25:40,960
wait until the C is running or wait

00:25:39,070 --> 00:25:43,860
until it's deployed in the puppetmaster

00:25:40,960 --> 00:25:47,710
and I can have an agent run over there

00:25:43,860 --> 00:25:54,520
but I get the error message right right

00:25:47,710 --> 00:25:57,850
in front of me on my workstation of

00:25:54,520 --> 00:26:00,460
course the truth is many classes don't

00:25:57,850 --> 00:26:03,010
work just as include class name and it

00:26:00,460 --> 00:26:04,870
and it magically works the class wants

00:26:03,010 --> 00:26:07,059
to know on which operation system is it

00:26:04,870 --> 00:26:11,559
running which package should should it

00:26:07,059 --> 00:26:15,130
install it needs keys to work it needs

00:26:11,559 --> 00:26:18,250
other dependencies it needs parameters

00:26:15,130 --> 00:26:21,760
what are SPECT puppet here provides you

00:26:18,250 --> 00:26:24,190
with is with those LED statements as

00:26:21,760 --> 00:26:28,030
explained in the first part you can add

00:26:24,190 --> 00:26:30,070
facts to the isolated environment where

00:26:28,030 --> 00:26:32,410
the catalog is is being compiled

00:26:30,070 --> 00:26:35,110
you can add params that are passed to

00:26:32,410 --> 00:26:37,960
the class and you can just add more

00:26:35,110 --> 00:26:42,010
puppet code that is included before your

00:26:37,960 --> 00:26:44,590
class is included and with with those

00:26:42,010 --> 00:26:46,029
three things you can already test

00:26:44,590 --> 00:26:49,389
alright I have

00:26:46,029 --> 00:26:52,110
well six boxes over there that need to

00:26:49,389 --> 00:26:54,779
scan reconfigured like that and I have

00:26:52,110 --> 00:26:58,090
well seven boxes over there that need

00:26:54,779 --> 00:27:01,750
different per arms and so on and you can

00:26:58,090 --> 00:27:04,690
encode your different use cases of your

00:27:01,750 --> 00:27:07,360
class also using different prawns

00:27:04,690 --> 00:27:10,470
perhaps I have a client here and I have

00:27:07,360 --> 00:27:15,340
a high security configuration over there

00:27:10,470 --> 00:27:17,379
you can encode those different use cases

00:27:15,340 --> 00:27:18,669
in different contexts and again

00:27:17,379 --> 00:27:21,730
depending on which feature you're

00:27:18,669 --> 00:27:24,909
working on get the required feedback on

00:27:21,730 --> 00:27:31,629
is it still working or is it not yet

00:27:24,909 --> 00:27:34,539
broken and the other benefit here is if

00:27:31,629 --> 00:27:37,179
if you're collaborating on your modules

00:27:34,539 --> 00:27:39,669
either with yourself over time or with

00:27:37,179 --> 00:27:43,179
colleagues at the same time everybody

00:27:39,669 --> 00:27:46,990
can encode their expectations into those

00:27:43,179 --> 00:27:49,120
tests and if you're at one and expecting

00:27:46,990 --> 00:27:51,279
like in the high security configuration

00:27:49,120 --> 00:27:53,830
you're expecting that there is some

00:27:51,279 --> 00:27:56,200
other resource present that is relevant

00:27:53,830 --> 00:27:58,210
to the high security configuration but

00:27:56,200 --> 00:28:00,370
you also have a workstation

00:27:58,210 --> 00:28:04,059
configuration that doesn't have those

00:28:00,370 --> 00:28:06,490
added resources this can already tell

00:28:04,059 --> 00:28:08,350
you that while working on the high

00:28:06,490 --> 00:28:09,669
security configuration you created

00:28:08,350 --> 00:28:14,169
something that will not work on the

00:28:09,669 --> 00:28:16,480
workstations and again you have a error

00:28:14,169 --> 00:28:18,399
condition that maybe even when

00:28:16,480 --> 00:28:19,840
committing to production and trying it

00:28:18,399 --> 00:28:22,690
out on one of the high security hosts

00:28:19,840 --> 00:28:25,659
you would not have seen because you're

00:28:22,690 --> 00:28:27,850
did not while working on the one feature

00:28:25,659 --> 00:28:32,950
did not think about the consequences on

00:28:27,850 --> 00:28:34,960
a different host of course in with more

00:28:32,950 --> 00:28:37,090
investment in automation you don't

00:28:34,960 --> 00:28:40,230
always have to run those on your local

00:28:37,090 --> 00:28:45,909
system and again a trade-off between

00:28:40,230 --> 00:28:49,299
quick feedback and in death checking of

00:28:45,909 --> 00:28:51,610
your module is what I often do is I run

00:28:49,299 --> 00:28:53,409
the tests I'm working on locally while

00:28:51,610 --> 00:28:55,840
I'm working on and when they pass I pass

00:28:53,409 --> 00:28:57,460
it on to the CI and to see I will tell

00:28:55,840 --> 00:28:59,710
me if there's anything else I missed

00:28:57,460 --> 00:29:02,679
because it's easier to let the CI

00:28:59,710 --> 00:29:04,990
do the work and have a coffee then then

00:29:02,679 --> 00:29:12,279
wait on it on your on your local

00:29:04,990 --> 00:29:16,950
workstation the other thing that the

00:29:12,279 --> 00:29:19,659
r-spec puppet gem provides is not only

00:29:16,950 --> 00:29:21,730
expectations on the basic that it

00:29:19,659 --> 00:29:25,120
compiles and and has all the

00:29:21,730 --> 00:29:28,419
dependencies fulfilled of course what's

00:29:25,120 --> 00:29:31,750
also important is often to verify that a

00:29:28,419 --> 00:29:35,740
specific configuration contains specific

00:29:31,750 --> 00:29:38,799
resources like on recently example was

00:29:35,740 --> 00:29:39,250
on the NTP module the NTP configuration

00:29:38,799 --> 00:29:42,909
on

00:29:39,250 --> 00:29:44,820
Suzu 12 has very interesting opinions

00:29:42,909 --> 00:29:47,169
about how and the P should be configured

00:29:44,820 --> 00:29:49,480
but if you just want to have it

00:29:47,169 --> 00:29:52,299
configured to talk to your specific NTP

00:29:49,480 --> 00:29:56,799
servers that interferes and now there is

00:29:52,299 --> 00:30:00,100
a test that requires that that specific

00:29:56,799 --> 00:30:03,429
configuration is deleted on souza 12 and

00:30:00,100 --> 00:30:05,710
so there is also this expectation that

00:30:03,429 --> 00:30:09,130
on to the 12th that file is removed and

00:30:05,710 --> 00:30:11,409
coded in in the test suite so that if

00:30:09,130 --> 00:30:14,679
somebody comes along later does not

00:30:11,409 --> 00:30:17,620
delete it just because but also sees

00:30:14,679 --> 00:30:22,570
this expectation this assumption here

00:30:17,620 --> 00:30:25,960
encoded to go into the details in in my

00:30:22,570 --> 00:30:29,830
scanner class for example I need to

00:30:25,960 --> 00:30:32,710
manage this spool directory and I can

00:30:29,830 --> 00:30:35,470
only manage that after the scanner

00:30:32,710 --> 00:30:38,080
install class is applied and in the

00:30:35,470 --> 00:30:40,690
source code of course I want to talk

00:30:38,080 --> 00:30:44,830
about the top-level class because then

00:30:40,690 --> 00:30:47,980
I'm shielded in the module site from the

00:30:44,830 --> 00:30:50,649
changes that people do to this install

00:30:47,980 --> 00:30:53,049
class maybe the packages change or maybe

00:30:50,649 --> 00:30:56,830
additional directories needed to be

00:30:53,049 --> 00:31:00,700
managed there but in in the test what I

00:30:56,830 --> 00:31:02,590
can then do is I can say the catalog is

00:31:00,700 --> 00:31:05,350
expected to contain a file with the

00:31:02,590 --> 00:31:07,419
scanner that notifies the service

00:31:05,350 --> 00:31:09,039
because that's maybe something else that

00:31:07,419 --> 00:31:12,549
needs to be done it needs to have

00:31:09,039 --> 00:31:13,660
certain parameters and then what I can

00:31:12,549 --> 00:31:16,150
do is I can

00:31:13,660 --> 00:31:18,580
much more specific about my expectations

00:31:16,150 --> 00:31:20,170
that it requires a specific package and

00:31:18,580 --> 00:31:25,360
that it requires a specific others

00:31:20,170 --> 00:31:28,530
package to get a little bit more of of

00:31:25,360 --> 00:31:31,720
this this hidden assumptions in the code

00:31:28,530 --> 00:31:33,940
not only needs to require that install

00:31:31,720 --> 00:31:38,110
class that maybe is in the next version

00:31:33,940 --> 00:31:42,300
completely empty but really get into the

00:31:38,110 --> 00:31:42,300
depth of what the module is trying to do

00:31:42,330 --> 00:31:53,560
- sorry - to have the safety and the

00:31:50,290 --> 00:31:57,310
confidence that as long as this test has

00:31:53,560 --> 00:32:01,810
been green before rolling that module

00:31:57,310 --> 00:32:06,100
out to the production that will work

00:32:01,810 --> 00:32:08,950
together as I was thinking about it

00:32:06,100 --> 00:32:20,350
during development of of that feature

00:32:08,950 --> 00:32:22,840
here our spec puppet also provides a

00:32:20,350 --> 00:32:24,910
host of other features again in the

00:32:22,840 --> 00:32:26,830
short time we have today I only want to

00:32:24,910 --> 00:32:28,570
introduce you to them on a very high

00:32:26,830 --> 00:32:33,880
level so that you know what you're

00:32:28,570 --> 00:32:35,770
missing out for defines if you if you

00:32:33,880 --> 00:32:37,660
are not only testing your classes but

00:32:35,770 --> 00:32:41,670
also your defines for example I kept a

00:32:37,660 --> 00:32:44,220
TV host or if you if you have a database

00:32:41,670 --> 00:32:46,150
with specific configurations that you're

00:32:44,220 --> 00:32:48,220
configuring often and where you have a

00:32:46,150 --> 00:32:51,070
define for that specific kind of

00:32:48,220 --> 00:32:57,370
database configuration you can add a

00:32:51,070 --> 00:32:59,410
title to your contacts that is then

00:32:57,370 --> 00:33:02,970
passed on to the define because you can

00:32:59,410 --> 00:33:06,670
test its repair arms of course for

00:33:02,970 --> 00:33:08,470
puppet functions you have this run

00:33:06,670 --> 00:33:11,560
matter where you can say this function

00:33:08,470 --> 00:33:15,220
is expected to run this the params and

00:33:11,560 --> 00:33:17,290
return a specific thing so this is

00:33:15,220 --> 00:33:20,410
already very soft engineer programming

00:33:17,290 --> 00:33:23,110
of course but sometimes you need to have

00:33:20,410 --> 00:33:26,470
a specific data transformation or a

00:33:23,110 --> 00:33:27,460
look-up on an external database and this

00:33:26,470 --> 00:33:29,080
year can

00:33:27,460 --> 00:33:35,789
can help you to check the basic

00:33:29,080 --> 00:33:38,710
assumptions built into that code so that

00:33:35,789 --> 00:33:40,960
you you have your confidence in in

00:33:38,710 --> 00:33:45,520
what's going on over time and with your

00:33:40,960 --> 00:33:48,789
changes with types and providers there

00:33:45,520 --> 00:33:51,760
is of course some basic things you can

00:33:48,789 --> 00:33:54,039
test on a catalog level but really what

00:33:51,760 --> 00:33:56,980
you want to do there is test the Ruby

00:33:54,039 --> 00:33:59,140
code and that is something that also can

00:33:56,980 --> 00:34:00,940
be done in this context but then also

00:33:59,140 --> 00:34:04,000
requires very specific knowledge about

00:34:00,940 --> 00:34:06,309
how the Ruby code is running and if

00:34:04,000 --> 00:34:07,720
you're interested in that I could

00:34:06,309 --> 00:34:08,770
probably give another talk about that

00:34:07,720 --> 00:34:11,139
but again

00:34:08,770 --> 00:34:13,859
otoscope for today because I I just want

00:34:11,139 --> 00:34:15,940
to give you the high points here and

00:34:13,859 --> 00:34:18,760
finally something that was added very

00:34:15,940 --> 00:34:21,550
recently you can say expect exported

00:34:18,760 --> 00:34:24,040
resources to contain and put any other

00:34:21,550 --> 00:34:26,169
resource nature back there so that you

00:34:24,040 --> 00:34:28,450
can actually also now have access to

00:34:26,169 --> 00:34:30,879
resources that are not put into the

00:34:28,450 --> 00:34:32,950
catalogue but are exported from a

00:34:30,879 --> 00:34:36,669
specific configuration or a specific use

00:34:32,950 --> 00:34:43,750
case of your module so that you can also

00:34:36,669 --> 00:34:46,119
add more confidence there again a list

00:34:43,750 --> 00:34:50,320
of resources where you can get further

00:34:46,119 --> 00:34:53,470
information raw tricks r-spec puppet has

00:34:50,320 --> 00:34:55,149
a very good readme that lists all the

00:34:53,470 --> 00:34:58,150
metrics or the parameters to those

00:34:55,149 --> 00:34:59,740
matters how it's actually configured in

00:34:58,150 --> 00:35:04,450
your modules so that you can run the

00:34:59,740 --> 00:35:06,250
tests the different kinds of setups you

00:35:04,450 --> 00:35:11,140
need for functions for classes for

00:35:06,250 --> 00:35:16,900
defines again better specs of org I

00:35:11,140 --> 00:35:19,869
really recommend that site just as a

00:35:16,900 --> 00:35:22,990
brief introduction on how well

00:35:19,869 --> 00:35:24,880
formulated expectations look like

00:35:22,990 --> 00:35:28,240
because of course you can put everything

00:35:24,880 --> 00:35:31,690
into one big expectation that expects

00:35:28,240 --> 00:35:35,740
all your resources in one big chunk of

00:35:31,690 --> 00:35:36,190
code but as you will find out sooner or

00:35:35,740 --> 00:35:40,839
later

00:35:36,190 --> 00:35:42,430
is that that means that you only see one

00:35:40,839 --> 00:35:44,200
of the errors in it large block and

00:35:42,430 --> 00:35:45,910
better specs that's one of the

00:35:44,200 --> 00:35:47,619
recommendations from pay respects says

00:35:45,910 --> 00:35:49,599
every expectation should be its own

00:35:47,619 --> 00:35:55,359
block and something you get a report of

00:35:49,599 --> 00:35:57,670
all the expectations that were not that

00:35:55,359 --> 00:36:00,009
were missed by a recent change and you

00:35:57,670 --> 00:36:02,999
can get a better idea of what's going

00:36:00,009 --> 00:36:06,369
wrong I mean we all know our code and

00:36:02,999 --> 00:36:09,309
having a list of things that that go

00:36:06,369 --> 00:36:14,219
wrong often already helps to pinpoint

00:36:09,309 --> 00:36:14,219
what what what was going on there

00:36:14,309 --> 00:36:20,799
because one of the example modules the

00:36:17,559 --> 00:36:23,140
NTP modules from puppet labs on is I

00:36:20,799 --> 00:36:25,599
think always a good example for these

00:36:23,140 --> 00:36:28,089
things because it's fun from the

00:36:25,599 --> 00:36:32,769
functionality here very simple but it

00:36:28,089 --> 00:36:36,549
has r-spec tests at all levels and you

00:36:32,769 --> 00:36:38,619
can look at how is it set up there what

00:36:36,549 --> 00:36:40,960
are the other polar plate files I need

00:36:38,619 --> 00:36:45,150
how is it working there you can just

00:36:40,960 --> 00:36:50,890
check that out and go right on running

00:36:45,150 --> 00:36:54,849
the tests in there using using rake or

00:36:50,890 --> 00:36:56,499
calling our specs directly so that's

00:36:54,849 --> 00:36:59,410
always a good thing too to get started

00:36:56,499 --> 00:37:01,390
with this just by getting an existing

00:36:59,410 --> 00:37:04,089
module and looking at that code because

00:37:01,390 --> 00:37:09,339
that some of the set up is still not

00:37:04,089 --> 00:37:12,339
very friendly but it's already all fixed

00:37:09,339 --> 00:37:16,390
there so you can get cracking as soon as

00:37:12,339 --> 00:37:21,579
you check that out and finally if you

00:37:16,390 --> 00:37:24,009
are having many modules where need to

00:37:21,579 --> 00:37:27,160
apply that boilerplate I would point you

00:37:24,009 --> 00:37:30,940
to the modules in context modules link

00:37:27,160 --> 00:37:33,640
is a small tool from the Box poopley

00:37:30,940 --> 00:37:37,059
which is a community group of puppet

00:37:33,640 --> 00:37:38,799
module engineers they have built this

00:37:37,059 --> 00:37:40,599
module string tool that allows you to

00:37:38,799 --> 00:37:46,539
apply templates for boilerplate stuff

00:37:40,599 --> 00:37:51,099
across a bigger set of modules and this

00:37:46,539 --> 00:37:53,019
repository has our internal templates

00:37:51,099 --> 00:37:53,980
for all the supported modules that you

00:37:53,019 --> 00:37:57,960
provide

00:37:53,980 --> 00:38:00,520
so again there you can see very very

00:37:57,960 --> 00:38:08,589
specifically what we are doing to test

00:38:00,520 --> 00:38:12,579
our modules the final thing I want to

00:38:08,589 --> 00:38:14,859
talk about today is after making sure

00:38:12,579 --> 00:38:17,380
that the catalog matches our

00:38:14,859 --> 00:38:19,750
expectations as I mentioned earlier the

00:38:17,380 --> 00:38:22,570
final problem that has to be addressed

00:38:19,750 --> 00:38:25,270
is that the configuration file I'm

00:38:22,570 --> 00:38:28,950
writing out to for example again my ntp

00:38:25,270 --> 00:38:33,960
demon or my apache configuration or the

00:38:28,950 --> 00:38:36,790
SQL script I'm rolling out to MySQL is

00:38:33,960 --> 00:38:38,530
being rolled out correctly but the

00:38:36,790 --> 00:38:44,050
script in itself of the configuration

00:38:38,530 --> 00:38:45,820
itself has a typo and and an error or it

00:38:44,050 --> 00:38:49,180
conflicts with some other configuration

00:38:45,820 --> 00:38:51,640
in my base image and the only way to

00:38:49,180 --> 00:38:54,849
actually find out what's going on there

00:38:51,640 --> 00:38:57,869
and have that running in a local test

00:38:54,849 --> 00:39:06,790
system is to spin up a complete system

00:38:57,869 --> 00:39:08,680
and and run those tests against that

00:39:06,790 --> 00:39:13,200
complete system and see if it actually

00:39:08,680 --> 00:39:16,359
starts the service and if it actually

00:39:13,200 --> 00:39:19,270
does what is expected from from that

00:39:16,359 --> 00:39:24,339
configuration this has several different

00:39:19,270 --> 00:39:26,440
components that interact here the first

00:39:24,339 --> 00:39:29,380
one is speaker some of you may already

00:39:26,440 --> 00:39:32,560
know that name that's the it's poster

00:39:29,380 --> 00:39:36,099
umbrella name for the whole suite of

00:39:32,560 --> 00:39:38,380
tools that are working here and the core

00:39:36,099 --> 00:39:42,069
component that is managing the VMS that

00:39:38,380 --> 00:39:44,980
are created for your tests then there is

00:39:42,069 --> 00:39:48,130
the picker TSL this allows you to talk

00:39:44,980 --> 00:39:50,589
to the VMS that are created for you this

00:39:48,130 --> 00:39:53,380
has functions to install puppet on those

00:39:50,589 --> 00:39:55,990
VMs if you don't have that baked into

00:39:53,380 --> 00:39:58,780
your base image this allows you to run

00:39:55,990 --> 00:40:05,740
puppet on one of the VMS or on all of

00:39:58,780 --> 00:40:07,660
the VMS and the or it allows you to run

00:40:05,740 --> 00:40:07,910
shell scripts or anything else you need

00:40:07,660 --> 00:40:11,960
to

00:40:07,910 --> 00:40:15,319
verify that your code is doing what it's

00:40:11,960 --> 00:40:19,599
intended to do and finally there is the

00:40:15,319 --> 00:40:22,280
speaker aspect shim that's just a little

00:40:19,599 --> 00:40:24,829
library that hooks up all the pker

00:40:22,280 --> 00:40:27,920
functionality and the VM management into

00:40:24,829 --> 00:40:32,210
the framework of the r-spec expectations

00:40:27,920 --> 00:40:35,660
so that you can use the same shape of

00:40:32,210 --> 00:40:41,450
tests for your quick catalogue tests and

00:40:35,660 --> 00:40:45,440
for your in-depth beaker tests which I

00:40:41,450 --> 00:40:53,930
hopefully makes it easier to to work

00:40:45,440 --> 00:40:58,010
with with the whole tests you vm's is

00:40:53,930 --> 00:41:01,579
there beaker itself supports several

00:40:58,010 --> 00:41:05,690
different kinds of VMs of hypervisors

00:41:01,579 --> 00:41:07,609
something I use very very heavily is

00:41:05,690 --> 00:41:12,380
using vagrant on my local machine to

00:41:07,609 --> 00:41:14,510
spin up different pace images of the

00:41:12,380 --> 00:41:19,160
things I'm currently trying to support

00:41:14,510 --> 00:41:23,420
that works very well other people for

00:41:19,160 --> 00:41:28,069
example in Travis will use docker on the

00:41:23,420 --> 00:41:33,349
GCE VMs that Travis provides to run some

00:41:28,069 --> 00:41:38,420
of our tests in in Travis against full

00:41:33,349 --> 00:41:41,779
docker image systems internally there is

00:41:38,420 --> 00:41:44,119
a back-end that talks to vSphere so you

00:41:41,779 --> 00:41:47,930
can use VMs from a sphere to run your

00:41:44,119 --> 00:41:50,809
tests on and there are other patents for

00:41:47,930 --> 00:41:56,059
AWS and other cloud providers if if you

00:41:50,809 --> 00:42:00,710
have access to those the first thing

00:41:56,059 --> 00:42:04,579
when talking about the pker test is to

00:42:00,710 --> 00:42:12,319
define which VMS are participating in

00:42:04,579 --> 00:42:14,630
this test sorry the the basic execution

00:42:12,319 --> 00:42:16,880
model is there is the pker process

00:42:14,630 --> 00:42:19,789
itself running on the machine that is

00:42:16,880 --> 00:42:21,710
executing the tests and it creates the

00:42:19,789 --> 00:42:23,780
VMs that are participate

00:42:21,710 --> 00:42:26,180
in this test and it will then interact

00:42:23,780 --> 00:42:29,540
with those VMs on behalf of the tests -

00:42:26,180 --> 00:42:32,710
as I said before install puppet execute

00:42:29,540 --> 00:42:36,050
puppet manifests on those machines and

00:42:32,710 --> 00:42:39,320
check the results if the results are

00:42:36,050 --> 00:42:42,950
matching our expectations the first

00:42:39,320 --> 00:42:47,390
thing to do is then to define the note

00:42:42,950 --> 00:42:49,250
set that is the basis for this test and

00:42:47,390 --> 00:42:52,160
in the simplest case we have a single

00:42:49,250 --> 00:42:56,800
test host that has the default role that

00:42:52,160 --> 00:42:59,300
is a managed by vagrant that uses this

00:42:56,800 --> 00:43:01,609
pre-configured box with no configuration

00:42:59,300 --> 00:43:03,680
management on it and also we have to

00:43:01,609 --> 00:43:05,839
tell pker what platform is running in

00:43:03,680 --> 00:43:13,690
this image so that it can choose the

00:43:05,839 --> 00:43:17,359
right provider to interact with that and

00:43:13,690 --> 00:43:19,690
in in this case the default role is all

00:43:17,359 --> 00:43:24,290
we need because it's only a single node

00:43:19,690 --> 00:43:31,220
and every time we we interact with a VM

00:43:24,290 --> 00:43:33,740
it will interact with this VM this this

00:43:31,220 --> 00:43:36,890
node and needs a little bit of setup so

00:43:33,740 --> 00:43:41,060
that we can actually execute our tests

00:43:36,890 --> 00:43:43,339
on it in in the spec helper acceptance

00:43:41,060 --> 00:43:48,200
which is the main entry point for the

00:43:43,339 --> 00:43:50,030
whole test suite you can just say

00:43:48,200 --> 00:43:53,570
install the puppet agent on the default

00:43:50,030 --> 00:43:56,330
node copied the module from where we are

00:43:53,570 --> 00:43:58,940
currently at using the name scanner to

00:43:56,330 --> 00:44:00,890
the default node and for example if you

00:43:58,940 --> 00:44:04,460
need any dependencies of those modules

00:44:00,890 --> 00:44:09,740
installed run puppet module install with

00:44:04,460 --> 00:44:11,740
a module name on that test node and it

00:44:09,740 --> 00:44:15,020
will go out and and do that for you

00:44:11,740 --> 00:44:17,660
there are many more options that you can

00:44:15,020 --> 00:44:22,730
have at here you can use your private

00:44:17,660 --> 00:44:25,190
forge mirror you can use our 10k to

00:44:22,730 --> 00:44:27,470
install that you can just check out the

00:44:25,190 --> 00:44:33,980
keep repository that again very much

00:44:27,470 --> 00:44:38,780
depends on your private workflow and

00:44:33,980 --> 00:44:40,910
you will most of the of the open-source

00:44:38,780 --> 00:44:43,730
modules that are out there trust install

00:44:40,910 --> 00:44:47,090
from the forge and and use those

00:44:43,730 --> 00:44:51,950
dependencies to fulfill the needs of the

00:44:47,090 --> 00:44:54,080
of the modules there and then this again

00:44:51,950 --> 00:44:57,020
like before in the catalog testing the

00:44:54,080 --> 00:45:03,080
compile here is the simples test that

00:44:57,020 --> 00:45:08,180
can be made using a using a full vm and

00:45:03,080 --> 00:45:12,680
that is again we describe this kind of

00:45:08,180 --> 00:45:15,109
class here we put in a manifest maybe if

00:45:12,680 --> 00:45:17,690
that is more complex you want to load

00:45:15,109 --> 00:45:19,700
that from from a external file or

00:45:17,690 --> 00:45:21,740
something like that but you can also

00:45:19,700 --> 00:45:23,090
just put in the string here which the

00:45:21,740 --> 00:45:25,850
scanner class and the parameter you want

00:45:23,090 --> 00:45:29,150
to do you want to apply the manifest on

00:45:25,850 --> 00:45:31,670
the default host and store the result

00:45:29,150 --> 00:45:34,670
here in an instance variable as

00:45:31,670 --> 00:45:37,730
explained earlier this is so that the

00:45:34,670 --> 00:45:40,400
expensive prior manifest run here that

00:45:37,730 --> 00:45:44,380
actually goes out and compiles the

00:45:40,400 --> 00:45:46,430
manifest on that agent and does all the

00:45:44,380 --> 00:45:50,690
configuration stuff that is defined in

00:45:46,430 --> 00:45:53,990
that class only runs once before all

00:45:50,690 --> 00:45:57,020
examples here and then the example

00:45:53,990 --> 00:46:01,580
itself is very easy it says this puppet

00:45:57,020 --> 00:46:04,220
run should exit with the exit code to

00:46:01,580 --> 00:46:10,490
which means they're very actual changes

00:46:04,220 --> 00:46:12,859
to the system but no errors and again

00:46:10,490 --> 00:46:15,350
like the compiled catalog that doesn't

00:46:12,859 --> 00:46:20,000
tell us too much of the system yet but

00:46:15,350 --> 00:46:23,300
it's again the 70 75 percent solution

00:46:20,000 --> 00:46:25,790
because once the catalog applied with

00:46:23,300 --> 00:46:33,740
all the errors it can't be too bad

00:46:25,790 --> 00:46:36,170
couldn't and here while the former slide

00:46:33,740 --> 00:46:39,410
showed the simples test I think this one

00:46:36,170 --> 00:46:42,440
here is even more important because this

00:46:39,410 --> 00:46:45,350
is the second run that checks that is

00:46:42,440 --> 00:46:47,360
run site importantly it just runs the

00:46:45,350 --> 00:46:50,420
same apply manifest we

00:46:47,360 --> 00:46:52,610
the same manifest again on the same note

00:46:50,420 --> 00:46:54,320
stores the results locally this time

00:46:52,610 --> 00:46:57,110
without a net in front so it's just a

00:46:54,320 --> 00:47:00,590
local variable and the exit code from

00:46:57,110 --> 00:47:02,660
this puppet run should be zero so that

00:47:00,590 --> 00:47:07,430
means there were no errors and there

00:47:02,660 --> 00:47:09,290
were no changes and in but what often

00:47:07,430 --> 00:47:11,810
happens if you have a typo in a service

00:47:09,290 --> 00:47:15,740
pop it will start the service and the

00:47:11,810 --> 00:47:17,300
services go oh ok I'm started so now I

00:47:15,740 --> 00:47:19,220
want to read my configuration file and

00:47:17,300 --> 00:47:22,430
oh that configuration file has an error

00:47:19,220 --> 00:47:24,650
so well then I don't know I don't fight

00:47:22,430 --> 00:47:27,290
it but puppet already went on and and

00:47:24,650 --> 00:47:29,480
saw the services started properly on the

00:47:27,290 --> 00:47:31,430
second run Papa to see oh that service

00:47:29,480 --> 00:47:34,990
did not start please let me help you

00:47:31,430 --> 00:47:38,500
here I will started the service again

00:47:34,990 --> 00:47:42,020
and then it will have a change and and

00:47:38,500 --> 00:47:44,390
exit code of 2 and not of zero and you

00:47:42,020 --> 00:47:47,030
can see Oh something is wrong there and

00:47:44,390 --> 00:47:49,760
you need to investigate of course it is

00:47:47,030 --> 00:47:53,930
not very specific yet but this already

00:47:49,760 --> 00:47:56,780
will save you from pushing things to

00:47:53,930 --> 00:47:59,090
production that otherwise will have

00:47:56,780 --> 00:48:03,770
caused your service to fail or not to

00:47:59,090 --> 00:48:06,950
restart and so on so again we can

00:48:03,770 --> 00:48:08,930
exchange discussing your problem or we

00:48:06,950 --> 00:48:11,930
can exchange being yelled at for

00:48:08,930 --> 00:48:14,200
breaking the production with discussing

00:48:11,930 --> 00:48:17,510
a problem in our code over a coffee

00:48:14,200 --> 00:48:24,320
while everything else works on fine

00:48:17,510 --> 00:48:27,590
without any problems beyond the simple

00:48:24,320 --> 00:48:30,380
hazard applied with all the errors there

00:48:27,590 --> 00:48:33,440
is a server spec integration again for

00:48:30,380 --> 00:48:35,720
the details and all the functionality

00:48:33,440 --> 00:48:38,840
that it provides I will refer you to the

00:48:35,720 --> 00:48:42,020
documentation afterwards but the basic

00:48:38,840 --> 00:48:46,310
thing here is you can describe a service

00:48:42,020 --> 00:48:48,470
on the target node and for more

00:48:46,310 --> 00:48:50,180
complicated applications you might have

00:48:48,470 --> 00:48:52,190
several nodes like one for the database

00:48:50,180 --> 00:48:55,250
one for the web front and one for the

00:48:52,190 --> 00:48:57,740
memcache and apply configurations to all

00:48:55,250 --> 00:49:00,330
of them and afterwards check is my

00:48:57,740 --> 00:49:02,520
Apache service running

00:49:00,330 --> 00:49:06,930
I could be enabled it should be running

00:49:02,520 --> 00:49:10,800
and you can inspect use server spec to

00:49:06,930 --> 00:49:13,260
inspect the current system state in in

00:49:10,800 --> 00:49:15,750
this example also it shows more

00:49:13,260 --> 00:49:17,460
intricate method of filtering that is

00:49:15,750 --> 00:49:21,510
not applied by using a command line

00:49:17,460 --> 00:49:24,210
variable but by looking at one of the

00:49:21,510 --> 00:49:30,360
facts of the node that is currently

00:49:24,210 --> 00:49:35,730
being looked at and using that you can

00:49:30,360 --> 00:49:39,000
then have more in-depth checks for the

00:49:35,730 --> 00:49:43,560
services you trust configured but beyond

00:49:39,000 --> 00:49:45,840
that of course here is the big question

00:49:43,560 --> 00:49:50,610
when doing all those full system tests

00:49:45,840 --> 00:49:53,010
and that is something where your skill

00:49:50,610 --> 00:49:57,360
and your talent that is I think more

00:49:53,010 --> 00:50:03,960
than capable to answer this question how

00:49:57,360 --> 00:50:06,320
do you know that your service works you

00:50:03,960 --> 00:50:08,760
already have that knowledge you know

00:50:06,320 --> 00:50:11,850
what you need to look at to know that

00:50:08,760 --> 00:50:15,180
your service is working using all the

00:50:11,850 --> 00:50:17,910
tools I present it to you here I cannot

00:50:15,180 --> 00:50:19,560
tell you how your service works I cannot

00:50:17,910 --> 00:50:21,690
tell you what is right for your service

00:50:19,560 --> 00:50:25,170
but I can give you the tools that you

00:50:21,690 --> 00:50:29,100
can create your test environment with a

00:50:25,170 --> 00:50:31,860
few simple few steps on your local

00:50:29,100 --> 00:50:33,510
machine on your CI system in a test

00:50:31,860 --> 00:50:37,470
environment that nobody else needs to

00:50:33,510 --> 00:50:39,930
see where you can actually test your

00:50:37,470 --> 00:50:42,480
system your service your application and

00:50:39,930 --> 00:50:45,780
say yes if I apply this change to our

00:50:42,480 --> 00:50:47,750
puppet modules afterwards it's still

00:50:45,780 --> 00:50:51,660
working

00:50:47,750 --> 00:50:55,130
and I hope you will follow me here to

00:50:51,660 --> 00:50:57,870
see that that's where you can invest to

00:50:55,130 --> 00:51:06,560
really get the value out of those

00:50:57,870 --> 00:51:10,340
automated tests to avoid to avoid having

00:51:06,560 --> 00:51:13,770
those tests on your production systems

00:51:10,340 --> 00:51:14,190
finally here again the resource list and

00:51:13,770 --> 00:51:16,080
I hope

00:51:14,190 --> 00:51:18,000
those slides will be made available to

00:51:16,080 --> 00:51:21,030
you afterwards so you don't have to

00:51:18,000 --> 00:51:23,670
write them down now is picker R Spec

00:51:21,030 --> 00:51:26,820
that reamer I talked about that connects

00:51:23,670 --> 00:51:30,330
beaker and the beaker language and the

00:51:26,820 --> 00:51:32,040
r-spec language it has a list of

00:51:30,330 --> 00:51:33,600
configuration options for example one

00:51:32,040 --> 00:51:39,440
thing you can do while developing is

00:51:33,600 --> 00:51:39,440
reuse the VM you've been working with so

00:51:39,770 --> 00:51:45,510
provisioning a new VM that takes often a

00:51:43,080 --> 00:51:48,390
while even on our great laptops around

00:51:45,510 --> 00:51:51,480
here but what you can do is you can tell

00:51:48,390 --> 00:51:53,490
the test tool to reuse that provision VM

00:51:51,480 --> 00:51:56,460
and so during development if you're

00:51:53,490 --> 00:52:00,930
already have that provision VM you can

00:51:56,460 --> 00:52:04,710
achieve runtimes from a singular example

00:52:00,930 --> 00:52:08,730
that compiles and applies a change to to

00:52:04,710 --> 00:52:13,470
your VM in in below 10 seconds and I say

00:52:08,730 --> 00:52:17,670
this because having a 10 second feedback

00:52:13,470 --> 00:52:21,450
loop on your change on a VM in in your

00:52:17,670 --> 00:52:23,550
test environment is for me as a module

00:52:21,450 --> 00:52:25,620
developer just liberating because I can

00:52:23,550 --> 00:52:27,320
I can do a change I can test it out I

00:52:25,620 --> 00:52:29,820
can do a change I can test it out oh

00:52:27,320 --> 00:52:32,550
there is this other expectation I have I

00:52:29,820 --> 00:52:35,570
had that expectation to my test suite I

00:52:32,550 --> 00:52:40,410
added to my current focused examples I

00:52:35,570 --> 00:52:43,770
run those expectations and I can very

00:52:40,410 --> 00:52:46,110
easily encode all of these checks that I

00:52:43,770 --> 00:52:47,970
would have to have a browser open I

00:52:46,110 --> 00:52:49,860
would have to log in and I would have to

00:52:47,970 --> 00:52:52,110
log in again because restarting the

00:52:49,860 --> 00:52:56,910
Patrick here the session cache or

00:52:52,110 --> 00:52:58,640
whatever having it in code is it's just

00:52:56,910 --> 00:53:01,710
so much more convenient during

00:52:58,640 --> 00:53:04,050
developing the modules and another thing

00:53:01,710 --> 00:53:06,600
I would like to add here is you are not

00:53:04,050 --> 00:53:09,870
alone when developing that most of the

00:53:06,600 --> 00:53:11,310
services that we deploy have some

00:53:09,870 --> 00:53:13,110
developers that actually have an

00:53:11,310 --> 00:53:19,080
interest in that it actually works when

00:53:13,110 --> 00:53:20,970
after its deployed and take them into

00:53:19,080 --> 00:53:26,010
their responsibility of providing you

00:53:20,970 --> 00:53:28,049
with the help and the code and the hooks

00:53:26,010 --> 00:53:31,229
into the Status API and

00:53:28,049 --> 00:53:33,660
on where you can actually check at every

00:53:31,229 --> 00:53:35,939
step of the process that the services

00:53:33,660 --> 00:53:37,529
you are managing for them actually is

00:53:35,939 --> 00:53:42,289
working and if they don't provide that

00:53:37,529 --> 00:53:42,289
well the patch is up it's fine isn't it

00:53:42,439 --> 00:53:48,539
another resource is the be courteous L

00:53:45,449 --> 00:53:50,519
API info that will give you a list a

00:53:48,539 --> 00:53:52,349
reference and description of all the

00:53:50,519 --> 00:53:57,140
functions that the be courteous L

00:53:52,349 --> 00:54:00,269
provides to you for talking to those VMs

00:53:57,140 --> 00:54:02,819
did I already mention better specs read

00:54:00,269 --> 00:54:06,599
it it's it's really a very easy list of

00:54:02,819 --> 00:54:08,699
recommendations on how to structure your

00:54:06,599 --> 00:54:11,279
specs so that they remain readable that

00:54:08,699 --> 00:54:13,380
they remain understandable that they

00:54:11,279 --> 00:54:16,349
actually provide you that documentation

00:54:13,380 --> 00:54:19,739
of your intentions value that they can

00:54:16,349 --> 00:54:22,259
provide to you module stream conflicts

00:54:19,739 --> 00:54:26,939
again also has the boilerplate for these

00:54:22,259 --> 00:54:29,339
kinds of tests NTP module also has this

00:54:26,939 --> 00:54:34,589
kind of tests only a few weeks ago I

00:54:29,339 --> 00:54:36,359
changed it so that is default node sets

00:54:34,589 --> 00:54:37,769
that we roll out with our modules

00:54:36,359 --> 00:54:40,019
actually work if you have regular

00:54:37,769 --> 00:54:42,390
installed it should work without

00:54:40,019 --> 00:54:46,999
modification as long as you have all the

00:54:42,390 --> 00:54:50,999
Ruby utilities installed and finally

00:54:46,999 --> 00:54:54,449
there is in the pker documentation the

00:54:50,999 --> 00:54:56,579
list of picker libraries short list of

00:54:54,449 --> 00:55:00,209
tools that can help you with more

00:54:56,579 --> 00:55:01,589
intricate setups of your tests if you

00:55:00,209 --> 00:55:04,170
need to install different versions of

00:55:01,589 --> 00:55:06,029
puppet and so on

00:55:04,170 --> 00:55:08,699
I have a look maybe you'll find

00:55:06,029 --> 00:55:11,279
something that you can use and with this

00:55:08,699 --> 00:55:13,890
thank you for your attention and if you

00:55:11,279 --> 00:55:17,939
have any questions I'm around till the

00:55:13,890 --> 00:55:20,489
evening today or on Twitter or using my

00:55:17,939 --> 00:55:23,929
puppet email address just give me a shot

00:55:20,489 --> 00:55:26,189
and I'm also working on the community

00:55:23,929 --> 00:55:29,670
contribution for modules ping me on

00:55:26,189 --> 00:55:32,699
github I always try to be there for

00:55:29,670 --> 00:55:35,299
people who have questions thank you very

00:55:32,699 --> 00:55:35,299
much for your attention

00:55:38,439 --> 00:55:42,409
thank you very much David

00:55:40,189 --> 00:55:48,729
any questions so far we have three

00:55:42,409 --> 00:55:48,729
minutes for questions for questions yep

00:55:51,399 --> 00:55:56,719
are there any tools for helping testing

00:55:54,049 --> 00:55:59,419
migrations because every test I see is

00:55:56,719 --> 00:56:01,699
always starting from scratch from

00:55:59,419 --> 00:56:06,289
stretches easy production is not in

00:56:01,699 --> 00:56:09,499
stretch you can use beaker

00:56:06,289 --> 00:56:13,880
the beaker tal to create sequences of of

00:56:09,499 --> 00:56:17,719
your systems for example you can in in

00:56:13,880 --> 00:56:19,579
the setup script you can say alright get

00:56:17,719 --> 00:56:21,409
me my base image provision it with the

00:56:19,579 --> 00:56:23,239
old version get the old version from

00:56:21,409 --> 00:56:25,159
over there and get deployed to the

00:56:23,239 --> 00:56:28,009
system provision it to dead state and

00:56:25,159 --> 00:56:35,239
and then apply your expectation on top

00:56:28,009 --> 00:56:37,630
of that layer yes thank you another

00:56:35,239 --> 00:56:40,130
thing that I might want to mention is

00:56:37,630 --> 00:56:45,319
those tests you don't have to only run

00:56:40,130 --> 00:56:47,199
them for your component modules but

00:56:45,319 --> 00:56:51,439
something if you want to have a quick

00:56:47,199 --> 00:56:53,269
quick payoff is add them for your

00:56:51,439 --> 00:56:56,329
profile classes or for your role houses

00:56:53,269 --> 00:56:57,979
it's very easy it's one line or two

00:56:56,329 --> 00:56:59,419
lines a little bit of data and you

00:56:57,979 --> 00:57:01,880
already have something in your hand that

00:56:59,419 --> 00:57:03,039
can tell you oh I'm I'm not completely

00:57:01,880 --> 00:57:09,199
screwed now

00:57:03,039 --> 00:57:16,069
any other questions we could handle one

00:57:09,199 --> 00:57:20,089
more so you mention that the possibly

00:57:16,069 --> 00:57:23,119
two and beaker tests on holes is there

00:57:20,089 --> 00:57:23,719
already away easy to run a full control

00:57:23,119 --> 00:57:25,759
of a poll

00:57:23,719 --> 00:57:31,839
I have some kind of bigger tests for

00:57:25,759 --> 00:57:35,529
different holes sounds like that the

00:57:31,839 --> 00:57:38,869
question was whether there is a way to

00:57:35,529 --> 00:57:41,659
to already have bigger tests on rolls

00:57:38,869 --> 00:57:46,880
defined in your control repo was it

00:57:41,659 --> 00:57:48,190
correct yes so the bigger tests are not

00:57:46,880 --> 00:57:50,710
actually dependent

00:57:48,190 --> 00:57:53,710
on your repository being a module

00:57:50,710 --> 00:57:58,150
repository things like the copy module

00:57:53,710 --> 00:58:00,130
to function of course they you can pass

00:57:58,150 --> 00:58:02,560
a path there and deploy some modules

00:58:00,130 --> 00:58:05,109
like that might require a little bit

00:58:02,560 --> 00:58:07,240
more programming but it's also just a

00:58:05,109 --> 00:58:11,170
loop over all my modules you can just

00:58:07,240 --> 00:58:14,079
copy everything there's a HTTP to method

00:58:11,170 --> 00:58:16,839
you can what we're doing internally for

00:58:14,079 --> 00:58:19,510
our QA is we actually don't use just a

00:58:16,839 --> 00:58:21,849
agent but we install a complete puppet

00:58:19,510 --> 00:58:25,240
enterprise stack and and do master agent

00:58:21,849 --> 00:58:30,280
testing so depending on your use case

00:58:25,240 --> 00:58:32,500
the sky's the limit and again maybe a

00:58:30,280 --> 00:58:36,130
little bit programming to get that set

00:58:32,500 --> 00:58:38,050
up and provisioning steps done maybe

00:58:36,130 --> 00:58:40,000
reusing existing automation if you

00:58:38,050 --> 00:58:45,220
already have that for your puppet master

00:58:40,000 --> 00:58:48,970
and then you have the environment and

00:58:45,220 --> 00:58:51,819
the use case the context to again run

00:58:48,970 --> 00:58:56,940
through expectations and and your use

00:58:51,819 --> 00:58:59,940
cases alright thank you David thank you

00:58:56,940 --> 00:58:59,940

YouTube URL: https://www.youtube.com/watch?v=GgNrxLfoDF8


