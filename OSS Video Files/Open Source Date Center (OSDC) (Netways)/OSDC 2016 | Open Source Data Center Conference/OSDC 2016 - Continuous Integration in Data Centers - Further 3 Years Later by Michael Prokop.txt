Title: OSDC 2016 - Continuous Integration in Data Centers - Further 3 Years Later by Michael Prokop
Publication date: 2016-05-02
Playlist: OSDC 2016 | Open Source Data Center Conference
Description: 
	I gave a talk titled "Continuous Integration in data centersâ€œ at OSDC in 2013, presenting ways how to realize continuous integration/delivery with Jenkins and related tools.Three years later we gained new tools in our continuous delivery pipeline, including Docker, Gerrit and Goss. Over the years we also had to deal with different problems caused by faster release cycles, a growing team and gaining new projects. We therefore established code review in our pipeline, improved our test infrastructure and invested in our infrastructure automation.In this talk I will discuss the lessons we learned over the last years, demonstrate how a proper continuous delivery pipeline can improve your life and how open source tools like Jenkins, Docker and Gerrit can be leveraged for setting up such an environment
Captions: 
	00:00:11,810 --> 00:00:18,860
hi welcome back now there's a talk about

00:00:16,160 --> 00:00:24,260
continuous integration and what happened

00:00:18,860 --> 00:00:26,360
in the last three years thanks so I'm

00:00:24,260 --> 00:00:29,060
known as mica being an independent

00:00:26,360 --> 00:00:33,080
consultant project lee of gramado a

00:00:29,060 --> 00:00:37,190
linux-based life system even developer

00:00:33,080 --> 00:00:42,950
and also of Jenkins diamond view which

00:00:37,190 --> 00:00:45,170
is even packaging through Jenkins being

00:00:42,950 --> 00:00:46,910
from karate in austria and i gave a talk

00:00:45,170 --> 00:00:50,630
about continuous integration in data

00:00:46,910 --> 00:00:54,440
center three years ago at OSD see so why

00:00:50,630 --> 00:00:57,890
i am here i want to share my experience

00:00:54,440 --> 00:01:01,670
from the last few years what went well

00:00:57,890 --> 00:01:05,119
what didn't went so well i don't want to

00:01:01,670 --> 00:01:08,420
repeat much of my talk from OS DC three

00:01:05,119 --> 00:01:13,189
years ago but just so i haven't feeling

00:01:08,420 --> 00:01:15,439
um who is here is there any one of you

00:01:13,189 --> 00:01:23,030
here who attended my talk three years

00:01:15,439 --> 00:01:26,210
ago okay who few uses a continuous

00:01:23,030 --> 00:01:32,569
integration server jenkins whatever okay

00:01:26,210 --> 00:01:36,319
so ninety percent or even more so what

00:01:32,569 --> 00:01:39,079
what are we looking at today what do we

00:01:36,319 --> 00:01:42,380
actually want to achieve what are what

00:01:39,079 --> 00:01:45,499
challenges do we have how did we get

00:01:42,380 --> 00:01:47,600
there talking about code review which is

00:01:45,499 --> 00:01:50,030
an important part of what i'm talking

00:01:47,600 --> 00:01:53,689
about today give some hints about

00:01:50,030 --> 00:01:56,829
testing tours which are very useful some

00:01:53,689 --> 00:01:59,420
words about dhaka infrastructure tooling

00:01:56,829 --> 00:02:01,969
some anti-patterns you should be aware

00:01:59,420 --> 00:02:06,799
of and some pain points which are kind

00:02:01,969 --> 00:02:09,860
of unsolved or yeah so what what are we

00:02:06,799 --> 00:02:13,580
actually interested in our expectations

00:02:09,860 --> 00:02:16,850
are that we have some independence so we

00:02:13,580 --> 00:02:19,190
don't want to be or depend on some

00:02:16,850 --> 00:02:22,370
external service service which is down

00:02:19,190 --> 00:02:24,680
and we can build our own system be able

00:02:22,370 --> 00:02:25,250
to scan in terms of people like the tip

00:02:24,680 --> 00:02:29,750
that he

00:02:25,250 --> 00:02:32,170
might grow or the project micro the

00:02:29,750 --> 00:02:34,940
system's might grow new service whatever

00:02:32,170 --> 00:02:37,220
reliability we want to have some trust

00:02:34,940 --> 00:02:39,470
in our own systems also of course

00:02:37,220 --> 00:02:41,050
performance performance should be better

00:02:39,470 --> 00:02:43,459
and not not getting worse

00:02:41,050 --> 00:02:46,670
reproducibility so whatever we build

00:02:43,459 --> 00:02:49,640
should be able to rebuild again and have

00:02:46,670 --> 00:02:53,150
the same result of course related to

00:02:49,640 --> 00:02:55,209
predictability so how fast can we get

00:02:53,150 --> 00:02:58,690
the result what will we get and

00:02:55,209 --> 00:03:02,090
traceability from from the origin like

00:02:58,690 --> 00:03:03,560
new feature or a back report until we

00:03:02,090 --> 00:03:05,959
ship it to the customer in the data

00:03:03,560 --> 00:03:09,170
center or wherever and we shouldn't

00:03:05,959 --> 00:03:12,590
forget about innovation we don't want to

00:03:09,170 --> 00:03:15,770
just add new tools to our stack but we

00:03:12,590 --> 00:03:19,190
also want to have the flexibility and be

00:03:15,770 --> 00:03:22,820
innovative without having some kind of

00:03:19,190 --> 00:03:24,890
don't touch the running system so from

00:03:22,820 --> 00:03:27,709
the well-known continues delivery book

00:03:24,890 --> 00:03:29,810
this is what a deployment the pipeline

00:03:27,709 --> 00:03:35,239
should look like there's some delivery

00:03:29,810 --> 00:03:37,100
team which provides some code change we

00:03:35,239 --> 00:03:39,799
have mersion control which gets them to

00:03:37,100 --> 00:03:43,970
built and unit tests and if something is

00:03:39,799 --> 00:03:46,610
broken rechecked start again and only if

00:03:43,970 --> 00:03:49,370
all the steps through a pipeline pass we

00:03:46,610 --> 00:03:52,160
actually ship it to the customer to the

00:03:49,370 --> 00:03:54,590
extra production system whatever so this

00:03:52,160 --> 00:03:58,579
is what we are interested in there are

00:03:54,590 --> 00:04:02,269
some some some challenges for customers

00:03:58,579 --> 00:04:04,850
I'm doing consultancy for we got for

00:04:02,269 --> 00:04:07,489
example more employees so the team grew

00:04:04,850 --> 00:04:09,260
we have more remote workers where you're

00:04:07,489 --> 00:04:12,950
not sitting in the same office as the

00:04:09,260 --> 00:04:16,190
other folks more customers like the

00:04:12,950 --> 00:04:19,669
customers it themself PK I got more

00:04:16,190 --> 00:04:22,160
customers and they got more projects

00:04:19,669 --> 00:04:24,590
like in terms of new software

00:04:22,160 --> 00:04:29,260
repositories or so in terms of projects

00:04:24,590 --> 00:04:34,099
with with giants so how did we get there

00:04:29,260 --> 00:04:37,160
there's some some important like technic

00:04:34,099 --> 00:04:38,840
technical depth stuff if you are just

00:04:37,160 --> 00:04:40,880
doing

00:04:38,840 --> 00:04:43,490
emergency driven development you can't

00:04:40,880 --> 00:04:45,380
actually invest in your infrastructure

00:04:43,490 --> 00:04:47,090
in your tooling so it's kind of

00:04:45,380 --> 00:04:49,729
important to know where you should

00:04:47,090 --> 00:04:55,190
actually focus on and I like those those

00:04:49,729 --> 00:04:57,229
two quotes you have to improve and we

00:04:55,190 --> 00:05:00,470
got like better documentation better

00:04:57,229 --> 00:05:03,830
communication more tests more testing

00:05:00,470 --> 00:05:06,560
tools and also the faster release site

00:05:03,830 --> 00:05:10,010
here so when we started with was a

00:05:06,560 --> 00:05:12,440
release process was kind of manual and

00:05:10,010 --> 00:05:15,650
do all kinds of magic and go through

00:05:12,440 --> 00:05:18,320
checklists and nowadays we reached a

00:05:15,650 --> 00:05:20,510
point where we have a one-click release

00:05:18,320 --> 00:05:22,580
it's like press one button and there's a

00:05:20,510 --> 00:05:25,490
new hotfix that's a new release so

00:05:22,580 --> 00:05:27,940
everything automated so what we can

00:05:25,490 --> 00:05:32,120
actually do with all of this is also the

00:05:27,940 --> 00:05:36,289
speed of delivering changes is is much

00:05:32,120 --> 00:05:38,479
got much better so a pipeline we use

00:05:36,289 --> 00:05:42,979
nowadays looks like this do we have some

00:05:38,479 --> 00:05:47,120
some development some some testing we

00:05:42,979 --> 00:05:51,380
will do a git commit sent in a change

00:05:47,120 --> 00:05:53,990
for review and jenkins then verifies the

00:05:51,380 --> 00:05:56,090
result it gives a plus one if everything

00:05:53,990 --> 00:06:02,270
is fine minus one there's something

00:05:56,090 --> 00:06:05,060
broken please look at it sorry only if

00:06:02,270 --> 00:06:07,460
Jenkins verify happened you integrate

00:06:05,060 --> 00:06:11,030
the code reviews or usually only then

00:06:07,460 --> 00:06:13,490
you integrate the code reviews so first

00:06:11,030 --> 00:06:15,320
of all it's a technical review in terms

00:06:13,490 --> 00:06:19,370
of automation and then it's a human

00:06:15,320 --> 00:06:21,770
review we automatically provide Steven

00:06:19,370 --> 00:06:23,750
builds based on every review so you

00:06:21,770 --> 00:06:26,389
always have according even packages

00:06:23,750 --> 00:06:30,160
which can be used for testing for for

00:06:26,389 --> 00:06:32,750
giving it deep I eggs look at it and

00:06:30,160 --> 00:06:35,150
only if everything passes like code

00:06:32,750 --> 00:06:37,010
reviews are happy Jenkins is happy we

00:06:35,150 --> 00:06:38,840
submit the actual results to the master

00:06:37,010 --> 00:06:42,380
branch or whatever is the production

00:06:38,840 --> 00:06:44,270
branch we have some internal tooling

00:06:42,380 --> 00:06:46,490
where we can roll it out the demon

00:06:44,270 --> 00:06:49,250
package to puppet or whatever is in use

00:06:46,490 --> 00:06:52,110
and of course as the other side not just

00:06:49,250 --> 00:06:54,660
internal tooling but also customer view

00:06:52,110 --> 00:06:58,140
you ship it in a product and only then

00:06:54,660 --> 00:07:01,140
gets available to the customers so very

00:06:58,140 --> 00:07:03,020
important part which we integrated in

00:07:01,140 --> 00:07:05,610
the last three years is code review

00:07:03,020 --> 00:07:08,730
there are plenty of code review systems

00:07:05,610 --> 00:07:11,130
available the main open source ones are

00:07:08,730 --> 00:07:14,370
though they mentioned a Garriott get lab

00:07:11,130 --> 00:07:16,650
fabricated and review poet we went for

00:07:14,370 --> 00:07:20,310
garrett mainly because it has good

00:07:16,650 --> 00:07:21,870
Jenkins support we it plays well

00:07:20,310 --> 00:07:27,300
together with get a light they get so

00:07:21,870 --> 00:07:30,060
vine use at my customers and there are

00:07:27,300 --> 00:07:32,820
plenty of advantages of code review like

00:07:30,060 --> 00:07:35,850
you start to share your knowledge it's

00:07:32,820 --> 00:07:38,790
you have to talk about your code someone

00:07:35,850 --> 00:07:42,150
else has to review it and you can even

00:07:38,790 --> 00:07:44,040
integrate people not being aware of the

00:07:42,150 --> 00:07:48,390
details of the code they start to learn

00:07:44,040 --> 00:07:51,900
something so you get really a better

00:07:48,390 --> 00:07:53,610
knowledge within the company improve

00:07:51,900 --> 00:07:56,150
maintainability of course is one of the

00:07:53,610 --> 00:08:00,420
reasons why you actually focus on on

00:07:56,150 --> 00:08:02,190
code review or is a better coach because

00:08:00,420 --> 00:08:04,230
someone else has to understand the code

00:08:02,190 --> 00:08:05,790
of once to understand the code maybe the

00:08:04,230 --> 00:08:08,520
logic isn't written in the best way it

00:08:05,790 --> 00:08:11,430
could be and there's some kind of

00:08:08,520 --> 00:08:13,440
broadcast progress within the company

00:08:11,430 --> 00:08:15,270
enough other folks in the company I

00:08:13,440 --> 00:08:17,280
aware of what's being worked on

00:08:15,270 --> 00:08:19,680
otherwise they are just ticket and yeah

00:08:17,280 --> 00:08:21,420
the source nobody knows is someone

00:08:19,680 --> 00:08:24,480
working on it already how long is it

00:08:21,420 --> 00:08:27,870
taking what are the problems most of

00:08:24,480 --> 00:08:29,580
this is being visible once you have code

00:08:27,870 --> 00:08:32,990
review and just look at the changes that

00:08:29,580 --> 00:08:35,940
are flowing in and there's some like

00:08:32,990 --> 00:08:40,050
communal ownership so everyone in the

00:08:35,940 --> 00:08:42,570
company could just explore changes in a

00:08:40,050 --> 00:08:46,380
different project and get in get

00:08:42,570 --> 00:08:49,680
involved in it so it's it's a not just

00:08:46,380 --> 00:08:51,810
at technically change you get with code

00:08:49,680 --> 00:08:54,030
review but it's mainly about social

00:08:51,810 --> 00:08:56,970
changes and and human interaction which

00:08:54,030 --> 00:08:59,130
is very good for the ones of you who

00:08:56,970 --> 00:09:01,610
don't know what what Garrett looks like

00:08:59,130 --> 00:09:05,279
there's it's kind of a web interface

00:09:01,610 --> 00:09:11,009
singing this is the OpenStack

00:09:05,279 --> 00:09:13,709
a garret installation then you have just

00:09:11,009 --> 00:09:16,110
a short demo is like if you make a

00:09:13,709 --> 00:09:18,720
change in the version control you just

00:09:16,110 --> 00:09:20,819
committed and there's a tool called get

00:09:18,720 --> 00:09:22,589
review and that's the only thing you

00:09:20,819 --> 00:09:26,189
have to do then actually there's a

00:09:22,589 --> 00:09:28,499
garret file next to the get

00:09:26,189 --> 00:09:30,209
configuration repository and then you

00:09:28,499 --> 00:09:32,009
send it in for you that's it then it's

00:09:30,209 --> 00:09:33,449
available on Gary there's nothing more

00:09:32,009 --> 00:09:36,180
to do you don't have to use a web

00:09:33,449 --> 00:09:40,680
interface to submit a new change or

00:09:36,180 --> 00:09:43,559
whatever it's available at at the garret

00:09:40,680 --> 00:09:45,120
installation then and people start to

00:09:43,559 --> 00:09:49,529
look at it of course together with

00:09:45,120 --> 00:09:52,379
Jenkins so Jenkins starts with with a

00:09:49,529 --> 00:09:54,720
verification process where plenty of

00:09:52,379 --> 00:09:56,430
tests run people can comment on it I

00:09:54,720 --> 00:09:58,199
would prefer that you didn't match this

00:09:56,430 --> 00:09:59,939
I think it this is okay but my concern

00:09:58,199 --> 00:10:03,480
blah blah so we discussed this change

00:09:59,939 --> 00:10:06,629
then and only if core submitter we who

00:10:03,480 --> 00:10:08,939
are able to set up plus 2 or or so

00:10:06,629 --> 00:10:12,259
recheck tech the code only then is the

00:10:08,939 --> 00:10:15,569
actual decision about their the change

00:10:12,259 --> 00:10:18,000
so there's a web interface not everyone

00:10:15,569 --> 00:10:20,459
is happy with web interfaces you can of

00:10:18,000 --> 00:10:23,550
course download a change for reviewing

00:10:20,459 --> 00:10:26,040
locally on your system through get

00:10:23,550 --> 00:10:30,240
review there's a minus D flag it just

00:10:26,040 --> 00:10:32,939
provides the change set ID and then you

00:10:30,240 --> 00:10:36,000
have it available offline for review

00:10:32,939 --> 00:10:39,899
with diff get show can run it locally

00:10:36,000 --> 00:10:42,509
whatever if you want to make any change

00:10:39,899 --> 00:10:44,160
you can just modify it as long as the

00:10:42,509 --> 00:10:45,899
change had in the commit message stays

00:10:44,160 --> 00:10:47,639
the same and you send it through get

00:10:45,899 --> 00:10:49,889
reviewed as just a new pet set to the

00:10:47,639 --> 00:10:53,819
same change so that's the iteration you

00:10:49,889 --> 00:10:57,360
go through and for the ones of you who

00:10:53,819 --> 00:10:59,819
use Garrett and actually don't like the

00:10:57,360 --> 00:11:01,829
web interface at all from the OpenStack

00:10:59,819 --> 00:11:04,379
project there's a tool called jerky

00:11:01,829 --> 00:11:07,259
which is a command-line interface to

00:11:04,379 --> 00:11:10,740
Garrett which also has offline support

00:11:07,259 --> 00:11:13,350
so you might just be in a train in the

00:11:10,740 --> 00:11:15,449
airplane or a lonely island with your

00:11:13,350 --> 00:11:18,840
chest with your gin tonic and the laptop

00:11:15,449 --> 00:11:22,110
and be done it's offline capable so you

00:11:18,840 --> 00:11:23,880
do all the changes at commands or set

00:11:22,110 --> 00:11:27,240
plus one whatever and once you're online

00:11:23,880 --> 00:11:29,660
it sends all the data back to the garage

00:11:27,240 --> 00:11:32,340
server so this is this is really nice

00:11:29,660 --> 00:11:35,000
what's important if you want to start

00:11:32,340 --> 00:11:37,770
with code review no matter which which

00:11:35,000 --> 00:11:40,680
code review system you're using their

00:11:37,770 --> 00:11:43,650
some important parts you should be

00:11:40,680 --> 00:11:46,080
available there should be some kind of

00:11:43,650 --> 00:11:48,090
meaningful response cycle it doesn't

00:11:46,080 --> 00:11:51,420
mean it needs to be fast at all times

00:11:48,090 --> 00:11:53,670
but it shouldn't be like you send in a

00:11:51,420 --> 00:11:56,640
review and one week later you get a get

00:11:53,670 --> 00:11:58,680
a review and I'm not happy with this you

00:11:56,640 --> 00:12:00,870
change it two weeks later so there

00:11:58,680 --> 00:12:04,650
should be some kind of it should fit

00:12:00,870 --> 00:12:09,450
your company development cycling you

00:12:04,650 --> 00:12:12,840
should be friendly and even if the if

00:12:09,450 --> 00:12:15,900
you don't like the code and don't make

00:12:12,840 --> 00:12:18,240
it personal it should be like be

00:12:15,900 --> 00:12:20,730
friendly to the one who who are talking

00:12:18,240 --> 00:12:23,580
to it's it's really like that the social

00:12:20,730 --> 00:12:26,300
stuff is important about it and very

00:12:23,580 --> 00:12:30,750
very important include and integrate

00:12:26,300 --> 00:12:33,870
newbies new employees people who want to

00:12:30,750 --> 00:12:36,480
get involved because starting with this

00:12:33,870 --> 00:12:38,430
people actually can dig into your code

00:12:36,480 --> 00:12:41,550
base and maybe also help you in the

00:12:38,430 --> 00:12:43,890
future but RM it's all about getting

00:12:41,550 --> 00:12:46,170
them on board with all the knowledge

00:12:43,890 --> 00:12:48,570
within the company this is this kind of

00:12:46,170 --> 00:12:51,390
important process where I'm talking

00:12:48,570 --> 00:12:55,040
about the puppet stuff laid on best

00:12:51,390 --> 00:12:57,690
practices previews as small as feasible

00:12:55,040 --> 00:13:01,290
this is also makes testing easier so you

00:12:57,690 --> 00:13:03,930
don't have like a large blob put in

00:13:01,290 --> 00:13:08,040
nobody wants to review make it as small

00:13:03,930 --> 00:13:11,940
as feasible one feature one commits one

00:13:08,040 --> 00:13:14,220
review use code review also for your

00:13:11,940 --> 00:13:18,420
infrastructure and changes so the

00:13:14,220 --> 00:13:20,910
infrastructure is as coach went through

00:13:18,420 --> 00:13:22,890
the community a few years ago and this

00:13:20,910 --> 00:13:25,050
is kind of important whenever you do a

00:13:22,890 --> 00:13:27,990
change for your infrastructure with

00:13:25,050 --> 00:13:31,950
puppet chef and Cebu whatever use it in

00:13:27,990 --> 00:13:33,000
code review it just integrates out of

00:13:31,950 --> 00:13:34,980
folks what changes on your

00:13:33,000 --> 00:13:39,390
infrastructure are coming up its arse

00:13:34,980 --> 00:13:42,000
about the interaction no direct pushes

00:13:39,390 --> 00:13:45,000
to production bunch so you can just

00:13:42,000 --> 00:13:49,080
forbid this on on your get subversion

00:13:45,000 --> 00:13:52,100
whatever server make it testable before

00:13:49,080 --> 00:13:56,160
with Jenkins with with all your pipeline

00:13:52,100 --> 00:14:00,630
stuff and only if it passes that the QA

00:13:56,160 --> 00:14:04,230
of your CI server and the human review

00:14:00,630 --> 00:14:06,750
only then put it into production this

00:14:04,230 --> 00:14:08,570
also means that the mast our production

00:14:06,750 --> 00:14:13,650
branch or however you name it is

00:14:08,570 --> 00:14:15,390
deployed at any time so you just avoid

00:14:13,650 --> 00:14:17,730
this kind of feature branches nobody

00:14:15,390 --> 00:14:21,540
knows which one is the one I'm actually

00:14:17,730 --> 00:14:23,580
interested in two using in production so

00:14:21,540 --> 00:14:26,750
really no direct approaches to

00:14:23,580 --> 00:14:30,870
production plans you want to be able to

00:14:26,750 --> 00:14:32,970
trace all the juice infrastructure

00:14:30,870 --> 00:14:34,530
changes so what's what's important is

00:14:32,970 --> 00:14:36,360
like that you have some kind of mapping

00:14:34,530 --> 00:14:39,960
no matter whether you're using branches

00:14:36,360 --> 00:14:42,060
or text for actual production use it map

00:14:39,960 --> 00:14:45,300
them to the environment for the puppet

00:14:42,060 --> 00:14:47,130
environment or for your release and to

00:14:45,300 --> 00:14:50,370
have some kind of understanding if I do

00:14:47,130 --> 00:14:52,590
a vagrant up whatever that this should

00:14:50,370 --> 00:14:55,170
quite match what I'm expecting like if

00:14:52,590 --> 00:14:57,840
I'm doing some work on a development

00:14:55,170 --> 00:14:59,820
branch it's like the vagrant up

00:14:57,840 --> 00:15:02,130
development then he should be the result

00:14:59,820 --> 00:15:04,550
of it so that you have some kind of

00:15:02,130 --> 00:15:09,330
understanding what I'm getting here

00:15:04,550 --> 00:15:11,850
what's what's very useful for us or turn

00:15:09,330 --> 00:15:16,320
taught to be useful for us is a direct

00:15:11,850 --> 00:15:19,110
connection between reviews and bug

00:15:16,320 --> 00:15:22,710
tracker you should recover you call it

00:15:19,110 --> 00:15:24,630
in your company so we put in in every

00:15:22,710 --> 00:15:29,730
single commit message at the start of

00:15:24,630 --> 00:15:32,760
the first line ID which is like for a

00:15:29,730 --> 00:15:35,430
backtrack abbreviation and then there

00:15:32,760 --> 00:15:38,430
according pack tracker number m and this

00:15:35,430 --> 00:15:40,470
directly pinpoints to the backtrack

00:15:38,430 --> 00:15:42,330
attendant in Garrett for example you can

00:15:40,470 --> 00:15:45,870
configure the pattern hide look should

00:15:42,330 --> 00:15:47,400
look like and it gets a kick them so I

00:15:45,870 --> 00:15:49,020
if you have some details in a commit

00:15:47,400 --> 00:15:51,600
message and it's still not clear for the

00:15:49,020 --> 00:15:53,940
review of what's going on there it's

00:15:51,600 --> 00:15:55,830
just a click away go into the backtrack

00:15:53,940 --> 00:15:57,600
and read on all the customer back

00:15:55,830 --> 00:15:59,970
reports or whatever has been connected

00:15:57,600 --> 00:16:02,279
to this this issue and gives all all the

00:15:59,970 --> 00:16:06,410
details as a small it's a small change

00:16:02,279 --> 00:16:09,120
which quite modifies that their workflow

00:16:06,410 --> 00:16:12,980
there are some challenges with with

00:16:09,120 --> 00:16:15,240
implementing code review in your company

00:16:12,980 --> 00:16:18,540
different time zones are definitely a

00:16:15,240 --> 00:16:21,500
problem like sitting in Germany and our

00:16:18,540 --> 00:16:26,870
other developers in the US when Asia

00:16:21,500 --> 00:16:29,490
kind of difficult needs some adjustments

00:16:26,870 --> 00:16:32,279
depending on how you how the time zones

00:16:29,490 --> 00:16:34,440
are actually used in your company like

00:16:32,279 --> 00:16:36,529
when do you start to work there's a new

00:16:34,440 --> 00:16:39,330
workflow that you need to be aware of

00:16:36,529 --> 00:16:41,880
when when having no code review there's

00:16:39,330 --> 00:16:43,620
like just pushing the stuff with code

00:16:41,880 --> 00:16:47,310
review is this kind of changes and

00:16:43,620 --> 00:16:50,279
people need to get started to this new

00:16:47,310 --> 00:16:52,709
web flow refactorings are quite

00:16:50,279 --> 00:16:55,830
difficult because refactorings aunt just

00:16:52,709 --> 00:16:58,560
a small tiny change usually but it's

00:16:55,830 --> 00:17:00,839
like you're restructuring the project or

00:16:58,560 --> 00:17:04,709
plenty of functions so this is

00:17:00,839 --> 00:17:07,890
definitely a difficult topic there are

00:17:04,709 --> 00:17:10,980
some edit delays it's like emergency fix

00:17:07,890 --> 00:17:12,780
you usually would just push out now get

00:17:10,980 --> 00:17:15,480
a delay waiting for someone else to

00:17:12,780 --> 00:17:19,559
review usually it it's quite good

00:17:15,480 --> 00:17:22,679
because I mean for I see just more than

00:17:19,559 --> 00:17:24,959
two eyes and plenty of disasters are

00:17:22,679 --> 00:17:27,720
happen or have usually happen just

00:17:24,959 --> 00:17:29,160
because you overlook stuff that's that

00:17:27,720 --> 00:17:32,550
would have been obvious to someone else

00:17:29,160 --> 00:17:34,260
and lessen kaltich culture change so in

00:17:32,550 --> 00:17:36,030
the company there needs to be support

00:17:34,260 --> 00:17:38,610
for this if you can just integrate a

00:17:36,030 --> 00:17:40,380
code review in your in your pipeline and

00:17:38,610 --> 00:17:43,020
everybody will help you so this is kind

00:17:40,380 --> 00:17:47,490
of a learning process there are some

00:17:43,020 --> 00:17:49,410
some dangerous even you have a very very

00:17:47,490 --> 00:17:53,550
large change which is like you're

00:17:49,410 --> 00:17:58,440
modifying tenths of files and the review

00:17:53,550 --> 00:17:59,789
review it such whatever plus 2 i'm fine

00:17:58,440 --> 00:18:02,340
with whatever there it's

00:17:59,789 --> 00:18:04,350
very hard to review at all I don't care

00:18:02,340 --> 00:18:06,119
too much and then you have this this

00:18:04,350 --> 00:18:09,059
kind of tiny changes where you're just

00:18:06,119 --> 00:18:12,629
modifying a error message or whatever

00:18:09,059 --> 00:18:15,359
and this turns up as a like 20 comments

00:18:12,629 --> 00:18:17,729
dialogue and couldn't you modify the

00:18:15,359 --> 00:18:19,979
wording for this I would like to have

00:18:17,729 --> 00:18:22,710
this variable quoted or not quoted or

00:18:19,979 --> 00:18:24,840
the logic could be simplified then and

00:18:22,710 --> 00:18:28,019
you're spending like three or four hours

00:18:24,840 --> 00:18:30,359
of developer time to just have something

00:18:28,019 --> 00:18:32,429
that's actually not worth discussing so

00:18:30,359 --> 00:18:35,759
this is a phenomenon you should be aware

00:18:32,429 --> 00:18:38,820
of and actually work against and we have

00:18:35,759 --> 00:18:41,279
this is another situation you should be

00:18:38,820 --> 00:18:43,470
aware of and this requires some some

00:18:41,279 --> 00:18:45,239
team cultures of what what's standing

00:18:43,470 --> 00:18:47,369
there for the ones who can read from

00:18:45,239 --> 00:18:49,200
back no need to double-check this change

00:18:47,369 --> 00:18:52,019
list if some problems remain the

00:18:49,200 --> 00:18:54,059
reviewer will catch it and the reviewer

00:18:52,019 --> 00:18:56,399
actually things no need to look at this

00:18:54,059 --> 00:18:58,979
change please too closely I'm sure they

00:18:56,399 --> 00:19:04,409
also knows what he is doing so it's kind

00:18:58,979 --> 00:19:06,479
of your you're not entirely sure if the

00:19:04,409 --> 00:19:09,899
other one actually does that change you

00:19:06,479 --> 00:19:12,599
should be using this in kind of a team

00:19:09,899 --> 00:19:15,210
culture scene I've wrote just some some

00:19:12,599 --> 00:19:17,220
resources which are interesting papers

00:19:15,210 --> 00:19:20,909
on on code review that might be worth

00:19:17,220 --> 00:19:26,639
looking the slides will be available for

00:19:20,909 --> 00:19:28,859
you now for testing tools that we you or

00:19:26,639 --> 00:19:33,090
integrated or are still using nowadays

00:19:28,859 --> 00:19:35,849
that might be worth a closer look to

00:19:33,090 --> 00:19:39,499
just start with the testing pyramid

00:19:35,849 --> 00:19:43,499
which is very important to be aware of

00:19:39,499 --> 00:19:46,349
the the most important stuff you should

00:19:43,499 --> 00:19:48,749
focus on our fast tests which are

00:19:46,349 --> 00:19:53,129
usually unit tests we're just just

00:19:48,749 --> 00:19:56,489
testing small changes features on a

00:19:53,129 --> 00:19:58,259
source code base we have integration

00:19:56,489 --> 00:20:00,029
tests where you'll then see where are

00:19:58,259 --> 00:20:01,590
all the components within your projects

00:20:00,029 --> 00:20:04,519
play together and then you have the

00:20:01,590 --> 00:20:06,899
system test will actually test your

00:20:04,519 --> 00:20:09,809
project against different projects all

00:20:06,899 --> 00:20:12,239
the integration parts and what usually

00:20:09,809 --> 00:20:13,560
happens is if you're starting with

00:20:12,239 --> 00:20:15,840
testing or getting more

00:20:13,560 --> 00:20:17,760
test is starting with the system tests

00:20:15,840 --> 00:20:20,430
and those are the ones that should be

00:20:17,760 --> 00:20:22,620
like five percent or a max of ten

00:20:20,430 --> 00:20:25,620
percent of your project because they are

00:20:22,620 --> 00:20:27,750
expensive to develop very expensive to

00:20:25,620 --> 00:20:30,150
run they consume lots of time so you

00:20:27,750 --> 00:20:31,710
can't actually run them usually don't

00:20:30,150 --> 00:20:33,960
run them within your pipeline

00:20:31,710 --> 00:20:36,960
automatically like what you want to do

00:20:33,960 --> 00:20:40,020
is say get review and get a feedback

00:20:36,960 --> 00:20:41,880
from from Jenkins to to Gary get a

00:20:40,020 --> 00:20:44,160
report back and it should be done in

00:20:41,880 --> 00:20:46,110
less than five minutes otherwise people

00:20:44,160 --> 00:20:49,110
will start to complain and I don't care

00:20:46,110 --> 00:20:50,790
about this so these are the unit tests

00:20:49,110 --> 00:20:53,550
the fast ones that's where you should

00:20:50,790 --> 00:20:55,920
focus on and this is important to get

00:20:53,550 --> 00:20:58,350
right and usually you see the opposite

00:20:55,920 --> 00:21:01,020
side of the pyramid where you have

00:20:58,350 --> 00:21:03,180
plenty of system tests a few integration

00:21:01,020 --> 00:21:05,220
tests and close to known unit tests and

00:21:03,180 --> 00:21:09,090
this is hard to maintain you have plenty

00:21:05,220 --> 00:21:14,820
of of problems there in all all kinds of

00:21:09,090 --> 00:21:18,590
things so it will be we very much like

00:21:14,820 --> 00:21:22,710
is Gus it's a written in go length and

00:21:18,590 --> 00:21:28,200
is very useful for some very simple

00:21:22,710 --> 00:21:31,020
validations if the output can be used in

00:21:28,200 --> 00:21:34,560
Jenkins with with j unit and tap out put

00:21:31,020 --> 00:21:36,060
a spec ish and nagios and chase an

00:21:34,560 --> 00:21:37,800
output is available to so you can even

00:21:36,060 --> 00:21:40,940
integrate it in your monitoring system

00:21:37,800 --> 00:21:44,430
and what's nice about Gus is it's very

00:21:40,940 --> 00:21:47,700
small simple and one binary so you don't

00:21:44,430 --> 00:21:49,560
have a ton of of complex frameworks and

00:21:47,700 --> 00:21:53,250
many layers where something might go

00:21:49,560 --> 00:21:55,890
wrong it's really a simple tool there's

00:21:53,250 --> 00:21:59,010
some resources like address is this a

00:21:55,890 --> 00:22:02,130
reachable command I just want to compare

00:21:59,010 --> 00:22:03,900
the exit status and also its output to

00:22:02,130 --> 00:22:05,550
what I'm expecting so this is very

00:22:03,900 --> 00:22:08,040
useful you just write your script do

00:22:05,550 --> 00:22:10,020
whatever magic you want sent according

00:22:08,040 --> 00:22:11,970
exit code and maybe an output on

00:22:10,020 --> 00:22:14,490
standard out standard error and just

00:22:11,970 --> 00:22:16,560
compare it with the result and these are

00:22:14,490 --> 00:22:19,590
the resources that are available out of

00:22:16,560 --> 00:22:22,320
the box and just some some some short

00:22:19,590 --> 00:22:24,540
demo and so what i'm doing here is I

00:22:22,320 --> 00:22:27,299
have nothing really nothing have no

00:22:24,540 --> 00:22:29,340
configuration at all I just say goes out

00:22:27,299 --> 00:22:32,190
to add SSH and boss looks at my sister

00:22:29,340 --> 00:22:34,739
menses ah well you have as its age with

00:22:32,190 --> 00:22:36,960
group ID 103 you have a package

00:22:34,739 --> 00:22:41,580
installed in this version you have a

00:22:36,960 --> 00:22:44,940
running process as SSH and ssh is

00:22:41,580 --> 00:22:47,369
enabled and also running so this

00:22:44,940 --> 00:22:49,590
automatically can't generate this

00:22:47,369 --> 00:22:51,779
configuration because yamir file this

00:22:49,590 --> 00:22:53,999
looks like that whatever you want to

00:22:51,779 --> 00:22:56,070
keep keep it then and of course you can

00:22:53,999 --> 00:22:59,369
modify it manually or with the further

00:22:56,070 --> 00:23:02,489
commands but that's it there's yambol

00:22:59,369 --> 00:23:05,279
and Jason configuration format of em

00:23:02,489 --> 00:23:10,139
supported and then you run dos validate

00:23:05,279 --> 00:23:12,450
the actual file and this took like way

00:23:10,139 --> 00:23:16,080
less than a second and we have plenty of

00:23:12,450 --> 00:23:18,179
tests in in setups and running like 200

00:23:16,080 --> 00:23:21,840
tests takes like two seconds or

00:23:18,179 --> 00:23:26,159
something like that and for as a further

00:23:21,840 --> 00:23:31,080
demo I want to add port 22 as a check so

00:23:26,159 --> 00:23:34,470
it on listen or IPs and listening to it

00:23:31,080 --> 00:23:36,450
is is Orson a bird so I validate against

00:23:34,470 --> 00:23:40,409
now instead of seven tests I have nine

00:23:36,450 --> 00:23:44,399
tests and now I just for demonstration

00:23:40,409 --> 00:23:48,299
modified a port number on porch instead

00:23:44,399 --> 00:23:50,999
of port 22 I'm we used 23 rerun again

00:23:48,299 --> 00:23:53,730
and it says with the output tap that so

00:23:50,999 --> 00:23:55,379
can be used for for Jenkins integration

00:23:53,730 --> 00:23:58,350
same for chain unit but it's not so nice

00:23:55,379 --> 00:24:02,700
for presentation those faith I have

00:23:58,350 --> 00:24:06,929
nothing listening on on porch 23 and IP

00:24:02,700 --> 00:24:11,809
doesn't match their era so very very

00:24:06,929 --> 00:24:14,759
simple to use it has very low entrance

00:24:11,809 --> 00:24:19,700
effort so you can just start using it

00:24:14,759 --> 00:24:23,039
it's really a no-brainer for very

00:24:19,700 --> 00:24:27,859
complex tests or system tests at the

00:24:23,039 --> 00:24:31,249
framework I very much like a spy test

00:24:27,859 --> 00:24:34,109
just just as a disclaimer while it's

00:24:31,249 --> 00:24:35,639
Titan you don't have to use pipe net all

00:24:34,109 --> 00:24:37,919
we use it for system testing of

00:24:35,639 --> 00:24:41,280
completed and unrelated to tighten

00:24:37,919 --> 00:24:43,140
projects so while you

00:24:41,280 --> 00:24:45,390
course can use it in your piping project

00:24:43,140 --> 00:24:48,180
and I absolutely recommend that you can

00:24:45,390 --> 00:24:51,930
also use it for four non-patent projects

00:24:48,180 --> 00:24:55,550
and add even developer wrote a very nice

00:24:51,930 --> 00:24:58,590
system test integration for his lldpe

00:24:55,550 --> 00:25:01,650
project also has some nice lights

00:24:58,590 --> 00:25:04,530
available where he does snake in

00:25:01,650 --> 00:25:07,500
namespaces for networking really fancy

00:25:04,530 --> 00:25:10,170
stuff and I can just recommend to use it

00:25:07,500 --> 00:25:11,820
it has nice chit unit and step output as

00:25:10,170 --> 00:25:14,790
well so integration your CI system

00:25:11,820 --> 00:25:16,500
should be a no-brainer supports fiction

00:25:14,790 --> 00:25:19,440
scopes monkey patching so you can

00:25:16,500 --> 00:25:22,980
actually fake whatever you want and get

00:25:19,440 --> 00:25:27,840
very nice nice things up and running we

00:25:22,980 --> 00:25:30,420
also noticed a few broken package

00:25:27,840 --> 00:25:32,430
dependencies in our our system where we

00:25:30,420 --> 00:25:35,070
have packages which depend on specific

00:25:32,430 --> 00:25:37,680
hardware which depend on specific

00:25:35,070 --> 00:25:40,980
hardware or can be installed only on

00:25:37,680 --> 00:25:42,840
very very specific systems and those are

00:25:40,980 --> 00:25:44,970
usually not very well tested then

00:25:42,840 --> 00:25:48,360
because the testing is much harder than

00:25:44,970 --> 00:25:51,680
and those packages I'm have broken

00:25:48,360 --> 00:25:56,280
dependencies and just those discs check

00:25:51,680 --> 00:25:58,410
project provides three tools which are

00:25:56,280 --> 00:26:00,120
those depth check for demon packages rpm

00:25:58,410 --> 00:26:05,670
check for rpm packages and clips check

00:26:00,120 --> 00:26:07,710
for osgi plugins and they actually check

00:26:05,670 --> 00:26:09,750
that you can satisfy all the

00:26:07,710 --> 00:26:12,060
dependencies and the conflicts of the

00:26:09,750 --> 00:26:15,660
package pool you have like this is my

00:26:12,060 --> 00:26:18,840
demon repository or my RPM repository

00:26:15,660 --> 00:26:21,210
and it checks that all the packages

00:26:18,840 --> 00:26:24,690
could be installed with the available

00:26:21,210 --> 00:26:28,140
set of packages very fast I'm kind of a

00:26:24,690 --> 00:26:31,910
complicated problem to to actually solve

00:26:28,140 --> 00:26:37,620
that but it's a nice SAT solver for

00:26:31,910 --> 00:26:40,980
usage available open source we also went

00:26:37,620 --> 00:26:45,120
into puppet testing there we have a

00:26:40,980 --> 00:26:48,000
puppet linked I just like the style

00:26:45,120 --> 00:26:51,660
guide check which sadly not yet really

00:26:48,000 --> 00:26:54,000
supports puppet for a specific code we

00:26:51,660 --> 00:26:55,049
have our spec puppet and pika but I

00:26:54,000 --> 00:26:56,759
don't want to

00:26:55,049 --> 00:26:59,519
because on this because david schmidt

00:26:56,759 --> 00:27:01,649
will give a talk about this tomorrow so

00:26:59,519 --> 00:27:03,690
if you're interested in puppet testing

00:27:01,649 --> 00:27:05,730
you should absolutely go to davids talk

00:27:03,690 --> 00:27:09,659
tomorrow introduction to testing puppet

00:27:05,730 --> 00:27:13,470
modules there are some some rules for

00:27:09,659 --> 00:27:16,259
the test and infrastructure you should

00:27:13,470 --> 00:27:21,299
test really everything as soon as

00:27:16,259 --> 00:27:24,210
possible you should have white that the

00:27:21,299 --> 00:27:26,970
trap we ran into like we had a project

00:27:24,210 --> 00:27:29,519
with a test suite the test we'd actually

00:27:26,970 --> 00:27:31,710
verify that everything works fine but we

00:27:29,519 --> 00:27:33,720
didn't integrate for whatever reason the

00:27:31,710 --> 00:27:35,429
test suite into our CI server so it

00:27:33,720 --> 00:27:38,639
wasn't automatically executed just

00:27:35,429 --> 00:27:41,220
manually if you remember that there is a

00:27:38,639 --> 00:27:44,450
test suite so the project grew and grew

00:27:41,220 --> 00:27:48,119
and grew and new features were added and

00:27:44,450 --> 00:27:49,739
like we had a reach the complexity of

00:27:48,119 --> 00:27:51,480
the project that we didn't want to add

00:27:49,739 --> 00:27:53,309
any new features without testing so we

00:27:51,480 --> 00:27:55,679
said well let's look at a test three

00:27:53,309 --> 00:27:58,440
then we we actually noticed we can't

00:27:55,679 --> 00:28:01,799
even support test suite with the project

00:27:58,440 --> 00:28:04,710
now anymore in that way because we had

00:28:01,799 --> 00:28:06,359
new features in a bro check that

00:28:04,710 --> 00:28:08,460
prevented us from using a test fit

00:28:06,359 --> 00:28:11,100
because it requires root permissions at

00:28:08,460 --> 00:28:13,859
a specific place so we can't just run

00:28:11,100 --> 00:28:16,830
the test suite anymore so it's really

00:28:13,859 --> 00:28:20,369
important to to start as soon as

00:28:16,830 --> 00:28:23,340
possible with it and actually use the

00:28:20,369 --> 00:28:25,889
test in your CI server you can then

00:28:23,340 --> 00:28:28,580
really avoid promise doing commit or

00:28:25,889 --> 00:28:31,619
push time depending on your actual setup

00:28:28,580 --> 00:28:33,570
and don't rely on historic knowledge in

00:28:31,619 --> 00:28:36,149
your company like this is the the

00:28:33,570 --> 00:28:38,970
employee who knows what's going on and

00:28:36,149 --> 00:28:41,489
why we have this this kind of Hector as

00:28:38,970 --> 00:28:43,379
soon as you start with testing and and

00:28:41,489 --> 00:28:45,799
you verify this dis result you can

00:28:43,379 --> 00:28:49,350
actually reflect the code without

00:28:45,799 --> 00:28:51,509
breaking it in production and new

00:28:49,350 --> 00:28:53,100
employees will really have a hard time

00:28:51,509 --> 00:28:55,379
just looking at the code with with

00:28:53,100 --> 00:29:01,139
historic data without any tests without

00:28:55,379 --> 00:29:03,990
any any any details and we have also

00:29:01,139 --> 00:29:07,559
like started or actually kind of

00:29:03,990 --> 00:29:09,210
finished 12 test systems to

00:29:07,559 --> 00:29:11,490
work on infrastructure changes without

00:29:09,210 --> 00:29:13,320
breaking anything in production which is

00:29:11,490 --> 00:29:15,149
a really tricky if you want to modify

00:29:13,320 --> 00:29:16,710
anything and you're not one hundred

00:29:15,149 --> 00:29:18,690
percent sure will this break our

00:29:16,710 --> 00:29:20,909
production system so you should really

00:29:18,690 --> 00:29:24,690
have test systems available for whatever

00:29:20,909 --> 00:29:27,480
you do and for whatever should be really

00:29:24,690 --> 00:29:29,100
everything it's like you have your

00:29:27,480 --> 00:29:30,509
production system and you're the clone

00:29:29,100 --> 00:29:32,399
of your production system for testing

00:29:30,509 --> 00:29:35,940
internally but what you might not have

00:29:32,399 --> 00:29:38,789
is like the stinking environment or the

00:29:35,940 --> 00:29:40,169
code review system what about changing

00:29:38,789 --> 00:29:42,629
something in the code review system or

00:29:40,169 --> 00:29:44,549
in the Champions set up so you modify

00:29:42,629 --> 00:29:45,899
anything and you can't release any more

00:29:44,549 --> 00:29:47,850
because your build infrastructure is

00:29:45,899 --> 00:29:49,799
broken and so you should have test

00:29:47,850 --> 00:29:52,470
infrastructure really really for

00:29:49,799 --> 00:29:54,779
everything I just wrote down a few

00:29:52,470 --> 00:29:58,009
resources which are interesting advanced

00:29:54,779 --> 00:30:01,230
testing with goes from Hachiko

00:29:58,009 --> 00:30:05,309
interesting slide set where they explain

00:30:01,230 --> 00:30:07,529
how they test complex stuff also system

00:30:05,309 --> 00:30:09,629
testing with PI test and occupy is an

00:30:07,529 --> 00:30:12,990
interesting approach just for some some

00:30:09,629 --> 00:30:15,990
brainstorming and the book how Google

00:30:12,990 --> 00:30:18,480
test software is also some kind of get

00:30:15,990 --> 00:30:21,659
some ideas or how are companies do this

00:30:18,480 --> 00:30:23,460
so some some words about docker of

00:30:21,659 --> 00:30:29,340
course i will start with an obligatory

00:30:23,460 --> 00:30:32,220
dhaka slide and this is kind of 22 sadly

00:30:29,340 --> 00:30:35,580
it's a moving target dhaka we are moving

00:30:32,220 --> 00:30:40,320
very very fast and this is actually what

00:30:35,580 --> 00:30:43,529
i can just sign dr. doesn't solve plenty

00:30:40,320 --> 00:30:48,210
of problems just see the right side of

00:30:43,529 --> 00:30:50,129
the picture so what containers actually

00:30:48,210 --> 00:30:53,309
kind of so far what dhaka source is this

00:30:50,129 --> 00:30:56,190
kind of def site but the production side

00:30:53,309 --> 00:30:58,289
is completely unsourced or doesn't

00:30:56,190 --> 00:31:01,619
automatically solve your problem like i

00:30:58,289 --> 00:31:04,350
need monitoring i need security support

00:31:01,619 --> 00:31:06,169
so it is kind of the from my point of

00:31:04,350 --> 00:31:08,669
view still open discussion like

00:31:06,169 --> 00:31:11,669
distribution packages and configuration

00:31:08,669 --> 00:31:13,529
management this is not what i want to

00:31:11,669 --> 00:31:17,190
talk about this is like a completely

00:31:13,529 --> 00:31:19,619
different talk then but i want to talk

00:31:17,190 --> 00:31:20,970
about what doc has solved for us and we

00:31:19,619 --> 00:31:23,909
had a few

00:31:20,970 --> 00:31:26,520
use cases that that we can actually

00:31:23,909 --> 00:31:29,580
solve nice with the stalker so where I

00:31:26,520 --> 00:31:33,440
see dhaka is like the vagrant of

00:31:29,580 --> 00:31:36,360
containers I'm like vagrant provides a

00:31:33,440 --> 00:31:38,460
very clear understanding and workflow of

00:31:36,360 --> 00:31:43,429
what you should do and what you can do

00:31:38,460 --> 00:31:43,429
and with dr. we have a kind of

00:31:43,820 --> 00:31:49,740
independent solution no matter whether

00:31:46,710 --> 00:31:54,740
you're on linux or mac or windows you

00:31:49,740 --> 00:31:59,580
have the same same interfaces available

00:31:54,740 --> 00:32:03,150
we managed to solve a problem which she

00:31:59,580 --> 00:32:04,440
does for way too long we can share the

00:32:03,150 --> 00:32:07,230
environment between developers and

00:32:04,440 --> 00:32:09,900
testing infrastructure we had like a

00:32:07,230 --> 00:32:13,799
selenium server for automated web tests

00:32:09,900 --> 00:32:16,580
and if something broke there and jenkins

00:32:13,799 --> 00:32:18,809
said well there's f-test failing

00:32:16,580 --> 00:32:21,240
developers weren't able to reproduce it

00:32:18,809 --> 00:32:24,299
because it worked for them locally now

00:32:21,240 --> 00:32:26,640
what they can do is run docker pool get

00:32:24,299 --> 00:32:29,520
exactly the copy of the selenium

00:32:26,640 --> 00:32:31,350
environment and reproduce the running

00:32:29,520 --> 00:32:34,200
tests locally and this is really really

00:32:31,350 --> 00:32:38,039
useful and of course you can do like

00:32:34,200 --> 00:32:41,070
with full VMs and whatever sure but we

00:32:38,039 --> 00:32:44,039
need very fast test cycles to integrate

00:32:41,070 --> 00:32:46,200
this kind of tests in the Gary Jenkins

00:32:44,039 --> 00:32:48,600
pipeline so what we are interested in is

00:32:46,200 --> 00:32:53,100
not wasting any time we've automated vm

00:32:48,600 --> 00:32:55,230
setup or whatever da car run focus on

00:32:53,100 --> 00:32:58,559
the tests and we have a clear interface

00:32:55,230 --> 00:33:00,419
or API we can focus on of course we we

00:32:58,559 --> 00:33:02,940
started looking at Alexei and there are

00:33:00,419 --> 00:33:05,100
plenty of projects now which might be

00:33:02,940 --> 00:33:06,809
worth looking again but doctor actually

00:33:05,100 --> 00:33:08,730
solved this interface program for us

00:33:06,809 --> 00:33:12,120
that we can actually just run it and not

00:33:08,730 --> 00:33:14,429
having to script many layers and how do

00:33:12,120 --> 00:33:16,679
i connect two containers together

00:33:14,429 --> 00:33:18,330
networking stuff inspect them and all

00:33:16,679 --> 00:33:21,270
this kind of stuff so this solved it for

00:33:18,330 --> 00:33:22,890
us and developers are now actually able

00:33:21,270 --> 00:33:24,780
to control the test environment

00:33:22,890 --> 00:33:27,299
themselves because they make the changes

00:33:24,780 --> 00:33:30,539
in the code review system for the docker

00:33:27,299 --> 00:33:33,600
containers for the docker images so they

00:33:30,539 --> 00:33:35,080
can help us run the infrastructure we

00:33:33,600 --> 00:33:37,630
use for testing we

00:33:35,080 --> 00:33:40,029
use docker just for testing we don't

00:33:37,630 --> 00:33:42,340
have it for any like what we would call

00:33:40,029 --> 00:33:44,200
production system like a service we just

00:33:42,340 --> 00:33:47,559
have it for testing and this kind of

00:33:44,200 --> 00:33:49,570
works well we started with the docker

00:33:47,559 --> 00:33:51,370
registry which was the name of the

00:33:49,570 --> 00:33:53,320
original project nowadays it's called

00:33:51,370 --> 00:33:55,299
dhaka distribution it is the

00:33:53,320 --> 00:34:01,659
implementation of the docker registry

00:33:55,299 --> 00:34:04,419
for dhaka versions from 16 and muir it's

00:34:01,659 --> 00:34:07,000
very fast moving and it kind of works

00:34:04,419 --> 00:34:09,929
for us and we just have our local

00:34:07,000 --> 00:34:14,320
registry without depending on any any

00:34:09,929 --> 00:34:18,010
foreign service there's a workflow

00:34:14,320 --> 00:34:20,440
problem which is really tricky for once

00:34:18,010 --> 00:34:23,050
we is for every project the chips at

00:34:20,440 --> 00:34:26,109
dhaka file jenkins can eat identify this

00:34:23,050 --> 00:34:28,450
in our setup and built the according

00:34:26,109 --> 00:34:30,399
docker image as for us this kind of

00:34:28,450 --> 00:34:33,089
works but what's really really tricky

00:34:30,399 --> 00:34:37,089
and this is a kind of student progress

00:34:33,089 --> 00:34:39,399
all the life cycle of such an image so

00:34:37,089 --> 00:34:41,649
what to do if there's a bug in openssl

00:34:39,399 --> 00:34:44,379
and you want this fixed how do you

00:34:41,649 --> 00:34:47,349
actually manage to update all the

00:34:44,379 --> 00:34:51,310
according images what about the result

00:34:47,349 --> 00:34:53,980
then the you modify the underlying image

00:34:51,310 --> 00:34:56,020
brake tests how do you proceed with this

00:34:53,980 --> 00:34:58,030
so this is kind of the right part of

00:34:56,020 --> 00:35:02,650
this this picture i just showed with

00:34:58,030 --> 00:35:05,920
unsolved problems and image life cycle

00:35:02,650 --> 00:35:10,030
is really a tricky point you should be

00:35:05,920 --> 00:35:12,400
aware of when introducing new underlying

00:35:10,030 --> 00:35:16,380
systems in your infrastructure like f

00:35:12,400 --> 00:35:20,490
dot com there's about docker

00:35:16,380 --> 00:35:24,880
infrastructure tooling we in the

00:35:20,490 --> 00:35:27,849
environment i'm mostly talking about we

00:35:24,880 --> 00:35:30,310
also had puppet three years ago and did

00:35:27,849 --> 00:35:34,089
the code base is nowadays something like

00:35:30,310 --> 00:35:36,160
six years old we had our own wrapper for

00:35:34,089 --> 00:35:38,080
puppet environment so you can just test

00:35:36,160 --> 00:35:40,900
your stuff without breaking production

00:35:38,080 --> 00:35:43,119
we move to our tin k which kind of works

00:35:40,900 --> 00:35:46,660
as we need it higher are still there

00:35:43,119 --> 00:35:48,760
Papa TP and what's new and what I really

00:35:46,660 --> 00:35:51,730
like as an addition to it is

00:35:48,760 --> 00:35:55,030
is ansible because we can actually query

00:35:51,730 --> 00:35:57,760
puppet DB and run ad hoc tests in

00:35:55,030 --> 00:36:00,220
ansible with code review because I mean

00:35:57,760 --> 00:36:02,530
we also have em collective but what we

00:36:00,220 --> 00:36:06,760
usually don't have we've been using em

00:36:02,530 --> 00:36:08,500
collectivists actual configurations for

00:36:06,760 --> 00:36:12,010
what are you going to do and with

00:36:08,500 --> 00:36:14,380
ansible we just reread a puppy TB for

00:36:12,010 --> 00:36:16,570
the hosts we are interested in on to run

00:36:14,380 --> 00:36:18,850
the commands and then can come up with

00:36:16,570 --> 00:36:21,700
the ansible playbook that's the change I

00:36:18,850 --> 00:36:24,820
want to actually run an instable doesn't

00:36:21,700 --> 00:36:26,920
replace puppet for us because puppet is

00:36:24,820 --> 00:36:29,800
the configuration management part and

00:36:26,920 --> 00:36:35,280
the ansible is from for my point of view

00:36:29,800 --> 00:36:38,200
more a deployment tool and ad-hoc ssh

00:36:35,280 --> 00:36:40,840
solution which works perfectly fine but

00:36:38,200 --> 00:36:44,950
it doesn't replace puppet forums we had

00:36:40,840 --> 00:36:48,240
a puppet codebase I'm sitting on 2.7

00:36:44,950 --> 00:36:52,570
nowadays we are kind of bleeding edge

00:36:48,240 --> 00:36:54,910
the upgrade from a codebase worked quite

00:36:52,570 --> 00:36:57,190
well when we expected way more more

00:36:54,910 --> 00:37:00,400
headaches we use the old puppet

00:36:57,190 --> 00:37:03,630
dashboard and nowadays use just a puppet

00:37:00,400 --> 00:37:07,470
port which also has kind of new features

00:37:03,630 --> 00:37:10,510
and six years ago we started with

00:37:07,470 --> 00:37:13,300
writing our own puppet code usually or

00:37:10,510 --> 00:37:15,580
mainly because there were no existing

00:37:13,300 --> 00:37:18,150
modules solving our problems nowadays

00:37:15,580 --> 00:37:21,040
that the landscape has totally changed

00:37:18,150 --> 00:37:24,100
there plenty of very well maintained

00:37:21,040 --> 00:37:28,180
puppet modules so we move plenty of our

00:37:24,100 --> 00:37:30,640
stuff out of our code base and just use

00:37:28,180 --> 00:37:33,840
what's on puppet Forge or left the

00:37:30,640 --> 00:37:36,040
famous modules and this is like Justin

00:37:33,840 --> 00:37:39,160
advertisement that you should actually

00:37:36,040 --> 00:37:41,650
look at your own setup and maybe you

00:37:39,160 --> 00:37:47,740
could just get rid of maintaining your

00:37:41,650 --> 00:37:50,350
own stuff we important topics or the

00:37:47,740 --> 00:37:52,210
monitoring it's very very annoying if

00:37:50,350 --> 00:37:56,020
you have long running tests and they

00:37:52,210 --> 00:37:59,100
fail with out of disk space and you just

00:37:56,020 --> 00:38:01,940
have to rerun those 15 hours once again

00:37:59,100 --> 00:38:04,460
so what what you should actually

00:38:01,940 --> 00:38:07,910
take care of his automatic cleanups to

00:38:04,460 --> 00:38:11,180
get rid of old artifacts caches so you

00:38:07,910 --> 00:38:14,329
don't just have old data around without

00:38:11,180 --> 00:38:17,000
any any actual usage and use appropriate

00:38:14,329 --> 00:38:19,460
monitoring and monitoring is important

00:38:17,000 --> 00:38:21,410
not just for like being aware of low

00:38:19,460 --> 00:38:24,619
disk space on your test machines and

00:38:21,410 --> 00:38:27,410
whatever but also for meatrix so you

00:38:24,619 --> 00:38:29,450
actually know what's taking very long in

00:38:27,410 --> 00:38:32,780
your pipeline where you're wasting time

00:38:29,450 --> 00:38:35,359
maybe because of some software is trying

00:38:32,780 --> 00:38:37,730
to reach an auto service which isn't

00:38:35,359 --> 00:38:39,950
available right now and they're plenty

00:38:37,730 --> 00:38:41,690
of solutions I don't want to get into

00:38:39,950 --> 00:38:44,359
too much detail about them but

00:38:41,690 --> 00:38:46,430
elasticsearch logstash cabanas take

00:38:44,359 --> 00:38:49,609
great log in flux the big Ravana all of

00:38:46,430 --> 00:38:52,040
them plenty of nice solutions but you

00:38:49,609 --> 00:38:54,319
should really start using something like

00:38:52,040 --> 00:38:57,290
that if you don't have it yet because

00:38:54,319 --> 00:38:59,480
you have some actual data there which

00:38:57,290 --> 00:39:01,780
verifies that where this is the part

00:38:59,480 --> 00:39:05,060
where we actually waste most of our time

00:39:01,780 --> 00:39:08,119
monitoring software this is just what we

00:39:05,060 --> 00:39:11,869
are actually using of course other

00:39:08,119 --> 00:39:13,730
systems as well I don't want to to have

00:39:11,869 --> 00:39:15,920
a too strong opinion on this check and

00:39:13,730 --> 00:39:17,030
carrefour works very well for us for

00:39:15,920 --> 00:39:20,599
systems where we just want

00:39:17,030 --> 00:39:22,520
auto-discovery without too much overhead

00:39:20,599 --> 00:39:24,589
with this configuration management and

00:39:22,520 --> 00:39:27,619
all this kind of stuff for bigger setups

00:39:24,589 --> 00:39:29,920
we very much like using a 2 with puppet

00:39:27,619 --> 00:39:36,460
singer too so you don't have to actually

00:39:29,920 --> 00:39:40,420
do much of manual text configuration but

00:39:36,460 --> 00:39:42,710
really start using monitoring for your

00:39:40,420 --> 00:39:46,190
continuous delivery setup if you don't

00:39:42,710 --> 00:39:52,670
do already what we also have nowadays is

00:39:46,190 --> 00:39:55,700
instead of the VV stuff we used three

00:39:52,670 --> 00:39:58,220
years ago or which was available back

00:39:55,700 --> 00:40:01,579
then it was replaced by pecker from from

00:39:58,220 --> 00:40:03,470
Hershey Corp and this is nice it's

00:40:01,579 --> 00:40:06,500
nicely playing together with vagrant so

00:40:03,470 --> 00:40:08,569
what we do is we have dramatic steps so

00:40:06,500 --> 00:40:11,450
we can build on even based base boxes

00:40:08,569 --> 00:40:13,510
where you can then just put your stuff

00:40:11,450 --> 00:40:14,860
into them as soon as you want it and

00:40:13,510 --> 00:40:16,810
pecker

00:40:14,860 --> 00:40:18,400
ultimates all of this process so with

00:40:16,810 --> 00:40:22,770
the combination of criminy bootstrap eka

00:40:18,400 --> 00:40:25,660
and Reagan we just have nicely working

00:40:22,770 --> 00:40:28,270
vagrant images of course depends on your

00:40:25,660 --> 00:40:31,120
actual environment what what we want to

00:40:28,270 --> 00:40:34,090
do is but Becca and vagrant is a really

00:40:31,120 --> 00:40:37,450
nice combination and as I was notified

00:40:34,090 --> 00:40:41,530
today Pekka is or is available in Indian

00:40:37,450 --> 00:40:44,650
unstable as of today so we also invested

00:40:41,530 --> 00:40:47,260
into disaster recovery what we do

00:40:44,650 --> 00:40:49,750
nowadays is a daily fresh installation

00:40:47,260 --> 00:40:51,460
of the notes and daily fresh

00:40:49,750 --> 00:40:54,580
installation of the extra production

00:40:51,460 --> 00:40:56,650
notes in terms of day should look like

00:40:54,580 --> 00:40:58,690
the production also whenever something

00:40:56,650 --> 00:41:00,670
really crashes in the data center we

00:40:58,690 --> 00:41:04,120
should be able to rebuild all of them

00:41:00,670 --> 00:41:06,010
from scratch we do this from Jenkins we

00:41:04,120 --> 00:41:09,190
have some kind of fake data from for

00:41:06,010 --> 00:41:12,970
hire but with what we do is we have some

00:41:09,190 --> 00:41:15,580
kind of fancy USB pen drive with all the

00:41:12,970 --> 00:41:18,460
sensitive data on it from from Huayra

00:41:15,580 --> 00:41:20,380
and what's nice this can be anywhere

00:41:18,460 --> 00:41:22,390
around the office or just someone has to

00:41:20,380 --> 00:41:25,360
make the actual sink who has access to

00:41:22,390 --> 00:41:27,870
it but as soon as you type the wrong pin

00:41:25,360 --> 00:41:31,000
10 times it just automatically device

00:41:27,870 --> 00:41:34,330
itself so one copying a safe one copy

00:41:31,000 --> 00:41:36,970
can just lay around and what we do there

00:41:34,330 --> 00:41:40,180
is or two to use that is just pixie

00:41:36,970 --> 00:41:42,850
boots with I pixie it's very very nice

00:41:40,180 --> 00:41:44,250
to just script all of your magic you

00:41:42,850 --> 00:41:46,450
need so with templates you can

00:41:44,250 --> 00:41:49,180
automatically generate the according

00:41:46,450 --> 00:41:51,490
scripts we use criminally so in this

00:41:49,180 --> 00:41:53,950
case because I know how to use it and

00:41:51,490 --> 00:41:55,750
the groom will develop an SS net script

00:41:53,950 --> 00:41:57,730
option which is kind of nice because you

00:41:55,750 --> 00:42:00,610
just boot the easel and the net script

00:41:57,730 --> 00:42:02,920
you can just provide a URL to some

00:42:00,610 --> 00:42:04,750
script it's getting automatically

00:42:02,920 --> 00:42:06,460
fetched and executed so you can control

00:42:04,750 --> 00:42:08,920
whatever you want and you can of course

00:42:06,460 --> 00:42:11,350
then do magic like depending on the mac

00:42:08,920 --> 00:42:14,800
address of the system or on ram or

00:42:11,350 --> 00:42:16,720
whatever fetch the accordion file and in

00:42:14,800 --> 00:42:18,550
this this according script behind the

00:42:16,720 --> 00:42:20,890
net script put option you we actually

00:42:18,550 --> 00:42:22,660
deploy the system again with Romelu

00:42:20,890 --> 00:42:25,000
bootstrap or whatever you want to do of

00:42:22,660 --> 00:42:28,750
course and what might be worth

00:42:25,000 --> 00:42:29,020
mentioning is net put XY set it's it's

00:42:28,750 --> 00:42:32,110
an

00:42:29,020 --> 00:42:34,960
nice project based on I pixie where you

00:42:32,110 --> 00:42:37,030
have plenty of templates available for

00:42:34,960 --> 00:42:39,130
booting TV on Santa s of whatever

00:42:37,030 --> 00:42:41,740
certain network without having the need

00:42:39,130 --> 00:42:44,230
for for having the according I so fires

00:42:41,740 --> 00:42:46,660
locally so this is easy to get started

00:42:44,230 --> 00:42:48,520
and actually identify what do you want

00:42:46,660 --> 00:42:51,870
to use in production I just want to

00:42:48,520 --> 00:42:53,980
focus on on some anti-patterns and I

00:42:51,870 --> 00:42:56,470
already mentioned these three years ago

00:42:53,980 --> 00:43:00,670
and it I need to repeat this all the

00:42:56,470 --> 00:43:02,320
times don't use SSH for fixing problems

00:43:00,670 --> 00:43:05,470
there should be some kind of debugging

00:43:02,320 --> 00:43:07,960
interface people not having access to

00:43:05,470 --> 00:43:10,840
the actual production system can just

00:43:07,960 --> 00:43:13,120
log in through ssh and fix problem so

00:43:10,840 --> 00:43:16,420
you shouldn't have to call at three in

00:43:13,120 --> 00:43:18,430
the night on call engineer but instead

00:43:16,420 --> 00:43:21,310
there should be some kind of layer run

00:43:18,430 --> 00:43:23,590
deck or whatever where you can modify

00:43:21,310 --> 00:43:27,760
the system state and fix the problem for

00:43:23,590 --> 00:43:30,160
you flaky tests are horrible so if you

00:43:27,760 --> 00:43:32,830
don't actually can rely on the test

00:43:30,160 --> 00:43:35,260
results you just stop looking at the

00:43:32,830 --> 00:43:37,120
test results so it's like what what's

00:43:35,260 --> 00:43:39,580
what what's flaky tests it's like you

00:43:37,120 --> 00:43:41,560
you develop all that kind of tests on

00:43:39,580 --> 00:43:44,470
very fast hardware and then you move to

00:43:41,560 --> 00:43:46,360
the actual testing system and is some

00:43:44,470 --> 00:43:48,430
old server in the back there and it's

00:43:46,360 --> 00:43:50,470
low and it starts to run into timeout

00:43:48,430 --> 00:43:52,750
and all this kind of stuff you maybe

00:43:50,470 --> 00:43:55,780
have some sleep statements in your code

00:43:52,750 --> 00:43:58,600
base waiting for some resource don't do

00:43:55,780 --> 00:44:01,030
that so as soon as you have some some

00:43:58,600 --> 00:44:04,410
flaky tests which aren't stable people

00:44:01,030 --> 00:44:07,390
just don't trust and care any longer

00:44:04,410 --> 00:44:12,070
don't solve problems through cron jobs

00:44:07,390 --> 00:44:13,960
don't don't pull and pull trigger all

00:44:12,070 --> 00:44:15,970
the kind of action whatever you want to

00:44:13,960 --> 00:44:18,010
do don't don't wait for them but let's

00:44:15,970 --> 00:44:22,660
let you get triggered from the actual

00:44:18,010 --> 00:44:25,690
resource you're waiting for to avoid too

00:44:22,660 --> 00:44:28,690
much overload manually setting up

00:44:25,690 --> 00:44:31,060
machines I like to mention is the

00:44:28,690 --> 00:44:34,120
snowflake pattern they all look alike

00:44:31,060 --> 00:44:35,320
but they are still different so really

00:44:34,120 --> 00:44:37,960
you should have should have some

00:44:35,320 --> 00:44:40,210
automated procedure to automatically

00:44:37,960 --> 00:44:42,250
install testing system production

00:44:40,210 --> 00:44:42,850
systems you should be all automated and

00:44:42,250 --> 00:44:45,330
we have planned

00:44:42,850 --> 00:44:48,130
available to solve this kind of stuff

00:44:45,330 --> 00:44:50,200
don't use checklists I mean there are

00:44:48,130 --> 00:44:53,440
some specific areas where checklist are

00:44:50,200 --> 00:44:56,470
useful but try to avoid them by

00:44:53,440 --> 00:44:58,180
automation most things are on checklist

00:44:56,470 --> 00:45:00,880
just because you didn't do it actually

00:44:58,180 --> 00:45:03,370
I'm automation yet plenty of stuff

00:45:00,880 --> 00:45:07,420
that's that can be found on checklists

00:45:03,370 --> 00:45:09,220
could be just automatically be done

00:45:07,420 --> 00:45:12,430
through a Jenkins job frantic or

00:45:09,220 --> 00:45:15,550
whatever so really try try to get rid of

00:45:12,430 --> 00:45:18,040
them and don't make your business depend

00:45:15,550 --> 00:45:20,560
on others I'm not sure how many of you

00:45:18,040 --> 00:45:23,620
are aware of the NPM disaster where the

00:45:20,560 --> 00:45:27,490
left pet module was removed from mpm and

00:45:23,620 --> 00:45:28,930
tons of projects were failing so what we

00:45:27,490 --> 00:45:32,830
have a policy like whatever we

00:45:28,930 --> 00:45:34,900
introduced in company or companies there

00:45:32,830 --> 00:45:36,820
must be a local mirror for it no matter

00:45:34,900 --> 00:45:40,150
where I we are talking about puppet labs

00:45:36,820 --> 00:45:42,580
three poor or some even mirror or a ruby

00:45:40,150 --> 00:45:44,290
gem npm whatever there must be a local

00:45:42,580 --> 00:45:47,500
mirror so we may have to be a hundred

00:45:44,290 --> 00:45:52,840
percent independent from any any foreign

00:45:47,500 --> 00:45:56,890
service also very painful is like if you

00:45:52,840 --> 00:45:58,840
have tours without any standardized

00:45:56,890 --> 00:46:00,850
output so you can actually can't

00:45:58,840 --> 00:46:02,950
actually really parse them so if you

00:46:00,850 --> 00:46:05,020
write a new tool and and generate output

00:46:02,950 --> 00:46:08,590
please make sure it's easy to parse and

00:46:05,020 --> 00:46:11,530
you have a stable and format usually you

00:46:08,590 --> 00:46:13,620
want to have tap or j unit output for

00:46:11,530 --> 00:46:16,060
Jenkins integration and really use that

00:46:13,620 --> 00:46:20,110
output for your integration in your CI

00:46:16,060 --> 00:46:22,450
environment don't rebuild stuff just

00:46:20,110 --> 00:46:25,300
because you can if you have a pipeline

00:46:22,450 --> 00:46:27,280
starting with on well chop and you've

00:46:25,300 --> 00:46:30,430
downstream chops tip which are following

00:46:27,280 --> 00:46:33,100
through the pipeline don't rebuild the

00:46:30,430 --> 00:46:36,700
same thing twice share the artifact you

00:46:33,100 --> 00:46:38,350
you generate the built result share it

00:46:36,700 --> 00:46:40,090
with in the chops just pass it through

00:46:38,350 --> 00:46:44,470
the pipeline that's the idea of it but

00:46:40,090 --> 00:46:46,570
don't rebuild it um successfully

00:46:44,470 --> 00:46:50,200
preventing configurability yeah kind of

00:46:46,570 --> 00:46:52,300
like you starts to have a hard coded IP

00:46:50,200 --> 00:46:54,330
addresses hostnames port numbers some

00:46:52,300 --> 00:46:56,760
sleep statements

00:46:54,330 --> 00:46:58,770
like checks this is the test system is

00:46:56,760 --> 00:47:01,170
the production system make it config you

00:46:58,770 --> 00:47:03,180
were there are plenty of formats

00:47:01,170 --> 00:47:07,980
available for for configuration formats

00:47:03,180 --> 00:47:10,230
use them how to get people to stare at

00:47:07,980 --> 00:47:14,750
Jenkins web the champions you I

00:47:10,230 --> 00:47:17,040
shouldn't be used at all to be honest

00:47:14,750 --> 00:47:19,050
developer students have to wait for

00:47:17,040 --> 00:47:21,870
something about Paul for the actual data

00:47:19,050 --> 00:47:25,830
interested in if they make a coat will

00:47:21,870 --> 00:47:28,350
change some notification mechanism will

00:47:25,830 --> 00:47:31,230
be available for use is it male Java

00:47:28,350 --> 00:47:33,330
slack or whatever use the according

00:47:31,230 --> 00:47:35,400
information one step the result is there

00:47:33,330 --> 00:47:38,520
notify them but don't make your

00:47:35,400 --> 00:47:41,250
developers look at Jenkins web and

00:47:38,520 --> 00:47:42,780
there's really no excuse for writing

00:47:41,250 --> 00:47:48,960
unit tests there are plenty of software

00:47:42,780 --> 00:47:51,870
projects which have test Suites solving

00:47:48,960 --> 00:47:54,720
really complex problems starting with

00:47:51,870 --> 00:47:57,570
that might be me hard but really there

00:47:54,720 --> 00:48:01,470
is no excuse to not writing unit tests

00:47:57,570 --> 00:48:03,330
so some words about pain points there

00:48:01,470 --> 00:48:06,090
were some kind of misunderstandings as

00:48:03,330 --> 00:48:09,270
we noticed in Garrett I don't want to go

00:48:06,090 --> 00:48:12,360
into much detail there but minus one

00:48:09,270 --> 00:48:14,880
minus two plus one plus one it's not it

00:48:12,360 --> 00:48:16,650
doesn't sum up so if someone gives plus

00:48:14,880 --> 00:48:19,520
one on someone someone else gives plus

00:48:16,650 --> 00:48:22,740
two it's not three also there is a

00:48:19,520 --> 00:48:24,870
difference of usage like some people

00:48:22,740 --> 00:48:27,720
actually give plus two while the mean

00:48:24,870 --> 00:48:29,640
plus a plus one while the mean plus two

00:48:27,720 --> 00:48:31,590
because they want to have feedback from

00:48:29,640 --> 00:48:33,810
someone else and leave them for the

00:48:31,590 --> 00:48:36,690
actual plus two this should be something

00:48:33,810 --> 00:48:38,610
where you clarify this within your team

00:48:36,690 --> 00:48:40,650
or in within your company how you

00:48:38,610 --> 00:48:42,210
actually use this and just fix it

00:48:40,650 --> 00:48:45,720
through documentation so it's clear for

00:48:42,210 --> 00:48:48,870
everyone how to use it cultural

00:48:45,720 --> 00:48:52,770
differences there's a nice team handbook

00:48:48,870 --> 00:48:55,650
available from get lab they are a remote

00:48:52,770 --> 00:48:58,490
working company and this is a nice nice

00:48:55,650 --> 00:49:01,230
example for a handbook how to actually

00:48:58,490 --> 00:49:02,910
solve problems in your company too

00:49:01,230 --> 00:49:04,860
depending on cultural background and

00:49:02,910 --> 00:49:07,890
stuff like that kind of important its

00:49:04,860 --> 00:49:12,269
social aspect some some TV on

00:49:07,890 --> 00:49:15,569
related pain points we experienced our

00:49:12,269 --> 00:49:20,660
release i clear went much smaller so

00:49:15,569 --> 00:49:23,039
this one one button release option

00:49:20,660 --> 00:49:25,740
turned up to be a problem for us because

00:49:23,039 --> 00:49:28,200
the mirror is moving so fast that

00:49:25,740 --> 00:49:31,140
whenever you run apt-get update within

00:49:28,200 --> 00:49:32,910
one test you always get this hash some

00:49:31,140 --> 00:49:35,160
mismatch error because you fetch two

00:49:32,910 --> 00:49:38,970
files and they are not add to make a

00:49:35,160 --> 00:49:43,440
Tamar there's a fixed by Colleen Watson

00:49:38,970 --> 00:49:45,779
enabled for Ubuntu 16 or four and we are

00:49:43,440 --> 00:49:49,440
looking forward to CDs in deviant or the

00:49:45,779 --> 00:49:51,329
related tours it's fixed through a

00:49:49,440 --> 00:49:54,390
so-called pie hash feature if you're

00:49:51,329 --> 00:49:57,420
interested in looking this into this we

00:49:54,390 --> 00:50:00,779
also had some kind of pretty pence for

00:49:57,420 --> 00:50:03,990
the ones of you who know this kind of

00:50:00,779 --> 00:50:06,539
stuff might be there for the other ones

00:50:03,990 --> 00:50:08,690
Bri depends is like mice package depends

00:50:06,539 --> 00:50:12,150
on another one already being set up and

00:50:08,690 --> 00:50:14,700
avoid it as much as possible with plenty

00:50:12,150 --> 00:50:17,670
of problems with automated upgrades and

00:50:14,700 --> 00:50:20,099
also with few parts are given tool for

00:50:17,670 --> 00:50:23,609
insta mated installation removal appt

00:50:20,099 --> 00:50:26,430
reg tests the more sophisticated the

00:50:23,609 --> 00:50:28,140
systems become as we noticed the clothes

00:50:26,430 --> 00:50:31,829
are the toolchain actually needs stuff

00:50:28,140 --> 00:50:34,859
even already has or uses so sometimes

00:50:31,829 --> 00:50:38,039
you say well why is this complex project

00:50:34,859 --> 00:50:39,539
in deep in use at all and once your

00:50:38,039 --> 00:50:40,890
project is growing and your

00:50:39,539 --> 00:50:42,059
infrastructure is getting better and

00:50:40,890 --> 00:50:45,450
better and more complex and more

00:50:42,059 --> 00:50:47,730
automated you start to notice why they

00:50:45,450 --> 00:50:50,849
are pretty high-tech few parts knows all

00:50:47,730 --> 00:50:54,390
this kind of stuff also like mass

00:50:50,849 --> 00:50:56,490
changes we had with plenty if you build

00:50:54,390 --> 00:51:00,779
a new release plenty of projects

00:50:56,490 --> 00:51:04,200
depending on customer 50 100 150 chops

00:51:00,779 --> 00:51:08,009
are starting to hit Jenkins and then

00:51:04,200 --> 00:51:11,039
plenty of chops are following and the

00:51:08,009 --> 00:51:13,019
actual repository hitting the data had

00:51:11,039 --> 00:51:17,130
blocking problems because it was just

00:51:13,019 --> 00:51:21,230
getting stuff so this this was kind of

00:51:17,130 --> 00:51:23,480
work around through a surah surah vapo

00:51:21,230 --> 00:51:25,520
from us but actually it would have been

00:51:23,480 --> 00:51:29,180
nice to have a rest api with a scheduler

00:51:25,520 --> 00:51:33,050
so kind of Rus looking at different

00:51:29,180 --> 00:51:35,300
solutions Jenkins related structuring of

00:51:33,050 --> 00:51:37,280
hundreds or thousands of of Jenkins jobs

00:51:35,300 --> 00:51:39,500
in Jenkins job builder this is the tool

00:51:37,280 --> 00:51:41,480
from ops tech we use for actually

00:51:39,500 --> 00:51:45,380
configuring Jenkins job we don't want to

00:51:41,480 --> 00:51:47,660
use this in clicky web isn't easy

00:51:45,380 --> 00:51:49,730
especially the more exceptions you have

00:51:47,660 --> 00:51:51,520
so this is something really worth

00:51:49,730 --> 00:51:53,900
looking into how can I actually

00:51:51,520 --> 00:51:57,830
structure my my configuration management

00:51:53,900 --> 00:52:00,080
for Jenkins unreliable tests if you

00:51:57,830 --> 00:52:02,240
start adding new tests in your in your

00:52:00,080 --> 00:52:04,609
pipeline the question is how do you

00:52:02,240 --> 00:52:06,260
handle errors maybe you have some old

00:52:04,609 --> 00:52:08,420
branches where you don't care about the

00:52:06,260 --> 00:52:12,619
tests how do you handle them so what we

00:52:08,420 --> 00:52:15,260
decided to use is widely so blacklists

00:52:12,619 --> 00:52:18,730
to reach 100 percent coverage over time

00:52:15,260 --> 00:52:21,350
so we knew those three projects are fine

00:52:18,730 --> 00:52:23,900
let's just whitelist them and all the

00:52:21,350 --> 00:52:25,850
rest is in a black list or so to be just

00:52:23,900 --> 00:52:27,800
ignore the results and every single new

00:52:25,850 --> 00:52:30,160
project which we consider a stable and

00:52:27,800 --> 00:52:34,580
tests are reliable just go into the

00:52:30,160 --> 00:52:38,480
whitelist and matrix jobs in Jenkins are

00:52:34,580 --> 00:52:40,970
not always fun if you can just use

00:52:38,480 --> 00:52:44,300
simple plain freestyle champion jobs is

00:52:40,970 --> 00:52:47,150
also true for very specific plugins in

00:52:44,300 --> 00:52:48,950
in champions don't use too much details

00:52:47,150 --> 00:52:51,710
of Jenkins sometimes it's just easier to

00:52:48,950 --> 00:52:56,960
write your own script or so availability

00:52:51,710 --> 00:52:59,200
of Jenkins is is kind of important

00:52:56,960 --> 00:53:01,430
because or your CI server whatever it is

00:52:59,200 --> 00:53:04,340
as soon as you have some maintenance

00:53:01,430 --> 00:53:05,869
window you can actually release right

00:53:04,340 --> 00:53:08,810
now what happens if you upgrade your

00:53:05,869 --> 00:53:10,869
environment and it doesn't come back and

00:53:08,810 --> 00:53:13,280
what helped us is the linnean shut down

00:53:10,869 --> 00:53:16,700
for the ones of you who notice this

00:53:13,280 --> 00:53:19,450
upstream and downstream connections eve

00:53:16,700 --> 00:53:22,040
of chops you start a job and what

00:53:19,450 --> 00:53:24,920
venient shot on actually provides is it

00:53:22,040 --> 00:53:27,170
finishes until all the downstream chops

00:53:24,920 --> 00:53:30,170
are actually finished and not preventing

00:53:27,170 --> 00:53:33,440
you're a champion server to not getting

00:53:30,170 --> 00:53:34,940
restarted because they're stuck chops in

00:53:33,440 --> 00:53:37,790
it or the Siouxland key

00:53:34,940 --> 00:53:40,700
which kind of move the data from Jenkins

00:53:37,790 --> 00:53:43,790
to to a foreign system I mean opus tech

00:53:40,700 --> 00:53:46,430
environment is a good good project to

00:53:43,790 --> 00:53:50,270
look at and Jenkins to provides this new

00:53:46,430 --> 00:53:52,430
pipeline concept now officially where

00:53:50,270 --> 00:53:55,220
you can actually restart Jenkins master

00:53:52,430 --> 00:53:58,280
without having champion slaves and jobs

00:53:55,220 --> 00:54:00,410
disappear you should have maintenance

00:53:58,280 --> 00:54:02,690
windows and down times to actually

00:54:00,410 --> 00:54:05,240
identify problems you might have in your

00:54:02,690 --> 00:54:07,130
in infrastructure it's kind of use it as

00:54:05,240 --> 00:54:08,810
an to your advantage if you have a

00:54:07,130 --> 00:54:11,300
maintenance window for an infrastructure

00:54:08,810 --> 00:54:13,190
look at what what problem can't you

00:54:11,300 --> 00:54:15,800
actually solve right now because some

00:54:13,190 --> 00:54:18,829
service is done so last few slides I'm

00:54:15,800 --> 00:54:20,930
aware of timing some architectural

00:54:18,829 --> 00:54:24,140
decisions are visible only after

00:54:20,930 --> 00:54:26,869
surviving a new release in our situation

00:54:24,140 --> 00:54:29,450
this is like from DV envisat to chassis

00:54:26,869 --> 00:54:31,220
is your system structured in a way that

00:54:29,450 --> 00:54:33,920
you can actually support a new release

00:54:31,220 --> 00:54:36,500
more additional distribution or a

00:54:33,920 --> 00:54:38,270
different operating system so this is

00:54:36,500 --> 00:54:41,170
kind of something to keep in mind if you

00:54:38,270 --> 00:54:44,150
do some system design in your CI

00:54:41,170 --> 00:54:46,010
environment separation is very important

00:54:44,150 --> 00:54:48,980
we have so-called full-featured PPS

00:54:46,010 --> 00:54:50,990
personal package archives like you want

00:54:48,980 --> 00:54:52,970
to provide we have them through Garrett

00:54:50,990 --> 00:54:55,910
Jenkins and Jenkins even view ourselves

00:54:52,970 --> 00:54:58,609
and what we do is like through Garrett

00:54:55,910 --> 00:55:00,560
topics for the ones of you who know this

00:54:58,609 --> 00:55:02,750
concept it's it's like you connect

00:55:00,560 --> 00:55:05,089
different reviews together through

00:55:02,750 --> 00:55:06,530
topics we provide the according results

00:55:05,089 --> 00:55:09,319
in the same report this is something to

00:55:06,530 --> 00:55:11,329
keep in mind it should be a you should

00:55:09,319 --> 00:55:14,210
be able to test multiple reviews

00:55:11,329 --> 00:55:19,880
together in combination and have a

00:55:14,210 --> 00:55:22,430
specific result and what what what was a

00:55:19,880 --> 00:55:24,589
good investment is like we moved really

00:55:22,430 --> 00:55:26,450
specific settings into release specific

00:55:24,589 --> 00:55:28,160
configuration and scripts so if you have

00:55:26,450 --> 00:55:29,900
a maintenance branch maybe do the

00:55:28,160 --> 00:55:32,660
configuration also in the in the

00:55:29,900 --> 00:55:34,270
maintenance branch so you don't have to

00:55:32,660 --> 00:55:37,369
support in master all the old

00:55:34,270 --> 00:55:40,910
configurations and the code just adds up

00:55:37,369 --> 00:55:43,730
and never gets gets less so takeaways

00:55:40,910 --> 00:55:46,700
from from my site a's automation is

00:55:43,730 --> 00:55:48,900
essential configuration management is

00:55:46,700 --> 00:55:51,400
something I hopefully don't have to

00:55:48,900 --> 00:55:53,589
nowadays anymore you want some

00:55:51,400 --> 00:55:55,630
traceability in all your continuous

00:55:53,589 --> 00:55:58,089
delivery environment use code review

00:55:55,630 --> 00:56:00,009
it's really one of the biggest changes I

00:55:58,089 --> 00:56:03,119
saw throughout the the last few years

00:56:00,009 --> 00:56:06,430
which really improves infrastructure and

00:56:03,119 --> 00:56:08,890
communication and human interaction use

00:56:06,430 --> 00:56:10,690
tests and testing usually it's really

00:56:08,890 --> 00:56:13,029
easy to get started and once you're

00:56:10,690 --> 00:56:15,519
there and see the benefit of it you can

00:56:13,029 --> 00:56:17,769
just continue communication is important

00:56:15,519 --> 00:56:21,160
talk to other folks in the company so

00:56:17,769 --> 00:56:24,130
you have not your your your own part

00:56:21,160 --> 00:56:26,650
nobody else can use and try to bring

00:56:24,130 --> 00:56:30,880
death and ops together no matter how you

00:56:26,650 --> 00:56:39,999
you call it so are there any questions

00:56:30,880 --> 00:56:42,430
left I am aware that 88 slides see

00:56:39,999 --> 00:56:48,369
within less than one hour a kind of a

00:56:42,430 --> 00:56:52,569
challenge so if if there are no

00:56:48,369 --> 00:56:55,630
questions I should be here around anyway

00:56:52,569 --> 00:56:59,099
so you can find with just catching up

00:56:55,630 --> 00:56:59,099

YouTube URL: https://www.youtube.com/watch?v=u7o2MHMaDpU


