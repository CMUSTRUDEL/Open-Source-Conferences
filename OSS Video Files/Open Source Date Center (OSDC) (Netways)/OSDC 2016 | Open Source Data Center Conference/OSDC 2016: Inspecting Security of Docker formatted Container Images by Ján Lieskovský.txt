Title: OSDC 2016: Inspecting Security of Docker formatted Container Images by Ján Lieskovský
Publication date: 2016-05-04
Playlist: OSDC 2016 | Open Source Data Center Conference
Description: 
	The presented article will target inspection of security of (un)official Docker formatted container images approaching the resulting safety of the image from two PoVs:

examining image content for presence of known security flaws (vulnerability assessment),
and validation if the internal software and service(s) encapsulated within the image are configured according to commonly-accepted recommendations as defined in security baselines (security hardening).
Starting with reasoning why Docker images security matters, we will proceed to outline architectural concepts Docker images are based on. Subsequently compare these concepts with building blocks used by design of today's virtual machines, and point out areas (main differences) to take care of when container image security is primary concern. We will use the observations from this comparison to emphasize the need to inspect both content of container images themselves, but also the security configuration of the hosting computer in order to reach truly secure infrastructure. We will introduce the section of inspecting security of container images with providing overview of recent effort to implement image signing and verification. Afterwards we will demonstrate inspection of a concrete container image against currently known security flaws, and explain how this approach can be automated and generalized. Thereafter we will focus on examination if software and service(s) included in the container image meet commonly-known requirements for secure configuration. An illustration example how to detect e.g. an unauthorized executable in the container content will be provided. In the part dedicated to securing of the hosting computer we will show it is possible to fully automate this task too. We will conclude with sketching, where development in this area might be heading in the future (features that might be available to strengthen the security of container images even more).
Captions: 
	00:00:12,400 --> 00:00:19,180
welcome to our third talk for today we

00:00:15,940 --> 00:00:21,490
present lan yan laskowski with

00:00:19,180 --> 00:00:29,740
inspecting security of taco formatted

00:00:21,490 --> 00:00:32,710
container images and let's start hello

00:00:29,740 --> 00:00:35,470
my name is cheyenne Laskowski i work as

00:00:32,710 --> 00:00:39,180
a software engineer a4a dad and I came

00:00:35,470 --> 00:00:42,730
here to speak about the security of

00:00:39,180 --> 00:00:46,960
Dhaka formatted containing images why we

00:00:42,730 --> 00:00:51,150
care and the why you should care to we

00:00:46,960 --> 00:00:51,150
first need to set up some basic terms

00:00:51,930 --> 00:00:58,930
the cove formatted container images it's

00:00:55,180 --> 00:01:04,600
interesting application platform oh the

00:00:58,930 --> 00:01:07,869
doctor has been like hype and a fashion

00:01:04,600 --> 00:01:13,270
in your recent years many people got

00:01:07,869 --> 00:01:17,710
accustomed to use it and it looks

00:01:13,270 --> 00:01:19,510
promising to developers just do the

00:01:17,710 --> 00:01:24,610
reasons they can focus on the content

00:01:19,510 --> 00:01:29,430
rather than on the build process they

00:01:24,610 --> 00:01:32,950
can aggregated data we are the docker

00:01:29,430 --> 00:01:36,760
container format specification there is

00:01:32,950 --> 00:01:42,550
a simplified release management it's not

00:01:36,760 --> 00:01:44,710
necessary to take care about how the

00:01:42,550 --> 00:01:47,760
software or application would be

00:01:44,710 --> 00:01:52,930
released the docker provides uniform

00:01:47,760 --> 00:01:56,350
approach to this and of course on last

00:01:52,930 --> 00:02:00,750
but not least it's easy to customize the

00:01:56,350 --> 00:02:05,130
content on the other hand it's also

00:02:00,750 --> 00:02:09,280
interesting and promising for the users

00:02:05,130 --> 00:02:12,129
maybe because do the very same reasons

00:02:09,280 --> 00:02:17,670
there is plenty of applications

00:02:12,129 --> 00:02:21,700
available at the official autocar up

00:02:17,670 --> 00:02:24,430
again it's a question of a simple

00:02:21,700 --> 00:02:26,260
Department of the applications you just

00:02:24,430 --> 00:02:30,269
buddha image and

00:02:26,260 --> 00:02:35,409
basically our setup no need to special

00:02:30,269 --> 00:02:38,700
difficult installation oh this approach

00:02:35,409 --> 00:02:43,890
or this is also interesting for

00:02:38,700 --> 00:02:48,129
administrators when it's necessary to

00:02:43,890 --> 00:02:52,359
updated application it simplifies the

00:02:48,129 --> 00:02:58,239
life for them so they can more easily or

00:02:52,359 --> 00:03:01,239
the boy the updated version and again

00:02:58,239 --> 00:03:05,129
easy customization of indicates the

00:03:01,239 --> 00:03:12,220
provided content doesn't meet the exact

00:03:05,129 --> 00:03:15,220
requirements it's easy to modify it some

00:03:12,220 --> 00:03:17,680
basic terms so we need to distinguish

00:03:15,220 --> 00:03:22,079
between a docker image and docker

00:03:17,680 --> 00:03:27,190
container so docker image is basically a

00:03:22,079 --> 00:03:30,609
some collection of root file system

00:03:27,190 --> 00:03:34,959
changes and what's important here is

00:03:30,609 --> 00:03:38,349
it's a read-only the image it doesn't

00:03:34,959 --> 00:03:44,199
have some specific state it's basically

00:03:38,349 --> 00:03:49,810
set of couple friars or based one on the

00:03:44,199 --> 00:03:52,569
top of the order about the process how

00:03:49,810 --> 00:03:55,870
the images are created basically all of

00:03:52,569 --> 00:03:58,230
the images are created core created or

00:03:55,870 --> 00:04:02,709
derived from the base image and

00:03:58,230 --> 00:04:07,290
transformed into the final image via a

00:04:02,709 --> 00:04:10,060
couple of operations that in the

00:04:07,290 --> 00:04:13,419
terminology of the curve or our code

00:04:10,060 --> 00:04:16,180
transactions these transactions able to

00:04:13,419 --> 00:04:21,940
use able to perform actions like run a

00:04:16,180 --> 00:04:23,919
command at file or directory or specify

00:04:21,940 --> 00:04:27,909
a process that would be actually

00:04:23,919 --> 00:04:30,789
launched when the container is started

00:04:27,909 --> 00:04:34,690
the image is started on the other hand

00:04:30,789 --> 00:04:40,260
the container is already some instance

00:04:34,690 --> 00:04:43,810
of the image or should I use the

00:04:40,260 --> 00:04:49,180
analogy of object-oriented programming

00:04:43,810 --> 00:04:52,300
cool we can like compare it that images

00:04:49,180 --> 00:04:55,330
are classes and the containers are the

00:04:52,300 --> 00:04:58,180
actual instances of them the container

00:04:55,330 --> 00:05:01,420
contains of the image the execution

00:04:58,180 --> 00:05:05,890
environment and the set of instructions

00:05:01,420 --> 00:05:08,890
that were used to create the image it's

00:05:05,890 --> 00:05:12,870
possible to have many instances many

00:05:08,890 --> 00:05:19,330
containers of the very same one image oh

00:05:12,870 --> 00:05:20,800
this picture um provides also get some

00:05:19,330 --> 00:05:27,010
light about about the actual

00:05:20,800 --> 00:05:31,840
infrastructure or of how dr. works so

00:05:27,010 --> 00:05:36,160
there is there is traditional server to

00:05:31,840 --> 00:05:38,560
client infrastructure the client may be

00:05:36,160 --> 00:05:42,310
the same like the server like the doctor

00:05:38,560 --> 00:05:50,530
hosts we have some local registry when

00:05:42,310 --> 00:05:56,350
we open the software publishers provided

00:05:50,530 --> 00:05:59,770
although they are images of one week we

00:05:56,350 --> 00:06:04,260
can pull the content from from the

00:05:59,770 --> 00:06:07,480
registry and we will receive an image

00:06:04,260 --> 00:06:12,040
and run that image why are the quran

00:06:07,480 --> 00:06:14,650
command or the vice versa we can create

00:06:12,040 --> 00:06:17,260
the image completely from scratch from a

00:06:14,650 --> 00:06:20,280
docker file so we would use the joker

00:06:17,260 --> 00:06:25,180
build command and around the container

00:06:20,280 --> 00:06:27,700
well on this picture it's good that it's

00:06:25,180 --> 00:06:32,280
clear the rescue later distinction

00:06:27,700 --> 00:06:37,630
between the images and containers a

00:06:32,280 --> 00:06:41,080
comparison of containers and visual

00:06:37,630 --> 00:06:45,130
machines it's so often believed that

00:06:41,080 --> 00:06:48,970
containers are something pretty new it's

00:06:45,130 --> 00:06:53,180
not that really true they are there have

00:06:48,970 --> 00:06:56,660
been here for a pretty long time just

00:06:53,180 --> 00:07:02,570
dr. own product ice then simplify it

00:06:56,660 --> 00:07:04,370
them 20 wider use basically the

00:07:02,570 --> 00:07:07,070
difference here is we have some

00:07:04,370 --> 00:07:11,449
infrastructure hardware the host

00:07:07,070 --> 00:07:15,199
operating system in the current docker

00:07:11,449 --> 00:07:20,389
image on the right there is the docker

00:07:15,199 --> 00:07:23,060
engine and the containers are the

00:07:20,389 --> 00:07:26,330
containers consist of the batteries

00:07:23,060 --> 00:07:29,810
libraries and applications compared to

00:07:26,330 --> 00:07:32,840
that the virtual machine has another

00:07:29,810 --> 00:07:39,110
liar or different liar it's a hypervisor

00:07:32,840 --> 00:07:41,270
and yet each virtual machine besides of

00:07:39,110 --> 00:07:45,800
the application and the libraries also

00:07:41,270 --> 00:07:52,190
contains operating system of the running

00:07:45,800 --> 00:07:56,240
guest oh this picture can can be

00:07:52,190 --> 00:07:58,570
interpreted like darker locker is some

00:07:56,240 --> 00:08:01,669
more containers are more effective

00:07:58,570 --> 00:08:05,620
because they there isn't a need for a

00:08:01,669 --> 00:08:08,870
good guest operating system so it's

00:08:05,620 --> 00:08:11,949
consumes resources actually to start the

00:08:08,870 --> 00:08:16,970
container when compared to the operating

00:08:11,949 --> 00:08:23,289
to the virtual machine container

00:08:16,970 --> 00:08:26,330
security and white white matters the

00:08:23,289 --> 00:08:32,919
security of the docker containers is

00:08:26,330 --> 00:08:37,219
based on some very well or created or

00:08:32,919 --> 00:08:42,079
features of the Linux kernel like cano

00:08:37,219 --> 00:08:46,279
namespaces basically when we want to

00:08:42,079 --> 00:08:49,250
speak about security of dr. runtime or

00:08:46,279 --> 00:08:52,730
container runtime we need to focus on

00:08:49,250 --> 00:08:58,190
three basic areas the security of the

00:08:52,730 --> 00:09:00,350
carlyle the to keep it updated the

00:08:58,190 --> 00:09:04,720
support for namespaces and control

00:09:00,350 --> 00:09:06,529
groups security of the dr demon itself

00:09:04,720 --> 00:09:10,040
like it's

00:09:06,529 --> 00:09:13,129
the service it also has some attacks our

00:09:10,040 --> 00:09:17,990
face and we also need to keep it updated

00:09:13,129 --> 00:09:21,730
and then last but not least the security

00:09:17,990 --> 00:09:25,639
of the concrete specific doctor file oh

00:09:21,730 --> 00:09:30,350
the Linux kernel nine spaces provide

00:09:25,639 --> 00:09:36,470
some form of isolation like you're in

00:09:30,350 --> 00:09:39,050
the concept of virtual machine you have

00:09:36,470 --> 00:09:43,009
completely isolated virtual machines in

00:09:39,050 --> 00:09:47,410
the concept of containers this isolation

00:09:43,009 --> 00:09:50,600
is like original received reached a liar

00:09:47,410 --> 00:09:54,319
Colonel namespaces there is a whole

00:09:50,600 --> 00:09:57,490
network stack per each container and the

00:09:54,319 --> 00:10:01,899
resources like CPU cycles memory

00:09:57,490 --> 00:10:08,689
assignment input ultimo bound are

00:10:01,899 --> 00:10:14,649
managed via control groups there are

00:10:08,689 --> 00:10:18,699
also linux kernel capabilities basically

00:10:14,649 --> 00:10:24,920
capabilities in traditional unix world

00:10:18,699 --> 00:10:28,519
there were a separation to the user were

00:10:24,920 --> 00:10:30,110
separated to two roles like the pre

00:10:28,519 --> 00:10:33,680
Virgil on the administrator and

00:10:30,110 --> 00:10:38,529
unprivileged one linux kernel

00:10:33,680 --> 00:10:44,860
capabilities provide more fine-grained

00:10:38,529 --> 00:10:53,899
distinction to be able to specify more

00:10:44,860 --> 00:10:58,519
items that reach better distinction of

00:10:53,899 --> 00:11:03,290
the rules there are also of concepts

00:10:58,519 --> 00:11:08,509
like harden it colonel and mechanisms

00:11:03,290 --> 00:11:12,379
like a saline hoops and upper arm or why

00:11:08,509 --> 00:11:15,769
I am mentioning all all this it might

00:11:12,379 --> 00:11:19,070
seem boring basically when you look at

00:11:15,769 --> 00:11:22,780
the design of the way how

00:11:19,070 --> 00:11:26,660
container on time is designed and

00:11:22,780 --> 00:11:30,220
implemented it looks or reasonable the

00:11:26,660 --> 00:11:33,950
issue is that there might be something

00:11:30,220 --> 00:11:42,820
we aren't aware of we might overlook

00:11:33,950 --> 00:11:47,590
something and as container runtimes so

00:11:42,820 --> 00:11:52,210
accepted more or wider audience and got

00:11:47,590 --> 00:11:57,710
used by more wide groups of customers

00:11:52,210 --> 00:12:00,520
there were forced to inspect the

00:11:57,710 --> 00:12:05,000
security of the container runtimes and

00:12:00,520 --> 00:12:09,650
some of those articles discussed that

00:12:05,000 --> 00:12:13,580
not each major linux kernel subsystem

00:12:09,650 --> 00:12:18,290
subsystems can be named spaced basically

00:12:13,580 --> 00:12:21,400
the linux namespaces is the basic

00:12:18,290 --> 00:12:26,680
building block of the of the runtime and

00:12:21,400 --> 00:12:29,780
the combined was not each of the devices

00:12:26,680 --> 00:12:36,550
not each of the kernel modules can be

00:12:29,780 --> 00:12:43,910
convenience based and what happened like

00:12:36,550 --> 00:12:51,800
at 9 jun 2014 the docker team arounds to

00:12:43,910 --> 00:12:55,790
version 1.0 and it the history has shown

00:12:51,800 --> 00:12:59,450
it has been some strange coincidence of

00:12:55,790 --> 00:13:04,460
the history that a week after the 1.0

00:12:59,450 --> 00:13:07,940
version was released Oh some guy sent

00:13:04,460 --> 00:13:12,860
innocent email to open-source security

00:13:07,940 --> 00:13:15,860
mailing lists like saying hello i have

00:13:12,860 --> 00:13:21,320
found this issue oh it's in the version

00:13:15,860 --> 00:13:23,750
of 0 0 point 11 and what's actually

00:13:21,320 --> 00:13:25,490
interesting I'm not really sure they

00:13:23,750 --> 00:13:27,110
really fix the problem they just told me

00:13:25,490 --> 00:13:32,060
that they changed something in the

00:13:27,110 --> 00:13:36,760
couple capability hemmlich so

00:13:32,060 --> 00:13:45,590
what we might over glue or overlook is

00:13:36,760 --> 00:13:51,770
an exploit called shocker and it

00:13:45,590 --> 00:13:55,070
actually demonstrated that if someone

00:13:51,770 --> 00:13:58,270
forces you to run docker image docker

00:13:55,070 --> 00:14:01,280
container or do some reason because it's

00:13:58,270 --> 00:14:07,180
flexible it's like straight forward it's

00:14:01,280 --> 00:14:12,020
a very common now this exploit can

00:14:07,180 --> 00:14:16,220
obtain access to any file under on the

00:14:12,020 --> 00:14:21,400
host operating system oh one might say

00:14:16,220 --> 00:14:21,400
it's okay it has been like two years ago

00:14:21,940 --> 00:14:29,920
and it isn't problem like today and we

00:14:26,570 --> 00:14:36,560
will return to the same same picture

00:14:29,920 --> 00:14:38,990
here the scheme of the contact the

00:14:36,560 --> 00:14:42,140
container and time was was like

00:14:38,990 --> 00:14:46,220
expressed its light white and it's easy

00:14:42,140 --> 00:14:52,210
to run the containers what happened here

00:14:46,220 --> 00:14:56,030
is that the virtualization too so it's a

00:14:52,210 --> 00:14:58,040
it relies more resources oh there

00:14:56,030 --> 00:15:00,980
actually is another another level of

00:14:58,040 --> 00:15:02,720
protection the attacker needs to like

00:15:00,980 --> 00:15:05,450
overcome when they want to exploit

00:15:02,720 --> 00:15:08,030
something and that's actually the guest

00:15:05,450 --> 00:15:11,210
operating system they to exploit

00:15:08,030 --> 00:15:15,500
something they need to find an issue in

00:15:11,210 --> 00:15:17,750
the first in the operating in the kernel

00:15:15,500 --> 00:15:21,020
of the guest operating system than

00:15:17,750 --> 00:15:24,230
exploiting the hypervisor and then they

00:15:21,020 --> 00:15:29,510
can actually touch the final hosting

00:15:24,230 --> 00:15:33,470
system in dahkur you can see that it's a

00:15:29,510 --> 00:15:40,040
bit more it's easier because it's not

00:15:33,470 --> 00:15:44,329
there is missing the layer so the result

00:15:40,040 --> 00:15:46,639
what so like this exploit cost is

00:15:44,329 --> 00:15:50,499
that the engineers that originally

00:15:46,639 --> 00:15:55,399
invented an implemented occur like

00:15:50,499 --> 00:15:58,100
revisited the security features of

00:15:55,399 --> 00:16:02,059
docker and provided some recommendations

00:15:58,100 --> 00:16:07,129
like okay it's it's secure but you need

00:16:02,059 --> 00:16:11,059
to follow some good practices like don't

00:16:07,129 --> 00:16:13,579
think don't run things as root drop

00:16:11,059 --> 00:16:18,949
capabilities and I don't know another

00:16:13,579 --> 00:16:22,730
SLE nukes don't use shady seyd binaries

00:16:18,949 --> 00:16:26,509
and this is another another example like

00:16:22,730 --> 00:16:33,769
a drop river goes as quickly as possible

00:16:26,509 --> 00:16:36,920
and watch your rocks like we like we

00:16:33,769 --> 00:16:41,089
said before the curve seems a bit ly

00:16:36,920 --> 00:16:44,839
appealing because the users see the

00:16:41,089 --> 00:16:47,389
plenty of applications other other those

00:16:44,839 --> 00:16:52,129
applications are available in the

00:16:47,389 --> 00:16:57,019
official repositories and also anyone

00:16:52,129 --> 00:17:00,739
can can build their own repository and

00:16:57,019 --> 00:17:05,740
create I don't know i have i've searched

00:17:00,739 --> 00:17:13,370
for and there are more than 2,000

00:17:05,740 --> 00:17:16,610
instances of the of the repository the

00:17:13,370 --> 00:17:19,429
natural question you might ask is who

00:17:16,610 --> 00:17:26,169
have built these images like how can I

00:17:19,429 --> 00:17:29,149
trust so um dr. Liston it to these

00:17:26,169 --> 00:17:33,139
questions and all our concert from from

00:17:29,149 --> 00:17:36,260
the users and in the August 2015

00:17:33,139 --> 00:17:41,950
introduced something called docker

00:17:36,260 --> 00:17:48,220
content trust and basically it works

00:17:41,950 --> 00:17:51,289
from this work for owls the content

00:17:48,220 --> 00:17:54,830
repository content to be assigned it's

00:17:51,289 --> 00:17:57,560
performed automatically or in the moment

00:17:54,830 --> 00:18:01,040
when at the publisher one

00:17:57,560 --> 00:18:06,530
to publish new version the service and

00:18:01,040 --> 00:18:11,090
greets it assigns the content we with

00:18:06,530 --> 00:18:14,380
the private key of the publisher and on

00:18:11,090 --> 00:18:18,770
the other hand when the customer or user

00:18:14,380 --> 00:18:23,330
receives the content again the docker

00:18:18,770 --> 00:18:27,140
demon itself verifies the signature of

00:18:23,330 --> 00:18:33,200
the of the content and the pool fails if

00:18:27,140 --> 00:18:37,490
the identity doesn't match but there are

00:18:33,200 --> 00:18:40,640
two types of keys in the local content

00:18:37,490 --> 00:18:44,090
trust the tagging key and so-called of

00:18:40,640 --> 00:18:47,900
wine key tagging key is basically

00:18:44,090 --> 00:18:50,990
required when you are creating new

00:18:47,900 --> 00:18:56,540
repository and it's actually intended to

00:18:50,990 --> 00:19:04,160
be shared with all our people that they

00:18:56,540 --> 00:19:17,480
are expected it all to put that are

00:19:04,160 --> 00:19:20,690
expected or two that are expected to

00:19:17,480 --> 00:19:23,960
cooperate with the video on on the

00:19:20,690 --> 00:19:30,440
content it's Alex I I can't move I

00:19:23,960 --> 00:19:33,590
should stand and the blankie is

00:19:30,440 --> 00:19:40,160
something like master key that's that

00:19:33,590 --> 00:19:42,560
it's actually used to actions like when

00:19:40,160 --> 00:19:47,450
when you need to revoke the tagging key

00:19:42,560 --> 00:19:51,560
and it's intended to be actually kept

00:19:47,450 --> 00:19:55,430
safe what the docker content trust can

00:19:51,560 --> 00:19:59,030
provide for us is we can we can verify

00:19:55,430 --> 00:20:04,550
our identity of the of the publisher we

00:19:59,030 --> 00:20:06,920
can trust that the content the image

00:20:04,550 --> 00:20:09,830
wasn't changed during the way when when

00:20:06,920 --> 00:20:11,059
we are pulling it from the repository it

00:20:09,830 --> 00:20:15,049
also

00:20:11,059 --> 00:20:19,249
helps to detect like repo attacks some

00:20:15,049 --> 00:20:21,620
attacker would want to pretend he can

00:20:19,249 --> 00:20:25,999
provide the image for you and but it

00:20:21,620 --> 00:20:29,480
would be already old outdated and also

00:20:25,999 --> 00:20:33,740
like it's possible to detect the key

00:20:29,480 --> 00:20:38,450
compromised okay so we know who have

00:20:33,740 --> 00:20:40,779
built these images and the next question

00:20:38,450 --> 00:20:47,869
might be how these images have been

00:20:40,779 --> 00:20:52,789
actually created this this is basically

00:20:47,869 --> 00:20:54,679
the reason i have previously mentioned

00:20:52,789 --> 00:20:59,539
the side the difference between between

00:20:54,679 --> 00:21:02,419
the images and containers the image is

00:20:59,539 --> 00:21:06,049
each image is basically derived from the

00:21:02,419 --> 00:21:08,240
base image and to transfer the

00:21:06,049 --> 00:21:13,039
transformer into the final form or

00:21:08,240 --> 00:21:17,440
through steps of instructions we can

00:21:13,039 --> 00:21:21,169
create new images two ways like a drill

00:21:17,440 --> 00:21:26,480
specify a docker file and Boomer built a

00:21:21,169 --> 00:21:29,809
new container from it and or we can

00:21:26,480 --> 00:21:37,039
update an existing container and commit

00:21:29,809 --> 00:21:43,820
the changes back obvious question might

00:21:37,039 --> 00:21:47,779
be of you can create these images the

00:21:43,820 --> 00:21:50,899
issue is that anyone as as it's easy to

00:21:47,779 --> 00:21:52,879
use and it should be easy to use and it

00:21:50,899 --> 00:21:55,820
should it should be accessible for

00:21:52,879 --> 00:22:02,480
everyone but basically anyone can create

00:21:55,820 --> 00:22:06,860
new images so when we when we retrieve

00:22:02,480 --> 00:22:11,119
some remote image what we actually trust

00:22:06,860 --> 00:22:14,570
in that moment into it's basically we

00:22:11,119 --> 00:22:17,509
trust that the base image the image we

00:22:14,570 --> 00:22:20,499
are actually bully pulling has been

00:22:17,509 --> 00:22:20,499
created in a secure way

00:22:21,049 --> 00:22:26,809
are the changes that have been created

00:22:23,960 --> 00:22:31,399
on the top of that image our heart have

00:22:26,809 --> 00:22:33,440
been performed in a secure way and if

00:22:31,399 --> 00:22:37,909
there is some security fall in the base

00:22:33,440 --> 00:22:41,539
image or in the changes that the content

00:22:37,909 --> 00:22:45,649
we actually retrieve has been already

00:22:41,539 --> 00:22:51,559
updated so basically just by pulling the

00:22:45,649 --> 00:22:57,080
image we like assume free free facts to

00:22:51,559 --> 00:22:58,779
be already already met us like I think

00:22:57,080 --> 00:23:03,739
everyone wants a secure container

00:22:58,779 --> 00:23:06,590
infrastructure and we can trust the

00:23:03,739 --> 00:23:09,259
design and the publisher of the of the

00:23:06,590 --> 00:23:12,139
image that they are doing their best to

00:23:09,259 --> 00:23:16,419
provide the container for us but it's

00:23:12,139 --> 00:23:21,940
all responsibility to verify that the

00:23:16,419 --> 00:23:25,999
image is truly secure the image the host

00:23:21,940 --> 00:23:31,279
hosting the container and time and also

00:23:25,999 --> 00:23:34,970
or the demon so we get to the point how

00:23:31,279 --> 00:23:40,149
to expect how to inspect or verify that

00:23:34,970 --> 00:23:40,149
the image we drift is actually secure

00:23:40,730 --> 00:23:49,220
so it needs to be split into two steps

00:23:45,080 --> 00:23:52,190
two tasks one step is to inspect the

00:23:49,220 --> 00:23:55,850
image for a presence of security flaws

00:23:52,190 --> 00:24:00,700
this process is called vulnerability

00:23:55,850 --> 00:24:04,010
assessment and the second second step is

00:24:00,700 --> 00:24:07,820
to check if the internal configuration

00:24:04,010 --> 00:24:11,919
of the container is set up in a secure

00:24:07,820 --> 00:24:18,380
way this is called security compliance

00:24:11,919 --> 00:24:20,450
maybe some of you have seen advisory

00:24:18,380 --> 00:24:25,059
security advisories like this this is

00:24:20,450 --> 00:24:28,760
example security advisory for Firefox

00:24:25,059 --> 00:24:32,660
which produced by redhead here is the

00:24:28,760 --> 00:24:37,070
equivalent from the Ubuntu distribution

00:24:32,660 --> 00:24:39,919
and basically what was interesting is

00:24:37,070 --> 00:24:43,820
you can see the list of security flaws

00:24:39,919 --> 00:24:47,330
that got corrected or within this update

00:24:43,820 --> 00:24:51,650
this is the HTML form and the problem is

00:24:47,330 --> 00:24:56,120
that this form isn't completely right

00:24:51,650 --> 00:25:00,350
for to be processed when when you want

00:24:56,120 --> 00:25:06,429
to scan containers so we need something

00:25:00,350 --> 00:25:12,350
that would be easily consumable for

00:25:06,429 --> 00:25:15,530
machine processing basically we need a

00:25:12,350 --> 00:25:18,650
standard like standard that would also

00:25:15,530 --> 00:25:22,250
allow us to express the information

00:25:18,650 --> 00:25:27,950
about the security force in some uniform

00:25:22,250 --> 00:25:31,340
way we also need the information about

00:25:27,950 --> 00:25:37,640
security updates to be present in the

00:25:31,340 --> 00:25:40,220
form of this standard and although now

00:25:37,640 --> 00:25:43,340
the last part is the scanner that would

00:25:40,220 --> 00:25:46,360
actually perform the scan for us in an

00:25:43,340 --> 00:25:46,360
automated way

00:25:47,429 --> 00:25:57,070
though when like focusing or instructing

00:25:52,210 --> 00:26:00,120
the features the standard should have is

00:25:57,070 --> 00:26:03,520
that we want to represent the

00:26:00,120 --> 00:26:08,980
configuration of the systems in some

00:26:03,520 --> 00:26:12,160
uniform way in so above when speaking

00:26:08,980 --> 00:26:15,910
about systems I mean and now like all

00:26:12,160 --> 00:26:18,700
kinds of systems like regardless of the

00:26:15,910 --> 00:26:21,160
of the platform or regardless if it's

00:26:18,700 --> 00:26:23,620
like physical machine or a visual

00:26:21,160 --> 00:26:25,020
machine or its container the standard

00:26:23,620 --> 00:26:28,590
should be able to represent

00:26:25,020 --> 00:26:34,030
configuration information of any kind of

00:26:28,590 --> 00:26:35,620
like computer system that can exist the

00:26:34,030 --> 00:26:41,650
standard should be able to honor eyes

00:26:35,620 --> 00:26:44,290
the system in question for reasons of

00:26:41,650 --> 00:26:48,040
some some kind of computer state like

00:26:44,290 --> 00:26:50,710
for example if some page has been

00:26:48,040 --> 00:26:53,890
applied or if there is some security

00:26:50,710 --> 00:26:57,280
vulnerability present and should be also

00:26:53,890 --> 00:27:02,500
able to report the results back in some

00:26:57,280 --> 00:27:05,650
in some uniform way so we use a standard

00:27:02,500 --> 00:27:10,120
which is called upon vulnerabilities and

00:27:05,650 --> 00:27:13,600
assessment language basically the the

00:27:10,120 --> 00:27:16,410
name speaks about the purpose of the

00:27:13,600 --> 00:27:18,910
object standard it's able to scan

00:27:16,410 --> 00:27:23,410
security for security vulnerabilities

00:27:18,910 --> 00:27:27,360
but also it's able to detect computer

00:27:23,410 --> 00:27:33,340
state and detect some specific

00:27:27,360 --> 00:27:36,220
configuration Oh before we said we need

00:27:33,340 --> 00:27:38,679
the standard we need the security errata

00:27:36,220 --> 00:27:45,570
available in the form of the standard

00:27:38,679 --> 00:27:51,520
and the scanner the security errata

00:27:45,570 --> 00:27:57,220
basically a lot of vendors in the linux

00:27:51,520 --> 00:27:59,670
era producing operating system dedicate

00:27:57,220 --> 00:28:02,790
a lot of efforts to create

00:27:59,670 --> 00:28:09,090
security updates information in the form

00:28:02,790 --> 00:28:12,360
of oval or files to mention some of

00:28:09,090 --> 00:28:16,320
these I will provide these are actually

00:28:12,360 --> 00:28:20,130
links so you can you can see the

00:28:16,320 --> 00:28:22,800
concrete occasions but just to mention

00:28:20,130 --> 00:28:25,370
the to the most to is this redhead and

00:28:22,800 --> 00:28:31,080
you want to but there are more of them

00:28:25,370 --> 00:28:34,530
and the last part we need is the the

00:28:31,080 --> 00:28:39,480
scanner to perform the automated

00:28:34,530 --> 00:28:41,160
inspection for us and on this place I

00:28:39,480 --> 00:28:44,550
would like to introduce the oakland a's

00:28:41,160 --> 00:28:48,270
cap our project open skype ecosystem

00:28:44,550 --> 00:28:51,060
like here's the overview of the tools

00:28:48,270 --> 00:28:56,310
not complete overview but some snippet

00:28:51,060 --> 00:29:01,020
of it of the tools we produce it's the

00:28:56,310 --> 00:29:03,930
command line interface utility the code

00:29:01,020 --> 00:29:08,010
opens craft a base or escape it's

00:29:03,930 --> 00:29:12,290
plainly intended to be used in shell

00:29:08,010 --> 00:29:16,070
scripts by books by the administrators

00:29:12,290 --> 00:29:20,010
and then there is the graphical

00:29:16,070 --> 00:29:25,170
interface on top of it called escape

00:29:20,010 --> 00:29:27,990
work bench besides being able to scan

00:29:25,170 --> 00:29:31,350
the system why are graphical tool it's

00:29:27,990 --> 00:29:34,710
also able to modify the security

00:29:31,350 --> 00:29:41,210
policies I will speak about security

00:29:34,710 --> 00:29:43,560
policies in a moment and most recent

00:29:41,210 --> 00:29:47,670
addition to the ecosystem is open scab

00:29:43,560 --> 00:29:51,870
demon basically there is some effort to

00:29:47,670 --> 00:29:55,290
be able to scan any any kind of computer

00:29:51,870 --> 00:29:59,000
system like physical virtual machine

00:29:55,290 --> 00:30:03,810
container there is there is afford to

00:29:59,000 --> 00:30:07,260
run the scans on a regular basis provide

00:30:03,810 --> 00:30:09,990
some system service that would for

00:30:07,260 --> 00:30:13,170
example scan the system I don't know

00:30:09,990 --> 00:30:15,420
each each Monday or each Wednesday

00:30:13,170 --> 00:30:18,740
and thus captain Moniz actually do a

00:30:15,420 --> 00:30:25,550
database that it's used to store and

00:30:18,740 --> 00:30:25,550
process the results of the of the scans

00:30:26,240 --> 00:30:36,920
he's here is example of what we what we

00:30:32,160 --> 00:30:36,920
actually need to do when we want to scan

00:30:37,070 --> 00:30:45,120
containers of against the presence of

00:30:41,910 --> 00:30:48,180
security force so we install a package

00:30:45,120 --> 00:30:51,330
this is this example from from federal

00:30:48,180 --> 00:30:54,930
system but when you when you look at the

00:30:51,330 --> 00:30:57,660
open sky portal page I have linked at

00:30:54,930 --> 00:30:59,070
the end there are the software is

00:30:57,660 --> 00:31:03,180
available also on different

00:30:59,070 --> 00:31:06,990
distributions so we install the open

00:31:03,180 --> 00:31:09,540
skype containers package oh the second

00:31:06,990 --> 00:31:14,430
second command is actually retrieving

00:31:09,540 --> 00:31:21,090
some randomly chosen container from the

00:31:14,430 --> 00:31:24,120
crap we retrieve the Oval information

00:31:21,090 --> 00:31:29,280
about the security flaws this in this

00:31:24,120 --> 00:31:31,460
case the since the container is based on

00:31:29,280 --> 00:31:36,570
the other Enterprise Linux 7 we

00:31:31,460 --> 00:31:41,930
retrieved the Oval security flow

00:31:36,570 --> 00:31:47,760
information for this type of system we

00:31:41,930 --> 00:31:55,440
start the image and actually create a

00:31:47,760 --> 00:31:59,940
container from it and here's here's the

00:31:55,440 --> 00:32:03,240
actual actual scan or so we call utility

00:31:59,940 --> 00:32:06,840
which is called Oscar blocker and with

00:32:03,240 --> 00:32:11,190
these arguments you can see some some

00:32:06,840 --> 00:32:14,910
strange-looking identifiers like I don't

00:32:11,190 --> 00:32:19,680
know 2016 something and basically what

00:32:14,910 --> 00:32:23,130
matters here is the last cone in the

00:32:19,680 --> 00:32:27,450
sense that all those

00:32:23,130 --> 00:32:31,230
lines they have finished with the state

00:32:27,450 --> 00:32:34,680
of false means that that container isn't

00:32:31,230 --> 00:32:39,560
isn't brown to some specific security

00:32:34,680 --> 00:32:44,340
for the situation is worse when the

00:32:39,560 --> 00:32:46,230
specific advisory was mad when the

00:32:44,340 --> 00:32:50,340
result was true in that case it means

00:32:46,230 --> 00:32:53,820
that the container is actually

00:32:50,340 --> 00:32:58,160
vulnerable or to some noun of security

00:32:53,820 --> 00:33:03,060
for that actually got a fix for ratio

00:32:58,160 --> 00:33:05,900
like we said running container running

00:33:03,060 --> 00:33:12,050
contrasted continues might be dangerous

00:33:05,900 --> 00:33:14,940
it actually the Shocker exploit

00:33:12,050 --> 00:33:17,700
demonstrated that in the moment you

00:33:14,940 --> 00:33:23,400
actually run the container it might be

00:33:17,700 --> 00:33:25,650
able to access any any file on your host

00:33:23,400 --> 00:33:27,870
on the on the computer hosting the

00:33:25,650 --> 00:33:31,730
infrastructure so it's not the good

00:33:27,870 --> 00:33:35,250
practice to run under state containers

00:33:31,730 --> 00:33:39,630
instead of that we might want to scan

00:33:35,250 --> 00:33:42,780
images instead like Oh yet before we

00:33:39,630 --> 00:33:47,670
start the containers we would inspect

00:33:42,780 --> 00:33:52,950
them it's possible to basically it's the

00:33:47,670 --> 00:33:56,100
same same tool Oscar blocker similar

00:33:52,950 --> 00:34:02,700
output like you can see again there are

00:33:56,100 --> 00:34:05,670
two instances of like pass or true state

00:34:02,700 --> 00:34:10,230
meaning that there are through the two

00:34:05,670 --> 00:34:14,370
issues found basically what what differs

00:34:10,230 --> 00:34:16,620
is the actual command that was executed

00:34:14,370 --> 00:34:24,770
in the first example it was the

00:34:16,620 --> 00:34:28,560
container CV and now it's in each CV we

00:34:24,770 --> 00:34:31,889
previously mentioned that when we want

00:34:28,560 --> 00:34:34,320
to inspect the security of containers we

00:34:31,889 --> 00:34:37,320
need to focus on two

00:34:34,320 --> 00:34:40,590
different areas like inspect the

00:34:37,320 --> 00:34:44,420
security flaws the presence of them but

00:34:40,590 --> 00:34:48,030
also some some containers might be

00:34:44,420 --> 00:34:51,290
configured in an insecure way like

00:34:48,030 --> 00:34:55,530
configured not enough not strong enough

00:34:51,290 --> 00:34:59,490
so the second part is actually verifying

00:34:55,530 --> 00:35:06,330
if the internal configuration of the

00:34:59,490 --> 00:35:11,150
data or the services is configured in a

00:35:06,330 --> 00:35:14,460
strong enough way this is referred in

00:35:11,150 --> 00:35:18,620
like security are alike security

00:35:14,460 --> 00:35:18,620
compliance checking security compliance

00:35:20,210 --> 00:35:29,850
so to be able to do that we need to like

00:35:26,070 --> 00:35:33,480
introduce yet another component into the

00:35:29,850 --> 00:35:38,180
puzzle and it's code in our case escape

00:35:33,480 --> 00:35:42,360
security guide it's basically a set of

00:35:38,180 --> 00:35:44,880
security policies that are already

00:35:42,360 --> 00:35:48,270
available and that have been already

00:35:44,880 --> 00:35:50,930
created and there are these security

00:35:48,270 --> 00:35:55,500
policies are defined in some like

00:35:50,930 --> 00:36:00,260
criteria or requirements what securely

00:35:55,500 --> 00:36:07,290
configured system ma would look like

00:36:00,260 --> 00:36:13,070
there is a lot of them just because just

00:36:07,290 --> 00:36:19,050
because the different use case each each

00:36:13,070 --> 00:36:23,900
computer is intended to be used for to

00:36:19,050 --> 00:36:26,640
mention example one might expect that

00:36:23,900 --> 00:36:30,570
some default configuration of the

00:36:26,640 --> 00:36:37,050
distribution would be secure like it's

00:36:30,570 --> 00:36:40,410
it's true just on the half way and it's

00:36:37,050 --> 00:36:43,440
because of course the like creators of

00:36:40,410 --> 00:36:46,309
the operating systems attends to use

00:36:43,440 --> 00:36:49,089
secure protocols algorithms and

00:36:46,309 --> 00:36:54,579
improve for the security of the whole

00:36:49,089 --> 00:36:58,089
system but do the way those are like

00:36:54,579 --> 00:37:00,469
products are intended to be used like

00:36:58,089 --> 00:37:02,509
you can it can be used like in on

00:37:00,469 --> 00:37:04,969
physical machine and virtual machine in

00:37:02,509 --> 00:37:10,009
the cloud is not possible to create some

00:37:04,969 --> 00:37:12,380
some ultimate ultimately secure computer

00:37:10,009 --> 00:37:15,519
in environments so you basically need

00:37:12,380 --> 00:37:20,150
different types of security policies oh

00:37:15,519 --> 00:37:26,650
and those security policies would be

00:37:20,150 --> 00:37:30,829
specific to the specific to the concrete

00:37:26,650 --> 00:37:39,229
application or usage of such a such a

00:37:30,829 --> 00:37:41,630
computer system so here is syntax of the

00:37:39,229 --> 00:37:46,160
of the running the tool and we would

00:37:41,630 --> 00:37:49,819
like to scan and image against against

00:37:46,160 --> 00:37:52,449
the security compliance we can see it's

00:37:49,819 --> 00:37:58,900
getting a bit force there are or

00:37:52,449 --> 00:38:02,599
arguments in this case basically what

00:37:58,900 --> 00:38:06,769
remains the same is the Oscar blocker

00:38:02,599 --> 00:38:10,759
and the container itself the image

00:38:06,769 --> 00:38:14,029
itself we want to scan we specify that

00:38:10,759 --> 00:38:16,219
we want to scan image like in the

00:38:14,029 --> 00:38:21,650
previous example it's also possible to

00:38:16,219 --> 00:38:26,809
run running container and all those

00:38:21,650 --> 00:38:31,369
remaining parameters X CCDF evolve and

00:38:26,809 --> 00:38:33,859
profile basically we specify which which

00:38:31,369 --> 00:38:38,089
profile from from the security policy to

00:38:33,859 --> 00:38:41,689
use where to store the result of the

00:38:38,089 --> 00:38:46,339
scan and actually the secure that long

00:38:41,689 --> 00:38:51,199
line refers to the specific security

00:38:46,339 --> 00:38:54,229
policy we want to use it so as per

00:38:51,199 --> 00:38:57,200
security policy for resident enterprise

00:38:54,229 --> 00:39:02,060
look 7 in this case

00:38:57,200 --> 00:39:07,220
and once we create once the scan

00:39:02,060 --> 00:39:10,070
finishes and we created that report dot

00:39:07,220 --> 00:39:15,410
HTML file in the temporary directory

00:39:10,070 --> 00:39:21,670
here is example Oh as single single fire

00:39:15,410 --> 00:39:28,900
Oh scanning data randomly chosen

00:39:21,670 --> 00:39:37,660
container from Viet resulted in into

00:39:28,900 --> 00:39:42,080
like 11 or more loose parent like Oh

00:39:37,660 --> 00:39:45,890
satisfied and digital this is this is

00:39:42,080 --> 00:39:48,380
example actually of concrete a feature

00:39:45,890 --> 00:39:51,710
that wasn't wasn't bad in this case it

00:39:48,380 --> 00:39:56,780
was like the container allows to log in

00:39:51,710 --> 00:40:00,890
computers or organ users that have empty

00:39:56,780 --> 00:40:05,870
passwords so it's basically an example

00:40:00,890 --> 00:40:08,470
what you know which way how the computer

00:40:05,870 --> 00:40:13,970
the container might be configured

00:40:08,470 --> 00:40:17,240
insecure and when I performing the scan

00:40:13,970 --> 00:40:22,280
of the optical container all of those

00:40:17,240 --> 00:40:25,160
saw favors all of the all those issues

00:40:22,280 --> 00:40:28,790
found would be represented in the same

00:40:25,160 --> 00:40:35,870
way in the sense you would get notified

00:40:28,790 --> 00:40:38,510
the specific rule why how much argent or

00:40:35,870 --> 00:40:42,050
how much important it is like from from

00:40:38,510 --> 00:40:46,870
the point of security of the system why

00:40:42,050 --> 00:40:49,490
it's what it means when when we scan the

00:40:46,870 --> 00:40:52,280
container against this rule what we are

00:40:49,490 --> 00:40:55,640
actually checking and the ratio now

00:40:52,280 --> 00:40:58,040
what's the motivation behind trying to

00:40:55,640 --> 00:41:02,180
check this configuration why it's

00:40:58,040 --> 00:41:04,340
important to perform the check and you

00:41:02,180 --> 00:41:08,780
can see also the remediation script

00:41:04,340 --> 00:41:10,970
remediation script is something scanning

00:41:08,780 --> 00:41:16,670
a computer or

00:41:10,970 --> 00:41:20,710
dinner when the scanner finds some

00:41:16,670 --> 00:41:25,400
Ferrars it's also able to automatically

00:41:20,710 --> 00:41:28,250
correct them and the section or MIDI

00:41:25,400 --> 00:41:31,240
data mediation script actually displays

00:41:28,250 --> 00:41:35,780
the specific command that would be

00:41:31,240 --> 00:41:44,530
executed to fix this concrete failing

00:41:35,780 --> 00:41:44,530
feature and that's actually it I think

00:41:45,910 --> 00:41:56,900
thanks yeah no questions Mel any

00:41:50,060 --> 00:42:03,710
questions can I use it with debian or a

00:41:56,900 --> 00:42:07,100
bundle there actually is this way the

00:42:03,710 --> 00:42:10,640
scanner is already available in a debian

00:42:07,100 --> 00:42:13,820
but the policies aren't yet like the

00:42:10,640 --> 00:42:16,480
issue is that the policies aren't

00:42:13,820 --> 00:42:19,460
created for the debian and ubuntu

00:42:16,480 --> 00:42:21,800
distribution yet though when scanning

00:42:19,460 --> 00:42:24,710
security falls or they create them

00:42:21,800 --> 00:42:26,210
automatically like the cv it's the

00:42:24,710 --> 00:42:30,760
process you can download a difference

00:42:26,210 --> 00:42:33,890
can any any computer virtual machine

00:42:30,760 --> 00:42:36,770
from debian or ubuntu for presence of

00:42:33,890 --> 00:42:40,070
security flaws but when you want to

00:42:36,770 --> 00:42:43,820
check the configuration those policies

00:42:40,070 --> 00:42:48,260
varun's created yet we like two months

00:42:43,820 --> 00:42:51,890
ago like matched some some afford some

00:42:48,260 --> 00:42:56,330
the beyond rules and into scrap security

00:42:51,890 --> 00:42:58,400
guide so there is some how to say start

00:42:56,330 --> 00:43:02,290
the starting effort to be able to scan

00:42:58,400 --> 00:43:06,100
also they be n NE budu systems when

00:43:02,290 --> 00:43:11,330
forward is 40 regarding configuration

00:43:06,100 --> 00:43:13,480
but for security force you can ok

00:43:11,330 --> 00:43:16,210
because i checked debian

00:43:13,480 --> 00:43:20,200
on it and they seem to have published

00:43:16,210 --> 00:43:22,300
the info since 2001 till 2012 and there

00:43:20,200 --> 00:43:25,869
then because some changes their script

00:43:22,300 --> 00:43:27,850
bro and it's still broken and since

00:43:25,869 --> 00:43:30,160
there's no information from debian on

00:43:27,850 --> 00:43:35,020
this it's kind of unclear how can this

00:43:30,160 --> 00:43:39,550
be used widely um that's true for for

00:43:35,020 --> 00:43:42,210
the beyond that though like cause the

00:43:39,550 --> 00:43:45,670
process of producing the oval changes

00:43:42,210 --> 00:43:48,190
isn't like transparent and isn't working

00:43:45,670 --> 00:43:51,520
right now but you won't do like two

00:43:48,190 --> 00:43:55,570
months ago started a completely separate

00:43:51,520 --> 00:43:59,109
process they produce own security data

00:43:55,570 --> 00:44:03,369
and at the different location and not

00:43:59,109 --> 00:44:05,109
derived from from the beyond if you are

00:44:03,369 --> 00:44:09,850
interested I can I can point you to the

00:44:05,109 --> 00:44:14,619
or actually it is if you if you visit

00:44:09,850 --> 00:44:22,210
the link actually it points to the data

00:44:14,619 --> 00:44:27,580
over data for for Ubuntu any further

00:44:22,210 --> 00:44:31,480
questions ok so far then thanks again

00:44:27,580 --> 00:44:33,380
young and we have the lunch break thank

00:44:31,480 --> 00:44:35,440
you

00:44:33,380 --> 00:44:35,440

YouTube URL: https://www.youtube.com/watch?v=jTZWY9ANPQg


