Title: OSDC 2017 | The evolution of the Container Network Interface by Casey Callendrello
Publication date: 2017-05-31
Playlist: OSDC 2017 | Open Source Data Center Conference
Description: 
	The Container Network Interface (CNI) is a simple specification for connecting containers to an arbitrary network. It promises interoperability between diverse networking technologies and container orchestration engines. Since its release two years ago, the CNI standard has grown in adoption. It is now a cross-industry effort, with contributors from CoreOS, RedHat, Google, Microsoft, and WeaveWorks, for example. CNI is used by the Kubernetes, CloudFoundry, and Mesos container orchestration engines. After a brief overview of the project, this talk will cover recent and coming developments in the CNI. As a specification, the CNI must balance the desire for new features with that of stability. Iâ€™ll cover the implications of that need for balance, design considerations, changes in the CNI spec, and the new use cases made possible.
Captions: 
	00:00:09,670 --> 00:00:17,990
so we will continue now

00:00:13,580 --> 00:00:20,180
stop we have Katie kevinturtle telling

00:00:17,990 --> 00:00:26,330
us a bit about the evolution of the

00:00:20,180 --> 00:00:29,180
container network it's a network a

00:00:26,330 --> 00:00:32,270
network interface yes sorry so back to

00:00:29,180 --> 00:00:34,850
the beginning side hey everybody I'm

00:00:32,270 --> 00:00:37,100
Casey Callen jellow I work here in the

00:00:34,850 --> 00:00:38,690
Berlin office for core OS although I'm

00:00:37,100 --> 00:00:42,019
from New Hampshire so pretty close to

00:00:38,690 --> 00:00:44,239
right where purple ideas kinda go for

00:00:42,019 --> 00:00:45,860
vacation but since I'm here in the

00:00:44,239 --> 00:00:47,540
Berlin office unfortunately means that I

00:00:45,860 --> 00:00:52,370
cannot blame this presentation on jet

00:00:47,540 --> 00:00:54,260
lag so Who am I I work on rocket so

00:00:52,370 --> 00:00:57,680
that's my primary role is maintaining

00:00:54,260 --> 00:00:59,420
the Linux Foundation sponsored chorus

00:00:57,680 --> 00:01:01,460
primarily developed container runs I

00:00:59,420 --> 00:01:02,839
mentioned known as Rocket so we have any

00:01:01,460 --> 00:01:05,269
rocket questions come up and talk to me

00:01:02,839 --> 00:01:06,650
after afterwards but today I'm not going

00:01:05,269 --> 00:01:08,960
to be talking about rocket I'm gonna be

00:01:06,650 --> 00:01:12,049
talking about the other primary tasks of

00:01:08,960 --> 00:01:14,210
mine which is maintaining the cni or the

00:01:12,049 --> 00:01:15,260
container networking interface I'm also

00:01:14,210 --> 00:01:17,660
a person on the Internet

00:01:15,260 --> 00:01:19,850
in case you haven't met someone on the

00:01:17,660 --> 00:01:21,890
internet before do you all know what an

00:01:19,850 --> 00:01:25,610
app party used to be this is a term from

00:01:21,890 --> 00:01:28,430
about 1985 it was a party thrown by

00:01:25,610 --> 00:01:29,810
people and the only thing in common by

00:01:28,430 --> 00:01:31,790
these people typically it like science

00:01:29,810 --> 00:01:33,650
fiction conventions was that you had an

00:01:31,790 --> 00:01:35,240
email address because that was such a

00:01:33,650 --> 00:01:37,970
distinguishing characteristic in the mid

00:01:35,240 --> 00:01:39,110
80s to early 90s that it was like a

00:01:37,970 --> 00:01:40,790
secret you could like rented a small

00:01:39,110 --> 00:01:41,870
room and only people who had email

00:01:40,790 --> 00:01:46,730
addresses were allowed to go to the

00:01:41,870 --> 00:01:48,890
party okay so today by the end of this

00:01:46,730 --> 00:01:51,110
presentation I want you to be on to

00:01:48,890 --> 00:01:54,320
understand the history and the future of

00:01:51,110 --> 00:01:55,700
the cni and I want you to be super super

00:01:54,320 --> 00:01:57,110
super excited about open source

00:01:55,700 --> 00:01:58,190
infrastructure projects and I want you

00:01:57,110 --> 00:02:01,250
to be really excited and want to

00:01:58,190 --> 00:02:02,450
participate that's not what the slide

00:02:01,250 --> 00:02:05,659
says at all but that's really what I

00:02:02,450 --> 00:02:09,019
want so what is the container networking

00:02:05,659 --> 00:02:10,940
interface in a single sentence it is a

00:02:09,019 --> 00:02:14,209
standard way of connecting your

00:02:10,940 --> 00:02:15,080
containers to your network and like why

00:02:14,209 --> 00:02:16,940
does this have to be so complicated

00:02:15,080 --> 00:02:18,680
right like why do we need a standard why

00:02:16,940 --> 00:02:20,299
do we need this body why am i here

00:02:18,680 --> 00:02:23,050
talking to you about this well like

00:02:20,299 --> 00:02:26,620
let's zoom in on what your network might

00:02:23,050 --> 00:02:28,480
eeee what platform is your network are

00:02:26,620 --> 00:02:32,950
using bare-metal your AWS a video s

00:02:28,480 --> 00:02:33,910
classic AWS VPC are you GCE are you how

00:02:32,950 --> 00:02:36,220
are you going to distribute your route

00:02:33,910 --> 00:02:38,110
so you can use BGP OSPF open flow or you

00:02:36,220 --> 00:02:41,200
can use some sort of questionable API

00:02:38,110 --> 00:02:42,610
provided by your cloud provider are you

00:02:41,200 --> 00:02:43,570
going to say screw it I'm not going to

00:02:42,610 --> 00:02:44,860
solve this problem at all I'm just going

00:02:43,570 --> 00:02:45,970
to hand it off to an overlay network and

00:02:44,860 --> 00:02:49,000
then solve it so now you have two

00:02:45,970 --> 00:02:51,190
problems you're going to use a flat

00:02:49,000 --> 00:02:52,810
layer to space do you have a specialized

00:02:51,190 --> 00:02:54,040
hardware has someone convinced a cisco

00:02:52,810 --> 00:02:56,020
convinced you to pay them all the money

00:02:54,040 --> 00:02:57,190
in the world all right and listing all

00:02:56,020 --> 00:02:59,440
these things like not to bore you with

00:02:57,190 --> 00:03:01,480
buzzwords but just to indicate that like

00:02:59,440 --> 00:03:03,430
yeah this is a complicated project right

00:03:01,480 --> 00:03:05,050
this is a complicated subject and it's

00:03:03,430 --> 00:03:07,930
an extremely diverse space with a lot of

00:03:05,050 --> 00:03:09,640
solutions and it needs to be carefully

00:03:07,930 --> 00:03:12,100
you need to make the right choices for

00:03:09,640 --> 00:03:13,570
your specific choices right everybody

00:03:12,100 --> 00:03:14,470
circumstances are different people have

00:03:13,570 --> 00:03:16,780
different performance characteristics

00:03:14,470 --> 00:03:19,120
different cost characteristics different

00:03:16,780 --> 00:03:20,860
latency characteristics and so you need

00:03:19,120 --> 00:03:22,720
to make like you're not absolved from

00:03:20,860 --> 00:03:24,720
making serious choices in this you can't

00:03:22,720 --> 00:03:28,750
just throw docker at it and call it done

00:03:24,720 --> 00:03:32,620
so let's go back to the CNI right

00:03:28,750 --> 00:03:35,140
what is the CNI it is a simple API for

00:03:32,620 --> 00:03:38,680
networking vendors to implement and it

00:03:35,140 --> 00:03:42,270
is a small Galang library or C++ library

00:03:38,680 --> 00:03:44,530
for runtime engines to implement and

00:03:42,270 --> 00:03:46,360
really from a philosophical perspective

00:03:44,530 --> 00:03:47,950
it's not an attempt to hide the

00:03:46,360 --> 00:03:49,720
complexity but it's an attempt to

00:03:47,950 --> 00:03:51,130
contain the complexity so it's an

00:03:49,720 --> 00:03:53,830
abstraction right that complexity is

00:03:51,130 --> 00:03:55,810
never gone it's just that maybe docker

00:03:53,830 --> 00:04:00,910
and rocket and communities don't need to

00:03:55,810 --> 00:04:02,800
think about it quite so much so also a

00:04:00,910 --> 00:04:04,600
little bit more politically what is the

00:04:02,800 --> 00:04:07,840
CNI like actually right it's a github

00:04:04,600 --> 00:04:09,700
endpoint it is a living active breathing

00:04:07,840 --> 00:04:11,830
open source project we have five

00:04:09,700 --> 00:04:13,570
maintainer x' there's 60 plus

00:04:11,830 --> 00:04:15,910
contributors at 10 plus different

00:04:13,570 --> 00:04:17,290
companies there are over 10 plug-in

00:04:15,910 --> 00:04:20,739
vendors and there are at least six

00:04:17,290 --> 00:04:23,710
runtimes that implement the CNI spec so

00:04:20,739 --> 00:04:27,220
CNI is probably a good choice for you if

00:04:23,710 --> 00:04:28,660
you want to put your things online how

00:04:27,220 --> 00:04:30,730
did we get here how did this all get

00:04:28,660 --> 00:04:33,190
started like why am I as a chorus person

00:04:30,730 --> 00:04:35,710
who doesn't have any servers talking to

00:04:33,190 --> 00:04:37,120
you about what's going on right so it

00:04:35,710 --> 00:04:38,980
all starts with rock

00:04:37,120 --> 00:04:40,930
why does it start with rocket well

00:04:38,980 --> 00:04:43,000
rocket is a demon 'less runtime and we

00:04:40,930 --> 00:04:44,919
have no seriously complicated database

00:04:43,000 --> 00:04:46,600
engine we didn't copy and paste at CD in

00:04:44,919 --> 00:04:49,210
your database engine into our into our

00:04:46,600 --> 00:04:50,830
runtime to our container runtime so it

00:04:49,210 --> 00:04:53,320
has no complicated data model and it has

00:04:50,830 --> 00:04:55,570
no online database right furthermore

00:04:53,320 --> 00:04:58,330
from the very beginnings of rocket we've

00:04:55,570 --> 00:05:00,310
always wanted to have clean integration

00:04:58,330 --> 00:05:02,560
points anywhere that we needed to have

00:05:00,310 --> 00:05:04,180
multiple choices or behavior so when in

00:05:02,560 --> 00:05:09,240
doubt if you want to do something create

00:05:04,180 --> 00:05:11,169
a spec they clean integration point so

00:05:09,240 --> 00:05:13,660
we have the same problem that everybody

00:05:11,169 --> 00:05:15,340
else has we need a simple way to bring a

00:05:13,660 --> 00:05:16,840
network namespace online right rocket

00:05:15,340 --> 00:05:20,260
creates in network namespace we want to

00:05:16,840 --> 00:05:21,880
bring it online but as you for those of

00:05:20,260 --> 00:05:23,440
you who have managed to find yourself in

00:05:21,880 --> 00:05:25,540
this particular corner because the world

00:05:23,440 --> 00:05:27,490
of computation handling namespaces and

00:05:25,540 --> 00:05:28,690
golang is really no fun at all there's

00:05:27,490 --> 00:05:30,729
like a lot of problems with or you have

00:05:28,690 --> 00:05:32,320
to wind up fighting the runtime all the

00:05:30,729 --> 00:05:35,229
time to get it to do what you want it to

00:05:32,320 --> 00:05:36,639
do so let's initialize and we're going

00:05:35,229 --> 00:05:37,960
to separate process right problem solves

00:05:36,639 --> 00:05:40,630
or it's like no more namespace problem

00:05:37,960 --> 00:05:42,700
just going get out of here and let's

00:05:40,630 --> 00:05:45,550
while we're at it let's define a clear

00:05:42,700 --> 00:05:47,200
and precise interface between the rocket

00:05:45,550 --> 00:05:48,570
runtime engine and this process that's

00:05:47,200 --> 00:05:51,930
going to do the networking for us

00:05:48,570 --> 00:05:54,610
do you smell standard I smell standard

00:05:51,930 --> 00:05:57,669
so this is what it looked like before it

00:05:54,610 --> 00:06:00,789
became the cni rocket is your process on

00:05:57,669 --> 00:06:04,150
top and this simple diagram CNI is just

00:06:00,789 --> 00:06:07,389
the inter process API between a couple

00:06:04,150 --> 00:06:09,880
small little maybe 250 line golang

00:06:07,389 --> 00:06:14,650
networking plugins that we wrote to be a

00:06:09,880 --> 00:06:16,840
part of rocket and then there was some

00:06:14,650 --> 00:06:18,669
use for this and it went to people

00:06:16,840 --> 00:06:20,470
people got sort of interested so we

00:06:18,669 --> 00:06:22,000
decided to split it off not as a rocket

00:06:20,470 --> 00:06:24,039
networking plugin but as a separate

00:06:22,000 --> 00:06:26,050
networking standard for other simplement

00:06:24,039 --> 00:06:28,690
because it was so simple so starting

00:06:26,050 --> 00:06:30,310
around April 2015 or so rocket was split

00:06:28,690 --> 00:06:33,729
off I'm sorry see and I was split off

00:06:30,310 --> 00:06:36,669
from rocket as a standalone standalone

00:06:33,729 --> 00:06:38,830
specification and the scope of the year

00:06:36,669 --> 00:06:41,380
so it saw some pretty serious adoption

00:06:38,830 --> 00:06:44,349
alright so 22 April 2015 it's separated

00:06:41,380 --> 00:06:47,560
from rocket October 2015 it replaces the

00:06:44,349 --> 00:06:49,240
kubernetes network plug-in API being

00:06:47,560 --> 00:06:50,440
kubernetes nothing ever truly dies there

00:06:49,240 --> 00:06:51,640
are still you

00:06:50,440 --> 00:06:53,110
still are running a kubernetes network

00:06:51,640 --> 00:06:55,720
plugin that executes the CNI network

00:06:53,110 --> 00:06:57,040
plugin but like in any case you know

00:06:55,720 --> 00:06:58,810
it's not recommended that anybody right

00:06:57,040 --> 00:07:00,520
any new kubernetes networking plugins if

00:06:58,810 --> 00:07:02,140
you want to get if you want to sell your

00:07:00,520 --> 00:07:03,640
networking solution you should write the

00:07:02,140 --> 00:07:05,590
CNI plugin it's the recommended

00:07:03,640 --> 00:07:08,440
it's the recommended direction forward

00:07:05,590 --> 00:07:10,090
by this by the kubernetes authors and

00:07:08,440 --> 00:07:12,550
now maze OS the other container runtime

00:07:10,090 --> 00:07:16,150
engine that we all love is supporting

00:07:12,550 --> 00:07:17,530
CNI somewhere around May 2016 below I

00:07:16,150 --> 00:07:18,790
know it's going to be hard to see for

00:07:17,530 --> 00:07:20,680
some of you it's not that important it's

00:07:18,790 --> 00:07:22,720
just the github contribute contribution

00:07:20,680 --> 00:07:24,310
graphs to demonstrate yeah it's like

00:07:22,720 --> 00:07:26,620
with the exception of like Christmastime

00:07:24,310 --> 00:07:28,300
in New Year's it's a pretty busy project

00:07:26,620 --> 00:07:30,850
we have a lot of contributions and it's

00:07:28,300 --> 00:07:37,780
an active-active project for entirely

00:07:30,850 --> 00:07:39,670
volunteer-run so who uses if you which

00:07:37,780 --> 00:07:41,260
vendors actually who actually uses CNI

00:07:39,670 --> 00:07:43,840
in the world today right so if you're

00:07:41,260 --> 00:07:45,580
using any of these packaged see a

00:07:43,840 --> 00:07:47,440
packaged kubernetes products you are

00:07:45,580 --> 00:07:49,210
using CNI by default so that's openshift

00:07:47,440 --> 00:07:51,130
canonical kubernetes tecktonik my core

00:07:49,210 --> 00:07:52,750
OS furthermore if you're just running

00:07:51,130 --> 00:07:54,580
vanilla Creneti and you're using the

00:07:52,750 --> 00:07:56,800
default kubernetes networking plugin

00:07:54,580 --> 00:07:58,990
called cube net it's actually just CNI

00:07:56,800 --> 00:08:01,300
it's just a basically a static C and I

00:07:58,990 --> 00:08:02,740
can say with a little bit of magic but

00:08:01,300 --> 00:08:04,180
if that doesn't convince you like here's

00:08:02,740 --> 00:08:06,910
the science right here this is a graph

00:08:04,180 --> 00:08:08,260
of github stars over time and this is

00:08:06,910 --> 00:08:09,430
this is the sort of graphs that like

00:08:08,260 --> 00:08:11,050
every startup founder would be

00:08:09,430 --> 00:08:12,460
absolutely delighted to have it's

00:08:11,050 --> 00:08:16,780
obviously the most important graphs in

00:08:12,460 --> 00:08:18,520
this whole the soul of presentation so

00:08:16,780 --> 00:08:20,260
okay that's enough sort of introduction

00:08:18,520 --> 00:08:22,120
like let's that's it gets down and dirty

00:08:20,260 --> 00:08:23,770
into the technical details this is going

00:08:22,120 --> 00:08:27,370
to go really quickly because it's for

00:08:23,770 --> 00:08:29,530
CNI is intentionally really simple like

00:08:27,370 --> 00:08:31,360
a little vocabulary right C&I has two

00:08:29,530 --> 00:08:34,240
actors at any given point in time it has

00:08:31,360 --> 00:08:36,520
a runtime and it has a plugin

00:08:34,240 --> 00:08:38,200
there's the config for the runtime some

00:08:36,520 --> 00:08:40,960
sort of arbitrary runtime configuration

00:08:38,200 --> 00:08:42,370
which essentially really consists of the

00:08:40,960 --> 00:08:44,620
network namespace that I want to bring

00:08:42,370 --> 00:08:46,870
up right now and a few other small

00:08:44,620 --> 00:08:50,470
pieces of bookkeeping information there

00:08:46,870 --> 00:08:53,740
is static network plug-in configuration

00:08:50,470 --> 00:08:55,750
so then for example if you want to use

00:08:53,740 --> 00:08:57,310
flannel like the destination of the

00:08:55,750 --> 00:08:58,810
final route distribution server or

00:08:57,310 --> 00:09:01,210
anything that's a really static to your

00:08:58,810 --> 00:09:03,580
specific network then there is the

00:09:01,210 --> 00:09:04,240
plug-in itself and the only other object

00:09:03,580 --> 00:09:07,390
in this whole

00:09:04,240 --> 00:09:09,790
object model is the result itself the

00:09:07,390 --> 00:09:11,500
result returns pretty much what you

00:09:09,790 --> 00:09:13,209
think it would need it's everything you

00:09:11,500 --> 00:09:15,339
need to bring a container online so

00:09:13,209 --> 00:09:17,890
that's the interfaces that were created

00:09:15,339 --> 00:09:21,370
the addresses that were assigned to that

00:09:17,890 --> 00:09:23,740
interface the routes that the routing

00:09:21,370 --> 00:09:25,930
table contains or should contain based

00:09:23,740 --> 00:09:28,120
on how based on whatever ordering you

00:09:25,930 --> 00:09:30,990
choose to do it in and optionally the

00:09:28,120 --> 00:09:33,850
DNS resolver information if you're using

00:09:30,990 --> 00:09:34,660
the if you're using DHCP and CNI which

00:09:33,850 --> 00:09:37,240
I'll talk about later

00:09:34,660 --> 00:09:40,870
you know DHCP also tells you all of your

00:09:37,240 --> 00:09:44,230
DNS configuration information so a to

00:09:40,870 --> 00:09:46,060
some sort of shorten it you execute a

00:09:44,230 --> 00:09:48,399
plug in you get that result the result

00:09:46,060 --> 00:09:50,830
is one or more interfaces one or more

00:09:48,399 --> 00:09:53,470
IPS maybe some routes maybe some DNS

00:09:50,830 --> 00:09:57,610
information and your interfaces up in

00:09:53,470 --> 00:10:00,339
your container to apply that vocabulary

00:09:57,610 --> 00:10:01,170
to the sort of existing diagram that

00:10:00,339 --> 00:10:04,480
you've already seen

00:10:01,170 --> 00:10:07,240
you have your runtime it has the gray

00:10:04,480 --> 00:10:08,860
box it represents the runtime or the

00:10:07,240 --> 00:10:11,649
dynamic configuration information in

00:10:08,860 --> 00:10:14,620
particular invocation of CNI and there's

00:10:11,649 --> 00:10:16,899
a configuration file lib CNI or whatever

00:10:14,620 --> 00:10:19,089
your runtime glue code is there's no

00:10:16,899 --> 00:10:21,279
separate live CNI process but let seen

00:10:19,089 --> 00:10:24,010
eyes a small golang library let's see ni

00:10:21,279 --> 00:10:26,410
mediates the interaction between the

00:10:24,010 --> 00:10:28,120
runtime and one or more plugins that you

00:10:26,410 --> 00:10:38,500
want to execute inside your network

00:10:28,120 --> 00:10:39,880
namespace so I really always debate

00:10:38,500 --> 00:10:41,500
whether or not to show code and

00:10:39,880 --> 00:10:45,520
demonstrations because it's always so

00:10:41,500 --> 00:10:47,320
hard to read but CNI configuration can

00:10:45,520 --> 00:10:49,920
be so simple that I'm going to do it and

00:10:47,320 --> 00:10:52,870
I'm sorry if this lines up going badly

00:10:49,920 --> 00:10:55,390
so this is valid JSON I have to indent

00:10:52,870 --> 00:10:57,579
it sort of funny to make it fit but this

00:10:55,390 --> 00:10:59,050
is a valid if somewhat bare-bones CNI

00:10:57,579 --> 00:11:02,070
configuration file and I could copy and

00:10:59,050 --> 00:11:05,680
paste this and run it it has all of the

00:11:02,070 --> 00:11:07,630
minimal JSON Keys necessary to execute

00:11:05,680 --> 00:11:09,310
the CN to bring it network up and attach

00:11:07,630 --> 00:11:14,140
it to CI we're gonna see an I machine up

00:11:09,310 --> 00:11:17,170
so the three required properties of the

00:11:14,140 --> 00:11:17,680
CNI Network are a name this is an

00:11:17,170 --> 00:11:21,520
important

00:11:17,680 --> 00:11:24,190
distinction because the plugin is not

00:11:21,520 --> 00:11:26,920
the network you the plugin is the

00:11:24,190 --> 00:11:28,990
implementation of the network for so if

00:11:26,920 --> 00:11:30,310
you have bridge you can have ten

00:11:28,990 --> 00:11:31,960
different bridges on your machine and I

00:11:30,310 --> 00:11:33,790
all use the bridge plug-in but they're

00:11:31,960 --> 00:11:36,160
gonna be different networks so we add

00:11:33,790 --> 00:11:37,779
name as a bit of a separate distinction

00:11:36,160 --> 00:11:39,250
or a piece of abstraction because that's

00:11:37,779 --> 00:11:41,320
really what the administrator wants to

00:11:39,250 --> 00:11:42,940
do they don't care strictly speaking

00:11:41,320 --> 00:11:44,500
that the network is connect that your

00:11:42,940 --> 00:11:47,350
plug connector is connected to a bridge

00:11:44,500 --> 00:11:49,990
the network administrator cares that I

00:11:47,350 --> 00:11:51,190
have access to the backend network

00:11:49,990 --> 00:11:52,540
alright access to the front-end network

00:11:51,190 --> 00:11:54,459
I have access to the database network or

00:11:52,540 --> 00:11:56,350
whatever that's that the name is what

00:11:54,459 --> 00:11:58,839
matters not the underlying technology

00:11:56,350 --> 00:12:01,029
behind it however we do need to know

00:11:58,839 --> 00:12:02,680
which plug-in to execute so that's the

00:12:01,029 --> 00:12:05,860
second parameter right there which is

00:12:02,680 --> 00:12:07,690
pipe incidentally if I could go back to

00:12:05,860 --> 00:12:09,970
those early days and change one thing I

00:12:07,690 --> 00:12:12,130
would rename this type because it's

00:12:09,970 --> 00:12:14,230
absolutely confusing right type bridge

00:12:12,130 --> 00:12:16,540
is so definitive like this is a bridge

00:12:14,230 --> 00:12:18,160
no it's just one particular

00:12:16,540 --> 00:12:22,089
implementation of a plugin that happens

00:12:18,160 --> 00:12:24,430
to be called bridge and so in the cd-i

00:12:22,089 --> 00:12:25,959
or the container device interface

00:12:24,430 --> 00:12:27,760
they took this they took everything copy

00:12:25,959 --> 00:12:29,950
pasted our code and renamed type to

00:12:27,760 --> 00:12:33,400
plug-in name and I am really glad that

00:12:29,950 --> 00:12:36,370
they did that so but we say Type four is

00:12:33,400 --> 00:12:38,650
a fuzzy it actually means bridge it

00:12:36,370 --> 00:12:40,990
actually means a plug-in name and then

00:12:38,650 --> 00:12:43,540
the third block which is not strictly

00:12:40,990 --> 00:12:48,010
required but essentially always included

00:12:43,540 --> 00:12:50,140
is an eye pam block and the host local

00:12:48,010 --> 00:12:51,760
plugin right here is a plugin that's

00:12:50,140 --> 00:12:54,070
just going to allocate out of a random

00:12:51,760 --> 00:12:55,570
or out of a specified subnet allocate

00:12:54,070 --> 00:12:57,160
randomly it's not going to know anything

00:12:55,570 --> 00:12:58,660
about anything it's going to just make

00:12:57,160 --> 00:13:01,180
sure that these IPS are unique on your

00:12:58,660 --> 00:13:03,730
hosts so it's the simplest possible IBM

00:13:01,180 --> 00:13:05,980
plugin but IBM is part of the CNI

00:13:03,730 --> 00:13:07,930
invocation and I'll talk about why

00:13:05,980 --> 00:13:10,600
that's the case it's sort of subtle but

00:13:07,930 --> 00:13:13,420
iBM has to be part of a network or part

00:13:10,600 --> 00:13:15,220
of an interfaces configuration i Pam

00:13:13,420 --> 00:13:16,810
also uses type remember when I say type

00:13:15,220 --> 00:13:21,339
I really mean plug-in name because host

00:13:16,810 --> 00:13:23,170
local is also binary so how might we

00:13:21,339 --> 00:13:25,029
actually run that configuration well we

00:13:23,170 --> 00:13:27,160
might run right type rocket run net

00:13:25,029 --> 00:13:29,350
equals my net remember my net is the

00:13:27,160 --> 00:13:31,360
name of the network from before so

00:13:29,350 --> 00:13:32,920
rocket run net equals my net assuming

00:13:31,360 --> 00:13:34,720
you've put this configuration file in

00:13:32,920 --> 00:13:37,329
one of the directories that CNI scans

00:13:34,720 --> 00:13:39,279
for all configuration files or you can

00:13:37,329 --> 00:13:41,799
use a cubelet with Network plug-in equal

00:13:39,279 --> 00:13:43,689
CNI cubelet will use whichever network

00:13:41,799 --> 00:13:45,730
configuration file is alphabetically

00:13:43,689 --> 00:13:47,949
first in one directory of its choosing

00:13:45,730 --> 00:13:49,480
and if that network configuration file

00:13:47,949 --> 00:13:53,319
changes it will instantly reload it

00:13:49,480 --> 00:13:54,910
yay but that's too complicated or

00:13:53,319 --> 00:13:56,379
actually that's not complicated enough

00:13:54,910 --> 00:13:58,059
so like we're going to make a CNI

00:13:56,379 --> 00:13:59,829
compliant container runtime engine in

00:13:58,059 --> 00:14:02,410
bash using commands you are actually

00:13:59,829 --> 00:14:05,079
welcome to follow along if you manage to

00:14:02,410 --> 00:14:08,610
type this faster than you manage to type

00:14:05,079 --> 00:14:11,230
this faster than then I showed it up but

00:14:08,610 --> 00:14:13,269
so first let's like make a new network

00:14:11,230 --> 00:14:15,220
namespace have you guys ever seen this

00:14:13,269 --> 00:14:16,420
do you know but the IP Ness command

00:14:15,220 --> 00:14:18,939
how many raise your hand if you've used

00:14:16,420 --> 00:14:21,489
this before yes we have some crazy Linux

00:14:18,939 --> 00:14:23,860
hackers IP Ness new creates a new

00:14:21,489 --> 00:14:24,850
network namespace so like you have a

00:14:23,860 --> 00:14:25,989
container runtime engine on your

00:14:24,850 --> 00:14:27,360
computer already like you don't need to

00:14:25,989 --> 00:14:31,839
use docker you don't need to use rocket

00:14:27,360 --> 00:14:33,429
you just need to use IP command so we've

00:14:31,839 --> 00:14:34,749
created a new network namespace we gave

00:14:33,429 --> 00:14:37,029
it a name which means that it's now

00:14:34,749 --> 00:14:39,100
permanent it's not it's not transient

00:14:37,029 --> 00:14:40,179
related to a single process and we're

00:14:39,100 --> 00:14:41,319
going to run a command in it and they

00:14:40,179 --> 00:14:44,470
come in we're going to execute inside

00:14:41,319 --> 00:14:46,569
our container is bash so we run bin bash

00:14:44,470 --> 00:14:47,919
we run IP link now inside this namespace

00:14:46,569 --> 00:14:51,579
and what do we see we have no network

00:14:47,919 --> 00:14:52,989
interfaces IP very nicely sets up a

00:14:51,579 --> 00:14:55,329
loopback interface for us but that's

00:14:52,989 --> 00:14:56,949
actually not necessary it's just a

00:14:55,329 --> 00:15:01,389
little bit of glue code that IP itself

00:14:56,949 --> 00:15:04,600
does so in a second shell in the root

00:15:01,389 --> 00:15:07,149
namespace we are going to be a CNI

00:15:04,600 --> 00:15:09,489
compliant container runtime engine by

00:15:07,149 --> 00:15:11,949
executing the cni binary API and the CNI

00:15:09,489 --> 00:15:14,619
binary API is really dumb which is

00:15:11,949 --> 00:15:17,529
awesome all of the information that is

00:15:14,619 --> 00:15:20,829
dynamic or runtime specific it's passed

00:15:17,529 --> 00:15:23,649
via five environment variables there is

00:15:20,829 --> 00:15:25,629
the first is the cni command you now has

00:15:23,649 --> 00:15:25,989
three commands one of which doesn't

00:15:25,629 --> 00:15:28,089
matter

00:15:25,989 --> 00:15:30,100
so it has add and delete in this case we

00:15:28,089 --> 00:15:32,949
want to add we need to pass a container

00:15:30,100 --> 00:15:35,889
ID which is used essentially really only

00:15:32,949 --> 00:15:37,540
for deletion although you could use it

00:15:35,889 --> 00:15:39,939
for any sort of metadata that you liked

00:15:37,540 --> 00:15:41,529
if you wanted to do ipam based on a CNI

00:15:39,939 --> 00:15:41,919
container ID you absolutely could do

00:15:41,529 --> 00:15:44,120
that

00:15:41,919 --> 00:15:46,279
that is how some more

00:15:44,120 --> 00:15:48,980
advanced kubernetes plugins work they

00:15:46,279 --> 00:15:51,320
will actually look up the cni container

00:15:48,980 --> 00:15:54,040
ID using the current IDs api and return

00:15:51,320 --> 00:15:56,450
item information so it's horrible circle

00:15:54,040 --> 00:15:58,940
you need to pass it the network

00:15:56,450 --> 00:16:01,850
namespace that you want to have the CNI

00:15:58,940 --> 00:16:04,040
complete the C&I plugin initialize and

00:16:01,850 --> 00:16:06,290
you need to pass it the name of the

00:16:04,040 --> 00:16:08,600
interface that at the end of execution

00:16:06,290 --> 00:16:11,360
should be created right so the runtime

00:16:08,600 --> 00:16:12,830
is responsible for deciding the name of

00:16:11,360 --> 00:16:14,839
the interface which means the runtime is

00:16:12,830 --> 00:16:17,900
responsible if you have multiple Network

00:16:14,839 --> 00:16:19,370
for distributing multiple interfaces and

00:16:17,900 --> 00:16:22,190
understanding which ones it actually

00:16:19,370 --> 00:16:23,240
expected you also need to pass this is

00:16:22,190 --> 00:16:25,850
going to be a little funny but you need

00:16:23,240 --> 00:16:28,820
to pass the list of directories where

00:16:25,850 --> 00:16:30,680
CNI plugins live and the reason you need

00:16:28,820 --> 00:16:31,130
to do this is because is because of I

00:16:30,680 --> 00:16:33,440
Pam

00:16:31,130 --> 00:16:36,050
get into that a bit finally I execute

00:16:33,440 --> 00:16:38,480
the actual plugin and I pass on standard

00:16:36,050 --> 00:16:41,000
in that configuration file that I had

00:16:38,480 --> 00:16:44,870
like a if you der and I have a network

00:16:41,000 --> 00:16:46,160
up I'm gonna try a quick demo if it

00:16:44,870 --> 00:16:48,860
doesn't work I'm not going to be a

00:16:46,160 --> 00:16:50,779
particularly upset but I don't have

00:16:48,860 --> 00:16:58,220
display mirroring on this is impossible

00:16:50,779 --> 00:17:05,510
to read and this is important I was just

00:16:58,220 --> 00:17:07,730
going to run this command look so we can

00:17:05,510 --> 00:17:10,309
see now inside that namespace I run an

00:17:07,730 --> 00:17:13,550
IP link I have two interfaces and I run

00:17:10,309 --> 00:17:18,290
IP address oh and I have an IP address

00:17:13,550 --> 00:17:21,280
that just so we can check I've expected

00:17:18,290 --> 00:17:24,620
it to be 10.40 2.0 to zero and

00:17:21,280 --> 00:17:29,270
successfully it's somewhere in that

00:17:24,620 --> 00:17:30,559
network range yes so does anyone have

00:17:29,270 --> 00:17:32,179
any questions so far are you guys all

00:17:30,559 --> 00:17:34,520
pretty much understanding what real gone

00:17:32,179 --> 00:17:36,380
here we added a network to a bridge if I

00:17:34,520 --> 00:17:39,620
wanted to make a ping the world and I

00:17:36,380 --> 00:17:41,780
might even get access to it so let's

00:17:39,620 --> 00:17:44,510
like talk about what just happened there

00:17:41,780 --> 00:17:46,520
right the cni spec has three commands

00:17:44,510 --> 00:17:50,000
that a plug-in must implement it has to

00:17:46,520 --> 00:17:51,860
implement add a delete and version nice

00:17:50,000 --> 00:17:54,440
implement version because we have some

00:17:51,860 --> 00:17:56,510
type changes as the cni spec has evolved

00:17:54,440 --> 00:17:57,500
and we need to know which types that we

00:17:56,510 --> 00:17:57,980
need to be able to convert into

00:17:57,500 --> 00:17:59,600
whichever

00:17:57,980 --> 00:18:03,500
that click a particular plugin is going

00:17:59,600 --> 00:18:05,030
to expect the static network

00:18:03,500 --> 00:18:06,890
configuration is going to be passed on

00:18:05,030 --> 00:18:08,470
standard in and then I'm going to later

00:18:06,890 --> 00:18:11,330
talk about why this is no longer true

00:18:08,470 --> 00:18:13,429
and the results come out on standard out

00:18:11,330 --> 00:18:16,130
and the runtime parameters are all

00:18:13,429 --> 00:18:17,870
passed via ends there's one runtime

00:18:16,130 --> 00:18:21,260
parameter that I omitted in the previous

00:18:17,870 --> 00:18:23,390
example which is this CNI args runtime

00:18:21,260 --> 00:18:25,610
which is an arbitrary freeform text

00:18:23,390 --> 00:18:26,540
field that has no contracts other than

00:18:25,610 --> 00:18:28,490
that it is passed

00:18:26,540 --> 00:18:30,440
so the runtime can set it to do anything

00:18:28,490 --> 00:18:32,240
and the plugin can do anything it wants

00:18:30,440 --> 00:18:34,669
with it and you as the administrator

00:18:32,240 --> 00:18:36,140
need to be trusted to put plugins

00:18:34,669 --> 00:18:38,150
together that do something that you want

00:18:36,140 --> 00:18:39,799
to do right so this is hands-off the

00:18:38,150 --> 00:18:41,870
spec says absolutely I don't care do

00:18:39,799 --> 00:18:44,570
whatever you want and hopefully it works

00:18:41,870 --> 00:18:50,600
so that's it that's the whole spectra so

00:18:44,570 --> 00:18:52,640
easy this is awesome for golang runtimes

00:18:50,600 --> 00:18:57,020
which is most container runtime engines

00:18:52,640 --> 00:18:59,450
except for mezzos lid CNI is a library

00:18:57,020 --> 00:19:02,270
provided by us the CNI maintainer x' and

00:18:59,450 --> 00:19:04,429
it implements most of the boilerplate of

00:19:02,270 --> 00:19:06,350
the cni spec which is a little bit more

00:19:04,429 --> 00:19:08,360
complicated in newer versions of the

00:19:06,350 --> 00:19:11,240
specification

00:19:08,360 --> 00:19:12,890
another important thing for long-term

00:19:11,240 --> 00:19:15,410
stability of the spec is that the

00:19:12,890 --> 00:19:17,240
response types are versioned so as the

00:19:15,410 --> 00:19:19,340
cni spec has evolved we've added more

00:19:17,240 --> 00:19:22,790
and we've changed the response type in a

00:19:19,340 --> 00:19:24,169
non semver compatible way which is to

00:19:22,790 --> 00:19:26,179
say that the bees if the structure has

00:19:24,169 --> 00:19:27,590
changed and it is no longer applicable

00:19:26,179 --> 00:19:29,690
you couldn't just use it in an older

00:19:27,590 --> 00:19:32,299
runtime however there is a lossy

00:19:29,690 --> 00:19:35,299
conversion between between versions so

00:19:32,299 --> 00:19:36,950
if you use Lib C and I and your plugins

00:19:35,299 --> 00:19:38,750
implement the version then we will

00:19:36,950 --> 00:19:39,860
convert automatically and you it more or

00:19:38,750 --> 00:19:45,130
less should just work without any

00:19:39,860 --> 00:19:47,929
serious worries I want to jump in

00:19:45,130 --> 00:19:51,020
briefly unto why I Pam is a bit of a

00:19:47,929 --> 00:19:54,650
special case and why we had to pass CNI

00:19:51,020 --> 00:19:55,940
path in the execution time so IPM is

00:19:54,650 --> 00:19:57,049
interesting because it needs to be a

00:19:55,940 --> 00:19:58,700
separate plugin right it needs to be

00:19:57,049 --> 00:20:00,350
separate plugin because we don't want to

00:19:58,700 --> 00:20:02,809
implement IPAM in every single interface

00:20:00,350 --> 00:20:04,280
right bridge virtual Vee flannel

00:20:02,809 --> 00:20:06,260
whatever they don't need to also have a

00:20:04,280 --> 00:20:08,270
DHCP client embedded in the actual

00:20:06,260 --> 00:20:09,440
plug-in anytime we have common behavior

00:20:08,270 --> 00:20:11,059
that when you don't want to abstract out

00:20:09,440 --> 00:20:11,549
we should write an interface for it

00:20:11,059 --> 00:20:13,019
right we

00:20:11,549 --> 00:20:14,549
do you have an interface we have CNI we

00:20:13,019 --> 00:20:16,889
have a way of executing a binary in

00:20:14,549 --> 00:20:20,220
saying here please add or please delete

00:20:16,889 --> 00:20:22,889
so I Pam plugins implement the cni api

00:20:20,220 --> 00:20:24,899
which means that each CNI plugin needs

00:20:22,889 --> 00:20:27,570
to be able to find where the IPAN

00:20:24,899 --> 00:20:29,309
plugins live which means that all CNI

00:20:27,570 --> 00:20:31,409
plugins are also CNI compliant runtimes

00:20:29,309 --> 00:20:33,899
which is a little insane but what you're

00:20:31,409 --> 00:20:36,769
going to do more specifically they use

00:20:33,899 --> 00:20:38,759
the cni api to discover and do execution

00:20:36,769 --> 00:20:41,309
there's a bit of an interesting case

00:20:38,759 --> 00:20:43,499
though about ordering the reason why you

00:20:41,309 --> 00:20:46,409
don't just execute IPAM directly first

00:20:43,499 --> 00:20:49,679
is that the interface needs to be up if

00:20:46,409 --> 00:20:51,029
you want to use DHCP if you are a using

00:20:49,679 --> 00:20:53,070
an interface where somehow the interface

00:20:51,029 --> 00:20:55,080
is connected directly to your land and

00:20:53,070 --> 00:20:57,359
you want to do a DHCP request obviously

00:20:55,080 --> 00:20:58,859
that interface needs to exist but then

00:20:57,359 --> 00:21:00,690
you need to take the IPS and apply them

00:20:58,859 --> 00:21:02,940
back to the interface so the ordering is

00:21:00,690 --> 00:21:05,419
the plug-in executes the plugin creates

00:21:02,940 --> 00:21:08,129
the interface the plugin execute the

00:21:05,419 --> 00:21:10,649
IPAN plugin the ipam plugin makes the

00:21:08,129 --> 00:21:12,749
request for DHCP in this case returns

00:21:10,649 --> 00:21:13,739
the result the original plug-in consumes

00:21:12,749 --> 00:21:15,539
the resultant applies it to the

00:21:13,739 --> 00:21:17,999
interface and then the original plugin

00:21:15,539 --> 00:21:19,109
returns back to the runtime I know it's

00:21:17,999 --> 00:21:20,249
a little complicated but you don't need

00:21:19,109 --> 00:21:22,230
to worry about it unless you're doing

00:21:20,249 --> 00:21:24,600
plug-in development yourself it's just

00:21:22,230 --> 00:21:27,269
an indication of like why the spec does

00:21:24,600 --> 00:21:33,960
need to look a little silly when it

00:21:27,269 --> 00:21:35,549
comes to IP IP allocation so to make

00:21:33,960 --> 00:21:37,200
this a little bit less abstract as the

00:21:35,549 --> 00:21:38,190
spec vendor like I don't actually run

00:21:37,200 --> 00:21:39,419
this set off and I don't have any

00:21:38,190 --> 00:21:40,919
servers that I run but I want to talk

00:21:39,419 --> 00:21:42,389
briefly about some of the common use

00:21:40,919 --> 00:21:44,789
cases for people who are bringing their

00:21:42,389 --> 00:21:47,279
containers online or else you know what

00:21:44,789 --> 00:21:50,730
it's just a little too abstract what

00:21:47,279 --> 00:21:52,559
plugins exist the C&I maintainer is

00:21:50,730 --> 00:21:54,960
maintain some pretty basic plugins for

00:21:52,559 --> 00:21:58,139
standard container usage so let's bridge

00:21:54,960 --> 00:22:00,059
and Vees we also maintain plugins that

00:21:58,139 --> 00:22:02,070
do sort of muxing or bring the container

00:22:00,059 --> 00:22:04,679
directly on to your local network so

00:22:02,070 --> 00:22:07,289
that's mac VLAN and IP VLAN plugins

00:22:04,679 --> 00:22:08,549
these just parcel out a separate sub

00:22:07,289 --> 00:22:10,879
interface on an existing physical

00:22:08,549 --> 00:22:16,009
interface and assign it to the container

00:22:10,879 --> 00:22:16,009

YouTube URL: https://www.youtube.com/watch?v=10uxfzTk2AM


