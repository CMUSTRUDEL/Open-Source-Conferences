Title: OSDC 2017 | Building Security Into Your Workflow with InSpec by Mandi Walls
Publication date: 2017-06-02
Playlist: OSDC 2017 | Open Source Data Center Conference
Description: 
	InSpec is an open source testing framework for infrastructure with a human- and machine-readable language for specifying compliance, security, and policy requirements. Using a combination of command-line and remote-execution tools, InSpec can help you keep your infrastructure aligned with security and compliance guidelines on an ongoing basis, rather than waiting for and then remediating from arduous annual audits. InSpecâ€™s flexibility makes it a key tool choice for incorporating security into a complete continuous delivery workflow, reducing the risk of new features and releases breaking established host-based security guidelines.
Captions: 
	00:00:09,770 --> 00:00:16,970
welcome back so next target last talk

00:00:13,790 --> 00:00:18,349
before the lunch break here if many was

00:00:16,970 --> 00:00:20,480
talking about building security in your

00:00:18,349 --> 00:00:22,310
workflow with the inspect so thanks for

00:00:20,480 --> 00:00:29,720
coming over and a warm welcome to many

00:00:22,310 --> 00:00:33,170
please okay yeah the the last slot

00:00:29,720 --> 00:00:34,489
before lunch never the good slot right

00:00:33,170 --> 00:00:36,620
although the first slot after lunch

00:00:34,489 --> 00:00:40,070
everybody's asleep so you know either

00:00:36,620 --> 00:00:43,550
side of lunches it's tough but Gavin

00:00:40,070 --> 00:00:45,739
talk today about inspect Who am I

00:00:43,550 --> 00:00:47,780
my name is Randy walls I am currently

00:00:45,739 --> 00:00:51,379
that technical community manager for

00:00:47,780 --> 00:00:55,070
chef I've been with chef five and a half

00:00:51,379 --> 00:00:57,320
years so some days it feels like not

00:00:55,070 --> 00:01:00,079
that long and other days you feel every

00:00:57,320 --> 00:01:04,059
single day if you'd like to shout at me

00:01:00,079 --> 00:01:07,670
later my email address is there and I am

00:01:04,059 --> 00:01:09,680
Ln x CH k on just about every social

00:01:07,670 --> 00:01:13,159
media out there except snapchat because

00:01:09,680 --> 00:01:18,079
I'm Way too old for that silliness so

00:01:13,159 --> 00:01:21,020
chef we started out in configuration

00:01:18,079 --> 00:01:23,450
management and system automation we're

00:01:21,020 --> 00:01:26,180
based in Seattle in the u.s. we also

00:01:23,450 --> 00:01:27,740
have offices in San Francisco London and

00:01:26,180 --> 00:01:30,020
we actually have a small office here in

00:01:27,740 --> 00:01:32,439
Berlin ironically enough those guys are

00:01:30,020 --> 00:01:34,130
actually giving a talk in London today

00:01:32,439 --> 00:01:37,219
planning is tough

00:01:34,130 --> 00:01:39,259
right so yeah I'm actually based in

00:01:37,219 --> 00:01:41,479
Berlin or in London I moved over a

00:01:39,259 --> 00:01:46,430
couple of years ago as we were launching

00:01:41,479 --> 00:01:48,560
over here sorry about all that air there

00:01:46,430 --> 00:01:51,710
okay so what are we talking about what

00:01:48,560 --> 00:01:54,170
do we care about here chef over the past

00:01:51,710 --> 00:01:55,310
five and a half six seven years we've

00:01:54,170 --> 00:01:58,700
been working with a lot of customers a

00:01:55,310 --> 00:02:00,890
lot of community members on speeding up

00:01:58,700 --> 00:02:03,920
their IT processes making things more

00:02:00,890 --> 00:02:05,929
fast more efficient and doing that

00:02:03,920 --> 00:02:07,570
through system automation has our core

00:02:05,929 --> 00:02:09,770
product that's how we got started

00:02:07,570 --> 00:02:12,500
over time what we've learned is that

00:02:09,770 --> 00:02:14,540
increasingly every business in the 21st

00:02:12,500 --> 00:02:17,030
century is moving towards being a

00:02:14,540 --> 00:02:20,120
software business so last year at chef

00:02:17,030 --> 00:02:22,010
comp this year's is next week in Austin

00:02:20,120 --> 00:02:26,230
we had a really good keynote talk from

00:02:22,010 --> 00:02:28,489
the CIO of Alaska Airlines so Alaska

00:02:26,230 --> 00:02:30,650
started out as a regional airline in the

00:02:28,489 --> 00:02:33,500
United States they're based near us in

00:02:30,650 --> 00:02:34,940
Seattle they recently purchased Virgin

00:02:33,500 --> 00:02:38,569
America we may have heard from them

00:02:34,940 --> 00:02:41,209
there they are increasingly looking to

00:02:38,569 --> 00:02:43,459
looking to get more efficiency more

00:02:41,209 --> 00:02:46,730
flexibility better customer service out

00:02:43,459 --> 00:02:48,680
of technology rather than out of these

00:02:46,730 --> 00:02:49,970
airplanes that they spend millions and

00:02:48,680 --> 00:02:52,220
millions of dollars on so they have

00:02:49,970 --> 00:02:54,530
these large capital expenditures plus

00:02:52,220 --> 00:02:56,239
all this regulation and there's all

00:02:54,530 --> 00:02:58,100
kinds of politics involved in getting

00:02:56,239 --> 00:03:01,220
births at US airports and all those

00:02:58,100 --> 00:03:03,200
other goofy stuff all that aside where

00:03:01,220 --> 00:03:04,849
they're getting efficiency and better

00:03:03,200 --> 00:03:08,030
customer service and all these other

00:03:04,849 --> 00:03:11,060
good things is out of technology so what

00:03:08,030 --> 00:03:14,000
he said was you know they expect to be a

00:03:11,060 --> 00:03:16,370
software company with airplanes right so

00:03:14,000 --> 00:03:18,920
so much of their current and future

00:03:16,370 --> 00:03:23,239
business and improvements and things

00:03:18,920 --> 00:03:24,950
come from software so chef takes a look

00:03:23,239 --> 00:03:27,829
at this we have a number of product

00:03:24,950 --> 00:03:31,430
lines that we're working on if you're

00:03:27,829 --> 00:03:34,010
not familiar with us that's fine we have

00:03:31,430 --> 00:03:35,660
our core chef project which was

00:03:34,010 --> 00:03:38,660
configuration management systems

00:03:35,660 --> 00:03:42,440
automation about nine years old now so

00:03:38,660 --> 00:03:45,799
that space is mature we could say in a

00:03:42,440 --> 00:03:48,950
large amount of ways and is evolving

00:03:45,799 --> 00:03:51,980
into how things look for the future

00:03:48,950 --> 00:03:53,780
whether we're looking at micro services

00:03:51,980 --> 00:03:55,100
and containers or server lists or all

00:03:53,780 --> 00:03:57,859
these other components there's a whole

00:03:55,100 --> 00:03:59,329
lot of other things going on in the

00:03:57,859 --> 00:04:02,120
industry outside of what you

00:03:59,329 --> 00:04:05,630
traditionally need chef or something for

00:04:02,120 --> 00:04:09,609
so in addition to chef three years ago

00:04:05,630 --> 00:04:11,720
we launched a workflow project that is

00:04:09,609 --> 00:04:13,910
sort of continuous delivery with a

00:04:11,720 --> 00:04:16,400
different sort of accent on it so it's

00:04:13,910 --> 00:04:19,549
really focused on integration and

00:04:16,400 --> 00:04:21,500
deployment so we have that and then

00:04:19,549 --> 00:04:23,210
we've launched two other projects one of

00:04:21,500 --> 00:04:25,430
them is habitat which I'm happy to talk

00:04:23,210 --> 00:04:27,050
about offline later for folks who

00:04:25,430 --> 00:04:29,930
haven't heard about it but it's

00:04:27,050 --> 00:04:31,099
application automation and the other one

00:04:29,930 --> 00:04:33,689
I am going to talk about today is in

00:04:31,099 --> 00:04:36,059
spec and we're

00:04:33,689 --> 00:04:37,860
really looking at inspect from

00:04:36,059 --> 00:04:39,919
compliance standpoint so as we talk

00:04:37,860 --> 00:04:42,479
about that that's sort of where we are

00:04:39,919 --> 00:04:44,789
so as we working with customers we work

00:04:42,479 --> 00:04:47,339
with a lot of large enterprises as well

00:04:44,789 --> 00:04:49,429
as some digital first folks but also

00:04:47,339 --> 00:04:52,349
small companies that don't have a lot of

00:04:49,429 --> 00:04:54,089
extra personnel around to do a lot of

00:04:52,349 --> 00:04:56,429
these other tasks these sort of

00:04:54,089 --> 00:04:59,639
secondary things what we were finding

00:04:56,429 --> 00:05:01,259
was that we're helping the dev teams the

00:04:59,639 --> 00:05:03,599
operations teams go really really fast

00:05:01,259 --> 00:05:06,479
and do a lot of things and build a lot

00:05:03,599 --> 00:05:09,539
of stuff and then it comes to security

00:05:06,479 --> 00:05:12,209
review and you're like okay we got on

00:05:09,539 --> 00:05:14,099
there ticketing system we are on their

00:05:12,209 --> 00:05:15,989
calendar for six weeks from now for a

00:05:14,099 --> 00:05:18,119
security review of this thing that we've

00:05:15,989 --> 00:05:20,909
been going really really fast for in the

00:05:18,119 --> 00:05:23,069
early stages and we saw this more and

00:05:20,909 --> 00:05:25,439
more but there's lots of product

00:05:23,069 --> 00:05:28,169
features lots of ideas and then there's

00:05:25,439 --> 00:05:31,729
a security team or some kind of review

00:05:28,169 --> 00:05:34,649
or process that holds things back and

00:05:31,729 --> 00:05:37,559
even this little Trickle gets to

00:05:34,649 --> 00:05:40,229
production eventually so some places

00:05:37,559 --> 00:05:41,969
they change around how they do this and

00:05:40,229 --> 00:05:44,219
they take out the security review and

00:05:41,969 --> 00:05:45,479
they do post hoc scanning right and

00:05:44,219 --> 00:05:46,889
we're all familiar with this these are

00:05:45,479 --> 00:05:49,229
there's a lot of products in this space

00:05:46,889 --> 00:05:51,329
and what we found is that this is really

00:05:49,229 --> 00:05:53,669
too late for a lot of the things that

00:05:51,329 --> 00:05:56,249
compliance officers are looking for that

00:05:53,669 --> 00:05:57,989
are things that you know ahead of time

00:05:56,249 --> 00:06:00,629
we're not necessarily talking about

00:05:57,989 --> 00:06:02,039
intrusion detection systems or virus

00:06:00,629 --> 00:06:04,229
scanning or those sorts of things we're

00:06:02,039 --> 00:06:06,569
looking at how the machine should be

00:06:04,229 --> 00:06:10,860
configured so that we don't get sued

00:06:06,569 --> 00:06:15,079
because that happens right so this

00:06:10,860 --> 00:06:17,279
article from last year is about a

00:06:15,079 --> 00:06:19,769
insurance company health care system

00:06:17,279 --> 00:06:22,979
that installed a new server didn't

00:06:19,769 --> 00:06:24,599
change the default configurations were

00:06:22,979 --> 00:06:26,969
like for chef we know all about

00:06:24,599 --> 00:06:29,459
configurations like we totally can play

00:06:26,969 --> 00:06:31,050
in that space right HIPPA if you're not

00:06:29,459 --> 00:06:32,519
familiar with it as a u.s. health care

00:06:31,050 --> 00:06:34,800
insurance regulation about data

00:06:32,519 --> 00:06:37,800
protection things like that so these

00:06:34,800 --> 00:06:40,739
fines are non-trivial and it happens in

00:06:37,800 --> 00:06:42,959
a lot of different spaces and as new

00:06:40,739 --> 00:06:44,039
security regulations are launched in

00:06:42,959 --> 00:06:45,719
Europe and other things that we're

00:06:44,039 --> 00:06:47,039
looking at all these things come into

00:06:45,719 --> 00:06:50,520
play more and more

00:06:47,039 --> 00:06:55,550
we were talking to say all the team

00:06:50,520 --> 00:06:58,139
members for this sort of requirement set

00:06:55,550 --> 00:07:00,930
they all have different things that they

00:06:58,139 --> 00:07:03,539
know different resources that they use

00:07:00,930 --> 00:07:05,580
different things that they need and we

00:07:03,539 --> 00:07:08,879
found that compliance officers are

00:07:05,580 --> 00:07:10,889
really geared towards what's in those

00:07:08,879 --> 00:07:13,349
compliance documents they may not

00:07:10,889 --> 00:07:16,499
actually be heavily technical people

00:07:13,349 --> 00:07:18,839
they may be representatives of your

00:07:16,499 --> 00:07:20,399
auditors they may be representatives of

00:07:18,839 --> 00:07:22,800
insurance companies that ensure your

00:07:20,399 --> 00:07:24,659
business they're not necessarily hands

00:07:22,800 --> 00:07:26,520
on the keyboard technical people and

00:07:24,659 --> 00:07:29,759
that should be fine right they're there

00:07:26,520 --> 00:07:32,339
to make sure the boxes get checked they

00:07:29,759 --> 00:07:34,889
often have their requirements in flat

00:07:32,339 --> 00:07:37,349
documents things that don't necessarily

00:07:34,889 --> 00:07:40,409
have what we think of as a life cycle

00:07:37,349 --> 00:07:43,740
right they publish a PDF or maybe

00:07:40,409 --> 00:07:45,979
instead of Excel spreadsheets that have

00:07:43,740 --> 00:07:48,360
checkboxes in them that they check off I

00:07:45,979 --> 00:07:51,509
saw one of these in Dass one time was

00:07:48,360 --> 00:07:52,740
horrible oh my god don't one do that but

00:07:51,509 --> 00:07:55,080
these things are old right and they

00:07:52,740 --> 00:07:57,360
don't have like a constant update but

00:07:55,080 --> 00:07:58,889
the operating systems and the the

00:07:57,360 --> 00:08:00,479
platform's obviously are moving all the

00:07:58,889 --> 00:08:03,539
time so they're having trouble keeping

00:08:00,479 --> 00:08:05,519
up with all these things if you look at

00:08:03,539 --> 00:08:08,610
like something like the CIS standard

00:08:05,519 --> 00:08:10,110
it's like hundreds of pages of PDF for

00:08:08,610 --> 00:08:13,229
each operating system that you need to

00:08:10,110 --> 00:08:14,370
look at that's a lot of overhead so

00:08:13,229 --> 00:08:15,870
those folks kind of live in their own

00:08:14,370 --> 00:08:19,080
world and then you have your security

00:08:15,870 --> 00:08:20,610
team and there may be your blue team or

00:08:19,080 --> 00:08:23,069
your white hats or whatever you call

00:08:20,610 --> 00:08:25,289
them internally the folks that are doing

00:08:23,069 --> 00:08:27,689
your security audits are working against

00:08:25,289 --> 00:08:29,219
the CVEs and things that might affect

00:08:27,689 --> 00:08:31,559
your platforms all these other things

00:08:29,219 --> 00:08:32,669
that they have a lot of the times these

00:08:31,559 --> 00:08:35,099
folks are going for lowest common

00:08:32,669 --> 00:08:37,199
denominator we see a lot of them when

00:08:35,099 --> 00:08:41,010
we're working with them work in bash so

00:08:37,199 --> 00:08:44,099
they're writing scripts that test for

00:08:41,010 --> 00:08:46,649
this team's a bunch of stuff that teams

00:08:44,099 --> 00:08:48,300
red hat stuff and then there's maybe one

00:08:46,649 --> 00:08:50,459
dude on the team that knows a little bit

00:08:48,300 --> 00:08:51,899
about Windows and he's just ready to

00:08:50,459 --> 00:08:53,819
kill himself because it's crazy over

00:08:51,899 --> 00:08:55,860
there but these folks have their own

00:08:53,819 --> 00:08:57,990
workflow and their own things that

00:08:55,860 --> 00:08:59,639
they're doing and then where the DevOps

00:08:57,990 --> 00:09:00,570
and we come in and we're like we're

00:08:59,639 --> 00:09:03,030
going to go fast

00:09:00,570 --> 00:09:04,500
so hold on and everybody else is like

00:09:03,030 --> 00:09:07,830
you guys are nuts we have all these

00:09:04,500 --> 00:09:09,840
other requirements to take care of so

00:09:07,830 --> 00:09:12,420
and or something like inspect right for

00:09:09,840 --> 00:09:16,740
the purpose of of all these things we

00:09:12,420 --> 00:09:20,100
wanted something that was easy to create

00:09:16,740 --> 00:09:22,200
for folks who may not be as technical as

00:09:20,100 --> 00:09:24,930
everyone else but also easy to share

00:09:22,200 --> 00:09:26,430
right that was a big component of what

00:09:24,930 --> 00:09:28,860
came out of the early versions of this

00:09:26,430 --> 00:09:32,010
so everyone could have their input into

00:09:28,860 --> 00:09:35,490
one platform and that would then result

00:09:32,010 --> 00:09:39,930
in compliant architectures so that

00:09:35,490 --> 00:09:41,610
became in spec so what our goals are

00:09:39,930 --> 00:09:44,220
within spec is that it's a human

00:09:41,610 --> 00:09:46,670
readable specification language there

00:09:44,220 --> 00:09:51,750
are tests in there but there's also

00:09:46,670 --> 00:09:54,930
larger structures for organizing sharing

00:09:51,750 --> 00:09:58,770
and developing a lifecycle around your

00:09:54,930 --> 00:10:02,310
compliance requirements so we have these

00:09:58,770 --> 00:10:04,410
additional facilities for gathering up a

00:10:02,310 --> 00:10:06,630
lot of tests and we're using them as

00:10:04,410 --> 00:10:11,010
profiles so that I can say alright

00:10:06,630 --> 00:10:14,130
here's my global profile for Bank a for

00:10:11,010 --> 00:10:15,330
CentOS 73 and every time you have a

00:10:14,130 --> 00:10:17,340
machine or every time you're developing

00:10:15,330 --> 00:10:19,680
for it make sure you pass all of these

00:10:17,340 --> 00:10:23,130
things and I can publish that internally

00:10:19,680 --> 00:10:25,880
on a file share on an internal git

00:10:23,130 --> 00:10:28,260
repository or an SDN or whatever and

00:10:25,880 --> 00:10:28,850
have it available to everybody who needs

00:10:28,260 --> 00:10:33,030
it

00:10:28,850 --> 00:10:35,520
there's also extensible language built

00:10:33,030 --> 00:10:37,230
right in so that you can build your own

00:10:35,520 --> 00:10:39,470
rules for your own applications and

00:10:37,230 --> 00:10:42,600
systems especially if you're building

00:10:39,470 --> 00:10:45,120
custom applications in our custom

00:10:42,600 --> 00:10:48,180
runtimes or using an older runtime that

00:10:45,120 --> 00:10:50,640
isn't necessarily supported or very

00:10:48,180 --> 00:10:52,140
popular in the in the rest of the

00:10:50,640 --> 00:10:54,240
industry we see some of those still

00:10:52,140 --> 00:10:56,190
running around and of course it comes

00:10:54,240 --> 00:10:58,950
with command-line tools for plugging

00:10:56,190 --> 00:11:02,960
into workflows and build servers and

00:10:58,950 --> 00:11:02,960
running audits and things like that

00:11:03,560 --> 00:11:08,490
additionally test kitchen is another one

00:11:06,300 --> 00:11:11,070
of our projects hopefully you've heard

00:11:08,490 --> 00:11:13,200
of it even if you don't run chef so you

00:11:11,070 --> 00:11:14,010
can get fast feedbacks and local testing

00:11:13,200 --> 00:11:17,250
within specs

00:11:14,010 --> 00:11:18,810
in Test Kitchen so that's an example

00:11:17,250 --> 00:11:21,480
something like SSH

00:11:18,810 --> 00:11:23,850
we know that SSH is super important

00:11:21,480 --> 00:11:28,710
shouldn't be using telnet anymore I'll

00:11:23,850 --> 00:11:32,460
help you but there's multiple protocols

00:11:28,710 --> 00:11:35,400
underneath SSH of course and not every

00:11:32,460 --> 00:11:37,080
new operating system has published with

00:11:35,400 --> 00:11:39,450
the best practices and that's fine like

00:11:37,080 --> 00:11:40,680
it's up to the upstream vendor to figure

00:11:39,450 --> 00:11:43,590
out what they want their default

00:11:40,680 --> 00:11:45,300
configurations to be what it's up to me

00:11:43,590 --> 00:11:47,100
though is to know that when I'm

00:11:45,300 --> 00:11:49,590
deploying things that the configuration

00:11:47,100 --> 00:11:51,510
and I'm putting out there meets all my

00:11:49,590 --> 00:11:54,090
security requirements and to do that I

00:11:51,510 --> 00:11:57,750
need to check it somehow and know what's

00:11:54,090 --> 00:12:00,450
out there so in my past life I was

00:11:57,750 --> 00:12:02,730
assisted min at America Online so I used

00:12:00,450 --> 00:12:05,130
to run a allcom and a bunch of our

00:12:02,730 --> 00:12:06,420
channels and weird stuff like that so we

00:12:05,130 --> 00:12:07,440
had a whole bunch of machines out there

00:12:06,420 --> 00:12:08,910
that had like four or five different

00:12:07,440 --> 00:12:11,430
platforms and there's all kinds of weird

00:12:08,910 --> 00:12:13,530
stuff going on and every now and then

00:12:11,430 --> 00:12:16,410
you get this command from on high please

00:12:13,530 --> 00:12:18,270
check all your nodes for XYZ and it'd be

00:12:16,410 --> 00:12:19,530
like all right well here's bash and a

00:12:18,270 --> 00:12:22,080
for loop let's figure out what's going

00:12:19,530 --> 00:12:23,700
on and we get things like this right you

00:12:22,080 --> 00:12:26,310
get an email from the security team

00:12:23,700 --> 00:12:28,470
please check all your junk for something

00:12:26,310 --> 00:12:30,930
like this so SSH supports two different

00:12:28,470 --> 00:12:32,700
protocols the original version version

00:12:30,930 --> 00:12:35,730
one is subject to a number of security

00:12:32,700 --> 00:12:38,760
issues please make sure all your systems

00:12:35,730 --> 00:12:40,260
are v2 so how do you do this like what

00:12:38,760 --> 00:12:42,750
are you looking at you have to identify

00:12:40,260 --> 00:12:45,120
the file in its location if you're

00:12:42,750 --> 00:12:48,480
building systems using only system

00:12:45,120 --> 00:12:52,800
packages hopefully stuffs in the same

00:12:48,480 --> 00:12:54,540
place everywhere maybe if you've got

00:12:52,800 --> 00:12:57,840
some penchant for building your own

00:12:54,540 --> 00:12:59,640
stuff and putting SSH as a custom build

00:12:57,840 --> 00:13:02,040
because it has to support Kerberos or

00:12:59,640 --> 00:13:03,870
something weird into a weird place you

00:13:02,040 --> 00:13:06,290
have to find it where is that config

00:13:03,870 --> 00:13:08,670
file how do I know where that is

00:13:06,290 --> 00:13:10,410
figure out some sort of fix am I just

00:13:08,670 --> 00:13:11,910
going to check it first I'm just going

00:13:10,410 --> 00:13:13,770
to push a nuke and figure out just

00:13:11,910 --> 00:13:18,000
blindly and hope that nobody had a

00:13:13,770 --> 00:13:20,070
custom configu air maybe how much risk

00:13:18,000 --> 00:13:22,050
do I want to take there and then if I

00:13:20,070 --> 00:13:23,130
need to build something tomorrow after

00:13:22,050 --> 00:13:25,170
I've already looked at my current

00:13:23,130 --> 00:13:26,700
machines how do I know that the new one

00:13:25,170 --> 00:13:27,960
is going to right are we going to

00:13:26,700 --> 00:13:29,820
rebuild all of our images

00:13:27,960 --> 00:13:32,670
is it time to do that maybe we only do

00:13:29,820 --> 00:13:34,650
that once every six months but then do I

00:13:32,670 --> 00:13:35,970
have to run mediate it at instantiation

00:13:34,650 --> 00:13:37,080
so I build a machine I have to go

00:13:35,970 --> 00:13:38,970
through this whole practice all over

00:13:37,080 --> 00:13:39,780
again so hopefully you're using some

00:13:38,970 --> 00:13:41,820
kind of configuration management

00:13:39,780 --> 00:13:44,430
solution for all these types of changes

00:13:41,820 --> 00:13:49,380
it's the checks that now we want to talk

00:13:44,430 --> 00:13:51,750
about so as we as we've been working

00:13:49,380 --> 00:13:54,270
with more and more large customers and

00:13:51,750 --> 00:13:58,320
figuring out how our tools fit into

00:13:54,270 --> 00:14:00,090
their workflows talking to the security

00:13:58,320 --> 00:14:03,050
folks has been super interesting right

00:14:00,090 --> 00:14:05,670
so how often do they actually get

00:14:03,050 --> 00:14:08,190
mandates from security how often do you

00:14:05,670 --> 00:14:09,720
publish a new requirement something to

00:14:08,190 --> 00:14:13,620
check let me make sure that is right

00:14:09,720 --> 00:14:15,570
across the whole suite sometimes they

00:14:13,620 --> 00:14:17,820
run single big scans and they get a

00:14:15,570 --> 00:14:20,460
report mailed out with a due date by

00:14:17,820 --> 00:14:25,170
next Friday please fix these 15,000

00:14:20,460 --> 00:14:27,180
nodes usually it's only yearly or maybe

00:14:25,170 --> 00:14:30,750
twice yearly these big scans and the

00:14:27,180 --> 00:14:33,210
entire components and and then they have

00:14:30,750 --> 00:14:36,210
the next year to figure out how they're

00:14:33,210 --> 00:14:37,740
going to fix everything we've seen this

00:14:36,210 --> 00:14:39,750
a number of times with banks and it's

00:14:37,740 --> 00:14:41,940
like once you want to put all your money

00:14:39,750 --> 00:14:45,990
in the mattress after looking at some of

00:14:41,940 --> 00:14:49,770
these so inspects we hope who help with

00:14:45,990 --> 00:14:52,050
all this stuff right so inspect lives at

00:14:49,770 --> 00:14:55,260
inspect that IO it's not under the chef

00:14:52,050 --> 00:14:56,940
tree so it's like the side chef it is

00:14:55,260 --> 00:14:59,700
open source so things we're going to

00:14:56,940 --> 00:15:01,770
talk about all freely available for you

00:14:59,700 --> 00:15:03,120
to use and the spec is a hint that it's

00:15:01,770 --> 00:15:05,340
built off of our spec so if you're

00:15:03,120 --> 00:15:07,530
familiar with the Ruby ecosystem at all

00:15:05,340 --> 00:15:09,690
the testing languages and things like

00:15:07,530 --> 00:15:11,060
that it will hopefully look a little bit

00:15:09,690 --> 00:15:13,920
familiar

00:15:11,060 --> 00:15:16,080
so that's sshd config that I was talking

00:15:13,920 --> 00:15:18,810
about earlier how do we check that right

00:15:16,080 --> 00:15:21,990
so I have the ability to actually just

00:15:18,810 --> 00:15:26,550
ask inspect to look for my sshd config

00:15:21,990 --> 00:15:29,790
in this case I'm describing what I want

00:15:26,550 --> 00:15:31,290
sshd config to look for and what I want

00:15:29,790 --> 00:15:35,370
to look for in that particular resource

00:15:31,290 --> 00:15:38,570
I can specify what I call an impact what

00:15:35,370 --> 00:15:41,370
we what we call an impact so from 0 to 1

00:15:38,570 --> 00:15:44,520
how important is this thing

00:15:41,370 --> 00:15:49,980
so you can actually publish test Suites

00:15:44,520 --> 00:15:51,600
with warnings right so maybe 0.32 say we

00:15:49,980 --> 00:15:56,100
should check keep an eye on this thing

00:15:51,600 --> 00:15:57,060
it's not hardcore impact but we should

00:15:56,100 --> 00:15:59,810
know that it's out there

00:15:57,060 --> 00:16:03,240
maybe 0.6 think about fixing this thing

00:15:59,810 --> 00:16:07,170
1.0 please fix this right now red light

00:16:03,240 --> 00:16:10,050
must do so you can describe your impacts

00:16:07,170 --> 00:16:11,160
for all the tests that you crave and

00:16:10,050 --> 00:16:12,720
then you get into some of the human

00:16:11,160 --> 00:16:14,280
readable pieces the stuff that you can

00:16:12,720 --> 00:16:17,160
actually just sort of copy and paste

00:16:14,280 --> 00:16:19,260
right from these 500 page documents at

00:16:17,160 --> 00:16:21,030
the compliance folks have things like

00:16:19,260 --> 00:16:23,130
what's the title of the thing that I'm

00:16:21,030 --> 00:16:25,740
checking right in this case I'm looking

00:16:23,130 --> 00:16:26,790
for SSH version - so my auditor when

00:16:25,740 --> 00:16:30,630
they're looking at this they know I have

00:16:26,790 --> 00:16:32,310
a test for checkbox ssh version 2 and i

00:16:30,630 --> 00:16:34,710
have my description these can be super

00:16:32,310 --> 00:16:37,290
long right cut paste right out out of

00:16:34,710 --> 00:16:39,330
that PDF file explain what's going on

00:16:37,290 --> 00:16:41,910
why we're looking at it maybe what the

00:16:39,330 --> 00:16:45,420
origin is of the request for test right

00:16:41,910 --> 00:16:47,610
and then I have the ability to dig

00:16:45,420 --> 00:16:51,150
around in that resource that sshd

00:16:47,610 --> 00:16:53,460
underscore config and look at all the

00:16:51,150 --> 00:16:55,440
components that are in there so there

00:16:53,460 --> 00:16:58,020
are key value pairs of some fashion

00:16:55,440 --> 00:17:01,620
right sshd config is like plain text

00:16:58,020 --> 00:17:03,840
file it's not super crazy so in this

00:17:01,620 --> 00:17:06,120
case I'm looking for a line that has its

00:17:03,840 --> 00:17:07,110
protocol as the characteristic and then

00:17:06,120 --> 00:17:10,890
I'm going to compare it to the value

00:17:07,110 --> 00:17:14,670
that I'm I'm requesting in this case the

00:17:10,890 --> 00:17:16,950
value should be 2 so it here is geared

00:17:14,670 --> 00:17:19,050
towards having lots of different

00:17:16,950 --> 00:17:21,840
audiences for these particular tests

00:17:19,050 --> 00:17:25,290
folks that are pretty technical and are

00:17:21,840 --> 00:17:26,940
super into curly brackets or folks that

00:17:25,290 --> 00:17:29,640
are not as technical and are really

00:17:26,940 --> 00:17:32,370
after making sure that what's in that

00:17:29,640 --> 00:17:35,850
description meets with the things that

00:17:32,370 --> 00:17:39,330
are required we do this via what we call

00:17:35,850 --> 00:17:41,190
resources and in spec includes a whole

00:17:39,330 --> 00:17:44,250
bunch of built-in resources I think it's

00:17:41,190 --> 00:17:47,790
up to 60 maybe 50 60 different built-in

00:17:44,250 --> 00:17:50,130
resources for services in system files

00:17:47,790 --> 00:17:54,360
configurations there's the basic stuff

00:17:50,130 --> 00:17:55,020
so basic file checking and those sorts

00:17:54,360 --> 00:17:57,060
of things

00:17:55,020 --> 00:18:00,150
but also these sort of more abstract

00:17:57,060 --> 00:18:02,850
ones like sshd underscore config I don't

00:18:00,150 --> 00:18:04,920
have to go looking for that file inspect

00:18:02,850 --> 00:18:06,660
under the hood takes care of finding it

00:18:04,920 --> 00:18:11,310
based on my platform so I don't have to

00:18:06,660 --> 00:18:12,840
do all that extra work in my test the

00:18:11,310 --> 00:18:14,250
built in services building resources

00:18:12,840 --> 00:18:16,410
work on a number of different Linux

00:18:14,250 --> 00:18:20,420
platforms we also have a bunch of stuff

00:18:16,410 --> 00:18:23,130
working for windows we actually publish

00:18:20,420 --> 00:18:23,670
Tuesday night or Monday is today

00:18:23,130 --> 00:18:27,300
Wednesday

00:18:23,670 --> 00:18:30,050
Monday night a and inspect check for the

00:18:27,300 --> 00:18:33,180
one a cry saying that was hitting so

00:18:30,050 --> 00:18:36,090
looking for Windows components and

00:18:33,180 --> 00:18:38,040
inspect as well so the resource then has

00:18:36,090 --> 00:18:40,230
underlying characteristics like that

00:18:38,040 --> 00:18:42,330
protocol that was in the example that

00:18:40,230 --> 00:18:44,280
you can verify for your requirements the

00:18:42,330 --> 00:18:46,080
matchers work through dealing with

00:18:44,280 --> 00:18:48,720
what's actually in the file so the

00:18:46,080 --> 00:18:51,150
abstraction layer gives you the ability

00:18:48,720 --> 00:18:53,550
to say I want this look at this config

00:18:51,150 --> 00:18:56,160
file and then if it's a supported

00:18:53,550 --> 00:18:57,540
resource inspect will dig through there

00:18:56,160 --> 00:18:59,880
and know what you're looking for so

00:18:57,540 --> 00:19:02,880
there's a number of more complex ones

00:18:59,880 --> 00:19:05,040
that are in there like webserver configs

00:19:02,880 --> 00:19:07,740
and this sshd config and a couple of

00:19:05,040 --> 00:19:09,270
others that are already know what that

00:19:07,740 --> 00:19:15,060
file should look like and how to

00:19:09,270 --> 00:19:18,060
manipulate and manage it so there's my

00:19:15,060 --> 00:19:19,890
resource and sensation under config my

00:19:18,060 --> 00:19:21,660
compliance officers obviously don't care

00:19:19,890 --> 00:19:23,520
they don't care if you're using Debian I

00:19:21,660 --> 00:19:26,130
don't care if you're using Red Hat all I

00:19:23,520 --> 00:19:28,580
care about is if you've got your SSH

00:19:26,130 --> 00:19:30,840
running that it meets this protocol and

00:19:28,580 --> 00:19:34,740
inspect can figure out where the file

00:19:30,840 --> 00:19:37,070
lives and what should be in it so the

00:19:34,740 --> 00:19:39,990
language that is sort of included is

00:19:37,070 --> 00:19:44,190
built off as I mentioned before sort of

00:19:39,990 --> 00:19:46,320
r-spec related things and it gives you a

00:19:44,190 --> 00:19:48,750
set of tools for looking at

00:19:46,320 --> 00:19:52,200
characteristics of components of your

00:19:48,750 --> 00:19:53,910
system things should exist like a file

00:19:52,200 --> 00:19:57,210
should exist hopefully at the shadow

00:19:53,910 --> 00:19:59,910
exists on your machine packages that

00:19:57,210 --> 00:20:02,370
should be installed your firewall rules

00:19:59,910 --> 00:20:04,410
or something like that services that

00:20:02,370 --> 00:20:06,270
should or maybe should not be enabled

00:20:04,410 --> 00:20:08,669
making sure NFS is turned off on your

00:20:06,270 --> 00:20:12,509
machines might be part of your

00:20:08,669 --> 00:20:14,159
compliance requirements and also sort of

00:20:12,509 --> 00:20:17,129
deeper things looking at something like

00:20:14,159 --> 00:20:18,869
max log file knowing how long your log

00:20:17,129 --> 00:20:22,799
retention should be on the individual

00:20:18,869 --> 00:20:26,669
nodes can be encoded into your your

00:20:22,799 --> 00:20:28,739
profile if you have tests from maybe

00:20:26,669 --> 00:20:31,499
from your upstream vendor that are like

00:20:28,739 --> 00:20:34,679
to check if your node is vulnerable to

00:20:31,499 --> 00:20:36,899
this vulnerability run the script and

00:20:34,679 --> 00:20:38,669
give you a batch file you can actually

00:20:36,899 --> 00:20:41,309
run that from your inspect test and

00:20:38,669 --> 00:20:43,590
check the exit status on that so that

00:20:41,309 --> 00:20:45,840
you know yes or no are my notes

00:20:43,590 --> 00:20:50,070
vulnerable to this thing that's been

00:20:45,840 --> 00:20:51,629
published by my up street vendor we can

00:20:50,070 --> 00:20:53,700
also get into more complex built in

00:20:51,629 --> 00:20:56,129
things that have a lot of dark magic in

00:20:53,700 --> 00:20:58,109
them like limits back off right which

00:20:56,129 --> 00:20:59,639
that file is nuts and every time I look

00:20:58,109 --> 00:21:01,409
at it I have to open the man page and

00:20:59,639 --> 00:21:04,049
another screen and like what the hell's

00:21:01,409 --> 00:21:06,600
actually in here but it can help you

00:21:04,049 --> 00:21:08,720
manage what's actually in there and know

00:21:06,600 --> 00:21:12,059
for sure that the components in the

00:21:08,720 --> 00:21:14,369
requirements that you have for limits

00:21:12,059 --> 00:21:17,159
for things like core dumping or memory

00:21:14,369 --> 00:21:19,440
or whatever all meet the same

00:21:17,159 --> 00:21:24,749
requirements that your resource officers

00:21:19,440 --> 00:21:27,419
want you to meet so we can run inspect

00:21:24,749 --> 00:21:29,730
from the command line if you want to

00:21:27,419 --> 00:21:32,279
install it by itself installs as a ruby

00:21:29,730 --> 00:21:34,289
gem so you have Ruby on the system you

00:21:32,279 --> 00:21:36,359
just install it that way it was a part

00:21:34,289 --> 00:21:38,489
of chef DK which is our development kit

00:21:36,359 --> 00:21:41,489
that has all of our suite of tools built

00:21:38,489 --> 00:21:43,950
into it it's kind of a beast it comes

00:21:41,489 --> 00:21:45,779
with its own Ruby so it's separate from

00:21:43,950 --> 00:21:50,029
your system Ruby installs in its own

00:21:45,779 --> 00:21:53,279
location and lives its own life that way

00:21:50,029 --> 00:21:54,960
we can run our inspect tests locally so

00:21:53,279 --> 00:21:57,869
I can actually test the system if I am

00:21:54,960 --> 00:21:59,840
developing here and want to make sure

00:21:57,869 --> 00:22:02,850
that the changes that I've made to my

00:21:59,840 --> 00:22:05,279
server XML or whatever still meet with

00:22:02,850 --> 00:22:08,820
my compliance I can run tests locally or

00:22:05,279 --> 00:22:12,059
I can run them remotely against another

00:22:08,820 --> 00:22:15,029
machine somewhere else so inspect logs

00:22:12,059 --> 00:22:18,659
in to that remote host and runs tests

00:22:15,029 --> 00:22:21,389
for you that way so we can test a whole

00:22:18,659 --> 00:22:22,560
bunch of different targets to run it

00:22:21,389 --> 00:22:24,510
locally I just run

00:22:22,560 --> 00:22:27,660
inspect exact and whatever my test file

00:22:24,510 --> 00:22:31,170
is so it's super easy that way I can

00:22:27,660 --> 00:22:34,200
just have them living in my application

00:22:31,170 --> 00:22:36,900
directory if I need to if I want to run

00:22:34,200 --> 00:22:39,720
it remotely it's using SSH for Linux

00:22:36,900 --> 00:22:42,290
right like everything does and so I have

00:22:39,720 --> 00:22:45,240
my identity file I log in to my remote

00:22:42,290 --> 00:22:48,450
node and I can execute that test

00:22:45,240 --> 00:22:52,230
remotely via SSH if I'm working in

00:22:48,450 --> 00:22:53,640
Windows it will run over 1rm so if you

00:22:52,230 --> 00:22:57,150
want to run it remotely there you have

00:22:53,640 --> 00:22:58,530
to make sure when RM is enabled if I

00:22:57,150 --> 00:23:01,020
have a docker container I can also

00:22:58,530 --> 00:23:02,910
launch it and use the docker container

00:23:01,020 --> 00:23:05,700
as a target to make sure that nothing

00:23:02,910 --> 00:23:07,280
weird got into my container that way so

00:23:05,700 --> 00:23:09,750
a couple different options depending on

00:23:07,280 --> 00:23:13,980
wearing your life cycle or how you want

00:23:09,750 --> 00:23:16,440
to make use of inspect that way what it

00:23:13,980 --> 00:23:19,440
looks like when I run it if I have a

00:23:16,440 --> 00:23:23,970
failure I get a summary at the end of

00:23:19,440 --> 00:23:25,770
the run so I have no successful ones in

00:23:23,970 --> 00:23:28,050
the first option in there and one

00:23:25,770 --> 00:23:30,420
failure my return code ends up being

00:23:28,050 --> 00:23:33,510
nonzero so if I want to add this to a

00:23:30,420 --> 00:23:37,320
pipeline of other tools or run it under

00:23:33,510 --> 00:23:40,380
my build system or whatever I can make

00:23:37,320 --> 00:23:43,380
use of the return code to just harvest

00:23:40,380 --> 00:23:45,300
the output that way and then if I have

00:23:43,380 --> 00:23:47,490
them all successful and they have to all

00:23:45,300 --> 00:23:50,190
be successful so I get zero failures

00:23:47,490 --> 00:23:53,430
I'll get my zero return code and

00:23:50,190 --> 00:23:55,560
everything comes back okay in Test

00:23:53,430 --> 00:24:00,360
Kitchen one also runs there

00:23:55,560 --> 00:24:01,770
I add my verifier name of inspect you're

00:24:00,360 --> 00:24:06,180
familiar with Test Kitchen that just

00:24:01,770 --> 00:24:08,010
goes into your kitchen demo file so when

00:24:06,180 --> 00:24:09,000
that server specs like if you're

00:24:08,010 --> 00:24:10,650
familiar service pack you're probably

00:24:09,000 --> 00:24:12,990
sitting there thinking like so respect

00:24:10,650 --> 00:24:18,080
those all this why do I care right

00:24:12,990 --> 00:24:20,700
mods again those are respects awesome we

00:24:18,080 --> 00:24:22,980
we used to respect it was part of our

00:24:20,700 --> 00:24:27,390
suite for a long time we were using it

00:24:22,980 --> 00:24:29,910
as well inspect ended up being sort of a

00:24:27,390 --> 00:24:31,679
superset of what server spec does so

00:24:29,910 --> 00:24:33,810
there's a sort of different audience

00:24:31,679 --> 00:24:35,940
that we added to the requirements for

00:24:33,810 --> 00:24:38,389
the tool that we wanted and that's these

00:24:35,940 --> 00:24:41,399
compliance officer folks who have

00:24:38,389 --> 00:24:45,990
text-based requirements and they're it's

00:24:41,399 --> 00:24:48,330
a different sort of end point for what

00:24:45,990 --> 00:24:51,029
these tests need to do and who they need

00:24:48,330 --> 00:24:52,889
to be for and so part of that ends up

00:24:51,029 --> 00:24:54,860
being about the next thing I'm going to

00:24:52,889 --> 00:24:57,360
talk about which is building up profiles

00:24:54,860 --> 00:24:59,700
sharing them depending upon them and

00:24:57,360 --> 00:25:04,580
using them across multiple teams and

00:24:59,700 --> 00:25:06,570
workstations rather than just inside the

00:25:04,580 --> 00:25:09,120
application for a single development

00:25:06,570 --> 00:25:11,009
stream so we're looking more at sort of

00:25:09,120 --> 00:25:12,960
global or universal compliance

00:25:11,009 --> 00:25:15,990
requirements versus the more granular

00:25:12,960 --> 00:25:19,320
things that sort of spec and sort of

00:25:15,990 --> 00:25:20,850
previous versions were looking at so one

00:25:19,320 --> 00:25:24,269
of our engineers actually wrote a blog

00:25:20,850 --> 00:25:27,659
post about sort of the life cycle of how

00:25:24,269 --> 00:25:31,409
they put together inspect from server

00:25:27,659 --> 00:25:33,960
spec and what it looks like to to take a

00:25:31,409 --> 00:25:37,230
look at both of them that way so this is

00:25:33,960 --> 00:25:39,090
C from 2005 the origination of inspect

00:25:37,230 --> 00:25:43,590
we're actually a dev team here in Berlin

00:25:39,090 --> 00:25:46,139
that we chef the company bought and

00:25:43,590 --> 00:25:50,700
absorbed their IP and one of those

00:25:46,139 --> 00:25:52,500
engineers wrote about their evolution of

00:25:50,700 --> 00:25:54,720
what's a respectable is what inspect

00:25:52,500 --> 00:25:57,990
became and there's some other deeper

00:25:54,720 --> 00:25:59,850
like library stuff in there for the

00:25:57,990 --> 00:26:02,820
folks that are super pedantic about that

00:25:59,850 --> 00:26:06,779
there's different changes to how inspect

00:26:02,820 --> 00:26:08,190
works and it's abstraction layers but

00:26:06,779 --> 00:26:12,149
the super interesting part is these

00:26:08,190 --> 00:26:13,980
profiles and when we're working with a

00:26:12,149 --> 00:26:16,769
lot of different applications and you

00:26:13,980 --> 00:26:21,360
have a lot of test Suites that only live

00:26:16,769 --> 00:26:24,750
inside the applications repository can

00:26:21,360 --> 00:26:27,090
be a lot more work to manage the

00:26:24,750 --> 00:26:29,159
additional test Suites on top of the

00:26:27,090 --> 00:26:31,679
applications and maybe you have the

00:26:29,159 --> 00:26:33,299
components for your infrastructure as

00:26:31,679 --> 00:26:34,950
code pieces or whatever you're using

00:26:33,299 --> 00:26:37,200
there so you have a lot of moving pieces

00:26:34,950 --> 00:26:40,200
and a lot of some potential for

00:26:37,200 --> 00:26:42,419
duplication so profiles came in and it

00:26:40,200 --> 00:26:45,629
allows you to package up all these sets

00:26:42,419 --> 00:26:48,059
of all these tests so I may have 20

00:26:45,629 --> 00:26:49,800
different applications that are going to

00:26:48,059 --> 00:26:53,520
be launched in Tomcat some

00:26:49,800 --> 00:26:55,890
so I have a set of requirements for the

00:26:53,520 --> 00:26:58,290
security and the configuration of my

00:26:55,890 --> 00:27:00,510
Tomcat systems and that's fine so I want

00:26:58,290 --> 00:27:03,000
to be able to share those in a place

00:27:00,510 --> 00:27:05,190
where my compliance officers can verify

00:27:03,000 --> 00:27:06,900
that they're correct my engineers can

00:27:05,190 --> 00:27:09,450
pull them into their dev stream my

00:27:06,900 --> 00:27:11,790
operations folks can use them during

00:27:09,450 --> 00:27:13,950
deployment to make sure things are ok

00:27:11,790 --> 00:27:16,550
over time so I have the ability to share

00:27:13,950 --> 00:27:18,660
all these things out in an easy way

00:27:16,550 --> 00:27:20,340
they're building around these controls

00:27:18,660 --> 00:27:22,860
which is part of what we looked at

00:27:20,340 --> 00:27:25,970
earlier they then are audited against

00:27:22,860 --> 00:27:29,250
your specific requirements each file has

00:27:25,970 --> 00:27:32,460
multiple sometimes lots of test files

00:27:29,250 --> 00:27:34,380
included and lots of individual tests so

00:27:32,460 --> 00:27:36,000
some of these can be very very large we

00:27:34,380 --> 00:27:40,200
are looking at something like the CIS

00:27:36,000 --> 00:27:43,050
example there's 20 chapters or something

00:27:40,200 --> 00:27:44,250
like that about phases of the system

00:27:43,050 --> 00:27:46,110
that's looking at and then there's

00:27:44,250 --> 00:27:49,770
individual tests underneath those it's

00:27:46,110 --> 00:27:51,810
the matrix of it's gigantic so you can

00:27:49,770 --> 00:27:54,420
also depend upon other profiles that are

00:27:51,810 --> 00:27:55,980
outside your current working set so my

00:27:54,420 --> 00:27:59,090
engineers can know if you're going to

00:27:55,980 --> 00:28:02,700
use Test Kitchen require this particular

00:27:59,090 --> 00:28:05,130
test suite that we saved on our internal

00:28:02,700 --> 00:28:07,130
get lab server whatever and pull it down

00:28:05,130 --> 00:28:09,960
and run it every time you run your tests

00:28:07,130 --> 00:28:12,150
so you can publish these then and

00:28:09,960 --> 00:28:14,370
include them in all of our local work

00:28:12,150 --> 00:28:17,160
there's more documentation about the

00:28:14,370 --> 00:28:18,660
dependencies and resolvers and things

00:28:17,160 --> 00:28:21,780
like that that go into the profiles in

00:28:18,660 --> 00:28:23,880
the inspect documentation which is

00:28:21,780 --> 00:28:26,340
quickly things that are in the profile

00:28:23,880 --> 00:28:28,830
so insect comes with a tool to help you

00:28:26,340 --> 00:28:32,130
actually write them so in second it will

00:28:28,830 --> 00:28:34,020
help you write a put the skeleton

00:28:32,130 --> 00:28:36,330
together for where your profile has to

00:28:34,020 --> 00:28:39,630
be set up so you don't have to remember

00:28:36,330 --> 00:28:41,820
the directory names I like junk and as

00:28:39,630 --> 00:28:43,800
we build more tests we add them to the

00:28:41,820 --> 00:28:47,510
controls directory so that's where they

00:28:43,800 --> 00:28:50,610
all end up living if I have a my own

00:28:47,510 --> 00:28:52,890
resource that I've built so that config

00:28:50,610 --> 00:28:54,540
file for this runtime that we built

00:28:52,890 --> 00:28:56,670
internally right no one else knows

00:28:54,540 --> 00:29:00,179
anything about that so it's obviously

00:28:56,670 --> 00:29:02,640
not a built in thing I can add that into

00:29:00,179 --> 00:29:03,270
the libraries directory and publish it

00:29:02,640 --> 00:29:07,040
out

00:29:03,270 --> 00:29:07,040
the rest of my team to also consume

00:29:08,330 --> 00:29:13,440
working with my profiles similar to what

00:29:11,550 --> 00:29:15,450
I was doing before so insect exact is

00:29:13,440 --> 00:29:17,010
there to actually run the profile if I

00:29:15,450 --> 00:29:18,090
want to check the syntax I can run

00:29:17,010 --> 00:29:21,060
inspect check just to make sure

00:29:18,090 --> 00:29:23,130
everything is kosher that way but then

00:29:21,060 --> 00:29:26,670
to actually run it against my system I

00:29:23,130 --> 00:29:29,730
use inspect exactly what the controls

00:29:26,670 --> 00:29:33,660
actually then look like they're similar

00:29:29,730 --> 00:29:36,420
to what we saw before right so one level

00:29:33,660 --> 00:29:39,660
up I have this control and this is part

00:29:36,420 --> 00:29:41,430
of my controls the files that are in

00:29:39,660 --> 00:29:44,130
that controls directory and this is

00:29:41,430 --> 00:29:46,920
actually just one test in a larger file

00:29:44,130 --> 00:29:50,220
of many tests so they're sort of broken

00:29:46,920 --> 00:29:52,470
out in categories that way in this one

00:29:50,220 --> 00:29:54,780
in particular I give it a name that

00:29:52,470 --> 00:29:57,840
probably relates back to the document

00:29:54,780 --> 00:30:00,240
that required it in this case OS - for

00:29:57,840 --> 00:30:02,880
so I have a document that my compliance

00:30:00,240 --> 00:30:06,150
officers or the security folks so ever

00:30:02,880 --> 00:30:07,770
I'm ingesting these rules from has named

00:30:06,150 --> 00:30:09,870
operating system and this is probably

00:30:07,770 --> 00:30:12,380
subheading four right so I can relate

00:30:09,870 --> 00:30:15,180
everything back so I though as four

00:30:12,380 --> 00:30:17,280
we've decided that the impact 1.0 like

00:30:15,180 --> 00:30:20,100
we mentioned before title description

00:30:17,280 --> 00:30:22,260
super familiar and then here's my

00:30:20,100 --> 00:30:24,600
describe so earlier I had that described

00:30:22,260 --> 00:30:27,060
sshd config that was sort of the top of

00:30:24,600 --> 00:30:29,310
this we have one more layer of sort of

00:30:27,060 --> 00:30:31,800
metadata there to tell us that where are

00:30:29,310 --> 00:30:36,870
these controls with and here I'm looking

00:30:31,800 --> 00:30:38,400
at my operating system environment I

00:30:36,870 --> 00:30:39,900
want to make sure that the local

00:30:38,400 --> 00:30:42,510
directory isn't it part of the path

00:30:39,900 --> 00:30:45,090
because attackers might drop something

00:30:42,510 --> 00:30:49,410
in there and it's easier to deal with so

00:30:45,090 --> 00:30:53,310
I have two tests for that based on what

00:30:49,410 --> 00:30:58,560
is required by this particular security

00:30:53,310 --> 00:31:02,570
control okay so now we have some time

00:30:58,560 --> 00:31:06,630
for what I hope will be a bit of a demo

00:31:02,570 --> 00:31:09,150
so I have an example of sort of basic

00:31:06,630 --> 00:31:10,560
hardening so the engineers that work on

00:31:09,150 --> 00:31:12,890
inspect for us have published a couple

00:31:10,560 --> 00:31:17,149
of guidelines or a couple of

00:31:12,890 --> 00:31:20,960
shared profiles for figuring out and

00:31:17,149 --> 00:31:23,750
helping you sort of run through what it

00:31:20,960 --> 00:31:26,179
means to work within spec so the example

00:31:23,750 --> 00:31:29,690
that I have is a Centon 7.2 host it's in

00:31:26,179 --> 00:31:32,809
my laptop so it's a vagrant manage with

00:31:29,690 --> 00:31:36,110
test kitchen I have a cookbook just

00:31:32,809 --> 00:31:37,549
we're chefs so the configuration

00:31:36,110 --> 00:31:39,830
management part of this is built in chef

00:31:37,549 --> 00:31:43,039
and it's something that the same

00:31:39,830 --> 00:31:45,470
engineers wrote so you sit together so I

00:31:43,039 --> 00:31:48,169
have an OS hardening cookbook and then a

00:31:45,470 --> 00:31:49,850
Linux baseline inspect profile both of

00:31:48,169 --> 00:31:53,019
these were shared in our community site

00:31:49,850 --> 00:31:56,120
called supermarket so they work together

00:31:53,019 --> 00:32:01,580
this is the example config from my

00:31:56,120 --> 00:32:03,950
kitchen Yama file I have a run list that

00:32:01,580 --> 00:32:06,889
will let me include the OS hardening

00:32:03,950 --> 00:32:09,200
cookbook and then I have my inspect test

00:32:06,889 --> 00:32:10,880
and if you're familiar with just using a

00:32:09,200 --> 00:32:13,519
service pack or other components inside

00:32:10,880 --> 00:32:15,830
a test kitchen you know you have your

00:32:13,519 --> 00:32:17,960
local directories right and here's my

00:32:15,830 --> 00:32:20,360
profile so I'm just going to download it

00:32:17,960 --> 00:32:22,279
directly from github so all of my other

00:32:20,360 --> 00:32:24,710
team members my compliance folks my

00:32:22,279 --> 00:32:26,990
security folks can update this

00:32:24,710 --> 00:32:29,690
particular baseline and I don't have to

00:32:26,990 --> 00:32:31,700
worry about ingesting it manually into

00:32:29,690 --> 00:32:33,110
all of my application pipelines it will

00:32:31,700 --> 00:32:37,070
just come down because I can depend on

00:32:33,110 --> 00:32:38,539
it from this remote location the things

00:32:37,070 --> 00:32:41,120
that are in the ls hardening cookbook

00:32:38,539 --> 00:32:44,690
are divided out by the pieces that they

00:32:41,120 --> 00:32:46,220
actually touch so these are things that

00:32:44,690 --> 00:32:50,090
are going to change or look at

00:32:46,220 --> 00:32:53,419
configuration in my system right for

00:32:50,090 --> 00:32:55,940
stuff like apt or the limits comm file

00:32:53,419 --> 00:32:58,669
or login definitions things like that

00:32:55,940 --> 00:33:01,250
that are fairly common security

00:32:58,669 --> 00:33:02,990
requirements or security controls that

00:33:01,250 --> 00:33:05,000
that folks should do when you're talking

00:33:02,990 --> 00:33:08,330
about taking just a bare-bones

00:33:05,000 --> 00:33:09,320
installation and turning it into

00:33:08,330 --> 00:33:14,929
something that's a little bit more

00:33:09,320 --> 00:33:16,960
secure so let's see if we can get it to

00:33:14,929 --> 00:33:16,960
go

00:33:28,740 --> 00:33:38,580
Oh deprecations alright so what I have

00:33:34,440 --> 00:33:42,380
is my Linux system it was already

00:33:38,580 --> 00:33:42,380
running so I had already started up I

00:33:43,909 --> 00:33:52,140
have hundreds of tests in this sort of

00:33:48,750 --> 00:33:56,630
basic hardening component right so these

00:33:52,140 --> 00:33:56,630
are common things making sure all of my

00:33:57,799 --> 00:34:03,840
security files are set for the right

00:34:00,000 --> 00:34:11,119
permissions checking my login

00:34:03,840 --> 00:34:11,119
definitions pass password controls

00:34:12,139 --> 00:34:15,919
kernel things pass all that it's pretty

00:34:15,089 --> 00:34:20,639
good

00:34:15,919 --> 00:34:25,080
ICMP just what a basic stuff and these

00:34:20,639 --> 00:34:37,589
are all stored in where's my LS

00:34:25,080 --> 00:34:39,359
hardening one there it is my baseline so

00:34:37,589 --> 00:34:42,510
these are all shared in github this is

00:34:39,359 --> 00:34:44,010
the actual test suite so there's things

00:34:42,510 --> 00:34:47,250
in here that we're sort of ignoring or

00:34:44,010 --> 00:34:50,909
making sure don't exist then we have my

00:34:47,250 --> 00:34:53,879
OS controls so the one I pulled up

00:34:50,909 --> 00:34:55,770
earlier was OS for this one's os/2 right

00:34:53,879 --> 00:34:59,160
so I have lots of things I can match out

00:34:55,770 --> 00:35:01,619
of a single component right so oh s 2 is

00:34:59,160 --> 00:35:04,440
looking for owner informations in at C

00:35:01,619 --> 00:35:07,890
shadow and I can check all of these

00:35:04,440 --> 00:35:10,710
things for that particular resource on

00:35:07,890 --> 00:35:17,190
the system it's all in one stanza of my

00:35:10,710 --> 00:35:19,500
checks if I need to I can still break

00:35:17,190 --> 00:35:23,760
things out by operating system right so

00:35:19,500 --> 00:35:25,320
in this case Debian and Red Hat treat

00:35:23,760 --> 00:35:27,300
group readability of su shadow

00:35:25,320 --> 00:35:31,560
differently and I can call that out if I

00:35:27,300 --> 00:35:35,970
need to and they just keep going and

00:35:31,560 --> 00:35:38,630
going and going and I'll sort of live in

00:35:35,970 --> 00:35:38,630
the same file

00:35:42,680 --> 00:35:53,460
okay so now what if I want to clear

00:35:48,210 --> 00:36:00,390
these up what I'm going to do is bring

00:35:53,460 --> 00:36:02,280
in the partner to the Linux baseline so

00:36:00,390 --> 00:36:02,940
Lynx baseline is just doing tests it's

00:36:02,280 --> 00:36:06,060
just checking

00:36:02,940 --> 00:36:10,500
so I booted up a bare-bones a CentOS box

00:36:06,060 --> 00:36:13,140
didn't fix anything on it and ran my

00:36:10,500 --> 00:36:15,060
Linux baseline this is something I'd

00:36:13,140 --> 00:36:17,280
want to do if I were spinning up a new

00:36:15,060 --> 00:36:20,790
image or using a new image for the first

00:36:17,280 --> 00:36:23,790
time in my cloud or we're rebuilding for

00:36:20,790 --> 00:36:26,460
updates in our own shuffle on premise or

00:36:23,790 --> 00:36:30,240
whatever and now I can actually run my

00:36:26,460 --> 00:36:32,480
hardening against it and we'll see how

00:36:30,240 --> 00:36:32,480
that goes

00:36:42,599 --> 00:36:44,660
you

00:36:48,440 --> 00:37:01,069
okay so in a minute I think that one

00:36:50,299 --> 00:37:02,569
takes just over a minute to run so I've

00:37:01,069 --> 00:37:05,390
mentioned before things that are in the

00:37:02,569 --> 00:37:08,089
hardening cookbook I'm going to go

00:37:05,390 --> 00:37:10,609
through make some changes against my

00:37:08,089 --> 00:37:12,619
system so what I'm hoping for

00:37:10,609 --> 00:37:14,240
right when I run it without the

00:37:12,619 --> 00:37:16,430
hardening I'm just running a bare-bones

00:37:14,240 --> 00:37:18,319
operating system I've got my security

00:37:16,430 --> 00:37:20,630
requirements or they've been published

00:37:18,319 --> 00:37:23,150
by my compliance team and I run it and

00:37:20,630 --> 00:37:25,069
like there's all these things that

00:37:23,150 --> 00:37:27,710
need to be fixed in this case this

00:37:25,069 --> 00:37:30,230
particular example I think these

00:37:27,710 --> 00:37:31,640
hardening things were based on the NSA

00:37:30,230 --> 00:37:36,079
guidelines so they're not completely

00:37:31,640 --> 00:37:38,930
arbitrary um oh my gosh I guess depends

00:37:36,079 --> 00:37:42,140
on your definition of the NSA but uh I

00:37:38,930 --> 00:37:44,720
have about a hundred that passed and

00:37:42,140 --> 00:37:46,430
another sixty or so that it failed when

00:37:44,720 --> 00:37:49,609
that all comes out and what I'm hoping

00:37:46,430 --> 00:37:51,950
for after the next run after it's been

00:37:49,609 --> 00:37:54,440
hardened and to have no failure so I'm

00:37:51,950 --> 00:37:56,230
meeting all of my security guidelines so

00:37:54,440 --> 00:38:01,730
what I'm hoping for

00:37:56,230 --> 00:38:06,430
see how it's doing okay so it's made

00:38:01,730 --> 00:38:06,430
some changes oh it's

00:38:17,460 --> 00:38:21,720
who made some changes in the system some

00:38:20,130 --> 00:38:25,020
things that needed to be fixed that's

00:38:21,720 --> 00:38:27,180
fine I'm assuming someone who knows more

00:38:25,020 --> 00:38:29,220
about security than I do has done the

00:38:27,180 --> 00:38:31,380
heavy thinking about all of this stuff

00:38:29,220 --> 00:38:34,020
it's been a long time since I've done

00:38:31,380 --> 00:38:38,720
any security work so now I'm going to

00:38:34,020 --> 00:38:38,720
try my verify again and see what happens

00:38:47,720 --> 00:38:56,480
there we go so the things that we're all

00:38:50,640 --> 00:38:56,480

YouTube URL: https://www.youtube.com/watch?v=T3me-R22TAk


