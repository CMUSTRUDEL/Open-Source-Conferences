Title: OSDC 2017 | Is that an Ansible? Stop holding it like a Puppet by Felix Frank
Publication date: 2017-06-02
Playlist: OSDC 2017 | Open Source Data Center Conference
Description: 
	In the configuration management space, Puppet has positioned itself as the de facto industry standard. In recent years, however, competition has been growing, with Ansible taking a prominent place. Both tools share some commonalities, but there are quite severe differences in the respective user experience. Many operations professionals feel drawn to one over the other. But which is the right tool for you? How do you choose? And how do you get most out of your tool of choice? This session systematically gives you the insight needed to answer these questions for your organization.
Captions: 
	00:00:10,120 --> 00:00:18,230
welcome back I hope you have enjoy the

00:00:14,389 --> 00:00:21,279
lunch our next speaker is Felix funk and

00:00:18,230 --> 00:00:32,000
he is talking about differences between

00:00:21,279 --> 00:00:36,700
puppet and on zero it's just eight so

00:00:32,000 --> 00:00:40,219
yeah welcome thanks for being everyone

00:00:36,700 --> 00:00:46,030
yeah as as was announced we are talking

00:00:40,219 --> 00:00:50,629
about interval talking about puppet yeah

00:00:46,030 --> 00:00:53,179
great we back at OSU see I guess some of

00:00:50,629 --> 00:00:57,589
you might remember me from last year but

00:00:53,179 --> 00:01:00,440
I saw some new faces and I guess it's

00:00:57,589 --> 00:01:03,679
just common courtesy to introduce myself

00:01:00,440 --> 00:01:04,100
a little so I'm Felix I'm here from

00:01:03,679 --> 00:01:08,030
Berlin

00:01:04,100 --> 00:01:09,979
I'm a Linux operations person at the

00:01:08,030 --> 00:01:11,960
unbelievable machine company we do

00:01:09,979 --> 00:01:16,939
manage hosting and lots of big data

00:01:11,960 --> 00:01:20,030
things and yeah I've been doing Linux

00:01:16,939 --> 00:01:23,840
things for way too long at this point

00:01:20,030 --> 00:01:26,299
probably and I like tinkering with open

00:01:23,840 --> 00:01:28,930
source things especially configuration

00:01:26,299 --> 00:01:34,539
management things full disclosure I'm

00:01:28,930 --> 00:01:38,439
kind of an old puppet fanboy but I'm

00:01:34,539 --> 00:01:42,920
working hard at also getting my

00:01:38,439 --> 00:01:44,180
accredited ansible nerd badge so I I

00:01:42,920 --> 00:01:47,600
don't think there's much of a conflict

00:01:44,180 --> 00:01:49,789
of interest here and and yeah I'm pretty

00:01:47,600 --> 00:01:54,170
serious about going about the city by

00:01:49,789 --> 00:01:56,149
bike this just the thing I do and I'd

00:01:54,170 --> 00:01:58,390
like to open this up by reading a short

00:01:56,149 --> 00:02:04,119
text to you

00:01:58,390 --> 00:02:09,970
it is the pig go go with to the fountain

00:02:04,119 --> 00:02:17,000
the pig put foot grunt foot in what

00:02:09,970 --> 00:02:19,730
ketchup the doves fly fly is in sky the

00:02:17,000 --> 00:02:21,040
Daffy dropped something to something on

00:02:19,730 --> 00:02:25,079
the pig

00:02:21,040 --> 00:02:32,170
to pick disgusting the pig rattle-rattle

00:02:25,079 --> 00:02:36,069
with us the dove angry the pig leave the

00:02:32,170 --> 00:02:39,359
Dove produce produces chicken wing with

00:02:36,069 --> 00:02:44,409
wing bak no quack

00:02:39,359 --> 00:02:46,359
so does does anyone have any idea who

00:02:44,409 --> 00:02:50,049
might be the author behind this rousing

00:02:46,359 --> 00:02:53,290
piece of literature computer computer is

00:02:50,049 --> 00:02:55,470
actually very good guess so of course

00:02:53,290 --> 00:02:57,879
there's a bit of a story behind this so

00:02:55,470 --> 00:02:59,739
it goes as follows

00:02:57,879 --> 00:03:01,689
apparently that where there was this

00:02:59,739 --> 00:03:04,720
this group of people at some point and

00:03:01,689 --> 00:03:08,349
they had a lot of money and they also

00:03:04,720 --> 00:03:12,400
had a problem they had this IT system

00:03:08,349 --> 00:03:14,980
that received data from some third party

00:03:12,400 --> 00:03:17,950
system and that third party system was a

00:03:14,980 --> 00:03:19,870
bit of a black box and and the data that

00:03:17,950 --> 00:03:22,299
it's sending that the that the group in

00:03:19,870 --> 00:03:26,040
question needed would arrive in an

00:03:22,299 --> 00:03:29,859
author of formats like yet data imports

00:03:26,040 --> 00:03:33,459
once a day twice a day and one day there

00:03:29,859 --> 00:03:37,780
would be comma separated values another

00:03:33,459 --> 00:03:38,560
day some binary format or we text things

00:03:37,780 --> 00:03:42,879
what-have-you

00:03:38,560 --> 00:03:47,650
it was a mess and that meant that the IT

00:03:42,879 --> 00:03:49,599
stuff on the on the business side I had

00:03:47,650 --> 00:03:52,810
to do had to put in lots of manual labor

00:03:49,599 --> 00:03:56,169
and it wasn't it wasn't great was was

00:03:52,810 --> 00:03:58,479
always slow people had to sketcher has

00:03:56,169 --> 00:04:02,109
had a lot and now that they were looking

00:03:58,479 --> 00:04:05,590
for a solution so the bosses had an idea

00:04:02,109 --> 00:04:07,359
and the idea was hey so we're here

00:04:05,590 --> 00:04:09,099
there's this thing called artificial

00:04:07,359 --> 00:04:11,139
intelligence and it's it's supportively

00:04:09,099 --> 00:04:13,870
supposed to be great and wouldn't be

00:04:11,139 --> 00:04:16,479
cool if we had an intelligent system

00:04:13,870 --> 00:04:19,299
that could figure out how to get the

00:04:16,479 --> 00:04:22,630
data that we need from these weird

00:04:19,299 --> 00:04:28,630
formats that we are receiving so are

00:04:22,630 --> 00:04:30,610
they went and found an AI expert and now

00:04:28,630 --> 00:04:33,180
this is a story from for the days when

00:04:30,610 --> 00:04:36,150
when machine learning and

00:04:33,180 --> 00:04:37,800
and artificial intelligence when as much

00:04:36,150 --> 00:04:38,669
of a buzzword as they are these days

00:04:37,800 --> 00:04:41,220
right

00:04:38,669 --> 00:04:43,500
so so now everybody wants to jump on

00:04:41,220 --> 00:04:45,990
that train back in the day the only

00:04:43,500 --> 00:04:49,110
people I really knew how to do this kind

00:04:45,990 --> 00:04:52,800
of thing where folks that are we're a

00:04:49,110 --> 00:04:55,919
very large university that would

00:04:52,800 --> 00:04:58,949
actually have the means to to have this

00:04:55,919 --> 00:05:01,440
kind of AI Institute really wasn't so

00:04:58,949 --> 00:05:04,680
much of a big deal at the time so they

00:05:01,440 --> 00:05:07,020
did manage to find someone who had the

00:05:04,680 --> 00:05:08,849
right mix of expertise and was was

00:05:07,020 --> 00:05:11,940
capable of of designing the kind of

00:05:08,849 --> 00:05:13,949
neural network that that the folks were

00:05:11,940 --> 00:05:18,150
after and and they've brought their

00:05:13,949 --> 00:05:21,449
problem to that person and their

00:05:18,150 --> 00:05:24,840
reaction was of course wait what you you

00:05:21,449 --> 00:05:28,440
are you want to train a neural net with

00:05:24,840 --> 00:05:30,060
with these binary data formats and then

00:05:28,440 --> 00:05:34,110
you expect it to

00:05:30,060 --> 00:05:38,849
like reliably form data that that comes

00:05:34,110 --> 00:05:40,550
in possibly any of those and turn this

00:05:38,849 --> 00:05:42,810
into the format that you require that's

00:05:40,550 --> 00:05:45,630
that's not a good idea that's that's

00:05:42,810 --> 00:05:48,210
really not what you want to do with AI

00:05:45,630 --> 00:05:50,909
what what you want is build a couple

00:05:48,210 --> 00:05:52,680
scripts that that recognizes the DES

00:05:50,909 --> 00:05:53,280
formats that you know about and then be

00:05:52,680 --> 00:05:56,940
done with it

00:05:53,280 --> 00:06:00,110
but yeah I guess that the customer was

00:05:56,940 --> 00:06:02,070
adamant they really wanted to to have

00:06:00,110 --> 00:06:05,460
artificial intelligence and that had

00:06:02,070 --> 00:06:09,080
every stuck on that idea so expert says

00:06:05,460 --> 00:06:13,169
well I guess it's your money to burn

00:06:09,080 --> 00:06:13,970
let's see what we can do so money was

00:06:13,169 --> 00:06:18,060
spent

00:06:13,970 --> 00:06:23,220
systems were bought time passed and the

00:06:18,060 --> 00:06:25,680
expert toiled away and eventually the DA

00:06:23,220 --> 00:06:30,479
was there and it was trained and it

00:06:25,680 --> 00:06:32,849
started its job and really surprising no

00:06:30,479 --> 00:06:37,169
one or almost no one it didn't work at

00:06:32,849 --> 00:06:39,780
all it hardly got any useful data out of

00:06:37,169 --> 00:06:44,460
the stream that it would get from the

00:06:39,780 --> 00:06:46,540
from the remote system so well expert

00:06:44,460 --> 00:06:50,150
says

00:06:46,540 --> 00:06:55,130
guess I told yourself and and that just

00:06:50,150 --> 00:06:57,860
just geez give me some old Linux box and

00:06:55,130 --> 00:06:59,930
I will build some scripts that that do

00:06:57,860 --> 00:07:02,920
what you need and and then that's just

00:06:59,930 --> 00:07:05,480
part ways and everyone will be friends

00:07:02,920 --> 00:07:08,690
and that happened and everyone was more

00:07:05,480 --> 00:07:12,020
or less happy but the thing is the the

00:07:08,690 --> 00:07:14,270
AI class had cost a lot of money lots of

00:07:12,020 --> 00:07:17,030
hardware has been bought lots of time

00:07:14,270 --> 00:07:20,750
had gone into implementing the neuro

00:07:17,030 --> 00:07:24,320
network so it was decided that it wasn't

00:07:20,750 --> 00:07:26,810
really worth just scrapping it so the

00:07:24,320 --> 00:07:29,630
cluster apparently is still operational

00:07:26,810 --> 00:07:31,880
and but it didn't really have a job to

00:07:29,630 --> 00:07:35,180
do so some some tech got bought at some

00:07:31,880 --> 00:07:38,540
point and decided to uh let's just train

00:07:35,180 --> 00:07:41,540
it with some pros and have it come up

00:07:38,540 --> 00:07:45,410
with new stories on the spot and rumor

00:07:41,540 --> 00:07:47,780
has it that this fine little text that I

00:07:45,410 --> 00:07:52,340
read you earlier was written by that

00:07:47,780 --> 00:07:53,990
very AI class er history only knows so

00:07:52,340 --> 00:07:56,660
of course there's a there's a moral to

00:07:53,990 --> 00:08:00,920
the story which is you really shouldn't

00:07:56,660 --> 00:08:03,380
use the absolutely wrong tools for your

00:08:00,920 --> 00:08:08,090
given problems you know yes there's also

00:08:03,380 --> 00:08:10,070
that that old IT truism of when when all

00:08:08,090 --> 00:08:11,960
you have is a hammer then sooner or

00:08:10,070 --> 00:08:14,870
later everything starts looking like a

00:08:11,960 --> 00:08:18,740
nail and you're just going around and

00:08:14,870 --> 00:08:20,690
making all the things but if you find

00:08:18,740 --> 00:08:22,940
yourself in this very position where

00:08:20,690 --> 00:08:25,130
everything starts looking like a nail to

00:08:22,940 --> 00:08:28,430
you you may eventually find yourself

00:08:25,130 --> 00:08:33,680
with a system on your side that will

00:08:28,430 --> 00:08:38,450
tell you know quack so speaking of tools

00:08:33,680 --> 00:08:41,060
of course I want to take in the angle of

00:08:38,450 --> 00:08:43,160
looking at contact management tools as

00:08:41,060 --> 00:08:46,430
you may have surmised from the title

00:08:43,160 --> 00:08:50,480
what do I mean when I say contact

00:08:46,430 --> 00:08:52,750
management ah I am thinking of tools

00:08:50,480 --> 00:08:56,720
from from this space like you know

00:08:52,750 --> 00:08:59,560
cfengine puppet chef edible salt

00:08:56,720 --> 00:08:59,560
MGMT

00:08:59,770 --> 00:09:06,100
and as the title suggests I'm gonna

00:09:02,590 --> 00:09:10,240
focus on on these two puppet and ansible

00:09:06,100 --> 00:09:12,700
I assume that I'm telling nobody here

00:09:10,240 --> 00:09:15,610
anything new but let's just go through

00:09:12,700 --> 00:09:18,130
the motions why do we like config

00:09:15,610 --> 00:09:22,120
management why is it great of course

00:09:18,130 --> 00:09:24,840
there's the aspect that if in the ideal

00:09:22,120 --> 00:09:26,890
case you don't have to do any manual

00:09:24,840 --> 00:09:30,160
tinkering on your machines your

00:09:26,890 --> 00:09:33,370
production is safe from from typos and

00:09:30,160 --> 00:09:36,030
stuff more or less and also you don't

00:09:33,370 --> 00:09:38,860
you don't get to write these fancy

00:09:36,030 --> 00:09:41,230
installation guides anymore like this is

00:09:38,860 --> 00:09:42,970
how you install Apache and this is how

00:09:41,230 --> 00:09:46,050
you make a webserver for customer B

00:09:42,970 --> 00:09:48,610
because yeah that's all in code now and

00:09:46,050 --> 00:09:51,040
which also makes for great repeatable to

00:09:48,610 --> 00:09:54,370
see if you if you have built one web

00:09:51,040 --> 00:09:56,860
server for customer C then installing 2

00:09:54,370 --> 00:10:00,910
or 3 more service for that customer

00:09:56,860 --> 00:10:02,470
becomes easy in the ideal case and my

00:10:00,910 --> 00:10:05,020
personal favorite

00:10:02,470 --> 00:10:08,950
whenever structure becomes code we can

00:10:05,020 --> 00:10:11,470
apply all the lessons that software

00:10:08,950 --> 00:10:15,280
engineering has painstakingly learned

00:10:11,470 --> 00:10:19,390
and and we can apply workflows that they

00:10:15,280 --> 00:10:22,540
have come up with like we use versioning

00:10:19,390 --> 00:10:25,090
systems we can do continuous integration

00:10:22,540 --> 00:10:26,890
on the infrastructure level that can be

00:10:25,090 --> 00:10:29,680
code reviews all these nice things that

00:10:26,890 --> 00:10:32,290
just didn't use to be a thing for

00:10:29,680 --> 00:10:40,150
operations but now they are and that's

00:10:32,290 --> 00:10:44,260
just great ok let's have a quick show of

00:10:40,150 --> 00:10:48,220
hands who has never used either puppet

00:10:44,260 --> 00:10:50,860
or ansible and and who is used both of

00:10:48,220 --> 00:10:53,050
both of them oh that's that's a lot of

00:10:50,860 --> 00:10:55,740
people cool and I assume that the rest

00:10:53,050 --> 00:10:58,270
has either used either or the other so

00:10:55,740 --> 00:11:01,090
to get everyone on the on the same page

00:10:58,270 --> 00:11:03,840
I'm just going really quickly through

00:11:01,090 --> 00:11:07,180
the basics of what what they look like

00:11:03,840 --> 00:11:09,160
so that everyone has a bit of a feeling

00:11:07,180 --> 00:11:12,890
even for the stuff that they are not

00:11:09,160 --> 00:11:15,820
immediately familiar about so

00:11:12,890 --> 00:11:18,380
would it look like if I use puppet to

00:11:15,820 --> 00:11:22,250
model a web server that should do things

00:11:18,380 --> 00:11:25,400
using say varnish as a cache Apache for

00:11:22,250 --> 00:11:28,520
content delivery and let's say get JVM

00:11:25,400 --> 00:11:32,360
to run the actual web application in

00:11:28,520 --> 00:11:36,050
puppet you might write three classes you

00:11:32,360 --> 00:11:39,260
probably wouldn't but you could and the

00:11:36,050 --> 00:11:44,240
each class and in puppet will model one

00:11:39,260 --> 00:11:45,980
of these one of these services and is in

00:11:44,240 --> 00:11:48,710
turn implemented using a number of

00:11:45,980 --> 00:11:53,230
resources and each each resource is like

00:11:48,710 --> 00:11:56,120
could be a file a package or these these

00:11:53,230 --> 00:11:59,960
basic building blocks of a of a running

00:11:56,120 --> 00:12:01,760
system and they're organized in this way

00:11:59,960 --> 00:12:06,320
in puppet can treat each of them

00:12:01,760 --> 00:12:09,500
individually and work with them puppet

00:12:06,320 --> 00:12:12,610
essentially can put them in any other

00:12:09,500 --> 00:12:15,460
better places so you will define

00:12:12,610 --> 00:12:17,960
necessary necessary orders like you have

00:12:15,460 --> 00:12:20,720
dependencies between resources because

00:12:17,960 --> 00:12:23,000
like you probably can only write a

00:12:20,720 --> 00:12:24,710
config file after the package has been

00:12:23,000 --> 00:12:26,600
installed because otherwise there might

00:12:24,710 --> 00:12:30,020
not be a directory where you can put the

00:12:26,600 --> 00:12:33,680
file this kind of thing and patter ban

00:12:30,020 --> 00:12:37,160
will go ahead and find an order that

00:12:33,680 --> 00:12:42,590
satisfies all these dependencies and in

00:12:37,160 --> 00:12:45,020
case of failure can can like tell that

00:12:42,590 --> 00:12:46,910
ok dependencies are fail I don't have to

00:12:45,020 --> 00:12:49,100
look at a certain resource because it

00:12:46,910 --> 00:12:51,590
couldn't probably work this kind of

00:12:49,100 --> 00:12:52,850
thing I'm really crossing all the way

00:12:51,590 --> 00:12:55,460
over this you could probably do a whole

00:12:52,850 --> 00:12:59,060
session like puppet introduction this is

00:12:55,460 --> 00:13:02,450
not this session of course we have a lot

00:12:59,060 --> 00:13:05,650
of more things to cover but edible looks

00:13:02,450 --> 00:13:08,930
really similar but has some some

00:13:05,650 --> 00:13:11,060
differences in the end the details you

00:13:08,930 --> 00:13:15,860
would probably write three roles in

00:13:11,060 --> 00:13:19,490
ansible to to model your three aspects

00:13:15,860 --> 00:13:21,860
and each of the rows consists of a

00:13:19,490 --> 00:13:23,960
number of tasks and which are pretty

00:13:21,860 --> 00:13:25,400
similar to the resources the puppet uses

00:13:23,960 --> 00:13:28,160
but it's

00:13:25,400 --> 00:13:31,400
kind of like a script they are the the

00:13:28,160 --> 00:13:35,870
tasks are run from top to bottom there

00:13:31,400 --> 00:13:38,600
is the the concept of requirements and

00:13:35,870 --> 00:13:41,020
and dependencies in ansible but it's

00:13:38,600 --> 00:13:42,290
different it's not very flexible and

00:13:41,020 --> 00:13:46,779
yeah

00:13:42,290 --> 00:13:50,990
using it has its own challenges

00:13:46,779 --> 00:13:53,810
architecture wise puppet often not

00:13:50,990 --> 00:13:57,010
always but but I say usually has a

00:13:53,810 --> 00:13:59,510
central server called the master and

00:13:57,010 --> 00:14:01,490
this is where the the code the

00:13:59,510 --> 00:14:05,180
infrastructure code lives and in puppets

00:14:01,490 --> 00:14:08,600
manifests the master itself is basically

00:14:05,180 --> 00:14:11,180
just a REST API there's a key value

00:14:08,600 --> 00:14:13,730
store called Huayra that holds the

00:14:11,180 --> 00:14:15,770
actual configuration data and there you

00:14:13,730 --> 00:14:18,470
put stuff like ok which part should

00:14:15,770 --> 00:14:23,600
Apache use on a given system or how much

00:14:18,470 --> 00:14:26,270
memory would I supply to the JVM all

00:14:23,600 --> 00:14:29,080
those kind of things and there's a

00:14:26,270 --> 00:14:31,550
specialized database called puppet DB

00:14:29,080 --> 00:14:33,800
which which stores all kinds of

00:14:31,550 --> 00:14:38,290
information like information about these

00:14:33,800 --> 00:14:40,760
systems that puppet manages and also the

00:14:38,290 --> 00:14:44,029
instructions that the puppet master

00:14:40,760 --> 00:14:47,930
sends to the managed systems it does

00:14:44,029 --> 00:14:50,240
this by speaking to the so called agents

00:14:47,930 --> 00:14:54,230
each machine the puppet manages runs

00:14:50,240 --> 00:14:56,720
puppet agent and the agent just queries

00:14:54,230 --> 00:15:00,529
the API of the master to receive

00:14:56,720 --> 00:15:05,180
instructions there's another part of of

00:15:00,529 --> 00:15:06,589
the stack is called sector and which is

00:15:05,180 --> 00:15:09,350
another piece of software that runs

00:15:06,589 --> 00:15:10,610
right alongside the agent and get us all

00:15:09,350 --> 00:15:13,910
kinds of information about all the

00:15:10,610 --> 00:15:15,650
systems like how much RAM does the

00:15:13,910 --> 00:15:19,430
system have what operating system is

00:15:15,650 --> 00:15:23,360
running whatever and this is

00:15:19,430 --> 00:15:25,730
communicated to the master so puppet

00:15:23,360 --> 00:15:29,420
architecture in a nutshell what ansible

00:15:25,730 --> 00:15:33,770
that's actually there this is one of the

00:15:29,420 --> 00:15:35,600
bigger differences you have an answer

00:15:33,770 --> 00:15:37,550
bill initiator and that's that's not a

00:15:35,600 --> 00:15:39,200
special machine it can basically be any

00:15:37,550 --> 00:15:42,380
machine it can be

00:15:39,200 --> 00:15:46,370
laptop in fact it often is this very

00:15:42,380 --> 00:15:47,990
laptop or the copy goes but it could

00:15:46,370 --> 00:15:52,220
also be any machine in the data center

00:15:47,990 --> 00:15:54,710
and all you need is the the antidote

00:15:52,220 --> 00:15:59,410
software on this machine like on on my

00:15:54,710 --> 00:16:02,030
laptop and and the the inventory the

00:15:59,410 --> 00:16:04,910
infrastructure source code and enter

00:16:02,030 --> 00:16:06,500
ball will go ahead and connect to all

00:16:04,910 --> 00:16:09,890
machines that I want to manage through

00:16:06,500 --> 00:16:12,410
SSH and and do its work that's really

00:16:09,890 --> 00:16:15,620
nice and other other things that it

00:16:12,410 --> 00:16:19,220
needs are part of the source code source

00:16:15,620 --> 00:16:22,220
code which is in basically in two parts

00:16:19,220 --> 00:16:26,300
there's the inventory that is basically

00:16:22,220 --> 00:16:28,400
the yeah that the on the one hand the

00:16:26,300 --> 00:16:32,360
list of machines that I'm going to

00:16:28,400 --> 00:16:35,750
manage and also store off variables

00:16:32,360 --> 00:16:40,090
kind of like Huayra that that defines

00:16:35,750 --> 00:16:40,090
just the details about each machine

00:16:40,390 --> 00:16:47,030
alright that let's speak a little about

00:16:44,720 --> 00:16:50,150
a language because this is when whenever

00:16:47,030 --> 00:16:52,850
I I think and speak about puppet and

00:16:50,150 --> 00:16:57,200
ansible that's that's the thing that can

00:16:52,850 --> 00:16:58,670
get me riled because they are there

00:16:57,200 --> 00:17:01,910
there are some language clashes

00:16:58,670 --> 00:17:04,339
so I've already I already talked about

00:17:01,910 --> 00:17:08,449
their resources in puppet and how each

00:17:04,339 --> 00:17:10,880
of them is like a file or a package or a

00:17:08,449 --> 00:17:13,040
service what have you an apache v host

00:17:10,880 --> 00:17:16,520
and and this is this is called the

00:17:13,040 --> 00:17:18,470
resource types and there's a lot of them

00:17:16,520 --> 00:17:21,589
and ansible has that same concept of

00:17:18,470 --> 00:17:23,030
course but called these modules like so

00:17:21,589 --> 00:17:25,150
at ends of the module is the same thing

00:17:23,030 --> 00:17:27,230
as a puppet resource type basically

00:17:25,150 --> 00:17:28,940
unfortunately puppet uses the term

00:17:27,230 --> 00:17:31,100
module as well but means something

00:17:28,940 --> 00:17:33,890
completely different it's basically the

00:17:31,100 --> 00:17:39,010
puppet module is a piece of code a like

00:17:33,890 --> 00:17:42,100
a library or yeah a standalone

00:17:39,010 --> 00:17:44,420
collection of classes and things and

00:17:42,100 --> 00:17:49,880
ansible has the same concept of course

00:17:44,420 --> 00:17:51,940
but calls it a role now in turn role

00:17:49,880 --> 00:17:55,149
unfortunately in the puppet

00:17:51,940 --> 00:17:59,590
is used in best practices and Ana role

00:17:55,149 --> 00:18:04,690
to puppet is is the concept of you have

00:17:59,590 --> 00:18:07,149
a certain number of roles so that each

00:18:04,690 --> 00:18:11,409
machine in your data center can have one

00:18:07,149 --> 00:18:15,100
specific role and yeah such works on a

00:18:11,409 --> 00:18:19,750
very different granularity than enter

00:18:15,100 --> 00:18:22,809
the roles so must be careful to to avoid

00:18:19,750 --> 00:18:26,590
this terminology when when speaking of

00:18:22,809 --> 00:18:28,450
about the concepts of your management

00:18:26,590 --> 00:18:31,809
and implementations because yeah the

00:18:28,450 --> 00:18:35,080
term role to ansible means something

00:18:31,809 --> 00:18:38,529
very different and people doesn't really

00:18:35,080 --> 00:18:41,830
have anything like the paw Patrol there

00:18:38,529 --> 00:18:44,919
are host groups and they can do a

00:18:41,830 --> 00:18:49,299
similar job but it's it's yet again a

00:18:44,919 --> 00:18:53,110
different level of granularity so yeah

00:18:49,299 --> 00:18:56,679
that doesn't really work and finally as

00:18:53,110 --> 00:18:59,289
I as I noted earlier probably calls a

00:18:56,679 --> 00:19:00,970
resource intensive of the task I think

00:18:59,289 --> 00:19:03,850
that one is actually pretty apt because

00:19:00,970 --> 00:19:05,740
they are different and it's just good to

00:19:03,850 --> 00:19:08,529
keep that in mind that when when you

00:19:05,740 --> 00:19:10,629
speak to someone who's familiar with a

00:19:08,529 --> 00:19:13,210
different tool stick that they might use

00:19:10,629 --> 00:19:20,679
these other terms but essentially the

00:19:13,210 --> 00:19:22,870
same same concept all right okay let's

00:19:20,679 --> 00:19:26,019
let's try and get a feeling for how how

00:19:22,870 --> 00:19:28,480
it what it's like to to use either of

00:19:26,019 --> 00:19:32,200
these tools in your everyday life with

00:19:28,480 --> 00:19:37,240
puppet what you will be doing in your in

00:19:32,200 --> 00:19:39,129
your day to day is of course you you're

00:19:37,240 --> 00:19:41,950
editing your source code your manifest

00:19:39,129 --> 00:19:44,649
and also put data into your high-res

00:19:41,950 --> 00:19:49,600
dolls this is what puppet code looks

00:19:44,649 --> 00:19:53,139
like it's a bit like C ish PHP like

00:19:49,600 --> 00:19:58,990
there's curly braces for blocks as

00:19:53,139 --> 00:20:02,710
there's if expressions and this year is

00:19:58,990 --> 00:20:05,380
a resource definition and in this case

00:20:02,710 --> 00:20:07,780
the the resource type is packaged and

00:20:05,380 --> 00:20:09,730
go use it's the type of the resource and

00:20:07,780 --> 00:20:13,030
the result has a name and the whole

00:20:09,730 --> 00:20:17,700
thing is written kind of like a hash

00:20:13,030 --> 00:20:21,130
structure in like you know pearl or Ruby

00:20:17,700 --> 00:20:25,179
so that's that's publish in nutshell and

00:20:21,130 --> 00:20:28,150
higher are variables typically stored in

00:20:25,179 --> 00:20:30,610
yellow it's just the same choice to

00:20:28,150 --> 00:20:32,950
represent data so pretty popular but

00:20:30,610 --> 00:20:36,250
there's different beckons as well you

00:20:32,950 --> 00:20:40,000
could have a database or different

00:20:36,250 --> 00:20:43,960
things there is open source code

00:20:40,000 --> 00:20:45,370
available for for puppet you can you can

00:20:43,960 --> 00:20:48,130
download modules from the internet and

00:20:45,370 --> 00:20:50,200
puppet has this polar called the puppet

00:20:48,130 --> 00:20:52,270
Forge which is kind of like the Ruby

00:20:50,200 --> 00:20:54,850
Forge or PI central or what have you

00:20:52,270 --> 00:20:56,770
like most probably among languages have

00:20:54,850 --> 00:20:59,440
the kind of repository and probably it's

00:20:56,770 --> 00:21:05,470
the forge and there's that a lot up

00:20:59,440 --> 00:21:06,580
there so most of the most popular kinds

00:21:05,470 --> 00:21:08,470
of software that you have in your data

00:21:06,580 --> 00:21:13,690
send up you will probably find support

00:21:08,470 --> 00:21:15,400
for them on puppet forge this is a

00:21:13,690 --> 00:21:18,190
visual video as well

00:21:15,400 --> 00:21:20,890
sorry visualization of of one of the

00:21:18,190 --> 00:21:24,419
most basic perspectives pattern I won't

00:21:20,890 --> 00:21:28,960
go into they're really out of scope but

00:21:24,419 --> 00:21:31,150
by having your your puppet classes

00:21:28,960 --> 00:21:34,750
organized and rows and profiles this

00:21:31,150 --> 00:21:37,210
allows you to yeah you have this design

00:21:34,750 --> 00:21:41,280
pattern that brings some order in your

00:21:37,210 --> 00:21:45,760
code base and and enables you to yeah

00:21:41,280 --> 00:21:47,860
essentially remain sane while your

00:21:45,760 --> 00:21:50,650
infrastructure keeps growing and you

00:21:47,860 --> 00:21:53,140
have to have a code base that is still

00:21:50,650 --> 00:21:57,760
maintainable and readable so rosin

00:21:53,140 --> 00:22:00,610
profiles are really helpful for that you

00:21:57,760 --> 00:22:02,650
can use a so-called external node

00:22:00,610 --> 00:22:06,760
classifiers and one of the most popular

00:22:02,650 --> 00:22:08,710
is the four-man it's a cool tool and and

00:22:06,760 --> 00:22:11,370
you get a web interface you can deploy

00:22:08,710 --> 00:22:14,650
your machines gives you lots of power

00:22:11,370 --> 00:22:18,190
there's a orchestration tool called and

00:22:14,650 --> 00:22:19,539
collective I I would have included some

00:22:18,190 --> 00:22:21,850
kind of diagram that shows you

00:22:19,539 --> 00:22:24,820
how it works but it turns out it's kind

00:22:21,850 --> 00:22:27,879
of complex and and beyond beyond scope

00:22:24,820 --> 00:22:32,859
so I just included this magical unicorn

00:22:27,879 --> 00:22:35,739
here but yeah and collective for the for

00:22:32,859 --> 00:22:39,999
the orchestration needs with puppet

00:22:35,739 --> 00:22:42,479
there are visualization tools like

00:22:39,999 --> 00:22:44,859
puppet board that will just give you a

00:22:42,479 --> 00:22:48,729
view into what's going on in the

00:22:44,859 --> 00:22:51,820
infrastructure and and show you all the

00:22:48,729 --> 00:22:56,830
other precious data imaginable formats

00:22:51,820 --> 00:23:00,429
and yeah it's a really rich ecosystem of

00:22:56,830 --> 00:23:03,879
tools that that help you take control of

00:23:00,429 --> 00:23:09,549
your data center and that was a lot to

00:23:03,879 --> 00:23:13,239
take in so just let's take a deep breath

00:23:09,549 --> 00:23:15,489
and all of this is not really important

00:23:13,239 --> 00:23:18,159
to what I'm going to relay here I'm just

00:23:15,489 --> 00:23:20,919
trying to level the field a little give

00:23:18,159 --> 00:23:24,179
everyone a bit of a feeling what it's

00:23:20,919 --> 00:23:27,009
like to work with the tools so let's

00:23:24,179 --> 00:23:29,619
cover ansible real quick and then get to

00:23:27,009 --> 00:23:33,429
the to the actual meat of the

00:23:29,619 --> 00:23:36,099
presentation so what ansible things are

00:23:33,429 --> 00:23:42,909
similar of course you are writing source

00:23:36,099 --> 00:23:46,119
code and putting data into variables you

00:23:42,909 --> 00:23:48,849
will you will want to put most of the

00:23:46,119 --> 00:23:52,629
the code that does work in in these end

00:23:48,849 --> 00:23:55,869
of the roles so that as some your code

00:23:52,629 --> 00:23:58,869
is organized and the the play books that

00:23:55,869 --> 00:24:03,399
you keep hearing about basically the way

00:23:58,869 --> 00:24:05,889
to tell n-tuple okay so for the DES this

00:24:03,399 --> 00:24:10,349
workflow that I have and on on these

00:24:05,889 --> 00:24:15,479
hosts I want you to apply this this

00:24:10,349 --> 00:24:19,179
collection of roles and make those work

00:24:15,479 --> 00:24:23,440
it kind of looks like this this is code

00:24:19,179 --> 00:24:25,629
for a speculative role fair warning if

00:24:23,440 --> 00:24:29,349
you if you really don't like yamo you

00:24:25,629 --> 00:24:31,859
will not like ansible because it just

00:24:29,349 --> 00:24:33,460
it's just yellow all the way down

00:24:31,859 --> 00:24:37,810
everything you write

00:24:33,460 --> 00:24:41,760
we'll be in yellow but if you if you

00:24:37,810 --> 00:24:43,180
manage that it's yeah it's kind of

00:24:41,760 --> 00:24:46,510
intuitive

00:24:43,180 --> 00:24:48,520
there's templating going on in all the

00:24:46,510 --> 00:24:51,760
things that you write so this is this is

00:24:48,520 --> 00:24:54,040
a template expression and that's if

00:24:51,760 --> 00:24:56,500
you've seen the vault presentations

00:24:54,040 --> 00:25:00,090
basically the same deal the things in

00:24:56,500 --> 00:25:03,780
the curly braces just gets substituted

00:25:00,090 --> 00:25:07,660
the playbook itself may look like this

00:25:03,780 --> 00:25:09,910
and tell the telly engine okay do things

00:25:07,660 --> 00:25:13,450
to the web server and then do things to

00:25:09,910 --> 00:25:15,550
proxy service what have you and we'll

00:25:13,450 --> 00:25:18,880
also has an open source repository

00:25:15,550 --> 00:25:29,830
called end of the galaxy and basically

00:25:18,880 --> 00:25:31,360
same deal as habit forge and defining

00:25:29,830 --> 00:25:33,700
defining the variables that have your

00:25:31,360 --> 00:25:36,580
configuration data again pretty much

00:25:33,700 --> 00:25:39,550
same new as in IRA you write llamo files

00:25:36,580 --> 00:25:45,520
and you have keys and values it's what's

00:25:39,550 --> 00:25:47,620
going on I've shown this diagram before

00:25:45,520 --> 00:25:50,760
but I want to reiterate it because it's

00:25:47,620 --> 00:25:52,870
really such a huge deal in interval you

00:25:50,760 --> 00:25:55,000
you have your code and your kit and

00:25:52,870 --> 00:25:57,520
wherever you get your git repository you

00:25:55,000 --> 00:26:02,370
can you can just run ansible and it's

00:25:57,520 --> 00:26:05,860
and it's just just very easy and and

00:26:02,370 --> 00:26:08,100
yeah flexible flexible way of using your

00:26:05,860 --> 00:26:10,600
software you're not tied down to this

00:26:08,100 --> 00:26:14,410
central server that has to be maintained

00:26:10,600 --> 00:26:18,940
it has to be super secure etc that's

00:26:14,410 --> 00:26:21,310
just yeah very central part the Foreman

00:26:18,940 --> 00:26:25,930
also has n to the support so you can you

00:26:21,310 --> 00:26:27,880
can use similar aspects kind of like a

00:26:25,930 --> 00:26:31,660
puppet there will be a presentation

00:26:27,880 --> 00:26:35,980
about the form and later the afternoon

00:26:31,660 --> 00:26:38,290
so if you have not really got a feeling

00:26:35,980 --> 00:26:41,020
for that but might want a web interface

00:26:38,290 --> 00:26:42,370
for your puppet or interval stuff you

00:26:41,020 --> 00:26:44,470
might want to check the form an out so

00:26:42,370 --> 00:26:48,250
it's supposed to be pretty cool

00:26:44,470 --> 00:26:50,770
I have not really tried this another

00:26:48,250 --> 00:26:54,340
thing I have not tried is antidote our

00:26:50,770 --> 00:26:59,260
but the thing is without ansible tawa

00:26:54,340 --> 00:27:01,809
some some functionality in ansible that

00:26:59,260 --> 00:27:05,200
that I consider rather crucial is just

00:27:01,809 --> 00:27:07,659
missing and people that have asked for

00:27:05,200 --> 00:27:11,260
some for certain things on mating this

00:27:07,659 --> 00:27:12,970
etcetera have just been like redirected

00:27:11,260 --> 00:27:15,220
to our yeah that that's available about

00:27:12,970 --> 00:27:17,380
its in power and and it's used to be

00:27:15,220 --> 00:27:21,460
commercial apparently it's going to be

00:27:17,380 --> 00:27:23,710
freely available eventually but it's not

00:27:21,460 --> 00:27:26,049
yet and I haven't tried it it's supposed

00:27:23,710 --> 00:27:28,990
to be cool but if you don't have it and

00:27:26,049 --> 00:27:36,039
little can feel like a pretty bare-bones

00:27:28,990 --> 00:27:39,960
experience so let's talk about how these

00:27:36,039 --> 00:27:43,600
tools are generally pretty similar so

00:27:39,960 --> 00:27:45,880
it's time to cut to the chase and talk

00:27:43,600 --> 00:27:52,960
about how they are really different in

00:27:45,880 --> 00:27:56,169
some ways so what what I'd like you to

00:27:52,960 --> 00:27:58,299
understand about puppet is that the the

00:27:56,169 --> 00:28:01,929
idea of puppet when you when you go

00:27:58,299 --> 00:28:05,950
ahead and implement management of your

00:28:01,929 --> 00:28:10,360
data center using puppet is that you you

00:28:05,950 --> 00:28:13,780
create this this abstract model of how

00:28:10,360 --> 00:28:17,679
everything works and puppet is the

00:28:13,780 --> 00:28:21,159
engine that will make this model come

00:28:17,679 --> 00:28:23,679
into reality by having by maintaining

00:28:21,159 --> 00:28:26,289
state certain States on each and every

00:28:23,679 --> 00:28:31,659
one of your machines and and this state

00:28:26,289 --> 00:28:35,950
should eventually converge into a pretty

00:28:31,659 --> 00:28:38,140
much into an unchanging global state so

00:28:35,950 --> 00:28:41,289
there can be instances where puppet has

00:28:38,140 --> 00:28:44,799
to repeatedly make some make some

00:28:41,289 --> 00:28:49,210
changes to get you where you need to be

00:28:44,799 --> 00:28:51,730
but ideally this will be finished at

00:28:49,210 --> 00:28:55,179
some point and then puppet will not have

00:28:51,730 --> 00:28:57,960
any more work to do except of course you

00:28:55,179 --> 00:29:00,450
change the code in order to

00:28:57,960 --> 00:29:04,529
to introduce change that you need in

00:29:00,450 --> 00:29:07,620
your systems let's try and visualize

00:29:04,529 --> 00:29:11,070
this a little so imagine this is part of

00:29:07,620 --> 00:29:13,830
your whole infrastructure like a couple

00:29:11,070 --> 00:29:17,690
of rec knowledge service and you have

00:29:13,830 --> 00:29:23,029
your puppet setup and this little

00:29:17,690 --> 00:29:26,399
colorful box supposed to represent the

00:29:23,029 --> 00:29:28,679
global state that that you need your

00:29:26,399 --> 00:29:31,350
infrastructure to have and it's it's

00:29:28,679 --> 00:29:34,320
basically the the state assume a puppet

00:29:31,350 --> 00:29:37,380
emerges from from the code that you're

00:29:34,320 --> 00:29:40,529
right and and that yeah that has

00:29:37,380 --> 00:29:43,500
basically you supply some manifest code

00:29:40,529 --> 00:29:45,720
for for each node that that is in your

00:29:43,500 --> 00:29:49,080
infrastructure and and the code of

00:29:45,720 --> 00:29:52,500
course uses data from Huayra it uses

00:29:49,080 --> 00:29:54,539
data from the puppet dB like the facts

00:29:52,500 --> 00:29:58,950
that has been collected by the different

00:29:54,539 --> 00:30:04,190
machines so it's it's it's this it's a

00:29:58,950 --> 00:30:07,919
blob of yeah of information that puppet

00:30:04,190 --> 00:30:10,110
compiles into these catalogs which are

00:30:07,919 --> 00:30:14,279
yeah so for for each and every machine

00:30:10,110 --> 00:30:19,320
the catalog defines what puppet would

00:30:14,279 --> 00:30:21,419
like it to look like basically so these

00:30:19,320 --> 00:30:24,299
these can be of different complexities

00:30:21,419 --> 00:30:26,789
so for for one machine puppet might just

00:30:24,299 --> 00:30:28,980
manage very little state and only care

00:30:26,789 --> 00:30:31,740
about a handful of files on some

00:30:28,980 --> 00:30:34,440
different machines it might really have

00:30:31,740 --> 00:30:38,940
control about hundreds of packages and

00:30:34,440 --> 00:30:42,690
and dozens of files and there's a whole

00:30:38,940 --> 00:30:45,419
range there but the thing is puppet has

00:30:42,690 --> 00:30:48,330
this view for each machine this this

00:30:45,419 --> 00:30:52,289
vision if you will and it it constantly

00:30:48,330 --> 00:30:57,330
projects this view on each machine and

00:30:52,289 --> 00:31:00,090
if if a machine is not synchronized with

00:30:57,330 --> 00:31:03,270
this with this representation with this

00:31:00,090 --> 00:31:09,809
catalog then part will take action to to

00:31:03,270 --> 00:31:11,610
make it conform to that the flow of this

00:31:09,809 --> 00:31:14,460
is basically each machine

00:31:11,610 --> 00:31:16,590
well from time to time call into the

00:31:14,460 --> 00:31:19,380
master and make a request for a new

00:31:16,590 --> 00:31:23,700
catalog and at that time it also sends

00:31:19,380 --> 00:31:27,420
its current collection effects that

00:31:23,700 --> 00:31:30,870
happens on each request and this may

00:31:27,420 --> 00:31:32,640
mean that since puppet now received new

00:31:30,870 --> 00:31:36,090
facts and compiled a new catalog that

00:31:32,640 --> 00:31:39,270
its internal representation of the

00:31:36,090 --> 00:31:42,360
system state may change because each

00:31:39,270 --> 00:31:46,950
catalog can use various information from

00:31:42,360 --> 00:31:50,130
Papa DB or from from Huayra and as the

00:31:46,950 --> 00:31:52,919
new catalog is being sent out the the

00:31:50,130 --> 00:31:57,120
internal model has changed and this will

00:31:52,919 --> 00:31:59,100
then perhaps manifest itself in a change

00:31:57,120 --> 00:32:02,940
to the catalog that different machines

00:31:59,100 --> 00:32:05,390
will eventually receive and yeah this

00:32:02,940 --> 00:32:08,130
this could just keep happening because

00:32:05,390 --> 00:32:10,799
changes lead to other changes but again

00:32:08,130 --> 00:32:12,540
the goal of your code should be that

00:32:10,799 --> 00:32:15,660
your systems can converge into this

00:32:12,540 --> 00:32:22,460
state that puppet can then maintain more

00:32:15,660 --> 00:32:27,320
or less indefinitely okay who's confused

00:32:22,460 --> 00:32:30,210
to take a cue from James that's good

00:32:27,320 --> 00:32:32,130
nobody yet and what interval it's is a

00:32:30,210 --> 00:32:35,160
very different deal actually

00:32:32,130 --> 00:32:40,919
so what ansible does is it gives you the

00:32:35,160 --> 00:32:45,660
tools to to implement things that happen

00:32:40,919 --> 00:32:47,940
in a distributed systems system so as

00:32:45,660 --> 00:32:52,290
well doesn't care about state and that

00:32:47,940 --> 00:32:56,220
it converges in some unchanging state

00:32:52,290 --> 00:32:59,460
you you can of course write code that if

00:32:56,220 --> 00:33:01,980
you just keep running it will eventually

00:32:59,460 --> 00:33:07,320
have your systems in a state where no

00:33:01,980 --> 00:33:09,090
change will need to occur but that's

00:33:07,320 --> 00:33:14,280
actually not popular intervals strong

00:33:09,090 --> 00:33:17,669
suit you the thing is you can you also

00:33:14,280 --> 00:33:22,710
have this this representation of what

00:33:17,669 --> 00:33:25,190
your infrastructure is but the code with

00:33:22,710 --> 00:33:29,090
a code you are very free to

00:33:25,190 --> 00:33:32,330
I really just want to project this very

00:33:29,090 --> 00:33:36,080
certain part of the information to very

00:33:32,330 --> 00:33:42,950
specific machines and you are very free

00:33:36,080 --> 00:33:46,670
to do this again some visualization the

00:33:42,950 --> 00:33:48,740
ansible inventory is like that

00:33:46,670 --> 00:33:51,950
representation puppet it's a lot more

00:33:48,740 --> 00:33:56,330
static because there is that there isn't

00:33:51,950 --> 00:34:00,500
that you know kind of floaty state

00:33:56,330 --> 00:34:02,300
scible uses to do its work because there

00:34:00,500 --> 00:34:04,640
there isn't there isn't this kind of

00:34:02,300 --> 00:34:06,830
database that's being maintained it's

00:34:04,640 --> 00:34:09,619
always just the inventory as you check

00:34:06,830 --> 00:34:15,080
it out from your get or subversion or

00:34:09,619 --> 00:34:16,669
what have you and ok let's let's just go

00:34:15,080 --> 00:34:19,460
through motions of what happens when you

00:34:16,669 --> 00:34:22,070
run a simple playbook that say speaks to

00:34:19,460 --> 00:34:24,470
these three machines over there first

00:34:22,070 --> 00:34:28,369
thing as it always does is run the

00:34:24,470 --> 00:34:31,550
so-called setup module which means it

00:34:28,369 --> 00:34:33,679
receives information kind of like it

00:34:31,550 --> 00:34:36,830
actually does support vector so if you

00:34:33,679 --> 00:34:39,139
have effect on your machines as you have

00:34:36,830 --> 00:34:41,119
a puppet then the information from

00:34:39,139 --> 00:34:44,960
vector is available as so called host

00:34:41,119 --> 00:34:48,139
variables and also even without factor

00:34:44,960 --> 00:34:50,389
interval we'll get some information from

00:34:48,139 --> 00:34:54,679
all the machines and populate these host

00:34:50,389 --> 00:34:57,109
variables so it is kind of like the the

00:34:54,679 --> 00:34:59,960
whole puppet dance with sector and

00:34:57,109 --> 00:35:03,260
things but the thing is these these are

00:34:59,960 --> 00:35:05,570
very fleeting so only once you launch

00:35:03,260 --> 00:35:08,390
ansible these host was come into

00:35:05,570 --> 00:35:11,390
existence and as soon as ends it all is

00:35:08,390 --> 00:35:17,540
done with the job at hand these are just

00:35:11,390 --> 00:35:19,190
gone so with this now complete set of

00:35:17,540 --> 00:35:22,190
information and will goes ahead and

00:35:19,190 --> 00:35:25,609
tells the machines what to do in order

00:35:22,190 --> 00:35:27,560
and that is basically it all other

00:35:25,609 --> 00:35:30,770
things that are in your code will be run

00:35:27,560 --> 00:35:34,280
on all the machines in parallel and and

00:35:30,770 --> 00:35:37,760
that is it then a more complex playbook

00:35:34,280 --> 00:35:38,600
might talk to all parts of your

00:35:37,760 --> 00:35:41,810
infrastructure

00:35:38,600 --> 00:35:46,010
turn collect all their host variables

00:35:41,810 --> 00:35:48,250
and finally when it has this larger view

00:35:46,010 --> 00:35:51,140
of your whole infrastructure it can

00:35:48,250 --> 00:35:53,060
speak to this one very special machine

00:35:51,140 --> 00:35:56,930
and the register things there I don't

00:35:53,060 --> 00:35:58,940
know like put all the audio P addresses

00:35:56,930 --> 00:36:02,330
that are collected into a host file or

00:35:58,940 --> 00:36:08,950
configure some some l-dub else a CLS

00:36:02,330 --> 00:36:12,560
what have you these kind of things so

00:36:08,950 --> 00:36:15,980
summarizing you have on the one hand you

00:36:12,560 --> 00:36:19,100
have puppet that really has this given

00:36:15,980 --> 00:36:21,890
idea of for each single machine how it

00:36:19,100 --> 00:36:27,200
should look like and I always tell each

00:36:21,890 --> 00:36:29,450
machine to get in line and be in that

00:36:27,200 --> 00:36:33,740
state that it imagines whereas with

00:36:29,450 --> 00:36:36,290
ansible and the bill is basically it it

00:36:33,740 --> 00:36:44,680
does what you want whenever you wanted

00:36:36,290 --> 00:36:47,690
but it's a very point in time thing I

00:36:44,680 --> 00:36:51,980
realize this is probably very abstract

00:36:47,690 --> 00:36:54,170
and and it has maybe not not yet told

00:36:51,980 --> 00:36:59,150
you so much about what the real

00:36:54,170 --> 00:37:02,150
difference is so a metaphor that I I've

00:36:59,150 --> 00:37:06,080
come up with to to even might make it

00:37:02,150 --> 00:37:09,830
more clear to myself what I should try

00:37:06,080 --> 00:37:12,470
and make the tools to is to imagine that

00:37:09,830 --> 00:37:15,620
your data center is a theater stage and

00:37:12,470 --> 00:37:19,400
all your machines are actors on on the

00:37:15,620 --> 00:37:22,940
stage and you want them to yeah make a

00:37:19,400 --> 00:37:25,640
certain performance right so what puppet

00:37:22,940 --> 00:37:28,520
does to make things happen is you have

00:37:25,640 --> 00:37:31,520
this this person behind the stage and

00:37:28,520 --> 00:37:35,480
and what they do is they are constantly

00:37:31,520 --> 00:37:37,160
writing personalized scripts so each

00:37:35,480 --> 00:37:40,040
actor gets gets a personalized script

00:37:37,160 --> 00:37:43,190
that tells the actor what should do and

00:37:40,040 --> 00:37:44,540
in which order and it ends the scripts

00:37:43,190 --> 00:37:47,600
to the actors and then pretty much

00:37:44,540 --> 00:37:50,720
doesn't care it relies on the actor to

00:37:47,600 --> 00:37:53,750
to do the correct things with with the

00:37:50,720 --> 00:37:56,450
script that is created

00:37:53,750 --> 00:38:00,530
whereas ansible doesn't bother Annabel

00:37:56,450 --> 00:38:03,830
really just standing behind the stage

00:38:00,530 --> 00:38:05,900
and it's telling the actors okay now you

00:38:03,830 --> 00:38:08,600
folks go on stage and I will be telling

00:38:05,900 --> 00:38:12,110
you what you do and everyone do what I

00:38:08,600 --> 00:38:14,080
tell you and usually all the all the

00:38:12,110 --> 00:38:16,970
actors will do the exact same thing

00:38:14,080 --> 00:38:19,520
whenever they are on stage and ansible

00:38:16,970 --> 00:38:23,180
gives the same instruction to all of

00:38:19,520 --> 00:38:25,400
them so really very very different ways

00:38:23,180 --> 00:38:27,530
of setting up a play and it really

00:38:25,400 --> 00:38:30,860
depends on on what kind of performance

00:38:27,530 --> 00:38:33,290
you expect so I guess neither of them

00:38:30,860 --> 00:38:38,750
will be able to do an elaborate expir

00:38:33,290 --> 00:38:40,520
but each of them can do magnificent yeah

00:38:38,750 --> 00:38:44,000
pretty pretty great things that happen

00:38:40,520 --> 00:38:47,660
so it just depends what I'm getting it

00:38:44,000 --> 00:38:52,040
it is it's it's problematic if you go

00:38:47,660 --> 00:38:54,740
ahead and try and make the things that

00:38:52,040 --> 00:38:57,290
puppet does happen with ansible because

00:38:54,740 --> 00:39:01,970
they are really quite different in their

00:38:57,290 --> 00:39:05,330
approach also in case you are your third

00:39:01,970 --> 00:39:08,360
James talked about MGMT I guess in in

00:39:05,330 --> 00:39:10,400
this metaphor it's like there is no

00:39:08,360 --> 00:39:13,430
director and and all the actors just

00:39:10,400 --> 00:39:16,360
have I don't know GoPro cameras on their

00:39:13,430 --> 00:39:20,540
heads and Google glass and just you know

00:39:16,360 --> 00:39:22,280
have this elaborate choreography going

00:39:20,540 --> 00:39:27,320
on that everyone is always on the same

00:39:22,280 --> 00:39:31,480
page which is yeah interesting don't

00:39:27,320 --> 00:39:37,010
know about Shakespeare but can do can do

00:39:31,480 --> 00:39:41,060
awesome things deadly so a thing that

00:39:37,010 --> 00:39:43,910
keeps coming up is that I think this is

00:39:41,060 --> 00:39:47,120
even in some best practices document or

00:39:43,910 --> 00:39:49,760
other that people create a site or demo

00:39:47,120 --> 00:39:52,760
file for the ansible which is basically

00:39:49,760 --> 00:39:58,630
the playbook for all the things how how

00:39:52,760 --> 00:39:58,630
to manage the whole project whatever and

00:39:58,810 --> 00:40:04,100
yeah I'm really not down with this

00:40:02,000 --> 00:40:05,570
approach because there that's just with

00:40:04,100 --> 00:40:07,100
it

00:40:05,570 --> 00:40:09,170
the least of which that it just doesn't

00:40:07,100 --> 00:40:13,640
scale if your infrastructure grows you

00:40:09,170 --> 00:40:20,840
will have yeah exponential growing pains

00:40:13,640 --> 00:40:24,380
with ansible and yeah some some other

00:40:20,840 --> 00:40:26,660
things that you might be very off if you

00:40:24,380 --> 00:40:31,550
if you approach ansible with a puppet

00:40:26,660 --> 00:40:35,090
mindset is there are tags in ansible but

00:40:31,550 --> 00:40:37,640
they are different from puppet and I

00:40:35,090 --> 00:40:40,490
found them to be less flexible and you

00:40:37,640 --> 00:40:43,190
you cannot really rely on them to to

00:40:40,490 --> 00:40:46,150
organize workflows over a longer time

00:40:43,190 --> 00:40:48,770
they are they're good one-shot tools but

00:40:46,150 --> 00:40:53,270
probably not flexible enough to to

00:40:48,770 --> 00:40:56,510
satisfy all your needs on a on a yeah a

00:40:53,270 --> 00:40:58,460
longer time frame I found it much better

00:40:56,510 --> 00:41:01,430
to have to have specialized play books

00:40:58,460 --> 00:41:03,980
like whenever when you realize you have

00:41:01,430 --> 00:41:06,860
these these specialized tasks that you

00:41:03,980 --> 00:41:11,180
need doing now and again just create a

00:41:06,860 --> 00:41:13,970
playbook that does just that and also

00:41:11,180 --> 00:41:15,980
what ansible you really want to once in

00:41:13,970 --> 00:41:18,350
a while create a playbook that is just

00:41:15,980 --> 00:41:21,050
fire-and-forget I need to run this now I

00:41:18,350 --> 00:41:24,920
just write the playbook I won't even put

00:41:21,050 --> 00:41:32,240
it to get it's just for making things

00:41:24,920 --> 00:41:34,490
happen right now talking about dry code

00:41:32,240 --> 00:41:37,490
like you don't want to repeat yourself

00:41:34,490 --> 00:41:42,710
copy pasting code is usually bad for

00:41:37,490 --> 00:41:44,900
maintainability and if you try to do

00:41:42,710 --> 00:41:48,140
this on on the level of your playbooks

00:41:44,900 --> 00:41:50,840
like on all the orchestration code that

00:41:48,140 --> 00:41:52,970
you have you will be you will have a

00:41:50,840 --> 00:41:55,550
hard time like if you if you want to

00:41:52,970 --> 00:41:57,710
make sure that you know there is this

00:41:55,550 --> 00:42:01,310
one playbook file and this is the one

00:41:57,710 --> 00:42:03,170
that invokes Apache and varnish rolls

00:42:01,310 --> 00:42:05,420
then that should be the playbook that

00:42:03,170 --> 00:42:07,670
does that and when I need this in other

00:42:05,420 --> 00:42:09,200
contexts and I will include this

00:42:07,670 --> 00:42:13,210
playbook in another playbook or

00:42:09,200 --> 00:42:16,150
something and if you do this Quantic

00:42:13,210 --> 00:42:21,099
consequently then you

00:42:16,150 --> 00:42:23,829
we'll end up very frustrated so my

00:42:21,099 --> 00:42:26,079
advice is not to bother even but just

00:42:23,829 --> 00:42:28,930
just do whatever it takes and be liberal

00:42:26,079 --> 00:42:31,119
and your PlayBook design now the rules

00:42:28,930 --> 00:42:33,569
themselves like the varnish or Petri

00:42:31,119 --> 00:42:37,420
roll there should be separation of

00:42:33,569 --> 00:42:40,000
concern so a thing that is managed by

00:42:37,420 --> 00:42:42,130
the ansible role should everybody sorry

00:42:40,000 --> 00:42:44,099
buddy Apache roll for example should not

00:42:42,130 --> 00:42:46,809
be managed in other roles as well and

00:42:44,099 --> 00:42:52,539
that is the thing where you want to be

00:42:46,809 --> 00:42:54,579
dry last but not least there's there's

00:42:52,539 --> 00:42:57,369
lots of best practices that is

00:42:54,579 --> 00:42:59,680
advertised and one of the first things

00:42:57,369 --> 00:43:01,720
that I've been told about ansible by

00:42:59,680 --> 00:43:04,630
someone who had more experience and and

00:43:01,720 --> 00:43:07,119
kind of introduced me was yeah look at

00:43:04,630 --> 00:43:09,789
those but not all of them are really

00:43:07,119 --> 00:43:12,069
great there's there's some tips on how

00:43:09,789 --> 00:43:15,029
to structure your code etc and so what

00:43:12,069 --> 00:43:19,059
is really good others not so much so

00:43:15,029 --> 00:43:22,539
it's good to have an open mind be

00:43:19,059 --> 00:43:26,559
looking around and yeah not to take

00:43:22,539 --> 00:43:28,779
everything to the letter but let's let's

00:43:26,559 --> 00:43:32,289
take a closer look at what it looks like

00:43:28,779 --> 00:43:36,400
when when folks go ahead and try to make

00:43:32,289 --> 00:43:41,770
ansible into this puppet shape and do

00:43:36,400 --> 00:43:45,000
everything through psycho piano so you

00:43:41,770 --> 00:43:47,920
have your interval infrastructure and

00:43:45,000 --> 00:43:50,470
first thing you do is of course as well

00:43:47,920 --> 00:43:54,010
connect to all machines get us there

00:43:50,470 --> 00:43:56,470
host variables and information and then

00:43:54,010 --> 00:44:00,849
it will talk to one of your server

00:43:56,470 --> 00:44:02,950
groups and let all the roles run that

00:44:00,849 --> 00:44:05,109
that make up a server in this group and

00:44:02,950 --> 00:44:07,690
then we'll connect to the next group and

00:44:05,109 --> 00:44:10,599
apply our rules that are for that group

00:44:07,690 --> 00:44:14,020
and the same for the stat server group

00:44:10,599 --> 00:44:16,359
and the fifth and at that point you

00:44:14,020 --> 00:44:20,200
probably want to die because it's it's

00:44:16,359 --> 00:44:24,250
slow and it's boring and why even bother

00:44:20,200 --> 00:44:27,579
this this kind of thing yeah pop up it

00:44:24,250 --> 00:44:29,990
just does it better what you want is

00:44:27,579 --> 00:44:31,970
interval gives you these these mmm

00:44:29,990 --> 00:44:35,210
getting amazing tools to to orchestrate

00:44:31,970 --> 00:44:39,440
your things intend to be flexible so I

00:44:35,210 --> 00:44:42,020
don't know probably first thing you do

00:44:39,440 --> 00:44:46,790
is go to all machines and configure as

00:44:42,020 --> 00:44:49,880
SH but then you deploy your database not

00:44:46,790 --> 00:44:53,860
only packages but but also perhaps some

00:44:49,880 --> 00:44:57,530
some base data if it's not there yet

00:44:53,860 --> 00:44:59,930
your your web servers get deployed with

00:44:57,530 --> 00:45:03,380
the stack and then you can go ahead and

00:44:59,930 --> 00:45:05,450
deploy the application which by the way

00:45:03,380 --> 00:45:09,020
it's probably in a playbook that is

00:45:05,450 --> 00:45:11,630
included in this workflow and later you

00:45:09,020 --> 00:45:15,350
will you will just run the application

00:45:11,630 --> 00:45:18,380
deployment steps and and then you run

00:45:15,350 --> 00:45:21,020
some initialization that that uses the

00:45:18,380 --> 00:45:23,540
software that you just deployed and and

00:45:21,020 --> 00:45:30,290
has has the web servers already

00:45:23,540 --> 00:45:32,119
communicated with your database which in

00:45:30,290 --> 00:45:35,180
turn is probably a step that you won't

00:45:32,119 --> 00:45:38,000
be reusing time and again and so on in

00:45:35,180 --> 00:45:40,510
the future you probably just deploy your

00:45:38,000 --> 00:45:42,710
software and the bill makes it easy to

00:45:40,510 --> 00:45:46,400
separate all these things out because

00:45:42,710 --> 00:45:54,430
you don't need a code that is unchanging

00:45:46,400 --> 00:45:54,430
for a given machine sorry

00:45:54,590 --> 00:46:00,500
and Bill can also just go ahead and wait

00:45:57,250 --> 00:46:03,430
for the application service to to reach

00:46:00,500 --> 00:46:07,190
a certain stage of initialization and

00:46:03,430 --> 00:46:09,680
and once it has realized okay

00:46:07,190 --> 00:46:12,880
application is ready then it will enable

00:46:09,680 --> 00:46:15,710
traffic from the outside on the proxies

00:46:12,880 --> 00:46:17,810
all these kind of things and it's very

00:46:15,710 --> 00:46:20,960
fun to watch and double do this and you

00:46:17,810 --> 00:46:23,030
will impress your co-workers and yeah I

00:46:20,960 --> 00:46:29,330
guess that's much better way to make use

00:46:23,030 --> 00:46:32,990
of a tooling so yeah anvil is great

00:46:29,330 --> 00:46:35,240
actually and I guess there are some some

00:46:32,990 --> 00:46:37,280
signs if you are asking yourself should

00:46:35,240 --> 00:46:43,130
I be deploying and the is so I

00:46:37,280 --> 00:46:44,120
opted for puppet instead so one sign for

00:46:43,130 --> 00:46:45,950
that

00:46:44,120 --> 00:46:49,280
he points to what ansible is always you

00:46:45,950 --> 00:46:51,380
need to cover software deployment code

00:46:49,280 --> 00:46:55,010
deployments in your configuration

00:46:51,380 --> 00:46:58,250
management an instable makes this pretty

00:46:55,010 --> 00:46:58,640
easy and puppet is notoriously bad at

00:46:58,250 --> 00:47:04,070
that

00:46:58,640 --> 00:47:06,950
so ends down points for instable if you

00:47:04,070 --> 00:47:09,520
have lots of network infrastructure like

00:47:06,950 --> 00:47:13,910
you know about us switches what have you

00:47:09,520 --> 00:47:16,720
and not so many Linux machines you may

00:47:13,910 --> 00:47:20,570
have a better time with ansible I guess

00:47:16,720 --> 00:47:22,160
puppet can do these things but it can be

00:47:20,570 --> 00:47:27,380
a little more natural with interval I

00:47:22,160 --> 00:47:30,280
guess if these kinds of one-shot

00:47:27,380 --> 00:47:33,380
management tasks are very commonplace

00:47:30,280 --> 00:47:35,540
and you just don't see yourself modeling

00:47:33,380 --> 00:47:40,010
this the state that the infrastructure

00:47:35,540 --> 00:47:41,420
is in over longer period of time that of

00:47:40,010 --> 00:47:45,790
course lends itself to enter those much

00:47:41,420 --> 00:47:48,920
more and last but not least if you are

00:47:45,790 --> 00:47:51,260
keep drawing Python everywhere after all

00:47:48,920 --> 00:47:54,920
but Ruby is another thing you ever use

00:47:51,260 --> 00:47:57,230
and want to touch then might just be an

00:47:54,920 --> 00:48:01,010
argument for ansible rather than puppet

00:47:57,230 --> 00:48:02,180
if it really comes down to this of

00:48:01,010 --> 00:48:05,030
course on the other hand there are some

00:48:02,180 --> 00:48:08,840
indications for puppet might be

00:48:05,030 --> 00:48:10,580
preferable over interval so if if you

00:48:08,840 --> 00:48:12,470
are mainly concerned with the operating

00:48:10,580 --> 00:48:14,360
system platform and there's perhaps a

00:48:12,470 --> 00:48:16,490
different team that will do all the

00:48:14,360 --> 00:48:19,850
application deployments and stuff then

00:48:16,490 --> 00:48:24,260
yeah puppet will make your life easier

00:48:19,850 --> 00:48:27,650
most likely is your environment very

00:48:24,260 --> 00:48:29,720
heterogeneous like there's not it's not

00:48:27,650 --> 00:48:31,550
like you have one operating system on

00:48:29,720 --> 00:48:34,090
all your machines but actually there's

00:48:31,550 --> 00:48:37,520
like three different versions of rel and

00:48:34,090 --> 00:48:40,850
two bundles and also some debian in

00:48:37,520 --> 00:48:49,520
boxin puppet handles this quite

00:48:40,850 --> 00:48:50,120
gracefully ansible less so so the thing

00:48:49,520 --> 00:48:53,030
about ansible

00:48:50,120 --> 00:48:56,480
is there is has a very really low

00:48:53,030 --> 00:48:57,829
learning curve and I think that it's why

00:48:56,480 --> 00:49:00,049
it's become so popular

00:48:57,829 --> 00:49:02,569
first people just can get started with

00:49:00,049 --> 00:49:04,880
it really quickly but the more complex

00:49:02,569 --> 00:49:07,880
things you need to implement your life

00:49:04,880 --> 00:49:11,239
gets harder and puppet is just very

00:49:07,880 --> 00:49:15,670
mature very powerful and if you value

00:49:11,239 --> 00:49:20,200
that then you might lean towards puppet

00:49:15,670 --> 00:49:22,489
and of course the antithesis to what I

00:49:20,200 --> 00:49:25,759
said earlier about will be in Python if

00:49:22,489 --> 00:49:28,479
ruby is already a thing in your tool

00:49:25,759 --> 00:49:32,059
chain and Python is absolutely not then

00:49:28,479 --> 00:49:35,479
might be might be sensible in towards

00:49:32,059 --> 00:49:39,799
Ruby also if if you are very careful

00:49:35,479 --> 00:49:43,660
about not having Python to anywhere you

00:49:39,799 --> 00:49:43,660
might not want to use in the door

00:49:48,400 --> 00:49:54,529
of course this that question should I

00:49:51,619 --> 00:49:57,049
perhaps I mean both puppet and ansible

00:49:54,529 --> 00:49:58,969
have strengths have weaknesses so should

00:49:57,049 --> 00:50:02,630
I combine them to complement them and

00:49:58,969 --> 00:50:05,779
and yeah sure you can do that but keep

00:50:02,630 --> 00:50:08,680
in mind that this implies that you need

00:50:05,779 --> 00:50:11,150
knowledge in both areas in your team and

00:50:08,680 --> 00:50:13,729
it will make life a little harder

00:50:11,150 --> 00:50:15,499
because you will be constantly asking

00:50:13,729 --> 00:50:17,660
yourself okay should this be handled by

00:50:15,499 --> 00:50:22,819
puppet or should this rather be in the

00:50:17,660 --> 00:50:25,670
tangible scope so I think it's it's it

00:50:22,819 --> 00:50:27,650
can make sense to limit yourself to one

00:50:25,670 --> 00:50:30,469
tool rather than the other because they

00:50:27,650 --> 00:50:36,309
are both quite powerful so you might

00:50:30,469 --> 00:50:38,809
just get away with choosing one okay and

00:50:36,309 --> 00:50:41,089
one of the most important questions to

00:50:38,809 --> 00:50:45,049
meet personally is of course there's

00:50:41,089 --> 00:50:48,289
this always discussions right they're

00:50:45,049 --> 00:50:51,289
great tools and people love them and you

00:50:48,289 --> 00:50:52,789
will inevitably run into someone who

00:50:51,289 --> 00:50:55,849
laughs a tool that is different from

00:50:52,789 --> 00:50:59,359
yours and yeah I think it's important

00:50:55,849 --> 00:51:02,390
that we have a good good way to talk

00:50:59,359 --> 00:51:04,130
about these differences and yeah I think

00:51:02,390 --> 00:51:06,769
it's that the most important thing to

00:51:04,130 --> 00:51:11,540
keep in mind is we should be empathetic

00:51:06,769 --> 00:51:14,570
oh we should be friendly in fact this is

00:51:11,540 --> 00:51:17,480
anyone's a little distraught by by the

00:51:14,570 --> 00:51:20,270
things that I relate here I'm I'm giving

00:51:17,480 --> 00:51:24,140
out hacks find Mia on the in the break

00:51:20,270 --> 00:51:26,600
room and yeah I I hope we can all be

00:51:24,140 --> 00:51:30,740
just cooled about these kind of issues

00:51:26,600 --> 00:51:34,940
in the future so that's it for me

00:51:30,740 --> 00:51:36,770
because before I go to QA I'd also as

00:51:34,940 --> 00:51:40,070
some folks before me like to point out

00:51:36,770 --> 00:51:43,010
that unbelieving machine is hiring in

00:51:40,070 --> 00:51:46,330
Berlin you might be even higher hiring

00:51:43,010 --> 00:51:50,000
in Frankfurt and I guess in Vienna and

00:51:46,330 --> 00:51:51,800
yeah you lots of amazing things and the

00:51:50,000 --> 00:51:56,950
operating space but not only that we

00:51:51,800 --> 00:51:59,480
also hiring like management folks

00:51:56,950 --> 00:52:02,060
engineers I just have a look at our

00:51:59,480 --> 00:52:05,780
careers page it's a cool cool company

00:52:02,060 --> 00:52:21,170
highly recommended now thanks for

00:52:05,780 --> 00:52:29,750
listening I'm answer questions ya know

00:52:21,170 --> 00:52:31,610
what one moment please take the mic yes

00:52:29,750 --> 00:52:33,830
I'll start because I'm not shy right

00:52:31,610 --> 00:52:36,710
guys um so you talked about having

00:52:33,830 --> 00:52:38,660
multiple different playbooks for doing

00:52:36,710 --> 00:52:40,910
certain different tasks in your

00:52:38,660 --> 00:52:42,560
experience doing this do you worry or

00:52:40,910 --> 00:52:45,860
suffer from the possibility of

00:52:42,560 --> 00:52:47,780
flip-flopping like in the playbooks

00:52:45,860 --> 00:52:50,210
defined conflicting things so each time

00:52:47,780 --> 00:52:53,060
you run that thing back and forth and

00:52:50,210 --> 00:52:56,420
back and forth okay the question was

00:52:53,060 --> 00:52:57,050
about when when there are different

00:52:56,420 --> 00:52:59,930
playbooks

00:52:57,050 --> 00:53:02,540
that that basically target the same

00:52:59,930 --> 00:53:05,540
infrastructure because I said that you

00:53:02,540 --> 00:53:09,200
probably want to have distinctly books

00:53:05,540 --> 00:53:13,130
for different kinds of tasks and if it

00:53:09,200 --> 00:53:17,240
if this can cause problems of these are

00:53:13,130 --> 00:53:18,620
basically fighting and and some of the

00:53:17,240 --> 00:53:21,310
results that I managed keep

00:53:18,620 --> 00:53:25,610
flip-flopping between states as

00:53:21,310 --> 00:53:30,560
envisioned by the different play books

00:53:25,610 --> 00:53:32,480
so I guess I guess there is there is no

00:53:30,560 --> 00:53:36,860
sensible way that you can completely

00:53:32,480 --> 00:53:42,200
guard yourself against that I do feel

00:53:36,860 --> 00:53:45,290
that I mean ansible basically takes the

00:53:42,200 --> 00:53:46,880
as well has a coherent view of what

00:53:45,290 --> 00:53:49,160
universe lecture should be and that

00:53:46,880 --> 00:53:52,690
should be all in your inventory you want

00:53:49,160 --> 00:53:55,970
to make your inventory really represent

00:53:52,690 --> 00:53:59,090
what's going on and each each playbook

00:53:55,970 --> 00:54:01,550
will take a certain part of that and cut

00:53:59,090 --> 00:54:04,850
it out and and send it to to the

00:54:01,550 --> 00:54:07,850
machines that you are managing but there

00:54:04,850 --> 00:54:10,730
there should not be inherent conflicts

00:54:07,850 --> 00:54:13,340
there of course the the code can can

00:54:10,730 --> 00:54:16,400
make it so that even even from the same

00:54:13,340 --> 00:54:18,230
inventory there's one code path things

00:54:16,400 --> 00:54:20,780
attached should be installed and this

00:54:18,230 --> 00:54:23,510
other one things oh no actually cannot

00:54:20,780 --> 00:54:27,710
be installed here and and you had this

00:54:23,510 --> 00:54:31,120
flip-flop situation but so the question

00:54:27,710 --> 00:54:35,810
was for my experience and my experience

00:54:31,120 --> 00:54:38,020
was not like that at all up to now but

00:54:35,810 --> 00:54:45,920
granted I micro places had not been

00:54:38,020 --> 00:54:54,790
super extensive is it a risk for

00:54:45,920 --> 00:54:57,410
infrastructure safety well I think no so

00:54:54,790 --> 00:54:59,390
you are structuring your code in a

00:54:57,410 --> 00:55:03,110
certain way and there's there's always a

00:54:59,390 --> 00:55:05,330
risk that automation will just you make

00:55:03,110 --> 00:55:07,700
a bug in your infrastructure code and

00:55:05,330 --> 00:55:09,590
the automation goes ahead and destroy

00:55:07,700 --> 00:55:12,920
your infrastructure this is just a thing

00:55:09,590 --> 00:55:16,850
that can happen with management I don't

00:55:12,920 --> 00:55:18,380
think that answer bills or that be that

00:55:16,850 --> 00:55:22,160
the the practices that you should apply

00:55:18,380 --> 00:55:25,970
to interval make this apparently more

00:55:22,160 --> 00:55:29,330
risky than any other tooling I think

00:55:25,970 --> 00:55:32,360
they were more um I think this goes in

00:55:29,330 --> 00:55:34,850
the same direction as with James um how

00:55:32,360 --> 00:55:38,390
do you ensure them if you have to

00:55:34,850 --> 00:55:42,560
reinstall a machine that you get

00:55:38,390 --> 00:55:43,370
the same result and if you use ansible

00:55:42,560 --> 00:55:47,870
playbooks

00:55:43,370 --> 00:55:51,560
ad hoc and just run them once and forget

00:55:47,870 --> 00:55:55,160
them right so how do we ensure that we

00:55:51,560 --> 00:55:57,760
can bring a machine say a newly

00:55:55,160 --> 00:56:02,450
installed machine into the complete

00:55:57,760 --> 00:56:04,280
necessary state to do its job well I

00:56:02,450 --> 00:56:06,560
guess I guess that is that is a good

00:56:04,280 --> 00:56:11,420
argument for you probably want that

00:56:06,560 --> 00:56:14,750
Saito tml playbook around so that you

00:56:11,420 --> 00:56:17,000
have this complete view one nice thing

00:56:14,750 --> 00:56:20,180
about ansible is that you can very

00:56:17,000 --> 00:56:22,130
simply say okay I'm running this but I'm

00:56:20,180 --> 00:56:25,460
targeting only this one machine that I

00:56:22,130 --> 00:56:28,340
just provisioned so so workflows like

00:56:25,460 --> 00:56:30,580
that can be implemented and sure you

00:56:28,340 --> 00:56:34,670
must be careful that you don't miss

00:56:30,580 --> 00:56:37,010
anything like well well duh of course I

00:56:34,670 --> 00:56:39,920
have to run the the application

00:56:37,010 --> 00:56:41,660
deployment in PlayBook as well that

00:56:39,920 --> 00:56:44,210
should not be a thing that happens that

00:56:41,660 --> 00:56:47,450
should all be part of the site

00:56:44,210 --> 00:56:51,470
deployment flow and there's all other

00:56:47,450 --> 00:56:53,150
challenges but yeah you should you

00:56:51,470 --> 00:56:57,650
should be careful about being able to do

00:56:53,150 --> 00:57:01,730
both right good question thanks do you

00:56:57,650 --> 00:57:05,360
have any maybe strong opinions for

00:57:01,730 --> 00:57:07,520
masterless puppet do I have strong

00:57:05,360 --> 00:57:08,600
opinions about matters habit or maybe

00:57:07,520 --> 00:57:12,340
any opinions

00:57:08,600 --> 00:57:15,170
I think masters puppet is a great idea

00:57:12,340 --> 00:57:17,480
folks have been doing that like you

00:57:15,170 --> 00:57:19,610
don't have the central master that has

00:57:17,480 --> 00:57:22,550
all the compiling and storing of things

00:57:19,610 --> 00:57:24,670
but instead you ship the code to each

00:57:22,550 --> 00:57:27,620
machine that you manage and each machine

00:57:24,670 --> 00:57:33,200
does the compiling and basically manages

00:57:27,620 --> 00:57:35,540
itself this has implications on well you

00:57:33,200 --> 00:57:37,430
have to or where do I start

00:57:35,540 --> 00:57:41,540
I mean puppet puppet gives you some cool

00:57:37,430 --> 00:57:43,250
tooling to establish trust which you

00:57:41,540 --> 00:57:46,010
will have to do yourself but apart from

00:57:43,250 --> 00:57:47,750
that if you if you manage to build all

00:57:46,010 --> 00:57:50,450
that then this is a really powerful

00:57:47,750 --> 00:57:52,160
pattern because it typically you can can

00:57:50,450 --> 00:57:56,119
split the scale very well and

00:57:52,160 --> 00:57:58,520
you you gain flexibility I feel that it

00:57:56,119 --> 00:58:02,180
takes a little more skill to set it up

00:57:58,520 --> 00:58:04,640
just right so if you start with puppet I

00:58:02,180 --> 00:58:06,559
would usually just go with a master and

00:58:04,640 --> 00:58:08,359
if you find that you are limited by this

00:58:06,559 --> 00:58:11,900
and you're getting more comfortable then

00:58:08,359 --> 00:58:13,990
then yeah masterless is a really good

00:58:11,900 --> 00:58:13,990
alternative

00:58:14,619 --> 00:58:20,990
um to extend the answer to James I think

00:58:19,069 --> 00:58:23,630
it could be possible if you strongly

00:58:20,990 --> 00:58:26,839
divide your configuration or your

00:58:23,630 --> 00:58:29,900
playbooks for for example general tasks

00:58:26,839 --> 00:58:32,089
like ssh configuration users and such

00:58:29,900 --> 00:58:35,869
into one play box that runs on all

00:58:32,089 --> 00:58:38,750
machines and then perhaps having play

00:58:35,869 --> 00:58:40,970
books that are dedicated to groups of

00:58:38,750 --> 00:58:43,010
servers like for example these a

00:58:40,970 --> 00:58:46,089
playbook for your web servers 1k book

00:58:43,010 --> 00:58:49,210
for your database servers like this and

00:58:46,089 --> 00:58:54,200
taking care that you don't have

00:58:49,210 --> 00:58:55,660
conflicting or doubled roles inside of

00:58:54,200 --> 00:59:00,950
the play box so the common and the

00:58:55,660 --> 00:59:03,799
others and I think there's a possibility

00:59:00,950 --> 00:59:06,170
of orifices it's awesome supplementation

00:59:03,799 --> 00:59:09,549
of the grain of salt not everything that

00:59:06,170 --> 00:59:13,630
is written and official documentation is

00:59:09,549 --> 00:59:17,000
yeah best practice like having a

00:59:13,630 --> 00:59:20,510
definition of variables inside of your

00:59:17,000 --> 00:59:22,160
play book code when you call a role this

00:59:20,510 --> 00:59:25,789
is something that you definitely

00:59:22,160 --> 00:59:27,920
shouldn't do and use all of your

00:59:25,789 --> 00:59:30,440
variables and configuration inside of

00:59:27,920 --> 00:59:34,670
your group was and host laws and keeping

00:59:30,440 --> 00:59:38,230
all the roles clean of of customized

00:59:34,670 --> 00:59:41,930
variables and setting this just

00:59:38,230 --> 00:59:47,240
something I would recommend yeah agree

00:59:41,930 --> 00:59:50,299
and one thing that is quite different at

00:59:47,240 --> 00:59:55,369
least for me when developing new roles

00:59:50,299 --> 01:00:00,140
or modules is yes how to develop these

00:59:55,369 --> 01:00:02,720
new roads I'm quite confident with using

01:00:00,140 --> 01:00:04,700
a vagrant and anvil and everything is

01:00:02,720 --> 01:00:05,509
totally fine because I can run perfectly

01:00:04,700 --> 01:00:09,219
on my machine

01:00:05,509 --> 01:00:11,479
in and I'm quite yeah free from

01:00:09,219 --> 01:00:14,899
dependencies and don't have to set up a

01:00:11,479 --> 01:00:17,589
lot of stuff beforehand and if I think

01:00:14,899 --> 01:00:20,809
about puppet there I've Huayra and

01:00:17,589 --> 01:00:24,769
certificate and lead and that it's quite

01:00:20,809 --> 01:00:30,679
more complicated I think so this is just

01:00:24,769 --> 01:00:33,789
an a huge argument for for interval for

01:00:30,679 --> 01:00:36,709
me scaling of course is an issue and

01:00:33,789 --> 01:00:44,089
when when wrote doing a roll out and the

01:00:36,709 --> 01:00:45,109
last thing perhaps later I've totally I

01:00:44,089 --> 01:00:46,999
was going to stop you right there

01:00:45,109 --> 01:00:49,639
because we are almost a time it does

01:00:46,999 --> 01:00:51,079
anyone have any question yet we have one

01:00:49,639 --> 01:00:54,409
more question and we have time for one

01:00:51,079 --> 01:00:56,419
more question right actually question

01:00:54,409 --> 01:00:58,429
it's more like an addendum I found that

01:00:56,419 --> 01:01:00,469
angela is extremely good in making

01:00:58,429 --> 01:01:03,769
simple things simple and complicated

01:01:00,469 --> 01:01:06,649
things obvious so that it's unlike

01:01:03,769 --> 01:01:07,699
puppet where you can have things that

01:01:06,649 --> 01:01:10,159
should happen together but they're

01:01:07,699 --> 01:01:12,799
defined in a lot of different files and

01:01:10,159 --> 01:01:15,559
the orders then also a literally defined

01:01:12,799 --> 01:01:17,809
by requires and other things and so bill

01:01:15,559 --> 01:01:19,249
just writes stuff that happens Bam Bam

01:01:17,809 --> 01:01:22,969
Bam Bam Bam and disorder and that is

01:01:19,249 --> 01:01:25,279
what happens and um that makes it pretty

01:01:22,969 --> 01:01:27,469
easy to read and understand what happens

01:01:25,279 --> 01:01:29,689
so that in most cases where puppet

01:01:27,469 --> 01:01:32,209
people would then require a test for a

01:01:29,689 --> 01:01:33,499
module and stuff like that the ends of a

01:01:32,209 --> 01:01:35,029
person that does the same thing would

01:01:33,499 --> 01:01:36,199
say why would I test it is perfectly

01:01:35,029 --> 01:01:40,429
obvious what it does and that is

01:01:36,199 --> 01:01:42,079
actually what is there so you just read

01:01:40,429 --> 01:01:44,749
the file and then the need for all that

01:01:42,079 --> 01:01:46,969
goes away that is also why all the

01:01:44,749 --> 01:01:49,339
engine stuff is much more ad hoc and

01:01:46,969 --> 01:01:52,969
simple because it is designed for that

01:01:49,339 --> 01:01:55,399
really also never ever download any

01:01:52,969 --> 01:01:58,009
module beard puppet or engine module

01:01:55,399 --> 01:01:59,589
from the outside always download that

01:01:58,009 --> 01:02:02,169
read that throw it away and then

01:01:59,589 --> 01:02:05,149
implement only the part that you need

01:02:02,169 --> 01:02:08,089
configuration management is about making

01:02:05,149 --> 01:02:09,829
choices taking options away it's the

01:02:08,089 --> 01:02:12,409
opposite of development its operations

01:02:09,829 --> 01:02:14,299
yeah so developers create features

01:02:12,409 --> 01:02:16,279
because that customer might want things

01:02:14,299 --> 01:02:18,670
that way and that customer might wants

01:02:16,279 --> 01:02:21,160
another way but operas

01:02:18,670 --> 01:02:22,390
I have the drop of saying how we do

01:02:21,160 --> 01:02:24,820
things around here

01:02:22,390 --> 01:02:26,440
and things that you don't do around here

01:02:24,820 --> 01:02:29,410
they should not even have options and

01:02:26,440 --> 01:02:30,910
variables in code so only write the code

01:02:29,410 --> 01:02:32,530
that you need when you write

01:02:30,910 --> 01:02:37,030
configuration management that's the key

01:02:32,530 --> 01:02:40,570
really to not dying yeah I'm not really

01:02:37,030 --> 01:02:43,600
on board with the last point as well so

01:02:40,570 --> 01:02:45,990
I'm sorry we have to finish thank you

01:02:43,600 --> 01:02:45,990
very much

01:02:46,400 --> 01:02:53,820
[Applause]

01:02:55,430 --> 01:03:01,190
and use all of your variables and

01:02:59,150 --> 01:03:03,529
configuration inside of your group of

01:03:01,190 --> 01:03:08,210
and host to us and keeping all the roles

01:03:03,529 --> 01:03:12,260
clean of of customized variables and

01:03:08,210 --> 01:03:13,250
setting this just something I would

01:03:12,260 --> 01:03:18,950
recommend

01:03:13,250 --> 01:03:21,289
yeah agree and one thing that is quite

01:03:18,950 --> 01:03:25,970
different at least for me when

01:03:21,289 --> 01:03:31,640
developing new roles or modules is yes

01:03:25,970 --> 01:03:34,010
how to develop these new roads I'm quite

01:03:31,640 --> 01:03:35,990
confident with using a vagrant and anvil

01:03:34,010 --> 01:03:38,000
and everything is totally fine because I

01:03:35,990 --> 01:03:42,890
can run perfectly on on my machine and

01:03:38,000 --> 01:03:44,630
I'm quite yea free from dependencies and

01:03:42,890 --> 01:03:48,049
don't have to set up a lot of stuff

01:03:44,630 --> 01:03:49,190
beforehand and if I think about puppet

01:03:48,049 --> 01:03:52,640
there I've Huayra

01:03:49,190 --> 01:03:58,299
and certificate and these and that it's

01:03:52,640 --> 01:04:04,270
quite more complicated I think just an a

01:03:58,299 --> 01:04:07,220
huge argument for for ant work for me

01:04:04,270 --> 01:04:09,740
scaling of course is an issue and when

01:04:07,220 --> 01:04:16,460
when wrote doing a rollout and last

01:04:09,740 --> 01:04:17,539
thing perhaps later I've totally forgot

01:04:16,460 --> 01:04:19,430
I was going to stop you right there

01:04:17,539 --> 01:04:22,069
because we are almost a time it does

01:04:19,430 --> 01:04:23,510
anyone have any question yet we have one

01:04:22,069 --> 01:04:26,839
more question and we have time for one

01:04:23,510 --> 01:04:28,880
more question to say actually question

01:04:26,839 --> 01:04:30,710
it's more like an addendum I found that

01:04:28,880 --> 01:04:32,900
angela is extremely good in making

01:04:30,710 --> 01:04:36,200
simple things simple and complicated

01:04:32,900 --> 01:04:39,079
things obvious so that it's unlike

01:04:36,200 --> 01:04:40,910
puppet where you can have things that

01:04:39,079 --> 01:04:43,220
should happen together but that defined

01:04:40,910 --> 01:04:45,410
in a lot of different files and the

01:04:43,220 --> 01:04:48,020
orders then also arbitrarily defined by

01:04:45,410 --> 01:04:50,240
requires and other things and the bill

01:04:48,020 --> 01:04:51,710
just bribes stuff that happens Bam Bam

01:04:50,240 --> 01:04:55,430
Bam Bam Bam and disorder and that is

01:04:51,710 --> 01:04:57,710
what happens and um that makes it pretty

01:04:55,430 --> 01:04:59,900
easy to read and understand what happens

01:04:57,710 --> 01:05:02,150
so that in most cases where puppet

01:04:59,900 --> 01:05:04,640
people would then require a test for a

01:05:02,150 --> 01:05:06,079
module and stuff like that the ends of a

01:05:04,640 --> 01:05:07,549
person that does the same thing will say

01:05:06,079 --> 01:05:09,290
why would I test it is perfectly obvious

01:05:07,549 --> 01:05:12,890
what it does and that is

01:05:09,290 --> 01:05:14,360
actually what is there so you just read

01:05:12,890 --> 01:05:17,180
the file and then the need for all that

01:05:14,360 --> 01:05:19,400
goes away that is also why all the

01:05:17,180 --> 01:05:21,770
intimate stuff is much more advanced

01:05:19,400 --> 01:05:25,430
simple because it is designed for that

01:05:21,770 --> 01:05:28,520
really also never ever download any

01:05:25,430 --> 01:05:30,800
module beard puppet or any module from

01:05:28,520 --> 01:05:33,020
the outside always download that read

01:05:30,800 --> 01:05:34,600
that throw it away and then implement

01:05:33,020 --> 01:05:37,580
only the part that you need

01:05:34,600 --> 01:05:40,520
configuration management is about making

01:05:37,580 --> 01:05:42,290
choices taking options away it's the

01:05:40,520 --> 01:05:44,870
opposite of development its operations

01:05:42,290 --> 01:05:46,730
yeah so developers create features

01:05:44,870 --> 01:05:48,650
because that customer might want things

01:05:46,730 --> 01:05:52,550
that way and that customer might want

01:05:48,650 --> 01:05:54,920
another way but uppers have to drop of

01:05:52,550 --> 01:05:57,260
saying how we do things around here and

01:05:54,920 --> 01:05:58,880
things that you don't do around here

01:05:57,260 --> 01:06:01,850
they should not even have options and

01:05:58,880 --> 01:06:03,350
variables in code so only write the code

01:06:01,850 --> 01:06:04,970
that you need when you write

01:06:03,350 --> 01:06:09,470
configuration management that's the key

01:06:04,970 --> 01:06:13,010
really to not dying yeah I'm not really

01:06:09,470 --> 01:06:16,040
involved with the last point as well so

01:06:13,010 --> 01:06:25,790
I'm sorry we have to finish thank you

01:06:16,040 --> 01:06:30,220
very much we will be back in ten minutes

01:06:25,790 --> 01:06:30,220

YouTube URL: https://www.youtube.com/watch?v=79Nj7SskHxg


