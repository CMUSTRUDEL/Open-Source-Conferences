Title: OSDC 2017 | Developing a SaaS platform based on Open Source Software by Sebastian Saemann
Publication date: 2017-06-03
Playlist: OSDC 2017 | Open Source Data Center Conference
Description: 
	The idea of Software as a Service (SaaS) isn't new, but still it is getting more and more attraction nowadays. Also the acceptance in the European market of such services is increasing steady. Developing and running such a platform can be challenging, but modern Open Source Software and modern development processes can help. This talk covers the components and technologies of the NETWAYS Web Services platform. Furthermore, it will give insights of the development patterns used.
Captions: 
	00:00:09,570 --> 00:00:16,270
so welcome everyone to our yeah second

00:00:14,289 --> 00:00:17,619
part of the last day of the LCC I hope

00:00:16,270 --> 00:00:19,660
you're all well set and ready for

00:00:17,619 --> 00:00:21,550
Sebastian Damon's talk about his

00:00:19,660 --> 00:00:25,150
experiences when developing a South

00:00:21,550 --> 00:00:25,449
platform using open source tools thank

00:00:25,150 --> 00:00:29,050
you

00:00:25,449 --> 00:00:31,840
can you hear me all right okay so

00:00:29,050 --> 00:00:33,789
welcome everybody to this talk I hope

00:00:31,840 --> 00:00:36,309
you're doing good and you enjoyed your

00:00:33,789 --> 00:00:38,680
lunch I'm pretty pretty excited to be

00:00:36,309 --> 00:00:41,440
here and so thank you for joining my

00:00:38,680 --> 00:00:44,440
talk so before I want to start I want to

00:00:41,440 --> 00:00:47,200
do a quick poll with you who add I get

00:00:44,440 --> 00:00:49,930
who had a good time last night at the

00:00:47,200 --> 00:00:52,170
ospc evening you went so please raise

00:00:49,930 --> 00:00:55,800
your hands and keep your hands raised

00:00:52,170 --> 00:00:59,290
because there are following questions so

00:00:55,800 --> 00:01:01,270
okay so almost everybody and with who

00:00:59,290 --> 00:01:05,740
enjoyed at least one alcoholic beverage

00:01:01,270 --> 00:01:11,590
last night at least one okay more than

00:01:05,740 --> 00:01:17,380
one okay more than two and who is

00:01:11,590 --> 00:01:20,469
running containers in production okay so

00:01:17,380 --> 00:01:22,240
perhaps okay perhaps we have a

00:01:20,469 --> 00:01:25,299
connection between drinking and running

00:01:22,240 --> 00:01:26,649
containers in production but anyway this

00:01:25,299 --> 00:01:30,249
talk is about how we are running

00:01:26,649 --> 00:01:31,899
containers in production I want to show

00:01:30,249 --> 00:01:34,929
you some components and technologies we

00:01:31,899 --> 00:01:36,729
are using and share with you some

00:01:34,929 --> 00:01:38,909
experiences we made while we were

00:01:36,729 --> 00:01:44,469
developing a software service platform

00:01:38,909 --> 00:01:46,959
based on open source technologies this

00:01:44,469 --> 00:01:48,579
talk is split into three pieces so I

00:01:46,959 --> 00:01:51,009
just start with a quick recap

00:01:48,579 --> 00:01:53,709
so clarifying what software service

00:01:51,009 --> 00:01:56,259
means and show you the architecture we

00:01:53,709 --> 00:02:00,729
are using and how we develop the

00:01:56,259 --> 00:02:02,829
platform itself but first up Who am I

00:02:00,729 --> 00:02:04,869
my name is Sebastian Damon I'm working

00:02:02,829 --> 00:02:08,739
as head of manage services for net ways

00:02:04,869 --> 00:02:11,050
so I'm leading a department of four

00:02:08,739 --> 00:02:13,830
teams but basically I'm an systems

00:02:11,050 --> 00:02:16,390
engineers or I'm an Operations guy and

00:02:13,830 --> 00:02:19,920
yeah so you can also find me on Twitter

00:02:16,390 --> 00:02:21,660
as well I think

00:02:19,920 --> 00:02:24,240
almost everybody knows net waste because

00:02:21,660 --> 00:02:29,760
of this conference but in a nutshell

00:02:24,240 --> 00:02:33,900
we're just awesome and and yeah we have

00:02:29,760 --> 00:02:35,970
a event scheme which is hosting such a

00:02:33,900 --> 00:02:38,640
beautiful event like this with a

00:02:35,970 --> 00:02:41,430
consultancy team we have a dev team

00:02:38,640 --> 00:02:43,320
development team which is contributing a

00:02:41,430 --> 00:02:43,950
lot to the open source monitoring

00:02:43,320 --> 00:02:46,290
project

00:02:43,950 --> 00:02:47,580
icinga and we have a managed hosting

00:02:46,290 --> 00:02:51,000
team there's the team that I'm leading

00:02:47,580 --> 00:02:52,910
and this is mostly what I'm talking

00:02:51,000 --> 00:02:56,940
about

00:02:52,910 --> 00:02:59,970
so like I said nowadays everything is a

00:02:56,940 --> 00:03:01,709
service and I want to clarify where the

00:02:59,970 --> 00:03:05,630
differences are between the most popular

00:03:01,709 --> 00:03:07,800
ones so the most popular ones are

00:03:05,630 --> 00:03:09,720
infrastructure as a service platform as

00:03:07,800 --> 00:03:11,940
a service and software as a service and

00:03:09,720 --> 00:03:15,180
of course you can run your application

00:03:11,940 --> 00:03:18,750
or your tool stack on premises so as you

00:03:15,180 --> 00:03:22,530
can see on the on the slide there are

00:03:18,750 --> 00:03:24,900
different responsibilities who needs to

00:03:22,530 --> 00:03:27,480
take care about which layer so if you're

00:03:24,900 --> 00:03:31,140
running your application on premise

00:03:27,480 --> 00:03:33,600
you have the full responsibility from

00:03:31,140 --> 00:03:35,430
networking up to storage up to the

00:03:33,600 --> 00:03:36,209
service virtualization operating system

00:03:35,430 --> 00:03:39,030
and so on and so on

00:03:36,209 --> 00:03:42,299
and if you don't want to do that you can

00:03:39,030 --> 00:03:43,769
rely on popular the cloud service

00:03:42,299 --> 00:03:47,730
provider public cloud service provider

00:03:43,769 --> 00:03:51,000
like Asia Microsoft Asia AWS Google

00:03:47,730 --> 00:03:53,459
cloud and so on they will then take care

00:03:51,000 --> 00:03:56,640
with their engineering team up to the

00:03:53,459 --> 00:03:58,470
virtualization layer and yeah if you

00:03:56,640 --> 00:04:00,959
want to use a platform so for running

00:03:58,470 --> 00:04:03,079
your PHP application or your Ruby on

00:04:00,959 --> 00:04:06,600
Rails application on top of a

00:04:03,079 --> 00:04:08,700
environment you can use some platform as

00:04:06,600 --> 00:04:11,820
a service provider like Hiroko for

00:04:08,700 --> 00:04:13,920
instance and last but not least we have

00:04:11,820 --> 00:04:18,359
to service software as a service part

00:04:13,920 --> 00:04:19,979
and they're the the provider takes care

00:04:18,359 --> 00:04:23,100
about the complete take so even your

00:04:19,979 --> 00:04:25,080
data and your application it's in the

00:04:23,100 --> 00:04:28,050
responsibility of the service provider

00:04:25,080 --> 00:04:30,020
that means it has to backup your data it

00:04:28,050 --> 00:04:31,890
has to upgrade your stack your

00:04:30,020 --> 00:04:33,540
application your runtime the operating

00:04:31,890 --> 00:04:39,540
systems or the complete stack and you

00:04:33,540 --> 00:04:41,340
using and consuming the software so

00:04:39,540 --> 00:04:44,790
what's the motivation for us to build a

00:04:41,340 --> 00:04:47,640
software as a service platform nowadays

00:04:44,790 --> 00:04:50,610
IT is using more and more cloud of

00:04:47,640 --> 00:04:53,700
course but what you can see is that IT

00:04:50,610 --> 00:04:56,340
companies do have less fear and are more

00:04:53,700 --> 00:04:58,890
interested in running public cloud

00:04:56,340 --> 00:05:02,850
services because of potential money

00:04:58,890 --> 00:05:05,850
savings of course it's easy to use and a

00:05:02,850 --> 00:05:07,470
lot of other things but when you look at

00:05:05,850 --> 00:05:09,690
the European market or especially the

00:05:07,470 --> 00:05:11,550
German market we are always afraid of

00:05:09,690 --> 00:05:14,610
running something in the public cloud

00:05:11,550 --> 00:05:15,390
and US companies and stuff like that but

00:05:14,610 --> 00:05:18,420
this is shifting

00:05:15,390 --> 00:05:21,140
I think it's shifting because banks and

00:05:18,420 --> 00:05:23,940
insurance companies and and other

00:05:21,140 --> 00:05:27,050
companies like this are running

00:05:23,940 --> 00:05:30,960
applications in public in public cloud

00:05:27,050 --> 00:05:34,560
in public health and besides that we had

00:05:30,960 --> 00:05:37,890
a lot of customers that we're asking for

00:05:34,560 --> 00:05:42,390
hosted apps and that's why we build a

00:05:37,890 --> 00:05:46,500
software as a service platform oh sorry

00:05:42,390 --> 00:05:48,630
skip this so what is NWS so NWS is the

00:05:46,500 --> 00:05:51,900
net waste web services this is a

00:05:48,630 --> 00:05:54,480
platform where we are hosting your

00:05:51,900 --> 00:05:56,730
favorite open source application it's

00:05:54,480 --> 00:06:00,240
pretty new we just launched it in March

00:05:56,730 --> 00:06:03,060
this year and how it looks and how it

00:06:00,240 --> 00:06:14,160
feels and what it has to offer I want to

00:06:03,060 --> 00:06:17,040
show you in a quick demo ok so this is

00:06:14,160 --> 00:06:19,440
the landing page you can reach us on NWS

00:06:17,040 --> 00:06:23,520
net wave de and if you scroll down a

00:06:19,440 --> 00:06:24,990
little bit you can find our apps that we

00:06:23,520 --> 00:06:28,070
are providing right now so there are

00:06:24,990 --> 00:06:30,210
more coming soon but for now we have six

00:06:28,070 --> 00:06:33,260
there is for instance a good lab

00:06:30,210 --> 00:06:35,760
instance you can run on our system and

00:06:33,260 --> 00:06:39,000
this kid lab instance comes for example

00:06:35,760 --> 00:06:42,300
with a kid LeBron er where you can run

00:06:39,000 --> 00:06:44,940
your built on top of it it's already

00:06:42,300 --> 00:06:47,340
pre-configured and we have a doctor

00:06:44,940 --> 00:06:49,229
integration where you can

00:06:47,340 --> 00:06:51,960
use the doctor registry and this docker

00:06:49,229 --> 00:06:55,650
registry is backed up on our s3 or Swift

00:06:51,960 --> 00:07:02,879
storage so I think my sound is working

00:06:55,650 --> 00:07:06,090
sorry for that okay okay this is skip

00:07:02,879 --> 00:07:09,210
lab and there are other tools like

00:07:06,090 --> 00:07:13,289
icinga - satellite if you're having

00:07:09,210 --> 00:07:17,580
already or who knows i thinka - who runs

00:07:13,289 --> 00:07:19,590
i singer - ok for those the I think a -

00:07:17,580 --> 00:07:22,020
satellite can be a good extension

00:07:19,590 --> 00:07:23,219
because you run or you can monitor your

00:07:22,020 --> 00:07:27,740
services from a different perspective

00:07:23,219 --> 00:07:32,099
that means you can extend your existing

00:07:27,740 --> 00:07:34,139
monitoring system by running a satellite

00:07:32,099 --> 00:07:37,500
in a specific location so we are now

00:07:34,139 --> 00:07:40,860
offering north California Japan and our

00:07:37,500 --> 00:07:43,590
location in Nuremberg and it can be

00:07:40,860 --> 00:07:45,449
handy to to check from a different

00:07:43,590 --> 00:07:48,289
perspective how your website is running

00:07:45,449 --> 00:07:52,130
from there for instance

00:07:48,289 --> 00:07:58,830
okay so and if you want to try it out

00:07:52,130 --> 00:08:00,779
you have of course to log in and this is

00:07:58,830 --> 00:08:04,680
the back end so this is just a demon

00:08:00,779 --> 00:08:07,500
card so don't and we have a rocket jet

00:08:04,680 --> 00:08:09,659
instance the rocket editor Chet and you

00:08:07,500 --> 00:08:11,370
can see your running apps listed here so

00:08:09,659 --> 00:08:14,279
you can add more if you want you and

00:08:11,370 --> 00:08:16,560
your rocket jet or all the other all the

00:08:14,279 --> 00:08:18,419
other applications would look and feel

00:08:16,560 --> 00:08:19,889
like this so you can you have your own

00:08:18,419 --> 00:08:22,830
instance you can do whatever you want

00:08:19,889 --> 00:08:25,409
with it and just use it so this is what

00:08:22,830 --> 00:08:28,110
we have to offer and what we are doing

00:08:25,409 --> 00:08:32,120
with this rocket jet installation within

00:08:28,110 --> 00:08:35,880
our platform is that we have a little

00:08:32,120 --> 00:08:38,940
here is life's helpdesk chat so to

00:08:35,880 --> 00:08:40,770
provide our customers and this is this

00:08:38,940 --> 00:08:43,409
is running within our own or this is our

00:08:40,770 --> 00:08:46,039
own product which is backing up this

00:08:43,409 --> 00:08:46,039
live here

00:08:56,610 --> 00:09:00,430
okay

00:08:57,759 --> 00:09:02,649
so when we started developing this

00:09:00,430 --> 00:09:05,350
platform we started completely from

00:09:02,649 --> 00:09:07,779
scratch and starting from scratch always

00:09:05,350 --> 00:09:09,670
means a lot of fun most of the time at

00:09:07,779 --> 00:09:11,740
least and because you don't have

00:09:09,670 --> 00:09:14,230
dependency so you don't have to move or

00:09:11,740 --> 00:09:14,680
migrate customers or data or something

00:09:14,230 --> 00:09:16,809
like that

00:09:14,680 --> 00:09:18,579
and you have the feeling you're building

00:09:16,809 --> 00:09:20,800
something big so you don't have to look

00:09:18,579 --> 00:09:22,480
for or you should not have to look for

00:09:20,800 --> 00:09:23,379
copy and paste how to some Stack

00:09:22,480 --> 00:09:25,600
Overflow or something

00:09:23,379 --> 00:09:28,329
so you just decide which tool is the

00:09:25,600 --> 00:09:30,100
best for the job and you think about it

00:09:28,329 --> 00:09:34,660
you discuss about it and in the in the

00:09:30,100 --> 00:09:37,329
end you will have a blueprint and within

00:09:34,660 --> 00:09:40,480
the blueprint we had some specifications

00:09:37,329 --> 00:09:41,709
so our platform everything needs to be

00:09:40,480 --> 00:09:44,319
in version control

00:09:41,709 --> 00:09:46,740
so in gate or as we in our case of

00:09:44,319 --> 00:09:49,930
course gate and it should be redeployed

00:09:46,740 --> 00:09:53,769
we wanted to have a test driven approach

00:09:49,930 --> 00:09:56,250
so test-driven development we think it's

00:09:53,769 --> 00:09:59,740
it makes you confident and changes and

00:09:56,250 --> 00:10:01,240
it's a good approach of course and to be

00:09:59,740 --> 00:10:03,670
honest with you I'm no professional

00:10:01,240 --> 00:10:05,050
software developer and neither my

00:10:03,670 --> 00:10:07,839
teammates are because we are from the

00:10:05,050 --> 00:10:12,939
operations background but in time of

00:10:07,839 --> 00:10:16,059
DevOps I'm already confused so next is a

00:10:12,939 --> 00:10:18,629
child we wanted to do everything very a

00:10:16,059 --> 00:10:22,180
trial that means we have weekly sprints

00:10:18,629 --> 00:10:26,350
we are defining within the sprint a user

00:10:22,180 --> 00:10:28,360
story and for instance I don't know a

00:10:26,350 --> 00:10:31,240
customer should be able to log in and

00:10:28,360 --> 00:10:33,040
then we are realizing this feature from

00:10:31,240 --> 00:10:34,750
my stone to my stone the reason for that

00:10:33,040 --> 00:10:36,730
is it's not super hipster it's just

00:10:34,750 --> 00:10:39,790
because we had no clue how the whole

00:10:36,730 --> 00:10:41,920
thing would look like and that's why we

00:10:39,790 --> 00:10:45,220
moved from step to step and decided from

00:10:41,920 --> 00:10:48,579
week to week how to go next so it worked

00:10:45,220 --> 00:10:51,360
out quite well and last but not least

00:10:48,579 --> 00:10:55,540
the micro services we just wanted to

00:10:51,360 --> 00:11:00,879
fully benefit of the advantages of the

00:10:55,540 --> 00:11:03,850
micro service approach okay let's talk

00:11:00,879 --> 00:11:05,500
about infrastructure as code first we

00:11:03,850 --> 00:11:07,899
have two worlds on the left side what

00:11:05,500 --> 00:11:11,350
you can see here is we have a private

00:11:07,899 --> 00:11:15,670
cloud based on open a blur it's

00:11:11,350 --> 00:11:17,620
supported by four men so foreman is is

00:11:15,670 --> 00:11:20,799
managing the lifecycle of a virtual

00:11:17,620 --> 00:11:23,379
machine and this declaring some roles so

00:11:20,799 --> 00:11:25,779
you are a executor or you're a

00:11:23,379 --> 00:11:27,459
hypervisor whatever and this role is

00:11:25,779 --> 00:11:31,360
then configured by puppet so this is the

00:11:27,459 --> 00:11:34,149
stack what we already had and on the

00:11:31,360 --> 00:11:36,939
other side we have the locations what I

00:11:34,149 --> 00:11:39,399
was showing you in Japan and in north

00:11:36,939 --> 00:11:40,870
California we have of course no data in

00:11:39,399 --> 00:11:44,579
the day that's why we are using or make

00:11:40,870 --> 00:11:46,779
use of the public load of Amazon and

00:11:44,579 --> 00:11:49,389
because we don't want it to reinvent the

00:11:46,779 --> 00:11:52,689
wheel and we have a lot of tablet

00:11:49,389 --> 00:11:55,179
modules that's why we gave packer and

00:11:52,689 --> 00:11:58,290
Hera forum a try I think almost

00:11:55,179 --> 00:12:01,620
everybody wasn't in the talk of says

00:11:58,290 --> 00:12:01,620
yesterday I guess

00:12:01,839 --> 00:12:08,019
so with pecker yeah it's a pretty pretty

00:12:05,529 --> 00:12:11,709
cool tool to build Amazon mi so golden

00:12:08,019 --> 00:12:14,230
images and we can reuse our puppet

00:12:11,709 --> 00:12:16,839
modules there so with peccary you're

00:12:14,230 --> 00:12:19,779
launching an ec2 instance and then it

00:12:16,839 --> 00:12:22,389
gets it it pulls the puppet modules or

00:12:19,779 --> 00:12:23,949
pushes the public modules and it applies

00:12:22,389 --> 00:12:25,720
all the popping modules within this

00:12:23,949 --> 00:12:29,620
virtual machine and then saves this

00:12:25,720 --> 00:12:32,139
state back to the new am i that is or to

00:12:29,620 --> 00:12:35,290
the golden image it goes in images that

00:12:32,139 --> 00:12:39,670
we can use them and terraform is a tool

00:12:35,290 --> 00:12:41,439
for arm yeah for configuring and

00:12:39,670 --> 00:12:45,069
defining your virtual infrastructure

00:12:41,439 --> 00:12:47,410
within AWS or a Google cloud or other

00:12:45,069 --> 00:12:49,299
providers so and how terraform is

00:12:47,410 --> 00:12:51,720
working for us I want to show you in a

00:12:49,299 --> 00:12:51,720
quick demo

00:12:59,260 --> 00:13:04,250
okay so like I said everything has to be

00:13:02,420 --> 00:13:05,959
in version control this is a good

00:13:04,250 --> 00:13:08,240
repository and within the state

00:13:05,959 --> 00:13:13,930
repository there are my terraform files

00:13:08,240 --> 00:13:13,930
so just a second I have to switch my

00:13:14,589 --> 00:13:21,769
yeah okay

00:13:18,970 --> 00:13:23,630
so there is a terraform configuration

00:13:21,769 --> 00:13:25,610
file and within this terraform

00:13:23,630 --> 00:13:28,519
configuration file you can see some

00:13:25,610 --> 00:13:30,740
variables and you can see something like

00:13:28,519 --> 00:13:32,180
this so this is the resource which is

00:13:30,740 --> 00:13:34,100
configured or it's going to be

00:13:32,180 --> 00:13:37,579
configured within

00:13:34,100 --> 00:13:40,670
AWS so a launch configuration what-what

00:13:37,579 --> 00:13:43,130
is launched there we have outer scaling

00:13:40,670 --> 00:13:45,829
groups those outer scaling groups have a

00:13:43,130 --> 00:13:48,230
size of please don't use more than ten

00:13:45,829 --> 00:13:52,279
virtual machines but at the minimum one

00:13:48,230 --> 00:13:55,670
and so on so next would be the VP C's or

00:13:52,279 --> 00:13:58,100
the Virtual Private Center data center I

00:13:55,670 --> 00:14:02,570
don't know how it is how they say it so

00:13:58,100 --> 00:14:05,449
it's your private data center and there

00:14:02,570 --> 00:14:08,180
are of course some some gateways some

00:14:05,449 --> 00:14:10,730
routing tables some subnets or all the

00:14:08,180 --> 00:14:13,399
stuff so a VPN connection to our

00:14:10,730 --> 00:14:15,440
location in Nuremburg so we can all all

00:14:13,399 --> 00:14:19,850
the things can be defined within this

00:14:15,440 --> 00:14:21,709
within this configuration and as you

00:14:19,850 --> 00:14:24,380
have seen there are some variables

00:14:21,709 --> 00:14:27,890
inside there and those variables come

00:14:24,380 --> 00:14:30,350
from a variable file and within this

00:14:27,890 --> 00:14:33,949
very at the file we have locations so we

00:14:30,350 --> 00:14:35,600
have a key it's uswest one or Asia

00:14:33,949 --> 00:14:39,529
Pacific North East one this is the

00:14:35,600 --> 00:14:43,519
location of Amazon and we have as as a

00:14:39,529 --> 00:14:45,410
value different a mice for instance we

00:14:43,519 --> 00:14:48,890
have different availability zones as a

00:14:45,410 --> 00:14:55,160
variable and we have different subnets

00:14:48,890 --> 00:14:59,209
and stuff so if you have a look at

00:14:55,160 --> 00:15:01,430
active or edit negative what I was

00:14:59,209 --> 00:15:07,699
preparing you for the demo we are now

00:15:01,430 --> 00:15:09,840
launching a AV PC in Frankfurt and all I

00:15:07,699 --> 00:15:11,940
have to do with terraform is just

00:15:09,840 --> 00:15:15,330
at some new variables in my variable

00:15:11,940 --> 00:15:26,130
site so it's not really more than that

00:15:15,330 --> 00:15:27,600
so that's it okay and if I'm running

00:15:26,130 --> 00:15:29,720
this command right now so I'm using the

00:15:27,600 --> 00:15:32,970
telephone binary I'm using the command

00:15:29,720 --> 00:15:36,840
plan this is more or less like a dry run

00:15:32,970 --> 00:15:39,450
which is showing me what it would do on

00:15:36,840 --> 00:15:42,750
Amazon side and I have a variable side

00:15:39,450 --> 00:15:46,710
where my Amazon key stores on my secret

00:15:42,750 --> 00:15:49,350
and I a state side so this state file is

00:15:46,710 --> 00:15:51,300
going to be used for every location so

00:15:49,350 --> 00:15:53,060
that terraform knows what should be

00:15:51,300 --> 00:15:57,230
configured or what is configured and

00:15:53,060 --> 00:16:08,970
usually it should show up within a

00:15:57,230 --> 00:16:11,640
couple of seconds there we go and what

00:16:08,970 --> 00:16:13,380
you can see here is basically the the

00:16:11,640 --> 00:16:17,160
things what terraform would do with

00:16:13,380 --> 00:16:22,230
Amazon and it would create a VPN gateway

00:16:17,160 --> 00:16:24,780
it would create some some routes yeah

00:16:22,230 --> 00:16:26,580
the main we we PC of course the subnets

00:16:24,780 --> 00:16:28,610
security group so all the stuff what I

00:16:26,580 --> 00:16:31,740
was declaring within the terraform

00:16:28,610 --> 00:16:36,780
configuration file so that's pretty cool

00:16:31,740 --> 00:16:39,120
and if I want to do so I would just hit

00:16:36,780 --> 00:16:41,100
the apply this apply would take about

00:16:39,120 --> 00:16:43,170
five to ten minutes and then my location

00:16:41,100 --> 00:16:46,110
is ready to go I don't show this in the

00:16:43,170 --> 00:16:49,260
demo but you can imagine what will

00:16:46,110 --> 00:16:52,410
happen and if you want to get rid of it

00:16:49,260 --> 00:16:54,240
you have to destroy command and amazon

00:16:52,410 --> 00:16:57,270
won't charge you any more for the used

00:16:54,240 --> 00:16:59,190
resources so it's pretty cool and what

00:16:57,270 --> 00:17:03,960
comes also very handy is that you can

00:16:59,190 --> 00:17:05,310
use the plan or the apply command if

00:17:03,960 --> 00:17:06,870
you're changing your infrastructure

00:17:05,310 --> 00:17:09,630
later on so you're just changing the

00:17:06,870 --> 00:17:12,720
terraform configuration and then you can

00:17:09,630 --> 00:17:14,970
you can do it right sorry a dry run and

00:17:12,720 --> 00:17:16,380
you can see what will happen on your

00:17:14,970 --> 00:17:19,080
infrastructure and it will get

00:17:16,380 --> 00:17:20,820
configured so it's yeah it's a good tool

00:17:19,080 --> 00:17:23,209
it's a perfect match for AWS in my

00:17:20,820 --> 00:17:23,209
opinion

00:17:36,710 --> 00:17:42,210
this was the demo okay so now we have

00:17:39,690 --> 00:17:45,419
the virtual infrastructure so we have

00:17:42,210 --> 00:17:47,309
the private cloud based on open a Beulah

00:17:45,419 --> 00:17:49,919
with format and stuff and we have the

00:17:47,309 --> 00:17:51,659
AWS side and on top of this on top of

00:17:49,919 --> 00:17:53,570
stick now there are running virtual

00:17:51,659 --> 00:17:55,830
machines and our stack looks like that

00:17:53,570 --> 00:17:58,470
we are using Ubuntu as the operating

00:17:55,830 --> 00:18:01,760
system we wanted to use Korres first

00:17:58,470 --> 00:18:05,850
because we are just running containers

00:18:01,760 --> 00:18:08,909
in the end but when you just fit our new

00:18:05,850 --> 00:18:10,679
or needs better because we have like I

00:18:08,909 --> 00:18:12,389
said a lot of puppet modules and they

00:18:10,679 --> 00:18:15,240
take care about monitoring backing up

00:18:12,389 --> 00:18:18,240
and stuff like that and we would have to

00:18:15,240 --> 00:18:20,940
reinvent the wheel for chorus in this in

00:18:18,240 --> 00:18:22,919
this case for us and the team know-how

00:18:20,940 --> 00:18:25,860
is just better with Ubuntu than with

00:18:22,919 --> 00:18:26,399
chorus and that's why it was a easy

00:18:25,860 --> 00:18:29,130
decision

00:18:26,399 --> 00:18:31,620
on top of Ubuntu we have meters

00:18:29,130 --> 00:18:34,250
installed I come to this just in a

00:18:31,620 --> 00:18:37,279
second and on top of meters there is

00:18:34,250 --> 00:18:41,039
Chronos and Marathon so those are

00:18:37,279 --> 00:18:44,210
frameworks on top of missiles just a

00:18:41,039 --> 00:18:50,580
quick question who have you no missus

00:18:44,210 --> 00:18:52,620
okay cool so this is a typically or a

00:18:50,580 --> 00:18:56,610
typical architecture of missiles so

00:18:52,620 --> 00:18:59,460
missus consists of a of master demons

00:18:56,610 --> 00:19:03,500
usually at least three over there and

00:18:59,460 --> 00:19:06,840
you have slaves so this over here and

00:19:03,500 --> 00:19:08,789
you have or you need a suit keeper for

00:19:06,840 --> 00:19:11,750
quorum and for a leader election and to

00:19:08,789 --> 00:19:15,929
prevent you from split-brain yeah

00:19:11,750 --> 00:19:17,760
also three at least then you have a

00:19:15,929 --> 00:19:19,769
framework on top so in this case it's

00:19:17,760 --> 00:19:21,510
marathon you can use Chronos you can use

00:19:19,769 --> 00:19:25,679
elastic Jenkins there are plenty of

00:19:21,510 --> 00:19:29,220
frameworks which is where what can use

00:19:25,679 --> 00:19:32,130
the missus resources and usually a

00:19:29,220 --> 00:19:34,169
framework comes with a executor on the

00:19:32,130 --> 00:19:35,730
slave so in our case this is the doctor

00:19:34,169 --> 00:19:38,659
executed

00:19:35,730 --> 00:19:41,850
and if you want to start the task so a

00:19:38,659 --> 00:19:46,010
container in our case the communication

00:19:41,850 --> 00:19:51,720
is like that this the mrs. slave will

00:19:46,010 --> 00:19:53,519
yeah will report its resources and back

00:19:51,720 --> 00:19:56,309
to the missus master and the mrs. master

00:19:53,519 --> 00:19:58,889
then we'll offer those resources to

00:19:56,309 --> 00:20:01,440
marathon so for instance I have four

00:19:58,889 --> 00:20:03,299
gigabyte RAM and 4 CPUs free on my slave

00:20:01,440 --> 00:20:05,700
and those resources are going to be

00:20:03,299 --> 00:20:08,039
offered to Mars on Mars on them so the

00:20:05,700 --> 00:20:10,100
scheduler or every other framework there

00:20:08,039 --> 00:20:13,919
would then decide if those resources

00:20:10,100 --> 00:20:15,950
good enough so you can use location

00:20:13,919 --> 00:20:20,340
constraints or something like that and

00:20:15,950 --> 00:20:22,559
if if they fit it was hell meters and

00:20:20,340 --> 00:20:28,950
meters will then start the container on

00:20:22,559 --> 00:20:30,809
on a slave yeah and like I said marathon

00:20:28,950 --> 00:20:33,090
and meters have to communicate with

00:20:30,809 --> 00:20:40,559
zookeeper because of split-brain the

00:20:33,090 --> 00:20:41,909
election and stuff okay so with marathon

00:20:40,559 --> 00:20:43,769
so with the framework marathon is the

00:20:41,909 --> 00:20:48,299
framework which keeps your tasks running

00:20:43,769 --> 00:20:51,090
as the name would suggest you can create

00:20:48,299 --> 00:20:53,039
docker containers and it's pretty easy

00:20:51,090 --> 00:20:55,950
because you have a chasing hash and a

00:20:53,039 --> 00:20:59,070
good REST API and this Jason hash over

00:20:55,950 --> 00:21:02,399
there just says please create a app

00:20:59,070 --> 00:21:06,360
called production / NWS net waste of tea

00:21:02,399 --> 00:21:09,149
and some more parameters or some CQ of

00:21:06,360 --> 00:21:12,809
limitations for memory and CPU and it

00:21:09,149 --> 00:21:16,080
will tell use the doctor executors or on

00:21:12,809 --> 00:21:18,690
the slave and then there are some docker

00:21:16,080 --> 00:21:21,899
parameters and if you I think you know

00:21:18,690 --> 00:21:26,100
all doctor and the CLI it should look

00:21:21,899 --> 00:21:27,510
like familiar to you okay

00:21:26,100 --> 00:21:28,769
and if you do this most of the times

00:21:27,510 --> 00:21:30,659
where you're posting and posting and

00:21:28,769 --> 00:21:33,779
posting some Jason hashes with of course

00:21:30,659 --> 00:21:35,070
different names to it you will end up

00:21:33,779 --> 00:21:37,399
like this so you have a lot of

00:21:35,070 --> 00:21:40,169
containers doctor doctor doctor and

00:21:37,399 --> 00:21:42,960
those bunch of containers are across

00:21:40,169 --> 00:21:45,360
multiple different nodes running on

00:21:42,960 --> 00:21:48,410
random ports so it's a totally mess if

00:21:45,360 --> 00:21:50,690
you don't if you don't have a clue in

00:21:48,410 --> 00:21:52,880
mission is amou takes care about this

00:21:50,690 --> 00:21:56,180
end in the end you will app you will end

00:21:52,880 --> 00:21:58,550
up with some questions and those

00:21:56,180 --> 00:22:01,520
questions can be how to deal with

00:21:58,550 --> 00:22:04,220
container interconnection how to deal

00:22:01,520 --> 00:22:09,070
with data persistency and how should I

00:22:04,220 --> 00:22:11,030
deal with service discovery I start with

00:22:09,070 --> 00:22:13,490
interconnection first so contain

00:22:11,030 --> 00:22:15,830
interconnection means one container

00:22:13,490 --> 00:22:19,280
should be able to talk to another one on

00:22:15,830 --> 00:22:21,800
a different host so by or it should

00:22:19,280 --> 00:22:25,400
address the container by its assigned IP

00:22:21,800 --> 00:22:28,040
or its DNS name but some of the

00:22:25,400 --> 00:22:30,550
containers should not be able to speak

00:22:28,040 --> 00:22:35,390
to other isolated groups so this is the

00:22:30,550 --> 00:22:38,510
what what we want to here to realize and

00:22:35,390 --> 00:22:40,430
for this we are using docker overlay

00:22:38,510 --> 00:22:44,150
network the doctor overlay network

00:22:40,430 --> 00:22:47,410
feature was announced and released I

00:22:44,150 --> 00:22:51,050
think in docker one nine one ten and

00:22:47,410 --> 00:22:53,300
yeah it just comes with docker and it's

00:22:51,050 --> 00:22:56,300
really easy to run a such complex

00:22:53,300 --> 00:22:59,690
network with little extensible and so

00:22:56,300 --> 00:23:03,410
the VX LAN is a industry standard it's

00:22:59,690 --> 00:23:05,930
basically like a ordinary VLAN but it's

00:23:03,410 --> 00:23:08,810
across broadcast domains you could say

00:23:05,930 --> 00:23:11,150
it's a VLAN on steroids or in other

00:23:08,810 --> 00:23:13,730
words as a layer two on top of layer

00:23:11,150 --> 00:23:16,040
three so it works like this you have

00:23:13,730 --> 00:23:18,350
those two containers contain a and

00:23:16,040 --> 00:23:20,540
container B they are running their own

00:23:18,350 --> 00:23:21,890
IP address range and they want to

00:23:20,540 --> 00:23:23,630
communicate with each other and they are

00:23:21,890 --> 00:23:27,620
running of course on two different nodes

00:23:23,630 --> 00:23:29,450
and those nodes act as a VX LAN end

00:23:27,620 --> 00:23:32,930
point so the V TP is to be explained end

00:23:29,450 --> 00:23:35,720
point and they will communicate through

00:23:32,930 --> 00:23:39,200
their IP addresses so the original layer

00:23:35,720 --> 00:23:41,810
2 frame of the containers will be tagged

00:23:39,200 --> 00:23:45,710
with a VX land tech or with the VX an ID

00:23:41,810 --> 00:23:48,050
and then as it is encapsulated in a UDP

00:23:45,710 --> 00:23:52,820
fragment and the UDP fragment is then

00:23:48,050 --> 00:23:54,650
yeah again and capsulated in IP and this

00:23:52,820 --> 00:23:58,100
IP you can route it elsewhere

00:23:54,650 --> 00:24:00,140
and so you have a VX LAN or a virtual

00:23:58,100 --> 00:24:02,950
LAN on top of layer 3 so it's pretty

00:24:00,140 --> 00:24:02,950
pretty cool

00:24:05,140 --> 00:24:12,250
data persist persistency sorry we want

00:24:09,010 --> 00:24:14,559
to keep data or important data in case

00:24:12,250 --> 00:24:16,120
of a node failure so your container is

00:24:14,559 --> 00:24:18,400
running usually on the local disk and if

00:24:16,120 --> 00:24:20,770
this node is sailing you can start the

00:24:18,400 --> 00:24:23,500
container elsewhere but the data would

00:24:20,770 --> 00:24:27,550
be missing and for this we are lucky

00:24:23,500 --> 00:24:30,760
enough to have a safe storage who runs

00:24:27,550 --> 00:24:36,690
or knows death who knows set first X

00:24:30,760 --> 00:24:39,070
perhaps and then who runs F okay cool

00:24:36,690 --> 00:24:43,150
surf is basically a distributed storage

00:24:39,070 --> 00:24:45,730
cluster so it's software and with that

00:24:43,150 --> 00:24:49,150
we can make use of safe RBG's we are

00:24:45,730 --> 00:24:51,210
using also a docker feature it's a dr.

00:24:49,150 --> 00:24:54,640
volume driver plugin and we are using

00:24:51,210 --> 00:24:57,400
from this handy guy he's called

00:24:54,640 --> 00:25:00,240
porcupine and this is basically a fork

00:24:57,400 --> 00:25:03,150
of the yellow pages engineering team

00:25:00,240 --> 00:25:07,270
where this project was originated and

00:25:03,150 --> 00:25:10,960
but the Gita project seems more active

00:25:07,270 --> 00:25:13,630
and more maintained on the porcupine so

00:25:10,960 --> 00:25:16,360
if you're interested go for that okay

00:25:13,630 --> 00:25:19,240
and how we how do we use it we just

00:25:16,360 --> 00:25:21,040
extend the chasing hash so the JSON hash

00:25:19,240 --> 00:25:23,830
at the beginning we just add some more

00:25:21,040 --> 00:25:27,120
dr. parameters to it and we say please

00:25:23,830 --> 00:25:32,470
use the parameter tok a volume driver

00:25:27,120 --> 00:25:36,880
RVD it's then called RVD and mount this

00:25:32,470 --> 00:25:40,090
RBD onto the container mount point it

00:25:36,880 --> 00:25:40,510
already is basically a like a iced

00:25:40,090 --> 00:25:43,720
coffee

00:25:40,510 --> 00:25:50,200
block device and you can it works like

00:25:43,720 --> 00:25:53,620
an octopus okay next thing is service

00:25:50,200 --> 00:25:56,080
discovery service discovery means how to

00:25:53,620 --> 00:25:58,420
route a forward traffic to containers

00:25:56,080 --> 00:26:00,400
because containers are spawned on random

00:25:58,420 --> 00:26:03,790
plots and random notes and that can be

00:26:00,400 --> 00:26:06,750
tricky and for that we are using H a

00:26:03,790 --> 00:26:09,810
proxy in combination with Mars fenelby

00:26:06,750 --> 00:26:12,490
Mars on lb is basically a Python app

00:26:09,810 --> 00:26:15,290
that is managing your configuration of H

00:26:12,490 --> 00:26:17,240
a proxy and it consumes the

00:26:15,290 --> 00:26:21,520
appstate of marathon itself so it

00:26:17,240 --> 00:26:23,360
connects either with pulling or with a

00:26:21,520 --> 00:26:26,450
subscription to the event path of

00:26:23,360 --> 00:26:29,799
marathon and then knows what apps are

00:26:26,450 --> 00:26:33,770
running and is configuring AJ proxy

00:26:29,799 --> 00:26:35,809
accordingly so you can run it with that

00:26:33,770 --> 00:26:36,320
or you can use some other tools like

00:26:35,809 --> 00:26:38,600
go-getter

00:26:36,320 --> 00:26:42,290
or will candy or whatever load balancer

00:26:38,600 --> 00:26:44,750
you want to but those almost have a

00:26:42,290 --> 00:26:47,299
direct dependency to your key value

00:26:44,750 --> 00:26:48,799
store like hvd or zookeeper and if

00:26:47,299 --> 00:26:51,530
you're at CD and zookeepers crashing

00:26:48,799 --> 00:26:53,320
your load balancer would also so in this

00:26:51,530 --> 00:26:56,809
case we have the configuration already

00:26:53,320 --> 00:26:59,540
yeah it would be also a mess but what

00:26:56,809 --> 00:27:03,679
what's running there and it would keep

00:26:59,540 --> 00:27:07,669
up running and another good thing is by

00:27:03,679 --> 00:27:10,760
using a proxy it can forward all kind of

00:27:07,669 --> 00:27:13,370
traffic's so it's not restricted to HTTP

00:27:10,760 --> 00:27:16,460
like most of the other so it's it's cool

00:27:13,370 --> 00:27:19,400
for us and in the end you have a

00:27:16,460 --> 00:27:21,410
complete set up you have container

00:27:19,400 --> 00:27:23,540
interconnection based on doctor overlay

00:27:21,410 --> 00:27:27,320
Network we have two persistent storage

00:27:23,540 --> 00:27:30,740
with the RVD stuff and we have a service

00:27:27,320 --> 00:27:33,890
discovery and the cool thing is we can

00:27:30,740 --> 00:27:36,230
scale this horizontally so that means if

00:27:33,890 --> 00:27:38,240
we need more computing power we just add

00:27:36,230 --> 00:27:41,120
more slaves or more virtual machines in

00:27:38,240 --> 00:27:43,880
our case to the mr. slave's and if we

00:27:41,120 --> 00:27:46,100
need more I'll power or more volume

00:27:43,880 --> 00:27:51,260
inside of the safe storage we're adding

00:27:46,100 --> 00:27:54,559
more SEF notes to it so it's cool it's

00:27:51,260 --> 00:27:56,390
pretty complex I would say so there are

00:27:54,559 --> 00:27:59,510
a lot of interactions going on within

00:27:56,390 --> 00:28:02,179
this set up but it's very easy to use so

00:27:59,510 --> 00:28:04,640
if you're developing with this with this

00:28:02,179 --> 00:28:07,160
construct it's pretty easy because it

00:28:04,640 --> 00:28:10,660
has good api's and how those ABI have

00:28:07,160 --> 00:28:10,660
working I want to also show you

00:28:22,110 --> 00:28:31,269
yeah okay so this little tool is called

00:28:25,629 --> 00:28:34,360
postman okay it's a small isn't it I

00:28:31,269 --> 00:28:37,899
can't I can't really make it bigger I

00:28:34,360 --> 00:28:40,360
just read it what stands there so it's a

00:28:37,899 --> 00:28:44,110
chasing hash and there are some

00:28:40,360 --> 00:28:48,009
informations inside of it and we have

00:28:44,110 --> 00:28:50,619
some informations like the app name so

00:28:48,009 --> 00:28:52,570
there is OCC my app we have to see group

00:28:50,619 --> 00:28:54,629
limits is basically basically like that

00:28:52,570 --> 00:28:57,850
what I will showing you in the slides

00:28:54,629 --> 00:29:01,330
but it's more comprehensive where some

00:28:57,850 --> 00:29:03,580
location constraints so this container

00:29:01,330 --> 00:29:07,889
or this application we want to run is

00:29:03,580 --> 00:29:07,889
just run in our datacenter Nuremberg and

00:29:07,980 --> 00:29:13,179
then we have some docker

00:29:10,590 --> 00:29:16,029
yeah Dhaka parameter so Dhaka executors

00:29:13,179 --> 00:29:18,249
stuff we want or in the industry my I'm

00:29:16,029 --> 00:29:21,279
running a nginx container so it's not

00:29:18,249 --> 00:29:25,509
nothing really fancy but I'm loopback

00:29:21,279 --> 00:29:26,230
mounting the EDC host name of the new

00:29:25,509 --> 00:29:28,029
slave

00:29:26,230 --> 00:29:30,159
inside of the container so that we can

00:29:28,029 --> 00:29:35,230
see if we are visiting the containers

00:29:30,159 --> 00:29:39,279
web page where we have landed then we

00:29:35,230 --> 00:29:43,690
have poor Eddie which should be exposed

00:29:39,279 --> 00:29:47,739
and it should not be privileged of

00:29:43,690 --> 00:29:49,600
course and we have a parameter this is

00:29:47,739 --> 00:29:52,179
very interesting because this is the

00:29:49,600 --> 00:29:54,489
network stuff so we just say please use

00:29:52,179 --> 00:29:57,100
the network OSD see my app and this is a

00:29:54,489 --> 00:30:00,850
doctor overlay network which I was or

00:29:57,100 --> 00:30:02,679
which I have created already please use

00:30:00,850 --> 00:30:04,809
force pull image that means if you're

00:30:02,679 --> 00:30:07,629
restarting the app it all always tries

00:30:04,809 --> 00:30:09,580
to pull the image of the doctor registry

00:30:07,629 --> 00:30:13,179
so if you're having a new abortion it

00:30:09,580 --> 00:30:15,519
would use it ok what else we have some

00:30:13,179 --> 00:30:19,659
health checks and what's also important

00:30:15,519 --> 00:30:22,720
are the labels so there it's very blurry

00:30:19,659 --> 00:30:25,779
it is my app dot NWS dotnet waist or T

00:30:22,720 --> 00:30:31,359
the sister yeah this is the HTTP address

00:30:25,779 --> 00:30:33,820
where I want to reach this container yes

00:30:31,359 --> 00:30:35,270
it's basically HTTP POST to this

00:30:33,820 --> 00:30:40,040
endpoint and if I'm going to

00:30:35,270 --> 00:30:43,540
10 this I have to be a letter I have to

00:30:40,040 --> 00:30:45,800
be quick ok I was quick enough I guess

00:30:43,540 --> 00:30:47,720
so there we have a new deployment

00:30:45,800 --> 00:30:51,320
popping up here this is the mass on web

00:30:47,720 --> 00:30:53,450
interface and it is starting so it

00:30:51,320 --> 00:30:56,090
already started the container and now it

00:30:53,450 --> 00:30:58,700
runs for the health checks so it checks

00:30:56,090 --> 00:31:00,650
if this container is healthy and as you

00:30:58,700 --> 00:31:03,260
can see this container was started on

00:31:00,650 --> 00:31:08,770
measles slaves 11 in this case on a

00:31:03,260 --> 00:31:13,970
random port on animal 3 to 8 for 8 and

00:31:08,770 --> 00:31:15,560
if we are visiting the website we have

00:31:13,970 --> 00:31:20,900
to edit the hostname what I was

00:31:15,560 --> 00:31:23,140
remounting okay and if we have a closer

00:31:20,900 --> 00:31:23,140
look

00:31:34,830 --> 00:31:40,649
we can see the container running on top

00:31:36,779 --> 00:31:42,720
of net meter slave the 11 and yeah this

00:31:40,649 --> 00:31:45,600
random port which is exposed to or is

00:31:42,720 --> 00:31:49,220
forwarded with destination nut to the

00:31:45,600 --> 00:31:52,190
container port 80 it is using the nginx

00:31:49,220 --> 00:31:55,590
stable delta and linux image what I was

00:31:52,190 --> 00:31:57,960
what I have defined and so on and if we

00:31:55,590 --> 00:32:01,710
have a closer look to this particular

00:31:57,960 --> 00:32:04,200
container with docker inspect we can see

00:32:01,710 --> 00:32:12,059
also that it's running within my

00:32:04,200 --> 00:32:14,190
container network OCC - my app of course

00:32:12,059 --> 00:32:15,720
I can grab some information out of it so

00:32:14,190 --> 00:32:20,129
I just send a get request to them

00:32:15,720 --> 00:32:21,749
endpoint and then I get this chasing so

00:32:20,129 --> 00:32:25,379
it looks pretty much the same what I was

00:32:21,749 --> 00:32:27,149
posting to a marathon API but it has

00:32:25,379 --> 00:32:29,489
some more information like it's very

00:32:27,149 --> 00:32:30,929
blurry sorry for that when it was

00:32:29,489 --> 00:32:37,039
started and stuff like that so it's good

00:32:30,929 --> 00:32:41,070
for for developing and if you want to

00:32:37,039 --> 00:32:43,679
scale it so if you have load on this

00:32:41,070 --> 00:32:46,200
nginx container you can scale it very

00:32:43,679 --> 00:32:49,279
easy so you just have to send a HTTP put

00:32:46,200 --> 00:32:52,320
request so you're changing the original

00:32:49,279 --> 00:32:54,960
Jason hash and in this case I'm adding

00:32:52,320 --> 00:32:58,850
this value so it's key instances and I

00:32:54,960 --> 00:33:01,619
want to have six and if I'm sending that

00:32:58,850 --> 00:33:02,999
there should be a new deployment going

00:33:01,619 --> 00:33:05,639
on there so all they get those

00:33:02,999 --> 00:33:11,879
containers are staged right now some of

00:33:05,639 --> 00:33:19,409
them are healthy already and here we go

00:33:11,879 --> 00:33:21,509
so what you can see here now is its

00:33:19,409 --> 00:33:24,330
meter slave six involved is eight seven

00:33:21,509 --> 00:33:26,489
ten so it's just random note on random

00:33:24,330 --> 00:33:32,119
port like I said and if you go back to

00:33:26,489 --> 00:33:35,369
the to the web page and we are reloading

00:33:32,119 --> 00:33:36,869
it is just load balancer a to a proxy

00:33:35,369 --> 00:33:40,340
stuff with Malfoy maybe it's just

00:33:36,869 --> 00:33:40,340
working like it should

00:33:40,900 --> 00:33:46,330
we go back and we have a closer look

00:33:42,820 --> 00:33:56,860
inside of the docker Network sorry

00:33:46,330 --> 00:34:00,520
Oh SDC my app we can see so this is a

00:33:56,860 --> 00:34:02,110
container name with this IP address and

00:34:00,520 --> 00:34:05,590
this is the next one the next one and

00:34:02,110 --> 00:34:07,030
this is the this is the IP namespace and

00:34:05,590 --> 00:34:09,550
this is the container interconnection so

00:34:07,030 --> 00:34:11,440
every container can connect to the other

00:34:09,550 --> 00:34:15,570
one through the create overlay network

00:34:11,440 --> 00:34:15,570
with we excellent so it's pretty cool

00:34:17,850 --> 00:34:21,850
okay

00:34:18,970 --> 00:34:25,210
and of course if I want to get rid of it

00:34:21,850 --> 00:34:34,270
I just send a HTTP delete request to the

00:34:25,210 --> 00:34:36,190
endpoint yep and it should be gone yeah

00:34:34,270 --> 00:34:41,409
no no it's gone so no applications are

00:34:36,190 --> 00:34:43,990
created okay so this was the

00:34:41,409 --> 00:34:46,060
architecture part I'm going on now with

00:34:43,990 --> 00:34:49,810
so this should be look like blurry so

00:34:46,060 --> 00:34:51,730
this is just an effect so we started

00:34:49,810 --> 00:34:54,639
with developing and all first steps in

00:34:51,730 --> 00:34:57,160
development or all first step was to

00:34:54,639 --> 00:35:00,040
declare a programming language a primary

00:34:57,160 --> 00:35:03,190
programming language we have chosen Ruby

00:35:00,040 --> 00:35:05,020
for our stack because like I said we are

00:35:03,190 --> 00:35:07,720
non professional for developers and it's

00:35:05,020 --> 00:35:10,000
our most well known language we can we

00:35:07,720 --> 00:35:12,040
can do so and it's pretty major and with

00:35:10,000 --> 00:35:14,980
Ruby on Rails and natural you have good

00:35:12,040 --> 00:35:18,250
frameworks to build api's and to build

00:35:14,980 --> 00:35:22,060
all those rest stuff in the beginning we

00:35:18,250 --> 00:35:24,450
had to deal a lot with data based models

00:35:22,060 --> 00:35:27,370
and relationships to active record stuff

00:35:24,450 --> 00:35:31,900
and how to handle caching concessions so

00:35:27,370 --> 00:35:33,910
all those stuff was defined and because

00:35:31,900 --> 00:35:36,880
we wanted to have a test-driven

00:35:33,910 --> 00:35:39,790
development we just build the test

00:35:36,880 --> 00:35:43,120
pipeline first because before we started

00:35:39,790 --> 00:35:45,190
developing so this was pretty cool

00:35:43,120 --> 00:35:46,750
because with every good commit the

00:35:45,190 --> 00:35:50,950
pipeline was triggered in the background

00:35:46,750 --> 00:35:54,250
and you're getting confident even more

00:35:50,950 --> 00:35:56,140
confident from from commit to commit

00:35:54,250 --> 00:35:58,470
and the best is you don't have to fill

00:35:56,140 --> 00:36:01,359
around and deploy something manually

00:35:58,470 --> 00:36:02,560
usually you have you're committing and

00:36:01,359 --> 00:36:03,940
pushing to get and then you go to

00:36:02,560 --> 00:36:05,320
marathon and you're doing something like

00:36:03,940 --> 00:36:08,470
I don't know

00:36:05,320 --> 00:36:11,020
restart rocker blah and yeah it's very

00:36:08,470 --> 00:36:13,060
cool and this helped us a lot especially

00:36:11,020 --> 00:36:16,030
in the beginning so when we were

00:36:13,060 --> 00:36:18,099
changing the database model a lot and we

00:36:16,030 --> 00:36:20,890
were refactoring all those test-driven

00:36:18,099 --> 00:36:23,170
approach help because it just says here

00:36:20,890 --> 00:36:28,060
is something broken there and so on so

00:36:23,170 --> 00:36:30,880
it's it was quite cool within this

00:36:28,060 --> 00:36:32,230
pipeline we have three environments we

00:36:30,880 --> 00:36:35,380
are nothing really fancy we have ad

00:36:32,230 --> 00:36:37,349
local development so you can run the

00:36:35,380 --> 00:36:40,930
complete environment on your local

00:36:37,349 --> 00:36:42,820
laptop you can either run docker

00:36:40,930 --> 00:36:44,680
containers or you can run your

00:36:42,820 --> 00:36:48,550
applications natively so your rails or

00:36:44,680 --> 00:36:51,550
Sinatra stick or whatever I prefer that

00:36:48,550 --> 00:36:53,560
to be honest and you can run we have

00:36:51,550 --> 00:36:56,410
some vagrant boxes that can be

00:36:53,560 --> 00:36:58,780
provisioned with the production puppet

00:36:56,410 --> 00:37:01,150
modules and then you go and have a

00:36:58,780 --> 00:37:01,930
measles cluster on your laptop within

00:37:01,150 --> 00:37:05,710
VirtualBox

00:37:01,930 --> 00:37:08,650
it's pretty cool and interesting we have

00:37:05,710 --> 00:37:10,780
a database which is seeded from scratch

00:37:08,650 --> 00:37:13,869
on every deploy so we have some test

00:37:10,780 --> 00:37:16,560
data within and yeah it just increases

00:37:13,869 --> 00:37:19,510
the confidence and to push in production

00:37:16,560 --> 00:37:22,000
still manually we have a we have all

00:37:19,510 --> 00:37:25,119
prepared but it's it's a click in the

00:37:22,000 --> 00:37:27,820
web interface of Jenkins we don't trust

00:37:25,119 --> 00:37:31,869
us we don't trust the tests and we want

00:37:27,820 --> 00:37:33,310
to have the control over this if we not

00:37:31,869 --> 00:37:37,060
not to push something bad into

00:37:33,310 --> 00:37:38,560
production the pipeline looks like this

00:37:37,060 --> 00:37:41,980
so the Jenkins pipeline it's also

00:37:38,560 --> 00:37:44,380
nothing special I would say but we have

00:37:41,980 --> 00:37:46,150
this pipeline for every environment so

00:37:44,380 --> 00:37:47,650
if you're running in development

00:37:46,150 --> 00:37:51,400
environment or in testing and in

00:37:47,650 --> 00:37:55,359
production every time or your source

00:37:51,400 --> 00:37:57,910
code goes to this pipeline so every

00:37:55,359 --> 00:38:00,160
change in the rails application or in

00:37:57,910 --> 00:38:04,660
Sinatra containers are triggering unit

00:38:00,160 --> 00:38:06,580
tests so those are triggered by git and

00:38:04,660 --> 00:38:07,390
Jenkins are running or is running those

00:38:06,580 --> 00:38:09,820
unit tests

00:38:07,390 --> 00:38:11,820
and then a good doctor image is built

00:38:09,820 --> 00:38:15,280
from that so we have doctor files and

00:38:11,820 --> 00:38:17,020
the native race app will be wrapped in a

00:38:15,280 --> 00:38:18,490
docker container and this docker

00:38:17,020 --> 00:38:20,470
container is then going to be pushed to

00:38:18,490 --> 00:38:22,720
the docker registry and from that it's

00:38:20,470 --> 00:38:25,330
going to be deployed although with

00:38:22,720 --> 00:38:28,210
Jenkins to the specific measles

00:38:25,330 --> 00:38:30,690
environment and within this environment

00:38:28,210 --> 00:38:33,040
there are running more and more tests or

00:38:30,690 --> 00:38:41,920
end-to-end tests and integration tests

00:38:33,040 --> 00:38:45,310
and stuff to to check for stability okay

00:38:41,920 --> 00:38:48,880
and like I said we wanted to make use of

00:38:45,310 --> 00:38:52,120
micro services you have a lot of pros

00:38:48,880 --> 00:38:55,780
and cons of micro-services some negative

00:38:52,120 --> 00:39:00,550
suspects are it's more complicated you

00:38:55,780 --> 00:39:02,140
have some yeah you if it's important for

00:39:00,550 --> 00:39:04,270
you you have Network latency of course

00:39:02,140 --> 00:39:06,160
and you have a lot of overhead in the

00:39:04,270 --> 00:39:07,420
code if you're just building a small

00:39:06,160 --> 00:39:10,330
microservice you have a lot of code

00:39:07,420 --> 00:39:12,970
which is dealing with the API and it's

00:39:10,330 --> 00:39:17,680
more complicated in debugging for my

00:39:12,970 --> 00:39:21,880
point of view and yeah for debugging we

00:39:17,680 --> 00:39:24,100
have a lot of logging and we try to log

00:39:21,880 --> 00:39:27,100
everything every event out of our Ruby

00:39:24,100 --> 00:39:30,010
code to elasticsearch to know what's

00:39:27,100 --> 00:39:31,870
happening within the containers because

00:39:30,010 --> 00:39:34,000
if you don't know the complete stack and

00:39:31,870 --> 00:39:37,360
all the micro services sometimes very

00:39:34,000 --> 00:39:39,460
hard to get an idea which micro service

00:39:37,360 --> 00:39:41,590
just say it right now and that's why

00:39:39,460 --> 00:39:44,770
it's pretty important to lock all those

00:39:41,590 --> 00:39:47,410
events on the other side it's easy and

00:39:44,770 --> 00:39:51,070
fast to develop that means you can focus

00:39:47,410 --> 00:39:54,250
on one thing so you're you're doing is

00:39:51,070 --> 00:39:56,290
you're creating an API for something and

00:39:54,250 --> 00:39:58,930
you're just doing this something so it's

00:39:56,290 --> 00:40:01,960
it's pretty pretty fast forward and the

00:39:58,930 --> 00:40:04,410
micro service architecture allows us to

00:40:01,960 --> 00:40:08,410
switch the programming language that

00:40:04,410 --> 00:40:12,550
means if we as non-professional

00:40:08,410 --> 00:40:14,380
developer think writing something in

00:40:12,550 --> 00:40:15,820
goal or in pieden would be better

00:40:14,380 --> 00:40:20,290
because there is a better framework or

00:40:15,820 --> 00:40:25,750
better libraries we can use just Python

00:40:20,290 --> 00:40:30,370
Oracle for that okay

00:40:25,750 --> 00:40:33,850
so those are our micro services every

00:40:30,370 --> 00:40:36,460
micro service has a defined interface so

00:40:33,850 --> 00:40:41,590
it's a REST API in the end this REST API

00:40:36,460 --> 00:40:43,630
is secured by SSA client certificates to

00:40:41,590 --> 00:40:46,990
make sure no one can talk of course to

00:40:43,630 --> 00:40:49,870
our API and it's exchangeable we had

00:40:46,990 --> 00:40:52,750
some issues by providing the payment

00:40:49,870 --> 00:40:56,500
stuff so we started with PayPal and it

00:40:52,750 --> 00:40:58,390
all worked great in the descent box but

00:40:56,500 --> 00:41:00,640
then when we wanted to go live people

00:40:58,390 --> 00:41:04,630
said it's not working in Europe for you

00:41:00,640 --> 00:41:08,350
sorry it was a mess and I was really

00:41:04,630 --> 00:41:10,330
angry but technically we just had to

00:41:08,350 --> 00:41:13,930
exchange this payment or this paper

00:41:10,330 --> 00:41:16,990
micro service with a new one with the

00:41:13,930 --> 00:41:18,700
new payment service provider and we

00:41:16,990 --> 00:41:21,160
don't have to resect er the app because

00:41:18,700 --> 00:41:23,620
there there was something special to

00:41:21,160 --> 00:41:25,120
PayPal or something so if you want to

00:41:23,620 --> 00:41:27,730
integrate more payment service provider

00:41:25,120 --> 00:41:29,200
we can also use more micro services so

00:41:27,730 --> 00:41:31,660
it's pretty cool so it's exchangeable

00:41:29,200 --> 00:41:32,410
and like you have seen in the demo it's

00:41:31,660 --> 00:41:37,300
scalable

00:41:32,410 --> 00:41:40,000
if we have some issues while yeah while

00:41:37,300 --> 00:41:41,460
generating PDFs for instance for the

00:41:40,000 --> 00:41:44,170
billing process or something like that

00:41:41,460 --> 00:41:46,870
we can just spin up more PDF micro

00:41:44,170 --> 00:41:50,140
services and the load balancer will they

00:41:46,870 --> 00:41:56,050
are spread the yeah the API calls to

00:41:50,140 --> 00:41:57,810
multiple instances so what's next we are

00:41:56,050 --> 00:42:01,360
planning to build of course more apps

00:41:57,810 --> 00:42:05,080
even more sophisticated ones let's let's

00:42:01,360 --> 00:42:07,630
see what we don't know yet we if you

00:42:05,080 --> 00:42:10,030
have a good idea just talk to me perhaps

00:42:07,630 --> 00:42:12,250
we want to provide some infrastructure

00:42:10,030 --> 00:42:15,040
as a service stuff within the platform

00:42:12,250 --> 00:42:19,150
because the platform is very they are

00:42:15,040 --> 00:42:20,890
flexible and we have already code which

00:42:19,150 --> 00:42:22,960
is managing our infrastructure service

00:42:20,890 --> 00:42:24,870
part of openable and stuff and we can

00:42:22,960 --> 00:42:28,120
just reuse it and we won't of course

00:42:24,870 --> 00:42:30,070
gather more experience so our customer

00:42:28,120 --> 00:42:33,000
needs and stuff and with that we want to

00:42:30,070 --> 00:42:35,700
add features to the products extendable

00:42:33,000 --> 00:42:40,920
products and yeah add features to the

00:42:35,700 --> 00:42:42,270
platform a little bit early

00:42:40,920 --> 00:42:45,020
that's pretty much it so if you have

00:42:42,270 --> 00:42:48,390
questions feel free to ask them now and

00:42:45,020 --> 00:42:50,700
a tryout product if you want to we have

00:42:48,390 --> 00:42:53,820
a booth already over there I think you

00:42:50,700 --> 00:43:02,100
have seen it and yeah thank you for

00:42:53,820 --> 00:43:02,820
listening so thank you very much

00:43:02,100 --> 00:43:06,180
Sebastian

00:43:02,820 --> 00:43:09,330
also when you're over there ordering

00:43:06,180 --> 00:43:12,900
your twenty a single satellite never us

00:43:09,330 --> 00:43:15,450
in the instances you can also take the

00:43:12,900 --> 00:43:17,730
chance to join the Rattler of Thomas

00:43:15,450 --> 00:43:23,300
cran it's the last chance before the

00:43:17,730 --> 00:43:23,300
winner will be selected so any questions

00:43:25,220 --> 00:43:35,460
hmm thank you very first one you

00:43:33,810 --> 00:43:39,120
mentioned you using a safe for

00:43:35,460 --> 00:43:43,590
persistent storage I expect you to do it

00:43:39,120 --> 00:43:46,800
in AWS as well yeah I didn't manage

00:43:43,590 --> 00:43:49,050
mentioned that in AWS we are just

00:43:46,800 --> 00:43:51,120
launching stateless apps for now so we

00:43:49,050 --> 00:43:54,060
don't use any persistent storage layer

00:43:51,120 --> 00:43:57,300
there so in AWS you would use the

00:43:54,060 --> 00:44:00,900
particle elastic block device of AWS it

00:43:57,300 --> 00:44:02,880
would act like like safe Arbutus and so

00:44:00,900 --> 00:44:07,760
you're using your local in-house s

00:44:02,880 --> 00:44:07,760
cluster for yeah for those stuff yeah

00:44:13,460 --> 00:44:21,420
thank you talk um I've actually have

00:44:17,040 --> 00:44:24,180
actually three questions um so what why

00:44:21,420 --> 00:44:28,110
do you decide to use mesos instead of

00:44:24,180 --> 00:44:30,450
for example like kubernetes okay um yeah

00:44:28,110 --> 00:44:32,760
okay let's start with the first one um

00:44:30,450 --> 00:44:35,160
it's it's it's a good question you have

00:44:32,760 --> 00:44:37,730
Cuba natives you have dr. swarm and

00:44:35,160 --> 00:44:40,170
measles right now so it's like a

00:44:37,730 --> 00:44:43,460
orchestration war a container

00:44:40,170 --> 00:44:46,050
orchestration war when we have evaluated

00:44:43,460 --> 00:44:49,860
measles it was just with the

00:44:46,050 --> 00:44:52,260
marathon API it was just very it's not

00:44:49,860 --> 00:44:55,260
stable because it doesn't feel like

00:44:52,260 --> 00:44:59,910
stable but it's very flexible and we

00:44:55,260 --> 00:45:02,370
don't had a use of running pops so you

00:44:59,910 --> 00:45:04,320
can run plots as well there but you you

00:45:02,370 --> 00:45:06,870
need to have a complicated network with

00:45:04,320 --> 00:45:09,630
kubernetes and that's why we go with

00:45:06,870 --> 00:45:11,790
missus and of course you can reuse

00:45:09,630 --> 00:45:14,520
missus resources with different

00:45:11,790 --> 00:45:17,390
framework so we had a project where we

00:45:14,520 --> 00:45:21,120
wanted to scale out our Jenkins and

00:45:17,390 --> 00:45:22,710
Jenkins then can talk to mrs. and get

00:45:21,120 --> 00:45:24,930
more resources and spinning up more

00:45:22,710 --> 00:45:26,450
Jenkins workers there or Jenkins ladies

00:45:24,930 --> 00:45:29,850
I don't know how they how to name it and

00:45:26,450 --> 00:45:34,740
that's it's more flexible in my opinion

00:45:29,850 --> 00:45:37,740
but I guess it's just tomato tomahto and

00:45:34,740 --> 00:45:39,690
so the second question and what are

00:45:37,740 --> 00:45:42,900
using for luck management for your

00:45:39,690 --> 00:45:45,240
missus solution like do you collect them

00:45:42,900 --> 00:45:48,180
somewhere centrally or what's you know

00:45:45,240 --> 00:45:52,070
it's um it's elasticsearch so it's log

00:45:48,180 --> 00:45:55,800
session elasticsearch and last one so

00:45:52,070 --> 00:45:57,750
you have your own services like your to

00:45:55,800 --> 00:45:58,890
mentio infrastructure then you also have

00:45:57,750 --> 00:46:01,200
the client apps right

00:45:58,890 --> 00:46:02,640
like the rocket jet or get lab there and

00:46:01,200 --> 00:46:04,530
they both run on the same basis

00:46:02,640 --> 00:46:06,060
clustered a run on right now they're

00:46:04,530 --> 00:46:08,630
running on the same users cluster we

00:46:06,060 --> 00:46:12,420
want to isolate or we are isolating them

00:46:08,630 --> 00:46:14,730
with iptables rules with namespacing

00:46:12,420 --> 00:46:19,230
with docker username spaces and stuff

00:46:14,730 --> 00:46:21,240
and yeah it's you could run virtual

00:46:19,230 --> 00:46:23,330
machines for that for the gitlab runner

00:46:21,240 --> 00:46:25,560
we are running virtual machines because

00:46:23,330 --> 00:46:26,970
within the skid lebrun and you're

00:46:25,560 --> 00:46:31,260
executing code of the customer and

00:46:26,970 --> 00:46:33,350
that's very dangerous and yeah ok thank

00:46:31,260 --> 00:46:38,430
you you're welcome

00:46:33,350 --> 00:46:41,010
all right any more questions no it

00:46:38,430 --> 00:46:42,470
doesn't look like that so I'll see you

00:46:41,010 --> 00:46:48,410
on the next talk thank you

00:46:42,470 --> 00:46:48,410

YouTube URL: https://www.youtube.com/watch?v=mqZAo0Zxj4U


