Title: OSDC 2017 | Cloud Native Java by Josh Long
Publication date: 2017-06-03
Playlist: OSDC 2017 | Open Source Data Center Conference
Description: 
	“It is not necessary to change. Survival is not mandatory.” -W. Edwards Deming
Work takes time to flow through an organization and ultimately be deployed to production where it captures value. It’s critical to reduce time-to-production. Software - for many organizations and industries - is a competitive advantage. Organizations break their larger software ambitions into smaller, independently deployable, feature -centric batches of work - microservices. In order to reduce the round-trip between stations of work, organizations collapse or consolidate as much of them as possible and automate the rest; developers and operations beget “devops,” cloud-based services and platforms (like Cloud Foundry) automate operations work and break down the need for ITIL tickets and change management boards. But velocity, for velocity’s sake, is dangerous. Microservices invite architectural complexity that few are prepared to address. In this talk, we’ll look at how high performance organizations like Ticketmaster, Alibaba, and Netflix make short work of that complexity with Spring Boot and Spring Cloud.
Captions: 
	00:00:09,590 --> 00:00:13,110
okay so

00:00:11,250 --> 00:00:16,350
let's start let's go on with the next

00:00:13,110 --> 00:00:20,250
talk the next talk is presented by Josh

00:00:16,350 --> 00:00:27,660
long he's a real java champion he says

00:00:20,250 --> 00:00:29,730
so and permit or consent so ok let's

00:00:27,660 --> 00:00:32,300
find out he's talking about java native

00:00:29,730 --> 00:00:35,610
apps cloud native apps right thank you

00:00:32,300 --> 00:00:38,760
good morning everybody how are you that

00:00:35,610 --> 00:00:40,170
was just terrible good morning oh I

00:00:38,760 --> 00:00:41,519
suppose it's now afternoon anyways that

00:00:40,170 --> 00:00:43,530
way you're correcting me you're so

00:00:41,519 --> 00:00:45,030
hesitant because it's now afternoon so I

00:00:43,530 --> 00:00:46,380
appreciate you being here I know there's

00:00:45,030 --> 00:00:48,690
a lot of great talk you could be at

00:00:46,380 --> 00:00:50,489
right now and you chose to spend this

00:00:48,690 --> 00:00:51,899
time with me and I appreciate that we're

00:00:50,489 --> 00:00:54,450
going to talk a lot about software today

00:00:51,899 --> 00:00:56,489
I care about software and so I start all

00:00:54,450 --> 00:00:57,989
my presentations with a github

00:00:56,489 --> 00:01:00,270
repository that you can follow along

00:00:57,989 --> 00:01:01,829
with at your own leisure later on your

00:01:00,270 --> 00:01:03,780
own discretion so I encourage you to

00:01:01,829 --> 00:01:04,920
note that github repository for now

00:01:03,780 --> 00:01:06,750
because we're going to go through so

00:01:04,920 --> 00:01:08,280
much stuff and I'm not expecting you to

00:01:06,750 --> 00:01:11,070
remember every single line of code that

00:01:08,280 --> 00:01:12,539
we type or every single line of every

00:01:11,070 --> 00:01:15,299
single concept that we talk about but

00:01:12,539 --> 00:01:17,010
you'll be able to ground the ideas in

00:01:15,299 --> 00:01:19,320
the code later on now if you have

00:01:17,010 --> 00:01:22,439
questions comments feedback whatever I'm

00:01:19,320 --> 00:01:24,119
happy to talk to you I have I have you

00:01:22,439 --> 00:01:25,080
know Twitter and I'm happy to talk to

00:01:24,119 --> 00:01:29,990
you on Twitter how many of you are on

00:01:25,080 --> 00:01:33,360
Twitter it's it's 2017 Twitter anybody

00:01:29,990 --> 00:01:35,670
anybody at all okay very good well the

00:01:33,360 --> 00:01:36,810
rest of you get on it it's the new IRC

00:01:35,670 --> 00:01:38,400
it's a great place to be it's where all

00:01:36,810 --> 00:01:39,840
the stakeholders that drive the open

00:01:38,400 --> 00:01:41,130
source that powers your businesses are

00:01:39,840 --> 00:01:41,490
and if you want to engage in the

00:01:41,130 --> 00:01:44,009
community

00:01:41,490 --> 00:01:45,750
it is the absolute best place to be what

00:01:44,009 --> 00:01:51,090
about what about email how many of you

00:01:45,750 --> 00:01:52,890
have email e e-mail email anybody okay

00:01:51,090 --> 00:01:54,270
well if you're there find me there if

00:01:52,890 --> 00:01:56,340
you want as well I don't particularly

00:01:54,270 --> 00:01:58,439
like email I think Twitter's are far

00:01:56,340 --> 00:02:00,810
more sort of democratic more open more

00:01:58,439 --> 00:02:02,640
free and we reusable approach to

00:02:00,810 --> 00:02:04,619
learning but I'll take it any way I can

00:02:02,640 --> 00:02:06,479
get it right so so find me there if you

00:02:04,619 --> 00:02:09,149
like a little bit about me as was just

00:02:06,479 --> 00:02:11,519
able be able to explain my name is Josh

00:02:09,149 --> 00:02:13,260
long it's so nice to be here I'm a

00:02:11,519 --> 00:02:15,090
spring developer advocate on the spring

00:02:13,260 --> 00:02:18,510
team at pivotal how many of you know

00:02:15,090 --> 00:02:21,540
pivotal we're a small company with with

00:02:18,510 --> 00:02:23,489
big dreams and we have them we have a

00:02:21,540 --> 00:02:24,930
really interesting team stacked with

00:02:23,489 --> 00:02:27,090
lots of interesting people

00:02:24,930 --> 00:02:29,099
from all across the ecosystem I focus on

00:02:27,090 --> 00:02:30,900
apps and I do might level the headed

00:02:29,099 --> 00:02:33,540
best to help developers and to help

00:02:30,900 --> 00:02:35,939
people build applications that work well

00:02:33,540 --> 00:02:38,010
that fully exploit this a new wonderful

00:02:35,939 --> 00:02:40,109
paradigm of the cloud right and so part

00:02:38,010 --> 00:02:41,760
of that is giving talks or community

00:02:40,109 --> 00:02:43,349
members to customers organizations like

00:02:41,760 --> 00:02:45,180
yourselves and then of course part of

00:02:43,349 --> 00:02:46,920
that is doing training videos and doing

00:02:45,180 --> 00:02:50,780
ebooks now for those of you are

00:02:46,920 --> 00:02:52,739
wondering that bird on that book cover

00:02:50,780 --> 00:02:55,590
and by the way I can see it in your eyes

00:02:52,739 --> 00:02:56,790
I can see the curiosity in your eyes for

00:02:55,590 --> 00:03:01,560
those of you are wondering that bird is

00:02:56,790 --> 00:03:05,720
a blue eared Kingfisher it's a bird

00:03:01,560 --> 00:03:09,030
that's indigenous to the Indonesian Java

00:03:05,720 --> 00:03:12,480
Islands now in English when we say

00:03:09,030 --> 00:03:16,909
indigenous we can also say native to the

00:03:12,480 --> 00:03:21,750
Java Islands and a bird or birds fly

00:03:16,909 --> 00:03:25,019
often in the clouds and so this is a

00:03:21,750 --> 00:03:27,930
bird that is native to Java that flies

00:03:25,019 --> 00:03:31,650
through the clouds it's a cloud native

00:03:27,930 --> 00:03:33,930
java bird it's a bird that's made it in

00:03:31,650 --> 00:03:34,470
their mind it'll come give it time give

00:03:33,930 --> 00:03:36,690
it time

00:03:34,470 --> 00:03:37,769
you'll get it it's fine if you really

00:03:36,690 --> 00:03:38,940
want to get it though you should close

00:03:37,769 --> 00:03:40,229
your laptops by the way we're going to

00:03:38,940 --> 00:03:41,939
go through a lot of stuff like I say

00:03:40,229 --> 00:03:44,099
nobody has ever managed to sit through

00:03:41,939 --> 00:03:45,060
one of my talks staring at Facebook so

00:03:44,099 --> 00:03:46,650
if you've been if you're going to be

00:03:45,060 --> 00:03:47,849
here I appreciate it if you give

00:03:46,650 --> 00:03:52,500
yourself the chance to not waste your

00:03:47,849 --> 00:03:54,060
own hour now I work in my capacity on

00:03:52,500 --> 00:03:55,949
several different projects I'm an open

00:03:54,060 --> 00:03:58,439
source and engineer as well I am the

00:03:55,949 --> 00:04:00,979
leading number-one top ranked most

00:03:58,439 --> 00:04:04,949
highly visible most lauded and most

00:04:00,979 --> 00:04:06,989
recognized contributor to the projects

00:04:04,949 --> 00:04:09,060
like spring boots spring cloud spring

00:04:06,989 --> 00:04:13,439
integration spring bat Vaadin time leaf

00:04:09,060 --> 00:04:15,209
activity number one contributor of bugs

00:04:13,439 --> 00:04:17,340
but still number one number one more

00:04:15,209 --> 00:04:20,070
bugs per commit than any other engineer

00:04:17,340 --> 00:04:21,299
on these teams not fixed I mean I

00:04:20,070 --> 00:04:25,280
created them but still it's it's

00:04:21,299 --> 00:04:27,300
something you know and we at pivotal

00:04:25,280 --> 00:04:28,919
have a lot of great open source software

00:04:27,300 --> 00:04:30,300
so there's plenty of opportunity for

00:04:28,919 --> 00:04:31,800
folks like me to work on open source

00:04:30,300 --> 00:04:34,200
projects you will recognize some of

00:04:31,800 --> 00:04:36,090
these projects I think on the slide we

00:04:34,200 --> 00:04:37,260
have a spring which is an application

00:04:36,090 --> 00:04:38,880
development technology we're going to

00:04:37,260 --> 00:04:41,460
talk about today but we also have

00:04:38,880 --> 00:04:42,990
infrastructure things like RabbitMQ and

00:04:41,460 --> 00:04:46,140
we sponsored reddit for the first five

00:04:42,990 --> 00:04:47,340
years of its life as well and we also

00:04:46,140 --> 00:04:49,350
have something called Cloud Foundry how

00:04:47,340 --> 00:04:53,460
many of you know Cloud Foundry so Cloud

00:04:49,350 --> 00:04:56,760
Foundry is the most successful sort of

00:04:53,460 --> 00:04:58,260
private data center private cloud option

00:04:56,760 --> 00:04:59,550
in the market today it is the thing that

00:04:58,260 --> 00:05:01,200
all of your businesses are using

00:04:59,550 --> 00:05:03,270
probably and if they aren't already they

00:05:01,200 --> 00:05:05,010
will be right it's a technology that was

00:05:03,270 --> 00:05:06,600
founded back in 2011 it's open source

00:05:05,010 --> 00:05:08,760
it's patchy to license managed by the

00:05:06,600 --> 00:05:10,320
Linux Foundation and it helps

00:05:08,760 --> 00:05:12,330
organizations large and small deliver

00:05:10,320 --> 00:05:14,730
applications and manage them in

00:05:12,330 --> 00:05:16,290
production it helps them move quickly

00:05:14,730 --> 00:05:18,030
from concept all the way to production

00:05:16,290 --> 00:05:21,300
and that's what we care about a pivotal

00:05:18,030 --> 00:05:23,430
we care about going to production we

00:05:21,300 --> 00:05:24,750
love production and we see that a lot of

00:05:23,430 --> 00:05:26,100
organizations are struggling with how to

00:05:24,750 --> 00:05:27,540
get there faster they know that they

00:05:26,100 --> 00:05:29,610
have to go faster but they don't know

00:05:27,540 --> 00:05:31,680
how they've got these large existing

00:05:29,610 --> 00:05:33,660
monolithic applications written in the

00:05:31,680 --> 00:05:36,090
yester in yesteryear at a time before

00:05:33,660 --> 00:05:38,370
the era of modern cloud economics were

00:05:36,090 --> 00:05:40,380
so obvious and so apparent to them and

00:05:38,370 --> 00:05:41,730
these applications well we're well

00:05:40,380 --> 00:05:44,400
designed in time for which they were

00:05:41,730 --> 00:05:47,040
conceived but now now they bit they

00:05:44,400 --> 00:05:48,750
present a bit of an obstacle these

00:05:47,040 --> 00:05:50,760
applications are typically large they're

00:05:48,750 --> 00:05:52,470
unbroken they have large amounts of

00:05:50,760 --> 00:05:55,170
people working on them they take a long

00:05:52,470 --> 00:05:57,840
time to see any changes reflected in the

00:05:55,170 --> 00:06:01,590
final production environment these

00:05:57,840 --> 00:06:02,970
monolithic applications are frustrating

00:06:01,590 --> 00:06:05,730
because it takes a lot of people to see

00:06:02,970 --> 00:06:08,340
any change at all and organizations know

00:06:05,730 --> 00:06:12,000
that workflow through a cycle there's a

00:06:08,340 --> 00:06:13,800
sort of a production line a pipeline

00:06:12,000 --> 00:06:16,500
from development to qnet some from

00:06:13,800 --> 00:06:18,390
product management to user experience to

00:06:16,500 --> 00:06:20,190
developers to administrators and often

00:06:18,390 --> 00:06:22,890
to production they see that works move

00:06:20,190 --> 00:06:25,170
slowly to that pipeline most

00:06:22,890 --> 00:06:26,460
organizations try to optimize parts of

00:06:25,170 --> 00:06:28,230
the pipeline but they fail to optimize

00:06:26,460 --> 00:06:30,030
the whole thing and so the result is the

00:06:28,230 --> 00:06:32,040
same thing they still see that it takes

00:06:30,030 --> 00:06:33,810
a long time to see any results even if

00:06:32,040 --> 00:06:35,070
you've got developers doing agile

00:06:33,810 --> 00:06:36,990
development you know doing test-driven

00:06:35,070 --> 00:06:39,510
Dell engine maybe pair programming and

00:06:36,990 --> 00:06:40,830
so on as we do at pivotal labs maybe

00:06:39,510 --> 00:06:43,440
you've got that but the rest of that or

00:06:40,830 --> 00:06:45,000
the pipeline if it's not so optimized if

00:06:43,440 --> 00:06:47,250
it's not advil if it's not optimized for

00:06:45,000 --> 00:06:49,440
fast feedback will slow you down and you

00:06:47,250 --> 00:06:51,270
won't get the benefits of it so what we

00:06:49,440 --> 00:06:52,650
see is that organizations struggle with

00:06:51,270 --> 00:06:54,210
this progression they struggle with

00:06:52,650 --> 00:06:56,729
taking their existing applications and

00:06:54,210 --> 00:06:59,580
changing more rapidly to meet market

00:06:56,729 --> 00:07:00,780
marketplace demands and a big part of

00:06:59,580 --> 00:07:02,940
that is because of the size of the

00:07:00,780 --> 00:07:05,310
application they know that these

00:07:02,940 --> 00:07:07,199
successful companies out there are all

00:07:05,310 --> 00:07:09,180
software companies that even if they've

00:07:07,199 --> 00:07:10,500
even if they're large they still deliver

00:07:09,180 --> 00:07:13,320
software as though they're small

00:07:10,500 --> 00:07:15,900
companies even the really big companies

00:07:13,320 --> 00:07:18,199
today still release software like small

00:07:15,900 --> 00:07:21,389
companies and that's the key we think

00:07:18,199 --> 00:07:23,880
how quickly can your team release

00:07:21,389 --> 00:07:25,350
software release interesting working

00:07:23,880 --> 00:07:28,310
software and so a lot of organizations

00:07:25,350 --> 00:07:30,780
turn to this micro services architecture

00:07:28,310 --> 00:07:33,860
this idea is very simple it's based on

00:07:30,780 --> 00:07:36,150
an insight that Mel Conway seized in the

00:07:33,860 --> 00:07:38,100
1970s it said that software is a mirror

00:07:36,150 --> 00:07:39,510
image of the organization that builds it

00:07:38,100 --> 00:07:40,860
and if you have a crappy organization

00:07:39,510 --> 00:07:43,199
then you'll have a necessarily crappy

00:07:40,860 --> 00:07:44,580
piece of software it's up to you to

00:07:43,199 --> 00:07:47,550
optimize your organization to better

00:07:44,580 --> 00:07:50,340
impact that software this is called the

00:07:47,550 --> 00:07:52,199
reverse Conway maneuver they've done

00:07:50,340 --> 00:07:53,760
plenty of studies to confirm this

00:07:52,199 --> 00:07:55,080
they've done plenty of examples where

00:07:53,760 --> 00:07:56,430
they looked at for example open source

00:07:55,080 --> 00:07:58,710
software versus proprietary software

00:07:56,430 --> 00:07:59,940
imagine you had for an instant the

00:07:58,710 --> 00:08:03,720
opportunity to look at the source code

00:07:59,940 --> 00:08:05,160
for Microsoft Office and then compare it

00:08:03,720 --> 00:08:07,020
to something of analogous form and

00:08:05,160 --> 00:08:08,760
function like Open Office

00:08:07,020 --> 00:08:10,919
it's just a hypothetical I've never seen

00:08:08,760 --> 00:08:13,110
thankfully the source code for Microsoft

00:08:10,919 --> 00:08:16,020
Office but imagine you had that

00:08:13,110 --> 00:08:19,229
opportunity you could look at the code

00:08:16,020 --> 00:08:22,880
stare at it in the abyss you open the

00:08:19,229 --> 00:08:26,910
codebase and it glows you resist the

00:08:22,880 --> 00:08:29,190
fervent urge to vomit you try not to

00:08:26,910 --> 00:08:31,940
open-source your lunch on the floor but

00:08:29,190 --> 00:08:34,110
it is a very overwhelming compulsion

00:08:31,940 --> 00:08:36,510
imagine you've managed to now get past

00:08:34,110 --> 00:08:38,640
that needs the vomit in your mouth by

00:08:36,510 --> 00:08:40,080
looking at the terrible code what do you

00:08:38,640 --> 00:08:41,760
imagine you would see what they realize

00:08:40,080 --> 00:08:44,159
in these studies that the software in

00:08:41,760 --> 00:08:45,810
the proprietary software as developed as

00:08:44,159 --> 00:08:47,220
developed by the same team in the same

00:08:45,810 --> 00:08:49,350
time zone the speaking the same language

00:08:47,220 --> 00:08:52,080
and the same office hours has far less

00:08:49,350 --> 00:08:53,760
modularity that's because it's so much

00:08:52,080 --> 00:08:55,440
easier the cost of communication is so

00:08:53,760 --> 00:08:57,839
much easier for these people in the same

00:08:55,440 --> 00:08:59,730
team for them to just suit turn their

00:08:57,839 --> 00:09:00,810
chair and say Jane I'm going to change

00:08:59,730 --> 00:09:03,240
this one thing what do you think about

00:09:00,810 --> 00:09:05,100
that can we you know have a discussion

00:09:03,240 --> 00:09:06,450
and make that work and it's cheap it

00:09:05,100 --> 00:09:07,860
costs nothing but if you're in

00:09:06,450 --> 00:09:09,150
open-source project some people

00:09:07,860 --> 00:09:10,470
contribute an evening some people in the

00:09:09,150 --> 00:09:12,240
morning some people at night some people

00:09:10,470 --> 00:09:14,610
in the weekend some people not at all

00:09:12,240 --> 00:09:16,440
for weeks at a time it's very hard to

00:09:14,610 --> 00:09:18,150
get everybody in the same room and the

00:09:16,440 --> 00:09:21,090
same phone call in the same email thread

00:09:18,150 --> 00:09:23,910
even this the cost of communication is

00:09:21,090 --> 00:09:25,410
expensive and so organizations realize

00:09:23,910 --> 00:09:27,000
that if you cut down that cost of

00:09:25,410 --> 00:09:28,890
synchronization in the organization you

00:09:27,000 --> 00:09:30,990
can go faster so they decompose their

00:09:28,890 --> 00:09:33,030
large applications into smaller micro

00:09:30,990 --> 00:09:34,950
services they looked at dr. Eric Evans

00:09:33,030 --> 00:09:37,050
Eric Evans wrote a great book called

00:09:34,950 --> 00:09:39,090
domain-driven designed in this book he

00:09:37,050 --> 00:09:41,190
talked about a bounded context it's a

00:09:39,090 --> 00:09:42,870
part of the domain the domain of your

00:09:41,190 --> 00:09:45,960
application that stands unto itself

00:09:42,870 --> 00:09:48,120
internally consistent it's reusable if

00:09:45,960 --> 00:09:50,220
you can identify bounded contexts in

00:09:48,120 --> 00:09:53,280
your application domain you have a

00:09:50,220 --> 00:09:54,840
logical place to divide it to cut it

00:09:53,280 --> 00:09:57,210
into smaller pieces to cut it into

00:09:54,840 --> 00:09:58,590
smaller micro services and when you move

00:09:57,210 --> 00:10:01,770
to this architecture you're going to

00:09:58,590 --> 00:10:06,300
face two really big pains I call them

00:10:01,770 --> 00:10:08,700
the hemorrhoids of microservices you

00:10:06,300 --> 00:10:12,210
know the hemorrhoid is my friends it's a

00:10:08,700 --> 00:10:13,830
real pain in the Adam the first

00:10:12,210 --> 00:10:15,000
hemorrhoid that you're going to face

00:10:13,830 --> 00:10:18,240
when you move to this architecture is

00:10:15,000 --> 00:10:19,860
how quickly from 0 to 60 can you build a

00:10:18,240 --> 00:10:21,600
production worthy service and handle all

00:10:19,860 --> 00:10:23,250
the non-functional requirements that are

00:10:21,600 --> 00:10:25,290
required to do so all of the things that

00:10:23,250 --> 00:10:27,600
we need to do we all understand that we

00:10:25,290 --> 00:10:29,310
need to do that and yet they add nothing

00:10:27,600 --> 00:10:31,500
to our bottom line they're not what

00:10:29,310 --> 00:10:33,170
Adrian Cockroft and Werner Vogel's from

00:10:31,500 --> 00:10:35,220
Amazon used to describe as a

00:10:33,170 --> 00:10:36,270
differentiated heavy lifting it's work

00:10:35,220 --> 00:10:38,580
that you have to do but that doesn't

00:10:36,270 --> 00:10:40,560
help you in the market things like load

00:10:38,580 --> 00:10:42,750
balancing and security and monitoring

00:10:40,560 --> 00:10:44,820
and observability and DNS all the stuff

00:10:42,750 --> 00:10:47,970
that you need to do but that is not in

00:10:44,820 --> 00:10:49,890
your mission statement right you're

00:10:47,970 --> 00:10:52,470
trying to deliver software for a

00:10:49,890 --> 00:10:55,050
vertical for a customer base not trying

00:10:52,470 --> 00:10:57,900
to solve the problems SSL and yet you

00:10:55,050 --> 00:10:59,460
have to do it of course most

00:10:57,900 --> 00:11:00,810
organizations and I'm not saying yours

00:10:59,460 --> 00:11:03,330
of course not yours but most

00:11:00,810 --> 00:11:05,760
organizations and again I really I know

00:11:03,330 --> 00:11:07,440
it's not yours not your organizations

00:11:05,760 --> 00:11:10,070
but most organizations that I've been to

00:11:07,440 --> 00:11:14,370
have a wiki page on their internal wiki

00:11:10,070 --> 00:11:16,050
with 500 easy steps to production that

00:11:14,370 --> 00:11:17,940
wiki page is the list of all the things

00:11:16,050 --> 00:11:20,190
you must do for every single new service

00:11:17,940 --> 00:11:21,900
in order for it to be production worthy

00:11:20,190 --> 00:11:24,630
and that ended that wiki pages the enemy

00:11:21,900 --> 00:11:27,060
of velocity the faster you can get

00:11:24,630 --> 00:11:29,340
through that list the better and so for

00:11:27,060 --> 00:11:31,110
this I tell people about I talk to

00:11:29,340 --> 00:11:32,160
people about Cloud Foundry because Cloud

00:11:31,110 --> 00:11:33,330
Foundry cares only about your

00:11:32,160 --> 00:11:34,800
applications it doesn't care about all

00:11:33,330 --> 00:11:37,170
the nonsense below it like containers

00:11:34,800 --> 00:11:38,850
and RAM and hard disks and Linux and

00:11:37,170 --> 00:11:40,380
strict installations and patches and all

00:11:38,850 --> 00:11:41,640
that it manages it all for you so you

00:11:40,380 --> 00:11:43,770
can focus on the only thing that matters

00:11:41,640 --> 00:11:45,300
the application and then I talk to them

00:11:43,770 --> 00:11:46,080
about spring boot because spring boot is

00:11:45,300 --> 00:11:48,630
purpose-built

00:11:46,080 --> 00:11:49,980
to surface and to integrate with things

00:11:48,630 --> 00:11:51,120
that we care about like observability

00:11:49,980 --> 00:11:53,330
and security and all this kind of stuff

00:11:51,120 --> 00:11:56,130
right log correlated logging and so on

00:11:53,330 --> 00:11:58,410
this second hemorrhoid that you're going

00:11:56,130 --> 00:12:00,450
to face is now that I've done this now

00:11:58,410 --> 00:12:01,680
that we built lots of small services

00:12:00,450 --> 00:12:03,000
deployed over the network

00:12:01,680 --> 00:12:04,740
talking to each other across networked

00:12:03,000 --> 00:12:06,840
partitions we have invited the

00:12:04,740 --> 00:12:09,870
complexity of building a distributed

00:12:06,840 --> 00:12:11,490
system into our lives if you have 10

00:12:09,870 --> 00:12:13,920
different REST API and you stand them up

00:12:11,490 --> 00:12:18,000
you've just made your pain 10 times more

00:12:13,920 --> 00:12:21,000
painful REST API is are prone to failure

00:12:18,000 --> 00:12:23,790
they run the risk of running afoul of

00:12:21,000 --> 00:12:24,990
the fallacies of network computing you

00:12:23,790 --> 00:12:26,220
can't pretend that it's just going to

00:12:24,990 --> 00:12:28,170
work if you have just one of each

00:12:26,220 --> 00:12:29,730
there's complexity involved in

00:12:28,170 --> 00:12:31,320
distribution and you need to address

00:12:29,730 --> 00:12:33,060
that as an architectural constraint

00:12:31,320 --> 00:12:34,830
concern and so that's what we're going

00:12:33,060 --> 00:12:36,630
to talk about today is that second

00:12:34,830 --> 00:12:38,070
hemroids we're going to see ever so

00:12:36,630 --> 00:12:40,470
briefly a little bit about spring cloud

00:12:38,070 --> 00:12:41,400
but I'm sorry spring boot but we're not

00:12:40,470 --> 00:12:42,900
going to spend too much time there

00:12:41,400 --> 00:12:44,130
because I really want to talk about what

00:12:42,900 --> 00:12:46,440
happens when you build a distributed

00:12:44,130 --> 00:12:48,270
system so with that I'm going to close

00:12:46,440 --> 00:12:49,170
this out those are my slides I hope you

00:12:48,270 --> 00:12:51,260
like them what do you think the best

00:12:49,170 --> 00:12:54,720
slides you've seen this hour at least

00:12:51,260 --> 00:12:56,730
thank you thank you thank you I worked

00:12:54,720 --> 00:12:57,450
hard on those so what we're going to do

00:12:56,730 --> 00:12:59,670
is we're going to build a new

00:12:57,450 --> 00:13:01,530
application here I'm going to go to my

00:12:59,670 --> 00:13:03,450
other shell here I'm going to go to

00:13:01,530 --> 00:13:05,339
start Springs i/o this is my second

00:13:03,450 --> 00:13:06,930
favorite place on the Internet my first

00:13:05,339 --> 00:13:07,530
favorite place on the Internet is

00:13:06,930 --> 00:13:10,830
production

00:13:07,530 --> 00:13:13,140
I love production you should love

00:13:10,830 --> 00:13:14,970
production bring your kids bring the

00:13:13,140 --> 00:13:16,260
family it's the happiest place on earth

00:13:14,970 --> 00:13:18,210
it's better than Disneyland

00:13:16,260 --> 00:13:19,770
I love production so should you but if

00:13:18,210 --> 00:13:21,089
you're not already in production then

00:13:19,770 --> 00:13:24,660
you can begin your journey here it's

00:13:21,089 --> 00:13:25,470
start that spring that i/o so what we're

00:13:24,660 --> 00:13:27,360
going to do is we're gonna build a new

00:13:25,470 --> 00:13:28,230
application it's a job application I'm

00:13:27,360 --> 00:13:29,970
going to build an application using

00:13:28,230 --> 00:13:32,490
spring boot I'm going to call this the

00:13:29,970 --> 00:13:33,880
reservation - service this is just a

00:13:32,490 --> 00:13:35,650
service that's going to manage

00:13:33,880 --> 00:13:36,970
of type reservation and to do so I'll

00:13:35,650 --> 00:13:40,270
use spring support for building web

00:13:36,970 --> 00:13:43,660
application I'll use h2 now h2 is an

00:13:40,270 --> 00:13:45,430
in-memory embedded sequel database so

00:13:43,660 --> 00:13:46,750
it's an in-memory embedded sequel

00:13:45,430 --> 00:13:49,540
database that is going to lose all of

00:13:46,750 --> 00:13:51,310
its State on every single restart it

00:13:49,540 --> 00:13:53,290
loses the data all the time very similar

00:13:51,310 --> 00:13:55,150
to MongoDB in this respect all the data

00:13:53,290 --> 00:13:57,220
all the time for no reason at all just

00:13:55,150 --> 00:13:58,990
randomly losing data okay so there is

00:13:57,220 --> 00:14:01,090
that we're going to use JP the Java

00:13:58,990 --> 00:14:03,580
persistence API because I make terrible

00:14:01,090 --> 00:14:05,200
life decisions so JP a we're going to

00:14:03,580 --> 00:14:06,850
use actuator for observability and

00:14:05,200 --> 00:14:08,050
monitoring concerns I'm going to use the

00:14:06,850 --> 00:14:09,550
config client for centralized

00:14:08,050 --> 00:14:11,530
configuration Eureka for service

00:14:09,550 --> 00:14:13,320
registrations discovery zip confer

00:14:11,530 --> 00:14:16,030
correlated and distributed tracing and

00:14:13,320 --> 00:14:17,950
maybe that's it oh and rest repository

00:14:16,030 --> 00:14:19,870
support right now I could elect to

00:14:17,950 --> 00:14:21,700
switch to the full version and I'm given

00:14:19,870 --> 00:14:24,610
a veritable ocean of check boxes things

00:14:21,700 --> 00:14:26,680
that I could add to my application if I

00:14:24,610 --> 00:14:30,250
had more time maybe I want to add vault

00:14:26,680 --> 00:14:32,140
you know secure keys management right or

00:14:30,250 --> 00:14:33,810
maybe I want to add any of these other

00:14:32,140 --> 00:14:35,980
nice things just you know can

00:14:33,810 --> 00:14:37,240
consumer-driven contracts and so on

00:14:35,980 --> 00:14:39,970
right I can do all of that but for our

00:14:37,240 --> 00:14:41,890
purposes here now I think we're fine now

00:14:39,970 --> 00:14:43,900
one question that people ask is what

00:14:41,890 --> 00:14:45,460
language did we use well use what if you

00:14:43,900 --> 00:14:47,320
want any language on the JVM that

00:14:45,460 --> 00:14:51,220
supports annotations and objects works

00:14:47,320 --> 00:14:52,750
just fine but here my friends here here

00:14:51,220 --> 00:14:54,550
we have what are what I like to think of

00:14:52,750 --> 00:14:57,820
as non choices these are choices that

00:14:54,550 --> 00:15:00,820
you you could make but that you should

00:14:57,820 --> 00:15:04,420
not these are non choices and that's not

00:15:00,820 --> 00:15:06,130
just Indian bread my friends these are

00:15:04,420 --> 00:15:08,760
choices in the same way that stripping

00:15:06,130 --> 00:15:15,100
naked running in traffic is a choice you

00:15:08,760 --> 00:15:16,900
you could but but but don't so for

00:15:15,100 --> 00:15:21,940
example what version of the JVM would

00:15:16,900 --> 00:15:24,370
you like to use in 2017 as both 1.6 and

00:15:21,940 --> 00:15:27,010
1.7 our end of life's no longer

00:15:24,370 --> 00:15:30,820
supported not available deprecated past

00:15:27,010 --> 00:15:33,040
their prime stinky it would be insane to

00:15:30,820 --> 00:15:35,710
start a new project on either one today

00:15:33,040 --> 00:15:37,570
it would be irresponsible and worthy of

00:15:35,710 --> 00:15:39,430
punishment to continue to use either one

00:15:37,570 --> 00:15:40,930
today in a production environment you

00:15:39,430 --> 00:15:44,860
are risking your organization's ability

00:15:40,930 --> 00:15:46,900
to function safely reconsider here we

00:15:44,860 --> 00:15:47,810
have the choice of packaging and people

00:15:46,900 --> 00:15:49,310
get very confused

00:15:47,810 --> 00:15:51,709
that's all do my best to explain how

00:15:49,310 --> 00:15:54,050
when where to choose which if by some

00:15:51,709 --> 00:15:56,689
terrible terrible tragedy of physics and

00:15:54,050 --> 00:15:59,360
space-time some freak accident of

00:15:56,689 --> 00:16:03,199
physics you find yourself stuck in the

00:15:59,360 --> 00:16:07,360
distant distant distant past far far

00:16:03,199 --> 00:16:14,540
beyond modern help then choose dot waar

00:16:07,360 --> 00:16:18,050
but if you're here in 2017 with me then

00:16:14,540 --> 00:16:20,779
choose dot jar this is a big part of my

00:16:18,050 --> 00:16:26,269
overarching guiding personal philosophy

00:16:20,779 --> 00:16:28,879
of make jar not waar it's ok that's a

00:16:26,269 --> 00:16:30,259
make love not war joke never mind it's

00:16:28,879 --> 00:16:33,399
fine it'll come give it give it time

00:16:30,259 --> 00:16:35,269
friends anyway so I'm going to generate

00:16:33,399 --> 00:16:37,220
and I'm going to go to my command line

00:16:35,269 --> 00:16:41,269
here assuming I've got my commandant

00:16:37,220 --> 00:16:43,490
running ok CD downloads there we are

00:16:41,269 --> 00:16:44,809
unzip reservation service CD reservation

00:16:43,490 --> 00:16:47,990
service I'm going to open this up in my

00:16:44,809 --> 00:16:54,259
IDE assuming I point it to the right

00:16:47,990 --> 00:16:55,910
file here we are take some tea wow

00:16:54,259 --> 00:16:56,930
that's good stuff so what I'm gonna do

00:16:55,910 --> 00:16:58,250
is I'm going to build an application I'm

00:16:56,930 --> 00:17:00,259
going to use my ID and it doesn't matter

00:16:58,250 --> 00:17:02,059
what ID we use you can use an

00:17:00,259 --> 00:17:03,529
intelligent you can use eclipse you can

00:17:02,059 --> 00:17:05,899
use NetBeans you can use whatever you

00:17:03,529 --> 00:17:09,610
want anybody here using Emacs are you

00:17:05,899 --> 00:17:12,350
here sir Emacs guy where's the Emacs guy

00:17:09,610 --> 00:17:14,270
he's usually at every talk I do in every

00:17:12,350 --> 00:17:16,939
continent in every country and every

00:17:14,270 --> 00:17:19,579
city it's the same object identity same

00:17:16,939 --> 00:17:23,539
human being I say who use Emacs he says

00:17:19,579 --> 00:17:26,470
I do and then he leaves presumably to go

00:17:23,539 --> 00:17:29,870
to the next conference to troll me there

00:17:26,470 --> 00:17:32,360
whatever anyway I've got now a simple

00:17:29,870 --> 00:17:35,750
build I've got it oops I've got a simple

00:17:32,360 --> 00:17:37,010
build and in my build I've got some

00:17:35,750 --> 00:17:38,750
dependencies these are dependencies that

00:17:37,010 --> 00:17:40,850
I've specified it starts out spring at

00:17:38,750 --> 00:17:43,720
i/o for now I'm going to comment out the

00:17:40,850 --> 00:17:45,679
Zipkin bits I'm going to comment out the

00:17:43,720 --> 00:17:47,120
actual I think that'll do for now

00:17:45,679 --> 00:17:49,130
I can I guess I don't need the config

00:17:47,120 --> 00:17:51,620
server and Eureka so we'll leave all

00:17:49,130 --> 00:17:52,429
that there and what I'm going to do is

00:17:51,620 --> 00:17:55,490
I'm going to build a simple application

00:17:52,429 --> 00:17:57,140
oh I want the compiled time code compile

00:17:55,490 --> 00:17:59,210
time annotation processor called Lombok

00:17:57,140 --> 00:18:00,350
I forgot about Lombok so let's add this

00:17:59,210 --> 00:18:01,159
you could have added it it starts out

00:18:00,350 --> 00:18:02,599
spring today oh but

00:18:01,159 --> 00:18:03,379
I'm going to add that there so what I

00:18:02,599 --> 00:18:05,809
wanna do is on to build an application

00:18:03,379 --> 00:18:06,440
that manages entities in the database

00:18:05,809 --> 00:18:08,809
it's a record

00:18:06,440 --> 00:18:10,190
it's an ORM right I'm using JPA here and

00:18:08,809 --> 00:18:12,919
I'm going to manage entities of type

00:18:10,190 --> 00:18:15,470
reservation whose primary key is of type

00:18:12,919 --> 00:18:18,049
long which has a single column called

00:18:15,470 --> 00:18:19,489
reservation underscore name like so and

00:18:18,049 --> 00:18:21,440
I'm going to signal that this is a

00:18:19,489 --> 00:18:23,239
surrogate auto incrementing primary key

00:18:21,440 --> 00:18:24,739
value using the Jaypee annotations and

00:18:23,239 --> 00:18:26,479
the right thing to do here at this point

00:18:24,739 --> 00:18:27,859
would be to create getters setters

00:18:26,479 --> 00:18:29,359
except you know accessories mutaters

00:18:27,859 --> 00:18:30,799
constructors all that nonsense but I

00:18:29,359 --> 00:18:32,749
don't want to I'm lazy so I'm going to

00:18:30,799 --> 00:18:34,519
use Lombok to do that for me I'll say

00:18:32,749 --> 00:18:36,049
create an all argument constructor and

00:18:34,519 --> 00:18:37,580
no argument constructor and so on and

00:18:36,049 --> 00:18:40,149
then I have an entity that will work for

00:18:37,580 --> 00:18:43,070
me now here I can see reservation our

00:18:40,149 --> 00:18:44,539
reservation dot can get reservation

00:18:43,070 --> 00:18:46,909
names that reservation name etc that all

00:18:44,539 --> 00:18:48,559
comes for free with Lombok right I also

00:18:46,909 --> 00:18:50,239
want a default constructor so I'm going

00:18:48,559 --> 00:18:52,340
to say alt insert give me a constructor

00:18:50,239 --> 00:18:54,019
with the name and now I want to be able

00:18:52,340 --> 00:18:55,639
to read and write and persist instances

00:18:54,019 --> 00:18:57,409
of this record in the database so I'm

00:18:55,639 --> 00:18:59,239
going to use a pattern called a

00:18:57,409 --> 00:19:01,599
repository pattern this is just an

00:18:59,239 --> 00:19:03,769
object that will save read update delete

00:19:01,599 --> 00:19:05,659
instances of the object now I don't have

00:19:03,769 --> 00:19:07,789
to implement this interface spring data

00:19:05,659 --> 00:19:09,229
will do that for me it has already

00:19:07,789 --> 00:19:12,349
implied in this interface definition

00:19:09,229 --> 00:19:15,320
find all save flush to the batch find by

00:19:12,349 --> 00:19:17,029
ID etcetera etc etc I can even do custom

00:19:15,320 --> 00:19:20,989
finder methods I can say a collection of

00:19:17,029 --> 00:19:24,349
reservation find by reservation name and

00:19:20,989 --> 00:19:26,450
I can say I want to find all the records

00:19:24,349 --> 00:19:28,460
with that reservation name right that

00:19:26,450 --> 00:19:31,580
would turn into a query a dynamic query

00:19:28,460 --> 00:19:33,320
at runtime like this right so sort of

00:19:31,580 --> 00:19:36,109
like this I may type an error here but

00:19:33,320 --> 00:19:37,970
roughly the same right okay so there's

00:19:36,109 --> 00:19:40,129
my repository and I'm going to use that

00:19:37,970 --> 00:19:41,210
to save some sample records into the

00:19:40,129 --> 00:19:43,249
database I'm going to create an object

00:19:41,210 --> 00:19:44,840
in spring boot that gets called when the

00:19:43,249 --> 00:19:46,489
application starts up so this is a a

00:19:44,840 --> 00:19:48,229
command line runner when spring starts

00:19:46,489 --> 00:19:49,909
it's going to call this run method

00:19:48,229 --> 00:19:52,159
passing in public static void main

00:19:49,909 --> 00:19:54,979
string args here which means I can do

00:19:52,159 --> 00:19:56,539
initialization any kind of sort of eat a

00:19:54,979 --> 00:19:58,639
lor batch or anything that has to happen

00:19:56,539 --> 00:20:01,190
after the application is started but

00:19:58,639 --> 00:20:02,899
before requests start coming in I can do

00:20:01,190 --> 00:20:04,879
here I'm telling spring I have a

00:20:02,899 --> 00:20:06,470
constructor provide that being as a

00:20:04,879 --> 00:20:07,820
constructor argument a collaborating

00:20:06,470 --> 00:20:09,200
object and I'm going to write some

00:20:07,820 --> 00:20:11,239
records to the database my name is Josh

00:20:09,200 --> 00:20:12,460
it's so lovely to meet you Sebastian

00:20:11,239 --> 00:20:15,049
okay

00:20:12,460 --> 00:20:16,850
very good nice to meet you what

00:20:15,049 --> 00:20:21,860
- buddy what's your name how do you

00:20:16,850 --> 00:20:25,340
spell it my friend ma LTE like that very

00:20:21,860 --> 00:20:30,320
good nice to meet you miss what's your

00:20:25,340 --> 00:20:33,230
name how do you spell it like so very

00:20:30,320 --> 00:20:34,369
good nice to meet you ah ah what about

00:20:33,230 --> 00:20:39,249
you there sir what's your name

00:20:34,369 --> 00:20:39,249
ma X very good nice to meet you

00:20:43,840 --> 00:20:47,629
well okay just I just you can't leave me

00:20:46,700 --> 00:20:49,749
hanging here I need at least three more

00:20:47,629 --> 00:20:55,720
it's nice man what's your name my friend

00:20:49,749 --> 00:20:57,940
ma mi CH AE L very good nice to meet you

00:20:55,720 --> 00:21:02,529
what about you buddy what's your name

00:20:57,940 --> 00:21:07,669
CHR is I'm sorry like that like this

00:21:02,529 --> 00:21:09,049
very good nice to meet you and just one

00:21:07,669 --> 00:21:13,519
more what about you and my friend in the

00:21:09,049 --> 00:21:14,989
very back there a nd Y very good nice to

00:21:13,519 --> 00:21:16,789
meet you and so for each name in that

00:21:14,989 --> 00:21:19,009
list I'm going to write the records to

00:21:16,789 --> 00:21:20,210
the database saving like that and I'll

00:21:19,009 --> 00:21:22,549
confirm that everything is working as

00:21:20,210 --> 00:21:26,499
expected by visiting every response that

00:21:22,549 --> 00:21:28,639
comes back system.out.print line and

00:21:26,499 --> 00:21:29,749
there we go if we won this code we

00:21:28,639 --> 00:21:31,730
should see on the command line we should

00:21:29,749 --> 00:21:32,960
see reflected in the output that these

00:21:31,730 --> 00:21:34,340
names have been written to our little

00:21:32,960 --> 00:21:36,499
database which we've got which is in

00:21:34,340 --> 00:21:38,450
memory and everything it should be as we

00:21:36,499 --> 00:21:40,730
expect so there we are there's our happy

00:21:38,450 --> 00:21:42,499
few names now I want to build on the API

00:21:40,730 --> 00:21:44,989
and of course I could take the long way

00:21:42,499 --> 00:21:47,389
home I could builder a spring MVC rest

00:21:44,989 --> 00:21:49,850
controller like this reservation rest

00:21:47,389 --> 00:21:54,350
controller and then inject the

00:21:49,850 --> 00:21:55,580
repository right and create a

00:21:54,350 --> 00:21:58,239
constructor and there just create an

00:21:55,580 --> 00:22:01,570
endpoint here get mapping for slash

00:21:58,239 --> 00:22:05,480
reservations public collection of

00:22:01,570 --> 00:22:06,919
reservations and and so on and that

00:22:05,480 --> 00:22:09,259
would certainly work I think that would

00:22:06,919 --> 00:22:10,669
be fine you know but I believe that we

00:22:09,259 --> 00:22:11,749
can do better that's a lot of wasted

00:22:10,669 --> 00:22:13,220
code don't you think look at all that

00:22:11,749 --> 00:22:15,379
extra lines of code that I had to write

00:22:13,220 --> 00:22:17,899
so instead of doing that I'm going to

00:22:15,379 --> 00:22:21,080
make the repository create an API for me

00:22:17,899 --> 00:22:23,889
so I'll say repository rest resource and

00:22:21,080 --> 00:22:28,100
I'm using spring data rest here right so

00:22:23,889 --> 00:22:29,809
here we are path by name okay and I'm

00:22:28,100 --> 00:22:32,359
going to annotate this with a parameter

00:22:29,809 --> 00:22:34,100
now before I do that let me just confirm

00:22:32,359 --> 00:22:36,230
that everything worked as we expected so

00:22:34,100 --> 00:22:37,999
80 84 such reservations there's our old

00:22:36,230 --> 00:22:40,159
API the one that I didn't like that one

00:22:37,999 --> 00:22:41,929
that we spent entirely too long writing

00:22:40,159 --> 00:22:47,269
so let's go ahead and use spring data

00:22:41,929 --> 00:22:48,619
rest and restart like so okay I'll take

00:22:47,269 --> 00:22:50,649
some tea in the meantime I think I've

00:22:48,619 --> 00:22:54,379
earned it

00:22:50,649 --> 00:22:56,690
okay so there's a new API and the API

00:22:54,379 --> 00:22:58,279
has in its payload links these are

00:22:56,690 --> 00:23:00,200
hypermedia it's an implementation of a

00:22:58,279 --> 00:23:02,389
design pattern called ha gos or hyper

00:23:00,200 --> 00:23:04,039
media as the engine of application state

00:23:02,389 --> 00:23:05,600
it's the idea that every rest resource

00:23:04,039 --> 00:23:07,700
has enough information in the response

00:23:05,600 --> 00:23:09,259
for the client to further manipulate

00:23:07,700 --> 00:23:11,419
that API basically it promotes

00:23:09,259 --> 00:23:13,009
self-describing services which when you

00:23:11,419 --> 00:23:14,990
move to a distributed systems world is

00:23:13,009 --> 00:23:17,330
important because very few developers

00:23:14,990 --> 00:23:20,299
and I mean very few write documentation

00:23:17,330 --> 00:23:21,830
and none absolutely zero read it so you

00:23:20,299 --> 00:23:23,470
need to make it as easy and humane as

00:23:21,830 --> 00:23:25,190
possible to talk to these services now

00:23:23,470 --> 00:23:27,230
am I done

00:23:25,190 --> 00:23:28,639
well probably not right I can read and

00:23:27,230 --> 00:23:29,960
write and put and post and get and

00:23:28,639 --> 00:23:33,230
delete and all that stuff with this API

00:23:29,960 --> 00:23:34,759
I can I can see information about the

00:23:33,230 --> 00:23:36,470
pages in the metadata I have a search

00:23:34,759 --> 00:23:37,820
endpoint here I've got all those cool

00:23:36,470 --> 00:23:39,740
stuff but am I done can I go to

00:23:37,820 --> 00:23:42,049
production yet probably not all right

00:23:39,740 --> 00:23:44,480
I want to surface information about the

00:23:42,049 --> 00:23:47,090
application to make it visible and so

00:23:44,480 --> 00:23:49,190
what I have on the classpath is a module

00:23:47,090 --> 00:23:51,730
called the actuator this actuator

00:23:49,190 --> 00:23:53,599
library provides support for

00:23:51,730 --> 00:23:55,519
observability but in order for it to

00:23:53,599 --> 00:23:56,779
work we have to disable security in this

00:23:55,519 --> 00:23:58,429
case or we can integrate it with an

00:23:56,779 --> 00:24:00,200
identity provider which we might do

00:23:58,429 --> 00:24:02,809
later on but for our purposes here let's

00:24:00,200 --> 00:24:05,809
just disable that security and go now to

00:24:02,809 --> 00:24:08,509
this endpoint and reservations one and

00:24:05,809 --> 00:24:10,190
two and then then we can go to metrics

00:24:08,509 --> 00:24:11,149
and when I go to metrics it shows me an

00:24:10,190 --> 00:24:13,070
enumeration of the things like the

00:24:11,149 --> 00:24:14,629
memory the heap the non heap the code

00:24:13,070 --> 00:24:16,159
classes the counters that have been made

00:24:14,629 --> 00:24:18,470
the requests that have been made into

00:24:16,159 --> 00:24:20,840
application I've made two requests to

00:24:18,470 --> 00:24:22,789
reservations for such 1 or 2 or 3 and it

00:24:20,840 --> 00:24:24,950
had a status code of 200 etc these

00:24:22,789 --> 00:24:27,409
metrics show me information about the

00:24:24,950 --> 00:24:28,940
application there's also a and V which

00:24:27,409 --> 00:24:30,080
shows me the environment the system

00:24:28,940 --> 00:24:31,159
properties as well as the environment

00:24:30,080 --> 00:24:34,909
variables I had this kind of information

00:24:31,159 --> 00:24:36,440
here I've got mappings which shows me

00:24:34,909 --> 00:24:38,539
all of the HTTP endpoints that Spring

00:24:36,440 --> 00:24:40,429
has is aware of and the predicate are

00:24:38,539 --> 00:24:41,420
required to address them I've got trace

00:24:40,429 --> 00:24:43,640
which shows me by the

00:24:41,420 --> 00:24:45,290
last 100 requests that have been made

00:24:43,640 --> 00:24:47,720
into the application the time stamps the

00:24:45,290 --> 00:24:48,320
time taken the headers the paths all

00:24:47,720 --> 00:24:51,860
that stuff

00:24:48,320 --> 00:24:53,630
I've got info now this is empty it's up

00:24:51,860 --> 00:24:55,790
to you to customize this to put things

00:24:53,630 --> 00:24:58,040
like the get commit ID or the service ID

00:24:55,790 --> 00:24:59,840
or the build date up here so you can

00:24:58,040 --> 00:25:01,790
identify what service is running when

00:24:59,840 --> 00:25:03,650
you move to continuous delivery every

00:25:01,790 --> 00:25:05,690
single get push could result in a push

00:25:03,650 --> 00:25:07,580
to production hopefully right and so

00:25:05,690 --> 00:25:10,010
this is very important it helps you

00:25:07,580 --> 00:25:11,450
understand what get push triggered the

00:25:10,010 --> 00:25:13,520
bill but I'm now looking at in my

00:25:11,450 --> 00:25:15,470
production services you've also got

00:25:13,520 --> 00:25:17,150
health and health shows you a

00:25:15,470 --> 00:25:18,620
enumeration of all the things in my

00:25:17,150 --> 00:25:21,050
application that may fail all the

00:25:18,620 --> 00:25:23,660
dependencies that may disappear on me so

00:25:21,050 --> 00:25:25,970
I have a JSON output but this also gives

00:25:23,660 --> 00:25:28,370
me a status code it's HTTP 200 if

00:25:25,970 --> 00:25:30,650
everything's ok HTTP 500 if there's some

00:25:28,370 --> 00:25:32,390
sort of error right so you can use this

00:25:30,650 --> 00:25:34,370
for load bouncing to evict nodes from

00:25:32,390 --> 00:25:36,950
the load balancing rotation now all of

00:25:34,370 --> 00:25:38,330
this is not a new idea right Google

00:25:36,950 --> 00:25:40,490
talks about this they talk about this in

00:25:38,330 --> 00:25:42,230
their Google board monitoring paper they

00:25:40,490 --> 00:25:43,670
say no matter what the nature of the

00:25:42,230 --> 00:25:45,590
service if it's big data machine

00:25:43,670 --> 00:25:47,660
learning or artificial intelligence or a

00:25:45,590 --> 00:25:49,820
web service or whatever they have a

00:25:47,660 --> 00:25:52,070
standardized set of endpoints that they

00:25:49,820 --> 00:25:54,260
use that they then feed to centralized

00:25:52,070 --> 00:25:56,330
monitoring infrastructure this helps

00:25:54,260 --> 00:25:58,490
draw the ever-important single pane of

00:25:56,330 --> 00:26:00,140
glass that dashboard that we need in

00:25:58,490 --> 00:26:02,150
order to understand at a glance what is

00:26:00,140 --> 00:26:03,680
happening now a cloud native system a

00:26:02,150 --> 00:26:05,810
cloud native application is four things

00:26:03,680 --> 00:26:08,180
it is agile that is to say it's easy to

00:26:05,810 --> 00:26:09,980
change it is observable that is to say I

00:26:08,180 --> 00:26:12,320
can monitor it from the outputs of the

00:26:09,980 --> 00:26:14,060
system and it is robust in the face of

00:26:12,320 --> 00:26:18,320
service outages and topology changes and

00:26:14,060 --> 00:26:20,630
finally and finally it elastic it takes

00:26:18,320 --> 00:26:22,430
advantage of the benefits of the cloud

00:26:20,630 --> 00:26:25,280
the dynamic dynamic nature of the cloud

00:26:22,430 --> 00:26:26,780
so I have now a observable application I

00:26:25,280 --> 00:26:28,160
want to change it right I can imagine

00:26:26,780 --> 00:26:30,140
wanting to change it I showed you I can

00:26:28,160 --> 00:26:31,970
use applications up properties to change

00:26:30,140 --> 00:26:33,260
aspects of it I could change the port

00:26:31,970 --> 00:26:35,900
for example I could say server the port

00:26:33,260 --> 00:26:38,000
equals 80 10 but this is in the code

00:26:35,900 --> 00:26:39,830
itself I don't want to recompile my jar

00:26:38,000 --> 00:26:41,330
just to see reflected in the running

00:26:39,830 --> 00:26:43,510
application a change in behavior so

00:26:41,330 --> 00:26:45,890
instead I can do a very you know

00:26:43,510 --> 00:26:48,140
non-controversial idea I can use 12

00:26:45,890 --> 00:26:50,990
factor style configuration you see if I

00:26:48,140 --> 00:26:54,930
go back here maven - the Skip tests

00:26:50,990 --> 00:26:56,700
equals - clean install yellow right

00:26:54,930 --> 00:26:58,470
if I go back here and compile the code I

00:26:56,700 --> 00:27:01,560
can see in the target directory here

00:26:58,470 --> 00:27:04,200
I've got a fat jar right or an American

00:27:01,560 --> 00:27:06,090
jar right now this jar has 30 megabytes

00:27:04,200 --> 00:27:08,760
it has everything I need to run this

00:27:06,090 --> 00:27:11,610
code it's self-contained so Java - jar

00:27:08,760 --> 00:27:16,500
reservation service jar right now that

00:27:11,610 --> 00:27:18,420
jar that jar is self-contained I can add

00:27:16,500 --> 00:27:20,820
this as an attachment to an email and I

00:27:18,420 --> 00:27:23,040
can send it to my dear dear Grandma and

00:27:20,820 --> 00:27:24,180
Grandpa there are super super smart

00:27:23,040 --> 00:27:26,880
people but they're not really great with

00:27:24,180 --> 00:27:28,530
computers they could run this so if your

00:27:26,880 --> 00:27:30,360
operations teams have trouble with this

00:27:28,530 --> 00:27:31,710
if they insist on using WebSphere they

00:27:30,360 --> 00:27:32,850
don't know how to run it tell them to

00:27:31,710 --> 00:27:36,090
Gaul call my grandma

00:27:32,850 --> 00:27:38,700
she's very nice she has cookie she'll

00:27:36,090 --> 00:27:41,850
help them get to production faster now

00:27:38,700 --> 00:27:43,410
that said are we done is this production

00:27:41,850 --> 00:27:45,930
just starting and stopping a jar

00:27:43,410 --> 00:27:47,400
probably not right let's be honest so oh

00:27:45,930 --> 00:27:48,480
and I also want to build to change

00:27:47,400 --> 00:27:50,490
things as I promote it from one

00:27:48,480 --> 00:27:52,800
environment to another dev QA of staging

00:27:50,490 --> 00:27:55,920
etc so as I say I want to change for

00:27:52,800 --> 00:27:57,660
example the port I can say here D that

00:27:55,920 --> 00:27:59,970
server the port equals eighty eleven or

00:27:57,660 --> 00:28:01,770
eighty eleven net wala and then I'm

00:27:59,970 --> 00:28:03,420
overriding it this is twelve factor

00:28:01,770 --> 00:28:05,820
style configuration named of course for

00:28:03,420 --> 00:28:08,820
the twelve factor manifesto from Heroku

00:28:05,820 --> 00:28:10,290
from 2009 or ten right so not not a new

00:28:08,820 --> 00:28:12,000
idea and this is certainly good enough

00:28:10,290 --> 00:28:14,460
it's a good start but we can do better

00:28:12,000 --> 00:28:16,080
how do i centralize my configuration if

00:28:14,460 --> 00:28:18,030
I've got multiple services how do i

00:28:16,080 --> 00:28:20,040
audited configuration see what changed

00:28:18,030 --> 00:28:21,870
and when and then reload it based on

00:28:20,040 --> 00:28:23,550
that if I need to our roll it back how

00:28:21,870 --> 00:28:25,530
do I reload it live while the service is

00:28:23,550 --> 00:28:27,030
running right I don't do secure

00:28:25,530 --> 00:28:28,350
information passwords credentials that

00:28:27,030 --> 00:28:30,420
kind of stuff I don't want that on my

00:28:28,350 --> 00:28:32,550
file system laying around at rest

00:28:30,420 --> 00:28:33,690
unencrypted so for these reasons I need

00:28:32,550 --> 00:28:36,150
something a little bit better so I'm

00:28:33,690 --> 00:28:38,040
going to use the spring cloud config

00:28:36,150 --> 00:28:40,980
server the config service is just a data

00:28:38,040 --> 00:28:42,390
it's an API that I can use to manage a

00:28:40,980 --> 00:28:44,250
directory full of configuration and that

00:28:42,390 --> 00:28:46,350
configuration can be based on any kind

00:28:44,250 --> 00:28:48,180
of version control system you want I'm

00:28:46,350 --> 00:28:50,880
going to be using get here but you can

00:28:48,180 --> 00:28:53,190
use git or git git is also a very good

00:28:50,880 --> 00:28:56,970
choice if you want to get that's fine

00:28:53,190 --> 00:29:00,660
there we are cloning cloning and I'll go

00:28:56,970 --> 00:29:07,460
back here download unzip config server

00:29:00,660 --> 00:29:08,930
CD config service ok idea palm that XML

00:29:07,460 --> 00:29:11,000
now what I've done is I've opened this a

00:29:08,930 --> 00:29:13,430
project and I've cloned the directory

00:29:11,000 --> 00:29:14,900
into the cantata into the file system so

00:29:13,430 --> 00:29:17,180
I'm going to point my new config server

00:29:14,900 --> 00:29:20,390
to that directory on my desktop home

00:29:17,180 --> 00:29:22,960
desktop config and I'll go I'll also say

00:29:20,390 --> 00:29:25,190
that I want this to run in port 8888 and

00:29:22,960 --> 00:29:26,240
then I'll say that this is a config

00:29:25,190 --> 00:29:28,610
service okay

00:29:26,240 --> 00:29:30,740
so I'll start that and what's going to

00:29:28,610 --> 00:29:32,660
happen is other micro services will

00:29:30,740 --> 00:29:34,010
identify themselves they'll connect to

00:29:32,660 --> 00:29:35,750
the config server in the config server

00:29:34,010 --> 00:29:36,830
we'll give them keys and values that

00:29:35,750 --> 00:29:38,630
they can use to configure their

00:29:36,830 --> 00:29:40,310
application this keeps the configuration

00:29:38,630 --> 00:29:42,140
outside of the property file so I can go

00:29:40,310 --> 00:29:45,260
here to oops

00:29:42,140 --> 00:29:47,290
localhost 8888 reservation service

00:29:45,260 --> 00:29:49,520
default all right so here's the

00:29:47,290 --> 00:29:51,590
configuration for a micro service called

00:29:49,520 --> 00:29:54,140
the reservation service I see there's

00:29:51,590 --> 00:29:56,120
port 8000 I see a message called hello

00:29:54,140 --> 00:29:57,770
world and there's also default values

00:29:56,120 --> 00:29:59,210
that all micro services will get this is

00:29:57,770 --> 00:30:02,300
available to everybody it's an

00:29:59,210 --> 00:30:04,810
application that properties right now if

00:30:02,300 --> 00:30:07,340
I go back to my reservation service and

00:30:04,810 --> 00:30:10,370
bring in the spring cloud config client

00:30:07,340 --> 00:30:12,440
dependency here like so I can now change

00:30:10,370 --> 00:30:14,930
my configuration I can say that the

00:30:12,440 --> 00:30:17,450
application is called reservation -

00:30:14,930 --> 00:30:19,070
service and if I do that my application

00:30:17,450 --> 00:30:21,140
will draw its configuration from the

00:30:19,070 --> 00:30:22,670
config server it will need to know where

00:30:21,140 --> 00:30:24,920
to look for it of course I could tell it

00:30:22,670 --> 00:30:27,440
like this but this is the default value

00:30:24,920 --> 00:30:29,450
the 8888 that's what I was using before

00:30:27,440 --> 00:30:30,860
that's the default value so I'm not

00:30:29,450 --> 00:30:33,170
going to bother specifying it but I want

00:30:30,860 --> 00:30:34,430
you to know about it now imagine I want

00:30:33,170 --> 00:30:37,610
to take advantage of that message

00:30:34,430 --> 00:30:40,880
message rest controller write rest

00:30:37,610 --> 00:30:43,760
controller private final string value

00:30:40,880 --> 00:30:45,170
and enter and all I'm going to do

00:30:43,760 --> 00:30:47,600
something tell spring to inject this

00:30:45,170 --> 00:30:49,150
value in the configs in the constructor

00:30:47,600 --> 00:30:51,560
for the end point here I'm going to

00:30:49,150 --> 00:30:54,200
expose that value it just paired it

00:30:51,560 --> 00:30:59,000
outright as a message like this string

00:30:54,200 --> 00:31:00,380
read there we are okay so all I'm doing

00:30:59,000 --> 00:31:01,700
is I'm creating an endpoint and it's

00:31:00,380 --> 00:31:03,410
going to pair it the value now I can

00:31:01,700 --> 00:31:05,480
also manage and wanting to change this

00:31:03,410 --> 00:31:07,130
value while this service is running so

00:31:05,480 --> 00:31:08,960
I'll say at refresh scope and I'll

00:31:07,130 --> 00:31:11,140
restart the build and I'll take some

00:31:08,960 --> 00:31:11,140
water

00:31:13,419 --> 00:31:18,890
goodbye good so that's up and running

00:31:16,880 --> 00:31:22,010
let's see mm-hmm let's see if that all

00:31:18,890 --> 00:31:23,720
works huh so 8888 sorry 8,000 right

00:31:22,010 --> 00:31:26,120
that's our new service there we are

00:31:23,720 --> 00:31:27,559
message there we are good not great but

00:31:26,120 --> 00:31:28,640
good we can do better

00:31:27,559 --> 00:31:29,840
we're not in the world we're in

00:31:28,640 --> 00:31:31,309
someplace way better than the world

00:31:29,840 --> 00:31:33,320
we're in beautiful Berlin aren't we so

00:31:31,309 --> 00:31:34,880
I'm going to go to config I'm going to

00:31:33,320 --> 00:31:36,529
open up this property file using Emacs

00:31:34,880 --> 00:31:39,169
because I'm not a savage I'm not a

00:31:36,529 --> 00:31:42,019
savage so I'll use that hello Berlin

00:31:39,169 --> 00:31:44,630
right extra exclamation marks so as to

00:31:42,019 --> 00:31:48,230
reinforce my credentials on a reddit get

00:31:44,630 --> 00:31:50,779
commit - a - M Yolo okay now if I go to

00:31:48,230 --> 00:31:53,000
the config server you can see it says

00:31:50,779 --> 00:31:54,649
hello Berlin immediately but my micro

00:31:53,000 --> 00:31:56,480
service does not know not yet I need to

00:31:54,649 --> 00:31:58,639
tell it to refresh its configuration and

00:31:56,480 --> 00:32:00,649
I can do this using another one of those

00:31:58,639 --> 00:32:03,110
actuator endpoints those observable

00:32:00,649 --> 00:32:04,880
endpoints this one is called refresh I'm

00:32:03,110 --> 00:32:07,010
going to say 8004 slash refresh I'm

00:32:04,880 --> 00:32:08,179
going to send an empty H to be post and

00:32:07,010 --> 00:32:10,549
what's going to happen is that it's

00:32:08,179 --> 00:32:12,919
going to recreate that one beam the

00:32:10,549 --> 00:32:14,480
Refresh scope being in situ redraw the

00:32:12,919 --> 00:32:16,970
configuration from the config server now

00:32:14,480 --> 00:32:18,260
I play a little game with a config

00:32:16,970 --> 00:32:19,850
server to see if I can get there faster

00:32:18,260 --> 00:32:22,159
than they can get there but I never win

00:32:19,850 --> 00:32:30,519
I never never went and I'm kind of fast

00:32:22,159 --> 00:32:33,500
I go fast enough but it's fast okay so

00:32:30,519 --> 00:32:35,269
hmm what's going to happen is I'm gonna

00:32:33,500 --> 00:32:39,440
hit enter and then alt-tab and then ctrl

00:32:35,269 --> 00:32:42,980
R and see if I can be it but yeah yeah

00:32:39,440 --> 00:32:44,480
bugger anyway it beat me again so

00:32:42,980 --> 00:32:46,580
there's the configuration value updated

00:32:44,480 --> 00:32:48,769
live up now I've got this ability to

00:32:46,580 --> 00:32:50,299
support feature flags I can decouple the

00:32:48,769 --> 00:32:51,799
deployment of Saucer from the release of

00:32:50,299 --> 00:32:53,450
software I can do AV testing I can do

00:32:51,799 --> 00:32:55,370
all sorts of interesting things plus I

00:32:53,450 --> 00:32:56,690
can do surgical debugging I can say for

00:32:55,370 --> 00:32:58,299
these nodes or for this node I want to

00:32:56,690 --> 00:32:59,929
write it to a particular you know

00:32:58,299 --> 00:33:01,850
service or whatever I want to do

00:32:59,929 --> 00:33:03,380
isolation whenever I can I don't want to

00:33:01,850 --> 00:33:05,269
do I can do there I have the config

00:33:03,380 --> 00:33:06,889
server I can lock down every link in the

00:33:05,269 --> 00:33:08,659
communication chain for the config

00:33:06,889 --> 00:33:10,760
server to the git repository and for the

00:33:08,659 --> 00:33:12,529
config to the config server I can do

00:33:10,760 --> 00:33:14,179
symmetric encryption and decryption of

00:33:12,529 --> 00:33:15,769
values in the property file that's all

00:33:14,179 --> 00:33:16,970
very well and good now the next thing

00:33:15,769 --> 00:33:19,580
that I care about in this in the

00:33:16,970 --> 00:33:21,559
distributed system is making it easy for

00:33:19,580 --> 00:33:24,830
one service to find and talk to another

00:33:21,559 --> 00:33:25,880
now there's a lot of reasons why I want

00:33:24,830 --> 00:33:27,740
to do this

00:33:25,880 --> 00:33:29,510
but in a dynamic system things come and

00:33:27,740 --> 00:33:30,920
go all the time right so we want to make

00:33:29,510 --> 00:33:34,100
sure it's easy for these things to find

00:33:30,920 --> 00:33:36,380
other services we could use DNS DNS is

00:33:34,100 --> 00:33:38,240
certainly a okay choice but it has some

00:33:36,380 --> 00:33:38,990
limitations in a very dynamic cloud

00:33:38,240 --> 00:33:41,450
environment

00:33:38,990 --> 00:33:43,220
the first major limitation is that it's

00:33:41,450 --> 00:33:44,630
not a very smart protocol it tells you

00:33:43,220 --> 00:33:46,730
where something lives it doesn't tell

00:33:44,630 --> 00:33:48,440
you if that service is alive right

00:33:46,730 --> 00:33:49,880
that's very important it's like knowing

00:33:48,440 --> 00:33:52,370
where my address is but not knowing if

00:33:49,880 --> 00:33:54,080
I'm home at the moment what's the point

00:33:52,370 --> 00:33:56,810
of coming to my apartment or my home if

00:33:54,080 --> 00:33:58,310
I'm out at the market or something so

00:33:56,810 --> 00:33:59,570
that's the first problem the second

00:33:58,310 --> 00:34:02,300
thing is that a lot of the languages a

00:33:59,570 --> 00:34:04,910
lot of platforms like Java that use DNS

00:34:02,300 --> 00:34:07,070
have very sensible but old defaults

00:34:04,910 --> 00:34:09,470
remember DNS and sorry rather Java is

00:34:07,070 --> 00:34:11,870
now 21 years old it's old enough to

00:34:09,470 --> 00:34:13,040
drink alcohol in the United States it

00:34:11,870 --> 00:34:14,929
has some very sensible default

00:34:13,040 --> 00:34:16,669
assumptions for 21 years ago but today

00:34:14,929 --> 00:34:20,030
not so much one of the things that it

00:34:16,669 --> 00:34:21,950
does poorly is that it it caches DNS so

00:34:20,030 --> 00:34:23,750
if I go to a DNS load answer it's going

00:34:21,950 --> 00:34:25,280
to get the first IP address and then

00:34:23,750 --> 00:34:27,710
keep hitting that service it's not going

00:34:25,280 --> 00:34:29,990
to rotate across the different instances

00:34:27,710 --> 00:34:31,610
in the pool you can get around that you

00:34:29,990 --> 00:34:34,460
can configure things but the default

00:34:31,610 --> 00:34:35,870
behavior you have to undo right and if

00:34:34,460 --> 00:34:37,040
you do call that service you could call

00:34:35,870 --> 00:34:38,600
that service with that IP address and

00:34:37,040 --> 00:34:39,740
it's no longer there what else do you

00:34:38,600 --> 00:34:42,320
have to undo you have to remember to set

00:34:39,740 --> 00:34:44,899
a timeout because the JDK has a bismil

00:34:42,320 --> 00:34:47,240
terribly poor timeout it's going to

00:34:44,899 --> 00:34:48,110
block otherwise forever so what I want

00:34:47,240 --> 00:34:49,700
to do is I want to make it easy for

00:34:48,110 --> 00:34:51,379
services to find each other I want to be

00:34:49,700 --> 00:34:52,940
able to control my load balancing

00:34:51,379 --> 00:34:55,340
approach right I don't want to just do

00:34:52,940 --> 00:34:57,470
an f5 and a checkbox I want more dynamic

00:34:55,340 --> 00:34:58,610
options here and I also want to get

00:34:57,470 --> 00:35:00,050
around some of the limitations of

00:34:58,610 --> 00:35:01,850
Zeena's for example the fact that it

00:35:00,050 --> 00:35:03,830
doesn't know if the service is alive so

00:35:01,850 --> 00:35:05,360
I can do that with a service registry

00:35:03,830 --> 00:35:07,040
there's a lot of good options out there

00:35:05,360 --> 00:35:08,990
for service registries I happen to be a

00:35:07,040 --> 00:35:10,880
big fan of Netflix Eureka but you can

00:35:08,990 --> 00:35:13,610
use Apache zookeeper hash score console

00:35:10,880 --> 00:35:15,110
at CD Cod finder itself or just just

00:35:13,610 --> 00:35:16,610
fine right and so what I'm going to do

00:35:15,110 --> 00:35:18,050
is I'm going to use the Netflix you reek

00:35:16,610 --> 00:35:21,650
of service registry I'll create one here

00:35:18,050 --> 00:35:24,830
eureka service and i'm going to use the

00:35:21,650 --> 00:35:27,170
config client to configure it spring

00:35:24,830 --> 00:35:29,390
cloud supports a abstraction that you

00:35:27,170 --> 00:35:31,010
can use to talk to any service register

00:35:29,390 --> 00:35:32,750
you want so if you choose this one today

00:35:31,010 --> 00:35:34,700
and you decide to switch to another one

00:35:32,750 --> 00:35:36,590
tomorrow just change the jar the

00:35:34,700 --> 00:35:38,240
client-side interface is the same right

00:35:36,590 --> 00:35:39,780
so it makes it easy to get all these

00:35:38,240 --> 00:35:42,120
benefits integrated throughout the host

00:35:39,780 --> 00:35:44,100
using the same abstraction and approach

00:35:42,120 --> 00:35:46,230
so I'm going to say at enable Eureka

00:35:44,100 --> 00:35:47,880
server I'm going to go to my config and

00:35:46,230 --> 00:35:50,040
give it a name spring application name

00:35:47,880 --> 00:35:51,660
equals you each item service and this is

00:35:50,040 --> 00:35:54,210
going to spin up and it's going to start

00:35:51,660 --> 00:35:55,680
on port 87-61 and what I need to do now

00:35:54,210 --> 00:35:58,770
is I need to tell my reservation service

00:35:55,680 --> 00:36:00,960
to participate to say I'm here to

00:35:58,770 --> 00:36:02,640
advertise its availability so I'm going

00:36:00,960 --> 00:36:04,020
to add the discovery client abstraction

00:36:02,640 --> 00:36:06,420
to the class path that's this one here

00:36:04,020 --> 00:36:07,500
spring cloud starter Eureka and then I'm

00:36:06,420 --> 00:36:10,560
going to go up here I'm going to say at

00:36:07,500 --> 00:36:16,230
enable discovery client right so if I go

00:36:10,560 --> 00:36:17,730
to my browser localhost 87-61 whoops

00:36:16,230 --> 00:36:19,230
you'll see that right now there's no

00:36:17,730 --> 00:36:21,720
instances yet but as soon as we were

00:36:19,230 --> 00:36:23,610
restart there it is right that's

00:36:21,720 --> 00:36:26,340
available so and now advertising its

00:36:23,610 --> 00:36:29,910
presence also worth noticing amazing

00:36:26,340 --> 00:36:31,290
ASCII amazing mouse over that took a

00:36:29,910 --> 00:36:32,340
long time but we have doctors on the

00:36:31,290 --> 00:36:34,020
team that worked on this so I'm very

00:36:32,340 --> 00:36:35,520
happy about that anyway we have a single

00:36:34,020 --> 00:36:37,230
service it's available now it's

00:36:35,520 --> 00:36:38,400
advertising itself and we can build a

00:36:37,230 --> 00:36:40,080
client and that's what we're going to do

00:36:38,400 --> 00:36:41,550
we're going to build a client that will

00:36:40,080 --> 00:36:44,490
talk to this service but this is not

00:36:41,550 --> 00:36:48,390
just any client this is an edge service

00:36:44,490 --> 00:36:49,590
right so the edge service is going to

00:36:48,390 --> 00:36:53,220
need certain things we're going to use

00:36:49,590 --> 00:36:55,290
Eureka when use the config server we're

00:36:53,220 --> 00:36:56,730
going to use Lombok again when use the

00:36:55,290 --> 00:36:58,650
rest repository support we're going to

00:36:56,730 --> 00:37:00,900
use hystrix the circuit breaker going to

00:36:58,650 --> 00:37:02,190
Zul the micro proxy Zipkin for

00:37:00,900 --> 00:37:04,890
distributed tracing and correlated

00:37:02,190 --> 00:37:06,390
logging when you use a maybe 100 off

00:37:04,890 --> 00:37:09,750
maybe want ratamacue for stream

00:37:06,390 --> 00:37:11,640
processing we want to same for declare

00:37:09,750 --> 00:37:13,650
the rest client to an actuator of course

00:37:11,640 --> 00:37:15,090
for management endpoints and I think

00:37:13,650 --> 00:37:16,200
that's for enough for now actually

00:37:15,090 --> 00:37:18,750
looking at the time let's get rid of

00:37:16,200 --> 00:37:21,110
OAuth ok so keep that now what I'm going

00:37:18,750 --> 00:37:24,480
to do is I'm going to open up this

00:37:21,110 --> 00:37:25,860
reservation client and what we're trying

00:37:24,480 --> 00:37:28,650
to do here is to build a client that

00:37:25,860 --> 00:37:30,780
will talk to a to the outside world

00:37:28,650 --> 00:37:32,850
it'll be the first port of call it'll be

00:37:30,780 --> 00:37:34,980
the first thing that requests from the

00:37:32,850 --> 00:37:36,060
outside world see and the reason is

00:37:34,980 --> 00:37:37,530
because we don't want to change every

00:37:36,060 --> 00:37:38,310
single micro service every time we add a

00:37:37,530 --> 00:37:41,130
new client

00:37:38,310 --> 00:37:43,020
imagine html5 html5 browsers today are

00:37:41,130 --> 00:37:43,650
really really powerful they can do

00:37:43,020 --> 00:37:46,560
almost anything

00:37:43,650 --> 00:37:48,210
have you seen jeaious Linux J's Linux

00:37:46,560 --> 00:37:49,590
Google days Linux later it's a Linux

00:37:48,210 --> 00:37:51,630
distribution that runs entirely in

00:37:49,590 --> 00:37:53,520
client-side JavaScript it boots an iso

00:37:51,630 --> 00:37:53,850
in the browser the point is if somebody

00:37:53,520 --> 00:37:55,140
says

00:37:53,850 --> 00:37:57,120
you we need to build a native desktop

00:37:55,140 --> 00:37:59,790
application you have my permission to

00:37:57,120 --> 00:38:01,560
call them an unkind name it's ridiculous

00:37:59,790 --> 00:38:03,960
at this point there's no need to but

00:38:01,560 --> 00:38:05,730
that said the browser limits what you

00:38:03,960 --> 00:38:07,590
can do because it's in a sandbox it can

00:38:05,730 --> 00:38:10,530
only make secure requests so single

00:38:07,590 --> 00:38:12,030
origin sort of origin hosts you can get

00:38:10,530 --> 00:38:13,680
around this by adding an access control

00:38:12,030 --> 00:38:15,300
header to every single service that you

00:38:13,680 --> 00:38:16,980
call from the browser but this means

00:38:15,300 --> 00:38:19,050
that you have to redeploy every single

00:38:16,980 --> 00:38:21,390
service just to allow the html5 browser

00:38:19,050 --> 00:38:23,340
to talk to it that's a non-starter I

00:38:21,390 --> 00:38:24,750
don't want to end up asking all the

00:38:23,340 --> 00:38:26,700
other teams in organization to deploy

00:38:24,750 --> 00:38:28,760
their services just because I have added

00:38:26,700 --> 00:38:30,870
a new browser client to the system so

00:38:28,760 --> 00:38:34,290
what will do is will centralize he's

00:38:30,870 --> 00:38:37,320
concerned here at the edge right I'm

00:38:34,290 --> 00:38:39,180
going to say reservation - client and

00:38:37,320 --> 00:38:41,850
I'm going to participate in service

00:38:39,180 --> 00:38:43,680
registration and discovery now one way

00:38:41,850 --> 00:38:46,020
to get around that that browser problem

00:38:43,680 --> 00:38:48,180
the sandbox problem is to use a proxy a

00:38:46,020 --> 00:38:49,710
micro proxy so I'll use at enable Zul

00:38:48,180 --> 00:38:52,100
proxy and I'll start this up now Sewell

00:38:49,710 --> 00:38:55,250
as you know is probably know is is the

00:38:52,100 --> 00:38:57,450
ghostbusters guardian of the underworld

00:38:55,250 --> 00:38:58,560
this is the monster that guarded the

00:38:57,450 --> 00:38:59,880
gate to the underworld in the

00:38:58,560 --> 00:39:03,650
Ghostbusters movie the first one from

00:38:59,880 --> 00:39:06,300
from the 80s dual is from Netflix

00:39:03,650 --> 00:39:08,370
they're a movie company it's a movie to

00:39:06,300 --> 00:39:10,890
proxy nevermind it's fine give it some

00:39:08,370 --> 00:39:11,970
time so we have now started this up and

00:39:10,890 --> 00:39:14,220
what this is going to do is it's going

00:39:11,970 --> 00:39:15,390
to work with my registry it's going to

00:39:14,220 --> 00:39:16,860
work with the registry because it knows

00:39:15,390 --> 00:39:18,720
about the the service registry because

00:39:16,860 --> 00:39:20,700
it has the abstraction right here right

00:39:18,720 --> 00:39:22,950
it's going to work with the registry and

00:39:20,700 --> 00:39:26,700
it's going to serve all of the

00:39:22,950 --> 00:39:28,380
reservations from port 8000 forward

00:39:26,700 --> 00:39:30,570
slash reservations on the edge service

00:39:28,380 --> 00:39:31,860
at 9999 reservation - service

00:39:30,570 --> 00:39:34,170
reservation so there's two things

00:39:31,860 --> 00:39:36,690
happening here first of all the proxy is

00:39:34,170 --> 00:39:38,790
using the context ID and the browser

00:39:36,690 --> 00:39:40,860
path to figure out which service to call

00:39:38,790 --> 00:39:43,170
but which one is it calling right now I

00:39:40,860 --> 00:39:46,260
only have one so yeah it's choosing that

00:39:43,170 --> 00:39:46,980
one but what if I had two or ten or a

00:39:46,260 --> 00:39:50,400
thousand

00:39:46,980 --> 00:39:51,780
how would it pick right it's not doing

00:39:50,400 --> 00:39:54,510
there's no because there's no load

00:39:51,780 --> 00:39:55,950
balancer here right so something has to

00:39:54,510 --> 00:39:58,170
make the decision about which node to

00:39:55,950 --> 00:40:00,420
call that's something called Netflix

00:39:58,170 --> 00:40:02,790
ribbon Netflix ribbon is a client-side

00:40:00,420 --> 00:40:04,170
load balancer it was created by Netflix

00:40:02,790 --> 00:40:06,210
it's a technology that they have and

00:40:04,170 --> 00:40:07,680
remember they already had elastic you

00:40:06,210 --> 00:40:09,180
know load balancers from AWS they are

00:40:07,680 --> 00:40:10,410
knew about that they still created it

00:40:09,180 --> 00:40:12,030
because what they wanted to do is to

00:40:10,410 --> 00:40:14,040
control the load-balancing to have

00:40:12,030 --> 00:40:16,050
programmatic access to the load bouncing

00:40:14,040 --> 00:40:18,300
decisions and so the default behavior is

00:40:16,050 --> 00:40:19,470
round-robin so that's fine or LRU that

00:40:18,300 --> 00:40:21,390
kind of thing you know you can do

00:40:19,470 --> 00:40:23,069
session affinity you can even do more

00:40:21,390 --> 00:40:24,750
complicated and more nuanced things you

00:40:23,069 --> 00:40:26,490
can do data center where load balancing

00:40:24,750 --> 00:40:28,470
you can do rack aware lowdown thing you

00:40:26,490 --> 00:40:30,210
could do data locality data sharding you

00:40:28,470 --> 00:40:32,099
can do you know here's an OAuth token

00:40:30,210 --> 00:40:33,660
and the token belongs to Josh and he's

00:40:32,099 --> 00:40:35,160
watching a video on this particular node

00:40:33,660 --> 00:40:36,930
so route the request to that node

00:40:35,160 --> 00:40:39,390
whatever strategy you want you can write

00:40:36,930 --> 00:40:41,220
it you can write a strategy for it unit

00:40:39,390 --> 00:40:42,930
test it version control it and then plug

00:40:41,220 --> 00:40:44,130
it in spring cloud will use it by

00:40:42,930 --> 00:40:45,960
default it's using ran Robin load

00:40:44,130 --> 00:40:47,730
bouncing the other thing is that these

00:40:45,960 --> 00:40:49,200
URLs are correct see this is the edge

00:40:47,730 --> 00:40:52,770
service that's the origin that's the

00:40:49,200 --> 00:40:54,839
edge origin at origin edge origin edge

00:40:52,770 --> 00:40:56,609
right it's changing the URL by sending

00:40:54,839 --> 00:40:58,680
an origin header in the request with the

00:40:56,609 --> 00:41:00,720
proxy so the the actual service is

00:40:58,680 --> 00:41:02,760
rewriting its JSON the browser or the

00:41:00,720 --> 00:41:04,589
html5 device or the iPhone or the

00:41:02,760 --> 00:41:06,300
Android device they don't know that that

00:41:04,589 --> 00:41:08,069
JSON came from another service on

00:41:06,300 --> 00:41:10,050
another machine they think it came from

00:41:08,069 --> 00:41:13,349
the node that they contacted is this

00:41:10,050 --> 00:41:14,910
enough maybe if I have a homogeneous set

00:41:13,349 --> 00:41:16,619
of services and they're all HTTP maybe

00:41:14,910 --> 00:41:18,480
that's enough but sometimes I want to

00:41:16,619 --> 00:41:20,910
adapt the data from my downstream

00:41:18,480 --> 00:41:23,040
services into a single unified view I

00:41:20,910 --> 00:41:24,390
want to have a synthetic view of maybe

00:41:23,040 --> 00:41:25,710
service a and service B and I want to

00:41:24,390 --> 00:41:28,490
create a new service called service C

00:41:25,710 --> 00:41:31,049
maybe I need to do payload or protocol

00:41:28,490 --> 00:41:32,369
translation or transformation in this

00:41:31,049 --> 00:41:34,200
case it's not enough just to send the

00:41:32,369 --> 00:41:36,180
data back and forth without changing and

00:41:34,200 --> 00:41:38,190
I want to transform I want to create a

00:41:36,180 --> 00:41:40,680
new view of the data this is called an

00:41:38,190 --> 00:41:42,059
API adapter it's something that is an

00:41:40,680 --> 00:41:44,099
endpoint that is serves only a

00:41:42,059 --> 00:41:47,819
particular client right so let's create

00:41:44,099 --> 00:41:49,890
a simple API adapter that adapts my

00:41:47,819 --> 00:41:51,809
downstream reservation service and just

00:41:49,890 --> 00:41:53,849
returns a collection of string names

00:41:51,809 --> 00:41:55,260
right so you remember all of our names

00:41:53,849 --> 00:41:56,609
those names

00:41:55,260 --> 00:41:58,349
we want to keep but we don't want the

00:41:56,609 --> 00:42:00,900
rest of the payload we don't want the

00:41:58,349 --> 00:42:02,670
envelope resource envelope objects right

00:42:00,900 --> 00:42:04,770
so we're going to call this a names

00:42:02,670 --> 00:42:07,280
endpoint I'm going to say at risk

00:42:04,770 --> 00:42:08,790
controller I'm going to map this to

00:42:07,280 --> 00:42:11,099
reservation so it's going to be

00:42:08,790 --> 00:42:13,079
localhost 9999 forward slash

00:42:11,099 --> 00:42:15,000
reservations four slash names okay

00:42:13,079 --> 00:42:18,390
now I could use the Spring Framework

00:42:15,000 --> 00:42:21,000
rest template here we are right I could

00:42:18,390 --> 00:42:21,490
do that that's the HTTP client in spring

00:42:21,000 --> 00:42:22,869
and that would

00:42:21,490 --> 00:42:24,820
work but it doesn't know about our

00:42:22,869 --> 00:42:27,010
service registry right so I need to make

00:42:24,820 --> 00:42:31,150
it aware I need to create a beam of that

00:42:27,010 --> 00:42:32,410
type like so this is an object I'm

00:42:31,150 --> 00:42:34,360
telling spring to create I'm telling it

00:42:32,410 --> 00:42:37,030
to create and a load balancing aware

00:42:34,360 --> 00:42:38,890
rest template so now in my rest code I

00:42:37,030 --> 00:42:42,600
can actually say you know rest template

00:42:38,890 --> 00:42:46,600
exchange HTTP reservation - service

00:42:42,600 --> 00:42:49,750
right I'm not using DNS this is the

00:42:46,600 --> 00:42:51,430
service ID that's not going to a DNS

00:42:49,750 --> 00:42:53,170
server that goes to Eureka it goes to

00:42:51,430 --> 00:42:54,460
ribbon so those are all plugged in for

00:42:53,170 --> 00:42:55,900
me it's going to get pre processed and

00:42:54,460 --> 00:42:57,040
then all that load balancing is done on

00:42:55,900 --> 00:42:59,530
the client right before the request is

00:42:57,040 --> 00:43:01,450
made that would work I guess but this is

00:42:59,530 --> 00:43:03,070
very low level this is low level HTTP

00:43:01,450 --> 00:43:04,330
you know packets and payloads and

00:43:03,070 --> 00:43:05,980
headers and all this stuff I want to

00:43:04,330 --> 00:43:07,960
move up a little bit I want to have my

00:43:05,980 --> 00:43:09,640
own client a declarative client that I

00:43:07,960 --> 00:43:11,890
can use and I don't want to have too

00:43:09,640 --> 00:43:13,270
much business logic you know duplicated

00:43:11,890 --> 00:43:14,890
and every single time that somebody

00:43:13,270 --> 00:43:17,650
calls my service I want to have that in

00:43:14,890 --> 00:43:19,300
one place right I want to be as simple

00:43:17,650 --> 00:43:21,850
to understand as possible so I'm going

00:43:19,300 --> 00:43:25,480
to create a reservation client I'm going

00:43:21,850 --> 00:43:27,340
to use a technology called fain fain is

00:43:25,480 --> 00:43:29,740
also from Netflix we have this on the

00:43:27,340 --> 00:43:32,740
classpath here I insane there is fain

00:43:29,740 --> 00:43:36,700
fain in English means to pretend or to

00:43:32,740 --> 00:43:40,180
act as - to act as so if you are in the

00:43:36,700 --> 00:43:41,140
forest and you see an animal laying down

00:43:40,180 --> 00:43:43,720
with its head

00:43:41,140 --> 00:43:46,060
you know cocked back like this and its

00:43:43,720 --> 00:43:47,500
tongue hanging out and it's poor little

00:43:46,060 --> 00:43:49,450
heart is beating really fast

00:43:47,500 --> 00:43:51,430
it's scared it doesn't want you to

00:43:49,450 --> 00:43:53,380
bother it it's scared so it's pretending

00:43:51,430 --> 00:43:56,770
to be dead it's not actually dead it's

00:43:53,380 --> 00:43:58,840
feigning death in the same way that

00:43:56,770 --> 00:44:00,460
WebSphere is not useful it actually just

00:43:58,840 --> 00:44:02,320
pretends it's feigning utility right

00:44:00,460 --> 00:44:04,420
it's it wants you to leave it alone like

00:44:02,320 --> 00:44:05,200
the animal in the forest so what we're

00:44:04,420 --> 00:44:07,720
going to do is I'm going to create a

00:44:05,200 --> 00:44:10,450
declarative client here we're going to

00:44:07,720 --> 00:44:12,310
use the spring hypermedia

00:44:10,450 --> 00:44:18,160
support which I need to bring in so

00:44:12,310 --> 00:44:21,580
spring boot starter data wrist okay

00:44:18,160 --> 00:44:23,890
there's this and I'm going to say give

00:44:21,580 --> 00:44:25,800
me a collection of hypermedia envelope

00:44:23,890 --> 00:44:28,210
objects right these are the envelope

00:44:25,800 --> 00:44:29,560
paper the envelope thing that has the

00:44:28,210 --> 00:44:31,720
links and the payload from our previous

00:44:29,560 --> 00:44:33,640
Jason I'm going to create a client

00:44:31,720 --> 00:44:34,900
endpoint I'm going to map it using the

00:44:33,640 --> 00:44:36,940
server side spring anything

00:44:34,900 --> 00:44:38,440
rapping annotations so here it's an

00:44:36,940 --> 00:44:39,789
object I don't have to implement it

00:44:38,440 --> 00:44:41,380
spring will implement it for me and I

00:44:39,789 --> 00:44:42,910
can just call the read method it's going

00:44:41,380 --> 00:44:44,619
to call the registry it'll get all the

00:44:42,910 --> 00:44:46,210
service instances it'll load balance

00:44:44,619 --> 00:44:48,069
across the instances and then they'll

00:44:46,210 --> 00:44:49,750
return the JSON from calling and it

00:44:48,069 --> 00:44:51,309
should be get a call on that end point

00:44:49,750 --> 00:44:52,660
the one thing it doesn't have is the

00:44:51,309 --> 00:44:54,760
client-side representation of that

00:44:52,660 --> 00:44:55,480
entity remember on the on the service

00:44:54,760 --> 00:44:57,640
implementation

00:44:55,480 --> 00:44:59,589
it's a JPA entity and i don't want to

00:44:57,640 --> 00:45:01,450
copy and paste that because I don't want

00:44:59,589 --> 00:45:03,520
JPA in my client-side class path right

00:45:01,450 --> 00:45:06,339
so I'm going to use Lombok here again

00:45:03,520 --> 00:45:08,829
create a little getter a dpo that I can

00:45:06,339 --> 00:45:11,319
use the transfer objects now let's try

00:45:08,829 --> 00:45:18,279
this let's use our our entity here then

00:45:11,319 --> 00:45:21,970
final reservation client okay now there

00:45:18,279 --> 00:45:25,710
we are okay so there we are there's our

00:45:21,970 --> 00:45:29,410
our endpoint and I'm going to return

00:45:25,710 --> 00:45:31,150
client dot read dot get content I'm

00:45:29,410 --> 00:45:32,619
going to I'm going to just transform it

00:45:31,150 --> 00:45:34,480
I'm going to map every single record

00:45:32,619 --> 00:45:36,609
that comes back and turn it into a

00:45:34,480 --> 00:45:38,650
collection of string names right I'm not

00:45:36,609 --> 00:45:44,369
going to bother keeping all of the JSON

00:45:38,650 --> 00:45:44,369
so if we now run this code you'll see

00:45:48,000 --> 00:45:57,309
okay localhost reservation names come on

00:45:56,170 --> 00:45:59,589
computer there we are there's our names

00:45:57,309 --> 00:46:00,910
huh so that works it's okay it's going

00:45:59,589 --> 00:46:03,160
to do the right thing if there are one

00:46:00,910 --> 00:46:04,809
or more instances of that service but

00:46:03,160 --> 00:46:06,250
what if there are zero instances of that

00:46:04,809 --> 00:46:08,680
service we're going to try and load

00:46:06,250 --> 00:46:10,779
balance across zero instances that's I'm

00:46:08,680 --> 00:46:12,490
very similar to dividing by zero we all

00:46:10,779 --> 00:46:16,079
know what happens if you divide by zero

00:46:12,490 --> 00:46:18,460
alright what is zero divided by zero

00:46:16,079 --> 00:46:20,289
imagine that you have zero cookies and

00:46:18,460 --> 00:46:22,809
you split them evenly among zero friends

00:46:20,289 --> 00:46:25,599
how many cookies does each person get

00:46:22,809 --> 00:46:26,920
see it doesn't make sense and Cookie

00:46:25,599 --> 00:46:29,289
Monster is said that there are no

00:46:26,920 --> 00:46:33,250
cookies and you are said that he has no

00:46:29,289 --> 00:46:34,809
friends you can't divide by zero it's a

00:46:33,250 --> 00:46:36,250
bad idea you'll make Cookie Monster sad

00:46:34,809 --> 00:46:37,839
so we need to prepare for the

00:46:36,250 --> 00:46:39,309
eventualities that this will fail and it

00:46:37,839 --> 00:46:41,410
will high-performing organizations

00:46:39,309 --> 00:46:42,549
understand that fact they know that

00:46:41,410 --> 00:46:44,970
things are going to fail and they

00:46:42,549 --> 00:46:48,820
prepare accordingly so I have a

00:46:44,970 --> 00:46:50,860
dependency here it's causing

00:46:48,820 --> 00:46:55,410
I'll put in a console I'm going to

00:46:50,860 --> 00:46:57,400
disable it for now goodbye for now okay

00:46:55,410 --> 00:46:58,960
and so what they do is they degrade

00:46:57,400 --> 00:47:00,790
gracefully whenever they can right

00:46:58,960 --> 00:47:04,120
Google does this Netflix does this they

00:47:00,790 --> 00:47:05,140
build fail failure into the system to

00:47:04,120 --> 00:47:06,790
fail gracefully so I'm going to use a

00:47:05,140 --> 00:47:08,290
circuit breaker to achieve that effect

00:47:06,790 --> 00:47:10,090
I'm gonna use a circuit breaker I'm

00:47:08,290 --> 00:47:13,390
going to say whenever somebody calls

00:47:10,090 --> 00:47:15,040
this names method I want to have a

00:47:13,390 --> 00:47:17,230
fallback method that will get called if

00:47:15,040 --> 00:47:18,580
something goes wrong high-performing

00:47:17,230 --> 00:47:22,420
websites do this kind of thing all the

00:47:18,580 --> 00:47:23,500
time they'll say oh well you called the

00:47:22,420 --> 00:47:25,750
search engine but it's not available

00:47:23,500 --> 00:47:27,640
right now so here are some machine

00:47:25,750 --> 00:47:29,830
learned recommendations right is it what

00:47:27,640 --> 00:47:31,330
you wanted no not exactly but it's

00:47:29,830 --> 00:47:33,190
better than nothing isn't it it's better

00:47:31,330 --> 00:47:35,890
than a big fat ascii middle finger

00:47:33,190 --> 00:47:37,870
certainly so we have to prepare for that

00:47:35,890 --> 00:47:39,820
eventualities i'll connecting our code

00:47:37,870 --> 00:47:44,110
appropriately so now let's suppose I go

00:47:39,820 --> 00:47:48,910
to the reservation service here where's

00:47:44,110 --> 00:47:50,950
my service here and I kill it okay empty

00:47:48,910 --> 00:47:53,290
array list it didn't throw an exception

00:47:50,950 --> 00:47:55,300
didn't give me a status code and it

00:47:53,290 --> 00:47:56,500
didn't didn't throw me an exception

00:47:55,300 --> 00:47:58,630
didn't do any of that stuff it just gave

00:47:56,500 --> 00:48:01,210
me an empty ArrayList and eventually

00:47:58,630 --> 00:48:02,740
when I we start that application it'll

00:48:01,210 --> 00:48:04,360
resynchronize with the registry and we

00:48:02,740 --> 00:48:05,710
register itself now if you're using a

00:48:04,360 --> 00:48:08,230
cloud platform something like Cloud

00:48:05,710 --> 00:48:10,210
Foundry Cloud Foundry will work all day

00:48:08,230 --> 00:48:11,770
and all night if you say I want to have

00:48:10,210 --> 00:48:13,930
10 instances of that service running at

00:48:11,770 --> 00:48:15,310
all times no matter what guaranteed it

00:48:13,930 --> 00:48:17,170
will start them up and make sure that it

00:48:15,310 --> 00:48:18,760
has ten instances if your code falls

00:48:17,170 --> 00:48:20,410
down it'll pick it back up again

00:48:18,760 --> 00:48:22,030
it doesn't sleep it doesn't eat it it

00:48:20,410 --> 00:48:24,250
just goes and goes and goes right it'll

00:48:22,030 --> 00:48:26,590
move heaven and earth to make sure that

00:48:24,250 --> 00:48:28,300
you are able to sleep through the night

00:48:26,590 --> 00:48:30,310
but it's our job as developers and

00:48:28,300 --> 00:48:32,110
architects to build our system to do the

00:48:30,310 --> 00:48:35,020
right thing in the face of failure in

00:48:32,110 --> 00:48:37,090
the face of possible outages we all know

00:48:35,020 --> 00:48:38,680
that you know we were the last thing

00:48:37,090 --> 00:48:39,880
that we want to do is overwhelm that

00:48:38,680 --> 00:48:41,500
service when it's trying to come back

00:48:39,880 --> 00:48:44,320
online right that circuit breaker is

00:48:41,500 --> 00:48:45,970
stateful it sees that you've made enough

00:48:44,320 --> 00:48:47,020
requests it sees that you made maybe two

00:48:45,970 --> 00:48:48,730
or three hours you know enough

00:48:47,020 --> 00:48:50,140
subsequent requests and that they have

00:48:48,730 --> 00:48:52,300
failed so it's going to move the train

00:48:50,140 --> 00:48:55,630
tracks it'll switch the train track to

00:48:52,300 --> 00:48:57,130
the fallback directly it'll prevent you

00:48:55,630 --> 00:48:59,080
from overwhelming that downstream

00:48:57,130 --> 00:49:00,760
service while it's trying to recover we

00:48:59,080 --> 00:49:02,020
all know that if a website is really

00:49:00,760 --> 00:49:02,500
slow the best thing you should do is to

00:49:02,020 --> 00:49:05,830
refresh the

00:49:02,500 --> 00:49:06,760
ah so right does that work of course not

00:49:05,830 --> 00:49:08,470
right the same is true of your

00:49:06,760 --> 00:49:10,930
distributed system so the circuit

00:49:08,470 --> 00:49:12,910
breaker is very smart now eventually it

00:49:10,930 --> 00:49:15,940
heals itself and you're fine right the

00:49:12,910 --> 00:49:17,440
problems now we have an application

00:49:15,940 --> 00:49:18,760
that's robust in the face of service

00:49:17,440 --> 00:49:20,230
outages and topology changes it's

00:49:18,760 --> 00:49:22,840
elastic it takes advantage of the

00:49:20,230 --> 00:49:24,880
dynamic nature of a cloud it's agile and

00:49:22,840 --> 00:49:26,410
it's also a little observable we talked

00:49:24,880 --> 00:49:27,790
about observability for this service

00:49:26,410 --> 00:49:30,070
level but what about the system as a

00:49:27,790 --> 00:49:32,500
whole we haven't really talked about the

00:49:30,070 --> 00:49:34,360
halfway if I'm walking around here in

00:49:32,500 --> 00:49:36,430
beautiful Berlin on this beautiful day

00:49:34,360 --> 00:49:39,780
is that the same thing as looking at the

00:49:36,430 --> 00:49:40,990
Google map for Berlin of course not

00:49:39,780 --> 00:49:42,790
right

00:49:40,990 --> 00:49:45,490
being in Berlin is so much more

00:49:42,790 --> 00:49:47,560
beautiful and alive and vivid wonderful

00:49:45,490 --> 00:49:49,900
and memorable than looking at the Google

00:49:47,560 --> 00:49:52,540
map there's not this is these are not

00:49:49,900 --> 00:49:55,750
the same things the the map is not the

00:49:52,540 --> 00:49:57,520
terrain the same is true for your

00:49:55,750 --> 00:49:59,200
architecture your architecture diagram

00:49:57,520 --> 00:50:01,540
is not the same as your production

00:49:59,200 --> 00:50:04,300
system there is emergent behavior that

00:50:01,540 --> 00:50:05,860
you must capture in production otherwise

00:50:04,300 --> 00:50:07,180
you risk not understanding with the true

00:50:05,860 --> 00:50:09,580
nature of your system you can't use that

00:50:07,180 --> 00:50:11,920
observer ability to then drive change

00:50:09,580 --> 00:50:13,150
because it would be based on a lie so

00:50:11,920 --> 00:50:15,490
you need to capture that emergent

00:50:13,150 --> 00:50:16,960
behavior one place where we have a sort

00:50:15,490 --> 00:50:19,540
of you know cost communication across

00:50:16,960 --> 00:50:21,280
services is the circuit breaker the

00:50:19,540 --> 00:50:23,230
circuit breaker represents a connective

00:50:21,280 --> 00:50:25,150
tissue a line between my service and

00:50:23,230 --> 00:50:27,370
some other service managed by some other

00:50:25,150 --> 00:50:30,880
team or some other company I can't

00:50:27,370 --> 00:50:33,010
change other people's code I cannot add

00:50:30,880 --> 00:50:36,340
my monitoring infrastructure to their

00:50:33,010 --> 00:50:39,640
systems I can't do that I can't change

00:50:36,340 --> 00:50:41,320
everything as an optimist I'm being an

00:50:39,640 --> 00:50:43,600
optimist I'm a happy guy I'm a very

00:50:41,320 --> 00:50:47,170
optimistic person I know that everybody

00:50:43,600 --> 00:50:48,610
else will fail me all the time right the

00:50:47,170 --> 00:50:51,010
pessimist would say that there's nothing

00:50:48,610 --> 00:50:52,720
I can do about it though I don't say

00:50:51,010 --> 00:50:54,640
that I say I can monitor the

00:50:52,720 --> 00:50:56,590
relationships the connections from my

00:50:54,640 --> 00:50:58,480
services to their services that circuit

00:50:56,590 --> 00:51:01,030
breaker is a nice place to capture that

00:50:58,480 --> 00:51:03,100
observability it represents a steep

00:51:01,030 --> 00:51:05,890
between my service and their service so

00:51:03,100 --> 00:51:07,360
if the circuit is open then requests are

00:51:05,890 --> 00:51:09,550
not travelling from my service to their

00:51:07,360 --> 00:51:12,120
service that tells me that by proxy

00:51:09,550 --> 00:51:14,560
their service is broken so I can use a

00:51:12,120 --> 00:51:15,850
history dashboard a circuit breaker

00:51:14,560 --> 00:51:17,820
dashboard to

00:51:15,850 --> 00:51:20,860
caPSURE information and to visualize

00:51:17,820 --> 00:51:22,180
about the the dashboard the circuit

00:51:20,860 --> 00:51:25,230
breaker in my system or the circuit

00:51:22,180 --> 00:51:28,030
breakers right so let's go here unzip

00:51:25,230 --> 00:51:31,780
district's dashboard CD hystrix

00:51:28,030 --> 00:51:35,860
dashboard idea pond an XML open up this

00:51:31,780 --> 00:51:39,760
property file spring application name

00:51:35,860 --> 00:51:41,770
hystrix dashboard okay very good history

00:51:39,760 --> 00:51:45,280
dashboard application and we'll say at

00:51:41,770 --> 00:51:52,530
enable discovery client at naval history

00:51:45,280 --> 00:51:52,530
dashboard and we are go okay and voila

00:51:56,190 --> 00:52:00,520
so that dashboard is going to be this

00:51:58,600 --> 00:52:03,700
thing on port 80 10-4 slash hystrix that

00:52:00,520 --> 00:52:05,920
HTML it needs a stream that it can use

00:52:03,700 --> 00:52:06,850
to monitor so that scheme is generated

00:52:05,920 --> 00:52:10,510
for us automatically

00:52:06,850 --> 00:52:12,160
let me grab that okay we're going to it

00:52:10,510 --> 00:52:14,680
need the screen that it can use to to

00:52:12,160 --> 00:52:17,040
monitor the flow of data through that

00:52:14,680 --> 00:52:20,050
circuit and that circuit breaker

00:52:17,040 --> 00:52:24,600
produces a new value I need to actually

00:52:20,050 --> 00:52:31,980
make a request on I today there we are

00:52:24,600 --> 00:52:31,980
okay hello

00:52:35,440 --> 00:52:44,140
it's trying to format it which is not

00:52:37,509 --> 00:52:46,119
what we want oh well that that stream

00:52:44,140 --> 00:52:48,789
produces a new value every second as a

00:52:46,119 --> 00:52:50,980
service end event heartbeat stream right

00:52:48,789 --> 00:52:55,450
and so it's going to go on forever and

00:52:50,980 --> 00:52:58,000
ever and ever and ever and ever it's

00:52:55,450 --> 00:53:01,690
infinite it has no end it's endless like

00:52:58,000 --> 00:53:03,700
the skies and the oceans and the stars

00:53:01,690 --> 00:53:05,980
and the bugs and your code just infinite

00:53:03,700 --> 00:53:09,160
forever and ever and ever so whatever

00:53:05,980 --> 00:53:12,250
you do my friends whatever you do do not

00:53:09,160 --> 00:53:13,420
curl that endpoint now what I'm going to

00:53:12,250 --> 00:53:15,640
do them and make requests here on the

00:53:13,420 --> 00:53:16,900
left and I'll see the moving average

00:53:15,640 --> 00:53:17,950
trending ever upwards on the right it

00:53:16,900 --> 00:53:21,309
shows me that through that circuit

00:53:17,950 --> 00:53:22,690
there's 39 requests 45 etc 51 but it's a

00:53:21,309 --> 00:53:24,579
moving average so if I let go the gas

00:53:22,690 --> 00:53:26,799
goes down it says it's gonna ten

00:53:24,579 --> 00:53:29,140
downwards if I kill the downstream

00:53:26,799 --> 00:53:30,910
service this will say open instead of

00:53:29,140 --> 00:53:32,250
closed that's one way to get the

00:53:30,910 --> 00:53:35,589
visibility that we're talking about now

00:53:32,250 --> 00:53:38,170
that's not the only way remember oh

00:53:35,589 --> 00:53:41,200
there's yeah now it's giving you guys

00:53:38,170 --> 00:53:43,180
every second darn it the other way to

00:53:41,200 --> 00:53:45,640
get that emergent behavior is to do

00:53:43,180 --> 00:53:47,470
distributed or correlated tracing what I

00:53:45,640 --> 00:53:50,529
want to do is for every request anywhere

00:53:47,470 --> 00:53:53,200
in the system to add a unique correlated

00:53:50,529 --> 00:53:54,789
ID and then trace that idea that flows

00:53:53,200 --> 00:53:56,589
from one node to another to another in

00:53:54,789 --> 00:53:58,150
theory this is very simple but it

00:53:56,589 --> 00:54:00,039
requires that we change all of our code

00:53:58,150 --> 00:54:02,589
everywhere anytime you make a rest

00:54:00,039 --> 00:54:04,990
request or use for example RabbitMQ or

00:54:02,589 --> 00:54:06,730
pachi Kafka anytime you do any kind of

00:54:04,990 --> 00:54:08,680
RPC anywhere in the system you have to

00:54:06,730 --> 00:54:10,210
have this tracing for it to be effective

00:54:08,680 --> 00:54:11,980
and it has to work for all services

00:54:10,210 --> 00:54:15,880
otherwise you'll have gaps in your trace

00:54:11,980 --> 00:54:18,309
tree right so we can support that spring

00:54:15,880 --> 00:54:20,109
cloud sleuth supports that it has it's

00:54:18,309 --> 00:54:22,990
an abstraction in spring cloud that

00:54:20,109 --> 00:54:24,279
works with different services and in

00:54:22,990 --> 00:54:26,859
particular we have an implementation

00:54:24,279 --> 00:54:28,930
that works with Zipkin now Zipkin is a

00:54:26,859 --> 00:54:30,490
distributed tracing tool from Twitter we

00:54:28,930 --> 00:54:32,619
are very lucky on the spring cloud team

00:54:30,490 --> 00:54:34,029
we have contributors from both Netflix

00:54:32,619 --> 00:54:36,789
and from Twitter who have helped make

00:54:34,029 --> 00:54:38,440
spring cloud awesome so Zipkin is easy

00:54:36,789 --> 00:54:43,299
to set up we're going to do that here

00:54:38,440 --> 00:54:47,060
sip can you I okay generate go to the

00:54:43,299 --> 00:54:49,820
console here unzip

00:54:47,060 --> 00:54:53,440
in service CD Zipkin - service ID upon

00:54:49,820 --> 00:54:55,880
that xml and it's going to spit up

00:54:53,440 --> 00:54:59,960
application up copies spring application

00:54:55,880 --> 00:55:02,260
name Zipkin - - service Zipkin service

00:54:59,960 --> 00:55:03,560
application at enable discovery client

00:55:02,260 --> 00:55:07,790
there we are

00:55:03,560 --> 00:55:12,110
oh I forgot one nuts let me see here ok

00:55:07,790 --> 00:55:14,120
Zipkin - server now that the conserver

00:55:12,110 --> 00:55:16,160
is very important that suit conserver is

00:55:14,120 --> 00:55:18,050
the api that power Zipkin and it

00:55:16,160 --> 00:55:20,060
provides this annotation at enable

00:55:18,050 --> 00:55:22,340
Zipkin server now you notice that that

00:55:20,060 --> 00:55:23,750
annotation is a springboard annotation

00:55:22,340 --> 00:55:25,760
that's because Zipkin itself is written

00:55:23,750 --> 00:55:27,890
in using spring boot the REST API uses

00:55:25,760 --> 00:55:30,140
spring boots so it's a purpose-built I

00:55:27,890 --> 00:55:31,490
guess what's coming ok so there we go in

00:55:30,140 --> 00:55:33,290
stock it up in order for that to work

00:55:31,490 --> 00:55:36,230
our reservation service and our

00:55:33,290 --> 00:55:38,720
reservation client need the client you

00:55:36,230 --> 00:55:40,310
know pointer or the client library for

00:55:38,720 --> 00:55:41,780
Zipkin and you notice that before I just

00:55:40,310 --> 00:55:44,590
comment to those out but I'll bring

00:55:41,780 --> 00:55:47,510
those back in ok here we are there's the

00:55:44,590 --> 00:55:49,630
this is the service isn't it so we'll

00:55:47,510 --> 00:55:53,270
start that up and we want the client

00:55:49,630 --> 00:56:06,940
here ok and we're going to bring that in

00:55:53,270 --> 00:56:06,940
as well ok goody so that's not it

00:56:08,110 --> 00:56:13,160
sometimes my my class pass on my

00:56:10,910 --> 00:56:17,200
application doesn't reflect as fast as I

00:56:13,160 --> 00:56:21,320
restarted which is a bummer so localhost

00:56:17,200 --> 00:56:22,550
reservation come on there we go there's

00:56:21,320 --> 00:56:23,900
my names right I'm making requests

00:56:22,550 --> 00:56:25,490
through the edge service going down to

00:56:23,900 --> 00:56:28,040
the downstream service now if I go to

00:56:25,490 --> 00:56:30,590
the Zipkin server I can see that it is

00:56:28,040 --> 00:56:31,790
aware of my services it sees the client

00:56:30,590 --> 00:56:35,210
in the service I can click on either one

00:56:31,790 --> 00:56:36,920
hit fine trace and when I do that I get

00:56:35,210 --> 00:56:38,540
a waterfall graph the first request for

00:56:36,920 --> 00:56:40,850
some reason is always freakishly long

00:56:38,540 --> 00:56:42,380
it's ASA it's exceptional ignore that

00:56:40,850 --> 00:56:44,510
one everything else is normal right so

00:56:42,380 --> 00:56:46,700
here's the requests that have gone into

00:56:44,510 --> 00:56:48,470
the system this request started at the

00:56:46,700 --> 00:56:49,550
reservation client and then some

00:56:48,470 --> 00:56:51,650
milliseconds later went to the

00:56:49,550 --> 00:56:53,450
reservation service it's a waterfall

00:56:51,650 --> 00:56:54,620
graph so if I click on each one of these

00:56:53,450 --> 00:56:56,660
little waterfall graph knows I get

00:56:54,620 --> 00:56:59,200
context about the request the in-and-out

00:56:56,660 --> 00:57:01,540
log the timestamps and

00:56:59,200 --> 00:57:03,040
tags these tags down here are metadata

00:57:01,540 --> 00:57:04,420
about the request itself they show me

00:57:03,040 --> 00:57:06,220
when the request was made when it

00:57:04,420 --> 00:57:07,810
stopped you know it shows me what

00:57:06,220 --> 00:57:09,940
component processed it what thread pool

00:57:07,810 --> 00:57:12,130
was on etc it gives me visibility into

00:57:09,940 --> 00:57:14,500
the flow of data through the system not

00:57:12,130 --> 00:57:16,270
just individual nodes both the user

00:57:14,500 --> 00:57:19,089
explored and the Zipkin distributed

00:57:16,270 --> 00:57:20,740
tracing support are for online telemetry

00:57:19,089 --> 00:57:23,260
they're all about right now not

00:57:20,740 --> 00:57:25,390
warehousing I don't know how much money

00:57:23,260 --> 00:57:26,980
we made last quarter but this can tell

00:57:25,390 --> 00:57:29,470
me what the average latency on the

00:57:26,980 --> 00:57:30,609
website is for the last hour that's what

00:57:29,470 --> 00:57:32,800
I'm trying to get here that's what this

00:57:30,609 --> 00:57:36,460
gives me is it at a glance observability

00:57:32,800 --> 00:57:38,740
and status now we are I think about to

00:57:36,460 --> 00:57:40,599
run out of time I wish we had more time

00:57:38,740 --> 00:57:41,680
my friends then we can actually talk

00:57:40,599 --> 00:57:43,450
about something we didn't even get to

00:57:41,680 --> 00:57:45,190
talk about anything this time really we

00:57:43,450 --> 00:57:47,440
talked about how to build applications

00:57:45,190 --> 00:57:49,270
that are elastic that are agile that are

00:57:47,440 --> 00:57:51,490
robust and that are observable we look

00:57:49,270 --> 00:57:52,750
at a centralized configuration we don't

00:57:51,490 --> 00:57:54,220
fit spring boot itself we don't fit

00:57:52,750 --> 00:57:55,960
actuator and observability we don't that

00:57:54,220 --> 00:57:57,609
client-side load balancing we looked at

00:57:55,960 --> 00:57:59,760
the circuit breakers Service

00:57:57,609 --> 00:58:02,099
registration discovery we looked at

00:57:59,760 --> 00:58:04,329
distributed tracing we looked at the

00:58:02,099 --> 00:58:05,859
district's dashboard but if we had more

00:58:04,329 --> 00:58:08,079
time we'd also look at how to do

00:58:05,859 --> 00:58:09,760
services that are integration test

00:58:08,079 --> 00:58:12,040
friendly that is to say if I have a unit

00:58:09,760 --> 00:58:13,960
test in my code for one node I can mock

00:58:12,040 --> 00:58:15,460
an object how do I do the same thing for

00:58:13,960 --> 00:58:17,859
my service and I want to mock out a

00:58:15,460 --> 00:58:19,720
whole West API for this used consumer

00:58:17,859 --> 00:58:21,400
driven contracts and consumer driven

00:58:19,720 --> 00:58:23,349
contract testing and for that we could

00:58:21,400 --> 00:58:25,270
have talked about spring cloud contract

00:58:23,349 --> 00:58:28,480
if we wanted to talk about how to secure

00:58:25,270 --> 00:58:30,910
our api's our services and protect them

00:58:28,480 --> 00:58:33,190
against unauthenticated clients like

00:58:30,910 --> 00:58:35,109
html5 browsers and iPhone devices and so

00:58:33,190 --> 00:58:36,910
on we could have talked about OAuth and

00:58:35,109 --> 00:58:38,530
spring cloud security which would have

00:58:36,910 --> 00:58:40,180
made it dead simple to protect all of

00:58:38,530 --> 00:58:42,160
our api is if we want to talk about

00:58:40,180 --> 00:58:43,930
eventual consistency in messaging we

00:58:42,160 --> 00:58:46,150
could have used apache Cosco RabbitMQ

00:58:43,930 --> 00:58:47,230
and used spring cloud stream to do that

00:58:46,150 --> 00:58:48,609
as well that would have been something

00:58:47,230 --> 00:58:51,010
we could have talked about if we wanted

00:58:48,609 --> 00:58:52,930
to compose our small messaging based

00:58:51,010 --> 00:58:54,849
micro services into higher order

00:58:52,930 --> 00:58:57,040
functions streams we could have looked

00:58:54,849 --> 00:58:59,349
at spring cloud dataflow which allows us

00:58:57,040 --> 00:59:02,290
to use a bash like pipes and filters DSL

00:58:59,349 --> 00:59:04,180
to build streams of functionality out of

00:59:02,290 --> 00:59:06,130
messaging based microservices we could

00:59:04,180 --> 00:59:07,420
have we could have done that right we

00:59:06,130 --> 00:59:09,670
could have done all of this in so much

00:59:07,420 --> 00:59:11,859
more using spring cloud now I'm a big

00:59:09,670 --> 00:59:12,730
fan obviously I like spring I'm wearing

00:59:11,859 --> 00:59:14,890
the spring t-shirt

00:59:12,730 --> 00:59:17,650
Spring underwear of course I'm a fan but

00:59:14,890 --> 00:59:19,480
I hope you like it as well you don't

00:59:17,650 --> 00:59:22,510
have to take my word for it though there

00:59:19,480 --> 00:59:24,370
are some small mom-and-pop shops that

00:59:22,510 --> 00:59:29,020
are using the pivotal stacks to great

00:59:24,370 --> 00:59:33,850
effect so if if amazon.com is the

00:59:29,020 --> 00:59:35,640
Alibaba of the Farwest then rocket ENCOM

00:59:33,850 --> 00:59:37,840
is the Alibaba of the further east

00:59:35,640 --> 00:59:39,700
record Indicom is in Japan at the

00:59:37,840 --> 00:59:41,050
e-commerce engine they're using spring

00:59:39,700 --> 00:59:44,500
boot and spring cloud and cloud foundry

00:59:41,050 --> 00:59:47,110
at scale to build services in China

00:59:44,500 --> 00:59:49,210
there is that aforementioned ecommerce

00:59:47,110 --> 00:59:51,310
giant there's Alibaba they're using

00:59:49,210 --> 00:59:52,780
spring boot and spring cloud for their

00:59:51,310 --> 00:59:54,280
services at scale they've talked about

00:59:52,780 --> 00:59:55,660
it loudly and proudly there's another

00:59:54,280 --> 00:59:57,730
company another small company that I

00:59:55,660 --> 00:59:59,320
believe one day will be quite big in

00:59:57,730 --> 01:00:01,510
China called Baidu now they're also

00:59:59,320 --> 01:00:02,710
using Cloud Foundry spring boot and

01:00:01,510 --> 01:00:04,840
spring cloud at scale these

01:00:02,710 --> 01:00:07,510
organizations are trying to go faster

01:00:04,840 --> 01:00:08,890
right in in the West you know most of

01:00:07,510 --> 01:00:10,690
the banks that you can you can think of

01:00:08,890 --> 01:00:13,420
are using Cloud Foundry they're using

01:00:10,690 --> 01:00:15,340
spring boot and now soon hopefully more

01:00:13,420 --> 01:00:18,040
spring cloud we see a lot of that in the

01:00:15,340 --> 01:00:19,540
West already well further west right but

01:00:18,040 --> 01:00:21,250
it's it's starting to become such a

01:00:19,540 --> 01:00:22,540
thing that even the banks realize that

01:00:21,250 --> 01:00:25,090
they need this competitive edge so

01:00:22,540 --> 01:00:27,100
they're using spring cloud we see in the

01:00:25,090 --> 01:00:29,530
West also the Internet darling you know

01:00:27,100 --> 01:00:31,630
the the stars of the internet like

01:00:29,530 --> 01:00:33,400
Netflix for example Netflix is using

01:00:31,630 --> 01:00:35,260
spring boot and spring cloud and they've

01:00:33,400 --> 01:00:36,730
talked about this in their talks loudly

01:00:35,260 --> 01:00:39,210
and proudly at conferences and so on

01:00:36,730 --> 01:00:41,740
they and all these other organizations

01:00:39,210 --> 01:00:43,330
have the money they have the motivation

01:00:41,740 --> 01:00:45,160
they have the smart people and they

01:00:43,330 --> 01:00:47,230
could solve these problems by themselves

01:00:45,160 --> 01:00:48,940
if they needed to but they still choose

01:00:47,230 --> 01:00:51,120
whenever possible especially for new

01:00:48,940 --> 01:00:53,260
stuff to build on the pivotal stack

01:00:51,120 --> 01:00:55,810
because this allows them to get to

01:00:53,260 --> 01:00:58,120
production faster and for them and most

01:00:55,810 --> 01:01:00,700
of these organizations out there that at

01:00:58,120 --> 01:01:02,470
the end of the day is all that matters

01:01:00,700 --> 01:01:03,730
thank you very much for your time my

01:01:02,470 --> 01:01:05,200
friends I hope you have a wonderful day

01:01:03,730 --> 01:01:07,440
and a great olcc thanks for having me

01:01:05,200 --> 01:01:07,440
Cheers

01:01:11,660 --> 01:01:15,360
if you have questions we didn't cover a

01:01:14,160 --> 01:01:16,050
lot but if you have questions I'm happy

01:01:15,360 --> 01:01:18,870
to take them

01:01:16,050 --> 01:01:20,100
I think we can do one question because

01:01:18,870 --> 01:01:24,660
we're running out of time I can stay

01:01:20,100 --> 01:01:26,700
outside too long just waiting for us do

01:01:24,660 --> 01:01:33,720
anyone have some questions there must be

01:01:26,700 --> 01:01:34,800
some did I answer all the questions did

01:01:33,720 --> 01:01:37,890
you did you see anything interesting

01:01:34,800 --> 01:01:39,090
thumbs up down I don't know about these

01:01:37,890 --> 01:01:41,250
conferences I feel like I'm the only

01:01:39,090 --> 01:01:42,270
apps talk at this thing and I want to

01:01:41,250 --> 01:01:45,230
make sure we're on the same page

01:01:42,270 --> 01:01:45,230

YouTube URL: https://www.youtube.com/watch?v=PkNt4m_eHUs


