Title: OSDC 2017 | Lessons from database failures by Colin Charles
Publication date: 2017-05-31
Playlist: OSDC 2017 | Open Source Data Center Conference
Description: 
	Lets learn from MySQL failures at scale, because we tie in the topic of High Availability, in where people are thinking about geographical redundancy, and even things like automatic failover. In the talk there will be case study material, e.g. where automatic failure caused a site to go offline, where a social network started of with not using fully automated failovers but evolved, etc. How is the MySQL world making things better, for example by allowing you to use semi-synchronous replication to run fully scalable services. The talk starts off with an even almost stupid example of how a business died due to incorrect MySQL backup procedures. It will go on to talk about security and encryption at rest as well. So a mix of problems from the field, big “fail whales”, and how you should avoid them by properly architecting solutions.
Captions: 
	00:00:09,549 --> 00:00:16,360
okay I the

00:00:12,120 --> 00:00:19,779
well we have some free seats perhaps

00:00:16,360 --> 00:00:23,980
some people who come in after well our

00:00:19,779 --> 00:00:26,500
next dog is held by Colin he will tell

00:00:23,980 --> 00:00:32,860
us something about databases and how and

00:00:26,500 --> 00:00:35,530
why and when they will crash hello hi

00:00:32,860 --> 00:00:39,280
good evening I'm between you and beer

00:00:35,530 --> 00:00:42,160
and lots of beer so I'll try to keep

00:00:39,280 --> 00:00:45,070
this brief keep in mind you have a bus

00:00:42,160 --> 00:00:48,700
leaving it think cause a quarter to

00:00:45,070 --> 00:00:52,930
seven so get ready y'all going to be at

00:00:48,700 --> 00:00:54,820
the party yes ok so I'm going to talk to

00:00:52,930 --> 00:00:59,079
you about some lessons from database

00:00:54,820 --> 00:01:02,740
failures and should I ask who doesn't

00:00:59,079 --> 00:01:05,950
use a database here you don't use a

00:01:02,740 --> 00:01:12,630
database okay and all like never use

00:01:05,950 --> 00:01:16,240
MySQL or Postgres okay you have you try

00:01:12,630 --> 00:01:18,940
okay yeah fair enough I've been I myself

00:01:16,240 --> 00:01:20,550
have been working on databases for about

00:01:18,940 --> 00:01:25,990
15 years

00:01:20,550 --> 00:01:28,299
so I say database a lot i work at

00:01:25,990 --> 00:01:32,350
percona now where we not only make

00:01:28,299 --> 00:01:34,299
servers for mysql but also for MongoDB

00:01:32,350 --> 00:01:36,460
and everything we do is a hundred

00:01:34,299 --> 00:01:38,250
percent open source before that I was on

00:01:36,460 --> 00:01:41,260
the founding team of Murray DB server I

00:01:38,250 --> 00:01:43,770
quit last year because they were making

00:01:41,260 --> 00:01:46,210
some software I was an open source and

00:01:43,770 --> 00:01:50,619
done a bunch of other things in the open

00:01:46,210 --> 00:01:52,840
source world so my agenda for today is

00:01:50,619 --> 00:01:55,240
quite simple I'm going to talk to you

00:01:52,840 --> 00:01:58,090
about backups and verification or

00:01:55,240 --> 00:02:00,729
validation of backups because having a

00:01:58,090 --> 00:02:02,350
backup is that you've never tested is

00:02:00,729 --> 00:02:04,210
quite useless and this applies across

00:02:02,350 --> 00:02:06,130
the board I guess not just for databases

00:02:04,210 --> 00:02:09,250
right you should be able to restore any

00:02:06,130 --> 00:02:10,599
kind of backup realistically I'm also

00:02:09,250 --> 00:02:13,870
going to talk to you about replication

00:02:10,599 --> 00:02:16,620
and failover and naturally a lot of what

00:02:13,870 --> 00:02:21,219
I talk about will be leaning towards

00:02:16,620 --> 00:02:23,349
MySQL mainly because it's used

00:02:21,219 --> 00:02:26,140
everywhere it's the one that's failed a

00:02:23,349 --> 00:02:27,850
lot in public as well and it may

00:02:26,140 --> 00:02:30,400
sent me to talk about how you can work

00:02:27,850 --> 00:02:32,620
around it as and I also talked about

00:02:30,400 --> 00:02:34,810
security as well as encryption which is

00:02:32,620 --> 00:02:37,770
new to the MySQL well it's this is not

00:02:34,810 --> 00:02:40,990
something that's been around before I

00:02:37,770 --> 00:02:43,570
won't talk about something like NDB

00:02:40,990 --> 00:02:48,700
cluster is anybody here use MySQL NDB

00:02:43,570 --> 00:02:50,830
cluster before or MySQL cluster no okay

00:02:48,700 --> 00:02:52,270
yeah okay so that's not the focus of

00:02:50,830 --> 00:02:57,640
this particular song because NDB cluster

00:02:52,270 --> 00:02:59,380
actually doesn't fail yeah so you're

00:02:57,640 --> 00:03:00,880
thinking I might be pulling your leg

00:02:59,380 --> 00:03:03,760
here but this is actually true it's

00:03:00,880 --> 00:03:06,550
typically used in the telco space and it

00:03:03,760 --> 00:03:09,820
manages to keep call date data records

00:03:06,550 --> 00:03:11,769
alive for most telcos actually it's

00:03:09,820 --> 00:03:13,810
where you keep home location record

00:03:11,769 --> 00:03:15,970
information so when you move cell from

00:03:13,810 --> 00:03:17,980
from cell to cell and some cells

00:03:15,970 --> 00:03:21,430
triangulate it gives you alive in memory

00:03:17,980 --> 00:03:24,010
it's a mostly in memory database but now

00:03:21,430 --> 00:03:25,360
you can have on this storage as well but

00:03:24,010 --> 00:03:27,940
you still have to keep the indexes in

00:03:25,360 --> 00:03:29,950
memory and it's a highly available

00:03:27,940 --> 00:03:32,140
shared nothing architecture where the

00:03:29,950 --> 00:03:35,350
minimum set up involves having five

00:03:32,140 --> 00:03:38,590
nodes as opposed to just having like

00:03:35,350 --> 00:03:39,610
maybe one or three nodes so yeah I'm not

00:03:38,590 --> 00:03:42,700
going to talk to you about NDB cluster

00:03:39,610 --> 00:03:47,920
and if you don't believe me about NDB

00:03:42,700 --> 00:03:49,900
cluster and it's infallible nature most

00:03:47,920 --> 00:03:51,130
likely your cell phone I mean I'm going

00:03:49,900 --> 00:03:53,769
to guess most of you have a cell phone

00:03:51,130 --> 00:03:58,209
here most likely a cell phone provider

00:03:53,769 --> 00:04:00,070
has actually paid someone Equipment

00:03:58,209 --> 00:04:02,860
Manufacturer to actually ensure that

00:04:00,070 --> 00:04:07,810
there is something like NDB running in

00:04:02,860 --> 00:04:12,280
the back end so it smaller less works of

00:04:07,810 --> 00:04:15,910
photos and it also works for the US Navy

00:04:12,280 --> 00:04:19,419
actually so they do this for the day of

00:04:15,910 --> 00:04:23,070
missile launches from these bishops and

00:04:19,419 --> 00:04:25,810
you never want a split brain scenario

00:04:23,070 --> 00:04:29,140
yeah this is this may be funny but this

00:04:25,810 --> 00:04:33,789
is real but the caveat is they running

00:04:29,140 --> 00:04:37,560
on an elf or based operating system

00:04:33,789 --> 00:04:37,560
which is actually Microsoft Windows

00:04:38,310 --> 00:04:43,660
well there that case studies on the

00:04:40,450 --> 00:04:44,740
internet you can go go read them so yeah

00:04:43,660 --> 00:04:49,710
I'm not gonna talk to you Valenti we

00:04:44,740 --> 00:04:51,970
cluster besides that little also

00:04:49,710 --> 00:04:53,560
what this talk is going to be focusing a

00:04:51,970 --> 00:04:56,050
lot about is learning from incident

00:04:53,560 --> 00:04:58,060
reports and I guess a lot of you spend

00:04:56,050 --> 00:04:59,800
time reading other people to do the

00:04:58,060 --> 00:05:03,130
reports and also writing them if you

00:04:59,800 --> 00:05:04,960
happen to have failures I'm going to

00:05:03,130 --> 00:05:07,510
include the sign up disclaimer here

00:05:04,960 --> 00:05:10,050
which is now more nowadays

00:05:07,510 --> 00:05:13,180
affectionately referred to as huh gulps

00:05:10,050 --> 00:05:14,950
I'm taking examples from blameless post

00:05:13,180 --> 00:05:16,900
mortems here so I'm not blaming and

00:05:14,950 --> 00:05:19,000
shaming anybody and we're just looking

00:05:16,900 --> 00:05:21,160
at facts of the situation and in fact

00:05:19,000 --> 00:05:24,370
later on you'll see that you know

00:05:21,160 --> 00:05:26,020
there's a company that you actually made

00:05:24,370 --> 00:05:27,610
use of percona software and they

00:05:26,020 --> 00:05:28,990
actually failed because of some pro/con

00:05:27,610 --> 00:05:30,880
of software but then you know because

00:05:28,990 --> 00:05:33,970
when we fix some bugs after that as well

00:05:30,880 --> 00:05:35,620
so it's a huge bonus and I think you

00:05:33,970 --> 00:05:37,150
know we we all generally share common

00:05:35,620 --> 00:05:39,130
values because we don't want to repeat

00:05:37,150 --> 00:05:43,390
failure and I think together we can

00:05:39,130 --> 00:05:49,240
improve so does anybody remember this

00:05:43,390 --> 00:05:51,520
website called Magnolia no well I

00:05:49,240 --> 00:05:53,890
well incident obviously remembers thanks

00:05:51,520 --> 00:05:56,200
to the wayback machine this website

00:05:53,890 --> 00:05:58,000
started around 2006 they will focus on

00:05:56,200 --> 00:06:00,520
open standards microformats they were a

00:05:58,000 --> 00:06:02,800
bookmarking service there was also paid

00:06:00,520 --> 00:06:04,510
components of Magnolia though they

00:06:02,800 --> 00:06:06,610
claimed they never made any profits and

00:06:04,510 --> 00:06:08,340
shortly after Magnolia you may have

00:06:06,610 --> 00:06:13,690
heard of this service called delicious

00:06:08,340 --> 00:06:15,370
which Yahoo bought and possibly that was

00:06:13,690 --> 00:06:17,380
not good for them and then they may have

00:06:15,370 --> 00:06:19,300
sold it back out again and now you can

00:06:17,380 --> 00:06:22,810
also pay for bookmarking service called

00:06:19,300 --> 00:06:24,400
pin board pin board I n so maybe you're

00:06:22,810 --> 00:06:26,950
familiar with some form of bookmarking

00:06:24,400 --> 00:06:31,270
service as opposed to just saving

00:06:26,950 --> 00:06:35,250
everything in bookmarked or HTM so

00:06:31,270 --> 00:06:38,740
Magnolia had a very interesting failure

00:06:35,250 --> 00:06:40,390
they ran for about three years and then

00:06:38,740 --> 00:06:43,690
they realized that the end of January

00:06:40,390 --> 00:06:45,520
had a complete outage it took them three

00:06:43,690 --> 00:06:50,010
weeks for them to confirm that the user

00:06:45,520 --> 00:06:50,010
database was corrupted and

00:06:50,039 --> 00:06:53,930
basically they were essentially did and

00:06:54,020 --> 00:06:58,949
what actually happened was they had a

00:06:56,629 --> 00:07:03,110
fairly simple Ruby on Rails application

00:06:58,949 --> 00:07:04,919
hosted on Mac minis so not not entirely

00:07:03,110 --> 00:07:10,199
uncommon thing to do

00:07:04,919 --> 00:07:12,930
back in 2006 or 2009 they had exurbs I

00:07:10,199 --> 00:07:16,740
mean you can't buy them anymore but they

00:07:12,930 --> 00:07:18,930
were of data center quality and they had

00:07:16,740 --> 00:07:20,399
about a 500 gigabyte MySQL database so

00:07:18,930 --> 00:07:25,469
if you just think about it all they did

00:07:20,399 --> 00:07:27,240
was store links and and that took up 500

00:07:25,469 --> 00:07:29,099
gigs of data so you can think that they

00:07:27,240 --> 00:07:32,520
actually start quite a lot a lot of data

00:07:29,099 --> 00:07:35,629
in their user database they they

00:07:32,520 --> 00:07:40,199
encounter the file system corruption and

00:07:35,629 --> 00:07:42,689
hfs+ is a wonderful file system but it's

00:07:40,199 --> 00:07:45,629
not really data center ready I would say

00:07:42,689 --> 00:07:49,289
most most people running a MySQL

00:07:45,629 --> 00:07:50,809
database today will run it on XFS or

00:07:49,289 --> 00:07:55,789
ext4

00:07:50,809 --> 00:07:55,789
they will not be running it on hfs+ and

00:07:56,360 --> 00:08:00,509
not only do they have a file system

00:07:58,289 --> 00:08:03,479
corruption they also end up having

00:08:00,509 --> 00:08:07,019
corrupt the database backup and the

00:08:03,479 --> 00:08:08,430
reason was quite simple was because they

00:08:07,019 --> 00:08:10,709
never checked if their backups could

00:08:08,430 --> 00:08:12,719
ever restore and they thought that they

00:08:10,709 --> 00:08:15,209
would make arcing backups over the

00:08:12,719 --> 00:08:19,620
firewire network and this would be good

00:08:15,209 --> 00:08:21,300
enough for general purpose resource now

00:08:19,620 --> 00:08:24,240
it is most likely they were using my

00:08:21,300 --> 00:08:25,649
eyes em as a storage engine they don't

00:08:24,240 --> 00:08:29,009
say and we can't find out any

00:08:25,649 --> 00:08:31,889
information and our sink is totally not

00:08:29,009 --> 00:08:33,930
a good way to backup my SQL data because

00:08:31,889 --> 00:08:37,169
it's great for maybe static data but not

00:08:33,930 --> 00:08:41,180
constantly changing data so this is

00:08:37,169 --> 00:08:44,310
definitely not a way to backup MySQL

00:08:41,180 --> 00:08:48,620
they confirmed that their service more

00:08:44,310 --> 00:08:52,880
or less was dead later that year in in

00:08:48,620 --> 00:08:55,589
latest to 2009 but it took them over

00:08:52,880 --> 00:08:58,860
nearly a year to say to go from

00:08:55,589 --> 00:09:00,720
corruption to saying sorry we've lost

00:08:58,860 --> 00:09:02,250
all your bookmarks now you think to

00:09:00,720 --> 00:09:03,280
yourself bookmarks maybe not that

00:09:02,250 --> 00:09:05,230
important but

00:09:03,280 --> 00:09:07,600
some people are actually attached to the

00:09:05,230 --> 00:09:08,980
bookmarks or any of their content so I

00:09:07,600 --> 00:09:11,020
think one of the major things here is

00:09:08,980 --> 00:09:15,040
you never want to lose data overall I

00:09:11,020 --> 00:09:19,090
mean losing data is bad so how would you

00:09:15,040 --> 00:09:21,490
do Magnolia today for one you may use

00:09:19,090 --> 00:09:26,050
something like ec2 you may not actually

00:09:21,490 --> 00:09:28,510
go out and buy a server you may use EBS

00:09:26,050 --> 00:09:30,010
snapshots you may make use of an RDS

00:09:28,510 --> 00:09:32,320
database so you don't have to have a

00:09:30,010 --> 00:09:34,450
database administrator so that Amazon

00:09:32,320 --> 00:09:36,850
does all the heavy lifting you may also

00:09:34,450 --> 00:09:40,540
want to have a multi availability zone

00:09:36,850 --> 00:09:45,010
deployment but we are at the open source

00:09:40,540 --> 00:09:46,510
data center Conference aren't we so I'm

00:09:45,010 --> 00:09:51,130
going to I'm going to presume that many

00:09:46,510 --> 00:09:53,050
of you like self hosting yes okay so

00:09:51,130 --> 00:09:54,550
we'll go with the self hosting option

00:09:53,050 --> 00:09:56,920
and keep in mind you can do the whole

00:09:54,550 --> 00:10:02,230
self hosting option in some kind of

00:09:56,920 --> 00:10:04,510
cloud image as well for one you will

00:10:02,230 --> 00:10:07,630
make backups with two like recover no

00:10:04,510 --> 00:10:09,310
extra backup extra backup is more or

00:10:07,630 --> 00:10:12,580
less the default way to make backups

00:10:09,310 --> 00:10:15,040
today for MySQL if you're going to make

00:10:12,580 --> 00:10:17,320
logical backups you will use MySQL dump

00:10:15,040 --> 00:10:19,089
but for any other form of backup you

00:10:17,320 --> 00:10:21,940
will definitely want to use extra backup

00:10:19,089 --> 00:10:23,920
extra backup books or in ODB as well as

00:10:21,940 --> 00:10:27,400
my eyes M that we don't recommend you to

00:10:23,920 --> 00:10:29,440
use mais them any longer extra backup

00:10:27,400 --> 00:10:31,330
works across the board as well so it

00:10:29,440 --> 00:10:35,620
works for MySQL Percona server as well

00:10:31,330 --> 00:10:38,650
as Maria DB server now another thing

00:10:35,620 --> 00:10:41,320
you'd probably want to do is you'll

00:10:38,650 --> 00:10:43,870
probably want to occasionally spin up a

00:10:41,320 --> 00:10:46,780
slave instance and when you want to spin

00:10:43,870 --> 00:10:49,410
up a slave instance you don't have to do

00:10:46,780 --> 00:10:53,470
flush tables to read lock anymore in

00:10:49,410 --> 00:10:56,320
MySQL five seven as well as Maria DB

00:10:53,470 --> 00:10:58,270
five five and greater and patron a

00:10:56,320 --> 00:10:59,860
server five six and greater that's

00:10:58,270 --> 00:11:03,640
because you can do start transaction

00:10:59,860 --> 00:11:05,440
with consistent snapshot and then you

00:11:03,640 --> 00:11:07,360
will do a MySQL dump with single

00:11:05,440 --> 00:11:09,910
transaction and master data to take a

00:11:07,360 --> 00:11:12,580
backup a consistent snapshot of whatever

00:11:09,910 --> 00:11:13,990
was executed before you ran start

00:11:12,580 --> 00:11:16,610
transaction with a consistent snapshot

00:11:13,990 --> 00:11:18,910
your database can continue

00:11:16,610 --> 00:11:21,709
getting transactions committed to it and

00:11:18,910 --> 00:11:24,709
this will have a hook that will ensure

00:11:21,709 --> 00:11:26,660
that it works continual continuously

00:11:24,709 --> 00:11:30,649
you'd never ever have to do flash tables

00:11:26,660 --> 00:11:32,929
to read lock any longer now that we're

00:11:30,649 --> 00:11:34,850
talking about MySQL versions I'm curious

00:11:32,929 --> 00:11:41,720
to know as well how many here use MySQL

00:11:34,850 --> 00:11:43,489
five seven five six and I say MySQL

00:11:41,720 --> 00:11:51,230
Academy pack owner server as well

00:11:43,489 --> 00:11:58,160
five five Wow okay anything older who

00:11:51,230 --> 00:12:05,029
uses Maria DB 10 one okay ten zero five

00:11:58,160 --> 00:12:09,399
five okay so I'll try to UM talk about

00:12:05,029 --> 00:12:09,399
differences as we go along as well

00:12:11,259 --> 00:12:15,319
another thing most people do nowadays in

00:12:13,970 --> 00:12:17,480
production is they don't back up their

00:12:15,319 --> 00:12:19,549
master data either they back up from a

00:12:17,480 --> 00:12:21,350
replica slave basically you never back

00:12:19,549 --> 00:12:25,519
up you never want to add more load to

00:12:21,350 --> 00:12:26,869
your master another very cool thing

00:12:25,519 --> 00:12:29,089
that's available is to stinkle

00:12:26,869 --> 00:12:31,309
replication event checksums now

00:12:29,089 --> 00:12:34,339
replication event checksums came to the

00:12:31,309 --> 00:12:37,129
mysql world in mysql five six and in the

00:12:34,339 --> 00:12:39,919
Morea DB world in five three which is

00:12:37,129 --> 00:12:41,600
back ported from five six and basically

00:12:39,919 --> 00:12:43,519
what you get is a checksum written to

00:12:41,600 --> 00:12:46,939
both the relay as well as a binary log

00:12:43,519 --> 00:12:49,339
at various points and and if there's an

00:12:46,939 --> 00:12:52,519
error caused by same memory or disk or

00:12:49,339 --> 00:12:54,980
network failures it will actually stop

00:12:52,519 --> 00:12:56,569
replication so MySQL replication is

00:12:54,980 --> 00:12:59,059
super easy to setup right but if you

00:12:56,569 --> 00:13:01,399
don't monitor it it may actually give

00:12:59,059 --> 00:13:03,369
you corrupted replicas and this is one

00:13:01,399 --> 00:13:05,749
of the major problems would say

00:13:03,369 --> 00:13:07,369
statement based replication which is why

00:13:05,749 --> 00:13:09,559
nowadays you have things like robust

00:13:07,369 --> 00:13:12,139
replication and of course you can

00:13:09,559 --> 00:13:14,299
implement check sums which is even

00:13:12,139 --> 00:13:16,069
better than just using row based

00:13:14,299 --> 00:13:18,739
replication and of course it's can be

00:13:16,069 --> 00:13:20,239
promoted on a per slave basis as well so

00:13:18,739 --> 00:13:23,959
you can actually get the most likes

00:13:20,239 --> 00:13:25,399
ability for when it is deployed and the

00:13:23,959 --> 00:13:27,649
key point here is that if there is a

00:13:25,399 --> 00:13:29,689
mismatch it will stop and you as an

00:13:27,649 --> 00:13:30,510
operator will get to know that there was

00:13:29,689 --> 00:13:33,420
something something

00:13:30,510 --> 00:13:36,450
and you get to fix it as opposed to just

00:13:33,420 --> 00:13:40,160
taking on failed data in your replicas

00:13:36,450 --> 00:13:42,450
and then finding out when it's too late

00:13:40,160 --> 00:13:44,580
does anybody remember this website

00:13:42,450 --> 00:13:49,650
called couchsurfing or does anybody use

00:13:44,580 --> 00:13:52,410
it okay some of you do use couchsurfing

00:13:49,650 --> 00:13:55,560
so yes it's still very much alive so

00:13:52,410 --> 00:13:57,120
couchsurfing in 2006 did not have the

00:13:55,560 --> 00:14:01,110
concept of an incident report but they

00:13:57,120 --> 00:14:03,540
did write a blog post and they said that

00:14:01,110 --> 00:14:05,670
they had a major avoidable hard drive

00:14:03,540 --> 00:14:07,320
crash and then the incremental backups

00:14:05,670 --> 00:14:10,170
weren't executed in the correct manner

00:14:07,320 --> 00:14:12,890
and 12 of our most important data files

00:14:10,170 --> 00:14:17,040
didn't survive ooh

00:14:12,890 --> 00:14:18,990
so couchsurfing major problems hard

00:14:17,040 --> 00:14:21,630
drive crash that's something you totally

00:14:18,990 --> 00:14:25,560
avoid now today largely because you

00:14:21,630 --> 00:14:27,900
don't only have one machine and you will

00:14:25,560 --> 00:14:29,340
always execute incremental backups in a

00:14:27,900 --> 00:14:31,890
correct fashion and if you made a

00:14:29,340 --> 00:14:34,110
mistake because the developer made an

00:14:31,890 --> 00:14:35,790
error there ways to ensure that a

00:14:34,110 --> 00:14:38,580
replica does not have the error that

00:14:35,790 --> 00:14:39,900
that said developer has executed now

00:14:38,580 --> 00:14:42,750
couchsurfing is still more or less

00:14:39,900 --> 00:14:44,490
around thankfully because Airbnb did not

00:14:42,750 --> 00:14:47,760
exist in 2006

00:14:44,490 --> 00:14:52,980
if Airbnb did exist couchsurfing would

00:14:47,760 --> 00:14:54,660
be completely dead now probably now it

00:14:52,980 --> 00:14:57,180
was actually caused by developer error

00:14:54,660 --> 00:15:01,290
and one of the cool things that one

00:14:57,180 --> 00:15:02,610
could actually have avoided this problem

00:15:01,290 --> 00:15:05,040
was if they had actually had the ability

00:15:02,610 --> 00:15:06,720
to have a time-delayed replica so

00:15:05,040 --> 00:15:10,670
anybody who use a time-delayed replica

00:15:06,720 --> 00:15:15,090
or tanzanite replication in production

00:15:10,670 --> 00:15:17,030
okay so MySQL 5 6 was the first to

00:15:15,090 --> 00:15:20,160
introduce time-delayed replication and

00:15:17,030 --> 00:15:21,750
basically you can have a replica that is

00:15:20,160 --> 00:15:24,180
you know five minutes delayed two hours

00:15:21,750 --> 00:15:26,220
delayed and no matter what you do you

00:15:24,180 --> 00:15:27,870
can always pointer the replicas being

00:15:26,220 --> 00:15:29,670
delayed can always go back and be a

00:15:27,870 --> 00:15:32,610
master if need be it doesn't you don't

00:15:29,670 --> 00:15:34,860
have to reload data so to speak it is

00:15:32,610 --> 00:15:38,030
implemented at a per slave level as well

00:15:34,860 --> 00:15:41,700
so it holds this diid SQL thread and

00:15:38,030 --> 00:15:44,440
replication delay can be set for a slave

00:15:41,700 --> 00:15:47,230
user to apply replication in

00:15:44,440 --> 00:15:51,850
immediately or other ones applied over a

00:15:47,230 --> 00:15:53,200
certain delay of time now basically if

00:15:51,850 --> 00:15:55,720
you have a deployment error this is a

00:15:53,200 --> 00:15:57,340
great way to work around it but this

00:15:55,720 --> 00:16:00,040
would not have saved couchsurfing

00:15:57,340 --> 00:16:03,850
because the feature didn't exist back

00:16:00,040 --> 00:16:07,180
then that was an open bug reported in

00:16:03,850 --> 00:16:09,160
2006 it took a while before that was a

00:16:07,180 --> 00:16:12,490
work log work log is a way to get

00:16:09,160 --> 00:16:15,550
features into MySQL gets published and

00:16:12,490 --> 00:16:18,040
then it gets the feature got pushed many

00:16:15,550 --> 00:16:20,020
years later and only a much later

00:16:18,040 --> 00:16:22,630
generally available released in February

00:16:20,020 --> 00:16:24,490
2013 in MySQL five six could it get time

00:16:22,630 --> 00:16:26,500
delayed replication and this from what I

00:16:24,490 --> 00:16:29,530
gather is something that many people

00:16:26,500 --> 00:16:31,690
even people in the next room booking

00:16:29,530 --> 00:16:32,980
tend to like to run because when

00:16:31,690 --> 00:16:35,560
developer makes an incorrect push

00:16:32,980 --> 00:16:41,250
everybody does things in a live fashion

00:16:35,560 --> 00:16:41,250
nowadays it's easy to rollback question

00:16:57,930 --> 00:17:02,380
right so the question is how would you

00:17:01,210 --> 00:17:04,569
work around the fact that this is a

00:17:02,380 --> 00:17:07,630
surefire way to guarantee like the last

00:17:04,569 --> 00:17:11,500
30 minutes of data being lost when you

00:17:07,630 --> 00:17:14,470
roll back to say a database that's 30

00:17:11,500 --> 00:17:16,839
minutes delayed and the and the answer

00:17:14,470 --> 00:17:18,040
is quite simple actually nowadays you

00:17:16,839 --> 00:17:21,370
have this feature called global

00:17:18,040 --> 00:17:23,500
transaction IDs and even though that

00:17:21,370 --> 00:17:26,470
last 30 minutes of data may be lost you

00:17:23,500 --> 00:17:30,330
can very quickly replicate the data

00:17:26,470 --> 00:17:33,670
that's missing from a known unknown

00:17:30,330 --> 00:17:35,830
master or known slave actually and this

00:17:33,670 --> 00:17:39,160
partially can happen either via tools

00:17:35,830 --> 00:17:42,130
like MySQL high availability or it can

00:17:39,160 --> 00:17:43,570
happen via just using just executing

00:17:42,130 --> 00:17:46,780
commands and saying you'd like to copy

00:17:43,570 --> 00:17:49,540
data from this bin log position this

00:17:46,780 --> 00:17:52,030
global transaction ID position - this

00:17:49,540 --> 00:17:54,910
one so it's like this GT ID position -

00:17:52,030 --> 00:17:56,860
one so this actually works relatively

00:17:54,910 --> 00:17:58,330
well in terms of catching up so your

00:17:56,860 --> 00:17:59,980
application here

00:17:58,330 --> 00:18:03,039
not be able to see what may have changed

00:17:59,980 --> 00:18:06,760
in the last 30 minutes but it'll catch

00:18:03,039 --> 00:18:09,220
up fairly quickly so you may have out of

00:18:06,760 --> 00:18:12,940
other banned data for that time frame

00:18:09,220 --> 00:18:16,210
only but you will it'll be much less

00:18:12,940 --> 00:18:18,820
painful than having to say do an online

00:18:16,210 --> 00:18:20,830
schema change because the developer made

00:18:18,820 --> 00:18:22,510
a schema change and you know you found

00:18:20,830 --> 00:18:25,840
out 30 minutes later that that was the

00:18:22,510 --> 00:18:28,289
wrong schema change to push and you need

00:18:25,840 --> 00:18:30,580
to actually come back to the old schema

00:18:28,289 --> 00:18:39,309
is that sort of answer your question

00:18:30,580 --> 00:18:41,260
okay oh and since there are at least a

00:18:39,309 --> 00:18:43,330
couple of MariaDB users here in the room

00:18:41,260 --> 00:18:44,950
as well it is worth noting that time

00:18:43,330 --> 00:18:48,730
billet replication while a feature of

00:18:44,950 --> 00:18:52,600
MySQL Sims 5 6 and global transaction

00:18:48,730 --> 00:18:54,279
IDs as well a feature since 5.6 public

00:18:52,600 --> 00:18:57,850
application does not exist in Moorea DB

00:18:54,279 --> 00:19:01,149
server yet it will come in 10.2 but 10.2

00:18:57,850 --> 00:19:02,769
is not G a so if you are using Marini we

00:19:01,149 --> 00:19:07,779
extended what this is a feature is still

00:19:02,769 --> 00:19:12,370
not available to you so why do people

00:19:07,779 --> 00:19:14,350
replicate most most people replicate

00:19:12,370 --> 00:19:17,139
because they want to scale out you won't

00:19:14,350 --> 00:19:19,480
have several masters and have several

00:19:17,139 --> 00:19:21,669
slaves that read off each and every

00:19:19,480 --> 00:19:26,620
master then you can have multiple tiers

00:19:21,669 --> 00:19:28,269
of masters and slaves sometimes you want

00:19:26,620 --> 00:19:31,120
to have failover I mean this has become

00:19:28,269 --> 00:19:34,299
a very common request people want

00:19:31,120 --> 00:19:35,860
failover or out-of-the-box failover and

00:19:34,299 --> 00:19:37,750
they want master failable so when the

00:19:35,860 --> 00:19:39,429
master goes away they'd expect that a

00:19:37,750 --> 00:19:42,490
slay one of the slaves the most cards

00:19:39,429 --> 00:19:44,740
they will become the new master and then

00:19:42,490 --> 00:19:49,809
the other slaves will now replicate off

00:19:44,740 --> 00:19:52,240
the new master and naturally because we

00:19:49,809 --> 00:19:55,080
liked automation in things many people

00:19:52,240 --> 00:20:00,700
want automatic master failover not just

00:19:55,080 --> 00:20:03,159
regular failover a lot of people also

00:20:00,700 --> 00:20:06,940
want geographical redundancy across

00:20:03,159 --> 00:20:10,870
datacenters so a very common issue is

00:20:06,940 --> 00:20:12,130
that today I think I guess Berlin is a

00:20:10,870 --> 00:20:15,070
fairly safe

00:20:12,130 --> 00:20:17,800
location but you know if you had a data

00:20:15,070 --> 00:20:20,470
center in Manhattan occasionally the

00:20:17,800 --> 00:20:21,760
banks of the river burst and you end up

00:20:20,470 --> 00:20:23,620
flooding the data center so that

00:20:21,760 --> 00:20:27,130
happened a couple of years ago if you

00:20:23,620 --> 00:20:28,540
had a data center in New York and from a

00:20:27,130 --> 00:20:31,150
more personal standpoint I don't know

00:20:28,540 --> 00:20:33,760
how many of you go to South Korea but I

00:20:31,150 --> 00:20:36,040
I go there maybe every couple months and

00:20:33,760 --> 00:20:37,630
I like to use an American Express but

00:20:36,040 --> 00:20:39,640
then one day I couldn't swipe my card

00:20:37,630 --> 00:20:42,430
and that was one because it you know it

00:20:39,640 --> 00:20:44,920
got on limit or anything is because the

00:20:42,430 --> 00:20:46,750
data center that handle American Express

00:20:44,920 --> 00:20:52,240
transactions or the Samsung data center

00:20:46,750 --> 00:20:54,220
in New Sun it caught fire so for a whole

00:20:52,240 --> 00:20:58,000
week you could not fly up your Amex in

00:20:54,220 --> 00:21:00,670
South Korea and if you happen to use a

00:20:58,000 --> 00:21:03,010
samsung phone at least for a couple of

00:21:00,670 --> 00:21:04,930
days your s chat I'm guessing never use

00:21:03,010 --> 00:21:07,300
s chat anyway because you know it sort

00:21:04,930 --> 00:21:09,550
of is dead now your ass Chad would stop

00:21:07,300 --> 00:21:12,880
working and if you had a Samsung Smart

00:21:09,550 --> 00:21:15,400
TV your TV on a Sunday night in America

00:21:12,880 --> 00:21:16,570
was pretty dumb because they could not

00:21:15,400 --> 00:21:21,610
connect with the data center all the

00:21:16,570 --> 00:21:25,540
smart TV options were gone so that's an

00:21:21,610 --> 00:21:27,910
example of needing to have redundancy in

00:21:25,540 --> 00:21:31,450
your data centers because maybe they

00:21:27,910 --> 00:21:33,640
catch fire they get flooded and you know

00:21:31,450 --> 00:21:39,490
in today's political climate maybe they

00:21:33,640 --> 00:21:44,620
get bombed who knows anyway the other

00:21:39,490 --> 00:21:46,270
reason why you do replication is because

00:21:44,620 --> 00:21:48,490
you want to make online schema changes

00:21:46,270 --> 00:21:52,180
now if you use something like MySQL five

00:21:48,490 --> 00:21:53,220
six the ability to use tools like github

00:21:52,180 --> 00:21:55,780
ghost

00:21:53,220 --> 00:21:57,430
percona PT online schema change or oak

00:21:55,780 --> 00:22:00,190
online alter is something that you can

00:21:57,430 --> 00:22:02,200
totally do today so you can actually

00:22:00,190 --> 00:22:04,240
make changes to your schema in an online

00:22:02,200 --> 00:22:06,340
fashion and MySQL five seven improves

00:22:04,240 --> 00:22:08,550
this even further by allowing you to

00:22:06,340 --> 00:22:11,650
like resize varchars

00:22:08,550 --> 00:22:13,540
so online DDL is one of those things

00:22:11,650 --> 00:22:17,260
that can cause replication lag naturally

00:22:13,540 --> 00:22:19,360
and many tools use triggers to make

00:22:17,260 --> 00:22:21,760
these online schema changes work with

00:22:19,360 --> 00:22:24,180
the exception of github ghost so if

00:22:21,760 --> 00:22:26,230
you're looking for this tools gah - OST

00:22:24,180 --> 00:22:31,240
github z' online schema -

00:22:26,230 --> 00:22:33,850
one day I'd get up today run magnitude

00:22:31,240 --> 00:22:36,610
of online schema changes on a daily

00:22:33,850 --> 00:22:38,770
basis and it still keeps get up going

00:22:36,610 --> 00:22:42,490
without you ever noticing they made us a

00:22:38,770 --> 00:22:44,559
schema change now a lot of people do

00:22:42,490 --> 00:22:47,049
online schema changes in production so

00:22:44,559 --> 00:22:48,760
if you want to go and read up on this

00:22:47,049 --> 00:22:52,110
you can go look at you know the UK

00:22:48,760 --> 00:22:54,010
government digital service and Wikipedia

00:22:52,110 --> 00:22:55,720
Basecamp 37signals

00:22:54,010 --> 00:22:59,260
huge chunks of people talk about how

00:22:55,720 --> 00:23:01,570
they like to do online schema changes so

00:22:59,260 --> 00:23:04,630
I highly recommend you to take a look at

00:23:01,570 --> 00:23:06,640
all those blog posts basically and of

00:23:04,630 --> 00:23:09,370
course the first people that pushed

00:23:06,640 --> 00:23:11,140
online schema change to become something

00:23:09,370 --> 00:23:14,080
that the public would like to do more

00:23:11,140 --> 00:23:17,410
with Facebook Facebook released the

00:23:14,080 --> 00:23:19,929
online OCS to the online change schema

00:23:17,410 --> 00:23:21,429
tool based on oak online alter and they

00:23:19,929 --> 00:23:24,040
were the ones who started pushing things

00:23:21,429 --> 00:23:26,470
forward and Facebook's tool is also open

00:23:24,040 --> 00:23:28,510
source though like most things that come

00:23:26,470 --> 00:23:29,919
out of Facebook it's open source it may

00:23:28,510 --> 00:23:31,750
be good but it's not supported by

00:23:29,919 --> 00:23:37,390
Facebook so you have to get support by

00:23:31,750 --> 00:23:39,419
yourself or some third party so let's

00:23:37,390 --> 00:23:41,950
talk a little bit about replication the

00:23:39,419 --> 00:23:44,770
default replication in MySQL is

00:23:41,950 --> 00:23:47,470
asynchronous it's extremely fast and it

00:23:44,770 --> 00:23:49,510
just looks that means the master gets a

00:23:47,470 --> 00:23:51,370
transaction it may not have transmitted

00:23:49,510 --> 00:23:54,340
it to the slave but it gives the client

00:23:51,370 --> 00:23:57,640
and okay this can happen in typically 20

00:23:54,340 --> 00:23:59,980
30 milliseconds this is this is why

00:23:57,640 --> 00:24:05,290
replication is easy to set up and is

00:23:59,980 --> 00:24:06,640
super fast however if you want to do

00:24:05,290 --> 00:24:08,350
automated failover

00:24:06,640 --> 00:24:10,960
it is very clear you need something like

00:24:08,350 --> 00:24:13,150
a semi synchronous plugin available and

00:24:10,960 --> 00:24:14,530
you want the lossless semi synchronous

00:24:13,150 --> 00:24:17,650
plug-in because you don't want to have

00:24:14,530 --> 00:24:19,690
phantom reads where the data may get

00:24:17,650 --> 00:24:22,000
lost because of the way it commits to

00:24:19,690 --> 00:24:24,220
the engine but then an application tier

00:24:22,000 --> 00:24:26,080
may have seen it now the announced time

00:24:24,220 --> 00:24:28,780
you sync plug-in is available in MySQL

00:24:26,080 --> 00:24:30,250
five seven and greater so this is

00:24:28,780 --> 00:24:33,250
something that I highly recommend you to

00:24:30,250 --> 00:24:36,580
take a look at using what this means is

00:24:33,250 --> 00:24:39,460
that you have a master that gets a

00:24:36,580 --> 00:24:40,220
transaction and this master must commit

00:24:39,460 --> 00:24:43,909
the transi

00:24:40,220 --> 00:24:46,360
in my ship the logs to at least one

00:24:43,909 --> 00:24:50,090
slave before it sends an okay packet

00:24:46,360 --> 00:24:52,250
back to the client so you will never

00:24:50,090 --> 00:24:55,700
ever be in a situation where you've lost

00:24:52,250 --> 00:24:58,159
a transaction now you couple semi secure

00:24:55,700 --> 00:25:01,309
- replication with an automated failover

00:24:58,159 --> 00:25:03,860
framework and you have you have the

00:25:01,309 --> 00:25:07,630
ability to provide typically less than

00:25:03,860 --> 00:25:10,580
30 seconds automated master failover and

00:25:07,630 --> 00:25:12,770
that could be your SLA because this is

00:25:10,580 --> 00:25:17,299
what people are running in production at

00:25:12,770 --> 00:25:20,720
very very large companies nowadays there

00:25:17,299 --> 00:25:23,210
is also synchronous replication which I

00:25:20,720 --> 00:25:25,159
talked about NDB cluster earlier but

00:25:23,210 --> 00:25:27,559
there's also Galera cluster as well as

00:25:25,159 --> 00:25:30,820
the competing implementation called

00:25:27,559 --> 00:25:33,679
mysql group replication cygnus

00:25:30,820 --> 00:25:36,919
replication suggests that all nodes are

00:25:33,679 --> 00:25:39,049
now equal that means in the case of

00:25:36,919 --> 00:25:41,390
Galera you get a transaction that is

00:25:39,049 --> 00:25:42,640
committed to say node one and when it's

00:25:41,390 --> 00:25:44,600
time to write it to the storage engine

00:25:42,640 --> 00:25:47,090
using optimistic concurrency control

00:25:44,600 --> 00:25:50,030
that node will now write to node 2 and

00:25:47,090 --> 00:25:52,580
node 3 and if there's a problem say with

00:25:50,030 --> 00:25:54,710
a hot row then there is a rollback it's

00:25:52,580 --> 00:25:55,669
sent back to the client as a rollback so

00:25:54,710 --> 00:25:59,870
you need to then change the

00:25:55,669 --> 00:26:01,580
configuration of your might at CNF to

00:25:59,870 --> 00:26:04,909
say you'd like to have something like WS

00:26:01,580 --> 00:26:06,620
retire commit equals say 5 so that it

00:26:04,909 --> 00:26:08,809
retries the auto commits a five times

00:26:06,620 --> 00:26:11,929
before I times out so your application

00:26:08,809 --> 00:26:14,559
needs to change its behavior when you

00:26:11,929 --> 00:26:17,809
deal with synchronous replication

00:26:14,559 --> 00:26:20,360
however by having all modes being equal

00:26:17,809 --> 00:26:23,120
you actually have a very very highly

00:26:20,360 --> 00:26:25,429
available cluster so to speak Galera

00:26:23,120 --> 00:26:28,039
requires a minimum of 3 nodes because it

00:26:25,429 --> 00:26:31,549
makes use of a quorum algorithm so if it

00:26:28,039 --> 00:26:34,610
one node does go away that will be it

00:26:31,549 --> 00:26:36,710
can survive on two nodes but if you only

00:26:34,610 --> 00:26:38,320
had two nodes and you needed a quorum

00:26:36,710 --> 00:26:41,539
elgar than 50-percent does not

00:26:38,320 --> 00:26:43,669
constitute a majority naturally and

00:26:41,539 --> 00:26:46,850
group replication is based on the same

00:26:43,669 --> 00:26:49,010
paper that Galera is based on but it is

00:26:46,850 --> 00:26:51,470
a different implementation it's a much

00:26:49,010 --> 00:26:53,120
newer implementation as well which is

00:26:51,470 --> 00:26:53,720
why more people probably use Galera

00:26:53,120 --> 00:26:56,720
cluster in

00:26:53,720 --> 00:27:01,310
production then they'd then compared to

00:26:56,720 --> 00:27:04,070
group application numbers dr BD which is

00:27:01,310 --> 00:27:06,680
raid over ethernet and it may be popular

00:27:04,070 --> 00:27:10,700
among some folk here as well I'm not

00:27:06,680 --> 00:27:14,320
sure but dr VD was the great way to make

00:27:10,700 --> 00:27:16,970
sure you have a passive master sitting

00:27:14,320 --> 00:27:20,300
at another data center or in the same

00:27:16,970 --> 00:27:23,470
data center and it's a it copies the

00:27:20,300 --> 00:27:26,030
data from a block level across Ethernet

00:27:23,470 --> 00:27:28,040
now it only works at things like in ODB

00:27:26,030 --> 00:27:30,770
and if you're already used something

00:27:28,040 --> 00:27:31,970
like ass and maybe drbg makes sense but

00:27:30,770 --> 00:27:33,530
today with something like semi

00:27:31,970 --> 00:27:35,210
synchronous replication your

00:27:33,530 --> 00:27:36,770
architectures that you start off with

00:27:35,210 --> 00:27:39,340
today probably don't need to make use of

00:27:36,770 --> 00:27:39,340
dr BD

00:27:39,730 --> 00:27:45,530
now i should talk about the frameworks

00:27:42,110 --> 00:27:48,170
that are available as well mmm is a

00:27:45,530 --> 00:27:51,530
framework that allows you to have multi

00:27:48,170 --> 00:27:54,410
master replication it was it's been

00:27:51,530 --> 00:27:57,770
around for over 10 years now possibly

00:27:54,410 --> 00:28:00,710
but when MHA came out the website from

00:27:57,770 --> 00:28:03,190
mms says do not use it so you should

00:28:00,710 --> 00:28:08,060
listen to what the website tells you

00:28:03,190 --> 00:28:09,890
this cluster control which is not

00:28:08,060 --> 00:28:11,570
necessarily open-source but you can get

00:28:09,890 --> 00:28:13,190
started with a four node cluster fairly

00:28:11,570 --> 00:28:13,610
quickly in typically less than five

00:28:13,190 --> 00:28:16,340
minutes

00:28:13,610 --> 00:28:17,950
it handles application of all forms that

00:28:16,340 --> 00:28:21,680
I talked about earlier as well as Galera

00:28:17,950 --> 00:28:23,750
in configure a proxy proxy SQL and so

00:28:21,680 --> 00:28:27,010
forth and it works with like on-prem you

00:28:23,750 --> 00:28:30,350
see two-hybrid etc this Orchestrator

00:28:27,010 --> 00:28:32,960
very very nice to to actually visualize

00:28:30,350 --> 00:28:37,040
your entire MySQL topology does anybody

00:28:32,960 --> 00:28:39,260
here use Orchestrator no well hopefully

00:28:37,040 --> 00:28:42,350
by the end of today you will try and

00:28:39,260 --> 00:28:43,850
install it because Orchestrator is it's

00:28:42,350 --> 00:28:46,130
now get out project as well it

00:28:43,850 --> 00:28:47,960
previously was an out brain project and

00:28:46,130 --> 00:28:49,880
it allows you to visualize your topology

00:28:47,960 --> 00:28:51,670
it also allows you to look at

00:28:49,880 --> 00:28:55,970
long-running queries it allows you to

00:28:51,670 --> 00:28:59,750
move your topology around visually all

00:28:55,970 --> 00:29:02,270
via an API as well and it obviously also

00:28:59,750 --> 00:29:04,280
has a JSON API so that you don't have to

00:29:02,270 --> 00:29:07,670
use a GUI but you know end-users do like

00:29:04,280 --> 00:29:11,270
gooeys as well as MHA

00:29:07,670 --> 00:29:11,870
great - that allows for automatic master

00:29:11,270 --> 00:29:15,500
failover

00:29:11,870 --> 00:29:17,750
so you have you're going to enter your

00:29:15,500 --> 00:29:19,310
masters with you know many slaves

00:29:17,750 --> 00:29:21,650
hanging off of it and this is what

00:29:19,310 --> 00:29:24,440
people like you know DNA and even

00:29:21,650 --> 00:29:28,520
initially even what Facebook built the

00:29:24,440 --> 00:29:32,960
tools on for automatic failover - also

00:29:28,520 --> 00:29:37,250
tungsten replicator which is open source

00:29:32,960 --> 00:29:39,590
fully it also handles failover but it

00:29:37,250 --> 00:29:42,590
doesn't only make use of the MySQL

00:29:39,590 --> 00:29:46,990
binary log so what it does is it takes

00:29:42,590 --> 00:29:49,970
the MySQL bin log converts it to a

00:29:46,990 --> 00:29:51,710
transaction history log a key HL file so

00:29:49,970 --> 00:29:53,810
now it doubles the size of storage as

00:29:51,710 --> 00:29:55,670
well as it's much more chatty on the

00:29:53,810 --> 00:29:58,150
network but it's a solution that

00:29:55,670 --> 00:30:02,260
multiple people do end up using as well

00:29:58,150 --> 00:30:07,700
but it also is also will introduce Java

00:30:02,260 --> 00:30:09,680
to your deployment as well as Ruby so

00:30:07,700 --> 00:30:15,580
this may be an issue for some people to

00:30:09,680 --> 00:30:18,530
install Java on MySQL machine MySQL

00:30:15,580 --> 00:30:20,480
utilities since 5.6 and greater also

00:30:18,530 --> 00:30:22,790
provides MHA like functionality called

00:30:20,480 --> 00:30:25,550
mysql failover as well as replication

00:30:22,790 --> 00:30:28,100
admin these are not very talked about

00:30:25,550 --> 00:30:29,720
very much but they do exist and they can

00:30:28,100 --> 00:30:32,210
be plugged in to work with MySQL

00:30:29,720 --> 00:30:35,300
workbench so you can do stuff either via

00:30:32,210 --> 00:30:36,650
GUI they're all written in Python well

00:30:35,300 --> 00:30:38,510
she's probably was talking about what

00:30:36,650 --> 00:30:40,730
they written in as well so these are all

00:30:38,510 --> 00:30:44,540
written in Python they're possibly also

00:30:40,730 --> 00:30:46,220
extensible MHA is written in Perl it is

00:30:44,540 --> 00:30:47,720
actually probably the most extensible

00:30:46,220 --> 00:30:51,130
and the probably the most widely

00:30:47,720 --> 00:30:55,670
deployed one at the moment as well and

00:30:51,130 --> 00:30:57,880
yeah become a replication manager

00:30:55,670 --> 00:31:00,920
nowadays you find them are already

00:30:57,880 --> 00:31:03,350
standard inside of inside of the

00:31:00,920 --> 00:31:06,500
pacemaker agents so we don't really have

00:31:03,350 --> 00:31:09,170
to do much more for this and then this

00:31:06,500 --> 00:31:12,340
replication manager itself which works

00:31:09,170 --> 00:31:15,230
with Maria DB global transaction IDs and

00:31:12,340 --> 00:31:17,750
MySQL global transaction IDs now this is

00:31:15,230 --> 00:31:19,250
an important distinction because MySQL

00:31:17,750 --> 00:31:21,110
has one set of global transaction IDs

00:31:19,250 --> 00:31:23,690
and Maria DB has another

00:31:21,110 --> 00:31:26,210
that's incompatible with MySQL's what

00:31:23,690 --> 00:31:29,090
this means is if you want GTI debased

00:31:26,210 --> 00:31:31,460
failover with Maria DB your only choice

00:31:29,090 --> 00:31:34,280
is replication manager but if you want

00:31:31,460 --> 00:31:36,530
GTI debased failover with MySQL or

00:31:34,280 --> 00:31:39,559
Percona server you can use MHA or

00:31:36,530 --> 00:31:41,630
application manager now why is this

00:31:39,559 --> 00:31:44,240
important it's important because the

00:31:41,630 --> 00:31:46,040
replication packet and even what is

00:31:44,240 --> 00:31:48,110
thought up on the binary logs actually

00:31:46,040 --> 00:31:51,200
differ in Maria DB compared to stock

00:31:48,110 --> 00:31:53,780
MySQL so even if you try to get a MySQL

00:31:51,200 --> 00:31:56,240
bin log from Maria DB to read MySQL

00:31:53,780 --> 00:31:57,890
MySQL bin log it will actually not work

00:31:56,240 --> 00:32:00,260
and this is a very common problem that

00:31:57,890 --> 00:32:02,720
people face when they deploy because you

00:32:00,260 --> 00:32:05,360
may have pulled MySQL client utilities

00:32:02,720 --> 00:32:06,410
from one repository and you may have

00:32:05,360 --> 00:32:08,540
pulled the server from another

00:32:06,410 --> 00:32:11,480
repository and it turns out that the

00:32:08,540 --> 00:32:14,750
sort of thing just doesn't work now

00:32:11,480 --> 00:32:18,080
there there is a very good case study

00:32:14,750 --> 00:32:19,940
about how people can grow from solutions

00:32:18,080 --> 00:32:22,130
like they start with MySQL failover then

00:32:19,940 --> 00:32:26,150
they may be moved to MHA and so forth

00:32:22,130 --> 00:32:27,799
and you know if you google Nilus and yla

00:32:26,150 --> 00:32:29,270
as they make this webmail software

00:32:27,799 --> 00:32:32,950
they'd actually wrote a wonderful case

00:32:29,270 --> 00:32:40,250
study about how they they grew with

00:32:32,950 --> 00:32:46,760
frameworks basically so github September

00:32:40,250 --> 00:32:48,370
2012 was replacing dr BD with a corner

00:32:46,760 --> 00:32:51,110
application manager and a pacemaker

00:32:48,370 --> 00:32:52,540
resource agent they wanted to have more

00:32:51,110 --> 00:32:55,910
efficient failovers

00:32:52,540 --> 00:32:58,070
they didn't want the diabetes cold start

00:32:55,910 --> 00:33:01,940
and no one at that point unlike the call

00:32:58,070 --> 00:33:04,220
buffer pool so in DB fake changes that's

00:33:01,940 --> 00:33:05,660
available inside of extra DB that you

00:33:04,220 --> 00:33:08,990
get in Percona server as well as Murray

00:33:05,660 --> 00:33:11,870
DB server was the way to do this it'll

00:33:08,990 --> 00:33:15,740
actually replay statements from the log

00:33:11,870 --> 00:33:17,240
and then revert them upon commit time so

00:33:15,740 --> 00:33:20,000
you actually get a rollback so this just

00:33:17,240 --> 00:33:22,010
warms up the buffer pool and the idea

00:33:20,000 --> 00:33:26,270
behind this is also known as replication

00:33:22,010 --> 00:33:28,610
prefetching so today with mysql five

00:33:26,270 --> 00:33:29,870
seven you don't need any DB fake changes

00:33:28,610 --> 00:33:32,210
you can use interest kheema power

00:33:29,870 --> 00:33:33,470
application for this purpose to actually

00:33:32,210 --> 00:33:37,850
warm up

00:33:33,470 --> 00:33:40,490
your data anyhow they were starting to

00:33:37,850 --> 00:33:42,919
see poor performance and then they were

00:33:40,490 --> 00:33:44,360
getting high load and because of poor

00:33:42,919 --> 00:33:46,730
performance and load they were actually

00:33:44,360 --> 00:33:48,049
get failing health checks and these

00:33:46,730 --> 00:33:48,620
failing health checks will trigger a

00:33:48,049 --> 00:33:51,230
failover

00:33:48,620 --> 00:33:54,200
so what get up was going through was a

00:33:51,230 --> 00:33:56,870
status of failures triggering failures

00:33:54,200 --> 00:34:02,840
this is this is not an optimal thing to

00:33:56,870 --> 00:34:04,429
do of course something that no one could

00:34:02,840 --> 00:34:08,629
have predicted pacemaker itself would

00:34:04,429 --> 00:34:10,460
seg fault so get up and because they

00:34:08,629 --> 00:34:13,669
don't didn't only use MySQL

00:34:10,460 --> 00:34:15,320
they also used things like Redis there

00:34:13,669 --> 00:34:17,119
would be data drift between Redis as

00:34:15,320 --> 00:34:19,070
well as as MySQL at this point in time

00:34:17,119 --> 00:34:21,560
and radius was there to query the

00:34:19,070 --> 00:34:27,369
dashboard stream of events but you see

00:34:21,560 --> 00:34:30,409
inside a github so for github in 2012

00:34:27,369 --> 00:34:32,210
automated failover was the root cause of

00:34:30,409 --> 00:34:36,169
both the downtime events that took it up

00:34:32,210 --> 00:34:39,080
offline for possibly nearly a day but

00:34:36,169 --> 00:34:41,510
this is 2012 a lot has changed and this

00:34:39,080 --> 00:34:44,210
is a very good report that one could

00:34:41,510 --> 00:34:45,710
read because many people think about

00:34:44,210 --> 00:34:47,839
automated failure within deploying

00:34:45,710 --> 00:34:50,119
automated failures but they don't think

00:34:47,839 --> 00:34:52,179
about what happens when they have too

00:34:50,119 --> 00:34:55,399
many automated available is for example

00:34:52,179 --> 00:34:58,369
so is fully automated failover a good

00:34:55,399 --> 00:35:01,070
idea because keep in mind that a false

00:34:58,369 --> 00:35:02,390
alarm will cause short down times and

00:35:01,070 --> 00:35:05,150
also restart all the right connections

00:35:02,390 --> 00:35:08,660
this is not something that people enjoy

00:35:05,150 --> 00:35:10,910
doing repeated failover was something

00:35:08,660 --> 00:35:13,550
that pacemaker and PRM never thought

00:35:10,910 --> 00:35:16,609
about which is which is something that

00:35:13,550 --> 00:35:18,440
MHA did think about and MHA never

00:35:16,609 --> 00:35:20,180
allowed a failover to happen if a

00:35:18,440 --> 00:35:22,790
failover had occurred in the last eight

00:35:20,180 --> 00:35:25,940
hours cause MHA keeps logs when a

00:35:22,790 --> 00:35:27,800
failover happened now why why would this

00:35:25,940 --> 00:35:29,780
make sense this could be because you had

00:35:27,800 --> 00:35:33,380
an overloaded master or you having

00:35:29,780 --> 00:35:35,450
repeated triggered failovers so the only

00:35:33,380 --> 00:35:39,040
way for you just to get MHA to operate

00:35:35,450 --> 00:35:41,330
in an in a way that would not be

00:35:39,040 --> 00:35:43,369
consistent with what i would recommend

00:35:41,330 --> 00:35:46,830
would be to set the last failover min

00:35:43,369 --> 00:35:49,470
equals n where n could be say 60

00:35:46,830 --> 00:35:52,830
at which point MHA will then perform a

00:35:49,470 --> 00:35:54,200
failover if it performed one even more

00:35:52,830 --> 00:35:58,320
than an hour ago

00:35:54,200 --> 00:36:01,050
now data loss is a common problem now

00:35:58,320 --> 00:36:04,230
what happens if you only have data in

00:36:01,050 --> 00:36:09,480
the binary log and you've lost say two

00:36:04,230 --> 00:36:12,210
bits of data the only work around here

00:36:09,480 --> 00:36:17,700
is of course to use semi synchronous

00:36:12,210 --> 00:36:20,880
replication also only recent versions of

00:36:17,700 --> 00:36:23,280
MySQL so that's my scale five six and an

00:36:20,880 --> 00:36:24,810
N Maria DB 5 5 and greater have group

00:36:23,280 --> 00:36:26,850
commute in the binary log so you can

00:36:24,810 --> 00:36:28,620
finally turn sigmund log equals one a

00:36:26,850 --> 00:36:31,620
and you need to be flush agha

00:36:28,620 --> 00:36:35,250
transaction commit equals one and this

00:36:31,620 --> 00:36:37,170
this can mean that every time you have a

00:36:35,250 --> 00:36:38,970
few transactions it will actually call

00:36:37,170 --> 00:36:41,760
an F sync when it's time to write to

00:36:38,970 --> 00:36:44,910
disk so the only caveat is you have

00:36:41,760 --> 00:36:46,350
either killed the mysqld server and then

00:36:44,910 --> 00:36:48,330
you add these transactions didn't get

00:36:46,350 --> 00:36:51,030
written to disk which is which is a

00:36:48,330 --> 00:36:53,880
bonus or you have lost powers of the

00:36:51,030 --> 00:36:57,090
machine also again transactions didn't

00:36:53,880 --> 00:37:00,300
get written to disk now split-brain is

00:36:57,090 --> 00:37:02,670
some probably ones avoid power off can

00:37:00,300 --> 00:37:04,830
take a fairly long time and power off

00:37:02,670 --> 00:37:06,360
varies so MHA suggests that you actually

00:37:04,830 --> 00:37:08,970
start writing

00:37:06,360 --> 00:37:11,340
wrappers around this so either it be to

00:37:08,970 --> 00:37:14,060
telnet or if you use the cloud there

00:37:11,340 --> 00:37:18,060
various ways to shut it down as well

00:37:14,060 --> 00:37:19,560
however a lot has changed and now with

00:37:18,060 --> 00:37:21,170
as I said earlier with semi-circular

00:37:19,560 --> 00:37:24,420
application and an automated fail

00:37:21,170 --> 00:37:28,170
failover framework you really can have a

00:37:24,420 --> 00:37:31,260
20 second SLA and you and this can be

00:37:28,170 --> 00:37:37,440
deployed in production with no rhyme or

00:37:31,260 --> 00:37:41,100
worry we have proxies in the MySQL where

00:37:37,440 --> 00:37:44,850
we have so many proxies we have max

00:37:41,100 --> 00:37:47,250
scale proxies are there to assist with

00:37:44,850 --> 00:37:49,440
shouting and the idea behind max hill is

00:37:47,250 --> 00:37:51,240
that it would be a pluggable router you

00:37:49,440 --> 00:37:53,550
can use it for logging you can use it to

00:37:51,240 --> 00:37:55,380
write to other database backends you

00:37:53,550 --> 00:38:00,810
could prevent sequel injections because

00:37:55,380 --> 00:38:03,060
it has a positive expression to match

00:38:00,810 --> 00:38:05,550
based on what it gets in the SQL puzzle

00:38:03,060 --> 00:38:08,100
you can route teams and so forth now max

00:38:05,550 --> 00:38:10,830
scale most popular use case is to load

00:38:08,100 --> 00:38:15,390
balanced Galera clusters max scale

00:38:10,830 --> 00:38:17,730
before version 1.4 is a great use of is

00:38:15,390 --> 00:38:19,950
great for you to use because it is gplv2

00:38:17,730 --> 00:38:23,580
licensed you can do whatever you want

00:38:19,950 --> 00:38:26,160
with it but max scale post version 2.0

00:38:23,580 --> 00:38:28,260
as this new license called the business

00:38:26,160 --> 00:38:29,610
source license which which suggests that

00:38:28,260 --> 00:38:33,660
if you are trying to use it for any

00:38:29,610 --> 00:38:35,760
purpose for more than four more than

00:38:33,660 --> 00:38:37,680
three servers you actually have to pay a

00:38:35,760 --> 00:38:39,780
license fee for this so while you can

00:38:37,680 --> 00:38:41,670
look at the source code get it straight

00:38:39,780 --> 00:38:43,530
from github you'll actually have to read

00:38:41,670 --> 00:38:48,660
the license file to know that this is

00:38:43,530 --> 00:38:51,740
not GPL software this is naturally not

00:38:48,660 --> 00:38:54,750
my recommendation going forward

00:38:51,740 --> 00:38:57,720
there's also mysql router that works

00:38:54,750 --> 00:38:59,910
alongside fabric which is something that

00:38:57,720 --> 00:39:02,700
Oracle MySQL has been developing its

00:38:59,910 --> 00:39:04,950
fully GPL v2 as well and it's a

00:39:02,700 --> 00:39:07,560
framework to manage your farms high

00:39:04,950 --> 00:39:11,040
availability farms and and also will

00:39:07,560 --> 00:39:12,630
have built-in shouting capabilities some

00:39:11,040 --> 00:39:14,400
mysql connectors also have load

00:39:12,630 --> 00:39:16,950
balancing built in like the java

00:39:14,400 --> 00:39:22,650
connector the PHP connector and so forth

00:39:16,950 --> 00:39:24,690
and then this proxy SQL where you can

00:39:22,650 --> 00:39:27,300
use it alongside Galera clusters just

00:39:24,690 --> 00:39:30,660
like max scale or you could use it in

00:39:27,300 --> 00:39:33,510
front of your application here and

00:39:30,660 --> 00:39:36,210
multiple replicas behind of it as well

00:39:33,510 --> 00:39:38,340
now it supports persistent connections

00:39:36,210 --> 00:39:41,120
query caching so the query caching is

00:39:38,340 --> 00:39:44,400
very important it actually means that it

00:39:41,120 --> 00:39:47,910
outperforms max scale and which only

00:39:44,400 --> 00:39:51,710
Maxwell fixes in 2.1 and again we see

00:39:47,910 --> 00:39:55,680
nilus as a typical user of of this proxy

00:39:51,710 --> 00:39:58,200
it is also included with percona X DB

00:39:55,680 --> 00:40:00,510
cluster five seven so if you download

00:39:58,200 --> 00:40:03,990
per connects DB to astra five seven and

00:40:00,510 --> 00:40:05,880
you choose to use Galera cluster

00:40:03,990 --> 00:40:07,530
naturally it will also come with the

00:40:05,880 --> 00:40:09,210
proxy SQL admin tool and the

00:40:07,530 --> 00:40:11,490
out-of-the-box experience is meant to be

00:40:09,210 --> 00:40:14,400
so much nicer for you when you having to

00:40:11,490 --> 00:40:19,720
pull down multiple packages and

00:40:14,400 --> 00:40:21,810
work stuff yourself now I'm going to

00:40:19,720 --> 00:40:24,850
talk to you a little bit about shouting

00:40:21,810 --> 00:40:27,070
this is one of the one of my favorite

00:40:24,850 --> 00:40:29,380
fruits that you get in Malaysia it's the

00:40:27,070 --> 00:40:32,530
king of fruits and it also looks kind of

00:40:29,380 --> 00:40:34,480
shotted now you may not like the fruit

00:40:32,530 --> 00:40:35,080
that I suggest you try it if you get the

00:40:34,480 --> 00:40:39,430
chance to

00:40:35,080 --> 00:40:41,500
it is a durian so the idea behind

00:40:39,430 --> 00:40:43,870
sharding is that not all data lives in

00:40:41,500 --> 00:40:46,030
one place you hash records two

00:40:43,870 --> 00:40:47,920
partitions and you can either partition

00:40:46,030 --> 00:40:50,890
things either alphabetically or you put

00:40:47,920 --> 00:40:53,560
end users ploshad typically people put

00:40:50,890 --> 00:40:56,290
end users by Shaad and then when a user

00:40:53,560 --> 00:40:57,580
grows out of that shard then you have to

00:40:56,290 --> 00:41:01,090
rebalance the shard

00:40:57,580 --> 00:41:03,180
so sharding is actually easy it is the

00:41:01,090 --> 00:41:05,380
rebalancing of the shards and

00:41:03,180 --> 00:41:07,900
reallocating resources in case a shot

00:41:05,380 --> 00:41:10,380
goes down that is actually hard the

00:41:07,900 --> 00:41:13,210
recharging of sharding is the hard part

00:41:10,380 --> 00:41:18,040
the regularly splitting of shots is the

00:41:13,210 --> 00:41:20,410
hard part so how do you do this there is

00:41:18,040 --> 00:41:24,010
a storage engine called spider will help

00:41:20,410 --> 00:41:27,310
you with shouting spider basically does

00:41:24,010 --> 00:41:30,430
shouting via SQL you can have multiple

00:41:27,310 --> 00:41:33,340
MySQL in ODB backends and you can have

00:41:30,430 --> 00:41:35,440
one node or several nodes that manage

00:41:33,340 --> 00:41:39,010
all those backends but treat all the

00:41:35,440 --> 00:41:40,810
data like it is one but typically the

00:41:39,010 --> 00:41:42,850
reason why you would like to put end

00:41:40,810 --> 00:41:45,430
users per shard is because you would

00:41:42,850 --> 00:41:48,280
never like to do across shard join

00:41:45,430 --> 00:41:51,910
because that would be notoriously slow

00:41:48,280 --> 00:41:54,850
no matter what we do so even with NDB

00:41:51,910 --> 00:41:58,690
cluster where every every bit of data is

00:41:54,850 --> 00:42:00,490
shot at across multiple data nodes you

00:41:58,690 --> 00:42:02,530
and we have things like the adaptive

00:42:00,490 --> 00:42:05,140
query language and condition push down

00:42:02,530 --> 00:42:07,500
you never really want to shot across

00:42:05,140 --> 00:42:09,940
data nodes

00:42:07,500 --> 00:42:13,360
there's also tungsten replicator which

00:42:09,940 --> 00:42:15,910
as I said before handles sharding fairly

00:42:13,360 --> 00:42:17,650
seamlessly it makes use of a jmx beam

00:42:15,910 --> 00:42:20,830
and it also obviously still mixes the

00:42:17,650 --> 00:42:23,070
THL this is not something that you know

00:42:20,830 --> 00:42:25,710
you probably want to use so much today

00:42:23,070 --> 00:42:28,030
then there's also jet pans

00:42:25,710 --> 00:42:31,930
Japan's is written in

00:42:28,030 --> 00:42:33,970
we it is used to power tumblr the famous

00:42:31,930 --> 00:42:37,600
web blogging platform that Yahoo now

00:42:33,970 --> 00:42:40,060
owns you can clone replicas you can

00:42:37,600 --> 00:42:42,370
rebalance shots so the rebalancing

00:42:40,060 --> 00:42:44,860
portion is very important if you ask me

00:42:42,370 --> 00:42:47,350
you can do promotions of masters

00:42:44,860 --> 00:42:49,660
it handles obviously range based

00:42:47,350 --> 00:42:52,180
shouting and it makes use for

00:42:49,660 --> 00:42:54,370
rebalancing and creating a new shard

00:42:52,180 --> 00:42:55,930
makes use of something known as multi

00:42:54,370 --> 00:42:59,500
sauce replication that's available

00:42:55,930 --> 00:43:03,040
inside of MySQL five seven or Maria DB

00:42:59,500 --> 00:43:04,680
10.0 and greater multi social

00:43:03,040 --> 00:43:07,390
application basically means you have

00:43:04,680 --> 00:43:08,560
multiple masters writing to a single

00:43:07,390 --> 00:43:12,340
slave and this is a great way to

00:43:08,560 --> 00:43:14,400
provision a new shot and you can do this

00:43:12,340 --> 00:43:19,870
in a parallel fashion so that the

00:43:14,400 --> 00:43:25,180
provisioning is actually fast though one

00:43:19,870 --> 00:43:27,720
of the cool proxies sharding frameworks

00:43:25,180 --> 00:43:31,600
etc that is available today is the tests

00:43:27,720 --> 00:43:33,930
we test is written by the nice folks at

00:43:31,600 --> 00:43:36,130
Google who work on the YouTube team and

00:43:33,930 --> 00:43:38,560
if you have watched a YouTube video

00:43:36,130 --> 00:43:42,220
today or this week you have been served

00:43:38,560 --> 00:43:45,940
by Vitesse you've been served by HS for

00:43:42,220 --> 00:43:49,810
several years now and it is meant for

00:43:45,940 --> 00:43:53,200
you to scale mysql to serve at YouTube

00:43:49,810 --> 00:43:56,740
scale basically for one every MySQL

00:43:53,200 --> 00:43:59,050
connection requires 256 kilobytes of RAM

00:43:56,740 --> 00:44:02,110
to open up that thread and you can use

00:43:59,050 --> 00:44:03,880
up to 3 megabytes of RAM we test doesn't

00:44:02,110 --> 00:44:06,220
open up it opens up one thread per

00:44:03,880 --> 00:44:09,190
connection but it makes use of beasts on

00:44:06,220 --> 00:44:11,890
and it has its own beasts on connection

00:44:09,190 --> 00:44:14,260
protocol that means every connection

00:44:11,890 --> 00:44:18,010
that you open is predictable because it

00:44:14,260 --> 00:44:19,330
is just 32 kilobytes in size so that's

00:44:18,010 --> 00:44:21,610
all the rabbits going to use so you now

00:44:19,330 --> 00:44:23,920
have a predictable workload fairly

00:44:21,610 --> 00:44:26,140
important when you're doing capacity

00:44:23,920 --> 00:44:29,200
planning connection pooling is handled

00:44:26,140 --> 00:44:32,110
in go we test of course rewrites sequel

00:44:29,200 --> 00:44:36,490
queries so if you find a clause like

00:44:32,110 --> 00:44:38,230
select star from rooms with no limit we

00:44:36,490 --> 00:44:40,720
test will actually stop that query and

00:44:38,230 --> 00:44:41,590
add a limit clause next to it so it will

00:44:40,720 --> 00:44:45,700
just do

00:44:41,590 --> 00:44:47,830
star from rooms with 10 you can set this

00:44:45,700 --> 00:44:50,350
automatically the test rewrites queries

00:44:47,830 --> 00:44:51,670
for you so your developer will get the

00:44:50,350 --> 00:44:55,810
queries back but will get a very

00:44:51,670 --> 00:44:58,330
truncated data set it of course does

00:44:55,810 --> 00:45:02,770
range based sharding again and it is

00:44:58,330 --> 00:45:04,270
backed by a CD or zookeeper so that your

00:45:02,770 --> 00:45:07,540
cost of view is always kept up to date

00:45:04,270 --> 00:45:09,370
and it is also a proxy for query routing

00:45:07,540 --> 00:45:12,100
now if you don't want to set it all up

00:45:09,370 --> 00:45:16,210
and I'm sure most of you will probably

00:45:12,100 --> 00:45:17,920
want to set it up if you hand over your

00:45:16,210 --> 00:45:20,290
credit card details on this website we

00:45:17,920 --> 00:45:22,570
tested i/o in typically less than five

00:45:20,290 --> 00:45:25,840
minutes without of kubernetes you would

00:45:22,570 --> 00:45:29,560
have launched with as production-ready

00:45:25,840 --> 00:45:32,560
Vitesse instance this is a great way to

00:45:29,560 --> 00:45:34,690
get started but I guess at scale you

00:45:32,560 --> 00:45:36,240
probably want to run this yourself the

00:45:34,690 --> 00:45:39,550
good news is that great documentation

00:45:36,240 --> 00:45:43,330
there is a very active mailing list and

00:45:39,550 --> 00:45:50,290
a wonderful yet another slack channel to

00:45:43,330 --> 00:45:55,630
join so in the past we've seen many

00:45:50,290 --> 00:45:58,690
fails how many of you use Twitter not as

00:45:55,630 --> 00:46:00,640
many as I thought Twitter as basically

00:45:58,690 --> 00:46:02,500
you know they started with MySQL and

00:46:00,640 --> 00:46:05,170
they still on MySQL but if you evolve

00:46:02,500 --> 00:46:06,190
with things like gizzard and a whole

00:46:05,170 --> 00:46:08,320
bunch of other things that are now dead

00:46:06,190 --> 00:46:11,680
but the one thing that has survived is

00:46:08,320 --> 00:46:13,900
Apache cousin which is part of missiles

00:46:11,680 --> 00:46:16,630
which allows you to manage your MySQL

00:46:13,900 --> 00:46:20,650
infrastructure we've also seen companies

00:46:16,630 --> 00:46:22,000
like Digg start with MySQL then migrate

00:46:20,650 --> 00:46:24,280
to something like Cassandra because they

00:46:22,000 --> 00:46:26,020
say MySQL can't scale but then

00:46:24,280 --> 00:46:28,410
eventually they come back to MySQL after

00:46:26,020 --> 00:46:32,200
having lost all their users to read it

00:46:28,410 --> 00:46:33,670
so and and that and if you look at

00:46:32,200 --> 00:46:35,950
history you'll actually see that there

00:46:33,670 --> 00:46:37,870
that was a DBA who would write blog

00:46:35,950 --> 00:46:39,640
posts about why they were migrating and

00:46:37,870 --> 00:46:43,150
if you look carefully they just didn't

00:46:39,640 --> 00:46:44,560
do indexes very well of course all this

00:46:43,150 --> 00:46:47,680
is now something you have to look at web

00:46:44,560 --> 00:46:49,240
that archives at all but sometimes there

00:46:47,680 --> 00:46:50,770
is no reason to migrate from something

00:46:49,240 --> 00:46:52,600
that is working well or if you think

00:46:50,770 --> 00:46:55,299
he's not working well enough maybe you

00:46:52,600 --> 00:46:57,640
just need to knock on the doors of some

00:46:55,299 --> 00:46:59,439
experts or to bombs the idea of someone

00:46:57,640 --> 00:47:01,799
in a bar and say oh this is what I'm

00:46:59,439 --> 00:47:01,799
doing wrong

00:47:02,159 --> 00:47:10,299
security is the third part of what I

00:47:06,159 --> 00:47:14,289
talked about last year Philippines had a

00:47:10,299 --> 00:47:16,179
vote of data hack they have email

00:47:14,289 --> 00:47:20,199
addresses passport numbers and so forth

00:47:16,179 --> 00:47:22,239
in a 338 gigabyte MySQL dump and 55

00:47:20,199 --> 00:47:25,299
million Filipinos out of some 80 million

00:47:22,239 --> 00:47:27,189
Filipinos have their voter data leak now

00:47:25,299 --> 00:47:29,799
having access to email address passport

00:47:27,189 --> 00:47:34,659
numbers etc if you look at the schema

00:47:29,799 --> 00:47:37,239
you realize that you could in theory go

00:47:34,659 --> 00:47:39,640
there and get a loan in a in a in

00:47:37,239 --> 00:47:43,029
someone in the overseas filipino workers

00:47:39,640 --> 00:47:46,199
name if you have well to the you know

00:47:43,029 --> 00:47:48,489
bank colleague without verifying the

00:47:46,199 --> 00:47:50,229
signature because they can also

00:47:48,489 --> 00:47:54,269
occasionally verify by a thumbprint

00:47:50,229 --> 00:47:56,949
which happens to be in this dump this is

00:47:54,269 --> 00:48:06,179
really sad because you can't change your

00:47:56,949 --> 00:48:06,179
thumbprint pardon what Oh

00:48:10,550 --> 00:48:15,810
yes I guess with much difficulty but for

00:48:13,710 --> 00:48:20,130
55 million people to start cutting

00:48:15,810 --> 00:48:22,560
themselves not a good idea actually

00:48:20,130 --> 00:48:26,010
Madison something that maybe is more

00:48:22,560 --> 00:48:27,420
close to to home much easier data set

00:48:26,010 --> 00:48:31,080
for you to look at anyway I mean third

00:48:27,420 --> 00:48:32,370
video gigabytes MySQL dump is huge but

00:48:31,080 --> 00:48:34,410
if you look at this this is just a

00:48:32,370 --> 00:48:36,420
compressed dump 27 gigs you can get it

00:48:34,410 --> 00:48:37,800
fairly easily I took a look at the data

00:48:36,420 --> 00:48:39,270
in fact if you ever wanted to build

00:48:37,800 --> 00:48:40,950
Ashley Madison it smell easy because

00:48:39,270 --> 00:48:44,250
it's got everything including the the

00:48:40,950 --> 00:48:45,930
PHP files here you have you know things

00:48:44,250 --> 00:48:47,550
like names street addresses email

00:48:45,930 --> 00:48:49,560
addresses phone numbers credit card

00:48:47,550 --> 00:48:52,350
details which most likely all don't work

00:48:49,560 --> 00:48:55,440
anywhere but you have over 33 million

00:48:52,350 --> 00:48:57,690
accounts here and it gives you a fairly

00:48:55,440 --> 00:49:00,930
good understanding of how you do on a

00:48:57,690 --> 00:49:03,450
site like this now this I mean this

00:49:00,930 --> 00:49:05,310
website is is not good right it so if

00:49:03,450 --> 00:49:10,260
you you know you found yourself here

00:49:05,310 --> 00:49:12,270
this is just just bad anyway back beyond

00:49:10,260 --> 00:49:14,670
I mean this one this one I personally

00:49:12,270 --> 00:49:16,920
use as well because sometimes you want

00:49:14,670 --> 00:49:19,710
to reward people who write articles or

00:49:16,920 --> 00:49:21,150
make music and you actually give them

00:49:19,710 --> 00:49:23,730
your credit card details and your name

00:49:21,150 --> 00:49:25,440
and it turns out that my details were

00:49:23,730 --> 00:49:28,170
also leaked in this study for seven gigs

00:49:25,440 --> 00:49:29,760
MySQL dump which you can also get so

00:49:28,170 --> 00:49:31,470
basically a lot of people who are kind

00:49:29,760 --> 00:49:33,480
to creators in the open source world

00:49:31,470 --> 00:49:37,050
would end up having to get new credit

00:49:33,480 --> 00:49:41,610
cards very inconvenient and of course

00:49:37,050 --> 00:49:43,860
the most famous Panama papers this one

00:49:41,610 --> 00:49:48,960
is a very unmanageable dump because it's

00:49:43,860 --> 00:49:52,800
2.6 terabytes in size they ran WordPress

00:49:48,960 --> 00:49:56,100
Drupal etc and thankfully they were not

00:49:52,800 --> 00:49:58,290
running MySQL they ran Oracle they

00:49:56,100 --> 00:50:01,280
hacked WordPress and Drupal to make it

00:49:58,290 --> 00:50:05,340
run well WordPress especially to run on

00:50:01,280 --> 00:50:07,290
Oracle a lot of these people with the

00:50:05,340 --> 00:50:10,740
exception of possibly Ashley Madison

00:50:07,290 --> 00:50:15,030
I actually got got in most likely via

00:50:10,740 --> 00:50:16,950
secure injections now they are ways to

00:50:15,030 --> 00:50:18,450
prevent sequel injections nowadays and

00:50:16,950 --> 00:50:20,850
all those proxies I talked about earlier

00:50:18,450 --> 00:50:22,599
can actually do that for you Mac scale

00:50:20,850 --> 00:50:24,460
can provide you

00:50:22,599 --> 00:50:29,109
opportunity to have a proxy in front of

00:50:24,460 --> 00:50:31,359
all of your MySQL servers so it will

00:50:29,109 --> 00:50:35,769
actually look at the query and you can

00:50:31,359 --> 00:50:38,680
block or ignore it's quite reasonable to

00:50:35,769 --> 00:50:40,420
use it's called a DB firewall filter and

00:50:38,680 --> 00:50:44,229
it will actually work with both Mexica

00:50:40,420 --> 00:50:46,720
1.4 and before as well as 2.0 there's

00:50:44,229 --> 00:50:48,309
the MySQL Enterprise Firewall which I'm

00:50:46,720 --> 00:50:50,769
not going to talk much about because you

00:50:48,309 --> 00:50:52,299
have to pay money for this but I include

00:50:50,769 --> 00:50:55,329
this here for completeness and there is

00:50:52,299 --> 00:50:57,369
also proxy SQL which allows you to

00:50:55,329 --> 00:51:00,940
prevent SQL injections out of the box

00:50:57,369 --> 00:51:02,410
and also also do what the test does when

00:51:00,940 --> 00:51:03,999
it looks at a select query without a

00:51:02,410 --> 00:51:06,339
where clause they can you know tack on a

00:51:03,999 --> 00:51:08,170
limit clause for example so a proxy SQL

00:51:06,339 --> 00:51:10,180
can be the gatekeeper now in terms of

00:51:08,170 --> 00:51:13,119
performance number this proxy SQL Way

00:51:10,180 --> 00:51:14,470
outperforms Mac scale-like way out

00:51:13,119 --> 00:51:17,859
performance and you want to have a proxy

00:51:14,470 --> 00:51:19,329
that does not hold you back your proxy

00:51:17,859 --> 00:51:23,099
should be not much worse than having

00:51:19,329 --> 00:51:27,069
direct connections to database care and

00:51:23,099 --> 00:51:28,809
MySQL since 5/7 also has a pre pass

00:51:27,069 --> 00:51:30,880
option which allows you to actually look

00:51:28,809 --> 00:51:32,950
at queries from the server side if you

00:51:30,880 --> 00:51:34,690
didn't want to run a proxy you could

00:51:32,950 --> 00:51:37,890
actually write pre pause scripts if

00:51:34,690 --> 00:51:37,890
needed if need be

00:51:38,130 --> 00:51:43,029
now encryption is also quite an

00:51:40,479 --> 00:51:44,829
important thing to do many people think

00:51:43,029 --> 00:51:47,529
about encryption from multiple stand

00:51:44,829 --> 00:51:49,269
points people always ask for when when

00:51:47,529 --> 00:51:50,440
MySQL never had encryption people said

00:51:49,269 --> 00:51:52,450
oh we just need some kind of encryption

00:51:50,440 --> 00:51:54,670
when MySQL finally gets some kind of

00:51:52,450 --> 00:51:58,089
encryption they say actually we want

00:51:54,670 --> 00:51:59,440
column level encryption which we which

00:51:58,089 --> 00:52:00,999
which we think at the moment is better

00:51:59,440 --> 00:52:04,150
to actually keep inside of your

00:52:00,999 --> 00:52:06,819
application then people think about

00:52:04,150 --> 00:52:09,219
system level encryption where direct

00:52:06,819 --> 00:52:11,739
access MySQL is no longer possible this

00:52:09,219 --> 00:52:14,079
is not not necessarily a good thing then

00:52:11,739 --> 00:52:17,109
some people try column level encryption

00:52:14,079 --> 00:52:20,200
via middleware things like crypt DB or

00:52:17,109 --> 00:52:21,609
my diamo but they're flaky and they only

00:52:20,200 --> 00:52:23,469
work with you know certain versions of

00:52:21,609 --> 00:52:24,700
MySQL they have to be recompiled when

00:52:23,469 --> 00:52:27,009
you release just come out and so forth

00:52:24,700 --> 00:52:29,410
and then some people think why don't we

00:52:27,009 --> 00:52:31,749
just run DM crypt and have full file

00:52:29,410 --> 00:52:34,450
system encryption as well but there is

00:52:31,749 --> 00:52:36,140
CPU overhead on this it every time you

00:52:34,450 --> 00:52:38,930
retrieve a page from the buffer pool

00:52:36,140 --> 00:52:41,180
it has to decrypt same with logs there's

00:52:38,930 --> 00:52:46,040
actually affects performance way more

00:52:41,180 --> 00:52:48,230
not having native encryption so the idea

00:52:46,040 --> 00:52:49,550
behind encryption inside of MySQL is to

00:52:48,230 --> 00:52:52,160
make drive-by data exfiltration

00:52:49,550 --> 00:52:54,560
impossible so you not only have to steal

00:52:52,160 --> 00:52:56,930
the data you also have to access the

00:52:54,560 --> 00:52:58,550
internal key management system and this

00:52:56,930 --> 00:53:00,920
key management system can of course give

00:52:58,550 --> 00:53:02,510
you key rotation as well as scrubbing so

00:53:00,920 --> 00:53:04,580
Murray DB server was actually the first

00:53:02,510 --> 00:53:07,940
to come out with table or tablespace

00:53:04,580 --> 00:53:09,980
encryption not because the engineers at

00:53:07,940 --> 00:53:13,370
Marea DB wanted to make this happen but

00:53:09,980 --> 00:53:16,040
because Google who use Maria DB 1004

00:53:13,370 --> 00:53:17,860
some of the databases internally created

00:53:16,040 --> 00:53:20,510
this so that you never have a problem

00:53:17,860 --> 00:53:22,370
where Edward Snowden said that you know

00:53:20,510 --> 00:53:24,080
the NSA was spying on Google data they

00:53:22,370 --> 00:53:26,600
wanted to make sure that everything was

00:53:24,080 --> 00:53:28,910
encrypted so this was this was in

00:53:26,600 --> 00:53:30,650
reaction to that and then they open

00:53:28,910 --> 00:53:33,980
sourced the code which maria DB could

00:53:30,650 --> 00:53:35,900
then port n1 and the design goal was to

00:53:33,980 --> 00:53:39,260
encrypt all user data that would touch

00:53:35,900 --> 00:53:41,510
the disk not only data inside your in DB

00:53:39,260 --> 00:53:44,630
tablespace but also your logs it's quite

00:53:41,510 --> 00:53:46,160
important you could get set up fairly

00:53:44,630 --> 00:53:47,810
quickly by having key management on the

00:53:46,160 --> 00:53:49,550
file system but of course if someone

00:53:47,810 --> 00:53:52,880
broke in they'd walk away with your keys

00:53:49,550 --> 00:53:54,140
so not not the wisest thing to do and of

00:53:52,880 --> 00:53:55,880
course you know you won't get key

00:53:54,140 --> 00:53:57,920
rotation so you need an external key

00:53:55,880 --> 00:53:59,810
management solution they tend not to be

00:53:57,920 --> 00:54:03,260
many open-source external key management

00:53:59,810 --> 00:54:04,970
solutions with the exception of vault at

00:54:03,260 --> 00:54:07,040
the moment that one could actually use

00:54:04,970 --> 00:54:09,590
in production and the other one is

00:54:07,040 --> 00:54:12,110
that's not open source but fairly cheap

00:54:09,590 --> 00:54:14,180
because you pay by request as Amazon key

00:54:12,110 --> 00:54:16,430
management solute service as well

00:54:14,180 --> 00:54:17,720
Amazon kms can actually give you like a

00:54:16,430 --> 00:54:19,550
thousand keys for like a dollar or

00:54:17,720 --> 00:54:21,620
something so there is a plug-in

00:54:19,550 --> 00:54:24,800
available for Amazon kms inside of

00:54:21,620 --> 00:54:27,380
Murray degree server of course there's

00:54:24,800 --> 00:54:29,780
some caveats for one MySQL bin log

00:54:27,380 --> 00:54:32,150
cannot read it encrypted binary log so

00:54:29,780 --> 00:54:35,600
if you have a problem with replication

00:54:32,150 --> 00:54:37,910
you are now on a lock at Six Sigma

00:54:35,600 --> 00:54:40,010
problem because myself in lock on

00:54:37,910 --> 00:54:42,350
decrypted if you're going to use Galera

00:54:40,010 --> 00:54:43,790
the inbuilt inbuilt Galera cluster the g

00:54:42,350 --> 00:54:46,880
cache is not encrypted so you could leak

00:54:43,790 --> 00:54:49,640
data via the g cache also backups

00:54:46,880 --> 00:54:53,960
percona extra backup supports

00:54:49,640 --> 00:54:56,390
the backups that I encrypted via my SQL

00:54:53,960 --> 00:55:00,290
encryption not Maria DBS encryption

00:54:56,390 --> 00:55:02,780
which is different so until very

00:55:00,290 --> 00:55:04,760
recently Maria DB Fox Percona extra

00:55:02,780 --> 00:55:07,190
backup just about a week ago and

00:55:04,760 --> 00:55:09,560
released Maria DB backup so there is now

00:55:07,190 --> 00:55:14,060
another fork of a backup solution that

00:55:09,560 --> 00:55:16,310
one could use MySQL five seven not to be

00:55:14,060 --> 00:55:18,410
left out which is released maybe two

00:55:16,310 --> 00:55:21,680
days later than Maria DB 10 one and

00:55:18,410 --> 00:55:23,960
groups in ODB tablespaces as a whole you

00:55:21,680 --> 00:55:26,630
use in a DB file per table but the logs

00:55:23,960 --> 00:55:30,350
are still unencrypted now percona server

00:55:26,630 --> 00:55:32,960
five seven has has worked to make not

00:55:30,350 --> 00:55:34,580
only the might the Patronus or a five

00:55:32,960 --> 00:55:37,280
seven follow the mysel encryption but

00:55:34,580 --> 00:55:40,720
also have the murray dbstyle encryption

00:55:37,280 --> 00:55:43,850
which encrypts the logs and also

00:55:40,720 --> 00:55:46,340
provides access not only via Amazon kms

00:55:43,850 --> 00:55:49,640
but also via vault but all this is very

00:55:46,340 --> 00:55:50,930
much beta ash work that has been that is

00:55:49,640 --> 00:55:52,390
still being worked on at this very

00:55:50,930 --> 00:55:54,530
moment

00:55:52,390 --> 00:55:57,590
MySQL eight which is what is being

00:55:54,530 --> 00:55:59,690
worked on now is totally where it's at

00:55:57,590 --> 00:56:06,080
because my escalate we'll have

00:55:59,690 --> 00:56:11,060
everything Maria DB has and more so one

00:56:06,080 --> 00:56:12,920
more thing before I forget is that if

00:56:11,060 --> 00:56:15,470
you have like one WordPress database

00:56:12,920 --> 00:56:17,060
it's fairly easy and it's okay to say

00:56:15,470 --> 00:56:19,310
era establishing connection to a

00:56:17,060 --> 00:56:22,070
database server but as you grow you need

00:56:19,310 --> 00:56:25,250
to basically check loads and you need to

00:56:22,070 --> 00:56:28,370
you need to provision for loads so pars

00:56:25,250 --> 00:56:31,130
at Facebook create a flashback if you

00:56:28,370 --> 00:56:34,550
have a MongoDB you can get your existing

00:56:31,130 --> 00:56:36,380
workload and play it back and there's

00:56:34,550 --> 00:56:38,630
also paternal lab query playback that

00:56:36,380 --> 00:56:41,660
allows query play backs as well so all

00:56:38,630 --> 00:56:45,170
of this this will prevent database load

00:56:41,660 --> 00:56:46,940
say failure basically so to speak this

00:56:45,170 --> 00:56:50,560
this is these are capacity planning

00:56:46,940 --> 00:56:53,300
things you need to think about so I

00:56:50,560 --> 00:56:57,200
always like to learn from others and I

00:56:53,300 --> 00:56:59,930
hope I've helped you learn from others I

00:56:57,200 --> 00:57:01,610
think today if you're using MySQL semi

00:56:59,930 --> 00:57:03,500
synchronous application with a failover

00:57:01,610 --> 00:57:06,560
solution is the way to go

00:57:03,500 --> 00:57:10,070
clearly and tools like

00:57:06,560 --> 00:57:13,310
Orchestrator as well as mr mr building

00:57:10,070 --> 00:57:15,500
in automatic failover just like maj you

00:57:13,310 --> 00:57:16,610
want to make good backups but only if

00:57:15,500 --> 00:57:18,350
you want to make them you want to test

00:57:16,610 --> 00:57:20,960
them and you may want to save them

00:57:18,350 --> 00:57:23,450
elsewhere besides just where you've

00:57:20,960 --> 00:57:26,540
currently saved them you will definitely

00:57:23,450 --> 00:57:28,550
need to shard as you grow definitely use

00:57:26,540 --> 00:57:30,410
a proven framework don't write your own

00:57:28,550 --> 00:57:31,850
sharding solution because other people

00:57:30,410 --> 00:57:33,590
have already done the hard work it's

00:57:31,850 --> 00:57:35,360
really easy to write a sharding solution

00:57:33,590 --> 00:57:37,160
but extremely hard to write the

00:57:35,360 --> 00:57:41,150
recharging components offset sharding

00:57:37,160 --> 00:57:45,140
solution get a proxy that's approximant

00:57:41,150 --> 00:57:46,970
proxy SQL MySQL dump an extra backup

00:57:45,140 --> 00:57:49,310
work great together

00:57:46,970 --> 00:57:50,900
log logical backups with MySQL dump and

00:57:49,310 --> 00:57:53,090
then everything else for extra backup if

00:57:50,900 --> 00:57:56,030
you find resource or slow my dumper is a

00:57:53,090 --> 00:57:57,200
great great solution security is

00:57:56,030 --> 00:57:58,610
definitely key you want to prevent

00:57:57,200 --> 00:58:00,860
sequel injections you want to encrypt

00:57:58,610 --> 00:58:06,050
your data at rest these are extremely

00:58:00,860 --> 00:58:08,330
important things to do in 2016 a website

00:58:06,050 --> 00:58:11,750
that is the one of the only alternative

00:58:08,330 --> 00:58:13,760
media sources in Malaysia had to send

00:58:11,750 --> 00:58:15,830
updates via Facebook for 10 days because

00:58:13,760 --> 00:58:17,870
they had database corruption they had

00:58:15,830 --> 00:58:21,050
hardware failure that took away their

00:58:17,870 --> 00:58:24,350
database that was in 2016 I mean you

00:58:21,050 --> 00:58:26,390
should not be skimping on resources in

00:58:24,350 --> 00:58:30,230
2017 maybe you're more familiar with

00:58:26,390 --> 00:58:32,180
this one is good lab they just use

00:58:30,230 --> 00:58:37,790
single primary and the single secondary

00:58:32,180 --> 00:58:40,610
in hot standby mode and they had other

00:58:37,790 --> 00:58:43,880
database fail failures before that as

00:58:40,610 --> 00:58:46,130
well but it affected many people right

00:58:43,880 --> 00:58:48,230
five over five thousand projects seven

00:58:46,130 --> 00:58:50,480
hundred users and so forth but they've

00:58:48,230 --> 00:58:52,640
also given a very good incident report

00:58:50,480 --> 00:58:55,250
about why accidents do happen

00:58:52,640 --> 00:58:56,630
why goes down because it you know they'd

00:58:55,250 --> 00:58:59,390
remove the database directory by

00:58:56,630 --> 00:59:01,190
accident and I think one of the most

00:58:59,390 --> 00:59:03,440
important things that they've taken here

00:59:01,190 --> 00:59:05,270
why was the backup procedure not tested

00:59:03,440 --> 00:59:08,210
on a regular basis because no one took

00:59:05,270 --> 00:59:10,370
ownership of backups if you don't test

00:59:08,210 --> 00:59:12,740
your backups it is good as not having

00:59:10,370 --> 00:59:14,300
any backups so don't bother running them

00:59:12,740 --> 00:59:16,490
if you don't want to test them and then

00:59:14,300 --> 00:59:17,369
many ways to test reloading backups if

00:59:16,490 --> 00:59:22,259
you don't have extra

00:59:17,369 --> 00:59:24,420
for this you could just spin up nodes at

00:59:22,259 --> 00:59:26,279
piccola we want to make sure we make

00:59:24,420 --> 00:59:28,140
things a little better we want to make

00:59:26,279 --> 00:59:29,609
things easier so we build the top of the

00:59:28,140 --> 00:59:33,509
shoulders of giants like Prometheus

00:59:29,609 --> 00:59:36,660
graphic Ravana and so forth and we have

00:59:33,509 --> 00:59:39,359
pmm which you can deploy via via docker

00:59:36,660 --> 00:59:41,940
fairly easily if need be or buyers by

00:59:39,359 --> 00:59:43,440
yourself and Percona monitoring and

00:59:41,940 --> 00:59:47,160
management will help you not only

00:59:43,440 --> 00:59:49,769
monitor from query analytics metrics and

00:59:47,160 --> 00:59:52,170
so forth also help you manage via

00:59:49,769 --> 00:59:54,119
Orchestrator and the bonuses we have set

00:59:52,170 --> 00:59:55,769
up demos available for you that you can

00:59:54,119 --> 00:59:57,359
actually play with existing servers on

00:59:55,769 --> 00:59:59,700
the Internet as well

00:59:57,359 --> 01:00:01,799
so integrating with Orchestrator and

00:59:59,700 --> 01:00:05,369
this works fully out of the box from

01:00:01,799 --> 01:00:07,680
MySQL in a GUI and the next thing once

01:00:05,369 --> 01:00:09,059
Orchestrator has automatic failover will

01:00:07,680 --> 01:00:11,460
mean that you have a fully

01:00:09,059 --> 01:00:14,190
out-of-the-box solution to manage many

01:00:11,460 --> 01:00:16,589
of these failures now in terms of

01:00:14,190 --> 01:00:18,599
backups there we don't have a GUI for

01:00:16,589 --> 01:00:20,190
cloud backup but there have been others

01:00:18,599 --> 01:00:23,309
like pin logic that have come up with

01:00:20,190 --> 01:00:24,989
gooeys for cloud backup so as we I mean

01:00:23,309 --> 01:00:26,729
I think most of you here like the

01:00:24,989 --> 01:00:29,460
command line like me but many other

01:00:26,729 --> 01:00:31,829
people who come from other databases may

01:00:29,460 --> 01:00:35,039
think that GUI is the only way forward

01:00:31,829 --> 01:00:37,410
so it is clear that we are also getting

01:00:35,039 --> 01:00:40,049
there and despite the fact that MySQL is

01:00:37,410 --> 01:00:43,589
not about 22 years old we're only now

01:00:40,049 --> 01:00:45,660
realizing gooeys are fairly important so

01:00:43,589 --> 01:00:49,410
with that I'd like to say thank you for

01:00:45,660 --> 01:01:00,599
listening and I'm open to actually have

01:00:49,410 --> 01:01:03,569
any questions and the slides will be

01:01:00,599 --> 01:01:06,329
online exactly slides will be online I

01:01:03,569 --> 01:01:10,319
guess there aren't any questions right

01:01:06,329 --> 01:01:13,469
now well I guess you can ask calling any

01:01:10,319 --> 01:01:18,799
questions at the evening event okay just

01:01:13,469 --> 01:01:22,019
one I'm not really a question but I am

01:01:18,799 --> 01:01:25,279
hint and just yesterday one of the huge

01:01:22,019 --> 01:01:29,160
German telco providers had a database

01:01:25,279 --> 01:01:30,750
down egde and at lots of troubles with

01:01:29,160 --> 01:01:34,400
their customer and

01:01:30,750 --> 01:01:37,890
mobile network maybe we'll see another

01:01:34,400 --> 01:01:39,510
story from them next two days so these

01:01:37,890 --> 01:01:41,280
larger companies tend not to like to

01:01:39,510 --> 01:01:45,450
give incident reports right

01:01:41,280 --> 01:01:47,580
yeah well through that yeah and it could

01:01:45,450 --> 01:01:49,170
it could very well be I think even my

01:01:47,580 --> 01:01:51,030
friends in Belgium were complaining what

01:01:49,170 --> 01:01:53,910
was it on Monday I think you know

01:01:51,030 --> 01:01:56,040
Proximus went down for maybe at least

01:01:53,910 --> 01:01:58,920
half an hour and a lot of suspicion on

01:01:56,040 --> 01:02:00,780
this new Windows Windows malware virus

01:01:58,920 --> 01:02:08,700
whatever I don't know i don't use

01:02:00,780 --> 01:02:11,490
windows nor want to cry that's the one

01:02:08,700 --> 01:02:15,290
yeah so I I don't know if it's wanna cry

01:02:11,490 --> 01:02:23,190
or something else but we'll see yeah

01:02:15,290 --> 01:02:26,760
totally okay so so this is all these

01:02:23,190 --> 01:02:28,440
specific but when you mention that one

01:02:26,760 --> 01:02:32,310
of those proxy solutions have this

01:02:28,440 --> 01:02:36,119
filter against SQL injections not at

01:02:32,310 --> 01:02:38,760
what scan for select everything and

01:02:36,119 --> 01:02:42,839
there was no work where clause I wanted

01:02:38,760 --> 01:02:45,750
what happens if I come up with a query

01:02:42,839 --> 01:02:47,130
that has a trivial work laws like where

01:02:45,750 --> 01:02:49,710
one equals one

01:02:47,130 --> 01:02:52,140
yep so if you have a criminal where

01:02:49,710 --> 01:02:54,810
cause you can also make rules that do

01:02:52,140 --> 01:02:56,490
where one equals one and you can

01:02:54,810 --> 01:02:57,960
actually keep on adding rules to this

01:02:56,490 --> 01:02:59,940
depending on the type of developers you

01:02:57,960 --> 01:03:05,250
have and a good example of this actually

01:02:59,940 --> 01:03:07,500
is Airbnb they wrote also a very nice

01:03:05,250 --> 01:03:09,930
incident report because a B&B runs Ruby

01:03:07,500 --> 01:03:13,530
on Rails and they do a lot of these

01:03:09,930 --> 01:03:16,770
Amazon services and so forth and Ruby

01:03:13,530 --> 01:03:18,690
would have VM corruption sometimes where

01:03:16,770 --> 01:03:23,540
you would way would do deletes on where

01:03:18,690 --> 01:03:26,339
one equals one this is actually not cool

01:03:23,540 --> 01:03:28,080
so they needed a proxy that would stop

01:03:26,339 --> 01:03:32,040
this from happening because otherwise

01:03:28,080 --> 01:03:34,740
you'd lose transaction data for for that

01:03:32,040 --> 01:03:35,970
node which could affect Airbnb and you

01:03:34,740 --> 01:03:38,490
know we talked about this offline

01:03:35,970 --> 01:03:40,020
earlier if you arrive at a place and you

01:03:38,490 --> 01:03:41,339
don't have a room this could be a

01:03:40,020 --> 01:03:42,810
problem this is probably a bigger

01:03:41,339 --> 01:03:43,770
problem with you know something like

01:03:42,810 --> 01:03:46,200
home rentals

01:03:43,770 --> 01:03:48,590
so that thing is not supposed to stop

01:03:46,200 --> 01:03:50,850
external attackers that use some SQL

01:03:48,590 --> 01:03:53,310
injection vector into your application

01:03:50,850 --> 01:03:56,730
but more like guard against yeah so so

01:03:53,310 --> 01:03:59,220
by default these both DB file filter and

01:03:56,730 --> 01:04:01,650
my skill as well as proxy SQL have rules

01:03:59,220 --> 01:04:03,450
for SQL injections all the SQL

01:04:01,650 --> 01:04:05,670
injections are there by default but in

01:04:03,450 --> 01:04:08,250
addition you can add rules to it as well

01:04:05,670 --> 01:04:10,680
that can you know stop and stop

01:04:08,250 --> 01:04:13,830
developers that are lazy or you know

01:04:10,680 --> 01:04:18,540
crashing bugs in a VM where these things

01:04:13,830 --> 01:04:20,280
did they do happen so you can I totally

01:04:18,540 --> 01:04:22,110
extended the rule set but the default

01:04:20,280 --> 01:04:26,280
rule set is there for SQL injection

01:04:22,110 --> 01:04:29,240
prevention question at the back od where

01:04:26,280 --> 01:04:29,240
were you guys in the morning

01:04:29,390 --> 01:04:34,550
yeah yes it is

01:04:36,770 --> 01:04:41,610
well um with regards to ask your

01:04:39,450 --> 01:04:42,930
injections I think nowadays we we

01:04:41,610 --> 01:04:46,820
realize what kind of queries can

01:04:42,930 --> 01:04:50,220
actually what kind of queries are bad

01:04:46,820 --> 01:04:52,590
but it is heuristics yes absolutely like

01:04:50,220 --> 01:04:54,240
I mean in theory you could stop a query

01:04:52,590 --> 01:04:57,480
block a query that's a legitimate thing

01:04:54,240 --> 01:05:00,780
that had data like as tables actually

01:04:57,480 --> 01:05:03,420
want absolutely I mean this if you add

01:05:00,780 --> 01:05:05,310
if you add the rule like to limit based

01:05:03,420 --> 01:05:07,619
on nothing then you actually did stop a

01:05:05,310 --> 01:05:09,240
legitimate query but this is your

01:05:07,619 --> 01:05:12,600
stopping the fact that you know hey I

01:05:09,240 --> 01:05:15,330
don't want my my database to be going

01:05:12,600 --> 01:05:17,070
for a full table scan so that actually

01:05:15,330 --> 01:05:18,990
is legitimate but that's something that

01:05:17,070 --> 01:05:20,790
you as the database administrator will

01:05:18,990 --> 01:05:23,190
tell everybody it's like a company-wide

01:05:20,790 --> 01:05:25,380
policy right basically like look you

01:05:23,190 --> 01:05:26,970
deploy without a where Clause we're just

01:05:25,380 --> 01:05:28,440
going to limit your query query result

01:05:26,970 --> 01:05:30,390
set but that's not turned on by default

01:05:28,440 --> 01:05:33,090
that's something you put on there if you

01:05:30,390 --> 01:05:35,869
want but it's typical in large

01:05:33,090 --> 01:05:38,369
environments to actually do this because

01:05:35,869 --> 01:05:41,369
if you have you know ten thousand

01:05:38,369 --> 01:05:43,170
developers they all they have bad days

01:05:41,369 --> 01:05:46,619
to they they're all probably very good

01:05:43,170 --> 01:05:47,580
developers but they have bad days we'll

01:05:46,619 --> 01:05:52,109
just leave it at that

01:05:47,580 --> 01:05:54,980
yeah okay so thanks again Colin for

01:05:52,109 --> 01:05:54,980

YouTube URL: https://www.youtube.com/watch?v=ZZKvggzJrR0


