Title: OSDC 2018 | Migrating to the cloud by Devdas Bhagat
Publication date: 2018-06-22
Playlist: OSDC 2018 | Open Source Data Center Conference
Description: 
	This is an experience report of a migration from self-hosted services to running in the cloud. While there have been plenty of business case studies showing the benefits of a cloud migration, there are very few reports on the IT side of the migration. This talk covers the migration of Spilgames (a small Dutch games publisher) from a self-hosted Openstack and hardware based infrastructure to Google cloud, challenges, tooling (and lack thereof). This migration is still work in progress, and the talk will cover as much detail as possible.

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de
Blog: http://blog.netways.de
Webinare: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Google+: https://plus.google.com/+netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh

https://www.frametraxx.de/
Captions: 
	00:00:00,540 --> 00:00:16,560
[Music]

00:00:14,240 --> 00:00:19,560
we haven't finished the migration

00:00:16,560 --> 00:00:22,230
completely and things keep changing in

00:00:19,560 --> 00:00:24,270
Cloudland so this stock has changed

00:00:22,230 --> 00:00:27,840
quite a bit in the past three months

00:00:24,270 --> 00:00:29,340
okay not too much but quite a bit of it

00:00:27,840 --> 00:00:33,210
has changed simply because the finance

00:00:29,340 --> 00:00:35,100
has changed so our starting point was we

00:00:33,210 --> 00:00:38,219
had a bunch of legacy hardware running

00:00:35,100 --> 00:00:39,870
in a DC it was getting to be at a point

00:00:38,219 --> 00:00:42,660
in the replacement cycle where we could

00:00:39,870 --> 00:00:44,460
just junk half of it or more lots of

00:00:42,660 --> 00:00:47,489
profitable legacy software which is

00:00:44,460 --> 00:00:50,280
important we were running on a mix of

00:00:47,489 --> 00:00:52,560
really old bare metal and we had a bunch

00:00:50,280 --> 00:00:56,040
of OpenStack cloud with a bunch of cell

00:00:52,560 --> 00:00:58,050
service tools around it we had working

00:00:56,040 --> 00:01:00,930
continuous integration and continuous

00:00:58,050 --> 00:01:02,850
deployment one of those things that

00:01:00,930 --> 00:01:07,079
apparently a lot of enterprises are now

00:01:02,850 --> 00:01:10,049
getting around to we had working

00:01:07,079 --> 00:01:12,270
conflict management which is common and

00:01:10,049 --> 00:01:14,850
we had a very small infrastructure team

00:01:12,270 --> 00:01:18,270
it's about seven people so we can move

00:01:14,850 --> 00:01:20,549
really fast when we need to software is

00:01:18,270 --> 00:01:22,109
for us not an essential is an essential

00:01:20,549 --> 00:01:24,270
business component but it's not a prime

00:01:22,109 --> 00:01:27,899
business we are really marketing and

00:01:24,270 --> 00:01:29,819
publishing and we have developers on

00:01:27,899 --> 00:01:33,209
call for production issues that's been a

00:01:29,819 --> 00:01:34,770
thing for a few years if you can meet

00:01:33,209 --> 00:01:36,959
these starting conditions you should

00:01:34,770 --> 00:01:40,289
probably do that the old hardware may or

00:01:36,959 --> 00:01:42,029
may not be important but for the if

00:01:40,289 --> 00:01:44,159
you're moving to public cloud then it

00:01:42,029 --> 00:01:46,409
makes complete sense to just take a look

00:01:44,159 --> 00:01:48,229
at the economics first because you'd

00:01:46,409 --> 00:01:51,299
have to start thinking in terms of

00:01:48,229 --> 00:01:54,359
exactly how many euros is this operation

00:01:51,299 --> 00:01:55,799
going to cost me you leave a VM if you

00:01:54,359 --> 00:01:58,049
are running a VM and it's running on

00:01:55,799 --> 00:01:59,939
hardware well it costs you a few cents

00:01:58,049 --> 00:02:01,560
of electricity but if you're doing that

00:01:59,939 --> 00:02:06,209
in the cloud it costs you a few euros

00:02:01,560 --> 00:02:08,130
instead cloud considerations for us we

00:02:06,209 --> 00:02:11,099
were kind of on the margin with a few

00:02:08,130 --> 00:02:13,500
hundred machines so we could have said

00:02:11,099 --> 00:02:16,709
no to the public cloud but we kind of

00:02:13,500 --> 00:02:18,540
also need scaling issues for us the

00:02:16,709 --> 00:02:20,070
really bad part is if we have a

00:02:18,540 --> 00:02:22,290
successful game and then you certainly

00:02:20,070 --> 00:02:23,220
realize you can't scale the backend up

00:02:22,290 --> 00:02:25,650
fast enough

00:02:23,220 --> 00:02:27,720
and there is no sense in buying a back

00:02:25,650 --> 00:02:30,450
end in buying lots of hardware for

00:02:27,720 --> 00:02:33,450
things that may or may not scale or may

00:02:30,450 --> 00:02:35,370
not need scaling at all if you are if

00:02:33,450 --> 00:02:38,040
you're unlucky you're bad results are

00:02:35,370 --> 00:02:41,850
like the Pokemon Go game where the big

00:02:38,040 --> 00:02:44,130
problem is scaling we have variability

00:02:41,850 --> 00:02:47,150
in demand if you have if your demand is

00:02:44,130 --> 00:02:49,770
consistent pretty much keep it in-house

00:02:47,150 --> 00:02:54,150
we have a very high variability in

00:02:49,770 --> 00:02:56,940
demand and legal issues so you cannot

00:02:54,150 --> 00:02:59,520
just go around randomly with breaks it

00:02:56,940 --> 00:03:03,170
and GDP are you cannot say oh I can put

00:02:59,520 --> 00:03:05,190
my dick machines in the US or

00:03:03,170 --> 00:03:10,290
geographically dispersed they must stay

00:03:05,190 --> 00:03:12,930
within specific geographies and your

00:03:10,290 --> 00:03:14,910
software must be observable the modern

00:03:12,930 --> 00:03:16,830
buzzword is observability traditionally

00:03:14,910 --> 00:03:18,660
this would be something that you you

00:03:16,830 --> 00:03:21,810
will put into your own code as logging

00:03:18,660 --> 00:03:24,060
statements metrics emission whatever but

00:03:21,810 --> 00:03:25,740
a lot of commercial software simply

00:03:24,060 --> 00:03:28,290
didn't have this back in the past so

00:03:25,740 --> 00:03:31,710
your ability to monitor it was very

00:03:28,290 --> 00:03:33,450
limited if your software has good

00:03:31,710 --> 00:03:35,940
observability you can actually debug

00:03:33,450 --> 00:03:39,720
issues cloud kind of restricts you on

00:03:35,940 --> 00:03:42,360
what you can see because you're just

00:03:39,720 --> 00:03:44,700
simply very hard or impossible to do get

00:03:42,360 --> 00:03:47,550
just get metrics from lower level

00:03:44,700 --> 00:03:49,980
systems render choices we were already

00:03:47,550 --> 00:03:51,959
using docker that helped me already

00:03:49,980 --> 00:03:55,290
doing a micro service migration from

00:03:51,959 --> 00:03:58,020
well before not essential but it helps

00:03:55,290 --> 00:04:00,590
establish a mindset that we needed we

00:03:58,020 --> 00:04:03,180
were doing messes so kubernetes was easy

00:04:00,590 --> 00:04:05,160
which is kind of why we chose Google's

00:04:03,180 --> 00:04:10,020
cloud it was just a teeny-weeny bit

00:04:05,160 --> 00:04:11,310
better and quite a bit cheaper the

00:04:10,020 --> 00:04:14,730
cheapest was would still have been

00:04:11,310 --> 00:04:17,670
running our own hardware savings for a

00:04:14,730 --> 00:04:20,160
cloud move mostly come from not needing

00:04:17,670 --> 00:04:22,980
a dedicated Hardware Operations Group or

00:04:20,160 --> 00:04:24,140
at least operations group and you can

00:04:22,980 --> 00:04:26,520
avoid a bunch of high availability

00:04:24,140 --> 00:04:28,680
requirements because the tooling in the

00:04:26,520 --> 00:04:32,100
cloud lets you're automatically respawn

00:04:28,680 --> 00:04:34,020
VMs they crash so you don't have to have

00:04:32,100 --> 00:04:36,330
multiple pieces of hardware to do the

00:04:34,020 --> 00:04:37,080
same thing you can just say ok just make

00:04:36,330 --> 00:04:39,780
sure this things

00:04:37,080 --> 00:04:41,909
is up I want at least five units of this

00:04:39,780 --> 00:04:44,759
running all the time and software will

00:04:41,909 --> 00:04:46,530
do that for you so we started off the

00:04:44,759 --> 00:04:48,810
little technical research phase that

00:04:46,530 --> 00:04:51,270
started around last year's conflict

00:04:48,810 --> 00:04:53,310
management camp where we looked at

00:04:51,270 --> 00:04:55,259
various options and that lasted for

00:04:53,310 --> 00:04:57,979
about six months quite a bit of research

00:04:55,259 --> 00:05:00,330
well not too much because mostly

00:04:57,979 --> 00:05:02,370
infrastructure management and what we

00:05:00,330 --> 00:05:04,020
could do to automate it because we

00:05:02,370 --> 00:05:06,479
already had automation and we were

00:05:04,020 --> 00:05:08,789
simply not willing to live with oh look

00:05:06,479 --> 00:05:11,610
I can run a command-line utility to

00:05:08,789 --> 00:05:14,550
solve this problem we totally dislike

00:05:11,610 --> 00:05:17,000
that sort of attitude there at work it's

00:05:14,550 --> 00:05:21,030
more like I don't care just make it work

00:05:17,000 --> 00:05:23,520
and if you can do that then that happens

00:05:21,030 --> 00:05:28,229
for us okay so we did a bunch of manual

00:05:23,520 --> 00:05:31,289
work first and then so we got some just

00:05:28,229 --> 00:05:34,490
to learn the terminology concepts and to

00:05:31,289 --> 00:05:37,289
discover various limitations of tools

00:05:34,490 --> 00:05:39,300
the most tools have limitations of

00:05:37,289 --> 00:05:42,810
various sorts when we started terraform

00:05:39,300 --> 00:05:44,539
was not as nice as it is now it's

00:05:42,810 --> 00:05:50,400
improved a lot in the past six months

00:05:44,539 --> 00:05:56,009
load balancing ipv6 some DNS issues

00:05:50,400 --> 00:05:59,490
occasionally so all those things usually

00:05:56,009 --> 00:06:02,599
quite a lot of them automation tools we

00:05:59,490 --> 00:06:05,849
started by simply writing shell scripts

00:06:02,599 --> 00:06:08,190
Yorgi cloud and gsutil AWS has their own

00:06:05,849 --> 00:06:09,560
AWS command-line utility I think Azure

00:06:08,190 --> 00:06:12,539
or something similar

00:06:09,560 --> 00:06:16,110
we had ansible experience so we played a

00:06:12,539 --> 00:06:17,909
bit with ansible but back in the days it

00:06:16,110 --> 00:06:19,770
was very limited what we could do and

00:06:17,909 --> 00:06:21,839
for a bunch of stuff you just have been

00:06:19,770 --> 00:06:26,669
going down to saying run this g-cloud

00:06:21,839 --> 00:06:29,039
command not very nice we could have used

00:06:26,669 --> 00:06:30,180
puppet but it had barely gotten to the

00:06:29,039 --> 00:06:33,120
point where you could stand up

00:06:30,180 --> 00:06:34,740
infrastructure so at some point I wrote

00:06:33,120 --> 00:06:37,589
a basic proof of concept that would

00:06:34,740 --> 00:06:39,509
spawn a VM and the way that work was you

00:06:37,589 --> 00:06:41,490
would take a machine it will spawn up a

00:06:39,509 --> 00:06:43,319
local vagrant box and then a local

00:06:41,490 --> 00:06:45,380
puppet applied that would spawn a power

00:06:43,319 --> 00:06:49,110
machine and the clouds

00:06:45,380 --> 00:06:50,150
not-so-nice terraform was the best of

00:06:49,110 --> 00:06:52,160
the lot it

00:06:50,150 --> 00:06:54,800
improved a lot since this slide set was

00:06:52,160 --> 00:06:57,770
made back then it would be like okay

00:06:54,800 --> 00:07:00,110
let's gamble if it works now we can do a

00:06:57,770 --> 00:07:03,080
little bit more it's gone from puppet in

00:07:00,110 --> 00:07:05,120
2007 to buy B puppet in 2009 equivalent

00:07:03,080 --> 00:07:07,550
if you use puppet in those days you

00:07:05,120 --> 00:07:11,840
would remember how big a difference that

00:07:07,550 --> 00:07:14,450
it was then configuration management you

00:07:11,840 --> 00:07:16,850
need something doesn't matter what if

00:07:14,450 --> 00:07:21,020
you're running VMs you pretty much want

00:07:16,850 --> 00:07:23,180
config management because a you'll have

00:07:21,020 --> 00:07:26,060
you want it for all the regular reasons

00:07:23,180 --> 00:07:30,110
plus B if you're running groups of them

00:07:26,060 --> 00:07:30,560
what Google called manage resources or

00:07:30,110 --> 00:07:32,300
whatever

00:07:30,560 --> 00:07:33,770
AWS calls it the machines will

00:07:32,300 --> 00:07:35,450
automatically spawn up and then you

00:07:33,770 --> 00:07:36,950
don't want a machine that spawned up and

00:07:35,450 --> 00:07:39,290
going oh but I don't have my

00:07:36,950 --> 00:07:41,330
configuration you need a lunch of

00:07:39,290 --> 00:07:44,180
automation in there if it's a web

00:07:41,330 --> 00:07:46,640
service put it in a container be done

00:07:44,180 --> 00:07:50,570
with it you don't necessarily need a

00:07:46,640 --> 00:07:55,570
full fledged VM for it do that well

00:07:50,570 --> 00:07:58,430
factor out start well factor style stuff

00:07:55,570 --> 00:08:00,110
and you're good you need configuration

00:07:58,430 --> 00:08:02,900
management for anything that's not in a

00:08:00,110 --> 00:08:05,480
container so your databases that you

00:08:02,900 --> 00:08:09,910
plan to run manually other legacy

00:08:05,480 --> 00:08:12,830
applications and that sort of stuff

00:08:09,910 --> 00:08:15,550
puppet was our choice of tool because we

00:08:12,830 --> 00:08:18,170
were using it but again use something

00:08:15,550 --> 00:08:22,160
nobody cares what's particular tool you

00:08:18,170 --> 00:08:24,050
use there isn't one best tool yet and

00:08:22,160 --> 00:08:25,760
given that we are 10 years down that 10

00:08:24,050 --> 00:08:28,580
15 years down that line I don't think

00:08:25,760 --> 00:08:31,630
there's going to be a best tools the one

00:08:28,580 --> 00:08:34,130
you have is pretty much the best one

00:08:31,630 --> 00:08:37,150
inventory there's still no good nice

00:08:34,130 --> 00:08:40,670
CMDB here which we can use to lead our

00:08:37,150 --> 00:08:44,390
provisioning systems the homegrown the

00:08:40,670 --> 00:08:46,610
OpenStack system has a CMDB where we can

00:08:44,390 --> 00:08:49,360
ideally say add an entry here and then

00:08:46,610 --> 00:08:52,070
the rest of the software makes it so

00:08:49,360 --> 00:08:55,640
that's not quite where we are in the

00:08:52,070 --> 00:08:57,940
cloud yet so we are currently generating

00:08:55,640 --> 00:09:01,250
in the inventory by using the Gert

00:08:57,940 --> 00:09:02,840
various tags and the Google API AWS

00:09:01,250 --> 00:09:04,720
apparently you are expected to do

00:09:02,840 --> 00:09:08,839
something similar

00:09:04,720 --> 00:09:13,100
and it's a pain but it's not too hard to

00:09:08,839 --> 00:09:15,589
generate this information so when we

00:09:13,100 --> 00:09:19,130
started actual work this was somewhere

00:09:15,589 --> 00:09:21,560
on last September one meeting with three

00:09:19,130 --> 00:09:26,180
people in 30 minutes nobody else who got

00:09:21,560 --> 00:09:27,889
involved and we decided on goals it was

00:09:26,180 --> 00:09:30,709
complete automation custom tooling

00:09:27,889 --> 00:09:33,980
around all the around the application

00:09:30,709 --> 00:09:35,810
bits and we decided that this was a

00:09:33,980 --> 00:09:37,579
particular legacy application that we

00:09:35,810 --> 00:09:40,220
would move and say well that would be

00:09:37,579 --> 00:09:41,569
the end of the proof-of-concept well now

00:09:40,220 --> 00:09:43,399
we are doing production stuff in the

00:09:41,569 --> 00:09:46,490
cloud that particular application hasn't

00:09:43,399 --> 00:09:50,930
moved but hey the proof-of-concept was

00:09:46,490 --> 00:09:52,430
done for some value of and it took us

00:09:50,930 --> 00:09:55,310
about three months of full-time effort

00:09:52,430 --> 00:09:58,970
to say this is from we have nothing -

00:09:55,310 --> 00:10:00,470
this is where we can be at to say ok we

00:09:58,970 --> 00:10:03,259
have proof of concept this is how things

00:10:00,470 --> 00:10:06,009
will work this is how and this is things

00:10:03,259 --> 00:10:09,740
what will definitely not work for us for

00:10:06,009 --> 00:10:12,529
various reasons did not need a lot of

00:10:09,740 --> 00:10:15,529
time to do documentation I think in

00:10:12,529 --> 00:10:16,970
those three months one of the each of

00:10:15,529 --> 00:10:18,589
those three people involved was on

00:10:16,970 --> 00:10:20,740
vacation for two or three weeks in

00:10:18,589 --> 00:10:20,740
between

00:10:20,949 --> 00:10:26,269
terraform has excellent documentation

00:10:24,230 --> 00:10:28,160
once you get your head around it it

00:10:26,269 --> 00:10:31,130
documents all the individual bits very

00:10:28,160 --> 00:10:33,829
well but there are still no big picture

00:10:31,130 --> 00:10:35,690
pieces of documentation that say this is

00:10:33,829 --> 00:10:38,389
a complete infrastructure bit this is

00:10:35,690 --> 00:10:41,300
how you do things getting your first

00:10:38,389 --> 00:10:42,800
bits and pieces is pretty hard simply

00:10:41,300 --> 00:10:45,019
because it says oh this is this piece

00:10:42,800 --> 00:10:47,810
this is this piece is this piece how you

00:10:45,019 --> 00:10:49,610
put it together doesn't exist I was

00:10:47,810 --> 00:10:52,279
reading the same complaint about Amazon

00:10:49,610 --> 00:10:56,000
yesterday so that hasn't really changed

00:10:52,279 --> 00:10:57,709
anywhere and then of course we had

00:10:56,000 --> 00:10:59,930
puppets so we just threw away most of

00:10:57,709 --> 00:11:01,370
our old puppet code instead of keeping

00:10:59,930 --> 00:11:04,850
it running we just created a whole new

00:11:01,370 --> 00:11:05,509
rap oh I meant rope new puppet version

00:11:04,850 --> 00:11:07,610
let's clean up

00:11:05,509 --> 00:11:10,639
we also junked a large part of the

00:11:07,610 --> 00:11:12,589
module approach what we are doing is

00:11:10,639 --> 00:11:16,010
have a base module that installs

00:11:12,589 --> 00:11:17,760
packages and starts ensures that some

00:11:16,010 --> 00:11:19,560
services should be running and

00:11:17,760 --> 00:11:21,620
then all the actual module for that

00:11:19,560 --> 00:11:24,510
conflict does is implement the conflict

00:11:21,620 --> 00:11:27,450
so that removes a bunch of complexity

00:11:24,510 --> 00:11:30,210
from the standard puppet for style

00:11:27,450 --> 00:11:32,250
module it's not a good way to publish

00:11:30,210 --> 00:11:34,200
stuff but it think it reduces the size

00:11:32,250 --> 00:11:34,620
of our codebase by half or more than

00:11:34,200 --> 00:11:39,750
that

00:11:34,620 --> 00:11:42,180
so simplicity what we did for networking

00:11:39,750 --> 00:11:44,460
was we decided these were some subnets

00:11:42,180 --> 00:11:47,150
we were going to use and then all the

00:11:44,460 --> 00:11:50,090
network bits go into one project and

00:11:47,150 --> 00:11:53,460
then everything else sits on top so

00:11:50,090 --> 00:11:55,070
everything staging every environment was

00:11:53,460 --> 00:11:58,110
corresponds to one project for us

00:11:55,070 --> 00:12:01,140
whether it's dev staging production

00:11:58,110 --> 00:12:02,610
doesn't matter we just go with this is

00:12:01,140 --> 00:12:04,860
it and it's going to run in this

00:12:02,610 --> 00:12:08,130
particular network all of which will

00:12:04,860 --> 00:12:10,830
nicely be provisioned by terraform at

00:12:08,130 --> 00:12:14,100
least the network management bits until

00:12:10,830 --> 00:12:16,920
last week it was not possible for Google

00:12:14,100 --> 00:12:18,930
to to run kubernetes clusters that way

00:12:16,920 --> 00:12:23,660
to manage the network so we just define

00:12:18,930 --> 00:12:26,400
them there but now you can manage it so

00:12:23,660 --> 00:12:28,260
they're projects just use instance

00:12:26,400 --> 00:12:30,120
groups again this grew out of what we

00:12:28,260 --> 00:12:33,600
were doing we first started by the hard

00:12:30,120 --> 00:12:35,550
coding host entries into stuff and then

00:12:33,600 --> 00:12:37,620
we went well this looks very similar so

00:12:35,550 --> 00:12:40,050
I wrote a make file target that could

00:12:37,620 --> 00:12:42,660
generate things and then we realized we

00:12:40,050 --> 00:12:44,280
could just create resources for that but

00:12:42,660 --> 00:12:47,040
we still had issues with storage and

00:12:44,280 --> 00:12:53,100
then we added some more stuff and keeps

00:12:47,040 --> 00:12:54,930
growing plan for things to evolve so our

00:12:53,100 --> 00:12:57,450
code base is currently a very complex

00:12:54,930 --> 00:12:59,460
mix of we have hard coded things like

00:12:57,450 --> 00:13:01,710
variables and then here's this fully

00:12:59,460 --> 00:13:04,380
dynamic singing dancing template and we

00:13:01,710 --> 00:13:07,200
go well new stuff should use this older

00:13:04,380 --> 00:13:09,600
stuff can keep using the old stuff we

00:13:07,200 --> 00:13:11,670
use Google terraform to provide roles

00:13:09,600 --> 00:13:13,650
and cluster and a few other variables to

00:13:11,670 --> 00:13:17,160
puppet and then puppet can basically

00:13:13,650 --> 00:13:19,560
pull those in via facts and we can then

00:13:17,160 --> 00:13:22,500
just say well this machine has this Rose

00:13:19,560 --> 00:13:25,140
provision it that way instead of

00:13:22,500 --> 00:13:28,950
hard-coding stuff onto a VM or default

00:13:25,140 --> 00:13:31,360
images we started with a simple back-end

00:13:28,950 --> 00:13:33,880
it's the easiest way to go forward you

00:13:31,360 --> 00:13:38,290
is entirely known to be non performant

00:13:33,880 --> 00:13:40,800
at scale for humans so if you have I

00:13:38,290 --> 00:13:43,600
mean with three people it was kind of

00:13:40,800 --> 00:13:44,980
acceptable when we could just say oh I'm

00:13:43,600 --> 00:13:47,200
going to work on this I am going to make

00:13:44,980 --> 00:13:49,810
a terraform run nobody touches the thing

00:13:47,200 --> 00:13:51,940
please but if we were doing more if with

00:13:49,810 --> 00:13:54,480
six people and a couple of people

00:13:51,940 --> 00:13:58,540
working from home good luck

00:13:54,480 --> 00:14:02,380
proof of concept very useful and then

00:13:58,540 --> 00:14:05,440
that got refactored charity majors wrote

00:14:02,380 --> 00:14:08,230
a pretty good thing for Amazon about why

00:14:05,440 --> 00:14:10,240
you want a tariff on state file we just

00:14:08,230 --> 00:14:16,660
store this in a remote state bucket and

00:14:10,240 --> 00:14:21,089
run with it oh yes now the dragons so

00:14:16,660 --> 00:14:24,339
that was the nice bits stuff that sucked

00:14:21,089 --> 00:14:26,829
documentation Google Cloud documentation

00:14:24,339 --> 00:14:29,920
it lags behind the software good luck

00:14:26,829 --> 00:14:32,440
finding out what is currently correct

00:14:29,920 --> 00:14:34,899
because there is a Google searches are

00:14:32,440 --> 00:14:36,850
pretty worthless years sometimes simply

00:14:34,899 --> 00:14:39,390
because you have three month old

00:14:36,850 --> 00:14:42,040
information that is no longer valid I

00:14:39,390 --> 00:14:44,199
said this talk has evolved and I have

00:14:42,040 --> 00:14:46,589
that disclaimer at the start so if you

00:14:44,199 --> 00:14:52,390
can find recent documentation it's fine

00:14:46,589 --> 00:14:55,660
otherwise good luck it's inconsistent in

00:14:52,390 --> 00:15:00,279
itself and well same thing for Amazon

00:14:55,660 --> 00:15:03,100
same thing for us you're the API is well

00:15:00,279 --> 00:15:06,519
we had a few bitching sessions about

00:15:03,100 --> 00:15:07,959
this you have you create a hard disk and

00:15:06,519 --> 00:15:08,769
you say well I want this disk to be

00:15:07,959 --> 00:15:12,310
permanent storage

00:15:08,769 --> 00:15:13,779
I want this other thing to be and then I

00:15:12,310 --> 00:15:16,930
have this machine that I should attach

00:15:13,779 --> 00:15:20,769
it to do I attach it by a name or do I

00:15:16,930 --> 00:15:23,680
use a URL it's your it's a 50-50 coin

00:15:20,769 --> 00:15:26,620
toss for what you will need to use for

00:15:23,680 --> 00:15:29,649
various resources it could be the name

00:15:26,620 --> 00:15:32,470
it could be reference well good luck

00:15:29,649 --> 00:15:35,380
some kind of ID but what is the ID not

00:15:32,470 --> 00:15:38,890
consistent again

00:15:35,380 --> 00:15:40,810
stuff still needs actual examples API

00:15:38,890 --> 00:15:43,569
documentation is kind of like Java doc

00:15:40,810 --> 00:15:45,380
yep it uses all these things how what's

00:15:43,569 --> 00:15:47,750
an actual code example

00:15:45,380 --> 00:15:53,060
well some things have it no but

00:15:47,750 --> 00:15:54,860
otherwise good luck stateful data there

00:15:53,060 --> 00:15:57,800
is no good answer for high availability

00:15:54,860 --> 00:16:00,110
this bit really really sucked we had

00:15:57,800 --> 00:16:02,450
decided that we would be using cloud SQL

00:16:00,110 --> 00:16:05,270
to replace our my sequel instances and

00:16:02,450 --> 00:16:09,050
then it turned out that we got bitten by

00:16:05,270 --> 00:16:12,380
some very nasty features Google offers a

00:16:09,050 --> 00:16:14,900
very nice thing for failover except

00:16:12,380 --> 00:16:17,330
their definition of failover is well if

00:16:14,900 --> 00:16:20,810
the entire zone goes down we will have

00:16:17,330 --> 00:16:23,240
failover but if the machine is down for

00:16:20,810 --> 00:16:25,070
maintenance and it's you can say ok it

00:16:23,240 --> 00:16:28,310
can go down for maintenance during these

00:16:25,070 --> 00:16:29,750
ARS and well it fit your maintain and

00:16:28,310 --> 00:16:33,290
sticks and are and the machine goes down

00:16:29,750 --> 00:16:35,630
there's no failover so you're certainly

00:16:33,290 --> 00:16:37,580
going my database master is dead and I

00:16:35,630 --> 00:16:40,030
can't bring it up because it's under

00:16:37,580 --> 00:16:42,500
maintenance I can't do a failover

00:16:40,030 --> 00:16:46,630
because it's not officially fully dead

00:16:42,500 --> 00:16:50,570
it's under maintenance service impacting

00:16:46,630 --> 00:16:52,130
well it's officially documented now so

00:16:50,570 --> 00:16:55,010
that's the way if you are doing cloud

00:16:52,130 --> 00:16:56,810
sequel that's a risk Google does offer

00:16:55,010 --> 00:16:59,480
multiple options for storage we use a

00:16:56,810 --> 00:17:01,880
bunch of them we use a bunch of first

00:16:59,480 --> 00:17:04,580
big data stuff for analytics and things

00:17:01,880 --> 00:17:08,900
but again a lot of code had to be

00:17:04,580 --> 00:17:13,130
rewritten to use that reliability is a

00:17:08,900 --> 00:17:15,520
trade-off when you so most of our

00:17:13,130 --> 00:17:18,200
business analytics stuff got rewritten

00:17:15,520 --> 00:17:19,370
depending on your company management and

00:17:18,200 --> 00:17:22,460
how much they were effort they want to

00:17:19,370 --> 00:17:26,450
put into that you may not want to do

00:17:22,460 --> 00:17:28,430
that it does involve code changes so if

00:17:26,450 --> 00:17:30,950
you want really highly available stuff

00:17:28,430 --> 00:17:32,750
you can use spanner but well you're

00:17:30,950 --> 00:17:35,480
rewriting your entire application to use

00:17:32,750 --> 00:17:37,370
spanner not just the whole let me change

00:17:35,480 --> 00:17:38,900
the database driver and make some minor

00:17:37,370 --> 00:17:43,220
adjustments to sequence well there's no

00:17:38,900 --> 00:17:45,500
sequel certainly for a bit so as I said

00:17:43,220 --> 00:17:48,380
cloud sequel needs a whole zone to go

00:17:45,500 --> 00:17:50,710
down if you want to use other backends

00:17:48,380 --> 00:17:52,400
infrastructures that are not sequel

00:17:50,710 --> 00:17:54,380
Redis or something

00:17:52,400 --> 00:17:55,460
again there's no default official

00:17:54,380 --> 00:17:59,420
support so you're going to be running

00:17:55,460 --> 00:18:01,340
your own and you probably want

00:17:59,420 --> 00:18:05,690
to run your own database systems at some

00:18:01,340 --> 00:18:07,640
point it's a bit higher risk then I like

00:18:05,690 --> 00:18:11,990
running random VMs on a random

00:18:07,640 --> 00:18:14,180
third-party vendor but hey ipv6 is a

00:18:11,990 --> 00:18:16,370
slightly bigger problem for us but

00:18:14,180 --> 00:18:18,650
Google not for Google they are very

00:18:16,370 --> 00:18:20,510
happy to say or if you have got ipv6

00:18:18,650 --> 00:18:22,790
clients they can connect to us on load

00:18:20,510 --> 00:18:25,310
balancers which wasn't the case a few

00:18:22,790 --> 00:18:28,670
months ago when we actor actually had to

00:18:25,310 --> 00:18:32,300
route ipv6 to Amsterdam and then make

00:18:28,670 --> 00:18:34,700
ipv4 call outs into Google cloud of

00:18:32,300 --> 00:18:37,010
course for us have being able to work in

00:18:34,700 --> 00:18:42,860
an ipv6 only environment is essential

00:18:37,010 --> 00:18:45,320
for commercial reasons IP compute is say

00:18:42,860 --> 00:18:48,650
when I say very limited I mean now it

00:18:45,320 --> 00:18:49,520
supports load balancers and that's about

00:18:48,650 --> 00:18:51,860
it really

00:18:49,520 --> 00:18:53,480
everything else good luck if you're

00:18:51,860 --> 00:18:55,880
doing Internet of Things stuff if you're

00:18:53,480 --> 00:18:58,550
working in third world if you're working

00:18:55,880 --> 00:19:02,480
it in a place where that if you expect

00:18:58,550 --> 00:19:05,540
user base in a say Belgium or in India

00:19:02,480 --> 00:19:07,580
with ipv6 pretty good you can pretty

00:19:05,540 --> 00:19:10,070
much rule out being able to make call

00:19:07,580 --> 00:19:14,650
outs from the cloud there Amazon is

00:19:10,070 --> 00:19:17,210
definitely better at this there but hey

00:19:14,650 --> 00:19:19,430
secrets passwords and stuff if you have

00:19:17,210 --> 00:19:22,010
containers Google now supports encrypted

00:19:19,430 --> 00:19:25,490
secrets they didn't have this for quite

00:19:22,010 --> 00:19:27,670
a bit of time Hoshi corpse Walt is kind

00:19:25,490 --> 00:19:30,890
of nice but it is not plug-and-play I

00:19:27,670 --> 00:19:34,700
can't say replace this config file entry

00:19:30,890 --> 00:19:36,710
with a call to wall transparently so if

00:19:34,700 --> 00:19:39,470
you're rewriting applications to use it

00:19:36,710 --> 00:19:42,620
yes if you want to do it yes it's

00:19:39,470 --> 00:19:45,340
excellent but sometimes you just can't

00:19:42,620 --> 00:19:47,480
because you've got too much legacy

00:19:45,340 --> 00:19:51,020
anything that works with your conflict

00:19:47,480 --> 00:19:53,150
management is nice we tried other

00:19:51,020 --> 00:19:55,940
high-reward back-end but it was kind of

00:19:53,150 --> 00:19:57,350
slow for us that I looked at it

00:19:55,940 --> 00:19:59,650
yesterday and they had some filters

00:19:57,350 --> 00:20:02,900
which would probably make it faster so

00:19:59,650 --> 00:20:04,940
again maybe different but you still have

00:20:02,900 --> 00:20:08,330
to worry about managing your master

00:20:04,940 --> 00:20:11,740
encryption keys and making sure that you

00:20:08,330 --> 00:20:11,740
can restore stuff from backup

00:20:12,060 --> 00:20:19,380
and protecting those backups when I say

00:20:17,400 --> 00:20:22,380
terrible I think it went a puppet rants

00:20:19,380 --> 00:20:27,120
went from a few seconds or a couple of

00:20:22,380 --> 00:20:29,520
minutes to 30 more minutes ish load

00:20:27,120 --> 00:20:31,920
balancing the load balancers are very

00:20:29,520 --> 00:20:32,870
limited I mean if you've worked with

00:20:31,920 --> 00:20:35,520
enterprise-e

00:20:32,870 --> 00:20:38,640
Hardware stuff then you have a lot of

00:20:35,520 --> 00:20:41,220
options there and you say well I have

00:20:38,640 --> 00:20:42,870
time and I have got all these abilities

00:20:41,220 --> 00:20:44,520
to do things in the load balancer and

00:20:42,870 --> 00:20:47,310
send some traffic here and some traffic

00:20:44,520 --> 00:20:50,790
there Google is like nope you got IP

00:20:47,310 --> 00:20:52,260
that's it and if you need to make if you

00:20:50,790 --> 00:20:54,660
think you're running out of resources

00:20:52,260 --> 00:20:56,310
please use our container platforms or

00:20:54,660 --> 00:20:59,100
kubernetes or something to make things

00:20:56,310 --> 00:21:02,210
scale instead of worrying about how to

00:20:59,100 --> 00:21:06,090
do so how to route traffic differently

00:21:02,210 --> 00:21:08,100
based on load or whatever so we ended up

00:21:06,090 --> 00:21:10,110
simply with replacing it with an IP

00:21:08,100 --> 00:21:12,690
based load balancer and nginx proxies

00:21:10,110 --> 00:21:14,910
you may want to use other load balancing

00:21:12,690 --> 00:21:17,370
tools we just needed web services so it

00:21:14,910 --> 00:21:20,610
was fine and then we had to discover

00:21:17,370 --> 00:21:22,440
some interesting bugs in code which were

00:21:20,610 --> 00:21:24,390
especially for things that were tracking

00:21:22,440 --> 00:21:28,980
geolocation suddenly all our users were

00:21:24,390 --> 00:21:31,140
coming from a single country we are a 24

00:21:28,980 --> 00:21:33,960
by 7 business with users all over the

00:21:31,140 --> 00:21:36,540
world so if you suddenly say all my

00:21:33,960 --> 00:21:41,460
users are now coming from the UK not

00:21:36,540 --> 00:21:44,430
very good so we had to certainly worry

00:21:41,460 --> 00:21:46,800
about that particular bit and then fix

00:21:44,430 --> 00:21:48,540
that it's a configuration fix but it

00:21:46,800 --> 00:21:50,160
still needed debugging it took four or

00:21:48,540 --> 00:21:54,500
five days to realize that this was

00:21:50,160 --> 00:21:57,570
happening monitoring was fine

00:21:54,500 --> 00:21:59,520
it's tag heuer look promising still

00:21:57,570 --> 00:22:01,320
looks promising for log management it

00:21:59,520 --> 00:22:03,300
does not deal with metrics so you're

00:22:01,320 --> 00:22:07,080
going to have to run your own management

00:22:03,300 --> 00:22:09,780
metric stack so graphite in flux TB

00:22:07,080 --> 00:22:13,110
whatever equivalence for point in time

00:22:09,780 --> 00:22:16,530
metrics stack driver is also absolutely

00:22:13,110 --> 00:22:22,290
lousy to search on well their JavaScript

00:22:16,530 --> 00:22:25,470
UI is a nightmare Jay it might improve

00:22:22,290 --> 00:22:25,830
it had quite a few retention limitations

00:22:25,470 --> 00:22:29,549
which

00:22:25,830 --> 00:22:31,559
we still haven't worked around but JD PR

00:22:29,549 --> 00:22:33,450
makes that slightly more interesting for

00:22:31,559 --> 00:22:36,360
us because we suddenly went from oh we

00:22:33,450 --> 00:22:38,190
can keep these logs for a few years to

00:22:36,360 --> 00:22:42,510
well we can not only keep them for a few

00:22:38,190 --> 00:22:44,159
weeks and new pricing can make it

00:22:42,510 --> 00:22:47,220
cheaper to run than running your own ALK

00:22:44,159 --> 00:22:50,610
stack some people don't like running ALK

00:22:47,220 --> 00:22:52,740
for whatever reasons I don't mind it but

00:22:50,610 --> 00:22:55,559
if you're running a few gigs of logging

00:22:52,740 --> 00:22:58,139
just go stack driver or whatever log

00:22:55,559 --> 00:22:59,789
management solution keep in mind that

00:22:58,139 --> 00:23:01,080
most of your cloud move is suddenly

00:22:59,789 --> 00:23:03,779
going to have you thinking going

00:23:01,080 --> 00:23:06,590
thinking from I do this with hardware to

00:23:03,779 --> 00:23:11,039
how much is this going to cost me to run

00:23:06,590 --> 00:23:12,779
it's a completely different mindset it

00:23:11,039 --> 00:23:15,720
is a good replacement for the elkay

00:23:12,779 --> 00:23:18,389
stack but it is not they're quite there

00:23:15,720 --> 00:23:20,250
for actual analytics or monitoring and

00:23:18,389 --> 00:23:24,389
you have to run your own time series

00:23:20,250 --> 00:23:27,120
database anyway so we are still running

00:23:24,389 --> 00:23:29,370
graphite we're still running a graph on

00:23:27,120 --> 00:23:32,490
on top and we have a bunch of alerts

00:23:29,370 --> 00:23:34,590
based out of that stack drive where it

00:23:32,490 --> 00:23:35,929
does alerting but we really don't do it

00:23:34,590 --> 00:23:39,179
from there at all

00:23:35,929 --> 00:23:41,940
legacy code ooh plan on migrating it

00:23:39,179 --> 00:23:43,679
wholesales even if you're applying to

00:23:41,940 --> 00:23:45,510
say I need to replace this application

00:23:43,679 --> 00:23:47,909
and we are going to do the hip new

00:23:45,510 --> 00:23:51,090
microservices thing rewrites will take

00:23:47,909 --> 00:23:52,830
longer than you plan for and your plan

00:23:51,090 --> 00:23:56,340
migrations will still take longer than

00:23:52,830 --> 00:23:59,130
expected so when I wrote this thing in

00:23:56,340 --> 00:24:01,529
January for Linux or convert au it was

00:23:59,130 --> 00:24:04,590
still well we will probably be done by

00:24:01,529 --> 00:24:06,419
March or may be of mid-april it's June

00:24:04,590 --> 00:24:07,649
and we still aren't done we're still

00:24:06,419 --> 00:24:09,960
stuck on the same old legacy

00:24:07,649 --> 00:24:12,330
applications because they have

00:24:09,960 --> 00:24:15,149
environmental assumptions like oh this

00:24:12,330 --> 00:24:16,500
is what domains will be like this is we

00:24:15,149 --> 00:24:18,510
are going to have random hard-coded

00:24:16,500 --> 00:24:20,370
domain names in there we are going to

00:24:18,510 --> 00:24:22,830
have random hard-coded host names in

00:24:20,370 --> 00:24:24,840
there and you don't think about this as

00:24:22,830 --> 00:24:28,440
ever being a problem until it needs to

00:24:24,840 --> 00:24:30,450
move and that's like no wait why is it

00:24:28,440 --> 00:24:32,760
even expecting that particular call to

00:24:30,450 --> 00:24:35,460
be on that host name oh look they want

00:24:32,760 --> 00:24:37,110
it to be secure so they said well all's

00:24:35,460 --> 00:24:39,570
must come to this host name or we are

00:24:37,110 --> 00:24:41,820
going to ignore it except well we

00:24:39,570 --> 00:24:44,759
can't use that hostname there because

00:24:41,820 --> 00:24:49,919
it's completely invalid oh good luck

00:24:44,759 --> 00:24:52,139
so lots and lots of rewrites gdpr also

00:24:49,919 --> 00:24:56,429
had a fairly significant impact on this

00:24:52,139 --> 00:24:58,200
migration bit if you're just moving your

00:24:56,429 --> 00:25:00,529
environment lock stock and barrel over

00:24:58,200 --> 00:25:03,210
its not going to help you the

00:25:00,529 --> 00:25:05,190
environment with different assumptions

00:25:03,210 --> 00:25:08,460
on latency and reliability will kill

00:25:05,190 --> 00:25:11,609
your application and I can promise you

00:25:08,460 --> 00:25:14,429
it's not fun those things go down more

00:25:11,609 --> 00:25:16,379
often than we like but we are we are

00:25:14,429 --> 00:25:19,309
expect things to go down therefore this

00:25:16,379 --> 00:25:21,539
if you are doing it on your own and

00:25:19,309 --> 00:25:22,979
management expects you can just take

00:25:21,539 --> 00:25:25,429
stuff and plonk it there and it will

00:25:22,979 --> 00:25:28,409
work it's not going to help you

00:25:25,429 --> 00:25:31,139
you're the biggest change is literally

00:25:28,409 --> 00:25:34,799
the mindset again I'm going to keep

00:25:31,139 --> 00:25:36,450
emphasizing that bit spectra was fine

00:25:34,799 --> 00:25:38,700
for us

00:25:36,450 --> 00:25:39,989
so on our hardware we didn't care too

00:25:38,700 --> 00:25:42,859
much because we are somewhat over

00:25:39,989 --> 00:25:47,340
provisioned so actual impact was minimal

00:25:42,859 --> 00:25:49,259
but in the cloud we realized that if the

00:25:47,340 --> 00:25:52,109
spectra preserve provision security

00:25:49,259 --> 00:25:54,169
stuff just literally doubled our run

00:25:52,109 --> 00:25:57,359
time for anything that's data intensive

00:25:54,169 --> 00:26:00,509
so your database applications will have

00:25:57,359 --> 00:26:04,470
an impact and you're paying based on CPU

00:26:00,509 --> 00:26:09,570
cycles and runtime are so that's a

00:26:04,470 --> 00:26:13,940
fairly significant impact again cloud

00:26:09,570 --> 00:26:17,909
migration is a business decision and

00:26:13,940 --> 00:26:19,979
it's going to be a fun one possibly you

00:26:17,909 --> 00:26:21,389
probably decide if you're a middle to

00:26:19,979 --> 00:26:24,059
large enterprise that it's not worth

00:26:21,389 --> 00:26:27,090
doing simply because the economics don't

00:26:24,059 --> 00:26:30,450
work out if you're running more than for

00:26:27,090 --> 00:26:34,830
about a few hundred machines it's simply

00:26:30,450 --> 00:26:36,869
just too expensive to do that and you'll

00:26:34,830 --> 00:26:39,599
have to keep monitoring your costs

00:26:36,869 --> 00:26:41,190
closely we have official alert we

00:26:39,599 --> 00:26:42,869
actually have alerts based on when

00:26:41,190 --> 00:26:45,389
things start to run out and we have

00:26:42,869 --> 00:26:46,979
fairly low budgets you will discover a

00:26:45,389 --> 00:26:49,619
number of ways in which money is wasted

00:26:46,979 --> 00:26:50,849
in the cloud sometimes it's just that

00:26:49,619 --> 00:26:52,610
you're over provision the machine

00:26:50,849 --> 00:26:54,110
slightly expecting

00:26:52,610 --> 00:26:56,660
that this is going to be what load the

00:26:54,110 --> 00:26:58,040
machine is going to take and then it

00:26:56,660 --> 00:27:00,380
turns her well no that's not going to

00:26:58,040 --> 00:27:03,110
happen and then you realize it's cost

00:27:00,380 --> 00:27:05,780
you a few thousand euros suddenly well I

00:27:03,110 --> 00:27:07,460
did that I provisioned a machine for

00:27:05,780 --> 00:27:10,340
full load and then we did realize we

00:27:07,460 --> 00:27:11,990
weren't anywhere close to that or we had

00:27:10,340 --> 00:27:14,390
debug logging which is why we were going

00:27:11,990 --> 00:27:16,280
to run e lk and then we realized that

00:27:14,390 --> 00:27:19,160
well if you turn out debug logging and

00:27:16,280 --> 00:27:21,920
keep it to a sane level reduces like 90

00:27:19,160 --> 00:27:23,480
percent of your log volume internally we

00:27:21,920 --> 00:27:26,000
didn't care because well it's just disk

00:27:23,480 --> 00:27:27,110
storage and we have it a lot of it so

00:27:26,000 --> 00:27:29,570
who cares right

00:27:27,110 --> 00:27:33,169
stories note storage is cheap in the

00:27:29,570 --> 00:27:34,850
cloud suddenly that gets expensive it so

00:27:33,169 --> 00:27:36,590
our stack driver expenses would have

00:27:34,850 --> 00:27:39,530
been somewhere in the few thousand euros

00:27:36,590 --> 00:27:41,740
a month range it dropped to about a few

00:27:39,530 --> 00:27:43,910
hundred couple of hundred or so

00:27:41,740 --> 00:27:46,190
essentially the point at which you go

00:27:43,910 --> 00:27:48,200
we're running our own infrastructure is

00:27:46,190 --> 00:27:50,390
going to cost us model in manners and in

00:27:48,200 --> 00:27:54,260
discussion about running it then just

00:27:50,390 --> 00:27:56,059
using stag driver outsourcing your l1

00:27:54,260 --> 00:27:58,720
operations team to people who don't care

00:27:56,059 --> 00:28:02,299
same problem as was 15 years ago

00:27:58,720 --> 00:28:04,400
the support still sucks well it sucks

00:28:02,299 --> 00:28:06,410
less if you pay more but it still sucks

00:28:04,400 --> 00:28:10,150
and you still can't go just say I would

00:28:06,410 --> 00:28:13,520
like to have a low access does not work

00:28:10,150 --> 00:28:15,020
this their priorities are not your

00:28:13,520 --> 00:28:17,510
priorities and sometimes you're like

00:28:15,020 --> 00:28:20,960
this particular thing is broken well

00:28:17,510 --> 00:28:22,790
it's working as designed we had this the

00:28:20,960 --> 00:28:25,040
problem with the cloud SQL thing and

00:28:22,790 --> 00:28:28,040
it's popped up a few other times again

00:28:25,040 --> 00:28:32,480
when the companies where the vendors

00:28:28,040 --> 00:28:35,059
priorities are not yours choosing which

00:28:32,480 --> 00:28:36,910
provider you want to go with pretty

00:28:35,059 --> 00:28:40,669
small differences still at this point

00:28:36,910 --> 00:28:42,350
you don't care too much about what the

00:28:40,669 --> 00:28:44,059
big differences are because if

00:28:42,350 --> 00:28:45,860
effectively they give you the same thing

00:28:44,059 --> 00:28:49,640
if you're running your own data bases

00:28:45,860 --> 00:28:51,230
and your own other thing well and your

00:28:49,640 --> 00:28:53,330
applications are moving lock stock and

00:28:51,230 --> 00:28:55,130
barrel doesn't matter kubernetes and

00:28:53,330 --> 00:28:57,440
containers are now supported equally

00:28:55,130 --> 00:29:00,650
everywhere so it shouldn't matter too

00:28:57,440 --> 00:29:01,970
much again so if you're going to run

00:29:00,650 --> 00:29:03,440
with really small differences you

00:29:01,970 --> 00:29:06,500
basically go with well what's the price

00:29:03,440 --> 00:29:09,050
and what's the best option for

00:29:06,500 --> 00:29:11,000
porting tooling is still raw as I

00:29:09,050 --> 00:29:13,640
mentioned we are still discovering

00:29:11,000 --> 00:29:15,740
operational design patterns there are no

00:29:13,640 --> 00:29:19,810
published best practices out there

00:29:15,740 --> 00:29:22,430
except for very small startups but hey

00:29:19,810 --> 00:29:25,340
we are getting there another five years

00:29:22,430 --> 00:29:28,550
or so before we have actual useful

00:29:25,340 --> 00:29:29,870
information and of course migrating is

00:29:28,550 --> 00:29:32,600
going to require a whole change in

00:29:29,870 --> 00:29:34,610
process and mindset especially if you're

00:29:32,600 --> 00:29:36,080
a large idle shop that thinks well we

00:29:34,610 --> 00:29:39,140
are now agile because we can do a

00:29:36,080 --> 00:29:40,490
release every 15 days no that's not

00:29:39,140 --> 00:29:43,220
going to work out for you you're

00:29:40,490 --> 00:29:44,630
thinking everybody including developers

00:29:43,220 --> 00:29:49,490
is going to have to be thinking in terms

00:29:44,630 --> 00:29:51,740
of dollars cents euros saying is this

00:29:49,490 --> 00:29:53,960
algorithm more efficient you could just

00:29:51,740 --> 00:29:55,400
say well hardware is cheap suddenly in

00:29:53,960 --> 00:29:58,340
the cloud it's not because you're not

00:29:55,400 --> 00:30:01,310
paying per cycle can you reduce your

00:29:58,340 --> 00:30:03,110
data usage can you reduce CPU cycles can

00:30:01,310 --> 00:30:06,710
you deploy faster can you make changes

00:30:03,110 --> 00:30:09,050
more often how good is your CI I mean I

00:30:06,710 --> 00:30:11,270
could I can literally actually merge a

00:30:09,050 --> 00:30:13,730
change right now into production and if

00:30:11,270 --> 00:30:15,440
it will work assuming somebody's work my

00:30:13,730 --> 00:30:18,950
somebody's approved my push request

00:30:15,440 --> 00:30:21,350
somebody's approved my pull request but

00:30:18,950 --> 00:30:23,690
I can do this at 6 p.m. on a I could do

00:30:21,350 --> 00:30:26,930
this on 6 p.m. on a Friday and we would

00:30:23,690 --> 00:30:28,940
go about business as usual if you can't

00:30:26,930 --> 00:30:31,640
think of being able to do a roll out at

00:30:28,940 --> 00:30:34,370
6 p.m. on Friday evenings as business as

00:30:31,640 --> 00:30:36,320
usual well there's a whole bunch of

00:30:34,370 --> 00:30:38,090
cultural changes that you need to get

00:30:36,320 --> 00:30:40,820
through first for cloud migrations to

00:30:38,090 --> 00:30:43,070
work because if you aren't going to be

00:30:40,820 --> 00:30:45,920
in that mindset your migration is going

00:30:43,070 --> 00:30:47,810
to fail you cannot just say this is a

00:30:45,920 --> 00:30:50,030
new data center vendor this is literally

00:30:47,810 --> 00:30:53,780
I'm going to be running stuff on very

00:30:50,030 --> 00:30:56,060
unstable hardware and we need to be able

00:30:53,780 --> 00:30:58,520
to do very frequent deployments lots of

00:30:56,060 --> 00:31:01,250
light changes stuff that is recommended

00:30:58,520 --> 00:31:03,190
for most startups yes but now you need

00:31:01,250 --> 00:31:05,330
to do this at a really big scale and

00:31:03,190 --> 00:31:08,750
usually talking to people who aren't

00:31:05,330 --> 00:31:10,310
used to thinking it of saying oh if it

00:31:08,750 --> 00:31:11,630
goes wrong it goes wrong we don't need

00:31:10,310 --> 00:31:13,220
to have two machines doing high

00:31:11,630 --> 00:31:20,080
availability because it automatically

00:31:13,220 --> 00:31:20,080
respawn in five minutes so questions

00:31:22,190 --> 00:31:40,950
anyone restaurants thank you thanks for

00:31:39,030 --> 00:31:45,000
your insights do you have some numbers

00:31:40,950 --> 00:31:48,150
for us concerning sizing of the

00:31:45,000 --> 00:31:52,500
landscape or the number of heads and

00:31:48,150 --> 00:31:55,020
your teams so let's see we have a team

00:31:52,500 --> 00:31:57,240
of developers for native application

00:31:55,020 --> 00:32:00,060
game backends basically so that will be

00:31:57,240 --> 00:32:02,610
about 210 or people and other ten our

00:32:00,060 --> 00:32:04,320
developers for our portals and stuff and

00:32:02,610 --> 00:32:07,950
seven people and operations that

00:32:04,320 --> 00:32:11,490
includes two DBAs one hardware person

00:32:07,950 --> 00:32:13,410
and for generic engineering types but we

00:32:11,490 --> 00:32:16,080
basically are a team that can do that

00:32:13,410 --> 00:32:18,060
can and will do everything else as

00:32:16,080 --> 00:32:20,070
needed so even if databases are my

00:32:18,060 --> 00:32:23,430
primary responsibilities I will also do

00:32:20,070 --> 00:32:24,740
network setups and random other things

00:32:23,430 --> 00:32:27,480
as required

00:32:24,740 --> 00:32:31,050
we all have speciality is it rather than

00:32:27,480 --> 00:32:32,280
full-on teams but that's kind of what we

00:32:31,050 --> 00:32:35,460
are looking at if you're looking at

00:32:32,280 --> 00:32:38,460
hardware we have what about 50 racks

00:32:35,460 --> 00:32:41,700
worth of hardware because legacy issues

00:32:38,460 --> 00:32:44,370
and stuff but still and we use most of

00:32:41,700 --> 00:32:46,290
it we do quite a lot of analytics so we

00:32:44,370 --> 00:32:48,930
had a whole bunch of Hadoop machines and

00:32:46,290 --> 00:32:51,930
other analytic hardware which we wanted

00:32:48,930 --> 00:32:53,820
to replace anyway so if you're looking

00:32:51,930 --> 00:32:56,460
at so we are looking at about say a

00:32:53,820 --> 00:32:58,800
thousand odd machines total or seven

00:32:56,460 --> 00:33:03,060
eight hundred machines roughly say in

00:32:58,800 --> 00:33:10,170
production so that should give you a

00:33:03,060 --> 00:33:15,410
rough idea of what we are looking at so

00:33:10,170 --> 00:33:20,280
you will run a mixture of GCE and

00:33:15,410 --> 00:33:23,100
kubernetes well it is no it's all

00:33:20,280 --> 00:33:25,280
kubernetes at this point so you try to

00:33:23,100 --> 00:33:27,990
move it every application to coven it is

00:33:25,280 --> 00:33:30,660
pretty much the idea is that we have a

00:33:27,990 --> 00:33:32,700
bunch of things that we can reasonably

00:33:30,660 --> 00:33:34,980
split up into micro services

00:33:32,700 --> 00:33:36,509
so that's what we are going to do with

00:33:34,980 --> 00:33:38,489
it and then that goes into kubernetes

00:33:36,509 --> 00:33:41,879
because that's what other things are

00:33:38,489 --> 00:33:44,159
doing we have a couple of gke things but

00:33:41,879 --> 00:33:46,830
that's mostly support applications that

00:33:44,159 --> 00:33:48,179
if there that are convenient because for

00:33:46,830 --> 00:33:50,359
the way of automation of our

00:33:48,179 --> 00:34:07,710
provisioning and other things but not

00:33:50,359 --> 00:34:10,950
really anybody else I have a question

00:34:07,710 --> 00:34:12,450
regarding window login so perhaps you

00:34:10,950 --> 00:34:14,730
can use some tools like terraformed or

00:34:12,450 --> 00:34:17,669
abstracted that you use like AWS or

00:34:14,730 --> 00:34:18,629
Escher it's a coupon it is the way where

00:34:17,669 --> 00:34:20,129
you would like to create another

00:34:18,629 --> 00:34:21,809
abstraction that you can move your

00:34:20,129 --> 00:34:24,929
kubernetes away from from let's say

00:34:21,809 --> 00:34:26,879
Google's to Amazon or is it in any way a

00:34:24,929 --> 00:34:29,159
thing where you know I think in the

00:34:26,879 --> 00:34:30,899
proof of concept no not really the when

00:34:29,159 --> 00:34:33,329
we did the proof of concept it was still

00:34:30,899 --> 00:34:36,929
all Messrs the kubernetes thing is

00:34:33,329 --> 00:34:39,149
entirely developer driven it's not it's

00:34:36,929 --> 00:34:40,649
not operations driven at all okay if the

00:34:39,149 --> 00:34:43,169
developers think that the best way they

00:34:40,649 --> 00:34:46,169
can do stuff is while kubernetes then

00:34:43,169 --> 00:34:48,389
they get to choose their tools we don't

00:34:46,169 --> 00:34:50,909
restrict people very much on what they

00:34:48,389 --> 00:34:52,440
can do so we have at a few develop we

00:34:50,909 --> 00:34:56,040
have had at least one person who

00:34:52,440 --> 00:34:57,960
required us to use MongoDB I believe

00:34:56,040 --> 00:35:04,349
some people may have heard my very

00:34:57,960 --> 00:35:06,690
strong opinions on the topic but yes so

00:35:04,349 --> 00:35:08,880
we were if you need MongoDB you get

00:35:06,690 --> 00:35:11,369
 if you want Redis you get ready if

00:35:08,880 --> 00:35:13,859
you want my sequel if you want Postgres

00:35:11,369 --> 00:35:16,230
it doesn't really matter and from a

00:35:13,859 --> 00:35:17,940
vendor login perspective so is it is it

00:35:16,230 --> 00:35:20,970
a thing it is say ok this service is now

00:35:17,940 --> 00:35:22,470
relying on Google and if we are not

00:35:20,970 --> 00:35:23,940
happy with them anymore that that

00:35:22,470 --> 00:35:25,859
nowadays I see that more and more people

00:35:23,940 --> 00:35:28,680
build their applications around that

00:35:25,859 --> 00:35:30,750
specific cloud stack so for the

00:35:28,680 --> 00:35:32,609
analytics part it's very much built

00:35:30,750 --> 00:35:35,910
around it because that was a risk we

00:35:32,609 --> 00:35:37,920
decided to take as a business risk but

00:35:35,910 --> 00:35:39,839
if we wanted to run our own we could

00:35:37,920 --> 00:35:42,119
just move back it would require

00:35:39,839 --> 00:35:44,910
recording to be a part of the BI stack

00:35:42,119 --> 00:35:46,500
at this point but I mean it would

00:35:44,910 --> 00:35:49,740
require us to do way more

00:35:46,500 --> 00:35:51,930
just record the BI stack again the

00:35:49,740 --> 00:35:54,780
business intelligence bits are very much

00:35:51,930 --> 00:35:57,210
dependent on Google's infrastructure but

00:35:54,780 --> 00:35:59,070
the compute bits of it are not we can

00:35:57,210 --> 00:36:02,460
move those trammel if you say we need to

00:35:59,070 --> 00:36:05,580
be in Amazon on next Monday doable if

00:36:02,460 --> 00:36:07,530
you say tomorrow a bit harder because we

00:36:05,580 --> 00:36:09,420
simply would need to replace a bunch of

00:36:07,530 --> 00:36:11,640
the terraform code and offices enough

00:36:09,420 --> 00:36:13,050
AWS experience to say well this is how

00:36:11,640 --> 00:36:16,350
we can do this is how things should be

00:36:13,050 --> 00:36:18,660
done most of other infrastructure bits

00:36:16,350 --> 00:36:19,830
are abstracted away but at some point if

00:36:18,660 --> 00:36:22,050
you are doing cloud stuff you have to

00:36:19,830 --> 00:36:25,320
accept that there will be a bunch of

00:36:22,050 --> 00:36:27,390
vendor lock-in simply because every tool

00:36:25,320 --> 00:36:29,850
every vendor has their own little bits

00:36:27,390 --> 00:36:32,490
and pieces that will hook into your

00:36:29,850 --> 00:36:34,500
applications API is whatever and it

00:36:32,490 --> 00:36:36,030
becomes ok this is what you're doing if

00:36:34,500 --> 00:36:42,690
you want to have no vendor lock-in just

00:36:36,030 --> 00:36:47,880
run your own hardware and some questions

00:36:42,690 --> 00:36:51,190
laughter oh no yeah okay all right Thank

00:36:47,880 --> 00:36:52,350
You Dennis for being here

00:36:51,190 --> 00:37:12,920
[Applause]

00:36:52,350 --> 00:37:12,920

YouTube URL: https://www.youtube.com/watch?v=h7f2A2tTahg


