Title: OSDC 2018 | Lifecycle of a resource by Anton Babenko
Publication date: 2018-06-22
Playlist: OSDC 2018 | Open Source Data Center Conference
Description: 
	Codifying infrastructure with Terraform for the future

Immutable infrastructure is a way to success, but what about the lifecycle of individual resources. This talk is about evolution of resources, code structure, Terraform coding tricks, composition and refactoring.

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de
Blog: http://blog.netways.de
Webinare: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Google+: https://plus.google.com/+netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh

https://www.frametraxx.de/
Captions: 
	00:00:00,540 --> 00:00:03,369
[Music]

00:00:01,310 --> 00:00:03,369
you

00:00:11,750 --> 00:00:15,940
[Music]

00:00:13,170 --> 00:00:18,369
so thanks everyone for coming to my talk

00:00:15,940 --> 00:00:20,200
I'm gonna to talk about things which I'm

00:00:18,369 --> 00:00:23,170
really excited for the last several

00:00:20,200 --> 00:00:25,690
years so that's why I like when people

00:00:23,170 --> 00:00:28,420
refer to me as terraform a SS fanatic

00:00:25,690 --> 00:00:31,119
one of the reason for that is that I've

00:00:28,420 --> 00:00:32,830
been active in a diverse and telephone

00:00:31,119 --> 00:00:36,460
community for the last three years and

00:00:32,830 --> 00:00:39,400
I'm one of maintainer of terraform AWS

00:00:36,460 --> 00:00:41,469
modules in my spare time I organize

00:00:39,400 --> 00:00:44,410
different events and participate as

00:00:41,469 --> 00:00:47,050
actively as possible in different

00:00:44,410 --> 00:00:49,090
open-source activities so if you have

00:00:47,050 --> 00:00:51,579
any questions after the talk and don't

00:00:49,090 --> 00:00:54,940
have chance to ask here don't hesitate

00:00:51,579 --> 00:00:57,460
to tweet or reach me anyhow I really

00:00:54,940 --> 00:01:03,579
like to answer questions even if you are

00:00:57,460 --> 00:01:06,660
shy so this talk is about resources

00:01:03,579 --> 00:01:09,550
resources in terraform is literally

00:01:06,660 --> 00:01:13,390
approximately 1,000 of different pieces

00:01:09,550 --> 00:01:14,740
so you can achieve this by doing

00:01:13,390 --> 00:01:18,729
different things like clicking in

00:01:14,740 --> 00:01:23,260
console or even draw them like using

00:01:18,729 --> 00:01:27,009
cloud crafts in browser and visualize

00:01:23,260 --> 00:01:30,490
what's gonna to be created but in the

00:01:27,009 --> 00:01:34,119
end of the day resources is just easy to

00:01:30,490 --> 00:01:37,360
instance or s3 bucket or RDS I'm going

00:01:34,119 --> 00:01:40,049
to use terms which are related to AWS

00:01:37,360 --> 00:01:43,560
simply because that's what I work like

00:01:40,049 --> 00:01:47,079
full-time on that you can definitely

00:01:43,560 --> 00:01:49,329
convert this into your favorite public

00:01:47,079 --> 00:01:51,820
cloud provider or any other provider as

00:01:49,329 --> 00:01:54,939
Mitchell mentioned during keynote

00:01:51,820 --> 00:01:57,369
session today as a terraform is good not

00:01:54,939 --> 00:01:58,600
that managing just the same resources

00:01:57,369 --> 00:02:00,880
which you can manage using

00:01:58,600 --> 00:02:02,890
CloudFormation for example but it also

00:02:00,880 --> 00:02:06,549
good as a glue between different

00:02:02,890 --> 00:02:08,470
providers and as of now there are lots

00:02:06,549 --> 00:02:12,610
of them so that's why amount of

00:02:08,470 --> 00:02:16,480
resources is about 1000 which is very a

00:02:12,610 --> 00:02:19,840
lot so this talk is going to be about

00:02:16,480 --> 00:02:22,870
terraform and I just want to know who is

00:02:19,840 --> 00:02:27,190
using terraform in production or

00:02:22,870 --> 00:02:30,040
familiar with concepts so excellent

00:02:27,190 --> 00:02:34,360
because I have only one maybe two slides

00:02:30,040 --> 00:02:36,670
about basics so that we don't go in what

00:02:34,360 --> 00:02:38,830
is already described in documentation so

00:02:36,670 --> 00:02:41,519
terraform is a tool to write plan and

00:02:38,830 --> 00:02:43,599
create infrastructure as code and

00:02:41,519 --> 00:02:45,190
resources which are part of this

00:02:43,599 --> 00:02:48,519
infrastructure can be very very

00:02:45,190 --> 00:02:51,519
different things so you as developer

00:02:48,519 --> 00:02:54,610
write something like TF file where you

00:02:51,519 --> 00:02:56,890
declare what kind of resources you want

00:02:54,610 --> 00:03:00,340
to create in this example I create a

00:02:56,890 --> 00:03:02,500
three bucket with random name then I run

00:03:00,340 --> 00:03:05,650
terraform init command to download

00:03:02,500 --> 00:03:09,129
dependencies like plugin for the

00:03:05,650 --> 00:03:11,560
providers of specific versions and then

00:03:09,129 --> 00:03:13,840
I run terraform apply to see what's

00:03:11,560 --> 00:03:15,670
gonna to be changed and then when I

00:03:13,840 --> 00:03:16,180
apply this and I confirmed that's what I

00:03:15,670 --> 00:03:19,269
want

00:03:16,180 --> 00:03:22,180
I see that my bucket see snail has been

00:03:19,269 --> 00:03:24,370
successfully created so that's in

00:03:22,180 --> 00:03:27,549
essence everything whatever form is

00:03:24,370 --> 00:03:30,910
about declare what you want execute

00:03:27,549 --> 00:03:34,090
comment and get result nice anymore

00:03:30,910 --> 00:03:36,700
but the thing starts to be complicated

00:03:34,090 --> 00:03:38,230
because after you created something you

00:03:36,700 --> 00:03:41,250
then realize that you will have to

00:03:38,230 --> 00:03:45,430
update it right it's not static things

00:03:41,250 --> 00:03:47,590
so and even more complicated things will

00:03:45,430 --> 00:03:49,989
be when you realize that the reform is

00:03:47,590 --> 00:03:54,609
such dynamic project which is being

00:03:49,989 --> 00:03:54,970
released every two weeks to every three

00:03:54,609 --> 00:03:56,919
months

00:03:54,970 --> 00:03:58,989
it depends what kind of components you

00:03:56,919 --> 00:04:02,019
look if its core then it's the reason

00:03:58,989 --> 00:04:04,090
not so frequent because it does have to

00:04:02,019 --> 00:04:05,799
be changed so often but if you're

00:04:04,090 --> 00:04:08,049
looking at specific provider version

00:04:05,799 --> 00:04:11,680
then it release much more frequently

00:04:08,049 --> 00:04:14,349
literally every two weeks but this talk

00:04:11,680 --> 00:04:17,470
is going to be about resources and what

00:04:14,349 --> 00:04:19,419
you have to pay attention when you are

00:04:17,470 --> 00:04:22,330
declaring or describe in your

00:04:19,419 --> 00:04:25,630
infrastructure and in particular there

00:04:22,330 --> 00:04:27,789
will be some information which hopefully

00:04:25,630 --> 00:04:29,349
you can apply immediately and stay

00:04:27,789 --> 00:04:32,260
forward compatible with upcoming

00:04:29,349 --> 00:04:33,240
versions which will be happening quite

00:04:32,260 --> 00:04:36,490
soon

00:04:33,240 --> 00:04:40,270
so to

00:04:36,490 --> 00:04:43,780
put everyone on the same level I would

00:04:40,270 --> 00:04:46,900
say let's just go through terraforming

00:04:43,780 --> 00:04:49,180
primitives which are important for this

00:04:46,900 --> 00:04:51,910
specific talk so there are resources

00:04:49,180 --> 00:04:54,100
data sources variables and set of

00:04:51,910 --> 00:04:55,690
foreign state there are twenty other

00:04:54,100 --> 00:04:57,940
different types of primitives and

00:04:55,690 --> 00:04:59,950
concepts which are well described in

00:04:57,940 --> 00:05:01,930
terraforming documentation I don't want

00:04:59,950 --> 00:05:04,240
to go through that there they're not so

00:05:01,930 --> 00:05:07,330
relevant for this talk so resources

00:05:04,240 --> 00:05:10,150
support crud operations to create read

00:05:07,330 --> 00:05:14,320
update and delete that's all they can

00:05:10,150 --> 00:05:18,670
also do contain some lifecycle to make

00:05:14,320 --> 00:05:20,830
sure that you don't want to to destroy

00:05:18,670 --> 00:05:23,440
resource by accident

00:05:20,830 --> 00:05:26,830
and by the way who is familiar with AWS

00:05:23,440 --> 00:05:29,380
concepts like if there is term like

00:05:26,830 --> 00:05:31,290
elastic IP address does it make sense

00:05:29,380 --> 00:05:34,780
for everyone

00:05:31,290 --> 00:05:39,880
sounds like sounds like yes from the end

00:05:34,780 --> 00:05:43,720
yes so this specific example of the code

00:05:39,880 --> 00:05:46,750
as you can see has lifecycle create

00:05:43,720 --> 00:05:49,060
before destroy to make sure that new

00:05:46,750 --> 00:05:52,120
instance is launched before old one is

00:05:49,060 --> 00:05:54,580
destroyed and similar can be applied for

00:05:52,120 --> 00:05:56,230
bucket which contains very important

00:05:54,580 --> 00:05:58,030
information which you don't want to lose

00:05:56,230 --> 00:06:03,000
so then you have to specify prevent

00:05:58,030 --> 00:06:05,500
destroy equal true data sources is

00:06:03,000 --> 00:06:08,290
similar to resources but they support

00:06:05,500 --> 00:06:12,490
only read-only operations so in this

00:06:08,290 --> 00:06:16,270
example there are two data sources want

00:06:12,490 --> 00:06:18,520
to get default EPC and another one is to

00:06:16,270 --> 00:06:22,090
get default security group within this V

00:06:18,520 --> 00:06:26,470
PC and the third one mentioned here on

00:06:22,090 --> 00:06:29,320
line 10 is terraform remote state to get

00:06:26,470 --> 00:06:33,150
information for already created

00:06:29,320 --> 00:06:36,370
resources from other terraform execution

00:06:33,150 --> 00:06:41,050
and it also has some default values

00:06:36,370 --> 00:06:44,920
which is not often not often used by

00:06:41,050 --> 00:06:47,390
developers so variables on another side

00:06:44,920 --> 00:06:50,810
is what

00:06:47,390 --> 00:06:53,210
what you want users and terraform to

00:06:50,810 --> 00:06:56,330
operate with so there are literally

00:06:53,210 --> 00:06:59,120
three types of them one is string

00:06:56,330 --> 00:07:01,850
integer and boolean this is internally

00:06:59,120 --> 00:07:05,720
the same type and there is list and

00:07:01,850 --> 00:07:08,750
there is map if we look into types of

00:07:05,720 --> 00:07:11,090
variables we can see that the most

00:07:08,750 --> 00:07:12,710
powerful type is three-inch integer and

00:07:11,090 --> 00:07:15,370
boolean because it can be used

00:07:12,710 --> 00:07:19,490
everywhere it can be passed everywhere

00:07:15,370 --> 00:07:21,980
and it can be interpolated in all

00:07:19,490 --> 00:07:26,210
possible places so that's if you are

00:07:21,980 --> 00:07:29,420
unsure whether you can whether you can

00:07:26,210 --> 00:07:32,330
use something else you can always write

00:07:29,420 --> 00:07:35,360
it safely in following string integer or

00:07:32,330 --> 00:07:38,420
boolean in upcoming versions I will tell

00:07:35,360 --> 00:07:44,390
about this later this red rectangles

00:07:38,420 --> 00:07:46,180
will be fixed so terraform state is the

00:07:44,390 --> 00:07:49,250
last concept which is important to

00:07:46,180 --> 00:07:50,810
understand for this specific talk is

00:07:49,250 --> 00:07:52,880
that this is just json file which

00:07:50,810 --> 00:07:56,630
contains information about created

00:07:52,880 --> 00:07:59,750
resources and it is used internally by

00:07:56,630 --> 00:08:03,770
terraform so humans often should not

00:07:59,750 --> 00:08:05,780
touch it so if you want you can you can

00:08:03,770 --> 00:08:08,840
use terraform comments like terraform

00:08:05,780 --> 00:08:11,810
show to get or to extract part of it if

00:08:08,840 --> 00:08:14,900
you need to work with this json state

00:08:11,810 --> 00:08:16,700
file there are comments to update parts

00:08:14,900 --> 00:08:19,420
of it and to move certain blocks around

00:08:16,700 --> 00:08:23,690
i will talk through that later

00:08:19,420 --> 00:08:27,500
so as an example this specific s3 bucket

00:08:23,690 --> 00:08:29,350
called my bucket is private and i have a

00:08:27,500 --> 00:08:32,900
lot of secrets out there so I don't want

00:08:29,350 --> 00:08:35,210
terraform to accidentally delete it this

00:08:32,900 --> 00:08:39,920
example creates security group with one

00:08:35,210 --> 00:08:43,960
security group rule which is everything

00:08:39,920 --> 00:08:46,840
should be publicly open for ingress and

00:08:43,960 --> 00:08:50,030
a little bit more complicated example if

00:08:46,840 --> 00:08:52,220
you want to use tariffs or modules in

00:08:50,030 --> 00:08:57,320
essence tariffs for model is collection

00:08:52,220 --> 00:09:00,090
of resources which serve similar goal so

00:08:57,320 --> 00:09:02,550
it's like single function

00:09:00,090 --> 00:09:10,380
which has to be executed and it accept

00:09:02,550 --> 00:09:13,370
different arguments so this code has has

00:09:10,380 --> 00:09:16,290
two invocation of security group module

00:09:13,370 --> 00:09:19,710
and different values are passed to it

00:09:16,290 --> 00:09:21,780
the code for this module is open source

00:09:19,710 --> 00:09:23,490
as well as code for all slides which

00:09:21,780 --> 00:09:27,750
would be included in the presentation is

00:09:23,490 --> 00:09:31,020
open source so when you are starting

00:09:27,750 --> 00:09:33,570
with small infrastructure you you start

00:09:31,020 --> 00:09:36,030
almost always equally you read

00:09:33,570 --> 00:09:37,980
documentation you just copy examples

00:09:36,030 --> 00:09:40,890
from there you start right in main dough

00:09:37,980 --> 00:09:44,430
TF file you declare some variables you

00:09:40,890 --> 00:09:45,090
run terraform init plan apply everything

00:09:44,430 --> 00:09:47,340
looks good

00:09:45,090 --> 00:09:49,680
then you figure out that you have more

00:09:47,340 --> 00:09:52,200
than let's say 20 resources in one file

00:09:49,680 --> 00:09:54,210
and you start to think that maybe there

00:09:52,200 --> 00:09:58,680
are better ways to do this to organize

00:09:54,210 --> 00:10:01,530
code more efficiently so that's where

00:09:58,680 --> 00:10:04,500
you come to the concept of module module

00:10:01,530 --> 00:10:07,530
as I said earlier is grouping of

00:10:04,500 --> 00:10:09,300
resources and data sources data sources

00:10:07,530 --> 00:10:11,070
are used to fetch information about

00:10:09,300 --> 00:10:13,550
external dependencies while the

00:10:11,070 --> 00:10:17,430
resources are actually creating this

00:10:13,550 --> 00:10:20,550
common sense of the module in official

00:10:17,430 --> 00:10:24,090
documentation there is diagram which

00:10:20,550 --> 00:10:26,610
explains whether you have to make module

00:10:24,090 --> 00:10:29,400
and if you follow this official

00:10:26,610 --> 00:10:31,050
recommended practice most likely you

00:10:29,400 --> 00:10:34,800
will end up in the bottom don't write a

00:10:31,050 --> 00:10:37,260
module I don't know why but a lot of

00:10:34,800 --> 00:10:41,070
people think that they need to write a

00:10:37,260 --> 00:10:43,260
module for vbc because I'm so unique I

00:10:41,070 --> 00:10:46,380
will make my VPC module which will be

00:10:43,260 --> 00:10:47,790
the best and then they see this diagram

00:10:46,380 --> 00:10:52,260
and then they figure out that oh yeah

00:10:47,790 --> 00:10:56,610
it's not so so I don't need it so I kind

00:10:52,260 --> 00:10:59,790
of agree to this diagram but 50% so for

00:10:56,610 --> 00:11:03,510
my understanding there are actually two

00:10:59,790 --> 00:11:06,570
types of modules within terraform some

00:11:03,510 --> 00:11:09,660
of them I create just resources nothing

00:11:06,570 --> 00:11:11,760
else so they're very flexible there they

00:11:09,660 --> 00:11:13,980
accept dozens of different parameters

00:11:11,760 --> 00:11:16,380
and they have no

00:11:13,980 --> 00:11:19,650
relations to anything else they just do

00:11:16,380 --> 00:11:23,550
what supposed to do like security group

00:11:19,650 --> 00:11:27,560
if you work with terraform then you may

00:11:23,550 --> 00:11:30,360
know that there are lots of different

00:11:27,560 --> 00:11:32,520
arguments for all of these resources and

00:11:30,360 --> 00:11:35,850
resource module is just hide a lot of

00:11:32,520 --> 00:11:38,580
this for you on another side what I

00:11:35,850 --> 00:11:41,460
actually think has to be much more

00:11:38,580 --> 00:11:45,300
widely used is tariffs or modules for

00:11:41,460 --> 00:11:47,670
infrastructure components like in a good

00:11:45,300 --> 00:11:49,890
example of infrastructure module can be

00:11:47,670 --> 00:11:52,230
something what sort of just your purpose

00:11:49,890 --> 00:11:54,960
so its collection of resource modules

00:11:52,230 --> 00:11:57,180
like you need to create load balancer

00:11:54,960 --> 00:11:59,490
you need to create VPC and you need to

00:11:57,180 --> 00:12:02,370
deploy application there and all of this

00:11:59,490 --> 00:12:04,550
can accept several parameters so that's

00:12:02,370 --> 00:12:07,170
a good example of infrastructure module

00:12:04,550 --> 00:12:09,630
often company-wide standards are

00:12:07,170 --> 00:12:12,270
enforced in this infrastructure models

00:12:09,630 --> 00:12:14,580
and often if you have different teams

00:12:12,270 --> 00:12:16,650
working with terraform infrastructure

00:12:14,580 --> 00:12:20,610
module is a smallest component which can

00:12:16,650 --> 00:12:23,760
be spread across the whole company it's

00:12:20,610 --> 00:12:26,340
totally possible to use resource modules

00:12:23,760 --> 00:12:28,710
and let developers play but if you want

00:12:26,340 --> 00:12:32,910
to simplify it for them and still have

00:12:28,710 --> 00:12:35,190
control over what quality of the code is

00:12:32,910 --> 00:12:38,220
then infrastructure model is often built

00:12:35,190 --> 00:12:43,350
by DevOps team and then used by

00:12:38,220 --> 00:12:45,690
individual development teams so why on

00:12:43,350 --> 00:12:49,680
earth resource modules exist why can as

00:12:45,690 --> 00:12:51,570
you use just resource natively my answer

00:12:49,680 --> 00:12:53,970
to that is that resources cannot be

00:12:51,570 --> 00:12:57,720
versioned and this is very important if

00:12:53,970 --> 00:12:59,460
you want to make specific if you want to

00:12:57,720 --> 00:13:03,390
lock your infrastructure to specific

00:12:59,460 --> 00:13:05,850
version and can have guarantee that this

00:13:03,390 --> 00:13:09,480
is my infrastructure it has this

00:13:05,850 --> 00:13:11,070
specific version if you use modules for

00:13:09,480 --> 00:13:14,220
that then you can lock versions of

00:13:11,070 --> 00:13:18,390
individual modules and that's how it is

00:13:14,220 --> 00:13:21,830
so line 3 shows different versions when

00:13:18,390 --> 00:13:26,440
different modules are invoked and

00:13:21,830 --> 00:13:31,760
infrastructure model on this slide shows

00:13:26,440 --> 00:13:35,089
shows three different three different

00:13:31,760 --> 00:13:39,380
invocations of resource modules to

00:13:35,089 --> 00:13:42,200
create VPC DNS records and specific

00:13:39,380 --> 00:13:45,830
settings for application for the user of

00:13:42,200 --> 00:13:47,990
this atlantis module they don't have to

00:13:45,830 --> 00:13:52,010
know details about how VPC is

00:13:47,990 --> 00:13:54,830
implemented how DNS is handled they just

00:13:52,010 --> 00:13:57,110
know that this is the interface so think

00:13:54,830 --> 00:14:00,410
about module as interface between

00:13:57,110 --> 00:14:01,910
something and something I often think

00:14:00,410 --> 00:14:04,820
about this as an interface between

00:14:01,910 --> 00:14:10,399
DevOps team and developers who know how

00:14:04,820 --> 00:14:13,490
to write code so few modules tip is to

00:14:10,399 --> 00:14:17,170
not write modules before you check the

00:14:13,490 --> 00:14:24,500
existence so registry doTERRA for dot IO

00:14:17,170 --> 00:14:27,110
has more than 300 AWS modules and think

00:14:24,500 --> 00:14:30,709
about a couple hundreds of all other

00:14:27,110 --> 00:14:33,920
modules and they're written by people

00:14:30,709 --> 00:14:36,920
who had been solving similar problem as

00:14:33,920 --> 00:14:40,610
you very common situations and very

00:14:36,920 --> 00:14:43,160
common architectural solutions go

00:14:40,610 --> 00:14:45,560
already solved for you so things like

00:14:43,160 --> 00:14:48,649
elastic load balancer or application

00:14:45,560 --> 00:14:51,350
load balancer is there so check it out

00:14:48,649 --> 00:14:52,970
and most likely you will find solution

00:14:51,350 --> 00:14:56,329
there there are not so many

00:14:52,970 --> 00:14:59,300
infrastructure modules for continuous

00:14:56,329 --> 00:15:03,440
integration pipelines and for other

00:14:59,300 --> 00:15:04,670
things so you still have two most likely

00:15:03,440 --> 00:15:07,190
you will still have to write something

00:15:04,670 --> 00:15:08,290
yourself but this is a good chance to

00:15:07,190 --> 00:15:13,220
check it out

00:15:08,290 --> 00:15:16,700
so another often issue with terraform

00:15:13,220 --> 00:15:22,100
zero 11 is value of count cannot be

00:15:16,700 --> 00:15:24,680
computed so who actually wrote terraform

00:15:22,100 --> 00:15:30,020
modules and used terraform and saw this

00:15:24,680 --> 00:15:32,570
problem right so I was so sure that at

00:15:30,020 --> 00:15:35,449
least somebody raised hand and tell this

00:15:32,570 --> 00:15:38,150
because this is one of the hottest

00:15:35,449 --> 00:15:41,900
problem in terraform and if people come

00:15:38,150 --> 00:15:44,029
from programming background then they

00:15:41,900 --> 00:15:47,300
think that they can use cool features

00:15:44,029 --> 00:15:49,070
like loop conditions and so on and they

00:15:47,300 --> 00:15:49,579
cannot understand why this is not

00:15:49,070 --> 00:15:52,760
working

00:15:49,579 --> 00:15:54,560
in fact it was a limitation of HCl which

00:15:52,760 --> 00:15:57,589
is Harsha Corp configuration language

00:15:54,560 --> 00:16:00,850
which is used to describe terraform

00:15:57,589 --> 00:16:05,390
configurations and HCl to is common

00:16:00,850 --> 00:16:09,860
shortly I guess I hope and it will fix a

00:16:05,390 --> 00:16:13,540
lot of these problems so the problem is

00:16:09,860 --> 00:16:19,160
that the way how to reform handle

00:16:13,540 --> 00:16:22,459
different types internally is that if

00:16:19,160 --> 00:16:25,459
terraform does not know exact size of

00:16:22,459 --> 00:16:29,810
the list then it cannot be used as a

00:16:25,459 --> 00:16:35,089
count and count is synonym of for each

00:16:29,810 --> 00:16:40,610
loop so this problem will be fixed with

00:16:35,089 --> 00:16:45,160
HCl too so stay tuned another thing

00:16:40,610 --> 00:16:47,959
which is important as I said you can not

00:16:45,160 --> 00:16:53,180
you should not think about terraform as

00:16:47,959 --> 00:16:55,279
programming language it's it's not it's

00:16:53,180 --> 00:17:00,079
not made for that it doesn't have loops

00:16:55,279 --> 00:17:02,750
it doesn't have chances to use computed

00:17:00,079 --> 00:17:05,059
values and counts as I show and also

00:17:02,750 --> 00:17:08,510
take into account where exactly your

00:17:05,059 --> 00:17:12,290
code will be executed while working with

00:17:08,510 --> 00:17:16,459
AWS I see this quite frequent is it as

00:17:12,290 --> 00:17:19,069
new regions on AWS popping up they may

00:17:16,459 --> 00:17:22,040
not have features which you expect for

00:17:19,069 --> 00:17:25,040
example ec2 classic link is simply not

00:17:22,040 --> 00:17:27,530
available in newest regions because

00:17:25,040 --> 00:17:30,040
feature itself is so ancient that they

00:17:27,530 --> 00:17:32,540
don't even bother to implement it and

00:17:30,040 --> 00:17:35,390
also service availability is different

00:17:32,540 --> 00:17:38,059
region so think about this when you

00:17:35,390 --> 00:17:40,100
write your code for the module which you

00:17:38,059 --> 00:17:41,440
then will be able to claim that it's

00:17:40,100 --> 00:17:47,150
working

00:17:41,440 --> 00:17:49,730
another thing is try to hide complexity

00:17:47,150 --> 00:17:52,490
for your users so if you make a module

00:17:49,730 --> 00:17:53,620
which is creating a relational database

00:17:52,490 --> 00:17:57,290
servers in

00:17:53,620 --> 00:17:59,570
then it has to do that and users should

00:17:57,290 --> 00:18:02,660
not know internally that you actually

00:17:59,570 --> 00:18:05,860
makin 25 calls to different resources

00:18:02,660 --> 00:18:10,070
and making them conditionally and so on

00:18:05,860 --> 00:18:14,540
for them it is single single invocation

00:18:10,070 --> 00:18:17,059
where they pass what name what type of

00:18:14,540 --> 00:18:19,580
database I want to make and what key

00:18:17,059 --> 00:18:24,830
values I want to pass into it internally

00:18:19,580 --> 00:18:28,460
you can use things code as here where I

00:18:24,830 --> 00:18:31,610
check that if this is SQL Server than

00:18:28,460 --> 00:18:37,070
create specific type of resource if this

00:18:31,610 --> 00:18:42,290
is something else then created and also

00:18:37,070 --> 00:18:45,530
as you may see on line 19 the output is

00:18:42,290 --> 00:18:49,610
used element con cut and coalesce cue

00:18:45,530 --> 00:18:52,460
list you don't always want developers to

00:18:49,610 --> 00:18:55,520
go to interpolation documentation page

00:18:52,460 --> 00:18:58,760
and drive into specific of when to use

00:18:55,520 --> 00:19:01,669
element when to use Concord why cholesky

00:18:58,760 --> 00:19:06,470
is necessary here and so on

00:19:01,669 --> 00:19:09,740
it really simplified life and adoption

00:19:06,470 --> 00:19:11,570
of terraform in organization if you hide

00:19:09,740 --> 00:19:13,520
a lot of them and say that hey guys this

00:19:11,570 --> 00:19:16,880
is module visitor commentation this is

00:19:13,520 --> 00:19:18,500
example go and use it if they want they

00:19:16,880 --> 00:19:23,780
can always check the source and go

00:19:18,500 --> 00:19:27,530
deeper so this example shows that I want

00:19:23,780 --> 00:19:30,200
to create ms SQL instance and I have

00:19:27,530 --> 00:19:32,150
possibility to specify timezone while if

00:19:30,200 --> 00:19:37,460
I'm using my sequel then there is no

00:19:32,150 --> 00:19:40,309
possibility to specify timezone size of

00:19:37,460 --> 00:19:43,490
modules is also very challenging thing

00:19:40,309 --> 00:19:45,910
because if you may if you are using

00:19:43,490 --> 00:19:48,260
terraform in organization and you have

00:19:45,910 --> 00:19:50,780
infrastructure module shared between

00:19:48,260 --> 00:19:53,510
different teams it's very often that you

00:19:50,780 --> 00:19:58,220
have all of this in one github

00:19:53,510 --> 00:20:00,230
repository which means that when when

00:19:58,220 --> 00:20:05,200
somebody is specify that they want to

00:20:00,230 --> 00:20:06,909
use version of your of your module

00:20:05,200 --> 00:20:08,590
terraform do

00:20:06,909 --> 00:20:12,960
terraform in it will actually download

00:20:08,590 --> 00:20:15,669
the whole the whole repository and then

00:20:12,960 --> 00:20:20,470
use code which is in that specific

00:20:15,669 --> 00:20:23,379
directory this is this can be solved by

00:20:20,470 --> 00:20:26,229
two different ways one is to prefetch

00:20:23,379 --> 00:20:30,009
all these dependencies before usage and

00:20:26,229 --> 00:20:31,710
and second one which is much better is

00:20:30,009 --> 00:20:34,239
to actually build these small

00:20:31,710 --> 00:20:37,809
infrastructure modules and again try to

00:20:34,239 --> 00:20:40,720
treat infrastructure the same way as we

00:20:37,809 --> 00:20:43,659
do with application so application is

00:20:40,720 --> 00:20:46,090
treated by CI and artifact is produced

00:20:43,659 --> 00:20:48,220
so why telephone configuration should be

00:20:46,090 --> 00:20:51,729
treated differently so in this example

00:20:48,220 --> 00:20:55,330
line 19 is downloading from HTTP from

00:20:51,729 --> 00:20:57,820
artifactory or whatever specific module

00:20:55,330 --> 00:21:00,749
or specific version so which means that

00:20:57,820 --> 00:21:04,119
it will be 99 comma 9 percent smaller

00:21:00,749 --> 00:21:06,729
than the whole repository this is

00:21:04,119 --> 00:21:10,299
extremely often if you have a lot of

00:21:06,729 --> 00:21:11,619
invocation of the same module which

00:21:10,299 --> 00:21:18,210
means that every time it has to download

00:21:11,619 --> 00:21:21,399
everything so another big topic which I

00:21:18,210 --> 00:21:26,259
which I'm exposed quite frequently is

00:21:21,399 --> 00:21:28,389
when when I talk to people who write

00:21:26,259 --> 00:21:31,119
documentation wrote their modules now

00:21:28,389 --> 00:21:33,519
they have a lot of modules so what to do

00:21:31,119 --> 00:21:35,739
with this variety of modules resource

00:21:33,519 --> 00:21:38,080
modules infrastructure modules all

00:21:35,739 --> 00:21:40,330
creates something everyone depends on

00:21:38,080 --> 00:21:42,609
sums and everything is version so it's

00:21:40,330 --> 00:21:46,179
like spaghetti code but in another way

00:21:42,609 --> 00:21:48,159
so there are two extremes one is it we

00:21:46,179 --> 00:21:50,830
invoke all of these modules in fewer

00:21:48,159 --> 00:21:52,869
places or literally in one place so

00:21:50,830 --> 00:21:55,809
which is main TF for this specific

00:21:52,869 --> 00:21:58,479
application in this specific region in

00:21:55,809 --> 00:22:01,720
this specific environment invoke this

00:21:58,479 --> 00:22:04,899
amount of modules looks good so this is

00:22:01,720 --> 00:22:08,049
one extreme and another extreme is that

00:22:04,899 --> 00:22:10,899
we have one module which does just one

00:22:08,049 --> 00:22:13,859
small thing and we call it only in one

00:22:10,899 --> 00:22:17,049
time in one place

00:22:13,859 --> 00:22:20,090
so this is where composite pattern comes

00:22:17,049 --> 00:22:23,510
into play as a as

00:22:20,090 --> 00:22:25,250
said many in one is invocation of a

00:22:23,510 --> 00:22:31,490
bunch of different modules from fewer

00:22:25,250 --> 00:22:36,800
places so the but the bad thing in this

00:22:31,490 --> 00:22:40,010
solution is quite obvious is pretty

00:22:36,800 --> 00:22:42,320
large scope of changes so it's very

00:22:40,010 --> 00:22:44,750
likely that things will go bad if

00:22:42,320 --> 00:22:48,460
something is dependent on something what

00:22:44,750 --> 00:22:50,630
you don't want and the nature of how

00:22:48,460 --> 00:22:53,600
orchestration can be implemented using

00:22:50,630 --> 00:22:56,570
terraform is that you simply have to

00:22:53,600 --> 00:22:58,910
call terraform sequentially in order to

00:22:56,570 --> 00:23:00,230
to have things happen because data

00:22:58,910 --> 00:23:02,390
sources which are called

00:23:00,230 --> 00:23:04,400
at the very beginning of terraform may

00:23:02,390 --> 00:23:06,500
not be available for the resource which

00:23:04,400 --> 00:23:09,340
is going to be created so you need to

00:23:06,500 --> 00:23:13,310
somehow chain the invocation of this and

00:23:09,340 --> 00:23:15,590
there is no dependency no way to specify

00:23:13,310 --> 00:23:17,840
dependencies between modules there are

00:23:15,590 --> 00:23:23,990
some workarounds but they don't look so

00:23:17,840 --> 00:23:29,720
nice so in general this is very very

00:23:23,990 --> 00:23:35,990
problematic approach but another extreme

00:23:29,720 --> 00:23:39,320
is to reduce small blast to reduce lest

00:23:35,990 --> 00:23:41,390
radius which is harder to break and it's

00:23:39,320 --> 00:23:43,640
possible to change different executions

00:23:41,390 --> 00:23:46,730
and easy to understand what's going on

00:23:43,640 --> 00:23:50,840
you just have to write more code or much

00:23:46,730 --> 00:23:54,020
more code so everything in between is

00:23:50,840 --> 00:23:57,350
the most popular choice and where where

00:23:54,020 --> 00:23:59,480
everything where is actually in between

00:23:57,350 --> 00:24:02,360
like closer to the left or to the right

00:23:59,480 --> 00:24:06,740
is totally up to you I can just give

00:24:02,360 --> 00:24:10,040
some some kind of guidelines or some

00:24:06,740 --> 00:24:12,170
ways how code can be structured and how

00:24:10,040 --> 00:24:15,440
compositions itself can be structured

00:24:12,170 --> 00:24:18,080
this is so I would say Greenfield so I

00:24:15,440 --> 00:24:21,590
cannot say that yeah you have to group

00:24:18,080 --> 00:24:23,810
your code because let's say biological

00:24:21,590 --> 00:24:26,450
name of environment because it may be

00:24:23,810 --> 00:24:28,580
not so relevant for you if you share

00:24:26,450 --> 00:24:34,100
some components between stage and and

00:24:28,580 --> 00:24:36,980
production or quite frequently as

00:24:34,100 --> 00:24:39,640
when you try to follow a composition

00:24:36,980 --> 00:24:44,270
structure or try to base composition

00:24:39,640 --> 00:24:46,520
based on cloud provider services so

00:24:44,270 --> 00:24:48,920
let's say you have networking services

00:24:46,520 --> 00:24:52,600
which handles all type of networking

00:24:48,920 --> 00:24:56,960
things and then you have application

00:24:52,600 --> 00:25:01,160
group of telephone configuration and so

00:24:56,960 --> 00:25:03,680
on so but this is these seven points

00:25:01,160 --> 00:25:06,890
which I highlight is what I see most

00:25:03,680 --> 00:25:08,929
frequently used and none of them are

00:25:06,890 --> 00:25:13,520
high a low priority you have to consider

00:25:08,929 --> 00:25:18,650
them all and think about which one makes

00:25:13,520 --> 00:25:23,330
most sense for you I can just say that

00:25:18,650 --> 00:25:26,059
if we have less resources to manage in

00:25:23,330 --> 00:25:28,910
single run it will be faster and secure

00:25:26,059 --> 00:25:32,510
and in general it's easier to think

00:25:28,910 --> 00:25:35,450
about much smaller scope and tools like

00:25:32,510 --> 00:25:38,390
Tara grant can allow us to orchestrate

00:25:35,450 --> 00:25:40,850
configurations and just reduce amount of

00:25:38,390 --> 00:25:46,570
code which has to be copied between all

00:25:40,850 --> 00:25:50,120
these so if you may think that

00:25:46,570 --> 00:25:53,090
orchestration is this and this is not

00:25:50,120 --> 00:25:55,970
this so calling telephone from terraform

00:25:53,090 --> 00:26:00,280
is just inception right it's not

00:25:55,970 --> 00:26:04,550
orchestration i tried this code it works

00:26:00,280 --> 00:26:08,090
but I don't want to even use it so

00:26:04,550 --> 00:26:10,700
orchestration is where you invoke

00:26:08,090 --> 00:26:12,920
terraform not from within terraform but

00:26:10,700 --> 00:26:16,400
from something external so typically

00:26:12,920 --> 00:26:19,760
it's shell script which goes which goes

00:26:16,400 --> 00:26:22,429
in three of directories and run

00:26:19,760 --> 00:26:26,870
terraform init terraform plan terraform

00:26:22,429 --> 00:26:29,900
apply recursively or sequentially callin

00:26:26,870 --> 00:26:34,520
it using new resource is just hack which

00:26:29,900 --> 00:26:38,420
can makes people funny and happy so this

00:26:34,520 --> 00:26:43,070
is not orchestration and I also try to

00:26:38,420 --> 00:26:45,670
summarize things which which are I

00:26:43,070 --> 00:26:47,720
learned in the past and when I talk to

00:26:45,670 --> 00:26:51,180
customers and differ

00:26:47,720 --> 00:26:53,220
different contributors when I just check

00:26:51,180 --> 00:26:56,460
different telephone code into this

00:26:53,220 --> 00:26:59,930
repository so it's totally opinionated

00:26:56,460 --> 00:27:03,510
way of structure and code

00:26:59,930 --> 00:27:07,370
defining compositions and orchestrating

00:27:03,510 --> 00:27:10,320
different things so that's that's how I

00:27:07,370 --> 00:27:13,110
think I start writing there but it's

00:27:10,320 --> 00:27:14,850
kind of incomplete yet so another thing

00:27:13,110 --> 00:27:18,030
which is very important to understand

00:27:14,850 --> 00:27:21,840
when we write code is what's going to be

00:27:18,030 --> 00:27:24,690
next in terraform zero 12 and so on so

00:27:21,840 --> 00:27:27,090
zero eleven is currently available and

00:27:24,690 --> 00:27:29,520
it has certain limitations which I

00:27:27,090 --> 00:27:32,160
pointed before the biggest one is of

00:27:29,520 --> 00:27:35,460
course not possibility not possible to

00:27:32,160 --> 00:27:37,470
use count in lists and so on let's look

00:27:35,460 --> 00:27:38,040
into refactoring and what it actually

00:27:37,470 --> 00:27:42,660
means

00:27:38,040 --> 00:27:46,520
so refactoring is just a lien any change

00:27:42,660 --> 00:27:49,080
which means add features fix bugs

00:27:46,520 --> 00:27:51,120
optimize different resource usage to the

00:27:49,080 --> 00:27:54,000
code which brings code base closer to

00:27:51,120 --> 00:27:57,650
the desired state so normally we try to

00:27:54,000 --> 00:28:01,260
make refactoring in application

00:27:57,650 --> 00:28:06,210
incremental small and we may accept some

00:28:01,260 --> 00:28:11,310
temporary ugliness but talking about how

00:28:06,210 --> 00:28:13,250
this can be done we have to think that

00:28:11,310 --> 00:28:16,350
it can it has two solutions

00:28:13,250 --> 00:28:19,170
the first one is edit and pray which is

00:28:16,350 --> 00:28:21,240
similar to finger crossed that you just

00:28:19,170 --> 00:28:24,120
changed something and run it and hope

00:28:21,240 --> 00:28:26,450
that it works or another one is covering

00:28:24,120 --> 00:28:29,790
modifier which covered with test

00:28:26,450 --> 00:28:31,740
implements some guidelines and then

00:28:29,790 --> 00:28:37,440
modify and make sure the tests are not

00:28:31,740 --> 00:28:41,460
broken testing is pretty complicated as

00:28:37,440 --> 00:28:46,130
of now in terraform so there are no no

00:28:41,460 --> 00:28:48,390
single solutions which can be used so

00:28:46,130 --> 00:28:51,000
when we start with adding new features

00:28:48,390 --> 00:28:53,760
it's often easy and we think that that's

00:28:51,000 --> 00:28:55,080
how it should be because what can go

00:28:53,760 --> 00:28:57,330
wrong if we have already created

00:28:55,080 --> 00:28:59,820
resource and we just specify a new

00:28:57,330 --> 00:29:01,140
parameter to this resource so of course

00:28:59,820 --> 00:29:03,390
it will just change it

00:29:01,140 --> 00:29:05,400
in place or recreate this resource and

00:29:03,390 --> 00:29:07,920
it will just update it

00:29:05,400 --> 00:29:10,830
yeah it's often like this but in many

00:29:07,920 --> 00:29:13,770
cases you have to have some sort of

00:29:10,830 --> 00:29:17,400
backward compatibility with within the

00:29:13,770 --> 00:29:20,490
module so that if you make a module

00:29:17,400 --> 00:29:22,440
which creates VPC that's fine

00:29:20,490 --> 00:29:24,870
well what if you have an infrastructure

00:29:22,440 --> 00:29:28,470
module let's say for Jenkins and you

00:29:24,870 --> 00:29:31,980
want to make this module flexible so

00:29:28,470 --> 00:29:35,370
then you can say you can ask user to

00:29:31,980 --> 00:29:37,890
provide VPC ID and if user provide the

00:29:35,370 --> 00:29:42,810
pci ID then it means that you don't have

00:29:37,890 --> 00:29:45,690
to create it and this code illustrate

00:29:42,810 --> 00:29:50,540
how to use data source and how to use

00:29:45,690 --> 00:29:50,540
resource to create it conditionally

00:29:50,600 --> 00:29:57,210
another limitation of 0:11 which will be

00:29:53,850 --> 00:30:00,000
fixed shortly is the way how index and

00:29:57,210 --> 00:30:03,900
works in lists so in this example if

00:30:00,000 --> 00:30:05,070
user two is removed then everything will

00:30:03,900 --> 00:30:07,710
be recreated

00:30:05,070 --> 00:30:11,940
because terraform didn't know so well

00:30:07,710 --> 00:30:16,500
about order of these items it means that

00:30:11,940 --> 00:30:18,930
0 3 & 4 will have to be moved up it

00:30:16,500 --> 00:30:21,060
means they have to be recreated for many

00:30:18,930 --> 00:30:23,250
situations it's fine but for some

00:30:21,060 --> 00:30:26,750
situations which are for some resources

00:30:23,250 --> 00:30:31,140
which are stateful like I am access key

00:30:26,750 --> 00:30:35,280
you don't want everyone who is following

00:30:31,140 --> 00:30:37,920
user who is going to leave company to

00:30:35,280 --> 00:30:41,610
recreate their keys right I mean maybe

00:30:37,920 --> 00:30:45,000
that's good strategy so you enforce key

00:30:41,610 --> 00:30:47,490
rotation for them but then user 1 will

00:30:45,000 --> 00:30:51,270
never rotate his key because he will

00:30:47,490 --> 00:30:55,080
never be moved so the solution for this

00:30:51,270 --> 00:30:57,960
is again we're talking about 0 11 so

00:30:55,080 --> 00:31:02,340
this will be obsolete for majority of

00:30:57,960 --> 00:31:06,990
cases 1 0 12 is out so the solution for

00:31:02,340 --> 00:31:11,850
order list is to provide the JSON

00:31:06,990 --> 00:31:13,970
template so JSON that is is what is it

00:31:11,850 --> 00:31:17,540
data is

00:31:13,970 --> 00:31:21,530
Jason Jason scripting language or how

00:31:17,540 --> 00:31:26,720
they call it so it's Jason template will

00:31:21,530 --> 00:31:29,270
be creating known Jason Jason anyway

00:31:26,720 --> 00:31:33,260
Jason will be created from this file

00:31:29,270 --> 00:31:36,380
so Jason template is used and it defines

00:31:33,260 --> 00:31:39,080
what kind of what kind of structure you

00:31:36,380 --> 00:31:41,420
want to have so then when you call it

00:31:39,080 --> 00:31:44,990
you get Jason back and terraform

00:31:41,420 --> 00:31:48,200
natively understand HDL which is TF file

00:31:44,990 --> 00:31:50,870
and Jason files so terraform will be

00:31:48,200 --> 00:31:53,150
able to combine this and figure out what

00:31:50,870 --> 00:31:55,540
is the difference and it will be able to

00:31:53,150 --> 00:31:58,700
help with it

00:31:55,540 --> 00:32:02,300
another thing with important is if you

00:31:58,700 --> 00:32:04,580
start using terraform not from day one

00:32:02,300 --> 00:32:06,740
in your project or in your company and

00:32:04,580 --> 00:32:10,580
most likely you have some resources

00:32:06,740 --> 00:32:13,100
already created and you don't want to

00:32:10,580 --> 00:32:18,560
recreate these resources so terraform

00:32:13,100 --> 00:32:21,650
import has has been added like half year

00:32:18,560 --> 00:32:25,040
ago maybe one a year ago and a lot of

00:32:21,650 --> 00:32:28,550
resources are now supported there so if

00:32:25,040 --> 00:32:30,410
you have already created vb c no you

00:32:28,550 --> 00:32:32,210
don't have to tear down everything in

00:32:30,410 --> 00:32:34,550
order to start using terraform it's not

00:32:32,210 --> 00:32:39,380
confirmation okay so that's important

00:32:34,550 --> 00:32:43,520
difference and terraforming is project

00:32:39,380 --> 00:32:46,760
which which can generate TF files from

00:32:43,520 --> 00:32:49,250
your existing resources and it also can

00:32:46,760 --> 00:32:51,320
generate TF state file which is very

00:32:49,250 --> 00:32:54,890
important information so that you don't

00:32:51,320 --> 00:32:58,130
have to to do anything you just point to

00:32:54,890 --> 00:33:00,170
which resource you want from now on to

00:32:58,130 --> 00:33:04,460
be able to handle with terraform and it

00:33:00,170 --> 00:33:06,800
will handle from from them so the

00:33:04,460 --> 00:33:09,460
renaming and moving is important feature

00:33:06,800 --> 00:33:12,680
of terraform when you are thinking about

00:33:09,460 --> 00:33:15,860
putting everything in one file main TF

00:33:12,680 --> 00:33:18,410
with all resources possible and then

00:33:15,860 --> 00:33:20,680
again it's important to not recreate

00:33:18,410 --> 00:33:23,470
resources but just make your

00:33:20,680 --> 00:33:26,420
configuration and the whole composition

00:33:23,470 --> 00:33:27,220
easier to work with so that's why it's

00:33:26,420 --> 00:33:29,409
important

00:33:27,220 --> 00:33:35,620
to have features like rename resources

00:33:29,409 --> 00:33:41,020
or import or move resources from one

00:33:35,620 --> 00:33:44,230
place into another module so testin in

00:33:41,020 --> 00:33:47,350
terraform is pretty tricky it's again

00:33:44,230 --> 00:33:49,539
very Greenfield area because there are

00:33:47,350 --> 00:33:53,710
not so many tools which can satisfy

00:33:49,539 --> 00:33:56,230
everyone so basic things is like we

00:33:53,710 --> 00:33:59,289
don't want to discuss space as yours

00:33:56,230 --> 00:34:01,480
tabs we just want it to be done for us

00:33:59,289 --> 00:34:03,340
and we never talk about this second

00:34:01,480 --> 00:34:06,360
thing is in pull requests we don't want

00:34:03,340 --> 00:34:08,859
to ask have you run this code yourself

00:34:06,360 --> 00:34:12,820
so that's why there are tools like

00:34:08,859 --> 00:34:14,830
Atlantis which can execute terraform

00:34:12,820 --> 00:34:18,220
configuration which is in pull request

00:34:14,830 --> 00:34:20,230
and make sure that this is what's going

00:34:18,220 --> 00:34:22,780
to be applied and then you can say

00:34:20,230 --> 00:34:25,030
Atlantis apply write in the comment and

00:34:22,780 --> 00:34:26,919
it will apply this change or you can

00:34:25,030 --> 00:34:30,550
apply it once this pull request is

00:34:26,919 --> 00:34:33,639
approved and merged it's very good

00:34:30,550 --> 00:34:36,879
project it's not so famous I would say

00:34:33,639 --> 00:34:40,690
as it should be but it's it's there and

00:34:36,879 --> 00:34:44,770
it has to be looked and integration

00:34:40,690 --> 00:34:48,609
testing is is currently done by two

00:34:44,770 --> 00:34:52,510
things either it is specific provider or

00:34:48,609 --> 00:34:55,359
library like a double spec or it is more

00:34:52,510 --> 00:34:57,220
global but it's written and go and you

00:34:55,359 --> 00:34:58,750
have to write goal code which is called

00:34:57,220 --> 00:35:01,180
terror test it was released

00:34:58,750 --> 00:35:04,330
approximately two or three weeks ago and

00:35:01,180 --> 00:35:06,400
it has already reached 1,000 stars so it

00:35:04,330 --> 00:35:08,800
for me it means that people want

00:35:06,400 --> 00:35:11,890
something like that maybe different

00:35:08,800 --> 00:35:14,339
solutions maybe not even that at all but

00:35:11,890 --> 00:35:18,839
people want to be able to test their

00:35:14,339 --> 00:35:25,150
configurations how it's different each

00:35:18,839 --> 00:35:27,520
case is to look as resources can be very

00:35:25,150 --> 00:35:29,560
different between different regions or

00:35:27,520 --> 00:35:32,440
different even different a SS accounts

00:35:29,560 --> 00:35:36,760
if you open account let's say before

00:35:32,440 --> 00:35:39,370
2010 as I did then I have some more

00:35:36,760 --> 00:35:42,790
features that's why when I run tests

00:35:39,370 --> 00:35:44,530
in my AWS account they always work but

00:35:42,790 --> 00:35:46,690
when I ask someone else

00:35:44,530 --> 00:35:48,790
hey can I run this code in particular

00:35:46,690 --> 00:35:51,070
tariff or made us modules which I

00:35:48,790 --> 00:35:54,220
maintain sometimes it doesn't work for

00:35:51,070 --> 00:35:57,460
them and then we have to look why so

00:35:54,220 --> 00:36:01,840
it's sometimes very strange like ipv6 is

00:35:57,460 --> 00:36:05,500
pretty different and also I encourage

00:36:01,840 --> 00:36:07,900
you to check and contribute in any way

00:36:05,500 --> 00:36:10,630
at least with github issues to a SS

00:36:07,900 --> 00:36:12,700
provider or terraform core even if you

00:36:10,630 --> 00:36:14,700
are not sure that this is intended

00:36:12,700 --> 00:36:17,370
behavior or maybe it's a bug

00:36:14,700 --> 00:36:19,480
nobody will bite you if you just ask

00:36:17,370 --> 00:36:23,110
it's important to understand this is

00:36:19,480 --> 00:36:26,680
open source project everyone can ask you

00:36:23,110 --> 00:36:30,730
will not be penalized if you ask and as

00:36:26,680 --> 00:36:33,100
a summary I want to say that plan in

00:36:30,730 --> 00:36:36,220
advance means that you have to write

00:36:33,100 --> 00:36:40,000
code which is smaller you have to write

00:36:36,220 --> 00:36:42,220
something what is what hides complexity

00:36:40,000 --> 00:36:44,980
for your end-users you have to know who

00:36:42,220 --> 00:36:46,510
is your end user if it's just you then

00:36:44,980 --> 00:36:49,150
it's important to write so that you

00:36:46,510 --> 00:36:51,580
understand in two months in three months

00:36:49,150 --> 00:36:54,490
then you just run terraform plan and see

00:36:51,580 --> 00:36:57,580
oh yeah actually that's what is now in

00:36:54,490 --> 00:37:00,190
production that's good enough if you

00:36:57,580 --> 00:37:02,080
have chain of your dependencies like

00:37:00,190 --> 00:37:04,150
different teams dependent on different

00:37:02,080 --> 00:37:06,100
versions of different modules it's again

00:37:04,150 --> 00:37:09,010
important to write smaller things and

00:37:06,100 --> 00:37:13,930
hide all interpolation for them all the

00:37:09,010 --> 00:37:17,200
limitations in length of of name of

00:37:13,930 --> 00:37:20,290
resources because you you probably don't

00:37:17,200 --> 00:37:22,710
know how they will use it and they don't

00:37:20,290 --> 00:37:26,020
know that elastic cache which is read as

00:37:22,710 --> 00:37:28,780
manage three days by AWS has a lot of

00:37:26,020 --> 00:37:30,670
limitations in name in lands and what

00:37:28,780 --> 00:37:33,430
kind of characters it has to use and

00:37:30,670 --> 00:37:36,360
there it's not allowed to end with - at

00:37:33,430 --> 00:37:39,280
the end your users doesn't know this and

00:37:36,360 --> 00:37:43,030
you maybe not know this also so that's

00:37:39,280 --> 00:37:46,210
why there are solutions which other

00:37:43,030 --> 00:37:48,310
people wrote and they tested it and they

00:37:46,210 --> 00:37:51,290
know that yes it has to be not more than

00:37:48,310 --> 00:37:55,730
22 characters because it's used in

00:37:51,290 --> 00:37:59,240
in hostname somewhere that's why it

00:37:55,730 --> 00:38:02,630
cannot stop with - and so no underscores

00:37:59,240 --> 00:38:05,570
and many other limitations my sequel

00:38:02,630 --> 00:38:06,800
Oracle should be always uppercase yeah

00:38:05,570 --> 00:38:09,980
you never know

00:38:06,800 --> 00:38:12,350
so reuse an existing code modules is

00:38:09,980 --> 00:38:14,540
important and if there is no sand then

00:38:12,350 --> 00:38:18,560
yes fallback to documentation write

00:38:14,540 --> 00:38:21,609
something contributed back and with this

00:38:18,560 --> 00:38:26,020
I want to mention few projects which I

00:38:21,609 --> 00:38:32,000
contributed over the past three years so

00:38:26,020 --> 00:38:34,910
all of this is for the community because

00:38:32,000 --> 00:38:39,140
I want to solve the same problems few

00:38:34,910 --> 00:38:42,050
times so just in random order starting

00:38:39,140 --> 00:38:44,420
from the bottom terrible what can go

00:38:42,050 --> 00:38:47,290
wrong with combining terraform and

00:38:44,420 --> 00:38:50,840
ansible right no it's actually terrible

00:38:47,290 --> 00:38:54,050
so terrible is a way to orchestrate and

00:38:50,840 --> 00:38:56,450
execute sequentially terraform commons

00:38:54,050 --> 00:38:59,600
for your data structure for your

00:38:56,450 --> 00:39:02,450
composition so you define how your code

00:38:59,600 --> 00:39:05,150
is lined up and what kind of comment you

00:39:02,450 --> 00:39:08,630
want so it executes I personally use it

00:39:05,150 --> 00:39:11,619
for refactoring of large amount of

00:39:08,630 --> 00:39:15,350
resources which is about 200 of

00:39:11,619 --> 00:39:20,510
different folders and I need to apply

00:39:15,350 --> 00:39:23,210
similar changes or if I have if I have

00:39:20,510 --> 00:39:25,609
users of specific version of my module

00:39:23,210 --> 00:39:28,280
and I know that there are 20 of

00:39:25,609 --> 00:39:30,440
different teams in one company then I

00:39:28,280 --> 00:39:33,050
don't want to slack them and say hey

00:39:30,440 --> 00:39:36,380
guys new version is out please update it

00:39:33,050 --> 00:39:38,750
I know that I have to run some common

00:39:36,380 --> 00:39:40,820
sequentially update some string run

00:39:38,750 --> 00:39:44,150
terraforming it run terraform plan and

00:39:40,820 --> 00:39:47,750
nothing should be changed so Terrapin is

00:39:44,150 --> 00:39:49,910
another one is where I want to generate

00:39:47,750 --> 00:39:52,420
resource modules in simpler way which

00:39:49,910 --> 00:39:55,790
includes documentation tests and

00:39:52,420 --> 00:39:57,950
examples readme changelog license

00:39:55,790 --> 00:40:01,040
whatever else i don't remember it's like

00:39:57,950 --> 00:40:03,560
nine items from single codebase because

00:40:01,040 --> 00:40:04,640
i have access to terraform so source

00:40:03,560 --> 00:40:07,160
code or

00:40:04,640 --> 00:40:09,260
I know what kind of arguments all the

00:40:07,160 --> 00:40:12,550
resources except what kind of health

00:40:09,260 --> 00:40:17,420
reviews they X the outputs and so on and

00:40:12,550 --> 00:40:20,720
the latest addition was that just for

00:40:17,420 --> 00:40:25,940
fun I started to work on a SS diagram as

00:40:20,720 --> 00:40:28,660
terraform code if you saw this slide by

00:40:25,940 --> 00:40:33,140
Mitchell and I included it as well where

00:40:28,660 --> 00:40:35,630
multi-tier or lamp stack was shown I

00:40:33,140 --> 00:40:39,500
personally think that it can be pretty

00:40:35,630 --> 00:40:42,890
cool to click export as code and you get

00:40:39,500 --> 00:40:45,080
all code which is not as boiler plate

00:40:42,890 --> 00:40:47,000
which you can just say oh yeah thank you

00:40:45,080 --> 00:40:49,960
and delete it no I don't want this I

00:40:47,000 --> 00:40:52,190
want to have a code which is actually

00:40:49,960 --> 00:40:54,470
opinionated and which is actually

00:40:52,190 --> 00:40:56,780
working so I follow all these

00:40:54,470 --> 00:41:00,290
dependencies between all of these arrows

00:40:56,780 --> 00:41:00,830
and what point what and if it's multi

00:41:00,290 --> 00:41:02,360
a-z

00:41:00,830 --> 00:41:05,390
relational database service instance

00:41:02,360 --> 00:41:08,600
then yes it will be two of them and so

00:41:05,390 --> 00:41:13,250
on so all kind of crazy things are there

00:41:08,600 --> 00:41:14,930
and yeah currently it's in beta and I

00:41:13,250 --> 00:41:19,100
don't have time and money to work on it

00:41:14,930 --> 00:41:24,340
so if you developer who wants to

00:41:19,100 --> 00:41:28,430
contribute just let me know yeah and

00:41:24,340 --> 00:41:32,060
second link is terraform a SS models is

00:41:28,430 --> 00:41:34,790
a collection of all verified terraform

00:41:32,060 --> 00:41:38,750
AWS modules which supported by community

00:41:34,790 --> 00:41:41,420
and I try maintain them as much as

00:41:38,750 --> 00:41:45,440
possible so things like EPC security

00:41:41,420 --> 00:41:48,880
group ec2 instance RDS and so on all

00:41:45,440 --> 00:41:51,050
solved already for you so if you

00:41:48,880 --> 00:41:53,540
introduced in terraforming your company

00:41:51,050 --> 00:41:55,370
and you don't know where to start or you

00:41:53,540 --> 00:41:59,750
think that oh my god I had to read

00:41:55,370 --> 00:42:01,850
documentation for RDS and I had to read

00:41:59,750 --> 00:42:03,830
documentation for terraform and I have

00:42:01,850 --> 00:42:06,620
to figure out how to write this most

00:42:03,830 --> 00:42:08,660
likely it is already solved so there are

00:42:06,620 --> 00:42:12,380
modules for that one of the most active

00:42:08,660 --> 00:42:15,520
right now which guy has started

00:42:12,380 --> 00:42:18,440
I think the same even as elastic

00:42:15,520 --> 00:42:20,630
kubernetes service was launched by AWS

00:42:18,440 --> 00:42:23,750
so he started literally the same day the

00:42:20,630 --> 00:42:25,400
same evening and he already got to three

00:42:23,750 --> 00:42:27,890
contributors so they're pretty active

00:42:25,400 --> 00:42:33,260
there it's pretty cool to see how

00:42:27,890 --> 00:42:38,900
they're contributing so yeah on that I

00:42:33,260 --> 00:42:50,809
want to thank you and yeah I hope you

00:42:38,900 --> 00:42:54,589
have questions some questions any

00:42:50,809 --> 00:42:56,839
questions don't be shy I mean of course

00:42:54,589 --> 00:43:10,789
if you're shy there are direct messages

00:42:56,839 --> 00:43:12,140
which is open but okay question what you

00:43:10,789 --> 00:43:13,579
thought support on Atlantis in

00:43:12,140 --> 00:43:19,240
production have what's your experience

00:43:13,579 --> 00:43:21,559
with the Atlantis you ask yeah so

00:43:19,240 --> 00:43:22,280
Atlantis just for those who don't know

00:43:21,559 --> 00:43:25,549
what is it

00:43:22,280 --> 00:43:28,369
Atlantis is a tool which is which gives

00:43:25,549 --> 00:43:30,740
you a unified workflow with your

00:43:28,369 --> 00:43:32,960
terraform code so right from the pull

00:43:30,740 --> 00:43:35,930
request you can see what's going to

00:43:32,960 --> 00:43:37,970
happen and this is important that you

00:43:35,930 --> 00:43:40,579
don't ask a human to do something what

00:43:37,970 --> 00:43:43,490
computer can do so you don't know

00:43:40,579 --> 00:43:45,829
whether this value is even correct

00:43:43,490 --> 00:43:47,750
maybe it's totally wrong and maybe it

00:43:45,829 --> 00:43:49,849
will fail miserably it's very beginning

00:43:47,750 --> 00:43:50,960
so let machine do this for you and you

00:43:49,849 --> 00:43:57,230
talk about something else

00:43:50,960 --> 00:44:00,740
so Atlantis is I don't use it in

00:43:57,230 --> 00:44:04,160
production so much at my last work place

00:44:00,740 --> 00:44:07,010
where I finished work yesterday so I

00:44:04,160 --> 00:44:10,579
want to use it for open source code even

00:44:07,010 --> 00:44:12,799
if developer of Atlantis saying that

00:44:10,579 --> 00:44:15,710
it's not good idea to use it in

00:44:12,799 --> 00:44:20,680
production for public things so the

00:44:15,710 --> 00:44:23,630
thing is that Atlantis has certain

00:44:20,680 --> 00:44:26,750
responsibilities Atlantis is running on

00:44:23,630 --> 00:44:29,210
machine which should be available for

00:44:26,750 --> 00:44:33,290
github to be able to

00:44:29,210 --> 00:44:35,900
sent web hooks to sew it I mean of

00:44:33,290 --> 00:44:39,020
course it has some web hook you is the

00:44:35,900 --> 00:44:41,450
problem to use with public pool requests

00:44:39,020 --> 00:44:44,000
is that somebody can commit code which

00:44:41,450 --> 00:44:49,180
does something bad and this bad can be

00:44:44,000 --> 00:44:52,820
literally echo dollar a SS credentials

00:44:49,180 --> 00:44:55,190
just now for me here so this means that

00:44:52,820 --> 00:44:58,520
I can submit pull requests right

00:44:55,190 --> 00:45:02,150
Atlanta's plan code will be executed on

00:44:58,520 --> 00:45:05,810
on Atlantis and will be printed to me

00:45:02,150 --> 00:45:09,800
that's bad so the solution to that one I

00:45:05,810 --> 00:45:14,330
think can be to issue very short leave

00:45:09,800 --> 00:45:16,880
credentials and so after these

00:45:14,330 --> 00:45:19,280
credentials are printed to the hacker or

00:45:16,880 --> 00:45:22,730
sent somewhere they will be invalid

00:45:19,280 --> 00:45:30,500
automatically so I think this can

00:45:22,730 --> 00:45:35,450
eliminate the area at least so yeah and

00:45:30,500 --> 00:45:37,820
I have also made terraform AWS module

00:45:35,450 --> 00:45:41,240
for Atlantis to run Atlantis on a device

00:45:37,820 --> 00:45:44,540
for gate which means that you should

00:45:41,240 --> 00:45:46,370
just clone this repository provide five

00:45:44,540 --> 00:45:49,310
ten different parameters and you will

00:45:46,370 --> 00:45:55,180
have it up and running it costs without

00:45:49,310 --> 00:45:58,250
without any Lord it cost 42 cents a day

00:45:55,180 --> 00:46:00,680
which is good I think I can afford it to

00:45:58,250 --> 00:46:05,380
pay for all open-source projects which I

00:46:00,680 --> 00:46:11,180
have just good ok it's a more questions

00:46:05,380 --> 00:46:13,430
still have time oh yeah the last thing

00:46:11,180 --> 00:46:13,970
is I don't know how Mitchell forgot

00:46:13,430 --> 00:46:16,930
about it

00:46:13,970 --> 00:46:16,930
I have stickers

00:46:17,710 --> 00:46:24,110
that's the most important part so I have

00:46:22,670 --> 00:46:31,460
a lot of them so you have to definitely

00:46:24,110 --> 00:46:34,930
come and grab them all right yeah

00:46:31,460 --> 00:46:34,930
then thanks again Anton

00:46:35,160 --> 00:46:53,170
[Applause]

00:46:39,010 --> 00:46:53,720
[Music]

00:46:53,170 --> 00:46:58,219
you

00:46:53,720 --> 00:46:58,219

YouTube URL: https://www.youtube.com/watch?v=XQzwsv9MpE0


