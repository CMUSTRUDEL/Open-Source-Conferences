Title: OSDC 2018 | Ops hates containers. Why? by Martin Alfke
Publication date: 2018-06-22
Playlist: OSDC 2018 | Open Source Data Center Conference
Description: 
	“Docker, Docker, Docker, Docker,…” developers really love Docker. Usually one sees the no longer need for configuration management, the easy way to spin up a platform on a laptop, the low resource footprint. But how do you deploy laptops in data centers? This talk will give you an insight how we (more Ops then Dev) started to learn (and love) containers, the issues we saw when running them in larger scale and how Ops people should start dealing with Container technologies.

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de
Blog: http://blog.netways.de
Webinare: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Google+: https://plus.google.com/+netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh

https://www.frametraxx.de/
Captions: 
	00:00:00,540 --> 00:00:03,380
[Music]

00:00:01,320 --> 00:00:03,380
you

00:00:11,750 --> 00:00:17,480
[Music]

00:00:14,530 --> 00:00:19,160
back in February I suppose it was when

00:00:17,480 --> 00:00:20,750
we had the cold really cold weather

00:00:19,160 --> 00:00:23,180
during FOSDEM and configuration

00:00:20,750 --> 00:00:24,460
management camp burnt approached me and

00:00:23,180 --> 00:00:27,380
was asking hey Martin

00:00:24,460 --> 00:00:30,530
wouldn't you mind sending in a paper for

00:00:27,380 --> 00:00:33,530
the OSD see and so I said ok I can think

00:00:30,530 --> 00:00:36,559
about something and when I was back in

00:00:33,530 --> 00:00:38,510
Berlin I was at a customer and within

00:00:36,559 --> 00:00:40,699
one customer we really had a very very

00:00:38,510 --> 00:00:43,870
interesting meeting and interesting

00:00:40,699 --> 00:00:46,489
discussions and based on these

00:00:43,870 --> 00:00:48,260
discussions and the meeting we had about

00:00:46,489 --> 00:00:50,989
there and what I heard from the people I

00:00:48,260 --> 00:00:54,229
decided ok I will provide a talk for OS

00:00:50,989 --> 00:00:56,479
DC I was quite astonished when I heard

00:00:54,229 --> 00:00:59,089
when I learned from the organizers that

00:00:56,479 --> 00:01:01,580
burned decided to go for a yeah for go

00:00:59,089 --> 00:01:04,940
for talk with a quite aggressive term

00:01:01,580 --> 00:01:09,560
like ops hates containers please don't

00:01:04,940 --> 00:01:12,590
forget the next word why so what I want

00:01:09,560 --> 00:01:16,010
to do is by the way who who's here and

00:01:12,590 --> 00:01:18,410
saying I'm more an ops and death that's

00:01:16,010 --> 00:01:20,000
basically the majority okay otherwise

00:01:18,410 --> 00:01:21,710
otherwise you wouldn't be here yeah

00:01:20,000 --> 00:01:23,840
because developer loves containers of

00:01:21,710 --> 00:01:27,620
sites containers so you must be here and

00:01:23,840 --> 00:01:30,590
must be ops people for sure so what we

00:01:27,620 --> 00:01:34,340
usually do at customers we provide

00:01:30,590 --> 00:01:36,350
support and consulting for auto IT

00:01:34,340 --> 00:01:38,660
automation we have a specialized

00:01:36,350 --> 00:01:41,810
expertise when it comes to puppet areas

00:01:38,660 --> 00:01:43,430
but well automation doesn't only deal

00:01:41,810 --> 00:01:46,310
with puppet it also deals with an

00:01:43,430 --> 00:01:47,950
infrastructure by itself and this is

00:01:46,310 --> 00:01:50,870
what I mentioned we had a funny meeting

00:01:47,950 --> 00:01:52,700
one of the ops people approached me when

00:01:50,870 --> 00:01:55,430
I being at a customer and he was asking

00:01:52,700 --> 00:01:57,440
me hey Martin we have an invitation from

00:01:55,430 --> 00:02:00,170
the developers I told him whoa that's

00:01:57,440 --> 00:02:01,520
great you start talking that's nice so

00:02:00,170 --> 00:02:03,110
please go to the meeting and don't

00:02:01,520 --> 00:02:04,460
abandon the meeting you won't know what

00:02:03,110 --> 00:02:06,860
happens over there yeah they want to

00:02:04,460 --> 00:02:10,069
talk about containers they want to bring

00:02:06,860 --> 00:02:13,220
docker into production said yeah that's

00:02:10,069 --> 00:02:16,120
awesome that's cool you can concentrate

00:02:13,220 --> 00:02:19,549
on the real things to do scaling

00:02:16,120 --> 00:02:21,560
infrastructure storage network and you'd

00:02:19,549 --> 00:02:22,430
never ever deal again with any kind of

00:02:21,560 --> 00:02:24,980
application

00:02:22,430 --> 00:02:26,810
he was looked quite astonished and said

00:02:24,980 --> 00:02:28,310
are you really sure because that's

00:02:26,810 --> 00:02:29,720
something that you understand but the

00:02:28,310 --> 00:02:32,810
developers might have another

00:02:29,720 --> 00:02:35,810
understanding on what's going on okay I

00:02:32,810 --> 00:02:38,360
will join the meeting by the way is

00:02:35,810 --> 00:02:40,010
security also invited to that meeting

00:02:38,360 --> 00:02:43,490
and you had a look on the invitation

00:02:40,010 --> 00:02:45,800
says no invite one from security so we

00:02:43,490 --> 00:02:48,200
cover both all the aspects that we need

00:02:45,800 --> 00:02:52,430
when yeah when it comes to containers in

00:02:48,200 --> 00:02:55,040
a production platform so the meeting

00:02:52,430 --> 00:02:57,920
started and first the developers were

00:02:55,040 --> 00:02:59,960
quite shocked and saying why is this IT

00:02:57,920 --> 00:03:02,000
infrastructure engineer here and why do

00:02:59,960 --> 00:03:03,290
we have security here we are talking

00:03:02,000 --> 00:03:05,810
about things which is which are

00:03:03,290 --> 00:03:09,050
completely unrelated to them and they

00:03:05,810 --> 00:03:10,610
started with the topics like ops must

00:03:09,050 --> 00:03:13,190
build the core containers the base

00:03:10,610 --> 00:03:15,140
containers office is responsible for

00:03:13,190 --> 00:03:16,460
running the containers development

00:03:15,140 --> 00:03:18,680
disabilities responsible for building

00:03:16,460 --> 00:03:22,370
the containers ops is responsible for

00:03:18,680 --> 00:03:24,380
the security of the containers office is

00:03:22,370 --> 00:03:27,410
responsible for staging containers so

00:03:24,380 --> 00:03:29,240
they have this three stage databases

00:03:27,410 --> 00:03:31,160
that say delivery platforms or they

00:03:29,240 --> 00:03:32,720
start and development they have some

00:03:31,160 --> 00:03:34,850
testing environment and they have the

00:03:32,720 --> 00:03:36,230
production environment so offices

00:03:34,850 --> 00:03:38,030
responsible also for staging the

00:03:36,230 --> 00:03:40,550
containers and they were just pushing

00:03:38,030 --> 00:03:43,220
out work to be done to the operations

00:03:40,550 --> 00:03:45,620
people then the operations people

00:03:43,220 --> 00:03:47,690
started talking like how do we build

00:03:45,620 --> 00:03:50,030
containers we've never done that before

00:03:47,690 --> 00:03:52,070
base containers what what is it that we

00:03:50,030 --> 00:03:54,560
must have inside what is it that we

00:03:52,070 --> 00:03:57,350
should not have inside should just be a

00:03:54,560 --> 00:04:03,140
copy of the operating system what what's

00:03:57,350 --> 00:04:05,030
it and somehow came the security person

00:04:03,140 --> 00:04:06,770
into a pro saying stop this discussion

00:04:05,030 --> 00:04:09,310
this is this is completely going wrong

00:04:06,770 --> 00:04:12,140
direction so first of all ops can't

00:04:09,310 --> 00:04:14,570
ensure security in containers because

00:04:12,140 --> 00:04:17,060
containers are built by the developers

00:04:14,570 --> 00:04:18,920
and from ops perspective containers are

00:04:17,060 --> 00:04:21,410
like binaries you can't look into

00:04:18,920 --> 00:04:23,390
something that is compiled stuff it's

00:04:21,410 --> 00:04:25,610
binary code you can only do that on

00:04:23,390 --> 00:04:28,190
source code level and the same is what

00:04:25,610 --> 00:04:30,320
he sees for the containers and the next

00:04:28,190 --> 00:04:32,510
thing was stating and by the way

00:04:30,320 --> 00:04:34,340
developers must name the C groups that

00:04:32,510 --> 00:04:36,400
must be set and the kernel capabilities

00:04:34,340 --> 00:04:39,139
for each container process

00:04:36,400 --> 00:04:41,630
and then the funny thing happened the

00:04:39,139 --> 00:04:43,240
developer that has announced himself as

00:04:41,630 --> 00:04:46,070
being the lead architect for

00:04:43,240 --> 00:04:53,320
containerization he was asking what's

00:04:46,070 --> 00:04:57,200
that that was the point where security

00:04:53,320 --> 00:05:00,050
stopped the whole meeting thing go home

00:04:57,200 --> 00:05:02,450
do your homework learn about the basics

00:05:00,050 --> 00:05:05,530
of technology you want to use and never

00:05:02,450 --> 00:05:13,010
ever dare again to use the term docker

00:05:05,530 --> 00:05:14,480
so docker it's always fun when being at

00:05:13,010 --> 00:05:16,160
that customer you walk around through

00:05:14,480 --> 00:05:18,080
the areas and to always hear some

00:05:16,160 --> 00:05:22,940
mumbling anywhere and it's always the

00:05:18,080 --> 00:05:25,340
same it's like they all talk about

00:05:22,940 --> 00:05:28,310
containers and they just think about

00:05:25,340 --> 00:05:30,919
docker but the real approach should be

00:05:28,310 --> 00:05:32,600
look at what are containers really

00:05:30,919 --> 00:05:35,930
what's what's what makes a container

00:05:32,600 --> 00:05:37,250
what is a container so why do we have

00:05:35,930 --> 00:05:39,260
containers at all ah

00:05:37,250 --> 00:05:42,080
we don't need configuration management

00:05:39,260 --> 00:05:43,850
anymore because container is isolated is

00:05:42,080 --> 00:05:46,729
just environment variables that make

00:05:43,850 --> 00:05:48,979
everything's working magically it's so

00:05:46,729 --> 00:05:50,830
easy we put everything into Redis and

00:05:48,979 --> 00:05:55,760
then we're fine we're good to go

00:05:50,830 --> 00:05:57,100
it's so easy to build and deploy it's

00:05:55,760 --> 00:05:59,270
just a docker pull docker run

00:05:57,100 --> 00:06:01,880
everything's working have you seen it on

00:05:59,270 --> 00:06:04,760
my laptop it's here I have everything on

00:06:01,880 --> 00:06:06,610
my laptop yeah okay how many laptops

00:06:04,760 --> 00:06:09,740
will be no place in the data center yeah

00:06:06,610 --> 00:06:12,200
it's so easy to test and verify it's so

00:06:09,740 --> 00:06:13,970
easy even if you break things you just

00:06:12,200 --> 00:06:16,070
build a new release and things are all

00:06:13,970 --> 00:06:17,780
also good again and even if the new

00:06:16,070 --> 00:06:19,760
release is just a revert of the last

00:06:17,780 --> 00:06:23,570
commit which broke things absolutely

00:06:19,760 --> 00:06:29,060
fine so it's super easy doing containers

00:06:23,570 --> 00:06:31,210
and yeah you don't need containers I

00:06:29,060 --> 00:06:34,250
have some kind of self healing magic

00:06:31,210 --> 00:06:36,080
platforms that where you just say I want

00:06:34,250 --> 00:06:37,760
something and the platform knows what

00:06:36,080 --> 00:06:40,280
you want and it does it automatically

00:06:37,760 --> 00:06:43,039
for you it's really moves that you see

00:06:40,280 --> 00:06:44,780
around there so you don't need to check

00:06:43,039 --> 00:06:46,789
for security because containers are

00:06:44,780 --> 00:06:48,409
short living instances only so nobody

00:06:46,789 --> 00:06:49,430
can log in and do something and by the

00:06:48,409 --> 00:06:51,650
way there is no challenge

00:06:49,430 --> 00:06:54,500
site so how could someone login so we

00:06:51,650 --> 00:06:56,840
don't need security uh login so we don't

00:06:54,500 --> 00:07:01,760
have to dig inside the container what

00:06:56,840 --> 00:07:04,280
about the logs ha logs are just well do

00:07:01,760 --> 00:07:05,900
you really want to see 3 or 3,500 Java

00:07:04,280 --> 00:07:08,540
exceptions per second if that is what

00:07:05,900 --> 00:07:11,120
you call a lock or ok don't don't laugh

00:07:08,540 --> 00:07:13,660
don't laugh they have they have the big

00:07:11,120 --> 00:07:16,970
blank license exactly for that reason

00:07:13,660 --> 00:07:19,550
we're asking them isn't it possible to

00:07:16,970 --> 00:07:24,230
reduce the lock level maybe to something

00:07:19,550 --> 00:07:25,850
like info that would be nice we try that

00:07:24,230 --> 00:07:29,000
then the application is not working oh

00:07:25,850 --> 00:07:31,040
wow ok and this is something you want to

00:07:29,000 --> 00:07:33,590
dock arise ah interesting

00:07:31,040 --> 00:07:35,840
okay so so what else is that we have as

00:07:33,590 --> 00:07:38,570
rumors around are you don't week we can

00:07:35,840 --> 00:07:40,160
do ops and serverless well yeah ops

00:07:38,570 --> 00:07:42,530
lesson surveillance we don't need server

00:07:40,160 --> 00:07:45,110
so so we just put everything somewhere a

00:07:42,530 --> 00:07:47,930
jumpy cloud and we just throw containers

00:07:45,110 --> 00:07:51,260
at the cloud first episodes it's a myth

00:07:47,930 --> 00:07:53,480
about containers we see so why do people

00:07:51,260 --> 00:07:56,360
start with docker because it's the most

00:07:53,480 --> 00:07:59,660
easy concept now they just install

00:07:56,360 --> 00:08:01,160
something ok it's a package from the

00:07:59,660 --> 00:08:04,730
vendor it's signed

00:08:01,160 --> 00:08:08,390
ok the next thing they do is docker pull

00:08:04,730 --> 00:08:10,970
any kind of things out there in the

00:08:08,390 --> 00:08:14,990
internet and this this always reminds me

00:08:10,970 --> 00:08:18,590
like the curl - Kay HTTP when you do

00:08:14,990 --> 00:08:21,440
HTTP why do you do - Kay so ignoring any

00:08:18,590 --> 00:08:23,840
kind of security which is in SSL so and

00:08:21,440 --> 00:08:25,400
you pipe everything either in bash or if

00:08:23,840 --> 00:08:28,370
you are unsure whether this is run as

00:08:25,400 --> 00:08:30,710
root you pipe it into pseudo bash so now

00:08:28,370 --> 00:08:32,210
make it make it working a couple of

00:08:30,710 --> 00:08:34,310
years ago there was at the conflict

00:08:32,210 --> 00:08:36,950
management camp keynote where one was

00:08:34,310 --> 00:08:40,580
asking ok who's using upstream morose

00:08:36,950 --> 00:08:42,320
and 60% were raising their hands so by

00:08:40,580 --> 00:08:44,630
the way he was who's not mirroring

00:08:42,320 --> 00:08:48,560
upstream repository service but using

00:08:44,630 --> 00:08:51,620
directly upstream servers nobody dares

00:08:48,560 --> 00:08:53,870
to raise his hand okay because the the

00:08:51,620 --> 00:08:55,580
the forgot who it was but the wording

00:08:53,870 --> 00:08:56,450
still stuck in my mind and he mentioned

00:08:55,580 --> 00:08:59,260
to the people oh you're having

00:08:56,450 --> 00:09:03,580
unprotected sex with the Internet

00:08:59,260 --> 00:09:05,890
nice yeah but it's easy it's super easy

00:09:03,580 --> 00:09:08,140
to say okay I want to have a database

00:09:05,890 --> 00:09:09,700
server I want to have a web server and I

00:09:08,140 --> 00:09:11,710
want to have my application running on

00:09:09,700 --> 00:09:13,750
the web server I'm not interested in

00:09:11,710 --> 00:09:16,140
some kind of scaling I just want to

00:09:13,750 --> 00:09:19,630
develop code do it as fast as possible

00:09:16,140 --> 00:09:21,610
maybe by mounting a volume inside the

00:09:19,630 --> 00:09:23,920
web server so I have my application

00:09:21,610 --> 00:09:25,900
locally and I can directly test it and I

00:09:23,920 --> 00:09:29,410
have a database connected to it that's

00:09:25,900 --> 00:09:31,420
great that's awesome so but what what

00:09:29,410 --> 00:09:35,620
else is a container seeing from an ops

00:09:31,420 --> 00:09:38,440
perspective from an ops perspective we

00:09:35,620 --> 00:09:40,420
say a container is it's just it's a

00:09:38,440 --> 00:09:44,430
change route so something which has been

00:09:40,420 --> 00:09:46,630
there at BSD for years the jail process

00:09:44,430 --> 00:09:48,940
nothing else is a container it's a

00:09:46,630 --> 00:09:51,670
change route process and it doesn't need

00:09:48,940 --> 00:09:54,010
to be a full-blown operating system it

00:09:51,670 --> 00:09:55,810
might be just some specific binaries and

00:09:54,010 --> 00:09:58,090
the libraries that binary needs maybe

00:09:55,810 --> 00:09:58,480
just Lib C and some application that's

00:09:58,090 --> 00:10:01,950
it

00:09:58,480 --> 00:10:05,190
full stop no need to have more insight

00:10:01,950 --> 00:10:08,110
with with docker you say you have this

00:10:05,190 --> 00:10:10,540
this kind of overlay file systems

00:10:08,110 --> 00:10:12,130
underneath so every change you do is

00:10:10,540 --> 00:10:14,320
something like like C that I could get

00:10:12,130 --> 00:10:15,760
commits you do on a code base and this

00:10:14,320 --> 00:10:17,680
is something you do on the container you

00:10:15,760 --> 00:10:21,610
have the core container and then you add

00:10:17,680 --> 00:10:24,250
layers on top which is of course also

00:10:21,610 --> 00:10:26,530
affecting well performance when it comes

00:10:24,250 --> 00:10:28,360
to file system operations because it's

00:10:26,530 --> 00:10:32,620
this multiple layers of file system that

00:10:28,360 --> 00:10:34,780
cause I hope to be very very low the

00:10:32,620 --> 00:10:38,470
next thing we see is you can't run

00:10:34,780 --> 00:10:40,990
containers in somewhere nowhere you need

00:10:38,470 --> 00:10:43,300
some infrastructure underneath so you

00:10:40,990 --> 00:10:45,010
need to have some hardware there must be

00:10:43,300 --> 00:10:47,740
something where you can deploy a

00:10:45,010 --> 00:10:49,720
container and even if it's just a

00:10:47,740 --> 00:10:52,510
standard operating system and you have

00:10:49,720 --> 00:10:55,390
the docker daemon running inside or some

00:10:52,510 --> 00:10:59,980
kind of others then you are able to

00:10:55,390 --> 00:11:02,320
deploy and run containers and see

00:10:59,980 --> 00:11:04,150
containers like being a binary so you

00:11:02,320 --> 00:11:06,220
get it shipped from a developer the

00:11:04,150 --> 00:11:07,690
developer says you about the state yes

00:11:06,220 --> 00:11:09,250
check the state and saying this is

00:11:07,690 --> 00:11:11,890
development state this is production

00:11:09,250 --> 00:11:12,910
ready state and then you just pull this

00:11:11,890 --> 00:11:16,090
binary and you

00:11:12,910 --> 00:11:20,950
to run this binary well this is what you

00:11:16,090 --> 00:11:23,020
do on one node level only so this is

00:11:20,950 --> 00:11:26,890
some kind of basic concepts when it

00:11:23,020 --> 00:11:29,230
comes to containers in general what is

00:11:26,890 --> 00:11:31,240
it that the next thing we did with after

00:11:29,230 --> 00:11:33,310
the meeting with the without the

00:11:31,240 --> 00:11:35,230
developers but together with the Ops

00:11:33,310 --> 00:11:38,770
people the network engineers the

00:11:35,230 --> 00:11:41,260
database engineers and the security we

00:11:38,770 --> 00:11:43,300
said ok we see there is a specific need

00:11:41,260 --> 00:11:45,370
especially for the new modern platform

00:11:43,300 --> 00:11:47,590
that is been built there was already the

00:11:45,370 --> 00:11:49,840
policy made it should run on OpenShift

00:11:47,590 --> 00:11:51,370
whoever made that decision but it's

00:11:49,840 --> 00:11:53,860
already there saying we want to go

00:11:51,370 --> 00:11:56,860
openshift as the infrastructure to run

00:11:53,860 --> 00:11:59,050
containers inside so we were aware we

00:11:56,860 --> 00:12:01,510
have to deal with this issue somehow and

00:11:59,050 --> 00:12:03,250
we must find a way to understand what's

00:12:01,510 --> 00:12:05,290
happening inside how to deal with

00:12:03,250 --> 00:12:07,330
containers how to work with containers

00:12:05,290 --> 00:12:10,870
in the most easy pattern which is

00:12:07,330 --> 00:12:12,970
possible so the KISS principle sometimes

00:12:10,870 --> 00:12:15,100
I see this is not happening when you see

00:12:12,970 --> 00:12:18,510
all the tools that blow up around

00:12:15,100 --> 00:12:20,470
containers they all try to do solve yeah

00:12:18,510 --> 00:12:24,120
sometimes they try to solve the same

00:12:20,470 --> 00:12:26,410
sometimes they address new issues and

00:12:24,120 --> 00:12:28,570
there's one thing which people must be

00:12:26,410 --> 00:12:30,880
totally aware about and I try to get

00:12:28,570 --> 00:12:34,030
this into a get into this by drawing

00:12:30,880 --> 00:12:36,580
some graphs overlay some graphs so this

00:12:34,030 --> 00:12:39,580
is this is the past the present the

00:12:36,580 --> 00:12:42,160
future let's say it this way in the past

00:12:39,580 --> 00:12:44,680
people had a mainframe there was only

00:12:42,160 --> 00:12:48,190
one mainframe down in the cellar or

00:12:44,680 --> 00:12:50,650
maybe at another building when the

00:12:48,190 --> 00:12:52,750
mainframe was yeah somehow new system

00:12:50,650 --> 00:12:54,640
showed up it was personal computers so

00:12:52,750 --> 00:12:56,380
nobody had a terminal but everybody has

00:12:54,640 --> 00:13:00,340
its own computer next to his desk and

00:12:56,380 --> 00:13:03,310
was working on his own computer and you

00:13:00,340 --> 00:13:05,830
had more systems with it then people

00:13:03,310 --> 00:13:08,440
said ok but we want to make better usage

00:13:05,830 --> 00:13:10,690
and separation of servers so we don't

00:13:08,440 --> 00:13:13,090
want to throw all services directly on

00:13:10,690 --> 00:13:14,980
to one server but we want to distribute

00:13:13,090 --> 00:13:18,010
them on one server by having running

00:13:14,980 --> 00:13:20,740
them in virtual machines so we can more

00:13:18,010 --> 00:13:23,200
better make usage of the computing power

00:13:20,740 --> 00:13:24,899
we have so let's combine services that

00:13:23,200 --> 00:13:27,089
run through the day and run to

00:13:24,899 --> 00:13:29,850
night as virtual machines so still

00:13:27,089 --> 00:13:33,420
isolated from from application

00:13:29,850 --> 00:13:35,990
perspective and you put together due to

00:13:33,420 --> 00:13:38,939
the virtualization and then we receive

00:13:35,990 --> 00:13:41,220
containers know and be aware that this

00:13:38,939 --> 00:13:44,610
is not this the scale here is

00:13:41,220 --> 00:13:46,980
logarithmic it's not linear forget about

00:13:44,610 --> 00:13:49,259
it so I see that the customer they first

00:13:46,980 --> 00:13:50,999
had 220 servers over there they still

00:13:49,259 --> 00:13:53,129
have 20 servers yes but now they are

00:13:50,999 --> 00:13:55,040
used for virtualization so it's no

00:13:53,129 --> 00:13:58,019
longer 20 servers serving the

00:13:55,040 --> 00:14:00,990
development platform they have 1,000 VMs

00:13:58,019 --> 00:14:02,970
running on their 20 servers and if you

00:14:00,990 --> 00:14:05,790
go Kahn if you go if we go to containers

00:14:02,970 --> 00:14:06,809
I suppose we have now five Dhaka D is

00:14:05,790 --> 00:14:08,939
running over there

00:14:06,809 --> 00:14:12,089
so basically it's static things nothing

00:14:08,939 --> 00:14:14,339
that changes very very fast mostly for

00:14:12,089 --> 00:14:16,679
CI pipelines and dashboarding and we

00:14:14,339 --> 00:14:18,899
already see 250 containers throwing up

00:14:16,679 --> 00:14:21,899
so quite interesting how you see the

00:14:18,899 --> 00:14:24,389
numbers of systems exploding with the

00:14:21,899 --> 00:14:26,369
numbers of system exploding there is one

00:14:24,389 --> 00:14:29,759
graph that directly points downwards

00:14:26,369 --> 00:14:31,800
which is the uptime graph so on a

00:14:29,759 --> 00:14:35,189
mainframe mainframe was just there and

00:14:31,800 --> 00:14:38,009
running then you had this PC components

00:14:35,189 --> 00:14:40,170
the server components yeah they had some

00:14:38,009 --> 00:14:42,629
down times sometimes they were hardware

00:14:40,170 --> 00:14:45,120
issues kernel upgrades and stuff like

00:14:42,629 --> 00:14:47,759
that and I still remember this marketing

00:14:45,120 --> 00:14:49,110
video from that Hamburg company they

00:14:47,759 --> 00:14:51,300
were they were saying hi we're cool

00:14:49,110 --> 00:14:54,360
company we need new employees and we do

00:14:51,300 --> 00:14:56,189
fun stuff for example moving from one

00:14:54,360 --> 00:14:59,009
office to the new office and having our

00:14:56,189 --> 00:15:01,259
core router a bsd system they put it

00:14:59,009 --> 00:15:03,720
into public transportation they had an

00:15:01,259 --> 00:15:06,240
ups connected to it so it has power and

00:15:03,720 --> 00:15:08,129
they had a small gsm modem to it so the

00:15:06,240 --> 00:15:10,230
monitoring could still ping it and shows

00:15:08,129 --> 00:15:13,439
none its non-disruptive it's still

00:15:10,230 --> 00:15:17,689
working because it has an uptime of 560

00:15:13,439 --> 00:15:17,689
days and we want to make it 600 days

00:15:18,949 --> 00:15:24,630
anybody here with a security background

00:15:22,710 --> 00:15:28,680
I'm just interested in your opinion of

00:15:24,630 --> 00:15:30,390
560 days up time sounds weird but that

00:15:28,680 --> 00:15:32,430
was the time where people were really

00:15:30,390 --> 00:15:33,720
proud you've seen it in the talk from

00:15:32,430 --> 00:15:35,250
the from Telecom people they were

00:15:33,720 --> 00:15:37,050
talking about the old times

00:15:35,250 --> 00:15:39,510
and I said yeah we were proud of having

00:15:37,050 --> 00:15:41,910
huge up times that was something they

00:15:39,510 --> 00:15:45,630
can prove we are able to run a stable

00:15:41,910 --> 00:15:48,090
platform usually I try to make jokes but

00:15:45,630 --> 00:15:50,220
no manager around here and I can do that

00:15:48,090 --> 00:15:51,870
joke at what what customer we said we we

00:15:50,220 --> 00:15:55,760
need a stable platform and I told him

00:15:51,870 --> 00:15:55,760
yes you know debt is also a stable State

00:15:56,270 --> 00:16:01,220
management was not really happy about

00:15:58,080 --> 00:16:04,410
that so when you have virtual machines

00:16:01,220 --> 00:16:06,300
downtime is even lower even if you maybe

00:16:04,410 --> 00:16:08,160
you freeze them for two or three seconds

00:16:06,300 --> 00:16:11,340
while moving them to another cluster but

00:16:08,160 --> 00:16:13,290
be sure this is a down time it's two or

00:16:11,340 --> 00:16:15,360
three seconds down time so it's not up

00:16:13,290 --> 00:16:18,510
time anymore and with containers

00:16:15,360 --> 00:16:21,060
containers are built to purpose a small

00:16:18,510 --> 00:16:23,640
specific use case and containers are

00:16:21,060 --> 00:16:26,190
destroyed when no longer needed or are

00:16:23,640 --> 00:16:28,440
for update processes there is no update

00:16:26,190 --> 00:16:30,300
process roll out the new version of the

00:16:28,440 --> 00:16:32,610
container and terminate the old version

00:16:30,300 --> 00:16:35,490
and then you're good to go so there are

00:16:32,610 --> 00:16:42,180
even four even far more shorter living

00:16:35,490 --> 00:16:45,720
instances so more systems with less

00:16:42,180 --> 00:16:47,610
uptime usually means more work so more

00:16:45,720 --> 00:16:50,100
systems already means more work but now

00:16:47,610 --> 00:16:53,970
they have lower uptime so I have more to

00:16:50,100 --> 00:16:57,450
do yeah let's look how the standard

00:16:53,970 --> 00:17:00,270
employee number development takes place

00:16:57,450 --> 00:17:02,310
now usually you see OK'd numbers of

00:17:00,270 --> 00:17:03,990
systems are increasing exponentially but

00:17:02,310 --> 00:17:06,959
numbers of staff is not increasing

00:17:03,990 --> 00:17:09,480
exponentially at least not in ops or

00:17:06,959 --> 00:17:13,350
development or our DevOps or IT

00:17:09,480 --> 00:17:16,770
organizations which only leads to one

00:17:13,350 --> 00:17:19,980
thing so we have a plenitude of service

00:17:16,770 --> 00:17:22,740
more with lower downtime more work to do

00:17:19,980 --> 00:17:26,220
with the same amount of people means you

00:17:22,740 --> 00:17:29,850
must go to 100% automation otherwise

00:17:26,220 --> 00:17:31,560
you're lost everything must be automated

00:17:29,850 --> 00:17:33,830
the whole setup of your whole

00:17:31,560 --> 00:17:35,760
infrastructure everything you need

00:17:33,830 --> 00:17:39,480
regardless whether it is storage

00:17:35,760 --> 00:17:41,940
system centralized databases everything

00:17:39,480 --> 00:17:46,320
that is involved into containers must be

00:17:41,940 --> 00:17:50,730
automated from the past who is aware of

00:17:46,320 --> 00:17:54,150
the 80/20 principle usually it refers to

00:17:50,730 --> 00:17:57,720
you can do 80% of the things and 20% of

00:17:54,150 --> 00:18:01,530
the time so usually people say do these

00:17:57,720 --> 00:18:05,580
80% and spend the rest of the or 80%

00:18:01,530 --> 00:18:08,070
time do something different but this has

00:18:05,580 --> 00:18:10,800
changed now we still have the 80 20

00:18:08,070 --> 00:18:12,810
percent principle but it means when you

00:18:10,800 --> 00:18:15,600
don't do hundred percent and you do 80

00:18:12,810 --> 00:18:18,270
percent only an automated pattern and 20

00:18:15,600 --> 00:18:20,310
percent of your time you afterwards you

00:18:18,270 --> 00:18:22,940
was 80 percent of the time and doing the

00:18:20,310 --> 00:18:25,920
stuff manually that you didn't automate

00:18:22,940 --> 00:18:27,870
automate everything when people ask me

00:18:25,920 --> 00:18:31,140
should we really automate everything

00:18:27,870 --> 00:18:33,150
yes automate everything you will

00:18:31,140 --> 00:18:35,370
otherwise you will it takes your whole

00:18:33,150 --> 00:18:42,450
business time for doing things you've

00:18:35,370 --> 00:18:45,210
not automated okay we know we have to

00:18:42,450 --> 00:18:47,820
automate stuff we already got some ideas

00:18:45,210 --> 00:18:50,520
about containers but it's little look

00:18:47,820 --> 00:18:52,980
look a little bit more into now multiple

00:18:50,520 --> 00:18:54,240
containers we had the single containers

00:18:52,980 --> 00:18:56,400
where I told you this is something like

00:18:54,240 --> 00:18:58,890
a binary and you just run the binary

00:18:56,400 --> 00:19:01,320
somewhere and the binary is a version

00:18:58,890 --> 00:19:03,960
and developers provide you with new

00:19:01,320 --> 00:19:06,290
versions of these binaries maybe you

00:19:03,960 --> 00:19:08,490
even ask them please provide us some

00:19:06,290 --> 00:19:10,470
configuration switches to enable

00:19:08,490 --> 00:19:13,320
debugging to redirect logging to

00:19:10,470 --> 00:19:15,330
someplace else so that you can deal with

00:19:13,320 --> 00:19:20,250
this application from a novice

00:19:15,330 --> 00:19:22,410
perspective so containers itself usually

00:19:20,250 --> 00:19:26,790
are there for being short living

00:19:22,410 --> 00:19:28,050
instances they don't run for 340 days at

00:19:26,790 --> 00:19:30,960
least I've never seen a container

00:19:28,050 --> 00:19:33,150
running that long usually they are not

00:19:30,960 --> 00:19:35,070
meant for there's a website describing

00:19:33,150 --> 00:19:36,900
what you should think about when

00:19:35,070 --> 00:19:38,640
building deploying and running

00:19:36,900 --> 00:19:40,500
containers especially the build process

00:19:38,640 --> 00:19:42,840
is meant by this 12 factor

00:19:40,500 --> 00:19:45,060
check out the 12 factor when dealing

00:19:42,840 --> 00:19:47,220
with containers it's a it's a strategy

00:19:45,060 --> 00:19:48,910
how you could how you should start

00:19:47,220 --> 00:19:53,710
thinking when working

00:19:48,910 --> 00:19:56,020
on or with containers which means don't

00:19:53,710 --> 00:19:57,790
manage containers has permanent systems

00:19:56,020 --> 00:19:59,350
destroy them when they are not working

00:19:57,790 --> 00:20:03,120
or when you have really have a new

00:19:59,350 --> 00:20:05,920
release at hand think about your data

00:20:03,120 --> 00:20:08,920
containers are really nice when you say

00:20:05,920 --> 00:20:10,860
I have non-persistent data a container

00:20:08,920 --> 00:20:13,390
gets a requests you process a request

00:20:10,860 --> 00:20:15,760
and sends the request to someplace else

00:20:13,390 --> 00:20:17,740
or answers back to who has ever sent the

00:20:15,760 --> 00:20:19,750
request this is really nice for

00:20:17,740 --> 00:20:22,000
containers because this is called mostly

00:20:19,750 --> 00:20:24,190
this is taking place in memory and not

00:20:22,000 --> 00:20:26,620
on disk everything which is happening on

00:20:24,190 --> 00:20:28,810
disk is first when you have it locally

00:20:26,620 --> 00:20:31,240
in the container is slow then people

00:20:28,810 --> 00:20:33,760
sell oh yeah but you can just bind

00:20:31,240 --> 00:20:35,680
volumes to it so you can pass through

00:20:33,760 --> 00:20:38,050
the underlying filesystem into the

00:20:35,680 --> 00:20:39,460
container so it's no problem at all of

00:20:38,050 --> 00:20:41,260
having the database server running

00:20:39,460 --> 00:20:42,580
inside the container so at least the

00:20:41,260 --> 00:20:44,620
database engine is running in a

00:20:42,580 --> 00:20:48,070
container the database itself it's

00:20:44,620 --> 00:20:50,050
outside of the container yeah that's

00:20:48,070 --> 00:20:52,950
true for when you see one single node

00:20:50,050 --> 00:20:56,890
only where you run multiple containers

00:20:52,950 --> 00:20:59,380
but think about multiple systems where

00:20:56,890 --> 00:21:01,260
you want to deploy containers upon so on

00:20:59,380 --> 00:21:04,210
one is the file system for the database

00:21:01,260 --> 00:21:07,240
what's on the other oh we should place

00:21:04,210 --> 00:21:10,900
this on how is this called no such file

00:21:07,240 --> 00:21:12,460
system nightmare file system NFS place

00:21:10,900 --> 00:21:15,670
it's somewhere on a shared storage okay

00:21:12,460 --> 00:21:17,530
make it a redundant make it a gpfs or an

00:21:15,670 --> 00:21:21,400
oracle cluster filesystem or something

00:21:17,530 --> 00:21:24,400
like that okay when you deal with

00:21:21,400 --> 00:21:27,340
containers try working on them and try

00:21:24,400 --> 00:21:32,020
to break them as early as possible and

00:21:27,340 --> 00:21:33,550
that's so horrible easy we played around

00:21:32,020 --> 00:21:35,530
with containers the first thing we

00:21:33,550 --> 00:21:38,590
learned okay we are not allowed to pull

00:21:35,530 --> 00:21:41,920
images from the internet well we have to

00:21:38,590 --> 00:21:43,630
run our own registry server okay there

00:21:41,920 --> 00:21:46,630
is a registry server which you couldn't

00:21:43,630 --> 00:21:49,660
docker pull so you have the registry

00:21:46,630 --> 00:21:51,490
server which needs internet access so

00:21:49,660 --> 00:21:53,410
that was the only exception we received

00:21:51,490 --> 00:21:56,200
from security saying ok you are allowed

00:21:53,410 --> 00:21:58,270
to pull the registry container so you

00:21:56,200 --> 00:21:59,920
have a registry container locally and

00:21:58,270 --> 00:22:02,190
that's the last thing you pull from

00:21:59,920 --> 00:22:02,190
docker

00:22:03,320 --> 00:22:09,450
afterwards we change DNS to a point

00:22:06,810 --> 00:22:11,490
docker hub to either localhost or to our

00:22:09,450 --> 00:22:14,580
internal registry server something like

00:22:11,490 --> 00:22:20,540
this so nobody may pull from the

00:22:14,580 --> 00:22:22,680
internet curl - clay pipe sudo bash here

00:22:20,540 --> 00:22:25,470
check what happens when you have

00:22:22,680 --> 00:22:27,300
instances running what happens if

00:22:25,470 --> 00:22:29,190
someone says I have to do a maintenance

00:22:27,300 --> 00:22:31,080
I want to change something on the docker

00:22:29,190 --> 00:22:33,090
configuration and I restart the docker

00:22:31,080 --> 00:22:36,720
daemon and suddenly you wonder where the

00:22:33,090 --> 00:22:38,640
hell are all of my containers they have

00:22:36,720 --> 00:22:40,800
nicely when it and disappeared when the

00:22:38,640 --> 00:22:42,690
docker demon went down no and we'll

00:22:40,800 --> 00:22:45,060
these are not like services that will be

00:22:42,690 --> 00:22:47,970
up again in an automatic pattern you

00:22:45,060 --> 00:22:52,080
have to start them again the most senior

00:22:47,970 --> 00:22:54,540
one we started using docker in CI CD so

00:22:52,080 --> 00:22:56,550
we want to do testing on our automation

00:22:54,540 --> 00:22:59,340
of the CI CD setup

00:22:56,550 --> 00:23:01,470
well this time we do puppet not ansible

00:22:59,340 --> 00:23:03,450
so because I don't like ansible so

00:23:01,470 --> 00:23:06,600
answering the thing to the telecom

00:23:03,450 --> 00:23:09,180
people but that's ok so and we also want

00:23:06,600 --> 00:23:11,670
to test that our configuration

00:23:09,180 --> 00:23:14,250
management tool configures our CI

00:23:11,670 --> 00:23:16,830
systems accordingly what is it that we

00:23:14,250 --> 00:23:19,380
have running inside a CI system we have

00:23:16,830 --> 00:23:21,540
a docker D running inside so we have the

00:23:19,380 --> 00:23:23,730
CI server itself in production State

00:23:21,540 --> 00:23:25,620
having a docker daemon running in that

00:23:23,730 --> 00:23:27,720
docker daemon we want to deploy a CI

00:23:25,620 --> 00:23:31,290
server that has a docker daemon running

00:23:27,720 --> 00:23:33,540
inside there are plenty solutions that

00:23:31,290 --> 00:23:35,990
tells you how point to the outbound

00:23:33,540 --> 00:23:35,990
docker

00:23:36,190 --> 00:23:40,370
to the digital pipe so you can connect

00:23:38,600 --> 00:23:42,679
it to the outbound Dockers but that's

00:23:40,370 --> 00:23:44,450
not the real test so we want to test

00:23:42,679 --> 00:23:46,760
that we are really able to deploy a

00:23:44,450 --> 00:23:49,610
docker daemon even if it's inside a

00:23:46,760 --> 00:23:51,860
docker container it took us around about

00:23:49,610 --> 00:23:54,020
four weeks discovering lots of

00:23:51,860 --> 00:23:57,320
interesting things which are recommended

00:23:54,020 --> 00:23:58,730
to do recommend it to not do and the

00:23:57,320 --> 00:24:00,380
only way we were able to do it

00:23:58,730 --> 00:24:03,620
afterwards saying we use different

00:24:00,380 --> 00:24:06,169
underlying overlay file systems one on

00:24:03,620 --> 00:24:10,669
the real CI server and one which we use

00:24:06,169 --> 00:24:12,230
inside the docker D of a CI server but

00:24:10,669 --> 00:24:14,240
it's an interesting thing you see it's

00:24:12,230 --> 00:24:16,370
not it's not scaling like virtualization

00:24:14,240 --> 00:24:18,890
where you can say I can have KBM inside

00:24:16,370 --> 00:24:21,169
k vm inside k vm whether that's usually

00:24:18,890 --> 00:24:23,090
useful or not but it's easy to do but

00:24:21,169 --> 00:24:26,480
not with docker you have this one layer

00:24:23,090 --> 00:24:28,309
usually only and a set up with chosen

00:24:26,480 --> 00:24:30,380
here within the CIA CD platform with

00:24:28,309 --> 00:24:33,740
this two different overlay file system

00:24:30,380 --> 00:24:36,110
the file system that we have inside CI

00:24:33,740 --> 00:24:38,240
instance running inside the docker D is

00:24:36,110 --> 00:24:42,289
definitely running and not recommended

00:24:38,240 --> 00:24:45,140
for production mode so this is where we

00:24:42,289 --> 00:24:47,270
started dealing learning about how do we

00:24:45,140 --> 00:24:49,610
build containers how do we deal with the

00:24:47,270 --> 00:24:51,980
registry how do we secure the registry

00:24:49,610 --> 00:24:54,559
how can we limit access to the registry

00:24:51,980 --> 00:24:56,630
so production should never fetch a

00:24:54,559 --> 00:24:58,929
development state of a container it

00:24:56,630 --> 00:25:02,029
should always fetch the production State

00:24:58,929 --> 00:25:03,710
we started working on the most simple

00:25:02,029 --> 00:25:06,500
thing we can think about and this is our

00:25:03,710 --> 00:25:10,190
CI CD solution so saying we have built

00:25:06,500 --> 00:25:12,130
processes and first we as the well let's

00:25:10,190 --> 00:25:15,320
say we are the IT infrastructure

00:25:12,130 --> 00:25:17,809
engineers over there and we told nobody

00:25:15,320 --> 00:25:20,480
so we talked to security hey we would

00:25:17,809 --> 00:25:22,580
like to have a docker d running in our

00:25:20,480 --> 00:25:24,590
CI CD platform we would just want to use

00:25:22,580 --> 00:25:28,570
it for build process since the icd

00:25:24,590 --> 00:25:30,890
nothing else and I said yeah okay

00:25:28,570 --> 00:25:32,630
think about the registry server and

00:25:30,890 --> 00:25:36,020
never ever pull anything from outside

00:25:32,630 --> 00:25:38,059
build your own things okay so we learned

00:25:36,020 --> 00:25:40,039
about how to create table walls to make

00:25:38,059 --> 00:25:44,740
containers from tar balls so we have our

00:25:40,039 --> 00:25:44,740
yeah minimal container available for us

00:25:44,780 --> 00:25:49,400
the next thing we saw was we really

00:25:47,600 --> 00:25:52,400
might find found it very useful were

00:25:49,400 --> 00:25:55,010
building dashboards so every developer

00:25:52,400 --> 00:25:57,950
team has somehow a dashboard showing

00:25:55,010 --> 00:26:01,100
their interesting metrics which are

00:25:57,950 --> 00:26:02,540
relevant to the team accordingly so we

00:26:01,100 --> 00:26:05,030
also started okay let's build our

00:26:02,540 --> 00:26:09,800
dashboard that we need also as a docker

00:26:05,030 --> 00:26:11,600
demon so as a docker container after a

00:26:09,800 --> 00:26:14,060
couple of two weeks we had a look at the

00:26:11,600 --> 00:26:15,920
systems and we were wondering what the

00:26:14,060 --> 00:26:19,760
hell is happening here

00:26:15,920 --> 00:26:21,590
there's lots of containers running yeah

00:26:19,760 --> 00:26:23,630
one of the developers somehow had a look

00:26:21,590 --> 00:26:27,560
at the CI CD server and he was running

00:26:23,630 --> 00:26:29,480
wow there's the Adi running so they

00:26:27,560 --> 00:26:32,060
started yeah this first they started to

00:26:29,480 --> 00:26:33,980
pull from docker hub they learned it's

00:26:32,060 --> 00:26:35,540
not possible so they learned how but

00:26:33,980 --> 00:26:37,670
wait we have something like an internal

00:26:35,540 --> 00:26:39,410
registry ok let's use that internal

00:26:37,670 --> 00:26:41,960
registry I see we get a base sent to a

00:26:39,410 --> 00:26:44,330
system ok little bit stripped down yes

00:26:41,960 --> 00:26:47,140
but already in the way how the customer

00:26:44,330 --> 00:26:49,100
wanted to have a send Wes system set up

00:26:47,140 --> 00:26:52,010
and then they started playing around

00:26:49,100 --> 00:26:54,110
with it some forgot to delete the

00:26:52,010 --> 00:26:55,970
containers after they were useful as oh

00:26:54,110 --> 00:26:57,860
they were just there and running and

00:26:55,970 --> 00:26:59,720
this was all the process where we

00:26:57,860 --> 00:27:02,390
learned about what is it that you can do

00:26:59,720 --> 00:27:04,190
wrong when you just do containers one

00:27:02,390 --> 00:27:06,500
team was showing up and saying we have

00:27:04,190 --> 00:27:08,930
troubles we have now everything

00:27:06,500 --> 00:27:11,420
containerized and our build process is

00:27:08,930 --> 00:27:14,990
now taking 50 minutes longer than

00:27:11,420 --> 00:27:16,640
usually what the hell is wrong and we

00:27:14,990 --> 00:27:19,030
had to look and we said yes it's 50

00:27:16,640 --> 00:27:21,410
minute you're waiting for docker pull

00:27:19,030 --> 00:27:23,770
why the hell are you building a

00:27:21,410 --> 00:27:29,450
two-and-a-half gigabyte sized container

00:27:23,770 --> 00:27:31,100
every two hours it makes no sense so

00:27:29,450 --> 00:27:32,690
every time you build a new container you

00:27:31,100 --> 00:27:34,340
trigger the deployment the test process

00:27:32,690 --> 00:27:36,470
which means pulling the new container

00:27:34,340 --> 00:27:39,290
and then starting the build and test

00:27:36,470 --> 00:27:41,960
process so maybe that's not the right

00:27:39,290 --> 00:27:44,330
choice for a container putting two and a

00:27:41,960 --> 00:27:48,280
half gigabytes of google android

00:27:44,330 --> 00:27:50,660
binaries inside yeah

00:27:48,280 --> 00:27:53,030
so what else what is the next step that

00:27:50,660 --> 00:27:55,010
we are heading to we say okay at the

00:27:53,030 --> 00:27:57,680
moment we have doc edema running on a

00:27:55,010 --> 00:27:58,460
single host we have docker instances

00:27:57,680 --> 00:28:00,410
running in

00:27:58,460 --> 00:28:02,750
this Daugherty mostly they are

00:28:00,410 --> 00:28:04,340
encapsulated so when they need something

00:28:02,750 --> 00:28:06,650
they have access to the internal network

00:28:04,340 --> 00:28:08,060
why are the hosts underneath so

00:28:06,650 --> 00:28:11,210
basically they could do something like

00:28:08,060 --> 00:28:13,220
nothing on the host underneath they did

00:28:11,210 --> 00:28:15,950
not there's no need for them to be

00:28:13,220 --> 00:28:18,740
available from remote except for the

00:28:15,950 --> 00:28:20,630
ones we use for for acceptance testing

00:28:18,740 --> 00:28:22,370
our configuration management these are

00:28:20,630 --> 00:28:25,490
spun up in a way that we do theirs port

00:28:22,370 --> 00:28:28,120
forwarding and SSH enabled inside so we

00:28:25,490 --> 00:28:30,830
can SSH in and run service pack inside

00:28:28,120 --> 00:28:33,350
but when it comes to the now the real

00:28:30,830 --> 00:28:35,900
problem of ops people we have a larger

00:28:33,350 --> 00:28:37,940
infrastructure we have more to do so we

00:28:35,900 --> 00:28:40,940
must ensure something like container

00:28:37,940 --> 00:28:43,940
management so we must be able to have a

00:28:40,940 --> 00:28:46,370
centralized system that allows us to

00:28:43,940 --> 00:28:49,520
manage multiple containers spread

00:28:46,370 --> 00:28:52,130
amongst multiple docker D instances or

00:28:49,520 --> 00:28:55,940
how whatever is the container engine

00:28:52,130 --> 00:28:58,040
that you are using so you want to have

00:28:55,940 --> 00:28:59,990
something like an orchestration so

00:28:58,040 --> 00:29:02,300
orchestration can start with I want to

00:28:59,990 --> 00:29:03,980
run an update so the update is easy as

00:29:02,300 --> 00:29:06,530
we already know destroy the old

00:29:03,980 --> 00:29:08,420
container spin up new containers how

00:29:06,530 --> 00:29:11,960
about the database migration schema

00:29:08,420 --> 00:29:14,450
schema migration okay maybe this is a

00:29:11,960 --> 00:29:16,040
permanent system not a docker daemon but

00:29:14,450 --> 00:29:19,070
you somehow also must orchestrate that

00:29:16,040 --> 00:29:20,720
next to it what is it that when you want

00:29:19,070 --> 00:29:22,370
to do some hardware maintenance on a

00:29:20,720 --> 00:29:24,620
system underneath you have to take the

00:29:22,370 --> 00:29:26,450
system out of service and anything that

00:29:24,620 --> 00:29:28,610
is running on that must be moved to some

00:29:26,450 --> 00:29:31,850
other place also some kind of yeah

00:29:28,610 --> 00:29:34,070
management maintenance you have to deal

00:29:31,850 --> 00:29:35,360
about the networking stack so maybe you

00:29:34,070 --> 00:29:37,700
want to have applications being

00:29:35,360 --> 00:29:39,590
available for external so you want to

00:29:37,700 --> 00:29:41,690
have a service somehow offering a web

00:29:39,590 --> 00:29:44,570
service a database service a Redis

00:29:41,690 --> 00:29:47,390
service whatsoever so you must think

00:29:44,570 --> 00:29:49,010
about how do I get traffic inside my

00:29:47,390 --> 00:29:51,410
containers and how do I get the traffic

00:29:49,010 --> 00:29:58,190
out of the containers do I use and

00:29:51,410 --> 00:30:00,200
there's plenty solutions around so the

00:29:58,190 --> 00:30:03,020
next thing we do is playing around with

00:30:00,200 --> 00:30:05,330
container engines and there of course we

00:30:03,020 --> 00:30:07,430
wanted to say we want to test everything

00:30:05,330 --> 00:30:10,370
up front things that we see in a data

00:30:07,430 --> 00:30:12,230
center hardware dying so just kill off

00:30:10,370 --> 00:30:14,540
the system which

00:30:12,230 --> 00:30:16,520
has containers running and wait for the

00:30:14,540 --> 00:30:18,500
container management that the containers

00:30:16,520 --> 00:30:22,720
that have been down are spinned up again

00:30:18,500 --> 00:30:22,720
in the state as we want to have them

00:30:22,990 --> 00:30:27,169
usually you see with the first

00:30:24,770 --> 00:30:30,559
documentation we saw when it comes to in

00:30:27,169 --> 00:30:33,470
this case specific to k8s as we call it

00:30:30,559 --> 00:30:35,390
a kubernetes is that they say are the

00:30:33,470 --> 00:30:37,190
most easy thing is to just have the

00:30:35,390 --> 00:30:41,380
kubernetes AP servers running as a

00:30:37,190 --> 00:30:44,210
docker container wait the core of your

00:30:41,380 --> 00:30:48,530
container management is running in a

00:30:44,210 --> 00:30:50,120
container this somehow sounds weird like

00:30:48,530 --> 00:30:51,679
a hand egg problem how do I get the

00:30:50,120 --> 00:30:54,260
container there for the container engine

00:30:51,679 --> 00:30:57,679
there first so things that we already

00:30:54,260 --> 00:30:59,630
see you hard to find good documentation

00:30:57,679 --> 00:31:02,030
on how to build a production ready

00:30:59,630 --> 00:31:04,580
cluster for kubernetes I know people

00:31:02,030 --> 00:31:06,620
doing it and as far as I effort many of

00:31:04,580 --> 00:31:08,299
them say no we don't run the API server

00:31:06,620 --> 00:31:09,500
in a container some say yeah we run it

00:31:08,299 --> 00:31:11,210
in a container when it's not there

00:31:09,500 --> 00:31:13,190
everything is functional you just can't

00:31:11,210 --> 00:31:15,500
do things new or change something

00:31:13,190 --> 00:31:17,720
depends on what you want you have to

00:31:15,500 --> 00:31:19,160
check whether this is a good idea we

00:31:17,720 --> 00:31:22,870
want to deal with people miss

00:31:19,160 --> 00:31:26,630
configuring any kind of container engine

00:31:22,870 --> 00:31:28,669
so doing things wrong not by accident

00:31:26,630 --> 00:31:31,040
no doing by accident is something that

00:31:28,669 --> 00:31:33,500
can do everybody everybody does it once

00:31:31,040 --> 00:31:36,410
or twice while doing IT works that's

00:31:33,500 --> 00:31:37,910
usual but we wanna by purpose configure

00:31:36,410 --> 00:31:40,280
something wrong and see how things are

00:31:37,910 --> 00:31:43,190
we are behaving we want to see how can

00:31:40,280 --> 00:31:45,020
we upgrade some people recommend build a

00:31:43,190 --> 00:31:47,000
new container build a new container

00:31:45,020 --> 00:31:48,950
management platform in the new version

00:31:47,000 --> 00:31:51,559
next to it and migrate everything over

00:31:48,950 --> 00:31:54,280
or do we really inline upgrade the

00:31:51,559 --> 00:31:57,380
existing container management solution

00:31:54,280 --> 00:32:00,590
then people start discussing should we

00:31:57,380 --> 00:32:03,530
run containers by ourself should we use

00:32:00,590 --> 00:32:06,500
some external party that delivers this

00:32:03,530 --> 00:32:09,440
sa service whether it's Google compute

00:32:06,500 --> 00:32:11,660
Amazon well mostly but that depends on

00:32:09,440 --> 00:32:14,330
your policy regarding data protection

00:32:11,660 --> 00:32:17,559
can you run in a public cloud or not do

00:32:14,330 --> 00:32:20,600
you must you run on-premise or not and

00:32:17,559 --> 00:32:23,780
these systems that are usually public

00:32:20,600 --> 00:32:26,050
offered things I only see them running

00:32:23,780 --> 00:32:27,580
to bonitas I've never seen someone

00:32:26,050 --> 00:32:30,510
something different that they do some

00:32:27,580 --> 00:32:32,890
different container engine underneath

00:32:30,510 --> 00:32:36,370
but please think what is it that you

00:32:32,890 --> 00:32:38,290
want to achieve so kubernetes is very

00:32:36,370 --> 00:32:41,920
complex that's the reason why there's

00:32:38,290 --> 00:32:44,530
many distributions like AWS kubernetes

00:32:41,920 --> 00:32:47,200
google kubernetes OpenShift which is a

00:32:44,530 --> 00:32:49,480
distribution that bundles kubernetes

00:32:47,200 --> 00:32:51,130
there's OpenShift origin i suppose which

00:32:49,480 --> 00:32:52,870
you can run locally on your own data

00:32:51,130 --> 00:32:55,270
center there's some hosted solution

00:32:52,870 --> 00:32:58,360
available so these are all distributions

00:32:55,270 --> 00:33:00,490
that try to offer you the most easy way

00:32:58,360 --> 00:33:01,900
to get the kubernetes cluster up and

00:33:00,490 --> 00:33:05,020
running so you can deploy containers

00:33:01,900 --> 00:33:07,030
inside yeah it's super scalable it's

00:33:05,020 --> 00:33:10,480
what people tend to say the Google desk

00:33:07,030 --> 00:33:13,990
way of doing things so planning for

00:33:10,480 --> 00:33:16,330
building data centers on Mars do you

00:33:13,990 --> 00:33:18,610
want to have data centers on Mars would

00:33:16,330 --> 00:33:21,130
be interesting measuring latency over

00:33:18,610 --> 00:33:23,410
the area but I don't see the need

00:33:21,130 --> 00:33:25,600
actually I don't want to live on Mars

00:33:23,410 --> 00:33:28,480
either so maybe you will need something

00:33:25,600 --> 00:33:30,480
in a far more smaller scale and we heard

00:33:28,480 --> 00:33:34,390
already this morning from from Mitchell

00:33:30,480 --> 00:33:36,190
he was talking about a terraform yeah

00:33:34,390 --> 00:33:38,920
you already mentioned terraform is not

00:33:36,190 --> 00:33:40,570
for poor bare metal for bare metal you

00:33:38,920 --> 00:33:41,770
can use something like normal and no mat

00:33:40,570 --> 00:33:43,510
will do the bare metal thing and then

00:33:41,770 --> 00:33:45,640
you can continue working with with

00:33:43,510 --> 00:33:48,070
terraform you can check missiles they

00:33:45,640 --> 00:33:49,840
have something in place Netflix had

00:33:48,070 --> 00:33:51,370
recently released their container

00:33:49,840 --> 00:33:53,410
management engine under open-source

00:33:51,370 --> 00:33:54,940
license maybe it's even bundled with

00:33:53,410 --> 00:33:57,340
every docker installation that docker

00:33:54,940 --> 00:33:59,830
swarm is already sufficient for you to

00:33:57,340 --> 00:34:01,750
deal with so you can use docker machine

00:33:59,830 --> 00:34:03,700
to deploy dr. D on a machine and

00:34:01,750 --> 00:34:05,470
afterwards docker swarm to deploy

00:34:03,700 --> 00:34:08,800
containers on all of your document

00:34:05,470 --> 00:34:11,260
machines or you go to Korres and rocket

00:34:08,800 --> 00:34:13,840
so there's plenty solutions around and

00:34:11,260 --> 00:34:15,760
check what is the best way for you what

00:34:13,840 --> 00:34:19,000
is the thing that you can do deal best

00:34:15,760 --> 00:34:21,190
with when you say okay we are enforced

00:34:19,000 --> 00:34:24,100
to go to any kind of supported version

00:34:21,190 --> 00:34:25,990
anyway so we have a redhead contract we

00:34:24,100 --> 00:34:28,419
have the satellite service so we now

00:34:25,990 --> 00:34:30,700
adjust order on top the open chef

00:34:28,419 --> 00:34:33,010
platform then for sure you will receive

00:34:30,700 --> 00:34:34,510
kubernetes okay then I can skip

00:34:33,010 --> 00:34:36,760
everything I don't have to deal with

00:34:34,510 --> 00:34:38,860
docker I just install open shift and I

00:34:36,760 --> 00:34:40,000
start with the open shift this is what

00:34:38,860 --> 00:34:43,720
they did at my customer

00:34:40,000 --> 00:34:47,139
and after three months the IT of people

00:34:43,720 --> 00:34:49,659
who said okay so we we had this couple

00:34:47,139 --> 00:34:51,580
of hours per day time digging into this

00:34:49,659 --> 00:34:53,649
but we don't understand that we don't

00:34:51,580 --> 00:34:55,030
get it we don't know how to run this

00:34:53,649 --> 00:34:56,740
thing we don't know how to manage this

00:34:55,030 --> 00:34:58,540
thing there yeah there's documentation

00:34:56,740 --> 00:35:00,849
but it's all new terms and wording and

00:34:58,540 --> 00:35:03,580
and everything looks different this

00:35:00,849 --> 00:35:05,080
there's Software Defined Networking

00:35:03,580 --> 00:35:07,060
there's nothing we can really touch

00:35:05,080 --> 00:35:08,800
there's no cables there's no switches no

00:35:07,060 --> 00:35:11,290
routers there's no real hardware

00:35:08,800 --> 00:35:13,570
underneath and that's the reason why we

00:35:11,290 --> 00:35:15,250
decided okay we do the slow path we

00:35:13,570 --> 00:35:17,260
first introduced dr. D we want to learn

00:35:15,250 --> 00:35:20,410
about the issues with containers then we

00:35:17,260 --> 00:35:22,060
can move on to any kind of whatever is

00:35:20,410 --> 00:35:24,040
the solution that you want to have that

00:35:22,060 --> 00:35:25,599
customer made the decision openshift so

00:35:24,040 --> 00:35:27,220
we're going for kubernetes we want to

00:35:25,599 --> 00:35:29,650
learn and understand how kubernetes is

00:35:27,220 --> 00:35:31,330
working well we have an understanding on

00:35:29,650 --> 00:35:33,160
that and we can run it on premise then

00:35:31,330 --> 00:35:35,410
we can move forward for knowing okay now

00:35:33,160 --> 00:35:37,900
we have the knowledge required for run

00:35:35,410 --> 00:35:39,730
running a container management solution

00:35:37,900 --> 00:35:41,890
based on kubernetes because we have an

00:35:39,730 --> 00:35:44,230
understanding for it we are absolutely

00:35:41,890 --> 00:35:46,470
sure some things will work different in

00:35:44,230 --> 00:35:49,630
a distribution combined compared to a

00:35:46,470 --> 00:35:52,210
standalone medley of a non modified

00:35:49,630 --> 00:35:53,680
kubernetes cluster for sure but getting

00:35:52,210 --> 00:35:55,000
the basics and the understanding how

00:35:53,680 --> 00:36:01,240
things are working this is the most

00:35:55,000 --> 00:36:04,839
important things what was in the past

00:36:01,240 --> 00:36:07,570
the mainframe yes no there was something

00:36:04,839 --> 00:36:09,130
different ah yeah when we do containers

00:36:07,570 --> 00:36:13,210
there's no need for configuration

00:36:09,130 --> 00:36:14,680
management because data is just is no

00:36:13,210 --> 00:36:16,290
longer needed the container knows

00:36:14,680 --> 00:36:21,040
everything where it should connect to

00:36:16,290 --> 00:36:22,690
okay but what about your database maybe

00:36:21,040 --> 00:36:25,180
you have a specific need for a database

00:36:22,690 --> 00:36:26,830
do you really want is it supported by

00:36:25,180 --> 00:36:29,170
Oracle to run a red cluster in

00:36:26,830 --> 00:36:30,520
containers I don't know ask Oracle

00:36:29,170 --> 00:36:33,550
people they will tell you whether you

00:36:30,520 --> 00:36:35,740
get support for that how about your

00:36:33,550 --> 00:36:37,390
Exadata I've never seen someone moving

00:36:35,740 --> 00:36:40,000
exit data into containers

00:36:37,390 --> 00:36:42,580
maybe Oracle does this internally but

00:36:40,000 --> 00:36:44,760
not for public customers so you still

00:36:42,580 --> 00:36:46,839
might have a need for specific things

00:36:44,760 --> 00:36:48,550
infrastructure components when you say

00:36:46,839 --> 00:36:50,660
these infrastructure components are

00:36:48,550 --> 00:36:53,540
still somehow managed in the old pattern

00:36:50,660 --> 00:36:56,780
you will never ever migrate them over to

00:36:53,540 --> 00:36:59,750
some kind of kind container a big

00:36:56,780 --> 00:37:02,390
bloated java engine that needs three and

00:36:59,750 --> 00:37:04,460
a half minutes to adjust initialize and

00:37:02,390 --> 00:37:06,890
Gen wait four more minutes till is able

00:37:04,460 --> 00:37:08,060
to serve a request that's definitely not

00:37:06,890 --> 00:37:10,100
something you want to put into a

00:37:08,060 --> 00:37:11,870
container at least when the Queen now

00:37:10,100 --> 00:37:14,120
this java application needs again two

00:37:11,870 --> 00:37:15,470
minutes to shut down afterwards that's

00:37:14,120 --> 00:37:16,910
that's not the right use case for

00:37:15,470 --> 00:37:21,590
containers this is something you want to

00:37:16,910 --> 00:37:24,800
keep on VM or on metal the other thing

00:37:21,590 --> 00:37:27,940
is monitoring so usually you see what

00:37:24,800 --> 00:37:30,650
kind of monitoring who uses singin adios

00:37:27,940 --> 00:37:34,550
quite a couple of them how do you manage

00:37:30,650 --> 00:37:36,980
to add new systems and remove them yeah

00:37:34,550 --> 00:37:39,620
I hear it yeah you have to modify the

00:37:36,980 --> 00:37:41,870
configuration file you are we do that

00:37:39,620 --> 00:37:43,940
automatic wire Hansel playbooks we do

00:37:41,870 --> 00:37:45,410
that automatic wire puppet DBE so yeah

00:37:43,940 --> 00:37:47,570
there are solutions for doing that

00:37:45,410 --> 00:37:49,370
automatic but how flexible is this and

00:37:47,570 --> 00:37:51,860
now you want to have something like a

00:37:49,370 --> 00:37:54,290
platform which looks like there's

00:37:51,860 --> 00:37:56,390
constant defibrillation taking place

00:37:54,290 --> 00:37:58,610
nothing is living permanently everything

00:37:56,390 --> 00:38:00,140
is moving around and this is something

00:37:58,610 --> 00:38:02,090
you want to monitor with a static

00:38:00,140 --> 00:38:04,370
monitoring solution no it's not the

00:38:02,090 --> 00:38:06,110
right use case for having something in

00:38:04,370 --> 00:38:09,160
place like the standard monitoring

00:38:06,110 --> 00:38:11,960
solution what do you think how to gather

00:38:09,160 --> 00:38:13,640
informations from the system maybe stop

00:38:11,960 --> 00:38:16,280
thinking about the single single

00:38:13,640 --> 00:38:18,680
binaries the single containers look more

00:38:16,280 --> 00:38:19,970
that the whole platform is running you

00:38:18,680 --> 00:38:22,700
are interested that there are at least

00:38:19,970 --> 00:38:24,680
four of these web server instances then

00:38:22,700 --> 00:38:27,350
monitor all that there are at least four

00:38:24,680 --> 00:38:30,290
and when there's 27 everything is fine

00:38:27,350 --> 00:38:32,810
your constraint was at least four maybe

00:38:30,290 --> 00:38:34,520
you can say no not more than 80 okay

00:38:32,810 --> 00:38:37,100
because then there's something wrong

00:38:34,520 --> 00:38:38,870
with tearing them down again but this is

00:38:37,100 --> 00:38:42,710
a different way of monitoring it goes

00:38:38,870 --> 00:38:44,690
more into the terms of metrics you

00:38:42,710 --> 00:38:46,640
definitely want to know about your your

00:38:44,690 --> 00:38:49,160
container engine state you want to know

00:38:46,640 --> 00:38:51,620
about your container internal state so

00:38:49,160 --> 00:38:54,230
dig for these informations what we

00:38:51,620 --> 00:38:56,390
usually see and we have great experience

00:38:54,230 --> 00:38:58,220
made with it is Prometheus with a graph

00:38:56,390 --> 00:39:00,500
on a dashboard I suppose you heard that

00:38:58,220 --> 00:39:02,090
today already three or four times but

00:39:00,500 --> 00:39:04,549
always in combination with containers

00:39:02,090 --> 00:39:06,170
usually come somehow Prometheus format

00:39:04,549 --> 00:39:08,689
collection with the alert manager and

00:39:06,170 --> 00:39:10,549
stuff like that and a funny thing we

00:39:08,689 --> 00:39:12,259
were digging into sensu we were digging

00:39:10,549 --> 00:39:14,420
into his singer we were digging into

00:39:12,259 --> 00:39:16,699
Prometheus we showed everything to our

00:39:14,420 --> 00:39:18,589
product owner and our product owner had

00:39:16,699 --> 00:39:20,119
to look on the interfaces and he said

00:39:18,589 --> 00:39:21,799
that's the one I like most

00:39:20,119 --> 00:39:23,179
it was the graph on a dashboard for

00:39:21,799 --> 00:39:25,339
Prometheus and now he's sitting there

00:39:23,179 --> 00:39:27,319
building dashboards for us that's a

00:39:25,339 --> 00:39:32,329
great job for product owner that's

00:39:27,319 --> 00:39:34,279
really cool look inside containers so

00:39:32,329 --> 00:39:35,989
for example we had some issues with it

00:39:34,279 --> 00:39:38,719
with the Google sea advisor mostly due

00:39:35,989 --> 00:39:41,239
to this doctor and doctor thingy but see

00:39:38,719 --> 00:39:44,029
advisor analyzes your running docker

00:39:41,239 --> 00:39:45,979
daemon on what other instances are

00:39:44,029 --> 00:39:47,689
running here what's the health state of

00:39:45,979 --> 00:39:49,219
the whole system plus what's the health

00:39:47,689 --> 00:39:53,299
state of each of the containers running

00:39:49,219 --> 00:39:55,670
on the system go for cystic go for yeah

00:39:53,299 --> 00:39:56,900
blue Morgan something that puppet

00:39:55,670 --> 00:39:58,640
developed saying this gives you an

00:39:56,900 --> 00:40:02,239
insight what's happening inside of your

00:39:58,640 --> 00:40:06,109
containers yeah in the past we had

00:40:02,239 --> 00:40:07,910
hardware and now so do you really put

00:40:06,109 --> 00:40:10,009
everything into AWS your whole

00:40:07,910 --> 00:40:12,859
development platform everything onto

00:40:10,009 --> 00:40:14,420
Google compute as maybe you still have

00:40:12,859 --> 00:40:17,929
your own servers so you want to have

00:40:14,420 --> 00:40:19,400
cost something locally so well I always

00:40:17,929 --> 00:40:20,660
find this funny that when there was on

00:40:19,400 --> 00:40:22,729
the DevOps tazed billion there was a

00:40:20,660 --> 00:40:24,199
talk from someone mentioning yeah and

00:40:22,729 --> 00:40:26,959
then we did all the great things you

00:40:24,199 --> 00:40:30,170
should do nowadays so the first thing is

00:40:26,959 --> 00:40:31,549
we went ops this so no ops need it for

00:40:30,170 --> 00:40:33,709
anything because we are already

00:40:31,549 --> 00:40:35,719
surveillance and then they learned that

00:40:33,709 --> 00:40:39,259
but we need an understanding about

00:40:35,719 --> 00:40:42,739
networking we need about firewalling we

00:40:39,259 --> 00:40:44,779
need about security Connor and that's

00:40:42,739 --> 00:40:46,759
not something which is a developer scope

00:40:44,779 --> 00:40:49,009
of work so that's the point where they

00:40:46,759 --> 00:40:50,959
recognize oh ouch this is only possible

00:40:49,009 --> 00:40:52,519
when you have ops otherwise you can't do

00:40:50,959 --> 00:40:55,809
officers but when you have ops you're

00:40:52,519 --> 00:40:58,130
not obsolesce hmm the same they learned

00:40:55,809 --> 00:41:00,109
the same I learned about their servers

00:40:58,130 --> 00:41:02,420
saying yeah we are going so Bueller's

00:41:00,109 --> 00:41:05,539
that means we no longer hacked have

00:41:02,420 --> 00:41:08,150
somehow active in our date in our wreck

00:41:05,539 --> 00:41:10,369
placed in the wreck so just put money in

00:41:08,150 --> 00:41:13,309
a wreck because we have everything put

00:41:10,369 --> 00:41:14,479
out into cloud you know maybe some

00:41:13,309 --> 00:41:16,699
systems you still want to have

00:41:14,479 --> 00:41:18,150
internally maybe your network connection

00:41:16,699 --> 00:41:20,039
to the outside is broken you fool

00:41:18,150 --> 00:41:22,230
rely on foreign people infrastructure

00:41:20,039 --> 00:41:23,609
and then they also learned okay it's not

00:41:22,230 --> 00:41:25,319
really possible doing surveillance

00:41:23,609 --> 00:41:26,789
without a server at least a monitoring

00:41:25,319 --> 00:41:28,319
server that monitors the connection to

00:41:26,789 --> 00:41:33,480
the surveillance infrastructure which is

00:41:28,319 --> 00:41:36,059
your first server what other companies

00:41:33,480 --> 00:41:38,670
learned when they grow huge and scale on

00:41:36,059 --> 00:41:41,130
public cloud usage there comes the point

00:41:38,670 --> 00:41:43,490
where Finance will ask you what the hell

00:41:41,130 --> 00:41:48,119
are you doing you're burning our money

00:41:43,490 --> 00:41:51,000
yeah why yeah we have 80,000 permanent

00:41:48,119 --> 00:41:54,299
extra large instances running in Amazon

00:41:51,000 --> 00:41:56,849
and that's the normal and it doubles

00:41:54,299 --> 00:41:58,410
during peak times and then Finance will

00:41:56,849 --> 00:42:00,000
come to you and tell you differences

00:41:58,410 --> 00:42:02,309
between capital expensive and

00:42:00,000 --> 00:42:04,380
operational expenses and they will give

00:42:02,309 --> 00:42:05,970
you some insights why capital expenses

00:42:04,380 --> 00:42:08,640
make more sense than operational

00:42:05,970 --> 00:42:09,960
expenses which means capital expenses is

00:42:08,640 --> 00:42:12,000
your servers in your data center

00:42:09,960 --> 00:42:14,400
operational expenses is your cloud

00:42:12,000 --> 00:42:16,200
tinnie so and they will tell you maybe

00:42:14,400 --> 00:42:18,270
it's better to use all Hardware because

00:42:16,200 --> 00:42:20,430
in the end effect is cheaper for the

00:42:18,270 --> 00:42:24,000
company to run on old hardware then on

00:42:20,430 --> 00:42:25,799
some kind of cloud provider so there's

00:42:24,000 --> 00:42:27,630
still things you might discuss not

00:42:25,799 --> 00:42:30,089
everything might move into cloud not

00:42:27,630 --> 00:42:34,380
everything might yeah go into the

00:42:30,089 --> 00:42:36,990
container um we have plenty of time

00:42:34,380 --> 00:42:39,990
laughter left afterwards definitely what

00:42:36,990 --> 00:42:42,180
you want to do is don't be afraid of

00:42:39,990 --> 00:42:44,369
containers don't shout at developers

00:42:42,180 --> 00:42:47,849
that just walk around claiming da da da

00:42:44,369 --> 00:42:49,770
da da da da da they let let them just

00:42:47,849 --> 00:42:51,960
continue they say yes yes you want to do

00:42:49,770 --> 00:42:54,539
something to have an easy environment

00:42:51,960 --> 00:42:57,450
where you can develop your code for your

00:42:54,539 --> 00:42:59,910
application but please stop thinking

00:42:57,450 --> 00:43:02,339
about putting this as is into the data

00:42:59,910 --> 00:43:04,319
center we need infrastructure inside the

00:43:02,339 --> 00:43:08,609
data center which allows you to run what

00:43:04,319 --> 00:43:12,270
you will ship to us containers will come

00:43:08,609 --> 00:43:15,329
sooner or later what was it now with one

00:43:12,270 --> 00:43:17,760
customer a financial institution room

00:43:15,329 --> 00:43:19,500
from the government they have the first

00:43:17,760 --> 00:43:21,510
request from another company which

00:43:19,500 --> 00:43:23,880
develops code for the finance

00:43:21,510 --> 00:43:27,059
institutions and they already have asked

00:43:23,880 --> 00:43:29,010
wouldn't it be easier for you if you II

00:43:27,059 --> 00:43:31,440
would just ship you docker containers

00:43:29,010 --> 00:43:34,890
and the ops people said yeah

00:43:31,440 --> 00:43:37,560
have heard about that yeah so we suppose

00:43:34,890 --> 00:43:40,170
five to eight years from now we are able

00:43:37,560 --> 00:43:41,970
to run docker containers so they will

00:43:40,170 --> 00:43:44,220
come sooner or later and some

00:43:41,970 --> 00:43:47,100
institutions are faster developing are

00:43:44,220 --> 00:43:48,840
faster moving than governmental

00:43:47,100 --> 00:43:51,060
organizations but even governmental

00:43:48,840 --> 00:43:52,740
organizations learn the understand learn

00:43:51,060 --> 00:43:54,600
and understand that there is something

00:43:52,740 --> 00:43:56,160
new which is a benefit for developer

00:43:54,600 --> 00:43:57,870
maybe you should shift from an

00:43:56,160 --> 00:44:01,280
operational perspective to something

00:43:57,870 --> 00:44:04,860
that supports developers they are coming

00:44:01,280 --> 00:44:07,320
don't choose to chains where you are

00:44:04,860 --> 00:44:10,080
completely unfamiliar with and you don't

00:44:07,320 --> 00:44:12,090
know how to fix them either you guys

00:44:10,080 --> 00:44:13,740
either you buy a support at one and in

00:44:12,090 --> 00:44:15,660
case that something is not working you

00:44:13,740 --> 00:44:17,330
just raised a telephone and to scream to

00:44:15,660 --> 00:44:22,260
the person at the other end of the line

00:44:17,330 --> 00:44:24,030
make it fixed by yesterday okay or gain

00:44:22,260 --> 00:44:26,790
internally knowledge about the things

00:44:24,030 --> 00:44:29,460
that are happening there don't build a

00:44:26,790 --> 00:44:31,950
silo spread the knowledge let everybody

00:44:29,460 --> 00:44:33,900
participate if it's a huge platform like

00:44:31,950 --> 00:44:36,300
a kubernetes where you have the ingress

00:44:33,900 --> 00:44:39,030
and egress and the proxy and the DNS and

00:44:36,300 --> 00:44:41,790
other stuff yeah let's not just one

00:44:39,030 --> 00:44:43,650
collect all the knowledge but try to yet

00:44:41,790 --> 00:44:45,900
try to give pieces to each of the rough

00:44:43,650 --> 00:44:51,120
of it everybody so that together they

00:44:45,900 --> 00:44:54,900
are able to manage such a platform 8020

00:44:51,120 --> 00:44:55,500
pattern stop doing it it's just a waste

00:44:54,900 --> 00:44:57,990
of time

00:44:55,500 --> 00:44:59,970
at least when it comes to containers and

00:44:57,990 --> 00:45:02,520
you want to manage containers maybe you

00:44:59,970 --> 00:45:05,670
won't automate the creation the initial

00:45:02,520 --> 00:45:07,650
creation of your Oracle database yeah

00:45:05,670 --> 00:45:10,290
okay this is something you restore from

00:45:07,650 --> 00:45:12,450
a backup okay there are certain things

00:45:10,290 --> 00:45:14,880
where you say okay maybe not just

00:45:12,450 --> 00:45:17,130
tearing down the whole data center in an

00:45:14,880 --> 00:45:19,470
automatic pattern you want to have some

00:45:17,130 --> 00:45:22,860
security implications not just tear down

00:45:19,470 --> 00:45:25,400
all virtual machines running but right

00:45:22,860 --> 00:45:28,680
for building the purpose for building so

00:45:25,400 --> 00:45:32,610
was it was it make sure we're TCR ud

00:45:28,680 --> 00:45:35,700
thingy who was familiar with CR UD only

00:45:32,610 --> 00:45:39,870
a couple okay it's the analogy the

00:45:35,700 --> 00:45:43,470
lifecycle let's create its run its

00:45:39,870 --> 00:45:44,880
update and destroy and what see are you

00:45:43,470 --> 00:45:46,980
this is the stuff that you want

00:45:44,880 --> 00:45:49,470
completely automate where you say this

00:45:46,980 --> 00:45:51,420
is the thing where I say this is hands

00:45:49,470 --> 00:45:53,520
off platform and customer asked me why

00:45:51,420 --> 00:45:55,710
hands off platform and tell that's

00:45:53,520 --> 00:45:58,470
absolutely easy if I see someone logging

00:45:55,710 --> 00:46:00,390
in his wire his console I will chop off

00:45:58,470 --> 00:46:03,510
his hands so this is a hands-off

00:46:00,390 --> 00:46:05,850
platform so hands of platform but you

00:46:03,510 --> 00:46:08,880
don't have to deal with initialization

00:46:05,850 --> 00:46:13,170
of the platform automate everything in

00:46:08,880 --> 00:46:16,020
terms of initialization I know it sounds

00:46:13,170 --> 00:46:18,810
a little bit more wobbly

00:46:16,020 --> 00:46:21,090
choose wisely check for the tools that

00:46:18,810 --> 00:46:23,730
are there look for what is it that I

00:46:21,090 --> 00:46:25,890
need to know we've learned for terraform

00:46:23,730 --> 00:46:28,710
maybe some knowledge and go basic

00:46:25,890 --> 00:46:31,670
knowledge and go is something you should

00:46:28,710 --> 00:46:34,770
gain when using been going for terraform

00:46:31,670 --> 00:46:36,600
when it comes to containers learn that

00:46:34,770 --> 00:46:38,910
most things in containers in the

00:46:36,600 --> 00:46:41,370
container world are written and go due

00:46:38,910 --> 00:46:44,070
to performance due to small favor memory

00:46:41,370 --> 00:46:46,680
footprint small CPU footprint so you

00:46:44,070 --> 00:46:50,250
might want to go for go anyway at least

00:46:46,680 --> 00:46:52,800
have some running for go otherwise I can

00:46:50,250 --> 00:46:54,870
just say ops hates containers I don't

00:46:52,800 --> 00:46:58,970
know why it's just a matter of how you

00:46:54,870 --> 00:46:58,970
see the container world thank you

00:46:59,690 --> 00:47:03,499
[Applause]

00:47:05,310 --> 00:47:20,190
so for some questions okay how did you a

00:47:16,840 --> 00:47:23,440
soft responsibility issue I mean

00:47:20,190 --> 00:47:26,560
initially you showed that death demanded

00:47:23,440 --> 00:47:28,270
what up should care of yeah up set a

00:47:26,560 --> 00:47:29,890
different perspective does that you give

00:47:28,270 --> 00:47:31,900
us a container we start running the

00:47:29,890 --> 00:47:34,930
container but what's inside is your job

00:47:31,900 --> 00:47:36,790
security patch management I don't know

00:47:34,930 --> 00:47:38,920
if what data services Pekka Rinne

00:47:36,790 --> 00:47:40,869
restore something like that okay the

00:47:38,920 --> 00:47:43,510
question was regarding responsibilities

00:47:40,869 --> 00:47:45,280
in the beginning I I talked about def

00:47:43,510 --> 00:47:47,350
demand to ops this is the stuff that you

00:47:45,280 --> 00:47:49,230
have to do a security demand to

00:47:47,350 --> 00:47:52,240
development this is what you have to do

00:47:49,230 --> 00:47:55,660
the agreement is a responsibility is

00:47:52,240 --> 00:47:58,240
shared . so that's the first thing so

00:47:55,660 --> 00:48:00,640
everybody is everybody is taking sure on

00:47:58,240 --> 00:48:02,350
a certain aspect on on the content on

00:48:00,640 --> 00:48:05,530
the container world so what they agreed

00:48:02,350 --> 00:48:07,630
upon is that ops will do the base

00:48:05,530 --> 00:48:09,160
container so this is something where

00:48:07,630 --> 00:48:11,710
they say yeah they want to provide a

00:48:09,160 --> 00:48:15,040
system upgrade so they prepare new

00:48:11,710 --> 00:48:16,720
containers absolutely fine maybe even

00:48:15,040 --> 00:48:19,840
preparing them for underneath kernel

00:48:16,720 --> 00:48:21,700
upgrades if required the next thing is

00:48:19,840 --> 00:48:23,920
and they take care on the let's say on

00:48:21,700 --> 00:48:25,600
this lower level security from security

00:48:23,920 --> 00:48:27,190
perspective and then there's the

00:48:25,600 --> 00:48:28,930
development part of the developers are

00:48:27,190 --> 00:48:30,010
responsible for the applications inside

00:48:28,930 --> 00:48:31,990
these containers and they are

00:48:30,010 --> 00:48:34,119
responsible for the whole security stack

00:48:31,990 --> 00:48:36,460
inside their application so that they do

00:48:34,119 --> 00:48:38,260
not break things which have been done on

00:48:36,460 --> 00:48:41,230
the base line so they are not allowed to

00:48:38,260 --> 00:48:44,440
to add to change existing security

00:48:41,230 --> 00:48:48,190
values for example some CTL settings

00:48:44,440 --> 00:48:50,350
some some some rules you have inside the

00:48:48,190 --> 00:48:52,000
container running but they are

00:48:50,350 --> 00:48:53,980
responsible for let's say for the

00:48:52,000 --> 00:48:58,080
remaining up to the application level up

00:48:53,980 --> 00:49:00,970
to the security level the developers are

00:48:58,080 --> 00:49:03,160
staging their applications because they

00:49:00,970 --> 00:49:04,750
are rolling out their applications so

00:49:03,160 --> 00:49:06,550
they must be able to stage their

00:49:04,750 --> 00:49:08,740
application saying this is a development

00:49:06,550 --> 00:49:11,740
state this is a testing state this is a

00:49:08,740 --> 00:49:13,240
production state because Ops is now more

00:49:11,740 --> 00:49:15,490
taking care on the infrastructure

00:49:13,240 --> 00:49:17,320
underneath so that they have everything

00:49:15,490 --> 00:49:19,140
running that they have the required

00:49:17,320 --> 00:49:22,840
storage systems network connectivity

00:49:19,140 --> 00:49:25,180
they take care of scaling issues they

00:49:22,840 --> 00:49:29,020
take care on Hardware outages stuff like

00:49:25,180 --> 00:49:30,640
that and they take care on the egress

00:49:29,020 --> 00:49:32,170
and ingress or on the or the external

00:49:30,640 --> 00:49:35,980
traffic and internal incoming traffic

00:49:32,170 --> 00:49:37,840
and the developers are responsible for

00:49:35,980 --> 00:49:39,730
staging and deploying their applications

00:49:37,840 --> 00:49:43,450
and even for running them in production

00:49:39,730 --> 00:49:44,980
and there's just one thing where we

00:49:43,450 --> 00:49:47,410
still have an open discussion it's

00:49:44,980 --> 00:49:50,770
regarding this an enabling debug level

00:49:47,410 --> 00:49:52,750
on an per per container basis for

00:49:50,770 --> 00:49:55,210
example at the moment we can only do

00:49:52,750 --> 00:49:57,070
that for for a whole application so when

00:49:55,210 --> 00:49:59,140
you have the same application run ten

00:49:57,070 --> 00:50:01,720
times then you can just activate the

00:49:59,140 --> 00:50:05,290
debug level on all of these containers

00:50:01,720 --> 00:50:07,090
not not on a per control container level

00:50:05,290 --> 00:50:08,590
and this is something where we now work

00:50:07,090 --> 00:50:11,140
together with the developers so that

00:50:08,590 --> 00:50:13,000
they say that development supports

00:50:11,140 --> 00:50:14,920
operating and getting the proper tooling

00:50:13,000 --> 00:50:21,630
for allowing them to run and manage the

00:50:14,920 --> 00:50:21,630
infrastructure did I miss something

00:50:21,760 --> 00:50:29,770
all developers for applications and ops

00:50:26,590 --> 00:50:32,530
for infrastructure it's the only way how

00:50:29,770 --> 00:50:36,340
things can work in that way because the

00:50:32,530 --> 00:50:37,869
ops people have no under they don't like

00:50:36,340 --> 00:50:40,450
to know what's happening inside the

00:50:37,869 --> 00:50:45,070
container the only thing they claim is

00:50:40,450 --> 00:50:47,560
we have 350 gigabytes of lock streams in

00:50:45,070 --> 00:50:49,500
the past eight hours that might not be a

00:50:47,560 --> 00:50:56,320
good way please look at your container

00:50:49,500 --> 00:51:02,710
it's flowing funny exceptions some more

00:50:56,320 --> 00:51:04,770
questions still have plenty of time all

00:51:02,710 --> 00:51:04,770
right

00:51:07,819 --> 00:51:12,660
no scumming Tomas was asking question as

00:51:10,440 --> 00:51:14,609
Tomas is giving a talk about bringing

00:51:12,660 --> 00:51:15,810
kubernetes into production okay go ahead

00:51:14,609 --> 00:51:19,020
thank you for pointing out the

00:51:15,810 --> 00:51:21,589
complexity so - you cannot underestimate

00:51:19,020 --> 00:51:25,500
the complexity of this solution so and

00:51:21,589 --> 00:51:28,829
it's more remarked in our experience you

00:51:25,500 --> 00:51:32,609
you mentioned kubernetes security you

00:51:28,829 --> 00:51:33,750
need five days to teach experienced

00:51:32,609 --> 00:51:36,349
security people

00:51:33,750 --> 00:51:40,290
what's going on with kubernetes and

00:51:36,349 --> 00:51:43,230
container security so it's not oh it's

00:51:40,290 --> 00:51:45,720
like whatever we have to enable a Parma

00:51:43,230 --> 00:51:48,450
or a Linux in something like this it's a

00:51:45,720 --> 00:51:50,369
more integrated view on that and this is

00:51:48,450 --> 00:51:52,170
a complexity of the entire single

00:51:50,369 --> 00:51:54,990
kubernetes cluster has a complexity of

00:51:52,170 --> 00:51:57,599
an entire data center and if you have a

00:51:54,990 --> 00:52:00,089
network then you have border gateway

00:51:57,599 --> 00:52:01,560
protocol involved probably not a simple

00:52:00,089 --> 00:52:04,530
Flener network which comes out of the

00:52:01,560 --> 00:52:07,470
box so thank you for pointing out it's

00:52:04,530 --> 00:52:11,760
complex and it's even more complex and

00:52:07,470 --> 00:52:14,460
you can now you should know that Thomas

00:52:11,760 --> 00:52:16,230
teaches kubernetes to other people and

00:52:14,460 --> 00:52:17,910
when Thomas says he needs five days of

00:52:16,230 --> 00:52:19,710
explaining the staff be sure when you do

00:52:17,910 --> 00:52:24,240
it without Thomas unit five weeks of

00:52:19,710 --> 00:52:30,930
explore understanding their stuff all

00:52:24,240 --> 00:52:32,550
right another question okay so thank you

00:52:30,930 --> 00:52:35,599
March 10 minutes to early with a break I

00:52:32,550 --> 00:52:35,599
hope I hope you don't mind

00:52:38,490 --> 00:52:59,880
[Applause]

00:52:40,550 --> 00:52:59,880

YouTube URL: https://www.youtube.com/watch?v=1V4qdYULDjc


