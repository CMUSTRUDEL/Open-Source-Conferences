Title: OSDC 2018: Puppet and the Road to Pervasive Automation by Walter Gildersleeve
Publication date: 2018-06-22
Playlist: OSDC 2018 | Open Source Data Center Conference
Description: 
	How automated is your enterprise? The benefits of increased automation are many, it promising faster release cycles, stable IT environments and reduced failures caused by human error. And while most enterprises are embracing the concept of DevOps and automation, most are only partially realizing the benefits of automation.
Puppet, long a DevOps thought leader, provides a path to pervasive automation in the enterprise. Through Puppet, you can explore your entire IT estate, automate all aspects of your infrastructure lifecycle, and realize the potential of true DevOps workflows. Learn the why of automation, what it means to be automated and how to move forward towards the goal of pervasive automation.

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de
Blog: http://blog.netways.de
Webinare: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Google+: https://plus.google.com/+netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh

https://www.frametraxx.de/
Captions: 
	00:00:00,540 --> 00:00:19,240
[Music]

00:00:14,700 --> 00:00:21,700
I'm a tech professional since 99 I

00:00:19,240 --> 00:00:23,770
actually started off in core engineering

00:00:21,700 --> 00:00:25,029
it's about the same amount of time or

00:00:23,770 --> 00:00:26,739
actually it's exactly the same all the

00:00:25,029 --> 00:00:29,980
time that I've lived in Germany I've

00:00:26,739 --> 00:00:32,739
lived in Germany since 99 when I came

00:00:29,980 --> 00:00:34,690
here and realized that having a master's

00:00:32,739 --> 00:00:37,420
in history wasn't gonna pay me much

00:00:34,690 --> 00:00:38,829
money in Germany so I went back to my

00:00:37,420 --> 00:00:40,510
first love which is computers I'd

00:00:38,829 --> 00:00:42,910
studied computers in the 80s and I've

00:00:40,510 --> 00:00:47,050
been doing that ever since started off

00:00:42,910 --> 00:00:49,079
in core engineering working for a couple

00:00:47,050 --> 00:00:51,609
small German companies in C++ and Java

00:00:49,079 --> 00:00:53,320
went to the US moved into professional

00:00:51,609 --> 00:00:56,909
services and for the last six months

00:00:53,320 --> 00:01:00,729
I've been with puppet software as a

00:00:56,909 --> 00:01:05,320
senior sales engineer working in dock so

00:01:00,729 --> 00:01:07,270
I'm responsible for Germany Austria and

00:01:05,320 --> 00:01:08,710
Switzerland and you see my contact

00:01:07,270 --> 00:01:12,930
details if anybody wants to reach out to

00:01:08,710 --> 00:01:15,939
me please do so a bit about puppet

00:01:12,930 --> 00:01:17,040
puppet has been around since longer than

00:01:15,939 --> 00:01:20,890
devops

00:01:17,040 --> 00:01:23,469
it was founded in 2005 by Luc Inez who

00:01:20,890 --> 00:01:26,469
was assisted men who basically wanted to

00:01:23,469 --> 00:01:27,700
do stuff needed the tools for it and

00:01:26,469 --> 00:01:31,200
they didn't exist so I said oh I'll just

00:01:27,700 --> 00:01:34,630
write him so so in doing so he he wrote

00:01:31,200 --> 00:01:37,000
the core puppet product and in doing so

00:01:34,630 --> 00:01:41,399
he created the concept of infrastructure

00:01:37,000 --> 00:01:44,859
as code we've had a enterprise offering

00:01:41,399 --> 00:01:46,840
for the last five or six years which is

00:01:44,859 --> 00:01:49,780
basically just on top of the open-source

00:01:46,840 --> 00:01:53,439
offering that so many people use as you

00:01:49,780 --> 00:01:56,049
see 40,000 different organizations use

00:01:53,439 --> 00:01:57,369
puppet worldwide that's at a minimum

00:01:56,049 --> 00:01:58,840
because we really don't know who

00:01:57,369 --> 00:02:01,600
downloads the open-source and who uses

00:01:58,840 --> 00:02:03,659
it we have over a thousand well over a

00:02:01,600 --> 00:02:09,820
thousand enterprise customers including

00:02:03,659 --> 00:02:11,980
75 of the Fortune 100 companies and we

00:02:09,820 --> 00:02:13,780
have a very active open-source community

00:02:11,980 --> 00:02:17,080
one of the most active open-source

00:02:13,780 --> 00:02:18,280
communities out there well over 5,000

00:02:17,080 --> 00:02:20,230
modules have been written by the

00:02:18,280 --> 00:02:23,110
community they're freely available on

00:02:20,230 --> 00:02:29,380
puppet forge to download 7.5 million

00:02:23,110 --> 00:02:30,910
of code so I have to admit I'm just

00:02:29,380 --> 00:02:34,090
gonna I'm just gonna take a digression

00:02:30,910 --> 00:02:35,890
here that I've been you know I applied

00:02:34,090 --> 00:02:37,540
for this speaking position a few months

00:02:35,890 --> 00:02:41,410
ago and I just have to admit I've been a

00:02:37,540 --> 00:02:46,600
little bit scared shitless coming up to

00:02:41,410 --> 00:02:48,190
it because dirty little secret puppet

00:02:46,600 --> 00:02:54,160
doesn't actually pay me for open source

00:02:48,190 --> 00:02:56,410
so it's possible in the in this talk

00:02:54,160 --> 00:02:58,870
that I might be talking about things now

00:02:56,410 --> 00:03:01,989
and then that aren't necessarily open

00:02:58,870 --> 00:03:04,980
source anyway so please don't throw

00:03:01,989 --> 00:03:08,410
fruit that's all I'm asking

00:03:04,980 --> 00:03:10,209
so what does puppet do in a nutshell

00:03:08,410 --> 00:03:11,650
puppet automates the second I could read

00:03:10,209 --> 00:03:13,660
this how you build into play

00:03:11,650 --> 00:03:15,190
applications and provision configure and

00:03:13,660 --> 00:03:17,800
manage the infrastructure they run on

00:03:15,190 --> 00:03:20,950
just just as a note this is the

00:03:17,800 --> 00:03:22,660
marketing portion of my my talk I will

00:03:20,950 --> 00:03:25,030
get on to what I I'm a techie so I'm

00:03:22,660 --> 00:03:28,989
gonna get on some demos specifically I'm

00:03:25,030 --> 00:03:30,850
going to demo some newer features in

00:03:28,989 --> 00:03:34,660
puppet enterprise and puppet open-source

00:03:30,850 --> 00:03:37,600
namely ad-hoc tasks and also I'd like to

00:03:34,660 --> 00:03:41,200
demo one of our newest features which is

00:03:37,600 --> 00:03:42,760
a CI CD tool anyway that's it so in

00:03:41,200 --> 00:03:44,680
other words but but now we now we got to

00:03:42,760 --> 00:03:46,600
get through the the marketing part of

00:03:44,680 --> 00:03:48,130
the talk so please bear with me about 10

00:03:46,600 --> 00:03:50,799
minutes and then we'll be done through

00:03:48,130 --> 00:03:54,459
it so in other words it helps you build

00:03:50,799 --> 00:03:57,190
software better and faster and why so

00:03:54,459 --> 00:03:58,600
why is that important because their

00:03:57,190 --> 00:04:00,700
customers tell it's and tell us it's

00:03:58,600 --> 00:04:02,590
important another thing that puppet does

00:04:00,700 --> 00:04:05,920
is it has done so for the last six years

00:04:02,590 --> 00:04:07,450
is with the cooperation of other

00:04:05,920 --> 00:04:11,489
organizations published the DevOps

00:04:07,450 --> 00:04:14,760
report this is we go out and ask

00:04:11,489 --> 00:04:18,729
internet or technical professionals

00:04:14,760 --> 00:04:22,800
27,000 different people have responded

00:04:18,729 --> 00:04:27,030
to the 2017 report and they tell us that

00:04:22,800 --> 00:04:29,470
they are following the born in the cloud

00:04:27,030 --> 00:04:32,349
companies right so the Google is a

00:04:29,470 --> 00:04:36,310
Spotify the Netflix these companies have

00:04:32,349 --> 00:04:36,910
develops in their genes they can deploy

00:04:36,310 --> 00:04:41,170
code

00:04:36,910 --> 00:04:44,320
hundreds of times a day right so why

00:04:41,170 --> 00:04:46,150
should we care about that I mean

00:04:44,320 --> 00:04:48,000
ultimately the customers the reason we

00:04:46,150 --> 00:04:50,770
need to care is because the customers of

00:04:48,000 --> 00:04:53,650
Google and Spotify and Netflix are our

00:04:50,770 --> 00:04:55,750
customers as well right so when they

00:04:53,650 --> 00:04:56,320
expect fast turnaround on a bug from

00:04:55,750 --> 00:04:58,480
Google

00:04:56,320 --> 00:05:00,460
they don't understand why the software

00:04:58,480 --> 00:05:06,550
we're producing doesn't have exactly

00:05:00,460 --> 00:05:08,650
that fast turnaround so whether we like

00:05:06,550 --> 00:05:12,460
it or not we have to compete in the

00:05:08,650 --> 00:05:15,510
market that's been created by these

00:05:12,460 --> 00:05:18,670
large corporate corporations in doing so

00:05:15,510 --> 00:05:23,020
puppet has identified three basic issues

00:05:18,670 --> 00:05:25,690
or hurdles in automating these processes

00:05:23,020 --> 00:05:29,250
and moving towards the real reality or

00:05:25,690 --> 00:05:34,180
the realization of DevOps the first is

00:05:29,250 --> 00:05:35,950
sorry and this this is the journey to to

00:05:34,180 --> 00:05:40,210
pervasive automation because we can't

00:05:35,950 --> 00:05:41,290
just immediately do with these googles

00:05:40,210 --> 00:05:45,010
and what these Spotify is you're doing

00:05:41,290 --> 00:05:48,580
right I mean we have to create a create

00:05:45,010 --> 00:05:50,440
the DevOps reality day for day over time

00:05:48,580 --> 00:05:52,950
and the first hurdle that we find is

00:05:50,440 --> 00:05:58,810
that we don't really know what we have

00:05:52,950 --> 00:06:01,630
right maybe if you're a boutique shop

00:05:58,810 --> 00:06:02,860
maybe if you just have a few AI X's

00:06:01,630 --> 00:06:04,780
under your desks you know the

00:06:02,860 --> 00:06:07,830
infrastructure in your company but the

00:06:04,780 --> 00:06:10,390
reality is most companies have a hybrid

00:06:07,830 --> 00:06:13,210
infrastructure they have on premises

00:06:10,390 --> 00:06:15,100
solutions they have Amazon solutions and

00:06:13,210 --> 00:06:19,990
all that so what we've developed is

00:06:15,100 --> 00:06:21,370
puppet discovery this is one of the

00:06:19,990 --> 00:06:23,590
newest it's a very new product from

00:06:21,370 --> 00:06:24,820
puppet and it allows you to look into

00:06:23,590 --> 00:06:26,740
your infrastructures hybrid

00:06:24,820 --> 00:06:31,360
infrastructures and see not just what

00:06:26,740 --> 00:06:33,520
you have but what it's running and not

00:06:31,360 --> 00:06:35,919
just what is running on it but you can

00:06:33,520 --> 00:06:38,350
actually perform actions on it from this

00:06:35,919 --> 00:06:41,320
one dashboard okay puppet discovery

00:06:38,350 --> 00:06:44,320
that's the the first leg of the triangle

00:06:41,320 --> 00:06:46,590
knowing what you have the second is

00:06:44,320 --> 00:06:49,990
scaling across your infrastructure

00:06:46,590 --> 00:06:50,830
broadly and deeply so not just across

00:06:49,990 --> 00:06:53,620
the entire

00:06:50,830 --> 00:06:55,539
infrastructure but across all the

00:06:53,620 --> 00:07:01,990
different systems you have in all the

00:06:55,539 --> 00:07:07,120
different centers that you have that is

00:07:01,990 --> 00:07:09,310
why Luke Inez created puppet it's it

00:07:07,120 --> 00:07:11,560
works vendor-neutral

00:07:09,310 --> 00:07:14,909
doesn't care if it's an AIX box doesn't

00:07:11,560 --> 00:07:20,199
care if it's a CentOS or souza you just

00:07:14,909 --> 00:07:25,060
define your state and you let it run do

00:07:20,199 --> 00:07:27,069
its thing it is primarily model driven

00:07:25,060 --> 00:07:30,909
this has been the the paradigm that it

00:07:27,069 --> 00:07:32,349
was based on and it's the primary source

00:07:30,909 --> 00:07:34,900
of benefit from puppet enterprise

00:07:32,349 --> 00:07:37,180
meaning you define your desired state on

00:07:34,900 --> 00:07:38,650
your host puppet sees it it gets to that

00:07:37,180 --> 00:07:41,440
state and it maintains that state and

00:07:38,650 --> 00:07:43,349
it's also ad hoc so if you need you know

00:07:41,440 --> 00:07:48,819
one offer or something like that then

00:07:43,349 --> 00:07:51,849
you it's more than possible to run that

00:07:48,819 --> 00:07:55,569
from puppet enterprise or from the open

00:07:51,849 --> 00:07:57,340
source command-line interface so so now

00:07:55,569 --> 00:07:59,440
we've created our infrastructure we have

00:07:57,340 --> 00:08:01,180
that right but as far as I know people

00:07:59,440 --> 00:08:04,180
aren't creating and maintaining

00:08:01,180 --> 00:08:06,069
infrastructures because it's fun because

00:08:04,180 --> 00:08:07,840
they have real benefit from just running

00:08:06,069 --> 00:08:09,340
infrastructures you have to put

00:08:07,840 --> 00:08:11,680
something on it right whether it's for

00:08:09,340 --> 00:08:15,759
internal consumption or for external

00:08:11,680 --> 00:08:20,190
customers and for that excuse me and for

00:08:15,759 --> 00:08:22,900
that we look at depth DevOps to help us

00:08:20,190 --> 00:08:24,819
marry the development teams and the

00:08:22,900 --> 00:08:28,389
operations teams and we still see

00:08:24,819 --> 00:08:30,039
problems in that relationship there's

00:08:28,389 --> 00:08:33,449
some automation you know maybe you have

00:08:30,039 --> 00:08:35,680
a WebSphere that's being installed

00:08:33,449 --> 00:08:38,079
automatically but the software behind it

00:08:35,680 --> 00:08:39,940
perhaps is still a manual process right

00:08:38,079 --> 00:08:41,560
so you do see these silos of automation

00:08:39,940 --> 00:08:45,220
but you don't see it across the breadth

00:08:41,560 --> 00:08:49,089
and depth of your organization's so what

00:08:45,220 --> 00:08:51,010
we've created is puppet pipelines and

00:08:49,089 --> 00:08:55,899
actually when I say created what I mean

00:08:51,010 --> 00:08:59,620
is this was created by Raul Singh who

00:08:55,899 --> 00:09:03,070
was AWS as number 4 employee who saw

00:08:59,620 --> 00:09:04,160
that there were gaps in the CI CD

00:09:03,070 --> 00:09:07,580
pipeline

00:09:04,160 --> 00:09:09,830
so AWS they did that great they married

00:09:07,580 --> 00:09:12,250
the software development with the

00:09:09,830 --> 00:09:14,090
operations and he wanted to bring that

00:09:12,250 --> 00:09:16,970
to other companies

00:09:14,090 --> 00:09:20,780
he created a company named esteli and

00:09:16,970 --> 00:09:23,600
created the pipeline's tool which we

00:09:20,780 --> 00:09:26,690
brought into the fold about eight months

00:09:23,600 --> 00:09:30,650
ago now rolls now the VP of engineering

00:09:26,690 --> 00:09:33,910
at puppet ok so that's the three

00:09:30,650 --> 00:09:36,560
products that pipe it offers right now

00:09:33,910 --> 00:09:39,250
we have on the one hand discovering the

00:09:36,560 --> 00:09:41,900
infrastructures seeing what is out there

00:09:39,250 --> 00:09:45,610
on the other hand we have the ability to

00:09:41,900 --> 00:09:48,440
scale across these infrastructures and

00:09:45,610 --> 00:09:50,210
finally we have the CI CD tool true

00:09:48,440 --> 00:09:53,180
continuous integration and continuous

00:09:50,210 --> 00:09:55,520
delivery tool for bringing the software

00:09:53,180 --> 00:10:01,070
that your company needs to produce to

00:09:55,520 --> 00:10:03,050
the operations ok so what I wanted to do

00:10:01,070 --> 00:10:04,670
now was this is a little bit of a

00:10:03,050 --> 00:10:07,220
digression because this isn't the core

00:10:04,670 --> 00:10:09,410
products but I wanted to talk about

00:10:07,220 --> 00:10:12,710
puppet tasks because this is something

00:10:09,410 --> 00:10:17,260
that isn't so known yet among puppet

00:10:12,710 --> 00:10:20,840
practitioners as I've said it is a

00:10:17,260 --> 00:10:23,030
primarily model-based system and this is

00:10:20,840 --> 00:10:25,160
an ad-hoc possibility to run different

00:10:23,030 --> 00:10:26,630
tests I should let me just ask if

00:10:25,160 --> 00:10:28,400
there's any questions at this point from

00:10:26,630 --> 00:10:32,230
from anything I've said and take a

00:10:28,400 --> 00:10:32,230
little sip from like refreshing beverage

00:10:37,220 --> 00:10:49,620
so model-based you define your state you

00:10:46,860 --> 00:10:52,170
don't have to tell your system how to

00:10:49,620 --> 00:10:55,740
get to the state you define it it gets

00:10:52,170 --> 00:10:58,589
there it maintains that state you're

00:10:55,740 --> 00:11:02,310
doing with your house right I want my

00:10:58,589 --> 00:11:03,870
house clean you don't say well if it's

00:11:02,310 --> 00:11:05,130
dusty then get out the duster and dusty

00:11:03,870 --> 00:11:06,779
you don't say get out the vacuum cleaner

00:11:05,130 --> 00:11:09,269
you just say you know just clean it and

00:11:06,779 --> 00:11:11,190
it's clean right so that's defining the

00:11:09,269 --> 00:11:13,649
state that you wanted at puppet ensures

00:11:11,190 --> 00:11:16,320
that it gets to that state it's a very

00:11:13,649 --> 00:11:20,190
powerful concept here for instance you

00:11:16,320 --> 00:11:22,470
see the code that is required for puppet

00:11:20,190 --> 00:11:25,260
to install and maintain the screen

00:11:22,470 --> 00:11:26,670
application of course the way you

00:11:25,260 --> 00:11:29,899
install it is going to be different on

00:11:26,670 --> 00:11:32,519
Debian or CentOS or what-have-you but

00:11:29,899 --> 00:11:36,510
with puppy you define it once you say

00:11:32,519 --> 00:11:40,940
just make sure it's installed and it

00:11:36,510 --> 00:11:40,940
knows how to do it on every other system

00:11:41,930 --> 00:11:47,070
it's not great for everything defining

00:11:45,449 --> 00:11:49,910
and maintaining state doesn't work for

00:11:47,070 --> 00:11:49,910
instance for quick troubleshooting

00:11:51,110 --> 00:11:55,829
one-off changes upgrades to a system or

00:11:54,360 --> 00:11:59,370
something like that if you're not

00:11:55,829 --> 00:12:02,220
maintaining the system then it's not

00:11:59,370 --> 00:12:08,420
gonna work to model a state complex

00:12:02,220 --> 00:12:08,420
deployment workflows so for that reason

00:12:08,660 --> 00:12:12,329
we created puppet tests puppet test has

00:12:11,190 --> 00:12:16,199
actually been around for a little while

00:12:12,329 --> 00:12:19,709
now I believe it was introduced late

00:12:16,199 --> 00:12:25,319
last year so puppet enterprise 2000 17.3

00:12:19,709 --> 00:12:27,779
had it in puppet open-source 5.3 I'm not

00:12:25,319 --> 00:12:30,899
sure which so it has been around for a

00:12:27,779 --> 00:12:33,810
while now and there are two flavors you

00:12:30,899 --> 00:12:35,130
have puppet Bolt and this is the pure

00:12:33,810 --> 00:12:36,660
open-source this has nothing to do with

00:12:35,130 --> 00:12:38,930
puppet you don't have to have anything

00:12:36,660 --> 00:12:41,220
else running it's free to download today

00:12:38,930 --> 00:12:44,220
and then you have puppet enterprise task

00:12:41,220 --> 00:12:47,160
manager and this works with not with SSH

00:12:44,220 --> 00:12:50,160
or win RM as does puppet Bolt but this

00:12:47,160 --> 00:12:51,839
works with the puppet

00:12:50,160 --> 00:12:54,209
control protocol so it's actually not

00:12:51,839 --> 00:13:00,420
running over SSH to make changes at

00:12:54,209 --> 00:13:04,199
heart changes what is a task what tasks

00:13:00,420 --> 00:13:07,410
is run this is a very simple task simply

00:13:04,199 --> 00:13:09,569
a bash script right so puppet takes this

00:13:07,410 --> 00:13:16,500
script packages it up sends it to the

00:13:09,569 --> 00:13:17,759
server agentless and runs it what this

00:13:16,500 --> 00:13:21,360
means is you're not throwing anything

00:13:17,759 --> 00:13:23,009
away if you have scripts that need to be

00:13:21,360 --> 00:13:25,050
run if you have already developed a

00:13:23,009 --> 00:13:27,750
bunch of scripts you can wrap them in a

00:13:25,050 --> 00:13:29,610
puppet module and immediately use them

00:13:27,750 --> 00:13:32,880
across your operating systems they can

00:13:29,610 --> 00:13:36,750
be in PowerShell for windows or bash or

00:13:32,880 --> 00:13:40,019
Python or even ansible only caveat is

00:13:36,750 --> 00:13:42,089
the engine needs to be on the machine

00:13:40,019 --> 00:13:42,839
for the script that you're running so if

00:13:42,089 --> 00:13:44,940
you're running Python

00:13:42,839 --> 00:13:49,889
well Python has to be installed on the

00:13:44,940 --> 00:13:52,769
target machine it's very scalable so

00:13:49,889 --> 00:13:56,670
puppet bolt works good for up to 500

00:13:52,769 --> 00:13:58,860
servers or so with puppet enterprise

00:13:56,670 --> 00:14:01,160
task manager it scales just like puppet

00:13:58,860 --> 00:14:03,029
enterprise does you can run a task

00:14:01,160 --> 00:14:08,009
against a hundred thousand notes

00:14:03,029 --> 00:14:10,079
simultaneously if you wish and also it's

00:14:08,009 --> 00:14:12,089
been brought into the puppet language so

00:14:10,079 --> 00:14:14,939
you can chain tasks together you can

00:14:12,089 --> 00:14:17,339
have them interoperate with other parts

00:14:14,939 --> 00:14:23,009
of the language put logic into them and

00:14:17,339 --> 00:14:29,610
all the rest any questions up to that

00:14:23,009 --> 00:14:32,699
point okay and I just wanted to show

00:14:29,610 --> 00:14:36,750
what that looks like in real life what

00:14:32,699 --> 00:14:42,750
it means to run a task both in puppet

00:14:36,750 --> 00:14:45,779
enterprise and from puppet Boldt this is

00:14:42,750 --> 00:14:49,199
the puppet enterprise puppet console let

00:14:45,779 --> 00:14:51,149
me just log into it and what you see is

00:14:49,199 --> 00:14:53,399
the the standard dashboard for puppet

00:14:51,149 --> 00:14:55,500
enterprise showing the infrastructure

00:14:53,399 --> 00:14:56,699
that I am currently managing you see

00:14:55,500 --> 00:14:57,769
it's a very small infrastructure this is

00:14:56,699 --> 00:15:02,850
all local

00:14:57,769 --> 00:15:03,430
just four nodes and what you're seeing

00:15:02,850 --> 00:15:07,600
here

00:15:03,430 --> 00:15:11,560
are the results of the state-based the

00:15:07,600 --> 00:15:13,720
state modeled maintenance so any changes

00:15:11,560 --> 00:15:16,540
to that state that needs a debris bot

00:15:13,720 --> 00:15:18,460
into focus anything that changed and

00:15:16,540 --> 00:15:22,510
needs to be changed back you would see

00:15:18,460 --> 00:15:23,589
here various nodes that are running in

00:15:22,510 --> 00:15:27,000
the system and just have four little

00:15:23,589 --> 00:15:29,230
nodes running and down here you see for

00:15:27,000 --> 00:15:32,680
anybody who is currently using puppet

00:15:29,230 --> 00:15:35,380
enterprise these two tasks here are new

00:15:32,680 --> 00:15:36,160
and these are the puppet enterprise task

00:15:35,380 --> 00:15:43,000
management

00:15:36,160 --> 00:15:46,870
additions so running a task then becomes

00:15:43,000 --> 00:15:48,850
quite simple from a central point you

00:15:46,870 --> 00:15:51,970
have the task that you want to run here

00:15:48,850 --> 00:15:54,850
you see a few that I've installed on my

00:15:51,970 --> 00:15:56,830
system in puppet Forge there are now I

00:15:54,850 --> 00:15:59,709
think a hundred seventy modules that

00:15:56,830 --> 00:16:02,920
have puppet tasks that can be installed

00:15:59,709 --> 00:16:04,480
on your system so what I'm going to do

00:16:02,920 --> 00:16:06,310
is I'm going to run this task this is my

00:16:04,480 --> 00:16:07,990
installed especially this is an exact

00:16:06,310 --> 00:16:12,220
task it's just as powerful and as

00:16:07,990 --> 00:16:15,660
dangerous as it sounds and I'm going to

00:16:12,220 --> 00:16:21,060
do something I mean you know probably

00:16:15,660 --> 00:16:30,370
nothing like that but something more

00:16:21,060 --> 00:16:35,200
harmless like that I can then determine

00:16:30,370 --> 00:16:41,800
where it's going to run and in this case

00:16:35,200 --> 00:16:43,600
I'll just run it across everything right

00:16:41,800 --> 00:16:46,089
so i've determined which nodes i want

00:16:43,600 --> 00:16:50,170
this to run on i've determined the

00:16:46,089 --> 00:16:55,170
command that i want to run and i just

00:16:50,170 --> 00:16:58,720
run it so from a central dashboard

00:16:55,170 --> 00:17:01,600
whorfin command line or from the api you

00:16:58,720 --> 00:17:05,679
can run arbitrary tasks across an entire

00:17:01,600 --> 00:17:08,760
infrastructure here I have four nodes I

00:17:05,679 --> 00:17:12,280
could have run that off against 40,000

00:17:08,760 --> 00:17:15,429
may be a little more specific use case

00:17:12,280 --> 00:17:17,980
let's say we just learned that there's

00:17:15,429 --> 00:17:19,750
this thing called heartbleed

00:17:17,980 --> 00:17:24,880
and we need to do something about it and

00:17:19,750 --> 00:17:28,030
so I can go in here and say heartbleed

00:17:24,880 --> 00:17:30,250
is a is a weakness in open SSL where do

00:17:28,030 --> 00:17:34,630
I have that weakness and I see for

00:17:30,250 --> 00:17:38,740
instance here on one node I'm using a

00:17:34,630 --> 00:17:42,070
version of open SSL that is problematic

00:17:38,740 --> 00:17:46,929
that does Express that vulnerability go

00:17:42,070 --> 00:17:48,429
here all I want to do is run a package

00:17:46,929 --> 00:17:51,640
command it was pretty it was selected

00:17:48,429 --> 00:18:03,460
for me because because I'm going through

00:17:51,640 --> 00:18:05,710
the package selection yeah so it was

00:18:03,460 --> 00:18:07,540
there a log of who was screwing with the

00:18:05,710 --> 00:18:09,070
system so that's a thank you because

00:18:07,540 --> 00:18:13,179
that's that's another great benefit of

00:18:09,070 --> 00:18:15,160
puppet enterprise is the responsibility

00:18:13,179 --> 00:18:17,620
chain of responsibility yes there are

00:18:15,160 --> 00:18:21,880
logs and it shows exactly who did what

00:18:17,620 --> 00:18:24,250
when it also shows for instance if a

00:18:21,880 --> 00:18:25,900
system was changed by somebody through

00:18:24,250 --> 00:18:27,760
the command line not necessarily who did

00:18:25,900 --> 00:18:32,200
it but that it had to be changed back so

00:18:27,760 --> 00:18:36,160
yeah there is sort of logging okay so

00:18:32,200 --> 00:18:38,620
I'm going to upgrade this package it's

00:18:36,160 --> 00:18:41,440
open SSL already flek today was the path

00:18:38,620 --> 00:18:42,850
that I went through to get here and the

00:18:41,440 --> 00:18:44,830
node that I want to do it on was also

00:18:42,850 --> 00:18:47,440
selected because because I selected

00:18:44,830 --> 00:18:53,799
specifically that version of the package

00:18:47,440 --> 00:18:56,799
to run you let it go again this is very

00:18:53,799 --> 00:18:58,900
good it's scaling because it's not the

00:18:56,799 --> 00:19:00,940
master that's doing this upgrading it's

00:18:58,900 --> 00:19:03,460
the nodes so it can just send off this

00:19:00,940 --> 00:19:05,799
command say all hundred thousand nodes

00:19:03,460 --> 00:19:08,679
please upgrade open SSL and it does it

00:19:05,799 --> 00:19:13,870
and then you see the old version it went

00:19:08,679 --> 00:19:17,770
from 101 1 101 e to 102 K which is no

00:19:13,870 --> 00:19:20,559
longer vulnerable to open SSL and here

00:19:17,770 --> 00:19:23,320
we can see the different reports and you

00:19:20,559 --> 00:19:25,270
can see everything that happened I have

00:19:23,320 --> 00:19:27,610
here an error I could see what was going

00:19:25,270 --> 00:19:30,279
on there and in this system I don't have

00:19:27,610 --> 00:19:32,409
any changes you would see a little blue

00:19:30,279 --> 00:19:34,989
circle or a yellow circle depending on

00:19:32,409 --> 00:19:39,460
whether it was an expected change or an

00:19:34,989 --> 00:19:45,190
unexpected change okay so that's puppet

00:19:39,460 --> 00:19:47,049
enterprise task manager because we're an

00:19:45,190 --> 00:19:49,869
open source conference I thought it

00:19:47,049 --> 00:19:53,429
would be not a bad thing to show some

00:19:49,869 --> 00:19:56,440
open source as well so let's go into

00:19:53,429 --> 00:19:58,919
puppet bolt a little bit what you see

00:19:56,440 --> 00:20:02,889
here is is a very simple naive

00:19:58,919 --> 00:20:05,399
application you can also notice as i

00:20:02,889 --> 00:20:07,929
refresh the page down in the lower left

00:20:05,399 --> 00:20:09,999
that we're getting a different server so

00:20:07,929 --> 00:20:11,559
what this is is a two node web

00:20:09,999 --> 00:20:18,309
application with a load balancer in

00:20:11,559 --> 00:20:20,950
front of it what I would like to do is

00:20:18,309 --> 00:20:23,830
upgrade this application with zero

00:20:20,950 --> 00:20:27,279
downtime right so I want to pull one of

00:20:23,830 --> 00:20:30,399
the nodes from the load balancer upgrade

00:20:27,279 --> 00:20:32,979
that node and bring it back up without

00:20:30,399 --> 00:20:38,249
users noticing that anything had

00:20:32,979 --> 00:20:44,979
happened I can do that with puppet bolt

00:20:38,249 --> 00:20:47,349
so what I'm gonna do here is run a

00:20:44,979 --> 00:20:50,710
series of tasks exactly those three

00:20:47,349 --> 00:20:52,210
tasks first it's going to take one of

00:20:50,710 --> 00:20:54,789
the nodes in the load balancer it's

00:20:52,210 --> 00:20:57,879
going to pull it out wait a few seconds

00:20:54,789 --> 00:20:59,769
while the the sessions drain it's going

00:20:57,879 --> 00:21:00,909
to upgrade it through docker and then

00:20:59,769 --> 00:21:08,200
it's going to bring it back into the

00:21:00,909 --> 00:21:09,759
load balancer so command line tool again

00:21:08,200 --> 00:21:15,029
this is open source can be downloaded

00:21:09,759 --> 00:21:18,029
freely I'm gonna run a plan right

00:21:15,029 --> 00:21:18,029
absolutely

00:21:21,230 --> 00:21:31,070
it's that okay and in fact the plan that

00:21:27,900 --> 00:21:36,300
I'm going to run is called upgrade

00:21:31,070 --> 00:21:42,150
webserver I have to tell it where to

00:21:36,300 --> 00:21:43,850
find this stuff and I have to tell it

00:21:42,150 --> 00:21:48,690
sorry

00:21:43,850 --> 00:21:49,920
yeah where it needs to run and because I

00:21:48,690 --> 00:21:56,040
don't want to bother you with this long

00:21:49,920 --> 00:21:59,190
ugly URL just do the shortcut and I also

00:21:56,040 --> 00:22:03,450
want to tell it which duck or tag to

00:21:59,190 --> 00:22:06,300
upgrade to and again because I forgot

00:22:03,450 --> 00:22:10,560
I'll just do this and actually we can

00:22:06,300 --> 00:22:17,790
just see that it resolves to this stuff

00:22:10,560 --> 00:22:19,680
right there okay so I've let it loose

00:22:17,790 --> 00:22:24,840
and we'll see here if you look at the

00:22:19,680 --> 00:22:31,140
lower left at some point one of the

00:22:24,840 --> 00:22:33,420
nodes will drop out there you see one of

00:22:31,140 --> 00:22:35,400
the notes is gone again

00:22:33,420 --> 00:22:37,740
you know this this is a very real use

00:22:35,400 --> 00:22:40,080
case I don't know if people here are in

00:22:37,740 --> 00:22:42,150
web development but that is very typical

00:22:40,080 --> 00:22:46,440
use case you you pull your nodes out one

00:22:42,150 --> 00:22:47,910
by one and you upgrade the instance and

00:22:46,440 --> 00:22:51,860
then you only bring it back online

00:22:47,910 --> 00:22:53,960
once it's upgraded so and then we see

00:22:51,860 --> 00:23:02,460
it's now come back online

00:22:53,960 --> 00:23:05,340
seamlessly no downtime and so on okay

00:23:02,460 --> 00:23:08,130
and that concludes my talk about tasks

00:23:05,340 --> 00:23:10,110
both pipe and Enterprise task manager

00:23:08,130 --> 00:23:12,300
and bolt I'd like to move on to a

00:23:10,110 --> 00:23:16,110
different way to deploy code which is a

00:23:12,300 --> 00:23:25,140
CI CD tool and just ask at this point if

00:23:16,110 --> 00:23:26,610
there's any questions from anybody among

00:23:25,140 --> 00:23:29,730
the other things I did was I was a

00:23:26,610 --> 00:23:31,320
graduate instructor so I learned how to

00:23:29,730 --> 00:23:33,900
be silent for a long amount of time

00:23:31,320 --> 00:23:37,160
because graduate students don't

00:23:33,900 --> 00:23:37,160
ever say anything if they don't have to

00:23:43,160 --> 00:23:55,650
okay again I'm just gonna use the exact

00:23:53,640 --> 00:23:58,020
same application that I used before in

00:23:55,650 --> 00:24:00,930
just uh for a little more edification

00:23:58,020 --> 00:24:01,970
it's a two-phase application so you've

00:24:00,930 --> 00:24:04,740
got the back end you got the front end

00:24:01,970 --> 00:24:07,370
it has rest services that are feeding

00:24:04,740 --> 00:24:10,770
into it you see the rest services here

00:24:07,370 --> 00:24:13,740
and it produces this is it's basically

00:24:10,770 --> 00:24:15,060
just gross you know it's just a

00:24:13,740 --> 00:24:16,950
framework that doesn't actually do

00:24:15,060 --> 00:24:20,130
anything and instead of seeing I've

00:24:16,950 --> 00:24:22,770
changed it a little bit now you see the

00:24:20,130 --> 00:24:24,840
environment so right now with what

00:24:22,770 --> 00:24:27,200
you're seeing is the development

00:24:24,840 --> 00:24:29,580
environment and if we look over here

00:24:27,200 --> 00:24:32,370
this is the production environment and

00:24:29,580 --> 00:24:34,830
and you can see some changes because

00:24:32,370 --> 00:24:40,050
your production is probably not going to

00:24:34,830 --> 00:24:43,580
be the same as your dev right so you see

00:24:40,050 --> 00:24:43,580
that there are two different systems

00:24:43,730 --> 00:24:47,190
there are lots of CI tools out there

00:24:46,070 --> 00:24:51,450
teamcity

00:24:47,190 --> 00:24:55,110
jenkins quite a few right the difficulty

00:24:51,450 --> 00:24:56,730
in the CI CD pipeline is is getting the

00:24:55,110 --> 00:24:59,160
artifacts that you're creating and

00:24:56,730 --> 00:25:01,410
installing them in the environments

00:24:59,160 --> 00:25:05,480
where you want them to be this is not an

00:25:01,410 --> 00:25:09,300
easy task to do you can do it in Jenkins

00:25:05,480 --> 00:25:12,660
it's not easy and then don't breathe and

00:25:09,300 --> 00:25:21,900
and and hopefully I won't it won't stop

00:25:12,660 --> 00:25:23,610
working so as I said this was kind of

00:25:21,900 --> 00:25:28,260
the hobbyhorse or not the hobbyhorse or

00:25:23,610 --> 00:25:32,090
but the real need identified by Rahl's

00:25:28,260 --> 00:25:37,770
saying it at AWS this need to bring a

00:25:32,090 --> 00:25:41,220
simple and resilient CI CD tool to the

00:25:37,770 --> 00:25:45,300
market okay so what you see here is is

00:25:41,220 --> 00:25:47,160
the puppet pipelines application with

00:25:45,300 --> 00:25:47,670
applications installed you see here I

00:25:47,160 --> 00:25:50,040
have

00:25:47,670 --> 00:25:52,110
or applications installed including the

00:25:50,040 --> 00:25:54,840
application you've seen the backend and

00:25:52,110 --> 00:25:58,320
you also see the front-end so that's all

00:25:54,840 --> 00:26:01,440
part of this so what you're seeing is

00:25:58,320 --> 00:26:04,430
the connection to the repositories where

00:26:01,440 --> 00:26:07,170
the developer ostensibly would be

00:26:04,430 --> 00:26:15,840
publishing the code and and making the

00:26:07,170 --> 00:26:18,570
changes and what you also see here it's

00:26:15,840 --> 00:26:22,650
going to jump to servers and this is

00:26:18,570 --> 00:26:24,870
where you identify where you want these

00:26:22,650 --> 00:26:28,740
artifacts that are being created in the

00:26:24,870 --> 00:26:31,890
in the CI tool to be installed ok it's

00:26:28,740 --> 00:26:35,010
possible to have many different servers

00:26:31,890 --> 00:26:37,470
you can actually create clouds based

00:26:35,010 --> 00:26:41,220
servers from Google or from AWS from

00:26:37,470 --> 00:26:46,530
this dashboard so very easy to expand

00:26:41,220 --> 00:26:48,000
your infrastructure another way to look

00:26:46,530 --> 00:26:56,090
at it is through dashboards that's

00:26:48,000 --> 00:26:56,090
wearing in a hop to now and what you see

00:26:58,700 --> 00:27:04,820
is this application called the daybook

00:27:02,910 --> 00:27:08,700
application that I showed you on the

00:27:04,820 --> 00:27:13,260
website and it gives a very good

00:27:08,700 --> 00:27:16,260
overview of the health and the status of

00:27:13,260 --> 00:27:19,350
the application above you see the API

00:27:16,260 --> 00:27:21,210
the rest based API application and below

00:27:19,350 --> 00:27:25,440
you see the the web front-end you could

00:27:21,210 --> 00:27:30,660
have multiple applications here for

00:27:25,440 --> 00:27:35,700
instance different branches you could

00:27:30,660 --> 00:27:36,960
have logically related applications for

00:27:35,700 --> 00:27:39,270
instance if one application was

00:27:36,960 --> 00:27:41,010
dependent on another application and

00:27:39,270 --> 00:27:43,230
what you're seeing here so on on the

00:27:41,010 --> 00:27:46,110
left you can call that the CI part of

00:27:43,230 --> 00:27:49,280
the application this is where the build

00:27:46,110 --> 00:27:52,500
happens and these are the different

00:27:49,280 --> 00:27:53,940
environments the different servers where

00:27:52,500 --> 00:27:55,830
they are installed these artifacts that

00:27:53,940 --> 00:27:57,840
are being built here I have my

00:27:55,830 --> 00:27:59,310
development environment you've got the

00:27:57,840 --> 00:28:01,020
QA and then finally the production

00:27:59,310 --> 00:28:01,500
environment and it shows you the logical

00:28:01,020 --> 00:28:04,110
flow

00:28:01,500 --> 00:28:06,210
that I've envisioned that this

00:28:04,110 --> 00:28:10,410
application should go in and just to

00:28:06,210 --> 00:28:14,280
demonstrate let me push a change here so

00:28:10,410 --> 00:28:19,890
I've already got one loaded up actually

00:28:14,280 --> 00:28:20,940
so you see here what I'm going to do is

00:28:19,890 --> 00:28:23,190
I'm going to change the message of the

00:28:20,940 --> 00:28:31,170
day kind of boring so let's do something

00:28:23,190 --> 00:28:34,500
about that and and if I go back here

00:28:31,170 --> 00:28:36,060
then you know web hooks have been

00:28:34,500 --> 00:28:38,100
installed if you include a new the

00:28:36,060 --> 00:28:40,020
another application that goes out to to

00:28:38,100 --> 00:28:43,590
get or to bitbucket or what have you and

00:28:40,020 --> 00:28:46,170
it registers a web app web hook and so

00:28:43,590 --> 00:28:48,750
we'll start to see this process proceed

00:28:46,170 --> 00:28:52,530
through this pipeline right first was a

00:28:48,750 --> 00:28:54,780
build on the Left moving on to the the

00:28:52,530 --> 00:28:57,200
various deployments to the right so it

00:28:54,780 --> 00:29:01,890
should kick off here quickly assuming my

00:28:57,200 --> 00:29:04,740
Wi-Fi is working okay this is the SAS

00:29:01,890 --> 00:29:06,870
version of the software so it does have

00:29:04,740 --> 00:29:08,730
to wait for a build server right so

00:29:06,870 --> 00:29:11,730
you've got various docker images that

00:29:08,730 --> 00:29:15,060
run the different build servers it can

00:29:11,730 --> 00:29:18,780
also be run on premises behind a

00:29:15,060 --> 00:29:20,460
firewall or behind the DMZ okay so

00:29:18,780 --> 00:29:21,780
that's gonna start building what I've

00:29:20,460 --> 00:29:26,370
done is I've created a fairly naive

00:29:21,780 --> 00:29:28,650
workflow you've got the the build on the

00:29:26,370 --> 00:29:31,170
Left that's going to build the artifact

00:29:28,650 --> 00:29:33,030
it's going to push it up docker hub and

00:29:31,170 --> 00:29:34,500
then it's going to say okay if that

00:29:33,030 --> 00:29:37,650
successfully builds go ahead and deploy

00:29:34,500 --> 00:29:39,350
it automatically into my development

00:29:37,650 --> 00:29:41,820
environment very typical use case right

00:29:39,350 --> 00:29:43,710
the developers have developed something

00:29:41,820 --> 00:29:45,480
on their their laptop and now you want

00:29:43,710 --> 00:29:46,920
to make sure that it works on a public

00:29:45,480 --> 00:29:50,040
system so it's going to immediately

00:29:46,920 --> 00:29:53,820
publish it to that system what I've also

00:29:50,040 --> 00:29:56,190
said is once it successfully installs

00:29:53,820 --> 00:29:59,100
into the development environment go

00:29:56,190 --> 00:30:04,170
ahead and install it in the QA

00:29:59,100 --> 00:30:07,140
environment not as typical generally you

00:30:04,170 --> 00:30:11,370
wouldn't be installing every developer

00:30:07,140 --> 00:30:13,799
release and immediately into QA but what

00:30:11,370 --> 00:30:16,379
you do see over here

00:30:13,799 --> 00:30:19,320
is that the version for production is

00:30:16,379 --> 00:30:21,119
very different than the version for QA

00:30:19,320 --> 00:30:24,899
here we have 34 and the newest one is

00:30:21,119 --> 00:30:26,820
currently version 35 that is not

00:30:24,899 --> 00:30:29,389
untypical right so you're not going to

00:30:26,820 --> 00:30:32,190
want to just automatically be publishing

00:30:29,389 --> 00:30:36,299
all your releases from straight into

00:30:32,190 --> 00:30:38,480
production and once this gets through

00:30:36,299 --> 00:30:40,919
then I'll go ahead and show you how

00:30:38,480 --> 00:30:43,830
actually you can promote a particular

00:30:40,919 --> 00:30:46,679
artifact into production there are

00:30:43,830 --> 00:30:48,330
different ways to do it you can do it

00:30:46,679 --> 00:30:50,789
just from here through a button click or

00:30:48,330 --> 00:30:54,109
you can also say that there have to be a

00:30:50,789 --> 00:30:57,899
certain set of users who approve a

00:30:54,109 --> 00:31:00,600
certain release right so you can define

00:30:57,899 --> 00:31:03,629
within pipelines who gets to do what who

00:31:00,600 --> 00:31:05,869
gets to create a new workflow who gets

00:31:03,629 --> 00:31:09,210
to just look at things but not touch or

00:31:05,869 --> 00:31:17,730
who is responsible for determining what

00:31:09,210 --> 00:31:19,919
gets promoted to where okay so it's

00:31:17,730 --> 00:31:21,359
successfully deployed it into the

00:31:19,919 --> 00:31:24,539
development environment we can actually

00:31:21,359 --> 00:31:27,539
go out and look at that if we refresh

00:31:24,539 --> 00:31:29,639
this here then we have the new MOTD

00:31:27,539 --> 00:31:33,570
which is a little bit more useful than

00:31:29,639 --> 00:31:37,049
than what we had but then again so now

00:31:33,570 --> 00:31:43,679
it's completed it's done we still have

00:31:37,049 --> 00:31:45,210
version 25 oops I did that there and

00:31:43,679 --> 00:31:51,179
what I'm going to do is I'm going to

00:31:45,210 --> 00:31:52,440
promote this to the latest version so

00:31:51,179 --> 00:31:56,249
actually if we go back to the production

00:31:52,440 --> 00:31:59,999
and refresh we see that it is still the

00:31:56,249 --> 00:32:02,399
old version so I'm going to deploy this

00:31:59,999 --> 00:32:05,070
to this production environment I'm going

00:32:02,399 --> 00:32:06,509
to deploy the one that was just created

00:32:05,070 --> 00:32:09,929
and just deployed in the queue Aires or

00:32:06,509 --> 00:32:11,700
we're all very happy with this isn't a

00:32:09,929 --> 00:32:13,169
new artifact I'm not creating a new

00:32:11,700 --> 00:32:14,909
artifact I'm not pulling anything else

00:32:13,169 --> 00:32:16,710
this is the exact same artifact that was

00:32:14,909 --> 00:32:19,019
published in my dev environments and in

00:32:16,710 --> 00:32:21,059
my QA environments and what you see it

00:32:19,019 --> 00:32:25,049
also has an automatic staggering so it

00:32:21,059 --> 00:32:27,620
does have that concept of no downtime

00:32:25,049 --> 00:32:29,899
deployment

00:32:27,620 --> 00:32:32,090
and you fire it off and then you can see

00:32:29,899 --> 00:32:35,509
the you can watch the progress as it

00:32:32,090 --> 00:32:41,600
deploys into production any questions up

00:32:35,509 --> 00:32:44,240
to that point as I said this is the SAS

00:32:41,600 --> 00:32:47,509
version of it it is also free to

00:32:44,240 --> 00:32:50,149
download as on premises version and the

00:32:47,509 --> 00:32:52,129
SAS is free to use up to a certain point

00:32:50,149 --> 00:32:53,799
I think you can have up to five nodes or

00:32:52,129 --> 00:32:59,210
something like that so deployment nodes

00:32:53,799 --> 00:33:03,889
free to use okay and and what I'm going

00:32:59,210 --> 00:33:06,619
to show is one last thing as I said it

00:33:03,889 --> 00:33:09,080
should also be simple so it shouldn't

00:33:06,619 --> 00:33:11,840
just be transparent so anybody can look

00:33:09,080 --> 00:33:14,090
and see what the the status is it

00:33:11,840 --> 00:33:15,679
shouldn't just be resilient but it

00:33:14,090 --> 00:33:20,059
should also be simple and so what we

00:33:15,679 --> 00:33:22,299
have is kind of a a self-service portal

00:33:20,059 --> 00:33:25,210
for the different members on your team

00:33:22,299 --> 00:33:28,850
so I want to install a new application

00:33:25,210 --> 00:33:30,350
just go to a new app and then you see

00:33:28,850 --> 00:33:32,869
the different integrations that we have

00:33:30,350 --> 00:33:34,340
for this so bitbucket github if you're

00:33:32,869 --> 00:33:36,799
using something else as Fianna or what

00:33:34,340 --> 00:33:38,049
have you then you could go no repository

00:33:36,799 --> 00:33:40,999
and there are other methods for

00:33:38,049 --> 00:33:42,980
triggering a built in this case I'm

00:33:40,999 --> 00:33:45,019
going to use big bucket goes out to the

00:33:42,980 --> 00:33:49,610
web using bit buckets api's and finds

00:33:45,019 --> 00:33:51,320
out so i've already authorized pipelines

00:33:49,610 --> 00:33:55,669
to use my bitbucket account so it knows

00:33:51,320 --> 00:33:57,679
my my different projects I'm gonna grab

00:33:55,669 --> 00:34:00,529
this one again it goes and says okay

00:33:57,679 --> 00:34:05,090
which branch do you want to use just use

00:34:00,529 --> 00:34:09,440
the master and then it asks you how you

00:34:05,090 --> 00:34:11,960
want to build it it doesn't have to be a

00:34:09,440 --> 00:34:15,349
darker build it could be a Java build or

00:34:11,960 --> 00:34:16,940
Python or what have you in here it tells

00:34:15,349 --> 00:34:19,129
you okay what are your build steps and

00:34:16,940 --> 00:34:22,909
it gives you a few examples of how a

00:34:19,129 --> 00:34:24,319
Python build script might look like as I

00:34:22,909 --> 00:34:24,679
said I'm going to be doing this in

00:34:24,319 --> 00:34:31,750
docker

00:34:24,679 --> 00:34:31,750
I will

00:34:32,320 --> 00:34:37,870
determine the docker hub repository

00:34:35,070 --> 00:34:42,850
let's see was I called flask demo I

00:34:37,870 --> 00:34:45,639
believe the container repository where I

00:34:42,850 --> 00:34:48,790
want that to be pushed to and then it

00:34:45,639 --> 00:34:56,830
immediately gives me potential build

00:34:48,790 --> 00:34:58,120
code for for creating this artifact I'm

00:34:56,830 --> 00:35:02,020
going to go ahead and do this

00:34:58,120 --> 00:35:07,750
so what pipelines also offers you is the

00:35:02,020 --> 00:35:10,570
ability to define in your repository the

00:35:07,750 --> 00:35:14,640
build steps that you want and also the

00:35:10,570 --> 00:35:14,640
steps that you need for deploying or

00:35:15,150 --> 00:35:22,420
publishing your artifact here I don't

00:35:18,190 --> 00:35:23,830
need a particular build server I don't

00:35:22,420 --> 00:35:25,000
need a Python build server it's a

00:35:23,830 --> 00:35:31,320
stalker I'm just going to go ahead and

00:35:25,000 --> 00:35:31,320
let it use the default and we let it run

00:35:32,610 --> 00:35:37,780
and there you see it's already getting

00:35:35,070 --> 00:35:39,610
ready to build and I go to the

00:35:37,780 --> 00:35:43,600
application landing page and what you

00:35:39,610 --> 00:35:45,990
see is is more or less the feed of

00:35:43,600 --> 00:35:49,600
what's happening with your application

00:35:45,990 --> 00:35:51,490
sorry now you see it's gotten a change

00:35:49,600 --> 00:35:55,090
or rather it's it's the initial deploy

00:35:51,490 --> 00:35:57,370
so it's pulling the art of the the code

00:35:55,090 --> 00:35:59,710
and it's gonna build it as and as it

00:35:57,370 --> 00:36:05,770
gets a chance and what this page also

00:35:59,710 --> 00:36:08,770
allows you to do is to create this

00:36:05,770 --> 00:36:11,160
workflow what do you want it to do when

00:36:08,770 --> 00:36:15,550
it's created the artifact and and

00:36:11,160 --> 00:36:18,580
published it so here you can define

00:36:15,550 --> 00:36:22,690
environments as I showed in the web

00:36:18,580 --> 00:36:24,790
application I have my dev environment my

00:36:22,690 --> 00:36:34,000
staging and all that so let's go ahead

00:36:24,790 --> 00:36:36,810
and create a couple here get my dev do

00:36:34,000 --> 00:36:39,810
all the the standard if you will

00:36:36,810 --> 00:36:39,810
environments

00:36:42,049 --> 00:36:46,409
and you can be as creative as you want

00:36:45,059 --> 00:36:49,999
here I mean this you know you can have

00:36:46,409 --> 00:36:52,349
multiple QA environments for instance

00:36:49,999 --> 00:36:54,869
you could create artifact and have it

00:36:52,349 --> 00:36:59,189
installed to ten different environments

00:36:54,869 --> 00:37:01,559
at the same time not a problem so I have

00:36:59,189 --> 00:37:03,809
my environments they don't have any

00:37:01,559 --> 00:37:05,939
servers registered with them yet but I

00:37:03,809 --> 00:37:08,759
can go out and I've got my my various

00:37:05,939 --> 00:37:11,759
servers and I can just assign one or

00:37:08,759 --> 00:37:15,179
more servers to a particular environment

00:37:11,759 --> 00:37:16,499
and and if you define that a environment

00:37:15,179 --> 00:37:18,179
should be installed to than all the

00:37:16,499 --> 00:37:24,869
servers will have that code installed at

00:37:18,179 --> 00:37:27,209
the same time okay for my prod I

00:37:24,869 --> 00:37:30,779
actually have two so I'm going to have a

00:37:27,209 --> 00:37:33,319
high availability system there you see

00:37:30,779 --> 00:37:37,799
here the two servers have been installed

00:37:33,319 --> 00:37:45,659
QA I've got a server and last but not

00:37:37,799 --> 00:37:51,149
least my staging okay let's go back to

00:37:45,659 --> 00:37:53,039
the overview it is completed you see

00:37:51,149 --> 00:37:56,549
that the image has been pushed up to

00:37:53,039 --> 00:37:57,029
docker hub and then so what I wanted yes

00:37:56,549 --> 00:37:59,429
I did

00:37:57,029 --> 00:38:03,379
now what I'm going to do is say okay

00:37:59,429 --> 00:38:08,609
when you've built put it somewhere and

00:38:03,379 --> 00:38:10,409
I've created my first pipeline and I'm

00:38:08,609 --> 00:38:12,329
gonna say you know what auto to play it

00:38:10,409 --> 00:38:16,469
if that builds succeed just go ahead and

00:38:12,329 --> 00:38:16,709
shove it right into dev let's do it

00:38:16,469 --> 00:38:19,949
again

00:38:16,709 --> 00:38:24,389
next step again this is going to be my

00:38:19,949 --> 00:38:26,399
QA environment and I'm gonna do it as I

00:38:24,389 --> 00:38:28,499
did with the daybook application I'm

00:38:26,399 --> 00:38:30,629
gonna say install it into two

00:38:28,499 --> 00:38:36,479
environments at the same time in this

00:38:30,629 --> 00:38:39,119
case what I want to say is if they all

00:38:36,479 --> 00:38:41,189
succeed if the environment successfully

00:38:39,119 --> 00:38:43,919
installed then go ahead and push it into

00:38:41,189 --> 00:38:48,569
the QA environment then finally let's

00:38:43,919 --> 00:38:50,189
get the production and I'm not going to

00:38:48,569 --> 00:38:51,689
auto deploy I could do the same thing

00:38:50,189 --> 00:38:55,249
there but you know it's production so

00:38:51,689 --> 00:38:55,249
let's not have an auditor point

00:38:59,430 --> 00:39:04,359
okay so let's go up to here and we see

00:39:02,650 --> 00:39:05,859
this is the production environment again

00:39:04,359 --> 00:39:08,079
so we can see down here its production

00:39:05,859 --> 00:39:10,599
this is the one that I deploy to

00:39:08,079 --> 00:39:13,470
manually and we see okay it's a new

00:39:10,599 --> 00:39:17,500
version and all that guess what

00:39:13,470 --> 00:39:19,380
bugs something happened we didn't catch

00:39:17,500 --> 00:39:26,050
it in QA now we have to roll back the

00:39:19,380 --> 00:39:31,329
hated roll back not so hated in

00:39:26,050 --> 00:39:36,970
pipelines so if we go here where am I

00:39:31,329 --> 00:39:38,410
going right there I can just say what I

00:39:36,970 --> 00:39:42,339
want to do I think I wanna do that let

00:39:38,410 --> 00:39:43,750
me just check in yes I do I'm going to

00:39:42,339 --> 00:39:47,220
deploy and what I'm going to do is I'm

00:39:43,750 --> 00:39:55,329
going to go back and find a safe version

00:39:47,220 --> 00:39:56,740
or an oh yeah crap sorry myself right so

00:39:55,329 --> 00:39:59,530
this is the version that was installed

00:39:56,740 --> 00:40:02,819
before again I'm not I'm not rolling

00:39:59,530 --> 00:40:05,950
back my git I'm not doing a new release

00:40:02,819 --> 00:40:09,119
I'm going back to a known stable

00:40:05,950 --> 00:40:13,839
artifact and I want to install it there

00:40:09,119 --> 00:40:16,089
so this is as painless a rollback as

00:40:13,839 --> 00:40:17,799
you're ever gonna see good I mean I'm

00:40:16,089 --> 00:40:21,520
using docker so and I don't have a

00:40:17,799 --> 00:40:24,010
database and there's lots of caveats but

00:40:21,520 --> 00:40:25,990
this sort of functionality I mean I

00:40:24,010 --> 00:40:27,940
would have loved in my previous life as

00:40:25,990 --> 00:40:30,010
a core developer I don't know if people

00:40:27,940 --> 00:40:32,500
work in in software but basically

00:40:30,010 --> 00:40:36,940
rolling back was always always always

00:40:32,500 --> 00:40:39,059
far more painful than simply living with

00:40:36,940 --> 00:40:42,160
reality and moving forward

00:40:39,059 --> 00:40:44,740
okay so I've said you know we have to go

00:40:42,160 --> 00:40:52,299
back to an earlier version and it's

00:40:44,740 --> 00:40:53,530
immediately doing the deployment and

00:40:52,299 --> 00:40:55,000
we'll just give it a few seconds and

00:40:53,530 --> 00:40:57,010
it'll complete and then we can see that

00:40:55,000 --> 00:40:59,549
the the original version of the

00:40:57,010 --> 00:41:02,049
application was in fact reinstalled him

00:40:59,549 --> 00:41:03,790
so let's see should come up quite

00:41:02,049 --> 00:41:08,800
quickly if we go back yeah then we have

00:41:03,790 --> 00:41:13,010
the original version of dev reinstalled

00:41:08,800 --> 00:41:16,550
last thing I'll show you this is the

00:41:13,010 --> 00:41:17,930
manifest that defines the different

00:41:16,550 --> 00:41:20,570
build steps you see here this is a

00:41:17,930 --> 00:41:24,200
docker application this is actually a

00:41:20,570 --> 00:41:29,180
pretty poor example because it doesn't

00:41:24,200 --> 00:41:31,119
show much but if I go here then you see

00:41:29,180 --> 00:41:32,960
a few more steps you see the build step

00:41:31,119 --> 00:41:34,340
what built pipelines

00:41:32,960 --> 00:41:36,410
also does is it monitors your

00:41:34,340 --> 00:41:40,550
application if you desired so anything

00:41:36,410 --> 00:41:43,250
in this execution step that's started in

00:41:40,550 --> 00:41:46,550
the environment if that ever stops

00:41:43,250 --> 00:41:47,830
running pipeline just starts it again it

00:41:46,550 --> 00:41:52,160
doesn't have to be but that's that's

00:41:47,830 --> 00:41:55,880
another feature of pipelines and with

00:41:52,160 --> 00:42:00,560
that I see I have two more minutes left

00:41:55,880 --> 00:42:02,330
to my actual presentation and then we'd

00:42:00,560 --> 00:42:04,250
have time for questions but let's just

00:42:02,330 --> 00:42:05,690
go ahead and leap over those to two

00:42:04,250 --> 00:42:08,150
minutes and go to questions immediately

00:42:05,690 --> 00:42:10,160
so is there anything I could answer for

00:42:08,150 --> 00:42:16,869
you or is there anything you'd like to

00:42:10,160 --> 00:42:16,869
see that I haven't shown yeah

00:42:25,570 --> 00:42:37,340
sure sure they mm-hmm okay so the

00:42:30,800 --> 00:42:39,560
question is so that's a wonderful

00:42:37,340 --> 00:42:41,180
question and the question is so

00:42:39,560 --> 00:42:43,790
effectively what's to prevent somebody

00:42:41,180 --> 00:42:46,280
from running a malicious command or a

00:42:43,790 --> 00:42:47,840
stupid command across a hundred thousand

00:42:46,280 --> 00:42:49,780
notes right so what are the

00:42:47,840 --> 00:42:54,740
authentication or authorization

00:42:49,780 --> 00:42:58,400
restrictions on puppet tasks so with

00:42:54,740 --> 00:43:01,490
puppet bolt that in this in what I

00:42:58,400 --> 00:43:04,250
showed you was using a synchronous key

00:43:01,490 --> 00:43:07,160
authentication right so you can use

00:43:04,250 --> 00:43:08,870
password authentication button but in

00:43:07,160 --> 00:43:11,270
general that authorization and

00:43:08,870 --> 00:43:17,750
authentication is clear I have to have

00:43:11,270 --> 00:43:24,790
the rights to that machine with puppet

00:43:17,750 --> 00:43:26,870
enterprise task manager it works with

00:43:24,790 --> 00:43:30,680
access control so it's an enterprise

00:43:26,870 --> 00:43:35,570
tool it has role based access controls

00:43:30,680 --> 00:43:39,020
and you can say these people have access

00:43:35,570 --> 00:43:41,960
to tasks or you can say these people

00:43:39,020 --> 00:43:44,030
have access to this particular task or

00:43:41,960 --> 00:43:46,430
you can say these people have access to

00:43:44,030 --> 00:43:48,920
this particular task on these servers so

00:43:46,430 --> 00:43:52,310
that's very possible to through the

00:43:48,920 --> 00:43:54,230
dashboard define exactly who and what

00:43:52,310 --> 00:43:57,200
gets to do what you know I gave you the

00:43:54,230 --> 00:43:58,640
example of the exec command I'm always a

00:43:57,200 --> 00:43:59,600
little bit iffy if I should be showing

00:43:58,640 --> 00:44:04,250
that because I know there's a lot of

00:43:59,600 --> 00:44:06,590
system ins will be like holy God that

00:44:04,250 --> 00:44:08,060
isn't by default there you have to

00:44:06,590 --> 00:44:09,950
install that and then you can very

00:44:08,060 --> 00:44:15,490
clearly and carefully define who gets to

00:44:09,950 --> 00:44:15,490
use that power that answer your question

00:44:19,690 --> 00:44:33,430
anything else I can answer for you or

00:44:23,600 --> 00:44:35,690
dig deeper into okay then thank you and

00:44:33,430 --> 00:44:36,930
have a good rest of your time

00:44:35,690 --> 00:44:55,120
[Applause]

00:44:36,930 --> 00:44:55,120

YouTube URL: https://www.youtube.com/watch?v=5l9T9ALmMdw


