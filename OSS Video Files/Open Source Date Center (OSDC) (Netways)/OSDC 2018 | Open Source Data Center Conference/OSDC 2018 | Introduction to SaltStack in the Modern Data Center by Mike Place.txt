Title: OSDC 2018 | Introduction to SaltStack in the Modern Data Center by Mike Place
Publication date: 2018-06-22
Playlist: OSDC 2018 | Open Source Data Center Conference
Description: 
	Modern-day data centers face an enormous amount of complexity, from managing and deploying distributed applications to monitoring and controlling changes in networking hardware, engineers face an unprecedented set of challenges in trying to tame the chaos.

In this talk, Mike Place from SaltStack will cover how to use Salt to automate and control all the elements of a modern data center, from the physical hardware to the application packaging and deployment. Heâ€™ll also show how automation frameworks can merge with monitoring systems to create event-driven infrastructure patterns that can achieve maximum observability and quick remediation to every type of deployment.

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de
Blog: http://blog.netways.de
Webinare: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Google+: https://plus.google.com/+netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh

https://www.frametraxx.de/
Captions: 
	00:00:00,540 --> 00:00:03,369
[Music]

00:00:01,310 --> 00:00:03,369
you

00:00:11,750 --> 00:00:16,990
[Music]

00:00:13,049 --> 00:00:19,329
thank you so much for having me my name

00:00:16,990 --> 00:00:22,360
is Mike as you can tell I'm a long way

00:00:19,329 --> 00:00:24,849
from home I am from Salt Lake City Utah

00:00:22,360 --> 00:00:26,590
I have an amazing job in that I get to

00:00:24,849 --> 00:00:28,540
travel the world and argue with people

00:00:26,590 --> 00:00:31,559
about the right way to manage

00:00:28,540 --> 00:00:34,809
infrastructure which is fun but also you

00:00:31,559 --> 00:00:38,950
are an opinionated Bunch so it's also

00:00:34,809 --> 00:00:41,409
sometimes very exhausting and I've

00:00:38,950 --> 00:00:43,359
really enjoyed this conference today

00:00:41,409 --> 00:00:45,159
it's it's truly been one of the better

00:00:43,359 --> 00:00:46,089
conference and I go to a lot and this

00:00:45,159 --> 00:00:47,350
has truly been one of the better

00:00:46,089 --> 00:00:49,359
conferences where I think people are

00:00:47,350 --> 00:00:52,539
saying some really really smart things

00:00:49,359 --> 00:00:54,839
about how to manage infrastructure and

00:00:52,539 --> 00:00:57,690
it's really reminded me how jealous I am

00:00:54,839 --> 00:01:01,239
of your job because there are so many

00:00:57,690 --> 00:01:04,330
amazing tools out there and I hope that

00:01:01,239 --> 00:01:07,180
if nothing else by the end of today you

00:01:04,330 --> 00:01:09,820
will have taken the time to to check out

00:01:07,180 --> 00:01:12,460
some of the the products by by Mitchell

00:01:09,820 --> 00:01:15,030
and his group over at hashey Corp and

00:01:12,460 --> 00:01:17,920
others because I'm really jealous that

00:01:15,030 --> 00:01:21,580
that all of you get to use this stuff in

00:01:17,920 --> 00:01:24,210
the world but anyway like I said I am

00:01:21,580 --> 00:01:28,840
I'm Mike place and I'm the maintainer of

00:01:24,210 --> 00:01:31,030
saltstack and what is salt anyhow well

00:01:28,840 --> 00:01:34,150
salt is an event driven continuous

00:01:31,030 --> 00:01:36,880
automation engine and what that really

00:01:34,150 --> 00:01:41,080
means is that you know salt grew up in

00:01:36,880 --> 00:01:43,420
the in the shadow of bigger and much

00:01:41,080 --> 00:01:46,390
more famous projects like like chef and

00:01:43,420 --> 00:01:48,880
puppet and of course cfengine the

00:01:46,390 --> 00:01:54,540
project by Mark Burgess that showed us

00:01:48,880 --> 00:01:58,030
all the way in the the 1990s and salt

00:01:54,540 --> 00:02:00,370
really operates on a principle that I

00:01:58,030 --> 00:02:03,190
think is a little bit different than

00:02:00,370 --> 00:02:04,840
everybody else and one of the things

00:02:03,190 --> 00:02:06,850
that's really important to us and is

00:02:04,840 --> 00:02:10,319
really important to me is that

00:02:06,850 --> 00:02:13,510
automation acts as a first-class citizen

00:02:10,319 --> 00:02:15,400
in the infrastructure because so often

00:02:13,510 --> 00:02:17,380
especially when you look at the history

00:02:15,400 --> 00:02:19,569
of things like configuration management

00:02:17,380 --> 00:02:22,569
we think about configuration management

00:02:19,569 --> 00:02:26,709
and automation as something that Prime

00:02:22,569 --> 00:02:30,489
operates in the first few moments of an

00:02:26,709 --> 00:02:32,829
instances life right that it deploys an

00:02:30,489 --> 00:02:35,409
image into the cloud or it takes a base

00:02:32,829 --> 00:02:37,629
image and applies some set of

00:02:35,409 --> 00:02:40,170
configuration to it and then more or

00:02:37,629 --> 00:02:42,519
less make sure that it doesn't waver

00:02:40,170 --> 00:02:45,010
well that stuff is all important and

00:02:42,519 --> 00:02:47,470
it's it's it will never not be important

00:02:45,010 --> 00:02:50,379
in my view but I also tend to believe

00:02:47,470 --> 00:02:53,469
that automation can do a lot more that

00:02:50,379 --> 00:02:56,019
it can exist and be pervasive up and

00:02:53,469 --> 00:02:58,180
down the stack and that it can operate

00:02:56,019 --> 00:03:00,790
not just at the birth of an instance but

00:02:58,180 --> 00:03:02,980
it can operate moment-to-moment as a

00:03:00,790 --> 00:03:05,139
part of the application as a part of the

00:03:02,980 --> 00:03:08,769
infrastructure for self-healing for auto

00:03:05,139 --> 00:03:11,109
remediation as a part of C ICD as a part

00:03:08,769 --> 00:03:14,769
of security remediation or what have you

00:03:11,109 --> 00:03:17,409
so the salt open-source project just to

00:03:14,769 --> 00:03:18,760
give you a brief idea is an extremely

00:03:17,409 --> 00:03:20,980
busy project it's one of the busiest

00:03:18,760 --> 00:03:23,169
python-based open-source projects in the

00:03:20,980 --> 00:03:26,409
world we tend to see somewhere between

00:03:23,169 --> 00:03:29,949
10 and 20 pull requests a day it's not

00:03:26,409 --> 00:03:32,919
unusual for us to merge between 1,000

00:03:29,949 --> 00:03:36,639
and 5,000 lines of code a day we have

00:03:32,919 --> 00:03:37,840
about 2000 active contributors this this

00:03:36,639 --> 00:03:41,379
that's a little bit old I think we're

00:03:37,840 --> 00:03:45,159
just coming up over 90,000 commits salt

00:03:41,379 --> 00:03:48,280
is the technology behind stuff like SUSE

00:03:45,159 --> 00:03:50,199
manager for example it started out in

00:03:48,280 --> 00:03:51,519
the early days of kubernetes is being

00:03:50,199 --> 00:03:56,500
under the hood at kubernetes it's not

00:03:51,519 --> 00:03:57,760
anymore but runs some of the largest

00:03:56,500 --> 00:04:00,790
infrastructure in the world that's

00:03:57,760 --> 00:04:05,019
places like LinkedIn and IBM cloud other

00:04:00,790 --> 00:04:08,439
places like that so let's dive into the

00:04:05,019 --> 00:04:11,650
the way that that salt operates right

00:04:08,439 --> 00:04:13,659
out of the box so what salt does is it

00:04:11,650 --> 00:04:16,090
has what we call a master minion

00:04:13,659 --> 00:04:18,010
topology which is just a fancy sort of

00:04:16,090 --> 00:04:20,769
branded way of saying it's a

00:04:18,010 --> 00:04:22,780
client-server topology so we have

00:04:20,769 --> 00:04:26,139
machines which are called masters

00:04:22,780 --> 00:04:29,050
masters are the controlling machines and

00:04:26,139 --> 00:04:30,969
the machines which are under control the

00:04:29,050 --> 00:04:33,099
manage machines are known in salt

00:04:30,969 --> 00:04:35,020
nomenclature as minions if you've ever

00:04:33,099 --> 00:04:35,900
seen the movie Despicable Me this will

00:04:35,020 --> 00:04:38,810
start to

00:04:35,900 --> 00:04:41,600
very familiar to you masters and minions

00:04:38,810 --> 00:04:43,910
by default maintain a persistent

00:04:41,600 --> 00:04:46,310
connection to each other that connection

00:04:43,910 --> 00:04:48,830
takes place over two TCP ports by

00:04:46,310 --> 00:04:51,770
default they come inbound to the master

00:04:48,830 --> 00:04:54,979
from the minion and they mayn't they

00:04:51,770 --> 00:04:58,490
stay up for the lifetime of the minion

00:04:54,979 --> 00:05:00,169
process and so typically that can be you

00:04:58,490 --> 00:05:02,090
know many days or many weeks or what

00:05:00,169 --> 00:05:06,259
have you really until the minion process

00:05:02,090 --> 00:05:08,120
itself restarts for some reason but the

00:05:06,259 --> 00:05:11,090
connection between the master and the

00:05:08,120 --> 00:05:13,910
minions has a logical entity that we

00:05:11,090 --> 00:05:17,949
call the salt eventbus the salt eventbus

00:05:13,910 --> 00:05:21,440
is built on top of a transport using the

00:05:17,949 --> 00:05:23,600
open source messaging project called 0

00:05:21,440 --> 00:05:25,789
mq all right it's a high speed message

00:05:23,600 --> 00:05:28,520
queue it's designed for large

00:05:25,789 --> 00:05:29,960
infrastructures that need to push many

00:05:28,520 --> 00:05:33,740
thousands or tens of thousands of

00:05:29,960 --> 00:05:36,590
messages a second across a bus and so in

00:05:33,740 --> 00:05:40,550
this topology this is effectively

00:05:36,590 --> 00:05:43,820
pub/sub and so the master publishes

00:05:40,550 --> 00:05:45,530
messages to the minion that may you know

00:05:43,820 --> 00:05:48,620
ask the minion to do some work to apply

00:05:45,530 --> 00:05:52,760
some configuration to perform some other

00:05:48,620 --> 00:05:55,099
actions it does this all at once right

00:05:52,760 --> 00:05:57,919
so this publication can be instantaneous

00:05:55,099 --> 00:06:00,710
to all connected minions and when I say

00:05:57,919 --> 00:06:02,870
all connected minions this scale is

00:06:00,710 --> 00:06:06,280
quite a bit it's very common for us to

00:06:02,870 --> 00:06:09,860
see minions connected to the master

00:06:06,280 --> 00:06:12,590
10,000 20,000 50,000 machines connected

00:06:09,860 --> 00:06:15,199
to a single master so this gives us the

00:06:12,590 --> 00:06:17,750
capability to address a large number of

00:06:15,199 --> 00:06:21,320
machines and to send commands to these

00:06:17,750 --> 00:06:24,470
machines effectively simultaneously have

00:06:21,320 --> 00:06:26,870
them do some work and then report the

00:06:24,470 --> 00:06:30,860
results of that work back to the master

00:06:26,870 --> 00:06:33,409
across the event bus so salt gets like

00:06:30,860 --> 00:06:35,630
lumped in with like I said chef and

00:06:33,409 --> 00:06:37,010
puppet and ansible a lot of the time but

00:06:35,630 --> 00:06:39,260
one of the stories that I like to tell

00:06:37,010 --> 00:06:41,720
is that configuration management is not

00:06:39,260 --> 00:06:44,210
the problem that we originally set out

00:06:41,720 --> 00:06:48,469
to solve so if you'll indulge me with a

00:06:44,210 --> 00:06:49,880
quick story when we started salt the

00:06:48,469 --> 00:06:52,490
problem that we wanted to

00:06:49,880 --> 00:06:54,980
to solve was essentially remote

00:06:52,490 --> 00:06:57,320
execution right we wanted to be able to

00:06:54,980 --> 00:06:59,930
say okay we've got ten thousand machines

00:06:57,320 --> 00:07:01,460
and we want to be able to run command

00:06:59,930 --> 00:07:04,070
such-and-such on all of these machines

00:07:01,460 --> 00:07:07,250
at once and we did this and so we built

00:07:04,070 --> 00:07:10,340
out salt to do this and that worked

00:07:07,250 --> 00:07:11,570
really well and about a year later the

00:07:10,340 --> 00:07:13,100
community that started to form around

00:07:11,570 --> 00:07:14,480
salt came back and said you know we

00:07:13,100 --> 00:07:17,210
could put configuration management on

00:07:14,480 --> 00:07:20,360
top of this and we said okay well we'll

00:07:17,210 --> 00:07:22,700
do that and it was about that time that

00:07:20,360 --> 00:07:24,050
that LinkedIn called us out of the blue

00:07:22,700 --> 00:07:28,150
and said yeah we're using salt in

00:07:24,050 --> 00:07:31,090
production we said oh wow really cool

00:07:28,150 --> 00:07:35,210
that was that was a great surprise to us

00:07:31,090 --> 00:07:37,160
but the point of this story is that we

00:07:35,210 --> 00:07:39,500
see again automation is a first-class

00:07:37,160 --> 00:07:42,320
citizen but configuration management as

00:07:39,500 --> 00:07:44,420
a service that exists inside the

00:07:42,320 --> 00:07:47,090
automation ecosystem configuration

00:07:44,420 --> 00:07:49,070
management is what does the heavy

00:07:47,090 --> 00:07:52,430
lifting what gets these parts to move

00:07:49,070 --> 00:07:54,200
but automation is a much more robust

00:07:52,430 --> 00:07:56,060
problem than simply configuration

00:07:54,200 --> 00:07:58,370
management so when you look at salt

00:07:56,060 --> 00:08:00,830
there are four main areas that we try to

00:07:58,370 --> 00:08:03,530
address all right the first is remote

00:08:00,830 --> 00:08:05,630
execution right which is basically okay

00:08:03,530 --> 00:08:07,670
send a command out to a bunch of minions

00:08:05,630 --> 00:08:10,160
have them do this work and have them

00:08:07,670 --> 00:08:13,280
send the results back that's really

00:08:10,160 --> 00:08:15,200
simple now one of the the debates that

00:08:13,280 --> 00:08:18,170
you hear in this space a lot of the time

00:08:15,200 --> 00:08:21,200
is the debate between agent based and

00:08:18,170 --> 00:08:23,480
agent less approaches right so you know

00:08:21,200 --> 00:08:26,060
to name names right the our friends at

00:08:23,480 --> 00:08:28,010
ansible like to talk about an agentless

00:08:26,060 --> 00:08:31,430
approach right where an agent doesn't

00:08:28,010 --> 00:08:33,500
sit out on the remote end it just has an

00:08:31,430 --> 00:08:35,630
SSH daemon which I would point out to

00:08:33,500 --> 00:08:36,070
them is in fact an agent but never mind

00:08:35,630 --> 00:08:39,890
that

00:08:36,070 --> 00:08:43,610
and so in an agentless approach what

00:08:39,890 --> 00:08:46,850
happens is your configuration management

00:08:43,610 --> 00:08:48,920
system goes out connects to SSH deploys

00:08:46,850 --> 00:08:50,570
a little bit of code does the requested

00:08:48,920 --> 00:08:51,710
work and then Terry sits connection down

00:08:50,570 --> 00:08:54,650
and you don't have a persistent

00:08:51,710 --> 00:08:56,690
connection there in an agent based

00:08:54,650 --> 00:08:58,220
approach obviously you have a daemon on

00:08:56,690 --> 00:08:59,900
the remote end that demon is

00:08:58,220 --> 00:09:03,139
consistently listening consistently

00:08:59,900 --> 00:09:06,199
connected upstream and is

00:09:03,139 --> 00:09:07,519
a bit more performance now salt supports

00:09:06,199 --> 00:09:10,309
both approaches

00:09:07,519 --> 00:09:13,100
it is both agent-based and agentless if

00:09:10,309 --> 00:09:15,259
you want to use the approach where

00:09:13,100 --> 00:09:16,759
you've don't need an agent on the remote

00:09:15,259 --> 00:09:19,429
machine and you just want to use SSH

00:09:16,759 --> 00:09:24,799
cool if you want an agent based approach

00:09:19,429 --> 00:09:27,319
also cool so for those of us who are

00:09:24,799 --> 00:09:30,679
Python programmers salt tries to take an

00:09:27,319 --> 00:09:33,829
extremely pythonic approach to the way

00:09:30,679 --> 00:09:35,660
we handle things and I'll show you this

00:09:33,829 --> 00:09:40,519
in a minute when I get into demo because

00:09:35,660 --> 00:09:42,139
I have a weird form of dyslexia where I

00:09:40,519 --> 00:09:45,919
can't remember anything that was

00:09:42,139 --> 00:09:49,369
presented in PowerPoint but with salt

00:09:45,919 --> 00:09:52,040
you can address the remote execution

00:09:49,369 --> 00:09:53,779
commands that you want just by giving a

00:09:52,040 --> 00:09:56,209
module name and a function name and I'll

00:09:53,779 --> 00:09:57,799
show you how this corresponds to the way

00:09:56,209 --> 00:10:00,859
that we've laid out the software in just

00:09:57,799 --> 00:10:02,839
a moment so the second area of course is

00:10:00,859 --> 00:10:03,829
configuration management we should all

00:10:02,839 --> 00:10:05,089
be fairly familiar with what

00:10:03,829 --> 00:10:07,399
configuration management is

00:10:05,089 --> 00:10:11,860
configuration management essentially is

00:10:07,399 --> 00:10:15,110
this idea that we can send idempotent

00:10:11,860 --> 00:10:18,290
commands to a machine and say for

00:10:15,110 --> 00:10:20,509
example ok machine X make sure that

00:10:18,290 --> 00:10:21,679
package Y is installed right

00:10:20,509 --> 00:10:24,019
and so when you're configuration

00:10:21,679 --> 00:10:26,179
management engine goes out there it goes

00:10:24,019 --> 00:10:28,069
it looks at the machine it checks to

00:10:26,179 --> 00:10:30,049
make sure to check to checks to see if

00:10:28,069 --> 00:10:32,179
the package is installed if it is

00:10:30,049 --> 00:10:34,369
installed it does nothing if it's not

00:10:32,179 --> 00:10:35,809
installed then it goes and it figures

00:10:34,369 --> 00:10:37,850
out how to install the package so that

00:10:35,809 --> 00:10:41,179
we're not just doing the same work again

00:10:37,850 --> 00:10:42,939
and again again in a procedural way so

00:10:41,179 --> 00:10:46,549
our configuration management system

00:10:42,939 --> 00:10:47,989
looks very similar to other modern

00:10:46,549 --> 00:10:50,480
configuration management systems I'll

00:10:47,989 --> 00:10:54,169
show you a demo of this in a minute but

00:10:50,480 --> 00:10:57,009
by default the way that we describe the

00:10:54,169 --> 00:10:59,389
configuration of a system is in gamal

00:10:57,009 --> 00:11:01,369
for those of you who aren't too familiar

00:10:59,389 --> 00:11:03,319
with llamo I will explain everything you

00:11:01,369 --> 00:11:05,720
need to know about llamo in 10 seconds

00:11:03,319 --> 00:11:07,459
so time okay ready if you see a colon

00:11:05,720 --> 00:11:10,039
it's a key value pair if you see a -

00:11:07,459 --> 00:11:14,899
it's a list indentation represents

00:11:10,039 --> 00:11:16,009
membership done right that's all you

00:11:14,899 --> 00:11:16,970
need to know about llamo if you

00:11:16,009 --> 00:11:21,259
remembered those three

00:11:16,970 --> 00:11:24,160
rulz you'll be set and so as you can see

00:11:21,259 --> 00:11:27,920
in this example this shows what we call

00:11:24,160 --> 00:11:30,800
states we have two states here the very

00:11:27,920 --> 00:11:34,279
top indicates that there's a state

00:11:30,800 --> 00:11:35,930
called Apache package we have a packaged

00:11:34,279 --> 00:11:38,509
state we say the package needs to be

00:11:35,930 --> 00:11:41,209
installed and we say that the service

00:11:38,509 --> 00:11:43,399
needs to be running one thing that's

00:11:41,209 --> 00:11:48,709
important to note here down on I believe

00:11:43,399 --> 00:11:50,720
that is line eight is that gentleman

00:11:48,709 --> 00:11:52,850
described earlier how ansible is really

00:11:50,720 --> 00:11:54,500
easy to use because it effectively just

00:11:52,850 --> 00:11:56,149
runs in order right and you don't have

00:11:54,500 --> 00:11:59,269
to deal with this complex requisite

00:11:56,149 --> 00:12:02,060
system again salt takes both approaches

00:11:59,269 --> 00:12:04,819
by default it's exactly the same way

00:12:02,060 --> 00:12:07,069
it's procedural it does ABCD exactly how

00:12:04,819 --> 00:12:09,649
you lay them out all right so it's very

00:12:07,069 --> 00:12:12,050
easy out of the box but it also has a

00:12:09,649 --> 00:12:14,839
complex requisite grammar which allows

00:12:12,050 --> 00:12:17,959
you to create dependencies if you want

00:12:14,839 --> 00:12:20,990
to and those dependencies can be as

00:12:17,959 --> 00:12:24,230
simple as ensuring something is required

00:12:20,990 --> 00:12:29,180
so a requires B it can do things like

00:12:24,230 --> 00:12:34,490
say okay do be if a reports changes

00:12:29,180 --> 00:12:36,860
things of that nature so the the third

00:12:34,490 --> 00:12:40,009
area is the event system and that's what

00:12:36,860 --> 00:12:42,259
I'm going to focus on primarily today on

00:12:40,009 --> 00:12:44,389
this event bus that I described between

00:12:42,259 --> 00:12:47,449
the Masters and the minions all of these

00:12:44,389 --> 00:12:49,939
events continually flow from requests

00:12:47,449 --> 00:12:52,730
for these minions to perform particular

00:12:49,939 --> 00:12:55,790
bits of work to returns which is

00:12:52,730 --> 00:12:59,740
information about the work but the

00:12:55,790 --> 00:13:03,170
interesting thing and with salt is that

00:12:59,740 --> 00:13:05,449
you can configure a salt master such

00:13:03,170 --> 00:13:08,689
that when it hears about particular

00:13:05,449 --> 00:13:11,779
events it knows what actions to take

00:13:08,689 --> 00:13:13,069
right and we'll look at a demo of that

00:13:11,779 --> 00:13:15,040
in a minute

00:13:13,069 --> 00:13:18,800
so that could be things like for example

00:13:15,040 --> 00:13:21,319
let's say you have a CI CD system right

00:13:18,800 --> 00:13:23,600
you could emit events on to the salt

00:13:21,319 --> 00:13:26,569
event bus about what's happening your CI

00:13:23,600 --> 00:13:28,610
CD system and you can configure your

00:13:26,569 --> 00:13:30,450
salt nodes to react to those events

00:13:28,610 --> 00:13:33,660
right so you could say okay

00:13:30,450 --> 00:13:36,390
that way okay BAM a deploy event hits

00:13:33,660 --> 00:13:38,100
the bus and everybody sees that message

00:13:36,390 --> 00:13:41,070
and they know immediately what to do

00:13:38,100 --> 00:13:43,230
which both gives you this common bus on

00:13:41,070 --> 00:13:46,650
which to transmit these messages but

00:13:43,230 --> 00:13:48,330
also a really simple way to reason about

00:13:46,650 --> 00:13:49,920
this stuff so instead of connecting all

00:13:48,330 --> 00:13:51,810
these disparity api's you're creating

00:13:49,920 --> 00:13:54,270
some sort of complex service mesh you

00:13:51,810 --> 00:13:57,420
can just say okay look for event X and

00:13:54,270 --> 00:13:59,910
then perform action Y we'll see how that

00:13:57,420 --> 00:14:06,420
works in a moment the last piece is

00:13:59,910 --> 00:14:08,130
cloud management so salt has a a a piece

00:14:06,420 --> 00:14:10,020
of software that allows you to provision

00:14:08,130 --> 00:14:11,520
containers to provision into private

00:14:10,020 --> 00:14:14,070
clouds to provision into public clouds

00:14:11,520 --> 00:14:17,070
to provision on to bare metal so on and

00:14:14,070 --> 00:14:20,970
so forth right so those are the four

00:14:17,070 --> 00:14:22,940
main pieces with that I kind of like I

00:14:20,970 --> 00:14:25,020
said want to get away from slides and

00:14:22,940 --> 00:14:28,470
actually look at code which i think is

00:14:25,020 --> 00:14:36,090
far more interesting okay let's big if I

00:14:28,470 --> 00:14:38,190
that cool okay so and if I skip over any

00:14:36,090 --> 00:14:39,960
of this stuff in a way that is not

00:14:38,190 --> 00:14:42,000
satisfying to you please like raise your

00:14:39,960 --> 00:14:43,680
hand and call out and tell me to slow

00:14:42,000 --> 00:14:46,980
down or what-have-you

00:14:43,680 --> 00:14:51,720
so let's take a look so I'm gonna do

00:14:46,980 --> 00:14:53,940
this you know because it's 4:15 in the

00:14:51,720 --> 00:14:56,250
afternoon we'll make this spicy and do

00:14:53,940 --> 00:14:58,650
it from the develop branch so we'll see

00:14:56,250 --> 00:15:02,280
how how well my developers have been

00:14:58,650 --> 00:15:23,040
behaving today so let's do something

00:15:02,280 --> 00:15:29,630
like how about how about we don't do

00:15:23,040 --> 00:15:33,480
this okay so I wanted to first show you

00:15:29,630 --> 00:15:36,240
the remote execution framework salt

00:15:33,480 --> 00:15:40,800
ships with a large number of remote

00:15:36,240 --> 00:15:44,370
execution modules and those do all kinds

00:15:40,800 --> 00:15:46,470
of things but the main point about

00:15:44,370 --> 00:15:48,990
them is that they can abstract away the

00:15:46,470 --> 00:15:51,240
differences between systems the nice

00:15:48,990 --> 00:15:53,550
thing about this is that execution

00:15:51,240 --> 00:15:56,010
modules if you know any Python at all

00:15:53,550 --> 00:15:58,529
and even if you don't are exceedingly

00:15:56,010 --> 00:16:01,980
easy to write and exceedingly easy to

00:15:58,529 --> 00:16:07,980
use so let me show you our test module

00:16:01,980 --> 00:16:09,960
here alright it's literally as easy as

00:16:07,980 --> 00:16:11,640
this so you see for example here's a

00:16:09,960 --> 00:16:13,380
Python function it's called echo it

00:16:11,640 --> 00:16:16,230
takes an argument called text it returns

00:16:13,380 --> 00:16:18,230
text right so that should be hopefully

00:16:16,230 --> 00:16:22,500
totally obvious to everybody in here

00:16:18,230 --> 00:16:26,160
that maps into our remote execution

00:16:22,500 --> 00:16:28,770
framework it's just like this all right

00:16:26,160 --> 00:16:30,330
so you can see we have you know test

00:16:28,770 --> 00:16:31,589
which is the name of the Python module

00:16:30,330 --> 00:16:33,920
echo which is the name of the function

00:16:31,589 --> 00:16:37,380
and then an argument that we pass in and

00:16:33,920 --> 00:16:40,470
we are off to the races so I wanted to

00:16:37,380 --> 00:16:43,800
show you two that we talked about this

00:16:40,470 --> 00:16:53,880
agent based versus agent less approach

00:16:43,800 --> 00:16:56,700
to things okay oops let's see okay so if

00:16:53,880 --> 00:17:00,140
we do something like salt SSH all right

00:16:56,700 --> 00:17:08,850
then I'll do this with the debug flag

00:17:00,140 --> 00:17:11,699
okay so what this is saying is okay from

00:17:08,850 --> 00:17:13,650
my local machine we're going to connect

00:17:11,699 --> 00:17:16,290
to this remote server run a remote

00:17:13,650 --> 00:17:19,770
execution command and return the results

00:17:16,290 --> 00:17:22,050
back to us so there we go we're off to

00:17:19,770 --> 00:17:25,650
the races and there are our results just

00:17:22,050 --> 00:17:27,600
like that so the nice thing there is

00:17:25,650 --> 00:17:29,160
that you know obviously we're just doing

00:17:27,600 --> 00:17:30,540
a demo with one machine we could do this

00:17:29,160 --> 00:17:34,290
with a hundred machines what have you

00:17:30,540 --> 00:17:36,570
the configuration for that looks like

00:17:34,290 --> 00:17:39,630
this all right

00:17:36,570 --> 00:17:40,890
don't nobody log into this and do

00:17:39,630 --> 00:17:44,309
terrible things because there's a

00:17:40,890 --> 00:17:46,380
password sitting there but it's super

00:17:44,309 --> 00:17:49,730
straightforward right host names users

00:17:46,380 --> 00:17:53,670
passwords to connect to remote machines

00:17:49,730 --> 00:17:55,800
so that's all super straightforward now

00:17:53,670 --> 00:17:57,390
let's look at something a little bit

00:17:55,800 --> 00:18:01,860
more interesting

00:17:57,390 --> 00:18:04,290
which would be the configuration

00:18:01,860 --> 00:18:06,090
management side of things okay

00:18:04,290 --> 00:18:09,360
I mentioned that our configuration

00:18:06,090 --> 00:18:11,070
management syntax what is that sorry

00:18:09,360 --> 00:18:12,960
I thought somebody said something our

00:18:11,070 --> 00:18:15,480
configuration management syntax is by

00:18:12,960 --> 00:18:17,580
default is yamo if you don't like Gamal

00:18:15,480 --> 00:18:20,250
you can use JSON from Salt's perspective

00:18:17,580 --> 00:18:22,950
we're just ingesting data and in fact if

00:18:20,250 --> 00:18:24,690
you want to write your own serializer or

00:18:22,950 --> 00:18:27,210
you want to use a different serializer

00:18:24,690 --> 00:18:29,970
if you like the dsl way of doing things

00:18:27,210 --> 00:18:31,919
we have pi DSL as long as you ship salt

00:18:29,970 --> 00:18:35,910
a data structure we're good like we

00:18:31,919 --> 00:18:39,960
don't really even care but like I said

00:18:35,910 --> 00:18:41,940
it's yamo by default so here is how

00:18:39,960 --> 00:18:45,000
simple that configuration management

00:18:41,940 --> 00:18:48,480
syntax looks on the top line we give it

00:18:45,000 --> 00:18:50,940
an arbitrary name and then we give it

00:18:48,480 --> 00:18:54,690
the using the same type of syntax this

00:18:50,940 --> 00:18:56,549
dotted notation the state module that we

00:18:54,690 --> 00:18:59,100
want to use and the function that we

00:18:56,549 --> 00:19:04,500
want to use here we call this file dot

00:18:59,100 --> 00:19:06,090
managed so if we go to the state's

00:19:04,500 --> 00:19:07,860
directory and of course this all has you

00:19:06,090 --> 00:19:09,299
know HTML public documentation I just

00:19:07,860 --> 00:19:13,290
like to show you the code because I

00:19:09,299 --> 00:19:17,940
think it's more interesting here's this

00:19:13,290 --> 00:19:21,030
right and it's exactly the same idea

00:19:17,940 --> 00:19:22,140
we're accepting arguments and keyword

00:19:21,030 --> 00:19:24,720
arguments of course all the

00:19:22,140 --> 00:19:26,580
documentation is here right and that

00:19:24,720 --> 00:19:31,169
those arguments and those keyword

00:19:26,580 --> 00:19:35,299
arguments map directly into this state

00:19:31,169 --> 00:19:35,299
file oops

00:19:35,630 --> 00:19:42,030
like this so what this is saying here is

00:19:40,410 --> 00:19:46,380
basically okay we want to write out a

00:19:42,030 --> 00:19:48,270
file to the system excuse me we want to

00:19:46,380 --> 00:19:49,890
template eyes this file using the

00:19:48,270 --> 00:19:53,549
template that we're here calling secret

00:19:49,890 --> 00:19:56,669
file we want to send it to tempt foo and

00:19:53,549 --> 00:19:58,110
we want to use a ginger template this is

00:19:56,669 --> 00:20:00,470
really similar to other configuration

00:19:58,110 --> 00:20:04,740
management systems so if you look at

00:20:00,470 --> 00:20:08,130
secret file salt also has a secret

00:20:04,740 --> 00:20:10,620
system where the master can control a

00:20:08,130 --> 00:20:13,650
set of key value pairs

00:20:10,620 --> 00:20:16,200
and it can segment which connected

00:20:13,650 --> 00:20:18,030
minions have which have access to which

00:20:16,200 --> 00:20:20,790
key value pairs we don't need to get

00:20:18,030 --> 00:20:22,970
into that but it's really easy to do and

00:20:20,790 --> 00:20:26,160
that system is called the pillar alright

00:20:22,970 --> 00:20:27,570
incidentally again - you know tip our

00:20:26,160 --> 00:20:28,830
hat to our friends at Hoshi Corp if you

00:20:27,570 --> 00:20:31,050
want to use something like vault that

00:20:28,830 --> 00:20:34,440
can be just be dropped in to salt and

00:20:31,050 --> 00:20:36,300
you can use it there just as easily but

00:20:34,440 --> 00:20:39,870
anyway you can see here that we're just

00:20:36,300 --> 00:20:43,940
template izing something that comes from

00:20:39,870 --> 00:20:48,090
the pillar all right there it is right

00:20:43,940 --> 00:20:50,540
fubar and so we template eyes that into

00:20:48,090 --> 00:20:50,540
this file

00:20:50,720 --> 00:20:54,510
oops

00:20:52,590 --> 00:20:58,530
using Jinja and then we're off to the

00:20:54,510 --> 00:21:04,410
races so again if we do something I'm

00:20:58,530 --> 00:21:06,809
just applying this locally okay here

00:21:04,410 --> 00:21:09,809
we're calling state s LS so we're

00:21:06,809 --> 00:21:12,480
calling the state execution module the

00:21:09,809 --> 00:21:17,220
SLS function which basically says okay

00:21:12,480 --> 00:21:19,080
salt run use the state execution module

00:21:17,220 --> 00:21:23,280
to initiate the configuration management

00:21:19,080 --> 00:21:26,670
engine using and pass it the file the

00:21:23,280 --> 00:21:31,290
state file demo and there we go and

00:21:26,670 --> 00:21:32,610
there's temp - and just like that so one

00:21:31,290 --> 00:21:35,580
thing that's very important to us is

00:21:32,610 --> 00:21:36,960
that not only is do we believe the

00:21:35,580 --> 00:21:38,010
transport should be very fast but we

00:21:36,960 --> 00:21:40,559
also believe the configuration

00:21:38,010 --> 00:21:42,420
management engine should be very fast as

00:21:40,559 --> 00:21:44,850
you can see here it did this in 51

00:21:42,420 --> 00:21:47,280
milliseconds you'll notice that if you

00:21:44,850 --> 00:21:49,890
build out salt states with a complex

00:21:47,280 --> 00:21:51,600
series of requisites salt does a really

00:21:49,890 --> 00:21:54,660
really good job of compiling those

00:21:51,600 --> 00:21:56,940
requisites down to an order tree very

00:21:54,660 --> 00:21:59,250
very quickly I don't have a demo of that

00:21:56,940 --> 00:22:01,190
but you can trust me or we can you know

00:21:59,250 --> 00:22:04,800
look at it together later if you like

00:22:01,190 --> 00:22:06,840
so anyway that's something like the

00:22:04,800 --> 00:22:08,429
configuration management engine now what

00:22:06,840 --> 00:22:10,470
I wanted to show you that I think is a

00:22:08,429 --> 00:22:13,710
little bit more interesting if you'll

00:22:10,470 --> 00:22:17,130
indulge me I put up a couple of machines

00:22:13,710 --> 00:22:20,550
here and I talked about this event

00:22:17,130 --> 00:22:23,730
driven model in which we can emit events

00:22:20,550 --> 00:22:24,480
across the salt event bus and then we

00:22:23,730 --> 00:22:28,049
can

00:22:24,480 --> 00:22:31,020
to those events to do certain things so

00:22:28,049 --> 00:22:33,510
I've got two machines here this first

00:22:31,020 --> 00:22:35,429
machine this is called MP demo has both

00:22:33,510 --> 00:22:38,730
a master and a minion on it and I want

00:22:35,429 --> 00:22:43,049
to walk through a little example that I

00:22:38,730 --> 00:22:45,059
put together this morning and so I was

00:22:43,049 --> 00:22:47,850
imagining okay let's say we have a

00:22:45,059 --> 00:22:50,130
problem do you guys remember failed to

00:22:47,850 --> 00:22:55,950
ban like don't of you like run that in

00:22:50,130 --> 00:22:57,179
production still okay so so imagine your

00:22:55,950 --> 00:23:00,000
boss comes to you and it's like okay our

00:22:57,179 --> 00:23:01,620
problem for today is and I'm not saying

00:23:00,000 --> 00:23:02,910
this is a real problem it's an imaginary

00:23:01,620 --> 00:23:06,059
problem I made it up

00:23:02,910 --> 00:23:09,059
so don't actually like do what I'm about

00:23:06,059 --> 00:23:10,799
to do in production don't do it anyway

00:23:09,059 --> 00:23:12,330
say your imaginary boss comes to you and

00:23:10,799 --> 00:23:17,460
he's like okay our imaginary problem for

00:23:12,330 --> 00:23:19,110
today is that we want to we want to do

00:23:17,460 --> 00:23:21,299
something like fail to ban but we want

00:23:19,110 --> 00:23:22,590
to build this like crazy distributed

00:23:21,299 --> 00:23:27,419
firewall and the way it's going to work

00:23:22,590 --> 00:23:29,220
is that anytime somebody attempts to SSH

00:23:27,419 --> 00:23:30,750
to one of our machines that for weird

00:23:29,220 --> 00:23:33,840
reasons are open to the Internet but

00:23:30,750 --> 00:23:36,840
anyway imaginary story anytime somebody

00:23:33,840 --> 00:23:39,780
SSH is to one of our machines and gets

00:23:36,840 --> 00:23:42,840
the login incorrect what we want to do

00:23:39,780 --> 00:23:46,559
is we want to add that source IP address

00:23:42,840 --> 00:23:47,220
to an IP tables rule but here's the

00:23:46,559 --> 00:23:51,900
tricky part

00:23:47,220 --> 00:23:54,390
we want to add that anytime somebody

00:23:51,900 --> 00:23:56,250
hits machine a and we detect that we

00:23:54,390 --> 00:23:58,350
want to add that firewall rule to our

00:23:56,250 --> 00:24:00,480
whole fleet of 10,000 machines all at

00:23:58,350 --> 00:24:02,130
the same time so you're like okay cool

00:24:00,480 --> 00:24:03,570
and you start to think about how how you

00:24:02,130 --> 00:24:05,760
might do this well I'm going to show you

00:24:03,570 --> 00:24:07,470
how we can do something like that like

00:24:05,760 --> 00:24:11,400
an event-driven automation approach in

00:24:07,470 --> 00:24:12,140
Sault in about 15 lines of code okay

00:24:11,400 --> 00:24:15,410
here we go

00:24:12,140 --> 00:24:19,740
so the first thing we're gonna do is

00:24:15,410 --> 00:24:21,419
we're gonna look at the master and we've

00:24:19,740 --> 00:24:25,740
got a really simple configuration here

00:24:21,419 --> 00:24:29,520
for the reactor so salt ships with a

00:24:25,740 --> 00:24:33,440
system called the beacon system and what

00:24:29,520 --> 00:24:37,169
the beacon system does is it can check a

00:24:33,440 --> 00:24:38,309
machine for some condition right in a

00:24:37,169 --> 00:24:40,320
fairly tight loop

00:24:38,309 --> 00:24:43,379
and if it detects this condition

00:24:40,320 --> 00:24:47,009
happening then it will simply emit an

00:24:43,379 --> 00:24:49,859
event on to the event bus right that the

00:24:47,009 --> 00:24:52,710
master can hear and if the map then the

00:24:49,859 --> 00:24:57,389
reactor system if it hears that event it

00:24:52,710 --> 00:25:01,619
can respond by well running a reaction

00:24:57,389 --> 00:25:04,499
okay so what we've done here is we have

00:25:01,619 --> 00:25:06,599
told the master okay if you hear

00:25:04,499 --> 00:25:10,019
anything on the event bus that matches

00:25:06,599 --> 00:25:11,580
this tag right salt beacon demo machine

00:25:10,019 --> 00:25:16,919
you can use globs in here oh it's being

00:25:11,580 --> 00:25:20,940
lazy from the beacon be temp then react

00:25:16,919 --> 00:25:24,479
to that by running react SLS right super

00:25:20,940 --> 00:25:27,389
simple okay so let's look at what's in

00:25:24,479 --> 00:25:28,919
react up SLS this basically just says

00:25:27,389 --> 00:25:30,929
okay what this is going to do is we're

00:25:28,919 --> 00:25:35,219
gonna react to a fail login by ensuring

00:25:30,929 --> 00:25:37,589
compliance everywhere okay here all

00:25:35,219 --> 00:25:39,690
right I was being lazy but this could be

00:25:37,589 --> 00:25:42,659
something like this which would

00:25:39,690 --> 00:25:44,879
basically say okay so we know that if

00:25:42,659 --> 00:25:47,009
the reactor hears this tag on the event

00:25:44,879 --> 00:25:49,259
bus we're going to run this reaction and

00:25:47,009 --> 00:25:51,269
this reaction is going to be we're going

00:25:49,259 --> 00:25:52,559
to apply the state everywhere

00:25:51,269 --> 00:25:54,389
all right I'll change this back to demo

00:25:52,559 --> 00:25:56,969
machine real quick just for the purposes

00:25:54,389 --> 00:25:59,339
of a demo we're going to run this state

00:25:56,969 --> 00:26:02,089
we're going to give it the argument of

00:25:59,339 --> 00:26:05,099
the state that we want to apply and

00:26:02,089 --> 00:26:07,379
we're going to give it some information

00:26:05,099 --> 00:26:11,190
to template eyes which will be the host

00:26:07,379 --> 00:26:15,029
name that comes in from the beacon okay

00:26:11,190 --> 00:26:18,960
and so the last piece would be something

00:26:15,029 --> 00:26:22,229
like this which is basically just a

00:26:18,960 --> 00:26:26,369
regular salt state file and all this

00:26:22,229 --> 00:26:29,879
says is okay apply the IP table State

00:26:26,369 --> 00:26:37,969
the function append and simply go ahead

00:26:29,879 --> 00:26:40,589
and ingest this as the source okay so

00:26:37,969 --> 00:26:44,779
now here comes the part where we learn

00:26:40,589 --> 00:26:49,200
if I will be embarrassed or not okay

00:26:44,779 --> 00:26:50,129
okay so basically we have no IP tables

00:26:49,200 --> 00:26:52,490
rules here

00:26:50,129 --> 00:26:59,400
let's go ahead

00:26:52,490 --> 00:27:01,620
and its tail the law it's so much harder

00:26:59,400 --> 00:27:09,510
to type in there like 50 people in front

00:27:01,620 --> 00:27:16,620
of you okay and let's get the password

00:27:09,510 --> 00:27:20,520
wrong and okay so what happened was that

00:27:16,620 --> 00:27:23,640
minion had a beacon which was watching

00:27:20,520 --> 00:27:26,880
var log be temp detected that a failed

00:27:23,640 --> 00:27:29,210
login happened emitted that event on the

00:27:26,880 --> 00:27:31,560
event bus back to the master the master

00:27:29,210 --> 00:27:34,440
noticed that event noticed that it had a

00:27:31,560 --> 00:27:37,020
registered reaction to it that reaction

00:27:34,440 --> 00:27:40,080
said okay any time you hear this event

00:27:37,020 --> 00:27:43,920
then go ahead and target this set of

00:27:40,080 --> 00:27:46,200
minions and apply this state with the

00:27:43,920 --> 00:27:50,250
given data where the given data is the

00:27:46,200 --> 00:27:55,920
host name of the attacker right so now

00:27:50,250 --> 00:28:07,350
all right we have done it so of course

00:27:55,920 --> 00:28:08,640
if we change this to okay so now just to

00:28:07,350 --> 00:28:11,220
prove that we could do this across

00:28:08,640 --> 00:28:15,300
multiple machines here's the second

00:28:11,220 --> 00:28:19,470
machine connected to that same master if

00:28:15,300 --> 00:28:27,510
we change this so that the target is all

00:28:19,470 --> 00:28:30,530
machines we have now done cell let's run

00:28:27,510 --> 00:28:30,530
our little attack again

00:28:32,330 --> 00:28:37,290
and we have done it on the second

00:28:34,500 --> 00:28:41,190
machine so that's a really really simple

00:28:37,290 --> 00:28:44,040
sort of very contrived example of how

00:28:41,190 --> 00:28:47,940
you can implement an event-driven policy

00:28:44,040 --> 00:28:50,130
using salt to build what is you know

00:28:47,940 --> 00:28:54,270
would be considerably more difficult to

00:28:50,130 --> 00:28:55,980
build in in perhaps another way so in

00:28:54,270 --> 00:28:57,120
terms of my presentation that's pretty

00:28:55,980 --> 00:28:58,890
much all I have

00:28:57,120 --> 00:29:01,770
I am certainly happy to take questions

00:28:58,890 --> 00:29:03,600
or to talk about parts of the salt

00:29:01,770 --> 00:29:05,100
ecosystem that I didn't cover or our

00:29:03,600 --> 00:29:07,140
parts that I did cover which main

00:29:05,100 --> 00:29:21,299
been entirely clear so I don't thank

00:29:07,140 --> 00:29:23,309
some questions hello hello sorry you

00:29:21,299 --> 00:29:24,960
probably mentioned that but it's getting

00:29:23,309 --> 00:29:28,410
a little late but for this beacon thing

00:29:24,960 --> 00:29:30,750
to work yes who the minions have to run

00:29:28,410 --> 00:29:32,160
the agent yes the minions have to run

00:29:30,750 --> 00:29:35,630
the agent I didn't show you the beacon

00:29:32,160 --> 00:29:38,669
config so let me show it to you now I

00:29:35,630 --> 00:29:41,010
will show you first off because like I

00:29:38,669 --> 00:29:44,610
said I really just like to look at code

00:29:41,010 --> 00:29:47,549
oops so you've got all these beacons

00:29:44,610 --> 00:29:49,830
that ship with salt right the one that

00:29:47,549 --> 00:29:52,620
we were using what's called B temp

00:29:49,830 --> 00:29:54,419
all right and again this is just pure

00:29:52,620 --> 00:29:57,080
Python if you go and read it like it's

00:29:54,419 --> 00:30:03,360
it's shockingly easy to understand on

00:29:57,080 --> 00:30:05,280
the minion okay it's just configured

00:30:03,360 --> 00:30:07,080
just like this alright a set of become

00:30:05,280 --> 00:30:09,000
beacons to run and then when the minion

00:30:07,080 --> 00:30:10,770
starts up it goes ok these beacons are

00:30:09,000 --> 00:30:13,409
configured and it's running those in a

00:30:10,770 --> 00:30:15,450
tight loop alright some of those beacons

00:30:13,409 --> 00:30:16,710
accept parameters so for example like

00:30:15,450 --> 00:30:18,659
there's a load beacon right that

00:30:16,710 --> 00:30:20,730
basically says oh fire if load is

00:30:18,659 --> 00:30:22,350
greater than X or fire if load is you

00:30:20,730 --> 00:30:25,289
know X between x and y what-have-you

00:30:22,350 --> 00:30:27,270
right again see syntax for writing

00:30:25,289 --> 00:30:29,220
beacons is super super easy so you can

00:30:27,270 --> 00:30:32,159
like map this to whatever you know sort

00:30:29,220 --> 00:30:34,770
of dynamic use case you have yeah so

00:30:32,159 --> 00:30:42,600
cool does that answer your question sure

00:30:34,770 --> 00:30:53,039
any other questions yeah one there

00:30:42,600 --> 00:30:57,059
ah yes sure

00:30:53,039 --> 00:30:59,940
yeah yeah of course right so they're out

00:30:57,059 --> 00:31:01,889
of the box the first thing I should say

00:30:59,940 --> 00:31:04,110
is that the message bus is encrypted

00:31:01,889 --> 00:31:06,029
right it's a public key exchange to

00:31:04,110 --> 00:31:09,809
start and then symmetric a yes for the

00:31:06,029 --> 00:31:12,600
lifetime of the connection but the the

00:31:09,809 --> 00:31:14,639
master holds the public keys of the

00:31:12,600 --> 00:31:18,600
minion and then there's a CLI utility

00:31:14,639 --> 00:31:20,009
I'll show you here all right so if you

00:31:18,600 --> 00:31:23,309
run this guy you can see that we've

00:31:20,009 --> 00:31:24,389
accepted the keys of these two minions

00:31:23,309 --> 00:31:26,570
which are connected which is something

00:31:24,389 --> 00:31:30,269
that I did by hand prior to this demo

00:31:26,570 --> 00:31:31,830
right yeah you can also be like precede

00:31:30,269 --> 00:31:33,629
keys right so if you're bringing up

00:31:31,830 --> 00:31:36,360
machines dynamically right and you want

00:31:33,629 --> 00:31:38,039
to put you know a public key on that

00:31:36,360 --> 00:31:39,450
machine at provisioning time and you

00:31:38,039 --> 00:31:41,759
also want to hand that to the master

00:31:39,450 --> 00:31:43,049
then they can connect immediately the

00:31:41,759 --> 00:31:44,700
first time without any sort of

00:31:43,049 --> 00:31:46,110
intervention so they're a bunch of

00:31:44,700 --> 00:31:47,309
different strategies for doing that but

00:31:46,110 --> 00:31:48,840
yes certainly there's there's

00:31:47,309 --> 00:31:51,929
authentication and authorization during

00:31:48,840 --> 00:32:02,100
that step cool

00:31:51,929 --> 00:32:05,399
any other questions yes please thanks

00:32:02,100 --> 00:32:08,159
first can you tell us some more examples

00:32:05,399 --> 00:32:10,740
on when to use this beacon system I'm

00:32:08,159 --> 00:32:12,330
thinking of when you change the file

00:32:10,740 --> 00:32:15,629
something's restart a service or

00:32:12,330 --> 00:32:20,460
something sure yeah changing the file is

00:32:15,629 --> 00:32:22,649
a really common one let me show you kind

00:32:20,460 --> 00:32:25,649
of the list of beacons that we have here

00:32:22,649 --> 00:32:27,509
you know like anything that would sort

00:32:25,649 --> 00:32:30,659
of plug naturally into in monitoring

00:32:27,509 --> 00:32:33,269
system is is you know an obvious an

00:32:30,659 --> 00:32:35,730
obvious choice we have stuff like W temp

00:32:33,269 --> 00:32:37,259
here service right which basically does

00:32:35,730 --> 00:32:40,980
service monitoring right service our

00:32:37,259 --> 00:32:43,679
start service stop what have you and I

00:32:40,980 --> 00:32:45,210
notify right which does file changes so

00:32:43,679 --> 00:32:47,750
we see that one used a lot right

00:32:45,210 --> 00:32:50,490
especially in like security sensitive

00:32:47,750 --> 00:32:52,590
situations so you know file has changed

00:32:50,490 --> 00:32:54,389
at that point you don't have to wait for

00:32:52,590 --> 00:32:56,220
you like you're you know sort of

00:32:54,389 --> 00:32:58,320
regularly scheduled super

00:32:56,220 --> 00:33:00,390
configuration management job to come

00:32:58,320 --> 00:33:03,240
along right it immediately rectifies

00:33:00,390 --> 00:33:07,140
itself so we see that a lot used a lot

00:33:03,240 --> 00:33:09,809
like I said and security remediation so

00:33:07,140 --> 00:33:12,210
those are the ones you know process we

00:33:09,809 --> 00:33:14,280
have a PS beacon right that you know

00:33:12,210 --> 00:33:16,640
watches a process list right for rogue

00:33:14,280 --> 00:33:19,169
processes or for processes that start

00:33:16,640 --> 00:33:21,210
but our methodology is you know we do

00:33:19,169 --> 00:33:22,890
some batteries included but we try to

00:33:21,210 --> 00:33:24,570
make these things easy enough to write

00:33:22,890 --> 00:33:25,860
that you know it should take you you

00:33:24,570 --> 00:33:26,880
know only a few minutes to figure out

00:33:25,860 --> 00:33:28,409
the knack of how to write your own

00:33:26,880 --> 00:33:36,059
beacon if you have a specialized use

00:33:28,409 --> 00:33:40,919
case thanks sure yeah any final

00:33:36,059 --> 00:33:43,110
questions I'll be around if anybody

00:33:40,919 --> 00:33:44,520
wants to follow up or talk more about

00:33:43,110 --> 00:33:48,440
salt or just about automation in general

00:33:44,520 --> 00:33:48,440
so thanks very much thank you Mike

00:33:50,390 --> 00:34:09,760
you

00:33:50,810 --> 00:34:09,760

YouTube URL: https://www.youtube.com/watch?v=VkTbrU_Cx9w


