Title: OSDC 2018 | Extending Terraform for Anything as Code by Mitchell Hashimoto
Publication date: 2018-06-22
Playlist: OSDC 2018 | Open Source Data Center Conference
Description: 
	Terraform is a powerful Infrastructure as Code tool for declaratively building and maintaining complex infrastructures on one or multiple cloud systems. Additionally, Terraform supports over 80 non-infrastructure providers! This talk will dive into the abstract design of Terraform and show how it can be used concretely for completely non-infrastructure use cases, including examples of these uses in the real world. Weâ€™ll also touch on how you can extend Terraform to manage anything with an API.

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de
Blog: http://blog.netways.de
Webinare: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Google+: https://plus.google.com/+netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh

https://www.frametraxx.de/
Captions: 
	00:00:06,210 --> 00:00:08,270
you

00:00:11,970 --> 00:00:16,930
[Music]

00:00:13,830 --> 00:00:18,580
well thanks for coming I guess you have

00:00:16,930 --> 00:00:19,290
no choice now since is the only talk in

00:00:18,580 --> 00:00:22,270
the morning

00:00:19,290 --> 00:00:24,310
uh-huh but thanks for being here

00:00:22,270 --> 00:00:27,430
I want to talk today about extending

00:00:24,310 --> 00:00:30,429
terraform for what I say is really just

00:00:27,430 --> 00:00:32,199
anything as code and and I was looking

00:00:30,429 --> 00:00:35,350
back and it's kind of interesting that I

00:00:32,199 --> 00:00:37,510
spoke here in 2015 or say three years

00:00:35,350 --> 00:00:39,430
ago and when I spoke here three years

00:00:37,510 --> 00:00:41,170
ago I talked about terraform and

00:00:39,430 --> 00:00:43,299
terraform was pretty much brand new then

00:00:41,170 --> 00:00:46,299
I think it was I think it was only like

00:00:43,299 --> 00:00:49,390
one year old so we've come a long way

00:00:46,299 --> 00:00:50,799
since then it's it's a lot better and I

00:00:49,390 --> 00:00:53,260
just want to talk about something

00:00:50,799 --> 00:00:56,049
related that so for those who don't know

00:00:53,260 --> 00:00:59,140
I'm the founder of a company called

00:00:56,049 --> 00:01:00,729
Hoshi Corp we're generally better known

00:00:59,140 --> 00:01:03,250
for the products we create rather than a

00:01:00,729 --> 00:01:05,350
company so just to mention the names of

00:01:03,250 --> 00:01:06,729
the products but this is pretty much the

00:01:05,350 --> 00:01:08,350
last time I'm going to talk about any of

00:01:06,729 --> 00:01:11,890
them in this talk except for terraform

00:01:08,350 --> 00:01:14,229
but just maybe to help you put a name to

00:01:11,890 --> 00:01:17,200
some of this stuff we've made vagrant

00:01:14,229 --> 00:01:20,920
Packer surf console terraform vault and

00:01:17,200 --> 00:01:24,039
nomad me and my co-founder wrote at

00:01:20,920 --> 00:01:27,249
least you know at least 80% of all the

00:01:24,039 --> 00:01:29,679
code for these two when they started now

00:01:27,249 --> 00:01:31,979
there's teams behind all of them but

00:01:29,679 --> 00:01:34,329
we've this is all sort of open source

00:01:31,979 --> 00:01:35,799
all these projects open source in the

00:01:34,329 --> 00:01:37,240
sense that there are Mozilla license

00:01:35,799 --> 00:01:39,340
they have communities they have non

00:01:37,240 --> 00:01:41,679
Hacha core committers and we do

00:01:39,340 --> 00:01:43,600
community events things like that and I

00:01:41,679 --> 00:01:45,579
always disclaim that whenever I give

00:01:43,600 --> 00:01:47,200
talks like this at events especially

00:01:45,579 --> 00:01:49,810
ones that have the word open-source in

00:01:47,200 --> 00:01:51,609
the title you know we have a company but

00:01:49,810 --> 00:01:53,439
I do not talk about anything enterprise

00:01:51,609 --> 00:01:57,729
stuff so everything I will talk about

00:01:53,439 --> 00:02:00,670
today is just open-source and so let's

00:01:57,729 --> 00:02:03,549
sort of dive right in to terraform and

00:02:00,670 --> 00:02:05,649
extending terraform and I want to break

00:02:03,549 --> 00:02:08,560
down this title in an approachable way

00:02:05,649 --> 00:02:10,990
at first so first I want to talk about

00:02:08,560 --> 00:02:13,480
as code probably the most familiar or

00:02:10,990 --> 00:02:15,580
most comfortable concept but I do just

00:02:13,480 --> 00:02:17,170
want to explain this because if you

00:02:15,580 --> 00:02:18,520
don't get this then the rest of it is

00:02:17,170 --> 00:02:20,560
sort of meaningless or if you don't

00:02:18,520 --> 00:02:23,530
think that this is a useful topic then

00:02:20,560 --> 00:02:24,790
the rest of it will be a struggle too so

00:02:23,530 --> 00:02:26,500
when we talk about as

00:02:24,790 --> 00:02:28,599
let's just start with infrastructures

00:02:26,500 --> 00:02:31,780
code infrastructures code is probably

00:02:28,599 --> 00:02:35,230
one of the older more mature sort of

00:02:31,780 --> 00:02:37,299
viewpoints of representing something as

00:02:35,230 --> 00:02:39,400
code it's it's widespread it's well

00:02:37,299 --> 00:02:41,560
accepted and it goes back you know

00:02:39,400 --> 00:02:43,090
pretty far but I mean more recently it

00:02:41,560 --> 00:02:45,489
goes back just to the config management

00:02:43,090 --> 00:02:47,260
things like that and I think the best

00:02:45,489 --> 00:02:49,420
way to explain infrastructures code is

00:02:47,260 --> 00:02:53,049
explaining sort of the evolution of

00:02:49,420 --> 00:02:55,180
automation and why we've sort of moved

00:02:53,049 --> 00:02:58,269
towards more and more automation in the

00:02:55,180 --> 00:03:01,379
context of infrastructure so showing

00:02:58,269 --> 00:03:04,000
this very cliche cliche image of

00:03:01,379 --> 00:03:07,060
maturity now we can think about it sort

00:03:04,000 --> 00:03:08,470
of this way of when you start and

00:03:07,060 --> 00:03:11,200
nothing is gonna have dates because

00:03:08,470 --> 00:03:13,500
people go through this at different

00:03:11,200 --> 00:03:15,519
speeds and it's all still valid today so

00:03:13,500 --> 00:03:17,920
to begin you could sort of do everything

00:03:15,519 --> 00:03:20,769
manual you could just log into servers

00:03:17,920 --> 00:03:22,900
configure them click buttons spin them

00:03:20,769 --> 00:03:24,579
up like physically rack them you could

00:03:22,900 --> 00:03:28,299
just manually do things and that's

00:03:24,579 --> 00:03:31,510
generally okay at a very very quick

00:03:28,299 --> 00:03:33,459
point you realize that it's not very fun

00:03:31,510 --> 00:03:35,379
to manually do everything over and over

00:03:33,459 --> 00:03:36,849
again and so usually you use something

00:03:35,379 --> 00:03:38,829
like bash or some other sort of

00:03:36,849 --> 00:03:42,190
turing-complete type language to do

00:03:38,829 --> 00:03:43,389
basic automation and at a certain point

00:03:42,190 --> 00:03:45,940
you know this becomes sort of your

00:03:43,389 --> 00:03:48,699
secret sauce like you have this library

00:03:45,940 --> 00:03:50,260
of tools that makes you special and at a

00:03:48,699 --> 00:03:52,329
certain point in history now that made

00:03:50,260 --> 00:03:53,650
one individual more hireable than the

00:03:52,329 --> 00:03:54,940
other it's like what kind of tools do

00:03:53,650 --> 00:03:57,760
you have in your toolbox that the other

00:03:54,940 --> 00:03:59,620
person doesn't have yet and and this was

00:03:57,760 --> 00:04:02,790
sort of just relatively basic automation

00:03:59,620 --> 00:04:04,930
and it works at a small scale

00:04:02,790 --> 00:04:07,239
virtualization kind of throws flips out

00:04:04,930 --> 00:04:09,250
on its head because suddenly yeah

00:04:07,239 --> 00:04:10,840
there's just a motivation down a lot

00:04:09,250 --> 00:04:12,310
more servers and so there's there's

00:04:10,840 --> 00:04:14,620
nothing much more complex than that

00:04:12,310 --> 00:04:16,539
other than there's more to autumn

00:04:14,620 --> 00:04:19,570
there's more to do and so you kind of

00:04:16,539 --> 00:04:22,330
want more automation and jumping way

00:04:19,570 --> 00:04:23,770
forward now you know in the past ten

00:04:22,330 --> 00:04:27,340
years we've really seen the rise of

00:04:23,770 --> 00:04:30,099
things as a service from compute like

00:04:27,340 --> 00:04:33,550
Google Azure Amazon to software as a

00:04:30,099 --> 00:04:35,560
service like DNS and CDN providers to

00:04:33,550 --> 00:04:38,230
platforms as a service like Heroku and

00:04:35,560 --> 00:04:41,380
Cloud Foundry and so on

00:04:38,230 --> 00:04:43,570
these all sort of leverage a lot of

00:04:41,380 --> 00:04:46,120
resources underneath and require sort of

00:04:43,570 --> 00:04:48,190
a lot of automation to really get the

00:04:46,120 --> 00:04:50,680
benefits of them you could use it again

00:04:48,190 --> 00:04:51,820
really manually but to get sort of the

00:04:50,680 --> 00:04:53,950
most value out of it you have to

00:04:51,820 --> 00:04:56,680
automate it and then finally like where

00:04:53,950 --> 00:04:58,660
we are today is this idea of data center

00:04:56,680 --> 00:05:01,060
as computer and this is really things

00:04:58,660 --> 00:05:03,370
like schedulers and so the idea of

00:05:01,060 --> 00:05:06,130
viewing your entire sort of data center

00:05:03,370 --> 00:05:08,710
is one pool of resources sort of

00:05:06,130 --> 00:05:10,120
requires you can't actually achieve this

00:05:08,710 --> 00:05:12,340
at all without the right level of

00:05:10,120 --> 00:05:13,960
automation because you want sort of the

00:05:12,340 --> 00:05:15,940
resources underneath to come and go

00:05:13,960 --> 00:05:17,560
quite easily and you definitely want the

00:05:15,940 --> 00:05:19,360
applications on top to be able to move

00:05:17,560 --> 00:05:21,220
around pretty easily to get the benefits

00:05:19,360 --> 00:05:24,400
of this and so this really pushes

00:05:21,220 --> 00:05:27,820
automation forward and so we've sort of

00:05:24,400 --> 00:05:30,460
been following this path of maturity and

00:05:27,820 --> 00:05:31,630
and when I you know when I talk to

00:05:30,460 --> 00:05:33,820
family members and stuff they don't know

00:05:31,630 --> 00:05:34,960
anything about technology if I'm talking

00:05:33,820 --> 00:05:36,670
about the stuff on the very right they

00:05:34,960 --> 00:05:38,080
think that everything must be magical

00:05:36,670 --> 00:05:40,420
like everything must just happen

00:05:38,080 --> 00:05:42,490
automatically and and they're kind of

00:05:40,420 --> 00:05:45,010
confused of what you know I do or what

00:05:42,490 --> 00:05:46,630
our company tries to do but the reality

00:05:45,010 --> 00:05:49,150
of course is that the further you go

00:05:46,630 --> 00:05:51,850
right it's kind of weirdly more painful

00:05:49,150 --> 00:05:53,260
right like it's it's way but if you had

00:05:51,850 --> 00:05:54,430
one machine and all you had to manage

00:05:53,260 --> 00:05:56,620
was one machine and you could do

00:05:54,430 --> 00:05:58,720
everything manually this leftmost side

00:05:56,620 --> 00:06:00,700
is probably the most peaceful side of

00:05:58,720 --> 00:06:02,650
the whole thing and yet somehow the side

00:06:00,700 --> 00:06:05,140
where all the applications could deploy

00:06:02,650 --> 00:06:08,140
anywhere anytime and dynamically move is

00:06:05,140 --> 00:06:10,870
somehow the most stressful still and

00:06:08,140 --> 00:06:13,600
this you know is explained relatively

00:06:10,870 --> 00:06:15,730
simply and it's that you know as you

00:06:13,600 --> 00:06:17,020
gain capability there's complexity and

00:06:15,730 --> 00:06:19,570
and what I like to say is it's sort of

00:06:17,020 --> 00:06:23,080
necessary complexity it's sort of the

00:06:19,570 --> 00:06:25,390
idea that if you want to do more than at

00:06:23,080 --> 00:06:27,580
least initially it's more complex until

00:06:25,390 --> 00:06:30,220
the tools catch up to make it simpler

00:06:27,580 --> 00:06:32,530
and simpler I think you know most

00:06:30,220 --> 00:06:34,150
recently the the best examples for this

00:06:32,530 --> 00:06:36,280
are docker and kubernetes in the sense

00:06:34,150 --> 00:06:38,440
that you know the capabilities to build

00:06:36,280 --> 00:06:40,960
systems like that more or less have

00:06:38,440 --> 00:06:42,310
existed for the past ten years but the

00:06:40,960 --> 00:06:43,750
complexity was so high they were

00:06:42,310 --> 00:06:46,540
generally unapproachable but as the

00:06:43,750 --> 00:06:48,520
tools sort of matured that complexity

00:06:46,540 --> 00:06:51,100
comes down and more and more people are

00:06:48,520 --> 00:06:52,009
welcomed to the capability and that's

00:06:51,100 --> 00:06:54,830
sort of where we're at

00:06:52,009 --> 00:06:57,499
like we are still you know this room is

00:06:54,830 --> 00:07:00,529
still a very cutting edge group that's

00:06:57,499 --> 00:07:02,149
adopting these high highly complex

00:07:00,529 --> 00:07:04,009
systems because they're offering you a

00:07:02,149 --> 00:07:08,449
lot like there are a lot of benefits to

00:07:04,009 --> 00:07:11,899
do it and so a really visual example is

00:07:08,449 --> 00:07:13,279
this and you know I'll forgive you if

00:07:11,899 --> 00:07:15,409
you don't see it immediately because I

00:07:13,279 --> 00:07:16,909
didn't see it immediately but when when

00:07:15,409 --> 00:07:17,930
this was shown to me for the first time

00:07:16,909 --> 00:07:21,050
I was trying to figure out what it was

00:07:17,930 --> 00:07:24,559
and this is just a standard you know

00:07:21,050 --> 00:07:28,009
basic beginner web stack this could just

00:07:24,559 --> 00:07:29,599
be a lamp stack you have you know a load

00:07:28,009 --> 00:07:31,610
balancer in front a web tier an

00:07:29,599 --> 00:07:35,960
application tier in a database lamp

00:07:31,610 --> 00:07:38,719
right this is WordPress basically and so

00:07:35,960 --> 00:07:40,999
this already just looks complicated and

00:07:38,719 --> 00:07:43,849
this is almost as simple as it could get

00:07:40,999 --> 00:07:45,559
if you want to you know do it with best

00:07:43,849 --> 00:07:45,830
practices this is almost as simple as it

00:07:45,559 --> 00:07:48,649
gets

00:07:45,830 --> 00:07:51,379
and so you know when I look at this I

00:07:48,649 --> 00:07:53,330
try to think how can this be simplified

00:07:51,379 --> 00:07:55,849
how can we possibly reason about this

00:07:53,330 --> 00:07:57,080
and I see all the various things that

00:07:55,849 --> 00:07:58,999
have to be created and have to be

00:07:57,080 --> 00:08:02,779
managed and it's pretty obvious to me

00:07:58,999 --> 00:08:04,339
quickly that it's not scalable for

00:08:02,779 --> 00:08:05,899
people to do this manually like you

00:08:04,339 --> 00:08:08,959
don't you don't want to click around and

00:08:05,899 --> 00:08:11,870
do all this and so you know this is

00:08:08,959 --> 00:08:15,110
where the idea of code comes in is that

00:08:11,870 --> 00:08:17,959
code is a way for people to manage the

00:08:15,110 --> 00:08:20,360
complexity of machines right it was a

00:08:17,959 --> 00:08:23,360
way for us to take really really basic

00:08:20,360 --> 00:08:25,939
operations that computers could offer us

00:08:23,360 --> 00:08:28,370
and compose those basic operations and

00:08:25,939 --> 00:08:30,769
to really really relatively magical

00:08:28,370 --> 00:08:31,939
things I mean I can't I can't it's hard

00:08:30,769 --> 00:08:33,050
to explain how I'm sure you've gone

00:08:31,939 --> 00:08:34,789
through this too how many family members

00:08:33,050 --> 00:08:37,099
ask you know looking at their phone

00:08:34,789 --> 00:08:38,990
they're like but how does this turn into

00:08:37,099 --> 00:08:41,659
ones and zeros right like where does

00:08:38,990 --> 00:08:43,789
this how does it turn into a picture and

00:08:41,659 --> 00:08:46,399
and explaining all these levels of

00:08:43,789 --> 00:08:50,089
abstraction which is code more more or

00:08:46,399 --> 00:08:52,370
less is quite magical and so this is the

00:08:50,089 --> 00:08:54,649
idea of infrastructure is code is can we

00:08:52,370 --> 00:08:57,980
represent this thing on the left as code

00:08:54,649 --> 00:08:59,389
and get the benefits of code for

00:08:57,980 --> 00:09:01,310
whatever we're representing so an

00:08:59,389 --> 00:09:03,980
infrastructures case what we get are

00:09:01,310 --> 00:09:05,649
some major benefits so code gives us a

00:09:03,980 --> 00:09:07,760
source of knowledge

00:09:05,649 --> 00:09:10,370
it's pretty common when you join a

00:09:07,760 --> 00:09:12,019
company to say you know why does the

00:09:10,370 --> 00:09:14,120
server exist what does it do how does it

00:09:12,019 --> 00:09:16,579
communicate to this server and the

00:09:14,120 --> 00:09:18,380
answer to that usually is o ask this

00:09:16,579 --> 00:09:20,630
person or I kind of know the answer to

00:09:18,380 --> 00:09:22,339
this one it's like well I think it it

00:09:20,630 --> 00:09:24,920
was created from this script like

00:09:22,339 --> 00:09:26,329
there's a lot of guessing going on and

00:09:24,920 --> 00:09:27,769
what infrastructures code gives you the

00:09:26,329 --> 00:09:30,490
source of knowledge so if you could

00:09:27,769 --> 00:09:33,740
represent your infrastructure with code

00:09:30,490 --> 00:09:35,269
the answer to how does our data center

00:09:33,740 --> 00:09:37,850
get set up how does this application get

00:09:35,269 --> 00:09:39,920
ployed etcetera just becomes look at the

00:09:37,850 --> 00:09:40,910
github repository that's just how you

00:09:39,920 --> 00:09:44,120
don't need to talk to anybody that's

00:09:40,910 --> 00:09:45,860
just what how how it works similar to a

00:09:44,120 --> 00:09:48,290
program right like you don't join as a

00:09:45,860 --> 00:09:50,720
developer ask you know how does the

00:09:48,290 --> 00:09:52,970
image processor work and someone goes

00:09:50,720 --> 00:09:54,769
well I think this happens and this

00:09:52,970 --> 00:09:57,470
happens it's usually just look at the

00:09:54,769 --> 00:09:59,540
code figure it out the next thing is

00:09:57,470 --> 00:10:01,220
when you represent something a text we

00:09:59,540 --> 00:10:04,670
start getting the benefits of things

00:10:01,220 --> 00:10:07,250
like versioning and collaboration so we

00:10:04,670 --> 00:10:10,639
could put the code and github you know

00:10:07,250 --> 00:10:12,829
more than just you know applications we

00:10:10,639 --> 00:10:14,839
could put our infrastructure in github

00:10:12,829 --> 00:10:17,000
and and make pull requests to actually

00:10:14,839 --> 00:10:18,560
change the infrastructure get a review

00:10:17,000 --> 00:10:21,350
get a history of who approved things

00:10:18,560 --> 00:10:25,160
merge things that all becomes reality

00:10:21,350 --> 00:10:27,139
and then finally if this code is also

00:10:25,160 --> 00:10:29,300
the executive ol format then you could

00:10:27,139 --> 00:10:31,399
actually build tools around it not just

00:10:29,300 --> 00:10:33,769
to execute it actually but to analyze it

00:10:31,399 --> 00:10:35,510
and give you benefits like that like

00:10:33,769 --> 00:10:37,399
something we're working on right now

00:10:35,510 --> 00:10:39,649
with terraform is taking your terraform

00:10:37,399 --> 00:10:41,449
code looking at your infrastructure and

00:10:39,649 --> 00:10:44,480
telling you how much we think it's going

00:10:41,449 --> 00:10:48,290
to cost you it's really hard to do if

00:10:44,480 --> 00:10:50,720
you don't have something like the code

00:10:48,290 --> 00:10:52,579
right it's actually it what's

00:10:50,720 --> 00:10:55,370
interesting in that particular example

00:10:52,579 --> 00:10:57,019
is it's really hard to do even if you

00:10:55,370 --> 00:10:58,790
just have the AWS account like if you

00:10:57,019 --> 00:10:59,870
give me an AWS account and tell me how

00:10:58,790 --> 00:11:01,490
much it's going to cost you per month

00:10:59,870 --> 00:11:02,959
it's really really hard because there's

00:11:01,490 --> 00:11:05,779
actually a lot of information missing

00:11:02,959 --> 00:11:07,670
from that that a terraform configuration

00:11:05,779 --> 00:11:09,230
has that that I could understand much

00:11:07,670 --> 00:11:11,839
more about how you're going to use

00:11:09,230 --> 00:11:14,149
something than what actually exists and

00:11:11,839 --> 00:11:16,610
so code gives you this ability to do all

00:11:14,149 --> 00:11:19,490
this and these are the benefits of code

00:11:16,610 --> 00:11:21,980
and this is really what terraforming

00:11:19,490 --> 00:11:24,440
to do right and none of this for people

00:11:21,980 --> 00:11:26,450
who have who know terraform is is

00:11:24,440 --> 00:11:28,820
generally new what is interesting about

00:11:26,450 --> 00:11:30,770
terraform is that if you can move beyond

00:11:28,820 --> 00:11:32,029
the infrastructure and we're gonna talk

00:11:30,770 --> 00:11:33,020
a lot about infrastructure today but if

00:11:32,029 --> 00:11:35,200
you move beyond the infrastructure

00:11:33,020 --> 00:11:37,790
terraform is actually just a generic

00:11:35,200 --> 00:11:41,870
anything is code tool and we're gonna

00:11:37,790 --> 00:11:43,700
show some examples of that so next i

00:11:41,870 --> 00:11:45,470
just want to cover some terraform basics

00:11:43,700 --> 00:11:48,020
this is not supposed to be an intro to

00:11:45,470 --> 00:11:49,940
terraform talk so i think i just covered

00:11:48,020 --> 00:11:52,010
three of the major the three major

00:11:49,940 --> 00:11:53,630
pieces of the terraform workflow really

00:11:52,010 --> 00:11:54,830
quickly and if you actually want to you

00:11:53,630 --> 00:11:56,420
know if you've never used terraform

00:11:54,830 --> 00:11:58,160
before and want to use it then just go

00:11:56,420 --> 00:12:00,500
to the website and check it out but I do

00:11:58,160 --> 00:12:02,690
want people to have a general idea so

00:12:00,500 --> 00:12:05,209
terraform like I said is a tool to

00:12:02,690 --> 00:12:08,390
manage pretty much anything with an API

00:12:05,209 --> 00:12:09,560
is code that's hard to talk about so on

00:12:08,390 --> 00:12:10,610
the website and everything we always

00:12:09,560 --> 00:12:11,450
talk about infrastructure is code

00:12:10,610 --> 00:12:14,480
because that's the problem people have

00:12:11,450 --> 00:12:16,520
first it's a very practical problem but

00:12:14,480 --> 00:12:17,620
there's so many other benefits and

00:12:16,520 --> 00:12:20,450
that's what I want to talk about today

00:12:17,620 --> 00:12:22,279
it's open source like I said at the

00:12:20,450 --> 00:12:24,829
beginning of the talk when I say open

00:12:22,279 --> 00:12:27,200
source I mean I mean it in a true sort

00:12:24,829 --> 00:12:28,880
of sense it there's a lot of

00:12:27,200 --> 00:12:31,779
contributors every single release

00:12:28,880 --> 00:12:34,390
there's a lot of non-employee committers

00:12:31,779 --> 00:12:37,370
there's committers from other companies

00:12:34,390 --> 00:12:39,170
and there's sort of a lot of stars and

00:12:37,370 --> 00:12:41,000
so on and stars are vanity metric but

00:12:39,170 --> 00:12:43,490
they generally show sort of impact and

00:12:41,000 --> 00:12:44,959
interest from the community and then

00:12:43,490 --> 00:12:47,060
there's also support so terraform

00:12:44,959 --> 00:12:49,010
supports over 100 what we call providers

00:12:47,060 --> 00:12:51,260
which are all the things the terraform

00:12:49,010 --> 00:12:53,810
can control and so includes all the

00:12:51,260 --> 00:12:56,540
major cloud clouds of course like eight

00:12:53,810 --> 00:12:57,740
of us as for GCP but if you try to think

00:12:56,540 --> 00:13:01,040
off the top of your head sort of how

00:12:57,740 --> 00:13:04,520
many cloud providers there are maybe you

00:13:01,040 --> 00:13:06,350
could come up with you know 10 or 12 if

00:13:04,520 --> 00:13:08,930
you include sort of regional ones and

00:13:06,350 --> 00:13:11,600
things like that but terraform supports

00:13:08,930 --> 00:13:12,589
over 100 providers so so that's where we

00:13:11,600 --> 00:13:14,120
start getting into the clue that

00:13:12,589 --> 00:13:17,450
terraform could do a lot more than just

00:13:14,120 --> 00:13:18,980
infrastructure and so the goals of

00:13:17,450 --> 00:13:20,870
terraform when it was originally created

00:13:18,980 --> 00:13:24,709
but still today these goals generally

00:13:20,870 --> 00:13:26,060
just don't change was to unify sort of

00:13:24,709 --> 00:13:29,750
the view of resources using

00:13:26,060 --> 00:13:32,240
infrastructures code i terraform was

00:13:29,750 --> 00:13:33,470
made in 2014 and before 2014 i use cloud

00:13:32,240 --> 00:13:35,180
formation

00:13:33,470 --> 00:13:36,560
and one of the things that always

00:13:35,180 --> 00:13:38,899
frustrated me about cloud formation

00:13:36,560 --> 00:13:40,339
among other things but one of the things

00:13:38,899 --> 00:13:42,709
that frustrated me was that it was just

00:13:40,339 --> 00:13:45,320
a to be us only right it was I was

00:13:42,709 --> 00:13:48,560
generally okay with cloud formation as a

00:13:45,320 --> 00:13:52,399
concept and I liked well I used it for

00:13:48,560 --> 00:13:54,350
AWS but I had so many other things I had

00:13:52,399 --> 00:13:57,380
DNS providers I had databases as a

00:13:54,350 --> 00:13:59,269
service I had other things that I needed

00:13:57,380 --> 00:14:01,220
to run my application that I could not

00:13:59,269 --> 00:14:03,320
represent with cloud formation and that

00:14:01,220 --> 00:14:05,000
was frustrating because if I wanted to

00:14:03,320 --> 00:14:06,589
create a clone of my application I

00:14:05,000 --> 00:14:08,269
couldn't because I had cloned the

00:14:06,589 --> 00:14:09,920
application and then login to a bunch of

00:14:08,269 --> 00:14:11,630
dashboards and click things and so the

00:14:09,920 --> 00:14:13,070
whole thing sort of was frustrating to

00:14:11,630 --> 00:14:15,680
me and so one of the goals with

00:14:13,070 --> 00:14:17,930
terraform was to unify this one sort of

00:14:15,680 --> 00:14:21,320
language one configuration to build all

00:14:17,930 --> 00:14:23,410
that stuff out I wanted to expose a way

00:14:21,320 --> 00:14:26,180
for individuals and teams to safely

00:14:23,410 --> 00:14:28,040
continue to change infrastructure and so

00:14:26,180 --> 00:14:30,529
this was another issue with cloud

00:14:28,040 --> 00:14:32,019
formation and and the best example I

00:14:30,529 --> 00:14:35,690
have here is that one of the earliest

00:14:32,019 --> 00:14:39,350
public users of terraform was Yelp and

00:14:35,690 --> 00:14:41,209
this is back in 2014 and Yelp in 2014

00:14:39,350 --> 00:14:43,220
had you know there's still big company

00:14:41,209 --> 00:14:45,500
they were public at the time they had

00:14:43,220 --> 00:14:47,240
two people in their entire company that

00:14:45,500 --> 00:14:49,130
were allowed to hit the apply button on

00:14:47,240 --> 00:14:51,709
cloud formation they used cloud

00:14:49,130 --> 00:14:53,140
formation but because cloud formation

00:14:51,709 --> 00:14:55,670
didn't tell you what it was going to do

00:14:53,140 --> 00:14:57,050
it was really really scary basically you

00:14:55,670 --> 00:15:00,190
had to look at any cloud formation

00:14:57,050 --> 00:15:02,120
change and try to in your head fully

00:15:00,190 --> 00:15:04,339
encapsulate your entire infrastructure

00:15:02,120 --> 00:15:06,290
and run it in your head to figure out

00:15:04,339 --> 00:15:08,600
what its gonna do because once you hit

00:15:06,290 --> 00:15:10,850
apply that train is going right like if

00:15:08,600 --> 00:15:12,019
it decides if you had a typo and it

00:15:10,850 --> 00:15:14,300
decides to start destroying your

00:15:12,019 --> 00:15:17,570
infrastructure cloud formations off and

00:15:14,300 --> 00:15:18,829
going in 2014 at least and so Yelp had

00:15:17,570 --> 00:15:21,350
these two people that I had to

00:15:18,829 --> 00:15:23,570
centralize through and that wasn't

00:15:21,350 --> 00:15:25,850
really scalable and so another one of

00:15:23,570 --> 00:15:28,490
the goals was to make it safer for

00:15:25,850 --> 00:15:31,670
others to execute your infrastructure

00:15:28,490 --> 00:15:33,230
changes and then finally manage anything

00:15:31,670 --> 00:15:35,600
we really get into that so I'll just

00:15:33,230 --> 00:15:36,980
skip it for now so here's like an

00:15:35,600 --> 00:15:39,740
example of what terraform looks like

00:15:36,980 --> 00:15:42,140
right really really basic probably the

00:15:39,740 --> 00:15:44,690
only code example we'll see in this

00:15:42,140 --> 00:15:46,700
section I think but in this case we have

00:15:44,690 --> 00:15:49,040
an AWS instance on top

00:15:46,700 --> 00:15:50,090
we have a DNS record on the bottom and

00:15:49,040 --> 00:15:51,440
the first thing to note sort of

00:15:50,090 --> 00:15:53,360
immediately is that there are two

00:15:51,440 --> 00:15:55,490
separate providers like cloud formations

00:15:53,360 --> 00:15:57,170
never going to give you DNS simple as an

00:15:55,490 --> 00:16:00,440
option that was one of the first goals

00:15:57,170 --> 00:16:01,730
of terraform you could see with it's

00:16:00,440 --> 00:16:03,650
hard to see actually but I bolded and

00:16:01,730 --> 00:16:05,660
highlighted this thing that starts with

00:16:03,650 --> 00:16:08,150
a dollar sign you could take values from

00:16:05,660 --> 00:16:11,570
other systems and use them to

00:16:08,150 --> 00:16:13,910
interpolate into into your your

00:16:11,570 --> 00:16:15,950
resources so this case we're taking the

00:16:13,910 --> 00:16:17,990
public IP address of the atreus instance

00:16:15,950 --> 00:16:19,790
and using it to populate our DNS record

00:16:17,990 --> 00:16:21,380
and so that shows how you could take two

00:16:19,790 --> 00:16:23,780
totally separate systems and glue them

00:16:21,380 --> 00:16:25,430
together and so you can see from the

00:16:23,780 --> 00:16:28,160
configuration it's fully declarative

00:16:25,430 --> 00:16:30,740
that you say what you want not how you

00:16:28,160 --> 00:16:32,900
want it to get there and this is you

00:16:30,740 --> 00:16:34,430
know an opinion but one our company

00:16:32,900 --> 00:16:35,930
takes pretty strongly which is that

00:16:34,430 --> 00:16:38,750
declarative is really really important

00:16:35,930 --> 00:16:41,300
for really large sort of user

00:16:38,750 --> 00:16:43,370
scalability at a certain sort of size of

00:16:41,300 --> 00:16:45,080
a company it gets too hard to serialize

00:16:43,370 --> 00:16:47,360
changes and so you'd much rather just

00:16:45,080 --> 00:16:49,280
always have n state and have systems get

00:16:47,360 --> 00:16:52,160
you there and so terraform is one of

00:16:49,280 --> 00:16:53,840
those it's declarative what you saw here

00:16:52,160 --> 00:16:55,310
was sort of the human friendly version

00:16:53,840 --> 00:16:56,930
of the configuration it looks kind of

00:16:55,310 --> 00:17:00,110
like an engine X configuration in a way

00:16:56,930 --> 00:17:01,400
and it's also JSON compatible so you

00:17:00,110 --> 00:17:03,110
could fully write JSON

00:17:01,400 --> 00:17:04,850
that's generally used for machines to

00:17:03,110 --> 00:17:06,380
generate terraform config and you can

00:17:04,850 --> 00:17:08,600
mix it to so you could have some files

00:17:06,380 --> 00:17:11,090
that are human the human format and some

00:17:08,600 --> 00:17:14,060
that are JSON and terraform will suck up

00:17:11,090 --> 00:17:16,550
both and then of course it's text so

00:17:14,060 --> 00:17:18,710
version it put in github we want you to

00:17:16,550 --> 00:17:20,090
do that and that gives you stuff like

00:17:18,710 --> 00:17:21,680
this right like if you put it in github

00:17:20,090 --> 00:17:25,360
you'll actually see diffs of how your

00:17:21,680 --> 00:17:25,360
infrastructure changed over time

00:17:25,610 --> 00:17:29,360
one of the first commands you're on

00:17:26,900 --> 00:17:30,740
otehr form is the plan command what the

00:17:29,360 --> 00:17:33,020
plan command does this tells you what's

00:17:30,740 --> 00:17:34,520
going to happen it doesn't change your

00:17:33,020 --> 00:17:35,720
infrastructure the contract it gives you

00:17:34,520 --> 00:17:38,270
is that it will not change your

00:17:35,720 --> 00:17:40,700
infrastructure it may make API requests

00:17:38,270 --> 00:17:42,230
to inspect or read information about

00:17:40,700 --> 00:17:45,530
your infrastructure but it won't make

00:17:42,230 --> 00:17:47,870
any changing requests importantly you

00:17:45,530 --> 00:17:49,430
could also save the plans and then give

00:17:47,870 --> 00:17:52,400
them back to terraform to make only

00:17:49,430 --> 00:17:53,750
those changes and so that's a big

00:17:52,400 --> 00:17:56,210
difference from something like a no op

00:17:53,750 --> 00:17:58,640
mode so like a no op mode of other types

00:17:56,210 --> 00:18:00,110
of applications usually tell you what it

00:17:58,640 --> 00:18:02,179
would do at that moment in time

00:18:00,110 --> 00:18:03,470
the problem is you know the world

00:18:02,179 --> 00:18:05,360
doesn't freeze around you and your

00:18:03,470 --> 00:18:06,919
infrastructure isn't frozen either so

00:18:05,360 --> 00:18:07,880
from the time you were on the no op mode

00:18:06,919 --> 00:18:09,500
to the time you actually make the

00:18:07,880 --> 00:18:10,880
changes they could have changed and and

00:18:09,500 --> 00:18:12,950
what it does is completely different so

00:18:10,880 --> 00:18:15,590
my taint by saving something like the

00:18:12,950 --> 00:18:17,570
plan you could actually ensure that only

00:18:15,590 --> 00:18:20,029
what it said is going to happen is going

00:18:17,570 --> 00:18:21,350
to happen and if terraform start seeing

00:18:20,029 --> 00:18:23,510
that it has to do other things other

00:18:21,350 --> 00:18:25,279
than what the plan contains it'll air

00:18:23,510 --> 00:18:28,789
and return back out and you could run a

00:18:25,279 --> 00:18:30,289
plan again plants also show reasons for

00:18:28,789 --> 00:18:32,600
certain actions such as if it needs to

00:18:30,289 --> 00:18:35,059
destroy something to modify it so not

00:18:32,600 --> 00:18:37,820
all fields are updatable in place easy

00:18:35,059 --> 00:18:39,830
example is changing the image of compute

00:18:37,820 --> 00:18:41,929
instance usually not able to do in place

00:18:39,830 --> 00:18:43,039
so that the plan will show you it can

00:18:41,929 --> 00:18:46,730
make that change but it's gonna have to

00:18:43,039 --> 00:18:48,380
take it down before before doing it the

00:18:46,730 --> 00:18:50,690
plan sort of follows like a git style

00:18:48,380 --> 00:18:52,070
format where we use colors and symbols

00:18:50,690 --> 00:18:53,510
to represent what's going to happen so

00:18:52,070 --> 00:18:55,460
green plus means that it's going to

00:18:53,510 --> 00:18:57,590
create something new red minus means

00:18:55,460 --> 00:18:59,720
it's going to destroy something orange

00:18:57,590 --> 00:19:01,340
or yellow squiggly means it's gonna be

00:18:59,720 --> 00:19:03,620
able to update it but in place so

00:19:01,340 --> 00:19:06,080
probably no downtime depends on the

00:19:03,620 --> 00:19:07,340
system that you're updating and then a -

00:19:06,080 --> 00:19:09,080
slash plus means that it's going to

00:19:07,340 --> 00:19:12,799
destroy and then it's going to create so

00:19:09,080 --> 00:19:14,779
probably downtime for that resource and

00:19:12,799 --> 00:19:17,419
so just example of what this looks like

00:19:14,779 --> 00:19:18,679
for our config before we can see it's

00:19:17,419 --> 00:19:20,990
going to create the database instance

00:19:18,679 --> 00:19:22,639
you can see the ami is gonna be what we

00:19:20,990 --> 00:19:24,889
requested and you could also see that

00:19:22,639 --> 00:19:27,350
terraform is gonna know a lot more stuff

00:19:24,889 --> 00:19:29,630
so it says computed over there that just

00:19:27,350 --> 00:19:31,519
means that it knows it'll know it once

00:19:29,630 --> 00:19:34,490
it executes sit but it can't know it in

00:19:31,519 --> 00:19:37,820
advance so will we know that we will

00:19:34,490 --> 00:19:41,419
eventually have a public IP but we can't

00:19:37,820 --> 00:19:43,070
know about it in advance once you've

00:19:41,419 --> 00:19:44,960
finished the plan you run an apply the

00:19:43,070 --> 00:19:46,539
apply actually execute the change and

00:19:44,960 --> 00:19:48,919
make some makes the things happen

00:19:46,539 --> 00:19:50,929
because you know tear forms

00:19:48,919 --> 00:19:53,389
orchestrating infrastructure and things

00:19:50,929 --> 00:19:55,429
with AP is it's generally pretty slow so

00:19:53,389 --> 00:19:58,460
a really important part of terraform is

00:19:55,429 --> 00:20:00,019
parallelization it paralyzes as much as

00:19:58,460 --> 00:20:02,600
possible it figures that out

00:20:00,019 --> 00:20:05,000
automatically based on sort of those

00:20:02,600 --> 00:20:07,370
interpolations of who's using what and

00:20:05,000 --> 00:20:08,990
and this works really really well you

00:20:07,370 --> 00:20:10,639
know there's stuff in AWS that takes 15

00:20:08,990 --> 00:20:12,409
minutes to create actually there's stuff

00:20:10,639 --> 00:20:13,220
in Azure that takes 24 hours to create

00:20:12,409 --> 00:20:15,200
so

00:20:13,220 --> 00:20:18,169
you actually want this to be as parallel

00:20:15,200 --> 00:20:18,409
as possible and this is pretty simple

00:20:18,169 --> 00:20:21,080
too

00:20:18,409 --> 00:20:24,470
you apply things happen it's pretty

00:20:21,080 --> 00:20:26,179
obvious and so the whole goal is that

00:20:24,470 --> 00:20:28,220
you know terraform gives you a workflow

00:20:26,179 --> 00:20:31,429
for safely creating and changing

00:20:28,220 --> 00:20:33,230
infrastructure it tells you sort of

00:20:31,429 --> 00:20:35,480
what's going to happen before it happens

00:20:33,230 --> 00:20:37,870
you could read that and then you can

00:20:35,480 --> 00:20:39,740
make the apply happen after that and

00:20:37,870 --> 00:20:41,030
then the last thing I want to mention

00:20:39,740 --> 00:20:44,150
just because it's an important concept

00:20:41,030 --> 00:20:46,130
is this idea of modules modules are just

00:20:44,150 --> 00:20:48,470
basically groupings of terraform

00:20:46,130 --> 00:20:50,299
configurations that are reusable so they

00:20:48,470 --> 00:20:52,850
allow you to create these packages that

00:20:50,299 --> 00:20:54,860
you could reuse and share there's a

00:20:52,850 --> 00:20:56,150
public registry at registry to terraform

00:20:54,860 --> 00:20:59,330
dot IO that just helps you get started

00:20:56,150 --> 00:21:01,309
with a bunch of stuff and as an example

00:20:59,330 --> 00:21:02,809
of what this looks like it's not quite

00:21:01,309 --> 00:21:04,580
this simple because there's other those

00:21:02,809 --> 00:21:06,409
other configs you would need but that's

00:21:04,580 --> 00:21:08,659
a real module the console module and if

00:21:06,409 --> 00:21:10,880
you wanted to just run console on AWS

00:21:08,659 --> 00:21:13,400
for example you could just get the

00:21:10,880 --> 00:21:15,500
module specify the version specify few

00:21:13,400 --> 00:21:17,659
more configs and then it would create it

00:21:15,500 --> 00:21:19,580
and then the module itself has output

00:21:17,659 --> 00:21:21,470
sort of like a function returns some

00:21:19,580 --> 00:21:23,030
stuff in this case we could get the name

00:21:21,470 --> 00:21:26,030
of the auto scale group that actually

00:21:23,030 --> 00:21:27,679
has the server's so modules are a really

00:21:26,030 --> 00:21:32,840
important way for organizations of scale

00:21:27,679 --> 00:21:34,429
so this is the basics of terraform now

00:21:32,840 --> 00:21:36,289
you know sort of the ESCO terraform and

00:21:34,429 --> 00:21:39,320
now we can sort of get into the anything

00:21:36,289 --> 00:21:41,120
part of what does that mean of how is

00:21:39,320 --> 00:21:42,409
terraform useful beyond infrastructure I

00:21:41,120 --> 00:21:43,789
think it's pretty clear how you could

00:21:42,409 --> 00:21:47,150
spin up servers and load balancers and

00:21:43,789 --> 00:21:49,580
connect them together so beyond

00:21:47,150 --> 00:21:52,820
infrastructure there's really two major

00:21:49,580 --> 00:21:55,039
trends that make this a requirement the

00:21:52,820 --> 00:21:57,799
two trends are software as a service or

00:21:55,039 --> 00:22:00,679
more things as a service and then

00:21:57,799 --> 00:22:03,340
everything with an API so diving into

00:22:00,679 --> 00:22:05,630
both of those softwares of service has

00:22:03,340 --> 00:22:07,970
has become really really important in

00:22:05,630 --> 00:22:10,159
both applications and organizations

00:22:07,970 --> 00:22:13,100
right so for applications it's it's

00:22:10,159 --> 00:22:14,690
easier to understand it's their services

00:22:13,100 --> 00:22:16,220
and I said this a little bit earlier

00:22:14,690 --> 00:22:18,559
there's services that are important or

00:22:16,220 --> 00:22:20,330
critical for applications to function

00:22:18,559 --> 00:22:23,780
and these are things like databases

00:22:20,330 --> 00:22:27,140
email services so on and the easiest way

00:22:23,780 --> 00:22:28,580
to make this concrete is if

00:22:27,140 --> 00:22:30,530
you know your boss were to come up to

00:22:28,580 --> 00:22:32,120
you and say make a clone of our

00:22:30,530 --> 00:22:34,700
environment so I could run you know dev

00:22:32,120 --> 00:22:37,760
test staging cluster for this

00:22:34,700 --> 00:22:39,350
application what do you need to make

00:22:37,760 --> 00:22:40,910
that reality and and sometimes you need

00:22:39,350 --> 00:22:43,130
a CDN or sometimes you a mail server

00:22:40,910 --> 00:22:45,230
that isn't provided by your

00:22:43,130 --> 00:22:48,020
infrastructure provider that's an easy

00:22:45,230 --> 00:22:50,330
one the second one the organizational

00:22:48,020 --> 00:22:52,400
stuff is a little a little bit newer but

00:22:50,330 --> 00:22:53,420
it's the idea of sort of what's

00:22:52,400 --> 00:22:55,670
important or critical for your

00:22:53,420 --> 00:22:57,710
organization to function and these are

00:22:55,670 --> 00:22:59,450
things like alerting configurations they

00:22:57,710 --> 00:23:01,790
the application doesn't need them to run

00:22:59,450 --> 00:23:02,180
but for your organization to function

00:23:01,790 --> 00:23:03,980
well

00:23:02,180 --> 00:23:06,320
you want the right alerting schedules

00:23:03,980 --> 00:23:08,000
and on-call schedules it's stuff like

00:23:06,320 --> 00:23:10,580
access control who could access what

00:23:08,000 --> 00:23:12,740
files who can you know access Dropbox

00:23:10,580 --> 00:23:15,530
who could access your internal sort of

00:23:12,740 --> 00:23:17,240
file systems who gets access to sort of

00:23:15,530 --> 00:23:19,430
github and things like that these are

00:23:17,240 --> 00:23:22,040
things that you know traditionally you

00:23:19,430 --> 00:23:24,740
would join a company an IT or somebody

00:23:22,040 --> 00:23:27,440
like IT would set you up and onboard you

00:23:24,740 --> 00:23:29,150
onto the system something terraform does

00:23:27,440 --> 00:23:31,670
and something we do as a company and

00:23:29,150 --> 00:23:34,040
I'll show you is we try to manage you

00:23:31,670 --> 00:23:36,440
know onboarding as code and employees

00:23:34,040 --> 00:23:38,600
this code not employees as people but

00:23:36,440 --> 00:23:42,830
then at the system's they have access to

00:23:38,600 --> 00:23:44,270
this code and we'll show you that so the

00:23:42,830 --> 00:23:46,130
second thing is everything has an API

00:23:44,270 --> 00:23:47,630
and this is a quote because I know

00:23:46,130 --> 00:23:49,190
someone said it that wasn't me but I

00:23:47,630 --> 00:23:49,970
don't know who said it but I said it

00:23:49,190 --> 00:23:51,710
before so

00:23:49,970 --> 00:23:53,630
but basically you know if if something

00:23:51,710 --> 00:23:56,900
doesn't have an API then it might as

00:23:53,630 --> 00:23:58,430
well not exist today if it doesn't have

00:23:56,900 --> 00:24:01,610
an API it means that you're you're

00:23:58,430 --> 00:24:04,220
forced to use that thing manually or in

00:24:01,610 --> 00:24:07,520
a very difficult to automate way and

00:24:04,220 --> 00:24:10,040
api's are basically necessary so what I

00:24:07,520 --> 00:24:12,290
look for is just generally crud create

00:24:10,040 --> 00:24:13,910
read update delete of all the major

00:24:12,290 --> 00:24:16,520
components of a service and if it has

00:24:13,910 --> 00:24:18,500
this then it could be fully automated

00:24:16,520 --> 00:24:20,900
integrated into a system very easily and

00:24:18,500 --> 00:24:22,370
terraform command ship so these are the

00:24:20,900 --> 00:24:24,680
two things software as a service and

00:24:22,370 --> 00:24:27,560
everything with an API generally that

00:24:24,680 --> 00:24:29,780
are pushing the ability to automate more

00:24:27,560 --> 00:24:31,400
than we've ever automated before not for

00:24:29,780 --> 00:24:33,140
the sake of automation but because it's

00:24:31,400 --> 00:24:34,400
just saving us time like we don't want

00:24:33,140 --> 00:24:36,290
to be able we don't want to have to

00:24:34,400 --> 00:24:39,260
configure you know on call schedules

00:24:36,290 --> 00:24:41,090
manually and things like that and so a

00:24:39,260 --> 00:24:42,200
few weeks ago I got this tweet

00:24:41,090 --> 00:24:44,990
I didn't get this sweet this tweet went

00:24:42,200 --> 00:24:47,090
out publicly and I found it then the

00:24:44,990 --> 00:24:49,190
question basically says you know if

00:24:47,090 --> 00:24:52,490
you're not multi-cloud deployed or

00:24:49,190 --> 00:24:54,170
planning to be multi-cloud or you've not

00:24:52,490 --> 00:24:56,270
or you're not already married to the

00:24:54,170 --> 00:24:57,410
entire Corp stack what is the

00:24:56,270 --> 00:24:58,790
advantage of terraform over

00:24:57,410 --> 00:25:01,430
CloudFormation or Google deployment

00:24:58,790 --> 00:25:03,020
manager and so on and I get this ask

00:25:01,430 --> 00:25:04,910
this question a lot right this this

00:25:03,020 --> 00:25:07,400
quite I get asked this question probably

00:25:04,910 --> 00:25:09,860
once a month at least or once per

00:25:07,400 --> 00:25:11,600
conference at least and so when this

00:25:09,860 --> 00:25:13,010
came out publicly I was kind of excited

00:25:11,600 --> 00:25:15,320
because it gave me an opportunity to

00:25:13,010 --> 00:25:17,690
respond and and reuse it which I'm like

00:25:15,320 --> 00:25:20,540
I'm doing now and so so I responded and

00:25:17,690 --> 00:25:22,270
my response was basically that you know

00:25:20,540 --> 00:25:25,070
even people who aren't multi-cloud

00:25:22,270 --> 00:25:26,990
generally have multiple services that

00:25:25,070 --> 00:25:29,270
they use that aren't infrastructure that

00:25:26,990 --> 00:25:31,790
they want to manage as declarative quote

00:25:29,270 --> 00:25:34,450
code so terraform should be viewed less

00:25:31,790 --> 00:25:37,070
for its benefit as a multi cloud tool

00:25:34,450 --> 00:25:39,050
and more for its benefit as multi

00:25:37,070 --> 00:25:42,740
service whether those are two clouds or

00:25:39,050 --> 00:25:44,480
not and I gave some examples there this

00:25:42,740 --> 00:25:46,580
person ended up responding a little bit

00:25:44,480 --> 00:25:48,500
later that they found the page or duty

00:25:46,580 --> 00:25:50,030
integration super super powerful and

00:25:48,500 --> 00:25:52,280
they started integrating that to their

00:25:50,030 --> 00:25:54,170
company but they had no plans to get rid

00:25:52,280 --> 00:25:55,250
of cloud formation and so that shows the

00:25:54,170 --> 00:25:56,810
benefit I don't know if they ever

00:25:55,250 --> 00:25:59,330
finished that they never responded again

00:25:56,810 --> 00:26:01,790
but but that's sort of the examples I'm

00:25:59,330 --> 00:26:04,160
going to show today and so the key to

00:26:01,790 --> 00:26:07,460
all this is tarah forms concept of

00:26:04,160 --> 00:26:09,740
providers providers and terraform or the

00:26:07,460 --> 00:26:12,200
integration point between tear forms

00:26:09,740 --> 00:26:14,840
core systems and everything else in the

00:26:12,200 --> 00:26:17,510
world they expose what are called

00:26:14,840 --> 00:26:21,650
resources a resource is something like

00:26:17,510 --> 00:26:23,810
an AWS instance or I don't know a

00:26:21,650 --> 00:26:27,710
console key value or a DNS record or

00:26:23,810 --> 00:26:29,300
something like that they are version

00:26:27,710 --> 00:26:30,890
separately from terraform so they are

00:26:29,300 --> 00:26:32,480
separate plug-ins to terraform that are

00:26:30,890 --> 00:26:35,090
versions separately including the core

00:26:32,480 --> 00:26:36,980
ones so terraform core is released at a

00:26:35,090 --> 00:26:39,290
fairly infrequent cadence like maybe

00:26:36,980 --> 00:26:42,590
once a month to once every three months

00:26:39,290 --> 00:26:44,960
but the providers are updated very often

00:26:42,590 --> 00:26:46,760
so the major ones like AWS and Google

00:26:44,960 --> 00:26:48,350
Cloud those are updated every two weeks

00:26:46,760 --> 00:26:51,080
we just automatically sort of cut

00:26:48,350 --> 00:26:52,940
releases every two weeks but the other

00:26:51,080 --> 00:26:54,050
providers like pager duty and github the

00:26:52,940 --> 00:26:54,770
ones that just don't change it often

00:26:54,050 --> 00:26:57,350
maybe

00:26:54,770 --> 00:26:58,790
every few months but this lets you run

00:26:57,350 --> 00:27:00,200
terraform you could constrain to a

00:26:58,790 --> 00:27:02,330
specific version if you don't want the

00:27:00,200 --> 00:27:04,790
updates while still updating the core of

00:27:02,330 --> 00:27:06,670
terraformer getting bug fixes and you

00:27:04,790 --> 00:27:09,080
could use all these providers together

00:27:06,670 --> 00:27:11,210
for the official providers non custom

00:27:09,080 --> 00:27:12,950
ones the installations are automatic so

00:27:11,210 --> 00:27:14,750
if you download terraform from the

00:27:12,950 --> 00:27:16,490
website you don't get any providers none

00:27:14,750 --> 00:27:18,650
like you don't even get it of us now you

00:27:16,490 --> 00:27:20,110
just get the core system when you start

00:27:18,650 --> 00:27:22,430
using AWS in your configuration

00:27:20,110 --> 00:27:25,340
terraform will automatically download

00:27:22,430 --> 00:27:27,260
that and start using it but that's just

00:27:25,340 --> 00:27:29,180
for official ones because you know we

00:27:27,260 --> 00:27:30,770
could verify we could pin the TLS

00:27:29,180 --> 00:27:31,160
certain verify signatures and things

00:27:30,770 --> 00:27:34,190
like that

00:27:31,160 --> 00:27:36,200
not for unofficial ones so I'm gonna

00:27:34,190 --> 00:27:37,460
show some examples of using terraform

00:27:36,200 --> 00:27:40,400
for things that aren't infrastructure

00:27:37,460 --> 00:27:42,680
and these are all examples that I've

00:27:40,400 --> 00:27:44,570
seen in the wild I used I used you know

00:27:42,680 --> 00:27:45,830
from the docs I use the example but

00:27:44,570 --> 00:27:47,720
these are all things that I've seen

00:27:45,830 --> 00:27:50,090
multiple sort of customers and users

00:27:47,720 --> 00:27:53,120
doing in the real world and having real

00:27:50,090 --> 00:27:55,400
value they aren't just cool demos so the

00:27:53,120 --> 00:27:58,750
first one and I mentioned it before is

00:27:55,400 --> 00:28:01,160
pager duty really really really common

00:27:58,750 --> 00:28:03,560
Pedro Duty gives you the ability to

00:28:01,160 --> 00:28:06,980
represent sort of your teams and

00:28:03,560 --> 00:28:10,670
organizations schedules notification

00:28:06,980 --> 00:28:12,530
settings etc as code so Pedro Duty is

00:28:10,670 --> 00:28:14,210
one of those things that I love I mean

00:28:12,530 --> 00:28:15,830
it's an awesome product but it's

00:28:14,210 --> 00:28:18,620
something I never want to log into it's

00:28:15,830 --> 00:28:20,000
it's when people join or when when do

00:28:18,620 --> 00:28:22,220
you have to change on-call schedules

00:28:20,000 --> 00:28:23,210
it's it's one just annoying to have to

00:28:22,220 --> 00:28:25,040
click through a bunch of things and

00:28:23,210 --> 00:28:26,660
figure it out and second at a certain

00:28:25,040 --> 00:28:28,400
point for certain production critical

00:28:26,660 --> 00:28:31,190
systems that's scary to change that

00:28:28,400 --> 00:28:32,780
stuff because in the past I've been I've

00:28:31,190 --> 00:28:35,060
been nervous that maybe I break the

00:28:32,780 --> 00:28:36,770
alerting and now you know if it's down

00:28:35,060 --> 00:28:38,090
people actually won't get alerted I'm

00:28:36,770 --> 00:28:39,710
not quite sure

00:28:38,090 --> 00:28:41,690
and so representing things this code as

00:28:39,710 --> 00:28:43,700
a way to help other people look at

00:28:41,690 --> 00:28:45,710
things get you know a second person to

00:28:43,700 --> 00:28:47,810
to verify and approve something for a

00:28:45,710 --> 00:28:50,840
change it and also to automate more so

00:28:47,810 --> 00:28:54,140
here's an example of managing teams and

00:28:50,840 --> 00:28:55,460
users with terraform codes so in this

00:28:54,140 --> 00:28:57,680
case you create your teams and then

00:28:55,460 --> 00:28:59,810
whenever someone joins you create a user

00:28:57,680 --> 00:29:02,530
and so this is this gets into more of

00:28:59,810 --> 00:29:05,390
the what I mentioned earlier where and

00:29:02,530 --> 00:29:07,250
Hacha Corp we have a module that we

00:29:05,390 --> 00:29:08,720
actually reuse internally which is the

00:29:07,250 --> 00:29:10,340
employee module and

00:29:08,720 --> 00:29:12,860
whenever somebody joins the company we

00:29:10,340 --> 00:29:14,780
modify a line we create a module

00:29:12,860 --> 00:29:16,370
instance for that employee and the

00:29:14,780 --> 00:29:18,110
module instance will actually depending

00:29:16,370 --> 00:29:19,430
on the type of employee they are did

00:29:18,110 --> 00:29:21,500
what team did they join and what do they

00:29:19,430 --> 00:29:23,050
do maybe they get a pager due to user

00:29:21,500 --> 00:29:25,340
maybe they don't get a pager due to user

00:29:23,050 --> 00:29:26,930
maybe they get access to these github

00:29:25,340 --> 00:29:27,950
repositories maybe they don't maybe

00:29:26,930 --> 00:29:31,730
that's a read-only access

00:29:27,950 --> 00:29:33,230
etc we probably automate I think four or

00:29:31,730 --> 00:29:35,150
five services right now we're trying to

00:29:33,230 --> 00:29:37,400
do more on the big one we really want to

00:29:35,150 --> 00:29:39,770
automate is gee sweet Jesus wheat is a

00:29:37,400 --> 00:29:43,310
big pain so we're trying to basically

00:29:39,770 --> 00:29:45,410
make it so that you join the company we

00:29:43,310 --> 00:29:47,300
create a line of terraform code we were

00:29:45,410 --> 00:29:49,550
on terraform apply and you could access

00:29:47,300 --> 00:29:51,620
all the systems you quit the company we

00:29:49,550 --> 00:29:54,020
delete your thing terraform removes your

00:29:51,620 --> 00:29:56,300
access from all the systems right and so

00:29:54,020 --> 00:29:58,280
we don't have this whole like long

00:29:56,300 --> 00:29:59,930
Google Doc or something that says when

00:29:58,280 --> 00:30:01,220
someone joins make sure you add them

00:29:59,930 --> 00:30:04,790
here and add them here that all goes

00:30:01,220 --> 00:30:07,250
away the other thing is this is an

00:30:04,790 --> 00:30:08,480
example of a schedule so this schedules

00:30:07,250 --> 00:30:10,370
are actually really complicated so the

00:30:08,480 --> 00:30:13,070
real there's a dot dot dot which is like

00:30:10,370 --> 00:30:14,840
30 30 more lines of configuration but

00:30:13,070 --> 00:30:17,360
you could actually in addition to the

00:30:14,840 --> 00:30:19,100
organizational structure start doing

00:30:17,360 --> 00:30:23,600
things like the on-call schedules in

00:30:19,100 --> 00:30:26,780
code so another example of data dogs are

00:30:23,600 --> 00:30:28,160
kind of similar to Pedro Duty but a

00:30:26,780 --> 00:30:31,160
little bit different in the sense that

00:30:28,160 --> 00:30:33,110
you know the the current view point

00:30:31,160 --> 00:30:35,780
behind applications is please sort of

00:30:33,110 --> 00:30:38,900
send as many metrics and logs and so on

00:30:35,780 --> 00:30:40,790
to some sync and they'll get filters

00:30:38,900 --> 00:30:42,380
somewhere else like as an application

00:30:40,790 --> 00:30:44,690
developer you want them to expose as

00:30:42,380 --> 00:30:47,300
much as possible and then figure it out

00:30:44,690 --> 00:30:50,090
later and so one of the benefits of the

00:30:47,300 --> 00:30:51,380
data dog provider with terraform is you

00:30:50,090 --> 00:30:54,290
could actually define some of your

00:30:51,380 --> 00:30:56,930
graphs that you want to use as code and

00:30:54,290 --> 00:30:58,160
and the whole thing with terraform is it

00:30:56,930 --> 00:30:59,750
isn't all or nothing so you could still

00:30:58,160 --> 00:31:01,220
do manual you can still log into data

00:30:59,750 --> 00:31:02,750
dog and manually create graphs and

00:31:01,220 --> 00:31:05,300
dashboards but you could also create a

00:31:02,750 --> 00:31:07,610
bunch of automatically and so here's the

00:31:05,300 --> 00:31:10,040
example of creating a time board in data

00:31:07,610 --> 00:31:16,130
dog this example is using sort of the

00:31:10,040 --> 00:31:18,260
average latency for house for Redis and

00:31:16,130 --> 00:31:20,180
one of the things we sort of encourage

00:31:18,260 --> 00:31:22,400
at hofstra Corp and what we try to do is

00:31:20,180 --> 00:31:24,110
when you write we are a service or in

00:31:22,400 --> 00:31:26,480
you might call microservices it's all

00:31:24,110 --> 00:31:28,430
sort of service oriented to me but we're

00:31:26,480 --> 00:31:30,350
sort of service oriented shop when you

00:31:28,430 --> 00:31:32,510
write a new service we ask sort of

00:31:30,350 --> 00:31:34,760
developers to pair it with terraform

00:31:32,510 --> 00:31:36,950
code that also creates dashboards right

00:31:34,760 --> 00:31:38,030
it doesn't just create they actually

00:31:36,950 --> 00:31:40,610
don't need to create any infrastructure

00:31:38,030 --> 00:31:41,960
because we schedulers but we do ask them

00:31:40,610 --> 00:31:44,360
to write some terraform to create some

00:31:41,960 --> 00:31:46,520
dashboards create any alerting sort of

00:31:44,360 --> 00:31:49,040
metrics they want the we do have another

00:31:46,520 --> 00:31:51,350
ops team the ops team also creates our

00:31:49,040 --> 00:31:53,120
own dashboards separately but but you

00:31:51,350 --> 00:31:55,250
know app developers could also log into

00:31:53,120 --> 00:31:57,470
data dog and so this allows both sides

00:31:55,250 --> 00:31:59,420
to create their dashboards to do it in a

00:31:57,470 --> 00:32:05,360
way that's all in code that's all

00:31:59,420 --> 00:32:07,130
reviewable and so on that's good

00:32:05,360 --> 00:32:08,990
and then this is the last example that I

00:32:07,130 --> 00:32:11,270
show and then this is github it's very

00:32:08,990 --> 00:32:13,910
similar I guess to the organizational

00:32:11,270 --> 00:32:17,630
stuff of page or duty but you can manage

00:32:13,910 --> 00:32:21,200
things like organization's user access

00:32:17,630 --> 00:32:25,250
actual new repositories issue labels so

00:32:21,200 --> 00:32:28,100
on all this code so I'll show you the

00:32:25,250 --> 00:32:29,780
example I'll talk about how we use it so

00:32:28,100 --> 00:32:31,790
here's an example of actually creating a

00:32:29,780 --> 00:32:35,180
standard set of github issue labels

00:32:31,790 --> 00:32:37,190
using terraform and you can imagine this

00:32:35,180 --> 00:32:38,630
is a module or something and what this

00:32:37,190 --> 00:32:41,750
would do is just enforce that you have a

00:32:38,630 --> 00:32:43,100
consistent issue labeling taxonomy

00:32:41,750 --> 00:32:45,080
I guess across your organization or

00:32:43,100 --> 00:32:48,440
across whatever repositories you want to

00:32:45,080 --> 00:32:50,180
use we don't actually use it for this so

00:32:48,440 --> 00:32:51,890
at hofstra Corp actually all our

00:32:50,180 --> 00:32:54,320
contributors to repositories are managed

00:32:51,890 --> 00:32:55,790
to terraform so I don't know if there's

00:32:54,320 --> 00:32:59,510
any core contributors to our projects in

00:32:55,790 --> 00:33:02,420
here actually is there's at least one so

00:32:59,510 --> 00:33:04,430
but we don't click collaborators we

00:33:02,420 --> 00:33:06,340
don't actually you know we don't we

00:33:04,430 --> 00:33:09,530
don't add you manually to anything

00:33:06,340 --> 00:33:11,360
everything is managed via github and so

00:33:09,530 --> 00:33:13,760
what this is really really beneficial

00:33:11,360 --> 00:33:14,990
for is usually in an open source project

00:33:13,760 --> 00:33:16,520
when you want to add a collaborator

00:33:14,990 --> 00:33:18,320
there's sort of this dance that happens

00:33:16,520 --> 00:33:19,250
where you ask a bunch of people hey do

00:33:18,320 --> 00:33:20,780
you think this person should be a

00:33:19,250 --> 00:33:22,900
collaborator here's their past like

00:33:20,780 --> 00:33:25,250
contributions do you think they qualify

00:33:22,900 --> 00:33:26,600
you know there's a bunch of emails that

00:33:25,250 --> 00:33:27,800
happen or this way how we used to do

00:33:26,600 --> 00:33:29,240
there's a bunch of emails eventually

00:33:27,800 --> 00:33:30,770
there's some sort of consensus that

00:33:29,240 --> 00:33:33,560
happens and then somebody clicks the

00:33:30,770 --> 00:33:35,480
button now someone who's proposing

00:33:33,560 --> 00:33:36,290
someone to be a collaborator modifies

00:33:35,480 --> 00:33:37,730
the github makes it

00:33:36,290 --> 00:33:38,840
for requests in the pool request body

00:33:37,730 --> 00:33:41,180
includes all their past contributions

00:33:38,840 --> 00:33:43,280
and then just you know CC is the right

00:33:41,180 --> 00:33:44,900
people the right teams and so on and

00:33:43,280 --> 00:33:47,660
github and we use a standard github

00:33:44,900 --> 00:33:49,250
review process to say yeah this person's

00:33:47,660 --> 00:33:51,500
vehicle AB did this person signed the

00:33:49,250 --> 00:33:54,770
right legal documents like very or

00:33:51,500 --> 00:33:57,470
whatever whatever merge wait for the

00:33:54,770 --> 00:33:59,240
apply and then they get access right and

00:33:57,470 --> 00:34:02,150
we're and then right now we're working

00:33:59,240 --> 00:34:04,730
on a system that actually does the

00:34:02,150 --> 00:34:05,990
inverse where it'll be a background job

00:34:04,730 --> 00:34:07,730
that will run and anybody who's a

00:34:05,990 --> 00:34:09,919
collaborator on any system that isn't

00:34:07,730 --> 00:34:11,690
managed by our github will be removed so

00:34:09,919 --> 00:34:14,330
that'll make it so that the only way to

00:34:11,690 --> 00:34:16,850
actually add collapses via our

00:34:14,330 --> 00:34:18,260
automation setup and so that's an

00:34:16,850 --> 00:34:20,150
example of get up actually one more

00:34:18,260 --> 00:34:22,790
example is every new terraform provider

00:34:20,150 --> 00:34:26,090
that is created actually is done with

00:34:22,790 --> 00:34:29,510
with with terraform so when say someone

00:34:26,090 --> 00:34:32,360
wants to create a new provider for well

00:34:29,510 --> 00:34:33,800
some new service you run a terraform

00:34:32,360 --> 00:34:35,450
command that creates a new repository

00:34:33,800 --> 00:34:38,360
with the right file layout the initial

00:34:35,450 --> 00:34:40,880
file layout the right sort of webhooks

00:34:38,360 --> 00:34:42,290
for CI and so on and then they're ready

00:34:40,880 --> 00:34:45,050
to go that's a one-time thing we don't

00:34:42,290 --> 00:34:46,520
rerun that ever again but we do use that

00:34:45,050 --> 00:34:49,610
to automate sort of the set up of

00:34:46,520 --> 00:34:52,940
repositories so those are a few examples

00:34:49,610 --> 00:34:54,470
of how providers that currently exist

00:34:52,940 --> 00:34:58,070
all those currently exist all those are

00:34:54,470 --> 00:35:00,500
official can be used to use to manage

00:34:58,070 --> 00:35:02,780
things other than infrastructure now I

00:35:00,500 --> 00:35:04,610
want to just talk about how you know you

00:35:02,780 --> 00:35:06,110
could write providers for anything and

00:35:04,610 --> 00:35:08,600
why you would do that

00:35:06,110 --> 00:35:10,820
so terraform is completely pluggable

00:35:08,600 --> 00:35:13,910
it's possible for anybody to write a

00:35:10,820 --> 00:35:16,190
custom provider a provider could be

00:35:13,910 --> 00:35:17,900
written with pretty much anything with

00:35:16,190 --> 00:35:19,310
an api and when I say API it doesn't

00:35:17,900 --> 00:35:21,650
need to be like a network API it could

00:35:19,310 --> 00:35:23,900
be a physical or not physical but a

00:35:21,650 --> 00:35:26,030
local API so it as an example there's

00:35:23,900 --> 00:35:27,710
like an unofficial provider that

00:35:26,030 --> 00:35:29,450
integrates with system resources for

00:35:27,710 --> 00:35:31,010
package installation people basically

00:35:29,450 --> 00:35:34,070
trying to turn terraform into a config

00:35:31,010 --> 00:35:37,030
management tool possible and and

00:35:34,070 --> 00:35:38,840
unofficially people trying to do it

00:35:37,030 --> 00:35:40,520
providers are really really easy to

00:35:38,840 --> 00:35:43,160
write so they have to be written today

00:35:40,520 --> 00:35:44,840
and go not for very much longer but they

00:35:43,160 --> 00:35:46,370
have to be written today and go but

00:35:44,840 --> 00:35:50,119
they're an awesome beginner go project

00:35:46,370 --> 00:35:52,039
we get probably at least once a week we

00:35:50,119 --> 00:35:53,720
across our providers at least once a

00:35:52,039 --> 00:35:55,759
week we get somebody who that is their

00:35:53,720 --> 00:35:59,029
first time ever using go contributing to

00:35:55,759 --> 00:36:02,539
a provider we basically we joke and call

00:35:59,029 --> 00:36:05,299
our provider framework rails rails for

00:36:02,539 --> 00:36:06,740
providers basically it we wrote this

00:36:05,299 --> 00:36:10,039
framework that makes it really really

00:36:06,740 --> 00:36:12,499
easy to add new resources modify the

00:36:10,039 --> 00:36:14,930
behavior of resources test them etc and

00:36:12,499 --> 00:36:16,490
so it's go and go doesn't let you like

00:36:14,930 --> 00:36:17,930
write D s l's or anything so it's not

00:36:16,490 --> 00:36:19,640
hiding it's not doing anything magical

00:36:17,930 --> 00:36:21,200
it's still just basic go but it just

00:36:19,640 --> 00:36:23,749
removes a lot of the boilerplate you

00:36:21,200 --> 00:36:25,130
don't need to understand the core stuff

00:36:23,749 --> 00:36:27,319
going behind the scenes the fact that

00:36:25,130 --> 00:36:29,180
there's RPC happening none of that you

00:36:27,319 --> 00:36:30,950
just sort of get some types in you

00:36:29,180 --> 00:36:32,930
return some the right values and

00:36:30,950 --> 00:36:34,569
terraform handles everything for you so

00:36:32,930 --> 00:36:37,160
there's an awesome beginner project

00:36:34,569 --> 00:36:38,480
whenever we get asked by our community I

00:36:37,160 --> 00:36:39,559
just want to contribute to some open

00:36:38,480 --> 00:36:41,569
source project what should I do

00:36:39,559 --> 00:36:43,430
yeah a lot of people will say please

00:36:41,569 --> 00:36:44,809
write docs for us I've always thought

00:36:43,430 --> 00:36:46,999
that's a pretty boring answer because

00:36:44,809 --> 00:36:48,410
you know someone contributing for the

00:36:46,999 --> 00:36:50,509
first time to open source generally

00:36:48,410 --> 00:36:52,549
wants to make a code impact it's just

00:36:50,509 --> 00:36:55,970
the thing they want to do providers are

00:36:52,549 --> 00:36:57,319
awesome we did and like I said we

00:36:55,970 --> 00:36:58,519
provide a full framework and importantly

00:36:57,319 --> 00:37:00,319
part of that framework is a test

00:36:58,519 --> 00:37:02,660
framework and the test framework really

00:37:00,319 --> 00:37:05,059
does create infrastructures so and we

00:37:02,660 --> 00:37:07,940
run that nightly for you so every single

00:37:05,059 --> 00:37:11,180
night we run accept assess over 100

00:37:07,940 --> 00:37:13,190
providers we those generally take across

00:37:11,180 --> 00:37:15,890
we paralyze them heavily but they still

00:37:13,190 --> 00:37:17,960
take I think eight hours to run and I

00:37:15,890 --> 00:37:20,299
think each night it costs like a few

00:37:17,960 --> 00:37:22,519
thousand dollars but it's all the cloud

00:37:20,299 --> 00:37:25,069
riders comp that to us we found enough

00:37:22,519 --> 00:37:26,359
bugs in the cloud provider systems that

00:37:25,069 --> 00:37:28,759
they find value in this we're basically

00:37:26,359 --> 00:37:30,650
running tests for them but the test

00:37:28,759 --> 00:37:32,269
frameworks really really useful because

00:37:30,650 --> 00:37:36,170
you could verify everything you don't

00:37:32,269 --> 00:37:37,730
need to you don't need to guess so the

00:37:36,170 --> 00:37:39,619
basics of the terraform internals is

00:37:37,730 --> 00:37:41,480
this is one way to look at it and then

00:37:39,619 --> 00:37:43,579
I'll have a visual way so some people

00:37:41,480 --> 00:37:45,140
like the sort of algebraic view which is

00:37:43,579 --> 00:37:47,539
what this is and some people like the

00:37:45,140 --> 00:37:50,480
visual view so we'll have both these are

00:37:47,539 --> 00:37:52,869
the core what I say nouns of terraform

00:37:50,480 --> 00:37:55,339
the core things that are in antara form

00:37:52,869 --> 00:37:57,440
they're important to understand from an

00:37:55,339 --> 00:37:58,940
internal perspective you don't need to

00:37:57,440 --> 00:38:01,940
really understand how they're created or

00:37:58,940 --> 00:38:04,010
managed but basically you have the

00:38:01,940 --> 00:38:07,160
configuration the configuration

00:38:04,010 --> 00:38:09,050
is the target reality what what what the

00:38:07,160 --> 00:38:10,340
user would like their infrastructure or

00:38:09,050 --> 00:38:12,020
what they like the thing is to look like

00:38:10,340 --> 00:38:13,700
because like I said terraform is

00:38:12,020 --> 00:38:16,790
declarative so the configuration

00:38:13,700 --> 00:38:19,130
represents what people want reality to

00:38:16,790 --> 00:38:21,320
be the state is something terraform

00:38:19,130 --> 00:38:23,450
manages which is its current assumption

00:38:21,320 --> 00:38:26,510
about what the world actually looks like

00:38:23,450 --> 00:38:29,540
so it maintains that on its own that's

00:38:26,510 --> 00:38:32,060
the current reality the DIF is basically

00:38:29,540 --> 00:38:33,800
the target reality - the current reality

00:38:32,060 --> 00:38:35,750
so that's what you want to get - right

00:38:33,800 --> 00:38:37,310
like if you if you know where you are

00:38:35,750 --> 00:38:38,990
and you know where you want to be and

00:38:37,310 --> 00:38:40,610
you subtract those two things and that's

00:38:38,990 --> 00:38:44,810
what you have to do and so that's the

00:38:40,610 --> 00:38:47,180
diff the plan is just a is just a way to

00:38:44,810 --> 00:38:48,560
present the diff in a human readable

00:38:47,180 --> 00:38:51,050
form there's really nothing more

00:38:48,560 --> 00:38:53,980
complicated about a plan and then apply

00:38:51,050 --> 00:38:56,930
is an action to resolve the diffence

00:38:53,980 --> 00:38:59,300
apply it now and this is these are all

00:38:56,930 --> 00:39:01,640
how it's actually implemented internally

00:38:59,300 --> 00:39:03,080
in terraform so in terraform we could

00:39:01,640 --> 00:39:05,630
actually do all all the sort of

00:39:03,080 --> 00:39:08,390
algebraic operations on config state and

00:39:05,630 --> 00:39:10,760
if to go to go back and forth and and so

00:39:08,390 --> 00:39:12,320
like for example we don't do it but in

00:39:10,760 --> 00:39:13,940
theory you know it's pretty easy to

00:39:12,320 --> 00:39:16,700
implement for us something like rollback

00:39:13,940 --> 00:39:18,650
and so on because rollback is just you

00:39:16,700 --> 00:39:19,880
know config minus one and then you do

00:39:18,650 --> 00:39:23,200
the right math and then you get the

00:39:19,880 --> 00:39:23,200
right diff and you just resolve the

00:39:26,320 --> 00:39:31,880
different it is is this there's really

00:39:28,640 --> 00:39:34,690
three core systems there's the core of

00:39:31,880 --> 00:39:36,650
terraform there's a set of providers

00:39:34,690 --> 00:39:38,390
that you're executing and those

00:39:36,650 --> 00:39:40,820
providers then talk to the upstream api

00:39:38,390 --> 00:39:42,920
it's terraform core itself we'll never

00:39:40,820 --> 00:39:47,570
make a direct request out to any any

00:39:42,920 --> 00:39:49,670
provider so so providers you can see

00:39:47,570 --> 00:39:51,760
this multiple each provider is its own

00:39:49,670 --> 00:39:53,870
separate binary it's on separate process

00:39:51,760 --> 00:39:56,900
so when you have a configuration with

00:39:53,870 --> 00:39:58,850
AWS and DNS simple and like Google Cloud

00:39:56,900 --> 00:40:00,830
that would actually execute as three

00:39:58,850 --> 00:40:03,200
separate processes in addition of course

00:40:00,830 --> 00:40:05,360
there before terraform manages all that

00:40:03,200 --> 00:40:06,980
for you it starts and to stop some it

00:40:05,360 --> 00:40:12,320
establishes the communication between

00:40:06,980 --> 00:40:15,080
them and so on and then these boxes

00:40:12,320 --> 00:40:18,020
represent sort of the protocol between

00:40:15,080 --> 00:40:20,300
the two so between core

00:40:18,020 --> 00:40:22,100
and the providers it's pretty low level

00:40:20,300 --> 00:40:23,480
but the framework handles this all for

00:40:22,100 --> 00:40:25,280
you but there's really only three

00:40:23,480 --> 00:40:28,430
operations that happen there's a diff

00:40:25,280 --> 00:40:30,260
which is asking the provider given you

00:40:28,430 --> 00:40:32,060
know these two the current state and the

00:40:30,260 --> 00:40:33,440
target said please tell me what

00:40:32,060 --> 00:40:37,130
attributes need to change and this

00:40:33,440 --> 00:40:38,930
returns you saw it before that that idea

00:40:37,130 --> 00:40:40,640
that you know we know there'll be a

00:40:38,930 --> 00:40:42,920
public IP but we don't know it yet

00:40:40,640 --> 00:40:45,500
that's the AWS provider telling core

00:40:42,920 --> 00:40:47,380
that given this diff we know that this

00:40:45,500 --> 00:40:51,080
attribute will exist in the future

00:40:47,380 --> 00:40:53,660
that's the diff apply is given the diff

00:40:51,080 --> 00:40:56,930
makes it happen and then refresh is

00:40:53,660 --> 00:40:59,030
called periodically to actually buy the

00:40:56,930 --> 00:41:00,680
core to given its current say just

00:40:59,030 --> 00:41:03,140
update my current state this is don't

00:41:00,680 --> 00:41:04,700
make any changes just update me so if

00:41:03,140 --> 00:41:07,310
you don't run terraform for a month and

00:41:04,700 --> 00:41:10,340
you rerun terraform it'll it'll refresh

00:41:07,310 --> 00:41:12,980
and then after the refresh it'll know

00:41:10,340 --> 00:41:15,050
sort of if it was wrong of how it be to

00:41:12,980 --> 00:41:18,050
current in structure and then finally on

00:41:15,050 --> 00:41:20,210
the other side it breaks down into basic

00:41:18,050 --> 00:41:22,550
crud you just implement crud and that's

00:41:20,210 --> 00:41:23,900
how the communication happens and then

00:41:22,550 --> 00:41:26,150
all the rest is handled sort of

00:41:23,900 --> 00:41:27,770
everything in these boxes not those

00:41:26,150 --> 00:41:30,290
function definitions but the execution

00:41:27,770 --> 00:41:33,619
of them is handled by the framework and

00:41:30,290 --> 00:41:35,840
we'll see that and so this green part is

00:41:33,619 --> 00:41:40,790
the part that you know anybody could

00:41:35,840 --> 00:41:42,050
write and then if we dive into the the

00:41:40,790 --> 00:41:43,550
provider diving into that green part

00:41:42,050 --> 00:41:45,350
this is pretty much what a provider

00:41:43,550 --> 00:41:47,390
looks like on the inside all these

00:41:45,350 --> 00:41:50,180
bigger square boxes represent resources

00:41:47,390 --> 00:41:53,000
so inside a provider you just have n

00:41:50,180 --> 00:41:55,940
resources a number of resources a

00:41:53,000 --> 00:41:58,790
resource is a schema so a schema is its

00:41:55,940 --> 00:42:01,550
configuration it says that I accept a

00:41:58,790 --> 00:42:05,270
configuration called AMI it's a string I

00:42:01,550 --> 00:42:08,570
accept you know ingress ports it's an

00:42:05,270 --> 00:42:10,010
array of this structure it's a way the

00:42:08,570 --> 00:42:12,109
schema is given the core and it's a way

00:42:10,010 --> 00:42:14,510
for core to actually do sort of some

00:42:12,109 --> 00:42:16,670
static you know semantic sort of

00:42:14,510 --> 00:42:18,830
validation on the configuration before

00:42:16,670 --> 00:42:21,590
we actually try to make infrastructure

00:42:18,830 --> 00:42:22,609
changes so there's a schema and then you

00:42:21,590 --> 00:42:25,670
have lament all the crud operations

00:42:22,609 --> 00:42:28,310
create read update delete and that's it

00:42:25,670 --> 00:42:29,600
because the core actually manages for

00:42:28,310 --> 00:42:31,190
you the framework in the core actually

00:42:29,600 --> 00:42:31,880
manage for you which one should be

00:42:31,190 --> 00:42:34,579
called so

00:42:31,880 --> 00:42:36,529
don't even need to know you know if it

00:42:34,579 --> 00:42:38,119
exists then I want to call update if it

00:42:36,529 --> 00:42:40,009
doesn't exist then I want to call create

00:42:38,119 --> 00:42:41,930
if they're asking for a delete I want to

00:42:40,009 --> 00:42:43,279
delete writing a provider you have to

00:42:41,930 --> 00:42:44,900
worry about any of that the terraform

00:42:43,279 --> 00:42:47,990
will call the right thing at the right

00:42:44,900 --> 00:42:51,859
time you just do what it says and trust

00:42:47,990 --> 00:42:54,619
that the course right so again writing a

00:42:51,859 --> 00:42:56,750
provider is pretty basic prerequisites

00:42:54,619 --> 00:42:59,059
pretty basic requirements so you need to

00:42:56,750 --> 00:43:01,190
know some go but the level of go you

00:42:59,059 --> 00:43:03,769
need to know is is basically going

00:43:01,190 --> 00:43:06,440
through like the tour of go there's a

00:43:03,769 --> 00:43:07,609
there's a thing of there's a thing on

00:43:06,440 --> 00:43:10,220
the go website called the tour goes

00:43:07,609 --> 00:43:13,579
toward golang.org and it's like a 50

00:43:10,220 --> 00:43:16,660
step interactive tutorial to go it takes

00:43:13,579 --> 00:43:18,980
I don't know like 20 minutes 30 minutes

00:43:16,660 --> 00:43:20,059
and after the 20 30 minutes you could

00:43:18,980 --> 00:43:22,789
write you could write a whole provider

00:43:20,059 --> 00:43:25,039
if you wanted to it that's all you need

00:43:22,789 --> 00:43:27,259
to know there's nothing weird about it

00:43:25,039 --> 00:43:28,339
and then obviously you need to know have

00:43:27,259 --> 00:43:29,990
some knowledge about whatever you're

00:43:28,339 --> 00:43:31,940
trying to automate so if you're writing

00:43:29,990 --> 00:43:33,890
a new resource for AWS you should

00:43:31,940 --> 00:43:35,509
probably know about the API for that

00:43:33,890 --> 00:43:40,190
thing that you're trying to call or how

00:43:35,509 --> 00:43:43,579
to use it properly the framework the

00:43:40,190 --> 00:43:45,589
rails for for providers is currently in

00:43:43,579 --> 00:43:47,150
a library called help schema under the

00:43:45,589 --> 00:43:49,190
terraform repo that's why it's called

00:43:47,150 --> 00:43:51,319
that we're actually pulling that out

00:43:49,190 --> 00:43:53,000
into its own repo soon and gonna rename

00:43:51,319 --> 00:43:55,490
it the provider SDK so it'll be its own

00:43:53,000 --> 00:43:58,160
separate thing but this is the framework

00:43:55,490 --> 00:44:00,559
for writing providers it provides you

00:43:58,160 --> 00:44:02,029
with sort of all you have to do to

00:44:00,559 --> 00:44:05,119
implement if writer is implement a

00:44:02,029 --> 00:44:07,400
struct fill in a struct this struct is

00:44:05,119 --> 00:44:08,769
basically the schema and then a function

00:44:07,400 --> 00:44:10,809
pointer to create read update and delete

00:44:08,769 --> 00:44:13,640
you implement the struct and then

00:44:10,809 --> 00:44:15,589
everything else is managed it implements

00:44:13,640 --> 00:44:18,049
a main function for you so which sets up

00:44:15,589 --> 00:44:20,000
the you know outputs the right thing to

00:44:18,049 --> 00:44:21,769
negotiate the RPC connection it

00:44:20,000 --> 00:44:23,390
establishes the RPC connection does

00:44:21,769 --> 00:44:25,089
protocol negotiation to make sure you're

00:44:23,390 --> 00:44:27,829
running the valid version of terraform

00:44:25,089 --> 00:44:29,150
this does all the communication and

00:44:27,829 --> 00:44:30,980
calls the right create read update or

00:44:29,150 --> 00:44:32,690
delete for you and so the framework does

00:44:30,980 --> 00:44:34,880
all this for you makes it really really

00:44:32,690 --> 00:44:36,890
simple and it also provides that test

00:44:34,880 --> 00:44:38,839
framework which I told you about and the

00:44:36,890 --> 00:44:41,440
test framework is executed with normal

00:44:38,839 --> 00:44:44,779
go test which is goes test come in

00:44:41,440 --> 00:44:45,650
there's no custom Runner or anything so

00:44:44,779 --> 00:44:47,720
you just

00:44:45,650 --> 00:44:49,609
like the standard go workflow go build

00:44:47,720 --> 00:44:51,650
go tests all that sort of stuff that's

00:44:49,609 --> 00:44:54,799
what you use with providers and it would

00:44:51,650 --> 00:44:56,900
actually run all this stuff for you this

00:44:54,799 --> 00:44:59,539
is actually the so we dog food

00:44:56,900 --> 00:45:01,069
everything so the core all the core

00:44:59,539 --> 00:45:03,079
providers 100 providers I told you about

00:45:01,069 --> 00:45:04,369
100 percent of them are implemented

00:45:03,079 --> 00:45:07,099
using this helper schema

00:45:04,369 --> 00:45:10,460
there's no provider that's official that

00:45:07,099 --> 00:45:12,109
doesn't use the framework and so they're

00:45:10,460 --> 00:45:14,720
that get the benefit of that is that

00:45:12,109 --> 00:45:16,819
gives you hundreds of examples to do

00:45:14,720 --> 00:45:20,180
things so we're starting to curate all

00:45:16,819 --> 00:45:21,920
the weird things to try to to try to

00:45:20,180 --> 00:45:24,260
create a library for people that are

00:45:21,920 --> 00:45:26,180
writing new resources because generally

00:45:24,260 --> 00:45:27,410
you know we've seen it or someone's seen

00:45:26,180 --> 00:45:30,589
it before and an official provider

00:45:27,410 --> 00:45:32,779
things like we've seen everything from

00:45:30,589 --> 00:45:35,270
the fact we're create returns of 200 but

00:45:32,779 --> 00:45:38,029
actually it doesn't create anything to

00:45:35,270 --> 00:45:39,710
deletes taking days and so how do you

00:45:38,029 --> 00:45:42,349
actually represent like a delete taking

00:45:39,710 --> 00:45:44,599
days and returning back everything's

00:45:42,349 --> 00:45:48,289
been seen before and so the examples

00:45:44,599 --> 00:45:50,359
will have them and then the best place

00:45:48,289 --> 00:45:52,160
to learn more about both like how do you

00:45:50,359 --> 00:45:55,220
use custom providers but also how to

00:45:52,160 --> 00:45:56,690
write them is one you could actually all

00:45:55,220 --> 00:45:59,660
the providers that are official or in

00:45:56,690 --> 00:46:01,160
this separate github organization called

00:45:59,660 --> 00:46:02,390
terraform providers so you could

00:46:01,160 --> 00:46:05,270
actually go there and see any of them

00:46:02,390 --> 00:46:07,369
and and that's a great part place to see

00:46:05,270 --> 00:46:09,520
examples we're working on this new

00:46:07,369 --> 00:46:13,010
section it's new as of like a month ago

00:46:09,520 --> 00:46:17,000
called the extending terraform slash doc

00:46:13,010 --> 00:46:20,390
slash extend which is going to have the

00:46:17,000 --> 00:46:22,910
full library of how to write a provider

00:46:20,390 --> 00:46:25,250
all the weird stuff that you'll see that

00:46:22,910 --> 00:46:27,349
also includes something we call the

00:46:25,250 --> 00:46:29,059
provider development program that's a

00:46:27,349 --> 00:46:30,980
little bit more red tape so you could do

00:46:29,059 --> 00:46:32,569
the top two is anyone can do it push a

00:46:30,980 --> 00:46:34,190
deer and github publish it yourself

00:46:32,569 --> 00:46:37,039
you don't need to ever talk to us ever

00:46:34,190 --> 00:46:39,349
the last thing is a little bit more like

00:46:37,039 --> 00:46:41,210
bureaucratic but if you want us to

00:46:39,349 --> 00:46:42,559
actually test your provider for you and

00:46:41,210 --> 00:46:44,930
release it as part of terraform

00:46:42,559 --> 00:46:47,569
officially you could go through that but

00:46:44,930 --> 00:46:49,760
obviously that requires stuff to happen

00:46:47,569 --> 00:46:52,789
so you got to talk to us for that but

00:46:49,760 --> 00:46:55,490
we'll do it so that's the last part I

00:46:52,789 --> 00:46:58,549
don't want to dive into any actual code

00:46:55,490 --> 00:46:59,569
examples because they're honestly not

00:46:58,549 --> 00:47:02,029
that complicated and they're also

00:46:59,569 --> 00:47:03,920
pretty long just because go is not the

00:47:02,029 --> 00:47:06,199
most tourist language so they're pretty

00:47:03,920 --> 00:47:08,420
long but they're really easy to sort of

00:47:06,199 --> 00:47:18,319
see there so I'm just gonna stop there

00:47:08,420 --> 00:47:19,849
and thank you very much and I don't know

00:47:18,319 --> 00:47:21,380
if we're doing questions yeah absolutely

00:47:19,849 --> 00:47:50,089
thank you very much we have time for

00:47:21,380 --> 00:47:52,969
questions yeah yep yep a little bit yeah

00:47:50,089 --> 00:47:55,729
I mean at a certain point for sure so we

00:47:52,969 --> 00:47:56,749
our viewpoint on all that is that I mean

00:47:55,729 --> 00:47:58,279
kubernetes still running on

00:47:56,749 --> 00:48:00,619
infrastructure either by you or someone

00:47:58,279 --> 00:48:02,390
else and so we work with all the major

00:48:00,619 --> 00:48:05,420
cloud providers and red hat with open

00:48:02,390 --> 00:48:07,849
shift to to basically make terraform

00:48:05,420 --> 00:48:11,119
both the Installer or configurator for

00:48:07,849 --> 00:48:13,430
it so for like gke and so on the Google

00:48:11,119 --> 00:48:15,109
team recommends you know terraform as a

00:48:13,430 --> 00:48:18,140
way to initially sort of lay out service

00:48:15,109 --> 00:48:19,699
accounts and basic sort of you know

00:48:18,140 --> 00:48:21,819
daemon sets or anything you sort of need

00:48:19,699 --> 00:48:27,140
to just be fully deployed on the system

00:48:21,819 --> 00:48:29,180
we are working with hep do right now to

00:48:27,140 --> 00:48:33,859
sort of reproduce a lot of the coop

00:48:29,180 --> 00:48:35,719
control apply logic in terraform so

00:48:33,859 --> 00:48:38,209
basically like something kubernetes

00:48:35,719 --> 00:48:40,880
people are running into is this

00:48:38,209 --> 00:48:42,769
disconnect between your you want to

00:48:40,880 --> 00:48:45,699
maintain your you know Library of

00:48:42,769 --> 00:48:48,049
Alexandria vml files and then you have

00:48:45,699 --> 00:48:49,910
terraform config and they're both

00:48:48,049 --> 00:48:51,410
declarative and so how do you reconcile

00:48:49,910 --> 00:48:53,059
them and we're basically trying to

00:48:51,410 --> 00:48:54,739
create a way for you to bootstrap

00:48:53,059 --> 00:48:56,359
kubernetes clusters from your yeah Mille

00:48:54,739 --> 00:48:58,130
just through terraform because it's part

00:48:56,359 --> 00:48:59,599
of your data center set up but we're not

00:48:58,130 --> 00:49:01,459
trying to replace goop control like you

00:48:59,599 --> 00:49:07,190
would eventually use that but as a

00:49:01,459 --> 00:49:09,519
bootstrapping mechanism yep yep I'll

00:49:07,190 --> 00:49:09,519
repeat

00:49:20,079 --> 00:49:23,650
yes the question was can providers of

00:49:22,089 --> 00:49:25,059
dependencies another provider so if

00:49:23,650 --> 00:49:28,239
you're writing a provider that depended

00:49:25,059 --> 00:49:29,529
on a coop cluster for example so the way

00:49:28,239 --> 00:49:31,869
you would do that is ask for

00:49:29,529 --> 00:49:34,140
configuration to the coop cluster as an

00:49:31,869 --> 00:49:35,650
input to the provider as a required

00:49:34,140 --> 00:49:37,150
configurator providers have

00:49:35,650 --> 00:49:39,640
configuration and they have their own

00:49:37,150 --> 00:49:42,609
schema so for example AWS it'd be like

00:49:39,640 --> 00:49:45,400
you need an access key for your provider

00:49:42,609 --> 00:49:51,150
you might say I need coop credentials

00:49:45,400 --> 00:49:51,150
and that's required configuration yeah

00:49:52,529 --> 00:50:03,400
more questions thank you hi so you've

00:50:01,299 --> 00:50:05,349
already mentioned that I mean the

00:50:03,400 --> 00:50:06,699
already the tied anything is code is

00:50:05,349 --> 00:50:08,140
obviously a bit provocative and

00:50:06,699 --> 00:50:10,059
apparently people have already tried to

00:50:08,140 --> 00:50:12,339
do all kinds of crazy things and you

00:50:10,059 --> 00:50:15,849
already mentioned that why doing though

00:50:12,339 --> 00:50:18,459
so several strange things have come up

00:50:15,849 --> 00:50:21,189
so could you give a forecast on the

00:50:18,459 --> 00:50:24,459
interface stability for providers is

00:50:21,189 --> 00:50:26,890
interface going to be able to handle all

00:50:24,459 --> 00:50:31,119
this yeah it's a good question I won't

00:50:26,890 --> 00:50:33,189
repeat it on the mic so the interface is

00:50:31,119 --> 00:50:35,499
for providers haven't changed once in

00:50:33,189 --> 00:50:37,749
four years but we're gonna change them

00:50:35,499 --> 00:50:40,119
pretty majorly for the first time next

00:50:37,749 --> 00:50:41,890
month because we're about to support a

00:50:40,119 --> 00:50:43,779
bunch of cool new stuff in the language

00:50:41,890 --> 00:50:45,819
a lot of more validation conditionals

00:50:43,779 --> 00:50:48,279
loops bunch of stuff that require richer

00:50:45,819 --> 00:50:50,499
input from the provider the really cool

00:50:48,279 --> 00:50:52,269
thing is the framework makes that

00:50:50,499 --> 00:50:54,549
automatic so actually for all the old

00:50:52,269 --> 00:50:56,769
providers to support both the new and

00:50:54,549 --> 00:50:59,469
older versions simultaneously you just

00:50:56,769 --> 00:51:01,689
have to recompile it update your SDK and

00:50:59,469 --> 00:51:02,799
recompile it's basically like you know

00:51:01,689 --> 00:51:05,019
and there's a new version of Windows or

00:51:02,799 --> 00:51:07,359
Mac you just update the SDK recompile it

00:51:05,019 --> 00:51:09,729
works on the new version or new features

00:51:07,359 --> 00:51:10,689
same thing with terraform terraform will

00:51:09,729 --> 00:51:12,039
actually be able to read the old

00:51:10,689 --> 00:51:13,239
versions but it won't have the new

00:51:12,039 --> 00:51:15,029
validation features and you'll get a

00:51:13,239 --> 00:51:17,349
bunch of warnings but if you just

00:51:15,029 --> 00:51:18,670
recompile will get you'll get all the

00:51:17,349 --> 00:51:22,329
new stuff and we don't plan on changing

00:51:18,670 --> 00:51:24,069
that for a long time so I don't I don't

00:51:22,329 --> 00:51:26,529
see any issues really the new interface

00:51:24,069 --> 00:51:28,779
is really rich but it's mostly optin so

00:51:26,529 --> 00:51:31,829
it's a superset of the old one so I

00:51:28,779 --> 00:51:34,000
think it'll be fine but there will be a

00:51:31,829 --> 00:51:39,550
slight annoyance I guess

00:51:34,000 --> 00:51:45,850
NIDA said to recompile any questions I

00:51:39,550 --> 00:51:57,250
have a couple of minutes well yes I'll

00:51:45,850 --> 00:51:58,830
repeat it yeah so the question is how

00:51:57,250 --> 00:52:01,930
well is there from work for bare metal

00:51:58,830 --> 00:52:04,930
so terraform requires a control plane of

00:52:01,930 --> 00:52:07,390
some sort so basically if you could

00:52:04,930 --> 00:52:09,130
install if there is a control plane for

00:52:07,390 --> 00:52:11,050
your bare metal which is exposed to an

00:52:09,130 --> 00:52:14,110
API then terraform can manage it so

00:52:11,050 --> 00:52:16,840
examples of that would be there are sort

00:52:14,110 --> 00:52:18,280
of bare metal cloud systems that we

00:52:16,840 --> 00:52:21,280
integrate with there's obviously

00:52:18,280 --> 00:52:23,170
OpenStack that we integrate with VMware

00:52:21,280 --> 00:52:25,000
and there's some lighter weight ones

00:52:23,170 --> 00:52:28,720
like we integrate directly in some cases

00:52:25,000 --> 00:52:29,950
with things like qmu and so on but those

00:52:28,720 --> 00:52:31,720
don't work super well because they're a

00:52:29,950 --> 00:52:34,630
single machine specific like you really

00:52:31,720 --> 00:52:36,730
need terraform itself isn't a scheduler

00:52:34,630 --> 00:52:39,730
so you need a scheduler on top of your

00:52:36,730 --> 00:52:41,470
infrastructure to do it and so and then

00:52:39,730 --> 00:52:48,310
in this case of vm scheduler probably

00:52:41,470 --> 00:52:50,560
yeah okay then I would say you're

00:52:48,310 --> 00:52:51,850
staying the whole day yeah I'm not there

00:52:50,560 --> 00:52:53,710
both questions you catch you in the

00:52:51,850 --> 00:52:54,650
break yep thank you very much again

00:52:53,710 --> 00:52:58,980
Mitchell

00:52:54,650 --> 00:53:19,459
[Applause]

00:52:58,980 --> 00:53:19,459

YouTube URL: https://www.youtube.com/watch?v=qa8ZDrxo8a8


