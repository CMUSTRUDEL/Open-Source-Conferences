Title: OSDC 2018 | Providing and Supporting Docker Images by Philipp Krenn
Publication date: 2018-06-22
Playlist: OSDC 2018 | Open Source Data Center Conference
Description: 
	If you want to be taken seriously, you need to provide containers to your users. It’s easy — everybody is uploading containers to Docker Hub, right? Unfortunately, reality is never as easy as it sounds at first. This talk gives an overview of Elastic’s ongoing journey to providing official Docker images:

- Docker Hub: What “official” really means and why we are using our own registry.
- Base image: Just use Alpine — it is small and the perfect fit for containers. We tried that and reconsidered…
- Release policy: What do you actually get in a specific tag and how are we releasing our images?
- Support: Combine two complex systems like Elasticsearch and Docker — and you will get a lot of questions.
- Orchestration: Our current approach for orchestration and how we are treating feature requests.

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de
Blog: http://blog.netways.de
Webinare: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Google+: https://plus.google.com/+netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh

https://www.frametraxx.de/
Captions: 
	00:00:00,540 --> 00:00:03,390
[Music]

00:00:01,330 --> 00:00:03,390
you

00:00:11,750 --> 00:00:16,349
[Music]

00:00:13,279 --> 00:00:18,570
good morning for all the German speakers

00:00:16,349 --> 00:00:22,590
do you know what my last name name means

00:00:18,570 --> 00:00:26,610
in austrian german with 1m crane with

00:00:22,590 --> 00:00:28,379
1/n it's horseradish just to make the

00:00:26,610 --> 00:00:30,210
connection yeah luckily I'm not speaking

00:00:28,379 --> 00:00:31,950
German since I have like I'm mature

00:00:30,210 --> 00:00:33,870
about the nasty but I have an Austrian

00:00:31,950 --> 00:00:35,789
accent so probably English is better for

00:00:33,870 --> 00:00:38,899
everybody and I want to talk about

00:00:35,789 --> 00:00:40,590
docker images and what we do about those

00:00:38,899 --> 00:00:42,239
thanks for the introduction

00:00:40,590 --> 00:00:43,680
I'm part of the infrastructure team I

00:00:42,239 --> 00:00:45,810
always say I'm infrastructure and then

00:00:43,680 --> 00:00:49,110
this is a UNIX pipe I piped it out into

00:00:45,810 --> 00:00:51,750
developer advocacy or avocado so

00:00:49,110 --> 00:00:54,540
whatever and this is the the official

00:00:51,750 --> 00:00:57,360
title that we are using now so who is

00:00:54,540 --> 00:00:58,770
using docker quick show of hands good

00:00:57,360 --> 00:01:01,559
that's the right audience who is using

00:00:58,770 --> 00:01:06,290
docker in production that's still a lot

00:01:01,559 --> 00:01:09,119
who is using docker for stateful images

00:01:06,290 --> 00:01:11,280
that's very few okay and that's the

00:01:09,119 --> 00:01:14,100
usual thing we see it's good to talk

00:01:11,280 --> 00:01:17,429
about but most of you are using that for

00:01:14,100 --> 00:01:20,009
development right like our images maybe

00:01:17,429 --> 00:01:21,539
so who is using our images quick show of

00:01:20,009 --> 00:01:23,639
hands or who is thinking that they're

00:01:21,539 --> 00:01:25,859
using our images because maybe they are

00:01:23,639 --> 00:01:27,709
not who is using other images for

00:01:25,859 --> 00:01:32,100
elasticsearch anybody is aware of that

00:01:27,709 --> 00:01:35,219
you might unsuspectingly but we'll get

00:01:32,100 --> 00:01:37,319
to that so we have this quote internally

00:01:35,219 --> 00:01:38,880
that docker is kind of the world's most

00:01:37,319 --> 00:01:40,859
heavily funded college project or at

00:01:38,880 --> 00:01:42,539
least at this with the feeling we get

00:01:40,859 --> 00:01:44,039
sometimes when we run into barks and

00:01:42,539 --> 00:01:46,259
various things that we don't like so

00:01:44,039 --> 00:01:48,359
much about it but I don't want to rant

00:01:46,259 --> 00:01:50,249
about docker too much I want more to

00:01:48,359 --> 00:01:52,979
talk about kind of the struggle that we

00:01:50,249 --> 00:01:54,929
have by for providing official docker

00:01:52,979 --> 00:01:57,060
images and I think this is the right

00:01:54,929 --> 00:02:00,060
talking logo by the way and we are all

00:01:57,060 --> 00:02:02,179
the Little Nemo fish down here and the

00:02:00,060 --> 00:02:05,579
big bad docker will eat us at some point

00:02:02,179 --> 00:02:07,380
so I want to talk a bit about what even

00:02:05,579 --> 00:02:10,039
is official because officially is kind

00:02:07,380 --> 00:02:12,690
of a fancy word in dr. ecosystem-based

00:02:10,039 --> 00:02:14,400
images for this policy bit about

00:02:12,690 --> 00:02:17,400
security support and finally

00:02:14,400 --> 00:02:21,840
orchestration so what's in the term

00:02:17,400 --> 00:02:22,660
official what you get when you do this

00:02:21,840 --> 00:02:27,880
dr. Paul

00:02:22,660 --> 00:02:29,860
elasticsearch is this official yes are

00:02:27,880 --> 00:02:33,850
we involved in those images anybody

00:02:29,860 --> 00:02:36,910
knows that we are not these are not our

00:02:33,850 --> 00:02:40,720
images because this is very confusing

00:02:36,910 --> 00:02:42,970
you go to hop talker underscore

00:02:40,720 --> 00:02:45,040
elasticsearch and then you have official

00:02:42,970 --> 00:02:47,440
repository you can see their official

00:02:45,040 --> 00:02:49,210
repository elasticsearch the weird thing

00:02:47,440 --> 00:02:52,360
is then down here you have a deprecation

00:02:49,210 --> 00:02:54,250
notice did we give up on docker or what

00:02:52,360 --> 00:02:58,060
happened here the problem is this is

00:02:54,250 --> 00:02:59,380
docker Inc official and elastic the

00:02:58,060 --> 00:03:01,000
people building elasticsearch and the

00:02:59,380 --> 00:03:03,250
other open-source products were never

00:03:01,000 --> 00:03:05,200
involved in these products because that

00:03:03,250 --> 00:03:07,560
was built by dr. Inc but for docker Inc

00:03:05,200 --> 00:03:11,770
this is official because they did does

00:03:07,560 --> 00:03:14,650
we have our custom registry who is aware

00:03:11,770 --> 00:03:16,900
of our custom registry anybody ok if you

00:03:14,650 --> 00:03:21,040
good and this is where we are pushing

00:03:16,900 --> 00:03:22,660
our images Jes was very big in the

00:03:21,040 --> 00:03:24,010
docker ecosystem she she recently

00:03:22,660 --> 00:03:25,750
tweeted that she's kind of surprised

00:03:24,010 --> 00:03:27,580
that not more people are doing this and

00:03:25,750 --> 00:03:29,200
we're also surprised and we also see a

00:03:27,580 --> 00:03:30,430
lot of people complaining if you're

00:03:29,200 --> 00:03:32,230
using a custom registry because

00:03:30,430 --> 00:03:33,790
everybody seems to be using docker hub

00:03:32,230 --> 00:03:35,860
and seems to like it

00:03:33,790 --> 00:03:37,240
and we're not never sure why because we

00:03:35,860 --> 00:03:39,550
were not that happy with the stability

00:03:37,240 --> 00:03:41,770
and performance at some points and we

00:03:39,550 --> 00:03:43,660
have our own cloud service which is

00:03:41,770 --> 00:03:44,980
based on docker images and to spin up

00:03:43,660 --> 00:03:47,800
new clusters for customers

00:03:44,980 --> 00:03:50,050
we need to efficiently and pretty much

00:03:47,800 --> 00:03:52,090
every all the time be able to pull

00:03:50,050 --> 00:03:55,480
images so that's why we started hosting

00:03:52,090 --> 00:03:57,490
our own registry so speed and

00:03:55,480 --> 00:03:59,530
reliability was one of the drivers the

00:03:57,490 --> 00:04:02,140
other one was down low statistics so

00:03:59,530 --> 00:04:05,290
whenever you download our software we

00:04:02,140 --> 00:04:08,380
will keep track of like based on the GUI

00:04:05,290 --> 00:04:10,990
P we will keep track of which version

00:04:08,380 --> 00:04:12,370
are you downloading which product from

00:04:10,990 --> 00:04:14,470
which region are you coming and we have

00:04:12,370 --> 00:04:15,910
a daily email where we see okay these

00:04:14,470 --> 00:04:17,380
are the most downloaded versions and

00:04:15,910 --> 00:04:20,650
these are the most active regions and

00:04:17,380 --> 00:04:22,540
will actively try to engage them in

00:04:20,650 --> 00:04:24,700
sales operations or marketing operations

00:04:22,540 --> 00:04:26,410
based on where we see activity and also

00:04:24,700 --> 00:04:28,600
marketing likes to brag about big

00:04:26,410 --> 00:04:30,580
numbers and they say like oh we had 200

00:04:28,600 --> 00:04:31,840
million downloads of everything and of

00:04:30,580 --> 00:04:33,700
course since everybody is using docker

00:04:31,840 --> 00:04:36,190
nowadays they want to include the docker

00:04:33,700 --> 00:04:37,810
numbers in those so that's why we try

00:04:36,190 --> 00:04:39,280
to keep our own registry because if

00:04:37,810 --> 00:04:41,170
you're using docker hub they have this

00:04:39,280 --> 00:04:43,330
little label like X million downloads

00:04:41,170 --> 00:04:45,250
but we don't get any detailed statistics

00:04:43,330 --> 00:04:47,260
about versions and also not where people

00:04:45,250 --> 00:04:49,920
are coming from so we kind of want to

00:04:47,260 --> 00:04:53,800
keep track of that information as well

00:04:49,920 --> 00:04:56,350
we also have a front end for our docker

00:04:53,800 --> 00:04:58,000
images now which is maybe a little

00:04:56,350 --> 00:05:00,820
cleaner than what you'd get on docker

00:04:58,000 --> 00:05:03,550
hub and we have been thinking about what

00:05:00,820 --> 00:05:05,020
URL that should have because to pull our

00:05:03,550 --> 00:05:08,620
images you have docker dot elastic top

00:05:05,020 --> 00:05:11,110
CEO but we had like our NR 8 nginx

00:05:08,620 --> 00:05:12,760
conflicts we had a hard time making the

00:05:11,110 --> 00:05:14,590
differentiation what is a browser and

00:05:12,760 --> 00:05:17,470
what is the docker pool so we needed a

00:05:14,590 --> 00:05:19,150
different URL just to avoid any problems

00:05:17,470 --> 00:05:22,660
around that any guesses what is the

00:05:19,150 --> 00:05:24,280
right URL for this one and we had like

00:05:22,660 --> 00:05:27,550
various variations but in the end we

00:05:24,280 --> 00:05:29,860
settled for www dot which is kind of

00:05:27,550 --> 00:05:31,360
obvious once you found it and so this is

00:05:29,860 --> 00:05:33,940
where you can see all the images that we

00:05:31,360 --> 00:05:35,590
are building but people are sometimes

00:05:33,940 --> 00:05:38,230
complaining that they have various

00:05:35,590 --> 00:05:42,400
problems around that some have like a

00:05:38,230 --> 00:05:46,210
workflow based on docker hub our current

00:05:42,400 --> 00:05:48,700
registry doesn't work too nicely with IP

00:05:46,210 --> 00:05:50,230
version 6 because the cloud provider

00:05:48,700 --> 00:05:53,050
that we're using doesn't provide IP

00:05:50,230 --> 00:05:54,700
version 6 everywhere in its stack maybe

00:05:53,050 --> 00:05:56,560
they should stick to selling books and

00:05:54,700 --> 00:05:58,960
not doing cloud stuff but that's a

00:05:56,560 --> 00:06:01,120
different discussion and then we have

00:05:58,960 --> 00:06:03,669
China as a problem and that is something

00:06:01,120 --> 00:06:05,919
that we we kind of forgot about that

00:06:03,669 --> 00:06:09,040
China has this Great Firewall and they

00:06:05,919 --> 00:06:11,169
block a lot of stuff but docker hub has

00:06:09,040 --> 00:06:13,090
a proxy in China so that's how you can

00:06:11,169 --> 00:06:17,320
do your downloads there and we said well

00:06:13,090 --> 00:06:19,419
we'll do our own proxy in China should

00:06:17,320 --> 00:06:21,490
be easy problem is to have any downloads

00:06:19,419 --> 00:06:24,340
or anything in China officially you need

00:06:21,490 --> 00:06:26,590
to have a company so by now we have a

00:06:24,340 --> 00:06:28,690
company but it was kind of a lengthy or

00:06:26,590 --> 00:06:30,640
more or lengthier process than we were

00:06:28,690 --> 00:06:32,410
expecting you need to start a company

00:06:30,640 --> 00:06:34,210
and then you have like a lot of legal

00:06:32,410 --> 00:06:36,400
things around that and only then can you

00:06:34,210 --> 00:06:42,280
provide an official proxy or download

00:06:36,400 --> 00:06:46,720
site in China as a fallback we do have

00:06:42,280 --> 00:06:48,700
the kind of slash classic slash

00:06:46,720 --> 00:06:50,090
elasticsearch and we are pushing our own

00:06:48,700 --> 00:06:52,790
images there as well

00:06:50,090 --> 00:06:54,530
so if you need I P version six or if you

00:06:52,790 --> 00:06:56,389
are from China this is your fallback

00:06:54,530 --> 00:06:59,840
where you can get the images these will

00:06:56,389 --> 00:07:01,550
have the same files and images that we

00:06:59,840 --> 00:07:04,460
are pushing to our registry it might

00:07:01,550 --> 00:07:07,370
just be slightly slower because we try

00:07:04,460 --> 00:07:08,960
to be a bit more performant and you can

00:07:07,370 --> 00:07:10,880
get everything that we were building so

00:07:08,960 --> 00:07:13,550
we have added an APM product we have all

00:07:10,880 --> 00:07:15,350
the beads locks - given a elasticsearch

00:07:13,550 --> 00:07:17,300
we're pushing everything there so this

00:07:15,350 --> 00:07:18,919
is pretty much like our elastic and then

00:07:17,300 --> 00:07:23,240
whatever product you want this is where

00:07:18,919 --> 00:07:26,090
you can get those from docker hub so a

00:07:23,240 --> 00:07:27,770
quick quiz is it our image image or is

00:07:26,090 --> 00:07:30,050
it not our image I'm doing this now

00:07:27,770 --> 00:07:32,090
because it's like 20% or so of the

00:07:30,050 --> 00:07:35,240
questions that we have on github are

00:07:32,090 --> 00:07:36,770
from people who are using not our images

00:07:35,240 --> 00:07:38,030
but still come to us with their

00:07:36,770 --> 00:07:39,800
questions and then we're always like

00:07:38,030 --> 00:07:47,500
sorry we cannot really help you with

00:07:39,800 --> 00:07:51,080
those is this our image yes or no yes no

00:07:47,500 --> 00:07:54,650
no it's not our image and it's this our

00:07:51,080 --> 00:07:57,050
image yes this is our image it's this

00:07:54,650 --> 00:07:59,780
one our image no this is also not our

00:07:57,050 --> 00:08:02,570
image it's this one our image yes very

00:07:59,780 --> 00:08:04,520
good thank you and if you know that you

00:08:02,570 --> 00:08:05,930
have already kind of mastered like 20 or

00:08:04,520 --> 00:08:08,150
30 percent of the problems that people

00:08:05,930 --> 00:08:10,820
are running into by using some other

00:08:08,150 --> 00:08:13,880
images and then complaining and so next

00:08:10,820 --> 00:08:19,039
up base images what is everybody using

00:08:13,880 --> 00:08:20,840
for base images Alpine anything DPL

00:08:19,039 --> 00:08:25,190
Ubuntu something in that area

00:08:20,840 --> 00:08:28,400
anything Red Hat paste okay mix who who

00:08:25,190 --> 00:08:31,039
cares strongly about the image who

00:08:28,400 --> 00:08:33,289
doesn't care about the base image okay

00:08:31,039 --> 00:08:35,029
we have everything which is interesting

00:08:33,289 --> 00:08:37,190
and because well we started off with

00:08:35,029 --> 00:08:38,959
Alpine for elasticsearch like two years

00:08:37,190 --> 00:08:40,339
ago because it was what everybody was

00:08:38,959 --> 00:08:41,839
saying like oh it's small just use

00:08:40,339 --> 00:08:43,700
Alpine is kind of the future everybody

00:08:41,839 --> 00:08:45,950
wants to build images on El time because

00:08:43,700 --> 00:08:47,779
well gee ellipses kind of dirty and

00:08:45,950 --> 00:08:50,839
don't use that anymore Musial is much

00:08:47,779 --> 00:08:53,209
better the problem was we could only put

00:08:50,839 --> 00:08:55,220
elasticsearch an airplane because if I

00:08:53,209 --> 00:08:58,280
remember correctly so luxurious JRuby

00:08:55,220 --> 00:08:59,959
and JRuby at least back then but

00:08:58,280 --> 00:09:02,300
probably still now is not officially

00:08:59,959 --> 00:09:04,070
supported on Alpine because it were not

00:09:02,300 --> 00:09:05,690
that widely used and I think

00:09:04,070 --> 00:09:08,000
Cabana which is running a note or the

00:09:05,690 --> 00:09:09,680
note was initially not supported on

00:09:08,000 --> 00:09:11,840
Alpine officially like people made it

00:09:09,680 --> 00:09:13,310
work but it was there was a disclaimer

00:09:11,840 --> 00:09:14,600
like okay notice not officially

00:09:13,310 --> 00:09:16,640
supported and I'll find that changed

00:09:14,600 --> 00:09:18,200
over time but we were always like if we

00:09:16,640 --> 00:09:19,670
want to provide official images we need

00:09:18,200 --> 00:09:21,440
something that is officially supported

00:09:19,670 --> 00:09:25,010
because we we kind of basically covered

00:09:21,440 --> 00:09:27,050
the Alpine support below so for those

00:09:25,010 --> 00:09:29,510
images we were also always using Ubuntu

00:09:27,050 --> 00:09:32,300
which was kind of weird because we had

00:09:29,510 --> 00:09:35,780
different images and then kind of the

00:09:32,300 --> 00:09:37,670
final straw um was why we switched our

00:09:35,780 --> 00:09:39,920
based images was that we have this

00:09:37,670 --> 00:09:42,320
machine learning component in a search

00:09:39,920 --> 00:09:45,520
now which is c plus plus and that c++

00:09:42,320 --> 00:09:47,900
code didn't work on l pan of course and

00:09:45,520 --> 00:09:49,490
it was like okay we need to invest like

00:09:47,900 --> 00:09:50,990
two weeks or more of engineering time

00:09:49,490 --> 00:09:54,020
and then it was decided well probably

00:09:50,990 --> 00:09:56,750
not worth it so we switched to sent to s

00:09:54,020 --> 00:09:59,500
and so all our images starting in five

00:09:56,750 --> 00:10:02,990
point four are now based on sent to us

00:09:59,500 --> 00:10:05,240
why sent to us because most of our

00:10:02,990 --> 00:10:07,010
paying customers are in the u.s. they

00:10:05,240 --> 00:10:09,560
have this very strong tendency it must

00:10:07,010 --> 00:10:11,780
be something redhead based and that was

00:10:09,560 --> 00:10:13,310
kind of like the most common denominator

00:10:11,780 --> 00:10:15,470
we could find for that so that's why all

00:10:13,310 --> 00:10:16,850
our images are now sent to us and it

00:10:15,470 --> 00:10:18,860
doesn't have really a strong technical

00:10:16,850 --> 00:10:20,780
reason why we didn't choose Ubuntu or

00:10:18,860 --> 00:10:22,670
Debian or something like that it was

00:10:20,780 --> 00:10:25,220
just like reddit based makes sales

00:10:22,670 --> 00:10:26,840
slightly easier and we still we're still

00:10:25,220 --> 00:10:28,520
not sure if you really should care that

00:10:26,840 --> 00:10:30,580
much about the base image but a lot of

00:10:28,520 --> 00:10:33,620
people do so that's why we have those

00:10:30,580 --> 00:10:34,880
and basically what we do is on the top

00:10:33,620 --> 00:10:36,620
line you can see where this is coming

00:10:34,880 --> 00:10:39,290
from for example in the elasticsearch

00:10:36,620 --> 00:10:41,000
repository we're taking the same to a7

00:10:39,290 --> 00:10:43,250
image and then we're installing a bunch

00:10:41,000 --> 00:10:45,590
of stuff so this is there currently

00:10:43,250 --> 00:10:47,960
currently the stable version which is

00:10:45,590 --> 00:10:49,850
still based on Java 8 for example so we

00:10:47,960 --> 00:10:53,360
just install a bunch of stuff into that

00:10:49,850 --> 00:10:55,280
and that's what you will get the upside

00:10:53,360 --> 00:10:57,410
of having one base image is it's one

00:10:55,280 --> 00:10:57,950
base image so it's kind of the same

00:10:57,410 --> 00:11:00,260
everywhere

00:10:57,950 --> 00:11:02,740
you don't need to use the Alpine package

00:11:00,260 --> 00:11:06,260
manager and sometimes the debian package

00:11:02,740 --> 00:11:08,180
manager it's all the same everywhere you

00:11:06,260 --> 00:11:10,220
can share more layers since all of them

00:11:08,180 --> 00:11:11,810
are based on sent to s7 all our images

00:11:10,220 --> 00:11:14,390
share those layers and you don't need to

00:11:11,810 --> 00:11:17,090
download various base images and because

00:11:14,390 --> 00:11:17,840
of the JVM your images will not be tiny

00:11:17,090 --> 00:11:19,880
anyway

00:11:17,840 --> 00:11:21,440
so even if you have Alpine and Alpine is

00:11:19,880 --> 00:11:25,070
I don't know whatever 2030 whatever

00:11:21,440 --> 00:11:26,930
megabytes if you add the JDK you will

00:11:25,070 --> 00:11:29,330
still have a hundred fifty or whatever

00:11:26,930 --> 00:11:31,940
megabyte image so just the base image

00:11:29,330 --> 00:11:34,280
won't save you and that's kind of our

00:11:31,940 --> 00:11:37,250
motivation and the other thing was that

00:11:34,280 --> 00:11:40,130
we ran into so this was more than a year

00:11:37,250 --> 00:11:43,640
ago it was fixed but we ran into quite

00:11:40,130 --> 00:11:46,910
some issues around alpine or more

00:11:43,640 --> 00:11:48,590
specifically musial which is probably

00:11:46,910 --> 00:11:51,320
the nice thing but it's just not as

00:11:48,590 --> 00:11:53,000
battle tested as gilepsy and g leap C

00:11:51,320 --> 00:11:55,070
might be older than 30 and nobody wants

00:11:53,000 --> 00:11:57,560
to touch the code but it has been tried

00:11:55,070 --> 00:11:59,720
and tested everywhere and we just ran

00:11:57,560 --> 00:12:02,150
into too many issues around em UCL in

00:11:59,720 --> 00:12:05,060
the end and we got a bit too fed up with

00:12:02,150 --> 00:12:07,250
those and the main downside is of course

00:12:05,060 --> 00:12:09,890
the size because the Alpine image is

00:12:07,250 --> 00:12:14,630
much smaller and so I pulled the numbers

00:12:09,890 --> 00:12:16,400
you can see 5.3 elasticsearch 5.3 this

00:12:14,630 --> 00:12:18,260
one here is the last image that was

00:12:16,400 --> 00:12:20,090
based on Alpine and this is the only l

00:12:18,260 --> 00:12:24,380
pine image here and you can see well

00:12:20,090 --> 00:12:27,920
this is much smaller and based on 5.4 or

00:12:24,380 --> 00:12:30,290
I've used 5.6 you can see those images

00:12:27,920 --> 00:12:32,630
are all now based on central 7 so

00:12:30,290 --> 00:12:35,570
they're larger I've also thrown in the

00:12:32,630 --> 00:12:37,880
latest stable six release which is 6.2

00:12:35,570 --> 00:12:40,550
and I have like an internal built for

00:12:37,880 --> 00:12:43,850
6.3 which will come out soon where we

00:12:40,550 --> 00:12:45,980
had another change um so just for the

00:12:43,850 --> 00:12:49,880
size comparison you can see Alpine here

00:12:45,980 --> 00:12:52,520
was 160 max or so and now we're 5 to 700

00:12:49,880 --> 00:12:54,680
megabytes so yeah the size increased

00:12:52,520 --> 00:13:00,770
quite a bit who is concerned with that

00:12:54,680 --> 00:13:05,300
change anybody question is why it takes

00:13:00,770 --> 00:13:06,830
time yes exactly that is kind of the

00:13:05,300 --> 00:13:08,690
point maybe I have that in one of the

00:13:06,830 --> 00:13:09,800
upcoming slides this thing is I totally

00:13:08,690 --> 00:13:12,110
understand that if you have like

00:13:09,800 --> 00:13:14,170
something that you deploy 20 times a day

00:13:12,110 --> 00:13:17,150
but half now you're deploying

00:13:14,170 --> 00:13:19,010
elasticsearch it's probably not

00:13:17,150 --> 00:13:20,780
something that changes on a daily basis

00:13:19,010 --> 00:13:22,160
I think that is the main issue or the

00:13:20,780 --> 00:13:25,340
main difference if you have a stateless

00:13:22,160 --> 00:13:26,630
image that changes very frequently you

00:13:25,340 --> 00:13:28,010
probably want or something that changes

00:13:26,630 --> 00:13:29,630
very frequently you want to have a small

00:13:28,010 --> 00:13:31,610
image because I get it you need more

00:13:29,630 --> 00:13:34,820
storage you transfer over the net

00:13:31,610 --> 00:13:36,110
takes time it's just not that nice but

00:13:34,820 --> 00:13:38,450
for elasticsearch how often are you

00:13:36,110 --> 00:13:42,620
changing elasticsearch we're basically

00:13:38,450 --> 00:13:53,390
releasing every two weeks at most so I

00:13:42,620 --> 00:13:55,519
guess yeah but still the image should be

00:13:53,390 --> 00:13:57,200
cached so even if you start it up and

00:13:55,519 --> 00:13:59,180
down like that decides okay it will take

00:13:57,200 --> 00:14:01,279
up some disk space on your notes but

00:13:59,180 --> 00:14:02,870
probably compared to the amount of data

00:14:01,279 --> 00:14:05,329
you put into elasticsearch the image

00:14:02,870 --> 00:14:08,060
size will still be tiny so that's kind

00:14:05,329 --> 00:14:09,890
of I'm just asking and trying to get a

00:14:08,060 --> 00:14:11,450
feeling because our assumption is you

00:14:09,890 --> 00:14:13,310
don't care that much about the image

00:14:11,450 --> 00:14:14,930
size because you're not changing that on

00:14:13,310 --> 00:14:16,970
a daily basis but it's weekly or even

00:14:14,930 --> 00:14:18,829
monthly and you probably have a lot of

00:14:16,970 --> 00:14:21,079
data in there anyway so if the image is

00:14:18,829 --> 00:14:24,079
200 megabytes or 500 megabytes if you

00:14:21,079 --> 00:14:38,630
have 500 gigs of data in there who cares

00:14:24,079 --> 00:14:41,839
okay okay we'll see if we get to nicer

00:14:38,630 --> 00:14:44,180
images at some point yeah like I said

00:14:41,839 --> 00:14:46,190
does it matter stateful status or just

00:14:44,180 --> 00:14:47,870
at the speed of 1/2 new deploy our

00:14:46,190 --> 00:14:49,910
argumentation is it doesn't matter that

00:14:47,870 --> 00:14:51,019
much or that's our assumption but if

00:14:49,910 --> 00:14:52,610
somebody has very strong feelings

00:14:51,019 --> 00:14:54,470
they're always interested in kind of

00:14:52,610 --> 00:14:56,540
getting that feedback and we might

00:14:54,470 --> 00:14:59,300
reconsider I'm not saying we will change

00:14:56,540 --> 00:15:01,660
that very soon but we might put more

00:14:59,300 --> 00:15:03,890
effort into it um the other thing is

00:15:01,660 --> 00:15:06,110
docker images are nice because they're

00:15:03,890 --> 00:15:07,940
pre-built and everything is included by

00:15:06,110 --> 00:15:11,779
default but what to include if you have

00:15:07,940 --> 00:15:15,709
multiple versions so in five point X

00:15:11,779 --> 00:15:18,260
versions we you know we have the open

00:15:15,709 --> 00:15:20,149
source components we have expec which is

00:15:18,260 --> 00:15:22,100
both free components and commercial

00:15:20,149 --> 00:15:24,860
components the question is what do you

00:15:22,100 --> 00:15:26,720
put in those images and our initial

00:15:24,860 --> 00:15:28,519
assumption was that people want to use

00:15:26,720 --> 00:15:31,880
the problem production so we'll bundle

00:15:28,519 --> 00:15:33,860
in our production or our commercial

00:15:31,880 --> 00:15:36,079
things as well so the commercial things

00:15:33,860 --> 00:15:37,790
are expec and we have added those so

00:15:36,079 --> 00:15:40,970
what you get with the five point X

00:15:37,790 --> 00:15:42,620
images you will get a Platinum trial you

00:15:40,970 --> 00:15:45,470
can disable all of these features and

00:15:42,620 --> 00:15:46,910
you just get what you get for free and

00:15:45,470 --> 00:15:49,760
basically use it like the open-source

00:15:46,910 --> 00:15:51,170
image but this is the one image that we

00:15:49,760 --> 00:15:53,270
provided and then people were confused

00:15:51,170 --> 00:15:54,770
and said oh I always have to pass in

00:15:53,270 --> 00:15:56,270
this environment variables to actually

00:15:54,770 --> 00:15:57,730
disable your commercial feed just

00:15:56,270 --> 00:16:00,770
because I don't want to use them and

00:15:57,730 --> 00:16:02,390
well then we changed for six because

00:16:00,770 --> 00:16:05,270
this is kind of a breaking change we

00:16:02,390 --> 00:16:06,950
change that so on in six point zero to

00:16:05,270 --> 00:16:10,190
six point two we have three different

00:16:06,950 --> 00:16:13,130
images basic this is the open source

00:16:10,190 --> 00:16:14,600
code and the free stuff that you can use

00:16:13,130 --> 00:16:16,460
that is the default image that you get

00:16:14,600 --> 00:16:19,130
so if you just pull elasticsearch for

00:16:16,460 --> 00:16:20,900
example this is what you get we have a

00:16:19,130 --> 00:16:24,050
purely open source image and then we

00:16:20,900 --> 00:16:25,490
have a Platinum trial so we have three

00:16:24,050 --> 00:16:28,130
different images and you can pick what

00:16:25,490 --> 00:16:30,740
fits your use case best and now for six

00:16:28,130 --> 00:16:32,780
point three we have changed how we

00:16:30,740 --> 00:16:35,420
structure code internally so we have

00:16:32,780 --> 00:16:37,130
this open source basis and then we have

00:16:35,420 --> 00:16:38,960
changed the commercial code we have on

00:16:37,130 --> 00:16:40,850
top of that to be open code as well so

00:16:38,960 --> 00:16:43,730
now we have you can see even our

00:16:40,850 --> 00:16:45,620
commercial code on github now just to

00:16:43,730 --> 00:16:48,290
show you what is there you still have

00:16:45,620 --> 00:16:49,310
the part that is free to use for some

00:16:48,290 --> 00:16:51,080
stuff you still need a commercial

00:16:49,310 --> 00:16:54,440
license but you can still see all the

00:16:51,080 --> 00:16:58,220
code and for that we kind of like all we

00:16:54,440 --> 00:17:02,780
have two layers now so the in 6.3 and

00:16:58,220 --> 00:17:05,300
onwards we have the default image which

00:17:02,780 --> 00:17:06,830
is includes a basic license and only the

00:17:05,300 --> 00:17:10,460
features that you can use for free are

00:17:06,830 --> 00:17:13,400
enabled if you run a command through the

00:17:10,460 --> 00:17:15,170
API or doing it ivana you can start a

00:17:13,400 --> 00:17:17,480
Platinum trial for the commercial

00:17:15,170 --> 00:17:20,180
features as well but there is also the

00:17:17,480 --> 00:17:21,770
open source image and this is the size

00:17:20,180 --> 00:17:23,900
comparison this is the the one

00:17:21,770 --> 00:17:25,400
containing everything and this is the

00:17:23,900 --> 00:17:27,710
image just containing the open source

00:17:25,400 --> 00:17:30,830
parts so yeah you will get some add

00:17:27,710 --> 00:17:33,170
extra baggage but generally basic has

00:17:30,830 --> 00:17:34,820
sunlights features that you can use by

00:17:33,170 --> 00:17:37,610
the way anybody aware while we have this

00:17:34,820 --> 00:17:39,440
weird split between paid and free expect

00:17:37,610 --> 00:17:45,290
and don't put all the free features in

00:17:39,440 --> 00:17:46,550
open source that's our anti AWS feature

00:17:45,290 --> 00:17:48,830
basically because you can get

00:17:46,550 --> 00:17:50,540
elasticsearch as a service on AWS as

00:17:48,830 --> 00:17:53,120
well which is competing with our own

00:17:50,540 --> 00:17:55,850
cloud service and everything this is

00:17:53,120 --> 00:17:58,370
Apache 2 license AWS will just take and

00:17:55,850 --> 00:17:59,270
provide as a service and that middle

00:17:58,370 --> 00:18:02,030
tier with the

00:17:59,270 --> 00:18:03,470
that is basically our own advantage for

00:18:02,030 --> 00:18:05,690
our cloud service so you can use that

00:18:03,470 --> 00:18:08,240
for free on premise for yourself

00:18:05,690 --> 00:18:09,440
you will get it on our cloud plus the

00:18:08,240 --> 00:18:12,170
commercial stuff on our cloud as well

00:18:09,440 --> 00:18:14,930
but other cloud providers cannot just

00:18:12,170 --> 00:18:16,970
take our work basically and earn money

00:18:14,930 --> 00:18:18,950
through it that's kind of the main idea

00:18:16,970 --> 00:18:22,160
that's why we have this kind of weird

00:18:18,950 --> 00:18:27,440
split okay what do we want for the

00:18:22,160 --> 00:18:29,420
future JDK versions JDK versions are

00:18:27,440 --> 00:18:31,310
kind of a complicated topic by now Java

00:18:29,420 --> 00:18:35,150
seems to want to change very frequently

00:18:31,310 --> 00:18:39,620
so in in the current six point x branch

00:18:35,150 --> 00:18:42,530
we support JDK 8 and 10 so if you get

00:18:39,620 --> 00:18:45,410
the docker images for 6 point or up to 6

00:18:42,530 --> 00:18:47,210
point 2 you always got open JDK 8 for 6

00:18:45,410 --> 00:18:48,650
point 3 which is currently not yet

00:18:47,210 --> 00:18:51,650
available but the eternal build

00:18:48,650 --> 00:18:54,260
candidate uses dedicate 10 and the

00:18:51,650 --> 00:18:56,240
releases will use those as well for the

00:18:54,260 --> 00:18:58,400
next major version we might even need

00:18:56,240 --> 00:19:00,710
the minimum version of JDK 11 which will

00:18:58,400 --> 00:19:02,240
be another long term then but this is

00:19:00,710 --> 00:19:05,300
already getting a bit tricky because we

00:19:02,240 --> 00:19:07,580
support 8 and 10 with which one do you

00:19:05,300 --> 00:19:09,440
build your images or do you create more

00:19:07,580 --> 00:19:11,960
images but then you have like these two

00:19:09,440 --> 00:19:13,490
flavors and then you would need to JDK

00:19:11,960 --> 00:19:14,900
versions and kind of like the numbers of

00:19:13,490 --> 00:19:17,060
images will explode at some point

00:19:14,900 --> 00:19:19,340
because then people are asking for

00:19:17,060 --> 00:19:21,380
multiple base images especially for the

00:19:19,340 --> 00:19:22,430
beats like this lightweight agents that

00:19:21,380 --> 00:19:24,350
we have that we want to roll out

00:19:22,430 --> 00:19:26,270
everywhere people are sometimes asking

00:19:24,350 --> 00:19:28,010
for alpine images and we get that that

00:19:26,270 --> 00:19:29,750
makes more sense because you roll out

00:19:28,010 --> 00:19:32,030
those two dozens or probably hundreds of

00:19:29,750 --> 00:19:34,880
servers and there the size may might

00:19:32,030 --> 00:19:36,860
make a difference and so we might at

00:19:34,880 --> 00:19:39,980
some point provide the beats on Alpine

00:19:36,860 --> 00:19:43,960
maybe and then people are asking about

00:19:39,980 --> 00:19:47,060
windows and want Windows images which

00:19:43,960 --> 00:19:49,130
also makes sense because you know you

00:19:47,060 --> 00:19:51,260
have this weird para virtualization

00:19:49,130 --> 00:19:52,700
layer and if you're using Linux on

00:19:51,260 --> 00:19:54,500
Windows but if you have an up-to-date

00:19:52,700 --> 00:19:55,610
Windows version and have a Windows

00:19:54,500 --> 00:19:58,160
container you don't need this

00:19:55,610 --> 00:19:59,780
virtualization anymore so you might make

00:19:58,160 --> 00:20:02,090
it slightly more efficient if you have

00:19:59,780 --> 00:20:04,280
native Windows images the dance it is on

00:20:02,090 --> 00:20:06,440
our team nobody is using Windows and

00:20:04,280 --> 00:20:08,630
nobody wants to and nobody wants to

00:20:06,440 --> 00:20:10,610
build and maintain those images and we

00:20:08,630 --> 00:20:12,950
always feel like very foreign if we need

00:20:10,610 --> 00:20:15,740
to do or debug anything around that

00:20:12,950 --> 00:20:17,630
so we will see so so far we have avoided

00:20:15,740 --> 00:20:19,640
providing Windows images but at some

00:20:17,630 --> 00:20:20,030
point there might be no more way around

00:20:19,640 --> 00:20:25,160
it

00:20:20,030 --> 00:20:29,420
we'll see release policy um we don't

00:20:25,160 --> 00:20:30,230
have latest for who is any policies a

00:20:29,420 --> 00:20:34,100
problem in that

00:20:30,230 --> 00:20:35,840
who wants latest no okay good because we

00:20:34,100 --> 00:20:37,850
get github issues for that like every

00:20:35,840 --> 00:20:40,280
two months or so and have heated

00:20:37,850 --> 00:20:42,860
discussions okay you're like why would

00:20:40,280 --> 00:20:44,300
you want to do that and yes that's also

00:20:42,860 --> 00:20:46,190
our opinion why would you want to do

00:20:44,300 --> 00:20:50,420
that but a lot of people are like of

00:20:46,190 --> 00:20:52,490
course I want to do that we call this or

00:20:50,420 --> 00:20:54,320
I call this the zombies the those are

00:20:52,490 --> 00:20:55,910
the ideas that should have been killed a

00:20:54,320 --> 00:20:58,760
long time ago but are kind of shambling

00:20:55,910 --> 00:21:00,440
along and that is latest especially for

00:20:58,760 --> 00:21:02,090
anything that is stateful because the

00:21:00,440 --> 00:21:03,890
scenario that we really want to avoid is

00:21:02,090 --> 00:21:06,440
you spin up the three node cluster today

00:21:03,890 --> 00:21:08,480
and in six month you want to add two

00:21:06,440 --> 00:21:10,730
more nodes because you need to have more

00:21:08,480 --> 00:21:12,830
capacity problem is if you're using

00:21:10,730 --> 00:21:14,930
latest maybe the major version has

00:21:12,830 --> 00:21:17,930
changed and you might kill your entire

00:21:14,930 --> 00:21:19,910
cluster with some breaking change which

00:21:17,930 --> 00:21:22,280
could happen so that is why we do not

00:21:19,910 --> 00:21:24,980
have latest like in the very first time

00:21:22,280 --> 00:21:26,570
when we released images like 5-0 I think

00:21:24,980 --> 00:21:28,760
we had latest but we killed the latest

00:21:26,570 --> 00:21:30,080
tech since then there is no latest even

00:21:28,760 --> 00:21:31,880
though a lot of people are very confused

00:21:30,080 --> 00:21:34,190
you will always need to provide the

00:21:31,880 --> 00:21:36,260
exact version number the other thing

00:21:34,190 --> 00:21:37,880
that people are stuck ok I get that you

00:21:36,260 --> 00:21:40,550
don't want to have breaking changes but

00:21:37,880 --> 00:21:42,320
maybe you could provide a tag for a 5 so

00:21:40,550 --> 00:21:44,150
you get the latest version within the 5

00:21:42,320 --> 00:21:46,490
branch or even the minor version do you

00:21:44,150 --> 00:21:49,490
do 5.6 and I get the right patch level

00:21:46,490 --> 00:21:54,620
version we think this is a good idea

00:21:49,490 --> 00:21:57,110
anybody wants to do that one ok yeah

00:21:54,620 --> 00:21:59,240
then that it sounds like a good idea but

00:21:57,110 --> 00:22:01,550
it's probably not one of the things is

00:21:59,240 --> 00:22:03,920
the scene is pretty picky and when it

00:22:01,550 --> 00:22:05,420
writes out data so it writes out

00:22:03,920 --> 00:22:07,880
something with the current version and

00:22:05,420 --> 00:22:10,760
it can only keep that on the same node

00:22:07,880 --> 00:22:12,950
with the exact version of that so the

00:22:10,760 --> 00:22:14,840
shard would it writes out it wants to

00:22:12,950 --> 00:22:16,910
keep that on the same Bluestein version

00:22:14,840 --> 00:22:18,620
so if we have updated the Lucene version

00:22:16,910 --> 00:22:20,390
in one of these minor upgrades you might

00:22:18,620 --> 00:22:22,190
not be able to move your shards to one

00:22:20,390 --> 00:22:24,170
of the other nodes and then your cluster

00:22:22,190 --> 00:22:26,419
might get imbalanced and that is

00:22:24,170 --> 00:22:27,950
something we really want to avoid also

00:22:26,419 --> 00:22:29,359
if you really want to have like there is

00:22:27,950 --> 00:22:31,879
an important bug fix and you want to get

00:22:29,359 --> 00:22:33,559
that bug fix just roll it out everywhere

00:22:31,879 --> 00:22:35,359
and specify exactly the version that you

00:22:33,559 --> 00:22:37,129
want to have otherwise we always have to

00:22:35,359 --> 00:22:39,259
feeling or at least in our system we

00:22:37,129 --> 00:22:42,080
already have too much chaos and unknowns

00:22:39,259 --> 00:22:44,029
and variation we don't want to add more

00:22:42,080 --> 00:22:46,220
variation by having like whatever the

00:22:44,029 --> 00:22:47,749
version is that I rolled out there we

00:22:46,220 --> 00:22:52,070
want to have like one specific version

00:22:47,749 --> 00:22:54,080
and minimize that variation the other

00:22:52,070 --> 00:22:55,580
thing is what's in attack because here

00:22:54,080 --> 00:22:58,340
for example you can see five point three

00:22:55,580 --> 00:23:00,470
point three and the bottom two ones I

00:22:58,340 --> 00:23:04,369
have downloaded five months ago and the

00:23:00,470 --> 00:23:06,710
top one four months ago or the images

00:23:04,369 --> 00:23:08,330
that old or that is probably the output

00:23:06,710 --> 00:23:10,249
from a few months ago I saw that that

00:23:08,330 --> 00:23:11,869
might be slightly older by now but you

00:23:10,249 --> 00:23:14,419
you see there is a difference of one

00:23:11,869 --> 00:23:15,980
month why is that image even though it

00:23:14,419 --> 00:23:17,960
has the same number and we release all

00:23:15,980 --> 00:23:20,539
the same numbers on the same day why

00:23:17,960 --> 00:23:22,720
does this have a newer version or why is

00:23:20,539 --> 00:23:24,980
that in your image than the other ones

00:23:22,720 --> 00:23:27,109
because we had some bug in there and we

00:23:24,980 --> 00:23:28,820
had to refine the image the problem is

00:23:27,109 --> 00:23:31,519
if you have five point three point three

00:23:28,820 --> 00:23:33,169
you really need to check the image ID to

00:23:31,519 --> 00:23:35,059
figure out which one do you have the one

00:23:33,169 --> 00:23:37,249
with the back or the one without the bug

00:23:35,059 --> 00:23:39,470
because right now we don't have any

00:23:37,249 --> 00:23:41,989
versioning for the docker images right

00:23:39,470 --> 00:23:44,330
now we only have versioning for the

00:23:41,989 --> 00:23:45,559
elastic stack version so that's five

00:23:44,330 --> 00:23:49,070
point three point three for everything

00:23:45,559 --> 00:23:50,570
but we don't really have a versioning if

00:23:49,070 --> 00:23:53,330
we fix anything in the docker containers

00:23:50,570 --> 00:23:55,009
so what we currently do is if we find

00:23:53,330 --> 00:23:57,019
something that needs changing we will

00:23:55,009 --> 00:24:00,200
overwrite the tag and you will manually

00:23:57,019 --> 00:24:03,619
need to figure that out if that is a

00:24:00,200 --> 00:24:06,559
good idea is debatable the other thing

00:24:03,619 --> 00:24:08,539
that we suddenly have is oh yeah by the

00:24:06,559 --> 00:24:11,210
way this is with editors I think just

00:24:08,539 --> 00:24:12,169
this week the label schema and these are

00:24:11,210 --> 00:24:15,470
the labels that we have for example

00:24:12,169 --> 00:24:18,679
setting for elasticsearch it still only

00:24:15,470 --> 00:24:22,609
contains the elastic version so you have

00:24:18,679 --> 00:24:23,989
no idea of what this is based on the

00:24:22,609 --> 00:24:25,970
other thing that we have figured out now

00:24:23,989 --> 00:24:29,809
is that suddenly we have a lot of

00:24:25,970 --> 00:24:31,639
dependencies for example the JVM if

00:24:29,809 --> 00:24:33,799
there is a bug or security issue in the

00:24:31,639 --> 00:24:37,070
JVM do weary spin the images that we

00:24:33,799 --> 00:24:39,740
have done two years ago are we doing

00:24:37,070 --> 00:24:42,890
that are we not doing that

00:24:39,740 --> 00:24:44,390
we don't so right now if you're getting

00:24:42,890 --> 00:24:46,130
an old image you will get whatever we

00:24:44,390 --> 00:24:47,720
had when we built that image and it will

00:24:46,130 --> 00:24:49,100
be one year old and whatever security

00:24:47,720 --> 00:24:51,470
issues have been in there

00:24:49,100 --> 00:24:53,059
we will not Reese pin your images right

00:24:51,470 --> 00:24:55,250
now this is another thing that we're

00:24:53,059 --> 00:24:57,559
discussing like if there is a new JDK

00:24:55,250 --> 00:24:59,029
version should we re spin every time

00:24:57,559 --> 00:25:01,309
there is a new JDK version should we

00:24:59,029 --> 00:25:04,070
spin all the old images which will be

00:25:01,309 --> 00:25:05,990
quite a lot because you know different

00:25:04,070 --> 00:25:08,419
versions and different flavors and

00:25:05,990 --> 00:25:11,779
everything lots of releases right now

00:25:08,419 --> 00:25:13,669
you're just keeping the old version yeah

00:25:11,779 --> 00:25:15,740
maybe we will add some image versioning

00:25:13,669 --> 00:25:17,360
later on which might include okay we

00:25:15,740 --> 00:25:19,279
have been we found it back we've been

00:25:17,360 --> 00:25:20,899
repeating the image we've updated the

00:25:19,279 --> 00:25:22,490
JDK version we've been repeating the

00:25:20,899 --> 00:25:24,200
image so far we didn't ever had that

00:25:22,490 --> 00:25:26,059
because then our software was just like

00:25:24,200 --> 00:25:28,250
our dependencies and we had a security

00:25:26,059 --> 00:25:30,980
issue in a direct dependency we had

00:25:28,250 --> 00:25:33,080
another patch level release but suddenly

00:25:30,980 --> 00:25:36,409
you have like the JDK and also the base

00:25:33,080 --> 00:25:37,909
image as a direct dependency currently

00:25:36,409 --> 00:25:39,559
we don't really take care of those and

00:25:37,909 --> 00:25:40,640
if you want to use one of these old

00:25:39,559 --> 00:25:42,440
versions and don't want to get the

00:25:40,640 --> 00:25:45,080
security issues you will need to spin

00:25:42,440 --> 00:25:46,549
your own images I mean you can take our

00:25:45,080 --> 00:25:48,770
code and see what we are doing so it

00:25:46,549 --> 00:25:50,679
should be pretty easy but we don't

00:25:48,770 --> 00:25:52,610
provide that in a registry read yet and

00:25:50,679 --> 00:25:55,789
the other thing is security

00:25:52,610 --> 00:26:01,010
can you run elastic searches root any

00:25:55,789 --> 00:26:03,049
guesses who says yes who says no yeah

00:26:01,010 --> 00:26:06,260
you cannot we will actually system.exit

00:26:03,049 --> 00:26:08,299
the process when we see that and this is

00:26:06,260 --> 00:26:10,279
one of the things that we also see kind

00:26:08,299 --> 00:26:12,980
of frequently I've even had people on

00:26:10,279 --> 00:26:14,899
github who said like our best practice

00:26:12,980 --> 00:26:17,210
is to run everything in the docker

00:26:14,899 --> 00:26:19,429
container is route and we want to run

00:26:17,210 --> 00:26:22,520
that because well it's isolated and we

00:26:19,429 --> 00:26:24,380
don't care and yeah I call these the

00:26:22,520 --> 00:26:26,240
cockroaches and we had the discussion a

00:26:24,380 --> 00:26:28,580
long time ago when we were running the

00:26:26,240 --> 00:26:30,679
server process or elasticsearch and on

00:26:28,580 --> 00:26:32,090
its own and people accept it if you run

00:26:30,679 --> 00:26:33,890
a server process you don't run it this

00:26:32,090 --> 00:26:35,720
route especially since we're using a

00:26:33,890 --> 00:26:38,779
high port we don't need the permissions

00:26:35,720 --> 00:26:40,850
to start on a low port and now with

00:26:38,779 --> 00:26:43,309
docker that idea kind of has come back

00:26:40,850 --> 00:26:44,990
that you want to run stuff is route but

00:26:43,309 --> 00:26:47,720
we don't do it the only way to actually

00:26:44,990 --> 00:26:49,520
do that is you will need to fork the

00:26:47,720 --> 00:26:51,679
source code and comment out the system

00:26:49,520 --> 00:26:53,720
exit otherwise there is no way to run

00:26:51,679 --> 00:26:56,210
elasticsearch this route

00:26:53,720 --> 00:26:58,700
and then we have this other thing we

00:26:56,210 --> 00:27:01,040
have we call it the bootstrap checks we

00:26:58,700 --> 00:27:03,200
assume you're in production if you can

00:27:01,040 --> 00:27:04,700
form a cluster if you're only binding to

00:27:03,200 --> 00:27:06,050
the local network we assume you're in

00:27:04,700 --> 00:27:08,870
development mode we will only show you

00:27:06,050 --> 00:27:10,250
warnings and that cluster Abell state

00:27:08,870 --> 00:27:12,770
basically is okay you could form a

00:27:10,250 --> 00:27:14,600
cluster and we will stop your process if

00:27:12,770 --> 00:27:16,400
you don't have enough file handles or if

00:27:14,600 --> 00:27:18,410
you are using a JDK version where we

00:27:16,400 --> 00:27:19,970
know there is a back that might corrupt

00:27:18,410 --> 00:27:21,440
your data or there is there's a list of

00:27:19,970 --> 00:27:24,140
things that we know that will cause

00:27:21,440 --> 00:27:26,180
problems later on and instead of letting

00:27:24,140 --> 00:27:28,580
you run and fail afterwards we'll in

00:27:26,180 --> 00:27:30,440
production mode fail on startups you

00:27:28,580 --> 00:27:33,650
cannot do that and you need to fix it

00:27:30,440 --> 00:27:35,300
first problem eight with Tucker you

00:27:33,650 --> 00:27:36,830
probably don't want only to point to

00:27:35,300 --> 00:27:38,990
local host because you need to get out

00:27:36,830 --> 00:27:40,040
of your container and then suddenly you

00:27:38,990 --> 00:27:42,140
need to take care of all these

00:27:40,040 --> 00:27:45,170
production things for that we've

00:27:42,140 --> 00:27:47,210
actually added a new discovery type

00:27:45,170 --> 00:27:49,220
which is called single node which is

00:27:47,210 --> 00:27:50,780
pretty much the docker mode so you can

00:27:49,220 --> 00:27:53,360
reach out of the cluster but you still

00:27:50,780 --> 00:27:55,460
cannot form so I you can't get out of

00:27:53,360 --> 00:27:57,710
the container but you cannot form a

00:27:55,460 --> 00:27:59,840
cluster we will actually block that so

00:27:57,710 --> 00:28:03,770
you don't need to fight all these

00:27:59,840 --> 00:28:05,420
bootstrap checks but these checks are

00:28:03,770 --> 00:28:07,250
here to stay so we're not taking them

00:28:05,420 --> 00:28:08,660
away and again we need to fork the

00:28:07,250 --> 00:28:11,170
source code comment them out otherwise

00:28:08,660 --> 00:28:13,190
we will enforce some stuff around that

00:28:11,170 --> 00:28:14,510
we also have removed the default

00:28:13,190 --> 00:28:17,420
credentials the default credentials were

00:28:14,510 --> 00:28:19,010
very kind of nice to use for containers

00:28:17,420 --> 00:28:20,780
because well get the container

00:28:19,010 --> 00:28:22,760
everything is set up just use them by

00:28:20,780 --> 00:28:24,470
now you need some bootstrapping you need

00:28:22,760 --> 00:28:26,180
to provide an environment variable to

00:28:24,470 --> 00:28:28,130
have like a temporary password which you

00:28:26,180 --> 00:28:30,020
then need to change through the API and

00:28:28,130 --> 00:28:32,800
that is the new bootstrapping approach

00:28:30,020 --> 00:28:35,810
which makes it slightly harder also

00:28:32,800 --> 00:28:37,850
certificates what do you do to make

00:28:35,810 --> 00:28:39,320
people use certificates in the easy

00:28:37,850 --> 00:28:41,000
fashion do you create default

00:28:39,320 --> 00:28:43,010
certificates and bake them into the

00:28:41,000 --> 00:28:45,290
image which is pretty much as good as

00:28:43,010 --> 00:28:47,930
not having any certificates anyway or do

00:28:45,290 --> 00:28:49,400
you make people set it up explicitly so

00:28:47,930 --> 00:28:51,860
for our images you will need to set up

00:28:49,400 --> 00:28:53,510
certificates explicitly which again make

00:28:51,860 --> 00:28:58,100
setup a bit harder but unfortunately

00:28:53,510 --> 00:29:00,380
Security's hot support wise the one

00:28:58,100 --> 00:29:02,690
thing that we have is that the

00:29:00,380 --> 00:29:05,900
elasticsearch process runs as the user

00:29:02,690 --> 00:29:06,500
elasticsearch and uses this UID and

00:29:05,900 --> 00:29:09,320
group ID

00:29:06,500 --> 00:29:11,720
and this is what you need and this is

00:29:09,320 --> 00:29:14,630
another thing that the official docker

00:29:11,720 --> 00:29:16,670
hub images were not doing and then every

00:29:14,630 --> 00:29:19,340
now in ten people complain that their

00:29:16,670 --> 00:29:22,160
notes are not coming up and what people

00:29:19,340 --> 00:29:24,320
are then saying is I prefer simple

00:29:22,160 --> 00:29:26,210
fire-and-forget docker containers which

00:29:24,320 --> 00:29:28,190
we were like this is supposed to be a

00:29:26,210 --> 00:29:30,170
production container like this should do

00:29:28,190 --> 00:29:31,160
good stuff or the right stuff this is

00:29:30,170 --> 00:29:32,360
not fire-and-forget

00:29:31,160 --> 00:29:35,600
we don't treat your data like

00:29:32,360 --> 00:29:37,760
fire-and-forget or we don't try to so

00:29:35,600 --> 00:29:39,710
this is not what we want to have in our

00:29:37,760 --> 00:29:41,270
images I know that some people have more

00:29:39,710 --> 00:29:44,450
of this euro approach which probably

00:29:41,270 --> 00:29:47,300
looks something like this but this is

00:29:44,450 --> 00:29:49,870
not what we do with our images we don't

00:29:47,300 --> 00:29:52,730
want to have that so you will need to

00:29:49,870 --> 00:29:55,100
set that correctly we don't mutate the

00:29:52,730 --> 00:29:56,570
bind mounted directory we think this is

00:29:55,100 --> 00:29:58,010
a really bad idea to change anything

00:29:56,570 --> 00:30:00,260
outside of the docker container from

00:29:58,010 --> 00:30:02,960
within the container and we won't do

00:30:00,260 --> 00:30:06,200
that but a lot of people want us to kind

00:30:02,960 --> 00:30:09,260
of magically fix their and we don't

00:30:06,200 --> 00:30:11,470
and yeah and again this is probably one

00:30:09,260 --> 00:30:15,950
of these zombie ideas that people have

00:30:11,470 --> 00:30:17,240
and then I really like this quote those

00:30:15,950 --> 00:30:19,730
who do not understand UNIX are condemned

00:30:17,240 --> 00:30:21,110
to reinvent it but poorly and and this

00:30:19,730 --> 00:30:22,910
is what we see with docker a lot the

00:30:21,110 --> 00:30:24,200
people say oh it's just docker and then

00:30:22,910 --> 00:30:26,420
suddenly you need to know about the

00:30:24,200 --> 00:30:27,800
nukes file permissions again and people

00:30:26,420 --> 00:30:29,150
are like why do I need to know about

00:30:27,800 --> 00:30:32,360
file permissions I just want to use

00:30:29,150 --> 00:30:36,920
docker and we're always like yeah docker

00:30:32,360 --> 00:30:40,340
has things you need to know anybody

00:30:36,920 --> 00:30:42,050
knows these dr. default values for limit

00:30:40,340 --> 00:30:46,250
number of files and limit of number of

00:30:42,050 --> 00:30:50,420
processes what is being set there um it

00:30:46,250 --> 00:30:51,770
was changed its now infinity and that is

00:30:50,420 --> 00:30:54,170
another thing if you have like anything

00:30:51,770 --> 00:30:55,970
stateful which needs some like limits

00:30:54,170 --> 00:30:57,740
you probably want to check that you can

00:30:55,970 --> 00:30:59,090
pretty easily do that by the way so

00:30:57,740 --> 00:31:01,070
since we're using the same two air space

00:30:59,090 --> 00:31:03,860
images and that would be the command to

00:31:01,070 --> 00:31:06,230
check that and you can see this is how

00:31:03,860 --> 00:31:08,390
you can get the limits out of your

00:31:06,230 --> 00:31:10,040
containers if you want to use containers

00:31:08,390 --> 00:31:12,500
for production make sure you check these

00:31:10,040 --> 00:31:14,420
before running like if you don't have

00:31:12,500 --> 00:31:18,530
enough file handles you will have a very

00:31:14,420 --> 00:31:20,269
bad day otherwise afterwards yeah and

00:31:18,530 --> 00:31:22,219
the other thing that we see is peep

00:31:20,269 --> 00:31:23,690
elasticsearch people don't know talker

00:31:22,219 --> 00:31:25,969
and they think well I have two complex

00:31:23,690 --> 00:31:29,509
systems I will combine them and it will

00:31:25,969 --> 00:31:31,849
magically work unfortunately it does not

00:31:29,509 --> 00:31:35,419
normally what you get is like chaos and

00:31:31,849 --> 00:31:37,879
despair and I think our doctor images

00:31:35,419 --> 00:31:40,879
like 50% or more of the support we do is

00:31:37,879 --> 00:31:43,700
basically talker support that's

00:31:40,879 --> 00:31:46,309
obviously the way to do it um yeah and

00:31:43,700 --> 00:31:47,929
we also see docker is a pretty leaky

00:31:46,309 --> 00:31:49,309
abstraction like I know nobody wants to

00:31:47,929 --> 00:31:51,830
use virtual machines anymore because

00:31:49,309 --> 00:31:53,329
they're heavy and everything but docker

00:31:51,830 --> 00:31:55,070
still has this problem around the

00:31:53,329 --> 00:31:57,379
leakiness for example we had this issue

00:31:55,070 --> 00:31:59,119
where something was only happening on

00:31:57,379 --> 00:32:03,950
windows because I don't know that the

00:31:59,119 --> 00:32:06,289
file system oh whatever was thing but

00:32:03,950 --> 00:32:08,059
yeah that makes reproducing box around

00:32:06,289 --> 00:32:09,649
the docker image is fun because you need

00:32:08,059 --> 00:32:11,419
to have all the based on image based

00:32:09,649 --> 00:32:15,669
operating systems to actually try to

00:32:11,419 --> 00:32:18,919
reproduce some issue um yeah fun times

00:32:15,669 --> 00:32:25,700
ok finally orchestration um who is using

00:32:18,919 --> 00:32:29,509
kubernetes who is using swarm one - who

00:32:25,700 --> 00:32:33,049
is using mazes for something like that

00:32:29,509 --> 00:32:35,269
no matter or anything else no ok yeah

00:32:33,049 --> 00:32:36,979
that's pretty much what we see um so

00:32:35,269 --> 00:32:39,320
right now we don't provide any

00:32:36,979 --> 00:32:41,359
orchestration yet we have the docker

00:32:39,320 --> 00:32:43,399
images which you can use but we don't do

00:32:41,359 --> 00:32:45,919
any orchestration what we are in the

00:32:43,399 --> 00:32:47,329
process of doing is testing our images

00:32:45,919 --> 00:32:48,619
for orchestration because every now and

00:32:47,329 --> 00:32:51,099
then you run into things you did not

00:32:48,619 --> 00:32:54,859
expect to happen for example and

00:32:51,099 --> 00:32:57,019
kubernetes up to 1.8 didn't allow dots

00:32:54,859 --> 00:33:00,200
in environment variables and we required

00:32:57,019 --> 00:33:01,399
them and it was kind of like stupid to

00:33:00,200 --> 00:33:03,229
tell people well you cannot use our

00:33:01,399 --> 00:33:05,629
images because we require those dots and

00:33:03,229 --> 00:33:07,539
dots in environment verbs are generally

00:33:05,629 --> 00:33:09,919
illegal character it's just like ok

00:33:07,539 --> 00:33:11,959
doctor needs arts or a talker kubernetes

00:33:09,919 --> 00:33:13,759
needs to reinvent the world and so they

00:33:11,959 --> 00:33:16,609
have their own things around that and

00:33:13,759 --> 00:33:18,589
then you find them and we try to test

00:33:16,609 --> 00:33:22,639
things like that to work around them

00:33:18,589 --> 00:33:24,519
early on and yeah KC Hightower from

00:33:22,639 --> 00:33:27,259
Google

00:33:24,519 --> 00:33:29,269
he's also critical if you have databases

00:33:27,259 --> 00:33:32,119
or matrix cues maybe you still don't

00:33:29,269 --> 00:33:34,690
want to run them on kubernetes and well

00:33:32,119 --> 00:33:36,980
he's a developer advocate for kubernetes

00:33:34,690 --> 00:33:38,539
we're always a bit careful you can do

00:33:36,980 --> 00:33:41,659
that if you think it's a good idea but

00:33:38,539 --> 00:33:43,159
maybe it's not and he also has this

00:33:41,659 --> 00:33:45,320
other thing where he says like basically

00:33:43,159 --> 00:33:48,559
stateful services need to meet you

00:33:45,320 --> 00:33:50,120
halfway because you need to have like

00:33:48,559 --> 00:33:52,700
the right building blocks to interact

00:33:50,120 --> 00:33:54,679
with kubernetes in the right way and

00:33:52,700 --> 00:33:57,289
some systems are further rehab than

00:33:54,679 --> 00:33:59,840
others and I think we are for example

00:33:57,289 --> 00:34:02,269
more bit in the process still so we

00:33:59,840 --> 00:34:04,610
retest and we will probably provide a

00:34:02,269 --> 00:34:06,590
hello chart for kubernetes at some point

00:34:04,610 --> 00:34:09,379
in the future but it's not done yet so

00:34:06,590 --> 00:34:11,599
we're more in the process there are some

00:34:09,379 --> 00:34:13,940
github repositories of people who are

00:34:11,599 --> 00:34:15,919
doing that and they seem to be quite

00:34:13,940 --> 00:34:18,859
widely used but it's nothing we do

00:34:15,919 --> 00:34:20,629
officially right now and the other thing

00:34:18,859 --> 00:34:23,359
is we have this product called cloud

00:34:20,629 --> 00:34:26,359
enterprise which basically is you have

00:34:23,359 --> 00:34:27,980
either your AWS or Escher or Google or

00:34:26,359 --> 00:34:30,050
whatever account or your own hardware

00:34:27,980 --> 00:34:32,000
you have like this we call it runner

00:34:30,050 --> 00:34:33,560
there and that will spin up the right

00:34:32,000 --> 00:34:35,839
taco containers and you basically have a

00:34:33,560 --> 00:34:37,909
fancy UI where you can say okay I want

00:34:35,839 --> 00:34:40,040
to have like this version with this much

00:34:37,909 --> 00:34:41,419
memory and this this space and do I want

00:34:40,040 --> 00:34:43,250
just to have that running on my

00:34:41,419 --> 00:34:44,599
instances and this is one of our

00:34:43,250 --> 00:34:47,330
commercial products and you can do

00:34:44,599 --> 00:34:48,589
upgrades and backups and it will take

00:34:47,330 --> 00:34:51,020
care of everything and resize your

00:34:48,589 --> 00:34:53,300
cluster and since this is a commercial

00:34:51,020 --> 00:34:54,710
product and never sure how much we want

00:34:53,300 --> 00:34:56,540
to invest into kubernetes because it

00:34:54,710 --> 00:34:59,570
would be kind of competing if we have

00:34:56,540 --> 00:35:01,849
like the free kubernetes integration and

00:34:59,570 --> 00:35:05,119
then our commercial offering to

00:35:01,849 --> 00:35:08,089
orchestrate for you we'll see okay to

00:35:05,119 --> 00:35:09,740
wrap up whenever somebody says like

00:35:08,089 --> 00:35:11,570
doctor is disrupting the industry I'm

00:35:09,740 --> 00:35:13,490
never sure if they mean it in a good or

00:35:11,570 --> 00:35:15,530
a bad way because some of the practices

00:35:13,490 --> 00:35:17,480
that we see is probably yes you're

00:35:15,530 --> 00:35:20,270
disrupting by taking stuff down if you

00:35:17,480 --> 00:35:22,670
run them in docker the wrong way so that

00:35:20,270 --> 00:35:25,130
might be one of the ways to put that a

00:35:22,670 --> 00:35:27,230
lot of people ask us like can I use

00:35:25,130 --> 00:35:29,660
elasticsearch for example on docker and

00:35:27,230 --> 00:35:31,220
we say yes of course but that's not the

00:35:29,660 --> 00:35:32,599
question you want to ask the question

00:35:31,220 --> 00:35:35,750
you want to ask is should I run

00:35:32,599 --> 00:35:38,450
elasticsearch on docker and there you

00:35:35,750 --> 00:35:42,020
know we like consultants we always say

00:35:38,450 --> 00:35:43,640
it depends and so if you use docker

00:35:42,020 --> 00:35:45,020
successfully in production already and

00:35:43,640 --> 00:35:47,119
if you have a lot of experience with

00:35:45,020 --> 00:35:47,660
your stateless stuff probably you can do

00:35:47,119 --> 00:35:49,549
it for the state

00:35:47,660 --> 00:35:51,799
full stuff as well if you don't have

00:35:49,549 --> 00:35:55,150
that probably don't start with the state

00:35:51,799 --> 00:35:57,170
full services to get started with docker

00:35:55,150 --> 00:35:59,230
otherwise we don't take any

00:35:57,170 --> 00:36:05,079
responsibility for the pain you suffer

00:35:59,230 --> 00:36:11,329
it's your learning experience then yeah

00:36:05,079 --> 00:36:13,400
managing state is hard and yeah one

00:36:11,329 --> 00:36:15,680
thing you might want to do is split out

00:36:13,400 --> 00:36:17,809
stateful and stateless services in the

00:36:15,680 --> 00:36:21,079
different clusters because it will make

00:36:17,809 --> 00:36:22,880
security and upgrades a better

00:36:21,079 --> 00:36:28,940
experience or an easier experience to

00:36:22,880 --> 00:36:30,140
work around some of these issues yeah if

00:36:28,940 --> 00:36:31,609
you want to learn more about the lastic

00:36:30,140 --> 00:36:34,220
search we're doing a meet-up here on

00:36:31,609 --> 00:36:38,030
tomorrow evening by the way this is just

00:36:34,220 --> 00:36:42,170
like sidenote and with that I'm open for

00:36:38,030 --> 00:36:44,390
questions and complaints and you need to

00:36:42,170 --> 00:36:46,609
change this by the way before you run

00:36:44,390 --> 00:36:48,589
off I have a bunch of stickers here if

00:36:46,609 --> 00:36:50,059
anybody wants stickers grab them and

00:36:48,589 --> 00:36:51,319
then I always take a picture so I can

00:36:50,059 --> 00:36:55,490
prove to my colleagues that I've been

00:36:51,319 --> 00:36:56,599
working today because normally people

00:36:55,490 --> 00:37:00,980
don't really know where I am

00:36:56,599 --> 00:37:07,180
smile everybody very nice

00:37:00,980 --> 00:37:10,730
any questions complaints anybody

00:37:07,180 --> 00:37:14,390
everybody wants lunch lunch is ready at

00:37:10,730 --> 00:37:17,630
1:00 p.m. so we have time then you have

00:37:14,390 --> 00:37:22,190
to ask so if you have questions we have

00:37:17,630 --> 00:37:23,779
plenty of time all right then

00:37:22,190 --> 00:37:26,059
thank you very much for being here

00:37:23,779 --> 00:37:27,410
Phillip thank you for this talk find me

00:37:26,059 --> 00:37:31,599
afterwards if you have any questions you

00:37:27,410 --> 00:37:31,599
don't want to ask in public thanks

00:37:38,630 --> 00:37:44,740
[Music]

00:37:44,190 --> 00:37:49,679
you

00:37:44,740 --> 00:37:49,679

YouTube URL: https://www.youtube.com/watch?v=s-Zmiaf9J-s


