Title: OSDC 2014: Fernando HÃ¶nig - New Data Center Service Model: Cloud + DevOps
Publication date: 2015-01-05
Playlist: OSDC 2014 | Open Source Data Center Conference
Description: 
	With this presentation we would like to show how the world is changing related to Applications Deployment and Infrastructure build models. After this presentation you would be able to improve quality and velocity of software release, and to synchronize development and staging environments with production environment using configuration management tools such as Chef; collect application performance metrics (APM) to view code impact changes with application monitoring tools such as New Relic, statsD, Graphite, or Cloud Monitoring; build workflows to automate routine maintenance tasks using workflow automation tools such as Rundeck and Jenkins, aggregate logs from all devices to identify patterns and spot anomalies using log aggregation tools such as logstash; manage caching needs with tools such as Memcache, Varnish and more. Multi-server environments are now provisioned in minutes instead of the hours it previously took without automation tools.

Find the full program and all slides here: 
http://www.netways.de/osdc/osdc2014/programm
Captions: 
	00:00:13,570 --> 00:00:18,610
our next speaker is Fernando onek he's

00:00:17,260 --> 00:00:20,700
talking about the new daters and the

00:00:18,610 --> 00:00:24,390
service model cloud plus DevOps Evan

00:00:20,700 --> 00:00:30,250
thank you I think you're for coming to

00:00:24,390 --> 00:00:33,870
this talk will be very thankful for net

00:00:30,250 --> 00:00:39,480
waits for hosting this conference and

00:00:33,870 --> 00:00:42,489
for inviting me to present this thing

00:00:39,480 --> 00:00:47,079
idea of the presentation is to talk a

00:00:42,489 --> 00:00:50,140
little bit about how the as you already

00:00:47,079 --> 00:00:53,469
know the world is changing about cloud

00:00:50,140 --> 00:00:57,280
computing and changing from physical

00:00:53,469 --> 00:01:01,449
devices or servers to what we call the

00:00:57,280 --> 00:01:04,629
cloud and also how the develops becomes

00:01:01,449 --> 00:01:06,070
integrated into this this change some of

00:01:04,629 --> 00:01:09,160
the things that i will be talking here

00:01:06,070 --> 00:01:16,050
probably you already know the thing is i

00:01:09,160 --> 00:01:19,750
like to probably remind you what are we

00:01:16,050 --> 00:01:22,090
doing and probably share with you and

00:01:19,750 --> 00:01:24,580
you share with with the rest and also

00:01:22,090 --> 00:01:28,770
with me probably pain points that you're

00:01:24,580 --> 00:01:38,040
facing day to day and with this devops

00:01:28,770 --> 00:01:40,810
under cloud something about me I have a

00:01:38,040 --> 00:01:46,270
almost ten years of experience mostly on

00:01:40,810 --> 00:01:48,930
the ops than the dev move from Argentina

00:01:46,270 --> 00:01:52,649
move it to London three months ago and

00:01:48,930 --> 00:01:55,420
working for rackspace in the UK

00:01:52,649 --> 00:02:02,020
previously work for companies like into

00:01:55,420 --> 00:02:04,649
IBM and HP um on the last two years two

00:02:02,020 --> 00:02:08,679
and a half years mostly dedicated with

00:02:04,649 --> 00:02:13,630
well to monitoring systems playing with

00:02:08,679 --> 00:02:21,250
now years zynga so basically that's my

00:02:13,630 --> 00:02:23,010
my background so as I told before the

00:02:21,250 --> 00:02:30,060
idea is

00:02:23,010 --> 00:02:32,830
how we can switch from this this mess

00:02:30,060 --> 00:02:35,709
probably you the sender is not a mess

00:02:32,830 --> 00:02:37,870
like this but i do remember waking me up

00:02:35,709 --> 00:02:40,780
at 3am in the morning and going to the

00:02:37,870 --> 00:02:45,400
center to change the disk or format a

00:02:40,780 --> 00:02:47,769
machine and it seems that this is

00:02:45,400 --> 00:02:54,040
already changing right now and we are

00:02:47,769 --> 00:02:56,950
now executing some API call to get a new

00:02:54,040 --> 00:03:02,920
server or getting you a system install

00:02:56,950 --> 00:03:07,680
so this is basically what our minds

00:03:02,920 --> 00:03:10,390
needs to get used to the cloud is that

00:03:07,680 --> 00:03:13,269
touchable is not feasible we are not

00:03:10,390 --> 00:03:15,519
seeing what the rest of the people that

00:03:13,269 --> 00:03:18,010
is in the data center doing but we have

00:03:15,519 --> 00:03:22,510
also our application running and running

00:03:18,010 --> 00:03:27,099
fine so just a question how many of you

00:03:22,510 --> 00:03:30,930
are in the cloud totally in the cloud

00:03:27,099 --> 00:03:38,590
one hundred percent in the cloud one

00:03:30,930 --> 00:03:43,200
perfect probably because you know that

00:03:38,590 --> 00:03:47,489
your application is for the cloud and

00:03:43,200 --> 00:03:52,959
that's what I'm trying to say here on

00:03:47,489 --> 00:03:55,329
some myths about the cloud probably most

00:03:52,959 --> 00:04:00,010
of you are not in a cloud because it's

00:03:55,329 --> 00:04:03,130
not secure well the truth is the public

00:04:00,010 --> 00:04:05,169
cloud is a multi-tenant so you're

00:04:03,130 --> 00:04:09,220
sharing resources with other customers

00:04:05,169 --> 00:04:16,000
and potentially could have some nice

00:04:09,220 --> 00:04:18,849
neighbors and they can I know maybe give

00:04:16,000 --> 00:04:24,699
you our problems with a networking or

00:04:18,849 --> 00:04:28,840
some hi IO or whatever so the way to

00:04:24,699 --> 00:04:32,080
remediate this or to alleviate this is

00:04:28,840 --> 00:04:36,310
you can have an on-premise cloud you can

00:04:32,080 --> 00:04:38,080
run your own cloud servers you can

00:04:36,310 --> 00:04:40,870
have a beautiful private cloud on a

00:04:38,080 --> 00:04:43,060
hosting company or you can have a hybrid

00:04:40,870 --> 00:04:46,240
cloud for those people who didn't rise

00:04:43,060 --> 00:04:49,690
the hand when I asked about cloud who is

00:04:46,240 --> 00:04:52,750
in the cloud probably you can have some

00:04:49,690 --> 00:04:57,870
data on on our physical servers on some

00:04:52,750 --> 00:05:01,170
others on the cloud it's too complex

00:04:57,870 --> 00:05:05,550
well there are different types of cloud

00:05:01,170 --> 00:05:10,000
with differing levels of complexity so

00:05:05,550 --> 00:05:12,550
for me the the remediation for this is

00:05:10,000 --> 00:05:15,220
just choose a cloud provider who can

00:05:12,550 --> 00:05:20,590
offer you tools and the support for the

00:05:15,220 --> 00:05:23,880
tools that they're offering I know you

00:05:20,590 --> 00:05:28,630
but in my first beginnings with cloud

00:05:23,880 --> 00:05:31,080
computing and cloud companies the first

00:05:28,630 --> 00:05:34,570
time was very difficult to understand

00:05:31,080 --> 00:05:39,910
how can I provision a server and then

00:05:34,570 --> 00:05:44,710
get the disk and monitoring and database

00:05:39,910 --> 00:05:48,880
or whatever so probably you need to

00:05:44,710 --> 00:05:52,210
check out and and what provider can give

00:05:48,880 --> 00:05:58,210
you tools on the support and the cloud

00:05:52,210 --> 00:06:00,100
is for everything for me it's not it the

00:05:58,210 --> 00:06:03,570
truth is that not all applications are

00:06:00,100 --> 00:06:06,550
suitable for cloud computing and

00:06:03,570 --> 00:06:09,400
probably because of the architecture of

00:06:06,550 --> 00:06:11,740
your application or because the data

00:06:09,400 --> 00:06:13,660
that you're putting on your the univ

00:06:11,740 --> 00:06:17,230
touring and your application could be

00:06:13,660 --> 00:06:19,900
public facing no matter what about

00:06:17,230 --> 00:06:22,570
security thing is these are shared

00:06:19,900 --> 00:06:28,480
resources your disk is shared with other

00:06:22,570 --> 00:06:32,260
tenant so probably you need to get

00:06:28,480 --> 00:06:38,920
better performance or control of your of

00:06:32,260 --> 00:06:41,520
your servers so cloud is not for

00:06:38,920 --> 00:06:41,520
everything

00:06:42,009 --> 00:06:47,990
let's think about some scenario here

00:06:45,169 --> 00:06:51,409
will take up I don't know web

00:06:47,990 --> 00:06:54,379
application and the Green Line it's

00:06:51,409 --> 00:06:56,240
basically the your physical servers I

00:06:54,379 --> 00:06:59,000
mean you're doing the planning and you

00:06:56,240 --> 00:07:02,960
say okay this month i will put another

00:06:59,000 --> 00:07:04,699
server okay thing is between the yellow

00:07:02,960 --> 00:07:10,159
line and the green line you're losing

00:07:04,699 --> 00:07:12,650
customers and between the the yellow and

00:07:10,159 --> 00:07:17,300
the green on the second you are losing

00:07:12,650 --> 00:07:21,349
money basically so this is where the

00:07:17,300 --> 00:07:29,289
cloud can help you on not losing money

00:07:21,349 --> 00:07:33,520
and not losing customers so in order to

00:07:29,289 --> 00:07:39,219
move to the cloud you need to be ready

00:07:33,520 --> 00:07:43,629
you need to understand I'm plaintiff I

00:07:39,219 --> 00:07:48,050
what exactly needs to be done for a a

00:07:43,629 --> 00:07:52,639
success it's complicated at some point

00:07:48,050 --> 00:07:54,800
when you just think on the cloud and say

00:07:52,639 --> 00:07:56,779
hey I'm going to a cloud okay perfect

00:07:54,800 --> 00:07:59,690
tomorrow i will put some servers nope

00:07:56,779 --> 00:08:03,289
encode perfect i'm in the cloud it's not

00:07:59,690 --> 00:08:05,629
as simple as that you need to understand

00:08:03,289 --> 00:08:08,060
what I've been saying before about

00:08:05,629 --> 00:08:15,289
security about where your data is going

00:08:08,060 --> 00:08:21,339
to be stored what the i/o so this is

00:08:15,289 --> 00:08:24,199
when the DevOps comes in so the idea of

00:08:21,339 --> 00:08:29,330
talking off cloud a little bit and the

00:08:24,199 --> 00:08:32,329
DevOps is to focus on how can we

00:08:29,330 --> 00:08:35,529
automate everything how can we use some

00:08:32,329 --> 00:08:42,649
configuration management tools how can

00:08:35,529 --> 00:08:46,490
we merge our ups code with our Deb code

00:08:42,649 --> 00:08:52,390
into one single lane and work together

00:08:46,490 --> 00:08:55,210
between ops and Dev how can we test

00:08:52,390 --> 00:08:58,530
and basically how are we saving money

00:08:55,210 --> 00:09:04,810
time and value for for for the company

00:08:58,530 --> 00:09:09,430
so automated your servers treat your

00:09:04,810 --> 00:09:13,690
servers as commodities pikolinos server

00:09:09,430 --> 00:09:18,000
should be special and by this is you

00:09:13,690 --> 00:09:21,460
should not have service with names with

00:09:18,000 --> 00:09:24,640
Troy decal Skywalker backup or one money

00:09:21,460 --> 00:09:27,370
trainer to whatever it is that you can

00:09:24,640 --> 00:09:32,940
spin up or spin down servers based on

00:09:27,370 --> 00:09:35,560
capacity or needs but you might be able

00:09:32,940 --> 00:09:37,720
to remove the server with Sarah

00:09:35,560 --> 00:09:43,290
consequences for your business for your

00:09:37,720 --> 00:09:46,060
application for your up time whatever so

00:09:43,290 --> 00:09:50,100
how many of you use configuration

00:09:46,060 --> 00:09:58,150
management tools oh that's a lot perfect

00:09:50,100 --> 00:10:01,200
so the idea of using these tools is that

00:09:58,150 --> 00:10:05,710
you can create exactly what you need

00:10:01,200 --> 00:10:08,320
based on on a role that you're needing

00:10:05,710 --> 00:10:11,110
for your application and the good thing

00:10:08,320 --> 00:10:14,770
is you can maintain state so if

00:10:11,110 --> 00:10:18,610
something is being broken for some

00:10:14,770 --> 00:10:20,590
reason you can just execute it again and

00:10:18,610 --> 00:10:23,010
you will have the same result on this on

00:10:20,590 --> 00:10:26,410
the server so you can execute the same

00:10:23,010 --> 00:10:30,130
recipe or or manifest on hundred servers

00:10:26,410 --> 00:10:34,480
and you will should have the same state

00:10:30,130 --> 00:10:37,470
for all of them tools like puppet chef

00:10:34,480 --> 00:10:41,710
uncivil or cell stack could help on this

00:10:37,470 --> 00:10:45,700
so for the ones that not very familiar

00:10:41,710 --> 00:10:48,280
with this let me try to to wrap up a

00:10:45,700 --> 00:10:51,640
little bit so you have a chef server

00:10:48,280 --> 00:10:53,620
with your node objects and cookbooks the

00:10:51,640 --> 00:10:56,050
basically the recipes that you need to

00:10:53,620 --> 00:10:59,500
execute on your virtual cloud or

00:10:56,050 --> 00:11:03,250
physical servers you have an agent on on

00:10:59,500 --> 00:11:04,390
each of those and they're executing with

00:11:03,250 --> 00:11:09,210
the

00:11:04,390 --> 00:11:09,210
chef server is telling to you to execute

00:11:09,420 --> 00:11:20,670
so how many of you use continuous

00:11:13,960 --> 00:11:24,370
integration polls Oh less than the other

00:11:20,670 --> 00:11:28,590
okay thing is with continuous

00:11:24,370 --> 00:11:32,560
integration tools you are trying to

00:11:28,590 --> 00:11:35,350
integrate as a team with the development

00:11:32,560 --> 00:11:40,120
or the development with the operations

00:11:35,350 --> 00:11:41,650
team your server your server code mean

00:11:40,120 --> 00:11:44,940
but your package I mean you're

00:11:41,650 --> 00:11:47,530
installing apache mysql MongoDB whatever

00:11:44,940 --> 00:11:50,830
it's a code and you need to integrate

00:11:47,530 --> 00:11:53,770
that code with the application so base

00:11:50,830 --> 00:11:55,840
it on the release 2.0 the development

00:11:53,770 --> 00:12:01,000
teams I hey I need to improve their

00:11:55,840 --> 00:12:04,240
performance on the Apache server okay

00:12:01,000 --> 00:12:06,340
sounds good perfect what you should do

00:12:04,240 --> 00:12:09,820
as an Operations team basically you need

00:12:06,340 --> 00:12:13,720
to write something on your cookbook or

00:12:09,820 --> 00:12:16,840
manifest to improve the performance of

00:12:13,720 --> 00:12:21,390
the Apache so you need to be NSYNC with

00:12:16,840 --> 00:12:26,820
the application team at some point to

00:12:21,390 --> 00:12:29,980
integrate their changes with yours so

00:12:26,820 --> 00:12:33,160
you need to create the same development

00:12:29,980 --> 00:12:37,330
life cycle as i said the server code is

00:12:33,160 --> 00:12:41,050
also an application you have let's say a

00:12:37,330 --> 00:12:43,210
database server so that's basically an

00:12:41,050 --> 00:12:49,360
application database server it's an

00:12:43,210 --> 00:12:51,580
application on the develop when a

00:12:49,360 --> 00:12:55,480
meeting by development lifecycle is that

00:12:51,580 --> 00:12:59,620
your code needs to be passing through

00:12:55,480 --> 00:13:07,600
all the stages from anal stage staging

00:12:59,620 --> 00:13:11,440
testing uat and production so what is of

00:13:07,600 --> 00:13:14,950
this if we can measure about money time

00:13:11,440 --> 00:13:17,980
or value for the organization about

00:13:14,950 --> 00:13:21,820
money no need to buy expensive tools

00:13:17,980 --> 00:13:25,450
we know that there are a lot of tools in

00:13:21,820 --> 00:13:31,780
the open source community that can help

00:13:25,450 --> 00:13:35,880
us to achieve this certainly we don't

00:13:31,780 --> 00:13:39,360
want deployment nights or weekends and

00:13:35,880 --> 00:13:43,090
the idea is that with this kind of

00:13:39,360 --> 00:13:47,200
integration and and automation tools

00:13:43,090 --> 00:13:50,230
there is no need to stay overnight to

00:13:47,200 --> 00:13:55,480
doing a deployment and better than that

00:13:50,230 --> 00:13:59,260
is stopped having outages about time it

00:13:55,480 --> 00:14:02,530
will speed up our deployment cycle based

00:13:59,260 --> 00:14:05,500
clip class we don't need to wait for

00:14:02,530 --> 00:14:07,660
some specific day to deploy something we

00:14:05,500 --> 00:14:10,090
just push our code it's being tested

00:14:07,660 --> 00:14:14,050
it's being pushed to production and the

00:14:10,090 --> 00:14:15,880
value is that your code becomes an

00:14:14,050 --> 00:14:19,420
enterprise cloud because it's being

00:14:15,880 --> 00:14:21,490
tested on all your environment and the

00:14:19,420 --> 00:14:25,860
good thing is there is a common goal

00:14:21,490 --> 00:14:28,840
across the organization between your

00:14:25,860 --> 00:14:35,520
development team and your operations

00:14:28,840 --> 00:14:44,920
team they're both wants to be blue tape

00:14:35,520 --> 00:14:47,770
an enterprise code so for this the bad

00:14:44,920 --> 00:14:50,020
thing is that we need to change we need

00:14:47,770 --> 00:14:53,710
to change on our mindset we need to

00:14:50,020 --> 00:14:56,950
change on well as i said i'ma knobs and

00:14:53,710 --> 00:15:00,550
I hate devs and debs I think they hate

00:14:56,950 --> 00:15:04,360
ops because they always fighting about

00:15:00,550 --> 00:15:08,710
who's a responsibility when something is

00:15:04,360 --> 00:15:11,260
not right so when this proposal of

00:15:08,710 --> 00:15:13,870
change is more like okay let's work

00:15:11,260 --> 00:15:18,790
together find our payments together and

00:15:13,870 --> 00:15:21,370
try to solve together so it's basically

00:15:18,790 --> 00:15:27,209
culture and a word methodology that we

00:15:21,370 --> 00:15:30,269
need to change or adapt

00:15:27,209 --> 00:15:31,860
and we have the tools for doing this the

00:15:30,269 --> 00:15:37,709
configuration management code management

00:15:31,860 --> 00:15:41,550
testing and monitoring this is a really

00:15:37,709 --> 00:15:46,170
interesting phrase they've been reading

00:15:41,550 --> 00:15:51,990
and it's we've always done it this way

00:15:46,170 --> 00:15:55,230
and I remember our company will be been

00:15:51,990 --> 00:15:58,529
working on before and they don't want to

00:15:55,230 --> 00:16:01,110
change their monitoring tool because

00:15:58,529 --> 00:16:05,639
they used to work always with this

00:16:01,110 --> 00:16:08,309
specific proper Tory tool and then I had

00:16:05,639 --> 00:16:12,360
to create all the infrastructure move

00:16:08,309 --> 00:16:15,600
let's say copy all the servers and then

00:16:12,360 --> 00:16:18,240
show them hey this is being done with

00:16:15,600 --> 00:16:20,569
open source tools and we don't know we

00:16:18,240 --> 00:16:25,470
are not paying anything for for this oh

00:16:20,569 --> 00:16:28,559
really okay sounds interesting now how

00:16:25,470 --> 00:16:31,350
we support well we have a community

00:16:28,559 --> 00:16:35,730
there is helping us and we can also

00:16:31,350 --> 00:16:41,939
provide some patches or whatever to what

00:16:35,730 --> 00:16:46,290
so what are we seeing so they realize

00:16:41,939 --> 00:16:51,449
that there could be a change that you

00:16:46,290 --> 00:16:55,290
can change and just nothing pure or or

00:16:51,449 --> 00:16:58,589
or that needs to be done like forever on

00:16:55,290 --> 00:17:03,209
this way right now we have all these

00:16:58,589 --> 00:17:04,699
DevOps and cloud and I really don't

00:17:03,209 --> 00:17:07,140
think it's going to last forever

00:17:04,699 --> 00:17:09,689
probably for our age it's going to be

00:17:07,140 --> 00:17:16,010
enough but probably for our son or or or

00:17:09,689 --> 00:17:18,539
or more it's not going to be there so

00:17:16,010 --> 00:17:21,449
right now I think it's at time for

00:17:18,539 --> 00:17:25,380
change and think where we are ready to

00:17:21,449 --> 00:17:34,310
do it how many of you know what it's

00:17:25,380 --> 00:17:40,130
combined do you use camping too okay

00:17:34,310 --> 00:17:43,850
perfect the idea is about Kanban or loss

00:17:40,130 --> 00:17:46,610
scram or whatever agile methodology that

00:17:43,850 --> 00:17:54,800
you implement on your on your company is

00:17:46,610 --> 00:17:57,650
to that both teams dev and ops can be

00:17:54,800 --> 00:18:00,800
integrated on on the same methodology

00:17:57,650 --> 00:18:03,890
and try to understand what is the other

00:18:00,800 --> 00:18:07,100
doing and why is not responding so

00:18:03,890 --> 00:18:10,460
quickly so let's say development team

00:18:07,100 --> 00:18:14,360
always want things for yesterday they

00:18:10,460 --> 00:18:17,600
want to deployed their code now and

00:18:14,360 --> 00:18:19,340
sometimes you need to do some analysis

00:18:17,600 --> 00:18:23,560
on on the infrastructure that's being

00:18:19,340 --> 00:18:26,420
deployed for the application or probably

00:18:23,560 --> 00:18:28,970
your ops team is not big enough to

00:18:26,420 --> 00:18:33,530
support the development team or

00:18:28,970 --> 00:18:39,920
development lifecycle so with Kanban you

00:18:33,530 --> 00:18:43,850
can show them that there is no let's say

00:18:39,920 --> 00:18:46,970
I mean that's not we don't want to delay

00:18:43,850 --> 00:18:50,720
their deployment lifecycle we just want

00:18:46,970 --> 00:18:54,140
to help them to deploy your up their

00:18:50,720 --> 00:19:01,850
application and probably they need to

00:18:54,140 --> 00:19:04,130
help us to do the deployment so with

00:19:01,850 --> 00:19:07,250
agile what we can do is basically

00:19:04,130 --> 00:19:11,330
release early release often not released

00:19:07,250 --> 00:19:14,600
several times a day and using CIN City

00:19:11,330 --> 00:19:20,660
that will splain a little bit later that

00:19:14,600 --> 00:19:26,450
ensures quality on on our our code as a

00:19:20,660 --> 00:19:32,900
DevOps we have a lot of tools in fact a

00:19:26,450 --> 00:19:36,560
lot so thing is how we can combine all

00:19:32,900 --> 00:19:39,950
these tools and try to make like a rail

00:19:36,560 --> 00:19:45,370
of what is specifically needed for for

00:19:39,950 --> 00:19:48,110
something so I try to put in groups of

00:19:45,370 --> 00:19:51,850
configuration management code management

00:19:48,110 --> 00:20:00,380
automated workflows or monitoring and

00:19:51,850 --> 00:20:05,630
basically what it's for so what I can

00:20:00,380 --> 00:20:07,220
say is probably the tools that they have

00:20:05,630 --> 00:20:09,559
on conflict management it's basically

00:20:07,220 --> 00:20:13,220
basically on the flavor I mean most of

00:20:09,559 --> 00:20:16,670
you I think you use puppet some others

00:20:13,220 --> 00:20:20,450
use a chef some others you've use salt

00:20:16,670 --> 00:20:22,610
stack and the same thing for for the

00:20:20,450 --> 00:20:24,440
automatic workflows it's basically on

00:20:22,610 --> 00:20:28,640
the needs of each company mean there is

00:20:24,440 --> 00:20:32,240
no such as one specific tool for for

00:20:28,640 --> 00:20:37,400
something same thing with code

00:20:32,240 --> 00:20:40,760
management so at Rackspace we choose to

00:20:37,400 --> 00:20:43,700
use these tools Oh probably we can

00:20:40,760 --> 00:20:46,100
change in the future I mean right now we

00:20:43,700 --> 00:20:50,030
are supporting this this tool for for

00:20:46,100 --> 00:20:57,380
our customers and that's basically what

00:20:50,030 --> 00:21:00,380
we are we're doing so let me talk a

00:20:57,380 --> 00:21:03,770
little bit about CI or and city if you

00:21:00,380 --> 00:21:13,240
have any questions so far just let me

00:21:03,770 --> 00:21:17,000
know so what is CI or and what is city

00:21:13,240 --> 00:21:23,530
how many of you use both let's say C is

00:21:17,000 --> 00:21:27,490
on CD one two three perfect for

00:21:23,530 --> 00:21:30,820
let's talk a little bit about how I how

00:21:27,490 --> 00:21:34,900
do i go faster because that's a main

00:21:30,820 --> 00:21:37,900
problem of IT I mean I want the server

00:21:34,900 --> 00:21:43,170
now I want my application deployed now I

00:21:37,900 --> 00:21:46,510
want my firewall rule apply it now so

00:21:43,170 --> 00:21:49,960
how I they'll go faster on on my

00:21:46,510 --> 00:21:52,120
deployment life cycle so as the

00:21:49,960 --> 00:21:54,940
competition is really unrelenting and

00:21:52,120 --> 00:21:58,480
the customer expectation is pretty high

00:21:54,940 --> 00:22:02,950
on the traditional release approach we

00:21:58,480 --> 00:22:07,300
are just deploying once a while but on

00:22:02,950 --> 00:22:11,800
that time my competition it's basically

00:22:07,300 --> 00:22:14,920
ahead of me so what I need to do is

00:22:11,800 --> 00:22:17,800
transform all these stairs in a single

00:22:14,920 --> 00:22:21,820
line really next to the customer

00:22:17,800 --> 00:22:23,980
expectation and that is when cin CD

00:22:21,820 --> 00:22:26,830
becomes really important because i will

00:22:23,980 --> 00:22:31,240
have my test automated and my deployment

00:22:26,830 --> 00:22:35,650
automated so what's a comment or like to

00:22:31,240 --> 00:22:39,340
say if you write it test it how many of

00:22:35,650 --> 00:22:41,980
you well probably if you're using puppet

00:22:39,340 --> 00:22:44,530
how many you're writing your manifest

00:22:41,980 --> 00:22:47,950
your testing your manifest if the

00:22:44,530 --> 00:22:49,870
manifest is saying install apache are

00:22:47,950 --> 00:22:52,570
you ensuring that Apaches service is

00:22:49,870 --> 00:22:57,310
being installed it's running whatever

00:22:52,570 --> 00:23:01,290
how many of you do then two three four

00:22:57,310 --> 00:23:07,840
perfect good boys so that's the dr

00:23:01,290 --> 00:23:14,200
testing I mean ha and also how many of

00:23:07,840 --> 00:23:17,640
you are checking that the code that you

00:23:14,200 --> 00:23:21,970
are doing on puppet it's basically a

00:23:17,640 --> 00:23:30,460
compliant and is its compliance it has

00:23:21,970 --> 00:23:36,400
the same look at the world its structure

00:23:30,460 --> 00:23:37,280
or or using a common language how many

00:23:36,400 --> 00:23:40,580
of you

00:23:37,280 --> 00:23:43,070
doing that one perfect from the whole

00:23:40,580 --> 00:23:47,450
room only one is checking the decoder

00:23:43,070 --> 00:23:56,450
this writing it's based clip a common

00:23:47,450 --> 00:23:59,120
way to write a puppet manifest so when

00:23:56,450 --> 00:24:02,860
meaning with you write it you need to

00:23:59,120 --> 00:24:05,420
test it is it is really important for

00:24:02,860 --> 00:24:07,880
the rest of the organization that you

00:24:05,420 --> 00:24:13,630
can prove that your code is tested

00:24:07,880 --> 00:24:13,630
because at some point we'll give you a

00:24:14,170 --> 00:24:20,420
little happiness or or or being really

00:24:18,020 --> 00:24:25,840
calmed down when when when a problem

00:24:20,420 --> 00:24:28,730
arise so and you can just rely on

00:24:25,840 --> 00:24:34,430
because there's another problem and not

00:24:28,730 --> 00:24:35,750
your code that you're writing so the

00:24:34,430 --> 00:24:39,170
good thing about continuous integration

00:24:35,750 --> 00:24:44,300
is that gives you insurance and good

00:24:39,170 --> 00:24:48,590
behaviors this picture is nice so you

00:24:44,300 --> 00:24:51,980
need to really pass your code from stage

00:24:48,590 --> 00:24:55,970
or from even your laptops to stage test

00:24:51,980 --> 00:24:59,720
make some integration with with the

00:24:55,970 --> 00:25:04,010
development code and also test on

00:24:59,720 --> 00:25:08,500
production for the ones not they're not

00:25:04,010 --> 00:25:11,750
familiar with Jenkins it pays with this

00:25:08,500 --> 00:25:15,380
the dashboard and you have the status on

00:25:11,750 --> 00:25:21,310
the left then name of the project last

00:25:15,380 --> 00:25:24,470
failure last access plus adoration and

00:25:21,310 --> 00:25:27,890
good thing about Jenkins if you're not

00:25:24,470 --> 00:25:31,520
familiar with is that you can execute

00:25:27,890 --> 00:25:33,860
several things i can talk by chef

00:25:31,520 --> 00:25:37,570
because i'm doing chef so basically i'm

00:25:33,860 --> 00:25:40,660
doing chefs pack I'm doing food critic

00:25:37,570 --> 00:25:45,230
I'm doing Test Kitchen on the same

00:25:40,660 --> 00:25:49,390
Jenkins test so what what I'm sure is

00:25:45,230 --> 00:25:51,149
when I putting a coat and the uncheck on

00:25:49,390 --> 00:25:53,269
Jenkins

00:25:51,149 --> 00:25:57,839
that my code is being deployed in a

00:25:53,269 --> 00:25:59,700
server and I have a test that has been

00:25:57,839 --> 00:26:02,759
run on the server to validate that my

00:25:59,700 --> 00:26:07,289
code is basically running and it's doing

00:26:02,759 --> 00:26:14,519
what I'm expecting to do so continuous

00:26:07,289 --> 00:26:17,609
integration is basically try to merge

00:26:14,519 --> 00:26:20,299
the test that that merge the code you're

00:26:17,609 --> 00:26:24,839
doing with some other co-workers and

00:26:20,299 --> 00:26:27,719
test test your test and test the test of

00:26:24,839 --> 00:26:30,779
your coworker together in order to have

00:26:27,719 --> 00:26:35,729
a single piece of code that is being

00:26:30,779 --> 00:26:38,909
tested so some idea of the how it works

00:26:35,729 --> 00:26:40,919
we have here three lanes let's say the

00:26:38,909 --> 00:26:43,950
Green Lane is the master and then we

00:26:40,919 --> 00:26:46,320
have several branches and the branches

00:26:43,950 --> 00:26:56,309
are several people that are working on

00:26:46,320 --> 00:26:59,549
on different tale features or or or

00:26:56,309 --> 00:27:07,409
changes so this is basically how it

00:26:59,549 --> 00:27:12,509
works and when you define a way to do

00:27:07,409 --> 00:27:15,989
this you can just execute once you need

00:27:12,509 --> 00:27:18,960
basically you have under green lane you

00:27:15,989 --> 00:27:22,919
have the points basically data a release

00:27:18,960 --> 00:27:26,099
or or a point of release us yeah of

00:27:22,919 --> 00:27:30,089
release so the continuous deployment

00:27:26,099 --> 00:27:32,659
it's known as CD it's an optional

00:27:30,089 --> 00:27:37,139
extension to see I I mean Darnell

00:27:32,659 --> 00:27:42,529
mutually I mean you don't need to have

00:27:37,139 --> 00:27:46,440
both I highly recommend to have both and

00:27:42,529 --> 00:27:50,369
basically once piece of code has been

00:27:46,440 --> 00:27:52,440
through CI it releases automatically and

00:27:50,369 --> 00:27:55,969
it's very useful for bags on minor

00:27:52,440 --> 00:28:01,589
changes and if you're using XYZ

00:27:55,969 --> 00:28:04,019
deployment for your version you can just

00:28:01,589 --> 00:28:04,890
y and z pass through cin CD

00:28:04,019 --> 00:28:09,420
automatically and you

00:28:04,890 --> 00:28:14,130
deploy so imagine how these companies

00:28:09,420 --> 00:28:17,790
are doing there take google more than

00:28:14,130 --> 00:28:20,220
100 releases per day so it's going to be

00:28:17,790 --> 00:28:22,410
like impossible to maintain a coder is

00:28:20,220 --> 00:28:26,690
not being tested and with another

00:28:22,410 --> 00:28:31,550
ingenious a deployment life cycle so

00:28:26,690 --> 00:28:35,130
same thing with well Facebook or a tea

00:28:31,550 --> 00:28:38,550
have you thought how much does not each

00:28:35,130 --> 00:28:40,980
cost in your company do you have some

00:28:38,550 --> 00:28:43,260
numbers do you want to share I'm not

00:28:40,980 --> 00:28:46,020
going to ask what the company is because

00:28:43,260 --> 00:28:49,200
i really don't know but i used to work

00:28:46,020 --> 00:28:55,290
with a in a company before the main it

00:28:49,200 --> 00:28:59,340
was 100,000 per minute and it didn't

00:28:55,290 --> 00:29:02,070
have all these DevOps and automation and

00:28:59,340 --> 00:29:06,290
nothing just basically servers in a data

00:29:02,070 --> 00:29:12,200
center and sometimes this got full

00:29:06,290 --> 00:29:15,620
outage so it's really important to

00:29:12,200 --> 00:29:19,610
monitor your servers and also to

00:29:15,620 --> 00:29:24,540
understand how to recover from from that

00:29:19,610 --> 00:29:29,990
so the question is now how do you eat an

00:29:24,540 --> 00:29:29,990
elephant it's going to be complicated so

00:29:30,050 --> 00:29:39,390
yeah perfect so about putting the bulbs

00:29:36,720 --> 00:29:43,530
in your company or automating everything

00:29:39,390 --> 00:29:45,330
is not just I'm walk out this room and

00:29:43,530 --> 00:29:50,340
I'd hey I'm going to automate everything

00:29:45,330 --> 00:29:54,710
I'm the now and I know how to do it it's

00:29:50,340 --> 00:29:59,300
basically a planning and implementing

00:29:54,710 --> 00:30:04,260
and supporting the planning could take

00:29:59,300 --> 00:30:08,010
weeks months and also the the

00:30:04,260 --> 00:30:10,770
implementing because I'll say do not try

00:30:08,010 --> 00:30:15,570
to implement everything in one go I will

00:30:10,770 --> 00:30:18,509
say just try to start with the easiest

00:30:15,570 --> 00:30:20,459
part try to get involved with this guy

00:30:18,509 --> 00:30:25,559
enough collaboration between your

00:30:20,459 --> 00:30:27,509
development and operations and I think

00:30:25,559 --> 00:30:30,869
it's just as I said a culture change

00:30:27,509 --> 00:30:34,109
done and you basically need to start in

00:30:30,869 --> 00:30:40,259
a small pieces and convince also upper

00:30:34,109 --> 00:30:43,349
management is not an easy task after all

00:30:40,259 --> 00:30:47,429
of course automate everything try to not

00:30:43,349 --> 00:30:51,029
leave some things on on manual because

00:30:47,429 --> 00:30:55,859
at some point will wake you up at 3am in

00:30:51,029 --> 00:31:00,259
the morning also plan to fail everything

00:30:55,859 --> 00:31:05,099
is not going to be as expected so plan

00:31:00,259 --> 00:31:09,659
get up on be get to try to know how can

00:31:05,099 --> 00:31:15,809
we move quickly if something got wrong

00:31:09,659 --> 00:31:21,029
so try to do this plan B structure on

00:31:15,809 --> 00:31:23,579
your mind on paper dev ops team spend

00:31:21,029 --> 00:31:25,440
more time improving things and less time

00:31:23,579 --> 00:31:31,549
fixing things that's basically the idea

00:31:25,440 --> 00:31:35,069
of moving away from the normal ops undef

00:31:31,549 --> 00:31:38,940
because dev team basically works from

00:31:35,069 --> 00:31:43,499
monday to friday 8-5 or 96 and then go

00:31:38,940 --> 00:31:46,379
home probably they will do some extra

00:31:43,499 --> 00:31:49,979
time on some days but not normal ops

00:31:46,379 --> 00:31:52,859
team works from Monday to Friday 926 and

00:31:49,979 --> 00:31:57,239
the rest of the week to trying to solve

00:31:52,859 --> 00:32:01,199
problems so how much i think if i work

00:31:57,239 --> 00:32:03,419
monday to friday 96 i'll be able to do

00:32:01,199 --> 00:32:06,690
things that will save time on the

00:32:03,419 --> 00:32:08,789
weekends or even at night and will can

00:32:06,690 --> 00:32:12,709
spend more time with my family watching

00:32:08,789 --> 00:32:17,519
movies whatever so it's just matter of

00:32:12,709 --> 00:32:20,219
trying to understand what needs to be

00:32:17,519 --> 00:32:26,339
done on your on your work time to have

00:32:20,219 --> 00:32:29,929
your free time really free i have an on

00:32:26,339 --> 00:32:32,029
a story with with this because i used to

00:32:29,929 --> 00:32:36,529
have a manager

00:32:32,029 --> 00:32:38,869
that was saying I recognize the guy

00:32:36,529 --> 00:32:41,960
who's not in front of the computer all

00:32:38,869 --> 00:32:44,989
day because it seems that ultimate he

00:32:41,960 --> 00:32:47,389
outweighed everything and now it's

00:32:44,989 --> 00:32:50,179
basically playing video games and I

00:32:47,389 --> 00:32:51,919
really push hard the people are is every

00:32:50,179 --> 00:32:53,659
day on your computer in solving things

00:32:51,919 --> 00:32:56,359
because basically it's doing the same

00:32:53,659 --> 00:32:58,609
thing every day it's solving the same

00:32:56,359 --> 00:33:01,789
problem every day and that's basically

00:32:58,609 --> 00:33:06,919
I'm paying I'm just throwing money on

00:33:01,789 --> 00:33:09,830
your honor on a box dev ops team recover

00:33:06,919 --> 00:33:12,320
from failures faster and that's because

00:33:09,830 --> 00:33:16,279
you know how much your code is being

00:33:12,320 --> 00:33:20,629
tested or basically how where it's the

00:33:16,279 --> 00:33:24,019
problem basically you know that at some

00:33:20,629 --> 00:33:25,849
point could be a failure yes but you

00:33:24,019 --> 00:33:30,369
know that from to recover from that

00:33:25,849 --> 00:33:32,929
point it's really easy or is not

00:33:30,369 --> 00:33:37,789
probably not easy but it's faster than

00:33:32,929 --> 00:33:40,609
the whole process the develops teams

00:33:37,789 --> 00:33:43,009
release applications more than twice as

00:33:40,609 --> 00:33:45,440
fast because they have the tool not

00:33:43,009 --> 00:33:49,669
because they are smarter guys they have

00:33:45,440 --> 00:33:52,849
the tools to do it so I'm not saying

00:33:49,669 --> 00:33:57,129
please becomes a develops what I'm

00:33:52,849 --> 00:34:03,679
saying is try to adopt some things that

00:33:57,129 --> 00:34:06,559
you've seen here in order to work in a

00:34:03,679 --> 00:34:10,039
really fast paced environment and try to

00:34:06,559 --> 00:34:12,349
go home at 6pm every day and understand

00:34:10,039 --> 00:34:17,960
that things could be automated in order

00:34:12,349 --> 00:34:22,909
to solve the lives I would like to show

00:34:17,960 --> 00:34:30,789
now a a video that will try to summarize

00:34:22,909 --> 00:34:33,759
a little bit what is a DevOps thing so

00:34:30,789 --> 00:34:36,799
let's store it

00:34:33,759 --> 00:34:38,539
meet Dave Dave works for a company whose

00:34:36,799 --> 00:34:40,519
success is dependent on its ability to

00:34:38,539 --> 00:34:42,739
offer new and exciting products to its

00:34:40,519 --> 00:34:45,049
online customers faster than its

00:34:42,739 --> 00:34:46,699
competitors dave is a developer who

00:34:45,049 --> 00:34:50,049
writes code for new products new

00:34:46,699 --> 00:34:52,369
features security updates and bug fixes

00:34:50,049 --> 00:34:53,779
unfortunately Dave needs to wait weeks

00:34:52,369 --> 00:34:56,899
for his work to be placed into

00:34:53,779 --> 00:34:58,369
production this delay increases the

00:34:56,899 --> 00:35:00,499
pressure of staying competitive because

00:34:58,369 --> 00:35:02,859
some competitors are able to deploy new

00:35:00,499 --> 00:35:05,299
products and features much faster in

00:35:02,859 --> 00:35:07,190
addition this delay makes it very

00:35:05,299 --> 00:35:08,839
challenging for Dave to manage both the

00:35:07,190 --> 00:35:11,180
code that is pending to be pushed into

00:35:08,839 --> 00:35:13,039
production and the development of the

00:35:11,180 --> 00:35:16,549
next feature that he is responsible for

00:35:13,039 --> 00:35:18,709
producing when Dave's code is finally

00:35:16,549 --> 00:35:20,900
deployed into the production environment

00:35:18,709 --> 00:35:23,569
occasionally unforeseen errors or

00:35:20,900 --> 00:35:25,459
problems occur this mostly happens

00:35:23,569 --> 00:35:27,799
because Dave is focused on writing code

00:35:25,459 --> 00:35:29,209
for his development environment and it's

00:35:27,799 --> 00:35:32,949
not identical to the production

00:35:29,209 --> 00:35:36,410
environment meet Dave's co-worker Anna

00:35:32,949 --> 00:35:39,229
Anna is a system administrator from the

00:35:36,410 --> 00:35:41,150
operations team she is responsible for

00:35:39,229 --> 00:35:43,880
maintaining and assuring the uptime of

00:35:41,150 --> 00:35:45,680
the production environment the number of

00:35:43,880 --> 00:35:47,359
servers that she needs to administer is

00:35:45,680 --> 00:35:48,769
constantly growing because her company

00:35:47,359 --> 00:35:50,509
continues to launch new products and

00:35:48,769 --> 00:35:53,269
customers are consuming more of their

00:35:50,509 --> 00:35:55,579
services this increase of servers has

00:35:53,269 --> 00:35:57,380
caused some challenges for Anna the

00:35:55,579 --> 00:35:59,269
tools that she used to administer a few

00:35:57,380 --> 00:36:01,249
servers are not as effective when used

00:35:59,269 --> 00:36:04,160
to administer a much larger volume of

00:36:01,249 --> 00:36:05,569
servers this challenge affects how new

00:36:04,160 --> 00:36:08,209
code is deployed in her production

00:36:05,569 --> 00:36:10,130
environment usually when new code is

00:36:08,209 --> 00:36:12,469
released it takes a little massaging to

00:36:10,130 --> 00:36:14,509
fit into the production environment this

00:36:12,469 --> 00:36:16,640
is why she requires coat deployments to

00:36:14,509 --> 00:36:19,849
be scheduled and are only allowed once a

00:36:16,640 --> 00:36:22,009
month once new code is actually deployed

00:36:19,849 --> 00:36:23,719
it's her responsibility to diagnose any

00:36:22,009 --> 00:36:26,539
errors or problems caused by these

00:36:23,719 --> 00:36:28,190
changes sometimes Anna feels as though

00:36:26,539 --> 00:36:30,740
the developers have tossed their work

00:36:28,190 --> 00:36:33,440
over the wall to her and her team

00:36:30,740 --> 00:36:36,170
so what can be done to help Dave and

00:36:33,440 --> 00:36:39,650
Anna work better ultimately they want

00:36:36,170 --> 00:36:41,360
the same thing happy customers what if

00:36:39,650 --> 00:36:44,570
Dave the developer and Anna from

00:36:41,360 --> 00:36:47,900
operations work better together thought

00:36:44,570 --> 00:36:50,390
more alike broke down silos shared

00:36:47,900 --> 00:36:52,430
responsibilities this would require them

00:36:50,390 --> 00:36:56,990
to change their mindset on how dev and

00:36:52,430 --> 00:36:58,970
ops work so what is DevOps DevOps

00:36:56,990 --> 00:37:00,470
integrates developers and operations

00:36:58,970 --> 00:37:02,930
teams in order to improve collaboration

00:37:00,470 --> 00:37:05,270
and productivity by automating

00:37:02,930 --> 00:37:07,910
infrastructure automating workflows and

00:37:05,270 --> 00:37:10,760
by continuously measuring application

00:37:07,910 --> 00:37:13,130
performance if Anna and Dave's teams

00:37:10,760 --> 00:37:15,650
were more devops oriented they would do

00:37:13,130 --> 00:37:18,410
a few things differently they would

00:37:15,650 --> 00:37:20,900
place more focus on automation DevOps

00:37:18,410 --> 00:37:22,760
teams try to automate everything from

00:37:20,900 --> 00:37:25,160
testing of new code to how

00:37:22,760 --> 00:37:27,140
infrastructure is provisioned they would

00:37:25,160 --> 00:37:30,080
write software in small chunks that are

00:37:27,140 --> 00:37:32,330
integrated tested monitored and deployed

00:37:30,080 --> 00:37:34,730
usually in hours versus a traditional

00:37:32,330 --> 00:37:37,550
way of writing large chunks of software

00:37:34,730 --> 00:37:40,460
over weeks or months and then do weeks

00:37:37,550 --> 00:37:41,960
or months of testing plus they will have

00:37:40,460 --> 00:37:43,520
identical development and production

00:37:41,960 --> 00:37:46,880
environments based on the same

00:37:43,520 --> 00:37:48,500
configurations writing small chunks of

00:37:46,880 --> 00:37:50,300
code will allow them to increase the

00:37:48,500 --> 00:37:53,690
frequency of deployments and improve the

00:37:50,300 --> 00:37:55,940
time to deploy new coat it also enables

00:37:53,690 --> 00:37:58,580
them to adopt an iterative process to

00:37:55,940 --> 00:38:01,430
monitor measure and improve the code and

00:37:58,580 --> 00:38:03,440
operations everyday improve their

00:38:01,430 --> 00:38:05,500
ability to respond to market needs or

00:38:03,440 --> 00:38:07,730
other things that impact software

00:38:05,500 --> 00:38:10,010
instead of building and configuring

00:38:07,730 --> 00:38:12,680
software plus infrastructure manually on

00:38:10,010 --> 00:38:14,420
an ad-hoc basis and end Dave's teams

00:38:12,680 --> 00:38:16,580
would write configuration management

00:38:14,420 --> 00:38:19,550
code that describes how things should be

00:38:16,580 --> 00:38:21,470
built as a result they will have the

00:38:19,550 --> 00:38:24,380
ability to build infrastructure at scale

00:38:21,470 --> 00:38:26,960
to dozens hundreds or even thousands of

00:38:24,380 --> 00:38:29,020
servers in multiple locations using

00:38:26,960 --> 00:38:31,510
different types of hardware

00:38:29,020 --> 00:38:33,640
another change that a DevOps oriented

00:38:31,510 --> 00:38:36,460
team would do is to use a source control

00:38:33,640 --> 00:38:37,870
system to help manage track and document

00:38:36,460 --> 00:38:39,970
all of the changes to both the

00:38:37,870 --> 00:38:42,430
application code and configuration

00:38:39,970 --> 00:38:44,050
management code the change that Anand

00:38:42,430 --> 00:38:45,790
Dave would implement is to adopt a

00:38:44,050 --> 00:38:47,950
discipline of application performance

00:38:45,790 --> 00:38:50,710
monitoring and optimization and almost

00:38:47,950 --> 00:38:52,390
real-time this will allow Dave and the

00:38:50,710 --> 00:38:55,060
rest of his developers to understand the

00:38:52,390 --> 00:38:56,560
performance impact of their changes the

00:38:55,060 --> 00:38:58,390
ultimate goal is to have a production

00:38:56,560 --> 00:39:01,450
environment that gives their customers

00:38:58,390 --> 00:39:03,490
of great experience so what benefit does

00:39:01,450 --> 00:39:06,010
having a DevOps oriented team give Anna

00:39:03,490 --> 00:39:07,450
and Dave's company well it allows them

00:39:06,010 --> 00:39:09,190
to increase the rate of software

00:39:07,450 --> 00:39:11,260
delivery and improves the company's time

00:39:09,190 --> 00:39:14,410
to market potentially from months and

00:39:11,260 --> 00:39:16,720
weeks two days and hours this will be a

00:39:14,410 --> 00:39:18,610
huge competitive advantage it also

00:39:16,720 --> 00:39:20,380
allows them to maintain better business

00:39:18,610 --> 00:39:22,750
focus by automating their infrastructure

00:39:20,380 --> 00:39:24,310
so that they can focus on things that

00:39:22,750 --> 00:39:26,560
improve the business and their online

00:39:24,310 --> 00:39:28,720
content they will spend more time on

00:39:26,560 --> 00:39:31,390
these activities that add more value to

00:39:28,720 --> 00:39:33,520
their organizations when a company is

00:39:31,390 --> 00:39:34,960
able to build and offer better products

00:39:33,520 --> 00:39:39,400
this means they have happier customers

00:39:34,960 --> 00:39:41,560
and happier developers how does a DevOps

00:39:39,400 --> 00:39:43,930
oriented team actually accomplish this

00:39:41,560 --> 00:39:45,760
well as mentioned before there needs to

00:39:43,930 --> 00:39:47,820
be a change in the mindset of the two

00:39:45,760 --> 00:39:50,230
groups that need to work closer together

00:39:47,820 --> 00:39:52,540
the other component to the formula is

00:39:50,230 --> 00:39:56,050
getting the right tools new tools are

00:39:52,540 --> 00:39:57,370
needed in this fast-paced world they

00:39:56,050 --> 00:39:59,410
will need a tool that allows them to

00:39:57,370 --> 00:40:02,470
build and test code continuously an

00:39:59,410 --> 00:40:04,750
example of this is Jenkins they will

00:40:02,470 --> 00:40:07,060
need a tool for source control such as

00:40:04,750 --> 00:40:09,730
github this will allow them to manage

00:40:07,060 --> 00:40:11,230
track and document all the changes to

00:40:09,730 --> 00:40:14,500
their application code and their

00:40:11,230 --> 00:40:16,360
configuration management code they will

00:40:14,500 --> 00:40:19,660
need tools for configuration management

00:40:16,360 --> 00:40:21,190
such as chef puppet salt step these

00:40:19,660 --> 00:40:22,660
tools will allow them to deploy

00:40:21,190 --> 00:40:25,330
applications in an automated fashion

00:40:22,660 --> 00:40:28,240
maybe across hundreds or thousands of

00:40:25,330 --> 00:40:29,980
servers in different locations they will

00:40:28,240 --> 00:40:32,020
also need new tools that allow them to

00:40:29,980 --> 00:40:34,140
continuously measure the performance of

00:40:32,020 --> 00:40:36,850
their environment and applique

00:40:34,140 --> 00:40:38,890
generating reading and analyzing system

00:40:36,850 --> 00:40:41,080
logs is extremely helpful to monitor an

00:40:38,890 --> 00:40:42,790
environment but now that many

00:40:41,080 --> 00:40:45,070
environments have hundreds or thousands

00:40:42,790 --> 00:40:46,680
of servers new tools like New Relic are

00:40:45,070 --> 00:40:48,910
required to make sense of all this data

00:40:46,680 --> 00:40:51,280
this will allow them to know how the

00:40:48,910 --> 00:40:53,860
entire application is performing and

00:40:51,280 --> 00:40:55,420
help them identify bottlenecks but many

00:40:53,860 --> 00:40:57,220
companies don't know how to use these

00:40:55,420 --> 00:40:59,400
tools or do not have the skills to

00:40:57,220 --> 00:41:02,170
automate software delivery process

00:40:59,400 --> 00:41:03,790
conclusion DevOps is a new philosophy

00:41:02,170 --> 00:41:06,250
that can help software organizations

00:41:03,790 --> 00:41:08,260
innovate faster and be more responsive

00:41:06,250 --> 00:41:09,970
to business needs it promotes

00:41:08,260 --> 00:41:12,550
collaboration between developers and

00:41:09,970 --> 00:41:14,500
operations which improves quality of

00:41:12,550 --> 00:41:17,320
software development and more frequent

00:41:14,500 --> 00:41:19,690
software releases adopting the DevOps

00:41:17,320 --> 00:41:25,900
philosophy requires a new mindset new

00:41:19,690 --> 00:41:31,540
tools and new skills so hope you are not

00:41:25,900 --> 00:41:33,220
sleeping basically the idea of the the

00:41:31,540 --> 00:41:35,740
video is to summarize what I've been

00:41:33,220 --> 00:41:40,920
talking for the last 30 minutes and and

00:41:35,740 --> 00:41:44,710
try to see if do you think you're

00:41:40,920 --> 00:41:51,090
identified with this or how far are you

00:41:44,710 --> 00:41:56,170
or in your company with this just

00:41:51,090 --> 00:41:57,940
basically all that I have um if you have

00:41:56,170 --> 00:42:03,400
any questions if you want to share

00:41:57,940 --> 00:42:05,610
something if you then have to to listen

00:42:03,400 --> 00:42:05,610
to you

00:42:07,740 --> 00:42:16,050
I guess I just stream all the commercial

00:42:14,190 --> 00:42:19,230
parts because basically I don't want to

00:42:16,050 --> 00:42:29,210
sell you anything but it's available on

00:42:19,230 --> 00:42:29,210
on rackspace yep

00:43:01,060 --> 00:43:09,349
well the question is how how do we break

00:43:05,180 --> 00:43:12,550
silos between Devon ops and how do we

00:43:09,349 --> 00:43:15,050
integrate this is like a pyramid I mean

00:43:12,550 --> 00:43:20,840
upper management needs to be in sync

00:43:15,050 --> 00:43:25,330
with this culture change I mean probably

00:43:20,840 --> 00:43:29,750
the the most important thing is to share

00:43:25,330 --> 00:43:33,770
objectives and let's say okay now we are

00:43:29,750 --> 00:43:37,280
releasing every two months ok let's try

00:43:33,770 --> 00:43:41,119
to put on one month how can we do it how

00:43:37,280 --> 00:43:42,470
can ops team can help dev team because

00:43:41,119 --> 00:43:45,050
on the dev team probably there's an

00:43:42,470 --> 00:43:47,000
architect and on the ops team probably

00:43:45,050 --> 00:43:48,980
there's an architect too so they need to

00:43:47,000 --> 00:43:51,320
work together to budget it what is

00:43:48,980 --> 00:43:55,790
needed for next release I mean they need

00:43:51,320 --> 00:44:01,099
to plan they need to make some teams

00:43:55,790 --> 00:44:03,700
that are fulfilled by ops and dev and

00:44:01,099 --> 00:44:06,589
they need to work together I mean

00:44:03,700 --> 00:44:08,330
integrating ops people on an agile

00:44:06,589 --> 00:44:11,690
methodology because probably the dev

00:44:08,330 --> 00:44:15,619
team is doing an agile it's commonly

00:44:11,690 --> 00:44:18,619
they're doing agile so an ops not ops

00:44:15,619 --> 00:44:21,670
people is commonly not doing agile

00:44:18,619 --> 00:44:25,480
basically seeing a ticket system and

00:44:21,670 --> 00:44:29,390
responding as fast as possible so

00:44:25,480 --> 00:44:31,040
integrate for that reason I i put can

00:44:29,390 --> 00:44:36,230
ban because gunmen could be integrated

00:44:31,040 --> 00:44:38,720
on scrum and and some others so I've

00:44:36,230 --> 00:44:44,740
worked before with Kanban on on a pure

00:44:38,720 --> 00:44:44,740
ops team and help help help us a lot to

00:44:46,300 --> 00:44:56,210
let's say put that barrier away between

00:44:49,730 --> 00:45:00,440
ops and and dev so in my opinion upper

00:44:56,210 --> 00:45:03,010
management needs to be involved with

00:45:00,440 --> 00:45:03,010
this also

00:45:03,530 --> 00:45:06,530
yep

00:45:07,450 --> 00:45:14,029
how do you teach the skills to ops I

00:45:11,059 --> 00:45:17,990
mean four deaths code management adult

00:45:14,029 --> 00:45:23,539
stuff is natural today but for the ops

00:45:17,990 --> 00:45:26,690
people this is new yes it is in fact as

00:45:23,539 --> 00:45:33,380
I said i'ma knobs I'm trying to be

00:45:26,690 --> 00:45:36,289
common dev to be a DevOps but I think

00:45:33,380 --> 00:45:38,539
you realize this when you oughta make

00:45:36,289 --> 00:45:43,539
things and you're not waking up at 3am

00:45:38,539 --> 00:45:46,579
in the morning anymore so when when you

00:45:43,539 --> 00:45:48,260
understand that working together with

00:45:46,579 --> 00:45:50,809
the development team and that you're

00:45:48,260 --> 00:45:55,089
providing more value to the company or

00:45:50,809 --> 00:45:58,849
to the organization doing this I mean

00:45:55,089 --> 00:46:00,950
when you see the let a the metrics about

00:45:58,849 --> 00:46:05,029
okay this application is performing well

00:46:00,950 --> 00:46:08,089
how can we just performing better okay

00:46:05,029 --> 00:46:10,579
how can I help to that how can I work

00:46:08,089 --> 00:46:14,000
with the development team okay you're

00:46:10,579 --> 00:46:16,240
doing this code okay please test it I

00:46:14,000 --> 00:46:18,589
will do the same thing on the

00:46:16,240 --> 00:46:21,349
application I mean the server

00:46:18,589 --> 00:46:26,420
applications like Apache MySQL whatever

00:46:21,349 --> 00:46:31,460
to combine both work in order to make it

00:46:26,420 --> 00:46:34,339
better so didya is as I said try to work

00:46:31,460 --> 00:46:37,579
together on hunger a better performance

00:46:34,339 --> 00:46:43,839
or results on on your application or

00:46:37,579 --> 00:46:43,839
your your company needs

00:46:47,650 --> 00:46:55,700
any other okay ah thank you thank you

00:46:53,599 --> 00:46:59,390
very much for for being here I have a

00:46:55,700 --> 00:47:02,930
few t-shirts here to share so if you

00:46:59,390 --> 00:47:06,279
want to just please come here thank you

00:47:02,930 --> 00:47:06,279
have a good lunch

00:47:14,789 --> 00:47:16,849

YouTube URL: https://www.youtube.com/watch?v=9-x3RYldcxY


