Title: OSDC 2015: Kris Buytaert | From ConfigManagementSucks to ConfigManagementLove
Publication date: 2015-04-30
Playlist: OSDC 2015 | Open Source Data Center Conference
Description: 
	In the beginning there was CFEngine, and the learning curve was high, then came Puppet , Chef  and the learning curve was still high.

Now we have Ansible , for everyone that wasn't smart enough to learn the original tools.  Or wasn't that the problem ?

For some people Infrastructure as Code became a goal alone, not caring about the infrastructure,  Junior people wanted to learn Puppet, but forgot about the service they were configuring.  Too Complex, Too much effort,  ..  And then containers came.
Captions: 
	00:00:07,160 --> 00:00:13,619
welcome back everybody before we start I

00:00:11,190 --> 00:00:18,060
have one more information for those who

00:00:13,619 --> 00:00:21,150
have booked puppet camp to from 15 o

00:00:18,060 --> 00:00:23,670
clock you can grab your you can check in

00:00:21,150 --> 00:00:26,340
for puppet camp at the a in the lobby

00:00:23,670 --> 00:00:29,430
upstairs and you will get your voucher

00:00:26,340 --> 00:00:31,140
for the dinner tonight so just you know

00:00:29,430 --> 00:00:35,460
it for your information we will continue

00:00:31,140 --> 00:00:37,379
now with Chris butchart and I talked

00:00:35,460 --> 00:00:39,929
about on how to go from config

00:00:37,379 --> 00:00:46,229
management sucks too I love contact

00:00:39,929 --> 00:00:48,120
management right thanks first of all

00:00:46,229 --> 00:00:49,800
apologies item the guy who has been

00:00:48,120 --> 00:00:53,249
disturbing pretty much every talk with

00:00:49,800 --> 00:00:54,929
some bad coughing i hope i can survive

00:00:53,249 --> 00:00:56,999
this talk but i've just seen pictures of

00:00:54,929 --> 00:00:59,819
mark burgers on stage at another

00:00:56,999 --> 00:01:01,530
conference we have the flu and we was

00:00:59,819 --> 00:01:03,359
basically not able to stand up so i'm

00:01:01,530 --> 00:01:10,110
feeling in better shape than he is right

00:01:03,359 --> 00:01:12,900
now so title of this talk is from

00:01:10,110 --> 00:01:15,300
conflict management sucks too I love

00:01:12,900 --> 00:01:20,610
conflict management and there's a story

00:01:15,300 --> 00:01:23,070
to that who doesn't know where I'm Chris

00:01:20,610 --> 00:01:26,100
and this dude from Belgium I've been

00:01:23,070 --> 00:01:30,980
doing like Burton said the open source

00:01:26,100 --> 00:01:34,050
conference circus for over a decade now

00:01:30,980 --> 00:01:35,880
my day-to-day role is that I'm ctod no

00:01:34,050 --> 00:01:39,000
it's not EU which is an open source

00:01:35,880 --> 00:01:44,010
consultancy company in Europe we have

00:01:39,000 --> 00:01:46,560
offices in Belgium the Netherlands Czech

00:01:44,010 --> 00:01:49,380
Republic and Ukraine and that's as much

00:01:46,560 --> 00:01:52,950
as I'm now talk about in which but they

00:01:49,380 --> 00:01:54,330
pay my trip here anyhow and somewhere

00:01:52,950 --> 00:01:56,700
along the road of doing open-source

00:01:54,330 --> 00:01:59,100
consultancy I together with Patrick boss

00:01:56,700 --> 00:02:01,590
started organizing devil's days in Ghent

00:01:59,100 --> 00:02:04,500
which kind of was the first step into

00:02:01,590 --> 00:02:08,220
building a global movement which is now

00:02:04,500 --> 00:02:10,769
what we know as the DevOps movement and

00:02:08,220 --> 00:02:14,040
if we talk about DevOps for a lot of

00:02:10,769 --> 00:02:16,230
people that summarize to the clams

00:02:14,040 --> 00:02:18,959
keyword it's about culture it's about

00:02:16,230 --> 00:02:20,010
automation it's about monitoring a

00:02:18,959 --> 00:02:22,769
measurement and it's about

00:02:20,010 --> 00:02:25,590
sharing and and if I said this is part

00:02:22,769 --> 00:02:27,450
of a series then some people might have

00:02:25,590 --> 00:02:29,159
seen my talk from packaging sucks the

00:02:27,450 --> 00:02:33,390
packaging love which I gave last year at

00:02:29,159 --> 00:02:36,150
Linux conference and thistle earth you

00:02:33,390 --> 00:02:38,489
might have seen my target omc about from

00:02:36,150 --> 00:02:40,230
monitoring 60 monitoring love and then

00:02:38,489 --> 00:02:44,040
this is actually the third part in the

00:02:40,230 --> 00:02:47,040
sequel but while I was writing the talk

00:02:44,040 --> 00:02:51,239
I figured well it probably should only

00:02:47,040 --> 00:02:53,280
be a three-part series part 3 what the

00:02:51,239 --> 00:02:56,750
next part being about how bad cultures

00:02:53,280 --> 00:03:01,230
in a lot of organizations because i

00:02:56,750 --> 00:03:04,650
realized that i never actually ran into

00:03:01,230 --> 00:03:07,889
a situation wire found that conflict

00:03:04,650 --> 00:03:12,150
management sucked so in order to be able

00:03:07,889 --> 00:03:14,489
to give you this talk i needed to take a

00:03:12,150 --> 00:03:16,079
step back and talk to people who

00:03:14,489 --> 00:03:19,500
genuinely thought that convict

00:03:16,079 --> 00:03:22,530
management search for them so i had to

00:03:19,500 --> 00:03:23,730
get to talk to some of the naysayers to

00:03:22,530 --> 00:03:25,859
some of the people who didn't want to

00:03:23,730 --> 00:03:29,220
adopt convict management or to the

00:03:25,859 --> 00:03:31,470
actual really really late adopters as

00:03:29,220 --> 00:03:32,910
christian just standing arrow talk every

00:03:31,470 --> 00:03:35,160
good talk should start with the question

00:03:32,910 --> 00:03:39,329
so who view is not using config

00:03:35,160 --> 00:03:46,769
management yet okay I think I'm done

00:03:39,329 --> 00:03:48,449
here we can is lunch ready um I'm also

00:03:46,769 --> 00:03:50,699
going to start a bit talking about

00:03:48,449 --> 00:03:56,069
history how we get to where we are today

00:03:50,699 --> 00:03:58,440
and why do we study history I could have

00:03:56,069 --> 00:04:02,819
said all fart I didn't replace this yet

00:03:58,440 --> 00:04:04,799
was there already but because we have to

00:04:02,819 --> 00:04:07,260
learn from what we did before which we

00:04:04,799 --> 00:04:09,599
did five to ten years ago and what

00:04:07,260 --> 00:04:11,400
mistakes we make back then and if we

00:04:09,599 --> 00:04:16,380
look at history when when I first

00:04:11,400 --> 00:04:18,060
started doing operations work installing

00:04:16,380 --> 00:04:20,579
a linux machine was something which you

00:04:18,060 --> 00:04:23,220
did with a CD with a nicer which unit

00:04:20,579 --> 00:04:25,590
installed and you configured stuff on

00:04:23,220 --> 00:04:27,599
the machine set up your services and

00:04:25,590 --> 00:04:28,860
then suddenly you realized hey I need

00:04:27,599 --> 00:04:32,130
another instance of dates for another

00:04:28,860 --> 00:04:34,020
customer and what you need to do was

00:04:32,130 --> 00:04:36,360
install it again

00:04:34,020 --> 00:04:38,539
do the exact same changes and you

00:04:36,360 --> 00:04:42,240
realize that that was not going to scale

00:04:38,539 --> 00:04:44,789
so we came up with solutions like mondo

00:04:42,240 --> 00:04:47,520
rescue which pretty much took you a full

00:04:44,789 --> 00:04:50,090
image backup which you think could burn

00:04:47,520 --> 00:04:53,039
onto an ISO and which you could install

00:04:50,090 --> 00:04:54,870
that evolved into being able to do that

00:04:53,039 --> 00:04:58,259
from a network using tools like system

00:04:54,870 --> 00:05:00,900
imager where we were building golden

00:04:58,259 --> 00:05:02,789
images which we were then shipping over

00:05:00,900 --> 00:05:06,000
the network to the nodes that needed to

00:05:02,789 --> 00:05:09,180
be deployed and that's where we started

00:05:06,000 --> 00:05:11,880
building a baseline a small image Justin

00:05:09,180 --> 00:05:13,409
of operating system system in which you

00:05:11,880 --> 00:05:16,740
used to have anybody in here used to

00:05:13,409 --> 00:05:20,190
imager okay so some old people in here

00:05:16,740 --> 00:05:22,259
sorry this image or used to have a

00:05:20,190 --> 00:05:25,080
feature which was called the overrides

00:05:22,259 --> 00:05:28,680
which was basically just a tree which

00:05:25,080 --> 00:05:30,330
was mapped on top of the image where the

00:05:28,680 --> 00:05:33,620
small deltas between the different

00:05:30,330 --> 00:05:36,090
instances were being kept and it was

00:05:33,620 --> 00:05:38,310
really good for false deployments we

00:05:36,090 --> 00:05:41,370
could deploy machines I'm talking about

00:05:38,310 --> 00:05:43,259
early 2000s now and somewhere less than

00:05:41,370 --> 00:05:47,460
10 minutes on bare metal and they were

00:05:43,259 --> 00:05:49,740
fully operational the biggest part then

00:05:47,460 --> 00:05:52,500
still exclusive disks booting up and

00:05:49,740 --> 00:05:56,310
that still is today or our biggest slow

00:05:52,500 --> 00:05:58,050
point we could use stuff like BitTorrent

00:05:56,310 --> 00:06:00,840
to distribute the images or use multi

00:05:58,050 --> 00:06:03,330
cars and it was pretty interesting but

00:06:00,840 --> 00:06:06,479
what we also learned there is that once

00:06:03,330 --> 00:06:09,120
you ship such an image and once the

00:06:06,479 --> 00:06:11,400
machine start living that people start

00:06:09,120 --> 00:06:13,169
making changes to those images and you

00:06:11,400 --> 00:06:15,779
don't know how to track those changes

00:06:13,169 --> 00:06:17,569
and you cannot prove that a machine

00:06:15,779 --> 00:06:19,889
which you deployed three weeks ago and

00:06:17,569 --> 00:06:22,349
machine you deploy now is going to be in

00:06:19,889 --> 00:06:25,560
exactly the same state and when you're

00:06:22,349 --> 00:06:28,289
building large-scale platforms clusters

00:06:25,560 --> 00:06:31,949
hi available setups you want to make

00:06:28,289 --> 00:06:35,729
sure that you are deploying stuff in the

00:06:31,949 --> 00:06:37,560
same consistent state so we started

00:06:35,729 --> 00:06:41,360
having the problem of image sprawl

00:06:37,560 --> 00:06:43,740
people were copying around images

00:06:41,360 --> 00:06:45,960
initially physical machines later for

00:06:43,740 --> 00:06:47,860
virtual machines and the standard policy

00:06:45,960 --> 00:06:50,379
promoted by a bunch of vendors was you

00:06:47,860 --> 00:06:54,490
just take this big blob of data you copy

00:06:50,379 --> 00:06:57,849
it around and that one vendor is still

00:06:54,490 --> 00:06:59,830
promoting that practice today they still

00:06:57,849 --> 00:07:01,629
keep telling you do need to take control

00:06:59,830 --> 00:07:06,789
of what you're deploying just copy it

00:07:01,629 --> 00:07:09,879
around and whatever will happen so we

00:07:06,789 --> 00:07:11,469
had manual installations sorry we had

00:07:09,879 --> 00:07:13,569
system imager we went a step further

00:07:11,469 --> 00:07:16,840
where we started using tools like

00:07:13,569 --> 00:07:20,020
Kickstarter Phi and then we actually at

00:07:16,840 --> 00:07:22,509
somewhere amid to it hasn't we built

00:07:20,020 --> 00:07:24,520
Justin of him Justin of operating system

00:07:22,509 --> 00:07:27,490
we kick started at or we deployed it

00:07:24,520 --> 00:07:28,840
with the bootstrap or Phi and then we

00:07:27,490 --> 00:07:32,080
started looking into the early

00:07:28,840 --> 00:07:36,039
configuration management tools I didn't

00:07:32,080 --> 00:07:38,889
see of engine if we get one more step

00:07:36,039 --> 00:07:41,259
further we actually were doing that that

00:07:38,889 --> 00:07:43,270
was a couple of years later had a couple

00:07:41,259 --> 00:07:45,520
of our configuration management tools

00:07:43,270 --> 00:07:48,250
rounds up to the point where now we're

00:07:45,520 --> 00:07:49,719
pretty much well we start using vagrant

00:07:48,250 --> 00:07:51,669
to build that bugs give that books to a

00:07:49,719 --> 00:07:53,680
developer we use exactly the same code

00:07:51,669 --> 00:07:56,949
base that build that box for a developer

00:07:53,680 --> 00:07:58,990
to actually move to production and now

00:07:56,949 --> 00:08:01,360
we know how to do infrastructure as code

00:07:58,990 --> 00:08:05,379
we know how to run and deploy

00:08:01,360 --> 00:08:08,669
infrastructure that scale yet it seems

00:08:05,379 --> 00:08:08,669
like this is not something trivial

00:08:10,589 --> 00:08:16,449
infrastructure as code has been one of

00:08:12,909 --> 00:08:18,969
the slowest adopt technologies and

00:08:16,449 --> 00:08:21,370
practices I've been around with I mean

00:08:18,969 --> 00:08:23,080
when we started doing helping software

00:08:21,370 --> 00:08:24,819
developers to deliver their code the

00:08:23,080 --> 00:08:26,680
operations people were like immagini

00:08:24,819 --> 00:08:28,779
test because I don't want you to just

00:08:26,680 --> 00:08:31,449
deploy stuff I want you to be able to

00:08:28,779 --> 00:08:33,070
automatically deploy this whereas on the

00:08:31,449 --> 00:08:35,620
other side still a lot of people just

00:08:33,070 --> 00:08:39,190
accept operations people to SSH into a

00:08:35,620 --> 00:08:41,440
box and make some changes manually why

00:08:39,190 --> 00:08:45,510
do we let that happen it's not what we

00:08:41,440 --> 00:08:48,430
should be doing so infrastructures code

00:08:45,510 --> 00:08:52,120
helps us there we're now trading our

00:08:48,430 --> 00:08:53,769
infrastructure as code we're taking over

00:08:52,120 --> 00:08:55,420
best practices from software development

00:08:53,769 --> 00:09:00,010
we're modeling our infrastructure we're

00:08:55,420 --> 00:09:01,570
taking small pieces reusing them we're

00:09:00,010 --> 00:09:03,640
using cookbooks we're using man

00:09:01,570 --> 00:09:05,440
test we actually have development

00:09:03,640 --> 00:09:09,340
acceptance and production platforms for

00:09:05,440 --> 00:09:10,930
that code and now we can actually define

00:09:09,340 --> 00:09:14,050
a working service in our infrastructure

00:09:10,930 --> 00:09:17,110
as the combination of the actual

00:09:14,050 --> 00:09:18,550
application code infrastructure code in

00:09:17,110 --> 00:09:22,780
combination with security and monitoring

00:09:18,550 --> 00:09:26,920
all automated so we have a bunch of

00:09:22,780 --> 00:09:29,470
tools out there but still people didn't

00:09:26,920 --> 00:09:32,770
start adopting this because for a lot of

00:09:29,470 --> 00:09:36,550
those tools the learning curves were way

00:09:32,770 --> 00:09:41,770
too high I mean which still would this

00:09:36,550 --> 00:09:44,050
be as a learning curve probably see

00:09:41,770 --> 00:09:46,180
avenged in the early days I mean you

00:09:44,050 --> 00:09:48,690
really if you forgot it was a two stage

00:09:46,180 --> 00:09:52,270
setup in yellow in the ultimate versions

00:09:48,690 --> 00:09:54,250
and if you broke something during the

00:09:52,270 --> 00:09:57,580
initial setup you were completely

00:09:54,250 --> 00:10:00,430
screwed you were shooting yourself in

00:09:57,580 --> 00:10:03,010
the foot constantly and it was for a lot

00:10:00,430 --> 00:10:07,210
of people just too early to start doing

00:10:03,010 --> 00:10:10,480
this a bit more easy was when Papa and

00:10:07,210 --> 00:10:12,100
chef came along there was still a steep

00:10:10,480 --> 00:10:15,190
learning curve it was still not revealed

00:10:12,100 --> 00:10:19,620
to actually climb that wall but it was

00:10:15,190 --> 00:10:22,320
much more easy yet for a lot of people

00:10:19,620 --> 00:10:25,840
they wouldn't take that effort they

00:10:22,320 --> 00:10:29,110
wanted to wait till something even more

00:10:25,840 --> 00:10:31,600
easy comes along and something more easy

00:10:29,110 --> 00:10:33,310
eventually came along and people started

00:10:31,600 --> 00:10:44,530
falling over it so which tool could this

00:10:33,310 --> 00:10:46,150
be it's so easy you can now we're

00:10:44,530 --> 00:10:49,990
talking configuration management not

00:10:46,150 --> 00:10:51,490
packaging tools now some people would

00:10:49,990 --> 00:10:53,860
claim this is ansible some people would

00:10:51,490 --> 00:10:58,500
claim this assault some people would

00:10:53,860 --> 00:11:02,230
claim this a juju that the point is any

00:10:58,500 --> 00:11:04,300
configuration management tool can break

00:11:02,230 --> 00:11:06,010
your infrastructure at scale like DevOps

00:11:04,300 --> 00:11:07,660
word set to make error is human to pro

00:11:06,010 --> 00:11:11,650
can get to also everything automatically

00:11:07,660 --> 00:11:15,370
is DevOps because automation can also be

00:11:11,650 --> 00:11:19,029
bad and I think for every tool we

00:11:15,370 --> 00:11:20,740
ran into it just like UNIX unix issues

00:11:19,029 --> 00:11:23,440
are friendly it's just picky about its

00:11:20,740 --> 00:11:25,390
friends some people tell me it has to do

00:11:23,440 --> 00:11:27,339
with intelligence until more intelligent

00:11:25,390 --> 00:11:29,890
people will adopt more difficult

00:11:27,339 --> 00:11:32,529
technologies earlier less intelligence

00:11:29,890 --> 00:11:36,040
people will take longer to actually

00:11:32,529 --> 00:11:38,589
start adopting them but fundamentally a

00:11:36,040 --> 00:11:40,990
lot of these tools can help you achieve

00:11:38,589 --> 00:11:43,089
the goals you have automating your

00:11:40,990 --> 00:11:45,010
infrastructure making sure it's

00:11:43,089 --> 00:11:48,190
reproducible making sure that stuff

00:11:45,010 --> 00:11:54,430
keeps working so why are there a bunch

00:11:48,190 --> 00:11:56,290
of different tools around well people

00:11:54,430 --> 00:11:58,320
don't like the language one tool was

00:11:56,290 --> 00:12:02,320
written in people want to have more

00:11:58,320 --> 00:12:05,050
functionality of language the chef vs

00:12:02,320 --> 00:12:07,029
pepper discussion we want to be using

00:12:05,050 --> 00:12:09,730
Ruby as a language to define our

00:12:07,029 --> 00:12:11,080
infrastructure whereas the power of the

00:12:09,730 --> 00:12:13,570
guy said well nobody's ever going to use

00:12:11,080 --> 00:12:14,800
that Chef said we're going to build it

00:12:13,570 --> 00:12:16,089
anyhow we're going to do these people

00:12:14,800 --> 00:12:18,730
are going to start using it and in

00:12:16,089 --> 00:12:20,350
public lab said well maybe we should

00:12:18,730 --> 00:12:22,270
also add that feature they added a

00:12:20,350 --> 00:12:24,550
feature for two years and nobody

00:12:22,270 --> 00:12:27,700
actually used it and then they removed

00:12:24,550 --> 00:12:29,080
the feature then there's the Python

00:12:27,700 --> 00:12:30,640
fanboys because they want to have a

00:12:29,080 --> 00:12:33,190
different language they don't like Ruby

00:12:30,640 --> 00:12:36,100
Ruby's too fat ruby is too slow doesn't

00:12:33,190 --> 00:12:37,029
scale and it's all valid reasons to

00:12:36,100 --> 00:12:41,640
start building another conflict

00:12:37,029 --> 00:12:44,410
management tool I think that in most

00:12:41,640 --> 00:12:45,610
toxic gave over the past years if I was

00:12:44,410 --> 00:12:48,220
talking about configuration management

00:12:45,610 --> 00:12:51,100
tools my advice was to not build your

00:12:48,220 --> 00:12:54,339
own and I had to reach factored advice

00:12:51,100 --> 00:12:58,540
in four separate occasions that was with

00:12:54,339 --> 00:13:01,000
mark bird was in the audience with Luka

00:12:58,540 --> 00:13:04,390
knees in the audience with Thomas hatch

00:13:01,000 --> 00:13:06,820
in the audience and with Adam Jacob in

00:13:04,390 --> 00:13:10,720
the audience and for the rest I think my

00:13:06,820 --> 00:13:12,190
advice was still valid if you want to

00:13:10,720 --> 00:13:15,640
use a configuration management tune

00:13:12,190 --> 00:13:17,170
don't build your own I'm currently

00:13:15,640 --> 00:13:19,839
working at one customer where they

00:13:17,170 --> 00:13:21,490
actually had a smart guy who figured out

00:13:19,839 --> 00:13:28,700
he was going to write one himself in

00:13:21,490 --> 00:13:34,020
Java yeah

00:13:28,700 --> 00:13:35,430
so now there's this one tool the

00:13:34,020 --> 00:13:37,080
colleagues it needed to take over

00:13:35,430 --> 00:13:42,120
created a smart logo for it's it's a

00:13:37,080 --> 00:13:44,910
pile of and the main problem is

00:13:42,120 --> 00:13:47,400
nobody knows how it work the guy left

00:13:44,910 --> 00:13:50,580
and they have some form of conflict

00:13:47,400 --> 00:13:53,340
management it's completely GUI driven it

00:13:50,580 --> 00:13:55,140
doesn't work so yes if you're in that

00:13:53,340 --> 00:13:56,700
kind of situations configuration

00:13:55,140 --> 00:14:00,110
management test sucked because that kind

00:13:56,700 --> 00:14:02,610
of tool is not configuration management

00:14:00,110 --> 00:14:04,560
one of the main reason why people did

00:14:02,610 --> 00:14:07,010
not adopt configuration management is

00:14:04,560 --> 00:14:09,510
because software development is hard a

00:14:07,010 --> 00:14:12,450
lot of people ended up in this trade

00:14:09,510 --> 00:14:15,570
because they like solving problems with

00:14:12,450 --> 00:14:20,730
machines they like building new things

00:14:15,570 --> 00:14:22,410
and not writing actual code where when

00:14:20,730 --> 00:14:23,760
we start doing infrastructure as code we

00:14:22,410 --> 00:14:26,250
need to take into account stuff like

00:14:23,760 --> 00:14:28,230
ordering we need to figure out our loops

00:14:26,250 --> 00:14:29,970
work in certain languages which was not

00:14:28,230 --> 00:14:34,100
something which was supported by default

00:14:29,970 --> 00:14:36,450
we need to think about dependencies and

00:14:34,100 --> 00:14:43,680
for some languages that was difficult

00:14:36,450 --> 00:14:46,590
for some languages that was trivial we

00:14:43,680 --> 00:14:49,560
also need to think about stuff we never

00:14:46,590 --> 00:14:53,220
figured out before we need to think

00:14:49,560 --> 00:14:56,970
about item poems about how to make sure

00:14:53,220 --> 00:15:00,000
that if we do something and we can run

00:14:56,970 --> 00:15:01,620
that same thing over and over again when

00:15:00,000 --> 00:15:04,490
we were doing just some shell scripts

00:15:01,620 --> 00:15:09,180
and we were just building stuff ah

00:15:04,490 --> 00:15:11,220
one-off executions adding a sequence to

00:15:09,180 --> 00:15:14,700
a file adding a smart snip somewhere was

00:15:11,220 --> 00:15:16,020
just a hill a pen to this file but if

00:15:14,700 --> 00:15:18,420
you're reading that in an infrastructure

00:15:16,020 --> 00:15:23,280
escote style of approach it means that

00:15:18,420 --> 00:15:26,100
at some point in time after the 2500 run

00:15:23,280 --> 00:15:28,560
you'll get 2,500 entries in EDC host

00:15:26,100 --> 00:15:32,910
where there's your host name you don't

00:15:28,560 --> 00:15:35,190
want that so you need to think about it

00:15:32,910 --> 00:15:37,350
in a different way and when you start

00:15:35,190 --> 00:15:38,970
realizing that it also means that the

00:15:37,350 --> 00:15:41,520
development libraries you're working in

00:15:38,970 --> 00:15:41,820
should be capable of doing that kind of

00:15:41,520 --> 00:15:45,600
code

00:15:41,820 --> 00:15:48,780
I had one fun issue a couple of months

00:15:45,600 --> 00:15:51,180
ago with a ruby library not sure if it

00:15:48,780 --> 00:15:52,890
was a JSON or gamma library which would

00:15:51,180 --> 00:15:55,230
actually take all the values i gave it

00:15:52,890 --> 00:15:59,010
and write it out in a file but not

00:15:55,230 --> 00:16:01,140
consistently in the same order so the

00:15:59,010 --> 00:16:03,930
values in the file work correctly but

00:16:01,140 --> 00:16:05,670
each time my puppet agent ran the file

00:16:03,930 --> 00:16:07,170
was being rewritten and what happens

00:16:05,670 --> 00:16:09,420
when the file was being rewritten the

00:16:07,170 --> 00:16:14,130
service with being restarted or is

00:16:09,420 --> 00:16:16,050
nothing changed and that's the kind of

00:16:14,130 --> 00:16:18,120
bugs which makes you think configuration

00:16:16,050 --> 00:16:20,150
management sex but well actually what

00:16:18,120 --> 00:16:29,270
sucking was the ruby implementation of

00:16:20,150 --> 00:16:32,780
the serialization so new things are also

00:16:29,270 --> 00:16:36,720
things that people need to adapt to and

00:16:32,780 --> 00:16:43,620
a lot of that is people learning how to

00:16:36,720 --> 00:16:47,370
adapt with new tools so let me tell you

00:16:43,620 --> 00:16:49,970
a couple of stories which I had to

00:16:47,370 --> 00:16:52,590
experience over the past couple of years

00:16:49,970 --> 00:16:56,190
when you go into an old-school ops

00:16:52,590 --> 00:17:00,360
department and you tell them they're

00:16:56,190 --> 00:17:02,130
going to start doing puppet or chef this

00:17:00,360 --> 00:17:03,660
is the kind of reaction you get so you

00:17:02,130 --> 00:17:06,420
want me to write code yeah you've been

00:17:03,660 --> 00:17:11,280
writing code for ages like she'll Perl

00:17:06,420 --> 00:17:12,990
Python and then one of their manager

00:17:11,280 --> 00:17:16,560
said you think those guys right chill

00:17:12,990 --> 00:17:19,470
and then I went well if they cannot

00:17:16,560 --> 00:17:23,189
write shell why did you hire them in the

00:17:19,470 --> 00:17:24,720
first place I mean that's not a problem

00:17:23,189 --> 00:17:27,000
with configuration manager that's not a

00:17:24,720 --> 00:17:30,860
problem with people not knowing how to

00:17:27,000 --> 00:17:30,860
write code that's basically bad hiring

00:17:30,890 --> 00:17:37,350
same with version control I actually had

00:17:34,680 --> 00:17:39,570
to sit in a meeting in February of this

00:17:37,350 --> 00:17:41,190
year where the developers refused to

00:17:39,570 --> 00:17:43,320
move to get and the ops people were

00:17:41,190 --> 00:17:45,810
using git and they want to move to

00:17:43,320 --> 00:17:51,990
explain why in 2015 we needed to use git

00:17:45,810 --> 00:17:54,410
I didn't I told me of this discussion

00:17:51,990 --> 00:17:54,410
I'm leaving

00:17:55,890 --> 00:18:00,970
there's something like reality and

00:17:58,570 --> 00:18:03,250
there's something like if you really

00:18:00,970 --> 00:18:08,680
don't want to change maybe you should be

00:18:03,250 --> 00:18:10,150
looking for a different job a lot of

00:18:08,680 --> 00:18:11,650
people think that this is the old world

00:18:10,150 --> 00:18:13,390
a lot of people think that this is

00:18:11,650 --> 00:18:15,190
something which happened in 2015 but

00:18:13,390 --> 00:18:17,950
it's still happening today a lot of

00:18:15,190 --> 00:18:19,420
large organizations have not adopted

00:18:17,950 --> 00:18:22,170
configuration management yet I don't

00:18:19,420 --> 00:18:24,190
know would it was was yesterday or

00:18:22,170 --> 00:18:25,960
tuesday at another conference where

00:18:24,190 --> 00:18:28,510
somebody said that some large American

00:18:25,960 --> 00:18:29,820
organization had just finished or plans

00:18:28,510 --> 00:18:33,640
on finishing their virtualization

00:18:29,820 --> 00:18:35,290
migration this year I mean configuration

00:18:33,640 --> 00:18:41,350
management for them is probably not even

00:18:35,290 --> 00:18:44,910
started so now we're starting to write

00:18:41,350 --> 00:18:47,860
test code we are adopting a bunch of

00:18:44,910 --> 00:18:50,080
practices so does operations people all

00:18:47,860 --> 00:18:53,110
day they come like you will need to

00:18:50,080 --> 00:18:54,820
write tests why should I write tests

00:18:53,110 --> 00:18:58,330
I've never run tests I just puts the rim

00:18:54,820 --> 00:19:00,700
production it works and yes you need to

00:18:58,330 --> 00:19:02,800
write tests because how are you going to

00:19:00,700 --> 00:19:04,810
monitor your platform anyhow you need to

00:19:02,800 --> 00:19:06,520
monitor your Apache so you need to test

00:19:04,810 --> 00:19:07,870
it and a lot of the testing we write

00:19:06,520 --> 00:19:10,540
when we're doing infrastructure is code

00:19:07,870 --> 00:19:12,400
it's actually exactly the same test that

00:19:10,540 --> 00:19:15,370
we need to write to monitor the platform

00:19:12,400 --> 00:19:17,290
anyhow so if we use tests that are

00:19:15,370 --> 00:19:19,930
pluggable that can be used in monitoring

00:19:17,290 --> 00:19:21,820
frameworks we were pretty much solving

00:19:19,930 --> 00:19:26,260
something up front which we need to

00:19:21,820 --> 00:19:27,900
solve anyhow our development practices

00:19:26,260 --> 00:19:30,310
you want me to do continuous integration

00:19:27,900 --> 00:19:32,290
yeah because you're developing software

00:19:30,310 --> 00:19:35,380
so i want you to test against all the

00:19:32,290 --> 00:19:37,480
different components and that also means

00:19:35,380 --> 00:19:40,930
that i want you to continues the deploy

00:19:37,480 --> 00:19:42,640
software and what I see is that in a lot

00:19:40,930 --> 00:19:44,950
of organizations that are facing the

00:19:42,640 --> 00:19:47,620
problem that we need to ship software

00:19:44,950 --> 00:19:49,450
faster actually working with the

00:19:47,620 --> 00:19:51,040
operations teams and putting

00:19:49,450 --> 00:19:53,400
infrastructure as code in place and

00:19:51,040 --> 00:19:56,050
going to continues delivery as

00:19:53,400 --> 00:19:58,450
infrastructure continuously as the first

00:19:56,050 --> 00:20:00,220
pieces of the stack where we actually do

00:19:58,450 --> 00:20:03,370
continuous delivery is going to be

00:20:00,220 --> 00:20:05,350
really beneficial because you can take a

00:20:03,370 --> 00:20:06,970
standard java application and put it

00:20:05,350 --> 00:20:09,370
into a pipeline and

00:20:06,970 --> 00:20:11,950
bill Jenkins and put up repulse trees

00:20:09,370 --> 00:20:14,500
and deploy that application but if the

00:20:11,950 --> 00:20:16,630
configuration changes you also need to

00:20:14,500 --> 00:20:20,470
change the underlying infrastructure as

00:20:16,630 --> 00:20:23,110
code to make those changes in sync so

00:20:20,470 --> 00:20:25,240
the thing you need to do is to get your

00:20:23,110 --> 00:20:26,799
operations people to understand all

00:20:25,240 --> 00:20:29,260
different components of their pipeline

00:20:26,799 --> 00:20:32,020
so that by the time the application

00:20:29,260 --> 00:20:33,909
developers get to the same level they

00:20:32,020 --> 00:20:36,039
already know all the tools they already

00:20:33,909 --> 00:20:39,760
know what pains they had to go through

00:20:36,039 --> 00:20:42,340
and this means that by using tools by

00:20:39,760 --> 00:20:45,159
doing it for circulars code by starting

00:20:42,340 --> 00:20:48,780
to learn this you're going to help the

00:20:45,159 --> 00:20:48,780
rest of the organization to speed up

00:20:48,960 --> 00:20:55,000
typical pipeline these are all

00:20:52,150 --> 00:20:57,610
components you need to learn you need to

00:20:55,000 --> 00:21:00,280
check out your code do since X check do

00:20:57,610 --> 00:21:03,669
cell checks do code coverage do some

00:21:00,280 --> 00:21:05,559
tests build or package it you need to

00:21:03,669 --> 00:21:07,780
upload it to it ball three you need to

00:21:05,559 --> 00:21:08,980
deploy it on your test platform trigger

00:21:07,780 --> 00:21:10,929
your / patrones or share phones again

00:21:08,980 --> 00:21:13,450
and then you need to check your king go

00:21:10,929 --> 00:21:18,929
to burn did you hear that I said the

00:21:13,450 --> 00:21:21,789
King yeah okay yeah I know just checking

00:21:18,929 --> 00:21:25,150
they you need to check if your tests are

00:21:21,789 --> 00:21:27,460
successful on the actual platform so

00:21:25,150 --> 00:21:30,690
share the pain with the developers you

00:21:27,460 --> 00:21:32,799
need to work with use the same tools and

00:21:30,690 --> 00:21:37,510
then you can actually support them much

00:21:32,799 --> 00:21:40,330
better than before so that's what people

00:21:37,510 --> 00:21:42,640
react when they first start using

00:21:40,330 --> 00:21:46,539
infrastructure escote old-school Ops

00:21:42,640 --> 00:21:49,600
guys who don't want to change so they

00:21:46,539 --> 00:21:53,710
start changing and they realize hey did

00:21:49,600 --> 00:21:59,919
this is fun now I need to set up some

00:21:53,710 --> 00:22:01,570
service I need to set up apache and well

00:21:59,919 --> 00:22:02,950
I shouldn't be writing this myself

00:22:01,570 --> 00:22:05,440
there's probably some stuff on the

00:22:02,950 --> 00:22:07,150
internet and they go to forgit pepper

00:22:05,440 --> 00:22:11,669
claps and they figure out their 60

00:22:07,150 --> 00:22:16,149
Apache modules which one should i use

00:22:11,669 --> 00:22:17,730
and they take one obviously the wrong

00:22:16,149 --> 00:22:20,190
one they take the one which is only

00:22:17,730 --> 00:22:22,230
ubuntu support and the

00:22:20,190 --> 00:22:26,389
on centos they figure out it doesn't

00:22:22,230 --> 00:22:29,700
work and they take the next one which

00:22:26,389 --> 00:22:31,500
works under this robe but has hard to go

00:22:29,700 --> 00:22:34,620
to triple stories in there and as hard

00:22:31,500 --> 00:22:36,360
coded parts in there and then they take

00:22:34,620 --> 00:22:38,789
the fifth one and that one actually

00:22:36,360 --> 00:22:40,649
starts Apache which day by default which

00:22:38,789 --> 00:22:42,179
they don't want because they have chorus

00:22:40,649 --> 00:22:44,340
ink managing their high availability

00:22:42,179 --> 00:22:49,980
setup and only needs to run on one

00:22:44,340 --> 00:22:53,340
service and and that's when people get

00:22:49,980 --> 00:23:00,720
frustrated which package which upstream

00:22:53,340 --> 00:23:03,919
module to use um three to four years ago

00:23:00,720 --> 00:23:07,200
I actually approved of this discussion

00:23:03,919 --> 00:23:10,379
there was a lot of stuff going on there

00:23:07,200 --> 00:23:12,870
were a lot of projects trying to do

00:23:10,379 --> 00:23:15,299
exactly the same but what we've seen

00:23:12,870 --> 00:23:16,830
over the past two two and a half years

00:23:15,299 --> 00:23:20,309
is that there's a lot of consolidation

00:23:16,830 --> 00:23:23,639
happening there is a number of upstream

00:23:20,309 --> 00:23:26,879
modules both for peppa and for chef that

00:23:23,639 --> 00:23:29,460
are getting the standard this is

00:23:26,879 --> 00:23:33,090
something which is happening in a lot of

00:23:29,460 --> 00:23:37,250
ways if you have a large enough number

00:23:33,090 --> 00:23:39,419
of people experimenting with stuff i

00:23:37,250 --> 00:23:40,860
think in dutch we have the same saying

00:23:39,419 --> 00:23:43,289
which is called elephant pat so you know

00:23:40,860 --> 00:23:45,389
if you gathered in german too but its

00:23:43,289 --> 00:23:48,450
brain matter if you design a park and

00:23:45,389 --> 00:23:51,960
you want to figure out where to lay the

00:23:48,450 --> 00:23:55,409
parts in the park one of the things you

00:23:51,960 --> 00:23:57,299
can do is just put in no parts at all in

00:23:55,409 --> 00:23:58,799
the beginning and people will start

00:23:57,299 --> 00:24:01,230
using the park and we'll start crossing

00:23:58,799 --> 00:24:03,360
and after a couple of months you

00:24:01,230 --> 00:24:05,639
actually see where they walked because

00:24:03,360 --> 00:24:07,559
people find themselves the most optimal

00:24:05,639 --> 00:24:10,019
routes and this is exactly what's

00:24:07,559 --> 00:24:13,289
happening with module development you

00:24:10,019 --> 00:24:16,110
see that a lot of people are working

00:24:13,289 --> 00:24:17,909
together now on a really good Apache

00:24:16,110 --> 00:24:19,980
module there's really good my sequel

00:24:17,909 --> 00:24:22,259
modules they're really good other

00:24:19,980 --> 00:24:23,669
modules for a little tools and what

00:24:22,259 --> 00:24:26,669
we've also seen now is that a lot of

00:24:23,669 --> 00:24:30,389
upstream application developers are

00:24:26,669 --> 00:24:34,320
actually shipping puppet or chef coat

00:24:30,389 --> 00:24:36,850
that delivers their stack

00:24:34,320 --> 00:24:38,880
elasticsearch is delivering really good

00:24:36,850 --> 00:24:42,120
puppet modules for boat logstash

00:24:38,880 --> 00:24:45,190
elasticsearch and their whole ecosystem

00:24:42,120 --> 00:24:48,190
we guys from packet BTW yesterday showed

00:24:45,190 --> 00:24:51,840
that they have ansible playbooks for

00:24:48,190 --> 00:24:55,659
their tools and there is a growing

00:24:51,840 --> 00:24:58,720
adoption of these these practices so

00:24:55,659 --> 00:25:01,690
it's not there's a module for that

00:24:58,720 --> 00:25:03,340
anymore it's coming to a point where the

00:25:01,690 --> 00:25:05,679
upstream vendor actually is providing a

00:25:03,340 --> 00:25:06,970
module for that or the community has

00:25:05,679 --> 00:25:10,720
provided a module for that which is

00:25:06,970 --> 00:25:14,980
really really good except for the niche

00:25:10,720 --> 00:25:16,720
cases when Christine was talking about

00:25:14,980 --> 00:25:17,950
Sookie Burke after all that stuff yes

00:25:16,720 --> 00:25:21,610
there's great modules for that but

00:25:17,950 --> 00:25:23,230
there's no packages for that communities

00:25:21,610 --> 00:25:24,220
open source community still need to work

00:25:23,230 --> 00:25:33,520
together and build stuff that actually

00:25:24,220 --> 00:25:36,520
works so automation isn't easy we still

00:25:33,520 --> 00:25:39,070
need to take into account a lot of

00:25:36,520 --> 00:25:40,600
dependencies we still need to think what

00:25:39,070 --> 00:25:45,760
we're doing if this would be trivial if

00:25:40,600 --> 00:25:47,350
this everybody would be doing it but I'm

00:25:45,760 --> 00:25:50,260
still loving infrastructure escote and

00:25:47,350 --> 00:25:59,649
one of the reasons is this one it worked

00:25:50,260 --> 00:26:01,510
we tricked him the biggest argument I

00:25:59,649 --> 00:26:03,880
get from people is why should i do

00:26:01,510 --> 00:26:09,610
infrastructure escote when all i have is

00:26:03,880 --> 00:26:16,330
one server who has this who has this one

00:26:09,610 --> 00:26:20,130
server nobody has one server we're doing

00:26:16,330 --> 00:26:22,380
data center stuff we always have the

00:26:20,130 --> 00:26:26,200
application which needs to be put in

00:26:22,380 --> 00:26:29,529
development in acceptance in production

00:26:26,200 --> 00:26:31,419
that's already three times we need to

00:26:29,529 --> 00:26:34,419
have it high available so that's three

00:26:31,419 --> 00:26:38,580
times two we need to be able to scale it

00:26:34,419 --> 00:26:41,049
out so we never have this one server if

00:26:38,580 --> 00:26:43,750
somebody comes up to you and says but I

00:26:41,049 --> 00:26:47,230
only need to do this one server he's

00:26:43,750 --> 00:26:54,400
lying or he doesn't understand its oh

00:26:47,230 --> 00:26:58,799
needs and even if he would have just

00:26:54,400 --> 00:27:01,660
that one server just that one snowflake

00:26:58,799 --> 00:27:02,890
it's even more important for him to be

00:27:01,660 --> 00:27:05,200
able to reproduce that one snowflake

00:27:02,890 --> 00:27:07,990
it's even more important that you can

00:27:05,200 --> 00:27:10,240
actually do disaster recovery and when

00:27:07,990 --> 00:27:12,190
that one machine disappears it just

00:27:10,240 --> 00:27:15,130
triggered the configuration management

00:27:12,190 --> 00:27:21,400
tool build it from scratch and restore

00:27:15,130 --> 00:27:24,669
only the user data we had a customer a

00:27:21,400 --> 00:27:26,350
couple of years ago we said well we

00:27:24,669 --> 00:27:28,750
don't want to build yourself because you

00:27:26,350 --> 00:27:32,410
don't want to spend the extra half day

00:27:28,750 --> 00:27:34,809
for us to actually automate it and they

00:27:32,410 --> 00:27:36,130
insisted then Bob and we said well we'll

00:27:34,809 --> 00:27:38,770
do this the quick and dirty way but

00:27:36,130 --> 00:27:43,720
basically this is not how we work we'll

00:27:38,770 --> 00:27:47,980
make this one exception so my mum's down

00:27:43,720 --> 00:27:49,890
the road everything is fine suddenly we

00:27:47,980 --> 00:27:53,320
get a phone call yeah our server is gum

00:27:49,890 --> 00:27:55,240
what do you mean our server is gone yeah

00:27:53,320 --> 00:27:57,040
our server is count you know when we

00:27:55,240 --> 00:27:59,380
deliver service we want you to monitor

00:27:57,040 --> 00:28:01,240
it on dis dis dis and you didn't want us

00:27:59,380 --> 00:28:05,559
to do that yeah yeah but I cannot access

00:28:01,240 --> 00:28:07,270
my server ok if you go talking to his I

00:28:05,559 --> 00:28:11,850
speak yeah of course we destroyed the

00:28:07,270 --> 00:28:18,160
server he didn't renew his contract ok

00:28:11,850 --> 00:28:23,200
um so what's next can you restore it

00:28:18,160 --> 00:28:25,030
nope can you rebuild it nope when's the

00:28:23,200 --> 00:28:29,230
last time you took a backup have our two

00:28:25,030 --> 00:28:32,230
weeks okay that's fine and luckily what

00:28:29,230 --> 00:28:34,540
we did is we actually refused to do the

00:28:32,230 --> 00:28:35,799
way to work the way he worked we

00:28:34,540 --> 00:28:38,380
actually had to rid on the puppet code

00:28:35,799 --> 00:28:40,780
to build the server because it boots

00:28:38,380 --> 00:28:44,260
solve more problems for us in the longer

00:28:40,780 --> 00:28:46,660
run so when they finally found a new

00:28:44,260 --> 00:28:48,070
brother new machine online we could

00:28:46,660 --> 00:28:50,770
quickly restore it because we actually

00:28:48,070 --> 00:28:54,070
have done the work and since then they

00:28:50,770 --> 00:28:57,330
actually agreed to work our way because

00:28:54,070 --> 00:28:57,330
it's save them so much time

00:28:59,770 --> 00:29:03,880
say that configuration management tools

00:29:01,360 --> 00:29:07,920
lag features and and the biggest feature

00:29:03,880 --> 00:29:09,640
people miss is orchestration who thinks

00:29:07,920 --> 00:29:11,880
orchestration is one of the biggest make

00:29:09,640 --> 00:29:14,940
is missing features in a lot of tools

00:29:11,880 --> 00:29:21,160
was using any kind of orchestration tool

00:29:14,940 --> 00:29:22,210
what are you using I'm collective what

00:29:21,160 --> 00:29:28,150
kind of yous guys do we have REM

00:29:22,210 --> 00:29:30,970
collective okay restarting service so

00:29:28,150 --> 00:29:34,180
it's basically the fire one of commands

00:29:30,970 --> 00:29:40,900
do this on yeah that's one case of

00:29:34,180 --> 00:29:42,760
orchestration yeah we have a similar

00:29:40,900 --> 00:29:49,030
setup we used to do a lot of them

00:29:42,760 --> 00:29:52,720
collective bit since every left well the

00:29:49,030 --> 00:29:55,440
one of tooling where you do this on 20

00:29:52,720 --> 00:29:58,390
machines that's a relevant Hughes case

00:29:55,440 --> 00:30:01,450
the bigger argument people get is yes

00:29:58,390 --> 00:30:03,940
but I need to be able to first deploy my

00:30:01,450 --> 00:30:05,820
database then deploy my application then

00:30:03,940 --> 00:30:07,720
do this and then do that and

00:30:05,820 --> 00:30:13,120
configuration management tools do not

00:30:07,720 --> 00:30:14,590
help me there well i'm not sure if

00:30:13,120 --> 00:30:16,570
configuration management tools or even

00:30:14,590 --> 00:30:19,270
any tool at all should help you there

00:30:16,570 --> 00:30:20,860
that's an architectural design mistake

00:30:19,270 --> 00:30:24,550
that means that your applications are

00:30:20,860 --> 00:30:26,620
not resilient if your application starts

00:30:24,550 --> 00:30:28,300
and it completely fails because it

00:30:26,620 --> 00:30:29,500
cannot reach the database what's going

00:30:28,300 --> 00:30:30,700
to happen if the database disappear

00:30:29,500 --> 00:30:32,650
somewhere along the road if the network

00:30:30,700 --> 00:30:35,230
hiccups your application should be

00:30:32,650 --> 00:30:37,540
resilient it should try retry head of

00:30:35,230 --> 00:30:43,090
time out and come back made a useful

00:30:37,540 --> 00:30:46,120
error but it should not just fail just

00:30:43,090 --> 00:30:48,430
humble at his keynote at a configuration

00:30:46,120 --> 00:30:50,620
management cam made add a really hard

00:30:48,430 --> 00:30:52,690
statement I mean you don't need

00:30:50,620 --> 00:30:54,670
orchestration you need to talk with your

00:30:52,690 --> 00:30:57,130
developers and design more resilient

00:30:54,670 --> 00:30:59,620
infrastructures if you have smaller

00:30:57,130 --> 00:31:02,860
services that depend on each other they

00:30:59,620 --> 00:31:08,940
should assume that sometimes stuff might

00:31:02,860 --> 00:31:12,190
go away so the lack of functionality

00:31:08,940 --> 00:31:14,730
might also be that you need to rethink

00:31:12,190 --> 00:31:14,730
your infrastructure

00:31:35,130 --> 00:31:40,720
that that's a potential use case indeed

00:31:38,410 --> 00:31:43,540
I use high availability frameworks for

00:31:40,720 --> 00:31:44,980
that and they will manage the fact that

00:31:43,540 --> 00:31:47,559
I need to have at least four nodes

00:31:44,980 --> 00:31:50,919
running this resource and that's another

00:31:47,559 --> 00:31:52,210
thing where you need to use a different

00:31:50,919 --> 00:31:52,960
tool for a different job configuration

00:31:52,210 --> 00:31:55,240
management and high availability

00:31:52,960 --> 00:31:57,820
frameworks are going to need to work

00:31:55,240 --> 00:32:00,070
together we're going to see evolutions

00:31:57,820 --> 00:32:01,809
where tools like missiles in Cuba nets

00:32:00,070 --> 00:32:04,270
are going to define the minimal number

00:32:01,809 --> 00:32:07,540
of nodes we're going to need to run for

00:32:04,270 --> 00:32:09,580
a specific service five years ago we're

00:32:07,540 --> 00:32:11,620
doing exactly the same with processes

00:32:09,580 --> 00:32:14,549
using coercing a pacemaker now it's

00:32:11,620 --> 00:32:19,090
moving to a much more complex

00:32:14,549 --> 00:32:20,530
distributed system algorithm but in a

00:32:19,090 --> 00:32:24,610
way there there's different ways to

00:32:20,530 --> 00:32:28,150
tackle that so it could be designed

00:32:24,610 --> 00:32:29,799
variant or it could be design error but

00:32:28,150 --> 00:32:31,870
your application should be more

00:32:29,799 --> 00:32:36,370
resilient and then you can build that in

00:32:31,870 --> 00:32:40,390
different different ways one of the

00:32:36,370 --> 00:32:43,870
other thing I had to fight while not

00:32:40,390 --> 00:32:46,120
really fight when people said they

00:32:43,870 --> 00:32:47,440
didn't want to adopt infrastructure is

00:32:46,120 --> 00:32:49,540
good and configuration management is

00:32:47,440 --> 00:32:53,080
that we're going to do know of Seneca

00:32:49,540 --> 00:32:57,850
where we're going to just deploy on some

00:32:53,080 --> 00:33:01,299
public sauce and it's all going to be

00:32:57,850 --> 00:33:03,730
solved well who do you think manages

00:33:01,299 --> 00:33:06,460
those machines but do you think these

00:33:03,730 --> 00:33:08,260
guys are using you just outsource the

00:33:06,460 --> 00:33:10,840
problem it's not that it doesn't exist

00:33:08,260 --> 00:33:11,890
it's not that those people say we're not

00:33:10,840 --> 00:33:15,790
using any kind of configuration

00:33:11,890 --> 00:33:17,940
management or we don't use this kind of

00:33:15,790 --> 00:33:24,240
stuff

00:33:17,940 --> 00:33:26,460
a quiz question so somewhere along

00:33:24,240 --> 00:33:29,460
history somebody said so we build this

00:33:26,460 --> 00:33:36,929
thing we wrap it up and now you can run

00:33:29,460 --> 00:33:41,720
it anywhere who said that yeah the Java

00:33:36,929 --> 00:33:57,980
guys in 1996 when they announced Duke

00:33:41,720 --> 00:34:02,039
build ones run everywhere docker yeah

00:33:57,980 --> 00:34:05,279
nothing has changed we're about almost

00:34:02,039 --> 00:34:08,639
20 years later and I don't need

00:34:05,279 --> 00:34:12,480
configuration management anymore I'm

00:34:08,639 --> 00:34:15,990
just going to give you a big fat package

00:34:12,480 --> 00:34:20,639
and I'm gonna have you try that in

00:34:15,990 --> 00:34:24,230
production who works like that who's

00:34:20,639 --> 00:34:31,020
using docker here same as OpenStack

00:34:24,230 --> 00:34:35,339
nobody yeah using like using in

00:34:31,020 --> 00:34:37,770
production I mean don't get me wrong I

00:34:35,339 --> 00:34:41,190
love ducker if you're using it the right

00:34:37,770 --> 00:34:43,649
way but the current trend I'm seeing is

00:34:41,190 --> 00:34:48,800
that for a lot of cases docker is

00:34:43,649 --> 00:34:52,050
widening the gaps between dev and ops a

00:34:48,800 --> 00:34:54,030
five to ten years ago we had the tarball

00:34:52,050 --> 00:34:56,159
which was given to us by a developer on

00:34:54,030 --> 00:34:58,500
a Friday evening like here Jody's in

00:34:56,159 --> 00:34:59,609
production and we have the dependencies

00:34:58,500 --> 00:35:01,109
we needed to figure out we need to

00:34:59,609 --> 00:35:05,250
figure out credentials how to deploy it

00:35:01,109 --> 00:35:06,960
is hard to do this now we have something

00:35:05,250 --> 00:35:08,490
which actually works yes I can lounge

00:35:06,960 --> 00:35:10,400
the container but I have no clue how to

00:35:08,490 --> 00:35:12,839
monitor have no clue how to manage it I

00:35:10,400 --> 00:35:15,000
don't even know what metrics are out

00:35:12,839 --> 00:35:17,640
there and we need to take that effort

00:35:15,000 --> 00:35:19,349
again we need to start talking with the

00:35:17,640 --> 00:35:20,400
people that want to use containers and

00:35:19,349 --> 00:35:22,200
we need to start talking with those

00:35:20,400 --> 00:35:24,000
developers again and make sure that we

00:35:22,200 --> 00:35:26,550
can together build those images and

00:35:24,000 --> 00:35:29,250
together make something which is

00:35:26,550 --> 00:35:32,869
reproducible guess what we're going to

00:35:29,250 --> 00:35:32,869
use to make this image is reproducible

00:35:34,880 --> 00:35:41,580
ansible puppet chef whatever exactly the

00:35:38,820 --> 00:35:43,320
same tough we've been using we're just

00:35:41,580 --> 00:35:46,140
going to shift from virtual platforms

00:35:43,320 --> 00:35:47,970
the containers where that fits but we're

00:35:46,140 --> 00:35:50,070
still going to use infrastructure as

00:35:47,970 --> 00:35:53,190
code except if you really like to write

00:35:50,070 --> 00:35:54,660
docker files like this I mean each time

00:35:53,190 --> 00:35:57,420
I see the run statement in the correct

00:35:54,660 --> 00:36:04,200
things me of basic the only thing I'm

00:35:57,420 --> 00:36:07,890
missing is go to 10 we still gonna need

00:36:04,200 --> 00:36:09,390
to do this we're gonna work ducker is

00:36:07,890 --> 00:36:10,410
slowing down develops adoption because

00:36:09,390 --> 00:36:13,500
now we're going to need to do the

00:36:10,410 --> 00:36:15,870
exercise all over again but it's going

00:36:13,500 --> 00:36:17,970
to happen we're gonna talk with

00:36:15,870 --> 00:36:21,390
developers and build these containers

00:36:17,970 --> 00:36:23,220
together and then we're going to have by

00:36:21,390 --> 00:36:24,810
the time we reach that doctor will

00:36:23,220 --> 00:36:26,640
probably be ready to be monitored and

00:36:24,810 --> 00:36:31,920
managed in production / different

00:36:26,640 --> 00:36:33,810
networks etiquette this is what it was

00:36:31,920 --> 00:36:36,840
for me I never hated configuration

00:36:33,810 --> 00:36:40,590
management I had grown through the

00:36:36,840 --> 00:36:43,290
problem of having to manage 1020 4,200

00:36:40,590 --> 00:36:45,240
machines manually I knew what the pain

00:36:43,290 --> 00:36:47,190
was and for a lot of young people

00:36:45,240 --> 00:36:48,570
they've never seen the pain they've

00:36:47,190 --> 00:36:50,190
never had to do that because they've

00:36:48,570 --> 00:36:53,220
always had tools in place I did that for

00:36:50,190 --> 00:36:55,140
them one of my favorite interview

00:36:53,220 --> 00:36:56,490
questions to young people is if I ask

00:36:55,140 --> 00:37:00,060
you how to deploy four hundred machines

00:36:56,490 --> 00:37:03,330
how would you start at and a lot of them

00:37:00,060 --> 00:37:05,610
just go I you stop it okay and if you do

00:37:03,330 --> 00:37:08,100
that with a senior guy that you get a

00:37:05,610 --> 00:37:10,440
completely different feedback because

00:37:08,100 --> 00:37:13,050
they have seen how we did that ages ago

00:37:10,440 --> 00:37:14,340
and because of that evolution for a lot

00:37:13,050 --> 00:37:15,810
of people infrastructure is coding

00:37:14,340 --> 00:37:17,820
configuration management was love at

00:37:15,810 --> 00:37:20,190
first sight and not something we've

00:37:17,820 --> 00:37:23,280
hated it's something that has helped us

00:37:20,190 --> 00:37:28,080
doing our job better um and I hope that

00:37:23,280 --> 00:37:33,990
for for you guys that's the same burnt

00:37:28,080 --> 00:37:35,370
is lunch ready climb down here well then

00:37:33,990 --> 00:37:41,420
we still a five min and it's for

00:37:35,370 --> 00:37:41,420
questions you have a question

00:38:44,200 --> 00:38:48,280
it's going to make a big difference

00:38:46,000 --> 00:38:53,109
because we're going to need to configure

00:38:48,280 --> 00:38:55,780
and manage much more I mean if Garrett

00:38:53,109 --> 00:38:57,400
Raj Grove has awesome slides on where we

00:38:55,780 --> 00:38:59,190
went from physical machines to virtual

00:38:57,400 --> 00:39:01,150
machines and now we've gone from

00:38:59,190 --> 00:39:02,440
physical machines and virtual machines

00:39:01,150 --> 00:39:05,109
to physical machines and virtual

00:39:02,440 --> 00:39:08,050
machines with containers and it just

00:39:05,109 --> 00:39:10,230
exploding and we need to figure out how

00:39:08,050 --> 00:39:12,220
to manage those at scale and

00:39:10,230 --> 00:39:14,349
infrastructure as code has been helping

00:39:12,220 --> 00:39:18,089
us to go from one step to another and

00:39:14,349 --> 00:39:21,670
now we need to go to gather normal step

00:39:18,089 --> 00:39:24,280
the techni life seen there is that we've

00:39:21,670 --> 00:39:28,560
still not use the powers of

00:39:24,280 --> 00:39:31,530
infrastructure as code to their maximum

00:39:28,560 --> 00:39:34,540
the part of that comes back to what

00:39:31,530 --> 00:39:38,440
module was saying yesterday this is

00:39:34,540 --> 00:39:44,200
Europe how many people do actually have

00:39:38,440 --> 00:39:47,970
kettle one guy two people three people

00:39:44,200 --> 00:39:51,670
have cattle the rest have pets and

00:39:47,970 --> 00:39:54,640
doctor will force us to go to cattle but

00:39:51,670 --> 00:39:58,569
before that happens the developers will

00:39:54,640 --> 00:40:00,250
need to adapt their practices they need

00:39:58,569 --> 00:40:03,099
to start building much more staples in

00:40:00,250 --> 00:40:08,940
person they need to really move to micro

00:40:03,099 --> 00:40:08,940
services and it's going to take time and

00:40:09,750 --> 00:40:17,920
we're having a bunch of problems with I

00:40:12,310 --> 00:40:19,900
mean did I ever give an open-source

00:40:17,920 --> 00:40:21,790
virtualization talk overview and one of

00:40:19,900 --> 00:40:24,790
your conferences I don't know because I

00:40:21,790 --> 00:40:27,369
know that somewhere along 2006-2007 when

00:40:24,790 --> 00:40:28,630
I was doing a lot of Zen work I gave an

00:40:27,369 --> 00:40:30,609
overview of a lot of tools and I was

00:40:28,630 --> 00:40:33,760
talking about containers back then

00:40:30,609 --> 00:40:37,690
vserver Alexei and we call them fruits

00:40:33,760 --> 00:40:39,839
on steroids that was like almost ten

00:40:37,690 --> 00:40:42,400
years ago and we were using them then

00:40:39,839 --> 00:40:44,140
what's changing now is the fact that

00:40:42,400 --> 00:40:46,180
it's starting to become an artifact

00:40:44,140 --> 00:40:47,859
which we need to be able to build and if

00:40:46,180 --> 00:40:49,450
we talk about artifacts we're talking

00:40:47,859 --> 00:40:50,980
about continuous integration in

00:40:49,450 --> 00:40:52,480
continuous delivery and that artifact

00:40:50,980 --> 00:40:55,619
needs something which is reproducible

00:40:52,480 --> 00:40:58,140
which goes to the whole lifecycle and

00:40:55,619 --> 00:41:01,740
that's something we once again

00:40:58,140 --> 00:41:03,390
meet to learn to build together with the

00:41:01,740 --> 00:41:06,510
developers and that's to meet a

00:41:03,390 --> 00:41:08,910
challenge the challenge is not that

00:41:06,510 --> 00:41:10,529
we're going to need to figure out how to

00:41:08,910 --> 00:41:14,760
build them physically but how to do that

00:41:10,529 --> 00:41:18,450
together if you can trivially run puppet

00:41:14,760 --> 00:41:20,700
apply or some ansible run in a docker

00:41:18,450 --> 00:41:22,710
file and have it set up everything that

00:41:20,700 --> 00:41:25,920
does but there's going to be stuff which

00:41:22,710 --> 00:41:27,869
is going to be different they kiss it's

00:41:25,920 --> 00:41:30,329
a container because you cannot run

00:41:27,869 --> 00:41:32,180
iptables because you cannot modify your

00:41:30,329 --> 00:41:35,460
proc file system stuff like that and

00:41:32,180 --> 00:41:37,289
that's going to be the interesting

00:41:35,460 --> 00:41:39,240
technical evolution but the biggest

00:41:37,289 --> 00:41:40,829
challenge still will be working together

00:41:39,240 --> 00:41:42,210
with the people that want to throw the

00:41:40,829 --> 00:41:46,230
container over the wall and forget about

00:41:42,210 --> 00:41:48,569
it because that's a culture problem and

00:41:46,230 --> 00:41:56,819
one day I'll write the sequel part 5

00:41:48,569 --> 00:41:59,579
culture sucks okay I'm just ready are

00:41:56,819 --> 00:42:03,079
there any further questions it's lunch

00:41:59,579 --> 00:42:07,039
ready I don't know that's my question

00:42:03,079 --> 00:42:11,210
sorry I'm here with you I don't know

00:42:07,039 --> 00:42:11,210
much Chris thanks for quick

00:42:14,640 --> 00:42:16,700

YouTube URL: https://www.youtube.com/watch?v=J8r1PszQqIY


