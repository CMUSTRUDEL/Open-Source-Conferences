Title: OSDC 2015: Matthias Klein | How to use OS Software to have near Production Dev. and Testing Envir
Publication date: 2015-04-30
Playlist: OSDC 2015 | Open Source Data Center Conference
Description: 
	This talk is meant to present different (well known) OSS in a bigger context from development to production.
It will cover the following software/concepts:

    apt-mirror - why is it a good idea to have multiple own repositories
    puppet/hiera - the tool that glues everything together
    vagrant - create production like machines for developers in nearly no time
    jenkins - test and build your software
    dpkg-deb - why you should deploy using packages

In this talk Matthias will present the techniques they use to develop and deploy software in some projects. He will describe how all these tools work together at this point in time, which difficulties they have found (vagrant and jenkins didn't work well together) and which improvements are still to be done.

Because of the amount of tools he will talk more about the concepts and ideas behind. He will try to present and explain at least one script we use (most probably the package creation and deployment part). For more technical details he is open to talk to interested people during the breaks / in the evening / later by mail.
Captions: 
	00:00:06,850 --> 00:00:11,790
and now we will listen to what he has

00:00:08,950 --> 00:00:11,790
line how to use

00:00:13,210 --> 00:00:22,240
vironment enjoy okay welcome yes the

00:00:18,970 --> 00:00:25,240
question is why do we use or do we need

00:00:22,240 --> 00:00:29,230
near production development environments

00:00:25,240 --> 00:00:32,470
and the reason is to know what will

00:00:29,230 --> 00:00:36,880
happen in production later when we

00:00:32,470 --> 00:00:39,100
develop our software first I want to

00:00:36,880 --> 00:00:40,690
introduce myself I'm a system

00:00:39,100 --> 00:00:44,680
administrator in browser gaming

00:00:40,690 --> 00:00:47,710
companies within six years and I'm

00:00:44,680 --> 00:00:49,690
responsible for the internal systems at

00:00:47,710 --> 00:00:55,000
inner game since two years and I'm

00:00:49,690 --> 00:00:57,120
building the infrastructure there and in

00:00:55,000 --> 00:01:01,030
all games develops browser games we have

00:00:57,120 --> 00:01:05,140
150 million users at the moment we are

00:01:01,030 --> 00:01:08,050
located in Hamburg the infrastructure we

00:01:05,140 --> 00:01:13,390
are talking about now are around 8,000

00:01:08,050 --> 00:01:15,909
service of ninety percent of them are

00:01:13,390 --> 00:01:20,259
virtual machines we are using sin at the

00:01:15,909 --> 00:01:27,189
moment we are using Debian on almost all

00:01:20,259 --> 00:01:31,390
servers then we use puppet we use

00:01:27,189 --> 00:01:35,590
Jenkins for package building the normal

00:01:31,390 --> 00:01:40,869
deviant wields dpkg depp use icinga for

00:01:35,590 --> 00:01:44,369
monitoring we have admin tool written by

00:01:40,869 --> 00:01:48,460
one of my colleagues which is our

00:01:44,369 --> 00:01:52,240
inventory system and it is important to

00:01:48,460 --> 00:01:54,520
have this because you want to push

00:01:52,240 --> 00:01:57,729
additional information to prepare to

00:01:54,520 --> 00:02:02,350
like popular environments and I'm

00:01:57,729 --> 00:02:06,549
talking about this later and we use our

00:02:02,350 --> 00:02:11,070
own package server for this we in we

00:02:06,549 --> 00:02:14,910
used Admiral but we rewrote it or

00:02:11,070 --> 00:02:17,740
extended it to have better control over

00:02:14,910 --> 00:02:21,940
over the things that are happening to

00:02:17,740 --> 00:02:24,310
our repositories and you may know the

00:02:21,940 --> 00:02:26,680
situation your developers developed new

00:02:24,310 --> 00:02:30,340
fancy coat they test on them

00:02:26,680 --> 00:02:36,359
maybe they test on testing environments

00:02:30,340 --> 00:02:36,359
they deploy to production and the sepals

00:02:37,079 --> 00:02:42,939
the main reason why this may occur or

00:02:40,599 --> 00:02:45,000
what we experience is that we have

00:02:42,939 --> 00:02:47,230
different software versions on

00:02:45,000 --> 00:02:50,189
development machines testing machines

00:02:47,230 --> 00:02:53,439
production servers it may happen that

00:02:50,189 --> 00:02:55,540
developers need some new modules and

00:02:53,439 --> 00:02:58,329
simply install them on their machines

00:02:55,540 --> 00:03:03,489
and when the software goes to production

00:02:58,329 --> 00:03:07,209
a module is missing that's it then we

00:03:03,489 --> 00:03:10,510
have some or had some deployment issues

00:03:07,209 --> 00:03:13,209
so that there were build steps involved

00:03:10,510 --> 00:03:16,840
in the deployment such as running

00:03:13,209 --> 00:03:19,780
composure under on the target machine

00:03:16,840 --> 00:03:22,659
which is not a good idea if the target

00:03:19,780 --> 00:03:27,400
machine can't reach the repository for

00:03:22,659 --> 00:03:29,669
any reason or configuration differences

00:03:27,400 --> 00:03:37,900
in development testing staging

00:03:29,669 --> 00:03:40,209
production environments such as missing

00:03:37,900 --> 00:03:46,659
rewrite rules and so on all this may

00:03:40,209 --> 00:03:50,109
happen and new system a system you can

00:03:46,659 --> 00:03:55,209
build will go this way nothing happens

00:03:50,109 --> 00:03:58,810
everything is fine and we changed many

00:03:55,209 --> 00:04:02,829
things in our development and deployment

00:03:58,810 --> 00:04:05,500
cycles so the developers have their

00:04:02,829 --> 00:04:08,109
vagrant machines locally and the rate

00:04:05,500 --> 00:04:11,739
went machines are provisioned by the

00:04:08,109 --> 00:04:13,750
same puppet files as the production

00:04:11,739 --> 00:04:17,799
servers this is at a moment work in

00:04:13,750 --> 00:04:25,060
progress but I hope to have just

00:04:17,799 --> 00:04:29,110
finished zoom we use Jenkins simply as a

00:04:25,060 --> 00:04:32,530
drop starter in the previous environment

00:04:29,110 --> 00:04:34,150
Jenkins tested this software on the

00:04:32,530 --> 00:04:36,849
drinking's machine then we ran into

00:04:34,150 --> 00:04:39,520
problems like all deserve is often each

00:04:36,849 --> 00:04:39,899
php5 for this one needs five six and so

00:04:39,520 --> 00:04:45,270
on

00:04:39,899 --> 00:04:50,050
and that's not a good situation so

00:04:45,270 --> 00:04:52,270
Jenkins simply connects to a virtual

00:04:50,050 --> 00:04:55,809
machine and once to drop their and gives

00:04:52,270 --> 00:04:58,959
you the output then Jenkins is used to

00:04:55,809 --> 00:05:03,339
build the deviant packages when we need

00:04:58,959 --> 00:05:06,969
them and then it pushes them to internal

00:05:03,339 --> 00:05:11,860
repository server then we can deploy

00:05:06,969 --> 00:05:16,659
from there and the package is pushed to

00:05:11,860 --> 00:05:19,119
the testing system which then means if

00:05:16,659 --> 00:05:25,949
we deploy into production we deploy a

00:05:19,119 --> 00:05:31,659
package what we already tested puppet is

00:05:25,949 --> 00:05:33,869
very very important you will know that

00:05:31,659 --> 00:05:38,139
it's a configuration management system

00:05:33,869 --> 00:05:41,349
you also could use chef or CF engine

00:05:38,139 --> 00:05:45,610
what you like it should work in with

00:05:41,349 --> 00:05:48,879
different systems and we make use of

00:05:45,610 --> 00:05:52,809
puppet environments which means you can

00:05:48,879 --> 00:05:56,409
have multiple or it's like multiple

00:05:52,809 --> 00:05:59,199
puppet master servers but you have it on

00:05:56,409 --> 00:06:03,789
one server and you define which machine

00:05:59,199 --> 00:06:06,339
is in which environment which leads to

00:06:03,789 --> 00:06:08,949
the situation that you only have to

00:06:06,339 --> 00:06:13,479
define a puppet manifest once or you

00:06:08,949 --> 00:06:17,110
have to define your configuration files

00:06:13,479 --> 00:06:21,579
once its template and then can you can

00:06:17,110 --> 00:06:24,999
inject variables for use in your

00:06:21,579 --> 00:06:30,069
different environments then we are using

00:06:24,999 --> 00:06:34,419
external nodes which is simply a script

00:06:30,069 --> 00:06:41,610
that returns the classes which have to

00:06:34,419 --> 00:06:45,550
be applied to the puppet and also some

00:06:41,610 --> 00:06:50,830
variables you may need like IP addresses

00:06:45,550 --> 00:06:57,790
or which environment to

00:06:50,830 --> 00:07:00,850
awesome in and we use hero which can

00:06:57,790 --> 00:07:06,550
define additional variables to use in

00:07:00,850 --> 00:07:10,030
different environments you have one

00:07:06,550 --> 00:07:14,530
possibility for example if we have here

00:07:10,030 --> 00:07:18,280
a production and a testing server you

00:07:14,530 --> 00:07:23,320
can write your engine X config set the

00:07:18,280 --> 00:07:26,140
server name right to config files then

00:07:23,320 --> 00:07:30,640
you have the puppet manifests and tell

00:07:26,140 --> 00:07:36,130
you say ok if the name is server one

00:07:30,640 --> 00:07:37,930
then it gets one config then if we have

00:07:36,130 --> 00:07:41,920
the other server let's get the other it

00:07:37,930 --> 00:07:45,520
gets the other config this is not very

00:07:41,920 --> 00:07:49,660
nice because except for the server names

00:07:45,520 --> 00:07:51,700
the conflict may be equal so if you

00:07:49,660 --> 00:07:54,790
change one parameter in one configure to

00:07:51,700 --> 00:07:59,830
change the G other other one too and

00:07:54,790 --> 00:08:07,240
this is very inconvenient for you so you

00:07:59,830 --> 00:08:13,500
should use hero here we see an example

00:08:07,240 --> 00:08:16,720
of a line in here are it's a JSON file

00:08:13,500 --> 00:08:20,080
where you can put in your different

00:08:16,720 --> 00:08:28,600
values and here is e to different

00:08:20,080 --> 00:08:33,670
environments we have one manifest there

00:08:28,600 --> 00:08:38,050
we pass the variable server name then we

00:08:33,670 --> 00:08:44,910
use the file and unix config as a

00:08:38,050 --> 00:08:49,170
template it's a Rui fire and we have one

00:08:44,910 --> 00:08:54,550
config file where we use this variable

00:08:49,170 --> 00:09:00,150
and if you do this for the different

00:08:54,550 --> 00:09:03,990
things you need then you can go on with

00:09:00,150 --> 00:09:08,680
10 definition you can also pass

00:09:03,990 --> 00:09:14,710
proxy proxy hosts and so on you define

00:09:08,680 --> 00:09:19,090
it in here the next important thing is

00:09:14,710 --> 00:09:24,880
the package management as I said we are

00:09:19,090 --> 00:09:28,990
using debian and if you use the upstream

00:09:24,880 --> 00:09:30,940
repositories you have more or less the

00:09:28,990 --> 00:09:34,720
problem that if your developers are

00:09:30,940 --> 00:09:38,620
allowed to install software only servers

00:09:34,720 --> 00:09:41,530
there today may install wrong software

00:09:38,620 --> 00:09:43,630
packages you don't know about review

00:09:41,530 --> 00:09:48,580
then you run into the problem you can't

00:09:43,630 --> 00:09:54,160
upgrade them so we decided to build our

00:09:48,580 --> 00:09:56,710
own repository server this gives us

00:09:54,160 --> 00:09:59,710
control over the packages which are

00:09:56,710 --> 00:10:02,860
available on the on the machines in the

00:09:59,710 --> 00:10:07,440
end it gives us control over the

00:10:02,860 --> 00:10:14,040
versions of the software we can use

00:10:07,440 --> 00:10:21,340
latest in puppet for packages so if we

00:10:14,040 --> 00:10:25,510
decide to to update lip ssl then we are

00:10:21,340 --> 00:10:31,090
sure that the lib SSL is to a most

00:10:25,510 --> 00:10:34,630
recent version on all servers then you

00:10:31,090 --> 00:10:38,020
can make testing easier with dedicated

00:10:34,630 --> 00:10:40,600
repositories so you will have one

00:10:38,020 --> 00:10:44,320
repository server which holds two

00:10:40,600 --> 00:10:47,350
repository for your project and then you

00:10:44,320 --> 00:10:51,730
have simply an additional testing

00:10:47,350 --> 00:10:54,580
repository and then you can tell the

00:10:51,730 --> 00:10:57,310
machines or special machines you want to

00:10:54,580 --> 00:10:59,590
test you can tell them ok please use the

00:10:57,310 --> 00:11:05,170
testing repository you check everything

00:10:59,590 --> 00:11:07,890
and when it's fine then you can say ok I

00:11:05,170 --> 00:11:10,570
copy testing to production and

00:11:07,890 --> 00:11:14,950
everything should run fine you can never

00:11:10,570 --> 00:11:16,900
say but in most cases it's ok and the

00:11:14,950 --> 00:11:17,590
next thing is you can deploy your

00:11:16,900 --> 00:11:24,610
application

00:11:17,590 --> 00:11:28,270
by our Libyan apt you need this

00:11:24,610 --> 00:11:30,970
repository if you if you want to if you

00:11:28,270 --> 00:11:33,280
want to deploy your software by our

00:11:30,970 --> 00:11:39,640
packages you should have this server

00:11:33,280 --> 00:11:42,820
because you could use the pke and simply

00:11:39,640 --> 00:11:46,900
put the package on every server and then

00:11:42,820 --> 00:11:50,970
install it there but believe me it will

00:11:46,900 --> 00:11:50,970
get get a mess of packages in the end

00:11:52,290 --> 00:11:59,470
what you need to build your own package

00:11:56,080 --> 00:12:03,940
server is of course a machine with a

00:11:59,470 --> 00:12:07,830
reasonable amount of disk space and then

00:12:03,940 --> 00:12:13,840
you can use up mirror to mirror

00:12:07,830 --> 00:12:18,940
repositories to your own server then you

00:12:13,840 --> 00:12:22,360
would select your packages you need for

00:12:18,940 --> 00:12:27,100
for your project put them in your

00:12:22,360 --> 00:12:29,860
repository we use hard links because of

00:12:27,100 --> 00:12:33,760
the disk space at the moment we have

00:12:29,860 --> 00:12:40,270
around 8200 repositories on our server

00:12:33,760 --> 00:12:41,650
so make sense to have had links you have

00:12:40,270 --> 00:12:47,980
to take care of the dependencies of

00:12:41,650 --> 00:12:50,740
course and in the end if you put all

00:12:47,980 --> 00:12:54,220
files you need in your directory you can

00:12:50,740 --> 00:12:58,320
use up ftp archive to generate your

00:12:54,220 --> 00:13:04,540
packages files to generate signatures

00:12:58,320 --> 00:13:08,760
then you have to enable HTTP or ftp that

00:13:04,540 --> 00:13:12,280
your servers can fetch the packages and

00:13:08,760 --> 00:13:16,090
you can do it all by hand you can write

00:13:12,280 --> 00:13:21,040
your own scripts but we have already

00:13:16,090 --> 00:13:25,270
done this we have some scripts to handle

00:13:21,040 --> 00:13:28,030
the repositories they are not available

00:13:25,270 --> 00:13:30,339
at the moment because they need some

00:13:28,030 --> 00:13:34,290
polishing but

00:13:30,339 --> 00:13:39,399
think within a month we can provide them

00:13:34,290 --> 00:13:41,589
so you can have a basic repository

00:13:39,399 --> 00:13:43,839
management on your own you can extend

00:13:41,589 --> 00:13:50,980
them they are written in Python to use

00:13:43,839 --> 00:13:55,809
pass a net it's a very nice way too many

00:13:50,980 --> 00:14:00,269
tree repositories but you have to be

00:13:55,809 --> 00:14:04,420
careful if you use the puppet latest

00:14:00,269 --> 00:14:08,939
functionality then you should not allow

00:14:04,420 --> 00:14:14,879
other sources then the ones you defined

00:14:08,939 --> 00:14:20,740
you can make sure that it is done by

00:14:14,879 --> 00:14:22,930
puppet itself you can have novios or I

00:14:20,740 --> 00:14:28,629
sing our checks for it that warn you

00:14:22,930 --> 00:14:31,660
something may be wrong you should also

00:14:28,629 --> 00:14:34,449
check that every package which is

00:14:31,660 --> 00:14:36,759
installed on your machine that you have

00:14:34,449 --> 00:14:39,339
it in your repository else you might

00:14:36,759 --> 00:14:42,819
miss updates or important security

00:14:39,339 --> 00:14:45,699
updates and we experienced this

00:14:42,819 --> 00:14:48,370
situation when we had like 60 packages

00:14:45,699 --> 00:14:50,230
not in the repository because they came

00:14:48,370 --> 00:14:54,309
from the installation image and nobody

00:14:50,230 --> 00:14:57,459
knew about some libraries and you may

00:14:54,309 --> 00:15:04,300
find packages you don't want on your

00:14:57,459 --> 00:15:07,059
production service like a compiler then

00:15:04,300 --> 00:15:08,620
of course you should check if the

00:15:07,059 --> 00:15:11,679
packages on your machine are the same

00:15:08,620 --> 00:15:15,720
version as in your repositories if you

00:15:11,679 --> 00:15:15,720
put every package and pop it to latest

00:15:16,620 --> 00:15:23,550
it's okay then there should be no

00:15:19,689 --> 00:15:26,019
package in in a different version but

00:15:23,550 --> 00:15:31,449
maybe one package couldn't be and start

00:15:26,019 --> 00:15:34,899
correctly or you don't want a package to

00:15:31,449 --> 00:15:38,740
be latest like your database which you

00:15:34,899 --> 00:15:41,459
want to install by hand to check if

00:15:38,740 --> 00:15:41,459
everything is all right

00:15:43,090 --> 00:15:48,590
then of course you should check your

00:15:46,010 --> 00:15:52,550
repositories if they are up to date with

00:15:48,590 --> 00:15:56,570
the upstream repositories order the

00:15:52,550 --> 00:15:59,450
officer repositories because yeah you

00:15:56,570 --> 00:16:02,750
think everything is fine but you never

00:15:59,450 --> 00:16:10,040
put in new versions of important

00:16:02,750 --> 00:16:12,050
libraries or important packages and then

00:16:10,040 --> 00:16:14,420
you might have to explain to your

00:16:12,050 --> 00:16:16,490
developers why they can't install most

00:16:14,420 --> 00:16:18,650
of the packages because they are in a

00:16:16,490 --> 00:16:22,940
depository it depends on the situation

00:16:18,650 --> 00:16:27,800
you have in our company's the developers

00:16:22,940 --> 00:16:32,390
are allowed to install packages on the

00:16:27,800 --> 00:16:36,650
service and yeah this is the work around

00:16:32,390 --> 00:16:44,480
at the moment to to know what happens on

00:16:36,650 --> 00:16:49,990
the machines the next thing is the role

00:16:44,480 --> 00:16:56,870
of the Jenkins server which is as I said

00:16:49,990 --> 00:16:59,690
a simple job starter you can easily

00:16:56,870 --> 00:17:03,410
create VMs if you have your puppet

00:16:59,690 --> 00:17:07,040
manifests right if you define everything

00:17:03,410 --> 00:17:11,390
then you tell simply as an environment

00:17:07,040 --> 00:17:20,209
Jenkins and it builds your server with

00:17:11,390 --> 00:17:27,700
the server name you need yes we use send

00:17:20,209 --> 00:17:31,370
VMs because I tested it with vagrant on

00:17:27,700 --> 00:17:34,880
on the hardware hi hardware machine and

00:17:31,370 --> 00:17:38,270
as long as we have one project in a

00:17:34,880 --> 00:17:42,530
Jenkins everything is fine or you want

00:17:38,270 --> 00:17:44,960
to start only one machine but if you if

00:17:42,530 --> 00:17:47,500
you start multiple instances multi

00:17:44,960 --> 00:17:50,510
different instances of vagrant machines

00:17:47,500 --> 00:17:53,230
you run into a problem most probably

00:17:50,510 --> 00:17:54,770
because of virtualbox which we are using

00:17:53,230 --> 00:18:00,440
or which we you

00:17:54,770 --> 00:18:04,400
in this case so yeah that there's a

00:18:00,440 --> 00:18:08,570
workaround to start the machines one

00:18:04,400 --> 00:18:15,560
after the other by implementing log

00:18:08,570 --> 00:18:19,520
files into Jenkins which simply which

00:18:15,560 --> 00:18:24,860
simply manage when a machine may start

00:18:19,520 --> 00:18:28,130
or stop but it's a very very ugly way

00:18:24,860 --> 00:18:30,590
the next thing is that the provisioning

00:18:28,130 --> 00:18:36,760
of a machine takes very very long up to

00:18:30,590 --> 00:18:36,760
10 minutes we experienced and that's

00:18:37,120 --> 00:18:42,230
that's not very good if you want to make

00:18:40,370 --> 00:18:46,220
quick tests you can suspend your

00:18:42,230 --> 00:18:51,470
machines but then you have the problem

00:18:46,220 --> 00:18:54,740
that you're you are not sure if your

00:18:51,470 --> 00:18:58,000
puppet manifests there are able to fire

00:18:54,740 --> 00:19:03,490
up this machine from zero I've often

00:18:58,000 --> 00:19:06,290
experienced manifests them or we

00:19:03,490 --> 00:19:10,760
extended existing manifests and nobody

00:19:06,290 --> 00:19:16,070
tested if if I start from scratch does

00:19:10,760 --> 00:19:18,320
it work so we implemented tests for this

00:19:16,070 --> 00:19:21,020
but this means if you change something

00:19:18,320 --> 00:19:24,350
in your puppet config then you have to

00:19:21,020 --> 00:19:28,100
rebuild all machines we which are based

00:19:24,350 --> 00:19:34,120
on that to check if it works to apply

00:19:28,100 --> 00:19:39,430
the changes and it takes a long time and

00:19:34,120 --> 00:19:39,430
we had overall performance issues

00:19:39,670 --> 00:19:48,500
especially especially where was I ops

00:19:44,690 --> 00:19:54,790
and we had one-tenth of the performance

00:19:48,500 --> 00:19:57,940
compared to them and for testing this is

00:19:54,790 --> 00:20:02,960
not so nice for the developers so they

00:19:57,940 --> 00:20:05,880
complained yes this test is using eight

00:20:02,960 --> 00:20:08,280
minutes on your

00:20:05,880 --> 00:20:10,490
on our official Jenkins if I do this

00:20:08,280 --> 00:20:18,980
test on my machine it needs one minute

00:20:10,490 --> 00:20:26,540
so that's the reason why we switched to

00:20:18,980 --> 00:20:30,470
sin again how it works now is that you

00:20:26,540 --> 00:20:35,160
need a built trigger in Jenkins for the

00:20:30,470 --> 00:20:36,930
Libyan packages we use a guild observer

00:20:35,160 --> 00:20:41,550
for our repositories there you can

00:20:36,930 --> 00:20:46,490
define events and hooks then when

00:20:41,550 --> 00:20:49,470
someone takes a version in your lap then

00:20:46,490 --> 00:20:55,500
Jenkins gets this information Jenkins

00:20:49,470 --> 00:21:00,210
builds or Jenkins please build the

00:20:55,500 --> 00:21:04,770
package so then drinkin's once that's

00:21:00,210 --> 00:21:08,190
the whole composer stuff puts everything

00:21:04,770 --> 00:21:12,690
to the path you want to have on the

00:21:08,190 --> 00:21:16,980
server in the end then so the deviant

00:21:12,690 --> 00:21:20,190
folders are created we have a skeleton

00:21:16,980 --> 00:21:25,490
for it so simply data is copied we fill

00:21:20,190 --> 00:21:31,590
out some information like version then

00:21:25,490 --> 00:21:33,030
you can use scripts for handling your

00:21:31,590 --> 00:21:37,370
package what should happen before or

00:21:33,030 --> 00:21:42,650
after installation before after before

00:21:37,370 --> 00:21:42,650
after deletion before after upgrade

00:21:43,010 --> 00:21:48,960
maybe maybe your application contains a

00:21:46,230 --> 00:21:52,620
demon zo you want to stop the diamond

00:21:48,960 --> 00:21:58,170
and upgrade it started again that you

00:21:52,620 --> 00:22:03,570
can put into the files and to build it's

00:21:58,170 --> 00:22:07,410
very very easy command key PKG dep minus

00:22:03,570 --> 00:22:10,500
B the directory where our files reside

00:22:07,410 --> 00:22:15,090
and then where I want to have the

00:22:10,500 --> 00:22:16,830
package then the next step is to push or

00:22:15,090 --> 00:22:21,929
pull

00:22:16,830 --> 00:22:24,210
depends on how you want to do it the

00:22:21,929 --> 00:22:28,350
package adds to get some how to your

00:22:24,210 --> 00:22:30,590
repository server and then there you are

00:22:28,350 --> 00:22:36,330
get it generate a package files

00:22:30,590 --> 00:22:38,279
everything is fine so in this in this

00:22:36,330 --> 00:22:45,149
moment we have our package the package

00:22:38,279 --> 00:22:47,850
is on our testing system and then we

00:22:45,149 --> 00:22:54,360
decide okay it's a nice package we want

00:22:47,850 --> 00:22:59,669
to use it how to get this package into

00:22:54,360 --> 00:23:04,919
your production it's very easy if you go

00:22:59,669 --> 00:23:08,490
via SSH everywhere you could also put it

00:23:04,919 --> 00:23:10,740
into puppet as latest but then you have

00:23:08,490 --> 00:23:12,539
the problem that you didn't test it on

00:23:10,740 --> 00:23:15,510
your staging system because you uploaded

00:23:12,539 --> 00:23:17,429
it to your repository server so you have

00:23:15,510 --> 00:23:20,460
to decide do I want to have the package

00:23:17,429 --> 00:23:27,230
on a repository server automatically and

00:23:20,460 --> 00:23:30,389
tell the system okay install now or I

00:23:27,230 --> 00:23:33,120
decide to have the package on the

00:23:30,389 --> 00:23:36,419
repository later and to let let puppet

00:23:33,120 --> 00:23:41,549
manage the installation so you have to

00:23:36,419 --> 00:23:43,950
or another another thing might be if you

00:23:41,549 --> 00:23:45,809
say ok when our tests are done I'm sure

00:23:43,950 --> 00:23:48,630
that the package will work and I push it

00:23:45,809 --> 00:23:55,470
to production you can do this also but I

00:23:48,630 --> 00:23:56,850
think it's very dangerous ok now we have

00:23:55,470 --> 00:24:03,350
to pick it on the server everything is

00:23:56,850 --> 00:24:03,350
fine and we come to the role of vagrant

00:24:07,170 --> 00:24:14,740
yes you can configure a vagrant to use

00:24:10,570 --> 00:24:17,230
the puppet server provisioner so not

00:24:14,740 --> 00:24:21,370
using shells not or additionally using

00:24:17,230 --> 00:24:24,040
shower you can do this if you like you

00:24:21,370 --> 00:24:30,280
should set up an environment for vagrant

00:24:24,040 --> 00:24:32,650
in your puppet we decided to have a

00:24:30,280 --> 00:24:37,000
dedicated server for this to not

00:24:32,650 --> 00:24:39,610
conflict with production because the

00:24:37,000 --> 00:24:45,580
developers are writing the puppet

00:24:39,610 --> 00:24:48,430
scripts there or doing maintenance on

00:24:45,580 --> 00:24:51,370
the puppet scripts and maybe you don't

00:24:48,430 --> 00:24:56,770
want to have these changes immediately

00:24:51,370 --> 00:25:00,160
in your production system so you need to

00:24:56,770 --> 00:25:04,420
teach your developers how they have to

00:25:00,160 --> 00:25:08,520
handle the whole puppet stuff what they

00:25:04,420 --> 00:25:11,020
have to do to achieve certain things and

00:25:08,520 --> 00:25:14,830
nice thing is to have it in a version

00:25:11,020 --> 00:25:18,430
control system get as we n as you wish

00:25:14,830 --> 00:25:20,950
and you should check these definitions

00:25:18,430 --> 00:25:25,330
against the ones you have in your

00:25:20,950 --> 00:25:28,570
production environment because you might

00:25:25,330 --> 00:25:32,560
want to have these changes to for the

00:25:28,570 --> 00:25:36,940
news of the earth additionally there are

00:25:32,560 --> 00:25:39,190
some classes which are only used for the

00:25:36,940 --> 00:25:43,240
vagrant box like XD bug or something

00:25:39,190 --> 00:25:46,540
like that therefore you could add an

00:25:43,240 --> 00:25:48,810
additional class which you don't check

00:25:46,540 --> 00:25:48,810
of course

00:25:52,320 --> 00:26:03,580
but it is a good idea to have this class

00:26:01,359 --> 00:26:07,749
also in the depository for your

00:26:03,580 --> 00:26:11,229
production but not in use because by

00:26:07,749 --> 00:26:18,190
accident someone could put definitions

00:26:11,229 --> 00:26:20,049
in there you might need in your new

00:26:18,190 --> 00:26:29,409
production later when the package goes

00:26:20,049 --> 00:26:31,269
over so that's it for the moment thank

00:26:29,409 --> 00:26:33,599
you for listening and are there any

00:26:31,269 --> 00:26:33,599
questions

00:26:38,820 --> 00:26:45,960
how large is your entire infrastructure

00:26:41,260 --> 00:26:48,130
around what do you mean for for

00:26:45,960 --> 00:26:50,140
developers how many developers work and

00:26:48,130 --> 00:26:55,120
how many service or infrastructure test

00:26:50,140 --> 00:27:04,720
systems you're hosting we have test

00:26:55,120 --> 00:27:26,110
servers around 100 developers 150 and

00:27:04,720 --> 00:27:28,780
then productions or around 6,500 the

00:27:26,110 --> 00:27:34,299
question is if we have a way to review

00:27:28,780 --> 00:27:39,880
code before it goes to production yes

00:27:34,299 --> 00:27:44,380
yes the more or less we use puppetland

00:27:39,880 --> 00:27:46,500
which is it commits work and if it goes

00:27:44,380 --> 00:27:51,400
through then it goes through

00:27:46,500 --> 00:27:55,030
additionally we have environments for

00:27:51,400 --> 00:27:59,410
testing so if you if you change

00:27:55,030 --> 00:28:01,120
something in puppet you should use the

00:27:59,410 --> 00:28:04,090
testing environment with it which is

00:28:01,120 --> 00:28:09,460
simply switching to another branch then

00:28:04,090 --> 00:28:13,299
you can change everything you need you

00:28:09,460 --> 00:28:17,640
check it in them you define one machine

00:28:13,299 --> 00:28:24,940
or multiple machines to use this testing

00:28:17,640 --> 00:28:29,610
environment and just works fine if if

00:28:24,940 --> 00:28:29,610
you if you follow follow this workflow

00:28:47,859 --> 00:28:56,330
the question is how we deploy software

00:28:51,080 --> 00:28:59,389
either if regarding interruptions in the

00:28:56,330 --> 00:29:02,299
production system it depends we have

00:28:59,389 --> 00:29:05,389
systems which are allowed to have a

00:29:02,299 --> 00:29:08,690
interruption in the service and then

00:29:05,389 --> 00:29:12,639
there it's easy you deploy and you have

00:29:08,690 --> 00:29:16,659
a downtime of five seconds most players

00:29:12,639 --> 00:29:21,379
even don't know don't notice notice that

00:29:16,659 --> 00:29:24,919
but in in the backend services where you

00:29:21,379 --> 00:29:31,159
have payments and so on there we have a

00:29:24,919 --> 00:29:35,149
load balancing which means we take one

00:29:31,159 --> 00:29:39,320
or a part of the service out of the load

00:29:35,149 --> 00:29:42,049
balancing we do the update their check

00:29:39,320 --> 00:29:43,789
check if everything is all right then we

00:29:42,049 --> 00:29:46,519
switched and the new version is online

00:29:43,789 --> 00:29:52,909
we update the rest and switch them

00:29:46,519 --> 00:29:55,759
online again no this is this is done you

00:29:52,909 --> 00:30:00,919
can do it by hand if everything fails

00:29:55,759 --> 00:30:03,590
but we have a update demon so this

00:30:00,919 --> 00:30:06,229
update demon listens if there's a

00:30:03,590 --> 00:30:10,539
request for the update then it takes

00:30:06,229 --> 00:30:13,879
care of switching off the load balancing

00:30:10,539 --> 00:30:16,090
applying the packages and doing all the

00:30:13,879 --> 00:30:16,090
stuff

00:30:21,560 --> 00:30:30,050
any more questions we have still time

00:30:34,790 --> 00:30:42,390
yes the thing is if you use your

00:30:39,030 --> 00:30:45,900
question please oh the question was we

00:30:42,390 --> 00:30:48,240
are using an own up neuro script the

00:30:45,900 --> 00:30:52,220
thing with the original up mirror is

00:30:48,240 --> 00:30:55,590
that it really mirrors the repository

00:30:52,220 --> 00:30:59,130
you are factoring from so which means it

00:30:55,590 --> 00:31:02,220
slows out old versions for example so

00:30:59,130 --> 00:31:05,600
you have only the latest version but in

00:31:02,220 --> 00:31:09,390
our environment we want to have a

00:31:05,600 --> 00:31:13,130
certain amount of older versions to have

00:31:09,390 --> 00:31:17,360
the possibility to switch back and we

00:31:13,130 --> 00:31:20,250
changed this behavior to simply

00:31:17,360 --> 00:31:25,280
configure how many old versions we want

00:31:20,250 --> 00:31:28,920
to have for certain repositories then

00:31:25,280 --> 00:31:33,180
their their handling of the Debian

00:31:28,920 --> 00:31:35,610
repositories is sometimes ugly so we

00:31:33,180 --> 00:31:38,010
said okay air so if they if they switch

00:31:35,610 --> 00:31:39,570
to another repository name for for

00:31:38,010 --> 00:31:42,030
example if they switch to archive it

00:31:39,570 --> 00:31:44,760
would also download this repository and

00:31:42,030 --> 00:31:49,400
you have it twice when old version a new

00:31:44,760 --> 00:31:56,610
world and to work around these issues

00:31:49,400 --> 00:31:59,730
use this tool I think in a month in

00:31:56,610 --> 00:32:03,600
around month you can you can write to my

00:31:59,730 --> 00:32:08,660
email address and then I will give you

00:32:03,600 --> 00:32:08,660
the link yeah

00:32:19,270 --> 00:32:26,840
the question is when do the developers

00:32:22,520 --> 00:32:28,880
test the application the first tests are

00:32:26,840 --> 00:32:31,820
done in the vagrant box first small

00:32:28,880 --> 00:32:34,280
tests we develop a look all out of here

00:32:31,820 --> 00:32:39,350
how the page looks does everything work

00:32:34,280 --> 00:32:45,310
ok then it gets checked in then a drink

00:32:39,350 --> 00:32:49,130
ins drop runs with unit tests and so on

00:32:45,310 --> 00:32:55,160
one day decide ok or unit tests are ok

00:32:49,130 --> 00:33:00,140
or I'll test I have done on my wagon box

00:32:55,160 --> 00:33:04,760
are ok then they take they take the

00:33:00,140 --> 00:33:09,200
version then this causes a build except

00:33:04,760 --> 00:33:11,630
they using in our see you can build it

00:33:09,200 --> 00:33:16,550
so you if they say ok we want to have a

00:33:11,630 --> 00:33:18,890
release candidate now then the workflow

00:33:16,550 --> 00:33:23,050
is that the release candidate won't be

00:33:18,890 --> 00:33:25,670
published to the to the production

00:33:23,050 --> 00:33:27,560
repository but will be available on the

00:33:25,670 --> 00:33:30,920
staging server where you can test again

00:33:27,560 --> 00:33:33,610
and where the QA is also testing and

00:33:30,920 --> 00:33:39,670
when they say everything's fine ok then

00:33:33,610 --> 00:33:39,670
it gets the final version and goes live

00:33:54,080 --> 00:34:04,590
it will not be pulled to the vagrant box

00:33:59,039 --> 00:34:12,299
by default but it will be on the jenkins

00:34:04,590 --> 00:34:14,399
ironed on the stage existence but you if

00:34:12,299 --> 00:34:16,859
you wish you can implement it to be

00:34:14,399 --> 00:34:20,490
pulled to the vagrant box by simply

00:34:16,859 --> 00:34:28,760
adding a grande at once puppet every 10

00:34:20,490 --> 00:34:28,760
minutes or so yep

00:34:48,840 --> 00:34:56,530
yes it's it's a it's a bit difficult as

00:34:54,340 --> 00:35:00,790
I said you can you can foster the

00:34:56,530 --> 00:35:03,210
vagrant box to to be like the real

00:35:00,790 --> 00:35:06,430
system but in the case you want to test

00:35:03,210 --> 00:35:08,440
you don't want a puppet to overwrite

00:35:06,430 --> 00:35:15,520
your changes with which you are testing

00:35:08,440 --> 00:35:19,900
at the moment so of course we don't do

00:35:15,520 --> 00:35:23,680
this it's yet the developer then has to

00:35:19,900 --> 00:35:27,750
make sure that the changes which he does

00:35:23,680 --> 00:35:32,400
to the configuration is put to puppet

00:35:27,750 --> 00:35:38,500
and additionally of course it should

00:35:32,400 --> 00:35:41,160
fail when you test later so you have to

00:35:38,500 --> 00:35:41,160
get used to it

00:36:09,420 --> 00:36:17,380
okay the question is how we deal with

00:36:13,229 --> 00:36:20,979
infrastructure and the application staff

00:36:17,380 --> 00:36:28,289
for example has developer to know the IP

00:36:20,979 --> 00:36:31,779
of the database usually he knows but

00:36:28,289 --> 00:36:35,979
mostly we are using a DNS name which

00:36:31,779 --> 00:36:41,579
never changes so if he needs database

00:36:35,979 --> 00:36:44,289
access he asks for connection data and

00:36:41,579 --> 00:36:48,689
then you will get the name of the host

00:36:44,289 --> 00:36:56,069
you will get the user the password and

00:36:48,689 --> 00:37:00,400
this is also managed in the positive so

00:36:56,069 --> 00:37:03,069
yes the developers can could look it up

00:37:00,400 --> 00:37:04,809
if they want if they need system

00:37:03,069 --> 00:37:08,049
administration can change it if they

00:37:04,809 --> 00:37:13,179
need and it's part of the configuration

00:37:08,049 --> 00:37:17,249
of the application which is fetched

00:37:13,179 --> 00:37:17,249
during the installation of the package

00:37:23,880 --> 00:37:33,900
all right any more questions okay guess

00:37:29,950 --> 00:37:33,900

YouTube URL: https://www.youtube.com/watch?v=3H5hkRa1GuM


