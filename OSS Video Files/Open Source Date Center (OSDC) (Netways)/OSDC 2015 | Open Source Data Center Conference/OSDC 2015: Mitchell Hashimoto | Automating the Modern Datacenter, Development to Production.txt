Title: OSDC 2015: Mitchell Hashimoto | Automating the Modern Datacenter, Development to Production
Publication date: 2015-04-29
Playlist: OSDC 2015 | Open Source Data Center Conference
Description: 
	Physical, virtual, containers. Public cloud, private cloud, hybrid cloud. IaaS, PaaS, SaaS. These are the choices that we're faced with when architecting a datacenter of today. And the choice is not one or the other; it is often a combination of many of these. How do we remain in control of our datacenters? How do we deploy and configure software, manage change across disparate systems, and enforce policy/security? How do we do this in a way that operations engineers and developers alike can rejoice in the processes and workflow?

In this talk, I will discuss the problems faced by the modern datacenter, and how a set of open source tools including Vagrant, Packer, Consul, and Terraform can be used to tame the rising complexity curve and provide solutions for these problems.
Captions: 
	00:00:07,410 --> 00:00:13,720
okay so the room is fully packed nice to

00:00:11,799 --> 00:00:16,870
have you here also nice to have

00:00:13,720 --> 00:00:18,550
Mitchell Hashimoto here is the speaker

00:00:16,870 --> 00:00:21,070
of the talk automating the modern data

00:00:18,550 --> 00:00:23,260
center most of you know the tools

00:00:21,070 --> 00:00:26,320
vagrants of console and stuff like that

00:00:23,260 --> 00:00:30,189
and Mitchell is the creator of it so

00:00:26,320 --> 00:00:33,310
happy that you're here and enjoys okay

00:00:30,189 --> 00:00:35,230
thanks for coming all right so I'm gonna

00:00:33,310 --> 00:00:38,350
give the talk automating the modern data

00:00:35,230 --> 00:00:41,380
center so in the program it said from

00:00:38,350 --> 00:00:42,610
development to production it won't be

00:00:41,380 --> 00:00:44,590
from development to production it's

00:00:42,610 --> 00:00:47,710
going to just be from like production to

00:00:44,590 --> 00:00:50,530
production so I'll explain that in a

00:00:47,710 --> 00:00:52,990
second so I got a pretty good intro but

00:00:50,530 --> 00:00:54,490
if you want to find me uh uh or tweet at

00:00:52,990 --> 00:00:56,410
me or ask me a question and you don't

00:00:54,490 --> 00:00:58,480
want to ask after this or you think of

00:00:56,410 --> 00:01:01,090
it later and you can't find me just

00:00:58,480 --> 00:01:02,050
tweeted at me I'll be around I have to

00:01:01,090 --> 00:01:04,360
leave tomorrow to go to another

00:01:02,050 --> 00:01:06,640
conference in Budapest but i'll be

00:01:04,360 --> 00:01:08,860
around for all day today so just find me

00:01:06,640 --> 00:01:13,119
and i'm staying at this hotel so i can't

00:01:08,860 --> 00:01:16,060
like hide anywhere i work for and

00:01:13,119 --> 00:01:17,710
started the company hoshi Corp we use

00:01:16,060 --> 00:01:19,900
this word that Nigel said he's not a big

00:01:17,710 --> 00:01:21,520
fan of which is software managed or

00:01:19,900 --> 00:01:24,430
defined data center it's pretty much the

00:01:21,520 --> 00:01:27,790
same thing but to that end we've made so

00:01:24,430 --> 00:01:31,570
far of five open source tools vagrant

00:01:27,790 --> 00:01:33,070
packer surf console and terraform and so

00:01:31,570 --> 00:01:35,380
this would be from development to

00:01:33,070 --> 00:01:38,560
production but I've tried to give that

00:01:35,380 --> 00:01:42,190
sort of talk before and it just doesn't

00:01:38,560 --> 00:01:44,740
fit into an hour so you end up walk you

00:01:42,190 --> 00:01:48,580
end up walking away really not learning

00:01:44,740 --> 00:01:50,680
much of anything so instead i modified

00:01:48,580 --> 00:01:53,590
the talk to really just talk about more

00:01:50,680 --> 00:01:56,409
the production side of things which seem

00:01:53,590 --> 00:01:58,720
to be more interesting right now for a

00:01:56,409 --> 00:02:00,940
variety of reasons these are this is

00:01:58,720 --> 00:02:02,770
sort of the area within posture curves

00:02:00,940 --> 00:02:05,680
tool growth that's sing the most

00:02:02,770 --> 00:02:08,110
outrageous amount of growth so i think

00:02:05,680 --> 00:02:10,209
this is in particular a pain point right

00:02:08,110 --> 00:02:11,860
now in in terms of automating data

00:02:10,209 --> 00:02:14,439
centers and in terms of the whole

00:02:11,860 --> 00:02:17,379
process and so that's what I'm going to

00:02:14,439 --> 00:02:19,810
focus on today but feel free in the QA

00:02:17,379 --> 00:02:24,310
or after of course ask me about anything

00:02:19,810 --> 00:02:27,730
up here so I'm going to get started here

00:02:24,310 --> 00:02:31,360
by talking about and defining what I

00:02:27,730 --> 00:02:32,650
all the modern data center and when I

00:02:31,360 --> 00:02:34,450
say the modern data center I think of

00:02:32,650 --> 00:02:35,980
something very specific and that's what

00:02:34,450 --> 00:02:37,629
I'm going to define here and I think

00:02:35,980 --> 00:02:40,209
this will be a nice transition from

00:02:37,629 --> 00:02:42,640
actually we're Nigel was talking I know

00:02:40,209 --> 00:02:45,730
a lot of people here my sobs here are

00:02:42,640 --> 00:02:49,019
still in physical data centers and and

00:02:45,730 --> 00:02:51,580
what I'm about to describe is not is not

00:02:49,019 --> 00:02:53,860
excluding that so up until basically the

00:02:51,580 --> 00:02:55,329
last slide in the section it completely

00:02:53,860 --> 00:02:56,440
applies the physical data centers and

00:02:55,329 --> 00:02:58,150
and everything i'm gonna be talking

00:02:56,440 --> 00:03:00,819
about today applies to physical data

00:02:58,150 --> 00:03:02,890
center so it'll be appropriate but there

00:03:00,819 --> 00:03:04,390
are cloud aspects to it for sure because

00:03:02,890 --> 00:03:06,450
i think that's what you have to think

00:03:04,390 --> 00:03:08,980
about as you go forward because i think

00:03:06,450 --> 00:03:11,950
even as Nigel said it's not it the lines

00:03:08,980 --> 00:03:14,230
are pretty blurred nowadays so I'm going

00:03:11,950 --> 00:03:15,849
to start at the very basics but i'll

00:03:14,230 --> 00:03:17,560
move through really fast we'll get

00:03:15,849 --> 00:03:18,940
through this section really quickly and

00:03:17,560 --> 00:03:20,410
there's no dates associated with

00:03:18,940 --> 00:03:22,900
anything because depending on your

00:03:20,410 --> 00:03:26,430
organization when you move from one

00:03:22,900 --> 00:03:29,019
thing to the next is different but

00:03:26,430 --> 00:03:32,650
almost assuredly all of you are sort of

00:03:29,019 --> 00:03:34,180
towards the end of this process so to

00:03:32,650 --> 00:03:36,730
get started we'll start the very basics

00:03:34,180 --> 00:03:38,650
which doesn't need any explanation but

00:03:36,730 --> 00:03:41,109
just to show you where we start is one

00:03:38,650 --> 00:03:44,530
server when there's one server there's

00:03:41,109 --> 00:03:47,130
actually not a need for automation doing

00:03:44,530 --> 00:03:49,359
things manually babysitting this server

00:03:47,130 --> 00:03:52,329
writing scripts keeping everything

00:03:49,359 --> 00:03:55,150
running is just not difficult so you

00:03:52,329 --> 00:03:57,760
just do it but really quickly you know

00:03:55,150 --> 00:04:00,130
things blow up to multiple servers but

00:03:57,760 --> 00:04:01,750
even in the small single-digit cases you

00:04:00,130 --> 00:04:03,340
can manually do it and not really be a

00:04:01,750 --> 00:04:05,230
bottleneck and not really cause any

00:04:03,340 --> 00:04:07,329
friction so again we're not seeing a lot

00:04:05,230 --> 00:04:08,829
of automation problems here but but as

00:04:07,329 --> 00:04:11,829
we keep moving on we get more and more

00:04:08,829 --> 00:04:14,950
complexity so at some point along the

00:04:11,829 --> 00:04:17,160
way we got virtualization hopefully all

00:04:14,950 --> 00:04:19,060
of us are at this stage but

00:04:17,160 --> 00:04:22,330
virtualization confuse things even more

00:04:19,060 --> 00:04:26,280
because we have BN SVM's or on servers

00:04:22,330 --> 00:04:29,410
VMs network a little bit differently you

00:04:26,280 --> 00:04:31,120
it's there's a lot more density and

00:04:29,410 --> 00:04:33,520
automation becomes a lot more important

00:04:31,120 --> 00:04:35,620
here because where you're going to place

00:04:33,520 --> 00:04:37,330
the VMS what address are things at how

00:04:35,620 --> 00:04:38,770
do you communicate with them and these

00:04:37,330 --> 00:04:41,529
are questions you didn't have on a

00:04:38,770 --> 00:04:43,869
single server but now you have

00:04:41,529 --> 00:04:45,669
and so this is probably where a lot of

00:04:43,869 --> 00:04:48,339
people are today and this is there's a

00:04:45,669 --> 00:04:51,339
pretty modern place to be but of course

00:04:48,339 --> 00:04:54,309
more recently in the past couple of

00:04:51,339 --> 00:04:55,449
years in terms of popularity in the past

00:04:54,309 --> 00:04:56,919
couple years the technology has been

00:04:55,449 --> 00:04:58,569
around of course for a longer much

00:04:56,919 --> 00:05:00,489
longer period of time but in the past

00:04:58,569 --> 00:05:03,519
couple years containerization has really

00:05:00,489 --> 00:05:05,439
swept over and so now we have a more

00:05:03,519 --> 00:05:07,719
complex view of things and and I

00:05:05,439 --> 00:05:09,549
purposely made it exacerbated the

00:05:07,719 --> 00:05:11,559
problem here where you have containers

00:05:09,549 --> 00:05:13,539
you know on directly on servers you have

00:05:11,559 --> 00:05:14,859
them in VMs you have some VMS without

00:05:13,539 --> 00:05:18,339
containers you have some servers without

00:05:14,859 --> 00:05:20,919
VMs and it all you know the answer of

00:05:18,339 --> 00:05:23,439
what where do I put what is really it

00:05:20,919 --> 00:05:24,999
depends like is it useful to put it in a

00:05:23,439 --> 00:05:27,429
container as a useful to put it in the

00:05:24,999 --> 00:05:29,109
vm is it in the cloud is it in your

00:05:27,429 --> 00:05:31,629
inner interconnected physical data

00:05:29,109 --> 00:05:34,629
center and it's getting more complicated

00:05:31,629 --> 00:05:36,819
but there's reasons for all of this

00:05:34,629 --> 00:05:38,769
stuff but as we're heading into this

00:05:36,819 --> 00:05:42,039
sort of thing this is where automation

00:05:38,769 --> 00:05:44,739
not just make sense but is effectively

00:05:42,039 --> 00:05:47,379
required because you're either paying a

00:05:44,739 --> 00:05:51,099
lot of people a lot of money to keep

00:05:47,379 --> 00:05:52,779
this you know not on fire or you're just

00:05:51,099 --> 00:05:56,019
not taking advantage of everything you

00:05:52,779 --> 00:05:57,279
can be and I think you know this still

00:05:56,019 --> 00:05:58,689
applies the physical data centers and

00:05:57,279 --> 00:06:01,329
the next slide is really the only one

00:05:58,689 --> 00:06:02,559
that doesn't and so the next slide is

00:06:01,329 --> 00:06:04,269
really I think we're we're heading

00:06:02,559 --> 00:06:07,029
towards which was service proliferation

00:06:04,269 --> 00:06:08,709
and this is something that you know in

00:06:07,029 --> 00:06:10,899
Silicon Valley is happening much faster

00:06:08,709 --> 00:06:12,849
than everywhere else in the world I

00:06:10,899 --> 00:06:15,069
wouldn't I forgot who said it but I

00:06:12,849 --> 00:06:18,069
wouldn't say it's a Germany problem is

00:06:15,069 --> 00:06:21,909
this just it's just everywhere else is

00:06:18,069 --> 00:06:24,519
really still being much slower with good

00:06:21,909 --> 00:06:25,959
reason so but as things are going on

00:06:24,519 --> 00:06:28,779
we're seeing more and more things become

00:06:25,959 --> 00:06:30,039
services and so if you go back five

00:06:28,779 --> 00:06:32,369
years you know when you ask someone

00:06:30,039 --> 00:06:36,009
would you ever put X on a

00:06:32,369 --> 00:06:40,809
software-as-a-service where X is DNS or

00:06:36,009 --> 00:06:42,479
a CDN or a database for sure a common

00:06:40,809 --> 00:06:45,369
answer from an operator would really be

00:06:42,479 --> 00:06:47,829
definitely not like no way no way it's

00:06:45,369 --> 00:06:50,559
critical that that stays behind our

00:06:47,829 --> 00:06:54,429
firewall under our control we cannot

00:06:50,559 --> 00:06:55,540
lose control of that thing and as time

00:06:54,429 --> 00:06:57,640
is going on

00:06:55,540 --> 00:06:59,710
the set of things where you know people

00:06:57,640 --> 00:07:02,920
are saying no to that is getting smaller

00:06:59,710 --> 00:07:04,660
and smaller for a lot of reasons like

00:07:02,920 --> 00:07:07,360
there's a lot of reasons but you know

00:07:04,660 --> 00:07:11,770
today and company you know even large

00:07:07,360 --> 00:07:13,810
companies rarely run CDNs a lot of DNS

00:07:11,770 --> 00:07:15,160
is outsourced to people like dine and

00:07:13,810 --> 00:07:17,590
things like this so more and more is

00:07:15,160 --> 00:07:20,230
becoming sir software as a service and

00:07:17,590 --> 00:07:21,580
infrastructure service that in terms of

00:07:20,230 --> 00:07:23,680
automation these are things we have to

00:07:21,580 --> 00:07:25,470
think about because if you can't deploy

00:07:23,680 --> 00:07:28,180
your application anymore without

00:07:25,470 --> 00:07:31,750
spinning up a load balancer as a service

00:07:28,180 --> 00:07:34,210
then it's pointless to it's pointless to

00:07:31,750 --> 00:07:36,100
only have the puppet necessary to

00:07:34,210 --> 00:07:37,660
configure your servers because it won't

00:07:36,100 --> 00:07:39,610
get your application to the deployed

00:07:37,660 --> 00:07:43,060
state because you're missing the load

00:07:39,610 --> 00:07:44,500
balancer piece for example so this is

00:07:43,060 --> 00:07:45,820
the sort of the end where I think of the

00:07:44,500 --> 00:07:47,980
modern data center is like if you're

00:07:45,820 --> 00:07:51,370
building a tool today you have to think

00:07:47,980 --> 00:07:53,050
all the way through to okay I can

00:07:51,370 --> 00:07:55,060
automate things now but am I going to be

00:07:53,050 --> 00:07:57,790
able to automate these things in a few

00:07:55,060 --> 00:07:59,350
years or as we head towards this and to

00:07:57,790 --> 00:08:01,330
put it down in a text and get out of

00:07:59,350 --> 00:08:03,520
diagrams here's sort of the matrix of

00:08:01,330 --> 00:08:06,100
choices that you have in various

00:08:03,520 --> 00:08:08,020
categories today so you have hybrid

00:08:06,100 --> 00:08:10,780
cloud choices your physical data center

00:08:08,020 --> 00:08:12,820
your private cloud public cloud you

00:08:10,780 --> 00:08:14,740
could be both there's many different

00:08:12,820 --> 00:08:17,260
paradigms there in terms of just being a

00:08:14,740 --> 00:08:20,140
physical place using virtual machines

00:08:17,260 --> 00:08:22,930
using containers there's all these AAS

00:08:20,140 --> 00:08:25,510
things and they're all useful in their

00:08:22,930 --> 00:08:27,400
own way so they come into play there's

00:08:25,510 --> 00:08:29,650
operating systems this is definitely

00:08:27,400 --> 00:08:31,660
without a doubt compared to all of them

00:08:29,650 --> 00:08:32,590
the easiest one to just standardize on

00:08:31,660 --> 00:08:36,460
the easiest one just be like

00:08:32,590 --> 00:08:38,830
everything's Linux but at some point I

00:08:36,460 --> 00:08:40,150
still I still go into most companies and

00:08:38,830 --> 00:08:41,979
they're like oh yeah we're a Linux la

00:08:40,150 --> 00:08:43,330
política shop it's like turn away from

00:08:41,979 --> 00:08:46,540
those two windows machines running

00:08:43,330 --> 00:08:50,140
active directory right like it shield

00:08:46,540 --> 00:08:51,550
your eyes but but still like having two

00:08:50,140 --> 00:08:53,860
or something that's fine like mostly the

00:08:51,550 --> 00:08:56,200
OS thing is pretty pretty easy compared

00:08:53,860 --> 00:08:58,210
to everything else to homogenize on but

00:08:56,200 --> 00:09:00,550
realistically sort of as I'm going into

00:08:58,210 --> 00:09:03,460
places I'm seeing a mixture of all of

00:09:00,550 --> 00:09:05,760
this and and so all of this needs to be

00:09:03,460 --> 00:09:08,650
automated all of this needs to be

00:09:05,760 --> 00:09:09,570
managed and it's sort of a mess and and

00:09:08,650 --> 00:09:11,100
a lot of people

00:09:09,570 --> 00:09:13,500
you know I think the dream for everyone

00:09:11,100 --> 00:09:16,980
is for homogenous sort of infrastructure

00:09:13,500 --> 00:09:20,460
and my opinion on that is that

00:09:16,980 --> 00:09:22,320
homogenate is primarily a myth you could

00:09:20,460 --> 00:09:24,420
reach periods of homogenous

00:09:22,320 --> 00:09:25,320
infrastructure but sort of admitting

00:09:24,420 --> 00:09:26,640
that you want a homogenous

00:09:25,320 --> 00:09:28,410
infrastructure is emitting one of two

00:09:26,640 --> 00:09:30,000
things the first thing you're either

00:09:28,410 --> 00:09:31,140
admitting is that you're you're going to

00:09:30,000 --> 00:09:32,640
pick something and you're never ever

00:09:31,140 --> 00:09:34,920
going to change and that technology is

00:09:32,640 --> 00:09:36,360
never ever going to improve or the

00:09:34,920 --> 00:09:38,040
second thing you're admitting is that as

00:09:36,360 --> 00:09:39,990
the technology approves you'll be you'll

00:09:38,040 --> 00:09:43,020
be able to make atomic steps into the

00:09:39,990 --> 00:09:44,700
next paradigm is things shift and I

00:09:43,020 --> 00:09:47,100
don't think either is true so I think

00:09:44,700 --> 00:09:48,960
you know as new technology comes and

00:09:47,100 --> 00:09:51,000
evolves and comes out then you're

00:09:48,960 --> 00:09:52,920
inevitably going to have to change

00:09:51,000 --> 00:09:54,510
paradigms to something else and so you

00:09:52,920 --> 00:09:55,770
might be homogenous for a period of time

00:09:54,510 --> 00:09:58,680
but then when something new comes out

00:09:55,770 --> 00:10:01,790
you're inevitably heterogeneous 44

00:09:58,680 --> 00:10:06,270
usually a much longer period of time

00:10:01,790 --> 00:10:08,430
Nigel had a bunch of IT analyst quotes

00:10:06,270 --> 00:10:10,320
up here I wish I had an analyst quote

00:10:08,430 --> 00:10:12,960
appear but I remember reading in an

00:10:10,320 --> 00:10:15,780
analyst report that one of them

00:10:12,960 --> 00:10:19,320
Forrester garner one of them expects the

00:10:15,780 --> 00:10:21,180
fortune 500 in the u.s. to complete

00:10:19,320 --> 00:10:23,970
their virtualization transition this

00:10:21,180 --> 00:10:27,810
year so you know virtualization has been

00:10:23,970 --> 00:10:30,540
around since uh like like since Intel

00:10:27,810 --> 00:10:31,950
added the the extensions like 2004 so

00:10:30,540 --> 00:10:34,650
virtualization is basically been around

00:10:31,950 --> 00:10:37,650
for a decade and the fortune 500 should

00:10:34,650 --> 00:10:39,360
complete the transition this year so

00:10:37,650 --> 00:10:41,280
it'll be pretty exciting to see there

00:10:39,360 --> 00:10:43,650
then begin the transition to the

00:10:41,280 --> 00:10:46,320
containers and as you know complete it

00:10:43,650 --> 00:10:50,190
in about 20-25 and during that time

00:10:46,320 --> 00:10:52,560
they're going to be a mess so okay so

00:10:50,190 --> 00:10:54,270
why do we have this complexity like I

00:10:52,560 --> 00:10:56,370
mentioned at the very beginning that the

00:10:54,270 --> 00:10:57,840
single server case is very nice you

00:10:56,370 --> 00:10:59,910
don't need automation you just have a

00:10:57,840 --> 00:11:02,580
person they watch the server and it

00:10:59,910 --> 00:11:04,020
stays up and running but but they're all

00:11:02,580 --> 00:11:05,700
that complex is there for a reason and

00:11:04,020 --> 00:11:09,120
it's very beneficial to us and the

00:11:05,700 --> 00:11:10,950
benefit is that we get to move faster we

00:11:09,120 --> 00:11:14,250
get to deliver maintain applications

00:11:10,950 --> 00:11:16,230
much faster and so I've shown this sort

00:11:14,250 --> 00:11:18,390
of slide a long time but this is sort of

00:11:16,230 --> 00:11:20,580
how I like to break down application

00:11:18,390 --> 00:11:22,830
delivery in terms of three different

00:11:20,580 --> 00:11:23,279
categories for some companies these are

00:11:22,830 --> 00:11:25,379
silo

00:11:23,279 --> 00:11:26,370
source or sun they're not but that's not

00:11:25,379 --> 00:11:27,629
what I'm try to show I'm just trying to

00:11:26,370 --> 00:11:29,459
show three different categories here

00:11:27,629 --> 00:11:31,019
I've sort of stages things have to go

00:11:29,459 --> 00:11:34,800
and then they usually spin around in a

00:11:31,019 --> 00:11:36,689
circle but but as I look at these are

00:11:34,800 --> 00:11:38,910
the things that people are optimizing

00:11:36,689 --> 00:11:40,920
for and these are the reasons that this

00:11:38,910 --> 00:11:43,139
complexity exists it's you know as

00:11:40,920 --> 00:11:45,180
virtualization comes out as containers

00:11:43,139 --> 00:11:47,189
come out they speed up the deployment

00:11:45,180 --> 00:11:49,470
part or they ease the maintenance part

00:11:47,189 --> 00:11:51,180
and so they're making this easier which

00:11:49,470 --> 00:11:54,470
makes application delivery faster and

00:11:51,180 --> 00:11:57,660
faster at the expense of management

00:11:54,470 --> 00:12:02,220
complexity but that expense is usually

00:11:57,660 --> 00:12:03,920
worth it so the one quick pitch is that

00:12:02,220 --> 00:12:06,449
this is sort of how we categorize our

00:12:03,920 --> 00:12:07,889
tools as well so this is sort of where

00:12:06,449 --> 00:12:10,019
they fit into and so today I'm going to

00:12:07,889 --> 00:12:14,189
be talking about terraforming console in

00:12:10,019 --> 00:12:15,959
there so focusing on the deployment and

00:12:14,189 --> 00:12:20,249
maintenance side of things and looking

00:12:15,959 --> 00:12:22,680
at that deployment maintenance is at its

00:12:20,249 --> 00:12:24,809
most fundamental level four steps

00:12:22,680 --> 00:12:26,279
there's the acquisition step the

00:12:24,809 --> 00:12:29,639
provision step the update and destroy

00:12:26,279 --> 00:12:30,839
step and you know acquisition is get the

00:12:29,639 --> 00:12:32,850
hardware that it's going to run on

00:12:30,839 --> 00:12:35,370
provision is make it ready to run my

00:12:32,850 --> 00:12:37,199
application and put it on there update

00:12:35,370 --> 00:12:39,689
is is incremental updates of an

00:12:37,199 --> 00:12:42,420
application and destroys decommissioning

00:12:39,689 --> 00:12:44,730
the whole thing and normally you know

00:12:42,420 --> 00:12:47,670
it's it goes does acquisition which is

00:12:44,730 --> 00:12:49,769
relatively slow provision which is a

00:12:47,670 --> 00:12:51,300
little bit faster and then update and

00:12:49,769 --> 00:12:54,720
provision sort of spinning this hot loop

00:12:51,300 --> 00:12:56,730
for years and then you decommission it

00:12:54,720 --> 00:12:58,800
at some point if you read about

00:12:56,730 --> 00:13:00,449
immutable infrastructure it's this

00:12:58,800 --> 00:13:02,160
without any loops in it you just kind of

00:13:00,449 --> 00:13:04,019
go through skip step three and you

00:13:02,160 --> 00:13:07,350
destroy and then you go around the whole

00:13:04,019 --> 00:13:08,850
thing but but this is the most general

00:13:07,350 --> 00:13:13,379
view of sort of deployment and

00:13:08,850 --> 00:13:16,259
maintenance and historically acquisition

00:13:13,379 --> 00:13:18,209
has taken a long time provisioning has

00:13:16,259 --> 00:13:20,339
taken a little bit faster but still a

00:13:18,209 --> 00:13:22,259
long time and we could assume SAS

00:13:20,339 --> 00:13:24,360
doesn't exist in terms of this history

00:13:22,259 --> 00:13:26,009
and that's where we came from you know

00:13:24,360 --> 00:13:28,679
acquisition getting a server was

00:13:26,009 --> 00:13:30,179
ordering from a vendor or if it's or if

00:13:28,679 --> 00:13:31,259
you pipeline the orders really well it's

00:13:30,179 --> 00:13:34,439
waiting for them to get racked up

00:13:31,259 --> 00:13:36,930
plugged in ready to be provisioned that

00:13:34,439 --> 00:13:39,710
sort of thing was slow

00:13:36,930 --> 00:13:42,120
provisioning took hours or days

00:13:39,710 --> 00:13:44,690
thankfully people like puppet have solve

00:13:42,120 --> 00:13:49,700
that problem for us that's Aston Idzik

00:13:44,690 --> 00:13:52,140
today everything is pretty much instant

00:13:49,700 --> 00:13:53,820
so everyone here's some physical data

00:13:52,140 --> 00:13:55,050
centers but even in physical data

00:13:53,820 --> 00:13:59,399
centers you could get this pretty much

00:13:55,050 --> 00:14:01,560
instantly due to the sort of increased

00:13:59,399 --> 00:14:03,620
amount of things like OpenStack you know

00:14:01,560 --> 00:14:07,860
opinions aside on the quality of that

00:14:03,620 --> 00:14:09,899
but you know you can make physical data

00:14:07,860 --> 00:14:12,959
centers instant in terms of hardware

00:14:09,899 --> 00:14:14,520
acquisition and provisioning is minutes

00:14:12,959 --> 00:14:17,070
now again thanks to things like chef

00:14:14,520 --> 00:14:20,010
puppet or pre baking images of things

00:14:17,070 --> 00:14:22,920
like packer and then sass also is

00:14:20,010 --> 00:14:25,980
minutes almost every sass out there

00:14:22,920 --> 00:14:27,660
that's worth using has an API so yeah

00:14:25,980 --> 00:14:28,950
you could click on a dashboard and get

00:14:27,660 --> 00:14:30,570
you know the plan you want and all this

00:14:28,950 --> 00:14:33,060
stuff but most of them you could also

00:14:30,570 --> 00:14:36,089
automate it so everything can be done in

00:14:33,060 --> 00:14:38,399
minutes and and imagine the scale that

00:14:36,089 --> 00:14:40,950
we're at today the scale you're at right

00:14:38,399 --> 00:14:43,589
now is probably dozens to hundreds to

00:14:40,950 --> 00:14:45,260
thousands of servers and if you imagine

00:14:43,589 --> 00:14:48,150
that you could go through that

00:14:45,260 --> 00:14:51,839
acquisition provision update to destroy

00:14:48,150 --> 00:14:55,020
cycle in minutes thousands of times it

00:14:51,839 --> 00:14:57,420
becomes just so obvious that a human

00:14:55,020 --> 00:15:00,300
being can never take full advantage of

00:14:57,420 --> 00:15:02,370
this situation that we have we're given

00:15:00,300 --> 00:15:04,500
the ability to manage everything in

00:15:02,370 --> 00:15:05,730
minutes or seconds and people just don't

00:15:04,500 --> 00:15:07,529
move that fast and people don't move

00:15:05,730 --> 00:15:11,910
that fast a thousand times in parallel

00:15:07,529 --> 00:15:13,830
so if we want to move as fast as the

00:15:11,910 --> 00:15:19,230
technology is moving we're going to have

00:15:13,830 --> 00:15:21,240
to use automation the final of my one

00:15:19,230 --> 00:15:23,990
last step back into history before we

00:15:21,240 --> 00:15:26,339
just go through and system tooling is

00:15:23,990 --> 00:15:29,700
just properties of the data center and

00:15:26,339 --> 00:15:31,320
how those have changed so historically

00:15:29,700 --> 00:15:33,510
there's been a relatively fixed set of

00:15:31,320 --> 00:15:35,130
servers and I'm not saying the amount of

00:15:33,510 --> 00:15:36,630
servers that are racked I'm saying the

00:15:35,130 --> 00:15:39,320
amount of servers sort of in use or that

00:15:36,630 --> 00:15:41,670
you're that you're provisioning so

00:15:39,320 --> 00:15:43,140
historically there's a fixed relatively

00:15:41,670 --> 00:15:45,150
fix it you're not moving that much and

00:15:43,140 --> 00:15:46,980
there are fewer applications to deploy

00:15:45,150 --> 00:15:49,860
you know SOA has been a thing for a long

00:15:46,980 --> 00:15:50,550
long time but SOA historically has been

00:15:49,860 --> 00:15:51,810
an enterprise

00:15:50,550 --> 00:15:52,890
thing when you're an enterprise you

00:15:51,810 --> 00:15:55,110
start thinking about service oriented

00:15:52,890 --> 00:15:58,290
architecture middlewares like that sort

00:15:55,110 --> 00:15:59,459
of stuff but now you know with a ton of

00:15:58,290 --> 00:16:00,839
companies out there Tooting the

00:15:59,459 --> 00:16:02,130
microservices horn which is

00:16:00,839 --> 00:16:05,700
service-oriented architecture for

00:16:02,130 --> 00:16:08,870
startups we we're getting a lot more

00:16:05,700 --> 00:16:11,670
applications to deploy a lot earlier on

00:16:08,870 --> 00:16:13,470
that sort of needs more servers or needs

00:16:11,670 --> 00:16:16,320
more management or automation or both or

00:16:13,470 --> 00:16:18,420
all of the above there was fewer SAS

00:16:16,320 --> 00:16:20,370
before that's sort of we've been talking

00:16:18,420 --> 00:16:22,170
about that and then there's just less

00:16:20,370 --> 00:16:24,930
demanding web traffic and this is sort

00:16:22,170 --> 00:16:27,209
of a funny bullet point because it's

00:16:24,930 --> 00:16:28,860
kind of sad but it's just the fact is

00:16:27,209 --> 00:16:30,450
that you know there was just less

00:16:28,860 --> 00:16:32,339
internet-connected devices there was

00:16:30,450 --> 00:16:34,860
less robots hitting your things there's

00:16:32,339 --> 00:16:36,870
is usually humans in a browser and now

00:16:34,860 --> 00:16:38,870
we just have to serve traffic to a lot

00:16:36,870 --> 00:16:41,519
of stuff that doesn't actually see it

00:16:38,870 --> 00:16:43,950
even api's and stuff there's just more

00:16:41,519 --> 00:16:48,240
more stuff that we have to respond to

00:16:43,950 --> 00:16:50,720
and generate a response form so today

00:16:48,240 --> 00:16:53,519
yeah everything is elastic SOA

00:16:50,720 --> 00:16:54,930
microservices etc there's a SAS for

00:16:53,519 --> 00:16:57,540
everything out there so we have to at

00:16:54,930 --> 00:16:59,779
least think about it and then more

00:16:57,540 --> 00:17:02,130
internet-connected devices more people

00:16:59,779 --> 00:17:03,779
however you want to look at it no matter

00:17:02,130 --> 00:17:06,449
what there's just factually more web

00:17:03,779 --> 00:17:08,790
traffic out there it is split among a

00:17:06,449 --> 00:17:11,130
lot more websites but if you're if

00:17:08,790 --> 00:17:12,449
you're sort of a big player you're just

00:17:11,130 --> 00:17:16,439
getting more traffic than you were

00:17:12,449 --> 00:17:17,880
before so what do we need to take

00:17:16,439 --> 00:17:19,470
advantage of this I already mentioned

00:17:17,880 --> 00:17:21,750
that in terms of speed do you need

00:17:19,470 --> 00:17:22,919
automation no matter what but but what

00:17:21,750 --> 00:17:25,470
properties do we need from that

00:17:22,919 --> 00:17:28,100
automation I like to say that you need

00:17:25,470 --> 00:17:32,160
to get zero to deploy or zero to

00:17:28,100 --> 00:17:33,630
something far in one command you need to

00:17:32,160 --> 00:17:37,860
get as far as you can which is one

00:17:33,630 --> 00:17:39,660
command because eat more commands mean

00:17:37,860 --> 00:17:41,309
means the person's coming in more often

00:17:39,660 --> 00:17:43,830
if you have one command that's pretty

00:17:41,309 --> 00:17:45,660
much the minimal you could go even if

00:17:43,830 --> 00:17:46,740
it's a fully automated system at some

00:17:45,660 --> 00:17:48,570
point someone kicked it off so that's

00:17:46,740 --> 00:17:50,760
one command but you really want the

00:17:48,570 --> 00:17:53,520
person to come in review something hit a

00:17:50,760 --> 00:17:55,830
button and let it go and be confident

00:17:53,520 --> 00:17:58,559
that it's going to work you need

00:17:55,830 --> 00:18:00,650
resiliency through distributed systems

00:17:58,559 --> 00:18:02,970
for the core of your infrastructure

00:18:00,650 --> 00:18:03,879
Nigel actually did a great job here

00:18:02,970 --> 00:18:05,409
which is just that

00:18:03,879 --> 00:18:07,389
as you get more and more instructors you

00:18:05,409 --> 00:18:10,149
treat more in infrastructure elastically

00:18:07,389 --> 00:18:12,909
you just have to assume that most of its

00:18:10,149 --> 00:18:14,949
unreliable and a lot of people I found

00:18:12,909 --> 00:18:16,509
in terms of physical data centers think

00:18:14,949 --> 00:18:18,399
of this as a binary thing like you have

00:18:16,509 --> 00:18:22,119
to think of it as completely unreliable

00:18:18,399 --> 00:18:23,769
or or completely reliable but for the

00:18:22,119 --> 00:18:25,569
most part you could still if you have

00:18:23,769 --> 00:18:28,269
those services that just they're written

00:18:25,569 --> 00:18:30,399
ten years ago and they're super single

00:18:28,269 --> 00:18:33,099
server and just can't ever go down you

00:18:30,399 --> 00:18:35,769
could still just pet those servers and

00:18:33,099 --> 00:18:37,539
keep those servers really reliable and

00:18:35,769 --> 00:18:39,489
just flag it as such and you could just

00:18:37,539 --> 00:18:41,919
say that the rest of it you know all the

00:18:39,489 --> 00:18:43,899
other all the other machines everything

00:18:41,919 --> 00:18:46,899
else that's being can be automated this

00:18:43,899 --> 00:18:48,489
one can and that's a very valid sort of

00:18:46,899 --> 00:18:51,489
transition point towards more automation

00:18:48,489 --> 00:18:54,459
so you need it true things is unreliable

00:18:51,489 --> 00:18:57,099
and and for unreliable things to work at

00:18:54,459 --> 00:18:58,509
their core they really need to have more

00:18:57,099 --> 00:18:59,739
distributed systems and I'm not saying

00:18:58,509 --> 00:19:02,949
you need to use a distributed database

00:18:59,739 --> 00:19:05,409
like rioc or something but you need to

00:19:02,949 --> 00:19:07,929
have a good setup in terms of high

00:19:05,409 --> 00:19:10,149
availability you need to have certain

00:19:07,929 --> 00:19:12,009
distributed systems like service

00:19:10,149 --> 00:19:14,589
discovery which is my own biased pitch

00:19:12,009 --> 00:19:16,209
here but I think more and more as time

00:19:14,589 --> 00:19:20,159
goes on these core tools will be

00:19:16,209 --> 00:19:23,109
distributed you need some level of

00:19:20,159 --> 00:19:24,429
self-healing auto scaling auto healing

00:19:23,109 --> 00:19:26,469
is sort of the buzzword e way to say it

00:19:24,429 --> 00:19:28,059
but you need some level of if it's

00:19:26,469 --> 00:19:30,039
unreliable you need something there

00:19:28,059 --> 00:19:31,959
that'll punch it back into action or

00:19:30,039 --> 00:19:34,449
you're going to be getting called paged

00:19:31,959 --> 00:19:36,339
all the time so you just need something

00:19:34,449 --> 00:19:38,559
that can know if something's okay and

00:19:36,339 --> 00:19:40,149
dispense something back up auto scaling

00:19:38,559 --> 00:19:41,829
in terms of growing and shrinking is

00:19:40,149 --> 00:19:43,659
sort of icing on the cake but you just

00:19:41,829 --> 00:19:45,459
need something that will make sure

00:19:43,659 --> 00:19:48,249
things are at a minimal healthy state

00:19:45,459 --> 00:19:49,719
across the board and then you need

00:19:48,249 --> 00:19:52,809
better teamwork through codified

00:19:49,719 --> 00:19:54,309
knowledge or sharing as things grow as

00:19:52,809 --> 00:19:57,339
things scale to a higher number as you

00:19:54,309 --> 00:19:59,319
get more people it you can't have the

00:19:57,339 --> 00:20:01,569
one person who knows everything anymore

00:19:59,319 --> 00:20:04,749
you really need to share knowledge and

00:20:01,569 --> 00:20:06,549
make sure you work as a team and also

00:20:04,749 --> 00:20:09,849
delegate so developers want to do more

00:20:06,549 --> 00:20:11,349
things on their own as operators we

00:20:09,849 --> 00:20:13,599
could fight that as long as we want or

00:20:11,349 --> 00:20:15,909
we could come up with it with a way to

00:20:13,599 --> 00:20:17,350
make them happy or at the very minimum

00:20:15,909 --> 00:20:20,020
give them the illusion that they have

00:20:17,350 --> 00:20:22,179
control while making sure that we

00:20:20,020 --> 00:20:23,470
control at the end but like that that's

00:20:22,179 --> 00:20:25,780
sort of an evil way to say it but like

00:20:23,470 --> 00:20:27,700
that you you should be working together

00:20:25,780 --> 00:20:32,230
to make something work rather than just

00:20:27,700 --> 00:20:34,450
fighting it so automation we're going to

00:20:32,230 --> 00:20:38,340
talk about these tools let's get on with

00:20:34,450 --> 00:20:40,270
it okay so let's go straighten the tools

00:20:38,340 --> 00:20:41,679
the first tool I'm going to talk about

00:20:40,270 --> 00:20:43,570
is terraform just because it makes sense

00:20:41,679 --> 00:20:45,340
in that order you're deploying first

00:20:43,570 --> 00:20:47,710
Terra forms helping you get that deploy

00:20:45,340 --> 00:20:50,530
out and then we'll talk about console

00:20:47,710 --> 00:20:52,870
after both of the tools are completely

00:20:50,530 --> 00:20:56,020
open source there's no Enterprise

00:20:52,870 --> 00:20:58,150
versions nothing like that so that's

00:20:56,020 --> 00:21:00,220
that if you want to learn about at the

00:20:58,150 --> 00:21:03,880
URLs or in the bottom corner so

00:21:00,220 --> 00:21:06,340
terraform in one sentence is a tool to

00:21:03,880 --> 00:21:08,799
build combine and launch infrastructure

00:21:06,340 --> 00:21:10,900
safely and efficiently and not just

00:21:08,799 --> 00:21:12,370
infrastructure but applications and

00:21:10,900 --> 00:21:15,309
things like that and we'll get into that

00:21:12,370 --> 00:21:17,380
but this is the very dense thing the

00:21:15,309 --> 00:21:20,530
more practical questions the terraform

00:21:17,380 --> 00:21:22,559
answers are these so if if I your boss a

00:21:20,530 --> 00:21:26,130
manager came to you and asked you to

00:21:22,559 --> 00:21:28,840
create a completely isolated secondary

00:21:26,130 --> 00:21:30,490
environment to run an application or a

00:21:28,840 --> 00:21:32,799
set of applications you know stage and

00:21:30,490 --> 00:21:36,240
QA etc what would you do how would you

00:21:32,799 --> 00:21:38,530
do it how do you deploy or update a

00:21:36,240 --> 00:21:40,600
complex application something that's not

00:21:38,530 --> 00:21:42,840
extremely trivial but doesn't have to be

00:21:40,600 --> 00:21:44,650
very complex just not the most trivial

00:21:42,840 --> 00:21:46,450
how do you document how the

00:21:44,650 --> 00:21:48,070
infrastructure is architected this gets

00:21:46,450 --> 00:21:50,140
more tricky as services come in

00:21:48,070 --> 00:21:52,120
especially you know what what talks to

00:21:50,140 --> 00:21:54,460
what what external services are needed

00:21:52,120 --> 00:21:55,840
when in the dough at what point in the

00:21:54,460 --> 00:21:58,570
data path you know that sort of stuff

00:21:55,840 --> 00:22:00,909
how do you document this you could well

00:21:58,570 --> 00:22:03,400
I'll get to the answers after this and

00:22:00,909 --> 00:22:05,830
then finally how do you delegate some of

00:22:03,400 --> 00:22:08,520
the operations to these smaller teams

00:22:05,830 --> 00:22:12,309
whether they're developers or just just

00:22:08,520 --> 00:22:13,990
X not external but operators that are on

00:22:12,309 --> 00:22:16,990
development teams that are outside of

00:22:13,990 --> 00:22:20,470
what i like to call core operations how

00:22:16,990 --> 00:22:23,140
do you delegate that sort of stuff and

00:22:20,470 --> 00:22:25,240
in terms of terraform these are sort of

00:22:23,140 --> 00:22:26,590
the answers you give it to create

00:22:25,240 --> 00:22:29,409
isolated environments it's one command

00:22:26,590 --> 00:22:30,710
to deploy an update applications you

00:22:29,409 --> 00:22:32,210
code it infrastructure

00:22:30,710 --> 00:22:35,029
code you dip it see what's going to

00:22:32,210 --> 00:22:37,610
happen then you apply it you treat it

00:22:35,029 --> 00:22:38,809
sort of like an application how do you

00:22:37,610 --> 00:22:40,520
document how I'm structure is

00:22:38,809 --> 00:22:42,440
architecture you could either read the

00:22:40,520 --> 00:22:44,390
code I should change that answer because

00:22:42,440 --> 00:22:47,000
it's not the greatest but you can either

00:22:44,390 --> 00:22:49,760
read the code or terraform could

00:22:47,000 --> 00:22:51,200
generate you a graph and the graph shows

00:22:49,760 --> 00:22:54,860
you how everything depends on each other

00:22:51,200 --> 00:22:57,830
and what references what and we use that

00:22:54,860 --> 00:23:00,559
in order to find to predict sort of

00:22:57,830 --> 00:23:02,360
disaster recovery scenarios you should

00:23:00,559 --> 00:23:04,940
always do disaster recovery exercises

00:23:02,360 --> 00:23:07,039
but the graph could help you be like

00:23:04,940 --> 00:23:09,649
well a lot of arrows are pointing to

00:23:07,039 --> 00:23:11,840
this one circle and you could use that

00:23:09,649 --> 00:23:14,570
to try to break it up or just understand

00:23:11,840 --> 00:23:17,600
what that means for you and then

00:23:14,570 --> 00:23:21,049
delegation modules and code reviews

00:23:17,600 --> 00:23:23,149
we'll get to that in a second so how

00:23:21,049 --> 00:23:25,820
let's the specifics of how in terms of

00:23:23,149 --> 00:23:28,850
terraform so these are the bullet points

00:23:25,820 --> 00:23:30,289
of what terraform does for you it allows

00:23:28,850 --> 00:23:32,600
you to create infrastructure with code

00:23:30,289 --> 00:23:34,850
and not just infrastructure in the

00:23:32,600 --> 00:23:36,890
config management sense we're not

00:23:34,850 --> 00:23:38,899
actually terraform at all is not trying

00:23:36,890 --> 00:23:40,429
to encroach on the config management

00:23:38,899 --> 00:23:42,200
space we're not trying to install

00:23:40,429 --> 00:23:44,480
packages when I was trying to set up

00:23:42,200 --> 00:23:46,429
users and things like that but what

00:23:44,480 --> 00:23:48,740
terraform does do is build the actual

00:23:46,429 --> 00:23:51,230
infrastructure it launches servers it

00:23:48,740 --> 00:23:54,890
bootstrap servers for things like chef

00:23:51,230 --> 00:23:56,419
and puppet but it also tells non compute

00:23:54,890 --> 00:23:58,730
things it'll set up load balancers

00:23:56,419 --> 00:24:01,580
network devices software as a service

00:23:58,730 --> 00:24:03,770
and then within it could layer within

00:24:01,580 --> 00:24:05,840
that so you could you could pull from

00:24:03,770 --> 00:24:07,549
foreman set up OpenStack on top of it

00:24:05,840 --> 00:24:08,779
then configure open stab set of VMs on

00:24:07,549 --> 00:24:10,190
top of that then pull from the Vans

00:24:08,779 --> 00:24:12,740
install dock or on top of that and then

00:24:10,190 --> 00:24:13,669
deploy containers on top of that all in

00:24:12,740 --> 00:24:17,870
one command they could do the whole

00:24:13,669 --> 00:24:21,020
layering yeah one command to create an

00:24:17,870 --> 00:24:24,679
update infrastructure preview changes to

00:24:21,020 --> 00:24:25,730
em structure with plans or diffs there's

00:24:24,679 --> 00:24:28,460
a whole section to that but that's

00:24:25,730 --> 00:24:30,080
really important to infrastructure to

00:24:28,460 --> 00:24:31,730
terraform functionality is being able to

00:24:30,080 --> 00:24:35,990
know what it's going to do before it

00:24:31,730 --> 00:24:38,539
does it using that preview functionality

00:24:35,990 --> 00:24:40,639
with code and with normal text if you're

00:24:38,539 --> 00:24:43,010
able to see you know tree temperature

00:24:40,639 --> 00:24:43,929
more like an application be able to code

00:24:43,010 --> 00:24:45,909
the changes you want

00:24:43,929 --> 00:24:47,499
seen infrastructure see exactly what

00:24:45,909 --> 00:24:49,090
would happen not just like not just this

00:24:47,499 --> 00:24:51,039
line was at in the slightest removed but

00:24:49,090 --> 00:24:52,299
actually see terraform be like this is

00:24:51,039 --> 00:24:53,559
the server that will be created this is

00:24:52,299 --> 00:24:55,330
a server that will be destroyed this is

00:24:53,559 --> 00:24:58,389
the order that it'll happen you're able

00:24:55,330 --> 00:25:00,820
to see that sort of thing and then apply

00:24:58,389 --> 00:25:02,440
it all at once and then finally you can

00:25:00,820 --> 00:25:06,009
break down your infrastructure in two

00:25:02,440 --> 00:25:09,399
distinct modules or components use that

00:25:06,009 --> 00:25:11,200
for delegation teamwork sharing you

00:25:09,399 --> 00:25:12,970
could you could create modules that

00:25:11,200 --> 00:25:14,350
people could reach into and modify the

00:25:12,970 --> 00:25:17,139
instructure you can create modules that

00:25:14,350 --> 00:25:18,759
people only see the outputs from so that

00:25:17,139 --> 00:25:20,769
they're not never allowed to mess up the

00:25:18,759 --> 00:25:24,610
infrastructure and I'm going to talk

00:25:20,769 --> 00:25:27,759
about both those so the infrastructures

00:25:24,610 --> 00:25:29,769
code side of things looks like this

00:25:27,759 --> 00:25:32,740
here's an example of a terraformed

00:25:29,769 --> 00:25:34,659
configuration this syntax is one we made

00:25:32,740 --> 00:25:37,720
up on our own but similar to something

00:25:34,659 --> 00:25:40,990
like puppet but really this is just JSON

00:25:37,720 --> 00:25:43,360
syntactic sugar it also accepts JSON so

00:25:40,990 --> 00:25:46,330
that's sort of what it looks like but

00:25:43,360 --> 00:25:48,789
this is terraform creating two things a

00:25:46,330 --> 00:25:52,960
digital ocean droplet and a DNS simple

00:25:48,789 --> 00:25:54,429
record but it could also be OpenStack it

00:25:52,960 --> 00:25:57,309
could also be Foreman it could also be a

00:25:54,429 --> 00:25:59,740
sure google sort of a lot of other

00:25:57,309 --> 00:26:01,659
things in there on the top we're

00:25:59,740 --> 00:26:03,129
creating the digital ocean droplet it

00:26:01,659 --> 00:26:04,779
should be pretty straightforward what's

00:26:03,129 --> 00:26:07,269
happening here at the bottom are

00:26:04,779 --> 00:26:09,190
creating the the DNS record one

00:26:07,269 --> 00:26:11,490
interesting note is that the DNS record

00:26:09,190 --> 00:26:14,080
is referencing the IP address of the

00:26:11,490 --> 00:26:16,840
digital ocean droplet you could sort of

00:26:14,080 --> 00:26:20,080
see the syntax there and this is very

00:26:16,840 --> 00:26:22,450
different from from I think any other

00:26:20,080 --> 00:26:24,850
most other config management systems out

00:26:22,450 --> 00:26:27,720
there in terms of how we model things so

00:26:24,850 --> 00:26:29,919
any resource could reference any

00:26:27,720 --> 00:26:32,860
attribute of any other resource

00:26:29,919 --> 00:26:35,169
basically so that IP address isn't a

00:26:32,860 --> 00:26:36,820
variable it's not coming from some

00:26:35,169 --> 00:26:38,679
operator configured thing it's just

00:26:36,820 --> 00:26:40,480
something that was computed as a result

00:26:38,679 --> 00:26:43,480
of creating a digital ocean droplet and

00:26:40,480 --> 00:26:45,070
now we could use that value later and

00:26:43,480 --> 00:26:49,809
that's really important to making this

00:26:45,070 --> 00:26:52,450
work so it's human friendly config its

00:26:49,809 --> 00:26:54,249
JSON compatible in practice we see most

00:26:52,450 --> 00:26:57,730
people using the human friendly version

00:26:54,249 --> 00:27:00,640
and then using JSON for automation

00:26:57,730 --> 00:27:02,520
scripts generating configs that's mostly

00:27:00,640 --> 00:27:08,950
for auto scaling that sort of stuff but

00:27:02,520 --> 00:27:10,300
the point is it's flexible its text so

00:27:08,950 --> 00:27:11,680
you could version it and you should you

00:27:10,300 --> 00:27:15,550
put it in version control you treat it

00:27:11,680 --> 00:27:17,140
like code nothing weird there it's

00:27:15,550 --> 00:27:19,360
declarative very similar something

00:27:17,140 --> 00:27:21,040
puppet I think that at a certain scale

00:27:19,360 --> 00:27:23,830
declarative makes a lot more sense and

00:27:21,040 --> 00:27:25,600
imperative and for infrastructure it's

00:27:23,830 --> 00:27:27,970
really hard to make things imperative

00:27:25,600 --> 00:27:29,980
because as it grows you just can't

00:27:27,970 --> 00:27:32,710
actually reason about the dependencies

00:27:29,980 --> 00:27:34,450
and and so declared is I'm very

00:27:32,710 --> 00:27:37,030
opinionated about declarative all the

00:27:34,450 --> 00:27:39,340
time and then this last one is sort of

00:27:37,030 --> 00:27:40,810
marketing but like insurers code in a

00:27:39,340 --> 00:27:43,930
way not possible for what I mean by that

00:27:40,810 --> 00:27:46,480
is that you could reference anything in

00:27:43,930 --> 00:27:49,180
your infrastructure that you want not

00:27:46,480 --> 00:27:52,270
just not just in the scope of sort of a

00:27:49,180 --> 00:27:55,510
single machine and you could also add

00:27:52,270 --> 00:27:57,520
your own custom resources there so the

00:27:55,510 --> 00:28:01,960
most unique sort of thing I've seen is

00:27:57,520 --> 00:28:04,030
that Yelp i think it is they created

00:28:01,960 --> 00:28:06,010
their own custom resource that commits

00:28:04,030 --> 00:28:07,690
to get and that seems like the craziest

00:28:06,010 --> 00:28:09,580
thing ever and that's what I said when I

00:28:07,690 --> 00:28:10,930
did it I was like why would you create a

00:28:09,580 --> 00:28:12,220
resource that takes a value from

00:28:10,930 --> 00:28:14,800
something convincing to get it's because

00:28:12,220 --> 00:28:16,690
they have legacy things where they have

00:28:14,800 --> 00:28:19,300
a script that that puts get into a

00:28:16,690 --> 00:28:20,380
ticket system for the throw the machines

00:28:19,300 --> 00:28:21,250
they can't automate and they're like

00:28:20,380 --> 00:28:24,100
well at least we can automate everything

00:28:21,250 --> 00:28:25,870
and then push the data automatically to

00:28:24,100 --> 00:28:28,270
the things that can't be automated and I

00:28:25,870 --> 00:28:29,770
was like a like fine but at least you

00:28:28,270 --> 00:28:31,750
could do that sort of from one thing and

00:28:29,770 --> 00:28:34,570
not a not a crazy way it sits one

00:28:31,750 --> 00:28:36,580
resource it's doing one create read

00:28:34,570 --> 00:28:38,860
update delete cycle each one of these

00:28:36,580 --> 00:28:40,270
resources has their own acquisition

00:28:38,860 --> 00:28:44,320
provision update delete cycles and

00:28:40,270 --> 00:28:46,270
that's really what terraform is doing ok

00:28:44,320 --> 00:28:48,010
so once you have that config you get

00:28:46,270 --> 00:28:49,840
zero to done in one command so this is

00:28:48,010 --> 00:28:51,640
very not exciting you just run apply and

00:28:49,840 --> 00:28:53,710
it does it did it in the right order

00:28:51,640 --> 00:28:55,750
what's important about it is it's item

00:28:53,710 --> 00:28:58,720
potent this is really important for

00:28:55,750 --> 00:28:59,950
something like terraform because at it

00:28:58,720 --> 00:29:02,310
doesn't matter if you're just using

00:28:59,950 --> 00:29:06,330
something like AWS at a certain scale

00:29:02,310 --> 00:29:09,550
AWS api's just will fail you so

00:29:06,330 --> 00:29:10,990
terraform has to be idempotent I think

00:29:09,550 --> 00:29:11,680
you know Terra phone will retry for you

00:29:10,990 --> 00:29:14,680
but if

00:29:11,680 --> 00:29:16,480
without the retries in there I if I run

00:29:14,680 --> 00:29:19,360
terraform on something with a 500

00:29:16,480 --> 00:29:22,750
resource AWS thing it'll get 500 every

00:29:19,360 --> 00:29:24,070
single time and so it's item potent if

00:29:22,750 --> 00:29:26,200
something fails you just run it again

00:29:24,070 --> 00:29:27,520
it'll only do what isn't done and it'll

00:29:26,200 --> 00:29:28,930
it'll get there but most the time it

00:29:27,520 --> 00:29:31,810
doesn't want command because of retries

00:29:28,930 --> 00:29:33,880
built-in retries it's highly

00:29:31,810 --> 00:29:36,940
parallelized again a really important

00:29:33,880 --> 00:29:38,200
aspect for something like this so a lot

00:29:36,940 --> 00:29:40,720
of config management systems are

00:29:38,200 --> 00:29:44,440
paralyzed some arts they could get away

00:29:40,720 --> 00:29:46,960
with it because you know serial serially

00:29:44,440 --> 00:29:50,710
installing stuff onto a machine isn't

00:29:46,960 --> 00:29:53,830
that slow but cereal see really creating

00:29:50,710 --> 00:29:56,140
servers bootstrapping them is really

00:29:53,830 --> 00:29:58,090
really slow and so it has to be as

00:29:56,140 --> 00:30:00,580
paralyzed as possible and terraform does

00:29:58,090 --> 00:30:03,450
that and when we do with the plan says

00:30:00,580 --> 00:30:06,490
which I'm going to just talk about next

00:30:03,450 --> 00:30:09,070
so for the plan this is what a plan

00:30:06,490 --> 00:30:11,140
looks like and you just run the

00:30:09,070 --> 00:30:13,420
terraform plan command to get it it

00:30:11,140 --> 00:30:15,520
looks like a diff and the plan tells you

00:30:13,420 --> 00:30:17,470
what terraform is going to do so you can

00:30:15,520 --> 00:30:19,630
see on the top here it says plush +

00:30:17,470 --> 00:30:20,950
digital ocean droplet that means it's

00:30:19,630 --> 00:30:23,140
going to create it it didn't exist

00:30:20,950 --> 00:30:25,540
before it could also say minus it's

00:30:23,140 --> 00:30:27,040
going to delete it minus / + means it's

00:30:25,540 --> 00:30:28,960
going to delete it and then create it

00:30:27,040 --> 00:30:30,730
plus / minus going to create it then

00:30:28,960 --> 00:30:34,060
delete it more a tilde which means I

00:30:30,730 --> 00:30:35,410
could do an in-place update you can see

00:30:34,060 --> 00:30:36,670
all the attributes it's going to know

00:30:35,410 --> 00:30:38,440
about so you can see the stuff you

00:30:36,670 --> 00:30:40,030
configured but you could also see a lot

00:30:38,440 --> 00:30:43,060
of things to say computed so terraform

00:30:40,030 --> 00:30:44,590
actually knows what it will know once it

00:30:43,060 --> 00:30:47,110
creates the thing so this is also a

00:30:44,590 --> 00:30:49,720
different architecture than a lot of

00:30:47,110 --> 00:30:51,250
config management things and then you

00:30:49,720 --> 00:30:53,260
could also see how things relate to each

00:30:51,250 --> 00:30:56,320
other and in the ordering things are

00:30:53,260 --> 00:30:57,940
going to happen and that's that the

00:30:56,320 --> 00:30:59,380
important things about plans is they

00:30:57,940 --> 00:31:00,910
show you what's going to happen and then

00:30:59,380 --> 00:31:02,530
you could save them to guarantee what's

00:31:00,910 --> 00:31:05,230
going to happen and so this is very

00:31:02,530 --> 00:31:07,570
different than like a dry run or no op

00:31:05,230 --> 00:31:09,250
mode and it's it's not negative against

00:31:07,570 --> 00:31:12,520
them they were very upfront about what

00:31:09,250 --> 00:31:14,560
those things mean but Terra forms a

00:31:12,520 --> 00:31:15,760
different model you it shows you what's

00:31:14,560 --> 00:31:17,260
going to happen given the current state

00:31:15,760 --> 00:31:19,030
of the world and then you could save

00:31:17,260 --> 00:31:21,310
that and what you're saying when you

00:31:19,030 --> 00:31:22,960
save it is don't it doesn't matter if

00:31:21,310 --> 00:31:24,670
the state of the world change just do it

00:31:22,960 --> 00:31:25,570
this plan says anyway like you said you

00:31:24,670 --> 00:31:28,150
were just going to change

00:31:25,570 --> 00:31:30,850
the image of this machine even if the

00:31:28,150 --> 00:31:32,160
source image is different just do what

00:31:30,850 --> 00:31:34,450
you said you're going to do or try to

00:31:32,160 --> 00:31:36,940
and what terraform will do was try to do

00:31:34,450 --> 00:31:38,710
it and then where things mismatch it

00:31:36,940 --> 00:31:41,500
just won't do anything at all and so if

00:31:38,710 --> 00:31:42,520
it reaches a point where the plan given

00:31:41,500 --> 00:31:44,170
the current state of the world to given

00:31:42,520 --> 00:31:46,330
the plan it cannot do what I said it's

00:31:44,170 --> 00:31:49,930
going to do it just won't do it at all

00:31:46,330 --> 00:31:53,320
and then plant your reason for certain

00:31:49,930 --> 00:31:55,320
actions so the big benefit for this is

00:31:53,320 --> 00:31:58,720
against something like cloud formation

00:31:55,320 --> 00:32:01,240
those sorts of things you just apply it

00:31:58,720 --> 00:32:02,560
and then it's going to do something but

00:32:01,240 --> 00:32:04,180
you don't know what it's going to do and

00:32:02,560 --> 00:32:08,170
sometimes what it does is destroy things

00:32:04,180 --> 00:32:10,330
and causes downtime and it they document

00:32:08,170 --> 00:32:12,490
out what changes cause that sort of down

00:32:10,330 --> 00:32:15,070
time but it expects that your operator

00:32:12,490 --> 00:32:17,080
knows that effect for every potential

00:32:15,070 --> 00:32:18,850
change that's going to happen and and

00:32:17,080 --> 00:32:21,580
basically what that causes is you need

00:32:18,850 --> 00:32:22,780
one super genius that understands the

00:32:21,580 --> 00:32:25,780
full scope of not only your

00:32:22,780 --> 00:32:27,730
infrastructure but how in this case AWS

00:32:25,780 --> 00:32:29,620
works and how your changes are going to

00:32:27,730 --> 00:32:30,940
interact with that system and it doesn't

00:32:29,620 --> 00:32:33,130
scale at all like the amount of

00:32:30,940 --> 00:32:34,860
knowledge required to be safe with

00:32:33,130 --> 00:32:37,720
something like confirmation is just not

00:32:34,860 --> 00:32:40,300
organizationally scalable so with plans

00:32:37,720 --> 00:32:42,790
for example if the digital ocean droplet

00:32:40,300 --> 00:32:43,900
existed and I change the image you can't

00:32:42,790 --> 00:32:46,030
change the image of a machine without

00:32:43,900 --> 00:32:47,350
destroying it and recreating it so next

00:32:46,030 --> 00:32:49,060
to the change of the image in

00:32:47,350 --> 00:32:51,040
parentheses it would it would say forces

00:32:49,060 --> 00:32:52,450
new resource so you'd be able to say

00:32:51,040 --> 00:32:54,250
that that specific change is what's

00:32:52,450 --> 00:32:57,220
causing it and then when you look at the

00:32:54,250 --> 00:32:58,720
plan you could say it's 2 p.m. on a

00:32:57,220 --> 00:33:01,240
weekday I don't really want to do that

00:32:58,720 --> 00:33:03,250
right now you could change that and make

00:33:01,240 --> 00:33:05,320
sure you get fully in place updates

00:33:03,250 --> 00:33:07,030
there's also flags you could give to

00:33:05,320 --> 00:33:08,560
terraform to say you know do the changes

00:33:07,030 --> 00:33:11,530
but if there's anything that's not in

00:33:08,560 --> 00:33:15,820
place then fail so you can make sure if

00:33:11,530 --> 00:33:18,130
that happens and that's you know that's

00:33:15,820 --> 00:33:20,560
plans so the general workflow that

00:33:18,130 --> 00:33:22,420
terraform has is you Mako changes for

00:33:20,560 --> 00:33:24,910
your infrastructure you run a terraform

00:33:22,420 --> 00:33:26,440
plan you do a pull request or open a

00:33:24,910 --> 00:33:29,770
ticket or something with both the code

00:33:26,440 --> 00:33:31,030
changes and the plan and then someone

00:33:29,770 --> 00:33:33,100
comes and reviews them a couple people

00:33:31,030 --> 00:33:35,440
review it when you're done you apply the

00:33:33,100 --> 00:33:36,790
plan exactly and this lets you treat

00:33:35,440 --> 00:33:39,220
your instructor a lot more like code it

00:33:36,790 --> 00:33:41,200
keeps a history of the

00:33:39,220 --> 00:33:43,900
the original state the destination state

00:33:41,200 --> 00:33:45,370
what terraform actually did that sort of

00:33:43,900 --> 00:33:47,710
thing and it makes working on a team

00:33:45,370 --> 00:33:51,610
with infrastructure a lot more of a

00:33:47,710 --> 00:33:53,230
possible even experience and then the

00:33:51,610 --> 00:33:54,460
last thing is knowledge sharing or

00:33:53,230 --> 00:33:57,330
teamwork and this is done through

00:33:54,460 --> 00:34:00,970
modules so here's an example of a module

00:33:57,330 --> 00:34:02,980
up here we have a console module and

00:34:00,970 --> 00:34:04,870
this one actually works like if you copy

00:34:02,980 --> 00:34:06,460
this module into your file and ran

00:34:04,870 --> 00:34:09,970
terraform apply it would actually create

00:34:06,460 --> 00:34:12,159
a three server bootstrapped a console

00:34:09,970 --> 00:34:13,480
cluster on AWS we also have other cloud

00:34:12,159 --> 00:34:18,340
platforms in there but this one would be

00:34:13,480 --> 00:34:20,560
AWS and then we're and then we're taking

00:34:18,340 --> 00:34:22,300
the down here I didn't highlight it but

00:34:20,560 --> 00:34:25,450
we're taking the address out of console

00:34:22,300 --> 00:34:28,300
to use it so you could imagine that your

00:34:25,450 --> 00:34:32,530
core IT team or ops team that knows how

00:34:28,300 --> 00:34:35,169
to create a safe secure scalable piece

00:34:32,530 --> 00:34:37,960
of or component of infrastructure like a

00:34:35,169 --> 00:34:40,030
rabid mq or postgres or something could

00:34:37,960 --> 00:34:42,429
create a module for it and give it to

00:34:40,030 --> 00:34:44,889
developer teams and say you manage your

00:34:42,429 --> 00:34:47,200
own infrastructure but never ever create

00:34:44,889 --> 00:34:48,580
your own postgres cluster outside of

00:34:47,200 --> 00:34:49,899
this module because this is the way we

00:34:48,580 --> 00:34:51,849
do it and this will make sure it's

00:34:49,899 --> 00:34:53,800
backed up and that sort of stuff then

00:34:51,849 --> 00:34:56,169
that lets you do that and you can go on

00:34:53,800 --> 00:34:58,210
step further so that modules will create

00:34:56,169 --> 00:34:59,320
their own instance for everything and if

00:34:58,210 --> 00:35:02,530
you give it to a developer they'll

00:34:59,320 --> 00:35:06,190
create new servers every time you go a

00:35:02,530 --> 00:35:07,420
step further and use the syntax is a

00:35:06,190 --> 00:35:09,369
little weird but we call these remote

00:35:07,420 --> 00:35:11,950
modules but remote states remote modules

00:35:09,369 --> 00:35:13,570
and you can actually reference modules

00:35:11,950 --> 00:35:16,720
that other people have spun up so in

00:35:13,570 --> 00:35:19,780
this case we're referencing a console

00:35:16,720 --> 00:35:21,730
remote state and grabbing its address

00:35:19,780 --> 00:35:24,910
from it and this will not manage the

00:35:21,730 --> 00:35:26,950
server so in this case what the core ops

00:35:24,910 --> 00:35:29,530
would be saying is we've spun up the

00:35:26,950 --> 00:35:31,750
highly available backed up long-running

00:35:29,530 --> 00:35:34,119
postgres instance that we're on call for

00:35:31,750 --> 00:35:36,220
you could use it but you're never

00:35:34,119 --> 00:35:38,710
allowed to touch these servers nothing

00:35:36,220 --> 00:35:40,900
related to the servers and so we can

00:35:38,710 --> 00:35:45,280
access the outputs this run will fail if

00:35:40,900 --> 00:35:47,200
that's not up so you could safely share

00:35:45,280 --> 00:35:50,800
things that you don't want people to

00:35:47,200 --> 00:35:52,940
spin up either so modules are

00:35:50,800 --> 00:35:55,730
self-contained sure sure components

00:35:52,940 --> 00:35:57,770
delegation some teams create modules

00:35:55,730 --> 00:35:59,720
some teams consume them and the general

00:35:57,770 --> 00:36:02,329
real world breakdown we've seen is that

00:35:59,720 --> 00:36:05,050
as people try as people try to give

00:36:02,329 --> 00:36:06,829
developers more power as people try to

00:36:05,050 --> 00:36:08,390
scale with the service-oriented

00:36:06,829 --> 00:36:11,030
architecture and developer teams doing

00:36:08,390 --> 00:36:12,560
their own operations every company I've

00:36:11,030 --> 00:36:14,390
ever really got into maintains their

00:36:12,560 --> 00:36:17,119
core operating team which knows how to

00:36:14,390 --> 00:36:20,000
maintain things like OpenStack and

00:36:17,119 --> 00:36:21,530
networking and physical machines that

00:36:20,000 --> 00:36:24,560
knowledge really never reaches

00:36:21,530 --> 00:36:26,569
developers because it's a lot of them a

00:36:24,560 --> 00:36:28,760
knowledge is not very exciting but in

00:36:26,569 --> 00:36:31,400
terms of consuming that hardware and

00:36:28,760 --> 00:36:33,619
spinning stuff onto it usually does and

00:36:31,400 --> 00:36:39,530
modules are a nice way to let people use

00:36:33,619 --> 00:36:42,740
that so this is sort of a summary of

00:36:39,530 --> 00:36:44,329
everything but what terraform does the

00:36:42,740 --> 00:36:46,609
the bottom bullet point here what

00:36:44,329 --> 00:36:49,010
terraform does is get you from point A

00:36:46,609 --> 00:36:50,390
to point B with your infrastructure and

00:36:49,010 --> 00:36:52,460
it doesn't keep running it just you run

00:36:50,390 --> 00:36:55,310
it it does this job and exits it's not a

00:36:52,460 --> 00:36:56,990
long running server demon or anything so

00:36:55,310 --> 00:36:58,609
what we like to say is that it's a

00:36:56,990 --> 00:37:00,859
static tool from getting you from point

00:36:58,609 --> 00:37:03,470
A to point B but you still want some

00:37:00,859 --> 00:37:05,329
dynamic real-time tool to always be

00:37:03,470 --> 00:37:07,280
running to make sure that that things

00:37:05,329 --> 00:37:08,869
are healthy you could find them that

00:37:07,280 --> 00:37:10,369
sort of configure them and that is

00:37:08,869 --> 00:37:16,280
console and what I'm going to talk about

00:37:10,369 --> 00:37:19,730
next okay so console here's it's one

00:37:16,280 --> 00:37:23,390
sentence description it's basically buzz

00:37:19,730 --> 00:37:25,280
words separated by commas but so the

00:37:23,390 --> 00:37:27,829
practical thing here's the things that

00:37:25,280 --> 00:37:29,030
console could actually well I could

00:37:27,829 --> 00:37:31,099
actually do everything in the previous

00:37:29,030 --> 00:37:33,040
slide but here's the questions that you

00:37:31,099 --> 00:37:36,349
would practically be a sedate good

00:37:33,040 --> 00:37:39,290
answer whereas the service is that

00:37:36,349 --> 00:37:40,700
service healthy where what are all the

00:37:39,290 --> 00:37:43,130
machines that i currently have running

00:37:40,700 --> 00:37:46,700
what is the configuration of a service

00:37:43,130 --> 00:37:48,349
and also leader election and locking so

00:37:46,700 --> 00:37:50,660
in a distributed system you know you

00:37:48,349 --> 00:37:52,220
want to make you a script might be

00:37:50,660 --> 00:37:53,359
killed instantly but you want to make

00:37:52,220 --> 00:37:55,760
sure that only one thing is doing

00:37:53,359 --> 00:37:57,950
something that I'm console helps you say

00:37:55,760 --> 00:38:00,470
you three servers run the script but

00:37:57,950 --> 00:38:02,619
actually only one of you do it and

00:38:00,470 --> 00:38:05,690
console facilitate the leader election

00:38:02,619 --> 00:38:07,089
so this is incredibly important in this

00:38:05,690 --> 00:38:09,410
elastic sort of

00:38:07,089 --> 00:38:14,030
because you can't hard code IP addresses

00:38:09,410 --> 00:38:15,770
anymore things like config management it

00:38:14,030 --> 00:38:17,800
for a service discovery solution becomes

00:38:15,770 --> 00:38:22,070
too slow because you don't want to wait

00:38:17,800 --> 00:38:23,330
ten thirty plus minutes for convergence

00:38:22,070 --> 00:38:25,220
across your entire data center to get

00:38:23,330 --> 00:38:28,310
the right values so you need something a

00:38:25,220 --> 00:38:31,580
lot more real-time so service discovery

00:38:28,310 --> 00:38:33,170
where is service foo and more practical

00:38:31,580 --> 00:38:34,250
you know your web application where is

00:38:33,170 --> 00:38:37,010
the database you have to talk to where

00:38:34,250 --> 00:38:39,290
is the queue that sort of thing in terms

00:38:37,010 --> 00:38:43,730
of the console world we expose this out

00:38:39,290 --> 00:38:47,810
as a DNS record or the HTTP API but DNS

00:38:43,730 --> 00:38:50,359
is almost always used instead and that

00:38:47,810 --> 00:38:52,130
lets you not know application has to

00:38:50,359 --> 00:38:53,720
know about console if it knows about DNS

00:38:52,130 --> 00:38:57,109
and knows about console which basically

00:38:53,720 --> 00:38:59,150
everything so you discover services by

00:38:57,109 --> 00:39:00,740
putting their name console console

00:38:59,150 --> 00:39:04,130
returns you the list of services that

00:39:00,740 --> 00:39:06,770
are currently running with that name the

00:39:04,130 --> 00:39:08,839
DNS is legacy friendly like I said but

00:39:06,770 --> 00:39:11,270
if you want a ton more data you could

00:39:08,839 --> 00:39:13,250
use the API directly but in practice for

00:39:11,270 --> 00:39:14,690
everything other than maintenance and

00:39:13,250 --> 00:39:17,869
monitoring scripts you never really need

00:39:14,690 --> 00:39:20,030
the HTTP API and you could discover both

00:39:17,869 --> 00:39:21,740
internal and external services so this

00:39:20,030 --> 00:39:24,950
is going towards that modern data center

00:39:21,740 --> 00:39:27,349
thing I brought up earlier that that dig

00:39:24,950 --> 00:39:29,830
that DNS lookup could return private

00:39:27,349 --> 00:39:31,700
private IP is in your data center or

00:39:29,830 --> 00:39:34,010
maybe your database is a

00:39:31,700 --> 00:39:36,530
software-as-a-service that might return

00:39:34,010 --> 00:39:38,000
a cname to thats all for the service but

00:39:36,530 --> 00:39:39,710
you could register both with consoles so

00:39:38,000 --> 00:39:41,240
you could both do private things and

00:39:39,710 --> 00:39:43,940
external things and that's an important

00:39:41,240 --> 00:39:46,130
consideration in terms of as time goes

00:39:43,940 --> 00:39:47,660
on if we move to more services do we

00:39:46,130 --> 00:39:49,040
have to change this tool and in terms of

00:39:47,660 --> 00:39:54,470
console to the service discovery you

00:39:49,040 --> 00:39:56,240
don't have to failure detection so what

00:39:54,470 --> 00:39:58,250
you really want to do is ask console you

00:39:56,240 --> 00:40:00,280
know where is the database but you don't

00:39:58,250 --> 00:40:02,990
want constantly give you an IP that is

00:40:00,280 --> 00:40:04,910
stale that you that it knows it's gone

00:40:02,990 --> 00:40:07,010
or that's that someone knows it's gone

00:40:04,910 --> 00:40:09,440
so failure detection is both the way to

00:40:07,010 --> 00:40:10,760
detect failures as well as affect the

00:40:09,440 --> 00:40:11,869
service discovery so that when you're

00:40:10,760 --> 00:40:13,369
saying where's the database you're

00:40:11,869 --> 00:40:15,800
actually saying where is the database

00:40:13,369 --> 00:40:19,010
that at this point in time you're

00:40:15,800 --> 00:40:20,570
confident that I could reach so there's

00:40:19,010 --> 00:40:24,230
no good screenshot for failure detection

00:40:20,570 --> 00:40:27,320
but basically what it is is an August

00:40:24,230 --> 00:40:30,400
compatible execute the script exit code

00:40:27,320 --> 00:40:32,810
nonzero is unhealthy zero is healthy and

00:40:30,400 --> 00:40:35,510
and you run against services and

00:40:32,810 --> 00:40:36,950
machines and and consoles of the Texas

00:40:35,510 --> 00:40:39,260
the machine is down in terms of a

00:40:36,950 --> 00:40:41,990
network partition or something so if if

00:40:39,260 --> 00:40:44,420
there's any sort of failure of a service

00:40:41,990 --> 00:40:47,210
or the machine the services on it won't

00:40:44,420 --> 00:40:49,430
be returned from DNS so if you dig it it

00:40:47,210 --> 00:40:51,320
won't be there but you could always look

00:40:49,430 --> 00:40:53,870
in the UI which is the screenshot before

00:40:51,320 --> 00:40:56,210
that I just blast through or the hpm

00:40:53,870 --> 00:40:57,350
point which will return the full catalog

00:40:56,210 --> 00:41:02,570
and the full health states and

00:40:57,350 --> 00:41:04,460
everything so then consoles key value

00:41:02,570 --> 00:41:08,480
storage this is for the purpose of

00:41:04,460 --> 00:41:09,830
configuring services and this is it this

00:41:08,480 --> 00:41:11,630
there's interesting questions around

00:41:09,830 --> 00:41:13,880
this that that people dapping console

00:41:11,630 --> 00:41:15,470
usually have which is what's the use

00:41:13,880 --> 00:41:18,320
case of this versus something like in

00:41:15,470 --> 00:41:19,220
fig manager let me first show you what

00:41:18,320 --> 00:41:22,190
it looks like and then I'll answer that

00:41:19,220 --> 00:41:25,100
question so you just store things and

00:41:22,190 --> 00:41:26,630
get things using a HTTP API really

00:41:25,100 --> 00:41:28,520
simple anything could do it you don't

00:41:26,630 --> 00:41:31,010
need a client for console you just need

00:41:28,520 --> 00:41:33,950
a HTTP client and you could grab input

00:41:31,010 --> 00:41:37,640
values the storage is highly available

00:41:33,950 --> 00:41:41,480
it's really hard to take out the storage

00:41:37,640 --> 00:41:42,950
of console and here's here's where it

00:41:41,480 --> 00:41:44,510
gets interesting so what do you put in

00:41:42,950 --> 00:41:46,730
here versus putting in a config manual

00:41:44,510 --> 00:41:49,010
system what I like to say you put in

00:41:46,730 --> 00:41:51,140
console is any knobs you have for

00:41:49,010 --> 00:41:53,240
anything so you want your config

00:41:51,140 --> 00:41:55,160
management system to put down basically

00:41:53,240 --> 00:41:57,050
the template for how Apaches can figure

00:41:55,160 --> 00:41:59,330
out how your applications configured you

00:41:57,050 --> 00:42:00,740
wanted to put down the file but anything

00:41:59,330 --> 00:42:03,380
dynamic in terms of how many workers

00:42:00,740 --> 00:42:06,170
what port are we listening on is it on

00:42:03,380 --> 00:42:07,730
or off is it is it even enabled all

00:42:06,170 --> 00:42:10,220
these little knobs that you might want

00:42:07,730 --> 00:42:11,990
to ever turn you throw it in console and

00:42:10,220 --> 00:42:14,630
the reason you do that is it makes a

00:42:11,990 --> 00:42:16,310
push versus pull model so with console

00:42:14,630 --> 00:42:18,890
you're able to watch keys for changes

00:42:16,310 --> 00:42:21,530
and and act on those changes really

00:42:18,890 --> 00:42:23,300
quickly and so when you make when you

00:42:21,530 --> 00:42:25,250
turn a knob when you say turn

00:42:23,300 --> 00:42:27,530
maintenance mode on you're not saying

00:42:25,250 --> 00:42:29,090
turn maintenance mode on and wait 10 to

00:42:27,530 --> 00:42:30,980
30 minutes for it to converge across a

00:42:29,090 --> 00:42:33,560
cluster you're saying turn it on and

00:42:30,980 --> 00:42:35,079
within hundreds of milliseconds for

00:42:33,560 --> 00:42:38,390
thousands of servers

00:42:35,079 --> 00:42:40,250
it's taken effect it's just happened and

00:42:38,390 --> 00:42:43,910
so this is where it makes a lot more

00:42:40,250 --> 00:42:46,280
sense you're able to do acls and

00:42:43,910 --> 00:42:48,520
encryption on these things so you could

00:42:46,280 --> 00:42:50,300
put more sensitive information in their

00:42:48,520 --> 00:42:52,700
consoles not really made for something

00:42:50,300 --> 00:42:54,020
like secrets but in terms of sensitive

00:42:52,700 --> 00:42:57,589
information you could put it in there

00:42:54,020 --> 00:43:02,270
and protect it and that's really what

00:42:57,589 --> 00:43:04,700
the configuration is four and then multi

00:43:02,270 --> 00:43:07,160
data center so a lot of software today

00:43:04,700 --> 00:43:09,800
you know well let me step back a lot of

00:43:07,160 --> 00:43:11,720
people today organizations are becoming

00:43:09,800 --> 00:43:12,980
multi dais an hour faster the neighbor

00:43:11,720 --> 00:43:15,230
before multi data center used to be a

00:43:12,980 --> 00:43:17,570
very high scale thing when things like

00:43:15,230 --> 00:43:19,640
AWS you could be multi data center with

00:43:17,570 --> 00:43:21,530
a few clicks if you're using software

00:43:19,640 --> 00:43:23,510
the service you're not really sure what

00:43:21,530 --> 00:43:25,160
data center things are in and so you're

00:43:23,510 --> 00:43:27,650
sort of multi data center do very

00:43:25,160 --> 00:43:29,750
quickly and a lot of software today is

00:43:27,650 --> 00:43:31,820
giving you some software that's pretty

00:43:29,750 --> 00:43:33,800
good and then saying oh you're multiple

00:43:31,820 --> 00:43:35,060
data centers figure it out and they're

00:43:33,800 --> 00:43:37,190
not giving you any really good

00:43:35,060 --> 00:43:39,619
information to get there and what this

00:43:37,190 --> 00:43:41,329
forces you to do is you know build into

00:43:39,619 --> 00:43:43,190
your applications choosing between data

00:43:41,329 --> 00:43:46,220
centers putting clients into them

00:43:43,190 --> 00:43:48,109
something but with console we handle

00:43:46,220 --> 00:43:49,880
multi data center for you it doesn't

00:43:48,109 --> 00:43:52,310
require any different configuration on

00:43:49,880 --> 00:43:54,339
the client side of things application

00:43:52,310 --> 00:43:58,099
still just works and here's how it looks

00:43:54,339 --> 00:43:59,990
so from a DNS discovery perspective you

00:43:58,099 --> 00:44:01,970
just put the data center you want in the

00:43:59,990 --> 00:44:03,140
query so you could ask for web

00:44:01,970 --> 00:44:04,220
front-ends and two different data

00:44:03,140 --> 00:44:08,140
centers and you'll get two different

00:44:04,220 --> 00:44:10,310
responses so excuse me again you could

00:44:08,140 --> 00:44:11,690
configure an application to use service

00:44:10,310 --> 00:44:13,520
discovery and something in another data

00:44:11,690 --> 00:44:15,589
center and it still doesn't have to know

00:44:13,520 --> 00:44:17,810
about console if you leave out the data

00:44:15,589 --> 00:44:21,349
center it assumes the current data

00:44:17,810 --> 00:44:24,079
center for kV you could specify data

00:44:21,349 --> 00:44:25,609
center too and it will write two

00:44:24,079 --> 00:44:27,200
different different data center so you

00:44:25,609 --> 00:44:28,730
could have different configurations

00:44:27,200 --> 00:44:31,190
different knobs and different data

00:44:28,730 --> 00:44:32,960
centers we also have a tool that lets

00:44:31,190 --> 00:44:36,740
you replicate data to other data centers

00:44:32,960 --> 00:44:38,240
if you want so that I mean that's it but

00:44:36,740 --> 00:44:41,630
it's very simple but that simple

00:44:38,240 --> 00:44:42,859
interface lets you just use it from any

00:44:41,630 --> 00:44:43,849
data center and communicate with any

00:44:42,859 --> 00:44:46,400
data center without any additional

00:44:43,849 --> 00:44:49,070
tooling networking etc then you normally

00:44:46,400 --> 00:44:50,390
have so all this

00:44:49,070 --> 00:44:52,790
and the last bullet points really nice

00:44:50,390 --> 00:44:54,740
too which is that if you use the console

00:44:52,790 --> 00:44:56,780
you I you could view all your services

00:44:54,740 --> 00:44:59,600
all your configuration all your machines

00:44:56,780 --> 00:45:02,870
in one UI there's just a drop down for

00:44:59,600 --> 00:45:04,420
what data centers you have versus the

00:45:02,870 --> 00:45:06,410
other response you know with something

00:45:04,420 --> 00:45:08,000
with a lot of other tools out there

00:45:06,410 --> 00:45:11,060
which is oh just run one UI for data

00:45:08,000 --> 00:45:14,360
center and figure it out and you don't

00:45:11,060 --> 00:45:16,190
have to do that with this and then sort

00:45:14,360 --> 00:45:17,540
of the last feature I think the last

00:45:16,190 --> 00:45:20,570
feature I cover with console is

00:45:17,540 --> 00:45:22,040
orchestration so console on its own is

00:45:20,570 --> 00:45:23,780
in a very high level orchestration

00:45:22,040 --> 00:45:26,390
engine it's not made for that but it it

00:45:23,780 --> 00:45:28,640
gives you these low-level tools to build

00:45:26,390 --> 00:45:32,060
orchestration on top of it and the tools

00:45:28,640 --> 00:45:34,370
are events exec and watches here's what

00:45:32,060 --> 00:45:37,130
they look like an events at the top an

00:45:34,370 --> 00:45:39,710
event is a very lightweight fits in a

00:45:37,130 --> 00:45:43,160
UDP packet thing that's sent out over

00:45:39,710 --> 00:45:45,230
the network these are really high scale

00:45:43,160 --> 00:45:47,090
you'd have to send millions really to

00:45:45,230 --> 00:45:48,980
see them even on any network graph there

00:45:47,090 --> 00:45:53,720
they're really cheap and just go out

00:45:48,980 --> 00:45:55,640
there watches are a sort of complex

00:45:53,720 --> 00:45:58,010
thing that lets you watch events let you

00:45:55,640 --> 00:45:59,390
watch changes in console when when a

00:45:58,010 --> 00:46:01,100
service becomes healthy when a service

00:45:59,390 --> 00:46:03,080
comes online when a machine disappears

00:46:01,100 --> 00:46:05,090
there's any sort of query you want to

00:46:03,080 --> 00:46:07,460
put in there for a watch and then when

00:46:05,090 --> 00:46:09,620
that happens it'll execute a script for

00:46:07,460 --> 00:46:11,870
you so in this case we set up a watch

00:46:09,620 --> 00:46:13,460
for that event we just fired so when the

00:46:11,870 --> 00:46:15,050
deploy event goes out run the deploy

00:46:13,460 --> 00:46:18,140
script it'll get sent the payload on

00:46:15,050 --> 00:46:20,390
standard in and you do something and

00:46:18,140 --> 00:46:24,530
then finally there's exec at the bottom

00:46:20,390 --> 00:46:26,060
so exec is targeting in this case web

00:46:24,530 --> 00:46:28,670
services you could target machines and

00:46:26,060 --> 00:46:30,350
to run a script and that really scalable

00:46:28,670 --> 00:46:32,360
runs the script in parallel across all

00:46:30,350 --> 00:46:33,830
the machines that matches and then puts

00:46:32,360 --> 00:46:35,660
the standard out standard air and exit

00:46:33,830 --> 00:46:38,330
code back into the key value store for

00:46:35,660 --> 00:46:40,700
you to consume any way you want the

00:46:38,330 --> 00:46:43,790
difference between exec and event event

00:46:40,700 --> 00:46:45,760
is asynchronous exec a synchronous event

00:46:43,790 --> 00:46:48,680
happens over UDP so it's probabilistic

00:46:45,760 --> 00:46:49,970
exact happens over TCP so it's for sure

00:46:48,680 --> 00:46:51,800
going to make a connection or error if

00:46:49,970 --> 00:46:53,570
it doesn't so you just have two

00:46:51,800 --> 00:46:56,150
different trade-offs their exec as much

00:46:53,570 --> 00:46:58,520
more expensive event is much much

00:46:56,150 --> 00:47:00,230
cheaper but it's up to you to choose

00:46:58,520 --> 00:47:02,090
what you want to use depending on the

00:47:00,230 --> 00:47:02,779
situation for a deploy you probably

00:47:02,090 --> 00:47:05,239
actually don't want to

00:47:02,779 --> 00:47:07,640
events but you could do whatever you

00:47:05,239 --> 00:47:09,499
want and so console gives you these

00:47:07,640 --> 00:47:11,390
powerful orchestration tools there's

00:47:09,499 --> 00:47:14,630
pros and cons to each but you have the

00:47:11,390 --> 00:47:16,279
power to choose and you know when when

00:47:14,630 --> 00:47:19,489
when we first came out with console over

00:47:16,279 --> 00:47:21,589
a year ago we really stress the pros and

00:47:19,489 --> 00:47:23,989
cons in terms of scalability but since

00:47:21,589 --> 00:47:25,669
since has been out a year we've

00:47:23,989 --> 00:47:28,309
basically seen that every one of these

00:47:25,669 --> 00:47:30,140
approaches scales too many many

00:47:28,309 --> 00:47:32,509
thousands of agents running them pretty

00:47:30,140 --> 00:47:34,009
often you know up to once a second for

00:47:32,509 --> 00:47:37,369
some of these across thousands of

00:47:34,009 --> 00:47:39,919
servers and so from a scale perspective

00:47:37,369 --> 00:47:44,059
I wouldn't worry about it until until

00:47:39,919 --> 00:47:47,569
you're really really big I will skip

00:47:44,059 --> 00:47:49,819
this so the workflow with console and

00:47:47,569 --> 00:47:51,319
terraform together is generally that the

00:47:49,819 --> 00:47:54,409
server started via something like

00:47:51,319 --> 00:47:56,150
terraform and they're started just in

00:47:54,409 --> 00:47:57,349
parallel in any order you want on the

00:47:56,150 --> 00:47:58,849
database doesn't need to start for the

00:47:57,349 --> 00:48:01,609
web server nothing like that you just

00:47:58,849 --> 00:48:03,890
start them the console agent is started

00:48:01,609 --> 00:48:05,449
joins a cluster and then when the

00:48:03,890 --> 00:48:08,749
services come up and they come healthy

00:48:05,449 --> 00:48:10,609
they they show up suddenly on DNS the

00:48:08,749 --> 00:48:11,449
application picks it up and starts

00:48:10,609 --> 00:48:14,630
running and sort of everything

00:48:11,449 --> 00:48:16,249
eventually comes together so you get rid

00:48:14,630 --> 00:48:17,869
of a lot if you if you fully embrace

00:48:16,249 --> 00:48:19,999
something like console terraform you get

00:48:17,869 --> 00:48:22,279
rid of ordering dependencies you get rid

00:48:19,999 --> 00:48:24,229
of fragility with that because you're

00:48:22,279 --> 00:48:26,390
just using DNS if there's no responses

00:48:24,229 --> 00:48:27,919
you handle it in some way you know an

00:48:26,390 --> 00:48:29,919
error message that you're down or you

00:48:27,919 --> 00:48:32,299
just restart your process over and over

00:48:29,919 --> 00:48:35,239
but what you eventually get with console

00:48:32,299 --> 00:48:38,390
is that as things come up very quickly

00:48:35,239 --> 00:48:43,669
they converge into a running thing and

00:48:38,390 --> 00:48:44,809
that's really nice to see so operational

00:48:43,669 --> 00:48:48,319
bullet points between console because

00:48:44,809 --> 00:48:50,329
since i'll try to just cut off a lot of

00:48:48,319 --> 00:48:52,039
questions here that uh that people would

00:48:50,329 --> 00:48:53,509
have i'm giving a whole talk on the

00:48:52,039 --> 00:48:55,819
operation of console and not because

00:48:53,509 --> 00:48:58,999
it's complex but because there's a lot

00:48:55,819 --> 00:49:00,259
of nuance to it but here are the main

00:48:58,999 --> 00:49:03,650
high-level things that are important to

00:49:00,259 --> 00:49:05,599
understand so causal servers do leader

00:49:03,650 --> 00:49:07,549
election via raft but you run an agent

00:49:05,599 --> 00:49:09,079
on every machine if you want the agents

00:49:07,549 --> 00:49:11,119
optional but highly recommended it's how

00:49:09,079 --> 00:49:14,599
it does failure detection on a single

00:49:11,119 --> 00:49:16,440
notes Caleb Lee but console servers you

00:49:14,599 --> 00:49:19,950
run like three five or seven and they

00:49:16,440 --> 00:49:22,650
leader election it uses a gossip

00:49:19,950 --> 00:49:25,170
protocol for liveness checks uses a

00:49:22,650 --> 00:49:26,640
gossip protocol called swim if anyone's

00:49:25,170 --> 00:49:30,270
heard of that but it's a very very

00:49:26,640 --> 00:49:32,490
scalable way to both send small amounts

00:49:30,270 --> 00:49:35,160
of data like events but also do failure

00:49:32,490 --> 00:49:37,290
failure checks so as your as your data

00:49:35,160 --> 00:49:39,690
center grows it grows linearly with

00:49:37,290 --> 00:49:42,690
respect to how expensive aliveness

00:49:39,690 --> 00:49:45,680
checks cost versus versus a square

00:49:42,690 --> 00:49:48,300
approach with something like heartbeats

00:49:45,680 --> 00:49:52,380
there's three consistency modes for the

00:49:48,300 --> 00:49:55,140
data so there's default which I like to

00:49:52,380 --> 00:49:58,200
just say is pretty much consistent and

00:49:55,140 --> 00:50:00,380
what that means is that it verifies a

00:49:58,200 --> 00:50:03,390
right is done before it returns the data

00:50:00,380 --> 00:50:06,780
but if after you send data there's a

00:50:03,390 --> 00:50:08,460
network partition and and it's

00:50:06,780 --> 00:50:10,460
complicated but if after you write data

00:50:08,460 --> 00:50:12,810
there's a network partition and it gets

00:50:10,460 --> 00:50:14,130
what it thinks is a majority but there

00:50:12,810 --> 00:50:15,750
was a leader election while there was a

00:50:14,130 --> 00:50:17,460
partition it's no longer the leader then

00:50:15,750 --> 00:50:19,859
you'll get back a stale value by a few

00:50:17,460 --> 00:50:21,839
hundred milliseconds and for those

00:50:19,859 --> 00:50:23,819
scenarios it's mostly okay for most

00:50:21,839 --> 00:50:25,380
applications but if you really really

00:50:23,819 --> 00:50:27,300
care that it has to be the correct value

00:50:25,380 --> 00:50:29,250
you could choose consistent if you

00:50:27,300 --> 00:50:31,530
choose consistent then every right will

00:50:29,250 --> 00:50:33,300
consult every server no matter what not

00:50:31,530 --> 00:50:35,250
just the majority they all have to

00:50:33,300 --> 00:50:36,810
return that you are indeed the leader

00:50:35,250 --> 00:50:39,119
and it will return it or you could do

00:50:36,810 --> 00:50:41,970
snail which won't consult anyone it'll

00:50:39,119 --> 00:50:45,300
just get the value that you want which

00:50:41,970 --> 00:50:47,400
is pretty good for scalability for a lot

00:50:45,300 --> 00:50:50,849
of keys but default is pretty consistent

00:50:47,400 --> 00:50:52,200
by default there's encryption and acls

00:50:50,849 --> 00:50:55,460
across everything so the gossip

00:50:52,200 --> 00:50:59,819
protocols over UDP so it uses a

00:50:55,460 --> 00:51:02,369
symmetric key and then the API and the

00:50:59,819 --> 00:51:03,599
TCP stuff is all done over TLS so

00:51:02,369 --> 00:51:05,280
there's encryption across everything and

00:51:03,599 --> 00:51:08,400
then there's a CL to cross most things

00:51:05,280 --> 00:51:12,630
key value and services now and we're

00:51:08,400 --> 00:51:16,230
adding ACLs across exec soon and

00:51:12,630 --> 00:51:18,450
real-world usage today for consoles up

00:51:16,230 --> 00:51:20,460
too many thousands per data center I

00:51:18,450 --> 00:51:22,440
think our biggest deployment in terms of

00:51:20,460 --> 00:51:25,230
data one single data center is 20,000

00:51:22,440 --> 00:51:27,150
servers but the vanity metric that we're

00:51:25,230 --> 00:51:29,400
able to say now is over fifty percent of

00:51:27,150 --> 00:51:30,270
all North American Internet traffic goes

00:51:29,400 --> 00:51:32,000
through a machine running

00:51:30,270 --> 00:51:34,050
so it doesn't take a lot of

00:51:32,000 --> 00:51:36,240
organizations to get that metric but it

00:51:34,050 --> 00:51:39,300
does take a lot of servers so consoles

00:51:36,240 --> 00:51:43,830
use that pretty high scale and and as it

00:51:39,300 --> 00:51:48,170
is running fine so that's everything and

00:51:43,830 --> 00:51:48,170
thank you and I'll answer any question

00:51:52,370 --> 00:52:03,810
all right thank you are there any

00:51:54,570 --> 00:52:05,670
questions I'll start this okay yeah it's

00:52:03,810 --> 00:52:12,420
not released yet but we have a terraform

00:52:05,670 --> 00:52:13,860
provider performing when it's it so it's

00:52:12,420 --> 00:52:20,090
almost done it's just being tested right

00:52:13,860 --> 00:52:23,160
now maybe next week maybe two weeks yep

00:52:20,090 --> 00:52:25,950
so like I mentioned to the ACL so

00:52:23,160 --> 00:52:28,290
there's a CLS but I I've mentioned

00:52:25,950 --> 00:52:30,660
briefly but they don't cover events and

00:52:28,290 --> 00:52:33,540
execs yet so you could just disable them

00:52:30,660 --> 00:52:35,250
cluster wide and they couldn't really

00:52:33,540 --> 00:52:37,470
compromise that unless they gained

00:52:35,250 --> 00:52:39,480
control of majority of your servers your

00:52:37,470 --> 00:52:42,270
servers now you're not all your agents

00:52:39,480 --> 00:52:44,430
but the servers but you could just

00:52:42,270 --> 00:52:47,010
disable them or and for everything else

00:52:44,430 --> 00:52:48,960
for who could see what services like you

00:52:47,010 --> 00:52:52,530
could say that web machines can never

00:52:48,960 --> 00:52:55,020
ever ever discover query where I don't

00:52:52,530 --> 00:52:56,490
know certain data nodes are like that

00:52:55,020 --> 00:52:57,990
sort of stuff you could partition that

00:52:56,490 --> 00:53:00,060
up and the key value as well so you

00:52:57,990 --> 00:53:02,190
could say those machines can only access

00:53:00,060 --> 00:53:03,750
web configuration they can never see the

00:53:02,190 --> 00:53:06,000
databases configuration and things like

00:53:03,750 --> 00:53:08,550
that so across kayvyun service discovery

00:53:06,000 --> 00:53:10,470
there's a CLS that you could put but

00:53:08,550 --> 00:53:12,540
across the orchestration stuff there's

00:53:10,470 --> 00:53:14,400
not yet a seals but they're coming and

00:53:12,540 --> 00:53:16,880
not the next release but the following

00:53:14,400 --> 00:53:16,880
release

00:53:18,580 --> 00:53:26,630
if they're not sable yep any other

00:53:23,300 --> 00:53:29,390
questions do you have dependencies in

00:53:26,630 --> 00:53:32,180
terraform so from one service to or

00:53:29,390 --> 00:53:35,470
resource to the other one yeah so we do

00:53:32,180 --> 00:53:39,620
the dependencies for terraform are are

00:53:35,470 --> 00:53:42,200
mostly implicit but not in a magical way

00:53:39,620 --> 00:53:43,790
just a very obvious way like if the DNS

00:53:42,200 --> 00:53:45,980
simple record is clearly using the

00:53:43,790 --> 00:53:47,960
digital ocean droplets so terraform will

00:53:45,980 --> 00:53:50,150
create a graph edge for you to make sure

00:53:47,960 --> 00:53:52,790
that the droplet happens first before

00:53:50,150 --> 00:53:56,000
that but you could also if there's a not

00:53:52,790 --> 00:53:58,280
obvious dependency like the if you have

00:53:56,000 --> 00:54:00,020
an application that just will crash if

00:53:58,280 --> 00:54:01,310
the database is not running I'm even

00:54:00,020 --> 00:54:03,080
though it doesn't use a value when

00:54:01,310 --> 00:54:04,700
you're making the server you can set a

00:54:03,080 --> 00:54:05,840
specific dependency so you could say

00:54:04,700 --> 00:54:08,300
that that server has to be up and

00:54:05,840 --> 00:54:09,650
running before this one starts and you

00:54:08,300 --> 00:54:29,570
could just tell terraform that exactly

00:54:09,650 --> 00:54:31,880
yep any other yep yeah so the question

00:54:29,570 --> 00:54:34,520
is there a sin tax dependency check so

00:54:31,880 --> 00:54:37,010
yeah it the there's a syntax check for

00:54:34,520 --> 00:54:40,760
just the syntax but it it has to turn

00:54:37,010 --> 00:54:45,080
into directed acyclic graph so we check

00:54:40,760 --> 00:54:48,710
for cycles and we check for some other

00:54:45,080 --> 00:54:49,940
like edge cases but yeah you can't you

00:54:48,710 --> 00:54:53,750
can't get into an infinite loop for

00:54:49,940 --> 00:54:54,770
example yeah it'll be an a so if you

00:54:53,750 --> 00:54:57,170
remove the first server it'll be an

00:54:54,770 --> 00:55:01,610
error it'll do a it it's a lot like

00:54:57,170 --> 00:55:03,620
compiler it'll do a it'll do a basically

00:55:01,610 --> 00:55:05,750
lexical pass in order to compile

00:55:03,620 --> 00:55:07,280
everything into an AST which is sort of

00:55:05,750 --> 00:55:09,560
similar to a graph it's not its final

00:55:07,280 --> 00:55:12,080
graph form then it does a semantic pass

00:55:09,560 --> 00:55:13,820
over all the graph nodes verifies things

00:55:12,080 --> 00:55:15,860
like you're accessing properties exist

00:55:13,820 --> 00:55:17,240
resources that exist there are certain

00:55:15,860 --> 00:55:18,980
types of variables you can't use in

00:55:17,240 --> 00:55:20,780
certain things that does that and then

00:55:18,980 --> 00:55:23,120
it finally does a transform into a graph

00:55:20,780 --> 00:55:25,540
or full executable graph that it that

00:55:23,120 --> 00:55:25,540
executes

00:55:30,530 --> 00:55:38,930
yep yep so the order comes from the

00:55:33,750 --> 00:55:50,130
ground anything else I think it's good

00:55:38,930 --> 00:55:54,590
all right thank you thank you ok next

00:55:50,130 --> 00:55:57,600
week yeah it's done it's it's all done I

00:55:54,590 --> 00:56:02,700
don't I know but but but I can't tell

00:55:57,600 --> 00:56:05,810
you ok thank you very much impressive

00:56:02,700 --> 00:56:05,810

YouTube URL: https://www.youtube.com/watch?v=KkA2m45fMss


