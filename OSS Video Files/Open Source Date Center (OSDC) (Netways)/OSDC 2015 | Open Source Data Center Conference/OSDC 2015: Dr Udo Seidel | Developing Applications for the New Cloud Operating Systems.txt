Title: OSDC 2015: Dr Udo Seidel | Developing Applications for the New Cloud Operating Systems
Publication date: 2015-04-30
Playlist: OSDC 2015 | Open Source Data Center Conference
Description: 
	Along with many other things the cloud has triggered the creation of new opensource operating systems. Some of them are still a kind of a Linux. Others have broken with many traditions in order to be the best O/S for the cloud. Even the more Linux-like ones require a change of thinking regarding setup and management. This has a knock-on effect on how to develop applications which should run on these new operating systems. Using CoreOS, OSv and MirageOS this talk will describe the design and architecture of the newcomers in the cloud O/S family. This is followed by the changes needed on the application development side. The selected examples represent the broad spectrum from 'almost no code changes needed' to 'rewrite from scratch'.
Captions: 
	00:00:07,090 --> 00:00:14,500
welcome to the talk of dr. Udo zaida

00:00:10,400 --> 00:00:14,500
about developing applications

00:00:14,630 --> 00:00:19,880
systems I'm going to talk about news the

00:00:18,200 --> 00:00:21,560
so-called new cloud operating systems

00:00:19,880 --> 00:00:24,020
actually i will pick free out of the

00:00:21,560 --> 00:00:25,430
menu available and will describe a

00:00:24,020 --> 00:00:29,090
little bit design and the architecture

00:00:25,430 --> 00:00:30,890
the ideas behind and then also what is

00:00:29,090 --> 00:00:32,509
the potential impact for applications

00:00:30,890 --> 00:00:35,239
running on them developing and also

00:00:32,509 --> 00:00:37,090
maintaining applications for the people

00:00:35,239 --> 00:00:39,680
have been here before after nice

00:00:37,090 --> 00:00:41,780
Austrian accent are in English you get

00:00:39,680 --> 00:00:43,730
now a very strong East German accent in

00:00:41,780 --> 00:00:46,880
English and I apologize in advance for

00:00:43,730 --> 00:00:50,660
that okay I start official introduction

00:00:46,880 --> 00:00:52,280
are the foundation to tell you about

00:00:50,660 --> 00:00:54,230
what's the scope of this presentation

00:00:52,280 --> 00:00:56,150
what we actually look at will then pick

00:00:54,230 --> 00:00:59,750
three candidates out of the available

00:00:56,150 --> 00:01:01,880
our spectrum are will outline how they

00:00:59,750 --> 00:01:04,640
look like what as a set what are they

00:01:01,880 --> 00:01:06,229
design ideas behind and will then allude

00:01:04,640 --> 00:01:07,610
to okay what is the impact to

00:01:06,229 --> 00:01:09,799
application development and also

00:01:07,610 --> 00:01:11,030
application management and of course at

00:01:09,799 --> 00:01:13,159
the end there will be a kind of a

00:01:11,030 --> 00:01:16,700
summary or at least takeaways from from

00:01:13,159 --> 00:01:18,439
dis presentations presentation a few

00:01:16,700 --> 00:01:21,020
words about my person so I'm originally

00:01:18,439 --> 00:01:23,420
a mathematic and an physics teacher I

00:01:21,020 --> 00:01:25,429
spent a few mule's few more years at

00:01:23,420 --> 00:01:28,700
University and back then I could also

00:01:25,429 --> 00:01:30,740
infected by the line of spheres force

00:01:28,700 --> 00:01:33,259
any linux and unix trainer for quite

00:01:30,740 --> 00:01:34,880
some time spend also nice years and the

00:01:33,259 --> 00:01:36,289
high-performance computing environment

00:01:34,880 --> 00:01:39,380
especially for the german car

00:01:36,289 --> 00:01:41,240
manufacturers are like audi or BMW and

00:01:39,380 --> 00:01:43,670
since three years i'm working for from

00:01:41,240 --> 00:01:45,380
ideas which is are potentially not known

00:01:43,670 --> 00:01:46,880
to most of the people here despite the

00:01:45,380 --> 00:01:48,950
fact that we are world leader in the

00:01:46,880 --> 00:01:51,380
travel industry so when you were

00:01:48,950 --> 00:01:54,859
traveling here not by your own car but

00:01:51,380 --> 00:01:57,439
by a rental car by train by airplane you

00:01:54,859 --> 00:01:59,090
potentially have used a directly or

00:01:57,439 --> 00:02:01,850
indirectly our services either

00:01:59,090 --> 00:02:03,529
applications or the infrastructure VF

00:02:01,850 --> 00:02:05,240
our data center and wording close to

00:02:03,529 --> 00:02:07,219
munich and this is where I work and I

00:02:05,240 --> 00:02:08,869
had several assignments there was

00:02:07,219 --> 00:02:10,670
heading a admin team which was

00:02:08,869 --> 00:02:12,349
motivations business than most

00:02:10,670 --> 00:02:14,720
responsible for linux strategy and

00:02:12,349 --> 00:02:16,730
server automation and since first of

00:02:14,720 --> 00:02:18,920
april are I'm now responsible for

00:02:16,730 --> 00:02:21,709
architecture and technical governance

00:02:18,920 --> 00:02:24,050
and this we're going to talk today about

00:02:21,709 --> 00:02:26,180
our praying systems which are little bit

00:02:24,050 --> 00:02:28,100
different than the ones we know about I

00:02:26,180 --> 00:02:30,110
also decided to take

00:02:28,100 --> 00:02:31,670
different setup for the presentations of

00:02:30,110 --> 00:02:34,730
this presentation is running out of the

00:02:31,670 --> 00:02:37,130
Raspberry Pi version 2 I have a fedora

00:02:34,730 --> 00:02:39,560
21 running on it which is mostly vanilla

00:02:37,130 --> 00:02:41,510
just a different kernel to work with the

00:02:39,560 --> 00:02:45,050
50 pie it's a version 2 by the way and

00:02:41,510 --> 00:02:46,610
some devices to interact with the

00:02:45,050 --> 00:02:48,430
overhead projector as well as the

00:02:46,610 --> 00:02:51,470
operating system issue in command and

00:02:48,430 --> 00:02:53,240
actually since this is a net base hosted

00:02:51,470 --> 00:02:55,370
conference I also made sure that they've

00:02:53,240 --> 00:02:56,600
got a singer to running on that one what

00:02:55,370 --> 00:02:58,670
sort of this particular image is a

00:02:56,600 --> 00:03:03,320
different image but also fit watch when

00:02:58,670 --> 00:03:05,480
you want good let's get started cloud

00:03:03,320 --> 00:03:06,770
and cloud operating systems yeah well

00:03:05,480 --> 00:03:08,720
there are multiple definitions of

00:03:06,770 --> 00:03:10,460
available if you ask free people you

00:03:08,720 --> 00:03:12,320
potentially get five different answers

00:03:10,460 --> 00:03:14,240
so for this presentation the

00:03:12,320 --> 00:03:17,030
understanding of a cloud is in the scent

00:03:14,240 --> 00:03:19,850
of infrastructure as a service at type

00:03:17,030 --> 00:03:21,770
where the design is to scale out if you

00:03:19,850 --> 00:03:24,050
need more performance and not not scare

00:03:21,770 --> 00:03:25,490
up and that many things are API Trevin

00:03:24,050 --> 00:03:29,060
that really the things are hidden you

00:03:25,490 --> 00:03:30,680
really consume it s as a service and the

00:03:29,060 --> 00:03:32,870
cloud operating system is something

00:03:30,680 --> 00:03:34,700
which runs on top of that one and also

00:03:32,870 --> 00:03:36,590
here we limit the scope to those ones

00:03:34,700 --> 00:03:38,150
which you could also run on a normal a

00:03:36,590 --> 00:03:41,240
traditional data center so we're not

00:03:38,150 --> 00:03:43,160
talking about desktop our operating

00:03:41,240 --> 00:03:46,460
system like like like chromium or Chrome

00:03:43,160 --> 00:03:48,380
OS we talked about it once such those

00:03:46,460 --> 00:03:50,480
ones you would also run any data center

00:03:48,380 --> 00:03:52,130
you could say this is just a layer which

00:03:50,480 --> 00:03:54,320
runs on top of your infrastructure as a

00:03:52,130 --> 00:03:56,600
service providing a foundation are

00:03:54,320 --> 00:04:00,080
already hosts for the application is

00:03:56,600 --> 00:04:02,570
service on top we limited scope further

00:04:00,080 --> 00:04:04,370
down or furthermore even our to just

00:04:02,570 --> 00:04:06,680
look at the ones which are open source

00:04:04,370 --> 00:04:08,060
or which potentially is not a big

00:04:06,680 --> 00:04:10,310
limitation or not a big reduction

00:04:08,060 --> 00:04:12,430
because open source and cloud are highly

00:04:10,310 --> 00:04:15,110
integrated or tied to each other anyway

00:04:12,430 --> 00:04:16,820
when I talk and I mean open source I

00:04:15,110 --> 00:04:18,320
have different understandings of that

00:04:16,820 --> 00:04:20,630
one of course I want to have access to

00:04:18,320 --> 00:04:23,600
the source code but not for controlling

00:04:20,630 --> 00:04:26,450
more for helping me maybe what do I have

00:04:23,600 --> 00:04:28,040
to change to adapt to our change my

00:04:26,450 --> 00:04:30,350
application to work on the new operating

00:04:28,040 --> 00:04:32,300
system but also open source in these

00:04:30,350 --> 00:04:36,050
days is really much much more than just

00:04:32,300 --> 00:04:37,280
religion are or description what you do

00:04:36,050 --> 00:04:39,110
if your source code it's really a

00:04:37,280 --> 00:04:41,570
development model it's a business model

00:04:39,110 --> 00:04:41,990
and the company was says we want to do

00:04:41,570 --> 00:04:45,290
prior

00:04:41,990 --> 00:04:47,090
g-code are Samia no go so open source is

00:04:45,290 --> 00:04:50,390
much more heel than just providing the

00:04:47,090 --> 00:04:52,790
district court arm and yes listed last

00:04:50,390 --> 00:04:54,770
bullet point it's just the start of the

00:04:52,790 --> 00:04:58,130
journey in the cloud it's not it's not

00:04:54,770 --> 00:04:59,630
the end so open source cloud operating

00:04:58,130 --> 00:05:01,190
system actually is the least common

00:04:59,630 --> 00:05:03,350
denominator of the things i have

00:05:01,190 --> 00:05:05,270
mentioned previously and i do expect

00:05:03,350 --> 00:05:07,700
that they have something different

00:05:05,270 --> 00:05:09,200
compared to the existing or traditional

00:05:07,700 --> 00:05:11,900
Linux distribution or traditional

00:05:09,200 --> 00:05:13,880
operating systems are we have seen in

00:05:11,900 --> 00:05:15,080
the past of which devolvement of the of

00:05:13,880 --> 00:05:17,510
the cloud and individualization

00:05:15,080 --> 00:05:20,000
technologies are that the hypervisor

00:05:17,510 --> 00:05:21,470
have evolved that data management has

00:05:20,000 --> 00:05:22,940
evolved but if you look at the

00:05:21,470 --> 00:05:24,980
traditional Linux distributions they

00:05:22,940 --> 00:05:27,170
haven't really evolved it that much so I

00:05:24,980 --> 00:05:28,700
do expect for the candidates here that

00:05:27,170 --> 00:05:31,580
there is something different compared to

00:05:28,700 --> 00:05:33,710
them so if those conditions there's

00:05:31,580 --> 00:05:35,690
still a lot of options a lot of

00:05:33,710 --> 00:05:37,400
implementations love technologies you

00:05:35,690 --> 00:05:40,130
could pick if you do a simple internet

00:05:37,400 --> 00:05:42,440
research so what I've done here is I

00:05:40,130 --> 00:05:44,300
have picked our free candidates which

00:05:42,440 --> 00:05:47,090
represent compared to traditional Linux

00:05:44,300 --> 00:05:49,010
the entire spectrum one which is more

00:05:47,090 --> 00:05:51,290
close or more common to what we know for

00:05:49,010 --> 00:05:53,330
instance from a rated or al to Z or

00:05:51,290 --> 00:05:55,310
Ubuntu then I have one on your totally

00:05:53,330 --> 00:05:57,410
after site which is a totally different

00:05:55,310 --> 00:06:01,250
approach to operating system and I pick

00:05:57,410 --> 00:06:02,750
something something in between so for

00:06:01,250 --> 00:06:04,550
the next slides I will use the default

00:06:02,750 --> 00:06:06,380
proach of the chest give some high-level

00:06:04,550 --> 00:06:08,780
information about each of the free

00:06:06,380 --> 00:06:11,240
projects or distributions or cloud

00:06:08,780 --> 00:06:13,100
operating systems I have picked we will

00:06:11,240 --> 00:06:14,750
then have a look at ok what's happening

00:06:13,100 --> 00:06:17,210
on the colonel site how does it compare

00:06:14,750 --> 00:06:18,620
to a traditional Linux kernel what are

00:06:17,210 --> 00:06:21,230
the commonalities what are the

00:06:18,620 --> 00:06:23,090
differences are then step into user

00:06:21,230 --> 00:06:25,310
space because this is the traditional

00:06:23,090 --> 00:06:27,050
arabic where our application will run

00:06:25,310 --> 00:06:29,240
where we will develop our application

00:06:27,050 --> 00:06:31,070
and this will endear you to some

00:06:29,240 --> 00:06:35,200
discussions first for second thoughts

00:06:31,070 --> 00:06:37,520
and maybe also call to action at the end

00:06:35,200 --> 00:06:38,960
good we start with chorus actually

00:06:37,520 --> 00:06:40,610
that's the easy one because there was

00:06:38,960 --> 00:06:42,950
actually a talk about that one yesterday

00:06:40,610 --> 00:06:45,080
and it was also mentioned in in other

00:06:42,950 --> 00:06:47,510
talks today so I guess this is pretty

00:06:45,080 --> 00:06:50,960
known to the audience it's quite young

00:06:47,510 --> 00:06:53,480
exists less than two years arm you see

00:06:50,960 --> 00:06:55,340
how it's licensed and it's really quite

00:06:53,480 --> 00:06:55,820
common to a you could treat it as at

00:06:55,340 --> 00:06:57,560
normal

00:06:55,820 --> 00:06:59,630
the nooks distribution if you want to

00:06:57,560 --> 00:07:02,180
you see you can run it on physical and

00:06:59,630 --> 00:07:05,210
virtual and then recently there was also

00:07:02,180 --> 00:07:07,460
some decisions taken to do some more

00:07:05,210 --> 00:07:10,310
stuff towards arm architecture as of

00:07:07,460 --> 00:07:13,880
today it's the x86 only thing which is

00:07:10,310 --> 00:07:15,650
not a big limitation looking at the data

00:07:13,880 --> 00:07:19,400
centers also the cloud infrastructure

00:07:15,650 --> 00:07:21,620
out there the colonel as I said not a

00:07:19,400 --> 00:07:23,180
big surprise it's mainly based on the

00:07:21,620 --> 00:07:25,250
vanilla Colonel so if you compare to

00:07:23,180 --> 00:07:27,620
enterprise kernel of credit enterprise

00:07:25,250 --> 00:07:29,840
linux or suse linux you will see that

00:07:27,620 --> 00:07:31,730
less options are enabled because they're

00:07:29,840 --> 00:07:34,280
less options needed on the Korres side

00:07:31,730 --> 00:07:36,080
but you won't find any any surprises and

00:07:34,280 --> 00:07:38,090
it surprises there and depending on

00:07:36,080 --> 00:07:40,130
which channel you are on chorus you get

00:07:38,090 --> 00:07:43,280
a more or less recent current version

00:07:40,130 --> 00:07:45,230
here it does look much different our

00:07:43,280 --> 00:07:46,940
compared to traditional Linux if you

00:07:45,230 --> 00:07:48,890
look in user space and again I'm

00:07:46,940 --> 00:07:51,530
potential repeating which was set in

00:07:48,890 --> 00:07:53,510
other talks as well the first are

00:07:51,530 --> 00:07:55,820
difference you will notice is there's no

00:07:53,510 --> 00:07:58,480
package management so the updates are

00:07:55,820 --> 00:08:01,340
handled on a totally different level

00:07:58,480 --> 00:08:03,890
instead of filling around with binaries

00:08:01,340 --> 00:08:06,650
with libraries with packages the entire

00:08:03,890 --> 00:08:09,110
file system is replaced and in order to

00:08:06,650 --> 00:08:11,600
will make sure that the user on purpose

00:08:09,110 --> 00:08:13,760
or accidentally it doesn't screw up this

00:08:11,600 --> 00:08:16,100
particular update mechanism this file

00:08:13,760 --> 00:08:18,110
system is mounted in a read-only mode so

00:08:16,100 --> 00:08:20,330
things where you normally would change

00:08:18,110 --> 00:08:22,250
files it's not possible and anymore and

00:08:20,330 --> 00:08:25,070
this is this is on purpose and the

00:08:22,250 --> 00:08:27,650
update is done normally activated by a

00:08:25,070 --> 00:08:29,780
reboot are you have different boot menu

00:08:27,650 --> 00:08:31,550
entries for going forward you can also

00:08:29,780 --> 00:08:34,880
then going back for just picking the

00:08:31,550 --> 00:08:36,830
other boot the other boot entry and the

00:08:34,880 --> 00:08:38,479
way how it works as simply you have two

00:08:36,830 --> 00:08:40,099
partitions for the same file system a

00:08:38,479 --> 00:08:44,420
shadow partition in the active active

00:08:40,099 --> 00:08:47,960
partition the userland footprint is

00:08:44,420 --> 00:08:50,420
quite small so the entire core s image

00:08:47,960 --> 00:08:53,180
is is not really really big Chester are

00:08:50,420 --> 00:08:55,220
a few hundred megabytes and if you look

00:08:53,180 --> 00:08:57,440
at a freshly booted Cora s not

00:08:55,220 --> 00:08:59,810
customized a system you will see only a

00:08:57,440 --> 00:09:01,670
few processes running and we touch on

00:08:59,810 --> 00:09:04,130
some of them were later but it's less

00:09:01,670 --> 00:09:05,780
than less than 20 on a normal one so we

00:09:04,130 --> 00:09:08,540
have really quite reduction of what's

00:09:05,780 --> 00:09:09,590
what's happening in userland and the aim

00:09:08,540 --> 00:09:11,690
of Korres

00:09:09,590 --> 00:09:13,760
of the ideas was that if you want to run

00:09:11,690 --> 00:09:15,710
an application on top of it then please

00:09:13,760 --> 00:09:17,450
package your application that it brings

00:09:15,710 --> 00:09:20,000
everything with it what what it needs

00:09:17,450 --> 00:09:21,920
are one idea for instance is to put it

00:09:20,000 --> 00:09:24,590
in a in a container like like taco or

00:09:21,920 --> 00:09:26,600
like like like rocket so you keep the

00:09:24,590 --> 00:09:28,250
underlying operating system clean and

00:09:26,600 --> 00:09:30,590
you put everything you need for your

00:09:28,250 --> 00:09:34,460
application into into this particular

00:09:30,590 --> 00:09:36,680
container there are a few processes or

00:09:34,460 --> 00:09:39,080
things you will probably come across

00:09:36,680 --> 00:09:42,140
when you look at a deeper at kora as i

00:09:39,080 --> 00:09:44,060
mentioned mention HD and fleets there

00:09:42,140 --> 00:09:46,220
are few more like locksmith and flannel

00:09:44,060 --> 00:09:47,780
was also mentioned the other day you

00:09:46,220 --> 00:09:49,580
will notice that the configuration of

00:09:47,780 --> 00:09:51,500
the u.s. is also a little bit different

00:09:49,580 --> 00:09:53,120
and normally or traditional approach

00:09:51,500 --> 00:09:54,350
would be you pull it up and then you

00:09:53,120 --> 00:09:56,660
connect to it and you do the things

00:09:54,350 --> 00:09:58,550
change files and a new reboot and check

00:09:56,660 --> 00:10:00,110
again here did you do the things

00:09:58,550 --> 00:10:02,830
differently you do it in advance you

00:10:00,110 --> 00:10:05,600
create a so-called cloud in it file our

00:10:02,830 --> 00:10:09,050
value specify I want to this files

00:10:05,600 --> 00:10:10,820
changed I want to have those sh Keys lay

00:10:09,050 --> 00:10:13,580
it down I want to potentially those

00:10:10,820 --> 00:10:15,590
users created and then the configuration

00:10:13,580 --> 00:10:20,000
is done is a part of as part of the boot

00:10:15,590 --> 00:10:23,000
process users a less-is-more you will

00:10:20,000 --> 00:10:25,160
find only two users kind of interactive

00:10:23,000 --> 00:10:27,470
users pre-configured with core OS and

00:10:25,160 --> 00:10:29,150
you will also notice that under with a

00:10:27,470 --> 00:10:31,280
freshly booted fun I'm going to

00:10:29,150 --> 00:10:33,110
configured one you cannot easily log

00:10:31,280 --> 00:10:35,660
into that one you need to have your

00:10:33,110 --> 00:10:38,300
cloud in it pfeif already done properly

00:10:35,660 --> 00:10:41,060
to provide ssh keys to connect to that

00:10:38,300 --> 00:10:43,280
one so bits and pieces are different but

00:10:41,060 --> 00:10:46,850
it still feels like a like a traditional

00:10:43,280 --> 00:10:48,310
Linux operating operating system it's

00:10:46,850 --> 00:10:51,980
the inflator I want to mention

00:10:48,310 --> 00:10:54,920
specifically at tzivos or because it's a

00:10:51,980 --> 00:10:57,140
it's a basic or foundation of many

00:10:54,920 --> 00:10:59,750
things are on top as that here it's a

00:10:57,140 --> 00:11:01,670
distributed a key value store and could

00:10:59,750 --> 00:11:03,890
help you to also rethink how you handle

00:11:01,670 --> 00:11:06,110
data management another important thing

00:11:03,890 --> 00:11:08,510
here is that you can use it for a

00:11:06,110 --> 00:11:10,070
service application this discovery which

00:11:08,510 --> 00:11:11,840
sounds a bit ambitious in the first

00:11:10,070 --> 00:11:13,940
place because it's a key value store how

00:11:11,840 --> 00:11:16,370
would it work but the mechanism behind

00:11:13,940 --> 00:11:17,990
us is quite easy or you just have to

00:11:16,370 --> 00:11:19,970
make sure that when your new instance

00:11:17,990 --> 00:11:22,040
you new servers the application started

00:11:19,970 --> 00:11:23,360
it places a particular message in the

00:11:22,040 --> 00:11:24,980
key value store and

00:11:23,360 --> 00:11:26,779
you have to make sure that the receiving

00:11:24,980 --> 00:11:29,120
end is also reading that one and it's

00:11:26,779 --> 00:11:31,399
all implemented and easy easy to do so

00:11:29,120 --> 00:11:34,010
you can use a store to actually tell

00:11:31,399 --> 00:11:37,579
other people instances there something

00:11:34,010 --> 00:11:40,149
else running and fleet is a kind of a

00:11:37,579 --> 00:11:42,680
cluster or distributed in its system are

00:11:40,149 --> 00:11:44,630
could be a way to change how you start

00:11:42,680 --> 00:11:47,450
and stop your application you may have a

00:11:44,630 --> 00:11:49,250
mechanism in place already to do so but

00:11:47,450 --> 00:11:53,570
you may rethink this when you're using

00:11:49,250 --> 00:11:54,950
Korres using are using fleet fleet users

00:11:53,570 --> 00:11:56,720
are inert process which is running on

00:11:54,950 --> 00:11:59,870
each and every your core instance so

00:11:56,720 --> 00:12:01,640
it's which system d and it uses HD at

00:11:59,870 --> 00:12:04,730
the end to combine those things to bring

00:12:01,640 --> 00:12:06,709
those are both together and if we give a

00:12:04,730 --> 00:12:09,230
little bit you may also consider that

00:12:06,709 --> 00:12:12,290
your put additional topology on your

00:12:09,230 --> 00:12:14,029
Korres farm by a meter data saying okay

00:12:12,290 --> 00:12:16,250
those are the more expensive ones those

00:12:14,029 --> 00:12:18,140
are the cheap ones or production tests

00:12:16,250 --> 00:12:20,750
and pre-production testing and then you

00:12:18,140 --> 00:12:23,329
can use those meter data also for fleet

00:12:20,750 --> 00:12:27,470
tutela start those instances only there

00:12:23,329 --> 00:12:29,510
and not there and vice versa so for

00:12:27,470 --> 00:12:32,660
application built as I said before this

00:12:29,510 --> 00:12:34,070
is still a linux and it feels like Linux

00:12:32,660 --> 00:12:36,860
bits and pieces of different in the

00:12:34,070 --> 00:12:38,329
handling are but it still doesn't have a

00:12:36,860 --> 00:12:40,579
big impact how your for your

00:12:38,329 --> 00:12:42,290
applications are you can use the

00:12:40,579 --> 00:12:43,339
delinquency of use before you can use

00:12:42,290 --> 00:12:45,170
the built environment you can

00:12:43,339 --> 00:12:47,120
potentially use all the processes you

00:12:45,170 --> 00:12:49,040
have in place there without any problems

00:12:47,120 --> 00:12:51,769
switching from a other Linux

00:12:49,040 --> 00:12:54,410
distribution 22 chorus you won't impress

00:12:51,769 --> 00:12:58,160
all the features Korres has and we will

00:12:54,410 --> 00:13:01,310
touch on that one on on a later slide so

00:12:58,160 --> 00:13:03,829
number two and this election is osv has

00:13:01,310 --> 00:13:05,750
a similar age like like Korres I do

00:13:03,829 --> 00:13:07,519
remember was the type when it was

00:13:05,750 --> 00:13:11,390
announced two years ago around the Linux

00:13:07,519 --> 00:13:13,310
con Europe in order in 2013 just looking

00:13:11,390 --> 00:13:17,980
at the overview here you will notice two

00:13:13,310 --> 00:13:23,600
differences compared to to a Linux okay

00:13:17,980 --> 00:13:25,040
okay sorry one is that the language for

00:13:23,600 --> 00:13:27,680
the kernel as such is a different phone

00:13:25,040 --> 00:13:29,480
it's not C C++ which already are makes

00:13:27,680 --> 00:13:32,149
us suspicious something is different ah

00:13:29,480 --> 00:13:34,370
this is not a pure linux kernel and the

00:13:32,149 --> 00:13:36,410
other one it's supposed to run on

00:13:34,370 --> 00:13:37,190
virtual environment only and this is by

00:13:36,410 --> 00:13:39,950
decision this

00:13:37,190 --> 00:13:42,130
is a design thing they don't want to

00:13:39,950 --> 00:13:44,660
rent on I want to run on own hardware

00:13:42,130 --> 00:13:49,520
would it be better if I go on that side

00:13:44,660 --> 00:13:55,310
door oh ok ok I will try to stay in

00:13:49,520 --> 00:13:57,650
between good so yes actually it's true

00:13:55,310 --> 00:13:59,690
so the colonel here was what was newly

00:13:57,650 --> 00:14:01,640
developed from from from greenfield and

00:13:59,690 --> 00:14:04,670
they had the idea of the OS feed people

00:14:01,640 --> 00:14:06,980
ok the purpose of the colonel has

00:14:04,670 --> 00:14:09,170
changed in in the cloud environment many

00:14:06,980 --> 00:14:11,330
things what we have implemented in the

00:14:09,170 --> 00:14:12,800
kernel actually is also covered by the

00:14:11,330 --> 00:14:15,380
hypervisor so we have additional

00:14:12,800 --> 00:14:17,120
overhead over here also it's different

00:14:15,380 --> 00:14:19,340
running on big arrow and like we used to

00:14:17,120 --> 00:14:21,410
do in the past then running on multiple

00:14:19,340 --> 00:14:22,940
and many many instances so they've

00:14:21,410 --> 00:14:25,190
thrown away all the things which they

00:14:22,940 --> 00:14:27,320
considered as overhead for instance do

00:14:25,190 --> 00:14:29,420
you support for for physical hardware

00:14:27,320 --> 00:14:31,130
because the idea is it will run on

00:14:29,420 --> 00:14:32,600
virtual hardware anyway so the only

00:14:31,130 --> 00:14:34,970
thing we need to support are those

00:14:32,600 --> 00:14:36,680
virtual devices and we don't have to

00:14:34,970 --> 00:14:40,430
fiddle around with supporting Dell HP

00:14:36,680 --> 00:14:41,900
IBM and so on and so forth they said the

00:14:40,430 --> 00:14:44,870
colonel should be the smallest possible

00:14:41,900 --> 00:14:47,030
layer between the application and auntie

00:14:44,870 --> 00:14:48,770
high bar in the hypervisor and they they

00:14:47,030 --> 00:14:50,900
have used this also to change things and

00:14:48,770 --> 00:14:53,390
to fro things kind of over the fence

00:14:50,900 --> 00:14:54,740
saying ok security and use we don't need

00:14:53,390 --> 00:14:56,900
this stuff this should be done on the

00:14:54,740 --> 00:14:58,850
hypervisor level we don't we don't need

00:14:56,900 --> 00:15:01,370
it but in order to make the transition

00:14:58,850 --> 00:15:03,230
better or easier for traditional

00:15:01,370 --> 00:15:04,880
applications they have made sure better

00:15:03,230 --> 00:15:07,550
implemented at least on the binary

00:15:04,880 --> 00:15:09,740
interface level most of the of the

00:15:07,550 --> 00:15:13,970
interfaces which you would expect from a

00:15:09,740 --> 00:15:15,560
tree lipsy on on a Linux system if you

00:15:13,970 --> 00:15:18,110
look for the use of space actually will

00:15:15,560 --> 00:15:20,089
notice that Islam so the design here is

00:15:18,110 --> 00:15:21,920
really your application runs in in

00:15:20,089 --> 00:15:23,810
kernel space and this has some has some

00:15:21,920 --> 00:15:26,480
consequences one I mentioned already

00:15:23,810 --> 00:15:28,160
does there's no user content are there

00:15:26,480 --> 00:15:30,170
also change today how they do networking

00:15:28,160 --> 00:15:32,089
they talk approaches which you would

00:15:30,170 --> 00:15:34,280
normally find in the bsd line so they

00:15:32,089 --> 00:15:37,070
use a kind of a channel content contact

00:15:34,280 --> 00:15:39,200
for for the kernel as a storage back end

00:15:37,070 --> 00:15:41,450
I you set FS which also might be a

00:15:39,200 --> 00:15:42,950
challenge for some some people actually

00:15:41,450 --> 00:15:45,830
for them at the moment it's a challenge

00:15:42,950 --> 00:15:47,750
to migrate to to arm because it's not so

00:15:45,830 --> 00:15:49,850
easy to get to the first working working

00:15:47,750 --> 00:15:51,740
down

00:15:49,850 --> 00:15:53,420
you have a single process only actually

00:15:51,740 --> 00:15:55,790
have no process we there's no process

00:15:53,420 --> 00:15:58,310
concept if a single application / osv

00:15:55,790 --> 00:16:01,100
instance you cannot run two or three or

00:15:58,310 --> 00:16:02,750
more yeah you can have frets but the

00:16:01,100 --> 00:16:04,220
single application it's the first thing

00:16:02,750 --> 00:16:06,350
you have to keep in mind if you want to

00:16:04,220 --> 00:16:08,209
run your application inside that one you

00:16:06,350 --> 00:16:11,120
may have to change your code to put

00:16:08,209 --> 00:16:13,190
everything to one beast together it has

00:16:11,120 --> 00:16:15,680
to be also in a particular format which

00:16:13,190 --> 00:16:20,000
is called real relocatable object code

00:16:15,680 --> 00:16:22,160
are you can imagine this like a shadow

00:16:20,000 --> 00:16:24,290
object like library you have on Linux

00:16:22,160 --> 00:16:26,690
you can also run binaries but then those

00:16:24,290 --> 00:16:29,600
binaries have to be positioned position

00:16:26,690 --> 00:16:31,009
independent executables and on top of

00:16:29,600 --> 00:16:32,990
that there must be also dynamically

00:16:31,009 --> 00:16:34,730
linked those are the things which which

00:16:32,990 --> 00:16:36,410
are supported everything else will not

00:16:34,730 --> 00:16:38,870
run in or see if your application is

00:16:36,410 --> 00:16:41,509
different than that format you have to

00:16:38,870 --> 00:16:43,550
do something to to make it work yeah and

00:16:41,509 --> 00:16:45,529
since there's a single application only

00:16:43,550 --> 00:16:49,610
doesn't need for fork or anything like

00:16:45,529 --> 00:16:51,410
light like that it does include a little

00:16:49,610 --> 00:16:54,050
web server which actually provides a

00:16:51,410 --> 00:16:56,569
REST API so normally you would not lock

00:16:54,050 --> 00:16:58,009
onto a osv instance you can make it work

00:16:56,569 --> 00:17:01,310
that you get a kind of a command-line

00:16:58,009 --> 00:17:02,959
interface but things like SSH or tell

00:17:01,310 --> 00:17:04,819
them the oldest doesn't doesn't really

00:17:02,959 --> 00:17:07,039
exist the way to interact with USB

00:17:04,819 --> 00:17:10,159
instance is really you go for the rest

00:17:07,039 --> 00:17:12,559
api which is implemented via HTTP server

00:17:10,159 --> 00:17:14,150
many great or compile you also instance

00:17:12,559 --> 00:17:17,089
it's done automatically so you have to

00:17:14,150 --> 00:17:20,299
do steps to actually exclude it and if

00:17:17,089 --> 00:17:22,610
that when you can get nice statistics

00:17:20,299 --> 00:17:24,620
about how you always be instances doing

00:17:22,610 --> 00:17:29,299
but you can also issue commands or get

00:17:24,620 --> 00:17:30,890
responses out all of that one so your

00:17:29,299 --> 00:17:33,260
application build will look a little bit

00:17:30,890 --> 00:17:35,809
different here okay you potentially can

00:17:33,260 --> 00:17:37,309
reuse your your coat or what what you

00:17:35,809 --> 00:17:38,870
have to you probably have to change

00:17:37,309 --> 00:17:40,580
little bit how you build it to make sure

00:17:38,870 --> 00:17:43,610
that it fits the crime meets the

00:17:40,580 --> 00:17:46,120
criteria are being relocatable being

00:17:43,610 --> 00:17:48,500
shut up checked or things like that and

00:17:46,120 --> 00:17:50,299
in the second step which little bit more

00:17:48,500 --> 00:17:53,090
cumbersome you need to integrate it in

00:17:50,299 --> 00:17:55,400
your 03 instance or remember there's no

00:17:53,090 --> 00:17:57,409
user lens you cannot interact are in

00:17:55,400 --> 00:17:59,030
place it easily do I really have to put

00:17:57,409 --> 00:18:00,980
it into the image and then you can

00:17:59,030 --> 00:18:03,220
create an instance out of that one and

00:18:00,980 --> 00:18:04,809
there are two ways of doing this so

00:18:03,220 --> 00:18:08,559
and the early days that I was only what

00:18:04,809 --> 00:18:11,140
I call the local way here and luckily

00:18:08,559 --> 00:18:13,450
the project did provide a framework to

00:18:11,140 --> 00:18:15,250
do so called cap stands with capstan you

00:18:13,450 --> 00:18:18,070
would be in the position to to pull down

00:18:15,250 --> 00:18:20,289
arrows v image and then also to tell it

00:18:18,070 --> 00:18:21,789
ok please use this application and put

00:18:20,289 --> 00:18:24,760
everything together and then you can

00:18:21,789 --> 00:18:26,650
actually actually run it looking at

00:18:24,760 --> 00:18:28,330
capstone at the commands and also how

00:18:26,650 --> 00:18:29,860
you configure it looks a little bit like

00:18:28,330 --> 00:18:31,900
like Doc earlier you have the darker

00:18:29,860 --> 00:18:34,210
command and the dockerfile so here you

00:18:31,900 --> 00:18:37,299
have a capstan command and the capstan

00:18:34,210 --> 00:18:39,870
file and I have an example on the next

00:18:37,299 --> 00:18:42,880
slide on that one which works locally

00:18:39,870 --> 00:18:44,350
which obviously doesn't work at least

00:18:42,880 --> 00:18:46,240
less good if you are on a cloud

00:18:44,350 --> 00:18:48,490
environment where you can also run osb

00:18:46,240 --> 00:18:50,110
instances here you can again use the

00:18:48,490 --> 00:18:52,600
cloud in the concept which we have seen

00:18:50,110 --> 00:18:54,429
with Korres so with cloud image we would

00:18:52,600 --> 00:18:56,530
then make sure that you place the

00:18:54,429 --> 00:19:00,280
application somehow into the three image

00:18:56,530 --> 00:19:02,980
once it's once it's booted so this is

00:19:00,280 --> 00:19:06,250
how a hello world would look in osv land

00:19:02,980 --> 00:19:08,350
hours we bolt or so we speak if you wish

00:19:06,250 --> 00:19:10,600
to so we have three files we have our

00:19:08,350 --> 00:19:12,640
c++ program which actually is just this

00:19:10,600 --> 00:19:14,980
one printing a nice message to the

00:19:12,640 --> 00:19:16,659
screen then we have our built

00:19:14,980 --> 00:19:19,299
environment which is t-midi make file

00:19:16,659 --> 00:19:21,220
here and we have DD capstan file and in

00:19:19,299 --> 00:19:23,740
the capstan file lecture we have just

00:19:21,220 --> 00:19:25,570
lists ok please use this base image kind

00:19:23,740 --> 00:19:28,809
of a like a docker base image if you

00:19:25,570 --> 00:19:31,539
wish to this is the command line to be

00:19:28,809 --> 00:19:33,809
executed once the system is booted so

00:19:31,539 --> 00:19:37,289
this is actually the in it if you wish

00:19:33,809 --> 00:19:39,010
you can have the make of the day

00:19:37,289 --> 00:19:41,289
compilation of the application

00:19:39,010 --> 00:19:44,890
integrated and then yeah actually this

00:19:41,289 --> 00:19:47,320
tells capstone please place this file

00:19:44,890 --> 00:19:50,980
there and enter name it to to that one

00:19:47,320 --> 00:19:53,110
and then I do a capsule run and then it

00:19:50,980 --> 00:19:55,030
downloads the image merges it together

00:19:53,110 --> 00:19:59,890
started and then it does the print out

00:19:55,030 --> 00:20:04,659
and then the image is dead again or is

00:19:59,890 --> 00:20:05,860
shut down again to be to be precise we

00:20:04,659 --> 00:20:07,539
are looking at this hello world program

00:20:05,860 --> 00:20:10,360
it looks right a little bit complicated

00:20:07,539 --> 00:20:12,970
and you may anticipate if you want to

00:20:10,360 --> 00:20:14,919
make your application running in osv are

00:20:12,970 --> 00:20:16,600
you may need to change some things and

00:20:14,919 --> 00:20:16,900
especially our points of water what

00:20:16,600 --> 00:20:19,210
happen

00:20:16,900 --> 00:20:20,890
if you have a java-based application or

00:20:19,210 --> 00:20:23,500
if application which runs on top or

00:20:20,890 --> 00:20:25,810
memcache do things like that luckily

00:20:23,500 --> 00:20:27,430
there is a kind of a marketplace of all

00:20:25,810 --> 00:20:29,140
three images available so you can

00:20:27,430 --> 00:20:33,490
download them on the on the github site

00:20:29,140 --> 00:20:36,010
are of OOOs leave for travel actually

00:20:33,490 --> 00:20:38,020
they are two OpenJDK images version 7

00:20:36,010 --> 00:20:40,830
version 8 the way how it's implemented

00:20:38,020 --> 00:20:44,170
is quite easy or de chava interpreter is

00:20:40,830 --> 00:20:46,060
place as a shared object inside osv and

00:20:44,170 --> 00:20:47,440
the only thing you have to do is to

00:20:46,060 --> 00:20:49,690
create a child file out of your

00:20:47,440 --> 00:20:51,550
application and pass it on as a command

00:20:49,690 --> 00:20:56,950
line to this interpreter and off we go

00:20:51,550 --> 00:20:59,860
into your theory good which brings me

00:20:56,950 --> 00:21:02,170
then r2d em to the last one we will

00:20:59,860 --> 00:21:05,170
pause or three for the moment again I

00:21:02,170 --> 00:21:08,800
will get back to this one more impact on

00:21:05,170 --> 00:21:10,930
the application site are later on so my

00:21:08,800 --> 00:21:12,700
address is totally different just

00:21:10,930 --> 00:21:14,380
looking at the idea of you will spot

00:21:12,700 --> 00:21:16,030
again that on the corner site something

00:21:14,380 --> 00:21:17,680
is different and if you look at the

00:21:16,030 --> 00:21:21,250
language some things even more different

00:21:17,680 --> 00:21:23,890
and even even exotic commonality with

00:21:21,250 --> 00:21:25,930
osv is it's not supposed to run on any

00:21:23,890 --> 00:21:28,570
physical hardware only on virtual

00:21:25,930 --> 00:21:30,910
hardware at the moment only sent as a

00:21:28,570 --> 00:21:34,450
hypervisor is supported which has some

00:21:30,910 --> 00:21:37,570
reason because our me address is a kind

00:21:34,450 --> 00:21:39,670
of a sub-project of incubation project

00:21:37,570 --> 00:21:41,440
so that's why they fay fox n and they do

00:21:39,670 --> 00:21:44,560
invite the community if you want to code

00:21:41,440 --> 00:21:48,730
something for kvm be my guest here here

00:21:44,560 --> 00:21:50,710
we go they I haven't tested that one but

00:21:48,730 --> 00:21:53,740
I do claim that they got it running also

00:21:50,710 --> 00:21:56,380
on some armed version 7 devices so what

00:21:53,740 --> 00:21:58,540
they do expect is a is the arm process

00:21:56,380 --> 00:22:00,430
of which does support virtualization

00:21:58,540 --> 00:22:03,040
extensions which is available since

00:22:00,430 --> 00:22:05,470
since version 8 and you can actually buy

00:22:03,040 --> 00:22:08,230
products cheap products like given a lap

00:22:05,470 --> 00:22:10,660
I'd are supported cubieboard Cuba truck

00:22:08,230 --> 00:22:12,220
and more and affordable devices the

00:22:10,660 --> 00:22:16,600
Raspberry Pi doesn't as far as I know

00:22:12,220 --> 00:22:18,640
what I haven't checked yet colonel yeah

00:22:16,600 --> 00:22:21,550
it's not really the other concept of a

00:22:18,640 --> 00:22:23,440
corona doesn't exist in Miraleste they

00:22:21,550 --> 00:22:24,940
consider the colonel something which is

00:22:23,440 --> 00:22:26,740
not really needed they are more of the

00:22:24,940 --> 00:22:28,750
opinion ok there should be something

00:22:26,740 --> 00:22:30,490
which helps the application to interact

00:22:28,750 --> 00:22:32,320
directly with you

00:22:30,490 --> 00:22:35,500
beverage see hypervisor here so they

00:22:32,320 --> 00:22:38,110
consider our me Roger vests more as a

00:22:35,500 --> 00:22:40,210
library operating system something which

00:22:38,110 --> 00:22:42,040
helps the application to do the bits and

00:22:40,210 --> 00:22:46,929
pieces a colonel would normally normally

00:22:42,040 --> 00:22:48,970
do there is a concept this concept is

00:22:46,929 --> 00:22:52,200
not new it's it's quite quite old

00:22:48,970 --> 00:22:54,970
actually it's known as unique kernel and

00:22:52,200 --> 00:22:56,500
what they do everything Raja is say they

00:22:54,970 --> 00:22:59,020
want to provide you a framework where

00:22:56,500 --> 00:23:01,210
you can target different things so it

00:22:59,020 --> 00:23:03,520
could be xn hypervisor at the end it

00:23:01,210 --> 00:23:06,760
could be a kvm hypervisor ID and could

00:23:03,520 --> 00:23:08,890
be something embedded at the end or a

00:23:06,760 --> 00:23:12,940
simple simple eunuchs which isn't at the

00:23:08,890 --> 00:23:16,000
end are a UNIX binary it has also means

00:23:12,940 --> 00:23:18,580
that you cannot rely on anything which

00:23:16,000 --> 00:23:20,380
you suppose to rely on what you did got

00:23:18,580 --> 00:23:21,970
provided in the past from operating

00:23:20,380 --> 00:23:24,130
system you have to do everything

00:23:21,970 --> 00:23:25,960
yourself so if you want to write to a

00:23:24,130 --> 00:23:27,760
screen then you have to make sure that

00:23:25,960 --> 00:23:29,770
you have all the drivers to do so if you

00:23:27,760 --> 00:23:32,679
want to store something then you need to

00:23:29,770 --> 00:23:34,300
take care about storage block storage

00:23:32,679 --> 00:23:35,980
file systems and things like that

00:23:34,300 --> 00:23:38,590
because there is no no colonel there

00:23:35,980 --> 00:23:41,620
which which does a little bit luckily

00:23:38,590 --> 00:23:43,270
the project itself does provide quite a

00:23:41,620 --> 00:23:45,040
few kernel functions or two additional

00:23:43,270 --> 00:23:47,380
kernel functions the so-called libraries

00:23:45,040 --> 00:23:52,480
which you can then easily hook in into

00:23:47,380 --> 00:23:55,480
your application vrf mirage OS has

00:23:52,480 --> 00:23:59,230
chosen object camel as a language for

00:23:55,480 --> 00:24:02,050
for several reasons one of the ideas was

00:23:59,230 --> 00:24:04,510
ok we don't do the harder management

00:24:02,050 --> 00:24:06,340
like we did it in the past maybe we can

00:24:04,510 --> 00:24:09,460
check out a different language which

00:24:06,340 --> 00:24:11,980
fits better our purposes and and they

00:24:09,460 --> 00:24:14,230
have worked with object camel in the

00:24:11,980 --> 00:24:17,830
past also because this is part of the of

00:24:14,230 --> 00:24:19,390
the cloud infrastructure at xn it does

00:24:17,830 --> 00:24:21,280
provides a nice features regarding

00:24:19,390 --> 00:24:24,730
memory management and also checking

00:24:21,280 --> 00:24:27,220
armed security stuff it's supposed to

00:24:24,730 --> 00:24:29,380
create a very fast assembler code so

00:24:27,220 --> 00:24:31,330
they were quite a few reasons to choose

00:24:29,380 --> 00:24:33,429
this particular language but it also

00:24:31,330 --> 00:24:35,080
means that you look out or fence out a

00:24:33,429 --> 00:24:37,900
few people who are never used it before

00:24:35,080 --> 00:24:40,000
or who will find it very cumbersome to

00:24:37,900 --> 00:24:43,320
switch from C C++ Java to this

00:24:40,000 --> 00:24:45,420
particular language yeah they've already

00:24:43,320 --> 00:24:47,340
while use of space doesn't really make

00:24:45,420 --> 00:24:49,200
sense the concept concept is not there

00:24:47,340 --> 00:24:50,640
and actually as I said you combine

00:24:49,200 --> 00:24:53,070
everything together what you actually

00:24:50,640 --> 00:24:54,570
booed at the end is your application the

00:24:53,070 --> 00:24:56,250
application is to Colonel and the

00:24:54,570 --> 00:24:58,590
colonel is your application there is no

00:24:56,250 --> 00:25:00,450
no user space it's just the kernel which

00:24:58,590 --> 00:25:03,420
does provide the application you can

00:25:00,450 --> 00:25:05,010
imagine this like you boot directly into

00:25:03,420 --> 00:25:09,630
a web server which does which does

00:25:05,010 --> 00:25:11,610
everything which makes it already clear

00:25:09,630 --> 00:25:13,860
that if you want to run your application

00:25:11,610 --> 00:25:15,660
on top of it you have to do a lot of

00:25:13,860 --> 00:25:17,400
stuff you really have to sit down and

00:25:15,660 --> 00:25:19,800
think about ok what does may actually

00:25:17,400 --> 00:25:21,660
what does my applications supposed to do

00:25:19,800 --> 00:25:23,610
ready to delight on things the colonel

00:25:21,660 --> 00:25:25,980
normally would provide or the system

00:25:23,610 --> 00:25:27,870
libraries would provide one of those

00:25:25,980 --> 00:25:29,670
things I really do need are mandatory

00:25:27,870 --> 00:25:32,310
one of the things are nice to have and I

00:25:29,670 --> 00:25:34,350
made them April evade them because it's

00:25:32,310 --> 00:25:37,110
too hard to implement them in the first

00:25:34,350 --> 00:25:39,210
place then you start and create your

00:25:37,110 --> 00:25:41,100
application ideally you choose object

00:25:39,210 --> 00:25:42,690
camera because any of all the framework

00:25:41,100 --> 00:25:44,580
they are from from from the project so

00:25:42,690 --> 00:25:46,890
you actually you code your Colonel if

00:25:44,580 --> 00:25:50,070
you wish to and then you integrate the

00:25:46,890 --> 00:25:52,440
colonel India India enemy Russia as a

00:25:50,070 --> 00:25:55,950
framework so this is how hello world

00:25:52,440 --> 00:25:59,340
would look like in an emulator s so here

00:25:55,950 --> 00:26:01,230
we have our little object camel program

00:25:59,340 --> 00:26:03,840
which just prints out something to the

00:26:01,230 --> 00:26:05,430
tutor to the screen there is little

00:26:03,840 --> 00:26:07,380
interaction layer here where the main

00:26:05,430 --> 00:26:09,690
function is really directed to external

00:26:07,380 --> 00:26:11,730
module called console and this is how it

00:26:09,690 --> 00:26:14,370
works with the interaction new mirage of

00:26:11,730 --> 00:26:16,410
s because the mirages tools then have to

00:26:14,370 --> 00:26:18,570
take this code and make something

00:26:16,410 --> 00:26:20,660
bootable out of it which is in

00:26:18,570 --> 00:26:24,060
hypervisor could a quick boot and

00:26:20,660 --> 00:26:26,070
integration is then done is done here if

00:26:24,060 --> 00:26:28,140
the second file you actually put those

00:26:26,070 --> 00:26:30,150
those things together and then you use

00:26:28,140 --> 00:26:31,980
the Mirage and some make commands first

00:26:30,150 --> 00:26:34,950
generate make files and then generate

00:26:31,980 --> 00:26:37,530
the binary and for convenience reasons

00:26:34,950 --> 00:26:39,810
you're not only getting a Zen Colonel at

00:26:37,530 --> 00:26:42,360
the end you also get a sin guest

00:26:39,810 --> 00:26:44,820
description file so you can put both

00:26:42,360 --> 00:26:47,040
things together put it in your index and

00:26:44,820 --> 00:26:48,690
environment boot it up and then what

00:26:47,040 --> 00:26:53,490
will happen simply that it prints out

00:26:48,690 --> 00:26:56,520
hello rose to see 2015 in in bed case so

00:26:53,490 --> 00:26:57,090
looks already quite quite complex arm as

00:26:56,520 --> 00:26:58,710
men

00:26:57,090 --> 00:27:00,690
earlier since you have to take care of

00:26:58,710 --> 00:27:03,630
everything yourself what was normally in

00:27:00,690 --> 00:27:04,860
kernel and before you don't have to

00:27:03,630 --> 00:27:07,620
reinvent the wheel for each and

00:27:04,860 --> 00:27:09,330
everything quite a few so-called colonel

00:27:07,620 --> 00:27:11,670
libraries are available more than 50

00:27:09,330 --> 00:27:14,490
some core libraries dealing with frets

00:27:11,670 --> 00:27:16,800
and some spilling of storage network

00:27:14,490 --> 00:27:20,730
layer but also in higher level dealing

00:27:16,800 --> 00:27:22,020
with our CSS XML or JSON and you can

00:27:20,730 --> 00:27:23,760
integrate them so you don't have to

00:27:22,020 --> 00:27:28,500
reinvent the wheel there if you use

00:27:23,760 --> 00:27:30,480
object object camera yeah and since this

00:27:28,500 --> 00:27:33,390
is quite exotic I also did some research

00:27:30,480 --> 00:27:35,280
via me rush of as was used and they did

00:27:33,390 --> 00:27:37,050
some benchmarks also those are the use

00:27:35,280 --> 00:27:38,970
cases where it actually did really

00:27:37,050 --> 00:27:40,560
easily outperform traditional web

00:27:38,970 --> 00:27:43,860
servers running on the Linux with a

00:27:40,560 --> 00:27:47,330
traditional stack our dns and also some

00:27:43,860 --> 00:27:49,800
some open open flow control controllers

00:27:47,330 --> 00:27:52,260
we have picked free but they are not the

00:27:49,800 --> 00:27:54,330
only ones a lot of other candidates or

00:27:52,260 --> 00:27:56,460
open source cloud OS is available as

00:27:54,330 --> 00:27:58,290
well there's curious which is sometimes

00:27:56,460 --> 00:28:00,320
delivered as part of OpenStack

00:27:58,290 --> 00:28:04,110
distribution has some commonalities with

00:28:00,320 --> 00:28:06,720
with Korres then there's the just enough

00:28:04,110 --> 00:28:08,730
operating system family which basically

00:28:06,720 --> 00:28:11,310
is a stripped-down version of enterprise

00:28:08,730 --> 00:28:14,250
and the price system then with docker

00:28:11,310 --> 00:28:16,560
hype we have those host distributions

00:28:14,250 --> 00:28:18,300
like the atomic snapper and recently

00:28:16,560 --> 00:28:20,700
Vienna and now install so they want to

00:28:18,300 --> 00:28:22,920
come out with some host distribution

00:28:20,700 --> 00:28:24,510
called photon yesterday that was to talk

00:28:22,920 --> 00:28:26,970
about me sauce which is one of the

00:28:24,510 --> 00:28:29,400
foundation prix for the data center

00:28:26,970 --> 00:28:32,340
operating system where you combine mrs.

00:28:29,400 --> 00:28:36,890
Cronos and marathon to also cover a

00:28:32,340 --> 00:28:40,920
build a new totally new operating system

00:28:36,890 --> 00:28:43,170
family and also other ones who wants to

00:28:40,920 --> 00:28:45,810
merge curl more with the hypervisor

00:28:43,170 --> 00:28:47,880
again stripping down and reducing the

00:28:45,810 --> 00:28:51,150
overhead which a normal operating system

00:28:47,880 --> 00:28:52,890
would would bring with it good i

00:28:51,150 --> 00:28:55,640
mentioned early some of the consequences

00:28:52,890 --> 00:28:57,960
or did kind of you to the consequences

00:28:55,640 --> 00:29:01,800
regarding application management or

00:28:57,960 --> 00:29:03,930
application our development just looking

00:29:01,800 --> 00:29:05,880
at what have presented so far is a lot

00:29:03,930 --> 00:29:07,740
of stuff and it's unclear damn okay

00:29:05,880 --> 00:29:09,810
which way should we go i didn't point to

00:29:07,740 --> 00:29:10,600
to anything it looks like they're

00:29:09,810 --> 00:29:12,940
multiple paths

00:29:10,600 --> 00:29:14,530
available and now you have to find out

00:29:12,940 --> 00:29:16,240
which is the right one which one is not

00:29:14,530 --> 00:29:20,020
a dead-end street which one has has a

00:29:16,240 --> 00:29:22,059
future my advice here is okay technology

00:29:20,020 --> 00:29:24,429
is technology it's a vehicle it's

00:29:22,059 --> 00:29:26,020
enabler for your business so step back

00:29:24,429 --> 00:29:28,120
and think about okay what is your

00:29:26,020 --> 00:29:30,070
business actually what's the business of

00:29:28,120 --> 00:29:32,530
your customer what are your customer

00:29:30,070 --> 00:29:34,720
needs what they want to have which new

00:29:32,530 --> 00:29:36,190
customers you want to gain so look on

00:29:34,720 --> 00:29:38,950
the business side of the things and then

00:29:36,190 --> 00:29:41,260
decide is it's worth to go that way

00:29:38,950 --> 00:29:42,970
because it's faster from technology

00:29:41,260 --> 00:29:46,409
point of view but may be slower

00:29:42,970 --> 00:29:49,330
performance wise or or a different way

00:29:46,409 --> 00:29:51,549
yes on first fourth of Korra less since

00:29:49,330 --> 00:29:53,860
it has the most commonalities with

00:29:51,549 --> 00:29:55,809
traditional Linux distributions you can

00:29:53,860 --> 00:29:57,880
actually use it like a traditional red

00:29:55,809 --> 00:30:01,299
hat enterprise linux or Susie Enterprise

00:29:57,880 --> 00:30:02,950
Linux or oil slick where and this is

00:30:01,299 --> 00:30:04,630
actually true for a technically as well

00:30:02,950 --> 00:30:07,059
for the non technical side you will not

00:30:04,630 --> 00:30:10,210
use all the nice features it has but you

00:30:07,059 --> 00:30:12,669
can do is move my creation from a rated

00:30:10,210 --> 00:30:13,960
to a true core as you just have to check

00:30:12,669 --> 00:30:16,780
since it's kind of a different

00:30:13,960 --> 00:30:18,549
distribution do I have all the libraries

00:30:16,780 --> 00:30:21,580
and the binaries in place I need for my

00:30:18,549 --> 00:30:23,559
application or all the app API is there

00:30:21,580 --> 00:30:27,760
and if this is the case then off we go

00:30:23,559 --> 00:30:29,530
you can easily do so but is that you

00:30:27,760 --> 00:30:32,020
would miss that the nice features call

00:30:29,530 --> 00:30:33,669
as adds to the to the picture here so if

00:30:32,020 --> 00:30:36,340
you want to use those then you have to

00:30:33,669 --> 00:30:38,770
rethink some some of your stuff security

00:30:36,340 --> 00:30:40,750
and users as mentioned before the excess

00:30:38,770 --> 00:30:43,840
to chorus and the management is

00:30:40,750 --> 00:30:45,429
different you also have to rethink how

00:30:43,840 --> 00:30:47,190
your package application how you do your

00:30:45,429 --> 00:30:49,179
roll out how you do the rollback

00:30:47,190 --> 00:30:50,740
containers was was mentioned before

00:30:49,179 --> 00:30:53,530
maybe want to package it and use

00:30:50,740 --> 00:30:55,210
container technology or on top peg it if

00:30:53,530 --> 00:30:57,460
you have used package management in the

00:30:55,210 --> 00:30:59,320
past it would be really awful to

00:30:57,460 --> 00:31:01,320
implement this on top on the system

00:30:59,320 --> 00:31:05,409
which does steph any package management

00:31:01,320 --> 00:31:07,419
and then of course data store I

00:31:05,409 --> 00:31:09,850
mentioned HD before maybe you want to

00:31:07,419 --> 00:31:11,770
make use of this it's already there it's

00:31:09,850 --> 00:31:13,870
available part of the US so why not use

00:31:11,770 --> 00:31:16,179
it and it's much easier than then also

00:31:13,870 --> 00:31:17,980
to spread out information to all the

00:31:16,179 --> 00:31:20,260
other instances which should use it and

00:31:17,980 --> 00:31:23,640
you can access HD all also form from

00:31:20,260 --> 00:31:23,640
outside our Korres

00:31:23,820 --> 00:31:27,900
dimension the second point the framework

00:31:25,350 --> 00:31:30,000
around containers was mentioning system

00:31:27,900 --> 00:31:32,010
please so you may want to rethink how

00:31:30,000 --> 00:31:34,830
your application is deployed packaged

00:31:32,010 --> 00:31:37,110
started stopped and managed upgraded and

00:31:34,830 --> 00:31:39,150
downtown created and also maybe how the

00:31:37,110 --> 00:31:40,730
instances get known to each other maybe

00:31:39,150 --> 00:31:43,890
you have something in place already to

00:31:40,730 --> 00:31:46,140
to connect to registry to me to say I'm

00:31:43,890 --> 00:31:47,880
here and I'm gone I'm here I'm gone

00:31:46,140 --> 00:31:50,070
maybe you want to change this to use

00:31:47,880 --> 00:31:54,210
what's already shipped with live chorus

00:31:50,070 --> 00:31:56,040
and using HD and fleet there so a little

00:31:54,210 --> 00:31:58,020
bit of thinking to be done and you can

00:31:56,040 --> 00:32:01,020
you don't have to implement everything

00:31:58,020 --> 00:32:02,370
at once you can just say okay I go for

00:32:01,020 --> 00:32:05,040
for this part he will use traditional

00:32:02,370 --> 00:32:06,840
way he views a new way of Korres so it's

00:32:05,040 --> 00:32:08,490
kind of a smooth transition and the

00:32:06,840 --> 00:32:09,990
easiest one if you're coming from a

00:32:08,490 --> 00:32:14,370
traditional data stand the foundational

00:32:09,990 --> 00:32:17,130
linux on the OC and revisit this already

00:32:14,370 --> 00:32:18,510
more adaption is is needed to the

00:32:17,130 --> 00:32:22,170
additional approach doesn't work

00:32:18,510 --> 00:32:25,140
especially if your application is not in

00:32:22,170 --> 00:32:26,910
the format which always we expect for

00:32:25,140 --> 00:32:29,490
sure DD package management this is

00:32:26,910 --> 00:32:31,800
totally totally different here however

00:32:29,490 --> 00:32:33,600
since this is really closer than we are

00:32:31,800 --> 00:32:35,190
so as to our traditional Linux system

00:32:33,600 --> 00:32:37,050
there's a high potential that you can

00:32:35,190 --> 00:32:38,880
reuse the code you have if you're half

00:32:37,050 --> 00:32:40,710
your application written in C and you

00:32:38,880 --> 00:32:42,590
just have to trick some compiler and

00:32:40,710 --> 00:32:45,600
linker options to make it to a

00:32:42,590 --> 00:32:47,670
relocatable shared object then probably

00:32:45,600 --> 00:32:51,870
you are done you have to keep in mind

00:32:47,670 --> 00:32:53,670
that this is a a different setup since

00:32:51,870 --> 00:32:55,530
it doesn't have a use of space but the D

00:32:53,670 --> 00:32:58,350
start might be might be not that

00:32:55,530 --> 00:33:00,420
complicated or to embrace all the

00:32:58,350 --> 00:33:02,610
features of our sphere keep in mind what

00:33:00,420 --> 00:33:04,440
are the differences are so single

00:33:02,610 --> 00:33:06,750
application per instance so you manage

00:33:04,440 --> 00:33:08,340
the application on instance level it's

00:33:06,750 --> 00:33:10,410
not when you roll out up a new

00:33:08,340 --> 00:33:12,240
application it's not you put something

00:33:10,410 --> 00:33:14,790
on top of running instance actually it's

00:33:12,240 --> 00:33:17,820
really destroy and recreate or destroy

00:33:14,790 --> 00:33:19,770
and redeploy make sure that your

00:33:17,820 --> 00:33:22,350
generated in the right format it

00:33:19,770 --> 00:33:24,090
actually does work with with osv are

00:33:22,350 --> 00:33:25,950
keep in mind you running kernel space

00:33:24,090 --> 00:33:28,440
which gives you a lot of power you have

00:33:25,950 --> 00:33:31,110
direct access to memory after I access

00:33:28,440 --> 00:33:32,370
our tour to the physical heart when you

00:33:31,110 --> 00:33:34,950
can do a lot of things much more

00:33:32,370 --> 00:33:37,380
performant then you have to do context

00:33:34,950 --> 00:33:40,290
switches between Portland and userland

00:33:37,380 --> 00:33:42,270
but also means our great responsibility

00:33:40,290 --> 00:33:43,920
because you can easily mess up the

00:33:42,270 --> 00:33:47,520
entire system because you are working in

00:33:43,920 --> 00:33:49,740
kernel space I haven't seen any data for

00:33:47,520 --> 00:33:51,360
long running applications on all three

00:33:49,740 --> 00:33:53,610
so to start with I would start with

00:33:51,360 --> 00:33:56,490
those once a fifth so that which have a

00:33:53,610 --> 00:33:58,920
short lifetime or at least a medium a

00:33:56,490 --> 00:34:01,890
medium on and again since there's no

00:33:58,920 --> 00:34:03,960
easy access to data inside always be

00:34:01,890 --> 00:34:05,430
instance you really have to rethink how

00:34:03,960 --> 00:34:08,070
you manage the data which your

00:34:05,430 --> 00:34:09,840
application needs how you if you need it

00:34:08,070 --> 00:34:11,370
outside or if you needed somewhere else

00:34:09,840 --> 00:34:13,550
then you potentially have to implement

00:34:11,370 --> 00:34:15,870
something that it stored somewhere else

00:34:13,550 --> 00:34:19,770
believe was potentially stored locally

00:34:15,870 --> 00:34:23,070
in them in the past and the biggest

00:34:19,770 --> 00:34:26,070
changes you have to adapt and impress on

00:34:23,070 --> 00:34:27,450
the on the Mirage suicide are we have

00:34:26,070 --> 00:34:29,100
seen this before so none of the

00:34:27,450 --> 00:34:31,740
traditional approaches would work here

00:34:29,100 --> 00:34:33,750
and even that's potentially no chance to

00:34:31,740 --> 00:34:36,300
reuse code what you have written in the

00:34:33,750 --> 00:34:38,610
past unless for whatever reasons you

00:34:36,300 --> 00:34:41,550
have chosen object camel in the past for

00:34:38,610 --> 00:34:43,679
whatever reason so looking at what my

00:34:41,550 --> 00:34:45,570
address provides are there's almost

00:34:43,679 --> 00:34:48,530
nothing left if you're coming from a

00:34:45,570 --> 00:34:51,450
traditional Linux our environment

00:34:48,530 --> 00:34:53,070
however if you want to go that path then

00:34:51,450 --> 00:34:55,590
things you have to think about this

00:34:53,070 --> 00:34:57,240
really okay review as I said before what

00:34:55,590 --> 00:34:59,070
do I expect from the kernel or what

00:34:57,240 --> 00:35:00,960
would I expect from operating system for

00:34:59,070 --> 00:35:02,580
my applications because those are the

00:35:00,960 --> 00:35:05,910
things you have to implement late on

00:35:02,580 --> 00:35:09,150
yourself review your coding language

00:35:05,910 --> 00:35:11,130
there's no mandatory needs to go for

00:35:09,150 --> 00:35:13,320
object camel you can do it and see as

00:35:11,130 --> 00:35:14,880
well oh and other languages but it does

00:35:13,320 --> 00:35:17,190
mean are you cannot leverage the

00:35:14,880 --> 00:35:18,840
ecosystem which is already available so

00:35:17,190 --> 00:35:22,350
all the curl the functions you have to

00:35:18,840 --> 00:35:23,880
kind of redo your yourself you can do

00:35:22,350 --> 00:35:25,620
some tests with the so-called UNIX

00:35:23,880 --> 00:35:29,490
target so with that one it would not

00:35:25,620 --> 00:35:31,530
create xn are colonel it would create a

00:35:29,490 --> 00:35:34,260
binary which you can run in normal linux

00:35:31,530 --> 00:35:36,750
user lens which could help you to for

00:35:34,260 --> 00:35:38,700
making the changes and tests if it if

00:35:36,750 --> 00:35:40,680
your code works and channel before you

00:35:38,700 --> 00:35:43,650
go further down the path to run it as

00:35:40,680 --> 00:35:45,330
accent colonel yeah and keep in mind the

00:35:43,650 --> 00:35:46,770
application is to Colonel the colonel is

00:35:45,330 --> 00:35:48,660
the instance and this is what you

00:35:46,770 --> 00:35:50,100
actually do you boot your instance and

00:35:48,660 --> 00:35:50,880
that's it and if you try to down the

00:35:50,100 --> 00:35:53,849
application is

00:35:50,880 --> 00:35:56,549
shut down and there's no such thing like

00:35:53,849 --> 00:35:58,109
like local storage here at all so here

00:35:56,549 --> 00:36:00,539
for sure you have to make sure that if

00:35:58,109 --> 00:36:06,480
you need to store data somewhere then

00:36:00,539 --> 00:36:08,519
it's outside ed instance okay this was a

00:36:06,480 --> 00:36:11,160
lot a lot of information also a lot of

00:36:08,519 --> 00:36:13,380
different ideas are presented and again

00:36:11,160 --> 00:36:16,019
which ways the right one I also would

00:36:13,380 --> 00:36:18,269
need a crystal ball at the moment as of

00:36:16,019 --> 00:36:20,279
today especially if I coming from

00:36:18,269 --> 00:36:23,099
digital environment aware you have to do

00:36:20,279 --> 00:36:25,019
little steps are the best way to go as

00:36:23,099 --> 00:36:27,660
we live with Korra as you have a rich

00:36:25,019 --> 00:36:29,309
ecosystem there there's a good community

00:36:27,660 --> 00:36:31,529
there as a commercial enterprise

00:36:29,309 --> 00:36:33,059
background there and a lots of things

00:36:31,529 --> 00:36:34,829
sitting on top of that phone and for

00:36:33,059 --> 00:36:36,960
that one actually can choose step by

00:36:34,829 --> 00:36:38,970
step and praise to the new things and

00:36:36,960 --> 00:36:42,930
getting used to new ideas how to run a

00:36:38,970 --> 00:36:48,000
linux or a cloud operating system at a

00:36:42,930 --> 00:36:50,190
massive massive scale if you are really

00:36:48,000 --> 00:36:51,750
want to be a pioneer then you go on the

00:36:50,190 --> 00:36:53,640
other side of the spectrum and try to

00:36:51,750 --> 00:36:56,009
our convert your application to be

00:36:53,640 --> 00:36:58,529
morado as right here one way or the

00:36:56,009 --> 00:37:01,079
other there's a lot of work to do to

00:36:58,529 --> 00:37:03,839
fully embrace and to fully use the rich

00:37:01,079 --> 00:37:06,029
feature set of the new operating systems

00:37:03,839 --> 00:37:09,150
not only in the technical side also on

00:37:06,029 --> 00:37:11,430
your mindset right mindset side and this

00:37:09,150 --> 00:37:13,859
is my experience that technology you can

00:37:11,430 --> 00:37:17,339
master you can read documentation you

00:37:13,859 --> 00:37:19,079
can test things you can train people by

00:37:17,339 --> 00:37:20,849
changing the mindset of the people of

00:37:19,079 --> 00:37:23,039
getting them away from a server based

00:37:20,849 --> 00:37:26,339
thinking to a service based thinking

00:37:23,039 --> 00:37:27,779
from 12 to many is not so easy and

00:37:26,339 --> 00:37:29,339
especially if they have worked in a

00:37:27,779 --> 00:37:33,569
particular environment for for quite

00:37:29,339 --> 00:37:36,809
some time keep in mind are your business

00:37:33,569 --> 00:37:38,759
your customers business are the markets

00:37:36,809 --> 00:37:41,220
you want to get into the markets you

00:37:38,759 --> 00:37:43,410
want to are maintained and things like

00:37:41,220 --> 00:37:47,640
that so technology as I said before is

00:37:43,410 --> 00:37:49,680
just technology so the key takeaways of

00:37:47,640 --> 00:37:53,309
this presentation is armed there's a

00:37:49,680 --> 00:37:56,160
focus shift on operating system is seen

00:37:53,309 --> 00:37:57,750
in the cloud context are for sure there

00:37:56,160 --> 00:37:59,549
will be a reduction of for this called

00:37:57,750 --> 00:38:01,740
user lending in these days smaller

00:37:59,549 --> 00:38:03,720
smaller smaller because what matters is

00:38:01,740 --> 00:38:04,660
the application and application has to

00:38:03,720 --> 00:38:07,059
be equipped

00:38:04,660 --> 00:38:09,609
that phone but it's not the only one I

00:38:07,059 --> 00:38:12,099
think all three and especially Mirage UF

00:38:09,609 --> 00:38:14,140
OS have shown that there's also of

00:38:12,099 --> 00:38:15,849
people thinking about obviously also cut

00:38:14,140 --> 00:38:18,039
down to the kernel level maybe we can

00:38:15,849 --> 00:38:20,049
get rid of it at all and put everything

00:38:18,039 --> 00:38:22,089
which the colonel did in the past to the

00:38:20,049 --> 00:38:24,280
hypervisor because it does already many

00:38:22,089 --> 00:38:27,549
of the things anyway and all the rest we

00:38:24,280 --> 00:38:28,569
can simply put to the application as of

00:38:27,549 --> 00:38:30,760
today there are multiple options

00:38:28,569 --> 00:38:33,849
available multi will erase you you can

00:38:30,760 --> 00:38:36,190
go depending how how fancy or how

00:38:33,849 --> 00:38:39,490
bleeding edge you want to you want to be

00:38:36,190 --> 00:38:42,130
but by all means our it's really time to

00:38:39,490 --> 00:38:43,990
open your mind throw away some of the

00:38:42,130 --> 00:38:46,660
things to you used to do in the past

00:38:43,990 --> 00:38:49,900
sometimes even to go back okay but did

00:38:46,660 --> 00:38:51,640
we start how much over it have you added

00:38:49,900 --> 00:38:53,440
over the years and just get rid of that

00:38:51,640 --> 00:38:55,780
one removed the vase start on the blank

00:38:53,440 --> 00:38:58,750
sheet of paper and then maybe things

00:38:55,780 --> 00:39:01,630
become much much better and with that

00:38:58,750 --> 00:39:03,880
one I think I'm at the end of my of my

00:39:01,630 --> 00:39:07,260
talk I've does plenty of documentation

00:39:03,880 --> 00:39:10,089
available and I've just listed the

00:39:07,260 --> 00:39:11,859
entrance or the main web pages of the

00:39:10,089 --> 00:39:13,839
three candidates I've presented here

00:39:11,859 --> 00:39:16,119
from there you can then dig down two

00:39:13,839 --> 00:39:20,140
blocks to to vicky's are two linked

00:39:16,119 --> 00:39:22,869
pages and so and so forth and I think a

00:39:20,140 --> 00:39:24,970
lot for the attention the second day and

00:39:22,869 --> 00:39:26,920
also on the late late afternoon more or

00:39:24,970 --> 00:39:40,950
less and I'm at the end of my target

00:39:26,920 --> 00:39:40,950
would be open for questions yes sir

00:39:45,599 --> 00:39:49,079
right yeah

00:39:57,810 --> 00:40:16,359
under process so let me first try to

00:40:12,070 --> 00:40:19,660
repeat the question so the question was

00:40:16,359 --> 00:40:21,280
are the de Madrid mirage a mirage OS

00:40:19,660 --> 00:40:24,609
approach is that you run the application

00:40:21,280 --> 00:40:26,800
as as a best virtual machine and the

00:40:24,609 --> 00:40:29,170
question is are do you trade the

00:40:26,800 --> 00:40:30,280
overhead you had on the OS before with

00:40:29,170 --> 00:40:34,240
the overhead running on the under

00:40:30,280 --> 00:40:38,170
hypervisor level right here yeah I hate

00:40:34,240 --> 00:40:40,780
the answer it depends I think Miasha has

00:40:38,170 --> 00:40:42,970
would scale quite well or what the

00:40:40,780 --> 00:40:45,010
overhead their juice over at you do me

00:40:42,970 --> 00:40:46,690
raja as is quite well on things like

00:40:45,010 --> 00:40:48,460
like what I've mentioned did the web

00:40:46,690 --> 00:40:51,640
server small web servers for static

00:40:48,460 --> 00:40:54,339
websites are and DNS for full-blown

00:40:51,640 --> 00:40:56,140
applications I would tend to agree with

00:40:54,339 --> 00:41:00,400
you that you tried just one thing for

00:40:56,140 --> 00:41:03,849
for the other it depends also I think

00:41:00,400 --> 00:41:05,830
how you run your cloud if it's really

00:41:03,849 --> 00:41:07,960
something external that they rely on

00:41:05,830 --> 00:41:09,369
saying so it works long sent only and at

00:41:07,960 --> 00:41:11,589
the moment you have a lot of public

00:41:09,369 --> 00:41:14,650
cloud providers using sent if this which

00:41:11,589 --> 00:41:16,690
is what ever reason to kvm and/or BML

00:41:14,650 --> 00:41:20,140
other technologies you're doomed unless

00:41:16,690 --> 00:41:21,520
you have that arm what I do like with me

00:41:20,140 --> 00:41:24,070
rephrase i wouldn't go that way meet me

00:41:21,520 --> 00:41:27,369
personally for me it's 2 2 x 2 extreme

00:41:24,070 --> 00:41:29,710
but i do like the the idea of rethinking

00:41:27,369 --> 00:41:31,839
or do we actually need the colonel to

00:41:29,710 --> 00:41:34,030
really need this thing or do we need is

00:41:31,839 --> 00:41:36,640
this really big beast and looking at

00:41:34,030 --> 00:41:39,609
linux it runs on on big servers it runs

00:41:36,640 --> 00:41:42,040
on small device it runs on mobile

00:41:39,609 --> 00:41:43,780
devices it's one big thing which is

00:41:42,040 --> 00:41:45,670
opposed to run everywhere and maybe we

00:41:43,780 --> 00:41:50,609
should consolidate and think okay this

00:41:45,670 --> 00:41:53,619
is maybe our obvious itís a bare-metal

00:41:50,609 --> 00:41:55,119
kernel and this is something our which

00:41:53,619 --> 00:41:56,349
is supposed formed by the device and

00:41:55,119 --> 00:41:58,599
this goes a little bit in in that

00:41:56,349 --> 00:42:00,490
direction that's kind of answer your

00:41:58,599 --> 00:42:19,960
question or yeah

00:42:00,490 --> 00:42:26,500
I don't know I don't know yeah everybody

00:42:19,960 --> 00:42:28,090
else everybody do okay then again yeah

00:42:26,500 --> 00:42:29,860
thanks a lot for the attention enjoy the

00:42:28,090 --> 00:42:31,270
last session and if you stay longer the

00:42:29,860 --> 00:42:35,790
puppet camp or if you stay longer

00:42:31,270 --> 00:42:35,790

YouTube URL: https://www.youtube.com/watch?v=9C7KMs6deFk


