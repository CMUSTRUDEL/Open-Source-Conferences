Title: OSDC 2015 | Jan Piet Mens MQTT for your Data Center and for the loT
Publication date: 2015-04-30
Playlist: OSDC 2015 | Open Source Data Center Conference
Description: 
	MQTT is a PUB/SUB protocol for the Internet of Things, but it's also valuable for systems administration and for your data center. We'll take a close look at MQTT and its infrastructure, and we'll show you how to use a microcontroller to monitor your server-room's temperature with it, publishing and monitoring it via MQTT and Icinga/Nagios. Furthermore, we'll also show you some real-world integrations of MQTT and Unix/Linux system utilities.
Captions: 
	00:00:06,790 --> 00:00:14,200
okay welcome back everybody

00:00:10,510 --> 00:00:17,340
lunch break and welcome our next speaker

00:00:14,200 --> 00:00:20,290
amp it means can you hear me properly

00:00:17,340 --> 00:00:23,890
yep hello good afternoon my name is JP

00:00:20,290 --> 00:00:25,810
or yang Beach or whatever and I'm here

00:00:23,890 --> 00:00:28,630
to tell you a little bit about a

00:00:25,810 --> 00:00:31,840
protocol called MQTT MQTT by the way is

00:00:28,630 --> 00:00:34,210
not is no longer in a view an

00:00:31,840 --> 00:00:38,100
abbreviation used to be but it is no

00:00:34,210 --> 00:00:41,590
longer it just stands for for that MQTT

00:00:38,100 --> 00:00:43,930
so what is MQTT MQTT is a standard it's

00:00:41,590 --> 00:00:46,600
been standardized at Oasis it's protocol

00:00:43,930 --> 00:00:49,180
the pub sub publish-subscribe messaging

00:00:46,600 --> 00:00:50,710
transport and we'll be looking a lot at

00:00:49,180 --> 00:00:54,280
that publish-subscribe an amount which

00:00:50,710 --> 00:00:56,559
was originally designed for unreliable

00:00:54,280 --> 00:00:58,780
networks for example mobile networks if

00:00:56,559 --> 00:01:00,610
you think of any mobile device that you

00:00:58,780 --> 00:01:02,199
might have with you when I show you in a

00:01:00,610 --> 00:01:04,210
moment an example they use actually uses

00:01:02,199 --> 00:01:06,250
MQTT these things are terribly

00:01:04,210 --> 00:01:07,810
unreliable because you you run into

00:01:06,250 --> 00:01:10,720
Wi-Fi you go into the next wife are you

00:01:07,810 --> 00:01:13,479
going to 3G you going to 0 G into 4G etc

00:01:10,720 --> 00:01:16,920
know you're offline etc so MQTT is very

00:01:13,479 --> 00:01:19,510
good for that by the way this this

00:01:16,920 --> 00:01:22,210
bottle of whatever it is white chocolate

00:01:19,510 --> 00:01:24,430
sauce the picture is a little bit

00:01:22,210 --> 00:01:27,880
surprising maybe but I put that there

00:01:24,430 --> 00:01:34,630
because it's called 1883 and 1883 is the

00:01:27,880 --> 00:01:37,390
designated tcp port for MQTT so MQTT is

00:01:34,630 --> 00:01:42,280
a transport protocol it can carry binary

00:01:37,390 --> 00:01:44,710
payloads of up to 256 megabytes when I

00:01:42,280 --> 00:01:46,930
say up to 256 megabytes I mean that of

00:01:44,710 --> 00:01:49,120
course but if you consider that MQTT was

00:01:46,930 --> 00:01:50,640
really originally designed for the

00:01:49,120 --> 00:01:52,600
Internet of Things little

00:01:50,640 --> 00:01:54,790
microcontrollers then of course it's

00:01:52,600 --> 00:01:56,409
idiotic to think that these little micro

00:01:54,790 --> 00:01:58,720
controllers that might have whatever a

00:01:56,409 --> 00:02:00,820
kilobyte megabyte or no 8 kilobytes of

00:01:58,720 --> 00:02:03,760
flash will be able to to actually

00:02:00,820 --> 00:02:08,259
process 256 megs but in theory it would

00:02:03,760 --> 00:02:09,659
be possible MQTT is very fast and as I

00:02:08,259 --> 00:02:12,580
think I already said it's lightweight

00:02:09,659 --> 00:02:16,360
ideally suited to low bandwidth high

00:02:12,580 --> 00:02:18,250
latency networks and it is lightweight

00:02:16,360 --> 00:02:22,170
by that i mean the protocol itself is

00:02:18,250 --> 00:02:24,430
very lightweight for example compared to

00:02:22,170 --> 00:02:26,230
http which is rather verbose

00:02:24,430 --> 00:02:28,180
protocol where you have a lot of a lot

00:02:26,230 --> 00:02:32,079
of additional payload in the headers

00:02:28,180 --> 00:02:36,340
won't status hydras etc MQTT can be

00:02:32,079 --> 00:02:40,989
extremely interesting there MQTT has

00:02:36,340 --> 00:02:42,969
built-in security namely TLS the artist

00:02:40,989 --> 00:02:44,200
formerly known as SSL but please don't

00:02:42,969 --> 00:02:47,139
call it that it doesn't mean call that

00:02:44,200 --> 00:02:50,530
for ten years it's called TLS MQTT

00:02:47,139 --> 00:02:53,739
supports authentication supports eccles

00:02:50,530 --> 00:02:56,099
access control lists some or certain

00:02:53,739 --> 00:02:58,480
implementations support TLS psk

00:02:56,099 --> 00:03:00,609
appreciate key which is very interesting

00:02:58,480 --> 00:03:04,750
sort of low-level authentication and of

00:03:00,609 --> 00:03:07,450
course at any moment you can encrypt the

00:03:04,750 --> 00:03:10,120
payload that you transport over MQTT as

00:03:07,450 --> 00:03:13,419
long as the publisher the PERS the

00:03:10,120 --> 00:03:15,730
sending side and the subscriber the

00:03:13,419 --> 00:03:21,010
receiving side agree on this encryption

00:03:15,730 --> 00:03:23,709
obviously MQTT knows three so-called

00:03:21,010 --> 00:03:27,069
qualities of service these qualities of

00:03:23,709 --> 00:03:30,220
servers define how a particular message

00:03:27,069 --> 00:03:32,620
is transported from sender from

00:03:30,220 --> 00:03:37,060
publisher to subscribe we have quality

00:03:32,620 --> 00:03:39,489
of service 0 at most once let's sort of

00:03:37,060 --> 00:03:42,699
a little bit but a little bit like you

00:03:39,489 --> 00:03:43,989
like UDP a UDP Datagram you fire off and

00:03:42,699 --> 00:03:46,720
if it gets her it's good it might get

00:03:43,989 --> 00:03:49,239
there twice or three times and MQTT runs

00:03:46,720 --> 00:03:52,959
over TCP but still there's no guarantee

00:03:49,239 --> 00:03:54,609
that a Q is zero message will actually

00:03:52,959 --> 00:03:58,120
arrive it could also arrive more than

00:03:54,609 --> 00:03:59,979
once or not at all for many things more

00:03:58,120 --> 00:04:02,709
than sufficient for example if you have

00:03:59,979 --> 00:04:04,569
a little sensor that is collecting data

00:04:02,709 --> 00:04:06,370
once every second or once every two

00:04:04,569 --> 00:04:09,489
seconds or 10 seconds you might very

00:04:06,370 --> 00:04:14,379
well be a fine with that sensor not

00:04:09,489 --> 00:04:17,139
delivering a particular measurement at a

00:04:14,379 --> 00:04:19,000
certain time if on the other hand as out

00:04:17,139 --> 00:04:20,829
showing you using MQTT perhaps or

00:04:19,000 --> 00:04:23,169
monitoring the house and so on then that

00:04:20,829 --> 00:04:25,389
will be a little bit more a little bit

00:04:23,169 --> 00:04:29,080
dangerous we have qos one which is

00:04:25,389 --> 00:04:31,479
assured delivery that means the protocol

00:04:29,080 --> 00:04:34,360
itself guarantees that the message will

00:04:31,479 --> 00:04:37,449
arrive at least once careful at least

00:04:34,360 --> 00:04:40,659
once it could arrive two or three times

00:04:37,449 --> 00:04:43,300
and qos to is once only has of course

00:04:40,659 --> 00:04:45,550
quite a bit of overhead we have four

00:04:43,300 --> 00:04:47,830
transactions going back and forth but

00:04:45,550 --> 00:04:52,719
the protocol guarantees that this

00:04:47,830 --> 00:04:54,639
message will arrive exactly once by the

00:04:52,719 --> 00:04:58,059
way in between if you have questions

00:04:54,639 --> 00:05:00,029
just fire off so what else we have we

00:04:58,059 --> 00:05:03,939
have keep-alive timers in other words

00:05:00,029 --> 00:05:08,439
the connection between clients and the

00:05:03,939 --> 00:05:10,689
central server or our monitored we have

00:05:08,439 --> 00:05:14,229
a very very cool feature called last

00:05:10,689 --> 00:05:17,379
will and testament or LWT last will and

00:05:14,229 --> 00:05:19,389
testament means the following any client

00:05:17,379 --> 00:05:22,379
that connects an MQTT server which

00:05:19,389 --> 00:05:28,020
officially is called the broker can say

00:05:22,379 --> 00:05:31,149
if i die would you please on my behalf

00:05:28,020 --> 00:05:32,529
publish this information to all other

00:05:31,149 --> 00:05:34,389
clients that are listening at the moment

00:05:32,529 --> 00:05:37,749
now we'll be demonstrating that

00:05:34,389 --> 00:05:39,879
gentleman so upon initial Connection we

00:05:37,749 --> 00:05:41,680
are able to in a client set the last

00:05:39,879 --> 00:05:44,949
will and testament which will be

00:05:41,680 --> 00:05:47,139
published by the broker in the case that

00:05:44,949 --> 00:05:51,069
we are disconnected switch off

00:05:47,139 --> 00:05:52,509
disconnected network wise whatever which

00:05:51,069 --> 00:05:55,539
is absolutely brilliant for things like

00:05:52,509 --> 00:05:57,909
monitoring we have decoupled senders and

00:05:55,539 --> 00:06:00,459
receivers here on the left if you see

00:05:57,909 --> 00:06:02,649
the laser dot we have a publisher and

00:06:00,459 --> 00:06:05,349
this publisher is publishing messages

00:06:02,649 --> 00:06:08,229
which are currently being read by three

00:06:05,349 --> 00:06:10,689
subscribers and at any point in time an

00:06:08,229 --> 00:06:12,370
additional or more subscribers can come

00:06:10,689 --> 00:06:15,939
in and pick up the stata do something

00:06:12,370 --> 00:06:19,560
with it or go away yeah so a decoupling

00:06:15,939 --> 00:06:22,240
between senders and recipients however

00:06:19,560 --> 00:06:25,990
typically if a subscriber is not there

00:06:22,240 --> 00:06:27,909
it will typically will see a case where

00:06:25,990 --> 00:06:30,159
there is not whether that does not

00:06:27,909 --> 00:06:34,180
happen will typically not receive

00:06:30,159 --> 00:06:37,300
published messages the exception is if a

00:06:34,180 --> 00:06:39,759
client has a specific ID and the

00:06:37,300 --> 00:06:43,149
publisher publishes and q is greater 0

00:06:39,759 --> 00:06:44,740
then those messages will appear and we

00:06:43,149 --> 00:06:48,789
have something called durable or

00:06:44,740 --> 00:06:51,280
retained messages and that is a client

00:06:48,789 --> 00:06:54,310
that is publishing the payload on

00:06:51,280 --> 00:06:57,790
particular address will be able to say

00:06:54,310 --> 00:07:01,330
please dear broker dear server keep this

00:06:57,790 --> 00:07:05,740
store this message as the last known

00:07:01,330 --> 00:07:07,930
good so any publisher can publish a

00:07:05,740 --> 00:07:10,630
retained message and that is stored and

00:07:07,930 --> 00:07:12,820
when a subscriber subsequently comes

00:07:10,630 --> 00:07:14,290
online it will immediately get when it

00:07:12,820 --> 00:07:15,790
subscribes that particular kind of

00:07:14,290 --> 00:07:22,960
message it will immediately get that

00:07:15,790 --> 00:07:26,500
last one retained message do not please

00:07:22,960 --> 00:07:28,980
confuse this with permanent storage in a

00:07:26,500 --> 00:07:32,020
kind of cue like you would see with amqp

00:07:28,980 --> 00:07:37,300
this is just the last message that is

00:07:32,020 --> 00:07:40,840
retained on a topic basis pops up

00:07:37,300 --> 00:07:43,060
messages in MQTT are addressed by topic

00:07:40,840 --> 00:07:48,220
names and a topic name is a hierarchical

00:07:43,060 --> 00:07:51,340
construct which uses utf-8 and also

00:07:48,220 --> 00:07:54,610
supports wildcards a topic can have a

00:07:51,340 --> 00:07:56,740
length I forgotten I think the new

00:07:54,610 --> 00:07:58,330
standard defines 64 kilobyte which

00:07:56,740 --> 00:08:01,270
should be more than enough for most

00:07:58,330 --> 00:08:04,419
purposes anyway and these are examples

00:08:01,270 --> 00:08:06,940
of a topic so we have here temperatures

00:08:04,419 --> 00:08:09,340
large rooms large living that could be a

00:08:06,940 --> 00:08:11,169
topic as well as we could have in

00:08:09,340 --> 00:08:15,340
another sensor publishing a temperature

00:08:11,169 --> 00:08:18,430
/ bedroom / whatever and topics come and

00:08:15,340 --> 00:08:20,500
go topics MQTT topics do not need to be

00:08:18,430 --> 00:08:23,560
configured they don't need to be defined

00:08:20,500 --> 00:08:26,260
a broker which is configured to allow

00:08:23,560 --> 00:08:28,870
that will accept any message on any

00:08:26,260 --> 00:08:30,820
topic and a subscriber who is available

00:08:28,870 --> 00:08:33,190
who is listening to that particular

00:08:30,820 --> 00:08:37,450
topic will then get that topic access

00:08:33,190 --> 00:08:40,360
control permitting wildcards of which

00:08:37,450 --> 00:08:44,110
they are to the hash symbol and a plus

00:08:40,360 --> 00:08:47,500
symbol the house specifies that level

00:08:44,110 --> 00:08:51,850
and any below whereas the plus symbol

00:08:47,500 --> 00:08:54,760
stands for exactly one level so this

00:08:51,850 --> 00:08:58,180
topic a subscriber to devices / harsh

00:08:54,760 --> 00:09:02,980
would get any messages which are

00:08:58,180 --> 00:09:05,429
published two devices / help me phone /

00:09:02,980 --> 00:09:09,549
samsung devices /

00:09:05,429 --> 00:09:14,170
computer / my laptop yeah in any depth

00:09:09,549 --> 00:09:16,839
of of hierarchy where as a subscriber

00:09:14,170 --> 00:09:19,329
who is published to a pic upon who

00:09:16,839 --> 00:09:22,359
subscribes to finance plus euro rate

00:09:19,329 --> 00:09:24,879
would get financed google euro rate

00:09:22,359 --> 00:09:29,999
finance yahoo your rate finance net ways

00:09:24,879 --> 00:09:32,199
euro rate etc okay so 11 live alone and

00:09:29,999 --> 00:09:37,179
wild cards are only allowed during

00:09:32,199 --> 00:09:44,129
subscription not during publication was

00:09:37,179 --> 00:09:44,129
there a question there somewhere cheers

00:09:49,350 --> 00:09:58,329
this is how I see MQTT name Katie t we

00:09:56,319 --> 00:10:02,949
have a cauldron we have a big bowling

00:09:58,329 --> 00:10:05,319
pot of soup and messages are published

00:10:02,949 --> 00:10:06,759
into this quadrant any amount of

00:10:05,319 --> 00:10:09,759
messages on any amount of different

00:10:06,759 --> 00:10:13,439
topics and subscribers can just go in

00:10:09,759 --> 00:10:16,660
and fish out what they want for example

00:10:13,439 --> 00:10:18,040
suppose you have again I'm talking a

00:10:16,660 --> 00:10:19,149
little bit about sensors at the month

00:10:18,040 --> 00:10:22,449
because I'm going to show you a sensor

00:10:19,149 --> 00:10:24,610
and suppose you have a temperature

00:10:22,449 --> 00:10:26,350
sensor that you've set up or built a

00:10:24,610 --> 00:10:29,679
configured or both or whatever and it

00:10:26,350 --> 00:10:34,889
publishes to topical temperature cells

00:10:29,679 --> 00:10:34,889
use the temperature in celcius here

00:10:45,260 --> 00:10:50,600
I'm not that beautiful um so you have a

00:10:49,040 --> 00:10:52,880
sensor publishing at temperature /

00:10:50,600 --> 00:10:55,370
Celsius now you have a customer or you

00:10:52,880 --> 00:10:57,680
have an application that don't know why

00:10:55,370 --> 00:10:59,930
but once Fahrenheit you could very

00:10:57,680 --> 00:11:02,180
easily write a small client application

00:10:59,930 --> 00:11:05,090
which grabs into this quadrant pics our

00:11:02,180 --> 00:11:07,460
temperatures has / Celsius I need a

00:11:05,090 --> 00:11:09,050
different example and converts that to

00:11:07,460 --> 00:11:10,880
Fahrenheit and publishes back in again

00:11:09,050 --> 00:11:14,870
under the topic temperature / Fahrenheit

00:11:10,880 --> 00:11:17,390
okay so any client any application who

00:11:14,870 --> 00:11:19,760
is actually allowed to ACL lives can

00:11:17,390 --> 00:11:26,140
grab into the spot take things out put

00:11:19,760 --> 00:11:32,060
things back in the server component of

00:11:26,140 --> 00:11:33,320
MQTT is called a broker and they're

00:11:32,060 --> 00:11:35,480
different kinds of brokers show you two

00:11:33,320 --> 00:11:38,120
in a moment and this is so this is the

00:11:35,480 --> 00:11:40,010
server part of MQTT and the way the way

00:11:38,120 --> 00:11:41,300
we see it or the way I see it is you

00:11:40,010 --> 00:11:43,610
have a broker somewhere in your in your

00:11:41,300 --> 00:11:45,740
network and you have like an MQTT

00:11:43,610 --> 00:11:48,140
message bus and clients subscribers

00:11:45,740 --> 00:11:50,300
publishers whatever can access this bus

00:11:48,140 --> 00:11:54,020
and connect to each other via this

00:11:50,300 --> 00:11:56,480
broker now there are there is there are

00:11:54,020 --> 00:11:58,490
two brokers that are quite popular first

00:11:56,480 --> 00:12:02,540
of all is a project called mosquito

00:11:58,490 --> 00:12:06,830
careful double teen the fly thing has

00:12:02,540 --> 00:12:09,380
just won t this is em gee that's not

00:12:06,830 --> 00:12:10,910
Scott mosquito was divine was designed

00:12:09,380 --> 00:12:14,180
and it's maintained by a man called

00:12:10,910 --> 00:12:19,490
Roger light it's written in C very fast

00:12:14,180 --> 00:12:22,580
quite lightweight supports Echols has

00:12:19,490 --> 00:12:23,840
plugin for access control plug in

00:12:22,580 --> 00:12:27,110
infrastructure for access control

00:12:23,840 --> 00:12:29,810
supports TLS supports TLS psk preciate

00:12:27,110 --> 00:12:33,770
Keys has bridging support i'll explain

00:12:29,810 --> 00:12:35,420
in a moment that means does logging by a

00:12:33,770 --> 00:12:39,970
dollar sisal i'll also show you what

00:12:35,420 --> 00:12:43,760
that means and roger was kind enough to

00:12:39,970 --> 00:12:45,980
accept my pestering and since version 1

00:12:43,760 --> 00:12:48,370
dot 4 which is has been out now for a

00:12:45,980 --> 00:12:52,310
few weeks supports web sockets and i'll

00:12:48,370 --> 00:12:54,860
demonstrate what that actually means so

00:12:52,310 --> 00:12:56,630
much quito very very nice if you want to

00:12:54,860 --> 00:12:58,940
install mosquito and you are on debian

00:12:56,630 --> 00:13:01,790
or don't take

00:12:58,940 --> 00:13:04,100
mosquito from the original Debian what's

00:13:01,790 --> 00:13:07,070
called apt repository you'll get version

00:13:04,100 --> 00:13:11,920
0 15 or something don't forgot sex on

00:13:07,070 --> 00:13:15,200
user roger has on mesquite org has

00:13:11,920 --> 00:13:16,940
repositories for centos for Debian etc

00:13:15,200 --> 00:13:19,040
with the newest versions please please

00:13:16,940 --> 00:13:23,000
use that you'll be really very unhappy

00:13:19,040 --> 00:13:26,320
otherwise another interesting project is

00:13:23,000 --> 00:13:30,230
high mq careful this is not open source

00:13:26,320 --> 00:13:33,770
but if I recall correctly it's free to

00:13:30,230 --> 00:13:36,410
use for so in so many concurrent clients

00:13:33,770 --> 00:13:39,760
it's written in Java has a very

00:13:36,410 --> 00:13:42,530
interesting plug-in architecture has the

00:13:39,760 --> 00:13:44,000
feature which is called clustering which

00:13:42,530 --> 00:13:47,090
mosquito unfortunately it doesn't have

00:13:44,000 --> 00:13:48,680
supports modules what's the first broker

00:13:47,090 --> 00:13:53,630
at least to my knowledge that had

00:13:48,680 --> 00:13:56,030
WebSocket support yeah very very nice

00:13:53,630 --> 00:14:00,170
written by the by our friends over at

00:13:56,030 --> 00:14:05,900
hive mq who really know their know their

00:14:00,170 --> 00:14:07,700
stuff so i mentioned the doll assist

00:14:05,900 --> 00:14:09,620
topic and alice's topic is not really

00:14:07,700 --> 00:14:11,060
standardized but most brokers use it or

00:14:09,620 --> 00:14:14,050
at least most workers i know use it and

00:14:11,060 --> 00:14:18,020
this is just as an example it's a topic

00:14:14,050 --> 00:14:21,260
in MQTT topic so if you're allowed to

00:14:18,020 --> 00:14:23,030
you can subscribe to this topic and the

00:14:21,260 --> 00:14:26,840
broker publishes here automatically

00:14:23,030 --> 00:14:30,430
publishes statistics about itself so for

00:14:26,840 --> 00:14:33,320
example when i took this I had 1771

00:14:30,430 --> 00:14:36,530
clients apparently because the topic

00:14:33,320 --> 00:14:38,960
assists broker clients total okay since

00:14:36,530 --> 00:14:42,530
broker messages received 3.6 million

00:14:38,960 --> 00:14:45,050
since broker bytes sent 38 million sis

00:14:42,530 --> 00:14:47,000
broker version is mosquito version 1.4

00:14:45,050 --> 00:14:48,980
etc so you get statistics which are

00:14:47,000 --> 00:14:51,589
updated which is of course interesting

00:14:48,980 --> 00:14:55,750
for monitoring I've if I recall

00:14:51,589 --> 00:14:55,750
correctly also has the Cystic

00:15:00,060 --> 00:15:06,370
brokers can be bridged together abridged

00:15:03,880 --> 00:15:10,180
means sort of loosely coupled or not so

00:15:06,370 --> 00:15:12,250
loosely coupled and so supposing we have

00:15:10,180 --> 00:15:14,320
an MQTT broker in our first data center

00:15:12,250 --> 00:15:17,020
we have a publisher we have a client now

00:15:14,320 --> 00:15:18,910
which is connected to this broker and we

00:15:17,020 --> 00:15:22,570
have here in the second data center we

00:15:18,910 --> 00:15:25,990
have a second MQTT broker we can bridge

00:15:22,570 --> 00:15:27,700
these two and we can decide which is

00:15:25,990 --> 00:15:31,840
important from a firewall perspective we

00:15:27,700 --> 00:15:34,750
can decide does a connect to be or does

00:15:31,840 --> 00:15:38,410
be connect to a from what side does a

00:15:34,750 --> 00:15:41,620
TCP connection come from and we can

00:15:38,410 --> 00:15:43,780
define particular topic branches which

00:15:41,620 --> 00:15:46,300
are bridged which are sort of copied

00:15:43,780 --> 00:15:49,240
over from one broker to another broker

00:15:46,300 --> 00:15:53,080
so using an architecture like bridging

00:15:49,240 --> 00:15:55,540
here we can actually cause a publisher

00:15:53,080 --> 00:15:58,390
in data center one to be talking to a

00:15:55,540 --> 00:16:01,590
subscriber and data center to okay over

00:15:58,390 --> 00:16:04,990
to brokers or more than to a broker's

00:16:01,590 --> 00:16:06,640
this works over any amount gets

00:16:04,990 --> 00:16:09,520
confusing after a bit but it's works

00:16:06,640 --> 00:16:12,970
over any amount of bridges very very

00:16:09,520 --> 00:16:19,300
interesting also for failover reasons

00:16:12,970 --> 00:16:21,460
etc so let's look shortly at the client

00:16:19,300 --> 00:16:23,410
utilities these are utilities that come

00:16:21,460 --> 00:16:26,520
with the mosquito package we have

00:16:23,410 --> 00:16:30,460
mosquito sub and we have mosquito pub

00:16:26,520 --> 00:16:33,220
subscribe and publish which both have

00:16:30,460 --> 00:16:36,820
any number of options the I think

00:16:33,220 --> 00:16:43,360
important ones I've mentioned here we

00:16:36,820 --> 00:16:44,980
have mosquito sub- T topic ok so that

00:16:43,360 --> 00:16:47,560
runs in one window for example and then

00:16:44,980 --> 00:16:51,640
you have mosquito tub and that gets a

00:16:47,560 --> 00:16:52,690
topic specifier and with- a payload I'll

00:16:51,640 --> 00:16:56,440
show you what it looks like an amount

00:16:52,690 --> 00:17:01,200
and the minus our switch that will tell

00:16:56,440 --> 00:17:01,200
the broker to please retain this message

00:17:01,470 --> 00:17:08,500
so languages any number of languages I

00:17:05,920 --> 00:17:11,250
think a mosquito bite sorry and qtt

00:17:08,500 --> 00:17:15,890
bindings for all languages

00:17:11,250 --> 00:17:22,949
sharp java python of course lua see

00:17:15,890 --> 00:17:24,150
anything a small example Justin Python

00:17:22,949 --> 00:17:28,380
because that's my favorite scripting

00:17:24,150 --> 00:17:31,850
language we import a module and then we

00:17:28,380 --> 00:17:35,760
publish MQTT don't single topic name

00:17:31,850 --> 00:17:37,920
payload and if we had a sub running

00:17:35,760 --> 00:17:42,300
simultaneously connected to localhost

00:17:37,920 --> 00:17:44,640
which is reading topic conf / hash we

00:17:42,300 --> 00:17:46,890
are publishing to con flash hello we

00:17:44,640 --> 00:17:49,440
will see the message come in and thanks

00:17:46,890 --> 00:17:51,750
to the minus V switch we see here first

00:17:49,440 --> 00:17:53,880
blank separated the topic on which

00:17:51,750 --> 00:17:57,930
something is published and then the

00:17:53,880 --> 00:18:04,560
payload okay I think it's that's easy

00:17:57,930 --> 00:18:07,290
enough the subscription in an API is

00:18:04,560 --> 00:18:11,010
slightly more complex because of the a

00:18:07,290 --> 00:18:13,020
synchronicity so we set up callbacks

00:18:11,010 --> 00:18:15,330
connect callback for example where we

00:18:13,020 --> 00:18:17,070
then do the actual subscribe and we set

00:18:15,330 --> 00:18:20,250
up a message call back which will be

00:18:17,070 --> 00:18:23,190
fired whenever MQTT gets a message

00:18:20,250 --> 00:18:26,460
whenever this client gets a message will

00:18:23,190 --> 00:18:28,710
be fired and we then connect to our

00:18:26,460 --> 00:18:32,910
broker here on localhost sport 1883

00:18:28,710 --> 00:18:37,100
specify a keep a lifetime and there we

00:18:32,910 --> 00:18:39,330
have an asynchronous sorry a synchronous

00:18:37,100 --> 00:18:42,330
client which is subscribing to a

00:18:39,330 --> 00:18:46,080
particular topic that's the topic conf /

00:18:42,330 --> 00:18:50,190
+ and if we run this client I beg your

00:18:46,080 --> 00:18:52,980
pardon if we run this client hook it's

00:18:50,190 --> 00:18:56,100
running down you and we publish to come

00:18:52,980 --> 00:18:58,350
/ thirsty you recall I go back amount

00:18:56,100 --> 00:19:00,920
we're reading were subscribed to con

00:18:58,350 --> 00:19:04,170
flash plus a 1 level on the conference

00:19:00,920 --> 00:19:08,400
we publish to conf thirsty beer time

00:19:04,170 --> 00:19:12,810
then this client gets on that topic that

00:19:08,400 --> 00:19:16,950
payload con / catering coffee is ready

00:19:12,810 --> 00:19:18,210
as payload then we get on that topic the

00:19:16,950 --> 00:19:21,960
appropriate paleo and we can of course

00:19:18,210 --> 00:19:24,060
react to this modified remember said

00:19:21,960 --> 00:19:24,630
earlier take Celsius temperature

00:19:24,060 --> 00:19:31,560
modified

00:19:24,630 --> 00:19:37,170
fahrenheit published back that's it now

00:19:31,560 --> 00:19:41,210
MQTT is used in a large number of really

00:19:37,170 --> 00:19:43,230
practical applications alerting metering

00:19:41,210 --> 00:19:45,900
electricity metering for example there a

00:19:43,230 --> 00:19:47,790
number of implementation if lusco is one

00:19:45,900 --> 00:19:53,420
there's a company called remake electric

00:19:47,790 --> 00:19:56,910
in sweden who make professional sort of

00:19:53,420 --> 00:20:00,170
high-grade electricity metering systems

00:19:56,910 --> 00:20:02,730
which use MQTT to publish their data

00:20:00,170 --> 00:20:06,900
logging systems show you in a moment

00:20:02,730 --> 00:20:09,000
grey log location awareness this for

00:20:06,900 --> 00:20:11,160
example is our very own tracks

00:20:09,000 --> 00:20:13,530
application and it shows last time I'll

00:20:11,160 --> 00:20:16,730
I went to Brighton it shows these red

00:20:13,530 --> 00:20:20,660
pins and these red bins were dropped by

00:20:16,730 --> 00:20:25,710
MQTT pubs publishers which were fired of

00:20:20,660 --> 00:20:28,650
via mobile device automation a lot

00:20:25,710 --> 00:20:31,590
lighting and controlling host monitoring

00:20:28,650 --> 00:20:33,410
show you one example in a moment so

00:20:31,590 --> 00:20:38,190
there they are quite a number of

00:20:33,410 --> 00:20:43,530
practical solutions IBM is has already

00:20:38,190 --> 00:20:46,350
developed a connected car prototype we

00:20:43,530 --> 00:20:48,810
have a vehicle that sends out

00:20:46,350 --> 00:20:51,690
information for example accident sends a

00:20:48,810 --> 00:20:56,970
route via MQTT instead of using HTTP and

00:20:51,690 --> 00:20:59,580
cone so one practical application is a

00:20:56,970 --> 00:21:03,270
program called MQTT warren which we

00:20:59,580 --> 00:21:04,950
wrote because we realize well first of

00:21:03,270 --> 00:21:06,570
all we realize that everybody the first

00:21:04,950 --> 00:21:08,910
thing people do is when they learn how

00:21:06,570 --> 00:21:12,210
to use and qtt is they want to use it

00:21:08,910 --> 00:21:15,300
for alerting and so host is down alert

00:21:12,210 --> 00:21:17,670
oh let me quickly create an MQTT to

00:21:15,300 --> 00:21:21,480
twitter program or let me quickly create

00:21:17,670 --> 00:21:24,960
an MQTT to icinga or an MQTT to mail etc

00:21:21,480 --> 00:21:27,240
and we we saw that and I realized that

00:21:24,960 --> 00:21:29,370
because I've done at least 10 of those

00:21:27,240 --> 00:21:31,800
myself so without her how about we do

00:21:29,370 --> 00:21:33,780
this properly and out came MQTT warned

00:21:31,800 --> 00:21:36,540
now the reason I'm showing this is

00:21:33,780 --> 00:21:38,070
because I'm going to demonstrate it in a

00:21:36,540 --> 00:21:40,740
slightly different context

00:21:38,070 --> 00:21:42,750
so MQTT Warren is a client written in

00:21:40,740 --> 00:21:45,720
Python which connects in MQTT broken

00:21:42,750 --> 00:21:49,080
subscribes to any number of topics and

00:21:45,720 --> 00:21:51,870
you configure for each topic for each

00:21:49,080 --> 00:21:55,020
topic branch how you want to handle the

00:21:51,870 --> 00:21:57,540
payloads should jason be decoded is a

00:21:55,020 --> 00:22:00,240
plain text etc etc etc and these

00:21:57,540 --> 00:22:02,010
payloads you you you hand over to

00:22:00,240 --> 00:22:04,680
plugins we have I think at the moment 40

00:22:02,010 --> 00:22:07,380
plugins for mail and XBMC and Twitter

00:22:04,680 --> 00:22:10,710
and push over and troll and what's the

00:22:07,380 --> 00:22:12,570
Android n ma I think it's called notify

00:22:10,710 --> 00:22:15,600
my android and all these kinds of

00:22:12,570 --> 00:22:17,070
services we have a golf plug-in I just

00:22:15,600 --> 00:22:18,630
saw bent we have a golf plug in that

00:22:17,070 --> 00:22:21,870
sense the gray log although that's

00:22:18,630 --> 00:22:26,460
absolute in the meantime we have an NSC

00:22:21,870 --> 00:22:27,450
a and nsca and csa and NSC a plug-in

00:22:26,460 --> 00:22:29,850
Thank You which I'll show you in a

00:22:27,450 --> 00:22:32,190
moment with it talks to I think our or

00:22:29,850 --> 00:22:35,460
the other thing whatever it's called em

00:22:32,190 --> 00:22:38,010
and we can store in files you can

00:22:35,460 --> 00:22:39,900
republish by omggg etc so this is sort

00:22:38,010 --> 00:22:42,570
of a general purpose swiss army knife

00:22:39,900 --> 00:22:44,520
kind of republish ER it subscribe to

00:22:42,570 --> 00:22:46,020
something can modify payloads can

00:22:44,520 --> 00:22:51,720
transform them and pushes them out

00:22:46,020 --> 00:22:53,930
elsewhere and i thought well how am i

00:22:51,720 --> 00:22:57,630
going to show you this and sorry i

00:22:53,930 --> 00:23:00,150
designed a temperature sensor and i'm

00:22:57,630 --> 00:23:02,190
thinking in there are many data centers

00:23:00,150 --> 00:23:04,080
many areas where you want to sense

00:23:02,190 --> 00:23:05,280
temperature temperature goes up careful

00:23:04,080 --> 00:23:07,590
warning temperature goes down too much

00:23:05,280 --> 00:23:09,420
careful warning so design the

00:23:07,590 --> 00:23:11,250
temperature sensor and for that i chosen

00:23:09,420 --> 00:23:14,430
arduino now what you see there on the

00:23:11,250 --> 00:23:15,900
screen is lying here ok arranged

00:23:14,430 --> 00:23:20,610
slightly differently but the same

00:23:15,900 --> 00:23:21,840
components and I thought if temperature

00:23:20,610 --> 00:23:23,430
sensor how on earth i'm going to

00:23:21,840 --> 00:23:24,900
demonstrate that temperature rises in

00:23:23,430 --> 00:23:26,820
temperature goes down I don't want to

00:23:24,900 --> 00:23:29,730
sort of breathe on to it or light up a

00:23:26,820 --> 00:23:33,240
cigarette lighter so instead of the

00:23:29,730 --> 00:23:35,730
actual sensing being temperature I use a

00:23:33,240 --> 00:23:39,560
potentiometer and with that I can very

00:23:35,730 --> 00:23:42,900
quickly up and down the the temperature

00:23:39,560 --> 00:23:44,580
so we have here this Arduino clone which

00:23:42,900 --> 00:23:47,850
is connected via ethernet or the true

00:23:44,580 --> 00:23:49,260
true there excuse me that thing on the

00:23:47,850 --> 00:23:51,810
top is just power supply because I

00:23:49,260 --> 00:23:58,580
frizzled out the power supply here and

00:23:51,810 --> 00:23:58,580
we have here a buzzer and an LED okay so

00:24:04,580 --> 00:24:10,260
what will now do can you can you read

00:24:07,350 --> 00:24:17,700
that up there what will now do is

00:24:10,260 --> 00:24:22,140
subscribe 22 MQTT and i'm subscribed to

00:24:17,700 --> 00:24:27,440
a topic called clients / arduino / hash

00:24:22,140 --> 00:24:30,090
or asterisk asterisk and as you can see

00:24:27,440 --> 00:24:33,480
something's happening it's I'm getting

00:24:30,090 --> 00:24:36,030
publishers oh I'm sorry that's my laser

00:24:33,480 --> 00:24:39,510
pointer I'm getting publishers can show

00:24:36,030 --> 00:24:41,850
you which start with the topic clients

00:24:39,510 --> 00:24:44,250
i'm going to show you anyway it the

00:24:41,850 --> 00:24:46,890
laser put out escape sequence clients

00:24:44,250 --> 00:24:49,380
arduino IP address of the temperature

00:24:46,890 --> 00:24:51,690
sensor celsius and then comes a certain

00:24:49,380 --> 00:25:01,830
amount a certain temperature in degrees

00:24:51,690 --> 00:25:04,400
ok now let me raise the temperature and

00:25:01,830 --> 00:25:04,400
i will do it quickly

00:25:06,269 --> 00:25:12,959
this is a microcontroller $10 $15

00:25:09,959 --> 00:25:17,089
microcontroller talking MQTT to a

00:25:12,959 --> 00:25:23,419
mosquito broker I am NOT able to flood

00:25:17,089 --> 00:25:26,059
the connection okay right so we have a

00:25:23,419 --> 00:25:29,940
microcontroller which is transmitting

00:25:26,059 --> 00:25:33,379
once every can remember five seconds

00:25:29,940 --> 00:25:35,489
transmitting a temperature measurement

00:25:33,379 --> 00:25:38,729
not only once every five seconds but

00:25:35,489 --> 00:25:42,269
also as soon as the temperature changes

00:25:38,729 --> 00:25:44,369
slightest degree cup we fire off a MQTT

00:25:42,269 --> 00:25:49,320
publish which is received by the broker

00:25:44,369 --> 00:25:54,169
and this publish is transmitted then to

00:25:49,320 --> 00:25:54,169
all listening clients to all subscribers

00:25:58,339 --> 00:26:07,169
one subscriber is this webpage now this

00:26:04,829 --> 00:26:10,619
webpage pardon the design it's not my

00:26:07,169 --> 00:26:16,200
speciality and this webpage has a number

00:26:10,619 --> 00:26:19,440
of things on it first of all it has this

00:26:16,200 --> 00:26:22,919
this this temperature whatever you call

00:26:19,440 --> 00:26:25,589
it then it shows their 12 degrees and

00:26:22,919 --> 00:26:27,479
that seems to correspond to that and it

00:26:25,589 --> 00:26:29,429
has here in IP address that's the IP

00:26:27,479 --> 00:26:32,489
address of this sensor of that little

00:26:29,429 --> 00:26:35,579
hard we know and there's a red something

00:26:32,489 --> 00:26:38,159
here and then what you see here which

00:26:35,579 --> 00:26:44,039
flashes every few seconds that is a

00:26:38,159 --> 00:26:47,009
frame frame were just talking to a help

00:26:44,039 --> 00:26:49,079
me with a formulation with were the with

00:26:47,009 --> 00:26:51,479
what it is which is talking to an icinga

00:26:49,079 --> 00:26:55,229
host which tells me what the

00:26:51,479 --> 00:26:57,509
temperatures ok now the the magical part

00:26:55,229 --> 00:26:59,039
of this web page is a bunch of

00:26:57,509 --> 00:27:02,879
JavaScript which you don't see here

00:26:59,039 --> 00:27:05,009
which is speaking MQTT over web sockets

00:27:02,879 --> 00:27:08,700
oh sorry after green which is speaking

00:27:05,009 --> 00:27:11,459
MQTT over WebSocket so this web page is

00:27:08,700 --> 00:27:16,320
de facto connected to that mosquito

00:27:11,459 --> 00:27:17,549
broker if that is true then if I change

00:27:16,320 --> 00:27:19,849
the temperature something must happen

00:27:17,549 --> 00:27:19,849
here

00:27:22,370 --> 00:27:29,309
right so you see I am also here and look

00:27:27,780 --> 00:27:30,900
at it that thing when we left the dial

00:27:29,309 --> 00:27:32,039
change is the thing on the top change is

00:27:30,900 --> 00:27:34,080
the little wood thing and the middle

00:27:32,039 --> 00:27:38,340
changes i copy pasted everything I could

00:27:34,080 --> 00:27:42,260
find into this page mmm it's cool so I

00:27:38,340 --> 00:27:49,250
change the temperature sensor and yeah

00:27:42,260 --> 00:27:52,740
you laugh okay now this is red thing

00:27:49,250 --> 00:27:54,750
this red button I'm going to click that

00:27:52,740 --> 00:27:58,049
I was going to click with my laser

00:27:54,750 --> 00:28:04,470
pointer but that I'm not able to let me

00:27:58,049 --> 00:28:05,700
click that did you hear it right and you

00:28:04,470 --> 00:28:12,240
didn't see it because it's lying on the

00:28:05,700 --> 00:28:15,049
desk can you see that yeah anyway it

00:28:12,240 --> 00:28:17,250
lights up okay believe me please now

00:28:15,049 --> 00:28:19,559
what's the magical thing about this the

00:28:17,250 --> 00:28:22,409
metrical thing about this is this web

00:28:19,559 --> 00:28:26,669
page which is actually subscribed to an

00:28:22,409 --> 00:28:28,799
MQTT topic yeah apparently is also able

00:28:26,669 --> 00:28:31,440
to speak to that controller because that

00:28:28,799 --> 00:28:33,270
buzzer it's not the bell on my mac that

00:28:31,440 --> 00:28:36,720
buzzer is actually physically attached

00:28:33,270 --> 00:28:38,549
to the Arduino furthermore the lead is

00:28:36,720 --> 00:28:41,570
also the LED is also physically attached

00:28:38,549 --> 00:28:50,419
to the Arduino now let me see if I can

00:28:41,570 --> 00:28:50,419
arrange the screens in such a way I

00:28:52,159 --> 00:28:57,670
can't

00:28:54,670 --> 00:28:57,670
No

00:29:06,290 --> 00:29:13,400
now let me show you what happens when I

00:29:09,140 --> 00:29:17,780
press that red thing and I'm going to

00:29:13,400 --> 00:29:20,240
abort this here for a second so I press

00:29:17,780 --> 00:29:23,870
that little red knob on the top and that

00:29:20,240 --> 00:29:27,680
caused an MQTT published over WebSocket

00:29:23,870 --> 00:29:29,750
to the MQTT broker which in turn sent it

00:29:27,680 --> 00:29:32,990
out to the client well to any

00:29:29,750 --> 00:29:35,540
subscribing client and what actually

00:29:32,990 --> 00:29:44,140
happened is I'm a bit afraid of touching

00:29:35,540 --> 00:29:46,600
my lead can you if you look at the first

00:29:44,140 --> 00:29:49,580
publish on the top there you will see

00:29:46,600 --> 00:29:53,210
the I hope you can read it you will see

00:29:49,580 --> 00:29:58,640
that a new published was sent out to

00:29:53,210 --> 00:30:03,410
clients / arduino / LED / command with

00:29:58,640 --> 00:30:06,940
payload one so I'm sending out to

00:30:03,410 --> 00:30:10,670
anybody who's listening please turn on

00:30:06,940 --> 00:30:13,040
lead the microcontroller does that but

00:30:10,670 --> 00:30:16,490
has it actually done that we want

00:30:13,040 --> 00:30:19,160
feedback so what actually happens up

00:30:16,490 --> 00:30:22,250
there is the microcontroller switches on

00:30:19,160 --> 00:30:23,690
the lid and then reports back on a

00:30:22,250 --> 00:30:25,550
different topic otherwise you quickly go

00:30:23,690 --> 00:30:30,160
to loop reports back on a different

00:30:25,550 --> 00:30:34,730
topic lead on the web page on the right

00:30:30,160 --> 00:30:38,720
receives that MQTT published led on yeah

00:30:34,730 --> 00:30:43,610
that one there and changes the color of

00:30:38,720 --> 00:30:49,370
the button okay so we literally have a

00:30:43,610 --> 00:30:56,630
feedback from a microcontroller not cool

00:30:49,370 --> 00:31:00,920
I think school right but I actually want

00:30:56,630 --> 00:31:03,770
to show you something else so we were

00:31:00,920 --> 00:31:06,650
talking about MQTT warned now MQTT

00:31:03,770 --> 00:31:08,570
warned i'm starting it here is also a

00:31:06,650 --> 00:31:09,980
subscriber to this brought to this

00:31:08,570 --> 00:31:12,560
broker and it's listening to the same

00:31:09,980 --> 00:31:14,270
topic and here i'm seeing a log in the

00:31:12,560 --> 00:31:17,090
back there and it's showing me the

00:31:14,270 --> 00:31:22,940
temperature if I up the temperature the

00:31:17,090 --> 00:31:26,560
changes right now let's add to em QT to

00:31:22,940 --> 00:31:26,560
warn let's add an additional plugin

00:31:37,970 --> 00:31:43,070
eight

00:31:40,440 --> 00:31:43,070
00:31:43,629 --> 00:31:52,730
okay it's just a voice plugin right shut

00:31:48,649 --> 00:32:04,639
up hmm now we're going to do the

00:31:52,730 --> 00:32:07,299
following we're going to send MQTT

00:32:04,639 --> 00:32:09,590
Warren is now doing the following it is

00:32:07,299 --> 00:32:12,139
again subscribing to the stop it

00:32:09,590 --> 00:32:14,570
receives the payload and sense the pay

00:32:12,139 --> 00:32:23,000
load off here to the log and second of

00:32:14,570 --> 00:32:25,730
all to icing over the nsca plugin now

00:32:23,000 --> 00:32:27,320
this is a bit slow that's because of NS

00:32:25,730 --> 00:32:29,179
cas anything to do with icing or an

00:32:27,320 --> 00:32:33,230
amputee t so I'm going to quickly up the

00:32:29,179 --> 00:32:36,649
temperature and it'll take a while you

00:32:33,230 --> 00:32:39,049
see here now suddenly it's very slowly

00:32:36,649 --> 00:32:41,659
pushing it forward the reason is this

00:32:39,049 --> 00:32:45,860
communication with NSA via nsca is a bit

00:32:41,659 --> 00:32:47,629
too but we ought to be seeing I hope it

00:32:45,860 --> 00:32:49,490
works we ought to be seeing here on the

00:32:47,629 --> 00:32:50,809
bottom right status information that a

00:32:49,490 --> 00:32:57,190
single showing us that the temperature

00:32:50,809 --> 00:32:57,190
is changing I said we ought to know

00:33:01,510 --> 00:33:04,500
30 mistype

00:33:14,570 --> 00:33:18,429
yeah with auto

00:33:23,990 --> 00:33:29,120
some things that perhaps the I think I

00:33:26,540 --> 00:33:38,830
running on a vm is dead I'm sorry for

00:33:29,120 --> 00:33:38,830
some reason this is not working come on

00:33:44,730 --> 00:33:49,049
21 not to raise the 27 I think I'm

00:33:47,309 --> 00:33:51,320
terribly sorry I think I think we I

00:33:49,049 --> 00:33:53,220
think a thing at the at the other end as

00:33:51,320 --> 00:34:03,350
collapse anyway it doesn't really matter

00:33:53,220 --> 00:34:09,869
um so we have this little title yo but

00:34:03,350 --> 00:34:11,669
we have a client or a number of clients

00:34:09,869 --> 00:34:13,619
actually subscribe to the broker we have

00:34:11,669 --> 00:34:15,960
this as a client was mosquito sub

00:34:13,619 --> 00:34:17,490
conducted as a client we have MQTT one

00:34:15,960 --> 00:34:19,460
connected as a client we have this

00:34:17,490 --> 00:34:22,109
webpage connected as a client and these

00:34:19,460 --> 00:34:26,340
all these clients subscribe to the same

00:34:22,109 --> 00:34:27,750
payloads the same topics and do

00:34:26,340 --> 00:34:30,090
something with the data that they're

00:34:27,750 --> 00:34:32,070
gonna that are getting now I also

00:34:30,090 --> 00:34:34,590
mentioned that there's something called

00:34:32,070 --> 00:34:38,129
last will and testament now what I'm

00:34:34,590 --> 00:34:39,810
going to do is to pull the plug on this

00:34:38,129 --> 00:34:44,340
microcontroller I'm just going to remove

00:34:39,810 --> 00:34:52,290
the the power ok I'm going to hit enter

00:34:44,340 --> 00:34:54,450
here so you see something happening I'm

00:34:52,290 --> 00:34:56,700
sorry about that not use them i signaled

00:34:54,450 --> 00:35:04,580
a model checking amount i'd go into hold

00:34:56,700 --> 00:35:10,440
on plan and suddenly out of the blue

00:35:04,580 --> 00:35:12,690
comes a a public now this publish goes

00:35:10,440 --> 00:35:15,480
to clients arduino and then the IP

00:35:12,690 --> 00:35:16,950
address of this particular arduino now

00:35:15,480 --> 00:35:18,900
the reason this comes out of the blue is

00:35:16,950 --> 00:35:21,690
when the microcontroller when the

00:35:18,900 --> 00:35:24,420
arduino code start it up it said to the

00:35:21,690 --> 00:35:27,150
broker here is my last will and

00:35:24,420 --> 00:35:29,790
testament and this last will and

00:35:27,150 --> 00:35:32,790
testament you please publish on my

00:35:29,790 --> 00:35:35,460
behalf when i die when you don't hear

00:35:32,790 --> 00:35:38,430
from me anymore or any longer in within

00:35:35,460 --> 00:35:41,160
a within our keep alive a time odd

00:35:38,430 --> 00:35:46,080
please publish this information this

00:35:41,160 --> 00:35:48,090
payload on my behalf the payload is 0

00:35:46,080 --> 00:35:50,160
the payload is 0 because that's the

00:35:48,090 --> 00:35:52,890
payload I defined it to be yeah I

00:35:50,160 --> 00:35:55,170
defined that on this branch we have a

00:35:52,890 --> 00:35:57,960
zero or one if the appropriate client is

00:35:55,170 --> 00:36:00,960
on oral or is off

00:35:57,960 --> 00:36:06,300
so let me kill this client here and we

00:36:00,960 --> 00:36:09,330
started now strangely remember the plug

00:36:06,300 --> 00:36:13,310
is still off now strangely I got three

00:36:09,330 --> 00:36:16,260
messages I subscribed as a client to

00:36:13,310 --> 00:36:20,550
clients are really no hash and I've got

00:36:16,260 --> 00:36:23,609
three messages the first message is the

00:36:20,550 --> 00:36:26,880
last will and testament got a zero and

00:36:23,609 --> 00:36:31,890
the second message is Celsius 17 what

00:36:26,880 --> 00:36:33,990
kind of messages could these be they

00:36:31,890 --> 00:36:35,880
were retained they were published in a

00:36:33,990 --> 00:36:38,550
retained form in other words the broker

00:36:35,880 --> 00:36:41,310
was instructed to please keep the last

00:36:38,550 --> 00:36:44,190
value so by doing this we can have

00:36:41,310 --> 00:36:45,869
client for example which queries what is

00:36:44,190 --> 00:36:48,450
the temperature in our data center and

00:36:45,869 --> 00:36:50,210
we get back 17 now this is not one

00:36:48,450 --> 00:36:52,890
hundred percent precise because our

00:36:50,210 --> 00:36:56,099
temperature sensor has just died but it

00:36:52,890 --> 00:36:58,290
is the last known good value okay so

00:36:56,099 --> 00:36:59,430
instead of not getting anything we're

00:36:58,290 --> 00:37:03,210
getting something that we can

00:36:59,430 --> 00:37:06,900
approximate so last 17 okay maybe the

00:37:03,210 --> 00:37:10,950
temperature still okay let us now plug

00:37:06,900 --> 00:37:14,220
in the center again give it a pivot

00:37:10,950 --> 00:37:15,990
power and the first thing it will do why

00:37:14,220 --> 00:37:21,210
doesn't this thing work the first thing

00:37:15,990 --> 00:37:23,880
it will do is to publish on on this same

00:37:21,210 --> 00:37:25,859
topic it removes 20 and publishers who

00:37:23,880 --> 00:37:29,130
retained one so it is now actually

00:37:25,859 --> 00:37:30,599
online and it has simultaneously told

00:37:29,130 --> 00:37:33,000
the broker in the case of my death

00:37:30,599 --> 00:37:39,480
please publish this last will and

00:37:33,000 --> 00:37:41,720
testament on my behalf any questions

00:37:39,480 --> 00:37:41,720
over

00:37:42,520 --> 00:37:52,690
I beg your pardon no there is no no

00:37:51,280 --> 00:37:54,910
protocol component that will tell me

00:37:52,690 --> 00:37:57,190
when something happened if I want to

00:37:54,910 --> 00:38:00,460
know that I would embed that in my

00:37:57,190 --> 00:38:03,010
payload so for example we could publish

00:38:00,460 --> 00:38:04,630
a JSON payload containing the Celsius

00:38:03,010 --> 00:38:07,030
temperature and the time Sam and a

00:38:04,630 --> 00:38:09,760
timestamp yeah but no there is no I

00:38:07,030 --> 00:38:11,560
can't other than by looking at logs I

00:38:09,760 --> 00:38:13,540
can't find out when something was

00:38:11,560 --> 00:38:27,910
published that's not possible you had a

00:38:13,540 --> 00:38:30,550
question it depends on the broker

00:38:27,910 --> 00:38:33,430
mosquito yes supports client of a TLS

00:38:30,550 --> 00:38:41,980
client certificate was a authentication

00:38:33,430 --> 00:38:44,890
oh yes of course because but careful

00:38:41,980 --> 00:38:46,120
once again broker specific i'm the

00:38:44,890 --> 00:38:47,950
broker i'm most familiar with is

00:38:46,120 --> 00:38:49,930
mosquito the open source mosquito broker

00:38:47,950 --> 00:38:52,930
which is also what I'm using here and

00:38:49,930 --> 00:38:54,880
yes there you can you can you can say

00:38:52,930 --> 00:38:57,580
for example you can configure a client

00:38:54,880 --> 00:38:59,890
certificate results and this username or

00:38:57,580 --> 00:39:02,310
in this client name and based on this

00:38:59,890 --> 00:39:06,550
client ID or in this user name please

00:39:02,310 --> 00:39:08,740
use this access control list but careful

00:39:06,550 --> 00:39:11,290
just because mosquito supports it does

00:39:08,740 --> 00:39:16,990
not necessarily mean that your clients

00:39:11,290 --> 00:39:18,730
supported for example the MQTT library

00:39:16,990 --> 00:39:23,380
for arduino which was written by nick

00:39:18,730 --> 00:39:26,400
larry has no support for TLS because on

00:39:23,380 --> 00:39:29,260
on 8k flash whatever how many bit

00:39:26,400 --> 00:39:31,480
microcontroller they're just not cpu

00:39:29,260 --> 00:39:33,850
enough for that yeah but if you took an

00:39:31,480 --> 00:39:35,410
embed for example if you took a beagle

00:39:33,850 --> 00:39:38,110
bone or raspy or whatever then of course

00:39:35,410 --> 00:39:40,210
ever lots of things become possible yeah

00:39:38,110 --> 00:39:44,130
but on a tiny micro controller you

00:39:40,210 --> 00:39:44,130
should not expect support for TLS

00:39:55,980 --> 00:40:04,450
i'm not sure i'm not sure i will check

00:40:01,900 --> 00:40:07,420
later on come to me and i'll check I'm

00:40:04,450 --> 00:40:10,150
not hand % sure it auto yes because lets

00:40:07,420 --> 00:40:13,290
the underlying openssl library I'm not

00:40:10,150 --> 00:40:13,290
on a percent sure I have to check

00:40:21,410 --> 00:40:25,970
so yeah and what I actually wanted to

00:40:23,810 --> 00:40:28,520
also show you you've been seeing it here

00:40:25,970 --> 00:40:31,370
our microcontroller came back up and is

00:40:28,520 --> 00:40:33,530
now publishing temperature okay our

00:40:31,370 --> 00:40:42,740
power was restored to it and it just

00:40:33,530 --> 00:40:44,270
boots up where it was and continues so

00:40:42,740 --> 00:40:47,030
back to the side this what we have just

00:40:44,270 --> 00:40:51,140
sort of as a as a reminder this is what

00:40:47,030 --> 00:40:52,940
we have it irks me and that's why I'm a

00:40:51,140 --> 00:40:54,530
little bit I'm concentrated it irks me

00:40:52,940 --> 00:40:56,450
that that I think our demo didn't work

00:40:54,530 --> 00:41:00,320
because it always works but it's that

00:40:56,450 --> 00:41:01,820
life so this is the old good situation

00:41:00,320 --> 00:41:04,310
we had a temperature and so on and

00:41:01,820 --> 00:41:07,730
remember please this area above here is

00:41:04,310 --> 00:41:10,060
connected via web sockets to the MQTT

00:41:07,730 --> 00:41:12,920
brokers it's literally speaking over

00:41:10,060 --> 00:41:17,510
MQTT it's speaking to a brokerage

00:41:12,920 --> 00:41:21,230
speaking MQTT and this part at the

00:41:17,510 --> 00:41:25,220
bottom is should have been contacted via

00:41:21,230 --> 00:41:27,500
nsca so the way it the way it works is

00:41:25,220 --> 00:41:29,240
we have as I mentioned already we have

00:41:27,500 --> 00:41:33,910
our little micro controller on the left

00:41:29,240 --> 00:41:36,800
which is talking MQTT to our broker this

00:41:33,910 --> 00:41:38,600
web application is also talking impute

00:41:36,800 --> 00:41:42,230
et to the broker / WebSocket connection

00:41:38,600 --> 00:41:45,320
and we had MQTT Warren which is also

00:41:42,230 --> 00:41:48,260
connected by an MQTT subscribe to the

00:41:45,320 --> 00:41:52,310
broker and was receiving payloads which

00:41:48,260 --> 00:41:54,770
it ought to have pushed over to icing or

00:41:52,310 --> 00:41:56,630
nagios it pushed them over to whatever

00:41:54,770 --> 00:41:59,780
name is Victoria who was talking here to

00:41:56,630 --> 00:42:01,790
us and it does also other things too but

00:41:59,780 --> 00:42:05,810
in this particular case my virtual

00:42:01,790 --> 00:42:07,550
machine must attack so in the case of

00:42:05,810 --> 00:42:09,020
not good this is what you should have

00:42:07,550 --> 00:42:13,040
seen there on the kids are not good we

00:42:09,020 --> 00:42:14,600
have critical and then we saw I didn't I

00:42:13,040 --> 00:42:16,220
think I didn't point it out but we saw

00:42:14,600 --> 00:42:19,130
or you should have seen the IP address

00:42:16,220 --> 00:42:21,800
here on the top turn red which is of

00:42:19,130 --> 00:42:24,050
course facilitated by this last will and

00:42:21,800 --> 00:42:26,030
testament that a client publishes and we

00:42:24,050 --> 00:42:28,820
can query that we can subscribe to those

00:42:26,030 --> 00:42:30,590
last will and testament and then react

00:42:28,820 --> 00:42:33,110
you know alert somebody we start

00:42:30,590 --> 00:42:34,630
something we start the service etc this

00:42:33,110 --> 00:42:36,670
is why one of the one

00:42:34,630 --> 00:42:38,859
the main reasons apart from all the

00:42:36,670 --> 00:42:40,029
lightweight business although MQTT one

00:42:38,859 --> 00:42:41,920
of the main reasons why I say it's

00:42:40,029 --> 00:42:43,960
excellent for monitoring because we are

00:42:41,920 --> 00:42:47,140
informed very very quickly that for

00:42:43,960 --> 00:42:51,789
example the machine has died and as a

00:42:47,140 --> 00:42:53,400
result of this critical something I

00:42:51,789 --> 00:42:57,839
can't show you in this environment but

00:42:53,400 --> 00:43:01,960
as a result of this critical a an MQTT

00:42:57,839 --> 00:43:04,420
publish was fired off by a singer or

00:43:01,960 --> 00:43:07,269
would have been fired off by a singer so

00:43:04,420 --> 00:43:09,369
not an email but an MQTT publish which

00:43:07,269 --> 00:43:11,799
is again picked up by for example a

00:43:09,369 --> 00:43:15,250
subscriber like MQTT one and that

00:43:11,799 --> 00:43:16,869
results in push over notification which

00:43:15,250 --> 00:43:19,359
has to be confirmed here this is push

00:43:16,869 --> 00:43:21,220
over and we see critical Adreno

00:43:19,359 --> 00:43:23,440
temperature vaio MQTT so and so for

00:43:21,220 --> 00:43:26,680
critical temperature 31 degrees celsius

00:43:23,440 --> 00:43:31,690
yeah and we could send off by email etc

00:43:26,680 --> 00:43:34,329
etc etc so basically using this MQTT bus

00:43:31,690 --> 00:43:36,220
this MQTT broker we can have different

00:43:34,329 --> 00:43:38,289
clients reacting to something instead of

00:43:36,220 --> 00:43:40,210
configuring an email plugin or twitter

00:43:38,289 --> 00:43:42,339
plugin or whatever notification plugin

00:43:40,210 --> 00:43:44,200
in your monitoring system you would

00:43:42,339 --> 00:43:48,130
configure something a little bit more

00:43:44,200 --> 00:43:49,720
generic like example in MQTT bus push it

00:43:48,130 --> 00:43:51,279
all out and you can have at any time

00:43:49,720 --> 00:43:53,950
different clients listening to that

00:43:51,279 --> 00:43:56,170
reacting to it on and handling for

00:43:53,950 --> 00:44:05,470
example things like notifications quite

00:43:56,170 --> 00:44:10,930
dynamic yeah where else is MQTT in use

00:44:05,470 --> 00:44:12,700
well it's used quite heavily for example

00:44:10,930 --> 00:44:16,180
our friends over at greylock I've create

00:44:12,700 --> 00:44:19,680
an MQTT plug-in which will ensure it

00:44:16,180 --> 00:44:22,960
subscribe to any amount of topics and

00:44:19,680 --> 00:44:24,970
store in grey log used to be called

00:44:22,960 --> 00:44:28,000
greylock to its cool grey lock them in

00:44:24,970 --> 00:44:29,859
grey log the payloads of this those

00:44:28,000 --> 00:44:31,839
publishers and here's an example there's

00:44:29,859 --> 00:44:35,109
an example screenshot with individual

00:44:31,839 --> 00:44:39,099
fields sort of parse out of the out of

00:44:35,109 --> 00:44:43,390
the JSON or of the Gulf beaver ansible

00:44:39,099 --> 00:44:46,509
has MQTT notified plugins for example

00:44:43,390 --> 00:44:48,720
you have RabbitMQ the mqp broker which

00:44:46,509 --> 00:44:48,720
hasn't

00:44:49,549 --> 00:45:01,460
am I looking for a plug-in the connector

00:44:53,369 --> 00:45:04,380
or vertical which has MQTT support

00:45:01,460 --> 00:45:06,660
collect d we were talking about adding

00:45:04,380 --> 00:45:09,750
MQTT to collect d you know for

00:45:06,660 --> 00:45:12,480
collectively the statistics generator to

00:45:09,750 --> 00:45:14,730
publish an art fire collecti and florian

00:45:12,480 --> 00:45:16,170
started on that and i soldered on that

00:45:14,730 --> 00:45:18,599
and also the people starter than that

00:45:16,170 --> 00:45:21,029
and that's why it's it's not it's sort

00:45:18,599 --> 00:45:23,180
of in in light grey because it I've lost

00:45:21,029 --> 00:45:26,760
the track I don't think it's completed

00:45:23,180 --> 00:45:28,559
which could very well be my fault oppa

00:45:26,760 --> 00:45:31,230
map the home the open home automation

00:45:28,559 --> 00:45:33,720
broker has MQTT support very very well

00:45:31,230 --> 00:45:37,740
for example github the Sun Italian

00:45:33,720 --> 00:45:39,359
github has MQTT support when you you can

00:45:37,740 --> 00:45:42,000
add all sorts of notifications to get up

00:45:39,359 --> 00:45:44,579
as soon as a commit comes in and one of

00:45:42,000 --> 00:45:48,270
their push notifications is MQTT you can

00:45:44,579 --> 00:45:50,309
connect it to your own broker Wireshark

00:45:48,270 --> 00:45:52,349
has fluke so I mentioned earlier and we

00:45:50,309 --> 00:45:55,319
make electrically the power of things

00:45:52,349 --> 00:46:00,750
Jenkins as MQTT plugin for example this

00:45:55,319 --> 00:46:02,099
all sorts of all sorts of different yeah

00:46:00,750 --> 00:46:05,329
unix programs all sorts of different

00:46:02,099 --> 00:46:09,240
applications that have MQTT and i bet

00:46:05,329 --> 00:46:11,700
that no lots of you I don't but that

00:46:09,240 --> 00:46:14,849
that lots of you already have MQTT in

00:46:11,700 --> 00:46:21,390
your pocket who uses I can't raise my

00:46:14,849 --> 00:46:24,180
hand who uses Facebook right facebook

00:46:21,390 --> 00:46:27,660
Messenger also congratulations they use

00:46:24,180 --> 00:46:31,200
MQTT the facebook Messenger used to be

00:46:27,660 --> 00:46:33,089
used to run on HTTP they did HTTP GET

00:46:31,200 --> 00:46:35,400
and post requests and they change

00:46:33,089 --> 00:46:39,859
several years back now I think 23 years

00:46:35,400 --> 00:46:42,000
back to MQTT and by doing so they have I

00:46:39,859 --> 00:46:45,750
forget the exact statistics but if

00:46:42,000 --> 00:46:49,289
they've conserve battery power on mobile

00:46:45,750 --> 00:46:55,170
phones on smart devices by quite a large

00:46:49,289 --> 00:46:57,809
amount they have reduced latency they

00:46:55,170 --> 00:47:01,110
seem to be very very happy with their

00:46:57,809 --> 00:47:02,820
use of MQTT now

00:47:01,110 --> 00:47:04,440
that must mean something because I

00:47:02,820 --> 00:47:06,690
believe I'm not quite sure but i believe

00:47:04,440 --> 00:47:09,300
facebook has a few more customers than

00:47:06,690 --> 00:47:10,890
many of us do so they probably know what

00:47:09,300 --> 00:47:14,310
they're doing yeah facebook facebook

00:47:10,890 --> 00:47:25,230
Messenger runs MQTT below the below the

00:47:14,310 --> 00:47:27,450
hood I big one no I don't know I don't

00:47:25,230 --> 00:47:29,880
know that that has never been that has

00:47:27,450 --> 00:47:32,220
never been published I could well assume

00:47:29,880 --> 00:47:35,870
that they wrote their own yeah the

00:47:32,220 --> 00:47:38,640
protocol is not particularly difficult

00:47:35,870 --> 00:47:40,260
I've never thought about it but I would

00:47:38,640 --> 00:47:44,130
assume they've done a row and sort of to

00:47:40,260 --> 00:47:46,650
integrate in their own services if you

00:47:44,130 --> 00:47:50,790
want to broker that really does a lot of

00:47:46,650 --> 00:47:52,680
stuff IBM cells appliances forget the

00:47:50,790 --> 00:47:57,570
name they do 15 million messages per

00:47:52,680 --> 00:48:01,620
second so that's quite quite good it's

00:47:57,570 --> 00:48:04,290
not particularly um yeah for all things

00:48:01,620 --> 00:48:09,570
MQTT I would like to recommend MQTT org

00:48:04,290 --> 00:48:12,320
as a starting point that's it that's

00:48:09,570 --> 00:48:12,320
what I wanted to show you

00:48:17,460 --> 00:48:31,359
do we have time for questions are there

00:48:20,529 --> 00:48:35,769
any questions yeah you need a library

00:48:31,359 --> 00:48:38,289
for JavaScript there is a eclipse

00:48:35,769 --> 00:48:42,009
project called PAHO and the power whole

00:48:38,289 --> 00:48:43,989
eclipse project has for example the ref

00:48:42,009 --> 00:48:45,940
I think the reference implementation of

00:48:43,989 --> 00:48:47,650
the Java is probably what you guys took

00:48:45,940 --> 00:48:50,109
for greylock I'm not sure though because

00:48:47,650 --> 00:48:55,690
I don't know anything about Java they

00:48:50,109 --> 00:49:01,690
have the reference implementation of the

00:48:55,690 --> 00:49:05,019
JavaScript MQTT library which is very

00:49:01,690 --> 00:49:08,920
good it absolutely sucks that they

00:49:05,019 --> 00:49:10,660
refuse to call a topic a topic but that

00:49:08,920 --> 00:49:12,339
they call it a destination name if you

00:49:10,660 --> 00:49:14,529
can live with that then it's very good

00:49:12,339 --> 00:49:16,779
I've never I've never broken it and we

00:49:14,529 --> 00:49:18,069
have we have in a different project in

00:49:16,779 --> 00:49:19,960
the on-track project we have quite a lot

00:49:18,069 --> 00:49:24,519
of web soccer things and it's just

00:49:19,960 --> 00:49:27,609
unbreakable yeah so aho JavaScript

00:49:24,519 --> 00:49:29,200
library it's a single it's a single dot

00:49:27,609 --> 00:49:33,400
yes would you just copy into your own

00:49:29,200 --> 00:49:35,319
thing and then that's it yeah this the

00:49:33,400 --> 00:49:37,450
code for this I've got on github I can

00:49:35,319 --> 00:49:41,349
show you where it is it's relatively

00:49:37,450 --> 00:49:52,599
relatively simple okay I think you had a

00:49:41,349 --> 00:49:54,910
question as many as like as many as you

00:49:52,599 --> 00:49:57,309
like if your client has the resources

00:49:54,910 --> 00:49:59,049
for doing that yeah yeah always remember

00:49:57,309 --> 00:50:01,539
I have to say that because I just showed

00:49:59,049 --> 00:50:04,089
you a microcontroller yes but even even

00:50:01,539 --> 00:50:07,109
the little Audrina can connect to 23

00:50:04,089 --> 00:50:15,430
brokers yeah there is no limitation no

00:50:07,109 --> 00:50:18,970
protocol limitation if your broker dies

00:50:15,430 --> 00:50:21,710
the bus is dead yeah that is correct

00:50:18,970 --> 00:50:22,700
well in the case of mosquito for example

00:50:21,710 --> 00:50:24,680
you will need something like a load

00:50:22,700 --> 00:50:26,450
balancer in front of it in the case if

00:50:24,680 --> 00:50:28,850
you're using something like hive mq or

00:50:26,450 --> 00:50:31,010
message site that's the IBM appliance if

00:50:28,850 --> 00:50:33,200
using something like I've mq or

00:50:31,010 --> 00:50:37,250
commercial thing like message site which

00:50:33,200 --> 00:50:39,290
is an appliance they have clustering

00:50:37,250 --> 00:50:41,390
support in it so hive mq for example you

00:50:39,290 --> 00:50:47,210
talk to one address and in the back day

00:50:41,390 --> 00:50:50,060
balance for you yeah no no mosquito

00:50:47,210 --> 00:50:52,190
currently has no high availability if

00:50:50,060 --> 00:50:53,720
mosquito dies then first of all

00:50:52,190 --> 00:50:56,330
congratulations for having managed to

00:50:53,720 --> 00:50:57,710
kill it but second of all if it dies

00:50:56,330 --> 00:51:01,390
yeah it goes away and all your clients

00:50:57,710 --> 00:51:03,620
are out in the cold yeah so you would

00:51:01,390 --> 00:51:08,050
you would in any case have to load

00:51:03,620 --> 00:51:10,460
balance it somehow to avoid that okay

00:51:08,050 --> 00:51:12,650
would it be enough to to have to

00:51:10,460 --> 00:51:15,320
mosquitoes breached and then subscribe

00:51:12,650 --> 00:51:17,330
your clients to both of them that would

00:51:15,320 --> 00:51:19,610
be a possibility certainly certainly but

00:51:17,330 --> 00:51:22,190
that is not necessarily what people mean

00:51:19,610 --> 00:51:26,770
when they think high availability okay

00:51:22,190 --> 00:51:26,770
but yeah that will be possible yeah

00:51:32,470 --> 00:51:35,470
correct

00:51:37,950 --> 00:51:41,910
whatever you like we transport things

00:51:40,170 --> 00:51:44,130
like Jason we do a lot of Jason in on

00:51:41,910 --> 00:51:48,930
tracks we've transported message packets

00:51:44,130 --> 00:51:51,450
by a 250 up to 256 meg binary safe so

00:51:48,930 --> 00:51:55,380
the payload is up to you and what of

00:51:51,450 --> 00:51:58,020
course is often possible is that you

00:51:55,380 --> 00:52:00,480
hide well not high because the visible

00:51:58,020 --> 00:52:03,690
but that you encode things like source

00:52:00,480 --> 00:52:06,480
addresses or client IDs and into a topic

00:52:03,690 --> 00:52:07,980
that is also possible yep but otherwise

00:52:06,480 --> 00:52:10,650
yeah the payload you're free to do

00:52:07,980 --> 00:52:13,099
whatever you like and we put I put a

00:52:10,650 --> 00:52:22,460
foot pictures in it no problem whatever

00:52:13,099 --> 00:52:31,650
there was somebody else in yeah seguin

00:52:22,460 --> 00:52:37,470
yes quality of service to know there is

00:52:31,650 --> 00:52:38,760
no queue when a client careful I'm

00:52:37,470 --> 00:52:40,260
saying a client I'm not saying that

00:52:38,760 --> 00:52:41,790
microcontroller the code for the

00:52:40,260 --> 00:52:43,890
microcontroller for the Arduino

00:52:41,790 --> 00:52:47,730
currently does not support Kurusu when a

00:52:43,890 --> 00:52:49,859
client publishes qos to this TCP

00:52:47,730 --> 00:52:52,500
connection can go away and come back and

00:52:49,859 --> 00:52:55,770
the MQTT as a protocol guarantees

00:52:52,500 --> 00:52:59,099
delivery or exactly once okay that is no

00:52:55,770 --> 00:53:00,839
problem of course if the client

00:52:59,099 --> 00:53:04,460
publishes a message on quality of

00:53:00,839 --> 00:53:08,160
service to and at that instant dies or

00:53:04,460 --> 00:53:10,290
at that instant the broker dies well

00:53:08,160 --> 00:53:12,480
then there can't be any guarantee if the

00:53:10,290 --> 00:53:16,109
the power fails and all data center then

00:53:12,480 --> 00:53:19,020
its offerings gone and but other than

00:53:16,109 --> 00:53:20,880
that we have and we have a nice where we

00:53:19,020 --> 00:53:23,339
have a lot of experience other than that

00:53:20,880 --> 00:53:25,500
for example in iOS big problem because

00:53:23,339 --> 00:53:26,730
if you know iOS applications that are

00:53:25,500 --> 00:53:29,430
running with background are killed away

00:53:26,730 --> 00:53:33,300
after five thousand seconds and other

00:53:29,430 --> 00:53:36,030
than that we can send Q&As to publishers

00:53:33,300 --> 00:53:39,420
from an iOS application that's going

00:53:36,030 --> 00:53:41,849
from Wi-Fi into 2g and we guarantee well

00:53:39,420 --> 00:53:48,089
not we and critically does that we know

00:53:41,849 --> 00:53:50,099
that the that message really appears at

00:53:48,089 --> 00:53:51,030
the target broker exactly once yeah so

00:53:50,099 --> 00:53:53,880
that really will

00:53:51,030 --> 00:53:59,790
really works even if you've gone through

00:53:53,880 --> 00:54:03,660
areas of zero coverage that that exam

00:53:59,790 --> 00:54:05,490
Paul this here my phone doesn't Rome I'm

00:54:03,660 --> 00:54:09,240
too stingy to pay roaming charges for

00:54:05,490 --> 00:54:12,600
data well some some of these were

00:54:09,240 --> 00:54:14,730
actually published sort of the app

00:54:12,600 --> 00:54:16,830
published them qs2 but wasn't even

00:54:14,730 --> 00:54:19,530
connected yeah they showed up then later

00:54:16,830 --> 00:54:21,570
on and later on from there to there

00:54:19,530 --> 00:54:26,160
including check-in is about an hour and

00:54:21,570 --> 00:54:28,140
a half yeah any other questions oh I

00:54:26,160 --> 00:54:39,270
think we're over time yeah one more

00:54:28,140 --> 00:54:42,000
question yeah yes that is extremely

00:54:39,270 --> 00:54:46,020
reliable here again because this is our

00:54:42,000 --> 00:54:48,600
bridging because we well you we define

00:54:46,020 --> 00:54:52,650
beat the the connection the MQTT

00:54:48,600 --> 00:54:54,690
connection between both brokers how

00:54:52,650 --> 00:54:58,650
these messages should be passed on

00:54:54,690 --> 00:55:01,920
quality of service 0 1 or 2 yes so we

00:54:58,650 --> 00:55:04,350
have the same semantics on this Bridge

00:55:01,920 --> 00:55:06,420
here as we have for normal and kijiji

00:55:04,350 --> 00:55:10,140
publishes so in other words if you have

00:55:06,420 --> 00:55:12,900
some high security whatever conservation

00:55:10,140 --> 00:55:15,660
where you want that purple client to

00:55:12,900 --> 00:55:18,240
really reach that purple subscriber here

00:55:15,660 --> 00:55:20,880
you would publish qs2 here you would

00:55:18,240 --> 00:55:23,640
subscribe qs2 and here you would connect

00:55:20,880 --> 00:55:29,220
these also with quality of service to

00:55:23,640 --> 00:55:31,800
and then I'll we've done it a lot must

00:55:29,220 --> 00:55:35,400
happen for that message not to reach

00:55:31,800 --> 00:55:37,730
that message I think I think everything

00:55:35,400 --> 00:55:42,620
has to be rebooted for that to happen I

00:55:37,730 --> 00:55:42,620
know that is really extremely reliable

00:55:44,900 --> 00:55:48,200
thank you very much

00:55:48,530 --> 00:55:50,590

YouTube URL: https://www.youtube.com/watch?v=OKiCs_CwRzU


