Title: OSDC 2015: Marco Ceppi | Managing Workloads at Scale in the Cloud or on Bare Metal with Juju
Publication date: 2015-04-30
Playlist: OSDC 2015 | Open Source Data Center Conference
Description: 
	Whether you're deploying Hadoop and Big Data workloads, OpenStack at High Availability, or your application. Juju makes these tasks and more easy to manage, scale, and repeat - doesn't matter if you're on a public cloud, private cloud, or building your own cloud on metal.

In this talk we'll deploy OpenStack and Hortonworks Hadoop on bare metal and in a cloud, discuss what/how Juju works, and explore other possible solution/workloads which Juju can manage.

Juju is Canonical's next generation cloud orchestration tool provided as free and open source. Written in Golang, it provides fast orchestration for any workload. Juju makes use of an orchestration node in the environment which marshalls events that occur in the environment and dispatches them to the extremely lightweight agents installed on each machine.

The orchestration node also acts as the entry point for communication to the environment via a websocket API. The CLI and the GUI (both open source software) use it for communication to an environment.
Captions: 
	00:00:07,109 --> 00:00:11,740
alright welcome back everybody we will

00:00:09,670 --> 00:00:13,750
now listen to mark okay be telling us um

00:00:11,740 --> 00:00:15,350
so many

00:00:13,750 --> 00:00:19,870
at scale in the cloud

00:00:15,350 --> 00:00:21,860
BAM at Louis you'll enjoy thank you so

00:00:19,870 --> 00:00:24,800
that's essentially what my talk will be

00:00:21,860 --> 00:00:26,600
about but I when I submitted it was

00:00:24,800 --> 00:00:27,740
quite long and it's a very long title so

00:00:26,600 --> 00:00:29,630
if you're wondering even what this is

00:00:27,740 --> 00:00:30,380
about based on that title essentially

00:00:29,630 --> 00:00:32,419
what are we talking about is

00:00:30,380 --> 00:00:34,160
democratizing data center in the cloud

00:00:32,419 --> 00:00:38,510
using a set of tools that are provided

00:00:34,160 --> 00:00:40,850
by canonical and a boon to so I'm Marco

00:00:38,510 --> 00:00:43,790
chepi i worked for canonical Canonical's

00:00:40,850 --> 00:00:45,440
the company behind of into in addition

00:00:43,790 --> 00:00:47,180
to helping support a boon to

00:00:45,440 --> 00:00:49,460
commercially they also build additional

00:00:47,180 --> 00:00:51,470
set of sweets of tools that are open

00:00:49,460 --> 00:00:53,269
source that allow you to help manage

00:00:51,470 --> 00:00:57,800
what you may be doing in a boon to our

00:00:53,269 --> 00:00:59,360
otherwise very easily so what I want to

00:00:57,800 --> 00:01:01,190
talk about real briefly is what this is

00:00:59,360 --> 00:01:04,670
and why it's on the stage and how it

00:01:01,190 --> 00:01:06,710
ties into the rest of this talk so if

00:01:04,670 --> 00:01:08,420
you haven't seen this this is our we

00:01:06,710 --> 00:01:11,090
call it the orange box it's basically

00:01:08,420 --> 00:01:13,070
how we go from customer sites and

00:01:11,090 --> 00:01:15,049
conferences and demonstrate our tools on

00:01:13,070 --> 00:01:17,120
bare metal it is for all intensive

00:01:15,049 --> 00:01:21,350
purposes a very scaled-down data center

00:01:17,120 --> 00:01:22,939
it has networking going in it has power

00:01:21,350 --> 00:01:24,770
management internally and it has ten

00:01:22,939 --> 00:01:26,659
Intel knucks inside of it that model

00:01:24,770 --> 00:01:29,270
what a physical server would be it's got

00:01:26,659 --> 00:01:31,070
disc dedicated Nick's all that jazz

00:01:29,270 --> 00:01:32,680
you'd normally find in hardware just

00:01:31,070 --> 00:01:35,270
scaled down and something that I can

00:01:32,680 --> 00:01:37,880
drag onto an airplane and take with me

00:01:35,270 --> 00:01:39,829
so throughout the talk I'll be referring

00:01:37,880 --> 00:01:41,030
to in showing actual live demos the

00:01:39,829 --> 00:01:43,969
tools running and it's all everything

00:01:41,030 --> 00:01:45,380
running against this box here so this is

00:01:43,969 --> 00:01:47,000
what this is this is why it's here this

00:01:45,380 --> 00:01:50,179
is what it's doing whirling in the

00:01:47,000 --> 00:01:51,740
background making noise I want to talk

00:01:50,179 --> 00:01:53,719
briefly about some of the problems that

00:01:51,740 --> 00:01:55,280
we've been trying to solve in time

00:01:53,719 --> 00:01:58,070
inside a canonical and for customers a

00:01:55,280 --> 00:01:59,869
canonical and people inside the inside

00:01:58,070 --> 00:02:01,490
the ops world in general and they

00:01:59,869 --> 00:02:02,929
basically distilled down to these kind

00:02:01,490 --> 00:02:04,670
of three key things we've seen recently

00:02:02,929 --> 00:02:07,189
is how do I manage physical and virtual

00:02:04,670 --> 00:02:11,150
resources things like servers network

00:02:07,189 --> 00:02:13,160
switches Stan disk arrays how do i

00:02:11,150 --> 00:02:15,350
deploy services to these resources and

00:02:13,160 --> 00:02:18,620
then how do i scale these services so

00:02:15,350 --> 00:02:19,880
that i can respond appropriately so what

00:02:18,620 --> 00:02:21,710
we've done a canonical but we've been

00:02:19,880 --> 00:02:23,360
providing it as open source tools to

00:02:21,710 --> 00:02:24,830
everyone to use is a set of tools that

00:02:23,360 --> 00:02:26,600
we like to demonstrate with you guys

00:02:24,830 --> 00:02:28,730
today talk through what they are how

00:02:26,600 --> 00:02:32,030
they could be used

00:02:28,730 --> 00:02:36,620
so the first up is mass which is metal

00:02:32,030 --> 00:02:37,819
as a service mass is essentially an API

00:02:36,620 --> 00:02:39,680
for your data center if you want to

00:02:37,819 --> 00:02:43,670
think of it that way it allows you to do

00:02:39,680 --> 00:02:46,310
things like declare resources that you

00:02:43,670 --> 00:02:48,860
have it allows you to allocate those

00:02:46,310 --> 00:02:50,810
resources to a set of people allows you

00:02:48,860 --> 00:02:52,220
to deploy and provision an operating

00:02:50,810 --> 00:02:53,480
system on top of those resources or

00:02:52,220 --> 00:02:55,489
however it would be to actually

00:02:53,480 --> 00:02:57,049
bootstrap that process and then it

00:02:55,489 --> 00:02:58,489
allows you to return them back to the

00:02:57,049 --> 00:03:00,230
general pool of use and then re

00:02:58,489 --> 00:03:01,250
Commission them over again so it allows

00:03:00,230 --> 00:03:03,950
you to do things that you would normally

00:03:01,250 --> 00:03:06,140
do in the cloud stand up resources put

00:03:03,950 --> 00:03:08,299
stuff on to those resources reap those

00:03:06,140 --> 00:03:11,120
resources later on with actual bare

00:03:08,299 --> 00:03:14,799
metal so this includes things like

00:03:11,120 --> 00:03:17,390
managing dns IP address management dia

00:03:14,799 --> 00:03:19,660
dhcp everything else and it's all

00:03:17,390 --> 00:03:22,790
available through a very robust api that

00:03:19,660 --> 00:03:24,500
anything from a command-line user to an

00:03:22,790 --> 00:03:28,700
actual application couldn't get hook

00:03:24,500 --> 00:03:29,750
into and excitingly enough in addition

00:03:28,700 --> 00:03:32,060
to some of the tools i'll show you guys

00:03:29,750 --> 00:03:33,650
today chef actually recently released a

00:03:32,060 --> 00:03:35,480
provisioning layer format so if you have

00:03:33,650 --> 00:03:37,130
chef scripts that you want to just push

00:03:35,480 --> 00:03:38,720
straight out to bare metal you can

00:03:37,130 --> 00:03:41,180
actually use chef and mads to do that

00:03:38,720 --> 00:03:43,190
right now and I imagine other such

00:03:41,180 --> 00:03:44,569
services and configuration management

00:03:43,190 --> 00:03:48,349
tools will be doing something similar as

00:03:44,569 --> 00:03:51,290
well so I'm going to briefly show you

00:03:48,349 --> 00:03:53,030
maz how the machines are model in this

00:03:51,290 --> 00:03:54,829
box how an admin can take actions

00:03:53,030 --> 00:03:56,209
against them and then kind of bleed into

00:03:54,829 --> 00:03:58,760
what you may want to do once you have

00:03:56,209 --> 00:03:59,900
your physical resources declared and

00:03:58,760 --> 00:04:05,660
you're in your data center environment

00:03:59,900 --> 00:04:07,790
so this is what mass looks like running

00:04:05,660 --> 00:04:09,019
on this orange box here we have a couple

00:04:07,790 --> 00:04:11,269
of virtual machines that we've set up

00:04:09,019 --> 00:04:13,940
for light weight and body mints that we

00:04:11,269 --> 00:04:17,229
also have the management of the nine

00:04:13,940 --> 00:04:19,669
additional nodes in here nodes 139

00:04:17,229 --> 00:04:21,500
unfortunately traveling with these boxes

00:04:19,669 --> 00:04:23,240
especially through American TSA is a bit

00:04:21,500 --> 00:04:25,160
rough I've actually broken several nodes

00:04:23,240 --> 00:04:26,780
on the way here I've marked them as

00:04:25,160 --> 00:04:28,880
broken in my GUI you can see the lights

00:04:26,780 --> 00:04:30,650
are on but no one's really home on that

00:04:28,880 --> 00:04:32,210
node right now mass can't talk to it so

00:04:30,650 --> 00:04:34,010
from an admin perspective it was nice to

00:04:32,210 --> 00:04:36,080
be able to say well I know these nodes

00:04:34,010 --> 00:04:37,159
are not responding Markham is broken

00:04:36,080 --> 00:04:39,469
mass knows how to handle that

00:04:37,159 --> 00:04:41,030
appropriately adding new resources is

00:04:39,469 --> 00:04:42,600
pretty easy you can add resources or

00:04:41,030 --> 00:04:44,570
entire class of machines

00:04:42,600 --> 00:04:47,000
sees like moonshot Sassy's or

00:04:44,570 --> 00:04:50,010
Microsoft's new open hardware chassis

00:04:47,000 --> 00:04:51,630
you essentially just declare the machine

00:04:50,010 --> 00:04:53,340
in a very high level and then things

00:04:51,630 --> 00:04:56,010
like how do I power this machine on and

00:04:53,340 --> 00:04:58,140
we can do a whole slew of machine power

00:04:56,010 --> 00:05:00,210
management and this is all plug inable

00:04:58,140 --> 00:05:01,560
so with a few lines of Python you can

00:05:00,210 --> 00:05:04,500
actually wrap how to communicate with

00:05:01,560 --> 00:05:08,730
other power types that aren't modeled

00:05:04,500 --> 00:05:11,280
here so things like ipmi I low 44 HP

00:05:08,730 --> 00:05:15,590
moonshot Intel AMT for talking to knucks

00:05:11,280 --> 00:05:18,420
the see Mike roach a C's vmware esxi

00:05:15,590 --> 00:05:20,190
vSphere verse itself if you have a bunch

00:05:18,420 --> 00:05:22,380
of virtual machines you can manage those

00:05:20,190 --> 00:05:24,030
with verse through kvm and also the

00:05:22,380 --> 00:05:25,530
rudimentary wake on land which is the

00:05:24,030 --> 00:05:27,990
best power management tools there's no

00:05:25,530 --> 00:05:29,910
way to do the end lifecycle of how do i

00:05:27,990 --> 00:05:31,080
turn off wake-on-lan but that's

00:05:29,910 --> 00:05:34,230
available as well if that's what you

00:05:31,080 --> 00:05:35,880
have to model so this is essentially

00:05:34,230 --> 00:05:38,010
what Matusz looks like provisioning is

00:05:35,880 --> 00:05:39,660
very straightforward Maz is an agnostic

00:05:38,010 --> 00:05:41,850
tool for operating system to be deployed

00:05:39,660 --> 00:05:43,800
against it so with mads you can actually

00:05:41,850 --> 00:05:45,270
stand up and deploy a boot to work loads

00:05:43,800 --> 00:05:47,070
as an operating system level you can

00:05:45,270 --> 00:05:48,330
also deploy sent toss is a base

00:05:47,070 --> 00:05:51,180
operating system you can also deploy

00:05:48,330 --> 00:05:53,190
windows and we can deploy windows from

00:05:51,180 --> 00:05:54,600
zero to a windows machine running in

00:05:53,190 --> 00:05:57,330
less than 15 minutes with only one

00:05:54,600 --> 00:05:59,340
reboot cycle using mass so if you're

00:05:57,330 --> 00:06:00,390
pure windows admin and you have to deal

00:05:59,340 --> 00:06:04,170
with that pain every day of going

00:06:00,390 --> 00:06:07,650
through update cycles for microsoft's

00:06:04,170 --> 00:06:09,480
2012 hv r 2 or whatever is the latest

00:06:07,650 --> 00:06:11,040
server release and that's a very long

00:06:09,480 --> 00:06:14,120
process mass is a way that we can help

00:06:11,040 --> 00:06:17,610
to make that process much easier for you

00:06:14,120 --> 00:06:19,020
so matt has also has ideas of how do you

00:06:17,610 --> 00:06:20,730
scale so right now it's on 10 machines

00:06:19,020 --> 00:06:23,100
in this little what I guess you would be

00:06:20,730 --> 00:06:24,660
embodied by Iraq but how do you scale up

00:06:23,100 --> 00:06:27,770
with Mads Mads will actually lie you

00:06:24,660 --> 00:06:30,360
didn't distill knowledge about zones

00:06:27,770 --> 00:06:32,730
clusters and whole region's so you can

00:06:30,360 --> 00:06:34,860
model multiple data centers in mass and

00:06:32,730 --> 00:06:36,270
have the drive thru out the drill

00:06:34,860 --> 00:06:37,860
through for that being managed with mass

00:06:36,270 --> 00:06:39,210
you can say this resource is in this

00:06:37,860 --> 00:06:41,070
cluster which is part of this stone

00:06:39,210 --> 00:06:42,120
which is essentially in this data center

00:06:41,070 --> 00:06:43,590
so the tiered effect and the role of

00:06:42,120 --> 00:06:48,330
effect is all something you can model

00:06:43,590 --> 00:06:50,010
within mass as well as networking so if

00:06:48,330 --> 00:06:51,600
you have specific VLANs if you have

00:06:50,010 --> 00:06:53,340
things like any kind of Software Defined

00:06:51,600 --> 00:06:55,050
Networking bonding interfaces that you

00:06:53,340 --> 00:06:56,200
want to make mass aware if you can do

00:06:55,050 --> 00:06:58,270
that also through man

00:06:56,200 --> 00:06:59,530
with the with the network's interface so

00:06:58,270 --> 00:07:01,720
it really gives you the way to just as

00:06:59,530 --> 00:07:03,640
described at a very base level this is

00:07:01,720 --> 00:07:05,350
what i have for hardware it has

00:07:03,640 --> 00:07:06,550
mechanisms to do auto enlistment so if

00:07:05,350 --> 00:07:08,470
it see something come online in the

00:07:06,550 --> 00:07:10,690
network it'll try to enlist and figure

00:07:08,470 --> 00:07:13,150
out what it is it also captures resource

00:07:10,690 --> 00:07:15,700
statistics machine characteristics how

00:07:13,150 --> 00:07:17,890
much RAM how much disk what disks what

00:07:15,700 --> 00:07:20,230
network interfaces do I have how many

00:07:17,890 --> 00:07:21,640
cores of CPU I have the kind of things

00:07:20,230 --> 00:07:22,930
you may want to know is you spin up

00:07:21,640 --> 00:07:25,390
stuff through the API and this allows

00:07:22,930 --> 00:07:26,890
you to through the API same as I request

00:07:25,390 --> 00:07:28,570
a machine with at least this much RAM

00:07:26,890 --> 00:07:30,310
and it'll find the next best match for

00:07:28,570 --> 00:07:31,930
you can give it to you and then you can

00:07:30,310 --> 00:07:33,520
do things like taxonomy on top of that

00:07:31,930 --> 00:07:35,290
to say these are a group of machines I

00:07:33,520 --> 00:07:36,490
wish declared by an arbitrary tag you

00:07:35,290 --> 00:07:38,770
could search and find and launch

00:07:36,490 --> 00:07:40,510
machines through there so this is mass

00:07:38,770 --> 00:07:41,860
it's I mean it's pretty cool if you've

00:07:40,510 --> 00:07:43,210
ever had to work with data center level

00:07:41,860 --> 00:07:44,560
hardware it's kind of hard to manage all

00:07:43,210 --> 00:07:48,040
that listment stuff without getting

00:07:44,560 --> 00:07:50,800
really tucked into some kind of bigger

00:07:48,040 --> 00:07:52,990
vendors tools so this is a very light

00:07:50,800 --> 00:07:54,220
way it can be dropped into a data center

00:07:52,990 --> 00:07:57,580
could easily removed from the data

00:07:54,220 --> 00:07:58,870
center there's really no no real binding

00:07:57,580 --> 00:08:00,160
factor once you have Madison there you

00:07:58,870 --> 00:08:01,330
pull mass out all the machines that were

00:08:00,160 --> 00:08:02,440
running or running all the machines that

00:08:01,330 --> 00:08:04,270
were off are off but there's really

00:08:02,440 --> 00:08:06,910
nothing if you want to go back to using

00:08:04,270 --> 00:08:08,710
straight I ipmi to power those machines

00:08:06,910 --> 00:08:10,240
on you can mass let you do that so it is

00:08:08,710 --> 00:08:13,570
a it is a bit of a drop-in replacement

00:08:10,240 --> 00:08:15,840
for things like that why I want to talk

00:08:13,570 --> 00:08:22,570
about math and why I think Maz is so

00:08:15,840 --> 00:08:25,090
important hope it starts from there yes

00:08:22,570 --> 00:08:27,040
it does is because we have a growing

00:08:25,090 --> 00:08:29,530
complexity issue with data centers and

00:08:27,040 --> 00:08:31,630
with general machine deployment whether

00:08:29,530 --> 00:08:34,810
it's cloud or whether it's bare metal

00:08:31,630 --> 00:08:36,040
hardware is from a story perspective we

00:08:34,810 --> 00:08:37,870
started a long time ago the mainframes

00:08:36,040 --> 00:08:40,270
we moved on we had servers and then

00:08:37,870 --> 00:08:41,890
people grew servers into rax racks

00:08:40,270 --> 00:08:43,570
eventually grew in complexity and became

00:08:41,890 --> 00:08:46,870
data centers and so people are managing

00:08:43,570 --> 00:08:48,790
large scale hardware and they're using

00:08:46,870 --> 00:08:51,970
tools that were designed for really

00:08:48,790 --> 00:08:53,110
single single hardware management and on

00:08:51,970 --> 00:08:54,700
top of that we have additional

00:08:53,110 --> 00:08:55,930
complexity through now virtualization

00:08:54,700 --> 00:08:56,980
where we're now virtualizing our

00:08:55,930 --> 00:08:58,450
physical hardware either through

00:08:56,980 --> 00:09:00,700
containers or through virtual machines

00:08:58,450 --> 00:09:02,890
and this adds to a growing list of tools

00:09:00,700 --> 00:09:04,390
that required to manage this mass takes

00:09:02,890 --> 00:09:07,060
care of that whole abstraction for you

00:09:04,390 --> 00:09:08,320
it's not the main presentation I'll show

00:09:07,060 --> 00:09:10,060
you but I want to display what mass was

00:09:08,320 --> 00:09:11,980
because especially in an open store

00:09:10,060 --> 00:09:13,330
datacenter world mass becomes a very key

00:09:11,980 --> 00:09:16,240
player for helping manage those

00:09:13,330 --> 00:09:17,760
resources throughout time and as you add

00:09:16,240 --> 00:09:21,160
and grow and scale your infrastructure

00:09:17,760 --> 00:09:22,450
so what this leads to is is something

00:09:21,160 --> 00:09:24,880
interesting and so we've we've gone

00:09:22,450 --> 00:09:26,710
through the cycle of single machine we

00:09:24,880 --> 00:09:29,020
have multiple machines now we have VMs

00:09:26,710 --> 00:09:30,640
as a result of all that cycle tools are

00:09:29,020 --> 00:09:31,900
being built around that whole ecosystems

00:09:30,640 --> 00:09:34,420
being curated and that's machine

00:09:31,900 --> 00:09:36,640
management and that's things like chef

00:09:34,420 --> 00:09:39,010
and puppet ansible docker and rocket

00:09:36,640 --> 00:09:40,570
saltstack all these tool that say I have

00:09:39,010 --> 00:09:42,550
a definition of what I know the machine

00:09:40,570 --> 00:09:44,680
should look like let me execute that

00:09:42,550 --> 00:09:46,450
definition against my machine that way I

00:09:44,680 --> 00:09:48,550
have a repeatable way to reproduce these

00:09:46,450 --> 00:09:49,780
resources and this is configuration

00:09:48,550 --> 00:09:50,920
management but for the sake of this

00:09:49,780 --> 00:09:52,090
conversation I'm gonna say it's really

00:09:50,920 --> 00:09:53,710
machine little management because we're

00:09:52,090 --> 00:09:55,060
defining what a machine looks like you

00:09:53,710 --> 00:09:57,460
were setting up that machine every time

00:09:55,060 --> 00:09:59,770
and even at even at the largest of

00:09:57,460 --> 00:10:02,590
skills that's time consuming and complex

00:09:59,770 --> 00:10:05,410
because I have to define what this

00:10:02,590 --> 00:10:06,730
machine is apply the resources within

00:10:05,410 --> 00:10:08,500
this case whatever machine management

00:10:06,730 --> 00:10:10,090
tool I'm using to that machine then I

00:10:08,500 --> 00:10:12,250
have to add additional configuration to

00:10:10,090 --> 00:10:15,880
declare how that machine plays in the

00:10:12,250 --> 00:10:17,320
larger scale world of my my software

00:10:15,880 --> 00:10:20,950
stack of my deployment of what I'm

00:10:17,320 --> 00:10:21,820
managing so this is where juju comes in

00:10:20,950 --> 00:10:24,580
the play this is where I'm gonna spend

00:10:21,820 --> 00:10:27,700
most of my talk talking about juju is a

00:10:24,580 --> 00:10:28,690
service orchestration tool next

00:10:27,700 --> 00:10:29,830
generation is probably a little too

00:10:28,690 --> 00:10:35,050
buzzy sounding it's really just a

00:10:29,830 --> 00:10:37,300
service orchestration tool and so what

00:10:35,050 --> 00:10:39,310
juju does is it allows you to stop

00:10:37,300 --> 00:10:41,950
thinking so much about the machine and

00:10:39,310 --> 00:10:44,710
more about the service how that service

00:10:41,950 --> 00:10:47,020
looks how to define how that service is

00:10:44,710 --> 00:10:48,670
deployed how that service scales and the

00:10:47,020 --> 00:10:50,260
most important piece of juju the thing

00:10:48,670 --> 00:10:52,390
that really matters the most is how that

00:10:50,260 --> 00:10:54,400
service connects with other services in

00:10:52,390 --> 00:10:56,260
my environments and that's what we're

00:10:54,400 --> 00:10:57,760
really service orchestrations a big term

00:10:56,260 --> 00:11:00,130
when we talk about service orchestration

00:10:57,760 --> 00:11:01,900
from juju we say how do I manage the

00:11:00,130 --> 00:11:04,960
core tenants of deploying scaling and

00:11:01,900 --> 00:11:06,910
connecting a service inside of my

00:11:04,960 --> 00:11:08,830
deployed environment so the reason I

00:11:06,910 --> 00:11:11,200
talked about mass is because mass lets

00:11:08,830 --> 00:11:13,570
you model hardware through an API juju

00:11:11,200 --> 00:11:14,770
lets you model services and all of these

00:11:13,570 --> 00:11:16,780
things that we've been talking about are

00:11:14,770 --> 00:11:18,640
all really just simple abstractions from

00:11:16,780 --> 00:11:20,950
even an operating system which is really

00:11:18,640 --> 00:11:22,240
just a set of api's for hardware virtual

00:11:20,950 --> 00:11:23,830
machines are really just a constrained

00:11:22,240 --> 00:11:26,950
API for how to talk that hyper

00:11:23,830 --> 00:11:28,240
weiser machine management things like

00:11:26,950 --> 00:11:29,710
chef and puppet and those guys are

00:11:28,240 --> 00:11:31,870
really abstractions on how do I talk to

00:11:29,710 --> 00:11:33,400
different operating system layers so

00:11:31,870 --> 00:11:35,020
juju becomes an abstraction for how do I

00:11:33,400 --> 00:11:37,390
talk orchestration in my environment

00:11:35,020 --> 00:11:41,350
what does that model look like what's

00:11:37,390 --> 00:11:43,240
that topology look like so juju itself

00:11:41,350 --> 00:11:45,190
is the ability to speak with many

00:11:43,240 --> 00:11:46,270
different providers and provisioners mad

00:11:45,190 --> 00:11:48,070
as being one of them so you can

00:11:46,270 --> 00:11:49,690
orchestrate on top of bare metal the

00:11:48,070 --> 00:11:51,970
same way you orchestrate on top of a

00:11:49,690 --> 00:11:54,640
cloud environment amazon digital ocean

00:11:51,970 --> 00:11:56,560
google compute engine giant's OpenStack

00:11:54,640 --> 00:11:58,330
any of those guys as well the same

00:11:56,560 --> 00:12:00,010
services that you write for those just

00:11:58,330 --> 00:12:02,650
like when you write a chef de chef

00:12:00,010 --> 00:12:04,900
script or an ansible script all of those

00:12:02,650 --> 00:12:06,700
work against the operating systems that

00:12:04,900 --> 00:12:08,170
chef works against which is essentially

00:12:06,700 --> 00:12:10,180
all the ones you may have want to be

00:12:08,170 --> 00:12:11,460
deploying machines on top of juju does

00:12:10,180 --> 00:12:15,430
the same thing for cloud level

00:12:11,460 --> 00:12:16,690
abstractions so if I want to say deploy

00:12:15,430 --> 00:12:17,890
something on the bare metal display

00:12:16,690 --> 00:12:19,270
something on the cloud instead of having

00:12:17,890 --> 00:12:21,160
to define what that is for two separate

00:12:19,270 --> 00:12:23,380
processes juju allows me to say just one

00:12:21,160 --> 00:12:25,230
time deploy this deploy this and it

00:12:23,380 --> 00:12:29,290
handles that abstraction layer for you

00:12:25,230 --> 00:12:31,630
and juju does all this through charms so

00:12:29,290 --> 00:12:33,490
charms are essentially these little

00:12:31,630 --> 00:12:36,550
units of what a service definition looks

00:12:33,490 --> 00:12:38,320
like and it's embodied in code and it's

00:12:36,550 --> 00:12:39,340
really the operational component of that

00:12:38,320 --> 00:12:40,780
code so it's not really certain

00:12:39,340 --> 00:12:43,510
necessarily the software project it's

00:12:40,780 --> 00:12:45,720
not actually the code for what Hadoop

00:12:43,510 --> 00:12:48,880
looks like in this case which is Hadoop

00:12:45,720 --> 00:12:50,230
connected to HDFS hive and then my

00:12:48,880 --> 00:12:52,060
sequel if anyone's doing any big data

00:12:50,230 --> 00:12:56,110
stuff this may seem familiar but this is

00:12:52,060 --> 00:12:59,410
a very simple very very simple do big

00:12:56,110 --> 00:13:01,180
data stack so what juju charms do is

00:12:59,410 --> 00:13:03,880
lousy encapsulate the knowledge that it

00:13:01,180 --> 00:13:06,060
takes to deploy Hadoop to scale Hadoop

00:13:03,880 --> 00:13:09,220
and to connect Hadoop to other services

00:13:06,060 --> 00:13:10,780
why this matters is because when you do

00:13:09,220 --> 00:13:14,140
something in this fashion where you're

00:13:10,780 --> 00:13:17,800
doing connections it gives you the

00:13:14,140 --> 00:13:20,500
ability to democratize which components

00:13:17,800 --> 00:13:23,050
you use at which time in which stage so

00:13:20,500 --> 00:13:24,820
charms themselves just like juju being

00:13:23,050 --> 00:13:27,070
language agnostic and mads being OS

00:13:24,820 --> 00:13:29,530
agnostic charms themselves are also

00:13:27,070 --> 00:13:31,690
language agnostic they're really just a

00:13:29,530 --> 00:13:33,340
wrapper around how you do a machine

00:13:31,690 --> 00:13:34,840
level set up and then how that machine

00:13:33,340 --> 00:13:36,550
speaks to other services in the

00:13:34,840 --> 00:13:37,750
ecosystem so it's really just the

00:13:36,550 --> 00:13:40,210
translation layer between

00:13:37,750 --> 00:13:43,360
mean well whenever this event triggers

00:13:40,210 --> 00:13:45,610
and juju itself is an event distributed

00:13:43,360 --> 00:13:47,800
network event distributed tool so as

00:13:45,610 --> 00:13:49,690
events are being processed in real time

00:13:47,800 --> 00:13:52,300
in a live environment it's dispatching

00:13:49,690 --> 00:13:54,910
events which then incur invocations of

00:13:52,300 --> 00:13:57,730
code that are encapsulated in charms I

00:13:54,910 --> 00:13:59,890
was way too much talking for that

00:13:57,730 --> 00:14:01,900
portion but basically is we're doing if

00:13:59,890 --> 00:14:05,050
that dispatching at the hat the highest

00:14:01,900 --> 00:14:07,570
level um you declared a juju what you

00:14:05,050 --> 00:14:08,860
want your environment to look like juju

00:14:07,570 --> 00:14:10,360
takes that set of instructions and

00:14:08,860 --> 00:14:11,530
rectifies it against what's currently in

00:14:10,360 --> 00:14:13,720
the environment and the dispatches

00:14:11,530 --> 00:14:15,810
events to make that happen and it's this

00:14:13,720 --> 00:14:19,290
really event framework that allows

00:14:15,810 --> 00:14:21,400
people to model complex deployments in

00:14:19,290 --> 00:14:24,190
ways they may have never been able to

00:14:21,400 --> 00:14:27,040
before so charms themselves our language

00:14:24,190 --> 00:14:29,470
agnostics you can write a charm using

00:14:27,040 --> 00:14:31,540
Python or Ruby or PowerShell even if you

00:14:29,470 --> 00:14:33,670
were deploying windows workloads you can

00:14:31,540 --> 00:14:35,050
also wrap a bunch of existing machine

00:14:33,670 --> 00:14:36,730
provider tools because what these guys

00:14:35,050 --> 00:14:39,160
do very well is set up a machine

00:14:36,730 --> 00:14:41,440
definition how should this machine look

00:14:39,160 --> 00:14:43,690
from bear from bear operating system to

00:14:41,440 --> 00:14:45,100
a service running what juju aims to

00:14:43,690 --> 00:14:47,620
provide is the ability to say once this

00:14:45,100 --> 00:14:49,510
machine is set up what's its larger role

00:14:47,620 --> 00:14:51,160
with everything else that's going on in

00:14:49,510 --> 00:14:52,750
the environment how does it connect to

00:14:51,160 --> 00:14:54,520
other units that are running in its

00:14:52,750 --> 00:14:57,040
service group what happens when I have

00:14:54,520 --> 00:14:59,050
more than two units of my sequel all

00:14:57,040 --> 00:15:00,850
that logic is encapsulated then what

00:14:59,050 --> 00:15:03,280
happens when my sequels connect to hive

00:15:00,850 --> 00:15:05,890
all of that language is an encapsulated

00:15:03,280 --> 00:15:08,170
as these scripts which we call hooks

00:15:05,890 --> 00:15:12,070
which are just responses to events that

00:15:08,170 --> 00:15:14,260
juju is signaling in the environment so

00:15:12,070 --> 00:15:16,990
in addition to being language agnostic

00:15:14,260 --> 00:15:19,420
charms are also in jujus also platform

00:15:16,990 --> 00:15:21,339
agnostic so Jews you can deploy a boon

00:15:19,420 --> 00:15:23,470
to and Windows workloads send toss

00:15:21,339 --> 00:15:26,710
workload support just landed a few weeks

00:15:23,470 --> 00:15:28,270
ago and we'll be adding more support for

00:15:26,710 --> 00:15:30,610
other operating systems as we go on and

00:15:28,270 --> 00:15:33,070
we also have support for architecture

00:15:30,610 --> 00:15:36,010
independence so x86 arm power ate

00:15:33,070 --> 00:15:37,600
anything else that boonton windows and

00:15:36,010 --> 00:15:39,370
sent us and other workloads we support

00:15:37,600 --> 00:15:41,140
whatever operating systems those guys

00:15:39,370 --> 00:15:43,480
will run on we will also support in

00:15:41,140 --> 00:15:46,209
charms and you to implicitly so you can

00:15:43,480 --> 00:15:48,280
model what gets interesting here is you

00:15:46,209 --> 00:15:49,959
can model things like well I have active

00:15:48,280 --> 00:15:51,250
directory or MS sequel something that

00:15:49,959 --> 00:15:51,640
we've been maintaining for quite a long

00:15:51,250 --> 00:15:53,740
time

00:15:51,640 --> 00:15:54,910
you can deploy that with juju and

00:15:53,740 --> 00:15:56,860
connect to things that are running in

00:15:54,910 --> 00:15:59,260
centos or a boon to or other operating

00:15:56,860 --> 00:16:00,730
systems juju doesn't care with the

00:15:59,260 --> 00:16:02,620
underlying provisioning is doing just

00:16:00,730 --> 00:16:04,150
cares the layer of orchestration how

00:16:02,620 --> 00:16:06,420
these services communicate reacts

00:16:04,150 --> 00:16:09,550
changes in the events in the environment

00:16:06,420 --> 00:16:11,790
and what we see this going and where we

00:16:09,550 --> 00:16:13,690
see really technology heading is that

00:16:11,790 --> 00:16:15,760
really modern deployments and

00:16:13,690 --> 00:16:17,290
architectures will be serviced centric

00:16:15,760 --> 00:16:19,240
they will be more about the service and

00:16:17,290 --> 00:16:21,100
less about the machine we're moving away

00:16:19,240 --> 00:16:22,540
from we don't care about the hardware

00:16:21,100 --> 00:16:23,650
you're using we care about the operating

00:16:22,540 --> 00:16:24,730
system you're using we're moving even

00:16:23,650 --> 00:16:25,840
further away from that we don't care

00:16:24,730 --> 00:16:28,420
about the operating system you're using

00:16:25,840 --> 00:16:29,860
we care more about the workload you're

00:16:28,420 --> 00:16:31,090
deploying and going even further we're

00:16:29,860 --> 00:16:32,440
saying we don't really care about

00:16:31,090 --> 00:16:33,850
anything on the bottom of the stack we

00:16:32,440 --> 00:16:35,920
just care about the services deployed

00:16:33,850 --> 00:16:37,210
and scaled the best way possible now of

00:16:35,920 --> 00:16:39,190
course saying that we don't care about

00:16:37,210 --> 00:16:40,630
that is a pretty ignorant view on things

00:16:39,190 --> 00:16:42,250
people do actually care about what's

00:16:40,630 --> 00:16:43,930
happening on the under layers there but

00:16:42,250 --> 00:16:45,670
for the most part where we see people

00:16:43,930 --> 00:16:48,370
going is we're saying well I just need

00:16:45,670 --> 00:16:49,900
this service and we find experts that

00:16:48,370 --> 00:16:51,460
say this is how I deployed this service

00:16:49,900 --> 00:16:53,080
as an example for you and you can use

00:16:51,460 --> 00:16:54,730
that or you can take it and modify it

00:16:53,080 --> 00:16:55,660
our charms are all open source along

00:16:54,730 --> 00:16:57,940
with the other suite of tools we've

00:16:55,660 --> 00:16:59,620
shown you so we give you a basically

00:16:57,940 --> 00:17:01,300
what we call is their executable white

00:16:59,620 --> 00:17:03,010
paper experts are encapsulating their

00:17:01,300 --> 00:17:05,079
knowledge on how to deploy scale and

00:17:03,010 --> 00:17:09,430
manage connections between environments

00:17:05,079 --> 00:17:11,170
and users inside of charms and that is

00:17:09,430 --> 00:17:13,270
essentially what would have been a white

00:17:11,170 --> 00:17:15,339
paper where you can deploy execute it

00:17:13,270 --> 00:17:16,930
scale it see how it responds to these

00:17:15,339 --> 00:17:18,370
events and triggers in the environment

00:17:16,930 --> 00:17:20,680
and then you can connect and move

00:17:18,370 --> 00:17:25,630
forward from there or fork and modify to

00:17:20,680 --> 00:17:27,190
suit your needs so we really call this

00:17:25,630 --> 00:17:29,110
peer-to-peer orchestration which is what

00:17:27,190 --> 00:17:30,700
Gigi is doing so in the previous example

00:17:29,110 --> 00:17:33,700
we've condensed down a little bit Hadoop

00:17:30,700 --> 00:17:35,500
I've in my sequel what an operator has

00:17:33,700 --> 00:17:37,900
done as they've said deploy Hadoop

00:17:35,500 --> 00:17:40,540
deploy hive and deploy my sequel and

00:17:37,900 --> 00:17:42,970
then connect my sequel to hive hive the

00:17:40,540 --> 00:17:44,830
Hadoop with the operator said is here is

00:17:42,970 --> 00:17:47,350
what I want you to do go make that

00:17:44,830 --> 00:17:49,270
happen so what juju does on the backside

00:17:47,350 --> 00:17:50,860
is it it pushes event South to all these

00:17:49,270 --> 00:17:52,990
services I need machines for these

00:17:50,860 --> 00:17:54,640
services that are brand new it brings

00:17:52,990 --> 00:17:56,440
them up it installs the code base for

00:17:54,640 --> 00:17:58,120
the charm on there then it going forward

00:17:56,440 --> 00:17:59,260
it says my sequel and hive need to now

00:17:58,120 --> 00:18:01,630
be able to communicate with each other

00:17:59,260 --> 00:18:03,310
my sequel and hive as charms declare

00:18:01,630 --> 00:18:05,309
these are the protocols that I speak and

00:18:03,310 --> 00:18:07,110
these are the protocols I can speak on

00:18:05,309 --> 00:18:08,759
so hype has a way to speak with my

00:18:07,110 --> 00:18:10,740
sequel it understands each other and

00:18:08,759 --> 00:18:12,809
when you make that connection a set of a

00:18:10,740 --> 00:18:14,999
series of events hire fire on each of

00:18:12,809 --> 00:18:16,769
those machines that then does what's

00:18:14,999 --> 00:18:18,450
required in order to hive to speak to my

00:18:16,769 --> 00:18:20,249
sequel so in this case my seek will

00:18:18,450 --> 00:18:21,779
create a database schema a user and a

00:18:20,249 --> 00:18:23,909
password attached to that schema and

00:18:21,779 --> 00:18:25,200
then submit it directly to hide which

00:18:23,909 --> 00:18:26,669
would trigger an event saying you now

00:18:25,200 --> 00:18:28,499
have additional data here's your data

00:18:26,669 --> 00:18:30,450
and then hive can configure itself to

00:18:28,499 --> 00:18:31,320
use my sequel as a pool from an operator

00:18:30,450 --> 00:18:32,940
I don't have to know what the

00:18:31,320 --> 00:18:33,840
credentials are I can find them out but

00:18:32,940 --> 00:18:34,889
I don't have to know what they are I

00:18:33,840 --> 00:18:36,450
don't have to manually edit

00:18:34,889 --> 00:18:37,950
configuration files all of that's

00:18:36,450 --> 00:18:40,980
managed for me in the lower level as a

00:18:37,950 --> 00:18:42,840
charm same with Hadoop hive configure of

00:18:40,980 --> 00:18:44,039
communication hive has all the

00:18:42,840 --> 00:18:45,600
credential it needs to speak to Hadoop

00:18:44,039 --> 00:18:48,179
in order to create a query language that

00:18:45,600 --> 00:18:50,999
it uses my sequel as a back-end for what

00:18:48,179 --> 00:18:53,820
gets interesting is that services

00:18:50,999 --> 00:18:56,549
provide similar and like interfaces so

00:18:53,820 --> 00:18:59,669
with my sequel there's also Maria DB and

00:18:56,549 --> 00:19:01,950
so because these are composable units of

00:18:59,669 --> 00:19:04,379
service definitions we can easily swap

00:19:01,950 --> 00:19:05,789
out my sequel for Maria DB maybe once

00:19:04,379 --> 00:19:06,929
more performant for you maybe you have

00:19:05,789 --> 00:19:08,429
commercial support through one of the

00:19:06,929 --> 00:19:10,649
other or maybe she want to try out a new

00:19:08,429 --> 00:19:12,419
technology so it's Maria DB says it

00:19:10,649 --> 00:19:14,039
speaks the same protocol as my sequel

00:19:12,419 --> 00:19:15,240
these can be easily switched out and

00:19:14,039 --> 00:19:16,710
ready to be will present the same

00:19:15,240 --> 00:19:18,419
information that needs in order for hive

00:19:16,710 --> 00:19:19,980
to connect to a my sequel database and

00:19:18,419 --> 00:19:21,600
the same can be said about percona

00:19:19,980 --> 00:19:23,279
cluster if you want to use Percona

00:19:21,600 --> 00:19:24,690
rather than using any of the previous

00:19:23,279 --> 00:19:26,759
mentioned one so you can deploy percona

00:19:24,690 --> 00:19:28,860
instead attach it to hive and you get

00:19:26,759 --> 00:19:30,450
the same interface for the charmer

00:19:28,860 --> 00:19:32,220
doesn't know what the services connect

00:19:30,450 --> 00:19:33,869
to it only knows that it has the ability

00:19:32,220 --> 00:19:35,429
to speak to my sequel protocol and

00:19:33,869 --> 00:19:39,330
that's all that matters from a service

00:19:35,429 --> 00:19:41,009
definition standpoint going one step

00:19:39,330 --> 00:19:45,059
further we also gain repeatable patterns

00:19:41,009 --> 00:19:46,470
with with with juju so this may be a

00:19:45,059 --> 00:19:49,740
little hard to see but this is just a

00:19:46,470 --> 00:19:51,869
very rather complicated but an

00:19:49,740 --> 00:19:53,700
application that's deployed using rails

00:19:51,869 --> 00:19:55,200
where we have h a proxy connected to

00:19:53,700 --> 00:19:57,960
rails connect the Redis memcache

00:19:55,200 --> 00:20:00,360
postgres a monitoring using nagios and

00:19:57,960 --> 00:20:01,769
then log aggregation using log stash

00:20:00,360 --> 00:20:03,960
elasticsearch and come out of the elk

00:20:01,769 --> 00:20:07,169
stack since all these pieces are

00:20:03,960 --> 00:20:09,539
composable and independent of each other

00:20:07,169 --> 00:20:11,399
when you deploy things like NRP and

00:20:09,539 --> 00:20:12,869
nagios it's the same NRP nagios that

00:20:11,399 --> 00:20:15,059
anywhere else is the point that service

00:20:12,869 --> 00:20:16,259
is using and as they improve it you gain

00:20:15,059 --> 00:20:18,960
those improvements as well the general

00:20:16,259 --> 00:20:20,970
open-source philosophy but it that same

00:20:18,960 --> 00:20:22,679
ponent can be applied to any one other

00:20:20,970 --> 00:20:24,419
component inside of your deployment

00:20:22,679 --> 00:20:27,779
whether its rails suddenly monitoring

00:20:24,419 --> 00:20:29,880
postgres memcache whatever you have and

00:20:27,779 --> 00:20:31,470
what you get with juju is when you told

00:20:29,880 --> 00:20:33,419
juju the pattern that you want to use

00:20:31,470 --> 00:20:35,340
the topology you wish to execute in the

00:20:33,419 --> 00:20:36,990
environment it will allow you to

00:20:35,340 --> 00:20:38,610
download that repeat that the apology

00:20:36,990 --> 00:20:40,409
anywhere so what you can do is you could

00:20:38,610 --> 00:20:42,510
have a deployment that you use in

00:20:40,409 --> 00:20:44,429
production that you can capture and give

00:20:42,510 --> 00:20:46,890
the developers they can run it use

00:20:44,429 --> 00:20:48,450
locally using lexie containers in juju

00:20:46,890 --> 00:20:50,429
so they can repeat that same setup that

00:20:48,450 --> 00:20:54,870
you've done in production locally dev

00:20:50,429 --> 00:20:57,600
rev commit push that same declaration

00:20:54,870 --> 00:20:59,779
can be used in QA except the same thing

00:20:57,600 --> 00:21:02,669
you have in production in QA dev rev

00:20:59,779 --> 00:21:04,679
test and then you can reapply that to

00:21:02,669 --> 00:21:06,990
production so juju gives you the ability

00:21:04,679 --> 00:21:13,169
to repeat these patterns in a reliable

00:21:06,990 --> 00:21:16,890
insane fashion from any scale down so do

00:21:13,169 --> 00:21:18,440
some quick demonstrations of juju I've

00:21:16,890 --> 00:21:21,179
got this orange box here I'm going to

00:21:18,440 --> 00:21:22,919
has anyone ever does anyone managing

00:21:21,179 --> 00:21:24,779
OpenStack deploying OpenStack doing

00:21:22,919 --> 00:21:30,659
anything with OpenStack no okay it's

00:21:24,779 --> 00:21:32,279
pretty complex I'm very weary to demo it

00:21:30,659 --> 00:21:34,350
because there's a lot of stuff that goes

00:21:32,279 --> 00:21:37,279
on so i have this deploy script here and

00:21:34,350 --> 00:21:39,690
what it's doing is it's executing this

00:21:37,279 --> 00:21:42,990
bundle that i have and a bundle is just

00:21:39,690 --> 00:21:46,649
a gamma representation of environment so

00:21:42,990 --> 00:21:48,179
it defines a set of services where those

00:21:46,649 --> 00:21:49,730
services are in configuration for each

00:21:48,179 --> 00:21:51,960
of the services so charms expose

00:21:49,730 --> 00:21:53,490
relation data as well as configuration

00:21:51,960 --> 00:21:55,529
data for that stack so I've just

00:21:53,490 --> 00:21:57,510
declared this it's very quite it's quite

00:21:55,529 --> 00:22:02,760
large complex I think it back should be

00:21:57,510 --> 00:22:06,230
better to show you guys on in a GUI

00:22:02,760 --> 00:22:06,230
instead let me pull that up

00:22:13,830 --> 00:22:17,179
oh that's a good sign

00:22:24,460 --> 00:22:27,460
swelling

00:22:34,179 --> 00:22:37,200
there we go

00:22:40,559 --> 00:22:46,659
yes it's a self-signed sir on this

00:22:44,110 --> 00:22:52,049
little box here and then real quickly

00:22:46,659 --> 00:22:52,049
when they get a password to login oh

00:22:54,179 --> 00:23:02,200
good the passwords easy nobody saw that

00:22:59,610 --> 00:23:04,059
so juju in addition to giving you a

00:23:02,200 --> 00:23:07,900
command line as you've seen briefly hear

00:23:04,059 --> 00:23:10,210
things like running jeju status which

00:23:07,900 --> 00:23:11,289
gives me kind of a an output in the amal

00:23:10,210 --> 00:23:13,179
of what my environment looks like i have

00:23:11,289 --> 00:23:17,020
one machine that I bootstrap earlier for

00:23:13,179 --> 00:23:19,600
sake of time I have a juju GUI deploy to

00:23:17,020 --> 00:23:22,690
that environment and juju GUI itself as

00:23:19,600 --> 00:23:24,549
a charm and I'm executing this set of

00:23:22,690 --> 00:23:26,559
services against that which is open

00:23:24,549 --> 00:23:27,850
stack itself so we should see in a few

00:23:26,559 --> 00:23:31,240
moments a bunch of lights start

00:23:27,850 --> 00:23:32,710
flickering on the front you can see the

00:23:31,240 --> 00:23:35,080
gooey starts being populated with the

00:23:32,710 --> 00:23:38,919
services I pulled the deploy this is

00:23:35,080 --> 00:23:42,789
things like Nova compute nova can

00:23:38,919 --> 00:23:44,529
control or keystone my sequel SEF all

00:23:42,789 --> 00:23:45,970
those things that you need of course if

00:23:44,529 --> 00:23:48,940
you never worked with OpenStack all that

00:23:45,970 --> 00:23:50,559
means nothing to you but in a few

00:23:48,940 --> 00:23:52,149
moments as we see this thing dancing

00:23:50,559 --> 00:23:53,200
around I'm going to jump over to here to

00:23:52,149 --> 00:23:54,789
make it a little easier to understand

00:23:53,200 --> 00:23:57,610
this is what OpenStack essentially will

00:23:54,789 --> 00:23:59,350
look like at the end of the day it's a

00:23:57,610 --> 00:24:00,760
lot of services a lot of service is

00:23:59,350 --> 00:24:02,470
doing a lot of complex things it is

00:24:00,760 --> 00:24:03,970
essentially building a private cloud

00:24:02,470 --> 00:24:05,740
much like you would use in amazon but

00:24:03,970 --> 00:24:07,270
for yourself on your own hardware so

00:24:05,740 --> 00:24:09,279
your things like compute resources which

00:24:07,270 --> 00:24:12,880
is like ec2 you have things like object

00:24:09,279 --> 00:24:15,370
stores which is s3 you have things like

00:24:12,880 --> 00:24:17,049
our DBS all those things that you model

00:24:15,370 --> 00:24:18,580
in a private in a public cloud it can be

00:24:17,049 --> 00:24:21,130
modeled with OpenStack in a private

00:24:18,580 --> 00:24:23,799
cloud so what you do does is each one of

00:24:21,130 --> 00:24:25,330
these boxes is a service essentially it

00:24:23,799 --> 00:24:27,010
is a sorry it is a charm that

00:24:25,330 --> 00:24:28,570
encapsulates that and with juju you can

00:24:27,010 --> 00:24:30,190
do things like connect this charm to the

00:24:28,570 --> 00:24:32,470
service which has that protocol for

00:24:30,190 --> 00:24:33,490
communication between what the services

00:24:32,470 --> 00:24:35,529
and what it needs to provide to the

00:24:33,490 --> 00:24:36,549
service you can also scale pretty

00:24:35,529 --> 00:24:37,899
straightforwardly so if I need

00:24:36,549 --> 00:24:39,669
additional key stones which is the

00:24:37,899 --> 00:24:43,000
authentication method for OpenStack I

00:24:39,669 --> 00:24:48,880
can just simply say well I need 12 units

00:24:43,000 --> 00:24:50,350
of these I can commit this transaction a

00:24:48,880 --> 00:24:52,720
whole bunch of new units are going to

00:24:50,350 --> 00:24:54,010
pop up and juju will take care of that

00:24:52,720 --> 00:24:56,230
resource allocation problems

00:24:54,010 --> 00:24:57,940
says I need 12 more units I don't have

00:24:56,230 --> 00:24:59,350
any machines available in my pool it

00:24:57,940 --> 00:25:01,570
will contact the provider whether it's

00:24:59,350 --> 00:25:03,130
Maz whether it's an alex e container on

00:25:01,570 --> 00:25:05,500
your laptop whether it's an amazon

00:25:03,130 --> 00:25:07,000
instance in ec to whatever it is spin up

00:25:05,500 --> 00:25:09,340
the physical resources it needs to meet

00:25:07,000 --> 00:25:11,440
that constraint requirement put the code

00:25:09,340 --> 00:25:12,550
on there re execute all the events and

00:25:11,440 --> 00:25:13,390
replay essentially everything that's

00:25:12,550 --> 00:25:15,100
happened from the start of the

00:25:13,390 --> 00:25:17,440
deployment including relations and

00:25:15,100 --> 00:25:19,060
everything else and then manage that

00:25:17,440 --> 00:25:20,710
with in a pool of cluster so while the

00:25:19,060 --> 00:25:23,680
box hasn't changed we still only have

00:25:20,710 --> 00:25:25,630
one box if we go to the machine view we

00:25:23,680 --> 00:25:28,360
actually have a whole bunch of ton more

00:25:25,630 --> 00:25:32,820
Keystone machines and now we're up to 30

00:25:28,360 --> 00:25:34,900
machines in this environment so that's

00:25:32,820 --> 00:25:36,250
partially what juju does and that's how

00:25:34,900 --> 00:25:37,840
we use the model complexity as you can

00:25:36,250 --> 00:25:39,330
see here takes a little longer when

00:25:37,840 --> 00:25:45,280
you're actually using real bare metal

00:25:39,330 --> 00:25:47,440
let's build a mass so we can see things

00:25:45,280 --> 00:25:49,150
went from ready to being deploying so

00:25:47,440 --> 00:25:51,970
this means that mass is taking care of

00:25:49,150 --> 00:25:54,880
the operating system provisioning juju

00:25:51,970 --> 00:25:56,770
told Maz I need these machines with this

00:25:54,880 --> 00:25:59,290
operating system on them as it has all

00:25:56,770 --> 00:26:01,360
the resources required to fill that

00:25:59,290 --> 00:26:04,300
request and goes ahead and execute that

00:26:01,360 --> 00:26:05,890
so with a vm that turned on we have

00:26:04,300 --> 00:26:07,450
several physical machines that turned on

00:26:05,890 --> 00:26:09,460
they're all allocated to me so that's

00:26:07,450 --> 00:26:13,120
the hole through the process of

00:26:09,460 --> 00:26:14,650
allocation to provisioning I could do

00:26:13,120 --> 00:26:16,720
terrible things as an admin like turn

00:26:14,650 --> 00:26:18,430
stuff off randomly juju knows how to

00:26:16,720 --> 00:26:20,050
handle that as a response as well as

00:26:18,430 --> 00:26:24,820
machine went away what do you want me to

00:26:20,050 --> 00:26:26,200
do about that we could see from GG

00:26:24,820 --> 00:26:30,820
status outputs can actually be kind of

00:26:26,200 --> 00:26:32,350
long buck the less it now has an idea of

00:26:30,820 --> 00:26:33,880
what each of these machines is requested

00:26:32,350 --> 00:26:37,120
as it lets you know where the instance

00:26:33,880 --> 00:26:39,820
lives in mass this could be a an ec2 am

00:26:37,120 --> 00:26:41,350
I I'm not am I was the instance ID

00:26:39,820 --> 00:26:43,990
whatever the launch engine studies are

00:26:41,350 --> 00:26:46,270
called I don't quite remember sorry it's

00:26:43,990 --> 00:26:49,690
basic hardware characteristics it's an

00:26:46,270 --> 00:26:51,910
AMD 64 machine with four cores and 16

00:26:49,690 --> 00:26:53,470
gigs of RAM it's also a physical machine

00:26:51,910 --> 00:26:57,940
not a virtual one this one here is

00:26:53,470 --> 00:26:59,830
virtual and then I can see where are

00:26:57,940 --> 00:27:03,100
those machines map to so I can see that

00:26:59,830 --> 00:27:05,080
salamat ER is being mapped to lots of

00:27:03,100 --> 00:27:06,580
that example let's go to CEFs f's being

00:27:05,080 --> 00:27:07,600
mapped the machine one two and three and

00:27:06,580 --> 00:27:09,400
four

00:27:07,600 --> 00:27:10,840
juju also knows how to model density to

00:27:09,400 --> 00:27:13,690
an extent so you can say deployed the

00:27:10,840 --> 00:27:15,669
service as a Lexi or kvm container on a

00:27:13,690 --> 00:27:17,049
physical machine so if you don't want 30

00:27:15,669 --> 00:27:19,270
physical machines or don't have 30

00:27:17,049 --> 00:27:22,169
physical machines you can use a pretty

00:27:19,270 --> 00:27:26,559
beefy machine to allocate and confine

00:27:22,169 --> 00:27:28,299
resources in kvm or lexi and since these

00:27:26,559 --> 00:27:30,400
charms are written in any which way you

00:27:28,299 --> 00:27:32,799
may find that some charms and this is

00:27:30,400 --> 00:27:33,970
typically illuminated in the readme the

00:27:32,799 --> 00:27:35,500
way they're being deployed is using

00:27:33,970 --> 00:27:38,320
things like docker containers and such

00:27:35,500 --> 00:27:39,789
so in addition to things like OpenStack

00:27:38,320 --> 00:27:42,520
which are rather large we also have

00:27:39,789 --> 00:27:44,380
things like the ability to model Kuber

00:27:42,520 --> 00:27:45,850
Nettie's in a scale-out fashion so you

00:27:44,380 --> 00:27:47,020
can do kuber Nettie's deployed the bare

00:27:45,850 --> 00:27:48,820
metal the way you would on the Google

00:27:47,020 --> 00:27:52,059
compute engine and you can scale each

00:27:48,820 --> 00:27:54,159
opponent each component independently so

00:27:52,059 --> 00:27:55,780
qu bearnaise is attached to a docker

00:27:54,159 --> 00:27:57,280
base which allows you to say hey add

00:27:55,780 --> 00:28:00,460
these containers to my environment as

00:27:57,280 --> 00:28:01,720
you scale out docker it also grows the

00:28:00,460 --> 00:28:04,809
knowledge of where these machines are in

00:28:01,720 --> 00:28:06,370
flannel in addition to being registered

00:28:04,809 --> 00:28:07,919
in flannel through etsy d it also has

00:28:06,370 --> 00:28:10,809
Cooper Nettie's running on there as a as

00:28:07,919 --> 00:28:12,429
a kind of provisioning layer and

00:28:10,809 --> 00:28:14,230
orchestration layer master that knows

00:28:12,429 --> 00:28:16,419
how to orchestrate manage all of those

00:28:14,230 --> 00:28:17,590
sub machines in there so it's a little

00:28:16,419 --> 00:28:19,840
confusing a look at this from a top

00:28:17,590 --> 00:28:22,059
level down because basically what you

00:28:19,840 --> 00:28:23,409
have is you have flannel docker living

00:28:22,059 --> 00:28:25,270
on top of docker and Cooper Nettie's

00:28:23,409 --> 00:28:27,580
living on top of here and every time you

00:28:25,270 --> 00:28:30,250
add a unit of docker those services grow

00:28:27,580 --> 00:28:31,750
with it and then we have SED and coo

00:28:30,250 --> 00:28:33,190
brady's masters as separate services on

00:28:31,750 --> 00:28:37,960
their own machines managing that

00:28:33,190 --> 00:28:39,820
workflow so that's an example another

00:28:37,960 --> 00:28:41,530
example deployments there are hundreds

00:28:39,820 --> 00:28:44,289
of different pairing ways to deploy any

00:28:41,530 --> 00:28:46,390
service you'd like within juju we have a

00:28:44,289 --> 00:28:48,610
lot of people telcos especially are now

00:28:46,390 --> 00:28:51,700
using this kind of stuff Deutsche

00:28:48,610 --> 00:28:53,770
Telekom is using juju and mass to deploy

00:28:51,700 --> 00:28:56,409
their OpenStack installs they locally

00:28:53,770 --> 00:28:58,510
and a many other banks and telcos are

00:28:56,409 --> 00:29:00,490
doing the same as well we find

00:28:58,510 --> 00:29:03,700
especially exciting is that things that

00:29:00,490 --> 00:29:06,190
work on very small scale 1-10 machines

00:29:03,700 --> 00:29:08,740
work very well as well at very large

00:29:06,190 --> 00:29:10,450
scale and large distributed systems so

00:29:08,740 --> 00:29:11,799
juju has the ability to model at the

00:29:10,450 --> 00:29:15,490
very lowest level to the very highest

00:29:11,799 --> 00:29:19,299
level and scale in between there alright

00:29:15,490 --> 00:29:20,890
let's go back over here yeah services

00:29:19,299 --> 00:29:25,420
are still coming online

00:29:20,890 --> 00:29:26,530
I'll see mass is still the bhutanese up

00:29:25,420 --> 00:29:28,000
so they're all pretty much marked as

00:29:26,530 --> 00:29:29,680
deploy to the OS is there it's been

00:29:28,000 --> 00:29:32,020
handed off the juju now Zhi Zhu's doing

00:29:29,680 --> 00:29:34,090
its resource and provisioning and

00:29:32,020 --> 00:29:45,400
installing excuse me all the pieces that

00:29:34,090 --> 00:29:49,270
needs on to hear ya so that's

00:29:45,400 --> 00:29:50,740
essentially at a high level juju Maz how

00:29:49,270 --> 00:29:52,690
they relate to each other how you can do

00:29:50,740 --> 00:29:56,650
very complex deployments to still down

00:29:52,690 --> 00:29:58,240
into juju it's great if you already have

00:29:56,650 --> 00:30:00,310
existing tools that you're using if you

00:29:58,240 --> 00:30:02,200
wish to wrap those and be able to move

00:30:00,310 --> 00:30:03,460
them between clouds very quickly or

00:30:02,200 --> 00:30:05,440
other pieces of hardware very quickly

00:30:03,460 --> 00:30:08,490
you can use juju to model and wrap them

00:30:05,440 --> 00:30:11,440
quite efficiently and then deploy out

00:30:08,490 --> 00:30:12,460
I'm happy to dive into other examples

00:30:11,440 --> 00:30:15,840
and questions I don't have a little bit

00:30:12,460 --> 00:30:15,840
of time left so yeah

00:30:27,170 --> 00:30:31,880
sure so the question is is you have

00:30:30,320 --> 00:30:33,920
Foreman and puppet working in your

00:30:31,880 --> 00:30:36,500
environment currently and where does

00:30:33,920 --> 00:30:38,630
dude you fit into that picture so juju

00:30:36,500 --> 00:30:40,850
essentially becomes a replacement for

00:30:38,630 --> 00:30:42,350
four men at that point I don't know if

00:30:40,850 --> 00:30:44,930
we've wrapped for men I think we have

00:30:42,350 --> 00:30:46,250
rep Foreman this is form in the tool use

00:30:44,930 --> 00:30:49,460
from the command line not form in the

00:30:46,250 --> 00:30:52,490
process manager is maybe I'm thinking

00:30:49,460 --> 00:30:56,500
another thing this is forming the

00:30:52,490 --> 00:30:59,060
command line tool correct like the

00:30:56,500 --> 00:31:02,540
resource allocation tool at the plumbing

00:30:59,060 --> 00:31:03,970
tools deployment already yeah I maybe

00:31:02,540 --> 00:31:06,080
think of something slightly different

00:31:03,970 --> 00:31:10,040
really the thing that you're most

00:31:06,080 --> 00:31:11,750
interested in is the puppet scripts say

00:31:10,040 --> 00:31:13,280
define the machine Foreman does the

00:31:11,750 --> 00:31:15,590
string together of how those machines

00:31:13,280 --> 00:31:17,030
are all laid out so that's what juju

00:31:15,590 --> 00:31:19,430
would be doing in charms will be taking

00:31:17,030 --> 00:31:21,440
over that process so if Foreman and

00:31:19,430 --> 00:31:24,080
puppet work for you this probably isn't

00:31:21,440 --> 00:31:26,360
the solution for you if you're having

00:31:24,080 --> 00:31:27,410
problems moving past that if you're if

00:31:26,360 --> 00:31:28,750
you're having issues where you're

00:31:27,410 --> 00:31:31,010
fighting form and more often than not

00:31:28,750 --> 00:31:33,920
then dude you may be a potential

00:31:31,010 --> 00:31:35,330
solution for you there's at the other

00:31:33,920 --> 00:31:37,970
day it's always the right tool for the

00:31:35,330 --> 00:31:39,590
right job so Foreman and puppet are

00:31:37,970 --> 00:31:41,270
pretty solid example of something that

00:31:39,590 --> 00:31:43,070
works pretty well together there are a

00:31:41,270 --> 00:31:44,420
plethora of other tools that work very

00:31:43,070 --> 00:31:47,330
well together that solve a similar

00:31:44,420 --> 00:31:49,820
problem for this if you find that those

00:31:47,330 --> 00:31:51,590
are lacking we have we've essentially

00:31:49,820 --> 00:31:54,200
attacked the idea of orchestration from

00:31:51,590 --> 00:31:56,600
the top down so when we first designed

00:31:54,200 --> 00:31:58,490
the system we said how do we solve

00:31:56,600 --> 00:32:00,410
orchestration that's the problem we

00:31:58,490 --> 00:32:01,850
solved then implicitly we covered a lot

00:32:00,410 --> 00:32:03,380
of other topics underneath there how to

00:32:01,850 --> 00:32:06,110
deploy machines how to configure

00:32:03,380 --> 00:32:07,880
machines and to make that easier so that

00:32:06,110 --> 00:32:09,590
we're not choosing a particular

00:32:07,880 --> 00:32:10,970
technology or locking anyone to a

00:32:09,590 --> 00:32:12,710
particular idea we've opened up the

00:32:10,970 --> 00:32:14,810
spectrum of things you can wrap within a

00:32:12,710 --> 00:32:16,460
charm we're just saying juju is really

00:32:14,810 --> 00:32:17,750
this the juju really wants to be the

00:32:16,460 --> 00:32:20,180
thing that orchestrates and scale your

00:32:17,750 --> 00:32:21,980
services how you get the underlying

00:32:20,180 --> 00:32:23,960
machine to be up to the par with the

00:32:21,980 --> 00:32:25,670
application deployed is up to you it's

00:32:23,960 --> 00:32:27,350
it's a double-edged sword from what

00:32:25,670 --> 00:32:29,360
we've understood because people who are

00:32:27,350 --> 00:32:30,680
very interested in charm say well just

00:32:29,360 --> 00:32:33,080
tell me how to get started and we're

00:32:30,680 --> 00:32:36,590
like well anything you want it's all up

00:32:33,080 --> 00:32:38,600
to you so if you have a working

00:32:36,590 --> 00:32:40,940
configuration management tool already

00:32:38,600 --> 00:32:42,470
and you're looking to add the ability or

00:32:40,940 --> 00:32:43,700
some agility on top of that to scale

00:32:42,470 --> 00:32:45,230
between different architectures

00:32:43,700 --> 00:32:47,420
different operating systems different

00:32:45,230 --> 00:32:49,190
providers and environments juju maybe

00:32:47,420 --> 00:32:50,480
something is interested to you if what

00:32:49,190 --> 00:32:52,010
you have is working completely awesome

00:32:50,480 --> 00:32:53,630
and everything is automating your ops

00:32:52,010 --> 00:32:55,220
juju probably isn't something you want

00:32:53,630 --> 00:32:57,290
to dive and spend time into looking into

00:32:55,220 --> 00:33:01,060
but great question i hope i answered

00:32:57,290 --> 00:33:04,010
that satisfactory for you guys yeah um

00:33:01,060 --> 00:33:05,480
so i went for executor using um a

00:33:04,010 --> 00:33:08,140
foreman for example has two smart

00:33:05,480 --> 00:33:10,280
proxies taking care of dns dhcp whatever

00:33:08,140 --> 00:33:13,460
but for example booting up a new

00:33:10,280 --> 00:33:15,950
operating system so how is youtube doing

00:33:13,460 --> 00:33:19,040
that so so yeah that's a great question

00:33:15,950 --> 00:33:20,990
so jutsu is delegating all of that work

00:33:19,040 --> 00:33:22,430
to whatever for provisioning layer it's

00:33:20,990 --> 00:33:25,790
talking to so if it's talking to mass

00:33:22,430 --> 00:33:28,610
mass is handling the dns dhcp and the

00:33:25,790 --> 00:33:31,220
image push out if it's talking to amazon

00:33:28,610 --> 00:33:33,200
it's just simply requesting i need the

00:33:31,220 --> 00:33:35,060
official am i for a boon to or for

00:33:33,200 --> 00:33:37,310
windows that has clouded it enabled or

00:33:35,060 --> 00:33:40,400
for send toss with cloud in it enabled

00:33:37,310 --> 00:33:41,900
so it's using its leveraging more the

00:33:40,400 --> 00:33:43,550
provider to handle that method for you

00:33:41,900 --> 00:33:44,870
and it abstracts that away really all it

00:33:43,550 --> 00:33:46,370
cares about is I need a machine with

00:33:44,870 --> 00:33:49,490
this characteristics and these resources

00:33:46,370 --> 00:33:51,800
that I can ssh into so that's how it's

00:33:49,490 --> 00:33:54,020
doing that it's that's where we kind of

00:33:51,800 --> 00:33:55,940
drew the line in the sand we did you

00:33:54,020 --> 00:33:57,500
Jews we don't want to do we really just

00:33:55,940 --> 00:33:58,940
want to do whatever we the bare minimum

00:33:57,500 --> 00:34:00,980
required to get to so we can start

00:33:58,940 --> 00:34:04,100
orchestrating that's that's the layer

00:34:00,980 --> 00:34:05,900
we've taken so any other questions if

00:34:04,100 --> 00:34:07,250
not I'd be happy if people are curious

00:34:05,900 --> 00:34:08,750
about services they want to see deployed

00:34:07,250 --> 00:34:10,310
we can jump into the Charm School we've

00:34:08,750 --> 00:34:12,320
got a lot of is fees and vendors that

00:34:10,310 --> 00:34:13,640
have been charming their software so it

00:34:12,320 --> 00:34:20,710
makes it very easy to deploy through

00:34:13,640 --> 00:34:20,710
juju yes yes

00:34:23,160 --> 00:34:32,440
are you are we able to deploy to power

00:34:26,320 --> 00:34:34,000
eat yes juju ken yes so if you use a

00:34:32,440 --> 00:34:35,890
boot to as the base witcha bring to has

00:34:34,000 --> 00:34:39,060
support for power 8 both open power and

00:34:35,890 --> 00:34:41,860
little endian so if you're deploying

00:34:39,060 --> 00:34:42,880
with a boon to in that case that the

00:34:41,860 --> 00:34:44,380
operating system has to support that

00:34:42,880 --> 00:34:46,150
architecture before we can get there but

00:34:44,380 --> 00:34:49,200
a voodoo does in this case that you can

00:34:46,150 --> 00:34:53,200
deploy a workload on to power 8 and arm

00:34:49,200 --> 00:34:54,730
using virtually the same charm unless

00:34:53,200 --> 00:34:56,260
they're really only we're the only

00:34:54,730 --> 00:34:58,450
really constraint we've seen is that if

00:34:56,260 --> 00:35:00,220
you're using any java app on power 8 you

00:34:58,450 --> 00:35:01,840
should really be using ibm's java it's

00:35:00,220 --> 00:35:03,490
optimized for power but you're deployed

00:35:01,840 --> 00:35:05,080
is a standard application that doesn't

00:35:03,490 --> 00:35:07,390
have any kind of special requirements

00:35:05,080 --> 00:35:08,620
for packages it'll work on power 8 just

00:35:07,390 --> 00:35:10,510
like it works on arm just like it works

00:35:08,620 --> 00:35:11,980
on x86 and you can actually do

00:35:10,510 --> 00:35:13,510
benchmarking across the stack to see

00:35:11,980 --> 00:35:17,610
which architecture works best for you we

00:35:13,510 --> 00:35:17,610
found power to be quite fast actually

00:35:19,950 --> 00:35:24,640
we're not doing the enablement for

00:35:23,200 --> 00:35:26,230
operating systems other operating

00:35:24,640 --> 00:35:27,730
systems outside of a boom to I mean at

00:35:26,230 --> 00:35:29,620
the end of the day we're canonical we

00:35:27,730 --> 00:35:30,760
are going to so that's that's what we're

00:35:29,620 --> 00:35:33,310
most interested in that's where we have

00:35:30,760 --> 00:35:34,810
the most expertise around but if Santos

00:35:33,310 --> 00:35:36,310
were to grow support for power 8 and I'm

00:35:34,810 --> 00:35:37,690
sure the open power foundation is doing

00:35:36,310 --> 00:35:39,610
a lot of things to make sure if that

00:35:37,690 --> 00:35:42,340
operating systems do support those

00:35:39,610 --> 00:35:43,840
architectures as soon as that as soon as

00:35:42,340 --> 00:35:46,750
our operating system grows powerade

00:35:43,840 --> 00:35:48,160
support we will see it works in juju

00:35:46,750 --> 00:35:52,180
relatively straightforward that any

00:35:48,160 --> 00:35:54,790
changes great question any workloads

00:35:52,180 --> 00:35:58,540
anyone's curious is seeing we can watch

00:35:54,790 --> 00:36:00,550
grass grow by watching the GUI dance

00:35:58,540 --> 00:36:02,980
around and add stuff so we see services

00:36:00,550 --> 00:36:04,990
are coming online Steph is got a couple

00:36:02,980 --> 00:36:07,720
of units that are online the bar shows

00:36:04,990 --> 00:36:09,160
generally the health status so i have to

00:36:07,720 --> 00:36:10,420
running units they're good they've come

00:36:09,160 --> 00:36:13,150
online they're green they registered

00:36:10,420 --> 00:36:15,010
themselves one pending or one installing

00:36:13,150 --> 00:36:18,070
unit so it's still installing SEF is

00:36:15,010 --> 00:36:20,260
itself other services are still likely

00:36:18,070 --> 00:36:22,540
coming online it looks like Neutron

00:36:20,260 --> 00:36:23,680
gateways online a couple others I should

00:36:22,540 --> 00:36:24,700
have probably kicked this off at the

00:36:23,680 --> 00:36:25,750
beginning of my talk that would have

00:36:24,700 --> 00:36:28,570
been much more interesting to poke

00:36:25,750 --> 00:36:30,400
around in this but at the end of the day

00:36:28,570 --> 00:36:32,020
given about h2 takes about 15 minutes

00:36:30,400 --> 00:36:33,370
after about 15 minutes you'll have a

00:36:32,020 --> 00:36:34,840
whole cloud we can log into the

00:36:33,370 --> 00:36:37,480
OpenStack dashboard Launch instance

00:36:34,840 --> 00:36:40,120
is do nested virtualization all that

00:36:37,480 --> 00:36:41,320
crazy crap does anyone have anything

00:36:40,120 --> 00:36:43,630
else they're interesting is seeing maybe

00:36:41,320 --> 00:36:46,570
how this models a certain deployment a

00:36:43,630 --> 00:36:47,560
certain workflow a certain topic feel

00:36:46,570 --> 00:36:49,420
free to let me know we have a few more

00:36:47,560 --> 00:36:57,750
minutes or quite a few more minutes I

00:36:49,420 --> 00:36:57,750
may have talked a little too fast yes

00:37:06,240 --> 00:37:12,870
well so that's a great question so the

00:37:10,420 --> 00:37:15,640
question being is there any good topics

00:37:12,870 --> 00:37:17,440
or any good tutorials on how to set up a

00:37:15,640 --> 00:37:19,690
two node mass I assume you want to try

00:37:17,440 --> 00:37:21,130
things like OpenStack and stuff or

00:37:19,690 --> 00:37:28,900
deploy and just deploying jet you have

00:37:21,130 --> 00:37:34,840
two nodes that's all you have you'll

00:37:28,900 --> 00:37:37,110
also yes there are there is a there is a

00:37:34,840 --> 00:37:37,110
guide

00:37:45,670 --> 00:37:53,420
right so the best way to set up a very

00:37:50,119 --> 00:37:54,710
limited Maz node we actually we've done

00:37:53,420 --> 00:37:58,579
this I don't think we published thing

00:37:54,710 --> 00:38:00,740
I've done it at least once yeah I I

00:37:58,579 --> 00:38:02,000
personally have used Intel ducks the

00:38:00,740 --> 00:38:03,980
things that are in here to do this

00:38:02,000 --> 00:38:07,069
deployment but we recently did I

00:38:03,980 --> 00:38:08,630
recently did a deployment where I had a

00:38:07,069 --> 00:38:11,059
pretty beefy piece of hardware I

00:38:08,630 --> 00:38:14,750
installed mass at Alexi container with a

00:38:11,059 --> 00:38:16,730
bridge the parent and then I had kvm

00:38:14,750 --> 00:38:18,049
nodes turned on inside that parent that

00:38:16,730 --> 00:38:20,690
are using that bridge to do the

00:38:18,049 --> 00:38:22,280
communication so we can do the same DHCP

00:38:20,690 --> 00:38:24,109
and DNS that you'd want to do through

00:38:22,280 --> 00:38:25,880
that bridge through met it's very

00:38:24,109 --> 00:38:27,109
complicated setup but I haven't

00:38:25,880 --> 00:38:28,280
published instructions on this and I

00:38:27,109 --> 00:38:30,950
probably should you can actually do

00:38:28,280 --> 00:38:34,250
maths with just one node if you have the

00:38:30,950 --> 00:38:35,780
patience for it I don't have one but

00:38:34,250 --> 00:38:37,040
that's a great follow-up I'd be happy to

00:38:35,780 --> 00:38:44,780
write that up this evening and tomorrow

00:38:37,040 --> 00:38:49,160
and then publish it on my blog Marco

00:38:44,780 --> 00:38:50,569
cheffy calm so if you're interested or

00:38:49,160 --> 00:38:52,130
at least fog me afterwards I'll give you

00:38:50,569 --> 00:38:58,609
my email address or rather I guess I

00:38:52,130 --> 00:39:01,220
should just go to this final slide find

00:38:58,609 --> 00:39:02,450
me by those contact methods if you have

00:39:01,220 --> 00:39:05,180
any questions in general I'm happy to

00:39:02,450 --> 00:39:07,190
answer them juju Maz a boon to not a

00:39:05,180 --> 00:39:08,240
boon to questions about cats I have a

00:39:07,190 --> 00:39:10,099
couple of answers about those

00:39:08,240 --> 00:39:11,960
interesting random factoids if you're

00:39:10,099 --> 00:39:13,670
going to a trivia night let me know be

00:39:11,960 --> 00:39:16,849
happy to fill you out with a random

00:39:13,670 --> 00:39:19,819
trivial information does anyone have any

00:39:16,849 --> 00:39:21,230
of the digital questions we continue

00:39:19,819 --> 00:39:22,790
watching grass grow we can deploy other

00:39:21,230 --> 00:39:26,059
things i can break stuff and pretty good

00:39:22,790 --> 00:39:28,280
at that as well doesn't even have to be

00:39:26,059 --> 00:39:32,630
juju related at this point gasps any

00:39:28,280 --> 00:39:34,609
questions it's a free forum we still

00:39:32,630 --> 00:39:37,760
have 20 and more minutes in lunch so we

00:39:34,609 --> 00:39:44,750
have time for questions I'm so sorry I

00:39:37,760 --> 00:39:48,109
got to talk a lot slower next time this

00:39:44,750 --> 00:39:51,770
one here yes um yeah I'd be happy to

00:39:48,109 --> 00:39:55,040
talk about the hardware in it so high I

00:39:51,770 --> 00:39:57,410
can also I think vention a general bar

00:39:55,040 --> 00:39:59,090
right so we don't actually sell this we

00:39:57,410 --> 00:40:01,040
buy it from a manufacturer in the UK

00:39:59,090 --> 00:40:03,200
called tranquil we just buy it from them

00:40:01,040 --> 00:40:06,830
this is stuff that we take along with us

00:40:03,200 --> 00:40:09,380
to customer sites conferences such as

00:40:06,830 --> 00:40:11,000
this one and it's great to show how math

00:40:09,380 --> 00:40:12,950
works and how juju works on top of that

00:40:11,000 --> 00:40:14,180
how bare metal is story if you can

00:40:12,950 --> 00:40:17,600
imagine everything we did on bare metal

00:40:14,180 --> 00:40:22,340
we can do in the clouds clouds man it

00:40:17,600 --> 00:40:25,640
has a 10 Intel knucks there's one nut

00:40:22,340 --> 00:40:27,230
that has to nicks it's basically has an

00:40:25,640 --> 00:40:28,730
outside Nick so I'm actually routing my

00:40:27,230 --> 00:40:29,690
laptop through the internal network

00:40:28,730 --> 00:40:31,880
that's how I can connect to it so

00:40:29,690 --> 00:40:34,700
quickly but there's another network that

00:40:31,880 --> 00:40:36,260
goes outside of it so I'm as mad as

00:40:34,700 --> 00:40:37,580
really wants to use to nick's one for

00:40:36,260 --> 00:40:39,380
the outside network and then it controls

00:40:37,580 --> 00:40:40,310
everything else inside of its scope you

00:40:39,380 --> 00:40:42,800
don't have to run it that way but

00:40:40,310 --> 00:40:46,280
otherwise you won't get things like dhcp

00:40:42,800 --> 00:40:50,720
or dns management you just do basic dumb

00:40:46,280 --> 00:40:52,670
metal management the those node 0 the

00:40:50,720 --> 00:40:55,280
very first one here the the one light in

00:40:52,670 --> 00:40:57,170
the front here somewhere in there it has

00:40:55,280 --> 00:40:59,270
a two terabyte hard drive on it that has

00:40:57,170 --> 00:41:01,340
the entire blue archive mirrored on it

00:40:59,270 --> 00:41:04,910
so and get really fast local offline

00:41:01,340 --> 00:41:09,800
deployments outside of that each one of

00:41:04,910 --> 00:41:13,150
the Knux has I don't know like a whole

00:41:09,800 --> 00:41:17,960
bunch of discs that's the technical term

00:41:13,150 --> 00:41:19,070
I don't know why I didn't gather that

00:41:17,960 --> 00:41:22,640
that would've been really cool to show

00:41:19,070 --> 00:41:25,730
they're like 250 260 gigs of discs they

00:41:22,640 --> 00:41:27,380
all have one Nick later versions have to

00:41:25,730 --> 00:41:29,800
nix so you can actually do very complex

00:41:27,380 --> 00:41:31,970
network models and bonded necks and

00:41:29,800 --> 00:41:33,320
virtual software-defined networks and

00:41:31,970 --> 00:41:37,940
all the fun stuff that people do these

00:41:33,320 --> 00:41:40,790
days and data centers that's essentially

00:41:37,940 --> 00:41:42,500
it uses Intel's amt protocol to

00:41:40,790 --> 00:41:44,480
communicate with it's like ipmi but

00:41:42,500 --> 00:41:47,900
intel specific it only is on one version

00:41:44,480 --> 00:41:50,870
the Knux it also has one power supply

00:41:47,900 --> 00:41:52,490
and only one fan in the back for the

00:41:50,870 --> 00:41:54,020
power supply all the Knux are actually

00:41:52,490 --> 00:41:56,840
passively cooled by these heat sinks on

00:41:54,020 --> 00:41:59,480
the side so it's very quiet it's very

00:41:56,840 --> 00:42:02,170
power efficient there aren't many moving

00:41:59,480 --> 00:42:05,030
parts but I still find ways to break it

00:42:02,170 --> 00:42:07,340
so these are these they're from tranquil

00:42:05,030 --> 00:42:08,990
they're like they're over ten thousand

00:42:07,340 --> 00:42:09,980
euro box

00:42:08,990 --> 00:42:11,560
this is not something you'd want to buy

00:42:09,980 --> 00:42:15,080
and put your data center it's it's all

00:42:11,560 --> 00:42:16,640
it's all commodity hardware you can pick

00:42:15,080 --> 00:42:19,490
up at the store it's just in a very nice

00:42:16,640 --> 00:42:22,280
presentable easily travel case it's

00:42:19,490 --> 00:42:25,580
quite nicely branded as well so that's

00:42:22,280 --> 00:42:27,110
the orange box more or less but it is

00:42:25,580 --> 00:42:29,630
very cool it's very fun to have it

00:42:27,110 --> 00:42:34,010
conferences it's very interesting piece

00:42:29,630 --> 00:42:39,980
of hardware yeah so a great question we

00:42:34,010 --> 00:42:40,970
have like 15 more minutes how's everyone

00:42:39,980 --> 00:42:42,650
doing the conference so far good

00:42:40,970 --> 00:42:44,660
conference so far yeah I know it's I

00:42:42,650 --> 00:42:48,380
know it's still first day I know you

00:42:44,660 --> 00:42:55,840
guys got this talking you were like this

00:42:48,380 --> 00:43:00,350
guy wow GG okay any more questions or

00:42:55,840 --> 00:43:02,990
shall we end it at this time and simply

00:43:00,350 --> 00:43:04,790
leave it here until there until the next

00:43:02,990 --> 00:43:10,220
track continue so you can take on

00:43:04,790 --> 00:43:11,780
another four unit what does YouTube okay

00:43:10,220 --> 00:43:15,250
no negative feedback so i guess that's

00:43:11,780 --> 00:43:15,250

YouTube URL: https://www.youtube.com/watch?v=ApiYXi35xPM


