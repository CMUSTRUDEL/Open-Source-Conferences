Title: OSDC 2015: Martin Gerhard Loschwitz - Kristian KÃ¶hntopp | 45 Minutes of OpenStack Hate
Publication date: 2015-04-30
Playlist: OSDC 2015 | Open Source Data Center Conference
Description: 
	OpenStack has been dominating the news on Open Source cloud computing for more than two years now - and there is no end in sight for the hype. If you have been looking into cloud computing, you will most likely have considered OpenStack as a possible solution. You will also have heard success stories of large organizations such as Rackspace or CERN. And of course people told you about all the glittering parties held during the semi-annual OpenStack summits.

What you probably haven't heard that often are stories about all the occasions where OpenStack will blow up right in your face. At SysEleven, we've been working on an OpenStack platform for more than a year now - and we would like to share our experiences with you in this presentation. We'll explain why we have decided to go with OpenStack in the first place, what problems we have ran into and how we solved them. We'll demonstrate what our platform looks like at the moment and what challenges we are currently working on. At the end, you will have a better understanding of what OpenStack means for ISPs and what kind of trouble you are signing up for when becoming an OpenStacker.
Captions: 
	00:00:06,580 --> 00:00:12,250
hello yeah this is Martin Martin

00:00:13,260 --> 00:00:17,180
tightened that means he now

00:00:15,769 --> 00:00:19,029
actually make things work instead of

00:00:17,180 --> 00:00:23,359
explaining them and then walking away

00:00:19,029 --> 00:00:25,520
and yeah all right so welcome everybody

00:00:23,359 --> 00:00:26,720
to this presentation the the lovely

00:00:25,520 --> 00:00:28,759
voice you have just heard belongs to

00:00:26,720 --> 00:00:32,000
Christian Kuhn table who is probably

00:00:28,759 --> 00:00:36,290
known to most of you still from his role

00:00:32,000 --> 00:00:38,539
as a database consultant developer

00:00:36,290 --> 00:00:41,090
whatever at booking.com um where he was

00:00:38,539 --> 00:00:43,480
active for some years now and we're

00:00:41,090 --> 00:00:46,840
working for a company called 211 and

00:00:43,480 --> 00:00:49,850
that's a hosted that dos does mostly

00:00:46,840 --> 00:00:53,890
ecommerce hosting what we're doing

00:00:49,850 --> 00:00:56,090
actually is trying to build the the

00:00:53,890 --> 00:00:58,940
addition or replacement of the current

00:00:56,090 --> 00:01:02,660
hosting platform and that is supposed to

00:00:58,940 --> 00:01:04,519
be running on OpenStack we've been

00:01:02,660 --> 00:01:06,590
trying that for a year and our

00:01:04,519 --> 00:01:10,430
experience where we are trying to

00:01:06,590 --> 00:01:12,049
explain them here and one thing we need

00:01:10,430 --> 00:01:13,610
to explain is I just realized earlier

00:01:12,049 --> 00:01:15,049
this morning this conference now has a

00:01:13,610 --> 00:01:17,840
code of conduct which it has for the

00:01:15,049 --> 00:01:19,399
first time at least I remember and this

00:01:17,840 --> 00:01:22,819
kind of conduct states that we are

00:01:19,399 --> 00:01:24,950
supposed to not use intimidation or

00:01:22,819 --> 00:01:26,630
harassment during the presentation or

00:01:24,950 --> 00:01:28,639
during the whole conference which

00:01:26,630 --> 00:01:30,859
obviously is going to be a bit hard in a

00:01:28,639 --> 00:01:33,649
presentation that's titled 45 minutes of

00:01:30,859 --> 00:01:35,359
OpenStack hate so we decided to add this

00:01:33,649 --> 00:01:39,560
parental advisory to the presentation

00:01:35,359 --> 00:01:41,450
should we be using words that your

00:01:39,560 --> 00:01:44,329
mother wouldn't want you to use just

00:01:41,450 --> 00:01:47,209
don't use them and we apologize that

00:01:44,329 --> 00:01:48,829
ones for that so every good presentation

00:01:47,209 --> 00:01:50,389
needs to start with involving the

00:01:48,829 --> 00:01:53,810
audience who of you guys has heard of

00:01:50,389 --> 00:02:00,759
OpenStack who of you guys is using

00:01:53,810 --> 00:02:04,849
OpenStack in central action introduction

00:02:00,759 --> 00:02:06,319
no okay okay that said makes my next

00:02:04,849 --> 00:02:10,490
question moot because of the most would

00:02:06,319 --> 00:02:12,200
be it does it hurt the interesting thing

00:02:10,490 --> 00:02:16,370
about OpenStack and I guess you're

00:02:12,200 --> 00:02:18,200
mostly here because you have read about

00:02:16,370 --> 00:02:20,209
the subject all the time now newspapers

00:02:18,200 --> 00:02:22,459
and whatnot is that OpenStack is quite a

00:02:20,209 --> 00:02:24,200
high project at the moment so they're

00:02:22,459 --> 00:02:26,480
hardly is any project in the free and

00:02:24,200 --> 00:02:29,630
open source community that would have as

00:02:26,480 --> 00:02:33,500
much momentum in its public reports

00:02:29,630 --> 00:02:37,130
and the public as OpenStack does have at

00:02:33,500 --> 00:02:38,690
the moment and whenever you see somebody

00:02:37,130 --> 00:02:40,790
talking about cloud computing you will

00:02:38,690 --> 00:02:43,040
realize that most large vendors by now

00:02:40,790 --> 00:02:44,770
support OpenStack officially or at least

00:02:43,040 --> 00:02:47,570
supported by adding development

00:02:44,770 --> 00:02:49,550
capabilities and by spending money to

00:02:47,570 --> 00:02:51,500
make OpenStack work as a project better

00:02:49,550 --> 00:02:54,500
than it is working at this point in time

00:02:51,500 --> 00:02:55,970
and this obviously raises some

00:02:54,500 --> 00:02:59,030
interesting questions because many

00:02:55,970 --> 00:03:01,100
companies willing to introduce a cloud

00:02:59,030 --> 00:03:04,430
computing setup are facing a number of

00:03:01,100 --> 00:03:06,380
questions and vendors supporting and

00:03:04,430 --> 00:03:08,330
selling OpenStack solutions will have

00:03:06,380 --> 00:03:10,340
answers for you so whenever you look

00:03:08,330 --> 00:03:12,110
into solutions that are pre bundled such

00:03:10,340 --> 00:03:15,920
as right at OpenStack distributions and

00:03:12,110 --> 00:03:18,500
whatnot you will see the same arguments

00:03:15,920 --> 00:03:21,710
popping up all the time we have a number

00:03:18,500 --> 00:03:23,870
of reports about OpenStack such as the

00:03:21,710 --> 00:03:25,460
ones taken here the German version of

00:03:23,870 --> 00:03:27,260
this presentation has one that is even

00:03:25,460 --> 00:03:28,400
funnier talking about monkeys and

00:03:27,260 --> 00:03:30,500
OpenStack and what not

00:03:28,400 --> 00:03:31,970
in fact OpenStack is in the media all

00:03:30,500 --> 00:03:34,070
the time and whenever you do something

00:03:31,970 --> 00:03:35,030
with OpenStack vendors will promise you

00:03:34,070 --> 00:03:37,430
lots of things

00:03:35,030 --> 00:03:39,320
whiners will promise you to deliver

00:03:37,430 --> 00:03:40,880
something that is very similar to what

00:03:39,320 --> 00:03:42,920
you can see here including the weather

00:03:40,880 --> 00:03:44,810
although this should make you suspicious

00:03:42,920 --> 00:03:47,570
already because as you can see there are

00:03:44,810 --> 00:03:49,970
no clouds in this picture and every

00:03:47,570 --> 00:03:51,890
OpenStack administrator has a quite or

00:03:49,970 --> 00:03:53,870
every person that expects to become an

00:03:51,890 --> 00:03:55,460
OpenStack operator has a very clear

00:03:53,870 --> 00:03:58,940
understanding of what this job is going

00:03:55,460 --> 00:04:01,190
to be so they will be seeing themselves

00:03:58,940 --> 00:04:04,400
in front of a large control room pulling

00:04:01,190 --> 00:04:07,700
all the things and pressing buttons and

00:04:04,400 --> 00:04:09,080
whatnot and the reality sadly is a bit

00:04:07,700 --> 00:04:11,180
different from what most administrators

00:04:09,080 --> 00:04:15,260
expect to get to get when they use their

00:04:11,180 --> 00:04:17,600
pizza so at least this is the experience

00:04:15,260 --> 00:04:19,430
we've made when you take one of the

00:04:17,600 --> 00:04:21,290
OpenStack pre-packed products out of the

00:04:19,430 --> 00:04:23,270
box that misses what you will be doing

00:04:21,290 --> 00:04:25,820
all the time and your role as system

00:04:23,270 --> 00:04:28,040
administrator and this brings up quite

00:04:25,820 --> 00:04:29,960
an interesting question what is it that

00:04:28,040 --> 00:04:32,720
we want to do so what is what is the

00:04:29,960 --> 00:04:34,850
product supposed to do from the the

00:04:32,720 --> 00:04:36,980
point of view of the underlay of the

00:04:34,850 --> 00:04:38,960
actual physical hardware what we want to

00:04:36,980 --> 00:04:42,520
do is we want to be able to run any VM

00:04:38,960 --> 00:04:45,069
anywhere and that means we need to

00:04:42,520 --> 00:04:48,099
be able to build networking that takes

00:04:45,069 --> 00:04:49,449
any number of VMs on any physical host

00:04:48,099 --> 00:04:51,819
and put them together in the virtual

00:04:49,449 --> 00:04:54,220
network that is isolated and we need to

00:04:51,819 --> 00:04:56,800
be able to bring the persistent state

00:04:54,220 --> 00:04:59,319
that is in some volumes anywhere in the

00:04:56,800 --> 00:05:01,300
network to wherever the VM is running at

00:04:59,319 --> 00:05:02,979
the current point of time so we have two

00:05:01,300 --> 00:05:04,990
problems that we need to solve from the

00:05:02,979 --> 00:05:06,250
point of view of the underlay that are

00:05:04,990 --> 00:05:08,050
actually pretty hard and that is

00:05:06,250 --> 00:05:11,080
software-defined storage and so for

00:05:08,050 --> 00:05:13,389
different networking from the point of

00:05:11,080 --> 00:05:14,770
view of the overlay what we want to do

00:05:13,389 --> 00:05:16,870
is we want to write script that

00:05:14,770 --> 00:05:20,349
describes our network and the switches

00:05:16,870 --> 00:05:23,860
and the machinery and build this as

00:05:20,349 --> 00:05:26,020
virtual hardware and then execute it and

00:05:23,860 --> 00:05:29,409
that would then magically materialize

00:05:26,020 --> 00:05:32,729
that xavier with total disregard for any

00:05:29,409 --> 00:05:34,630
physical constraints it will just appear

00:05:32,729 --> 00:05:37,479
by running the script so we have

00:05:34,630 --> 00:05:40,120
infrastructure as code why do we want to

00:05:37,479 --> 00:05:41,409
do that because we for pretty little

00:05:40,120 --> 00:05:42,969
money we get actually pretty good

00:05:41,409 --> 00:05:46,020
hardware and unless you're running a

00:05:42,969 --> 00:05:48,639
database at booking you don't have

00:05:46,020 --> 00:05:50,440
requirements that are that big less

00:05:48,639 --> 00:05:52,900
money doesn't buy a half the money

00:05:50,440 --> 00:05:55,150
wouldn't buy your box half the side size

00:05:52,900 --> 00:05:56,590
but something much smaller so what you

00:05:55,150 --> 00:05:58,449
need to do is you need to buy a big box

00:05:56,590 --> 00:06:01,469
and cut it up into small parts that are

00:05:58,449 --> 00:06:04,599
the right size and then sell the parts

00:06:01,469 --> 00:06:06,699
anyway many where means that you have

00:06:04,599 --> 00:06:08,560
here the physical network a bunch of

00:06:06,699 --> 00:06:10,449
hosts that are networked together in a

00:06:08,560 --> 00:06:15,490
kind of full mesh then you have a bunch

00:06:10,449 --> 00:06:16,779
of VMs on each host and this this and

00:06:15,490 --> 00:06:18,580
this host they form together a network

00:06:16,779 --> 00:06:21,310
there's some kind of storage somewhere

00:06:18,580 --> 00:06:23,199
attached to that and you need to

00:06:21,310 --> 00:06:25,150
connection to the outside world so you

00:06:23,199 --> 00:06:29,020
have these components that you need to

00:06:25,150 --> 00:06:34,289
manage some of these problems are hard

00:06:29,020 --> 00:06:36,940
the first hard problem is storage so

00:06:34,289 --> 00:06:38,830
actually what looks like an easy problem

00:06:36,940 --> 00:06:41,860
would be running a VM with ephemeral

00:06:38,830 --> 00:06:45,039
storage you start a VM it has an empty

00:06:41,860 --> 00:06:47,380
local disk and when you terminate the VM

00:06:45,039 --> 00:06:49,569
the local disk is also gone but from the

00:06:47,380 --> 00:06:53,080
point of the view of the underlay that

00:06:49,569 --> 00:06:54,370
is a bit more complicated because if you

00:06:53,080 --> 00:06:56,400
actually need to do something to the

00:06:54,370 --> 00:06:58,320
physical host you would terminate

00:06:56,400 --> 00:07:00,600
all the VMS and at some point of time

00:06:58,320 --> 00:07:05,520
the customer probably gets annoyed so

00:07:00,600 --> 00:07:07,889
what you would want is F shared storage

00:07:05,520 --> 00:07:10,020
so that you can migrate VMs across the

00:07:07,889 --> 00:07:11,190
network without too much interruption so

00:07:10,020 --> 00:07:12,660
that you can do maintenance to a

00:07:11,190 --> 00:07:15,210
physical host without actually shutting

00:07:12,660 --> 00:07:16,680
down the VMS that have been previously

00:07:15,210 --> 00:07:19,830
running on that horse so that you can

00:07:16,680 --> 00:07:21,930
evacuate that so the first lesson when

00:07:19,830 --> 00:07:23,610
you are planning an open set network is

00:07:21,930 --> 00:07:25,380
that there is no such thing as local

00:07:23,610 --> 00:07:28,199
storage analyst the customer

00:07:25,380 --> 00:07:29,880
specifically asks for a volume on local

00:07:28,199 --> 00:07:31,650
storage that is probably a fusion i/o or

00:07:29,880 --> 00:07:34,410
something but even then you should

00:07:31,650 --> 00:07:41,070
probably talk you owe me a drink

00:07:34,410 --> 00:07:43,050
I drink whiskey thank you even then when

00:07:41,070 --> 00:07:44,550
the customer requires say a local

00:07:43,050 --> 00:07:47,789
fusion-io you should probably talk to

00:07:44,550 --> 00:07:51,389
them because they are either building a

00:07:47,789 --> 00:07:53,610
failure point into their thing or they

00:07:51,389 --> 00:07:54,990
still deal with network latency because

00:07:53,610 --> 00:07:56,780
they still need to ship the data from

00:07:54,990 --> 00:07:59,430
the local storage to somewhere else

00:07:56,780 --> 00:08:02,789
local storage is never a good idea and

00:07:59,430 --> 00:08:04,440
not a legal default then you have VMs

00:08:02,789 --> 00:08:07,460
with volumes volumes this persistent

00:08:04,440 --> 00:08:10,080
storage that lives longer than your VM

00:08:07,460 --> 00:08:11,610
and that means that the riots are

00:08:10,080 --> 00:08:15,479
probably remote and they are probably

00:08:11,610 --> 00:08:16,530
real and redundant so the relevant

00:08:15,479 --> 00:08:18,750
metrics you have to deal with this

00:08:16,530 --> 00:08:22,130
bandwidth and megabytes per second

00:08:18,750 --> 00:08:26,430
I hope I owe operations per second

00:08:22,130 --> 00:08:29,130
multi-threaded and the hardest seems to

00:08:26,430 --> 00:08:31,110
be latency that is i/o operations per

00:08:29,130 --> 00:08:34,169
second single threaded and you can do

00:08:31,110 --> 00:08:38,459
the second i/o only if the first F sync

00:08:34,169 --> 00:08:40,409
or if data soon has returned they all

00:08:38,459 --> 00:08:43,919
these limits all come from the network

00:08:40,409 --> 00:08:47,250
and the the underlying properties of the

00:08:43,919 --> 00:08:49,230
network the megabytes per second for

00:08:47,250 --> 00:08:51,000
example you doing rights over the

00:08:49,230 --> 00:08:54,450
network and if you have a 10 gig link

00:08:51,000 --> 00:08:56,550
and you need to do all writes twice then

00:08:54,450 --> 00:08:58,410
you are looking at about 600 megabytes

00:08:56,550 --> 00:09:00,800
per second that you can get tops no

00:08:58,410 --> 00:09:04,589
matter how fast your storage is or how

00:09:00,800 --> 00:09:08,790
raid it and and interleaved your storage

00:09:04,589 --> 00:09:10,200
is and if you're looking at sequentially

00:09:08,790 --> 00:09:12,240
f6 per second you're looking at

00:09:10,200 --> 00:09:14,370
an ip-based network over a 10 gig link

00:09:12,240 --> 00:09:16,470
then you're looking at about 10,000

00:09:14,370 --> 00:09:19,680
maybe 15,000 F things per second that

00:09:16,470 --> 00:09:21,240
you can do and if you need more then

00:09:19,680 --> 00:09:24,360
you're looking into something that is

00:09:21,240 --> 00:09:28,020
not running IP that is InfiniBand based

00:09:24,360 --> 00:09:30,720
and that is from the data center

00:09:28,020 --> 00:09:33,090
operations point of view a big pain so

00:09:30,720 --> 00:09:34,710
you're going to avoid this as long as

00:09:33,090 --> 00:09:37,730
you can and you're going to do this only

00:09:34,710 --> 00:09:37,730
if you absolutely have to

00:09:37,920 --> 00:09:42,980
something scale easily after the

00:09:40,320 --> 00:09:45,570
physical limits some are harder to scale

00:09:42,980 --> 00:09:48,270
and the typical from an e-commerce

00:09:45,570 --> 00:09:54,920
hosters point of view thing is a MySQL

00:09:48,270 --> 00:09:57,270
slave that is running on on such volume

00:09:54,920 --> 00:09:59,360
because that is running single threaded

00:09:57,270 --> 00:10:02,370
you're looking basically at this number

00:09:59,360 --> 00:10:03,750
and that means that the first test that

00:10:02,370 --> 00:10:06,390
you need to do with any storage is

00:10:03,750 --> 00:10:08,010
testing that so you're basically having

00:10:06,390 --> 00:10:10,020
a very very simple test you're

00:10:08,010 --> 00:10:13,560
generating a hundred cake file you're

00:10:10,020 --> 00:10:15,720
starting a Pheo or another IO tester and

00:10:13,560 --> 00:10:19,290
you're running a 16 K random write

00:10:15,720 --> 00:10:22,050
benchmark and you're looking at the iOS

00:10:19,290 --> 00:10:24,150
per second that you get when that comes

00:10:22,050 --> 00:10:25,890
out with adequate numbers then you can

00:10:24,150 --> 00:10:27,690
look at all the other things if that

00:10:25,890 --> 00:10:28,860
doesn't come up with adequate numbers

00:10:27,690 --> 00:10:32,420
then you are looking at the wrong kind

00:10:28,860 --> 00:10:34,920
of storage and you need something else

00:10:32,420 --> 00:10:37,470
the default that OpenStack delivers is

00:10:34,920 --> 00:10:40,440
basically the problem is left as an

00:10:37,470 --> 00:10:43,290
exercise to the reader because of the

00:10:40,440 --> 00:10:46,470
buyer and is in this case because what

00:10:43,290 --> 00:10:48,660
they deliver is not very useful but they

00:10:46,470 --> 00:10:49,950
have this and storage vendors are

00:10:48,660 --> 00:10:54,000
totally in love with that approach

00:10:49,950 --> 00:10:56,610
because the suggestions that you go by a

00:10:54,000 --> 00:10:59,970
filer and if you're running this not at

00:10:56,610 --> 00:11:02,490
Hostos care but at say Department to

00:10:59,970 --> 00:11:04,800
compute server level than buying a filer

00:11:02,490 --> 00:11:06,510
is probably also an adequate solution

00:11:04,800 --> 00:11:09,030
but if you're doing this at enterprise

00:11:06,510 --> 00:11:10,440
scale or as a hoster that doesn't work

00:11:09,030 --> 00:11:12,480
you need some kind of distributed

00:11:10,440 --> 00:11:15,480
storage the default solution for that is

00:11:12,480 --> 00:11:18,620
safe and safe is actually quite good on

00:11:15,480 --> 00:11:21,080
the bandwidth the department it's it's

00:11:18,620 --> 00:11:23,820
basically able to saturate the network

00:11:21,080 --> 00:11:27,120
it has very good motivated I hope

00:11:23,820 --> 00:11:28,830
1,200 or more easily done and if you if

00:11:27,120 --> 00:11:31,230
you scale this up if more this this

00:11:28,830 --> 00:11:33,780
actually goes up and it's quite robust

00:11:31,230 --> 00:11:36,480
we have been testing a safe installation

00:11:33,780 --> 00:11:38,490
abusing this quite a bit you can take

00:11:36,480 --> 00:11:41,460
one of these OSD storage controller

00:11:38,490 --> 00:11:44,100
demons and Zig stop them so that they

00:11:41,460 --> 00:11:46,080
can't get replaced then wait for the

00:11:44,100 --> 00:11:48,000
cluster to degrade then they can't the

00:11:46,080 --> 00:11:49,350
demon so that it wakes up and it

00:11:48,000 --> 00:11:51,600
recovers from that you can go on to a

00:11:49,350 --> 00:11:53,550
subdirectory delete some data and in the

00:11:51,600 --> 00:11:55,680
next deep scrub that will discover that

00:11:53,550 --> 00:12:02,340
and repair that so that that is

00:11:55,680 --> 00:12:04,620
impressive engineering it is using a

00:12:02,340 --> 00:12:06,990
hash algorithm that is based on the

00:12:04,620 --> 00:12:08,550
topology underneath so if the topology

00:12:06,990 --> 00:12:11,160
of the cluster changes because something

00:12:08,550 --> 00:12:12,840
falls over it's actually replicating

00:12:11,160 --> 00:12:14,640
more and distributing more data then

00:12:12,840 --> 00:12:17,670
strictly is necessary to recover from

00:12:14,640 --> 00:12:19,710
the failure and because of that you need

00:12:17,670 --> 00:12:22,950
a second background network only for

00:12:19,710 --> 00:12:25,590
safe and for its replication so that it

00:12:22,950 --> 00:12:28,920
doesn't affect the front network that

00:12:25,590 --> 00:12:31,860
you're using and it's not very good at

00:12:28,920 --> 00:12:33,990
sequential IOPS when we do the masker

00:12:31,860 --> 00:12:35,910
benchmark with this we are seeing 200

00:12:33,990 --> 00:12:38,640
I owe operations per second if you're

00:12:35,910 --> 00:12:41,640
trying to boot the 18 gigabyte default

00:12:38,640 --> 00:12:43,500
Windows 8 one volume on the safe volume

00:12:41,640 --> 00:12:45,930
it takes about 15 minutes to boot the

00:12:43,500 --> 00:12:48,540
windows and that is not really

00:12:45,930 --> 00:12:51,150
acceptable so we need proper tarry

00:12:48,540 --> 00:12:54,120
components in our open star cluster in

00:12:51,150 --> 00:12:55,530
order to make it work that's no longer a

00:12:54,120 --> 00:12:58,740
pure play solution and that is not

00:12:55,530 --> 00:13:01,050
really possible you either have a filer

00:12:58,740 --> 00:13:03,270
or some kind of preparatory storage that

00:13:01,050 --> 00:13:05,250
is better at this sequential i/o thing

00:13:03,270 --> 00:13:06,870
than self and that means that OpenStack

00:13:05,250 --> 00:13:08,430
is not really an open source project in

00:13:06,870 --> 00:13:10,500
the sense that you can build something

00:13:08,430 --> 00:13:17,700
that actually works in production from

00:13:10,500 --> 00:13:19,380
open source components if you accept

00:13:17,700 --> 00:13:21,120
that and then go from there and look at

00:13:19,380 --> 00:13:22,890
the heart that you want to buy you're

00:13:21,120 --> 00:13:24,840
looking at distributed storage and you

00:13:22,890 --> 00:13:26,940
are looking at the i/o requirements that

00:13:24,840 --> 00:13:32,540
you actually have and in order to make

00:13:26,940 --> 00:13:36,810
it work you also need SSD because some

00:13:32,540 --> 00:13:37,530
applications really need the local IOPS

00:13:36,810 --> 00:13:40,440
the

00:13:37,530 --> 00:13:42,870
default example is for for example the

00:13:40,440 --> 00:13:43,680
Magento shop software which has a

00:13:42,870 --> 00:13:45,630
single-threaded

00:13:43,680 --> 00:13:48,060
database component basically it does

00:13:45,630 --> 00:13:49,950
something that is an begin insert commit

00:13:48,060 --> 00:13:51,510
in the for loop so the second

00:13:49,950 --> 00:13:53,370
transaction can only start when the

00:13:51,510 --> 00:13:55,740
first one has terminated it would be

00:13:53,370 --> 00:13:58,890
easy to fix that but nobody has yet and

00:13:55,740 --> 00:14:01,230
most customers that we host are more

00:13:58,890 --> 00:14:03,060
comfortable with us giving us money than

00:14:01,230 --> 00:14:05,130
actually giving these people money to

00:14:03,060 --> 00:14:08,540
fix it I don't know why but as long as

00:14:05,130 --> 00:14:08,540
we make a living of that it's fine

00:14:08,630 --> 00:14:12,510
the next thing that you want is you want

00:14:10,680 --> 00:14:14,550
to isolate customers from each other and

00:14:12,510 --> 00:14:16,860
that means you need photos also for i/o

00:14:14,550 --> 00:14:19,340
operations per second but that does work

00:14:16,860 --> 00:14:21,540
only if you have a sufficient

00:14:19,340 --> 00:14:23,340
granularity if you have enough IO

00:14:21,540 --> 00:14:27,180
operations per second in total and that

00:14:23,340 --> 00:14:29,280
also needs SSD because otherwise the the

00:14:27,180 --> 00:14:31,800
step when you regulate that or when the

00:14:29,280 --> 00:14:36,150
automatisms regular regulates that is

00:14:31,800 --> 00:14:39,060
just to coarse grained SSDs are a bit

00:14:36,150 --> 00:14:40,290
complicated because if you try to bring

00:14:39,060 --> 00:14:41,820
the price down you're looking at

00:14:40,290 --> 00:14:43,890
consumer grade equipment which is fine

00:14:41,820 --> 00:14:46,110
because you're replicating that all over

00:14:43,890 --> 00:14:50,100
the place but consumer grade equipment

00:14:46,110 --> 00:14:51,660
doesn't have an even I or performance

00:14:50,100 --> 00:14:53,190
you have something that has a very good

00:14:51,660 --> 00:14:56,070
i/o performance and then there are all

00:14:53,190 --> 00:14:57,360
these down spikes and you can scale only

00:14:56,070 --> 00:14:59,850
for the minimum performance that you

00:14:57,360 --> 00:15:01,230
ever have so basically you're looking at

00:14:59,850 --> 00:15:02,640
something that performs a twenty

00:15:01,230 --> 00:15:04,560
thousand dollar operations per second

00:15:02,640 --> 00:15:07,080
and as down spikes down to four hundred

00:15:04,560 --> 00:15:09,270
so you can actually bring this as two

00:15:07,080 --> 00:15:11,960
into the system as something that

00:15:09,270 --> 00:15:17,490
performs at the 400 level not at the

00:15:11,960 --> 00:15:19,200
10,000 or more level and if you are

00:15:17,490 --> 00:15:20,610
looking at things that actually work

00:15:19,200 --> 00:15:23,700
you're looking at the euro per gigabyte

00:15:20,610 --> 00:15:27,570
which is like a hundred times more than

00:15:23,700 --> 00:15:29,820
rotating discs if you want to cache SSD

00:15:27,570 --> 00:15:32,010
before you write to this that is also

00:15:29,820 --> 00:15:33,660
complicated because once you're working

00:15:32,010 --> 00:15:37,230
set exceeds the cache you're basically

00:15:33,660 --> 00:15:38,550
running on bare naked matter so you have

00:15:37,230 --> 00:15:42,150
to be very very careful that you have

00:15:38,550 --> 00:15:45,390
enough cash or you're basically looking

00:15:42,150 --> 00:15:47,070
at a system that is running nicely on

00:15:45,390 --> 00:15:50,580
your cache and then suddenly the working

00:15:47,070 --> 00:15:51,360
set exceeds your cache and that is like

00:15:50,580 --> 00:15:54,200
for the customer

00:15:51,360 --> 00:15:58,950
like offline because it's very very slow

00:15:54,200 --> 00:16:00,839
so next lesson caches are not actually a

00:15:58,950 --> 00:16:02,820
solution unless you're very very careful

00:16:00,839 --> 00:16:04,860
in using them you have to be very very

00:16:02,820 --> 00:16:06,959
careful when you're calculating

00:16:04,860 --> 00:16:08,940
calculating a performance numbers and

00:16:06,959 --> 00:16:11,550
they include caches that you make sure

00:16:08,940 --> 00:16:19,740
that you never hit the other case next

00:16:11,550 --> 00:16:20,850
up networking so even that you've now

00:16:19,740 --> 00:16:23,310
heard what's wrong with the storage

00:16:20,850 --> 00:16:25,110
topic in an open stack the good news I

00:16:23,310 --> 00:16:26,459
have for you is that we can do decent

00:16:25,110 --> 00:16:28,800
networking and open stack with open

00:16:26,459 --> 00:16:30,600
source components the bad news is it

00:16:28,800 --> 00:16:32,100
still produces pain in certain regions

00:16:30,600 --> 00:16:34,290
of your body where you don't want to

00:16:32,100 --> 00:16:36,510
feel pain one of the biggest problems

00:16:34,290 --> 00:16:38,579
with OpenStack networking is that most

00:16:36,510 --> 00:16:41,610
companies will start with a very very

00:16:38,579 --> 00:16:43,200
small example setup so they'll go and

00:16:41,610 --> 00:16:45,089
then it finds her milk machines day

00:16:43,200 --> 00:16:46,350
their need anymore and they will just

00:16:45,089 --> 00:16:48,000
connect them and they will install

00:16:46,350 --> 00:16:49,649
OpenStack on that and that will make

00:16:48,000 --> 00:16:51,000
them feel good because they will end up

00:16:49,649 --> 00:16:54,120
with something that actually starts

00:16:51,000 --> 00:16:57,959
ritual machines that however is by no

00:16:54,120 --> 00:16:59,640
means a good estimate for whatever you

00:16:57,959 --> 00:17:01,370
would be running in production if you

00:16:59,640 --> 00:17:04,169
were running OpenStack in a serious way

00:17:01,370 --> 00:17:06,959
we have a number of network requirements

00:17:04,169 --> 00:17:08,880
for huge OpenStack installations here is

00:17:06,959 --> 00:17:11,939
a list of the most important of them we

00:17:08,880 --> 00:17:13,770
have a certain requirements skill set

00:17:11,939 --> 00:17:15,959
for the topology we weight free

00:17:13,770 --> 00:17:17,699
networking and we definitely don't want

00:17:15,959 --> 00:17:20,429
over subscription in our network because

00:17:17,699 --> 00:17:22,439
as a cloud provider you don't have any

00:17:20,429 --> 00:17:25,020
idea what's happening next in your cloud

00:17:22,439 --> 00:17:27,000
so you may be having a setup that works

00:17:25,020 --> 00:17:28,919
perfectly and then some customer

00:17:27,000 --> 00:17:31,110
registers himself and just starts

00:17:28,919 --> 00:17:33,120
uploading hundreds of terabytes of

00:17:31,110 --> 00:17:36,169
information to your cloud and you don't

00:17:33,120 --> 00:17:38,880
want your network to be in any way

00:17:36,169 --> 00:17:40,830
impacted negatively by just this event

00:17:38,880 --> 00:17:42,720
because if you run the cloud the serious

00:17:40,830 --> 00:17:43,980
weight and this can happen anytime you

00:17:42,720 --> 00:17:46,230
can basically just get a new customer

00:17:43,980 --> 00:17:48,270
with hundreds of thousands of terabytes

00:17:46,230 --> 00:17:50,190
and you will start uploading those right

00:17:48,270 --> 00:17:53,309
away so you need to have something that

00:17:50,190 --> 00:17:54,720
is over subscription free you need to

00:17:53,309 --> 00:17:56,850
have something that doesn't have any

00:17:54,720 --> 00:17:58,679
single point of failures that is very

00:17:56,850 --> 00:18:01,050
important because what you don't want to

00:17:58,679 --> 00:18:03,360
experience is a scenario in which one

00:18:01,050 --> 00:18:05,280
component in your network just fails and

00:18:03,360 --> 00:18:08,070
the whole architecture starts to

00:18:05,280 --> 00:18:10,620
the German Agency for unemployed people

00:18:08,070 --> 00:18:12,810
just experienced this a week ago they

00:18:10,620 --> 00:18:14,460
went off my completely and the official

00:18:12,810 --> 00:18:15,660
rationale for that was that one network

00:18:14,460 --> 00:18:17,220
component failed

00:18:15,660 --> 00:18:19,590
you don't wanna experience that in your

00:18:17,220 --> 00:18:21,450
cloud installation because if any kind

00:18:19,590 --> 00:18:23,640
of hardware is a single point of failure

00:18:21,450 --> 00:18:25,320
and that one fails it will not impact

00:18:23,640 --> 00:18:27,030
just a single user but it will basically

00:18:25,320 --> 00:18:29,430
impact all the users in your

00:18:27,030 --> 00:18:31,470
installation and you want to be able to

00:18:29,430 --> 00:18:35,130
have multi-tenancy setups which means

00:18:31,470 --> 00:18:37,380
that standard technologies such as VLANs

00:18:35,130 --> 00:18:39,360
need to be implemented in a cloud

00:18:37,380 --> 00:18:40,950
computing setup as well but you need

00:18:39,360 --> 00:18:42,900
something that is more flexible than

00:18:40,950 --> 00:18:45,060
just the ability to log in to a switch

00:18:42,900 --> 00:18:46,980
and store it configuring that particular

00:18:45,060 --> 00:18:48,840
switches firmware because that doesn't

00:18:46,980 --> 00:18:51,510
work very well in a cloud you will

00:18:48,840 --> 00:18:54,090
basically not have any specific switches

00:18:51,510 --> 00:18:56,100
you will just have switches that are not

00:18:54,090 --> 00:18:57,810
using VLANs at all because you don't

00:18:56,100 --> 00:18:59,250
need them what you still need is you

00:18:57,810 --> 00:19:01,440
need something that on the software

00:18:59,250 --> 00:19:03,630
level of things starts separating

00:19:01,440 --> 00:19:05,010
packets belonging to different customers

00:19:03,630 --> 00:19:07,140
and you don't want to run into a

00:19:05,010 --> 00:19:09,990
scenario where customer a can see any

00:19:07,140 --> 00:19:11,670
packet that belongs to customer B last

00:19:09,990 --> 00:19:13,410
but not least after the explanations

00:19:11,670 --> 00:19:15,900
Christian made we also know that our

00:19:13,410 --> 00:19:18,030
physical storage infrastructure needs to

00:19:15,900 --> 00:19:20,850
be able to handle the traffic caused by

00:19:18,030 --> 00:19:22,950
our storage so we are doing storage

00:19:20,850 --> 00:19:25,650
using normal network installations and

00:19:22,950 --> 00:19:27,420
using our network topology and we need

00:19:25,650 --> 00:19:29,790
to have reserves in our network topology

00:19:27,420 --> 00:19:33,540
to cope with the traffic caused by our

00:19:29,790 --> 00:19:35,100
storage and last but not least this is a

00:19:33,540 --> 00:19:37,350
very typical thing that some of your

00:19:35,100 --> 00:19:39,210
users may just start to do at any point

00:19:37,350 --> 00:19:41,280
in time inside your cloud so if you have

00:19:39,210 --> 00:19:43,320
a customer that is writing a dupe inside

00:19:41,280 --> 00:19:44,580
your cloud for number crunching that one

00:19:43,320 --> 00:19:46,680
customer it will definitely be

00:19:44,580 --> 00:19:48,270
generating lots of traffic and you want

00:19:46,680 --> 00:19:50,070
to be prepared for that so you need a

00:19:48,270 --> 00:19:52,170
solution that Titan integrates with

00:19:50,070 --> 00:19:53,880
OpenStack on the one side and still is

00:19:52,170 --> 00:19:56,580
able to deliver it the services you need

00:19:53,880 --> 00:20:00,900
and then there is open we switch which

00:19:56,580 --> 00:20:04,650
is existing I guess open researchers to

00:20:00,900 --> 00:20:07,020
standard open Sdn component that is used

00:20:04,650 --> 00:20:09,120
by OpenStack so whenever you start doing

00:20:07,020 --> 00:20:13,050
a basic OpenStack installation you will

00:20:09,120 --> 00:20:14,880
get open V switch this architecture has

00:20:13,050 --> 00:20:17,520
a number of serious problems as you can

00:20:14,880 --> 00:20:19,140
see here first of all we have a GRE Bowl

00:20:17,520 --> 00:20:21,450
because we have sort of a year

00:20:19,140 --> 00:20:23,520
a mass network all notes inside the

00:20:21,450 --> 00:20:25,680
cluster will basically be using GRE

00:20:23,520 --> 00:20:27,480
tunnels to talk to any other nodes in

00:20:25,680 --> 00:20:30,720
the cluster and which means that you

00:20:27,480 --> 00:20:36,120
will have GE number tunnelling plan

00:20:30,720 --> 00:20:37,740
expanding mostly into eternity based on

00:20:36,120 --> 00:20:40,440
how many Hurst's you have from

00:20:37,740 --> 00:20:43,230
experience we know that if you start

00:20:40,440 --> 00:20:45,330
having more than 50 nodes you will have

00:20:43,230 --> 00:20:47,460
a problem beakers open lease which just

00:20:45,330 --> 00:20:50,730
doesn't scale very well over the limit

00:20:47,460 --> 00:20:52,620
of 50 physical nodes even if you start

00:20:50,730 --> 00:20:54,450
having more than a hundred customer

00:20:52,620 --> 00:20:56,460
networks inside your OpenStack

00:20:54,450 --> 00:20:59,430
installation open we switch will start

00:20:56,460 --> 00:21:02,520
causing problems mostly based on large

00:20:59,430 --> 00:21:04,350
latencies sometimes based on bad fruit

00:21:02,520 --> 00:21:05,730
put but you will end up debugging

00:21:04,350 --> 00:21:08,160
network problems you shouldn't be

00:21:05,730 --> 00:21:10,770
debugging in fact you have a choke point

00:21:08,160 --> 00:21:13,470
which is the so-called OpenStack network

00:21:10,770 --> 00:21:14,790
node um all traffic that goes to the

00:21:13,470 --> 00:21:16,920
outside needs to go through this

00:21:14,790 --> 00:21:18,570
particular choke point and obviously

00:21:16,920 --> 00:21:20,340
this choke point also is a single point

00:21:18,570 --> 00:21:22,950
of failure so any default OpenStack

00:21:20,340 --> 00:21:24,570
installation um the only thing as an

00:21:22,950 --> 00:21:26,910
administrator and from from a network

00:21:24,570 --> 00:21:29,310
architecture point of view you will be

00:21:26,910 --> 00:21:33,240
asking yourself is what the you know

00:21:29,310 --> 00:21:35,070
what I mean by now OpenStack has become

00:21:33,240 --> 00:21:37,770
a bit more major recent OpenStack

00:21:35,070 --> 00:21:39,420
releases have at least addressed a small

00:21:37,770 --> 00:21:42,150
number of the problems caused by this

00:21:39,420 --> 00:21:44,400
architecture but by no means we are at

00:21:42,150 --> 00:21:46,260
any point we're using OpenStack with

00:21:44,400 --> 00:21:48,420
openness which would be a decent

00:21:46,260 --> 00:21:50,250
solution to create large cloud computing

00:21:48,420 --> 00:21:52,830
environments and that is why open reefs

00:21:50,250 --> 00:21:55,710
which basically needs to go if you want

00:21:52,830 --> 00:21:58,080
to run OpenStack in a serious way well

00:21:55,710 --> 00:21:59,760
we had sis 11 that was we started to

00:21:58,080 --> 00:22:01,980
look out for other solutions we started

00:21:59,760 --> 00:22:04,800
to take a close look at solutions such

00:22:01,980 --> 00:22:06,690
as VMware NSX and we finally found

00:22:04,800 --> 00:22:08,550
something that is called open contrail

00:22:06,690 --> 00:22:10,890
open contrary was written by Pedro

00:22:08,550 --> 00:22:12,780
Marquez and his team he was responsible

00:22:10,890 --> 00:22:15,360
for working on open flow at Google and

00:22:12,780 --> 00:22:17,310
then actually what he decided to do is

00:22:15,360 --> 00:22:19,140
well let's redo this but in a working

00:22:17,310 --> 00:22:23,310
way and actually based on standard

00:22:19,140 --> 00:22:27,540
components and um open V switch in fact

00:22:23,310 --> 00:22:29,130
is not able to compete with open

00:22:27,540 --> 00:22:31,230
Cantrell a number of aspects open

00:22:29,130 --> 00:22:32,999
contrail as you can see here comes with

00:22:31,230 --> 00:22:35,579
a number of different components

00:22:32,999 --> 00:22:37,109
all taking care of basic functionality

00:22:35,579 --> 00:22:39,269
inside a cloud computing environment and

00:22:37,109 --> 00:22:41,849
this works extraordinary well in fact

00:22:39,269 --> 00:22:44,279
open country is an open-source project

00:22:41,849 --> 00:22:46,559
by now it's owned by juniper it was a

00:22:44,279 --> 00:22:48,899
separate project before but juniper

00:22:46,559 --> 00:22:51,239
bought contrail I'm I think one and a

00:22:48,899 --> 00:22:53,009
half year ago or something um so by now

00:22:51,239 --> 00:22:57,019
the project's officially owned by

00:22:53,009 --> 00:22:59,399
juniper and juniper has continued to add

00:22:57,019 --> 00:23:02,039
development to capabilities and power to

00:22:59,399 --> 00:23:04,439
the project so that is fine um in fact

00:23:02,039 --> 00:23:06,239
open control can use existing hardware

00:23:04,439 --> 00:23:08,279
infrastructure just like open Reis which

00:23:06,239 --> 00:23:10,559
would be able to do as well nothing in

00:23:08,279 --> 00:23:12,359
it is specific to Juniper exams on

00:23:10,559 --> 00:23:14,159
regular networking equipment any

00:23:12,359 --> 00:23:15,779
networking equipment exactly you don't

00:23:14,159 --> 00:23:17,129
need to buy any particular switches by

00:23:15,779 --> 00:23:18,599
Geneon per something you can just go

00:23:17,129 --> 00:23:21,889
with the standard network infrastructure

00:23:18,599 --> 00:23:25,169
you have it scales because it uses

00:23:21,889 --> 00:23:28,189
standard protocol such as MPLS and PGP

00:23:25,169 --> 00:23:31,049
other well understood protocols add-in

00:23:28,189 --> 00:23:33,209
in fact if you have a virtual machine

00:23:31,049 --> 00:23:35,579
running inside an OpenStack cloud using

00:23:33,209 --> 00:23:37,559
open contrail the particular hardware

00:23:35,579 --> 00:23:40,079
note that is running that virtual

00:23:37,559 --> 00:23:42,449
machine will start to send our BGP

00:23:40,079 --> 00:23:44,369
announcement announcements for the

00:23:42,449 --> 00:23:47,699
official IP address of virtual machine

00:23:44,369 --> 00:23:49,859
so every hypervisor turns into a network

00:23:47,699 --> 00:23:51,749
node for all virtual machines running on

00:23:49,859 --> 00:23:54,629
that one node which means that if

00:23:51,749 --> 00:23:57,059
anything related to network goes boom

00:23:54,629 --> 00:23:58,799
and that client you will only have the

00:23:57,059 --> 00:24:00,209
VMS on their client affected by the

00:23:58,799 --> 00:24:02,489
problem and not all virtual machines

00:24:00,209 --> 00:24:04,679
inside your cloud so there is no central

00:24:02,489 --> 00:24:06,899
network node anymore every hypervisor is

00:24:04,679 --> 00:24:08,879
a network node on its own and this works

00:24:06,899 --> 00:24:11,219
remarkably well if you manage to get the

00:24:08,879 --> 00:24:13,169
thing up and running in fact open

00:24:11,219 --> 00:24:14,989
contrail delivers stuff and that is a

00:24:13,169 --> 00:24:17,999
big difference to openly switch

00:24:14,989 --> 00:24:20,279
bad things about open contrail um and

00:24:17,999 --> 00:24:21,569
this is coming right from my experience

00:24:20,279 --> 00:24:24,809
that we have collected over the last few

00:24:21,569 --> 00:24:27,029
years um first juniper bought contrail

00:24:24,809 --> 00:24:28,859
and it was obvious that for a long time

00:24:27,029 --> 00:24:30,419
they had no idea what they would be

00:24:28,859 --> 00:24:32,789
doing with the company they just bought

00:24:30,419 --> 00:24:34,949
so obviously somebody in the juniper

00:24:32,789 --> 00:24:36,749
executive department just said hey we

00:24:34,949 --> 00:24:38,519
need something for Sdn and go buy and

00:24:36,749 --> 00:24:41,069
then they just did that and came back

00:24:38,519 --> 00:24:42,809
with open contraire and this only has

00:24:41,069 --> 00:24:44,940
started to become better in recent

00:24:42,809 --> 00:24:46,619
months so we are by now seeing some sort

00:24:44,940 --> 00:24:46,890
of commercial interest by juniper in

00:24:46,619 --> 00:24:49,440
Khan

00:24:46,890 --> 00:24:51,420
trail they have started to establish a

00:24:49,440 --> 00:24:53,640
certain number of processes you would

00:24:51,420 --> 00:24:55,410
expect to be there but we are still far

00:24:53,640 --> 00:24:58,920
away anywhere from from what you would

00:24:55,410 --> 00:25:00,990
call a working project we have badly

00:24:58,920 --> 00:25:02,910
outdated documentation we have a very

00:25:00,990 --> 00:25:05,310
very bad release management and we have

00:25:02,910 --> 00:25:08,010
a very very very very bad packaging when

00:25:05,310 --> 00:25:10,470
it comes to open Cantrell so one example

00:25:08,010 --> 00:25:12,480
that I just want to give you when I

00:25:10,470 --> 00:25:15,030
started working for a since 11 during no

00:25:12,480 --> 00:25:16,680
point in the interview process I was

00:25:15,030 --> 00:25:18,030
asked if I was able to work on your

00:25:16,680 --> 00:25:20,970
bulletin systems I've been a Debian

00:25:18,030 --> 00:25:22,710
developer for 14 years now so when I

00:25:20,970 --> 00:25:25,530
joined sis 11 the first thing I started

00:25:22,710 --> 00:25:29,430
doing immediately was redoing the open

00:25:25,530 --> 00:25:31,680
Cantrell packages for Ubuntu I found out

00:25:29,430 --> 00:25:34,470
some interesting parts about the

00:25:31,680 --> 00:25:35,970
development process of open contrail one

00:25:34,470 --> 00:25:38,670
of them is that if you want to build the

00:25:35,970 --> 00:25:40,530
open country controller that will be

00:25:38,670 --> 00:25:44,160
based on scones who have us work with

00:25:40,530 --> 00:25:51,420
scones before well that's for people

00:25:44,160 --> 00:25:53,730
impressive who liked it I could have

00:25:51,420 --> 00:25:56,100
told you before so um the build process

00:25:53,730 --> 00:25:57,330
of scones based and what open contrail

00:25:56,100 --> 00:25:59,280
and the controller part will do is

00:25:57,330 --> 00:26:01,830
during its own build process it will

00:25:59,280 --> 00:26:03,630
download bind and certain other tools

00:26:01,830 --> 00:26:06,300
such as curl and certain batteries and

00:26:03,630 --> 00:26:08,880
patch them locally in the buns in in the

00:26:06,300 --> 00:26:11,220
compile folder and build them and

00:26:08,880 --> 00:26:13,110
generate binaries and libraries and put

00:26:11,220 --> 00:26:14,850
all this into a shiny package that you

00:26:13,110 --> 00:26:17,370
then are expected to install in the

00:26:14,850 --> 00:26:19,590
boolean machine obviously these packages

00:26:17,370 --> 00:26:21,570
will conflict with a number of integral

00:26:19,590 --> 00:26:22,860
system packages on ubuntu so you will

00:26:21,570 --> 00:26:24,570
not be able to install them if you use

00:26:22,860 --> 00:26:27,690
them the way expect that you are

00:26:24,570 --> 00:26:29,640
expected to do by juniper and resolving

00:26:27,690 --> 00:26:31,290
all these things and separating the

00:26:29,640 --> 00:26:34,620
components that need to be separated

00:26:31,290 --> 00:26:38,580
actually took 14 days so that that was a

00:26:34,620 --> 00:26:40,680
job for in a straight the really bad

00:26:38,580 --> 00:26:42,210
thing about open control however is the

00:26:40,680 --> 00:26:44,550
technology cheng'er that they are

00:26:42,210 --> 00:26:46,680
playing inside the project so what

00:26:44,550 --> 00:26:50,400
technologies are you dealing with when

00:26:46,680 --> 00:26:52,260
working with open control you have the

00:26:50,400 --> 00:26:54,600
rear Archer Cardinal module you use if

00:26:52,260 --> 00:26:57,270
map with sandesh which which is XML /

00:26:54,600 --> 00:27:00,460
thrift which makes no sense at all

00:26:57,270 --> 00:27:02,200
you have C++ you have - you have no GS

00:27:00,460 --> 00:27:04,000
or byte you need to remember that you

00:27:02,200 --> 00:27:05,560
only may use exactly the one node she

00:27:04,000 --> 00:27:07,150
has a version that Cantrell tells you to

00:27:05,560 --> 00:27:07,960
use because any more recent version is

00:27:07,150 --> 00:27:10,510
not going to work

00:27:07,960 --> 00:27:13,120
you have R&D which is Java you have

00:27:10,510 --> 00:27:16,630
Redis Cassandra and zookeeper you have

00:27:13,120 --> 00:27:18,010
XMPP BGP and MPLS as protocols up next

00:27:16,630 --> 00:27:20,320
in Cantrell - but - they will be

00:27:18,010 --> 00:27:21,700
starting Kafka which I have no idea why

00:27:20,320 --> 00:27:24,250
the hell they are doing that but they

00:27:21,700 --> 00:27:26,290
are and the interesting part is have you

00:27:24,250 --> 00:27:29,410
ever written a job profile for this

00:27:26,290 --> 00:27:31,390
skill set and have you gotten any actual

00:27:29,410 --> 00:27:33,340
replies to that from from people not

00:27:31,390 --> 00:27:35,500
named Pedro Marquez I guess you haven't

00:27:33,340 --> 00:27:37,750
and that was exactly the problem we were

00:27:35,500 --> 00:27:39,760
facing with Ripley contrail so by now we

00:27:37,750 --> 00:27:41,650
are actually working with open control

00:27:39,760 --> 00:27:43,600
and we were able to bring it into a

00:27:41,650 --> 00:27:46,210
state where it does what we expect it to

00:27:43,600 --> 00:27:48,490
do but that was hard work and we learned

00:27:46,210 --> 00:27:50,170
that the problem is in fact not only

00:27:48,490 --> 00:27:51,790
limited to contrast scope because you

00:27:50,170 --> 00:27:53,710
will be dealing with a lot of additional

00:27:51,790 --> 00:27:55,720
technology when using open country open

00:27:53,710 --> 00:27:59,620
and OpenStack and open contrail and that

00:27:55,720 --> 00:28:01,900
is the next part of the problem so let's

00:27:59,620 --> 00:28:03,130
let's look at all of OpenStack at the at

00:28:01,900 --> 00:28:06,850
the whole packet that you get what's

00:28:03,130 --> 00:28:09,820
what's in it what would be the

00:28:06,850 --> 00:28:12,010
requirements of something that is

00:28:09,820 --> 00:28:14,560
distributed something and that happens

00:28:12,010 --> 00:28:16,120
in 2015 you of course need all the

00:28:14,560 --> 00:28:18,160
basics you need time you need

00:28:16,120 --> 00:28:22,710
centralized logging monitoring you need

00:28:18,160 --> 00:28:25,000
a functional validation what needs to be

00:28:22,710 --> 00:28:26,680
functional before something joins the

00:28:25,000 --> 00:28:29,560
cluster you need the concept of cluster

00:28:26,680 --> 00:28:32,440
membership some kind of component that

00:28:29,560 --> 00:28:34,870
actually does service discovery you need

00:28:32,440 --> 00:28:37,300
the cluster communications to be AI

00:28:34,870 --> 00:28:39,250
Kingsbury proof which means that that

00:28:37,300 --> 00:28:42,220
there is some kind of consensus protocol

00:28:39,250 --> 00:28:43,720
that and and order guarantees and

00:28:42,220 --> 00:28:47,610
message loss guarantees that the whole

00:28:43,720 --> 00:28:50,190
cluster needs to make you need the

00:28:47,610 --> 00:28:53,410
communications and the cluster to be

00:28:50,190 --> 00:28:56,530
authenticated and encrypted so you need

00:28:53,410 --> 00:28:59,350
a CA you need SSL somewhere optionally

00:28:56,530 --> 00:29:02,350
you need also encryption for data at

00:28:59,350 --> 00:29:03,760
rest and you need a user story regarding

00:29:02,350 --> 00:29:06,220
an up GAID process that is non

00:29:03,760 --> 00:29:07,780
interrupting so that you can do some

00:29:06,220 --> 00:29:10,720
things to the underlay without the

00:29:07,780 --> 00:29:14,440
overlay noticing overly much so there

00:29:10,720 --> 00:29:16,120
is what OpenStack delivers none of these

00:29:14,440 --> 00:29:18,730
things are there none at all

00:29:16,120 --> 00:29:21,340
so it is it is really a Python script

00:29:18,730 --> 00:29:26,590
with ambitions but it's not a cluster at

00:29:21,340 --> 00:29:29,169
all and that means you have to do that

00:29:26,590 --> 00:29:32,620
yourself and that hurts a lot

00:29:29,169 --> 00:29:34,330
you need a lot of medication because all

00:29:32,620 --> 00:29:37,090
of that is not really an isolated

00:29:34,330 --> 00:29:41,020
problem there is the heat language for

00:29:37,090 --> 00:29:43,840
example that allows you to work with

00:29:41,020 --> 00:29:47,710
with infrastructure as code and if you

00:29:43,840 --> 00:29:49,750
do that and well you define the medium

00:29:47,710 --> 00:29:52,299
to large-sized e-commerce projects a few

00:29:49,750 --> 00:29:55,000
networks if you VMs and all in all

00:29:52,299 --> 00:29:58,409
that's about 20 VMs and you start that

00:29:55,000 --> 00:30:00,970
then your cluster suddenly turns off

00:29:58,409 --> 00:30:02,200
that is because components in the

00:30:00,970 --> 00:30:04,630
cluster do not really comport

00:30:02,200 --> 00:30:07,299
communicate with each other but there is

00:30:04,630 --> 00:30:09,460
an overload and hard timeout and if

00:30:07,299 --> 00:30:11,710
something takes some time to process

00:30:09,460 --> 00:30:15,970
that and run to the timeout then there

00:30:11,710 --> 00:30:18,400
is just silence and that's it and the

00:30:15,970 --> 00:30:20,919
question we've been asking then is are

00:30:18,400 --> 00:30:24,490
we stupid or is OpenStack stupid what do

00:30:20,919 --> 00:30:26,380
other people do so there are people who

00:30:24,490 --> 00:30:29,320
are supposedly running OpenStack in

00:30:26,380 --> 00:30:30,940
production for money in Germany you can

00:30:29,320 --> 00:30:33,520
buy access there and then you take your

00:30:30,940 --> 00:30:35,830
heat script that fails to their cluster

00:30:33,520 --> 00:30:38,830
and start that and the next thing is

00:30:35,830 --> 00:30:40,539
that the phone starts ringing we don't

00:30:38,830 --> 00:30:43,260
know what you're doing what could you

00:30:40,539 --> 00:30:47,400
please stop doing that

00:30:43,260 --> 00:30:47,400
which means we are not stupid

00:30:48,000 --> 00:30:55,179
this is this happened during an upgrade

00:30:51,280 --> 00:30:58,150
we upgraded using the standard puppet

00:30:55,179 --> 00:31:00,690
recipes from Ice House to Juneau from

00:30:58,150 --> 00:31:04,090
Romney run one release to the next and

00:31:00,690 --> 00:31:07,240
that actually never terminated why is

00:31:04,090 --> 00:31:09,640
that because it asks for all the tenants

00:31:07,240 --> 00:31:11,440
users and roles in the cluster and then

00:31:09,640 --> 00:31:14,679
there's a loop over that so you have n

00:31:11,440 --> 00:31:16,840
times M times and so on and it's for

00:31:14,679 --> 00:31:18,580
every iteration it's downloading all the

00:31:16,840 --> 00:31:22,030
information uncashed and it's not

00:31:18,580 --> 00:31:24,580
actually fast that is a nice thing and

00:31:22,030 --> 00:31:27,070
it works if it's 1 times 1 times 1

00:31:24,580 --> 00:31:29,289
doesn't terminate ever already four five

00:31:27,070 --> 00:31:31,840
times five times five so obviously this

00:31:29,289 --> 00:31:33,700
has been tested on the deaf stack in

00:31:31,840 --> 00:31:35,169
vagrant on a MacBook Air in Sanko

00:31:33,700 --> 00:31:39,789
berholtz while drinking cappuccino

00:31:35,169 --> 00:31:43,120
but not in production supposedly I have

00:31:39,789 --> 00:31:47,320
no idea but this is how it how it feels

00:31:43,120 --> 00:31:50,260
like we did some performance testing on

00:31:47,320 --> 00:31:52,000
various components Keystone is the

00:31:50,260 --> 00:31:53,649
authentication component you need to get

00:31:52,000 --> 00:31:57,340
the Keystone token to do anything else

00:31:53,649 --> 00:31:59,320
and if you set up Keystone like

00:31:57,340 --> 00:32:00,850
described in the manual with the

00:31:59,320 --> 00:32:02,710
memcache in front of the Keystone and

00:32:00,850 --> 00:32:08,409
everything then you get five tokens per

00:32:02,710 --> 00:32:13,120
second if you turn off the memcache you

00:32:08,409 --> 00:32:15,580
get 250 tokens per second but the MySQL

00:32:13,120 --> 00:32:19,570
in the background is running at 11,000

00:32:15,580 --> 00:32:22,029
queries per second why is it doing that

00:32:19,570 --> 00:32:24,309
you look at the statements and actually

00:32:22,029 --> 00:32:27,159
the ninth statement and the top list is

00:32:24,309 --> 00:32:30,039
actually doing something useful the

00:32:27,159 --> 00:32:31,750
others are just empty transactions and

00:32:30,039 --> 00:32:34,029
weird statements and if you look into

00:32:31,750 --> 00:32:35,799
this you see that they are not talking

00:32:34,029 --> 00:32:37,389
to a MySQL directly they're using a

00:32:35,799 --> 00:32:39,760
Python component called SQL alchemy

00:32:37,389 --> 00:32:40,809
which is a database abstraction and then

00:32:39,760 --> 00:32:42,669
they have written the database

00:32:40,809 --> 00:32:45,039
extraction that uses SQL

00:32:42,669 --> 00:32:48,220
Akemi because more layers are obviously

00:32:45,039 --> 00:32:49,659
better in in the MySQL protocol there is

00:32:48,220 --> 00:32:51,370
something called a ping method that

00:32:49,659 --> 00:32:53,260
keeps the connection alive and in the

00:32:51,370 --> 00:32:54,580
manual it says don't use that it's not

00:32:53,260 --> 00:32:57,519
recommended and is actually not

00:32:54,580 --> 00:32:58,960
necessary at all and because they do not

00:32:57,519 --> 00:33:00,340
trust that ping method in their own

00:32:58,960 --> 00:33:03,399
abstraction they have written their own

00:33:00,340 --> 00:33:05,950
ping method which is actually begin

00:33:03,399 --> 00:33:08,769
select one commit three statements one

00:33:05,950 --> 00:33:11,529
transaction and they're doing that

00:33:08,769 --> 00:33:13,450
before every other statement so when

00:33:11,529 --> 00:33:15,850
you're talking to Keystone you see begin

00:33:13,450 --> 00:33:20,710
select one commit begin something useful

00:33:15,850 --> 00:33:26,940
commit and that is why you need a double

00:33:20,710 --> 00:33:26,940
facepalm because one is not enough

00:33:27,240 --> 00:33:31,840
somebody and in the office versus was

00:33:29,649 --> 00:33:37,050
asking me could you please look at this

00:33:31,840 --> 00:33:39,960
my instances won't and

00:33:37,050 --> 00:33:42,570
after a longer debug session we find

00:33:39,960 --> 00:33:44,700
that the on some cluster note for some

00:33:42,570 --> 00:33:47,640
reason the puppet failed and the the lib

00:33:44,700 --> 00:33:52,470
field wasn't actually functioning so the

00:33:47,640 --> 00:33:54,270
the VMS aren't ever started but there is

00:33:52,470 --> 00:33:56,010
no functional validation at all in the

00:33:54,270 --> 00:33:57,570
cluster before components doesn't join

00:33:56,010 --> 00:34:00,000
the cluster because it isn't the cluster

00:33:57,570 --> 00:34:02,460
it is just enough that something comes

00:34:00,000 --> 00:34:04,679
up and consumes messages from the AMQP

00:34:02,460 --> 00:34:06,300
and then they just vanish and the the

00:34:04,679 --> 00:34:09,450
error code is actually sent back and

00:34:06,300 --> 00:34:12,419
then ignored unless you turn on

00:34:09,450 --> 00:34:15,179
debugging and then grab 250 megabytes of

00:34:12,419 --> 00:34:17,580
debug log and something some somewhere

00:34:15,179 --> 00:34:20,070
in these hundred 50 megabytes you will

00:34:17,580 --> 00:34:24,929
find 50 meters of Python stack trace

00:34:20,070 --> 00:34:26,550
which is supposed to interpret we are a

00:34:24,929 --> 00:34:27,780
host are we actually supposed to build

00:34:26,550 --> 00:34:29,280
our customers there is a building

00:34:27,780 --> 00:34:35,190
component is called sulamita that is

00:34:29,280 --> 00:34:37,080
what it looks like this this is supposed

00:34:35,190 --> 00:34:38,610
to work with MySQL only that it doesn't

00:34:37,080 --> 00:34:43,230
you have to run MongoDB which you

00:34:38,610 --> 00:34:44,700
shouldn't add at least not if you ever

00:34:43,230 --> 00:34:48,000
want to write a bill that actually

00:34:44,700 --> 00:34:49,260
contains valid numbers MongoDB is the

00:34:48,000 --> 00:34:54,690
database for people who don't need the

00:34:49,260 --> 00:34:56,460
database but even with MongoDB it falls

00:34:54,690 --> 00:35:00,450
over as soon as you have a cluster with

00:34:56,460 --> 00:35:02,340
some dozen our customers and 10 nodes so

00:35:00,450 --> 00:35:04,890
it doesn't scale at all I don't know

00:35:02,340 --> 00:35:07,710
well I do know how our X base pairs they

00:35:04,890 --> 00:35:09,810
use something else and that is part for

00:35:07,710 --> 00:35:12,450
another later story in this talk but

00:35:09,810 --> 00:35:14,820
they the entire project seems to be

00:35:12,450 --> 00:35:16,590
really involved with SQL databases also

00:35:14,820 --> 00:35:19,530
if you look at the Nova schema Nova is

00:35:16,590 --> 00:35:22,320
the actual compute component the Nova

00:35:19,530 --> 00:35:24,900
schema is completely brain-dead it keeps

00:35:22,320 --> 00:35:29,130
all data twice active passive and every

00:35:24,900 --> 00:35:30,990
every query then has to contain about 15

00:35:29,130 --> 00:35:33,119
meters of extra where conditions that

00:35:30,990 --> 00:35:36,060
cut all the data that is not relevant

00:35:33,119 --> 00:35:38,520
because it's old and outdated out of the

00:35:36,060 --> 00:35:40,350
query but the database then grows out of

00:35:38,520 --> 00:35:42,630
bounds you have a constant number of VMs

00:35:40,350 --> 00:35:44,700
in the cluster but because you are

00:35:42,630 --> 00:35:48,540
accumulating more and more history it

00:35:44,700 --> 00:35:50,880
becomes slower and slower so this is

00:35:48,540 --> 00:35:52,769
obviously not designed or tested for

00:35:50,880 --> 00:35:57,799
scale and the integration is quite bad

00:35:52,769 --> 00:35:59,009
and everything see it's quite incomplete

00:35:57,799 --> 00:36:01,160
yeah

00:35:59,009 --> 00:36:05,789
during the recycle horizon got patched

00:36:01,160 --> 00:36:07,829
to be less confusing for users the

00:36:05,789 --> 00:36:10,829
result is that certain functionality

00:36:07,829 --> 00:36:14,400
that actually working networking needs

00:36:10,829 --> 00:36:15,930
isn't available any longer so if you're

00:36:14,400 --> 00:36:25,230
using open country and it doesn't work

00:36:15,930 --> 00:36:28,019
and yeah it does work if you do a

00:36:25,230 --> 00:36:30,539
standard set up but as soon as you try

00:36:28,019 --> 00:36:33,599
to make it work in a scaling way paths

00:36:30,539 --> 00:36:35,640
fall off it's a bit like like Lego with

00:36:33,599 --> 00:36:37,410
respect to that so the question is what

00:36:35,640 --> 00:36:40,170
is the real problem here that the

00:36:37,410 --> 00:36:42,839
project has the real problem is that any

00:36:40,170 --> 00:36:44,490
vm anywhere is a problem definition but

00:36:42,839 --> 00:36:46,710
it's not the product specification at

00:36:44,490 --> 00:36:51,089
all it's not a user story a user story

00:36:46,710 --> 00:36:53,369
would look like this I am mmm-hmm and I

00:36:51,089 --> 00:36:57,299
want to be able to do that and debt in

00:36:53,369 --> 00:36:59,190
order to do that in that and then you

00:36:57,299 --> 00:37:00,839
get requirements you get a lot of

00:36:59,190 --> 00:37:04,769
requirements for example if you are a

00:37:00,839 --> 00:37:08,220
host ER and most of these requirements

00:37:04,769 --> 00:37:09,569
are actually not only related to the

00:37:08,220 --> 00:37:11,539
product that you want to build but they

00:37:09,569 --> 00:37:13,920
are so called Enterprise horizontal

00:37:11,539 --> 00:37:15,990
requirements that you have because you

00:37:13,920 --> 00:37:17,250
are in the environment and that come

00:37:15,990 --> 00:37:20,700
with the environment you need to isolate

00:37:17,250 --> 00:37:23,160
tenants you need a billing model you

00:37:20,700 --> 00:37:25,289
need an Operations model how do my Swiss

00:37:23,160 --> 00:37:27,450
admins actually run the cluster you need

00:37:25,289 --> 00:37:30,029
a development model or a deployment

00:37:27,450 --> 00:37:32,940
model on that and you of course need to

00:37:30,029 --> 00:37:35,490
scale so what you have is a very nice

00:37:32,940 --> 00:37:37,559
proof-of-concept a bunch of geeks

00:37:35,490 --> 00:37:39,839
brought something that shows that you

00:37:37,559 --> 00:37:41,759
can actually build virtual

00:37:39,839 --> 00:37:43,440
infrastructure cluster with the

00:37:41,759 --> 00:37:45,509
scripting language that can bring all of

00:37:43,440 --> 00:37:49,259
these things up but it's not really a

00:37:45,509 --> 00:37:51,809
product it's a box with nuts and bolts

00:37:49,259 --> 00:37:55,559
not all of them actually bad but you

00:37:51,809 --> 00:37:57,299
still have to build the cluster and it

00:37:55,559 --> 00:37:59,009
gets worse if you are leaving the

00:37:57,299 --> 00:38:03,980
infrastructure as a service aspect and

00:37:59,009 --> 00:38:03,980
go up to the platform or the the

00:38:03,990 --> 00:38:07,890
software-as-a-service suspect if you

00:38:05,610 --> 00:38:11,550
look at row for Sahara or the more up

00:38:07,890 --> 00:38:15,000
tech projects and OpenStack you need a

00:38:11,550 --> 00:38:17,610
lot more phosphate pumps and just two so

00:38:15,000 --> 00:38:20,070
if you're looking at the product at the

00:38:17,610 --> 00:38:22,380
project as a project manager and to see

00:38:20,070 --> 00:38:24,030
that you have stability on conceptual

00:38:22,380 --> 00:38:25,560
and integration problems and stack

00:38:24,030 --> 00:38:27,210
proliferation because there are more and

00:38:25,560 --> 00:38:30,450
more components what are you going to do

00:38:27,210 --> 00:38:33,780
are you going to stabilize the curve

00:38:30,450 --> 00:38:36,060
with actual engineering are you going to

00:38:33,780 --> 00:38:38,640
fan out more components more diversity

00:38:36,060 --> 00:38:40,470
let's look at kilo and put kilo release

00:38:38,640 --> 00:38:42,180
we bring us the good news about the

00:38:40,470 --> 00:38:43,650
problems christine has just described is

00:38:42,180 --> 00:38:45,900
that OpenStack is fully aware of this

00:38:43,650 --> 00:38:48,000
and that OpenStack is very aware of the

00:38:45,900 --> 00:38:50,070
problem that a project which has a

00:38:48,000 --> 00:38:52,170
constantly growing number of products

00:38:50,070 --> 00:38:54,510
that are part of it is going to be very

00:38:52,170 --> 00:38:55,950
hard to administrate over at a time so

00:38:54,510 --> 00:38:59,880
what happens that bid for the key

00:38:55,950 --> 00:39:01,530
releases they introduced a policy that

00:38:59,880 --> 00:39:05,340
is basically called the big tent

00:39:01,530 --> 00:39:07,770
initiative which means that previously

00:39:05,340 --> 00:39:09,690
you could only be an openstack or

00:39:07,770 --> 00:39:10,740
components so you could only officially

00:39:09,690 --> 00:39:13,950
be part of OpenStack

00:39:10,740 --> 00:39:15,420
if you went through the incubation so

00:39:13,950 --> 00:39:17,220
some people would gather it they would

00:39:15,420 --> 00:39:19,200
produce code they would bring the idea

00:39:17,220 --> 00:39:21,750
of integrating this into OpenStack up

00:39:19,200 --> 00:39:24,780
then the product would be maintained it

00:39:21,750 --> 00:39:27,000
would be sort of same I officially be

00:39:24,780 --> 00:39:28,980
part of OpenStack and then after some

00:39:27,000 --> 00:39:30,840
release periods it would just be coming

00:39:28,980 --> 00:39:34,619
up in snake horror component that's the

00:39:30,840 --> 00:39:36,810
part for basically all OpenStack horror

00:39:34,619 --> 00:39:38,340
components we see right now and with

00:39:36,810 --> 00:39:40,050
Kili oh that is just going to change

00:39:38,340 --> 00:39:41,670
because what will happen in kilo is that

00:39:40,050 --> 00:39:43,920
we will have a big tent which means the

00:39:41,670 --> 00:39:47,100
OpenStack umbrella the brand name

00:39:43,920 --> 00:39:49,080
OpenStack will basically adopt any sort

00:39:47,100 --> 00:39:51,390
of components that wants to be part of

00:39:49,080 --> 00:39:52,500
OpenStack and will say okay so you're a

00:39:51,390 --> 00:39:55,050
part of OpenStack now congratulations

00:39:52,500 --> 00:39:57,330
which obviously means that the brand

00:39:55,050 --> 00:40:00,350
will become less important all the time

00:39:57,330 --> 00:40:02,910
there will be no constant quality

00:40:00,350 --> 00:40:06,090
assurance over the individual OpenStack

00:40:02,910 --> 00:40:09,420
components there will be certain Hines

00:40:06,090 --> 00:40:11,580
for users telling them what the maturity

00:40:09,420 --> 00:40:13,440
state of a software actually is there

00:40:11,580 --> 00:40:15,869
will be the so-called release tax and

00:40:13,440 --> 00:40:17,819
there will be a a tag that's called core

00:40:15,869 --> 00:40:20,130
release components or every

00:40:17,819 --> 00:40:22,559
some unreleased components and that will

00:40:20,130 --> 00:40:24,869
um supposedly at least that is the idea

00:40:22,559 --> 00:40:26,699
behind the solution tell users these are

00:40:24,869 --> 00:40:29,400
the core core components of OpenStack

00:40:26,699 --> 00:40:31,410
and they are officially maintained the

00:40:29,400 --> 00:40:33,180
problem is that all big vendors doing

00:40:31,410 --> 00:40:35,819
OpenStack ratner are just rubbing their

00:40:33,180 --> 00:40:37,890
hands and actually what they want to do

00:40:35,819 --> 00:40:40,099
now obviously is put all their

00:40:37,890 --> 00:40:42,900
all their material all their software

00:40:40,099 --> 00:40:45,779
into OpenStack which basically will end

00:40:42,900 --> 00:40:48,719
up with a problem that is the big ten is

00:40:45,779 --> 00:40:50,910
full of clowns right um if it's a big

00:40:48,719 --> 00:40:52,949
tent actually you will have a number of

00:40:50,910 --> 00:40:54,449
people in there there will be developers

00:40:52,949 --> 00:40:56,940
there will be numerous pieces of

00:40:54,449 --> 00:40:59,940
software you will most likely have

00:40:56,940 --> 00:41:02,400
software components doing basically the

00:40:59,940 --> 00:41:05,640
same thing so you will have multiple

00:41:02,400 --> 00:41:08,849
solutions for the same problems and as a

00:41:05,640 --> 00:41:09,390
colleague of ours just stated quite in a

00:41:08,849 --> 00:41:11,369
correct way

00:41:09,390 --> 00:41:12,809
instead of having one functional

00:41:11,369 --> 00:41:14,940
solution I can now choose between

00:41:12,809 --> 00:41:16,859
Thirteen's that are completely broken in

00:41:14,940 --> 00:41:20,130
different ways mine is really a sunshine

00:41:16,859 --> 00:41:21,959
and that is one of the biggest problems

00:41:20,130 --> 00:41:23,549
that the big tent initiative actually is

00:41:21,959 --> 00:41:25,319
going to bring into OpenStack so at

00:41:23,549 --> 00:41:26,819
least in our opinion the big tent thing

00:41:25,319 --> 00:41:28,859
is not going to make up and stack better

00:41:26,819 --> 00:41:31,440
or more stable it's just going to add

00:41:28,859 --> 00:41:32,699
more diversity into a project that

00:41:31,440 --> 00:41:34,769
really doesn't need any additional

00:41:32,699 --> 00:41:37,949
diversity because by now already is

00:41:34,769 --> 00:41:41,430
complex enough to properly work the

00:41:37,949 --> 00:41:42,900
interesting part here is how well does

00:41:41,430 --> 00:41:45,299
democracy as a software architecture

00:41:42,900 --> 00:41:47,759
model actually work especially if

00:41:45,299 --> 00:41:49,709
democracy is not so much the case in

00:41:47,759 --> 00:41:51,569
this project because there is a lot of

00:41:49,709 --> 00:41:54,449
money in it and lots of vendors willing

00:41:51,569 --> 00:41:56,339
to throw even more money in in fact if

00:41:54,449 --> 00:41:58,319
you have a product definition you also

00:41:56,339 --> 00:41:59,640
have a target specification so what you

00:41:58,319 --> 00:42:02,459
will have is you will have a very clear

00:41:59,640 --> 00:42:05,130
definition of where do I need to go with

00:42:02,459 --> 00:42:07,619
my codes what sort of functionality do I

00:42:05,130 --> 00:42:12,719
have to implement in order to make this

00:42:07,619 --> 00:42:15,779
product actually useful and in fact you

00:42:12,719 --> 00:42:17,910
need some sort of overarching product

00:42:15,779 --> 00:42:19,979
definition so you would need something

00:42:17,910 --> 00:42:22,319
that helps people OpenStack is expected

00:42:19,979 --> 00:42:26,089
to be this and to do that and right now

00:42:22,319 --> 00:42:28,829
that is exactly the part that is missing

00:42:26,089 --> 00:42:30,719
the interesting question is who's our

00:42:28,829 --> 00:42:31,930
customer and what do they need and based

00:42:30,719 --> 00:42:33,820
from that

00:42:31,930 --> 00:42:35,640
it would be relatively easy to go ahead

00:42:33,820 --> 00:42:37,990
and tell people what are the mandatory

00:42:35,640 --> 00:42:40,270
desirable optional properties of the

00:42:37,990 --> 00:42:42,160
product what do we want in this thing

00:42:40,270 --> 00:42:44,380
what sort of functionality do we need

00:42:42,160 --> 00:42:46,270
and what is pointer for a problem space

00:42:44,380 --> 00:42:48,880
and what is something that we may not

00:42:46,270 --> 00:42:51,250
even want to address why can we just say

00:42:48,880 --> 00:42:52,990
there is a solution for this already use

00:42:51,250 --> 00:42:55,090
this and let us not reinvent something

00:42:52,990 --> 00:42:57,400
else which OpenStack has done a number

00:42:55,090 --> 00:42:59,230
of times and once you are at that point

00:42:57,400 --> 00:43:01,090
so once you are at the point where you

00:42:59,230 --> 00:43:03,280
have a clear target definition of what

00:43:01,090 --> 00:43:04,780
you want to achieve obviously you can

00:43:03,280 --> 00:43:06,520
start doing certain things such as

00:43:04,780 --> 00:43:08,050
Quality Assurance so you wouldn't be

00:43:06,520 --> 00:43:09,760
running into the problems that Christine

00:43:08,050 --> 00:43:11,500
and I have just described you wouldn't

00:43:09,760 --> 00:43:13,150
be running into a problem where the

00:43:11,500 --> 00:43:14,500
dashboard the OpenStack horizon

00:43:13,150 --> 00:43:17,320
dashboard suddenly becomes unusable

00:43:14,500 --> 00:43:19,630
because some developer removes lines of

00:43:17,320 --> 00:43:21,369
code without really understanding that

00:43:19,630 --> 00:43:25,210
he was making implications on our

00:43:21,369 --> 00:43:26,740
software as well and now obviously um if

00:43:25,210 --> 00:43:27,880
you've worked with OpenStack then you

00:43:26,740 --> 00:43:30,280
will say hey wait there's quality

00:43:27,880 --> 00:43:32,170
assurance right so I was bucked by

00:43:30,280 --> 00:43:34,420
OpenStack developers because I didn't

00:43:32,170 --> 00:43:37,450
specify proper unit tests for the

00:43:34,420 --> 00:43:38,680
OpenStack code that I submitted the

00:43:37,450 --> 00:43:40,780
problem is without a target

00:43:38,680 --> 00:43:42,609
specification you have no idea about the

00:43:40,780 --> 00:43:43,240
requirements so you have no idea where

00:43:42,609 --> 00:43:45,609
to go

00:43:43,240 --> 00:43:47,890
you can certainly unit test your code

00:43:45,609 --> 00:43:50,500
and you can make sure that it fulfills

00:43:47,890 --> 00:43:52,090
certain requirements if you have those

00:43:50,500 --> 00:43:53,890
requirements if you don't have the

00:43:52,090 --> 00:43:55,450
requirements you will get 100% certified

00:43:53,890 --> 00:43:57,340
 and that's the case in

00:43:55,450 --> 00:43:59,140
OpenStack most of the time so you will

00:43:57,340 --> 00:44:00,310
have you know that works but

00:43:59,140 --> 00:44:03,490
you have no idea what it will actually

00:44:00,310 --> 00:44:05,530
do and these are the companies

00:44:03,490 --> 00:44:07,450
supporting you in doing that all these

00:44:05,530 --> 00:44:09,310
individual vendors have very own

00:44:07,450 --> 00:44:11,590
interests when it comes to OpenStack and

00:44:09,310 --> 00:44:13,810
obviously they have a very moderate

00:44:11,590 --> 00:44:16,000
interest in their own OpenStack product

00:44:13,810 --> 00:44:18,730
they don't want the OpenStack project

00:44:16,000 --> 00:44:20,680
per se to be successful what they want

00:44:18,730 --> 00:44:23,050
is their product to be successful and

00:44:20,680 --> 00:44:25,090
the funny thing is for Red Hat or any

00:44:23,050 --> 00:44:27,130
other OpenStack vendor it doesn't really

00:44:25,090 --> 00:44:29,440
make sense to keep OpenStack in its

00:44:27,130 --> 00:44:31,630
natural form up and working because if

00:44:29,440 --> 00:44:34,540
that was the case their product would be

00:44:31,630 --> 00:44:36,400
very hard to make unique if the

00:44:34,540 --> 00:44:38,260
OpenStack upstream distribution was just

00:44:36,400 --> 00:44:40,330
working fine with all the material that

00:44:38,260 --> 00:44:42,940
you need for the vendors it would be

00:44:40,330 --> 00:44:45,100
very hard to generate a known product on

00:44:42,940 --> 00:44:47,410
top of that so as funny as it sounds

00:44:45,100 --> 00:44:49,300
but as Rackspace or HP or redhead or

00:44:47,410 --> 00:44:51,580
wherever you are you don't want to be

00:44:49,300 --> 00:44:53,710
stuck had to be really working because

00:44:51,580 --> 00:44:58,630
that would actually make your own

00:44:53,710 --> 00:45:01,720
business model very hard to implement so

00:44:58,630 --> 00:45:03,550
um in addition to that obviously we

00:45:01,720 --> 00:45:04,990
would need a limited learning more

00:45:03,550 --> 00:45:06,550
technology stack when working with

00:45:04,990 --> 00:45:09,580
OpenStack because in its current form

00:45:06,550 --> 00:45:12,130
for starters it's completely impossible

00:45:09,580 --> 00:45:14,110
to just start working on OpenStack if

00:45:12,130 --> 00:45:15,970
you're in a very experienced Python

00:45:14,110 --> 00:45:18,310
programmer you will not be able to work

00:45:15,970 --> 00:45:21,610
with OpenStack in its current way as a

00:45:18,310 --> 00:45:23,440
developer also companies will not be

00:45:21,610 --> 00:45:25,660
able to hire people just working and

00:45:23,440 --> 00:45:27,040
OpenStack the way it currently is for

00:45:25,660 --> 00:45:28,270
system administrators it's almost

00:45:27,040 --> 00:45:29,470
impossible to understand what's

00:45:28,270 --> 00:45:31,600
happening in the background if you're

00:45:29,470 --> 00:45:33,280
not some sort of experienced developer

00:45:31,600 --> 00:45:34,720
and it gets even worse because we have

00:45:33,280 --> 00:45:39,310
additional components being added to

00:45:34,720 --> 00:45:42,430
that yeah so I guess you start with yeah

00:45:39,310 --> 00:45:43,960
this is just an example this is one of

00:45:42,430 --> 00:45:45,670
the service component this is monitoring

00:45:43,960 --> 00:45:48,760
it's a service it's called monoski and

00:45:45,670 --> 00:45:50,440
if you go to the wiki and ask what does

00:45:48,760 --> 00:45:51,130
it do they will tell you it's an

00:45:50,440 --> 00:45:53,890
open-source

00:45:51,130 --> 00:45:55,720
multi-tenant highly scalable performant

00:45:53,890 --> 00:45:58,870
for do i have a bingo

00:45:55,720 --> 00:46:01,180
already monitoring as a service solution

00:45:58,870 --> 00:46:04,450
that integrates with OpenStack it uses

00:46:01,180 --> 00:46:07,030
the REST API for high speed metrics

00:46:04,450 --> 00:46:08,680
processing acquiring and it has a

00:46:07,030 --> 00:46:11,770
streaming engine and the notification

00:46:08,680 --> 00:46:14,140
engine yes so so what is it made from

00:46:11,770 --> 00:46:17,410
except from 100% free-range organic

00:46:14,140 --> 00:46:19,570
small-batch passwords is made from Kafka

00:46:17,410 --> 00:46:26,320
a storm zookeeper my ask a vagrant drop

00:46:19,570 --> 00:46:30,390
rezard Vertica and influx to be I think

00:46:26,320 --> 00:46:30,390
this is still missing MongoDB but yeah

00:46:34,190 --> 00:46:46,080
try to run that it's fun people really

00:46:42,240 --> 00:46:48,840
try to to do things and OpenStack

00:46:46,080 --> 00:46:51,840
because they can and and push things in

00:46:48,840 --> 00:46:54,810
this or they try to unify concepts that

00:46:51,840 --> 00:46:57,330
that are really hard to unify V if you

00:46:54,810 --> 00:46:59,610
have this this container-based darker

00:46:57,330 --> 00:47:01,230
stuff for example and Dhaka is a lot

00:46:59,610 --> 00:47:02,790
like OpenStack only it's from a deaf

00:47:01,230 --> 00:47:05,160
perspective various OpenStack is more

00:47:02,790 --> 00:47:07,410
from an ops perspective so wouldn't it

00:47:05,160 --> 00:47:09,480
be great if he if we unify that if you

00:47:07,410 --> 00:47:11,580
do that you will see there is a

00:47:09,480 --> 00:47:15,210
component there is a nova compute docker

00:47:11,580 --> 00:47:17,070
for example but if you try to run that

00:47:15,210 --> 00:47:19,530
you see that it is possible to start a

00:47:17,070 --> 00:47:21,060
docker container but the concept of an

00:47:19,530 --> 00:47:23,850
image in docker and the concept of an

00:47:21,060 --> 00:47:26,570
image and OpenStack they can't really be

00:47:23,850 --> 00:47:29,520
unified that leads to an image explosion

00:47:26,570 --> 00:47:31,200
what lanced us and OpenStack and what

00:47:29,520 --> 00:47:33,690
the image registry does and docker

00:47:31,200 --> 00:47:35,940
they are different things and it is not

00:47:33,690 --> 00:47:38,820
enough to write a nova component to

00:47:35,940 --> 00:47:40,650
start docker images in your cloud you

00:47:38,820 --> 00:47:42,690
also have to change a lot of other

00:47:40,650 --> 00:47:43,320
things that is not happening at all in a

00:47:42,690 --> 00:47:46,230
controlled way

00:47:43,320 --> 00:47:48,000
there is the LXE there's the lxd there's

00:47:46,230 --> 00:47:50,190
the dhaka project and OpenStack and they

00:47:48,000 --> 00:47:52,470
all just concentrate on the compute

00:47:50,190 --> 00:47:55,440
component but they're not thinking about

00:47:52,470 --> 00:47:57,150
how OpenStack as a little ization

00:47:55,440 --> 00:47:59,640
concept needs to change in order to

00:47:57,150 --> 00:48:08,880
accommodate these ideas and what would

00:47:59,640 --> 00:48:10,590
be a good strategy to do that so which

00:48:08,880 --> 00:48:12,390
brings us to a really important question

00:48:10,590 --> 00:48:14,850
where is OpenStack now and how is the

00:48:12,390 --> 00:48:16,430
OpenStack project I'm aiming at fixing

00:48:14,850 --> 00:48:19,710
the problems that we have just explained

00:48:16,430 --> 00:48:21,900
as you will certainly know there is a

00:48:19,710 --> 00:48:24,060
semi-annual OpenStack developer's

00:48:21,900 --> 00:48:25,620
summits twice a year so all people

00:48:24,060 --> 00:48:27,720
interested in OpenStack gather together

00:48:25,620 --> 00:48:30,000
and start working and start discussing

00:48:27,720 --> 00:48:32,040
problems or at least that is what you

00:48:30,000 --> 00:48:33,930
think they would do and as we just

00:48:32,040 --> 00:48:36,090
explained there is a number of problems

00:48:33,930 --> 00:48:38,670
to be dressed in OpenStack now if you go

00:48:36,090 --> 00:48:42,290
to Flickr and just enter OpenStack into

00:48:38,670 --> 00:48:42,290
the search box this is what you get

00:48:44,509 --> 00:48:51,359
so there may be room for improvement in

00:48:48,119 --> 00:48:53,700
that certain aspect right and we're

00:48:51,359 --> 00:48:56,099
obviously not the only people having

00:48:53,700 --> 00:48:59,190
that impression because Florian Haas

00:48:56,099 --> 00:49:04,470
firmest XO has just published a public

00:48:59,190 --> 00:49:05,880
post about the 2014 OpenStack summit in

00:49:04,470 --> 00:49:08,640
which you complain about exactly this

00:49:05,880 --> 00:49:10,289
thing being OpenStack developers summits

00:49:08,640 --> 00:49:12,029
are by now completely overrun by large

00:49:10,289 --> 00:49:14,160
companies and and what really is the

00:49:12,029 --> 00:49:16,349
most important part is the partying and

00:49:14,160 --> 00:49:18,480
not so much doing technical discussions

00:49:16,349 --> 00:49:20,670
and defining the targets that you want

00:49:18,480 --> 00:49:21,569
to achieve with your software so that is

00:49:20,670 --> 00:49:23,190
something that definitely needs

00:49:21,569 --> 00:49:24,930
improvement and that is something that

00:49:23,190 --> 00:49:28,529
we really expect and hope to see in

00:49:24,930 --> 00:49:31,829
OpenStack soon so um who has a fall

00:49:28,529 --> 00:49:35,220
asleep during the presentation who is

00:49:31,829 --> 00:49:36,450
still asleep and can answer I guess for

00:49:35,220 --> 00:49:38,759
those of you who would just want to

00:49:36,450 --> 00:49:40,619
quick and fast summary of what we've

00:49:38,759 --> 00:49:43,470
been telling you over the last few

00:49:40,619 --> 00:49:44,910
minutes here and just to understand and

00:49:43,470 --> 00:49:48,029
just to point out that we are by no

00:49:44,910 --> 00:49:49,890
means how style against OpenStack what

00:49:48,029 --> 00:49:51,690
we like OpenStack actually we've

00:49:49,890 --> 00:49:54,329
invested a lot of work into OpenStack

00:49:51,690 --> 00:49:55,859
and by now we have a solution that is

00:49:54,329 --> 00:49:57,569
able to sort of live up to our

00:49:55,859 --> 00:50:00,569
expectations we know there is still a

00:49:57,569 --> 00:50:03,509
lot of work to do um but what we do not

00:50:00,569 --> 00:50:05,609
want to do today is let you go with the

00:50:03,509 --> 00:50:06,839
statement OpenStack is a part of pile of

00:50:05,609 --> 00:50:08,970
 that nobody needs to use because

00:50:06,839 --> 00:50:10,890
that is not the case what we want to

00:50:08,970 --> 00:50:12,930
tell you is OpenStack is not already

00:50:10,890 --> 00:50:15,089
product no matter what manners tell you

00:50:12,930 --> 00:50:16,740
if you want to go with OpenStack you do

00:50:15,089 --> 00:50:19,380
not get a solution that will fit your

00:50:16,740 --> 00:50:22,049
needs you will have to invest a lot of

00:50:19,380 --> 00:50:24,180
time and OpenStack Morris a box of nuts

00:50:22,049 --> 00:50:27,119
and bolts and you need to screw them

00:50:24,180 --> 00:50:29,009
together in a way to be perfect to fit

00:50:27,119 --> 00:50:30,869
for your enterprise that is a large

00:50:29,009 --> 00:50:32,099
portion of work and that is something

00:50:30,869 --> 00:50:34,279
that you need to take into consideration

00:50:32,099 --> 00:50:36,960
if you consider going with OpenStack

00:50:34,279 --> 00:50:38,160
however OpenStack no a project in the

00:50:36,960 --> 00:50:39,750
cloud community right now has the

00:50:38,160 --> 00:50:40,980
OpenStack momentum so it's not like

00:50:39,750 --> 00:50:42,720
there's an alternative if there is

00:50:40,980 --> 00:50:44,789
equipped ascend there is open nebula and

00:50:42,720 --> 00:50:46,680
whatnot but really if you want to go a

00:50:44,789 --> 00:50:48,779
large scale on a web hosting platform

00:50:46,680 --> 00:50:50,730
then OpenStack is the project you want

00:50:48,779 --> 00:50:52,769
to go with for large enterprises that's

00:50:50,730 --> 00:50:54,269
the way it is so you don't get around it

00:50:52,769 --> 00:50:56,789
but you need to invest time to make it

00:50:54,269 --> 00:50:57,630
work many other projects suffer from

00:50:56,789 --> 00:51:00,690
limited

00:50:57,630 --> 00:51:02,580
such as not having multi-tenancy mode or

00:51:00,690 --> 00:51:03,990
multi-node functionality that is

00:51:02,580 --> 00:51:05,700
something you all get an openstack you

00:51:03,990 --> 00:51:07,530
just need to make it fit and you just

00:51:05,700 --> 00:51:11,880
need to stick it together in a way that

00:51:07,530 --> 00:51:13,890
works for you yeah

00:51:11,880 --> 00:51:16,800
that's your part yeah thanks OpenStack

00:51:13,890 --> 00:51:20,250
is that way the way it is because it's

00:51:16,800 --> 00:51:24,030
currently approximately here in the

00:51:20,250 --> 00:51:26,460
standard hype cycle so the next thing

00:51:24,030 --> 00:51:33,120
that happens is that and I hope we have

00:51:26,460 --> 00:51:35,970
been part of that what needs to happen

00:51:33,120 --> 00:51:38,370
is some kind of consolidation not just

00:51:35,970 --> 00:51:41,220
in the market but also in the technology

00:51:38,370 --> 00:51:42,600
some kind of unified view and what we

00:51:41,220 --> 00:51:44,400
actually want to build and how we are

00:51:42,600 --> 00:51:45,840
going to build this so that we get a

00:51:44,400 --> 00:51:47,960
manageable piece of something that

00:51:45,840 --> 00:51:50,040
actually does that

00:51:47,960 --> 00:51:52,260
vendors are currently not helpful

00:51:50,040 --> 00:51:54,530
vendors are building distributions of

00:51:52,260 --> 00:51:56,940
OpenStack they all promise you the the

00:51:54,530 --> 00:52:00,570
viennese castle that you have seen in

00:51:56,940 --> 00:52:03,810
the beginning but no when des actually

00:52:00,570 --> 00:52:05,730
has a solution that is complete that is

00:52:03,810 --> 00:52:07,890
because Sdn at-sts software-defined

00:52:05,730 --> 00:52:09,330
storage suffer Defined Networking are

00:52:07,890 --> 00:52:11,370
two very hard problems and they have

00:52:09,330 --> 00:52:13,590
very little overhead and you can get

00:52:11,370 --> 00:52:16,380
things from one vendor that is probably

00:52:13,590 --> 00:52:18,030
having an SDS solution or other people

00:52:16,380 --> 00:52:19,980
like to repair that have an SDN solution

00:52:18,030 --> 00:52:22,830
but you can't get a distro that is

00:52:19,980 --> 00:52:25,470
up-to-date and is actually solving those

00:52:22,830 --> 00:52:28,200
problems in an acceptable way so you

00:52:25,470 --> 00:52:30,000
need vendors need to agree and they need

00:52:28,200 --> 00:52:33,300
to start to actually cooperate instead

00:52:30,000 --> 00:52:35,640
of trying to win the market and own it

00:52:33,300 --> 00:52:37,230
in some kind of way that is not going to

00:52:35,640 --> 00:52:40,320
happen but they still don't believe that

00:52:37,230 --> 00:52:44,550
that is also normal for that part of

00:52:40,320 --> 00:52:47,130
market or product maturity but they need

00:52:44,550 --> 00:52:50,610
to come through that and actually reach

00:52:47,130 --> 00:52:53,460
this that is going to happen it's

00:52:50,610 --> 00:53:00,630
starting right now but it is not there

00:52:53,460 --> 00:53:02,310
yet in any way yeah and you also have to

00:53:00,630 --> 00:53:03,990
remember that open stack is not a

00:53:02,310 --> 00:53:06,630
battery project but in some ways it's

00:53:03,990 --> 00:53:08,760
like an Apache project and Apache is

00:53:06,630 --> 00:53:10,650
also a development model that is

00:53:08,760 --> 00:53:14,040
something that vendors used to manage

00:53:10,650 --> 00:53:16,290
open source that means to be open source

00:53:14,040 --> 00:53:18,150
II without being actually open source II

00:53:16,290 --> 00:53:19,230
because if you want something that every

00:53:18,150 --> 00:53:21,570
works you have to still buy the

00:53:19,230 --> 00:53:23,700
proprietary things or add proprietary

00:53:21,570 --> 00:53:25,350
components to make it work that is

00:53:23,700 --> 00:53:28,230
nothing new the same thing happens in

00:53:25,350 --> 00:53:31,800
the Hadoop market and the the entire

00:53:28,230 --> 00:53:35,580
model was prototype basically with the

00:53:31,800 --> 00:53:37,770
Java community process so yeah if you

00:53:35,580 --> 00:53:39,240
have questions please ask them if you

00:53:37,770 --> 00:53:41,190
don't have questions and you want to

00:53:39,240 --> 00:53:43,590
know more about OpenStack come to this

00:53:41,190 --> 00:53:47,660
it's just around the corner at Lavanya

00:53:43,590 --> 00:53:47,660
Andrew and thanks

00:53:57,600 --> 00:54:10,720
they always need somebody to be the

00:53:59,830 --> 00:54:13,230
first okay then see thank you so much go

00:54:10,720 --> 00:54:13,230
ahead thank you

00:54:14,620 --> 00:54:20,400
what are attentive to OpenStack there is

00:54:17,860 --> 00:54:24,670
many components that are not really

00:54:20,400 --> 00:54:26,680
multi-tenancy and I think that open have

00:54:24,670 --> 00:54:30,790
enough for example is such a thing that

00:54:26,680 --> 00:54:33,610
is similar in the way that it lives with

00:54:30,790 --> 00:54:35,860
libvirt and KVM and stuff but for

00:54:33,610 --> 00:54:39,070
example it doesn't do Sdn and I don't

00:54:35,860 --> 00:54:42,240
know how well it does STS there are

00:54:39,070 --> 00:54:44,920
container solutions many of them ignore

00:54:42,240 --> 00:54:48,220
for example storage requirements for

00:54:44,920 --> 00:54:49,690
mobile storage for for STS that means

00:54:48,220 --> 00:54:52,390
that once you start a container

00:54:49,690 --> 00:54:55,000
somewhere it's tied to there and once

00:54:52,390 --> 00:54:56,590
you have one kind of container on the

00:54:55,000 --> 00:54:59,590
Box you have Co scheduling requirements

00:54:56,590 --> 00:55:02,670
that also require that you have other

00:54:59,590 --> 00:55:05,110
types of control it has on the same box

00:55:02,670 --> 00:55:06,670
that is something that in the

00:55:05,110 --> 00:55:09,160
infrastructure as code thing you would

00:55:06,670 --> 00:55:11,650
want to avoid and if you want Network

00:55:09,160 --> 00:55:13,870
tenant isolation things get even more

00:55:11,650 --> 00:55:15,640
complicated there is cloud stack that

00:55:13,870 --> 00:55:20,380
kind of does a similar thing

00:55:15,640 --> 00:55:23,020
there was eucalyptus a company headed by

00:55:20,380 --> 00:55:25,720
by Morton Macca's which was previously

00:55:23,020 --> 00:55:28,720
the CEO of MySQL which is how I knew him

00:55:25,720 --> 00:55:31,270
but his company got bought by HP and our

00:55:28,720 --> 00:55:33,850
eucalyptus is now part of the HP Cloud

00:55:31,270 --> 00:55:43,980
thingy basically means it's dead because

00:55:33,850 --> 00:55:49,150
HP does OpenStack because its HP yes but

00:55:43,980 --> 00:55:54,630
and yeah that's mostly what is in the

00:55:49,150 --> 00:55:54,630
market more questions

00:55:58,030 --> 00:56:02,180
all right so we'll be around um for the

00:56:01,250 --> 00:56:04,160
rest of the afternoon

00:56:02,180 --> 00:56:06,020
so if you have any questions we have

00:56:04,160 --> 00:56:08,390
after you leave the room here then

00:56:06,020 --> 00:56:12,010
please feel free to ask and we wish you

00:56:08,390 --> 00:56:12,010

YouTube URL: https://www.youtube.com/watch?v=xTibZXix-T0


