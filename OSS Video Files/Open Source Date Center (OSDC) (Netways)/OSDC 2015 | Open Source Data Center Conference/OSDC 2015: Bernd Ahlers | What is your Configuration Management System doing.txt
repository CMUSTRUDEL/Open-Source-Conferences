Title: OSDC 2015: Bernd Ahlers | What is your Configuration Management System doing
Publication date: 2015-04-30
Playlist: OSDC 2015 | Open Source Data Center Conference
Description: 
	If you are managing computing infrastructure these days you probably use some kind of configuration management system like Chef, Puppet, Ansible or others. But do you know what those systems do all day long? What changes are applied over the day? Did something change on a machine that caused an incident? Most configuration management systems have pluggable event reporting mechanisms. This talk will show you how to use Graylog2, Icinga2 and a custom Chef handler to collect data from Chef runs and Icinga2 monitoring events of all your machines in a central place. This allows you to see what changes are applied on your infrastructure, alert on certain changes or even correlate monitoring alerts with changes on a machine.
We will provide virtual machine images after the talk to make it easy to get started with the presented examples.
Captions: 
	00:00:06,970 --> 00:00:11,709
okay welcome back everyone

00:00:09,190 --> 00:00:16,990
I hope you had some coffee to stay awake

00:00:11,709 --> 00:00:22,119
so let's welcome pant alas hey can you

00:00:16,990 --> 00:00:23,829
give me well ok what's the configuration

00:00:22,119 --> 00:00:25,599
management doing who is using

00:00:23,829 --> 00:00:34,200
configuration management in its data

00:00:25,599 --> 00:00:37,329
center ok that's good yeah I hope I can

00:00:34,200 --> 00:00:40,320
help with answering that question what's

00:00:37,329 --> 00:00:43,329
your configuration management doing um

00:00:40,320 --> 00:00:45,789
hey i'm bound i'm working at greylock in

00:00:43,329 --> 00:00:52,210
hamburg and you can reach me over the

00:00:45,789 --> 00:00:54,249
internets several places configuration

00:00:52,210 --> 00:00:56,829
management tools allow us to manage our

00:00:54,249 --> 00:00:58,839
computing resources these days very

00:00:56,829 --> 00:01:03,190
effectively and in a consistent way

00:00:58,839 --> 00:01:05,680
these days they make it really easy to

00:01:03,190 --> 00:01:07,960
run hundreds of thousands of machines

00:01:05,680 --> 00:01:09,970
without having to do all this

00:01:07,960 --> 00:01:17,020
configuration stuff installing stuff

00:01:09,970 --> 00:01:19,390
manually opened over again if you're

00:01:17,020 --> 00:01:21,510
using stuff like shared modules or

00:01:19,390 --> 00:01:24,130
cookbooks stuff the other people wrote

00:01:21,510 --> 00:01:28,150
it's pretty easy pretty easy to end up

00:01:24,130 --> 00:01:30,640
with hundreds or thousands of manage

00:01:28,150 --> 00:01:33,520
resources like files and packages and

00:01:30,640 --> 00:01:36,100
services per note so you have lots of

00:01:33,520 --> 00:01:38,470
notes and managing lots of resources per

00:01:36,100 --> 00:01:42,390
node it's pretty easy that you get lots

00:01:38,470 --> 00:01:42,390
of yeah lots of manage resources

00:01:46,020 --> 00:01:51,400
and most systems nodes can be configured

00:01:48,850 --> 00:01:54,190
to automatically check on a regular

00:01:51,400 --> 00:01:56,350
basis if there are new updates so for

00:01:54,190 --> 00:01:59,530
example if you have a puppet line

00:01:56,350 --> 00:02:01,120
configured new machines that can check

00:01:59,530 --> 00:02:04,000
into the puppet server regularly and

00:02:01,120 --> 00:02:09,729
asked if there are new updates for me to

00:02:04,000 --> 00:02:12,160
have to do anything this allows us to

00:02:09,729 --> 00:02:15,400
roll out changes to lots of notes very

00:02:12,160 --> 00:02:17,080
easy but also makes it possible to

00:02:15,400 --> 00:02:21,180
really quickly quickly break our

00:02:17,080 --> 00:02:24,100
infrastructure and yeah it der upped our

00:02:21,180 --> 00:02:30,550
applications on our operations and may

00:02:24,100 --> 00:02:33,880
be losing money on that so if you would

00:02:30,550 --> 00:02:35,800
be able to collect analyze monitor all

00:02:33,880 --> 00:02:37,510
the events that happening inside a

00:02:35,800 --> 00:02:39,340
configurator inside a configuration

00:02:37,510 --> 00:02:44,500
management system that sounds like a

00:02:39,340 --> 00:02:46,180
good idea to me it makes it possible to

00:02:44,500 --> 00:02:48,880
quickly analyze if an incident has been

00:02:46,180 --> 00:02:49,840
caused by changes that has been done by

00:02:48,880 --> 00:02:53,320
a configure management configuration

00:02:49,840 --> 00:02:56,380
management system something like website

00:02:53,320 --> 00:02:58,570
went down due to an arrow in the latest

00:02:56,380 --> 00:03:00,730
web server cookbook so someone change

00:02:58,570 --> 00:03:03,940
something is changed in a cookbook it's

00:03:00,730 --> 00:03:09,489
going to deploy it to all your clients

00:03:03,940 --> 00:03:13,840
it breaks website to goes down for

00:03:09,489 --> 00:03:17,049
example or having the arrows thrown

00:03:13,840 --> 00:03:19,150
during an update on the clumsy are on

00:03:17,049 --> 00:03:23,860
the agents available in the central

00:03:19,150 --> 00:03:26,190
place can also help debugging those

00:03:23,860 --> 00:03:26,190
things

00:03:28,410 --> 00:03:33,600
or just graphing the duration of config

00:03:30,570 --> 00:03:37,920
management runs so I've seen runs from

00:03:33,600 --> 00:03:40,260
seconds to 45 minutes to get an overview

00:03:37,920 --> 00:03:42,060
with that nice to actually just

00:03:40,260 --> 00:03:47,700
graphically durations and collect the

00:03:42,060 --> 00:03:49,710
data so yeah do you know what your

00:03:47,700 --> 00:03:52,350
configuration management is doing so

00:03:49,710 --> 00:03:55,110
anyone having solutions for that in

00:03:52,350 --> 00:03:57,120
place like collecting events from your

00:03:55,110 --> 00:04:01,020
configuration management or analyzing

00:03:57,120 --> 00:04:07,190
the locks having stuff like that okay

00:04:01,020 --> 00:04:07,190
but you are you using for that okay yeah

00:04:09,830 --> 00:04:18,390
okay so yeah I would like to show you

00:04:16,260 --> 00:04:20,400
one way to really realize this

00:04:18,390 --> 00:04:24,830
collection of the aforementioned events

00:04:20,400 --> 00:04:24,830
on a centralized lock management system

00:04:24,860 --> 00:04:28,380
most configuration management systems

00:04:27,030 --> 00:04:30,570
offer some way to get access to such

00:04:28,380 --> 00:04:34,440
events i'm using chef here because I'm

00:04:30,570 --> 00:04:35,850
amusing myself day to day and also makes

00:04:34,440 --> 00:04:38,000
it very easy to collect all these events

00:04:35,850 --> 00:04:40,140
that happen inside chef when it runs

00:04:38,000 --> 00:04:42,360
because it has some kind of some

00:04:40,140 --> 00:04:44,160
internal event bus where are lots of

00:04:42,360 --> 00:04:50,190
messages or all the events that happen

00:04:44,160 --> 00:04:52,350
are going to be published to collect all

00:04:50,190 --> 00:04:59,070
these events i'm using Greylock obvious

00:04:52,350 --> 00:05:01,980
reasons and also a singer to to monitor

00:04:59,070 --> 00:05:04,680
one example web server and you seeing a

00:05:01,980 --> 00:05:07,770
two will also publish all its events

00:05:04,680 --> 00:05:11,580
into Greylock we've presented at the

00:05:07,770 --> 00:05:15,840
last osm see in one back last year all

00:05:11,580 --> 00:05:17,760
together with michael me sheriff III so

00:05:15,840 --> 00:05:21,150
since i'm not sure which version it was

00:05:17,760 --> 00:05:26,850
to something he singers able to publish

00:05:21,150 --> 00:05:29,510
all it events to greater for example so

00:05:26,850 --> 00:05:33,510
just a quick introduction of the tools

00:05:29,510 --> 00:05:35,370
chef popular open source management to

00:05:33,510 --> 00:05:39,990
open source configuration management

00:05:35,370 --> 00:05:42,870
tool sorry it uses Ruby as a to provide

00:05:39,990 --> 00:05:44,729
a powerful dsl to manage resources so

00:05:42,870 --> 00:05:50,220
you're actually writing Ruby code to

00:05:44,729 --> 00:05:53,130
define your infrastructure um II singer

00:05:50,220 --> 00:05:55,890
too I don't think you have to I think

00:05:53,130 --> 00:06:01,580
most of you know that so quickly skip it

00:05:55,890 --> 00:06:01,580
use it it's good and of course gray are

00:06:02,630 --> 00:06:07,770
who actually knows Greylock already free

00:06:05,580 --> 00:06:09,979
cams oh cool keep up when you're using

00:06:07,770 --> 00:06:09,979
it

00:06:12,440 --> 00:06:17,420
yeah free and open source to for

00:06:14,670 --> 00:06:20,250
centuries lock management and analysis

00:06:17,420 --> 00:06:23,280
heads has been started by Leonard and

00:06:20,250 --> 00:06:28,440
roughly 2010 called guerilla to at that

00:06:23,280 --> 00:06:32,660
time in late 2012 torch gmbh has been

00:06:28,440 --> 00:06:35,400
founded as a company behind it and the

00:06:32,660 --> 00:06:38,610
beginning of last year there has been a

00:06:35,400 --> 00:06:40,680
big release which where lots of

00:06:38,610 --> 00:06:43,950
components got rewritten the server I go

00:06:40,680 --> 00:06:46,440
out and rest api the web interface got

00:06:43,950 --> 00:06:51,690
completely rewritten from scratch that

00:06:46,440 --> 00:06:54,750
was last februari in 2014 beginning of

00:06:51,690 --> 00:06:58,590
this year is a new us-based company

00:06:54,750 --> 00:07:01,320
called Greylock Rayloc got right up to

00:06:58,590 --> 00:07:05,820
got renamed to grey dog to make it even

00:07:01,320 --> 00:07:10,410
easier because well up to 10 sounded

00:07:05,820 --> 00:07:14,100
weird and yet released 120 in February

00:07:10,410 --> 00:07:16,650
this year which are actually pretty

00:07:14,100 --> 00:07:18,810
successful cosa there have been lots of

00:07:16,650 --> 00:07:21,720
stability improvements speed

00:07:18,810 --> 00:07:24,740
improvements and also saw some new

00:07:21,720 --> 00:07:24,740
features introduced there

00:07:30,610 --> 00:07:40,360
so how do we getting our getting events

00:07:33,699 --> 00:07:43,360
from chef integrator as mentioned

00:07:40,360 --> 00:07:46,330
earlier chef Estes internal event bus

00:07:43,360 --> 00:07:50,680
which you can use to hook into the life

00:07:46,330 --> 00:07:53,110
cycle of the chevrons by building a

00:07:50,680 --> 00:07:55,840
consumer for this event event bus we are

00:07:53,110 --> 00:07:59,080
getting access to more than 60 event

00:07:55,840 --> 00:08:00,550
called eggs it makes it which makes it

00:07:59,080 --> 00:08:02,669
possible to implement a very detailed

00:08:00,550 --> 00:08:06,580
tracing of Chevron's if you want to

00:08:02,669 --> 00:08:10,240
these are all the methods so there's

00:08:06,580 --> 00:08:12,789
lots of stuff like when the run is

00:08:10,240 --> 00:08:15,189
completed when I run has failed when a

00:08:12,789 --> 00:08:19,080
resource could update it and lots of

00:08:15,189 --> 00:08:19,080
other stuff or you couldn't hook into

00:08:20,099 --> 00:08:26,770
when you when you execute chef so when

00:08:23,830 --> 00:08:29,289
you execute a chef client its outputs a

00:08:26,770 --> 00:08:30,550
lot of information like chef version

00:08:29,289 --> 00:08:33,039
what is changing stuff like that and

00:08:30,550 --> 00:08:37,140
this is also based on the internal event

00:08:33,039 --> 00:08:43,890
bus which looks like this so I'm reports

00:08:37,140 --> 00:08:43,890
the chef version the client PID run list

00:08:44,279 --> 00:08:50,589
template it's changing service restarted

00:08:47,079 --> 00:09:00,550
stuff like that that's also based on

00:08:50,589 --> 00:09:02,440
this internal event bus so consuming

00:09:00,550 --> 00:09:05,290
such event requires you to write a

00:09:02,440 --> 00:09:07,140
little bit of code and you have to write

00:09:05,290 --> 00:09:10,240
a so-called start handler and chef

00:09:07,140 --> 00:09:14,290
that's then installed this event handler

00:09:10,240 --> 00:09:16,029
listens for the events so with all these

00:09:14,290 --> 00:09:17,680
Kovac methods available it's pretty

00:09:16,029 --> 00:09:21,519
tempting to just implement all of them

00:09:17,680 --> 00:09:23,649
to collect all events um but I thought

00:09:21,519 --> 00:09:27,010
that it's a bit too noisy so for now I

00:09:23,649 --> 00:09:28,899
just concentrated on the success events

00:09:27,010 --> 00:09:31,329
failure events and a resource

00:09:28,899 --> 00:09:34,230
modification event that's called one a

00:09:31,329 --> 00:09:34,230
resource code updated

00:09:37,060 --> 00:09:44,600
um these chef events are then converted

00:09:40,760 --> 00:09:49,040
to a Gelf message and are being sent

00:09:44,600 --> 00:09:50,510
over HTTP to a great observer Gelf is a

00:09:49,040 --> 00:09:52,070
JSON based former to send structured

00:09:50,510 --> 00:09:57,350
events or gridlock server it's kind of

00:09:52,070 --> 00:10:00,170
similar to the JSON events adjacent

00:09:57,350 --> 00:10:03,310
structure that log stash users so you

00:10:00,170 --> 00:10:07,490
have a few predefined fields like

00:10:03,310 --> 00:10:10,940
timestamp and message and this source

00:10:07,490 --> 00:10:12,830
but you're also able to define your own

00:10:10,940 --> 00:10:18,050
fields in the messages and that what

00:10:12,830 --> 00:10:21,290
that's what we are using to send all

00:10:18,050 --> 00:10:23,480
these internal formations so every chef

00:10:21,290 --> 00:10:26,570
call back get some objects passed into

00:10:23,480 --> 00:10:30,770
and those Conte lots of contain lots of

00:10:26,570 --> 00:10:34,000
information about all the resources

00:10:30,770 --> 00:10:34,000
cookbooks stuff like that

00:10:40,270 --> 00:10:46,880
this is such an event this is actually

00:10:43,640 --> 00:10:51,320
the example of a GILF payload that we're

00:10:46,880 --> 00:10:54,040
sending to Greylock the bottom we have

00:10:51,320 --> 00:10:56,360
the short message was which is just a

00:10:54,040 --> 00:10:58,430
plain text message of what's happening

00:10:56,360 --> 00:11:01,700
or what happened in this case a chevron

00:10:58,430 --> 00:11:05,270
succeeded the source which is ubuntu

00:11:01,700 --> 00:11:07,600
14-4 it's the hostname timestamp version

00:11:05,270 --> 00:11:12,230
for Gelf and then we have all these

00:11:07,600 --> 00:11:13,880
underscore prefixed names which are the

00:11:12,230 --> 00:11:18,170
actual metadata that we adding to the

00:11:13,880 --> 00:11:19,730
event so for example chef version the

00:11:18,170 --> 00:11:22,790
event name which is run completed in

00:11:19,730 --> 00:11:25,070
this case again the node name the

00:11:22,790 --> 00:11:27,170
environment the chevron happens which is

00:11:25,070 --> 00:11:30,290
default in this case the roles that has

00:11:27,170 --> 00:11:33,230
been applied to this node the recipe

00:11:30,290 --> 00:11:35,510
start time elapsed time total resources

00:11:33,230 --> 00:11:38,990
upload updated resources for example and

00:11:35,510 --> 00:11:42,860
then also this Chevron ID which is kind

00:11:38,990 --> 00:11:45,590
of nice you can use that to actually

00:11:42,860 --> 00:11:48,140
find all events that happen to one chef

00:11:45,590 --> 00:11:50,870
Ron so when you know this idea okay we

00:11:48,140 --> 00:11:52,850
have a favor you have a run failed

00:11:50,870 --> 00:11:55,700
message for example like here you can

00:11:52,850 --> 00:11:59,170
just take this ID search for it and find

00:11:55,700 --> 00:12:03,980
all related events on the Chevron so

00:11:59,170 --> 00:12:06,650
this is some a failed event looks almost

00:12:03,980 --> 00:12:08,980
the same as the previous one just has an

00:12:06,650 --> 00:12:12,920
error message error type in Arabic trace

00:12:08,980 --> 00:12:16,820
attached error message again some kind

00:12:12,920 --> 00:12:19,580
of plain text message the arrow type is

00:12:16,820 --> 00:12:23,450
the actual provider and chef that has

00:12:19,580 --> 00:12:25,370
failed and the arrow back trace contains

00:12:23,450 --> 00:12:27,470
the back-trace from the Ruby runtime so

00:12:25,370 --> 00:12:33,590
which larger mostly but I just call it

00:12:27,470 --> 00:12:37,910
off yeah the last example is the

00:12:33,590 --> 00:12:40,310
resource updated this is called when an

00:12:37,910 --> 00:12:41,990
act resources actually been updated so

00:12:40,310 --> 00:12:43,880
there's a file and you just let you

00:12:41,990 --> 00:12:45,080
manage with chef and the content has

00:12:43,880 --> 00:12:49,580
been updated and then this event is

00:12:45,080 --> 00:12:52,130
generated so in this case we have the

00:12:49,580 --> 00:12:53,390
resource action which is create the

00:12:52,130 --> 00:12:55,340
identity of

00:12:53,390 --> 00:12:59,420
the resource which is mostly the name so

00:12:55,340 --> 00:13:02,180
in this case it's a file name the

00:12:59,420 --> 00:13:04,420
resource name is put a template which

00:13:02,180 --> 00:13:08,660
cookbook is it which cookbook version

00:13:04,420 --> 00:13:11,870
what's the recipe name where is it

00:13:08,660 --> 00:13:17,630
defined the resource in the recipe and

00:13:11,870 --> 00:13:20,950
again another duration so those are the

00:13:17,630 --> 00:13:25,340
three events I'm currently tracking and

00:13:20,950 --> 00:13:28,810
sending to greater by the way if you

00:13:25,340 --> 00:13:28,810
have any questions just raise your hand

00:13:31,000 --> 00:13:40,720
arm then the chef plugin is using HTTP

00:13:36,950 --> 00:13:43,670
to send the payload over to Greylock

00:13:40,720 --> 00:13:45,020
which is pretty nice because we don't

00:13:43,670 --> 00:13:48,380
have any other dependencies on any

00:13:45,020 --> 00:13:50,630
libraries because chef also ships as a

00:13:48,380 --> 00:13:53,120
complete Ruby runtime which has Jason

00:13:50,630 --> 00:13:59,540
and HTTP clients built in so there's

00:13:53,120 --> 00:14:03,470
just this one this one HTTP call you

00:13:59,540 --> 00:14:05,030
have to do and that's it and also if you

00:14:03,470 --> 00:14:08,270
want to do that for other systems also

00:14:05,030 --> 00:14:09,410
pretty easy to just use to just use HTTP

00:14:08,270 --> 00:14:11,870
because that should be available

00:14:09,410 --> 00:14:14,240
everywhere and you don't need any

00:14:11,870 --> 00:14:16,270
special protocol dependency stuff like

00:14:14,240 --> 00:14:16,270
that

00:14:19,990 --> 00:14:24,910
so to get started with this you just

00:14:23,140 --> 00:14:26,860
have to install and configure as the

00:14:24,910 --> 00:14:32,620
start handler it's a gem that's released

00:14:26,860 --> 00:14:36,070
on rubygems org later having a link to

00:14:32,620 --> 00:14:38,649
the URL to the source and there's also a

00:14:36,070 --> 00:14:41,290
small rittany which tells you how to

00:14:38,649 --> 00:14:46,420
install it so don't have to take notes

00:14:41,290 --> 00:14:47,800
here since this is running as a start

00:14:46,420 --> 00:14:50,980
handler and chef it has to be configured

00:14:47,800 --> 00:14:52,870
in the chef come pick already because it

00:14:50,980 --> 00:14:57,430
has to hook into the process pretty

00:14:52,870 --> 00:15:02,190
early so regular its et si chef client

00:14:57,430 --> 00:15:05,440
RB and you barely just have to add this

00:15:02,190 --> 00:15:07,720
this is the important part just you have

00:15:05,440 --> 00:15:10,480
this list of start endless in chef and

00:15:07,720 --> 00:15:15,190
then you instantiate a new gal start

00:15:10,480 --> 00:15:17,500
handler event object and yeah you can

00:15:15,190 --> 00:15:20,980
configure the URL of your gilf server

00:15:17,500 --> 00:15:22,480
and that's it basically it's pretty

00:15:20,980 --> 00:15:24,399
important he has to wrap that stuff

00:15:22,480 --> 00:15:26,440
until begin rescue block because if

00:15:24,399 --> 00:15:29,829
something fails here your chef time

00:15:26,440 --> 00:15:31,630
would die so you don't want to have

00:15:29,829 --> 00:15:33,910
media you don't want to have that so

00:15:31,630 --> 00:15:37,089
make sure to wrap at stuff and begin

00:15:33,910 --> 00:15:38,320
rescue so anything going wrong there it

00:15:37,089 --> 00:15:40,890
will just log an arrow and tell you

00:15:38,320 --> 00:15:40,890
what's happened

00:15:47,120 --> 00:15:51,230
once you configure that ship chef will

00:15:49,550 --> 00:15:57,279
now send every event is a girlf message

00:15:51,230 --> 00:16:00,170
away HTTP is a great log that's it so

00:15:57,279 --> 00:16:01,910
prepare the demo the source with that is

00:16:00,170 --> 00:16:09,520
also available I've also the links again

00:16:01,910 --> 00:16:09,520
at the end so yeah any questions so far

00:16:35,820 --> 00:16:38,690
ok

00:16:53,590 --> 00:16:57,960
I just could you set it up this up here

00:17:10,390 --> 00:17:19,420
so one thing we have is the existing

00:17:14,770 --> 00:17:22,180
rail or installation that's running also

00:17:19,420 --> 00:17:26,230
it's already getting it's already

00:17:22,180 --> 00:17:28,540
getting messages can see here it's

00:17:26,230 --> 00:17:33,940
getting all these singer events that are

00:17:28,540 --> 00:17:40,480
happening yeah stuff like this locks

00:17:33,940 --> 00:17:45,250
also coming in then I have any singer to

00:17:40,480 --> 00:17:46,510
running here actually money toss one of

00:17:45,250 --> 00:17:52,270
the vm starts running in the background

00:17:46,510 --> 00:17:57,610
which has a web app so this here and i

00:17:52,270 --> 00:18:01,830
have a website that is yeah simple web

00:17:57,610 --> 00:18:01,830
app says hello sec

00:18:05,110 --> 00:18:08,290
by the way if you have any question

00:18:06,549 --> 00:18:09,760
regarding Greylock I can also just show

00:18:08,290 --> 00:18:12,670
you afterwards or demos will you

00:18:09,760 --> 00:18:14,890
something so you not familiar with that

00:18:12,670 --> 00:18:17,370
so grey dog has this notion of streams

00:18:14,890 --> 00:18:22,330
where you can categorize messages into

00:18:17,370 --> 00:18:24,670
certain categories i created a chef

00:18:22,330 --> 00:18:29,230
events stream here so we can just easily

00:18:24,670 --> 00:18:36,700
filter on all chef events okay sure if

00:18:29,230 --> 00:18:38,740
you can see that there's one message in

00:18:36,700 --> 00:18:42,760
there already which says chef run

00:18:38,740 --> 00:18:46,510
succeeded on the web server um just

00:18:42,760 --> 00:18:50,200
makes it bigger so this is the actual

00:18:46,510 --> 00:18:54,700
message looks basically the same as the

00:18:50,200 --> 00:18:57,490
example payload I showed you elapsed

00:18:54,700 --> 00:18:59,669
time and time recipes note name stuff

00:18:57,490 --> 00:18:59,669
like that

00:19:06,260 --> 00:19:13,610
so what I for example can do now is for

00:19:10,460 --> 00:19:16,040
example k please show me all failed

00:19:13,610 --> 00:19:17,600
Chevron's because I guess I have been

00:19:16,040 --> 00:19:20,330
some failed ones please let me know

00:19:17,600 --> 00:19:30,250
which ones are there so I can now do

00:19:20,330 --> 00:19:30,250
this um I can filter for chef event name

00:19:31,180 --> 00:19:43,520
run failed and the last day and then I'm

00:19:38,930 --> 00:19:49,550
already see some stuff here so chef Ron

00:19:43,520 --> 00:19:52,190
fatal note web server can look at the

00:19:49,550 --> 00:19:54,110
event details and for example here see

00:19:52,190 --> 00:19:59,270
the arrow back trace which is pretty

00:19:54,110 --> 00:20:04,190
long and then there's also this error

00:19:59,270 --> 00:20:06,800
message which says I tried to start the

00:20:04,190 --> 00:20:08,690
web server but receive the exit code of

00:20:06,800 --> 00:20:14,240
one instead of the expected zero so

00:20:08,690 --> 00:20:16,340
looks like the de chèvre at the chef one

00:20:14,240 --> 00:20:24,560
button able to restart the Apache web

00:20:16,340 --> 00:20:30,430
server that's one example you can also

00:20:24,560 --> 00:20:32,870
do is search for resource updated events

00:20:30,430 --> 00:20:39,890
which are triggered when some files

00:20:32,870 --> 00:20:46,600
updated stuff like that so we have a few

00:20:39,890 --> 00:20:52,130
of them just look at this one it says

00:20:46,600 --> 00:20:56,390
resource updated in this case it was in

00:20:52,130 --> 00:21:00,080
the web app cookbook version 10 it was a

00:20:56,390 --> 00:21:05,420
template which has been defined in the

00:21:00,080 --> 00:21:08,810
web app default recipe line 18 and it's

00:21:05,420 --> 00:21:11,720
managing the et Cie apache two sites of

00:21:08,810 --> 00:21:14,110
enabled web app conf so it looks like

00:21:11,720 --> 00:21:17,290
it's a web server configuration for this

00:21:14,110 --> 00:21:17,290
virtual host

00:21:19,000 --> 00:21:25,580
yeah chef version stuff like that so

00:21:23,929 --> 00:21:38,480
what you can now do is just search for

00:21:25,580 --> 00:21:41,450
the for the chevron ID should be so now

00:21:38,480 --> 00:21:43,309
we're searching for the chevron ID and I

00:21:41,450 --> 00:21:51,950
said earlier this is the same for all

00:21:43,309 --> 00:21:57,169
arm for all messages from one chevron so

00:21:51,950 --> 00:22:02,059
there's been a few messages to resources

00:21:57,169 --> 00:22:06,200
got updated and the chevron succeeded so

00:22:02,059 --> 00:22:10,429
this makes it easy to find updated

00:22:06,200 --> 00:22:13,700
resources or look at the complete event

00:22:10,429 --> 00:22:15,879
trace from one chap run from one chef

00:22:13,700 --> 00:22:15,879
Ron

00:22:28,500 --> 00:22:37,650
so what we can also do with some just a

00:22:31,620 --> 00:22:44,070
few more but I also mentioned them that

00:22:37,650 --> 00:22:53,550
we could graph the duration of the

00:22:44,070 --> 00:22:56,460
chevron so where is it see lapse time so

00:22:53,550 --> 00:22:58,920
every vent every successful or fatal

00:22:56,460 --> 00:23:01,320
event has a runtime attached to it so

00:22:58,920 --> 00:23:03,750
how long did this chevron took so I can

00:23:01,320 --> 00:23:05,820
just create a graph from that and then

00:23:03,750 --> 00:23:08,190
actually see if there are any outliers

00:23:05,820 --> 00:23:13,160
in there so this year looks pretty

00:23:08,190 --> 00:23:17,250
normal but here the duration has been

00:23:13,160 --> 00:23:19,410
quite high especially here so the

00:23:17,250 --> 00:23:21,210
regular ones are probably those where no

00:23:19,410 --> 00:23:23,280
updates have updates have been applied

00:23:21,210 --> 00:23:26,330
and the spikes are probably those we're

00:23:23,280 --> 00:23:26,330
actually work has been done

00:23:32,679 --> 00:23:39,080
so what you can do now is just another

00:23:35,510 --> 00:23:47,750
example I kind of break the Apache

00:23:39,080 --> 00:23:50,179
configuration here and then run the

00:23:47,750 --> 00:23:54,950
shaft i manually on the on the web

00:23:50,179 --> 00:24:01,669
server just to illustrate it now it

00:23:54,950 --> 00:24:10,990
starts up and you see some error has

00:24:01,669 --> 00:24:10,990
been thrown we go can you see that so

00:24:13,589 --> 00:24:17,679
yeah it started you see lots of output

00:24:16,059 --> 00:24:19,979
you normally see you see the actually

00:24:17,679 --> 00:24:24,399
the diff that has been applied then

00:24:19,979 --> 00:24:27,429
looks like a service yeah should have

00:24:24,399 --> 00:24:36,669
been restarted but didn't so we're now

00:24:27,429 --> 00:24:40,269
looking for this stuff and go a long way

00:24:36,669 --> 00:24:42,570
to you see here same thing so resource

00:24:40,269 --> 00:24:46,269
got updated the template that are just

00:24:42,570 --> 00:24:49,809
modified then the chevron failed with

00:24:46,269 --> 00:24:57,820
the same error messages that we saw on

00:24:49,809 --> 00:25:01,210
the console as well so what we can also

00:24:57,820 --> 00:25:04,539
see now is that a singer which is

00:25:01,210 --> 00:25:09,759
checking the web application sees an

00:25:04,539 --> 00:25:11,769
arrow so you probably when you when your

00:25:09,759 --> 00:25:14,619
uncle or something you get an alert from

00:25:11,769 --> 00:25:18,789
your singer you can go in there check

00:25:14,619 --> 00:25:21,009
okay web server is affected I want to

00:25:18,789 --> 00:25:22,599
check if there has been any wave if

00:25:21,009 --> 00:25:25,299
there have been any changes to the

00:25:22,599 --> 00:25:39,070
configuration management system lately

00:25:25,299 --> 00:25:41,879
so can just do now search again and pick

00:25:39,070 --> 00:25:41,879
this event here

00:25:49,639 --> 00:25:57,529
so what I can do now is some I search

00:25:53,539 --> 00:25:59,289
for hostname web server which is the

00:25:57,529 --> 00:26:01,369
host name is a field in the single event

00:25:59,289 --> 00:26:03,469
which contains the host name of the

00:26:01,369 --> 00:26:07,639
machine it has been checked and I also

00:26:03,469 --> 00:26:10,219
search for source web server and the

00:26:07,639 --> 00:26:12,349
source is contains the host name of the

00:26:10,219 --> 00:26:16,089
event in the gray log and the chef

00:26:12,349 --> 00:26:18,950
messages so I basically look for

00:26:16,089 --> 00:26:27,799
messages for me singer and from chef for

00:26:18,950 --> 00:26:32,679
this host so i can now see here we have

00:26:27,799 --> 00:26:32,679
connection refusal early error messages

00:26:33,579 --> 00:26:42,019
yeah what I can also see yours that

00:26:38,529 --> 00:26:43,909
there has been a fade Chevron so this

00:26:42,019 --> 00:26:46,039
could be a way where you can where you

00:26:43,909 --> 00:26:51,109
have your infrastructure money toward

00:26:46,039 --> 00:26:53,809
get an incident open get an SMS or call

00:26:51,109 --> 00:26:55,459
them yet by a pager duty go into your

00:26:53,809 --> 00:26:57,679
singer see which house is effective

00:26:55,459 --> 00:26:59,899
check if there's been any changes to the

00:26:57,679 --> 00:27:04,179
configuration management system could be

00:26:59,899 --> 00:27:04,179
one one use case for that

00:27:10,640 --> 00:27:20,620
so now just fixing that fixing it up

00:27:14,060 --> 00:27:20,620
again run chef again

00:27:27,820 --> 00:27:34,140
the lines back so we would restart it

00:27:39,559 --> 00:27:47,049
and a see HTTP ok from you sing again

00:27:42,409 --> 00:27:55,639
and also the succeeded messages from

00:27:47,049 --> 00:28:02,259
from chef and I will screen again any

00:27:55,639 --> 00:28:02,259
questions regarding this ok

00:28:32,480 --> 00:28:39,799
so a set this whole scored for this is

00:28:36,169 --> 00:28:42,740
available on github the source code for

00:28:39,799 --> 00:28:44,299
the chef handler is also available

00:28:42,740 --> 00:28:47,750
github in Ruby gems so you can just

00:28:44,299 --> 00:28:49,520
install it and start using it yeah

00:28:47,750 --> 00:28:55,570
appreciate if someone wants to support

00:28:49,520 --> 00:28:58,460
more events or any other suggestions of

00:28:55,570 --> 00:29:00,410
putting more data in the events I just

00:28:58,460 --> 00:29:02,780
started with yeah some obvious one but

00:29:00,410 --> 00:29:05,330
there's lots of more data available

00:29:02,780 --> 00:29:10,580
inside chef to that could be put in

00:29:05,330 --> 00:29:12,950
those events same for the vagrant setup

00:29:10,580 --> 00:29:16,130
for the demo so if you want to play with

00:29:12,950 --> 00:29:20,090
but I just what i just showed i can just

00:29:16,130 --> 00:29:22,280
use the occ 2015 gamer repository and

00:29:20,090 --> 00:29:24,919
use vagrant to run all this stuff so if

00:29:22,280 --> 00:29:29,090
you run it some gray laga set up facing

00:29:24,919 --> 00:29:30,860
our set up the shaft line to set up so

00:29:29,090 --> 00:29:43,640
you can basically just start playing

00:29:30,860 --> 00:29:46,330
with it that's it thank you any

00:29:43,640 --> 00:29:46,330
questions

00:29:55,640 --> 00:30:01,760
the question is does it only support

00:29:58,380 --> 00:30:03,659
Gelf for now yes and only over HTTP

00:30:01,760 --> 00:30:08,899
because I wanted to avoid the extra

00:30:03,659 --> 00:30:13,380
dependency on client libraries sorry

00:30:08,899 --> 00:30:17,220
yeah as always question was if it also

00:30:13,380 --> 00:30:19,770
supports https TLS for the HD yeah for

00:30:17,220 --> 00:30:22,770
the client yes it does basically you're

00:30:19,770 --> 00:30:25,049
using the internal chef HTTP client

00:30:22,770 --> 00:30:27,000
which supports all the stuff already and

00:30:25,049 --> 00:30:33,289
it also can be configured when you

00:30:27,000 --> 00:30:38,490
instantiate they pay handler welcome

00:30:33,289 --> 00:30:46,640
anything else do you think it's useful

00:30:38,490 --> 00:30:46,640

YouTube URL: https://www.youtube.com/watch?v=f1CgQ3TfxFo


