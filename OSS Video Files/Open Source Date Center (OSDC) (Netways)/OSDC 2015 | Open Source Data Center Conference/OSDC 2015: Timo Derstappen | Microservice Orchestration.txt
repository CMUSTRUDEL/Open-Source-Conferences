Title: OSDC 2015: Timo Derstappen | Microservice Orchestration
Publication date: 2015-04-30
Playlist: OSDC 2015 | Open Source Data Center Conference
Description: 
	There’s no doubt, everyone’s talking about container technologies these days. Especially Docker has established itself as a de facto standard here. These technologies are especially suited to develop, run, and deploy microservices. So there are a few things coming together. This talk will give an overview why things like immutable infrastructure, continuous delivery and small autonomous teams make a lot of sense in today’s web scale architectures. Further, we discuss how these technologies can be used to manage an infrastructure with a high amount of containers.
Captions: 
	00:00:07,530 --> 00:00:13,030
today's first talk will be out by a team

00:00:10,809 --> 00:00:18,480
or dashed happen and it's all about

00:00:13,030 --> 00:00:18,480
microservice orchestration so have fun

00:00:18,600 --> 00:00:26,160
do you hear me yeah microphone is

00:00:21,250 --> 00:00:26,160
working fine so good morning everybody

00:00:26,670 --> 00:00:35,260
I'm timid esta I'm from Cologne and

00:00:30,750 --> 00:00:37,510
first of all the disclaimer we are

00:00:35,260 --> 00:00:42,640
building a container infrastructure on

00:00:37,510 --> 00:00:48,460
top of chorus um so I'm I might be

00:00:42,640 --> 00:00:51,460
biased towards chorus and but I know few

00:00:48,460 --> 00:00:54,160
things about all the other things you

00:00:51,460 --> 00:00:57,760
heard about yesterday so come to me

00:00:54,160 --> 00:01:03,149
after the talk and talk to me I think I

00:00:57,760 --> 00:01:07,149
have an opinion about all of them so

00:01:03,149 --> 00:01:13,020
what but since there were so many

00:01:07,149 --> 00:01:17,079
vendors yesterday I decided to not go

00:01:13,020 --> 00:01:20,319
too much into the higher level like how

00:01:17,079 --> 00:01:23,909
to orchestrate services with for

00:01:20,319 --> 00:01:30,119
instance the mesosphere stack or Vanitas

00:01:23,909 --> 00:01:35,170
or just by doing it with with fleet I

00:01:30,119 --> 00:01:38,020
decided to to show you a little bit like

00:01:35,170 --> 00:01:43,889
of the concepts they like most of them

00:01:38,020 --> 00:01:48,670
are using internally so let's first

00:01:43,889 --> 00:01:51,419
start with a little a little story I

00:01:48,670 --> 00:01:56,259
just want to make this short and not too

00:01:51,419 --> 00:01:58,889
boring for you so you know that this

00:01:56,259 --> 00:02:04,509
there's an outline of every pixel movie

00:01:58,889 --> 00:02:06,789
which is once upon a time every day one

00:02:04,509 --> 00:02:09,729
day because of that because of that

00:02:06,789 --> 00:02:12,700
until finally and this is how all the

00:02:09,729 --> 00:02:17,530
pics and movies work and so I made this

00:02:12,700 --> 00:02:19,390
up for a micro service for micro

00:02:17,530 --> 00:02:20,270
services so once upon a time there was a

00:02:19,390 --> 00:02:22,860
small web

00:02:20,270 --> 00:02:26,280
every day new features were added and

00:02:22,860 --> 00:02:29,100
the users loved it one day it became

00:02:26,280 --> 00:02:32,880
hard to add new features and to maintain

00:02:29,100 --> 00:02:35,550
it and to scale it and because of that

00:02:32,880 --> 00:02:37,830
popular features were put into separate

00:02:35,550 --> 00:02:41,850
services with their own databases

00:02:37,830 --> 00:02:45,720
because of that deployment and server

00:02:41,850 --> 00:02:47,730
provisioning was automated and until

00:02:45,720 --> 00:02:52,500
finally more popular features could be

00:02:47,730 --> 00:02:56,970
added easily so this is all about

00:02:52,500 --> 00:03:00,690
microservices right just a few things to

00:02:56,970 --> 00:03:05,490
add this also helps with having small

00:03:00,690 --> 00:03:08,820
teams so there there are some benefits

00:03:05,490 --> 00:03:12,210
for the organs a organizational

00:03:08,820 --> 00:03:15,900
structure with having independent teams

00:03:12,210 --> 00:03:21,780
like feature teams where ops and deaths

00:03:15,900 --> 00:03:27,180
and product people sit together and you

00:03:21,780 --> 00:03:31,470
can deploy independently so yeah at the

00:03:27,180 --> 00:03:35,160
end you will probably end up with very

00:03:31,470 --> 00:03:39,900
nice small services that fit very well

00:03:35,160 --> 00:03:42,030
together and but yeah it's easy you can

00:03:39,900 --> 00:03:43,890
throw away those services because they

00:03:42,030 --> 00:03:48,360
are so small and you can just real

00:03:43,890 --> 00:03:54,180
implement them if if they're not fitting

00:03:48,360 --> 00:03:57,269
into your actual scale anymore so if he

00:03:54,180 --> 00:03:59,910
if you're using some you know wrong

00:03:57,269 --> 00:04:03,090
database it's not just one database

00:03:59,910 --> 00:04:07,970
where you put everything inside and it's

00:04:03,090 --> 00:04:12,690
hard to switch you have maybe just one

00:04:07,970 --> 00:04:15,450
use case and and one requirement for

00:04:12,690 --> 00:04:18,299
database because of some like write or

00:04:15,450 --> 00:04:22,260
read patterns and so so you choose a

00:04:18,299 --> 00:04:25,410
certain database for service and the

00:04:22,260 --> 00:04:27,180
service is small and if you at one point

00:04:25,410 --> 00:04:29,610
figure out that this is your bottleneck

00:04:27,180 --> 00:04:32,800
in your stack then you can just figure

00:04:29,610 --> 00:04:34,449
out what to

00:04:32,800 --> 00:04:36,550
what kind of database for instance would

00:04:34,449 --> 00:04:40,389
be a better model what kind of data

00:04:36,550 --> 00:04:42,430
model would suit you more better and I

00:04:40,389 --> 00:04:46,150
guess you will hear about the polyglot

00:04:42,430 --> 00:04:48,870
persistence after my talk and but the

00:04:46,150 --> 00:04:52,110
thing is you can just more easily

00:04:48,870 --> 00:04:57,460
interchange your services with new

00:04:52,110 --> 00:05:01,150
services and as Mitchell said yesterday

00:04:57,460 --> 00:05:10,840
there's no there's no period where you

00:05:01,150 --> 00:05:14,379
have like one consistent or like just

00:05:10,840 --> 00:05:16,770
one set up right so there's always a

00:05:14,379 --> 00:05:18,930
transient state in your in your

00:05:16,770 --> 00:05:23,530
architecture end in your infrastructure

00:05:18,930 --> 00:05:27,550
because you cannot design it like from

00:05:23,530 --> 00:05:30,159
scratch and it just all works it's just

00:05:27,550 --> 00:05:33,250
you know it works for certain time and

00:05:30,159 --> 00:05:37,419
then something is changing and you have

00:05:33,250 --> 00:05:40,449
to to to cope with that and for the

00:05:37,419 --> 00:05:43,029
developer side and the architectural

00:05:40,449 --> 00:05:47,050
side the micro services are really

00:05:43,029 --> 00:05:50,020
beneficial and so that you have the

00:05:47,050 --> 00:05:53,919
independence to choose whatever tools

00:05:50,020 --> 00:06:02,440
you like to to throw throw them away

00:05:53,919 --> 00:06:07,090
easily and to to not get stuck in a

00:06:02,440 --> 00:06:14,460
certain you know monolithic app or in a

00:06:07,090 --> 00:06:14,460
certain design failure so yeah but those

00:06:15,539 --> 00:06:23,800
those things are not for free so this is

00:06:21,849 --> 00:06:26,860
what developers tend to think about

00:06:23,800 --> 00:06:32,590
microservices right so they they are

00:06:26,860 --> 00:06:35,110
like very well organized designed in

00:06:32,590 --> 00:06:39,610
small pieces to have put together to

00:06:35,110 --> 00:06:43,690
have like an elastic or maybe like this

00:06:39,610 --> 00:06:46,480
nano structure and it it becomes very

00:06:43,690 --> 00:06:48,880
hard right so

00:06:46,480 --> 00:06:52,770
is what they think about why they want

00:06:48,880 --> 00:06:55,510
to use micro servers to build resilient

00:06:52,770 --> 00:06:59,680
architecture to have scalable

00:06:55,510 --> 00:07:02,970
distributed software right but in

00:06:59,680 --> 00:07:08,920
reality it looks like this its death

00:07:02,970 --> 00:07:12,520
stars architecture so the complexity is

00:07:08,920 --> 00:07:19,360
not gone it's just moved to the

00:07:12,520 --> 00:07:23,530
infrastructure so there's a lot of new

00:07:19,360 --> 00:07:26,410
complexity because of architectural

00:07:23,530 --> 00:07:31,390
reasons coming to the to the

00:07:26,410 --> 00:07:38,580
infrastructure so all that automation

00:07:31,390 --> 00:07:49,300
and provisioning of servers and

00:07:38,580 --> 00:07:51,220
continuous deployments are between

00:07:49,300 --> 00:07:53,920
twenty or thirty percent of your

00:07:51,220 --> 00:07:57,370
development team is suddenly writing

00:07:53,920 --> 00:08:00,790
code to create this kind of

00:07:57,370 --> 00:08:05,650
infrastructures right and you're also

00:08:00,790 --> 00:08:09,370
going to make film here you also have

00:08:05,650 --> 00:08:12,370
problems building that so it's not that

00:08:09,370 --> 00:08:16,450
you're just create that infrastructure

00:08:12,370 --> 00:08:27,070
in the beginning and it just works it is

00:08:16,450 --> 00:08:30,040
also hard to scale that so but I why

00:08:27,070 --> 00:08:33,729
that moment right now is kind of

00:08:30,040 --> 00:08:40,750
interesting is that we now have small

00:08:33,729 --> 00:08:45,160
immutable artifacts so with the

00:08:40,750 --> 00:08:47,440
containers you suddenly have like some

00:08:45,160 --> 00:08:49,210
people said when they heard about the

00:08:47,440 --> 00:08:52,810
container so now we're back to having

00:08:49,210 --> 00:08:57,280
golden images but it's not true you have

00:08:52,810 --> 00:09:00,339
like really small containers that that

00:08:57,280 --> 00:09:03,370
have an interface so that you

00:09:00,339 --> 00:09:06,370
you have a chance to to plug them

00:09:03,370 --> 00:09:10,240
together and create your your

00:09:06,370 --> 00:09:14,589
infrastructure more flexible but you're

00:09:10,240 --> 00:09:17,189
still not doing this this provisioning

00:09:14,589 --> 00:09:21,999
at runtime you create an artifact

00:09:17,189 --> 00:09:24,459
beforehand and so you have a clear

00:09:21,999 --> 00:09:32,199
separation between the build and run

00:09:24,459 --> 00:09:34,839
time so for instance if you like we've

00:09:32,199 --> 00:09:39,149
automated infrastructure on AWS before

00:09:34,839 --> 00:09:41,980
and when you do this with a

00:09:39,149 --> 00:09:45,610
configuration management that provisions

00:09:41,980 --> 00:09:49,360
your server at one time that means like

00:09:45,610 --> 00:09:52,769
the autoscaler decides to start another

00:09:49,360 --> 00:09:55,600
machine and then you install your

00:09:52,769 --> 00:09:59,680
configuration management client and then

00:09:55,600 --> 00:10:02,110
your recipes or manifest will be

00:09:59,680 --> 00:10:04,779
executed on the on the machine and then

00:10:02,110 --> 00:10:10,480
you install your packages on the on the

00:10:04,779 --> 00:10:13,629
machine and this takes time right so so

00:10:10,480 --> 00:10:16,779
maybe after 10 minutes your servers

00:10:13,629 --> 00:10:20,199
ready but with hrithik with the

00:10:16,779 --> 00:10:25,089
containers you can you can actually do

00:10:20,199 --> 00:10:30,189
this in seconds so that means you can

00:10:25,089 --> 00:10:34,449
optimize for for minimizing the meantime

00:10:30,189 --> 00:10:38,199
to recovery instead of maximizing mean

00:10:34,449 --> 00:10:41,410
time to failure because failure are

00:10:38,199 --> 00:10:48,939
going to happen right so you want to

00:10:41,410 --> 00:10:52,300
really have a fast startup time for for

00:10:48,939 --> 00:10:57,249
your services if something is going to

00:10:52,300 --> 00:11:01,420
fail and with with those concepts you

00:10:57,249 --> 00:11:04,149
find in chorus you have this this

00:11:01,420 --> 00:11:07,480
immutable infrastructure type of thing

00:11:04,149 --> 00:11:09,819
also in the in the operating system

00:11:07,480 --> 00:11:11,079
underneath itself and that's kind of

00:11:09,819 --> 00:11:13,970
interesting because they have that

00:11:11,079 --> 00:11:15,709
concept where you have like at

00:11:13,970 --> 00:11:18,949
comic step from this version to the

00:11:15,709 --> 00:11:23,800
other version so there is no transient

00:11:18,949 --> 00:11:28,670
state within the underlying operating

00:11:23,800 --> 00:11:35,029
operating system as well so all things

00:11:28,670 --> 00:11:38,089
will be good but what are we going to

00:11:35,029 --> 00:11:40,519
use in production so as I said in the

00:11:38,089 --> 00:11:43,910
beginning and there are a lot of tools

00:11:40,519 --> 00:11:47,990
out there and and there's definitely not

00:11:43,910 --> 00:11:51,560
one size fits all and i really recommend

00:11:47,990 --> 00:11:55,250
you if you're in the process of building

00:11:51,560 --> 00:11:59,870
such a infrastructure then have a deep

00:11:55,250 --> 00:12:04,639
look into all of them they do common

00:11:59,870 --> 00:12:06,470
things but some of them are may be good

00:12:04,639 --> 00:12:10,399
for your use case and some are maybe not

00:12:06,470 --> 00:12:13,009
like some are may be overkill or others

00:12:10,399 --> 00:12:17,449
are maybe just you know too small and

00:12:13,009 --> 00:12:20,480
too naive to to what you want to want to

00:12:17,449 --> 00:12:25,129
build so there's definitely the need to

00:12:20,480 --> 00:12:28,160
do evaluation of what kind of

00:12:25,129 --> 00:12:35,779
orchestration what kind of network what

00:12:28,160 --> 00:12:40,220
kind of storage suits your use case well

00:12:35,779 --> 00:12:43,730
and those those things are like most of

00:12:40,220 --> 00:12:47,329
them are quite young and their first

00:12:43,730 --> 00:12:52,639
moving targets so it's definitely hard

00:12:47,329 --> 00:12:55,550
at the moment to to build such an

00:12:52,639 --> 00:12:59,860
infrastructure and to actually not

00:12:55,550 --> 00:13:03,860
choose a technology that might be

00:12:59,860 --> 00:13:06,559
already deprecated in a couple of months

00:13:03,860 --> 00:13:09,290
maybe because somebody decided to either

00:13:06,559 --> 00:13:14,360
sell his technology to somebody who

00:13:09,290 --> 00:13:17,720
doesn't care about it anymore or found

00:13:14,360 --> 00:13:20,319
out that for instance their their

00:13:17,720 --> 00:13:25,550
prototype is not what they originally

00:13:20,319 --> 00:13:27,940
thought it would be good for so yes I

00:13:25,550 --> 00:13:31,339
really recommend you to

00:13:27,940 --> 00:13:36,230
to have a deep look into what you really

00:13:31,339 --> 00:13:39,140
need and what could be for instance

00:13:36,230 --> 00:13:47,660
something you can you can start with and

00:13:39,140 --> 00:13:54,740
an iterative so let me explain some of

00:13:47,660 --> 00:13:58,490
the concepts we've been using and to

00:13:54,740 --> 00:14:03,740
make the lie x especially the life of

00:13:58,490 --> 00:14:07,400
the developers and easier so with docker

00:14:03,740 --> 00:14:09,920
for instance you have you always have

00:14:07,400 --> 00:14:13,100
the problem that you can link containers

00:14:09,920 --> 00:14:15,620
on your local machine and you can use

00:14:13,100 --> 00:14:17,990
something like darker compose to plug

00:14:15,620 --> 00:14:21,440
together some of the containers and it's

00:14:17,990 --> 00:14:26,510
really easy for the developer to do a

00:14:21,440 --> 00:14:30,380
darker compose start up and then their

00:14:26,510 --> 00:14:34,190
environment is working but you cannot do

00:14:30,380 --> 00:14:39,920
that the same thing in your data center

00:14:34,190 --> 00:14:44,029
so and there's a there's a concept and I

00:14:39,920 --> 00:14:47,120
make an example here called the

00:14:44,029 --> 00:14:48,980
Ambassador pattern and if you have three

00:14:47,120 --> 00:14:52,270
containers once the low penser one is

00:14:48,980 --> 00:14:55,300
the application one is the database then

00:14:52,270 --> 00:14:59,750
you can have something like a DD

00:14:55,300 --> 00:15:06,620
underneath or maybe console and you can

00:14:59,750 --> 00:15:10,220
let your database for instance right to

00:15:06,620 --> 00:15:13,130
a DD like Here I am I am the database

00:15:10,220 --> 00:15:16,970
and then you have the application

00:15:13,130 --> 00:15:20,450
reading from that service regice regice

00:15:16,970 --> 00:15:23,750
tree where's my database and then you

00:15:20,450 --> 00:15:26,959
can have the load balancer that finds

00:15:23,750 --> 00:15:31,250
the the application in the same kind of

00:15:26,959 --> 00:15:34,630
way but you can also use something like

00:15:31,250 --> 00:15:39,620
a sidekick which is a container that is

00:15:34,630 --> 00:15:41,180
linked to the database I'm just a

00:15:39,620 --> 00:15:44,990
partner container

00:15:41,180 --> 00:15:50,120
that does that for you so you can use

00:15:44,990 --> 00:15:53,300
any kind of database image that doesn't

00:15:50,120 --> 00:15:55,160
have to know about your service registry

00:15:53,300 --> 00:15:56,660
so maybe your service registry in

00:15:55,160 --> 00:16:00,290
production is different from the service

00:15:56,660 --> 00:16:04,370
registry under on the developers laptop

00:16:00,290 --> 00:16:06,440
even maybe there's there is not a

00:16:04,370 --> 00:16:09,190
service registry on the laptop because

00:16:06,440 --> 00:16:13,190
the developer is just using docker links

00:16:09,190 --> 00:16:15,860
so in and then on the other side where

00:16:13,190 --> 00:16:19,130
where the application lives you have an

00:16:15,860 --> 00:16:22,910
ambassador which is actually a reverse

00:16:19,130 --> 00:16:25,520
proxy that is able to look up where the

00:16:22,910 --> 00:16:29,680
database is in the service registry and

00:16:25,520 --> 00:16:35,350
it's also linked to your application

00:16:29,680 --> 00:16:40,330
container and you will get the same

00:16:35,350 --> 00:16:45,770
environment variables and the same host

00:16:40,330 --> 00:16:47,690
in the application like this is the this

00:16:45,770 --> 00:16:51,110
is your database this is your database

00:16:47,690 --> 00:16:58,640
IP address this is your database pour it

00:16:51,110 --> 00:17:00,320
injected by the ambassador and so the

00:16:58,640 --> 00:17:02,420
application thinks the investors there

00:17:00,320 --> 00:17:06,520
is my database talking to the reverse

00:17:02,420 --> 00:17:06,520
proxy in the reverse proxies actually

00:17:07,540 --> 00:17:14,960
does know where the database is so this

00:17:12,620 --> 00:17:19,300
is definitely not useful in in all in

00:17:14,960 --> 00:17:23,500
all cases especially not if you have

00:17:19,300 --> 00:17:26,660
circular dependencies so if you have a

00:17:23,500 --> 00:17:30,260
database cluster where all nodes talk to

00:17:26,660 --> 00:17:32,000
each other maybe or need to flex more

00:17:30,260 --> 00:17:34,100
flexible solution it definitely doesn't

00:17:32,000 --> 00:17:37,700
make sense to let everybody talk through

00:17:34,100 --> 00:17:40,030
a reverse proxy to each other but in

00:17:37,700 --> 00:17:42,980
this kind of like three tier application

00:17:40,030 --> 00:17:46,010
the this makes a lot of sense because

00:17:42,980 --> 00:17:49,370
you can also move the database to

00:17:46,010 --> 00:17:51,680
another host and you don't have to

00:17:49,370 --> 00:17:54,600
restart the application it's just the

00:17:51,680 --> 00:17:57,059
reverse proxy that a

00:17:54,600 --> 00:18:02,640
finds out that the back end is now

00:17:57,059 --> 00:18:05,700
somewhere else and you can you can use a

00:18:02,640 --> 00:18:08,669
lot of different tools for this reverse

00:18:05,700 --> 00:18:11,820
proxy like if you know I'm talking HTTP

00:18:08,669 --> 00:18:17,070
to the back end I can even use varnish

00:18:11,820 --> 00:18:21,900
and do some caching if I want so just

00:18:17,070 --> 00:18:23,970
the varnish talks to the HDD registry

00:18:21,900 --> 00:18:26,160
and knows where the back ends are but

00:18:23,970 --> 00:18:30,450
your application just thinks there's one

00:18:26,160 --> 00:18:32,700
back end I have to talk to so it's you

00:18:30,450 --> 00:18:36,419
know it's called ambassador pattern but

00:18:32,700 --> 00:18:41,760
it's something we already use over years

00:18:36,419 --> 00:18:48,799
it's just that it's um now with a little

00:18:41,760 --> 00:18:53,760
bit more dynamic back ends um so and

00:18:48,799 --> 00:18:59,159
this leads to something I like to call

00:18:53,760 --> 00:19:01,740
container injection because it's kind of

00:18:59,159 --> 00:19:05,909
similar to to dependency injection you

00:19:01,740 --> 00:19:09,980
have containers that have a single

00:19:05,909 --> 00:19:14,400
responsibility to actually do something

00:19:09,980 --> 00:19:17,820
add some functionality to your actual

00:19:14,400 --> 00:19:21,600
container payload something your

00:19:17,820 --> 00:19:22,919
developers are producing so in the

00:19:21,600 --> 00:19:29,010
infrastructure you have a couple of

00:19:22,919 --> 00:19:30,570
things that are like that you have to do

00:19:29,010 --> 00:19:34,970
across all all the applications

00:19:30,570 --> 00:19:34,970
something like monitoring logging

00:19:35,299 --> 00:19:41,760
configuring the network and stuff like

00:19:37,950 --> 00:19:45,570
that so you can you can do something

00:19:41,760 --> 00:19:50,789
like this you can have a container chain

00:19:45,570 --> 00:19:53,700
or if you have that in in with rocket or

00:19:50,789 --> 00:19:56,429
kuba natives they call them pots so

00:19:53,700 --> 00:19:59,880
these are actually containers that are

00:19:56,429 --> 00:20:02,159
on one host and most likely they're

00:19:59,880 --> 00:20:05,700
somehow bound together maybe they're in

00:20:02,159 --> 00:20:07,940
the same namespace or maybe the same

00:20:05,700 --> 00:20:11,909
network name space and

00:20:07,940 --> 00:20:17,039
r if you use fleet for instance you can

00:20:11,909 --> 00:20:23,159
you can have like co schedule some some

00:20:17,039 --> 00:20:26,150
containers to do the same machine and so

00:20:23,159 --> 00:20:30,630
what you can do is you can first have a

00:20:26,150 --> 00:20:33,000
container that pulls your image or does

00:20:30,630 --> 00:20:37,039
somehow know how to find where the

00:20:33,000 --> 00:20:41,360
images are you need then you can do a

00:20:37,039 --> 00:20:48,779
configure your storage like maybe

00:20:41,360 --> 00:20:52,620
mounting some file system on on that

00:20:48,779 --> 00:20:54,350
machine for that container and then you

00:20:52,620 --> 00:20:59,399
can do the network configuration and

00:20:54,350 --> 00:21:02,570
most likely this is you will create a

00:20:59,399 --> 00:21:06,059
network namespace beforehand where you

00:21:02,570 --> 00:21:10,740
configure your interfaces for that

00:21:06,059 --> 00:21:13,039
container and and then you will start

00:21:10,740 --> 00:21:16,770
the container within the same namespace

00:21:13,039 --> 00:21:17,850
so and that there were like in the

00:21:16,770 --> 00:21:21,059
beginning of dhaka there were some

00:21:17,850 --> 00:21:25,470
problems to do that but but i think

00:21:21,059 --> 00:21:28,679
there now you can definitely say like I

00:21:25,470 --> 00:21:31,140
started one container and then I start

00:21:28,679 --> 00:21:33,419
another container that's joining the net

00:21:31,140 --> 00:21:36,809
and a network name space of the first

00:21:33,419 --> 00:21:41,070
container that's possible and I think I

00:21:36,809 --> 00:21:44,010
saw some poor requests that they are

00:21:41,070 --> 00:21:46,590
working on that you can actually say

00:21:44,010 --> 00:21:50,159
okay this is the net network namespace I

00:21:46,590 --> 00:21:53,340
want to join because yeah if you use

00:21:50,159 --> 00:21:57,510
your your own tools or just IP net and s

00:21:53,340 --> 00:22:04,279
to create a namespace you you couldn't

00:21:57,510 --> 00:22:08,429
make docker work with that so it will be

00:22:04,279 --> 00:22:11,490
coming easier to integrate darker into a

00:22:08,429 --> 00:22:16,200
search environment and and then you can

00:22:11,490 --> 00:22:19,169
register your service at the end and and

00:22:16,200 --> 00:22:20,710
those are just tied together and one

00:22:19,169 --> 00:22:27,669
single deploy

00:22:20,710 --> 00:22:30,700
unit for you so since since we are using

00:22:27,669 --> 00:22:36,909
fleet we are doing this with system d

00:22:30,700 --> 00:22:40,659
unit and within system d you can do this

00:22:36,909 --> 00:22:44,020
one requires that one and starts after

00:22:40,659 --> 00:22:46,000
that one and so you go that direction so

00:22:44,020 --> 00:22:49,659
this one requires this one this one this

00:22:46,000 --> 00:22:51,279
one like this one is requiring this one

00:22:49,659 --> 00:22:53,799
this one is regretting this one and this

00:22:51,279 --> 00:22:56,070
one is requiring this one but you can

00:22:53,799 --> 00:22:59,620
also do that the other way around but

00:22:56,070 --> 00:23:02,740
like this one is requiring this one but

00:22:59,620 --> 00:23:07,600
you don't say it should start after okay

00:23:02,740 --> 00:23:11,049
so if you require in that direction and

00:23:07,600 --> 00:23:13,450
require end after in that direction the

00:23:11,049 --> 00:23:15,159
effect is that it starts with this

00:23:13,450 --> 00:23:20,020
container then this then this then this

00:23:15,159 --> 00:23:24,130
and this and it's up and if you do stop

00:23:20,020 --> 00:23:26,470
it's going the other way it's like so

00:23:24,130 --> 00:23:32,559
you can have a really graceful start and

00:23:26,470 --> 00:23:37,090
stop of your application I really like

00:23:32,559 --> 00:23:39,279
that approach because if you have a

00:23:37,090 --> 00:23:41,620
system where you just put all your

00:23:39,279 --> 00:23:43,779
containers on and say like start them

00:23:41,620 --> 00:23:45,850
all then it's most likely that something

00:23:43,779 --> 00:23:50,100
will start that require something and

00:23:45,850 --> 00:23:53,679
then we'll throw error messages and and

00:23:50,100 --> 00:23:58,120
up until like the databases online right

00:23:53,679 --> 00:24:00,940
and if you have like run some test

00:23:58,120 --> 00:24:04,179
environments and you you just you know

00:24:00,940 --> 00:24:07,510
creating those those this infrastructure

00:24:04,179 --> 00:24:09,820
and shutting it down again like it's

00:24:07,510 --> 00:24:13,179
really nice to have a clean start up and

00:24:09,820 --> 00:24:16,000
clean shot down right so this is

00:24:13,179 --> 00:24:21,490
something I really like about fleet you

00:24:16,000 --> 00:24:24,779
can you can use this in fleet and and

00:24:21,490 --> 00:24:27,580
you cannot do this in Coober netis or

00:24:24,779 --> 00:24:29,350
marathon I talked to the middle sky

00:24:27,580 --> 00:24:31,210
yesterday and he told me that it's

00:24:29,350 --> 00:24:34,090
actually possible in Aurora which is

00:24:31,210 --> 00:24:41,080
something similar like marathon

00:24:34,090 --> 00:24:44,169
built by Twitter um but yeah I stopped

00:24:41,080 --> 00:24:46,419
when I read that or overhead forty

00:24:44,169 --> 00:24:49,270
thousand lines of code or something so

00:24:46,419 --> 00:24:52,299
it's like like you can read the code of

00:24:49,270 --> 00:24:56,529
Fleet yourself and it's just fine it's a

00:24:52,299 --> 00:25:01,919
small goal project some are Aurora is

00:24:56,529 --> 00:25:04,750
definitely another level right so um

00:25:01,919 --> 00:25:07,240
another nice thing you can do with this

00:25:04,750 --> 00:25:11,890
kind of concept is you can you can have

00:25:07,240 --> 00:25:16,870
distributed chains so you can have the

00:25:11,890 --> 00:25:19,270
database is the upper one so you do a

00:25:16,870 --> 00:25:21,640
source config network config database

00:25:19,270 --> 00:25:23,320
and then reduce to the service and then

00:25:21,640 --> 00:25:26,110
you have the Ambassador which is

00:25:23,320 --> 00:25:28,000
actually waiting because you can do

00:25:26,110 --> 00:25:31,210
insistently you can do assistant ii

00:25:28,000 --> 00:25:34,539
notify which actually tells systemd that

00:25:31,210 --> 00:25:36,789
something is up and running and the

00:25:34,539 --> 00:25:38,409
ambassador's the reverse proxy that sits

00:25:36,789 --> 00:25:41,919
there and watches your service

00:25:38,409 --> 00:25:45,669
registration up until the databases is

00:25:41,919 --> 00:25:48,640
ready and when the database is

00:25:45,669 --> 00:25:52,440
registered the open the Ambassador

00:25:48,640 --> 00:26:01,529
actually starts the container and maybe

00:25:52,440 --> 00:26:04,390
registers for your logo answer yes I

00:26:01,529 --> 00:26:07,720
already told you that we are using fleet

00:26:04,390 --> 00:26:11,010
and systemd for it just a few things you

00:26:07,720 --> 00:26:13,630
can of course use all the the systemd

00:26:11,010 --> 00:26:15,520
features so there's something like

00:26:13,630 --> 00:26:19,299
system do you notify or you can use

00:26:15,520 --> 00:26:21,159
socket activation so you will just start

00:26:19,299 --> 00:26:27,159
those containers when the packet arrives

00:26:21,159 --> 00:26:29,830
and you can use different types like the

00:26:27,159 --> 00:26:33,700
storage config might be a one-shot so

00:26:29,830 --> 00:26:36,100
it's not actually a process running all

00:26:33,700 --> 00:26:43,030
the time it's just a unit that starts

00:26:36,100 --> 00:26:48,160
and after it finished it continues with

00:26:43,030 --> 00:26:51,160
the next thing and and so you can do

00:26:48,160 --> 00:26:56,820
like start and stop in there but there

00:26:51,160 --> 00:26:56,820
isn't actually a process running and

00:26:57,450 --> 00:27:01,990
yeah and you can define something like

00:26:59,890 --> 00:27:06,400
restart on failure in your containers

00:27:01,990 --> 00:27:09,700
like if the developers produce the

00:27:06,400 --> 00:27:12,250
darker image that fails because of

00:27:09,700 --> 00:27:16,030
whatever reason you don't want to have

00:27:12,250 --> 00:27:19,930
that chain restarting all the time and

00:27:16,030 --> 00:27:23,500
you don't maybe don't want to let it

00:27:19,930 --> 00:27:27,220
fail in the in the beginning when it you

00:27:23,500 --> 00:27:30,820
know or if it just dies you want to

00:27:27,220 --> 00:27:33,130
restart and then you can do restart on

00:27:30,820 --> 00:27:36,760
failure and you can define how many

00:27:33,130 --> 00:27:39,370
times in what amount of time you want to

00:27:36,760 --> 00:27:43,030
allow that application to restart so if

00:27:39,370 --> 00:27:45,520
it fails just five times in a row you

00:27:43,030 --> 00:27:49,110
want to say okay it's done it doesn't

00:27:45,520 --> 00:27:52,150
work but if it just fails you know

00:27:49,110 --> 00:27:59,250
irregular you you might want to you know

00:27:52,150 --> 00:28:04,270
start it up and one thing which makes a

00:27:59,250 --> 00:28:07,480
talker really hard in that situation in

00:28:04,270 --> 00:28:11,230
in that use case is that actually you

00:28:07,480 --> 00:28:12,760
think the supervision is insistently

00:28:11,230 --> 00:28:15,330
because that's you're in it and you're

00:28:12,760 --> 00:28:19,720
you're actually starting systemd units

00:28:15,330 --> 00:28:22,780
to start the containers but it's not the

00:28:19,720 --> 00:28:25,930
supervision is in darker itself because

00:28:22,780 --> 00:28:28,480
all you do here is using the docker

00:28:25,930 --> 00:28:35,200
client to talk to dr. demon to start the

00:28:28,480 --> 00:28:38,440
container this is somehow not really

00:28:35,200 --> 00:28:41,440
nice in that set up and I really would

00:28:38,440 --> 00:28:45,390
like to have docker to have a small run

00:28:41,440 --> 00:28:49,110
time I can use instead to make it more

00:28:45,390 --> 00:28:52,960
make it easier to integrate because

00:28:49,110 --> 00:28:55,630
what's happening here is that systemd

00:28:52,960 --> 00:28:58,090
for instances you using the C groups for

00:28:55,630 --> 00:29:01,600
four units and you can manage those see

00:28:58,090 --> 00:29:04,390
groups from within systemd but

00:29:01,600 --> 00:29:06,549
is creating the container and so here

00:29:04,390 --> 00:29:10,870
the the sea group tree is broken and

00:29:06,549 --> 00:29:12,880
also the process tree is broken so it's

00:29:10,870 --> 00:29:15,520
actually hard to find out for systemd

00:29:12,880 --> 00:29:19,169
what's actually happening here and the

00:29:15,520 --> 00:29:22,570
other things you doing in the units is

00:29:19,169 --> 00:29:26,910
actually leveraging the darker clients

00:29:22,570 --> 00:29:30,750
to tell the demon to start a stop and

00:29:26,910 --> 00:29:34,330
this is not so nice and in terms of

00:29:30,750 --> 00:29:36,940
integration so if you have a look at

00:29:34,330 --> 00:29:40,480
rockit for instance it's one of the

00:29:36,940 --> 00:29:43,240
features of rocket that makes it like

00:29:40,480 --> 00:29:45,909
rocket is not really a competitor to

00:29:43,240 --> 00:29:50,140
darker in terms of like what you can do

00:29:45,909 --> 00:29:53,140
with darker so the workflow of how a

00:29:50,140 --> 00:29:56,080
developer uses darker on on their

00:29:53,140 --> 00:29:58,210
laptops you cannot do something like

00:29:56,080 --> 00:30:02,049
this with rocket and it's not intended

00:29:58,210 --> 00:30:05,049
to be like that but it's more more

00:30:02,049 --> 00:30:07,240
suited for production environments where

00:30:05,049 --> 00:30:09,760
you have orchestration tools and you

00:30:07,240 --> 00:30:12,720
want to have a nice integration of your

00:30:09,760 --> 00:30:17,440
container engine into that existing

00:30:12,720 --> 00:30:21,669
orchestration tools and and I I think

00:30:17,440 --> 00:30:24,280
that's where rocket shines then the the

00:30:21,669 --> 00:30:28,210
problem is like I have the same fear

00:30:24,280 --> 00:30:31,120
like do the containers run similar in

00:30:28,210 --> 00:30:36,059
rocket that the developers created on

00:30:31,120 --> 00:30:39,510
their laptop with docker I don't know

00:30:36,059 --> 00:30:45,809
you can import docker images with rocket

00:30:39,510 --> 00:30:49,750
and it should work but it should right

00:30:45,809 --> 00:30:55,480
so we have to look how they're will work

00:30:49,750 --> 00:30:58,630
out and and I still have the hope that

00:30:55,480 --> 00:31:01,500
the docker the docker also will provide

00:30:58,630 --> 00:31:03,820
something that runs demon less and

00:31:01,500 --> 00:31:06,669
because that would be really helpful in

00:31:03,820 --> 00:31:08,620
in production because the Dhaka demon is

00:31:06,669 --> 00:31:11,020
not something you want to run in

00:31:08,620 --> 00:31:14,530
production right now at least right now

00:31:11,020 --> 00:31:15,450
so there are some projects that actually

00:31:14,530 --> 00:31:19,570
do

00:31:15,450 --> 00:31:22,480
using doc resin in it so there's Rancho

00:31:19,570 --> 00:31:26,230
as where you have a operating system

00:31:22,480 --> 00:31:28,780
that uses darker as needed and which is

00:31:26,230 --> 00:31:30,670
kind of interesting but from my

00:31:28,780 --> 00:31:32,890
perspective and our experience right now

00:31:30,670 --> 00:31:35,680
it's really not something i want to have

00:31:32,890 --> 00:31:41,530
right now because the darker demon is

00:31:35,680 --> 00:31:44,410
not not a very not very good as an in it

00:31:41,530 --> 00:31:46,510
right now and sometimes you end up in

00:31:44,410 --> 00:31:48,160
having a doc a demon that sucks up all

00:31:46,510 --> 00:31:50,950
your memory because there are some

00:31:48,160 --> 00:31:55,390
memory leaks in it and and then you have

00:31:50,950 --> 00:31:58,480
like just the locks collected in in in

00:31:55,390 --> 00:31:59,980
the darker demon and then the the gold

00:31:58,480 --> 00:32:02,710
garbage collector doesn't free the

00:31:59,980 --> 00:32:05,770
memory and and then you have like four

00:32:02,710 --> 00:32:07,330
gigs of ram sucked up by the daka demon

00:32:05,770 --> 00:32:13,150
and this is really not an init process

00:32:07,330 --> 00:32:15,150
for me so yeah these these are some

00:32:13,150 --> 00:32:20,290
problems right now but I hope they're

00:32:15,150 --> 00:32:24,520
there they will work on it and yes and

00:32:20,290 --> 00:32:36,890
to show you a little bit how that

00:32:24,520 --> 00:32:45,690
actually works this one alright have to

00:32:36,890 --> 00:32:48,929
yes this one ok so to make that set up a

00:32:45,690 --> 00:32:52,020
little bit more interesting I I have

00:32:48,929 --> 00:32:55,440
that small linux machine and I really

00:32:52,020 --> 00:32:58,380
don't want to run vagrant images on my

00:32:55,440 --> 00:33:01,470
machine like when I work with Korres and

00:32:58,380 --> 00:33:03,710
I have to start up a cluster with three

00:33:01,470 --> 00:33:08,159
virtual machines on that machine here

00:33:03,710 --> 00:33:12,390
it's always a pain in the ass so last

00:33:08,159 --> 00:33:14,909
year I I put together a small wrapper

00:33:12,390 --> 00:33:17,850
around system DN spawn which is a system

00:33:14,909 --> 00:33:21,390
vs container engine to actually start up

00:33:17,850 --> 00:33:25,490
containers three system DS and spawn

00:33:21,390 --> 00:33:31,190
containers that contain all the the

00:33:25,490 --> 00:33:31,190
tools I need for for chorus so yes oh

00:33:32,179 --> 00:33:41,539
yes I am I tried before and with the

00:33:36,720 --> 00:33:41,539
dark yeah I have added the light

00:33:47,710 --> 00:33:55,760
is that better I can make it a little

00:33:50,540 --> 00:33:59,830
bit bigger that's right I tried my dark

00:33:55,760 --> 00:33:59,830
theme but the dark theme was even worse

00:34:01,210 --> 00:34:11,900
yes fine so where was I so within the

00:34:08,900 --> 00:34:14,420
end spawn containers i have fleet

00:34:11,900 --> 00:34:17,960
running at CD running of course systemd

00:34:14,420 --> 00:34:21,050
I need system default fleet and I also

00:34:17,960 --> 00:34:23,330
run docker so I I have 3n spawn

00:34:21,050 --> 00:34:25,520
containers that actually have darker

00:34:23,330 --> 00:34:29,540
inside and then you start containers in

00:34:25,520 --> 00:34:31,250
those containers it's just easier for me

00:34:29,540 --> 00:34:37,300
because I don't have virtual machines

00:34:31,250 --> 00:34:46,040
that suck up all my memory and I can

00:34:37,300 --> 00:34:51,230
show you how that works so this is just

00:34:46,040 --> 00:34:53,150
some things like I have I have built

00:34:51,230 --> 00:34:57,910
something similar like a docker file for

00:34:53,150 --> 00:34:57,910
that n spawn containers and it fetched

00:34:58,750 --> 00:35:04,220
discovery URL from from the sed

00:35:02,120 --> 00:35:06,560
discovery and then now the containers

00:35:04,220 --> 00:35:11,450
are already running so it's it's way

00:35:06,560 --> 00:35:16,730
faster than then using vagrant and so

00:35:11,450 --> 00:35:20,600
one thing that also comes with a system

00:35:16,730 --> 00:35:25,430
d is machine CTL so you can see those

00:35:20,600 --> 00:35:30,550
three containers running here and um

00:35:25,430 --> 00:35:32,360
just to give you a little bit

00:35:30,550 --> 00:35:36,010
information about what I did with

00:35:32,360 --> 00:35:38,720
networking so these three containers

00:35:36,010 --> 00:35:41,690
have their own virtual ethernet

00:35:38,720 --> 00:35:43,700
interfaces and so these are pairs and

00:35:41,690 --> 00:35:45,680
one is inside of the network name space

00:35:43,700 --> 00:35:48,350
and one is outside and the one outside

00:35:45,680 --> 00:35:50,090
is bound to bridge so the setup is kind

00:35:48,350 --> 00:35:52,820
of kind of similar to what the default

00:35:50,090 --> 00:35:55,310
networking setup is in in docker and

00:35:52,820 --> 00:36:01,990
I've used a system d network d for it

00:35:55,310 --> 00:36:01,990
and so that's that's kind of nice you

00:36:03,910 --> 00:36:14,569
lost my mouse okay um so yeah you can

00:36:08,150 --> 00:36:16,390
you can of course you show and spawn am

00:36:14,569 --> 00:36:20,299
I in the wet and now I'm not in the way

00:36:16,390 --> 00:36:24,380
so you see that those three are bound to

00:36:20,299 --> 00:36:30,979
the bridge and then I just briefly show

00:36:24,380 --> 00:36:35,979
you the network configuration so with

00:36:30,979 --> 00:36:39,109
Network d you have that net def unit and

00:36:35,979 --> 00:36:43,549
this says okay this is the name of the

00:36:39,109 --> 00:36:48,549
bridges and spawn zero and it's a bridge

00:36:43,549 --> 00:36:52,549
and then you can do define the network

00:36:48,549 --> 00:36:59,650
and you say okay this is my my address

00:36:52,549 --> 00:37:06,380
it's 13 1 I am this HTTP server I will

00:36:59,650 --> 00:37:13,219
promote this DNS and I and I will add a

00:37:06,380 --> 00:37:15,979
default route so when I then start up

00:37:13,219 --> 00:37:19,670
the containers within the containers

00:37:15,979 --> 00:37:22,430
there's also network d running and it's

00:37:19,670 --> 00:37:25,339
kind of similar inside the container as

00:37:22,430 --> 00:37:28,729
well so I have half a net def in there

00:37:25,339 --> 00:37:35,749
creating an interface that has a network

00:37:28,729 --> 00:37:39,859
that runs as a dhcp client to that HP

00:37:35,749 --> 00:37:47,779
server so this was kind of easy to set

00:37:39,859 --> 00:37:49,819
up with just Linux system d internals so

00:37:47,779 --> 00:37:53,239
you can do a lot of things with

00:37:49,819 --> 00:37:57,680
containers in Linux in modern linux and

00:37:53,239 --> 00:38:01,069
my chorus is one that is a modern linux

00:37:57,680 --> 00:38:04,029
for your data center and it's kind of

00:38:01,069 --> 00:38:06,229
interesting those features are actually

00:38:04,029 --> 00:38:08,690
really interesting because the system d

00:38:06,229 --> 00:38:10,430
team is watching what what what's

00:38:08,690 --> 00:38:14,029
happening out there was with containers

00:38:10,430 --> 00:38:14,779
and they're implementing their vision of

00:38:14,029 --> 00:38:17,059
how

00:38:14,779 --> 00:38:24,890
you run containers on your linux system

00:38:17,059 --> 00:38:27,199
and like it's really interesting to use

00:38:24,890 --> 00:38:31,099
that with just the things that come with

00:38:27,199 --> 00:38:34,839
your OS already so if you don't have a

00:38:31,099 --> 00:38:38,479
big use case to run a big mezzos cluster

00:38:34,839 --> 00:38:42,259
have a look at those things because it

00:38:38,479 --> 00:38:46,849
makes it easy to get used to using

00:38:42,259 --> 00:38:49,640
containers and how to actually have the

00:38:46,849 --> 00:38:53,269
same things darker provides just in your

00:38:49,640 --> 00:38:57,319
barrel in us so with machine CTL you can

00:38:53,269 --> 00:39:01,400
in the latest version 2 19 I think you

00:38:57,319 --> 00:39:06,279
can fetch you can also fetch images from

00:39:01,400 --> 00:39:11,150
the docker hub and you can they use

00:39:06,279 --> 00:39:14,900
butter if s underneath to have that fast

00:39:11,150 --> 00:39:20,089
snapshots so you can create a container

00:39:14,900 --> 00:39:22,989
from better fess subvolume and you can

00:39:20,089 --> 00:39:26,989
manage those things with machine CDL and

00:39:22,989 --> 00:39:31,099
so I I don't have the latest version

00:39:26,989 --> 00:39:36,499
because my demo setup was broken latest

00:39:31,099 --> 00:39:39,859
version so I went back to 218 but you

00:39:36,499 --> 00:39:42,079
can see you can do commands here like

00:39:39,859 --> 00:39:43,579
list status then you can lock into your

00:39:42,079 --> 00:39:46,849
containers you can reboot your

00:39:43,579 --> 00:39:49,099
containers is it it looks similar to

00:39:46,849 --> 00:39:51,019
what you can do with darker so I'm just

00:39:49,099 --> 00:39:54,669
saying it's kind of interesting have a

00:39:51,019 --> 00:39:59,689
look at it and that's how i created my

00:39:54,669 --> 00:40:05,059
my local development environment and oh

00:39:59,689 --> 00:40:11,269
yeah one nice thing as well is that you

00:40:05,059 --> 00:40:13,579
can that you can use your local system d

00:40:11,269 --> 00:40:16,009
tools to actually look into the

00:40:13,579 --> 00:40:18,769
containers so you can manage the

00:40:16,009 --> 00:40:22,719
services running in in in that

00:40:18,769 --> 00:40:25,489
containers with systemd on the host

00:40:22,719 --> 00:40:28,700
normally you normally if you think about

00:40:25,489 --> 00:40:31,060
containers you have just one process

00:40:28,700 --> 00:40:34,220
running and container it's just

00:40:31,060 --> 00:40:38,089
isolation for one single process but

00:40:34,220 --> 00:40:40,940
with that I booted systemd in a

00:40:38,089 --> 00:40:45,410
container which is maybe not something

00:40:40,940 --> 00:40:47,329
you want to do but you can and I have a

00:40:45,410 --> 00:40:49,400
use case for it because I want to run

00:40:47,329 --> 00:40:52,820
system v in a container and I want to

00:40:49,400 --> 00:40:55,579
run fleet in that container so what you

00:40:52,820 --> 00:40:58,339
can do is you can actually look inside

00:40:55,579 --> 00:41:01,010
the container the system DN spawn

00:40:58,339 --> 00:41:03,109
container and you can see which services

00:41:01,010 --> 00:41:07,430
are running inside of the container and

00:41:03,109 --> 00:41:09,859
you can do yeah you can stop start stop

00:41:07,430 --> 00:41:11,780
them so I have the darker service

00:41:09,859 --> 00:41:16,099
running in there so you can see the

00:41:11,780 --> 00:41:25,599
status of the darker service and you can

00:41:16,099 --> 00:41:29,660
can also check the drawer and see what

00:41:25,599 --> 00:41:33,290
what SED locked in that container so

00:41:29,660 --> 00:41:40,210
it's always the dash m for a machine and

00:41:33,290 --> 00:41:44,770
then the name of the container so that's

00:41:40,210 --> 00:41:50,270
the end point set up so let's move on to

00:41:44,770 --> 00:41:54,490
like I this comet is just an alias

00:41:50,270 --> 00:41:58,099
because i'm too lazy to type so it's

00:41:54,490 --> 00:42:02,210
actually called it floating commando so

00:41:58,099 --> 00:42:04,609
this is a fleet CTL that tunnels to the

00:42:02,210 --> 00:42:07,460
first container i create the first n

00:42:04,609 --> 00:42:12,619
spawn container i created and so now i

00:42:07,460 --> 00:42:17,869
can i can do a list machines and check

00:42:12,619 --> 00:42:23,150
if all the all the containers found

00:42:17,869 --> 00:42:25,250
themselves in SD and and you can scatter

00:42:23,150 --> 00:42:28,460
your things on those containers with

00:42:25,250 --> 00:42:35,359
fleet so I have yeah I have them in

00:42:28,460 --> 00:42:40,190
fleet so now you can look list units

00:42:35,359 --> 00:42:42,500
there are none and list unit files of

00:42:40,190 --> 00:42:50,510
course there are also

00:42:42,500 --> 00:43:02,630
no so I have a small set up so let's go

00:42:50,510 --> 00:43:06,440
there um so I need some I need some unit

00:43:02,630 --> 00:43:10,970
utils like some tools on the on all the

00:43:06,440 --> 00:43:18,010
machines all right I will do watch here

00:43:10,970 --> 00:43:18,010
so then you can see this so

00:43:28,590 --> 00:43:34,680
so this this is just installing some

00:43:30,930 --> 00:43:39,420
things on other chorus machines that I

00:43:34,680 --> 00:43:42,630
need for for the ambassador and some for

00:43:39,420 --> 00:43:45,930
the network configuration stuff so we

00:43:42,630 --> 00:43:49,910
need some scripts on all the machines so

00:43:45,930 --> 00:43:49,910
and and they have been installed now and

00:43:50,180 --> 00:44:04,770
so what I prepared here is I have two

00:43:59,960 --> 00:44:08,430
services service was this one so was one

00:44:04,770 --> 00:44:11,540
and service to and similar to what I i

00:44:08,430 --> 00:44:15,110
showed you in in the slides so there's

00:44:11,540 --> 00:44:17,760
you know one unit that pulls the image

00:44:15,110 --> 00:44:19,920
this is the actual container and this

00:44:17,760 --> 00:44:25,730
one is register the registers the

00:44:19,920 --> 00:44:28,530
container then I have a second service

00:44:25,730 --> 00:44:32,700
with an ambassador there waits for the

00:44:28,530 --> 00:44:38,160
first service and in parallel there will

00:44:32,700 --> 00:44:44,400
be a pole and then the second service

00:44:38,160 --> 00:44:48,390
start that's all so but to to get an

00:44:44,400 --> 00:44:56,240
understanding what's inside those units

00:44:48,390 --> 00:45:06,050
I will just go through them a little so

00:44:56,240 --> 00:45:15,560
who have used using system d oh man so

00:45:06,050 --> 00:45:19,920
who's afraid of system de it's fine okay

00:45:15,560 --> 00:45:23,790
so yeah i'm using archly notes for a

00:45:19,920 --> 00:45:26,040
while and when I found out that Korres

00:45:23,790 --> 00:45:28,820
is doing that for my production system i

00:45:26,040 --> 00:45:35,610
was actually kind of you know that was

00:45:28,820 --> 00:45:37,850
kind of a selling point for me so the

00:45:35,610 --> 00:45:40,770
system the unit is just you know a

00:45:37,850 --> 00:45:43,160
declaration of your services you want to

00:45:40,770 --> 00:45:43,160
run and

00:45:44,810 --> 00:45:52,350
what I told you before is that you can

00:45:48,570 --> 00:45:56,490
use requires and something like after or

00:45:52,350 --> 00:45:59,910
once which is a little more a little bit

00:45:56,490 --> 00:46:04,320
less strict than requires because if you

00:45:59,910 --> 00:46:08,720
do a require and this one fails then

00:46:04,320 --> 00:46:13,380
this one will also fail if you use once

00:46:08,720 --> 00:46:16,710
then it waits until you tools started

00:46:13,380 --> 00:46:21,480
but it doesn't fail if you tilts fails

00:46:16,710 --> 00:46:24,510
so if you want to deploy in a new utils

00:46:21,480 --> 00:46:26,990
version you can stop you toes and you

00:46:24,510 --> 00:46:31,500
can install a new version of you tools

00:46:26,990 --> 00:46:34,320
without all the other depending services

00:46:31,500 --> 00:46:39,510
stopping this is the difference between

00:46:34,320 --> 00:46:41,700
once and requires and so this is a type

00:46:39,510 --> 00:46:45,180
one shot that means they will actually

00:46:41,700 --> 00:46:49,770
it this this process here will finish

00:46:45,180 --> 00:46:53,010
and because I said remain after exit yes

00:46:49,770 --> 00:46:57,570
it it will still say okay I'm I'm I'm

00:46:53,010 --> 00:47:03,840
active I'm I did my job and I stay there

00:46:57,570 --> 00:47:06,030
active and yeah this is this is an image

00:47:03,840 --> 00:47:10,590
like a busy box image fetching from my

00:47:06,030 --> 00:47:14,700
local registry and here i have some

00:47:10,590 --> 00:47:20,610
special options that are for fleet that

00:47:14,700 --> 00:47:24,270
say okay this service one conflicts with

00:47:20,610 --> 00:47:32,370
service to so the those services are not

00:47:24,270 --> 00:47:36,390
deployed on the same machine the next

00:47:32,370 --> 00:47:39,960
service is the service itself and I so

00:47:36,390 --> 00:47:42,720
it's what I told you before is you have

00:47:39,960 --> 00:47:46,250
a start and start limit interval so if

00:47:42,720 --> 00:47:48,900
it fades five times in 30 seconds the

00:47:46,250 --> 00:47:55,890
systemd will never start this service

00:47:48,900 --> 00:47:59,579
again on its own and there we

00:47:55,890 --> 00:48:01,109
just you know be careful and remove an

00:47:59,579 --> 00:48:03,809
existing container because you cannot

00:48:01,109 --> 00:48:10,079
create two contains was the same name

00:48:03,809 --> 00:48:12,150
and then it runs this busy box actually

00:48:10,079 --> 00:48:14,670
I'm not running busy box I'm pulling the

00:48:12,150 --> 00:48:17,119
wrong 1i yesterday I switched to alpine

00:48:14,670 --> 00:48:20,970
which is also a very small container

00:48:17,119 --> 00:48:24,059
because the net cat version I wanted to

00:48:20,970 --> 00:48:28,950
use was different in the busy box and so

00:48:24,059 --> 00:48:35,660
I'm starting a net cat server here on

00:48:28,950 --> 00:48:40,819
port 8080 that things Google and the

00:48:35,660 --> 00:48:40,819
other service the second one is

00:48:41,569 --> 00:48:51,059
connecting to that service on 80 80 but

00:48:47,309 --> 00:48:52,890
I'm linking the Ambassador to that

00:48:51,059 --> 00:48:57,470
service so it goes through that

00:48:52,890 --> 00:48:57,470
ambassador like what I explained before

00:48:58,279 --> 00:49:07,380
yeah and let's do it maybe just do it in

00:49:03,509 --> 00:49:10,980
a little bit smaller steps because last

00:49:07,380 --> 00:49:14,339
time I just did fleet fleet CTL start

00:49:10,980 --> 00:49:17,460
utils and but that does a couple of

00:49:14,339 --> 00:49:25,769
things so what it does the first thing

00:49:17,460 --> 00:49:31,190
is it submits the unit files to the to

00:49:25,769 --> 00:49:34,170
the cluster so they won't show up here

00:49:31,190 --> 00:49:36,930
because they are not loaded onto

00:49:34,170 --> 00:49:42,420
machines so list units will not show

00:49:36,930 --> 00:49:45,859
those units but you can do a list unit

00:49:42,420 --> 00:49:50,039
files and there you can see those

00:49:45,859 --> 00:49:52,890
services so they are inactive you have

00:49:50,039 --> 00:49:55,140
here a desired state and an actual state

00:49:52,890 --> 00:49:59,039
so you can see straight state

00:49:55,140 --> 00:50:02,519
transitions in here and you can see the

00:49:59,039 --> 00:50:05,490
target like the machine those units

00:50:02,519 --> 00:50:09,300
should be deployed on and with utils

00:50:05,490 --> 00:50:12,870
it's it's a global unit so

00:50:09,300 --> 00:50:15,000
target doesn't it there is no target

00:50:12,870 --> 00:50:20,610
because it's a global unit so you can

00:50:15,000 --> 00:50:22,740
have that X fleet options in the system

00:50:20,610 --> 00:50:29,210
the unit telling fleet this is a unit

00:50:22,740 --> 00:50:39,030
that should run on every machine so

00:50:29,210 --> 00:50:43,770
let's load those units so now let's go

00:50:39,030 --> 00:50:46,980
up a little those units are loaded onto

00:50:43,770 --> 00:50:51,330
machines they are not started yet they

00:50:46,980 --> 00:50:57,290
just load it and you can see the service

00:50:51,330 --> 00:50:57,290
one is on four and service to is on 2

00:51:04,280 --> 00:51:15,240
and then let's just start them all let

00:51:10,800 --> 00:51:19,650
me explain for before so again we we

00:51:15,240 --> 00:51:23,280
will see this one starting first but

00:51:19,650 --> 00:51:25,310
also this one starting first because

00:51:23,280 --> 00:51:30,240
they're in their chains the first units

00:51:25,310 --> 00:51:36,420
but when the ambassador image is fetched

00:51:30,240 --> 00:51:40,800
it will stay in starting up until this

00:51:36,420 --> 00:51:45,330
service is registered so when when this

00:51:40,800 --> 00:51:55,200
is done like active running then you

00:51:45,330 --> 00:51:58,800
will see that this will continue so

00:51:55,200 --> 00:52:01,560
start it takes a little bit of time this

00:51:58,800 --> 00:52:05,670
one is already starting this one is

00:52:01,560 --> 00:52:08,880
starting and this is starting in

00:52:05,670 --> 00:52:13,950
parallel yes because I don't want to

00:52:08,880 --> 00:52:15,210
waste time to wait for the pool so this

00:52:13,950 --> 00:52:18,890
is all right the service is already

00:52:15,210 --> 00:52:22,619
running so now that it's registering and

00:52:18,890 --> 00:52:25,470
start post running

00:52:22,619 --> 00:52:34,470
and then this one should go into running

00:52:25,470 --> 00:52:39,319
as well oh it's failed oh man I did that

00:52:34,470 --> 00:52:39,319
the whole night oh it's starting again I

00:52:41,180 --> 00:52:48,930
had some problems with the net cat and

00:52:44,220 --> 00:53:04,890
net head through the reverse proxy I was

00:52:48,930 --> 00:53:08,220
using hey it's running so let's see with

00:53:04,890 --> 00:53:10,799
with the fleet CTL you can also pull the

00:53:08,220 --> 00:53:12,630
journal from the U services so you don't

00:53:10,799 --> 00:53:15,710
have to look up where the services are

00:53:12,630 --> 00:53:19,890
and then connect to the machine so um

00:53:15,710 --> 00:53:25,349
now that I think that there shouldn't be

00:53:19,890 --> 00:53:31,140
much in in in the server just make it a

00:53:25,349 --> 00:53:34,499
little bit bigger so actually there are

00:53:31,140 --> 00:53:36,390
a couple of things this is you know doc

00:53:34,499 --> 00:53:38,369
are telling us that we wanted to remove

00:53:36,390 --> 00:53:43,789
a container that didn't exist I just

00:53:38,369 --> 00:53:47,489
said I did this this just for ya

00:53:43,789 --> 00:53:54,779
security that the there is no doctor

00:53:47,489 --> 00:53:57,900
naming conflict so so this its failed at

00:53:54,779 --> 00:54:01,680
one point yes and then it started up

00:53:57,900 --> 00:54:05,450
again and yeah there's nothing but if

00:54:01,680 --> 00:54:09,720
you because the net cat is not you know

00:54:05,450 --> 00:54:13,109
telling us anything but is doing a ping

00:54:09,720 --> 00:54:15,420
to Google and we connected to that in

00:54:13,109 --> 00:54:23,089
the in the second service so we actually

00:54:15,420 --> 00:54:23,089
actually see that here yes so it worked

00:54:26,040 --> 00:54:54,400
questions about this give me more time

00:54:47,770 --> 00:54:58,300
and I'll write it down yes so I mean

00:54:54,400 --> 00:55:02,830
this is following the container space

00:54:58,300 --> 00:55:05,110
since two years now and yeah it's

00:55:02,830 --> 00:55:12,900
probably spread around a lot so you will

00:55:05,110 --> 00:55:12,900
find about this on several places yeah

00:55:13,260 --> 00:55:18,630
yeah um yeah

00:55:38,650 --> 00:55:47,710
so so the question was how this this

00:55:45,470 --> 00:55:53,330
concepts relates to the desktop problem

00:55:47,710 --> 00:55:56,180
the thing is the those concepts are not

00:55:53,330 --> 00:55:59,930
the solution to the desktop problem but

00:55:56,180 --> 00:56:06,680
I think that with the immutable

00:55:59,930 --> 00:56:10,760
infrastructure and containers you have a

00:56:06,680 --> 00:56:13,370
clear separation between the extra

00:56:10,760 --> 00:56:15,620
payload you want to run and the things

00:56:13,370 --> 00:56:19,190
you want to do for all those services

00:56:15,620 --> 00:56:21,560
like matrix collecting matrix do we do

00:56:19,190 --> 00:56:25,160
your logging stuff and all those kind of

00:56:21,560 --> 00:56:27,470
things and yeah there are nice ways to

00:56:25,160 --> 00:56:30,710
pluck them together and maybe even use

00:56:27,470 --> 00:56:33,440
like different things and but the same

00:56:30,710 --> 00:56:34,840
kind of images like the developers have

00:56:33,440 --> 00:56:39,170
the same kind of images and you can

00:56:34,840 --> 00:56:41,180
inter you can release a new version of

00:56:39,170 --> 00:56:44,810
your logging and then and then the

00:56:41,180 --> 00:56:48,460
develops and do not have to care so I

00:56:44,810 --> 00:56:51,560
think that that's the main point but

00:56:48,460 --> 00:56:54,320
with those technologies you will

00:56:51,560 --> 00:56:57,760
definitely have problems in that kind of

00:56:54,320 --> 00:57:01,550
Death Star environment right now because

00:56:57,760 --> 00:57:03,230
most of them won't scale anyway so if

00:57:01,550 --> 00:57:07,250
you take for instance Quinn it as they

00:57:03,230 --> 00:57:12,170
say with 1.0 we probably support 100

00:57:07,250 --> 00:57:14,870
nodes which is not much and you don't

00:57:12,170 --> 00:57:17,600
know when they announced the 120 and I'm

00:57:14,870 --> 00:57:22,420
not sure about how many notes they will

00:57:17,600 --> 00:57:26,720
support right now so same thing goes for

00:57:22,420 --> 00:57:29,860
tools like fleet or SD so there are a

00:57:26,720 --> 00:57:32,600
couple of things we figured out that

00:57:29,860 --> 00:57:34,760
yeah of course they are not like

00:57:32,600 --> 00:57:39,560
advertised on under on their website

00:57:34,760 --> 00:57:43,990
right so just as a recommendation if you

00:57:39,560 --> 00:57:45,650
use a TD I highly recommend you to do

00:57:43,990 --> 00:57:47,990
pawling instead

00:57:45,650 --> 00:57:51,529
watching right now because they have a

00:57:47,990 --> 00:57:54,170
small buffer and if you do what

00:57:51,529 --> 00:57:55,760
consistent watches on the leader if you

00:57:54,170 --> 00:57:58,640
do consistent watches they will go to

00:57:55,760 --> 00:58:01,490
the leader and if they're a lot of

00:57:58,640 --> 00:58:04,640
Rights coming in the buffer is too small

00:58:01,490 --> 00:58:09,289
and you will actually not you will miss

00:58:04,640 --> 00:58:11,599
some of the changes and actually from a

00:58:09,289 --> 00:58:15,349
consistent key value store you expect to

00:58:11,599 --> 00:58:18,589
get all the information right so this

00:58:15,349 --> 00:58:21,589
will definitely hurt you so use Pauling

00:58:18,589 --> 00:58:28,900
instead of watching or at least do not

00:58:21,589 --> 00:58:32,420
use too many watches or do not right and

00:58:28,900 --> 00:58:34,099
same goes for fleet so fleet is not

00:58:32,420 --> 00:58:38,990
really not optimized at the moment and

00:58:34,099 --> 00:58:42,559
it's doing kind of wasting a lot of CPU

00:58:38,990 --> 00:58:44,150
if you add the machines so you have an

00:58:42,559 --> 00:58:46,670
agent running on each of the machines

00:58:44,150 --> 00:58:51,250
and it's looping through all the units

00:58:46,670 --> 00:58:54,170
in at CD every every five seconds and

00:58:51,250 --> 00:58:56,839
because of bad implementations they are

00:58:54,170 --> 00:58:59,779
doing this twice in every loop parsing

00:58:56,839 --> 00:59:04,339
all the JSON of the etsy d structures

00:58:59,779 --> 00:59:07,970
and these are not things that are hard

00:59:04,339 --> 00:59:11,270
to fix and we are currently fixing a

00:59:07,970 --> 00:59:16,640
couple of those because in our

00:59:11,270 --> 00:59:19,369
infrastructure at 1500 there was just no

00:59:16,640 --> 00:59:24,289
way to go further because the system

00:59:19,369 --> 00:59:26,690
started to implode and so yeah and I

00:59:24,289 --> 00:59:33,039
want to have a couple of zeros behind

00:59:26,690 --> 00:59:33,039
that 1500 containers so yeah

00:59:39,220 --> 00:59:50,950
yes and I feel the pain yes I think for

00:59:47,290 --> 00:59:54,910
us it will be we're going to move our

00:59:50,950 --> 00:59:57,790
own containers those in the in that

00:59:54,910 --> 01:00:03,400
chain that we are providing and also all

00:59:57,790 --> 01:00:07,450
our services into rocket and and I think

01:00:03,400 --> 01:00:10,990
the latest releases of rocket are now

01:00:07,450 --> 01:00:13,770
supporting the things we need in a

01:00:10,990 --> 01:00:18,490
couple of things with volumes and and

01:00:13,770 --> 01:00:21,700
but it looks really nice and it better

01:00:18,490 --> 01:00:24,609
suits us so we will definitely put our

01:00:21,700 --> 01:00:27,460
own stuff into a rocket first and then

01:00:24,609 --> 01:00:30,700
we will have a look if it's really a

01:00:27,460 --> 01:00:34,630
problem in terms of deaf prosperity if

01:00:30,700 --> 01:00:37,420
we run containers from developers in

01:00:34,630 --> 01:00:44,920
rocket instead of docker so we have to

01:00:37,420 --> 01:00:48,000
you know see if that works out or not do

01:00:44,920 --> 01:00:48,000
we have any further questions

01:00:55,470 --> 01:01:00,700
we're currently building a bare metal

01:00:58,450 --> 01:01:03,400
set up so the storage will be more

01:01:00,700 --> 01:01:05,049
interesting there because we in the

01:01:03,400 --> 01:01:08,470
first place we developed the whole stack

01:01:05,049 --> 01:01:13,329
on on AWS and we just used EBS volumes

01:01:08,470 --> 01:01:15,700
which were mounted like attached to the

01:01:13,329 --> 01:01:18,430
host mounted and then bind mounted to

01:01:15,700 --> 01:01:21,720
the container it kind of worked but it's

01:01:18,430 --> 01:01:27,249
not really nice so there's a reason why

01:01:21,720 --> 01:01:31,349
amazon announced their EFS i think it's

01:01:27,249 --> 01:01:34,989
called then the NFS thing for the cloud

01:01:31,349 --> 01:01:38,259
and yeah we're looking in the suit in

01:01:34,989 --> 01:01:41,160
into solution right now coming from

01:01:38,259 --> 01:01:44,650
Berlin here its proprietary file system

01:01:41,160 --> 01:01:47,880
called quo bite but it looks really

01:01:44,650 --> 01:01:51,489
promising and interesting and we're not

01:01:47,880 --> 01:01:54,220
probably not using SEF something and

01:01:51,489 --> 01:01:56,289
we're not using you know expensive

01:01:54,220 --> 01:02:00,670
hardware and we're not buying something

01:01:56,289 --> 01:02:04,529
from Hardware winner ok thank you very

01:02:00,670 --> 01:02:04,529

YouTube URL: https://www.youtube.com/watch?v=JBK_UqmGi38


