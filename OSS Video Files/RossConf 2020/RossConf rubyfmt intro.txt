Title: RossConf rubyfmt intro
Publication date: 2020-10-23
Playlist: RossConf remote 2020
Description: 
	The Ruby Autoformatter that almost works. A bit like Rubocop, maybe, except that it's definitely not Rubocop.
Captions: 
	00:00:04,080 --> 00:00:07,839
hey everyone

00:00:05,600 --> 00:00:09,519
i'm so happy to be able to introduce you

00:00:07,839 --> 00:00:11,599
all to ruby format today

00:00:09,519 --> 00:00:13,120
for rosconf and i really do hope you

00:00:11,599 --> 00:00:15,759
will contribute to

00:00:13,120 --> 00:00:16,960
the project um i have sent a

00:00:15,759 --> 00:00:19,520
pre-recorded video

00:00:16,960 --> 00:00:20,640
uh because this started a little early

00:00:19,520 --> 00:00:23,519
for my time zone

00:00:20,640 --> 00:00:24,160
in new york so i do hope uh that you

00:00:23,519 --> 00:00:26,240
don't mind

00:00:24,160 --> 00:00:27,519
and i will be online for the in-person

00:00:26,240 --> 00:00:29,679
ama uh

00:00:27,519 --> 00:00:31,119
shortly after these introductory

00:00:29,679 --> 00:00:33,040
sessions

00:00:31,119 --> 00:00:35,440
so to introduce myself my name is

00:00:33,040 --> 00:00:37,120
penelope pfepen i go by penelope zone

00:00:35,440 --> 00:00:39,360
almost everywhere on the internet

00:00:37,120 --> 00:00:41,680
i use she her pronouns and i identify as

00:00:39,360 --> 00:00:44,399
a trans woman

00:00:41,680 --> 00:00:46,879
so what is ruby format like why am i

00:00:44,399 --> 00:00:48,480
here today what is this project and like

00:00:46,879 --> 00:00:50,399
the simplest possible answer to this is

00:00:48,480 --> 00:00:51,760
that ruby format is a ruby auto

00:00:50,399 --> 00:00:53,199
formatter

00:00:51,760 --> 00:00:55,680
it's a program that's designed to

00:00:53,199 --> 00:00:57,600
consume files of ruby source code

00:00:55,680 --> 00:00:59,039
apply various transformations to them

00:00:57,600 --> 00:01:01,760
and then spit out

00:00:59,039 --> 00:01:03,680
functionally identical ruby files just

00:01:01,760 --> 00:01:04,320
with cleaned up formatting the idea

00:01:03,680 --> 00:01:06,240
being that

00:01:04,320 --> 00:01:08,400
ruby ends up with a single consistent

00:01:06,240 --> 00:01:10,479
style and this is best explained by

00:01:08,400 --> 00:01:11,520
looking at ruby format working inside a

00:01:10,479 --> 00:01:12,799
text editor

00:01:11,520 --> 00:01:14,560
as you can see here i'm sort of just

00:01:12,799 --> 00:01:16,560
writing my code doing whatever

00:01:14,560 --> 00:01:18,479
throwing code wherever i want and then

00:01:16,560 --> 00:01:21,920
when i save the file the code just

00:01:18,479 --> 00:01:23,520
snaps into place almost as if by magic

00:01:21,920 --> 00:01:25,280
and this is really what ruby format is

00:01:23,520 --> 00:01:26,080
designed to do it's designed to sit in

00:01:25,280 --> 00:01:28,560
your text editor

00:01:26,080 --> 00:01:30,000
and just automatically format your code

00:01:28,560 --> 00:01:32,159
as you're working

00:01:30,000 --> 00:01:34,320
um and this is really really cool but

00:01:32,159 --> 00:01:35,759
like it's still not done yet and what

00:01:34,320 --> 00:01:37,600
that means is there's a great

00:01:35,759 --> 00:01:39,119
opportunity for y'all to help me with

00:01:37,600 --> 00:01:41,759
ruby format today

00:01:39,119 --> 00:01:42,799
so what would that look like well ruby

00:01:41,759 --> 00:01:45,360
format has two

00:01:42,799 --> 00:01:46,880
really big classes of bug that it takes

00:01:45,360 --> 00:01:48,960
a lot of work to identify

00:01:46,880 --> 00:01:51,119
and so i'm primarily here today to ask

00:01:48,960 --> 00:01:53,360
folks to help me identify bugs

00:01:51,119 --> 00:01:56,000
not really burn down and fix them but

00:01:53,360 --> 00:01:57,680
just find as many bugs as we can

00:01:56,000 --> 00:02:00,079
and to do that there are primarily two

00:01:57,680 --> 00:02:03,360
types of bug i'm really looking for

00:02:00,079 --> 00:02:05,920
for folks to help me find uh the first

00:02:03,360 --> 00:02:06,560
is the kind of error message that

00:02:05,920 --> 00:02:09,200
happens

00:02:06,560 --> 00:02:10,800
when ruby format encounters a program it

00:02:09,200 --> 00:02:12,800
doesn't understand

00:02:10,800 --> 00:02:14,720
what this error message basically means

00:02:12,800 --> 00:02:15,760
is that you provided ruby format with

00:02:14,720 --> 00:02:18,239
some code

00:02:15,760 --> 00:02:20,160
that it's not seen before and because it

00:02:18,239 --> 00:02:22,400
hasn't seen this code before it doesn't

00:02:20,160 --> 00:02:24,000
know how to format the source code

00:02:22,400 --> 00:02:26,000
and this is really bad for us we don't

00:02:24,000 --> 00:02:26,959
want to crash on any ruby files in

00:02:26,000 --> 00:02:28,879
existence

00:02:26,959 --> 00:02:30,959
and so the first thing i'd really love

00:02:28,879 --> 00:02:32,080
is when you run ruby format on your own

00:02:30,959 --> 00:02:34,239
project

00:02:32,080 --> 00:02:36,319
see if this class of bug falls out the

00:02:34,239 --> 00:02:37,200
other side and if it does file a bug

00:02:36,319 --> 00:02:39,760
report

00:02:37,200 --> 00:02:40,959
um so that's sort of class one and then

00:02:39,760 --> 00:02:42,400
class two

00:02:40,959 --> 00:02:44,239
is the case where ruby format

00:02:42,400 --> 00:02:45,120
meaningfully changes the behavior of

00:02:44,239 --> 00:02:47,920
your file

00:02:45,120 --> 00:02:50,000
and causes your tests to fail basically

00:02:47,920 --> 00:02:52,879
i'd love to know if you run ruby format

00:02:50,000 --> 00:02:54,720
on your project do any tests start

00:02:52,879 --> 00:02:56,720
failing because if they do

00:02:54,720 --> 00:02:58,080
that's a bug in ruby format itself and

00:02:56,720 --> 00:03:00,319
it needs to be fixed

00:02:58,080 --> 00:03:01,760
why does this happen usually it's

00:03:00,319 --> 00:03:02,800
because i haven't accounted for some

00:03:01,760 --> 00:03:04,879
kind of edge case

00:03:02,800 --> 00:03:05,920
in formatting a particularly weird

00:03:04,879 --> 00:03:07,920
construct but

00:03:05,920 --> 00:03:10,400
ruby format isn't really being used as a

00:03:07,920 --> 00:03:12,319
daily driver on any real ruby projects

00:03:10,400 --> 00:03:14,319
today and so i'd love to know

00:03:12,319 --> 00:03:16,800
if you encounter any edge cases with it

00:03:14,319 --> 00:03:18,959
while running it on your own code bases

00:03:16,800 --> 00:03:19,840
so that's kind of the help i'm looking

00:03:18,959 --> 00:03:22,640
for

00:03:19,840 --> 00:03:23,440
in terms of exactly what i'd love to see

00:03:22,640 --> 00:03:26,480
though

00:03:23,440 --> 00:03:26,879
um ruby format today like if you file a

00:03:26,480 --> 00:03:29,120
bug

00:03:26,879 --> 00:03:30,720
and it's a huge file it's really really

00:03:29,120 --> 00:03:31,599
hard for me to work out exactly what's

00:03:30,720 --> 00:03:33,920
going on

00:03:31,599 --> 00:03:35,440
so i'd really love it if not only you

00:03:33,920 --> 00:03:37,680
could identify which files

00:03:35,440 --> 00:03:39,840
it's failing on in your applications but

00:03:37,680 --> 00:03:41,840
also bring them down to minimal examples

00:03:39,840 --> 00:03:44,000
so that we can understand like what

00:03:41,840 --> 00:03:46,000
small fragment of code actually caused

00:03:44,000 --> 00:03:47,599
ruby format to fail

00:03:46,000 --> 00:03:49,360
there are bonus points for making rust

00:03:47,599 --> 00:03:51,200
contributions and actually fixing bugs

00:03:49,360 --> 00:03:53,680
but you don't need to know rust

00:03:51,200 --> 00:03:56,000
to help with ruby format just finding

00:03:53,680 --> 00:03:57,360
bugs by running it on your ruby project

00:03:56,000 --> 00:03:59,280
and then bringing the code to the

00:03:57,360 --> 00:04:00,159
smallest possible size to reproduce the

00:03:59,280 --> 00:04:03,120
bug

00:04:00,159 --> 00:04:04,720
would be really really helpful so let's

00:04:03,120 --> 00:04:07,120
talk about how you actually do this how

00:04:04,720 --> 00:04:08,319
do you get started with ruby format

00:04:07,120 --> 00:04:10,400
well the first thing you're going to

00:04:08,319 --> 00:04:12,319
need to do is install rust because ruby

00:04:10,400 --> 00:04:12,959
format is actually primarily a rust

00:04:12,319 --> 00:04:14,799
project

00:04:12,959 --> 00:04:16,680
with ruby inside it and not the other

00:04:14,799 --> 00:04:18,880
way around so if you just go to

00:04:16,680 --> 00:04:19,919
rustup.rs and follow the instructions

00:04:18,880 --> 00:04:21,919
that will tell you

00:04:19,919 --> 00:04:23,440
uh everything you need to do to install

00:04:21,919 --> 00:04:25,919
rust once you've done

00:04:23,440 --> 00:04:26,639
that you can actually clone ruby format

00:04:25,919 --> 00:04:29,199
down

00:04:26,639 --> 00:04:31,280
and run make all make all will actually

00:04:29,199 --> 00:04:32,960
initialize the ruby format build

00:04:31,280 --> 00:04:34,560
but the very first time this runs you're

00:04:32,960 --> 00:04:35,759
going to want to walk away and grab a

00:04:34,560 --> 00:04:37,280
cup of coffee

00:04:35,759 --> 00:04:39,120
um this is going to compile a ton of

00:04:37,280 --> 00:04:39,680
rust dependencies and it turns out that

00:04:39,120 --> 00:04:41,520
like

00:04:39,680 --> 00:04:42,880
first time compilation of rust code is

00:04:41,520 --> 00:04:45,280
very very slow

00:04:42,880 --> 00:04:46,880
all future compilations of ruby format

00:04:45,280 --> 00:04:48,800
will be fast because

00:04:46,880 --> 00:04:50,240
then the build will be cached but this

00:04:48,800 --> 00:04:51,280
very first time it's going to be slow

00:04:50,240 --> 00:04:52,320
and you're going to want to grab some

00:04:51,280 --> 00:04:54,080
coffee

00:04:52,320 --> 00:04:56,000
after that you're free to run ruby

00:04:54,080 --> 00:04:56,400
format on your project and then start

00:04:56,000 --> 00:04:58,720
the

00:04:56,400 --> 00:05:00,639
reporting the classes of bugs i

00:04:58,720 --> 00:05:04,080
mentioned previously

00:05:00,639 --> 00:05:06,400
um so that's how i'd like to get help um

00:05:04,080 --> 00:05:08,560
and yeah i think that's basically

00:05:06,400 --> 00:05:10,080
everything we need yeah report crashes

00:05:08,560 --> 00:05:14,960
or test failures as you

00:05:10,080 --> 00:05:14,960
encounter them and thank you so much for

00:05:15,960 --> 00:05:18,960

YouTube URL: https://www.youtube.com/watch?v=-kuYBr5_ZQc


