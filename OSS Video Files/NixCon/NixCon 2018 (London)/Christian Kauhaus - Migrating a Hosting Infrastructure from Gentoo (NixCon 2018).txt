Title: Christian Kauhaus - Migrating a Hosting Infrastructure from Gentoo (NixCon 2018)
Publication date: 2018-10-27
Playlist: NixCon 2018 (London)
Description: 
	I would like to share our experiences while migrating a VM-based hosting infrastructure at Flying Circus Internet Operations from Gentoo to NixOS. It is a case study of migrating 500+ VM running diverse customer projects using a wide range of web technologies.

I'll cover the following main points:

1. What was our motivation to change to NixOS? Which specific features of NixOS attracted us?

2. Creating a NixOS-based hosting platform - What did we have to implement? What is still missing?

3. What are the pain points? How could NixOS become more attractive?

4. What do our users think? -- benefits and stumbling blocks.
---
Bio: Christian is a systems engineer working with Flying Circus Internet Operations in Halle (Saale), Germany. He works mainly on infrastructure which keeps customers' web applications running. Main programming languages are Python, Nix, Rust. Christian is a regular contributor to NixOS, most known for vulnix and vulnerability roundups.
Captions: 
	00:00:00,000 --> 00:00:05,670
all righty time for our next speaker and

00:00:03,060 --> 00:00:08,700
this is going to be Christian and you

00:00:05,670 --> 00:00:10,590
might know Christian from his three yes

00:00:08,700 --> 00:00:13,530
and you might know a Christian from his

00:00:10,590 --> 00:00:16,529
work that he's done on vol Nix and on

00:00:13,530 --> 00:00:18,000
the vulnerability vulnerability I can't

00:00:16,529 --> 00:00:21,330
even pronounce it he did it

00:00:18,000 --> 00:00:23,119
vulnerability roundups fornix OS but

00:00:21,330 --> 00:00:25,680
today he is going to talk to us about

00:00:23,119 --> 00:00:27,060
this annoying situation in which we

00:00:25,680 --> 00:00:28,710
might end up where you're not actually

00:00:27,060 --> 00:00:32,250
yet running Nix OS but of course you

00:00:28,710 --> 00:00:36,630
want to and he's going to explain us how

00:00:32,250 --> 00:00:43,309
to get out of the misery quick applause

00:00:36,630 --> 00:00:53,840
of course please thanks yeah hi everyone

00:00:43,309 --> 00:00:53,840
so sorry

00:01:01,420 --> 00:01:09,070
no okay forget about it

00:01:04,430 --> 00:01:09,070
sorry okay as already

00:01:25,570 --> 00:01:29,010
used to be working

00:01:29,690 --> 00:01:33,220
sorry for the delay

00:02:47,940 --> 00:02:59,630
yeah okay sorry about that okay I

00:02:55,830 --> 00:03:04,890
already said hi my name is Christian I'm

00:02:59,630 --> 00:03:10,260
systems engineer doing this for bit more

00:03:04,890 --> 00:03:13,080
than 10 years you can at least yeah

00:03:10,260 --> 00:03:16,860
which me by mail or find me at various

00:03:13,080 --> 00:03:20,760
social media or RAC or github and and

00:03:16,860 --> 00:03:24,450
I'm wanting to talk about migrating

00:03:20,760 --> 00:03:26,750
hosting infrastructure from gen 2 to nix

00:03:24,450 --> 00:03:30,410
OS and answer

00:03:26,750 --> 00:03:33,930
mostly two questions first what

00:03:30,410 --> 00:03:36,450
motivated us to migrate so you don't do

00:03:33,930 --> 00:03:39,030
that just out of a mood and what

00:03:36,450 --> 00:03:44,240
experience did we make so I'd like to

00:03:39,030 --> 00:03:47,790
share a bit of real-world insights so

00:03:44,240 --> 00:03:51,690
perhaps the community can profit from

00:03:47,790 --> 00:03:54,000
that so when I say we I mean Flying

00:03:51,690 --> 00:03:57,600
Circus internet operations we are the

00:03:54,000 --> 00:04:00,330
guys were the cool aircraft but bit more

00:03:57,600 --> 00:04:01,500
than that we are a small company located

00:04:00,330 --> 00:04:07,739
in halahala

00:04:01,500 --> 00:04:12,660
in Germany and basically we are taking

00:04:07,739 --> 00:04:17,030
care of customer applications so there

00:04:12,660 --> 00:04:19,730
are customers which can't won't

00:04:17,030 --> 00:04:22,140
concentrate on operational issues

00:04:19,730 --> 00:04:25,620
because for example they are software

00:04:22,140 --> 00:04:27,840
shops or that small or whatever and so

00:04:25,620 --> 00:04:30,180
they approached us for deployment

00:04:27,840 --> 00:04:33,270
concepts for automation for telemetry

00:04:30,180 --> 00:04:36,000
for monitoring for incident response for

00:04:33,270 --> 00:04:39,540
load and resource management for up

00:04:36,000 --> 00:04:43,169
great strategies and much more so some

00:04:39,540 --> 00:04:47,010
someone said we are sort of DevOps for

00:04:43,169 --> 00:04:50,010
hire or DevOps as a service and so we

00:04:47,010 --> 00:04:55,230
are actually working closely together

00:04:50,010 --> 00:05:00,990
with the deaths usually on individual

00:04:55,230 --> 00:05:03,180
applications and we work together to

00:05:00,990 --> 00:05:07,070
keep the stuff running so actually for

00:05:03,180 --> 00:05:11,760
customer projects we have more than 500

00:05:07,070 --> 00:05:15,660
VMs with a lot of very diverse stuff

00:05:11,760 --> 00:05:20,760
installed and running on them so well

00:05:15,660 --> 00:05:21,390
why did we migrate so where did we come

00:05:20,760 --> 00:05:24,530
from

00:05:21,390 --> 00:05:28,320
we have been historically a rental and

00:05:24,530 --> 00:05:32,300
puppet shop and why beef before I'm

00:05:28,320 --> 00:05:35,910
gonna ditch this it's important to state

00:05:32,300 --> 00:05:39,540
it went running for quite a while and

00:05:35,910 --> 00:05:42,030
well it was not too bad so during the

00:05:39,540 --> 00:05:44,070
time we started that gentle was a good

00:05:42,030 --> 00:05:47,220
choice because of its extreme

00:05:44,070 --> 00:05:49,860
configurability and puppet was also a

00:05:47,220 --> 00:05:52,200
good choice because at that time I think

00:05:49,860 --> 00:05:56,690
it was one of the best tools you could

00:05:52,200 --> 00:06:00,660
get for automated systems management but

00:05:56,690 --> 00:06:04,380
after doing that for ten years or so it

00:06:00,660 --> 00:06:06,780
got too complex so um puppet is not able

00:06:04,380 --> 00:06:08,670
to manage everything and so it was no

00:06:06,780 --> 00:06:11,430
problem we are software engineers after

00:06:08,670 --> 00:06:12,660
all so we say well that's write a script

00:06:11,430 --> 00:06:15,300
let's write a wrapper

00:06:12,660 --> 00:06:18,480
let's write a fix up and this is a

00:06:15,300 --> 00:06:22,380
partial view of our old system

00:06:18,480 --> 00:06:25,850
management stack we see a lot of diverse

00:06:22,380 --> 00:06:29,490
steps and fixes and scripts and

00:06:25,850 --> 00:06:32,160
additional config runs and spare

00:06:29,490 --> 00:06:36,570
specific scripts for stuff and this is

00:06:32,160 --> 00:06:38,340
only 1/10 of the whole thing and what

00:06:36,570 --> 00:06:41,310
you see is that there are partly

00:06:38,340 --> 00:06:45,030
overlapping functionalities so for

00:06:41,310 --> 00:06:50,400
example puppet can manage 80% of

00:06:45,030 --> 00:06:52,080
something or dental emerge can do 90% of

00:06:50,400 --> 00:06:57,350
something but then we have to put

00:06:52,080 --> 00:07:01,440
another fix and another script and well

00:06:57,350 --> 00:07:04,440
it was painfully slow so for a full

00:07:01,440 --> 00:07:08,220
configuration run we took more than 5

00:07:04,440 --> 00:07:12,150
minutes on a typical VM too many moving

00:07:08,220 --> 00:07:13,889
parts so you perhaps I have to emerge a

00:07:12,150 --> 00:07:15,990
package but then you have to

00:07:13,889 --> 00:07:18,539
revved up rebuilt don't know if anyone

00:07:15,990 --> 00:07:20,490
knows Trento and then you have Python

00:07:18,539 --> 00:07:25,379
updater then you have a pearl cleaner

00:07:20,490 --> 00:07:29,610
and so on and so on it and with every

00:07:25,379 --> 00:07:32,279
step you add you may get a bit closer to

00:07:29,610 --> 00:07:35,069
where you want but not not really to the

00:07:32,279 --> 00:07:38,310
point and this small gap when you

00:07:35,069 --> 00:07:41,279
multiply that with 500 machines gets a

00:07:38,310 --> 00:07:43,379
really awful lot of works to to be

00:07:41,279 --> 00:07:49,110
solved manually and we didn't want to do

00:07:43,379 --> 00:07:53,069
that so well what what was the problem

00:07:49,110 --> 00:07:55,529
what is more like we did a bad job so

00:07:53,069 --> 00:07:58,409
what we just have to improve the

00:07:55,529 --> 00:08:01,439
implementation or perhaps if is the

00:07:58,409 --> 00:08:04,409
approach not optimal is our whole model

00:08:01,439 --> 00:08:06,389
of system management too weak perhaps

00:08:04,409 --> 00:08:10,379
yes and to answer this question we have

00:08:06,389 --> 00:08:14,189
to go a bit into a theory so and perhaps

00:08:10,379 --> 00:08:17,370
some of you may know the real great

00:08:14,189 --> 00:08:20,580
paper by Steve Troy got from NASA about

00:08:17,370 --> 00:08:23,159
why aromatase and in this paper he

00:08:20,580 --> 00:08:27,990
defines three main models of system

00:08:23,159 --> 00:08:31,080
management the divergent system

00:08:27,990 --> 00:08:33,659
management the convergence is the

00:08:31,080 --> 00:08:36,959
management and congruent system and

00:08:33,659 --> 00:08:41,120
management and I go to the each of these

00:08:36,959 --> 00:08:43,760
in detail so what does divergence mean

00:08:41,120 --> 00:08:46,079
aside from the paper divergence is

00:08:43,760 --> 00:08:48,209
characterized by the configuration of

00:08:46,079 --> 00:08:50,880
life hosts drifting away from any

00:08:48,209 --> 00:08:53,430
desired assumed baseline disc content so

00:08:50,880 --> 00:08:55,709
what is this for example this is when

00:08:53,430 --> 00:08:59,070
you configure server by following a

00:08:55,709 --> 00:09:01,560
checklist let three admins do that you

00:08:59,070 --> 00:09:03,810
get three different results but also

00:09:01,560 --> 00:09:10,589
like it's dollar scripts for example

00:09:03,810 --> 00:09:12,300
while call to shell ok this is divergent

00:09:10,589 --> 00:09:15,480
system management but there's also a

00:09:12,300 --> 00:09:18,600
legitimate use for divergence for

00:09:15,480 --> 00:09:21,060
example when you have user home dears or

00:09:18,600 --> 00:09:24,870
you have some sort of database content

00:09:21,060 --> 00:09:26,750
or any relevant productive data is by

00:09:24,870 --> 00:09:28,760
definition divergent

00:09:26,750 --> 00:09:30,830
so if you wouldn't have that then you

00:09:28,760 --> 00:09:33,500
could burn your entire data center on

00:09:30,830 --> 00:09:37,130
DVDs and then it's static so no point

00:09:33,500 --> 00:09:40,280
about that and the second model if a

00:09:37,130 --> 00:09:42,440
convergent model so this is where most

00:09:40,280 --> 00:09:46,060
of the system management tools we have

00:09:42,440 --> 00:09:48,980
today live in so you have some

00:09:46,060 --> 00:09:51,860
description of the desired state and

00:09:48,980 --> 00:09:54,410
then you measure the actual state and

00:09:51,860 --> 00:09:56,720
then you see where the Delta is and then

00:09:54,410 --> 00:10:00,020
you for each deviation you have a

00:09:56,720 --> 00:10:02,480
corrective action which puts the actual

00:10:00,020 --> 00:10:06,920
system state nearer to the desired

00:10:02,480 --> 00:10:10,250
system states of many things like puppet

00:10:06,920 --> 00:10:15,080
and sober salt and you name it work this

00:10:10,250 --> 00:10:17,540
way and this has also its use case and

00:10:15,080 --> 00:10:20,860
won't get a way for example you have

00:10:17,540 --> 00:10:23,720
activation scripts in Nix West who are

00:10:20,860 --> 00:10:26,530
constructed exactly around this model or

00:10:23,720 --> 00:10:30,860
for example you have system D services

00:10:26,530 --> 00:10:33,440
which follow this model or when viewed

00:10:30,860 --> 00:10:35,750
as a larger scope you see for example a

00:10:33,440 --> 00:10:39,890
container orchestration also follows

00:10:35,750 --> 00:10:42,470
this model so this model is good but we

00:10:39,890 --> 00:10:46,370
can even get to a stronger model the

00:10:42,470 --> 00:10:48,290
congruent model this means congruence is

00:10:46,370 --> 00:10:50,030
the practice of maintaining this state

00:10:48,290 --> 00:10:53,300
in complete compliance with a fully

00:10:50,030 --> 00:10:55,370
described descriptive baseline so for

00:10:53,300 --> 00:10:59,990
example system packages are exactly

00:10:55,370 --> 00:11:02,390
defined in every distribution and of

00:10:59,990 --> 00:11:05,930
course everything in the Nix star is

00:11:02,390 --> 00:11:08,030
exactly defined but also there are for

00:11:05,930 --> 00:11:10,610
example container images which are

00:11:08,030 --> 00:11:14,030
exactly defined and okay you could argue

00:11:10,610 --> 00:11:20,150
if serverless functions belong to that

00:11:14,030 --> 00:11:25,940
as well or not perhaps yes so and well

00:11:20,150 --> 00:11:29,060
to get maximum control you want to make

00:11:25,940 --> 00:11:31,250
the congruent domain as large as

00:11:29,060 --> 00:11:35,960
possible and the other to do mate

00:11:31,250 --> 00:11:40,430
domains while still they are but it's

00:11:35,960 --> 00:11:42,350
not growing too big so we design it

00:11:40,430 --> 00:11:44,779
decided it's time to switch to another

00:11:42,350 --> 00:11:49,010
model we wanted to follow the congruent

00:11:44,779 --> 00:11:52,700
approach and to interesting candidate

00:11:49,010 --> 00:11:56,470
for doing so were of course Nick's ass

00:11:52,700 --> 00:12:01,010
and of course going with a container

00:11:56,470 --> 00:12:07,250
thing so well and everyone is going with

00:12:01,010 --> 00:12:09,200
a container thing today but well they

00:12:07,250 --> 00:12:11,959
don't do well in a multi-tenant

00:12:09,200 --> 00:12:15,110
environment because they provide no

00:12:11,959 --> 00:12:19,040
great isolation and the other thing is

00:12:15,110 --> 00:12:21,320
that containing out technology well has

00:12:19,040 --> 00:12:24,110
its strengths but also has its

00:12:21,320 --> 00:12:25,700
weaknesses and if you reach some larger

00:12:24,110 --> 00:12:28,910
docker file then you know what I'm

00:12:25,700 --> 00:12:32,000
talking about so what attracted us to

00:12:28,910 --> 00:12:36,350
Nix whereas I think in the first place

00:12:32,000 --> 00:12:38,720
the NYX language is so expressive that

00:12:36,350 --> 00:12:41,720
you can do nearly everything with it and

00:12:38,720 --> 00:12:46,279
this was of course very important for us

00:12:41,720 --> 00:12:48,620
as as software developers you get a lot

00:12:46,279 --> 00:12:52,279
of flexibility you can just mix

00:12:48,620 --> 00:12:54,380
everything together and all the

00:12:52,279 --> 00:12:57,940
dependencies are still in place and

00:12:54,380 --> 00:13:01,459
working binary substitution you get that

00:12:57,940 --> 00:13:05,510
basically for free and when you manage

00:13:01,459 --> 00:13:08,660
to get hydra running and and well

00:13:05,510 --> 00:13:11,350
someone said Nix is a tool to rule them

00:13:08,660 --> 00:13:13,700
all so you have one approach to

00:13:11,350 --> 00:13:17,270
packaging to assistance management to

00:13:13,700 --> 00:13:19,459
deployment and at least partner last the

00:13:17,270 --> 00:13:21,950
community is very approachable it was no

00:13:19,459 --> 00:13:24,079
problem for us to get into the community

00:13:21,950 --> 00:13:27,459
and for example place pull request or

00:13:24,079 --> 00:13:33,550
something like that this is very great

00:13:27,459 --> 00:13:37,430
ok what did we do ok I'm just talking to

00:13:33,550 --> 00:13:41,209
some hackers here oh so the hecka would

00:13:37,430 --> 00:13:45,529
think no problem at all just install Nix

00:13:41,209 --> 00:13:47,080
OS on the VMS and every one will be

00:13:45,529 --> 00:13:50,170
happy so

00:13:47,080 --> 00:13:53,140
well every one of you would just start

00:13:50,170 --> 00:13:55,990
to put your whole project in one big

00:13:53,140 --> 00:13:57,970
default dot NYX and that would describe

00:13:55,990 --> 00:13:59,830
everything then you would just say NYX

00:13:57,970 --> 00:14:04,720
build and then the whole project trust

00:13:59,830 --> 00:14:09,010
builds and everything is fine why this

00:14:04,720 --> 00:14:12,370
is what NYX as hackers think but we had

00:14:09,010 --> 00:14:14,560
a large installed base which was not

00:14:12,370 --> 00:14:19,060
constructed with mixers in mind and we

00:14:14,560 --> 00:14:23,019
had to put that somehow over the fence

00:14:19,060 --> 00:14:28,209
and we'll see what's there how can we

00:14:23,019 --> 00:14:29,829
get that running and while doing so

00:14:28,209 --> 00:14:35,760
we talked to our customers where he

00:14:29,829 --> 00:14:39,130
reviewed the code and we found out well

00:14:35,760 --> 00:14:42,220
not everyone is ready for next verse

00:14:39,130 --> 00:14:44,500
well Nicks is sort of well I don't

00:14:42,220 --> 00:14:47,980
understand me wrong but it's a hacker

00:14:44,500 --> 00:14:51,160
thing it's technically very advanced so

00:14:47,980 --> 00:14:54,070
I like that very much but some of our

00:14:51,160 --> 00:14:57,700
users were frightened so they had quite

00:14:54,070 --> 00:15:00,130
a bit of hard time with this congruent

00:14:57,700 --> 00:15:03,160
immutable approach so for example hey I

00:15:00,130 --> 00:15:06,459
want just to edit some it is he whatever

00:15:03,160 --> 00:15:09,040
follow I kind of do that and whereas the

00:15:06,459 --> 00:15:11,380
option for X and set and do you have a

00:15:09,040 --> 00:15:14,110
GUI and what's going on here don't

00:15:11,380 --> 00:15:16,990
understand that and slash user bin is

00:15:14,110 --> 00:15:19,029
empty so we're off the stuff gone and

00:15:16,990 --> 00:15:21,880
I'm overwhelmed

00:15:19,029 --> 00:15:23,950
okay Nix Nix what that's a funny

00:15:21,880 --> 00:15:26,200
language so I don't understand so can

00:15:23,950 --> 00:15:28,829
can I program that like she'll know I

00:15:26,200 --> 00:15:31,380
can't and I don't understand that so

00:15:28,829 --> 00:15:34,660
functional programming is very

00:15:31,380 --> 00:15:36,699
expressive once you get into it it's

00:15:34,660 --> 00:15:40,000
really fun and you don't want to go back

00:15:36,699 --> 00:15:42,070
and do something other but if you don't

00:15:40,000 --> 00:15:45,699
do that and for example you're more like

00:15:42,070 --> 00:15:49,269
an admin guy who started putting some

00:15:45,699 --> 00:15:53,320
CDs into some Microsoft Windows boxes

00:15:49,269 --> 00:15:55,959
then it's quite a steep learning curve

00:15:53,320 --> 00:15:59,139
that was for the one thing and the other

00:15:55,959 --> 00:16:01,880
thing well

00:15:59,139 --> 00:16:06,829
it depends on what you are running and

00:16:01,880 --> 00:16:12,470
we do a lot of web applications and they

00:16:06,829 --> 00:16:14,269
are well some of them insist of trying

00:16:12,470 --> 00:16:17,089
to build themselves in the very moment

00:16:14,269 --> 00:16:19,459
you are starting them up for example

00:16:17,089 --> 00:16:22,490
we've got some note reyes application

00:16:19,459 --> 00:16:24,529
which just starts to compile some C code

00:16:22,490 --> 00:16:28,220
in the moment you're trying to start

00:16:24,529 --> 00:16:30,550
that and our we have some CMS

00:16:28,220 --> 00:16:33,079
applications who start to optimize

00:16:30,550 --> 00:16:35,600
themselves somehow or don't know what

00:16:33,079 --> 00:16:36,889
they are doing but they I do do know for

00:16:35,600 --> 00:16:39,910
sure they are going to fail if they

00:16:36,889 --> 00:16:43,910
cannot write the installation directory

00:16:39,910 --> 00:16:48,430
and we also have some applications which

00:16:43,910 --> 00:16:52,300
are and centered around this model of

00:16:48,430 --> 00:16:55,250
incremental commented so for example

00:16:52,300 --> 00:16:58,790
some stuff which needs an installed base

00:16:55,250 --> 00:17:01,190
and then needs to reinstall itself

00:16:58,790 --> 00:17:03,290
depending on the old installed base and

00:17:01,190 --> 00:17:05,240
if you try to answer everything from

00:17:03,290 --> 00:17:08,449
scratch then it takes one and a half

00:17:05,240 --> 00:17:13,160
hours or so also some plugin system auto

00:17:08,449 --> 00:17:17,120
up auto update systems and so on so well

00:17:13,160 --> 00:17:21,319
you could say and that's all bad rule it

00:17:17,120 --> 00:17:23,980
out yeah but we are earning our money

00:17:21,319 --> 00:17:26,750
with running business critical customer

00:17:23,980 --> 00:17:28,940
applications and most of them have some

00:17:26,750 --> 00:17:33,980
tiny ugly car

00:17:28,940 --> 00:17:36,910
deep within which well isn't really good

00:17:33,980 --> 00:17:41,120
software design but is absolutely

00:17:36,910 --> 00:17:45,140
important and everyone knows ok no it's

00:17:41,120 --> 00:17:47,780
not the best but we cannot do without it

00:17:45,140 --> 00:17:50,770
and it's our job to keep it running so

00:17:47,780 --> 00:17:53,360
how to solve that obviously we cannot

00:17:50,770 --> 00:17:56,780
rewrite everything and Nixa fie

00:17:53,360 --> 00:18:05,470
everything right away so we decided for

00:17:56,780 --> 00:18:09,409
a flexible approach so we just took the

00:18:05,470 --> 00:18:12,570
application in the narrower sense so the

00:18:09,409 --> 00:18:16,620
custom code and see if

00:18:12,570 --> 00:18:19,789
that mattress more convergent model are

00:18:16,620 --> 00:18:23,190
another model and we also separate

00:18:19,789 --> 00:18:26,460
components we also had that in our old

00:18:23,190 --> 00:18:30,389
gent who set up which bundle often

00:18:26,460 --> 00:18:32,880
mostly used things like nginx like

00:18:30,389 --> 00:18:35,669
Postgres like rudders like memcache d

00:18:32,880 --> 00:18:42,659
like elastic search that many projects

00:18:35,669 --> 00:18:45,240
use and now we see which part of what

00:18:42,659 --> 00:18:47,279
goes into what model so the application

00:18:45,240 --> 00:18:49,830
deployment depends largely on the

00:18:47,279 --> 00:18:52,169
project we have some conventional

00:18:49,830 --> 00:18:55,559
deployment for example like ansible we

00:18:52,169 --> 00:18:58,409
didn't want to get either truth at that

00:18:55,559 --> 00:19:01,409
point we have even divergent stuff like

00:18:58,409 --> 00:19:04,320
data ideas and but there are also

00:19:01,409 --> 00:19:06,720
congruent elements for example like

00:19:04,320 --> 00:19:10,110
customer supplied container images and

00:19:06,720 --> 00:19:14,220
of course there are a few already Nixa

00:19:10,110 --> 00:19:17,789
fight products and the color code is

00:19:14,220 --> 00:19:22,789
green is congruent yellow is convergent

00:19:17,789 --> 00:19:29,549
and red as divergent as it comes to the

00:19:22,789 --> 00:19:33,240
pre-made components most of them have

00:19:29,549 --> 00:19:36,090
some blue coat use some NIC service

00:19:33,240 --> 00:19:39,090
modules Fortran place already and have

00:19:36,090 --> 00:19:41,399
some integration points what does that

00:19:39,090 --> 00:19:44,669
mean these are directories or files

00:19:41,399 --> 00:19:47,159
where user deployments can typically put

00:19:44,669 --> 00:19:50,129
some snippets in door so this is the

00:19:47,159 --> 00:19:53,250
equivalent of fiddling with some contact

00:19:50,129 --> 00:19:57,139
files under ITC so and I give an example

00:19:53,250 --> 00:20:00,029
for example and UNIX component has an

00:19:57,139 --> 00:20:03,330
integration point this is some directory

00:20:00,029 --> 00:20:06,149
and you can just drop in some virtual

00:20:03,330 --> 00:20:09,539
hosting configuration files and so on

00:20:06,149 --> 00:20:12,570
and that stuff gets picked up by the

00:20:09,539 --> 00:20:14,940
mixers we built run using our glue code

00:20:12,570 --> 00:20:18,210
and gets incorporated in the

00:20:14,940 --> 00:20:23,490
configuration running in the Nix store

00:20:18,210 --> 00:20:26,429
so that we still run everything out of

00:20:23,490 --> 00:20:30,350
the NIC store but users find

00:20:26,429 --> 00:20:34,679
at least some points they can cope with

00:20:30,350 --> 00:20:39,269
so that was the plan was what was our

00:20:34,679 --> 00:20:41,940
experience for most projects with all of

00:20:39,269 --> 00:20:44,549
this in place it was quite doable and

00:20:41,940 --> 00:20:49,649
while you have to fit around a little

00:20:44,549 --> 00:20:54,619
bit but I think 90% of our customer

00:20:49,649 --> 00:20:54,619
projects went quite fine with that and

00:20:54,860 --> 00:21:01,139
we of course have some dependencies

00:20:58,590 --> 00:21:03,509
which used to come out this out of the

00:21:01,139 --> 00:21:09,240
system insulation I'm not gentle for

00:21:03,509 --> 00:21:13,610
example some libraries like SSL and so

00:21:09,240 --> 00:21:18,210
on and most of them are now placed into

00:21:13,610 --> 00:21:21,570
the user annex profile during whatever

00:21:18,210 --> 00:21:24,269
are using whatever mechanism is fitting

00:21:21,570 --> 00:21:27,419
so it's in some project we and so I'm

00:21:24,269 --> 00:21:30,210
why annex and and others have a default

00:21:27,419 --> 00:21:34,460
mix which builds on and which is going

00:21:30,210 --> 00:21:38,429
to be installed there and in the end we

00:21:34,460 --> 00:21:42,539
see that running code base mixing up

00:21:38,429 --> 00:21:46,619
mixed code from as far back from 1509

00:21:42,539 --> 00:21:50,460
and to the current stuff and due to nix

00:21:46,619 --> 00:21:55,649
as we are able to mix it so it works out

00:21:50,460 --> 00:21:59,929
so this is really great so of course we

00:21:55,649 --> 00:22:03,059
made some tools to facilitate this our

00:21:59,929 --> 00:22:06,360
major wrapper and it's only one wrapper

00:22:03,059 --> 00:22:09,749
for everything is FC manage this is

00:22:06,360 --> 00:22:12,990
basically a thin layer above mixers who

00:22:09,749 --> 00:22:16,519
rebuilt and that runs regularly from a

00:22:12,990 --> 00:22:20,340
system the timer and pulse the channel

00:22:16,519 --> 00:22:23,340
sees every changes occur and triggers

00:22:20,340 --> 00:22:25,619
them and then what perhaps more

00:22:23,340 --> 00:22:29,210
interesting for the community it's a

00:22:25,619 --> 00:22:32,039
little to record at users can that scans

00:22:29,210 --> 00:22:36,169
unmanaged installations for example user

00:22:32,039 --> 00:22:39,570
just compiled code in his home and that

00:22:36,169 --> 00:22:41,580
uses some libraries from the Nick store

00:22:39,570 --> 00:22:44,100
the Knicks or garbage collector doesn't

00:22:41,580 --> 00:22:46,019
know about that and deletes the

00:22:44,100 --> 00:22:48,840
libraries at some point and then the

00:22:46,019 --> 00:22:52,009
user code doesn't run anymore and so the

00:22:48,840 --> 00:22:55,200
scanner just goes through the

00:22:52,009 --> 00:22:58,049
installation and registers all the time

00:22:55,200 --> 00:23:01,019
dependency it finds with a Knick star

00:22:58,049 --> 00:23:03,899
garbage collector and of course will

00:23:01,019 --> 00:23:07,350
next I think this is well known there's

00:23:03,899 --> 00:23:10,889
scans and installation for open CVS so

00:23:07,350 --> 00:23:15,269
what were the main benefits from our

00:23:10,889 --> 00:23:17,220
point of view going from gen 2 tunics

00:23:15,269 --> 00:23:20,759
gave us significantly higher

00:23:17,220 --> 00:23:25,669
productivity so we can do stuff in no

00:23:20,759 --> 00:23:28,200
time which took days in the environment

00:23:25,669 --> 00:23:31,129
we also have a test on the

00:23:28,200 --> 00:23:35,340
infrastructure level that's quite good

00:23:31,129 --> 00:23:37,889
we got a lot more flexibility because we

00:23:35,340 --> 00:23:41,190
don't have to say ok this particular

00:23:37,889 --> 00:23:44,429
version of open it's the system version

00:23:41,190 --> 00:23:50,580
and you have to use that and nothing

00:23:44,429 --> 00:23:53,759
else and also we see that we can scale

00:23:50,580 --> 00:23:56,309
things so for example most engine X

00:23:53,759 --> 00:24:00,090
based convicts are the same but also

00:23:56,309 --> 00:24:03,269
have the flexibility to bring in

00:24:00,090 --> 00:24:06,690
customers specific modifications without

00:24:03,269 --> 00:24:11,009
losing oversight so what do our users

00:24:06,690 --> 00:24:14,720
think well most users don't care so they

00:24:11,009 --> 00:24:20,549
just want to have some Linux server so

00:24:14,720 --> 00:24:25,859
well distro don't know so ok get it

00:24:20,549 --> 00:24:27,899
running that's fine so and we would like

00:24:25,859 --> 00:24:29,879
to have some more projects where our

00:24:27,899 --> 00:24:31,759
customers are just shipping a default

00:24:29,879 --> 00:24:35,099
mix and say hey that's my default mix

00:24:31,759 --> 00:24:38,009
run that in production but it's only the

00:24:35,099 --> 00:24:44,639
case for maximum ten percents of our

00:24:38,009 --> 00:24:48,599
projects and so I think we we profit

00:24:44,639 --> 00:24:51,059
more of the migration than our users

00:24:48,599 --> 00:24:53,460
profile directly but of course they

00:24:51,059 --> 00:24:57,299
provide indirectly

00:24:53,460 --> 00:25:01,760
because we are better off right now okay

00:24:57,299 --> 00:25:05,520
to finish on there are some things which

00:25:01,760 --> 00:25:08,070
where I would wanted to call the

00:25:05,520 --> 00:25:09,899
sectioned pain points but I think that's

00:25:08,070 --> 00:25:12,809
a misnomer because working with Nick

00:25:09,899 --> 00:25:17,490
sighs it's not painful at all it's fun

00:25:12,809 --> 00:25:19,520
so I call it things to improve the

00:25:17,490 --> 00:25:23,580
security story so I've been busy

00:25:19,520 --> 00:25:28,039
providing vulnerability round ups every

00:25:23,580 --> 00:25:31,830
one week or two and but when you look

00:25:28,039 --> 00:25:35,760
around you see quite a long list of open

00:25:31,830 --> 00:25:39,419
issues so I think and we need a better

00:25:35,760 --> 00:25:42,360
approach to actually fixing stuff so

00:25:39,419 --> 00:25:44,820
discovering of what needs to be done is

00:25:42,360 --> 00:25:47,850
good but it's only first step the second

00:25:44,820 --> 00:25:50,669
step is to fix this stuff and in my

00:25:47,850 --> 00:25:53,669
opinion this is largely a problem of

00:25:50,669 --> 00:25:58,110
missing manpower so I was really happy

00:25:53,669 --> 00:26:01,710
to see a larger security team and I want

00:25:58,110 --> 00:26:04,880
to use Saturday I don't know for people

00:26:01,710 --> 00:26:09,539
who are still around there and just to

00:26:04,880 --> 00:26:13,770
see what could be done in the short term

00:26:09,539 --> 00:26:17,279
just to get this one better and we also

00:26:13,770 --> 00:26:19,620
should think about backporting important

00:26:17,279 --> 00:26:22,590
changes to older releases don't know if

00:26:19,620 --> 00:26:27,000
we need to form a process for that or

00:26:22,590 --> 00:26:30,840
just start by doing so informally the

00:26:27,000 --> 00:26:34,200
other point that is a constant source of

00:26:30,840 --> 00:26:37,730
well confusion with our customers is

00:26:34,200 --> 00:26:41,820
that nick says relax to restart

00:26:37,730 --> 00:26:44,730
everything even for minor changes well

00:26:41,820 --> 00:26:48,210
it comes from the model if I change any

00:26:44,730 --> 00:26:51,059
input the hash changes the unit file

00:26:48,210 --> 00:26:52,950
changes and systemd restarts the unit so

00:26:51,059 --> 00:26:55,350
when you see for example here for

00:26:52,950 --> 00:26:58,350
Postgres it's well quite a problem

00:26:55,350 --> 00:27:01,770
because it terminates all connections

00:26:58,350 --> 00:27:03,510
who starts and then the application just

00:27:01,770 --> 00:27:05,760
has to reconnect and we've got one

00:27:03,510 --> 00:27:09,250
minute of useless downtime

00:27:05,760 --> 00:27:10,420
so also here the question if is can we

00:27:09,250 --> 00:27:12,340
do better

00:27:10,420 --> 00:27:15,130
can we come up with some clever scheme

00:27:12,340 --> 00:27:20,740
to avoid that without breaking the

00:27:15,130 --> 00:27:24,640
overall neck size model and well the

00:27:20,740 --> 00:27:28,170
last point is I think the community has

00:27:24,640 --> 00:27:32,410
grown quite a bit over the last year's

00:27:28,170 --> 00:27:35,140
knixwear as is attracting a larger user

00:27:32,410 --> 00:27:36,940
base this is great news but I think we

00:27:35,140 --> 00:27:39,820
have to keep up with a community

00:27:36,940 --> 00:27:43,470
structure so from my perspective I would

00:27:39,820 --> 00:27:47,820
really be glad to see more teams with

00:27:43,470 --> 00:27:50,740
well cleared structures structured with

00:27:47,820 --> 00:27:53,170
responsibilities well perhaps there

00:27:50,740 --> 00:27:56,440
already exist some teams but then they

00:27:53,170 --> 00:28:00,640
are not well discoverable at least so I

00:27:56,440 --> 00:28:05,110
think this is a point where we can and

00:28:00,640 --> 00:28:09,820
should improve and so just to continue

00:28:05,110 --> 00:28:13,390
the success of mixers so as a final

00:28:09,820 --> 00:28:15,640
question if we would be in the same

00:28:13,390 --> 00:28:19,120
situation we've been three years ago

00:28:15,640 --> 00:28:22,750
right now would we choose next as again

00:28:19,120 --> 00:28:24,640
probably yes think it's a really great

00:28:22,750 --> 00:28:28,420
piece of software software

00:28:24,640 --> 00:28:38,390
infrastructure thank you

00:28:28,420 --> 00:28:38,390
[Applause]

00:28:53,940 --> 00:29:02,639
I can shout okay hello hi thanks

00:29:00,200 --> 00:29:04,110
so one of your slides was very

00:29:02,639 --> 00:29:05,940
interesting that just what first one of

00:29:04,110 --> 00:29:10,470
the first ones is NYX West versus

00:29:05,940 --> 00:29:13,200
containers and someone would have to ask

00:29:10,470 --> 00:29:17,370
that yeah yeah

00:29:13,200 --> 00:29:21,600
so we docker and containers there is

00:29:17,370 --> 00:29:24,360
this huge pool about one containers runs

00:29:21,600 --> 00:29:27,059
one application and so on so it seems

00:29:24,360 --> 00:29:28,200
that it fits quite well at my understand

00:29:27,059 --> 00:29:30,000
what you are doing because your

00:29:28,200 --> 00:29:31,409
customers have one application and they

00:29:30,000 --> 00:29:34,080
want to run one application in a

00:29:31,409 --> 00:29:37,620
container so would you like to elaborate

00:29:34,080 --> 00:29:43,710
a bit but why Nix worse for you was a

00:29:37,620 --> 00:29:47,129
bad choice yes sure sure so and well one

00:29:43,710 --> 00:29:48,750
point is that containers are only part

00:29:47,129 --> 00:29:51,480
of the solution because in a

00:29:48,750 --> 00:29:54,389
multi-tenant environment you have to

00:29:51,480 --> 00:29:58,559
provide and get encapsulation anyway and

00:29:54,389 --> 00:30:03,480
so we still need some management for the

00:29:58,559 --> 00:30:07,440
under light underlying thing be it VMs

00:30:03,480 --> 00:30:10,919
whatever and we're not large enough to

00:30:07,440 --> 00:30:14,100
have dedicated Hardware per customer and

00:30:10,919 --> 00:30:18,659
the other thing is that containers

00:30:14,100 --> 00:30:22,039
impose a specific way of deploying the

00:30:18,659 --> 00:30:25,139
application because you have to follow

00:30:22,039 --> 00:30:28,110
their standard or you aren't going to

00:30:25,139 --> 00:30:30,210
use it well and with our customer base

00:30:28,110 --> 00:30:32,340
this is not possible for example we have

00:30:30,210 --> 00:30:34,820
a lot we are historical a Python shop

00:30:32,340 --> 00:30:38,519
and there are a lot of CC build-out

00:30:34,820 --> 00:30:42,389
based projects and they don't work

00:30:38,519 --> 00:30:45,990
together very well in addition to that

00:30:42,389 --> 00:30:49,710
we experimenting now with running

00:30:45,990 --> 00:30:53,250
containers inside VMs just to give the

00:30:49,710 --> 00:30:59,909
benefit of both worlds more questions

00:30:53,250 --> 00:31:03,659
yes what was the first question yes so

00:30:59,909 --> 00:31:06,119
your 10% of your base of user base is

00:31:03,659 --> 00:31:07,590
already using default Nick so Canada mix

00:31:06,119 --> 00:31:10,860
if I the project for you

00:31:07,590 --> 00:31:14,210
in a sense at least partly yeah what is

00:31:10,860 --> 00:31:18,330
the difference in maintainability or

00:31:14,210 --> 00:31:20,370
between this 10% and let's say some some

00:31:18,330 --> 00:31:24,440
similar size projects

00:31:20,370 --> 00:31:29,399
okay it largely depends on the project

00:31:24,440 --> 00:31:34,649
in my experience the maintainability is

00:31:29,399 --> 00:31:37,429
more dependent on the software code base

00:31:34,649 --> 00:31:41,999
as such so there are for example

00:31:37,429 --> 00:31:45,990
projects which safe part of the code in

00:31:41,999 --> 00:31:49,799
their databases and well that's a

00:31:45,990 --> 00:31:53,999
nightmare and and while we have quite

00:31:49,799 --> 00:31:56,940
good convergent deployment tools for

00:31:53,999 --> 00:32:00,899
example we use part orders in-house tool

00:31:56,940 --> 00:32:06,269
or ansible and other tools and if you do

00:32:00,899 --> 00:32:09,600
that well it works too and so I think

00:32:06,269 --> 00:32:12,389
the major benefit of projects which are

00:32:09,600 --> 00:32:15,350
using mix if I'd set up is that you've

00:32:12,389 --> 00:32:19,230
got the exactly Proteus ability on the

00:32:15,350 --> 00:32:21,840
developers computers so you know okay

00:32:19,230 --> 00:32:24,450
exactly what is running here will be

00:32:21,840 --> 00:32:28,559
running there I think this is the same

00:32:24,450 --> 00:32:32,309
promise that containers make and I think

00:32:28,559 --> 00:32:36,360
this is the main benefit for the most

00:32:32,309 --> 00:32:39,720
other project we have a much more sort

00:32:36,360 --> 00:32:43,350
of staging setup with a lot of VMs that

00:32:39,720 --> 00:32:46,200
are subtly there to see that everything

00:32:43,350 --> 00:32:47,970
still fits together in the deployment do

00:32:46,200 --> 00:32:52,700
we have there two foreign XE fight

00:32:47,970 --> 00:32:52,700
projects but they don't need that much

00:32:52,850 --> 00:33:01,830
second question so you remember do you

00:32:56,789 --> 00:33:04,049
still remember when you came back to

00:33:01,830 --> 00:33:07,070
your meeting with the idea let's try it

00:33:04,049 --> 00:33:10,379
mix and see it and when your coworkers

00:33:07,070 --> 00:33:15,629
okay that was actually Domon the guy so

00:33:10,379 --> 00:33:19,049
and we had a sprint at then goes help

00:33:15,629 --> 00:33:20,690
this was the pharma company and and we

00:33:19,049 --> 00:33:23,450
were supposed on hacking on

00:33:20,690 --> 00:33:27,530
Python stuff and I know very well dumb

00:33:23,450 --> 00:33:30,920
and just put there some Nick stuff in

00:33:27,530 --> 00:33:33,170
and just said here look at that that's

00:33:30,920 --> 00:33:35,480
cool and we all looked at that and said

00:33:33,170 --> 00:33:39,530
that's weird

00:33:35,480 --> 00:33:42,650
well you have to free yourself from 30

00:33:39,530 --> 00:33:47,480
years of thinking that's the way how a

00:33:42,650 --> 00:33:51,020
UNIX or Linux is and and well after

00:33:47,480 --> 00:33:54,350
seeing that presentation and we've been

00:33:51,020 --> 00:33:59,450
thinking about that for nearly a year so

00:33:54,350 --> 00:34:01,310
and then it's starting to try it may be

00:33:59,450 --> 00:34:15,590
time for one last question that doesn't

00:34:01,310 --> 00:34:18,730
have sub questions yes hello thanks for

00:34:15,590 --> 00:34:22,670
the presentation I want to ask you about

00:34:18,730 --> 00:34:24,800
the emerge givers in Gen 2 compared to

00:34:22,670 --> 00:34:29,140
the module system that alcohol showed

00:34:24,800 --> 00:34:31,550
like how do you compare them and I think

00:34:29,140 --> 00:34:34,940
there's nothing to compare really

00:34:31,550 --> 00:34:39,440
because the whole emerge ecosystem is

00:34:34,940 --> 00:34:41,710
solely about installing packages and not

00:34:39,440 --> 00:34:47,980
really about doing service configuration

00:34:41,710 --> 00:34:54,710
so the whole mixes module systems is one

00:34:47,980 --> 00:34:55,930
abstraction layer up so did that answer

00:34:54,710 --> 00:35:00,440
your question

00:34:55,930 --> 00:35:04,010
not really ok perhaps have a personal

00:35:00,440 --> 00:35:06,110
talk yeah already yeah you can you can

00:35:04,010 --> 00:35:08,540
find him afterwards during what comes up

00:35:06,110 --> 00:35:09,950
next which is the next coffee break so a

00:35:08,540 --> 00:35:11,670
small round of applause again please for

00:35:09,950 --> 00:35:21,290
Chris and in this great job thank you

00:35:11,670 --> 00:35:21,290

YouTube URL: https://www.youtube.com/watch?v=5GtOAaqqNGU


