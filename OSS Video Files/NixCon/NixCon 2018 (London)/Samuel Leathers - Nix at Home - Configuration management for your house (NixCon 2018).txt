Title: Samuel Leathers - Nix at Home - Configuration management for your house (NixCon 2018)
Publication date: 2018-10-27
Playlist: NixCon 2018 (London)
Description: 
	My talk I'm proposing is on how to use nix at home in a variety of different ways. We'll start with the basics, a single git repository with multiple machine configurations cloned to /etc/nixos. From there we'll talk about how to deploy machines using nixops with the none backend, specifically in the context of a home router machine with multiple interfaces running all the basic services needed for a secure usable home network. From their we'll foray into how nixos generations works under the hood a bit and talk about IOHK's work at making a remote deployable mac system using nix-darwin, as well as some custom code I wrote that allows you to run nix systemd services (example being prometheus node exporter) on any linux system. We'll wrap the talk up with some discussion about using nix for home automation and monitoring as well as a chance for Q&A. --- Bio: I've been involved with the nix community for a little over a year. I help out on IRC whenever I have a chance (disasm). I work on the devops team of IOHK using nix and haskell on a daily basis. I've been using nixops to deploy my main home router for a little over 6 months, and have been using custom haskell to deploy my mac systems using nix-darwin for about 3 months.
Captions: 
	00:00:00,030 --> 00:00:04,470
all righty so it's time for the last

00:00:02,760 --> 00:00:07,649
talk of the day and so we've already

00:00:04,470 --> 00:00:10,769
heard about like Nick saw set scale and

00:00:07,649 --> 00:00:13,230
deploying to large physics things and

00:00:10,769 --> 00:00:15,199
God knows what but Samuel is actually

00:00:13,230 --> 00:00:20,539
going to talk about Nick's at home

00:00:15,199 --> 00:00:22,880
configuring Nick's for your laptop and

00:00:20,539 --> 00:00:30,060
yeah

00:00:22,880 --> 00:00:33,690
hello everyone I'm Samuel leathers I

00:00:30,060 --> 00:00:36,000
work at i/o HK I'm a senior DevOps

00:00:33,690 --> 00:00:37,950
engineer there and I will be talking

00:00:36,000 --> 00:00:39,750
about Nick's at home configuration

00:00:37,950 --> 00:00:42,090
management for your house or I like to

00:00:39,750 --> 00:00:45,750
subtitle it how I use enterprise level

00:00:42,090 --> 00:00:46,730
tools to have sanity at home credit

00:00:45,750 --> 00:00:51,239
where credit is due

00:00:46,730 --> 00:00:53,670
Graham Kristensen and clever helped me

00:00:51,239 --> 00:00:56,850
out a lot with getting this in the state

00:00:53,670 --> 00:00:58,739
it is now so thank you very much for all

00:00:56,850 --> 00:01:01,469
your help over the last couple years

00:00:58,739 --> 00:01:04,140
getting this repo where it is

00:01:01,469 --> 00:01:06,600
so why Nicks is great for home devices

00:01:04,140 --> 00:01:09,119
most of us don't have dedicated test

00:01:06,600 --> 00:01:10,920
networks to test changes out break it

00:01:09,119 --> 00:01:14,010
just scary with anything else with

00:01:10,920 --> 00:01:16,320
Nick's just roll back and it's free and

00:01:14,010 --> 00:01:20,670
easy ci to notify you when things break

00:01:16,320 --> 00:01:22,830
before you deploy so types of

00:01:20,670 --> 00:01:26,220
configuration management with Nix this

00:01:22,830 --> 00:01:30,150
is how many of you actually use Nick's

00:01:26,220 --> 00:01:32,340
at home almost everyone okay so you

00:01:30,150 --> 00:01:34,860
probably all know all this stuff so I'll

00:01:32,340 --> 00:01:38,100
run through it pretty quickly but on a

00:01:34,860 --> 00:01:41,670
laptop you have a few options you can do

00:01:38,100 --> 00:01:43,890
Nick so us rebuild switch from a git

00:01:41,670 --> 00:01:46,380
repo cloned Etsy mix OS and then just

00:01:43,890 --> 00:01:47,820
manage all your stuff using git that's

00:01:46,380 --> 00:01:49,350
nice but what if you have two laptops

00:01:47,820 --> 00:01:53,490
and you want to share stuff between

00:01:49,350 --> 00:01:56,969
those you can do a NYX ops deploy from

00:01:53,490 --> 00:01:59,219
git repository cloned anywhere so you

00:01:56,969 --> 00:02:01,409
can clone in your home directory and do

00:01:59,219 --> 00:02:05,640
Nick's ops deploy to your local host or

00:02:01,409 --> 00:02:07,439
to other servers in your house but you

00:02:05,640 --> 00:02:11,520
still run into the state issue that was

00:02:07,439 --> 00:02:13,770
mentioned earlier with Nick's ops where

00:02:11,520 --> 00:02:15,420
you can only do it from one machine

00:02:13,770 --> 00:02:17,790
at home that's usually not too big of a

00:02:15,420 --> 00:02:19,950
problem though and then what if you have

00:02:17,790 --> 00:02:21,510
OS X machines and you want to remote

00:02:19,950 --> 00:02:24,270
deploy those because who wants to

00:02:21,510 --> 00:02:28,890
actually log into an OS X machine and

00:02:24,270 --> 00:02:30,660
run Nix Darwin rebuild not me so and

00:02:28,890 --> 00:02:33,210
then what if you have other Linux

00:02:30,660 --> 00:02:36,600
systems are not Nix OS but you really

00:02:33,210 --> 00:02:39,420
want to run something consistently using

00:02:36,600 --> 00:02:43,620
next OS on it so like if you want to run

00:02:39,420 --> 00:02:45,480
prometheus node exporter on CentOS but

00:02:43,620 --> 00:02:47,430
you don't really want to have to deal

00:02:45,480 --> 00:02:49,770
with the hassle of updating young

00:02:47,430 --> 00:02:51,390
packages and everything so all those

00:02:49,770 --> 00:02:56,190
things we're gonna be talking about here

00:02:51,390 --> 00:02:58,590
today so for laptops managed locally we

00:02:56,190 --> 00:03:01,470
want to share some configuration we want

00:02:58,590 --> 00:03:03,120
some stuff specific per laptop and we

00:03:01,470 --> 00:03:05,820
want to be able to rebuild a laptop

00:03:03,120 --> 00:03:08,040
quickly or spin up a new one and we

00:03:05,820 --> 00:03:10,230
usually have bleeding edge software here

00:03:08,040 --> 00:03:12,690
some of you might not I usually run Nix

00:03:10,230 --> 00:03:14,660
OS unstable on my laptop with some

00:03:12,690 --> 00:03:19,530
custom commits cherry-picked

00:03:14,660 --> 00:03:22,920
that are not on my not in yet sometimes

00:03:19,530 --> 00:03:25,610
from pull requests or something and we

00:03:22,920 --> 00:03:29,220
want to easily test different channels

00:03:25,610 --> 00:03:33,390
at the same time so here's how I kind of

00:03:29,220 --> 00:03:34,740
do it let's see next OS that's where all

00:03:33,390 --> 00:03:43,820
your configurations go

00:03:34,740 --> 00:03:43,820
that's just a is it not going oh no

00:03:50,850 --> 00:03:53,600
Thanks

00:04:20,510 --> 00:04:29,090
there now we're gone okay so how I do it

00:04:25,880 --> 00:04:31,310
at the neck so s is a clone of my

00:04:29,090 --> 00:04:33,470
network repo on my github repository

00:04:31,310 --> 00:04:35,030
these slides will be shared later if you

00:04:33,470 --> 00:04:37,190
want to look at that there's plenty of

00:04:35,030 --> 00:04:39,790
good stuff in there and I'm open to any

00:04:37,190 --> 00:04:41,840
questions later about it for

00:04:39,790 --> 00:04:44,540
configuration not Nix I actually do a

00:04:41,840 --> 00:04:47,840
symlink to machine slash hostname mix so

00:04:44,540 --> 00:04:49,460
I can have the same git repository clone

00:04:47,840 --> 00:04:51,230
to multiple hosts that have different

00:04:49,460 --> 00:04:52,970
configurations and hardware

00:04:51,230 --> 00:04:54,710
configurations I do the same thing

00:04:52,970 --> 00:04:58,790
it's a symlink to hardware -

00:04:54,710 --> 00:05:01,670
configuration / hostname mix if I want

00:04:58,790 --> 00:05:04,850
to share stuff between modules I have a

00:05:01,670 --> 00:05:07,010
modules directory that contains profiles

00:05:04,850 --> 00:05:09,170
roles and custom services I'll talk more

00:05:07,010 --> 00:05:11,870
about that a little later

00:05:09,170 --> 00:05:14,960
I include it with custom modules equals

00:05:11,870 --> 00:05:16,940
import modules module list nix and then

00:05:14,960 --> 00:05:19,390
custom modules is added to the imports

00:05:16,940 --> 00:05:22,700
attribute in the configuration next file

00:05:19,390 --> 00:05:25,310
after defining a profile I can just do

00:05:22,700 --> 00:05:27,500
profiles dot them dot enable equals true

00:05:25,310 --> 00:05:29,240
and now I have my special vim

00:05:27,500 --> 00:05:35,060
configuration that I want on all my

00:05:29,240 --> 00:05:37,160
systems for public shared content I just

00:05:35,060 --> 00:05:40,070
create a Nicks file called shared nicks

00:05:37,160 --> 00:05:42,380
that just has content in it so it's just

00:05:40,070 --> 00:05:44,510
a huge attribute set so I put things

00:05:42,380 --> 00:05:47,150
like my home CA certificate there and my

00:05:44,510 --> 00:05:52,460
public SSH keys something that I don't

00:05:47,150 --> 00:05:55,070
care being in the Internet where

00:05:52,460 --> 00:05:57,200
everyone can see it but it's still

00:05:55,070 --> 00:06:00,800
something I want to split across

00:05:57,200 --> 00:06:02,630
multiple things but what about the

00:06:00,800 --> 00:06:06,400
secret stuff like the passwords you

00:06:02,630 --> 00:06:09,980
don't want everyone to know so I create

00:06:06,400 --> 00:06:10,850
it I can get ignore I created a secret

00:06:09,980 --> 00:06:14,330
snicks

00:06:10,850 --> 00:06:16,880
file in the same format as shared Nicks

00:06:14,330 --> 00:06:20,930
and then I add a layer of misdirection

00:06:16,880 --> 00:06:23,540
for CI using load - secrets nix which

00:06:20,930 --> 00:06:25,700
just does a built-ins path exists

00:06:23,540 --> 00:06:28,370
secrets nixed and import it otherwise

00:06:25,700 --> 00:06:30,140
use this other attribute set that

00:06:28,370 --> 00:06:32,000
basically usually defines empty strings

00:06:30,140 --> 00:06:33,889
for everything so Hydra continues to

00:06:32,000 --> 00:06:36,650
work

00:06:33,889 --> 00:06:39,469
for home deployments so like I have a

00:06:36,650 --> 00:06:42,919
server and my main router at home both

00:06:39,469 --> 00:06:44,930
run NICs OS so that's easy I just use

00:06:42,919 --> 00:06:47,150
Nix ops deploy for that I have an

00:06:44,930 --> 00:06:49,249
infrastructure dot next file that lists

00:06:47,150 --> 00:06:52,249
all my infrastructure files and you'll

00:06:49,249 --> 00:06:55,610
see that right here and then I can use

00:06:52,249 --> 00:06:57,590
the same secrets type stuff there as

00:06:55,610 --> 00:06:59,509
well as the shared stuff and the custom

00:06:57,590 --> 00:07:01,189
modules that I use on my laptops and now

00:06:59,509 --> 00:07:03,080
all that stuff is shared across all my

00:07:01,189 --> 00:07:05,930
systems so if I change it in one place

00:07:03,080 --> 00:07:08,240
it can affect everything which is great

00:07:05,930 --> 00:07:09,770
when you add a new VIN plug-in and you

00:07:08,240 --> 00:07:13,490
don't want to have to ask this h into

00:07:09,770 --> 00:07:16,789
all your servers and install it again so

00:07:13,490 --> 00:07:18,770
this is just a general mix ops configure

00:07:16,789 --> 00:07:21,349
with the network and the name of the

00:07:18,770 --> 00:07:24,229
server and the deployment this is the

00:07:21,349 --> 00:07:25,879
none type so there's no automatically

00:07:24,229 --> 00:07:29,000
creating it because it's a physical

00:07:25,879 --> 00:07:31,400
thing at home and then I can add

00:07:29,000 --> 00:07:34,039
deployment keys in for secrets that I

00:07:31,400 --> 00:07:35,990
don't want to be living on the server

00:07:34,039 --> 00:07:40,849
after a reboot so it has to be deployed

00:07:35,990 --> 00:07:43,759
again to create the deployment we use

00:07:40,849 --> 00:07:45,979
the NYX apps create command and you can

00:07:43,759 --> 00:07:49,039
basically give the deployment a name and

00:07:45,979 --> 00:07:52,550
then you can specify I pinned the NIC

00:07:49,039 --> 00:07:55,009
speak a G's version to a specific

00:07:52,550 --> 00:08:00,229
version that one I believe it was the

00:07:55,009 --> 00:08:02,569
tip of 1809 when I created the slide

00:08:00,229 --> 00:08:05,779
deck here but basically you can specify

00:08:02,569 --> 00:08:08,899
- I Nix pkg is equals and then the path

00:08:05,779 --> 00:08:10,909
to the tarball on github and then that

00:08:08,899 --> 00:08:13,849
will pin it so you have to run Nick's

00:08:10,909 --> 00:08:16,099
ops modify then which is shown just

00:08:13,849 --> 00:08:18,469
below that to update it to a new version

00:08:16,099 --> 00:08:21,259
later and then you just do next ops

00:08:18,469 --> 00:08:25,219
deploy home that's simple enough deploy

00:08:21,259 --> 00:08:27,949
- d home and then for remote OSX

00:08:25,219 --> 00:08:29,839
deployments I don't use OSX very often

00:08:27,949 --> 00:08:34,190
even though this is a Mac it's running

00:08:29,839 --> 00:08:36,050
Nixa less like 99.999% of the time I do

00:08:34,190 --> 00:08:37,610
have another laptop at home that's a

00:08:36,050 --> 00:08:39,320
MacBook Air that's just thrown in the

00:08:37,610 --> 00:08:42,169
closet somewhere that I don't want to

00:08:39,320 --> 00:08:44,060
climb over everything to get to or I

00:08:42,169 --> 00:08:46,370
don't really want to BNC into it either

00:08:44,060 --> 00:08:49,670
or SSH and Manuel

00:08:46,370 --> 00:08:51,470
run stuff so Nix Darwin is great for

00:08:49,670 --> 00:08:57,830
giving you the same configuration

00:08:51,470 --> 00:09:01,130
management on Linux on Mac OS so buddy

00:08:57,830 --> 00:09:04,089
of mine at i/o HK Rodney he's not here

00:09:01,130 --> 00:09:07,790
today but he created a really cool tool

00:09:04,089 --> 00:09:10,130
for us there that basically prepares a

00:09:07,790 --> 00:09:11,810
system using Haskell installing Nix

00:09:10,130 --> 00:09:14,210
installing next Darwin and everything

00:09:11,810 --> 00:09:17,600
and then runs deployments remotely using

00:09:14,210 --> 00:09:21,170
turtle SSH and I did some improvements

00:09:17,600 --> 00:09:25,880
to that I won't go into the code here as

00:09:21,170 --> 00:09:28,370
this talk isn't about Haskell but Nix so

00:09:25,880 --> 00:09:30,620
remote OSX deployments the premise is to

00:09:28,370 --> 00:09:32,600
build two tools one called prepare and

00:09:30,620 --> 00:09:34,880
one called deploy these two tools

00:09:32,600 --> 00:09:37,430
remotely SSH into the host and handle

00:09:34,880 --> 00:09:40,190
the Nix Darwin stuff prepare installs

00:09:37,430 --> 00:09:43,220
nix and multi-user and deploys deploy

00:09:40,190 --> 00:09:45,620
deploys new changes a caveat here is Nix

00:09:43,220 --> 00:09:47,839
Darwin and Nix OS modules don't always

00:09:45,620 --> 00:09:50,200
have the same design so some breakage

00:09:47,839 --> 00:09:53,570
may occur if you share configuration

00:09:50,200 --> 00:09:55,550
code is in Nix Darwin tools in my repo

00:09:53,570 --> 00:09:57,920
the prepare script is slightly outdated

00:09:55,550 --> 00:10:00,320
if you want to do this I highly

00:09:57,920 --> 00:10:02,300
recommend looking at the IO HK version

00:10:00,320 --> 00:10:05,300
of this stuff even though it has a few

00:10:02,300 --> 00:10:07,910
io HK specific things in there it

00:10:05,300 --> 00:10:09,589
actually installs with multi-user now if

00:10:07,910 --> 00:10:11,959
prepare I haven't updated that in my

00:10:09,589 --> 00:10:14,150
repo because I've ran repairs since the

00:10:11,959 --> 00:10:18,050
default changed to using single user on

00:10:14,150 --> 00:10:21,110
OS X again and it requires an OSX build

00:10:18,050 --> 00:10:23,120
slave to build the tool running prepare

00:10:21,110 --> 00:10:25,070
will nuke all traces of Nix from the

00:10:23,120 --> 00:10:27,589
remote system so don't do this on a

00:10:25,070 --> 00:10:32,720
system that you've like very carefully

00:10:27,589 --> 00:10:35,510
crafted your pet on and for deployments

00:10:32,720 --> 00:10:37,760
you just do Nix build - a tools and then

00:10:35,510 --> 00:10:39,500
you can run result bin prepare Mac and

00:10:37,760 --> 00:10:43,130
then the IP address of it and then

00:10:39,500 --> 00:10:45,170
result bin deploy rule role and then the

00:10:43,130 --> 00:10:47,029
role is just in Nick's file that's like

00:10:45,170 --> 00:10:52,310
a configuration next file that you'd

00:10:47,029 --> 00:10:54,200
have on your Darwin system and yeah and

00:10:52,310 --> 00:10:57,230
then you can use the same modules you're

00:10:54,200 --> 00:10:59,890
using for Nix OS as long as you

00:10:57,230 --> 00:11:03,950
them in a way that they work on both

00:10:59,890 --> 00:11:06,200
Darwin and Linux for Linux deployments

00:11:03,950 --> 00:11:08,360
this is kind of cool but I kind of

00:11:06,200 --> 00:11:10,280
abandon it because everything runs next

00:11:08,360 --> 00:11:12,560
to us now at home so I don't have much

00:11:10,280 --> 00:11:14,120
use for it anymore but I wanted to share

00:11:12,560 --> 00:11:15,770
this anyways because I'm sure there's a

00:11:14,120 --> 00:11:18,080
lot of people here that might benefit

00:11:15,770 --> 00:11:20,540
from it and the initial premise was to

00:11:18,080 --> 00:11:23,900
set up prometheus new exporter running

00:11:20,540 --> 00:11:29,870
on non Nix OS Linux systems like Santa 7

00:11:23,900 --> 00:11:32,780
and to do this I basically it looks like

00:11:29,870 --> 00:11:36,500
a normal mix OS configuration that you'd

00:11:32,780 --> 00:11:39,710
run Nick so us rebuild on but you do an

00:11:36,500 --> 00:11:42,980
import of Nick's pkg znik so s and then

00:11:39,710 --> 00:11:44,930
all only supports services so it only

00:11:42,980 --> 00:11:47,720
does system D services it doesn't do

00:11:44,930 --> 00:11:50,060
users this is probably good as it would

00:11:47,720 --> 00:11:51,770
probably break other things on the

00:11:50,060 --> 00:11:53,960
system if you started trying to mess

00:11:51,770 --> 00:11:55,760
with Etsy password and whatnot on a

00:11:53,960 --> 00:11:57,050
system that's being managed some other

00:11:55,760 --> 00:12:00,080
way

00:11:57,050 --> 00:12:02,480
and then you just specify your services

00:12:00,080 --> 00:12:05,930
out and then there's this recursive

00:12:02,480 --> 00:12:10,520
attribute set that does some building

00:12:05,930 --> 00:12:17,530
env stuff and max the paths to it and it

00:12:10,520 --> 00:12:20,570
literally dumps out a so you can then

00:12:17,530 --> 00:12:22,340
Nix build that on the system and if you

00:12:20,570 --> 00:12:23,900
do find dot slash results you'll see

00:12:22,340 --> 00:12:28,370
everything in there all you're gonna see

00:12:23,900 --> 00:12:33,770
our service files and then Nick C and V

00:12:28,370 --> 00:12:36,980
- P specify where your user root is for

00:12:33,770 --> 00:12:39,440
it so in this case I have user root

00:12:36,980 --> 00:12:43,580
CentOS monitor and then I specify the

00:12:39,440 --> 00:12:45,470
file I want to install there and I

00:12:43,580 --> 00:12:48,020
specify that I want to grab the all

00:12:45,470 --> 00:12:50,390
units attribute here and then I just

00:12:48,020 --> 00:12:53,300
simile that tatsi system D system Santos

00:12:50,390 --> 00:12:55,730
monitor do systemctl daemon reload

00:12:53,300 --> 00:12:59,240
systemctl start Prometheus node exporter

00:12:55,730 --> 00:13:01,610
and I now have Prometheus node being

00:12:59,240 --> 00:13:04,070
managed with Nick's code that could be

00:13:01,610 --> 00:13:06,650
automated further using Haskell to like

00:13:04,070 --> 00:13:10,420
write a tool or Python fabric or any

00:13:06,650 --> 00:13:13,180
other automation tool that uses SSH to

00:13:10,420 --> 00:13:15,190
make this a simple process very similar

00:13:13,180 --> 00:13:19,270
to how the next Darwin stuff above was

00:13:15,190 --> 00:13:23,050
done this works I tested it before I

00:13:19,270 --> 00:13:25,660
wiped my last non ex OS system new runs

00:13:23,050 --> 00:13:27,910
of Nix env create a new generation so

00:13:25,660 --> 00:13:30,580
you can roll back with this too which is

00:13:27,910 --> 00:13:33,040
pretty cool I you really just need the

00:13:30,580 --> 00:13:34,840
Prometheus node exporter but I included

00:13:33,040 --> 00:13:37,090
other services so you can see that it's

00:13:34,840 --> 00:13:40,090
scalable and run multiple services this

00:13:37,090 --> 00:13:42,160
way to use in production like I said I'd

00:13:40,090 --> 00:13:44,530
recommend using some other deployment

00:13:42,160 --> 00:13:46,420
tool rather than just manually SSA Qing

00:13:44,530 --> 00:13:50,800
in and running Nix env that's never a

00:13:46,420 --> 00:13:52,390
good idea so the custom modules profiles

00:13:50,800 --> 00:13:55,120
and roles I said I was going to touch

00:13:52,390 --> 00:13:57,220
back on later I first used the profiles

00:13:55,120 --> 00:13:59,530
and roles design pattern with puppet in

00:13:57,220 --> 00:14:01,300
a previous job if anyone's used puppet

00:13:59,530 --> 00:14:05,020
they've probably heard about the

00:14:01,300 --> 00:14:06,910
profiles and roles design pattern when

00:14:05,020 --> 00:14:09,070
used properly each system should only

00:14:06,910 --> 00:14:11,290
have one role and a role should only

00:14:09,070 --> 00:14:14,260
define profiles my repo does not follow

00:14:11,290 --> 00:14:17,170
this at all the initial code came from a

00:14:14,260 --> 00:14:18,520
repo by offline hacker but it's pretty

00:14:17,170 --> 00:14:20,800
different from his original

00:14:18,520 --> 00:14:23,140
implementation in essence both profiles

00:14:20,800 --> 00:14:25,810
and roles are just Nix OS modules with a

00:14:23,140 --> 00:14:28,120
different prefix I don't use roles a lot

00:14:25,810 --> 00:14:30,100
at all and my repo I have a base role

00:14:28,120 --> 00:14:31,690
that doesn't have an enable option for

00:14:30,100 --> 00:14:34,240
things I want on any system but that's

00:14:31,690 --> 00:14:36,760
pretty much all I use roles for profiles

00:14:34,240 --> 00:14:38,680
are glue around Nix OS configuration so

00:14:36,760 --> 00:14:41,260
for example something like profiles vim

00:14:38,680 --> 00:14:44,140
and Abel equals true abstracts away lots

00:14:41,260 --> 00:14:46,660
of em configuration set up and most

00:14:44,140 --> 00:14:48,220
profiles have an enable option if you

00:14:46,660 --> 00:14:50,170
don't have one it's gonna be on all your

00:14:48,220 --> 00:14:54,490
systems which is probably not what you

00:14:50,170 --> 00:14:57,100
want and my goal here is to clean up all

00:14:54,490 --> 00:14:59,140
the stuff and my legacy in Nix configs

00:14:57,100 --> 00:15:01,600
directory which is kind of a mess and

00:14:59,140 --> 00:15:03,490
have just like the bare minimum and

00:15:01,600 --> 00:15:06,670
nicks configs and everything else is

00:15:03,490 --> 00:15:11,140
just profiles but I just haven't had

00:15:06,670 --> 00:15:12,880
time to play with it yet and these can

00:15:11,140 --> 00:15:14,740
be shared across all the Linux OSX

00:15:12,880 --> 00:15:17,410
systems so you might have to do some

00:15:14,740 --> 00:15:19,240
conditional things based on how next

00:15:17,410 --> 00:15:20,170
darwin does something and Nix OS does

00:15:19,240 --> 00:15:22,690
something

00:15:20,170 --> 00:15:24,820
and then most importantly we need CI to

00:15:22,690 --> 00:15:29,380
test everything so Hydra to test

00:15:24,820 --> 00:15:31,870
everything I define a NYX OS func stable

00:15:29,380 --> 00:15:35,620
Nixa west bunk unstable and annexed

00:15:31,870 --> 00:15:39,820
darwin func unstable that point to these

00:15:35,620 --> 00:15:41,560
that are defined in Hydra if you want to

00:15:39,820 --> 00:15:45,490
see how they're defined in Hydra you can

00:15:41,560 --> 00:15:49,300
look my Hydra configs repo under the

00:15:45,490 --> 00:15:50,920
same username on github and then Nix

00:15:49,300 --> 00:15:56,080
Darwin tools is what I told you about

00:15:50,920 --> 00:15:58,300
with the tools to actually deploy and so

00:15:56,080 --> 00:16:02,860
those are all tested as well so when

00:15:58,300 --> 00:16:05,890
they break from some LTS upgrade and

00:16:02,860 --> 00:16:08,320
latest Nix I know about it and this will

00:16:05,890 --> 00:16:11,770
actually test with every single commit

00:16:08,320 --> 00:16:18,430
that hits Nicholas unstable for serve

00:16:11,770 --> 00:16:23,050
and the Mac one for all the unstable

00:16:18,430 --> 00:16:27,250
commits and for my servers op Tina and

00:16:23,050 --> 00:16:28,900
portal it will hit 1809 any commits that

00:16:27,250 --> 00:16:31,330
hit it it will rerun and make sure

00:16:28,900 --> 00:16:34,090
everything's going so I know as soon as

00:16:31,330 --> 00:16:37,690
something upstream breaks something that

00:16:34,090 --> 00:16:40,240
I did that I need to fix and some other

00:16:37,690 --> 00:16:42,700
cool features about my network repo that

00:16:40,240 --> 00:16:45,850
I not going to get into a whole lot of

00:16:42,700 --> 00:16:47,890
detail here but I have full I pick C

00:16:45,850 --> 00:16:49,600
Network booting thanks to clever he

00:16:47,890 --> 00:16:52,330
really helped me with that one I have

00:16:49,600 --> 00:16:54,400
full IP v6 compatibility on my router my

00:16:52,330 --> 00:16:57,220
routers fully running NICs OS and I have

00:16:54,400 --> 00:17:00,040
wired guard VPN tunnels Open VPN tunnels

00:16:57,220 --> 00:17:01,630
Promethea smart monitoring and I had an

00:17:00,040 --> 00:17:04,240
elk stack for central logging by

00:17:01,630 --> 00:17:06,730
disabled it because of lack of resources

00:17:04,240 --> 00:17:09,310
on my server and just like running out

00:17:06,730 --> 00:17:12,030
of memory into space and it was like I

00:17:09,310 --> 00:17:16,000
don't need to keep all my logs anymore

00:17:12,030 --> 00:17:19,540
that is pretty much my talk here I can

00:17:16,000 --> 00:17:21,100
jump in I see we're at about 16 well no

00:17:19,540 --> 00:17:23,410
we're not at 16 minutes because we

00:17:21,100 --> 00:17:28,480
refresh this I don't remember how far we

00:17:23,410 --> 00:17:30,790
are okay so we can jump in here and I

00:17:28,480 --> 00:17:31,820
can walk you through some of the stuff

00:17:30,790 --> 00:17:37,070
I've done

00:17:31,820 --> 00:17:40,220
and my repo that requires me to mirror

00:17:37,070 --> 00:17:43,030
this though no I had a different plan

00:17:40,220 --> 00:17:43,030
that's right

00:18:20,919 --> 00:18:27,810
team accession that's not good

00:18:24,610 --> 00:18:27,810
[Music]

00:18:28,450 --> 00:18:33,820
it's just exit this one and try Tmax

00:18:31,429 --> 00:18:33,820
attached

00:18:35,590 --> 00:18:38,520
there we go

00:18:47,740 --> 00:18:52,710
typing one-handed and holding a

00:18:49,420 --> 00:18:52,710
microphone is very difficult

00:19:05,550 --> 00:19:10,300
let's look at the router configured bit

00:19:08,290 --> 00:19:16,240
here because this might be interesting

00:19:10,300 --> 00:19:19,480
to some people that want to there we go

00:19:16,240 --> 00:19:21,970
that might be interesting to some people

00:19:19,480 --> 00:19:25,870
that want to run a router at home so we

00:19:21,970 --> 00:19:28,240
can look at that and the default dot

00:19:25,870 --> 00:19:29,650
NICs I basically define some internal

00:19:28,240 --> 00:19:33,820
interfaces

00:19:29,650 --> 00:19:35,770
these are VLANs on this interface here

00:19:33,820 --> 00:19:37,770
and then I have some wire guard stuff

00:19:35,770 --> 00:19:42,100
and those are my VPNs

00:19:37,770 --> 00:19:44,650
one of the cool things here is the eye

00:19:42,100 --> 00:19:50,080
pixie stuff I mentioned and this

00:19:44,650 --> 00:19:53,940
basically creates a TFTP route that Ipek

00:19:50,080 --> 00:19:57,160
see can boot and builds a NICs OS module

00:19:53,940 --> 00:20:03,160
NICs OS system that basically can be

00:19:57,160 --> 00:20:05,440
booted over the network and then I

00:20:03,160 --> 00:20:08,350
define interfaces here for the firewall

00:20:05,440 --> 00:20:11,440
a lot of this stuff came from Graham I

00:20:08,350 --> 00:20:15,160
have some cool extra commands here for

00:20:11,440 --> 00:20:18,460
like drop port no log except poured on

00:20:15,160 --> 00:20:23,700
interface board port to host and then I

00:20:18,460 --> 00:20:26,890
can basically just map across ports and

00:20:23,700 --> 00:20:30,720
then yeah wire garden interfaces those

00:20:26,890 --> 00:20:30,720
are public keys don't worry about it

00:20:33,120 --> 00:20:38,100
does anyone have any specific questions

00:20:35,590 --> 00:20:38,100
about this

00:20:40,549 --> 00:20:48,019
my router does not boot from the network

00:20:44,379 --> 00:20:53,799
my router is running a TFTP server so i

00:20:48,019 --> 00:20:57,289
can boot any laptop over the network so

00:20:53,799 --> 00:20:58,849
it's very useful for installing NICs on

00:20:57,289 --> 00:21:02,509
things I've been playing with trying to

00:20:58,849 --> 00:21:03,979
get Raspberry Pi to network boot as well

00:21:02,509 --> 00:21:11,209
but that's a little more difficult

00:21:03,979 --> 00:21:14,029
because you have to actually disable

00:21:11,209 --> 00:21:16,279
some GPIO pins Michael can tell you more

00:21:14,029 --> 00:21:20,149
about it later if you're interested he

00:21:16,279 --> 00:21:23,599
was showing me some of it but yeah my

00:21:20,149 --> 00:21:26,469
router does not network boot it's it has

00:21:23,599 --> 00:21:29,269
a solid state hard drive in it and it

00:21:26,469 --> 00:21:29,859
has monitoring on it and all that good

00:21:29,269 --> 00:21:33,489
stuff

00:21:29,859 --> 00:21:33,489
any other questions

00:21:37,010 --> 00:21:40,410
well I guess we can all go drink beer

00:21:39,860 --> 00:21:43,420
then

00:21:40,410 --> 00:21:51,089
[Laughter]

00:21:43,420 --> 00:21:51,089

YouTube URL: https://www.youtube.com/watch?v=0pqdOnQKMKE


