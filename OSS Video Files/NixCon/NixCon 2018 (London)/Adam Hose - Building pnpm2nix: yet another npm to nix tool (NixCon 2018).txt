Title: Adam Hose - Building pnpm2nix: yet another npm to nix tool (NixCon 2018)
Publication date: 2018-11-06
Playlist: NixCon 2018 (London)
Description: 
	There are already plenty of node package managers so why yet another one? This talk aims to give you an overview of the current npm-to-nix ecosystem, what tools there are, what the strengths/shortcomings of each one have and what pnpm is all about and how it pertains to nix. After that I will be talking you through what goes in to building pnpm2nix, what problems I had along the way and how nix/nixpkgs could improve to help such efforts along. --- Bio: I love building software
Captions: 
	00:00:00,000 --> 00:00:05,609
okay so next up is Adam and Adam is

00:00:02,639 --> 00:00:08,069
going to tell us about yet another NPM

00:00:05,609 --> 00:00:09,540
to next tool and I'm sure that by a the

00:00:08,069 --> 00:00:11,400
end of the talk we're going to be

00:00:09,540 --> 00:00:20,789
convinced that we need yet another one

00:00:11,400 --> 00:00:23,369
so give it up for Adam so I'd like to

00:00:20,789 --> 00:00:27,599
just start by introducing myself

00:00:23,369 --> 00:00:30,300
I joined mixer West back in 2017 after

00:00:27,599 --> 00:00:32,070
I've done a lot of contributions for a

00:00:30,300 --> 00:00:38,340
while I've been doing a lot of Katie

00:00:32,070 --> 00:00:44,940
packaging security fixes and also sadly

00:00:38,340 --> 00:00:46,559
taking care of nodejs for a boil so I

00:00:44,940 --> 00:00:48,590
have some goals with this talk it so

00:00:46,559 --> 00:00:52,020
introduced the node.js packaging

00:00:48,590 --> 00:00:55,079
ecosystem and teach you a little bit

00:00:52,020 --> 00:00:57,379
more about the module system how to the

00:00:55,079 --> 00:01:00,570
different packaging package managers and

00:00:57,379 --> 00:01:03,420
what I think to be the best one that has

00:01:00,570 --> 00:01:05,549
a lot of lot in common with Nix and I

00:01:03,420 --> 00:01:08,400
would like to inspire you to make your

00:01:05,549 --> 00:01:13,470
own line to nix tooling in pure Nix

00:01:08,400 --> 00:01:17,430
oh this looked different on my laptop

00:01:13,470 --> 00:01:22,350
before anyway so a short introduction to

00:01:17,430 --> 00:01:23,850
what what a no GS module is so there are

00:01:22,350 --> 00:01:25,979
a bunch of different modules but I'm

00:01:23,850 --> 00:01:29,130
gonna be talk module types but I'm gonna

00:01:25,979 --> 00:01:34,619
be talking about it's the one way where

00:01:29,130 --> 00:01:37,890
you do require and without a path so one

00:01:34,619 --> 00:01:42,030
nice thing I think about nodejs

00:01:37,890 --> 00:01:44,130
in particular is how the require is just

00:01:42,030 --> 00:01:46,200
another function it's not like a

00:01:44,130 --> 00:01:48,090
language construct like in Python where

00:01:46,200 --> 00:01:50,759
you have import it's not very

00:01:48,090 --> 00:01:52,560
predictable you hear it's just a normal

00:01:50,759 --> 00:01:55,560
variable assignment it's a function

00:01:52,560 --> 00:02:00,010
returning returning a module

00:01:55,560 --> 00:02:04,750
so what happens when you do require

00:02:00,010 --> 00:02:06,550
module well no TS walks first checks in

00:02:04,750 --> 00:02:09,509
your local node modules path which

00:02:06,550 --> 00:02:12,070
everyone has seen before I guess it's

00:02:09,509 --> 00:02:13,870
not so well known that it also works

00:02:12,070 --> 00:02:16,540
recursively upwards in the directory

00:02:13,870 --> 00:02:21,040
tree until it finds another node modules

00:02:16,540 --> 00:02:24,130
and thirdly it falls back to the node

00:02:21,040 --> 00:02:25,390
path environment variable we can use

00:02:24,130 --> 00:02:29,500
this with some interesting effect which

00:02:25,390 --> 00:02:31,060
we will see later the different node

00:02:29,500 --> 00:02:34,209
package managers does different things

00:02:31,060 --> 00:02:38,110
in terms of flattening so flattening

00:02:34,209 --> 00:02:41,820
means flattening that the dependency

00:02:38,110 --> 00:02:46,269
graph into a single level of

00:02:41,820 --> 00:02:52,480
dependencies no just try to solve the

00:02:46,269 --> 00:02:54,790
issues of of deep deep nesting which

00:02:52,480 --> 00:03:01,870
doesn't work well on Windows by doing

00:02:54,790 --> 00:03:04,150
this and and also some other some other

00:03:01,870 --> 00:03:08,590
aspects which make these deep nesting

00:03:04,150 --> 00:03:11,530
not work very well the sad thing about

00:03:08,590 --> 00:03:14,110
this flattening is that it results in in

00:03:11,530 --> 00:03:16,690
impurities so if if you have it

00:03:14,110 --> 00:03:19,150
flattened dependency tree anything can

00:03:16,690 --> 00:03:21,010
require anything despite what is

00:03:19,150 --> 00:03:27,760
specified in the dependency

00:03:21,010 --> 00:03:29,290
specification which is why did they

00:03:27,760 --> 00:03:34,360
never went with this non flatten

00:03:29,290 --> 00:03:39,549
structure in NPM or yarn it's not

00:03:34,360 --> 00:03:42,310
entirely true but mostly true no js' was

00:03:39,549 --> 00:03:46,390
released back in 2009 back then it did

00:03:42,310 --> 00:03:50,680
not have a package manager and I was

00:03:46,390 --> 00:03:52,890
seen a bit of a a bit seen as a bit of a

00:03:50,680 --> 00:03:52,890
joke

00:03:53,400 --> 00:04:02,379
mmm NPM entered the scene in 2010 it has

00:03:58,659 --> 00:04:05,859
resulted in no js' becoming extremely

00:04:02,379 --> 00:04:10,150
popular I guess most of you had some

00:04:05,859 --> 00:04:12,700
some level has to deal with that it's

00:04:10,150 --> 00:04:17,530
pretty NPM it's pretty bad in almost

00:04:12,700 --> 00:04:20,310
every way imaginable it's slow as a dog

00:04:17,530 --> 00:04:21,960
it keeps redownload independencies at

00:04:20,310 --> 00:04:25,169
all times

00:04:21,960 --> 00:04:27,699
packages are a big flat flattened mess

00:04:25,169 --> 00:04:30,490
anything can require anything when you

00:04:27,699 --> 00:04:34,509
you don't have any any idea of what's

00:04:30,490 --> 00:04:36,669
actually gonna end up in your dependency

00:04:34,509 --> 00:04:41,169
when you require dependency without

00:04:36,669 --> 00:04:43,030
looking in advance they did not have

00:04:41,169 --> 00:04:45,190
integrity checking for the longest time

00:04:43,030 --> 00:04:47,349
so you had no way of making sure that

00:04:45,190 --> 00:04:50,849
what you thought you were gonna download

00:04:47,349 --> 00:04:50,849
was actually what you ended up with

00:04:52,169 --> 00:05:02,530
Santa Vanderburgh has made an amazing

00:04:55,570 --> 00:05:04,990
job on the note UNIX tool which I which

00:05:02,530 --> 00:05:08,110
is great it's extremely compatible with

00:05:04,990 --> 00:05:15,070
the with nodejs but sadly it only has

00:05:08,110 --> 00:05:18,970
cogeneration as an option which which i

00:05:15,070 --> 00:05:21,010
think is pretty sad considering that

00:05:18,970 --> 00:05:22,870
that you would now have to go through

00:05:21,010 --> 00:05:26,909
another step of generating the code

00:05:22,870 --> 00:05:26,909
before putting it into production

00:05:27,470 --> 00:05:33,500
there then a few years ago John entered

00:05:31,010 --> 00:05:37,940
the scene got extremely popular for some

00:05:33,500 --> 00:05:40,160
reason tries to solve some of the

00:05:37,940 --> 00:05:42,170
performance issues of NPM by using

00:05:40,160 --> 00:05:47,080
aggressive caching it does less

00:05:42,170 --> 00:05:49,580
flattening but still quite a lot

00:05:47,080 --> 00:05:52,840
they added lock files from the start to

00:05:49,580 --> 00:05:59,990
try to reach reproducible builds in some

00:05:52,840 --> 00:06:05,060
some at some aspects deterministic

00:05:59,990 --> 00:06:07,370
dependencies resolution so unlike NPM

00:06:05,060 --> 00:06:12,920
which that where that changed every once

00:06:07,370 --> 00:06:14,960
in a while also flattens dependencies it

00:06:12,920 --> 00:06:18,530
has a pretty pretty great next tooling

00:06:14,960 --> 00:06:21,140
made by Morty and I think Simba has also

00:06:18,530 --> 00:06:24,260
worked quite a lot on that which can

00:06:21,140 --> 00:06:26,750
either do cogeneration or do runtime

00:06:24,260 --> 00:06:30,740
generation which means ingesting the the

00:06:26,750 --> 00:06:33,290
lock and and integrity files impure

00:06:30,740 --> 00:06:35,210
Nicks it was a great source of

00:06:33,290 --> 00:06:39,680
inspiration for me how things could be

00:06:35,210 --> 00:06:42,650
and how I think most know most tooling

00:06:39,680 --> 00:06:44,420
to Nicks should work we should not have

00:06:42,650 --> 00:06:49,910
to go through this massive cogeneration

00:06:44,420 --> 00:06:54,860
step it still flattens no module sadly

00:06:49,910 --> 00:06:56,510
so it's not ideal and it doesn't pretty

00:06:54,860 --> 00:07:00,010
complex things which leads to

00:06:56,510 --> 00:07:00,010
performance not being ideal

00:07:01,210 --> 00:07:06,260
pnpn is the new kid on the block

00:07:04,220 --> 00:07:09,250
actually it's not very new it was really

00:07:06,260 --> 00:07:12,200
it was released about the same time as

00:07:09,250 --> 00:07:19,250
yarn but sadly has not seen the same

00:07:12,200 --> 00:07:21,770
level of adoption it takes an

00:07:19,250 --> 00:07:24,170
inspiration from IE d which i think a

00:07:21,770 --> 00:07:27,020
lot of you have heard about which

00:07:24,170 --> 00:07:30,020
explicitly said we take a lot of

00:07:27,020 --> 00:07:34,790
inspiration from NYX in terms of purity

00:07:30,020 --> 00:07:37,910
and the main selling point that they

00:07:34,790 --> 00:07:41,120
advertise is performance it's incredibly

00:07:37,910 --> 00:07:43,490
fast if you try to install some

00:07:41,120 --> 00:07:48,590
dependency which doesn't pull in native

00:07:43,490 --> 00:07:50,360
stuff it's in the order of seconds has

00:07:48,590 --> 00:07:53,030
quite a few things in common with NYX

00:07:50,360 --> 00:07:55,700
has a centralized store which means

00:07:53,030 --> 00:07:58,190
packages are shared if you install the

00:07:55,700 --> 00:08:01,160
same version of a package in multiple

00:07:58,190 --> 00:08:03,590
projects it keeps reusing the same files

00:08:01,160 --> 00:08:05,840
on disk it does this by heart linking

00:08:03,590 --> 00:08:07,580
and in same linking in combination

00:08:05,840 --> 00:08:12,410
depending on which file systems he used

00:08:07,580 --> 00:08:15,410
operating systems etc so you can only

00:08:12,410 --> 00:08:21,680
require what you actually actively

00:08:15,410 --> 00:08:23,600
depend upon this breaks a bunch of note

00:08:21,680 --> 00:08:27,440
packages but it's not as common as you

00:08:23,600 --> 00:08:30,310
would think it's pretty common that they

00:08:27,440 --> 00:08:32,690
include all their dependencies despite

00:08:30,310 --> 00:08:36,770
none of the tooling really thinking

00:08:32,690 --> 00:08:40,300
about that case that's not entirely true

00:08:36,770 --> 00:08:42,740
because anything can always which I

00:08:40,300 --> 00:08:45,200
learned during this anything can always

00:08:42,740 --> 00:08:49,340
require whatever is depended on by the

00:08:45,200 --> 00:08:53,750
top-level application so that that was

00:08:49,340 --> 00:08:56,810
to resolve the issues of tooling like

00:08:53,750 --> 00:08:59,360
linters having plugins and so if you

00:08:56,810 --> 00:09:01,280
install a plugin into your top level the

00:08:59,360 --> 00:09:04,580
top level application that needs to be

00:09:01,280 --> 00:09:09,160
available despite the application like

00:09:04,580 --> 00:09:09,160
es lint not depending directly on it

00:09:11,540 --> 00:09:19,980
so the store structure of PNP M s is

00:09:16,190 --> 00:09:24,720
abusing this this fact that no js' is

00:09:19,980 --> 00:09:28,350
working recursively upwards the tree so

00:09:24,720 --> 00:09:32,250
what happens is that when something has

00:09:28,350 --> 00:09:36,240
symlink york's for example into its node

00:09:32,250 --> 00:09:40,170
modules nodejs

00:09:36,240 --> 00:09:42,180
walks upwards until it finds this what

00:09:40,170 --> 00:09:44,010
this node modules which includes yarks

00:09:42,180 --> 00:09:47,340
plus siblings - all of its dependencies

00:09:44,010 --> 00:09:50,490
which means that it's kind of short

00:09:47,340 --> 00:09:53,010
circuit at that point in the graph in

00:09:50,490 --> 00:09:56,000
not in your directory structure and not

00:09:53,010 --> 00:09:59,550
go looking for any other dependencies

00:09:56,000 --> 00:10:08,000
this means that we can get purity purity

00:09:59,550 --> 00:10:12,090
at runtime when we do require we have

00:10:08,000 --> 00:10:14,910
something akin to overrides but they can

00:10:12,090 --> 00:10:18,360
only do graph rewriting so let's say a

00:10:14,910 --> 00:10:20,880
package called MS rest assure is missing

00:10:18,360 --> 00:10:23,490
a dependency on a package then we can

00:10:20,880 --> 00:10:30,030
rewrite the graph and include that

00:10:23,490 --> 00:10:32,010
dependency this happens more rarely than

00:10:30,030 --> 00:10:34,260
I thought it would so I do not even

00:10:32,010 --> 00:10:36,300
really crazy project have to use

00:10:34,260 --> 00:10:42,290
overrides much and the nice thing it is

00:10:36,300 --> 00:10:42,290
goes into the dependency lock file

00:10:42,600 --> 00:10:48,300
so I when I made my own next tooling I

00:10:45,720 --> 00:10:51,330
did not have to think about supporting

00:10:48,300 --> 00:10:54,470
graph rewriting or overrides because

00:10:51,330 --> 00:10:54,470
that was already implicit

00:10:57,540 --> 00:11:07,420
there was a lot of hard points about

00:11:01,600 --> 00:11:09,670
making this tooling one of the hardest

00:11:07,420 --> 00:11:13,750
is that the specifications in nodejs

00:11:09,670 --> 00:11:15,850
are all wrong they'll they say that you

00:11:13,750 --> 00:11:18,280
don't you can't combine the two

00:11:15,850 --> 00:11:20,740
attributes like bin and bins in your

00:11:18,280 --> 00:11:23,050
package JSON files but in in reality

00:11:20,740 --> 00:11:29,560
there are a lot of packages depending on

00:11:23,050 --> 00:11:31,750
this kind of behavior the the specific

00:11:29,560 --> 00:11:35,410
the specifications being wrong is pretty

00:11:31,750 --> 00:11:37,420
much a rule rather than the exception so

00:11:35,410 --> 00:11:38,980
you do have to look at how applications

00:11:37,420 --> 00:11:42,900
actually behave rather than reading

00:11:38,980 --> 00:11:42,900
specifications when it comes to no js'

00:11:43,200 --> 00:11:49,210
circular dependencies are way more

00:11:45,580 --> 00:11:52,180
common than I thought which before I

00:11:49,210 --> 00:11:54,040
started doing this project I had no clue

00:11:52,180 --> 00:11:56,680
that circle of dependencies were even a

00:11:54,040 --> 00:11:58,150
thing in notaries I would imagine that

00:11:56,680 --> 00:12:02,050
that would lead to infinite recursion

00:11:58,150 --> 00:12:07,530
but it does not they do have some some

00:12:02,050 --> 00:12:07,530
kind of fake fixed point stuff going on

00:12:08,700 --> 00:12:14,170
another thing is there are a large

00:12:11,110 --> 00:12:17,110
number of dependency types and a large

00:12:14,170 --> 00:12:19,240
number of invariance of those like at

00:12:17,110 --> 00:12:20,860
the NPM registry you can't assume that

00:12:19,240 --> 00:12:23,770
anyone is using the upstream NPM

00:12:20,860 --> 00:12:27,670
registry that is customizable we have

00:12:23,770 --> 00:12:29,980
locally linked files which injects

00:12:27,670 --> 00:12:32,800
symlinks to other local locally linked

00:12:29,980 --> 00:12:35,350
projects there are get dependencies

00:12:32,800 --> 00:12:40,950
there are a few other ones the nice

00:12:35,350 --> 00:12:43,690
thing about PMPM is that it resolves get

00:12:40,950 --> 00:12:47,800
github dependencies to their tarballs

00:12:43,690 --> 00:12:49,840
rather than using git directly so you do

00:12:47,800 --> 00:12:52,110
get a nice nice performance boost out of

00:12:49,840 --> 00:12:52,110
that

00:12:54,370 --> 00:13:03,200
PMPM has pretty rich metadata so all

00:13:00,770 --> 00:13:05,660
dependencies are pre resolved in the

00:13:03,200 --> 00:13:07,550
dependency lock file which is pretty

00:13:05,660 --> 00:13:09,620
nice so you can just have a look of that

00:13:07,550 --> 00:13:11,060
file and see exactly what what your

00:13:09,620 --> 00:13:13,880
directory structure is gonna look like

00:13:11,060 --> 00:13:17,450
on disk and what what thing is gonna end

00:13:13,880 --> 00:13:21,800
up in your variables when you require

00:13:17,450 --> 00:13:24,440
something that is not always consistent

00:13:21,800 --> 00:13:29,420
though when it comes to things like like

00:13:24,440 --> 00:13:34,790
peer dependencies which are which are

00:13:29,420 --> 00:13:37,330
meant for plugins so again let's say you

00:13:34,790 --> 00:13:39,890
depend on some linting linting feature

00:13:37,330 --> 00:13:41,900
that that code typically goes into peer

00:13:39,890 --> 00:13:43,520
dependents pair dependencies rather than

00:13:41,900 --> 00:13:47,800
dependencies because you can't mix and

00:13:43,520 --> 00:13:57,380
match linters you can't mix and match

00:13:47,800 --> 00:13:59,720
lagers etc and next makes these

00:13:57,380 --> 00:14:01,250
traversing these graphs and working on

00:13:59,720 --> 00:14:03,680
these kind of graphs problem really

00:14:01,250 --> 00:14:06,200
really easy it's been truly been a

00:14:03,680 --> 00:14:09,050
breeze working with Nix with these kind

00:14:06,200 --> 00:14:11,120
of problems there are some pretty ugly

00:14:09,050 --> 00:14:12,890
aspects of what I had to do to get this

00:14:11,120 --> 00:14:16,490
working in the first place like using

00:14:12,890 --> 00:14:20,930
import from derivation just to do the

00:14:16,490 --> 00:14:22,370
coding of llamó files in Nix this is

00:14:20,930 --> 00:14:24,740
some somewhere I think we need to

00:14:22,370 --> 00:14:29,060
improve a lot in terms of being able to

00:14:24,740 --> 00:14:31,220
write plugins that that do decoding of

00:14:29,060 --> 00:14:33,140
unsupported file formats and it's I

00:14:31,220 --> 00:14:35,450
don't think it's a scalable approach to

00:14:33,140 --> 00:14:37,810
make everything we want to decode are

00:14:35,450 --> 00:14:37,810
built in

00:14:43,530 --> 00:14:48,420
so p.m. p.m. to nix it in itself is a

00:14:46,110 --> 00:14:51,600
quite a complicated Beast but using it

00:14:48,420 --> 00:14:53,280
is not I took a lot of inspiration from

00:14:51,600 --> 00:14:55,680
what what Simba had done on yarn to

00:14:53,280 --> 00:14:58,710
Nick's here so all you all you need to

00:14:55,680 --> 00:15:02,720
do to use it as it's what you see on the

00:14:58,710 --> 00:15:06,810
screen everything at all other necessary

00:15:02,720 --> 00:15:09,060
meta attributes are derived from from

00:15:06,810 --> 00:15:13,080
packages and in shrink-wrap PMO and if

00:15:09,060 --> 00:15:15,780
these two files are local so if you

00:15:13,080 --> 00:15:18,750
reference the source as a path rather

00:15:15,780 --> 00:15:20,400
than a fetch gate or something you don't

00:15:18,750 --> 00:15:27,060
even have to use package JSON and

00:15:20,400 --> 00:15:29,610
shrink-wrap llamó one of the more recent

00:15:27,060 --> 00:15:31,680
features I added to this thing is the

00:15:29,610 --> 00:15:37,080
ability to use it for to manage your

00:15:31,680 --> 00:15:39,030
development dependencies so what what

00:15:37,080 --> 00:15:41,790
you see on the screen will result in is

00:15:39,030 --> 00:15:46,470
an environment where where you get the

00:15:41,790 --> 00:15:49,560
same version of of node you get wrapped

00:15:46,470 --> 00:15:53,010
node interpreter with all the all the

00:15:49,560 --> 00:15:54,990
dependencies exposed to you exactly as

00:15:53,010 --> 00:15:58,890
if they were installed with with P and

00:15:54,990 --> 00:16:00,810
PM I find find this to be pretty great

00:15:58,890 --> 00:16:03,320
because I hate using any node package

00:16:00,810 --> 00:16:03,320
tooling

00:16:04,160 --> 00:16:11,940
I do I did have to create my own ad-hoc

00:16:09,330 --> 00:16:14,220
override mechanisms for you to be able

00:16:11,940 --> 00:16:16,920
to hook into the and override any

00:16:14,220 --> 00:16:20,790
package in the dependency graph it is

00:16:16,920 --> 00:16:23,700
pretty awkward but I I didn't find a

00:16:20,790 --> 00:16:27,450
better way to do this then then to

00:16:23,700 --> 00:16:29,459
provide an attribute set which takes a

00:16:27,450 --> 00:16:33,720
function of your derivation that that

00:16:29,459 --> 00:16:36,649
you can override if anyone is it has any

00:16:33,720 --> 00:16:41,250
better ideas that would be pretty great

00:16:36,649 --> 00:16:43,560
this package in particular was is a good

00:16:41,250 --> 00:16:47,430
example of why no js' is an insane

00:16:43,560 --> 00:16:51,300
ecosystem because the override bit down

00:16:47,430 --> 00:16:53,040
here is something I had to do because

00:16:51,300 --> 00:16:55,380
the package actually tries to download

00:16:53,040 --> 00:16:58,950
shared objects for your platform from

00:16:55,380 --> 00:17:04,709
the internet to be able to do image

00:16:58,950 --> 00:17:11,760
manipulation another big problem dealing

00:17:04,709 --> 00:17:13,800
with nodejs packages is this PMPM to nix

00:17:11,760 --> 00:17:15,689
is not very fast because it does

00:17:13,800 --> 00:17:18,540
faithfully make a next package out of

00:17:15,689 --> 00:17:22,110
every single NPM package that you pull

00:17:18,540 --> 00:17:26,069
in and in some projects this can be

00:17:22,110 --> 00:17:29,480
pretty hairy I will show you a customer

00:17:26,069 --> 00:17:33,660
project I've been working on where where

00:17:29,480 --> 00:17:36,440
the dependency graph is the most insane

00:17:33,660 --> 00:17:36,440
I've ever seen

00:17:38,240 --> 00:17:41,660
just a moment

00:17:56,570 --> 00:18:04,890
and if we zoom in on this we can see

00:18:00,330 --> 00:18:10,170
that this is actually and this is not an

00:18:04,890 --> 00:18:13,470
unusual thing I found these are about a

00:18:10,170 --> 00:18:22,140
about 850 packages that ended up in this

00:18:13,470 --> 00:18:24,270
dependency graph so the performance of

00:18:22,140 --> 00:18:26,610
PMPM tunics is not always great because

00:18:24,270 --> 00:18:29,010
of the large number of packages and the

00:18:26,610 --> 00:18:33,180
amount of input from derivation that has

00:18:29,010 --> 00:18:37,080
to happen I'm hoping to improve upon

00:18:33,180 --> 00:18:43,950
this so the state of the tooling now is

00:18:37,080 --> 00:18:46,920
mostly correct its thus mostly the right

00:18:43,950 --> 00:18:51,390
thing what it needs to do I have not

00:18:46,920 --> 00:18:53,370
found any new bugs in months it's mostly

00:18:51,390 --> 00:18:59,460
feature complete it does support almost

00:18:53,370 --> 00:19:01,290
every feature that PMPM supports in has

00:18:59,460 --> 00:19:03,870
a pretty comprehensive test suite where

00:19:01,290 --> 00:19:06,650
which is extracted from real world

00:19:03,870 --> 00:19:06,650
applications

00:19:06,980 --> 00:19:12,750
interfaces like the override interfaces

00:19:09,960 --> 00:19:15,660
are mostly stable that I do want to make

00:19:12,750 --> 00:19:20,730
a big change before I can say it's

00:19:15,660 --> 00:19:23,310
blundered oh and in the future I would

00:19:20,730 --> 00:19:27,720
like to abstract out some generic bits

00:19:23,310 --> 00:19:30,660
like the work I had to do to resolve

00:19:27,720 --> 00:19:33,570
circular dependencies where I have to

00:19:30,660 --> 00:19:35,670
walk the dependency graph identify

00:19:33,570 --> 00:19:37,230
cycles and merge the cycles into a

00:19:35,670 --> 00:19:40,740
single next package therefore from the

00:19:37,230 --> 00:19:46,830
point of Nixon no no recursion is going

00:19:40,740 --> 00:19:51,770
on at all closure size reductions as you

00:19:46,830 --> 00:19:51,770
could see that closure was pretty hairy

00:19:52,760 --> 00:19:59,280
all the native dependency tooling in in

00:19:56,180 --> 00:20:00,840
nodejs is built with Python and Python

00:19:59,280 --> 00:20:03,090
does gets pulled into the runtime of

00:20:00,840 --> 00:20:04,980
every single closure that pulls in any

00:20:03,090 --> 00:20:06,720
native dependency asked as it is now

00:20:04,980 --> 00:20:07,230
that is something I would quite like to

00:20:06,720 --> 00:20:13,799
avoid

00:20:07,230 --> 00:20:16,980
it's very big that horrible resolution

00:20:13,799 --> 00:20:20,730
that matching github reps to tarballs is

00:20:16,980 --> 00:20:22,889
not entirely pure because PMPM upstream

00:20:20,730 --> 00:20:27,899
currently does not have checksums for

00:20:22,889 --> 00:20:33,510
those and I would completely like to get

00:20:27,899 --> 00:20:38,450
rid of IFD if the big-ticket item there

00:20:33,510 --> 00:20:44,940
is getting its getting llamo decoding in

00:20:38,450 --> 00:20:47,460
natively and next somehow I would like

00:20:44,940 --> 00:20:49,260
to thank my previous employer for giving

00:20:47,460 --> 00:20:51,840
me a bunch of time to work on this at

00:20:49,260 --> 00:20:55,470
company time and for the customer which

00:20:51,840 --> 00:20:56,760
is using this in production and thanks

00:20:55,470 --> 00:20:59,700
to John tunics for being an inspiration

00:20:56,760 --> 00:21:05,669
of how I think all this tunics tooling

00:20:59,700 --> 00:21:08,789
should be the nodejs module system I

00:21:05,669 --> 00:21:10,889
think is actually pretty solid it's one

00:21:08,789 --> 00:21:14,190
of the nicer interpreted languages out

00:21:10,889 --> 00:21:16,620
there in terms of module system but the

00:21:14,190 --> 00:21:20,159
ecosystem is completely insane and near

00:21:16,620 --> 00:21:21,690
unusable I think if you do have to deal

00:21:20,159 --> 00:21:25,260
with it which you probably do at some

00:21:21,690 --> 00:21:27,000
point you use PM PM I I it's something

00:21:25,260 --> 00:21:34,190
that is truly appealing to me as an ex

00:21:27,000 --> 00:21:36,960
next person so any questions alright

00:21:34,190 --> 00:21:38,540
thank you thank you very much

00:21:36,960 --> 00:21:41,970
[Applause]

00:21:38,540 --> 00:21:43,770
and with you finish early we've got

00:21:41,970 --> 00:21:44,790
plenty of time for questions and people

00:21:43,770 --> 00:21:46,710
having questions with me a favor and

00:21:44,790 --> 00:21:48,320
keep your arm race why I see we have to

00:21:46,710 --> 00:21:54,060
go next

00:21:48,320 --> 00:21:59,820
how are you handling what pre-post

00:21:54,060 --> 00:22:01,770
installer script I'm shelling out to NPM

00:21:59,820 --> 00:22:05,460
in a bunch of spec you know in the

00:22:01,770 --> 00:22:07,230
pre-configure face you know in the post

00:22:05,460 --> 00:22:11,490
install in the post install face in

00:22:07,230 --> 00:22:15,330
index you can yeah so you're actually

00:22:11,490 --> 00:22:17,820
running the scripts the modules have

00:22:15,330 --> 00:22:20,040
with them yes because the antonakes for

00:22:17,820 --> 00:22:24,030
example takes the approach of just

00:22:20,040 --> 00:22:29,310
ignoring the scripts and then patching

00:22:24,030 --> 00:22:30,570
in some of them again for the cases

00:22:29,310 --> 00:22:34,170
where you actually need them because

00:22:30,570 --> 00:22:36,210
most of them are like electron trying to

00:22:34,170 --> 00:22:40,440
download boundaries or something like

00:22:36,210 --> 00:22:44,220
that and it could actually be easier if

00:22:40,440 --> 00:22:49,470
we try to always ignore them and for

00:22:44,220 --> 00:22:53,430
example now it's ass needs some foreign

00:22:49,470 --> 00:22:57,690
function interface building and patching

00:22:53,430 --> 00:23:04,290
stuff like that again that because the

00:22:57,690 --> 00:23:06,450
the far larger number of scripts ones

00:23:04,290 --> 00:23:11,850
that we actually normally don't want to

00:23:06,450 --> 00:23:19,380
run probably okay yeah I always always

00:23:11,850 --> 00:23:21,750
run the scripts faithfully yeah I

00:23:19,380 --> 00:23:23,340
basically have two questions the first

00:23:21,750 --> 00:23:26,270
question is about the graph you showed

00:23:23,340 --> 00:23:28,110
earlier in your presentation that you

00:23:26,270 --> 00:23:29,520
generate that from the runtime

00:23:28,110 --> 00:23:32,100
dependencies or the build time

00:23:29,520 --> 00:23:35,430
dependencies can you say that again

00:23:32,100 --> 00:23:37,500
the graph that you showed earlier in

00:23:35,430 --> 00:23:39,690
your that was the runtime dependencies

00:23:37,500 --> 00:23:43,920
okay because I think eight on their

00:23:39,690 --> 00:23:46,310
dependencies is not really that much I

00:23:43,920 --> 00:23:46,310
would say

00:23:46,390 --> 00:23:51,080
but I think if you would compare that to

00:23:49,040 --> 00:23:53,390
the to the build time dependency graph

00:23:51,080 --> 00:23:55,280
then I think you see you probably see a

00:23:53,390 --> 00:23:58,820
lot of packages that are involved so

00:23:55,280 --> 00:24:01,850
perhaps you should also try that I did

00:23:58,820 --> 00:24:04,790
it looks even more crazy and then my

00:24:01,850 --> 00:24:09,230
second question is basically yeah you

00:24:04,790 --> 00:24:12,110
also create a generator that basically

00:24:09,230 --> 00:24:14,180
produces necks expressions I'm actually

00:24:12,110 --> 00:24:16,130
maintaining two generators myself and

00:24:14,180 --> 00:24:19,910
there are many more

00:24:16,130 --> 00:24:22,970
what could you basically recommend yeah

00:24:19,910 --> 00:24:24,530
the other people that develop generators

00:24:22,970 --> 00:24:26,390
I think one of your recommendations is

00:24:24,530 --> 00:24:28,190
that you preferably don't want to run a

00:24:26,390 --> 00:24:30,620
generator right everything should work

00:24:28,190 --> 00:24:33,230
from next expressions yeah but I think

00:24:30,620 --> 00:24:35,210
the difficulty is you currently rely on

00:24:33,230 --> 00:24:38,510
doing things on the instantiation phase

00:24:35,210 --> 00:24:40,460
right you are you probably import

00:24:38,510 --> 00:24:44,210
generated Nick's expressions I think or

00:24:40,460 --> 00:24:48,140
import derivations no I thing I use

00:24:44,210 --> 00:24:51,200
input from derivation for is only doing

00:24:48,140 --> 00:24:54,350
llamo to JSON conversion so I can import

00:24:51,200 --> 00:24:56,300
the shrink-wrap llamo into next ok

00:24:54,350 --> 00:24:58,340
that's clear but are there any other

00:24:56,300 --> 00:24:59,180
things you would recommend that that you

00:24:58,340 --> 00:25:04,430
would like to see in the other

00:24:59,180 --> 00:25:06,500
generators mmm no I would like to see

00:25:04,430 --> 00:25:11,440
less generators and more more of these

00:25:06,500 --> 00:25:11,440
kind of pure next tools okay

00:25:16,480 --> 00:25:26,270
do plugins work yes nothing special to

00:25:22,820 --> 00:25:30,790
be done just works all supports yeah did

00:25:26,270 --> 00:25:33,230
I do wrap wrap a bunch of binaries we're

00:25:30,790 --> 00:25:35,780
setting the node part appropriately to

00:25:33,230 --> 00:25:38,000
get plugins to work properly to

00:25:35,780 --> 00:25:40,180
propagate them implicitly throughout the

00:25:38,000 --> 00:25:40,180
tree

00:25:42,070 --> 00:25:52,610
no questions so on the repository you

00:25:49,789 --> 00:25:55,129
say that pnpn doesn't include Czech

00:25:52,610 --> 00:25:59,659
stones for tar balls yeah that that was

00:25:55,129 --> 00:26:01,519
those get github tar balls yeah but do

00:25:59,659 --> 00:26:06,820
you think it can be included because yes

00:26:01,519 --> 00:26:06,820
I plan to look at that right next week

00:26:10,000 --> 00:26:18,769
no questions nope well in that case

00:26:17,059 --> 00:26:20,950
thank you very much for your interesting

00:26:18,769 --> 00:26:20,950
talk

00:26:20,980 --> 00:26:29,259

YouTube URL: https://www.youtube.com/watch?v=uq5zi3_22DA


