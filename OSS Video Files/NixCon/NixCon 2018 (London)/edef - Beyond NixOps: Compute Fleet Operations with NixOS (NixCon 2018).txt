Title: edef - Beyond NixOps: Compute Fleet Operations with NixOS (NixCon 2018)
Publication date: 2018-10-27
Playlist: NixCon 2018 (London)
Description: 
	For my day job, I operate a compute fleet on a mixture of private and public cloud. We started out with NixOps, but ultimately found ourselves constrained by its limitations and "pet"-focused approach, so I ended up learning a lot by building our own cattle-focused deployment tool.--- Bio: Hi! I'm edef, and I build software and services for other people to build software and services with
Captions: 
	00:00:02,120 --> 00:00:10,200
all righty so on to our next our next

00:00:06,060 --> 00:00:13,830
speaker which is EDF and on happy half

00:00:10,200 --> 00:00:17,609
I'd like to ask you to not take pictures

00:00:13,830 --> 00:00:21,750
ever and and treat them in the world and

00:00:17,609 --> 00:00:25,140
also I'd like you to to pay note that

00:00:21,750 --> 00:00:28,199
you should refer to as she and her so

00:00:25,140 --> 00:00:31,500
thank you very much for that and apart

00:00:28,199 --> 00:00:33,090
from that she is she's here today to

00:00:31,500 --> 00:00:36,540
talk to us about

00:00:33,090 --> 00:00:39,780
mix-ups it's a limitation that she has

00:00:36,540 --> 00:00:43,710
run into using it and the ways that she

00:00:39,780 --> 00:00:45,450
has found to do things better right off

00:00:43,710 --> 00:00:52,079
we go

00:00:45,450 --> 00:00:54,239
[Applause]

00:00:52,079 --> 00:00:59,989
I'm not quite going to talk about Nexus

00:00:54,239 --> 00:01:04,559
in terms of how I've worked around but

00:00:59,989 --> 00:01:06,090
for starters what do I actually do I run

00:01:04,559 --> 00:01:11,310
a small platform as a service company

00:01:06,090 --> 00:01:13,200
called mutable we could we put the cloud

00:01:11,310 --> 00:01:16,049
experience in places where you wouldn't

00:01:13,200 --> 00:01:21,180
otherwise get them and what everyone's

00:01:16,049 --> 00:01:22,710
now calling edge cloud but that means we

00:01:21,180 --> 00:01:25,369
have to manage a lot of systems and a

00:01:22,710 --> 00:01:28,110
lot of places across diverse

00:01:25,369 --> 00:01:31,979
infrastructure and the cloud never

00:01:28,110 --> 00:01:35,070
sleeps so we ought to be able to patch

00:01:31,979 --> 00:01:37,229
stuff up well it's running we can't

00:01:35,070 --> 00:01:39,500
really have non-atomic updates to things

00:01:37,229 --> 00:01:43,140
because that's an operational nightmare

00:01:39,500 --> 00:01:46,729
so somewhere around two years ago we

00:01:43,140 --> 00:01:46,729
switched everything over to Nick's OS

00:01:51,080 --> 00:01:56,060
we use in immutable infrastructure

00:01:53,780 --> 00:01:58,850
practices to build everything outside

00:01:56,060 --> 00:02:01,190
the compute but we have a constantly

00:01:58,850 --> 00:02:04,910
evolving stack so we have to manage

00:02:01,190 --> 00:02:06,950
those as well we try to solve problems

00:02:04,910 --> 00:02:09,230
at the lowest layer it makes sense for

00:02:06,950 --> 00:02:12,890
so we have to integrate custom patches

00:02:09,230 --> 00:02:16,760
to your kinds of software kernel patches

00:02:12,890 --> 00:02:20,810
kernel modules we have to integrate our

00:02:16,760 --> 00:02:21,980
system like as closely or at least our

00:02:20,810 --> 00:02:25,520
own we have to integrate our own

00:02:21,980 --> 00:02:28,700
software as closely with everything else

00:02:25,520 --> 00:02:32,920
as third-party software that we pull in

00:02:28,700 --> 00:02:35,360
like we use console and things like that

00:02:32,920 --> 00:02:41,420
we use a heavily modified docker

00:02:35,360 --> 00:02:44,690
currently but that's not such a huge

00:02:41,420 --> 00:02:47,050
problem if we run XS we run on diverse

00:02:44,690 --> 00:02:51,380
underlying infrastructure we run on ec2

00:02:47,050 --> 00:02:55,370
we're moving our control plane to Google

00:02:51,380 --> 00:02:58,450
compute currently but most of our

00:02:55,370 --> 00:03:00,950
targets are bare metal provided by

00:02:58,450 --> 00:03:05,750
telcos and places like that

00:03:00,950 --> 00:03:08,900
so and we have a lot of like machines

00:03:05,750 --> 00:03:14,000
we're deploying to you so we can't have

00:03:08,900 --> 00:03:16,190
like something where we're doing some

00:03:14,000 --> 00:03:24,370
like significant amount of per machine

00:03:16,190 --> 00:03:29,780
work so I was aiming to deploy our

00:03:24,370 --> 00:03:33,020
compute nodes which run basically a

00:03:29,780 --> 00:03:35,959
docker daemon a bunch of magic of ours

00:03:33,020 --> 00:03:42,350
and our own services because our system

00:03:35,959 --> 00:03:45,560
runs on itself so Nick's UPS was my

00:03:42,350 --> 00:03:48,410
first choice when like ok I've to deploy

00:03:45,560 --> 00:03:52,550
a bunch of machines with Nick's but next

00:03:48,410 --> 00:03:55,300
subsys neat if you're deploying like a

00:03:52,550 --> 00:03:55,300
couple dozen machines

00:03:57,090 --> 00:04:05,390
it has it's like slightly more pet than

00:04:00,510 --> 00:04:07,530
cattle approach to deployment where

00:04:05,390 --> 00:04:13,140
individual machines are things you're

00:04:07,530 --> 00:04:15,000
aware of it sets networking hostname for

00:04:13,140 --> 00:04:19,350
each machines or each machine already

00:04:15,000 --> 00:04:22,590
has a unique configuration it sets

00:04:19,350 --> 00:04:25,139
EGC hosts to contain every other machine

00:04:22,590 --> 00:04:27,030
so every time you add a single machine

00:04:25,139 --> 00:04:30,450
or remove one you're touching every

00:04:27,030 --> 00:04:33,870
machine you already have you can like do

00:04:30,450 --> 00:04:38,550
networking to extra hosts is make force

00:04:33,870 --> 00:04:40,650
empty string that works out but really

00:04:38,550 --> 00:04:42,960
what I want to do is always deploy a

00:04:40,650 --> 00:04:47,250
one-size-fits-all image to every single

00:04:42,960 --> 00:04:50,789
machine of a certain type and then

00:04:47,250 --> 00:04:54,180
mutate it after the fact because we have

00:04:50,789 --> 00:05:00,500
things like custom kernels nick slips

00:04:54,180 --> 00:05:03,289
likes to deploy the pre-built a.m. eyes

00:05:00,500 --> 00:05:05,850
that get built with every nexus release

00:05:03,289 --> 00:05:10,020
we have to reboot those right away if we

00:05:05,850 --> 00:05:13,860
deploy them and there's no real

00:05:10,020 --> 00:05:17,760
automation for that could be done by

00:05:13,860 --> 00:05:21,300
like matching booted system to parent

00:05:17,760 --> 00:05:23,700
system etc but it's no ideal we also in

00:05:21,300 --> 00:05:25,800
the our bare metal targets want so

00:05:23,700 --> 00:05:31,500
differ support there isn't much of that

00:05:25,800 --> 00:05:34,889
but that was a sensibly patchable then

00:05:31,500 --> 00:05:40,650
there's support for things beyond role

00:05:34,889 --> 00:05:43,229
compute so on AWS and Google Cloud

00:05:40,650 --> 00:05:46,530
that's things like security groups

00:05:43,229 --> 00:05:51,200
storage buckets there's some support for

00:05:46,530 --> 00:05:54,030
those but it's not very comprehensive

00:05:51,200 --> 00:05:55,380
but the real kicker was not being able

00:05:54,030 --> 00:06:00,360
to use it in a distributed fashion

00:05:55,380 --> 00:06:02,070
easily we have a variety of people

00:06:00,360 --> 00:06:07,729
deploying we're working on automating

00:06:02,070 --> 00:06:07,729
deploying our entire stack but also just

00:06:08,530 --> 00:06:12,760
we can't have that state exist on a

00:06:10,810 --> 00:06:15,340
single machine everything about our

00:06:12,760 --> 00:06:23,110
system is designed to account for the

00:06:15,340 --> 00:06:26,080
failure of so in addition to that we

00:06:23,110 --> 00:06:27,780
want to target a lot of places and next

00:06:26,080 --> 00:06:30,370
ups has been slow to integrate targets

00:06:27,780 --> 00:06:35,560
we are not super up for hacking on a

00:06:30,370 --> 00:06:37,900
Python code base so what we ended up

00:06:35,560 --> 00:06:40,750
doing was handling the role compute

00:06:37,900 --> 00:06:45,820
resources when they accepts with a

00:06:40,750 --> 00:06:48,310
couple workarounds for the issues we

00:06:45,820 --> 00:06:52,180
covered a bunch of bash scripts around

00:06:48,310 --> 00:06:58,020
it to take care of things like adding a

00:06:52,180 --> 00:07:02,940
number of new machines to cluster and we

00:06:58,020 --> 00:07:02,940
ended up covering the

00:07:06,320 --> 00:07:14,150
we ended up running into the managing of

00:07:11,570 --> 00:07:18,250
non computing infrastructure we use

00:07:14,150 --> 00:07:18,250
terraform for that in the past already

00:07:19,390 --> 00:07:27,680
and terraform is a tool for managing

00:07:25,090 --> 00:07:34,130
immutable infrastructure generally built

00:07:27,680 --> 00:07:36,110
from like pre-built images so you the

00:07:34,130 --> 00:07:38,810
normal approach when you use terraform

00:07:36,110 --> 00:07:46,040
and like the entire action corp stack is

00:07:38,810 --> 00:07:48,020
you pre build a mais running like debian

00:07:46,040 --> 00:07:50,420
or whatever and you apt-get and do

00:07:48,020 --> 00:07:52,640
horrible things and all that to make

00:07:50,420 --> 00:07:54,530
your thing work and you bake that into

00:07:52,640 --> 00:07:56,380
an image and forget about all the

00:07:54,530 --> 00:07:59,330
horrible things involved in making it

00:07:56,380 --> 00:08:01,370
and if you ever want to change the

00:07:59,330 --> 00:08:05,750
running machine you throw it away and

00:08:01,370 --> 00:08:10,150
replace it with a new one which sure but

00:08:05,750 --> 00:08:12,800
in our case we have a customer

00:08:10,150 --> 00:08:14,960
containers running on those machines and

00:08:12,800 --> 00:08:17,390
we do need to actually do you hooked

00:08:14,960 --> 00:08:19,130
fixes from time to time some of them are

00:08:17,390 --> 00:08:24,500
physical machines so we can't just throw

00:08:19,130 --> 00:08:27,290
them away but terraform has a load of

00:08:24,500 --> 00:08:29,630
good sides to it it has great operator

00:08:27,290 --> 00:08:31,669
control ahead of like deploying a change

00:08:29,630 --> 00:08:34,250
you can run terraform plan which will

00:08:31,669 --> 00:08:37,580
tell you like hey we're recreating this

00:08:34,250 --> 00:08:41,599
resource because it because it changed

00:08:37,580 --> 00:08:44,780
in a way that we can't do at runtime it

00:08:41,599 --> 00:08:47,089
has a good story for using it in a

00:08:44,780 --> 00:08:52,430
distributed fashion you can tell it to

00:08:47,089 --> 00:08:55,490
back at state store with you CD or an s3

00:08:52,430 --> 00:08:59,390
bucket though that one's not super clean

00:08:55,490 --> 00:09:02,510
but there are a variety of options that

00:08:59,390 --> 00:09:05,690
mean everyone can just run terraform on

00:09:02,510 --> 00:09:07,870
their laptop and not clash with anyone

00:09:05,690 --> 00:09:07,870
else

00:09:07,970 --> 00:09:13,010
it has rather pleasant integration with

00:09:10,760 --> 00:09:15,220
other tools so I ended up using them

00:09:13,010 --> 00:09:15,220
together

00:09:18,600 --> 00:09:22,860
that is wrong screen

00:09:25,750 --> 00:09:30,420
so that is not

00:09:32,000 --> 00:09:34,569
right

00:09:34,840 --> 00:09:41,870
so terribly

00:09:36,790 --> 00:09:46,370
terraform looks like this basically

00:09:41,870 --> 00:09:52,220
every resource abstraction and you have

00:09:46,370 --> 00:09:56,690
outputs which is all that matters to the

00:09:52,220 --> 00:09:58,760
next layer really so I just do some

00:09:56,690 --> 00:10:02,240
horrible things and poke inside its

00:09:58,760 --> 00:10:08,560
state files and get all of those bits

00:10:02,240 --> 00:10:13,310
out and I use that to deploy everything

00:10:08,560 --> 00:10:14,420
that isn't compute that isn't like

00:10:13,310 --> 00:10:18,260
actual machines

00:10:14,420 --> 00:10:23,690
I used this next expression from inside

00:10:18,260 --> 00:10:27,710
my NEX ops config and then everything

00:10:23,690 --> 00:10:32,870
works with that it's a little manual but

00:10:27,710 --> 00:10:35,720
it's fairly workable but we still have

00:10:32,870 --> 00:10:39,200
the issue of like when we're using next

00:10:35,720 --> 00:10:44,660
ups we're doing an X copy closure to

00:10:39,200 --> 00:10:51,190
every machine there's a configuration

00:10:44,660 --> 00:10:51,190
that differs per machine by default I

00:10:52,240 --> 00:10:55,910
maybe there's something I'm missing but

00:10:54,290 --> 00:10:57,680
I haven't seen any like significant

00:10:55,910 --> 00:11:05,000
integration with like managing a binary

00:10:57,680 --> 00:11:07,250
cash but ultimately what makes ups boils

00:11:05,000 --> 00:11:12,850
down to is kind of a fancy way of doing

00:11:07,250 --> 00:11:15,470
mixes rebuild switch - target host and

00:11:12,850 --> 00:11:19,730
that's all we're really using it for at

00:11:15,470 --> 00:11:23,600
this point so what I'd like to do and

00:11:19,730 --> 00:11:25,460
what I'm building is we have excellent

00:11:23,600 --> 00:11:30,860
support for building disk images index

00:11:25,460 --> 00:11:35,990
packages Linux OS so I build a single

00:11:30,860 --> 00:11:39,140
disk image per node type you use that to

00:11:35,990 --> 00:11:42,580
be fresh nodes when I'm like powering up

00:11:39,140 --> 00:11:42,580
new machines or

00:11:43,170 --> 00:11:55,320
just like anytime I'm running a machine

00:11:49,920 --> 00:12:00,510
with a clean disc so that gets turned

00:11:55,320 --> 00:12:03,660
into a mis for AC to Google compute like

00:12:00,510 --> 00:12:08,790
machine images and for bare metal and a

00:12:03,660 --> 00:12:10,829
boot image that we do to do not

00:12:08,790 --> 00:12:12,779
necessarily boot over PXE but the net

00:12:10,829 --> 00:12:14,519
boot builder builds your entire

00:12:12,779 --> 00:12:19,800
everything in TV and it Rama fest so

00:12:14,519 --> 00:12:21,360
that's quite convenient once we have

00:12:19,800 --> 00:12:23,720
those machines up we want to be able to

00:12:21,360 --> 00:12:28,800
change them without shutting them down

00:12:23,720 --> 00:12:35,899
so every system image we built gets

00:12:28,800 --> 00:12:39,899
pushed to a binary cash and then we just

00:12:35,899 --> 00:12:49,769
connect to the machines and tell them to

00:12:39,899 --> 00:12:53,329
run that so or that we'd in theory have

00:12:49,769 --> 00:12:53,329
to interface with a bunch of next bits

00:12:54,079 --> 00:13:04,279
there wasn't a convenient google's

00:12:58,490 --> 00:13:06,360
conclude storage c++ sdk there's a

00:13:04,279 --> 00:13:11,699
deprecated one and one that doesn't have

00:13:06,360 --> 00:13:17,310
the right api is that's google's thing I

00:13:11,699 --> 00:13:25,140
guess so I decided to most of our stack

00:13:17,310 --> 00:13:27,240
is go and I'd have to bind go to the C++

00:13:25,140 --> 00:13:32,430
stuff if I wanted to really integrate it

00:13:27,240 --> 00:13:36,060
closely with our tools that was not

00:13:32,430 --> 00:13:40,620
something I was excited about so I ended

00:13:36,060 --> 00:13:42,720
up implementing most of the NYX store

00:13:40,620 --> 00:13:47,100
protocol and building myself something

00:13:42,720 --> 00:13:49,110
that roughly re-implement snicks Poosh

00:13:47,100 --> 00:13:50,970
but you can easily back it with

00:13:49,110 --> 00:13:53,300
arbitrary stores without having to write

00:13:50,970 --> 00:13:53,300
C++

00:13:53,800 --> 00:14:02,160
[Music]

00:13:55,520 --> 00:14:10,410
and something that pushes images builds

00:14:02,160 --> 00:14:13,640
an image using the the meek disk image

00:14:10,410 --> 00:14:18,540
stuff takes care of the per provider

00:14:13,640 --> 00:14:26,790
specific things so now we have binary

00:14:18,540 --> 00:14:31,910
caches and like images to boot machines

00:14:26,790 --> 00:14:31,910
from actually

00:15:28,280 --> 00:15:37,310
so this little thingy called nib which

00:15:30,680 --> 00:15:40,130
takes like roughly any anything you can

00:15:37,310 --> 00:15:42,020
execute commands on and like will take

00:15:40,130 --> 00:15:48,440
care of if you give it a next or path

00:15:42,020 --> 00:15:50,380
for a system of invoking that rate it's

00:15:48,440 --> 00:15:53,980
a ton of code because go is terrible but

00:15:50,380 --> 00:15:53,980
it's pretty easy to use

00:15:59,560 --> 00:16:07,390
it's roughly equivalent to a

00:16:01,540 --> 00:16:08,590
programmatic Knicks us rebuild switch -

00:16:07,390 --> 00:16:17,020
closure

00:16:08,590 --> 00:16:23,250
- target host so the binary like has you

00:16:17,020 --> 00:16:26,890
exposes the built-in support for using

00:16:23,250 --> 00:16:36,580
goes SSH doing it on a local machine of

00:16:26,890 --> 00:16:40,360
course it also supports Nix OS in an

00:16:36,580 --> 00:16:43,440
illumise own because visit onto a some

00:16:40,360 --> 00:16:43,440
point played around with that

00:16:50,310 --> 00:16:53,600
[Music]

00:16:55,820 --> 00:17:04,820
or stack on top of all this is a bunch

00:17:01,260 --> 00:17:04,820
of ghost services running in Ducker

00:17:09,949 --> 00:17:18,150
those get stuffed into a docker

00:17:15,900 --> 00:17:23,579
container with this little thing called

00:17:18,150 --> 00:17:27,300
next to docker mostly built because the

00:17:23,579 --> 00:17:34,650
docker tools and expect jizz are very

00:17:27,300 --> 00:17:37,740
very flexible but aren't very fast this

00:17:34,650 --> 00:17:40,920
just basically sticks the Tarble like

00:17:37,740 --> 00:17:43,320
takes a closure stick Siddhant docker

00:17:40,920 --> 00:17:46,110
image terrible does the minimal work

00:17:43,320 --> 00:17:50,280
necessary for that our service

00:17:46,110 --> 00:17:53,520
derivations are built with something

00:17:50,280 --> 00:17:59,090
called go X which I would very much

00:17:53,520 --> 00:18:02,010
appreciate the nix the next stuff for

00:17:59,090 --> 00:18:09,840
because we use import from derivation to

00:18:02,010 --> 00:18:12,690
do dependency discovery and build every

00:18:09,840 --> 00:18:17,610
go package as an individual next

00:18:12,690 --> 00:18:21,450
derivation which I'm not sure if it's a

00:18:17,610 --> 00:18:31,050
waste of time yet but it's been working

00:18:21,450 --> 00:18:33,390
for a good two years now so I think that

00:18:31,050 --> 00:18:39,180
it's alright

00:18:33,390 --> 00:18:40,980
I'm served my future plans are like to

00:18:39,180 --> 00:18:47,960
like release that and make it into a

00:18:40,980 --> 00:18:50,820
polished thing and for deploying our

00:18:47,960 --> 00:18:52,830
clusters weird like working on more

00:18:50,820 --> 00:18:55,650
stuff that like has more awareness of

00:18:52,830 --> 00:18:58,250
cluster state is aware of the subsystems

00:18:55,650 --> 00:19:02,419
it's deploying

00:18:58,250 --> 00:19:05,419
like we currently deploy ruffed clusters

00:19:02,419 --> 00:19:09,169
like etcd and console with Knicks ups

00:19:05,419 --> 00:19:14,419
and we there's sort of the automatic

00:19:09,169 --> 00:19:17,659
joining stuff to build a cluster like a

00:19:14,419 --> 00:19:21,080
logical cluster out of that at the layer

00:19:17,659 --> 00:19:23,390
of that software that doesn't work out

00:19:21,080 --> 00:19:29,600
quite as well as having like your

00:19:23,390 --> 00:19:34,850
deployment software be aware of what it

00:19:29,600 --> 00:19:37,370
is deploying and what its state is in

00:19:34,850 --> 00:19:40,850
general we want like a more programmatic

00:19:37,370 --> 00:19:43,760
approach to it we specifically want it

00:19:40,850 --> 00:19:46,250
to work in a distributed fashion so

00:19:43,760 --> 00:19:50,780
there's no state that's on any single

00:19:46,250 --> 00:19:54,049
machine and it's some level we need to

00:19:50,780 --> 00:19:59,210
eat full approach because we can't

00:19:54,049 --> 00:20:01,669
reboot running stuff freely so I'm sort

00:19:59,210 --> 00:20:03,740
of working on a plan where we I look at

00:20:01,669 --> 00:20:08,150
booted system versus current system

00:20:03,740 --> 00:20:10,669
figure out whether I can upgrade the

00:20:08,150 --> 00:20:12,380
system on a given machine without like

00:20:10,669 --> 00:20:19,909
losing the ability to load kernel

00:20:12,380 --> 00:20:24,679
modules and I'm still working on like a

00:20:19,909 --> 00:20:28,070
plan for judging CI for all this but I'm

00:20:24,679 --> 00:20:33,100
hoping that's easy enough and sort of

00:20:28,070 --> 00:20:35,470
our long-term plans are probably sort of

00:20:33,100 --> 00:20:37,700
changing how we use NYX OS because

00:20:35,470 --> 00:20:41,210
system D has been giving us a lot of

00:20:37,700 --> 00:20:45,200
problems in container context so I've

00:20:41,210 --> 00:20:48,409
been playing with building something on

00:20:45,200 --> 00:20:54,110
top of the s6 stack which is an approach

00:20:48,409 --> 00:20:59,990
to service supervision that is a little

00:20:54,110 --> 00:21:03,830
more UNIX II and I hope will be very

00:20:59,990 --> 00:21:07,340
nice with Nix but yeah I think that was

00:21:03,830 --> 00:21:10,330
most of what I wanted to talk about I'd

00:21:07,340 --> 00:21:15,009
have had more demos but

00:21:10,330 --> 00:21:19,720
my laptop meseta your cable field so

00:21:15,009 --> 00:21:19,720
yeah questions time I guess

00:21:20,520 --> 00:21:29,309
[Applause]

00:21:29,450 --> 00:21:32,720
all righty

00:21:33,540 --> 00:21:39,270
I don't you have mentioned that you're

00:21:35,820 --> 00:21:41,910
trying to move NYX West to a different

00:21:39,270 --> 00:21:45,710
process provision mechanism is it right

00:21:41,910 --> 00:21:48,240
or like do experimenter in this area

00:21:45,710 --> 00:21:59,010
yeah I am experimenting with that

00:21:48,240 --> 00:22:01,260
because like system these job scheduling

00:21:59,010 --> 00:22:04,320
system is like very surprising at times

00:22:01,260 --> 00:22:07,550
and duplicates a lot of like what we do

00:22:04,320 --> 00:22:10,440
on the next to s modules end of things

00:22:07,550 --> 00:22:16,740
what is the name of the other one you're

00:22:10,440 --> 00:22:21,570
trying to so s6 is it is this Garnett

00:22:16,740 --> 00:22:25,700
service supervision sweet it's one of

00:22:21,570 --> 00:22:29,280
the many like DG beware things that like

00:22:25,700 --> 00:22:31,320
solve this in a similar way it's very

00:22:29,280 --> 00:22:33,059
worth reading about and I recommend

00:22:31,320 --> 00:22:40,010
digging in I can't really give like a

00:22:33,059 --> 00:22:40,010
full overview of it more questions

00:22:40,809 --> 00:22:52,610
nope then thank you again very much for

00:22:44,570 --> 00:22:56,020
your talkative thank you so next up

00:22:52,610 --> 00:22:56,020

YouTube URL: https://www.youtube.com/watch?v=JezPysgzy8E


