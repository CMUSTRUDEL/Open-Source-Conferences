Title: Daniel Barlow - NixWRT: purely functional firmware images for IoT (NixCon 2018)
Publication date: 2018-10-28
Playlist: NixCon 2018 (London)
Description: 
	Reflashing your broadband router with Linux (e.g. DD-WRT, OpenWRT, Tomato or variants) gives you unparalleled flexibility to do things that the manufacturer probably hadn't thought of. Remembering what you did, six months later, is often trickier. NixWRT is a (currently experimental) collection of derivations using the Nix package system and bits of NixOS to build router and IoT device firmware images using the principles of declarativity and composability that are why we love Nix. This talk will give you an overview of how it works, some war stories about the challenges faced, and hopefully the data you need to to decide whether to try it yourself on your own hardware. --- Bio: Daniel Barlow has been using Linux since kernel 0.99 (Slackware and MCC-Interim), and has never really adjusted as computing has moved on. Playing with resource-limited systems like routers and IoT devices helps him pretend it's still 1995. Since then he's programmed professionally in Perl, Common Lisp and Ruby, and played with Clojure and Nix. Most likely to say: ""try looking at it with {strace, wireshark}?"" Least likely to say: ""just buy a closed-source solution from an enterprise vendor""
Captions: 
	00:00:03,770 --> 00:00:09,030
twelve O'Clock let's continue with the

00:00:06,480 --> 00:00:11,099
next talk which is going to be given by

00:00:09,030 --> 00:00:14,519
Daniel Barlow and it's going to be about

00:00:11,099 --> 00:00:18,420
Nick's wrt which is a collection of

00:00:14,519 --> 00:00:22,050
derivation to basically build to build

00:00:18,420 --> 00:00:23,670
to build flash images from West yes

00:00:22,050 --> 00:00:27,090
professional network driver and

00:00:23,670 --> 00:00:30,530
hopefully not break it so yeah give you

00:00:27,090 --> 00:00:35,210
a round of applause and enjoy the talk

00:00:30,530 --> 00:00:36,840
[Applause]

00:00:35,210 --> 00:00:39,000
thank you very much

00:00:36,840 --> 00:00:41,910
yeah my name is Daniel Barlow I'm here

00:00:39,000 --> 00:00:44,640
to talk about using the NYX packaging

00:00:41,910 --> 00:00:48,270
collection to build images for embedded

00:00:44,640 --> 00:00:50,340
Reuters IOT devices things like this

00:00:48,270 --> 00:00:53,340
little widget here which you can't see

00:00:50,340 --> 00:00:54,360
but don't worry there's pictures I'd

00:00:53,340 --> 00:00:57,420
like to start by saying welcome to

00:00:54,360 --> 00:00:58,859
London this is a nice iconic image here

00:00:57,420 --> 00:01:01,829
of Piccadilly square with one of our

00:00:58,859 --> 00:01:04,199
London black caps in it if you're not

00:01:01,829 --> 00:01:08,189
local you might not know they have to

00:01:04,199 --> 00:01:09,900
take a knowledge test to memorize every

00:01:08,189 --> 00:01:11,880
road name within six miles of Charing

00:01:09,900 --> 00:01:16,650
Cross before they're allowed to drive

00:01:11,880 --> 00:01:18,689
one of these cars unfortunately yeah

00:01:16,650 --> 00:01:21,360
it's contrasts quite so well there this

00:01:18,689 --> 00:01:23,250
is my iconic black x1 ThinkPad carbine

00:01:21,360 --> 00:01:26,729
after a black cap driver ran over it the

00:01:23,250 --> 00:01:29,700
other way so it doesn't boot anymore

00:01:26,729 --> 00:01:32,670
surprisingly enough yeah so many many

00:01:29,700 --> 00:01:34,650
problems with the the quality or the

00:01:32,670 --> 00:01:38,430
polish in this talk that's what I'm

00:01:34,650 --> 00:01:40,710
blaming it on so yeah Nick's wrt or

00:01:38,430 --> 00:01:43,439
Nick's worked I came up with the name

00:01:40,710 --> 00:01:44,670
like six months ago and only just today

00:01:43,439 --> 00:01:48,149
we realize I don't know how to pronounce

00:01:44,670 --> 00:01:50,390
it I'm gonna go with Nick's words but

00:01:48,149 --> 00:01:52,829
I'm not going to be standard about it so

00:01:50,390 --> 00:01:54,689
when I started out with it it's an

00:01:52,829 --> 00:01:57,649
experiment to see if I could use the

00:01:54,689 --> 00:02:00,840
Nick's package collection to build

00:01:57,649 --> 00:02:01,500
images for Wi-Fi routers of the kind you

00:02:00,840 --> 00:02:05,130
end

00:02:01,500 --> 00:02:07,110
open words or dd-wrt or tomato that kind

00:02:05,130 --> 00:02:08,070
of thing on a show of hands someone

00:02:07,110 --> 00:02:09,630
who's got one of these things at home

00:02:08,070 --> 00:02:10,850
who's tried slashing their roots or at

00:02:09,630 --> 00:02:16,500
home

00:02:10,850 --> 00:02:19,890
very few people yeah okay so this isn't

00:02:16,500 --> 00:02:21,570
sauce on your router the image you get

00:02:19,890 --> 00:02:25,290
out of it is just an image it's

00:02:21,570 --> 00:02:28,140
immutable you can't log into it and and

00:02:25,290 --> 00:02:30,440
you know um compiled packages or

00:02:28,140 --> 00:02:36,560
anything like that it's got no compilers

00:02:30,440 --> 00:02:39,600
yeah so why last November I built a new

00:02:36,560 --> 00:02:41,190
computer for my home office I see it

00:02:39,600 --> 00:02:44,459
there it's not actually on fire it's got

00:02:41,190 --> 00:02:47,190
LEDs inside it and I wanted to be able

00:02:44,459 --> 00:02:48,630
to back it up didn't want to build

00:02:47,190 --> 00:02:50,459
another computers back up host because

00:02:48,630 --> 00:02:53,459
that feels a bit sort of recursive so

00:02:50,459 --> 00:02:55,440
I've got a USB disk drive I've got a

00:02:53,459 --> 00:02:57,450
spare root with a USB ports a little

00:02:55,440 --> 00:03:00,270
what if you know I know there's some

00:02:57,450 --> 00:03:02,489
kind of embedded Linux thing inside that

00:03:00,270 --> 00:03:04,380
router maybe I can repurpose that and

00:03:02,489 --> 00:03:08,220
get some use out of it instead of

00:03:04,380 --> 00:03:10,260
throwing it to be waste why not use open

00:03:08,220 --> 00:03:13,200
wrt and the first thing I have to say

00:03:10,260 --> 00:03:15,780
here is oh that is great and there's so

00:03:13,200 --> 00:03:18,510
much work going into it so many people

00:03:15,780 --> 00:03:20,100
working on different random problems

00:03:18,510 --> 00:03:23,940
which you would never even hoped able to

00:03:20,100 --> 00:03:25,530
replicate as a small developer you know

00:03:23,940 --> 00:03:27,180
I didn't realize how great I tried

00:03:25,530 --> 00:03:29,220
bringing the mainstream Unix Linux

00:03:27,180 --> 00:03:32,280
kernel up on a mips device and found out

00:03:29,220 --> 00:03:34,850
how no Ethernet divider and a rooster

00:03:32,280 --> 00:03:38,280
with no Ethernet driver is a little bit

00:03:34,850 --> 00:03:40,739
it doesn't root much yeah

00:03:38,280 --> 00:03:43,440
however I'm not going to be telling

00:03:40,739 --> 00:03:45,810
anyone anything you don't already know

00:03:43,440 --> 00:03:47,370
but when you're talking about divergent

00:03:45,810 --> 00:03:50,700
convergent and Krong your change

00:03:47,370 --> 00:03:53,370
management open wrt is on the left-hand

00:03:50,700 --> 00:03:55,350
end of the scale to a big exchange you

00:03:53,370 --> 00:03:59,010
know you have sixty billion different

00:03:55,350 --> 00:04:00,870
packages in open wrt you install them

00:03:59,010 --> 00:04:02,970
imperatively by typing commands on other

00:04:00,870 --> 00:04:06,390
thing itself then you configure it using

00:04:02,970 --> 00:04:08,459
a GUI six months later you know you hope

00:04:06,390 --> 00:04:10,709
great the firmware or the Rooter blows

00:04:08,459 --> 00:04:13,080
up in your new hardware or your ISP

00:04:10,709 --> 00:04:14,720
cells triumphs actually resetting it I

00:04:13,080 --> 00:04:18,079
can you remember every

00:04:14,720 --> 00:04:19,600
you did maybe some people are diligent

00:04:18,079 --> 00:04:22,730
enough to back these things up properly

00:04:19,600 --> 00:04:24,080
but I am certainly not so I got to

00:04:22,730 --> 00:04:25,610
thinking you know maybe there is a more

00:04:24,080 --> 00:04:28,960
general problem to be solved here than

00:04:25,610 --> 00:04:31,820
just somewhere safe to store my rip CDs

00:04:28,960 --> 00:04:34,880
so yeah did some hacking did some

00:04:31,820 --> 00:04:35,360
blogging got distracted got distracted

00:04:34,880 --> 00:04:37,100
again

00:04:35,360 --> 00:04:38,630
oh god my dad took trash and and you

00:04:37,100 --> 00:04:41,530
know Spanish to trash my own home

00:04:38,630 --> 00:04:44,690
network in several different fun ways

00:04:41,530 --> 00:04:47,090
here we are a year on it done there's a

00:04:44,690 --> 00:04:48,500
little bit of scope creep I did the

00:04:47,090 --> 00:04:50,060
backup server the backup server is

00:04:48,500 --> 00:04:51,410
working fine that's great you know I did

00:04:50,060 --> 00:04:54,260
what I came for

00:04:51,410 --> 00:04:58,010
I repurposed the the wireless range

00:04:54,260 --> 00:05:00,220
extender in my study upstairs to run

00:04:58,010 --> 00:05:02,420
accessibility as well

00:05:00,220 --> 00:05:03,890
the roots are downstairs which is the

00:05:02,420 --> 00:05:06,470
one that she connected to broadband I'm

00:05:03,890 --> 00:05:10,790
still working on that take over the

00:05:06,470 --> 00:05:12,680
world it's kind of a stretch goal and

00:05:10,790 --> 00:05:15,169
the other question I said it was an

00:05:12,680 --> 00:05:17,300
experiment so you know what what were

00:05:15,169 --> 00:05:20,230
the findings I guess isn't it's good for

00:05:17,300 --> 00:05:22,250
this stuff and emphatically yes it is

00:05:20,230 --> 00:05:25,730
okay I'm kind of preaching to the

00:05:22,250 --> 00:05:28,910
converted but the next language I mean

00:05:25,730 --> 00:05:30,950
is you're a compared to anything else

00:05:28,910 --> 00:05:32,990
I've used in terms of you know

00:05:30,950 --> 00:05:37,550
configuration management or or building

00:05:32,990 --> 00:05:39,560
is is superb the everyone knows that the

00:05:37,550 --> 00:05:41,419
cross-compilation stuff you might not

00:05:39,560 --> 00:05:45,500
know unless you've been involved it but

00:05:41,419 --> 00:05:46,550
has all sort of beginning of 2018 a lot

00:05:45,500 --> 00:05:49,729
of work being done last year and

00:05:46,550 --> 00:05:52,600
cross-compilation mix and it's a it's

00:05:49,729 --> 00:05:57,260
really made it easy to build knit MIPS

00:05:52,600 --> 00:06:00,130
binaries from an x86 system and the

00:05:57,260 --> 00:06:02,150
support for for muzzle which is or

00:06:00,130 --> 00:06:03,950
alternative see like we said the DC

00:06:02,150 --> 00:06:06,200
degree it's smaller and faster and more

00:06:03,950 --> 00:06:09,680
compliant and works better on embedded

00:06:06,200 --> 00:06:12,260
systems and I mean I think that's pretty

00:06:09,680 --> 00:06:14,690
new as well it's certainly the case that

00:06:12,260 --> 00:06:15,890
I have hardly ever had problems trying

00:06:14,690 --> 00:06:19,430
to use C library there's not too many

00:06:15,890 --> 00:06:21,860
library so on those three counts MIPS

00:06:19,430 --> 00:06:23,880
sorry on those three counts Nix is

00:06:21,860 --> 00:06:28,240
pretty awesome

00:06:23,880 --> 00:06:29,830
overlays again you know you could do

00:06:28,240 --> 00:06:32,560
various ways of customizing derivations

00:06:29,830 --> 00:06:33,850
before overlays came in but having a

00:06:32,560 --> 00:06:35,710
consistent way of doing that as

00:06:33,850 --> 00:06:37,600
reasonably principled is is really

00:06:35,710 --> 00:06:41,230
useful and really helpful for making

00:06:37,600 --> 00:06:43,470
actually smaller I know we're talking

00:06:41,230 --> 00:06:52,120
about a lot more in a minute

00:06:43,470 --> 00:06:55,240
so yeah there are things I've learned

00:06:52,120 --> 00:06:56,890
along the way that if you wanted to get

00:06:55,240 --> 00:06:59,919
into it you would also end up learning

00:06:56,890 --> 00:07:01,960
sooner or later you know how to read and

00:06:59,919 --> 00:07:04,120
write Nick starvation's stuff about

00:07:01,960 --> 00:07:06,820
Linux stuff about how the kernel is put

00:07:04,120 --> 00:07:10,890
together things about networks which is

00:07:06,820 --> 00:07:15,610
TCP Ethernet what's a Mac what's a PHY

00:07:10,890 --> 00:07:18,040
over these fixed points six points are

00:07:15,610 --> 00:07:19,060
awesome I I know enough to hand rave

00:07:18,040 --> 00:07:20,800
about them I don't know enough to

00:07:19,060 --> 00:07:23,830
explain them so I'm gonna do some hand

00:07:20,800 --> 00:07:29,560
waiting in a minute if you have enough

00:07:23,830 --> 00:07:31,930
coffee the rest of it is easy so so what

00:07:29,560 --> 00:07:37,540
do you actually need obviously you need

00:07:31,930 --> 00:07:43,000
some kind of thing to run it on this is

00:07:37,540 --> 00:07:45,310
the GL inot mt 300 n which is like ng L

00:07:43,000 --> 00:07:49,780
own at mt 300 a but it's a different

00:07:45,310 --> 00:07:52,210
color slightly cheaper and the hardware

00:07:49,780 --> 00:07:54,070
inside it's slightly different so you

00:07:52,210 --> 00:07:59,200
know these things these are not your

00:07:54,070 --> 00:08:01,750
typical pcs they're smaller slower no

00:07:59,200 --> 00:08:03,190
graphics hardware so you establish a

00:08:01,750 --> 00:08:05,350
console connection to it by attaching

00:08:03,190 --> 00:08:06,880
three wires to it which is more or less

00:08:05,350 --> 00:08:08,740
complicated depending on whether there

00:08:06,880 --> 00:08:12,870
are pin headers hair to attachment or

00:08:08,740 --> 00:08:15,130
you to go and do some bad silvering

00:08:12,870 --> 00:08:19,330
obviously the architecture is different

00:08:15,130 --> 00:08:20,740
it runs some variety of MIPS the ones

00:08:19,330 --> 00:08:23,560
I've tried say if I do anyway I guess

00:08:20,740 --> 00:08:25,870
some people using arm for this stuff you

00:08:23,560 --> 00:08:27,820
don't boot from the BIOS or from you a

00:08:25,870 --> 00:08:29,020
fee you didn't use a grub users and

00:08:27,820 --> 00:08:30,340
called do boots which I'll be showing

00:08:29,020 --> 00:08:36,919
you in a minute

00:08:30,340 --> 00:08:39,589
and the way the the particular board

00:08:36,919 --> 00:08:42,770
knows about all the bits that are in it

00:08:39,589 --> 00:08:47,089
like you know where the GPIO pins are

00:08:42,770 --> 00:08:49,460
where the LEDs are how to make the the

00:08:47,089 --> 00:08:53,450
B's net how to initialize the little

00:08:49,460 --> 00:08:55,160
network switch inside it on a grown-up

00:08:53,450 --> 00:08:57,470
computer like a PC you've got things

00:08:55,160 --> 00:09:01,670
like a CPI where it can sort of go and

00:08:57,470 --> 00:09:03,020
enumerate the bus and find out where all

00:09:01,670 --> 00:09:06,589
the things are because all the things I

00:09:03,020 --> 00:09:10,010
say look I'm over here on these older

00:09:06,589 --> 00:09:11,360
smaller systems either that knowledge of

00:09:10,010 --> 00:09:14,690
compilers of the kernel that the

00:09:11,360 --> 00:09:17,450
particular board you're using or on some

00:09:14,690 --> 00:09:19,880
varieties as a device tree which is

00:09:17,450 --> 00:09:22,520
basically a data file with the same

00:09:19,880 --> 00:09:24,800
information in it so we extracted that

00:09:22,520 --> 00:09:27,770
code it's data the device tree is a

00:09:24,800 --> 00:09:30,589
better way of doing it but not all ports

00:09:27,770 --> 00:09:32,450
have been updated to use it yet yeah so

00:09:30,589 --> 00:09:34,250
in terms of mix wrt of users play with

00:09:32,450 --> 00:09:38,540
it's the best supported boards are the

00:09:34,250 --> 00:09:43,630
ones based on the AI 9330 or the the

00:09:38,540 --> 00:09:45,920
ones based on the mediatek sox NSA the

00:09:43,630 --> 00:09:49,640
the blue one and the yellow one are both

00:09:45,920 --> 00:09:52,880
cheap and both easy to get hold off and

00:09:49,640 --> 00:09:54,250
also no soldering required you just pop

00:09:52,880 --> 00:09:59,450
the top off

00:09:54,250 --> 00:10:01,670
is there an emulator qemu works but it

00:09:59,450 --> 00:10:04,220
the hardware emulates not very much like

00:10:01,670 --> 00:10:08,150
the real hardware testing on the real

00:10:04,220 --> 00:10:11,650
hair is actually not that bad so you

00:10:08,150 --> 00:10:14,959
need to connect it together to something

00:10:11,650 --> 00:10:17,630
this is my test set up is a little bit

00:10:14,959 --> 00:10:20,720
more baroque than it needs to be that

00:10:17,630 --> 00:10:22,580
you'll see is the the device itself with

00:10:20,720 --> 00:10:25,490
three cables coming out of it for the

00:10:22,580 --> 00:10:27,320
serial console serial console is TTL

00:10:25,490 --> 00:10:29,300
level logic it runs into something which

00:10:27,320 --> 00:10:32,240
understands that in my case at the

00:10:29,300 --> 00:10:36,709
moment has a Raspberry Pi because I blew

00:10:32,240 --> 00:10:39,560
up my serial cable and then that that is

00:10:36,709 --> 00:10:42,620
though that the most overkill use ever

00:10:39,560 --> 00:10:43,340
even on you know young which basically

00:10:42,620 --> 00:10:45,200
exists

00:10:43,340 --> 00:10:48,170
toggle us p.m. how often off so when a

00:10:45,200 --> 00:10:52,279
widget solid I can turn it off and on

00:10:48,170 --> 00:10:57,770
again without having to go upstairs and

00:10:52,279 --> 00:10:59,750
pull the USB cable out so I'm going to

00:10:57,770 --> 00:11:02,180
do a little demonstration of what it

00:10:59,750 --> 00:11:03,650
looks like to build on or what the

00:11:02,180 --> 00:11:06,110
actual hardware looks like I'm not gonna

00:11:03,650 --> 00:11:07,130
demo it on this this thing here because

00:11:06,110 --> 00:11:09,589
it would take too long to plug

00:11:07,130 --> 00:11:11,870
everything together I'm gonna attempt a

00:11:09,589 --> 00:11:15,020
cessation base system at home and show

00:11:11,870 --> 00:11:16,910
you it there you ask what could go wrong

00:11:15,020 --> 00:11:19,250
well this guy here actually

00:11:16,910 --> 00:11:20,690
my son has drops of the age where he

00:11:19,250 --> 00:11:23,630
really likes to turning the power on or

00:11:20,690 --> 00:11:25,520
off in the front of the machine so

00:11:23,630 --> 00:11:28,450
hopefully it's still there when we get

00:11:25,520 --> 00:11:31,450
there we're just about to go find out

00:11:28,450 --> 00:11:31,450
right

00:11:38,360 --> 00:11:43,970
nope

00:11:40,500 --> 00:11:43,970
that's the way there is it

00:11:47,730 --> 00:11:55,429
ah it was that one okay so let's have a

00:11:52,049 --> 00:11:55,429
Z columns as a good Lord intended

00:12:04,510 --> 00:12:09,250
my handler most on my system is talent

00:12:07,089 --> 00:12:10,630
which I chose a long time ago because I

00:12:09,250 --> 00:12:14,019
couldn't type telnet correctly without

00:12:10,630 --> 00:12:25,149
typing it so that the host name theme is

00:12:14,019 --> 00:12:30,610
is all typos as well so here we are I'm

00:12:25,149 --> 00:12:31,959
going to start by making it and it does

00:12:30,610 --> 00:12:33,190
nothing of course because I made it last

00:12:31,959 --> 00:12:37,660
night to check that everything worked

00:12:33,190 --> 00:12:39,910
and therefore nothing to be done so

00:12:37,660 --> 00:12:41,350
there's a little make file just because

00:12:39,910 --> 00:12:44,760
there's an awful lot of parameters to

00:12:41,350 --> 00:12:46,870
give to Nik builds so the particular

00:12:44,760 --> 00:12:48,089
derivation we're using I'll show you

00:12:46,870 --> 00:12:50,970
that limit it's called back up host

00:12:48,089 --> 00:12:53,380
we're building Watauga called from where

00:12:50,970 --> 00:12:55,449
various parameters we're passing it for

00:12:53,380 --> 00:12:58,480
things like SSH keys and an arcing

00:12:55,449 --> 00:13:02,680
password and and other stuff and you'll

00:12:58,480 --> 00:13:05,529
see it has eventually built a file in

00:13:02,680 --> 00:13:08,910
that directory there and then it's

00:13:05,529 --> 00:13:14,010
passing it into my TFTP server directory

00:13:08,910 --> 00:13:14,010
and I'm just going to show you that

00:13:22,550 --> 00:13:26,240
yeah Larry says so that is my film Wi-Fi

00:13:25,220 --> 00:13:29,390
which is about four and a half megabytes

00:13:26,240 --> 00:13:35,149
in size which is okay for that

00:13:29,390 --> 00:13:40,899
particular target device put that back

00:13:35,149 --> 00:13:40,899
in the stand good

00:13:46,640 --> 00:13:50,209
so I'm going to introduce some

00:13:48,500 --> 00:13:52,630
insignificant whitespace into one of

00:13:50,209 --> 00:13:52,630
these derivations

00:13:55,500 --> 00:13:58,400
oh that's nice

00:13:58,840 --> 00:14:02,640
or I'll come back to that

00:14:05,990 --> 00:14:15,320
here we are so this is is that volume

00:14:12,380 --> 00:14:18,850
level okay for everyone yeah so this is

00:14:15,320 --> 00:14:22,070
the device itself I'm connected to it

00:14:18,850 --> 00:14:26,810
over an SSH section over an SSH section

00:14:22,070 --> 00:14:28,250
over a mini comma serial session over

00:14:26,810 --> 00:14:30,530
the three wires you saw at the picture

00:14:28,250 --> 00:14:31,790
into the actual the hardware device I'm

00:14:30,530 --> 00:14:34,900
just gonna reset it just to show you

00:14:31,790 --> 00:14:40,250
it's there and I'm gonna stop auto boot

00:14:34,900 --> 00:14:44,390
so this is this single you boot it's the

00:14:40,250 --> 00:14:46,250
universal bootloader it's called the

00:14:44,390 --> 00:14:50,480
universal bootloader what actually

00:14:46,250 --> 00:14:54,830
happens is that hydro manufacturers take

00:14:50,480 --> 00:14:58,610
it for kit hack it up burn it on to

00:14:54,830 --> 00:15:00,530
their machines getting a new version of

00:14:58,610 --> 00:15:03,410
you boot onto your device is a bit like

00:15:00,530 --> 00:15:06,770
trying to put coreboot onto your um you

00:15:03,410 --> 00:15:08,870
know laptop it's it can be done but if

00:15:06,770 --> 00:15:10,850
it goes wrong you need JTAG debuggers

00:15:08,870 --> 00:15:13,790
and stuff like that so generally

00:15:10,850 --> 00:15:16,370
speaking the one you've got is you know

00:15:13,790 --> 00:15:18,200
the one you're gonna live with unless

00:15:16,370 --> 00:15:21,140
you want to get more complicated than

00:15:18,200 --> 00:15:24,490
I've got so anyway you've got our

00:15:21,140 --> 00:15:26,780
collection of commands and nubu here

00:15:24,490 --> 00:15:29,150
which do things like print the

00:15:26,780 --> 00:15:32,030
environment variable boots change memory

00:15:29,150 --> 00:15:39,500
addresses let you do things with flash

00:15:32,030 --> 00:15:42,260
and so on so that is to print n they are

00:15:39,500 --> 00:15:45,860
more or less defective depending on the

00:15:42,260 --> 00:15:47,960
manufacturer so you know in theory if

00:15:45,860 --> 00:15:50,330
you've done a proper good install of you

00:15:47,960 --> 00:15:51,530
boot then this environment will be

00:15:50,330 --> 00:15:56,120
writable and you can change the

00:15:51,530 --> 00:15:58,130
parameters here often you'll find that

00:15:56,120 --> 00:15:59,540
the hardener actually just hard-coded

00:15:58,130 --> 00:16:05,120
the environment and you cannot actually

00:15:59,540 --> 00:16:09,020
save anything which is annoying but not

00:16:05,120 --> 00:16:10,610
insuperable so I'm gonna boot this

00:16:09,020 --> 00:16:13,670
device

00:16:10,610 --> 00:16:19,040
and I'm gonna do it with slightly cheesy

00:16:13,670 --> 00:16:20,449
way by inserting a file empty boot dot

00:16:19,040 --> 00:16:22,850
script because there's at five or six

00:16:20,449 --> 00:16:25,269
layers I have to type to get it to boot

00:16:22,850 --> 00:16:25,269
from RAM

00:16:28,070 --> 00:16:31,810
whoo okay off he goes

00:16:38,990 --> 00:16:44,290
okay and that is doing exciting stuff

00:16:45,330 --> 00:16:53,370
just going back through the scroll back

00:16:47,709 --> 00:16:53,370
here into UNIX quite a lot of it

00:16:53,830 --> 00:16:57,640
so what did it do these are all u-boot

00:16:55,930 --> 00:17:03,459
commands that's typing in oh it's

00:16:57,640 --> 00:17:05,679
booting the TFTP it's boots there

00:17:03,459 --> 00:17:07,020
there's the TFTP command is copying into

00:17:05,679 --> 00:17:08,920
a particular start address which is

00:17:07,020 --> 00:17:11,470
carefully chosen not to clashing

00:17:08,920 --> 00:17:13,660
anything else and then the boot M

00:17:11,470 --> 00:17:15,280
command is a boot from memory so there

00:17:13,660 --> 00:17:18,010
you see the CFG happening there it's

00:17:15,280 --> 00:17:20,020
loading the thing down that's where it's

00:17:18,010 --> 00:17:25,179
sorry I'm pointing at my screen instead

00:17:20,020 --> 00:17:27,069
of your three that's that's the actual

00:17:25,179 --> 00:17:29,830
where Linux actually starts happening

00:17:27,069 --> 00:17:36,160
and starting kernel and the rest of it

00:17:29,830 --> 00:17:41,400
is all Linux and there it is and just to

00:17:36,160 --> 00:17:44,730
show you that we're not in x86 anymore

00:17:41,400 --> 00:17:47,380
yes it is running guru shell on console

00:17:44,730 --> 00:17:50,110
this could be considered a security

00:17:47,380 --> 00:17:51,280
problem if your threat model includes

00:17:50,110 --> 00:17:56,410
people praying the covers off and

00:17:51,280 --> 00:17:58,570
attaching three wires to the that can't

00:17:56,410 --> 00:18:02,350
be configured of course so there we are

00:17:58,570 --> 00:18:04,540
it's a mediatek mt6752 jail 300 200 a is

00:18:02,350 --> 00:18:06,000
running on a mips it's true no boga mips

00:18:04,540 --> 00:18:10,290
if they care for anything anymore and

00:18:06,000 --> 00:18:10,290
and various other stuff there

00:18:13,330 --> 00:18:21,670
that concludes the demonstration I think

00:18:15,430 --> 00:18:23,560
probably so how does it work I don't

00:18:21,670 --> 00:18:26,410
know if any of that writing is readable

00:18:23,560 --> 00:18:28,270
from where anyone is sitting it's

00:18:26,410 --> 00:18:31,830
surprisingly take longer to draw that

00:18:28,270 --> 00:18:36,100
and I thought it was going to so what

00:18:31,830 --> 00:18:39,670
I'd like you to focus on here is this is

00:18:36,100 --> 00:18:41,200
a description of the build process this

00:18:39,670 --> 00:18:43,090
is our output at the bottom which is the

00:18:41,200 --> 00:18:47,650
firmware binary that we just saw being

00:18:43,090 --> 00:18:49,660
TFTP booted in that image you've got a

00:18:47,650 --> 00:18:51,850
kernel image which is this you image

00:18:49,660 --> 00:18:53,290
thing here you've got a filesystem image

00:18:51,850 --> 00:18:54,610
for the root filesystem and the two of

00:18:53,290 --> 00:18:58,630
them basically just splice it together a

00:18:54,610 --> 00:19:01,840
DD filesystem image is generated from a

00:18:58,630 --> 00:19:04,900
configuration which is a nix value I'll

00:19:01,840 --> 00:19:07,150
show you in a moment which has got it's

00:19:04,900 --> 00:19:08,440
an actual set with various different

00:19:07,150 --> 00:19:10,420
things you want to go into your image

00:19:08,440 --> 00:19:14,800
and the image builder that makes the

00:19:10,420 --> 00:19:16,090
image out of it some of the things I'm

00:19:14,800 --> 00:19:18,310
gonna talk about modules in a minute and

00:19:16,090 --> 00:19:19,780
a lot of people talk about modules these

00:19:18,310 --> 00:19:24,100
aren't Nick sauce modules these are

00:19:19,780 --> 00:19:25,540
something else I named them badly so you

00:19:24,100 --> 00:19:27,460
start with an empty configuration you're

00:19:25,540 --> 00:19:29,620
applying modules to it until you've got

00:19:27,460 --> 00:19:31,030
the config you want and then you send it

00:19:29,620 --> 00:19:38,500
into the Builder and it builds your

00:19:31,030 --> 00:19:39,700
image some of the things in your some

00:19:38,500 --> 00:19:41,650
things your figuration of package

00:19:39,700 --> 00:19:44,380
references so we also certainly expect

00:19:41,650 --> 00:19:48,120
answers there we've got an overlay to

00:19:44,380 --> 00:19:50,830
make them smaller and kinder and so on

00:19:48,120 --> 00:19:53,740
the other half of the picture is the

00:19:50,830 --> 00:19:56,370
kernel build which comes from the kernel

00:19:53,740 --> 00:19:59,080
doggy upstream also comes from open wrt

00:19:56,370 --> 00:20:02,110
they get merged together it gets built

00:19:59,080 --> 00:20:04,090
we get the vm linux file out of it we

00:20:02,110 --> 00:20:05,050
stick the device tree into it which is

00:20:04,090 --> 00:20:07,450
the data file I was telling you about

00:20:05,050 --> 00:20:09,820
earlier that gets you do bootable image

00:20:07,450 --> 00:20:12,540
and so that's the the other half of the

00:20:09,820 --> 00:20:12,540
output that

00:20:13,410 --> 00:20:19,510
so I think three things in that picture

00:20:16,960 --> 00:20:25,170
which you would have to touch if you are

00:20:19,510 --> 00:20:27,880
hacking on this are the package overlay

00:20:25,170 --> 00:20:30,010
for including packages and making sure

00:20:27,880 --> 00:20:32,340
your packages are gonna build on it the

00:20:30,010 --> 00:20:34,450
module system which is barely named and

00:20:32,340 --> 00:20:37,360
potentially the kernel build if you want

00:20:34,450 --> 00:20:39,640
to get detailed about it and we're going

00:20:37,360 --> 00:20:41,050
to have a look at each of those so

00:20:39,640 --> 00:20:43,390
there's good news there's lots of good

00:20:41,050 --> 00:20:46,300
news lots of packages already just works

00:20:43,390 --> 00:20:49,060
which is awesome we quite often have to

00:20:46,300 --> 00:20:51,130
patch our packages because you're not

00:20:49,060 --> 00:20:52,810
using this out of C library or something

00:20:51,130 --> 00:20:56,440
- don't cross compile so we need so

00:20:52,810 --> 00:20:59,430
disabled across be the do check clauses

00:20:56,440 --> 00:21:02,470
where they're in if they're

00:20:59,430 --> 00:21:04,150
unconditional sometimes you get very big

00:21:02,470 --> 00:21:06,250
closures and moko was talking about big

00:21:04,150 --> 00:21:08,950
closures yesterday and I really feel it

00:21:06,250 --> 00:21:11,950
on this thing because you're you know we

00:21:08,950 --> 00:21:14,380
have a limited very limited space it can

00:21:11,950 --> 00:21:16,720
be as little as four megabytes you don't

00:21:14,380 --> 00:21:21,640
want the getting one haqiqa mass of

00:21:16,720 --> 00:21:24,910
firefox in there so there are various

00:21:21,640 --> 00:21:26,620
hacks we've done to remove library

00:21:24,910 --> 00:21:29,550
dependencies structural features where

00:21:26,620 --> 00:21:31,780
the original derivation included them

00:21:29,550 --> 00:21:36,670
get rid of shell scripts that depend on

00:21:31,780 --> 00:21:38,650
bash because mash the huge yeah if all

00:21:36,670 --> 00:21:40,900
those fails just run strings and grep

00:21:38,650 --> 00:21:46,180
for and extort a sub that's a good way

00:21:40,900 --> 00:21:47,680
of finding leaky bits and your closures

00:21:46,180 --> 00:21:50,290
make sure we've stripped everything and

00:21:47,680 --> 00:21:52,510
we also slightly hacked up the squash FS

00:21:50,290 --> 00:21:54,340
generation to remove static libraries

00:21:52,510 --> 00:21:55,570
from the generated output because who is

00:21:54,340 --> 00:22:00,100
ever going to use those when you don't

00:21:55,570 --> 00:22:01,630
have compiler so here's an example this

00:22:00,100 --> 00:22:04,270
is one of the entries in our package

00:22:01,630 --> 00:22:07,450
overlay for the host app daemon a you

00:22:04,270 --> 00:22:10,300
see it's based on the upstream one in

00:22:07,450 --> 00:22:11,980
six packages we've over rated the SQLite

00:22:10,300 --> 00:22:15,190
attribute because we don't need it

00:22:11,980 --> 00:22:15,910
and we've sorry the SQLite Paramus who

00:22:15,190 --> 00:22:17,680
we've overridden

00:22:15,910 --> 00:22:19,930
then which one is override the

00:22:17,680 --> 00:22:22,540
attributes as well and we said we don't

00:22:19,930 --> 00:22:25,360
want extra config and we're gonna use

00:22:22,540 --> 00:22:27,519
this configure file

00:22:25,360 --> 00:22:30,820
which we generated here instead of using

00:22:27,519 --> 00:22:32,679
what they didn't expect is one does and

00:22:30,820 --> 00:22:34,960
that so that's a huge saving on her

00:22:32,679 --> 00:22:38,850
stamp D and that's how I've got a way

00:22:34,960 --> 00:22:38,850
Linux and running in four makes of flash

00:22:39,149 --> 00:22:44,379
modules not the Nexus module system

00:22:41,710 --> 00:22:46,450
we've had a lot this week this couple of

00:22:44,379 --> 00:22:48,009
days about the module system are the

00:22:46,450 --> 00:22:50,529
chief reason for writing it differently

00:22:48,009 --> 00:22:53,019
was it seemed like fun

00:22:50,529 --> 00:22:54,759
middleware might be a better name a

00:22:53,019 --> 00:22:56,619
module is a function which applies to

00:22:54,759 --> 00:23:00,220
configuration and generates a new

00:22:56,619 --> 00:23:02,559
configuration and we apply them

00:23:00,220 --> 00:23:05,230
repeatedly in the same kind of pattern

00:23:02,559 --> 00:23:07,539
as overlays do except we're applying

00:23:05,230 --> 00:23:09,309
them to the configuration rather than

00:23:07,539 --> 00:23:15,450
applying them to the next package

00:23:09,309 --> 00:23:15,450
derivation so your configuration object

00:23:16,109 --> 00:23:24,909
that's really bad I don't have a picture

00:23:18,249 --> 00:23:27,899
of the configuration object oh wow let's

00:23:24,909 --> 00:23:27,899
get forward a little bit there

00:23:34,140 --> 00:23:37,500
what's it doing

00:23:41,500 --> 00:23:47,950
Hey right okay there's reveal though Jas

00:23:45,549 --> 00:23:52,990
is three-dimensional tonight navigations

00:23:47,950 --> 00:23:55,900
funky so the essence of it is that in

00:23:52,990 --> 00:23:57,429
your own derivation you'll start with

00:23:55,900 --> 00:23:59,340
the base configuration which has almost

00:23:57,429 --> 00:24:04,799
nothing in it it has empty arrays of

00:23:59,340 --> 00:24:07,330
files packages some other stuff

00:24:04,799 --> 00:24:09,190
you will then apply each module in

00:24:07,330 --> 00:24:12,760
sequence to it so that's the harder

00:24:09,190 --> 00:24:14,679
module for the device that's in going to

00:24:12,760 --> 00:24:17,230
include narsing server that's going this

00:24:14,679 --> 00:24:19,450
is H server that's going to do busybox

00:24:17,230 --> 00:24:21,490
which is pretty fundamental this

00:24:19,450 --> 00:24:24,610
particular device is my backup host so

00:24:21,490 --> 00:24:26,950
it's got a USB disk module in it with

00:24:24,610 --> 00:24:28,570
some parameters there's some stuff of

00:24:26,950 --> 00:24:30,840
the kernel there's some stuff for

00:24:28,570 --> 00:24:33,820
configuring the network switch which is

00:24:30,840 --> 00:24:35,350
integrated into device and you know

00:24:33,820 --> 00:24:39,730
we're running syslog d-u we're running

00:24:35,350 --> 00:24:41,770
ntpd we running a DHCP client and to

00:24:39,730 --> 00:24:44,380
build the firm we merge all the modules

00:24:41,770 --> 00:24:46,600
together and pass it to the firmware

00:24:44,380 --> 00:24:51,450
generation function and there's our

00:24:46,600 --> 00:24:54,280
firmware up in the modules themselves

00:24:51,450 --> 00:24:57,549
actually you look like this you see

00:24:54,280 --> 00:25:02,679
their whole fixed point pattern up here

00:24:57,549 --> 00:25:08,350
was itself in the super lalalalala

00:25:02,679 --> 00:25:10,750
so that's our parent module we're adding

00:25:08,350 --> 00:25:13,780
a service called host app D we are

00:25:10,750 --> 00:25:15,640
adding the host up D package and we're

00:25:13,780 --> 00:25:16,780
adding a write down at the bottom I

00:25:15,640 --> 00:25:18,580
don't know if anyone can see over over

00:25:16,780 --> 00:25:20,710
his head right down at the bottom we're

00:25:18,580 --> 00:25:24,210
adding a file called etc dot who stuck

00:25:20,710 --> 00:25:28,120
do dot PSK wishes it's also got some

00:25:24,210 --> 00:25:29,470
content and a mode in it and those

00:25:28,120 --> 00:25:30,750
styles are written into flash the same

00:25:29,470 --> 00:25:34,480
with everything else

00:25:30,750 --> 00:25:35,740
oh I'm running out of time talk about

00:25:34,480 --> 00:25:37,510
adding new hardware devices which is

00:25:35,740 --> 00:25:41,860
great because of the complicated bit and

00:25:37,510 --> 00:25:44,559
I'm going to skim through it new

00:25:41,860 --> 00:25:46,390
hardware diet is I've I think I've had

00:25:44,559 --> 00:25:48,850
it running on four different devices so

00:25:46,390 --> 00:25:51,220
far we're all sort of one or two of the

00:25:48,850 --> 00:25:53,480
various MIPS families it is much much

00:25:51,220 --> 00:25:55,730
much easier if it already works in it

00:25:53,480 --> 00:25:58,370
in fact I wouldn't even bother trying it

00:25:55,730 --> 00:26:01,029
unless you want a project to try and

00:25:58,370 --> 00:26:03,559
build something isn't you already

00:26:01,029 --> 00:26:05,929
there's kind of things you'll expect to

00:26:03,559 --> 00:26:06,880
have to do is find out what sock family

00:26:05,929 --> 00:26:09,740
it runs on is a

00:26:06,880 --> 00:26:12,169
arthrosis an are a link is it immediate

00:26:09,740 --> 00:26:15,289
tech is it something else because that's

00:26:12,169 --> 00:26:18,139
gonna impact whether it uses device tree

00:26:15,289 --> 00:26:20,149
or something else find out how to have

00:26:18,139 --> 00:26:22,070
to have serial cable to its I've burnt

00:26:20,149 --> 00:26:24,740
one rooster by doing some really bad

00:26:22,070 --> 00:26:26,630
soldering on it already I say does he

00:26:24,740 --> 00:26:28,370
use device tree and then you finally

00:26:26,630 --> 00:26:31,610
find out things like where is wearing

00:26:28,370 --> 00:26:33,139
memory is the flash how do I configure

00:26:31,610 --> 00:26:35,330
the network switch such that the

00:26:33,139 --> 00:26:40,100
Ethernet in the kernel actually gets out

00:26:35,330 --> 00:26:41,450
to the box all of this information for

00:26:40,100 --> 00:26:44,929
all the support of devices and the

00:26:41,450 --> 00:26:47,000
devices Nicks and there's a lot of

00:26:44,929 --> 00:26:49,610
commentary in there as well if you are

00:26:47,000 --> 00:26:52,970
minded to do your own device you would

00:26:49,610 --> 00:26:54,620
do that and yeah if you can cobble

00:26:52,970 --> 00:26:55,820
together something to turn its power and

00:26:54,620 --> 00:26:58,039
offering motely you'll find a remote

00:26:55,820 --> 00:27:01,039
development a lot easier for the early

00:26:58,039 --> 00:27:03,440
stages to bring up I can I can show you

00:27:01,039 --> 00:27:07,370
my odd do you know it's not pretty but

00:27:03,440 --> 00:27:10,250
it was stuff I had around so future

00:27:07,370 --> 00:27:12,889
plans obviously the first thing to do is

00:27:10,250 --> 00:27:14,149
finish the PPP over Internet supports

00:27:12,889 --> 00:27:17,179
because then I can actually run it's on

00:27:14,149 --> 00:27:18,409
my primary roof at home which the family

00:27:17,179 --> 00:27:22,429
will love I'm sure when it starts

00:27:18,409 --> 00:27:26,210
crashing better story for upgrades I've

00:27:22,429 --> 00:27:29,809
got a plan for upgrading without having

00:27:26,210 --> 00:27:31,490
to flashing it every time better story

00:27:29,809 --> 00:27:33,139
for the first time supports which

00:27:31,490 --> 00:27:35,690
doesn't involve attaching cables as a

00:27:33,139 --> 00:27:37,370
device that's going to depend on the

00:27:35,690 --> 00:27:39,799
device because you know your vendor

00:27:37,370 --> 00:27:42,260
firmware may allow you to upgrade freely

00:27:39,799 --> 00:27:44,210
or may have restrictions on the format

00:27:42,260 --> 00:27:47,419
so that's gonna be a bit of fun working

00:27:44,210 --> 00:27:53,299
out and a better story for for secrets

00:27:47,419 --> 00:27:54,649
so at the moment we we don't put secrets

00:27:53,299 --> 00:27:55,970
in the next door on the build machine

00:27:54,649 --> 00:27:59,899
I've been quite careful about that

00:27:55,970 --> 00:28:02,330
because I checked that into github but

00:27:59,899 --> 00:28:04,610
they do end up burned into the image and

00:28:02,330 --> 00:28:06,710
if you want to change your password

00:28:04,610 --> 00:28:11,510
you end up having to reflash the image

00:28:06,710 --> 00:28:12,980
which doesn't feel quite right so design

00:28:11,510 --> 00:28:14,809
something which will get them for a

00:28:12,980 --> 00:28:17,090
writable file system or over a network

00:28:14,809 --> 00:28:19,820
or something else I can quite see the

00:28:17,090 --> 00:28:22,820
appeal of network based secrets if

00:28:19,820 --> 00:28:27,610
you're managing a decent-sized fleet of

00:28:22,820 --> 00:28:34,250
devices and perhaps even guessing users

00:28:27,610 --> 00:28:36,320
just me so that's it two minutes of

00:28:34,250 --> 00:28:39,669
questions ask me anything I may not know

00:28:36,320 --> 00:28:39,669
the answer I'm pretty handmade

00:28:45,970 --> 00:28:52,179
Araki thank you for your so who has got

00:28:48,379 --> 00:28:52,179
questions yes we've got a question I

00:28:52,690 --> 00:29:00,769
have a pile of wrt54gl routers up in my

00:28:58,070 --> 00:29:02,899
attic is the four megabytes of RAM is

00:29:00,769 --> 00:29:04,580
that it looked like your image was a

00:29:02,899 --> 00:29:06,649
little bit bigger is there a little bit

00:29:04,580 --> 00:29:09,440
more that could be cut to get this

00:29:06,649 --> 00:29:12,230
running on him that image is is bigger

00:29:09,440 --> 00:29:14,749
than the surrounding it has four major

00:29:12,230 --> 00:29:17,059
types of flash a nasa wireless extender

00:29:14,749 --> 00:29:19,070
upstairs I had to work quite hard to get

00:29:17,059 --> 00:29:23,779
it into 4 4 Meg's but things can be done

00:29:19,070 --> 00:29:25,090
with the whole Meg image here in the

00:29:23,779 --> 00:29:30,529
basement

00:29:25,090 --> 00:29:34,129
sorry hello thanks for the talk I'm

00:29:30,529 --> 00:29:38,779
wondering about whether we can implement

00:29:34,129 --> 00:29:41,960
DM Verity onto this DM Verity like the

00:29:38,779 --> 00:29:44,389
Merkel hash trees just to check the mm

00:29:41,960 --> 00:29:47,629
hashes of the filesystem it's not

00:29:44,389 --> 00:29:53,859
something I thought about it would be

00:29:47,629 --> 00:29:53,859
good right there yeah another question

00:29:53,950 --> 00:30:00,790
nope then tell me thank you very much

00:29:57,110 --> 00:30:00,790
again for you wonderful talk thank you

00:30:01,510 --> 00:30:07,420
[Applause]

00:30:04,420 --> 00:30:07,420

YouTube URL: https://www.youtube.com/watch?v=0K1qn60X2HI


