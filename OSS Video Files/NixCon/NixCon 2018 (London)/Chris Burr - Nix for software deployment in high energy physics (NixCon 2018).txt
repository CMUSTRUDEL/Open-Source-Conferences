Title: Chris Burr - Nix for software deployment in high energy physics (NixCon 2018)
Publication date: 2018-10-27
Playlist: NixCon 2018 (London)
Description: 
	High energy physics, and large scale research in general, has both common and unusual requirements for computing. Software must be distributed across a wide range of non-heterogeneous resources, with single experiments able to continuously utilise many 10,000s of globally distributed machines. Exploitation of data continues for decades after it is first taken, making reproducibility and stability essential. The use of Nix has been tested within LHCb, one of the four large experiments at the Large Hadron Collider (LHC). In this talk we will discuss the conclusions of this testing, how Nix is suited to the needs of the ""big science"" community, as well as presenting some of the challenges which have been found when testing Nix. --- Bio: PhD student in high energy physics at the University of Manchester, UK and a member of the LHCb Collaboration studying the decays of Charm quarks. Interested utilising tools from outside the high energy physics community to make the use of computing more efficient.

Slides: https://drive.google.com/open?id=0B4r1oNPr9K9Ld1lUdkVITmRoYm9ZMm5panR4aE1BN2FlSVhZ
Captions: 
	00:00:00,000 --> 00:00:05,549
all righty welcome back the next talk is

00:00:02,639 --> 00:00:07,379
going to be given by Chris Berg and he's

00:00:05,549 --> 00:00:09,120
going to be talking about Nick's for

00:00:07,379 --> 00:00:11,250
software development in high-energy

00:00:09,120 --> 00:00:13,380
physics and I'm sure that there is a

00:00:11,250 --> 00:00:14,730
joke about Nick's not being rocket

00:00:13,380 --> 00:00:17,070
science and physics in there somewhere

00:00:14,730 --> 00:00:19,289
but I'm just going to skip it and give

00:00:17,070 --> 00:00:27,269
the mic to Chris please give you a

00:00:19,289 --> 00:00:34,620
little round of applause okay thank you

00:00:27,269 --> 00:00:36,840
very much who I am so I'm experimental

00:00:34,620 --> 00:00:38,430
particle physics PhD student so at the

00:00:36,840 --> 00:00:40,230
University of Manchester so none of the

00:00:38,430 --> 00:00:42,780
my actual like stuff that I'm supposed

00:00:40,230 --> 00:00:44,219
to be doing is to do with computing and

00:00:42,780 --> 00:00:45,600
this kind of stuff this is just a side

00:00:44,219 --> 00:00:47,789
project I'm supposed to be working on

00:00:45,600 --> 00:00:49,350
physics but I get frustrated with some

00:00:47,789 --> 00:00:50,789
of the stuff computing stuff we have so

00:00:49,350 --> 00:00:53,940
I have lots of side projects trying to

00:00:50,789 --> 00:00:56,940
make it better okay so to give you a

00:00:53,940 --> 00:01:00,030
little background so the experiment

00:00:56,940 --> 00:01:01,920
facility that I work at is on the Swiss

00:01:00,030 --> 00:01:03,570
French border near Geneva and it's

00:01:01,920 --> 00:01:06,210
called CERN which is a laboratory that's

00:01:03,570 --> 00:01:08,939
been around since about the mid 1960s I

00:01:06,210 --> 00:01:11,640
think and the main attraction there is

00:01:08,939 --> 00:01:14,400
the Large Hadron Collider or LHC so this

00:01:11,640 --> 00:01:16,590
is the largest particle accelerator in

00:01:14,400 --> 00:01:18,090
the world which is a 27 kilometer radius

00:01:16,590 --> 00:01:19,860
so here you can see a nice aerial

00:01:18,090 --> 00:01:21,509
picture and the yellow line is where the

00:01:19,860 --> 00:01:23,430
tunnel runs about 100 meters on the

00:01:21,509 --> 00:01:26,220
ground so this is a really huge

00:01:23,430 --> 00:01:28,829
expensive machine and this is used for

00:01:26,220 --> 00:01:31,259
fundamental physics research and here

00:01:28,829 --> 00:01:33,150
the actual machine itself isn't the bit

00:01:31,259 --> 00:01:35,759
that's used for physics that's just used

00:01:33,150 --> 00:01:38,189
so that you can have experiments based

00:01:35,759 --> 00:01:40,380
around the ring that then can measure

00:01:38,189 --> 00:01:42,750
things and study how the universe works

00:01:40,380 --> 00:01:45,930
so there there's four main experiments

00:01:42,750 --> 00:01:49,409
Alice Atlas CMS and LHC B and then

00:01:45,930 --> 00:01:51,180
there's three smaller ones around the

00:01:49,409 --> 00:01:52,920
ring so the large experiments have at

00:01:51,180 --> 00:01:54,270
least a thousand people working on them

00:01:52,920 --> 00:01:56,549
I think the biggest one is about three

00:01:54,270 --> 00:01:58,350
and a half thousand people and the

00:01:56,549 --> 00:02:00,390
smaller ones can be anywhere from like

00:01:58,350 --> 00:02:01,500
just a handful of people and then the

00:02:00,390 --> 00:02:03,079
LHC isn't the only thing that CERN

00:02:01,500 --> 00:02:05,369
there's also a lot of other experiments

00:02:03,079 --> 00:02:07,259
more than I can fit on a slide but it's

00:02:05,369 --> 00:02:10,289
at least 15 or 20 when I tried to count

00:02:07,259 --> 00:02:11,670
the ones I could find and the thing that

00:02:10,289 --> 00:02:13,349
pretty much all of these have in common

00:02:11,670 --> 00:02:13,860
in that they have a lot of computing so

00:02:13,349 --> 00:02:15,480
the bigger

00:02:13,860 --> 00:02:16,770
parents have huge amounts of computing

00:02:15,480 --> 00:02:18,810
requirements too but even the smaller

00:02:16,770 --> 00:02:20,280
ones have less people to work on like

00:02:18,810 --> 00:02:21,870
maintaining their computing stuff but

00:02:20,280 --> 00:02:23,280
sometimes still are using like huge

00:02:21,870 --> 00:02:27,210
clusters and having to do lots of

00:02:23,280 --> 00:02:28,590
computation so I'm a member of LHC B so

00:02:27,210 --> 00:02:31,880
that's depending on how you define it

00:02:28,590 --> 00:02:35,310
the smallest one of the four big LHC

00:02:31,880 --> 00:02:37,110
experiments though the smallest means

00:02:35,310 --> 00:02:39,210
that there's about 800 physicists like

00:02:37,110 --> 00:02:41,130
me working on there with about 400

00:02:39,210 --> 00:02:43,350
technicians working with it still a lot

00:02:41,130 --> 00:02:44,850
of people and the experiment itself is

00:02:43,350 --> 00:02:46,890
located about 70 meters underground

00:02:44,850 --> 00:02:48,270
here's a picture of it with some people

00:02:46,890 --> 00:02:50,040
that were in the collaboration at the

00:02:48,270 --> 00:02:51,120
time superimposed because you're not

00:02:50,040 --> 00:02:54,180
allowed to have that many people on the

00:02:51,120 --> 00:02:56,670
ground at the time and the experiment

00:02:54,180 --> 00:02:57,959
was designed to I was very disappointed

00:02:56,670 --> 00:03:02,400
when I found out that people were

00:02:57,959 --> 00:03:03,780
superimposed so the experiment was

00:03:02,400 --> 00:03:05,670
designed to study the differences

00:03:03,780 --> 00:03:07,650
between matter and antimatter using the

00:03:05,670 --> 00:03:09,870
decays of beauty' hadrons but this has

00:03:07,650 --> 00:03:11,730
since be expanded out to cover like a

00:03:09,870 --> 00:03:12,930
wide range of fundamental physics

00:03:11,730 --> 00:03:15,870
research but I'm not here to talk about

00:03:12,930 --> 00:03:17,550
that today but this is just say that

00:03:15,870 --> 00:03:19,049
like this talk is somewhat biased and

00:03:17,550 --> 00:03:21,299
just talking about what my experience

00:03:19,049 --> 00:03:23,160
with NIH TB is but the wider community

00:03:21,299 --> 00:03:24,720
has similar things and we're somewhat

00:03:23,160 --> 00:03:28,320
working together I'm trying to improve

00:03:24,720 --> 00:03:33,570
this stuff so for what computing looks

00:03:28,320 --> 00:03:36,180
like for us so the particles spin around

00:03:33,570 --> 00:03:37,560
it and typically protons smash together

00:03:36,180 --> 00:03:38,910
within the detector and we use the

00:03:37,560 --> 00:03:42,870
detector kind of like a camera to take

00:03:38,910 --> 00:03:44,070
images of what happened however because

00:03:42,870 --> 00:03:46,320
we have to take a lot of collisions

00:03:44,070 --> 00:03:48,180
field to find anything interesting we so

00:03:46,320 --> 00:03:49,920
we have about 30 million of these like

00:03:48,180 --> 00:03:52,230
images being taken per second of what

00:03:49,920 --> 00:03:53,430
happened if you then look at like the

00:03:52,230 --> 00:03:55,140
amount of data that this means coming

00:03:53,430 --> 00:03:57,360
out of the detector that we have some

00:03:55,140 --> 00:03:58,799
tens of terabytes maybe like 20 or 30

00:03:57,360 --> 00:04:00,150
terabytes of data coming out of the

00:03:58,799 --> 00:04:02,280
detector far more than you could

00:04:00,150 --> 00:04:05,489
possibly hope to store and do anything

00:04:02,280 --> 00:04:06,720
with like for a long term so we have to

00:04:05,489 --> 00:04:09,150
come up with a system of reducing this

00:04:06,720 --> 00:04:12,000
down so for this we have a network of a

00:04:09,150 --> 00:04:14,280
few thousand machines that are located

00:04:12,000 --> 00:04:16,079
near to the detector going to be located

00:04:14,280 --> 00:04:18,810
near the surface problem at the surface

00:04:16,079 --> 00:04:21,269
and these those have the job of reducing

00:04:18,810 --> 00:04:23,220
this few terabytes per second down to a

00:04:21,269 --> 00:04:25,620
few gigabytes per second the reason this

00:04:23,220 --> 00:04:27,600
can work is because most collisions we

00:04:25,620 --> 00:04:29,190
have don't contain anything that's

00:04:27,600 --> 00:04:31,440
Sara Lee that interesting that we don't

00:04:29,190 --> 00:04:33,300
understand so we need to so all these

00:04:31,440 --> 00:04:36,360
computers are working to like select out

00:04:33,300 --> 00:04:38,010
V like this particular like snapshot

00:04:36,360 --> 00:04:40,080
that we took of what happened looks

00:04:38,010 --> 00:04:41,880
interesting there's this these hundred

00:04:40,080 --> 00:04:43,200
don't look interesting so he does a

00:04:41,880 --> 00:04:44,520
really good job of filtering down but

00:04:43,200 --> 00:04:46,380
the process of separating this out

00:04:44,520 --> 00:04:47,580
really isn't trivial and a lot of work

00:04:46,380 --> 00:04:48,990
goes into trying to optimize the

00:04:47,580 --> 00:04:51,240
software so that we actually can process

00:04:48,990 --> 00:04:54,120
the data this quickly in our amount of

00:04:51,240 --> 00:04:55,920
servers that we can actually afford but

00:04:54,120 --> 00:04:57,600
ten gigabytes per second coming out of

00:04:55,920 --> 00:04:58,800
the detector might be just about enough

00:04:57,600 --> 00:05:01,320
that you can actually store it for a

00:04:58,800 --> 00:05:03,420
long time but it's still a huge amount

00:05:01,320 --> 00:05:05,970
of data to actually process so probably

00:05:03,420 --> 00:05:08,490
a few tens of petabytes per data that

00:05:05,970 --> 00:05:10,740
sits on disk and few maybe a hundred

00:05:08,490 --> 00:05:14,010
petabytes for data of year that sits on

00:05:10,740 --> 00:05:16,020
tape so to actually process this I can't

00:05:14,010 --> 00:05:18,420
hope to do this on my laptop so instead

00:05:16,020 --> 00:05:20,190
we have what's called the worldwide LHC

00:05:18,420 --> 00:05:23,430
computing grid so this is a network of

00:05:20,190 --> 00:05:26,130
about 170 computing centers which

00:05:23,430 --> 00:05:28,350
currently has about a million CPU cores

00:05:26,130 --> 00:05:29,610
as part of it and about an exabyte of

00:05:28,350 --> 00:05:31,080
storage though this is rapidly growing

00:05:29,610 --> 00:05:33,810
as the experiments get bigger and we

00:05:31,080 --> 00:05:35,760
take more and more data and we submit

00:05:33,810 --> 00:05:37,740
kind of batch jobs to the system to like

00:05:35,760 --> 00:05:39,270
process this for me and this is kind of

00:05:37,740 --> 00:05:41,250
shared by all the experiments with like

00:05:39,270 --> 00:05:42,660
pledges given to each experiment there's

00:05:41,250 --> 00:05:44,520
a shared resource that like no one

00:05:42,660 --> 00:05:48,450
experiment can demand what is installed

00:05:44,520 --> 00:05:49,920
on all these nodes and then kind of the

00:05:48,450 --> 00:05:51,630
last step out of this because still even

00:05:49,920 --> 00:05:53,610
after you've processed it or Krong the

00:05:51,630 --> 00:05:55,200
what we call the grid and we still have

00:05:53,610 --> 00:05:58,410
a few gigabytes or terabytes worth of

00:05:55,200 --> 00:06:00,060
data which then get processed on a wide

00:05:58,410 --> 00:06:02,370
range of whatever resources we can find

00:06:00,060 --> 00:06:03,660
so it can be like small VMs that we stay

00:06:02,370 --> 00:06:06,540
tuned to alright really heavy-duty

00:06:03,660 --> 00:06:08,130
workstations or laptops desktops

00:06:06,540 --> 00:06:09,510
university batch systems it's really

00:06:08,130 --> 00:06:11,040
just a mess of whatever computing

00:06:09,510 --> 00:06:12,720
resources we can find will make you self

00:06:11,040 --> 00:06:15,300
and then this final stage can last

00:06:12,720 --> 00:06:16,500
easily a year or a few years of people

00:06:15,300 --> 00:06:18,300
like really studying trying to

00:06:16,500 --> 00:06:19,410
understand what's in that last little

00:06:18,300 --> 00:06:23,130
selection of data that they're looking

00:06:19,410 --> 00:06:26,100
at so how do we manage packaging

00:06:23,130 --> 00:06:27,510
software at the moment so because we

00:06:26,100 --> 00:06:28,470
can't control what software is stored

00:06:27,510 --> 00:06:29,940
everywhere and because we can

00:06:28,470 --> 00:06:31,950
potentially have of like I think

00:06:29,940 --> 00:06:33,930
typically HDPE has about a hundred

00:06:31,950 --> 00:06:35,520
thousand jobs running at some point in

00:06:33,930 --> 00:06:37,979
the world with various bits of software

00:06:35,520 --> 00:06:39,270
on them we can't just like be installing

00:06:37,979 --> 00:06:39,720
them every time because we spending a

00:06:39,270 --> 00:06:40,800
huge

00:06:39,720 --> 00:06:42,330
time we need a huge amount of

00:06:40,800 --> 00:06:43,500
infrastructure for install like

00:06:42,330 --> 00:06:45,480
requesting the software to be installed

00:06:43,500 --> 00:06:47,520
and so we have a read-only

00:06:45,480 --> 00:06:50,940
content-addressable file system that was

00:06:47,520 --> 00:06:52,410
developed at CERN called C VMFS so the

00:06:50,940 --> 00:06:55,950
way this works is that you have some

00:06:52,410 --> 00:06:58,290
central node called the stratum 0 which

00:06:55,950 --> 00:07:00,030
is the only node in which like writes

00:06:58,290 --> 00:07:02,430
can actually made to this file system

00:07:00,030 --> 00:07:04,230
and then once you've made some write and

00:07:02,430 --> 00:07:06,750
you kind of make a commit at this point

00:07:04,230 --> 00:07:08,550
in time it then gets distributed out to

00:07:06,750 --> 00:07:10,260
the public mirrors we're specifically

00:07:08,550 --> 00:07:13,160
about one per country wherever there's a

00:07:10,260 --> 00:07:16,080
significant amount of work going on and

00:07:13,160 --> 00:07:17,430
then the way that these community

00:07:16,080 --> 00:07:20,250
servers communicate with each other is

00:07:17,430 --> 00:07:22,680
just using HTTP so that the stratum ones

00:07:20,250 --> 00:07:24,270
have squid proxies on them and proxy the

00:07:22,680 --> 00:07:25,560
files out so that whenever you request a

00:07:24,270 --> 00:07:27,720
file you can have kind of a proxy

00:07:25,560 --> 00:07:30,030
hierarchy in there if I have a thousand

00:07:27,720 --> 00:07:31,919
machines in my computing center I'll

00:07:30,030 --> 00:07:33,360
have my own local proxy so I don't have

00:07:31,919 --> 00:07:35,010
to go out and request it from

00:07:33,360 --> 00:07:37,290
Switzerland every single time that any

00:07:35,010 --> 00:07:39,180
file gets requested and this works

00:07:37,290 --> 00:07:42,780
really no well for distributing software

00:07:39,180 --> 00:07:44,430
around for the actual operating systems

00:07:42,780 --> 00:07:46,620
that is software's running on pretty

00:07:44,430 --> 00:07:49,140
much everything is using some variant of

00:07:46,620 --> 00:07:51,240
Red Hat Enterprise Linux so the most

00:07:49,140 --> 00:07:52,770
common variant is scientific Linux six

00:07:51,240 --> 00:07:54,090
but this is slowly moving to Center

00:07:52,770 --> 00:07:55,800
seven and in the next few years we'll

00:07:54,090 --> 00:07:58,740
probably finally actually move to being

00:07:55,800 --> 00:08:00,330
the major one and the way that we

00:07:58,740 --> 00:08:02,460
defined the builds we are is that we

00:08:00,330 --> 00:08:06,090
have an architecture so this is almost

00:08:02,460 --> 00:08:07,979
always 64-bit x86 but we're also

00:08:06,090 --> 00:08:10,080
interested in arm if that's a way that

00:08:07,979 --> 00:08:12,390
we can get more computing power for our

00:08:10,080 --> 00:08:13,979
money and people have also like looked

00:08:12,390 --> 00:08:17,280
at using PowerPC and more esoteric

00:08:13,979 --> 00:08:20,490
things basically everything we run at

00:08:17,280 --> 00:08:22,440
this point is x86 and we then compile it

00:08:20,490 --> 00:08:24,540
for each operating system we support so

00:08:22,440 --> 00:08:27,270
this is normally scientific linux six

00:08:24,540 --> 00:08:29,610
which is a rail sixth derivative and

00:08:27,270 --> 00:08:31,050
sent to a seven some of our older

00:08:29,610 --> 00:08:32,400
software was built for scientific linux

00:08:31,050 --> 00:08:35,219
five as that was the dominant one at the

00:08:32,400 --> 00:08:36,930
time we then specify a compiler and we

00:08:35,219 --> 00:08:38,700
then have a last bit that we can like

00:08:36,930 --> 00:08:40,200
specify the build type as we call it for

00:08:38,700 --> 00:08:42,360
if we like put debugging symbols in or

00:08:40,200 --> 00:08:43,890
optimize the builds and the way that we

00:08:42,360 --> 00:08:45,120
rely on backwards compatibility because

00:08:43,890 --> 00:08:46,830
we keep running the software quite a

00:08:45,120 --> 00:08:49,980
long time is just hoping that the ABI

00:08:46,830 --> 00:08:52,680
stays stable in that scientific Red Hat

00:08:49,980 --> 00:08:53,160
Enterprise Linux six can generally run

00:08:52,680 --> 00:08:55,769
binary

00:08:53,160 --> 00:08:59,730
that were compiled against scientific

00:08:55,769 --> 00:09:03,240
Red Hat Enterprise Linux fives a B is to

00:08:59,730 --> 00:09:04,949
varying degrees of success the way that

00:09:03,240 --> 00:09:08,279
we then build our software on this is

00:09:04,949 --> 00:09:10,170
that there's a package manager kind of

00:09:08,279 --> 00:09:12,899
that was built by some people at CERN

00:09:10,170 --> 00:09:16,560
called El CGC make this is built around

00:09:12,899 --> 00:09:18,810
C makes external project module and kind

00:09:16,560 --> 00:09:20,279
of builds like some set of strings that

00:09:18,810 --> 00:09:22,769
we have like this all the dependencies

00:09:20,279 --> 00:09:24,149
that we need some package with some base

00:09:22,769 --> 00:09:26,699
set of system dependencies that we

00:09:24,149 --> 00:09:29,339
expect there the way these expressions

00:09:26,699 --> 00:09:30,750
end up looking like the mix derivation

00:09:29,339 --> 00:09:33,120
equivalent is that there is some

00:09:30,750 --> 00:09:34,560
function called LCG package ad where you

00:09:33,120 --> 00:09:36,269
define similar things with like the

00:09:34,560 --> 00:09:38,759
package name where to download the

00:09:36,269 --> 00:09:40,170
source for the package from and how to

00:09:38,759 --> 00:09:43,079
configure it and all the kind of usual

00:09:40,170 --> 00:09:45,600
stuff you'd expect and then you can

00:09:43,079 --> 00:09:46,889
specify multiple versions by using LCG

00:09:45,600 --> 00:09:48,870
external package and then you just

00:09:46,889 --> 00:09:50,100
specify the package name and which have

00:09:48,870 --> 00:09:51,569
a package version and where you want it

00:09:50,100 --> 00:09:54,509
to be installed so you can have multiple

00:09:51,569 --> 00:09:56,279
versions side-by-side and the way that

00:09:54,509 --> 00:09:58,620
we then the system for then storing

00:09:56,279 --> 00:10:00,569
these is that we have some installed

00:09:58,620 --> 00:10:02,430
prefix like the next door and then

00:10:00,569 --> 00:10:05,579
inside there you have a name for each

00:10:02,430 --> 00:10:07,589
package and make a folder for each

00:10:05,579 --> 00:10:10,350
package that you have and then inside

00:10:07,589 --> 00:10:14,160
there you have a folder which is the

00:10:10,350 --> 00:10:16,439
version of the package and then sha-1

00:10:14,160 --> 00:10:18,269
hash and just the first five digits of

00:10:16,439 --> 00:10:20,910
it of the names of the dependencies and

00:10:18,269 --> 00:10:22,259
their versions and their hashes that we

00:10:20,910 --> 00:10:23,790
used of their dependencies this is how

00:10:22,259 --> 00:10:25,230
we're like it can have multiple builds

00:10:23,790 --> 00:10:27,060
like the way the mix does this inside

00:10:25,230 --> 00:10:28,680
the store directory but then on top of

00:10:27,060 --> 00:10:29,850
that we then have the different platform

00:10:28,680 --> 00:10:31,170
was built for and this can get like

00:10:29,850 --> 00:10:33,269
quite out of hand with having a lot of

00:10:31,170 --> 00:10:34,620
different variants so here was just one

00:10:33,269 --> 00:10:36,000
I picked and this isn't the worst one

00:10:34,620 --> 00:10:37,709
this is just the first one I decided to

00:10:36,000 --> 00:10:41,519
pick but something we could have like

00:10:37,709 --> 00:10:42,630
tens of configurations so what are some

00:10:41,519 --> 00:10:44,399
of the issues that we have with the

00:10:42,630 --> 00:10:48,149
current solution so probably the biggest

00:10:44,399 --> 00:10:49,680
one the can be so looking back kind of

00:10:48,149 --> 00:10:50,819
to the past in that before there was the

00:10:49,680 --> 00:10:52,439
large hadron collider there was the

00:10:50,819 --> 00:10:54,180
large electron positron Collider that

00:10:52,439 --> 00:10:57,360
was in the same tunnel roughly the same

00:10:54,180 --> 00:11:00,269
size and started running in 1989 and

00:10:57,360 --> 00:11:03,360
continued till 2000 but when it finished

00:11:00,269 --> 00:11:05,850
running in 2000 like the using the use

00:11:03,360 --> 00:11:07,020
of its data didn't just suddenly stop it

00:11:05,850 --> 00:11:09,000
continued to be analyzed

00:11:07,020 --> 00:11:11,040
for more than a decade after and so like

00:11:09,000 --> 00:11:13,320
in 2010 there were still some people

00:11:11,040 --> 00:11:15,990
that were doing research using data that

00:11:13,320 --> 00:11:17,820
was collected in 1990 and 1995 and

00:11:15,990 --> 00:11:20,010
having to use software that's 15 or 20

00:11:17,820 --> 00:11:21,660
years old and try and still get it to

00:11:20,010 --> 00:11:22,950
work and this is just getting worse like

00:11:21,660 --> 00:11:25,230
the Large Hadron Collider is gonna be

00:11:22,950 --> 00:11:26,910
running until 2035 so we can have at

00:11:25,230 --> 00:11:28,440
least 20 years of data taking and who

00:11:26,910 --> 00:11:31,380
knows how much longer after that we'll

00:11:28,440 --> 00:11:32,880
still be processing data and of course

00:11:31,380 --> 00:11:35,580
this is longer than any operating system

00:11:32,880 --> 00:11:37,800
lasts so right now at the moment there

00:11:35,580 --> 00:11:39,270
are probably hundreds of jobs running

00:11:37,800 --> 00:11:43,200
that are using software that was built

00:11:39,270 --> 00:11:44,820
in 2011 for scientific Linux 5 and this

00:11:43,200 --> 00:11:47,190
is just getting worse as we go further

00:11:44,820 --> 00:11:49,020
and further into the future so having

00:11:47,190 --> 00:11:51,930
reproducible builds is a really nice

00:11:49,020 --> 00:11:54,030
thing to be able to be able to have

00:11:51,930 --> 00:11:55,800
especially as if there's any like bugs

00:11:54,030 --> 00:11:57,540
in any of the math libraries or anything

00:11:55,800 --> 00:11:59,190
that we use we don't want to pick up a

00:11:57,540 --> 00:12:01,170
newer version without realizing because

00:11:59,190 --> 00:12:02,820
we want to know like which bugs in the

00:12:01,170 --> 00:12:05,310
maths libraries we originally used to

00:12:02,820 --> 00:12:06,780
process the data because if not we're

00:12:05,310 --> 00:12:08,310
never gonna realize that we have those

00:12:06,780 --> 00:12:12,240
bugs there and want to realize them and

00:12:08,310 --> 00:12:13,440
take them into account I say as I've

00:12:12,240 --> 00:12:14,940
said before most of our current

00:12:13,440 --> 00:12:18,090
resources are scientific may 6 with

00:12:14,940 --> 00:12:19,380
scent OS 7 slowly taking over and but

00:12:18,090 --> 00:12:21,180
then we kind of have contradictory

00:12:19,380 --> 00:12:22,590
requirements and the experiments are

00:12:21,180 --> 00:12:24,300
expensive and we want to get as much as

00:12:22,590 --> 00:12:26,010
we can out of them and we have a lot of

00:12:24,300 --> 00:12:28,860
data we want to process so we want to be

00:12:26,010 --> 00:12:30,930
able to like use new compilers and new

00:12:28,860 --> 00:12:32,760
vectorization instructions and make use

00:12:30,930 --> 00:12:36,030
of multi-threading that gets hot easier

00:12:32,760 --> 00:12:37,830
with new C++ standards so we kind of

00:12:36,030 --> 00:12:39,360
want to have these bleeding-edge new

00:12:37,830 --> 00:12:41,340
features like people are working against

00:12:39,360 --> 00:12:45,960
GCC 8 at the moment within a few weeks

00:12:41,340 --> 00:12:47,520
of it coming out while also using GCC 48

00:12:45,960 --> 00:12:50,850
or older stacks that are currently

00:12:47,520 --> 00:12:52,290
running at the moment so strain like

00:12:50,850 --> 00:12:53,940
bringing the community together instead

00:12:52,290 --> 00:12:56,910
of everyone having disjoint solutions

00:12:53,940 --> 00:12:58,530
for this there's a organization called

00:12:56,910 --> 00:13:00,450
the hep Software Foundation that trying

00:12:58,530 --> 00:13:02,820
to bring experiments together in a wide

00:13:00,450 --> 00:13:05,160
range of like issues one of which is a

00:13:02,820 --> 00:13:06,960
packaging working group and so at the

00:13:05,160 --> 00:13:08,520
moment they've tried to just like look

00:13:06,960 --> 00:13:09,840
at different package managers and figure

00:13:08,520 --> 00:13:11,640
out like which one is going to be their

00:13:09,840 --> 00:13:14,730
recommendation for the community for the

00:13:11,640 --> 00:13:16,710
high-energy physics community to use and

00:13:14,730 --> 00:13:20,070
the ones that have been spoken about

00:13:16,710 --> 00:13:20,880
most recently so as to there have been

00:13:20,070 --> 00:13:23,280
developed within

00:13:20,880 --> 00:13:27,120
high-energy physics so Ali build an LCD

00:13:23,280 --> 00:13:28,830
see make there's back which is one

00:13:27,120 --> 00:13:33,210
that's used in high-performance

00:13:28,830 --> 00:13:34,740
computing centers and supercomputers and

00:13:33,210 --> 00:13:36,420
things and then there's nixon portage

00:13:34,740 --> 00:13:39,030
which have been looked at by various

00:13:36,420 --> 00:13:40,410
people mixing being me and hence why I'm

00:13:39,030 --> 00:13:42,870
here

00:13:40,410 --> 00:13:45,630
so what my what is my setup with Nix at

00:13:42,870 --> 00:13:47,400
the moment so one of the things is that

00:13:45,630 --> 00:13:49,680
using slash Nix as the store directory

00:13:47,400 --> 00:13:50,880
just isn't an option for us because the

00:13:49,680 --> 00:13:53,160
way that we distribute software around

00:13:50,880 --> 00:13:54,420
is using C VMFS we don't have the

00:13:53,160 --> 00:13:56,790
ability to get root access on the

00:13:54,420 --> 00:13:58,950
machines most of the resources we have

00:13:56,790 --> 00:14:00,570
so we already have this system in place

00:13:58,950 --> 00:14:02,760
for distributing software through this

00:14:00,570 --> 00:14:07,080
read-only file system so we basically

00:14:02,760 --> 00:14:10,020
has to be used and typically there is

00:14:07,080 --> 00:14:12,540
like the SF t dot CERN dot CH repository

00:14:10,020 --> 00:14:14,310
the contains a lot of software but then

00:14:12,540 --> 00:14:15,780
larger experiments tend to manage their

00:14:14,310 --> 00:14:17,340
own software installations so they know

00:14:15,780 --> 00:14:19,680
exactly what's there and if they need to

00:14:17,340 --> 00:14:23,400
like patch things and dynamically they

00:14:19,680 --> 00:14:27,210
can do quite quickly if necessary so for

00:14:23,400 --> 00:14:30,120
testing with Nix I moved the store

00:14:27,210 --> 00:14:31,560
directory to be in kind of mocks even FS

00:14:30,120 --> 00:14:32,790
directory so that it was as if I was

00:14:31,560 --> 00:14:35,550
trying to install the software on the

00:14:32,790 --> 00:14:38,340
stratum 0 to this folder but just to see

00:14:35,550 --> 00:14:39,900
how that well that worked and then as

00:14:38,340 --> 00:14:41,460
part of doing this I ended up forking

00:14:39,900 --> 00:14:43,530
Knicks packages because I found that as

00:14:41,460 --> 00:14:45,150
needing to pull in some patches and as

00:14:43,530 --> 00:14:46,950
well as like change some various recipes

00:14:45,150 --> 00:14:49,800
and new things some of the recipes to

00:14:46,950 --> 00:14:53,310
like build in with options that I'd we'd

00:14:49,800 --> 00:14:55,620
need to use and then also as part of

00:14:53,310 --> 00:14:57,090
this end up throwing in the experiment

00:14:55,620 --> 00:14:59,900
specific software there's never going to

00:14:57,090 --> 00:15:02,550
go into the upstream repository because

00:14:59,900 --> 00:15:05,280
nobody outside of my experiment is going

00:15:02,550 --> 00:15:06,630
to be interested in using it while

00:15:05,280 --> 00:15:08,070
preparing this talk I became aware of

00:15:06,630 --> 00:15:09,570
the Nix package pinning in the ability

00:15:08,070 --> 00:15:11,160
to apply patches over the top of mixed

00:15:09,570 --> 00:15:12,750
packages which looks much easier to

00:15:11,160 --> 00:15:14,220
maintain than my fork but I haven't

00:15:12,750 --> 00:15:17,460
found time to use it so I only found it

00:15:14,220 --> 00:15:18,630
two days ago so the issue with all of

00:15:17,460 --> 00:15:20,700
this though is because I've changed the

00:15:18,630 --> 00:15:22,680
store directory everything takes a very

00:15:20,700 --> 00:15:24,120
long time so you go to bed you wake up

00:15:22,680 --> 00:15:26,430
and either find that it's still

00:15:24,120 --> 00:15:27,960
compiling or that it failed because it

00:15:26,430 --> 00:15:29,910
failed to download some file that it

00:15:27,960 --> 00:15:31,800
needed that moves the location that

00:15:29,910 --> 00:15:33,420
package keeps their source or hash

00:15:31,800 --> 00:15:35,519
checks failed or something

00:15:33,420 --> 00:15:37,860
so I ended up setting up an instance of

00:15:35,519 --> 00:15:39,089
hydro which after like putting this off

00:15:37,860 --> 00:15:41,550
for quite a while thinking it'd be a lot

00:15:39,089 --> 00:15:43,620
of work turned out to be really easy and

00:15:41,550 --> 00:15:45,330
within an hour I had hydro running and

00:15:43,620 --> 00:15:46,890
was working beautifully so everyone

00:15:45,330 --> 00:15:49,649
who's done something to do with making

00:15:46,890 --> 00:15:51,930
hydro easy-to-use you've done a great

00:15:49,649 --> 00:15:55,649
job right now this is running inside a

00:15:51,930 --> 00:15:57,660
docker container but then talks to an

00:15:55,649 --> 00:15:59,339
external database and this had been

00:15:57,660 --> 00:16:01,350
stabili running in this configuration

00:15:59,339 --> 00:16:03,000
now for several months so I'm very happy

00:16:01,350 --> 00:16:04,470
with how it's going ultimately there's a

00:16:03,000 --> 00:16:05,579
few changes that I'd like to make to it

00:16:04,470 --> 00:16:07,050
if there's hard to make it into

00:16:05,579 --> 00:16:10,170
production but it's worked really well

00:16:07,050 --> 00:16:13,560
for me and so the structure of the fork

00:16:10,170 --> 00:16:15,120
that I've set up I based it on mix

00:16:13,560 --> 00:16:17,160
packages and stable because I found this

00:16:15,120 --> 00:16:19,680
was easier to find all the source and

00:16:17,160 --> 00:16:22,829
had fewer things where the source

00:16:19,680 --> 00:16:23,940
directories had changed but in future I

00:16:22,829 --> 00:16:27,480
could imagine that maybe you would like

00:16:23,940 --> 00:16:28,740
take off the fit the actual releases and

00:16:27,480 --> 00:16:29,940
then maybe we just apply patches and

00:16:28,740 --> 00:16:31,380
then just pick up a new release every

00:16:29,940 --> 00:16:34,740
six months for like main keeping our

00:16:31,380 --> 00:16:35,940
stacks being updated so then I applied

00:16:34,740 --> 00:16:37,320
some set of patches over the top to

00:16:35,940 --> 00:16:38,670
change the store directory and pull in

00:16:37,320 --> 00:16:41,399
some things I needed to actually get

00:16:38,670 --> 00:16:43,560
annex packages to build and then I

00:16:41,399 --> 00:16:46,079
applied an overlay over the top of this

00:16:43,560 --> 00:16:48,140
that kind that applies any stuff that I

00:16:46,079 --> 00:16:51,870
would expect not to be up streamed into

00:16:48,140 --> 00:16:53,790
mix packages this goes anywhere and then

00:16:51,870 --> 00:16:55,770
I applied a second overlay over the top

00:16:53,790 --> 00:16:58,290
of this again which gives us what we're

00:16:55,770 --> 00:17:00,089
used to with having like the entire

00:16:58,290 --> 00:17:02,130
software stack built with different

00:17:00,089 --> 00:17:03,510
compilers or with different options so

00:17:02,130 --> 00:17:05,640
the idea that is that we'd have like

00:17:03,510 --> 00:17:07,110
some like base release that we have

00:17:05,640 --> 00:17:08,250
within the experiment and then we can

00:17:07,110 --> 00:17:10,230
say that we've like built this with

00:17:08,250 --> 00:17:12,990
everything with using GCC six everything

00:17:10,230 --> 00:17:15,480
using GCC seven or something there this

00:17:12,990 --> 00:17:17,600
might be quite useful is that it's a bit

00:17:15,480 --> 00:17:20,010
have a build that users like newer

00:17:17,600 --> 00:17:21,209
avx-512 instructions or something but

00:17:20,010 --> 00:17:23,220
then have one that doesn't use these

00:17:21,209 --> 00:17:25,949
newer instructions because some of our

00:17:23,220 --> 00:17:27,660
software has this a separate build and

00:17:25,949 --> 00:17:29,760
can't decide at runtime and we'd want to

00:17:27,660 --> 00:17:31,380
still be able to use the resources we

00:17:29,760 --> 00:17:33,750
have that don't have these instructions

00:17:31,380 --> 00:17:36,809
available so this is quite useful thing

00:17:33,750 --> 00:17:38,669
to have so for what these overlays look

00:17:36,809 --> 00:17:41,760
like so here was my GCC seven one

00:17:38,669 --> 00:17:43,620
simplified down a bit so just override

00:17:41,760 --> 00:17:47,139
GCC and

00:17:43,620 --> 00:17:48,309
to be either gc7 or gc6 everywhere and

00:17:47,139 --> 00:17:50,620
then make some other changes that I

00:17:48,309 --> 00:17:52,440
found myself wanting to make which was

00:17:50,620 --> 00:17:54,970
nice and straightforward and then

00:17:52,440 --> 00:17:56,409
changing everything back to use GCC six

00:17:54,970 --> 00:17:58,240
I found it was just one thing that

00:17:56,409 --> 00:18:00,399
actually needed GCC seven which was the

00:17:58,240 --> 00:18:02,380
AWS SDK so I just manually over rope

00:18:00,399 --> 00:18:03,669
that so it looks like this might

00:18:02,380 --> 00:18:05,500
actually be feasible for what we want to

00:18:03,669 --> 00:18:09,330
do and maybe would expand these out to

00:18:05,500 --> 00:18:11,830
have some more changes as this develops

00:18:09,330 --> 00:18:14,649
for actually running our software we

00:18:11,830 --> 00:18:16,929
used to using a command that's just a

00:18:14,649 --> 00:18:18,399
Python scripts and that becomes

00:18:16,929 --> 00:18:20,110
available wherever our software

00:18:18,399 --> 00:18:21,610
environment is the it's called it will

00:18:20,110 --> 00:18:24,580
be run so this is kind of like Nick

00:18:21,610 --> 00:18:26,470
shell in that you run it a UN specify in

00:18:24,580 --> 00:18:29,590
our case a platform a package and a

00:18:26,470 --> 00:18:31,480
version we have maybe like 15 ish

00:18:29,590 --> 00:18:32,980
packages packaged environments that we

00:18:31,480 --> 00:18:36,070
can run with this each one of which has

00:18:32,980 --> 00:18:39,220
anywhere from maybe like 20 to 100 and

00:18:36,070 --> 00:18:40,510
something versions and this just sets up

00:18:39,220 --> 00:18:42,549
environment variables to give you a

00:18:40,510 --> 00:18:44,139
shell that you can then work with and

00:18:42,549 --> 00:18:45,309
then you close that shell and open up a

00:18:44,139 --> 00:18:50,370
different environment switch between

00:18:45,309 --> 00:18:52,960
them so I did this using build em so I

00:18:50,370 --> 00:18:54,669
modified Nick's pack sphere just so that

00:18:52,960 --> 00:18:58,659
it gave me I could apply the overlay

00:18:54,669 --> 00:19:00,490
path for the GCC version then specified

00:18:58,659 --> 00:19:02,789
some list of packages and then made this

00:19:00,490 --> 00:19:05,260
into a function which I could then

00:19:02,789 --> 00:19:08,620
specify extra packages to install on top

00:19:05,260 --> 00:19:12,669
of this and then I put this into Hydra

00:19:08,620 --> 00:19:14,409
so that it built new channel that just

00:19:12,669 --> 00:19:15,909
contained Base built in several

00:19:14,409 --> 00:19:17,409
configuration so it wasn't necessary to

00:19:15,909 --> 00:19:18,700
just like repeat the same list of

00:19:17,409 --> 00:19:20,590
package doesn't have duplication and

00:19:18,700 --> 00:19:22,389
take advantages of mixes abilities to

00:19:20,590 --> 00:19:23,289
override itself I'm sure this can be

00:19:22,389 --> 00:19:24,730
done better and if you've got any

00:19:23,289 --> 00:19:26,380
suggestions I'd love to know how cuz I'm

00:19:24,730 --> 00:19:28,600
still kind of battling with

00:19:26,380 --> 00:19:31,090
understanding Nicks and for language

00:19:28,600 --> 00:19:34,750
itself so what some of the things that

00:19:31,090 --> 00:19:39,399
I've like not figure out how to do so

00:19:34,750 --> 00:19:40,809
probably the biggest one is the earn all

00:19:39,399 --> 00:19:42,370
of the physicists will found that they

00:19:40,809 --> 00:19:43,960
need to develop the software at some

00:19:42,370 --> 00:19:45,429
level sometimes this will just be that

00:19:43,960 --> 00:19:46,690
they need to have like one development

00:19:45,429 --> 00:19:48,309
thing that they do for something quickly

00:19:46,690 --> 00:19:49,960
which never gets committed or made it

00:19:48,309 --> 00:19:51,639
made into a release they just want to

00:19:49,960 --> 00:19:53,710
like patch two lines and a repository

00:19:51,639 --> 00:19:54,380
somewhere to give them the configuration

00:19:53,710 --> 00:19:55,880
that we can't

00:19:54,380 --> 00:19:59,060
run-time because nobody ever thought of

00:19:55,880 --> 00:20:00,440
doing it so one option to do is kind of

00:19:59,060 --> 00:20:01,790
have a completely separate tool so at

00:20:00,440 --> 00:20:03,860
the moment we have some scripts that

00:20:01,790 --> 00:20:05,900
work around the see make build system

00:20:03,860 --> 00:20:07,790
that we have might pull in the multiple

00:20:05,900 --> 00:20:09,410
dependencies and you like just can say I

00:20:07,790 --> 00:20:11,000
want to modify this package and it will

00:20:09,410 --> 00:20:12,260
let you run out like higher environment

00:20:11,000 --> 00:20:15,140
on top and merge these things together

00:20:12,260 --> 00:20:16,940
quite intelligently because all this

00:20:15,140 --> 00:20:19,100
informations inside Nix it feels like it

00:20:16,940 --> 00:20:22,220
should be possible to like ethnics give

00:20:19,100 --> 00:20:24,020
me a directory here that hat instead of

00:20:22,220 --> 00:20:25,940
it being like built-ins like /tmp it

00:20:24,020 --> 00:20:28,100
gives you the build environment for a

00:20:25,940 --> 00:20:29,630
package in a directory you choose and

00:20:28,100 --> 00:20:31,010
then also give it can give you build

00:20:29,630 --> 00:20:32,840
environments for other dependencies

00:20:31,010 --> 00:20:34,460
along the way and when you build it it

00:20:32,840 --> 00:20:36,290
will link these directories against each

00:20:34,460 --> 00:20:37,610
other I don't know how impossible this

00:20:36,290 --> 00:20:39,470
is do or maybe if something already

00:20:37,610 --> 00:20:40,850
exists but it would be a very useful

00:20:39,470 --> 00:20:42,860
thing to have and quite attractive to

00:20:40,850 --> 00:20:44,600
just have one system for doing this the

00:20:42,860 --> 00:20:46,190
idea of having Nyx's a live replacement

00:20:44,600 --> 00:20:50,750
for make also sounds quite interesting

00:20:46,190 --> 00:20:52,970
but that's a little way away another

00:20:50,750 --> 00:20:54,920
thing that I had an issue with that's

00:20:52,970 --> 00:20:56,720
bit of a pet peeve of mine with other

00:20:54,920 --> 00:20:59,480
systems as well because we also use

00:20:56,720 --> 00:21:01,310
Python path files is that I want to

00:20:59,480 --> 00:21:02,840
encourage people to use Python 3 and as

00:21:01,310 --> 00:21:05,330
part of this giving them Python 2 and

00:21:02,840 --> 00:21:07,640
python 3 in the same environment and is

00:21:05,330 --> 00:21:10,310
a useful thing to do and also sometimes

00:21:07,640 --> 00:21:11,870
there's some software that only supports

00:21:10,310 --> 00:21:13,340
Python to your new sports Python 3 and

00:21:11,870 --> 00:21:15,830
we kind of want to mix them together to

00:21:13,340 --> 00:21:17,390
some extent and using Python path like

00:21:15,830 --> 00:21:19,520
Nix shell does means that you can't then

00:21:17,390 --> 00:21:21,350
import any Python libraries because if

00:21:19,520 --> 00:21:23,990
any of them aren't compatible with both

00:21:21,350 --> 00:21:26,270
same for all of their builds then it

00:21:23,990 --> 00:21:27,800
doesn't work so the solution I came up

00:21:26,270 --> 00:21:30,980
here is just to use site customized

00:21:27,800 --> 00:21:32,570
inside the Python build so that it uses

00:21:30,980 --> 00:21:35,210
a different environment variable to

00:21:32,570 --> 00:21:40,850
actually add a Python version specific

00:21:35,210 --> 00:21:43,490
path to each Python insulate when each

00:21:40,850 --> 00:21:44,600
Python installation loads maybe there's

00:21:43,490 --> 00:21:46,100
another solution that people have used

00:21:44,600 --> 00:21:48,770
for this if please let me know

00:21:46,100 --> 00:21:50,510
afterwards if you have another thing

00:21:48,770 --> 00:21:52,670
that we used having in all the systems

00:21:50,510 --> 00:21:55,040
we currently have is relocate ability so

00:21:52,670 --> 00:21:56,180
that like potentially we'll have lots of

00:21:55,040 --> 00:21:58,190
experiments that want to install this

00:21:56,180 --> 00:21:59,840
two different seeming FS areas I know

00:21:58,190 --> 00:22:03,230
this kind of goes against the purity the

00:21:59,840 --> 00:22:04,940
Nix has so but trying out I thought that

00:22:03,230 --> 00:22:06,650
maybe like the way that replace

00:22:04,940 --> 00:22:08,000
dependency effectively just reply

00:22:06,650 --> 00:22:09,950
applies said to the binary

00:22:08,000 --> 00:22:12,110
is to just assume the store path is the

00:22:09,950 --> 00:22:13,790
same length and then you can just change

00:22:12,110 --> 00:22:15,560
the store path in place because it's a

00:22:13,790 --> 00:22:18,610
huge random string that you don't expect

00:22:15,560 --> 00:22:21,080
to appear in your ass so I did this on

00:22:18,610 --> 00:22:22,880
quite a complicated installation and

00:22:21,080 --> 00:22:24,200
found that everything still works so it

00:22:22,880 --> 00:22:26,420
just seemed like something that could be

00:22:24,200 --> 00:22:27,530
done an installation time but I don't

00:22:26,420 --> 00:22:29,150
know if I've guessed there's been

00:22:27,530 --> 00:22:31,120
discussions about this before as I found

00:22:29,150 --> 00:22:33,470
lots of mailing lists and things but and

00:22:31,120 --> 00:22:34,970
then a few of the things that I'd like

00:22:33,470 --> 00:22:37,100
to find nicer way of doing is that like

00:22:34,970 --> 00:22:38,570
a lot of our libraries need the C++

00:22:37,100 --> 00:22:42,050
standard to be set so that everything is

00:22:38,570 --> 00:22:43,340
built with C++ 17 or C++ 14 and we mix

00:22:42,050 --> 00:22:45,500
these the different versions of software

00:22:43,340 --> 00:22:48,350
as things get upgraded to support newer

00:22:45,500 --> 00:22:50,510
standards also want to come other

00:22:48,350 --> 00:22:51,620
compiler options the other way that the

00:22:50,510 --> 00:22:54,950
only way that I've thought of to do this

00:22:51,620 --> 00:22:57,140
is to just add a property attribute to

00:22:54,950 --> 00:22:58,820
the compiler itself so then each one

00:22:57,140 --> 00:23:00,830
will like query and add its own C make

00:22:58,820 --> 00:23:02,900
flags for the C++ standard or whatever

00:23:00,830 --> 00:23:04,070
and but maybe again this is something I

00:23:02,900 --> 00:23:05,780
just haven't found the solution and

00:23:04,070 --> 00:23:07,700
similarly for debugging symbols feels

00:23:05,780 --> 00:23:09,110
like this one is supported but I never

00:23:07,700 --> 00:23:10,520
managed to get any of the various

00:23:09,110 --> 00:23:14,480
explanations of getting debugging

00:23:10,520 --> 00:23:17,210
symbols to actually work so maybe I'll

00:23:14,480 --> 00:23:20,330
think of that out on Saturday and then

00:23:17,210 --> 00:23:22,580
one last note before I finish so we

00:23:20,330 --> 00:23:23,990
mentioned a few times and I expect that

00:23:22,580 --> 00:23:26,360
a lot of these problems will be fixed

00:23:23,990 --> 00:23:27,590
with containers though still with being

00:23:26,360 --> 00:23:29,120
able to install the software and a more

00:23:27,590 --> 00:23:31,370
reproducible way still useful even with

00:23:29,120 --> 00:23:33,110
containers and this is probably gonna be

00:23:31,370 --> 00:23:34,820
the same inside hep

00:23:33,110 --> 00:23:36,350
I think singularity looks the most

00:23:34,820 --> 00:23:37,820
likely inside high energy physics

00:23:36,350 --> 00:23:40,220
because of the whole docker demon

00:23:37,820 --> 00:23:42,200
security issues with it being escalation

00:23:40,220 --> 00:23:44,570
thing whereas singularities designed for

00:23:42,200 --> 00:23:48,470
unprivileged unprivileged users and is

00:23:44,570 --> 00:23:51,890
slowly starting to find its way into the

00:23:48,470 --> 00:23:53,330
grid sites that we have this could also

00:23:51,890 --> 00:23:54,920
remove the need to relocate the store

00:23:53,330 --> 00:23:57,380
which would be quite nice eventually but

00:23:54,920 --> 00:23:58,670
this is all a long way away for now so

00:23:57,380 --> 00:24:00,560
we'd need to find a solution that works

00:23:58,670 --> 00:24:02,960
with the without using containers for

00:24:00,560 --> 00:24:05,270
now but even when we do move to

00:24:02,960 --> 00:24:06,770
containers there is the post recently

00:24:05,270 --> 00:24:08,060
about multi-layered docker images that

00:24:06,770 --> 00:24:09,560
mount is where Internet packages and

00:24:08,060 --> 00:24:11,690
this looks like a really nice way of

00:24:09,560 --> 00:24:13,220
avoiding the problems of as previously

00:24:11,690 --> 00:24:14,990
thinking about having fat containers and

00:24:13,220 --> 00:24:16,850
suddenly you've got huge binary blobs

00:24:14,990 --> 00:24:18,230
and effects that aren't cached and you

00:24:16,850 --> 00:24:19,490
can get around this by you taking

00:24:18,230 --> 00:24:20,179
advantage of Nick so if you've not heard

00:24:19,490 --> 00:24:22,759
of them

00:24:20,179 --> 00:24:24,559
the link it's quite nice so yeah in

00:24:22,759 --> 00:24:27,409
conclusion I think NYX is awesome and it

00:24:24,559 --> 00:24:29,149
really works nicely for with its purity

00:24:27,409 --> 00:24:31,669
and reproducibility for research that

00:24:29,149 --> 00:24:32,779
can last a long time still a few things

00:24:31,669 --> 00:24:34,279
I need to figure out and hopefully I'll

00:24:32,779 --> 00:24:37,160
give them out over the next few days is

00:24:34,279 --> 00:24:45,869
there any questions

00:24:37,160 --> 00:24:45,869
[Applause]

00:24:48,740 --> 00:24:54,840
hi really interesting I just wonder

00:24:51,809 --> 00:24:58,740
about did you try anything to make slash

00:24:54,840 --> 00:25:02,690
dicks work anyway like symlinks or user

00:24:58,740 --> 00:25:06,809
space username spaces or mind mounts so

00:25:02,690 --> 00:25:08,070
I've tried a few things so symlinks I

00:25:06,809 --> 00:25:09,419
came into the thing of it saying like

00:25:08,070 --> 00:25:10,590
the sim link at the sneek store isn't

00:25:09,419 --> 00:25:12,179
allowed to be a similar link and tried

00:25:10,590 --> 00:25:13,620
to work it and I don't know if you can

00:25:12,179 --> 00:25:16,950
actually pat round it but I didn't get

00:25:13,620 --> 00:25:18,330
that working user name spaces a lot of

00:25:16,950 --> 00:25:19,860
machines we run on don't have a kernel

00:25:18,330 --> 00:25:23,520
that's new enough to give you user name

00:25:19,860 --> 00:25:27,210
spaces but ultimately that might become

00:25:23,520 --> 00:25:28,950
a nice solution but yeah the other thing

00:25:27,210 --> 00:25:31,410
I looked at is a piece of software

00:25:28,950 --> 00:25:35,480
called parrot I think so the way this

00:25:31,410 --> 00:25:39,000
works is - I think it's kind of like you

00:25:35,480 --> 00:25:42,150
do an LD preload hack to intercept the

00:25:39,000 --> 00:25:43,980
SIS calls and I did kind of get that

00:25:42,150 --> 00:25:45,809
working but some of the like security

00:25:43,980 --> 00:25:48,179
enhanced the Linux Siskel's that are

00:25:45,809 --> 00:25:49,620
used unsupported by it and I started

00:25:48,179 --> 00:25:51,090
patching them in but then I found myself

00:25:49,620 --> 00:25:52,799
in a bit of a mess that I didn't have

00:25:51,090 --> 00:25:55,140
time to actually learn what I needed to

00:25:52,799 --> 00:25:57,540
know to patch it properly so that might

00:25:55,140 --> 00:25:58,620
be another solution but I didn't find

00:25:57,540 --> 00:26:03,470
myself having enough time to actually

00:25:58,620 --> 00:26:06,470
investigate it properly other questions

00:26:03,470 --> 00:26:06,470
yes

00:26:09,580 --> 00:26:16,490
hi thanks for the talk is this a

00:26:13,820 --> 00:26:18,289
solution that's being in production I'm

00:26:16,490 --> 00:26:21,140
sorry can you move the microphone closer

00:26:18,289 --> 00:26:23,210
sorry like do you is the is this a

00:26:21,140 --> 00:26:25,700
solution that's heading to a production

00:26:23,210 --> 00:26:27,049
or is it already running so at the

00:26:25,700 --> 00:26:29,210
moment it's still kind of being

00:26:27,049 --> 00:26:31,190
investigated subject to my time like I

00:26:29,210 --> 00:26:33,289
can start thinking about pushing it into

00:26:31,190 --> 00:26:35,780
production but this is my side project

00:26:33,289 --> 00:26:38,299
so as much time as I can find before I

00:26:35,780 --> 00:26:39,950
submit my thesis but it's being taken

00:26:38,299 --> 00:26:41,270
seriously as part of this help software

00:26:39,950 --> 00:26:43,490
foundation like set of like

00:26:41,270 --> 00:26:47,059
recommendations so it may come out as

00:26:43,490 --> 00:26:48,620
being the recommendation from that well

00:26:47,059 --> 00:26:53,150
questions we have time you finished

00:26:48,620 --> 00:26:54,740
early it seemed like a lot of the talk

00:26:53,150 --> 00:26:55,669
is about reproducibility of builds I

00:26:54,740 --> 00:26:57,740
guess how interested you in

00:26:55,669 --> 00:26:59,179
reproducibility of experiments based on

00:26:57,740 --> 00:27:02,059
is that kind of saying that that

00:26:59,179 --> 00:27:04,640
foundation is interested in I don't know

00:27:02,059 --> 00:27:05,870
if raised that way well by that you mean

00:27:04,640 --> 00:27:07,669
like other experiments being able to

00:27:05,870 --> 00:27:11,570
reproduce the results yes exactly

00:27:07,669 --> 00:27:13,190
yeah so that's kind of a separate thing

00:27:11,570 --> 00:27:14,510
that I'm also involved in of like trying

00:27:13,190 --> 00:27:17,299
to preserve analyses and knowing exactly

00:27:14,510 --> 00:27:19,789
how we actually produce results and this

00:27:17,299 --> 00:27:21,140
can also help for like just giving you a

00:27:19,789 --> 00:27:22,309
better idea of what software you used

00:27:21,140 --> 00:27:23,659
and being able to build these

00:27:22,309 --> 00:27:25,870
environments up again which can be quite

00:27:23,659 --> 00:27:25,870
tricky

00:27:25,900 --> 00:27:29,260
well questions

00:27:31,990 --> 00:27:36,190
nope then thank you very much again for

00:27:34,630 --> 00:27:42,369
your wonderful talk

00:27:36,190 --> 00:27:42,369

YouTube URL: https://www.youtube.com/watch?v=Ee8k97Rx3DA


