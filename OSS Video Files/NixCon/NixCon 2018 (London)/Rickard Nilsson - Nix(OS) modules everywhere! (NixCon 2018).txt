Title: Rickard Nilsson - Nix(OS) modules everywhere! (NixCon 2018)
Publication date: 2018-10-27
Playlist: NixCon 2018 (London)
Description: 
	Description:I'll talk about how I've implemented a deployment system from scratch in Nix for a client, and show how Nix(OS) modules can be used outside NixOS in productive ways.
---
Bio: Freelancing devops engineer interested in functional programming and declarative deployments.
Slides: https://drive.google.com/open?id=0B4r1oNPr9K9LZjJrdVB5NEx0Z3VleENwaTBLYVZkNzJFZXc4
Captions: 
	00:00:00,030 --> 00:00:05,490
okay there we go so the first speaker

00:00:03,419 --> 00:00:07,560
for today is record and he's gonna tell

00:00:05,490 --> 00:00:10,080
us about deployment about setting up a

00:00:07,560 --> 00:00:11,580
deployment system from scratch and how

00:00:10,080 --> 00:00:14,070
to make use of NICs those modules even

00:00:11,580 --> 00:00:16,560
outside of an exercise so take it away

00:00:14,070 --> 00:00:18,580
and draw everyone and warm round of

00:00:16,560 --> 00:00:25,949
applause for regard

00:00:18,580 --> 00:00:25,949
[Applause]

00:00:35,090 --> 00:00:43,940
so good morning Ricard I am here to talk

00:00:40,730 --> 00:00:45,320
about the NYX module system and how you

00:00:43,940 --> 00:00:51,560
can use it for more than just

00:00:45,320 --> 00:00:54,200
configuring mix OS so short inter me I'm

00:00:51,560 --> 00:00:57,800
a freelancing developer and DevOps guy

00:00:54,200 --> 00:00:59,750
I've been building stuff based on Nick's

00:00:57,800 --> 00:01:04,520
professionally for the last five years

00:00:59,750 --> 00:01:06,800
so I run the company images mutable

00:01:04,520 --> 00:01:11,060
solutions and I'm proud to sponsored

00:01:06,800 --> 00:01:15,890
every Nick's con so far so during this

00:01:11,060 --> 00:01:19,150
talk I want to show you the way I've

00:01:15,890 --> 00:01:21,410
used Nick's modules to implement

00:01:19,150 --> 00:01:26,900
operations infrastructure for a client

00:01:21,410 --> 00:01:29,060
of mine and the stuff up sent today have

00:01:26,900 --> 00:01:33,110
gone through a few iterations since I

00:01:29,060 --> 00:01:36,619
first started about two years ago and I

00:01:33,110 --> 00:01:40,280
still work for this client and we keep

00:01:36,619 --> 00:01:45,170
using this in production and we keep

00:01:40,280 --> 00:01:48,770
improving it and in the end I think I've

00:01:45,170 --> 00:01:51,350
come up with a system with some pretty

00:01:48,770 --> 00:01:54,590
interesting properties and that's it's

00:01:51,350 --> 00:01:59,360
what's I that is what I hope I will be

00:01:54,590 --> 00:02:01,250
able to demonstrate today this is no I

00:01:59,360 --> 00:02:02,720
have no product to show you this is not

00:02:01,250 --> 00:02:05,030
something that you can take and drop

00:02:02,720 --> 00:02:08,200
into your own projects unfortunately we

00:02:05,030 --> 00:02:13,280
have some parts small parts of it open

00:02:08,200 --> 00:02:16,550
and out on github very poorly document

00:02:13,280 --> 00:02:18,740
though so it would make sense to open up

00:02:16,550 --> 00:02:22,190
more of it but that's always it it takes

00:02:18,740 --> 00:02:25,730
time and energy to to do that so what I

00:02:22,190 --> 00:02:30,890
hope you will take with you and after my

00:02:25,730 --> 00:02:33,980
talk is that you can use the NYX module

00:02:30,890 --> 00:02:38,810
system for more things than configuring

00:02:33,980 --> 00:02:42,709
mix OS and that's modular declarative

00:02:38,810 --> 00:02:46,909
configurations be it using NYX modules

00:02:42,709 --> 00:02:48,939
or anything similar it's a very nice way

00:02:46,909 --> 00:02:48,939
of

00:02:49,230 --> 00:02:54,930
configuring deployments and probably

00:02:52,030 --> 00:02:54,930
lots of other stuff too

00:02:58,569 --> 00:03:01,569
so

00:03:01,660 --> 00:03:09,580
these are some core principles you might

00:03:05,140 --> 00:03:11,620
say that I've had when that I've had in

00:03:09,580 --> 00:03:14,980
back in my mind when building

00:03:11,620 --> 00:03:17,590
deployments tools so I want to be able

00:03:14,980 --> 00:03:22,510
to bootstrap from nothing except maybe

00:03:17,590 --> 00:03:26,400
nix and get I want to configure as much

00:03:22,510 --> 00:03:28,540
as possible in a declarative fashion and

00:03:26,400 --> 00:03:31,300
there should be minimal differences

00:03:28,540 --> 00:03:36,070
between production development staging

00:03:31,300 --> 00:03:39,310
and so on configurations and it's nice

00:03:36,070 --> 00:03:44,410
to have all Ops related tasks available

00:03:39,310 --> 00:03:47,830
in some kind of shell so all of those

00:03:44,410 --> 00:03:50,710
things makes it makes it easy for new

00:03:47,830 --> 00:03:55,930
recruits to get started with projects

00:03:50,710 --> 00:03:58,450
and it makes it easy to make changes in

00:03:55,930 --> 00:04:01,780
places you're not that familiar with and

00:03:58,450 --> 00:04:04,320
of course to try out new things and

00:04:01,780 --> 00:04:04,320
experiments

00:04:07,110 --> 00:04:13,920
so when you save you implemented a

00:04:10,080 --> 00:04:15,540
deployment system based on Nix one of

00:04:13,920 --> 00:04:17,970
the first question is why didn't we I

00:04:15,540 --> 00:04:20,870
didn't use Nick's ops and I think it's

00:04:17,970 --> 00:04:24,810
been brought up during a few talks

00:04:20,870 --> 00:04:29,160
yesterday and I there's some issues that

00:04:24,810 --> 00:04:31,020
I have had with it so it's not

00:04:29,160 --> 00:04:33,330
declarative enough you have this state

00:04:31,020 --> 00:04:36,450
file you have to manage anyway in some

00:04:33,330 --> 00:04:40,130
way and that's not really compatible

00:04:36,450 --> 00:04:41,390
with my bootstrap from nothing approach

00:04:40,130 --> 00:04:45,390
[Music]

00:04:41,390 --> 00:04:48,180
it's not modular or extensible enough

00:04:45,390 --> 00:04:49,950
you can extend it by using the Python

00:04:48,180 --> 00:04:52,530
API so you can write new backends and

00:04:49,950 --> 00:04:54,890
implement new functionality but hi I had

00:04:52,530 --> 00:04:57,600
a more much more sort of flexible

00:04:54,890 --> 00:04:59,970
extensibility in mind and when I started

00:04:57,600 --> 00:05:04,470
working on my system and I hope to be

00:04:59,970 --> 00:05:06,480
able to to show that today also my

00:05:04,470 --> 00:05:10,890
client is using the Google cloud

00:05:06,480 --> 00:05:12,510
platform and when we started Nick stuffs

00:05:10,890 --> 00:05:15,030
back-end for that was not as much sure

00:05:12,510 --> 00:05:18,540
today as it is today and I think there's

00:05:15,030 --> 00:05:21,540
still things missing that that we need

00:05:18,540 --> 00:05:24,950
so I knew I had to implement some of the

00:05:21,540 --> 00:05:24,950
provisioning stuff anyway

00:05:30,060 --> 00:05:37,920
yeah so now I'm going to jump directly

00:05:32,070 --> 00:05:45,450
to how production deployment might look

00:05:37,920 --> 00:05:47,700
like for one a my for my team and this

00:05:45,450 --> 00:05:51,360
is simplified of course but the concepts

00:05:47,700 --> 00:05:55,380
are same and if you configure Nix OS you

00:05:51,360 --> 00:05:58,500
recognize this syntax this format we use

00:05:55,380 --> 00:06:04,500
the exact same kind of modules that Nix

00:05:58,500 --> 00:06:09,230
always does so in the top we import two

00:06:04,500 --> 00:06:12,450
other modules one of the hello world

00:06:09,230 --> 00:06:17,910
module defines the applications

00:06:12,450 --> 00:06:21,090
application where we deploy and the

00:06:17,910 --> 00:06:24,240
Google cloud platform defines everything

00:06:21,090 --> 00:06:26,780
that is needed to provision and deploy

00:06:24,240 --> 00:06:31,350
an application on Google cloud platform

00:06:26,780 --> 00:06:34,260
and depending on what modules import you

00:06:31,350 --> 00:06:36,810
get different configuration options

00:06:34,260 --> 00:06:38,430
available so the greeting phrase option

00:06:36,810 --> 00:06:41,820
comes from the hello world module and

00:06:38,430 --> 00:06:45,180
the GCP settings comes from the google

00:06:41,820 --> 00:06:49,530
cloud platform and then we have base

00:06:45,180 --> 00:06:51,480
modules that define things that's used

00:06:49,530 --> 00:06:54,510
for all our deployments like name and

00:06:51,480 --> 00:06:56,090
domain settings and environments are

00:06:54,510 --> 00:06:59,490
things

00:06:56,090 --> 00:07:02,670
so what I wanted to show you is that we

00:06:59,490 --> 00:07:05,250
can have a very clean top level

00:07:02,670 --> 00:07:08,700
deployment configuration and of course

00:07:05,250 --> 00:07:12,300
this is a silly application and we don't

00:07:08,700 --> 00:07:15,510
configure much here but that the concept

00:07:12,300 --> 00:07:20,340
is the same we can have things that make

00:07:15,510 --> 00:07:22,100
sense that you can read and write that

00:07:20,340 --> 00:07:24,780
makes sense even if you don't have

00:07:22,100 --> 00:07:28,290
detail no like knowledge about how

00:07:24,780 --> 00:07:33,800
everything is setup and this is exactly

00:07:28,290 --> 00:07:38,700
how NICs OS works - we can sort of hide

00:07:33,800 --> 00:07:45,450
details in lower level modules and have

00:07:38,700 --> 00:07:49,710
a sort of a layered configuration so

00:07:45,450 --> 00:07:53,490
here we have a staging setup for for the

00:07:49,710 --> 00:07:55,440
same deployment and I just want to show

00:07:53,490 --> 00:07:58,590
you that this is also deployed to Google

00:07:55,440 --> 00:08:01,220
Cloud so the differences are very small

00:07:58,590 --> 00:08:01,220
here

00:08:06,860 --> 00:08:15,930
and here we have a development set up we

00:08:12,600 --> 00:08:18,600
still import the exact same application

00:08:15,930 --> 00:08:20,190
module but now we use another back-end

00:08:18,600 --> 00:08:25,200
the development back-end that we have

00:08:20,190 --> 00:08:29,300
and we import an additional application

00:08:25,200 --> 00:08:34,700
module the monitoring module and this is

00:08:29,300 --> 00:08:39,630
exactly the exact same module that is

00:08:34,700 --> 00:08:42,539
that we using in production so it's said

00:08:39,630 --> 00:08:45,860
that sets up all servers needed for log

00:08:42,539 --> 00:08:49,260
aggregation metric visualizations

00:08:45,860 --> 00:08:51,660
alerting and all that and we deployed

00:08:49,260 --> 00:08:56,280
that to in production we deploy that to

00:08:51,660 --> 00:08:58,440
a dedicated deployment and all other

00:08:56,280 --> 00:09:01,650
deployments will send their monitoring

00:08:58,440 --> 00:09:04,860
data to that deployment but in during

00:09:01,650 --> 00:09:07,410
development we don't want to send things

00:09:04,860 --> 00:09:09,600
off to a central aggregation point so in

00:09:07,410 --> 00:09:12,560
yes instead we just bring in all of that

00:09:09,600 --> 00:09:16,530
infrastructure inside our deployed

00:09:12,560 --> 00:09:19,530
development deployment so the developer

00:09:16,530 --> 00:09:25,200
will get all those services locally on

00:09:19,530 --> 00:09:27,780
his computer and that's very useful to

00:09:25,200 --> 00:09:30,090
make sure there's no like deviations

00:09:27,780 --> 00:09:34,320
between development and production and

00:09:30,090 --> 00:09:36,870
you can set up things like alerts log

00:09:34,320 --> 00:09:39,540
queries and everything and try it out

00:09:36,870 --> 00:09:42,330
locally and then just directly move

00:09:39,540 --> 00:09:46,850
things to production when you're when

00:09:42,330 --> 00:09:52,050
you're satisfied okay so I showed you

00:09:46,850 --> 00:09:55,650
three variants of the same application

00:09:52,050 --> 00:09:59,580
deployment and it all looks very nice

00:09:55,650 --> 00:10:02,940
but probably a bit abstract so how do we

00:09:59,580 --> 00:10:05,610
use this we have a thin we have a script

00:10:02,940 --> 00:10:09,890
that is a thin wrapper around the next

00:10:05,610 --> 00:10:13,460
tools that will evaluate this top level

00:10:09,890 --> 00:10:16,709
module and all the important modules and

00:10:13,460 --> 00:10:21,059
in the end it will produce

00:10:16,709 --> 00:10:25,139
deployment shell and this deployment

00:10:21,059 --> 00:10:27,600
shell welcome we give you all the

00:10:25,139 --> 00:10:29,730
commands needed to work on that

00:10:27,600 --> 00:10:33,179
particular deployment so it includes

00:10:29,730 --> 00:10:35,939
commands for like provisioning the cloud

00:10:33,179 --> 00:10:37,619
resources deploying and activating the

00:10:35,939 --> 00:10:46,079
applications performing maintenance

00:10:37,619 --> 00:10:50,040
tasks so in in a way each deployment

00:10:46,079 --> 00:10:52,619
configuration will result in its own

00:10:50,040 --> 00:10:54,240
unique deployment tool with all the

00:10:52,619 --> 00:10:58,699
features that's needed for that

00:10:54,240 --> 00:11:02,910
particular deployment and that is what

00:10:58,699 --> 00:11:06,600
that was that isn't what I meant with a

00:11:02,910 --> 00:11:10,800
more like flexible extensibility to the

00:11:06,600 --> 00:11:13,679
NICS ops so we can we can plug in new

00:11:10,800 --> 00:11:17,660
things support for new cloud resources

00:11:13,679 --> 00:11:21,089
or cloud providers or anything by just

00:11:17,660 --> 00:11:26,220
implementing unix modules and drop them

00:11:21,089 --> 00:11:28,709
into our deployments so i'm going to

00:11:26,220 --> 00:11:33,829
show you how this works in practice

00:11:28,709 --> 00:11:33,829
using this development configuration

00:11:54,260 --> 00:12:02,080
so here we have our development

00:11:59,690 --> 00:12:05,780
deployment and the top level

00:12:02,080 --> 00:12:11,200
configuration is exactly the same that I

00:12:05,780 --> 00:12:16,790
showed you on the slides and we have our

00:12:11,200 --> 00:12:18,560
shell builder that will that will take

00:12:16,790 --> 00:12:21,320
this configuration and build a

00:12:18,560 --> 00:12:23,630
deployment shell and then enter that so

00:12:21,320 --> 00:12:29,600
now you can see what that we're inside

00:12:23,630 --> 00:12:33,010
the hello world deployment shell and we

00:12:29,600 --> 00:12:37,810
can start things off by running the

00:12:33,010 --> 00:12:41,360
provision command and this will start up

00:12:37,810 --> 00:12:43,610
since this is that use the development

00:12:41,360 --> 00:12:46,010
pack and it will start up systemd

00:12:43,610 --> 00:12:49,550
containers for all the servers that are

00:12:46,010 --> 00:12:53,360
defined in our configurations and it

00:12:49,550 --> 00:12:57,380
will also configure DNS locally on my

00:12:53,360 --> 00:12:59,410
laptop here for the the endpoints that

00:12:57,380 --> 00:13:02,410
was that we have defined in our

00:12:59,410 --> 00:13:02,410
applications

00:13:02,980 --> 00:13:13,030
so now we can actually open up a web

00:13:10,840 --> 00:13:20,460
page and see our application running

00:13:13,030 --> 00:13:20,460
here and we can

00:13:24,870 --> 00:13:32,630
we can change the config we can change

00:13:27,900 --> 00:13:32,630
this greeting phrase

00:13:37,780 --> 00:13:46,540
and then we reload the config and this

00:13:40,090 --> 00:13:50,140
will actually rebuild the shell and now

00:13:46,540 --> 00:13:52,540
we can run the deploy command which in

00:13:50,140 --> 00:13:54,550
this case is a little shortcut since we

00:13:52,540 --> 00:13:57,580
can reuse the existing system D

00:13:54,550 --> 00:14:00,660
containers so we will just the deployed

00:13:57,580 --> 00:14:07,740
command we'll just activate the new

00:14:00,660 --> 00:14:15,040
configurations and those errors are

00:14:07,740 --> 00:14:18,580
expected here and we have the new the

00:14:15,040 --> 00:14:23,640
new greeting place in deployed and I can

00:14:18,580 --> 00:14:23,640
also show you that for example we have

00:14:26,319 --> 00:14:35,639
agra fauna installation here with some

00:14:33,819 --> 00:14:40,019
dashboards yeah

00:14:35,639 --> 00:14:48,449
there won't be much data here we can

00:14:40,019 --> 00:14:48,449
refresh this sometimes maybe and then we

00:14:52,840 --> 00:14:55,890
yes or

00:15:02,450 --> 00:15:14,060
oh yeah waxing we can say we've got six

00:15:07,730 --> 00:15:23,750
six requests here now and it's yeah and

00:15:14,060 --> 00:15:25,490
this is yeah so those dashboards are the

00:15:23,750 --> 00:15:27,500
same that will be deployed in in

00:15:25,490 --> 00:15:30,620
production and then we can experiment

00:15:27,500 --> 00:15:33,320
with setting those things up during

00:15:30,620 --> 00:15:39,529
deployment and have the actual exactly

00:15:33,320 --> 00:15:44,620
the same sort of chain of flow of metric

00:15:39,529 --> 00:15:44,620
data locally so we know

00:15:58,040 --> 00:16:07,139
and finally here's a test deployment for

00:16:03,149 --> 00:16:10,920
the same application and now we import

00:16:07,139 --> 00:16:14,630
the test backend instead and it's it's a

00:16:10,920 --> 00:16:16,949
very it behaves very similarly to the

00:16:14,630 --> 00:16:19,649
development back and actually it uses

00:16:16,949 --> 00:16:23,069
systemd containers and brings brings the

00:16:19,649 --> 00:16:26,040
whole deployment up but it does that

00:16:23,069 --> 00:16:30,540
inside Nick's build so we can run this

00:16:26,040 --> 00:16:34,550
on Hydra for example and we can now add

00:16:30,540 --> 00:16:38,880
a test script to our configuration and

00:16:34,550 --> 00:16:42,600
as you can see inside this test script

00:16:38,880 --> 00:16:44,880
we can use the complete deployment

00:16:42,600 --> 00:16:48,089
configuration so we we don't have to

00:16:44,880 --> 00:16:50,730
hard code a greeting praise the phrase

00:16:48,089 --> 00:16:52,769
in this in this small test so we can

00:16:50,730 --> 00:16:55,170
pick up the things we need from the

00:16:52,769 --> 00:16:59,600
configuration and we write this general

00:16:55,170 --> 00:16:59,600
assertion in our test script

00:17:04,490 --> 00:17:11,680
so as you seen depending on what modules

00:17:08,240 --> 00:17:14,570
we import to our deployment we get

00:17:11,680 --> 00:17:17,000
things like different shell commands

00:17:14,570 --> 00:17:19,670
different deployment tasks we also

00:17:17,000 --> 00:17:21,650
defined Hydra jobs in this way so

00:17:19,670 --> 00:17:23,780
application can sort of plug in there

00:17:21,650 --> 00:17:28,160
are tests and bills that they need and

00:17:23,780 --> 00:17:30,530
it will they will appear in our Hydra

00:17:28,160 --> 00:17:32,960
instance and the monitoring dashboards

00:17:30,530 --> 00:17:36,710
also depends on like what back-end you

00:17:32,960 --> 00:17:39,620
use what applications use and and all of

00:17:36,710 --> 00:17:41,600
this you can also define in a top-level

00:17:39,620 --> 00:17:44,360
configuration if you want to so if you

00:17:41,600 --> 00:17:46,250
need some specific command for a

00:17:44,360 --> 00:17:47,930
specific deployment you can just add it

00:17:46,250 --> 00:17:52,510
to that deployment and get that

00:17:47,930 --> 00:17:52,510
available in your deployment shell

00:17:59,450 --> 00:18:08,159
so this is the the complete contents of

00:18:04,230 --> 00:18:10,230
the hello world application module so as

00:18:08,159 --> 00:18:12,600
you can see we have more levels of

00:18:10,230 --> 00:18:16,100
modularity here so the application

00:18:12,600 --> 00:18:18,780
module imports another HTTP endpoints

00:18:16,100 --> 00:18:21,860
module and that will take care of

00:18:18,780 --> 00:18:25,559
setting up nginx

00:18:21,860 --> 00:18:30,570
configuring request logging metric

00:18:25,559 --> 00:18:33,210
collection DNS setup as I saw and you

00:18:30,570 --> 00:18:36,120
can even have it can't even handle load

00:18:33,210 --> 00:18:38,280
balancing and stuff like that so in our

00:18:36,120 --> 00:18:42,720
application module we just have to drop

00:18:38,280 --> 00:18:44,940
in a small piece of nginx config and in

00:18:42,720 --> 00:18:47,640
normal case you would probably proxy

00:18:44,940 --> 00:18:49,380
that request off to some real

00:18:47,640 --> 00:18:51,770
application but here our complete

00:18:49,380 --> 00:18:58,169
application implementation is inside

00:18:51,770 --> 00:19:02,580
nginx so this way as an Operations team

00:18:58,169 --> 00:19:04,950
we can sort of define a suitable

00:19:02,580 --> 00:19:08,400
abstraction abstraction for for the

00:19:04,950 --> 00:19:09,840
applications developers this is one of

00:19:08,400 --> 00:19:11,880
the strengths of the next module system

00:19:09,840 --> 00:19:15,870
that you easily can define those

00:19:11,880 --> 00:19:19,380
abstractions that makes sense in the

00:19:15,870 --> 00:19:21,720
specific context but you can still allow

00:19:19,380 --> 00:19:26,809
for for uses to sort of drop down to

00:19:21,720 --> 00:19:29,809
lower levels and use stuff below your

00:19:26,809 --> 00:19:29,809
abstractions

00:19:34,160 --> 00:19:39,740
so as I mentioned the modules we are

00:19:36,380 --> 00:19:43,460
using are are the exact same same things

00:19:39,740 --> 00:19:46,280
as there as in Nix OS so there's good

00:19:43,460 --> 00:19:48,890
documentation on how to implement

00:19:46,280 --> 00:19:55,640
modules in the official Nick service

00:19:48,890 --> 00:19:58,210
manual I'm going to save just a few

00:19:55,640 --> 00:20:01,280
words about how we evaluate

00:19:58,210 --> 00:20:06,320
configurations and build the deployment

00:20:01,280 --> 00:20:11,000
shell so as an example consider those

00:20:06,320 --> 00:20:13,490
two very simple modules the customers

00:20:11,000 --> 00:20:17,330
module just define a customers option

00:20:13,490 --> 00:20:21,830
which is a list of strings and my

00:20:17,330 --> 00:20:26,170
customers module import this module and

00:20:21,830 --> 00:20:26,170
sets the customers configuration to ABC

00:20:38,190 --> 00:20:45,240
so next modules are evaluated by using

00:20:41,910 --> 00:20:50,310
the eval modules defined in Nix packages

00:20:45,240 --> 00:20:52,710
and we evaluate we give this this month

00:20:50,310 --> 00:20:57,170
the function takes list of modules as

00:20:52,710 --> 00:21:00,920
arguments and it will compose those

00:20:57,170 --> 00:21:04,530
modules and everything they import and

00:21:00,920 --> 00:21:09,570
evaluate and produce a final

00:21:04,530 --> 00:21:12,270
configuration out of it and we can

00:21:09,570 --> 00:21:16,020
simply ask Nix for the customers

00:21:12,270 --> 00:21:24,740
attributes and then we will get back ABC

00:21:16,020 --> 00:21:28,740
as expected and for our shell builder

00:21:24,740 --> 00:21:31,730
this is a simplified version of it but

00:21:28,740 --> 00:21:35,190
but the concept is the same so we just

00:21:31,730 --> 00:21:41,090
evaluate the top-level configuration

00:21:35,190 --> 00:21:46,080
module and then we ask for the bash RC

00:21:41,090 --> 00:21:53,670
if I build and launch a new bash shell

00:21:46,080 --> 00:21:58,170
with it with this and so in lower level

00:21:53,670 --> 00:22:00,840
modules we we have things for defining

00:21:58,170 --> 00:22:04,610
commands and they will build up this

00:22:00,840 --> 00:22:07,800
bash RC file that will make those files

00:22:04,610 --> 00:22:10,040
those commands available inside your

00:22:07,800 --> 00:22:10,040
shell

00:22:17,300 --> 00:22:25,370
so after having showed you love some

00:22:20,570 --> 00:22:27,110
nice and happy stuff for in this talk I

00:22:25,370 --> 00:22:29,870
just wanted to admit that the next

00:22:27,110 --> 00:22:32,920
module system is it's not perfect so the

00:22:29,870 --> 00:22:37,120
main issues I have with it is that the

00:22:32,920 --> 00:22:42,500
namespace in in next modules is global

00:22:37,120 --> 00:22:45,770
and everything is public so any module

00:22:42,500 --> 00:22:49,790
you import can change the configuration

00:22:45,770 --> 00:22:54,280
or even option the declarations of any

00:22:49,790 --> 00:23:00,950
other module in your composition and

00:22:54,280 --> 00:23:04,580
this can get messy and it would be nice

00:23:00,950 --> 00:23:08,840
with some additional level of control

00:23:04,580 --> 00:23:11,560
maybe elko has some something for

00:23:08,840 --> 00:23:13,910
managing that and it's not new new

00:23:11,560 --> 00:23:17,510
configuration proposal - I don't know

00:23:13,910 --> 00:23:19,670
but some way of sort of typing the

00:23:17,510 --> 00:23:21,730
module interfaces more strictly or

00:23:19,670 --> 00:23:27,620
having private interfaces or something

00:23:21,730 --> 00:23:33,020
would be beneficial and evaluating

00:23:27,620 --> 00:23:37,220
modules is quite slow and in our setup

00:23:33,020 --> 00:23:41,750
we make things worse by by having to

00:23:37,220 --> 00:23:45,730
evaluate several Nix OS configuration

00:23:41,750 --> 00:23:45,730
inside for each deployment

00:23:45,900 --> 00:23:55,530
so that is also a bad thing and our

00:23:51,960 --> 00:23:59,280
Hydra setup is sort of spending lots of

00:23:55,530 --> 00:24:03,860
time of just evaluating all of those

00:23:59,280 --> 00:24:07,770
configurations for for the test builds

00:24:03,860 --> 00:24:10,950
finally since the modules are evaluated

00:24:07,770 --> 00:24:13,590
in a recursive fashion it's easy to get

00:24:10,950 --> 00:24:16,860
into a situation where you make a

00:24:13,590 --> 00:24:20,760
configuration depend on its self

00:24:16,860 --> 00:24:23,490
somewhere and you get those infinite

00:24:20,760 --> 00:24:26,490
recursions and it actually can be quite

00:24:23,490 --> 00:24:30,870
tricky to find out exactly what caused

00:24:26,490 --> 00:24:33,540
it and the huge stack traces that Nix

00:24:30,870 --> 00:24:36,420
will provide right it's not always

00:24:33,540 --> 00:24:39,090
helpful because they can sort of the

00:24:36,420 --> 00:24:42,150
they often point to library functions

00:24:39,090 --> 00:24:46,040
within X packages and not do not reveal

00:24:42,150 --> 00:24:48,929
reveal daesh's and then my method of

00:24:46,040 --> 00:24:53,070
debugging that our fixing that is often

00:24:48,929 --> 00:24:55,710
just to remove stuff until the recursion

00:24:53,070 --> 00:24:58,620
the infinite recursions go away and then

00:24:55,710 --> 00:25:05,780
add back one thing at a time so that's

00:24:58,620 --> 00:25:09,080
not ideal yeah that's all for me for me

00:25:05,780 --> 00:25:09,080
thank you for listening

00:25:11,200 --> 00:25:17,280
[Applause]

00:25:14,330 --> 00:25:18,809
all righty so ok I was about to say who

00:25:17,280 --> 00:25:21,270
has questions and the first hand is

00:25:18,809 --> 00:25:26,010
already in the air so here we go hi

00:25:21,270 --> 00:25:28,140
thanks for the talk I see that the way

00:25:26,010 --> 00:25:32,540
you set this up basically does all the

00:25:28,140 --> 00:25:36,210
infrastructure set up DNS machines

00:25:32,540 --> 00:25:38,790
everything and as he I'm sure you know

00:25:36,210 --> 00:25:42,270
there is a tool around called terraform

00:25:38,790 --> 00:25:45,299
that does most of this stuff so what was

00:25:42,270 --> 00:25:47,340
for you a compelling reason to go and

00:25:45,299 --> 00:25:52,380
develop your solution with Nix rather

00:25:47,340 --> 00:25:54,780
than using terraform yeah so so

00:25:52,380 --> 00:25:56,669
terraform would be a great back-end to

00:25:54,780 --> 00:26:00,390
our system I mean it would be very

00:25:56,669 --> 00:26:02,250
useful to to generate terraform

00:26:00,390 --> 00:26:04,950
configuration from formal confirmation

00:26:02,250 --> 00:26:09,330
and use that to provision stuff so so

00:26:04,950 --> 00:26:13,520
that is absolutely and we do use for for

00:26:09,330 --> 00:26:15,870
the cloud resources we do use Google's

00:26:13,520 --> 00:26:17,640
deployment manager which was also a

00:26:15,870 --> 00:26:22,830
declarative way of specifying the

00:26:17,640 --> 00:26:24,330
resources we generate a description of

00:26:22,830 --> 00:26:26,280
the resources we want from our

00:26:24,330 --> 00:26:28,799
configuration but it would make

00:26:26,280 --> 00:26:31,440
perfectly sense to use terraformers also

00:26:28,799 --> 00:26:33,990
the backend and you could probably use

00:26:31,440 --> 00:26:36,500
Nix ops as a back-end - something like

00:26:33,990 --> 00:26:39,110
this - like generate mix-ups

00:26:36,500 --> 00:26:44,419
configuration to make use of

00:26:39,110 --> 00:26:47,340
provisioning code more questions yes

00:26:44,419 --> 00:26:52,410
what does the dev backend look like in

00:26:47,340 --> 00:26:55,799
the code yeah so we have we have

00:26:52,410 --> 00:26:59,070
implemented this small daemon for

00:26:55,799 --> 00:27:03,059
running multiple NIC so as containers

00:26:59,070 --> 00:27:08,370
basically so the dev back-end we

00:27:03,059 --> 00:27:11,700
basically just generate basically as a

00:27:08,370 --> 00:27:15,030
map of machine names to Nick so as

00:27:11,700 --> 00:27:20,110
configurations and hand this description

00:27:15,030 --> 00:27:24,290
to our demon and it will bring up those

00:27:20,110 --> 00:27:27,080
NIC's always containers and keep them

00:27:24,290 --> 00:27:28,520
running until one of them stops or

00:27:27,080 --> 00:27:32,780
something like that so we used that

00:27:28,520 --> 00:27:35,360
demon both for for development and in in

00:27:32,780 --> 00:27:38,390
our test scripts so so Hydra will

00:27:35,360 --> 00:27:40,970
actually we do sort of impure Hydra

00:27:38,390 --> 00:27:45,620
bills where it will use make use of the

00:27:40,970 --> 00:27:49,700
local Nick OS containers demon thing

00:27:45,620 --> 00:27:52,370
that we have so so the dev backend is is

00:27:49,700 --> 00:27:57,080
actually quite simple it will just build

00:27:52,370 --> 00:28:01,120
that description and fire it up more

00:27:57,080 --> 00:28:01,120
questions yes

00:28:01,330 --> 00:28:05,180
hey so we've talked to us a little bit

00:28:03,650 --> 00:28:07,760
one of the issues I've run into with the

00:28:05,180 --> 00:28:10,220
module system is the global nature makes

00:28:07,760 --> 00:28:11,960
it very hard to reuse one module in

00:28:10,220 --> 00:28:14,240
multiple places because there's only one

00:28:11,960 --> 00:28:20,180
namespace have you run into that or what

00:28:14,240 --> 00:28:23,270
do you do when you we haven't had any

00:28:20,180 --> 00:28:26,360
big issues with this but that is mainly

00:28:23,270 --> 00:28:30,410
because we as a team and as a companies

00:28:26,360 --> 00:28:33,650
can sort of control our module suit so

00:28:30,410 --> 00:28:37,700
we don't have to to share them with sort

00:28:33,650 --> 00:28:40,760
of the public or we don't use modules

00:28:37,700 --> 00:28:45,160
provided by someone else but it would

00:28:40,760 --> 00:28:48,380
definitely be nice to have better

00:28:45,160 --> 00:28:51,380
control in this area so so that we would

00:28:48,380 --> 00:28:53,380
allow some sort of libraries of modules

00:28:51,380 --> 00:28:56,030
and stuff like that because that's

00:28:53,380 --> 00:28:58,280
entirely you have to sort of just come

00:28:56,030 --> 00:29:02,350
up with some convention now and hope

00:28:58,280 --> 00:29:02,350
that people adhere to it

00:29:09,310 --> 00:29:14,470
does the set up require me running mixer

00:29:12,100 --> 00:29:16,330
so can this be used in a different Linux

00:29:14,470 --> 00:29:18,730
distribution and do i needs

00:29:16,330 --> 00:29:20,410
privileges for running this kind of

00:29:18,730 --> 00:29:27,000
setup or can I run it as an unprivileged

00:29:20,410 --> 00:29:30,910
user so I think that you only need

00:29:27,000 --> 00:29:33,910
Nick's working Nick's installation to

00:29:30,910 --> 00:29:37,840
run this but I haven't actually tried it

00:29:33,910 --> 00:29:40,560
on on anything non Nick source and we

00:29:37,840 --> 00:29:45,010
have sort of deployment machine that our

00:29:40,560 --> 00:29:49,120
developers log into and and run their

00:29:45,010 --> 00:29:50,790
deployment shells from when when they

00:29:49,120 --> 00:29:53,830
doing production deployments and so on

00:29:50,790 --> 00:29:55,330
but III do deployments for my local

00:29:53,830 --> 00:30:03,160
computer since I have any services

00:29:55,330 --> 00:30:04,960
everything set up and the the small

00:30:03,160 --> 00:30:10,090
daemon that I was talking about that

00:30:04,960 --> 00:30:14,820
brings up system D containers needs to

00:30:10,090 --> 00:30:17,320
run as root on your computer but you can

00:30:14,820 --> 00:30:24,880
but you can then communicate it over a

00:30:17,320 --> 00:30:25,710
small over homegrown protocol - one more

00:30:24,880 --> 00:30:30,520
question

00:30:25,710 --> 00:30:32,200
nope okay so then thank you very much

00:30:30,520 --> 00:30:34,870
for your interesting talk record and I

00:30:32,200 --> 00:30:36,460
foolishly forgot to mention that record

00:30:34,870 --> 00:30:38,650
is also sponsoring ours company material

00:30:36,460 --> 00:30:41,620
solutions is actually sponsoring ex-con

00:30:38,650 --> 00:30:43,300
so when I ask you for a warm thank you

00:30:41,620 --> 00:30:45,190
and applause I expect at least five

00:30:43,300 --> 00:30:47,220
additional claps per person extra so

00:30:45,190 --> 00:30:59,869
thank you very much regards

00:30:47,220 --> 00:30:59,869

YouTube URL: https://www.youtube.com/watch?v=I_KCd46B8Mw


