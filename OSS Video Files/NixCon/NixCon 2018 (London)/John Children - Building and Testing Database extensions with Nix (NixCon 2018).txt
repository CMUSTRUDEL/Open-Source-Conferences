Title: John Children - Building and Testing Database extensions with Nix (NixCon 2018)
Publication date: 2018-11-12
Playlist: NixCon 2018 (London)
Description: 
	When building extensions for databases, it can become burdensome to make sure you build and deploy matching versions. This often involves changing the version number in multiple places or custom scripting, in particular when deploying extensions to other environments. In this talk I will cover two cases of building database extensions for PostgreSQL and Redis, as well as how to use Nix to manage Python environments to run tests against temporary instances of the database. Finally I will briefly discuss building docker images for the database with the extension installed. --- Bio: John is a software engineer at InfoSum, where he works on the core components of their customer data platform. At InfoSum, he uses Nix to build several C projects as well as managing python dependencies, and has been using NixOS as his primary operating system for over a year. In his free time, John enjoys experimenting with Haskell, playing board games and going bouldering.
Captions: 
	00:00:00,390 --> 00:00:05,910
we are ready for John was gonna like I

00:00:03,330 --> 00:00:09,780
said be talking to us about building and

00:00:05,910 --> 00:00:12,240
testing database extensions with Nix see

00:00:09,780 --> 00:00:14,540
Mike there you go give him a round of

00:00:12,240 --> 00:00:14,540
applause please

00:00:14,580 --> 00:00:23,189
[Applause]

00:00:17,570 --> 00:00:24,240
hello thanks having me this is kind of a

00:00:23,189 --> 00:00:27,590
presentation about how I've been using

00:00:24,240 --> 00:00:29,220
Nick's at work it's not really

00:00:27,590 --> 00:00:30,810
recommendations I guess more of a

00:00:29,220 --> 00:00:34,370
description of what I've done maybe

00:00:30,810 --> 00:00:37,980
things that I think could improve or

00:00:34,370 --> 00:00:41,899
from my side or from maybe things I

00:00:37,980 --> 00:00:44,010
could contribute to Nick's packages and

00:00:41,899 --> 00:00:48,050
just sort of a perspective from that

00:00:44,010 --> 00:00:49,920
angle I've been using Nick's for

00:00:48,050 --> 00:00:52,440
probably about a year and a half I

00:00:49,920 --> 00:00:54,410
initially started it for this project

00:00:52,440 --> 00:00:58,020
which is hangout described in the talk

00:00:54,410 --> 00:00:59,219
and I've switched to using it is next so

00:00:58,020 --> 00:01:02,219
as my main operating system of choice

00:00:59,219 --> 00:01:03,650
for work and home generally pretty proud

00:01:02,219 --> 00:01:09,000
of it or pleased with it

00:01:03,650 --> 00:01:12,450
so let's just begin the talk so I'm just

00:01:09,000 --> 00:01:14,340
going to describe I have a couple of

00:01:12,450 --> 00:01:18,060
Postgres extensions and a redis

00:01:14,340 --> 00:01:22,080
extension that I build and maintain as

00:01:18,060 --> 00:01:25,619
part of my job and I'm just going to

00:01:22,080 --> 00:01:28,020
cover how that's done and as I said it's

00:01:25,619 --> 00:01:31,400
a description and a prescription maybe

00:01:28,020 --> 00:01:34,619
there are some good ideas I don't know

00:01:31,400 --> 00:01:38,240
so background on database extensions

00:01:34,619 --> 00:01:40,290
particularly in the context of Postgres

00:01:38,240 --> 00:01:42,409
they've been around since about nine

00:01:40,290 --> 00:01:44,340
point one exactly since nine point one

00:01:42,409 --> 00:01:44,939
and they're actually pretty flexible in

00:01:44,340 --> 00:01:48,000
what you can do

00:01:44,939 --> 00:01:50,360
Postgres has always had the ability for

00:01:48,000 --> 00:01:54,049
custom types and was its original

00:01:50,360 --> 00:01:57,009
selling point but extensions can load in

00:01:54,049 --> 00:01:58,750
complicated

00:01:57,009 --> 00:02:01,920
functionality is that you might want to

00:01:58,750 --> 00:02:07,110
have in your database some examples

00:02:01,920 --> 00:02:12,550
situs or post kiss time scale DB

00:02:07,110 --> 00:02:16,630
situs is sort of a distributed database

00:02:12,550 --> 00:02:20,020
product it the private company that does

00:02:16,630 --> 00:02:21,610
a SAS product based on it but kind of a

00:02:20,020 --> 00:02:23,980
bit wild when it comes to changing what

00:02:21,610 --> 00:02:27,310
photographs actually does post cases for

00:02:23,980 --> 00:02:29,620
geographical data if you want to have a

00:02:27,310 --> 00:02:31,780
whole bunch of locations and find out a

00:02:29,620 --> 00:02:33,069
query on which locations are in a

00:02:31,780 --> 00:02:35,380
certain area you can do really cool

00:02:33,069 --> 00:02:40,569
stuff that time scale DB turns Postgres

00:02:35,380 --> 00:02:42,480
into a time series database which I mean

00:02:40,569 --> 00:02:46,750
these are pretty radical departures from

00:02:42,480 --> 00:02:49,330
what you usually do but still it would

00:02:46,750 --> 00:02:51,970
in the Postgres framework and the

00:02:49,330 --> 00:02:53,200
protocol protocol when you use SQL so

00:02:51,970 --> 00:02:56,470
quite handy for a development

00:02:53,200 --> 00:02:58,049
perspective there is a caveat though if

00:02:56,470 --> 00:03:01,000
you are going to write an extension

00:02:58,049 --> 00:03:04,620
they only work with the major release

00:03:01,000 --> 00:03:06,790
that you compile against them this is

00:03:04,620 --> 00:03:10,359
quite handy for making sure everything's

00:03:06,790 --> 00:03:12,070
compatible when you deploy it but say

00:03:10,359 --> 00:03:13,510
you want to update your database you

00:03:12,070 --> 00:03:14,019
need to make sure your extension is the

00:03:13,510 --> 00:03:19,410
correct version

00:03:14,019 --> 00:03:25,420
otherwise I won't load so we were

00:03:19,410 --> 00:03:29,940
developing my sequel UDF which works on

00:03:25,420 --> 00:03:29,940
a very simplest kind of system and

00:03:30,209 --> 00:03:34,750
basically one of my co-workers didn't

00:03:32,769 --> 00:03:36,459
really understand how widely laid out

00:03:34,750 --> 00:03:38,230
the project we were deploying into a

00:03:36,459 --> 00:03:40,390
doctor file and the doctor file had

00:03:38,230 --> 00:03:42,850
major release of particularly my sequel

00:03:40,390 --> 00:03:47,850
version he updated the bill dependencies

00:03:42,850 --> 00:03:52,120
and it just meant it

00:03:47,850 --> 00:03:53,980
yeah if you forget to match the virgins

00:03:52,120 --> 00:03:55,060
it's just not going to work and it's

00:03:53,980 --> 00:03:57,190
gonna be difficult to figure out exactly

00:03:55,060 --> 00:04:02,050
why it doesn't work until you actually

00:03:57,190 --> 00:04:05,350
try and use the image so he'd heard

00:04:02,050 --> 00:04:11,440
about Nix so it's like well why don't we

00:04:05,350 --> 00:04:15,790
try that and we did so here's kind of

00:04:11,440 --> 00:04:20,260
how my workflow would work before I

00:04:15,790 --> 00:04:23,170
started using Nick's have to still the

00:04:20,260 --> 00:04:25,690
dev package was a bun to package mapped

00:04:23,170 --> 00:04:29,370
or something and still my other

00:04:25,690 --> 00:04:31,570
dependencies build a project locally

00:04:29,370 --> 00:04:34,150
build a docker image with that output

00:04:31,570 --> 00:04:36,520
matching the right server version and

00:04:34,150 --> 00:04:38,080
then started as a local container and

00:04:36,520 --> 00:04:40,350
then run all my tests against the

00:04:38,080 --> 00:04:40,350
service

00:04:41,100 --> 00:04:50,910
it's nice it's a lot of steps to

00:04:43,680 --> 00:04:54,380
remember how to do if you want to maybe

00:04:50,910 --> 00:04:56,850
write bash script doesn't list it's nice

00:04:54,380 --> 00:04:59,040
problem is if I want to intervene in

00:04:56,850 --> 00:05:01,920
something or do you think differently

00:04:59,040 --> 00:05:03,600
it's a bit more complicated for when I

00:05:01,920 --> 00:05:05,640
run want to run benchmarks instead of

00:05:03,600 --> 00:05:11,070
the regular tests if I want to run a

00:05:05,640 --> 00:05:14,340
specific test or yeah if I want to just

00:05:11,070 --> 00:05:15,810
connect to the database itself I could

00:05:14,340 --> 00:05:19,770
just write a complicated bash script but

00:05:15,810 --> 00:05:21,090
I'm really lazy so can I just push it to

00:05:19,770 --> 00:05:25,730
my CI pipeline that I've got because

00:05:21,090 --> 00:05:27,660
we're hip and trendy yeah okay but now

00:05:25,730 --> 00:05:29,700
it's got it down with the dependencies

00:05:27,660 --> 00:05:31,080
wait for the extension to build wait the

00:05:29,700 --> 00:05:32,040
docker image to build wait for the

00:05:31,080 --> 00:05:34,680
document should be uploaded to the

00:05:32,040 --> 00:05:37,260
registry it's got a pool the image again

00:05:34,680 --> 00:05:39,120
started as a service and then I've gotta

00:05:37,260 --> 00:05:42,450
wait for my test to fail to find out the

00:05:39,120 --> 00:05:45,600
site's got them wrong this is just

00:05:42,450 --> 00:05:49,710
motivated by my laziness so let's say I

00:05:45,600 --> 00:05:54,270
want to update which major release I'm

00:05:49,710 --> 00:05:56,640
using for my base database I've gotta

00:05:54,270 --> 00:06:00,500
update the documentation got to get a

00:05:56,640 --> 00:06:03,510
new docker image gotta update my local

00:06:00,500 --> 00:06:09,450
pages and I've got to update the remote

00:06:03,510 --> 00:06:14,430
build environment so okay digression

00:06:09,450 --> 00:06:15,930
into how Postgres works just gonna talk

00:06:14,430 --> 00:06:18,390
briefly about how it stops you from

00:06:15,930 --> 00:06:21,210
loading modules aren't compatible and

00:06:18,390 --> 00:06:22,410
that's called PG module magic which I

00:06:21,210 --> 00:06:27,720
like to think of as a hash tag rather

00:06:22,410 --> 00:06:31,200
than a macro so essentially as a magic

00:06:27,720 --> 00:06:35,450
struct that it uses you just add if and

00:06:31,200 --> 00:06:39,650
f PG module magic add it's your build

00:06:35,450 --> 00:06:42,410
sorry so you'll see extension and

00:06:39,650 --> 00:06:45,120
basically this just stops you from

00:06:42,410 --> 00:06:46,860
loading your extension dynamically so

00:06:45,120 --> 00:06:49,520
this is what the magic struct looks like

00:06:46,860 --> 00:06:49,520
if you're interested

00:06:49,760 --> 00:06:54,990
so if you were wanted to build something

00:06:52,710 --> 00:06:59,040
usually for the post-crisis extension

00:06:54,990 --> 00:07:01,410
system they provide PG access which is

00:06:59,040 --> 00:07:05,550
kind of just a big make file thing

00:07:01,410 --> 00:07:08,240
include that you can add and it will

00:07:05,550 --> 00:07:12,480
pull some module definitions and

00:07:08,240 --> 00:07:15,390
basically use that to hide a lot of the

00:07:12,480 --> 00:07:18,710
complexity from you this is an example

00:07:15,390 --> 00:07:18,710
from the documentation for Postgres

00:07:19,430 --> 00:07:28,650
basically its definition of the header

00:07:24,210 --> 00:07:32,820
and C file where you've got your code

00:07:28,650 --> 00:07:35,850
for your extension some versions SQL for

00:07:32,820 --> 00:07:38,670
telling you how to load and unload the

00:07:35,850 --> 00:07:40,590
module and then this tool called PG

00:07:38,670 --> 00:07:43,350
config which lacy tells you how Postgres

00:07:40,590 --> 00:07:48,600
was set up and then this is an example

00:07:43,350 --> 00:07:49,800
of what the sequel might look like so it

00:07:48,600 --> 00:07:51,840
just to make file

00:07:49,800 --> 00:07:55,260
turns out next packages is very good at

00:07:51,840 --> 00:08:00,840
engine handling make files so it's

00:07:55,260 --> 00:08:03,030
actually pretty easy win if you want to

00:08:00,840 --> 00:08:05,250
add an extra dependency you can just use

00:08:03,030 --> 00:08:07,920
the LD flags and customize things of the

00:08:05,250 --> 00:08:10,160
C Flags bit of a pain with them PG

00:08:07,920 --> 00:08:14,760
conflict though show you why

00:08:10,160 --> 00:08:16,260
essentially PG config will have a bunch

00:08:14,760 --> 00:08:19,410
of C flags from when Postgres is

00:08:16,260 --> 00:08:24,140
compiled and LD Flags as well and share

00:08:19,410 --> 00:08:28,260
them so when I am building an extension

00:08:24,140 --> 00:08:33,150
I'll do this kind of bad practicing

00:08:28,260 --> 00:08:34,950
we're adding the LD Flags here I have

00:08:33,150 --> 00:08:37,910
since writing this had a better idea

00:08:34,950 --> 00:08:40,229
about how I could do this but

00:08:37,910 --> 00:08:41,610
essentially you just have to add a

00:08:40,229 --> 00:08:43,229
pre-configured phase and you can

00:08:41,610 --> 00:08:46,380
integrate directly with PG excess

00:08:43,229 --> 00:08:48,339
because seems to work pretty well that

00:08:46,380 --> 00:08:51,490
way

00:08:48,339 --> 00:08:54,579
so let's say you wanted to standard make

00:08:51,490 --> 00:08:56,740
derivation for post cross extension and

00:08:54,579 --> 00:08:57,999
you've got xx a sh pretty

00:08:56,740 --> 00:08:59,230
straightforward everyone here is

00:08:57,999 --> 00:09:05,139
familiar with next I didn't want telling

00:08:59,230 --> 00:09:08,189
you this and same pre-configure stuff so

00:09:05,139 --> 00:09:10,240
let's look at extensions of nexpaq views

00:09:08,189 --> 00:09:14,230
there's actually quite a few already and

00:09:10,240 --> 00:09:18,850
I was not super familiar with where they

00:09:14,230 --> 00:09:20,499
were or how to discover them I knew post

00:09:18,850 --> 00:09:23,889
kiss was there but it's kind of in its

00:09:20,499 --> 00:09:27,970
own libraries directory whereas either

00:09:23,889 --> 00:09:29,920
in the Postgres directory so I think

00:09:27,970 --> 00:09:31,420
maybe discoverability first something

00:09:29,920 --> 00:09:37,990
like can be discovered it could be

00:09:31,420 --> 00:09:41,259
improved a bit more but the next OS

00:09:37,990 --> 00:09:43,959
Postgres module can just have these

00:09:41,259 --> 00:09:45,069
added to it and it works which is

00:09:43,959 --> 00:09:46,779
something I would want for my extension

00:09:45,069 --> 00:09:49,300
as well but I'm not really sure how you

00:09:46,779 --> 00:09:55,509
do that because how old is Postgres fine

00:09:49,300 --> 00:09:58,029
my extension so yeah how do we how do we

00:09:55,509 --> 00:10:01,959
use it well I just tried to copy the way

00:09:58,029 --> 00:10:08,249
next so next to us does it if you look

00:10:01,959 --> 00:10:11,679
into the ways in Nix OS loads extensions

00:10:08,249 --> 00:10:13,360
basically just has a thing that checks

00:10:11,679 --> 00:10:16,120
if you've asked for any extra plugins to

00:10:13,360 --> 00:10:18,339
be enabled and if you have just adds

00:10:16,120 --> 00:10:22,749
them into subpaths and symlinks them

00:10:18,339 --> 00:10:26,499
into the build output but it needs to do

00:10:22,749 --> 00:10:29,220
a bit of extra stuff with post build

00:10:26,499 --> 00:10:29,220
wrapping to

00:10:30,650 --> 00:10:42,530
basically just set this Knicks PG lib

00:10:34,850 --> 00:10:46,310
tear which yeah it turns out he's quite

00:10:42,530 --> 00:10:49,040
important basically post press will look

00:10:46,310 --> 00:10:54,290
in a couple of places for where your

00:10:49,040 --> 00:10:57,290
extensions might be and it's not it's

00:10:54,290 --> 00:10:59,000
not in the next door so you need to give

00:10:57,290 --> 00:11:02,480
it a bit more advice on where that would

00:10:59,000 --> 00:11:05,720
be so that's I think is why Nick's PG

00:11:02,480 --> 00:11:08,920
Lib dear is set which comes from a patch

00:11:05,720 --> 00:11:12,590
that's made to Postgres when it's built

00:11:08,920 --> 00:11:15,070
so this is where that comes from

00:11:12,590 --> 00:11:19,520
so that wrapper will allow you to

00:11:15,070 --> 00:11:21,940
provide the Lib de to find your

00:11:19,520 --> 00:11:21,940
extensions

00:11:23,730 --> 00:11:29,400
so can we just set it to our build

00:11:26,400 --> 00:11:31,530
output from our extensions and we're

00:11:29,400 --> 00:11:32,820
good to go right well not quite because

00:11:31,530 --> 00:11:34,680
there are some extensions from Postgres

00:11:32,820 --> 00:11:35,760
that you might want to use anyway so

00:11:34,680 --> 00:11:39,860
that's why you need to take the same

00:11:35,760 --> 00:11:42,840
approach and wrap it as well

00:11:39,860 --> 00:11:46,320
here I've pretty much copied the same

00:11:42,840 --> 00:11:47,880
thing a very similar idea I'm just

00:11:46,320 --> 00:11:51,510
calling a package with some extensions

00:11:47,880 --> 00:11:53,970
in just some more some more paths

00:11:51,510 --> 00:11:55,890
but I've also exposed in it to be in

00:11:53,970 --> 00:12:00,900
create GB we'll see why in a moment

00:11:55,890 --> 00:12:04,050
because I'm using them to test but yeah

00:12:00,900 --> 00:12:06,570
this just defines my custom Postgres and

00:12:04,050 --> 00:12:13,770
I'm using a particular package from Nix

00:12:06,570 --> 00:12:14,940
packages so this is clear okay there'll

00:12:13,770 --> 00:12:19,470
be plenty of time for questions

00:12:14,940 --> 00:12:22,860
hopefully so I can build this package

00:12:19,470 --> 00:12:25,620
it's all very nice what do I do with it

00:12:22,860 --> 00:12:31,050
I can probably deploy it somewhere and

00:12:25,620 --> 00:12:35,790
test it but can I just maybe start on my

00:12:31,050 --> 00:12:38,190
system and give it a go yeah okay but

00:12:35,790 --> 00:12:40,290
then I need to remember to delete that

00:12:38,190 --> 00:12:42,180
database so I'm still kind of at the

00:12:40,290 --> 00:12:44,130
same place I was initially and maybe I

00:12:42,180 --> 00:12:45,570
can add it to my script but then I've

00:12:44,130 --> 00:12:49,430
got to manage a whole bunch of other

00:12:45,570 --> 00:12:49,430
things to control that

00:12:50,670 --> 00:12:55,770
essentially what I found is there's some

00:12:54,600 --> 00:12:58,770
tools that basically provide you with

00:12:55,770 --> 00:13:00,660
sort of ephemeral databases that they

00:12:58,770 --> 00:13:05,180
will basically just kick off a database

00:13:00,660 --> 00:13:10,260
process with a empty database sorry

00:13:05,180 --> 00:13:12,810
empty tables and things and I'll just

00:13:10,260 --> 00:13:14,820
use the there's a few piping packages

00:13:12,810 --> 00:13:21,530
for example that would provide that so

00:13:14,820 --> 00:13:26,750
I'm using testing dot Postgres and

00:13:21,530 --> 00:13:30,510
testing common and essentially they are

00:13:26,750 --> 00:13:35,730
things I provided Nick shell so it the

00:13:30,510 --> 00:13:37,740
idea is to get a pretty good developer

00:13:35,730 --> 00:13:40,140
ergonomics so they can just pull up next

00:13:37,740 --> 00:13:44,670
she'll get all the dependencies for the

00:13:40,140 --> 00:13:46,950
project and then also get why we require

00:13:44,670 --> 00:13:52,310
for the running the tests as well and

00:13:46,950 --> 00:13:54,090
all the tooling as well see yeah I

00:13:52,310 --> 00:13:55,980
didn't really want to go into too much

00:13:54,090 --> 00:14:01,110
detail about the Python code that I've

00:13:55,980 --> 00:14:04,230
written generally having access to

00:14:01,110 --> 00:14:05,340
Python here is quite useful there's a

00:14:04,230 --> 00:14:08,460
really nice property based testing

00:14:05,340 --> 00:14:10,020
library called hypothesis which you can

00:14:08,460 --> 00:14:11,610
use to make sure that you're encoding

00:14:10,020 --> 00:14:18,410
and decoding works in the way you'd

00:14:11,610 --> 00:14:20,460
expect but generally it seems to be I

00:14:18,410 --> 00:14:22,140
don't know if many people who use this

00:14:20,460 --> 00:14:24,540
approach I haven't heard a huge amount

00:14:22,140 --> 00:14:29,610
about it we're using temperate databases

00:14:24,540 --> 00:14:32,490
there's a tool called PG temp oh wait PG

00:14:29,610 --> 00:14:34,520
temp which is like a bash script that

00:14:32,490 --> 00:14:38,460
will run an instance of place for us

00:14:34,520 --> 00:14:39,450
temporarily and it candles some of the

00:14:38,460 --> 00:14:41,670
cleaning up a bit better than what I've

00:14:39,450 --> 00:14:46,540
been doing

00:14:41,670 --> 00:14:48,970
the there's also a package vascular's

00:14:46,540 --> 00:14:51,310
welliton called ten Postgres TMP -

00:14:48,970 --> 00:14:57,040
Postgres which will also do a very

00:14:51,310 --> 00:14:58,209
similar thing I don't know how common it

00:14:57,040 --> 00:15:01,269
is to really need that kind of thing

00:14:58,209 --> 00:15:02,620
unless you're testing an extension most

00:15:01,269 --> 00:15:04,930
of time I think probably unit tests

00:15:02,620 --> 00:15:06,850
would cover this the issue is I'm kind

00:15:04,930 --> 00:15:10,329
of testing how my extension works with

00:15:06,850 --> 00:15:16,300
Postgres which is perhaps a unique

00:15:10,329 --> 00:15:18,100
problems face and yeah I just I end up

00:15:16,300 --> 00:15:20,709
using PI test fixtures for controlling

00:15:18,100 --> 00:15:23,350
the state of the database which is not

00:15:20,709 --> 00:15:25,959
very clean and can end up leaking

00:15:23,350 --> 00:15:28,689
databases which is an interesting

00:15:25,959 --> 00:15:34,149
problem as well if you forget to or if

00:15:28,689 --> 00:15:37,569
your script breaks improperly but with

00:15:34,149 --> 00:15:42,939
the shells I've written if you want to

00:15:37,569 --> 00:15:46,839
just jump in and give run all the tests

00:15:42,939 --> 00:15:48,040
run a copy of Postgres run all the SQL

00:15:46,839 --> 00:15:51,459
commands against it they're required to

00:15:48,040 --> 00:15:52,630
test extension it's essentially two

00:15:51,459 --> 00:15:55,500
commands which I can just put in the

00:15:52,630 --> 00:15:58,029
readme I don't need to describe how to

00:15:55,500 --> 00:16:03,509
apps install the various packages that

00:15:58,029 --> 00:16:06,279
people usually require and I think as

00:16:03,509 --> 00:16:07,480
somewhere where we're not really good

00:16:06,279 --> 00:16:09,660
functional programming and we don't

00:16:07,480 --> 00:16:11,530
really

00:16:09,660 --> 00:16:16,390
people haven't really gotten bored with

00:16:11,530 --> 00:16:18,040
the next train I think having something

00:16:16,390 --> 00:16:20,110
where it's just two commands is really

00:16:18,040 --> 00:16:27,480
helpful for getting people on board with

00:16:20,110 --> 00:16:34,180
it so yeah cool I've written this

00:16:27,480 --> 00:16:36,630
expression where I can just define it

00:16:34,180 --> 00:16:36,630
Postgres

00:16:36,940 --> 00:16:42,320
installation with the extensions enabled

00:16:39,260 --> 00:16:43,850
or extensions installed as well and what

00:16:42,320 --> 00:16:47,570
if I want to update it previously I had

00:16:43,850 --> 00:16:49,700
to update dr. file update all these

00:16:47,570 --> 00:16:52,880
other things now he just changed the

00:16:49,700 --> 00:16:55,190
package from Dix packages there are a

00:16:52,880 --> 00:16:58,970
few problems with this PG access has

00:16:55,190 --> 00:17:02,120
regression tests which are make install

00:16:58,970 --> 00:17:06,890
check phase which require a running

00:17:02,120 --> 00:17:08,420
Postgres instance to actually test them

00:17:06,890 --> 00:17:11,080
they essentially this is a descriptive

00:17:08,420 --> 00:17:17,270
expected SQL output and some commands

00:17:11,080 --> 00:17:20,750
and there I haven't really thought of a

00:17:17,270 --> 00:17:25,850
good way to do that it'll be really nice

00:17:20,750 --> 00:17:28,450
if there is a annex packages or make

00:17:25,850 --> 00:17:31,640
derivation phase the for install check

00:17:28,450 --> 00:17:34,010
but it's not actually a build input it's

00:17:31,640 --> 00:17:35,930
sort of a runtime dependency of regular

00:17:34,010 --> 00:17:40,690
tests and it'll be nice if I could just

00:17:35,930 --> 00:17:44,000
have my single expression for my

00:17:40,690 --> 00:17:47,330
extension and just be able to run the

00:17:44,000 --> 00:17:49,430
tests that way on that expression so in

00:17:47,330 --> 00:17:50,600
a standalone way rather than other man

00:17:49,430 --> 00:17:53,180
when I kind of bundle up all my

00:17:50,600 --> 00:17:56,180
extensions and test them together wit

00:17:53,180 --> 00:17:57,920
Postgres I have no idea how to do that

00:17:56,180 --> 00:17:59,660
the only thing is I'm always overriding

00:17:57,920 --> 00:18:00,800
and because I want to make sure that the

00:17:59,660 --> 00:18:05,630
post preservation I provide to my

00:18:00,800 --> 00:18:09,020
extensions is the same as the one that I

00:18:05,630 --> 00:18:11,420
built with kind of think maybe I should

00:18:09,020 --> 00:18:13,550
just be make my extensions unable to

00:18:11,420 --> 00:18:17,540
build without post Cresson kind of curry

00:18:13,550 --> 00:18:19,670
the expression but I haven't seen that

00:18:17,540 --> 00:18:22,160
pan very often in the next packages so

00:18:19,670 --> 00:18:23,870
I'm kind of worried that briefly

00:18:22,160 --> 00:18:25,040
reticence has a module system - it's not

00:18:23,870 --> 00:18:27,170
very interesting compared to Postgres

00:18:25,040 --> 00:18:29,690
because Redis modules are responsible

00:18:27,170 --> 00:18:31,730
for loading initializing themselves and

00:18:29,690 --> 00:18:33,950
they provide other information about

00:18:31,730 --> 00:18:35,900
themselves they do have an extension

00:18:33,950 --> 00:18:37,040
system you just write a make file and as

00:18:35,900 --> 00:18:39,460
long as it has a read as header you can

00:18:37,040 --> 00:18:42,110
load it as a shared object into Redis I

00:18:39,460 --> 00:18:43,220
when I initially submitted the abstract

00:18:42,110 --> 00:18:44,970
for this talk I kind of thought there'd

00:18:43,220 --> 00:18:47,250
be more to it but

00:18:44,970 --> 00:18:50,190
unfortunately not or fortunately

00:18:47,250 --> 00:18:51,960
somebody say um I haven't seen any

00:18:50,190 --> 00:18:53,190
examples of Redis modules indexed

00:18:51,960 --> 00:18:57,210
packages I think maybe they're quite new

00:18:53,190 --> 00:18:59,789
I maybe I don't know how to discover

00:18:57,210 --> 00:19:01,770
them I certainly would Postgres as well

00:18:59,789 --> 00:19:06,059
there was an issue of trying to find the

00:19:01,770 --> 00:19:08,340
Postgres extensions I don't know where I

00:19:06,059 --> 00:19:10,860
would find a Redis module if it existed

00:19:08,340 --> 00:19:12,120
I kind of think maybe like Python

00:19:10,860 --> 00:19:13,789
packages or high school packages that

00:19:12,120 --> 00:19:19,470
maybe they could be a Redis modules or

00:19:13,789 --> 00:19:23,720
Postgres extensions attribute set but I

00:19:19,470 --> 00:19:23,720
don't really know much about that

00:19:23,880 --> 00:19:28,049
so yeah similarly really simple

00:19:26,429 --> 00:19:30,330
derivation this is like basically the

00:19:28,049 --> 00:19:33,450
most simple derivation you can get BAM

00:19:30,330 --> 00:19:35,010
you've got a realist extension and

00:19:33,450 --> 00:19:37,350
there's also testing Redis like testing

00:19:35,010 --> 00:19:39,030
for us so I can reuse all of my testing

00:19:37,350 --> 00:19:42,539
infrastructure for Redis as well which

00:19:39,030 --> 00:19:44,789
is nice small caveat when you have your

00:19:42,539 --> 00:19:46,710
shell next you need a small shell hook

00:19:44,789 --> 00:19:50,059
to export your Redis modules path to

00:19:46,710 --> 00:19:52,409
your expression full of Redis modules

00:19:50,059 --> 00:19:55,460
just thought maybe that might be

00:19:52,409 --> 00:19:57,750
interesting a little trick to share and

00:19:55,460 --> 00:20:02,730
now we're gonna talk about docker it's

00:19:57,750 --> 00:20:04,140
inevitable the people who I work with

00:20:02,730 --> 00:20:06,570
are very keen to ever he'd end up in the

00:20:04,140 --> 00:20:10,020
document owner so I have to somehow get

00:20:06,570 --> 00:20:11,490
my extensions to work with Postgres in

00:20:10,020 --> 00:20:15,780
the document owner or with Redis in the

00:20:11,490 --> 00:20:17,820
dock you know so there are a few tools

00:20:15,780 --> 00:20:22,380
in Nix packages that will help me

00:20:17,820 --> 00:20:25,470
accomplish that goal unfortunately with

00:20:22,380 --> 00:20:28,200
Postgres I can't they're ducks tools has

00:20:25,470 --> 00:20:33,710
pull image and build image there's also

00:20:28,200 --> 00:20:37,590
now built layered image the place where

00:20:33,710 --> 00:20:39,210
they would want to put my extensions it

00:20:37,590 --> 00:20:42,419
wouldn't be able to be found with the

00:20:39,210 --> 00:20:45,240
Postgres in the base image from just

00:20:42,419 --> 00:20:47,250
pulling the Postgres image like the

00:20:45,240 --> 00:20:50,970
official library image I could wrap it

00:20:47,250 --> 00:20:53,700
with a Postgres from next packages with

00:20:50,970 --> 00:20:58,590
the patch for Lib

00:20:53,700 --> 00:21:00,210
PG dear but it's kind of awkward to do

00:20:58,590 --> 00:21:02,550
there's like some nice shell scripts

00:21:00,210 --> 00:21:05,250
that the base library image has I really

00:21:02,550 --> 00:21:06,930
want to commit them so the practical

00:21:05,250 --> 00:21:09,480
side of me currently just uses as a doc

00:21:06,930 --> 00:21:14,040
file I feel really bad about myself as a

00:21:09,480 --> 00:21:15,270
result but I hope to improve it but I

00:21:14,040 --> 00:21:18,750
don't really know if there's a good way

00:21:15,270 --> 00:21:21,630
around doing this however for Redis oh

00:21:18,750 --> 00:21:23,730
sorry so I have this horrible hack where

00:21:21,630 --> 00:21:25,290
I use our sink to pull out all my

00:21:23,730 --> 00:21:27,480
extensions and then I put them in my

00:21:25,290 --> 00:21:29,790
docking toner and I really wish I didn't

00:21:27,480 --> 00:21:32,870
have to do that so just thought I'd

00:21:29,790 --> 00:21:32,870
share my shame with you

00:21:33,410 --> 00:21:40,410
so Redis on the other hand I mean if you

00:21:37,290 --> 00:21:43,410
look up doc tools in the Nick service

00:21:40,410 --> 00:21:46,260
sorry next packages manual Redis is

00:21:43,410 --> 00:21:48,900
actually the canonical example which is

00:21:46,260 --> 00:21:53,960
quite handy so essentially I just ripped

00:21:48,900 --> 00:21:57,120
that off and if I want to load my module

00:21:53,960 --> 00:21:59,520
the lid thing is a bit contrived that's

00:21:57,120 --> 00:22:02,460
just where my expression is installing

00:21:59,520 --> 00:22:05,790
it from my make file probably I want to

00:22:02,460 --> 00:22:08,520
have a better place for it but yeah it's

00:22:05,790 --> 00:22:12,810
simple enough you just add a letch Redis

00:22:08,520 --> 00:22:16,680
config in and then your build image

00:22:12,810 --> 00:22:20,120
definition and yeah you just load it up

00:22:16,680 --> 00:22:25,080
when your server starts easy enough so

00:22:20,120 --> 00:22:26,490
now you know it's not great there cool

00:22:25,080 --> 00:22:29,460
thing though all these tests I've

00:22:26,490 --> 00:22:30,720
written using temporary basis I can now

00:22:29,460 --> 00:22:33,410
run them against the images I've built

00:22:30,720 --> 00:22:33,410
with

00:22:34,510 --> 00:22:45,050
build image etc or docker if I'm feeling

00:22:38,480 --> 00:22:47,600
bad yeah so essentially I've shown you

00:22:45,050 --> 00:22:49,280
the arcing thing I'd like to find a

00:22:47,600 --> 00:22:54,710
better way to do that the problem is I'm

00:22:49,280 --> 00:22:59,540
using gitlab CI and it is not super

00:22:54,710 --> 00:23:01,700
compatible with Nix so there's a few

00:22:59,540 --> 00:23:06,010
issues one one thing that really

00:23:01,700 --> 00:23:10,340
irritates me is the docker sock thing so

00:23:06,010 --> 00:23:12,610
it once have privileged access to that

00:23:10,340 --> 00:23:15,260
socket so that it can upload things to

00:23:12,610 --> 00:23:17,600
my daughter registry but if I built my

00:23:15,260 --> 00:23:19,700
image with the old image I mean my next

00:23:17,600 --> 00:23:21,770
Runner and I don't have that access so I

00:23:19,700 --> 00:23:24,550
essentially have to copy the tarball of

00:23:21,770 --> 00:23:26,780
my image into another Runner which then

00:23:24,550 --> 00:23:29,870
loads the docker image and then sends it

00:23:26,780 --> 00:23:35,450
to the registry which is pretty annoying

00:23:29,870 --> 00:23:38,270
I think well why would like to maybe

00:23:35,450 --> 00:23:40,940
spend some time doing is build like a go

00:23:38,270 --> 00:23:43,490
tool that uses a bunch of the docker

00:23:40,940 --> 00:23:45,110
things to just upload images so it's

00:23:43,490 --> 00:23:48,650
just a tool that takes a tarball from

00:23:45,110 --> 00:23:49,910
build image and then you can just push

00:23:48,650 --> 00:23:54,800
it to an arbitrary registry if you have

00:23:49,910 --> 00:23:56,030
the credentials I don't know if

00:23:54,800 --> 00:23:57,110
something like that exists if someone

00:23:56,030 --> 00:23:57,650
knows something about that and making

00:23:57,110 --> 00:24:01,160
them Oh

00:23:57,650 --> 00:24:04,130
Zim burtom husband back sorry tell me in

00:24:01,160 --> 00:24:09,920
a minute okay Scorpio so that'll be

00:24:04,130 --> 00:24:12,590
really handy and yeah hopefully from his

00:24:09,920 --> 00:24:16,730
white images for Redis are just one

00:24:12,590 --> 00:24:19,460
layer hopefully the build layered image

00:24:16,730 --> 00:24:22,030
would be helpful but I haven't mentioned

00:24:19,460 --> 00:24:24,200
integrate that yet into my pipeline

00:24:22,030 --> 00:24:26,030
closing thought I was reading a key news

00:24:24,200 --> 00:24:27,440
yesterday and I like to base all of my

00:24:26,030 --> 00:24:30,350
life decisions on what random people are

00:24:27,440 --> 00:24:32,720
saying on Hackney's someone was saying

00:24:30,350 --> 00:24:35,240
it would be a good if Postgres had a

00:24:32,720 --> 00:24:36,800
package managed for extensions and maybe

00:24:35,240 --> 00:24:40,850
what I would like to see is the ability

00:24:36,800 --> 00:24:42,230
to manage extensions when when people

00:24:40,850 --> 00:24:45,520
think oh I'm gonna manage my post cross

00:24:42,230 --> 00:24:45,520
extensions they think of next packages

00:24:46,190 --> 00:24:49,230
acknowledgment just to move help

00:24:47,880 --> 00:24:50,640
yourself my slides and I said I'd to

00:24:49,230 --> 00:24:52,440
give him an acknowledgment he has a cool

00:24:50,640 --> 00:24:55,880
repo showing you how to use next

00:24:52,440 --> 00:24:57,810
packages to build stuff with Beamer I

00:24:55,880 --> 00:25:01,710
this is a point where I'd beg for

00:24:57,810 --> 00:25:03,620
Twitter follows and also this slides

00:25:01,710 --> 00:25:07,200
that you're watching reading now are

00:25:03,620 --> 00:25:20,040
bill and in the repo cool any questions

00:25:07,200 --> 00:25:22,070
or Corrections of any questions yes they

00:25:20,040 --> 00:25:22,070
are

00:25:24,830 --> 00:25:31,740
are you aware of this pool request by

00:25:28,260 --> 00:25:35,790
told police that overhauls the Bosque

00:25:31,740 --> 00:25:36,870
SQL infrastructure index packages I am

00:25:35,790 --> 00:25:37,980
NOT that seems like something I should

00:25:36,870 --> 00:25:42,780
have known about before I gave this talk

00:25:37,980 --> 00:25:44,730
right yeah no I am aware that a lot of

00:25:42,780 --> 00:25:49,440
the Postgres extensions are written by

00:25:44,730 --> 00:25:51,510
him I don't know there's some things

00:25:49,440 --> 00:25:54,510
that they do differently that I'm not

00:25:51,510 --> 00:25:56,850
sure about so for example they won't use

00:25:54,510 --> 00:25:58,830
PG access directly they'll kind of copy

00:25:56,850 --> 00:26:00,960
the shared objects and seagulls are sub

00:25:58,830 --> 00:26:03,290
yeah do you have the pull request number

00:26:00,960 --> 00:26:03,290
button

00:26:09,630 --> 00:26:15,480
okay thank you very much anyone else

00:26:16,410 --> 00:26:20,200
No

00:26:17,680 --> 00:26:23,040
then another round of applause for this

00:26:20,200 --> 00:26:25,800
interesting talk thank you

00:26:23,040 --> 00:26:30,150
interesting is a good word

00:26:25,800 --> 00:26:30,150

YouTube URL: https://www.youtube.com/watch?v=4xM802RPFVE


