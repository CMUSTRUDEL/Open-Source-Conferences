Title: Pierre-Antoine Bouttier - Nix as HPC package management system (NixCon 2018)
Publication date: 2018-11-06
Playlist: NixCon 2018 (London)
Description: 
	Modern High Performance Computing systems are becoming larger and more heterogeneous. The proper management of software for the users of such systems poses a significant challenge. These users run very diverse applications that may be compiled with proprietary tools for specialized hardware. Moreover, the application life-cycle of these software may exceed the lifetime of the HPC systems themselves. These difficulties motivate the use of specialized package management systems. In this presentation, we outline an approach to HPC package development, deployment, management, sharing, and reuse based on the Nix functional package manager. We report our experience with this approach inside the GRICAD HPC center in Grenoble, France, and compare it to other existing approaches. --- After a PhD in applied mathematics, I have worked in the scientific computing field, with a strong HPC component.
Captions: 
	00:00:00,030 --> 00:00:06,750
our next talk is by pierre-antoine and

00:00:04,130 --> 00:00:10,610
quentin willis talk i will talk to us

00:00:06,750 --> 00:00:13,469
about using nyx in the environment of

00:00:10,610 --> 00:00:15,929
high-performance computing right right

00:00:13,469 --> 00:00:23,010
yes so take it away and give a warm

00:00:15,929 --> 00:00:23,730
applause and welcome to Antoine thank

00:00:23,010 --> 00:00:26,849
you

00:00:23,730 --> 00:00:27,810
so I'm not on Butchie as you may hear

00:00:26,849 --> 00:00:32,899
I'm French

00:00:27,810 --> 00:00:36,030
so I'm terrible at speaking English also

00:00:32,899 --> 00:00:42,899
I'm coming from Applied Mathematics and

00:00:36,030 --> 00:00:46,940
numerical computing okay so I'm terrible

00:00:42,899 --> 00:00:52,020
at writing in functional language and

00:00:46,940 --> 00:00:54,480
administrating system so Givens of

00:00:52,020 --> 00:00:57,180
statements of this is a tie to talk

00:00:54,480 --> 00:01:00,300
about how we administrate software

00:00:57,180 --> 00:01:02,719
environment and our HPC clusters with a

00:01:00,300 --> 00:01:08,760
tools written in functional languages

00:01:02,719 --> 00:01:11,189
all right why are we so quick ad is a

00:01:08,760 --> 00:01:15,210
public entity in France in Grenoble more

00:01:11,189 --> 00:01:17,820
precisely in Grenoble and among other

00:01:15,210 --> 00:01:21,240
services we provide computer computing

00:01:17,820 --> 00:01:23,759
power and efficient storage solutions we

00:01:21,240 --> 00:01:27,360
are distributed file systems for all

00:01:23,759 --> 00:01:30,390
Grenoble researchers we have two main

00:01:27,360 --> 00:01:33,000
clusters an HPC high-performance

00:01:30,390 --> 00:01:35,310
computing cluster named froggie and more

00:01:33,000 --> 00:01:41,640
data analysis oriented cluster named

00:01:35,310 --> 00:01:44,640
look yes as in Luke Skywalker so first

00:01:41,640 --> 00:01:48,210
what is the HP C cleanser very very

00:01:44,640 --> 00:01:51,000
briefly maybe some of you know nothing

00:01:48,210 --> 00:01:54,119
about high-performance computing but

00:01:51,000 --> 00:01:57,210
basically it's a cluster is a set of

00:01:54,119 --> 00:02:03,180
interconnected Linux computing nodes a

00:01:57,210 --> 00:02:06,810
nodes as CPU memory graphic cards and

00:02:03,180 --> 00:02:10,369
one or several had node sharing some

00:02:06,810 --> 00:02:13,879
common network for systems the users

00:02:10,369 --> 00:02:18,230
we access to the closer through as his

00:02:13,879 --> 00:02:21,940
age and he will connect him himself on

00:02:18,230 --> 00:02:24,080
the head nodes and launched a launch

00:02:21,940 --> 00:02:27,049
simulation from the head node on the

00:02:24,080 --> 00:02:28,849
computing nodes so we have two clusters

00:02:27,049 --> 00:02:32,120
the first one is froggy

00:02:28,849 --> 00:02:37,480
it's a HPC oriented cluster he has many

00:02:32,120 --> 00:02:40,010
CPU many memory he has performance

00:02:37,480 --> 00:02:43,940
computing network between computing

00:02:40,010 --> 00:02:49,160
nodes which is very important for us in

00:02:43,940 --> 00:02:52,430
the case of the HPC and yes we can say

00:02:49,160 --> 00:02:56,750
it's it has a direct clicking cooling

00:02:52,430 --> 00:02:58,670
system which is nice and it's dedicated

00:02:56,750 --> 00:03:04,250
to simulations that need a lot of

00:02:58,670 --> 00:03:07,910
communication between nodes so typically

00:03:04,250 --> 00:03:11,090
the code that runs on that panel on this

00:03:07,910 --> 00:03:15,819
cluster are paralyzed in distributed

00:03:11,090 --> 00:03:21,350
memory with MPI library is classically

00:03:15,819 --> 00:03:23,780
the the second cluster main cluster

00:03:21,350 --> 00:03:27,230
because we have other smaller or older

00:03:23,780 --> 00:03:30,590
or not in production clusters is called

00:03:27,230 --> 00:03:32,389
Luke is a bit different from froggy

00:03:30,590 --> 00:03:35,989
because it's an iteration new news

00:03:32,389 --> 00:03:39,560
cluster it have nodes that are different

00:03:35,989 --> 00:03:44,870
need different number of cores of memory

00:03:39,560 --> 00:03:47,120
of size researcher can buy nodes and we

00:03:44,870 --> 00:03:52,389
take care of these nodes we plug in and

00:03:47,120 --> 00:03:56,930
however our our machine in Luke and we

00:03:52,389 --> 00:04:02,109
we take we we do the maintenance of this

00:03:56,930 --> 00:04:06,889
node etc etc memory size between 24 and

00:04:02,109 --> 00:04:08,450
512 gigabytes depending on on nodes this

00:04:06,889 --> 00:04:11,650
kind of clutter is more adapted for a

00:04:08,450 --> 00:04:13,519
larger range of uses batch simulation

00:04:11,650 --> 00:04:17,479
experimentation shared memory

00:04:13,519 --> 00:04:20,140
parallelization and above all this

00:04:17,479 --> 00:04:22,969
cluster is too bad a bit more clusters

00:04:20,140 --> 00:04:24,080
all the Greek add computing platform are

00:04:22,969 --> 00:04:26,990
integrated into a look

00:04:24,080 --> 00:04:29,150
grid that aims optimizing the resource

00:04:26,990 --> 00:04:31,789
is AG's another team

00:04:29,150 --> 00:04:34,520
users can launch a batch of that through

00:04:31,789 --> 00:04:40,460
the grid on the unity resources of our

00:04:34,520 --> 00:04:43,669
platform just a graph to to explain

00:04:40,460 --> 00:04:46,969
briefly we have several clusters each

00:04:43,669 --> 00:04:48,250
cluster at the same batch carrier which

00:04:46,969 --> 00:04:53,030
is war

00:04:48,250 --> 00:04:57,770
Perez similar to PBS or slum for photos

00:04:53,030 --> 00:05:01,430
window and with the grid the user can

00:04:57,770 --> 00:05:04,879
launch evasion on all huge resources on

00:05:01,430 --> 00:05:07,069
this different platform so in the

00:05:04,879 --> 00:05:12,430
software environment among all this

00:05:07,069 --> 00:05:17,139
cluster we have some specificity in our

00:05:12,430 --> 00:05:20,419
environment we have eight original users

00:05:17,139 --> 00:05:22,580
different scientific fields we addressed

00:05:20,419 --> 00:05:25,129
all the the wool community research

00:05:22,580 --> 00:05:28,879
communities in green also we have a

00:05:25,129 --> 00:05:31,639
energy physicist geo physician biologist

00:05:28,879 --> 00:05:35,449
economist etcetera etc we have users

00:05:31,639 --> 00:05:38,389
that are new 90 and hatha we have power

00:05:35,449 --> 00:05:41,419
user advanced user better than me we

00:05:38,389 --> 00:05:44,479
have different use cases batch we have

00:05:41,419 --> 00:05:48,680
called him PL millions of call ready we

00:05:44,479 --> 00:05:52,819
have whole software's in Fortran 77 we

00:05:48,680 --> 00:05:56,629
have Python 3.6 with a lot of difference

00:05:52,819 --> 00:06:00,319
in in low-level languages etc etcetera

00:05:56,629 --> 00:06:04,669
and three vs. and free software MATLAB

00:06:00,319 --> 00:06:07,120
for example high hat MATLAB etc you

00:06:04,669 --> 00:06:11,650
derived different requirements

00:06:07,120 --> 00:06:15,379
performance for some of them more

00:06:11,650 --> 00:06:16,509
human-friendly access machine and to the

00:06:15,379 --> 00:06:18,770
simulation

00:06:16,509 --> 00:06:23,389
reproducibility obviously from the

00:06:18,770 --> 00:06:25,849
research portability etc etc also

00:06:23,389 --> 00:06:28,060
another issue see we have different

00:06:25,849 --> 00:06:30,830
cluster with different hardware

00:06:28,060 --> 00:06:34,069
characteristic and different operating

00:06:30,830 --> 00:06:35,629
system and different physical hosting

00:06:34,069 --> 00:06:40,159
which can

00:06:35,629 --> 00:06:42,849
Network issue so can we hope until

00:06:40,159 --> 00:06:49,719
relevantly to everyone needs with our

00:06:42,849 --> 00:06:53,539
resources how did we in the past we used

00:06:49,719 --> 00:06:58,749
module comment it's a software which is

00:06:53,539 --> 00:06:58,749
using lots of computing center today

00:06:59,199 --> 00:07:05,749
system administrator compiled software's

00:07:01,969 --> 00:07:08,479
and libraries that needed by the the

00:07:05,749 --> 00:07:12,499
researcher on each cluster and after

00:07:08,479 --> 00:07:16,459
that user can load those software via

00:07:12,499 --> 00:07:19,550
the module commands module load open for

00:07:16,459 --> 00:07:21,919
module load MATLAB for example problem

00:07:19,550 --> 00:07:24,050
for each of four for each version season

00:07:21,919 --> 00:07:26,719
mean as to compile everything that is

00:07:24,050 --> 00:07:30,259
needed that work needed to be done on

00:07:26,719 --> 00:07:34,459
each cluster and no portability and no

00:07:30,259 --> 00:07:36,830
rafi disability guaranteed at all from a

00:07:34,459 --> 00:07:40,550
cruiser to another no sharing of the

00:07:36,830 --> 00:07:43,779
work done phone one module obviously no

00:07:40,550 --> 00:07:48,409
module cannot be used on a laptop on a

00:07:43,779 --> 00:07:54,919
desktop of the researchers so why Nix of

00:07:48,409 --> 00:07:56,719
our cluster because for this point for

00:07:54,919 --> 00:07:59,379
maintenance functional package manager

00:07:56,719 --> 00:08:01,759
no side effect which is cool for us

00:07:59,379 --> 00:08:05,649
package creation in a session without

00:08:01,759 --> 00:08:10,189
for privileges which is crucial for us

00:08:05,649 --> 00:08:13,879
the cluster administrators also refer

00:08:10,189 --> 00:08:17,059
disability in variability higher sooner

00:08:13,879 --> 00:08:20,569
crucial for research portability

00:08:17,059 --> 00:08:22,699
obviously researchers can work on the

00:08:20,569 --> 00:08:25,669
laptop and install the same environment

00:08:22,699 --> 00:08:29,389
on the cluster and they are happy with

00:08:25,669 --> 00:08:32,329
that very happy and finally one channel

00:08:29,389 --> 00:08:32,810
and binary cash for many cluster the job

00:08:32,329 --> 00:08:37,669
is done

00:08:32,810 --> 00:08:40,640
and for all we have some specific teas

00:08:37,669 --> 00:08:43,790
that are well covered by NYX

00:08:40,640 --> 00:08:45,740
we are heavily military users we can

00:08:43,790 --> 00:08:49,340
integrate it Christian community

00:08:45,740 --> 00:08:54,770
previous packages in our shot channel we

00:08:49,340 --> 00:08:59,660
can undo many build options because we

00:08:54,770 --> 00:09:02,240
are Church researchers are asked often

00:08:59,660 --> 00:09:05,360
to compile this code with this version

00:09:02,240 --> 00:09:10,490
of this hint of Intel compiler this

00:09:05,360 --> 00:09:12,950
version of this MPI libraries herd

00:09:10,490 --> 00:09:16,730
itself compared with this version of

00:09:12,950 --> 00:09:19,420
this Intel compiler etc etc we call that

00:09:16,730 --> 00:09:24,560
the combinatorial nightmare in terms of

00:09:19,420 --> 00:09:27,200
of version of the software we have on

00:09:24,560 --> 00:09:31,480
the cluster and finally we want a system

00:09:27,200 --> 00:09:31,480
that is operating system independent so

00:09:32,350 --> 00:09:36,350
children the cake

00:09:33,980 --> 00:09:38,570
many nix package already exists we are

00:09:36,350 --> 00:09:43,130
very happy so Nick seems totally

00:09:38,570 --> 00:09:49,010
appropriate for us so now our Nick setup

00:09:43,130 --> 00:09:51,950
now it's more or less classic so we have

00:09:49,010 --> 00:09:56,810
our cluster with a common distributed

00:09:51,950 --> 00:09:57,440
storage we set up our channel to a right

00:09:56,810 --> 00:10:00,830
server

00:09:57,440 --> 00:10:04,310
we are the binary cash and Rika channel

00:10:00,830 --> 00:10:08,540
and the user can access to them from the

00:10:04,310 --> 00:10:10,370
bath cluster the next or the next day

00:10:08,540 --> 00:10:12,830
victory shirt on all the head and

00:10:10,370 --> 00:10:16,100
computing note on each cluster with a

00:10:12,830 --> 00:10:22,430
tap amount on a NFS filesystem on all of

00:10:16,100 --> 00:10:24,770
you of your node of our nodes so the

00:10:22,430 --> 00:10:29,510
main steps to install nice on one

00:10:24,770 --> 00:10:32,060
cluster next tools so I'm not an expert

00:10:29,510 --> 00:10:35,180
Otto about this part that part but you

00:10:32,060 --> 00:10:38,270
can answer questions about that I won't

00:10:35,180 --> 00:10:41,420
answer I think install next to us a

00:10:38,270 --> 00:10:45,590
module yes Nix and module commands can

00:10:41,420 --> 00:10:48,950
can coexist easily and it's it's

00:10:45,590 --> 00:10:51,480
necessary for us for now set up zone is

00:10:48,950 --> 00:10:56,100
Damon and

00:10:51,480 --> 00:10:59,449
the user when he connects to to the

00:10:56,100 --> 00:11:02,190
cluster you have to source the scripts

00:10:59,449 --> 00:11:04,470
so the scripts at the past of the next

00:11:02,190 --> 00:11:06,269
two binaries it's at the next path

00:11:04,470 --> 00:11:08,670
variable it initially is per user

00:11:06,269 --> 00:11:11,070
directories and configuration file says

00:11:08,670 --> 00:11:17,880
anak normal variable is necessary to use

00:11:11,070 --> 00:11:20,490
an examine then the saya Simon channel

00:11:17,880 --> 00:11:23,130
Simon is another name for the Greek at

00:11:20,490 --> 00:11:26,190
computing center

00:11:23,130 --> 00:11:28,680
it's a copy of NIC speakers reestablish

00:11:26,190 --> 00:11:32,790
NL plus some package for example Intel

00:11:28,680 --> 00:11:36,089
compilers or research codes that can go

00:11:32,790 --> 00:11:38,940
possibly AB stream in fact some of them

00:11:36,089 --> 00:11:40,800
have gone up stream already we have I

00:11:38,940 --> 00:11:45,360
shall be NER Rakesh's are already said

00:11:40,800 --> 00:11:49,350
and currently we have 10 17 packages

00:11:45,360 --> 00:11:53,399
without contain those who have which

00:11:49,350 --> 00:11:58,790
have goes of upstream so our workflow to

00:11:53,399 --> 00:12:02,459
summer but I have already said of that

00:11:58,790 --> 00:12:07,079
so the cluster you have had nodes which

00:12:02,459 --> 00:12:08,790
with the next diamond on on yet we have

00:12:07,079 --> 00:12:12,060
the wet or the web server with the

00:12:08,790 --> 00:12:15,199
ponary cache and the channel ZN me no

00:12:12,060 --> 00:12:18,510
power user can contribute to the channel

00:12:15,199 --> 00:12:24,199
and sometimes when we have tested our

00:12:18,510 --> 00:12:30,380
code on our a cluster we do pull request

00:12:24,199 --> 00:12:35,310
upstream so some feedbacks now after our

00:12:30,380 --> 00:12:40,260
experiments which have began two years

00:12:35,310 --> 00:12:45,149
ago approximatively yes reproducible and

00:12:40,260 --> 00:12:47,550
reliable is crucial for us but it's it's

00:12:45,149 --> 00:12:51,180
a fact so we are very happy with that

00:12:47,550 --> 00:12:55,079
users can install their packages or

00:12:51,180 --> 00:12:58,680
packages by themselves it's portable

00:12:55,079 --> 00:13:02,010
it's debate which is very important for

00:12:58,680 --> 00:13:04,050
users and for us to to to do tests for

00:13:02,010 --> 00:13:07,769
the most common package

00:13:04,050 --> 00:13:11,550
I I mean for the package that shooters

00:13:07,769 --> 00:13:13,950
use a lot with a shot be Terry cash very

00:13:11,550 --> 00:13:18,149
quick and sedation

00:13:13,950 --> 00:13:21,630
we are happy to contribute to our living

00:13:18,149 --> 00:13:23,700
communities Knicks community but also we

00:13:21,630 --> 00:13:27,570
are happy to have a living communities

00:13:23,700 --> 00:13:31,079
that that have a good documentation a

00:13:27,570 --> 00:13:32,940
lot of packages lots of issues but

00:13:31,079 --> 00:13:39,959
answer to these issues also

00:13:32,940 --> 00:13:43,290
and finally our main issue at the

00:13:39,959 --> 00:13:45,329
beginning was to install an identical

00:13:43,290 --> 00:13:49,500
software environment easily on different

00:13:45,329 --> 00:13:53,459
platform and and it's the case now is no

00:13:49,500 --> 00:13:58,380
more teachers so the cones more or less

00:13:53,459 --> 00:14:03,209
I think it's not really concerts more a

00:13:58,380 --> 00:14:06,420
matter of time I think but it was said

00:14:03,209 --> 00:14:11,459
yesterday the leaning language learning

00:14:06,420 --> 00:14:16,350
curve is steep for us at first but

00:14:11,459 --> 00:14:19,890
especially for IT beginners our users in

00:14:16,350 --> 00:14:22,320
fact most of our users do know that new

00:14:19,890 --> 00:14:28,040
not create their packages we have to do

00:14:22,320 --> 00:14:30,600
that but we are not so many to do that

00:14:28,040 --> 00:14:33,029
for some language is the solution for

00:14:30,600 --> 00:14:36,230
packaging or setting up an event can be

00:14:33,029 --> 00:14:39,690
confusing for user especially for Python

00:14:36,230 --> 00:14:41,730
some packages are tricky to write and

00:14:39,690 --> 00:14:43,850
researchers for particulars of torment

00:14:41,730 --> 00:14:47,459
in a lot of different configurations so

00:14:43,850 --> 00:14:50,940
pokai packages as configurations it was

00:14:47,459 --> 00:14:53,190
presented yesterday morning we are

00:14:50,940 --> 00:14:57,240
waiting with a lot of enthusiasm about

00:14:53,190 --> 00:14:59,760
that feature and finally I think judging

00:14:57,240 --> 00:15:04,879
things properly especially in height in

00:14:59,760 --> 00:15:08,660
the public research takes a lot of time

00:15:04,879 --> 00:15:16,980
thank you for your attention

00:15:08,660 --> 00:15:16,980
[Applause]

00:15:29,150 --> 00:15:39,130
but didn't I so sorry any questions yes

00:15:39,820 --> 00:15:45,680
do you have to do a lot of manual

00:15:42,440 --> 00:15:47,839
patching for some of the HPC specific

00:15:45,680 --> 00:15:51,410
applications that haven't been packaged

00:15:47,839 --> 00:15:53,960
for Nix yet like having to alter the our

00:15:51,410 --> 00:15:57,010
path and stuff in them in ways that you

00:15:53,960 --> 00:16:03,589
wouldn't normally do in a normal package

00:15:57,010 --> 00:16:07,490
patching the application not so much it

00:16:03,589 --> 00:16:10,310
happened but not so much yet but I have

00:16:07,490 --> 00:16:13,070
I have a bunch of package to do and I

00:16:10,310 --> 00:16:18,680
think I would do that for some of them

00:16:13,070 --> 00:16:20,360
but we try to avoid that so your main

00:16:18,680 --> 00:16:23,839
cluster you mentioned that you have

00:16:20,360 --> 00:16:26,140
nodes with next file system and then you

00:16:23,839 --> 00:16:36,200
monster

00:16:26,140 --> 00:16:38,690
NFS here I'm curious about NFS setup if

00:16:36,200 --> 00:16:56,810
ya encountered any issues with sharing

00:16:38,690 --> 00:17:01,120
the next door yes sometime in slow in

00:16:56,810 --> 00:17:06,069
fact it's a bit slow but it is not a

00:17:01,120 --> 00:17:06,069
breaking point for the moment

00:17:08,190 --> 00:17:16,560
nope No so if you have problems with an

00:17:14,250 --> 00:17:19,500
extending stone of and if s s the next

00:17:16,560 --> 00:17:22,830
weekís has a paragraph on what you could

00:17:19,500 --> 00:17:24,810
need to do when you exporting that sorry

00:17:22,830 --> 00:17:28,320
I didn't see you at the beginning so

00:17:24,810 --> 00:17:30,390
he's totally your question the problem

00:17:28,320 --> 00:17:39,200
was not a question if if there was a

00:17:30,390 --> 00:17:39,200
problem with the next one and FS sorry

00:17:40,910 --> 00:17:48,750
si was before a question it was a

00:17:43,560 --> 00:17:50,880
question what how one can use NFS when

00:17:48,750 --> 00:18:00,630
it's no Nicks when it's installed on an

00:17:50,880 --> 00:18:03,570
NFS and yeah I think we know we answer

00:18:00,630 --> 00:18:08,060
that because is this isn't mean maybe I

00:18:03,570 --> 00:18:11,670
can answer the question no no the the

00:18:08,060 --> 00:18:15,990
NFS sharing is just for with access from

00:18:11,670 --> 00:18:19,140
the nodes you know the the users are

00:18:15,990 --> 00:18:22,320
doing Nick's operations like like

00:18:19,140 --> 00:18:24,860
package installation building and things

00:18:22,320 --> 00:18:29,390
like that only from the head nodes and

00:18:24,860 --> 00:18:34,410
the the computing nodes are just

00:18:29,390 --> 00:18:36,300
accessing to the binaries the computing

00:18:34,410 --> 00:18:42,260
noodles and writings and in the stash

00:18:36,300 --> 00:18:42,260
necks in fact okay so it works

00:18:46,860 --> 00:18:49,640
okay

00:18:57,100 --> 00:19:01,810
were you involved in the decision to

00:18:58,780 --> 00:19:03,790
switch to Knicks and how did that go cuz

00:19:01,810 --> 00:19:10,060
we're trying to do that at work too for

00:19:03,790 --> 00:19:13,930
rhpc no I'm here since approximately one

00:19:10,060 --> 00:19:19,530
year and a half so no but Bruno was here

00:19:13,930 --> 00:19:24,910
and I think he decided to do that we do

00:19:19,530 --> 00:19:28,240
but in France we are they fall for now

00:19:24,910 --> 00:19:33,250
we are the only computing center using

00:19:28,240 --> 00:19:36,100
NYX so the users they can create their

00:19:33,250 --> 00:19:39,100
own packages I saw you have a fork of

00:19:36,100 --> 00:19:43,180
next packages for you do so they make

00:19:39,100 --> 00:19:47,260
their own pull requests to that or in in

00:19:43,180 --> 00:19:49,600
fact yeah they they include their

00:19:47,260 --> 00:19:51,880
packages in our channel and after that

00:19:49,600 --> 00:20:00,210
on the after today they do a pull

00:19:51,880 --> 00:20:04,620
request upstream more questions nope

00:20:00,210 --> 00:20:04,620
okay then thank you very much for you

00:20:08,940 --> 00:20:12,219

YouTube URL: https://www.youtube.com/watch?v=s5iY3CsdSfQ


