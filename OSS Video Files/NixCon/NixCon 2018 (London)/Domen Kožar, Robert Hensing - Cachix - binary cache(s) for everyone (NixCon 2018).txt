Title: Domen KoÅ¾ar, Robert Hensing - Cachix - binary cache(s) for everyone (NixCon 2018)
Publication date: 2018-10-27
Playlist: NixCon 2018 (London)
Description: 
	This talk is going to cover how to best use Cachix in hobby and professional manner to ease development and adoption of Nix. Talk is also going to cover the motivation how Cachix came to be, what are the design decision behind it and their consequences, usage statistics and where it's possibly headed. --- Bio: Domen Kozar: I've started using Nix in 2012 and after years of many contributions in free time, started using Nix exclusively in 2016 packaging up OpenStack and functional testing a cluster with scenarios. In 2016 I've founded Enlambda consulting which helped many clients like Snabb and IOHK to adopt Nix as a way to solve interesting complex software distribution problems in our industry. Robert Hensing: Nix user since early 2016, Nix and Haskell freelancer  since 2017. You may have caught him on stack overflow with a solution,  advice or bad news. He is convinced that the future is not just  immutable, but functional.

Link to slides: https://drive.google.com/open?id=0BwzQu6RqRR5zeFpBckw1M3Q3eXBPdW5kWmIyWmo0TTA0X0pr
Captions: 
	00:00:00,000 --> 00:00:03,050
[Music]

00:00:05,720 --> 00:00:14,549
alright ok so the last talk before lunch

00:00:10,889 --> 00:00:17,670
break we've got Dolman and Roman has

00:00:14,549 --> 00:00:21,380
been busy be working on things that are

00:00:17,670 --> 00:00:23,279
going to make your life your life easier

00:00:21,380 --> 00:00:27,269
tooling and infrastructure things

00:00:23,279 --> 00:00:29,820
especially cash shakes and he's here to

00:00:27,269 --> 00:00:37,290
talk to us about that today so give him

00:00:29,820 --> 00:00:38,370
a warm round of applause all right hi

00:00:37,290 --> 00:00:42,719
everyone

00:00:38,370 --> 00:00:44,969
can you hear me well alright so yeah

00:00:42,719 --> 00:00:49,860
it's great to see such a big conference

00:00:44,969 --> 00:00:53,210
Nick's conf so I'm gonna start with the

00:00:49,860 --> 00:00:57,360
cheesy picture and a cheesy statement

00:00:53,210 --> 00:01:00,559
yeah this has been my passion to think

00:00:57,360 --> 00:01:02,850
about this question over and over again

00:01:00,559 --> 00:01:05,700
those that were here last year I had a

00:01:02,850 --> 00:01:08,090
talk how to running running Nick

00:01:05,700 --> 00:01:12,240
successfully for two years in production

00:01:08,090 --> 00:01:15,450
and during that time I've learned a lot

00:01:12,240 --> 00:01:18,119
and I think this is kind of the next

00:01:15,450 --> 00:01:21,330
step how do we make it scale in a way

00:01:18,119 --> 00:01:24,119
that you know multiple organizations can

00:01:21,330 --> 00:01:25,979
use that easily without hiring someone

00:01:24,119 --> 00:01:28,040
that that is you know in the core team

00:01:25,979 --> 00:01:31,070
of Nick's to be able to start using mix

00:01:28,040 --> 00:01:36,689
and and what are the gaps to get there

00:01:31,070 --> 00:01:39,150
and yeah I think I can personally break

00:01:36,689 --> 00:01:42,600
it out into two fields one is

00:01:39,150 --> 00:01:44,610
documentation there is there is a lot to

00:01:42,600 --> 00:01:46,680
be said on this topic this this talk is

00:01:44,610 --> 00:01:49,829
not going to be about that I will say

00:01:46,680 --> 00:01:50,220
that yeah everybody tries to do their

00:01:49,829 --> 00:01:53,399
best

00:01:50,220 --> 00:01:55,079
I also contributed a couple of I did a

00:01:53,399 --> 00:02:00,180
few experiments on the documentation

00:01:55,079 --> 00:02:02,729
topic but I think there is a second

00:02:00,180 --> 00:02:04,560
point and I started thinking about which

00:02:02,729 --> 00:02:07,110
one should come first and once we have

00:02:04,560 --> 00:02:08,940
the infrastructure I think the incentive

00:02:07,110 --> 00:02:11,160
to write documentation is going to come

00:02:08,940 --> 00:02:13,800
by itself more on that a bit later so

00:02:11,160 --> 00:02:15,960
I've decided to to spend more time on

00:02:13,800 --> 00:02:19,820
second point and get back to the first

00:02:15,960 --> 00:02:24,270
one once that's in a good sign

00:02:19,820 --> 00:02:26,130
so I believe history what got me to this

00:02:24,270 --> 00:02:28,290
thinking and and what got us to to

00:02:26,130 --> 00:02:30,960
Kasich's and Hercules as Robert will

00:02:28,290 --> 00:02:35,220
present later I think that it's

00:02:30,960 --> 00:02:38,540
important to capture that so it starts

00:02:35,220 --> 00:02:41,810
in 2016 with Peter Simons

00:02:38,540 --> 00:02:44,790
the first person that kind of like put a

00:02:41,810 --> 00:02:51,810
documentation how to run your Hydra or

00:02:44,790 --> 00:02:54,180
CI fornix and yeah it's it's still there

00:02:51,810 --> 00:02:55,740
it's still valid it's there's a few

00:02:54,180 --> 00:02:59,700
things that change but if you go there

00:02:55,740 --> 00:03:03,600
you can set up your own Hydra and that

00:02:59,700 --> 00:03:09,630
was half year later I added this to to

00:03:03,600 --> 00:03:12,930
mix OS to nix packages Elco wasn't that

00:03:09,630 --> 00:03:15,150
happy about that because for a very

00:03:12,930 --> 00:03:17,280
valid reason heater was meant to be used

00:03:15,150 --> 00:03:19,470
for Nick's packages and it's very well

00:03:17,280 --> 00:03:22,410
crafted as this big build firm but it's

00:03:19,470 --> 00:03:25,950
not that well designed to be used in an

00:03:22,410 --> 00:03:29,459
organizational setting and those that

00:03:25,950 --> 00:03:31,320
might run one know the problems but I've

00:03:29,459 --> 00:03:33,709
said okay I'll help maintain this is the

00:03:31,320 --> 00:03:37,520
best we have so let's go with that right

00:03:33,709 --> 00:03:43,670
so it's there how many people use sudra

00:03:37,520 --> 00:03:43,670
all right so about 20 hands 30 maybe

00:03:44,030 --> 00:03:49,620
so yeah the first comment was now I'd

00:03:47,400 --> 00:03:51,060
finally have my own Hydra tried once had

00:03:49,620 --> 00:04:01,110
trouble didn't try again right so

00:03:51,060 --> 00:04:03,209
progress so in in about yeah few months

00:04:01,110 --> 00:04:08,430
later we figured out that Elka was right

00:04:03,209 --> 00:04:10,739
we need to as always right we need to we

00:04:08,430 --> 00:04:14,220
need to rethink this how do we how do we

00:04:10,739 --> 00:04:15,930
go forward so with Joe fish that's his

00:04:14,220 --> 00:04:17,340
nickname I don't I don't know I don't

00:04:15,930 --> 00:04:20,640
know how to pronounce his surname I'm

00:04:17,340 --> 00:04:24,600
sorry with Joe we started this project

00:04:20,640 --> 00:04:27,660
called hair color see I like them round

00:04:24,600 --> 00:04:31,050
idea was to rewrite basically to keep

00:04:27,660 --> 00:04:33,990
the SQL schema to keep everything except

00:04:31,050 --> 00:04:37,740
rewriting all the Pearl and the front

00:04:33,990 --> 00:04:41,190
end with an proper HTTP API and and I

00:04:37,740 --> 00:04:46,980
created back then an elm application

00:04:41,190 --> 00:04:50,250
with a new front end and we did this is

00:04:46,980 --> 00:04:52,140
in free time and every time we had some

00:04:50,250 --> 00:04:54,210
you know free time after work or

00:04:52,140 --> 00:04:57,860
whatever we came back and we did some

00:04:54,210 --> 00:05:02,280
work after fixing Hydra we went back to

00:04:57,860 --> 00:05:05,240
reimplemented Hydra annum and then it

00:05:02,280 --> 00:05:09,080
kind of died off for multiple reasons

00:05:05,240 --> 00:05:13,080
one is that it was a big project to do

00:05:09,080 --> 00:05:15,360
and second one we kind of needed to

00:05:13,080 --> 00:05:18,570
reverse-engineer Hydra and and we didn't

00:05:15,360 --> 00:05:21,300
really anticipate that that's that's not

00:05:18,570 --> 00:05:24,090
non-trivial so we try to save time on

00:05:21,300 --> 00:05:26,190
reimplemented because kima and asking

00:05:24,090 --> 00:05:29,100
some hard questions but we've wasted

00:05:26,190 --> 00:05:31,500
time on reverse engineering and also it

00:05:29,100 --> 00:05:34,080
was done in free time again so I started

00:05:31,500 --> 00:05:35,850
to ask myself okay how do we build

00:05:34,080 --> 00:05:37,890
something sustainable how do we build

00:05:35,850 --> 00:05:40,290
something that will you know not die

00:05:37,890 --> 00:05:47,460
again and what have we failed at this

00:05:40,290 --> 00:05:50,490
time and so yeah this is yeah this just

00:05:47,460 --> 00:05:53,669
took about a year or maybe less than a

00:05:50,490 --> 00:05:56,160
year to come to to a state that to a

00:05:53,669 --> 00:06:00,180
state where it still wasn't working back

00:05:56,160 --> 00:06:05,090
then I was employed at i/o HK and I

00:06:00,180 --> 00:06:10,230
didn't have any time and then in April

00:06:05,090 --> 00:06:13,020
2018 this year I left our HK and I said

00:06:10,230 --> 00:06:15,000
okay how do we fix this and looking

00:06:13,020 --> 00:06:18,360
around at different communities I found

00:06:15,000 --> 00:06:22,470
it the only way to do it is is to make

00:06:18,360 --> 00:06:24,750
it a product so that development can be

00:06:22,470 --> 00:06:27,030
sustained and that people can be assured

00:06:24,750 --> 00:06:28,560
that after some time it's still gonna be

00:06:27,030 --> 00:06:33,090
there and they can use it and it gets

00:06:28,560 --> 00:06:35,310
better and better and I don't okay it's

00:06:33,090 --> 00:06:36,840
just me right so what can I do I know

00:06:35,310 --> 00:06:38,760
that it's building us yeah at this point

00:06:36,840 --> 00:06:41,249
is hard and it's a lot of work even

00:06:38,760 --> 00:06:43,949
though it's like packaging right how

00:06:41,249 --> 00:06:46,709
hard can it be so this is just a

00:06:43,949 --> 00:06:48,509
different level so I said okay I drew

00:06:46,709 --> 00:06:50,249
the whole CI design and I said okay

00:06:48,509 --> 00:06:52,799
what's the most minimal thing we can do

00:06:50,249 --> 00:06:54,989
here and I said okay we can we can

00:06:52,799 --> 00:06:57,089
already have a binary cash as a service

00:06:54,989 --> 00:06:58,799
right you can register you get a binary

00:06:57,089 --> 00:07:00,779
Cash when you use it with your own CI

00:06:58,799 --> 00:07:04,019
your own development whatever you want

00:07:00,779 --> 00:07:06,989
right that's the idea so my first goal

00:07:04,019 --> 00:07:08,039
was yeah that setting up a binary cash

00:07:06,989 --> 00:07:10,499
shouldn't take more than a minute and

00:07:08,039 --> 00:07:15,119
you're good to go right whatever is you

00:07:10,499 --> 00:07:17,969
I use you plug it in and and and you

00:07:15,119 --> 00:07:19,889
start pushing binaries and you know your

00:07:17,969 --> 00:07:23,189
developers whoever can can go from there

00:07:19,889 --> 00:07:26,069
and use those binaries now step two is

00:07:23,189 --> 00:07:28,169
what's happening right now implementing

00:07:26,069 --> 00:07:30,569
garbage collection implementing

00:07:28,169 --> 00:07:33,749
different permissions multiple Reed keys

00:07:30,569 --> 00:07:36,209
multiple right keys and so on and that

00:07:33,749 --> 00:07:38,519
should be all easy right

00:07:36,209 --> 00:07:41,099
and I'm step three is it's finally

00:07:38,519 --> 00:07:43,679
document how to use cash sakes what are

00:07:41,099 --> 00:07:46,679
the you know what are the common things

00:07:43,679 --> 00:07:49,169
that people get into trouble when when

00:07:46,679 --> 00:07:51,899
starting to use necks and so on so we

00:07:49,169 --> 00:07:53,759
come back to to my to solving the first

00:07:51,899 --> 00:07:59,579
of the two points that I think are

00:07:53,759 --> 00:08:04,079
important so a bit of numbers it's

00:07:59,579 --> 00:08:08,399
running for almost 150 days it has more

00:08:04,079 --> 00:08:11,939
than 500 users registered it's using one

00:08:08,399 --> 00:08:14,329
point three terabytes of storage a lot

00:08:11,939 --> 00:08:19,429
half of users creates the binary cash

00:08:14,329 --> 00:08:22,889
and so far we had two hours of time time

00:08:19,429 --> 00:08:26,659
which turned out to be that some Haskell

00:08:22,889 --> 00:08:30,539
optimization actually in the compiler

00:08:26,659 --> 00:08:32,250
god yeah the machine down it used all

00:08:30,539 --> 00:08:36,269
the memory so this is still something I

00:08:32,250 --> 00:08:38,099
we want to pursue and fix but now at

00:08:36,269 --> 00:08:40,860
least if that happens again it should

00:08:38,099 --> 00:08:45,029
recover itself so hopefully that's

00:08:40,860 --> 00:08:46,680
that's fixed so yeah what I've been

00:08:45,029 --> 00:08:51,089
working in the last couple of months is

00:08:46,680 --> 00:08:53,009
is private binary cash so for for people

00:08:51,089 --> 00:08:54,430
who don't want to publish their packages

00:08:53,009 --> 00:08:57,270
publicly

00:08:54,430 --> 00:09:02,020
and this is gonna be a paid feature

00:08:57,270 --> 00:09:04,660
random I'm gonna try to show that I have

00:09:02,020 --> 00:09:10,210
a live demo and and a slide email so

00:09:04,660 --> 00:09:17,680
let's see which one works better how am

00:09:10,210 --> 00:09:21,850
i doing on time few more minutes and

00:09:17,680 --> 00:09:24,310
then alright so so now you'll be able to

00:09:21,850 --> 00:09:28,630
pick if you want your binary cash to be

00:09:24,310 --> 00:09:31,440
public or private the UI is not great

00:09:28,630 --> 00:09:35,800
this is just you know a way to show that

00:09:31,440 --> 00:09:39,330
it works for now so you pick your your

00:09:35,800 --> 00:09:42,130
cash six subdomain and then you pick

00:09:39,330 --> 00:09:44,680
what is the team in your organization

00:09:42,130 --> 00:09:45,970
that will have access read access to two

00:09:44,680 --> 00:09:48,550
to the binary cash right

00:09:45,970 --> 00:09:50,200
the right axis is the signing key and I

00:09:48,550 --> 00:09:53,020
will also add support for multiple

00:09:50,200 --> 00:09:54,880
signing keys so who wants to have one

00:09:53,020 --> 00:09:57,520
for the CI and warfare developers or

00:09:54,880 --> 00:10:02,050
whatever that will be there so let's

00:09:57,520 --> 00:10:05,860
create an ex-con that was in an 18 and

00:10:02,050 --> 00:10:11,080
then yeah let's say you want to let's

00:10:05,860 --> 00:10:13,390
say that we want to give you know one

00:10:11,080 --> 00:10:14,980
team on github access whatever is in

00:10:13,390 --> 00:10:16,750
there I'll probably show something like

00:10:14,980 --> 00:10:18,490
members or something that's it's more

00:10:16,750 --> 00:10:21,190
clear what but who are you giving access

00:10:18,490 --> 00:10:23,680
to and then you create the binary cash

00:10:21,190 --> 00:10:26,520
you get instructions how to install

00:10:23,680 --> 00:10:28,570
annex how to install Kasich's you get

00:10:26,520 --> 00:10:32,440
instructions how to authenticate from

00:10:28,570 --> 00:10:35,350
your machine to tutor Kasich's and then

00:10:32,440 --> 00:10:37,660
you push the story pads one thing I want

00:10:35,350 --> 00:10:39,190
to make sure here the signing key is

00:10:37,660 --> 00:10:41,320
actually the secret key that you only

00:10:39,190 --> 00:10:43,630
get that is generated in the browser

00:10:41,320 --> 00:10:44,980
it's never sent to Kasich's and if you

00:10:43,630 --> 00:10:46,540
don't make a backup I don't have a

00:10:44,980 --> 00:10:50,290
backup for you so you'll have to create

00:10:46,540 --> 00:10:52,950
a new cache so I'll make sure this is

00:10:50,290 --> 00:10:55,690
this is more clear in the documentation

00:10:52,950 --> 00:10:59,170
and yeah that's basically how you push

00:10:55,690 --> 00:11:02,230
things with a signing key and then if

00:10:59,170 --> 00:11:05,110
you go to to the link this is Mexican

00:11:02,230 --> 00:11:07,000
2018 that caching start work well this

00:11:05,110 --> 00:11:08,079
is a development server so it's not

00:11:07,000 --> 00:11:10,360
actually there

00:11:08,079 --> 00:11:14,619
I you'll see that it's trusted by this

00:11:10,360 --> 00:11:17,019
github user that's the public key and

00:11:14,619 --> 00:11:18,489
then instructions how to use it so you

00:11:17,019 --> 00:11:21,220
can put you know inside your

00:11:18,489 --> 00:11:24,160
organization you can give link and again

00:11:21,220 --> 00:11:26,350
you install Nix Kasich's you

00:11:24,160 --> 00:11:29,499
authenticate because you need it's a

00:11:26,350 --> 00:11:33,369
private binary cash then you say cash

00:11:29,499 --> 00:11:35,559
excuse and that configures your Nix conf

00:11:33,369 --> 00:11:40,689
and your net RC configuration and you

00:11:35,559 --> 00:11:45,339
can use the binary cash basically so

00:11:40,689 --> 00:11:47,259
today my went well yeah if you go to

00:11:45,339 --> 00:11:50,139
castings org there is a forum where you

00:11:47,259 --> 00:11:53,139
can sign up probably this weekend will

00:11:50,139 --> 00:11:54,670
will send out a private beta access for

00:11:53,139 --> 00:12:00,069
people to play with if you think this is

00:11:54,670 --> 00:12:01,299
cool and now Robert will talk about the

00:12:00,069 --> 00:12:02,019
second part of what we're working

00:12:01,299 --> 00:12:05,949
together

00:12:02,019 --> 00:12:08,499
the Hercules GI so yeah meanwhile though

00:12:05,949 --> 00:12:11,850
sorry before meanwhile he sets up you

00:12:08,499 --> 00:12:11,850
can probably ask me a question or two

00:12:16,020 --> 00:12:19,580
[Applause]

00:12:21,319 --> 00:12:32,249
questions oh yeah over here so it's

00:12:29,970 --> 00:12:35,429
actually already relatively easy to set

00:12:32,249 --> 00:12:39,569
up private binary cashiers are three

00:12:35,429 --> 00:12:44,009
also so what's the main value add of

00:12:39,569 --> 00:12:47,429
cash X so the main value is that yes you

00:12:44,009 --> 00:12:49,230
can do that there are there's gonna be

00:12:47,429 --> 00:12:50,999
features that are gonna be on top of

00:12:49,230 --> 00:12:53,220
that Adele will make your life easier so

00:12:50,999 --> 00:12:55,049
like our collection and you can

00:12:53,220 --> 00:12:57,749
you will be able to set up with the

00:12:55,049 --> 00:13:01,470
different single sign ons who has access

00:12:57,749 --> 00:13:04,709
to that and yeah you can use s3 for that

00:13:01,470 --> 00:13:07,049
but it has it's very limited on the

00:13:04,709 --> 00:13:09,149
other hand behind Kasich's there is an

00:13:07,049 --> 00:13:11,040
application server that which gives you

00:13:09,149 --> 00:13:12,989
possible which gives me possibility to

00:13:11,040 --> 00:13:15,059
do a lot of things like searching

00:13:12,989 --> 00:13:19,110
through through that through the binary

00:13:15,059 --> 00:13:22,379
cash and it's going to be connected to -

00:13:19,110 --> 00:13:26,749
Hercules so the bootstrap of of using

00:13:22,379 --> 00:13:30,119
cash is going to be faster right so it's

00:13:26,749 --> 00:13:32,209
yeah those are the the benefits in for

00:13:30,119 --> 00:13:32,209
now

00:13:36,640 --> 00:13:43,600
what's the cost model for Kasich's I do

00:13:41,560 --> 00:13:46,769
I didn't publish it yet and I I don't

00:13:43,600 --> 00:13:49,720
want to say what it's gonna be I'm still

00:13:46,769 --> 00:13:54,910
thinking about it most probably is gonna

00:13:49,720 --> 00:13:57,310
be storage oriented but yeah I'm

00:13:54,910 --> 00:13:59,380
interested too to come up with a way

00:13:57,310 --> 00:14:02,410
that it's it's feasible for people that

00:13:59,380 --> 00:14:04,450
it's not too limiting I always don't

00:14:02,410 --> 00:14:06,579
enjoy when when there is like an

00:14:04,450 --> 00:14:10,180
arbitrary limit and you just you know

00:14:06,579 --> 00:14:12,370
can use the service yeah still deciding

00:14:10,180 --> 00:14:13,690
on this but most probably everything

00:14:12,370 --> 00:14:17,200
looks like it's going to be storage

00:14:13,690 --> 00:14:19,240
storage size oriented but if you have

00:14:17,200 --> 00:14:23,230
some feedback about this I'm interested

00:14:19,240 --> 00:14:25,750
to hear it's it's not a no solution is

00:14:23,230 --> 00:14:27,579
ideal unfortunately or at least I

00:14:25,750 --> 00:14:32,980
couldn't come up with one maybe last

00:14:27,579 --> 00:14:37,810
question my epic watch is today going to

00:14:32,980 --> 00:14:40,329
tell me that I moved moved enough when I

00:14:37,810 --> 00:14:43,899
tried cash checks for the auto-updates

00:14:40,329 --> 00:14:47,050
to just to review them I found out that

00:14:43,899 --> 00:14:49,209
I need to add my own user into trusted

00:14:47,050 --> 00:14:52,510
users to use it although I'm only

00:14:49,209 --> 00:14:56,890
reading from the cache why is that yeah

00:14:52,510 --> 00:15:01,600
so it makes the binary cash can conserve

00:14:56,890 --> 00:15:04,089
you basically as Erica said in his talk

00:15:01,600 --> 00:15:06,310
right when you build the package the the

00:15:04,089 --> 00:15:09,970
actual result of the package can be

00:15:06,310 --> 00:15:12,430
arbitrary right the the the signing

00:15:09,970 --> 00:15:14,829
doesn't assure you that it doesn't sign

00:15:12,430 --> 00:15:18,040
the actual contents of a package right

00:15:14,829 --> 00:15:20,260
so if you are if if people would be able

00:15:18,040 --> 00:15:22,540
to just download things in your unique

00:15:20,260 --> 00:15:26,380
store from any user that's basically

00:15:22,540 --> 00:15:29,560
they could if I give you a you know non

00:15:26,380 --> 00:15:34,060
secure binding I mean adversary binary

00:15:29,560 --> 00:15:37,480
right if user guest one downloads can

00:15:34,060 --> 00:15:39,880
download from any binary cache then they

00:15:37,480 --> 00:15:43,300
can just put something in and then user

00:15:39,880 --> 00:15:45,940
you know guest you uses that package and

00:15:43,300 --> 00:15:48,640
it could be something not expected right

00:15:45,940 --> 00:15:49,900
so that's the the trust model UNIX wants

00:15:48,640 --> 00:15:52,210
to make sure that you

00:15:49,900 --> 00:15:53,950
there's on one machine cannot affect

00:15:52,210 --> 00:15:59,500
each other and that's why it's done this

00:15:53,950 --> 00:16:01,150
way you probably might want to have it

00:15:59,500 --> 00:16:05,140
with your hand it's probably gonna be

00:16:01,150 --> 00:16:09,250
too far away all right I guess I'll put

00:16:05,140 --> 00:16:14,080
it there for a demo all right so this is

00:16:09,250 --> 00:16:17,020
me this is what I look like and yeah I'm

00:16:14,080 --> 00:16:22,810
kind of somewhat kind of new to the next

00:16:17,020 --> 00:16:25,120
community so I I'm also on a bit active

00:16:22,810 --> 00:16:27,690
on stackoverflow by the way so if you

00:16:25,120 --> 00:16:30,340
asked a question there maybe you've

00:16:27,690 --> 00:16:34,990
received an answer for me I hope it was

00:16:30,340 --> 00:16:40,540
a good answer yeah so I'll tell a bit

00:16:34,990 --> 00:16:45,340
about myself some history yeah my story

00:16:40,540 --> 00:16:51,310
started in 2016 when I was I had a neck

00:16:45,340 --> 00:16:54,070
stress on my on my desktop and yeah this

00:16:51,310 --> 00:16:59,710
was me deploying an enterprise scholar

00:16:54,070 --> 00:17:04,410
application on JBoss that didn't work

00:16:59,710 --> 00:17:06,550
very well but also in 2016 this was me

00:17:04,410 --> 00:17:10,000
deploying the enterprise Scylla

00:17:06,550 --> 00:17:15,250
application with Nick's on sense Wes

00:17:10,000 --> 00:17:18,190
actually yeah so since then I've I

00:17:15,250 --> 00:17:22,990
started freelancing and doing some some

00:17:18,190 --> 00:17:26,140
some research into how am I going to

00:17:22,990 --> 00:17:29,470
prevent these kind of situations improve

00:17:26,140 --> 00:17:36,460
things and obviously next was come to be

00:17:29,470 --> 00:17:41,920
part of that yeah so I added some side

00:17:36,460 --> 00:17:45,660
projects basically and yeah I started

00:17:41,920 --> 00:17:50,910
experimenting with an ex-gi and I

00:17:45,660 --> 00:17:54,750
figured out quite soon that building a

00:17:50,910 --> 00:17:56,740
CI is not just a side project it really

00:17:54,750 --> 00:17:57,120
takes a lot of effort to build a good

00:17:56,740 --> 00:18:01,240
one

00:17:57,120 --> 00:18:05,470
so that summer I

00:18:01,240 --> 00:18:11,950
I talked to domin and we decided to work

00:18:05,470 --> 00:18:16,210
together and we redesigned ci design and

00:18:11,950 --> 00:18:23,140
this is what we came up with so we have

00:18:16,210 --> 00:18:27,670
Hercules CI and it's all reads of course

00:18:23,140 --> 00:18:30,700
it'll fetch sources from get up but they

00:18:27,670 --> 00:18:33,190
won't actually go to our service instead

00:18:30,700 --> 00:18:37,630
we'll have we'll provide you with an

00:18:33,190 --> 00:18:40,480
open-source agent that will fetch the

00:18:37,630 --> 00:18:43,570
sources build it you sky shakes to fetch

00:18:40,480 --> 00:18:48,460
dependencies use Kasich's to push them

00:18:43,570 --> 00:18:52,270
back when it's when it's done and report

00:18:48,460 --> 00:18:57,270
back to the Hercules CI service for

00:18:52,270 --> 00:18:57,270
notifications and a dashboard and so on

00:19:00,310 --> 00:19:07,050
so yeah these are like the

00:19:02,170 --> 00:19:09,280
distinguishing features for Hercules you

00:19:07,050 --> 00:19:12,370
will be able to control your own build

00:19:09,280 --> 00:19:18,970
firm so if you have some exotic things

00:19:12,370 --> 00:19:20,590
you need it should be easy to do so you

00:19:18,970 --> 00:19:26,200
can have as many machines as you want

00:19:20,590 --> 00:19:32,470
and yeah we strive to be the best and

00:19:26,200 --> 00:19:41,250
easiest CI for open source mix users and

00:19:32,470 --> 00:19:41,250
and for companies all right

00:19:45,710 --> 00:19:48,710
so

00:19:49,560 --> 00:19:53,300
here we go this is

00:20:00,840 --> 00:20:13,710
right this is our MVP and yeah so when

00:20:09,629 --> 00:20:17,249
you go to the to the application I just

00:20:13,710 --> 00:20:20,159
have to sign in with github will be

00:20:17,249 --> 00:20:22,679
using our paired up integration to

00:20:20,159 --> 00:20:25,279
configure softlight permissions

00:20:22,679 --> 00:20:25,279
automatically

00:20:31,920 --> 00:20:39,440
so now Hercules knows that I'm there and

00:20:35,750 --> 00:20:39,440
we can start configuring

00:20:41,210 --> 00:20:54,560
so I'll install Hercules now on quickly

00:20:48,080 --> 00:21:00,290
CI itself we have a mono repo that has

00:20:54,560 --> 00:21:04,610
the actual code now it'll be set up so

00:21:00,290 --> 00:21:09,220
that particular CI can can actually only

00:21:04,610 --> 00:21:09,220
access that single repository

00:21:13,730 --> 00:21:23,139
so now we can switch to Berkeley CI

00:21:17,590 --> 00:21:23,139
accounts and start configuring the agent

00:21:26,890 --> 00:21:35,890
and it's just a little snippet of in

00:21:31,150 --> 00:21:42,250
this case mix-ups configuration we have

00:21:35,890 --> 00:21:44,429
a mix-ups module that helps to set this

00:21:42,250 --> 00:21:44,429
up

00:21:45,130 --> 00:21:53,970
so all we have to do now is write that

00:21:49,330 --> 00:21:53,970
to agent up next file

00:21:59,429 --> 00:22:03,990
like this

00:22:01,720 --> 00:22:03,990
and

00:22:04,390 --> 00:22:07,810
deploy the agent

00:22:17,360 --> 00:22:20,020
all right

00:22:33,730 --> 00:22:41,010
groceries showing up it's good so now

00:22:38,230 --> 00:22:41,010
all we have to do is

00:22:42,610 --> 00:22:49,750
is making a change to trigger bills and

00:22:47,340 --> 00:22:55,170
I guess what I'll do instead is just

00:22:49,750 --> 00:22:55,170
push had to

00:22:58,590 --> 00:23:01,249
whatever

00:23:06,640 --> 00:23:10,860
and you'll see it starts evaluating

00:23:15,490 --> 00:23:23,770
and now it's it should be building it's

00:23:20,890 --> 00:23:27,700
not finished yet the actual building is

00:23:23,770 --> 00:23:31,779
something that's almost done I mean as a

00:23:27,700 --> 00:23:37,809
feature so it'll be stuck in this state

00:23:31,779 --> 00:23:43,929
for a while but yeah we do have

00:23:37,809 --> 00:23:46,630
evaluation working and so these are the

00:23:43,929 --> 00:23:50,080
attributes that are in in our project

00:23:46,630 --> 00:23:52,990
and you can see there's actually we

00:23:50,080 --> 00:23:59,919
found a problem by using Hercules it's

00:23:52,990 --> 00:24:02,289
its value yeah so we have a mix up as a

00:23:59,919 --> 00:24:09,820
as a development tool we're building it

00:24:02,289 --> 00:24:11,799
in our in our next file and yeah we

00:24:09,820 --> 00:24:17,320
linked it in the way that was suggested

00:24:11,799 --> 00:24:19,120
in the next obstacle mutation but we're

00:24:17,320 --> 00:24:22,120
not using next path - fine thanks

00:24:19,120 --> 00:24:24,309
packages that's actually a good measure

00:24:22,120 --> 00:24:29,200
- to make sure that you're building the

00:24:24,309 --> 00:24:32,730
right thing to make sure that some

00:24:29,200 --> 00:24:39,159
developers environment doesn't affect

00:24:32,730 --> 00:24:43,179
your project so yeah that that broke

00:24:39,159 --> 00:24:46,570
here turns out that looks like for

00:24:43,179 --> 00:24:48,789
documentation it depends on a path

00:24:46,570 --> 00:24:53,490
that's discovered - next path and it

00:24:48,789 --> 00:24:53,490
shouldn't so something will have to fix

00:24:53,960 --> 00:25:00,579
yeah so that concludes the demo

00:24:57,300 --> 00:25:00,579
[Music]

00:25:03,320 --> 00:25:08,350
so you've seen this

00:25:17,620 --> 00:25:27,279
right so obviously we're not done yet

00:25:22,720 --> 00:25:31,150
and we have some some further plans to

00:25:27,279 --> 00:25:32,679
make this a really great see I want to

00:25:31,150 --> 00:25:36,820
provide some kind of NIC shell

00:25:32,679 --> 00:25:41,320
functionality with Hydra for example you

00:25:36,820 --> 00:25:44,650
cannot do side affecting stuff at least

00:25:41,320 --> 00:25:47,529
not in a proper way and we want to to

00:25:44,650 --> 00:25:51,039
integrate this into Hercules side so we

00:25:47,529 --> 00:25:53,740
have a like a principled way to to

00:25:51,039 --> 00:25:59,760
perform side effecting stuff as part of

00:25:53,740 --> 00:26:02,309
your deployment pipeline yeah and we

00:25:59,760 --> 00:26:05,559
we're still looking into ways to

00:26:02,309 --> 00:26:10,029
integrate with container infrastructure

00:26:05,559 --> 00:26:12,429
like docker or kubernetes there's a huge

00:26:10,029 --> 00:26:17,320
design space we haven't really decided

00:26:12,429 --> 00:26:20,610
how how we want to do this and we would

00:26:17,320 --> 00:26:24,490
love to talk to you about about this and

00:26:20,610 --> 00:26:29,820
other ways you you are using NYX so we

00:26:24,490 --> 00:26:33,850
can provide the best experience yeah

00:26:29,820 --> 00:26:41,169
there's a private beta you can sign up

00:26:33,850 --> 00:26:46,020
for it we'll be sending out emails very

00:26:41,169 --> 00:26:46,020
soon to gather some more information and

00:26:47,370 --> 00:26:56,490
yeah if you if you sign up now you'll

00:26:50,110 --> 00:26:56,490
you'll be included and we love to it

00:26:57,960 --> 00:27:11,580
so thank you all right thank you very

00:27:09,570 --> 00:27:14,730
much two men and what and we have

00:27:11,580 --> 00:27:21,749
questions from the audience yes we do do

00:27:14,730 --> 00:27:25,049
my running thing again so what's your

00:27:21,749 --> 00:27:28,110
technological stack of which language

00:27:25,049 --> 00:27:31,049
this is written it and can we deploy it

00:27:28,110 --> 00:27:33,059
as well and the sub question did you

00:27:31,049 --> 00:27:36,179
manage to reverse engineer the Hydra

00:27:33,059 --> 00:27:38,220
cube we're on air so others can reuse it

00:27:36,179 --> 00:27:44,039
for their own CI attempts for example I

00:27:38,220 --> 00:27:46,980
micro CI and go right yeah so I stack is

00:27:44,039 --> 00:27:51,179
basically Haskell for the back-end

00:27:46,980 --> 00:27:52,889
services using um front-end obviously

00:27:51,179 --> 00:27:56,820
we're using NYX for packaging and

00:27:52,889 --> 00:28:00,690
deployments for now we're using NYX ops

00:27:56,820 --> 00:28:06,740
on AWS but we probably want to change

00:28:00,690 --> 00:28:06,740
that into something a bit more flexible

00:28:08,419 --> 00:28:15,659
yeah and so our 18 software is open

00:28:12,809 --> 00:28:17,820
source at least it will be when we start

00:28:15,659 --> 00:28:22,259
the private beta we will release the

00:28:17,820 --> 00:28:24,619
agent software and yeah it's open source

00:28:22,259 --> 00:28:30,379
so definitely have a look at it are we

00:28:24,619 --> 00:28:30,379
info are we invoke NYX

00:28:35,990 --> 00:28:41,090
so it wasn't entirely clear to me what

00:28:38,570 --> 00:28:43,580
the agents is for okay you said it again

00:28:41,090 --> 00:28:44,720
all right so that the agent that's the

00:28:43,580 --> 00:28:47,470
part that you're running on your own

00:28:44,720 --> 00:28:51,110
infrastructure and it's responsible for

00:28:47,470 --> 00:28:55,480
invoking Nicks for evaluation for

00:28:51,110 --> 00:28:59,360
invoking or basically mixed bills and

00:28:55,480 --> 00:29:02,770
yeah it'll fetch dependencies obviously

00:28:59,360 --> 00:29:08,510
and it'll upload those depend just built

00:29:02,770 --> 00:29:10,460
packages to a binary cash okay so the

00:29:08,510 --> 00:29:15,020
evaluation and building is not done by

00:29:10,460 --> 00:29:18,980
the Hercules CIE service yeah so at

00:29:15,020 --> 00:29:21,860
least at least for now like the hard

00:29:18,980 --> 00:29:27,100
work so to speak is it's all done on

00:29:21,860 --> 00:29:30,970
customer infrastructure we may implement

00:29:27,100 --> 00:29:33,320
a a more hosted version of the service

00:29:30,970 --> 00:29:36,430
in the future but right because that

00:29:33,320 --> 00:29:40,730
would be a very compelling feature yes

00:29:36,430 --> 00:29:44,090
yeah yeah so our first approach is to

00:29:40,730 --> 00:29:47,300
make it really easy to do it on your own

00:29:44,090 --> 00:29:51,170
infrastructure and probably in the

00:29:47,300 --> 00:29:53,150
future we will look into hosting the

00:29:51,170 --> 00:29:59,510
entire infrastructure yes for most

00:29:53,150 --> 00:30:00,880
people it's not required to to host

00:29:59,510 --> 00:30:03,350
their own infrastructure right because

00:30:00,880 --> 00:30:09,500
many applications are running on like

00:30:03,350 --> 00:30:11,570
commodity hardware so yeah for those

00:30:09,500 --> 00:30:16,610
people we want if we can make it even

00:30:11,570 --> 00:30:16,880
easier by hosting their agents we will

00:30:16,610 --> 00:30:21,550
do sir

00:30:16,880 --> 00:30:21,550
probably more questions

00:30:21,860 --> 00:30:26,310
nope doesn't seem so so yeah thank you

00:30:24,930 --> 00:30:35,370
very much again don't mind all that for

00:30:26,310 --> 00:30:38,430
your talk and so next up we've got a

00:30:35,370 --> 00:30:40,970
one-hour break for lunch lunch time

00:30:38,430 --> 00:30:40,970

YouTube URL: https://www.youtube.com/watch?v=py26iM26Qg4


