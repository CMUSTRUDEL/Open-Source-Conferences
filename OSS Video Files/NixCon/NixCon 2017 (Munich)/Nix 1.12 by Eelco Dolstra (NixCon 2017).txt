Title: Nix 1.12 by Eelco Dolstra (NixCon 2017)
Publication date: 2017-10-30
Playlist: NixCon 2017 (Munich)
Description: 
	In this talk I will give an overview of the new features in Nix 1.12, and the ongoing work on the "nix" command intended to replace the existing command-line interface.
https://schedule.nixcon2017.org//system/event_attachments/attachments/000/000/004/original/talk.pdf?1509289391
Captions: 
	00:00:00,030 --> 00:00:07,319
our next speaker is Elko dill straw

00:00:03,680 --> 00:00:14,280
invented Nick's wet 1314 years ago now

00:00:07,319 --> 00:00:15,750
very long time ago and thing I like to

00:00:14,280 --> 00:00:17,880
quote when people tell me how Nick so

00:00:15,750 --> 00:00:22,920
Nick's OS is so young I say no no no no

00:00:17,880 --> 00:00:24,960
it's it's very old and maybe it's just

00:00:22,920 --> 00:00:27,990
the fate of functional programming

00:00:24,960 --> 00:00:29,279
languages in general but I'm grateful

00:00:27,990 --> 00:00:37,550
that the community is starting to take

00:00:29,279 --> 00:00:37,550
off and yeah

00:00:43,329 --> 00:00:49,989
yeah so this talk is just a sort of

00:00:46,710 --> 00:00:53,829
random or overview of features in next

00:00:49,989 --> 00:00:57,610
1.12 in a fairly random order so this is

00:00:53,829 --> 00:01:02,260
not Nix 2.0 yet it was kind of the goal

00:00:57,610 --> 00:01:04,000
at some point but so well let me start

00:01:02,260 --> 00:01:07,540
with the status so it's not actually

00:01:04,000 --> 00:01:10,210
released yet but I think it's in a

00:01:07,540 --> 00:01:14,289
fairly usable state so I would like to

00:01:10,210 --> 00:01:17,200
invite everybody to go and test it and

00:01:14,289 --> 00:01:21,160
discover things that break and report

00:01:17,200 --> 00:01:23,850
issues and then hopefully in a few weeks

00:01:21,160 --> 00:01:27,580
or so we might have an actual release

00:01:23,850 --> 00:01:31,539
after also updating the documentation

00:01:27,580 --> 00:01:34,539
which is currently lacking but again

00:01:31,539 --> 00:01:41,170
that's always the case early in new

00:01:34,539 --> 00:01:42,610
situation with the next manual so yeah

00:01:41,170 --> 00:01:44,800
well yeah of course you probably know

00:01:42,610 --> 00:01:47,770
how to upgrade it so if it does change

00:01:44,800 --> 00:01:50,409
the database schema but there's actually

00:01:47,770 --> 00:01:52,360
a hack in next 1.11 that makes it for

00:01:50,409 --> 00:01:55,840
it's compatible with that schema change

00:01:52,360 --> 00:02:01,509
so you shouldn't have to be afraid to

00:01:55,840 --> 00:02:03,280
try it out so yeah the main thing that

00:02:01,509 --> 00:02:06,610
were really the main goal of the

00:02:03,280 --> 00:02:09,519
development in the last well really

00:02:06,610 --> 00:02:14,470
since last Nix con was to come up with a

00:02:09,519 --> 00:02:16,959
new user interface because the the

00:02:14,470 --> 00:02:20,410
existing one so all these commands Nicks

00:02:16,959 --> 00:02:24,420
and explore and so on yeah I hadn't been

00:02:20,410 --> 00:02:28,209
really so much design has evolved so

00:02:24,420 --> 00:02:31,060
yeah there wasn't much structure or

00:02:28,209 --> 00:02:34,030
fought behind them so they're kind of a

00:02:31,060 --> 00:02:38,110
mess so the idea was to create a new

00:02:34,030 --> 00:02:42,090
command and that command exists but it's

00:02:38,110 --> 00:02:45,760
lacking things so it doesn't quite

00:02:42,090 --> 00:02:47,590
justify Nix 2.0 label yet so in

00:02:45,760 --> 00:02:51,519
particular one of really the main goal

00:02:47,590 --> 00:02:54,569
was to replace Nick's end with something

00:02:51,519 --> 00:03:00,180
more declarative but that doesn't exist

00:02:54,569 --> 00:03:04,620
yet so so maybe one if we have that then

00:03:00,180 --> 00:03:07,290
we could call it 2.0 so another thing to

00:03:04,620 --> 00:03:10,379
mention is that the syntax of the nix

00:03:07,290 --> 00:03:12,540
commands that we have at this point is

00:03:10,379 --> 00:03:16,379
still a bit experimental so things might

00:03:12,540 --> 00:03:22,590
change depending on feedback and other

00:03:16,379 --> 00:03:28,650
insights that might occur so the syntax

00:03:22,590 --> 00:03:31,290
might still change so another thing to

00:03:28,650 --> 00:03:34,739
mention is that it's a goal here that

00:03:31,290 --> 00:03:37,230
this command is more scripts friendly

00:03:34,739 --> 00:03:39,810
than the existing one so every command

00:03:37,230 --> 00:03:41,579
should have a JSON flag with the

00:03:39,810 --> 00:03:45,260
emphasis on shoot it's not actually the

00:03:41,579 --> 00:03:48,480
case yet but most of them have so yeah

00:03:45,260 --> 00:03:51,449
and so without a JSON flag the idea is

00:03:48,480 --> 00:03:55,379
that the intent is or the output is

00:03:51,449 --> 00:04:00,629
intended to be human consumable so it

00:03:55,379 --> 00:04:02,370
might change so yeah so the general

00:04:00,629 --> 00:04:07,290
syntax is Nick's up command so it's like

00:04:02,370 --> 00:04:08,729
the gift free letter command and nice

00:04:07,290 --> 00:04:12,840
thing is that it's fully self

00:04:08,729 --> 00:04:16,739
documenting so all the flags for all the

00:04:12,840 --> 00:04:17,570
sub commands are queryable by a dash

00:04:16,739 --> 00:04:22,079
dash help

00:04:17,570 --> 00:04:23,970
it even has examples in the best just

00:04:22,079 --> 00:04:26,610
help so there are no man pages yet or

00:04:23,970 --> 00:04:29,370
anything like that but maybe maybe you

00:04:26,610 --> 00:04:32,520
don't need them also note the line at

00:04:29,370 --> 00:04:34,530
the note the line at the bottom that

00:04:32,520 --> 00:04:39,330
says this program is experimental so

00:04:34,530 --> 00:04:41,039
don't get too attached to it yeah

00:04:39,330 --> 00:04:44,210
another thing to say about the new

00:04:41,039 --> 00:04:46,889
comment line interface that all

00:04:44,210 --> 00:04:50,880
configuration options so next comm

00:04:46,889 --> 00:04:52,740
options are now supported as command

00:04:50,880 --> 00:04:55,380
line flags which is just a small

00:04:52,740 --> 00:04:57,960
convenience that makes them easier to

00:04:55,380 --> 00:05:03,930
type so instead of typing - - option

00:04:57,960 --> 00:05:06,630
sandbox true you say - - sandbox yeah

00:05:03,930 --> 00:05:09,750
oh and you can put configuration options

00:05:06,630 --> 00:05:15,300
in your home directory now in dot config

00:05:09,750 --> 00:05:17,690
slash Nick slashed Nick's Kampf so for

00:05:15,300 --> 00:05:20,039
instance if you have a user specific

00:05:17,690 --> 00:05:25,740
substitute or things like that you can

00:05:20,039 --> 00:05:28,440
put them in there yeah so now now if a

00:05:25,740 --> 00:05:30,810
bunch of random sub commands so there is

00:05:28,440 --> 00:05:36,060
a command called Nick's built so this is

00:05:30,810 --> 00:05:39,270
intended to replace mix - built and so

00:05:36,060 --> 00:05:42,270
the general syntax of most of these

00:05:39,270 --> 00:05:43,500
Nick's commands is that they get a set

00:05:42,270 --> 00:05:46,590
of so called

00:05:43,500 --> 00:05:48,660
installable which is well maybe not a

00:05:46,590 --> 00:05:53,460
great term but it's intended to be

00:05:48,660 --> 00:05:56,610
something that can evaluate to a store

00:05:53,460 --> 00:05:58,740
path so it might it can be a store path

00:05:56,610 --> 00:06:02,220
directly or assembling to a store path

00:05:58,740 --> 00:06:07,860
but it can also be a an attribute name

00:06:02,220 --> 00:06:10,500
like nick's packages dot hello so so

00:06:07,860 --> 00:06:14,840
another change in compared to Nick's and

00:06:10,500 --> 00:06:17,639
fish that we're trying to get rid of

00:06:14,840 --> 00:06:20,460
searching for packages using their name

00:06:17,639 --> 00:06:23,010
because that's super slow so the idea is

00:06:20,460 --> 00:06:24,810
that you reference packages by their

00:06:23,010 --> 00:06:26,970
attribute name which is I guess what

00:06:24,810 --> 00:06:30,930
most people were doing anyway with the -

00:06:26,970 --> 00:06:33,870
uppercase a option but so here it's the

00:06:30,930 --> 00:06:35,849
default and so command like Nick's

00:06:33,870 --> 00:06:40,889
builds as how if you say Nick's packages

00:06:35,849 --> 00:06:43,320
got hello it searches in a synthesized

00:06:40,889 --> 00:06:45,509
attribute set that consists or that's

00:06:43,320 --> 00:06:47,639
synthesized from your Nick's path so if

00:06:45,509 --> 00:06:51,150
you have any expected use in your Nick's

00:06:47,639 --> 00:06:53,820
path then the expected use will refer to

00:06:51,150 --> 00:06:56,849
that so next package is built hello

00:06:53,820 --> 00:07:01,020
refers to the hello attribute in Nick's

00:06:56,849 --> 00:07:05,220
packages so another nice thing is that

00:07:01,020 --> 00:07:07,639
it has a progress indicator so show that

00:07:05,220 --> 00:07:07,639
here

00:07:08,090 --> 00:07:11,240
[Music]

00:07:16,950 --> 00:07:22,330
so so now it's building something and it

00:07:20,590 --> 00:07:25,960
indicates that it is in the configure

00:07:22,330 --> 00:07:29,770
face and well you don't see the so over

00:07:25,960 --> 00:07:32,590
there is the the last log line from the

00:07:29,770 --> 00:07:36,250
build and now it's finished okay so yeah

00:07:32,590 --> 00:07:39,040
the ideas it doesn't tries to follow the

00:07:36,250 --> 00:07:40,600
UNIX philosophy or part of it which is

00:07:39,040 --> 00:07:43,900
that if you have nothing interesting to

00:07:40,600 --> 00:07:45,550
say you should say nothing so most of

00:07:43,900 --> 00:07:48,610
the time well this output of Nix

00:07:45,550 --> 00:07:51,250
commands was not interesting so if you

00:07:48,610 --> 00:07:52,870
say the effect could be argued that the

00:07:51,250 --> 00:08:00,310
progress bar shouldn't be shown

00:07:52,870 --> 00:08:01,630
afterwards but yeah so yeah and other

00:08:00,310 --> 00:08:06,550
commands also have this progress

00:08:01,630 --> 00:08:09,430
indicator so Francis makes copy so on

00:08:06,550 --> 00:08:12,610
the topic of building remote build

00:08:09,430 --> 00:08:16,180
configurations now a lot easier so just

00:08:12,610 --> 00:08:18,100
be that you had to set up machines dot

00:08:16,180 --> 00:08:20,050
Nick set up annex build who can

00:08:18,100 --> 00:08:22,840
environments very well set up some

00:08:20,050 --> 00:08:25,720
config options which is fine if you're

00:08:22,840 --> 00:08:28,900
only doing that once but especially for

00:08:25,720 --> 00:08:30,550
a sort of incidental use say I have I

00:08:28,900 --> 00:08:32,409
want to build something on a Mac and I

00:08:30,550 --> 00:08:35,140
want to forward it to a Mac machine that

00:08:32,409 --> 00:08:36,880
I have available so you can now just

00:08:35,140 --> 00:08:41,110
specify it on the comment line so you

00:08:36,880 --> 00:08:45,490
say mix builds - - builders and then had

00:08:41,110 --> 00:08:47,350
the ssh address and the machine type and

00:08:45,490 --> 00:08:49,960
it will start building and it will

00:08:47,350 --> 00:08:52,630
actually say that it is building a

00:08:49,960 --> 00:09:01,510
derivation on that machine so that's

00:08:52,630 --> 00:09:04,450
kind of nice yeah so as a example of how

00:09:01,510 --> 00:09:07,030
depth installable syntax is kind of used

00:09:04,450 --> 00:09:09,070
for almost all commands so there is a

00:09:07,030 --> 00:09:11,770
command called mix log which replaces

00:09:09,070 --> 00:09:15,130
sneak store - - read lock which shows

00:09:11,770 --> 00:09:18,520
you the the bill block for a derivation

00:09:15,130 --> 00:09:20,440
but this one also works on attributes so

00:09:18,520 --> 00:09:21,740
you can say Nix lock and expect adjust

00:09:20,440 --> 00:09:24,230
of hell

00:09:21,740 --> 00:09:26,690
and it will show you the log file for

00:09:24,230 --> 00:09:28,760
the hello package and not our new

00:09:26,690 --> 00:09:33,590
features that will get it from the

00:09:28,760 --> 00:09:40,400
binary cash if if if no log file is

00:09:33,590 --> 00:09:41,690
available locally okay so yeah I said we

00:09:40,400 --> 00:09:42,890
didn't have a replacement for Nik

00:09:41,690 --> 00:09:47,170
Sandford actually so there is a

00:09:42,890 --> 00:09:51,170
replacement for nixon's - QA and the big

00:09:47,170 --> 00:09:54,920
difference is that it has a cache so so

00:09:51,170 --> 00:10:01,070
you can type mixer it's blender and that

00:09:54,920 --> 00:10:03,230
takes 0.1 seconds and so yeah it's it's

00:10:01,070 --> 00:10:06,410
just a regular expression so it will

00:10:03,230 --> 00:10:08,450
match with or don't actually remember it

00:10:06,410 --> 00:10:10,790
was a regular expression or a substring

00:10:08,450 --> 00:10:12,650
search but it will look in attributes

00:10:10,790 --> 00:10:18,010
names and package names and descriptions

00:10:12,650 --> 00:10:21,560
for the argument that you specify so

00:10:18,010 --> 00:10:25,310
yeah it's a lot less strict than Nixon

00:10:21,560 --> 00:10:28,700
flesh QA of course now you have a cache

00:10:25,310 --> 00:10:30,860
coherence problem so right now the cache

00:10:28,700 --> 00:10:33,290
never gets updated to tell you unless

00:10:30,860 --> 00:10:39,950
you explicitly ask for it

00:10:33,290 --> 00:10:42,140
so yeah and that's the trade-off yeah so

00:10:39,950 --> 00:10:47,480
there is a command called nix path info

00:10:42,140 --> 00:10:51,050
which replaces next door - q and so one

00:10:47,480 --> 00:10:55,490
nice flag that it has is - uppercase s

00:10:51,050 --> 00:11:00,280
which shows you the closure size of a

00:10:55,490 --> 00:11:03,620
path so for example mix PAP info - RS on

00:11:00,280 --> 00:11:05,660
your current mix OS system if you pipe

00:11:03,620 --> 00:11:07,370
it through short it will show you the

00:11:05,660 --> 00:11:10,880
closure size of every path in an

00:11:07,370 --> 00:11:13,580
ecosystem sorted by size well that's a

00:11:10,880 --> 00:11:16,220
my kind of my obsession is closure size

00:11:13,580 --> 00:11:20,090
reduction so this is this is useful for

00:11:16,220 --> 00:11:22,400
that so another thing to mention so I'll

00:11:20,090 --> 00:11:25,990
come back to the next slide is there's a

00:11:22,400 --> 00:11:30,560
store parameter so you can specify which

00:11:25,990 --> 00:11:33,459
nick store you want to apply the query

00:11:30,560 --> 00:11:36,009
to so usually that's your local store

00:11:33,459 --> 00:11:38,800
there can also be a binary cash or

00:11:36,009 --> 00:11:43,269
binary cash is considered a store

00:11:38,800 --> 00:11:45,579
because it contains store paths and with

00:11:43,269 --> 00:11:50,350
references and signatures and stuff like

00:11:45,579 --> 00:11:52,779
that yeah yeah we're here in a more

00:11:50,350 --> 00:11:54,519
complicated example show every path

00:11:52,779 --> 00:11:56,559
whose closure size is bigger than 1

00:11:54,519 --> 00:11:58,629
gigabyte sorted by closure sigh so a

00:11:56,559 --> 00:11:58,959
shout out to my favorite command in the

00:11:58,629 --> 00:12:04,959
world

00:11:58,959 --> 00:12:08,199
Jake you beautiful command yeah so on

00:12:04,959 --> 00:12:10,149
the topic of those store URIs so it was

00:12:08,199 --> 00:12:12,970
always the case that in Nix there was

00:12:10,149 --> 00:12:16,569
this store abstraction so there was an

00:12:12,970 --> 00:12:18,009
abstract store class providing

00:12:16,569 --> 00:12:21,959
operations that you can do on an

00:12:18,009 --> 00:12:24,879
extraordinary vation querying

00:12:21,959 --> 00:12:27,879
information about a path but that really

00:12:24,879 --> 00:12:30,399
only adds two subclasses namely a local

00:12:27,879 --> 00:12:32,860
store which is if you're accessing it

00:12:30,399 --> 00:12:36,970
directly or a remote store which is if

00:12:32,860 --> 00:12:42,819
you're exiting through a for the mix

00:12:36,970 --> 00:12:45,910
demon but so we've kind of generalized

00:12:42,819 --> 00:12:48,850
this concept so things like substitute

00:12:45,910 --> 00:12:50,079
errs are now stores so substitute ORS

00:12:48,850 --> 00:12:52,889
are gone

00:12:50,079 --> 00:12:57,100
there are subclasses of that store API

00:12:52,889 --> 00:13:00,369
and also things like yeah Nick's copy

00:12:57,100 --> 00:13:03,639
closure copying things to the Nick store

00:13:00,369 --> 00:13:06,149
on a remote SSH remote machine fayez is

00:13:03,639 --> 00:13:10,420
H that was done in a totally ad hoc way

00:13:06,149 --> 00:13:12,850
so now that's also a store so so here's

00:13:10,420 --> 00:13:13,689
a list of available store service local

00:13:12,850 --> 00:13:17,889
there's remote

00:13:13,689 --> 00:13:21,579
there's also slash path so that's the

00:13:17,889 --> 00:13:24,459
same as local only it's it basically

00:13:21,579 --> 00:13:28,629
uses a change route or well I actually

00:13:24,459 --> 00:13:34,360
more a mountain named space that allows

00:13:28,629 --> 00:13:35,249
you to use a next door in a different

00:13:34,360 --> 00:13:39,579
location

00:13:35,249 --> 00:13:42,189
so there's HTTP and HTTPS HTTP and HTTPS

00:13:39,579 --> 00:13:44,679
so that's replaces download from binary

00:13:42,189 --> 00:13:46,790
cash so another very nice thing about

00:13:44,679 --> 00:13:49,700
Nick's 1.12 is

00:13:46,790 --> 00:13:52,310
thanks to the great work of che we got

00:13:49,700 --> 00:13:55,160
rid of the Pearl dependency so and this

00:13:52,310 --> 00:13:59,480
is part of that so another very nice

00:13:55,160 --> 00:14:01,820
feature is that it supports HTTP 2 which

00:13:59,480 --> 00:14:04,850
gives a huge performance difference

00:14:01,820 --> 00:14:06,920
because if your ethnics does your

00:14:04,850 --> 00:14:11,090
querying a binary cash for hundreds of

00:14:06,920 --> 00:14:13,700
tiny little files HP one doesn't like

00:14:11,090 --> 00:14:16,210
that you have to use dozens of parallel

00:14:13,700 --> 00:14:21,320
TCP connections and then router starts

00:14:16,210 --> 00:14:24,080
crashing and so HP two is much nicer and

00:14:21,320 --> 00:14:29,780
it's more reliable because we now retry

00:14:24,080 --> 00:14:32,840
a lot more error conditions so yeah but

00:14:29,780 --> 00:14:35,660
yeah other stores so there's file for a

00:14:32,840 --> 00:14:41,020
local binary cash as free for an S free

00:14:35,660 --> 00:14:45,440
binary cash and SSH for remote machines

00:14:41,020 --> 00:14:47,380
so as an example of of that so there is

00:14:45,440 --> 00:14:50,090
a command called NICs copy which

00:14:47,380 --> 00:14:54,410
generalizes a whole bunch of commands so

00:14:50,090 --> 00:14:56,600
mix copy closure nix Bush and a bunch of

00:14:54,410 --> 00:14:59,930
scripts that we used to populate binary

00:14:56,600 --> 00:15:03,980
caches so for example NICs copy closure

00:14:59,930 --> 00:15:06,890
that's now just Nick's copy - - - and

00:15:03,980 --> 00:15:10,220
then an ssh host or conversely that's

00:15:06,890 --> 00:15:14,230
just from an ssh host and the excuse is

00:15:10,220 --> 00:15:17,240
just copying to a file binary cash and

00:15:14,230 --> 00:15:22,130
populating something like cash Nick's

00:15:17,240 --> 00:15:24,860
restore torque that's copy 2's free so

00:15:22,130 --> 00:15:27,710
yeah so if you want to have your own

00:15:24,860 --> 00:15:33,830
binary caching as free that's now really

00:15:27,710 --> 00:15:35,780
easy yeah so there's now this well ok so

00:15:33,830 --> 00:15:39,710
like I said change would store is a

00:15:35,780 --> 00:15:41,600
misnomer but so what you can do here is

00:15:39,710 --> 00:15:44,240
this is nice if you don't have write

00:15:41,600 --> 00:15:45,050
access to slash but you still want to

00:15:44,240 --> 00:15:48,310
install Nick's

00:15:45,050 --> 00:15:51,440
and you want to be able to use have

00:15:48,310 --> 00:15:55,820
pre-built binaries for / Nick slash

00:15:51,440 --> 00:15:58,100
store so so you can just say dash dash

00:15:55,820 --> 00:15:59,640
store and then a path to which you do

00:15:58,100 --> 00:16:02,010
have right for me

00:15:59,640 --> 00:16:04,050
and then it will use that instead so

00:16:02,010 --> 00:16:10,370
this only works on Linux because it uses

00:16:04,050 --> 00:16:13,020
the magic of mount namespaces but yeah

00:16:10,370 --> 00:16:15,900
so now you might be thinking is okay so

00:16:13,020 --> 00:16:17,520
you can build things but that doesn't

00:16:15,900 --> 00:16:21,120
help you running them so there's also

00:16:17,520 --> 00:16:23,130
command called nix run which is mostly

00:16:21,120 --> 00:16:25,830
invented as a replacement for Nick shell

00:16:23,130 --> 00:16:28,380
- B but it also supports these change

00:16:25,830 --> 00:16:30,930
routes store so it will run the command

00:16:28,380 --> 00:16:35,880
in a mountain named space where slash

00:16:30,930 --> 00:16:40,200
Nick slash stories mounted to your local

00:16:35,880 --> 00:16:45,870
store so for example you can say Nick's

00:16:40,200 --> 00:16:48,930
run hello and you can run it yeah I mean

00:16:45,870 --> 00:16:53,100
if you do if you do this on next OS then

00:16:48,930 --> 00:16:55,230
nothing else will be present because

00:16:53,100 --> 00:17:05,760
you're mounting this next row on top of

00:16:55,230 --> 00:17:09,360
the regular one but so Nick's verify is

00:17:05,760 --> 00:17:12,839
a comment that verifies whether store

00:17:09,360 --> 00:17:15,750
paths are modified and are signed so a

00:17:12,839 --> 00:17:18,660
new thing next one control is that store

00:17:15,750 --> 00:17:23,390
paths now have signatures so it used to

00:17:18,660 --> 00:17:25,650
be that only binary caches had

00:17:23,390 --> 00:17:28,800
signatures and these signatures were

00:17:25,650 --> 00:17:31,230
only checked during substitution so

00:17:28,800 --> 00:17:33,360
before downloading in our from a binary

00:17:31,230 --> 00:17:36,120
cash it would check whether they've had

00:17:33,360 --> 00:17:39,180
a trusted signature of a now these

00:17:36,120 --> 00:17:41,330
signatures are also stored in the in the

00:17:39,180 --> 00:17:43,980
local database so you can query later

00:17:41,330 --> 00:17:46,200
when our paths are trusted so for

00:17:43,980 --> 00:17:49,770
example a command like Nick's verify -

00:17:46,200 --> 00:17:52,380
are on the Thunderbird will verify the

00:17:49,770 --> 00:17:57,000
closure and see whether it has enough

00:17:52,380 --> 00:17:59,490
signatures so you can even pass flags

00:17:57,000 --> 00:18:01,230
like each path should have at least two

00:17:59,490 --> 00:18:04,490
different signatures or something like

00:18:01,230 --> 00:18:10,280
that so for instance here it shows that

00:18:04,490 --> 00:18:10,280
all paths except one are are trusted

00:18:11,299 --> 00:18:16,519
yeah there's a command called Nick's FL

00:18:13,700 --> 00:18:18,830
which replaces Nick's instantiate not

00:18:16,519 --> 00:18:23,360
much exciting about that there's a

00:18:18,830 --> 00:18:25,129
command called Nick's edit which those

00:18:23,360 --> 00:18:28,009
are not super exciting so it opens the

00:18:25,129 --> 00:18:32,450
source code of a package in your editor

00:18:28,009 --> 00:18:35,509
so it's actually four years I had an

00:18:32,450 --> 00:18:40,820
alias in my environment that Lucas in a

00:18:35,509 --> 00:18:42,320
happy way yeah so this is actually

00:18:40,820 --> 00:18:44,870
useful so there is a command called

00:18:42,320 --> 00:18:48,470
Nick's build - - hash so it doesn't yet

00:18:44,870 --> 00:18:52,100
I realized have a flag in the new Nick's

00:18:48,470 --> 00:18:55,250
field but so this is a built out that

00:18:52,100 --> 00:18:57,259
builds a derivation computes his hash

00:18:55,250 --> 00:19:00,379
and then moves it to the right location

00:18:57,259 --> 00:19:03,320
and Nick store if it were a fixed output

00:19:00,379 --> 00:19:06,710
derivation like fetch URL or fetch get

00:19:03,320 --> 00:19:09,799
or whatever so the idea is that this can

00:19:06,710 --> 00:19:12,919
replace all those Nick's prefix French

00:19:09,799 --> 00:19:14,509
prefetch scripts which are kind of

00:19:12,919 --> 00:19:16,820
annoying because so all those scripts

00:19:14,509 --> 00:19:20,200
basically do the same thing as the

00:19:16,820 --> 00:19:22,970
corresponding Nick's function only

00:19:20,200 --> 00:19:25,009
outside of the next outside of the

00:19:22,970 --> 00:19:33,820
Nick's build and then they do an

00:19:25,009 --> 00:19:36,769
extraordinary example if you have a

00:19:33,820 --> 00:19:42,049
derivation that's called fetch from

00:19:36,769 --> 00:19:46,149
github and you change its you change it

00:19:42,049 --> 00:19:49,309
so now you want to know the new sha hash

00:19:46,149 --> 00:19:52,610
you will do an X build - - hash on that

00:19:49,309 --> 00:19:56,720
thing and that would perform the build

00:19:52,610 --> 00:19:58,250
and it would give you the hash and it

00:19:56,720 --> 00:20:00,159
will move to the right location so you

00:19:58,250 --> 00:20:07,340
don't have to download it again

00:20:00,159 --> 00:20:09,919
afterwards so that's that's that so

00:20:07,340 --> 00:20:11,779
command that I hacked up during story

00:20:09,919 --> 00:20:14,059
for the school font so command that I

00:20:11,779 --> 00:20:17,240
hacked up during the Amsterdam hackathon

00:20:14,059 --> 00:20:18,980
a few weeks ago is Nick's why depends

00:20:17,240 --> 00:20:23,360
probably needs a better name but it

00:20:18,980 --> 00:20:26,030
shows you why a path has an order path

00:20:23,360 --> 00:20:29,410
in its closure so if you're debugging

00:20:26,030 --> 00:20:33,890
closure size issues you often have the

00:20:29,410 --> 00:20:35,960
question of why do I have this dots deaf

00:20:33,890 --> 00:20:38,809
outputs in my clothes or why do you have

00:20:35,960 --> 00:20:43,190
GCC in my closure because that suddenly

00:20:38,809 --> 00:20:46,250
adds 50 megabytes so you can do things

00:20:43,190 --> 00:20:48,020
like Nix why depends so select run slash

00:20:46,250 --> 00:20:50,000
current system and the expected to stock

00:20:48,020 --> 00:20:54,340
you will see the death and that will

00:20:50,000 --> 00:20:58,640
show you the the path through the

00:20:54,340 --> 00:21:00,559
closure graph from the first path to the

00:20:58,640 --> 00:21:03,500
second one so here there is a chain of

00:21:00,559 --> 00:21:08,270
dependencies going from the top level

00:21:03,500 --> 00:21:13,340
path through system path through some

00:21:08,270 --> 00:21:16,910
debug path fruit GCC to gilepsy - death

00:21:13,340 --> 00:21:19,690
so here the problem that's going on is

00:21:16,910 --> 00:21:22,070
that I had some debug symbols in my

00:21:19,690 --> 00:21:24,799
environment and apparently those trigger

00:21:22,070 --> 00:21:28,179
a dependency on GCC which triggers a

00:21:24,799 --> 00:21:35,179
dependency on the GFC developer outputs

00:21:28,179 --> 00:21:40,280
so yeah so that was so now on to the

00:21:35,179 --> 00:21:42,440
language changes so so probably the

00:21:40,280 --> 00:21:45,470
major one is built-in stuff fetch get

00:21:42,440 --> 00:21:49,870
which fetches a git repository at

00:21:45,470 --> 00:21:55,250
evaluation time and it doesn't need a

00:21:49,870 --> 00:21:59,990
Content hash so unlike imports from

00:21:55,250 --> 00:22:01,580
derivation on the fetch get colle where

00:21:59,990 --> 00:22:04,910
you have all sorts of problems that it

00:22:01,580 --> 00:22:07,340
doesn't work in read-only mode and you

00:22:04,910 --> 00:22:14,230
need to specify a hash so here you can

00:22:07,340 --> 00:22:16,940
just import so for example in Nix OS

00:22:14,230 --> 00:22:21,080
this makes it feasible to have Nick so

00:22:16,940 --> 00:22:24,260
as modules in different repositories so

00:22:21,080 --> 00:22:27,080
we always had this problem that well

00:22:24,260 --> 00:22:29,690
take Hydra so Hydra contains a mixed

00:22:27,080 --> 00:22:31,910
waste module but then Nick's packages

00:22:29,690 --> 00:22:33,950
contains pretty much an exact clone of

00:22:31,910 --> 00:22:34,530
that module which may or may not be

00:22:33,950 --> 00:22:38,490
insane

00:22:34,530 --> 00:22:40,920
with the upstream Hyderabad story so

00:22:38,490 --> 00:22:43,800
that that's now necessary you can get

00:22:40,920 --> 00:22:46,050
rid of that Hydra module and expected

00:22:43,800 --> 00:22:49,320
use and you can just import the right

00:22:46,050 --> 00:22:52,530
one directly so this allows sort of a

00:22:49,320 --> 00:22:58,080
more modular mix OS we don't have to put

00:22:52,530 --> 00:22:59,880
everything in mix OS yeah so and it's

00:22:58,080 --> 00:23:02,070
also possible to specify git

00:22:59,880 --> 00:23:03,570
repositories on the comment line so for

00:23:02,070 --> 00:23:06,830
example you can specify that next

00:23:03,570 --> 00:23:09,980
package it should be some particular get

00:23:06,830 --> 00:23:09,980
checked out

00:23:11,030 --> 00:23:16,040
yeah another interesting thing is

00:23:13,260 --> 00:23:18,420
structured derivation attributes so

00:23:16,040 --> 00:23:25,680
there's always the case that derivation

00:23:18,420 --> 00:23:29,340
attributes gets flattened to to string

00:23:25,680 --> 00:23:31,740
name value pairs because they need to be

00:23:29,340 --> 00:23:34,710
passed through the environments but now

00:23:31,740 --> 00:23:38,760
you can pass basically anything except

00:23:34,710 --> 00:23:41,960
functions so attribute sets lists nested

00:23:38,760 --> 00:23:46,890
attributes as boolean snows integers

00:23:41,960 --> 00:23:50,820
floats you know passable so it all gets

00:23:46,890 --> 00:23:52,320
from that map to adjacent file and and

00:23:50,820 --> 00:23:53,370
then it's up to the Builder to do

00:23:52,320 --> 00:23:59,870
something with that

00:23:53,370 --> 00:24:02,490
so as a convenience to bash users any

00:23:59,870 --> 00:24:06,420
attributes that can be mapped can be

00:24:02,490 --> 00:24:12,360
squeezed into a mesh array or a bash

00:24:06,420 --> 00:24:14,510
associative array yeah that's so it will

00:24:12,360 --> 00:24:17,310
do that for you so for example your

00:24:14,510 --> 00:24:20,580
configure flags would actually be a bash

00:24:17,310 --> 00:24:22,770
array and so for example the fact that

00:24:20,580 --> 00:24:26,490
we have white space in the first element

00:24:22,770 --> 00:24:32,610
of that flag is no longer a problem so

00:24:26,490 --> 00:24:36,270
and and also things like for example

00:24:32,610 --> 00:24:39,780
with all these boolean flags for what's

00:24:36,270 --> 00:24:40,260
called the fortify flag so the hardening

00:24:39,780 --> 00:24:42,960
flags

00:24:40,260 --> 00:24:45,510
so that could now be done in a nice way

00:24:42,960 --> 00:24:45,779
like hardening dot fortify is true or

00:24:45,510 --> 00:24:48,179
some

00:24:45,779 --> 00:24:51,779
like that and that that would end up as

00:24:48,179 --> 00:24:54,440
a Bosch associative array now obviously

00:24:51,779 --> 00:24:59,369
this breaks everything so you have to

00:24:54,440 --> 00:25:01,469
opt into it by setting a magic attribute

00:24:59,369 --> 00:25:04,769
so maybe someday in the future we could

00:25:01,469 --> 00:25:10,519
convert standard answer to that and then

00:25:04,769 --> 00:25:10,519
set that for make derivation but yeah

00:25:10,609 --> 00:25:17,389
how am i doing on time

00:25:13,729 --> 00:25:20,009
okay yeah so yeah another minor features

00:25:17,389 --> 00:25:22,950
placeholder so this makes it possible to

00:25:20,009 --> 00:25:24,690
refer to your own outputs so for example

00:25:22,950 --> 00:25:28,679
if I want to say configure flex is

00:25:24,690 --> 00:25:31,169
prefix is that dollar out well you can't

00:25:28,679 --> 00:25:35,070
say dollar out there because that

00:25:31,169 --> 00:25:39,239
doesn't get evaluated so yeah so did

00:25:35,070 --> 00:25:41,519
this causes some magic that will

00:25:39,239 --> 00:25:43,379
actually cause a substitution that just

00:25:41,519 --> 00:25:48,269
before build time with the right value

00:25:43,379 --> 00:25:49,969
so so a bunch of minor improvements

00:25:48,269 --> 00:25:53,519
Knicks treble is now part of Knicks

00:25:49,969 --> 00:25:56,729
there is a special channel syntax that

00:25:53,519 --> 00:26:02,239
you can use in file names and so on it's

00:25:56,729 --> 00:26:04,739
a shortcut for those very long your eyes

00:26:02,239 --> 00:26:06,659
sandbox builds now use slash built

00:26:04,739 --> 00:26:08,909
instead of slash stamp as a temporary

00:26:06,659 --> 00:26:11,700
directory because that was a source of

00:26:08,909 --> 00:26:14,909
security bugs namely builds good

00:26:11,700 --> 00:26:16,679
accidentally store slap stab slash stamp

00:26:14,909 --> 00:26:19,950
directories and things like an our path

00:26:16,679 --> 00:26:23,789
and then somebody could recreate that

00:26:19,950 --> 00:26:27,899
path and inject things into other

00:26:23,789 --> 00:26:31,950
people's executions Sam Linux and box

00:26:27,899 --> 00:26:34,320
now provides Venus age by default base64

00:26:31,950 --> 00:26:36,029
hashes oh yeah automated automatic

00:26:34,320 --> 00:26:38,609
garbage collections are there now a flag

00:26:36,029 --> 00:26:42,119
that Nix will automatically start

00:26:38,609 --> 00:26:44,249
garbage collection if during a build the

00:26:42,119 --> 00:26:45,730
free disk space drops below a certain

00:26:44,249 --> 00:26:47,820
level

00:26:45,730 --> 00:26:49,860
[Music]

00:26:47,820 --> 00:26:50,910
I'm actually all those not very

00:26:49,860 --> 00:26:52,770
interesting

00:26:50,910 --> 00:26:54,990
yeah binary cash signatures are now

00:26:52,770 --> 00:26:57,830
required by default that was already the

00:26:54,990 --> 00:27:00,980
case on Nexus and that's actually it so

00:26:57,830 --> 00:27:00,980
thank you

00:27:10,500 --> 00:27:13,609
[Music]

00:27:15,630 --> 00:27:22,810
question about didn't fetch get and you

00:27:19,960 --> 00:27:27,130
say this is taking place at a valuation

00:27:22,810 --> 00:27:30,550
time not instantiation time yeah that's

00:27:27,130 --> 00:27:36,070
the same it does not take place at build

00:27:30,550 --> 00:27:39,030
time okay sorry is there any caching

00:27:36,070 --> 00:27:43,210
involved yeah of course when you just

00:27:39,030 --> 00:27:45,070
clone mix packages then it takes at

00:27:43,210 --> 00:27:46,690
minute yeah yeah so it's cached and in

00:27:45,070 --> 00:27:49,450
fact it's there's some pretty aggressive

00:27:46,690 --> 00:27:51,220
caching so that I don't remember the

00:27:49,450 --> 00:27:54,250
users but I think there is even a time

00:27:51,220 --> 00:27:56,500
to live so it it won't even check

00:27:54,250 --> 00:27:59,940
whether there is a new version within a

00:27:56,500 --> 00:28:02,800
certain time window so if you run her

00:27:59,940 --> 00:28:08,670
built within five seconds of the Charter

00:28:02,800 --> 00:28:08,670
it's not going to check github twice

00:28:13,140 --> 00:28:19,870
so also about the gate support does that

00:28:15,910 --> 00:28:23,770
mean NYX has a runtime dependency on

00:28:19,870 --> 00:28:28,950
gift and is there a way to specify get

00:28:23,770 --> 00:28:31,300
via SSH so it currently has a loose

00:28:28,950 --> 00:28:33,250
dependence you don't get so it does not

00:28:31,300 --> 00:28:37,740
actually have given its closure it just

00:28:33,250 --> 00:28:37,740
calls get from via the path yeah

00:28:38,790 --> 00:28:47,500
last question yeah so a great talk I'm

00:28:46,000 --> 00:28:49,930
already really looking forward to use

00:28:47,500 --> 00:28:53,500
that so on the risk of opening a can of

00:28:49,930 --> 00:28:57,280
worms so the world bus factor sounds

00:28:53,500 --> 00:28:59,080
scary so I go for for island factor what

00:28:57,280 --> 00:29:01,300
happens if you decide to live on an

00:28:59,080 --> 00:29:06,100
island tomorrow without internet and you

00:29:01,300 --> 00:29:14,560
want to people the nature well it's open

00:29:06,100 --> 00:29:16,090
source so anybody can I would say that

00:29:14,560 --> 00:29:19,990
because we got rid of the Perl

00:29:16,090 --> 00:29:23,320
dependency the bus factor has gone it's

00:29:19,990 --> 00:29:25,120
all squishy has gone down or up its in

00:29:23,320 --> 00:29:28,930
any case there there are more people who

00:29:25,120 --> 00:29:30,460
could replace me that's because I

00:29:28,930 --> 00:29:32,910
checked the contributions that's in

00:29:30,460 --> 00:29:32,910

YouTube URL: https://www.youtube.com/watch?v=XVIKScU7Uf4


