Title: Sneaking Nix at $work â€“ and become a hero, hopefully by zimbatm (NixCon 2017)
Publication date: 2017-10-31
Playlist: NixCon 2017 (Munich)
Description: 
	This talk explores ways to introduce Nix into an existing infrastructure (at work), based on real-life experience.
Captions: 
	00:00:03,140 --> 00:00:15,599
all right our next talk is by Jonas he's

00:00:13,049 --> 00:00:17,850
been a contributor since 2015 he

00:00:15,599 --> 00:00:20,699
organizes the Knicks London meet up with

00:00:17,850 --> 00:00:25,490
Thomas hunger and is now working as a

00:00:20,699 --> 00:00:25,490
Knicks contractor thank you thank you

00:00:29,779 --> 00:00:33,570
all right

00:00:31,230 --> 00:00:37,020
so today I want to talk to you about

00:00:33,570 --> 00:00:40,469
using Knicks at work the title is a bit

00:00:37,020 --> 00:00:44,850
facetious but basically I want to show

00:00:40,469 --> 00:00:48,030
how you take a good ways from work or

00:00:44,850 --> 00:00:50,700
customer and next to fights and there's

00:00:48,030 --> 00:00:53,940
different stages that you will see that

00:00:50,700 --> 00:00:56,610
you have to go through so just for a

00:00:53,940 --> 00:00:59,129
quick history so September last year I

00:00:56,610 --> 00:01:01,680
was tired of hacking Knicks on the side

00:00:59,129 --> 00:01:05,040
and so I decided to quit my job and

00:01:01,680 --> 00:01:09,390
become a next contractor but there's not

00:01:05,040 --> 00:01:11,580
a lot of work around yet and after a

00:01:09,390 --> 00:01:14,430
while I met with tweak and they have

00:01:11,580 --> 00:01:17,610
really cool customers and I was able to

00:01:14,430 --> 00:01:20,810
do a lot of next stuff with them and now

00:01:17,610 --> 00:01:23,759
I joined tweak and they're doing sort of

00:01:20,810 --> 00:01:25,830
aren't applied computer science so it's

00:01:23,759 --> 00:01:30,990
kind of orangey loud before other

00:01:25,830 --> 00:01:33,659
customers alright so the program is

00:01:30,990 --> 00:01:36,180
really to show you the different stages

00:01:33,659 --> 00:01:38,700
there is gonna be first phases next

00:01:36,180 --> 00:01:43,670
shell then you want to package things

00:01:38,700 --> 00:01:46,740
and finally you set up your CI ok so I

00:01:43,670 --> 00:01:51,180
can't really show the customers code so

00:01:46,740 --> 00:01:53,189
I built a little up I actually took some

00:01:51,180 --> 00:01:56,310
of the source code from a project code

00:01:53,189 --> 00:01:58,860
to do MVC and then I next it fired it

00:01:56,310 --> 00:02:01,740
and you can find all of the source code

00:01:58,860 --> 00:02:03,450
over there so if I'm going a bit quickly

00:02:01,740 --> 00:02:06,060
through the slides you can always have a

00:02:03,450 --> 00:02:08,250
look on the repo and you can see the

00:02:06,060 --> 00:02:11,400
file structure is basically you have one

00:02:08,250 --> 00:02:12,520
back-end one front end and the back end

00:02:11,400 --> 00:02:14,800
is a

00:02:12,520 --> 00:02:17,590
skill project and it has two components

00:02:14,800 --> 00:02:23,140
and the front-end is just a bunch of

00:02:17,590 --> 00:02:27,070
Java scripts and yeah first thing is NIC

00:02:23,140 --> 00:02:29,500
shell so you know you you just drop a

00:02:27,070 --> 00:02:31,720
shell that Nixon the project and your

00:02:29,500 --> 00:02:33,280
and your colleagues asked you what is

00:02:31,720 --> 00:02:39,010
this file and you say don't worry about

00:02:33,280 --> 00:02:41,110
it and then at some point suddenly they

00:02:39,010 --> 00:02:43,870
have problem with system dependencies

00:02:41,110 --> 00:02:46,150
and then you're like oh yeah you could

00:02:43,870 --> 00:02:48,550
try to fix it or you can install Nix and

00:02:46,150 --> 00:02:53,710
just run next shell and it's going to be

00:02:48,550 --> 00:02:55,630
fine and basically the shell in the next

00:02:53,710 --> 00:02:59,080
file would look something like that so

00:02:55,630 --> 00:03:02,350
you import next packages and then you

00:02:59,080 --> 00:03:04,840
create the derivation and the important

00:03:02,350 --> 00:03:06,670
part is the build in puts where you put

00:03:04,840 --> 00:03:10,210
all the system dependencies that you

00:03:06,670 --> 00:03:14,320
need and then a last feature of an excel

00:03:10,210 --> 00:03:17,470
is you can run some bash scripts that in

00:03:14,320 --> 00:03:19,810
this case with source dot n file that

00:03:17,470 --> 00:03:24,400
contains typically environment variables

00:03:19,810 --> 00:03:29,230
for the project right so that's kind of

00:03:24,400 --> 00:03:31,180
the version zero and so one thing you

00:03:29,230 --> 00:03:33,430
might notice is you have to put a name

00:03:31,180 --> 00:03:37,000
you have to put a source which is always

00:03:33,430 --> 00:03:39,750
null or some path but it's not really

00:03:37,000 --> 00:03:43,540
relevant so I think we should introduce

00:03:39,750 --> 00:03:48,130
MK shell that just simplifies the

00:03:43,540 --> 00:03:50,200
process and also that's pulls in all of

00:03:48,130 --> 00:03:51,880
the building parts from your different

00:03:50,200 --> 00:03:54,480
packages that you're going to define

00:03:51,880 --> 00:03:54,480
later on

00:03:58,900 --> 00:04:04,550
all right so here I'm using an overlay

00:04:01,850 --> 00:04:11,210
and so I can pretend it's already in the

00:04:04,550 --> 00:04:13,250
expected but it's in your project and my

00:04:11,210 --> 00:04:15,800
attention is to submit a PR at some

00:04:13,250 --> 00:04:19,280
points or if you want to do it you're

00:04:15,800 --> 00:04:22,160
working the other thing that's important

00:04:19,280 --> 00:04:25,370
or that can trick you quite easily is if

00:04:22,160 --> 00:04:27,140
you run Nick shell in - - pure mode then

00:04:25,370 --> 00:04:29,050
lots of the tools that you have

00:04:27,140 --> 00:04:31,970
available are not going to be there and

00:04:29,050 --> 00:04:34,730
usually if you customize your bash RC

00:04:31,970 --> 00:04:39,170
then suddenly you're gonna have failures

00:04:34,730 --> 00:04:41,030
and so that's why this first line is

00:04:39,170 --> 00:04:43,520
quite common you find it on most Debian

00:04:41,030 --> 00:04:47,000
distributions and then I recommend to

00:04:43,520 --> 00:04:50,150
add this second line which is something

00:04:47,000 --> 00:04:51,980
that basically escapes the configure of

00:04:50,150 --> 00:04:56,690
your bash RC if you're in the pure mode

00:04:51,980 --> 00:05:00,380
or just any next trial actually alright

00:04:56,690 --> 00:05:02,780
so you can even start running things in

00:05:00,380 --> 00:05:05,480
the next shell without really stepping

00:05:02,780 --> 00:05:10,400
into it by using the - - run command and

00:05:05,480 --> 00:05:12,050
now any you can even plug this in to UCI

00:05:10,400 --> 00:05:14,540
and now you build with the next shell

00:05:12,050 --> 00:05:19,430
and it's not really pure but it's kind

00:05:14,540 --> 00:05:22,730
of does a job okay so that's the first

00:05:19,430 --> 00:05:26,900
stage and it works but it's not really

00:05:22,730 --> 00:05:29,420
pure and I would say the main issue is

00:05:26,900 --> 00:05:31,640
that it's not composable because one of

00:05:29,420 --> 00:05:34,280
the really cool thing about Nix is that

00:05:31,640 --> 00:05:36,350
you can take make a derivation and then

00:05:34,280 --> 00:05:38,930
compose it and make another derivation

00:05:36,350 --> 00:05:42,919
and that's the really the power of Nix

00:05:38,930 --> 00:05:47,300
and something you don't find with darker

00:05:42,919 --> 00:05:51,470
files for example and so you would build

00:05:47,300 --> 00:05:54,470
packages or I'm not really going to read

00:05:51,470 --> 00:05:56,900
into how to make packages the main

00:05:54,470 --> 00:05:58,730
recommendation I have is read mix

00:05:56,900 --> 00:06:00,860
packages there is lots of examples out

00:05:58,730 --> 00:06:02,540
there but basically it looks a little

00:06:00,860 --> 00:06:06,020
bit like that you have a package name

00:06:02,540 --> 00:06:09,050
then you specify the source and then you

00:06:06,020 --> 00:06:10,580
have different types of inputs which you

00:06:09,050 --> 00:06:11,660
should probably learn because not

00:06:10,580 --> 00:06:14,930
everyone knows

00:06:11,660 --> 00:06:18,380
so the native build inputs are tools

00:06:14,930 --> 00:06:20,810
that you used to build but are not gonna

00:06:18,380 --> 00:06:23,090
be part of the outputs and this is

00:06:20,810 --> 00:06:25,400
important especially for people who do

00:06:23,090 --> 00:06:27,590
cross competition then there's a

00:06:25,400 --> 00:06:29,540
propagated build inputs which are tools

00:06:27,590 --> 00:06:32,450
that you might use for build but you

00:06:29,540 --> 00:06:35,000
also want to install afterwards so they

00:06:32,450 --> 00:06:37,700
kind of come with like if you have a

00:06:35,000 --> 00:06:39,380
binary dependencies and then the

00:06:37,700 --> 00:06:42,380
building puts that probably everyone

00:06:39,380 --> 00:06:43,790
knows you so want to learn about the

00:06:42,380 --> 00:06:49,670
different types of phases there are

00:06:43,790 --> 00:06:52,850
different types of outputs and yeah so

00:06:49,670 --> 00:06:55,880
for this project we have some high scale

00:06:52,850 --> 00:06:58,160
project packages and I'm not going to go

00:06:55,880 --> 00:07:00,920
too much into details but right now in

00:06:58,160 --> 00:07:02,960
this space you have multiple tools so

00:07:00,920 --> 00:07:07,190
you have cable tunics stockage tunics

00:07:02,960 --> 00:07:08,900
you can also try to use the just the

00:07:07,190 --> 00:07:12,590
Haskell packages that are in the next

00:07:08,900 --> 00:07:16,160
packages you can also use the stock tool

00:07:12,590 --> 00:07:19,610
which is a tool that's in the Haskell

00:07:16,160 --> 00:07:22,550
community and it has a - - next mode but

00:07:19,610 --> 00:07:23,870
basically all it does it puts GHC from

00:07:22,550 --> 00:07:27,290
the next door but that's it

00:07:23,870 --> 00:07:29,900
or you can swap things around and create

00:07:27,290 --> 00:07:34,460
a derivation that invokes the stack and

00:07:29,900 --> 00:07:36,620
it's maybe impure but you can maybe

00:07:34,460 --> 00:07:43,250
control the dependencies a little bit

00:07:36,620 --> 00:07:48,560
better and for the node parts with

00:07:43,250 --> 00:07:50,420
Martin or is Martin art it is we worked

00:07:48,560 --> 00:07:54,770
on this project that's called yarn

00:07:50,420 --> 00:07:56,810
tunics and what it it's does is Soyoung

00:07:54,770 --> 00:07:59,360
is a face book project that tries to

00:07:56,810 --> 00:08:01,850
replace NPM and the good thing about it

00:07:59,360 --> 00:08:04,400
is it generates a log file that contains

00:08:01,850 --> 00:08:09,950
the hashes of all of the packages that

00:08:04,400 --> 00:08:14,210
should depend on sorry after download

00:08:09,950 --> 00:08:19,669
the package from NPM okay I have a

00:08:14,210 --> 00:08:22,610
question okay can you okay so the cool

00:08:19,669 --> 00:08:25,430
thing about this is that's actually what

00:08:22,610 --> 00:08:27,500
we do is so the first phase was to

00:08:25,430 --> 00:08:29,810
do like any other languages where you do

00:08:27,500 --> 00:08:32,570
a yarn to next projects that generates

00:08:29,810 --> 00:08:34,909
the next file from your lock file but

00:08:32,570 --> 00:08:36,770
then we realize that actually this

00:08:34,909 --> 00:08:38,900
operation was pure because all the

00:08:36,770 --> 00:08:42,159
inputs is the hashes from the other file

00:08:38,900 --> 00:08:44,720
so now we can import from the outputs

00:08:42,159 --> 00:08:47,960
another we can import the next file

00:08:44,720 --> 00:08:51,580
that's generated and we don't need to

00:08:47,960 --> 00:08:56,000
compute any checksums which means that

00:08:51,580 --> 00:08:58,120
basically your yarn package doesn't have

00:08:56,000 --> 00:09:03,940
any shadows

00:08:58,120 --> 00:09:06,440
that's the magic so what it does it

00:09:03,940 --> 00:09:08,209
takes the name from the package to

00:09:06,440 --> 00:09:11,240
chasten the version from the package to

00:09:08,209 --> 00:09:14,420
jason so you can see the name attributes

00:09:11,240 --> 00:09:19,450
is missing here and you don't have a

00:09:14,420 --> 00:09:19,450
shot for the rest of the dependencies

00:09:19,839 --> 00:09:25,100
okay so this is a slide that I wanted to

00:09:23,060 --> 00:09:29,540
finish earlier but I didn't get the time

00:09:25,100 --> 00:09:33,170
I was actually taking on one of the

00:09:29,540 --> 00:09:37,339
talks were seeing earlier where what I

00:09:33,170 --> 00:09:40,940
do is I instead of making one derivation

00:09:37,339 --> 00:09:43,160
y run the tests I tend to create

00:09:40,940 --> 00:09:45,200
multiple derivation one that has the

00:09:43,160 --> 00:09:48,200
build outputs and another that has the

00:09:45,200 --> 00:09:50,450
tests and because next is composable you

00:09:48,200 --> 00:09:51,950
can do that and it's really nice because

00:09:50,450 --> 00:09:54,380
sometimes you just want to build your

00:09:51,950 --> 00:09:56,720
project and you don't want to run the

00:09:54,380 --> 00:09:58,279
test again because maybe there are

00:09:56,720 --> 00:10:00,950
integration tests and they take a long

00:09:58,279 --> 00:10:02,690
time to build but if you change the do

00:10:00,950 --> 00:10:05,510
check attributes then you're forced to

00:10:02,690 --> 00:10:11,810
rebuild so it's kind of a way to be more

00:10:05,510 --> 00:10:17,540
dynamic ok so what one thing that's

00:10:11,810 --> 00:10:20,420
missing here is you see the icer SRC

00:10:17,540 --> 00:10:22,190
inputs is actually pointing to your

00:10:20,420 --> 00:10:25,850
current folder which is where you have

00:10:22,190 --> 00:10:27,740
all your node modules and all of your

00:10:25,850 --> 00:10:31,490
source code is going to be inserted into

00:10:27,740 --> 00:10:32,870
the next door at Build time but you

00:10:31,490 --> 00:10:35,420
don't want to have the node modules

00:10:32,870 --> 00:10:38,750
further being inserted into the next

00:10:35,420 --> 00:10:41,630
door so there's a built-in that's called

00:10:38,750 --> 00:10:44,840
built-in that filter source and you pass

00:10:41,630 --> 00:10:46,910
a function you pass an absolute path

00:10:44,840 --> 00:10:49,480
with which is where you have your source

00:10:46,910 --> 00:10:53,240
code and it gives you a next door and

00:10:49,480 --> 00:10:56,090
the function itself gets the absolute

00:10:53,240 --> 00:10:58,610
path of each of the files so it's it

00:10:56,090 --> 00:11:01,370
goes through the files of your projects

00:10:58,610 --> 00:11:05,170
and then invokes the function and if it

00:11:01,370 --> 00:11:07,850
returns true it keeps the the file and

00:11:05,170 --> 00:11:10,850
so you get the absolute path to the file

00:11:07,850 --> 00:11:15,920
and the file type which is like a file

00:11:10,850 --> 00:11:19,040
or a directory or maybe a symlink and in

00:11:15,920 --> 00:11:21,230
the next packages there is one tool that

00:11:19,040 --> 00:11:23,810
exists that's called lib that clean

00:11:21,230 --> 00:11:26,180
source which basically removes the

00:11:23,810 --> 00:11:28,910
result file that you would help you get

00:11:26,180 --> 00:11:30,440
from our next build so you don't if you

00:11:28,910 --> 00:11:33,230
don't do that you're gonna run next

00:11:30,440 --> 00:11:35,090
build and you run next build again and

00:11:33,230 --> 00:11:37,250
it builds again because it's inserted

00:11:35,090 --> 00:11:41,050
the results from the previous build and

00:11:37,250 --> 00:11:44,150
so you kind of are in an infinite loop

00:11:41,050 --> 00:11:47,330
and it's nice but it doesn't really

00:11:44,150 --> 00:11:51,200
compose so typically you would have to

00:11:47,330 --> 00:11:53,540
rewrite it or make a function so what I

00:11:51,200 --> 00:11:56,690
propose is that we change a couple of

00:11:53,540 --> 00:12:00,260
things to filter source first I think

00:11:56,690 --> 00:12:02,060
the function should return true if we

00:12:00,260 --> 00:12:05,440
should remove it so it inverts the

00:12:02,060 --> 00:12:10,910
boolean logic because it's more natural

00:12:05,440 --> 00:12:14,320
if you look in the I think in next

00:12:10,910 --> 00:12:17,740
packages oh you're not gonna see it here

00:12:14,320 --> 00:12:21,290
okay just trust me but the clean source

00:12:17,740 --> 00:12:24,310
function is actually doing exactly that

00:12:21,290 --> 00:12:28,190
for lots of conditions and then adding

00:12:24,310 --> 00:12:31,690
notes in front so I think it's more

00:12:28,190 --> 00:12:34,190
natural to have it this way and then I

00:12:31,690 --> 00:12:36,620
have a second function that allows you

00:12:34,190 --> 00:12:38,390
to compose these filters and that way

00:12:36,620 --> 00:12:40,820
you can take the clean source from next

00:12:38,390 --> 00:12:48,170
packages and then add your own special

00:12:40,820 --> 00:12:50,210
cleaning functions all right so now we

00:12:48,170 --> 00:12:54,080
have

00:12:50,210 --> 00:12:55,640
we have packages and there's a last

00:12:54,080 --> 00:13:00,170
thing we need to do to make it really

00:12:55,640 --> 00:13:01,400
nice and it's painting next packages so

00:13:00,170 --> 00:13:03,980
what's happening right now is you have

00:13:01,400 --> 00:13:07,790
your project with all your derivation

00:13:03,980 --> 00:13:09,410
that are being built but each colleague

00:13:07,790 --> 00:13:13,280
might have might be on a different

00:13:09,410 --> 00:13:17,810
Channel and so they might actually get

00:13:13,280 --> 00:13:19,820
different results which kind of yeah the

00:13:17,810 --> 00:13:22,580
point of Nexus to have reproducible

00:13:19,820 --> 00:13:25,070
builds while one of them actually so I

00:13:22,580 --> 00:13:27,980
went through different different phases

00:13:25,070 --> 00:13:33,140
of how what is the best way to pin next

00:13:27,980 --> 00:13:36,590
packages so the main like the trivial

00:13:33,140 --> 00:13:38,330
version a version 0 is you use the built

00:13:36,590 --> 00:13:41,120
in called fetch tarball and you say

00:13:38,330 --> 00:13:44,930
fetch the next packages from this show

00:13:41,120 --> 00:13:46,550
on github and that's it and you get back

00:13:44,930 --> 00:13:50,780
the source code and then you can import

00:13:46,550 --> 00:13:52,940
it and it works pretty well I mean the

00:13:50,780 --> 00:13:55,940
only issues that every time you invoke

00:13:52,940 --> 00:14:00,350
next build or next shell is going to try

00:13:55,940 --> 00:14:04,480
to read unloaded and one solution is to

00:14:00,350 --> 00:14:07,310
upgrade to next 1.12 and then add the

00:14:04,480 --> 00:14:09,920
sha-256 but then your colleagues who are

00:14:07,310 --> 00:14:12,440
still on next 1.11 it's not going to

00:14:09,920 --> 00:14:17,480
work anymore because the Shia attribute

00:14:12,440 --> 00:14:19,040
is not supported in that case so then

00:14:17,480 --> 00:14:22,970
the next idea was okay

00:14:19,040 --> 00:14:25,970
maybe we can import that you know fetch

00:14:22,970 --> 00:14:29,630
from github that we love and use and all

00:14:25,970 --> 00:14:32,900
over next packages and just fetch the

00:14:29,630 --> 00:14:35,630
source like that and it works also

00:14:32,900 --> 00:14:38,000
really well until you set the next path

00:14:35,630 --> 00:14:40,190
through this file because then you're

00:14:38,000 --> 00:14:46,370
importing next packages from itself and

00:14:40,190 --> 00:14:49,340
you have an infinite loop ok so then the

00:14:46,370 --> 00:14:51,140
next idea was so this one you're not

00:14:49,340 --> 00:14:56,210
really supposed to read it but it's a

00:14:51,140 --> 00:14:58,670
bit crazy and is it's been invented by a

00:14:56,210 --> 00:15:01,730
guy called dr. which I don't think is

00:14:58,670 --> 00:15:02,840
there today but basically he

00:15:01,730 --> 00:15:08,330
reimplemented

00:15:02,840 --> 00:15:11,660
fetcher I'll fetch star ball by in this

00:15:08,330 --> 00:15:13,670
line he finds the config of NYX and it's

00:15:11,660 --> 00:15:18,290
a secret file well I didn't know it

00:15:13,670 --> 00:15:20,660
exists and it contains the reference to

00:15:18,290 --> 00:15:24,530
all of the built-ins that are used to

00:15:20,660 --> 00:15:28,340
build the next utility and so you can

00:15:24,530 --> 00:15:31,100
actually without importing NYX packages

00:15:28,340 --> 00:15:34,250
already have access to gzip and tar ball

00:15:31,100 --> 00:15:39,490
and you wrap this in the derivation and

00:15:34,250 --> 00:15:43,190
you put the sha-256 and you're good

00:15:39,490 --> 00:15:47,090
until you do next build the option

00:15:43,190 --> 00:15:49,280
sandbox true and then because these

00:15:47,090 --> 00:15:51,830
paths are actually they come from the

00:15:49,280 --> 00:15:53,330
next star but there are not their

00:15:51,830 --> 00:15:57,620
strengths and they're not really pass

00:15:53,330 --> 00:16:01,240
and that's breaks the system so I was a

00:15:57,620 --> 00:16:06,080
bit disappointed cuz I really like how

00:16:01,240 --> 00:16:12,170
convoluted and there's a special place

00:16:06,080 --> 00:16:14,210
in my heart for this kind of hacks so in

00:16:12,170 --> 00:16:16,580
the end I think we should just have a

00:16:14,210 --> 00:16:18,440
compatibility layer for vegetable that

00:16:16,580 --> 00:16:18,800
switches on the next version and that's

00:16:18,440 --> 00:16:22,450
it

00:16:18,800 --> 00:16:27,470
that's the best way I found currently

00:16:22,450 --> 00:16:30,200
alright so now we have the source of

00:16:27,470 --> 00:16:32,560
next packages ok offer a question from

00:16:30,200 --> 00:16:32,560
Duman

00:16:34,210 --> 00:16:41,840
alright so domin made it work and it's

00:16:37,040 --> 00:16:43,430
gonna show us clever ok cool so that's

00:16:41,840 --> 00:16:46,900
one of the reason I wanted to give the

00:16:43,430 --> 00:16:46,900
talk is to get this kind of feedback

00:16:47,080 --> 00:16:52,730
okay so one more to this slide basically

00:16:50,450 --> 00:16:56,500
you should really have our data scripts

00:16:52,730 --> 00:16:59,360
because now you're probably tracking

00:16:56,500 --> 00:17:01,520
1709 and you want to get the latest

00:16:59,360 --> 00:17:03,140
security updates and to make it easy you

00:17:01,520 --> 00:17:05,840
need the scripts that you can invoke

00:17:03,140 --> 00:17:08,390
either by hand or by CI but that's

00:17:05,840 --> 00:17:10,280
really the last step that we need to

00:17:08,390 --> 00:17:12,560
standardize then make it easy because

00:17:10,280 --> 00:17:15,350
otherwise all the good work you know

00:17:12,560 --> 00:17:20,419
that's been done by the security people

00:17:15,350 --> 00:17:22,220
is kind of wasted okay so we have the

00:17:20,419 --> 00:17:26,660
source but there is a last step that you

00:17:22,220 --> 00:17:28,730
have to do and is when you import so we

00:17:26,660 --> 00:17:30,740
are familiar with this import brackets

00:17:28,730 --> 00:17:34,309
next packages and then you have empty

00:17:30,740 --> 00:17:36,309
attribute sets and actually you're

00:17:34,309 --> 00:17:39,289
supposed to set some stuff in there

00:17:36,309 --> 00:17:43,429
you're supposed to set the empty config

00:17:39,289 --> 00:17:46,400
and overlays because if you don't do the

00:17:43,429 --> 00:17:47,870
empty config then each user can have its

00:17:46,400 --> 00:17:50,659
own config and then it's not pure

00:17:47,870 --> 00:17:52,640
anymore and the same folder overlays

00:17:50,659 --> 00:17:58,220
plus overlays are cool so you should

00:17:52,640 --> 00:18:04,130
really use them alright so now we have

00:17:58,220 --> 00:18:06,470
our next nexif ID repo each of the

00:18:04,130 --> 00:18:10,010
different component has a default next

00:18:06,470 --> 00:18:12,740
and then in the old packages you kind of

00:18:10,010 --> 00:18:15,440
call packaged into old packages the

00:18:12,740 --> 00:18:18,230
overlay and you call packaged to load of

00:18:15,440 --> 00:18:20,799
these components the default dot next is

00:18:18,230 --> 00:18:23,960
the one that ties everything together

00:18:20,799 --> 00:18:27,200
the next packages SRC is the version

00:18:23,960 --> 00:18:30,320
four and the release that next is just

00:18:27,200 --> 00:18:32,510
gonna react sport everything from

00:18:30,320 --> 00:18:34,820
default annex that you are interested to

00:18:32,510 --> 00:18:37,039
build for your project because default

00:18:34,820 --> 00:18:43,000
done next contains all of next packages

00:18:37,039 --> 00:18:46,460
plus your project packages and that's it

00:18:43,000 --> 00:18:49,570
alright this is just a like nifty trick

00:18:46,460 --> 00:18:51,890
I found out just like last week is

00:18:49,570 --> 00:18:55,460
usually you have a scripts folder where

00:18:51,890 --> 00:18:59,059
you have tons of scripts right specific

00:18:55,460 --> 00:19:02,090
to the project and one of the thing that

00:18:59,059 --> 00:19:04,730
you can do is if you set the - I next

00:19:02,090 --> 00:19:08,450
packages equal next and next is the

00:19:04,730 --> 00:19:11,210
folder that we have here right and so

00:19:08,450 --> 00:19:13,640
now you're reusing all of the same setup

00:19:11,210 --> 00:19:16,580
that you were using before and you're

00:19:13,640 --> 00:19:20,990
nuts again diverging with the packages

00:19:16,580 --> 00:19:22,760
that you're using only downside is you

00:19:20,990 --> 00:19:27,410
have to invoke your scripts from the

00:19:22,760 --> 00:19:34,310
roots of your repo alright so

00:19:27,410 --> 00:19:36,380
last step set up the CI so the general

00:19:34,310 --> 00:19:39,460
approach is just going to be next build

00:19:36,380 --> 00:19:43,160
the next release that next file and

00:19:39,460 --> 00:19:45,740
that's it and I think most of the logic

00:19:43,160 --> 00:19:48,380
should go into the next files and then

00:19:45,740 --> 00:19:50,990
maybe later on you're gonna add some

00:19:48,380 --> 00:19:53,900
impure stuff for example pushing darker

00:19:50,990 --> 00:19:58,280
packages or talking to Cuban ETS or

00:19:53,900 --> 00:20:02,300
something new that's so the other thing

00:19:58,280 --> 00:20:04,180
is you're coming at the existing place

00:20:02,300 --> 00:20:06,830
where they already have the CR in place

00:20:04,180 --> 00:20:10,370
so one thing you're gonna see from this

00:20:06,830 --> 00:20:14,210
list is Hager is missing and I actually

00:20:10,370 --> 00:20:15,860
tried all of these sea ice and basically

00:20:14,210 --> 00:20:18,500
I just want to go through quickly

00:20:15,860 --> 00:20:24,080
through all of them and show you the

00:20:18,500 --> 00:20:27,350
advantages and disadvantages so Travis

00:20:24,080 --> 00:20:32,390
Travis is the first shot at Todd mixed

00:20:27,350 --> 00:20:34,190
reports after Hydra and is is doing a

00:20:32,390 --> 00:20:37,910
good job and it's probably working

00:20:34,190 --> 00:20:40,460
better on smaller projects but it's bit

00:20:37,910 --> 00:20:45,070
hard to debug and it's sometimes it's a

00:20:40,460 --> 00:20:49,700
bit slow and but it works alright and

00:20:45,070 --> 00:20:52,160
then there's a circular sea ice 2.0 it's

00:20:49,700 --> 00:20:55,130
darker based and you can restart your

00:20:52,160 --> 00:20:57,260
builds and you can get SSH into the

00:20:55,130 --> 00:21:00,350
container so it's kind of handy

00:20:57,260 --> 00:21:02,680
sometimes to debug things the the only

00:21:00,350 --> 00:21:05,630
issues that they have an immutable cache

00:21:02,680 --> 00:21:08,510
so if you want to store the next door

00:21:05,630 --> 00:21:11,660
for the next build the problem is you

00:21:08,510 --> 00:21:13,970
need to give the unique hash and the

00:21:11,660 --> 00:21:16,910
unique hash is gonna be I don't know

00:21:13,970 --> 00:21:18,880
something but if it changes then you

00:21:16,910 --> 00:21:21,860
have to redownload all your next store

00:21:18,880 --> 00:21:23,990
so it's not I don't know I'm a bit

00:21:21,860 --> 00:21:26,060
annoyed by this actually I don't know if

00:21:23,990 --> 00:21:29,240
there's a better way to do it but

00:21:26,060 --> 00:21:32,060
basically it's kind of they're working

00:21:29,240 --> 00:21:34,010
one against each other and it's actually

00:21:32,060 --> 00:21:36,860
quite common with the next store and

00:21:34,010 --> 00:21:40,100
other caching system is that if they're

00:21:36,860 --> 00:21:41,149
not perfectly aligned so I would say if

00:21:40,100 --> 00:21:43,399
they don't have the exact

00:21:41,149 --> 00:21:46,009
some notion of hashing I would say I'm

00:21:43,399 --> 00:21:48,440
not really sure but it makes things a

00:21:46,009 --> 00:21:52,070
bit difficult in the Travis case I think

00:21:48,440 --> 00:21:54,830
they just load latest stuff from s3 and

00:21:52,070 --> 00:21:57,679
then read um bits back and so most of

00:21:54,830 --> 00:21:59,539
the time it works alright so it's

00:21:57,679 --> 00:22:06,739
actually an advantage for us that they

00:21:59,539 --> 00:22:09,409
are not too pure alright so github is

00:22:06,739 --> 00:22:13,099
also really cool it's a agent-based so

00:22:09,409 --> 00:22:16,700
you can run the agent on Nexus and then

00:22:13,099 --> 00:22:18,919
have get lab managers schedules all of

00:22:16,700 --> 00:22:22,999
the jobs and you have good control on

00:22:18,919 --> 00:22:26,869
the targets and it's already in the next

00:22:22,999 --> 00:22:29,089
size next packages the only downside is

00:22:26,869 --> 00:22:31,989
that you need to move all your source

00:22:29,089 --> 00:22:35,599
code to github so if you have already

00:22:31,989 --> 00:22:40,119
your own work flow around github or some

00:22:35,599 --> 00:22:43,129
other source control it's not very handy

00:22:40,119 --> 00:22:45,639
but overall the gate lab on on his own

00:22:43,129 --> 00:22:48,830
is also pretty good

00:22:45,639 --> 00:22:53,119
then there's Jenkins I don't know if I

00:22:48,830 --> 00:22:55,789
need to talk about it but it's actually

00:22:53,119 --> 00:22:56,450
they're making a lot of efforts to make

00:22:55,789 --> 00:23:00,769
it work

00:22:56,450 --> 00:23:02,659
but I tried even last month I was still

00:23:00,769 --> 00:23:06,320
trying to make it work and I spend a lot

00:23:02,659 --> 00:23:08,119
of time just fixing things so maybe it

00:23:06,320 --> 00:23:12,769
was because I tried to make it work on

00:23:08,119 --> 00:23:15,950
Cuban --'tis I don't know ok so last one

00:23:12,769 --> 00:23:20,119
is build kites and it's a commercial

00:23:15,950 --> 00:23:22,129
thing but the agent is open-source and

00:23:20,119 --> 00:23:25,940
it's already in the next packages and

00:23:22,129 --> 00:23:29,210
then they control the dashboard and the

00:23:25,940 --> 00:23:31,909
job scheduler and it seems to work

00:23:29,210 --> 00:23:35,179
pretty well it's configured as well with

00:23:31,909 --> 00:23:38,629
the pipeline that you can configure it

00:23:35,179 --> 00:23:42,589
with a yeoman file but you can also

00:23:38,629 --> 00:23:45,440
dynamically generate Yaman file so the

00:23:42,589 --> 00:23:47,719
next thing I want to explore is see how

00:23:45,440 --> 00:23:50,869
I can split up the bills by invoking

00:23:47,719 --> 00:23:53,269
next build finding all of the outputs

00:23:50,869 --> 00:23:54,800
that's all gonna be built and then maybe

00:23:53,269 --> 00:23:57,350
generate a youngin

00:23:54,800 --> 00:23:58,510
that and then like she'll vote the bills

00:23:57,350 --> 00:24:01,160
I don't know

00:23:58,510 --> 00:24:05,750
so if you have any ideas let me know

00:24:01,160 --> 00:24:09,830
after the talk all right so we have a CI

00:24:05,750 --> 00:24:12,770
now or one of these but don't forget

00:24:09,830 --> 00:24:15,320
about the binary cash especially if

00:24:12,770 --> 00:24:16,700
you're doing high-skilled evidence it

00:24:15,320 --> 00:24:19,310
would be really nice if you could take

00:24:16,700 --> 00:24:21,860
most of the time the bills from the

00:24:19,310 --> 00:24:25,430
binary cash and you would just save a

00:24:21,860 --> 00:24:27,470
lot of time also in some of these cases

00:24:25,430 --> 00:24:30,380
when you're scaling the number of nodes

00:24:27,470 --> 00:24:32,750
is really nice to be able to download

00:24:30,380 --> 00:24:34,400
from the binary cash because otherwise

00:24:32,750 --> 00:24:36,380
you're just gonna have one node that's

00:24:34,400 --> 00:24:41,530
rebuilding from scratch and it's takes

00:24:36,380 --> 00:24:47,200
two hours so to do that what you do is

00:24:41,530 --> 00:24:50,050
so I didn't know about next 1.12

00:24:47,200 --> 00:24:53,690
features which looks really really cool

00:24:50,050 --> 00:24:58,220
but so I had to build my own little

00:24:53,690 --> 00:25:02,930
wrapper that's basically invokes next

00:24:58,220 --> 00:25:07,280
push and then use in this case it's

00:25:02,930 --> 00:25:08,150
cents to Google Cloud storage and it

00:25:07,280 --> 00:25:10,460
works pretty well

00:25:08,150 --> 00:25:14,600
the only issues when the nar files are

00:25:10,460 --> 00:25:16,160
big files like darker containers or

00:25:14,600 --> 00:25:20,390
something like that it can take a lot of

00:25:16,160 --> 00:25:23,720
time to build so I don't know if this is

00:25:20,390 --> 00:25:24,710
a optimization problem or something but

00:25:23,720 --> 00:25:31,630
it would be nice

00:25:24,710 --> 00:25:34,160
sorry don't push the current is yes and

00:25:31,630 --> 00:25:36,820
but that's not enough so that's the

00:25:34,160 --> 00:25:39,770
first side and then the second side is

00:25:36,820 --> 00:25:42,050
setting up the clients and why now you

00:25:39,770 --> 00:25:47,870
have to change the system config to

00:25:42,050 --> 00:25:50,540
allow your to allow to fetch from the

00:25:47,870 --> 00:25:52,970
binary cash and unless you're in a

00:25:50,540 --> 00:25:55,700
single user mode I think so it's

00:25:52,970 --> 00:25:57,560
actually difference if you're in single

00:25:55,700 --> 00:25:59,960
or multi user mode so now you have to

00:25:57,560 --> 00:26:03,020
ask your colleagues you know are you

00:25:59,960 --> 00:26:04,250
using the single user or something so it

00:26:03,020 --> 00:26:07,640
makes things a little bit complicated

00:26:04,250 --> 00:26:08,509
but as we learned recently with next

00:26:07,640 --> 00:26:13,129
1.12

00:26:08,509 --> 00:26:22,309
gonna be served all right so maybe last

00:26:13,129 --> 00:26:26,329
bit how am I on time all right I feel

00:26:22,309 --> 00:26:29,149
like I spoke already enough but all

00:26:26,329 --> 00:26:30,709
right so darker content I think one of

00:26:29,149 --> 00:26:32,809
the cool thing about Nexus the

00:26:30,709 --> 00:26:35,269
composability which has mentioned before

00:26:32,809 --> 00:26:38,570
and one of the thing you can do is take

00:26:35,269 --> 00:26:41,539
your package so in that sense the in

00:26:38,570 --> 00:26:43,549
that one is the content and just put it

00:26:41,539 --> 00:26:46,699
into this other derivation that's gonna

00:26:43,549 --> 00:26:49,399
produce a darker container and your

00:26:46,699 --> 00:26:51,529
darker container is gonna contain just a

00:26:49,399 --> 00:26:53,899
minimal amount of stuff that you need to

00:26:51,529 --> 00:26:57,219
ship into production just the runtime

00:26:53,899 --> 00:27:03,019
dependencies so in that case you have

00:26:57,219 --> 00:27:05,479
the the the web the index dot HTML

00:27:03,019 --> 00:27:09,889
some JavaScript and then caddy which is

00:27:05,479 --> 00:27:13,639
a web server alright and that's a nice

00:27:09,889 --> 00:27:16,429
hug but I'm running out of time so this

00:27:13,639 --> 00:27:18,379
is how you can rebuild next you can

00:27:16,429 --> 00:27:23,989
reduce the next rest module system to

00:27:18,379 --> 00:27:27,949
build a container and that's just

00:27:23,989 --> 00:27:30,579
pushing the containers so that's it we

00:27:27,949 --> 00:27:33,619
started with the next shell then we did

00:27:30,579 --> 00:27:39,519
the the revisions and then we set up the

00:27:33,619 --> 00:27:39,519
CI and now we're very good thank you

00:27:44,080 --> 00:27:53,300
[Applause]

00:27:47,890 --> 00:27:59,810
is there time for questions yeah all

00:27:53,300 --> 00:28:02,360
right yeah yes a small question about

00:27:59,810 --> 00:28:04,730
this filter source example and the node

00:28:02,360 --> 00:28:07,460
modules folder did you never run into

00:28:04,730 --> 00:28:10,430
any problems with that because for

00:28:07,460 --> 00:28:13,720
example some packages may also declare

00:28:10,430 --> 00:28:16,550
bundled node modules and they may use

00:28:13,720 --> 00:28:19,520
slightly different packages than the

00:28:16,550 --> 00:28:22,520
upstream versions and I know if you've

00:28:19,520 --> 00:28:24,890
ever run into trouble with that not

00:28:22,520 --> 00:28:27,080
every corner ok because I've seen a

00:28:24,890 --> 00:28:28,880
couple of packages that that really

00:28:27,080 --> 00:28:30,950
required the bundled node modules

00:28:28,880 --> 00:28:33,110
folders to work all right

00:28:30,950 --> 00:28:35,690
so yeah you may want to make that

00:28:33,110 --> 00:28:38,210
optional because in general it's a good

00:28:35,690 --> 00:28:40,400
thing that you clear you clear out the

00:28:38,210 --> 00:28:42,320
mess but sometimes you actually need the

00:28:40,400 --> 00:28:53,450
the node modules folder that is in your

00:28:42,320 --> 00:28:56,390
project okay thanks Krishna Hey

00:28:53,450 --> 00:28:58,250
so I can't quite believe that I'm about

00:28:56,390 --> 00:29:03,440
to defend Jenkins and I feel dirty

00:28:58,250 --> 00:29:05,090
already for for for doing that we we I'm

00:29:03,440 --> 00:29:07,640
not a fan of trinkets but we do use it

00:29:05,090 --> 00:29:10,970
at RNA check because we have an exposed

00:29:07,640 --> 00:29:12,830
which aren't which aren't fewer and it's

00:29:10,970 --> 00:29:15,860
actually working pretty well for us so

00:29:12,830 --> 00:29:19,190
we've got everything like is this is

00:29:15,860 --> 00:29:21,190
defined in a declarative way and we have

00:29:19,190 --> 00:29:23,450
all the packet all the plugins pinned

00:29:21,190 --> 00:29:26,120
and it's working it's working really

00:29:23,450 --> 00:29:29,540
well like I'm not loving Jenkins but

00:29:26,120 --> 00:29:32,240
it's pretty easy to set up and to use or

00:29:29,540 --> 00:29:35,660
for Nick stuff so ok that's my

00:29:32,240 --> 00:29:37,490
experience so I think I agree with so

00:29:35,660 --> 00:29:39,320
what Jenkins did is they introduced

00:29:37,490 --> 00:29:41,690
Jenkins file that you can add to your

00:29:39,320 --> 00:29:44,510
repo and this part is very declarative

00:29:41,690 --> 00:29:47,540
now and they also did a lot of work on

00:29:44,510 --> 00:29:49,430
cleaning up so the default set up now is

00:29:47,540 --> 00:29:51,710
gonna integrate with github more

00:29:49,430 --> 00:29:54,770
properly because there was lots of work

00:29:51,710 --> 00:29:57,320
to do for example just make sure that it

00:29:54,770 --> 00:29:57,840
pushed build States to the github PR

00:29:57,320 --> 00:30:01,409
stuff

00:29:57,840 --> 00:30:04,080
that so that's much better but you still

00:30:01,409 --> 00:30:07,020
have a snowflake problem where the

00:30:04,080 --> 00:30:11,250
config on its own of Jenkins is not

00:30:07,020 --> 00:30:14,330
declarative okay maybe it's declarative

00:30:11,250 --> 00:30:14,330
all right

00:30:23,900 --> 00:30:32,490
so have you had to think much about

00:30:27,530 --> 00:30:35,100
distribution of channel and what I mean

00:30:32,490 --> 00:30:37,160
by that is those source references with

00:30:35,100 --> 00:30:39,870
pathway you know dot slash Pat doc

00:30:37,160 --> 00:30:42,540
become very painful at least in my

00:30:39,870 --> 00:30:44,040
experience in the similar problem when

00:30:42,540 --> 00:30:45,750
you when you actually want to distribute

00:30:44,040 --> 00:30:49,860
your software to other people using NYX

00:30:45,750 --> 00:30:51,090
and I was wondering if you've

00:30:49,860 --> 00:30:53,760
encountered that or you had any thoughts

00:30:51,090 --> 00:30:56,220
of that or you want me to clarify and

00:30:53,760 --> 00:30:58,260
actually explain what I mean by that so

00:30:56,220 --> 00:31:01,830
in general what I have is a

00:30:58,260 --> 00:31:04,500
self-contained repo where I don't the

00:31:01,830 --> 00:31:06,870
the artifacts I'm pushing out our darker

00:31:04,500 --> 00:31:21,690
containers and things like that so maybe

00:31:06,870 --> 00:31:23,900
I'm not in contrary and there's a last

00:31:21,690 --> 00:31:23,900
question

00:31:32,060 --> 00:31:42,900
yeah sure I'm gonna publish the slides

00:31:34,830 --> 00:31:46,830
online all right so it generates the

00:31:42,900 --> 00:31:49,860
next file system but you don't have

00:31:46,830 --> 00:31:51,810
system D in the container so this thing

00:31:49,860 --> 00:32:02,830
it would be nice if we could solve it

00:31:51,810 --> 00:32:06,950
actually and angry yep thank you

00:32:02,830 --> 00:32:06,950

YouTube URL: https://www.youtube.com/watch?v=ycjlpg296iI


