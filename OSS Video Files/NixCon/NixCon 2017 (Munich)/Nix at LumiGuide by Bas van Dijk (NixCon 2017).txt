Title: Nix at LumiGuide by Bas van Dijk (NixCon 2017)
Publication date: 2017-10-31
Playlist: NixCon 2017 (Munich)
Description: 
	LumiGuide develops and maintains bicycle and car parking guidance systems that are deployed in various cities in the Netherlands and abroad. To run this system a number of different machines are needed: image analysis servers deployed locally in facilities, central web-servers and support servers in data centers, embedded machines like Raspberry Pi's and ARM FPGA's to power our various displays in facilities and on the streets. Finally our engineers have workstation to write our software. All these machines need to be developed, tested, provisioned, configured, installed and rolled back (in case we make a mistake). Since we don't have a dedicated sys-admin we rely on automation to do most of these tasks. We use the Nix ecosystem of tools to help us with that. I will talk about how we've structured our mono-repository, how we make sure each engineer uses the exact same version of nixpkgs and the exact same NixOS configuration, how we override our Haskell packages, how we use Continuous Integration wit hydra and how we deploy our machines using nixops. Finally I will also talk about the things that we don't like about the Nix ecosystem.
Captions: 
	00:00:01,970 --> 00:00:07,020
our next speaker is bus CTO of luma

00:00:06,359 --> 00:00:09,059
guide

00:00:07,020 --> 00:00:11,429
he's a functional programming enthusiast

00:00:09,059 --> 00:00:14,130
and has been a Haskell programmer for

00:00:11,429 --> 00:00:24,570
fifteen years three years ago he decided

00:00:14,130 --> 00:00:26,220
to try Nick's at luma Guide I love stuck

00:00:24,570 --> 00:00:32,640
at next home and this is actually my

00:00:26,220 --> 00:00:35,460
first I really liked it so yeah next

00:00:32,640 --> 00:00:37,200
halloumi guys so we are a very small

00:00:35,460 --> 00:00:39,629
company we're about 10 people we have

00:00:37,200 --> 00:00:42,809
three full-time software engineers

00:00:39,629 --> 00:00:46,320
including myself and my colleague

00:00:42,809 --> 00:00:48,989
actually Falco is sitting in the back he

00:00:46,320 --> 00:00:53,129
is also a next contributor at our

00:00:48,989 --> 00:00:55,199
company basically to set the stage I'd

00:00:53,129 --> 00:00:58,530
like to begin with a small of a short

00:00:55,199 --> 00:01:01,199
video about what we do a little guide it

00:00:58,530 --> 00:01:03,660
was produced by the city of Utrecht

00:01:01,199 --> 00:01:05,180
which is one of our clients so let's see

00:01:03,660 --> 00:01:46,739
if if the sound is working

00:01:05,180 --> 00:01:46,739
[Music]

00:01:49,910 --> 00:02:10,000
[Music]

00:02:07,630 --> 00:02:15,040
[Applause]

00:02:10,000 --> 00:02:19,220
[Music]

00:02:15,040 --> 00:02:30,669
[Applause]

00:02:19,220 --> 00:02:30,669
[Music]

00:02:33,620 --> 00:02:38,660
and you can see kind of what the problem

00:02:36,650 --> 00:02:40,490
that we have in the Netherlands if this

00:02:38,660 --> 00:02:42,680
facility is like nearly fool like 80

00:02:40,490 --> 00:02:44,540
percent fool then if you come here then

00:02:42,680 --> 00:02:46,580
yeah you need really need some kind of

00:02:44,540 --> 00:02:48,230
guidance system that tells you where

00:02:46,580 --> 00:02:50,120
there's a free place to park your

00:02:48,230 --> 00:02:52,340
bicycle and what you can see there our

00:02:50,120 --> 00:02:54,350
sensors are mounted to the ceiling

00:02:52,340 --> 00:02:59,510
they're basically cameras and they see

00:02:54,350 --> 00:03:02,600
where the free places are so how does

00:02:59,510 --> 00:03:04,220
our system work and so I have a kind of

00:03:02,600 --> 00:03:08,570
a schematic here what you see at the top

00:03:04,220 --> 00:03:10,940
are the facilities in the facilities we

00:03:08,570 --> 00:03:13,580
have this sense of system cameras they

00:03:10,940 --> 00:03:15,320
are connected to a facility server so a

00:03:13,580 --> 00:03:18,770
local computer that does all the

00:03:15,320 --> 00:03:22,150
computer vision work and then the server

00:03:18,770 --> 00:03:24,769
uploads is its measurements to a central

00:03:22,150 --> 00:03:27,470
system which is hosted at a professional

00:03:24,769 --> 00:03:29,690
data center somewhere on the internet

00:03:27,470 --> 00:03:34,640
actually it's hosted at hats nerve I

00:03:29,690 --> 00:03:37,160
think not too far from Munich you yes

00:03:34,640 --> 00:03:39,920
and this central system those are a few

00:03:37,160 --> 00:03:42,200
things so it provides it serves an API

00:03:39,920 --> 00:03:44,060
that are that turret that is used by

00:03:42,200 --> 00:03:47,810
third parties and also by our own

00:03:44,060 --> 00:03:49,670
smartphone apps and then you see on the

00:03:47,810 --> 00:03:52,430
right it also serves a web-based

00:03:49,670 --> 00:03:55,610
management information system that our

00:03:52,430 --> 00:03:58,250
clients use to see you know how is my

00:03:55,610 --> 00:04:00,650
facility being used and yeah you can see

00:03:58,250 --> 00:04:03,890
all kinds of statistics and you can see

00:04:00,650 --> 00:04:06,290
like a live map of the facility and then

00:04:03,890 --> 00:04:09,350
finally the most important thing is that

00:04:06,290 --> 00:04:13,430
this system drives the this place that

00:04:09,350 --> 00:04:19,070
that are mounted in facilities and our

00:04:13,430 --> 00:04:22,310
almost streets in Utrecht so how does

00:04:19,070 --> 00:04:24,440
next fit in into this picture well all

00:04:22,310 --> 00:04:26,419
the computers all the machines in the in

00:04:24,440 --> 00:04:28,250
this system are running next to us so

00:04:26,419 --> 00:04:30,550
first of all the facilities are running

00:04:28,250 --> 00:04:31,940
next to us our central server is running

00:04:30,550 --> 00:04:33,260
next to us

00:04:31,940 --> 00:04:35,690
and this is not just a single server

00:04:33,260 --> 00:04:37,790
it's like a cluster and/or a bunch of

00:04:35,690 --> 00:04:40,820
machines that do kind of support tasks

00:04:37,790 --> 00:04:43,520
we have our Hydra server also there and

00:04:40,820 --> 00:04:47,720
then finally the displace themselves are

00:04:43,520 --> 00:04:50,900
also running Nix OS so these these are

00:04:47,720 --> 00:04:52,700
actually so the first generation were

00:04:50,900 --> 00:04:56,300
raspberry PI's

00:04:52,700 --> 00:04:58,550
so it's an aram machine the the the next

00:04:56,300 --> 00:05:03,200
generation of our jet this place is

00:04:58,550 --> 00:05:05,780
running house of gold's fpga sock so

00:05:03,200 --> 00:05:09,170
it's kind of like an a ram device with

00:05:05,780 --> 00:05:11,750
an FPGA attached to it and then the FPGA

00:05:09,170 --> 00:05:18,710
is driving the this place and then the a

00:05:11,750 --> 00:05:21,280
ram chip is running next to us oh yes

00:05:18,710 --> 00:05:25,130
and the last but not least our

00:05:21,280 --> 00:05:26,870
workstation so the laptops that that we

00:05:25,130 --> 00:05:29,980
use for developments are also running

00:05:26,870 --> 00:05:32,660
next to us actually this is my

00:05:29,980 --> 00:05:36,770
workstation it's currently it's also a

00:05:32,660 --> 00:05:38,930
Mac so it's running OSX but I have Nexus

00:05:36,770 --> 00:05:41,470
running natively on this as well and

00:05:38,930 --> 00:05:46,490
then I have also like a VirtualBox

00:05:41,470 --> 00:05:49,669
running next to us last week I switched

00:05:46,490 --> 00:05:51,980
to 1709 yay

00:05:49,669 --> 00:05:54,680
it took me about a month to actually

00:05:51,980 --> 00:05:56,390
upgrade also like yeah not nothing like

00:05:54,680 --> 00:05:58,580
I wasn't like working for a month but

00:05:56,390 --> 00:06:00,350
there are a few broken packages that I

00:05:58,580 --> 00:06:07,660
had to wait before they were merged with

00:06:00,350 --> 00:06:09,919
I was took her quite some time right so

00:06:07,660 --> 00:06:12,620
yeah I've been using you next now for

00:06:09,919 --> 00:06:15,350
the last three years but when I started

00:06:12,620 --> 00:06:18,620
I like I really had no idea how to kind

00:06:15,350 --> 00:06:22,280
of structure our repository and to kind

00:06:18,620 --> 00:06:24,980
of mix if I it so I think what would

00:06:22,280 --> 00:06:27,710
have helped me back then was if I had

00:06:24,980 --> 00:06:30,860
some kind of templates that I could use

00:06:27,710 --> 00:06:33,350
and I think Doman also mentioned that in

00:06:30,860 --> 00:06:35,890
his talk that we need to have some kind

00:06:33,350 --> 00:06:39,430
of example that you can start from so

00:06:35,890 --> 00:06:42,050
three weeks ago Peter Simonson I

00:06:39,430 --> 00:06:43,999
organized the workshop in London at the

00:06:42,050 --> 00:06:46,909
high school exchange where

00:06:43,999 --> 00:06:49,009
we teach people next and for that I

00:06:46,909 --> 00:06:51,919
prepared this next to do example and I

00:06:49,009 --> 00:06:55,789
think Jonas also created that next to do

00:06:51,919 --> 00:06:58,610
or a kind of a to do NPC example so we

00:06:55,789 --> 00:07:01,579
kind of maybe we should team up to make

00:06:58,610 --> 00:07:04,309
it better but yeah this is basically the

00:07:01,579 --> 00:07:07,119
template that I would like to have three

00:07:04,309 --> 00:07:11,269
years ago and if this is actually a

00:07:07,119 --> 00:07:13,009
running system it's just it's just an

00:07:11,269 --> 00:07:15,439
example that you can have something to

00:07:13,009 --> 00:07:19,099
play with just to show that it actually

00:07:15,439 --> 00:07:22,279
works I have it here yeah so you can add

00:07:19,099 --> 00:07:25,489
to-do items and then you can you know do

00:07:22,279 --> 00:07:27,529
this there's actually a high school

00:07:25,489 --> 00:07:28,879
front end which is compiled to

00:07:27,529 --> 00:07:30,979
JavaScript and it has a high school

00:07:28,879 --> 00:07:33,860
back-end with a database that are

00:07:30,979 --> 00:07:36,349
storing these to-do items but the point

00:07:33,860 --> 00:07:39,679
of this is that yeah that you have

00:07:36,349 --> 00:07:41,509
something real to play with and then you

00:07:39,679 --> 00:07:46,189
can just copy this and then adapt it to

00:07:41,509 --> 00:07:48,559
your own company yeah if you're

00:07:46,189 --> 00:07:54,079
interested check it out you can clone it

00:07:48,559 --> 00:07:57,319
on your URL just to go back to to our

00:07:54,079 --> 00:07:59,029
workstations we are a small company so

00:07:57,319 --> 00:08:00,469
we have kind of an extreme situation

00:07:59,029 --> 00:08:04,839
that everybody is running actually the

00:08:00,469 --> 00:08:07,309
next OS and we go even further our

00:08:04,839 --> 00:08:10,429
registration configurations are actually

00:08:07,309 --> 00:08:12,169
stored in our company repository so

00:08:10,429 --> 00:08:14,329
everybody all engineers have their

00:08:12,169 --> 00:08:17,569
configuration in the repository and the

00:08:14,329 --> 00:08:20,809
way we do that is we puts this next to

00:08:17,569 --> 00:08:23,509
us config attributes in the next part

00:08:20,809 --> 00:08:26,360
and then when you do an X well next to

00:08:23,509 --> 00:08:28,789
us rebuild switch next to us we'll take

00:08:26,360 --> 00:08:31,489
this configuration to be your system

00:08:28,789 --> 00:08:34,129
configuration and this is a actually a

00:08:31,489 --> 00:08:38,029
link that is put inside our repository

00:08:34,129 --> 00:08:40,849
and this actually points to the actual

00:08:38,029 --> 00:08:42,860
file of an engineer which is committed

00:08:40,849 --> 00:08:48,589
in the repository so in this case it

00:08:42,860 --> 00:08:51,410
points to my my VirtualBox configuration

00:08:48,589 --> 00:08:53,750
which is running this system here and

00:08:51,410 --> 00:08:56,559
then if you look in that file all

00:08:53,750 --> 00:08:57,980
engineers they have like their own

00:08:56,559 --> 00:08:59,750
customizations

00:08:57,980 --> 00:09:03,020
but what all of them have in common is

00:08:59,750 --> 00:09:06,710
that they import this base layer and

00:09:03,020 --> 00:09:09,830
that's this base layer yeah

00:09:06,710 --> 00:09:12,740
configure some shared settings like it

00:09:09,830 --> 00:09:14,030
computer our own binary cash so that

00:09:12,740 --> 00:09:17,990
people don't have to set it up

00:09:14,030 --> 00:09:27,740
themselves and a whole order all over a

00:09:17,990 --> 00:09:29,660
bunch of things yeah the Jonas & Dolman

00:09:27,740 --> 00:09:32,140
both talked about pinning next packages

00:09:29,660 --> 00:09:34,880
I'm not going to tell that much about it

00:09:32,140 --> 00:09:37,430
but yeah it's clearly important you want

00:09:34,880 --> 00:09:40,070
to make sure all engineers were in the

00:09:37,430 --> 00:09:42,560
same version of next packages we can

00:09:40,070 --> 00:09:46,130
diffuse the currently old approach where

00:09:42,560 --> 00:09:50,120
we call the fetch from github function

00:09:46,130 --> 00:09:52,400
and you just pass a revision which is

00:09:50,120 --> 00:09:55,280
actually coming from this JSON file

00:09:52,400 --> 00:09:59,780
which you can get using an extra fetch

00:09:55,280 --> 00:10:03,200
get yeah and we saw the problems with

00:09:59,780 --> 00:10:06,830
that this this actually depends on this

00:10:03,200 --> 00:10:08,510
next packages that that expected is in

00:10:06,830 --> 00:10:11,360
your path and as of course kind of

00:10:08,510 --> 00:10:13,460
impure but this works for us actually I

00:10:11,360 --> 00:10:17,540
do intend to switch to this new approach

00:10:13,460 --> 00:10:21,320
that Gabriel wrote in this in this pool

00:10:17,540 --> 00:10:24,320
request and of course when we go to next

00:10:21,320 --> 00:10:26,570
112 we will can do this nice thing and

00:10:24,320 --> 00:10:31,120
then you can just skip the whole whole

00:10:26,570 --> 00:10:34,250
fetch from yeah you can it's much easier

00:10:31,120 --> 00:10:37,460
one thing I do like to say about this

00:10:34,250 --> 00:10:39,520
approach is what we actually do as maybe

00:10:37,460 --> 00:10:41,960
you'll find this out yourself but if you

00:10:39,520 --> 00:10:45,650
depend on next packages you often want

00:10:41,960 --> 00:10:47,990
to the often maybe have some pull

00:10:45,650 --> 00:10:49,910
request open with some fixtures fixes

00:10:47,990 --> 00:10:50,990
too so next class module and you

00:10:49,910 --> 00:10:53,990
actually want to use that at your

00:10:50,990 --> 00:10:55,820
company but it's not yet merged in next

00:10:53,990 --> 00:10:57,800
packages so what you could do is you

00:10:55,820 --> 00:11:01,250
could you can maintain your own branch

00:10:57,800 --> 00:11:03,410
of next packages and rebase all your

00:11:01,250 --> 00:11:05,240
pool requests on a branch and then put

00:11:03,410 --> 00:11:07,700
that here after in this revision and

00:11:05,240 --> 00:11:09,260
then that will work but it's kind of

00:11:07,700 --> 00:11:11,900
cumbersome to kind of keep maintaining

00:11:09,260 --> 00:11:14,180
this branch so what we did is we

00:11:11,900 --> 00:11:16,010
provide actually a list of patches so if

00:11:14,180 --> 00:11:19,280
I scroll down a bit you have these

00:11:16,010 --> 00:11:24,770
patches here we use the fetch patch

00:11:19,280 --> 00:11:28,270
function and you just pass this URL to a

00:11:24,770 --> 00:11:31,130
gets hope to a git commit and if you

00:11:28,270 --> 00:11:34,130
post fix it with dope patch you actually

00:11:31,130 --> 00:11:36,560
get a patch file and you give it a hash

00:11:34,130 --> 00:11:39,680
and then what we do is we so we take the

00:11:36,560 --> 00:11:41,690
original next packages function and then

00:11:39,680 --> 00:11:44,120
we run all the patches on it we apply

00:11:41,690 --> 00:11:46,460
all the patches and then you get your

00:11:44,120 --> 00:11:48,230
patch version of next packages and I

00:11:46,460 --> 00:11:50,510
have found out I think this is more

00:11:48,230 --> 00:11:54,050
maintainable than maintaining your own

00:11:50,510 --> 00:12:01,730
Fork and just gives an example so this

00:11:54,050 --> 00:12:05,090
is actually oh let's see oh no I

00:12:01,730 --> 00:12:08,930
actually have it here if you look at our

00:12:05,090 --> 00:12:12,620
actual file which we had a before last

00:12:08,930 --> 00:12:14,150
last week because now our patches are

00:12:12,620 --> 00:12:16,340
empty because we switched to the new

00:12:14,150 --> 00:12:18,490
release but this is these are all the

00:12:16,340 --> 00:12:23,420
packages that you actually have in here

00:12:18,490 --> 00:12:25,550
that's quite a lot but yeah I think this

00:12:23,420 --> 00:12:30,440
is a bit more easy easy to maintain than

00:12:25,550 --> 00:12:32,390
a 10 a fork ok so so at a company we

00:12:30,440 --> 00:12:36,380
have basically two people me and Anne so

00:12:32,390 --> 00:12:37,910
who are the kind of Nick's guys but all

00:12:36,380 --> 00:12:39,980
our engineers they don't really care

00:12:37,910 --> 00:12:44,480
about next they just care that it works

00:12:39,980 --> 00:12:47,240
but not really how it works so the very

00:12:44,480 --> 00:12:50,090
first thing I did was I kind of made a

00:12:47,240 --> 00:12:53,300
make file that had all the commands that

00:12:50,090 --> 00:12:55,160
you typically need to do like entering a

00:12:53,300 --> 00:12:57,800
development shell building a package

00:12:55,160 --> 00:13:01,880
deploying a machine using neck soaps but

00:12:57,800 --> 00:13:05,590
then with kind of familiar names and we

00:13:01,880 --> 00:13:08,930
use this for a long time but make files

00:13:05,590 --> 00:13:10,970
they have a bit of a few abstraction

00:13:08,930 --> 00:13:13,220
problems they are quite hard to kind of

00:13:10,970 --> 00:13:15,590
abstract so if you want to like have a

00:13:13,220 --> 00:13:17,270
target for every Haskell package that it

00:13:15,590 --> 00:13:21,290
is possible that's but it's a bit hard

00:13:17,270 --> 00:13:24,440
to do so at some point we decided to go

00:13:21,290 --> 00:13:25,230
to do Haskell - to have try and make

00:13:24,440 --> 00:13:26,970
kind of

00:13:25,230 --> 00:13:29,880
a haskell command that you can invoke

00:13:26,970 --> 00:13:32,700
and then which will do all the things

00:13:29,880 --> 00:13:34,320
that you need to do and a very important

00:13:32,700 --> 00:13:36,510
thing that we had from the make files

00:13:34,320 --> 00:13:38,970
its completion so when you're in your

00:13:36,510 --> 00:13:42,480
your shell you can type make and I for

00:13:38,970 --> 00:13:44,700
example machine dub deploy and it will

00:13:42,480 --> 00:13:46,110
complete that so you don't have to type

00:13:44,700 --> 00:13:48,510
it in all the time and that saves a lot

00:13:46,110 --> 00:13:51,750
of time and we did want to have this in

00:13:48,510 --> 00:13:53,820
our new lumi tool this Haskell tool and

00:13:51,750 --> 00:13:58,380
I'm just going to show quickly how this

00:13:53,820 --> 00:14:00,030
works so I'm in my repository here so by

00:13:58,380 --> 00:14:02,100
the way if I'm just somewhere on my

00:14:00,030 --> 00:14:04,920
faucet I can type in lumi and it will

00:14:02,100 --> 00:14:07,440
jump to my to our repository and then

00:14:04,920 --> 00:14:09,510
for example you can say ok we have the

00:14:07,440 --> 00:14:11,580
machine called zeus and you here you can

00:14:09,510 --> 00:14:15,240
see the completion working and say

00:14:11,580 --> 00:14:19,860
choose for example build and then this

00:14:15,240 --> 00:14:23,610
will invoke next ops and it will start

00:14:19,860 --> 00:14:28,260
building the machine actually this

00:14:23,610 --> 00:14:29,640
script uses the shake build system maybe

00:14:28,260 --> 00:14:32,730
some people will know it it's kind of

00:14:29,640 --> 00:14:35,280
like a make DSL in Haskell and manages

00:14:32,730 --> 00:14:40,320
all your dependencies for you I'll just

00:14:35,280 --> 00:14:42,300
skip this not that important so how does

00:14:40,320 --> 00:14:44,970
it work well lumi is actually not the

00:14:42,300 --> 00:14:48,300
name of this this Haskell package is

00:14:44,970 --> 00:14:50,310
actually installed as a shell alias so

00:14:48,300 --> 00:14:51,120
when we type Lumiere this actual script

00:14:50,310 --> 00:14:55,610
is executed

00:14:51,120 --> 00:14:58,910
Lumi do script and what the script oh I

00:14:55,610 --> 00:14:58,910
told her already

00:15:00,410 --> 00:15:08,010
so what the script will do as you can

00:15:03,090 --> 00:15:11,640
see hit a function next build to build

00:15:08,010 --> 00:15:14,370
this leave me do Haskell package and it

00:15:11,640 --> 00:15:16,860
will install a link to the to this

00:15:14,370 --> 00:15:19,080
package in the end dot slew me do and

00:15:16,860 --> 00:15:22,140
inside our upholstery and then we follow

00:15:19,080 --> 00:15:24,840
that link and yeah basically execute the

00:15:22,140 --> 00:15:27,570
script but if you if you would only do

00:15:24,840 --> 00:15:30,020
this then it would take quite a long

00:15:27,570 --> 00:15:33,240
time because next build is kind of slow

00:15:30,020 --> 00:15:35,760
even if it's already cached it still has

00:15:33,240 --> 00:15:38,769
to kind of figure as you can see here we

00:15:35,760 --> 00:15:40,389
we we invoke the default next

00:15:38,769 --> 00:15:43,239
well in our upholstery and that is kind

00:15:40,389 --> 00:15:44,470
of big so evaluating this takes time and

00:15:43,239 --> 00:15:46,480
that's not nice when you want to have

00:15:44,470 --> 00:15:52,629
Auto completion needs to be really quick

00:15:46,480 --> 00:15:56,379
so we extended it with a bit of kind of

00:15:52,629 --> 00:16:00,399
caching so when the Haskell source file

00:15:56,379 --> 00:16:03,999
so this source file if the if it's if

00:16:00,399 --> 00:16:07,269
it's older than the time of the link

00:16:03,999 --> 00:16:08,769
then yeah then then you only need to

00:16:07,269 --> 00:16:12,549
build it but if it's if it's younger

00:16:08,769 --> 00:16:15,339
then you can just follow the link and be

00:16:12,549 --> 00:16:18,569
sure it's up to date and so yeah and as

00:16:15,339 --> 00:16:25,660
you can see it's pretty pretty quick oh

00:16:18,569 --> 00:16:28,239
yeah there's some more stuff yeah so I

00:16:25,660 --> 00:16:30,029
would recommend this if you're you know

00:16:28,239 --> 00:16:32,529
want to introduce Nicks and your company

00:16:30,029 --> 00:16:37,360
try to abstract it away so that nobody

00:16:32,529 --> 00:16:42,429
sees you're actually using X all right

00:16:37,360 --> 00:16:46,269
so we have our own Hydra I can actually

00:16:42,429 --> 00:16:48,160
show it so we have a training here it's

00:16:46,269 --> 00:16:50,850
actually still on a public URL but of

00:16:48,160 --> 00:16:56,079
course it is protected with a password

00:16:50,850 --> 00:16:58,749
but at some point I want to put it in

00:16:56,079 --> 00:17:01,149
our VPN so that you know even when the

00:16:58,749 --> 00:17:06,189
password doesn't work yeah you can't

00:17:01,149 --> 00:17:09,039
access it so here we see one job set

00:17:06,189 --> 00:17:11,829
let's just go to our jobs so you can see

00:17:09,039 --> 00:17:14,740
quite a number of jobs most of them are

00:17:11,829 --> 00:17:17,829
actual Haskell packages that we use and

00:17:14,740 --> 00:17:19,389
that we develop ourselves it may appear

00:17:17,829 --> 00:17:22,510
that we have lots of Haskell packages

00:17:19,389 --> 00:17:23,970
well we have about you know 50 or so but

00:17:22,510 --> 00:17:26,289
we have multiple different

00:17:23,970 --> 00:17:29,049
configurations of packages so in here

00:17:26,289 --> 00:17:31,690
the devil ones are packages that we

00:17:29,049 --> 00:17:33,370
built with - oh here oh so we disabled

00:17:31,690 --> 00:17:36,070
optimizations and we also have

00:17:33,370 --> 00:17:38,830
production bills like here where we do

00:17:36,070 --> 00:17:40,809
put in the - oh so that we get optimize

00:17:38,830 --> 00:17:45,340
bills one thing that I want to zoom into

00:17:40,809 --> 00:17:46,539
is this thing test stalling that so

00:17:45,340 --> 00:17:49,059
stalling that that's the Dutch

00:17:46,539 --> 00:17:52,659
installing is a Dutch word for parking

00:17:49,059 --> 00:17:54,940
facility and stalling net as our

00:17:52,659 --> 00:17:59,799
make soaps Network and we we have this

00:17:54,940 --> 00:18:03,700
test suite which is using the standard

00:17:59,799 --> 00:18:06,279
next to as testing infrastructure and I

00:18:03,700 --> 00:18:08,590
was really surprised that when I as I

00:18:06,279 --> 00:18:11,710
wrote this test so I had this I can show

00:18:08,590 --> 00:18:14,529
it here yeah here we have this this test

00:18:11,710 --> 00:18:16,179
so we we say make test you put in a

00:18:14,529 --> 00:18:18,970
bunch of notes so we have a central

00:18:16,179 --> 00:18:21,190
server a facility server which is doing

00:18:18,970 --> 00:18:22,869
the image analysis we have a bunch of

00:18:21,190 --> 00:18:24,849
other things we even put in a

00:18:22,869 --> 00:18:28,149
workstations like like this machine and

00:18:24,849 --> 00:18:32,619
then we have like a build script where

00:18:28,149 --> 00:18:36,190
it is here this Brill script which

00:18:32,619 --> 00:18:38,950
starts all the machines and then it runs

00:18:36,190 --> 00:18:42,129
a few tests for Santoli we check ok is

00:18:38,950 --> 00:18:44,139
nginx running it's our Haskell a Loomis

00:18:42,129 --> 00:18:47,950
central server has full server running

00:18:44,139 --> 00:18:50,950
and yeah we do that for all kinds of

00:18:47,950 --> 00:18:53,259
things I was really surprised that when

00:18:50,950 --> 00:18:55,090
I ran this I you get this nice test

00:18:53,259 --> 00:18:57,009
report I didn't know that existed so I

00:18:55,090 --> 00:19:00,190
was really surprised by that you get

00:18:57,009 --> 00:19:02,710
this really cool test support let's zoom

00:19:00,190 --> 00:19:04,359
in a bit and you can this is kind of you

00:19:02,710 --> 00:19:07,299
can actually click this open and then

00:19:04,359 --> 00:19:10,029
you can see like all the tests and you

00:19:07,299 --> 00:19:12,629
can see the outputs so this is this is

00:19:10,029 --> 00:19:15,580
really cool that you can just be Burke a

00:19:12,629 --> 00:19:17,169
test well the one thing that's not so

00:19:15,580 --> 00:19:28,029
nice if your test fails you don't get

00:19:17,169 --> 00:19:30,419
this report that's a yeah that can be

00:19:28,029 --> 00:19:30,419
improved

00:19:34,429 --> 00:19:40,350
so we use next hops for deployment

00:19:37,200 --> 00:19:44,669
one thing that is that we ran into

00:19:40,350 --> 00:19:47,850
so say you you want to deploy a sign

00:19:44,669 --> 00:19:51,330
some sign of display in Utrecht say type

00:19:47,850 --> 00:19:53,999
in X of deploy includes this my sign or

00:19:51,330 --> 00:19:55,470
my machine and then you deploy and then

00:19:53,999 --> 00:19:57,179
later you want to connect to this

00:19:55,470 --> 00:19:59,610
machine and then certainly you discover

00:19:57,179 --> 00:20:02,490
you can't reach it anymore you know it's

00:19:59,610 --> 00:20:04,049
offline for some reason and you and this

00:20:02,490 --> 00:20:06,450
actually happened to us in practice we

00:20:04,049 --> 00:20:08,220
screwed up our VPN configuration and

00:20:06,450 --> 00:20:10,590
then the sign was certainly not

00:20:08,220 --> 00:20:13,220
accessible anymore if you're still

00:20:10,590 --> 00:20:15,600
running but we just screwed something up

00:20:13,220 --> 00:20:17,909
yeah and the only way to fix this is to

00:20:15,600 --> 00:20:20,429
actually get out of the office getting

00:20:17,909 --> 00:20:22,169
into your car drive to another city or

00:20:20,429 --> 00:20:25,110
possibly in other country because we

00:20:22,169 --> 00:20:28,850
have also in we have systems in Belgium

00:20:25,110 --> 00:20:31,860
and we are installing a system in the UK

00:20:28,850 --> 00:20:36,779
so yeah that's that's not the way to fix

00:20:31,860 --> 00:20:39,389
this so actually Falco he he made this

00:20:36,779 --> 00:20:42,710
automatic rollback system and the way it

00:20:39,389 --> 00:20:45,210
works is we every system has this

00:20:42,710 --> 00:20:49,139
bloomie automatic rollback timer

00:20:45,210 --> 00:20:53,340
installed and when the time of fires

00:20:49,139 --> 00:20:55,470
that always fires after 20 minutes we

00:20:53,340 --> 00:20:57,990
roll back the system so we call next to

00:20:55,470 --> 00:20:59,159
us rebuild switch rollback and we'll

00:20:57,990 --> 00:21:01,529
roll back to the previous configuration

00:20:59,159 --> 00:21:03,179
but you don't know of course always want

00:21:01,529 --> 00:21:06,570
to rollback you only want to do that

00:21:03,179 --> 00:21:07,350
when yeah when you can't reach the

00:21:06,570 --> 00:21:09,690
system anymore

00:21:07,350 --> 00:21:11,820
so what what you do is typically you

00:21:09,690 --> 00:21:14,429
deploy a system and then this timer

00:21:11,820 --> 00:21:18,090
starts running and then in that window a

00:21:14,429 --> 00:21:20,429
20-minute window you will you execute

00:21:18,090 --> 00:21:23,820
some command to stop the rollback and a

00:21:20,429 --> 00:21:28,320
way to stop it as to we have this file

00:21:23,820 --> 00:21:30,240
here the rollback version if you put

00:21:28,320 --> 00:21:34,200
that at the version that you that it

00:21:30,240 --> 00:21:36,419
needs to run at then it won't roll back

00:21:34,200 --> 00:21:39,090
so if the current version of the system

00:21:36,419 --> 00:21:41,490
is bigger than yeah if it's bigger than

00:21:39,090 --> 00:21:44,519
the the rollback version it will roll

00:21:41,490 --> 00:21:45,360
back so if you put in yeah the right

00:21:44,519 --> 00:21:47,070
version then

00:21:45,360 --> 00:21:50,490
we'll stop and this actually has saved

00:21:47,070 --> 00:21:51,780
us a number of times when we screwed

00:21:50,490 --> 00:21:54,000
something up and then the system will

00:21:51,780 --> 00:21:56,460
just be online again after 20 minutes

00:21:54,000 --> 00:21:58,760
that's very useful and I think it might

00:21:56,460 --> 00:22:02,220
be nice to actually kind of packages for

00:21:58,760 --> 00:22:05,010
Nexo s because I think this can be

00:22:02,220 --> 00:22:11,600
generalized for for all next to s

00:22:05,010 --> 00:22:11,600
systems oh and yeah this was already

00:22:18,820 --> 00:22:37,540
I guess we have plenty of time for

00:22:22,270 --> 00:22:40,900
questions yeah

00:22:37,540 --> 00:22:44,460
we have our own Raspberry Pi built form

00:22:40,900 --> 00:22:47,830
so we have a - raspberry PI's on a desk

00:22:44,460 --> 00:22:49,720
and they are doing the the bills first

00:22:47,830 --> 00:22:50,350
they're actually not who to hide right

00:22:49,720 --> 00:22:52,990
yet

00:22:50,350 --> 00:22:55,360
we had some problem kind of connecting

00:22:52,990 --> 00:22:55,900
the Hydra server which is running on

00:22:55,360 --> 00:22:57,940
Hutzler

00:22:55,900 --> 00:23:01,150
to the raspberry PI's that kind of

00:22:57,940 --> 00:23:03,250
wasn't really reliable but we shoot

00:23:01,150 --> 00:23:05,170
actually August and the nice thing is

00:23:03,250 --> 00:23:08,560
you you if you do it on Hydra then all

00:23:05,170 --> 00:23:11,200
the built artifacts will be on Hydra and

00:23:08,560 --> 00:23:13,270
now they are always on the Raspberry Pi

00:23:11,200 --> 00:23:15,280
built machines and you have to kind of

00:23:13,270 --> 00:23:16,900
copy them over to your machine when you

00:23:15,280 --> 00:23:19,180
want to deploy a sign and it's kind of

00:23:16,900 --> 00:23:30,720
cumbersome if you have it on Hydra then

00:23:19,180 --> 00:23:30,720
it will be smoother yeah sure yeah yeah

00:23:38,220 --> 00:23:44,170
you mean a sub-module oh yes keeping

00:23:42,430 --> 00:23:49,300
next packages as a sub module in your

00:23:44,170 --> 00:23:50,980
own repo I did use certain modules at

00:23:49,300 --> 00:23:53,500
some point I'm not sure I use it for

00:23:50,980 --> 00:23:56,740
next packages but they're always kind of

00:23:53,500 --> 00:23:58,570
tedious to handle because yeah every

00:23:56,740 --> 00:24:01,690
engine ears really need to be aware that

00:23:58,570 --> 00:24:03,220
you have these sir modules then when you

00:24:01,690 --> 00:24:06,190
I think when you update a certain

00:24:03,220 --> 00:24:10,060
molecule you're really I'm not sure you

00:24:06,190 --> 00:24:11,800
can automate that everybody doesn't so

00:24:10,060 --> 00:24:16,990
much it'll update that I don't know the

00:24:11,800 --> 00:24:18,730
exact amount but yeah that's good that

00:24:16,990 --> 00:24:21,580
would work that would work yeah

00:24:18,730 --> 00:24:24,760
but I think that the next 1.12 approach

00:24:21,580 --> 00:24:27,960
would be ideal just have this point to a

00:24:24,760 --> 00:24:27,960
tarball and then yeah

00:24:32,150 --> 00:24:42,420
the the which one all right okay

00:24:40,530 --> 00:24:45,810
yeah but then the question is how do you

00:24:42,420 --> 00:24:48,300
do this on Hydra well okay you can you

00:24:45,810 --> 00:25:02,100
can tell Hydra to also fetch all the sub

00:24:48,300 --> 00:25:03,780
modules I guess right question so

00:25:02,100 --> 00:25:05,940
there's two reasons first of all if you

00:25:03,780 --> 00:25:07,920
get clone Nix packages it's gonna take

00:25:05,940 --> 00:25:09,300
forever because it's like 500 megabytes

00:25:07,920 --> 00:25:11,780
so you really want to use the trouble

00:25:09,300 --> 00:25:14,910
right and that the other thing is that

00:25:11,780 --> 00:25:17,670
get sub modules are not pure so they get

00:25:14,910 --> 00:25:19,170
stripped out and and you might run into

00:25:17,670 --> 00:25:22,320
problems if you want to build that on

00:25:19,170 --> 00:25:24,480
Hydra for example so that makes it not

00:25:22,320 --> 00:25:27,440
not that you yeah that's a good point

00:25:24,480 --> 00:25:27,440
yeah thank you

00:25:28,610 --> 00:25:40,020
[Music]

00:25:31,640 --> 00:25:42,870
any more questions so thanks for the

00:25:40,020 --> 00:25:46,560
presentation was really good I like the

00:25:42,870 --> 00:25:49,110
way you take a thin version of Nix

00:25:46,560 --> 00:25:52,710
packages and apply patches to it right I

00:25:49,110 --> 00:25:54,960
wanted to mention that basically what

00:25:52,710 --> 00:25:57,570
you're doing is something that you can

00:25:54,960 --> 00:26:00,210
do with both overlays and modules you

00:25:57,570 --> 00:26:02,310
there is a new way in Nix waste modules

00:26:00,210 --> 00:26:05,340
which didn't went into real business I

00:26:02,310 --> 00:26:07,830
don't know what maybe did and it managed

00:26:05,340 --> 00:26:10,470
to not appear as one of the top teachers

00:26:07,830 --> 00:26:12,240
which is that you can discard one of the

00:26:10,470 --> 00:26:14,310
previous models which is provided by

00:26:12,240 --> 00:26:16,170
default oh yes yes it I know that

00:26:14,310 --> 00:26:18,750
feature yeah you can disable a module

00:26:16,170 --> 00:26:21,990
and then replace it by your own version

00:26:18,750 --> 00:26:24,270
yes yeah one thing I like about actually

00:26:21,990 --> 00:26:27,600
patching next packages is that say you

00:26:24,270 --> 00:26:30,150
have a pool or cross open and yeah you

00:26:27,600 --> 00:26:32,940
kind of fix the module of course you can

00:26:30,150 --> 00:26:34,500
put the fixed module in your own

00:26:32,940 --> 00:26:36,840
repository but then you kind of have to

00:26:34,500 --> 00:26:38,580
maintain like this pool of crust and

00:26:36,840 --> 00:26:41,160
this and your own module and I think

00:26:38,580 --> 00:26:42,480
with patch you just you point to a

00:26:41,160 --> 00:26:44,990
single one right you point

00:26:42,480 --> 00:26:48,419
just to your pool request and then you

00:26:44,990 --> 00:26:50,820
yeah you just need to remove the patch

00:26:48,419 --> 00:26:53,250
once it's merged otherwise you also have

00:26:50,820 --> 00:26:56,460
to remember oh I have to kind of also

00:26:53,250 --> 00:26:58,410
remove my custom module and yeah that's

00:26:56,460 --> 00:27:01,770
why I kind of prefer the patching

00:26:58,410 --> 00:27:04,530
approach and another question I have for

00:27:01,770 --> 00:27:08,040
you is can you show against the Knicks

00:27:04,530 --> 00:27:19,669
to do web page and refresh it oh yeah

00:27:08,040 --> 00:27:19,669
sure yay

00:27:31,530 --> 00:27:35,910
[Applause]

00:27:36,700 --> 00:27:45,980
well let's I will check this and then

00:27:42,100 --> 00:27:49,140
I'll do the celebration later

00:27:45,980 --> 00:27:49,140
[Music]

00:27:54,130 --> 00:27:56,190

YouTube URL: https://www.youtube.com/watch?v=J4DgATIjx9E


