Title: Releasing NixOS â€“ History, Hummingbird, and Henceforth by fpletz and Robin Gloster (NixCon 2017)
Publication date: 2017-10-30
Playlist: NixCon 2017 (Munich)
Description: 
	As the latest release managers, we will describe how NixOS releases have been done in the past and how we want to encourage the Nix community to participate in the release process. We are going to highlight some interesting new features of past releases and the then brand-new 17.09 'Hummingbird' release. Finally, we present you some ideas for features we would love to see implemented.

We will give you an impression of the NixOS release process, how the release team works (RFC15) and your duties as release manager. Not to scare you away but to motivate you to step up as the next release manager. In particular, we will give you an overview of promising features the community has suggested but remain to be implemented. Some of those are general service hardening with systemd, a new test-runner container backend for quicker service tests and the service abstraction layer to use NixOS service modules in Docker containers or swap init systems.
Captions: 
	00:00:05,040 --> 00:00:12,250
hello ah hi thanks to thank you all for

00:00:09,549 --> 00:00:15,730
coming it's so great to finally meet all

00:00:12,250 --> 00:00:17,200
of you in person so our talk is about

00:00:15,730 --> 00:00:19,480
releasing next to us and get you

00:00:17,200 --> 00:00:22,960
motivated to help out in the release

00:00:19,480 --> 00:00:26,259
process because it's a very hard task

00:00:22,960 --> 00:00:28,930
and we need more volunteers and in the

00:00:26,259 --> 00:00:31,930
end we have some statistics that Robin

00:00:28,930 --> 00:00:35,829
prepared that gonna blow your mind so

00:00:31,930 --> 00:00:40,050
let's start with the boring stuff one

00:00:35,829 --> 00:00:43,149
year of Nick's OS so the first release

00:00:40,050 --> 00:00:48,129
1703 and this year codename gorilla was

00:00:43,149 --> 00:00:50,679
released by Robin it had a few cool

00:00:48,129 --> 00:00:54,129
features which is next packages overlay

00:00:50,679 --> 00:00:56,769
done by MVP and the set VD wrappers we

00:00:54,129 --> 00:01:00,909
have around 80 new service modules and

00:00:56,769 --> 00:01:04,780
of course lots of bug fixes the current

00:01:00,909 --> 00:01:07,390
release 1709 hummingbird unfortunately

00:01:04,780 --> 00:01:10,420
we don't have very new exciting features

00:01:07,390 --> 00:01:12,910
in this release but we had a lots of

00:01:10,420 --> 00:01:15,480
cleanups and lots of updates but you can

00:01:12,910 --> 00:01:18,790
read within the release notes

00:01:15,480 --> 00:01:22,080
so like PostgreSQL stuff and my stuff

00:01:18,790 --> 00:01:27,820
moving around that you have to manually

00:01:22,080 --> 00:01:31,930
and around 70 new service modules so if

00:01:27,820 --> 00:01:35,350
the our last releases now to release

00:01:31,930 --> 00:01:35,830
managers a few months ago we started an

00:01:35,350 --> 00:01:37,690
RFC

00:01:35,830 --> 00:01:40,270
if you haven't seen it there's an hour

00:01:37,690 --> 00:01:44,650
of C's repo that it's about simbad

00:01:40,270 --> 00:01:46,930
started awesome where we can like shape

00:01:44,650 --> 00:01:52,060
the community and to processes around

00:01:46,930 --> 00:01:53,740
next to us and the next ecosystem we

00:01:52,060 --> 00:01:55,990
have quite an RFC for release managers

00:01:53,740 --> 00:01:58,210
because we have to get problem that we

00:01:55,990 --> 00:02:04,120
had like four years only one release

00:01:58,210 --> 00:02:05,920
manager domain so he couldn't really do

00:02:04,120 --> 00:02:09,670
it anymore because it was so much work

00:02:05,920 --> 00:02:13,560
and he asked Robin to do it but it

00:02:09,670 --> 00:02:17,000
wasn't a very sustainable process to do

00:02:13,560 --> 00:02:19,820
so we proposed that there are

00:02:17,000 --> 00:02:22,280
now two people involved in the release

00:02:19,820 --> 00:02:25,570
process one alt release manager and one

00:02:22,280 --> 00:02:27,860
release manager so one coming from the

00:02:25,570 --> 00:02:30,650
previous release and one new release

00:02:27,860 --> 00:02:34,040
manager that is appointed by the two

00:02:30,650 --> 00:02:36,160
released managers before him so this is

00:02:34,040 --> 00:02:41,000
the new process that also was approved

00:02:36,160 --> 00:02:45,770
and we'd like to continue with that we

00:02:41,000 --> 00:02:47,840
hope that we can in that by spread the

00:02:45,770 --> 00:02:49,970
knowledge how to release next to us

00:02:47,840 --> 00:02:54,230
there's even some documentation that we

00:02:49,970 --> 00:02:56,959
continuously try to update and yeah it

00:02:54,230 --> 00:03:01,160
should right now be documented enough so

00:02:56,959 --> 00:03:04,340
you can so you know what you're actually

00:03:01,160 --> 00:03:08,239
doing so what are the duties of a risk

00:03:04,340 --> 00:03:11,540
manager the important thing is to pick

00:03:08,239 --> 00:03:13,730
goals and issues to fix in the next

00:03:11,540 --> 00:03:16,220
release this is very difficult because

00:03:13,730 --> 00:03:18,350
we have lots of issues we have lots of

00:03:16,220 --> 00:03:23,780
bugs and it's very difficult to

00:03:18,350 --> 00:03:26,239
prioritize them also in each release we

00:03:23,780 --> 00:03:30,680
have some blockers like issues we have

00:03:26,239 --> 00:03:32,870
to fix before the release actually for

00:03:30,680 --> 00:03:36,500
this release we had some really weird

00:03:32,870 --> 00:03:41,269
blockers like QE more interface renaming

00:03:36,500 --> 00:03:44,540
stuff that's due to a kinetic option

00:03:41,269 --> 00:03:47,269
chains and it was very difficult to to

00:03:44,540 --> 00:03:49,489
decide on the right solution like right

00:03:47,269 --> 00:03:52,160
now we decided to put it in the release

00:03:49,489 --> 00:03:54,760
notes and make you aware of it but we

00:03:52,160 --> 00:03:57,829
could also have done some automatic

00:03:54,760 --> 00:04:01,280
fixing but that would be a would have

00:03:57,829 --> 00:04:03,350
been a little bit weird because some

00:04:01,280 --> 00:04:07,030
semantics would have changed so this is

00:04:03,350 --> 00:04:09,769
actually more difficult than it looks

00:04:07,030 --> 00:04:13,160
the other thing is there are lots of PRS

00:04:09,769 --> 00:04:17,570
and new features hanging around that are

00:04:13,160 --> 00:04:20,450
not merged yet so you have to like not

00:04:17,570 --> 00:04:23,330
the people to like get their stuff ready

00:04:20,450 --> 00:04:26,330
and also review it that's a very

00:04:23,330 --> 00:04:27,979
difficult task like for this release we

00:04:26,330 --> 00:04:29,840
planned like to have the cross

00:04:27,979 --> 00:04:31,970
compilation feature and

00:04:29,840 --> 00:04:34,460
and John Erickson actually worked very

00:04:31,970 --> 00:04:36,980
hard on this but in the end we weren't

00:04:34,460 --> 00:04:40,430
able to deliver it unfortunately but for

00:04:36,980 --> 00:04:42,800
the next release the other thing is to

00:04:40,430 --> 00:04:45,740
write the release notes so we you have

00:04:42,800 --> 00:04:47,620
to go through all the commits all the

00:04:45,740 --> 00:04:51,430
history happening since the last release

00:04:47,620 --> 00:04:55,160
to find out what has changed to find out

00:04:51,430 --> 00:04:57,889
what our breaking changes that you have

00:04:55,160 --> 00:05:02,710
to document for the users also updating

00:04:57,889 --> 00:05:05,570
the website but that's actually easy and

00:05:02,710 --> 00:05:08,690
what's the most annoying task is to

00:05:05,570 --> 00:05:11,139
watch hydra for failing bills and ten

00:05:08,690 --> 00:05:14,090
eunichs OS tests we have some weird

00:05:11,139 --> 00:05:17,510
failures in EXO s test some transient

00:05:14,090 --> 00:05:21,289
backs and Huey mo probably related to Io

00:05:17,510 --> 00:05:23,419
I'm not sure but a lot of times

00:05:21,289 --> 00:05:29,479
Nick's OS tests fail and when you

00:05:23,419 --> 00:05:31,310
restart them they won't fail so one of

00:05:29,479 --> 00:05:33,139
the main tasks I was doing to watch

00:05:31,310 --> 00:05:36,650
Hydra hit refresh

00:05:33,139 --> 00:05:41,419
oh it's failed again we started yeah

00:05:36,650 --> 00:05:46,370
great so somebody should eventually fix

00:05:41,419 --> 00:05:49,880
that but I don't feel qualified the

00:05:46,370 --> 00:05:51,680
other thing is like after the branch of

00:05:49,880 --> 00:05:54,500
end after the release you have to

00:05:51,680 --> 00:05:56,810
monitor a master for bug fixes coming in

00:05:54,500 --> 00:05:59,120
and back put them to the release branch

00:05:56,810 --> 00:06:02,479
it's also very time-consuming because

00:05:59,120 --> 00:06:07,490
there are a lot of code coming in lot of

00:06:02,479 --> 00:06:11,479
code missing data and of course this is

00:06:07,490 --> 00:06:14,150
the the most interesting and most fun

00:06:11,479 --> 00:06:14,810
task you can pick the codename for the

00:06:14,150 --> 00:06:16,669
next release

00:06:14,810 --> 00:06:18,620
so not the release that you are

00:06:16,669 --> 00:06:21,200
releasing but the next release because

00:06:18,620 --> 00:06:23,900
after the branch of the codename has to

00:06:21,200 --> 00:06:29,000
be set in the new in the next packages

00:06:23,900 --> 00:06:31,490
master so actually the second release

00:06:29,000 --> 00:06:33,960
you're releasing you get to choose the

00:06:31,490 --> 00:06:37,289
codename yeah when you are the

00:06:33,960 --> 00:06:43,919
newbies manager yeah so that's a fun

00:06:37,289 --> 00:06:47,910
task okay so what we release managers

00:06:43,919 --> 00:06:52,020
the first release was 1310 if I read

00:06:47,910 --> 00:06:54,210
correctly and must whisper echo the one

00:06:52,020 --> 00:06:58,080
after that too and then domain that has

00:06:54,210 --> 00:07:07,590
released run for releases in a row let's

00:06:58,080 --> 00:07:22,590
give him a round of applause also echo

00:07:07,590 --> 00:07:34,830
echo of course I look at their release

00:07:22,590 --> 00:07:37,710
male so shall he be yeah okay okay

00:07:34,830 --> 00:07:41,970
and then the 1709 we started with to

00:07:37,710 --> 00:07:45,800
release miniatures of the new RFC so the

00:07:41,970 --> 00:07:49,409
next release 18:03 will be called Impala

00:07:45,800 --> 00:07:52,050
the fun thing about Impala it's some

00:07:49,409 --> 00:07:58,770
kind of antelope which is in the same

00:07:52,050 --> 00:08:02,900
family as news so that's why we picked

00:07:58,770 --> 00:08:02,900
it and we have a new list manager

00:08:04,210 --> 00:08:17,890
it's Vladimir Cunha yeah you might have

00:08:15,850 --> 00:08:20,320
seen on github might have seen on github

00:08:17,890 --> 00:08:23,560
it's always fixing stuff always doing

00:08:20,320 --> 00:08:25,840
lots of commits really awesome that we

00:08:23,560 --> 00:08:31,570
happen that you know is the official

00:08:25,840 --> 00:08:34,600
next service manager okay and let's look

00:08:31,570 --> 00:08:36,670
at the future nexus 18:09 need service

00:08:34,600 --> 00:08:41,500
manager if you're up for the job

00:08:36,670 --> 00:08:43,030
please come talk to us when we release a

00:08:41,500 --> 00:08:45,370
channel free we have to pick a new list

00:08:43,030 --> 00:08:50,500
manager and it might be you

00:08:45,370 --> 00:08:53,320
so please do it we don't want to do it

00:08:50,500 --> 00:08:56,500
after that because it's really much work

00:08:53,320 --> 00:09:04,870
and so stressful but but but but it is

00:08:56,500 --> 00:09:14,800
nice work you that it's yeah it sounds

00:09:04,870 --> 00:09:16,480
much worse than it is actually I told

00:09:14,800 --> 00:09:20,920
you what you have to do so you can

00:09:16,480 --> 00:09:23,590
decide okay now we have some future

00:09:20,920 --> 00:09:26,200
ideas for features that we would like to

00:09:23,590 --> 00:09:30,570
have because hey we want to take over

00:09:26,200 --> 00:09:36,340
the world right we have to fight the

00:09:30,570 --> 00:09:40,300
like the Tucker issue somehow so I my

00:09:36,340 --> 00:09:43,240
idea would be to like be the standard

00:09:40,300 --> 00:09:45,720
tool for building docker images so what

00:09:43,240 --> 00:09:45,720
we would like

00:09:46,939 --> 00:09:52,289
so we would very much like to have a

00:09:49,439 --> 00:09:54,329
service abstraction layer comp him also

00:09:52,289 --> 00:09:58,979
did some work on that but I would very

00:09:54,329 --> 00:10:00,509
much like to see it in 1803 the other

00:09:58,979 --> 00:10:02,939
thing what would be cool is a container

00:10:00,509 --> 00:10:05,459
beckoned for next OS tests because yeah

00:10:02,939 --> 00:10:09,329
a bit biased because I have restarted so

00:10:05,459 --> 00:10:12,929
much nicolas tests but like some tests

00:10:09,329 --> 00:10:16,109
could be run in in a container instead

00:10:12,929 --> 00:10:17,939
of a KBM environment because when you

00:10:16,109 --> 00:10:19,259
only test a non normal service it can

00:10:17,939 --> 00:10:20,849
just be run in a container when you are

00:10:19,259 --> 00:10:23,159
testing like the Installer and the

00:10:20,849 --> 00:10:26,249
bootloader it has to be done in a VM of

00:10:23,159 --> 00:10:28,109
course the other thing is the system is

00:10:26,249 --> 00:10:30,629
not as hardening system is lots of

00:10:28,109 --> 00:10:34,739
hardening features we should enable by

00:10:30,629 --> 00:10:37,799
default the other thing is Nick's or

00:10:34,739 --> 00:10:39,659
Nick's OS user environments as a pull

00:10:37,799 --> 00:10:41,639
request open for like three years

00:10:39,659 --> 00:10:51,479
you should get that ready yeah too much

00:10:41,639 --> 00:10:53,489
trouble yeah let's talk about that the

00:10:51,479 --> 00:10:56,069
other thing is web service abstraction

00:10:53,489 --> 00:11:00,269
so we have like lots of web services

00:10:56,069 --> 00:11:03,569
opening ports opening like fast cgi

00:11:00,269 --> 00:11:06,149
sockets or SETI sockets or whatever and

00:11:03,569 --> 00:11:11,219
we would like to abstract over that and

00:11:06,149 --> 00:11:14,099
like glue together a web server and a

00:11:11,219 --> 00:11:15,839
web app more easily or our virtual host

00:11:14,099 --> 00:11:17,699
in a web server and a web app more

00:11:15,839 --> 00:11:22,379
easily so you don't have to like

00:11:17,699 --> 00:11:27,869
remember paths or express if ik

00:11:22,379 --> 00:11:30,629
specified paths or port numbers and we

00:11:27,869 --> 00:11:34,259
would like to have a new PR testing but

00:11:30,629 --> 00:11:36,419
Graham is working on that and I hope we

00:11:34,259 --> 00:11:41,579
will have that soon ready maybe after a

00:11:36,419 --> 00:11:44,119
hackathon ok and now to the interesting

00:11:41,579 --> 00:11:48,899
stuff globin has made some statistics

00:11:44,119 --> 00:11:53,489
well yeah I've collected some statistics

00:11:48,899 --> 00:11:57,349
on commits issues and put requests I

00:11:53,489 --> 00:11:58,740
have a lot of data and though I use a

00:11:57,349 --> 00:12:02,640
quote of

00:11:58,740 --> 00:12:06,270
probably for the slides now I know just

00:12:02,640 --> 00:12:11,270
go ahead and start with the most obvious

00:12:06,270 --> 00:12:19,529
stuff commits per year you can see

00:12:11,270 --> 00:12:24,560
around 2014 2015 and 2016 we've had more

00:12:19,529 --> 00:12:29,399
than 15,000 commits last year was about

00:12:24,560 --> 00:12:34,709
17,000 this year we'll probably reach

00:12:29,399 --> 00:12:37,380
about the same and that the interesting

00:12:34,709 --> 00:12:41,670
stuff in there is the percentage of

00:12:37,380 --> 00:12:47,149
change compared to the year before we

00:12:41,670 --> 00:12:51,690
can see in 2012 we had a really high

00:12:47,149 --> 00:13:00,510
rate of change again does anyone know

00:12:51,690 --> 00:13:05,160
what happened in that year like don't

00:13:00,510 --> 00:13:07,700
know that that was the year when next

00:13:05,160 --> 00:13:11,430
packages development moved to github and

00:13:07,700 --> 00:13:14,660
a lot of new contributors started

00:13:11,430 --> 00:13:19,020
contributing can also see that here

00:13:14,660 --> 00:13:22,200
that's the number of committers which

00:13:19,020 --> 00:13:26,820
was growing really enormous lis

00:13:22,200 --> 00:13:32,279
last year we had around 800 this year

00:13:26,820 --> 00:13:34,250
already I think nearly 900 and we still

00:13:32,279 --> 00:13:38,820
have a few months left

00:13:34,250 --> 00:13:42,209
so that will grow even more and again in

00:13:38,820 --> 00:13:50,070
2012 there was a really really big

00:13:42,209 --> 00:13:55,950
change that's not a quite nice statistic

00:13:50,070 --> 00:14:00,329
you can see around lo 2008 to 2011 there

00:13:55,950 --> 00:14:04,560
were not that many people but doing a

00:14:00,329 --> 00:14:07,589
lot of work and you can see how due to

00:14:04,560 --> 00:14:12,330
there being much more like drive-by

00:14:07,589 --> 00:14:16,590
contributors the

00:14:12,330 --> 00:14:19,680
rate of commits per committer has been

00:14:16,590 --> 00:14:22,200
less but that's only that's actually a

00:14:19,680 --> 00:14:28,170
good sign the people can contribute

00:14:22,200 --> 00:14:34,160
quite easily that's the number of

00:14:28,170 --> 00:14:38,550
commits per day like normally is around

00:14:34,160 --> 00:14:41,610
40 to 70 commits a day which is quite a

00:14:38,550 --> 00:14:45,660
lot and what you can actually see quite

00:14:41,610 --> 00:14:50,280
good if you zoom in the red lines are

00:14:45,660 --> 00:14:54,030
the releases and like around at least

00:14:50,280 --> 00:14:57,420
the last three releases people suddenly

00:14:54,030 --> 00:15:06,750
remembered they should commit and submit

00:14:57,420 --> 00:15:09,690
their stuff which is actually quite yea

00:15:06,750 --> 00:15:13,080
big it's not that nice for the release

00:15:09,690 --> 00:15:22,500
managers because there's a lot of change

00:15:13,080 --> 00:15:25,140
right before the release that's the same

00:15:22,500 --> 00:15:39,330
graph as the one before number of

00:15:25,140 --> 00:15:44,400
commits per day that happens too we see

00:15:39,330 --> 00:15:47,550
the pull requests to later actually it's

00:15:44,400 --> 00:15:52,040
a lot of people remembering that they

00:15:47,550 --> 00:15:52,040
should actually get their stuff merged

00:15:55,250 --> 00:16:03,570
yes probably yes / yeah I'd like to

00:16:00,510 --> 00:16:06,620
encourage you to like commit your stuff

00:16:03,570 --> 00:16:06,620
in between two

00:16:07,250 --> 00:16:18,800
so so that it makes it easier to release

00:16:12,800 --> 00:16:22,610
the stuff then two issues that's yeah

00:16:18,800 --> 00:16:29,680
that we can see the github history

00:16:22,610 --> 00:16:31,120
started in 2012 we have had two alone in

00:16:29,680 --> 00:16:35,300
00:16:31,120 --> 00:16:42,259
2500 issues were created that is a hell

00:16:35,300 --> 00:16:45,949
of a lot and that actually I'm not sure

00:16:42,259 --> 00:16:50,660
if many other github projects have like

00:16:45,949 --> 00:16:53,329
those numbers we're probably one of the

00:16:50,660 --> 00:16:57,649
github projects using the issue tracker

00:16:53,329 --> 00:17:04,459
most yeah

00:16:57,649 --> 00:17:08,900
there again please like people like not

00:17:04,459 --> 00:17:11,959
not even being able to commit we'd like

00:17:08,900 --> 00:17:16,220
to encourage you to like go through

00:17:11,959 --> 00:17:18,470
issues triage them and have a look

00:17:16,220 --> 00:17:22,640
because we have quite a lot of open

00:17:18,470 --> 00:17:27,199
issues to we're probably a lot of them

00:17:22,640 --> 00:17:31,940
really issues anymore but they're just

00:17:27,199 --> 00:17:39,049
so many the we have difficulties to cope

00:17:31,940 --> 00:17:47,750
with all of them here numbers of issues

00:17:39,049 --> 00:17:55,909
opened by different users just I say

00:17:47,750 --> 00:18:02,510
nothing then numbers of issues by

00:17:55,909 --> 00:18:05,289
assignee might be a reason for the next

00:18:02,510 --> 00:18:05,289
release manager

00:18:06,850 --> 00:18:16,550
[Laughter]

00:18:11,270 --> 00:18:16,550
I'm appears to be careful too

00:18:17,670 --> 00:18:25,440
here's some statistics about how long it

00:18:21,690 --> 00:18:27,540
takes to fix issues or to close the

00:18:25,440 --> 00:18:31,200
issues actually doesn't have to be

00:18:27,540 --> 00:18:33,750
fixing them as you can see with 8 second

00:18:31,200 --> 00:18:40,560
issue which is quite nice

00:18:33,750 --> 00:18:43,010
probably someone I think he closed it

00:18:40,560 --> 00:18:43,010
himself

00:18:43,140 --> 00:18:50,280
but but we can actually see like 50% of

00:18:46,320 --> 00:18:59,960
the the issues are closed in 7 days

00:18:50,280 --> 00:19:05,360
which is not bad actually a fun fact the

00:18:59,960 --> 00:19:09,830
maximum the 1700 days was an issue

00:19:05,360 --> 00:19:15,750
created by Elko in 2012 that the MySQL

00:19:09,830 --> 00:19:23,550
closure size was too big and was closed

00:19:15,750 --> 00:19:30,240
I think half a year ago now and yes some

00:19:23,550 --> 00:19:35,420
the comments - like the maximum 156

00:19:30,240 --> 00:19:35,420
comments on one issue that's quite a lot

00:19:36,440 --> 00:19:43,950
yeah that's the same statistic as the

00:19:40,640 --> 00:19:47,820
one we had with the commits four issues

00:19:43,950 --> 00:19:50,910
open per day we can actually see a large

00:19:47,820 --> 00:19:54,450
peak in there that was when the last

00:19:50,910 --> 00:19:59,520
wiki was shut down there was a the

00:19:54,450 --> 00:20:02,760
issues to move the wiki and what we can

00:19:59,520 --> 00:20:06,240
actually see is that we don't have that

00:20:02,760 --> 00:20:10,020
much correlation with releases in the

00:20:06,240 --> 00:20:14,820
issues which is quite nice because the

00:20:10,020 --> 00:20:17,780
like tells us the release the releases

00:20:14,820 --> 00:20:17,780
didn't break too much

00:20:22,290 --> 00:20:28,260
that's the issue is closed per day we

00:20:25,890 --> 00:20:32,160
like January generally closed five

00:20:28,260 --> 00:20:39,120
issues a day that is quite a high number

00:20:32,160 --> 00:20:41,430
two and actually like for 1703 we can

00:20:39,120 --> 00:20:45,650
actually probably see the a lot of

00:20:41,430 --> 00:20:51,470
people noticed so I've broken some stuff

00:20:45,650 --> 00:20:51,470
and fix it a month before the release

00:20:54,500 --> 00:21:00,920
that's issues open versus closed per day

00:21:02,570 --> 00:21:10,170
yeah we can actually see that we hardly

00:21:05,880 --> 00:21:13,560
ever go below zero which means we're

00:21:10,170 --> 00:21:22,650
actually like collecting issues every

00:21:13,560 --> 00:21:26,760
day we should try and fix that now pull

00:21:22,650 --> 00:21:30,240
requests can say last year we had seven

00:21:26,760 --> 00:21:37,530
thousand pull requests this year too I

00:21:30,240 --> 00:21:43,770
think that is the data from round five

00:21:37,530 --> 00:21:47,570
days ago so we actually might have might

00:21:43,770 --> 00:21:53,880
have as many pull requests opened as in

00:21:47,570 --> 00:21:58,670
2016 now already here we have number of

00:21:53,880 --> 00:22:10,460
pull requests per user the Christmas is

00:21:58,670 --> 00:22:15,360
leading that statistic and yeah I

00:22:10,460 --> 00:22:20,490
actually wanted to change that to

00:22:15,360 --> 00:22:30,360
numbers of PA p ours by merger but I

00:22:20,490 --> 00:22:32,340
think I forgot that one I'll I know that

00:22:30,360 --> 00:22:34,620
one is that I wanted to

00:22:32,340 --> 00:22:39,289
drop the other slide actually yeah we

00:22:34,620 --> 00:22:43,620
can see Mick 92 is in front of probably

00:22:39,289 --> 00:22:46,559
everyone will have noticed because it's

00:22:43,620 --> 00:22:51,720
an insane number of prayer requests he's

00:22:46,559 --> 00:22:56,309
merging you are him with Python stuff

00:22:51,720 --> 00:22:59,750
and the rest and then Tommen isn't that

00:22:56,309 --> 00:22:59,750
far back to and Jagger Jagger

00:23:00,679 --> 00:23:14,370
yeah but yes certainly he is he should

00:23:09,500 --> 00:23:17,059
do more again it was awesome yeah

00:23:14,370 --> 00:23:17,059
obviously

00:23:17,330 --> 00:23:28,140
please yeah here actually again some

00:23:24,539 --> 00:23:32,700
data on the comments and review comments

00:23:28,140 --> 00:23:38,520
and the merge duration actually that is

00:23:32,700 --> 00:23:41,909
merging unclosing what is it no I think

00:23:38,520 --> 00:23:45,000
I think that is really only pull

00:23:41,909 --> 00:23:49,490
requests that are merged I don't know

00:23:45,000 --> 00:23:52,140
who managed to do that in two seconds I

00:23:49,490 --> 00:23:58,380
have to look which one that was that

00:23:52,140 --> 00:24:00,840
looks interesting but yeah 75% of the

00:23:58,380 --> 00:24:05,659
pull requests emerged in two and a half

00:24:00,840 --> 00:24:05,659
days which is really nice

00:24:06,510 --> 00:24:12,240
[Applause]

00:24:12,760 --> 00:24:27,770
then the last few statistics I'm not

00:24:20,600 --> 00:24:30,610
sure yeah but yeah numbers of pull

00:24:27,770 --> 00:24:36,280
requests created per day that's what I

00:24:30,610 --> 00:24:39,350
said earlier to that it's not only like

00:24:36,280 --> 00:24:42,140
pull requests being merged right before

00:24:39,350 --> 00:24:44,860
the release but also pull requests being

00:24:42,140 --> 00:24:54,830
created right before the release and

00:24:44,860 --> 00:24:59,300
it's like 30 a day yeah I think I have

00:24:54,830 --> 00:25:02,060
yeah pull requests open versus merged

00:24:59,300 --> 00:25:05,330
you can see that the last two months

00:25:02,060 --> 00:25:10,400
were actually like the worst we had

00:25:05,330 --> 00:25:15,650
since development merged a move to get

00:25:10,400 --> 00:25:19,280
up there like around two and a half pull

00:25:15,650 --> 00:25:24,320
requests being opened and not merged a

00:25:19,280 --> 00:25:29,240
day currently so please review stuff

00:25:24,320 --> 00:25:31,430
help the people merging so that we can

00:25:29,240 --> 00:25:37,400
get more stuff merged I think we're

00:25:31,430 --> 00:25:41,150
around 550 open pull requests now and I

00:25:37,400 --> 00:25:46,430
can remember times where we were keeping

00:25:41,150 --> 00:25:52,310
it below 200 250 that is has grown

00:25:46,430 --> 00:26:01,460
insanely in the last few months yeah

00:25:52,310 --> 00:26:06,050
that was the data I had or the data I

00:26:01,460 --> 00:26:09,640
managed to look through the statistics

00:26:06,050 --> 00:26:14,330
and slides on github

00:26:09,640 --> 00:26:18,050
with git LFS and github actually rate

00:26:14,330 --> 00:26:20,930
limits you quite hard that's why it

00:26:18,050 --> 00:26:23,750
might not be possible to clone all the

00:26:20,930 --> 00:26:29,809
data from github that's why

00:26:23,750 --> 00:26:33,890
mirror mirror on our gate lab so if

00:26:29,809 --> 00:26:40,130
github doesn't work please just use the

00:26:33,890 --> 00:26:43,909
gate lab I'm currently building the

00:26:40,130 --> 00:26:49,190
whole statistics and the slides on our

00:26:43,909 --> 00:26:53,380
Hydra the slides sadly don't render

00:26:49,190 --> 00:26:58,100
properly directly on Hydra but if you

00:26:53,380 --> 00:27:00,919
just Nick story alloys and run the

00:26:58,100 --> 00:27:06,159
browser from the result you'll be fine

00:27:00,919 --> 00:27:09,400
and we definitely need more statistics

00:27:06,159 --> 00:27:13,600
if you have any ideas for more

00:27:09,400 --> 00:27:15,549
statistics just open an issue or

00:27:13,600 --> 00:27:20,179
implement it yourself

00:27:15,549 --> 00:27:25,520
everything is that the slides you saw

00:27:20,179 --> 00:27:33,080
are just Jupiter notebooks render the

00:27:25,520 --> 00:27:36,200
slides there is a whole more of data you

00:27:33,080 --> 00:27:41,809
can look through it's all in the

00:27:36,200 --> 00:27:45,970
repository and was generated with get

00:27:41,809 --> 00:27:50,059
pandas and Python get up back up but

00:27:45,970 --> 00:27:54,860
actually with some touching and hacking

00:27:50,059 --> 00:27:57,770
around so I'll I've opened pull requests

00:27:54,860 --> 00:28:03,049
for get pandas but apparently broke some

00:27:57,770 --> 00:28:05,600
tests I didn't manage to fix yet and the

00:28:03,049 --> 00:28:10,309
Python get a backup actually doesn't

00:28:05,600 --> 00:28:12,679
give you that much data regarding for

00:28:10,309 --> 00:28:15,260
example who merge the pull request by

00:28:12,679 --> 00:28:18,530
default and he hacked around in there

00:28:15,260 --> 00:28:22,549
and didn't have the time to submit all

00:28:18,530 --> 00:28:27,020
that upstream and I'll do that in the

00:28:22,549 --> 00:28:31,520
next few days and probably add or I'll

00:28:27,020 --> 00:28:37,280
definitely add the how to gather the

00:28:31,520 --> 00:28:52,580
data to the readme then yep that's

00:28:37,280 --> 00:28:52,580
all I have to say so order any questions

00:28:58,430 --> 00:29:12,600
no questions everyone asleep yeah so

00:29:09,230 --> 00:29:16,320
this is your of the statistic only in

00:29:12,600 --> 00:29:18,480
the neck spectral Reaper or all the

00:29:16,320 --> 00:29:21,660
Reapers in the next organization that

00:29:18,480 --> 00:29:24,660
was only next packages I didn't have

00:29:21,660 --> 00:29:33,390
enough time to do more yeah that will

00:29:24,660 --> 00:29:36,090
get us yeah yeah that that is stuff like

00:29:33,390 --> 00:29:38,790
you could pull requests and welcome

00:29:36,090 --> 00:29:50,610
issues that that is like the interesting

00:29:38,790 --> 00:29:57,270
stuff we need any ideas for more

00:29:50,610 --> 00:30:02,180
statistics probably quite simple just to

00:29:57,270 --> 00:30:02,180
graph the backlog of open issues and

00:30:11,640 --> 00:30:17,200
how useful are the tags that we put on

00:30:14,830 --> 00:30:23,860
the issues and pull requests for

00:30:17,200 --> 00:30:27,130
releases it depends so we only watching

00:30:23,860 --> 00:30:28,780
a few labels like the blocker label is

00:30:27,130 --> 00:30:32,860
very important for us also the mass

00:30:28,780 --> 00:30:35,049
rebuild label and the security level for

00:30:32,860 --> 00:30:37,809
the most part like the package update

00:30:35,049 --> 00:30:38,350
label or package new label is mostly

00:30:37,809 --> 00:30:41,380
useless

00:30:38,350 --> 00:30:45,040
unfortunately we should reorganize them

00:30:41,380 --> 00:30:53,220
at some point but I don't have really

00:30:45,040 --> 00:30:58,690
good ideas right now but yeah yeah

00:30:53,220 --> 00:31:01,390
that's a microphone I was told as

00:30:58,690 --> 00:31:05,669
managers in antennas can you say what

00:31:01,390 --> 00:31:09,429
what were you on the table feature

00:31:05,669 --> 00:31:12,790
squash emerge basically when I do pull

00:31:09,429 --> 00:31:18,160
requests I do some fixes like maintainer

00:31:12,790 --> 00:31:21,429
request fixes from me and then I myself

00:31:18,160 --> 00:31:24,460
I'd I don't see the point

00:31:21,429 --> 00:31:27,700
when maintainer writes to me please

00:31:24,460 --> 00:31:30,970
squash mm-hmm time passes I see the

00:31:27,700 --> 00:31:36,010
message oh I am NOT on the same laptop

00:31:30,970 --> 00:31:39,880
our function and I need to I squash it

00:31:36,010 --> 00:31:42,820
and commit it back and manager then sees

00:31:39,880 --> 00:31:48,460
it and then maybe he requests some other

00:31:42,820 --> 00:31:51,370
changes but when maintainer can he looks

00:31:48,460 --> 00:31:59,110
at the code maintainer understands what

00:31:51,370 --> 00:32:03,429
it does he squashes I think depends on

00:31:59,110 --> 00:32:08,679
the poor request if it's like only small

00:32:03,429 --> 00:32:13,059
package updates it normally is fine to

00:32:08,679 --> 00:32:15,850
just use the squash and marriage button

00:32:13,059 --> 00:32:18,510
but we often have like pull requests

00:32:15,850 --> 00:32:21,250
updating the package and the module and

00:32:18,510 --> 00:32:23,890
those are like two logical commits I

00:32:21,250 --> 00:32:25,120
don't want to have squashed what I

00:32:23,890 --> 00:32:32,200
sometimes do

00:32:25,120 --> 00:32:36,670
is simply push on the like pull

00:32:32,200 --> 00:32:42,870
requesters branch and squashed things

00:32:36,670 --> 00:32:45,670
myself and then merge normally but yeah

00:32:42,870 --> 00:32:49,960
normally it should be fine to just use

00:32:45,670 --> 00:32:54,309
quash emerge but sometimes you want to

00:32:49,960 --> 00:33:05,020
keep commit separate or simple simple

00:32:54,309 --> 00:33:07,059
requests yeah yeah so what's the as a

00:33:05,020 --> 00:33:09,270
release maintainer what's the single

00:33:07,059 --> 00:33:15,990
biggest task which is taking up

00:33:09,270 --> 00:33:22,590
relatively much time it's a mixture of

00:33:15,990 --> 00:33:28,809
monitoring Hydra and watching master

00:33:22,590 --> 00:33:31,929
like we we actually had a branch which

00:33:28,809 --> 00:33:37,090
was like tracking master where we always

00:33:31,929 --> 00:33:40,270
pushed the commit to that branch of the

00:33:37,090 --> 00:33:42,429
Committee of Master to that branch up to

00:33:40,270 --> 00:33:48,040
the point we had reviewed to like keep

00:33:42,429 --> 00:33:54,990
track where we stopped reviewing the

00:33:48,040 --> 00:33:59,890
last time last time I didn't do that but

00:33:54,990 --> 00:34:06,550
there there was me alone watching master

00:33:59,890 --> 00:34:09,730
and I think we had a few less commits

00:34:06,550 --> 00:34:13,240
that release compared to this one and

00:34:09,730 --> 00:34:17,200
this one was like maybe half an hour a

00:34:13,240 --> 00:34:18,850
day going through commits so watching

00:34:17,200 --> 00:34:21,220
master is hot because like you have to

00:34:18,850 --> 00:34:24,190
if the branch of already happened you

00:34:21,220 --> 00:34:26,980
have to back what the commits and like

00:34:24,190 --> 00:34:28,750
tested of course and and in the first

00:34:26,980 --> 00:34:30,520
two weeks it's easy but it's becoming

00:34:28,750 --> 00:34:36,760
more and more difficult the more time

00:34:30,520 --> 00:34:37,909
goes on so right now you get the first

00:34:36,760 --> 00:34:42,139
conflict so

00:34:37,909 --> 00:34:43,839
mmm-hmm left effect but even more that's

00:34:42,139 --> 00:34:48,710
okay

00:34:43,839 --> 00:34:51,799
and actually in not the thing we do a

00:34:48,710 --> 00:34:57,289
lot is like pinging people on different

00:34:51,799 --> 00:35:00,530
issues like every hostile issue pity

00:34:57,289 --> 00:35:04,160
gets pinged for example because we know

00:35:00,530 --> 00:35:30,130
he knows what's wrong and we know he'll

00:35:04,160 --> 00:35:34,940
fix it definitely the pull request

00:35:30,130 --> 00:35:38,930
testing would help a lot because we'd

00:35:34,940 --> 00:35:42,369
then don't like have to run Knox review

00:35:38,930 --> 00:35:49,099
for every pull request we want to merge

00:35:42,369 --> 00:35:53,119
or yeah like what would be nice if we

00:35:49,099 --> 00:35:55,910
could like cap job sets for and I don't

00:35:53,119 --> 00:35:59,059
know a bunch of fifteen pull requests

00:35:55,910 --> 00:36:01,460
merge together and just like test all of

00:35:59,059 --> 00:36:05,059
the rebuilds that were would cause

00:36:01,460 --> 00:36:10,760
because there are quite a lot of pull

00:36:05,059 --> 00:36:15,740
requests like only changing 20 30 40

00:36:10,760 --> 00:36:17,299
bills and like rebasing them on top of

00:36:15,740 --> 00:36:20,799
each other and creating a job sir

00:36:17,299 --> 00:36:28,039
automatically for that would probably

00:36:20,799 --> 00:36:30,559
make it a lot easier also I'm from time

00:36:28,039 --> 00:36:33,410
to time not sure if getup is really the

00:36:30,559 --> 00:36:36,079
right tool for us but don't get me wrong

00:36:33,410 --> 00:36:38,740
github is great but it's not easily

00:36:36,079 --> 00:36:42,140
customizable because it's close to us

00:36:38,740 --> 00:36:44,210
yeah but we we've profited a lot from

00:36:42,140 --> 00:36:46,849
github of course we've got a lot of new

00:36:44,210 --> 00:36:50,380
commits us from github so I'm not sure

00:36:46,849 --> 00:36:50,380
that will better go from here

00:36:53,500 --> 00:37:05,240
yeah well more of a note for the back

00:36:58,549 --> 00:37:16,819
porting of two stable branches I I would

00:37:05,240 --> 00:37:19,009
prefer not just because I think already

00:37:16,819 --> 00:37:21,559
when people create pull requests or

00:37:19,009 --> 00:37:24,500
merge them they should think whether

00:37:21,559 --> 00:37:30,559
that change is suitable for backporting

00:37:24,500 --> 00:37:33,440
and I would like them to do the work

00:37:30,559 --> 00:37:36,799
because they update the package often

00:37:33,440 --> 00:37:39,769
they are maintained errs and they know

00:37:36,799 --> 00:37:41,990
more about it yeah then the release

00:37:39,769 --> 00:37:46,099
manager who well can just know

00:37:41,990 --> 00:37:49,609
everything all the packages so so I

00:37:46,099 --> 00:37:52,839
would prefer to ship that to those due

00:37:49,609 --> 00:37:57,490
to maintenance of the packages and them

00:37:52,839 --> 00:38:01,880
totally yeah and another thing there's

00:37:57,490 --> 00:38:05,230
people we'd like to encourage all of you

00:38:01,880 --> 00:38:08,809
to actually write release notes yeah

00:38:05,230 --> 00:38:13,240
because I spent like two days going

00:38:08,809 --> 00:38:16,099
through the whole nexus folder diff

00:38:13,240 --> 00:38:20,210
trying to figure out the breaking

00:38:16,099 --> 00:38:22,849
changes in there which I think worked

00:38:20,210 --> 00:38:27,140
out quite well but I don't think we

00:38:22,849 --> 00:38:30,529
should do that like that but really be

00:38:27,140 --> 00:38:36,740
more strict on letting people add

00:38:30,529 --> 00:38:38,329
release notes yeah also the package

00:38:36,740 --> 00:38:41,000
managers really should do their job

00:38:38,329 --> 00:38:42,680
because I had a few commits for this

00:38:41,000 --> 00:38:45,200
release and after that release they were

00:38:42,680 --> 00:38:47,240
actually fixing security issues but they

00:38:45,200 --> 00:38:50,420
are not tagged as such and were not

00:38:47,240 --> 00:38:52,609
backported so the one who merges the

00:38:50,420 --> 00:38:53,960
pull request has to beg for it if it's

00:38:52,609 --> 00:38:57,410
relevant for firstable

00:38:53,960 --> 00:38:59,119
because like as if said tracking master

00:38:57,410 --> 00:39:00,380
is hard reading all the commits is

00:38:59,119 --> 00:39:01,069
really hard it's a very time-consuming

00:39:00,380 --> 00:39:02,840
job

00:39:01,069 --> 00:39:06,580
oh so everyone could help out

00:39:02,840 --> 00:39:11,960
well can much or at least ping gram

00:39:06,580 --> 00:39:14,600
France Tom and Rob me people people who

00:39:11,960 --> 00:39:17,990
reppin us yeah yeah people who regularly

00:39:14,600 --> 00:39:23,090
back port stuff if it's I don't know too

00:39:17,990 --> 00:39:27,260
much work or too complicated or I don't

00:39:23,090 --> 00:39:30,410
know but at least ping us because we'll

00:39:27,260 --> 00:39:34,790
happily do security backporting

00:39:30,410 --> 00:39:38,660
obviously and that is really important

00:39:34,790 --> 00:39:40,280
that we notice security issues because

00:39:38,660 --> 00:39:45,860
going through all the change locks of

00:39:40,280 --> 00:39:48,950
minor package bounces I don't like it

00:39:45,860 --> 00:39:50,830
well I think Graham will say a bit more

00:39:48,950 --> 00:39:55,340
yeah on that later

00:39:50,830 --> 00:39:58,040
yep right so first of well you did a

00:39:55,340 --> 00:39:59,960
marvelous job at making the drop of

00:39:58,040 --> 00:40:02,390
release manager like a really intriguing

00:39:59,960 --> 00:40:12,680
aspect and I'm like thrilled to do that

00:40:02,390 --> 00:40:16,730
maybe not managers team that would be

00:40:12,680 --> 00:40:18,620
like way less scary because yeah I mean

00:40:16,730 --> 00:40:20,630
to me it seems like a scary aspect and

00:40:18,620 --> 00:40:22,370
in the end of course one person has to

00:40:20,630 --> 00:40:28,250
be bold enough to say BAM let's merge

00:40:22,370 --> 00:40:34,310
but yeah I mean that that is actually

00:40:28,250 --> 00:40:36,710
what we started to do with our FC we now

00:40:34,310 --> 00:40:39,530
always have to release managers for

00:40:36,710 --> 00:40:42,400
release and the cool thing about this we

00:40:39,530 --> 00:40:45,140
have previous release managers who know

00:40:42,400 --> 00:40:51,320
who are they have done it and always can

00:40:45,140 --> 00:40:55,520
jump in and help out yeah so like 1703

00:40:51,320 --> 00:40:59,570
Domon helped me a lot with releasing it

00:40:55,520 --> 00:41:03,230
it's a bit unfair to say that i was the

00:40:59,570 --> 00:41:05,960
release manager of 1703 and then the two

00:41:03,230 --> 00:41:10,660
of us for 1709 because domin actually

00:41:05,960 --> 00:41:10,660
like did quite a lot for 1703 too

00:41:13,250 --> 00:41:18,560
and I would like to get your thoughts on

00:41:15,380 --> 00:41:21,020
that is like this this shade of of how

00:41:18,560 --> 00:41:22,820
many people get merged X's only one hand

00:41:21,020 --> 00:41:25,190
you can say it's a bottleneck right on

00:41:22,820 --> 00:41:27,170
the other hand if you I mean we've seen

00:41:25,190 --> 00:41:29,780
the spikes anyway it but on the other

00:41:27,170 --> 00:41:32,240
hand it's like if we give more if you

00:41:29,780 --> 00:41:34,250
give more access to too many people then

00:41:32,240 --> 00:41:36,170
maybe too much stuff it's getting rich

00:41:34,250 --> 00:41:39,020
maybe already stuff is getting much

00:41:36,170 --> 00:41:40,910
better sometimes wonder like that at

00:41:39,020 --> 00:41:43,970
this point so I wonder what you think

00:41:40,910 --> 00:41:45,380
about the trade-offs that like how many

00:41:43,970 --> 00:41:47,750
people can merge how many should enrich

00:41:45,380 --> 00:41:50,080
should there be some extra tooling to

00:41:47,750 --> 00:41:52,369
limit these things of merging and the

00:41:50,080 --> 00:42:00,830
parts that can be merged by dividuals

00:41:52,369 --> 00:42:04,490
and and stuff like that so my opinion on

00:42:00,830 --> 00:42:07,040
that eventually I would like that know

00:42:04,490 --> 00:42:15,770
that nobody has push access to master

00:42:07,040 --> 00:42:17,540
anymore everything has to go so I've

00:42:15,770 --> 00:42:23,060
pushed a master a lot and a lot of you

00:42:17,540 --> 00:42:25,670
have fixed after me so thank you but the

00:42:23,060 --> 00:42:27,980
thing is pushing to master is nice to

00:42:25,670 --> 00:42:30,980
get stuff out really quickly but we have

00:42:27,980 --> 00:42:34,930
to have Reb you and we should have more

00:42:30,980 --> 00:42:36,980
people being able to merge of course but

00:42:34,930 --> 00:42:39,380
committing directly to master is

00:42:36,980 --> 00:42:40,910
dangerous as we've seen in the past so I

00:42:39,380 --> 00:42:42,680
think we should adopt it at some point

00:42:40,910 --> 00:42:44,900
but first we have to get the tooling

00:42:42,680 --> 00:42:48,859
right yeah it has to be more reliable

00:42:44,900 --> 00:42:51,710
than Travis CI that I mean gram has done

00:42:48,859 --> 00:42:58,089
some work on the giving Dartmouth walk

00:42:51,710 --> 00:43:02,900
yeah Domon and I started building stuff

00:42:58,089 --> 00:43:05,540
to make testing pull requests on hydro

00:43:02,900 --> 00:43:09,680
possible but I haven't finished that and

00:43:05,540 --> 00:43:14,720
I'll definitely have a chat with Graham

00:43:09,680 --> 00:43:17,630
on how to improve all merged our ideas

00:43:14,720 --> 00:43:21,830
and implementations and try and get that

00:43:17,630 --> 00:43:27,020
started as soon as possible but yeah I

00:43:21,830 --> 00:43:30,260
was delayed by being a release manager

00:43:27,020 --> 00:43:33,800
and didn't get as much code out as I

00:43:30,260 --> 00:43:37,640
wanted and now like gathering the

00:43:33,800 --> 00:43:41,290
statistics took me the last two or three

00:43:37,640 --> 00:43:47,200
weeks but yeah that is definitely

00:43:41,290 --> 00:43:47,200
something we will and have to improve on

00:43:48,760 --> 00:43:57,320
and we're back porting so should people

00:43:54,380 --> 00:43:59,990
that are creating poll requested they

00:43:57,320 --> 00:44:02,450
create a separate poll requests for the

00:43:59,990 --> 00:44:04,280
same issue to backport the issue to make

00:44:02,450 --> 00:44:06,290
it easier for you guys or what would be

00:44:04,280 --> 00:44:09,790
the best way to handle that if you don't

00:44:06,290 --> 00:44:13,610
have commit access to cherry-pick it it

00:44:09,790 --> 00:44:15,890
that would be great but if you open a

00:44:13,610 --> 00:44:18,800
pull request you should also test it and

00:44:15,890 --> 00:44:20,960
that's the difficult one because like

00:44:18,800 --> 00:44:23,150
when you ask me to pack but it of course

00:44:20,960 --> 00:44:26,210
I will pack but it but and I'm not sure

00:44:23,150 --> 00:44:28,940
when I will get to it because I have to

00:44:26,210 --> 00:44:32,540
test have to check if everything still

00:44:28,940 --> 00:44:34,220
works and that's difficult but there are

00:44:32,540 --> 00:44:36,290
some improvements in that area because I

00:44:34,220 --> 00:44:38,869
think like practice working on next

00:44:36,290 --> 00:44:41,710
packages tests and there's some more

00:44:38,869 --> 00:44:45,410
stuff of the nexus test going on so yeah

00:44:41,710 --> 00:44:48,140
we have to improve on that too and also

00:44:45,410 --> 00:44:50,660
when we have automated testing this will

00:44:48,140 --> 00:44:54,470
also go away so right now you can open

00:44:50,660 --> 00:44:57,609
pour requests but please ping at least

00:44:54,470 --> 00:45:00,530
some of the release managers about it

00:44:57,609 --> 00:45:02,990
but yeah back parting is also like

00:45:00,530 --> 00:45:04,940
cherry picking is also possible and try

00:45:02,990 --> 00:45:10,540
to get the cherry pick right cherry pick

00:45:04,940 --> 00:45:10,540
- X all right last question

00:45:12,510 --> 00:45:17,670
you were speaking about stats do we have

00:45:15,870 --> 00:45:20,820
stats about the number of commits which

00:45:17,670 --> 00:45:22,890
were made without a poll request sorry

00:45:20,820 --> 00:45:24,990
we asked that about the number of

00:45:22,890 --> 00:45:28,320
commits made without it all requests oh

00:45:24,990 --> 00:45:34,740
no we don't have currently but that is

00:45:28,320 --> 00:45:38,870
something we should do all right

00:45:34,740 --> 00:45:38,870
shouldn't be too hard I think

00:45:39,470 --> 00:45:49,500

YouTube URL: https://www.youtube.com/watch?v=fdj9tzRaLn4


