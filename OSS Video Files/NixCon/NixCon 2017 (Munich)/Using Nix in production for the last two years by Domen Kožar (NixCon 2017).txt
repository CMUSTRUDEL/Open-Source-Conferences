Title: Using Nix in production for the last two years by Domen KoÅ¾ar (NixCon 2017)
Publication date: 2017-10-31
Playlist: NixCon 2017 (Munich)
Description: 
	Talk with go through lessons learned using Nix in last two years to automate software distribution. What are the common technical and process obstacles using Nix to ship software in production - mean that customers depend on the pipeline. What supportive tools and Nix features were used, what Nix features aren't useful, where do I see improvements are needed. What do I see as something that will boost Nix usage in companies and what's my plan to get there.
Captions: 
	00:00:08,889 --> 00:00:15,070
and he's also known for being the only

00:00:12,730 --> 00:00:19,200
one who has access on the github

00:00:15,070 --> 00:00:19,200
organization apart from me

00:00:20,169 --> 00:00:25,149
two years ago he decided to quit his job

00:00:22,419 --> 00:00:28,480
to become a next consultant and he

00:00:25,149 --> 00:00:32,169
created the e/m lembaga and then he was

00:00:28,480 --> 00:00:34,660
managing to nexuses releases in 2016 and

00:00:32,169 --> 00:00:47,230
by the end of 2016

00:00:34,660 --> 00:00:49,150
he joined force with I wish everyone so

00:00:47,230 --> 00:00:53,530
first of all of course I lost my hair

00:00:49,150 --> 00:00:55,570
because of doing too much necks no I've

00:00:53,530 --> 00:00:58,149
started and lambda XC is it's exactly

00:00:55,570 --> 00:01:00,370
one year now and the only thing I would

00:00:58,149 --> 00:01:02,440
like to say I get about every two weeks

00:01:00,370 --> 00:01:05,019
an email for help for consulting so I do

00:01:02,440 --> 00:01:07,930
encourage everyone to start doing Nix

00:01:05,019 --> 00:01:10,780
consulting if that's what you feel you

00:01:07,930 --> 00:01:12,490
would like to try and do and you can

00:01:10,780 --> 00:01:16,000
come to me and talk and ask me any

00:01:12,490 --> 00:01:19,030
questions if you need somehow one of the

00:01:16,000 --> 00:01:21,190
things that Robin actually talked about

00:01:19,030 --> 00:01:25,600
and I would like to add a bit on top of

00:01:21,190 --> 00:01:27,490
that is this graph well first of all

00:01:25,600 --> 00:01:31,119
besides that it's it's kind of you know

00:01:27,490 --> 00:01:33,400
growing from this small group of people

00:01:31,119 --> 00:01:37,689
that you know they heck out something on

00:01:33,400 --> 00:01:39,880
there three times on weekends it's

00:01:37,689 --> 00:01:42,460
obviously becoming a distribution which

00:01:39,880 --> 00:01:46,750
people use every day right and you can

00:01:42,460 --> 00:01:48,430
see that of course this big fluctuations

00:01:46,750 --> 00:01:50,530
between releases are not just security

00:01:48,430 --> 00:01:53,350
issues but I think I would I would claim

00:01:50,530 --> 00:01:56,680
it's also people you know that have

00:01:53,350 --> 00:01:58,869
deadlines and they want to push things

00:01:56,680 --> 00:02:00,880
upstream but but of course they come at

00:01:58,869 --> 00:02:03,130
the very last minute and I think that's

00:02:00,880 --> 00:02:07,630
a sign of maturity although we have to

00:02:03,130 --> 00:02:10,000
rethink how to offload this less time

00:02:07,630 --> 00:02:15,670
released fixes like we talked about

00:02:10,000 --> 00:02:19,750
before at previous talks and and with

00:02:15,670 --> 00:02:22,540
that in mind I think one of the major

00:02:19,750 --> 00:02:24,340
things to reckon reconsider

00:02:22,540 --> 00:02:26,110
is how we do contributions and there is

00:02:24,340 --> 00:02:28,510
a very good blog post why github can

00:02:26,110 --> 00:02:32,439
house the Linux kernel community where

00:02:28,510 --> 00:02:34,930
it talks about when somebody maintains a

00:02:32,439 --> 00:02:38,260
subfolder for example in Ex packages

00:02:34,930 --> 00:02:40,840
let's say Haskell you would have a tree

00:02:38,260 --> 00:02:43,180
of folks that then you contribute for

00:02:40,840 --> 00:02:44,920
example to Peter assignments and and

00:02:43,180 --> 00:02:47,409
then he maintains the Haskell changes

00:02:44,920 --> 00:02:49,870
and then those get pushed as a batch to

00:02:47,409 --> 00:02:52,030
Nick's packages right and then instead

00:02:49,870 --> 00:02:54,159
of like putting everything into master

00:02:52,030 --> 00:02:56,170
you have a fork of master and then

00:02:54,159 --> 00:03:01,590
Haskell changes this is basically how

00:02:56,170 --> 00:03:04,120
kernel is developed and we have this

00:03:01,590 --> 00:03:06,459
master workflow right now in the pull

00:03:04,120 --> 00:03:09,220
request workflow and they're completely

00:03:06,459 --> 00:03:10,870
different and I think most of confusion

00:03:09,220 --> 00:03:14,829
comes from there so why does it matter

00:03:10,870 --> 00:03:16,840
if you're using Nick's as a company you

00:03:14,829 --> 00:03:19,299
like splitting up everything into a

00:03:16,840 --> 00:03:21,340
coherent full request is not that easy

00:03:19,299 --> 00:03:24,159
right you care about a subsystem and you

00:03:21,340 --> 00:03:26,079
do a lot of changes and then you you

00:03:24,159 --> 00:03:28,659
want to push this to upstream to a

00:03:26,079 --> 00:03:30,129
maintainer but we currently say hey you

00:03:28,659 --> 00:03:32,019
you know you're pushing a lot of things

00:03:30,129 --> 00:03:33,970
right now and we this will never get

00:03:32,019 --> 00:03:37,019
reviewed right but we already know for

00:03:33,970 --> 00:03:39,609
example for for Haskell that nobody

00:03:37,019 --> 00:03:41,769
upstream is one package right we for

00:03:39,609 --> 00:03:43,180
example commit everything at one side so

00:03:41,769 --> 00:03:46,030
there is a bit of contradiction there

00:03:43,180 --> 00:03:48,669
and I think this is really important if

00:03:46,030 --> 00:03:50,590
we want to scale in the future to decide

00:03:48,669 --> 00:03:52,720
what are we going to do so this talk is

00:03:50,590 --> 00:03:55,419
going to be mostly about the major pain

00:03:52,720 --> 00:04:02,470
points and some tips that I've gathered

00:03:55,419 --> 00:04:04,690
over the last few years part of the talk

00:04:02,470 --> 00:04:06,819
that Jana said was how do you how do you

00:04:04,690 --> 00:04:10,239
bring NICs to a company but I think one

00:04:06,819 --> 00:04:12,849
of the tiny bits missing and unfold is

00:04:10,239 --> 00:04:15,430
that probably more than anyone else is

00:04:12,849 --> 00:04:17,560
how do you first track someone to use

00:04:15,430 --> 00:04:18,940
necks right because when you have

00:04:17,560 --> 00:04:20,739
deadlines when you have you know

00:04:18,940 --> 00:04:22,900
production code out there you cannot

00:04:20,739 --> 00:04:25,060
just say hey you know what let's just go

00:04:22,900 --> 00:04:26,199
and you know to a nice Island and talk

00:04:25,060 --> 00:04:28,090
about Nix for two weeks

00:04:26,199 --> 00:04:29,919
and then we're going back to real world

00:04:28,090 --> 00:04:31,990
and you know everything's going to be

00:04:29,919 --> 00:04:33,969
fine right and so there needs to be some

00:04:31,990 --> 00:04:36,710
incremental changes how do you get there

00:04:33,969 --> 00:04:38,120
and I found

00:04:36,710 --> 00:04:40,700
actually this block flows to be very

00:04:38,120 --> 00:04:43,610
very nice for people and and one

00:04:40,700 --> 00:04:45,320
disclaimer I always work with people

00:04:43,610 --> 00:04:46,910
that have been previously exposed with

00:04:45,320 --> 00:04:51,350
functional programming so that doesn't

00:04:46,910 --> 00:04:53,030
that didn't need to be explained the

00:04:51,350 --> 00:04:54,410
concepts behind it but they did they

00:04:53,030 --> 00:04:56,330
still need to know how NICs language

00:04:54,410 --> 00:05:00,230
works but they're usually used to work

00:04:56,330 --> 00:05:02,780
with types and so on but besides going

00:05:00,230 --> 00:05:04,460
from you know the language itself how do

00:05:02,780 --> 00:05:06,770
you how do you contribute uniques

00:05:04,460 --> 00:05:08,390
packages and a whole ecosystem that

00:05:06,770 --> 00:05:11,600
there is still some pieces missing there

00:05:08,390 --> 00:05:14,750
and I mean interested what's your what's

00:05:11,600 --> 00:05:17,180
your do you have some suggestions of you

00:05:14,750 --> 00:05:19,850
do you have so your own approach then so

00:05:17,180 --> 00:05:23,870
if yeah I'm interested to talk about

00:05:19,850 --> 00:05:26,240
that if somebody has something to add so

00:05:23,870 --> 00:05:28,100
I think that's one of the things that I

00:05:26,240 --> 00:05:30,740
would like to work on when I have

00:05:28,100 --> 00:05:32,090
finally have some more free time and and

00:05:30,740 --> 00:05:34,070
and this is actually part of this

00:05:32,090 --> 00:05:37,820
gradual process of Nixa fiying right you

00:05:34,070 --> 00:05:42,260
go from these impure packaging slowly to

00:05:37,820 --> 00:05:44,150
to completely Nick safai your company or

00:05:42,260 --> 00:05:46,490
whatever project that you have right and

00:05:44,150 --> 00:05:49,160
this is a process and and you cannot say

00:05:46,490 --> 00:05:50,480
again yeah we're just gonna do one month

00:05:49,160 --> 00:05:53,360
and it's going to be done and then

00:05:50,480 --> 00:05:56,030
everything will be Nick's based so and

00:05:53,360 --> 00:05:58,190
this was the talk that Yanis that's what

00:05:56,030 --> 00:06:00,620
Tiana's was speaking about and I think

00:05:58,190 --> 00:06:03,620
that there are some things that we need

00:06:00,620 --> 00:06:05,500
to fix in order to get this process a

00:06:03,620 --> 00:06:12,080
bit nicer

00:06:05,500 --> 00:06:14,690
so okay in enix itself we have a couple

00:06:12,080 --> 00:06:16,400
of functions how do you get a source but

00:06:14,690 --> 00:06:18,710
the main problem is although you might

00:06:16,400 --> 00:06:20,990
have the very same source that's you

00:06:18,710 --> 00:06:22,760
know can't the its content is is always

00:06:20,990 --> 00:06:26,120
the same you will you will get

00:06:22,760 --> 00:06:28,430
completely different hashes and this is

00:06:26,120 --> 00:06:30,530
this is quite painful once you move away

00:06:28,430 --> 00:06:33,230
from Nick's packages and you're using

00:06:30,530 --> 00:06:34,850
mixed packages right or and it's in any

00:06:33,230 --> 00:06:37,690
disguise it's just custom software

00:06:34,850 --> 00:06:43,010
living in any separate river rhine and

00:06:37,690 --> 00:06:45,200
so for example Hedra Nick's preface

00:06:43,010 --> 00:06:47,060
Gates has a different kind of behavior

00:06:45,200 --> 00:06:49,040
that Nick's packages okay we can merge

00:06:47,060 --> 00:06:50,070
the two and you know that's gonna get

00:06:49,040 --> 00:06:53,130
fixed but

00:06:50,070 --> 00:06:57,030
still you have fed good and fetch

00:06:53,130 --> 00:06:59,400
terrible and dot slash dot right and the

00:06:57,030 --> 00:07:01,680
main problem is that all of these have a

00:06:59,400 --> 00:07:04,680
different derivation name at it is part

00:07:01,680 --> 00:07:08,490
of the inputs right so because these are

00:07:04,680 --> 00:07:10,920
kind of nice names for fur fur you know

00:07:08,490 --> 00:07:13,680
a human then that means that you have to

00:07:10,920 --> 00:07:16,440
rebuild your whole package because this

00:07:13,680 --> 00:07:20,010
this is an input to your derivation and

00:07:16,440 --> 00:07:24,120
it will change the hash and particularly

00:07:20,010 --> 00:07:27,840
the last one is is the worst because who

00:07:24,120 --> 00:07:34,320
knows where does this name come from if

00:07:27,840 --> 00:07:36,510
you use a dot slash dot sorry yeah it's

00:07:34,320 --> 00:07:39,450
a parent directory so what does that

00:07:36,510 --> 00:07:40,620
mean if you build this package on hit

00:07:39,450 --> 00:07:43,020
right it's going to have a completely

00:07:40,620 --> 00:07:45,240
different parent directory then on your

00:07:43,020 --> 00:07:47,370
local machine or someone else will have

00:07:45,240 --> 00:07:49,320
a different parent directory they might

00:07:47,370 --> 00:07:52,950
call the dev they might call it you know

00:07:49,320 --> 00:07:54,540
temp or whatever right so it to some

00:07:52,950 --> 00:07:57,420
extent it breaks referential

00:07:54,540 --> 00:08:00,780
transparency because for example mix-ups

00:07:57,420 --> 00:08:03,570
default dot nix uses dot slash dot and

00:08:00,780 --> 00:08:05,840
if you build that on on Hedra you will

00:08:03,570 --> 00:08:08,370
never be able to fetch that binary

00:08:05,840 --> 00:08:10,560
because it will have a different name

00:08:08,370 --> 00:08:12,180
and and this is extremely extremely

00:08:10,560 --> 00:08:15,300
painful especially if you have big

00:08:12,180 --> 00:08:15,930
builds right so okay so how do we fix

00:08:15,300 --> 00:08:20,040
that right

00:08:15,930 --> 00:08:22,710
well we have to sacrifice probably the

00:08:20,040 --> 00:08:26,610
human readable name and just fix to skip

00:08:22,710 --> 00:08:28,440
you know stick to something but there is

00:08:26,610 --> 00:08:31,920
as far as I know and correct me if I'm

00:08:28,440 --> 00:08:33,990
wrong there is no primitive Linux which

00:08:31,920 --> 00:08:37,979
would allow you to switch the name but

00:08:33,990 --> 00:08:40,710
but to keep everything else and I I

00:08:37,979 --> 00:08:44,160
think that's probably we could add some

00:08:40,710 --> 00:08:47,100
kind of a rename derivation name but

00:08:44,160 --> 00:08:49,950
then you would have to for example wrap

00:08:47,100 --> 00:08:52,140
that using the dead slash dot dot slash

00:08:49,950 --> 00:08:57,480
dot and you would have a new primitive

00:08:52,140 --> 00:08:59,670
for accessing a current folder and I

00:08:57,480 --> 00:09:01,860
think that's without sacrificing

00:08:59,670 --> 00:09:03,610
backwards compatibility that's probably

00:09:01,860 --> 00:09:05,370
the only sane way

00:09:03,610 --> 00:09:09,970
and we have to talk about this because

00:09:05,370 --> 00:09:11,889
it is it is in practice really painful

00:09:09,970 --> 00:09:12,610
for example right now we use a fork of

00:09:11,889 --> 00:09:14,800
mix-ups

00:09:12,610 --> 00:09:16,899
but we always rebuild it because it

00:09:14,800 --> 00:09:23,290
doesn't get the package from from the

00:09:16,899 --> 00:09:26,410
binary cash okay we talked about pinning

00:09:23,290 --> 00:09:29,380
Knicks packages and you know as you as

00:09:26,410 --> 00:09:32,050
you as you create your your custom repo

00:09:29,380 --> 00:09:33,880
with all the fixes you know which custom

00:09:32,050 --> 00:09:37,329
dick size modules with custom packages

00:09:33,880 --> 00:09:40,990
and so on you start to put you start to

00:09:37,329 --> 00:09:42,670
put the the the pinning or but first you

00:09:40,990 --> 00:09:44,290
don't spin at all right and then sand it

00:09:42,670 --> 00:09:45,339
breaks okay then you start pinning and

00:09:44,290 --> 00:09:49,329
then you have these different places

00:09:45,339 --> 00:09:51,940
like in shells you have you pin and you

00:09:49,329 --> 00:09:54,459
painting Knicks and you pin in in shell

00:09:51,940 --> 00:09:56,259
scripts and you paint on Hedra and so on

00:09:54,459 --> 00:09:58,480
right so then you have this then you

00:09:56,259 --> 00:10:00,370
have to maintain the spins Knicks

00:09:58,480 --> 00:10:02,230
packages at six places right and then

00:10:00,370 --> 00:10:06,310
you're like okay now we have to clear

00:10:02,230 --> 00:10:09,569
this up right and you know and another

00:10:06,310 --> 00:10:12,610
problem that happens is even if you pin

00:10:09,569 --> 00:10:14,709
when you say Knicks packages these will

00:10:12,610 --> 00:10:16,029
always you can always leak the hosts if

00:10:14,709 --> 00:10:18,190
you don't set it correctly right and

00:10:16,029 --> 00:10:20,350
then you have a problem of using two

00:10:18,190 --> 00:10:21,610
different ones and you know we have

00:10:20,350 --> 00:10:23,440
different concepts how the Knicks

00:10:21,610 --> 00:10:27,069
packages is is the search pad is

00:10:23,440 --> 00:10:29,199
populated but we have found that the

00:10:27,069 --> 00:10:31,569
only way to really make this reliable is

00:10:29,199 --> 00:10:34,750
basically to force the Knicks path to be

00:10:31,569 --> 00:10:38,470
empty and then use and dependence

00:10:34,750 --> 00:10:40,149
packages locally so so as docto it is

00:10:38,470 --> 00:10:42,220
was this was actually a joint effort

00:10:40,149 --> 00:10:44,139
from you know multiple people I don't

00:10:42,220 --> 00:10:45,699
take any credit for him or actually most

00:10:44,139 --> 00:10:48,819
of the things I talk about it's it's not

00:10:45,699 --> 00:10:54,100
my work it's just how do you get things

00:10:48,819 --> 00:10:56,139
done right and and and so this is this

00:10:54,100 --> 00:10:59,110
works right so this is a small snippet

00:10:56,139 --> 00:11:00,220
you copy paste to every repo because I

00:10:59,110 --> 00:11:03,040
mean it solves the problem of

00:11:00,220 --> 00:11:05,259
bootstrapping mix packages so you cannot

00:11:03,040 --> 00:11:07,089
pull from ups from somewhere and then

00:11:05,259 --> 00:11:09,579
bootstrap because that that's kind of

00:11:07,089 --> 00:11:12,880
what you want to solve right so what it

00:11:09,579 --> 00:11:16,660
does is it uses the built-in derivation

00:11:12,880 --> 00:11:18,760
and the the fetch URL

00:11:16,660 --> 00:11:20,440
and some local paths and actually the

00:11:18,760 --> 00:11:22,930
trick is to use the store pad so that

00:11:20,440 --> 00:11:26,140
you can actually make this available in

00:11:22,930 --> 00:11:28,090
sandboxes and and then you build this

00:11:26,140 --> 00:11:30,760
and you get mix packages at the relation

00:11:28,090 --> 00:11:34,360
time and you can just reuse that right

00:11:30,760 --> 00:11:36,370
and we store the mix packages source in

00:11:34,360 --> 00:11:38,020
JSON file and then we have a small

00:11:36,370 --> 00:11:39,850
command that just bombs that you say you

00:11:38,020 --> 00:11:43,570
know set revision to something and it

00:11:39,850 --> 00:11:45,370
will update that and it's very nice and

00:11:43,570 --> 00:11:47,140
and and the best thing about this is you

00:11:45,370 --> 00:11:49,510
can have multiple of those files right

00:11:47,140 --> 00:11:51,520
or you could generalize it that it would

00:11:49,510 --> 00:11:54,250
consume multiple JSON files so you could

00:11:51,520 --> 00:11:55,780
have multiple mix packages and use it

00:11:54,250 --> 00:11:58,150
you know for example if there is a bug

00:11:55,780 --> 00:12:00,130
you could have two different ones and

00:11:58,150 --> 00:12:02,020
one packages build with one expected use

00:12:00,130 --> 00:12:04,300
version and the other one is with the

00:12:02,020 --> 00:12:06,730
first one right and actually we do that

00:12:04,300 --> 00:12:08,230
for for for the Haskell software itself

00:12:06,730 --> 00:12:10,870
we use the different mixed packages and

00:12:08,230 --> 00:12:16,240
then for the machines we use a more

00:12:10,870 --> 00:12:18,880
stable version and that's mainly because

00:12:16,240 --> 00:12:21,820
of Darwin we try to use the stable mixes

00:12:18,880 --> 00:12:23,620
release for the servers but unstable so

00:12:21,820 --> 00:12:26,340
that we can get the darwin packages

00:12:23,620 --> 00:12:29,500
although that's about to change

00:12:26,340 --> 00:12:31,480
okay so so how do you use that okay

00:12:29,500 --> 00:12:33,340
first you set the name cleaning spat of

00:12:31,480 --> 00:12:35,110
course it can be populated but the best

00:12:33,340 --> 00:12:37,990
way to make sure that none of the other

00:12:35,110 --> 00:12:40,060
stuff leaks in it's very good to it and

00:12:37,990 --> 00:12:41,500
to enforce that and then if you want to

00:12:40,060 --> 00:12:44,950
use it in mixed scripts you just say you

00:12:41,500 --> 00:12:45,580
know export mix pad and you can do it

00:12:44,950 --> 00:12:47,560
like that

00:12:45,580 --> 00:12:49,210
although preferably if you're just using

00:12:47,560 --> 00:12:53,610
makes you import it directly from the

00:12:49,210 --> 00:12:56,170
links file one one morning though if

00:12:53,610 --> 00:12:58,810
people are using for example Gentoo

00:12:56,170 --> 00:13:01,030
installed makes the the fetcher the the

00:12:58,810 --> 00:13:02,770
config that needs cats will have impure

00:13:01,030 --> 00:13:04,360
parts and this won't work and the

00:13:02,770 --> 00:13:06,400
workaround is of course to install mix

00:13:04,360 --> 00:13:10,600
with nix and then you get the the one

00:13:06,400 --> 00:13:13,480
that has the next balance so this this

00:13:10,600 --> 00:13:16,930
works pretty reliably and in one point

00:13:13,480 --> 00:13:20,350
well hopefully this is all gone because

00:13:16,930 --> 00:13:23,320
you can add the shah attribute of

00:13:20,350 --> 00:13:26,470
vegetable and i actually think that's

00:13:23,320 --> 00:13:29,589
probably we might just use fetch URL and

00:13:26,470 --> 00:13:30,640
add ability to unpack but yeah it's just

00:13:29,589 --> 00:13:38,649
an api thingy

00:13:30,640 --> 00:13:42,700
all right so there is there is a special

00:13:38,649 --> 00:13:45,670
type in well in Enix where you can

00:13:42,700 --> 00:13:47,950
actually have a URL without the string

00:13:45,670 --> 00:13:54,730
without the quotes right but a side

00:13:47,950 --> 00:13:57,130
effect has due to the error of see a you

00:13:54,730 --> 00:13:59,019
know column a is considered as an URL

00:13:57,130 --> 00:14:03,130
and it's converted into a string right

00:13:59,019 --> 00:14:05,860
so III think that we should we should

00:14:03,130 --> 00:14:08,200
probably this allows such things because

00:14:05,860 --> 00:14:09,700
they're not so useful and I think I

00:14:08,200 --> 00:14:13,060
don't think we're gonna break anyone's

00:14:09,700 --> 00:14:16,060
code maybe we're gonna make it work

00:14:13,060 --> 00:14:18,459
and this is really painful why is it

00:14:16,060 --> 00:14:21,279
painful right well because we don't have

00:14:18,459 --> 00:14:22,839
types right and then you get this kind

00:14:21,279 --> 00:14:25,870
of error when something inspected a

00:14:22,839 --> 00:14:27,430
function and well it's really a string

00:14:25,870 --> 00:14:28,810
right I mean it's not specifically this

00:14:27,430 --> 00:14:31,329
one it would be a probably a bit

00:14:28,810 --> 00:14:34,420
different right and and and this is this

00:14:31,329 --> 00:14:37,029
is really painful because it's not easy

00:14:34,420 --> 00:14:41,290
to debug right and and this one one-line

00:14:37,029 --> 00:14:46,390
whitespace changes are you know a waste

00:14:41,290 --> 00:14:50,649
of time right another example is is

00:14:46,390 --> 00:14:52,180
multi-line multi-line string so so who

00:14:50,649 --> 00:14:57,550
who has an idea what's wrong with this

00:14:52,180 --> 00:14:59,769
example yes they dentition is wrong so

00:14:57,550 --> 00:15:02,320
to put it in perspective our monitoring

00:14:59,769 --> 00:15:05,350
system didn't work because somebody did

00:15:02,320 --> 00:15:07,329
something like that and it was offset of

00:15:05,350 --> 00:15:09,490
course the positon past yama fall and

00:15:07,329 --> 00:15:11,079
say oh I don't see any contents and the

00:15:09,490 --> 00:15:12,970
monitoring system just didn't have

00:15:11,079 --> 00:15:16,390
anything configure right this is the

00:15:12,970 --> 00:15:18,600
effect of these things and you look up

00:15:16,390 --> 00:15:21,730
because we kind of rely on indentation

00:15:18,600 --> 00:15:23,320
in X and we assume it works this is

00:15:21,730 --> 00:15:25,720
actually one carrier that we have found

00:15:23,320 --> 00:15:28,630
it is extremely painful right and of

00:15:25,720 --> 00:15:30,370
course now if you want to fix that it's

00:15:28,630 --> 00:15:34,589
it's not easy because you would

00:15:30,370 --> 00:15:37,480
essentially break compatibility right if

00:15:34,589 --> 00:15:39,100
if you would change the semantics there

00:15:37,480 --> 00:15:41,860
would be a white space change and you

00:15:39,100 --> 00:15:44,290
will get completely different stop right

00:15:41,860 --> 00:15:46,329
so by using different nix versions

00:15:44,290 --> 00:15:48,820
you would have different hashes right so

00:15:46,329 --> 00:15:52,000
if we ought to fix this it's gotta be

00:15:48,820 --> 00:15:54,250
you know Nix 2.0 although talk to Python

00:15:52,000 --> 00:15:55,930
guys what happens when you when you

00:15:54,250 --> 00:15:57,279
change backwards compatibility right

00:15:55,930 --> 00:15:59,579
there is lessons to be learned but it's

00:15:57,279 --> 00:15:59,579
not impossible

00:16:00,690 --> 00:16:08,680
yeah that's and there's actually a pull

00:16:03,490 --> 00:16:17,560
request by byelarus as he was speaking

00:16:08,680 --> 00:16:19,449
before to fix that so alright so just to

00:16:17,560 --> 00:16:21,880
be clear I'm not I'm not trying to say

00:16:19,449 --> 00:16:23,319
Nick is bad we have done great things

00:16:21,880 --> 00:16:25,209
with ningke's I'm really happy I'm

00:16:23,319 --> 00:16:26,980
trying to point out what are the anti

00:16:25,209 --> 00:16:32,620
pattern cynics that you have to be

00:16:26,980 --> 00:16:34,690
careful about right so okay then we have

00:16:32,620 --> 00:16:41,860
two types one is string and one is path

00:16:34,690 --> 00:16:44,730
and one pulls in a folder to Mixter and

00:16:41,860 --> 00:16:47,920
one just reference it as a string right

00:16:44,730 --> 00:16:50,290
and and okay this is how you do it if

00:16:47,920 --> 00:16:53,680
you want to go from path to string you

00:16:50,290 --> 00:16:55,269
just to string function right oh and

00:16:53,680 --> 00:16:57,699
then you're like okay but let's go from

00:16:55,269 --> 00:17:00,010
string to path back right and there is a

00:16:57,699 --> 00:17:01,240
built-in called two paths as well but it

00:17:00,010 --> 00:17:09,790
doesn't do anything useful

00:17:01,240 --> 00:17:11,860
really you still get a string so okay so

00:17:09,790 --> 00:17:14,020
how do you actually do that well if you

00:17:11,860 --> 00:17:16,169
first assign something and concatenate

00:17:14,020 --> 00:17:19,150
with a path then you get nothing useful

00:17:16,169 --> 00:17:21,220
but actually the two part function is is

00:17:19,150 --> 00:17:22,689
the second example where you first take

00:17:21,220 --> 00:17:25,150
a path and then Kinkaid in the string

00:17:22,689 --> 00:17:29,650
and then you can actually you know do

00:17:25,150 --> 00:17:36,250
that alright it's painful but it's

00:17:29,650 --> 00:17:38,049
doable and even more strings are not as

00:17:36,250 --> 00:17:40,720
simple as strings there is actually

00:17:38,049 --> 00:17:43,059
strings and strings with context so what

00:17:40,720 --> 00:17:45,010
does that mean a context means that

00:17:43,059 --> 00:17:47,409
these strings refers to a derivation and

00:17:45,010 --> 00:17:49,870
if you if you use a string summer than

00:17:47,409 --> 00:17:51,400
it will the that derivation will depend

00:17:49,870 --> 00:17:53,679
on that derivation which is in the

00:17:51,400 --> 00:17:56,049
context of the string right so you can

00:17:53,679 --> 00:17:58,179
discard the string context or not and

00:17:56,049 --> 00:17:59,740
and for example next right

00:17:58,179 --> 00:18:01,960
doesn't make a difference between the

00:17:59,740 --> 00:18:04,899
two strings right

00:18:01,960 --> 00:18:06,279
so and if you use two string and unsafe

00:18:04,899 --> 00:18:07,809
discard string contains a different

00:18:06,279 --> 00:18:11,830
order you get different things and

00:18:07,809 --> 00:18:13,509
they're both string right so there is

00:18:11,830 --> 00:18:16,960
actually a stack overflow question I

00:18:13,509 --> 00:18:18,669
think that Niklas answered it probably

00:18:16,960 --> 00:18:22,059
needs a bit more work that it's going to

00:18:18,669 --> 00:18:24,759
be complete but I would really like to

00:18:22,059 --> 00:18:27,509
have a really good explanation of how

00:18:24,759 --> 00:18:30,460
this works so that it's clear for people

00:18:27,509 --> 00:18:32,379
I've just presented the problem I didn't

00:18:30,460 --> 00:18:35,950
go and actually try to make total sense

00:18:32,379 --> 00:18:37,990
of it so okay we have some you know bad

00:18:35,950 --> 00:18:39,610
parts and inks that's fine javascript

00:18:37,990 --> 00:18:43,840
has those as well and it's widely used

00:18:39,610 --> 00:18:45,820
right so one of the one of the

00:18:43,840 --> 00:18:47,320
approaches how to fix that is is by

00:18:45,820 --> 00:18:48,639
Gabriel and I really like his work

00:18:47,320 --> 00:18:50,919
because he's trying to be really

00:18:48,639 --> 00:18:52,600
pragmatic of you know how do we fix

00:18:50,919 --> 00:18:54,519
things and he he did a Munich hack

00:18:52,600 --> 00:18:57,009
project to basically write a Nick's

00:18:54,519 --> 00:18:58,600
format which would then basically some

00:18:57,009 --> 00:19:00,129
kind of a static analyzer which would

00:18:58,600 --> 00:19:01,869
say ah you're doing crazy things like

00:19:00,129 --> 00:19:04,690
don't kind of concatenate multi-line

00:19:01,869 --> 00:19:07,749
strings because you know that's gonna

00:19:04,690 --> 00:19:10,269
end not end well right it's not it's not

00:19:07,749 --> 00:19:13,960
completely working because the powers of

00:19:10,269 --> 00:19:16,899
Enochs is is not very well defined or it

00:19:13,960 --> 00:19:18,580
has some special cases with anti quoting

00:19:16,899 --> 00:19:20,320
needs work and their needs there needs

00:19:18,580 --> 00:19:22,779
to be a special moment at implementer to

00:19:20,320 --> 00:19:24,070
handle that with the current puzzle so

00:19:22,779 --> 00:19:25,600
if somebody wants to work with that

00:19:24,070 --> 00:19:28,240
please let me know I would I would

00:19:25,600 --> 00:19:30,279
really love to to basically Bend these

00:19:28,240 --> 00:19:33,190
things in inks and just say don't use to

00:19:30,279 --> 00:19:36,059
pad and so on and of course build the

00:19:33,190 --> 00:19:39,070
tool that tells you some kind of like a

00:19:36,059 --> 00:19:42,610
shell check or or H lint or something

00:19:39,070 --> 00:19:44,200
like that right and then actually we

00:19:42,610 --> 00:19:47,169
could just you know get a habit of using

00:19:44,200 --> 00:19:49,659
this tool and we're pretty good right of

00:19:47,169 --> 00:19:51,610
course we can fix all of those things

00:19:49,659 --> 00:19:55,119
with just static analyzing but I think

00:19:51,610 --> 00:19:56,830
that most of those could be fine well

00:19:55,119 --> 00:19:59,110
then another thing is the the next

00:19:56,830 --> 00:20:00,909
strings are terminated by no so if you

00:19:59,110 --> 00:20:03,549
use random data and you put it in X

00:20:00,909 --> 00:20:09,950
strings you will get well you can see

00:20:03,549 --> 00:20:11,809
the iron but Oh

00:20:09,950 --> 00:20:13,610
basically says it's not the Velux it's

00:20:11,809 --> 00:20:15,950
not a valid strength right and that's

00:20:13,610 --> 00:20:18,889
because it conveys a no and you can

00:20:15,950 --> 00:20:21,649
represent secret so this is this is kind

00:20:18,889 --> 00:20:23,960
of painful okay if you if you put a

00:20:21,649 --> 00:20:25,760
secret interest ring and you import it

00:20:23,960 --> 00:20:28,279
into your store then it's insecure right

00:20:25,760 --> 00:20:30,380
but sometimes that's okay for example if

00:20:28,279 --> 00:20:33,919
you have server deployment where you

00:20:30,380 --> 00:20:35,269
know you you there is it's not just such

00:20:33,919 --> 00:20:39,169
a security threat or something like that

00:20:35,269 --> 00:20:42,320
so we added for example key file tunics

00:20:39,169 --> 00:20:44,029
ops which instead of taking a string

00:20:42,320 --> 00:20:45,919
that's then copy to a machine it takes a

00:20:44,029 --> 00:20:49,639
pad so it doesn't go to Nick strings at

00:20:45,919 --> 00:20:52,490
all and it's just copied over but in

00:20:49,639 --> 00:20:56,149
general if we ever want to support

00:20:52,490 --> 00:20:58,309
proper encrypted string lines if we want

00:20:56,149 --> 00:21:02,049
to represent them in in Nick's as a text

00:20:58,309 --> 00:21:02,049
and this will probably have to be solved

00:21:02,260 --> 00:21:10,789
okay enough of ningke's let's go to new

00:21:05,389 --> 00:21:14,179
shops so one of the things that that I

00:21:10,789 --> 00:21:21,110
got bitten by is that actually who knows

00:21:14,179 --> 00:21:25,850
how long it takes to evaluate this it's

00:21:21,110 --> 00:21:29,539
about half a second right and one thing

00:21:25,850 --> 00:21:33,710
to be aware of that if you if you

00:21:29,539 --> 00:21:36,529
evaluate an eClass system it is one

00:21:33,710 --> 00:21:39,620
thing like all the modules are evaluated

00:21:36,529 --> 00:21:42,679
and if you have multiple machines there

00:21:39,620 --> 00:21:45,470
is no sharing between that you evaluate

00:21:42,679 --> 00:21:47,210
one machine one exercise machine and and

00:21:45,470 --> 00:21:54,230
another one and so on so it's basically

00:21:47,210 --> 00:21:57,409
completely linear so okay so for one of

00:21:54,230 --> 00:21:59,450
the clients basically I misused or

00:21:57,409 --> 00:22:02,240
abused or whatever you want to call that

00:21:59,450 --> 00:22:04,760
next to to run benchmarks right so we

00:22:02,240 --> 00:22:06,230
have this thing in Nix we can in a

00:22:04,760 --> 00:22:09,590
derivation we can say this derivation

00:22:06,230 --> 00:22:11,990
has a feature of KVM and that means it

00:22:09,590 --> 00:22:15,649
needs kayvyun to run and then Hedra is

00:22:11,990 --> 00:22:18,679
able to say oh this machine actually can

00:22:15,649 --> 00:22:22,399
run KVM or only this machine can only

00:22:18,679 --> 00:22:23,750
run KTN so I used that basically because

00:22:22,399 --> 00:22:27,590
we were doing snap

00:22:23,750 --> 00:22:31,160
high-speed networking protocol and and

00:22:27,590 --> 00:22:35,300
we would use and we would use and Hedra

00:22:31,160 --> 00:22:38,090
basically 2gc boot benchmarks one per

00:22:35,300 --> 00:22:41,570
machine and with specialized software in

00:22:38,090 --> 00:22:43,550
a control team isolated environment run

00:22:41,570 --> 00:22:46,850
those benchmark so i'm and what we

00:22:43,550 --> 00:22:48,770
wanted to know is that if we take

00:22:46,850 --> 00:22:51,020
different kind of kernel version

00:22:48,770 --> 00:22:53,740
different kind of QE MO and different

00:22:51,020 --> 00:22:57,020
kind of our software and so on build

00:22:53,740 --> 00:23:00,140
bigger build metrics of things and and

00:22:57,020 --> 00:23:02,210
see if there's any regressions and and

00:23:00,140 --> 00:23:04,370
we also had support to like patch those

00:23:02,210 --> 00:23:05,960
so you could like for example we had

00:23:04,370 --> 00:23:08,480
some patches so we could compare them

00:23:05,960 --> 00:23:11,060
patch software versus other software and

00:23:08,480 --> 00:23:13,850
this is just what snippet so basically

00:23:11,060 --> 00:23:15,740
it's you know it's a flat map some sort

00:23:13,850 --> 00:23:17,900
and then in the middle it selects

00:23:15,740 --> 00:23:19,640
benchmarks and the benchmark name is a

00:23:17,900 --> 00:23:21,830
list of benchmarks you want to run and

00:23:19,640 --> 00:23:23,990
then it runs and then it puts all the

00:23:21,830 --> 00:23:26,240
inputs that those differ from right and

00:23:23,990 --> 00:23:29,240
then it basically builds one and then

00:23:26,240 --> 00:23:31,970
just basically fat naps everything into

00:23:29,240 --> 00:23:36,350
one big attribute itself but you can

00:23:31,970 --> 00:23:40,760
also do a list so the problem here was

00:23:36,350 --> 00:23:43,010
that inside there I was building

00:23:40,760 --> 00:23:45,050
I was actually building a VM image that

00:23:43,010 --> 00:23:48,620
would then be used as a kind of a

00:23:45,050 --> 00:23:52,040
fixture right and the problem was if we

00:23:48,620 --> 00:23:55,730
actually built 20,000 packages like that

00:23:52,040 --> 00:23:58,880
and it ever evaluated Nick so as 20000

00:23:55,730 --> 00:24:02,390
times right and that that took actually

00:23:58,880 --> 00:24:05,480
the evaluation took like 20 minutes so

00:24:02,390 --> 00:24:09,470
with this change it only took 10 seconds

00:24:05,480 --> 00:24:11,660
so because because Nick's doesn't do any

00:24:09,470 --> 00:24:15,950
sharing or optimization when you move

00:24:11,660 --> 00:24:19,100
out a creation of the next size of this

00:24:15,950 --> 00:24:22,730
fixture only to be in the the second

00:24:19,100 --> 00:24:26,470
loop right then it doesn't have to do so

00:24:22,730 --> 00:24:29,030
much work and there is actually a paper

00:24:26,470 --> 00:24:36,140
bye-bye kudos or maximum maximum

00:24:29,030 --> 00:24:37,490
laziness and and and it's basically you

00:24:36,140 --> 00:24:40,760
can you can make Nick

00:24:37,490 --> 00:24:42,679
to share things but then GC becomes a

00:24:40,760 --> 00:24:45,200
problem because it basically keeps track

00:24:42,679 --> 00:24:47,690
of of all the inputs and everything and

00:24:45,200 --> 00:24:49,670
it's not there and and it used to be

00:24:47,690 --> 00:24:52,880
part of links actually a couple of years

00:24:49,670 --> 00:24:55,550
ago so how do you debug that there is a

00:24:52,880 --> 00:24:58,309
there is a Knicks count calls which

00:24:55,550 --> 00:25:00,350
basically prints out how many times Nick

00:24:58,309 --> 00:25:02,660
called a preamp and how many times nee

00:25:00,350 --> 00:25:06,320
called something else but what you don't

00:25:02,660 --> 00:25:09,980
get is how long those calls took and you

00:25:06,320 --> 00:25:12,559
know evaluating in in my case the the

00:25:09,980 --> 00:25:15,470
Nick saw is evil one call too many times

00:25:12,559 --> 00:25:18,380
right so it was not useful so I couldn't

00:25:15,470 --> 00:25:20,540
find a better way and you know probably

00:25:18,380 --> 00:25:21,740
probably there is a better way and I'm

00:25:20,540 --> 00:25:24,679
interested to hear that but I I

00:25:21,740 --> 00:25:27,620
basically just did bisect so it pulled

00:25:24,679 --> 00:25:30,200
code out until I got to the point where

00:25:27,620 --> 00:25:31,910
I found out oh it's it's the it's the

00:25:30,200 --> 00:25:34,179
fixtures and then I figured out that

00:25:31,910 --> 00:25:36,890
what's the problem

00:25:34,179 --> 00:25:39,679
so there is some tooling probably to be

00:25:36,890 --> 00:25:41,210
developed around this or we can just

00:25:39,679 --> 00:25:45,200
identify what are the things that are

00:25:41,210 --> 00:25:48,650
really painful here one of the

00:25:45,200 --> 00:25:50,750
anti-patterns is that you you when you

00:25:48,650 --> 00:25:53,870
use Nick's OS modules you wrap them into

00:25:50,750 --> 00:25:55,160
you know other functions and this is

00:25:53,870 --> 00:25:57,679
terrible don't do this

00:25:55,160 --> 00:26:00,380
it's very tempted there's some faulty of

00:25:57,679 --> 00:26:02,809
this so guilty as charged but what what

00:26:00,380 --> 00:26:06,620
happens then is that when you actually

00:26:02,809 --> 00:26:08,300
specify inputs it's it's not a file by

00:26:06,620 --> 00:26:10,130
this thing but it's actually a function

00:26:08,300 --> 00:26:11,809
that you I mean an actual module that

00:26:10,130 --> 00:26:14,300
you pass and that messes up with

00:26:11,809 --> 00:26:16,910
ningke's OS because it doesn't know that

00:26:14,300 --> 00:26:20,330
it it's a few things it does are

00:26:16,910 --> 00:26:22,700
basically gone for example you might

00:26:20,330 --> 00:26:24,679
lose the line numbers and then your MMS

00:26:22,700 --> 00:26:26,780
is going to be anonymous function that

00:26:24,679 --> 00:26:28,330
unknown file failed right and then you

00:26:26,780 --> 00:26:33,740
have no idea what happened

00:26:28,330 --> 00:26:40,070
so no don't do that this is this is one

00:26:33,740 --> 00:26:42,800
of the worst things and and another

00:26:40,070 --> 00:26:45,080
trick is we have Nick saw as tests right

00:26:42,800 --> 00:26:46,820
and and then it suddenly fails and you

00:26:45,080 --> 00:26:48,710
want to know what's going on but there

00:26:46,820 --> 00:26:51,140
is no way to go into that machine and

00:26:48,710 --> 00:26:51,389
inspect it say it so I have this local

00:26:51,140 --> 00:26:54,269
PI

00:26:51,389 --> 00:26:56,190
from time to time and I know how it's

00:26:54,269 --> 00:26:59,099
really upstream it is that you tell the

00:26:56,190 --> 00:27:01,349
VDS which to basically expose the

00:26:59,099 --> 00:27:04,079
network in excess on tab zero interface

00:27:01,349 --> 00:27:06,929
and then if you if you just add you know

00:27:04,079 --> 00:27:09,269
you have to start SSH and add your some

00:27:06,929 --> 00:27:12,570
key to your Nix OS machines but then you

00:27:09,269 --> 00:27:14,489
can actually go and ssh into those Nix

00:27:12,570 --> 00:27:16,919
OS tests and you can you know I just

00:27:14,489 --> 00:27:19,649
create these big sleep thingies sleep

00:27:16,919 --> 00:27:22,679
for two hours and then is is a chin to

00:27:19,649 --> 00:27:25,440
the chest and and I can inspect what's

00:27:22,679 --> 00:27:27,539
going on there and and I think this is

00:27:25,440 --> 00:27:29,489
this is really useful because otherwise

00:27:27,539 --> 00:27:31,349
it's like Travis you know it runs there

00:27:29,489 --> 00:27:33,839
and you cannot access it and and why do

00:27:31,349 --> 00:27:37,139
that if we are able to run the DBMS

00:27:33,839 --> 00:27:40,099
locally right so another thing that

00:27:37,139 --> 00:27:45,049
probably needs to be up streams and done

00:27:40,099 --> 00:27:45,049
properly how am i doing on time

00:27:47,899 --> 00:27:58,259
ten minutes oh okay that might do all

00:27:52,379 --> 00:27:59,879
right so NIC stops my major problem with

00:27:58,259 --> 00:28:03,149
Nick sobs it's it's really imperative

00:27:59,879 --> 00:28:05,339
right you you have to run steps you have

00:28:03,149 --> 00:28:07,709
to run set arguments you have to run

00:28:05,339 --> 00:28:11,669
this thing and other thing and so on so

00:28:07,709 --> 00:28:14,249
in our H K we created this small wrapper

00:28:11,669 --> 00:28:16,369
in Haskell around it and then make it a

00:28:14,249 --> 00:28:18,929
bit declarative it's not general purpose

00:28:16,369 --> 00:28:22,769
maybe one day it will be when we have

00:28:18,929 --> 00:28:24,359
time but the idea is that you you you

00:28:22,769 --> 00:28:27,440
can specify what arguments are passed

00:28:24,359 --> 00:28:30,659
and they're tagged by by Haskell type

00:28:27,440 --> 00:28:34,289
and you know for example what files you

00:28:30,659 --> 00:28:37,139
want the deployment to be so for example

00:28:34,289 --> 00:28:38,969
in Ex ups if you if you add a file to

00:28:37,139 --> 00:28:42,570
the deployment you have to call mix-ups

00:28:38,969 --> 00:28:44,309
modify - - to modify that state and so

00:28:42,570 --> 00:28:46,379
on and this does everything in the

00:28:44,309 --> 00:28:48,629
background so every time you run you

00:28:46,379 --> 00:28:50,429
know deploy it basically sets the

00:28:48,629 --> 00:28:54,419
arguments it modifies things so it's

00:28:50,429 --> 00:28:56,969
pretty much declarative and then what we

00:28:54,419 --> 00:28:59,249
also can do then is like we can say oh

00:28:56,969 --> 00:29:00,719
if you have for example Explorer in

00:28:59,249 --> 00:29:02,369
there we're going to do something a bit

00:29:00,719 --> 00:29:04,289
different right

00:29:02,369 --> 00:29:06,529
and this is actually from our source

00:29:04,289 --> 00:29:06,529
code

00:29:09,720 --> 00:29:14,649
another very nice undocumented feature

00:29:12,789 --> 00:29:17,320
of mix-ups is that you have this default

00:29:14,649 --> 00:29:20,049
stinging and this is an excise module

00:29:17,320 --> 00:29:22,230
which is then included into all machines

00:29:20,049 --> 00:29:26,049
in your NICs webs mix-ups configuration

00:29:22,230 --> 00:29:27,970
so so basically I encourage everyone

00:29:26,049 --> 00:29:31,269
that in here actually you would have a

00:29:27,970 --> 00:29:32,919
list of all your custom modules and then

00:29:31,269 --> 00:29:36,610
they would be available to all of the

00:29:32,919 --> 00:29:38,559
machines right and you can set your your

00:29:36,610 --> 00:29:38,940
for example deployment of holes and so

00:29:38,559 --> 00:29:41,590
on

00:29:38,940 --> 00:29:44,379
otherwise you always have to add for

00:29:41,590 --> 00:29:46,690
each machine and usually you import

00:29:44,379 --> 00:29:47,080
these global mix OS module or something

00:29:46,690 --> 00:29:48,940
like that

00:29:47,080 --> 00:29:50,830
to share the global or common

00:29:48,940 --> 00:29:52,779
configuration but that's what defaults

00:29:50,830 --> 00:29:54,519
does and I've actually documented this

00:29:52,779 --> 00:29:57,659
and in this release it's going to be

00:29:54,519 --> 00:30:00,549
there in the NICS of documentation

00:29:57,659 --> 00:30:03,669
another nice feature that Nix UPS has it

00:30:00,549 --> 00:30:05,019
you can actually get a note attribute

00:30:03,669 --> 00:30:08,440
and this is actually the whole network

00:30:05,019 --> 00:30:11,230
that you define so you can go like notes

00:30:08,440 --> 00:30:16,359
back and to that config and then you

00:30:11,230 --> 00:30:19,629
know get anything and and for example if

00:30:16,359 --> 00:30:21,639
you wanted to create a big cluster that

00:30:19,629 --> 00:30:24,340
and get all the IPS in your network you

00:30:21,639 --> 00:30:25,899
this you can just basically map through

00:30:24,340 --> 00:30:27,879
all the attributes and notes and then

00:30:25,899 --> 00:30:30,190
get the config networking and public ID

00:30:27,879 --> 00:30:32,590
before and you know you cannot it Duty

00:30:30,190 --> 00:30:35,320
and you can access those and then filter

00:30:32,590 --> 00:30:36,850
for example and stuff like that that's

00:30:35,320 --> 00:30:39,429
another feature that's not too

00:30:36,850 --> 00:30:41,080
well-known actually encourage everyone

00:30:39,429 --> 00:30:42,850
that use Nick substitue to go through

00:30:41,080 --> 00:30:46,029
examples because they do include this

00:30:42,850 --> 00:30:47,710
but usually you look at one but for

00:30:46,029 --> 00:30:49,659
example there are gems hidden in like

00:30:47,710 --> 00:30:52,649
you know random files that are unrelated

00:30:49,659 --> 00:30:55,629
I mean they're they don't say we we we

00:30:52,649 --> 00:30:57,309
you know this file basically tries to

00:30:55,629 --> 00:31:00,940
explain defaults but it says so here's

00:30:57,309 --> 00:31:07,470
an example about ec2 right and so it's a

00:31:00,940 --> 00:31:09,850
good idea to go to all of them so we

00:31:07,470 --> 00:31:12,580
have been deploying many Nix ops

00:31:09,850 --> 00:31:16,600
machines and and the defaults once you

00:31:12,580 --> 00:31:18,880
go below ten are a bit not not right for

00:31:16,600 --> 00:31:20,770
example if if you

00:31:18,880 --> 00:31:23,110
if you copy everything from your

00:31:20,770 --> 00:31:24,820
deployment machine to the machine - to

00:31:23,110 --> 00:31:27,550
the deployment machines deployed

00:31:24,820 --> 00:31:30,700
machines and if you have 100 for example

00:31:27,550 --> 00:31:33,160
by default it will only copy four and

00:31:30,700 --> 00:31:35,110
then another four and another four and

00:31:33,160 --> 00:31:37,390
this will take a lot of time right so

00:31:35,110 --> 00:31:40,600
you have to set the max concurrent copy

00:31:37,390 --> 00:31:42,310
to like 20 if you said it too much then

00:31:40,600 --> 00:31:44,980
it's gonna you know hang everything

00:31:42,310 --> 00:31:47,140
right but even better is that there is

00:31:44,980 --> 00:31:49,420
now this has fast connection and there

00:31:47,140 --> 00:31:51,970
is a description of what does that mean

00:31:49,420 --> 00:31:53,590
so it basically switches between does it

00:31:51,970 --> 00:31:55,990
copy from the deploy machine to all

00:31:53,590 --> 00:31:59,980
machines that the the closures or does

00:31:55,990 --> 00:32:04,570
it download it from from the cache and

00:31:59,980 --> 00:32:06,070
then try to do the rest with just what

00:32:04,570 --> 00:32:08,410
the binary cash doesn't have then it

00:32:06,070 --> 00:32:10,180
tries to copy that so that there is then

00:32:08,410 --> 00:32:18,280
a smaller diff of things that need to be

00:32:10,180 --> 00:32:21,100
copy and then Hydra are so Hedra it

00:32:18,280 --> 00:32:22,950
thanks mostly to Shelli nowadays we have

00:32:21,100 --> 00:32:25,090
declarative configuration we have

00:32:22,950 --> 00:32:27,760
actually we can test github pull

00:32:25,090 --> 00:32:29,680
requests in a very happy way and there

00:32:27,760 --> 00:32:32,470
is a way to update the standards and and

00:32:29,680 --> 00:32:35,620
I think only the first one is documented

00:32:32,470 --> 00:32:38,080
and not even that is totally clear so

00:32:35,620 --> 00:32:40,540
that's something that if I would maybe

00:32:38,080 --> 00:32:43,150
like to work with I oh my eye I run my

00:32:40,540 --> 00:32:44,470
own Hydra for a couple of customers but

00:32:43,150 --> 00:32:46,240
I would really like to document this

00:32:44,470 --> 00:32:52,600
though it would be easier for everyone

00:32:46,240 --> 00:32:55,000
to do that right but again in a company

00:32:52,600 --> 00:32:57,100
you always you as I've said before you

00:32:55,000 --> 00:32:58,660
almost never have completely pure Nix

00:32:57,100 --> 00:33:02,520
built right there's always some part

00:32:58,660 --> 00:33:06,040
it's impure and parts that are pure and

00:33:02,520 --> 00:33:08,110
the problem is Hedra doesn't do impure

00:33:06,040 --> 00:33:09,880
stuff right it has this perl plugins

00:33:08,110 --> 00:33:12,040
system where you can write some of the

00:33:09,880 --> 00:33:14,830
impure stuff right but that's pretty

00:33:12,040 --> 00:33:16,600
much it so then you have to kind of

00:33:14,830 --> 00:33:20,770
integrate so basically you end up with

00:33:16,600 --> 00:33:22,330
two CI systems at the end right one one

00:33:20,770 --> 00:33:23,920
that you know what what people do is

00:33:22,330 --> 00:33:26,260
either use Jenkins for everything and

00:33:23,920 --> 00:33:28,630
they skip Hedra completely alright but I

00:33:26,260 --> 00:33:32,340
think it has really nice features or use

00:33:28,630 --> 00:33:32,340
hid run then you end up with another CI

00:33:33,389 --> 00:33:39,909
so so I died which K for example we used

00:33:38,259 --> 00:33:42,519
Travis from Hedra but then the problem

00:33:39,909 --> 00:33:44,440
is you make a pull request and Hedra

00:33:42,519 --> 00:33:45,970
start building binaries but Travis as

00:33:44,440 --> 00:33:48,429
well so it doesn't have the binary cash

00:33:45,970 --> 00:33:50,860
right and and then you have these two

00:33:48,429 --> 00:33:53,259
competing who is gonna be first and and

00:33:50,860 --> 00:33:55,330
stuff like that right so I've researched

00:33:53,259 --> 00:33:57,190
a bit and you know to be honest I'm

00:33:55,330 --> 00:33:59,409
really disappointed by Travis because

00:33:57,190 --> 00:34:01,149
they do all kinds of scary stuff that I

00:33:59,409 --> 00:34:03,159
don't think it's even considering morale

00:34:01,149 --> 00:34:05,950
because they claim that you get you know

00:34:03,159 --> 00:34:08,290
this man this much CPU but then their

00:34:05,950 --> 00:34:10,000
ability becomes really big and they just

00:34:08,290 --> 00:34:11,649
throttle that right so you're you're a

00:34:10,000 --> 00:34:13,210
bill that took previously 30 minutes

00:34:11,649 --> 00:34:15,190
takes an hour because they have just

00:34:13,210 --> 00:34:19,540
reduced your capacity for the CPU and

00:34:15,190 --> 00:34:22,089
then it times out so I call that unfair

00:34:19,540 --> 00:34:24,780
because I mean Europe I am you are

00:34:22,089 --> 00:34:28,149
paying for that for example right so

00:34:24,780 --> 00:34:29,919
don't do that right so ok we want to

00:34:28,149 --> 00:34:31,450
control the CI machines that's pretty

00:34:29,919 --> 00:34:34,839
clear by now

00:34:31,450 --> 00:34:37,990
and as Jana said we have found a build

00:34:34,839 --> 00:34:39,940
guide so just just to be clear we

00:34:37,990 --> 00:34:42,909
haven't implemented it yet but we have a

00:34:39,940 --> 00:34:46,780
pretty clear idea and what it basically

00:34:42,909 --> 00:34:47,859
does it runs a agent on your machine a

00:34:46,780 --> 00:34:50,500
kind of a Bashi

00:34:47,859 --> 00:34:53,530
agent so you can actually run this on

00:34:50,500 --> 00:34:55,450
your Hydra slaves so the idea is you

00:34:53,530 --> 00:34:57,430
would have hid rather than then first

00:34:55,450 --> 00:34:59,920
builds the package and then three girls

00:34:57,430 --> 00:35:01,599
the build guide to to run on the same

00:34:59,920 --> 00:35:03,720
machine the impure stuff so you don't

00:35:01,599 --> 00:35:06,190
have to copy stuff anymore from Hydra

00:35:03,720 --> 00:35:08,859
and it has also things like you can

00:35:06,190 --> 00:35:10,660
secure these environments and so on and

00:35:08,859 --> 00:35:13,180
these nice pipelines and so on so I

00:35:10,660 --> 00:35:15,910
think in the next couple of months we're

00:35:13,180 --> 00:35:17,560
gonna try this and replace Travis and

00:35:15,910 --> 00:35:19,119
then you know hopefully have time to

00:35:17,560 --> 00:35:21,849
write a blog blog post and report back

00:35:19,119 --> 00:35:22,089
and I think Yanis will we'll keep in

00:35:21,849 --> 00:35:25,540
touch

00:35:22,089 --> 00:35:28,060
how does this work but I have based on

00:35:25,540 --> 00:35:31,569
of what I've seen so far I have a very

00:35:28,060 --> 00:35:33,220
good hopes and there is Hercule CI that

00:35:31,569 --> 00:35:35,760
I've started which is spiked and written

00:35:33,220 --> 00:35:38,859
in Haskell and Fontan in Elm

00:35:35,760 --> 00:35:41,500
unfortunately I don't have time to work

00:35:38,859 --> 00:35:42,880
on it but I do have a budget for that so

00:35:41,500 --> 00:35:45,430
if somebody would be interested please

00:35:42,880 --> 00:35:46,420
let me know we would estimate there is

00:35:45,430 --> 00:35:49,180
about two months of

00:35:46,420 --> 00:35:51,609
to get something like what Hitler does

00:35:49,180 --> 00:35:54,280
and we will basically reuse the C++

00:35:51,609 --> 00:35:56,049
demons that are there but mainly rewrite

00:35:54,280 --> 00:35:58,690
the web part so we can make the API a

00:35:56,049 --> 00:36:00,790
bit better right because one of the nice

00:35:58,690 --> 00:36:02,740
things that we have in inks that other

00:36:00,790 --> 00:36:05,049
CIS don't have is you could just say you

00:36:02,740 --> 00:36:07,270
know Hercules build me this local thing

00:36:05,049 --> 00:36:09,910
it would conduct a calculus and then

00:36:07,270 --> 00:36:11,740
that would build your thing and bring it

00:36:09,910 --> 00:36:13,750
back so it would be basically a bill

00:36:11,740 --> 00:36:15,490
just it's true Hydra right and then

00:36:13,750 --> 00:36:18,880
everyone else can already benefit from

00:36:15,490 --> 00:36:19,299
the binary cash and other things like

00:36:18,880 --> 00:36:26,740
that

00:36:19,299 --> 00:36:29,079
I have one minute right okay so Hesco

00:36:26,740 --> 00:36:31,480
we're doing mostly Hesco and there is a

00:36:29,079 --> 00:36:34,000
bunch of front-end JavaScript stuff I

00:36:31,480 --> 00:36:36,309
think has Co infrastructure is amazing I

00:36:34,000 --> 00:36:40,450
have no complaints thank you peter

00:36:36,309 --> 00:36:44,500
simons we added two things one is

00:36:40,450 --> 00:36:47,049
multiple output support let's that's

00:36:44,500 --> 00:36:48,819
that that is really nice for example if

00:36:47,049 --> 00:36:49,450
you depend on e key G package and

00:36:48,819 --> 00:36:51,760
Haskell

00:36:49,450 --> 00:36:53,829
it has static files and that then

00:36:51,760 --> 00:36:55,690
references the whole eqg package and

00:36:53,829 --> 00:36:57,609
then you have everything up to ghz in

00:36:55,690 --> 00:36:59,799
there for example if you aesthetically

00:36:57,609 --> 00:37:01,540
now that out multiple outputs are there

00:36:59,799 --> 00:37:03,940
the static files are a reference

00:37:01,540 --> 00:37:06,309
separately and you don't bring the GHC

00:37:03,940 --> 00:37:07,960
in the whole closure anymore anyway we

00:37:06,309 --> 00:37:09,970
have built stack tunics they're actually

00:37:07,960 --> 00:37:12,609
stack Aegina cycads tunics and stack

00:37:09,970 --> 00:37:14,260
tunics they're two different approaches

00:37:12,609 --> 00:37:16,900
to this we'll see which one is better

00:37:14,260 --> 00:37:18,910
but it follows this philosophy let's use

00:37:16,900 --> 00:37:20,980
developer stack which is the development

00:37:18,910 --> 00:37:22,869
tool for Haskell but let's generate

00:37:20,980 --> 00:37:24,880
package set which use exactly the same

00:37:22,869 --> 00:37:26,710
version as developers did and then

00:37:24,880 --> 00:37:29,230
deploy that and that's what we actually

00:37:26,710 --> 00:37:30,819
use and it works pretty well there there

00:37:29,230 --> 00:37:33,579
are a few things to be fixed like mac OS

00:37:30,819 --> 00:37:37,359
support and so on but I think it's it's

00:37:33,579 --> 00:37:39,069
it's a shown to be pretty good and the

00:37:37,359 --> 00:37:40,540
last thing this is actually what I would

00:37:39,069 --> 00:37:43,450
probably like to work on hackathon

00:37:40,540 --> 00:37:46,329
tomorrow is take all of this knowledge

00:37:43,450 --> 00:37:48,940
and create like a bootstrap II example

00:37:46,329 --> 00:37:50,500
of how do you basically run your company

00:37:48,940 --> 00:37:53,140
and how do you start from and you know

00:37:50,500 --> 00:37:55,450
use these Phenix packages overlays and

00:37:53,140 --> 00:37:58,119
these tips and tricks and then you could

00:37:55,450 --> 00:37:59,890
just start using links OS and nicks and

00:37:58,119 --> 00:38:00,400
nicks ups as well and of course you

00:37:59,890 --> 00:38:02,440
start with

00:38:00,400 --> 00:38:04,029
she'll like Genesis but then the next

00:38:02,440 --> 00:38:06,250
thing is probably bringing this things

00:38:04,029 --> 00:38:08,079
in and I think there is a couple a

00:38:06,250 --> 00:38:10,270
couple of things we have learned so far

00:38:08,079 --> 00:38:12,849
so if we join forces and we bring this

00:38:10,270 --> 00:38:14,740
into one maintained thing of course we

00:38:12,849 --> 00:38:16,599
will it's always opinionated but we

00:38:14,740 --> 00:38:18,220
think we can work with that it's going

00:38:16,599 --> 00:38:21,029
to be really useful for everyone all

00:38:18,220 --> 00:38:21,029
right so that's it

00:38:25,980 --> 00:38:38,400
I am two questions one questions their

00:38:35,760 --> 00:38:41,579
question is I've already been bitten by

00:38:38,400 --> 00:38:44,490
the fact that two paths does not create

00:38:41,579 --> 00:38:47,880
a path but a string is there any reason

00:38:44,490 --> 00:38:55,109
why not to fix this just to heck two

00:38:47,880 --> 00:38:56,700
paths in the sauce - um well that's

00:38:55,109 --> 00:39:00,210
probably more a question for a locker

00:38:56,700 --> 00:39:01,890
than me but I I don't I I think that two

00:39:00,210 --> 00:39:04,020
paths was added at one point and

00:39:01,890 --> 00:39:05,550
nobody's really using it right so I I

00:39:04,020 --> 00:39:08,460
don't think there is too much higher or

00:39:05,550 --> 00:39:11,820
too much I don't think there's a problem

00:39:08,460 --> 00:39:14,750
actually fixing it right but if somebody

00:39:11,820 --> 00:39:18,710
is using it it could of course break

00:39:14,750 --> 00:39:18,710
backwards-compatibility in that case I

00:39:19,880 --> 00:39:24,060
mean probably a better way would be just

00:39:22,290 --> 00:39:26,820
to deprecate two paths and create

00:39:24,060 --> 00:39:52,170
something similar that would then see

00:39:26,820 --> 00:39:55,020
people would start to use pinning yeah I

00:39:52,170 --> 00:39:57,030
think Gabrielle Gonzales and then you

00:39:55,020 --> 00:40:00,380
know their team actually created a poor

00:39:57,030 --> 00:40:03,869
request and they plan to move it to wiki

00:40:00,380 --> 00:40:06,390
but then it also depends if do we need

00:40:03,869 --> 00:40:10,170
that if we're gonna get Nick's 1.12 you

00:40:06,390 --> 00:40:13,079
know there's yeah so but yeah there is a

00:40:10,170 --> 00:40:14,550
pull request open for that already but

00:40:13,079 --> 00:40:16,560
the main problem is you have to always

00:40:14,550 --> 00:40:20,359
copy paste this through to every place

00:40:16,560 --> 00:40:20,359
right because it's a bootstrap process

00:40:29,250 --> 00:40:34,420
not really question I would just wanted

00:40:31,570 --> 00:40:36,640
to make a remark it seems like that in

00:40:34,420 --> 00:40:38,830
the beginning you always think ah we're

00:40:36,640 --> 00:40:41,800
just building like a simple language it

00:40:38,830 --> 00:40:43,390
runs only at like evaluation time so

00:40:41,800 --> 00:40:45,730
like features and there aren't really

00:40:43,390 --> 00:40:47,710
that important and then the couple years

00:40:45,730 --> 00:40:49,750
later you find that like any simple

00:40:47,710 --> 00:40:52,060
language eventually turns into like a

00:40:49,750 --> 00:40:53,620
fully featured programming language then

00:40:52,060 --> 00:40:56,260
you have one guy who suddenly really

00:40:53,620 --> 00:40:57,820
need something like a profiler right or

00:40:56,260 --> 00:40:59,740
maybe debugger on these kind of things

00:40:57,820 --> 00:41:02,830
and I think that is an an interesting

00:40:59,740 --> 00:41:04,900
insight and another thing is that from

00:41:02,830 --> 00:41:06,220
the same idea you say like okay in the

00:41:04,900 --> 00:41:07,990
beginning because it just runs an

00:41:06,220 --> 00:41:10,720
evaluation time before deployment

00:41:07,990 --> 00:41:12,490
machines or evaluate my OS and so on you

00:41:10,720 --> 00:41:14,530
don't really need like types and if it's

00:41:12,490 --> 00:41:15,790
crashes this is not so bad because the

00:41:14,530 --> 00:41:17,980
crashes before something bad happens

00:41:15,790 --> 00:41:20,200
right but then you end up with like a

00:41:17,980 --> 00:41:22,480
million lines of code in mixed packages

00:41:20,200 --> 00:41:24,010
and then you have multi hour time loss

00:41:22,480 --> 00:41:26,110
when you get exactly what you said with

00:41:24,010 --> 00:41:27,700
the anonymous function in the unknown

00:41:26,110 --> 00:41:31,450
file right so I think those are

00:41:27,700 --> 00:41:34,030
interesting insights yeah I I think that

00:41:31,450 --> 00:41:35,350
well first of all Elco always says you

00:41:34,030 --> 00:41:37,480
know Nix is not the general-purpose

00:41:35,350 --> 00:41:40,270
programming language right so the fact

00:41:37,480 --> 00:41:42,220
that I we created this whole framework

00:41:40,270 --> 00:41:46,720
of doing benchmark is probably you know

00:41:42,220 --> 00:41:49,420
our fault but but yeah I think that we

00:41:46,720 --> 00:41:51,490
can fix most of this bumps and and and

00:41:49,420 --> 00:41:53,470
and make this language actually good

00:41:51,490 --> 00:41:56,200
enough and live with it with the fact

00:41:53,470 --> 00:41:58,720
but but this whitespace thing is and so

00:41:56,200 --> 00:42:02,740
on don't make it too nice when when you

00:41:58,720 --> 00:42:05,380
you know and yeah but in general I agree

00:42:02,740 --> 00:42:08,770
the more you use it the more tools you

00:42:05,380 --> 00:42:10,690
need around it right and I think that at

00:42:08,770 --> 00:42:13,560
the end we will end up with with all of

00:42:10,690 --> 00:42:13,560
that at some point

00:42:14,060 --> 00:42:20,050

YouTube URL: https://www.youtube.com/watch?v=dlRuMdm6pRU


