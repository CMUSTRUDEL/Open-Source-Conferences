Title: A type-system for Nix by Théophane Hufschmitt (NixCon 2017)
Publication date: 2017-10-31
Playlist: NixCon 2017 (Munich)
Description: 
	We present here the new tix tool, a type-checker for the Nix language whose goal is to make nix code easier to write and maintain.

Nix's strength comes from the ideas it borrows from functional programming: immutability, powerful abstraction capabilities, etc.., yet it misses one of the most emblematic and powerful feature of most functional programming languages: a strong static type-system, which becomes a problem given the increasing size of the Nix package collection. This proposal (which is the result of an internship funded by the Nix community and tweag I/O and supervised by Guiseppe Castagna) tries to fix this.

The resulting type-system and typechecker have been designed with two very important constraints in mind:

    The type-system must be able to offer as much safety as possible for the programmer.

    One must be able to reuse existing nix code with as few modifications as possible. This means that:
        Most of Nix idioms have to be supported by the type-system − in particular the presence of types at runtime and the dynamic fields in the records,
        There must be ways to bypass − up to some extent − the type-system, using e.g. gradual typing or by locally disabling certain errors.

In this talk, we will present the tool from the practical point of view of the nix user and discuss further improvements

Blog: https://typing-nix.regnat.ovh
Sources of the implementation: https://github.com/regnat/tix
Work notes: https://github.com/regnat/tix-paper

Slides: https://schedule.nixcon2017.org/system/event_attachments/attachments/000/000/003/original/main.pdf?1509274727
YouTube URL: https://www.youtube.com/watch?v=79dL7HgmW_k


