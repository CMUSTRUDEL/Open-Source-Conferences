Title: Nix on Darwin â€“ History, challenges, and where it's going by Dan Peebles (NixCon 2017)
Publication date: 2017-10-31
Playlist: NixCon 2017 (Munich)
Description: 
	For the past couple of years, Darwin has been a first-class "pure" platform on Nix. In this talk I'll describe the many hurdles we've had to overcome to get from an impure poorly supported platform to where we are today. I'll also cover ongoing pain points and where we see the platform going, and why I think it should take over the Mac packaging ecosystem.

When I first encountered Nix, I was simultaneously impressed by the purity of its Linux environment with virtually no untracked external dependencies, and disappointed with the situation on macOS. On macOS, some of my first experiences with Nix involved some painful surprises of impurities breaking my Nix builds, and my early attempts to fix them largely failed. As I tinkered with Nix and spoke to experts online, a clearer picture emerged for how to move from the impure situation to a pure one, and a few of us banded together on IRC over the following few months to bootstrap a pure compiler toolchain and OS-appropriate SDK from scratch. It's a grueling story of mass rebuilds multiple times a day, repeatedly waiting for three hours just to find stupid typos, and hunting down undesired dependency chains, but in the end it came together and actually worked, much to everyone's surprise. Although the situation is now far better than it was, there is still much work to do, and I'll go over some of the root causes of much of the remaining pain and how I propose to tackle it. I'll also go over some exciting recent developments in the macOS Nix space and what I think the project and platform will look like in the longer term.

Slides: https://schedule.nixcon2017.org/system/event_attachments/attachments/000/000/005/original/without-notes.pdf?1509312309
Captions: 
	00:00:04,520 --> 00:00:11,490
all right next talk is by Dan Peebles

00:00:09,090 --> 00:00:13,320
he's been addicted to next for the past

00:00:11,490 --> 00:00:18,240
couple of years and is now the

00:00:13,320 --> 00:00:19,770
maintainer snakes on Darwin and when

00:00:18,240 --> 00:00:22,590
he's not trying to wrangle the Mac OS

00:00:19,770 --> 00:00:25,230
into behaving properly he works as the

00:00:22,590 --> 00:00:27,119
programmer and an efficient internal

00:00:25,230 --> 00:00:30,449
next adventure list at Bridgewater

00:00:27,119 --> 00:00:43,700
associates also has skilled and actor

00:00:30,449 --> 00:00:47,460
recovering okay so this is actually yes

00:00:43,700 --> 00:00:49,140
yeah so I am Dan also known as Co

00:00:47,460 --> 00:00:51,920
pumpkin online it sounds weird to

00:00:49,140 --> 00:00:55,739
pronounce that so I try to avoid it and

00:00:51,920 --> 00:00:58,289
yeah so I I'm gonna talk a bit about

00:00:55,739 --> 00:00:59,340
Nixon Darwin that's the Darwin mascot if

00:00:58,289 --> 00:01:03,390
you don't recognize it

00:00:59,340 --> 00:01:05,780
also known as hexley hexley is a

00:01:03,390 --> 00:01:10,580
corruption of Huxley who was actually

00:01:05,780 --> 00:01:14,189
one of Darwin as in the person Darwin's

00:01:10,580 --> 00:01:15,720
strong advocates but then people miss

00:01:14,189 --> 00:01:17,490
remember his name and called him hexley

00:01:15,720 --> 00:01:20,009
and made him into a pathetic a platypus

00:01:17,490 --> 00:01:23,880
demon the demon stuff is from BSD the

00:01:20,009 --> 00:01:25,560
platypus is from anyway that's where

00:01:23,880 --> 00:01:32,700
that comes from the other the other logo

00:01:25,560 --> 00:01:34,920
you should recognize so yes as as as you

00:01:32,700 --> 00:01:40,740
know said I am developer at Bridgewater

00:01:34,920 --> 00:01:42,869
I do a lot of Nick's at work I do a lot

00:01:40,740 --> 00:01:44,520
of mix at home it kind of ate up all my

00:01:42,869 --> 00:01:45,750
hassle free time that I used to use it

00:01:44,520 --> 00:01:47,610
for so if you know me from the household

00:01:45,750 --> 00:01:52,170
community that's Nyx's fault that I

00:01:47,610 --> 00:01:54,420
don't participate anymore but anyway I

00:01:52,170 --> 00:01:57,030
think it's working out okay

00:01:54,420 --> 00:01:58,890
I also open a lot of issues that's my my

00:01:57,030 --> 00:02:03,409
greatest pride and I'm from yesterday's

00:01:58,890 --> 00:02:07,649
stats that's that's my main job okay so

00:02:03,409 --> 00:02:11,310
so anyway i'm nixon darwin is love or

00:02:07,649 --> 00:02:12,920
maybe not but usually possibly it's a

00:02:11,310 --> 00:02:14,780
it's sort of up in the air but

00:02:12,920 --> 00:02:16,070
I'm gonna go over a bit of what I'm

00:02:14,780 --> 00:02:17,390
gonna talk about and then I'm gonna talk

00:02:16,070 --> 00:02:21,680
about it and maybe I'll talk about what

00:02:17,390 --> 00:02:23,870
I talked about so motivation why I

00:02:21,680 --> 00:02:25,910
actually want to do this why I care why

00:02:23,870 --> 00:02:28,610
maybe you should care many of you

00:02:25,910 --> 00:02:31,100
probably don't but because you're Linux

00:02:28,610 --> 00:02:35,060
heads I also use Linux but I also like

00:02:31,100 --> 00:02:37,520
Mac OS some history purity sandbox not

00:02:35,060 --> 00:02:39,440
in any particular order those are going

00:02:37,520 --> 00:02:41,330
to get kind of mixed up and then a

00:02:39,440 --> 00:02:42,980
section at the end about where I think

00:02:41,330 --> 00:02:45,980
we should go and what the current issues

00:02:42,980 --> 00:02:48,440
are notably not talking about next are

00:02:45,980 --> 00:02:50,630
one you should talk to die if you

00:02:48,440 --> 00:02:51,110
want to talk to talk about that it's

00:02:50,630 --> 00:02:54,530
awesome

00:02:51,110 --> 00:02:56,270
it's it gives you next to us like module

00:02:54,530 --> 00:02:59,810
support and configuration declarative

00:02:56,270 --> 00:03:00,739
configuration on Mac OS but I will not

00:02:59,810 --> 00:03:04,850
be talking about that because I know

00:03:00,739 --> 00:03:09,230
pretty very little about it okay so the

00:03:04,850 --> 00:03:13,190
motivation packaging purity is not like

00:03:09,230 --> 00:03:15,709
specific or it shouldn't be it is or was

00:03:13,190 --> 00:03:18,230
until until we did this work purity is

00:03:15,709 --> 00:03:23,840
is great we love purely functional

00:03:18,230 --> 00:03:24,739
designs and and it it should be

00:03:23,840 --> 00:03:27,230
available to more and more platforms

00:03:24,739 --> 00:03:29,150
than it were that it used to be I

00:03:27,230 --> 00:03:32,690
obviously enjoy using Mac OS you can see

00:03:29,150 --> 00:03:34,730
I've got a Mac here and a lot of other

00:03:32,690 --> 00:03:37,790
developers do too you can see this is a

00:03:34,730 --> 00:03:40,190
fairly common site at least on college

00:03:37,790 --> 00:03:41,950
campuses but also hackathons conferences

00:03:40,190 --> 00:03:44,510
you will see a ton of glowing apples

00:03:41,950 --> 00:03:48,950
they've they've stopped glowing as much

00:03:44,510 --> 00:03:51,850
nowadays but they still are present but

00:03:48,950 --> 00:03:55,730
yes a lot of developers like using Mac's

00:03:51,850 --> 00:03:57,170
and I would like us to get it taken more

00:03:55,730 --> 00:04:00,970
seriously in developer community so I

00:03:57,170 --> 00:04:03,470
want the Mac experience to be good

00:04:00,970 --> 00:04:04,940
there's a lot of them are like really

00:04:03,470 --> 00:04:06,500
passionate about a table unclear they

00:04:04,940 --> 00:04:07,910
will they will go so far as to insult

00:04:06,500 --> 00:04:13,760
Linux and various things that's not what

00:04:07,910 --> 00:04:16,160
I do but but don't do it back so there's

00:04:13,760 --> 00:04:17,989
also another motivation which is there

00:04:16,160 --> 00:04:20,450
there is a package manager or there's a

00:04:17,989 --> 00:04:21,919
couple of package managers on Mac OS one

00:04:20,450 --> 00:04:23,840
of the main ones is called homebrew and

00:04:21,919 --> 00:04:24,950
it's a huge community it's it's very

00:04:23,840 --> 00:04:28,090
popular

00:04:24,950 --> 00:04:32,630
but it suffers from not being Nicks and

00:04:28,090 --> 00:04:34,700
what I mean by that is what I mean by

00:04:32,630 --> 00:04:37,490
that is you'll see that the ticket it's

00:04:34,700 --> 00:04:40,700
a Mac OS 10 13 is the latest release of

00:04:37,490 --> 00:04:43,220
Mac OS and this was a ticket of like

00:04:40,700 --> 00:04:45,740
trying to collect issues that came from

00:04:43,220 --> 00:04:47,270
from the latest release and this is

00:04:45,740 --> 00:04:48,920
these are some snapshots but like this

00:04:47,270 --> 00:04:50,510
is the actual full ticket as at the time

00:04:48,920 --> 00:04:53,540
I collected this snapshot which was this

00:04:50,510 --> 00:04:55,970
morning which with a hundred 22 comments

00:04:53,540 --> 00:04:57,440
and this just tons and tons of build

00:04:55,970 --> 00:05:00,140
errors because Apple shuffled a few

00:04:57,440 --> 00:05:00,620
things around and decided to break

00:05:00,140 --> 00:05:05,360
everyone

00:05:00,620 --> 00:05:07,670
and because homebrew is impure

00:05:05,360 --> 00:05:09,260
effectively and and sort of depends on

00:05:07,670 --> 00:05:10,730
random stuff from Apple all the time and

00:05:09,260 --> 00:05:13,250
it's like not deterministic and in that

00:05:10,730 --> 00:05:14,300
sense they they need to deal with it and

00:05:13,250 --> 00:05:15,410
they need to scramble to deal with it

00:05:14,300 --> 00:05:16,940
they can't sort of upgrade on their own

00:05:15,410 --> 00:05:18,260
time it's like oh well Apple switched

00:05:16,940 --> 00:05:19,400
out everything from underneath us and

00:05:18,260 --> 00:05:21,980
now we need to deal with it and so

00:05:19,400 --> 00:05:23,510
luckily they have a huge community so so

00:05:21,980 --> 00:05:25,700
that's great like they have I don't know

00:05:23,510 --> 00:05:27,020
50 contributors like just posting on

00:05:25,700 --> 00:05:28,310
this thread alone and their other

00:05:27,020 --> 00:05:31,130
threads about that about this upgrade as

00:05:28,310 --> 00:05:33,760
well this is just the first one but it

00:05:31,130 --> 00:05:35,900
is it's not really a very sustainable

00:05:33,760 --> 00:05:37,790
workflow and definitely not something

00:05:35,900 --> 00:05:39,290
that would work for us because we have a

00:05:37,790 --> 00:05:39,590
much smaller number of people working on

00:05:39,290 --> 00:05:42,620
it

00:05:39,590 --> 00:05:45,140
so purity helps us there and I'll talk

00:05:42,620 --> 00:05:47,060
more about that later but but anyway

00:05:45,140 --> 00:05:48,500
this is a this is one of my motivations

00:05:47,060 --> 00:05:50,210
because like this purity Adel the lack

00:05:48,500 --> 00:05:52,690
of purity makes makes this kind of stuff

00:05:50,210 --> 00:05:56,090
much more common and harder to deal with

00:05:52,690 --> 00:05:58,610
another motivation is I use it at work a

00:05:56,090 --> 00:06:03,290
lot of my colleagues use Mac's at work

00:05:58,610 --> 00:06:05,180
and I want them to use next as we said

00:06:03,290 --> 00:06:06,980
earlier I am trying to evangelize this

00:06:05,180 --> 00:06:10,180
at work it's mostly kind of working

00:06:06,980 --> 00:06:12,830
which is a which is another story but

00:06:10,180 --> 00:06:14,630
part of that is they are able to use Nix

00:06:12,830 --> 00:06:15,890
on on their Mac's and transport their

00:06:14,630 --> 00:06:20,510
packages to Linux then have it work

00:06:15,890 --> 00:06:22,400
exactly the same way and probably one of

00:06:20,510 --> 00:06:25,610
the final motivations before I before I

00:06:22,400 --> 00:06:28,700
go there is this just offends me which

00:06:25,610 --> 00:06:31,130
is the way you get developer tools on

00:06:28,700 --> 00:06:32,270
Mac OS the endorsed way and you need

00:06:31,130 --> 00:06:33,740
this for homebrew you need this for

00:06:32,270 --> 00:06:36,050
pretty much anything out there is you

00:06:33,740 --> 00:06:38,639
install a package an official Mac

00:06:36,050 --> 00:06:40,680
package called the

00:06:38,639 --> 00:06:42,449
line SDK and the command line SDK

00:06:40,680 --> 00:06:44,189
basically you if you type get on the

00:06:42,449 --> 00:06:47,879
command line on a brand new Mac it will

00:06:44,189 --> 00:06:49,919
pop up a GUI panel saying would you like

00:06:47,879 --> 00:06:51,180
to install the command line SDK and you

00:06:49,919 --> 00:06:52,199
press yes and it downloads one hundred

00:06:51,180 --> 00:06:53,969
fifty megabytes of stuff and then

00:06:52,199 --> 00:06:56,729
installs for a while and then you type

00:06:53,969 --> 00:06:58,889
get again on the command line and what

00:06:56,729 --> 00:07:01,620
it prompts you is a message much like

00:06:58,889 --> 00:07:04,919
that saying before you can use it you

00:07:01,620 --> 00:07:07,499
must agree to the license of the Apple

00:07:04,919 --> 00:07:11,189
SDK and this is for open-source software

00:07:07,499 --> 00:07:12,419
so there example there is GCC and before

00:07:11,189 --> 00:07:14,879
you can ever use it you actually need to

00:07:12,419 --> 00:07:16,650
agree to this to this license which

00:07:14,879 --> 00:07:17,939
means rerunning the exact same command

00:07:16,650 --> 00:07:20,699
as sudo and it will prompt you with a

00:07:17,939 --> 00:07:23,520
page of text or like a pager of text

00:07:20,699 --> 00:07:25,289
many pages inside a pager of text at the

00:07:23,520 --> 00:07:26,900
bottom it will say yes or no and you

00:07:25,289 --> 00:07:29,550
accept it and then it remembers that

00:07:26,900 --> 00:07:32,099
under Super User and will never prompt

00:07:29,550 --> 00:07:33,689
you again but anyway that has always

00:07:32,099 --> 00:07:38,610
been a huge annoyance and that is

00:07:33,689 --> 00:07:40,919
basically my reaction to that is rather

00:07:38,610 --> 00:07:43,819
famous Italian politician there but

00:07:40,919 --> 00:07:46,199
anyway so so that's that's why I care

00:07:43,819 --> 00:07:48,029
many of you will probably say well screw

00:07:46,199 --> 00:07:50,729
that I'm just gonna use Linux or Nix OS

00:07:48,029 --> 00:07:53,400
I understand that I have been tempted

00:07:50,729 --> 00:07:56,819
too many times myself but yeah keep that

00:07:53,400 --> 00:07:58,680
coming back to this so moving on to a

00:07:56,819 --> 00:08:01,080
few credits before the actual the core

00:07:58,680 --> 00:08:03,419
content this is there are there are tons

00:08:01,080 --> 00:08:04,949
of people involved in this these are

00:08:03,419 --> 00:08:06,770
these are some of the the names that

00:08:04,949 --> 00:08:11,189
that really popped out off the top there

00:08:06,770 --> 00:08:13,080
 Jude Jude Taylor on github was

00:08:11,189 --> 00:08:15,449
instrumental to and much of the early

00:08:13,080 --> 00:08:16,770
work and I will be referencing him a lot

00:08:15,449 --> 00:08:20,759
throughout the the rest of the history

00:08:16,770 --> 00:08:22,110
of this gritty phobe john wiggly who's

00:08:20,759 --> 00:08:25,620
also guilty of getting me into nicks in

00:08:22,110 --> 00:08:27,960
the first place and and you'll see down

00:08:25,620 --> 00:08:30,210
there at the bottom is el ml7 who's in

00:08:27,960 --> 00:08:32,279
the back of the room and who who is more

00:08:30,210 --> 00:08:34,560
recently a sort of become a major

00:08:32,279 --> 00:08:38,159
maintainer of the thing and has been

00:08:34,560 --> 00:08:41,000
doing a kind of really good work here so

00:08:38,159 --> 00:08:42,810
one more little piece of background is

00:08:41,000 --> 00:08:44,310
before actually launched into this I'm

00:08:42,810 --> 00:08:46,470
just going to explain how Linux works

00:08:44,310 --> 00:08:49,230
and how a lot of the bootstrapping works

00:08:46,470 --> 00:08:50,310
because with any luck most of you

00:08:49,230 --> 00:08:52,260
haven't had to deal with it

00:08:50,310 --> 00:08:55,320
so standard am

00:08:52,260 --> 00:08:56,370
most of us have seen that most of us I

00:08:55,320 --> 00:09:01,340
hope haven't actually had to deal with

00:08:56,370 --> 00:09:04,110
how it is constructed but it is it is a

00:09:01,340 --> 00:09:07,320
bootstrap process starting from a very

00:09:04,110 --> 00:09:09,090
small table all of the minimal amount of

00:09:07,320 --> 00:09:11,130
stuff that we could think of to to put

00:09:09,090 --> 00:09:13,200
in there that would actually construct a

00:09:11,130 --> 00:09:15,060
valuable system on top of it and so in

00:09:13,200 --> 00:09:17,970
the bootstrap you'll find a compiler

00:09:15,060 --> 00:09:19,740
linker a few core utils and stuff like

00:09:17,970 --> 00:09:21,810
that and then everything else is built

00:09:19,740 --> 00:09:22,890
on top and a bunch of headers but

00:09:21,810 --> 00:09:24,810
everything else is built on top of it

00:09:22,890 --> 00:09:27,120
that is true on Linux and it is also

00:09:24,810 --> 00:09:29,720
true on Mac OS now but wasn't true

00:09:27,120 --> 00:09:32,700
before we started this product and so

00:09:29,720 --> 00:09:37,680
the the bootstrap process is like a very

00:09:32,700 --> 00:09:39,570
carefully groomed process of having in

00:09:37,680 --> 00:09:41,820
multiple stages you build one thing or

00:09:39,570 --> 00:09:43,350
build us a handful of things and then in

00:09:41,820 --> 00:09:45,840
that those those become the standard em

00:09:43,350 --> 00:09:47,700
of the next stage and then you're trying

00:09:45,840 --> 00:09:48,690
carefully to maneuver to avoid depending

00:09:47,700 --> 00:09:50,880
on things that you don't want to depend

00:09:48,690 --> 00:09:55,770
on and it's it's difficult and painful

00:09:50,880 --> 00:09:57,150
and but is something that sort of once

00:09:55,770 --> 00:09:58,860
you get it working generally kind of

00:09:57,150 --> 00:10:00,810
stays working unless people majorly

00:09:58,860 --> 00:10:03,960
change dependencies of core utils or

00:10:00,810 --> 00:10:04,830
things like that another sort of cute

00:10:03,960 --> 00:10:08,450
little piece of background information

00:10:04,830 --> 00:10:11,820
is you may not know this maybe you do

00:10:08,450 --> 00:10:14,640
Apple publishes a lot of the source to

00:10:11,820 --> 00:10:17,340
two core components of Mac OS on open

00:10:14,640 --> 00:10:21,780
source at Apple comm calling it actually

00:10:17,340 --> 00:10:23,730
open source is a bit of a optimistic the

00:10:21,780 --> 00:10:25,650
Apple was variant open source when they

00:10:23,730 --> 00:10:27,810
first released Mac OS and early 2000s

00:10:25,650 --> 00:10:29,490
and actually had an open source

00:10:27,810 --> 00:10:31,050
distribution called open darwin they

00:10:29,490 --> 00:10:32,970
could run x and is running on the Mac

00:10:31,050 --> 00:10:35,300
kernel and all that stuff and they lost

00:10:32,970 --> 00:10:38,100
interest a few years later and that died

00:10:35,300 --> 00:10:40,530
they regain interest and then it died

00:10:38,100 --> 00:10:42,090
again and like it's anyway they publish

00:10:40,530 --> 00:10:43,680
source right now and they will not

00:10:42,090 --> 00:10:44,880
accept patches you're not you're not

00:10:43,680 --> 00:10:47,310
going to be able to do any sort to the

00:10:44,880 --> 00:10:49,260
golden sorce things except for a handful

00:10:47,310 --> 00:10:52,590
of projects like Swift or whatever on

00:10:49,260 --> 00:10:56,090
github but generally they're their

00:10:52,590 --> 00:10:58,920
stance on open source is very variable

00:10:56,090 --> 00:11:00,690
so that actually lets me start on the

00:10:58,920 --> 00:11:03,030
main on the main topic that's sort of

00:11:00,690 --> 00:11:04,860
like how this came to be the the

00:11:03,030 --> 00:11:05,510
standard M that I'm describing is

00:11:04,860 --> 00:11:09,830
actually in

00:11:05,510 --> 00:11:13,820
today everyone on a Mac uses it and this

00:11:09,830 --> 00:11:15,500
is sort of how it came to be so in in

00:11:13,820 --> 00:11:17,920
the third quarter of 2014 was when I

00:11:15,500 --> 00:11:21,200
pretty much when I started started NYX

00:11:17,920 --> 00:11:22,460
thanks to John Wiggly who who was

00:11:21,200 --> 00:11:23,630
walking around a Haskell conference that

00:11:22,460 --> 00:11:25,790
happened to be at offering to install

00:11:23,630 --> 00:11:27,410
make some people's computers and I I

00:11:25,790 --> 00:11:28,760
said okay sure yeah you can stall next

00:11:27,410 --> 00:11:30,200
on my computer and I looked into it and

00:11:28,760 --> 00:11:33,410
got addicted and stopped using Haskell

00:11:30,200 --> 00:11:34,940
and all that stuff but uh yes is you can

00:11:33,410 --> 00:11:38,240
blame him for my for all those tickets

00:11:34,940 --> 00:11:41,120
that I put in and so next packages on

00:11:38,240 --> 00:11:43,160
Darwin was very impaired and what I mean

00:11:41,120 --> 00:11:44,510
by that is that bootstrap process I just

00:11:43,160 --> 00:11:46,010
described wasn't there at all there was

00:11:44,510 --> 00:11:50,240
a standard am the standard on basically

00:11:46,010 --> 00:11:51,680
said my compiler is a user bin cc that's

00:11:50,240 --> 00:11:54,500
a simplification but effectively that

00:11:51,680 --> 00:11:58,010
and if user bin CC doesn't work then

00:11:54,500 --> 00:11:59,600
then you know Nix doesn't work if if you

00:11:58,010 --> 00:12:01,160
haven't installed that SDK thing that I

00:11:59,600 --> 00:12:03,440
was talking about earlier and the next

00:12:01,160 --> 00:12:04,700
doesn't work all that stuff like you

00:12:03,440 --> 00:12:07,280
needed to go and do it yourself

00:12:04,700 --> 00:12:09,830
beforehand and if someone installed an

00:12:07,280 --> 00:12:11,330
update to that SDK and it changed the

00:12:09,830 --> 00:12:13,340
way the compiler work and Nix wasn't

00:12:11,330 --> 00:12:15,860
aware of it then next we're great and

00:12:13,340 --> 00:12:20,630
next with great glob basically and so it

00:12:15,860 --> 00:12:22,550
wasn't very fun and and I when I first

00:12:20,630 --> 00:12:23,780
when I first started using Nick's I made

00:12:22,550 --> 00:12:26,120
a few little pull requests here and

00:12:23,780 --> 00:12:29,450
there but like what what and it became

00:12:26,120 --> 00:12:32,360
very obvious to me very early was pure

00:12:29,450 --> 00:12:33,650
purity mb i i saw it saw the lens people

00:12:32,360 --> 00:12:35,840
it was very pure is very nice it was

00:12:33,650 --> 00:12:37,220
very deterministic and then everything

00:12:35,840 --> 00:12:38,810
was always breaking on mac OS and so i

00:12:37,220 --> 00:12:43,220
was i was getting more and more envious

00:12:38,810 --> 00:12:44,960
of how it worked and so started started

00:12:43,220 --> 00:12:47,300
doing a few little pull requests here

00:12:44,960 --> 00:12:48,830
and there security tool is a random

00:12:47,300 --> 00:12:51,950
random tool that apple provides the

00:12:48,830 --> 00:12:54,260
source - we used to depend have a

00:12:51,950 --> 00:12:56,120
haskell package i think an x.509 a

00:12:54,260 --> 00:12:57,920
certificate package depend on security

00:12:56,120 --> 00:12:59,270
tool but it was depending on it

00:12:57,920 --> 00:13:02,660
implicitly and just using user bin

00:12:59,270 --> 00:13:06,710
security this was my first ever sort of

00:13:02,660 --> 00:13:08,510
step in this direction and compiled it

00:13:06,710 --> 00:13:10,240
from source still compiled in purely

00:13:08,510 --> 00:13:12,290
from source but compile it from source

00:13:10,240 --> 00:13:14,480
because apple releases the source of

00:13:12,290 --> 00:13:16,520
that particular tool and you can see

00:13:14,480 --> 00:13:18,050
that i i was starting to to move in that

00:13:16,520 --> 00:13:20,030
general direction there's a branch

00:13:18,050 --> 00:13:24,110
called mac purity up

00:13:20,030 --> 00:13:26,270
but this was in in sort of three

00:13:24,110 --> 00:13:30,260
quarters through 2014

00:13:26,270 --> 00:13:32,990
I sort Lee after added the command-line

00:13:30,260 --> 00:13:35,210
tools which is basically on SDK I was

00:13:32,990 --> 00:13:36,980
talking about before it's it's still

00:13:35,210 --> 00:13:38,810
this big bundle of stuff there's like

00:13:36,980 --> 00:13:42,110
compiler and headers and all sorts of

00:13:38,810 --> 00:13:45,170
stuff like that in there and I I made a

00:13:42,110 --> 00:13:47,480
full request basically adding that that

00:13:45,170 --> 00:13:49,970
SDK so instead of just depending on and

00:13:47,480 --> 00:13:51,380
user bin we might eventually be able to

00:13:49,970 --> 00:13:53,360
depend on it like just to use a

00:13:51,380 --> 00:13:55,400
derivation reference and and have it

00:13:53,360 --> 00:13:58,820
appear in in our things automatically

00:13:55,400 --> 00:14:00,140
and have have Nix download it for us and

00:13:58,820 --> 00:14:01,880
when I say next download it for us

00:14:00,140 --> 00:14:04,190
there's a very ugly thing some of you

00:14:01,880 --> 00:14:06,920
may have seen there but there's password

00:14:04,190 --> 00:14:09,560
because Apple distributes this thing or

00:14:06,920 --> 00:14:13,370
at the time distributed it behind a an

00:14:09,560 --> 00:14:14,930
authenticated web endpoint and and the

00:14:13,370 --> 00:14:17,000
actual henna keishon mechanism was ugly

00:14:14,930 --> 00:14:19,730
too we had a special downloader for it

00:14:17,000 --> 00:14:20,990
called fetch ADC it was horrible but

00:14:19,730 --> 00:14:22,880
basically you needed to put in your

00:14:20,990 --> 00:14:24,770
config dot next to use this stuff at all

00:14:22,880 --> 00:14:27,710
you need to put a username and password

00:14:24,770 --> 00:14:33,080
from an Apple account that wasn't great

00:14:27,710 --> 00:14:35,090
and at the same time a Jew tailor who I

00:14:33,080 --> 00:14:38,090
mentioned earlier was working on on

00:14:35,090 --> 00:14:43,130
getting clang to work as a proper

00:14:38,090 --> 00:14:44,540
standard em in in Darwin because one

00:14:43,130 --> 00:14:48,740
other thing that I didn't mention

00:14:44,540 --> 00:14:51,470
earlier is Apple's a big big fan of LVM

00:14:48,740 --> 00:14:52,550
a lot of the public LLVM the development

00:14:51,470 --> 00:14:55,760
actually comes from them and they they

00:14:52,550 --> 00:14:58,280
used to employ the the Creator LVM who

00:14:55,760 --> 00:15:01,610
then left I think for Tesla or something

00:14:58,280 --> 00:15:04,520
like that but but they they are fans of

00:15:01,610 --> 00:15:06,350
LVM in part because it's not GPL and and

00:15:04,520 --> 00:15:09,920
apples and apples not a fan of the GPL

00:15:06,350 --> 00:15:12,050
and so they they use GCC up until like I

00:15:09,920 --> 00:15:14,120
don't know 10 years ago but as soon as

00:15:12,050 --> 00:15:15,290
they LVM became remotely viable they

00:15:14,120 --> 00:15:20,330
started throwing a ton of money behind

00:15:15,290 --> 00:15:23,000
it and and so what happened is 10.10

00:15:20,330 --> 00:15:24,590
that he's referring to there is they

00:15:23,000 --> 00:15:27,050
used to provide a shim a compatibility

00:15:24,590 --> 00:15:31,820
shim that pretend that allowed LLVM to

00:15:27,050 --> 00:15:32,730
pretend to be GCC but they stopped they

00:15:31,820 --> 00:15:35,000
stopped shipping that in ten

00:15:32,730 --> 00:15:37,980
1:10 and so our impure references to GCC

00:15:35,000 --> 00:15:40,949
would have all broken when 10.10 was

00:15:37,980 --> 00:15:43,829
released and so his goal in doing this

00:15:40,949 --> 00:15:47,040
was not only to get clang-clang based a

00:15:43,829 --> 00:15:49,560
standard ad working but also to to you

00:15:47,040 --> 00:15:53,070
know have not all of Nyx break when

00:15:49,560 --> 00:15:55,620
10.10 was released now things to note

00:15:53,070 --> 00:15:57,540
here are you can see just even in the

00:15:55,620 --> 00:16:00,470
defect circles right there

00:15:57,540 --> 00:16:03,240
Nixon force purity is septa - nothing

00:16:00,470 --> 00:16:05,310
that that is a magic environment

00:16:03,240 --> 00:16:07,440
variable that gets set all over the like

00:16:05,310 --> 00:16:11,430
super low level and inside the standard

00:16:07,440 --> 00:16:13,230
M and tells the tells the wrappers

00:16:11,430 --> 00:16:16,010
around around the linker and the

00:16:13,230 --> 00:16:18,209
compiler to to not complain if you see a

00:16:16,010 --> 00:16:21,360
path outside of the next door because

00:16:18,209 --> 00:16:22,949
that was necessity in the impure days

00:16:21,360 --> 00:16:25,709
and the other the other big thing is

00:16:22,949 --> 00:16:28,350
there's a very sad user bin right right

00:16:25,709 --> 00:16:30,930
low down there kind of everything comes

00:16:28,350 --> 00:16:31,889
out of there it's still super impure but

00:16:30,930 --> 00:16:33,779
this was a step in the right direction

00:16:31,889 --> 00:16:35,970
and allowed us to start to start moving

00:16:33,779 --> 00:16:41,990
in the direction of apples apples own

00:16:35,970 --> 00:16:46,529
tools the the next big step here was was

00:16:41,990 --> 00:16:49,500
effectively adding a fake bootstrap and

00:16:46,529 --> 00:16:51,630
what I mean by that is you'll see

00:16:49,500 --> 00:16:54,149
there's a trivial bootstrap dot SH right

00:16:51,630 --> 00:16:58,040
there that trivial bootstrap and I'm

00:16:54,149 --> 00:17:00,600
just gonna show a little little a little

00:16:58,040 --> 00:17:02,730
clip of that trivial bootstrap now SH

00:17:00,600 --> 00:17:04,679
its instead of just making references

00:17:02,730 --> 00:17:06,780
directly to to the paths on the

00:17:04,679 --> 00:17:09,540
filesystem which was which was

00:17:06,780 --> 00:17:10,860
particularly impure instead I add one

00:17:09,540 --> 00:17:12,480
level in direction because that's always

00:17:10,860 --> 00:17:13,740
the right answer and sticking inside a

00:17:12,480 --> 00:17:16,079
derivation and so the Builder of this

00:17:13,740 --> 00:17:18,569
derivation was just calling Ln against

00:17:16,079 --> 00:17:19,860
the against the impure paths and what

00:17:18,569 --> 00:17:21,630
with that allowed me to do was plummet

00:17:19,860 --> 00:17:23,780
plummet through a little better and so

00:17:21,630 --> 00:17:26,280
instead of depending directly on on

00:17:23,780 --> 00:17:28,500
Vanessa or I guess everything else still

00:17:26,280 --> 00:17:30,210
depends on the Bennis age but bin CP you

00:17:28,500 --> 00:17:31,950
can now depend on like the the actual

00:17:30,210 --> 00:17:34,049
derivation path which happened to then

00:17:31,950 --> 00:17:35,850
point to bin bin CP but then someday

00:17:34,049 --> 00:17:37,440
maybe I would be able to change that so

00:17:35,850 --> 00:17:39,630
so this was the very beginning of the

00:17:37,440 --> 00:17:41,970
whole effort was with this this file

00:17:39,630 --> 00:17:43,890
basically and then that allowed us to

00:17:41,970 --> 00:17:45,880
start plugging around a few things like

00:17:43,890 --> 00:17:47,820
this so so this is

00:17:45,880 --> 00:17:52,210
possibly not the best example but but

00:17:47,820 --> 00:17:54,750
you can see I should there's like build

00:17:52,210 --> 00:17:57,640
tools like instead of actually making a

00:17:54,750 --> 00:17:59,230
reference to to the root filesystem now

00:17:57,640 --> 00:18:01,450
I'm actually making references to two

00:17:59,230 --> 00:18:02,860
derivation outputs this one act happens

00:18:01,450 --> 00:18:04,960
to be common commented out that was a I

00:18:02,860 --> 00:18:08,320
missed it but anyway and it wasn't

00:18:04,960 --> 00:18:10,540
always gone Fidel and so so what

00:18:08,320 --> 00:18:13,480
happened next was this make bootstrap

00:18:10,540 --> 00:18:15,190
tools because because like so now we got

00:18:13,480 --> 00:18:16,810
a we got a fake bootstrap now I want a

00:18:15,190 --> 00:18:18,940
real bootstrap and so I wanted to want

00:18:16,810 --> 00:18:21,010
to start getting towards what what Linux

00:18:18,940 --> 00:18:22,390
has Linux hasn't makes bootstrap tools

00:18:21,010 --> 00:18:25,600
done next under under their Linux

00:18:22,390 --> 00:18:28,390
standard and but obviously that doesn't

00:18:25,600 --> 00:18:31,570
work on us on Darwin so we needed one of

00:18:28,390 --> 00:18:32,950
our own and so I basically like I was

00:18:31,570 --> 00:18:35,170
still pretty clueless about Nix III

00:18:32,950 --> 00:18:37,090
didn't really know a lot of a lot at the

00:18:35,170 --> 00:18:39,280
time and so I basically just copied the

00:18:37,090 --> 00:18:41,970
Linux one and made a few changes what

00:18:39,280 --> 00:18:41,970
happened to my

00:18:42,890 --> 00:18:49,410
so yes so make boostrap tools I I was

00:18:47,610 --> 00:18:51,180
clueless I copied effectively the Linux

00:18:49,410 --> 00:18:52,710
mixture of bootstrap tools which which

00:18:51,180 --> 00:18:54,060
sort of indicates that I that this

00:18:52,710 --> 00:18:55,860
basically didn't work when I first

00:18:54,060 --> 00:18:57,660
committed it you can see there's Darwin

00:18:55,860 --> 00:18:58,770
up there but I actually refer to busybox

00:18:57,660 --> 00:19:00,060
down the bottom there which doesn't work

00:18:58,770 --> 00:19:01,860
at all in Garland so like this just

00:19:00,060 --> 00:19:06,840
would've failed but it was it was a

00:19:01,860 --> 00:19:07,650
start and and we the this this was

00:19:06,840 --> 00:19:11,300
basically the beginning of the

00:19:07,650 --> 00:19:14,850
collaboration between me and Jude on IRC

00:19:11,300 --> 00:19:19,020
to to really like work work together on

00:19:14,850 --> 00:19:20,580
on hacking together the very basic

00:19:19,020 --> 00:19:23,220
bootstrap tools that would allow us to

00:19:20,580 --> 00:19:24,990
choose ER to become pure and so so those

00:19:23,220 --> 00:19:26,970
bootstrap tools there's there's a few

00:19:24,990 --> 00:19:28,980
different components as I mentioned like

00:19:26,970 --> 00:19:30,840
the compiler itself and then there's the

00:19:28,980 --> 00:19:33,240
headers and headers is actually where

00:19:30,840 --> 00:19:35,250
the meat of the work went so I'm just

00:19:33,240 --> 00:19:37,230
gonna like here's I guess evidence of

00:19:35,250 --> 00:19:38,370
the collaboration there's Jude you see

00:19:37,230 --> 00:19:41,580
at the top there me down at the bottom

00:19:38,370 --> 00:19:43,170
there that there there's a water it's

00:19:41,580 --> 00:19:45,900
most Muslim throw away and most of them

00:19:43,170 --> 00:19:48,990
have really shitty commit messages but

00:19:45,900 --> 00:19:53,270
and this can all be found on my ancient

00:19:48,990 --> 00:19:55,470
branch on my my github port the headers

00:19:53,270 --> 00:19:57,240
there were tons of commits like this

00:19:55,470 --> 00:20:00,630
this was basically started in in early

00:19:57,240 --> 00:20:04,590
early October and went for basically a

00:20:00,630 --> 00:20:06,300
month of basically harvesting random

00:20:04,590 --> 00:20:10,410
packages from open source at Apple comm

00:20:06,300 --> 00:20:13,440
and effectively looking through the

00:20:10,410 --> 00:20:14,340
Apple SDK and they published and trying

00:20:13,440 --> 00:20:16,230
to figure out where the headers came

00:20:14,340 --> 00:20:17,910
from because they usually came from a

00:20:16,230 --> 00:20:20,190
package that Apple released but wasn't

00:20:17,910 --> 00:20:23,700
always obvious where it came from and so

00:20:20,190 --> 00:20:25,920
I needed to go effectively had like a

00:20:23,700 --> 00:20:28,320
script where I listed all the files in

00:20:25,920 --> 00:20:31,110
there header hold her and tried to map

00:20:28,320 --> 00:20:32,910
it to a to a package from an apple and

00:20:31,110 --> 00:20:36,540
and then tried to figure out how to

00:20:32,910 --> 00:20:37,860
package that in nix and then harvested

00:20:36,540 --> 00:20:39,090
the headers from there and like we can

00:20:37,860 --> 00:20:41,190
reconstituted them into something that

00:20:39,090 --> 00:20:43,050
looks vaguely like apples official one

00:20:41,190 --> 00:20:44,370
this is all just to avoid licensing

00:20:43,050 --> 00:20:46,440
restrictions because Apple releases

00:20:44,370 --> 00:20:48,870
their SDK with a different license from

00:20:46,440 --> 00:20:50,760
the from the constituent parts of it and

00:20:48,870 --> 00:20:52,370
so that's that's how you end up with

00:20:50,760 --> 00:20:54,870
that weird licensing agreement there

00:20:52,370 --> 00:20:56,030
even though all the headers and stuff

00:20:54,870 --> 00:20:59,210
are released under the eight

00:20:56,030 --> 00:21:02,420
ESL which is Apple public source license

00:20:59,210 --> 00:21:05,540
which is pretty permissive the the SDK

00:21:02,420 --> 00:21:07,760
itself is is rather unpleasant and and

00:21:05,540 --> 00:21:10,490
is much more nebulous about actual

00:21:07,760 --> 00:21:12,260
packaging are so so effectively it's

00:21:10,490 --> 00:21:14,750
it's figuring out how Apple builds that

00:21:12,260 --> 00:21:18,740
SDK from from all the packages which to

00:21:14,750 --> 00:21:20,720
release anyway and so there's there's a

00:21:18,740 --> 00:21:22,790
lot of annoyance there around things

00:21:20,720 --> 00:21:26,450
like like if you're just going to buy a

00:21:22,790 --> 00:21:27,770
header name it's a lot of the headers

00:21:26,450 --> 00:21:30,560
have like there's multiple headers with

00:21:27,770 --> 00:21:33,800
the same name which means that if you

00:21:30,560 --> 00:21:34,910
have a like the the kernel that they

00:21:33,800 --> 00:21:36,440
released the source code to the kernel

00:21:34,910 --> 00:21:37,670
the kernel has because it has no

00:21:36,440 --> 00:21:39,980
dependencies has a bunch of headers of

00:21:37,670 --> 00:21:41,560
its own and has like a sudo standard

00:21:39,980 --> 00:21:43,820
library and various things like that

00:21:41,560 --> 00:21:45,800
those headers are not ones you want to

00:21:43,820 --> 00:21:47,150
use outside of the kernel but if you're

00:21:45,800 --> 00:21:48,410
not careful you accidentally pull them

00:21:47,150 --> 00:21:50,900
in from the wrong place and it gets very

00:21:48,410 --> 00:21:52,790
messy so so that was a pretty painful

00:21:50,900 --> 00:21:55,970
point and a lot of experimentation

00:21:52,790 --> 00:22:00,020
around around how to constitute those

00:21:55,970 --> 00:22:01,460
bootstrap tools and and as far as how I

00:22:00,020 --> 00:22:03,860
was actually testing this when I was

00:22:01,460 --> 00:22:06,890
when I was going around it was it was

00:22:03,860 --> 00:22:09,290
pretty cocky you can see here I have the

00:22:06,890 --> 00:22:13,660
standard amp again with enforced purity

00:22:09,290 --> 00:22:16,730
equals one unlike before and this was my

00:22:13,660 --> 00:22:20,000
might basically the the bootstrap

00:22:16,730 --> 00:22:23,540
tarball so we have the CPI owed up easy

00:22:20,000 --> 00:22:25,130
to see PIOs obscure archive format that

00:22:23,540 --> 00:22:27,260
is easier to unpack I guess than tar

00:22:25,130 --> 00:22:29,240
that's I was just copying what Linux was

00:22:27,260 --> 00:22:30,350
doing at the time you'll see that I was

00:22:29,240 --> 00:22:31,910
actually pretty clueless about next

00:22:30,350 --> 00:22:35,360
because I actually had this this path in

00:22:31,910 --> 00:22:38,420
quotes and and that was just basically

00:22:35,360 --> 00:22:40,400
relying on impurity to work at all but

00:22:38,420 --> 00:22:41,570
it worked and I was it was a because we

00:22:40,400 --> 00:22:44,150
didn't have a sandbox or anything at the

00:22:41,570 --> 00:22:46,130
time so anyway I was able to do coffee

00:22:44,150 --> 00:22:47,990
and extract extract the bootstrap tools

00:22:46,130 --> 00:22:49,310
properly not my kind of stuff and so so

00:22:47,990 --> 00:22:51,110
this was effectively how that I was

00:22:49,310 --> 00:22:54,500
testing it I would run Nix build I'll

00:22:51,110 --> 00:22:56,120
make bootstrap tools see if it worked if

00:22:54,500 --> 00:22:57,980
it did work I'd leave it in that path

00:22:56,120 --> 00:22:59,930
and then have had this other thing

00:22:57,980 --> 00:23:02,060
consume it and try to actually build

00:22:59,930 --> 00:23:04,190
stuff from scratch and it would not work

00:23:02,060 --> 00:23:05,480
and then I'd have to amend the bootstrap

00:23:04,190 --> 00:23:07,820
tools and rerun it and all that kind of

00:23:05,480 --> 00:23:09,350
stuff it wasn't very fun especially

00:23:07,820 --> 00:23:11,210
since even like them

00:23:09,350 --> 00:23:13,309
the way I had the standard I'm working

00:23:11,210 --> 00:23:16,639
at the time required three different

00:23:13,309 --> 00:23:18,259
LLVM builds and clang builds which are I

00:23:16,639 --> 00:23:20,500
if anyone's tried them are very slow it

00:23:18,259 --> 00:23:23,870
takes the least an hour probably each

00:23:20,500 --> 00:23:26,659
for an LLVM and clang build depending on

00:23:23,870 --> 00:23:27,919
how powerful your machine is and so the

00:23:26,659 --> 00:23:30,230
iteration time on this was extremely

00:23:27,919 --> 00:23:31,730
slow and painful but I

00:23:30,230 --> 00:23:33,679
since figured out how to make it work

00:23:31,730 --> 00:23:38,059
with just one which is much nicer it's

00:23:33,679 --> 00:23:40,190
still pretty slow and so what this led

00:23:38,059 --> 00:23:42,049
to was was effectively a bunch more

00:23:40,190 --> 00:23:43,820
badly named commits and then we actually

00:23:42,049 --> 00:23:45,409
you'll see there there's Darwin

00:23:43,820 --> 00:23:47,659
bootstrap tools and this looks much

00:23:45,409 --> 00:23:50,480
darker here than I did on my on my

00:23:47,659 --> 00:23:53,059
original screen but this was creating

00:23:50,480 --> 00:23:55,429
the original bootstrap tools that

00:23:53,059 --> 00:23:56,899
actually were somewhat viable and this

00:23:55,429 --> 00:23:58,879
was kind of the end of one branch and

00:23:56,899 --> 00:24:00,529
then I I actually fed those into a

00:23:58,879 --> 00:24:03,200
different branch and you can see this is

00:24:00,529 --> 00:24:04,750
the very first time in November about a

00:24:03,200 --> 00:24:07,309
month after I started this whole thing

00:24:04,750 --> 00:24:09,379
actually using the new bootstrap tools

00:24:07,309 --> 00:24:16,820
in an another random branch that is now

00:24:09,379 --> 00:24:18,379
lost referred to anywhere and and so

00:24:16,820 --> 00:24:20,809
that was effectively the beginning of

00:24:18,379 --> 00:24:23,480
like a real actual pure environment in

00:24:20,809 --> 00:24:26,029
in Darwin it was it was miserable

00:24:23,480 --> 00:24:28,340
getting there it was pretty nice after

00:24:26,029 --> 00:24:29,720
that although there was still a lot of

00:24:28,340 --> 00:24:31,100
very slow durations because it took me a

00:24:29,720 --> 00:24:34,940
long time to figure out that the three

00:24:31,100 --> 00:24:36,909
clangs were unnecessary so this is where

00:24:34,940 --> 00:24:39,230
I'm gonna start sort of breaking up the

00:24:36,909 --> 00:24:40,759
sort of the path of history because a

00:24:39,230 --> 00:24:43,820
few different things started happening

00:24:40,759 --> 00:24:45,320
at this point like a lot of these that

00:24:43,820 --> 00:24:49,039
the header wrangling was basically just

00:24:45,320 --> 00:24:50,840
me working alone on that and sort of

00:24:49,039 --> 00:24:52,759
obsessively and then and then we we had

00:24:50,840 --> 00:24:57,289
a few different parallel threads

00:24:52,759 --> 00:25:01,309
happening after this effectively there

00:24:57,289 --> 00:25:04,190
there was a on one level there's there's

00:25:01,309 --> 00:25:05,899
the we want to refine the standard out

00:25:04,190 --> 00:25:08,419
so it was the one other thing I

00:25:05,899 --> 00:25:09,950
mentioned earlier about Linux was it's

00:25:08,419 --> 00:25:12,620
it's very careful about the dependencies

00:25:09,950 --> 00:25:13,940
it has because one of the one of the

00:25:12,620 --> 00:25:15,799
objectives is to not depend on the

00:25:13,940 --> 00:25:18,429
bootstrap tools and like you want no

00:25:15,799 --> 00:25:20,210
runtime dependencies on them because I

00:25:18,429 --> 00:25:23,200
guess it's like a cleanliness thing

00:25:20,210 --> 00:25:24,650
almost like you don't want to feel like

00:25:23,200 --> 00:25:25,850
like you wanna be able to

00:25:24,650 --> 00:25:27,500
garbage-collected it's not as if they're

00:25:25,850 --> 00:25:29,240
actually pretty large but but it feels

00:25:27,500 --> 00:25:30,350
wrong to sort of retain a run time

00:25:29,240 --> 00:25:32,180
dependency on them and you want to sort

00:25:30,350 --> 00:25:33,550
of be a completely independent and be

00:25:32,180 --> 00:25:38,059
able to ship around the standard AM

00:25:33,550 --> 00:25:40,580
closure without them and unfortunately

00:25:38,059 --> 00:25:42,800
my synonym at the time had thousands or

00:25:40,580 --> 00:25:45,290
housings but um the references to to the

00:25:42,800 --> 00:25:47,570
bootstrap tools all throughout it and

00:25:45,290 --> 00:25:48,920
today it does not and so this is

00:25:47,570 --> 00:25:53,600
effectively what it looks like it's a

00:25:48,920 --> 00:25:55,790
little snapshot of the dot file that the

00:25:53,600 --> 00:25:57,800
next door spits out for run kind

00:25:55,790 --> 00:26:00,530
dependencies so you'll see there's no

00:25:57,800 --> 00:26:02,150
bootstrap tools in there and that was an

00:26:00,530 --> 00:26:07,190
extremely painful process again because

00:26:02,150 --> 00:26:09,830
of the 300 VMs and sort of the key thing

00:26:07,190 --> 00:26:12,320
you end up doing here is is something

00:26:09,830 --> 00:26:14,360
like that you put in allowed requisites

00:26:12,320 --> 00:26:16,960
if there's anyone actually seen that or

00:26:14,360 --> 00:26:19,190
very few I mean I know Hugh you have

00:26:16,960 --> 00:26:21,520
that attribute before is it's a

00:26:19,190 --> 00:26:26,750
derivation attribute is kind of special

00:26:21,520 --> 00:26:29,480
Nix Nix will consume it and and treat it

00:26:26,750 --> 00:26:30,830
as effectively if you have a transitive

00:26:29,480 --> 00:26:31,370
dependency on any anything outside of

00:26:30,830 --> 00:26:33,530
that list

00:26:31,370 --> 00:26:36,500
it will it'll barf and reject your

00:26:33,530 --> 00:26:38,059
derivation there's a few variants on it

00:26:36,500 --> 00:26:39,590
you can have just there's the

00:26:38,059 --> 00:26:41,720
non-transitive version for allowed

00:26:39,590 --> 00:26:43,190
references there's you can have a

00:26:41,720 --> 00:26:45,410
blacklist instead of whitelist I think

00:26:43,190 --> 00:26:48,140
anyway this is this is our final

00:26:45,410 --> 00:26:51,170
standard am this was a about a month

00:26:48,140 --> 00:26:53,540
later I think we we were sort of able to

00:26:51,170 --> 00:26:54,590
reduce this down to down to only having

00:26:53,540 --> 00:26:57,620
a few dependencies and none of them are

00:26:54,590 --> 00:27:01,340
the are the bootstrap tools but that was

00:26:57,620 --> 00:27:04,760
another extremely sort of painful

00:27:01,340 --> 00:27:07,460
process that I think if anyone wanted to

00:27:04,760 --> 00:27:09,980
start another standard mm like FreeBSD

00:27:07,460 --> 00:27:11,420
or some BSD or Windows they would also

00:27:09,980 --> 00:27:14,390
have to figure out this kind of stuff

00:27:11,420 --> 00:27:15,770
and it's Nix why depends would be

00:27:14,390 --> 00:27:17,690
extremely would have been extremely nice

00:27:15,770 --> 00:27:20,210
in this in this whole process but at the

00:27:17,690 --> 00:27:23,059
time it was pretty much get next-door

00:27:20,210 --> 00:27:26,030
graph out and then run grep looking for

00:27:23,059 --> 00:27:30,230
for why the which files and their depend

00:27:26,030 --> 00:27:32,320
on it depend on on the undesired package

00:27:30,230 --> 00:27:36,650
and then figure out how to get rid of it

00:27:32,320 --> 00:27:38,630
but it's a anyway we got there

00:27:36,650 --> 00:27:41,000
and and the the the standard am still

00:27:38,630 --> 00:27:42,410
includes these in fact I probably went

00:27:41,000 --> 00:27:44,750
overboard every stage of the standard em

00:27:42,410 --> 00:27:45,920
includes these because it might make so

00:27:44,750 --> 00:27:50,270
much easier at every stage to be able to

00:27:45,920 --> 00:27:53,750
figure out where the dependencies are so

00:27:50,270 --> 00:27:56,090
I mentioned the sandbox earlier we we

00:27:53,750 --> 00:27:58,730
started fairly early on before having an

00:27:56,090 --> 00:28:02,090
official NICs sandbox I'm using some

00:27:58,730 --> 00:28:05,930
sandboxing tooling inside Mac OS to do

00:28:02,090 --> 00:28:07,100
all the same stuff there's uh this was

00:28:05,930 --> 00:28:09,320
the very first commit that I was able to

00:28:07,100 --> 00:28:11,030
find using it you see there's a sort of

00:28:09,320 --> 00:28:14,510
purification for running in sandbox and

00:28:11,030 --> 00:28:16,610
this was very early and what I mean by

00:28:14,510 --> 00:28:18,170
that is is basically the what what makes

00:28:16,610 --> 00:28:21,350
used to call the troop builds

00:28:18,170 --> 00:28:23,090
effectively and and you you wanna you

00:28:21,350 --> 00:28:24,890
want to stop your package build from

00:28:23,090 --> 00:28:27,470
seeing random stuff around the file

00:28:24,890 --> 00:28:29,990
system because your build tools Auto

00:28:27,470 --> 00:28:32,240
Kampf loves to look all over the file

00:28:29,990 --> 00:28:34,220
system or in many cases does see make is

00:28:32,240 --> 00:28:36,500
even worse at it will we'll go find

00:28:34,220 --> 00:28:40,760
things that you never knew you had and

00:28:36,500 --> 00:28:42,620
use them and and so at least for purity

00:28:40,760 --> 00:28:46,400
and possibly security if you're if you

00:28:42,620 --> 00:28:48,320
if you care about that you you want

00:28:46,400 --> 00:28:50,990
these things to be pure and or to be

00:28:48,320 --> 00:28:53,240
isolated and so Apple has the sandbox

00:28:50,990 --> 00:28:57,170
and machinery called a sandbox also

00:28:53,240 --> 00:28:58,790
known as seatbelt and it's it's almost

00:28:57,170 --> 00:28:59,920
completely undocumented except for like

00:28:58,790 --> 00:29:03,260
a front-end that we can't really use

00:28:59,920 --> 00:29:06,260
that they shipped with the App Store and

00:29:03,260 --> 00:29:11,380
so there's this tool called sandbox exec

00:29:06,260 --> 00:29:13,910
which which will take a a scheme program

00:29:11,380 --> 00:29:15,920
and yeah so Apple actually actually

00:29:13,910 --> 00:29:18,440
built in a scheme interpreter into their

00:29:15,920 --> 00:29:20,420
into their OS it's not in the kernel

00:29:18,440 --> 00:29:21,800
there's there's a user using LAN library

00:29:20,420 --> 00:29:24,200
and then they ship bytecode the kernel

00:29:21,800 --> 00:29:25,580
and the kernel runs bytecode but it's

00:29:24,200 --> 00:29:27,530
tiny scheme and if you can if you

00:29:25,580 --> 00:29:29,210
actually look around one of the

00:29:27,530 --> 00:29:32,360
libraries on your file system on a Mac

00:29:29,210 --> 00:29:33,770
you'll find the tiny scheme Prelude and

00:29:32,360 --> 00:29:36,770
standard library and all that kind of

00:29:33,770 --> 00:29:38,600
stuff but it's you can if you come

00:29:36,770 --> 00:29:40,220
across a set comp on Linux it's it's a

00:29:38,600 --> 00:29:42,730
very similar idea except it actually has

00:29:40,220 --> 00:29:45,280
a decent front-end so

00:29:42,730 --> 00:29:47,830
and and the front end looks something

00:29:45,280 --> 00:29:51,070
like this so so this is uh this is the

00:29:47,830 --> 00:29:52,810
NTP daemon on Mac OS I just grabbed it

00:29:51,070 --> 00:29:57,460
off my computer before this this talk

00:29:52,810 --> 00:29:59,710
and it pretty much every daemon running

00:29:57,460 --> 00:30:01,570
on Mac OS runs in some minimal

00:29:59,710 --> 00:30:03,010
permission sandbox like this so if

00:30:01,570 --> 00:30:05,860
someone were to find some sort of remote

00:30:03,010 --> 00:30:07,720
remote code execution in my NTP daemon

00:30:05,860 --> 00:30:10,810
they would not be able to do very much

00:30:07,720 --> 00:30:12,400
other than maybe change my time at least

00:30:10,810 --> 00:30:15,760
on without coupling it with some sort of

00:30:12,400 --> 00:30:17,320
sandbox escape I think and so this is

00:30:15,760 --> 00:30:19,660
these are files that you can find on

00:30:17,320 --> 00:30:21,580
your Mac but but are basically

00:30:19,660 --> 00:30:24,100
completely undocumented and so like the

00:30:21,580 --> 00:30:26,620
the various capabilities you can grant

00:30:24,100 --> 00:30:28,060
process Forks signal same sandbox all

00:30:26,620 --> 00:30:29,380
that kind of stuff it's quite readable

00:30:28,060 --> 00:30:31,810
so you can sort of figure out what they

00:30:29,380 --> 00:30:33,310
mean by that but is not documented at

00:30:31,810 --> 00:30:37,240
all other than people reverse

00:30:33,310 --> 00:30:39,040
engineering so we decided to to

00:30:37,240 --> 00:30:40,870
standardize on on doing this we were

00:30:39,040 --> 00:30:45,250
using a sort of ad hoc sandbox profiles

00:30:40,870 --> 00:30:48,040
for our Nix builds and and so submitted

00:30:45,250 --> 00:30:49,120
a PR against against Nix this again is

00:30:48,040 --> 00:30:51,610
much darker than I hoped

00:30:49,120 --> 00:30:53,650
but you can see that and very vaguely

00:30:51,610 --> 00:30:56,560
you can see me submitting a PR against

00:30:53,650 --> 00:30:58,090
Nix in the very beginning of 2015 that

00:30:56,560 --> 00:31:00,610
actually added support for using this

00:30:58,090 --> 00:31:03,160
automatically to Nix under build use

00:31:00,610 --> 00:31:05,200
troop which we then renamed to build we

00:31:03,160 --> 00:31:08,200
used sandbox because it wasn't very

00:31:05,200 --> 00:31:09,340
accurate anymore and and it works in

00:31:08,200 --> 00:31:10,960
exactly the same way we're almost

00:31:09,340 --> 00:31:12,760
exactly the same way as the as the next

00:31:10,960 --> 00:31:14,800
one or the mechanism is completely

00:31:12,760 --> 00:31:16,050
differently but it basically asks and

00:31:14,800 --> 00:31:18,520
Nick's figures out the complete

00:31:16,050 --> 00:31:21,280
transitive dependencies of a of a build

00:31:18,520 --> 00:31:22,480
on our from the derivation and and then

00:31:21,280 --> 00:31:25,060
it makes those all available as

00:31:22,480 --> 00:31:26,770
read-only inputs to to the builder and

00:31:25,060 --> 00:31:28,990
then the only writable thing is the

00:31:26,770 --> 00:31:32,020
output and it turns off network access

00:31:28,990 --> 00:31:34,870
it turns off viewing of pids of other

00:31:32,020 --> 00:31:37,330
processes all the nice stuff that we're

00:31:34,870 --> 00:31:41,560
sort of getting in Linux with namespaces

00:31:37,330 --> 00:31:43,660
we get from not all of it most of it we

00:31:41,560 --> 00:31:46,810
get from the sandbox machinery and Mac

00:31:43,660 --> 00:31:48,400
OS so that was a pull request it went

00:31:46,810 --> 00:31:50,200
into Nix it was very nice and then it

00:31:48,400 --> 00:31:53,070
kind of died so we're gonna revive that

00:31:50,200 --> 00:31:58,259
in hackathon this year or today tomorrow

00:31:53,070 --> 00:32:01,080
but so there's also just sort of general

00:31:58,259 --> 00:32:02,700
cleanup this was a this was another sort

00:32:01,080 --> 00:32:04,980
of parallel effort that happening after

00:32:02,700 --> 00:32:07,529
we got the initial standard out a ton of

00:32:04,980 --> 00:32:09,179
packages were sort of broken in many

00:32:07,529 --> 00:32:14,250
ways so what we what we ended up doing

00:32:09,179 --> 00:32:16,590
was we were afraid of breaking the the

00:32:14,250 --> 00:32:19,320
five Nix Darwin users that existed on

00:32:16,590 --> 00:32:21,240
main index packages I'm being a little

00:32:19,320 --> 00:32:22,710
little caesars there but there were

00:32:21,240 --> 00:32:25,919
there were there weren't very many next

00:32:22,710 --> 00:32:26,879
Darwin users at the time and we're

00:32:25,919 --> 00:32:28,019
afraid of breaking it so we didn't just

00:32:26,879 --> 00:32:31,019
want to merge the new standard em

00:32:28,019 --> 00:32:33,240
because it was at that point probably

00:32:31,019 --> 00:32:36,269
worse than me than the amperior standard

00:32:33,240 --> 00:32:37,769
and a lot of stuff was broken so what we

00:32:36,269 --> 00:32:39,659
did was basically just made my fork into

00:32:37,769 --> 00:32:42,240
a long long live fork and we had a

00:32:39,659 --> 00:32:43,710
branch on there called pure Darwin and I

00:32:42,240 --> 00:32:45,419
actually opened up the issue tracker on

00:32:43,710 --> 00:32:47,940
the fork which isn't usually available

00:32:45,419 --> 00:32:51,480
by default and github so there's this is

00:32:47,940 --> 00:32:53,669
from my Forks issue tracker of all sorts

00:32:51,480 --> 00:32:55,230
of things that that did not work with

00:32:53,669 --> 00:32:58,320
the new standard admins like Python 3

00:32:55,230 --> 00:33:00,029
didn't work Ruby all sorts of stuff and

00:32:58,320 --> 00:33:02,039
we had to go through and this was a

00:33:00,029 --> 00:33:04,320
massive effort from a bunch of bunch of

00:33:02,039 --> 00:33:07,649
different people and they and the Darwin

00:33:04,320 --> 00:33:09,450
Nix group basically just fixing

00:33:07,649 --> 00:33:10,889
everything that we could find and just

00:33:09,450 --> 00:33:15,120
trying to build random packages see what

00:33:10,889 --> 00:33:18,480
broke fixing them going on like that and

00:33:15,120 --> 00:33:21,149
so that was quite an effort over the

00:33:18,480 --> 00:33:30,779
next few months and the reason as I said

00:33:21,149 --> 00:33:34,289
we were wary of merging yeah the four

00:33:30,779 --> 00:33:36,929
started languish and I was losing my

00:33:34,289 --> 00:33:39,509
motivation its it was a pain in the ass

00:33:36,929 --> 00:33:41,009
to to maintain the long live pork as is

00:33:39,509 --> 00:33:44,009
generally true

00:33:41,009 --> 00:33:45,299
the merges were painful Linux was always

00:33:44,009 --> 00:33:49,769
breaking our stuff because nobody knew

00:33:45,299 --> 00:33:52,529
about it which and and I I was sort of

00:33:49,769 --> 00:33:53,700
the the bus factor of one for a lot of

00:33:52,529 --> 00:33:55,019
the standard em stuff so anytime

00:33:53,700 --> 00:33:56,730
anything was broken there I needed to go

00:33:55,019 --> 00:34:00,419
fix it myself and I had other other

00:33:56,730 --> 00:34:02,129
things going on so so it was it sort of

00:34:00,419 --> 00:34:03,629
looked like it was gonna die or at least

00:34:02,129 --> 00:34:05,890
seemed seemed to me like it was gonna

00:34:03,629 --> 00:34:09,010
die but Pikachu

00:34:05,890 --> 00:34:10,360
dude saves the day and actually went and

00:34:09,010 --> 00:34:14,230
put in all the effort to actually

00:34:10,360 --> 00:34:15,760
upstream it which was great so that is

00:34:14,230 --> 00:34:19,840
his pull request

00:34:15,760 --> 00:34:22,360
in mid-2015 a few months later basically

00:34:19,840 --> 00:34:24,700
merging the the the standard and and

00:34:22,360 --> 00:34:28,090
hundreds of packaged fixes fixes and

00:34:24,700 --> 00:34:29,950
stuff like that well this is um those

00:34:28,090 --> 00:34:31,300
871 lines were just the ones the

00:34:29,950 --> 00:34:34,560
dependencies from the standard down but

00:34:31,300 --> 00:34:37,210
but then many more subsequent changes

00:34:34,560 --> 00:34:38,830
back to master you can see me being

00:34:37,210 --> 00:34:42,520
enthusiastic about it because I was like

00:34:38,830 --> 00:34:44,230
oh it's not gonna die after all and and

00:34:42,520 --> 00:34:46,030
it wasn't the default standard am so so

00:34:44,230 --> 00:34:48,640
it was still it was still just an option

00:34:46,030 --> 00:34:49,840
you could flip in in config dot next you

00:34:48,640 --> 00:34:51,399
could say which standard him you wanted

00:34:49,840 --> 00:34:55,030
and we still defaulted to the other one

00:34:51,399 --> 00:34:57,520
and then a few months later he made a

00:34:55,030 --> 00:34:59,350
pull request switching over the default

00:34:57,520 --> 00:35:03,550
to the to the pure Darwin one after we

00:34:59,350 --> 00:35:05,440
after we ironed out the kinks and that's

00:35:03,550 --> 00:35:07,690
effectively I mean there have been

00:35:05,440 --> 00:35:10,060
changes but that's effectively the the

00:35:07,690 --> 00:35:11,980
core part that's still alive today so

00:35:10,060 --> 00:35:17,290
that's been going for about two years

00:35:11,980 --> 00:35:18,850
now the more recent developments I'm

00:35:17,290 --> 00:35:20,170
gonna go into a little bit of stuff

00:35:18,850 --> 00:35:24,160
that's happened since then in much less

00:35:20,170 --> 00:35:26,890
detail short on time L&L seven stepped

00:35:24,160 --> 00:35:30,850
up I became a effectively maintainer of

00:35:26,890 --> 00:35:32,530
this this stuff and has has done a ton

00:35:30,850 --> 00:35:34,090
of a ton of really cool things we had a

00:35:32,530 --> 00:35:36,250
long-standing bug for basically the two

00:35:34,090 --> 00:35:38,620
years up until about him a month maybe

00:35:36,250 --> 00:35:44,130
two months ago where random stuff would

00:35:38,620 --> 00:35:46,750
crash because of weird pure impure

00:35:44,130 --> 00:35:49,330
inconsistencies because one thing that I

00:35:46,750 --> 00:35:50,740
didn't mention earlier is the standard

00:35:49,330 --> 00:35:52,690
I'm vice I call it pure there there's

00:35:50,740 --> 00:35:56,470
it's slightly less pure than the Lumix

00:35:52,690 --> 00:35:58,440
inner dome fundamentally because Apple

00:35:56,470 --> 00:36:01,050
doesn't want to commit to a syscall ABI

00:35:58,440 --> 00:36:04,230
her for making sis calls to the kernel

00:36:01,050 --> 00:36:07,210
and so they actually changed the

00:36:04,230 --> 00:36:09,610
mechanism occasionally of how that works

00:36:07,210 --> 00:36:12,970
and so unlike on Linux which which is

00:36:09,610 --> 00:36:15,800
pretty stable about that Apple says do

00:36:12,970 --> 00:36:18,050
not write static executables and

00:36:15,800 --> 00:36:20,600
and go suffers from this because they do

00:36:18,050 --> 00:36:22,520
anyway and instead make all your sis

00:36:20,600 --> 00:36:25,490
calls through through what's called Lib

00:36:22,520 --> 00:36:29,990
system which is effectively part of the

00:36:25,490 --> 00:36:32,210
kernel in many ways on Mac OS and so

00:36:29,990 --> 00:36:34,640
that they actually have a tech note on

00:36:32,210 --> 00:36:35,900
their developer website saying please do

00:36:34,640 --> 00:36:40,120
not write your own syscall wrappers

00:36:35,900 --> 00:36:43,160
because we will break them and and so

00:36:40,120 --> 00:36:45,290
what that effectively means is either we

00:36:43,160 --> 00:36:46,670
need to we need to be very flexible and

00:36:45,290 --> 00:36:47,570
how we make sis calls and like have

00:36:46,670 --> 00:36:50,630
search almost sort of a bunch of

00:36:47,570 --> 00:36:53,060
switches inside our inside our pure

00:36:50,630 --> 00:36:54,290
interface to the kernel or we need to

00:36:53,060 --> 00:36:56,960
just be impure and use the live system

00:36:54,290 --> 00:37:00,530
like they tell us to and so what we're

00:36:56,960 --> 00:37:03,140
doing is is the latter so so effectively

00:37:00,530 --> 00:37:04,730
everything depends on user live live

00:37:03,140 --> 00:37:10,450
system to make sis calls and that's

00:37:04,730 --> 00:37:15,200
that's the the Lib C of Mac OS and so

00:37:10,450 --> 00:37:16,670
what that means is there's the that's an

00:37:15,200 --> 00:37:17,990
example of the other things so there's a

00:37:16,670 --> 00:37:19,910
couple of other impurities and then

00:37:17,990 --> 00:37:22,070
there's there's this whole sort of set

00:37:19,910 --> 00:37:23,420
of other kinds of libraries that that

00:37:22,070 --> 00:37:26,030
are proprietary libraries that come with

00:37:23,420 --> 00:37:28,700
Mac OS 4 that are called frameworks and

00:37:26,030 --> 00:37:30,170
they're they're used for a whole bunch

00:37:28,700 --> 00:37:33,950
of gooey stuff a whole bunch of like mac

00:37:30,170 --> 00:37:34,370
OS specific things that are all closed

00:37:33,950 --> 00:37:36,260
source

00:37:34,370 --> 00:37:38,110
none of the public hitters are publicly

00:37:36,260 --> 00:37:41,000
available all that kind of stuff and we

00:37:38,110 --> 00:37:46,190
had an incompatibility between one which

00:37:41,000 --> 00:37:47,990
is it's sort of hard to go into but but

00:37:46,190 --> 00:37:49,850
but effectively we had we had a pure

00:37:47,990 --> 00:37:50,900
version of one of those libraries an

00:37:49,850 --> 00:37:52,760
impure version of one of those libraries

00:37:50,900 --> 00:37:55,150
and they both maintain global state and

00:37:52,760 --> 00:37:57,710
they would clobber each other and and so

00:37:55,150 --> 00:38:00,170
this bug basically plagued a bunch of

00:37:57,710 --> 00:38:02,720
random programs in them in Mac OS Nix

00:38:00,170 --> 00:38:06,230
packages for the past the past year and

00:38:02,720 --> 00:38:09,860
a half or ever since this pure pure

00:38:06,230 --> 00:38:11,600
Darwin thing went in and and LML just

00:38:09,860 --> 00:38:13,280
fixed it couple months ago so that was

00:38:11,600 --> 00:38:14,690
that was a great change because that

00:38:13,280 --> 00:38:16,820
means they're random go packages no

00:38:14,690 --> 00:38:19,520
longer crash and random a whole bunch of

00:38:16,820 --> 00:38:21,800
other things no longer crash which is

00:38:19,520 --> 00:38:23,210
nice we've we've had countless

00:38:21,800 --> 00:38:24,950
improvements to the actual set of

00:38:23,210 --> 00:38:26,990
packages and a lot more things compile

00:38:24,950 --> 00:38:28,210
and it's very nice seeing random pull

00:38:26,990 --> 00:38:31,770
requests saying make X

00:38:28,210 --> 00:38:34,000
so something work on on mac OS this is

00:38:31,770 --> 00:38:37,270
another very cool development recently

00:38:34,000 --> 00:38:40,420
is Matthew power packaged a program

00:38:37,270 --> 00:38:43,750
called XC build that is I'll go into

00:38:40,420 --> 00:38:48,660
that in another slide but but it's it's

00:38:43,750 --> 00:38:51,809
a it's a it's actually a big deal the

00:38:48,660 --> 00:38:55,960
one of the things I mentioned the the

00:38:51,809 --> 00:38:58,599
homebrew changes for the Mac OS releases

00:38:55,960 --> 00:39:00,190
we've I won't lie we actually have had

00:38:58,599 --> 00:39:02,170
to make some changes for every major Mac

00:39:00,190 --> 00:39:03,880
of Mac OS release but they tend to be

00:39:02,170 --> 00:39:05,079
very restricted like we make a small

00:39:03,880 --> 00:39:07,210
change to the standard and everything it

00:39:05,079 --> 00:39:08,410
works again as opposed to like having to

00:39:07,210 --> 00:39:11,559
whack-a-mole and fix up a whole bunch

00:39:08,410 --> 00:39:13,270
packages all in place as I mentioned

00:39:11,559 --> 00:39:14,380
earlier the Mac both sandbox did

00:39:13,270 --> 00:39:17,470
actually fall into disrepair we're gonna

00:39:14,380 --> 00:39:19,480
fix it but it is currently not on by

00:39:17,470 --> 00:39:24,069
default and if you turn it on it breaks

00:39:19,480 --> 00:39:26,920
everything so ongoing challenges

00:39:24,069 --> 00:39:29,650
I guess Linux users still break great

00:39:26,920 --> 00:39:31,630
caller stuff it's it's not their fault

00:39:29,650 --> 00:39:33,220
because we really have no way for them

00:39:31,630 --> 00:39:35,770
to test it I mean it can submit

00:39:33,220 --> 00:39:37,349
something - yeah - hydrea they have

00:39:35,770 --> 00:39:42,400
their own jobs but nobody ever does that

00:39:37,349 --> 00:39:45,160
and so I'll talk possibly about ways to

00:39:42,400 --> 00:39:46,539
ways to improve that Apple is very

00:39:45,160 --> 00:39:49,599
unpredictable about how they release

00:39:46,539 --> 00:39:51,099
their source and and Apple users seem

00:39:49,599 --> 00:39:52,660
less willing to go tinker with this kind

00:39:51,099 --> 00:39:58,630
of stuff than on average at least that's

00:39:52,660 --> 00:40:01,660
my experience so what might be coming

00:39:58,630 --> 00:40:03,460
next I think we can actually we actually

00:40:01,660 --> 00:40:05,710
have a credible story now for for

00:40:03,460 --> 00:40:07,900
avoiding homebrew which has sort of been

00:40:05,710 --> 00:40:11,500
a staple of Mac developer for her years

00:40:07,900 --> 00:40:12,730
now I think I think Nick's OS on Darwin

00:40:11,500 --> 00:40:15,520
the connects packages on Darwin is

00:40:12,730 --> 00:40:17,980
actually pretty good now and I basically

00:40:15,520 --> 00:40:20,200
never use homebrew anymore I think most

00:40:17,980 --> 00:40:24,190
people might will find that their stuff

00:40:20,200 --> 00:40:26,559
will just work without homebrew puffin

00:40:24,190 --> 00:40:28,270
fresh Brian McKenna has done some

00:40:26,559 --> 00:40:29,710
awesome stuff on a background with Linux

00:40:28,270 --> 00:40:31,119
VM that sort of just worked

00:40:29,710 --> 00:40:34,329
transparently the remote builder for Mac

00:40:31,119 --> 00:40:36,789
OS I for a remote Linux builder on Mac

00:40:34,329 --> 00:40:38,529
OS so it allows us to build containers

00:40:36,789 --> 00:40:42,060
and things like that

00:40:38,529 --> 00:40:44,040
the one other thing we've been looking

00:40:42,060 --> 00:40:47,400
is I'm going the other way and creating

00:40:44,040 --> 00:40:49,620
a effectively a tiny Darwin bootable

00:40:47,400 --> 00:40:53,220
dart Darwin Colonel her Linux users in a

00:40:49,620 --> 00:40:54,540
VM that's also been great we haven't

00:40:53,220 --> 00:40:57,180
gotten there yet that the goal is

00:40:54,540 --> 00:40:59,310
possibly cheaper Hydra workers or or a

00:40:57,180 --> 00:41:02,070
Linux VM for people to actually test

00:40:59,310 --> 00:41:05,370
stuff on Linux without without having to

00:41:02,070 --> 00:41:08,100
buy their own Mac obviously Borg is as a

00:41:05,370 --> 00:41:10,050
reference to grams pop which will also

00:41:08,100 --> 00:41:12,840
improve the story there next are one as

00:41:10,050 --> 00:41:15,810
I mentioned is great there's there's a

00:41:12,840 --> 00:41:18,540
few other things I'm very short on time

00:41:15,810 --> 00:41:21,090
so just real quick on yxc build is a big

00:41:18,540 --> 00:41:22,710
deal the the standard atom is a is a

00:41:21,090 --> 00:41:24,900
pain in the ass to maintain like some of

00:41:22,710 --> 00:41:26,550
the derivation or the builders like look

00:41:24,900 --> 00:41:28,470
like that and that's because Apple has

00:41:26,550 --> 00:41:31,050
this proprietary build tool called Xcode

00:41:28,470 --> 00:41:34,770
build that it ships with Xcode which is

00:41:31,050 --> 00:41:36,480
very proprietary and and a lot of their

00:41:34,770 --> 00:41:37,980
open source releases or use it to build

00:41:36,480 --> 00:41:42,510
their stuff and so what we have to do is

00:41:37,980 --> 00:41:44,060
sort of expand the build ourselves and

00:41:42,510 --> 00:41:47,250
translate it into something like this

00:41:44,060 --> 00:41:49,230
which is horrible and this could just be

00:41:47,250 --> 00:41:52,560
translated now to a call taxi build

00:41:49,230 --> 00:41:53,970
which is great and so we're gonna look

00:41:52,560 --> 00:41:56,910
to integrate that into our into our

00:41:53,970 --> 00:42:02,160
standard m and and kill a lot of this

00:41:56,910 --> 00:42:04,110
kind of junk maintainability that's just

00:42:02,160 --> 00:42:06,680
like general standard am annoyances and

00:42:04,110 --> 00:42:06,680
that's all I got

00:42:09,490 --> 00:42:23,530
I don't think I have time for fresh

00:42:11,380 --> 00:42:56,880
lemon contractions there probably no Mac

00:42:23,530 --> 00:42:59,109
users ears that's it really depends on

00:42:56,880 --> 00:43:02,859
its it's hard for us to predict what

00:42:59,109 --> 00:43:04,480
we're going to do so so the issue is is

00:43:02,859 --> 00:43:06,130
we do have a compatibility shim

00:43:04,480 --> 00:43:08,140
effectively in the standard out that

00:43:06,130 --> 00:43:10,030
that papers over some of the differences

00:43:08,140 --> 00:43:11,500
in the impure and the like we have the

00:43:10,030 --> 00:43:13,330
fundamental impurity and that things

00:43:11,500 --> 00:43:14,500
changing out for underneath us and we we

00:43:13,330 --> 00:43:18,250
wrap it in something that makes it look

00:43:14,500 --> 00:43:20,130
the same each time and so the short

00:43:18,250 --> 00:43:23,230
answer is no I don't think so other than

00:43:20,130 --> 00:43:25,960
if you keep up to date we generally try

00:43:23,230 --> 00:43:28,359
stuff on the betas and and we'll like we

00:43:25,960 --> 00:43:30,010
fixed some stuff in the in the standard

00:43:28,359 --> 00:43:32,200
and a couple months before the actual

00:43:30,010 --> 00:43:34,270
release we couldn't have predicted the

00:43:32,200 --> 00:43:37,570
latest screw-up which was Apple breaking

00:43:34,270 --> 00:43:39,910
the kernel which is still broken that's

00:43:37,570 --> 00:43:44,530
something I haven't mentioned that yes

00:43:39,910 --> 00:43:45,970
don't use Nix on on ten thirteen but

00:43:44,530 --> 00:43:47,890
effectively I don't think there's any

00:43:45,970 --> 00:43:49,710
better consider and well I mean you

00:43:47,890 --> 00:43:53,980
don't have to wipe the entire the entire

00:43:49,710 --> 00:43:55,720
store because if you if you get to a new

00:43:53,980 --> 00:43:57,099
version as long as Nix itself hasn't

00:43:55,720 --> 00:43:58,270
broken then you can always get to a

00:43:57,099 --> 00:44:00,070
newer version and not have to worry

00:43:58,270 --> 00:44:01,540
about it but your if you use Nicks and a

00:44:00,070 --> 00:44:06,849
lot and the nicks and Vince the

00:44:01,540 --> 00:44:10,210
installed things might break also you

00:44:06,849 --> 00:44:12,420
can brew cask and stored Nick's you

00:44:10,210 --> 00:44:12,420
can't

00:44:14,380 --> 00:44:19,430
yeah it's a great talk thank you I was

00:44:17,540 --> 00:44:21,290
wondering like while I agree that the

00:44:19,430 --> 00:44:23,300
ultimate goal would certainly be to get

00:44:21,290 --> 00:44:25,730
rid of home row and have everyone here's

00:44:23,300 --> 00:44:27,650
Nicks I wonder to what degree can you

00:44:25,730 --> 00:44:29,300
actually benefit from from whatever the

00:44:27,650 --> 00:44:31,460
homebrew community has to do when they

00:44:29,300 --> 00:44:33,410
fix stuff like is it I mean is it are

00:44:31,460 --> 00:44:35,480
there in their own dark corner with all

00:44:33,410 --> 00:44:36,800
the impurity or is there is there

00:44:35,480 --> 00:44:38,780
anything that you can actually benefit

00:44:36,800 --> 00:44:41,000
from and what's there also what's this

00:44:38,780 --> 00:44:42,559
sorry vice versa like a Ken day and

00:44:41,000 --> 00:44:44,950
actually benefit from anything that you

00:44:42,559 --> 00:44:46,970
have to do to fix stuff so the I

00:44:44,950 --> 00:44:48,440
wouldn't say I've benefited too much

00:44:46,970 --> 00:44:50,359
from homebrew what I have benefited from

00:44:48,440 --> 00:44:52,730
is macports which is another one that I

00:44:50,359 --> 00:44:54,230
didn't mention it's a much less flashy

00:44:52,730 --> 00:44:58,309
package manager' and is more

00:44:54,230 --> 00:45:00,319
traditionally BSD flavored which has the

00:44:58,309 --> 00:45:02,300
advantage of having an apple developer

00:45:00,319 --> 00:45:04,460
who actively contributes to it who's

00:45:02,300 --> 00:45:08,990
also part of the the core apple team and

00:45:04,460 --> 00:45:12,140
so they he tends to know have and have

00:45:08,990 --> 00:45:14,270
useful packages are useful patches for a

00:45:12,140 --> 00:45:17,540
lot of these packages that that have

00:45:14,270 --> 00:45:19,400
saved us because anyone building these

00:45:17,540 --> 00:45:22,280
things open source is going to run into

00:45:19,400 --> 00:45:24,950
the same issues on Mac OS and so we will

00:45:22,280 --> 00:45:27,799
often steal their patents privately vice

00:45:24,950 --> 00:45:29,900
versa the approach they used is just so

00:45:27,799 --> 00:45:32,329
different like it's it's just so impure

00:45:29,900 --> 00:45:39,280
I I don't really know how I how I'd pay

00:45:32,329 --> 00:45:42,349
for those differences last question

00:45:39,280 --> 00:45:42,349
[Music]

00:45:46,920 --> 00:45:57,960
no question all right thank you have you

00:45:54,359 --> 00:46:00,210
looked into making Swift work on Nikolas

00:45:57,960 --> 00:46:02,309
this really interests me because I come

00:46:00,210 --> 00:46:05,549
from make us and have used Swift lot

00:46:02,309 --> 00:46:10,619
mm-hmm I personally haven't looked at

00:46:05,549 --> 00:46:14,040
Swift on like someone made a swift

00:46:10,619 --> 00:46:18,990
derivation William Catherine I think JB

00:46:14,040 --> 00:46:20,190
55 made an X Swift build I don't know

00:46:18,990 --> 00:46:21,660
whether it went anywhere I haven't

00:46:20,190 --> 00:46:23,880
actually used Swift myself so I kind of

00:46:21,660 --> 00:46:26,130
looked too carefully that I'd imagine if

00:46:23,880 --> 00:46:30,349
we can get a good build working it'll

00:46:26,130 --> 00:46:30,349
just work on both platforms fairly well

00:46:31,819 --> 00:46:39,409
thank you thank you

00:46:34,920 --> 00:46:39,409

YouTube URL: https://www.youtube.com/watch?v=73mnPBLL_20


