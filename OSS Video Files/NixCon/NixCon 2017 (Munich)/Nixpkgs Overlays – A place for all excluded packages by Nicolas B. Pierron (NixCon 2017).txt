Title: Nixpkgs Overlays â€“ A place for all excluded packages by Nicolas B. Pierron (NixCon 2017)
Publication date: 2017-11-07
Playlist: NixCon 2017 (Munich)
Description: 
	For many reasons, Nixpkgs cannot accept every package ever created. Things have to change, let's make sure we can at least include every package, even if they are not part of our central repository!

Since December 25th 2016, we are now able to use Overlays. Overlays gives us the ability to change the way Nixpkgs see the world, while providing most of the benefits that we can get from it. This presentation will address the following questions: Why overlays are useful, across a community, across an organization, or across the world? How to write an overlay with a few good and bad examples, and digging in the internals of Nixpkgs to understand how overlays are working? What can we do to improve the usage of overlay even more? What parts of Nixpkgs should be converted into overlays? 

Slides: http://nbp.github.io/slides/NixCon/2017.NixpkgsOverlays
Captions: 
	00:00:02,639 --> 00:00:09,120
our next speaker is Nicola who you

00:00:06,120 --> 00:00:12,059
probably know from the module system the

00:00:09,120 --> 00:00:14,789
one thing I definitely know about Nicola

00:00:12,059 --> 00:00:16,230
is something annoys him strong enough

00:00:14,789 --> 00:00:22,860
he'll do something like implemented

00:00:16,230 --> 00:00:26,580
module system he works day to day at

00:00:22,860 --> 00:00:29,880
Mozilla recently working on a new

00:00:26,580 --> 00:00:32,129
project called holy JIT which is a

00:00:29,880 --> 00:00:43,920
just-in-time compiler for JavaScript

00:00:32,129 --> 00:00:45,750
written in rust so one thing I I was

00:00:43,920 --> 00:00:48,510
looking for a logo for is this prison

00:00:45,750 --> 00:00:50,910
for the first like was this presentation

00:00:48,510 --> 00:00:54,420
and I was trying something with overlays

00:00:50,910 --> 00:00:55,649
and I figure out that we already add

00:00:54,420 --> 00:01:00,329
overlays we just need a bit of

00:00:55,649 --> 00:01:01,950
transparency to see them and adding

00:01:00,329 --> 00:01:03,809
transparency in the logo you can see

00:01:01,950 --> 00:01:06,479
that we already have overlays and we

00:01:03,809 --> 00:01:09,270
also had a fixed point we had to saleh

00:01:06,479 --> 00:01:11,520
goes either way to fix the it's a death

00:01:09,270 --> 00:01:14,250
of of printing it's and if you recall

00:01:11,520 --> 00:01:15,870
some old t-shirts is not always easy can

00:01:14,250 --> 00:01:21,030
this understand fixed point especially

00:01:15,870 --> 00:01:23,460
if you are a printer so the goal of this

00:01:21,030 --> 00:01:25,740
presentation is to make sure you

00:01:23,460 --> 00:01:29,250
understand overlays and make sure you

00:01:25,740 --> 00:01:32,580
understand them correctly I gave season

00:01:29,250 --> 00:01:36,150
eights community a gift for Christmas I

00:01:32,580 --> 00:01:40,439
give you overlays and almost a year

00:01:36,150 --> 00:01:43,049
after I come back to and went to the web

00:01:40,439 --> 00:01:45,030
and look for things where people used

00:01:43,049 --> 00:01:49,140
overlays and realize that

00:01:45,030 --> 00:01:50,640
hello crap people have used it but there

00:01:49,140 --> 00:01:53,580
are things that are in the documentation

00:01:50,640 --> 00:01:57,030
which might be not well explained and I

00:01:53,580 --> 00:02:00,540
of this presentation will verify that so

00:01:57,030 --> 00:02:03,770
I will go and describe what they are how

00:02:00,540 --> 00:02:07,590
they work and what you can do with them

00:02:03,770 --> 00:02:09,390
so Nick sauce is awesome we have a

00:02:07,590 --> 00:02:12,000
module system which gives us the ability

00:02:09,390 --> 00:02:14,819
to be decorative and this module system

00:02:12,000 --> 00:02:16,600
also give us the ability to compose

00:02:14,819 --> 00:02:19,600
different modules from all

00:02:16,600 --> 00:02:22,840
place and make that into one set it said

00:02:19,600 --> 00:02:25,240
that okay that's nice but not everything

00:02:22,840 --> 00:02:28,450
is awesome sorry for the lego movie but

00:02:25,240 --> 00:02:31,540
next packages is like you have

00:02:28,450 --> 00:02:35,530
suspensions and to return something it's

00:02:31,540 --> 00:02:37,410
not that much of declarative and it's

00:02:35,530 --> 00:02:41,470
not completely it was not compatible

00:02:37,410 --> 00:02:45,700
before overlays and we will see how

00:02:41,470 --> 00:02:48,100
overlays make that composable so before

00:02:45,700 --> 00:02:51,150
going into overlays let's look at how we

00:02:48,100 --> 00:02:53,710
use to extend mix packages before that

00:02:51,150 --> 00:02:56,410
before that we add these three functions

00:02:53,710 --> 00:02:59,140
and these three functions were like okay

00:02:56,410 --> 00:03:02,410
so respect over exit everybody almost

00:02:59,140 --> 00:03:04,360
everybody using config dot nix and it's

00:03:02,410 --> 00:03:07,390
nice you can extend things you can

00:03:04,360 --> 00:03:09,550
change the sources okay great but you

00:03:07,390 --> 00:03:11,800
cannot share that easily because you

00:03:09,550 --> 00:03:13,780
have some cues some stuff and it's like

00:03:11,800 --> 00:03:15,490
there is this one file and if you want

00:03:13,780 --> 00:03:17,350
to share that you have to share portion

00:03:15,490 --> 00:03:19,060
of it and we're back to the problems

00:03:17,350 --> 00:03:21,880
that I had before making the nexus

00:03:19,060 --> 00:03:24,190
modules which were okay how do we avoid

00:03:21,880 --> 00:03:26,560
getting into forums when we want to have

00:03:24,190 --> 00:03:29,710
a solution and how can I just share a

00:03:26,560 --> 00:03:31,690
file and just pull that down then we

00:03:29,710 --> 00:03:34,270
have this other function which I'm glad

00:03:31,690 --> 00:03:36,370
I removed it which is override package

00:03:34,270 --> 00:03:39,490
this is and if you don't know about it

00:03:36,370 --> 00:03:41,830
don't go dig don't dig further it's like

00:03:39,490 --> 00:03:44,610
awful and it's no longer there it's not

00:03:41,830 --> 00:03:47,260
not even try to use it it won't work

00:03:44,610 --> 00:03:50,470
then there is this other side which is

00:03:47,260 --> 00:03:52,780
like okay I'm from an external file in

00:03:50,470 --> 00:03:55,150
an another project and I want to import

00:03:52,780 --> 00:03:57,490
mix packages and extends these versions

00:03:55,150 --> 00:04:01,930
that I imported and as this new package

00:03:57,490 --> 00:04:04,350
is inside it that works well unless

00:04:01,930 --> 00:04:08,350
until the point where you want to add

00:04:04,350 --> 00:04:10,090
multiple and then you realize ok and I

00:04:08,350 --> 00:04:12,300
want to import something else that makes

00:04:10,090 --> 00:04:16,600
packages which already it stands it and

00:04:12,300 --> 00:04:18,940
it's becoming hell so all of this all of

00:04:16,600 --> 00:04:20,230
these methods are replaced by overlays

00:04:18,940 --> 00:04:24,130
and resting on one no longer exists

00:04:20,230 --> 00:04:29,290
right soon maybe I hope to break all of

00:04:24,130 --> 00:04:32,650
you if you are still using that so

00:04:29,290 --> 00:04:34,750
composable we can compose overlays in

00:04:32,650 --> 00:04:37,630
the way where we have the same same ties

00:04:34,750 --> 00:04:40,440
for all of them we have a simple syntax

00:04:37,630 --> 00:04:44,110
which is made to copy and paste and

00:04:40,440 --> 00:04:45,700
that's basically all and then you can do

00:04:44,110 --> 00:04:48,340
all the things that you could do with

00:04:45,700 --> 00:04:51,130
the overlays before which is like you

00:04:48,340 --> 00:04:53,320
can add packages you can replace some of

00:04:51,130 --> 00:04:55,780
them by tuning them you can change the

00:04:53,320 --> 00:04:58,330
recipe and you can remove some of them

00:04:55,780 --> 00:05:00,430
which for example say oh it's Leeds

00:04:58,330 --> 00:05:03,040
equal no yep

00:05:00,430 --> 00:05:06,660
no more its leaves which will break tons

00:05:03,040 --> 00:05:09,760
of sets such as in Knights I guess and

00:05:06,660 --> 00:05:13,240
the way overlay works is that you have

00:05:09,760 --> 00:05:15,610
one directory or an option in unique to

00:05:13,240 --> 00:05:17,500
s or a single file which don't have

00:05:15,610 --> 00:05:21,750
every something and this one directory

00:05:17,500 --> 00:05:24,460
lets you add files at the coarse-grained

00:05:21,750 --> 00:05:26,200
granularity and you add files into the

00:05:24,460 --> 00:05:29,410
directory and is called the overlays

00:05:26,200 --> 00:05:34,500
which will be use one after the other

00:05:29,410 --> 00:05:37,390
and will be combined into next packages

00:05:34,500 --> 00:05:42,790
so I will go through multiple examples

00:05:37,390 --> 00:05:44,950
and after while I will ask you to solve

00:05:42,790 --> 00:05:49,300
some of them so I will go with this easy

00:05:44,950 --> 00:05:50,800
one so this is the simplest overlays

00:05:49,300 --> 00:05:54,370
that you can make it takes two arguments

00:05:50,800 --> 00:05:56,380
one itself the other is super and you

00:05:54,370 --> 00:05:58,980
give it an empty set and you extended

00:05:56,380 --> 00:06:02,500
mix packages with nothing great

00:05:58,980 --> 00:06:04,240
so overlays are not just some things

00:06:02,500 --> 00:06:06,880
that are made of it's actually the

00:06:04,240 --> 00:06:09,280
internal of mix packages these packages

00:06:06,880 --> 00:06:11,050
is using the overlay system it says that

00:06:09,280 --> 00:06:14,350
it's doing a mess which is currently

00:06:11,050 --> 00:06:16,780
alighted in this slide and it's using

00:06:14,350 --> 00:06:18,910
the overlay system to basically stage

00:06:16,780 --> 00:06:24,720
the different levels of next packages

00:06:18,910 --> 00:06:28,210
that we currently add so this basically

00:06:24,720 --> 00:06:30,430
has the things that I did was like I was

00:06:28,210 --> 00:06:33,010
trying to do the grafting work again

00:06:30,430 --> 00:06:35,580
yeah if your recalls us it's a

00:06:33,010 --> 00:06:38,800
presentation from two years ago and I

00:06:35,580 --> 00:06:41,080
realize that huh there is this function

00:06:38,800 --> 00:06:41,560
override packages which gives me tons of

00:06:41,080 --> 00:06:42,639
trouble

00:06:41,560 --> 00:06:46,060
and I can replace it

00:06:42,639 --> 00:06:48,389
and just add overlays add Zn and that's

00:06:46,060 --> 00:06:50,979
basically all it is overlays are just

00:06:48,389 --> 00:06:53,169
adding something to Z intimal of next

00:06:50,979 --> 00:06:56,430
packages and you get to its end all of

00:06:53,169 --> 00:07:00,360
Nyx packages and I can remove one of the

00:06:56,430 --> 00:07:02,740
side features that was there and was

00:07:00,360 --> 00:07:04,930
awful in terms of performances and hey

00:07:02,740 --> 00:07:07,960
no one you're here so no we have

00:07:04,930 --> 00:07:10,240
overlays yes so a simple examples that I

00:07:07,960 --> 00:07:14,469
pronounced the Internet's it's quite -

00:07:10,240 --> 00:07:16,659
for its resourceful the Internet's find

00:07:14,469 --> 00:07:19,240
tons of things and sometimes are you

00:07:16,659 --> 00:07:21,490
find good examples and this one is just

00:07:19,240 --> 00:07:23,349
adding a command line to a command line

00:07:21,490 --> 00:07:26,500
argument to Google Chrome which is

00:07:23,349 --> 00:07:28,840
saying a use this proxy to redirect all

00:07:26,500 --> 00:07:32,110
my network connections through this

00:07:28,840 --> 00:07:34,270
proxy which is really nice especially

00:07:32,110 --> 00:07:36,400
you can set it on the command line and

00:07:34,270 --> 00:07:42,310
get all the nice feature protections

00:07:36,400 --> 00:07:43,870
that you get with a proxy so okay so

00:07:42,310 --> 00:07:49,000
that's a good way to get an overlay and

00:07:43,870 --> 00:07:51,490
you need to recompile once more so while

00:07:49,000 --> 00:07:56,349
we are discussing about recompilation as

00:07:51,490 --> 00:07:58,149
some other people wanted to to get to

00:07:56,349 --> 00:08:01,569
get Nix but in their different directory

00:07:58,149 --> 00:08:04,659
and basically this is interesting if you

00:08:01,569 --> 00:08:07,060
are stuck in your home and you have no

00:08:04,659 --> 00:08:09,729
root access for adding the next

00:08:07,060 --> 00:08:12,159
directory at the top level so this is a

00:08:09,729 --> 00:08:15,460
simplified example but this as the same

00:08:12,159 --> 00:08:16,060
IDs which is that you want to configure

00:08:15,460 --> 00:08:18,039
nigs

00:08:16,060 --> 00:08:20,099
to have its mix or at the different

00:08:18,039 --> 00:08:24,250
directory and that's an interesting one

00:08:20,099 --> 00:08:26,500
as well so then you have other example

00:08:24,250 --> 00:08:29,289
where you just have ordinary packages as

00:08:26,500 --> 00:08:32,380
we do even in neat packages and just one

00:08:29,289 --> 00:08:36,339
of the tools that we use within Mozilla

00:08:32,380 --> 00:08:40,419
for discussing so we saw this self and

00:08:36,339 --> 00:08:47,380
super and it's not clear when you see

00:08:40,419 --> 00:08:48,579
them so self is basically in the expect

00:08:47,380 --> 00:08:51,670
it is you have the fixed point you have

00:08:48,579 --> 00:08:52,990
all these stages and you have a fixed

00:08:51,670 --> 00:08:55,690
point which basically takes the output

00:08:52,990 --> 00:08:56,570
and give it back at the input of all of

00:08:55,690 --> 00:08:59,300
them

00:08:56,570 --> 00:09:02,690
and super is you have all these pages

00:08:59,300 --> 00:09:04,460
and it's the previous one you take the

00:09:02,690 --> 00:09:08,320
next stage is the previous one and so on

00:09:04,460 --> 00:09:11,360
so that's out that's basically all it is

00:09:08,320 --> 00:09:16,910
but that doesn't tell you how to use

00:09:11,360 --> 00:09:19,850
them self is made to you to physically

00:09:16,910 --> 00:09:22,160
find all the dependencies so if you have

00:09:19,850 --> 00:09:28,040
a package and your package depends on

00:09:22,160 --> 00:09:33,140
said on by Zone on Firefox then you will

00:09:28,040 --> 00:09:37,790
use self you all say self dot said self

00:09:33,140 --> 00:09:40,400
dot baizen self dot Firefox and that's

00:09:37,790 --> 00:09:43,040
all if you want to use self or anything

00:09:40,400 --> 00:09:46,700
else that's wrong that's the only bullet

00:09:43,040 --> 00:09:50,210
point your sudsy bullet super is

00:09:46,700 --> 00:09:52,490
basically all the rest is if you have

00:09:50,210 --> 00:09:56,540
functions called packages or library

00:09:52,490 --> 00:10:00,430
functions or write text or recommend if

00:09:56,540 --> 00:10:03,950
you have functions it comes from super

00:10:00,430 --> 00:10:07,610
if you want to override the recipe

00:10:03,950 --> 00:10:09,890
it comes from super it comes from super

00:10:07,610 --> 00:10:12,770
for the following reason let's say I

00:10:09,890 --> 00:10:18,380
have said I want to override something

00:10:12,770 --> 00:10:20,330
instead or and I want to after

00:10:18,380 --> 00:10:23,540
overriding something and said I want to

00:10:20,330 --> 00:10:25,580
define it that cell you get an infinite

00:10:23,540 --> 00:10:29,470
loop because you say I wants a recipe of

00:10:25,580 --> 00:10:32,570
the things that I just defined and

00:10:29,470 --> 00:10:34,730
that's why you have to look for recipes

00:10:32,570 --> 00:10:39,100
for making packages in the previous once

00:10:34,730 --> 00:10:42,050
until you find one and that's why also

00:10:39,100 --> 00:10:46,850
overlays are ordered as opposed to

00:10:42,050 --> 00:10:49,070
unique to s modules so ok we sue cell

00:10:46,850 --> 00:10:51,410
phone super no I will ask you to raise

00:10:49,070 --> 00:10:54,620
your end as soon as you find the issues

00:10:51,410 --> 00:10:56,120
in this examples so if you find one if

00:10:54,620 --> 00:10:58,040
you raise your ends that way if you find

00:10:56,120 --> 00:11:00,620
two issues raise your ends that with and

00:10:58,040 --> 00:11:03,050
if you are watching this talk remotely

00:11:00,620 --> 00:11:05,650
then you have the end key to see the

00:11:03,050 --> 00:11:05,650
answers

00:11:20,710 --> 00:11:28,870
okay I see a few ends so the first issue

00:11:24,790 --> 00:11:31,510
is like write text right X is basically

00:11:28,870 --> 00:11:33,490
you it's a function they generate the

00:11:31,510 --> 00:11:35,680
derivation but it's a function as a

00:11:33,490 --> 00:11:41,410
function it comes from super loud cell

00:11:35,680 --> 00:11:44,860
and the other one is a bit subtle to see

00:11:41,410 --> 00:11:47,350
it's the fake closure so fake closure is

00:11:44,860 --> 00:11:52,090
coming from above because of the right

00:11:47,350 --> 00:11:53,920
keyword and it's not nice to make an

00:11:52,090 --> 00:11:55,720
overlay which is using the right keyword

00:11:53,920 --> 00:11:58,120
because if you are using the right

00:11:55,720 --> 00:12:01,830
keyword basically that means that you're

00:11:58,120 --> 00:12:05,320
looping within your overlay and not from

00:12:01,830 --> 00:12:07,270
the self from the next packages fixed

00:12:05,320 --> 00:12:10,120
point which means that an overlay which

00:12:07,270 --> 00:12:15,040
comes after has no opportunity to change

00:12:10,120 --> 00:12:17,050
that so if a closure loops inside

00:12:15,040 --> 00:12:19,630
instead of looping around and if you

00:12:17,050 --> 00:12:21,880
want to give more opportunities to your

00:12:19,630 --> 00:12:27,100
users you shall use self instead of

00:12:21,880 --> 00:12:28,660
break so let's look at another and this

00:12:27,100 --> 00:12:30,400
is the one that is one issue in

00:12:28,660 --> 00:12:32,640
something raise your hand as soon as you

00:12:30,400 --> 00:12:32,640
see

00:12:43,640 --> 00:12:55,770
it's just above the question was where

00:12:51,090 --> 00:12:59,550
this Python come from so you're almost

00:12:55,770 --> 00:13:02,340
on the thing so this is not an overlay

00:12:59,550 --> 00:13:05,790
and the problem with this one is that

00:13:02,340 --> 00:13:09,300
there is a spite an argument and despite

00:13:05,790 --> 00:13:11,460
an argument is you don't it has to come

00:13:09,300 --> 00:13:14,190
and if you want to make an overlay does

00:13:11,460 --> 00:13:17,970
it come from self or super in this case

00:13:14,190 --> 00:13:22,230
you are using the override derivation so

00:13:17,970 --> 00:13:24,150
it shall probably confirm super and this

00:13:22,230 --> 00:13:25,440
Python is like if you want to make

00:13:24,150 --> 00:13:28,170
something which depend on a specific

00:13:25,440 --> 00:13:28,680
name or specific attribute within the

00:13:28,170 --> 00:13:30,750
other life

00:13:28,680 --> 00:13:33,660
then you shall probably use it as a name

00:13:30,750 --> 00:13:38,840
of the attribute and make it that way

00:13:33,660 --> 00:13:38,840
instead of using Python as a package

00:13:40,160 --> 00:13:44,180
okay another example

00:14:03,240 --> 00:14:13,780
yeah where is he by the way so if you

00:14:12,070 --> 00:14:20,850
are watching remotely Garber's I hope

00:14:13,780 --> 00:14:23,620
that you'll be circle so this car has

00:14:20,850 --> 00:14:26,680
multiple issues one of the issues is

00:14:23,620 --> 00:14:31,270
like why do we important it's packages

00:14:26,680 --> 00:14:34,060
twice you first imported at the argument

00:14:31,270 --> 00:14:37,060
and then use the path which is inside it

00:14:34,060 --> 00:14:40,420
to import it again which is terrible for

00:14:37,060 --> 00:14:42,310
people who are want to do for example

00:14:40,420 --> 00:14:44,740
crush some foundations because then you

00:14:42,310 --> 00:14:47,140
got a different system and if you were

00:14:44,740 --> 00:14:49,330
to import package set which was

00:14:47,140 --> 00:14:51,100
configured for a different system then

00:14:49,330 --> 00:14:53,770
you import it again and you watch all

00:14:51,100 --> 00:14:56,890
this and all this system Houston ization

00:14:53,770 --> 00:14:58,840
with this one the other thing is that

00:14:56,890 --> 00:15:01,840
you have this overlay which is deploying

00:14:58,840 --> 00:15:06,400
with things is fine and within this fine

00:15:01,840 --> 00:15:07,840
you have like in Erie packages which is

00:15:06,400 --> 00:15:10,440
the one which is that argument and

00:15:07,840 --> 00:15:13,660
that's completely wrong you're basically

00:15:10,440 --> 00:15:16,000
you have three versions of packages that

00:15:13,660 --> 00:15:18,340
just and if you are custom findings as

00:15:16,000 --> 00:15:18,960
even worse you might even get the wrong

00:15:18,340 --> 00:15:22,960
one

00:15:18,960 --> 00:15:25,870
so what you want here is basically first

00:15:22,960 --> 00:15:28,450
split it into files and then you want to

00:15:25,870 --> 00:15:31,510
remove the package and probably use self

00:15:28,450 --> 00:15:34,810
or super so that's how it'll look like

00:15:31,510 --> 00:15:36,760
you have one file which is okay yet is

00:15:34,810 --> 00:15:39,670
the path of mix packages and only

00:15:36,760 --> 00:15:42,130
important expect it is once if you want

00:15:39,670 --> 00:15:44,410
to do that then you have this overlay

00:15:42,130 --> 00:15:47,080
which is probably a default mix or

00:15:44,410 --> 00:15:49,090
whatever and this overlay this in

00:15:47,080 --> 00:15:50,890
depends on packages it depends on cell

00:15:49,090 --> 00:15:53,650
for super and gives that user

00:15:50,890 --> 00:15:55,750
requirements that makes and that's all

00:15:53,650 --> 00:16:01,810
read the files it will be nicer and

00:15:55,750 --> 00:16:05,380
smaller in terms of code so I have an

00:16:01,810 --> 00:16:09,420
example and I am same thing raise your

00:16:05,380 --> 00:16:09,420
hand if you see issues

00:16:20,150 --> 00:16:26,210
so here's the issue is basically you

00:16:23,540 --> 00:16:29,180
have packages that you depend on and you

00:16:26,210 --> 00:16:32,570
want derivation out of them so cool

00:16:29,180 --> 00:16:36,020
package is functions that you get from

00:16:32,570 --> 00:16:38,660
super okay but the things that you give

00:16:36,020 --> 00:16:43,150
as argument which are dependencies such

00:16:38,660 --> 00:16:45,200
as the VTE package or rule of five are

00:16:43,150 --> 00:16:47,540
derivation and you want to get them from

00:16:45,200 --> 00:16:53,660
self such as somebody else can override

00:16:47,540 --> 00:16:57,470
them so let's look at how overlays work

00:16:53,660 --> 00:17:00,350
and how we compose them some logic of

00:16:57,470 --> 00:17:03,350
the composition is this update operators

00:17:00,350 --> 00:17:05,510
that is in mix so we have two sets and

00:17:03,350 --> 00:17:08,120
we will make this example a bit more

00:17:05,510 --> 00:17:09,949
complex these two sets we use the update

00:17:08,120 --> 00:17:13,880
operators and for ends that's fine it

00:17:09,949 --> 00:17:17,689
returns a set then we go one step

00:17:13,880 --> 00:17:21,819
further we add super super is a previous

00:17:17,689 --> 00:17:25,339
one so we gave as argument of bar the

00:17:21,819 --> 00:17:27,199
super argument and the super argument

00:17:25,339 --> 00:17:30,890
will be the left-hand side of the update

00:17:27,199 --> 00:17:33,800
operator which is the proof even a super

00:17:30,890 --> 00:17:36,110
argument which is an empty set so in

00:17:33,800 --> 00:17:38,809
this case we have that very missing part

00:17:36,110 --> 00:17:41,360
here but that just for simplification it

00:17:38,809 --> 00:17:44,150
does not give anything then we

00:17:41,360 --> 00:17:46,250
generalize it's then we generalize the

00:17:44,150 --> 00:17:48,890
update operator and give that the name

00:17:46,250 --> 00:17:51,980
extent which is not exactly the same as

00:17:48,890 --> 00:17:55,420
one which is in the library but probably

00:17:51,980 --> 00:17:59,059
we shall rewrite the one in the library

00:17:55,420 --> 00:18:00,830
so the weight course is exactly the same

00:17:59,059 --> 00:18:02,480
thing is like you have the left on side

00:18:00,830 --> 00:18:03,950
and you have the right hand side and you

00:18:02,480 --> 00:18:06,140
call the right hand side with the left

00:18:03,950 --> 00:18:09,590
hand side as argument and then you have

00:18:06,140 --> 00:18:13,190
the update operator and with that you

00:18:09,590 --> 00:18:16,670
can use them and compose them already

00:18:13,190 --> 00:18:18,530
with starting okay I have who which take

00:18:16,670 --> 00:18:21,080
the empty set and the result of that I

00:18:18,530 --> 00:18:26,360
gave it a bar and then so on and so on

00:18:21,080 --> 00:18:28,940
so we can make that for list and we can

00:18:26,360 --> 00:18:31,010
pull that and saying okay use this

00:18:28,940 --> 00:18:33,500
expand function you have the empty set

00:18:31,010 --> 00:18:35,060
and so on and you iterate over the list

00:18:33,500 --> 00:18:39,350
that's basically how an expected his

00:18:35,060 --> 00:18:43,220
work and you can go even further because

00:18:39,350 --> 00:18:45,980
you want to have a fix point and your

00:18:43,220 --> 00:18:47,870
fixed point is basically saying okay no

00:18:45,980 --> 00:18:50,240
I have this self argument to all of them

00:18:47,870 --> 00:18:53,060
so you have all your overlays in the

00:18:50,240 --> 00:18:54,920
list and you have the fixed point which

00:18:53,060 --> 00:18:58,790
is basically giving the self argument to

00:18:54,920 --> 00:19:00,680
all of them so this is what does a fixed

00:18:58,790 --> 00:19:03,500
function is doing and the map function

00:19:00,680 --> 00:19:06,890
is doing here is a map function is here

00:19:03,500 --> 00:19:13,160
to for the self argue the self argument

00:19:06,890 --> 00:19:15,290
provided by fix to all of them so here

00:19:13,160 --> 00:19:19,270
we can almost take the previously

00:19:15,290 --> 00:19:22,010
example and make that into a I have this

00:19:19,270 --> 00:19:25,070
overlay which takes self and super and

00:19:22,010 --> 00:19:26,780
compose all those other overlay which

00:19:25,070 --> 00:19:28,610
are in the same territory such as food

00:19:26,780 --> 00:19:31,130
that overlay the plates and bar dot

00:19:28,610 --> 00:19:33,770
overlay that needs and that's really

00:19:31,130 --> 00:19:37,460
great and we have a similar example in

00:19:33,770 --> 00:19:42,170
mixed packages Mozilla so let's see if

00:19:37,460 --> 00:19:45,190
you can spot the issue here notice that

00:19:42,170 --> 00:19:45,190
you know how it works

00:19:55,799 --> 00:20:03,399
it's supposed to it's supposed to add

00:19:58,600 --> 00:20:05,649
packages and be friendly overlay so I

00:20:03,399 --> 00:20:10,000
see a few ends and the issue here is

00:20:05,649 --> 00:20:12,549
that you have lima and you have lightest

00:20:10,000 --> 00:20:14,289
and these two are attributes and the

00:20:12,549 --> 00:20:16,809
ways you have data operator works is

00:20:14,289 --> 00:20:19,450
basically it will erase the previous one

00:20:16,809 --> 00:20:21,789
with the new value so basically what

00:20:19,450 --> 00:20:24,460
you're doing here is raising all the

00:20:21,789 --> 00:20:28,149
library functions by this Firefox

00:20:24,460 --> 00:20:31,240
version one and that's not friendly

00:20:28,149 --> 00:20:33,519
that's you're raising all the work for

00:20:31,240 --> 00:20:36,269
others so you want to make sure that

00:20:33,519 --> 00:20:38,679
what with whatever you do you at least

00:20:36,269 --> 00:20:46,630
extend what was already in this

00:20:38,679 --> 00:20:50,409
attribute before so all right it's not

00:20:46,630 --> 00:20:52,539
yet settled but we are trying to go into

00:20:50,409 --> 00:20:54,909
making a convention which is like if you

00:20:52,539 --> 00:20:56,830
have if you are making an overlay which

00:20:54,909 --> 00:20:59,440
has reproducible packages and that's

00:20:56,830 --> 00:21:02,139
wine you go to the top level if you have

00:20:59,440 --> 00:21:03,610
utility functions such as oh I want to

00:21:02,139 --> 00:21:06,580
parse some things then you're going to

00:21:03,610 --> 00:21:09,490
Lib if you have packages which are

00:21:06,580 --> 00:21:11,440
updated automatically without doing in

00:21:09,490 --> 00:21:14,380
doing anything in terms of changing the

00:21:11,440 --> 00:21:16,299
sources then please don't go as a

00:21:14,380 --> 00:21:17,980
reproducible packages because that won't

00:21:16,299 --> 00:21:21,370
do help for anybody who wants to make a

00:21:17,980 --> 00:21:24,820
reproducible environment so going to

00:21:21,370 --> 00:21:26,980
latest and add your stuff into that and

00:21:24,820 --> 00:21:29,110
if you want to make a shell environment

00:21:26,980 --> 00:21:32,110
which is not dedicated for building

00:21:29,110 --> 00:21:35,470
anything then probably going to dip and

00:21:32,110 --> 00:21:40,350
or some similar names so is this our

00:21:35,470 --> 00:21:43,960
convention it's not enforce yet but

00:21:40,350 --> 00:21:46,570
that's just play nicely and think of

00:21:43,960 --> 00:21:50,380
everybody having the same conventions on

00:21:46,570 --> 00:21:52,450
the same side it might be nice if we had

00:21:50,380 --> 00:21:55,299
a similar naming for Goodling or

00:21:52,450 --> 00:21:57,130
searching this this set of packages so

00:21:55,299 --> 00:21:59,139
currently at MIT and Mozilla we have

00:21:57,130 --> 00:22:03,789
neat packages Mozilla which is Firefox

00:21:59,139 --> 00:22:05,679
rust and some other tools and if you are

00:22:03,789 --> 00:22:06,970
making an overlay for some specific

00:22:05,679 --> 00:22:08,980
package then you

00:22:06,970 --> 00:22:11,280
broadly named after the name of the

00:22:08,980 --> 00:22:13,990
program and say - you overlay that makes

00:22:11,280 --> 00:22:16,659
this way somebody can say oh I want to

00:22:13,990 --> 00:22:18,669
pick only this one and symlink it - as a

00:22:16,659 --> 00:22:22,179
dot-com Fitness packages or overlay

00:22:18,669 --> 00:22:24,970
directory and if you are making a

00:22:22,179 --> 00:22:27,520
repository which is containing only

00:22:24,970 --> 00:22:29,470
overlays then go find the deformed

00:22:27,520 --> 00:22:34,450
ethnics which aggregates all of them if

00:22:29,470 --> 00:22:37,360
you have multiple ones so what can we do

00:22:34,450 --> 00:22:40,299
with overlays overlays I are quite

00:22:37,360 --> 00:22:44,049
powerful in terms of yeah we can compose

00:22:40,299 --> 00:22:46,059
and that's nice and we can do something

00:22:44,049 --> 00:22:48,730
such as right from the network because

00:22:46,059 --> 00:22:51,730
we have the new built in Spore right URL

00:22:48,730 --> 00:22:54,059
and as soon as you fix something you

00:22:51,730 --> 00:22:56,409
have another problem which is parsing it

00:22:54,059 --> 00:23:00,460
then you have to generate the relations

00:22:56,409 --> 00:23:04,480
so I will go for example sorry if it's a

00:23:00,460 --> 00:23:07,059
tiny phone so fetching from the network

00:23:04,480 --> 00:23:09,520
is simple you have the picture I like

00:23:07,059 --> 00:23:11,860
will take a URL and put that into some

00:23:09,520 --> 00:23:14,950
high somewhere and then you can go and

00:23:11,860 --> 00:23:16,809
parse okay I have a JSON file so in case

00:23:14,950 --> 00:23:19,480
of Firefox we have a JSON file which

00:23:16,809 --> 00:23:25,090
give us a version number of the various

00:23:19,480 --> 00:23:30,419
branches such as the nightly is 58 beta

00:23:25,090 --> 00:23:34,390
is 57 and stable is 56

00:23:30,419 --> 00:23:36,850
this version gives us basically we can

00:23:34,390 --> 00:23:39,760
derive from this version the rotation of

00:23:36,850 --> 00:23:44,230
some checks and why and this checksum

00:23:39,760 --> 00:23:46,870
file as a specific layout which is the

00:23:44,230 --> 00:23:50,950
hash then some bizarre information and

00:23:46,870 --> 00:23:54,250
the name of the binary so you can use as

00:23:50,950 --> 00:23:56,770
a built-in match function to basically

00:23:54,250 --> 00:23:59,350
use the brackets and filter the parts

00:23:56,770 --> 00:24:01,299
that you are interested in and get for

00:23:59,350 --> 00:24:02,200
example I know what is the finance that

00:24:01,299 --> 00:24:05,860
I'm looking for

00:24:02,200 --> 00:24:09,100
give me the hash and then I can I can

00:24:05,860 --> 00:24:11,080
generate the derivation for that so the

00:24:09,100 --> 00:24:12,429
ways of Firefox that overlay works is

00:24:11,080 --> 00:24:15,370
basically looking at this while

00:24:12,429 --> 00:24:17,649
extracting the hash and and the binary

00:24:15,370 --> 00:24:20,320
name and then generating a derivation

00:24:17,649 --> 00:24:20,850
which is like okay knows your sources

00:24:20,320 --> 00:24:24,600
are

00:24:20,850 --> 00:24:34,770
from FHA Uriel with Asha and the name

00:24:24,600 --> 00:24:38,130
and that's all so I got to remark from

00:24:34,770 --> 00:24:39,780
the slides that you cannot for it's not

00:24:38,130 --> 00:24:49,100
these free languages from records

00:24:39,780 --> 00:24:52,320
businesses yes but very clever guys so

00:24:49,100 --> 00:24:56,030
if you look at the rest of the lay it's

00:24:52,320 --> 00:24:59,010
a bit more complex oh sorry first a fake

00:24:56,030 --> 00:25:01,350
part which is basically reverse

00:24:59,010 --> 00:25:03,000
engineering rest up which is a common

00:25:01,350 --> 00:25:05,640
coding the rest community which is like

00:25:03,000 --> 00:25:08,300
okay I want to update server C compiler

00:25:05,640 --> 00:25:12,870
to this version Poor's the Knights that

00:25:08,300 --> 00:25:15,210
for everything which comes next so this

00:25:12,870 --> 00:25:17,880
basically is a reverse engineer of

00:25:15,210 --> 00:25:22,070
Presta which is okay how do you get the

00:25:17,880 --> 00:25:24,690
address of the two ml file which is

00:25:22,070 --> 00:25:27,600
depending on the channel watch and

00:25:24,690 --> 00:25:29,880
preacher are worse a date and the

00:25:27,600 --> 00:25:32,820
location of where the files are

00:25:29,880 --> 00:25:36,720
distributed and that basically cause the

00:25:32,820 --> 00:25:38,940
fetching of the metadata is made and it

00:25:36,720 --> 00:25:41,220
goes through HTTP such as at least we

00:25:38,940 --> 00:25:47,190
know and trust the static rest line that

00:25:41,220 --> 00:25:49,980
org and that's how we fetch no let's

00:25:47,190 --> 00:25:51,810
look at what we get so we get some nice

00:25:49,980 --> 00:25:57,840
language which is order to pass with

00:25:51,810 --> 00:26:00,540
ragged please and this language is too

00:25:57,840 --> 00:26:04,460
mo it's basically a hinny file which has

00:26:00,540 --> 00:26:07,380
the same syntax as we have in next work

00:26:04,460 --> 00:26:11,040
having the dot notation for attributes

00:26:07,380 --> 00:26:12,900
which are under multiple layers and then

00:26:11,040 --> 00:26:16,770
it gives us like okay you have this

00:26:12,900 --> 00:26:19,170
package which has this ash and bunch of

00:26:16,770 --> 00:26:24,090
stuff and it's even as moist if you have

00:26:19,170 --> 00:26:27,870
two braces on both sides so okay that's

00:26:24,090 --> 00:26:32,730
nice format to look at and we can make a

00:26:27,870 --> 00:26:34,800
parser for that so for making a parser

00:26:32,730 --> 00:26:40,050
it might be nice to split the phases

00:26:34,800 --> 00:26:43,980
t-too and first naked tokenizer so how

00:26:40,050 --> 00:26:48,420
do you go and parse this to ml5 you

00:26:43,980 --> 00:26:50,610
basically make one big red racket which

00:26:48,420 --> 00:26:54,630
basically Express the list of tokens

00:26:50,610 --> 00:26:59,190
that you expect and you also Express the

00:26:54,630 --> 00:27:02,210
layout and that's give you not yet

00:26:59,190 --> 00:27:04,830
recognized err but it's a basis for it

00:27:02,210 --> 00:27:07,800
then you have a tokenizer function which

00:27:04,830 --> 00:27:10,440
is using a new feature of nick's 1.12

00:27:07,800 --> 00:27:13,050
you can look at the old version which is

00:27:10,440 --> 00:27:19,860
in its packages does not survive for

00:27:13,050 --> 00:27:22,950
Nick's 1.11 its before a key and not as

00:27:19,860 --> 00:27:24,780
stable as this one but it's more

00:27:22,950 --> 00:27:27,330
challenging to understand as well so

00:27:24,780 --> 00:27:29,040
this one is working by using the split

00:27:27,330 --> 00:27:34,470
function this blip function is basically

00:27:29,040 --> 00:27:36,630
taking a string huge string and looking

00:27:34,470 --> 00:27:38,550
at the talkin and split your string with

00:27:36,630 --> 00:27:40,140
okay I have something which is not like

00:27:38,550 --> 00:27:41,730
a token I have something which is a

00:27:40,140 --> 00:27:46,170
talking I have something which is not an

00:27:41,730 --> 00:27:48,510
alternating between the two then as we

00:27:46,170 --> 00:27:50,220
go an alternate between token and non

00:27:48,510 --> 00:27:51,930
tokens and we have to filter out all the

00:27:50,220 --> 00:27:53,760
things that we are not interested in and

00:27:51,930 --> 00:27:55,440
it's very sort of thing which is not

00:27:53,760 --> 00:27:57,690
playable test parts of the non token

00:27:55,440 --> 00:27:59,490
part then we want to throw saying

00:27:57,690 --> 00:28:03,420
something okay I don't understand your

00:27:59,490 --> 00:28:07,400
three ml file and it's basically what

00:28:03,420 --> 00:28:10,290
the filter layout function is doing so

00:28:07,400 --> 00:28:13,500
no we took tokenized

00:28:10,290 --> 00:28:15,330
as we isolated things which are tokens

00:28:13,500 --> 00:28:17,490
and the thing which are not talking it

00:28:15,330 --> 00:28:20,220
said that we still have dates but that's

00:28:17,490 --> 00:28:26,210
good enough for us so we know let's make

00:28:20,220 --> 00:28:30,150
a parser so a parser is kind of simple

00:28:26,210 --> 00:28:33,600
you basically got some text and you're

00:28:30,150 --> 00:28:35,640
in the state so instead of making your

00:28:33,600 --> 00:28:38,400
parser when were you go and do a

00:28:35,640 --> 00:28:42,200
recursive descent through your the

00:28:38,400 --> 00:28:43,800
information that you got we have to

00:28:42,200 --> 00:28:47,520
mutate to state

00:28:43,800 --> 00:28:48,100
mutate is the reason why we cannot do a

00:28:47,520 --> 00:28:51,580
recursive

00:28:48,100 --> 00:28:53,950
descent into a parser is because Nix has

00:28:51,580 --> 00:28:56,470
some recursion limits which are not

00:28:53,950 --> 00:28:58,750
directly tied mailing techniques but

00:28:56,470 --> 00:29:03,130
made into the binary which isn't it

00:28:58,750 --> 00:29:05,080
which is interpreting Nicks and we

00:29:03,130 --> 00:29:06,850
cannot use a recursive descent because

00:29:05,080 --> 00:29:09,669
of that and because it will be way too

00:29:06,850 --> 00:29:13,120
huge as soon as you go deeper into this

00:29:09,669 --> 00:29:16,000
level so the trick here is basically if

00:29:13,120 --> 00:29:17,590
you think of it as an LR parser where

00:29:16,000 --> 00:29:19,630
you have state and each time you move

00:29:17,590 --> 00:29:22,659
from one node to another you change your

00:29:19,630 --> 00:29:26,740
state then you have to remember what is

00:29:22,659 --> 00:29:30,549
the state so we want to have one

00:29:26,740 --> 00:29:32,169
operation which is apply every time in a

00:29:30,549 --> 00:29:35,590
sequence and which does not consume

00:29:32,169 --> 00:29:39,940
style there is a built-in which is pool

00:29:35,590 --> 00:29:41,679
del and with hypertrophy this is a

00:29:39,940 --> 00:29:43,990
built-in which is kind of special that

00:29:41,679 --> 00:29:47,610
converts is a pole nel implementation in

00:29:43,990 --> 00:29:51,309
the library its exhibit default tree now

00:29:47,610 --> 00:29:53,890
this basically avoid consuming stack it

00:29:51,309 --> 00:29:56,620
will call every time the tension that

00:29:53,890 --> 00:30:01,090
will not increase this tight space for

00:29:56,620 --> 00:30:03,580
every element in the list so we have an

00:30:01,090 --> 00:30:05,710
initial force an initial state this

00:30:03,580 --> 00:30:12,130
state is like okay we are in state zero

00:30:05,710 --> 00:30:14,350
and we have some context when we iterate

00:30:12,130 --> 00:30:17,230
through the tokens we basically okay

00:30:14,350 --> 00:30:20,409
we're in state zeros and do is much for

00:30:17,230 --> 00:30:24,490
example the name and doors may choose a

00:30:20,409 --> 00:30:27,429
state where we are in and we increase

00:30:24,490 --> 00:30:29,860
the state contract so we are probably in

00:30:27,429 --> 00:30:32,500
state one and in state one we respect

00:30:29,860 --> 00:30:35,169
the token to be always equal so that

00:30:32,500 --> 00:30:38,919
what we are at in Cisco and so we say

00:30:35,169 --> 00:30:41,530
okay no we eats a token equal so let's

00:30:38,919 --> 00:30:43,900
go to state two and in state two we

00:30:41,530 --> 00:30:46,090
match for example a value which is the

00:30:43,900 --> 00:30:47,799
string or a boolean or whatever and we

00:30:46,090 --> 00:30:50,080
have this token to value function which

00:30:47,799 --> 00:30:52,780
won't give us the value at the next

00:30:50,080 --> 00:30:55,840
value interpreted from the two ml five

00:30:52,780 --> 00:31:00,309
and we've all set it to the name so

00:30:55,840 --> 00:31:02,950
that's really simple honestly and it's

00:31:00,309 --> 00:31:04,990
just going through state and saying when

00:31:02,950 --> 00:31:09,580
I heat this talking and I mean this take

00:31:04,990 --> 00:31:13,419
then I go to this other state so we made

00:31:09,580 --> 00:31:15,610
a parser and know we got to deal with

00:31:13,419 --> 00:31:17,770
the fact that the system is not

00:31:15,610 --> 00:31:19,900
represented the same way as the systems

00:31:17,770 --> 00:31:22,030
that we have in the manifest pipe and so

00:31:19,900 --> 00:31:24,580
we implement a switch which is like if

00:31:22,030 --> 00:31:26,350
you give me the system inmates I can

00:31:24,580 --> 00:31:28,900
give you the system for Setar balls that

00:31:26,350 --> 00:31:30,730
you are looking for and the switch and

00:31:28,900 --> 00:31:32,890
make stiffness and attribute set and at

00:31:30,730 --> 00:31:35,620
the end you say oh I want this attribute

00:31:32,890 --> 00:31:41,530
and if it does not exist then you

00:31:35,620 --> 00:31:44,590
complain about it so we went through the

00:31:41,530 --> 00:31:47,350
overlay we so that we can make it

00:31:44,590 --> 00:31:48,970
compost wise insert it into the fixed

00:31:47,350 --> 00:31:55,270
points that's very nice it's not yet

00:31:48,970 --> 00:31:57,159
declarative and we can take that but

00:31:55,270 --> 00:31:59,169
that will be the subject qualify those

00:31:57,159 --> 00:32:01,450
are taught probably because there is an

00:31:59,169 --> 00:32:04,840
RFC which is in the pipe which is simple

00:32:01,450 --> 00:32:06,490
of right strategies which give us the

00:32:04,840 --> 00:32:10,179
ability to have the ability to have the

00:32:06,490 --> 00:32:12,490
simple single syntax for all the

00:32:10,179 --> 00:32:15,580
override functions like override

00:32:12,490 --> 00:32:17,980
derivation override and whatever you can

00:32:15,580 --> 00:32:20,049
think of it's basically shall be

00:32:17,980 --> 00:32:23,860
expressed with a single syntax with this

00:32:20,049 --> 00:32:25,980
model so is that basically the end of my

00:32:23,860 --> 00:32:30,120
talk and if you have any question please

00:32:25,980 --> 00:32:30,120
raise an ibop - sir

00:32:42,160 --> 00:32:49,880
thank you I have a question about the

00:32:47,690 --> 00:32:52,160
one to use the self and the super

00:32:49,880 --> 00:32:53,420
argument in your overlay basically

00:32:52,160 --> 00:32:55,400
you're saying when you want to use a

00:32:53,420 --> 00:32:57,730
library function you should use super

00:32:55,400 --> 00:33:01,640
right yes

00:32:57,730 --> 00:33:04,250
what if you have an overlay you want to

00:33:01,640 --> 00:33:06,770
extend lip with your own library

00:33:04,250 --> 00:33:10,340
functions and in the same overlay you

00:33:06,770 --> 00:33:14,270
want to use these library functions

00:33:10,340 --> 00:33:15,650
inside your packages is that shouldn't

00:33:14,270 --> 00:33:19,340
you do that should you then have to

00:33:15,650 --> 00:33:22,010
overlays or should you because you come

00:33:19,340 --> 00:33:24,050
to yourself in in your your when you're

00:33:22,010 --> 00:33:25,790
a library function you're supposed to do

00:33:24,050 --> 00:33:28,310
super when you are defining the

00:33:25,790 --> 00:33:30,890
functions that you have already access

00:33:28,310 --> 00:33:33,050
to it so you can we make it to I won't

00:33:30,890 --> 00:33:36,020
recommend it because you can just use

00:33:33,050 --> 00:33:37,670
the ones that you have so just use the

00:33:36,020 --> 00:33:39,020
ones that you have it won't matter isn't

00:33:37,670 --> 00:33:40,940
it oh yeah if you have to mean a lot

00:33:39,020 --> 00:33:44,540
binding then you call them directly

00:33:40,940 --> 00:33:47,060
right but exposing them is nicer because

00:33:44,540 --> 00:33:49,130
that means that order can work on top of

00:33:47,060 --> 00:33:52,160
the words that you did one quick

00:33:49,130 --> 00:33:54,620
follow-up question so in mix OS you also

00:33:52,160 --> 00:33:57,260
have this lip argument that that your

00:33:54,620 --> 00:34:01,340
module gets I found that when you

00:33:57,260 --> 00:34:03,800
override the lip from package from next

00:34:01,340 --> 00:34:06,170
packages those overrides are not

00:34:03,800 --> 00:34:07,990
accessible in the lip arguments of the

00:34:06,170 --> 00:34:11,720
next class module so I always use

00:34:07,990 --> 00:34:14,510
packages the lip in my modules but I've

00:34:11,720 --> 00:34:15,470
read somewhere that that is that's not

00:34:14,510 --> 00:34:19,280
the right thing to do

00:34:15,470 --> 00:34:21,919
you should call but how do you basically

00:34:19,280 --> 00:34:25,340
how do I make it so that my own

00:34:21,919 --> 00:34:30,919
functions are accessible from lip from

00:34:25,340 --> 00:34:35,480
our next West module so package is that

00:34:30,919 --> 00:34:37,520
they hold on to you indeed yes it's a

00:34:35,480 --> 00:34:39,290
problem that you have is that the lips

00:34:37,520 --> 00:34:42,850
that is given as argument is basically

00:34:39,290 --> 00:34:45,350
used for the evaluation of modules so

00:34:42,850 --> 00:34:47,870
unless you're modify is invoked as a

00:34:45,350 --> 00:34:49,610
model system yourself

00:34:47,870 --> 00:34:53,270
then you shall be to use

00:34:49,610 --> 00:34:55,250
packages of late and it's the separation

00:34:53,270 --> 00:34:57,860
of the two words basically make deposit

00:34:55,250 --> 00:35:00,320
to split the module system apart from

00:34:57,860 --> 00:35:03,410
others and the problem is that people

00:35:00,320 --> 00:35:06,080
tend to use packages that clean to get

00:35:03,410 --> 00:35:09,530
make options and make default and ulcers

00:35:06,080 --> 00:35:11,660
yeah and this is where we had to say no

00:35:09,530 --> 00:35:13,910
usual not cheese packages that will so

00:35:11,660 --> 00:35:16,820
if you have Houston functions like the

00:35:13,910 --> 00:35:17,870
Firefox versions that I saw before yeah

00:35:16,820 --> 00:35:20,150
yes safe

00:35:17,870 --> 00:35:23,080
that's a sort of a safe that's as long

00:35:20,150 --> 00:35:26,000
as you make sure that you don't use

00:35:23,080 --> 00:35:27,800
model system functions from another

00:35:26,000 --> 00:35:30,170
libraries and the ones that you have uh

00:35:27,800 --> 00:35:31,340
ladies okay okay okay yeah we don't do

00:35:30,170 --> 00:35:42,740
that's right you sure that's that's fine

00:35:31,340 --> 00:35:45,290
okay um following up on that I do self

00:35:42,740 --> 00:35:50,870
dot call package all the time and it

00:35:45,290 --> 00:36:02,300
works great so I won't be happy to break

00:35:50,870 --> 00:36:05,240
your code soon challenge accepted so

00:36:02,300 --> 00:36:06,950
when you use self aides in its one

00:36:05,240 --> 00:36:09,890
iteration slower because you have to go

00:36:06,950 --> 00:36:12,740
through is a fixed point it's not a big

00:36:09,890 --> 00:36:18,350
deal in terms of performance it's a big

00:36:12,740 --> 00:36:21,020
deal in terms of concepts because my

00:36:18,350 --> 00:36:23,900
goal is aiming for graphing and for as a

00:36:21,020 --> 00:36:26,840
simple of right strategies and the

00:36:23,900 --> 00:36:29,740
problems that you got by using not using

00:36:26,840 --> 00:36:31,790
this super for the whole package is

00:36:29,740 --> 00:36:36,350
basically that you are adding in an

00:36:31,790 --> 00:36:38,540
external up green screw spruce a fix

00:36:36,350 --> 00:36:40,760
point so code package if you use self

00:36:38,540 --> 00:36:43,040
for code package you won't say okay I'm

00:36:40,760 --> 00:36:45,380
here I mean you're in specifics point to

00:36:43,040 --> 00:36:48,170
find code package and then code package

00:36:45,380 --> 00:36:50,600
itself is using the fixed point to go to

00:36:48,170 --> 00:36:52,280
the dependencies that you have or the

00:36:50,600 --> 00:36:54,950
dependencies that yeah

00:36:52,280 --> 00:36:58,070
and we are going twice crucifix point

00:36:54,950 --> 00:37:00,980
and this is a problem for implementing

00:36:58,070 --> 00:37:03,200
grafting later because the weight

00:37:00,980 --> 00:37:05,270
grafting words is by peeling off the

00:37:03,200 --> 00:37:07,280
fixed point and making sure we can have

00:37:05,270 --> 00:37:10,010
another version of pecks packages to

00:37:07,280 --> 00:37:16,340
make the deltas and you make sure that

00:37:10,010 --> 00:37:20,000
we can do the grafting I just wanted to

00:37:16,340 --> 00:37:25,100
make a quick warning the the Reg syntax

00:37:20,000 --> 00:37:28,130
index 112 has changed and so so be very

00:37:25,100 --> 00:37:30,430
careful and also in next 111 there was

00:37:28,130 --> 00:37:34,400
there were two projects in Texas

00:37:30,430 --> 00:37:37,460
depending on which plan you yes I adds

00:37:34,400 --> 00:37:43,010
this problem to I could show you I think

00:37:37,460 --> 00:37:52,340
patron also requires a sha-256 not as

00:37:43,010 --> 00:37:56,990
buildings doesn't Mike's going is it

00:37:52,340 --> 00:38:00,710
done to respond so um do you think that

00:37:56,990 --> 00:38:03,500
um well one I've sometimes had had

00:38:00,710 --> 00:38:08,320
issues with overriding packages because

00:38:03,500 --> 00:38:10,940
also using override actors because they

00:38:08,320 --> 00:38:14,000
rather than having some sort of fix

00:38:10,940 --> 00:38:16,460
point they just use rec and I'd like to

00:38:14,000 --> 00:38:21,020
be able to override stuff like the

00:38:16,460 --> 00:38:23,690
version which is then refer to by the by

00:38:21,020 --> 00:38:25,670
the expression itself is do you think an

00:38:23,690 --> 00:38:27,890
overlays like system would be helpful

00:38:25,670 --> 00:38:31,370
that for that as well reasonable or

00:38:27,890 --> 00:38:35,870
possible you mean within each of the

00:38:31,370 --> 00:38:37,880
packet yes so the simple of right

00:38:35,870 --> 00:38:40,670
strategy show provides the answer to

00:38:37,880 --> 00:38:43,850
that because it's basically giving you a

00:38:40,670 --> 00:38:47,570
decorative way of writing packages and

00:38:43,850 --> 00:38:51,920
you no longer a function which is like

00:38:47,570 --> 00:38:53,660
STM make derivation so you get just an

00:38:51,920 --> 00:38:55,100
attribute set and no break and you

00:38:53,660 --> 00:38:59,660
basically can get all the information

00:38:55,100 --> 00:39:02,450
out of it it it might be a bit complex

00:38:59,660 --> 00:39:05,090
in terms of concepts but the syntax is

00:39:02,450 --> 00:39:06,050
still to be discussed and so we shall

00:39:05,090 --> 00:39:10,130
aim for making

00:39:06,050 --> 00:39:12,080
simple to read any should solve the

00:39:10,130 --> 00:39:15,500
problem of having subversion because the

00:39:12,080 --> 00:39:16,910
version will just be one filled in in

00:39:15,500 --> 00:39:30,650
the sense that you can override without

00:39:16,910 --> 00:39:32,810
going through override derivation one

00:39:30,650 --> 00:39:34,880
first people question is why is it

00:39:32,810 --> 00:39:38,630
called themself and super you could call

00:39:34,880 --> 00:39:42,230
them packages and functions that would

00:39:38,630 --> 00:39:45,410
be much more simple so there is one

00:39:42,230 --> 00:39:47,180
thing which is called legacy and yes we

00:39:45,410 --> 00:39:50,330
shall probably rename them at one point

00:39:47,180 --> 00:39:54,800
but anyway it's in my face so I can name

00:39:50,330 --> 00:39:58,310
them like that yes it totally makes

00:39:54,800 --> 00:40:01,970
sense and if it's so easy to things

00:39:58,310 --> 00:40:04,340
up and use the wrong one isn't possible

00:40:01,970 --> 00:40:06,410
to enforce that's I mean that we are

00:40:04,340 --> 00:40:08,870
using the wrong one the right one

00:40:06,410 --> 00:40:10,730
why are packages available in gold if

00:40:08,870 --> 00:40:14,290
you should not use packages from Supra

00:40:10,730 --> 00:40:17,330
then just disable the packages that you

00:40:14,290 --> 00:40:19,160
cannot DC both the packages because they

00:40:17,330 --> 00:40:21,860
are is a result of to make derivation

00:40:19,160 --> 00:40:24,590
function but can you which you can

00:40:21,860 --> 00:40:28,550
disable the pensions from grace through

00:40:24,590 --> 00:40:30,770
the fix point by putting no on them that

00:40:28,550 --> 00:40:34,970
could be one solution to avoid adding

00:40:30,770 --> 00:40:37,280
using pension from self really have you

00:40:34,970 --> 00:40:40,370
have just never ordering out city okay

00:40:37,280 --> 00:40:42,860
look what is the other one so it is

00:40:40,370 --> 00:40:45,860
possible for functions it's order for

00:40:42,860 --> 00:40:48,380
packages unless we are going to use a

00:40:45,860 --> 00:40:51,380
state word on you can only get there

00:40:48,380 --> 00:40:53,660
evasions if you goes through the fixed

00:40:51,380 --> 00:40:57,260
point which is like we will have to have

00:40:53,660 --> 00:40:59,840
a post process adds in of your delays

00:40:57,260 --> 00:41:03,440
and orders stages which phone basically

00:40:59,840 --> 00:41:07,640
converts that and convert every recipe

00:41:03,440 --> 00:41:09,170
into its derivation from the part that's

00:41:07,640 --> 00:41:11,770
something that you could implement in

00:41:09,170 --> 00:41:11,770
like two days

00:41:13,240 --> 00:41:21,120
just maybe it will break some code

00:41:23,310 --> 00:41:34,030
alright last question and so you go

00:41:31,210 --> 00:41:36,040
through a fixed point of cell and what

00:41:34,030 --> 00:41:38,860
what is it you do super will it just

00:41:36,040 --> 00:41:40,600
descend until the the empty attribute

00:41:38,860 --> 00:41:43,570
set is reached and check for our

00:41:40,600 --> 00:41:48,310
attributes inside like like the inner

00:41:43,570 --> 00:41:54,490
most loop yes and do you have we have

00:41:48,310 --> 00:41:55,860
like like have you read into recursion

00:41:54,490 --> 00:41:59,110
schemes

00:41:55,860 --> 00:42:02,310
maybe because because the this reminds

00:41:59,110 --> 00:42:05,860
me of recursion schemes overall and my

00:42:02,310 --> 00:42:07,390
maybe maybe just like a term already for

00:42:05,860 --> 00:42:10,780
that because you have different kinds of

00:42:07,390 --> 00:42:12,730
so we don't have a recursion problem

00:42:10,780 --> 00:42:15,550
when you going through super because

00:42:12,730 --> 00:42:17,970
super will just go back and tell you

00:42:15,550 --> 00:42:21,100
find basically the attribute with Jo

00:42:17,970 --> 00:42:23,560
emts when you find the empty set which

00:42:21,100 --> 00:42:25,990
is that's root or it does not go back

00:42:23,560 --> 00:42:29,800
but you make the trees which are they

00:42:25,990 --> 00:42:32,860
becoming larger and booking fees in some

00:42:29,800 --> 00:42:34,330
is the last one you have recursion

00:42:32,860 --> 00:42:37,390
issues when you go screw yourself

00:42:34,330 --> 00:42:39,310
because self is basically you can define

00:42:37,390 --> 00:42:40,220
yourself yeah you're going through your

00:42:39,310 --> 00:42:43,380
own definition

00:42:40,220 --> 00:42:43,380

YouTube URL: https://www.youtube.com/watch?v=W85mF1zWA2o


