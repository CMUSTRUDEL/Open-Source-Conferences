Title: Nix: How and Why it Works (NixCon 2019)
Publication date: 2019-10-27
Playlist: NixCon 2019 (Brno)
Description: 
	Learn the Nix language and the rules which make Nix a unique take on build tooling and system administration.

In this interactive, live-demo talk, we will cover:

    string context,
    basic syntax,
    functions,
    laziness,
    and how builds are made functional
Captions: 
	00:01:08,810 --> 00:01:12,649
and build instructions when you evaluate

00:01:11,360 --> 00:01:14,810
something with Knicks

00:01:12,649 --> 00:01:16,460
first you write the expression then you

00:01:14,810 --> 00:01:18,950
evaluate it and then you build what you

00:01:16,460 --> 00:01:21,560
evaluated the result of evaluation is

00:01:18,950 --> 00:01:24,619
derivation derivations themselves don't

00:01:21,560 --> 00:01:26,179
have any actual effect so they don't

00:01:24,619 --> 00:01:27,740
give you something that you can use you

00:01:26,179 --> 00:01:32,240
have to build them in order to have a

00:01:27,740 --> 00:01:33,950
useful build result the final system is

00:01:32,240 --> 00:01:35,570
isolated you can't touch things on the

00:01:33,950 --> 00:01:37,280
file system you didn't tell me you were

00:01:35,570 --> 00:01:39,950
going to touch we will get into them

00:01:37,280 --> 00:01:41,780
the network is isolated - you can't

00:01:39,950 --> 00:01:43,280
touch a network unless you can tell mix

00:01:41,780 --> 00:01:45,590
exactly what you're going to produce

00:01:43,280 --> 00:01:49,069
quite accessing the network and we'll

00:01:45,590 --> 00:01:52,220
get to that this is a trivial derivation

00:01:49,069 --> 00:01:52,939
and and real trivial so up here how does

00:01:52,220 --> 00:01:54,590
this thing work

00:01:52,939 --> 00:01:57,380
no all right so up here is the

00:01:54,590 --> 00:02:00,759
derivation keyword I think it took me -

00:01:57,380 --> 00:02:03,349
oh yeah derivation function take you

00:02:00,759 --> 00:02:04,939
there evasion function I think it took

00:02:03,349 --> 00:02:06,500
me two and a half years before I ever

00:02:04,939 --> 00:02:08,869
actually wrote the derivation function

00:02:06,500 --> 00:02:10,640
so this is super low level you will

00:02:08,869 --> 00:02:12,620
probably never need to write this but at

00:02:10,640 --> 00:02:15,769
the very most lower level of mix this is

00:02:12,620 --> 00:02:18,410
what's going on each snare evasion has a

00:02:15,769 --> 00:02:20,720
name if you've seen a Nick Stewart the

00:02:18,410 --> 00:02:23,090
end of it is the name it has a builder

00:02:20,720 --> 00:02:25,970
in this case it's been SH mix gives you

00:02:23,090 --> 00:02:28,280
a slash bin sh just to gucchy bootstrap

00:02:25,970 --> 00:02:32,600
yourself through the very first stuff in

00:02:28,280 --> 00:02:34,100
mix packages we use that like once then

00:02:32,600 --> 00:02:36,859
has some arguments that we passed a

00:02:34,100 --> 00:02:39,590
bathroom so - see and that command echo

00:02:36,859 --> 00:02:41,630
hello - out well this is we're covering

00:02:39,590 --> 00:02:45,109
a lot here so we'll revisit what this

00:02:41,630 --> 00:02:48,350
means when this actually is built by Nix

00:02:45,109 --> 00:02:48,769
it will run bim sh - c echo hello -

00:02:48,350 --> 00:02:52,220
hello

00:02:48,769 --> 00:02:54,430
and then the final key word our final

00:02:52,220 --> 00:02:57,620
value in the derivation is system and

00:02:54,430 --> 00:03:00,230
system is describes your little system

00:02:57,620 --> 00:03:02,840
Nix has a concept of what with operating

00:03:00,230 --> 00:03:05,329
system and architecture your systems so

00:03:02,840 --> 00:03:10,549
you might see it by 686 Linux you might

00:03:05,329 --> 00:03:13,160
see at x86 54 Darwin for Mac OS maybe

00:03:10,549 --> 00:03:15,300
one day we'll see a risk risk V - Linux

00:03:13,160 --> 00:03:19,860
maybe your power 9 - Linux

00:03:15,300 --> 00:03:21,870
they're pretty neat alright first so

00:03:19,860 --> 00:03:25,140
this out variable we briefly touch on

00:03:21,870 --> 00:03:26,760
that when Nick's builds a derivation it

00:03:25,140 --> 00:03:28,590
sets certain environment variables in

00:03:26,760 --> 00:03:31,320
the process that it starts as a a

00:03:28,590 --> 00:03:33,360
special one is out out is where you

00:03:31,320 --> 00:03:34,950
write or build results to you can't

00:03:33,360 --> 00:03:36,990
write anywhere else permanently in a

00:03:34,950 --> 00:03:38,700
file system except we're nearly

00:03:36,990 --> 00:03:40,980
expecting your build products to go to

00:03:38,700 --> 00:03:43,200
there's a few advanced cases for a build

00:03:40,980 --> 00:03:44,670
output like libraries and headers we're

00:03:43,200 --> 00:03:46,860
not going to cover those they're very

00:03:44,670 --> 00:03:49,020
much like out and and helpful will

00:03:46,860 --> 00:03:56,250
satisfy that does this make sense to

00:03:49,020 --> 00:03:58,080
everybody out is a location on disk it

00:03:56,250 --> 00:04:00,180
is a name it is up to you to decide if

00:03:58,080 --> 00:04:02,730
it's a file or a directories will lend

00:04:00,180 --> 00:04:05,760
you a full depth is a file yes will

00:04:02,730 --> 00:04:17,910
create a file yeah any other questions

00:04:05,760 --> 00:04:22,350
yeah so Nick's in the configuration it

00:04:17,910 --> 00:04:25,080
has a way to define some a couple impure

00:04:22,350 --> 00:04:27,600
paths and so one of those is been SH and

00:04:25,080 --> 00:04:31,890
your nips configured it just passes in

00:04:27,600 --> 00:04:35,600
your probably your hosts SH but oh gosh

00:04:31,890 --> 00:04:35,600
point a second goodness gracious

00:04:38,870 --> 00:04:44,350
all right that should be fixed all right

00:04:42,050 --> 00:04:46,790
um does it make sense

00:04:44,350 --> 00:04:48,169
okay so then again this is just a

00:04:46,790 --> 00:04:50,000
bootstrapping Ben estate so it's never

00:04:48,169 --> 00:04:56,540
used beyond very first steps and we

00:04:50,000 --> 00:05:01,550
expect yeah well so where do I get up in

00:04:56,540 --> 00:05:02,900
a safe though i I don't have one I can't

00:05:01,550 --> 00:05:06,370
act us anywhere else on the file system

00:05:02,900 --> 00:05:06,370
and I need to start somewhere

00:05:12,250 --> 00:05:17,389
sure yeah okay so why not Dennis I could

00:05:15,260 --> 00:05:19,460
have slowed like maybe this is in like

00:05:17,389 --> 00:05:24,200
default mix and right next to it is a

00:05:19,460 --> 00:05:29,750
file that's Sh right so I could I could

00:05:24,200 --> 00:05:32,630
do that yeah for Nick's packages we we

00:05:29,750 --> 00:05:34,460
don't do that but this is again this is

00:05:32,630 --> 00:05:36,260
all super low level and and we get away

00:05:34,460 --> 00:05:37,580
from this almost immediately and any

00:05:36,260 --> 00:05:39,260
real system with Nick's will get away

00:05:37,580 --> 00:05:41,990
from this almost immediately I just want

00:05:39,260 --> 00:05:50,960
to make sure that this like idea is is

00:05:41,990 --> 00:05:54,080
sensible yeah out is defined by Nick's

00:05:50,960 --> 00:05:58,220
okay yeah yeah and then it's up being

00:05:54,080 --> 00:06:00,500
like assembling result which that points

00:05:58,220 --> 00:06:03,020
to like slash neg / tour than Sunday -

00:06:00,500 --> 00:06:05,630
right yeah so when you build this inside

00:06:03,020 --> 00:06:10,130
the build it will say out will be Nick's

00:06:05,630 --> 00:06:12,639
store of a cache - hello and then after

00:06:10,130 --> 00:06:15,320
the bill is completed it will send like

00:06:12,639 --> 00:06:20,110
results in your current directory - to

00:06:15,320 --> 00:06:20,110
that path all right cool

00:06:25,830 --> 00:06:30,449
all right this is more familiar probably

00:06:28,560 --> 00:06:32,099
if you've used mixed packages this is

00:06:30,449 --> 00:06:33,900
probably what closer to what you're

00:06:32,099 --> 00:06:36,629
writing maybe not exactly but that's

00:06:33,900 --> 00:06:39,030
okay first we use this let and in

00:06:36,629 --> 00:06:42,680
construct that we covered previously we

00:06:39,030 --> 00:06:46,379
import Knicks packages is this familiar

00:06:42,680 --> 00:06:49,440
we then use the run command attribute on

00:06:46,379 --> 00:06:52,650
packages from Knicks packages we call it

00:06:49,440 --> 00:06:56,490
hello and we echo hello to out this is

00:06:52,650 --> 00:06:58,080
this is how you would if you were to

00:06:56,490 --> 00:06:59,690
implement this in mixed packages of elf

00:06:58,080 --> 00:07:02,550
this is probably how we would do it

00:06:59,690 --> 00:07:11,879
maybe not exactly but pretty close any

00:07:02,550 --> 00:07:14,669
questions about this yeah so except the

00:07:11,879 --> 00:07:16,860
name it accepts an attribute set where

00:07:14,669 --> 00:07:19,139
you can provide for example some build

00:07:16,860 --> 00:07:21,030
inputs or some other the other data and

00:07:19,139 --> 00:07:23,340
then a string which is the command that

00:07:21,030 --> 00:07:25,889
you execute and they'll be executed by -

00:07:23,340 --> 00:07:27,960
is the building that's all good

00:07:25,889 --> 00:07:30,210
necessary in this case - no but I'm

00:07:27,960 --> 00:07:31,319
going to build on it soon so I didn't

00:07:30,210 --> 00:07:33,060
want to I didn't want to place the too

00:07:31,319 --> 00:07:35,009
surprising this could be a completely

00:07:33,060 --> 00:07:36,479
empty attribute setting that would be

00:07:35,009 --> 00:07:39,330
fun but if you do need to have an edge

00:07:36,479 --> 00:07:41,569
set so what's gonna happen when I run

00:07:39,330 --> 00:07:41,569
this

00:07:45,220 --> 00:07:52,220
sure yeah here yes yeah so NYX is a

00:07:50,449 --> 00:07:56,630
functional language so everything needs

00:07:52,220 --> 00:07:58,430
to return a value and in NYX in order

00:07:56,630 --> 00:08:01,330
for the file to return a value there's

00:07:58,430 --> 00:08:01,330
no semicolon at the end

00:08:06,759 --> 00:08:19,430
yeah so Ronnie command is defined in the

00:08:09,770 --> 00:08:21,110
Texas any further questions that's a

00:08:19,430 --> 00:08:24,740
perfectly reasonable question so Nick's

00:08:21,110 --> 00:08:27,349
packages is the package set that's built

00:08:24,740 --> 00:08:29,509
for Nick's so there's there's Nick's

00:08:27,349 --> 00:08:30,889
which is a build tool

00:08:29,509 --> 00:08:32,240
there's Nick's packages which is a

00:08:30,889 --> 00:08:34,279
question of tens of thousands of

00:08:32,240 --> 00:08:36,560
packages already with mixed expression

00:08:34,279 --> 00:08:38,149
written and then there's Nick OS which

00:08:36,560 --> 00:08:39,320
is built on top of Nick's packages and

00:08:38,149 --> 00:08:41,300
if you're confused about Doc's that

00:08:39,320 --> 00:08:44,810
might help answer questions at where you

00:08:41,300 --> 00:08:51,020
get answers yeah why are these packages

00:08:44,810 --> 00:09:16,209
for sure we will cover that later in for

00:08:51,020 --> 00:09:21,550
now let's assume that semen leaks

00:09:16,209 --> 00:09:25,520
yeah yeah I think I'll get to that later

00:09:21,550 --> 00:09:28,839
okay so what is this gonna happen when

00:09:25,520 --> 00:09:28,839
we run Nick's build on that

00:09:32,890 --> 00:09:39,500
yes exactly so we do Nick's build is

00:09:36,260 --> 00:09:41,270
this fun okay can you see this okay so

00:09:39,500 --> 00:09:43,010
it's exactly right so we build that

00:09:41,270 --> 00:09:44,720
example it says we're going to build

00:09:43,010 --> 00:09:46,130
this hello derivation there's that name

00:09:44,720 --> 00:09:49,160
there's this big cache that we don't

00:09:46,130 --> 00:09:51,740
know how compute it builds it and then

00:09:49,160 --> 00:09:53,690
it produces this output path hello and

00:09:51,740 --> 00:09:55,220
then exactly it creates this results in

00:09:53,690 --> 00:09:58,000
link with the with where the

00:09:55,220 --> 00:09:58,000
contents is hello

00:10:05,670 --> 00:10:11,190
there's a lot by yeah this one this one

00:10:09,330 --> 00:10:13,680
here so this echo hello

00:10:11,190 --> 00:10:16,100
it writes them text hello to that file

00:10:13,680 --> 00:10:19,860
and then here's that file actors Bend oh

00:10:16,100 --> 00:10:23,340
right yeah

00:10:19,860 --> 00:10:26,030
so this this hello is in let's step back

00:10:23,340 --> 00:10:29,550
a second we have this output gun here

00:10:26,030 --> 00:10:32,840
this file is sin wink to result and

00:10:29,550 --> 00:10:38,700
inside that file is the text hello

00:10:32,840 --> 00:10:40,740
alright here's another example so very

00:10:38,700 --> 00:10:43,380
similar to the hollow example except

00:10:40,740 --> 00:10:46,140
instead of echo we're using copy CP so

00:10:43,380 --> 00:10:47,760
we're going to copy the talk in D to

00:10:46,140 --> 00:10:53,390
help what do you think will happen when

00:10:47,760 --> 00:10:53,390
I run this it's going to fail

00:11:07,009 --> 00:11:15,389
that's a goodness

00:11:08,699 --> 00:11:16,980
any other guesses it's not built in the

00:11:15,389 --> 00:11:18,689
directory you think it's big built in

00:11:16,980 --> 00:11:20,430
and then the files call Jason

00:11:18,689 --> 00:11:22,889
SOCOM from the farm think you can eat

00:11:20,430 --> 00:11:23,279
that file you have to that's exactly

00:11:22,889 --> 00:11:25,860
right

00:11:23,279 --> 00:11:28,259
it's not built in the same location so

00:11:25,860 --> 00:11:30,810
that filed out there I hope it did a

00:11:28,259 --> 00:11:33,029
right example I did not

00:11:30,810 --> 00:11:34,769
okay so here's another secret even if I

00:11:33,029 --> 00:11:39,300
put the absolute path to that file it

00:11:34,769 --> 00:11:42,649
would still fail because it's not sure

00:11:39,300 --> 00:11:42,649
we'll try it it's built in the sandbox

00:11:45,100 --> 00:11:48,210
[Music]

00:11:51,899 --> 00:11:56,100
so music going back to some of the

00:11:54,029 --> 00:11:58,470
syntax Jonas was talking about we have

00:11:56,100 --> 00:12:02,189
this dollar bridge and the brace at the

00:11:58,470 --> 00:12:05,129
end this is saying copy the file from

00:12:02,189 --> 00:12:08,279
the current directory where this text is

00:12:05,129 --> 00:12:10,019
into the next star and then copy it from

00:12:08,279 --> 00:12:12,689
that wherever it imports it into the

00:12:10,019 --> 00:12:15,410
next door to open that my sense any

00:12:12,689 --> 00:12:15,410
questions about this

00:12:19,070 --> 00:12:31,650
there are records that means it means

00:12:25,400 --> 00:12:32,880
insert by convert whatever records just

00:12:31,650 --> 00:12:37,050
right yes

00:12:32,880 --> 00:12:40,560
it should for service so so this is from

00:12:37,050 --> 00:12:42,180
here to here refining a string and with

00:12:40,560 --> 00:12:45,180
teaming between these brackets we can

00:12:42,180 --> 00:12:48,180
put Nick's expressions any Nick's

00:12:45,180 --> 00:12:51,360
expression okay and that's a and the

00:12:48,180 --> 00:12:54,090
path is it is a value so that's an exit

00:12:51,360 --> 00:12:55,980
pressure yeah it's a value and the next

00:12:54,090 --> 00:12:57,930
expression and what that's saying is

00:12:55,980 --> 00:12:59,760
this is a path I want and when I put

00:12:57,930 --> 00:13:02,880
into a string it will copy it into the

00:12:59,760 --> 00:13:04,910
Nick start and give me an X term right

00:13:02,880 --> 00:13:04,910
there

00:13:05,510 --> 00:13:12,240
the five ease in there it was yes yes if

00:13:10,440 --> 00:13:30,420
this file does not exist it will be an

00:13:12,240 --> 00:13:33,840
error this here

00:13:30,420 --> 00:13:36,060
yeah so you can't turn that off but you

00:13:33,840 --> 00:13:38,850
can escape this and there are other ways

00:13:36,060 --> 00:13:43,280
we could pass this finally I don't think

00:13:38,850 --> 00:13:43,280
I covered it but I would be happy to do

00:13:58,520 --> 00:14:05,250
yeah this is called string context and I

00:14:02,730 --> 00:14:08,640
think I cover better later but Nick's

00:14:05,250 --> 00:14:11,310
has this idea this string depends on the

00:14:08,640 --> 00:14:12,450
result of this and if this is a file or

00:14:11,310 --> 00:14:14,490
a thing needs to be built

00:14:12,450 --> 00:14:16,830
Nick's will know that if it's trying to

00:14:14,490 --> 00:14:18,660
do something with this in a build it has

00:14:16,830 --> 00:14:21,890
to first do whatever it has to do to

00:14:18,660 --> 00:14:21,890
provide produce them and

00:14:23,040 --> 00:15:31,529
I understand all right any other

00:15:21,839 --> 00:15:33,990
questions about this expression okay so

00:15:31,529 --> 00:15:35,910
what do you build this this is it's

00:15:33,990 --> 00:15:38,910
pretty simple we build this derivation

00:15:35,910 --> 00:15:40,980
is the build product I didn't show

00:15:38,910 --> 00:15:49,529
having a file because it would spoil my

00:15:40,980 --> 00:15:51,750
talk what you show on top is a

00:15:49,529 --> 00:15:53,670
derivation yeah it's my summer this file

00:15:51,750 --> 00:15:55,529
this is a progression but the relation

00:15:53,670 --> 00:15:59,370
between that expression stored in the

00:15:55,529 --> 00:16:01,769
file and mixed or derivation of file

00:15:59,370 --> 00:16:06,930
pick this therapy yeah yeah be the same

00:16:01,769 --> 00:16:09,779
or what so the build man's become a

00:16:06,930 --> 00:16:12,360
derivation the derivation is the results

00:16:09,779 --> 00:16:15,000
of evaluating so this is expression okay

00:16:12,360 --> 00:16:16,319
you if it gets evaluated it produces

00:16:15,000 --> 00:16:18,870
their animations the derivations

00:16:16,319 --> 00:16:21,329
describe what you want to build and then

00:16:18,870 --> 00:16:23,390
Nix build builds those there follow the

00:16:21,329 --> 00:16:40,300
instructions so derivation these

00:16:23,390 --> 00:16:40,300
I actually show actually in my neck so

00:17:01,960 --> 00:17:07,670
if you change height spacing here or up

00:17:05,270 --> 00:17:09,500
here it won't make a difference if you

00:17:07,670 --> 00:17:13,510
change anything here like you add some

00:17:09,500 --> 00:17:13,510
more spaces here then that will change

00:17:14,860 --> 00:17:22,850
the output that's the store path of the

00:17:19,459 --> 00:17:28,190
target and e-file is not shown that's

00:17:22,850 --> 00:17:31,550
true it is not a bill so this is copied

00:17:28,190 --> 00:17:33,380
in automatically it's not a bill so it

00:17:31,550 --> 00:17:36,860
doesn't it doesn't need to do anything

00:17:33,380 --> 00:17:39,080
to produce that it could be cool to like

00:17:36,860 --> 00:17:42,470
know what what has been put in this

00:17:39,080 --> 00:17:53,410
store yeah so I think if you passed a

00:17:42,470 --> 00:17:58,670
certain number - jeez I think you just

00:17:53,410 --> 00:18:00,440
substituted this was my network wasn't

00:17:58,670 --> 00:18:03,470
working right and I don't want to get

00:18:00,440 --> 00:18:05,740
into everyone but that's something very

00:18:03,470 --> 00:18:05,740
interesting

00:18:21,500 --> 00:18:27,659
sure no I don't think so

00:18:25,620 --> 00:18:30,299
me there might be some special tooling

00:18:27,659 --> 00:18:36,240
in Nick's packages that could do it but

00:18:30,299 --> 00:18:39,509
Nick's itself does not provide you could

00:18:36,240 --> 00:18:42,710
toss like a set - X right okay and then

00:18:39,509 --> 00:18:42,710
it would it would show it's going on

00:18:45,169 --> 00:18:49,470
I've done that kind of poor job showing

00:18:47,820 --> 00:18:51,330
you build output here but there would be

00:18:49,470 --> 00:18:57,600
a build output between the building line

00:18:51,330 --> 00:18:59,580
in this or BAM okay so does everybody

00:18:57,600 --> 00:19:03,149
know could you hello it's a very popular

00:18:59,580 --> 00:19:05,309
package when you run canoed below in

00:19:03,149 --> 00:19:08,519
your local language it outputs hello

00:19:05,309 --> 00:19:10,230
world pretty complicated it's actually

00:19:08,519 --> 00:19:14,070
quite a complicated package I was

00:19:10,230 --> 00:19:16,049
surprised so here instead of echoing

00:19:14,070 --> 00:19:19,019
hello you've run the command hello and

00:19:16,049 --> 00:19:20,820
then pipe that to note I haven't

00:19:19,019 --> 00:19:30,690
installed in my system what is this

00:19:20,820 --> 00:19:31,169
going to do what I build it this will

00:19:30,690 --> 00:19:34,679
fail

00:19:31,169 --> 00:19:36,809
yeah it will say hello command not found

00:19:34,679 --> 00:19:40,830
it does it needs to have hello as the

00:19:36,809 --> 00:19:41,399
building but it does but first let's try

00:19:40,830 --> 00:19:44,460
something else

00:19:41,399 --> 00:19:54,440
so we have below we get back to whoa we

00:19:44,460 --> 00:19:54,440
call exactly what will this do I guess

00:19:56,240 --> 00:20:01,080
it does fail it still fails no such file

00:19:59,550 --> 00:20:02,370
or directory I had to delete some of

00:20:01,080 --> 00:20:04,790
that some of the handout because of

00:20:02,370 --> 00:20:07,590
purity that's because of a build sandbox

00:20:04,790 --> 00:20:09,210
every in order for something for a bill

00:20:07,590 --> 00:20:11,370
to have access to something on your

00:20:09,210 --> 00:20:13,470
system you have to tell NICs that you're

00:20:11,370 --> 00:20:16,410
going to visit and if you don't do that

00:20:13,470 --> 00:20:18,570
you can't use it so here are build

00:20:16,410 --> 00:20:20,010
inputs empty we passed in this absolute

00:20:18,570 --> 00:20:22,110
path NYX doesn't care what's in that

00:20:20,010 --> 00:20:23,400
drain it's just a regular string we'll

00:20:22,110 --> 00:20:25,380
see when you build it it doesn't tell me

00:20:23,400 --> 00:20:28,440
doesn't allow access to that sort that

00:20:25,380 --> 00:20:29,790
store path the next shell works a bit

00:20:28,440 --> 00:20:31,560
differently right unless you use the

00:20:29,790 --> 00:20:34,580
joke line or what if you yeah next show

00:20:31,560 --> 00:20:34,580
Michelle doesn't use the same

00:20:36,050 --> 00:20:47,310
interpolation sure yeah

00:20:45,090 --> 00:20:49,770
so let's let's get to one possible

00:20:47,310 --> 00:20:51,360
solution to another good solution so

00:20:49,770 --> 00:20:53,070
here we've done something a little bit

00:20:51,360 --> 00:20:55,710
different in build inputs with past

00:20:53,070 --> 00:20:58,140
packages stuff below packages a full low

00:20:55,710 --> 00:20:59,400
impact is defined in Nick's packages and

00:20:58,140 --> 00:21:00,840
if you were to install that you would

00:20:59,400 --> 00:21:01,260
get Nick's back Aaron you would get

00:21:00,840 --> 00:21:04,170
hello

00:21:01,260 --> 00:21:07,800
in fact you would get back color so

00:21:04,170 --> 00:21:11,130
what's gonna happen when I run this why

00:21:07,800 --> 00:21:28,260
would it fail that's interesting I'm

00:21:11,130 --> 00:21:30,540
curious yeah so that's one way to to one

00:21:28,260 --> 00:21:32,400
tricky one one magic trick takes my

00:21:30,540 --> 00:21:34,040
clothes is build inputs here

00:21:32,400 --> 00:21:37,980
automatically get put into the pathway

00:21:34,040 --> 00:21:39,870
so this actually will work and when i

00:21:37,980 --> 00:21:43,200
when i run build it and cat the result i

00:21:39,870 --> 00:21:44,940
get a liberal another good another

00:21:43,200 --> 00:21:46,650
solution this is exactly what you said i

00:21:44,940 --> 00:21:48,840
could have done to the the braces

00:21:46,650 --> 00:21:51,420
packages to hello clothes grace slash

00:21:48,840 --> 00:21:53,230
bin slash hello and then that would have

00:21:51,420 --> 00:21:57,090
worked to and I would

00:21:53,230 --> 00:21:57,090
have heated to put hello into billets

00:22:00,870 --> 00:22:10,690
cross-compiling

00:22:02,049 --> 00:22:13,720
and is too advanced for this stock yeah

00:22:10,690 --> 00:22:16,419
and it's quite complicated so it works

00:22:13,720 --> 00:22:22,230
in a similar way but not exactly with

00:22:16,419 --> 00:22:24,820
him alright does this make sense cool

00:22:22,230 --> 00:22:28,029
going back to the idea of interpolating

00:22:24,820 --> 00:22:30,190
hello right here that would remove act

00:22:28,029 --> 00:22:31,630
just below from build inputs but because

00:22:30,190 --> 00:22:33,639
of the string context that we've

00:22:31,630 --> 00:22:35,799
mentioned before Knicks would know that

00:22:33,639 --> 00:22:37,809
this string depends on that store path

00:22:35,799 --> 00:22:39,669
and so when it executes the building

00:22:37,809 --> 00:22:43,720
will know it needs that path and put it

00:22:39,669 --> 00:22:46,200
into the sandbox what's gonna happen

00:22:43,720 --> 00:22:46,200
when I run this

00:22:47,560 --> 00:22:53,860
and we'll have there why will this fail

00:22:51,510 --> 00:22:56,650
that's true yeah so this was a bit of a

00:22:53,860 --> 00:22:58,240
game curls not in there so let's go do

00:22:56,650 --> 00:23:01,270
the next one alright so added curl now

00:22:58,240 --> 00:23:05,100
look what is today why is this gonna

00:23:01,270 --> 00:23:07,990
fail and why don't I get work excess

00:23:05,100 --> 00:23:14,230
white yeah but but how would I how would

00:23:07,990 --> 00:23:16,150
I fix that I have to tell NYX exactly

00:23:14,230 --> 00:23:19,000
what I'm gonna produce before I can

00:23:16,150 --> 00:23:19,840
access the network so exactly couldn't

00:23:19,000 --> 00:23:22,960
can't the survey

00:23:19,840 --> 00:23:25,620
I used to use like gravy a comp but then

00:23:22,960 --> 00:23:28,600
it's different for confusing error but

00:23:25,620 --> 00:23:30,900
one that one to one great time studying

00:23:28,600 --> 00:23:30,900
for that

00:23:36,990 --> 00:23:41,800
sure yeah exactly it prevents scripts

00:23:40,030 --> 00:23:44,350
from from accessing the network unless

00:23:41,800 --> 00:23:45,610
you exactly know that's going to and

00:23:44,350 --> 00:23:47,770
this is specially kind of fun especially

00:23:45,610 --> 00:23:49,660
if you're using a NICs to install node

00:23:47,770 --> 00:23:52,090
packages or rubygems or something like

00:23:49,660 --> 00:23:56,800
that which periodically have a tendency

00:23:52,090 --> 00:23:58,510
to upload your environment which is

00:23:56,800 --> 00:24:00,550
interesting because even if Nick's if

00:23:58,510 --> 00:24:02,260
even if it could upload your environment

00:24:00,550 --> 00:24:04,740
it would have nothing interesting in the

00:24:02,260 --> 00:24:04,740
environment

00:24:18,690 --> 00:24:20,750
you

00:24:39,390 --> 00:24:44,540
this shot

00:24:41,030 --> 00:24:48,050
56 per attribute value and the the

00:24:44,540 --> 00:24:51,070
contents of this this string is the hash

00:24:48,050 --> 00:24:55,760
that I'm going to fit from gremsky calm

00:24:51,070 --> 00:25:11,270
and so so this is this is the way you

00:24:55,760 --> 00:25:13,430
tell alright so I build that it

00:25:11,270 --> 00:25:16,490
successfully tries to download something

00:25:13,430 --> 00:25:17,420
from my website it succeeds and produces

00:25:16,490 --> 00:25:31,070
the result yes

00:25:17,420 --> 00:25:34,190
so that hash changes like yeah sure yeah

00:25:31,070 --> 00:25:38,570
let's uh let's see if I can I mean I

00:25:34,190 --> 00:25:40,460
assumed me to fail but every time well

00:25:38,570 --> 00:25:42,020
that's sort of the point I think so that

00:25:40,460 --> 00:25:43,640
you don't like rely on something that

00:25:42,020 --> 00:25:46,870
you think is safe and then some guy back

00:25:43,640 --> 00:25:46,870
to change it something dangerous

00:25:59,390 --> 00:26:04,010
okay extended this which would

00:26:14,860 --> 00:26:20,029
so so right now I have this have this

00:26:18,110 --> 00:26:21,259
hash and this this should work I'm not

00:26:20,029 --> 00:26:23,419
contested because maybe you're broken

00:26:21,259 --> 00:26:25,039
but so so we can pretend that this is

00:26:23,419 --> 00:26:26,720
the right hash and if we build that you

00:26:25,039 --> 00:26:29,120
have it would produce the contents of

00:26:26,720 --> 00:26:30,409
grams to calm and if I change this hash

00:26:29,120 --> 00:26:32,629
a little bit I don't know where my

00:26:30,409 --> 00:26:34,970
cursor is because I screwed around with

00:26:32,629 --> 00:26:36,799
color scheme so there you go that'll do

00:26:34,970 --> 00:26:42,740
sorry just change that half I'll do it

00:26:36,799 --> 00:26:44,509
again so so now that hash is wrong so

00:26:42,740 --> 00:26:47,570
what do we think will happen if I build

00:26:44,509 --> 00:27:19,970
this it'll say you gave me this but I

00:26:47,570 --> 00:27:21,590
expected that what's the anyone know the

00:27:19,970 --> 00:27:24,399
trick to doing as a new Mex writing out

00:27:21,590 --> 00:27:24,399
the tofu

00:27:51,350 --> 00:27:57,090
[Laughter]

00:27:57,409 --> 00:28:35,179
and I'm still actually going to break

00:28:01,700 --> 00:28:37,729
this hash there we go alright so we're

00:28:35,179 --> 00:28:39,320
building gram c-calm geography so that

00:28:37,729 --> 00:28:41,239
the instruction for building that

00:28:39,320 --> 00:28:44,149
contains the hash that we expect and how

00:28:41,239 --> 00:28:45,229
to fetch it it's still unhappy with me

00:28:44,149 --> 00:28:49,129
for whatever reason

00:28:45,229 --> 00:28:51,399
mmm there we go got some curl fingers

00:28:49,129 --> 00:28:51,399
crossed

00:29:04,320 --> 00:29:11,170
I'm wondering if my VPNs active so let

00:29:07,900 --> 00:29:13,210
me see if I can Oh perfect

00:29:11,170 --> 00:29:15,610
anything disable my VPN - we're gonna

00:29:13,210 --> 00:29:17,230
pick up this alright so exactly so we

00:29:15,610 --> 00:29:19,900
got hash mismatch fixed output

00:29:17,230 --> 00:29:21,250
derivation this hash we've told it

00:29:19,900 --> 00:29:23,200
what's going to produce that means it's

00:29:21,250 --> 00:29:26,440
called a fixed output derogation we've

00:29:23,200 --> 00:30:22,090
already know the output it says all

00:29:26,440 --> 00:30:26,370
right we can talk about that all right

00:30:22,090 --> 00:30:32,560
yes why do we need to like what is the

00:30:26,370 --> 00:30:35,530
idea of fixed relation exists so why why

00:30:32,560 --> 00:30:37,120
is this mentioned was yeah what's the

00:30:35,530 --> 00:30:39,030
point yeah sure why should I know about

00:30:37,120 --> 00:30:41,140
it yeah cool

00:30:39,030 --> 00:30:42,670
before I get to that are there other

00:30:41,140 --> 00:30:44,910
questions about where we've gotten to so

00:30:42,670 --> 00:30:44,910
far

00:30:56,410 --> 00:31:04,820
no that's actually that's actually the

00:31:02,390 --> 00:31:06,500
same answer for for him so I'll get to

00:31:04,820 --> 00:31:19,309
that in a moment any any other questions

00:31:06,500 --> 00:31:38,960
about this sorry sure it's also the same

00:31:19,309 --> 00:31:41,169
question this is good I mean he's not

00:31:38,960 --> 00:31:46,340
the security issue because you have a

00:31:41,169 --> 00:31:47,059
privacy yeah well let's talk after all

00:31:46,340 --> 00:31:48,620
right yeah

00:31:47,059 --> 00:31:52,790
can you keep these because it's really

00:31:48,620 --> 00:31:54,230
how we'll talk about a lot of all

00:31:52,790 --> 00:31:58,669
develop later that's not gonna crack

00:31:54,230 --> 00:32:02,480
stuff so yeah all right okay so so okay

00:31:58,669 --> 00:32:07,220
so a lot of questions around why ashes

00:32:02,480 --> 00:32:10,309
why not variable hashes and that sort of

00:32:07,220 --> 00:32:13,549
train of thought the reason it does this

00:32:10,309 --> 00:32:16,040
is because every build all of these

00:32:13,549 --> 00:32:22,760
hashes are hashes are what produced them

00:32:16,040 --> 00:32:24,740
so on this curl at this hash that is a

00:32:22,760 --> 00:32:27,230
hash of everything that was used to

00:32:24,740 --> 00:32:28,970
build curl including the hash of the

00:32:27,230 --> 00:32:31,549
source that was used to build curl

00:32:28,970 --> 00:32:35,390
including the version of bash that was

00:32:31,549 --> 00:32:38,030
used to build curl so if if a source of

00:32:35,390 --> 00:32:40,160
curl is not deterministic if we don't

00:32:38,030 --> 00:32:42,620
know what that hash is ahead of time we

00:32:40,160 --> 00:32:45,290
we can't know what this hash will be

00:32:42,620 --> 00:32:47,780
until until we fetch the code until

00:32:45,290 --> 00:32:49,770
we've touched curl imported in hashed it

00:32:47,780 --> 00:32:52,200
and substitute that

00:32:49,770 --> 00:32:54,120
because that the store parents are how

00:32:52,200 --> 00:33:01,140
we know that we're building in isolated

00:32:54,120 --> 00:33:03,450
environments and there is a way to use

00:33:01,140 --> 00:33:05,820
do an impure fetch URL but it slows down

00:33:03,450 --> 00:33:06,990
the evaluator it's not acceptable in mix

00:33:05,820 --> 00:33:10,290
packages and it makes your builds

00:33:06,990 --> 00:33:14,460
unreproducible so I don't recommend it

00:33:10,290 --> 00:33:21,810
and I'm not gonna cover any further

00:33:14,460 --> 00:33:26,070
questions let's fix this all right so

00:33:21,810 --> 00:33:29,340
I've got it got this hash it wanted this

00:33:26,070 --> 00:33:43,620
hash so let's just copy the one wants it

00:33:29,340 --> 00:33:45,270
or the one it got actually so let's do

00:33:43,620 --> 00:34:00,360
this bill again what's gonna happen with

00:33:45,270 --> 00:34:10,140
this it failed to build so what's gonna

00:34:00,360 --> 00:34:12,600
happen next time I try to build it and

00:34:10,140 --> 00:34:14,880
that's exactly right it's already mixed

00:34:12,600 --> 00:34:16,860
download got a different hash and said

00:34:14,880 --> 00:34:18,720
that's okay I can pretend you meant that

00:34:16,860 --> 00:34:21,180
hash I'm still gonna fail but I'll write

00:34:18,720 --> 00:34:24,270
it to where it would be so pretend

00:34:21,180 --> 00:34:26,610
you're downloading like the law tech

00:34:24,270 --> 00:34:28,530
package which is two gigabytes for some

00:34:26,610 --> 00:34:30,480
reason and you get the end of that build

00:34:28,530 --> 00:34:31,920
and it failed in it you have to download

00:34:30,480 --> 00:34:33,240
that two gigabytes I live in the

00:34:31,920 --> 00:34:35,880
mountains I don't have enough internet

00:34:33,240 --> 00:34:38,550
to download two gigabyte file twice so

00:34:35,880 --> 00:34:41,720
it saves it it fails that evaluation but

00:34:38,550 --> 00:34:41,720
once you have to take the hash in place

00:34:47,730 --> 00:35:01,210
but that's not sure yeah

00:34:58,150 --> 00:35:03,730
so what notice hash for smashing fixed

00:35:01,210 --> 00:35:08,410
output derivation it has the to be a YC

00:35:03,730 --> 00:35:11,080
right and this is to be my speed but

00:35:08,410 --> 00:35:13,600
this is where this is the actual hash of

00:35:11,080 --> 00:35:14,440
the file it was trying to build a

00:35:13,600 --> 00:35:18,910
different path

00:35:14,440 --> 00:35:20,770
it was trying to build like a my e

00:35:18,910 --> 00:35:23,530
something something and it didn't end up

00:35:20,770 --> 00:35:27,060
so none of the builds that depend on the

00:35:23,530 --> 00:35:32,290
a my path work yeah

00:35:27,060 --> 00:35:34,480
standard procedure how do you yes yes so

00:35:32,290 --> 00:35:36,610
this is a possible trust model that you

00:35:34,480 --> 00:35:42,430
could use called trust on first use or

00:35:36,610 --> 00:35:44,740
tofu so under the tofu model you can

00:35:42,430 --> 00:35:46,720
decide okay I fetched it once it's

00:35:44,740 --> 00:35:49,450
probably good I'll take the hash put it

00:35:46,720 --> 00:35:50,950
in and then you're good if you have

00:35:49,450 --> 00:35:53,620
something like a package or hitch

00:35:50,950 --> 00:35:55,000
registry like type I or rubygems or

00:35:53,620 --> 00:35:56,860
bundle or things like that

00:35:55,000 --> 00:35:58,360
they will often publish have some caches

00:35:56,860 --> 00:35:59,980
ahead of time so you can take those

00:35:58,360 --> 00:36:01,900
hashes and put them right down but if

00:35:59,980 --> 00:36:05,290
you don't have a hash ready then you can

00:36:01,900 --> 00:36:07,650
use the trust on pretty small any other

00:36:05,290 --> 00:36:07,650
questions

00:36:07,900 --> 00:36:15,119
I mean then what's the point of having

00:36:12,339 --> 00:36:16,720
hashes if you just like okay thank you

00:36:15,119 --> 00:36:18,910
sure yeah

00:36:16,720 --> 00:36:21,089
so if you're making that one that that

00:36:18,910 --> 00:36:23,470
gets you attack and you use the heck -

00:36:21,089 --> 00:36:27,190
it's about your expectations

00:36:23,470 --> 00:36:28,630
so if if you are say packaging a new

00:36:27,190 --> 00:36:31,150
thing and you don't have a hash ready

00:36:28,630 --> 00:36:33,400
you need to establish trust somehow so

00:36:31,150 --> 00:36:34,539
you can find the hash on the website you

00:36:33,400 --> 00:36:38,650
can download it and catch it yourself

00:36:34,539 --> 00:36:39,400
which is what's happening here or you

00:36:38,650 --> 00:36:41,289
don't really have any other options

00:36:39,400 --> 00:36:43,270
right you could use Fetchit and

00:36:41,289 --> 00:36:45,700
penalties and GGG signatures something

00:36:43,270 --> 00:36:48,549
like that but if so if you're building

00:36:45,700 --> 00:36:50,260
your own package and you you have just

00:36:48,549 --> 00:36:51,069
pinned a bogus hash you're expecting the

00:36:50,260 --> 00:36:54,930
hash to be brown

00:36:51,069 --> 00:36:54,930
if you're building a packages

00:37:10,950 --> 00:37:16,660
so it's about establishing that first

00:37:13,420 --> 00:37:18,609
trust I have a question I still and I'm

00:37:16,660 --> 00:37:20,710
clear like about the defense but you

00:37:18,609 --> 00:37:25,240
know fixed output derivation and just a

00:37:20,710 --> 00:37:31,270
derivation sure sure so it's a good good

00:37:25,240 --> 00:37:33,910
point so this will never run anything so

00:37:31,270 --> 00:37:35,650
say curl has changed we already know the

00:37:33,910 --> 00:37:37,720
hash of the result we know that

00:37:35,650 --> 00:37:41,890
conversion of curl has no impact on the

00:37:37,720 --> 00:37:43,900
- will be right so if if even if every

00:37:41,890 --> 00:37:46,710
dependency of Federale has become new or

00:37:43,900 --> 00:37:50,859
we're on we built this first on mix OS

00:37:46,710 --> 00:37:53,319
1603 and we are now building it again on

00:37:50,859 --> 00:37:59,740
deck so as 1909 it'll stay the same will

00:37:53,319 --> 00:38:01,390
not rebuild because radio - here we

00:37:59,740 --> 00:38:03,309
don't actually care exactly what the

00:38:01,390 --> 00:38:06,549
hash is we just know that what we want

00:38:03,309 --> 00:38:07,510
to do so if what we could do if we want

00:38:06,549 --> 00:38:09,700
to do is we could

00:38:07,510 --> 00:38:11,650
passion here and it would only build up

00:38:09,700 --> 00:38:13,330
one time ever and if it ever helped put

00:38:11,650 --> 00:38:15,790
it anything on then hello would be a

00:38:13,330 --> 00:38:17,980
problem but we probably don't care we

00:38:15,790 --> 00:38:20,680
probably don't care if hello changes its

00:38:17,980 --> 00:38:22,000
output format or it adds some meeting

00:38:20,680 --> 00:38:24,040
space or something like that

00:38:22,000 --> 00:38:26,290
we just we know the instructions want to

00:38:24,040 --> 00:38:28,330
run so here we dump us by the hash we

00:38:26,290 --> 00:38:33,910
tell it instead what we need and what we

00:38:28,330 --> 00:38:35,680
want to do verses here where we don't

00:38:33,910 --> 00:38:39,330
actually care about what we're using to

00:38:35,680 --> 00:38:39,330
do it we just care about what we get

00:38:52,680 --> 00:38:58,900
exactly so this this path here is the

00:38:56,020 --> 00:39:02,110
hash of it this is the hash of what we

00:38:58,900 --> 00:39:04,300
produced verses in the hello example

00:39:02,110 --> 00:39:09,690
this this store path is the hash of what

00:39:04,300 --> 00:39:09,690
was used to do the build yes

00:39:32,289 --> 00:39:41,890
I'll put anyway sure no needles

00:39:35,260 --> 00:39:44,140
sure yeah I don't care what fetch URL is

00:39:41,890 --> 00:39:55,720
doing I don't care if if I just commend

00:39:44,140 --> 00:39:57,819
your I just have so there are some

00:39:55,720 --> 00:40:00,190
interesting things here right fetch URL

00:39:57,819 --> 00:40:02,829
actually using this trying HTTP colon

00:40:00,190 --> 00:40:05,079
slash slash grave c-calm that's because

00:40:02,829 --> 00:40:07,630
it has internally a list of mirrors if

00:40:05,079 --> 00:40:10,150
grants you have come doesn't work it

00:40:07,630 --> 00:40:12,940
will fall back to a mirror and look for

00:40:10,150 --> 00:40:15,280
file with that hash name and if it's in

00:40:12,940 --> 00:40:31,480
a mere content addressed by its hash

00:40:15,280 --> 00:40:34,000
it'll fetch that in just the same it's

00:40:31,480 --> 00:40:36,480
not in here because we already know

00:40:34,000 --> 00:40:38,829
exactly what will be produced the

00:40:36,480 --> 00:40:42,220
derivation the CRV here

00:40:38,829 --> 00:40:46,079
it does say I need curl but the output

00:40:42,220 --> 00:40:46,079
does not have any relationship to curl

00:40:50,869 --> 00:40:58,470
you can yeah it's nothing something

00:40:54,720 --> 00:41:00,390
built in magical this no yeah there's a

00:40:58,470 --> 00:41:02,010
there's three parameters that haven't

00:41:00,390 --> 00:41:04,020
written because the danced but they're

00:41:02,010 --> 00:41:06,330
it's called elk put hash I'll go and

00:41:04,020 --> 00:41:07,890
help put hash something something and if

00:41:06,330 --> 00:41:20,280
you set those parameters you've created

00:41:07,890 --> 00:41:25,020
a fixed output derivation one one

00:41:20,280 --> 00:41:26,369
important note one important note about

00:41:25,020 --> 00:41:28,680
implement your own fixed output

00:41:26,369 --> 00:41:31,680
derivations is you don't want to do any

00:41:28,680 --> 00:41:34,650
processing because this hash is

00:41:31,680 --> 00:41:35,820
representing the output so maybe I added

00:41:34,650 --> 00:41:38,250
some extra stuff Cedar Lake

00:41:35,820 --> 00:41:39,990
I took the input and reversed them if

00:41:38,250 --> 00:41:41,850
the hash already exists on the file

00:41:39,990 --> 00:41:43,410
system it won't build it again even if

00:41:41,850 --> 00:41:45,750
you've changed how you wanted to build

00:41:43,410 --> 00:41:47,700
it so it can add it can it can add some

00:41:45,750 --> 00:41:50,610
trouble if you try to be too fancy and

00:41:47,700 --> 00:41:56,430
your folks tablet bills and you further

00:41:50,610 --> 00:41:57,780
questions oh yeah so right now we're

00:41:56,430 --> 00:41:58,920
just asking this this file

00:41:57,780 --> 00:42:01,619
we're just telling it to his hands this

00:41:58,920 --> 00:42:03,090
hash right say tomorrow we just like you

00:42:01,619 --> 00:42:04,859
know actually I want to do a dump

00:42:03,090 --> 00:42:08,240
process and pull up the text in the body

00:42:04,859 --> 00:42:10,350
I could possibly write know of

00:42:08,240 --> 00:42:13,500
expression which does in the fixed up

00:42:10,350 --> 00:42:15,930
with derivation however because this

00:42:13,500 --> 00:42:18,690
hash already exists nick says I'm done

00:42:15,930 --> 00:42:20,820
it won't it won't rerun that fetch it

00:42:18,690 --> 00:42:22,590
won't rerun the processing to get the

00:42:20,820 --> 00:42:25,109
text out of the body it will just say

00:42:22,590 --> 00:42:26,760
the hash exists so we're done so if you

00:42:25,109 --> 00:42:29,820
try to do fancy things in your fetcher

00:42:26,760 --> 00:42:32,970
you can often it becomes very easy to

00:42:29,820 --> 00:42:36,990
hurt yourself but it's my fault oh shut

00:42:32,970 --> 00:42:38,940
up up to you sure yes yeah so as far as

00:42:36,990 --> 00:42:41,280
Nixon is concerned exactly it's your

00:42:38,940 --> 00:42:43,859
phone in terms of in terms of API

00:42:41,280 --> 00:42:46,520
designed your Federation to as minimal

00:42:43,859 --> 00:42:46,520
work as possible

00:42:46,880 --> 00:42:54,769
the building is open up the hatch and

00:42:51,950 --> 00:43:00,079
fetch URL is like a hill

00:42:54,769 --> 00:43:02,480
but object obtain the content so this

00:43:00,079 --> 00:43:05,240
DRP does have actual instructions it

00:43:02,480 --> 00:43:07,609
says I depend on Carl it says I'm gonna

00:43:05,240 --> 00:43:10,759
curl that URL it also doesn't help with

00:43:07,609 --> 00:43:12,500
that hash so this derivation does

00:43:10,759 --> 00:43:14,329
include all of those dependencies and

00:43:12,500 --> 00:43:18,140
everything it's not a hint as always I

00:43:14,329 --> 00:43:21,019
mean like what I care about is that is

00:43:18,140 --> 00:43:23,569
the content of the - yeah I think really

00:43:21,019 --> 00:43:27,069
is not important whether it's grassy or

00:43:23,569 --> 00:43:27,069
exactly yes

00:43:31,800 --> 00:43:35,350
yeah so the grand c-calm where did that

00:43:34,870 --> 00:43:38,560
come from

00:43:35,350 --> 00:43:41,850
yeah so the definition of fetch URL

00:43:38,560 --> 00:43:44,530
strips out the HTTP colon slash left bit

00:43:41,850 --> 00:43:47,880
plus a little bit other processing and

00:43:44,530 --> 00:43:47,880
then snap we used that as

00:43:56,339 --> 00:44:21,520
any other questions yes so you do want

00:44:13,329 --> 00:44:26,290
to be careful to get right - I don't

00:44:21,520 --> 00:44:27,940
know Oh actually if there's like a path

00:44:26,290 --> 00:44:31,660
at the end it's the filename it's the

00:44:27,940 --> 00:44:34,480
last piece of the path if there were a

00:44:31,660 --> 00:44:36,820
change in curl that respite for example

00:44:34,480 --> 00:44:38,380
it's a by default or now starts by

00:44:36,820 --> 00:44:40,510
putting not just the content but the

00:44:38,380 --> 00:44:42,160
headers and the content so like all the

00:44:40,510 --> 00:44:43,930
hashes would like to be different yeah

00:44:42,160 --> 00:44:48,760
on two different measures of curl yeah

00:44:43,930 --> 00:44:50,920
so yeah yeah so if in that case if you

00:44:48,760 --> 00:44:54,190
had the old hash and you have the old

00:44:50,920 --> 00:44:56,470
build product it would it would succeed

00:44:54,190 --> 00:44:58,150
because you already on it if you had the

00:44:56,470 --> 00:45:00,010
old hash and you didn't have the old

00:44:58,150 --> 00:45:01,990
bill you would try and fetch it again

00:45:00,010 --> 00:45:03,790
and say this isn't right so you are

00:45:01,990 --> 00:45:07,180
relying on curl actually much changing

00:45:03,790 --> 00:45:10,089
so effect no no no no we're relying on

00:45:07,180 --> 00:45:11,319
the ash being cracked so so if code does

00:45:10,089 --> 00:45:13,000
the wrong thing curls doing the wrong

00:45:11,319 --> 00:45:15,460
thing but that hash is what we need out

00:45:13,000 --> 00:45:15,849
so we need to fix ID have to rerun the

00:45:15,460 --> 00:45:18,190
bills

00:45:15,849 --> 00:45:19,900
that's a tough substitute is zero thanks

00:45:18,190 --> 00:45:21,430
you want to rerun the build yeah and you

00:45:19,900 --> 00:45:26,760
were gonna fetch grant see that bum

00:45:21,430 --> 00:45:29,319
again yeah isn't enough reducer glue so

00:45:26,760 --> 00:45:41,200
we would need to fix patch URLs to the

00:45:29,319 --> 00:45:43,119
right we I mean sure yes but also get

00:45:41,200 --> 00:45:46,829
curl if you're fetching are doing the

00:45:43,119 --> 00:45:46,829
wrong thing they're doing the right

00:45:50,069 --> 00:45:53,980
thing but I wouldn't notice deliver the

00:45:52,510 --> 00:45:55,310
thing and it would break it to customer

00:45:53,980 --> 00:45:57,320
well presumably you

00:45:55,310 --> 00:45:59,510
you would have you upgrade curl you've

00:45:57,320 --> 00:46:00,560
been you would test it yet but they've

00:45:59,510 --> 00:46:02,420
been tested on my machine

00:46:00,560 --> 00:46:06,020
let me note this because if you upgrade

00:46:02,420 --> 00:46:07,460
curl you would test it this isn't this

00:46:06,020 --> 00:46:09,320
isn't picking a curl from your file

00:46:07,460 --> 00:46:12,910
system it's not picking user bin Corona

00:46:09,320 --> 00:46:16,340
it's making the curl index packages yeah

00:46:12,910 --> 00:46:17,840
yeah okay by the bid Knicks packages can

00:46:16,340 --> 00:46:20,990
change you pin it down to a command

00:46:17,840 --> 00:46:23,330
right that's true but again so

00:46:20,990 --> 00:46:24,800
presumably fasted it and again actually

00:46:23,330 --> 00:46:26,990
if it ends up going to the customer in

00:46:24,800 --> 00:46:28,640
the hashes Raman it fails fails for you

00:46:26,990 --> 00:46:30,890
okay this is a pretty okay failure like

00:46:28,640 --> 00:46:32,810
all things considered if you start

00:46:30,890 --> 00:46:36,040
getting the wrong ashes that's okay this

00:46:32,810 --> 00:46:36,040
is okay we can still fix this

00:47:01,870 --> 00:47:14,770
we'll cover that later that's it's a

00:47:04,310 --> 00:47:17,900
cancer it doesn't matter okay because

00:47:14,770 --> 00:47:21,050
that is an abstraction who knows like at

00:47:17,900 --> 00:47:23,270
some level maybe maybe it's actually

00:47:21,050 --> 00:47:34,340
using this type of Durbin I don't know I

00:47:23,270 --> 00:47:35,630
don't care I just know so there's a lot

00:47:34,340 --> 00:47:40,520
of discussion I think that's really good

00:47:35,630 --> 00:47:42,710
so so whatever it was used for FET URL

00:47:40,520 --> 00:47:44,780
is encoded in this derivation there are

00:47:42,710 --> 00:47:47,120
infinite number of variations that can

00:47:44,780 --> 00:47:50,980
produce this out though as long as the

00:47:47,120 --> 00:47:50,980
hash is the same it will always owe

00:47:54,950 --> 00:48:04,220
okay so then then you get something that

00:47:58,430 --> 00:48:15,590
would represent that yeah any other

00:48:04,220 --> 00:48:17,120
questions so yeah so you can pass it in

00:48:15,590 --> 00:48:19,880
a list of URLs and we'll just try each

00:48:17,120 --> 00:48:23,300
one you can Nix had built-in has the

00:48:19,880 --> 00:48:25,490
idea of looking up a mirror by hash so

00:48:23,300 --> 00:48:27,470
Nix has a built-in list of mirrors for

00:48:25,490 --> 00:48:32,230
her things and Nick packages for example

00:48:27,470 --> 00:48:32,230
and yes so there's some resilient

00:48:38,690 --> 00:48:43,750
they're arts so you have to use hash

00:48:41,510 --> 00:48:46,340
that Nick supports this isn't a promise

00:48:43,750 --> 00:48:47,960
like nothing in Nick's package is

00:48:46,340 --> 00:48:49,520
promising this hash will be the same

00:48:47,960 --> 00:48:51,920
it's guaranteeing in the hash will be

00:48:49,520 --> 00:48:59,630
same and Nick's checks that so Nick's

00:48:51,920 --> 00:49:00,470
has to know how to do that yeah 512 to 6

00:48:59,630 --> 00:49:04,090
00:49:00,470 --> 00:49:06,650
I think we've dropped 75 but it's like

00:49:04,090 --> 00:49:11,990
in Nick's package itself I believe is

00:49:06,650 --> 00:49:14,570
like 99 percent sha-256 here's

00:49:11,990 --> 00:49:16,880
something's great imagine a shell

00:49:14,570 --> 00:49:20,330
scripts a scheme installer accidentally

00:49:16,880 --> 00:49:22,070
has our flash dollar sign with a

00:49:20,330 --> 00:49:24,260
variable and then the variable is is

00:49:22,070 --> 00:49:25,700
undefined against you set at you and

00:49:24,260 --> 00:49:27,260
then and then what happens because

00:49:25,700 --> 00:49:34,190
you've you've run this on your system

00:49:27,260 --> 00:49:35,599
what will happen when I run this so I

00:49:34,190 --> 00:49:37,369
don't have an example of the output but

00:49:35,599 --> 00:49:39,950
frankly was pretty boring it kinds of

00:49:37,369 --> 00:49:41,930
Lee it managed to delete the one

00:49:39,950 --> 00:49:44,869
directory it can write to and it tried

00:49:41,930 --> 00:49:46,490
to lead everything else and it didn't

00:49:44,869 --> 00:49:48,830
because it doesn't have write access and

00:49:46,490 --> 00:49:50,390
in fact it only has read access to a few

00:49:48,830 --> 00:49:52,820
paths we can look at that I think how

00:49:50,390 --> 00:49:54,670
are we doing on time we're and good oh

00:49:52,820 --> 00:49:57,859
sure

00:49:54,670 --> 00:50:00,380
all right so to reiterate there's

00:49:57,859 --> 00:50:01,880
filesystem isolation you can only access

00:50:00,380 --> 00:50:03,530
things in a build which you have

00:50:01,880 --> 00:50:05,300
explicitly declare that means everyone

00:50:03,530 --> 00:50:07,130
and the rest of the system is completely

00:50:05,300 --> 00:50:09,260
invisible you can't see home directories

00:50:07,130 --> 00:50:09,770
you can't see users you can't you can't

00:50:09,260 --> 00:50:11,559
see anything

00:50:09,770 --> 00:50:26,199
yeah

00:50:11,559 --> 00:50:30,579
oh sure so if let's see so if this was

00:50:26,199 --> 00:50:32,799
like just yeah yeah okay so first well

00:50:30,579 --> 00:50:35,140
what Nick will do during evaluation time

00:50:32,799 --> 00:50:40,390
is copy your entire system into the next

00:50:35,140 --> 00:50:42,099
store once it has completed copying your

00:50:40,390 --> 00:50:45,939
entire system into the next story

00:50:42,099 --> 00:50:50,079
it will then run the build and in fact

00:50:45,939 --> 00:50:51,519
if you did rms RF dollar curly slash it

00:50:50,079 --> 00:51:00,519
would still fit because that's copied

00:50:51,519 --> 00:51:10,420
into the next story right there would

00:51:00,519 --> 00:51:12,640
not be the next evaluation time the the

00:51:10,420 --> 00:51:14,739
right is done by essentially tearing up

00:51:12,640 --> 00:51:16,539
everything sending it over to the daemon

00:51:14,739 --> 00:51:22,599
and then the daemon extracts it over to

00:51:16,539 --> 00:51:35,819
the back you have a small system in a

00:51:22,599 --> 00:51:38,049
lot of RAM totally yeah the only thing

00:51:35,819 --> 00:51:40,209
and that's a cool service and that's

00:51:38,049 --> 00:51:43,569
actually an interesting thing so past so

00:51:40,209 --> 00:51:46,119
pretend this is an example mix every

00:51:43,569 --> 00:51:47,529
path in this file is relative to example

00:51:46,119 --> 00:51:50,219
done there's no matter where you're

00:51:47,529 --> 00:51:50,219
calling nickel

00:51:54,690 --> 00:52:01,420
any questions about this I think this is

00:51:59,230 --> 00:52:06,100
really cool I think this is the my

00:52:01,420 --> 00:52:07,470
second favorite feature of next that's

00:52:06,100 --> 00:52:10,050
next

00:52:07,470 --> 00:52:16,450
how many minutes I'm with minutes over

00:52:10,050 --> 00:52:21,070
my Nobel okay oh I'm sorry for going

00:52:16,450 --> 00:52:23,230
over straight context is my favorite so

00:52:21,070 --> 00:52:23,619
this this has a few things going on

00:52:23,230 --> 00:52:25,660
there

00:52:23,619 --> 00:52:27,369
we have import mix packages at the top

00:52:25,660 --> 00:52:29,410
that's familiar we have this special

00:52:27,369 --> 00:52:31,180
arell but that's familiar we've covered

00:52:29,410 --> 00:52:33,460
that we have this run command which is

00:52:31,180 --> 00:52:36,250
slow and not very useful it sleeps for a

00:52:33,460 --> 00:52:38,080
hundred seconds and these touches all

00:52:36,250 --> 00:52:39,670
right and then we do this run command

00:52:38,080 --> 00:52:42,490
where we build stuff with dependencies

00:52:39,670 --> 00:52:45,160
so we do that thing that we did before

00:52:42,490 --> 00:52:47,470
we copy the text that or the top funnel

00:52:45,160 --> 00:52:50,440
from your current directory and we refer

00:52:47,470 --> 00:52:53,320
to this source the gram see Swiss we

00:52:50,440 --> 00:52:56,080
copy that into out / system and then we

00:52:53,320 --> 00:52:58,900
copy the slow thing this bit into open /

00:52:56,080 --> 00:53:00,640
slow what will happen like but what's

00:52:58,900 --> 00:53:09,270
that word in which things happen when I

00:53:00,640 --> 00:53:09,270
run this okay first we fetch

00:53:29,910 --> 00:53:38,160
many cookie be the derivation source of

00:53:39,930 --> 00:53:42,930
okay

00:53:48,730 --> 00:53:56,680
don't be the result of 100 second okay

00:54:01,480 --> 00:54:09,100
okay yeah okay what do you think feature

00:54:12,260 --> 00:54:20,360
[Laughter]

00:54:17,140 --> 00:54:22,370
so when this is evaluated be out the

00:54:20,360 --> 00:54:24,800
result the Knicks build knows it needs

00:54:22,370 --> 00:54:26,180
to build is build of dependency it

00:54:24,800 --> 00:54:29,090
doesn't care about anything other than

00:54:26,180 --> 00:54:31,100
build was dependency at build time what

00:54:29,090 --> 00:54:33,500
it does next is this alright what do we

00:54:31,100 --> 00:54:37,600
need to build that it says all right you

00:54:33,500 --> 00:54:37,600
need to do this you need to do this run

00:54:41,640 --> 00:54:46,020
it would indeed sleep for 100 seconds

00:54:43,710 --> 00:54:48,380
and then when all of its inputs are

00:54:46,020 --> 00:54:51,300
prepared then it runs this command

00:54:48,380 --> 00:54:53,280
actually first look at the latch the

00:54:51,300 --> 00:54:55,620
phoenicians horror does it ignore the

00:54:53,280 --> 00:54:59,370
what's in the weapon checks what's in

00:54:55,620 --> 00:55:01,650
and what these actually needs so in

00:54:59,370 --> 00:55:04,020
terms of have you evaluated work so so

00:55:01,650 --> 00:55:05,490
indeed so it sees us let is he's a bunch

00:55:04,020 --> 00:55:07,620
of codes like all right I don't know

00:55:05,490 --> 00:55:17,130
about that where it Musa is these

00:55:07,620 --> 00:55:18,390
packages it imports packages when you

00:55:17,130 --> 00:55:21,090
import makes packages you get back a

00:55:18,390 --> 00:55:24,660
function so here we're passing an empty

00:55:21,090 --> 00:55:26,580
I should be set to that function so it

00:55:24,660 --> 00:55:28,230
says packages are implicit specialist

00:55:26,580 --> 00:55:30,210
and then it says alright a run command

00:55:28,230 --> 00:55:32,550
nick says oh i need to call that

00:55:30,210 --> 00:55:34,500
function so it passes that in see the

00:55:32,550 --> 00:55:36,930
packages nick's packages if any weights

00:55:34,500 --> 00:55:40,200
just enough to get run come in and then

00:55:36,930 --> 00:55:41,940
it's that that's easy that that's easy

00:55:40,200 --> 00:55:44,520
gets the string and says though maybe

00:55:41,940 --> 00:55:47,010
more all right i need to copy that file

00:55:44,520 --> 00:55:49,290
in today's all right i need to build

00:55:47,010 --> 00:55:51,570
that i need to build that it decides all

00:55:49,290 --> 00:55:55,710
of it at what it must up and then it

00:55:51,570 --> 00:55:58,200
does build so once it does the source

00:55:55,710 --> 00:56:00,210
it goes up to sources up packages and no

00:55:58,200 --> 00:56:03,210
packages that URL I don't know if that

00:56:00,210 --> 00:56:05,520
you all evaluate that URL it evaluates

00:56:03,210 --> 00:56:09,870
that URL it returns a derivation and

00:56:05,520 --> 00:56:11,520
Zissou build it gets on to slow slow so

00:56:09,870 --> 00:56:15,000
the run can i know run command puts okay

00:56:11,520 --> 00:56:23,160
how can he do though so thank you just a

00:56:15,000 --> 00:56:25,500
slow yeah so the result of run command

00:56:23,160 --> 00:56:27,030
is a derivation it doesn't a derivation

00:56:25,500 --> 00:56:29,070
that hasn't done anything yet

00:56:27,030 --> 00:56:31,860
all it does is if this writes its inputs

00:56:29,070 --> 00:56:34,230
and what to do so by the time the

00:56:31,860 --> 00:56:35,940
derivation is evaluated to created it

00:56:34,230 --> 00:56:37,950
knows it needs slow and it knows that

00:56:35,940 --> 00:56:40,830
needs source so then the build phase

00:56:37,950 --> 00:56:42,930
happens and the build phase says alright

00:56:40,830 --> 00:56:45,270
these two don't depend on each other

00:56:42,930 --> 00:56:47,550
go so basically because of their age

00:56:45,270 --> 00:56:49,710
we can do para things because we like to

00:56:47,550 --> 00:56:51,000
prepare yeah and then okay they said he

00:56:49,710 --> 00:56:53,450
said this will give you a parallel so

00:56:51,000 --> 00:56:56,280
let's do exactly that this derivation

00:56:53,450 --> 00:56:58,920
describes every single thing needed to

00:56:56,280 --> 00:57:01,560
build this derivation says I need that

00:56:58,920 --> 00:57:03,540
your result from fetch URL the factorial

00:57:01,560 --> 00:57:05,640
derivation says I need Curl Curl says I

00:57:03,540 --> 00:57:07,650
need you loop see julep sieve says I

00:57:05,640 --> 00:57:08,730
need - in order to do it bash does I

00:57:07,650 --> 00:57:11,190
need a different batch so I can

00:57:08,730 --> 00:57:14,190
bootstrap myself bootstrapping bash says

00:57:11,190 --> 00:57:15,480
re I need some other thing downloaded

00:57:14,190 --> 00:57:17,220
from the internet which is a binary tar

00:57:15,480 --> 00:57:19,140
ball so I can actually have a back to

00:57:17,220 --> 00:57:21,780
execute so you get this huge tree of

00:57:19,140 --> 00:57:23,310
bear evasions nix walks it deeper and

00:57:21,780 --> 00:57:25,530
deeper until it gets to something it has

00:57:23,310 --> 00:57:32,070
once it has it it builds everything in

00:57:25,530 --> 00:57:35,780
as nice parallel as possible really yes

00:57:32,070 --> 00:57:38,520
lacing this so when I look at this I

00:57:35,780 --> 00:57:40,380
can't so I would say this was some other

00:57:38,520 --> 00:57:42,930
lazily evaluated language I would say

00:57:40,380 --> 00:57:44,940
elimination drives navigation and it

00:57:42,930 --> 00:57:48,840
would be pretty happy but when I look at

00:57:44,940 --> 00:57:51,060
this I can't really see right where

00:57:48,840 --> 00:57:54,420
things get evaluated I can only see

00:57:51,060 --> 00:57:57,020
where the evaluation happens in the

00:57:54,420 --> 00:58:00,119
derivation right yeah I'd like to have

00:57:57,020 --> 00:58:00,330
heuristics to reason about how it could

00:58:00,119 --> 00:58:02,609
work

00:58:00,330 --> 00:58:05,070
look at this well you can look at this

00:58:02,609 --> 00:58:07,440
and know ok nothing you can read this at

00:58:05,070 --> 00:58:09,090
them and say all right source doesn't

00:58:07,440 --> 00:58:10,890
depend on anything else I seen yet

00:58:09,090 --> 00:58:13,470
flow doesn't depend on anything else

00:58:10,890 --> 00:58:15,210
I've seen yet Ronnie command ok it

00:58:13,470 --> 00:58:17,490
depends on some things and you can

00:58:15,210 --> 00:58:21,480
reason about that and know it could be

00:58:17,490 --> 00:58:23,280
possible that you are on save the sage

00:58:21,480 --> 00:58:25,200
in branch of mixed packages and curl

00:58:23,280 --> 00:58:26,609
hasn't been compiled yup and you're in

00:58:25,200 --> 00:58:27,990
for an afternoon of compounding a whole

00:58:26,609 --> 00:58:30,240
bunch of packages so you can build this

00:58:27,990 --> 00:58:32,670
that's completely transparent Nix does

00:58:30,240 --> 00:58:34,500
the same thing in any case but as long

00:58:32,670 --> 00:58:36,480
as you're on a stable stable like

00:58:34,500 --> 00:58:37,560
released version makes packages you can

00:58:36,480 --> 00:58:41,490
look at this and reason quite

00:58:37,560 --> 00:58:44,880
comfortably about little there were a

00:58:41,490 --> 00:58:47,450
lot of hands so you were

00:58:44,880 --> 00:58:50,759
one thing I'm not clear about these

00:58:47,450 --> 00:58:52,859
candidates run command what does it do

00:58:50,759 --> 00:58:56,069
is it actually trade the cleanser you

00:58:52,859 --> 00:58:58,650
run or interest rates to come in mmm so

00:58:56,069 --> 00:59:02,420
this this is derivation which will run

00:58:58,650 --> 00:59:05,609
this kind okay so if we go back to hello

00:59:02,420 --> 00:59:07,259
we have this recommend we out we run

00:59:05,609 --> 00:59:10,380
hello actually I'm going to go to

00:59:07,259 --> 00:59:12,210
working one so we have described this

00:59:10,380 --> 00:59:15,420
kind you want to run and the derivation

00:59:12,210 --> 00:59:21,859
itself runs that it's not like writing a

00:59:15,420 --> 00:59:27,630
scripts that you can run can you like

00:59:21,859 --> 00:59:31,799
explain we instantiate I think that's

00:59:27,630 --> 00:59:43,490
what's used oh yeah yes okay so I

00:59:31,799 --> 00:59:46,529
realized also oh man yeah so Nick's bill

00:59:43,490 --> 00:59:48,480
is a two-step face first it runs nice

00:59:46,529 --> 00:59:50,400
instantiate that does nothing but

00:59:48,480 --> 00:59:52,109
compute stuff I think it thinks through

00:59:50,400 --> 00:59:57,089
the Knicks and produces the derivations

00:59:52,109 --> 01:00:00,000
the DRV folks if we go back to here so

00:59:57,089 --> 01:00:01,819
here you see here it is evaluated it's

01:00:00,000 --> 01:00:05,970
looking through all the Knicks code to

01:00:01,819 --> 01:00:07,349
find what what computations be done it

01:00:05,970 --> 01:00:10,200
comes up with a list of derivations

01:00:07,349 --> 01:00:13,950
those are actual things that need to

01:00:10,200 --> 01:00:16,289
execute to be built not in Xcode but

01:00:13,950 --> 01:00:17,970
actual nets and then have the after all

01:00:16,289 --> 01:00:20,940
the instantiation is them this is it

01:00:17,970 --> 01:00:24,119
this derivation is initiated as a result

01:00:20,940 --> 01:00:27,299
this so you'll stand she ate or you you

01:00:24,119 --> 01:00:30,509
have this into this expression the NICS

01:00:27,299 --> 01:00:33,269
evaluates it instantiates derivation and

01:00:30,509 --> 01:00:35,160
then that list of derivation is it's

01:00:33,269 --> 01:00:37,730
basically just

01:00:35,160 --> 01:00:42,150
so that's those are separate phases

01:00:37,730 --> 01:00:44,220
realize realizing is you realize that

01:00:42,150 --> 01:00:55,080
they're Asian it's it's I know you for

01:00:44,220 --> 01:00:57,810
building the derivation yeah yeah

01:00:55,080 --> 01:01:01,440
so just asking about geeks which is a

01:00:57,810 --> 01:01:04,530
good new version of Nix they actually

01:01:01,440 --> 01:01:05,369
for a long time used Knicks the Knicks

01:01:04,530 --> 01:01:07,530
Damon

01:01:05,369 --> 01:01:09,180
so geeks wrote their own version Knicks

01:01:07,530 --> 01:01:11,369
build they had their own expression

01:01:09,180 --> 01:01:13,560
language they would create derogations

01:01:11,369 --> 01:01:15,510
send them to the Knicks Damon we just

01:01:13,560 --> 01:01:17,580
essentially they would send these dr

01:01:15,510 --> 01:01:18,720
keys to the next damon and then the next

01:01:17,580 --> 01:01:42,720
thing with the building they could build

01:01:18,720 --> 01:01:44,970
their own version yes gosh we are super

01:01:42,720 --> 01:02:06,240
over time but I'm gonna keep going until

01:01:44,970 --> 01:02:09,450
telling you to stop yeah that's true so

01:02:06,240 --> 01:02:10,560
like so we explained here and also we

01:02:09,450 --> 01:02:12,420
can just hang out here and answer

01:02:10,560 --> 01:02:14,430
questions okay that's totally we're

01:02:12,420 --> 01:02:17,970
gonna do the talks for sure and

01:02:14,430 --> 01:02:21,050
afterward we can't hang out

01:02:17,970 --> 01:02:21,050
[Music]

01:02:48,950 --> 01:03:01,530
all right okay no question about cool

01:02:59,550 --> 01:03:04,170
all right so I haven't prepared for this

01:03:01,530 --> 01:03:10,830
Oh it'll be a bit of a chowder but we'll

01:03:04,170 --> 01:03:26,550
get through it so um we have I really

01:03:10,830 --> 01:03:29,130
wish I could look over here but yeah all

01:03:26,550 --> 01:03:31,050
right so we have we mix instantiate it

01:03:29,130 --> 01:03:33,660
do we evaluate the expression do

01:03:31,050 --> 01:03:36,180
something okay we've evaluated the

01:03:33,660 --> 01:03:38,100
network - fetch URL file it's created a

01:03:36,180 --> 01:03:44,690
list of derivations specifically this

01:03:38,100 --> 01:03:44,690
one this derivation and it's store query

01:03:45,220 --> 01:03:48,320
[Music]

01:03:51,800 --> 01:04:05,730
like Marcus so we can say ask them dis

01:03:55,590 --> 01:04:07,109
door - all right so we can take we can

01:04:05,730 --> 01:04:09,570
say to the next door you are no

01:04:07,109 --> 01:04:13,020
available dependency graph stuff why

01:04:09,570 --> 01:04:16,350
don't you tell me about and so we can we

01:04:13,020 --> 01:04:18,900
can store a query requisites what it

01:04:16,350 --> 01:04:24,869
requires thanked and this is everything

01:04:18,900 --> 01:04:26,640
that it requires to do that in fact 246

01:04:24,869 --> 01:04:28,560
lines of things that need to exist in

01:04:26,640 --> 01:04:32,310
order for it to happen and again this

01:04:28,560 --> 01:04:34,710
goes all the way from bootstrap tools

01:04:32,310 --> 01:04:36,690
this is a binary tarball of things that

01:04:34,710 --> 01:04:40,890
what a very minimal compiler a very

01:04:36,690 --> 01:04:43,830
minimal shell all the way to like the

01:04:40,890 --> 01:04:46,170
default standard and stuff - some

01:04:43,830 --> 01:04:51,480
patches that we have up here we have a

01:04:46,170 --> 01:04:54,330
patch that we apply somewhere let's see

01:04:51,480 --> 01:04:57,390
you get stage 0 oh yeah that's a good

01:04:54,330 --> 01:04:59,040
boost wrapping stuff we get off stage 0

01:04:57,390 --> 01:05:01,380
into a stage 1 where we get a more

01:04:59,040 --> 01:05:04,680
reasonable compiler get that pearl in

01:05:01,380 --> 01:05:12,060
there nice and get text this is all good

01:05:04,680 --> 01:05:14,480
stuff and eventually we we get to curl

01:05:12,060 --> 01:05:17,930
should be in there somewhere

01:05:14,480 --> 01:05:17,930
but at the end

01:05:51,650 --> 01:05:54,829
[Music]

01:06:07,430 --> 01:06:10,530
[Music]

01:06:24,560 --> 01:06:29,010
[Laughter]

01:06:33,050 --> 01:06:38,430
sure

01:06:34,260 --> 01:06:41,610
so let's just take this get text ERV I

01:06:38,430 --> 01:06:46,470
don't know this just one in the list we

01:06:41,610 --> 01:06:48,300
can it Enix if you refer to that in the

01:06:46,470 --> 01:06:52,590
expression it'll just do okay

01:06:48,300 --> 01:06:56,480
but if you have the RV you can do you

01:06:52,590 --> 01:06:56,480
just Nix build on the Derby

01:07:08,530 --> 01:07:13,809
so usually it looks like this and the

01:07:11,530 --> 01:07:22,180
green is not very nice so I and actually

01:07:13,809 --> 01:07:26,040
it doesn't usually usually it'll take

01:07:22,180 --> 01:07:26,040
this and put Marcus

01:07:29,349 --> 01:07:35,109
so say yeah that's I just didn't sort

01:07:32,290 --> 01:07:38,170
that out all the way it'd be pretty

01:07:35,109 --> 01:07:39,339
gutsy I think so alright so here we go

01:07:38,170 --> 01:07:41,980
and it actually demonstrates something

01:07:39,339 --> 01:07:44,619
kind of weird so if we said it needed it

01:07:41,980 --> 01:07:45,940
but when I tried to build that get text

01:07:44,619 --> 01:07:48,250
air invasion actually the fetch stuff

01:07:45,940 --> 01:07:50,950
from the Internet and the reason it

01:07:48,250 --> 01:07:53,049
happened is because I don't actually

01:07:50,950 --> 01:07:54,970
need that for my regular system that's a

01:07:53,049 --> 01:07:57,460
dependency of one of my demands mr.

01:07:54,970 --> 01:08:10,960
Brown and so I can get that dependency I

01:07:57,460 --> 01:08:13,180
don't need it oh sure this is right yeah

01:08:10,960 --> 01:08:16,710
driver okay so let's say I had a store

01:08:13,180 --> 01:08:19,359
path and I want to know its derivation

01:08:16,710 --> 01:08:24,390
there you go I passed new store - a

01:08:19,359 --> 01:08:24,390
query - driver and then I store

01:08:37,739 --> 01:08:44,409
yeah yeah so that's a cool let's see how

01:08:43,269 --> 01:08:48,189
much Bosch because I might be wearing

01:08:44,409 --> 01:08:51,900
something so we've got this this Bosch

01:08:48,189 --> 01:08:55,479
which is this my regular Bosch and oh

01:08:51,900 --> 01:08:59,769
yeah that makes sense okay and so what

01:08:55,479 --> 01:09:02,799
on my system depends on that bath first

01:08:59,769 --> 01:09:05,679
so we can query what refers to a store

01:09:02,799 --> 01:09:10,299
path and use everything will be system

01:09:05,679 --> 01:09:15,819
but that depends on on that Bosch this

01:09:10,299 --> 01:09:17,499
is kind of a curious list you might

01:09:15,819 --> 01:09:23,259
think that it more things with depends

01:09:17,499 --> 01:09:25,929
on that Bosch yeah so in Nix packages

01:09:23,259 --> 01:09:27,819
are two bashes well probably more but

01:09:25,929 --> 01:09:29,949
the important ones is that there's a

01:09:27,819 --> 01:09:31,959
regular the standard fashion uses to

01:09:29,949 --> 01:09:34,269
build and then there's a separate Bosch

01:09:31,959 --> 01:09:35,409
which is used interactively and the

01:09:34,269 --> 01:09:37,479
reason we do that is they the

01:09:35,409 --> 01:09:40,419
non-interactive one has way fewer

01:09:37,479 --> 01:09:42,549
dependency and actually what's happening

01:09:40,419 --> 01:09:44,529
here what these things are that depends

01:09:42,549 --> 01:09:47,439
on this Bosch these are different

01:09:44,529 --> 01:09:48,939
versions of Nix OS systems so these are

01:09:47,439 --> 01:09:51,189
actually my service systems I have my

01:09:48,939 --> 01:09:56,009
own entire service systems unlike my

01:09:51,189 --> 01:09:56,009
local laptop because I can

01:09:56,099 --> 01:10:06,139
yeah so that's good questions

01:10:07,850 --> 01:10:15,000
let's soon let's take a look at a like

01:10:12,410 --> 01:10:24,900
why does this system pass depend on that

01:10:15,000 --> 01:10:30,270
bash so we put in what have we put in a

01:10:24,900 --> 01:10:33,990
second pass and we can see so in this

01:10:30,270 --> 01:10:38,220
fix OS system - ogden which is my my

01:10:33,990 --> 01:10:40,620
backup server at home we have this path

01:10:38,220 --> 01:10:42,840
inside that's a directory inside that

01:10:40,620 --> 01:10:45,450
directors of file called activate and

01:10:42,840 --> 01:10:50,270
inside that final code activate there is

01:10:45,450 --> 01:10:53,510
a element Ellen - SF in that bash into

01:10:50,270 --> 01:10:53,510
another location

01:10:55,340 --> 01:11:09,170
so wait what is yeah oh no so this is

01:11:06,360 --> 01:11:17,940
actually using binary grab okay

01:11:09,170 --> 01:11:21,350
for example LD why does the bash depend

01:11:17,940 --> 01:11:25,400
on the lib history this might be

01:11:21,350 --> 01:11:25,400
interesting especially without

01:11:29,600 --> 01:11:34,790
now all right so I've got white pencil

01:11:32,160 --> 01:11:39,390
back your active Bosch to live history

01:11:34,790 --> 01:11:44,340
and so bin bash this is probably like

01:11:39,390 --> 01:11:47,430
our past but I decide like butcher for

01:11:44,340 --> 01:11:49,230
example in that case in the mid

01:11:47,430 --> 01:11:53,070
expressions have shown us before or you

01:11:49,230 --> 01:11:55,950
would give CP so would then Y depends

01:11:53,070 --> 01:11:59,040
show you the line of the expression or

01:11:55,950 --> 01:12:01,560
in the derivation which CP is used and

01:11:59,040 --> 01:12:04,530
tell you know being you to thought about

01:12:01,560 --> 01:12:07,100
what know so let's take a look at that

01:12:04,530 --> 01:12:07,100
so we have

01:12:19,400 --> 01:12:25,860
all right sure

01:12:23,580 --> 01:12:27,120
yeah let's let's take a break and we'll

01:12:25,860 --> 01:12:30,780
play later

01:12:27,120 --> 01:12:33,590
what essentially good use that that's a

01:12:30,780 --> 01:12:33,590
time dependence

01:12:37,170 --> 01:12:41,369

YouTube URL: https://www.youtube.com/watch?v=lxtHH838yko


