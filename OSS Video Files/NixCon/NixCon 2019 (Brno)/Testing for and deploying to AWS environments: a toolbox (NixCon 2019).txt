Title: Testing for and deploying to AWS environments: a toolbox (NixCon 2019)
Publication date: 2019-12-14
Playlist: NixCon 2019 (Brno)
Description: 
	This is an overview of the setup we used when building DeckDeckGo. We used Nix to test and deploy code to AWS Lambda, backed by Amazon's Simple Queue Service, DynamoDB, S3 and RDS PostgreSQL.
Captions: 
	00:00:00,920 --> 00:00:06,960
so the next talk is with from Nicola

00:00:05,160 --> 00:00:08,940
Mattia and he's gonna be talking about

00:00:06,960 --> 00:00:11,640
testing for in deploying through AWS

00:00:08,940 --> 00:00:16,010
environments okay

00:00:11,640 --> 00:00:19,350
[Applause]

00:00:16,010 --> 00:00:20,939
hi everyone again so I learned an

00:00:19,350 --> 00:00:23,220
important life lesson at Nick's con this

00:00:20,939 --> 00:00:25,019
year if you're going to a conference and

00:00:23,220 --> 00:00:29,429
aim at giving a talk it's a good idea

00:00:25,019 --> 00:00:31,080
but aim at only one the consequence is

00:00:29,429 --> 00:00:33,510
this ones will be much shorter so feel

00:00:31,080 --> 00:00:35,960
free to interrupt ask questions during

00:00:33,510 --> 00:00:38,250
the talk share your experience and

00:00:35,960 --> 00:00:44,160
hopefully we'll make it to a half an

00:00:38,250 --> 00:00:46,379
hour so I did during most of my career I

00:00:44,160 --> 00:00:48,090
had someone dealing with the deployments

00:00:46,379 --> 00:00:50,820
for me and I didn't have to care about

00:00:48,090 --> 00:00:52,530
it at all until I started this side

00:00:50,820 --> 00:00:55,199
project called tech which is a

00:00:52,530 --> 00:00:57,449
presentation software and then all of a

00:00:55,199 --> 00:00:59,370
sudden I was alone to do my deployments

00:00:57,449 --> 00:01:02,190
I had to actually deal with a setting up

00:00:59,370 --> 00:01:02,940
Postgres and everything and I had to

00:01:02,190 --> 00:01:06,900
learn about it

00:01:02,940 --> 00:01:08,729
so really liking necks I try to push as

00:01:06,900 --> 00:01:13,560
much of the complexity inside of Nick's

00:01:08,729 --> 00:01:18,180
and I didn't really want to use docker

00:01:13,560 --> 00:01:21,030
based software for building for

00:01:18,180 --> 00:01:23,960
deploying thank you very much and yeah

00:01:21,030 --> 00:01:27,360
so this is the story of my journey

00:01:23,960 --> 00:01:29,280
working on making the Nick's work for

00:01:27,360 --> 00:01:32,040
AWS so first a bit about tech they go

00:01:29,280 --> 00:01:35,640
which is the presentation software that

00:01:32,040 --> 00:01:38,880
I'm actually using today so the front

00:01:35,640 --> 00:01:42,360
end is web components and tie scripts

00:01:38,880 --> 00:01:46,259
web components is a new standard in the

00:01:42,360 --> 00:01:48,119
w3c for basically creating new HTML tags

00:01:46,259 --> 00:01:51,600
that have some JavaScript logic in them

00:01:48,119 --> 00:01:53,810
I have no idea what actually works so

00:01:51,600 --> 00:01:57,540
this is not my job my job is the rest

00:01:53,810 --> 00:02:00,119
the backend the backend was entirely

00:01:57,540 --> 00:02:03,290
written in Haskell and for deployment

00:02:00,119 --> 00:02:05,909
and the build we use NYX and actual

00:02:03,290 --> 00:02:08,819
pushing the artifacts studying these

00:02:05,909 --> 00:02:10,800
three servers it's all terraform I never

00:02:08,819 --> 00:02:14,240
quite understood Nick's ops so Nanak

00:02:10,800 --> 00:02:17,450
subs are from AWS were used

00:02:14,240 --> 00:02:19,550
AWS lambda which is basically you push

00:02:17,450 --> 00:02:20,900
some codes and he runs somewhere you

00:02:19,550 --> 00:02:22,550
don't have to create a machine you don't

00:02:20,900 --> 00:02:23,780
have to set anything up it's just your

00:02:22,550 --> 00:02:27,230
code is there and whenever there's a

00:02:23,780 --> 00:02:30,650
request arriving it's being run s3 for

00:02:27,230 --> 00:02:32,930
storing presentations SQS which is a

00:02:30,650 --> 00:02:34,940
queue service from Amazon that we use

00:02:32,930 --> 00:02:35,590
for different lambdas to talk with each

00:02:34,940 --> 00:02:38,570
other

00:02:35,590 --> 00:02:40,190
dynamodb for who actually got rid of

00:02:38,570 --> 00:02:41,810
that but at the beginning we used it and

00:02:40,190 --> 00:02:44,690
the set up index is kind of interesting

00:02:41,810 --> 00:02:46,610
so we said to share it and RDS which is

00:02:44,690 --> 00:02:49,760
the relational database service of

00:02:46,610 --> 00:02:51,320
Amazon so if you wanna check out tech

00:02:49,760 --> 00:02:55,700
they go it's fully open source and

00:02:51,320 --> 00:02:58,310
github take go slash tech they go it's a

00:02:55,700 --> 00:03:00,770
whole bunch of JavaScript so that might

00:02:58,310 --> 00:03:03,260
be a bit scary scary but there's some

00:03:00,770 --> 00:03:04,520
Haskell and some Nix all the code I'm

00:03:03,260 --> 00:03:08,480
going to show during the presentation

00:03:04,520 --> 00:03:11,360
can be found in this directory here so

00:03:08,480 --> 00:03:12,740
feel free to have a look now as I said I

00:03:11,360 --> 00:03:15,200
didn't have much time to prepare this

00:03:12,740 --> 00:03:17,360
talk so I'm missing one slide which is

00:03:15,200 --> 00:03:18,530
the last one and it's actually quite

00:03:17,360 --> 00:03:21,890
convenient because I can show you how

00:03:18,530 --> 00:03:25,940
they Diego works you have a set of

00:03:21,890 --> 00:03:30,760
templates you can select one gonna have

00:03:25,940 --> 00:03:30,760
a last thank you

00:03:41,819 --> 00:03:55,480
and there you go

00:03:44,489 --> 00:03:57,010
so the first part is going to be the

00:03:55,480 --> 00:03:59,200
actual lambda part so I have this

00:03:57,010 --> 00:04:01,629
Haskell code and this Haskell code needs

00:03:59,200 --> 00:04:05,439
to run somewhere in DWS and for this

00:04:01,629 --> 00:04:07,060
lambda is great because lambda is really

00:04:05,439 --> 00:04:08,409
just this abstraction you don't have to

00:04:07,060 --> 00:04:10,569
store the server you don't have to stop

00:04:08,409 --> 00:04:13,120
it the problem is that when you build

00:04:10,569 --> 00:04:16,030
stuff in X most of the time you need a

00:04:13,120 --> 00:04:18,099
NIC store or if you use Nix OS it's very

00:04:16,030 --> 00:04:20,590
simple just copy the closures activate

00:04:18,099 --> 00:04:22,810
and that's it on lambda you have very

00:04:20,590 --> 00:04:25,419
limited size I think the what you pushed

00:04:22,810 --> 00:04:26,889
with WS can only be 50 megabytes so you

00:04:25,419 --> 00:04:28,990
can't fit in there enix store most of

00:04:26,889 --> 00:04:31,570
the time you can't have the GHC closure

00:04:28,990 --> 00:04:33,820
with it so the answer here is to use

00:04:31,570 --> 00:04:35,530
fully static haskell executables where

00:04:33,820 --> 00:04:36,820
it is no dynamic linking at all

00:04:35,530 --> 00:04:41,380
you don't even have an interpreter

00:04:36,820 --> 00:04:43,900
bundled in your executable and this one

00:04:41,380 --> 00:04:46,659
guy here Niklas where is he over there

00:04:43,900 --> 00:04:53,560
big applaud for him who made amazing

00:04:46,659 --> 00:04:57,639
work on getting these to work it's kind

00:04:53,560 --> 00:05:00,039
of a very nice project because it's Nix

00:04:57,639 --> 00:05:01,570
and yet it allows projects to live

00:05:00,039 --> 00:05:06,039
outside of the NIC story so you have

00:05:01,570 --> 00:05:07,599
these standalone artifacts and it's

00:05:06,039 --> 00:05:09,220
using cache shakes so it's really a lot

00:05:07,599 --> 00:05:11,770
of the community coming together in this

00:05:09,220 --> 00:05:14,169
one there's a funding page somewhere you

00:05:11,770 --> 00:05:17,680
can find it on under github projects and

00:05:14,169 --> 00:05:21,250
h2s - static haskell nicks and so feel

00:05:17,680 --> 00:05:23,020
free to chip in there now so we build

00:05:21,250 --> 00:05:24,580
this Haskell executables and we just put

00:05:23,020 --> 00:05:29,289
them in a zip file and a zip file is

00:05:24,580 --> 00:05:32,650
sent to AWS and just works the actual

00:05:29,289 --> 00:05:35,080
upload is done with terraform so how

00:05:32,650 --> 00:05:36,030
does this static Haskell next work in

00:05:35,080 --> 00:05:39,460
practice

00:05:36,030 --> 00:05:42,310
most of you - Haskell here and this is

00:05:39,460 --> 00:05:44,800
using the legacy Haskell platform that

00:05:42,310 --> 00:05:47,289
the new haskÃ³ and I just want to show

00:05:44,800 --> 00:05:48,050
you how it works or how you can make

00:05:47,289 --> 00:05:51,819
your any

00:05:48,050 --> 00:05:54,560
suitable static pretty much any so this

00:05:51,819 --> 00:05:56,810
static Haskell Nix thing is basically

00:05:54,560 --> 00:05:59,270
just where the new classes project is

00:05:56,810 --> 00:06:02,000
and there's a survey directory which you

00:05:59,270 --> 00:06:04,550
can just import passing it your normal

00:06:02,000 --> 00:06:07,759
packages in this case my normal packages

00:06:04,550 --> 00:06:10,720
are just Nicks packages with some

00:06:07,759 --> 00:06:14,300
overlays adding take that goes custom

00:06:10,720 --> 00:06:17,360
packages and then this is crazy because

00:06:14,300 --> 00:06:19,340
line 16 you can see just do survey dots

00:06:17,360 --> 00:06:21,919
packages with static Haskell binaries

00:06:19,340 --> 00:06:23,509
ASCO packages and there you go you have

00:06:21,919 --> 00:06:25,669
your Haskell packages that actually

00:06:23,509 --> 00:06:28,789
compile to static fully static

00:06:25,669 --> 00:06:30,500
executables this is beautiful and then

00:06:28,789 --> 00:06:32,659
when you create your lambda you just

00:06:30,500 --> 00:06:36,759
copy and it's beautiful first is this

00:06:32,659 --> 00:06:39,830
one there are a few bugs right so might

00:06:36,759 --> 00:06:44,539
might break at times just copy the

00:06:39,830 --> 00:06:51,860
executable zip it up and that's it any

00:06:44,539 --> 00:06:53,900
questions on this great and then the

00:06:51,860 --> 00:06:56,389
next question is okay we have some stuff

00:06:53,900 --> 00:07:00,229
that's being built with necks but how do

00:06:56,389 --> 00:07:03,500
we teach terraform to reuse that and on

00:07:00,229 --> 00:07:06,169
the Left there's a word thing so this

00:07:03,500 --> 00:07:07,940
function handler path particles built in

00:07:06,169 --> 00:07:10,460
seek something and then the fact that

00:07:07,940 --> 00:07:13,550
zip the idea is that styrofoam has this

00:07:10,460 --> 00:07:15,919
data external resource or it's not a

00:07:13,550 --> 00:07:17,599
resource actual data where you can tell

00:07:15,919 --> 00:07:19,430
it hater from just run these commands

00:07:17,599 --> 00:07:21,500
and you can expect this command to

00:07:19,430 --> 00:07:25,370
output JSON and then you can use this

00:07:21,500 --> 00:07:27,979
jason inter form as well so line three

00:07:25,370 --> 00:07:30,529
to nine in this part here are just the

00:07:27,979 --> 00:07:34,000
lambda description and the file name is

00:07:30,529 --> 00:07:36,560
the zip file that's expected by AWS and

00:07:34,000 --> 00:07:38,419
here this file name refers to data

00:07:36,560 --> 00:07:42,370
external build function result path

00:07:38,419 --> 00:07:45,529
which is define line twelve to nineteen

00:07:42,370 --> 00:07:47,990
and most of the time in terraform you

00:07:45,529 --> 00:07:51,050
have to say Oh terraform please recreate

00:07:47,990 --> 00:07:53,509
this resource if the file hash has

00:07:51,050 --> 00:07:54,919
changed for instance or if the time of

00:07:53,509 --> 00:07:56,810
the day is later than something like

00:07:54,919 --> 00:07:58,190
that so we have weird ways of making

00:07:56,810 --> 00:08:00,229
sure that terraform notices when your

00:07:58,190 --> 00:08:01,520
code changes it next it's not a problem

00:08:00,229 --> 00:08:03,830
because the interval

00:08:01,520 --> 00:08:07,129
name is gonna change whenever you change

00:08:03,830 --> 00:08:09,500
code so how this work is that we do

00:08:07,129 --> 00:08:12,650
annex evil it's basically gonna evaluate

00:08:09,500 --> 00:08:14,960
something and tell next to actually

00:08:12,650 --> 00:08:17,870
print the output as Jason this is very

00:08:14,960 --> 00:08:19,639
very cool very convenient because you

00:08:17,870 --> 00:08:21,770
don't have to have any other commands

00:08:19,639 --> 00:08:24,710
that you run just call Nicks I'll put

00:08:21,770 --> 00:08:30,229
Jason and that's it the weird part which

00:08:24,710 --> 00:08:31,940
is here so this is just to make sure

00:08:30,229 --> 00:08:36,380
that your function is actually being

00:08:31,940 --> 00:08:39,349
built it's like a deep seek because this

00:08:36,380 --> 00:08:43,579
is just an evil right NYX will try not

00:08:39,349 --> 00:08:45,800
to do any build and this one will give

00:08:43,579 --> 00:08:48,980
you a path back but the path might not

00:08:45,800 --> 00:08:51,020
exist yet so you just do a bit of a

00:08:48,980 --> 00:08:52,700
dirty trick here to make sure it's

00:08:51,020 --> 00:08:58,100
basically import from derivation to make

00:08:52,700 --> 00:09:00,230
sure the thing exists now I'm gonna go

00:08:58,100 --> 00:09:03,380
into the AWS services themselves so

00:09:00,230 --> 00:09:09,380
lambda training the code and now we'll

00:09:03,380 --> 00:09:12,110
talk about s3 and the rest so the talk

00:09:09,380 --> 00:09:15,110
is deploying to AWS but also testing for

00:09:12,110 --> 00:09:17,329
AWS so I think this is the interesting

00:09:15,110 --> 00:09:19,459
part because when you ship some code you

00:09:17,329 --> 00:09:20,720
deploy you don't want to run you don't

00:09:19,459 --> 00:09:23,450
always want to run a staging environment

00:09:20,720 --> 00:09:26,450
where you run your integration tests so

00:09:23,450 --> 00:09:29,060
what we're gonna do here is just for

00:09:26,450 --> 00:09:30,589
each and every a double your service

00:09:29,060 --> 00:09:35,029
we're gonna try and find either an

00:09:30,589 --> 00:09:37,970
open-source alternative or some jars

00:09:35,029 --> 00:09:40,820
provided about AWS some formally we can

00:09:37,970 --> 00:09:44,240
execute the services locally inside our

00:09:40,820 --> 00:09:47,060
next build and then we just redirect the

00:09:44,240 --> 00:09:49,970
URLs during the tests the local servers

00:09:47,060 --> 00:09:51,020
and we'll repeat for the next service so

00:09:49,970 --> 00:09:54,890
we're gonna do this for for a few

00:09:51,020 --> 00:09:56,839
services first one is s3 so you probably

00:09:54,890 --> 00:09:58,360
all came across Mineo who's seen it

00:09:56,839 --> 00:10:01,670
before

00:09:58,360 --> 00:10:04,670
okay so min IO is an open source clone

00:10:01,670 --> 00:10:08,839
of AWS s3 it has its own protocol but it

00:10:04,670 --> 00:10:13,010
also speaks s3 protocol and it's a nice

00:10:08,839 --> 00:10:15,230
project works for my use case which is

00:10:13,010 --> 00:10:17,600
testing I heard people say that I was

00:10:15,230 --> 00:10:19,400
working great if you use it as a full

00:10:17,600 --> 00:10:20,870
replacement production alright some

00:10:19,400 --> 00:10:23,060
people say they wasn't that great if you

00:10:20,870 --> 00:10:25,490
used it a full replacement production so

00:10:23,060 --> 00:10:30,170
it depends a lot but for testing it was

00:10:25,490 --> 00:10:32,480
just fine and how this looks is very

00:10:30,170 --> 00:10:36,230
simple you add Mena yo as an input your

00:10:32,480 --> 00:10:37,880
derivation you set some dummy

00:10:36,230 --> 00:10:40,220
environment variables because it

00:10:37,880 --> 00:10:44,300
requires them and you start the server

00:10:40,220 --> 00:10:46,400
you say localhost 9000 for the port's

00:10:44,300 --> 00:10:48,410
give it a temporary directory we can

00:10:46,400 --> 00:10:50,750
actually store it such artifacts and

00:10:48,410 --> 00:10:53,540
that's it it's running and you run your

00:10:50,750 --> 00:10:56,990
integration tests the last thing you

00:10:53,540 --> 00:10:58,960
need to do is actually tell your code to

00:10:56,990 --> 00:11:03,610
use localhost as opposed the canonical

00:10:58,960 --> 00:11:08,060
AWS URL in the case of haskell i'm using

00:11:03,610 --> 00:11:09,830
amazon co and you can give your own HTTP

00:11:08,060 --> 00:11:13,250
manager to amazon co and just tell it

00:11:09,830 --> 00:11:15,980
hey listen if you see s3 amazon AWS

00:11:13,250 --> 00:11:19,250
accom well just redirect you local one

00:11:15,980 --> 00:11:20,750
disable https and that works make sure

00:11:19,250 --> 00:11:25,400
to only use that during your tests and

00:11:20,750 --> 00:11:31,550
are in production of course next one

00:11:25,400 --> 00:11:33,890
Oh questions about s3 alright next one

00:11:31,550 --> 00:11:35,450
is the simple queue service so this is

00:11:33,890 --> 00:11:43,610
just for sending messages between

00:11:35,450 --> 00:11:46,310
lambdas using AWS it's a it's an AWS

00:11:43,610 --> 00:11:49,360
project works fine in their server but

00:11:46,310 --> 00:11:51,290
for this one they don't provide

00:11:49,360 --> 00:11:53,260
artifacts so it don't provide a way of

00:11:51,290 --> 00:11:56,980
running it locally unless you use docker

00:11:53,260 --> 00:12:00,650
but there is an alternative one which is

00:11:56,980 --> 00:12:04,130
elastic mq very much like mini oh it's

00:12:00,650 --> 00:12:07,280
an open-source clone but it speaks the

00:12:04,130 --> 00:12:12,350
SQS protocol so what we do is that we

00:12:07,280 --> 00:12:15,230
just grabbed the artifacts that they

00:12:12,350 --> 00:12:19,100
really isn't github it's a jar you just

00:12:15,230 --> 00:12:20,780
Java it at it runs so I feel a bit dirty

00:12:19,100 --> 00:12:24,290
inside we're starting Java on my laptop

00:12:20,780 --> 00:12:26,770
but as long as I don't have to start

00:12:24,290 --> 00:12:26,770
docker right

00:12:28,810 --> 00:12:34,399
wash rinse repeat

00:12:31,100 --> 00:12:37,760
just as wait for s3 replace the host

00:12:34,399 --> 00:12:40,540
replace the port disabled as a cell very

00:12:37,760 --> 00:12:40,540
good to go

00:12:42,579 --> 00:12:48,920
dynamodb who's here hazard of it yeah

00:12:46,820 --> 00:12:52,180
for the others it's basically like Redis

00:12:48,920 --> 00:12:58,250
it's a very simple table formats

00:12:52,180 --> 00:13:00,620
database and on this one aw is actually

00:12:58,250 --> 00:13:02,450
pretty cool because they do provide ways

00:13:00,620 --> 00:13:04,640
of running it locally you can download

00:13:02,450 --> 00:13:09,860
the jar which you can just start on your

00:13:04,640 --> 00:13:11,540
laptop by the way all these services

00:13:09,860 --> 00:13:14,899
even though they use network they never

00:13:11,540 --> 00:13:16,190
require anything like sudo or so that

00:13:14,899 --> 00:13:18,550
means that everything in just friend

00:13:16,190 --> 00:13:22,160
derivation is actually very nice to have

00:13:18,550 --> 00:13:24,410
your tests running fully sandbox --tz--

00:13:22,160 --> 00:13:26,959
if someone else new company has runned

00:13:24,410 --> 00:13:28,700
it as before they're gonna be cached in

00:13:26,959 --> 00:13:30,279
your shirt cash if you have one you

00:13:28,700 --> 00:13:35,140
don't even have to run the test yourself

00:13:30,279 --> 00:13:39,500
so you just grab any of those jar balls

00:13:35,140 --> 00:13:42,829
you and packets in your derivation and

00:13:39,500 --> 00:13:46,100
you just say okay Java start you have

00:13:42,829 --> 00:13:51,560
some options to set the ports and after

00:13:46,100 --> 00:13:53,930
that your integration tests and you

00:13:51,560 --> 00:13:57,230
don't forget to tell Amazon to use your

00:13:53,930 --> 00:14:04,070
local version of DynamoDB questions for

00:13:57,230 --> 00:14:05,600
this one great now what about Postgres

00:14:04,070 --> 00:14:07,310
so Postgres is actually interesting

00:14:05,600 --> 00:14:08,390
because the exact same Postgres or

00:14:07,310 --> 00:14:12,620
mostly the same process grass is gonna

00:14:08,390 --> 00:14:14,839
be running on AWS and for many many

00:14:12,620 --> 00:14:16,940
years in my life i thought okay i have

00:14:14,839 --> 00:14:19,010
tests there in Postgres so i means i

00:14:16,940 --> 00:14:21,260
need to install Postgres on my laptop i

00:14:19,010 --> 00:14:24,680
need to install ubuntu or a server

00:14:21,260 --> 00:14:27,920
service in x OS but you really don't

00:14:24,680 --> 00:14:31,910
have to do that and this was a Eureka

00:14:27,920 --> 00:14:33,920
moment for me Postgres can use any kind

00:14:31,910 --> 00:14:35,899
of directory and it runs as a background

00:14:33,920 --> 00:14:36,770
process if you want to but doesn't have

00:14:35,899 --> 00:14:38,959
to be a system-wide

00:14:36,770 --> 00:14:40,100
background process I means that you can

00:14:38,959 --> 00:14:42,230
even start Postgres

00:14:40,100 --> 00:14:43,790
your Knicks gel we can insert progress

00:14:42,230 --> 00:14:45,949
inside the derivation and just kill it

00:14:43,790 --> 00:14:48,829
at the end you don't have to tamper with

00:14:45,949 --> 00:14:50,839
your system with Postgres so just tell

00:14:48,829 --> 00:14:54,769
both grassed hey just initialize the

00:14:50,839 --> 00:14:57,769
database in PG data this is just a name

00:14:54,769 --> 00:15:01,220
I give it you have some configuration to

00:14:57,769 --> 00:15:04,040
set but that's that's about it you tell

00:15:01,220 --> 00:15:06,709
it all right start and from their own

00:15:04,040 --> 00:15:08,449
you have post read started you just make

00:15:06,709 --> 00:15:11,990
sure that before you do anything else

00:15:08,449 --> 00:15:13,069
you give you enough time then you create

00:15:11,990 --> 00:15:17,569
the databases you're going to need three

00:15:13,069 --> 00:15:19,490
tests and that's it run your tests at

00:15:17,569 --> 00:15:22,399
the end you say alright immediate stop

00:15:19,490 --> 00:15:31,040
and no traces left of Postgres in your

00:15:22,399 --> 00:15:32,779
system everything clear the really cool

00:15:31,040 --> 00:15:34,880
part about that is that so all these

00:15:32,779 --> 00:15:36,860
services are provided through an X and

00:15:34,880 --> 00:15:39,829
it can be started and stopped at will

00:15:36,860 --> 00:15:41,930
all these services so far have used

00:15:39,829 --> 00:15:43,399
temporary directories so they're not

00:15:41,930 --> 00:15:48,529
gonna write anywhere else than in your

00:15:43,399 --> 00:15:50,990
temporary directory folder so you can go

00:15:48,529 --> 00:15:53,240
one step further with this is say well

00:15:50,990 --> 00:15:54,529
I'm gonna have a shell wrapper that's

00:15:53,240 --> 00:15:57,079
actually gonna start my services

00:15:54,529 --> 00:15:58,790
whenever I develop locally so if I don't

00:15:57,079 --> 00:16:01,220
want to do a full next bill for my thing

00:15:58,790 --> 00:16:02,720
maybe I have I'm using gh CI for

00:16:01,220 --> 00:16:04,880
development but I still need the

00:16:02,720 --> 00:16:06,680
services to be there so this is

00:16:04,880 --> 00:16:09,019
something I find very very very valuable

00:16:06,680 --> 00:16:11,240
is to have those small shell wrappers

00:16:09,019 --> 00:16:13,490
that gets initiated in a shell hook and

00:16:11,240 --> 00:16:15,470
just creates a few functions that you

00:16:13,490 --> 00:16:18,139
can call from your shell from your

00:16:15,470 --> 00:16:24,130
command line so here I have one Oh is it

00:16:18,139 --> 00:16:24,130
big enough say something

00:16:27,590 --> 00:16:30,590
sorry

00:16:32,270 --> 00:16:42,230
so this one is reloading Postgres very

00:16:36,890 --> 00:16:43,339
simple and this is where the heavy

00:16:42,230 --> 00:16:46,190
lifting happens

00:16:43,339 --> 00:16:49,700
this function is tow services in terms

00:16:46,190 --> 00:16:51,080
of UX if you have co-workers that don't

00:16:49,700 --> 00:16:52,430
worry you snakes or don't know about

00:16:51,080 --> 00:16:54,410
next they don't want to set anything up

00:16:52,430 --> 00:16:56,000
you just tell them we'll enter the next

00:16:54,410 --> 00:16:57,589
show and when you want to start your

00:16:56,000 --> 00:17:01,399
services or when you want to run your

00:16:57,589 --> 00:17:04,220
tests just cool storage services it's

00:17:01,399 --> 00:17:07,459
gonna load Postgres it's gonna store it

00:17:04,220 --> 00:17:09,890
sqs as well it's going to start s3 and

00:17:07,459 --> 00:17:13,870
then anything that happens after that is

00:17:09,890 --> 00:17:13,870
gonna have access to all these services

00:17:17,380 --> 00:17:24,860
and when they're done they just call

00:17:19,910 --> 00:17:27,949
stop services and everyone's gonna thank

00:17:24,860 --> 00:17:30,500
you for this because most company is now

00:17:27,949 --> 00:17:32,240
still do okay you wanna run the tests oh

00:17:30,500 --> 00:17:34,880
you need Postgres just do sudo apt

00:17:32,240 --> 00:17:36,020
install pause grass and with there's no

00:17:34,880 --> 00:17:39,710
need for that people don't even need to

00:17:36,020 --> 00:17:42,429
know that Basra's exists you might want

00:17:39,710 --> 00:17:45,980
to add a few things like a few ripples

00:17:42,429 --> 00:17:47,510
that's set environment variables here we

00:17:45,980 --> 00:17:51,559
actually need our tests to use some

00:17:47,510 --> 00:17:53,690
JavaScript build stuff so set

00:17:51,559 --> 00:17:56,650
environment variable we're just simple

00:17:53,690 --> 00:17:59,360
JavaScript that was built by Nix

00:17:56,650 --> 00:18:00,770
if you forget how you actually did the

00:17:59,360 --> 00:18:04,940
packaging you don't have to worry about

00:18:00,770 --> 00:18:08,030
it I'm using this once a month we

00:18:04,940 --> 00:18:10,040
started working in April I think one day

00:18:08,030 --> 00:18:11,210
I packaged it and now I don't have to be

00:18:10,040 --> 00:18:18,309
too worried about it anymore I actually

00:18:11,210 --> 00:18:21,700
forgot how it how it works and that's it

00:18:18,309 --> 00:18:21,700
thank you for listening

00:18:26,530 --> 00:18:30,890
do you have any questions or experience

00:18:29,240 --> 00:18:35,780
reports that you wanna share

00:18:30,890 --> 00:18:40,580
so are you aware of Nix OS testing suit

00:18:35,780 --> 00:18:42,980
when it spawns qmo machine and you can

00:18:40,580 --> 00:18:46,070
use actually Nix description language to

00:18:42,980 --> 00:18:49,429
start the services inside and if yes why

00:18:46,070 --> 00:18:51,920
didn't you use it so first of all I'm

00:18:49,429 --> 00:18:54,140
not using NYX OS in productions right so

00:18:51,920 --> 00:18:56,240
for an express test means I would have

00:18:54,140 --> 00:18:59,090
to set to create a new unique Swiss

00:18:56,240 --> 00:19:01,520
module with my codes and then ship that

00:18:59,090 --> 00:19:02,840
into a full mix build the other problem

00:19:01,520 --> 00:19:05,330
is that Nick stress tests only run on

00:19:02,840 --> 00:19:07,850
Linux as far as I know they could run on

00:19:05,330 --> 00:19:10,309
Darwin for instance but no so I'm using

00:19:07,850 --> 00:19:12,290
Linux but the friend I'm working with on

00:19:10,309 --> 00:19:14,900
this one uses Darwin I wasn't really an

00:19:12,290 --> 00:19:17,090
option and also it doesn't allow you to

00:19:14,900 --> 00:19:19,670
do the local development right if I use

00:19:17,090 --> 00:19:22,400
GHC I to test my code I also have unit

00:19:19,670 --> 00:19:22,850
tests unit tests that run again in

00:19:22,400 --> 00:19:25,460
Postgres

00:19:22,850 --> 00:19:28,610
so in that case that would mean okay I

00:19:25,460 --> 00:19:30,170
mean gee I I make a change then I close

00:19:28,610 --> 00:19:32,540
the HTR I do

00:19:30,170 --> 00:19:34,400
Nick's build then it has to build

00:19:32,540 --> 00:19:36,620
everything actually rebuilt from scratch

00:19:34,400 --> 00:19:39,610
the whole library in the Lascaux library

00:19:36,620 --> 00:19:41,690
and then start the tests it would take

00:19:39,610 --> 00:19:44,750
probably a minute for everything to

00:19:41,690 --> 00:19:45,950
happen whereas if I just do if I just

00:19:44,750 --> 00:19:47,929
start Postgres in the background

00:19:45,950 --> 00:19:51,260
anything like that I just do common

00:19:47,929 --> 00:19:52,070
error reload ght I main runs the test

00:19:51,260 --> 00:19:55,750
and I'm good

00:19:52,070 --> 00:19:58,750
iteration cycle is about five seconds

00:19:55,750 --> 00:19:58,750
yeah

00:20:02,759 --> 00:20:11,259
did you look at stare a test at terror

00:20:07,119 --> 00:20:15,279
test Tara tests no what is it it's a

00:20:11,259 --> 00:20:18,789
framework wrapped around Tara forum to

00:20:15,279 --> 00:20:22,419
do integration testing so it spins up

00:20:18,789 --> 00:20:24,369
components runs a test cycle and

00:20:22,419 --> 00:20:27,460
destroys those components it's a little

00:20:24,369 --> 00:20:33,879
bit like inspecting server spec but by

00:20:27,460 --> 00:20:35,320
tweed support for terraform very nice so

00:20:33,879 --> 00:20:38,379
easy this is also something that takes

00:20:35,320 --> 00:20:42,429
some times to run right but this is I

00:20:38,379 --> 00:20:48,909
didn't know about this is great some

00:20:42,429 --> 00:20:50,830
overlap thank you very much I also want

00:20:48,909 --> 00:20:53,139
to make another tooling suggestion which

00:20:50,830 --> 00:20:55,089
is a terror nix I don't know if the Tara

00:20:53,139 --> 00:20:58,419
Nix author is here today but it's a

00:20:55,089 --> 00:21:02,169
really cool way to write terraform the

00:20:58,419 --> 00:21:03,609
syntax in Nix instead and it does away

00:21:02,169 --> 00:21:05,229
with all the horrors you have to go

00:21:03,609 --> 00:21:07,960
through when you realize that the

00:21:05,229 --> 00:21:09,489
terraform language itself can do all

00:21:07,960 --> 00:21:11,830
kinds of stuff you can write it in X

00:21:09,489 --> 00:21:13,149
instead and I find it very convenient so

00:21:11,830 --> 00:21:18,339
that might also be something that's

00:21:13,149 --> 00:21:20,440
useful yeah although if the goal is read

00:21:18,339 --> 00:21:32,409
to hide Nix from your co-workers or I

00:21:20,440 --> 00:21:36,149
don't hate you this is a bad move I have

00:21:32,409 --> 00:21:39,039
a question do developers use these

00:21:36,149 --> 00:21:42,969
services started from Nick shell for

00:21:39,039 --> 00:21:47,080
local development only for test running

00:21:42,969 --> 00:21:49,119
you mean these yes yeah so so in this

00:21:47,080 --> 00:21:50,859
project and the only Haskell developer

00:21:49,119 --> 00:21:54,639
so I'm the only one using the repo

00:21:50,859 --> 00:21:58,349
things for instance but whenever I work

00:21:54,639 --> 00:22:01,599
at a company basically whenever I work I

00:21:58,349 --> 00:22:03,219
I write these and people like using them

00:22:01,599 --> 00:22:06,009
because it makes their life much much

00:22:03,219 --> 00:22:08,769
simpler okay I have questions and what

00:22:06,009 --> 00:22:13,239
do you do with front-end is it started

00:22:08,769 --> 00:22:15,070
like this or do the developers don't run

00:22:13,239 --> 00:22:18,280
the front-end locally

00:22:15,070 --> 00:22:21,700
I don't do front-end I let them deal

00:22:18,280 --> 00:22:23,380
with their mess so no I don't know they

00:22:21,700 --> 00:22:26,230
use everything except front end right

00:22:23,380 --> 00:22:28,810
yeah exactly so you use webpack in

00:22:26,230 --> 00:22:30,880
whatever to use so I have no idea how it

00:22:28,810 --> 00:22:33,180
works so I'm not even attempting at

00:22:30,880 --> 00:22:39,400
helping at all

00:22:33,180 --> 00:22:41,560
sorry oh no that's not true

00:22:39,400 --> 00:22:42,910
no no I've done it before for for a

00:22:41,560 --> 00:22:44,890
different company but it was it was very

00:22:42,910 --> 00:22:47,230
tricky to get right because most of the

00:22:44,890 --> 00:22:49,660
time their editors are very tightly

00:22:47,230 --> 00:22:51,340
integrated with the build system and so

00:22:49,660 --> 00:22:54,340
it just breaks everything for their

00:22:51,340 --> 00:23:00,970
editors which is a common theme in many

00:22:54,340 --> 00:23:02,290
languages actually all right thank you

00:23:00,970 --> 00:23:07,290
very much for listening those did you

00:23:02,290 --> 00:23:07,290
find me idea oh no clap great

00:23:08,200 --> 00:23:11,900
[Music]

00:23:08,490 --> 00:23:11,900

YouTube URL: https://www.youtube.com/watch?v=lHtIvsDnH0Q


