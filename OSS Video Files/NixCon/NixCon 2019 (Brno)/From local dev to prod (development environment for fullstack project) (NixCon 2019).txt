Title: From local dev to prod (development environment for fullstack project) (NixCon 2019)
Publication date: 2019-12-14
Playlist: NixCon 2019 (Brno)
Description: 
	Case Study: Setup description of fullstack application (django, postgresql, vue.js, reactjs, react-native, integration tests). The talk is about how this setup is constructed and used to support day to day operations with local application setup for development, full testing environment and staging and production environment.
Captions: 
	00:00:03,409 --> 00:00:12,320
we have tomash talk talk to us about

00:00:09,130 --> 00:00:16,180
from local dev to production development

00:00:12,320 --> 00:00:16,180
environment for full-stack project

00:00:16,449 --> 00:00:26,839
hello hello Cheers so I was going to

00:00:24,800 --> 00:00:29,869
build a small project with a friend is a

00:00:26,839 --> 00:00:34,880
transaction platform for selling and

00:00:29,869 --> 00:00:37,160
buying houses there are some constraints

00:00:34,880 --> 00:00:40,310
and the requirements we need that chat

00:00:37,160 --> 00:00:42,200
we need file upload we needed actually

00:00:40,310 --> 00:00:43,280
quite a few chats the platform is a

00:00:42,200 --> 00:00:48,620
little complicated from the

00:00:43,280 --> 00:00:53,030
communication perspective oh crap

00:00:48,620 --> 00:00:55,250
and this is basically some some of the

00:00:53,030 --> 00:00:58,960
requirements like the main ones that we

00:00:55,250 --> 00:01:01,040
need to integrate so as you see the

00:00:58,960 --> 00:01:08,090
notifications and shot is probably the

00:01:01,040 --> 00:01:11,420
most important one so a little context

00:01:08,090 --> 00:01:13,700
there is no much users there the traffic

00:01:11,420 --> 00:01:17,630
is very low we rely only on

00:01:13,700 --> 00:01:19,490
notifications and the idea is that we

00:01:17,630 --> 00:01:29,600
need to deliver a notification fast and

00:01:19,490 --> 00:01:32,509
it must be reliable yeah so basically we

00:01:29,600 --> 00:01:38,840
cannot lose people so the reliability is

00:01:32,509 --> 00:01:42,880
is the key this is the bootstrap project

00:01:38,840 --> 00:01:46,279
so we don't have any money to back it up

00:01:42,880 --> 00:01:49,999
and we need to focus basically on

00:01:46,279 --> 00:01:52,789
reliability and on product itself that's

00:01:49,999 --> 00:01:59,270
why I decided to use Nix for building

00:01:52,789 --> 00:02:01,099
that so of course right and this is

00:01:59,270 --> 00:02:03,020
basically case study how I use NYX in

00:02:01,099 --> 00:02:06,619
this specific project with this specific

00:02:03,020 --> 00:02:10,099
set of requirements so nothing really

00:02:06,619 --> 00:02:15,050
fancy here's my contact details if

00:02:10,099 --> 00:02:16,420
anyone want to talk after I will shoot

00:02:15,050 --> 00:02:19,660
it later as well

00:02:16,420 --> 00:02:24,880
so yeah I'm repeating myself all the

00:02:19,660 --> 00:02:26,200
time but reliability is the key so to

00:02:24,880 --> 00:02:28,030
achieve that I thought maybe it would be

00:02:26,200 --> 00:02:31,630
really really nice if I have all the

00:02:28,030 --> 00:02:36,130
environments the exactly the same it

00:02:31,630 --> 00:02:38,320
will save me a time to test on other

00:02:36,130 --> 00:02:44,320
environments because I will have as much

00:02:38,320 --> 00:02:47,440
as as I can the same and that was the

00:02:44,320 --> 00:02:51,489
point that I thought it will be I will

00:02:47,440 --> 00:02:54,670
achieve which is kind of true the last

00:02:51,489 --> 00:02:59,230
one of course is not the good thing it's

00:02:54,670 --> 00:03:04,860
kind of what happened and I was kind of

00:02:59,230 --> 00:03:07,420
okay with it so because I produced this

00:03:04,860 --> 00:03:10,180
let's say configuration to have all the

00:03:07,420 --> 00:03:13,660
environments the same that was less code

00:03:10,180 --> 00:03:17,890
less less different parts less moving

00:03:13,660 --> 00:03:18,519
parts and it was kind of working for a

00:03:17,890 --> 00:03:23,560
long time

00:03:18,519 --> 00:03:27,180
I will tell more about later so what are

00:03:23,560 --> 00:03:27,180
the building blocks of the projects so

00:03:27,209 --> 00:03:32,320
with that basically Django PI test for

00:03:30,610 --> 00:03:35,410
integration test do we have like a lot

00:03:32,320 --> 00:03:40,660
of Python users here okay there are a

00:03:35,410 --> 00:03:43,360
few at the beginning I use view GIS and

00:03:40,660 --> 00:03:45,130
then switch to react I will talk about

00:03:43,360 --> 00:03:48,670
this later as well

00:03:45,130 --> 00:03:50,500
so the folder structure is like dump

00:03:48,670 --> 00:03:53,530
simple right

00:03:50,500 --> 00:03:55,959
we have fixed pinned packages for ya

00:03:53,530 --> 00:03:58,840
NIC's packages I have packages and

00:03:55,959 --> 00:04:02,680
services which is obvious and the dev

00:03:58,840 --> 00:04:09,610
machine I have make file which simplify

00:04:02,680 --> 00:04:10,510
my workflow the services is also that

00:04:09,610 --> 00:04:13,120
simple

00:04:10,510 --> 00:04:18,459
there are basically Nyx's modules that I

00:04:13,120 --> 00:04:21,609
integrate and that's it with packages we

00:04:18,459 --> 00:04:24,220
have a little more because to achieve

00:04:21,609 --> 00:04:27,990
reliability I need to install like quite

00:04:24,220 --> 00:04:30,130
a few more tools like open Jagger

00:04:27,990 --> 00:04:32,290
with Cassandra

00:04:30,130 --> 00:04:35,020
as a back-end plus plus some other stuff

00:04:32,290 --> 00:04:38,470
like Prometheus so there is a few more

00:04:35,020 --> 00:04:40,600
stuff here okay

00:04:38,470 --> 00:04:44,080
that's how it looks like from the

00:04:40,600 --> 00:04:47,530
operational perspective the gray ones

00:04:44,080 --> 00:04:49,950
are production ones they are deployed to

00:04:47,530 --> 00:04:53,590
every environment the red ones are also

00:04:49,950 --> 00:04:56,470
production environment and the yellow

00:04:53,590 --> 00:05:00,370
ones are only a local development

00:04:56,470 --> 00:05:03,940
environment so I said I would like to

00:05:00,370 --> 00:05:06,190
have as much as possible the same

00:05:03,940 --> 00:05:07,360
configuration which is true and the

00:05:06,190 --> 00:05:08,710
yellow parts are basically the

00:05:07,360 --> 00:05:11,190
difference between the development

00:05:08,710 --> 00:05:14,260
environment and staging and production I

00:05:11,190 --> 00:05:17,550
have just a feature flag to enable them

00:05:14,260 --> 00:05:23,950
and the red ones are basically behind

00:05:17,550 --> 00:05:25,570
some password of course for local

00:05:23,950 --> 00:05:31,000
development environment I put everything

00:05:25,570 --> 00:05:33,910
into VM I use qm q mo and that's my flow

00:05:31,000 --> 00:05:37,300
so coding deploy running test or

00:05:33,910 --> 00:05:38,530
manually clicking in the browser this is

00:05:37,300 --> 00:05:41,650
kind of cool

00:05:38,530 --> 00:05:45,810
but also it's it's slow right each time

00:05:41,650 --> 00:05:48,850
i do deployment i need to rebuild nicks

00:05:45,810 --> 00:05:51,010
derivation for the system and deploy

00:05:48,850 --> 00:05:55,170
that into the VM which is quite fast but

00:05:51,010 --> 00:06:00,790
is it still few seconds the production

00:05:55,170 --> 00:06:02,260
deployment is very similar on the left

00:06:00,790 --> 00:06:04,300
you see the Machine NICs which is the

00:06:02,260 --> 00:06:06,730
description of whole environment how to

00:06:04,300 --> 00:06:08,440
build django service how to build

00:06:06,730 --> 00:06:12,250
permeate is how to build database

00:06:08,440 --> 00:06:14,770
whatever and then I have two small let's

00:06:12,250 --> 00:06:16,420
call it shims local development or

00:06:14,770 --> 00:06:19,990
machine description machine description

00:06:16,420 --> 00:06:23,320
probably should be called prod which

00:06:19,990 --> 00:06:26,560
configures the machine and enables the

00:06:23,320 --> 00:06:29,050
global flag to enable or disable the

00:06:26,560 --> 00:06:32,890
local development tools and for each

00:06:29,050 --> 00:06:35,950
deployment I have I have different tool

00:06:32,890 --> 00:06:39,190
so for production I use Nick's ops and

00:06:35,950 --> 00:06:41,110
for local development I switch to my own

00:06:39,190 --> 00:06:43,110
tool which I will talk later in the

00:06:41,110 --> 00:06:45,390
lightning talk

00:06:43,110 --> 00:06:50,210
and probably will transit and the other

00:06:45,390 --> 00:06:50,210
tool as well so right now it's two tools

00:06:50,450 --> 00:06:56,340
so if I want to work locally I just do

00:06:53,520 --> 00:07:01,020
make V and F it will build me the qmo

00:06:56,340 --> 00:07:03,590
and this is basically on this diagram we

00:07:01,020 --> 00:07:06,180
have local development Nick's which is

00:07:03,590 --> 00:07:10,410
configuring the machine Nicks and this

00:07:06,180 --> 00:07:12,720
is this file so if I need I have some

00:07:10,410 --> 00:07:17,190
debug flag that I'm taking from the

00:07:12,720 --> 00:07:22,260
environment and then I configure the

00:07:17,190 --> 00:07:29,220
machine and as you see there is not much

00:07:22,260 --> 00:07:30,780
few options and then we are good so here

00:07:29,220 --> 00:07:33,450
is basically the deployment on

00:07:30,780 --> 00:07:39,890
production it's almost the same it used

00:07:33,450 --> 00:07:43,140
the same four options and production is

00:07:39,890 --> 00:07:45,990
is using Nick's ops and this is how I

00:07:43,140 --> 00:07:49,140
import the module as you see I'm

00:07:45,990 --> 00:07:52,710
providing Nick's path to to the project

00:07:49,140 --> 00:07:56,580
name so I can kind of use absolute path

00:07:52,710 --> 00:07:58,470
to import the module so I have exactly

00:07:56,580 --> 00:08:06,570
the same machine Nick's description on

00:07:58,470 --> 00:08:09,710
local development and on production the

00:08:06,570 --> 00:08:13,520
one cool part that I could achieve with

00:08:09,710 --> 00:08:18,780
with this description was generated

00:08:13,520 --> 00:08:21,120
credentials almost all credentials - I

00:08:18,780 --> 00:08:23,460
think all credentials that are not for

00:08:21,120 --> 00:08:26,550
external services are auto-generated on

00:08:23,460 --> 00:08:29,760
the machine so I really don't care by

00:08:26,550 --> 00:08:31,650
moving the same description or or

00:08:29,760 --> 00:08:34,740
credentials from one place to another

00:08:31,650 --> 00:08:37,320
each time the machine boots up the

00:08:34,740 --> 00:08:39,960
credentials are regenerated and services

00:08:37,320 --> 00:08:43,740
are restarted so this is pretty cool of

00:08:39,960 --> 00:08:47,280
course it doesn't scale it works well so

00:08:43,740 --> 00:08:50,520
far we didn't have any crap on

00:08:47,280 --> 00:08:53,100
production and it's so slow to iterate

00:08:50,520 --> 00:08:55,610
at some point it start it started to be

00:08:53,100 --> 00:08:58,270
pain and this is how the machine

00:08:55,610 --> 00:09:01,930
description looks like

00:08:58,270 --> 00:09:04,750
this is some let's say global

00:09:01,930 --> 00:09:08,350
configuration options so probably the

00:09:04,750 --> 00:09:12,700
most important are three first right to

00:09:08,350 --> 00:09:15,960
enable like crazy stuff here is the

00:09:12,700 --> 00:09:18,880
configuration of this is the same file

00:09:15,960 --> 00:09:21,010
machine Nix description this is if I

00:09:18,880 --> 00:09:25,980
want local development this is how I

00:09:21,010 --> 00:09:28,690
configure it I have a bunch of crap that

00:09:25,980 --> 00:09:30,090
can help me with local development and

00:09:28,690 --> 00:09:32,710
make life easier

00:09:30,090 --> 00:09:34,510
which is opening the firewall changing

00:09:32,710 --> 00:09:37,900
the password of the route and this kind

00:09:34,510 --> 00:09:42,970
of crap this is how I generate

00:09:37,900 --> 00:09:49,060
credentials on the machine it's pretty

00:09:42,970 --> 00:09:51,430
fun but it works this how I configure

00:09:49,060 --> 00:09:53,590
credentials also in next module I never

00:09:51,430 --> 00:09:57,700
passed the credentials I think we had

00:09:53,590 --> 00:09:59,710
some discussion over github we are

00:09:57,700 --> 00:10:01,570
slowly changing I think some of the

00:09:59,710 --> 00:10:05,100
packages to this model as well so we

00:10:01,570 --> 00:10:10,600
don't pass password which will land in

00:10:05,100 --> 00:10:14,770
Nick's store here's the same for Django

00:10:10,600 --> 00:10:20,170
module and and this is the tool that

00:10:14,770 --> 00:10:22,120
helps me with local development which is

00:10:20,170 --> 00:10:30,720
pg web it's basically a front end for

00:10:22,120 --> 00:10:33,670
Postgres so yeah so what we have here

00:10:30,720 --> 00:10:35,980
python building is pretty fast nothing

00:10:33,670 --> 00:10:39,520
magic copying the files stylus I'm

00:10:35,980 --> 00:10:41,770
building with a CSS which takes like 10

00:10:39,520 --> 00:10:46,920
seconds but I don't change that very

00:10:41,770 --> 00:10:46,920
often I have pretty it's pretty stable

00:10:47,040 --> 00:10:52,090
to minimize the build time at the

00:10:49,540 --> 00:10:56,620
beginning I really wanted to avoid web

00:10:52,090 --> 00:10:59,590
pack anybody has any relation to a pack

00:10:56,620 --> 00:11:01,620
build any web package yeah I really want

00:10:59,590 --> 00:11:05,080
to avoid this as much as I could so I

00:11:01,620 --> 00:11:08,020
just linked view GIS into the project

00:11:05,080 --> 00:11:09,960
and try to not compile anything just put

00:11:08,020 --> 00:11:14,399
the pure JavaScript there and

00:11:09,960 --> 00:11:15,839
living with which gave me the time ten

00:11:14,399 --> 00:11:17,460
seconds for the local build and

00:11:15,839 --> 00:11:20,700
deployment and this is basically the

00:11:17,460 --> 00:11:27,540
iteration time which was quite fine for

00:11:20,700 --> 00:11:33,110
me for for a long time few lessons I

00:11:27,540 --> 00:11:36,480
learned from from building this this

00:11:33,110 --> 00:11:40,110
machine Nick's stuff at the beginning I

00:11:36,480 --> 00:11:41,940
have put this development environment

00:11:40,110 --> 00:11:44,279
switch into different modules and I was

00:11:41,940 --> 00:11:46,740
passing this flag down and this was

00:11:44,279 --> 00:11:48,360
really terrible to maintain in the long

00:11:46,740 --> 00:11:50,000
term so at the beginning when I was

00:11:48,360 --> 00:11:52,560
writing it it was really great I

00:11:50,000 --> 00:11:54,990
remembered when everything is so it was

00:11:52,560 --> 00:11:56,820
cool but after two months I started

00:11:54,990 --> 00:11:58,220
forgetting that I have to enable this

00:11:56,820 --> 00:12:01,709
flag there and there and there

00:11:58,220 --> 00:12:03,450
so I really recommend to switching to

00:12:01,709 --> 00:12:06,779
the simpler model which you have your

00:12:03,450 --> 00:12:08,760
packages at the top and you are

00:12:06,779 --> 00:12:14,940
configuring development tools also at

00:12:08,760 --> 00:12:16,790
the top level so if you consider this

00:12:14,940 --> 00:12:19,500
one

00:12:16,790 --> 00:12:21,420
what am what I was talking about is like

00:12:19,500 --> 00:12:24,810
for example PostgreSQL in it or

00:12:21,420 --> 00:12:28,850
PostgreSQL where half grey half yellow

00:12:24,810 --> 00:12:32,400
right and what I simplified was removing

00:12:28,850 --> 00:12:35,339
those death from the packages itself

00:12:32,400 --> 00:12:37,890
from the modules itself and basically

00:12:35,339 --> 00:12:43,320
put any configuration at the top level

00:12:37,890 --> 00:12:46,830
if possible so as we can see those are

00:12:43,320 --> 00:12:51,270
my commands there is fuel called local

00:12:46,830 --> 00:12:54,870
ones they were added later because react

00:12:51,270 --> 00:12:58,230
came vue.js is was not that great for me

00:12:54,870 --> 00:13:00,060
at the end I think

00:12:58,230 --> 00:13:03,450
react is a little more flexible so I

00:13:00,060 --> 00:13:09,839
started doing a little react as well and

00:13:03,450 --> 00:13:13,310
then I had to do web pack and also the

00:13:09,839 --> 00:13:17,220
iteration time for web pack is not that

00:13:13,310 --> 00:13:20,700
not that fast like 10 seconds is not

00:13:17,220 --> 00:13:22,110
fast but with web pack is even a lot

00:13:20,700 --> 00:13:25,630
worse

00:13:22,110 --> 00:13:28,870
especially because I use I try to type

00:13:25,630 --> 00:13:31,600
script there and this basically takes

00:13:28,870 --> 00:13:35,200
time to compile especially if you miss

00:13:31,600 --> 00:13:38,890
configure it like me so yeah it was

00:13:35,200 --> 00:13:41,110
maybe 30 or 40 seconds to do the

00:13:38,890 --> 00:13:46,180
iteration so then I thought okay and

00:13:41,110 --> 00:13:49,510
let's try to maybe break a rule or at

00:13:46,180 --> 00:13:52,930
least modify it we know that

00:13:49,510 --> 00:13:55,180
requirements change like this stuff it's

00:13:52,930 --> 00:13:57,850
always changed it's always been moved so

00:13:55,180 --> 00:13:59,650
we have to just leave it with it so

00:13:57,850 --> 00:14:04,150
series engineering ahead we need to do

00:13:59,650 --> 00:14:06,760
apply some some stuff so let's put some

00:14:04,150 --> 00:14:09,370
services outside a lot of those tools

00:14:06,760 --> 00:14:11,280
already have like development servers

00:14:09,370 --> 00:14:14,500
for you right probably you know it

00:14:11,280 --> 00:14:17,410
Django has its own server which does a

00:14:14,500 --> 00:14:24,700
reload a web part does a reload hot

00:14:17,410 --> 00:14:28,810
reload so so yeah we are moving stuff

00:14:24,700 --> 00:14:34,780
outside so we have jungle we have web

00:14:28,810 --> 00:14:36,640
pack PI test is a little strange because

00:14:34,780 --> 00:14:39,370
it's not a service potentially it can

00:14:36,640 --> 00:14:43,390
have a voucher but let's address it

00:14:39,370 --> 00:14:45,520
later so if we put out of course our

00:14:43,390 --> 00:14:48,820
services outside we need to have

00:14:45,520 --> 00:14:50,440
addresses for the VM and stuff and also

00:14:48,820 --> 00:14:55,060
credentials to the databases which are

00:14:50,440 --> 00:14:58,330
inside the VM so for front-end we don't

00:14:55,060 --> 00:15:01,480
need that so it's only like run the

00:14:58,330 --> 00:15:09,490
server web pack hot reload server and

00:15:01,480 --> 00:15:13,690
that's it which is that and for pi test

00:15:09,490 --> 00:15:17,320
or django I have this small script fetch

00:15:13,690 --> 00:15:21,610
details which basically goes cut all the

00:15:17,320 --> 00:15:23,650
run Keys environments so I have them

00:15:21,610 --> 00:15:25,300
locally outside of the VM and then I can

00:15:23,650 --> 00:15:29,200
use them to run the test or run the

00:15:25,300 --> 00:15:29,620
jungle yeah that's that's how it looks

00:15:29,200 --> 00:15:32,740
like

00:15:29,620 --> 00:15:35,620
I just SSH into the machine that's

00:15:32,740 --> 00:15:40,120
basically line 15 it is just SSH to

00:15:35,620 --> 00:15:42,900
machine get the IP address and dump all

00:15:40,120 --> 00:15:46,770
the credentials

00:15:42,900 --> 00:15:49,660
okay so we have jungle running with

00:15:46,770 --> 00:15:51,940
local Knicks let's call it shell is not

00:15:49,660 --> 00:15:57,430
exactly shell but Nick's environment

00:15:51,940 --> 00:16:03,790
locally we have react working as I said

00:15:57,430 --> 00:16:05,860
Tess has no no need for server but it

00:16:03,790 --> 00:16:10,450
could be it could be faster like each

00:16:05,860 --> 00:16:12,850
time I run the test I thought okay if I

00:16:10,450 --> 00:16:15,670
have reload for Django if I have reload

00:16:12,850 --> 00:16:17,290
for web pack they are pretty fast much

00:16:15,670 --> 00:16:19,000
faster than ten seconds and now the

00:16:17,290 --> 00:16:20,160
tests are slowing part so I thought okay

00:16:19,000 --> 00:16:24,700
let's optimize that one

00:16:20,160 --> 00:16:30,070
so the original Nix built for test is

00:16:24,700 --> 00:16:32,770
like two minutes something and then each

00:16:30,070 --> 00:16:35,830
time I just want to enter the

00:16:32,770 --> 00:16:37,330
environments it's almost two seconds of

00:16:35,830 --> 00:16:39,130
course if you compare ten seconds to two

00:16:37,330 --> 00:16:45,790
seconds is a lot better but I was still

00:16:39,130 --> 00:16:47,589
like maybe we can make it faster oh and

00:16:45,790 --> 00:16:50,140
there is also fetch credentials from the

00:16:47,589 --> 00:16:51,820
VM part which is SS aging into the VM

00:16:50,140 --> 00:16:56,110
and getting stuff which is another five

00:16:51,820 --> 00:16:58,630
seconds so I optimized of course fetch

00:16:56,110 --> 00:17:03,130
credits from the VM not sure if I had

00:16:58,630 --> 00:17:06,160
that here yeah probably in line seven I

00:17:03,130 --> 00:17:07,540
have stats when I compare if I did this

00:17:06,160 --> 00:17:10,059
in last ten minutes

00:17:07,540 --> 00:17:12,939
I just cash it into the file and not

00:17:10,059 --> 00:17:15,189
fetching it anymore so I wanted to do

00:17:12,939 --> 00:17:19,329
something like that with the NICS

00:17:15,189 --> 00:17:23,230
environment so I created a small bash

00:17:19,329 --> 00:17:25,720
script and it works pretty well

00:17:23,230 --> 00:17:29,670
it went from two or whatever seconds to

00:17:25,720 --> 00:17:34,270
like almost instant and what it does is

00:17:29,670 --> 00:17:35,679
it does Nick shell on specific in my

00:17:34,270 --> 00:17:38,620
case I think all the files are called

00:17:35,679 --> 00:17:40,900
default Nick's so it it it does Nick's

00:17:38,620 --> 00:17:44,140
shell so building all the environments

00:17:40,900 --> 00:17:46,090
for you and basically as you see I run

00:17:44,140 --> 00:17:48,500
export which is exporting all leverage

00:17:46,090 --> 00:17:50,720
all the environments from the

00:17:48,500 --> 00:17:54,500
she'll and I'm cashing that into the

00:17:50,720 --> 00:17:59,210
file the crap is that if anything

00:17:54,500 --> 00:18:03,110
changes in dependencies of that default

00:17:59,210 --> 00:18:04,640
Nix you wouldn't rebuild that so that's

00:18:03,110 --> 00:18:09,890
kind of crap and you have to remember

00:18:04,640 --> 00:18:12,740
that or in my case I just cash it for

00:18:09,890 --> 00:18:15,020
ten minutes so if I either eight fast

00:18:12,740 --> 00:18:19,190
it's really fast

00:18:15,020 --> 00:18:21,500
and if I break something I don't have to

00:18:19,190 --> 00:18:26,830
remember if I broke something after ten

00:18:21,500 --> 00:18:29,690
minutes it will rebuild anyway mm-hmm I

00:18:26,830 --> 00:18:32,870
also started mobile application for that

00:18:29,690 --> 00:18:34,490
I use react native at the beginning I

00:18:32,870 --> 00:18:37,280
spend a lot of time trying to figure it

00:18:34,490 --> 00:18:39,980
out the ecosystem for for that one I

00:18:37,280 --> 00:18:43,670
think there is one person I forgot the

00:18:39,980 --> 00:18:46,130
name which built quite a good ecosystem

00:18:43,670 --> 00:18:48,740
around that but I couldn't make it

00:18:46,130 --> 00:18:54,920
working with that specific react version

00:18:48,740 --> 00:18:58,310
I spent a few days and then gave up so

00:18:54,920 --> 00:19:00,620
what I did instead is because react

00:18:58,310 --> 00:19:03,080
native has also hots reload and you can

00:19:00,620 --> 00:19:08,330
develop your application in kind of a

00:19:03,080 --> 00:19:10,970
fast manner I just try to make it

00:19:08,330 --> 00:19:15,170
reproducible I couldn't make it working

00:19:10,970 --> 00:19:17,840
on pure Nix environment I don't know why

00:19:15,170 --> 00:19:20,660
I spend like two days and gave up and

00:19:17,840 --> 00:19:23,200
said okay let's use docker for for this

00:19:20,660 --> 00:19:26,150
part and what I did I just override

00:19:23,200 --> 00:19:31,310
their internal tool inside the directory

00:19:26,150 --> 00:19:35,210
to start my react native server inside

00:19:31,310 --> 00:19:39,250
the docker which is this so if I run

00:19:35,210 --> 00:19:42,860
react native it runs Gradle W and then

00:19:39,250 --> 00:19:45,020
it builds stuff in docker mounts local

00:19:42,860 --> 00:19:48,650
directory so there is a code included

00:19:45,020 --> 00:19:49,220
and stuff and I think that would be that

00:19:48,650 --> 00:19:51,460
would be it

00:19:49,220 --> 00:19:51,460
thank you

00:19:51,700 --> 00:19:59,150
[Applause]

00:20:04,840 --> 00:20:10,690
I where'd you pin Python packages sorry

00:20:08,769 --> 00:20:13,330
where do you pin Python packages you

00:20:10,690 --> 00:20:14,740
mentioned that you're using jungle you

00:20:13,330 --> 00:20:21,519
know you have pattern libraries

00:20:14,740 --> 00:20:29,499
requirements okay mmm so I use PI P I

00:20:21,519 --> 00:20:31,029
tunics sorry is that what I'm yeah so

00:20:29,499 --> 00:20:34,120
you're probably using I don't like

00:20:31,029 --> 00:20:36,129
requests or other libraries yeah you

00:20:34,120 --> 00:20:38,409
need this but I mean you probably need

00:20:36,129 --> 00:20:41,259
to specify which version or do you just

00:20:38,409 --> 00:20:46,840
import lasers for sure sure sure so I'm

00:20:41,259 --> 00:20:50,379
not using mix packages for for local

00:20:46,840 --> 00:20:53,889
libraries or local for building the

00:20:50,379 --> 00:20:57,970
product I try to specify as much as I

00:20:53,889 --> 00:21:00,340
can on my site which is both for view

00:20:57,970 --> 00:21:02,950
GIS project for react project and for

00:21:00,340 --> 00:21:05,429
Python I use my definition of packages

00:21:02,950 --> 00:21:07,779
all of them and of course I use the

00:21:05,429 --> 00:21:10,480
tools that are generating that for

00:21:07,779 --> 00:21:16,049
Python you use pi pi/2 nix did you know

00:21:10,480 --> 00:21:21,610
that okay and for for javascript i use

00:21:16,049 --> 00:21:23,559
what it was no tunics i think which

00:21:21,610 --> 00:21:25,570
generated me all the package

00:21:23,559 --> 00:21:28,480
descriptions and then i import that and

00:21:25,570 --> 00:21:32,340
i do I just do make derivation I don't

00:21:28,480 --> 00:21:32,340
build pure Python package

00:21:38,210 --> 00:21:47,059
any more questions don't be shy thank

00:21:44,970 --> 00:21:47,059
you

00:21:50,480 --> 00:21:52,540

YouTube URL: https://www.youtube.com/watch?v=CBANaczEiFI


