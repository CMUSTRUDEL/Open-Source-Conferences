Title: Nix flakes (NixCon 2019)
Publication date: 2019-10-28
Playlist: NixCon 2019 (Brno)
Description: 
	This talk will give an overview of Nix flakes, a proposed mechanism to package Nix expressions into composable entities ("flakes"). Flakes allow hermetic, reproducible evaluation of multi-repository Nix projects; impose a discoverable, standard structure on Nix projects; and replace previous mechanisms such as Nix channels and the Nix search path. This talk will discuss the current state of the flakes project and possible future developments.
Captions: 
	00:00:16,570 --> 00:00:25,419
next up is our own alcohol stir the

00:00:21,380 --> 00:00:29,169
outer of mix with his mixed flakes talk

00:00:25,419 --> 00:00:29,169
give him a hand everyone

00:00:45,090 --> 00:00:48,090
testing

00:00:53,350 --> 00:00:56,100
I guess

00:01:00,010 --> 00:01:05,840
all right so thank you all for coming

00:01:03,019 --> 00:01:08,240
welcome to Nick's con and by the way let

00:01:05,840 --> 00:01:11,360
me first give a big shout outs to our

00:01:08,240 --> 00:01:13,490
release managers Samuel Linus and

00:01:11,360 --> 00:01:17,750
everybody else who contributed to a

00:01:13,490 --> 00:01:19,750
really great release extremely smooth so

00:01:17,750 --> 00:01:22,429
yeah it's really incredible to see that

00:01:19,750 --> 00:01:24,920
that happening

00:01:22,429 --> 00:01:28,159
so yeah this talk is about Nick's flakes

00:01:24,920 --> 00:01:32,380
which is a new experimental feature in

00:01:28,159 --> 00:01:35,869
Nick's it actually came out of a talk

00:01:32,380 --> 00:01:38,630
given by Shay levy at last year's Nick's

00:01:35,869 --> 00:01:42,080
con about required dot Nick's so that

00:01:38,630 --> 00:01:46,670
was about essentially being able to

00:01:42,080 --> 00:01:50,090
compose Nick's based projects with

00:01:46,670 --> 00:01:52,069
multiple repositories making them more

00:01:50,090 --> 00:01:55,130
discoverable and giving them a standard

00:01:52,069 --> 00:01:59,560
structure and yeah that that's something

00:01:55,130 --> 00:02:03,110
that I really wanted for a long time and

00:01:59,560 --> 00:02:04,970
also address a bunch of other big

00:02:03,110 --> 00:02:08,360
problems that we've had in Nick's for

00:02:04,970 --> 00:02:14,360
years so yeah for the last year I've

00:02:08,360 --> 00:02:16,489
been hacking on that and so that has

00:02:14,360 --> 00:02:19,190
actually been funded by a Shea's company

00:02:16,489 --> 00:02:23,150
targets so they've been paying my

00:02:19,190 --> 00:02:25,370
employer tweak to work on that so let me

00:02:23,150 --> 00:02:27,319
first talk a bit about all the problems

00:02:25,370 --> 00:02:30,050
that we're trying to solve here because

00:02:27,319 --> 00:02:32,930
there are quite a few so very briefly a

00:02:30,050 --> 00:02:35,599
flakes are a way to package your Nick's

00:02:32,930 --> 00:02:37,519
files so this might sound a bit strange

00:02:35,599 --> 00:02:40,220
because Nick's is already a package

00:02:37,519 --> 00:02:42,260
manager so but it's a bit embarrassing

00:02:40,220 --> 00:02:44,900
so it's a very nice package manager but

00:02:42,260 --> 00:02:47,650
it's not very good at actually packaging

00:02:44,900 --> 00:02:49,909
its own stuff so had Nick's expressions

00:02:47,650 --> 00:02:53,360
well I mean we've had these things

00:02:49,909 --> 00:02:55,879
called channels but other than that and

00:02:53,360 --> 00:03:00,590
channels don't work very well and and

00:02:55,879 --> 00:03:03,799
but other than that it's getting your

00:03:00,590 --> 00:03:07,850
Nick's expressions to users or to other

00:03:03,799 --> 00:03:10,130
developers it's kind of a mess so let's

00:03:07,850 --> 00:03:13,940
go for all these problems

00:03:10,130 --> 00:03:17,360
so one one problem that we've had is if

00:03:13,940 --> 00:03:20,810
you have a large system spread out

00:03:17,360 --> 00:03:22,670
across multiple repositories then it's

00:03:20,810 --> 00:03:24,800
not convenient to build that with Nick

00:03:22,670 --> 00:03:26,150
so for example at a previous job we had

00:03:24,800 --> 00:03:28,430
this big system

00:03:26,150 --> 00:03:30,650
that was actually so it was a multi repo

00:03:28,430 --> 00:03:33,500
project so it was at components spread

00:03:30,650 --> 00:03:35,240
across I think dozens of repositories so

00:03:33,500 --> 00:03:38,480
just building that system meant you had

00:03:35,240 --> 00:03:40,070
to more or less manually check out all

00:03:38,480 --> 00:03:41,870
those repositories make sure that

00:03:40,070 --> 00:03:44,260
they're in the right place maybe set up

00:03:41,870 --> 00:03:46,630
the nicks path environment variable

00:03:44,260 --> 00:03:49,220
because these repositories were all

00:03:46,630 --> 00:03:52,460
depending on each other through Nick's

00:03:49,220 --> 00:03:55,550
path or just importing each other via

00:03:52,460 --> 00:03:57,230
dot dot slash so every repository had to

00:03:55,550 --> 00:04:01,310
be in the right location relative to

00:03:57,230 --> 00:04:02,960
each other and that's not nice developer

00:04:01,310 --> 00:04:05,630
experience so basically if you need a

00:04:02,960 --> 00:04:08,510
readme dot MD explaining how to build a

00:04:05,630 --> 00:04:10,580
project you've already failed so for

00:04:08,510 --> 00:04:12,830
example if you check out a rushed

00:04:10,580 --> 00:04:16,730
project you can use to cargo built and

00:04:12,830 --> 00:04:20,060
it will always work and with the next

00:04:16,730 --> 00:04:22,340
project everything had a different

00:04:20,060 --> 00:04:25,760
convention and everybody developed their

00:04:22,340 --> 00:04:27,530
own ways of doing these things so yeah

00:04:25,760 --> 00:04:29,990
that's that's that's not good

00:04:27,530 --> 00:04:31,760
so the vision here is that any Nick's

00:04:29,990 --> 00:04:33,950
based project should be able to have to

00:04:31,760 --> 00:04:39,080
a git clone and and run Nick's build and

00:04:33,950 --> 00:04:43,490
and it should work so related to that is

00:04:39,080 --> 00:04:45,470
that Nick's projects don't really have a

00:04:43,490 --> 00:04:47,360
standard structure has order a few

00:04:45,470 --> 00:04:51,110
conventions you might have a shell dot

00:04:47,360 --> 00:04:54,170
Nick's file or a release Nick's file for

00:04:51,110 --> 00:04:56,120
your Hydra jobs or maybe a default

00:04:54,170 --> 00:04:57,380
Nick's but actually default Nick's

00:04:56,120 --> 00:04:59,480
doesn't actually have a standard

00:04:57,380 --> 00:05:01,640
structure as it's not defined whether

00:04:59,480 --> 00:05:04,880
that's one package or a set of packages

00:05:01,640 --> 00:05:07,250
or arbitrary other stuff so for example

00:05:04,880 --> 00:05:10,310
all packages dot Nick's in index

00:05:07,250 --> 00:05:13,390
packages is some weird mix of packages

00:05:10,310 --> 00:05:17,330
and and library functions and builders

00:05:13,390 --> 00:05:20,270
so and then there are things like Nick

00:05:17,330 --> 00:05:23,230
so as modules which where there is

00:05:20,270 --> 00:05:25,270
really no convention so if you have

00:05:23,230 --> 00:05:28,540
a project that provides an issue as

00:05:25,270 --> 00:05:30,250
module there is no convention on what

00:05:28,540 --> 00:05:32,350
that thing what that file should be

00:05:30,250 --> 00:05:34,690
named like and and and how you should

00:05:32,350 --> 00:05:37,540
pull it into your own system

00:05:34,690 --> 00:05:40,450
configuration so we want to have a

00:05:37,540 --> 00:05:43,360
standard structure just like say you

00:05:40,450 --> 00:05:46,030
have a cargo Tomo in a Russ project

00:05:43,360 --> 00:05:54,190
there should be a standard way standard

00:05:46,030 --> 00:05:55,770
interface to a NYX based project so

00:05:54,190 --> 00:05:59,470
another goal is improving

00:05:55,770 --> 00:06:01,480
reproducibility so a bit of an another

00:05:59,470 --> 00:06:05,320
embarrassing thing about NYX is that it

00:06:01,480 --> 00:06:08,620
it pioneered reproducible builds but the

00:06:05,320 --> 00:06:10,870
evaluation of NYX expressions themselves

00:06:08,620 --> 00:06:12,280
is not all that reproducible despite the

00:06:10,870 --> 00:06:15,520
fact that it's a purely functional

00:06:12,280 --> 00:06:17,560
language so the problem is not so much

00:06:15,520 --> 00:06:21,820
the purity of the language but the fact

00:06:17,560 --> 00:06:24,010
that evaluation is not hermetic so NYX

00:06:21,820 --> 00:06:26,230
expression can pull in arbitrary files

00:06:24,010 --> 00:06:30,130
from your file system so for example it

00:06:26,230 --> 00:06:32,740
can something that happens in NYX

00:06:30,130 --> 00:06:35,770
packages it depend it will read in dot

00:06:32,740 --> 00:06:38,620
config slash NYX packages flash conflict

00:06:35,770 --> 00:06:40,300
or next or something like that so that

00:06:38,620 --> 00:06:43,000
means that if two people check out the

00:06:40,300 --> 00:06:44,970
same repository and do a NYX build on

00:06:43,000 --> 00:06:48,700
that they might get a different result

00:06:44,970 --> 00:06:51,610
which is obviously a bad thing and there

00:06:48,700 --> 00:06:55,510
are other sources of contamination like

00:06:51,610 --> 00:06:59,020
using environment variables or hey

00:06:55,510 --> 00:07:01,240
calling fetch get to to fetch a git

00:06:59,020 --> 00:07:04,360
repository without specifying a revision

00:07:01,240 --> 00:07:08,070
so then it will just fetch the latest

00:07:04,360 --> 00:07:12,390
head revision so yeah that's that's not

00:07:08,070 --> 00:07:14,980
reproducible and that also has

00:07:12,390 --> 00:07:18,220
implications like you cannot cache

00:07:14,980 --> 00:07:21,610
evaluation results persistently so the

00:07:18,220 --> 00:07:25,750
goal of flakes is so if two people have

00:07:21,610 --> 00:07:29,820
clone have built the same flake they

00:07:25,750 --> 00:07:29,820
will always get the same result so

00:07:30,030 --> 00:07:36,430
another goal is replacing NYX channel so

00:07:34,000 --> 00:07:36,999
NYX general is the main way that we

00:07:36,430 --> 00:07:40,689
distribute

00:07:36,999 --> 00:07:45,429
neck's packages and nick service to to

00:07:40,689 --> 00:07:47,619
users but it's it's pretty limited so

00:07:45,429 --> 00:07:49,989
it's hard to actually create a channel I

00:07:47,619 --> 00:07:52,689
mean it's not really that hard I mean

00:07:49,989 --> 00:07:54,339
it's just a terrible containing a dump

00:07:52,689 --> 00:07:56,229
of your repository but just creating

00:07:54,339 --> 00:07:58,449
that thing is not something you want to

00:07:56,229 --> 00:08:00,519
do you just want to point somebody at a

00:07:58,449 --> 00:08:04,479
at a git repository and it should just

00:08:00,519 --> 00:08:06,279
work so with Nick's Channel he also

00:08:04,479 --> 00:08:08,979
cannot easily pin a channel to a

00:08:06,279 --> 00:08:10,629
specific version a you can only say

00:08:08,979 --> 00:08:12,489
Nick's channel update and they will get

00:08:10,629 --> 00:08:16,299
the latest channel but you cannot roll

00:08:12,489 --> 00:08:18,999
back to a previous version channels

00:08:16,299 --> 00:08:21,339
don't really auto update so that's kind

00:08:18,999 --> 00:08:23,619
of the opposite of pinning but so if you

00:08:21,339 --> 00:08:26,139
don't run next channel - - updates then

00:08:23,619 --> 00:08:28,329
your system doesn't or nothing updates

00:08:26,139 --> 00:08:30,819
at all and that might not be what you

00:08:28,329 --> 00:08:34,990
want because you don't get any security

00:08:30,819 --> 00:08:37,779
fixes or other fixes and they're

00:08:34,990 --> 00:08:39,519
completely self-contained so channels

00:08:37,779 --> 00:08:41,919
cannot express dependencies on other

00:08:39,519 --> 00:08:43,719
channels which basically means that

00:08:41,919 --> 00:08:46,149
they're only useful for distributing

00:08:43,719 --> 00:08:47,800
Nick's packages because Nick's package

00:08:46,149 --> 00:08:52,329
is the only thing that doesn't depend on

00:08:47,800 --> 00:08:54,670
other repositories most other Nick's

00:08:52,329 --> 00:08:56,529
projects will depend on X packages so

00:08:54,670 --> 00:08:58,870
that means you can't really use them as

00:08:56,529 --> 00:09:00,670
a channel I mean you can hack things or

00:08:58,870 --> 00:09:02,170
you can use the Nick search path but

00:09:00,670 --> 00:09:07,149
then you're back to that problem of

00:09:02,170 --> 00:09:11,379
reproducibility so we need to provide

00:09:07,149 --> 00:09:15,220
something nicer than Nick's channels and

00:09:11,379 --> 00:09:17,170
then finally we actually I mean it's an

00:09:15,220 --> 00:09:19,059
extension of replacing Nick's channel

00:09:17,170 --> 00:09:23,980
but we actually need to finish - Nick's

00:09:19,059 --> 00:09:25,870
CLI so this this new have one command

00:09:23,980 --> 00:09:28,870
replacement for all the existing Nick's

00:09:25,870 --> 00:09:31,000
tools was actually something I first

00:09:28,870 --> 00:09:34,930
proposed that the first Nick's gone in

00:09:31,000 --> 00:09:38,740
in Berlin and so embarrassingly we're

00:09:34,930 --> 00:09:40,360
still not there yet so so it doesn't

00:09:38,740 --> 00:09:42,309
have a replacements for Nick's and

00:09:40,360 --> 00:09:44,740
Nick's shell and Nick's channel and

00:09:42,309 --> 00:09:46,949
actually one major blocker there was

00:09:44,740 --> 00:09:46,949
that

00:09:47,040 --> 00:09:52,080
well so these commands so they try to

00:09:49,740 --> 00:09:55,260
provide a unified interface for all

00:09:52,080 --> 00:09:57,120
these commands the old interface for

00:09:55,260 --> 00:09:58,680
example Nick send for Nick's bill to

00:09:57,120 --> 00:09:59,820
have a completely different user

00:09:58,680 --> 00:10:02,520
interface they have a completely

00:09:59,820 --> 00:10:05,430
different way of referring to packages

00:10:02,520 --> 00:10:09,710
so nicks and fuses package names and

00:10:05,430 --> 00:10:12,900
Nick's build uses attribute names and

00:10:09,710 --> 00:10:16,770
yeah and Nick's channel of course is

00:10:12,900 --> 00:10:19,620
completely different so so the goal

00:10:16,770 --> 00:10:23,220
there was to unify these things but it

00:10:19,620 --> 00:10:25,740
was always a blocker that in my head

00:10:23,220 --> 00:10:29,400
that Nick's channel is a mess and we and

00:10:25,740 --> 00:10:31,980
Nick's path is a mess so we need a

00:10:29,400 --> 00:10:33,390
replacement for that so we need to have

00:10:31,980 --> 00:10:35,550
a good answer to the question of what

00:10:33,390 --> 00:10:39,090
does Nick's built Nick's packages dot

00:10:35,550 --> 00:10:40,980
hello mean so currently it means well

00:10:39,090 --> 00:10:42,930
look up Nick's packages in the search

00:10:40,980 --> 00:10:45,540
path as when did mix path environment

00:10:42,930 --> 00:10:47,460
variable and probably that's populated

00:10:45,540 --> 00:10:49,020
using the next general command so that's

00:10:47,460 --> 00:10:51,300
where you get your Nick's packages from

00:10:49,020 --> 00:10:53,760
but so that has all these previous

00:10:51,300 --> 00:11:01,560
problems so we need a better answer to

00:10:53,760 --> 00:11:05,100
that so yeah so flake provides a all

00:11:01,560 --> 00:11:07,890
right so now let's get to the actual

00:11:05,100 --> 00:11:09,840
solution so first before actually diving

00:11:07,890 --> 00:11:12,900
into what a flake looks like let's look

00:11:09,840 --> 00:11:16,940
at it from a develop developer point of

00:11:12,900 --> 00:11:19,500
view but very briefly a flake is just

00:11:16,940 --> 00:11:21,600
well simply put it's just a git

00:11:19,500 --> 00:11:23,430
repository that has a flake dot Nick's

00:11:21,600 --> 00:11:26,640
file in it and the flake dot next file

00:11:23,430 --> 00:11:29,880
describes what that thing describes like

00:11:26,640 --> 00:11:34,710
Nick's packages or modules or overlays

00:11:29,880 --> 00:11:37,080
or containers basically any any kind of

00:11:34,710 --> 00:11:41,990
Nick's values but it provides some

00:11:37,080 --> 00:11:44,940
standardized structure to them so

00:11:41,990 --> 00:11:49,020
suppose that we want to run rust from

00:11:44,940 --> 00:11:51,600
Nick's packages so yeah you would say

00:11:49,020 --> 00:11:53,430
Nick's run Nick's packages hash rust see

00:11:51,600 --> 00:11:55,350
and then that she received that's just

00:11:53,430 --> 00:11:58,259
first so you run it so this is almost

00:11:55,350 --> 00:12:01,769
exactly the same as what you

00:11:58,259 --> 00:12:03,209
we're doing old-school Knicks so the

00:12:01,769 --> 00:12:05,550
only difference is that the dot has

00:12:03,209 --> 00:12:07,620
changed into a hash so you say Knicks

00:12:05,550 --> 00:12:11,370
back is just hash rusty instead of dots

00:12:07,620 --> 00:12:13,709
rusty but it does something completely

00:12:11,370 --> 00:12:17,459
different so in the old Knicks this

00:12:13,709 --> 00:12:18,990
would go through the Knicks path and for

00:12:17,459 --> 00:12:24,380
your next channels and look for Knicks

00:12:18,990 --> 00:12:27,329
packages so here so Knicks packages is a

00:12:24,380 --> 00:12:30,600
identifier that is so-called flake

00:12:27,329 --> 00:12:33,870
reference and flake references describe

00:12:30,600 --> 00:12:36,990
well the location of the flake and that

00:12:33,870 --> 00:12:40,170
can be a URL so for example a github

00:12:36,990 --> 00:12:42,029
repository on github but that's not very

00:12:40,170 --> 00:12:44,880
user friendly if you have to type that

00:12:42,029 --> 00:12:48,000
all the time so you can type it but but

00:12:44,880 --> 00:12:50,130
usually you go you use this so-called

00:12:48,000 --> 00:12:52,199
registry so there is a global registry

00:12:50,130 --> 00:12:54,420
that has some mappings from well-known

00:12:52,199 --> 00:12:57,959
repositories or well-known flakes to

00:12:54,420 --> 00:13:01,259
their actual locations so what this

00:12:57,959 --> 00:13:04,110
command will do is it will fetch the

00:13:01,259 --> 00:13:05,550
latest registry I mean it caches it so

00:13:04,110 --> 00:13:07,769
most of the time it won't actually be

00:13:05,550 --> 00:13:10,260
fetching anything so it will look for

00:13:07,769 --> 00:13:13,230
the location of mix packages and then it

00:13:10,260 --> 00:13:14,910
will fetch Knicks packages so unlike

00:13:13,230 --> 00:13:16,529
Knicks Channel you don't have to add

00:13:14,910 --> 00:13:22,709
anything you don't have to configure

00:13:16,529 --> 00:13:26,310
anything this just works so alright so

00:13:22,709 --> 00:13:31,860
it works that's great so these flake

00:13:26,310 --> 00:13:33,600
references you can also ferry on them so

00:13:31,860 --> 00:13:36,089
Knicks packages is looked up on the

00:13:33,600 --> 00:13:38,430
registry but you and and in the default

00:13:36,089 --> 00:13:41,459
registry Knicks packages is mapped to

00:13:38,430 --> 00:13:43,350
the master branch or the unstable branch

00:13:41,459 --> 00:13:45,029
of Knicks packages I might change that

00:13:43,350 --> 00:13:47,370
in the future because maybe it's not a

00:13:45,029 --> 00:13:49,769
good idea but in any case but suppose we

00:13:47,370 --> 00:13:51,930
want to use to release 19:09 branch then

00:13:49,769 --> 00:13:54,630
you just say Knicks run Knicks packages

00:13:51,930 --> 00:13:59,819
/ released 1909 and that will fetch the

00:13:54,630 --> 00:14:03,480
head revision of 1909 which has an older

00:13:59,819 --> 00:14:05,339
rust version so these commands by the

00:14:03,480 --> 00:14:08,040
way are not very reproducible because

00:14:05,339 --> 00:14:10,880
they're referring to had revisions of

00:14:08,040 --> 00:14:14,750
repositories

00:14:10,880 --> 00:14:16,580
but yes okay so so there can be any

00:14:14,750 --> 00:14:20,180
number of flakes so for example in the

00:14:16,580 --> 00:14:22,790
flake world the patch shelf project has

00:14:20,180 --> 00:14:25,130
a flake dot NYX file so if we want to

00:14:22,790 --> 00:14:26,930
run the latest and greatest patch shelf

00:14:25,130 --> 00:14:28,760
we just say next run patch shelf and

00:14:26,930 --> 00:14:36,020
this will fetch the petrol free posit

00:14:28,760 --> 00:14:37,880
ori build it and run it now so if you

00:14:36,020 --> 00:14:40,490
want something more reproducible we can

00:14:37,880 --> 00:14:42,380
also use a so-called immutable flake

00:14:40,490 --> 00:14:48,800
reference so that's one that doesn't

00:14:42,380 --> 00:14:51,980
refer to a to a branch for tag but to an

00:14:48,800 --> 00:14:54,560
actual revisions of an ideal he doesn't

00:14:51,980 --> 00:14:57,260
in direct through the registry because

00:14:54,560 --> 00:15:00,410
the registry might change so I can say

00:14:57,260 --> 00:15:03,250
something like NYX rent github and then

00:15:00,410 --> 00:15:06,380
actual project and a revision and so

00:15:03,250 --> 00:15:09,610
this will always provide the same result

00:15:06,380 --> 00:15:13,520
of course provided that this repository

00:15:09,610 --> 00:15:15,529
doesn't disappear that's something I

00:15:13,520 --> 00:15:23,209
don't have a solution for at the moment

00:15:15,529 --> 00:15:27,290
yet but alright yeah a little bit more

00:15:23,209 --> 00:15:30,260
user perspective so so the difference

00:15:27,290 --> 00:15:32,300
with NYX channel here is that you you

00:15:30,260 --> 00:15:34,459
you get the latest version of NYX

00:15:32,300 --> 00:15:38,450
packages by default so might not be what

00:15:34,459 --> 00:15:41,270
you want so you can also in a flake so

00:15:38,450 --> 00:15:43,279
what that does actually is so you have a

00:15:41,270 --> 00:15:46,490
global registry but there's also per

00:15:43,279 --> 00:15:49,190
user registry and and these pin and add

00:15:46,490 --> 00:15:51,890
commands just register a override in

00:15:49,190 --> 00:15:55,940
your local registry so Nick flake pin

00:15:51,890 --> 00:15:57,980
will add a an override that makes Nick's

00:15:55,940 --> 00:16:00,440
packages point to the current revision

00:15:57,980 --> 00:16:03,970
and after that it doesn't change so you

00:16:00,440 --> 00:16:06,709
always get the same thing or you can say

00:16:03,970 --> 00:16:09,050
you can explicitly make Nick's package

00:16:06,709 --> 00:16:11,420
just point to anything you want so you

00:16:09,050 --> 00:16:15,060
can make it point to your own fork or to

00:16:11,420 --> 00:16:18,230
some branch that you want whatever

00:16:15,060 --> 00:16:18,230
all right

00:16:18,260 --> 00:16:22,770
very briefly I mentioned that since a

00:16:21,030 --> 00:16:24,990
few days ago there's also a Nixon

00:16:22,770 --> 00:16:27,210
replacement so you can now say Nix

00:16:24,990 --> 00:16:29,610
profile install Nix packages hash hello

00:16:27,210 --> 00:16:34,200
and this is a little bit nicer than Nix

00:16:29,610 --> 00:16:36,000
ends because it it remembers where these

00:16:34,200 --> 00:16:40,680
things actually came from so it will

00:16:36,000 --> 00:16:43,470
store in the profile that this Nix

00:16:40,680 --> 00:16:47,880
packages hash hello resolved to a

00:16:43,470 --> 00:16:49,710
particular revision so yeah you can

00:16:47,880 --> 00:16:52,350
always reproduce that thing you always

00:16:49,710 --> 00:16:55,020
know exactly what what's in your using

00:16:52,350 --> 00:16:59,210
your profile but you can also upgrade

00:16:55,020 --> 00:17:02,010
that and it also remembers your original

00:16:59,210 --> 00:17:04,580
URL that you used to install it so it

00:17:02,010 --> 00:17:07,740
will so if you run upgrades it will

00:17:04,580 --> 00:17:14,580
fetch the latest Nix package and rebuild

00:17:07,740 --> 00:17:17,750
from there so you get a mix between sort

00:17:14,580 --> 00:17:20,010
of imperative and declarative style

00:17:17,750 --> 00:17:22,710
alright so that was the user perspective

00:17:20,010 --> 00:17:26,330
now a bit of the developer perspective

00:17:22,710 --> 00:17:28,290
so suppose you want to hack on a flake

00:17:26,330 --> 00:17:30,240
so there is actually a little

00:17:28,290 --> 00:17:33,210
convenience command Nicks flake clone

00:17:30,240 --> 00:17:36,270
which so this will look up a flake in

00:17:33,210 --> 00:17:39,060
the registry so here in Nick's West

00:17:36,270 --> 00:17:42,720
homepage that's the next West or home

00:17:39,060 --> 00:17:45,900
page is actually built using a flake so

00:17:42,720 --> 00:17:48,570
this just runs a get clone so we can go

00:17:45,900 --> 00:17:52,080
into it we can edit it a bit and now we

00:17:48,570 --> 00:17:55,380
can run Nix build and yeah so this just

00:17:52,080 --> 00:17:56,880
works which is not entirely trivial

00:17:55,380 --> 00:17:59,220
because the Nick service home page

00:17:56,880 --> 00:18:01,860
actually depends on multiple versions of

00:17:59,220 --> 00:18:04,860
Nick's packages and it pulls in Hydra

00:18:01,860 --> 00:18:07,650
and and Nick shops and and the master of

00:18:04,860 --> 00:18:09,630
Nick's because it needs to prettified

00:18:07,650 --> 00:18:12,270
our manual so all sorts of silly things

00:18:09,630 --> 00:18:14,760
going on there but yeah you don't need

00:18:12,270 --> 00:18:19,770
to know about it it's just run nick's

00:18:14,760 --> 00:18:22,100
built and and it works alright so next

00:18:19,770 --> 00:18:25,080
build by default it

00:18:22,100 --> 00:18:27,330
this so-called default package that a

00:18:25,080 --> 00:18:28,540
flake provides but a flake and provide

00:18:27,330 --> 00:18:30,460
more than one package

00:18:28,540 --> 00:18:34,150
obviously was in the case of Knicks

00:18:30,460 --> 00:18:35,920
packages so for example in Knicks was

00:18:34,150 --> 00:18:38,140
home paid services packages Explorer

00:18:35,920 --> 00:18:40,480
derivation and if you want to test that

00:18:38,140 --> 00:18:43,330
thing independently you would say

00:18:40,480 --> 00:18:45,520
something like Knicks built - packages

00:18:43,330 --> 00:18:47,890
Explorer so dot refers to the current

00:18:45,520 --> 00:18:49,990
directory and hash packages Explorer is

00:18:47,890 --> 00:18:53,130
the the attributes in the flag that

00:18:49,990 --> 00:18:53,130
you're interested in

00:18:53,200 --> 00:18:57,720
yeah there's also a NIC shell

00:18:54,670 --> 00:19:02,590
replacement it's called Nick Steph shell

00:18:57,720 --> 00:19:04,510
and that uses well by default uses the

00:19:02,590 --> 00:19:07,210
default package provided by your flag

00:19:04,510 --> 00:19:12,580
and if you but you can also have a an

00:19:07,210 --> 00:19:14,200
explicit def shell thing provided by

00:19:12,580 --> 00:19:18,250
your flag so if you want to set up a

00:19:14,200 --> 00:19:20,530
very fancy environment that differs from

00:19:18,250 --> 00:19:25,780
from the actual packaged and then you

00:19:20,530 --> 00:19:27,460
can declaratively specify that another

00:19:25,780 --> 00:19:29,440
thing worth mentioning is there is a

00:19:27,460 --> 00:19:31,960
Nick flake check command so that will

00:19:29,440 --> 00:19:35,830
check whether everything in your flake

00:19:31,960 --> 00:19:39,250
evaluates correctly and and it will

00:19:35,830 --> 00:19:42,850
build a special check attribute in your

00:19:39,250 --> 00:19:47,020
flake so you can put some smoke tests in

00:19:42,850 --> 00:19:48,610
there yeah so this is a nice way to to

00:19:47,020 --> 00:19:50,800
verify that you're a flake is still

00:19:48,610 --> 00:19:52,780
correct

00:19:50,800 --> 00:19:56,380
yeah if flakes can provide many things

00:19:52,780 --> 00:19:59,920
so for example they can provide knixwear

00:19:56,380 --> 00:20:01,870
system configurations so Nick Swiss

00:19:59,920 --> 00:20:06,400
container has flake support so you can

00:20:01,870 --> 00:20:08,670
say yeah run the nexus homepage flake in

00:20:06,400 --> 00:20:14,040
a container and that will build the

00:20:08,670 --> 00:20:18,520
nicks OS configurations dots container

00:20:14,040 --> 00:20:20,650
attribute from the flake and yes so

00:20:18,520 --> 00:20:23,440
that's so completely reproducible so if

00:20:20,650 --> 00:20:25,210
two people run this command on the same

00:20:23,440 --> 00:20:28,920
revision of this repository they will

00:20:25,210 --> 00:20:32,020
always get exactly the same container

00:20:28,920 --> 00:20:33,310
start it and can run it and that's nice

00:20:32,020 --> 00:20:37,960
for the home page because all these

00:20:33,310 --> 00:20:40,290
things like packages Jason work because

00:20:37,960 --> 00:20:44,030
they need some special web web server

00:20:40,290 --> 00:20:47,010
configuration so yeah and that's nice

00:20:44,030 --> 00:20:56,810
all right so now what actually is a

00:20:47,010 --> 00:20:59,820
flake so we're doing by time that's okay

00:20:56,810 --> 00:21:02,040
so okay so what is a flake so a flake is

00:20:59,820 --> 00:21:04,320
actually just a little bit of metadata

00:21:02,040 --> 00:21:06,540
around the nicks expressions that you

00:21:04,320 --> 00:21:10,410
already have so your default Nicks or

00:21:06,540 --> 00:21:12,540
your released at Nicks and so the

00:21:10,410 --> 00:21:16,800
metadata is things like a description

00:21:12,540 --> 00:21:19,230
and an addition and the dependencies of

00:21:16,800 --> 00:21:22,170
the flake so the other flakes that it

00:21:19,230 --> 00:21:23,880
depends on like Nick's packages and then

00:21:22,170 --> 00:21:25,740
the main thing is the outputs of the

00:21:23,880 --> 00:21:30,270
flag so that's those are the values that

00:21:25,740 --> 00:21:33,510
it it actually provides so here's an

00:21:30,270 --> 00:21:36,750
example so this is from flake called

00:21:33,510 --> 00:21:39,480
dwarf FS which is a little fuse file

00:21:36,750 --> 00:21:44,070
system for fetching dwarf debug info on

00:21:39,480 --> 00:21:46,500
demand so it it has a description it has

00:21:44,070 --> 00:21:48,660
an addition field that's mandatory so

00:21:46,500 --> 00:21:51,720
the addition currently needs to be 2000

00:21:48,660 --> 00:21:54,360
1909 and that's actually a nice feature

00:21:51,720 --> 00:21:57,690
because this will allow us to evolve not

00:21:54,360 --> 00:22:00,240
just flakes themselves but the Nick

00:21:57,690 --> 00:22:02,670
syntax and semantics in the future so if

00:22:00,240 --> 00:22:05,340
we want to do things like I know hey

00:22:02,670 --> 00:22:07,740
remove the URL syntax from the next

00:22:05,340 --> 00:22:10,830
language then the addition field allows

00:22:07,740 --> 00:22:14,100
that so at some point we would bump this

00:22:10,830 --> 00:22:16,100
to 2020 something and then old flakes

00:22:14,100 --> 00:22:18,900
would still be parsed using the old

00:22:16,100 --> 00:22:21,570
syntax and and you flex using the new

00:22:18,900 --> 00:22:24,000
one alright so the main thing here is

00:22:21,570 --> 00:22:26,340
the the outputs so there are some

00:22:24,000 --> 00:22:28,230
packages here well there's actually only

00:22:26,340 --> 00:22:31,560
one package there's a default package

00:22:28,230 --> 00:22:36,300
with just aliases that package and there

00:22:31,560 --> 00:22:40,590
is a Nick so as module dot Worf FS and

00:22:36,300 --> 00:22:42,300
this flake has some dependencies well

00:22:40,590 --> 00:22:44,010
actually it has only one dependencies

00:22:42,300 --> 00:22:48,570
and these are passed in as function

00:22:44,010 --> 00:22:50,190
arguments and those are utter flakes so

00:22:48,570 --> 00:22:52,809
there's one called self which is just

00:22:50,190 --> 00:22:54,700
this flake itself so you can refer

00:22:52,809 --> 00:22:56,950
to the flakes on out boots so for

00:22:54,700 --> 00:22:58,990
example here we're referring to self dot

00:22:56,950 --> 00:23:03,120
packages which is actually this thing up

00:22:58,990 --> 00:23:05,499
here and that's sometimes useful for

00:23:03,120 --> 00:23:08,139
referring to some metadata of the flake

00:23:05,499 --> 00:23:10,450
but the main thing here is NYX packages

00:23:08,139 --> 00:23:13,299
so we're not saying anything here about

00:23:10,450 --> 00:23:16,480
where we get next packages from you

00:23:13,299 --> 00:23:18,340
actually can specify that so it's not

00:23:16,480 --> 00:23:21,159
shown here but you can specify an input

00:23:18,340 --> 00:23:23,590
attribute here which actually specifies

00:23:21,159 --> 00:23:29,429
where the inputs come from but if you

00:23:23,590 --> 00:23:32,350
don't specify that if you just have a

00:23:29,429 --> 00:23:34,389
function argument here then it will be

00:23:32,350 --> 00:23:35,860
looked up in the registry so NYX

00:23:34,389 --> 00:23:38,320
packages will be looked up in the

00:23:35,860 --> 00:23:40,960
registry and and that's what what is

00:23:38,320 --> 00:23:47,200
used to to build a thing now that sounds

00:23:40,960 --> 00:23:49,629
very non reproducible but so the

00:23:47,200 --> 00:23:55,299
solution is that there is a lock file

00:23:49,629 --> 00:23:58,090
just as you know from MDM or cargo so

00:23:55,299 --> 00:24:01,059
when you build a flake so you have a

00:23:58,090 --> 00:24:04,090
flake NYX it will look up all these

00:24:01,059 --> 00:24:06,580
dependencies and that's extremely impure

00:24:04,090 --> 00:24:10,590
but then it will generate a flake dot

00:24:06,580 --> 00:24:15,519
lock file which maps those impure

00:24:10,590 --> 00:24:17,440
dependencies to concrete revisions so I

00:24:15,519 --> 00:24:20,019
have for example NYX packages will be

00:24:17,440 --> 00:24:23,230
mapped to knixwear slash and expects to

00:24:20,019 --> 00:24:27,249
slash a whatever revisions happens to be

00:24:23,230 --> 00:24:29,860
current at that time and so and once the

00:24:27,249 --> 00:24:32,499
lock file exists it will be used by any

00:24:29,860 --> 00:24:37,769
subsequent build so if you run NYX build

00:24:32,499 --> 00:24:41,619
again it will use that the dependencies

00:24:37,769 --> 00:24:44,379
locked in the log file and so you would

00:24:41,619 --> 00:24:49,149
generally commits that lock file as part

00:24:44,379 --> 00:24:51,570
of your repository and yeah and then

00:24:49,149 --> 00:24:55,029
things are wonderfully reproducible so

00:24:51,570 --> 00:24:58,110
for example in hydra hydras always

00:24:55,029 --> 00:25:00,970
configuring hydra job sets always been

00:24:58,110 --> 00:25:05,409
unpleasant because you have to specify

00:25:00,970 --> 00:25:06,309
these job set inputs so that can get

00:25:05,409 --> 00:25:08,919
very messy

00:25:06,309 --> 00:25:12,129
dozens of repositories that you depend

00:25:08,919 --> 00:25:13,629
on but now you no longer need to do any

00:25:12,129 --> 00:25:16,749
of that the only thing that you need to

00:25:13,629 --> 00:25:19,509
configure in Hydra is the URL of your

00:25:16,749 --> 00:25:22,979
flake and that's that flake who has a

00:25:19,509 --> 00:25:22,979
log file that completely

00:25:23,590 --> 00:25:30,580
yeah locks all the dependencies so

00:25:26,190 --> 00:25:33,129
that's all Hydra needs to know another

00:25:30,580 --> 00:25:36,659
nice thing about reproducibility is that

00:25:33,129 --> 00:25:39,039
now if you want to yeah

00:25:36,659 --> 00:25:41,409
something fails in Hydra and you want to

00:25:39,039 --> 00:25:43,629
try that out yourself so Hydra has this

00:25:41,409 --> 00:25:45,309
little-known feature where you can click

00:25:43,629 --> 00:25:49,450
somewhere in a map in a menu on

00:25:45,309 --> 00:25:51,809
reproduce this built and it it so what

00:25:49,450 --> 00:25:54,759
it used to do is generate a shell script

00:25:51,809 --> 00:25:58,479
that tries to reproduce all the

00:25:54,759 --> 00:26:00,519
dependencies of your of your project so

00:25:58,479 --> 00:26:02,919
that will generate all these calls to

00:26:00,519 --> 00:26:06,879
gets and then mercurial to fetch your

00:26:02,919 --> 00:26:10,269
dependencies and yeah most of time that

00:26:06,879 --> 00:26:11,799
doesn't really work or but but yeah so

00:26:10,269 --> 00:26:14,349
now that's completely unnecessary

00:26:11,799 --> 00:26:16,389
because you can just say you can just

00:26:14,349 --> 00:26:19,330
cut and paste this one-liner so for

00:26:16,389 --> 00:26:22,539
example nick's built and then the the

00:26:19,330 --> 00:26:24,820
so-called immutable flake reference so

00:26:22,539 --> 00:26:26,950
for example github knixwear slash nick

00:26:24,820 --> 00:26:30,609
slash or revision and then the attribute

00:26:26,950 --> 00:26:33,849
that is hydra job corresponds to so

00:26:30,609 --> 00:26:37,119
hydra jobs dot built on x86 for linux

00:26:33,849 --> 00:26:39,639
and yeah that's guaranteed to guarantee

00:26:37,119 --> 00:26:45,159
to give you exactly the same thing as

00:26:39,639 --> 00:26:47,409
well hydros building i skip this one so

00:26:45,159 --> 00:26:50,799
yeah what are the outputs of a flake so

00:26:47,409 --> 00:26:54,519
a flake can provide anything but there

00:26:50,799 --> 00:26:56,919
are a few well-known outputs so if they

00:26:54,519 --> 00:27:00,179
exist that nick's flightcheck actually

00:26:56,919 --> 00:27:03,219
requires them to have a certain format

00:27:00,179 --> 00:27:05,169
so for example the packages attribute

00:27:03,219 --> 00:27:09,929
must be a set of derivation so if you

00:27:05,169 --> 00:27:12,929
put other stuff in it it will complain

00:27:09,929 --> 00:27:15,549
but yeah so other well-known ones are

00:27:12,929 --> 00:27:17,639
expected is overlays Nix was modules

00:27:15,549 --> 00:27:21,299
system configurations

00:27:17,639 --> 00:27:26,309
see I jobs like hydro jobs deaf shell

00:27:21,299 --> 00:27:28,830
environments and so on but that's you're

00:27:26,309 --> 00:27:31,259
completely free to have arbitrary output

00:27:28,830 --> 00:27:35,210
so if lakes are just a little bit of

00:27:31,259 --> 00:27:37,590
wrapper around your Knicks expressions

00:27:35,210 --> 00:27:40,889
yeah let me also still mention that

00:27:37,590 --> 00:27:47,610
there is some basic flake support in NYX

00:27:40,889 --> 00:27:51,090
OS that's really nice because it used to

00:27:47,610 --> 00:27:52,859
be very annoying in Nick so as to if you

00:27:51,090 --> 00:27:55,559
want to pull in something that's not in

00:27:52,859 --> 00:27:58,109
the nicks packages repository it's not a

00:27:55,559 --> 00:28:00,330
super easy way to do it but now you can

00:27:58,109 --> 00:28:03,600
so for example here's a nick source

00:28:00,330 --> 00:28:06,570
configuration for a Hydra server so I

00:28:03,600 --> 00:28:10,350
just say well I need Hydra as an input

00:28:06,570 --> 00:28:12,749
and then in my modulus a Hydra dot Nexus

00:28:10,350 --> 00:28:17,429
modules dot Hydra and and it just works

00:28:12,749 --> 00:28:19,649
and this for the first time also allows

00:28:17,429 --> 00:28:21,359
us to get rid of things like Hydra in

00:28:19,649 --> 00:28:25,019
expected years so it was always very

00:28:21,359 --> 00:28:26,879
embarrassing in Nix that if you have a

00:28:25,019 --> 00:28:28,980
Nix based projects or something that has

00:28:26,879 --> 00:28:31,679
a Nix expression or an extra module it

00:28:28,980 --> 00:28:33,809
was very hard to actually ship that in

00:28:31,679 --> 00:28:36,330
Nix packages because we had to actually

00:28:33,809 --> 00:28:39,299
reproduce all that stuff in expect jizz

00:28:36,330 --> 00:28:42,929
so next packages as a outdated clone of

00:28:39,299 --> 00:28:46,470
the nix arrest module for Hydra so

00:28:42,929 --> 00:28:48,090
that's not a very nice approach so now

00:28:46,470 --> 00:28:51,619
we can just get rid of these things and

00:28:48,090 --> 00:28:55,710
you can just use the Hydra flake

00:28:51,619 --> 00:28:57,840
directly or for that matter the Nick's

00:28:55,710 --> 00:29:00,809
flake so if you want the bleeding edge

00:28:57,840 --> 00:29:02,369
of next and these two lines are all you

00:29:00,809 --> 00:29:08,509
need to do just pull in the Nick's

00:29:02,369 --> 00:29:08,509
overlay from the next flake right

00:29:09,389 --> 00:29:16,019
so there is an RFC so none of what I

00:29:13,379 --> 00:29:21,059
described here is actually in Nick's

00:29:16,019 --> 00:29:23,220
master and none of it is set in stone so

00:29:21,059 --> 00:29:25,830
all of this is subject to change

00:29:23,220 --> 00:29:30,059
or maybe frou-frou the way we decided

00:29:25,830 --> 00:29:31,530
this a bad ID but hopefully not but yeah

00:29:30,059 --> 00:29:37,940
so you can play with it

00:29:31,530 --> 00:29:37,940
very interesting feedback that's it

00:29:39,220 --> 00:29:42,560
[Applause]

00:29:40,140 --> 00:29:48,260
[Music]

00:29:42,560 --> 00:29:48,260
[Applause]

00:29:56,010 --> 00:30:05,860
hi so I'm curious clamping down on

00:30:01,799 --> 00:30:07,059
impurities seems to remove a really

00:30:05,860 --> 00:30:10,029
important lever for injecting

00:30:07,059 --> 00:30:13,559
authorization to get private stuff like

00:30:10,029 --> 00:30:19,659
what's the what's the story for that

00:30:13,559 --> 00:30:23,740
yeah so basically that should just work

00:30:19,659 --> 00:30:28,529
so for example for github so currently

00:30:23,740 --> 00:30:32,620
flakes have I mean flakes are

00:30:28,529 --> 00:30:35,340
fundamentally agnostic as to how flakes

00:30:32,620 --> 00:30:38,260
are fetched but currently they're just

00:30:35,340 --> 00:30:41,080
get and get up as a as a sort of

00:30:38,260 --> 00:30:43,149
transport mechanism now so gates just

00:30:41,080 --> 00:30:45,820
uses whatever of authentication

00:30:43,149 --> 00:30:48,309
mechanisms you have so if it's not

00:30:45,820 --> 00:30:50,740
executed by the demon all that fetching

00:30:48,309 --> 00:30:53,919
so it's just run as your normal user

00:30:50,740 --> 00:30:57,580
account so it can use your SSH keys or

00:30:53,919 --> 00:30:59,950
whatever ever get up I think we have

00:30:57,580 --> 00:31:02,139
some configuration setting where you can

00:30:59,950 --> 00:31:05,200
configure access tokens so you can use

00:31:02,139 --> 00:31:07,809
that for fetching private repos so yeah

00:31:05,200 --> 00:31:08,490
so this is a use case that that we're

00:31:07,809 --> 00:31:12,039
aware of

00:31:08,490 --> 00:31:14,289
because actually so so targets the

00:31:12,039 --> 00:31:17,409
customers affinities of course they have

00:31:14,289 --> 00:31:19,299
all these internal repos so yeah so that

00:31:17,409 --> 00:31:26,620
that's something that needs to work ok

00:31:19,299 --> 00:31:29,559
cool hi how can we try this out so there

00:31:26,620 --> 00:31:33,190
is a Knicks flakes attribute index

00:31:29,559 --> 00:31:38,169
packages so you can set index ways you

00:31:33,190 --> 00:31:42,519
can set config dot next dot package to

00:31:38,169 --> 00:31:49,090
Dex flakes and then you get an extra

00:31:42,519 --> 00:31:52,600
flex enabled system or you can yeah or

00:31:49,090 --> 00:31:55,539
you can do Nix Nix run Nix flakes from

00:31:52,600 --> 00:31:58,630
the expect the caveats that the one on

00:31:55,539 --> 00:32:01,400
release 1909 is currently sort of broken

00:31:58,630 --> 00:32:05,420
because a few days ago

00:32:01,400 --> 00:32:07,400
the github changed there well the e-tax

00:32:05,420 --> 00:32:10,400
that they're surfing for their archives

00:32:07,400 --> 00:32:13,490
I was abusing the fact that our attacks

00:32:10,400 --> 00:32:14,900
were actually get revisions and I had no

00:32:13,490 --> 00:32:16,310
reason to actually assume that that

00:32:14,900 --> 00:32:19,900
would always be the case and that

00:32:16,310 --> 00:32:22,930
stopped being the case a few days ago so

00:32:19,900 --> 00:32:26,330
so I fixed that but that's not on

00:32:22,930 --> 00:32:34,750
release 1909 yet but so I have to back

00:32:26,330 --> 00:32:37,670
port that we have some necessary

00:32:34,750 --> 00:32:41,450
impurities like the current system how

00:32:37,670 --> 00:32:44,660
are you handling this like AR 64 or X 66

00:32:41,450 --> 00:32:48,050
is for it's an impurity but it's like a

00:32:44,660 --> 00:32:57,800
requirement to work all are you handling

00:32:48,050 --> 00:33:00,260
it with as a reproducible manner I think

00:32:57,800 --> 00:33:03,770
the question was about a multi-platform

00:33:00,260 --> 00:33:10,220
support right so yeah so I hoped you

00:33:03,770 --> 00:33:11,330
wouldn't ask that so until last week or

00:33:10,220 --> 00:33:13,280
so it didn't actually have

00:33:11,330 --> 00:33:16,520
multi-platform support so the problem

00:33:13,280 --> 00:33:21,460
here is that you need to somehow pass in

00:33:16,520 --> 00:33:21,460
the system argument well you need to

00:33:22,990 --> 00:33:28,130
flakes want to be completely

00:33:25,600 --> 00:33:29,930
reproducible and if you pass in

00:33:28,130 --> 00:33:32,270
something like a system argument as a

00:33:29,930 --> 00:33:35,090
function argument to the flake then it

00:33:32,270 --> 00:33:37,160
would well it would be sort of

00:33:35,090 --> 00:33:39,050
reproducible but it would no longer be

00:33:37,160 --> 00:33:40,820
enumerable so you wouldn't be able to

00:33:39,050 --> 00:33:46,580
ask a flake what its contents are

00:33:40,820 --> 00:33:48,410
anymore and and and also passing in

00:33:46,580 --> 00:33:52,220
function arguments would open the door

00:33:48,410 --> 00:33:54,140
to all sorts of configuration and then

00:33:52,220 --> 00:33:56,180
before you know it you need a readme dot

00:33:54,140 --> 00:33:59,810
MD again to figure out how to build it

00:33:56,180 --> 00:34:01,670
so so might still do that in the future

00:33:59,810 --> 00:34:03,950
so maybe this is the most practical way

00:34:01,670 --> 00:34:09,169
to just have a system function argument

00:34:03,950 --> 00:34:12,080
there but for now what I've done is so

00:34:09,169 --> 00:34:14,190
the next command will just evaluate

00:34:12,080 --> 00:34:16,919
packages dot

00:34:14,190 --> 00:34:20,700
current system so so it's up to the

00:34:16,919 --> 00:34:23,429
flake to decide which platforms its

00:34:20,700 --> 00:34:25,919
support so this particular flake so it

00:34:23,429 --> 00:34:29,010
doesn't actually look like this in the

00:34:25,919 --> 00:34:32,339
real world it's written a bit more

00:34:29,010 --> 00:34:36,200
general so it it omits attributes for

00:34:32,339 --> 00:34:39,149
every platform that its supports so that

00:34:36,200 --> 00:34:41,669
it's a little bit more verbose that's a

00:34:39,149 --> 00:34:45,299
line of code per per output but it's not

00:34:41,669 --> 00:34:46,889
too bad so it's the responsibility of

00:34:45,299 --> 00:34:50,609
the flake to actually say what it

00:34:46,889 --> 00:34:53,339
supports now you could because it means

00:34:50,609 --> 00:34:55,950
you cannot build a flake on platforms

00:34:53,339 --> 00:34:59,220
that the flake offer it didn't choose to

00:34:55,950 --> 00:35:01,020
support but sort of in the flake

00:34:59,220 --> 00:35:05,579
philosophy the solution to that would

00:35:01,020 --> 00:35:07,589
always be to create another flake that

00:35:05,579 --> 00:35:12,900
pulls in the original flake and for

00:35:07,589 --> 00:35:15,270
instance uses its overlay to instantiate

00:35:12,900 --> 00:35:16,740
that package for whatever architecture

00:35:15,270 --> 00:35:20,730
or maybe even cross-compiled

00:35:16,740 --> 00:35:23,599
architecture you're interested in the

00:35:20,730 --> 00:35:28,500
packages output here is only something

00:35:23,599 --> 00:35:30,869
for Nick CLI and things like overlays or

00:35:28,500 --> 00:35:32,819
modules would work on any platform or

00:35:30,869 --> 00:35:34,230
well I mean they would evaluate on a

00:35:32,819 --> 00:35:42,150
platform whether they work is another

00:35:34,230 --> 00:35:44,940
question but we have two experiments

00:35:42,150 --> 00:35:46,650
about what the best approaches so we

00:35:44,940 --> 00:35:50,549
only have time for one more question and

00:35:46,650 --> 00:35:55,109
I think it was hi thanks for the talk

00:35:50,549 --> 00:35:57,029
was featured we were all waiting for the

00:35:55,109 --> 00:35:58,529
question I have when you were talking

00:35:57,029 --> 00:36:01,170
about Hydra and when you have the

00:35:58,529 --> 00:36:06,539
reproducible builds where you can click

00:36:01,170 --> 00:36:10,140
and you get the command yeah so the

00:36:06,539 --> 00:36:13,400
question is what if you have so this Nix

00:36:10,140 --> 00:36:17,520
home page depends on multiple other

00:36:13,400 --> 00:36:20,430
flakes and when you specified in the

00:36:17,520 --> 00:36:23,069
build this doesn't paint the other

00:36:20,430 --> 00:36:25,279
flakes which are not kind of under your

00:36:23,069 --> 00:36:25,279
control

00:36:26,400 --> 00:36:31,230
so the lockfile to kind of lock file

00:36:28,970 --> 00:36:33,780
recursively for all the flags that you

00:36:31,230 --> 00:36:36,750
also depend on well so it's actually not

00:36:33,780 --> 00:36:37,530
done recursively the top-level flake dot

00:36:36,750 --> 00:36:42,270
lock file

00:36:37,530 --> 00:36:45,330
locks all the all the dependencies also

00:36:42,270 --> 00:36:46,980
the transitive dependencies so so it

00:36:45,330 --> 00:36:48,600
would look at the flake that lock file

00:36:46,980 --> 00:36:51,030
off the nexus operates repository that

00:36:48,600 --> 00:36:54,630
locks everything so not just a top-level

00:36:51,030 --> 00:36:59,390
thing but also the transitive once so

00:36:54,630 --> 00:37:02,070
you have to have flake lock yes always

00:36:59,390 --> 00:37:05,250
exactly so what that doesn't do is if

00:37:02,070 --> 00:37:07,560
you want Hyder to be testing well to do

00:37:05,250 --> 00:37:10,140
actual integration test so to build next

00:37:07,560 --> 00:37:11,580
was home page against the latest version

00:37:10,140 --> 00:37:13,080
of those dependencies you currently

00:37:11,580 --> 00:37:15,930
cannot do that because it would require

00:37:13,080 --> 00:37:17,970
Hydra to update the flaked or lock file

00:37:15,930 --> 00:37:21,120
which in itself wouldn't be the problem

00:37:17,970 --> 00:37:23,070
but then it would have to register that

00:37:21,120 --> 00:37:25,140
flake or lock file somewhere to make it

00:37:23,070 --> 00:37:28,980
reproducible by user so it would have to

00:37:25,140 --> 00:37:30,570
store it in the database or so I mean

00:37:28,980 --> 00:37:35,210
that's that's not an unsolvable problem

00:37:30,570 --> 00:37:35,210
obviously but I haven't done that yet

00:37:37,250 --> 00:37:44,940
all right thank you

00:37:40,600 --> 00:37:44,940

YouTube URL: https://www.youtube.com/watch?v=UeBX7Ide5a0


