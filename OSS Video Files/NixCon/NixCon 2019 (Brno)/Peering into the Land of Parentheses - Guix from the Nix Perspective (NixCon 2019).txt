Title: Peering into the Land of Parentheses - Guix from the Nix Perspective (NixCon 2019)
Publication date: 2019-12-14
Playlist: NixCon 2019 (Brno)
Description: 
	Nix has a sibling, which looks very different, but functions in a very similar manner - Guix of the GNU project.
This talk will explore what exactly it is and, in particular, how it compares to Nix.
We look at whether Nix can take some inspiration from it and whether it is useful as a complimentary tool.
Captions: 
	00:00:00,390 --> 00:00:12,870
Daniel Shefford good morning everyone I

00:00:11,130 --> 00:00:15,360
hope you are still not tired from

00:00:12,870 --> 00:00:18,990
yesterday night's my talk is going to be

00:00:15,360 --> 00:00:21,510
on new gigs and what we can learn as

00:00:18,990 --> 00:00:24,510
Knicks from it I don't want to convince

00:00:21,510 --> 00:00:27,330
you to use gigs next is pretty good but

00:00:24,510 --> 00:00:31,050
I think it's useful useful to know what

00:00:27,330 --> 00:00:33,390
kick says so yeah my topics are going to

00:00:31,050 --> 00:00:36,870
be water Skeets how does it compare to

00:00:33,390 --> 00:00:38,340
Knicks whether that's any good if it's

00:00:36,870 --> 00:00:42,300
compatible with Knicks like if you can

00:00:38,340 --> 00:00:45,239
use both and what advantages it has what

00:00:42,300 --> 00:00:50,129
we can maybe integrate into Knicks so

00:00:45,239 --> 00:00:53,789
who of you has heard of geeks okay

00:00:50,129 --> 00:00:58,469
and who's actually used it odd for

00:00:53,789 --> 00:01:01,590
people okay so mean geeks why do I talk

00:00:58,469 --> 00:01:04,080
about geeks this summer I finished my

00:01:01,590 --> 00:01:06,000
bachelor's thesis and then Knicks Khan

00:01:04,080 --> 00:01:08,700
was announced so I thought hey I know a

00:01:06,000 --> 00:01:10,250
lot about Knicks I could talk but I

00:01:08,700 --> 00:01:13,350
didn't know what to talk about and

00:01:10,250 --> 00:01:14,780
somebody in this course they wrote it

00:01:13,350 --> 00:01:18,900
would be interesting to know about geeks

00:01:14,780 --> 00:01:25,799
so I thought I could try geek sense tell

00:01:18,900 --> 00:01:28,650
you guys about it so what is Skeets it's

00:01:25,799 --> 00:01:30,900
a function of package manager it's also

00:01:28,650 --> 00:01:34,170
a distribution with 100% declarative

00:01:30,900 --> 00:01:37,070
configuration which does transaction

00:01:34,170 --> 00:01:39,270
upgrades and roll backs and unprivileged

00:01:37,070 --> 00:01:41,460
package management so without root you

00:01:39,270 --> 00:01:45,420
can install packages this description

00:01:41,460 --> 00:01:48,119
might seem very familiar to you but

00:01:45,420 --> 00:01:51,869
geeks is not a language so there's the

00:01:48,119 --> 00:01:53,040
first difference yeah how do we come

00:01:51,869 --> 00:01:54,840
from Knicks to geeks

00:01:53,040 --> 00:01:57,600
it's basically and not the

00:01:54,840 --> 00:02:00,180
implementation of the ideas of Nixon

00:01:57,600 --> 00:02:02,369
excess so if you read a closed thesis or

00:02:00,180 --> 00:02:07,110
if you like the ideas of Knicks then

00:02:02,369 --> 00:02:09,239
geeks would appeal it to you but it's

00:02:07,110 --> 00:02:11,660
not just an implementation of the ideas

00:02:09,239 --> 00:02:14,630
it's pretty much every implementation

00:02:11,660 --> 00:02:16,400
Phenix expectations and Nick's OS so

00:02:14,630 --> 00:02:20,660
it's not a black box for implementation

00:02:16,400 --> 00:02:22,490
but with knowing their details so even

00:02:20,660 --> 00:02:24,020
as a user of Nick's if you know the

00:02:22,490 --> 00:02:25,850
commands everything is going to be

00:02:24,020 --> 00:02:27,290
really familiar to you it's going to

00:02:25,850 --> 00:02:29,000
have different names and the libraries

00:02:27,290 --> 00:02:31,220
are different like the standard library

00:02:29,000 --> 00:02:34,070
they use to configure their packages but

00:02:31,220 --> 00:02:35,810
it's very similar I think it's like a

00:02:34,070 --> 00:02:39,560
reimplementation in just a different

00:02:35,810 --> 00:02:41,720
language and to go even further one part

00:02:39,560 --> 00:02:46,940
of Peaks they're demon it's just

00:02:41,720 --> 00:02:48,710
basically a fork of next Steven but they

00:02:46,940 --> 00:02:50,240
now modified it a bit and it's

00:02:48,710 --> 00:02:53,330
incompatible because they have a

00:02:50,240 --> 00:02:56,210
different page in so it's not next even

00:02:53,330 --> 00:02:59,450
anymore yeah but really what is Keeks

00:02:56,210 --> 00:03:02,030
it's it's really just our Nicks and

00:02:59,450 --> 00:03:04,450
exercise with the different user

00:03:02,030 --> 00:03:08,210
interface my judgment user experience

00:03:04,450 --> 00:03:10,700
the commands are named differently the

00:03:08,210 --> 00:03:13,520
language is different but it feels like

00:03:10,700 --> 00:03:15,140
feels like Nick's but still all

00:03:13,520 --> 00:03:19,370
principles still apply everything you

00:03:15,140 --> 00:03:21,320
love about next is there but other than

00:03:19,370 --> 00:03:24,080
we they're working on hard support

00:03:21,320 --> 00:03:28,030
because it's a new project and they

00:03:24,080 --> 00:03:31,010
wanted to be the real Godot system so

00:03:28,030 --> 00:03:34,220
that's why they call it the new system

00:03:31,010 --> 00:03:37,360
it should be like the new projects

00:03:34,220 --> 00:03:40,220
ultimate operating system

00:03:37,360 --> 00:03:43,610
yeah they don't use Nick's they use

00:03:40,220 --> 00:03:44,570
their own language Lisp which is the

00:03:43,610 --> 00:03:47,150
good news

00:03:44,570 --> 00:03:49,850
yeah guile you're just chicken who's

00:03:47,150 --> 00:03:53,720
Lisp of course the bootloader they don't

00:03:49,850 --> 00:03:56,450
write in Lisp the corner they don't but

00:03:53,720 --> 00:03:59,810
then the innards Rama first image Ram

00:03:56,450 --> 00:04:04,040
disk they do write in scheme in Lisp and

00:03:59,810 --> 00:04:08,950
guy which we do in bash and then even

00:04:04,040 --> 00:04:11,840
their PID one they also write in Lisp

00:04:08,950 --> 00:04:13,910
the geeks demon like I said it's just a

00:04:11,840 --> 00:04:17,870
fork next demon but they also want to

00:04:13,910 --> 00:04:19,310
re-implement it in Gaia but it's not

00:04:17,870 --> 00:04:20,690
very important it's just an

00:04:19,310 --> 00:04:23,260
implementation detail for them it

00:04:20,690 --> 00:04:27,250
doesn't really matter that much so

00:04:23,260 --> 00:04:29,410
not too much of a near-term koi the

00:04:27,250 --> 00:04:32,890
peaks command-line tools they're also

00:04:29,410 --> 00:04:37,930
all written in guy and the surface

00:04:32,890 --> 00:04:40,450
configuration also because also the the

00:04:37,930 --> 00:04:43,750
inner demon you can configure using guy

00:04:40,450 --> 00:04:48,370
and then their package definitions they

00:04:43,750 --> 00:04:50,560
also write in Gaia and other than we we

00:04:48,370 --> 00:04:53,650
don't really write it in Nix we write it

00:04:50,560 --> 00:04:57,310
in Nick slash shader like you all have a

00:04:53,650 --> 00:04:59,950
lot of bash interfaces so it's not

00:04:57,310 --> 00:05:02,110
really pure Nix what we do they write

00:04:59,950 --> 00:05:04,960
their faces and even their wrappers in

00:05:02,110 --> 00:05:08,380
Lisp so here for example is the X

00:05:04,960 --> 00:05:11,770
wrapper maybe you can understand a bit

00:05:08,380 --> 00:05:16,060
set and it said it sets the environment

00:05:11,770 --> 00:05:18,430
variable and then it basically runs X

00:05:16,060 --> 00:05:20,680
with some configuration and the

00:05:18,430 --> 00:05:22,570
environment variable it's not the real

00:05:20,680 --> 00:05:25,330
one it's simplified but just to give you

00:05:22,570 --> 00:05:30,610
an idea that they really do everything

00:05:25,330 --> 00:05:33,250
in Lisp okay what kind of Lisp do they

00:05:30,610 --> 00:05:36,640
write you maybe know lists from computer

00:05:33,250 --> 00:05:38,710
science classes but it's different they

00:05:36,640 --> 00:05:41,470
don't use the Lisp which is based purely

00:05:38,710 --> 00:05:45,870
on lists so it's not littered with

00:05:41,470 --> 00:05:48,670
Caracara and all these weird functions

00:05:45,870 --> 00:05:50,470
yeah they in their manual they write

00:05:48,670 --> 00:05:52,120
please use appropriate datatypes don't

00:05:50,470 --> 00:05:54,880
do everything with lists they have

00:05:52,120 --> 00:05:59,380
attribute sets and records and actually

00:05:54,880 --> 00:06:01,680
useful types yeah because they don't

00:05:59,380 --> 00:06:04,360
build their own Lisp they use the guy'll

00:06:01,680 --> 00:06:06,280
they already have mature language with

00:06:04,360 --> 00:06:10,390
the huge ecosystem a debugger for

00:06:06,280 --> 00:06:14,830
example yeah which is useful if you want

00:06:10,390 --> 00:06:18,490
to start something from from new to use

00:06:14,830 --> 00:06:20,970
something existing to build on top yeah

00:06:18,490 --> 00:06:23,680
this was also untyped like nicks but

00:06:20,970 --> 00:06:27,460
they attribute sets they are like

00:06:23,680 --> 00:06:30,660
Haskell records you have to to build

00:06:27,460 --> 00:06:30,660
them they must be complete

00:06:31,069 --> 00:06:35,839
in their manual they require that every

00:06:33,710 --> 00:06:38,059
top level function has to have a doc

00:06:35,839 --> 00:06:41,719
string which is pretty cool which we

00:06:38,059 --> 00:06:43,099
don't always have and they mandate that

00:06:41,719 --> 00:06:44,869
their list was written in a purely

00:06:43,099 --> 00:06:47,779
functional style the language doesn't

00:06:44,869 --> 00:06:51,349
mandate it but they're their sky a test

00:06:47,779 --> 00:06:55,009
I guides does so you could say they also

00:06:51,349 --> 00:06:57,050
have a purely functional language even

00:06:55,009 --> 00:07:00,979
has pattern matching with Lisp macros

00:06:57,050 --> 00:07:02,869
you can do everything yeah and because

00:07:00,979 --> 00:07:04,849
they have Lisp they can change their

00:07:02,869 --> 00:07:07,460
language easily we are stuck with our

00:07:04,849 --> 00:07:10,909
language for example now we have the RFC

00:07:07,460 --> 00:07:15,740
45 where we want to remove the unquote

00:07:10,909 --> 00:07:17,300
at your a type but for us it's really

00:07:15,740 --> 00:07:19,939
hard to remove because then we break the

00:07:17,300 --> 00:07:21,559
language and then nobody can use oiled

00:07:19,939 --> 00:07:23,449
codes if they have the new language

00:07:21,559 --> 00:07:27,830
implementation but for them the language

00:07:23,449 --> 00:07:29,689
is just a library one advantage that I

00:07:27,830 --> 00:07:32,059
found is that you can really easily find

00:07:29,689 --> 00:07:33,649
definitions index packages I often have

00:07:32,059 --> 00:07:35,629
the problem where as this next function

00:07:33,649 --> 00:07:39,469
defined or where's this shape function

00:07:35,629 --> 00:07:42,289
defined it's that's easy to find but

00:07:39,469 --> 00:07:45,550
with Lisp you can just recursively

00:07:42,289 --> 00:07:47,959
search for the name and grab define

00:07:45,550 --> 00:07:50,539
because always defines in the same line

00:07:47,959 --> 00:07:54,039
as the name we can really easily find

00:07:50,539 --> 00:07:58,300
the definition without much structured

00:07:54,039 --> 00:07:58,300
searching just scrapping

00:08:01,580 --> 00:08:06,890
yeah what's four things is geeks focused

00:08:05,330 --> 00:08:10,730
on because it's a canoe project it's

00:08:06,890 --> 00:08:13,040
very ignorant fsfe so they don't have

00:08:10,730 --> 00:08:16,280
any proprietary software in there they

00:08:13,040 --> 00:08:17,420
also don't have any mentions of

00:08:16,280 --> 00:08:22,010
proprietary software

00:08:17,420 --> 00:08:24,760
it's all very strict so they don't have

00:08:22,010 --> 00:08:27,320
Firefox because Firefox use some

00:08:24,760 --> 00:08:34,370
trademarked images from the Mozilla

00:08:27,320 --> 00:08:37,310
Foundation one other focus they have is

00:08:34,370 --> 00:08:40,160
to reduce the binary bootstrap there's

00:08:37,310 --> 00:08:41,990
the new mess project and they have

00:08:40,160 --> 00:08:44,450
achieved to reduce the bootstrap

00:08:41,990 --> 00:08:48,170
binaries from size of 250 megabytes to

00:08:44,450 --> 00:08:49,760
just 120 which maybe we couldn't take

00:08:48,170 --> 00:08:53,450
some inspiration from and try to reduce

00:08:49,760 --> 00:08:56,810
our bootstrap they also very much

00:08:53,450 --> 00:08:58,850
focused on reproducible bits so they

00:08:56,810 --> 00:09:03,290
have integrated into the geek speed

00:08:58,850 --> 00:09:06,950
command the rounds option to say I want

00:09:03,290 --> 00:09:09,260
to build this comma this package 5 times

00:09:06,950 --> 00:09:13,490
and then check whether all of them are

00:09:09,260 --> 00:09:15,050
equal and also Peaks Challenge which if

00:09:13,490 --> 00:09:17,300
you build something locally you can

00:09:15,050 --> 00:09:20,210
challenge the binary cash and then

00:09:17,300 --> 00:09:21,620
compare whether the outputs are exactly

00:09:20,210 --> 00:09:23,090
the same so you don't have to

00:09:21,620 --> 00:09:24,860
necessarily trust your binary cash you

00:09:23,090 --> 00:09:28,910
can challenge it and see whether that's

00:09:24,860 --> 00:09:32,180
actually trustworthy and also they seem

00:09:28,910 --> 00:09:36,920
to focus on science so there are two

00:09:32,180 --> 00:09:38,660
most the two best contributors work for

00:09:36,920 --> 00:09:41,180
the French computer science research

00:09:38,660 --> 00:09:45,080
institution India for high-performance

00:09:41,180 --> 00:09:48,940
computing and the other one on medicine

00:09:45,080 --> 00:09:51,680
and molecular medicine lab in Berlin and

00:09:48,940 --> 00:09:54,410
they try to use geeks not just for

00:09:51,680 --> 00:09:58,730
computer people but also for medicine

00:09:54,410 --> 00:10:01,370
researchers ok how does it compare to

00:09:58,730 --> 00:10:02,810
Nix that's what we really care about we

00:10:01,370 --> 00:10:04,340
you don't want to switch to beaks we

00:10:02,810 --> 00:10:08,000
want to know what's the difference what

00:10:04,340 --> 00:10:09,830
can we maybe take so here's a quick

00:10:08,000 --> 00:10:11,320
overview of some things I already listed

00:10:09,830 --> 00:10:13,180
and some new things

00:10:11,320 --> 00:10:17,470
put the demon they basically use the

00:10:13,180 --> 00:10:20,260
next demon which is a fork language we

00:10:17,470 --> 00:10:23,290
use basically Nick /l and they just use

00:10:20,260 --> 00:10:25,570
guy they also have a distribution

00:10:23,290 --> 00:10:28,270
they don't do system D of course because

00:10:25,570 --> 00:10:31,690
system D is bloated and everything the

00:10:28,270 --> 00:10:33,760
license of course is GPA they used to

00:10:31,690 --> 00:10:38,410
use Hydra and now they built their own

00:10:33,760 --> 00:10:40,740
thing which called Kira's they got their

00:10:38,410 --> 00:10:43,540
store at new slash store and

00:10:40,740 --> 00:10:47,080
interestingly they don't put their very

00:10:43,540 --> 00:10:50,640
very there are temporary files also

00:10:47,080 --> 00:10:52,780
under / new but mother / bar and

00:10:50,640 --> 00:10:56,250
interesting is their documentation

00:10:52,780 --> 00:10:58,780
format isn't a doc Bach but tech info

00:10:56,250 --> 00:11:00,640
which we've had recently some discussion

00:10:58,780 --> 00:11:04,390
about because docbook is very complex

00:11:00,640 --> 00:11:06,640
and not easy to contribute to many

00:11:04,390 --> 00:11:09,430
people probably don't know tech info but

00:11:06,640 --> 00:11:14,200
it looks like it's easier to learn at

00:11:09,430 --> 00:11:16,030
least so the Guinness Shepherds they

00:11:14,200 --> 00:11:19,870
assistant D replacement it's not really

00:11:16,030 --> 00:11:23,260
anything special it's looks like just

00:11:19,870 --> 00:11:25,840
another system v in it yeah it doesn't

00:11:23,260 --> 00:11:31,240
have any as much functionality as system

00:11:25,840 --> 00:11:33,490
D but it's pretty usable for the

00:11:31,240 --> 00:11:36,310
configuration they don't use bash or

00:11:33,490 --> 00:11:39,070
charge scripts but a lisp configuration

00:11:36,310 --> 00:11:44,410
so it's at least I think less prone to

00:11:39,070 --> 00:11:46,150
breaking and yeah they don't have all

00:11:44,410 --> 00:11:48,250
the functionally integrated but they can

00:11:46,150 --> 00:11:53,620
use for example for socket activation

00:11:48,250 --> 00:11:54,880
the energy demon what I noticed is that

00:11:53,620 --> 00:11:56,950
or what I was missing

00:11:54,880 --> 00:11:59,830
they don't have Janet Eve but just

00:11:56,950 --> 00:12:01,750
syslog D so the cool journal cgi

00:11:59,830 --> 00:12:03,430
commands don't work for the surfaces

00:12:01,750 --> 00:12:06,760
it's harder to find the logs of a

00:12:03,430 --> 00:12:08,830
particular surface okay this is what

00:12:06,760 --> 00:12:10,540
their operating system configuration

00:12:08,830 --> 00:12:14,500
looks like which would be our ATC

00:12:10,540 --> 00:12:16,150
connects configuration which is like an

00:12:14,500 --> 00:12:19,260
attribute set called operating system

00:12:16,150 --> 00:12:21,720
and then there they define some

00:12:19,260 --> 00:12:25,680
attributes like the hostname times

00:12:21,720 --> 00:12:27,870
loci yeah they can do everything we can

00:12:25,680 --> 00:12:30,720
put loader file system users and then

00:12:27,870 --> 00:12:33,960
the install packages and services but

00:12:30,720 --> 00:12:35,970
they don't have modules everything is a

00:12:33,960 --> 00:12:40,410
service for them which I'll come back to

00:12:35,970 --> 00:12:44,970
later ok here is some example for the

00:12:40,410 --> 00:12:47,070
file system yeah the file system is also

00:12:44,970 --> 00:12:48,870
just an attribute that maybe you can

00:12:47,070 --> 00:12:53,780
recognize it if you ignore the

00:12:48,870 --> 00:12:55,950
parentheses but what they don't do is

00:12:53,780 --> 00:12:58,530
modules so they don't have multiple

00:12:55,950 --> 00:13:01,920
files that just get merge together here

00:12:58,530 --> 00:13:04,080
you explicitly have to combine your file

00:13:01,920 --> 00:13:06,630
systems so you have the base file

00:13:04,080 --> 00:13:09,960
systems which are proc and sisyphus and

00:13:06,630 --> 00:13:12,900
things like this and you have to mention

00:13:09,960 --> 00:13:15,980
it and then add your own cons your own

00:13:12,900 --> 00:13:19,530
file systems so it's explicitly

00:13:15,980 --> 00:13:22,400
explicitly combined isn't just merged

00:13:19,530 --> 00:13:25,710
from somewhere defined in mixed packages

00:13:22,400 --> 00:13:27,900
for the services they do the same so we

00:13:25,710 --> 00:13:30,420
append to the base surfaces they also

00:13:27,900 --> 00:13:32,100
have predefined desktop services where

00:13:30,420 --> 00:13:36,750
you have everything you need for a

00:13:32,100 --> 00:13:38,430
desktop yeah there's nothing else you

00:13:36,750 --> 00:13:39,890
can do there's no module that you can

00:13:38,430 --> 00:13:41,940
import that can do just anything

00:13:39,890 --> 00:13:44,400
everything else that you want to do is

00:13:41,940 --> 00:13:50,220
via service so our service is almost

00:13:44,400 --> 00:13:52,260
equivalent to a module so if not if we

00:13:50,220 --> 00:13:58,020
can't just merge from anywhere how do

00:13:52,260 --> 00:14:00,420
you combine things for example the

00:13:58,020 --> 00:14:07,770
Shepherd defines all the surfaces all

00:14:00,420 --> 00:14:09,180
the system services if now if depots and

00:14:07,770 --> 00:14:11,490
you don't know want to create both the

00:14:09,180 --> 00:14:13,320
service they can't modify the Shepherd

00:14:11,490 --> 00:14:13,589
because you can't just merge inside of

00:14:13,320 --> 00:14:17,150
it

00:14:13,589 --> 00:14:19,890
so what they do is extend the services

00:14:17,150 --> 00:14:22,589
so deeper says I want to extend the

00:14:19,890 --> 00:14:24,810
Shepherd with my own system service

00:14:22,589 --> 00:14:26,850
configuration and you def does the same

00:14:24,810 --> 00:14:30,690
and then Shepherd does the logic for

00:14:26,850 --> 00:14:32,600
combining those so here for example is

00:14:30,690 --> 00:14:36,959
the Apache service

00:14:32,600 --> 00:14:40,740
what just defines is its name and the

00:14:36,959 --> 00:14:44,339
extensions so which services the Apache

00:14:40,740 --> 00:14:46,860
extends and Apache it's also simplified

00:14:44,339 --> 00:14:47,819
it's not everything Apache has some

00:14:46,860 --> 00:14:51,870
Shepherds

00:14:47,819 --> 00:14:54,899
team a shepherd service and yeah we just

00:14:51,870 --> 00:14:57,569
say extend the shepherd with our Apache

00:14:54,899 --> 00:14:59,699
services and because it also uses some

00:14:57,569 --> 00:15:02,370
accounts to run those services it

00:14:59,699 --> 00:15:04,800
extends the account service type so the

00:15:02,370 --> 00:15:09,029
account is not really a service but Nick

00:15:04,800 --> 00:15:10,889
saw us speak it would be a module yeah

00:15:09,029 --> 00:15:14,160
and then every service that's extendable

00:15:10,889 --> 00:15:18,240
defines compose and extend so if you

00:15:14,160 --> 00:15:22,499
want to define your own Apache virtual

00:15:18,240 --> 00:15:25,790
server you extend this configuration and

00:15:22,499 --> 00:15:28,649
compose defines how these different

00:15:25,790 --> 00:15:30,870
extensions are combined so here

00:15:28,649 --> 00:15:35,279
concatenate is just we take them all and

00:15:30,870 --> 00:15:37,410
put them in lists and extends you can

00:15:35,279 --> 00:15:39,839
define a function how to take this list

00:15:37,410 --> 00:15:44,339
and transform it into the Apache

00:15:39,839 --> 00:15:47,220
configuration so nobody can just come

00:15:44,339 --> 00:15:49,980
and import a module which arbitrarily

00:15:47,220 --> 00:15:53,309
redefines Apache Apache has control over

00:15:49,980 --> 00:15:56,970
how you can modify it and this is how

00:15:53,309 --> 00:15:58,920
you define a package so it should look

00:15:56,970 --> 00:16:02,720
very familiar to you you define the name

00:15:58,920 --> 00:16:05,670
P name first version and the source

00:16:02,720 --> 00:16:09,240
which you fetch from somewhere Matar boy

00:16:05,670 --> 00:16:11,009
with the hash you have synopsis

00:16:09,240 --> 00:16:14,309
description home page license and

00:16:11,009 --> 00:16:19,050
everything but what they have is you

00:16:14,309 --> 00:16:21,629
don't see like make derivation or Python

00:16:19,050 --> 00:16:24,809
package just poke make derivation you

00:16:21,629 --> 00:16:27,600
have how it's built here in an attribute

00:16:24,809 --> 00:16:30,209
so here they say this package is paid

00:16:27,600 --> 00:16:31,920
using the new bid system if it was a

00:16:30,209 --> 00:16:35,670
Python package would be Python bid

00:16:31,920 --> 00:16:37,050
system so it's not the bait system

00:16:35,670 --> 00:16:39,899
doesn't define the structure of the

00:16:37,050 --> 00:16:43,529
thing it's just another attribute inside

00:16:39,899 --> 00:16:44,529
so all different packages for different

00:16:43,529 --> 00:16:46,689
languages they look

00:16:44,529 --> 00:16:51,459
same they're just modified from the

00:16:46,689 --> 00:16:54,329
inside and overriding is also very easy

00:16:51,459 --> 00:16:57,490
you just declare another package and

00:16:54,329 --> 00:16:59,290
inherit from a different package which

00:16:57,490 --> 00:17:02,160
takes all attributes from the other

00:16:59,290 --> 00:17:05,829
package and then you can override

00:17:02,160 --> 00:17:10,089
anything you want so here we just use no

00:17:05,829 --> 00:17:12,900
TLS with an older version of Gaia and we

00:17:10,089 --> 00:17:17,130
override the inputs with a different guy

00:17:12,900 --> 00:17:20,530
but we here we also don't just

00:17:17,130 --> 00:17:24,429
implicitly merge we take the inputs of

00:17:20,530 --> 00:17:27,459
the odds new TLS and we delete in that

00:17:24,429 --> 00:17:30,400
list the glue TLS that was there and

00:17:27,459 --> 00:17:34,450
replaced it without so everything is

00:17:30,400 --> 00:17:37,270
very explicit yeah they have lots of

00:17:34,450 --> 00:17:39,520
builders so it's it's very new but they

00:17:37,270 --> 00:17:42,700
seem to be very mature already you can

00:17:39,520 --> 00:17:44,860
build all of these they even have Linux

00:17:42,700 --> 00:17:47,049
module so you couldn't say Linux module

00:17:44,860 --> 00:17:49,570
and it automatically defines the

00:17:47,049 --> 00:17:51,789
environment variables that the Linux

00:17:49,570 --> 00:17:54,490
build system needs to install the

00:17:51,789 --> 00:17:57,100
modules into which we don't have I think

00:17:54,490 --> 00:18:00,669
we need to define those ourselves in

00:17:57,100 --> 00:18:05,200
each new module which we could do and

00:18:00,669 --> 00:18:08,190
remove this redundancy so how would they

00:18:05,200 --> 00:18:10,419
define these different build systems is

00:18:08,190 --> 00:18:13,649
this for example let's go

00:18:10,419 --> 00:18:16,780
they just modify the phases so

00:18:13,649 --> 00:18:20,020
everything is the same go just the go

00:18:16,780 --> 00:18:22,090
bit some just modifies the phases it

00:18:20,020 --> 00:18:24,850
does something before the unpack it

00:18:22,090 --> 00:18:28,330
reads the regular new bootstrap code

00:18:24,850 --> 00:18:31,179
doesn't have configure some other things

00:18:28,330 --> 00:18:34,030
and it replaces the build with goes on

00:18:31,179 --> 00:18:39,460
builds function and does its own check

00:18:34,030 --> 00:18:42,130
and install yeah but it's Keeks any good

00:18:39,460 --> 00:18:43,000
is it as good as Nix we know Nix is

00:18:42,130 --> 00:18:44,909
really good you can use it for

00:18:43,000 --> 00:18:49,690
everything for your laptop or service

00:18:44,909 --> 00:18:52,080
but what about geeks what I noticed when

00:18:49,690 --> 00:18:54,360
installing was that there's no

00:18:52,080 --> 00:18:55,919
Nixon's generate conflict so it doesn't

00:18:54,360 --> 00:18:59,240
detect what's on your system and build a

00:18:55,919 --> 00:19:01,649
convict from that but they have a

00:18:59,240 --> 00:19:06,990
graphical installer right out

00:19:01,649 --> 00:19:10,169
graphically but N cross is based fish or

00:19:06,990 --> 00:19:12,360
any different shade works pretty way in

00:19:10,169 --> 00:19:14,519
Nick's if you defined your user shell as

00:19:12,360 --> 00:19:16,919
some other shell you have to do some

00:19:14,519 --> 00:19:19,529
other configuration to build to make it

00:19:16,919 --> 00:19:23,360
usable and also in there Nick's shell

00:19:19,529 --> 00:19:26,309
equivalent at a different chair is

00:19:23,360 --> 00:19:27,720
launched in the sub show in Nick's if

00:19:26,309 --> 00:19:31,320
you have a different trail and you call

00:19:27,720 --> 00:19:35,309
Nick show your back into bash but it's

00:19:31,320 --> 00:19:39,330
reads your trail variable and launches

00:19:35,309 --> 00:19:42,269
that shell inside they also have a ps1

00:19:39,330 --> 00:19:43,860
indicator solid your command line says

00:19:42,269 --> 00:19:46,220
in the front that you are actually in a

00:19:43,860 --> 00:19:46,220
good story

00:19:46,429 --> 00:19:53,039
yeah there's no Reaper test so you

00:19:50,070 --> 00:19:55,350
always have to reboot switch which

00:19:53,039 --> 00:19:56,639
usually I always test because I make so

00:19:55,350 --> 00:20:01,740
many changes now I don't want to litter

00:19:56,639 --> 00:20:04,230
my bootloader and yeah they don't have

00:20:01,740 --> 00:20:06,480
user pin and by default only pin Sh but

00:20:04,230 --> 00:20:09,510
you can really really easily configure

00:20:06,480 --> 00:20:11,639
it they have no package maintainer

00:20:09,510 --> 00:20:13,289
there's an attribute for the package

00:20:11,639 --> 00:20:15,840
thing to define a maintainer who

00:20:13,289 --> 00:20:18,059
maintains this package but they don't

00:20:15,840 --> 00:20:20,940
really use it there's six usages of it

00:20:18,059 --> 00:20:24,889
and all of them are defined - back -

00:20:20,940 --> 00:20:24,889
Keeks slash at guca new doc

00:20:30,540 --> 00:20:37,809
okay some limitations what was most what

00:20:35,440 --> 00:20:40,559
was the worst for me they don't and they

00:20:37,809 --> 00:20:43,630
cannot put the root filesystem on IBM

00:20:40,559 --> 00:20:46,570
they have encryption support with looks

00:20:43,630 --> 00:20:48,490
but no lbm otherwise I would have

00:20:46,570 --> 00:20:50,380
installed it on my laptop but it seems

00:20:48,490 --> 00:20:53,020
really easy and makes us I think it's

00:20:50,380 --> 00:20:57,520
just one simple command in the init file

00:20:53,020 --> 00:21:00,150
system in the drama fest but yeah nobody

00:20:57,520 --> 00:21:04,720
cares somebody tried four years ago but

00:21:00,150 --> 00:21:07,450
didn't go anywhere also you cannot build

00:21:04,720 --> 00:21:09,940
a package or run a system test without

00:21:07,450 --> 00:21:11,559
compiling all the geeks modules and on

00:21:09,940 --> 00:21:14,080
my system on my laptop takes half an

00:21:11,559 --> 00:21:21,940
hour so they can't really have out of

00:21:14,080 --> 00:21:26,350
tree system tests if you import a module

00:21:21,940 --> 00:21:28,840
like the not system module but the Gaia

00:21:26,350 --> 00:21:31,240
module and it has a syntax error for

00:21:28,840 --> 00:21:32,170
example omitting missing parentheses it

00:21:31,240 --> 00:21:34,600
doesn't give you any error

00:21:32,170 --> 00:21:39,580
it says module not found which is not

00:21:34,600 --> 00:21:42,340
very helpful yeah they have like I said

00:21:39,580 --> 00:21:45,700
all free software so the the next leap

00:21:42,340 --> 00:21:49,690
O'Conner without the drivers proprietary

00:21:45,700 --> 00:21:51,309
blobs so yeah if you like if you fall

00:21:49,690 --> 00:21:53,410
into free software might be good for you

00:21:51,309 --> 00:21:59,770
but otherwise you would have to define

00:21:53,410 --> 00:22:02,410
your own packages compatibility yeah the

00:21:59,770 --> 00:22:04,240
sauce is is not compatible obviously

00:22:02,410 --> 00:22:06,760
because it's different language but you

00:22:04,240 --> 00:22:08,470
can't also just take a single package

00:22:06,760 --> 00:22:11,170
definitions and maybe integrated in

00:22:08,470 --> 00:22:12,460
tunics because they have a different

00:22:11,170 --> 00:22:15,700
standard library and everything it

00:22:12,460 --> 00:22:17,530
depends on the entire ecosystem then the

00:22:15,700 --> 00:22:18,940
next layer they have an intermediate

00:22:17,530 --> 00:22:22,210
representation between source and

00:22:18,940 --> 00:22:26,110
derivation a bag I haven't looked much

00:22:22,210 --> 00:22:29,920
into it but we don't have this oh this

00:22:26,110 --> 00:22:33,570
should say derivation oh no ok

00:22:29,920 --> 00:22:36,880
I added last minute yeah the demon is

00:22:33,570 --> 00:22:39,179
not compatible because they renamed some

00:22:36,880 --> 00:22:41,340
patents so

00:22:39,179 --> 00:22:43,110
you can't use just their command-line

00:22:41,340 --> 00:22:44,909
tools with our demon it doesn't work

00:22:43,110 --> 00:22:47,399
anymore

00:22:44,909 --> 00:22:48,620
also the derivation doesn't work because

00:22:47,399 --> 00:22:50,399
the pigeons

00:22:48,620 --> 00:22:52,190
yeah they don't really care about

00:22:50,399 --> 00:22:54,899
compatibility anymore

00:22:52,190 --> 00:22:59,330
also they've renamed lots of environment

00:22:54,899 --> 00:23:04,620
variables from NYX to new

00:22:59,330 --> 00:23:06,179
yeah just for branding the output yeah

00:23:04,620 --> 00:23:10,169
this is compatible because it's just a

00:23:06,179 --> 00:23:14,869
file system tree so maybe we could call

00:23:10,169 --> 00:23:20,070
geeks from NYX and integrate it that way

00:23:14,869 --> 00:23:21,749
okay what can we learn from beets it's a

00:23:20,070 --> 00:23:24,749
unique name it's much easier to search

00:23:21,749 --> 00:23:26,970
for if you search for NYX you mostly

00:23:24,749 --> 00:23:29,369
find UNIX things for example the rust

00:23:26,970 --> 00:23:31,649
grade which is called NYX just some UNIX

00:23:29,369 --> 00:23:34,169
things and it's also much less funny if

00:23:31,649 --> 00:23:37,320
you touch your German because NYX means

00:23:34,169 --> 00:23:42,690
nothing and you can say what are you

00:23:37,320 --> 00:23:44,460
doing NYX I'm doing nothing yeah they

00:23:42,690 --> 00:23:45,960
have a graphical installer which is I

00:23:44,460 --> 00:23:49,499
think even better than their

00:23:45,960 --> 00:23:54,299
command-line installer yeah we should do

00:23:49,499 --> 00:23:56,279
that for our new users woah what they

00:23:54,299 --> 00:24:01,289
can do is geeks environment is their

00:23:56,279 --> 00:24:03,690
next level and they can go into next

00:24:01,289 --> 00:24:06,240
child with the dependencies of a program

00:24:03,690 --> 00:24:09,570
to build dependencies and also add some

00:24:06,240 --> 00:24:14,220
other packages which mixer you can't do

00:24:09,570 --> 00:24:17,820
minus a and then minus P something they

00:24:14,220 --> 00:24:19,649
have a snippet thing so in when you

00:24:17,820 --> 00:24:23,009
define a package in the sauce you can

00:24:19,649 --> 00:24:26,549
say on this sauce I want to run some

00:24:23,009 --> 00:24:28,950
commands so it's not in the package that

00:24:26,549 --> 00:24:30,990
you modify the sauce but in the source

00:24:28,950 --> 00:24:33,059
attribute directly so I think it fits

00:24:30,990 --> 00:24:36,690
better in the sauce rather than all of

00:24:33,059 --> 00:24:39,119
the package they even have a Linux

00:24:36,690 --> 00:24:43,409
policy which we've discussed recently

00:24:39,119 --> 00:24:46,350
and there's also an RFC but they say it

00:24:43,409 --> 00:24:49,110
only works for foreign distros we are we

00:24:46,350 --> 00:24:51,010
want to do this yeah they already happen

00:24:49,110 --> 00:24:54,669
to maybe we can take some

00:24:51,010 --> 00:24:57,070
inspiration they can replace their faces

00:24:54,669 --> 00:25:02,320
without deleting the hooks which we

00:24:57,070 --> 00:25:04,330
can't because they are in the share they

00:25:02,320 --> 00:25:06,490
can do native compilation for foreign

00:25:04,330 --> 00:25:09,370
architectures so they can do across

00:25:06,490 --> 00:25:12,460
compilations but they can also compile

00:25:09,370 --> 00:25:15,970
for a different architecture by putting

00:25:12,460 --> 00:25:18,669
the compiler inside qmu which is

00:25:15,970 --> 00:25:20,260
integrated into their command line which

00:25:18,669 --> 00:25:22,330
is really cool it's lower but for some

00:25:20,260 --> 00:25:26,559
times might be useful if cross-compiling

00:25:22,330 --> 00:25:28,840
doesn't work there Nix che has -

00:25:26,559 --> 00:25:31,240
Martin's container so you could you can

00:25:28,840 --> 00:25:32,620
have a mixture inside a container you

00:25:31,240 --> 00:25:35,530
can even say I don't want Network in

00:25:32,620 --> 00:25:37,690
there I don't want anything yeah which

00:25:35,530 --> 00:25:40,840
is pretty cool lots of people asked lots

00:25:37,690 --> 00:25:43,360
of newbies ask my nixar it has all these

00:25:40,840 --> 00:25:45,070
things from my environment why does this

00:25:43,360 --> 00:25:47,049
happen I thought next step was pure and

00:25:45,070 --> 00:25:51,250
a completely isolated with this it's

00:25:47,049 --> 00:25:54,190
much more isolated are they can build

00:25:51,250 --> 00:25:56,290
their system not just build a VM image

00:25:54,190 --> 00:26:02,049
out of it but build a common container

00:25:56,290 --> 00:26:04,240
like Nexus reboot container Python 3 is

00:26:02,049 --> 00:26:07,150
already default for them for us

00:26:04,240 --> 00:26:12,840
I think it's not and so they are already

00:26:07,150 --> 00:26:12,840
in 2020 with a Python to deprecation

00:26:14,700 --> 00:26:19,630
graph quickly I don't have much time

00:26:16,960 --> 00:26:22,480
crafts is basically you can replace a

00:26:19,630 --> 00:26:24,809
package with the patched one and it

00:26:22,480 --> 00:26:29,049
rewrites all dependencies without

00:26:24,809 --> 00:26:30,220
rebuilding them but yeah by rewriting

00:26:29,049 --> 00:26:32,260
all the binaries and everything

00:26:30,220 --> 00:26:33,490
obviously it only works if the name is

00:26:32,260 --> 00:26:37,090
exactly the same because they're

00:26:33,490 --> 00:26:38,679
rewriting the binary but it's I guess

00:26:37,090 --> 00:26:39,970
it's good for some if you don't want to

00:26:38,679 --> 00:26:42,970
rebuild everything you just want to

00:26:39,970 --> 00:26:46,780
quickly patch something what they have

00:26:42,970 --> 00:26:49,840
is geeks pack so he can export a

00:26:46,780 --> 00:26:51,640
derivation as a tar boy and then you can

00:26:49,840 --> 00:26:53,980
just on a different distribution you can

00:26:51,640 --> 00:26:57,520
just unpack it and unpack saved in slash

00:26:53,980 --> 00:27:01,440
canoe and you can run it you can also

00:26:57,520 --> 00:27:01,440
export it to docker or squash FS

00:27:02,260 --> 00:27:06,950
the problem here is it has to write to

00:27:05,330 --> 00:27:10,460
the new store so if you're not rooted

00:27:06,950 --> 00:27:14,000
doesn't work but they have relocatable

00:27:10,460 --> 00:27:15,710
option which just puts it into the

00:27:14,000 --> 00:27:17,510
namespace and then you have it under

00:27:15,710 --> 00:27:19,310
slash can you stir straw and if you

00:27:17,510 --> 00:27:24,080
don't have root or not know namespaces

00:27:19,310 --> 00:27:27,050
it uses P root automatically yeah what

00:27:24,080 --> 00:27:28,880
we can learn also is they have lots of

00:27:27,050 --> 00:27:32,300
translations for the manual and even

00:27:28,880 --> 00:27:34,220
description of packages and their

00:27:32,300 --> 00:27:38,900
command line I think is more integrated

00:27:34,220 --> 00:27:41,950
and more opinionated yeah Aiko talked

00:27:38,900 --> 00:27:45,350
about yesterday that with the next to

00:27:41,950 --> 00:27:46,970
you like we have next to with a nice

00:27:45,350 --> 00:27:50,750
command line but we also have the other

00:27:46,970 --> 00:27:53,060
towards and we should really move those

00:27:50,750 --> 00:27:57,470
towards into one so we have something

00:27:53,060 --> 00:27:59,510
integrated yeah they have an official

00:27:57,470 --> 00:28:02,510
code formatter which we have some but

00:27:59,510 --> 00:28:04,670
not official yeah unified command line

00:28:02,510 --> 00:28:06,400
they have Keeks deploy integrated into

00:28:04,670 --> 00:28:09,500
the command like we have Nick so ops

00:28:06,400 --> 00:28:14,180
they have geeks lint which Lintz the

00:28:09,500 --> 00:28:18,380
packages so it tells you it checks the

00:28:14,180 --> 00:28:21,440
best practices and they have geeks

00:28:18,380 --> 00:28:23,720
import to import packages from somewhere

00:28:21,440 --> 00:28:25,880
so I can say import pi PI this package

00:28:23,720 --> 00:28:28,040
and it creates a geeks description of

00:28:25,880 --> 00:28:29,930
this package they also have Keeks import

00:28:28,040 --> 00:28:32,710
nick's but it doesn't really work

00:28:29,930 --> 00:28:35,030
anymore i think they just don't care

00:28:32,710 --> 00:28:38,870
they also have geeks refresh command

00:28:35,030 --> 00:28:43,640
which is like Brian TM it checks the

00:28:38,870 --> 00:28:45,500
upstream of this package and then tells

00:28:43,640 --> 00:28:48,230
you if there's a new version and also

00:28:45,500 --> 00:28:51,800
tells you the new their new source code

00:28:48,230 --> 00:28:55,940
for it yeah the Lintz does even see the

00:28:51,800 --> 00:28:58,430
e checking which is really cool yeah the

00:28:55,940 --> 00:29:01,400
future Nick's or two geeks has lots of

00:28:58,430 --> 00:29:04,880
things the geeks refresh can also fetch

00:29:01,400 --> 00:29:06,410
from many sources I here quickly

00:29:04,880 --> 00:29:10,700
a cone nester they mentioned some

00:29:06,410 --> 00:29:12,500
problems about the next channel like the

00:29:10,700 --> 00:29:13,880
channel cannot be a git repository you

00:29:12,500 --> 00:29:17,540
cannot pin a channel and you can

00:29:13,880 --> 00:29:19,700
you cannot have internal dependencies

00:29:17,540 --> 00:29:21,470
with geeks everything of this is

00:29:19,700 --> 00:29:27,830
possible so maybe we can look at this

00:29:21,470 --> 00:29:29,990
and see if compared to flakes yeah like

00:29:27,830 --> 00:29:33,440
I said it's basically the same just the

00:29:29,990 --> 00:29:36,650
commands I have different names yeah

00:29:33,440 --> 00:29:40,220
summary NIC Soyuz geeks is mixers with

00:29:36,650 --> 00:29:42,380
Lisp instead of Nixon Bosch surface

00:29:40,220 --> 00:29:46,180
composition works differently so more

00:29:42,380 --> 00:29:49,820
explicit instead of implicit merging

00:29:46,180 --> 00:29:52,310
focus on free software yeah just let nix

00:29:49,820 --> 00:29:54,680
it's a small community much smaller but

00:29:52,310 --> 00:29:57,350
they're dedicated they really keep it

00:29:54,680 --> 00:29:59,060
moving and for me at least it was a nice

00:29:57,350 --> 00:30:01,780
and refreshing break from Nix like the

00:29:59,060 --> 00:30:04,640
same ideas but just in a different way

00:30:01,780 --> 00:30:07,520
and maybe I think you could all try it

00:30:04,640 --> 00:30:10,540
and often people say learn this language

00:30:07,520 --> 00:30:14,080
but just for using this language but for

00:30:10,540 --> 00:30:14,080
forgetting the ideas

00:30:21,510 --> 00:30:26,029
few quickest few quick questions

00:30:39,420 --> 00:30:43,470
yeah so I noticed in your go example you

00:30:42,120 --> 00:30:45,390
are completely lacking any kind of

00:30:43,470 --> 00:30:48,540
dependencies how did they typically deal

00:30:45,390 --> 00:30:50,760
with this kind of things for when the

00:30:48,540 --> 00:30:54,000
geeks import doesn't support language

00:30:50,760 --> 00:30:55,710
infrastructure they usually define all

00:30:54,000 --> 00:31:00,179
the language dependencies as their own

00:30:55,710 --> 00:31:03,480
packages so you the go dependencies you

00:31:00,179 --> 00:31:05,460
also specify in the inputs they don't do

00:31:03,480 --> 00:31:09,390
this they don't try to do everything

00:31:05,460 --> 00:31:15,210
they break up each dependency into one

00:31:09,390 --> 00:31:17,070
fix package but how like did they do

00:31:15,210 --> 00:31:18,929
cogeneration for for these kind of

00:31:17,070 --> 00:31:22,320
things it like what what if input

00:31:18,929 --> 00:31:25,940
doesn't support a use case if it doesn't

00:31:22,320 --> 00:31:25,940
support it or it doesn't support it

00:31:42,289 --> 00:31:57,749
no more questions I wonder if gooks has

00:31:54,029 --> 00:31:59,609
some analogue to Knicks configuration

00:31:57,749 --> 00:32:04,349
modules which allowed to customize

00:31:59,609 --> 00:32:08,070
packages like for example turn on or off

00:32:04,349 --> 00:32:16,200
some video codec for a browser similar

00:32:08,070 --> 00:32:18,179
to Gen 2 use flex for me because I saw

00:32:16,200 --> 00:32:19,459
its source quoted I didn't see anything

00:32:18,179 --> 00:32:26,700
like that

00:32:19,459 --> 00:32:31,349
unlike Knicks you you can override the

00:32:26,700 --> 00:32:33,570
package and let's just say hey they

00:32:31,349 --> 00:32:35,489
don't have overlays so what our use

00:32:33,570 --> 00:32:37,739
flags would be is the overlays we can

00:32:35,489 --> 00:32:41,969
just modify your your Knicks packages

00:32:37,739 --> 00:32:43,799
and replace the package but otherwise if

00:32:41,969 --> 00:32:45,359
you just want to install the package in

00:32:43,799 --> 00:32:48,029
your environment you couldn't override

00:32:45,359 --> 00:32:50,999
the package like I showed earlier so you

00:32:48,029 --> 00:32:54,119
have to explicitly said these build

00:32:50,999 --> 00:32:56,549
flags which yes defines this maybe

00:32:54,119 --> 00:32:59,099
somebody could define a service which

00:32:56,549 --> 00:33:02,159
puts this overridden package into your

00:32:59,099 --> 00:33:04,649
path so you don't have not everyone has

00:33:02,159 --> 00:33:08,989
to do it for themselves but yes it is

00:33:04,649 --> 00:33:08,989
explicit ok

00:33:13,950 --> 00:33:19,690
so I was wondering how do they manage

00:33:16,960 --> 00:33:21,970
different language ecosystems like

00:33:19,690 --> 00:33:24,909
Python or Haskell you mentioned that you

00:33:21,970 --> 00:33:27,250
can import from package for example but

00:33:24,909 --> 00:33:30,100
how do they structure that and how do

00:33:27,250 --> 00:33:33,429
they generate existing dependency

00:33:30,100 --> 00:33:36,399
modeling and stuff if you do the import

00:33:33,429 --> 00:33:40,269
it generates the the package definition

00:33:36,399 --> 00:33:41,590
and then it doesn't do it recursively

00:33:40,269 --> 00:33:43,389
doesn't do it for all the dependencies

00:33:41,590 --> 00:33:45,970
in this package definition

00:33:43,389 --> 00:33:47,500
it just says these are the if you have

00:33:45,970 --> 00:33:50,169
ross package these are the worst

00:33:47,500 --> 00:33:55,240
dependencies and then for each of those

00:33:50,169 --> 00:33:57,360
you have to run Geeks import rust thank

00:33:55,240 --> 00:33:57,360
you

00:34:04,510 --> 00:34:11,320
so you mentioned that half-hour

00:34:06,370 --> 00:34:13,000
compilation time for rebuilding geeks I

00:34:11,320 --> 00:34:14,980
guess so

00:34:13,000 --> 00:34:16,810
wonder when does that happen every time

00:34:14,980 --> 00:34:20,260
you do a get update together like this

00:34:16,810 --> 00:34:22,109
geeks yes every time you get update you

00:34:20,260 --> 00:34:25,810
would have to recompile all the modules

00:34:22,109 --> 00:34:27,669
there is an interpreted mode but people

00:34:25,810 --> 00:34:30,010
told me it's very buggy and I shouldn't

00:34:27,669 --> 00:34:32,649
use it with the new guide version

00:34:30,010 --> 00:34:41,950
there's a JIT compiler so maybe that's

00:34:32,649 --> 00:34:44,530
better and faster if anyone's interested

00:34:41,950 --> 00:34:47,770
I have a NIC sauce module which installs

00:34:44,530 --> 00:34:50,679
geeks on your system so you don't even

00:34:47,770 --> 00:34:55,359
have to install it manually yeah there

00:34:50,679 --> 00:34:58,750
is a request for some for module and I'm

00:34:55,359 --> 00:35:01,210
in the process of improving it yeah so

00:34:58,750 --> 00:35:05,410
you can use I'm using geeks on my next

00:35:01,210 --> 00:35:07,570
class also hey I was wondering if you

00:35:05,410 --> 00:35:09,160
had any if you look at how their

00:35:07,570 --> 00:35:11,530
community is organized if there's any

00:35:09,160 --> 00:35:12,930
like differences to how the next

00:35:11,530 --> 00:35:14,890
community is organized if there's any

00:35:12,930 --> 00:35:17,700
conferences how they if there's any

00:35:14,890 --> 00:35:19,420
working groups how they kind of like

00:35:17,700 --> 00:35:21,660
yeah how they work

00:35:19,420 --> 00:35:24,130
yeah I've got the backup slide yeah

00:35:21,660 --> 00:35:27,010
usually they always add Faust them and

00:35:24,130 --> 00:35:28,869
do some talks there and here's how

00:35:27,010 --> 00:35:31,720
they're how'd they organize themselves

00:35:28,869 --> 00:35:36,000
before so for code they hosted on

00:35:31,720 --> 00:35:38,530
Savannah like all new projects almost

00:35:36,000 --> 00:35:40,240
contributing or really anything else

00:35:38,530 --> 00:35:42,460
they do through mailing lists so they

00:35:40,240 --> 00:35:45,100
have a patches bug in for development

00:35:42,460 --> 00:35:47,740
mailing list and then for everything

00:35:45,100 --> 00:35:49,390
else just IRC they have some web

00:35:47,740 --> 00:35:51,850
interfaces for the mailing lists but

00:35:49,390 --> 00:35:57,580
they are only read-only like just pretty

00:35:51,850 --> 00:36:01,660
to read it and before forced them this

00:35:57,580 --> 00:36:04,690
year they had the small geeks days which

00:36:01,660 --> 00:36:07,710
is an unconference so maybe there's more

00:36:04,690 --> 00:36:07,710
gathering I don't know

00:36:09,440 --> 00:36:12,559
thank you

00:36:16,760 --> 00:36:25,970
[Applause]

00:36:30,589 --> 00:36:32,650
you

00:36:35,960 --> 00:36:43,710
important for apology

00:36:38,940 --> 00:36:47,310
because they changed the interface okay

00:36:43,710 --> 00:36:47,310

YouTube URL: https://www.youtube.com/watch?v=bDGzCXr6VYU


