Title: How to package {Python,Ruby,Rust,Node,Go} programs - Zimbatm (NixCon 2019)
Publication date: 2019-10-27
Playlist: NixCon 2019 (Brno)
Description: 
	
Captions: 
	00:00:00,030 --> 00:00:08,040
so this morning we saw Xcode then

00:00:05,040 --> 00:00:12,120
we saw a bit of how the next bit system

00:00:08,040 --> 00:00:14,250
works you know and now the ideas you've

00:00:12,120 --> 00:00:15,660
learned about all of this and you want

00:00:14,250 --> 00:00:19,080
to package something for our next

00:00:15,660 --> 00:00:22,680
package so I'm just gonna go over back

00:00:19,080 --> 00:00:26,070
you know this may be a generic stuff how

00:00:22,680 --> 00:00:28,859
to do a package or in a generic way and

00:00:26,070 --> 00:00:31,560
then we going to talk about language

00:00:28,859 --> 00:00:42,500
specific packages but that's going to be

00:00:31,560 --> 00:00:46,739
up to you so you have to think about so

00:00:42,500 --> 00:00:50,059
next packages this is our repository

00:00:46,739 --> 00:00:53,309
where we have all the packages we have

00:00:50,059 --> 00:00:57,109
7,000 partitions or since even gods will

00:00:53,309 --> 00:01:01,170
be scratchiness and in that repository

00:00:57,109 --> 00:01:02,940
then but even after our 70,000 packages

00:01:01,170 --> 00:01:07,040
may be the summation right back is

00:01:02,940 --> 00:01:12,540
always a new project or something so

00:01:07,040 --> 00:01:15,540
let's go over this is what Graham

00:01:12,540 --> 00:01:17,040
presented but a bit expected and you

00:01:15,540 --> 00:01:20,369
don't need to know the TJ but that's

00:01:17,040 --> 00:01:23,299
connectivity and irritation and then in

00:01:20,369 --> 00:01:31,200
next packages we would start that and

00:01:23,299 --> 00:01:34,979
you get this MK derivation that so sta

00:01:31,200 --> 00:01:37,350
that data revision gives you function

00:01:34,979 --> 00:01:40,710
that you can use to build our vision and

00:01:37,350 --> 00:01:42,720
this function has a partial heuristics

00:01:40,710 --> 00:01:48,900
and utilities that make it

00:01:42,720 --> 00:01:52,320
two new packages so the first thing is

00:01:48,900 --> 00:01:55,470
never Graham talked about nine we

00:01:52,320 --> 00:01:57,930
actually have we can specify dat name

00:01:55,470 --> 00:02:02,880
and oppression and the name is going to

00:01:57,930 --> 00:02:06,000
be composed from the version then we

00:02:02,880 --> 00:02:08,880
have paid invoice which are dependencies

00:02:06,000 --> 00:02:11,310
that we need for the build and then

00:02:08,880 --> 00:02:13,620
another action which put little bit

00:02:11,310 --> 00:02:17,370
inputs which is also dependencies that

00:02:13,620 --> 00:02:19,860
in for debate but that are only used for

00:02:17,370 --> 00:02:24,530
building the packages are not going to

00:02:19,860 --> 00:02:29,460
do afterwards so just to make an example

00:02:24,530 --> 00:02:32,010
you might need lip Z as a tenancy and

00:02:29,460 --> 00:02:34,230
once you finished building your projects

00:02:32,010 --> 00:02:37,730
levy is gonna be a dependency of the

00:02:34,230 --> 00:02:40,560
project so that goes into Peyton Place

00:02:37,730 --> 00:02:52,350
but maybe you have a pre-processing step

00:02:40,560 --> 00:02:54,180
like yak or yeah she used to build their

00:02:52,350 --> 00:02:57,480
project but we don't depend on it

00:02:54,180 --> 00:03:00,900
afterwards then we put it in the late

00:02:57,480 --> 00:03:03,510
with you if you put everything in build

00:03:00,900 --> 00:03:06,330
it once again I work fine it's just that

00:03:03,510 --> 00:03:10,430
if you want to do cross compilation then

00:03:06,330 --> 00:03:15,120
it's a useful to make the distinction I

00:03:10,430 --> 00:03:17,879
think we have a few phrases so in please

00:03:15,120 --> 00:03:18,540
start with we had the better let's miss

00:03:17,879 --> 00:03:21,030
something

00:03:18,540 --> 00:03:24,299
and here we split the built into

00:03:21,030 --> 00:03:26,970
multiple phases this happen during the

00:03:24,299 --> 00:03:29,519
time one after the other so we have a

00:03:26,970 --> 00:03:33,290
unpackage that takes the source mode and

00:03:29,519 --> 00:03:35,760
unbox it into the Builder environment

00:03:33,290 --> 00:03:38,129
then we have a batch phase that's useful

00:03:35,760 --> 00:03:40,079
to touch things if for example the

00:03:38,129 --> 00:03:42,840
upstream source but has a bug or

00:03:40,079 --> 00:03:46,019
security vulnerability we can use it to

00:03:42,840 --> 00:03:48,359
patch it then we have a configure phase

00:03:46,019 --> 00:03:50,400
that's usually for example if you have

00:03:48,359 --> 00:03:53,549
the ultimate project is gonna collide

00:03:50,400 --> 00:03:55,129
that Stosh configured with some

00:03:53,549 --> 00:03:58,340
difficulty and trivets

00:03:55,129 --> 00:04:02,669
we have to find the big face which is

00:03:58,340 --> 00:04:06,810
possible running man seemed ages the

00:04:02,669 --> 00:04:08,790
truck then the checklist is optional

00:04:06,810 --> 00:04:13,950
where you can run unit tests to check

00:04:08,790 --> 00:04:16,500
that project works then the installed

00:04:13,950 --> 00:04:19,639
phase where once you build the project

00:04:16,500 --> 00:04:22,590
you want to send it to the door data out

00:04:19,639 --> 00:04:26,460
and that's where we that's the interface

00:04:22,590 --> 00:04:29,550
with and then after that we have the

00:04:26,460 --> 00:04:33,169
effects of phase which is because each

00:04:29,550 --> 00:04:36,039
of the spaces have defaults you have

00:04:33,169 --> 00:04:38,139
report I mean

00:04:36,039 --> 00:04:40,449
in that circuses you don't really need

00:04:38,139 --> 00:04:43,300
to specify these they have defaulted

00:04:40,449 --> 00:04:45,369
fermentation so he once made you to keep

00:04:43,300 --> 00:04:48,369
the insert face which one to fixit's

00:04:45,369 --> 00:04:51,639
after so we have this face of God and

00:04:48,369 --> 00:04:53,830
then as a historic face which is like

00:04:51,639 --> 00:04:56,050
the previous checklist except that you

00:04:53,830 --> 00:04:59,259
desk stand installation instead at the

00:04:56,050 --> 00:05:02,830
source code so we make the distinction

00:04:59,259 --> 00:05:08,020
and then finally this face that not only

00:05:02,830 --> 00:05:10,599
uses you can just then so I'm

00:05:08,020 --> 00:05:13,960
simplifying this there's more attributes

00:05:10,599 --> 00:05:15,490
and there we should have a meta to be

00:05:13,960 --> 00:05:18,550
that we've seen also in the previous

00:05:15,490 --> 00:05:21,969
talk and this is just metadata that's

00:05:18,550 --> 00:05:25,089
used for our own hooding and also for

00:05:21,969 --> 00:05:27,909
the users that's know about for simple

00:05:25,089 --> 00:05:33,159
product home page which license its

00:05:27,909 --> 00:05:35,379
using we can do things like easily with

00:05:33,159 --> 00:05:40,169
this we can do things like make sure

00:05:35,379 --> 00:05:42,340
that we only did GPL products or we can

00:05:40,169 --> 00:05:45,610
filter out

00:05:42,340 --> 00:05:48,850
and there the Vice room which is talk

00:05:45,610 --> 00:05:50,800
about this right now so for each of

00:05:48,850 --> 00:05:54,460
these phases we also have some extra

00:05:50,800 --> 00:05:55,830
ordinance so that in that case we need

00:05:54,460 --> 00:05:59,170
the SFC

00:05:55,830 --> 00:06:02,260
Achebe's that's why we fetch the source

00:05:59,170 --> 00:06:04,840
we have the fetch right previously in

00:06:02,260 --> 00:06:09,460
the configure phase we can pass some

00:06:04,840 --> 00:06:14,680
configure tags 4-wheeler tools I don't

00:06:09,460 --> 00:06:18,750
know this has anyone used photo tools

00:06:14,680 --> 00:06:18,750
project before raise your hands

00:06:24,960 --> 00:06:31,050
and then we also have outputs attribute

00:06:29,830 --> 00:06:34,960
which is interesting

00:06:31,050 --> 00:06:37,170
basically we have destroyed our art

00:06:34,960 --> 00:06:40,990
variable right and that's the default

00:06:37,170 --> 00:06:43,690
but you can also send the results to

00:06:40,990 --> 00:06:46,270
multiple outputs so for example that's

00:06:43,690 --> 00:06:48,730
just - for example your video project

00:06:46,270 --> 00:06:51,940
once and then you want to send all the

00:06:48,730 --> 00:06:54,700
batteries into arts and the manual into

00:06:51,940 --> 00:06:57,220
another output and that allows you then

00:06:54,700 --> 00:06:59,410
once you have these two outputs to just

00:06:57,220 --> 00:07:02,320
install the manual or distance of the

00:06:59,410 --> 00:07:04,660
binary or just you install the dev

00:07:02,320 --> 00:07:08,760
dependencies and that's why when you

00:07:04,660 --> 00:07:08,760
install you have this smaller package

00:07:12,560 --> 00:07:19,550
on top of that we have some more here

00:07:14,960 --> 00:07:22,539
six so if you have concern I can't go

00:07:19,550 --> 00:07:26,470
back that's 2 plus dang again

00:07:22,539 --> 00:07:26,470
why is called setup

00:07:26,680 --> 00:07:29,550
over this

00:07:31,389 --> 00:07:39,219
so this if you shot next packages and

00:07:35,919 --> 00:07:41,349
yahoo access this part you have access

00:07:39,219 --> 00:07:45,430
to the folder allergic during the

00:07:41,349 --> 00:07:48,250
building okay so it's not start

00:07:45,430 --> 00:07:53,039
completely related books this is music

00:07:48,250 --> 00:07:53,039
you can read this barcode if you know

00:08:09,639 --> 00:08:16,930
so there's a special thing for the bit

00:08:13,000 --> 00:08:19,240
hook and basically when you produce a

00:08:16,930 --> 00:08:22,030
very patient some of them are the social

00:08:19,240 --> 00:08:25,750
construct but others will change how the

00:08:22,030 --> 00:08:30,759
bit is going to be done one of them is

00:08:25,750 --> 00:08:33,010
this scenic post project pie chart so if

00:08:30,759 --> 00:08:35,829
you have a project that's using seeming

00:08:33,010 --> 00:08:37,990
to build itself you can just put seam it

00:08:35,829 --> 00:08:42,190
as a big input and it's going to do the

00:08:37,990 --> 00:08:47,130
right thing you don't run sink yourself

00:08:42,190 --> 00:08:47,130
or anything to change the default it's

00:08:50,040 --> 00:08:56,860
same for so there's a huge mystery hooks

00:08:53,140 --> 00:08:59,290
so if there's a rotary comfort that is

00:08:56,860 --> 00:09:02,670
used to just run Auto recount because

00:08:59,290 --> 00:09:06,149
some of them two strategies are broken

00:09:02,670 --> 00:09:08,860
is a Auto clutch and forty which is

00:09:06,149 --> 00:09:12,100
again a bit more advanced strategy but

00:09:08,860 --> 00:09:14,829
it changes for the edge wineries are

00:09:12,100 --> 00:09:17,769
constructed two points the libraries to

00:09:14,829 --> 00:09:20,170
their white versions effects so if they

00:09:17,769 --> 00:09:23,589
because we have the same base you can't

00:09:20,170 --> 00:09:27,420
smooth the lip from different from the

00:09:23,589 --> 00:09:29,560
your sundae or useful okay so if you get

00:09:27,420 --> 00:09:31,510
binaries from the internet that we

00:09:29,560 --> 00:09:33,490
fetched you can use this to

00:09:31,510 --> 00:09:37,350
automatically bash the binary so

00:09:33,490 --> 00:09:40,930
includes dependencies from your project

00:09:37,350 --> 00:09:44,290
this is a great point but that's you can

00:09:40,930 --> 00:09:45,880
use if you want to debug your bills and

00:09:44,290 --> 00:09:48,640
it takes a long time you can use that

00:09:45,880 --> 00:09:51,060
and it allows you to drop into the build

00:09:48,640 --> 00:09:52,750
environment so inside of December

00:09:51,060 --> 00:09:58,899
that's kind

00:09:52,750 --> 00:10:01,290
this was whether it's useful this yeah a

00:09:58,899 --> 00:10:01,290
few

00:10:03,940 --> 00:10:09,430
so let's say we want to bid this a new

00:10:07,240 --> 00:10:13,570
package is how do we and we approach the

00:10:09,430 --> 00:10:20,010
problem so first thing we do is we look

00:10:13,570 --> 00:10:20,010
at the old packages depict so now I go

00:10:27,950 --> 00:10:34,089
so this the special filing next packages

00:10:30,889 --> 00:10:45,339
where all the packages are referenced

00:10:34,089 --> 00:10:49,570
and there's lots of lines 25,000 lines

00:10:45,339 --> 00:10:53,990
and Sahara in here which is a Hello

00:10:49,570 --> 00:10:56,029
package that's being defined so if you

00:10:53,990 --> 00:10:59,120
want to pack a do anything what you

00:10:56,029 --> 00:11:04,220
would do is first we'd find a location

00:10:59,120 --> 00:11:06,500
to put your package into the tree and we

00:11:04,220 --> 00:11:10,699
have a few categories so you try to find

00:11:06,500 --> 00:11:15,290
the right category that's a bit of dark

00:11:10,699 --> 00:11:17,630
part basically try to find a location

00:11:15,290 --> 00:11:19,370
that you think is right and then when

00:11:17,630 --> 00:11:25,060
you send upon request you might get some

00:11:19,370 --> 00:11:29,019
feedback for a better nature and in here

00:11:25,060 --> 00:11:29,019
so the first thing you do is

00:11:30,070 --> 00:11:32,880
right

00:11:41,689 --> 00:11:48,689
so here you are buddy for the Knicks and

00:11:45,299 --> 00:11:52,889
you would write this file and then you

00:11:48,689 --> 00:11:58,039
plug it on the top and then once your

00:11:52,889 --> 00:12:00,719
hearts you can do next bit - a and all

00:11:58,039 --> 00:12:05,549
that would access the attributes in the

00:12:00,719 --> 00:12:08,059
top level and then the two projects any

00:12:05,549 --> 00:12:08,059
questions

00:12:13,100 --> 00:12:19,460
so I think we should maybe I don't know

00:12:16,850 --> 00:12:21,740
maybe built we prayed this hello package

00:12:19,460 --> 00:12:25,490
she and kind of course with an important

00:12:21,740 --> 00:12:32,000
life cycle yeah so how do you even start

00:12:25,490 --> 00:12:37,130
with us well first let's pretend that

00:12:32,000 --> 00:12:39,940
it's not packages you would typically go

00:12:37,130 --> 00:12:39,940
on the website

00:12:52,320 --> 00:13:01,139
okay don't know ding hello so they say

00:12:55,970 --> 00:13:07,589
you can use the FTP website and then you

00:13:01,139 --> 00:13:11,839
find the tarball data release so there's

00:13:07,589 --> 00:13:11,839
a lot of releases for hello world back

00:13:13,550 --> 00:13:19,699
so one of the things you find the source

00:13:17,430 --> 00:13:19,699
code

00:13:21,910 --> 00:13:27,900
and I'm going to make a go over here

00:13:31,800 --> 00:13:42,389
so what we need we need we know it to

00:13:35,309 --> 00:13:47,089
fetch urine we we mother's we need the

00:13:42,389 --> 00:13:47,089
estrogen that energy their ambition

00:13:52,540 --> 00:13:58,329
so for now that's good that we know and

00:13:55,199 --> 00:14:04,540
so we're just gonna with the standard

00:13:58,329 --> 00:14:08,490
thing the package name is hello and the

00:14:04,540 --> 00:14:08,490
version is to pretend

00:14:09,040 --> 00:14:15,600
and we know that we need to source code

00:14:12,190 --> 00:14:15,600
from this

00:14:21,870 --> 00:14:27,380
and we have some shot we don't know

00:14:24,660 --> 00:14:27,380
which one

00:14:29,880 --> 00:14:38,779
okay so that's support we know for now

00:14:33,899 --> 00:14:38,779
so let's try and fit this

00:14:41,960 --> 00:14:45,380
so here we pretend that this it doesn't

00:14:44,720 --> 00:14:48,310
exists

00:14:45,380 --> 00:14:48,310
sort of

00:15:03,860 --> 00:16:00,340
[Music]

00:15:06,430 --> 00:16:00,340
okay so she expects

00:16:04,840 --> 00:16:20,410
which gives you it doesn't

00:16:41,230 --> 00:16:47,210
yeah so I've been through like this

00:16:44,150 --> 00:16:51,170
packaging so many times let's just do

00:16:47,210 --> 00:16:53,180
like this but yeah this language server

00:16:51,170 --> 00:16:59,030
protocol projects that's what's been

00:16:53,180 --> 00:17:01,730
started yeah keep on github / next -

00:16:59,030 --> 00:17:05,860
community this you will find a language

00:17:01,730 --> 00:17:05,860
server but it's still in development

00:17:09,679 --> 00:17:12,069
yeah

00:17:13,510 --> 00:17:19,660
okay so we know we need a hash here so

00:17:16,839 --> 00:17:22,209
we we have two sections to do that you

00:17:19,660 --> 00:17:26,799
can take the solution that we've seen

00:17:22,209 --> 00:17:28,929
before with Bahamas put a fake one hush

00:17:26,799 --> 00:17:31,809
and then it's going to tell us what is

00:17:28,929 --> 00:17:39,210
the ratio and this another tool called

00:17:31,809 --> 00:17:42,210
next architectural and so you can do

00:17:39,210 --> 00:17:42,210
this

00:17:43,330 --> 00:17:52,650
and this is going to fetch the dark word

00:17:47,220 --> 00:17:52,650
and we have read it a harsher

00:17:57,450 --> 00:18:02,990
so put in the house no he didn't

00:18:03,070 --> 00:18:08,290
okay so here we see lots of things are

00:18:06,340 --> 00:18:10,060
happening we just gave it the source

00:18:08,290 --> 00:18:14,620
code and it's already doing a little

00:18:10,060 --> 00:18:16,960
thing so how's that possible it's just

00:18:14,620 --> 00:18:17,280
different

00:18:16,960 --> 00:18:20,490
Oh

00:18:17,280 --> 00:18:20,490
[Music]

00:18:28,130 --> 00:18:34,580
okay so that's all of the phases in

00:18:31,610 --> 00:18:36,620
action basically we see there's a unpack

00:18:34,580 --> 00:18:40,730
things that's just unboxed the source

00:18:36,620 --> 00:18:43,820
code during the configure phases as a

00:18:40,730 --> 00:18:46,520
Russian black guitar path by default

00:18:43,820 --> 00:18:48,679
already did that detected that it's a

00:18:46,520 --> 00:18:51,280
Auto Tunes project so it's already in

00:18:48,679 --> 00:18:51,280
there I think

00:18:51,820 --> 00:18:57,910
now the tortoise is running

00:18:54,820 --> 00:18:57,910
[Music]

00:19:01,590 --> 00:19:04,770
[Music]

00:19:08,830 --> 00:19:13,179
so that's just a bit up first

00:19:19,870 --> 00:19:23,309
so not sooner

00:19:27,530 --> 00:19:35,590
in story so now in the in stories we

00:19:32,000 --> 00:19:35,590
skip the face it was

00:19:42,479 --> 00:19:49,649
and then it's turn some fix-ups

00:19:45,330 --> 00:19:52,769
so it's that's a hue of musicians that

00:19:49,649 --> 00:19:54,779
we have miss packages to shrink the our

00:19:52,769 --> 00:19:59,059
path which makes the memories if it's

00:19:54,779 --> 00:20:04,320
more she zipping the mathpages

00:19:59,059 --> 00:20:08,909
stripping the binary that's it now we

00:20:04,320 --> 00:20:26,879
have our project here so we have the

00:20:08,909 --> 00:20:31,249
Dutch slush results yes so you need a

00:20:26,879 --> 00:20:34,469
editor to edit in the partner but

00:20:31,249 --> 00:20:37,979
actually by why procrastinating for in

00:20:34,469 --> 00:20:44,489
this talk I are the edit comment so

00:20:37,979 --> 00:20:46,440
that's not in yet so in the next rapid

00:20:44,489 --> 00:20:49,559
you can do something similar so you can

00:20:46,440 --> 00:20:52,080
load in this packages so because we are

00:20:49,559 --> 00:20:54,239
in the next package repository I can do

00:20:52,080 --> 00:20:56,969
this otherwise you would do in

00:20:54,239 --> 00:20:59,789
expectations like this right so I'm just

00:20:56,969 --> 00:21:03,869
using a current directory and now order

00:20:59,789 --> 00:21:07,160
viable are in scope and no packages is

00:21:03,869 --> 00:21:09,460
here and then I can say built

00:21:07,160 --> 00:21:13,880
hello and it gives me doing about this

00:21:09,460 --> 00:21:21,950
it's been already advanced and I can

00:21:13,880 --> 00:21:26,330
edit hello and bring back to you I know

00:21:21,950 --> 00:21:28,040
that the did is a single thing if you

00:21:26,330 --> 00:21:32,230
want to split things up you have to

00:21:28,040 --> 00:21:32,230
create smaller the revisions for which I

00:21:45,890 --> 00:21:55,630
just needed elevation if you run an

00:21:49,460 --> 00:21:55,630
extra - a hello let's do this

00:22:07,750 --> 00:22:15,280
so you do this and so I'm not really

00:22:12,250 --> 00:22:17,520
doing that in do we render a configur

00:22:15,280 --> 00:22:17,520
face

00:22:24,560 --> 00:22:30,960
and so one of the thing is that all the

00:22:29,460 --> 00:22:33,510
attributes that you settle in the

00:22:30,960 --> 00:22:37,260
revision are exported as environment by

00:22:33,510 --> 00:22:40,190
the inside of the build so if we echo

00:22:37,260 --> 00:22:40,190
the story

00:22:47,030 --> 00:22:55,130
oh no because custard in circles but SRC

00:22:52,030 --> 00:22:57,640
we have access we know the source is the

00:22:55,130 --> 00:22:57,640
source group

00:23:02,470 --> 00:23:05,710
[Music]

00:23:08,910 --> 00:23:18,890
that's next

00:23:11,600 --> 00:23:20,510
because it's in the video yes so I was

00:23:18,890 --> 00:23:24,830
really lucky in this project right

00:23:20,510 --> 00:23:27,080
because I order heuristics the next

00:23:24,830 --> 00:23:41,740
packages were able to determine what to

00:23:27,080 --> 00:23:45,080
do and so the binary is here and I think

00:23:41,740 --> 00:23:49,600
we have the mantich for the because we

00:23:45,080 --> 00:23:49,600
need the pun on your forehead over

00:23:54,360 --> 00:23:56,930
and

00:23:58,450 --> 00:24:05,420
so I was just wanted to talk about this

00:24:02,090 --> 00:24:07,820
because all of the language specific

00:24:05,420 --> 00:24:09,950
packages are kind of built on this MK

00:24:07,820 --> 00:24:12,740
derivation so the venturi understands

00:24:09,950 --> 00:24:17,930
this the battery and also part on the

00:24:12,740 --> 00:24:19,360
other which is as many things is there

00:24:17,930 --> 00:24:22,850
any questions

00:24:19,360 --> 00:24:36,130
is it is it completely unclear what I'm

00:24:22,850 --> 00:24:36,130
saying alright is that the tear ducts

00:24:49,690 --> 00:24:59,150
okay so that's the part I prepared for

00:24:52,700 --> 00:25:03,380
the talk I think now I want to know

00:24:59,150 --> 00:25:05,930
about what kind of languages oh okay

00:25:03,380 --> 00:25:08,810
sorry like elastance about this okay is

00:25:05,930 --> 00:25:15,860
the whole package this is what the what

00:25:08,810 --> 00:25:20,170
is this and why do we use this in so if

00:25:15,860 --> 00:25:20,170
we go back to the top level the packages

00:25:23,200 --> 00:25:31,160
here why don't we just do imports and

00:25:28,270 --> 00:25:35,060
then we know we're getting a function

00:25:31,160 --> 00:25:42,580
back right and then here we could do STM

00:25:35,060 --> 00:25:47,000
is Sdn and fetch is special and that

00:25:42,580 --> 00:25:49,550
would work actually but whole package is

00:25:47,000 --> 00:25:52,190
just a little utility function that

00:25:49,550 --> 00:25:54,740
injects automatically all the attributes

00:25:52,190 --> 00:25:58,040
that you depend on on top on the

00:25:54,740 --> 00:26:01,430
function to return as well just trust

00:25:58,040 --> 00:26:05,510
that passage provides some overriding

00:26:01,430 --> 00:26:08,300
capabilities it wraps your dairy edition

00:26:05,510 --> 00:26:10,780
so that you can then put override on on

00:26:08,300 --> 00:26:10,780
top of it

00:26:12,780 --> 00:26:27,650
which is that it places some constraints

00:26:22,080 --> 00:26:30,630
on how you create the building

00:26:27,650 --> 00:26:36,660
validation of the things that are called

00:26:30,630 --> 00:26:38,810
with a package or you just do your just

00:26:36,660 --> 00:26:43,560
do you think and your package will

00:26:38,810 --> 00:26:47,490
magically sort of work as so cool

00:26:43,560 --> 00:26:50,390
package takes the slope of next packages

00:26:47,490 --> 00:26:54,480
so all the achievements you define here

00:26:50,390 --> 00:26:56,250
so if you depend on a word package

00:26:54,480 --> 00:26:58,650
because now we have the heaviness of

00:26:56,250 --> 00:27:02,340
Hello that's you have to specify the

00:26:58,650 --> 00:27:05,580
rework dependency that would be another

00:27:02,340 --> 00:27:10,370
package then either you would pass it

00:27:05,580 --> 00:27:14,940
here but in this hypothetical scenario

00:27:10,370 --> 00:27:17,220
you just add so you define the hello the

00:27:14,940 --> 00:27:19,830
word in the top level and then here you

00:27:17,220 --> 00:27:23,510
have access to word and then you would

00:27:19,830 --> 00:27:23,510
put it as a bit inputs

00:27:28,840 --> 00:27:43,870
this you mean over here so that would be

00:27:41,860 --> 00:27:47,529
fine I'm here but you don't need it

00:27:43,870 --> 00:27:50,470
because core package doesn't only add

00:27:47,529 --> 00:27:51,749
the edges that are described so you're

00:27:50,470 --> 00:27:55,600
fine

00:27:51,749 --> 00:27:59,159
what is it supposed to oh I was I

00:27:55,600 --> 00:27:59,159
covered this in the first talk

00:28:08,220 --> 00:28:13,490
so let's define a function right that

00:28:11,050 --> 00:28:19,690
takes DMV

00:28:13,490 --> 00:28:23,990
and you do a plus B so okay mediation to

00:28:19,690 --> 00:28:31,279
put the function part so if you could

00:28:23,990 --> 00:28:35,690
add with a is 4 and B is 5 that's works

00:28:31,279 --> 00:28:38,149
but now if you could with C is 6 that's

00:28:35,690 --> 00:28:43,039
going to break because it's expecting in

00:28:38,149 --> 00:28:46,970
this argument right if you add if you

00:28:43,039 --> 00:28:51,669
define the function to be the Dutch now

00:28:46,970 --> 00:28:51,669
it just ignores the last argument

00:28:56,640 --> 00:29:04,270
okay so any other question yeah I have a

00:29:02,380 --> 00:29:06,220
personal wardrobe basically on the

00:29:04,270 --> 00:29:08,890
different bases that you chose before

00:29:06,220 --> 00:29:12,100
right yes so say you are using something

00:29:08,890 --> 00:29:15,160
and you have like never in a store rings

00:29:12,100 --> 00:29:17,980
yes how would you divide that like how

00:29:15,160 --> 00:29:19,690
can you use my idea won't flow will be

00:29:17,980 --> 00:29:22,690
dropping in a shining which I can do a

00:29:19,690 --> 00:29:28,870
few things in a console right words copy

00:29:22,690 --> 00:29:31,150
what they do so the question is if you

00:29:28,870 --> 00:29:31,660
have you been then it breaks at the very

00:29:31,150 --> 00:29:33,820
end

00:29:31,660 --> 00:29:35,980
maybe it took an hour to build because

00:29:33,820 --> 00:29:39,910
you're building a Google Chrome or

00:29:35,980 --> 00:29:42,220
something like that's big you don't want

00:29:39,910 --> 00:29:44,620
to tweak your derivation and then

00:29:42,220 --> 00:29:47,820
rebuild and it's a really long cycle

00:29:44,620 --> 00:29:54,360
right so in that case what you would do

00:29:47,820 --> 00:29:54,360
is to reach out to this breakdown talk

00:29:54,750 --> 00:30:03,850
so let's make a interface that's broken

00:29:58,120 --> 00:30:06,150
in so I don't know we will exit one

00:30:03,850 --> 00:30:06,150
maybe

00:30:11,530 --> 00:30:21,180
I thought so if you did this

00:30:17,430 --> 00:30:21,180
that's rebuilding it

00:30:35,240 --> 00:30:42,550
okay now we have to figure and

00:30:39,360 --> 00:30:42,550
[Music]

00:30:42,900 --> 00:30:48,740
here you could either is a thing called

00:30:45,570 --> 00:30:48,740
breakpoints function

00:30:50,690 --> 00:30:58,720
and then the inputs you have the

00:30:56,239 --> 00:30:58,720
breakpoint

00:31:12,950 --> 00:31:14,980
Oh

00:31:20,970 --> 00:31:25,190
it's to build craters before the install

00:31:22,980 --> 00:31:25,190
base

00:31:45,240 --> 00:31:47,930
come on

00:31:49,210 --> 00:31:54,019
this was a developing resources that

00:31:52,030 --> 00:31:57,809
were already done

00:31:54,019 --> 00:32:00,380
so the question is why is it donating

00:31:57,809 --> 00:32:05,220
the sources that's where already donated

00:32:00,380 --> 00:32:08,760
it's must isn't only doing the things

00:32:05,220 --> 00:32:12,200
there of the derivation right now it's

00:32:08,760 --> 00:32:12,200
not read or not in those verses

00:32:20,529 --> 00:32:36,590
this because so here it's just

00:32:27,200 --> 00:32:39,289
rebuilding my kitchen I don't know by

00:32:36,590 --> 00:32:43,249
uses dominant status also for cocking

00:32:39,289 --> 00:32:46,009
pals from the next door so you already

00:32:43,249 --> 00:32:47,600
have to talk all four hello in the next

00:32:46,009 --> 00:32:50,929
door but it has to copy it into the

00:32:47,600 --> 00:32:52,340
derivation again and it also poster

00:32:50,929 --> 00:32:54,980
downloads there because it's convenient

00:32:52,340 --> 00:33:00,679
but yes but does he so I did zero point

00:32:54,980 --> 00:33:02,570
zero negative tone okay so now we have

00:33:00,679 --> 00:33:06,559
these breakpoints and we have this

00:33:02,570 --> 00:33:09,580
comment and if we make a new shell and

00:33:06,559 --> 00:33:09,580
we type the command

00:33:14,289 --> 00:33:21,159
what I need a consent you are so I can

00:33:18,769 --> 00:33:21,159
do

00:33:22,270 --> 00:33:31,710
here at the center are long and quite I

00:33:28,540 --> 00:33:31,710
need to do

00:33:37,900 --> 00:33:46,210
Demond effect but yeah with this tube

00:33:44,620 --> 00:33:57,400
you are supposed to drop into the

00:33:46,210 --> 00:33:59,470
business context right so that's why I

00:33:57,400 --> 00:34:01,510
gave the first hook on how to read

00:33:59,470 --> 00:34:03,430
Knicks codes because you end up on the

00:34:01,510 --> 00:34:09,280
little kisses to actually reach the

00:34:03,430 --> 00:34:16,720
goals and expectations I know it's not

00:34:09,280 --> 00:34:20,650
great but if you look at this the you

00:34:16,720 --> 00:34:29,110
know that's that's the definition and

00:34:20,650 --> 00:34:33,400
then you can look at the support that's

00:34:29,110 --> 00:34:35,380
the implementation baby and it's using a

00:34:33,400 --> 00:34:41,380
function so you could produce so how to

00:34:35,380 --> 00:34:42,610
get the definition of oh and it only

00:34:41,380 --> 00:34:47,470
works on necks

00:34:42,610 --> 00:34:56,330
yes because it depends on C groups and

00:34:47,470 --> 00:35:01,849
if there are a way to to not even start

00:34:56,330 --> 00:35:04,550
the bill but just get an environment

00:35:01,849 --> 00:35:07,910
when I can run each of the phases

00:35:04,550 --> 00:35:10,390
manually yes that's the next show okay

00:35:07,910 --> 00:35:13,369
so you can use this tool coordination to

00:35:10,390 --> 00:35:15,890
know the sort of build environments but

00:35:13,369 --> 00:35:19,190
it's not so sandwich or is not

00:35:15,890 --> 00:35:21,050
completely the same okay so if you want

00:35:19,190 --> 00:35:23,720
to be exactly the same you want to use

00:35:21,050 --> 00:35:25,910
this loop okay but most of the time you

00:35:23,720 --> 00:35:28,040
can get away with doing the next show

00:35:25,910 --> 00:35:31,720
and then run all of the phases back and

00:35:28,040 --> 00:35:31,720
do the back face and

00:35:46,310 --> 00:35:50,930
I don't know money hurry do you know I

00:35:48,740 --> 00:35:52,610
didn't understand the question when

00:35:50,930 --> 00:35:54,230
there is a simple way to run this show

00:35:52,610 --> 00:36:02,030
on the derivation directly without

00:35:54,230 --> 00:36:03,770
getting to 105 know as if you have a

00:36:02,030 --> 00:36:06,560
derivation the derivation already knows

00:36:03,770 --> 00:36:08,450
all the inputs you have so the only

00:36:06,560 --> 00:36:17,560
thing we have to do is run Nick shout

00:36:08,450 --> 00:36:17,560
with the duration yeah but you have to

00:36:18,070 --> 00:36:21,070
yes

00:36:34,330 --> 00:36:49,310
so we can use next instant get the

00:36:40,190 --> 00:36:54,170
DRB fight and I'm just gonna and then

00:36:49,310 --> 00:36:56,270
it's a Schroder dish so yeah we didn't

00:36:54,170 --> 00:36:58,700
look at the Java file what is in this

00:36:56,270 --> 00:37:00,820
hard actually with really missed us for

00:36:58,700 --> 00:37:00,820
now

00:37:02,330 --> 00:37:10,350
so a Java file contains things like that

00:37:05,910 --> 00:37:14,880
so you have references to the outputs

00:37:10,350 --> 00:37:19,220
the input accessories we see that the

00:37:14,880 --> 00:37:23,940
platform is x86 64 Linux

00:37:19,220 --> 00:37:31,070
that's the beta scripts would

00:37:23,940 --> 00:37:31,070
environment 5 loops and

00:37:34,450 --> 00:37:39,819
or before become food standard in

00:37:37,420 --> 00:37:41,859
disability input which we put there

00:37:39,819 --> 00:37:44,019
right and then you see the path to

00:37:41,859 --> 00:37:45,730
Stalin and Nick's automatically looks at

00:37:44,019 --> 00:37:48,849
all the parts in the derivation and make

00:37:45,730 --> 00:37:50,829
sure that the output depends on it so

00:37:48,849 --> 00:37:52,210
whenever one of the inputs changes the

00:37:50,829 --> 00:37:53,950
whole build will change international

00:37:52,210 --> 00:37:59,349
change is you have to rebuild the whole

00:37:53,950 --> 00:38:02,319
thing in this case SRC is also a

00:37:59,349 --> 00:38:04,990
dependency which is the tarpaulin itself

00:38:02,319 --> 00:38:08,710
so the unpack script also looks in the

00:38:04,990 --> 00:38:10,450
other scene like these all become

00:38:08,710 --> 00:38:15,039
environment variables in the JavaScript

00:38:10,450 --> 00:38:16,869
that you write it down most not

00:38:15,039 --> 00:38:20,640
downwards it unpacks tsf seen the

00:38:16,869 --> 00:38:20,640
download stuff is a bit more complicated

00:38:32,700 --> 00:38:42,430
so now I am the derivation and the

00:38:38,950 --> 00:38:45,970
derivation so what's not clear is when

00:38:42,430 --> 00:38:53,920
we build from NYX package we use Co

00:38:45,970 --> 00:39:01,210
package to build that variation to pass

00:38:53,920 --> 00:39:04,000
the arguments of unit imports okay so so

00:39:01,210 --> 00:39:06,849
now if I want to try and actually

00:39:04,000 --> 00:39:09,279
instantiate is the relation with nice

00:39:06,849 --> 00:39:11,200
chef I have everything and you need to

00:39:09,279 --> 00:39:13,480
translate the relation to this channel

00:39:11,200 --> 00:39:15,730
and then we'll give the shell with

00:39:13,480 --> 00:39:32,579
everything ready to run manually the

00:39:15,730 --> 00:39:32,579
double size yeah I think you can first

00:40:04,610 --> 00:40:07,880
so there's

00:40:15,000 --> 00:40:18,090
[Music]

00:40:48,470 --> 00:40:52,460
I've always liked stews

00:41:05,709 --> 00:41:13,549
yeah it's a bit faster as well because

00:41:08,450 --> 00:41:22,989
everything next packages they can so if

00:41:13,549 --> 00:41:22,989
I do that that's 200 milliseconds

00:41:23,130 --> 00:41:28,009
but you wasted every time on every

00:41:25,349 --> 00:41:28,009
sacred

00:41:29,450 --> 00:41:32,450
yes

00:41:32,470 --> 00:41:51,849
so they'll take recovered arts and yeah

00:41:38,440 --> 00:41:55,660
just version where we go when I know

00:41:51,849 --> 00:41:57,339
where so the way to build is structured

00:41:55,660 --> 00:42:00,720
instead of the sandbox it's that you

00:41:57,339 --> 00:42:05,109
have basically the root directory and

00:42:00,720 --> 00:42:08,079
root onyx store directory with all the

00:42:05,109 --> 00:42:10,390
dependencies that we're on and the

00:42:08,079 --> 00:42:12,280
standard and make derivation will give

00:42:10,390 --> 00:42:18,099
you our stash builds directory which is

00:42:12,280 --> 00:42:23,650
also in the it's also in the environment

00:42:18,099 --> 00:42:26,710
variable should always be so it's a

00:42:23,650 --> 00:42:28,750
doctor either you put your pretend if

00:42:26,710 --> 00:42:37,180
you use Excel you will not have the out

00:42:28,750 --> 00:42:39,369
in mine available you have it make you

00:42:37,180 --> 00:42:42,190
under actually instead of you can set

00:42:39,369 --> 00:42:45,569
out store directory that you control and

00:42:42,190 --> 00:42:45,569
then we'll just use out

00:42:46,650 --> 00:42:53,339
I have a question about so here we were

00:42:51,420 --> 00:42:56,779
talking about the Bible

00:42:53,339 --> 00:43:02,099
to build faith but how about debugging

00:42:56,779 --> 00:43:06,769
if I as a syntax error on my mixer right

00:43:02,099 --> 00:43:09,740
is there another step in debugger or

00:43:06,769 --> 00:43:13,769
socially so any tips about the buddy

00:43:09,740 --> 00:43:18,559
actual aspects are leaks

00:43:13,769 --> 00:43:18,559
let's try and produce a similar to

00:43:26,480 --> 00:43:31,449
so sure

00:43:29,059 --> 00:43:34,249
there's a few issues that you could talk

00:43:31,449 --> 00:43:38,659
for example you could have something

00:43:34,249 --> 00:43:43,369
like this so now if I did need to build

00:43:38,659 --> 00:43:49,969
hello it says cannot curse an integer to

00:43:43,369 --> 00:43:51,439
a string at this file lam 4 and 14 and

00:43:49,969 --> 00:43:53,809
basically that's because you're trying

00:43:51,439 --> 00:43:57,319
to do like it doesn't do automatic

00:43:53,809 --> 00:44:02,749
inversions of strings so doctors you

00:43:57,319 --> 00:44:05,659
have to imagine that's your source

00:44:02,749 --> 00:44:08,409
should hold the two string and I'm not

00:44:05,659 --> 00:44:08,409
even good

00:44:10,570 --> 00:44:17,640
but the not all programs are as easily

00:44:14,790 --> 00:44:23,050
so one of the things that you can do is

00:44:17,640 --> 00:44:26,260
you can add asserts so in here for

00:44:23,050 --> 00:44:30,130
example let's say the breakpoint hook is

00:44:26,260 --> 00:44:35,460
thing but I'm not sure what it is so I

00:44:30,130 --> 00:44:39,340
can I add here an asset and I can say

00:44:35,460 --> 00:44:43,260
little Easter edition oh we don't have

00:44:39,340 --> 00:44:43,260
little esteemed

00:44:49,160 --> 00:44:53,950
okay

00:44:50,990 --> 00:44:53,950
now in this

00:44:56,900 --> 00:45:02,859
so that's fun but no I'm sorry

00:45:04,599 --> 00:45:09,419
imagine it's

00:45:06,320 --> 00:45:09,419
[Music]

00:45:19,520 --> 00:45:26,719
maybe we think is the string

00:45:23,599 --> 00:45:29,959
now it says assertion page and it gives

00:45:26,719 --> 00:45:33,410
you the location so if you sprinkle your

00:45:29,959 --> 00:45:37,459
code you can work it out because you

00:45:33,410 --> 00:45:39,829
know some tricks yes

00:45:37,459 --> 00:45:45,410
so there's another utility called

00:45:39,829 --> 00:45:49,459
built-ins that trace and basically you

00:45:45,410 --> 00:45:51,769
can put the string here and that's

00:45:49,459 --> 00:45:54,859
itself it's a function so you need to

00:45:51,769 --> 00:45:58,430
wrap this most of the time in to burn

00:45:54,859 --> 00:46:03,199
this now every time you evaluate this

00:45:58,430 --> 00:46:06,079
it's going to trace you get the trace

00:46:03,199 --> 00:46:13,519
value here so then you can do things

00:46:06,079 --> 00:46:19,900
like to string or and actually this is a

00:46:13,519 --> 00:46:23,799
lip sgm that slipped a trace but I think

00:46:19,900 --> 00:46:23,799
and you can use that too

00:46:28,230 --> 00:46:33,829
it gives you the that's the value of the

00:46:30,809 --> 00:46:33,829
frequent work

00:46:40,780 --> 00:46:43,380
right

00:46:46,990 --> 00:46:54,260
okay maybe a last thing about yes is

00:46:50,660 --> 00:46:56,090
built-ins always in scope this don't

00:46:54,260 --> 00:46:59,740
have a mic stand environment or

00:46:56,090 --> 00:47:02,870
something it's built into the language

00:46:59,740 --> 00:47:05,480
there's a like that is a few top level

00:47:02,870 --> 00:47:08,590
like two strings and mark cetera and

00:47:05,480 --> 00:47:12,170
then the rest is shared to buildings and

00:47:08,590 --> 00:47:15,880
if you want to describe them to in this

00:47:12,170 --> 00:47:15,880
happen and in two different that

00:47:24,919 --> 00:47:30,719
just a last thing maybe for something

00:47:28,709 --> 00:47:34,019
the installed phase you're happy with

00:47:30,719 --> 00:47:37,249
the difference but she wants to still

00:47:34,019 --> 00:47:40,619
add something to it so we have like a

00:47:37,249 --> 00:47:42,659
post installed so this is a convention

00:47:40,619 --> 00:47:46,109
that says three and Basques for all of

00:47:42,659 --> 00:47:49,739
the payments so it can say post install

00:47:46,109 --> 00:47:52,679
I also want to add this other file to

00:47:49,739 --> 00:47:56,279
the outputs maybe or something so that's

00:47:52,679 --> 00:47:58,489
so and you can do free and bursts that's

00:47:56,279 --> 00:47:58,489
useful

00:48:04,099 --> 00:48:07,990
something

00:48:05,630 --> 00:48:12,680
okay

00:48:07,990 --> 00:48:17,210
so now we cover the normal as didn't

00:48:12,680 --> 00:48:20,630
kill irrigation and this wrappers for

00:48:17,210 --> 00:48:25,430
many many languages and I don't think we

00:48:20,630 --> 00:48:32,329
have time to do all of them it's 30

00:48:25,430 --> 00:48:37,369
minutes you know luckily we break in

00:48:32,329 --> 00:48:41,839
wing ok so maybe we should pick one

00:48:37,369 --> 00:48:47,589
language or okay shorts the language

00:48:41,839 --> 00:48:47,589
that's one two mouths I don't know I

00:48:48,549 --> 00:48:52,390
just I

00:49:26,780 --> 00:49:29,879
[Music]

00:49:37,500 --> 00:49:40,570
[Music]

00:49:43,320 --> 00:49:51,150
so for question is well actually it

00:49:47,220 --> 00:49:54,600
depends so there's a lot of different

00:49:51,150 --> 00:49:56,940
ways of doing things and next and it

00:49:54,600 --> 00:49:59,820
depends if you want to package for next

00:49:56,940 --> 00:50:03,330
packages or it's your own projects and

00:49:59,820 --> 00:50:06,120
that makes a big difference and actually

00:50:03,330 --> 00:50:08,040
you guys are missing out on another talk

00:50:06,120 --> 00:50:12,450
right now that talks about the nuances

00:50:08,040 --> 00:50:15,120
about language integration but basically

00:50:12,450 --> 00:50:16,980
if you will put your own project and you

00:50:15,120 --> 00:50:19,350
have lots of ribbons because you are

00:50:16,980 --> 00:50:21,240
changing your source code and you're

00:50:19,350 --> 00:50:23,640
going to have different constraints that

00:50:21,240 --> 00:50:28,620
next packages were until you build it

00:50:23,640 --> 00:50:31,500
once and then it's finished so for

00:50:28,620 --> 00:50:42,410
python we have a bunch of tools that I

00:50:31,500 --> 00:50:47,640
did I will need list one this pie by 2

00:50:42,410 --> 00:50:51,500
pie pans tunics / hv tunics now which is

00:50:47,640 --> 00:50:51,500
the latest addition

00:50:52,190 --> 00:50:57,170
[Music]

00:50:53,829 --> 00:51:00,259
but if you want to package for next

00:50:57,170 --> 00:51:02,599
packages what you just do is you're

00:51:00,259 --> 00:51:06,079
going to packages delivered by 10

00:51:02,599 --> 00:51:07,759
packages and that's where we have all

00:51:06,079 --> 00:51:10,130
the piping packages so it's a bit like

00:51:07,759 --> 00:51:14,119
the whole package is the piece but

00:51:10,130 --> 00:51:16,219
that's just for a Python and then you

00:51:14,119 --> 00:51:19,369
just look at how it's being done and you

00:51:16,219 --> 00:51:27,349
quickly are happy they do the packaging

00:51:19,369 --> 00:51:32,359
for example let's take a sauna there's a

00:51:27,349 --> 00:51:34,880
Sun Hat default at next and that's you

00:51:32,359 --> 00:51:37,880
just write speed with this pipe python

00:51:34,880 --> 00:51:40,369
package and it's the same principle

00:51:37,880 --> 00:51:44,029
where you look for the source code the

00:51:40,369 --> 00:51:46,249
version and then you use this fetch so

00:51:44,029 --> 00:51:49,609
we have different types of fetcher we

00:51:46,249 --> 00:51:51,910
seen URL before that we are the

00:51:49,609 --> 00:51:55,309
fish from github that's kind of useful

00:51:51,910 --> 00:52:00,680
this is a fish pie pie that can look on

00:51:55,309 --> 00:52:04,640
directly from the pipe iPad so you fetch

00:52:00,680 --> 00:52:08,420
your source and then in your inputs you

00:52:04,640 --> 00:52:12,969
put vitally dependencies that you are so

00:52:08,420 --> 00:52:12,969
few projects it's a request

00:52:16,120 --> 00:52:20,280
friends of the propagated e15 puts

00:52:17,860 --> 00:52:20,280
versus

00:52:21,270 --> 00:52:31,200
right so these are whole match matrix

00:52:26,640 --> 00:52:34,650
actually so the propagated attribute

00:52:31,200 --> 00:52:38,640
means that you want to record that is a

00:52:34,650 --> 00:52:39,810
dependency at one time them and most of

00:52:38,640 --> 00:52:44,400
the time you don't need to do this

00:52:39,810 --> 00:52:49,230
because the dependency is already in to

00:52:44,400 --> 00:52:52,619
the outputs and this actually scans the

00:52:49,230 --> 00:52:54,720
outputs and that's how it reminds how

00:52:52,619 --> 00:52:57,390
you have runtime dependencies between

00:52:54,720 --> 00:53:00,810
things I don't think we explain

00:52:57,390 --> 00:53:04,800
variables basically once you build the

00:53:00,810 --> 00:53:07,619
package the DRV defective as the ping

00:53:04,800 --> 00:53:11,390
dependencies but then at the end very

00:53:07,619 --> 00:53:15,090
end it's going to scan the installed

00:53:11,390 --> 00:53:18,090
dependent so the revisions in the art

00:53:15,090 --> 00:53:21,050
and look at for it's actually doing a

00:53:18,090 --> 00:53:23,910
grip of the slash neck / table and

00:53:21,050 --> 00:53:26,520
looking for all the references to other

00:53:23,910 --> 00:53:30,119
packages and that's how you know that

00:53:26,520 --> 00:53:33,720
you have the runtime dependencies for a

00:53:30,119 --> 00:53:36,510
package so you don't don't know it GCC

00:53:33,720 --> 00:53:39,330
to run your project you just don't want

00:53:36,510 --> 00:53:42,060
to visit right but if your result

00:53:39,330 --> 00:53:45,300
depends on Lizzie is going to be a

00:53:42,060 --> 00:53:48,420
reference in your C program on you see

00:53:45,300 --> 00:53:52,310
that a so that's how it knows that it

00:53:48,420 --> 00:53:52,310
also needs to do not the energy

00:53:53,380 --> 00:54:04,089
and we'll make sense right so in Python

00:54:00,999 --> 00:54:06,309
we are the problem because we we just

00:54:04,089 --> 00:54:10,589
have dynamic stuff so we don't have a

00:54:06,309 --> 00:54:13,930
reference and so the propagated means

00:54:10,589 --> 00:54:17,410
actually also record this as in to the

00:54:13,930 --> 00:54:20,999
outputs and we actually if you want to

00:54:17,410 --> 00:54:20,999
drill down hard worse

00:54:24,750 --> 00:54:28,910
Oprah didn't start there

00:54:30,910 --> 00:54:37,809
so we have a special folder chords next

00:54:34,089 --> 00:54:38,980
support and you find out the property to

00:54:37,809 --> 00:54:41,680
build input sphere

00:54:38,980 --> 00:54:49,569
it's just recorded as a reference since

00:54:41,680 --> 00:54:53,109
you this this perfect energy have to be

00:54:49,569 --> 00:54:56,019
defined explicitly though so most of the

00:54:53,109 --> 00:54:59,589
time no but - because it's dynamic

00:54:56,019 --> 00:55:01,750
language and because when you want to

00:54:59,589 --> 00:55:08,940
learn asana you need to be able to do

00:55:01,750 --> 00:55:12,700
the analysis that's why you might have

00:55:08,940 --> 00:55:19,750
dependency possible if you use let's go

00:55:12,700 --> 00:55:23,950
back to the asana here we have checking

00:55:19,750 --> 00:55:27,269
for something that's - specifically so

00:55:23,950 --> 00:55:29,980
my test is you test framework for python

00:55:27,269 --> 00:55:32,200
and you won't care because you want to

00:55:29,980 --> 00:55:34,359
run the tests when you bring the package

00:55:32,200 --> 00:55:37,230
but once you test passing you're

00:55:34,359 --> 00:55:37,230
forgetting

00:56:11,720 --> 00:56:15,620
and then I would

00:56:55,210 --> 00:57:01,069
yes sir a Python is strictly right

00:56:57,650 --> 00:57:03,829
selection here the approach that we have

00:57:01,069 --> 00:57:06,529
is we have one version of each library

00:57:03,829 --> 00:57:09,019
right and then if you had your project

00:57:06,529 --> 00:57:11,660
you hope that the dependencies that you

00:57:09,019 --> 00:57:16,369
have are going to be two versions that

00:57:11,660 --> 00:57:18,619
are already in the packages which can be

00:57:16,369 --> 00:57:22,309
problematic because you can have

00:57:18,619 --> 00:57:25,420
conflicting dependency requirements

00:57:22,309 --> 00:57:30,109
between two different Python projects

00:57:25,420 --> 00:57:34,309
and other issues with package genius

00:57:30,109 --> 00:57:37,400
that whole ecosystem depends on center

00:57:34,309 --> 00:57:40,640
deploy which is really hard to resolve

00:57:37,400 --> 00:57:42,619
as evaluation I mean leaks because we

00:57:40,640 --> 00:57:45,950
don't have to run any code there and

00:57:42,619 --> 00:57:50,089
needs to be cure and because setup the

00:57:45,950 --> 00:57:53,509
pie is a Python script it can give you

00:57:50,089 --> 00:57:56,690
the different results here on Windows or

00:57:53,509 --> 00:57:59,569
Linux and so you don't have a static

00:57:56,690 --> 00:58:02,809
dependency tree that you can be done on

00:57:59,569 --> 00:58:05,509
top of it and that's why I mentioned

00:58:02,809 --> 00:58:08,119
poetry to next because this this new

00:58:05,509 --> 00:58:10,930
version called poetry that doesn't use

00:58:08,119 --> 00:58:13,690
set up too high but it has its own

00:58:10,930 --> 00:58:16,030
Tomic file where you have ordered the

00:58:13,690 --> 00:58:20,430
dependencies and it has a propeller

00:58:16,030 --> 00:58:24,790
fight so I would say that's really the

00:58:20,430 --> 00:58:26,980
goal I think it will go on to this but

00:58:24,790 --> 00:58:28,990
sometimes if you try to catch them

00:58:26,980 --> 00:58:32,760
stream projects it's kind of hard to ask

00:58:28,990 --> 00:58:32,760
them to switch to virtual first

00:58:48,640 --> 00:58:57,880
yeah so just to last me nice parting

00:58:55,630 --> 00:59:00,510
words is if you want to find out more

00:58:57,880 --> 00:59:03,310
about each of the languages of the work

00:59:00,510 --> 00:59:04,810
usually it's again you just look up the

00:59:03,310 --> 00:59:07,090
attributes and you'll find the other

00:59:04,810 --> 00:59:09,670
packages that already built and you

00:59:07,090 --> 00:59:13,360
could be based and that's all I learned

00:59:09,670 --> 00:59:18,760
basically let's have the brute force

00:59:13,360 --> 00:59:22,090
approach and then we have a Manion so I

00:59:18,760 --> 00:59:25,510
don't know if it's in on the next rest

00:59:22,090 --> 00:59:29,290
websites I think it's a bit confusing

00:59:25,510 --> 00:59:35,350
but it's basically you have multiple

00:59:29,290 --> 00:59:37,810
sections on the site there's the slash

00:59:35,350 --> 00:59:43,320
next verse which is just for the Linux

00:59:37,810 --> 00:59:43,320
distribution and here you have a bunion

00:59:44,100 --> 00:59:53,430
if I can type so that's the menu for us

00:59:48,960 --> 00:59:57,280
then we are one for the next interpreter

00:59:53,430 --> 00:59:59,860
and finally we have one for next

00:59:57,280 --> 01:00:04,900
packages and the one in next packages

00:59:59,860 --> 01:00:08,680
has everything but so if we live search

01:00:04,900 --> 01:00:10,510
for Python there's going to be some

01:00:08,680 --> 01:00:13,800
references your altitude

01:00:10,510 --> 01:00:16,360
- packaging with some more documentation

01:00:13,800 --> 01:00:24,270
so that's not easily searchable as

01:00:16,360 --> 01:00:28,360
wanted to mention official list packages

01:00:24,270 --> 01:00:37,030
with one reference package there are

01:00:28,360 --> 01:00:40,300
along which yes angle from which may not

01:00:37,030 --> 01:00:43,990
follow each the same way WG right maybe

01:00:40,300 --> 01:00:45,910
that is one page which is better so

01:00:43,990 --> 01:00:50,580
question is is there a reference package

01:00:45,910 --> 01:00:57,910
for every language not that I know

01:00:50,580 --> 01:01:00,330
except the head of a package okay should

01:00:57,910 --> 01:01:00,330
we take a break

01:01:02,680 --> 01:01:09,599

YouTube URL: https://www.youtube.com/watch?v=MrRnGPyQ_9s


