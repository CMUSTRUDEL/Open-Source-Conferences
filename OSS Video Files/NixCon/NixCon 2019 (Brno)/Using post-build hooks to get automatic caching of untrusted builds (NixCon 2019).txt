Title: Using post-build hooks to get automatic caching of untrusted builds (NixCon 2019)
Publication date: 2019-10-29
Playlist: NixCon 2019 (Brno)
Description: 
	This talk describes how to use post-build hooks, a recently added Nix feature, to automatically sign and upload artifacts to a binary cache, so they can be re-used for subsequent builds.

It compares that approach with existing ones, and explains why using post-build hooks are superior in terms of what's cached, and when it comes to building untrusted code, for example Pull Requests from external contributors.

Finally, it shows an example on how this can be set up in a cloud provider setting, and discusses further improvements.
Captions: 
	00:00:11,530 --> 00:00:15,690
hey welcome I'm Florian

00:00:16,320 --> 00:00:19,499
[Applause]

00:00:22,980 --> 00:00:30,830
and I need to press elsewhere there we

00:00:29,190 --> 00:00:33,960
go

00:00:30,830 --> 00:00:40,290
hi I'm Florian the internet knows me as

00:00:33,960 --> 00:00:42,630
floki apart from doing expecting all day

00:00:40,290 --> 00:00:45,150
I'm interested in build pipelines

00:00:42,630 --> 00:00:46,980
infrastructure low level user space

00:00:45,150 --> 00:00:51,680
stuff networking and thinking we're

00:00:46,980 --> 00:00:55,290
proud we in general at work I work as a

00:00:51,680 --> 00:00:56,790
reliability engineer at week by the way

00:00:55,290 --> 00:01:00,660
they are hiring so if you're interested

00:00:56,790 --> 00:01:03,300
in that just reach out today I'm going

00:01:00,660 --> 00:01:05,280
to talk about untrusted CI and how to

00:01:03,300 --> 00:01:08,400
use post build hooks to get automatic

00:01:05,280 --> 00:01:12,060
caching of untrusted builds I'll be

00:01:08,400 --> 00:01:13,979
talking about CI in general what you

00:01:12,060 --> 00:01:16,890
want a CI to do and how you want it to

00:01:13,979 --> 00:01:19,740
behave about snicks binary caches in

00:01:16,890 --> 00:01:23,310
general how to use private caches and

00:01:19,740 --> 00:01:26,399
how to handle signature of those builds

00:01:23,310 --> 00:01:28,580
in the private caches how to handle

00:01:26,399 --> 00:01:31,619
limitations in simple implementations

00:01:28,580 --> 00:01:34,289
proposed solution how it improves things

00:01:31,619 --> 00:01:35,750
in general and future ideas on what to

00:01:34,289 --> 00:01:40,550
do with it

00:01:35,750 --> 00:01:43,800
so how do we want to see IT behave well

00:01:40,550 --> 00:01:45,360
it should in general it should lint it

00:01:43,800 --> 00:01:48,690
should analyze it should build it should

00:01:45,360 --> 00:01:51,869
test and package your project it should

00:01:48,690 --> 00:01:54,209
do that on each commit to assist

00:01:51,869 --> 00:01:57,300
developers in their workflow while they

00:01:54,209 --> 00:02:00,119
are iterating over APR so especially you

00:01:57,300 --> 00:02:02,910
want it to run on PRS to discover all

00:02:00,119 --> 00:02:05,390
voyages before they reach master or most

00:02:02,910 --> 00:02:07,950
of the packages before they reach master

00:02:05,390 --> 00:02:11,520
but most importantly you want to see how

00:02:07,950 --> 00:02:14,610
to be fast so if you're waiting for like

00:02:11,520 --> 00:02:16,530
30 minutes or an hour to get your tests

00:02:14,610 --> 00:02:19,080
to pass or not to pass and you basically

00:02:16,530 --> 00:02:21,840
blocked them spending your time on this

00:02:19,080 --> 00:02:23,700
you yeah that's just a huge problem and

00:02:21,840 --> 00:02:28,740
massively decreases developer

00:02:23,700 --> 00:02:30,260
productivity productivity so yeah with a

00:02:28,740 --> 00:02:33,300
small project it's not so much a problem

00:02:30,260 --> 00:02:38,960
but as projects grow

00:02:33,300 --> 00:02:41,670
and yeah bill time likely does as well

00:02:38,960 --> 00:02:45,230
so having still having a snappy CI

00:02:41,670 --> 00:02:45,230
becomes more and more challenging and

00:02:46,340 --> 00:02:49,110
yeah

00:02:47,520 --> 00:02:51,450
when using NYX to provide those

00:02:49,110 --> 00:02:53,370
dependencies or like build the entire

00:02:51,450 --> 00:02:57,270
project you can you make use of binary

00:02:53,370 --> 00:02:59,280
caches in fact we do already most of the

00:02:57,270 --> 00:03:00,750
time there's cash Nick's or sock for all

00:02:59,280 --> 00:03:03,690
the packages and expect atures built by

00:03:00,750 --> 00:03:04,890
Hydra except unfree and package is

00:03:03,690 --> 00:03:05,990
currently failing but that's another

00:03:04,890 --> 00:03:08,250
story

00:03:05,990 --> 00:03:11,370
however in your project they might also

00:03:08,250 --> 00:03:13,290
be other packages not generically

00:03:11,370 --> 00:03:15,390
suitable for next packages because they

00:03:13,290 --> 00:03:18,140
are domain-specific stuff they are

00:03:15,390 --> 00:03:20,640
custom overrides on on three packages

00:03:18,140 --> 00:03:24,300
and you still want to catch those in

00:03:20,640 --> 00:03:26,640
your CI pipeline so what you then do

00:03:24,300 --> 00:03:29,820
most of the time is you might have an

00:03:26,640 --> 00:03:31,890
Hydra or whatever does your build but in

00:03:29,820 --> 00:03:33,900
general you go with a private cache of

00:03:31,890 --> 00:03:36,930
some sorts that is added on your

00:03:33,900 --> 00:03:39,290
developer machines and they can make use

00:03:36,930 --> 00:03:42,960
of this cash in of some sorts

00:03:39,290 --> 00:03:46,640
it's either self hosted or based on some

00:03:42,960 --> 00:03:49,440
bucket in some cloud or entirely managed

00:03:46,640 --> 00:03:54,630
so I'm gonna be talking about how to set

00:03:49,440 --> 00:03:58,350
up those caches quickly what you do is

00:03:54,630 --> 00:04:01,470
you generate a signing key signing key

00:03:58,350 --> 00:04:04,190
appear on one machine on all machines

00:04:01,470 --> 00:04:07,200
that use this cache you configure your

00:04:04,190 --> 00:04:10,680
Nexus configuration or your Nix conf to

00:04:07,200 --> 00:04:12,870
point to those endpoints to the public

00:04:10,680 --> 00:04:15,270
endpoints to download the binary storm

00:04:12,870 --> 00:04:18,150
and you add the public key part of this

00:04:15,270 --> 00:04:20,270
signing key pair and to upload you use

00:04:18,150 --> 00:04:23,460
some sort of Nick's copy command

00:04:20,270 --> 00:04:26,640
eventually or you expose your entire

00:04:23,460 --> 00:04:29,220
next door of some machine and to the

00:04:26,640 --> 00:04:32,130
others and in general Nick's copy

00:04:29,220 --> 00:04:36,360
supports like SSH ng to copy to another

00:04:32,130 --> 00:04:39,030
machine HTTP like HTTP put through

00:04:36,360 --> 00:04:41,580
upload stuff s3 buckets and there's a in

00:04:39,030 --> 00:04:43,610
progress PR to push to GCS pockets as

00:04:41,580 --> 00:04:47,730
well

00:04:43,610 --> 00:04:50,840
yeah so assuming your project has a

00:04:47,730 --> 00:04:52,770
default Nicks and dependency attribute

00:04:50,840 --> 00:04:54,510
containing all the dependencies of your

00:04:52,770 --> 00:05:01,080
project you might end up with doing

00:04:54,510 --> 00:05:02,520
something like this oh yeah you you

00:05:01,080 --> 00:05:04,110
somehow get a list of all the

00:05:02,520 --> 00:05:06,150
dependencies and all the next-door paths

00:05:04,110 --> 00:05:07,680
that are part of your build of your

00:05:06,150 --> 00:05:09,900
dependencies of your build or of your

00:05:07,680 --> 00:05:11,970
entire project and then you issue anacs

00:05:09,900 --> 00:05:16,950
copy command if you don't expose the

00:05:11,970 --> 00:05:20,100
next linux store yeah so what are the

00:05:16,950 --> 00:05:23,270
limitations of this naive approach in

00:05:20,100 --> 00:05:26,360
why it might work in a lot of cases but

00:05:23,270 --> 00:05:28,380
sometimes there's some drawbacks like

00:05:26,360 --> 00:05:30,690
you might not have all the build

00:05:28,380 --> 00:05:33,870
dependencies or very well available at a

00:05:30,690 --> 00:05:36,330
central location so so you can't call

00:05:33,870 --> 00:05:38,580
NICs build - a and some magic attribute

00:05:36,330 --> 00:05:41,729
because there's scripts invoking mix by

00:05:38,580 --> 00:05:44,310
themselves you have some shell scripts

00:05:41,729 --> 00:05:46,410
calling like Kali Nix shell or you have

00:05:44,310 --> 00:05:49,260
basil shelling out UNIX build to build

00:05:46,410 --> 00:05:51,810
other packages so you might you have IFD

00:05:49,260 --> 00:05:55,130
and don't really know at first what

00:05:51,810 --> 00:05:57,600
you're gonna be end up building with

00:05:55,130 --> 00:05:59,460
yeah and then you can of course you can

00:05:57,600 --> 00:06:01,260
track those manually in your dot next

00:05:59,460 --> 00:06:03,840
file and make sure that you cache

00:06:01,260 --> 00:06:05,550
everything that you that you basically

00:06:03,840 --> 00:06:07,260
catch catch all the packages you want to

00:06:05,550 --> 00:06:08,520
build and make sure you say I build it

00:06:07,260 --> 00:06:10,919
and then you start the actual build

00:06:08,520 --> 00:06:13,080
process but that's all like quite

00:06:10,919 --> 00:06:17,150
laborious and it gets even harder yeah

00:06:13,080 --> 00:06:20,580
it doesn't get better another problem is

00:06:17,150 --> 00:06:24,330
that if one of those packages fails to

00:06:20,580 --> 00:06:25,950
build the approach of waiting for the

00:06:24,330 --> 00:06:29,940
output path and then copying over the

00:06:25,950 --> 00:06:32,520
whole transitive closure will just just

00:06:29,940 --> 00:06:34,010
won't kick in it because it never got a

00:06:32,520 --> 00:06:36,300
chance to upload this intermediate

00:06:34,010 --> 00:06:40,050
depends if you have not specified them

00:06:36,300 --> 00:06:41,550
before so yeah you might end up pumping

00:06:40,050 --> 00:06:44,190
a higher-level

00:06:41,550 --> 00:06:46,350
thing it fails to build and all this

00:06:44,190 --> 00:06:47,490
those other dependencies you also need

00:06:46,350 --> 00:06:48,930
to be able for some reason they just

00:06:47,490 --> 00:06:51,950
don't end up in the cache because you

00:06:48,930 --> 00:06:54,990
never reach to the end point of actually

00:06:51,950 --> 00:06:56,130
building the DD package like the leaf

00:06:54,990 --> 00:07:00,330
package in your

00:06:56,130 --> 00:07:02,580
see another problem is that the upload

00:07:00,330 --> 00:07:06,600
is another manual step in your CI

00:07:02,580 --> 00:07:08,760
pipeline very likely you end up with

00:07:06,600 --> 00:07:11,760
code dealing with all the signing and

00:07:08,760 --> 00:07:13,920
uploading part inside your CI a code

00:07:11,760 --> 00:07:16,410
itself that shouldn t we only say like

00:07:13,920 --> 00:07:17,580
I'd like to build this thing and then it

00:07:16,410 --> 00:07:19,680
should be cache you don't really want to

00:07:17,580 --> 00:07:21,330
mess with with looking what you want to

00:07:19,680 --> 00:07:24,120
upload and then manual calling to upload

00:07:21,330 --> 00:07:25,740
it it just just normally it should just

00:07:24,120 --> 00:07:29,340
work and it shouldn't increase your

00:07:25,740 --> 00:07:32,220
pipeline code and another problem which

00:07:29,340 --> 00:07:34,530
I personally find find a bit of a bigger

00:07:32,220 --> 00:07:36,480
problem like as the binary cache is

00:07:34,530 --> 00:07:38,100
added and used as a substitute on all

00:07:36,480 --> 00:07:40,920
developer machines are probably even

00:07:38,100 --> 00:07:43,200
production machines having white access

00:07:40,920 --> 00:07:45,360
to it and having developers or like

00:07:43,200 --> 00:07:47,010
external contributors being able to do

00:07:45,360 --> 00:07:51,000
to change this way of this your

00:07:47,010 --> 00:07:54,080
scripting inside your CI pipeline it's

00:07:51,000 --> 00:07:57,360
very easy to extract the signing key and

00:07:54,080 --> 00:07:58,800
you don't want you basically don't want

00:07:57,360 --> 00:08:00,900
to have a backdoor and want to have

00:07:58,800 --> 00:08:05,910
somehow a way to pollute the cash in

00:08:00,900 --> 00:08:09,270
some sorts yeah so yeah that's all not

00:08:05,910 --> 00:08:11,910
so nice and while well one and two might

00:08:09,270 --> 00:08:14,670
just decrease cash it misses and three

00:08:11,910 --> 00:08:17,430
might be just annoying like three and

00:08:14,670 --> 00:08:18,060
four together due to the reasons

00:08:17,430 --> 00:08:20,190
mentioned

00:08:18,060 --> 00:08:22,050
basically require some sort of approval

00:08:20,190 --> 00:08:27,090
process for PRSA at least for external

00:08:22,050 --> 00:08:30,390
PRS yes and that's all not very nice and

00:08:27,090 --> 00:08:32,669
negatively impacting both cash iterate

00:08:30,390 --> 00:08:39,719
and does around your plan for developers

00:08:32,669 --> 00:08:41,669
so how do we solve this there's one way

00:08:39,719 --> 00:08:43,979
to solve it that I'm gonna propose

00:08:41,669 --> 00:08:46,110
it's a with together with multi-user

00:08:43,979 --> 00:08:52,610
NICs and some recently introduced next

00:08:46,110 --> 00:08:56,700
feature you can basically fix this yeah

00:08:52,610 --> 00:08:58,650
you basically what you do is you have a

00:08:56,700 --> 00:09:01,020
CI user that that runs your regular

00:08:58,650 --> 00:09:04,110
build process it uploads the build

00:09:01,020 --> 00:09:08,050
recipe to a privileged Nick's daemon

00:09:04,110 --> 00:09:10,839
oh those animations work nice

00:09:08,050 --> 00:09:13,360
and this next demon yeah is basically

00:09:10,839 --> 00:09:15,010
instructing all the builds to happen on

00:09:13,360 --> 00:09:19,450
some temporary unprivileged other

00:09:15,010 --> 00:09:21,010
sandbox built users and afterwards it

00:09:19,450 --> 00:09:24,880
takes care of persisting it to the local

00:09:21,010 --> 00:09:26,290
next door and assuming you have no local

00:09:24,880 --> 00:09:28,510
user privilege escalation on that

00:09:26,290 --> 00:09:31,269
machine or some weird hash collisions

00:09:28,510 --> 00:09:33,519
this effectively prints prevents regular

00:09:31,269 --> 00:09:35,740
CI users from manipulating the local

00:09:33,519 --> 00:09:38,140
next-door like in a non multi-user next

00:09:35,740 --> 00:09:40,420
installation basically all those three

00:09:38,140 --> 00:09:43,180
different concerns would be running

00:09:40,420 --> 00:09:45,310
would be running as the same user so the

00:09:43,180 --> 00:09:47,380
regular CI user could in in practice

00:09:45,310 --> 00:09:51,180
like modify the next door in some weird

00:09:47,380 --> 00:09:53,709
ways in some cases so yeah

00:09:51,180 --> 00:10:00,240
alt user Nix in that case solves a lot

00:09:53,709 --> 00:10:00,240
of those concerns and isolates this

00:10:05,870 --> 00:10:11,420
it's it's a default on Nexus but but

00:10:09,560 --> 00:10:13,370
it's it's not a default on a lot of the

00:10:11,420 --> 00:10:15,170
hosted sea-ice like if you have treads

00:10:13,370 --> 00:10:18,740
or Jenkins and you have your like your

00:10:15,170 --> 00:10:20,180
docker based MCI and it's in basically

00:10:18,740 --> 00:10:22,160
there's like a shell script that you

00:10:20,180 --> 00:10:23,330
call to to install Nix and then you end

00:10:22,160 --> 00:10:26,410
up with a single user in snicks

00:10:23,330 --> 00:10:29,180
installation yeah yeah I will

00:10:26,410 --> 00:10:33,020
no no it's it's one way to configure Nix

00:10:29,180 --> 00:10:35,089
in a certain case and I'm yeah okay so

00:10:33,020 --> 00:10:36,770
with that we kind of solved the direct

00:10:35,089 --> 00:10:42,470
access to the next store but we did not

00:10:36,770 --> 00:10:43,940
get solved the signing part so if we go

00:10:42,470 --> 00:10:51,980
with the bash loop approach we saw

00:10:43,940 --> 00:10:56,690
previously we still end up signing

00:10:51,980 --> 00:10:58,820
inside the context of the CI user so the

00:10:56,690 --> 00:11:01,279
CI user can still like change stuff

00:10:58,820 --> 00:11:03,250
before uploading to the remote cache and

00:11:01,279 --> 00:11:05,810
that's something we don't want to do

00:11:03,250 --> 00:11:07,880
because this way the user can still

00:11:05,810 --> 00:11:10,339
extract the signing key and if we have

00:11:07,880 --> 00:11:12,860
some way to access the s3 bucket or

00:11:10,339 --> 00:11:15,440
something he could he could modify stuff

00:11:12,860 --> 00:11:19,250
we sign and and basically get code

00:11:15,440 --> 00:11:23,589
execution on other machines so yeah we

00:11:19,250 --> 00:11:26,690
don't want to do this as I said with Nix

00:11:23,589 --> 00:11:31,339
2.3 there's a way around you can

00:11:26,690 --> 00:11:33,080
configure a post built hook which

00:11:31,339 --> 00:11:35,660
basically gets triggered for each

00:11:33,080 --> 00:11:38,600
realize derivation even the intermediate

00:11:35,660 --> 00:11:40,760
ones and in multi-user NICs it's run as

00:11:38,600 --> 00:11:44,060
in in the context of the next demon so

00:11:40,760 --> 00:11:47,930
as a privileged user and you don't have

00:11:44,060 --> 00:11:51,110
the problem with exposing the key to to

00:11:47,930 --> 00:11:56,060
the CI user and instead it's run as

00:11:51,110 --> 00:11:57,620
maybe as the root user yeah there's some

00:11:56,060 --> 00:11:59,209
side notes regarding this like normally

00:11:57,620 --> 00:12:02,029
you don't want to exit Nick's copy there

00:11:59,209 --> 00:12:03,940
because it's blocking you want basically

00:12:02,029 --> 00:12:06,920
you want to queue the upload to happen

00:12:03,940 --> 00:12:10,970
to some other process so you don't block

00:12:06,920 --> 00:12:12,740
the main domain build those process so

00:12:10,970 --> 00:12:16,000
let's look back at our limitations that

00:12:12,740 --> 00:12:16,000
I spoke about

00:12:16,220 --> 00:12:20,760
the CI user doesn't have any direct

00:12:19,110 --> 00:12:22,950
access to the local mix store anymore

00:12:20,760 --> 00:12:25,620
and doesn't have access to the signing

00:12:22,950 --> 00:12:27,390
key so there's no way to produce a

00:12:25,620 --> 00:12:29,670
modified signed artifact under the

00:12:27,390 --> 00:12:35,190
original store path which effectively

00:12:29,670 --> 00:12:37,740
fixes number four as I said like in some

00:12:35,190 --> 00:12:39,150
cloud environments users might still be

00:12:37,740 --> 00:12:40,950
able to alter files in the cache because

00:12:39,150 --> 00:12:42,800
it's just like a cloud setting that this

00:12:40,950 --> 00:12:46,370
machine is allowed to access this bucket

00:12:42,800 --> 00:12:48,390
but as it cannot access the signatures

00:12:46,370 --> 00:12:49,589
substitution won't happen because next

00:12:48,390 --> 00:12:51,420
will verify the signature it will

00:12:49,589 --> 00:12:53,760
realize hey it's it's the wrong

00:12:51,420 --> 00:12:59,760
signature it won't substitute from there

00:12:53,760 --> 00:13:02,610
and it might fall back to locally by

00:12:59,760 --> 00:13:04,890
moving and and by moving the uploading

00:13:02,610 --> 00:13:07,260
logic away from the CI pipeline into the

00:13:04,890 --> 00:13:09,980
generic post built hook in a multi-user

00:13:07,260 --> 00:13:12,660
annex configuration we also fixed three

00:13:09,980 --> 00:13:15,680
because we don't need to have any manual

00:13:12,660 --> 00:13:17,790
scripts inside our CI process and

00:13:15,680 --> 00:13:19,589
because the burp host built hook is

00:13:17,790 --> 00:13:20,070
triggered on each derivation realized in

00:13:19,589 --> 00:13:24,420
next-door

00:13:20,070 --> 00:13:31,320
no matter how we end up building this we

00:13:24,420 --> 00:13:32,820
also solve two and one yes so we don't

00:13:31,320 --> 00:13:34,680
need to manually maintain another list

00:13:32,820 --> 00:13:39,510
of dependencies we just catch all

00:13:34,680 --> 00:13:41,160
intermediate builds so as I said like a

00:13:39,510 --> 00:13:43,800
buff architecture will automatically

00:13:41,160 --> 00:13:46,080
upload all builds happening on a certain

00:13:43,800 --> 00:13:48,180
machine into the binary cash and can be

00:13:46,080 --> 00:13:50,550
entirely described in this CI build

00:13:48,180 --> 00:13:52,529
slave image that you want on your cloud

00:13:50,550 --> 00:13:54,300
provider maybe without a need for any

00:13:52,529 --> 00:13:56,490
cash related configuration in the build

00:13:54,300 --> 00:13:58,170
pipeline itself that means it's

00:13:56,490 --> 00:14:01,529
currently most suitable when you provide

00:13:58,170 --> 00:14:03,900
your own self hosted builders because

00:14:01,529 --> 00:14:05,790
multi-user Nix requires multiple users

00:14:03,900 --> 00:14:10,350
and setting those up outside the repo

00:14:05,790 --> 00:14:12,029
and not inside of some of those setting

00:14:10,350 --> 00:14:13,890
those up outside the repo but most of

00:14:12,029 --> 00:14:16,350
the time means like you can't use a lot

00:14:13,890 --> 00:14:18,240
of D hosted CI solution steps like have

00:14:16,350 --> 00:14:20,430
used some sort of shared runners because

00:14:18,240 --> 00:14:22,920
there's just no way to to set up other

00:14:20,430 --> 00:14:25,190
users there it's it's it's just often

00:14:22,920 --> 00:14:25,190
not possible

00:14:25,540 --> 00:14:31,240
but depending on your threat model you

00:14:29,230 --> 00:14:32,950
could still start using post build hooks

00:14:31,240 --> 00:14:36,160
in a single user in its next setting

00:14:32,950 --> 00:14:38,940
which will at least solve one limitation

00:14:36,160 --> 00:14:38,940
one two and three

00:14:41,010 --> 00:14:47,230
yeah that's why I spoke about yeah

00:14:45,700 --> 00:14:48,850
another problem is that running Nix

00:14:47,230 --> 00:14:51,610
inside doctor requires privileged

00:14:48,850 --> 00:14:53,620
containers because of some of the

00:14:51,610 --> 00:14:57,670
sandboxing features not currently

00:14:53,620 --> 00:15:00,300
working and failings so it might be

00:14:57,670 --> 00:15:02,850
unsuitable for some container platforms

00:15:00,300 --> 00:15:05,230
another problem is that the official

00:15:02,850 --> 00:15:06,640
Nexus Nix docker image doesn't provide a

00:15:05,230 --> 00:15:08,020
multi-user installation but it's based

00:15:06,640 --> 00:15:11,860
on alpine and the shell script install

00:15:08,020 --> 00:15:13,690
UNIX yeah but as I said depending on the

00:15:11,860 --> 00:15:15,340
platform you're running on you could you

00:15:13,690 --> 00:15:19,410
could go with multi-user docker

00:15:15,340 --> 00:15:23,140
containers privileged ones as well yeah

00:15:19,410 --> 00:15:30,100
so TL DR use post build hooks to upload

00:15:23,140 --> 00:15:34,060
to the cache instead of other hex future

00:15:30,100 --> 00:15:36,810
plans so when new machines are spinned

00:15:34,060 --> 00:15:39,400
up in off pork

00:15:36,810 --> 00:15:41,980
they often hit another note in the next

00:15:39,400 --> 00:15:44,410
of bokram and you have to wait again for

00:15:41,980 --> 00:15:47,410
dependencies to be compiled so one way

00:15:44,410 --> 00:15:49,570
to fix this might be to have of pork use

00:15:47,410 --> 00:15:52,150
not the official cash nicks or sort

00:15:49,570 --> 00:15:55,380
packet but another bucket that all the

00:15:52,150 --> 00:15:57,670
builders share and we could still not

00:15:55,380 --> 00:15:58,990
worry about having to pay too much money

00:15:57,670 --> 00:16:00,970
for it because we could just nuke it

00:15:58,990 --> 00:16:02,860
nobody's really relying on it and we can

00:16:00,970 --> 00:16:04,180
rebuilt it so either by garbage

00:16:02,860 --> 00:16:08,800
collecting or throwing the way

00:16:04,180 --> 00:16:10,840
completely in Michaels some weeks for

00:16:08,800 --> 00:16:12,340
all some weeks what it also like to see

00:16:10,840 --> 00:16:19,300
is nicer tooling in general and

00:16:12,340 --> 00:16:22,800
documentation on how to use it a demon

00:16:19,300 --> 00:16:22,800
to handle the a synchronous upload

00:16:22,980 --> 00:16:31,330
there's a NYX copy pro2 upload to

00:16:27,610 --> 00:16:33,430
support CCS that would also help in some

00:16:31,330 --> 00:16:36,460
cloud environments but it's not strictly

00:16:33,430 --> 00:16:38,170
related to post build yeah and as I said

00:16:36,460 --> 00:16:38,760
more and more documentation in general

00:16:38,170 --> 00:16:42,000
and how to

00:16:38,760 --> 00:16:44,490
swish the ice so maybe some some mixers

00:16:42,000 --> 00:16:45,990
module describing on how to wire it is

00:16:44,490 --> 00:16:47,670
all together for your own self hosted

00:16:45,990 --> 00:16:50,790
machines have some code ready that I

00:16:47,670 --> 00:16:53,339
would like to open source it's but it's

00:16:50,790 --> 00:16:56,070
really not so much not so much craft lab

00:16:53,339 --> 00:16:57,300
not so much of code and also maybe a

00:16:56,070 --> 00:16:59,190
github action template

00:16:57,300 --> 00:17:01,320
I mean you weave github actions as far

00:16:59,190 --> 00:17:04,260
as I know you cannot have multiple users

00:17:01,320 --> 00:17:06,809
but you could at least get like the

00:17:04,260 --> 00:17:10,169
single user parts set up with post build

00:17:06,809 --> 00:17:12,030
hooks yeah and some blog posts

00:17:10,169 --> 00:17:15,510
describing this in a more readable

00:17:12,030 --> 00:17:17,870
fashion than a slide that's what my side

00:17:15,510 --> 00:17:17,870
thanks

00:17:18,500 --> 00:17:21,609
[Applause]

00:17:22,990 --> 00:17:26,440
any questions

00:17:31,650 --> 00:17:36,059
have you looked into implementing a post

00:17:34,470 --> 00:17:37,710
build hook script that can upload the

00:17:36,059 --> 00:17:39,780
source tarballs and the patch files that

00:17:37,710 --> 00:17:42,390
were used to do the build to a Content

00:17:39,780 --> 00:17:46,160
address tarball cache no but it's an

00:17:42,390 --> 00:17:46,160
interesting experimentation field

00:17:54,059 --> 00:18:02,260
when the billhook fails of the post up

00:17:58,929 --> 00:18:08,340
Liu post built who fails does your bill

00:18:02,260 --> 00:18:11,380
fail I don't know to be honest okay and

00:18:08,340 --> 00:18:14,710
logs of the bill took will they be will

00:18:11,380 --> 00:18:15,909
they kind of say if ever and is from

00:18:14,710 --> 00:18:19,710
Hydra

00:18:15,909 --> 00:18:23,230
where are the locks or the locks of this

00:18:19,710 --> 00:18:26,620
hook go to will they end up in the lock

00:18:23,230 --> 00:18:29,820
of the build or are they I think it's

00:18:26,620 --> 00:18:29,820
the Knicks teaming logging it

00:18:36,450 --> 00:18:50,970
um can you get the mic me I get my mic

00:18:39,779 --> 00:18:53,039
I like this yeah the hoops all at put

00:18:50,970 --> 00:18:54,720
always goes to the users terminal if the

00:18:53,039 --> 00:18:57,480
hook fails the build succeeds but no

00:18:54,720 --> 00:18:58,980
further builds executes and the hook

00:18:57,480 --> 00:19:02,389
executes synchronously and blocks other

00:18:58,980 --> 00:19:02,389
bills from progressing while it runs

00:19:10,510 --> 00:19:14,710
you mentioned possibly doing garbage

00:19:12,610 --> 00:19:16,510
collection of the s3 buckets does such a

00:19:14,710 --> 00:19:18,100
function actually exist with Nick's

00:19:16,510 --> 00:19:19,900
collect garbage or a tool to garbage

00:19:18,100 --> 00:19:22,720
collect the buckets I think there's a

00:19:19,900 --> 00:19:24,490
Perl script which is a bit old but I

00:19:22,720 --> 00:19:26,620
don't think we're actually running it on

00:19:24,490 --> 00:19:29,890
cache Nexus or canned we could we could

00:19:26,620 --> 00:19:32,820
dogfood this script on on the off pork

00:19:29,890 --> 00:19:32,820
bucket

00:19:45,250 --> 00:19:52,450
all right so if there's any more

00:19:47,830 --> 00:19:54,450
questions feel free to yeah hit me after

00:19:52,450 --> 00:20:02,469
the talk Thanks

00:19:54,450 --> 00:20:02,469

YouTube URL: https://www.youtube.com/watch?v=NB8YHWc7dLk


