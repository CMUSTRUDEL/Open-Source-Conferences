Title: Build outside of the (sand)box (NixCon 2019)
Publication date: 2019-12-14
Playlist: NixCon 2019 (Brno)
Description: 
	This talk will present experiments at building packages incrementally by relying on an external cache outside the nix sandbox. We will show how tools such as distcc and bazel can benefit from impure information during the build, and discuss how this impacts purity and reproducibility.
Captions: 
	00:00:10,259 --> 00:00:15,480
so the last talk of this year's next

00:00:13,230 --> 00:00:20,630
cone is going to be about building

00:00:15,480 --> 00:00:20,630
outside of the sandbox by Laius

00:00:35,760 --> 00:00:40,649
like this one is working perfect

00:00:38,170 --> 00:00:43,059
okay so hello everyone I have this

00:00:40,649 --> 00:00:46,270
strange pleasure to be the last one to

00:00:43,059 --> 00:00:49,180
talk at this conference but there is

00:00:46,270 --> 00:00:52,360
doll that's precisely made for you to

00:00:49,180 --> 00:00:54,610
think of it I've no real message for you

00:00:52,360 --> 00:00:57,129
or rather would love to challenge you

00:00:54,610 --> 00:01:01,570
and think about like what we do a bit

00:00:57,129 --> 00:01:04,180
differently so I am known as ladies I'm

00:01:01,570 --> 00:01:05,920
currently doing a PhD and build systems

00:01:04,180 --> 00:01:10,420
so we can have a chat about that later

00:01:05,920 --> 00:01:15,940
on and this is an experiment that comes

00:01:10,420 --> 00:01:19,840
from well some presentation that I made

00:01:15,940 --> 00:01:22,179
two years ago so it will go in like very

00:01:19,840 --> 00:01:25,270
simply with three different examples I

00:01:22,179 --> 00:01:27,940
want to build outsides of outside of the

00:01:25,270 --> 00:01:31,479
NYX sandbox and I will use different

00:01:27,940 --> 00:01:33,580
tools to do that like CH SC cage resi

00:01:31,479 --> 00:01:34,869
see you will get explanation that and

00:01:33,580 --> 00:01:37,350
then we have a small discussion about

00:01:34,869 --> 00:01:41,320
what does it mean where do we go and

00:01:37,350 --> 00:01:44,409
final conclusion so two years ago I was

00:01:41,320 --> 00:01:47,110
here precisely in front of you and I had

00:01:44,409 --> 00:01:48,700
this well video we didn't work at the

00:01:47,110 --> 00:01:53,979
time but I think it's fixed now

00:01:48,700 --> 00:01:55,420
like yeah so this video basically shows

00:01:53,979 --> 00:01:57,759
what happens when you're trying to build

00:01:55,420 --> 00:01:59,259
a long package like Firefox for me it's

00:01:57,759 --> 00:02:02,259
often Firefox but possibly you are

00:01:59,259 --> 00:02:05,649
building gtk or anything like that and

00:02:02,259 --> 00:02:07,899
then you reach the top nearly all of the

00:02:05,649 --> 00:02:11,860
compilations done and then for some

00:02:07,899 --> 00:02:14,739
reason at some point well there is a fix

00:02:11,860 --> 00:02:16,870
of thing that doesn't work and bam you

00:02:14,739 --> 00:02:19,420
are done you are just back at the start

00:02:16,870 --> 00:02:20,769
and if you want to fix the issue then

00:02:19,420 --> 00:02:27,730
you have to pay all of the compilation

00:02:20,769 --> 00:02:30,310
of the full package well so what's the

00:02:27,730 --> 00:02:33,070
situation now two years after that well

00:02:30,310 --> 00:02:34,510
we cannot build Nix package

00:02:33,070 --> 00:02:38,560
incrementally of course and that's

00:02:34,510 --> 00:02:44,860
because of the sandbox so it means that

00:02:38,560 --> 00:02:47,620
for Firefox DTK Libre fees cute GCC

00:02:44,860 --> 00:02:49,240
well it's specific all of these things

00:02:47,620 --> 00:02:51,310
you have to build them from scratch

00:02:49,240 --> 00:02:54,070
every time you make a change to the

00:02:51,310 --> 00:02:56,080
derivation possibly that's not something

00:02:54,070 --> 00:02:57,880
that happens often for you but if you

00:02:56,080 --> 00:03:00,520
try to hike in that to the next package

00:02:57,880 --> 00:03:02,980
especially if you want to like refactor

00:03:00,520 --> 00:03:04,660
the standard environment something that

00:03:02,980 --> 00:03:06,040
you should never do but if you work on

00:03:04,660 --> 00:03:11,470
that then you will pay that you have to

00:03:06,040 --> 00:03:16,420
build everything so my first attempt to

00:03:11,470 --> 00:03:18,580
escape the sandbox is CK CK I guess

00:03:16,420 --> 00:03:20,620
everyone knows that no need to explain

00:03:18,580 --> 00:03:24,370
it's quite an odd tool but it's still

00:03:20,620 --> 00:03:26,410
heavily used in some places and the

00:03:24,370 --> 00:03:29,230
basic idea with all these caches is that

00:03:26,410 --> 00:03:31,240
well you already asked me to compile

00:03:29,230 --> 00:03:33,370
this file with these options and with

00:03:31,240 --> 00:03:35,110
these headers so I already know the

00:03:33,370 --> 00:03:39,160
answer I can just fetch it from the

00:03:35,110 --> 00:03:42,250
cache small picture right so just

00:03:39,160 --> 00:03:45,130
queried the cache and the cache says

00:03:42,250 --> 00:03:46,780
well no no it's not there yet okay so

00:03:45,130 --> 00:03:48,040
you can come by locally and then you

00:03:46,780 --> 00:03:49,000
upload it to the cache for next

00:03:48,040 --> 00:03:51,370
iteration

00:03:49,000 --> 00:03:54,370
and then you get your results right

00:03:51,370 --> 00:03:56,200
which means that on the next time when

00:03:54,370 --> 00:03:57,760
there is a cache hit you can just

00:03:56,200 --> 00:04:02,680
recover the visit from the cache and

00:03:57,760 --> 00:04:04,870
that's it it should be quite fast okay

00:04:02,680 --> 00:04:06,670
the funny thing is that I say well I

00:04:04,870 --> 00:04:09,250
want to try that and then I discovered

00:04:06,670 --> 00:04:11,500
that it already exists it's already

00:04:09,250 --> 00:04:14,920
feasible in X packages there is a seek a

00:04:11,500 --> 00:04:19,299
std end the standout environment

00:04:14,920 --> 00:04:21,340
modified that allows you to use CK there

00:04:19,299 --> 00:04:23,530
is a lot of wrapping going on there we

00:04:21,340 --> 00:04:26,110
can have a small chat about well what

00:04:23,530 --> 00:04:29,440
that means but basically if you replace

00:04:26,110 --> 00:04:34,510
this the standard environment with that

00:04:29,440 --> 00:04:35,890
one you get c cache working well you

00:04:34,510 --> 00:04:37,930
guessed it is working but you still have

00:04:35,890 --> 00:04:42,490
the sandbox right so we will see how to

00:04:37,930 --> 00:04:44,950
get out of that but in X OS that's also

00:04:42,490 --> 00:04:47,200
already provided and then it comes with

00:04:44,950 --> 00:04:51,340
all the defaults that you need to change

00:04:47,200 --> 00:04:55,060
in tunics meaning that you need to build

00:04:51,340 --> 00:04:57,340
by allowing an extra folder the cache to

00:04:55,060 --> 00:04:59,199
be mounted inside the sandbox

00:04:57,340 --> 00:05:00,430
and he says we do that for you if you

00:04:59,199 --> 00:05:03,790
are just using Nixon

00:05:00,430 --> 00:05:05,770
you have to use options to do that they

00:05:03,790 --> 00:05:08,919
made it in I've no idea we did that by

00:05:05,770 --> 00:05:10,570
the way I should check but they made it

00:05:08,919 --> 00:05:12,370
in a very smart way in a sense that you

00:05:10,570 --> 00:05:14,860
can specify a list of packages that will

00:05:12,370 --> 00:05:16,449
have this CH enabled so that you are not

00:05:14,860 --> 00:05:18,370
breaking the sandbox for everything but

00:05:16,449 --> 00:05:20,470
only for these very heavy packages that

00:05:18,370 --> 00:05:23,290
you will compile orphans so if in your

00:05:20,470 --> 00:05:27,070
company you have one big package like

00:05:23,290 --> 00:05:30,700
that you can add it to the list okay

00:05:27,070 --> 00:05:34,389
let's try the demo done so the demo will

00:05:30,700 --> 00:05:39,669
work I've taken I tree just because it's

00:05:34,389 --> 00:05:41,440
a average size C C++ project and we will

00:05:39,669 --> 00:05:45,180
build that normally and then which

00:05:41,440 --> 00:05:45,180
seekers to see what it gives

00:05:53,919 --> 00:06:01,330
okay let's go yeah okay so if I want to

00:05:57,370 --> 00:06:06,249
build AI tree normally I just mix bill

00:06:01,330 --> 00:06:08,740
this is stuff and we will try to get

00:06:06,249 --> 00:06:15,430
that into we will try to filter the

00:06:08,740 --> 00:06:16,930
output so it's been modified a bit just

00:06:15,430 --> 00:06:18,819
checking the living so it's been

00:06:16,930 --> 00:06:23,830
modified a bit because I added some kind

00:06:18,819 --> 00:06:27,129
of debugging to it so you can just see

00:06:23,830 --> 00:06:29,169
the time that's each phase takes so we

00:06:27,129 --> 00:06:31,629
get this and back face like well that's

00:06:29,169 --> 00:06:34,360
way below this again the patch face way

00:06:31,629 --> 00:06:37,900
below the second - I expect something

00:06:34,360 --> 00:06:40,990
about ten seconds - to build yeah so he

00:06:37,900 --> 00:06:43,120
acts against - to configure and ten

00:06:40,990 --> 00:06:45,099
seconds to build I three that's with the

00:06:43,120 --> 00:06:50,139
sandbox that everything is normal except

00:06:45,099 --> 00:06:54,490
of this extra logging at it now if we

00:06:50,139 --> 00:07:06,099
start with an audit rule we can next

00:06:54,490 --> 00:07:07,810
build a I 3 CH yeah if I do it like that

00:07:06,099 --> 00:07:09,849
then the sandbox is still active so it

00:07:07,810 --> 00:07:16,509
won't change anything right so you need

00:07:09,849 --> 00:07:18,719
to add an option that's extra sandbox

00:07:16,509 --> 00:07:18,719
path

00:07:27,009 --> 00:07:36,409
with that I can build and mount the the

00:07:31,789 --> 00:07:37,580
see cage cage inside the sandbox well I

00:07:36,409 --> 00:07:40,189
don't want to do that at the moment

00:07:37,580 --> 00:07:47,539
because well this cage will try to clean

00:07:40,189 --> 00:07:49,189
it before okay so just to be sure that

00:07:47,539 --> 00:07:57,430
there is nothing in the oven on the

00:07:49,189 --> 00:08:05,870
first try okay we can start combining it

00:07:57,430 --> 00:08:08,330
and of course I'm still missing that I'm

00:08:05,870 --> 00:08:11,529
not sure if you have an idea of what's

00:08:08,330 --> 00:08:13,729
to be expected but in this case we are

00:08:11,529 --> 00:08:15,319
there is nothing in the cache so we need

00:08:13,729 --> 00:08:17,659
to compile everything so we'll have to

00:08:15,319 --> 00:08:19,460
take the same time and also we have to

00:08:17,659 --> 00:08:21,560
pay an extra overhead for sterilizing

00:08:19,460 --> 00:08:25,689
and inserting everything into the folder

00:08:21,560 --> 00:08:25,689
so this should be a bit slower actually

00:08:35,000 --> 00:08:42,979
okay so now it's ten seconds in 15 or

00:08:38,120 --> 00:08:45,560
its matches what we had before like we

00:08:42,979 --> 00:08:47,350
are from a to 10 and from 10 to 15 just

00:08:45,560 --> 00:08:52,579
because we pay the overhead of

00:08:47,350 --> 00:08:55,699
initializing everything so if you want

00:08:52,579 --> 00:08:59,779
to start with then we need to compile it

00:08:55,699 --> 00:09:05,089
again right so I've made a special trick

00:08:59,779 --> 00:09:07,579
for you that you can just say again to

00:09:05,089 --> 00:09:11,959
the package and I can't explain you how

00:09:07,579 --> 00:09:14,029
it works but it's nothing very magic the

00:09:11,959 --> 00:09:16,009
nice part is that's well it starts the

00:09:14,029 --> 00:09:17,480
exact same compilation with some random

00:09:16,009 --> 00:09:19,040
stuff added to the derivation so that's

00:09:17,480 --> 00:09:21,310
nice things that it needs to be done

00:09:19,040 --> 00:09:21,310
again

00:09:27,930 --> 00:09:34,560
and this time is supposed to be faster

00:09:30,450 --> 00:09:37,230
but you do more effects well okay that's

00:09:34,560 --> 00:09:45,600
not exactly what I used to have but it

00:09:37,230 --> 00:09:50,250
makes some sense so what's not what's

00:09:45,600 --> 00:09:51,990
right so we have all of these if you

00:09:50,250 --> 00:09:55,290
don't mind I will take the old results

00:09:51,990 --> 00:09:57,390
that I had they are basically the same

00:09:55,290 --> 00:10:01,560
seven and six right that's what we had

00:09:57,390 --> 00:10:04,130
seven in six so it's like the rounded

00:10:01,560 --> 00:10:04,130
numbers are the same

00:10:04,160 --> 00:10:11,089
well nothing unexpected here except

00:10:08,880 --> 00:10:16,670
that's well you see that there is this

00:10:11,089 --> 00:10:20,279
six seconds that's below the previous

00:10:16,670 --> 00:10:23,790
build times and in a sense I tree is not

00:10:20,279 --> 00:10:26,010
a tool that use heavy GCC compiler

00:10:23,790 --> 00:10:29,339
Asians there are a lot of manual

00:10:26,010 --> 00:10:31,080
generation documentation generating a

00:10:29,339 --> 00:10:33,089
lot of random stuff that are not cached

00:10:31,080 --> 00:10:35,160
by C cache so of course on a bigger

00:10:33,089 --> 00:10:37,230
project that uses more C compiling you

00:10:35,160 --> 00:10:39,240
would have a better speed up here but

00:10:37,230 --> 00:10:42,180
possibly worse over your penalty on the

00:10:39,240 --> 00:10:45,470
first time that you use it makes sense

00:10:42,180 --> 00:10:50,520
well is this a good thing

00:10:45,470 --> 00:10:52,620
yeah the problem is that when you start

00:10:50,520 --> 00:10:58,080
to make holes in the sandbox like that

00:10:52,620 --> 00:10:59,930
well you know you you don't have any any

00:10:58,080 --> 00:11:02,430
guarantee of what's happening right

00:10:59,930 --> 00:11:06,839
small hole in the sandbox and that's

00:11:02,430 --> 00:11:09,870
over but at the same time and we have a

00:11:06,839 --> 00:11:11,959
discussion at the end and I think it can

00:11:09,870 --> 00:11:16,020
be a good thing at least in some

00:11:11,959 --> 00:11:17,850
well-defined situations anyway let's go

00:11:16,020 --> 00:11:20,820
to the second attempt so like I wanted

00:11:17,850 --> 00:11:22,529
to use well CK is just good but well

00:11:20,820 --> 00:11:24,720
know people they do better things at

00:11:22,529 --> 00:11:27,630
that what if I want to use the same

00:11:24,720 --> 00:11:28,890
cache as my colleague or someone else we

00:11:27,630 --> 00:11:30,510
should put that on the network and

00:11:28,890 --> 00:11:31,710
that's basically the idea of SC cage

00:11:30,510 --> 00:11:34,980
which is CK

00:11:31,710 --> 00:11:38,250
shared or shared CK's developed by

00:11:34,980 --> 00:11:40,020
Mozilla so it's Mozilla so they made it

00:11:38,250 --> 00:11:46,200
for C and C++ and then they also a

00:11:40,020 --> 00:11:47,940
little rest because well it's Mozilla if

00:11:46,200 --> 00:11:50,550
you look at the diagram it doesn't

00:11:47,940 --> 00:11:53,210
change much it just like basically it's

00:11:50,550 --> 00:11:56,160
exactly the same the only change is the

00:11:53,210 --> 00:11:59,430
name of the the cache it's not a folder

00:11:56,160 --> 00:12:03,120
now it's a networked machine which means

00:11:59,430 --> 00:12:05,670
that you are not mounting a folder

00:12:03,120 --> 00:12:07,470
inside Sandberg's you make you're making

00:12:05,670 --> 00:12:10,170
a completely different type of Olinda

00:12:07,470 --> 00:12:15,750
you need network access well is that

00:12:10,170 --> 00:12:16,980
possible no no it's not possible is not

00:12:15,750 --> 00:12:19,260
supported you cannot make a small hole

00:12:16,980 --> 00:12:21,300
and say okay I want this machine I went

00:12:19,260 --> 00:12:23,370
this port and that server doesn't work

00:12:21,300 --> 00:12:25,800
so at the moment and for the experiments

00:12:23,370 --> 00:12:29,000
what I do is just disable the sandbox so

00:12:25,800 --> 00:12:31,530
entering strange countries but

00:12:29,000 --> 00:12:33,600
technically should be feasible to have

00:12:31,530 --> 00:12:36,090
like a restricted network access in the

00:12:33,600 --> 00:12:41,220
sandbox if you want to keep some of the

00:12:36,090 --> 00:12:42,890
properties but not all of them I also

00:12:41,220 --> 00:12:45,240
discovered that the sandbox is not

00:12:42,890 --> 00:12:46,770
disabled sandbox is not possible when

00:12:45,240 --> 00:12:49,620
you are building in different store and

00:12:46,770 --> 00:12:51,330
you main store so all of these demos are

00:12:49,620 --> 00:12:55,670
just changing my main NIC stores

00:12:51,330 --> 00:12:57,180
possibly it breaks things but we'll see

00:12:55,670 --> 00:12:59,670
yeah

00:12:57,180 --> 00:13:01,620
this closure here I won't do it because

00:12:59,670 --> 00:13:03,600
well for reasons that we don't have much

00:13:01,620 --> 00:13:06,270
time and also because it's not that's

00:13:03,600 --> 00:13:08,790
different just disable sandbox configure

00:13:06,270 --> 00:13:11,220
remote and that's it so I will go

00:13:08,790 --> 00:13:14,990
directly to the third attempt which is

00:13:11,220 --> 00:13:18,050
VCC and we see we keep the same ID

00:13:14,990 --> 00:13:21,450
except that we had a remote execution

00:13:18,050 --> 00:13:24,000
that's a tool that has been developed at

00:13:21,450 --> 00:13:25,770
Bloomberg and it which mainly because

00:13:24,000 --> 00:13:27,330
well they love basil they would like to

00:13:25,770 --> 00:13:29,610
have all these remote execution and

00:13:27,330 --> 00:13:31,950
things but but they can't move at the

00:13:29,610 --> 00:13:34,860
moment like migrating all of you bills

00:13:31,950 --> 00:13:36,510
to basil that's a huge investment so

00:13:34,860 --> 00:13:39,030
they don't want to do that and they

00:13:36,510 --> 00:13:41,250
developed this very small replacement

00:13:39,030 --> 00:13:42,420
that's instead of changing all of the

00:13:41,250 --> 00:13:45,330
bit system you just

00:13:42,420 --> 00:13:47,820
each Jesus invocation with it and then

00:13:45,330 --> 00:13:51,690
at that moment everything is sent to the

00:13:47,820 --> 00:13:55,050
server what you get you get a better

00:13:51,690 --> 00:13:57,090
explanation with diagram but what we do

00:13:55,050 --> 00:13:59,100
in this case that we removed the local

00:13:57,090 --> 00:14:01,710
compilation and everything is reloads

00:13:59,100 --> 00:14:06,360
the main advantage is that you can

00:14:01,710 --> 00:14:08,940
paralyze a lot more if you have like 100

00:14:06,360 --> 00:14:11,060
workers and a huge workload then you can

00:14:08,940 --> 00:14:13,230
spread the workload on 100 workers

00:14:11,060 --> 00:14:15,510
that's the main advantage of not

00:14:13,230 --> 00:14:21,780
executing the compliation locally of

00:14:15,510 --> 00:14:26,040
course okay so this is the example that

00:14:21,780 --> 00:14:30,270
may not work perfectly I discovered that

00:14:26,040 --> 00:14:32,460
you need of course a server that allows

00:14:30,270 --> 00:14:36,150
this remote execution so in this case

00:14:32,460 --> 00:14:37,980
it's build rid I could have used another

00:14:36,150 --> 00:14:40,170
one but I discovered different issues

00:14:37,980 --> 00:14:43,080
not sure if it sneaks related or like my

00:14:40,170 --> 00:14:45,000
VM related or something but I cannot

00:14:43,080 --> 00:14:46,470
work in parallel so I can only compile

00:14:45,000 --> 00:14:48,780
one thing at a time because the server

00:14:46,470 --> 00:14:50,550
won't take many attempts at the same

00:14:48,780 --> 00:14:52,020
time which is like a bit stupid it's not

00:14:50,550 --> 00:14:54,180
a limitation of the tool is used

00:14:52,020 --> 00:14:56,010
perfectly well in a lot of companies so

00:14:54,180 --> 00:14:58,710
it's most probably an issue with my

00:14:56,010 --> 00:15:01,500
setup but anyway so it's single threaded

00:14:58,710 --> 00:15:04,020
and then the worker is quite slow so if

00:15:01,500 --> 00:15:06,600
I have to do the demo for you well

00:15:04,020 --> 00:15:10,530
that's the time it takes it's about 3 to

00:15:06,600 --> 00:15:14,820
4 minutes to compile well the definitely

00:15:10,530 --> 00:15:18,300
so vicious or nevertheless I think this

00:15:14,820 --> 00:15:21,120
is mostly like well bad configuration

00:15:18,300 --> 00:15:23,760
from my parts but I really want to show

00:15:21,120 --> 00:15:29,310
you what kind of strange things you can

00:15:23,760 --> 00:15:30,460
discover when you do that so let's start

00:15:29,310 --> 00:15:33,549
again

00:15:30,460 --> 00:15:33,549
[Music]

00:15:38,380 --> 00:15:43,480
this is completely stupid like it's a

00:15:41,530 --> 00:15:47,270
bill grid server but it's called build

00:15:43,480 --> 00:15:48,660
farm well we have to live with that so

00:15:47,270 --> 00:15:51,550
[Music]

00:15:48,660 --> 00:15:53,950
now on this server everything is already

00:15:51,550 --> 00:15:55,390
compiled so we will remove what's in

00:15:53,950 --> 00:15:56,680
there I will move the content addressed

00:15:55,390 --> 00:15:58,930
towards on the server

00:15:56,680 --> 00:16:03,310
I removed the database so that was just

00:15:58,930 --> 00:16:05,980
basically a clean server anyway and I

00:16:03,310 --> 00:16:07,630
start the server I also need to start a

00:16:05,980 --> 00:16:12,430
worker of course yeah this

00:16:07,630 --> 00:16:14,710
initialization and then because I'm lazy

00:16:12,430 --> 00:16:17,110
I did not specify any kind of docker

00:16:14,710 --> 00:16:20,830
worker on the environment I just like

00:16:17,110 --> 00:16:30,130
use whatever is on this machine well

00:16:20,830 --> 00:16:32,080
that's it okay right so what we want to

00:16:30,130 --> 00:16:43,150
do now is build exactly the same thing

00:16:32,080 --> 00:16:49,840
as we did before yes so it's built okay

00:16:43,150 --> 00:16:55,930
we won this I three ricci I will take

00:16:49,840 --> 00:17:02,070
the research is small this one should be

00:16:55,930 --> 00:17:05,890
built already let's try option sandbox

00:17:02,070 --> 00:17:09,070
force this is what allows you to access

00:17:05,890 --> 00:17:12,700
the network yeah it's already built

00:17:09,070 --> 00:17:16,060
that's good and the next is already it's

00:17:12,700 --> 00:17:18,840
already built yes yep so we need to go

00:17:16,060 --> 00:17:18,840
over and over again

00:17:22,450 --> 00:17:31,780
yeah okay that's working very useful

00:17:28,400 --> 00:17:37,670
when you have to do things like that and

00:17:31,780 --> 00:17:41,660
well no I won't see you let's see what

00:17:37,670 --> 00:17:43,220
we get it fails it fails and that's

00:17:41,660 --> 00:17:45,620
normal that's what you get on the first

00:17:43,220 --> 00:17:48,350
attempt if you're like there is nothing

00:17:45,620 --> 00:17:50,630
on this remote host you need all of the

00:17:48,350 --> 00:17:52,190
built-in puts all the dependencies of

00:17:50,630 --> 00:17:54,260
your diversion needs to be there in a

00:17:52,190 --> 00:17:56,900
way and this is of course not automated

00:17:54,260 --> 00:17:58,960
it's not doesn't work at the moment but

00:17:56,900 --> 00:18:02,840
then I think there is some potential to

00:17:58,960 --> 00:18:05,900
make integration and to make NICs catch

00:18:02,840 --> 00:18:08,480
the network access and wrap rapid in

00:18:05,900 --> 00:18:10,970
some way or we should be able to find a

00:18:08,480 --> 00:18:12,620
way to make this work at the moment what

00:18:10,970 --> 00:18:22,030
we have to do is like applause the

00:18:12,620 --> 00:18:24,740
inputs so oh crap

00:18:22,030 --> 00:18:28,580
so I just try to collect all of the

00:18:24,740 --> 00:18:32,330
build inputs of my derivation and then I

00:18:28,580 --> 00:18:33,830
send that to a server well this is a

00:18:32,330 --> 00:18:35,060
trick there is always a trick like the

00:18:33,830 --> 00:18:37,220
network is not that good that I can

00:18:35,060 --> 00:18:38,840
upload everything but I just removed one

00:18:37,220 --> 00:18:41,300
of the missing files and this is the one

00:18:38,840 --> 00:18:43,250
that has just been updated so if we

00:18:41,300 --> 00:18:48,590
start again and build this again again

00:18:43,250 --> 00:18:50,800
again thing what do you expect does it

00:18:48,590 --> 00:18:50,800
work now

00:18:53,929 --> 00:19:00,570
well great it doesn't work the tool is

00:18:59,820 --> 00:19:02,549
still missing

00:19:00,570 --> 00:19:06,929
how is that possible we've just added

00:19:02,549 --> 00:19:08,549
the tool that was missing and in this

00:19:06,929 --> 00:19:11,700
case it's like one of the most

00:19:08,549 --> 00:19:14,640
frustrating parts of this is that well

00:19:11,700 --> 00:19:16,049
the failure is already in the cache so

00:19:14,640 --> 00:19:19,289
we're just fetching that he says

00:19:16,049 --> 00:19:21,360
previous time it fails so I can fail

00:19:19,289 --> 00:19:29,880
again if you want to work around that

00:19:21,360 --> 00:19:31,919
then you need to kill everything in this

00:19:29,880 --> 00:19:36,500
case I have no idea of to remove remove

00:19:31,919 --> 00:19:36,500
one entry so just let's be efficient

00:19:40,490 --> 00:19:45,450
okay everything started clean from

00:19:42,929 --> 00:19:46,830
scratch so now I can build it and well

00:19:45,450 --> 00:19:49,169
of course it takes like three minutes so

00:19:46,830 --> 00:19:57,659
we won't wait for the end of that but

00:19:49,169 --> 00:20:01,020
this time it should work let's wait by

00:19:57,659 --> 00:20:05,490
the way this VCC - small is configured

00:20:01,020 --> 00:20:07,049
in a way that's the cache VCC is not

00:20:05,490 --> 00:20:09,179
used in the configure face because the

00:20:07,049 --> 00:20:11,280
configure face just drops a lot of the

00:20:09,179 --> 00:20:14,789
output and so you don't see the error

00:20:11,280 --> 00:20:17,280
that we had before just does the reason

00:20:14,789 --> 00:20:18,620
for the - small so it's working it's

00:20:17,280 --> 00:20:21,210
compiling one thing at a time

00:20:18,620 --> 00:20:23,070
well it will compile for three minutes I

00:20:21,210 --> 00:20:26,330
don't really need it because if

00:20:23,070 --> 00:20:29,330
everything in the so let's grab that

00:20:26,330 --> 00:20:29,330
okay

00:20:32,810 --> 00:20:39,770
okay it makes sense so like like you've

00:20:38,090 --> 00:20:41,750
discovered like we need to have all

00:20:39,770 --> 00:20:44,750
built English on the server like it's

00:20:41,750 --> 00:20:47,660
not it does not exist at the moment but

00:20:44,750 --> 00:20:50,420
the fact that it failed is also a good

00:20:47,660 --> 00:20:52,850
thing it shows that if you are missing

00:20:50,420 --> 00:20:56,090
the exact compiler that's required by

00:20:52,850 --> 00:20:58,370
that derivation on the worker if we say

00:20:56,090 --> 00:21:00,350
I done Evitts he's not trying to use

00:20:58,370 --> 00:21:02,630
another thing he's not trying to use GCC

00:21:00,350 --> 00:21:05,090
that's installed in that machine so Nix

00:21:02,630 --> 00:21:09,470
by design with all of these strange

00:21:05,090 --> 00:21:14,090
paths and ashes makes it so that you do

00:21:09,470 --> 00:21:16,610
not pick random stuff we've discovered

00:21:14,090 --> 00:21:17,720
that like this impure errors are cached

00:21:16,610 --> 00:21:20,000
the fact that there was something

00:21:17,720 --> 00:21:22,610
missing in the state of the worker like

00:21:20,000 --> 00:21:26,690
this is part of this is there forever

00:21:22,610 --> 00:21:29,900
that's really annoying so well that's

00:21:26,690 --> 00:21:33,980
something to care about but I think we

00:21:29,900 --> 00:21:35,750
could really automate that and while the

00:21:33,980 --> 00:21:39,920
game is potentially really huge because

00:21:35,750 --> 00:21:41,600
UNIX if we can have the real exact set

00:21:39,920 --> 00:21:43,820
of inputs we could share this

00:21:41,600 --> 00:21:47,300
information through everyone that would

00:21:43,820 --> 00:21:52,940
be like an either cache for very small C

00:21:47,300 --> 00:21:56,540
file bills now there is a question of

00:21:52,940 --> 00:21:58,220
like well this is not pure right we've

00:21:56,540 --> 00:22:01,490
broken everything the balloon has

00:21:58,220 --> 00:22:03,770
exploded the sandbox is no more what

00:22:01,490 --> 00:22:07,030
remains of the all good all the good

00:22:03,770 --> 00:22:11,270
properties that we had with that sandbox

00:22:07,030 --> 00:22:15,260
and so like reproducible is it still

00:22:11,270 --> 00:22:16,760
pure magic and all of these nice words

00:22:15,260 --> 00:22:19,280
that we are used to and that we

00:22:16,760 --> 00:22:21,800
absolutely want in our bills and for

00:22:19,280 --> 00:22:26,720
that I have a small answer that's based

00:22:21,800 --> 00:22:28,610
on Nick's experimental what I call

00:22:26,720 --> 00:22:31,280
Nick's experimental is like it's an

00:22:28,610 --> 00:22:36,100
experimental branch from alcohol well

00:22:31,280 --> 00:22:36,100
you can transform a derivation

00:22:36,980 --> 00:22:43,310
into is difficult to say well the

00:22:41,900 --> 00:22:45,710
problem it's most of all the revisions

00:22:43,310 --> 00:22:47,450
that we have plenty of them that look

00:22:45,710 --> 00:22:48,920
the same they contain basically they

00:22:47,450 --> 00:22:51,590
have the same content but because they

00:22:48,920 --> 00:22:53,810
come from a different theory they are

00:22:51,590 --> 00:22:56,210
stored in a different store path and

00:22:53,810 --> 00:22:58,070
then that store path is inside binaries

00:22:56,210 --> 00:23:01,850
inside a lot of places and if you

00:22:58,070 --> 00:23:04,130
compare the bits are different but we

00:23:01,850 --> 00:23:12,290
can do something that's funny so let's

00:23:04,130 --> 00:23:18,080
find a tree so this is the one that we

00:23:12,290 --> 00:23:21,920
built before so it's there if you go to

00:23:18,080 --> 00:23:24,110
nice of course it's a local check out of

00:23:21,920 --> 00:23:26,890
Nicks and another one because I had to

00:23:24,110 --> 00:23:26,890
build a different branch

00:23:36,010 --> 00:23:42,220
let's hope that it works correctly yeah

00:23:40,600 --> 00:23:45,309
you have a lot of outputs in this case

00:23:42,220 --> 00:23:48,610
possibly if I reduce the size that still

00:23:45,309 --> 00:23:51,490
we develop everyone well in this case

00:23:48,610 --> 00:23:56,559
you have a lot of random stuff let's

00:23:51,490 --> 00:23:58,090
just shoot a bit there is image mismatch

00:23:56,559 --> 00:23:59,710
between the demon in the Nixons running

00:23:58,090 --> 00:24:02,380
and well they don't agree on what we are

00:23:59,710 --> 00:24:04,390
trying to do but you see here that this

00:24:02,380 --> 00:24:06,280
is the path that we received and this is

00:24:04,390 --> 00:24:09,280
what it looks like when it's been

00:24:06,280 --> 00:24:11,620
content-addressable so basically all the

00:24:09,280 --> 00:24:14,500
closure has been rewritten and the name

00:24:11,620 --> 00:24:17,910
of the path has been changed so that it

00:24:14,500 --> 00:24:20,350
match the actual content of the path

00:24:17,910 --> 00:24:23,410
that's the meaning of content visible of

00:24:20,350 --> 00:24:25,990
course you there is a problem because

00:24:23,410 --> 00:24:27,520
path they reference themselves and you

00:24:25,990 --> 00:24:29,530
need to compute the ash on something and

00:24:27,520 --> 00:24:31,990
you would never hand so basically you

00:24:29,530 --> 00:24:34,299
just remove self-references computer ash

00:24:31,990 --> 00:24:36,960
and then we insert them and so it's not

00:24:34,299 --> 00:24:40,929
perfect content addressed soils like

00:24:36,960 --> 00:24:45,250
content arrest modulo this self

00:24:40,929 --> 00:24:47,580
reference what's interesting in there is

00:24:45,250 --> 00:24:52,690
that if everything is working correctly

00:24:47,580 --> 00:24:54,580
this I tree C cache thing that I built

00:24:52,690 --> 00:24:58,299
it's still cached okay it has a

00:24:54,580 --> 00:25:04,540
different ash but if I make its content

00:24:58,299 --> 00:25:09,280
the rest of all then you see that you

00:25:04,540 --> 00:25:11,380
get the exact same hash yeah and this

00:25:09,280 --> 00:25:13,150
means and we can check that but it

00:25:11,380 --> 00:25:15,040
doesn't make any sense because it's the

00:25:13,150 --> 00:25:17,290
exact same store location but if you try

00:25:15,040 --> 00:25:21,070
to diff these two things you will see

00:25:17,290 --> 00:25:25,240
that there is no difference you can try

00:25:21,070 --> 00:25:28,200
if you and of course the one that

00:25:25,240 --> 00:25:31,359
remains to be tested is this VCC

00:25:28,200 --> 00:25:31,359
[Music]

00:25:32,970 --> 00:25:44,470
whatever and that one should also give

00:25:37,720 --> 00:25:46,870
us the same output yes that's right in

00:25:44,470 --> 00:25:48,100
this case you may not be you may not

00:25:46,870 --> 00:25:49,089
believe me because it was already in the

00:25:48,100 --> 00:25:50,889
cache before mats

00:25:49,089 --> 00:25:55,599
trust me you don't want to wait five

00:25:50,889 --> 00:25:57,579
minutes just for that to build so that's

00:25:55,599 --> 00:25:59,109
kind of part an answer we have broken

00:25:57,579 --> 00:26:00,999
everything there is no sandbox at all

00:25:59,109 --> 00:26:03,999
and we still managed to get the exact

00:26:00,999 --> 00:26:07,899
same output right so this sandbox is not

00:26:03,999 --> 00:26:09,999
like it's not totally needed is there to

00:26:07,899 --> 00:26:13,899
guard you against making mistakes it

00:26:09,999 --> 00:26:15,729
avoids typical issues it avoids the

00:26:13,899 --> 00:26:17,019
network if something is trying and you

00:26:15,729 --> 00:26:18,789
don't want it to try but if you

00:26:17,019 --> 00:26:20,319
configure everything properly then it

00:26:18,789 --> 00:26:27,189
should build the same outside of the

00:26:20,319 --> 00:26:29,339
sandbox or inside the sandbox if

00:26:27,189 --> 00:26:34,629
different duration your different

00:26:29,339 --> 00:26:36,399
contents before and then this is the

00:26:34,629 --> 00:26:39,639
image that was there if there was some

00:26:36,399 --> 00:26:44,399
issue with with the demo of it I guess

00:26:39,639 --> 00:26:49,209
you get the idea so what we have now

00:26:44,399 --> 00:26:50,889
it's a bit like before but well you know

00:26:49,209 --> 00:26:52,629
you compile Firefox it takes a lot of

00:26:50,889 --> 00:26:55,149
time you see that it's making progress

00:26:52,629 --> 00:26:59,589
you've done most of the rest and then

00:26:55,149 --> 00:27:06,459
C++ is over and you you you will enter

00:26:59,589 --> 00:27:10,929
the fix-up phase but then you are not

00:27:06,459 --> 00:27:13,179
back from scratch right yeah you can

00:27:10,929 --> 00:27:21,069
recover some of the work has already

00:27:13,179 --> 00:27:22,959
been done so that's better so just a few

00:27:21,069 --> 00:27:24,789
message well this presentation is not

00:27:22,959 --> 00:27:26,169
about like sending messages it's more

00:27:24,789 --> 00:27:27,609
like challenging so I would like to get

00:27:26,169 --> 00:27:30,159
feedback if it gives you idea that's

00:27:27,609 --> 00:27:32,169
perfect but like the main message is

00:27:30,159 --> 00:27:33,459
that you can bridge the sandbox and it

00:27:32,169 --> 00:27:36,159
does not mean that you are doing

00:27:33,459 --> 00:27:39,039
something wrong but well that you should

00:27:36,159 --> 00:27:42,129
know what you are doing mostly it's

00:27:39,039 --> 00:27:43,599
really nice when I see that yeah it's

00:27:42,129 --> 00:27:45,699
going to work we really get these

00:27:43,599 --> 00:27:47,859
incremental builds inside mix packages

00:27:45,699 --> 00:27:50,799
and that's something that I really want

00:27:47,859 --> 00:27:53,799
I think it would also be really useful

00:27:50,799 --> 00:27:55,419
to get fast CI answers so if you want to

00:27:53,799 --> 00:27:57,039
make a pull request UNIX packages then

00:27:55,419 --> 00:27:58,950
you could get the answer within like a

00:27:57,039 --> 00:28:03,120
few minutes and not

00:27:58,950 --> 00:28:04,769
few hours and also like doesn't means

00:28:03,120 --> 00:28:06,510
that we can trust other tools like

00:28:04,769 --> 00:28:09,240
Reese's he's doing his best to make it

00:28:06,510 --> 00:28:11,340
like reproducible Hermitage and all of

00:28:09,240 --> 00:28:13,200
these nice properties see cash is doing

00:28:11,340 --> 00:28:14,010
his best but it's very old so it doesn't

00:28:13,200 --> 00:28:16,620
know everything

00:28:14,010 --> 00:28:19,500
and then these tools they are just C

00:28:16,620 --> 00:28:21,929
compiler abstractions but they behave

00:28:19,500 --> 00:28:24,809
exactly the same as we see C behaves

00:28:21,929 --> 00:28:27,330
exactly as basil for example so it's

00:28:24,809 --> 00:28:29,429
just that we see C managed only one C

00:28:27,330 --> 00:28:31,919
compiled but basil manages a set of

00:28:29,429 --> 00:28:33,899
files from the other side meaning from

00:28:31,919 --> 00:28:35,340
the next point of view is exactly the

00:28:33,899 --> 00:28:36,990
same it's a tool that's trying to

00:28:35,340 --> 00:28:40,409
execute something remotely and get the

00:28:36,990 --> 00:28:42,029
results so if we go that way we could

00:28:40,409 --> 00:28:43,919
consider trusting basil for example

00:28:42,029 --> 00:28:47,730
following things purely and correctly

00:28:43,919 --> 00:28:50,720
and allow it to have access to a cache

00:28:47,730 --> 00:28:54,029
and a remote execution engine somewhere

00:28:50,720 --> 00:28:57,080
so that's it for me I have questions for

00:28:54,029 --> 00:28:57,080
you if you don't have anyway

00:28:58,310 --> 00:29:04,980
[Applause]

00:29:10,480 --> 00:29:18,429
what about verifying some compiler cache

00:29:14,049 --> 00:29:21,720
instruments for reproducibility so that

00:29:18,429 --> 00:29:27,539
they can be really trusted and not just

00:29:21,720 --> 00:29:29,980
relying on limited amount of experiments

00:29:27,539 --> 00:29:32,080
well I guess always the same thing with

00:29:29,980 --> 00:29:34,179
reproducibility that you have to test it

00:29:32,080 --> 00:29:35,980
and every time it's reproducible that's

00:29:34,179 --> 00:29:39,549
good but it's not a proof that it will

00:29:35,980 --> 00:29:42,639
never be reproducible so we can do that

00:29:39,549 --> 00:29:44,590
with these tools too we can just start

00:29:42,639 --> 00:29:47,080
to include them and then compile

00:29:44,590 --> 00:29:48,940
compiled a few times and then once in a

00:29:47,080 --> 00:29:50,889
while just make a perfectly aromatic

00:29:48,940 --> 00:29:53,499
sandbox built from scratch and see if we

00:29:50,889 --> 00:29:54,970
are still building the same thing and

00:29:53,499 --> 00:29:58,149
that would give us more confidence that

00:29:54,970 --> 00:30:00,730
the tool is working correctly I mean

00:29:58,149 --> 00:30:04,090
maybe the problem is that when these

00:30:00,730 --> 00:30:05,679
tools had been designed there was no

00:30:04,090 --> 00:30:09,249
thought about such thing as

00:30:05,679 --> 00:30:12,009
reproducibility and it might depend on

00:30:09,249 --> 00:30:16,629
different things like system clock for

00:30:12,009 --> 00:30:17,889
example well truth is I am not aware of

00:30:16,629 --> 00:30:20,799
all this little data

00:30:17,889 --> 00:30:23,350
details of details of all of these tools

00:30:20,799 --> 00:30:25,450
so that's something that we will have to

00:30:23,350 --> 00:30:29,610
explore it's like look it's feasible

00:30:25,450 --> 00:30:29,610
that someone won't work with me on that

00:30:40,230 --> 00:30:49,750
so one idea came to my mind when you

00:30:45,820 --> 00:30:52,270
showed mounting the file inside did you

00:30:49,750 --> 00:30:52,990
try to mount like UNIX socket maybe I

00:30:52,270 --> 00:30:55,630
don't know

00:30:52,990 --> 00:30:58,800
see cache and SC cache very well but

00:30:55,630 --> 00:31:02,310
maybe you can try networking that way

00:30:58,800 --> 00:31:05,470
it's right and then I had no more time

00:31:02,310 --> 00:31:08,530
so I think that certainly it could work

00:31:05,470 --> 00:31:11,470
but I don't know enough about technology

00:31:08,530 --> 00:31:12,580
details from the outside looks trivial

00:31:11,470 --> 00:31:15,520
and then when you try to set up

00:31:12,580 --> 00:31:19,270
everything with like namespace and stuff

00:31:15,520 --> 00:31:21,190
well it breaks easily so that's

00:31:19,270 --> 00:31:23,050
something we can try tomorrow if you

00:31:21,190 --> 00:31:27,510
think that it can be done in a few hours

00:31:23,050 --> 00:31:27,510
and I would really like to try Cheers

00:31:36,480 --> 00:31:41,620
hey first I wanted to say I really

00:31:39,490 --> 00:31:42,880
appreciate because I've been many times

00:31:41,620 --> 00:31:44,770
in the situation where I wanted to

00:31:42,880 --> 00:31:46,720
package something large like SEF for

00:31:44,770 --> 00:31:49,149
example while also iterating on bugs

00:31:46,720 --> 00:31:51,279
building surf takes one hour I had to

00:31:49,149 --> 00:31:54,130
build it over 80 times so you can

00:31:51,279 --> 00:31:55,779
imagine that took a while so I really

00:31:54,130 --> 00:31:58,059
appreciate any effort and going in that

00:31:55,779 --> 00:32:00,340
direction same thing with Hasker which

00:31:58,059 --> 00:32:02,110
when you work on ghz for example or

00:32:00,340 --> 00:32:04,270
iterate on a low-level library and

00:32:02,110 --> 00:32:06,429
rebuild next packages can also take a

00:32:04,270 --> 00:32:10,049
very long time so I think this is really

00:32:06,429 --> 00:32:12,399
good I wanted to also point out another

00:32:10,049 --> 00:32:14,200
approach that is like a little bit

00:32:12,399 --> 00:32:15,970
orthogonal to what you've presented that

00:32:14,200 --> 00:32:19,630
we just discussed yesterday here at the

00:32:15,970 --> 00:32:23,559
table with like I think EDF PI and me so

00:32:19,630 --> 00:32:26,590
NH 2 which was that you can also do the

00:32:23,559 --> 00:32:28,870
type of caching that see cache for

00:32:26,590 --> 00:32:32,770
example does specifically for like see

00:32:28,870 --> 00:32:35,260
things right on the Cisco level so we

00:32:32,770 --> 00:32:38,169
could if we wanted to P trace the entire

00:32:35,260 --> 00:32:40,720
build and then see that if let's say an

00:32:38,169 --> 00:32:45,520
ex actly e produces certain output we

00:32:40,720 --> 00:32:47,110
can cache that and then wrap any exactly

00:32:45,520 --> 00:32:50,080
call that happens again to produce

00:32:47,110 --> 00:32:52,539
exactly the same output again so that is

00:32:50,080 --> 00:32:54,159
of course somewhat in the further future

00:32:52,539 --> 00:32:56,830
but that might be something that can be

00:32:54,159 --> 00:32:59,289
very generic across multiple things I

00:32:56,830 --> 00:33:01,480
think practically I will first go with

00:32:59,289 --> 00:33:03,070
exactly this approach because you have

00:33:01,480 --> 00:33:05,919
now shown that it works and it's great

00:33:03,070 --> 00:33:08,169
and I just need to see how one can how

00:33:05,919 --> 00:33:10,600
one can get the same thing for GHz

00:33:08,169 --> 00:33:13,210
Haskell for example but in the long term

00:33:10,600 --> 00:33:15,760
that might be something that if we agree

00:33:13,210 --> 00:33:17,320
on enough bringing enough happiness into

00:33:15,760 --> 00:33:21,940
this thing as a kind of like quick

00:33:17,320 --> 00:33:23,200
developer thing we might do as well well

00:33:21,940 --> 00:33:28,149
it's not really a question that I've

00:33:23,200 --> 00:33:29,799
still two answers for you well it's

00:33:28,149 --> 00:33:32,660
funny because I had the exact same

00:33:29,799 --> 00:33:34,730
discussion with MVP like last year and

00:33:32,660 --> 00:33:36,350
the year before like well we could do

00:33:34,730 --> 00:33:39,680
that on the Sisqo level that would be

00:33:36,350 --> 00:33:41,930
fun through this it's not that easy you

00:33:39,680 --> 00:33:42,980
have lots of cache entries and etcetera

00:33:41,930 --> 00:33:45,920
so you need to be really really

00:33:42,980 --> 00:33:47,390
efficient so it's like it's a cool idea

00:33:45,920 --> 00:33:49,850
but I'm not sure it will turn as

00:33:47,390 --> 00:33:52,840
practice but I'm always available to

00:33:49,850 --> 00:33:52,840
talk about the ideal

00:33:58,970 --> 00:34:06,969
thank you

00:34:01,130 --> 00:34:06,969

YouTube URL: https://www.youtube.com/watch?v=iWAowLWNra8


