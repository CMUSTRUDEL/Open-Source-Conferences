Title: Utilizing a NixOps Plugin Architecture (NixCon 2019)
Publication date: 2019-12-14
Playlist: NixCon 2019 (Brno)
Description: 
	NixOps, a tool for deploying NixOS machines in a network or cloud, has historically been developed through a single repository. This presentation will review the incentive for moving to an alternative NixOps plugin based architecture where feature sets for specific cloud or network providers are moved to their own repositories. The work in progress toward such an architecture will be discussed and examples of build and deploy demonstrated.
Captions: 
	00:00:17,740 --> 00:00:23,120
everyone my name is John litovsky and

00:00:20,480 --> 00:00:25,010
this is my boss actually from my ohk

00:00:23,120 --> 00:00:26,390
Samuel leathers and we're gonna talk

00:00:25,010 --> 00:00:28,400
today about a Knicks ops plug-in

00:00:26,390 --> 00:00:30,470
architecture and Sam is just gonna give

00:00:28,400 --> 00:00:33,020
an introduction to what we're about to

00:00:30,470 --> 00:00:34,640
talk about today so I want to tell you

00:00:33,020 --> 00:00:38,870
guys a little bit of a story here this

00:00:34,640 --> 00:00:42,160
story goes all the way back to 2016 of

00:00:38,870 --> 00:00:45,650
December when someone opened this issue

00:00:42,160 --> 00:00:48,320
to support voltar and Nick's UPS and

00:00:45,650 --> 00:00:54,760
this is still not addressed yet at this

00:00:48,320 --> 00:00:57,590
point so fast forward to May of 2017 and

00:00:54,760 --> 00:00:58,250
I actually implemented it I got it

00:00:57,590 --> 00:01:00,260
working

00:00:58,250 --> 00:01:02,570
everything works I still use it today I

00:01:00,260 --> 00:01:05,270
wasn't implemented the best it doesn't

00:01:02,570 --> 00:01:07,369
have tests the documentation was pretty

00:01:05,270 --> 00:01:09,350
shoddy but it works and once it worked I

00:01:07,369 --> 00:01:10,970
was like okay it works for me good

00:01:09,350 --> 00:01:13,340
enough I'm not gonna push to try to get

00:01:10,970 --> 00:01:15,200
it in but I've been rebasing this on

00:01:13,340 --> 00:01:19,220
master and dealing with merge conflicts

00:01:15,200 --> 00:01:20,960
for a few years now keeping my system up

00:01:19,220 --> 00:01:23,900
and I think one other person might be

00:01:20,960 --> 00:01:26,270
using this fork of mix-ups that I have

00:01:23,900 --> 00:01:29,780
as well that has commented on it an IRC

00:01:26,270 --> 00:01:32,540
before so it's not heavily utilized but

00:01:29,780 --> 00:01:36,799
it's really a pain managing this fast

00:01:32,540 --> 00:01:40,010
forward to last year my ohk decided we

00:01:36,799 --> 00:01:43,430
wanted to add packet net support to Nix

00:01:40,010 --> 00:01:45,200
ops which was great except for we did

00:01:43,430 --> 00:01:47,210
the same thing we forked Nick's ops we

00:01:45,200 --> 00:01:49,490
started working on it we never quite got

00:01:47,210 --> 00:01:51,409
it to stable where we wanted and we've

00:01:49,490 --> 00:01:54,020
been dealing with lots of merge

00:01:51,409 --> 00:01:57,729
conflicts since we wrote that little

00:01:54,020 --> 00:02:02,060
piece of code and it was painful and

00:01:57,729 --> 00:02:04,970
then Graham Christensen approached me

00:02:02,060 --> 00:02:07,100
and was basically like hey I got this PR

00:02:04,970 --> 00:02:08,479
I opened on Nick's ops plug-in

00:02:07,100 --> 00:02:10,820
architecture is this something you're

00:02:08,479 --> 00:02:13,549
interested in I'm like I think I ohk can

00:02:10,820 --> 00:02:15,680
definitely help out with this so I did

00:02:13,549 --> 00:02:18,079
what every good manager does and I hired

00:02:15,680 --> 00:02:19,910
someone and told that person your first

00:02:18,079 --> 00:02:25,420
task is to figure out how to do this so

00:02:19,910 --> 00:02:25,420
here he is thank you

00:02:27,210 --> 00:02:32,830
okay so we'll just go through some of

00:02:29,710 --> 00:02:34,570
the basics here to start with so for

00:02:32,830 --> 00:02:36,490
those of you who don't know Knicks ops

00:02:34,570 --> 00:02:38,290
is a tool for deploying sets of NIC

00:02:36,490 --> 00:02:40,660
sauce Linux machines either - real

00:02:38,290 --> 00:02:42,670
hardware or virtual machines and it

00:02:40,660 --> 00:02:44,800
extends NIC sauces declarative approach

00:02:42,670 --> 00:02:47,560
to system configuration management -

00:02:44,800 --> 00:02:49,570
networks and adds provisioning and Sam

00:02:47,560 --> 00:02:54,430
just mentioned we're using it quite

00:02:49,570 --> 00:02:56,470
extensively at i/o HK so from straight

00:02:54,430 --> 00:02:58,720
out of the Nix ops user guide if we just

00:02:56,470 --> 00:03:00,670
take a look at that we can see that Nix

00:02:58,720 --> 00:03:03,070
ops does support a number of

00:03:00,670 --> 00:03:05,350
infrastructure provider resources and

00:03:03,070 --> 00:03:07,570
other resource types throughout the

00:03:05,350 --> 00:03:11,320
lifetime of Nix ops and some of them are

00:03:07,570 --> 00:03:14,280
like cloud providers AWS GCE Azure has

00:03:11,320 --> 00:03:17,740
nerve virtualized infrastructure such as

00:03:14,280 --> 00:03:20,709
VirtualBox Live Verde qemu and metrics

00:03:17,740 --> 00:03:22,480
resources such as data dog and providing

00:03:20,709 --> 00:03:24,580
functionality and support for each of

00:03:22,480 --> 00:03:27,430
the numerous resource types above has

00:03:24,580 --> 00:03:31,840
led to a fairly large monolithic github

00:03:27,430 --> 00:03:34,000
repository so if we look historically at

00:03:31,840 --> 00:03:34,870
some of the stats we see that in about

00:03:34,000 --> 00:03:37,450
00:03:34,870 --> 00:03:39,190
it looks like the lines added and the

00:03:37,450 --> 00:03:42,820
commit count started trending down a

00:03:39,190 --> 00:03:45,040
little bit and similarly we can see that

00:03:42,820 --> 00:03:45,510
with the lines diff and lines deleted as

00:03:45,040 --> 00:03:48,970
well

00:03:45,510 --> 00:03:53,170
and some of the thoughts in the

00:03:48,970 --> 00:03:56,019
community as of roughly mid 2018

00:03:53,170 --> 00:03:58,330
could be summarized as a majority of

00:03:56,019 --> 00:04:00,700
those have the time around mid 2018

00:03:58,330 --> 00:04:04,420
where for PRS are of the PRS were for

00:04:00,700 --> 00:04:06,489
providers and PRS - Nix ops were very

00:04:04,420 --> 00:04:08,830
slow to merge because well it's super

00:04:06,489 --> 00:04:10,570
important that they work are stable and

00:04:08,830 --> 00:04:12,670
don't break anything else because users

00:04:10,570 --> 00:04:14,530
depend on it and for a lot of the

00:04:12,670 --> 00:04:16,299
providers people don't really know how

00:04:14,530 --> 00:04:18,489
they work or interact with other stuff

00:04:16,299 --> 00:04:19,930
and it's hard to know how to add a new

00:04:18,489 --> 00:04:23,500
provider because everything is so

00:04:19,930 --> 00:04:25,000
tangled together so it's really hard to

00:04:23,500 --> 00:04:27,160
add a new provider because it has to be

00:04:25,000 --> 00:04:29,389
in core and Sam's earlier introduction

00:04:27,160 --> 00:04:32,569
kind of speaks to that

00:04:29,389 --> 00:04:35,629
so as a demo we'll just look at what a

00:04:32,569 --> 00:04:37,430
very simple deployment is going to the

00:04:35,629 --> 00:04:45,169
monolithic version of Nick's ops from

00:04:37,430 --> 00:04:49,490
the past and this is pre-recorded so we

00:04:45,169 --> 00:04:51,469
don't have any unforeseen delays but

00:04:49,490 --> 00:04:55,129
basically we'll install this imperative

00:04:51,469 --> 00:04:59,810
Li and we'll install Nick's ops 1.7 just

00:04:55,129 --> 00:05:02,330
with Nick's F I can make it larger

00:04:59,810 --> 00:05:08,029
it probably rap a lot of lines is that

00:05:02,330 --> 00:05:10,849
better so we can look at the deployment

00:05:08,029 --> 00:05:12,860
file and you can split up your

00:05:10,849 --> 00:05:14,900
deployment files into a logical file and

00:05:12,860 --> 00:05:17,750
a physical file here because this is

00:05:14,900 --> 00:05:19,610
very simple it's just both the logical

00:05:17,750 --> 00:05:21,279
aspect which is the software we're

00:05:19,610 --> 00:05:23,990
deploying is just nginx within

00:05:21,279 --> 00:05:25,849
index.html that's custom and then the

00:05:23,990 --> 00:05:28,870
physical deployment type of VirtualBox

00:05:25,849 --> 00:05:28,870
it's just in one file

00:05:34,540 --> 00:05:39,940
and then we create a deployment with

00:05:36,400 --> 00:05:42,820
that and the VirtualBox plug-in doesn't

00:05:39,940 --> 00:05:46,390
yet have an image in 1909 so we're gonna

00:05:42,820 --> 00:05:49,450
fix the channel to 1903 we create the

00:05:46,390 --> 00:05:52,180
deployment give it a name and we check

00:05:49,450 --> 00:05:53,860
for deployments again and we see that a

00:05:52,180 --> 00:05:57,210
deployment is there it doesn't yet have

00:05:53,860 --> 00:05:59,470
a description and the machines show 0

00:05:57,210 --> 00:06:04,990
but now that it's there we can deploy

00:05:59,470 --> 00:06:07,240
the deployment and Nix ops will build

00:06:04,990 --> 00:06:13,900
the Machine locally then it will copy

00:06:07,240 --> 00:06:18,160
the path and it brings a virtual machine

00:06:13,900 --> 00:06:21,180
up attaches the disk waits for

00:06:18,160 --> 00:06:21,180
networking to come online

00:06:33,410 --> 00:06:36,940
and this doesn't take too long

00:06:43,279 --> 00:06:47,659
so it gets a network IP and starts

00:06:46,009 --> 00:06:50,809
copying the closure over to the machine

00:06:47,659 --> 00:06:53,149
and this will take probably 20 or 30

00:06:50,809 --> 00:06:55,429
seconds so what we're waiting kid I see

00:06:53,149 --> 00:06:57,529
a show of hands for those who have not

00:06:55,429 --> 00:07:02,289
used NICs ops or are not familiar with

00:06:57,529 --> 00:07:02,289
NICs ops okay so good number of people

00:07:13,310 --> 00:07:16,810
and it's just about done

00:07:28,940 --> 00:07:34,040
so it's copying the rest of the closure

00:07:30,740 --> 00:07:36,760
over in a moment it will restart

00:07:34,040 --> 00:07:44,330
services on the target virtual machine

00:07:36,760 --> 00:07:47,570
that is running on localhost and now the

00:07:44,330 --> 00:07:50,510
deployment is finished and we can get

00:07:47,570 --> 00:07:52,460
information about the deployment and now

00:07:50,510 --> 00:07:54,950
we see that there is one machine it has

00:07:52,460 --> 00:07:59,090
an IP there's also a network description

00:07:54,950 --> 00:08:01,160
NYX ops 1.7 monolithic demo and to

00:07:59,090 --> 00:08:04,460
verify that the machine is up we can

00:08:01,160 --> 00:08:09,070
curl nginx at the IP and see the hello

00:08:04,460 --> 00:08:11,840
next con 2019 so that's kind of how the

00:08:09,070 --> 00:08:14,650
monolithic version of Nick's ops was

00:08:11,840 --> 00:08:14,650
functioning

00:08:18,210 --> 00:08:24,250
so given that we saw the commits going

00:08:22,240 --> 00:08:27,610
down and the feeling was you know there

00:08:24,250 --> 00:08:30,330
was kind of some blockage and being able

00:08:27,610 --> 00:08:32,530
to make commits to Knicks ops a

00:08:30,330 --> 00:08:34,270
migration to plug-in architecture was

00:08:32,530 --> 00:08:35,800
considered and it was considered that it

00:08:34,270 --> 00:08:37,599
may solve these issues of course it

00:08:35,800 --> 00:08:39,910
might add some additional complexities

00:08:37,599 --> 00:08:41,380
that would need to be addressed but it

00:08:39,910 --> 00:08:43,750
also had potential to open up

00:08:41,380 --> 00:08:45,730
functionality further in Knicks ops such

00:08:43,750 --> 00:08:49,600
as adding other language support of

00:08:45,730 --> 00:08:53,860
Ian's plug-in RPC and Graham did the

00:08:49,600 --> 00:08:57,670
initial proof of concept branch back in

00:08:53,860 --> 00:09:00,130
mid 2018 and he demonstrated basically a

00:08:57,670 --> 00:09:02,230
Knicks ops core repo with just about

00:09:00,130 --> 00:09:04,150
everything stripped out of it as far as

00:09:02,230 --> 00:09:07,180
the functionality for providers go and

00:09:04,150 --> 00:09:11,140
then a separate standalone AWS plug-in

00:09:07,180 --> 00:09:12,970
repo and Graham's initial proof of

00:09:11,140 --> 00:09:15,310
concept utilized pluggy which is a

00:09:12,970 --> 00:09:18,400
popular flexible extensible Python

00:09:15,310 --> 00:09:22,630
plug-in system to bring Knicks ops core

00:09:18,400 --> 00:09:25,240
and the plug-in repos together pluggy

00:09:22,630 --> 00:09:26,590
was kind of the perfect thing and as it

00:09:25,240 --> 00:09:28,120
says right here which is straight out of

00:09:26,590 --> 00:09:29,920
the plug you read the docs it gives

00:09:28,120 --> 00:09:32,200
users the ability to extend or modify

00:09:29,920 --> 00:09:33,580
the behavior of a host program by

00:09:32,200 --> 00:09:37,030
installing a plug-in for that program

00:09:33,580 --> 00:09:38,920
the plug-in will run as a part of a

00:09:37,030 --> 00:09:41,110
normal program execution changing or

00:09:38,920 --> 00:09:42,640
enhancing certain aspects of it so this

00:09:41,110 --> 00:09:44,470
kind of seemed like the perfect fit and

00:09:42,640 --> 00:09:48,820
we just continued forward with using

00:09:44,470 --> 00:09:51,310
pluggy just from a very high level some

00:09:48,820 --> 00:09:54,400
of the common elements in each plugin

00:09:51,310 --> 00:09:57,550
repo that would be created as it split

00:09:54,400 --> 00:10:00,490
out from Nick's ops core there is in its

00:09:57,550 --> 00:10:03,010
own plug-in repo files set up PI and

00:10:00,490 --> 00:10:05,170
that describes the initial plug-in entry

00:10:03,010 --> 00:10:08,170
points and the packages are defined

00:10:05,170 --> 00:10:10,450
there there's also a NYX ops plug-in

00:10:08,170 --> 00:10:13,600
directory so it'd be like Nick's ops V

00:10:10,450 --> 00:10:17,710
box or Nick's ops AWS with a plug if I

00:10:13,600 --> 00:10:19,840
file and that defines the API hooks of

00:10:17,710 --> 00:10:22,390
pluggy essentially and as of right now

00:10:19,840 --> 00:10:25,150
we're utilizing just three hooks and

00:10:22,390 --> 00:10:27,430
that's a load hook which will return a

00:10:25,150 --> 00:10:29,170
list of the plug-in Python modules from

00:10:27,430 --> 00:10:31,089
the plug-in to get loaded into Nick's

00:10:29,170 --> 00:10:33,250
ops core

00:10:31,089 --> 00:10:35,350
NIC's expressions hook which will tell

00:10:33,250 --> 00:10:37,899
core what Nick's expressions need to be

00:10:35,350 --> 00:10:42,029
loaded into be functional and a parser

00:10:37,899 --> 00:10:45,040
which is used to pass the arc parse

00:10:42,029 --> 00:10:47,709
functionality of Python over to the

00:10:45,040 --> 00:10:52,449
plugins so that the command line can be

00:10:47,709 --> 00:10:54,009
extended out into the plugins and this

00:10:52,449 --> 00:10:55,660
might be a little hard to see but we'll

00:10:54,009 --> 00:10:58,389
we'll look at it again it's just

00:10:55,660 --> 00:11:01,509
included as an example and this is the

00:10:58,389 --> 00:11:04,300
plugin dot PI file for the NICS ops

00:11:01,509 --> 00:11:05,980
packet plug-in repo and it just shows we

00:11:04,300 --> 00:11:09,279
have our three hooks in this one file

00:11:05,980 --> 00:11:11,560
the NICS expressions hook the the

00:11:09,279 --> 00:11:13,720
plugins hook which shows there's we want

00:11:11,560 --> 00:11:15,940
to load four modules in and then a

00:11:13,720 --> 00:11:20,019
parser hook implementation so we can

00:11:15,940 --> 00:11:24,970
extend the Nix ops packet out with CLI

00:11:20,019 --> 00:11:27,490
hook so the initial approach taken for

00:11:24,970 --> 00:11:30,490
packaging and updating plugins with Nix

00:11:27,490 --> 00:11:32,380
ops core was to be similar to what we

00:11:30,490 --> 00:11:35,620
see with the terraform providers

00:11:32,380 --> 00:11:38,980
approach in Nix packages and terraform

00:11:35,620 --> 00:11:41,079
providers utilizes three files dated nix

00:11:38,980 --> 00:11:44,079
providers nixon and update all scripts

00:11:41,079 --> 00:11:47,199
and essentially the data nix is just

00:11:44,079 --> 00:11:51,760
it's a attribute set that's forms

00:11:47,199 --> 00:11:54,579
fetched from github attributes and the

00:11:51,760 --> 00:11:57,279
providers contains a list of repos and

00:11:54,579 --> 00:11:59,769
the the github user for those repos and

00:11:57,279 --> 00:12:01,420
the update all scripts just gets run and

00:11:59,769 --> 00:12:04,990
it can update then that attributes that

00:12:01,420 --> 00:12:09,730
that's in dated nix so for the main PR

00:12:04,990 --> 00:12:11,860
that converted the nix ops core repo

00:12:09,730 --> 00:12:17,949
from monolithic to plugin that was PR

00:12:11,860 --> 00:12:20,560
1179 and a follow-on PR 1198 implemented

00:12:17,949 --> 00:12:22,750
this approach and it's almost identical

00:12:20,560 --> 00:12:25,060
it's just a little bit different with

00:12:22,750 --> 00:12:26,500
the file names and that the bash script

00:12:25,060 --> 00:12:30,459
got cleaned up a little bit to be a

00:12:26,500 --> 00:12:33,009
little bit more flexible so this will be

00:12:30,459 --> 00:12:34,899
a demo of the new approach and will show

00:12:33,009 --> 00:12:36,910
how to basically do a deployment with

00:12:34,899 --> 00:12:39,730
VirtualBox like we just did except with

00:12:36,910 --> 00:12:41,709
the plugins and we'll give an example of

00:12:39,730 --> 00:12:43,360
how we use that update all scripts and

00:12:41,709 --> 00:12:46,589
do a local built to

00:12:43,360 --> 00:12:46,589
NIC's ops with those plugins

00:12:53,560 --> 00:12:59,750
so first we'll uninstall the next ops we

00:12:56,480 --> 00:13:02,030
installed before imperative Lee and this

00:12:59,750 --> 00:13:04,070
plug-in version of Nix ops is not yet

00:13:02,030 --> 00:13:07,550
incorporated into the unstable channel

00:13:04,070 --> 00:13:10,070
so we'll have to pull it from Hydra as a

00:13:07,550 --> 00:13:12,290
master tar ball or we can just get clone

00:13:10,070 --> 00:13:19,160
the repository right now so holding the

00:13:12,290 --> 00:13:21,500
ladder just get clone CD into the

00:13:19,160 --> 00:13:24,050
directory will fetch the PR which really

00:13:21,500 --> 00:13:25,670
all this extra PR does that is currently

00:13:24,050 --> 00:13:27,470
unmerged is just add some extra

00:13:25,670 --> 00:13:28,790
documentation and it cleans up the

00:13:27,470 --> 00:13:32,320
script so we don't have to have a github

00:13:28,790 --> 00:13:32,320
API token here right now

00:13:35,440 --> 00:13:41,180
so now from the source that exists in

00:13:39,170 --> 00:13:42,770
this github repo we can immediately

00:13:41,180 --> 00:13:45,230
build the Nix ops plugins that are

00:13:42,770 --> 00:13:48,050
already in the data nix file and these

00:13:45,230 --> 00:13:49,970
are the AWS and Hetson or plugins and we

00:13:48,050 --> 00:13:54,230
can see their fetch from github

00:13:49,970 --> 00:13:55,580
attributes right here so to build with

00:13:54,230 --> 00:13:57,980
one or both of these plugins we could

00:13:55,580 --> 00:13:59,390
just look at the readme and there's a

00:13:57,980 --> 00:14:02,270
few different ways we can build it and

00:13:59,390 --> 00:14:04,250
roughly the middle of the screen we can

00:14:02,270 --> 00:14:06,410
do a fairly typical Nix build and

00:14:04,250 --> 00:14:08,900
there's an extra argument that takes a

00:14:06,410 --> 00:14:11,810
parameter P and we can specify what the

00:14:08,900 --> 00:14:13,640
plug-in is alternatively we can do a dev

00:14:11,810 --> 00:14:15,380
shell build which essentially builds the

00:14:13,640 --> 00:14:17,450
software and drops us into a NIC shell

00:14:15,380 --> 00:14:19,310
and we can just specify on the command

00:14:17,450 --> 00:14:21,530
line what we want and if we want to

00:14:19,310 --> 00:14:24,110
iterate quickly then by having another

00:14:21,530 --> 00:14:25,730
local plug-in package and exit the shell

00:14:24,110 --> 00:14:29,990
and re-enter with a new build we can do

00:14:25,730 --> 00:14:31,660
that pretty quickly that way so we'll

00:14:29,990 --> 00:14:35,690
we'll just do a build with the AWS

00:14:31,660 --> 00:14:38,510
plug-in and a dev shell and there's the

00:14:35,690 --> 00:14:41,060
command at the bottom and typically

00:14:38,510 --> 00:14:43,640
there's quite a bit more output maybe

00:14:41,060 --> 00:14:46,070
five pages and it takes 10 10 or 10

00:14:43,640 --> 00:14:47,960
seconds or so I've I've pre-built this

00:14:46,070 --> 00:14:51,200
previously so we don't have a whole lot

00:14:47,960 --> 00:14:53,720
of output here but now Nick's ops shows

00:14:51,200 --> 00:14:56,630
a new command at the bottom there's a

00:14:53,720 --> 00:14:59,430
list plugins command which is not in the

00:14:56,630 --> 00:15:01,620
monolithic Nick's office version

00:14:59,430 --> 00:15:04,650
and if we list plugins we can see that

00:15:01,620 --> 00:15:06,930
the AWS plugin is installed or we can

00:15:04,650 --> 00:15:08,580
look at a more verbose option which

00:15:06,930 --> 00:15:13,170
shows where that plug-in is stored in

00:15:08,580 --> 00:15:16,230
the next door so we could now deploy in

00:15:13,170 --> 00:15:19,020
AWS instance but what about the VBox

00:15:16,230 --> 00:15:20,550
plug-in that we installed before so if

00:15:19,020 --> 00:15:23,750
we'd like to do that how do we do that

00:15:20,550 --> 00:15:25,980
because it's not in the data next file

00:15:23,750 --> 00:15:28,620
so we could certainly populate it

00:15:25,980 --> 00:15:31,290
manually but more preferably we'd like

00:15:28,620 --> 00:15:33,660
to use the what's already here which is

00:15:31,290 --> 00:15:38,160
the all plugins txt file and the update

00:15:33,660 --> 00:15:40,350
all scripts so if we look at the update

00:15:38,160 --> 00:15:42,720
or the all plugins we see that there's

00:15:40,350 --> 00:15:44,850
just two entries which is for the AWS

00:15:42,720 --> 00:15:46,980
and the head sner and we already have

00:15:44,850 --> 00:15:49,440
those plugins so we can add the

00:15:46,980 --> 00:15:52,140
VirtualBox plug-in to this to the all

00:15:49,440 --> 00:15:57,750
plugins txt file just using the github

00:15:52,140 --> 00:16:00,060
user and and repo format so we'll add

00:15:57,750 --> 00:16:03,720
that line to that file it's there now

00:16:00,060 --> 00:16:06,210
and then we'll run the update all script

00:16:03,720 --> 00:16:07,650
and what it does is it reaches out to

00:16:06,210 --> 00:16:09,960
each of the repos and looks for the

00:16:07,650 --> 00:16:12,060
latest release tag and then generates

00:16:09,960 --> 00:16:13,590
the fetch from github attributes for

00:16:12,060 --> 00:16:15,680
that and sticks it in the date a new

00:16:13,590 --> 00:16:18,210
data X file

00:16:15,680 --> 00:16:19,920
so that's complete and if we take a look

00:16:18,210 --> 00:16:22,290
at the data die on X file it's now

00:16:19,920 --> 00:16:24,990
updated at the bottom with the V box

00:16:22,290 --> 00:16:27,330
fetched from github attribute so similar

00:16:24,990 --> 00:16:31,350
to before we can now build this with

00:16:27,330 --> 00:16:34,170
both the AWS and V Box plugins will exit

00:16:31,350 --> 00:16:36,720
the dev shell and then reissue the

00:16:34,170 --> 00:16:41,010
similar command this time just with the

00:16:36,720 --> 00:16:45,080
extra V Box plug-in and if we list

00:16:41,010 --> 00:16:45,080
plugins we now see we have V box support

00:16:45,140 --> 00:16:50,540
so now we can do a quick deploy it's the

00:16:47,820 --> 00:16:50,540
same steps as before

00:17:00,270 --> 00:17:06,350
so we just create the deployment and I

00:17:02,550 --> 00:17:06,350
believe this won't take as long

00:17:26,120 --> 00:17:29,779
and since it's pretty much exactly the

00:17:28,429 --> 00:17:31,250
same as what we saw the first time we

00:17:29,779 --> 00:17:34,190
probably don't need to sit through and

00:17:31,250 --> 00:17:35,809
wait and see the end here but it's going

00:17:34,190 --> 00:17:37,580
to deploy exactly the same way the only

00:17:35,809 --> 00:17:40,700
real difference is that this proposed

00:17:37,580 --> 00:17:47,440
Ettore is now built using plugins rather

00:17:40,700 --> 00:17:47,440
than the monolithic repo so I will just

00:17:50,360 --> 00:17:53,860
well let's see it's almost done

00:18:10,340 --> 00:18:13,850
so now that it's deployed similar to

00:18:12,200 --> 00:18:15,260
before we'll get information about the

00:18:13,850 --> 00:18:17,780
repo we see it's at a different IP

00:18:15,260 --> 00:18:19,940
address and we'll just curl it make sure

00:18:17,780 --> 00:18:22,490
it's operational and now we see yes it

00:18:19,940 --> 00:18:30,500
says hello next con 2019 from a plug-in

00:18:22,490 --> 00:18:32,690
deploy so some drawbacks to this update

00:18:30,500 --> 00:18:35,060
all method well it's a mix of manual

00:18:32,690 --> 00:18:38,570
intervention with Bosch and Nix so it's

00:18:35,060 --> 00:18:40,610
not really that ideal also it just pulls

00:18:38,570 --> 00:18:43,010
from the latest tag commit in those

00:18:40,610 --> 00:18:45,350
repos to build that dated NICs file so

00:18:43,010 --> 00:18:46,820
if you want to do something like Bill

00:18:45,350 --> 00:18:49,310
from a specific branch or a specific

00:18:46,820 --> 00:18:51,380
commit you know it's not that flexible

00:18:49,310 --> 00:18:53,420
so there's another approach that we've

00:18:51,380 --> 00:18:55,370
taken that we're using at i/o HK and

00:18:53,420 --> 00:18:58,280
that's to use a dependency manager and

00:18:55,370 --> 00:19:03,020
just one example is NIF using NIV to pin

00:18:58,280 --> 00:19:04,370
different sources so this may also be a

00:19:03,020 --> 00:19:07,640
little bit difficult to see at the back

00:19:04,370 --> 00:19:11,240
I can expand it in a few minutes in the

00:19:07,640 --> 00:19:15,920
command console but essentially we have

00:19:11,240 --> 00:19:18,470
a default nix file which we can specify

00:19:15,920 --> 00:19:20,480
an overlay for Nix packages and we're

00:19:18,470 --> 00:19:23,750
gonna make Nick's ops one of the overlay

00:19:20,480 --> 00:19:25,730
packages in there and we specify the

00:19:23,750 --> 00:19:27,410
peak current V parameter just like we

00:19:25,730 --> 00:19:30,020
did on the command line

00:19:27,410 --> 00:19:32,390
but here we can specify plug-in sources

00:19:30,020 --> 00:19:34,580
such as Nick's op packet and we can

00:19:32,390 --> 00:19:37,580
declare this to be any commit or any

00:19:34,580 --> 00:19:39,500
branch in that repo we can also have a

00:19:37,580 --> 00:19:41,750
local github repo that's not checked in

00:19:39,500 --> 00:19:44,330
anywhere it's just local and hack on

00:19:41,750 --> 00:19:46,700
that and specify that to be built from a

00:19:44,330 --> 00:19:48,170
local source and additionally anything

00:19:46,700 --> 00:19:49,670
that is in dated Nix

00:19:48,170 --> 00:19:51,320
originally that we could just build from

00:19:49,670 --> 00:19:54,170
the command line like that we can still

00:19:51,320 --> 00:19:58,280
put it in as the peep parameter down

00:19:54,170 --> 00:20:00,580
here in the list so this is a little

00:19:58,280 --> 00:20:03,410
more flexible of an approach

00:20:00,580 --> 00:20:06,260
additionally what this next demo will

00:20:03,410 --> 00:20:08,810
show taking that approach and using NIF

00:20:06,260 --> 00:20:11,060
but will also show how you can extend

00:20:08,810 --> 00:20:15,770
the command line for instance using

00:20:11,060 --> 00:20:17,390
packets SOS console which is serial over

00:20:15,770 --> 00:20:19,730
SSH so you have out-of-band management

00:20:17,390 --> 00:20:21,140
for your servers if your network goes

00:20:19,730 --> 00:20:23,530
down or you need that for some other

00:20:21,140 --> 00:20:23,530
reason

00:20:26,950 --> 00:20:30,540
I'll try to make this little bigger

00:20:31,900 --> 00:20:34,530
oops

00:20:37,690 --> 00:20:41,259
and one of the other things we're doing

00:20:39,309 --> 00:20:44,649
in this demo here is we're using Durham

00:20:41,259 --> 00:20:47,039
so when we enter into the deployment

00:20:44,649 --> 00:20:49,480
directory we can automatically have

00:20:47,039 --> 00:20:51,460
Knicks ops built through a next shell

00:20:49,480 --> 00:20:53,470
because Knicks ops is one of the

00:20:51,460 --> 00:21:01,059
dependencies of that Knicks shell as

00:20:53,470 --> 00:21:03,309
well as NIV itself and in this directory

00:21:01,059 --> 00:21:09,159
we have default Knicks we have an

00:21:03,309 --> 00:21:11,470
external in a second we have a packet

00:21:09,159 --> 00:21:13,539
plug in Knicks which is the deployment

00:21:11,470 --> 00:21:15,909
file that specifies the server to build

00:21:13,539 --> 00:21:18,370
a shell Knicks that pulls in the NIV

00:21:15,909 --> 00:21:21,159
dependency and the Knicks ops dependency

00:21:18,370 --> 00:21:23,529
and then also the local Knicks ops V box

00:21:21,159 --> 00:21:28,299
in case we wanted to pull that in as

00:21:23,529 --> 00:21:31,299
well in the next directory we have the

00:21:28,299 --> 00:21:34,090
NIV pins sources JSON and sources Knicks

00:21:31,299 --> 00:21:39,309
a default Knicks and there's a unrelated

00:21:34,090 --> 00:21:41,379
file in here packages Knicks so for the

00:21:39,309 --> 00:21:43,419
packet deployment this is really only a

00:21:41,379 --> 00:21:46,360
physical spec there's nothing in here

00:21:43,419 --> 00:21:49,269
that's doing any logical deployment of

00:21:46,360 --> 00:21:51,580
software or anything else this has

00:21:49,269 --> 00:21:54,100
already been spun up prior to this demo

00:21:51,580 --> 00:21:56,259
and the reason is basically just want to

00:21:54,100 --> 00:21:58,750
show that the machine is up and show

00:21:56,259 --> 00:22:00,610
some new command line features that are

00:21:58,750 --> 00:22:06,070
part of Nyx ops using that command line

00:22:00,610 --> 00:22:08,440
enhancement hook so to see what the NIV

00:22:06,070 --> 00:22:10,899
source pins are currently set to we can

00:22:08,440 --> 00:22:13,360
look at the Knicks sources file and it's

00:22:10,899 --> 00:22:15,700
a little off the screen because my font

00:22:13,360 --> 00:22:17,919
is big here but you can see repenting

00:22:15,700 --> 00:22:21,009
the Knicks ops repo to a specific branch

00:22:17,919 --> 00:22:23,529
at a specific revision and also doing

00:22:21,009 --> 00:22:27,129
that for Knicks packages NIV is up above

00:22:23,529 --> 00:22:27,759
and also Knicks ops core we're using a

00:22:27,129 --> 00:22:30,129
fork

00:22:27,759 --> 00:22:32,730
actually pinned to a specific branch and

00:22:30,129 --> 00:22:32,730
commit as well

00:22:32,940 --> 00:22:41,009
and as we saw in this slide that was

00:22:36,450 --> 00:22:43,999
smaller than this earlier the Knicks ops

00:22:41,009 --> 00:22:47,220
is defined as an overlay using those

00:22:43,999 --> 00:22:48,899
different types of sources one being the

00:22:47,220 --> 00:22:50,789
NIF source and other being a local

00:22:48,899 --> 00:22:56,820
source and the final one being the data

00:22:50,789 --> 00:22:58,470
next source so now will enable der M so

00:22:56,820 --> 00:23:01,259
that we can just it'll drop us into a

00:22:58,470 --> 00:23:10,559
Knicks ops shell with Knicks ops in the

00:23:01,259 --> 00:23:12,749
path and we can list the plugins and we

00:23:10,559 --> 00:23:14,279
see that we have the AWS packet and V

00:23:12,749 --> 00:23:19,169
Box plug-in that we had wanted and

00:23:14,279 --> 00:23:20,729
defined in the default Knicks and if we

00:23:19,169 --> 00:23:22,200
list deployments we see there is one

00:23:20,729 --> 00:23:23,789
machine there that's a packet machine

00:23:22,200 --> 00:23:26,359
and was pre deployed prior to this demo

00:23:23,789 --> 00:23:26,359
being recorded

00:23:26,960 --> 00:23:32,669
and there's a packet machine with the

00:23:30,779 --> 00:23:35,429
packet key pair that's needed to SSH

00:23:32,669 --> 00:23:37,320
into it and now if we just tail the

00:23:35,429 --> 00:23:39,509
Knicks ops help we do see that there is

00:23:37,320 --> 00:23:41,940
a new command in the Knicks ops command

00:23:39,509 --> 00:23:46,009
structure and that's the packet command

00:23:41,940 --> 00:23:46,009
to run packet specific plug-in commands

00:23:46,039 --> 00:23:49,649
so we get a little more help on that we

00:23:48,299 --> 00:23:51,869
see it has some structure we got to do

00:23:49,649 --> 00:23:55,440
Nick's ops packet SOS console to connect

00:23:51,869 --> 00:23:57,269
to a machines SOS console and takes a

00:23:55,440 --> 00:23:59,519
few additional parameters like the

00:23:57,269 --> 00:24:02,009
deployment and the machine name so we'll

00:23:59,519 --> 00:24:04,259
just try it out this is the demo three

00:24:02,009 --> 00:24:05,759
deployment on packet one and you can see

00:24:04,259 --> 00:24:07,470
we have a login prompt and this is

00:24:05,759 --> 00:24:08,849
connected with out-of-band management so

00:24:07,470 --> 00:24:11,159
even if the networking's down we can

00:24:08,849 --> 00:24:12,809
still get access immediately and you

00:24:11,159 --> 00:24:19,169
could do this outside of Nick's ops you

00:24:12,809 --> 00:24:20,909
can SSH to a specific URL or a fully

00:24:19,169 --> 00:24:22,049
qualified domain name and you'll get

00:24:20,909 --> 00:24:23,609
access but this is just much more

00:24:22,049 --> 00:24:26,039
convenient you can issue this command

00:24:23,609 --> 00:24:28,190
simply and it shows that really any

00:24:26,039 --> 00:24:29,999
plugins that are made can extend out the

00:24:28,190 --> 00:24:36,859
capability of Nick's ops through the

00:24:29,999 --> 00:24:36,859
command line as well all right

00:24:37,690 --> 00:24:41,620
so just to summarize the work involved

00:24:39,970 --> 00:24:43,090
in changing over to a plug-in

00:24:41,620 --> 00:24:47,230
architecture from monolithic was

00:24:43,090 --> 00:24:49,960
Graham's initial POC around mid 2018 the

00:24:47,230 --> 00:24:52,600
the big PR that did the migration was in

00:24:49,960 --> 00:24:54,400
September 19 there's another PR that's

00:24:52,600 --> 00:24:56,650
unmerged that just does some script and

00:24:54,400 --> 00:25:00,130
documentation improvements and then most

00:24:56,650 --> 00:25:02,380
recently Elko has put a PR up that's

00:25:00,130 --> 00:25:04,930
unmerged it's really just a few days old

00:25:02,380 --> 00:25:06,610
I think that moves to flakes so that

00:25:04,930 --> 00:25:08,800
looks to me probably the way we'll be

00:25:06,610 --> 00:25:12,100
going in the future is bringing all

00:25:08,800 --> 00:25:13,450
these plugins together with flakes so

00:25:12,100 --> 00:25:16,630
here's a little merge drama when that

00:25:13,450 --> 00:25:18,670
plugin architecture PR emerged there was

00:25:16,630 --> 00:25:20,530
a whole lot of lines deleted it's a

00:25:18,670 --> 00:25:22,300
little exaggerated here because it's

00:25:20,530 --> 00:25:24,610
double counting the lines actually it's

00:25:22,300 --> 00:25:30,160
really just 32,000 lines we deleted from

00:25:24,610 --> 00:25:31,780
the core and so the actual plugins that

00:25:30,160 --> 00:25:33,700
are out there right now you could see

00:25:31,780 --> 00:25:36,400
them on the screen there's quite a few

00:25:33,700 --> 00:25:38,410
of them some of them are hosted on by

00:25:36,400 --> 00:25:40,390
the Nix OS work some of them are hosted

00:25:38,410 --> 00:25:44,050
at Nick's community and there's a few

00:25:40,390 --> 00:25:46,390
third party hosted repos as well and I

00:25:44,050 --> 00:25:48,010
actually forgot to put my bosses vulture

00:25:46,390 --> 00:25:53,800
repo on there that he just mentioned

00:25:48,010 --> 00:25:56,050
earlier so and the future is probably as

00:25:53,800 --> 00:25:59,230
I mentioned with flakes I look forward

00:25:56,050 --> 00:26:01,390
to learning how to use that and some

00:25:59,230 --> 00:26:03,610
possibilities that we can do with the

00:26:01,390 --> 00:26:06,490
plug-in structure is to extend Nick's

00:26:03,610 --> 00:26:08,320
ops capabilities with RPC or maybe more

00:26:06,490 --> 00:26:09,940
generally IPC to interface with other

00:26:08,320 --> 00:26:13,900
languages through a plug-in or to bridge

00:26:09,940 --> 00:26:15,910
to other services and there's still

00:26:13,900 --> 00:26:18,940
quite a bit to work to do at a minimum

00:26:15,910 --> 00:26:21,310
the the testing libraries are not really

00:26:18,940 --> 00:26:23,680
cleaned up right now probably need to

00:26:21,310 --> 00:26:25,270
migrate the testing libraries to each of

00:26:23,680 --> 00:26:27,670
the plugins I think a number of them are

00:26:25,270 --> 00:26:30,780
still left in the core and of course we

00:26:27,670 --> 00:26:33,130
need more documentation for everything

00:26:30,780 --> 00:26:35,590
so thank you to everyone in the

00:26:33,130 --> 00:26:37,180
community for helping make this happen

00:26:35,590 --> 00:26:40,240
the community members who helped with

00:26:37,180 --> 00:26:42,760
the POC the merge and moving a number of

00:26:40,240 --> 00:26:44,350
these plugins over elko of course for

00:26:42,760 --> 00:26:47,410
his contributions and moving it forward

00:26:44,350 --> 00:26:49,300
with flakes and I ohk my boss for giving

00:26:47,410 --> 00:26:51,570
time to do this and all other

00:26:49,300 --> 00:27:06,190
contributors who are helping out

00:26:51,570 --> 00:27:08,080
questions hi great talk just to be clear

00:27:06,190 --> 00:27:11,230
you don't actually have to change

00:27:08,080 --> 00:27:14,710
anything in your like mix-ups deployment

00:27:11,230 --> 00:27:17,470
configurations to use like this doesn't

00:27:14,710 --> 00:27:19,330
change your Nick's files no it does not

00:27:17,470 --> 00:27:21,100
change your next files so basically your

00:27:19,330 --> 00:27:24,759
deployment is gonna be exactly the same

00:27:21,100 --> 00:27:26,200
unless your plugin has new changes in it

00:27:24,759 --> 00:27:27,879
and whatnot but that would be the same

00:27:26,200 --> 00:27:31,720
if it was in core and merged in there

00:27:27,879 --> 00:27:33,690
this basically gives plug-in providers

00:27:31,720 --> 00:27:36,279
and people that want to write non

00:27:33,690 --> 00:27:39,370
provider related plugins like one

00:27:36,279 --> 00:27:41,980
thought we had was like a DNS generic

00:27:39,370 --> 00:27:44,649
back-end that could tie into like AWS

00:27:41,980 --> 00:27:47,019
route 53 and CloudFlare DNS that you

00:27:44,649 --> 00:27:48,700
could basically offload your DNS to

00:27:47,019 --> 00:27:50,379
multiple things if someone wanted to do

00:27:48,700 --> 00:27:54,580
that they could start taking advantage

00:27:50,379 --> 00:27:56,980
of this put that plug-in into their own

00:27:54,580 --> 00:27:59,230
repo test it have some other people play

00:27:56,980 --> 00:28:00,970
around with it and then eventually once

00:27:59,230 --> 00:28:03,309
there's enough people use it moving into

00:28:00,970 --> 00:28:06,159
Nick's community and if it has massive

00:28:03,309 --> 00:28:09,460
adoption like AWS it becomes adopted in

00:28:06,159 --> 00:28:11,620
the Nix OS or completely and the Nick's

00:28:09,460 --> 00:28:13,840
OS org completely so we we broke it down

00:28:11,620 --> 00:28:15,490
into three layers the Nix OS org next

00:28:13,840 --> 00:28:18,070
community and then other Forks and

00:28:15,490 --> 00:28:20,049
basically the Nix OS org ones have

00:28:18,070 --> 00:28:22,179
ultimate support we're never gonna break

00:28:20,049 --> 00:28:23,860
those the next community ones might

00:28:22,179 --> 00:28:25,720
break from version to version it's

00:28:23,860 --> 00:28:28,659
dependent on the community members to

00:28:25,720 --> 00:28:30,610
keep those up to date and then the ones

00:28:28,659 --> 00:28:36,039
and Forks are not gonna be really tested

00:28:30,610 --> 00:28:40,179
at all by anyone maintaining core anyone

00:28:36,039 --> 00:28:43,720
else yeah here yeah yeah yeah yeah can

00:28:40,179 --> 00:28:47,649
you see me yep okay I was wondering if

00:28:43,720 --> 00:28:49,750
like I think the issues that were on the

00:28:47,649 --> 00:28:54,279
next ops repo they're related related to

00:28:49,750 --> 00:28:56,110
some of the of the plugins we're not

00:28:54,279 --> 00:28:59,889
migrated to their respective repos were

00:28:56,110 --> 00:29:01,779
they no they have not been migrated

00:28:59,889 --> 00:29:04,389
that's kind of a manual process to

00:29:01,779 --> 00:29:04,890
migrate them we did migrate the commits

00:29:04,389 --> 00:29:07,510
hiss

00:29:04,890 --> 00:29:10,059
so we didn't lose any commits history

00:29:07,510 --> 00:29:12,280
for any changes but specific issues and

00:29:10,059 --> 00:29:14,260
PRS and whatnot we're not migrated and

00:29:12,280 --> 00:29:17,020
it's up to the maintainer x' of those

00:29:14,260 --> 00:29:19,110
plugins to move those issues and if new

00:29:17,020 --> 00:29:21,880
ones are opened we're just going to

00:29:19,110 --> 00:29:23,740
probably leave a note in there please

00:29:21,880 --> 00:29:24,220
use this repo instead and close it right

00:29:23,740 --> 00:29:26,320
away

00:29:24,220 --> 00:29:28,690
a lot of cleanup hasn't been done on the

00:29:26,320 --> 00:29:29,950
repo like you saw my voltar one is still

00:29:28,690 --> 00:29:32,320
in there that one should really be

00:29:29,950 --> 00:29:35,230
closed because it doesn't apply anymore

00:29:32,320 --> 00:29:37,210
and if anyone wants to especially if

00:29:35,230 --> 00:29:39,730
you're not very technical and you want

00:29:37,210 --> 00:29:41,559
to help contribute to nix UPS we would

00:29:39,730 --> 00:29:43,750
love people to just go through triage

00:29:41,559 --> 00:29:45,220
issues and help move that maybe that

00:29:43,750 --> 00:29:50,860
might be a good event for the hack day

00:29:45,220 --> 00:29:53,110
on Sunday over there yeah so I think

00:29:50,860 --> 00:29:55,870
having the plugins is great so thanks

00:29:53,110 --> 00:29:58,030
for that I think the only drawback as a

00:29:55,870 --> 00:30:00,640
contributor is that if it's possible

00:29:58,030 --> 00:30:04,570
that people write against the Knicks ops

00:30:00,640 --> 00:30:07,870
code or core code in some separate

00:30:04,570 --> 00:30:10,630
repositories as a contributor I may now

00:30:07,870 --> 00:30:12,730
be able to break much more many more

00:30:10,630 --> 00:30:14,590
people's stuff because I may not know

00:30:12,730 --> 00:30:17,260
that their plugin exists right

00:30:14,590 --> 00:30:19,990
what is your recommended approach to

00:30:17,260 --> 00:30:21,789
like communicating plugins let's say

00:30:19,990 --> 00:30:23,500
somebody else makes some plug-in and I

00:30:21,789 --> 00:30:25,780
as another contributor want to make sure

00:30:23,500 --> 00:30:27,940
I don't break their stuff before because

00:30:25,780 --> 00:30:29,830
everything was in one repo I could just

00:30:27,940 --> 00:30:32,020
see okay these are the I don't know five

00:30:29,830 --> 00:30:35,020
providers we have so I can manually test

00:30:32,020 --> 00:30:36,760
those is there like one place where all

00:30:35,020 --> 00:30:39,520
of them should be registered I can

00:30:36,760 --> 00:30:40,990
imagine that in Nix packages itself

00:30:39,520 --> 00:30:42,970
because the plugins are listed there

00:30:40,990 --> 00:30:44,440
that might be one place to look but for

00:30:42,970 --> 00:30:46,510
example plugins currently being in

00:30:44,440 --> 00:30:48,880
development or what that may be affected

00:30:46,510 --> 00:30:50,890
by some change of API or what

00:30:48,880 --> 00:30:52,990
where should we best communicate or

00:30:50,890 --> 00:30:55,539
where should everybody announce their

00:30:52,990 --> 00:30:58,000
plugins do we have like is there a place

00:30:55,539 --> 00:31:01,120
we should put that in well ideally if

00:30:58,000 --> 00:31:02,950
you're using Nix ops and you have a

00:31:01,120 --> 00:31:04,179
community around you using that plug-in

00:31:02,950 --> 00:31:06,520
it should go in the next community

00:31:04,179 --> 00:31:07,960
rather than in your personal fork which

00:31:06,520 --> 00:31:09,400
will get a little bit more support

00:31:07,960 --> 00:31:11,590
because you have more community people

00:31:09,400 --> 00:31:15,280
testing it reporting issues with

00:31:11,590 --> 00:31:18,259
breakages second to that I think a huge

00:31:15,280 --> 00:31:20,119
important thing we need to do

00:31:18,259 --> 00:31:23,479
have a versioning system that basically

00:31:20,119 --> 00:31:25,489
when we break api's of how those plugins

00:31:23,479 --> 00:31:26,840
integrate with mix-ups because they're

00:31:25,489 --> 00:31:29,359
still gonna be work that needs done on

00:31:26,840 --> 00:31:32,029
core like this DNS thing I was talking

00:31:29,359 --> 00:31:34,549
about that's gonna have to have a core

00:31:32,029 --> 00:31:38,029
change to it to be able to support

00:31:34,549 --> 00:31:39,950
having DNS entries automatically added

00:31:38,029 --> 00:31:43,700
across a variety of different plugins

00:31:39,950 --> 00:31:46,129
with different backends so as things

00:31:43,700 --> 00:31:47,960
like that are done on core if they're

00:31:46,129 --> 00:31:50,089
additive it doesn't really matter we

00:31:47,960 --> 00:31:52,070
don't need to worry about announcing it

00:31:50,089 --> 00:31:54,139
as a breaking change but if it's

00:31:52,070 --> 00:31:56,029
something that changes the way something

00:31:54,139 --> 00:31:58,519
was done before either optimizes

00:31:56,029 --> 00:32:00,919
something that we know is going to break

00:31:58,519 --> 00:32:02,509
a lot of plugins it needs to be

00:32:00,919 --> 00:32:04,489
communicated in some release notes and

00:32:02,509 --> 00:32:06,529
Knicks ops and it really shouldn't go

00:32:04,489 --> 00:32:08,239
into a stable release until we have some

00:32:06,529 --> 00:32:10,219
release notes available for those

00:32:08,239 --> 00:32:12,229
changes and the second question that

00:32:10,219 --> 00:32:14,779
maybe you cannot answer directly but I

00:32:12,229 --> 00:32:15,830
just wanted to surely bring up is one

00:32:14,779 --> 00:32:17,989
thing that traditionally has been

00:32:15,830 --> 00:32:19,879
difficult with mix-ups is testing it

00:32:17,989 --> 00:32:22,190
with the actual real providers for

00:32:19,879 --> 00:32:23,839
example if I make a head snap ER like as

00:32:22,190 --> 00:32:25,940
League wants to test it for example he

00:32:23,839 --> 00:32:27,950
needs an actual heads nor machine to

00:32:25,940 --> 00:32:30,080
test it maybe at some point in the

00:32:27,950 --> 00:32:31,849
future we can make perhaps as part of

00:32:30,080 --> 00:32:33,679
this community repo or what some way

00:32:31,849 --> 00:32:36,049
they will provide some infrastructure

00:32:33,679 --> 00:32:38,029
that things actually get tested at

00:32:36,049 --> 00:32:39,589
upstream providers for example asking

00:32:38,029 --> 00:32:41,089
them for like a free account or

00:32:39,589 --> 00:32:43,099
something like this that we can use for

00:32:41,089 --> 00:32:45,080
a continuous integration maybe not a

00:32:43,099 --> 00:32:46,940
question for you but like as a community

00:32:45,080 --> 00:32:49,609
that would be like really good to have

00:32:46,940 --> 00:32:51,649
for mix-ups in the future well one of

00:32:49,609 --> 00:32:54,200
those providers is here at this

00:32:51,649 --> 00:32:55,549
conference pocket net sent someone here

00:32:54,200 --> 00:32:57,710
so if that's something you're interested

00:32:55,549 --> 00:33:00,529
in I would highly recommend you talk to

00:32:57,710 --> 00:33:02,179
him others for other providers I mean

00:33:00,529 --> 00:33:03,799
yeah we need to have these

00:33:02,179 --> 00:33:06,379
communications with them it's gonna be

00:33:03,799 --> 00:33:08,749
hard to get some kind of buy-in from

00:33:06,379 --> 00:33:11,089
like AWS to do something like this but

00:33:08,749 --> 00:33:12,619
more the more community oriented ones

00:33:11,089 --> 00:33:15,349
I'm sure are gonna be happy to provide

00:33:12,619 --> 00:33:17,059
some resources and packet dotnet already

00:33:15,349 --> 00:33:19,489
provides a number of resources to the

00:33:17,059 --> 00:33:25,039
next community already so big thank you

00:33:19,489 --> 00:33:28,279
to them for that we have a question by

00:33:25,039 --> 00:33:30,840
Anderson IOC is anybody working on the

00:33:28,279 --> 00:33:35,309
VMware backends for excerpts currently

00:33:30,840 --> 00:33:39,710
I can't hear the question is anybody

00:33:35,309 --> 00:33:39,710
working on the VMware back-end currently

00:33:41,690 --> 00:33:47,370
I don't know of anyone working on a

00:33:44,340 --> 00:33:50,629
VMware back-end so as far as I'm aware I

00:33:47,370 --> 00:33:50,629
know I don't think so

00:33:55,320 --> 00:33:59,700
I have a question about actually using

00:33:57,180 --> 00:34:01,980
mix-ups so last I checked it stores all

00:33:59,700 --> 00:34:04,140
of its state information about the

00:34:01,980 --> 00:34:05,460
cluster in a local sequel light database

00:34:04,140 --> 00:34:07,740
which is fine if you just have one

00:34:05,460 --> 00:34:09,360
developer provisioning the cluster but

00:34:07,740 --> 00:34:12,929
how do you handle this in an enterprise

00:34:09,360 --> 00:34:15,510
environment with a shared team so we

00:34:12,929 --> 00:34:17,159
basically it's really the only way to do

00:34:15,510 --> 00:34:19,889
it right now it's not ideal but we

00:34:17,159 --> 00:34:22,139
utilize shared deployers we're basically

00:34:19,889 --> 00:34:24,600
multiple people can log into it and they

00:34:22,139 --> 00:34:27,240
have readwrite access to that state and

00:34:24,600 --> 00:34:29,040
there's some kind of communication on a

00:34:27,240 --> 00:34:32,159
back channel basically saying hey I'm

00:34:29,040 --> 00:34:36,600
touching this right now don't touch it

00:34:32,159 --> 00:34:38,190
or whatnot do you have any plans or do

00:34:36,600 --> 00:34:40,350
you think it would be particularly hard

00:34:38,190 --> 00:34:44,100
to implement like an s3 back-end for the

00:34:40,350 --> 00:34:46,710
state or various other backends Postgres

00:34:44,100 --> 00:34:48,600
background yeah I'm not sure if anyone

00:34:46,710 --> 00:34:51,060
started working on that that would

00:34:48,600 --> 00:34:53,460
definitely be something that I ohk would

00:34:51,060 --> 00:34:57,630
be very interested in and if we have

00:34:53,460 --> 00:34:59,460
some time to find a good pet project to

00:34:57,630 --> 00:35:02,160
do for nicks next year maybe that will

00:34:59,460 --> 00:35:03,960
be something we work on but I'm not

00:35:02,160 --> 00:35:05,640
aware of anyone currently working on

00:35:03,960 --> 00:35:07,940
that if anyone else is here please let

00:35:05,640 --> 00:35:07,940
me know

00:35:16,570 --> 00:35:19,570
okay

00:35:25,450 --> 00:35:32,480
is that everyone okay thanks all thank

00:35:31,809 --> 00:35:33,680
you thank you

00:35:32,480 --> 00:35:36,800
[Applause]

00:35:33,680 --> 00:35:36,800

YouTube URL: https://www.youtube.com/watch?v=jeVVk-dY5wE


