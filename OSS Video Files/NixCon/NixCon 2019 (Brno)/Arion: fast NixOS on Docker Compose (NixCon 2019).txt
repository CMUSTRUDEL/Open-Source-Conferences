Title: Arion: fast NixOS on Docker Compose (NixCon 2019)
Publication date: 2019-10-29
Playlist: NixCon 2019 (Brno)
Description: 
	An introduction to Arion: learn why we built it on top of Docker Compose, how it integrates with Nix and how you can use it. As Arion is mostly an application of the Nix modules system, we share our experience of building it.

Arion is a tool that integrates Nix and NixOS into Docker Compose.
- introduction to Docker Compose and Arion
- how to write a deployment
- how Arion uses the Nix module system to its advantage
- what's next for Arion

Arion started out as a little bash script with the goal of doing process management for our local development setups internally for Hercules CI, on top of Docker Compose.

It has since grown to become an independent tool with support for NixOS in Docker, a significant subset of docker-compose.yaml and support for building actual images.

Arion is written with the Nix module system, which means that deployments are as powerful as Arion's internals and that you can build your own abstractions into your deployments. It also means that the format of its logic may be familiar and it's easy to contribute.
Captions: 
	00:00:05,190 --> 00:00:14,190
and Singh is going to talk to us about

00:00:08,570 --> 00:00:24,090
some containers some mixes and some

00:00:14,190 --> 00:00:28,369
docker compose goodness alright yeah so

00:00:24,090 --> 00:00:28,369
this talk is about about Ariane

00:00:29,760 --> 00:00:39,149
I'm Robert I'm co-founder of Hercules

00:00:33,570 --> 00:00:47,039
labs we actually did launch of Hercules

00:00:39,149 --> 00:00:50,539
CI this week so that also means I've

00:00:47,039 --> 00:00:55,309
been a bit busy so I hope this

00:00:50,539 --> 00:00:58,170
presentation is sort of going to plan

00:00:55,309 --> 00:01:15,959
alright let's get started

00:00:58,170 --> 00:01:20,039
so it's configuration language so to

00:01:15,959 --> 00:01:25,890
speak for dr. Campos it's based on the

00:01:20,039 --> 00:01:30,690
next module system and it's also the

00:01:25,890 --> 00:01:35,160
tool that you can use to actually create

00:01:30,690 --> 00:01:37,229
the containers and restart and that kind

00:01:35,160 --> 00:01:45,239
of thing

00:01:37,229 --> 00:01:49,110
it's named after a horse it's a divine

00:01:45,239 --> 00:01:52,310
horse from Greek mythology and we chose

00:01:49,110 --> 00:01:55,050
the name because well obviously we have

00:01:52,310 --> 00:01:58,880
Greek mythology in the name of the

00:01:55,050 --> 00:02:03,690
company and it's it's a very fast horse

00:01:58,880 --> 00:02:09,860
I'll get to that and it's also a bit of

00:02:03,690 --> 00:02:09,860
a mix I thought it was appropriate

00:02:10,750 --> 00:02:18,070
so yeah the the way this came to be as

00:02:13,240 --> 00:02:21,130
we were looking for process manager kind

00:02:18,070 --> 00:02:26,280
of thing for our local development

00:02:21,130 --> 00:02:29,860
environments we've been using supervisor

00:02:26,280 --> 00:02:34,750
g4 for Kasich's but it had some problems

00:02:29,860 --> 00:02:38,110
with properly terminating processes so

00:02:34,750 --> 00:02:41,340
we were looking for something else I've

00:02:38,110 --> 00:02:45,730
worked with some t-max automation but

00:02:41,340 --> 00:02:48,780
that was a bit too custom and well it's

00:02:45,730 --> 00:02:53,980
not really designed for this purpose

00:02:48,780 --> 00:02:58,330
into system D but that doesn't really

00:02:53,980 --> 00:03:03,700
support like project based stuff very

00:02:58,330 --> 00:03:07,750
well make stress containers those are

00:03:03,700 --> 00:03:10,030
obviously very nice but for project

00:03:07,750 --> 00:03:15,310
development if you want to do stuff like

00:03:10,030 --> 00:03:16,900
life reloading it was a bit I'm not

00:03:15,310 --> 00:03:21,760
flexible enough you need to bind mount

00:03:16,900 --> 00:03:23,290
stuff into the container and maybe this

00:03:21,760 --> 00:03:26,110
has improved I don't know at least at

00:03:23,290 --> 00:03:28,800
the time make stress containers weren't

00:03:26,110 --> 00:03:32,790
a good option for this problem

00:03:28,800 --> 00:03:32,790
so we consider docker compose

00:03:39,180 --> 00:03:44,050
well I guess I don't have to talk that

00:03:42,040 --> 00:03:46,660
much about Nix on this government

00:03:44,050 --> 00:03:49,750
conference in terms of basically

00:03:46,660 --> 00:03:51,220
explaining it's really nice to have a

00:03:49,750 --> 00:03:55,209
programming language for your

00:03:51,220 --> 00:03:59,310
configuration and with Nix we can use

00:03:55,209 --> 00:03:59,310
the module system which is really nice

00:04:00,750 --> 00:04:11,290
so yeah the way we started to develop

00:04:08,200 --> 00:04:16,060
this sort of solution is to just try

00:04:11,290 --> 00:04:19,870
things out so this is what I ran just to

00:04:16,060 --> 00:04:23,800
run the next door

00:04:19,870 --> 00:04:25,570
right into the into the container so you

00:04:23,800 --> 00:04:31,000
don't have to rebuild everything or

00:04:25,570 --> 00:04:35,830
build images and yeah you don't really

00:04:31,000 --> 00:04:39,780
need anything else basically you don't

00:04:35,830 --> 00:04:45,340
need much else in your container so

00:04:39,780 --> 00:04:48,820
that's not an option for some reason so

00:04:45,340 --> 00:04:58,300
you put a file in there it's like roots

00:04:48,820 --> 00:05:01,990
and nobody actually works yeah so we had

00:04:58,300 --> 00:05:03,970
to create the image it was pretty clear

00:05:01,990 --> 00:05:07,960
that we need something like docker

00:05:03,970 --> 00:05:11,710
compose to - actually this was already

00:05:07,960 --> 00:05:15,960
sort of the plan but yeah so docker

00:05:11,710 --> 00:05:21,630
compose is a system that lets you define

00:05:15,960 --> 00:05:24,910
multi container applications and

00:05:21,630 --> 00:05:32,169
operations on them like building all the

00:05:24,910 --> 00:05:35,260
containers images as you say starting

00:05:32,169 --> 00:05:38,410
them destroying

00:05:35,260 --> 00:05:42,330
deployment all the kind of things you

00:05:38,410 --> 00:05:42,330
expect from a deployment tool

00:05:43,880 --> 00:05:53,670
and a basic configuration file looks

00:05:47,220 --> 00:05:57,650
like this it's it's llamo people might

00:05:53,670 --> 00:06:00,840
have opinions about it the nice thing is

00:05:57,650 --> 00:06:06,890
it's a superset of Jason so we can

00:06:00,840 --> 00:06:06,890
easily write these files from from mix

00:06:07,520 --> 00:06:12,270
yeah so what you see here is set of

00:06:11,640 --> 00:06:16,140
services

00:06:12,270 --> 00:06:20,190
it's like dictionary kind of thing so

00:06:16,140 --> 00:06:22,050
this service name this basically says

00:06:20,190 --> 00:06:26,400
look in the current directory for a

00:06:22,050 --> 00:06:31,110
docker docker file and it'll use the

00:06:26,400 --> 00:06:36,030
service name as the image name this will

00:06:31,110 --> 00:06:41,990
expose 45000 to the host and there's an

00:06:36,030 --> 00:06:41,990
extra service for there for the backend

00:06:44,730 --> 00:06:53,130
so areum it really started out as just a

00:06:49,740 --> 00:07:00,120
small batch script that did a thing for

00:06:53,130 --> 00:07:05,580
us with the module system it's really

00:07:00,120 --> 00:07:09,380
easy to refactor and it was quite fun to

00:07:05,580 --> 00:07:12,830
make it more of a self-contained thing

00:07:09,380 --> 00:07:19,770
so as I grew we we open sourced it

00:07:12,830 --> 00:07:25,700
around December I guess yeah so I think

00:07:19,770 --> 00:07:30,210
I think we announced it and since then

00:07:25,700 --> 00:07:36,780
it grew from I think it was 200 lines of

00:07:30,210 --> 00:07:40,380
- code into 317 actually is really nice

00:07:36,780 --> 00:07:42,390
language for this kind of thing but up

00:07:40,380 --> 00:07:43,710
to a point we were thinking of some

00:07:42,390 --> 00:07:49,050
features that would be hard to implement

00:07:43,710 --> 00:07:52,710
in in - so we switched to haskell that

00:07:49,050 --> 00:07:55,980
doubled the lines of code but we think

00:07:52,710 --> 00:07:59,280
they're more maintainable lines so in

00:07:55,980 --> 00:08:03,020
the end that she could think but really

00:07:59,280 --> 00:08:08,600
most of the project is is NICs modules

00:08:03,020 --> 00:08:08,600
and some sport coat like tests of course

00:08:14,180 --> 00:08:22,000
all right so demo time

00:08:17,660 --> 00:08:22,000
always interesting

00:08:24,690 --> 00:08:33,510
works

00:08:26,669 --> 00:08:36,029
so this is insight repo check out

00:08:33,510 --> 00:08:40,219
there's an examples directory should

00:08:36,029 --> 00:08:45,120
should have a look at it but also show

00:08:40,219 --> 00:08:48,209
the basics so these are obviously result

00:08:45,120 --> 00:08:51,930
is should be there but there's ariane

00:08:48,209 --> 00:08:55,350
packages and i own compose files for the

00:08:51,930 --> 00:08:58,380
bootstrapping ariel needs to find some

00:08:55,350 --> 00:09:01,170
version of next packages often imports

00:08:58,380 --> 00:09:04,800
existing it's the case that you have a

00:09:01,170 --> 00:09:11,220
specific version of nyx packages I mean

00:09:04,800 --> 00:09:12,810
this is before flakes right so yeah you

00:09:11,220 --> 00:09:14,399
have some version of NYX packages

00:09:12,810 --> 00:09:16,740
probably some overlays that are specific

00:09:14,399 --> 00:09:22,949
to the project and you want to use those

00:09:16,740 --> 00:09:28,800
in your in your deployment so in this

00:09:22,949 --> 00:09:32,579
case it's a very simple unification of

00:09:28,800 --> 00:09:37,620
just next packages with the system set

00:09:32,579 --> 00:09:42,720
to to Linux that's that's what you're

00:09:37,620 --> 00:09:44,279
deploying most of the time and that's

00:09:42,720 --> 00:09:46,260
really just for for bootstrapping and

00:09:44,279 --> 00:09:56,010
for providing the the packages argument

00:09:46,260 --> 00:10:02,420
to do modules it looks quite a bit like

00:09:56,010 --> 00:10:06,180
Nix OS the next verse module system is

00:10:02,420 --> 00:10:10,850
basically independent of NIC service and

00:10:06,180 --> 00:10:13,140
you can do a lot of cool stuff with it

00:10:10,850 --> 00:10:22,680
it doesn't have to be NIC stress itself

00:10:13,140 --> 00:10:25,610
so in this case we did have just like

00:10:22,680 --> 00:10:29,390
you have phone next to us but these are

00:10:25,610 --> 00:10:29,390
docker compose services

00:10:30,230 --> 00:10:38,240
and so one of the nice things is ability

00:10:35,810 --> 00:10:42,790
to share the host store so you don't

00:10:38,240 --> 00:10:42,790
have to build images when you're coding

00:10:45,910 --> 00:10:52,210
yeah I think this should be somewhat

00:10:48,200 --> 00:10:52,210
self-explanatory it's it's a web server

00:10:57,800 --> 00:11:02,980
now you can start it

00:11:03,180 --> 00:11:06,530
with the up command

00:11:11,000 --> 00:11:17,600
yeah so it's exactly started doesn't

00:11:15,200 --> 00:11:21,470
produce much output I've already built

00:11:17,600 --> 00:11:26,720
the thing so what happened behind the

00:11:21,470 --> 00:11:29,829
scenes is the neck stress I should say

00:11:26,720 --> 00:11:34,930
probably the NYX module system was

00:11:29,829 --> 00:11:38,839
invoked to evaluate that configuration

00:11:34,930 --> 00:11:40,490
it was built with with NYX build to

00:11:38,839 --> 00:11:44,480
produce the docker compose file which

00:11:40,490 --> 00:11:46,910
has all the references to stuff like

00:11:44,480 --> 00:11:54,459
this path here for the next

00:11:46,910 --> 00:11:54,459
documentation that just makes it work

00:11:54,670 --> 00:11:57,820
local host

00:12:15,869 --> 00:12:28,569
my browser is a bit shy turns out that

00:12:22,059 --> 00:12:32,980
you do there it is alright so this this

00:12:28,569 --> 00:12:36,220
is a fairly as it says it's it's the

00:12:32,980 --> 00:12:39,279
minimal example this is just using NYX

00:12:36,220 --> 00:12:43,540
and docker compose but we also put some

00:12:39,279 --> 00:12:50,919
effort to support NYX OS on this I'll

00:12:43,540 --> 00:12:54,970
stop this deployment it's actually

00:12:50,919 --> 00:13:00,959
called a project in in docker compose

00:12:54,970 --> 00:13:07,199
terminology and Ariane it's a

00:13:00,959 --> 00:13:07,199
composition project is a bit overloaded

00:13:21,910 --> 00:13:24,870
right so

00:13:26,990 --> 00:13:35,930
it's still services still an Aryan level

00:13:32,779 --> 00:13:39,500
surface so it corresponds to a doctor

00:13:35,930 --> 00:13:41,899
composed service but we have some some

00:13:39,500 --> 00:13:44,510
extra fields here provided by one of the

00:13:41,899 --> 00:13:50,630
Aryan modules which takes care of the

00:13:44,510 --> 00:13:53,440
next OS integration so everything below

00:13:50,630 --> 00:13:56,930
the next to s dot configuration is

00:13:53,440 --> 00:14:02,060
passed into the next verse module system

00:13:56,930 --> 00:14:06,980
and evaluated there and this

00:14:02,060 --> 00:14:14,740
automatically sets the service command

00:14:06,980 --> 00:14:24,010
field to the system T in its invocation

00:14:14,740 --> 00:14:27,010
for an EXO s and it configures with

00:14:24,010 --> 00:14:27,010
settings

00:14:32,790 --> 00:14:38,880
took a bit of research to get it to work

00:14:36,589 --> 00:14:41,850
but there you go

00:14:38,880 --> 00:14:44,329
I think name service gosh demon didn't

00:14:41,850 --> 00:14:44,329
start well

00:14:57,440 --> 00:15:00,009
so

00:15:10,670 --> 00:15:15,560
and it works again it's it's basically

00:15:13,070 --> 00:15:19,160
the same thing but now it's running with

00:15:15,560 --> 00:15:21,640
much more stuff around it to like clean

00:15:19,160 --> 00:15:23,870
up slash them that kind of thing that

00:15:21,640 --> 00:15:25,579
most containers don't need but if you

00:15:23,870 --> 00:15:33,920
need it it's really nice to have it I

00:15:25,579 --> 00:15:40,070
guess yeah so that's that's the the

00:15:33,920 --> 00:15:42,380
basic thing yeah so there's there's lots

00:15:40,070 --> 00:15:45,440
of nice things you can do for

00:15:42,380 --> 00:15:50,240
development for example we're using bind

00:15:45,440 --> 00:15:54,320
mounts to do live reloading or hot

00:15:50,240 --> 00:15:58,339
reloading of our surfaces which makes

00:15:54,320 --> 00:16:01,269
for a nice development experience for a

00:15:58,339 --> 00:16:01,269
quick iteration loop

00:16:14,250 --> 00:16:20,310
right so I thought it would be nice to

00:16:18,330 --> 00:16:23,010
talk about the module system because

00:16:20,310 --> 00:16:28,400
it's I think it's really cool it's a

00:16:23,010 --> 00:16:32,760
really nice way to work with a certain

00:16:28,400 --> 00:16:34,880
type of complexity so to speak it's it's

00:16:32,760 --> 00:16:38,900
the kind of thing you see in an express

00:16:34,880 --> 00:16:42,420
but it also really applies nicely to

00:16:38,900 --> 00:16:45,360
well - I own of course and I think

00:16:42,420 --> 00:16:51,360
there's lots lots of applications that

00:16:45,360 --> 00:16:53,970
benefit from from the module system for

00:16:51,360 --> 00:16:58,130
example I think there's a talk from IOH

00:16:53,970 --> 00:17:00,000
gay about has called up makes

00:16:58,130 --> 00:17:02,540
alternative haskell infrastructure I

00:17:00,000 --> 00:17:10,430
think that's using the module system and

00:17:02,540 --> 00:17:12,480
I really like it ok so so one of the

00:17:10,430 --> 00:17:14,640
basic things you need to know about the

00:17:12,480 --> 00:17:17,670
module system is that there's basically

00:17:14,640 --> 00:17:20,850
no difference between your configuration

00:17:17,670 --> 00:17:23,910
and other modules that are usually

00:17:20,850 --> 00:17:28,710
provided by a st. express or REO in this

00:17:23,910 --> 00:17:30,770
case so this I think this is really an

00:17:28,710 --> 00:17:33,600
important feature because if that's you

00:17:30,770 --> 00:17:38,120
factor things out into separate modules

00:17:33,600 --> 00:17:39,810
and actually take advantage of having a

00:17:38,120 --> 00:17:46,170
programming language as your

00:17:39,810 --> 00:17:48,960
configuration language yeah so this is

00:17:46,170 --> 00:17:50,880
what a basic invocation of the module

00:17:48,960 --> 00:17:54,680
system looks like it's a bit of a

00:17:50,880 --> 00:17:59,300
contrived example but you through it

00:17:54,680 --> 00:18:02,700
suppose you have a call NIC's packages

00:17:59,300 --> 00:18:08,130
all you need to do is call dibs eval

00:18:02,700 --> 00:18:11,460
modules by the way if you don't have mix

00:18:08,130 --> 00:18:14,220
packages itself you can directly import

00:18:11,460 --> 00:18:17,910
the label directory so we don't have to

00:18:14,220 --> 00:18:19,980
choose even a system architecture in in

00:18:17,910 --> 00:18:22,110
advance

00:18:19,980 --> 00:18:26,250
but if you do have to expect it just you

00:18:22,110 --> 00:18:27,210
can take it from here and you just

00:18:26,250 --> 00:18:32,340
invoke it

00:18:27,210 --> 00:18:36,720
you tell it where to modules are and you

00:18:32,340 --> 00:18:40,620
get back an attribute except with config

00:18:36,720 --> 00:18:46,050
in it it's the same config but you get

00:18:40,620 --> 00:18:50,190
passed into the into the modules so this

00:18:46,050 --> 00:18:57,120
lets you use the config in whatever

00:18:50,190 --> 00:19:00,930
context you have yeah you also you

00:18:57,120 --> 00:19:04,380
always have the lip argument pass to it

00:19:00,930 --> 00:19:08,850
that's built into the module system also

00:19:04,380 --> 00:19:15,000
options lets you do introspection into

00:19:08,850 --> 00:19:18,840
which options are available just it's

00:19:15,000 --> 00:19:23,280
actually a bit of a lie that one is not

00:19:18,840 --> 00:19:25,560
built into the module system itself so

00:19:23,280 --> 00:19:29,760
if you want to have it you actually need

00:19:25,560 --> 00:19:33,900
to declare it as an option probably have

00:19:29,760 --> 00:19:39,540
put that on the side well ask me after

00:19:33,900 --> 00:19:44,250
the talk yeah and so so this should be I

00:19:39,540 --> 00:19:47,090
guess more familiar the config prefix

00:19:44,250 --> 00:19:52,500
here is optional so if you're not

00:19:47,090 --> 00:19:56,790
declaring options configure imports but

00:19:52,500 --> 00:20:03,150
just fool with whatever that actually

00:19:56,790 --> 00:20:06,390
means config dot flew and these are so

00:20:03,150 --> 00:20:15,510
Dedes values are and combined with other

00:20:06,390 --> 00:20:17,870
modules in the configuration and so for

00:20:15,510 --> 00:20:22,110
example here bar should probably define

00:20:17,870 --> 00:20:24,710
config dog bar to some value and it's

00:20:22,110 --> 00:20:27,150
made available here

00:20:24,710 --> 00:20:30,000
but this module is also free to declare

00:20:27,150 --> 00:20:32,280
its own conflict of our and if there's

00:20:30,000 --> 00:20:34,650
two definitions in the module system you

00:20:32,280 --> 00:20:41,040
can have a merge function that combines

00:20:34,650 --> 00:20:44,520
the two values so this conflict will

00:20:41,040 --> 00:20:47,090
always have two combined values from all

00:20:44,520 --> 00:20:47,090
the modules together

00:20:51,860 --> 00:20:57,460
there's some sort of fancy things you

00:20:55,190 --> 00:20:57,460
can do

00:20:57,760 --> 00:21:06,280
arjan relies on sub modules basically

00:21:02,360 --> 00:21:08,840
whenever you see angle brackets name in

00:21:06,280 --> 00:21:12,290
in the next verse documentation that

00:21:08,840 --> 00:21:15,679
means that's sub module in pink stress

00:21:12,290 --> 00:21:19,160
usually they're just just data so to

00:21:15,679 --> 00:21:21,860
speak but that's not necessary you can

00:21:19,160 --> 00:21:24,830
actually do anything you like in these

00:21:21,860 --> 00:21:28,000
modules they're proper modules so in in

00:21:24,830 --> 00:21:31,520
Ariane I didn't really expect this

00:21:28,000 --> 00:21:33,350
because I was more familiar with today

00:21:31,520 --> 00:21:37,240
which is in Nick service but not I

00:21:33,350 --> 00:21:39,260
didn't really look into it that much yet

00:21:37,240 --> 00:21:41,630
so it was only recently that I

00:21:39,260 --> 00:21:46,340
refactored it into proper sub module so

00:21:41,630 --> 00:21:48,860
you don't have to manually call the

00:21:46,340 --> 00:21:53,980
module system for for each of the

00:21:48,860 --> 00:21:53,980
services it's just a type that says

00:21:54,400 --> 00:22:03,020
services are sub modules these modules

00:22:01,090 --> 00:22:06,740
so that's really nice and you can

00:22:03,020 --> 00:22:17,179
actually do stuff like imports in this

00:22:06,740 --> 00:22:22,360
tree and that means that this file will

00:22:17,179 --> 00:22:26,570
be evaluated and it can only set things

00:22:22,360 --> 00:22:28,870
for services stuff itself in its own

00:22:26,570 --> 00:22:28,870
namespace

00:22:33,739 --> 00:22:39,600
this is something we figured out the

00:22:37,590 --> 00:22:42,299
module system relies heavily on lazy

00:22:39,600 --> 00:22:44,159
evaluation to make things work because

00:22:42,299 --> 00:22:46,619
obviously when you're declaring the

00:22:44,159 --> 00:22:49,340
config which also getting it back as an

00:22:46,619 --> 00:22:52,649
argument where a lot of things that's

00:22:49,340 --> 00:22:56,999
recursion going on there because of

00:22:52,649 --> 00:22:59,940
laziness it can actually work I used to

00:22:56,999 --> 00:23:03,480
be quite wary of it I've run into

00:22:59,940 --> 00:23:05,850
situations where there was an infinite

00:23:03,480 --> 00:23:09,559
loop due to the way things are

00:23:05,850 --> 00:23:12,239
structured in the in the module system

00:23:09,559 --> 00:23:15,210
so it's it's nice to discover that some

00:23:12,239 --> 00:23:19,970
things some of the more fancy things

00:23:15,210 --> 00:23:19,970
actually do work it's normally when you

00:23:21,230 --> 00:23:27,029
so when you declare the configuration

00:23:23,899 --> 00:23:30,769
the structure of that attribute set

00:23:27,029 --> 00:23:36,499
should not depend on the configuration

00:23:30,769 --> 00:23:40,409
directly it's kind of find bending but

00:23:36,499 --> 00:23:41,580
that's what it is so it turns out you

00:23:40,409 --> 00:23:45,570
don't actually need to do that all the

00:23:41,580 --> 00:23:48,799
time in some cases you can for example

00:23:45,570 --> 00:23:51,450
look at options instead which is

00:23:48,799 --> 00:23:55,769
available sort of earlier in the

00:23:51,450 --> 00:23:59,639
recursion you can use it to to check

00:23:55,769 --> 00:24:03,799
whether some options are available if

00:23:59,639 --> 00:24:11,070
you sit for example to provide a better

00:24:03,799 --> 00:24:14,369
mix ops integration in CIA agent if you

00:24:11,070 --> 00:24:17,279
just declare mix-up specific stuff in

00:24:14,369 --> 00:24:20,489
next to us you'll you Bill

00:24:17,279 --> 00:24:25,460
you'll be declaring values that are that

00:24:20,489 --> 00:24:29,690
are undefined there's no deployments

00:24:25,460 --> 00:24:33,480
namespace in next OS so that's an area

00:24:29,690 --> 00:24:37,440
so with this sort of pattern you can you

00:24:33,480 --> 00:24:40,800
can make this optional and I think this

00:24:37,440 --> 00:24:45,840
will be very useful if we

00:24:40,800 --> 00:24:46,980
sort of decentralized mixer s which i

00:24:45,840 --> 00:24:50,370
think is a really good idea and with

00:24:46,980 --> 00:24:57,000
flicks it actually becomes feasible to

00:24:50,370 --> 00:25:01,380
do so you can use this to detect whether

00:24:57,000 --> 00:25:04,050
something is available or not provide a

00:25:01,380 --> 00:25:06,540
better experience when people have some

00:25:04,050 --> 00:25:15,650
combinations of modules in there in the

00:25:06,540 --> 00:25:20,910
configuration yeah so like I mentioned

00:25:15,650 --> 00:25:23,910
sub modules are proper modules so you

00:25:20,910 --> 00:25:27,570
can actually use them to do computations

00:25:23,910 --> 00:25:32,460
on your configuration so for example in

00:25:27,570 --> 00:25:34,350
areum we have surface dots environment

00:25:32,460 --> 00:25:41,340
variable which is all the environment

00:25:34,350 --> 00:25:44,940
variables for for the surface and it

00:25:41,340 --> 00:25:48,930
needs a tiny bit of processing almost no

00:25:44,940 --> 00:25:53,670
processing at all actually but this is

00:25:48,930 --> 00:25:57,450
actually declared in surface level

00:25:53,670 --> 00:25:59,790
modules so usually in next packages you

00:25:57,450 --> 00:26:03,120
see that there's some computation that

00:25:59,790 --> 00:26:04,290
maps over all the modules but you can

00:26:03,120 --> 00:26:08,460
actually move some of this computation

00:26:04,290 --> 00:26:16,980
into the module itself and that cleans

00:26:08,460 --> 00:26:20,640
up the code nicely so in areum each

00:26:16,980 --> 00:26:24,380
surface is responsible for its own piece

00:26:20,640 --> 00:26:24,380
of the of the llamó file

00:26:28,169 --> 00:26:37,919
one thing I noticed is lists can be

00:26:32,010 --> 00:26:42,029
annoying to work with in particular

00:26:37,919 --> 00:26:48,090
we've had we've worked with the

00:26:42,029 --> 00:26:50,220
capabilities in docker compose so with

00:26:48,090 --> 00:26:54,690
docker it you can use Linux capabilities

00:26:50,220 --> 00:26:59,010
they're basically ways to restrict a

00:26:54,690 --> 00:27:01,610
security context of a container so you

00:26:59,010 --> 00:27:03,870
can disallow stuff or allow stuff

00:27:01,610 --> 00:27:07,620
there's a default set of capabilities

00:27:03,870 --> 00:27:10,500
that a container has and propose lets

00:27:07,620 --> 00:27:14,990
you modify that set so you can remove

00:27:10,500 --> 00:27:18,899
things from it you can add things to it

00:27:14,990 --> 00:27:27,620
so the obvious thing to do is model

00:27:18,899 --> 00:27:32,100
these fields as strings but that's a bit

00:27:27,620 --> 00:27:36,510
annoying if you have a service that

00:27:32,100 --> 00:27:40,080
splits into modules because combining

00:27:36,510 --> 00:27:44,820
those lists is not very obvious what do

00:27:40,080 --> 00:27:48,570
you do if one of the modules says this

00:27:44,820 --> 00:27:53,340
capability should be removed and the

00:27:48,570 --> 00:27:56,519
other says it should be added so

00:27:53,340 --> 00:27:58,860
changing that to an attribute set makes

00:27:56,519 --> 00:28:01,230
it much easier because then the module

00:27:58,860 --> 00:28:04,500
system takes care of this the module

00:28:01,230 --> 00:28:13,049
system lets you use priorities to

00:28:04,500 --> 00:28:18,590
override lower priority definitions so

00:28:13,049 --> 00:28:18,590
this makes for a nicer interface

00:28:22,800 --> 00:28:27,710
yeah and while developing the system

00:28:31,970 --> 00:28:39,030
yeah I noticed that it's when you when

00:28:35,550 --> 00:28:40,710
you're constructing a new system it's

00:28:39,030 --> 00:28:43,380
best to start with the low-level stuff

00:28:40,710 --> 00:28:45,390
and then whenever you need something on

00:28:43,380 --> 00:28:49,070
top of that you can do it in a separate

00:28:45,390 --> 00:28:52,010
module so I really recommend to do so

00:28:49,070 --> 00:29:00,180
it's easy to add things to a new module

00:28:52,010 --> 00:29:03,240
that can turn into a mess yeah so in the

00:29:00,180 --> 00:29:09,300
future we'll be looking at integrating

00:29:03,240 --> 00:29:12,620
better with flix as they evolve we're

00:29:09,300 --> 00:29:15,390
going to have improved image support and

00:29:12,620 --> 00:29:17,940
we're looking into caching the

00:29:15,390 --> 00:29:25,110
evaluation to improve performance for

00:29:17,940 --> 00:29:30,030
commands that don't need to rebuild and

00:29:25,110 --> 00:29:31,650
we're thinking about how to deal with or

00:29:30,030 --> 00:29:37,380
distribute applications of the module

00:29:31,650 --> 00:29:39,330
system and one example of a sort of an

00:29:37,380 --> 00:29:42,470
experiment we're doing is project of

00:29:39,330 --> 00:29:47,580
NICs it's really not ready for primetime

00:29:42,470 --> 00:29:52,530
but basically the goal is to standardize

00:29:47,580 --> 00:29:57,260
the the glue code that you find in many

00:29:52,530 --> 00:30:00,210
projects like how do you override

00:29:57,260 --> 00:30:06,440
packages or all those kind of things

00:30:00,210 --> 00:30:10,700
it's nice to have options that have a

00:30:06,440 --> 00:30:14,210
nice definition can be reused in

00:30:10,700 --> 00:30:14,210
language integrations

00:30:15,980 --> 00:30:19,040
thank you

00:30:25,020 --> 00:30:36,850
any questions so I'm not sure if you

00:30:35,170 --> 00:30:39,100
touched it in the introduction because I

00:30:36,850 --> 00:30:41,920
wasn't here but how would you put that

00:30:39,100 --> 00:30:43,960
into production like of course you have

00:30:41,920 --> 00:30:46,390
attack a composed setup but it's the

00:30:43,960 --> 00:30:48,250
struggle compose Yammer like distributed

00:30:46,390 --> 00:30:51,670
burn so you can use stuff like docker

00:30:48,250 --> 00:30:56,440
stack to put that into production right

00:30:51,670 --> 00:30:57,760
so we don't have a complete deployment

00:30:56,440 --> 00:31:04,690
story yet because we're not using this

00:30:57,760 --> 00:31:07,990
for production services so that's kind

00:31:04,690 --> 00:31:10,930
of a question we also have docker

00:31:07,990 --> 00:31:16,120
compose is a front-end to both docker

00:31:10,930 --> 00:31:18,040
itself and docker sperm so at least in

00:31:16,120 --> 00:31:24,220
theory it should be easy to actually do

00:31:18,040 --> 00:31:28,900
a swarm deployment using this so that's

00:31:24,220 --> 00:31:33,100
a way to go I guess and the way you wire

00:31:28,900 --> 00:31:34,720
it up into your deployments I think that

00:31:33,100 --> 00:31:39,880
really depends on the technology

00:31:34,720 --> 00:31:42,310
technology that you're using so gab

00:31:39,880 --> 00:31:46,530
can't say much about the specifics of

00:31:42,310 --> 00:31:49,330
that but it's it's definitely feasible I

00:31:46,530 --> 00:31:52,260
think it's not a good idea to use the

00:31:49,330 --> 00:31:56,050
host store on a production deployment

00:31:52,260 --> 00:31:59,860
it's better to use the image support

00:31:56,050 --> 00:32:01,270
that's built into this we don't we

00:31:59,860 --> 00:32:07,600
haven't used it with the register yet

00:32:01,270 --> 00:32:10,120
we've only use docker load so I don't

00:32:07,600 --> 00:32:13,690
expect expect any problems with pushing

00:32:10,120 --> 00:32:15,810
to registry but we just haven't done it

00:32:13,690 --> 00:32:15,810
yet

00:32:17,720 --> 00:32:22,490
so my understanding is that we need some

00:32:20,629 --> 00:32:24,379
kind of front-end and mix expressions to

00:32:22,490 --> 00:32:26,840
describe how we create a cluster of

00:32:24,379 --> 00:32:28,129
containers with services or systems with

00:32:26,840 --> 00:32:31,190
services and then some back-end to

00:32:28,129 --> 00:32:32,269
generate the yamo file I haven't used it

00:32:31,190 --> 00:32:35,000
too much but my understanding is that

00:32:32,269 --> 00:32:36,950
NYX Ops has some representation for

00:32:35,000 --> 00:32:39,379
describing such a cluster and then

00:32:36,950 --> 00:32:41,120
various backends did you consider adding

00:32:39,379 --> 00:32:47,450
it back end to mix ops to generate

00:32:41,120 --> 00:32:55,220
docker compose llamó files not really to

00:32:47,450 --> 00:32:57,909
be honest and I think it's been

00:32:55,220 --> 00:33:00,019
worthwhile to take another approach

00:32:57,909 --> 00:33:02,149
there's there's some overlap between

00:33:00,019 --> 00:33:08,470
features that are provided by nick stops

00:33:02,149 --> 00:33:12,220
and docker compose so docker compose

00:33:08,470 --> 00:33:15,710
basically has all the state in in docker

00:33:12,220 --> 00:33:19,879
whereas Nick's ops needs an extra state

00:33:15,710 --> 00:33:26,929
database so it's actually nice to avoid

00:33:19,879 --> 00:33:30,110
that complexity yeah I think something

00:33:26,929 --> 00:33:34,190
similar can be done for Nick soaps but

00:33:30,110 --> 00:33:38,149
it's probably best to to take a

00:33:34,190 --> 00:33:45,100
different approach there because it's

00:33:38,149 --> 00:33:47,360
just structured a bit differently okay

00:33:45,100 --> 00:33:51,110
what is the story about garbage

00:33:47,360 --> 00:33:56,210
collection routes and how much space

00:33:51,110 --> 00:33:59,600
will how to clean up great question

00:33:56,210 --> 00:34:01,429
currently it's using a temporary garbage

00:33:59,600 --> 00:34:06,740
collection route for the duration of the

00:34:01,429 --> 00:34:08,569
command so when you run docker up

00:34:06,740 --> 00:34:10,909
without any other arguments that's

00:34:08,569 --> 00:34:12,619
that's efficient because it's only

00:34:10,909 --> 00:34:16,000
running as long as the docker up command

00:34:12,619 --> 00:34:19,460
is running but when you're using detach

00:34:16,000 --> 00:34:22,399
the commands will will terminate while

00:34:19,460 --> 00:34:27,040
the deployment is still up so in that

00:34:22,399 --> 00:34:29,369
case you technically have a risk of

00:34:27,040 --> 00:34:33,700
garbage collecting a live deployment

00:34:29,369 --> 00:34:39,040
that's not great for our purposes this

00:34:33,700 --> 00:34:40,809
has not been a problem but if you deploy

00:34:39,040 --> 00:34:42,280
I think that yeah that's that's one of

00:34:40,809 --> 00:34:45,369
the main reasons to go with images

00:34:42,280 --> 00:34:50,980
rather than using a host or images will

00:34:45,369 --> 00:34:55,359
not be garbage collected yeah that's

00:34:50,980 --> 00:35:00,010
that I think I mentioned evaluation

00:34:55,359 --> 00:35:03,040
cache I think it's a good idea to change

00:35:00,010 --> 00:35:06,099
Arion a bit to be more aware of where

00:35:03,040 --> 00:35:08,470
things are deployed so we can both

00:35:06,099 --> 00:35:12,819
create a garbage route for that

00:35:08,470 --> 00:35:15,760
deployment on the user system and we

00:35:12,819 --> 00:35:19,660
used the Yama file to speed up commands

00:35:15,760 --> 00:35:21,940
like Ariane logs for example so that it

00:35:19,660 --> 00:35:25,869
doesn't have to re-evaluate the Ansari

00:35:21,940 --> 00:35:31,109
deployment either so that will also

00:35:25,869 --> 00:35:31,109
improve the garbage collection situation

00:35:31,559 --> 00:35:41,559
okay so if that's all the questions okay

00:35:36,700 --> 00:35:44,230
one more from domain before lunch yes I

00:35:41,559 --> 00:35:47,950
just wanted to well it's not a question

00:35:44,230 --> 00:35:50,380
it's an answer for friends so the reason

00:35:47,950 --> 00:35:52,359
why we are deploying to to Amazon and

00:35:50,380 --> 00:35:54,309
what Ariane gives us is that we can

00:35:52,359 --> 00:35:56,880
share the module system between what

00:35:54,309 --> 00:36:01,990
Amazon runs and what runs in the docker

00:35:56,880 --> 00:36:06,880
and and that's the biggest addition here

00:36:01,990 --> 00:36:09,849
because the doctor is just well run time

00:36:06,880 --> 00:36:11,859
protection system in that case and it

00:36:09,849 --> 00:36:14,829
takes care of ports sharing in all of

00:36:11,859 --> 00:36:16,720
that but we are essentially running the

00:36:14,829 --> 00:36:19,260
same kind of process and the same kind

00:36:16,720 --> 00:36:22,780
of configuration as on the machines then

00:36:19,260 --> 00:36:29,690
and that's the nice thing of reusing the

00:36:22,780 --> 00:36:33,109
module system yeah that's it Thanks

00:36:29,690 --> 00:36:33,109
thank you Robert

00:36:33,890 --> 00:36:40,070

YouTube URL: https://www.youtube.com/watch?v=rQ9p45r-dn0


