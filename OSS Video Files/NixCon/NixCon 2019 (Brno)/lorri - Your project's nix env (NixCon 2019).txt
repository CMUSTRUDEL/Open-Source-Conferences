Title: lorri - Your project's nix env (NixCon 2019)
Publication date: 2019-12-14
Playlist: NixCon 2019 (Brno)
Description: 
	lorri is a nix-shell replacement for project development. lorri is based around fast direnv integration for robust CLI and editor integration. https://github.com/target/lorri/
Captions: 
	00:00:26,230 --> 00:00:31,630
so next up is prof patch to talk to us

00:00:29,740 --> 00:00:36,280
about Laurie what it is and how you can

00:00:31,630 --> 00:00:39,150
use it get ready guys the talk is

00:00:36,280 --> 00:00:41,700
starting now

00:00:39,150 --> 00:00:43,760
[Applause]

00:00:41,700 --> 00:00:43,760
you

00:00:47,970 --> 00:00:56,080
okay nice

00:00:50,530 --> 00:01:00,070
hi I'm proof but um so Nick shale is a

00:00:56,080 --> 00:01:05,190
superpower who here agrees with me okay

00:01:00,070 --> 00:01:07,479
I see why is Nick so a superpower right

00:01:05,190 --> 00:01:10,750
so I have a few points there's probably

00:01:07,479 --> 00:01:13,330
more but first off you can define a dark

00:01:10,750 --> 00:01:15,670
environment for your project it sets all

00:01:13,330 --> 00:01:17,890
the environment variables you want just

00:01:15,670 --> 00:01:20,440
works for everything that's the next

00:01:17,890 --> 00:01:23,500
package essentially which is by now

00:01:20,440 --> 00:01:25,060
probably everything right you can check

00:01:23,500 --> 00:01:27,250
the file into the next version color

00:01:25,060 --> 00:01:28,450
into the git version control and every

00:01:27,250 --> 00:01:31,660
single developer gets the same

00:01:28,450 --> 00:01:33,550
environment wonderful no problem worth

00:01:31,660 --> 00:01:37,210
works on my machine or at least less

00:01:33,550 --> 00:01:39,820
problems now you get as fine grained

00:01:37,210 --> 00:01:41,229
dependencies as you want or need but you

00:01:39,820 --> 00:01:46,690
still get everything cached from the

00:01:41,229 --> 00:01:48,550
from the Hydra also beautiful and

00:01:46,690 --> 00:01:52,150
basically supersedes everything from

00:01:48,550 --> 00:01:54,760
Pippin of virtual ends or whatever your

00:01:52,150 --> 00:01:56,950
language users just has one environment

00:01:54,760 --> 00:01:58,630
and everything works and I mean you can

00:01:56,950 --> 00:02:00,880
even use it on CI and you have the same

00:01:58,630 --> 00:02:03,130
environment on CI you can get around all

00:02:00,880 --> 00:02:07,420
that travel stuff and just use Nick

00:02:03,130 --> 00:02:10,810
shell on CIO networks so Nick cell is a

00:02:07,420 --> 00:02:15,310
superpower however it doesn't make you

00:02:10,810 --> 00:02:18,150
invincible right oh and it was never

00:02:15,310 --> 00:02:21,579
intended to be a superpower actually

00:02:18,150 --> 00:02:23,829
because the first idea was oh probably

00:02:21,579 --> 00:02:26,290
echo thought oh I want to debug what I'm

00:02:23,829 --> 00:02:29,890
actually writing here so I want to debug

00:02:26,290 --> 00:02:31,180
the Builder essentially so what mixture

00:02:29,890 --> 00:02:32,739
actually does is just gives you the

00:02:31,180 --> 00:02:35,530
environment of the derivation you're

00:02:32,739 --> 00:02:37,420
working with right now exactly the same

00:02:35,530 --> 00:02:39,610
thing with all the compilers set with

00:02:37,420 --> 00:02:43,390
all the strange environment variables

00:02:39,610 --> 00:02:45,220
you want but people soon realized that

00:02:43,390 --> 00:02:47,170
it's actually a lot better than just

00:02:45,220 --> 00:02:49,470
being a debugging tool because it's very

00:02:47,170 --> 00:02:49,470
powerful

00:02:49,890 --> 00:02:56,349
so everybody uses right now and of

00:02:53,110 --> 00:02:58,390
course it's it's the superpower but it

00:02:56,349 --> 00:03:01,150
also doesn't make you invincible

00:02:58,390 --> 00:03:05,560
there's quite a few problems with Nick

00:03:01,150 --> 00:03:07,150
so right now the the brokered project

00:03:05,560 --> 00:03:09,610
products are getting bigger and bigger

00:03:07,150 --> 00:03:10,990
so once you start having a few

00:03:09,610 --> 00:03:13,360
developers working on that and a few

00:03:10,990 --> 00:03:15,640
dependencies and maybe even multiple mix

00:03:13,360 --> 00:03:18,070
packages clones your instantiation time

00:03:15,640 --> 00:03:20,290
is going to go up and your niches are

00:03:18,070 --> 00:03:22,840
going to use more and more time to open

00:03:20,290 --> 00:03:25,660
so we had the cases where it took like

00:03:22,840 --> 00:03:28,360
one and a half minutes on Linux and then

00:03:25,660 --> 00:03:30,880
even 20 up to 20 minutes on Mac OS right

00:03:28,360 --> 00:03:32,830
on business Mac OS MacBooks who have

00:03:30,880 --> 00:03:34,480
these these five checkers in the

00:03:32,830 --> 00:03:36,489
background who check every file access

00:03:34,480 --> 00:03:40,660
so now in excellence initiation takes 20

00:03:36,489 --> 00:03:42,940
minutes you garbage collect your next

00:03:40,660 --> 00:03:44,050
store suddenly all your project

00:03:42,940 --> 00:03:46,989
dependencies are gone you have to

00:03:44,050 --> 00:03:50,590
redownload everything again time for the

00:03:46,989 --> 00:03:54,239
waiting game something changed you have

00:03:50,590 --> 00:03:57,250
to exit next I'll enter next so again

00:03:54,239 --> 00:03:59,860
you have to wait for rebuilds and so on

00:03:57,250 --> 00:04:02,560
and of course you can only use this in

00:03:59,860 --> 00:04:05,170
your shell so good luck with setting up

00:04:02,560 --> 00:04:06,519
Emacs with that and there's a way to do

00:04:05,170 --> 00:04:11,049
that but I'm going to talk about it

00:04:06,519 --> 00:04:15,580
later so we thought about those problems

00:04:11,049 --> 00:04:18,280
and we came up with the following this

00:04:15,580 --> 00:04:22,090
is Laurie Laurie solves all these

00:04:18,280 --> 00:04:25,120
problems for you so my thesis or the

00:04:22,090 --> 00:04:27,669
thesis of this talk is if Nick shelters

00:04:25,120 --> 00:04:31,690
or Nick's is Batman then Laurie is like

00:04:27,669 --> 00:04:34,180
Robin right the small helper superhero

00:04:31,690 --> 00:04:35,710
and I'm of a way of course that Batman

00:04:34,180 --> 00:04:38,890
doesn't actually have any superpowers

00:04:35,710 --> 00:04:43,540
because Batman uses cool technology like

00:04:38,890 --> 00:04:45,370
mix and mix shell and Laurie okay before

00:04:43,540 --> 00:04:48,210
I come to the main act of this talk

00:04:45,370 --> 00:04:50,290
a short history of how this came to pass

00:04:48,210 --> 00:04:52,300
because Graham had already started

00:04:50,290 --> 00:04:54,040
experimenting with improving mix so I

00:04:52,300 --> 00:04:58,419
think over a year ago maybe two years

00:04:54,040 --> 00:05:02,290
ago so yeah I have ideas and then a

00:04:58,419 --> 00:05:03,940
company came along called target yeah we

00:05:02,290 --> 00:05:06,729
want we want to improve that we have

00:05:03,940 --> 00:05:08,520
problems with this and Graham said okay

00:05:06,729 --> 00:05:11,479
we a trick we can do that for you just

00:05:08,520 --> 00:05:13,759
say what you want and we can do it

00:05:11,479 --> 00:05:16,400
at least that's what I think this went

00:05:13,759 --> 00:05:21,349
it was probably a bit different from

00:05:16,400 --> 00:05:22,939
that but okay we know history time to

00:05:21,349 --> 00:05:27,379
meet the villains because you're AF

00:05:22,939 --> 00:05:29,689
superheroes so Robin was thinking he

00:05:27,379 --> 00:05:31,159
wants to develop on his project right he

00:05:29,689 --> 00:05:34,729
CDs and twist project

00:05:31,159 --> 00:05:40,930
he opens the next show and nothing

00:05:34,729 --> 00:05:43,389
happens a few minutes later oh okay

00:05:40,930 --> 00:05:46,310
what is why did it take so long

00:05:43,389 --> 00:05:48,889
yesterday just like like a few hours ago

00:05:46,310 --> 00:05:52,699
maybe yesterday I closed my next show I

00:05:48,889 --> 00:05:55,370
closed my desktop I went home came back

00:05:52,699 --> 00:05:58,039
now I want to start working like maybe I

00:05:55,370 --> 00:06:01,759
have a few ideas and boom I have to wait

00:05:58,039 --> 00:06:04,629
for a few minutes yeah why does it take

00:06:01,759 --> 00:06:07,669
this and of course I think you know why

00:06:04,629 --> 00:06:09,589
but Robin was asking this to himself

00:06:07,669 --> 00:06:12,409
Batman didn't seem seem to care very

00:06:09,589 --> 00:06:14,599
much because it was a good time to get a

00:06:12,409 --> 00:06:17,149
coffee or to write but Robin is young

00:06:14,599 --> 00:06:18,589
and he wants to do something and so he

00:06:17,149 --> 00:06:22,129
has a problem with this so he decided to

00:06:18,589 --> 00:06:25,789
find out why this happens so he decided

00:06:22,129 --> 00:06:26,240
to look at the source code this is Nick

00:06:25,789 --> 00:06:27,259
shell

00:06:26,240 --> 00:06:29,389
like this was the actual implementation

00:06:27,259 --> 00:06:34,069
of Nick sir I shortened it down a bit

00:06:29,389 --> 00:06:38,120
like to from originally this was a per

00:06:34,069 --> 00:06:39,709
script and this got ported to C++ bash

00:06:38,120 --> 00:06:42,319
levy and now it's just in the next bill

00:06:39,709 --> 00:06:43,939
dot CC file you can just look at it it's

00:06:42,319 --> 00:06:45,979
not that simple but it's also not

00:06:43,939 --> 00:06:47,839
terribly hard and it's only one file so

00:06:45,979 --> 00:06:50,330
we can follow the code flow code flow

00:06:47,839 --> 00:06:53,509
but in essence I think I pretty much

00:06:50,330 --> 00:06:56,029
shorten this down to a few lines so the

00:06:53,509 --> 00:06:57,680
first L is the first step is you get

00:06:56,029 --> 00:06:59,599
your shell of Nick's or Nick's gates of

00:06:57,680 --> 00:07:02,029
shadowed Nick's and it causes function

00:06:59,599 --> 00:07:05,240
derivation from path which returns a div

00:07:02,029 --> 00:07:08,360
file so this essentially is the Nick's

00:07:05,240 --> 00:07:11,300
expression and then it gives you the div

00:07:08,360 --> 00:07:12,830
file then it takes the dependencies of

00:07:11,300 --> 00:07:14,479
the D Aretha because remember we're

00:07:12,830 --> 00:07:16,789
opening a shell here so we don't want

00:07:14,479 --> 00:07:20,990
the derivation we want the dependencies

00:07:16,789 --> 00:07:22,969
and builds all of these then it gets the

00:07:20,990 --> 00:07:25,519
environment from the UV file and set set

00:07:22,969 --> 00:07:27,859
for the process is going to call

00:07:25,519 --> 00:07:31,759
the process going to be a bash with some

00:07:27,859 --> 00:07:35,209
RC file and it's xx into bash and then

00:07:31,759 --> 00:07:37,789
basically next the the next thing is

00:07:35,209 --> 00:07:40,779
dead and bash runs within my environment

00:07:37,789 --> 00:07:44,269
of your shell dot Nicks

00:07:40,779 --> 00:07:46,479
okay third Robin so why is this taking

00:07:44,269 --> 00:07:49,489
so long

00:07:46,479 --> 00:07:51,529
the first two lines because every time

00:07:49,489 --> 00:07:53,599
you want to exit into the bash it's

00:07:51,529 --> 00:07:55,249
going to have to open the shell out

00:07:53,599 --> 00:07:57,379
Nick's evaluate everything every

00:07:55,249 --> 00:07:59,479
dependency in Nick's that's basically a

00:07:57,379 --> 00:08:01,209
functional language so and maybe not

00:07:59,479 --> 00:08:04,939
that optimized so it takes a while and

00:08:01,209 --> 00:08:09,739
then it connects again to bash how could

00:08:04,939 --> 00:08:13,639
you solve that just use the last build

00:08:09,739 --> 00:08:15,409
you did yesterday the right so Laurie

00:08:13,639 --> 00:08:18,379
solve this by keeping around the last

00:08:15,409 --> 00:08:20,779
build you did and when you enter your

00:08:18,379 --> 00:08:23,629
project immediately get the environment

00:08:20,779 --> 00:08:25,699
of the last build you were in and then

00:08:23,629 --> 00:08:27,439
it starts in the background giving you

00:08:25,699 --> 00:08:29,089
the new environment if something changed

00:08:27,439 --> 00:08:34,419
and most of the time to be honest

00:08:29,089 --> 00:08:34,419
nothing really changes second problem

00:08:34,689 --> 00:08:40,339
Robin opens like Robin wants to run his

00:08:37,759 --> 00:08:44,240
command something and he sees this

00:08:40,339 --> 00:08:47,029
message Oh hmm okay of course Robins our

00:08:44,240 --> 00:08:51,079
next developer so he immediately types

00:08:47,029 --> 00:08:52,250
these dis line and of course the next

00:08:51,079 --> 00:08:55,550
door has grown by a few hundred

00:08:52,250 --> 00:08:57,529
gigabytes in the meantime so all right

00:08:55,550 --> 00:08:59,149
there was this handy-dandy command that

00:08:57,529 --> 00:09:02,899
you can give to the garbage collect

00:08:59,149 --> 00:09:03,860
called max free 30 gigabytes ah should

00:09:02,899 --> 00:09:06,949
be enough right

00:09:03,860 --> 00:09:11,259
nice I have space again that's opening

00:09:06,949 --> 00:09:11,259
so nothing happens

00:09:16,370 --> 00:09:23,340
why is there no GC root for my next

00:09:19,440 --> 00:09:25,830
shell this can't be this hard so very

00:09:23,340 --> 00:09:28,170
very easy Laurie just creates a GC root

00:09:25,830 --> 00:09:29,880
for your project and if you get a new

00:09:28,170 --> 00:09:31,980
version of your project it just all

00:09:29,880 --> 00:09:34,620
rights rights the old one so it is

00:09:31,980 --> 00:09:37,080
available for GC again so you always

00:09:34,620 --> 00:09:38,790
have it in it it never gets garbage

00:09:37,080 --> 00:09:46,290
collected when you don't want it to be

00:09:38,790 --> 00:09:49,130
garbage collected third problem Oh

00:09:46,290 --> 00:09:53,460
my notes are a bit just to pick sorry

00:09:49,130 --> 00:09:55,230
okay you're in Unix

00:09:53,460 --> 00:09:58,380
Robin is in this next Shell you wants

00:09:55,230 --> 00:10:00,680
some some other person comes and says Oh

00:09:58,380 --> 00:10:04,770
check out my new PR it has a few changes

00:10:00,680 --> 00:10:08,490
okay so get check out some PR now run

00:10:04,770 --> 00:10:11,040
the project huh new tool is missing I

00:10:08,490 --> 00:10:12,390
didn't know about new tool probably the

00:10:11,040 --> 00:10:15,980
other developer edited in the meantime

00:10:12,390 --> 00:10:19,790
right so now Robin leaves the next show

00:10:15,980 --> 00:10:19,790
Robin enters the next show

00:10:25,130 --> 00:10:30,720
why didn't start evaluating the new

00:10:28,650 --> 00:10:34,800
state of the project when he switched to

00:10:30,720 --> 00:10:36,960
get commit so the idea here is that once

00:10:34,800 --> 00:10:39,000
you check out something and basically

00:10:36,960 --> 00:10:41,760
the file is the dependencies that you

00:10:39,000 --> 00:10:43,200
need to open your next oil change you

00:10:41,760 --> 00:10:45,840
immediately want it to run in the

00:10:43,200 --> 00:10:48,210
background and start building preferably

00:10:45,840 --> 00:10:50,640
on your company's server the new version

00:10:48,210 --> 00:10:54,300
of all the tools you need so that once

00:10:50,640 --> 00:10:56,070
you try to run it it's if possible

00:10:54,300 --> 00:10:58,530
already finished and you don't have to

00:10:56,070 --> 00:11:08,250
manually exit next shell and manually

00:10:58,530 --> 00:11:10,440
enter next shell again and it should

00:11:08,250 --> 00:11:11,910
also provide you a way of to integrate

00:11:10,440 --> 00:11:13,140
this into your new environment so it

00:11:11,910 --> 00:11:15,810
should give you a steady stream of

00:11:13,140 --> 00:11:17,970
messages let's say oh this changed now

00:11:15,810 --> 00:11:19,410
I'm starting instantiation okay I'm

00:11:17,970 --> 00:11:21,960
reading and essentially I think now I

00:11:19,410 --> 00:11:24,270
start I'm starting the build and so you

00:11:21,960 --> 00:11:25,950
immediately see that when it's done you

00:11:24,270 --> 00:11:33,720
can say okay switch to the new and wha

00:11:25,950 --> 00:11:35,940
and now I can try this again okay now we

00:11:33,720 --> 00:11:38,250
have something that works for our shell

00:11:35,940 --> 00:11:42,690
but how can we actually integrate that

00:11:38,250 --> 00:11:47,790
in our editor for example you might want

00:11:42,690 --> 00:11:49,740
some things like like I don't know these

00:11:47,790 --> 00:11:51,540
squiggly lines under your code when you

00:11:49,740 --> 00:11:53,400
miss something and you actually want

00:11:51,540 --> 00:12:00,030
those tools to come from your

00:11:53,400 --> 00:12:02,820
environment right and and Robin kind of

00:12:00,030 --> 00:12:06,030
starts dreaming about this this world we

00:12:02,820 --> 00:12:08,340
can just switch buffers between projects

00:12:06,030 --> 00:12:11,790
and immediately have the new environment

00:12:08,340 --> 00:12:13,590
in his in his project without the

00:12:11,790 --> 00:12:15,150
without the editor blocking for another

00:12:13,590 --> 00:12:19,770
one and a half minutes every time he

00:12:15,150 --> 00:12:21,900
switches between projects so there's

00:12:19,770 --> 00:12:23,880
this beautiful tool called dierent which

00:12:21,900 --> 00:12:28,200
is written by the wonderful Simba TM

00:12:23,880 --> 00:12:30,270
he's he's here somewhere against which

00:12:28,200 --> 00:12:32,190
basically takes care of that for you and

00:12:30,270 --> 00:12:34,770
has integrated integration for all

00:12:32,190 --> 00:12:38,850
different editors for different shells

00:12:34,770 --> 00:12:41,910
whatever and Laurie just provides you an

00:12:38,850 --> 00:12:44,580
integration into dierent so you add like

00:12:41,910 --> 00:12:47,490
one line of code to the deer end at the

00:12:44,580 --> 00:12:49,710
end for C and it just starts working

00:12:47,490 --> 00:12:51,780
with the normal lorry environment

00:12:49,710 --> 00:12:54,240
it never blocks anything because it

00:12:51,780 --> 00:13:00,150
still it uses the last working version

00:12:54,240 --> 00:13:01,890
when you switch environments and now

00:13:00,150 --> 00:13:04,290
that all these problems are solved Robin

00:13:01,890 --> 00:13:09,650
is pretty satisfied this satisfied and

00:13:04,290 --> 00:13:09,650
decides to tell Batman about it okay

00:13:09,950 --> 00:13:19,080
yeah this is a probe this is a project

00:13:12,900 --> 00:13:21,810
it's on github we have good first issues

00:13:19,080 --> 00:13:24,780
for you to solve please try it out it's

00:13:21,810 --> 00:13:29,700
very easy to install it's about one line

00:13:24,780 --> 00:13:32,090
of code nicks and - I F some paths some

00:13:29,700 --> 00:13:34,920
some link to a rolling release branch

00:13:32,090 --> 00:13:37,680
you will have access to the tool we have

00:13:34,920 --> 00:13:39,450
a handy dandy tutorial for you - step by

00:13:37,680 --> 00:13:43,680
step set it up

00:13:39,450 --> 00:13:46,230
the rep oh yeah there's some good fields

00:13:43,680 --> 00:13:51,680
first issues so if you want to program

00:13:46,230 --> 00:13:54,410
some rust for the NYX ecosystem and heck

00:13:51,680 --> 00:14:00,260
Oktoberfest is still going on right so

00:13:54,410 --> 00:14:00,260
and feel free to join the phenol channel

00:14:00,440 --> 00:14:07,530
we have a few things planned for the

00:14:03,300 --> 00:14:12,240
next few weeks and months first up our

00:14:07,530 --> 00:14:14,010
services so now that the the base

00:14:12,240 --> 00:14:17,430
integration is already working we want

00:14:14,010 --> 00:14:19,800
to think further of like how can you get

00:14:17,430 --> 00:14:22,590
next to integrate into your projects

00:14:19,800 --> 00:14:24,600
better for example if you have some web

00:14:22,590 --> 00:14:26,850
project you usually need need a database

00:14:24,600 --> 00:14:29,640
server and you need some I don't know

00:14:26,850 --> 00:14:31,770
micro services running annex can provide

00:14:29,640 --> 00:14:34,110
you the environment but NYX can't start

00:14:31,770 --> 00:14:36,120
the services for you so right now you

00:14:34,110 --> 00:14:38,070
have to write their scripts and then you

00:14:36,120 --> 00:14:40,430
have to care about the lifetime cycle of

00:14:38,070 --> 00:14:43,080
these services so the idea is that you

00:14:40,430 --> 00:14:45,410
that LOI should have a sub command which

00:14:43,080 --> 00:14:47,970
just takes care of that for you and

00:14:45,410 --> 00:14:51,870
we'll still thinking about how to design

00:14:47,970 --> 00:14:55,740
that we want to add some linters to your

00:14:51,870 --> 00:14:58,800
next project so a common problem is you

00:14:55,740 --> 00:15:00,720
see this line here which is basically

00:14:58,800 --> 00:15:02,520
always wrong because what that does is

00:15:00,720 --> 00:15:04,170
it copies the whole directory you're

00:15:02,520 --> 00:15:06,270
referencing into the store before it

00:15:04,170 --> 00:15:09,330
does anything and if that directory is

00:15:06,270 --> 00:15:11,400
your current source directory with all

00:15:09,330 --> 00:15:13,050
the tobacco outputs in it then it's

00:15:11,400 --> 00:15:15,570
going to change every time basically you

00:15:13,050 --> 00:15:18,120
run nicks or next shell so it will have

00:15:15,570 --> 00:15:20,520
to copy everything and so you have to

00:15:18,120 --> 00:15:21,660
filter those and you want Lorre to be

00:15:20,520 --> 00:15:24,780
able to warn you if you do something

00:15:21,660 --> 00:15:28,490
stupid like that so that new new

00:15:24,780 --> 00:15:28,490
programs don't run into this anymore

00:15:28,620 --> 00:15:34,200
and of course that entails that we want

00:15:31,560 --> 00:15:37,370
to be able to write these sauce filters

00:15:34,200 --> 00:15:40,830
and make them easily debuggable as well

00:15:37,370 --> 00:15:43,380
and finally we want to upstream some of

00:15:40,830 --> 00:15:45,600
our changes into nick's proper because

00:15:43,380 --> 00:15:47,790
it's important that other people can use

00:15:45,600 --> 00:15:50,360
these tools as well right now we're just

00:15:47,790 --> 00:15:53,449
hacking around to nix and

00:15:50,360 --> 00:15:55,069
like Knicks built - VV and parsing the

00:15:53,449 --> 00:15:56,929
output like probably other people are

00:15:55,069 --> 00:16:00,499
doing for their tools but what we really

00:15:56,929 --> 00:16:02,029
nice of Nyx can tell you what it's doing

00:16:00,499 --> 00:16:08,029
in the background while it's evaluating

00:16:02,029 --> 00:16:10,699
or why it's building something cool so

00:16:08,029 --> 00:16:12,559
in conclusion what Laurie gives you it

00:16:10,699 --> 00:16:13,279
gives you instant environments for your

00:16:12,559 --> 00:16:16,519
projects

00:16:13,279 --> 00:16:19,910
last state you you left the project you

00:16:16,519 --> 00:16:22,519
enter again and it's there again it also

00:16:19,910 --> 00:16:25,670
sets up GC rules for your projects you

00:16:22,519 --> 00:16:26,959
never lose it when you GC it watches

00:16:25,670 --> 00:16:29,959
dependencies in the background so

00:16:26,959 --> 00:16:35,269
basically next files next packages check

00:16:29,959 --> 00:16:37,819
out JSON files everything and auto auto

00:16:35,269 --> 00:16:39,619
builds on the background and it has nice

00:16:37,819 --> 00:16:50,170
editor support without blocking the

00:16:39,619 --> 00:16:50,170
editor even Emacs yeah thanks

00:16:50,960 --> 00:17:05,690
[Applause]

00:16:58,480 --> 00:17:08,060
any questions or input whatever maybe

00:17:05,690 --> 00:17:15,550
maybe we can do a show of hands who here

00:17:08,060 --> 00:17:15,550
uses lorry already okay that's potential

00:17:15,850 --> 00:17:23,060
I was wondering is it necessary to

00:17:20,330 --> 00:17:24,890
install lorry first okay now ship it

00:17:23,060 --> 00:17:28,340
with the shell dot next file and just

00:17:24,890 --> 00:17:31,670
have people use Nick shell and under the

00:17:28,340 --> 00:17:36,890
hood kind of use this lorry feature like

00:17:31,670 --> 00:17:39,620
if the bootstrapping of the tool I think

00:17:36,890 --> 00:17:41,780
you can actually I haven't thought about

00:17:39,620 --> 00:17:43,550
this but it should be possible I mean

00:17:41,780 --> 00:17:45,140
you have to setup problem where in the

00:17:43,550 --> 00:17:47,420
bootstrapping problem but once you have

00:17:45,140 --> 00:17:49,580
your lorry environment you're gonna have

00:17:47,420 --> 00:17:52,100
lorry in the project right so the next

00:17:49,580 --> 00:17:53,660
time you CD into the project when you

00:17:52,100 --> 00:17:56,330
have different setup you will have lorry

00:17:53,660 --> 00:18:06,140
in the environment again and can use

00:17:56,330 --> 00:18:09,380
that so the way I use it I don't I don't

00:18:06,140 --> 00:18:12,470
really change the n VAR c of the project

00:18:09,380 --> 00:18:15,440
to use Nick's I prefer to change that

00:18:12,470 --> 00:18:17,900
tier and my dear and VAR c for my system

00:18:15,440 --> 00:18:23,180
to use lorry and that we're not forcing

00:18:17,900 --> 00:18:24,170
and want to use it so there's a there's

00:18:23,180 --> 00:18:27,830
a system-wide

00:18:24,170 --> 00:18:31,790
and foresee father yeah

00:18:27,830 --> 00:18:33,830
so instead of like forcing it to use the

00:18:31,790 --> 00:18:37,130
project i like to make the choice i just

00:18:33,830 --> 00:18:40,910
leave my project and mercy with USENIX

00:18:37,130 --> 00:18:46,130
and I only change my own D and C file to

00:18:40,910 --> 00:18:50,540
use lorry okay that said this I do have

00:18:46,130 --> 00:18:54,140
a question so by the way thanks for for

00:18:50,540 --> 00:18:57,020
Laurie it's a great like product demon

00:18:54,140 --> 00:19:00,830
to whatever I was wondering whether

00:18:57,020 --> 00:19:02,510
there is a way to like tail while it's

00:19:00,830 --> 00:19:05,270
building in a background so that I can

00:19:02,510 --> 00:19:07,220
Brian oh like make my prom change while

00:19:05,270 --> 00:19:08,840
it's still building so that I know

00:19:07,220 --> 00:19:10,490
because right now it's like there's like

00:19:08,840 --> 00:19:13,250
press enter enter enter enter it's

00:19:10,490 --> 00:19:14,900
actually something we want to do next to

00:19:13,250 --> 00:19:17,090
have a stream of information you can

00:19:14,900 --> 00:19:18,950
integrate into your window manager or

00:19:17,090 --> 00:19:21,110
your email or whatever so coming up so

00:19:18,950 --> 00:19:23,000
just printing like line based Jason

00:19:21,110 --> 00:19:25,580
output of what is going on at the moment

00:19:23,000 --> 00:19:27,380
and you can filter that and integrate it

00:19:25,580 --> 00:19:29,980
into your system if you want to sweet

00:19:27,380 --> 00:19:29,980
cool thanks

00:19:42,540 --> 00:19:51,890
it's not like a question but maybe a

00:19:45,480 --> 00:19:54,660
proposal to push Laurie as a core Knicks

00:19:51,890 --> 00:19:57,270
yeah I think that you can't match it to

00:19:54,660 --> 00:20:01,380
Knicks code repo but you may provide

00:19:57,270 --> 00:20:04,170
Laurie as a Knicks plugin so we can

00:20:01,380 --> 00:20:06,900
distribute Knicks with plugins and

00:20:04,170 --> 00:20:09,510
Laurie's ones with plugins and it were

00:20:06,900 --> 00:20:11,520
able to do things so I personally had

00:20:09,510 --> 00:20:13,800
very bad experiences with Knicks plugins

00:20:11,520 --> 00:20:16,890
because you have the very very bad

00:20:13,800 --> 00:20:18,450
bootstrapping problem there like when

00:20:16,890 --> 00:20:23,340
you have a Knicks without a plug-in and

00:20:18,450 --> 00:20:25,560
then getting the plug-in and but I don't

00:20:23,340 --> 00:20:28,050
see the problem why we why you wouldn't

00:20:25,560 --> 00:20:31,770
install it like a normal program and use

00:20:28,050 --> 00:20:33,390
it I have related comments I was

00:20:31,770 --> 00:20:36,360
thinking about something similar a year

00:20:33,390 --> 00:20:38,940
ago and I actually started implementing

00:20:36,360 --> 00:20:42,020
it as an expla ginn but it turns out

00:20:38,940 --> 00:20:44,460
that Knicks plugins cannot register

00:20:42,020 --> 00:20:46,440
comments additional like they're meant

00:20:44,460 --> 00:20:48,720
to but this code doesn't work and I have

00:20:46,440 --> 00:20:51,330
APR open since December that fixes this

00:20:48,720 --> 00:20:53,640
so if someone can help me get it merged

00:20:51,330 --> 00:20:55,860
into Knicks that would be great and then

00:20:53,640 --> 00:20:57,750
we would have a lot of amazing Knicks

00:20:55,860 --> 00:21:00,410
plugins with comments and stuff

00:20:57,750 --> 00:21:00,410
Thanks

00:21:13,140 --> 00:21:18,820
when you switch branches and Laurie

00:21:15,490 --> 00:21:21,640
adapts the environment to the possibly

00:21:18,820 --> 00:21:25,270
new required packages how do you keep

00:21:21,640 --> 00:21:27,370
track of what GC roots you you still

00:21:25,270 --> 00:21:29,710
need or do you have some sort of UI of

00:21:27,370 --> 00:21:31,419
listing those and maybe saying okay this

00:21:29,710 --> 00:21:34,000
branch has been merged so I won't ever

00:21:31,419 --> 00:21:36,549
be needing this anymore and if so do you

00:21:34,000 --> 00:21:38,230
need use the the branch name somewhere

00:21:36,549 --> 00:21:40,929
so that you can recognize that it sold

00:21:38,230 --> 00:21:42,909
so right now it only basically it has it

00:21:40,929 --> 00:21:45,700
was one place for each repository and it

00:21:42,909 --> 00:21:48,789
overrides the GC huge every time you

00:21:45,700 --> 00:21:50,559
switch the environment but we could add

00:21:48,789 --> 00:21:52,600
something I mean this is this is all

00:21:50,559 --> 00:21:54,190
experimenting right we're just trying to

00:21:52,600 --> 00:21:56,320
experiment with what we got and see

00:21:54,190 --> 00:21:58,600
what's nice for the users so if you have

00:21:56,320 --> 00:22:00,700
any ideas of how to do that because like

00:21:58,600 --> 00:22:04,840
GC root management is a really hard

00:22:00,700 --> 00:22:08,620
problem that we really should focus on

00:22:04,840 --> 00:22:11,919
on solving that the user can say which

00:22:08,620 --> 00:22:15,429
ones which the person dependency is they

00:22:11,919 --> 00:22:17,530
want to keep and which not I can make a

00:22:15,429 --> 00:22:19,600
suggestion I think it would be great if

00:22:17,530 --> 00:22:23,200
you sort of keep a log where you say why

00:22:19,600 --> 00:22:25,270
a GC would exists so that you just say

00:22:23,200 --> 00:22:27,850
because it's a hash a pretty unique and

00:22:25,270 --> 00:22:30,549
then have a text file somewhere staying

00:22:27,850 --> 00:22:32,799
this log was this this GC which was

00:22:30,549 --> 00:22:35,409
initiated because of this command at

00:22:32,799 --> 00:22:37,539
this date so then you have some context

00:22:35,409 --> 00:22:40,390
by which you can remember if it's still

00:22:37,539 --> 00:22:41,860
needed or not so if everybody anybody

00:22:40,390 --> 00:22:44,140
here wants to write a separate tool

00:22:41,860 --> 00:22:46,570
which manages the GC route with like an

00:22:44,140 --> 00:22:49,090
interface that we can use then we just

00:22:46,570 --> 00:22:51,490
add support for that because that's

00:22:49,090 --> 00:22:53,650
something is completely orthogonal I

00:22:51,490 --> 00:22:55,840
think and that's required by a lot of

00:22:53,650 --> 00:22:58,480
project that you projects that USENIX

00:22:55,840 --> 00:23:02,580
that would be a great small project to

00:22:58,480 --> 00:23:02,580
do or yeah

00:23:13,930 --> 00:23:19,750
does it have something like update all

00:23:16,210 --> 00:23:23,980
environments that it knows about sorry

00:23:19,750 --> 00:23:26,530
which kind of in violence like you said

00:23:23,980 --> 00:23:28,630
that it could eat already tracks GC

00:23:26,530 --> 00:23:30,250
roots for all of those projects that

00:23:28,630 --> 00:23:34,000
you're working on does it have something

00:23:30,250 --> 00:23:36,340
like update all update to update all of

00:23:34,000 --> 00:23:38,140
them like rebuild oh oh and I do

00:23:36,340 --> 00:23:39,610
channel update no we don't have

00:23:38,140 --> 00:23:41,320
something like that currently but it

00:23:39,610 --> 00:23:46,120
shouldn't be hard to add if you need it

00:23:41,320 --> 00:23:48,400
right but does it track the directories

00:23:46,120 --> 00:23:51,010
themselves not just the GC roots so we

00:23:48,400 --> 00:23:52,960
have a demon part of lorry which

00:23:51,010 --> 00:23:57,850
basically manages all the watch shows

00:23:52,960 --> 00:24:00,580
and which has a socket where other lorry

00:23:57,850 --> 00:24:02,830
two is communicate with it and basically

00:24:00,580 --> 00:24:04,840
when when lorry is running it will track

00:24:02,830 --> 00:24:07,900
which projects it's watching at the

00:24:04,840 --> 00:24:11,740
moment but there's no global stateful

00:24:07,900 --> 00:24:14,830
and file somewhere which has a state of

00:24:11,740 --> 00:24:18,400
which projects there exists like no

00:24:14,830 --> 00:24:20,650
database when you see the into the

00:24:18,400 --> 00:24:22,300
project it would check that right and

00:24:20,650 --> 00:24:24,370
there's a in the cache directory there's

00:24:22,300 --> 00:24:29,050
basically a hash of the path of the

00:24:24,370 --> 00:24:31,300
project is it possible to run it without

00:24:29,050 --> 00:24:34,210
the daemon part is it possible to run

00:24:31,300 --> 00:24:36,610
Laurie without the daemon part there's a

00:24:34,210 --> 00:24:39,090
command called lorry watch - - once

00:24:36,610 --> 00:24:43,810
which only runs it for once

00:24:39,090 --> 00:24:46,660
and it still has yeah if you use like if

00:24:43,810 --> 00:24:48,250
you use it with Tyrion it has the

00:24:46,660 --> 00:24:51,970
property that it will always switch to

00:24:48,250 --> 00:24:54,060
the last time you ran this command thank

00:24:51,970 --> 00:24:54,060
you

00:25:04,090 --> 00:25:06,810
thank you

00:25:07,010 --> 00:25:11,920
[Music]

00:25:08,710 --> 00:25:11,920

YouTube URL: https://www.youtube.com/watch?v=WtbW0N8Cww4


