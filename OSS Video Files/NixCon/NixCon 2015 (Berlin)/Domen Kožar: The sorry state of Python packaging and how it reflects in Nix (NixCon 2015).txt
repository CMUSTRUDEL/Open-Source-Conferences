Title: Domen KoÅ¾ar: The sorry state of Python packaging and how it reflects in Nix (NixCon 2015)
Publication date: 2020-10-29
Playlist: NixCon 2015 (Berlin)
Description: 
	
Captions: 
	00:00:05,120 --> 00:00:10,480
okay welcome back

00:00:06,480 --> 00:00:14,160
second talk um this is stillman kuzar

00:00:10,480 --> 00:00:16,240
he's since about 2009 into packaging

00:00:14,160 --> 00:00:17,520
i think in google summer of code project

00:00:16,240 --> 00:00:20,320
get introduced

00:00:17,520 --> 00:00:21,359
working in the gentoo tooling since

00:00:20,320 --> 00:00:23,680
about eight years

00:00:21,359 --> 00:00:25,199
in the pyson community since about two

00:00:23,680 --> 00:00:28,240
years contributing to nix

00:00:25,199 --> 00:00:30,000
and he's talking today about the state

00:00:28,240 --> 00:00:34,079
of pyson packaging and how that

00:00:30,000 --> 00:00:37,200
reflects the mix hey everyone

00:00:34,079 --> 00:00:40,079
i hope you have stretched and got coffee

00:00:37,200 --> 00:00:40,879
near a week i'm gonna talk a little bit

00:00:40,079 --> 00:00:43,840
about how

00:00:40,879 --> 00:00:45,840
terrible packaging is in python and how

00:00:43,840 --> 00:00:49,920
we're slowly fixing that

00:00:45,840 --> 00:00:51,760
in nicks and in python community um

00:00:49,920 --> 00:00:53,039
i assume you know a little bit of nyx i

00:00:51,760 --> 00:00:56,399
assume you know

00:00:53,039 --> 00:00:56,399
almost nothing about python

00:00:56,480 --> 00:00:59,920
oh and if you have any questions during

00:00:58,320 --> 00:01:02,399
the talk please ask um

00:00:59,920 --> 00:01:03,199
it's easier than at the end so just

00:01:02,399 --> 00:01:06,240
raise your hand and

00:01:03,199 --> 00:01:08,080
i'll repeat the question so um so

00:01:06,240 --> 00:01:10,880
for just a bit of outline we go through

00:01:08,080 --> 00:01:13,040
history how setup.pie works

00:01:10,880 --> 00:01:15,119
what are the caveats and packaging how

00:01:13,040 --> 00:01:17,360
build python package works

00:01:15,119 --> 00:01:18,400
then what the caveats and nyx and you

00:01:17,360 --> 00:01:20,880
know what's

00:01:18,400 --> 00:01:22,880
next from you know from my perspective

00:01:20,880 --> 00:01:26,560
um so

00:01:22,880 --> 00:01:30,720
so a bit about history um

00:01:26,560 --> 00:01:34,079
there was these details and still is

00:01:30,720 --> 00:01:36,000
and this is how the packaging looks like

00:01:34,079 --> 00:01:37,759
in this details you have this

00:01:36,000 --> 00:01:39,600
setup function that does everything you

00:01:37,759 --> 00:01:41,759
can think of

00:01:39,600 --> 00:01:43,680
and you tell it submit the data and what

00:01:41,759 --> 00:01:46,960
are the modules

00:01:43,680 --> 00:01:50,479
and then you can install that

00:01:46,960 --> 00:01:52,880
in python and it will store it in

00:01:50,479 --> 00:01:55,280
in a special path more about that later

00:01:52,880 --> 00:01:57,520
you can build cx tangents

00:01:55,280 --> 00:01:59,119
uh you can create a tower ball so it

00:01:57,520 --> 00:02:01,840
does everything of course

00:01:59,119 --> 00:02:03,040
um so so this details was very very

00:02:01,840 --> 00:02:05,360
basic it was

00:02:03,040 --> 00:02:06,079
mainly meant for building and installing

00:02:05,360 --> 00:02:08,560
stuff

00:02:06,079 --> 00:02:09,520
but it doesn't know about you know um

00:02:08,560 --> 00:02:11,680
downloading

00:02:09,520 --> 00:02:13,520
um dependencies and it doesn't know

00:02:11,680 --> 00:02:15,520
about dependencies at all

00:02:13,520 --> 00:02:16,800
um there is no way to reproduce any

00:02:15,520 --> 00:02:20,080
installation you're just

00:02:16,800 --> 00:02:21,360
like imperative um commands and you know

00:02:20,080 --> 00:02:23,920
hope you

00:02:21,360 --> 00:02:26,800
hope everything works and it was

00:02:23,920 --> 00:02:30,000
included in into python in 2000

00:02:26,800 --> 00:02:32,800
um so a long time ago

00:02:30,000 --> 00:02:34,160
and then setup tools came four years

00:02:32,800 --> 00:02:36,879
later

00:02:34,160 --> 00:02:37,200
and it's using the same interface in

00:02:36,879 --> 00:02:39,519
fact

00:02:37,200 --> 00:02:41,440
it monkey patches these tilts in order

00:02:39,519 --> 00:02:44,480
to to provide that support

00:02:41,440 --> 00:02:47,280
so um and you know you have this easy

00:02:44,480 --> 00:02:49,280
install command that will fetch from the

00:02:47,280 --> 00:02:52,160
python packaging index that's the

00:02:49,280 --> 00:02:54,480
central repository for packages

00:02:52,160 --> 00:02:55,760
you have this binary format which is a

00:02:54,480 --> 00:02:57,599
zip file and you

00:02:55,760 --> 00:02:59,840
you know you compile all the six

00:02:57,599 --> 00:03:03,280
dungeons and it zips them up

00:02:59,840 --> 00:03:05,200
um and you know you you

00:03:03,280 --> 00:03:06,879
and you can also use all the these

00:03:05,200 --> 00:03:09,360
details commands but it's

00:03:06,879 --> 00:03:11,599
monkey patches this detail so it's even

00:03:09,360 --> 00:03:14,080
you know the situation is even worse

00:03:11,599 --> 00:03:15,280
it doesn't support uninstall it's the

00:03:14,080 --> 00:03:18,000
worst code i've read

00:03:15,280 --> 00:03:19,599
at least in 2009 i haven't touched it

00:03:18,000 --> 00:03:23,200
since because i don't want to

00:03:19,599 --> 00:03:24,080
um and and in 2009 there was no release

00:03:23,200 --> 00:03:25,840
for for years

00:03:24,080 --> 00:03:27,920
um so that was that was pretty

00:03:25,840 --> 00:03:29,920
depressing area in packaging

00:03:27,920 --> 00:03:30,959
and and still we we do everything from

00:03:29,920 --> 00:03:33,120
setup.pi

00:03:30,959 --> 00:03:34,000
and it handles you know the state of the

00:03:33,120 --> 00:03:37,519
world

00:03:34,000 --> 00:03:39,599
um so you know just just to show you how

00:03:37,519 --> 00:03:41,599
bad this is and and was

00:03:39,599 --> 00:03:42,959
um is installed actually for each

00:03:41,599 --> 00:03:45,440
dependencies

00:03:42,959 --> 00:03:46,000
it would fetch the description and then

00:03:45,440 --> 00:03:47,599
for every

00:03:46,000 --> 00:03:49,280
link that was in the description it

00:03:47,599 --> 00:03:51,440
would go to that page

00:03:49,280 --> 00:03:53,599
and find the possible turbo release so

00:03:51,440 --> 00:03:55,680
no not only going to the packaging index

00:03:53,599 --> 00:03:58,959
it would try to crawl the internet for

00:03:55,680 --> 00:04:00,640
more releases which is like what

00:03:58,959 --> 00:04:02,159
you know the install times were really

00:04:00,640 --> 00:04:04,000
terrible and and

00:04:02,159 --> 00:04:06,400
you know you later see that this was

00:04:04,000 --> 00:04:08,640
fixed only in 2014

00:04:06,400 --> 00:04:09,599
and there was you know a lot of politics

00:04:08,640 --> 00:04:10,799
around whether

00:04:09,599 --> 00:04:13,280
you know this kind of backwards

00:04:10,799 --> 00:04:14,959
compatibility should be kept or not so

00:04:13,280 --> 00:04:16,720
this is why everything is going slow

00:04:14,959 --> 00:04:18,000
because you know once you give something

00:04:16,720 --> 00:04:20,320
to the people they

00:04:18,000 --> 00:04:22,240
don't want it you they don't want it

00:04:20,320 --> 00:04:25,840
that you take that from them

00:04:22,240 --> 00:04:27,520
um so then in 2007 i baking which is not

00:04:25,840 --> 00:04:29,600
working from mozilla

00:04:27,520 --> 00:04:31,280
um he wrote a virtual end which is kind

00:04:29,600 --> 00:04:34,080
of like nick shell for python

00:04:31,280 --> 00:04:34,720
it's siblings python into a you know a

00:04:34,080 --> 00:04:36,880
folder

00:04:34,720 --> 00:04:38,479
test in this case and then you can

00:04:36,880 --> 00:04:41,680
install the python packages

00:04:38,479 --> 00:04:44,560
in isolated way um

00:04:41,680 --> 00:04:46,160
and he wrote pip which is kind of a fork

00:04:44,560 --> 00:04:48,800
of easy install

00:04:46,160 --> 00:04:50,560
um which was a really nice move because

00:04:48,800 --> 00:04:52,320
you want the installer software to be

00:04:50,560 --> 00:04:54,720
separated from the build

00:04:52,320 --> 00:04:56,240
oh in in languages and and you know it

00:04:54,720 --> 00:04:59,919
has a nice interface

00:04:56,240 --> 00:05:02,840
it has like phases

00:04:59,919 --> 00:05:04,000
um it can freeze versions of

00:05:02,840 --> 00:05:08,400
independencies

00:05:04,000 --> 00:05:11,840
and so on um and then tarexiad in 2008

00:05:08,400 --> 00:05:11,840
which also now works for mozilla

00:05:11,919 --> 00:05:15,039
basically said okay we have to fix this

00:05:14,080 --> 00:05:17,919
and you know

00:05:15,039 --> 00:05:19,199
again after lots of politics he forked

00:05:17,919 --> 00:05:23,199
set up tools

00:05:19,199 --> 00:05:23,759
and we distribute tried to document

00:05:23,199 --> 00:05:27,120
stuff

00:05:23,759 --> 00:05:29,199
and and improve that code base but he

00:05:27,120 --> 00:05:31,039
and then the same year figured out the

00:05:29,199 --> 00:05:33,600
only ways to rewrite

00:05:31,039 --> 00:05:35,280
um and and finally i think this is at

00:05:33,600 --> 00:05:37,520
least as far as i know the first

00:05:35,280 --> 00:05:38,400
um actual implementation of static

00:05:37,520 --> 00:05:42,080
metadata

00:05:38,400 --> 00:05:45,840
in python using setup.cfg file

00:05:42,080 --> 00:05:47,759
um so you would have a static file that

00:05:45,840 --> 00:05:48,639
you know can be parsed and stored and so

00:05:47,759 --> 00:05:52,680
on instead of

00:05:48,639 --> 00:05:56,080
evaluating setup i every time um but in

00:05:52,680 --> 00:05:58,240
2012 he pretty much stepped down

00:05:56,080 --> 00:05:59,840
um that you know the there is a long

00:05:58,240 --> 00:06:00,800
story around that and it's not really

00:05:59,840 --> 00:06:02,960
that important but

00:06:00,800 --> 00:06:04,479
the the end result is that this

00:06:02,960 --> 00:06:07,199
tutorials was pretty much

00:06:04,479 --> 00:06:09,039
left alone and distribute at least got

00:06:07,199 --> 00:06:11,280
merged backed into setup tools

00:06:09,039 --> 00:06:13,440
um so people are very confused we had

00:06:11,280 --> 00:06:15,120
like setup tools distributes the

00:06:13,440 --> 00:06:16,160
institute's two and then that merges

00:06:15,120 --> 00:06:19,840
back and forth

00:06:16,160 --> 00:06:22,720
so a lot of effort and and you know

00:06:19,840 --> 00:06:23,759
some results but still not not not that

00:06:22,720 --> 00:06:25,919
good

00:06:23,759 --> 00:06:27,759
um and then that was the area where

00:06:25,919 --> 00:06:29,360
people actually started to talk and they

00:06:27,759 --> 00:06:31,759
said okay now we have to

00:06:29,360 --> 00:06:33,360
start with specification first and then

00:06:31,759 --> 00:06:34,560
discuss things before we go and

00:06:33,360 --> 00:06:37,680
implement that

00:06:34,560 --> 00:06:38,319
so um in 2012 that's where that's when

00:06:37,680 --> 00:06:41,360
it happened

00:06:38,319 --> 00:06:41,759
and then after 2012 a lot of steps came

00:06:41,360 --> 00:06:43,840
and

00:06:41,759 --> 00:06:45,199
perhaps our python enhancement proposals

00:06:43,840 --> 00:06:46,319
they're pretty much how to improve

00:06:45,199 --> 00:06:47,919
python

00:06:46,319 --> 00:06:49,440
um so there's like a lot of stuff that

00:06:47,919 --> 00:06:51,360
came after that and

00:06:49,440 --> 00:06:53,599
you know we're really thankful to all

00:06:51,360 --> 00:06:56,880
the the people that are working on that

00:06:53,599 --> 00:06:59,599
um and now it's a community effort

00:06:56,880 --> 00:07:00,560
um but you see there the metadata 2-0

00:06:59,599 --> 00:07:03,120
that's the static

00:07:00,560 --> 00:07:05,120
metadata format is still a draft and all

00:07:03,120 --> 00:07:08,000
the peps that follows are pretty much

00:07:05,120 --> 00:07:08,800
like specific parts of that metadata so

00:07:08,000 --> 00:07:10,800
it's going

00:07:08,800 --> 00:07:12,319
kind of slow but that's how we want it

00:07:10,800 --> 00:07:14,479
to be we don't you know we've we've

00:07:12,319 --> 00:07:18,160
tried to rush it and it failed so

00:07:14,479 --> 00:07:21,919
that's the only way um

00:07:18,160 --> 00:07:23,680
so yeah setup pi um this is you know a

00:07:21,919 --> 00:07:27,599
typical

00:07:23,680 --> 00:07:30,319
uh alcohol of that function um

00:07:27,599 --> 00:07:30,880
you you know there's not much much here

00:07:30,319 --> 00:07:33,840
to

00:07:30,880 --> 00:07:34,160
i'll talk about specific parts later but

00:07:33,840 --> 00:07:36,000
um

00:07:34,160 --> 00:07:37,759
you know you have like entry points at

00:07:36,000 --> 00:07:40,080
the bottom where you specified what

00:07:37,759 --> 00:07:40,800
what executables to generate you have

00:07:40,080 --> 00:07:43,840
different

00:07:40,800 --> 00:07:46,560
kind of dependencies some metadata and

00:07:43,840 --> 00:07:50,240
that's pretty much it

00:07:46,560 --> 00:07:51,360
um so then python actually how how it

00:07:50,240 --> 00:07:54,479
finds the packages

00:07:51,360 --> 00:07:58,160
is using the python path and this is

00:07:54,479 --> 00:08:00,639
an example of the pbr package

00:07:58,160 --> 00:08:03,919
you see it all depends on setup tools

00:08:00,639 --> 00:08:03,919
and on python of course

00:08:04,560 --> 00:08:07,759
and then if you actually run the python

00:08:07,520 --> 00:08:11,039
and

00:08:07,759 --> 00:08:12,400
import cspat that's like what's python

00:08:11,039 --> 00:08:14,400
interprets from that

00:08:12,400 --> 00:08:15,520
python path and you'll see it adds a

00:08:14,400 --> 00:08:18,479
bunch of python

00:08:15,520 --> 00:08:20,160
related paths um and at the top you see

00:08:18,479 --> 00:08:22,800
it's an empty string so

00:08:20,160 --> 00:08:24,400
um that's the current directory and it's

00:08:22,800 --> 00:08:26,080
so when you import a package it goes

00:08:24,400 --> 00:08:26,960
from the top from the bottom and tries

00:08:26,080 --> 00:08:30,400
to find a

00:08:26,960 --> 00:08:30,960
a module or a folder a file or a folder

00:08:30,400 --> 00:08:34,240
and

00:08:30,960 --> 00:08:36,560
run that um so it's it's that's very

00:08:34,240 --> 00:08:39,200
simple

00:08:36,560 --> 00:08:40,800
but you know so there are a lot of

00:08:39,200 --> 00:08:42,479
things that are bad i'll just

00:08:40,800 --> 00:08:44,080
talk of some of those we could have a

00:08:42,479 --> 00:08:47,360
few hour talk um

00:08:44,080 --> 00:08:50,160
just on this topic but you know um

00:08:47,360 --> 00:08:52,000
so we have three different basically

00:08:50,160 --> 00:08:54,320
graphs or dependencies

00:08:52,000 --> 00:08:55,279
setup requires build time runtime and

00:08:54,320 --> 00:08:57,760
optional

00:08:55,279 --> 00:08:59,519
and you see there is like even the first

00:08:57,760 --> 00:08:59,760
starters even the names sometimes they

00:08:59,519 --> 00:09:02,959
have

00:08:59,760 --> 00:09:04,399
s at the end and sometimes not so yeah i

00:09:02,959 --> 00:09:08,880
always miss that

00:09:04,399 --> 00:09:11,040
um and and you know another thing is

00:09:08,880 --> 00:09:12,560
the extras include the testing but there

00:09:11,040 --> 00:09:14,480
is no like convention what

00:09:12,560 --> 00:09:16,240
the testing set should be called and

00:09:14,480 --> 00:09:17,920
some people call it tests some people

00:09:16,240 --> 00:09:18,720
call it testing and so on these are all

00:09:17,920 --> 00:09:21,920
the things that

00:09:18,720 --> 00:09:22,880
make it really hard to parse this and we

00:09:21,920 --> 00:09:25,920
have three

00:09:22,880 --> 00:09:28,720
separate uh directed so cyclic graphs so

00:09:25,920 --> 00:09:31,040
i'll talk about why that's hard and next

00:09:28,720 --> 00:09:34,240
a bit later

00:09:31,040 --> 00:09:37,680
so we have in python supports on

00:09:34,240 --> 00:09:39,519
circular dependencies of course um

00:09:37,680 --> 00:09:41,440
and and that's pretty much pick up

00:09:39,519 --> 00:09:41,920
because pip the installer that everyone

00:09:41,440 --> 00:09:43,839
uses

00:09:41,920 --> 00:09:45,360
it runs in phases so it will first

00:09:43,839 --> 00:09:47,519
download everything

00:09:45,360 --> 00:09:49,040
and then it will run on all the packages

00:09:47,519 --> 00:09:50,000
the build command and then on all the

00:09:49,040 --> 00:09:52,480
packages install

00:09:50,000 --> 00:09:53,279
command and then it doesn't run tests at

00:09:52,480 --> 00:09:55,519
all

00:09:53,279 --> 00:09:56,880
um so our phases are are for the whole

00:09:55,519 --> 00:09:58,480
package set

00:09:56,880 --> 00:10:00,880
um and that's why it can do these kind

00:09:58,480 --> 00:10:02,959
of things but you know in in nix this is

00:10:00,880 --> 00:10:04,240
problematic because we install packages

00:10:02,959 --> 00:10:08,079
as a one unit

00:10:04,240 --> 00:10:11,760
and build it on something on one unit um

00:10:08,079 --> 00:10:14,399
and and and there are not easy ways to

00:10:11,760 --> 00:10:17,519
go around circle dependencies um

00:10:14,399 --> 00:10:19,440
that one is you know to bootstrap

00:10:17,519 --> 00:10:21,200
something like we do for for you know

00:10:19,440 --> 00:10:21,680
the standard environment and something

00:10:21,200 --> 00:10:24,560
we will

00:10:21,680 --> 00:10:25,279
we have to do for pip and similar and

00:10:24,560 --> 00:10:27,440
other ways

00:10:25,279 --> 00:10:29,279
is to do this kind of mixed stuff like

00:10:27,440 --> 00:10:31,600
you know b depends on a but

00:10:29,279 --> 00:10:32,959
you know in this case it doesn't depend

00:10:31,600 --> 00:10:36,640
back on b

00:10:32,959 --> 00:10:38,880
and so on um so

00:10:36,640 --> 00:10:40,880
so if if there is one thing i want you

00:10:38,880 --> 00:10:43,519
to remember from this stock it's this

00:10:40,880 --> 00:10:45,040
in python tests are the single source of

00:10:43,519 --> 00:10:46,560
truth if you don't have

00:10:45,040 --> 00:10:47,760
if you don't run tests you don't know

00:10:46,560 --> 00:10:50,079
what you're packaged you know you're

00:10:47,760 --> 00:10:52,240
packaged a bunch of things you never

00:10:50,079 --> 00:10:53,839
really ran and you know because

00:10:52,240 --> 00:10:56,560
everything is at run time you know

00:10:53,839 --> 00:10:57,839
even our packaging um the tests are the

00:10:56,560 --> 00:11:00,399
only way to really test

00:10:57,839 --> 00:11:03,360
something happen um so you know when you

00:11:00,399 --> 00:11:05,920
package python stuff always

00:11:03,360 --> 00:11:08,000
the most of the effort goes into making

00:11:05,920 --> 00:11:08,800
sure that these tests actually execute

00:11:08,000 --> 00:11:11,120
and

00:11:08,800 --> 00:11:11,839
um if a single test fails we don't we

00:11:11,120 --> 00:11:13,519
don't

00:11:11,839 --> 00:11:15,600
want to disable the whole test here we

00:11:13,519 --> 00:11:17,600
want to disable that test and leave

00:11:15,600 --> 00:11:20,640
others be there

00:11:17,600 --> 00:11:23,200
so but a lot of times the servers this

00:11:20,640 --> 00:11:26,160
doesn't come with tests

00:11:23,200 --> 00:11:27,360
a lot of times people use mocking in

00:11:26,160 --> 00:11:29,519
python so

00:11:27,360 --> 00:11:31,360
if you upgrade a dependency there is no

00:11:29,519 --> 00:11:33,200
guarantee that it will you know work

00:11:31,360 --> 00:11:35,120
even though we have tests

00:11:33,200 --> 00:11:37,839
and you know we will try to do

00:11:35,120 --> 00:11:40,399
everything in tests and and

00:11:37,839 --> 00:11:42,160
you know it's a lot of effort as i said

00:11:40,399 --> 00:11:44,800
goes into fixing those things

00:11:42,160 --> 00:11:46,399
um you know you people have even do

00:11:44,800 --> 00:11:47,760
things like you know run this command

00:11:46,399 --> 00:11:49,440
and it should succeed in 200

00:11:47,760 --> 00:11:50,160
milliseconds but when you run these

00:11:49,440 --> 00:11:52,880
things on

00:11:50,160 --> 00:11:54,800
hydra you know that because of the io

00:11:52,880 --> 00:11:56,320
that's that's not a guarantee so a lot

00:11:54,800 --> 00:11:59,519
of time we have to decide

00:11:56,320 --> 00:12:02,000
disable those tests um

00:11:59,519 --> 00:12:03,040
also like python versioning python we

00:12:02,000 --> 00:12:07,040
have

00:12:03,040 --> 00:12:10,160
currently supported our 2.7334

00:12:07,040 --> 00:12:12,079
on g5 and i think 3 three

00:12:10,160 --> 00:12:13,839
yeah that's that's it so you know a lot

00:12:12,079 --> 00:12:17,279
of versions to support and then

00:12:13,839 --> 00:12:18,000
you know um nix has to support all of

00:12:17,279 --> 00:12:21,200
them then and

00:12:18,000 --> 00:12:21,519
and the way that in packaging the data

00:12:21,200 --> 00:12:24,639
we

00:12:21,519 --> 00:12:24,959
how we declare this what's supported is

00:12:24,639 --> 00:12:28,560
the

00:12:24,959 --> 00:12:29,600
with classifiers um but the problem is

00:12:28,560 --> 00:12:32,639
oh well no one

00:12:29,600 --> 00:12:34,720
uses that or it's it's

00:12:32,639 --> 00:12:37,440
you know it's outdated so nobody is

00:12:34,720 --> 00:12:40,240
using that information to automate

00:12:37,440 --> 00:12:40,959
um you know the meter data to say okay

00:12:40,240 --> 00:12:44,399
i'm gonna

00:12:40,959 --> 00:12:45,440
support um the our build based on these

00:12:44,399 --> 00:12:47,760
classifiers

00:12:45,440 --> 00:12:49,760
um so there is no this feedback loop at

00:12:47,760 --> 00:12:51,839
least i haven't seen it

00:12:49,760 --> 00:12:54,399
so the only way to support that is

00:12:51,839 --> 00:12:55,279
really to to look up the documentation

00:12:54,399 --> 00:12:57,600
and

00:12:55,279 --> 00:13:00,000
and really specify manually what the

00:12:57,600 --> 00:13:01,839
python versions are supported so that's

00:13:00,000 --> 00:13:04,839
it's not too much work but we have to do

00:13:01,839 --> 00:13:06,800
it for every package

00:13:04,839 --> 00:13:09,839
um all right

00:13:06,800 --> 00:13:09,839
so the next thing is

00:13:10,079 --> 00:13:13,839
the manifest file which is kind of

00:13:12,399 --> 00:13:16,000
important in packaging

00:13:13,839 --> 00:13:18,320
and it's basically specifies what files

00:13:16,000 --> 00:13:21,120
to include besides the python files

00:13:18,320 --> 00:13:22,720
so if you have like icons or or anything

00:13:21,120 --> 00:13:25,680
basically

00:13:22,720 --> 00:13:28,000
that your your program uses and you know

00:13:25,680 --> 00:13:30,240
usually you would say okay you would

00:13:28,000 --> 00:13:31,040
just create a package and say grafts my

00:13:30,240 --> 00:13:32,639
package

00:13:31,040 --> 00:13:34,560
and everything under that will be

00:13:32,639 --> 00:13:37,760
included into the terrible

00:13:34,560 --> 00:13:39,279
but um you know people don't want to

00:13:37,760 --> 00:13:41,120
maintain that

00:13:39,279 --> 00:13:42,959
file because a lot of time they will

00:13:41,120 --> 00:13:44,320
forget to add something they will deploy

00:13:42,959 --> 00:13:45,120
and you know there will be an icon

00:13:44,320 --> 00:13:48,240
missing

00:13:45,120 --> 00:13:50,800
so they made like this package that

00:13:48,240 --> 00:13:52,240
a lot of people use setup tools git so

00:13:50,800 --> 00:13:54,399
like it will use git to

00:13:52,240 --> 00:13:56,320
list all the files in the git to know

00:13:54,399 --> 00:13:58,800
what what are the

00:13:56,320 --> 00:14:01,600
things that belong to this project but

00:13:58,800 --> 00:14:02,399
that means we depend on dot kit's folder

00:14:01,600 --> 00:14:04,480
um

00:14:02,399 --> 00:14:06,560
in build and install time and you know

00:14:04,480 --> 00:14:07,760
we know that in nix it's it's we have

00:14:06,560 --> 00:14:09,440
problems because it's not that

00:14:07,760 --> 00:14:12,399
deterministic so

00:14:09,440 --> 00:14:14,880
that's sometimes a bit of a pain but

00:14:12,399 --> 00:14:18,639
something to be careful about

00:14:14,880 --> 00:14:21,680
and you know just just so you give

00:14:18,639 --> 00:14:24,240
you get an idea what can be in setup hi

00:14:21,680 --> 00:14:26,079
um you know people do a lot of stuff a

00:14:24,240 --> 00:14:27,440
lot of times things like this

00:14:26,079 --> 00:14:29,360
so they will check the current

00:14:27,440 --> 00:14:30,639
interpreter for what version it is and

00:14:29,360 --> 00:14:32,639
include arc parts

00:14:30,639 --> 00:14:34,800
and this is because arc pass was added

00:14:32,639 --> 00:14:38,320
in python 2.7 so

00:14:34,800 --> 00:14:40,959
um he will declare on dependency on arc

00:14:38,320 --> 00:14:42,959
parts for for python 2.6

00:14:40,959 --> 00:14:44,480
and and this is a problematic because if

00:14:42,959 --> 00:14:46,240
you run setup pi

00:14:44,480 --> 00:14:48,000
with different versions of python you

00:14:46,240 --> 00:14:50,639
will get a different metadata

00:14:48,000 --> 00:14:52,480
so um that that makes things even more

00:14:50,639 --> 00:14:53,680
complicated or they will ever do things

00:14:52,480 --> 00:14:55,920
like this you know

00:14:53,680 --> 00:14:57,360
like try to import it and then depend on

00:14:55,920 --> 00:15:00,880
it um

00:14:57,360 --> 00:15:03,920
and and pep496 which is from this year

00:15:00,880 --> 00:15:07,279
actually adds these environment markers

00:15:03,920 --> 00:15:09,040
so for every dependency you can like add

00:15:07,279 --> 00:15:10,240
a bit of like what under what

00:15:09,040 --> 00:15:12,959
environment this

00:15:10,240 --> 00:15:14,160
should be true um so you know we're

00:15:12,959 --> 00:15:15,839
progressing

00:15:14,160 --> 00:15:18,000
it's not that bad and and just to give

00:15:15,839 --> 00:15:21,040
you an idea how bad this this can be

00:15:18,000 --> 00:15:24,160
pillow is uh a python imaging

00:15:21,040 --> 00:15:26,160
um library and you know it's like

00:15:24,160 --> 00:15:28,720
almost thousand lines and you know it

00:15:26,160 --> 00:15:30,240
tries to run brew and it tries to find

00:15:28,720 --> 00:15:32,560
the prefix from brew

00:15:30,240 --> 00:15:34,800
and if it's there it will add some pads

00:15:32,560 --> 00:15:36,079
where it should find stuff and so on and

00:15:34,800 --> 00:15:38,079
this is for different linux

00:15:36,079 --> 00:15:39,279
distributions they have hard-coded stuff

00:15:38,079 --> 00:15:41,519
where it finds

00:15:39,279 --> 00:15:42,880
so it's it's you know anything can be

00:15:41,519 --> 00:15:46,800
set up by

00:15:42,880 --> 00:15:48,880
um and and you know really

00:15:46,800 --> 00:15:49,920
i don't see much contributions to this

00:15:48,880 --> 00:15:51,600
and it's

00:15:49,920 --> 00:15:53,440
it's something we should improve and

00:15:51,600 --> 00:15:56,399
something we should talk about

00:15:53,440 --> 00:15:58,240
um but that's the current state all

00:15:56,399 --> 00:16:00,720
right so

00:15:58,240 --> 00:16:01,519
enough about that so now we will move

00:16:00,720 --> 00:16:04,560
into how

00:16:01,519 --> 00:16:06,240
how nic supports python and what can be

00:16:04,560 --> 00:16:08,720
done to improve that

00:16:06,240 --> 00:16:10,720
um and i'm gonna go through all the

00:16:08,720 --> 00:16:12,560
builds python package search goes really

00:16:10,720 --> 00:16:14,480
quickly because it's very small

00:16:12,560 --> 00:16:16,160
um just so that you know maybe it will

00:16:14,480 --> 00:16:16,880
scare you away but maybe that will give

00:16:16,160 --> 00:16:19,839
you a bit of an

00:16:16,880 --> 00:16:22,320
insight on what's going on and and

00:16:19,839 --> 00:16:25,120
hopefully i will get more contributors

00:16:22,320 --> 00:16:26,800
so i skipped the the first lambda

00:16:25,120 --> 00:16:27,360
function of dependencies because i'll

00:16:26,800 --> 00:16:28,880
explain

00:16:27,360 --> 00:16:30,720
all the dependent you know all the

00:16:28,880 --> 00:16:34,000
arguments um throughout

00:16:30,720 --> 00:16:36,240
the source so first we we throw this

00:16:34,000 --> 00:16:38,160
error if if the disabled flag is

00:16:36,240 --> 00:16:40,320
specified and and that's per

00:16:38,160 --> 00:16:42,079
you know if if a specific version of

00:16:40,320 --> 00:16:43,920
python is not supported

00:16:42,079 --> 00:16:45,839
and that's you know it's a little bit

00:16:43,920 --> 00:16:46,720
abusing nix but i think it's nice

00:16:45,839 --> 00:16:48,399
because

00:16:46,720 --> 00:16:50,160
it gives you you know the name of the

00:16:48,399 --> 00:16:51,440
package and under what version is not

00:16:50,160 --> 00:16:54,320
supported so it's

00:16:51,440 --> 00:16:54,320
user friendly

00:16:54,720 --> 00:16:58,160
all right and then we define the the

00:16:56,720 --> 00:17:00,880
python function

00:16:58,160 --> 00:17:03,199
make derivation we remove the disabled

00:17:00,880 --> 00:17:05,120
flag because we don't need it anymore

00:17:03,199 --> 00:17:06,799
when harry the do check and do check is

00:17:05,120 --> 00:17:08,720
always true in python so

00:17:06,799 --> 00:17:10,720
we always run the test as i said that's

00:17:08,720 --> 00:17:13,760
the most important thing

00:17:10,720 --> 00:17:16,000
we have the name prefix so it will

00:17:13,760 --> 00:17:17,679
prepends python and the version before

00:17:16,000 --> 00:17:21,199
every package

00:17:17,679 --> 00:17:23,120
we add a bunch of um we add a bunch of

00:17:21,199 --> 00:17:25,679
helpers we have this

00:17:23,120 --> 00:17:27,520
line that automatically adds sip as a

00:17:25,679 --> 00:17:30,640
dependency

00:17:27,520 --> 00:17:33,200
unzip sorry if the source is zip

00:17:30,640 --> 00:17:34,240
and and then we add the propagated build

00:17:33,200 --> 00:17:39,039
inputs

00:17:34,240 --> 00:17:41,919
um with um setup tools always included

00:17:39,039 --> 00:17:42,559
um all right and then the configure

00:17:41,919 --> 00:17:46,960
phase

00:17:42,559 --> 00:17:48,720
this is the uh we exported demonistic

00:17:46,960 --> 00:17:49,840
build this make sure that the python

00:17:48,720 --> 00:17:52,960
compiled files that

00:17:49,840 --> 00:17:54,720
includes time stamps um you can

00:17:52,960 --> 00:17:57,120
well it's there so you can disable it

00:17:54,720 --> 00:17:59,520
but i guess nobody will ever do that

00:17:57,120 --> 00:18:01,840
um and this is and then you know here

00:17:59,520 --> 00:18:04,640
comes the the fun part we

00:18:01,840 --> 00:18:06,400
we basically have to import setup tools

00:18:04,640 --> 00:18:08,240
before these two tills because setup

00:18:06,400 --> 00:18:09,760
tools patches this util so it has to be

00:18:08,240 --> 00:18:12,400
imported first

00:18:09,760 --> 00:18:12,799
um so yeah that's how we do it there is

00:18:12,400 --> 00:18:16,080
there are

00:18:12,799 --> 00:18:17,600
better ways to do it by by first

00:18:16,080 --> 00:18:19,760
importing setup tools and then

00:18:17,600 --> 00:18:22,000
evaluating setup i but yeah that's how

00:18:19,760 --> 00:18:23,919
we currently do it and it kind of works

00:18:22,000 --> 00:18:26,720
um and pip does the same thing by the

00:18:23,919 --> 00:18:29,280
way if you look at the source

00:18:26,720 --> 00:18:30,880
um okay then the check face is just set

00:18:29,280 --> 00:18:34,400
up by tests

00:18:30,880 --> 00:18:36,080
um the field phase runs setup i build

00:18:34,400 --> 00:18:39,520
with a bunch of flags

00:18:36,080 --> 00:18:41,760
um and all the hooks um all right and

00:18:39,520 --> 00:18:42,640
then the install function that's kind of

00:18:41,760 --> 00:18:46,240
the meat of it

00:18:42,640 --> 00:18:47,760
um and you know it's it creates the

00:18:46,240 --> 00:18:49,919
the size packages that's where the

00:18:47,760 --> 00:18:52,400
python packages are installed

00:18:49,919 --> 00:18:53,440
uh it exports the python path and then

00:18:52,400 --> 00:18:57,520
calls setup

00:18:53,440 --> 00:18:59,840
pi install with a bunch of flags

00:18:57,520 --> 00:19:01,600
and then it will move a bit of files and

00:18:59,840 --> 00:19:03,679
and remove them because

00:19:01,600 --> 00:19:05,440
if you have easy install.path in every

00:19:03,679 --> 00:19:07,039
package it will conflict when you

00:19:05,440 --> 00:19:08,240
install two packages into the same

00:19:07,039 --> 00:19:11,840
environment

00:19:08,240 --> 00:19:13,919
so we move it and rename it um

00:19:11,840 --> 00:19:16,559
and and there is one flag that you see

00:19:13,919 --> 00:19:17,039
there old and unmanageable and i'll talk

00:19:16,559 --> 00:19:19,600
about

00:19:17,039 --> 00:19:20,799
a bit later and that's something we we

00:19:19,600 --> 00:19:24,240
have to get rid of

00:19:20,799 --> 00:19:25,919
um and yeah

00:19:24,240 --> 00:19:28,160
all right then is the fixed up phase

00:19:25,919 --> 00:19:31,360
this is where we prep all the python

00:19:28,160 --> 00:19:33,440
um so all the executables in bin

00:19:31,360 --> 00:19:34,960
are wrapped with the propagated build

00:19:33,440 --> 00:19:37,760
inputs basically

00:19:34,960 --> 00:19:38,799
um because they expect those python

00:19:37,760 --> 00:19:42,720
packages to be

00:19:38,799 --> 00:19:46,480
available and then we use this

00:19:42,720 --> 00:19:49,120
um dot pth files and i'll talk about

00:19:46,480 --> 00:19:52,240
those a bit later that's what the next

00:19:49,120 --> 00:19:55,520
that's what this snippet does and

00:19:52,240 --> 00:19:58,720
then we have this shell hook um

00:19:55,520 --> 00:20:01,679
which if there is a setup i file it will

00:19:58,720 --> 00:20:02,400
run setup i develop so it will actually

00:20:01,679 --> 00:20:04,960
like

00:20:02,400 --> 00:20:05,440
enable you to to it enables you to

00:20:04,960 --> 00:20:08,640
develop

00:20:05,440 --> 00:20:12,240
python software and you will have that

00:20:08,640 --> 00:20:14,799
you know installed and importable um

00:20:12,240 --> 00:20:16,080
it's it's not that nice but it works

00:20:14,799 --> 00:20:19,280
really well

00:20:16,080 --> 00:20:20,400
um oh so i forgot to explain about the

00:20:19,280 --> 00:20:24,400
pth files

00:20:20,400 --> 00:20:28,080
so um this is this is a kind of um

00:20:24,400 --> 00:20:30,880
hacking python because uh if you just

00:20:28,080 --> 00:20:32,400
say if you point python path to just one

00:20:30,880 --> 00:20:36,080
package like you know

00:20:32,400 --> 00:20:37,280
django it will it will use these pth

00:20:36,080 --> 00:20:39,200
files to discover

00:20:37,280 --> 00:20:40,880
all the other packages so that it will

00:20:39,200 --> 00:20:42,559
recursively import

00:20:40,880 --> 00:20:43,919
all the other packages so you don't have

00:20:42,559 --> 00:20:47,120
to always specify

00:20:43,919 --> 00:20:50,159
the whole dependency tree um

00:20:47,120 --> 00:20:51,919
and and so that makes python path kind

00:20:50,159 --> 00:20:54,240
of auto-discoverable

00:20:51,919 --> 00:20:55,520
i'm not i'm i haven't i didn't write

00:20:54,240 --> 00:20:58,159
this but i don't know if it's a good

00:20:55,520 --> 00:21:01,120
idea but that's what we currently have

00:20:58,159 --> 00:21:03,520
um so okay that's the next we don't

00:21:01,120 --> 00:21:04,720
support namespaces because of that old

00:21:03,520 --> 00:21:07,520
and unmanageable

00:21:04,720 --> 00:21:08,000
flag um and you know we will see stuff

00:21:07,520 --> 00:21:11,280
like

00:21:08,000 --> 00:21:12,400
you know this the the the init files

00:21:11,280 --> 00:21:14,400
collide

00:21:12,400 --> 00:21:16,559
and and you know what's what's really

00:21:14,400 --> 00:21:19,600
going on is that setup

00:21:16,559 --> 00:21:21,440
setup tools has this um if

00:21:19,600 --> 00:21:23,200
in this any file you can say declare

00:21:21,440 --> 00:21:25,120
namespace so that

00:21:23,200 --> 00:21:27,039
that in that that way it knows that the

00:21:25,120 --> 00:21:28,720
login package can come from

00:21:27,039 --> 00:21:30,559
the logilab folder can come from

00:21:28,720 --> 00:21:32,400
different packages

00:21:30,559 --> 00:21:34,640
which is a terrible idea in my in my

00:21:32,400 --> 00:21:35,520
opinion but it's a feature that people

00:21:34,640 --> 00:21:37,440
use it's

00:21:35,520 --> 00:21:39,919
not encouraged anymore but still there

00:21:37,440 --> 00:21:42,720
are packages out there

00:21:39,919 --> 00:21:43,039
and so the way to currently fix that is

00:21:42,720 --> 00:21:45,039
just

00:21:43,039 --> 00:21:47,039
ignore collisions and these files will

00:21:45,039 --> 00:21:47,520
just you know merge and and it should

00:21:47,039 --> 00:21:50,559
work

00:21:47,520 --> 00:21:52,159
more or less um but but we are gonna

00:21:50,559 --> 00:21:54,080
support that with wheels and i'm gonna

00:21:52,159 --> 00:21:56,960
talk about a little bit later

00:21:54,080 --> 00:21:57,360
um okay that's another thing that you

00:21:56,960 --> 00:22:00,000
know

00:21:57,360 --> 00:22:00,720
not only python has a problem with but

00:22:00,000 --> 00:22:02,960
um

00:22:00,720 --> 00:22:04,880
if if you have two different versions in

00:22:02,960 --> 00:22:07,039
in the in the graph

00:22:04,880 --> 00:22:07,919
um the first one in the python fair will

00:22:07,039 --> 00:22:09,679
be used and

00:22:07,919 --> 00:22:12,880
we want conflict and again that's

00:22:09,679 --> 00:22:15,120
because of the old and unmanageable flag

00:22:12,880 --> 00:22:16,400
and again this will be improved with the

00:22:15,120 --> 00:22:18,799
wheel support

00:22:16,400 --> 00:22:19,679
uh so that we under install time you

00:22:18,799 --> 00:22:23,679
know this will

00:22:19,679 --> 00:22:23,679
will be detected um

00:22:24,080 --> 00:22:27,520
and then the imperative package

00:22:26,080 --> 00:22:29,440
management if you do

00:22:27,520 --> 00:22:31,679
things like i can install numpy and

00:22:29,440 --> 00:22:34,799
python import

00:22:31,679 --> 00:22:35,760
you know you will get that it's not

00:22:34,799 --> 00:22:38,320
available

00:22:35,760 --> 00:22:40,640
and that's because we we in profiles we

00:22:38,320 --> 00:22:43,760
don't populate the python path

00:22:40,640 --> 00:22:47,039
um you you have to specify it yourself

00:22:43,760 --> 00:22:47,840
um and and you know this is up for

00:22:47,039 --> 00:22:51,200
discussion

00:22:47,840 --> 00:22:52,159
um if this is a good idea or not um i

00:22:51,200 --> 00:22:54,480
think i think

00:22:52,159 --> 00:22:56,159
if if we put if we pollute the python

00:22:54,480 --> 00:22:58,080
path in profiles

00:22:56,159 --> 00:22:59,280
it's a bit problematic because it's you

00:22:58,080 --> 00:23:00,880
know python

00:22:59,280 --> 00:23:03,280
if you if you'll do anything it will

00:23:00,880 --> 00:23:04,960
also find those packages so

00:23:03,280 --> 00:23:06,640
if you're not using exchange root or

00:23:04,960 --> 00:23:07,440
something to build stuff it's gonna

00:23:06,640 --> 00:23:09,840
you're gonna have

00:23:07,440 --> 00:23:10,640
you're gonna leak stuff and python won't

00:23:09,840 --> 00:23:12,640
build

00:23:10,640 --> 00:23:14,000
or detect that it needs something and so

00:23:12,640 --> 00:23:16,880
on um

00:23:14,000 --> 00:23:18,559
but you know i i i'm i have an opinion

00:23:16,880 --> 00:23:20,320
about this but i'm easy

00:23:18,559 --> 00:23:22,400
you know somebody wants to convince me

00:23:20,320 --> 00:23:24,880
i'm up for discussion

00:23:22,400 --> 00:23:25,919
um okay so a bit a bit so now a little

00:23:24,880 --> 00:23:28,240
bit about

00:23:25,919 --> 00:23:29,039
what problems rise up when you package

00:23:28,240 --> 00:23:31,520
stuff

00:23:29,039 --> 00:23:33,919
um and you know one of the things is

00:23:31,520 --> 00:23:36,559
that python 3 doesn't have a python

00:23:33,919 --> 00:23:38,400
binary so a lot of packages assume there

00:23:36,559 --> 00:23:40,799
is a python binary so

00:23:38,400 --> 00:23:42,720
currently we just replace the python

00:23:40,799 --> 00:23:43,520
with python interpreter which is the

00:23:42,720 --> 00:23:45,760
full path

00:23:43,520 --> 00:23:46,720
to the binary and that's sometimes

00:23:45,760 --> 00:23:50,640
needed

00:23:46,720 --> 00:23:52,880
um then we have stuff like um

00:23:50,640 --> 00:23:54,720
the the tests will depend actually on

00:23:52,880 --> 00:23:57,120
the installed files

00:23:54,720 --> 00:23:59,279
and and because check phase comes before

00:23:57,120 --> 00:24:01,120
the install phase in x

00:23:59,279 --> 00:24:03,440
this is a bit problematic but you can

00:24:01,120 --> 00:24:05,840
say okay check skip the check phase do

00:24:03,440 --> 00:24:08,080
install check phase which comes after

00:24:05,840 --> 00:24:09,520
and then you can kind of export the path

00:24:08,080 --> 00:24:12,159
and run the tests

00:24:09,520 --> 00:24:13,520
and that kind of happens a lot of times

00:24:12,159 --> 00:24:16,240
um

00:24:13,520 --> 00:24:18,159
then we have another thing that

00:24:16,240 --> 00:24:19,120
sometimes interpreters already ship with

00:24:18,159 --> 00:24:23,120
the library

00:24:19,120 --> 00:24:26,400
so for example inum 34 comes in

00:24:23,120 --> 00:24:29,520
python34 so you want to to

00:24:26,400 --> 00:24:31,200
to only include it before that and it's

00:24:29,520 --> 00:24:33,600
problematic because you will get

00:24:31,200 --> 00:24:35,360
very weird errors if you don't do that

00:24:33,600 --> 00:24:36,559
because people don't assume you would

00:24:35,360 --> 00:24:39,520
install it

00:24:36,559 --> 00:24:41,600
um on 34 for example and you'll see it's

00:24:39,520 --> 00:24:43,760
just not supported there

00:24:41,600 --> 00:24:45,520
so those are the things that are really

00:24:43,760 --> 00:24:47,600
hard because you get a very weird error

00:24:45,520 --> 00:24:49,760
message if you don't do it

00:24:47,600 --> 00:24:51,919
and something similar is for pi by which

00:24:49,760 --> 00:24:53,279
is a alternative implementation of

00:24:51,919 --> 00:24:56,640
python

00:24:53,279 --> 00:24:59,679
in python itself it has it ships with

00:24:56,640 --> 00:25:02,799
this cffi library so you

00:24:59,679 --> 00:25:04,720
if you if you add that dependency uh

00:25:02,799 --> 00:25:06,080
it will pick it pipe i will pick it up

00:25:04,720 --> 00:25:08,480
and because it's not enter

00:25:06,080 --> 00:25:10,080
it won't use the internal one it will

00:25:08,480 --> 00:25:11,760
you will get conflicts because the

00:25:10,080 --> 00:25:13,120
released version might be different from

00:25:11,760 --> 00:25:15,279
the one that ships with pi

00:25:13,120 --> 00:25:17,600
pie and you'll get again very weird

00:25:15,279 --> 00:25:17,600
stuff

00:25:23,600 --> 00:25:29,840
yeah i mean

00:25:31,120 --> 00:25:34,720
yeah you could in yeah so the question

00:25:34,400 --> 00:25:37,200
is

00:25:34,720 --> 00:25:38,080
can we do this more automatic and and

00:25:37,200 --> 00:25:40,400
yes um

00:25:38,080 --> 00:25:43,120
of course in in the build python package

00:25:40,400 --> 00:25:45,200
we could you know save the pipe i

00:25:43,120 --> 00:25:48,000
if we have the pipe interpreter then

00:25:45,200 --> 00:25:48,000
skip these things

00:25:54,000 --> 00:25:57,840
yeah yeah yeah

00:26:00,240 --> 00:26:02,400
so

00:26:03,840 --> 00:26:10,799
well this is well well it's

00:26:06,960 --> 00:26:14,000
kind of questionable whether to use this

00:26:10,799 --> 00:26:14,880
well in built inputs it will work this

00:26:14,000 --> 00:26:18,880
technique but

00:26:14,880 --> 00:26:21,919
not if you for example use it in string

00:26:18,880 --> 00:26:24,640
substitutions yes so yeah well i

00:26:21,919 --> 00:26:25,120
always don't know whether to use this

00:26:24,640 --> 00:26:28,159
technique

00:26:25,120 --> 00:26:31,360
like for this darwin

00:26:28,159 --> 00:26:34,720
stuff yeah icons and

00:26:31,360 --> 00:26:36,559
such but that's that's one

00:26:34,720 --> 00:26:38,799
that's one of the problems if you use

00:26:36,559 --> 00:26:40,799
null then if you have

00:26:38,799 --> 00:26:43,840
if you use that package in a string you

00:26:40,799 --> 00:26:45,919
will get a confusing error message

00:26:43,840 --> 00:26:47,600
um and and that's why i prefer not to do

00:26:45,919 --> 00:26:48,559
that but we could filter it out or

00:26:47,600 --> 00:26:50,520
something

00:26:48,559 --> 00:26:52,159
this is definitely something that can be

00:26:50,520 --> 00:26:56,000
improved um

00:26:52,159 --> 00:26:59,279
in in the python packaging

00:26:56,000 --> 00:26:59,279
um so

00:26:59,440 --> 00:27:03,360
um so there is another thing that python

00:27:02,080 --> 00:27:04,880
when it reads files

00:27:03,360 --> 00:27:07,120
from the file system it will do that

00:27:04,880 --> 00:27:07,679
based on local so a lot of times you

00:27:07,120 --> 00:27:10,640
will get

00:27:07,679 --> 00:27:12,559
like a unicode error in tests and and

00:27:10,640 --> 00:27:16,720
then you have to do something like this

00:27:12,559 --> 00:27:21,120
um to depend on locales and export that

00:27:16,720 --> 00:27:24,799
and then you know yeah

00:27:21,120 --> 00:27:28,080
um um

00:27:24,799 --> 00:27:28,799
and and a lot of times people will like

00:27:28,080 --> 00:27:32,000
hardcode

00:27:28,799 --> 00:27:34,159
um you know exact version and then

00:27:32,000 --> 00:27:36,640
most of the time the solution is too

00:27:34,159 --> 00:27:39,039
unhard-coded but not always

00:27:36,640 --> 00:27:40,960
um and it kind of depends on what

00:27:39,039 --> 00:27:42,799
they're trying to do of course

00:27:40,960 --> 00:27:45,120
all right and python ship switch with

00:27:42,799 --> 00:27:48,000
some built-in modules that are

00:27:45,120 --> 00:27:49,279
we we package them separately because

00:27:48,000 --> 00:27:51,760
for example

00:27:49,279 --> 00:27:52,799
tk inter depends on x so you don't want

00:27:51,760 --> 00:27:55,039
the whole x

00:27:52,799 --> 00:27:56,880
dependency tree so this will pack it

00:27:55,039 --> 00:28:00,159
separately so then you

00:27:56,880 --> 00:28:03,279
just use python modules that curses to

00:28:00,159 --> 00:28:05,600
to and and tricky part is that python

00:28:03,279 --> 00:28:07,440
we built python 3 as a whole and python

00:28:05,600 --> 00:28:09,039
2 is modularized so

00:28:07,440 --> 00:28:10,880
um that's something to improve there

00:28:09,039 --> 00:28:12,399
also um

00:28:10,880 --> 00:28:14,080
and and you have to be careful which

00:28:12,399 --> 00:28:16,880
version you use and

00:28:14,080 --> 00:28:18,000
in python 3 actually the all the modules

00:28:16,880 --> 00:28:21,600
are defined as new

00:28:18,000 --> 00:28:22,240
so all right so you know lots of stuff

00:28:21,600 --> 00:28:25,120
to improve

00:28:22,240 --> 00:28:26,640
um i haven't had too much time but at

00:28:25,120 --> 00:28:28,080
least slowly we're getting somewhere

00:28:26,640 --> 00:28:31,120
also in the next

00:28:28,080 --> 00:28:32,880
uh so this is something i'm gonna work

00:28:31,120 --> 00:28:33,600
on the sprints and if somebody's

00:28:32,880 --> 00:28:36,640
interested

00:28:33,600 --> 00:28:38,399
um to help out i think the together

00:28:36,640 --> 00:28:38,720
prototype it shouldn't take more than a

00:28:38,399 --> 00:28:41,600
few

00:28:38,720 --> 00:28:43,600
a few days probably a day or two um it's

00:28:41,600 --> 00:28:45,360
gonna be a bit more work to to fix all

00:28:43,600 --> 00:28:48,799
the packages that break

00:28:45,360 --> 00:28:51,600
um so so what are wheels wheels is

00:28:48,799 --> 00:28:52,240
um basically the next generation egg and

00:28:51,600 --> 00:28:54,320
it's

00:28:52,240 --> 00:28:55,919
a well-defined standard in python

00:28:54,320 --> 00:28:58,240
documented how

00:28:55,919 --> 00:29:00,000
how the when we build a package and we

00:28:58,240 --> 00:29:01,840
put it into a zip file

00:29:00,000 --> 00:29:03,360
how you know where everything is and

00:29:01,840 --> 00:29:03,679
where it's submitted data and where

00:29:03,360 --> 00:29:05,200
where

00:29:03,679 --> 00:29:06,799
the stuff that should be installed and

00:29:05,200 --> 00:29:09,919
scripts and so on

00:29:06,799 --> 00:29:12,799
um so in other words the this is what

00:29:09,919 --> 00:29:14,799
will effectively change um but

00:29:12,799 --> 00:29:16,480
why we want to do this is because this

00:29:14,799 --> 00:29:18,399
the python packaging is

00:29:16,480 --> 00:29:20,080
this is where the most improvements

00:29:18,399 --> 00:29:23,200
happen so we want to use the

00:29:20,080 --> 00:29:23,520
the latest upstream um where where we we

00:29:23,200 --> 00:29:27,120
get

00:29:23,520 --> 00:29:29,600
all the candies um

00:29:27,120 --> 00:29:30,880
and this will fix as i said like a lot

00:29:29,600 --> 00:29:33,840
of bugs

00:29:30,880 --> 00:29:35,279
um and then you know at some day we

00:29:33,840 --> 00:29:38,240
probably want to generate

00:29:35,279 --> 00:29:40,000
packages but because there is no static

00:29:38,240 --> 00:29:43,039
metadata that's really hard

00:29:40,000 --> 00:29:45,919
so this is one part uh where

00:29:43,039 --> 00:29:47,679
where we could research how much that

00:29:45,919 --> 00:29:50,480
metadata we can extract

00:29:47,679 --> 00:29:52,399
in in you know like a central repository

00:29:50,480 --> 00:29:54,559
or something so it's easier to

00:29:52,399 --> 00:29:56,640
than from that static metadata to

00:29:54,559 --> 00:29:58,880
generate all the packages

00:29:56,640 --> 00:29:59,840
um but you know as as you saw before

00:29:58,880 --> 00:30:01,679
it's

00:29:59,840 --> 00:30:03,760
it's really hard to do that and it's

00:30:01,679 --> 00:30:05,360
gonna be need a lot of work and mostly

00:30:03,760 --> 00:30:08,159
we'll have to work with upstream so

00:30:05,360 --> 00:30:10,480
that's kind of a lot of effort to do on

00:30:08,159 --> 00:30:10,880
contrary to to haskell or something

00:30:10,480 --> 00:30:13,039
where

00:30:10,880 --> 00:30:14,640
they only have the static files and they

00:30:13,039 --> 00:30:17,520
can just use those

00:30:14,640 --> 00:30:18,559
uh and you know we i think the haskell

00:30:17,520 --> 00:30:21,919
api

00:30:18,559 --> 00:30:23,440
in terms of nics is really nice now um

00:30:21,919 --> 00:30:24,960
it's not perfect but it's way better

00:30:23,440 --> 00:30:27,360
than python so

00:30:24,960 --> 00:30:29,440
um i think we should we should move also

00:30:27,360 --> 00:30:31,600
there with with python and then

00:30:29,440 --> 00:30:32,880
i think in general all the languages

00:30:31,600 --> 00:30:35,600
that we have we

00:30:32,880 --> 00:30:37,600
should try to have kind of similar api

00:30:35,600 --> 00:30:39,840
so not everyone is doing their own thing

00:30:37,600 --> 00:30:40,640
so and i think haskell is currently the

00:30:39,840 --> 00:30:42,960
most

00:30:40,640 --> 00:30:43,919
you know advanced and and simple at the

00:30:42,960 --> 00:30:47,200
same time so

00:30:43,919 --> 00:30:50,320
that's something to to do um so

00:30:47,200 --> 00:30:51,120
yeah that's that's a quick overview at

00:30:50,320 --> 00:30:52,960
the bottom

00:30:51,120 --> 00:30:55,279
there are two links one is the first one

00:30:52,960 --> 00:30:57,600
is the the quiet about

00:30:55,279 --> 00:30:59,279
python packaging in general it's it's

00:30:57,600 --> 00:31:02,640
very well written and it

00:30:59,279 --> 00:31:05,919
has the latest you know um

00:31:02,640 --> 00:31:08,399
recommended tools and and you know um

00:31:05,919 --> 00:31:10,480
ways to package and the second one is a

00:31:08,399 --> 00:31:13,440
bit of a reference manual i wrote for

00:31:10,480 --> 00:31:14,640
python and and it's not perfect and and

00:31:13,440 --> 00:31:16,559
you know i'm

00:31:14,640 --> 00:31:19,039
feel free to to tell me what's missing

00:31:16,559 --> 00:31:20,720
and i'll do my best

00:31:19,039 --> 00:31:22,480
and and the first line is just from the

00:31:20,720 --> 00:31:23,440
python that's actually one of the

00:31:22,480 --> 00:31:26,640
guidelines so

00:31:23,440 --> 00:31:26,640
i don't know what it means but

00:31:27,120 --> 00:31:33,840
yeah thanks

00:31:36,070 --> 00:31:39,270
[Applause]

00:31:44,840 --> 00:31:49,679
questions

00:31:47,840 --> 00:31:51,360
okay uh so one thing that's not

00:31:49,679 --> 00:31:52,159
completely clear to me uh so you

00:31:51,360 --> 00:31:54,960
mentioned

00:31:52,159 --> 00:31:56,480
uh a new wheel format and you also

00:31:54,960 --> 00:31:59,440
mentioned that static

00:31:56,480 --> 00:32:01,200
uh descriptions would be good so the new

00:31:59,440 --> 00:32:03,600
firmware testers still use

00:32:01,200 --> 00:32:05,200
setup.pi or does that have a static

00:32:03,600 --> 00:32:08,720
description

00:32:05,200 --> 00:32:11,360
so well kind of both

00:32:08,720 --> 00:32:13,600
it still uses setup high but it will

00:32:11,360 --> 00:32:14,960
generate the static metadata and put it

00:32:13,600 --> 00:32:17,279
into the wheel

00:32:14,960 --> 00:32:19,120
um so only once you've built it you will

00:32:17,279 --> 00:32:20,159
have that so that's a bit too late for

00:32:19,120 --> 00:32:23,279
us to use

00:32:20,159 --> 00:32:26,720
uh that's that's meant more like for for

00:32:23,279 --> 00:32:29,440
people doing um stuff on you know

00:32:26,720 --> 00:32:30,480
build packages and trying to figure out

00:32:29,440 --> 00:32:33,519
um

00:32:30,480 --> 00:32:35,279
stuff later on but the static metadata

00:32:33,519 --> 00:32:37,760
is something that's still in draft mode

00:32:35,279 --> 00:32:40,960
and it's currently not used anywhere

00:32:37,760 --> 00:32:43,440
openstack people have their own pbr

00:32:40,960 --> 00:32:45,760
package which does that and and you know

00:32:43,440 --> 00:32:47,360
the the effort is very fragmented but we

00:32:45,760 --> 00:32:49,600
cannot use that so

00:32:47,360 --> 00:32:51,840
we'll we'll you know again we have to do

00:32:49,600 --> 00:32:54,080
it our way somehow to

00:32:51,840 --> 00:32:55,840
so it wouldn't really be possible to

00:32:54,080 --> 00:32:57,039
take a v file and generate a nyx

00:32:55,840 --> 00:32:59,519
expression out of that

00:32:57,039 --> 00:33:00,480
yeah that's that's what actually um

00:32:59,519 --> 00:33:03,600
florian

00:33:00,480 --> 00:33:05,440
frisdov did last year uh and that's yeah

00:33:03,600 --> 00:33:06,880
that's one way to do it but the problem

00:33:05,440 --> 00:33:08,480
is as i said before

00:33:06,880 --> 00:33:10,080
if you run set up i with different

00:33:08,480 --> 00:33:12,000
python versions you get different

00:33:10,080 --> 00:33:13,200
dependency graphs so it's it's not that

00:33:12,000 --> 00:33:15,919
simple

00:33:13,200 --> 00:33:16,240
you know that's just one one problem

00:33:15,919 --> 00:33:18,559
that

00:33:16,240 --> 00:33:19,600
that's there so we still have to run

00:33:18,559 --> 00:33:21,600
this script

00:33:19,600 --> 00:33:23,600
to generate the metadata and it's

00:33:21,600 --> 00:33:26,080
dynamic and it's based on environment

00:33:23,600 --> 00:33:28,159
and so on

00:33:26,080 --> 00:33:31,360
so yeah you might not get everything you

00:33:28,159 --> 00:33:31,360
need from that

00:33:32,960 --> 00:33:38,559
so next question from rock

00:33:36,480 --> 00:33:40,080
there is one problem also which we

00:33:38,559 --> 00:33:42,080
forgot to mention is

00:33:40,080 --> 00:33:43,519
and especially if you package any

00:33:42,080 --> 00:33:45,679
command line tool

00:33:43,519 --> 00:33:47,519
uh because of this recursive thing and

00:33:45,679 --> 00:33:50,640
the python path is actually

00:33:47,519 --> 00:33:53,200
uh is actually created at runtime

00:33:50,640 --> 00:33:54,240
so if you have a common line utility it

00:33:53,200 --> 00:33:55,760
would actually run

00:33:54,240 --> 00:33:57,919
a lot slower because it will need to

00:33:55,760 --> 00:34:01,440
figure it out the whole python pad

00:33:57,919 --> 00:34:04,640
and it's quite performance boost

00:34:01,440 --> 00:34:05,360
hit when you do this so the only way

00:34:04,640 --> 00:34:07,039
because

00:34:05,360 --> 00:34:09,119
it's basically at the build time you

00:34:07,039 --> 00:34:10,320
know the python path what are my old

00:34:09,119 --> 00:34:12,560
dependencies

00:34:10,320 --> 00:34:13,359
why just not use it you know like just

00:34:12,560 --> 00:34:15,760
set it

00:34:13,359 --> 00:34:17,280
because it's you know about it so it's

00:34:15,760 --> 00:34:20,159
like this recursive thing

00:34:17,280 --> 00:34:20,720
no it's that's not how python works it

00:34:20,159 --> 00:34:23,760
should be

00:34:20,720 --> 00:34:26,320
removed yeah i agree the pth

00:34:23,760 --> 00:34:27,119
hack is is you know nic specific and

00:34:26,320 --> 00:34:30,560
it's a hack and

00:34:27,119 --> 00:34:32,320
and yeah it has drawbacks and i i

00:34:30,560 --> 00:34:34,079
if you would ask me i would remove it

00:34:32,320 --> 00:34:39,599
but you know that's something we should

00:34:34,079 --> 00:34:39,599
talk about also with more questions

00:34:42,159 --> 00:34:45,599
no it's all clear that's good

00:34:47,520 --> 00:34:51,599
so you said that um quite often these

00:34:50,240 --> 00:34:53,760
python packages

00:34:51,599 --> 00:34:56,000
some metadata like uh had a

00:34:53,760 --> 00:34:56,800
compatibility with specific python

00:34:56,000 --> 00:34:59,839
versions is

00:34:56,800 --> 00:35:03,599
incorrect or incomplete right yeah

00:34:59,839 --> 00:35:05,280
so does python do any continuous builds

00:35:03,599 --> 00:35:07,200
i mean uh what's their c pen called is

00:35:05,280 --> 00:35:09,599
that pipe i or like pipe

00:35:07,200 --> 00:35:11,599
yeah yeah no there is no they actually

00:35:09,599 --> 00:35:12,560
don't run that because it's a script so

00:35:11,599 --> 00:35:15,359
that they

00:35:12,560 --> 00:35:16,000
specifically don't run set up high so

00:35:15,359 --> 00:35:17,119
the the

00:35:16,000 --> 00:35:19,200
index doesn't even know about

00:35:17,119 --> 00:35:20,720
dependencies um

00:35:19,200 --> 00:35:22,320
um because they don't want to run you

00:35:20,720 --> 00:35:25,599
know arbitrary code on

00:35:22,320 --> 00:35:27,359
there so uh it's it's pretty much just

00:35:25,599 --> 00:35:28,720
like description there and that's pretty

00:35:27,359 --> 00:35:30,240
much it

00:35:28,720 --> 00:35:32,800
and and you know it's problematic

00:35:30,240 --> 00:35:34,160
because if you like the way you generate

00:35:32,800 --> 00:35:35,839
the whole dependence in tree

00:35:34,160 --> 00:35:37,599
is python is like if you depend on

00:35:35,839 --> 00:35:38,240
django you say okay then you fetch

00:35:37,599 --> 00:35:40,240
django

00:35:38,240 --> 00:35:42,000
you run the set a pi then you know the

00:35:40,240 --> 00:35:44,640
first you know

00:35:42,000 --> 00:35:46,560
uh list of dependencies and then you

00:35:44,640 --> 00:35:47,920
have to download all these packages and

00:35:46,560 --> 00:35:51,040
run set up i to get

00:35:47,920 --> 00:35:53,280
more and and so it's you know

00:35:51,040 --> 00:35:55,599
you discover the dependency tree based

00:35:53,280 --> 00:35:57,920
on how you run this setup five hours

00:35:55,599 --> 00:35:59,040
so it's it's that's why it's you know

00:35:57,920 --> 00:36:00,720
that's why

00:35:59,040 --> 00:36:03,040
that's why we want to go to the static

00:36:00,720 --> 00:36:04,000
metadata but it's a lot of effort and a

00:36:03,040 --> 00:36:05,680
lot of people

00:36:04,000 --> 00:36:08,000
don't want that because you know it will

00:36:05,680 --> 00:36:11,440
break stuff of course and so on so it's

00:36:08,000 --> 00:36:12,480
yeah so so i guess we should sort of

00:36:11,440 --> 00:36:15,440
infiltrate

00:36:12,480 --> 00:36:18,000
uh pipe i to sort of provide uh kind of

00:36:15,440 --> 00:36:21,200
hydrise a continuous build surface for

00:36:18,000 --> 00:36:23,440
uh pipeline and yeah and then when

00:36:21,200 --> 00:36:25,280
once uh python developers depend on that

00:36:23,440 --> 00:36:26,720
they will automatically fix their bugs

00:36:25,280 --> 00:36:29,200
and we don't

00:36:26,720 --> 00:36:31,280
have to do it i was actually talking to

00:36:29,200 --> 00:36:33,440
to with nick from redhead and they're

00:36:31,280 --> 00:36:34,320
kind of interested maybe in sponsoring

00:36:33,440 --> 00:36:37,440
that work but

00:36:34,320 --> 00:36:38,960
we i've been too busy so far but maybe

00:36:37,440 --> 00:36:42,079
yeah that's something we could do

00:36:38,960 --> 00:36:44,240
and and you know fix a lot of like

00:36:42,079 --> 00:36:45,599
python packaging stuff but the problem

00:36:44,240 --> 00:36:49,119
is that

00:36:45,599 --> 00:36:51,280
you know there's the question when how

00:36:49,119 --> 00:36:52,560
where where this static metadata you

00:36:51,280 --> 00:36:55,040
know it's it's good that

00:36:52,560 --> 00:36:56,480
this goes upstream and and you know

00:36:55,040 --> 00:36:58,000
where would

00:36:56,480 --> 00:36:59,680
you know if we could solve a lot of

00:36:58,000 --> 00:37:01,599
problems in our ends but

00:36:59,680 --> 00:37:03,119
that wouldn't go upstream and that's

00:37:01,599 --> 00:37:06,320
kind of problematic because

00:37:03,119 --> 00:37:08,880
upstream in python we it's not as bad as

00:37:06,320 --> 00:37:10,560
like in javascript where releases happen

00:37:08,880 --> 00:37:12,880
a lot of times but it's

00:37:10,560 --> 00:37:14,800
still pretty fast and you you don't want

00:37:12,880 --> 00:37:18,160
to maintain that in in nick's

00:37:14,800 --> 00:37:20,240
um you know ecosystem so it has to be a

00:37:18,160 --> 00:37:22,160
community effort so there is a lot of

00:37:20,240 --> 00:37:25,520
work to be done in this area actually

00:37:22,160 --> 00:37:25,520
too to come to sanity

00:37:27,119 --> 00:37:29,680
yeah one

00:37:30,960 --> 00:37:39,839
one more thing

00:37:36,800 --> 00:37:43,839
so yeah thanks for the talk um it

00:37:39,839 --> 00:37:46,079
still sounds like the python

00:37:43,839 --> 00:37:46,880
uh situation in general is still a

00:37:46,079 --> 00:37:50,000
little bit of

00:37:46,880 --> 00:37:54,320
a mess despite all the improvements

00:37:50,000 --> 00:37:57,359
from the last couple of years and

00:37:54,320 --> 00:37:59,280
i was wondering seeing that in the

00:37:57,359 --> 00:38:00,400
husker community this has driven a lot

00:37:59,280 --> 00:38:02,839
of people

00:38:00,400 --> 00:38:04,000
towards nix coming from husker because

00:38:02,839 --> 00:38:06,640
of

00:38:04,000 --> 00:38:07,599
the packaging situation in their

00:38:06,640 --> 00:38:12,480
ecosystem

00:38:07,599 --> 00:38:16,079
do you see any movement of pythonistas

00:38:12,480 --> 00:38:18,560
towards nix for similar reasons

00:38:16,079 --> 00:38:20,480
yes so in in python you know

00:38:18,560 --> 00:38:23,119
unfortunately well for us

00:38:20,480 --> 00:38:25,200
um there is like a conda package manager

00:38:23,119 --> 00:38:27,119
built in python which is

00:38:25,200 --> 00:38:29,359
pretty much a clone of nics written in

00:38:27,119 --> 00:38:31,760
python and and

00:38:29,359 --> 00:38:32,480
i've talked to to to the original

00:38:31,760 --> 00:38:34,800
developer

00:38:32,480 --> 00:38:36,320
and when i was at the python conference

00:38:34,800 --> 00:38:39,680
you know like why waste

00:38:36,320 --> 00:38:41,760
this effort and they basically said that

00:38:39,680 --> 00:38:43,680
we're we want to support windows with

00:38:41,760 --> 00:38:44,160
cygwin which is a bad idea and even

00:38:43,680 --> 00:38:45,760
guido

00:38:44,160 --> 00:38:48,240
say that's officially the order of

00:38:45,760 --> 00:38:49,280
python so what conda does differently is

00:38:48,240 --> 00:38:51,680
they have

00:38:49,280 --> 00:38:53,280
separate specifications for windows and

00:38:51,680 --> 00:38:56,320
and unix

00:38:53,280 --> 00:38:58,839
so you know they they maintain both at

00:38:56,320 --> 00:39:00,240
the same time so windows has like native

00:38:58,839 --> 00:39:02,240
support um

00:39:00,240 --> 00:39:03,760
and of course the same could be done in

00:39:02,240 --> 00:39:05,280
nick's if nick's

00:39:03,760 --> 00:39:08,160
you know was supported to windows

00:39:05,280 --> 00:39:10,240
natively um but unfortunately

00:39:08,160 --> 00:39:12,240
you know they they're doing it their way

00:39:10,240 --> 00:39:13,440
and and they even got a big investment

00:39:12,240 --> 00:39:15,839
right now so

00:39:13,440 --> 00:39:18,480
you know it's it's gonna i think at the

00:39:15,839 --> 00:39:19,520
end we we have a better ecosystem but

00:39:18,480 --> 00:39:23,280
it's gonna take

00:39:19,520 --> 00:39:26,640
more time to to show up basically

00:39:23,280 --> 00:39:26,640
and and to convince people

00:39:27,040 --> 00:39:32,800
okay any further questions we would

00:39:29,599 --> 00:39:32,800
still have five minutes

00:39:33,040 --> 00:39:36,720
otherwise i think we could start the

00:39:34,800 --> 00:39:39,359
break

00:39:36,720 --> 00:39:40,400
and to see each other again at i think

00:39:39,359 --> 00:39:43,599
it must be 11

00:39:40,400 --> 00:39:56,960
15. yes i guess the right number so

00:39:43,599 --> 00:39:56,960

YouTube URL: https://www.youtube.com/watch?v=RIn8MNrbwDQ


