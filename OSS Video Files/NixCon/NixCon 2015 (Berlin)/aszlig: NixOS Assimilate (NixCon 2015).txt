Title: aszlig: NixOS Assimilate (NixCon 2015)
Publication date: 2020-10-29
Playlist: NixCon 2015 (Berlin)
Description: 
	
Captions: 
	00:00:05,279 --> 00:00:10,480
okay so

00:00:06,399 --> 00:00:13,519
we'll continue with uh our show

00:00:10,480 --> 00:00:17,920
so um the next talk

00:00:13,519 --> 00:00:17,920
is called is titled nixo as a simulate

00:00:19,039 --> 00:00:25,840
to introduce our uh long time nexus

00:00:22,880 --> 00:00:26,960
contributor i'll first start is how to

00:00:25,840 --> 00:00:30,560
pronounce his

00:00:26,960 --> 00:00:31,840
nickname it's uh if you are in germany

00:00:30,560 --> 00:00:34,320
in german speaking

00:00:31,840 --> 00:00:35,360
you will pronounce it ashley a slick

00:00:34,320 --> 00:00:38,160
yeah ashley

00:00:35,360 --> 00:00:40,160
and then if you're english-speaking it's

00:00:38,160 --> 00:00:44,480
the pronunciation correct is eight

00:00:40,160 --> 00:00:45,840
eight yeah okay um and it's actually a

00:00:44,480 --> 00:00:46,559
person that does not need to be

00:00:45,840 --> 00:00:49,760
introduced

00:00:46,559 --> 00:00:51,680
um because you can just read its pull uh

00:00:49,760 --> 00:00:53,360
pull requests and commits and you will

00:00:51,680 --> 00:00:54,480
know everything you need to know about

00:00:53,360 --> 00:00:58,000
it

00:00:54,480 --> 00:01:01,199
so without further ado

00:00:58,000 --> 00:01:04,400
yeah um so the

00:01:01,199 --> 00:01:08,080
the next assimilate issue was

00:01:04,400 --> 00:01:11,439
was opened like about a year ago

00:01:08,080 --> 00:01:13,680
since i used a year ago and so i decided

00:01:11,439 --> 00:01:15,840
to finally crunch it together but

00:01:13,680 --> 00:01:18,159
didn't manage to fully crunch it

00:01:15,840 --> 00:01:21,439
together right now but

00:01:18,159 --> 00:01:23,600
it's getting there next week and

00:01:21,439 --> 00:01:25,119
it's actually a system which is

00:01:23,600 --> 00:01:28,080
comprised of

00:01:25,119 --> 00:01:30,079
actually three parts and two major parts

00:01:28,080 --> 00:01:33,280
one is the partitioner this which is

00:01:30,079 --> 00:01:37,280
next part and the other one

00:01:33,280 --> 00:01:40,960
is a device mapper module which

00:01:37,280 --> 00:01:45,119
is well i'll i'll get to the

00:01:40,960 --> 00:01:49,600
to the second one in a minute so

00:01:45,119 --> 00:01:53,280
um so this is the boring part of

00:01:49,600 --> 00:01:56,640
it's just a petitioner it's um

00:01:53,280 --> 00:01:59,520
well it's uh using uh believe it

00:01:56,640 --> 00:02:00,399
or live it it's a it's a python library

00:01:59,520 --> 00:02:03,840
for

00:02:00,399 --> 00:02:06,880
um for

00:02:03,840 --> 00:02:08,399
for doing partitioning in in a tree

00:02:06,880 --> 00:02:11,120
tree-like

00:02:08,399 --> 00:02:11,840
manner so so you have you have a device

00:02:11,120 --> 00:02:15,280
tree and

00:02:11,840 --> 00:02:18,400
you you um build everything or

00:02:15,280 --> 00:02:19,840
every storage device on top of the

00:02:18,400 --> 00:02:23,280
device tree

00:02:19,840 --> 00:02:26,800
and uh so um

00:02:23,280 --> 00:02:27,360
so far how how this uh it it actually

00:02:26,800 --> 00:02:30,640
was

00:02:27,360 --> 00:02:33,360
in in nexops um or it

00:02:30,640 --> 00:02:34,160
is actually used in nick's ops and so

00:02:33,360 --> 00:02:37,519
far we

00:02:34,160 --> 00:02:38,720
only had um the way to to do manual

00:02:37,519 --> 00:02:42,080
partitioning

00:02:38,720 --> 00:02:46,160
or if you if you want to um

00:02:42,080 --> 00:02:48,959
to get an xos on a on a machine that

00:02:46,160 --> 00:02:49,440
where you don't have physical access to

00:02:48,959 --> 00:02:51,230
you

00:02:49,440 --> 00:02:52,560
usually need to

00:02:51,230 --> 00:02:55,840
[Music]

00:02:52,560 --> 00:02:59,920
need to yeah either keep

00:02:55,840 --> 00:03:03,280
the existing partitioning layout or

00:02:59,920 --> 00:03:04,080
shrink one partition and do and create

00:03:03,280 --> 00:03:07,440
another one

00:03:04,080 --> 00:03:11,040
and other things like that and for that

00:03:07,440 --> 00:03:14,319
um i usually i initially

00:03:11,040 --> 00:03:17,599
introduced nick's part to nick's

00:03:14,319 --> 00:03:20,879
ops and this was

00:03:17,599 --> 00:03:24,720
actually a quick and dirty hack

00:03:20,879 --> 00:03:29,040
it's um it was

00:03:24,720 --> 00:03:33,120
by monkey patching livid at that time

00:03:29,040 --> 00:03:37,200
from from getting rid of all the

00:03:33,120 --> 00:03:40,640
the um from all the dependencies

00:03:37,200 --> 00:03:42,959
on uh anaconda which is uh livid is is

00:03:40,640 --> 00:03:46,159
basically a library which is used

00:03:42,959 --> 00:03:48,959
for for the red hat's

00:03:46,159 --> 00:03:50,319
installer which is called anaconda and

00:03:48,959 --> 00:03:53,599
they they put

00:03:50,319 --> 00:03:56,720
they separated the partitioning stuff

00:03:53,599 --> 00:04:00,480
into the livid library and

00:03:56,720 --> 00:04:01,920
so the code if if you want to see it i

00:04:00,480 --> 00:04:06,159
can show it

00:04:01,920 --> 00:04:09,599
to you it's it's monkey patching but um

00:04:06,159 --> 00:04:13,760
yeah um so we're heading towards uh

00:04:09,599 --> 00:04:16,959
next part 1.0 which is basically

00:04:13,760 --> 00:04:17,280
yeah this is um this is the old format

00:04:16,959 --> 00:04:21,120
which

00:04:17,280 --> 00:04:24,000
is using uh this is what what um

00:04:21,120 --> 00:04:25,360
the hetzner uh deployment is actually

00:04:24,000 --> 00:04:29,280
using for partitioning

00:04:25,360 --> 00:04:33,280
this is the kickstart format which is

00:04:29,280 --> 00:04:37,680
quite quite compressed

00:04:33,280 --> 00:04:41,280
and we actually want something more

00:04:37,680 --> 00:04:45,680
more let's say nixo s modular which

00:04:41,280 --> 00:04:49,840
also has one major downside which is

00:04:45,680 --> 00:04:53,199
basically it's not so compressed

00:04:49,840 --> 00:04:56,240
so this is the the

00:04:53,199 --> 00:04:59,759
um the new

00:04:56,240 --> 00:05:03,360
uh partitioning uh or the new storage

00:04:59,759 --> 00:05:05,919
uh attribute or that

00:05:03,360 --> 00:05:07,199
the the new storage attribute that will

00:05:05,919 --> 00:05:10,240
be introduced

00:05:07,199 --> 00:05:13,600
more or less in this way

00:05:10,240 --> 00:05:14,240
to next packages my plan is actually to

00:05:13,600 --> 00:05:16,560
have it

00:05:14,240 --> 00:05:17,280
side by side by file systems because i

00:05:16,560 --> 00:05:19,680
don't

00:05:17,280 --> 00:05:21,919
actually know what to do with file

00:05:19,680 --> 00:05:24,960
systems whether to keep it or

00:05:21,919 --> 00:05:27,199
actually used just the storage

00:05:24,960 --> 00:05:30,400
definition to

00:05:27,199 --> 00:05:33,600
to statelessly create

00:05:30,400 --> 00:05:36,720
the the partition or the partition

00:05:33,600 --> 00:05:39,280
and file system layout the problem here

00:05:36,720 --> 00:05:43,199
actually is that you see

00:05:39,280 --> 00:05:46,479
um i think that's yeah yeah

00:05:43,199 --> 00:05:50,080
vda and vdb and that's the the problem

00:05:46,479 --> 00:05:50,080
where you actually

00:05:50,720 --> 00:05:58,720
either have to to specify device ids

00:05:54,400 --> 00:06:01,759
or introduce labels or some other ways

00:05:58,720 --> 00:06:06,000
to um to manage the state

00:06:01,759 --> 00:06:10,720
or to to actually if you for example

00:06:06,000 --> 00:06:13,280
add another disk you might

00:06:10,720 --> 00:06:15,199
the the nexus system is unable to mount

00:06:13,280 --> 00:06:18,720
the disks because

00:06:15,199 --> 00:06:22,720
it will just say well vda

00:06:18,720 --> 00:06:26,560
or sda could be in any order

00:06:22,720 --> 00:06:35,840
so yeah

00:06:26,560 --> 00:06:40,400
this is actually

00:06:35,840 --> 00:06:43,199
it's a small demo of of linux part

00:06:40,400 --> 00:06:43,199
implementation

00:06:47,360 --> 00:06:51,759
bigger bigger part

00:06:51,919 --> 00:06:54,479
larger

00:06:56,400 --> 00:07:03,840
let's let's actually enqueue emo

00:07:00,840 --> 00:07:03,840
uh

00:07:09,180 --> 00:07:12,319
[Applause]

00:07:14,840 --> 00:07:17,840
that's

00:07:20,319 --> 00:07:22,720
um

00:07:28,840 --> 00:07:31,840
well

00:07:33,680 --> 00:07:36,800
maybe it doesn't

00:07:37,280 --> 00:07:49,039
doesn't support it yet okay

00:07:45,039 --> 00:07:49,039
anyway is it no readable

00:07:57,120 --> 00:07:59,840
um

00:08:01,199 --> 00:08:04,479
so this is actually as

00:08:11,680 --> 00:08:16,240
this is actually a quite simple storage

00:08:14,400 --> 00:08:19,440
configuration with uh with

00:08:16,240 --> 00:08:26,080
butter fs and the

00:08:19,440 --> 00:08:29,199
the existing file system layout is

00:08:26,080 --> 00:08:32,399
is uh actually unpartitioned and

00:08:29,199 --> 00:08:36,159
uh so we we um we

00:08:32,399 --> 00:08:40,800
call the the next part um

00:08:36,159 --> 00:08:40,800
the next part itself is called by

00:08:42,000 --> 00:08:47,279
instantiate to actually evaluate the

00:08:44,720 --> 00:08:47,279
expression

00:08:47,920 --> 00:08:50,640
which is

00:08:53,200 --> 00:09:00,399
and um it dumps it into

00:08:56,959 --> 00:09:03,600
xml which is uh which is more or less

00:09:00,399 --> 00:09:07,120
next instantiate minus minus or

00:09:03,600 --> 00:09:10,800
xml and and

00:09:07,120 --> 00:09:14,720
uses that for for uh creating

00:09:10,800 --> 00:09:14,720
its device tree so

00:09:16,959 --> 00:09:20,959
we should have better fs and

00:09:21,200 --> 00:09:37,839
oh well that's a buggy person

00:09:24,640 --> 00:09:37,839
version anyway but it should work

00:09:49,360 --> 00:10:05,839
yeah so we can mount um

00:10:08,720 --> 00:10:11,680
yeah um

00:10:11,760 --> 00:10:17,279
anyway i think uh that's that's

00:10:15,040 --> 00:10:18,079
the reason why it's it's more or less

00:10:17,279 --> 00:10:20,720
boring because

00:10:18,079 --> 00:10:23,200
it's well it's a partition what do you

00:10:20,720 --> 00:10:23,200
expect

00:10:26,960 --> 00:10:30,839
[Applause]

00:10:28,870 --> 00:10:33,839
[Music]

00:10:30,839 --> 00:10:33,839
so

00:10:38,320 --> 00:10:49,120
that yes shut down

00:10:46,240 --> 00:10:49,120
so um

00:10:50,640 --> 00:11:01,839
now it's get it's getting quite

00:10:52,399 --> 00:11:01,839
interesting because

00:11:15,120 --> 00:11:17,920
so um

00:11:24,480 --> 00:11:29,920
yeah as i mentioned already it's

00:11:27,519 --> 00:11:30,720
it's the question whether to keep file

00:11:29,920 --> 00:11:33,360
systems

00:11:30,720 --> 00:11:34,000
as a low-level attribute or not because

00:11:33,360 --> 00:11:38,160
actually

00:11:34,000 --> 00:11:41,040
a file system itself is

00:11:38,160 --> 00:11:42,399
more or less creating mount units by

00:11:41,040 --> 00:11:46,000
creating

00:11:42,399 --> 00:11:46,640
an fstab and then using the converter

00:11:46,000 --> 00:11:51,279
for

00:11:46,640 --> 00:11:54,320
for the for the for the system the

00:11:51,279 --> 00:11:57,200
mount units and this

00:11:54,320 --> 00:11:57,839
actually has a few drawbacks for example

00:11:57,200 --> 00:12:01,360
if you

00:11:57,839 --> 00:12:01,839
uh if you have um network file systems

00:12:01,360 --> 00:12:05,279
or

00:12:01,839 --> 00:12:08,079
multiple volumes and things like that

00:12:05,279 --> 00:12:11,279
you probably want to have proper mount

00:12:08,079 --> 00:12:13,920
units for them and also

00:12:11,279 --> 00:12:15,760
if you want for example to change your

00:12:13,920 --> 00:12:18,880
partitioning layout

00:12:15,760 --> 00:12:22,000
um you have to have the

00:12:18,880 --> 00:12:25,760
the the original input like

00:12:22,000 --> 00:12:28,959
yeah there i have a lux container

00:12:25,760 --> 00:12:32,000
and an lvm in it and uh

00:12:28,959 --> 00:12:35,440
and whatever you you want to to

00:12:32,000 --> 00:12:38,720
to box into that whole chain

00:12:35,440 --> 00:12:42,639
and um

00:12:38,720 --> 00:12:44,800
yeah so basically basically um

00:12:42,639 --> 00:12:45,760
i would go for a stateless approach

00:12:44,800 --> 00:12:49,680
right now it's

00:12:45,760 --> 00:12:51,920
it's um right now how we do it in

00:12:49,680 --> 00:12:55,760
the head snap target it's like do the

00:12:51,920 --> 00:12:59,200
partitioning and afterwards

00:12:55,760 --> 00:13:02,399
spit out the next expression which is

00:12:59,200 --> 00:13:04,959
which is um the the

00:13:02,399 --> 00:13:06,959
which contains all the file system and

00:13:04,959 --> 00:13:09,680
swap and what not

00:13:06,959 --> 00:13:09,680
attributes

00:13:10,399 --> 00:13:12,560
so

00:13:15,200 --> 00:13:22,639
this is now we're getting to

00:13:18,320 --> 00:13:25,839
what's something that's uh well

00:13:22,639 --> 00:13:29,120
a bit more complicated so uh having

00:13:25,839 --> 00:13:31,440
having an in a petitioner is

00:13:29,120 --> 00:13:33,200
quite boring but the interesting thing

00:13:31,440 --> 00:13:36,720
is uh

00:13:33,200 --> 00:13:41,279
well we can

00:13:36,720 --> 00:13:44,160
simulate basically every os more or less

00:13:41,279 --> 00:13:44,160
so um

00:13:44,959 --> 00:13:49,120
which is basically and now now we're

00:13:47,920 --> 00:13:51,199
getting to the

00:13:49,120 --> 00:13:52,399
to the interesting part because i don't

00:13:51,199 --> 00:13:57,279
have any

00:13:52,399 --> 00:13:57,279
um nice and graphical slides here

00:14:00,560 --> 00:14:05,199
next is assimilate is basically a device

00:14:04,240 --> 00:14:07,600
mapper module

00:14:05,199 --> 00:14:10,399
that or should be a device mapper module

00:14:07,600 --> 00:14:15,040
once it's working correctly

00:14:10,399 --> 00:14:18,320
which which basically works in

00:14:15,040 --> 00:14:18,320
three steps and

00:14:18,880 --> 00:14:22,959
yeah and uh yeah let's let's get to the

00:14:22,399 --> 00:14:25,839
steps

00:14:22,959 --> 00:14:27,120
and uh this is um the first step is

00:14:25,839 --> 00:14:30,639
actually marking

00:14:27,120 --> 00:14:33,120
everything that's um so so you

00:14:30,639 --> 00:14:34,240
you you have the old partitioning layout

00:14:33,120 --> 00:14:37,440
you you

00:14:34,240 --> 00:14:40,320
mount everything read only and read all

00:14:37,440 --> 00:14:41,360
data you want to still keep so it's

00:14:40,320 --> 00:14:45,120
marking

00:14:41,360 --> 00:14:49,360
every block that's that's basically used

00:14:45,120 --> 00:14:52,639
and that has the advantage that we can

00:14:49,360 --> 00:14:55,839
figure out which one or which part of of

00:14:52,639 --> 00:14:58,480
the disk is not used or you don't want

00:14:55,839 --> 00:14:59,440
to keep so for example if you if you

00:14:58,480 --> 00:15:01,760
just

00:14:59,440 --> 00:15:04,000
which is quite common if you just want

00:15:01,760 --> 00:15:07,120
to keep the next door

00:15:04,000 --> 00:15:09,120
if you want to go from let's say windows

00:15:07,120 --> 00:15:12,560
to nexus or

00:15:09,120 --> 00:15:14,160
debian to nexus and change the

00:15:12,560 --> 00:15:16,800
partitioning layout it's

00:15:14,160 --> 00:15:16,800
basically

00:15:17,279 --> 00:15:24,000
you uh yeah you keep

00:15:20,639 --> 00:15:27,600
um you want to keep just the next door

00:15:24,000 --> 00:15:31,199
and so so far there has

00:15:27,600 --> 00:15:34,880
there have been other um

00:15:31,199 --> 00:15:38,079
other approaches towards this like um

00:15:34,880 --> 00:15:41,120
yeah like like um

00:15:38,079 --> 00:15:43,759
pulling up an image and uh and and

00:15:41,120 --> 00:15:44,240
uh trying to boot from from a particular

00:15:43,759 --> 00:15:47,680
image

00:15:44,240 --> 00:15:49,199
and uh and other i would consider them

00:15:47,680 --> 00:15:51,279
hacks like that

00:15:49,199 --> 00:15:53,839
and even the hedsner one is a heck

00:15:51,279 --> 00:15:54,320
because we we rely on the rescue system

00:15:53,839 --> 00:15:57,920
and we

00:15:54,320 --> 00:15:58,959
can't simply say well we're already on

00:15:57,920 --> 00:16:02,000
the system let's

00:15:58,959 --> 00:16:05,519
assimilate this one and it's

00:16:02,000 --> 00:16:06,959
doing a k exec or reboot into a into a

00:16:05,519 --> 00:16:09,040
kernel with

00:16:06,959 --> 00:16:10,320
with us especially in it rd and the

00:16:09,040 --> 00:16:13,839
device mapper module

00:16:10,320 --> 00:16:18,240
and uh we are getting to

00:16:13,839 --> 00:16:21,600
those three phases so

00:16:18,240 --> 00:16:22,079
once we have marked everything um we get

00:16:21,600 --> 00:16:24,800
to

00:16:22,079 --> 00:16:25,680
phase two which is uh we are writing the

00:16:24,800 --> 00:16:28,399
new

00:16:25,680 --> 00:16:28,720
partition table in the unused portions

00:16:28,399 --> 00:16:31,680
of

00:16:28,720 --> 00:16:32,399
uh the disk so the the ones you

00:16:31,680 --> 00:16:34,959
obviously

00:16:32,399 --> 00:16:36,639
don't want to keep so in theory i

00:16:34,959 --> 00:16:39,279
haven't

00:16:36,639 --> 00:16:41,040
thoroughly tested this this should work

00:16:39,279 --> 00:16:46,240
with our file systems

00:16:41,040 --> 00:16:49,440
like if you um

00:16:46,240 --> 00:16:52,959
they they shouldn't normally do

00:16:49,440 --> 00:16:54,000
something well let's read at a random

00:16:52,959 --> 00:16:57,440
location

00:16:54,000 --> 00:17:01,920
on the disk i hope

00:16:57,440 --> 00:17:01,920
and yeah

00:17:03,680 --> 00:17:07,039
and everything and and this the the

00:17:06,559 --> 00:17:10,240
right

00:17:07,039 --> 00:17:10,880
face um it does it does have another

00:17:10,240 --> 00:17:13,600
table

00:17:10,880 --> 00:17:15,360
which which marks everything or which

00:17:13,600 --> 00:17:18,480
tracks everything that

00:17:15,360 --> 00:17:21,679
has been written and also the offsets

00:17:18,480 --> 00:17:24,959
to or the the the block uh um

00:17:21,679 --> 00:17:27,360
offsets of where it or

00:17:24,959 --> 00:17:28,000
where it usually should be this this is

00:17:27,360 --> 00:17:30,960
something

00:17:28,000 --> 00:17:32,400
a device mapper already has you could

00:17:30,960 --> 00:17:36,240
you can

00:17:32,400 --> 00:17:37,440
basically remap every block on the disk

00:17:36,240 --> 00:17:40,640
to every virtual

00:17:37,440 --> 00:17:40,640
virtual address

00:17:42,400 --> 00:17:46,880
yeah and the last one is the remap part

00:17:45,200 --> 00:17:49,760
which is uh

00:17:46,880 --> 00:17:50,559
simply doing everything in reverse like

00:17:49,760 --> 00:17:53,840
uh

00:17:50,559 --> 00:17:57,120
yeah write everything to the

00:17:53,840 --> 00:18:00,160
to the locations where they should be

00:17:57,120 --> 00:18:04,400
which it's not

00:18:00,160 --> 00:18:05,440
so so uh well we have to consider the

00:18:04,400 --> 00:18:08,640
order of a big b

00:18:05,440 --> 00:18:11,840
because if we um if we

00:18:08,640 --> 00:18:14,960
uh write if we

00:18:11,840 --> 00:18:15,919
if we have a marked block in the from

00:18:14,960 --> 00:18:19,520
from the second

00:18:15,919 --> 00:18:22,160
phase which um which then will

00:18:19,520 --> 00:18:24,080
which correspondence to the fifth to the

00:18:22,160 --> 00:18:26,960
new physical location

00:18:24,080 --> 00:18:27,600
uh we actually will override ourselves

00:18:26,960 --> 00:18:31,200
with

00:18:27,600 --> 00:18:34,160
ourselves which is

00:18:31,200 --> 00:18:34,720
could be quite interesting in the end so

00:18:34,160 --> 00:18:38,400
actually

00:18:34,720 --> 00:18:42,559
um those three phases should get us to

00:18:38,400 --> 00:18:44,720
to the point where we can seamlessly

00:18:42,559 --> 00:18:48,080
or more or less seamlessly if we have

00:18:44,720 --> 00:18:48,080
something like rollback

00:18:50,160 --> 00:18:53,039
which is yeah

00:18:54,640 --> 00:18:59,360
which we have if if we have something

00:18:57,039 --> 00:18:59,840
like uh rollbacks it could be actually

00:18:59,360 --> 00:19:03,200
safe

00:18:59,840 --> 00:19:06,559
i mean uh theoretically my my

00:19:03,200 --> 00:19:07,919
uh goal was to hey does somebody have a

00:19:06,559 --> 00:19:11,200
laptop he wants to

00:19:07,919 --> 00:19:14,080
migrate to another petitioning scheme

00:19:11,200 --> 00:19:14,080
let's test it

00:19:18,559 --> 00:19:29,440
huh pick a friend

00:19:24,480 --> 00:19:29,440
um so um

00:19:29,520 --> 00:19:35,919
yeah so so the the the problem here is

00:19:32,720 --> 00:19:37,440
uh that if we if we want to have

00:19:35,919 --> 00:19:39,600
rollback we have

00:19:37,440 --> 00:19:40,640
we can do this on a disk that's more

00:19:39,600 --> 00:19:44,000
than a

00:19:40,640 --> 00:19:45,919
half of of uh yeah that's allocated more

00:19:44,000 --> 00:19:50,640
than half of its size

00:19:45,919 --> 00:19:54,240
so we could do some workarounds like

00:19:50,640 --> 00:19:56,799
do duplicate stuff and uh

00:19:54,240 --> 00:19:59,520
compress stuff but that that will be

00:19:56,799 --> 00:20:03,520
something for future optimizations but

00:19:59,520 --> 00:20:07,200
right now um the my initial goal is

00:20:03,520 --> 00:20:11,280
my my my short-term goal is to make this

00:20:07,200 --> 00:20:14,159
uh actually um destructive

00:20:11,280 --> 00:20:15,520
in in terms of just keep the next door

00:20:14,159 --> 00:20:20,000
and

00:20:15,520 --> 00:20:22,799
we don't care about rollback at least

00:20:20,000 --> 00:20:23,760
in the first stage uh this is

00:20:22,799 --> 00:20:28,159
particularly

00:20:23,760 --> 00:20:30,799
uh useful for um

00:20:28,159 --> 00:20:31,840
for uh hosting providers so so you

00:20:30,799 --> 00:20:35,120
usually

00:20:31,840 --> 00:20:39,039
um like head center and many more

00:20:35,120 --> 00:20:41,440
you you get um you get um

00:20:39,039 --> 00:20:42,480
a server somewhere physicals or maybe a

00:20:41,440 --> 00:20:45,120
vm

00:20:42,480 --> 00:20:47,120
well there could be a drawback for

00:20:45,120 --> 00:20:48,240
example if you can't change the kernel

00:20:47,120 --> 00:20:52,320
but

00:20:48,240 --> 00:20:55,360
if you if you get a physical machine um

00:20:52,320 --> 00:20:56,240
you you usually for for most of these

00:20:55,360 --> 00:20:58,400
hosts or your

00:20:56,240 --> 00:20:59,360
hosts you don't get hardware access so

00:20:58,400 --> 00:21:02,080
you can't

00:20:59,360 --> 00:21:03,039
run in there with a with a usb stick and

00:21:02,080 --> 00:21:05,919
just

00:21:03,039 --> 00:21:06,320
plug it in uh install nexus on it and

00:21:05,919 --> 00:21:10,159
that's

00:21:06,320 --> 00:21:15,200
it but but they usually come with uh

00:21:10,159 --> 00:21:18,000
pre-installed whatever yeah and

00:21:15,200 --> 00:21:18,880
most of them have rescue systems but not

00:21:18,000 --> 00:21:21,919
all of them

00:21:18,880 --> 00:21:25,280
and so this is um

00:21:21,919 --> 00:21:29,200
an actual solution for for having

00:21:25,280 --> 00:21:32,240
more or having basically a generic

00:21:29,200 --> 00:21:35,280
back end for nexops which

00:21:32,240 --> 00:21:38,480
is um yeah you just

00:21:35,280 --> 00:21:40,159
pointed to some host you you just just

00:21:38,480 --> 00:21:43,200
need to have ssh

00:21:40,159 --> 00:21:44,240
access and that's every thing you need

00:21:43,200 --> 00:21:46,880
to have and you

00:21:44,240 --> 00:21:47,520
just say well i need this partitioning

00:21:46,880 --> 00:21:51,679
layout

00:21:47,520 --> 00:21:54,640
like like uh shown before and

00:21:51,679 --> 00:21:55,440
um yeah and this nexus configuration

00:21:54,640 --> 00:21:58,559
which is

00:21:55,440 --> 00:22:01,039
the same the same configuration or

00:21:58,559 --> 00:22:02,720
that at least that's the goal so you

00:22:01,039 --> 00:22:06,640
just you have your storage

00:22:02,720 --> 00:22:09,200
definition and in your nexus config and

00:22:06,640 --> 00:22:11,039
you're you're basically doing doing the

00:22:09,200 --> 00:22:14,159
same as

00:22:11,039 --> 00:22:17,200
as you as you would have nexus install

00:22:14,159 --> 00:22:20,400
with a config file where it would

00:22:17,200 --> 00:22:23,280
be uh would do partitioning uh

00:22:20,400 --> 00:22:24,240
just you're doing nexus assimilate

00:22:23,280 --> 00:22:28,400
instead so

00:22:24,240 --> 00:22:32,799
next size install is for live uh

00:22:28,400 --> 00:22:35,440
for for for live booted

00:22:32,799 --> 00:22:36,080
usb sticks or a live for a live image

00:22:35,440 --> 00:22:38,880
and

00:22:36,080 --> 00:22:40,880
a nexus assimilate is for live systems

00:22:38,880 --> 00:22:43,120
basically

00:22:40,880 --> 00:22:43,120
here

00:22:44,020 --> 00:22:47,119
[Applause]

00:22:48,880 --> 00:22:56,960
yeah the one advantage is

00:22:53,840 --> 00:23:00,720
because i i thought about doing this

00:22:56,960 --> 00:23:04,480
uh by by streaming the the um

00:23:00,720 --> 00:23:08,400
the closures via network but this is

00:23:04,480 --> 00:23:11,440
um quite uh quite unreal

00:23:08,400 --> 00:23:14,000
reliable um

00:23:11,440 --> 00:23:15,679
and also the the the partitioning

00:23:14,000 --> 00:23:19,039
remapper

00:23:15,679 --> 00:23:22,559
has has the advantage that we

00:23:19,039 --> 00:23:25,679
we basically just need the ram to

00:23:22,559 --> 00:23:28,320
start next part and that's it

00:23:25,679 --> 00:23:29,840
and maybe if you have more ram then you

00:23:28,320 --> 00:23:32,960
have more disk

00:23:29,840 --> 00:23:33,919
which also gives a bit performance

00:23:32,960 --> 00:23:37,280
improvement

00:23:33,919 --> 00:23:39,760
but it it won't um

00:23:37,280 --> 00:23:40,880
it would be a deal breaker for for

00:23:39,760 --> 00:23:43,760
everything

00:23:40,880 --> 00:23:43,760
so um

00:23:44,080 --> 00:23:48,480
yeah and what what i said already nixo's

00:23:47,760 --> 00:23:50,960
install and

00:23:48,480 --> 00:23:53,120
the config that would be everything for

00:23:50,960 --> 00:23:56,240
future nexus and source

00:23:53,120 --> 00:24:00,320
so um yeah

00:23:56,240 --> 00:24:03,360
uh yeah encryption is this one

00:24:00,320 --> 00:24:05,279
thing which isn't such a big problem you

00:24:03,360 --> 00:24:08,240
you just need to do

00:24:05,279 --> 00:24:09,919
for example if you want to to randomize

00:24:08,240 --> 00:24:14,080
the data first and do

00:24:09,919 --> 00:24:18,799
your lux containers or whatever

00:24:14,080 --> 00:24:21,919
or um

00:24:18,799 --> 00:24:25,760
the encrypt um

00:24:21,919 --> 00:24:29,679
on on top of it um and then you could

00:24:25,760 --> 00:24:32,240
uh then because we already know the

00:24:29,679 --> 00:24:32,960
allocated sectors we can just write

00:24:32,240 --> 00:24:38,159
random

00:24:32,960 --> 00:24:38,159
random data in it and we're done and

00:24:38,320 --> 00:24:41,679
yeah and if you have something like like

00:24:40,799 --> 00:24:44,799
a spare drive

00:24:41,679 --> 00:24:47,840
or anything we could we could use that

00:24:44,799 --> 00:24:48,640
as well to speed things up because so so

00:24:47,840 --> 00:24:51,679
we can

00:24:48,640 --> 00:24:54,799
we can if we have enough uh

00:24:51,679 --> 00:24:55,360
space on there we can basically skip the

00:24:54,799 --> 00:24:58,400
second

00:24:55,360 --> 00:25:01,919
step and uh yeah and

00:24:58,400 --> 00:25:02,400
just copy over and just copy everything

00:25:01,919 --> 00:25:06,159
to the

00:25:02,400 --> 00:25:06,159
to the right location

00:25:06,480 --> 00:25:15,840
yeah that's basically it and uh

00:25:09,679 --> 00:25:15,840
yeah um i will push the the code

00:25:16,080 --> 00:25:23,120
i guess yeah starting on

00:25:19,200 --> 00:25:26,240
next week for for the new implementation

00:25:23,120 --> 00:25:26,960
and i also try to to get the kernel

00:25:26,240 --> 00:25:31,360
module

00:25:26,960 --> 00:25:31,360
running but no promises here

00:25:31,760 --> 00:25:35,440
please don't clap no

00:25:39,520 --> 00:25:44,640
okay we have quite some time for

00:25:41,520 --> 00:25:44,640
questions so please

00:25:47,600 --> 00:25:51,760
okay uh so on something like a hessen

00:25:50,400 --> 00:25:53,919
environment

00:25:51,760 --> 00:25:57,440
what is the advantage of this compared

00:25:53,919 --> 00:26:00,400
to starting from a rescue system

00:25:57,440 --> 00:26:00,400
the advantage is

00:26:00,640 --> 00:26:08,000
well for hetzer you you

00:26:04,559 --> 00:26:09,600
you basically have no big advantage

00:26:08,000 --> 00:26:12,000
because

00:26:09,600 --> 00:26:12,960
apart well you have the advantage that

00:26:12,000 --> 00:26:15,760
that you have

00:26:12,960 --> 00:26:16,960
a better partitioner yeah which is next

00:26:15,760 --> 00:26:20,559
part and

00:26:16,960 --> 00:26:24,159
um but it doesn't

00:26:20,559 --> 00:26:28,080
solve anything new for for for the

00:26:24,159 --> 00:26:30,320
for the hexner target it's actually um

00:26:28,080 --> 00:26:32,159
it's actually more useful for adding new

00:26:30,320 --> 00:26:34,080
targets

00:26:32,159 --> 00:26:35,679
okay and then maybe as one second

00:26:34,080 --> 00:26:38,880
question do you think it would

00:26:35,679 --> 00:26:42,559
make sense to get next part into

00:26:38,880 --> 00:26:47,440
mainline nexus that's that's the goal

00:26:42,559 --> 00:26:51,200
basically so there is already the branch

00:26:47,440 --> 00:26:54,240
on on next packages which has

00:26:51,200 --> 00:26:57,440
these changes for the storage attributes

00:26:54,240 --> 00:27:02,480
and yeah

00:26:57,440 --> 00:27:02,480
but they are still subject to change

00:27:03,600 --> 00:27:10,960
and maybe if people disagree or no

00:27:07,360 --> 00:27:10,960
we don't want it that way or

00:27:11,120 --> 00:27:14,240
so i have a question and a note um i'll

00:27:13,440 --> 00:27:17,360
start with a note

00:27:14,240 --> 00:27:19,760
um openstack has a module called

00:27:17,360 --> 00:27:22,399
irony for doing bare metal deployments

00:27:19,760 --> 00:27:23,360
um including doing pixie boot and ipmi

00:27:22,399 --> 00:27:25,760
for being able to

00:27:23,360 --> 00:27:27,520
get access into the bare metal for doing

00:27:25,760 --> 00:27:30,640
these kind of partitioning things

00:27:27,520 --> 00:27:32,480
um the question i have uh a bit confused

00:27:30,640 --> 00:27:34,080
still how you determine the reachability

00:27:32,480 --> 00:27:36,159
of the sector to

00:27:34,080 --> 00:27:38,720
be able to separate the live sectors

00:27:36,159 --> 00:27:41,840
from the the unused sectors

00:27:38,720 --> 00:27:44,000
um by by having a device mapper module

00:27:41,840 --> 00:27:46,480
where

00:27:44,000 --> 00:27:48,320
which i use instead of the real physical

00:27:46,480 --> 00:27:51,919
disk device and

00:27:48,320 --> 00:27:55,600
uh via the device mapper module i'm

00:27:51,919 --> 00:27:59,840
able to to get all accesses

00:27:55,600 --> 00:28:00,399
from i'm basically mounting the the the

00:27:59,840 --> 00:28:03,679
volume

00:28:00,399 --> 00:28:06,720
and doing a read of all files i want to

00:28:03,679 --> 00:28:10,000
to i want to keep and

00:28:06,720 --> 00:28:11,200
uh and at the same time at the module

00:28:10,000 --> 00:28:16,880
level i get

00:28:11,200 --> 00:28:19,679
the the file extents

00:28:16,880 --> 00:28:19,679
any more questions

00:28:21,200 --> 00:28:25,840
it's not completely clear to me how this

00:28:24,399 --> 00:28:28,000
is going to be used

00:28:25,840 --> 00:28:29,840
after conversion because file system

00:28:28,000 --> 00:28:32,000
usually have something like reference

00:28:29,840 --> 00:28:34,320
counts and checksums and so on

00:28:32,000 --> 00:28:36,159
and when you just preserve some blocks

00:28:34,320 --> 00:28:38,799
of a file system and

00:28:36,159 --> 00:28:41,440
clear out the other blocks how is this

00:28:38,799 --> 00:28:44,720
going to work

00:28:41,440 --> 00:28:48,080
um yeah well that that's

00:28:44,720 --> 00:28:51,840
that uh i was already mentioning

00:28:48,080 --> 00:28:54,960
if there would be a read which is random

00:28:51,840 --> 00:28:55,679
or yeah i i don't know any file system

00:28:54,960 --> 00:28:59,440
which does

00:28:55,679 --> 00:29:02,240
random reads but that would be a problem

00:28:59,440 --> 00:29:05,840
but but otherwise if you read

00:29:02,240 --> 00:29:07,520
if you um if you're doing a complete

00:29:05,840 --> 00:29:10,799
read of all the files

00:29:07,520 --> 00:29:10,799
you you want to keep

00:29:11,279 --> 00:29:14,480
at least in theory it should be

00:29:13,320 --> 00:29:17,520
deterministic

00:29:14,480 --> 00:29:20,559
in in that sense that um

00:29:17,520 --> 00:29:22,559
everything that the file system driver

00:29:20,559 --> 00:29:26,159
is going to read will be

00:29:22,559 --> 00:29:29,840
um the same as yeah

00:29:26,159 --> 00:29:32,960
as as if we do it with a

00:29:29,840 --> 00:29:33,279
with a second operation a read operation

00:29:32,960 --> 00:29:36,960
on

00:29:33,279 --> 00:29:40,720
on the same volume basically

00:29:36,960 --> 00:29:43,279
we don't read right mount the volume

00:29:40,720 --> 00:29:43,760
okay then we perhaps have to go step

00:29:43,279 --> 00:29:45,279
back

00:29:43,760 --> 00:29:46,960
it's not completely clear to me what

00:29:45,279 --> 00:29:51,440
you're trying to achieve

00:29:46,960 --> 00:29:54,159
um so let me try to paraphrase it you

00:29:51,440 --> 00:29:55,679
are reading a portion of an existing

00:29:54,159 --> 00:29:58,640
file system

00:29:55,679 --> 00:30:01,279
then you're going to clear out the rest

00:29:58,640 --> 00:30:03,200
and create a new file system with

00:30:01,279 --> 00:30:06,159
only that portion that is going to be

00:30:03,200 --> 00:30:06,159
retained right

00:30:17,279 --> 00:30:23,919
everything over to the new file system

00:30:20,559 --> 00:30:27,360
and then switch back everything

00:30:23,919 --> 00:30:28,399
over the old one or remap everything on

00:30:27,360 --> 00:30:31,039
top of

00:30:28,399 --> 00:30:31,039
the old one

00:30:34,159 --> 00:30:37,039
i tried to

00:30:46,480 --> 00:30:50,799
and we are going to

00:30:59,519 --> 00:31:05,840
we are not interested in

00:31:57,039 --> 00:32:04,640
so in phase 2 we are

00:32:01,600 --> 00:32:15,679
basically writing stuff

00:32:04,640 --> 00:32:19,600
in there

00:32:15,679 --> 00:32:19,600
and so we we um

00:32:19,760 --> 00:32:22,960
which are the the the blocks that

00:32:21,519 --> 00:32:26,880
usually come

00:32:22,960 --> 00:32:30,240
need to come are in

00:32:26,880 --> 00:32:35,440
totally different order and in

00:32:30,240 --> 00:32:35,440
the third phase we basically do

00:32:40,620 --> 00:32:45,880
[Music]

00:32:42,710 --> 00:32:45,880
[Applause]

00:32:51,600 --> 00:32:55,360
this is the remap step

00:32:55,919 --> 00:33:01,440
so we we have uh yeah so

00:32:59,360 --> 00:33:02,480
there shouldn't be anything left from

00:33:01,440 --> 00:33:06,080
the first step

00:33:02,480 --> 00:33:10,080
that that's uh of course without

00:33:06,080 --> 00:33:13,360
the the option to roll back

00:33:10,080 --> 00:33:13,360
is that's more clear

00:33:21,279 --> 00:33:24,559
i guess this is a talk a bit maybe for

00:33:23,440 --> 00:33:29,279
after coffee

00:33:24,559 --> 00:33:29,279
or for lunch right but one more question

00:33:31,840 --> 00:33:35,440
so i think i kind of understood what you

00:33:34,240 --> 00:33:37,600
meant which is like

00:33:35,440 --> 00:33:39,440
you mark all the blocks to access all

00:33:37,600 --> 00:33:42,640
the files that you want to keep

00:33:39,440 --> 00:33:44,880
and yeah all the all the raw data yeah

00:33:42,640 --> 00:33:46,240
so for example if i need something in

00:33:44,880 --> 00:33:48,799
slash next live store

00:33:46,240 --> 00:33:50,640
i will mark slash i will mark nick at an

00:33:48,799 --> 00:33:51,039
excite walmart store i will march the

00:33:50,640 --> 00:33:54,159
path

00:33:51,039 --> 00:33:54,640
within the next store and well you just

00:33:54,159 --> 00:33:58,000
read

00:33:54,640 --> 00:34:01,440
you just read the file and uh

00:33:58,000 --> 00:34:04,559
the the file system underneath it will

00:34:01,440 --> 00:34:08,159
say well i need to read this b3

00:34:04,559 --> 00:34:11,119
and this block and whatever and

00:34:08,159 --> 00:34:12,000
that's where the module comes in because

00:34:11,119 --> 00:34:15,440
at that

00:34:12,000 --> 00:34:18,079
level we are intercepting what is going

00:34:15,440 --> 00:34:18,079
to be read

00:34:18,839 --> 00:34:21,839
okay

00:34:26,480 --> 00:34:33,200
and when you rewrite in the second step

00:34:30,000 --> 00:34:36,399
and the the not in

00:34:33,200 --> 00:34:40,560
the device to the non-marked blocks um

00:34:36,399 --> 00:34:42,879
will you take care that um

00:34:40,560 --> 00:34:44,000
parts belong together like like big

00:34:42,879 --> 00:34:48,639
files could be

00:34:44,000 --> 00:34:53,200
more than a gigabyte um go to the same

00:34:48,639 --> 00:34:57,200
coherence block or is it completely

00:34:53,200 --> 00:35:03,839
washed because you write everything

00:34:57,200 --> 00:35:03,839
together in the end

00:35:08,640 --> 00:35:13,040
so but but you

00:35:10,940 --> 00:35:15,040
[Music]

00:35:13,040 --> 00:35:16,880
but you don't you don't change the order

00:35:15,040 --> 00:35:17,680
of blocks so you can so when you write

00:35:16,880 --> 00:35:20,800
everything in

00:35:17,680 --> 00:35:21,200
in one line in the end it will come out

00:35:20,800 --> 00:35:25,440
as

00:35:21,200 --> 00:35:25,440
this the big file is still in one

00:35:28,240 --> 00:35:32,000
can you be sure that that one file is

00:35:30,320 --> 00:35:37,119
always

00:35:32,000 --> 00:35:37,119
in the same consistency

00:35:38,960 --> 00:35:47,280
if nothing

00:35:44,320 --> 00:35:48,160
um we'll do a bit longer break um i

00:35:47,280 --> 00:35:50,160
guess it's

00:35:48,160 --> 00:35:52,560
we can now have time for some extra

00:35:50,160 --> 00:35:56,320
coffee um

00:35:52,560 --> 00:35:59,280
we start at 12 15.

00:35:56,320 --> 00:36:00,800
um let me just double verify yeah 12 15.

00:35:59,280 --> 00:36:04,640
so we have

00:36:00,800 --> 00:36:08,640
uh 20 minutes bit more

00:36:04,640 --> 00:36:13,280
uh 25 minutes of break and yeah

00:36:08,640 --> 00:36:15,359
thank you

00:36:13,280 --> 00:36:15,359

YouTube URL: https://www.youtube.com/watch?v=ImhgoPDISeA


