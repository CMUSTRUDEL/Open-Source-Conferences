Title: Eelco Dolstra: Nix Roadmap (NixCon 2015)
Publication date: 2020-10-29
Playlist: NixCon 2015 (Berlin)
Description: 
	
Captions: 
	00:00:05,440 --> 00:00:09,440
okay so

00:00:06,879 --> 00:00:10,480
i have taken it upon myself to introduce

00:00:09,440 --> 00:00:13,440
the first speaker

00:00:10,480 --> 00:00:14,960
so the first speaker is probably the one

00:00:13,440 --> 00:00:16,560
person who doesn't need any introduction

00:00:14,960 --> 00:00:19,279
but we'll do it anyway

00:00:16,560 --> 00:00:20,160
it's ilco dolce the guy who started it

00:00:19,279 --> 00:00:23,680
all

00:00:20,160 --> 00:00:24,640
um i think may have been around 10 years

00:00:23,680 --> 00:00:30,160
ago that you

00:00:24,640 --> 00:00:33,520
wrote your phd thesis

00:00:30,160 --> 00:00:35,120
functional software management and

00:00:33,520 --> 00:00:37,520
i think it's the dream of pretty much

00:00:35,120 --> 00:00:39,120
every phd student that 10 years after

00:00:37,520 --> 00:00:42,559
submitting the thesis

00:00:39,120 --> 00:00:42,559
there's a big conference with lots of

00:00:42,840 --> 00:00:48,079
attendees who want to

00:00:45,039 --> 00:00:51,199
dying to talk about the work

00:00:48,079 --> 00:00:53,120
so without much further ado uh please

00:00:51,199 --> 00:00:59,840
welcome elko dollsta

00:00:53,120 --> 00:00:59,840
and his keynote address

00:01:03,280 --> 00:01:06,880
all right okay uh that sounds like it's

00:01:05,760 --> 00:01:11,680
working

00:01:06,880 --> 00:01:14,000
i can hear myself so yeah um

00:01:11,680 --> 00:01:16,159
so let me first start with the important

00:01:14,000 --> 00:01:17,360
thing so welcome everybody and thank you

00:01:16,159 --> 00:01:20,720
all for coming

00:01:17,360 --> 00:01:23,520
and uh we missed a very important

00:01:20,720 --> 00:01:25,520
thank you namely to the organizers so

00:01:23,520 --> 00:01:29,280
rock palace and peter so

00:01:25,520 --> 00:01:29,280
let's give them a big thanks for

00:01:33,040 --> 00:01:40,560
for taking care of the organization and

00:01:36,960 --> 00:01:43,360
so yeah this is a really impressive

00:01:40,560 --> 00:01:43,360
what you did here

00:01:43,680 --> 00:01:48,079
we already had thank you for the sponsor

00:01:46,000 --> 00:01:51,439
so especially since i work for one of

00:01:48,079 --> 00:01:53,759
these i won't ask for another applause

00:01:51,439 --> 00:01:55,759
okay so in this talk i'm going to do

00:01:53,759 --> 00:01:57,680
think two things so i'm going to

00:01:55,759 --> 00:01:59,520
talk a bit a little bit about the state

00:01:57,680 --> 00:02:00,399
of the project and what we've been doing

00:01:59,520 --> 00:02:04,000
in the last

00:02:00,399 --> 00:02:07,280
12 months and then i'm going to

00:02:04,000 --> 00:02:08,959
talk about the road map but i'm not good

00:02:07,280 --> 00:02:11,280
at the visionary stuff so

00:02:08,959 --> 00:02:12,879
uh i'll just talk about some things that

00:02:11,280 --> 00:02:15,200
i think are uh

00:02:12,879 --> 00:02:16,160
uh important in the future and then i'll

00:02:15,200 --> 00:02:19,280
open the floor

00:02:16,160 --> 00:02:22,000
uh to you guys to uh uh

00:02:19,280 --> 00:02:22,560
share your ideas on what's important so

00:02:22,000 --> 00:02:26,400
i would

00:02:22,560 --> 00:02:29,040
like to have a sort of interactive thing

00:02:26,400 --> 00:02:30,319
all right so what has been going on well

00:02:29,040 --> 00:02:32,560
we actually have a very

00:02:30,319 --> 00:02:33,360
nice you could say almost exponential

00:02:32,560 --> 00:02:36,640
growth

00:02:33,360 --> 00:02:39,360
so this is a graph of the the committers

00:02:36,640 --> 00:02:41,280
to the next packages repository

00:02:39,360 --> 00:02:43,360
so as you can see the first few years

00:02:41,280 --> 00:02:45,840
there was not much happening so i was

00:02:43,360 --> 00:02:46,560
writing my thesis and basically nyx was

00:02:45,840 --> 00:02:49,840
a

00:02:46,560 --> 00:02:51,120
vehicle for writing papers as these

00:02:49,840 --> 00:02:54,879
things go

00:02:51,120 --> 00:02:58,319
and then so after 2010 or so

00:02:54,879 --> 00:03:01,400
things really started

00:02:58,319 --> 00:03:03,440
to grow so we're now at something like

00:03:01,400 --> 00:03:07,680
00:03:03,440 --> 00:03:11,519
uh individual committers

00:03:07,680 --> 00:03:15,040
per month so it's quite a

00:03:11,519 --> 00:03:17,360
large growing community so let's see if

00:03:15,040 --> 00:03:19,840
we can keep the exponential growth

00:03:17,360 --> 00:03:19,840
going

00:03:20,879 --> 00:03:24,239
actually it's already tapering off a

00:03:22,959 --> 00:03:25,680
little bit at the end so maybe you

00:03:24,239 --> 00:03:29,360
should ignore the last

00:03:25,680 --> 00:03:30,400
bit so this is the number of commits per

00:03:29,360 --> 00:03:32,879
day

00:03:30,400 --> 00:03:34,640
so it's also uh quite large there was

00:03:32,879 --> 00:03:36,560
actually a peak last year i guess that

00:03:34,640 --> 00:03:40,000
was around the 1412

00:03:36,560 --> 00:03:41,120
uh release time frame so i guess lots of

00:03:40,000 --> 00:03:44,240
people started

00:03:41,120 --> 00:03:45,599
stressing out and doing commits

00:03:44,240 --> 00:03:49,040
[Music]

00:03:45,599 --> 00:03:52,000
so uh yeah also quite a nice growth

00:03:49,040 --> 00:03:52,879
uh or perhaps uh here's a graph actually

00:03:52,000 --> 00:03:55,840
the title is

00:03:52,879 --> 00:03:58,080
uh it's a misnomer this isn't really the

00:03:55,840 --> 00:04:00,879
next packages size it's the

00:03:58,080 --> 00:04:02,560
size of the next packages trunk job set

00:04:00,879 --> 00:04:05,280
on hydra so this

00:04:02,560 --> 00:04:06,560
this is really how stressed our build

00:04:05,280 --> 00:04:10,159
farm is

00:04:06,560 --> 00:04:12,080
uh so the hydra the nix packages job set

00:04:10,159 --> 00:04:15,280
currently consists of

00:04:12,080 --> 00:04:18,720
45 000 jobs so if you're wondering why

00:04:15,280 --> 00:04:22,400
hydra is always having a disc full uh

00:04:18,720 --> 00:04:24,479
this is why um so

00:04:22,400 --> 00:04:27,040
it has been having ups and downs the

00:04:24,479 --> 00:04:30,000
downs are mostly every time our single

00:04:27,040 --> 00:04:32,639
mac osx build machine broke and we

00:04:30,000 --> 00:04:35,919
disabled darwin builds

00:04:32,639 --> 00:04:38,080
you get a big drop so but this is this

00:04:35,919 --> 00:04:40,000
is not a very scientific number because

00:04:38,080 --> 00:04:43,840
there's a lot of double counting and so

00:04:40,000 --> 00:04:43,840
on but

00:04:45,440 --> 00:04:51,199
so perhaps more interesting is uh yeah

00:04:48,880 --> 00:04:52,800
growth in users rather than developers

00:04:51,199 --> 00:04:54,479
so i don't really have any

00:04:52,800 --> 00:04:56,960
measures of that because we don't have

00:04:54,479 --> 00:04:59,440
something like what's called the debian

00:04:56,960 --> 00:05:00,160
installation counter and they have this

00:04:59,440 --> 00:05:02,880
thing where

00:05:00,160 --> 00:05:04,160
users can sort of register themselves uh

00:05:02,880 --> 00:05:06,880
we don't have that but

00:05:04,160 --> 00:05:07,680
uh we have the the binary cache which is

00:05:06,880 --> 00:05:12,880
i guess a

00:05:07,680 --> 00:05:17,120
reasonable uh correlated to

00:05:12,880 --> 00:05:17,919
user growth so this is since 2013 when

00:05:17,120 --> 00:05:20,720
we had the

00:05:17,919 --> 00:05:21,759
binary cache so every time a nick's user

00:05:20,720 --> 00:05:26,800
installs something

00:05:21,759 --> 00:05:30,080
it it comes from cache.nexos.org

00:05:26,800 --> 00:05:33,600
so we're now at some almost 100

00:05:30,080 --> 00:05:35,039
gigabytes of traffic a day so that has

00:05:33,600 --> 00:05:37,360
also been growing

00:05:35,039 --> 00:05:38,560
rather large although rob claims that

00:05:37,360 --> 00:05:41,199
this is mostly him

00:05:38,560 --> 00:05:42,800
downloading stuff from from all his

00:05:41,199 --> 00:05:45,759
machines

00:05:42,800 --> 00:05:48,160
uh or the number of unique ips per day

00:05:45,759 --> 00:05:50,160
so we're now at something like 1600

00:05:48,160 --> 00:05:52,080
per day and i think we had a few hundred

00:05:50,160 --> 00:05:55,280
thousand unique ips over

00:05:52,080 --> 00:05:59,120
the lifetime of the binary cash so

00:05:55,280 --> 00:06:01,199
uh yeah i guess you could conclude from

00:05:59,120 --> 00:06:04,639
this that there are at least 1600

00:06:01,199 --> 00:06:07,919
people a day hitting the cash

00:06:04,639 --> 00:06:11,039
so doing an x-ray and xos operations

00:06:07,919 --> 00:06:11,039
so um

00:06:11,120 --> 00:06:15,039
all right so that's some numbers on our

00:06:13,440 --> 00:06:18,639
progress oh a

00:06:15,039 --> 00:06:22,560
few more so we recently hit our 10 000

00:06:18,639 --> 00:06:25,120
pr slash issue on github so

00:06:22,560 --> 00:06:26,160
uh and most of them are actually closed

00:06:25,120 --> 00:06:29,520
so that's

00:06:26,160 --> 00:06:29,840
that's i guess a good sign uh only about

00:06:29,520 --> 00:06:32,080
uh

00:06:29,840 --> 00:06:33,280
oh there are only a thousand open so

00:06:32,080 --> 00:06:35,199
let's uh

00:06:33,280 --> 00:06:37,919
should probably do something about that

00:06:35,199 --> 00:06:41,280
but i guess that's not too bad

00:06:37,919 --> 00:06:44,080
um all right so what what

00:06:41,280 --> 00:06:44,639
has been happening in the in the last 12

00:06:44,080 --> 00:06:49,440
months

00:06:44,639 --> 00:06:52,080
so i'm so we've had two nexus releases

00:06:49,440 --> 00:06:53,360
i cannot possibly summarize what was in

00:06:52,080 --> 00:06:57,120
them

00:06:53,360 --> 00:07:02,080
thousands of new packages services

00:06:57,120 --> 00:07:05,599
we have a whole new haskell framework uh

00:07:02,080 --> 00:07:08,960
big improvements to gnome kde and so on

00:07:05,599 --> 00:07:10,479
um one thing that i

00:07:08,960 --> 00:07:12,800
really should give a shout out is

00:07:10,479 --> 00:07:14,160
vladimir here uh

00:07:12,800 --> 00:07:16,000
this this is so awesome this is

00:07:14,160 --> 00:07:19,039
something we've wanted for years and now

00:07:16,000 --> 00:07:19,039
we finally have it

00:07:19,670 --> 00:07:24,800
[Applause]

00:07:22,960 --> 00:07:26,560
i had to mention this because these

00:07:24,800 --> 00:07:28,720
slides are made with

00:07:26,560 --> 00:07:30,240
latte using a nyx expression so this is

00:07:28,720 --> 00:07:31,360
the next expression that builds these

00:07:30,240 --> 00:07:34,400
slides

00:07:31,360 --> 00:07:37,840
and it used to be that so i always

00:07:34,400 --> 00:07:41,280
stubbornly kept using tetech because

00:07:37,840 --> 00:07:45,280
uh it's a small only 200 megabyte

00:07:41,280 --> 00:07:45,759
package or so and not tech live which is

00:07:45,280 --> 00:07:48,000
this

00:07:45,759 --> 00:07:49,120
two or three gigabyte monstrosity which

00:07:48,000 --> 00:07:51,599
you can't really

00:07:49,120 --> 00:07:53,360
use because if you want to build your

00:07:51,599 --> 00:07:55,440
slides you would have to first download

00:07:53,360 --> 00:07:57,599
three gigabytes of crap which is bad if

00:07:55,440 --> 00:07:59,919
you're in a hotel with a really bad

00:07:57,599 --> 00:08:00,800
internet connection but now we have this

00:07:59,919 --> 00:08:03,440
really nice

00:08:00,800 --> 00:08:04,240
minimal thing so you only have to

00:08:03,440 --> 00:08:07,759
download

00:08:04,240 --> 00:08:09,440
uh the stuff that you need so i i think

00:08:07,759 --> 00:08:10,639
this is really nice because it's it's

00:08:09,440 --> 00:08:13,680
just an example of

00:08:10,639 --> 00:08:14,319
how nics can sort of infiltrate other

00:08:13,680 --> 00:08:16,080
domains

00:08:14,319 --> 00:08:19,599
because we now really have a better tech

00:08:16,080 --> 00:08:19,599
life than tech life so

00:08:20,960 --> 00:08:25,680
all right i just wanted to give a shout

00:08:23,599 --> 00:08:27,759
out to that

00:08:25,680 --> 00:08:30,400
so what has been happening in nix we

00:08:27,759 --> 00:08:33,680
have had free releases

00:08:30,400 --> 00:08:35,200
lots of new features a few that stand

00:08:33,680 --> 00:08:38,000
out

00:08:35,200 --> 00:08:39,360
so we have signed binary cache support

00:08:38,000 --> 00:08:41,680
which is important for

00:08:39,360 --> 00:08:43,839
security so for instance this allows us

00:08:41,680 --> 00:08:48,399
to

00:08:43,839 --> 00:08:50,800
serve cache.nexos.org or mirror it

00:08:48,399 --> 00:08:52,320
and you don't have to trust the mirror

00:08:50,800 --> 00:08:55,959
you only have to

00:08:52,320 --> 00:08:58,240
have the appropriate public key of

00:08:55,959 --> 00:08:59,200
cash.nixos.org and this allows other

00:08:58,240 --> 00:09:02,560
people to set up

00:08:59,200 --> 00:09:04,080
caches and as long as you

00:09:02,560 --> 00:09:05,600
have the right public keys in your

00:09:04,080 --> 00:09:08,640
installation

00:09:05,600 --> 00:09:10,720
it all works fine um

00:09:08,640 --> 00:09:12,880
automatic downloading of nyx expressions

00:09:10,720 --> 00:09:15,440
i'll come back to that but

00:09:12,880 --> 00:09:17,200
this basically is i think going to make

00:09:15,440 --> 00:09:20,240
nick's channel obsolete

00:09:17,200 --> 00:09:23,680
so here you can now just say

00:09:20,240 --> 00:09:26,560
nix n f and then the url to a

00:09:23,680 --> 00:09:27,279
tarible containing nix expressions uh

00:09:26,560 --> 00:09:30,320
and install

00:09:27,279 --> 00:09:32,080
packages from there and you can also put

00:09:30,320 --> 00:09:34,160
something like that in the nixpath

00:09:32,080 --> 00:09:36,240
environment variable so for instance i

00:09:34,160 --> 00:09:39,760
use this on nixos machines

00:09:36,240 --> 00:09:40,560
in order not to have to uh run nick's

00:09:39,760 --> 00:09:42,720
channel on

00:09:40,560 --> 00:09:45,200
those machines you just set nick's the

00:09:42,720 --> 00:09:49,279
next path environment to point

00:09:45,200 --> 00:09:52,480
uh to a terrible uh like the 1509

00:09:49,279 --> 00:09:54,720
current release uh and uh

00:09:52,480 --> 00:09:56,080
and and then nick's and just does the

00:09:54,720 --> 00:09:57,839
right thing

00:09:56,080 --> 00:09:59,200
and a really big thing that has been

00:09:57,839 --> 00:10:01,519
happening is uh

00:09:59,200 --> 00:10:02,720
well the mac osx support in general so

00:10:01,519 --> 00:10:04,959
in knicks we have had

00:10:02,720 --> 00:10:06,720
sandbox support but more importantly in

00:10:04,959 --> 00:10:09,519
nyx packages we've

00:10:06,720 --> 00:10:11,360
had major improvements to the packaging

00:10:09,519 --> 00:10:14,800
in particular we now have a

00:10:11,360 --> 00:10:15,680
a pure standard environment or almost

00:10:14,800 --> 00:10:18,640
pure so

00:10:15,680 --> 00:10:20,079
it doesn't depend on stuff outside of

00:10:18,640 --> 00:10:23,120
nick's packages

00:10:20,079 --> 00:10:26,560
apart from the c library i guess

00:10:23,120 --> 00:10:28,560
and a few other things so

00:10:26,560 --> 00:10:29,760
i i think you no longer need to have

00:10:28,560 --> 00:10:33,760
xcode

00:10:29,760 --> 00:10:36,000
installed to uh uh to to to to to

00:10:33,760 --> 00:10:38,480
bootstrap or to build things

00:10:36,000 --> 00:10:39,279
uh so this is another great thing so i

00:10:38,480 --> 00:10:42,640
had a few

00:10:39,279 --> 00:10:45,519
of course still a few kinks but uh

00:10:42,640 --> 00:10:46,399
once this works i think really nicks and

00:10:45,519 --> 00:10:49,279
nicks packages

00:10:46,399 --> 00:10:50,000
has the potential of being better than

00:10:49,279 --> 00:10:53,040
home brew

00:10:50,000 --> 00:10:56,399
for uh developers on mac os x

00:10:53,040 --> 00:10:59,680
uh who who wants uh uh to

00:10:56,399 --> 00:11:04,000
to set up their environment so uh have

00:10:59,680 --> 00:11:04,000
another step to world domination

00:11:05,040 --> 00:11:11,279
uh yeah so uh hi so i've been

00:11:08,160 --> 00:11:14,399
doing some work myself on on hydra uh so

00:11:11,279 --> 00:11:18,959
hydra is really a big bottleneck

00:11:14,399 --> 00:11:21,360
to the project because

00:11:18,959 --> 00:11:22,720
well nick's package is really big nixos

00:11:21,360 --> 00:11:25,760
is big

00:11:22,720 --> 00:11:28,160
so yeah we had those 45 packages in the

00:11:25,760 --> 00:11:30,320
next packages job set

00:11:28,160 --> 00:11:32,560
and then multiplied by all the branches

00:11:30,320 --> 00:11:34,880
we have like the staging branch and the

00:11:32,560 --> 00:11:39,040
various release branches

00:11:34,880 --> 00:11:42,160
feature branches so

00:11:39,040 --> 00:11:43,040
basically hydra can't really keep up and

00:11:42,160 --> 00:11:46,240
it has also

00:11:43,040 --> 00:11:48,800
various software problems so

00:11:46,240 --> 00:11:51,279
these are being addressed so part of it

00:11:48,800 --> 00:11:52,399
is already there so we have a new hydra

00:11:51,279 --> 00:11:55,519
q runner that

00:11:52,399 --> 00:11:57,760
schedules builds much more efficiently

00:11:55,519 --> 00:11:58,560
so it used to be the case that hydra was

00:11:57,760 --> 00:12:01,120
really kind of

00:11:58,560 --> 00:12:02,800
stupid so it had a queue of builds and

00:12:01,120 --> 00:12:05,040
then it would

00:12:02,800 --> 00:12:07,360
sort of randomly select some builds and

00:12:05,040 --> 00:12:08,320
basically run a nics build on each of

00:12:07,360 --> 00:12:10,480
them

00:12:08,320 --> 00:12:12,800
but that meant that if all these builds

00:12:10,480 --> 00:12:16,320
depended on the same

00:12:12,800 --> 00:12:18,480
derivation like uh rebuilding gcc

00:12:16,320 --> 00:12:20,720
uh that the whole build farm would be

00:12:18,480 --> 00:12:22,639
doing only one thing namely rebuilding

00:12:20,720 --> 00:12:23,760
gcc so you'd have all those machines

00:12:22,639 --> 00:12:27,040
except one

00:12:23,760 --> 00:12:28,480
being idle so that was really a bad

00:12:27,040 --> 00:12:30,160
utilization

00:12:28,480 --> 00:12:32,240
and now we have a much smarter queue

00:12:30,160 --> 00:12:34,560
runner that just looks at the entire

00:12:32,240 --> 00:12:36,079
queue at the entire dependency graph of

00:12:34,560 --> 00:12:38,160
all the builds in the queues and if

00:12:36,079 --> 00:12:43,040
there's any build steps that can run

00:12:38,160 --> 00:12:43,040
it will run them so that's a lot better

00:12:43,120 --> 00:12:47,440
another thing is a hierar provisioner so

00:12:45,200 --> 00:12:49,440
we can now dynamically scale the build

00:12:47,440 --> 00:12:52,240
farm up and down

00:12:49,440 --> 00:12:53,760
so we can start easy to spot instances

00:12:52,240 --> 00:12:54,320
to do build so for instance if there are

00:12:53,760 --> 00:12:57,440
00:12:54,320 --> 00:13:00,959
000 linux builds in the queue then uh

00:12:57,440 --> 00:13:03,279
it will fire up a dozen spot instances

00:13:00,959 --> 00:13:04,320
uh to sort of quickly burn through the

00:13:03,279 --> 00:13:08,079
queue

00:13:04,320 --> 00:13:10,959
uh now the only sad thing about this is

00:13:08,079 --> 00:13:13,760
that we can do this for uh darwin

00:13:10,959 --> 00:13:14,320
uh because right now we have one mac

00:13:13,760 --> 00:13:18,320
mini

00:13:14,320 --> 00:13:21,839
doing all the uh darwin builds

00:13:18,320 --> 00:13:24,959
uh so uh

00:13:21,839 --> 00:13:26,320
yeah we need to do something about that

00:13:24,959 --> 00:13:28,320
and there are some more improvements on

00:13:26,320 --> 00:13:31,279
the way but i think i have another slide

00:13:28,320 --> 00:13:31,279
about that later on

00:13:32,560 --> 00:13:35,839
all right another thing that has been

00:13:34,079 --> 00:13:39,040
happening is that we have a

00:13:35,839 --> 00:13:40,959
nixos foundation now uh which is a

00:13:39,040 --> 00:13:43,040
non-profit organization

00:13:40,959 --> 00:13:45,199
uh i think the official description in

00:13:43,040 --> 00:13:46,959
the founding document was to support a

00:13:45,199 --> 00:13:51,199
purely functional

00:13:46,959 --> 00:13:51,199
deployment model blah blah blah

00:13:51,920 --> 00:13:57,440
so um yeah so this was really intended

00:13:55,440 --> 00:13:59,360
as a vehicle to be able to handle

00:13:57,440 --> 00:14:01,519
donations so for years people have been

00:13:59,360 --> 00:14:02,079
asking well hydra so slow can i donate

00:14:01,519 --> 00:14:04,560
some money

00:14:02,079 --> 00:14:05,600
or some hardware and we didn't really

00:14:04,560 --> 00:14:08,959
have a

00:14:05,600 --> 00:14:09,839
infrastructure to uh to to deal with

00:14:08,959 --> 00:14:12,639
that

00:14:09,839 --> 00:14:14,240
uh so now we have a foundation and more

00:14:12,639 --> 00:14:16,399
importantly with a bank account and a

00:14:14,240 --> 00:14:20,000
paypal account so uh

00:14:16,399 --> 00:14:22,800
um and and a legal identity uh

00:14:20,000 --> 00:14:23,839
so yeah so we can handle donations and

00:14:22,800 --> 00:14:26,959
we can

00:14:23,839 --> 00:14:27,920
uh use that uh in the future to for

00:14:26,959 --> 00:14:31,519
instance buy

00:14:27,920 --> 00:14:32,320
uh hetzner hardware and to pay amazon

00:14:31,519 --> 00:14:35,680
costs

00:14:32,320 --> 00:14:38,959
uh and to pay for conferences uh

00:14:35,680 --> 00:14:41,519
so uh yeah that's uh that's very good uh

00:14:38,959 --> 00:14:43,040
so maybe at some point in the future the

00:14:41,519 --> 00:14:45,199
foundation could also do other things

00:14:43,040 --> 00:14:47,279
like

00:14:45,199 --> 00:14:49,279
handle copyright assignments but i

00:14:47,279 --> 00:14:52,399
always get very bored thinking about

00:14:49,279 --> 00:14:52,399
that sort of thing so

00:14:53,680 --> 00:14:59,680
all right so that was the past now the

00:14:56,240 --> 00:15:01,920
the future the roadmap

00:14:59,680 --> 00:15:03,040
so i should say that roadmaps are

00:15:01,920 --> 00:15:05,120
fiction

00:15:03,040 --> 00:15:06,480
so in my phd thesis there is actually a

00:15:05,120 --> 00:15:08,399
future work section

00:15:06,480 --> 00:15:10,880
which is what academics do when they

00:15:08,399 --> 00:15:12,000
write a paper there is the obligatory

00:15:10,880 --> 00:15:13,360
future work section

00:15:12,000 --> 00:15:15,920
which describes all the things that

00:15:13,360 --> 00:15:18,079
you're actually not going to do but

00:15:15,920 --> 00:15:18,959
you want to show the reviewers how

00:15:18,079 --> 00:15:20,480
clever you are

00:15:18,959 --> 00:15:22,320
and that you thought about these things

00:15:20,480 --> 00:15:23,360
and you sort of claim them in case

00:15:22,320 --> 00:15:26,880
somebody else

00:15:23,360 --> 00:15:30,000
decides to do them uh but

00:15:26,880 --> 00:15:32,079
number one on that list is for the

00:15:30,000 --> 00:15:35,839
future work is a fully nexified

00:15:32,079 --> 00:15:38,000
system a pure nix-based linux system

00:15:35,839 --> 00:15:40,880
tentatively called nixos

00:15:38,000 --> 00:15:42,320
so that one actually happened so that's

00:15:40,880 --> 00:15:44,639
that's very good

00:15:42,320 --> 00:15:46,079
uh i actually went through the others on

00:15:44,639 --> 00:15:48,399
the list uh and

00:15:46,079 --> 00:15:50,000
uh this was really the only one that

00:15:48,399 --> 00:15:52,160
happened

00:15:50,000 --> 00:15:53,519
um so there's still some work to do

00:15:52,160 --> 00:15:54,000
actually some of these things i've

00:15:53,519 --> 00:15:55,680
totally

00:15:54,000 --> 00:15:58,639
forgotten what they are feature

00:15:55,680 --> 00:16:02,079
selection automatic instantiation no id

00:15:58,639 --> 00:16:04,000
um oh oh this one was like a language

00:16:02,079 --> 00:16:05,759
for builders so there was something in

00:16:04,000 --> 00:16:07,040
there about how bash is a horrible

00:16:05,759 --> 00:16:08,880
programming language and we need

00:16:07,040 --> 00:16:12,639
something better

00:16:08,880 --> 00:16:15,600
so greeks has that just just need to

00:16:12,639 --> 00:16:16,079
give a shout out to them the intentional

00:16:15,600 --> 00:16:17,440
model

00:16:16,079 --> 00:16:21,519
get back to that with all the other

00:16:17,440 --> 00:16:25,199
stuff type system and so on

00:16:21,519 --> 00:16:28,800
don't see that happening anytime soon uh

00:16:25,199 --> 00:16:32,399
but who knows maybe maybe somebody wants

00:16:28,800 --> 00:16:32,399
to do a phd on that and

00:16:32,959 --> 00:16:36,959
all right so uh here are just a few

00:16:35,040 --> 00:16:40,959
things that i i think are uh

00:16:36,959 --> 00:16:42,639
uh interesting uh for nics and uh

00:16:40,959 --> 00:16:45,199
that i'm interested in working on so

00:16:42,639 --> 00:16:47,519
this is by no means a definitive list so

00:16:45,199 --> 00:16:51,839
this is why i'm interested in now

00:16:47,519 --> 00:16:54,480
uh what you all have to say

00:16:51,839 --> 00:16:56,639
so a new command line interface

00:16:54,480 --> 00:16:57,839
distributed or peer-to-peer binary

00:16:56,639 --> 00:17:00,320
caches and a

00:16:57,839 --> 00:17:03,440
content addressed nick store which is a

00:17:00,320 --> 00:17:07,120
nicer name for the intentional model

00:17:03,440 --> 00:17:10,160
um and so

00:17:07,120 --> 00:17:11,839
this is 3.0 so at the current rate our

00:17:10,160 --> 00:17:14,400
versions are going this is probably in

00:17:11,839 --> 00:17:17,679
2030 or so so

00:17:14,400 --> 00:17:19,039
but all right so the this is actually

00:17:17,679 --> 00:17:21,280
this is something that i think

00:17:19,039 --> 00:17:22,559
we should be able to do in uh in in the

00:17:21,280 --> 00:17:25,760
near future

00:17:22,559 --> 00:17:28,400
uh so a new command line interface

00:17:25,760 --> 00:17:29,360
uh so the current one is pretty crafty

00:17:28,400 --> 00:17:32,559
we have all these

00:17:29,360 --> 00:17:34,400
uh separate commands and a lot of them

00:17:32,559 --> 00:17:36,880
have names that don't make sense like

00:17:34,400 --> 00:17:38,799
nics instantiate nobody understands what

00:17:36,880 --> 00:17:41,520
that means so what does it instantiate

00:17:38,799 --> 00:17:45,120
and why should you care

00:17:41,520 --> 00:17:46,480
and it's unclear why some things are

00:17:45,120 --> 00:17:48,240
commands and other

00:17:46,480 --> 00:17:49,919
operations in command so for instance

00:17:48,240 --> 00:17:51,360
there's knicks collect garbage but

00:17:49,919 --> 00:17:54,880
there's also nick store

00:17:51,360 --> 00:17:57,840
dash test gc and they do sort of the

00:17:54,880 --> 00:18:01,039
same thing but not quite

00:17:57,840 --> 00:18:05,200
and yeah so there are a lot of

00:18:01,039 --> 00:18:08,799
uh sub optimal design choices like nixon

00:18:05,200 --> 00:18:12,400
uses package names which is slow

00:18:08,799 --> 00:18:14,160
so if you say nix n i firefox it has to

00:18:12,400 --> 00:18:15,679
evaluate basically all of nick's

00:18:14,160 --> 00:18:17,280
packages

00:18:15,679 --> 00:18:19,840
to figure out which one of those

00:18:17,280 --> 00:18:21,679
packages is firefox

00:18:19,840 --> 00:18:23,200
so this is why most people will say

00:18:21,679 --> 00:18:26,559
nixon i

00:18:23,200 --> 00:18:29,679
a capital letter firefox so

00:18:26,559 --> 00:18:31,840
then it will uh only look at the firefox

00:18:29,679 --> 00:18:33,520
attribute so it will uh

00:18:31,840 --> 00:18:35,200
uh only evaluate the thing that is

00:18:33,520 --> 00:18:39,280
necessary

00:18:35,200 --> 00:18:41,280
um another issue which is kind of in the

00:18:39,280 --> 00:18:43,840
interaction between nyx and nyx packages

00:18:41,280 --> 00:18:47,200
is that next packages

00:18:43,840 --> 00:18:49,120
well so a lot of packages have options

00:18:47,200 --> 00:18:51,880
and are also a bunch of global options

00:18:49,120 --> 00:18:54,480
but they have absolutely no

00:18:51,880 --> 00:18:57,840
discoverability unlike say the nixos

00:18:54,480 --> 00:18:57,840
module system where

00:18:58,000 --> 00:19:03,200
options are automatically

00:19:01,039 --> 00:19:04,480
show up in the manual so you can find

00:19:03,200 --> 00:19:07,000
out about them

00:19:04,480 --> 00:19:09,600
but all these these nix packages

00:19:07,000 --> 00:19:12,080
configurability is

00:19:09,600 --> 00:19:13,760
you have to know that you can pass a

00:19:12,080 --> 00:19:17,919
particular option or do

00:19:13,760 --> 00:19:21,200
override or whatever so

00:19:17,919 --> 00:19:22,960
so we have a system a a purely

00:19:21,200 --> 00:19:25,440
functional system with

00:19:22,960 --> 00:19:28,320
with functions that you can pass

00:19:25,440 --> 00:19:28,320
arguments but

00:19:28,559 --> 00:19:32,160
yeah if users don't know how you can

00:19:30,240 --> 00:19:33,679
pass an argument or that these arguments

00:19:32,160 --> 00:19:37,440
exist it's not very

00:19:33,679 --> 00:19:39,600
useful so and nixon

00:19:37,440 --> 00:19:41,039
only does imperative package management

00:19:39,600 --> 00:19:44,080
so uh nix n

00:19:41,039 --> 00:19:47,760
actions are things like install upgrades

00:19:44,080 --> 00:19:48,559
uh but so this is in contrast to the

00:19:47,760 --> 00:19:50,640
nixos

00:19:48,559 --> 00:19:52,320
style of upgrading where you have a

00:19:50,640 --> 00:19:54,000
declarative specification i want a

00:19:52,320 --> 00:19:57,840
system with these packages

00:19:54,000 --> 00:19:59,760
taken from the most recent or uh

00:19:57,840 --> 00:20:01,520
version of nix packages and then when

00:19:59,760 --> 00:20:03,520
you do an upgrade everything gets

00:20:01,520 --> 00:20:06,880
rebuilt

00:20:03,520 --> 00:20:08,880
so so clearly the knicks and style also

00:20:06,880 --> 00:20:11,919
has advantages so for instance

00:20:08,880 --> 00:20:13,600
i don't want uh all of open office to be

00:20:11,919 --> 00:20:17,200
re-downloaded everything uh

00:20:13,600 --> 00:20:21,039
every time i uh in install uh

00:20:17,200 --> 00:20:22,880
some package um but uh

00:20:21,039 --> 00:20:25,679
yeah clearly there's also a value in

00:20:22,880 --> 00:20:29,039
having the declarative style

00:20:25,679 --> 00:20:32,400
so the solution is to replace it by a

00:20:29,039 --> 00:20:35,600
single git style command so a

00:20:32,400 --> 00:20:37,840
command called nyx with lots of

00:20:35,600 --> 00:20:42,000
sub-commands like nyx install nyxgcc

00:20:37,840 --> 00:20:44,320
nikshell etc so this would presumably be

00:20:42,000 --> 00:20:46,200
based on attribute names by default so

00:20:44,320 --> 00:20:49,360
you could say nyx install

00:20:46,200 --> 00:20:51,520
xorg.x message or python packages dot

00:20:49,360 --> 00:20:54,799
whatever

00:20:51,520 --> 00:20:57,600
and so it would be fast

00:20:54,799 --> 00:20:59,039
and presumably it would also remember

00:20:57,600 --> 00:21:01,360
those attribute names

00:20:59,039 --> 00:21:03,919
and so then later when you do an upgrade

00:21:01,360 --> 00:21:06,960
it you use the attribute name to do the

00:21:03,919 --> 00:21:08,480
upgrade but the semantics here are not

00:21:06,960 --> 00:21:10,640
entirely clear

00:21:08,480 --> 00:21:12,000
yet i mean if you ever if for instance

00:21:10,640 --> 00:21:15,039
if you installed

00:21:12,000 --> 00:21:16,880
uh firefox unstable doesn't actually

00:21:15,039 --> 00:21:17,520
exist but imagine we had something like

00:21:16,880 --> 00:21:20,159
that

00:21:17,520 --> 00:21:20,799
it's unclear whether doing nick's

00:21:20,159 --> 00:21:23,919
upgrade

00:21:20,799 --> 00:21:26,559
should upgrade to the latest firefox

00:21:23,919 --> 00:21:28,720
unstable or to the latest firefox

00:21:26,559 --> 00:21:30,000
and what happens if firefox unstable

00:21:28,720 --> 00:21:32,559
gets removed

00:21:30,000 --> 00:21:34,960
so so there are some issues to figure

00:21:32,559 --> 00:21:34,960
out there

00:21:35,280 --> 00:21:39,919
another thing that lots of people have

00:21:37,679 --> 00:21:43,360
demanded over the years is caching of

00:21:39,919 --> 00:21:47,360
searches so nyx dash qa

00:21:43,360 --> 00:21:49,840
nix n qa is pretty slow

00:21:47,360 --> 00:21:50,480
uh if you're not on an ssd drive this is

00:21:49,840 --> 00:21:52,240
also the

00:21:50,480 --> 00:21:54,559
reason why i say maybe i've never really

00:21:52,240 --> 00:21:56,400
been of favor of implementing caching

00:21:54,559 --> 00:21:58,400
because

00:21:56,400 --> 00:21:59,679
what's the saying heather too hard

00:21:58,400 --> 00:22:02,799
problems in computing

00:21:59,679 --> 00:22:06,320
uh naming and cash coherence so

00:22:02,799 --> 00:22:12,480
uh yeah

00:22:06,320 --> 00:22:15,919
sorry yeah yeah right

00:22:12,480 --> 00:22:17,120
so uh yeah making sure especially given

00:22:15,919 --> 00:22:20,640
that you can pass

00:22:17,120 --> 00:22:22,880
uh options to next packages that might

00:22:20,640 --> 00:22:25,600
influence the result of the evaluation

00:22:22,880 --> 00:22:27,039
uh that makes the caching kind of tricky

00:22:25,600 --> 00:22:29,520
to do

00:22:27,039 --> 00:22:31,200
so really my advice would be to get an

00:22:29,520 --> 00:22:35,039
ssd drive which is

00:22:31,200 --> 00:22:39,120
always good advice but especially for

00:22:35,039 --> 00:22:40,320
nics so maybe also support the

00:22:39,120 --> 00:22:42,320
declarative style

00:22:40,320 --> 00:22:43,360
where you would have a nix rebuild

00:22:42,320 --> 00:22:46,799
command that

00:22:43,360 --> 00:22:48,559
basically works analogously to nexus

00:22:46,799 --> 00:22:52,640
rebuild

00:22:48,559 --> 00:22:54,799
and maybe deprecate channels or

00:22:52,640 --> 00:22:57,120
more precise the next channel command

00:22:54,799 --> 00:22:59,200
because

00:22:57,120 --> 00:23:00,960
we don't really need it anymore now that

00:22:59,200 --> 00:23:04,159
you have you could say

00:23:00,960 --> 00:23:06,799
nick's path is nix packages is and then

00:23:04,159 --> 00:23:08,559
the url of the channel you want to track

00:23:06,799 --> 00:23:10,240
because if you do this nick's end will

00:23:08,559 --> 00:23:11,760
automatically download the latest

00:23:10,240 --> 00:23:12,240
version of the channel so you don't need

00:23:11,760 --> 00:23:16,159
to

00:23:12,240 --> 00:23:17,840
run nick's channel dash update anymore

00:23:16,159 --> 00:23:19,679
well so there are lots of other things

00:23:17,840 --> 00:23:21,600
that can be fixed here so

00:23:19,679 --> 00:23:22,799
i think there is an issue somewhere

00:23:21,600 --> 00:23:25,919
where people are

00:23:22,799 --> 00:23:28,880
throwing around ids for for this

00:23:25,919 --> 00:23:29,280
um so yeah we just need to come up with

00:23:28,880 --> 00:23:32,799
uh

00:23:29,280 --> 00:23:34,440
with something nice um

00:23:32,799 --> 00:23:37,360
yeah so the next package's

00:23:34,440 --> 00:23:39,840
discoverability

00:23:37,360 --> 00:23:41,039
yeah that's that's a tricky problem so

00:23:39,840 --> 00:23:44,960
we need some sort of

00:23:41,039 --> 00:23:46,799
new package formalism than what we

00:23:44,960 --> 00:23:48,880
something better than what we currently

00:23:46,799 --> 00:23:51,919
have also the style where

00:23:48,880 --> 00:23:54,320
a package is a function where we mix

00:23:51,919 --> 00:23:56,000
both the dependencies and the sort of

00:23:54,320 --> 00:24:00,080
the feature

00:23:56,000 --> 00:24:03,279
arguments like enable pulse audio

00:24:00,080 --> 00:24:04,960
so nix and has no id to see that some of

00:24:03,279 --> 00:24:06,960
these things are

00:24:04,960 --> 00:24:09,200
options that you might want to show to

00:24:06,960 --> 00:24:11,760
the user and others are just

00:24:09,200 --> 00:24:13,360
dependencies that are generally not

00:24:11,760 --> 00:24:16,320
interesting to show

00:24:13,360 --> 00:24:18,000
so maybe we need something a function

00:24:16,320 --> 00:24:21,440
like make package

00:24:18,000 --> 00:24:25,600
that separates the dependencies from

00:24:21,440 --> 00:24:28,559
uh the the sort of the option

00:24:25,600 --> 00:24:29,760
uh sort of the user visible options

00:24:28,559 --> 00:24:31,520
something like that so i've

00:24:29,760 --> 00:24:33,360
i don't really have an idea how to do

00:24:31,520 --> 00:24:36,080
that

00:24:33,360 --> 00:24:38,240
but i think we do need something like

00:24:36,080 --> 00:24:42,240
that

00:24:38,240 --> 00:24:43,120
um ah yeah so the distributed binary

00:24:42,240 --> 00:24:45,360
cash

00:24:43,120 --> 00:24:46,240
or the peer-to-peer cash so this would

00:24:45,360 --> 00:24:49,679
be

00:24:46,240 --> 00:24:53,360
is also something that people

00:24:49,679 --> 00:24:56,159
have wanted for a long time so

00:24:53,360 --> 00:24:58,559
maybe this would even allow us to get

00:24:56,159 --> 00:25:01,440
rid of having a big hydra

00:24:58,559 --> 00:25:02,159
build farm so basically people could

00:25:01,440 --> 00:25:05,120
just

00:25:02,159 --> 00:25:06,799
build stuff upload it somewhere um and

00:25:05,120 --> 00:25:10,000
maybe even

00:25:06,799 --> 00:25:13,679
publish it via ipfs

00:25:10,000 --> 00:25:14,000
and then if enough people have built a

00:25:13,679 --> 00:25:16,640
certain

00:25:14,000 --> 00:25:19,520
package and it had the same build result

00:25:16,640 --> 00:25:21,600
then you can trust it

00:25:19,520 --> 00:25:23,039
so obviously this is risky huh what do

00:25:21,600 --> 00:25:25,200
you do if there are

00:25:23,039 --> 00:25:26,480
sufficiently number of bad people who

00:25:25,200 --> 00:25:30,799
are

00:25:26,480 --> 00:25:32,559
publishing trojans uh so uh

00:25:30,799 --> 00:25:33,840
this is really something of a research

00:25:32,559 --> 00:25:36,159
issue but uh

00:25:33,840 --> 00:25:37,679
yeah the idea would be that uh you would

00:25:36,159 --> 00:25:40,720
only download a binary

00:25:37,679 --> 00:25:42,720
uh if from from a binary cache

00:25:40,720 --> 00:25:46,000
if a specific binary has at least n

00:25:42,720 --> 00:25:46,000
signatures something like that

00:25:46,159 --> 00:25:51,840
so this does require a

00:25:49,360 --> 00:25:53,440
greater build determinism than we have

00:25:51,840 --> 00:25:54,840
currently so

00:25:53,440 --> 00:25:57,279
nyx has always been about

00:25:54,840 --> 00:26:00,480
reproducibility of builds but not about

00:25:57,279 --> 00:26:01,760
bitwise exact reproducibility so for

00:26:00,480 --> 00:26:05,760
instance things like

00:26:01,760 --> 00:26:09,440
timestamps do end up in builds

00:26:05,760 --> 00:26:10,400
and that breaks this whole thing because

00:26:09,440 --> 00:26:12,240
uh

00:26:10,400 --> 00:26:14,400
if different people are building a

00:26:12,240 --> 00:26:16,240
package and they end up with slightly

00:26:14,400 --> 00:26:19,520
different binaries

00:26:16,240 --> 00:26:20,240
uh then also put different signatures on

00:26:19,520 --> 00:26:22,480
that so

00:26:20,240 --> 00:26:24,480
you'll never reach the required number

00:26:22,480 --> 00:26:27,480
of signatures

00:26:24,480 --> 00:26:29,279
so that's why we want exact

00:26:27,480 --> 00:26:31,120
reproducibility which is

00:26:29,279 --> 00:26:33,720
a hot topic at the moment so for

00:26:31,120 --> 00:26:36,320
instance i think debian got

00:26:33,720 --> 00:26:39,279
a few hundred thousand dollars from the

00:26:36,320 --> 00:26:43,679
linux foundation to work on

00:26:39,279 --> 00:26:46,320
improving build determinism so

00:26:43,679 --> 00:26:47,200
hopefully things will come out of that

00:26:46,320 --> 00:26:49,919
that we can

00:26:47,200 --> 00:26:49,919
use as well

00:26:50,960 --> 00:26:55,039
so another thing uh is uh the content to

00:26:54,640 --> 00:26:57,520
dress

00:26:55,039 --> 00:26:59,360
nik store uh also known as the

00:26:57,520 --> 00:27:02,480
intentional model

00:26:59,360 --> 00:27:04,240
so that's really the only

00:27:02,480 --> 00:27:06,400
way the only reason you need to care

00:27:04,240 --> 00:27:06,880
about is that it allows any user to

00:27:06,400 --> 00:27:09,919
install

00:27:06,880 --> 00:27:13,679
packages from any binary cache without

00:27:09,919 --> 00:27:13,679
having to be rude so right now

00:27:14,720 --> 00:27:21,760
with nics with the nix daemon users can

00:27:18,240 --> 00:27:24,000
install packages uh from source

00:27:21,760 --> 00:27:25,360
uh or they can install binaries as long

00:27:24,000 --> 00:27:28,640
as uh

00:27:25,360 --> 00:27:32,000
that binary cache is trusted by

00:27:28,640 --> 00:27:34,960
uh by root so you you cannot

00:27:32,000 --> 00:27:37,120
just point at an arbitrary binary cache

00:27:34,960 --> 00:27:40,799
and pull binaries from there

00:27:37,120 --> 00:27:40,799
and the reason is that um

00:27:41,200 --> 00:27:46,960
nix has to trust that a particular

00:27:44,480 --> 00:27:49,520
output corresponds to a particular

00:27:46,960 --> 00:27:52,880
derivation so if i type nixon

00:27:49,520 --> 00:27:53,840
firefox it has to trust that a

00:27:52,880 --> 00:27:55,520
particular

00:27:53,840 --> 00:27:58,720
binary in the cache is actually the

00:27:55,520 --> 00:28:00,480
result of building firefox and not

00:27:58,720 --> 00:28:03,760
the result of building firefox and

00:28:00,480 --> 00:28:05,760
inserting a trojan horse in there so

00:28:03,760 --> 00:28:07,279
or or just replacing it with a script

00:28:05,760 --> 00:28:10,640
that

00:28:07,279 --> 00:28:10,640
formats your hard drive so

00:28:11,760 --> 00:28:15,760
so if you had a content address

00:28:13,279 --> 00:28:18,880
nickstore then

00:28:15,760 --> 00:28:20,960
basically you you you don't need that

00:28:18,880 --> 00:28:22,799
kind of trust anymore any user can do

00:28:20,960 --> 00:28:26,880
anything so

00:28:22,799 --> 00:28:26,880
that would be uh very nice

00:28:27,600 --> 00:28:31,679
all right so that was for nick so how

00:28:29,679 --> 00:28:34,480
about nixos

00:28:31,679 --> 00:28:35,679
uh well a few things as out there are

00:28:34,480 --> 00:28:38,799
the standard things like

00:28:35,679 --> 00:28:40,880
systemd update which has been uh

00:28:38,799 --> 00:28:44,720
languishing for a while but finally we

00:28:40,880 --> 00:28:48,159
have systemd227

00:28:44,720 --> 00:28:49,440
about to hit master

00:28:48,159 --> 00:28:51,840
there are other things we should do like

00:28:49,440 --> 00:28:54,559
gcc 5

00:28:51,840 --> 00:28:55,919
but the main thing that i think is very

00:28:54,559 --> 00:28:59,200
important is

00:28:55,919 --> 00:29:01,520
closure size reduction as kind of a

00:28:59,200 --> 00:29:04,240
strategic goal i think

00:29:01,520 --> 00:29:05,039
because right now nixos is kind of fat

00:29:04,240 --> 00:29:08,399
so

00:29:05,039 --> 00:29:11,919
for instance uh the configuration

00:29:08,399 --> 00:29:14,000
the system closure of my laptop is

00:29:11,919 --> 00:29:17,360
something like three gigabytes

00:29:14,000 --> 00:29:17,919
now i i don't really care about that

00:29:17,360 --> 00:29:20,399
because

00:29:17,919 --> 00:29:21,120
uh my laptop has plenty of disk space

00:29:20,399 --> 00:29:23,200
and it has

00:29:21,120 --> 00:29:24,720
generally a fast internet connection but

00:29:23,200 --> 00:29:29,120
for things like containers

00:29:24,720 --> 00:29:31,039
and cloud deployments you really want

00:29:29,120 --> 00:29:32,720
the closure to be as small as possible

00:29:31,039 --> 00:29:35,840
because for instance if we use

00:29:32,720 --> 00:29:39,039
nixops to deploy a gazillion ec2

00:29:35,840 --> 00:29:42,240
instances we have to

00:29:39,039 --> 00:29:43,840
upload or at least part of the uh

00:29:42,240 --> 00:29:45,360
the system closure to each of those

00:29:43,840 --> 00:29:49,120
machines so

00:29:45,360 --> 00:29:52,240
the smaller the closure is the better

00:29:49,120 --> 00:29:55,520
now the reason why nixos

00:29:52,240 --> 00:29:56,880
is rather big is that unlike other

00:29:55,520 --> 00:29:59,600
distributions

00:29:56,880 --> 00:30:00,399
our packages are generally not split

00:29:59,600 --> 00:30:03,840
into

00:30:00,399 --> 00:30:07,039
uh sub packages like

00:30:03,840 --> 00:30:08,000
well the binaries the the headers the

00:30:07,039 --> 00:30:10,880
static library

00:30:08,000 --> 00:30:11,600
stuff like that so nyx has a feature for

00:30:10,880 --> 00:30:14,159
that called

00:30:11,600 --> 00:30:15,760
multiple outputs so there you can have a

00:30:14,159 --> 00:30:18,000
derivation

00:30:15,760 --> 00:30:19,760
with multiple that produces multiple

00:30:18,000 --> 00:30:22,080
store paths and then for instance you

00:30:19,760 --> 00:30:23,919
can put the documentation which

00:30:22,080 --> 00:30:25,200
nobody cares about because you just

00:30:23,919 --> 00:30:28,320
google it

00:30:25,200 --> 00:30:31,840
into a separate output

00:30:28,320 --> 00:30:33,919
and headers in a separate output so

00:30:31,840 --> 00:30:37,200
so that they don't end up in the in the

00:30:33,919 --> 00:30:39,039
system closure

00:30:37,200 --> 00:30:40,480
now actually this has been going on for

00:30:39,039 --> 00:30:42,480
a long time

00:30:40,480 --> 00:30:44,120
so already something like three years

00:30:42,480 --> 00:30:48,240
ago i had

00:30:44,120 --> 00:30:51,600
a basic prototype for that that

00:30:48,240 --> 00:30:54,320
reduced closures a lot so things like uh

00:30:51,600 --> 00:30:56,080
what was it the pan news reader we had

00:30:54,320 --> 00:31:00,559
closure reduction from

00:30:56,080 --> 00:31:03,600
400 megabytes to 100 megabytes or so or

00:31:00,559 --> 00:31:06,720
so it was really a lot um

00:31:03,600 --> 00:31:09,919
but it never made it into uh

00:31:06,720 --> 00:31:13,440
into master so uh vladimir has been

00:31:09,919 --> 00:31:17,679
working a lot on this so hopefully

00:31:13,440 --> 00:31:19,600
we can get some of this soon

00:31:17,679 --> 00:31:22,000
we should probably uh stop doing these

00:31:19,600 --> 00:31:25,840
things in separate branches because that

00:31:22,000 --> 00:31:28,399
tends to uh uh uh diverge a lot and

00:31:25,840 --> 00:31:29,120
and especially so it would probably be

00:31:28,399 --> 00:31:32,320
better

00:31:29,120 --> 00:31:34,080
to to do uh these things in in small

00:31:32,320 --> 00:31:38,000
steps

00:31:34,080 --> 00:31:40,480
and and quickly merge them into master

00:31:38,000 --> 00:31:44,320
but this is always a hard problem how to

00:31:40,480 --> 00:31:47,360
how to handle these kinds of branches

00:31:44,320 --> 00:31:48,080
uh yeah so some hydra improvements that

00:31:47,360 --> 00:31:51,760
we uh

00:31:48,080 --> 00:31:55,279
really need so right now uh

00:31:51,760 --> 00:31:57,279
so yeah like i said we really have a

00:31:55,279 --> 00:31:59,200
bottleneck because we have a central

00:31:57,279 --> 00:32:01,120
hydra machine which has

00:31:59,200 --> 00:32:03,279
something like three terabytes of disk

00:32:01,120 --> 00:32:06,240
space

00:32:03,279 --> 00:32:08,240
uh which we're on the verge of

00:32:06,240 --> 00:32:10,320
definitively running out of so

00:32:08,240 --> 00:32:15,600
this week we had some disc full and i

00:32:10,320 --> 00:32:17,600
couldn't figure out how to uh

00:32:15,600 --> 00:32:19,519
clear up some disk space so it was

00:32:17,600 --> 00:32:24,159
deleting some old job sets but

00:32:19,519 --> 00:32:24,720
uh and it's also really slow so this

00:32:24,159 --> 00:32:28,880
machine

00:32:24,720 --> 00:32:30,480
uh so so everything that hydra does so

00:32:28,880 --> 00:32:32,159
every package that it builds so it

00:32:30,480 --> 00:32:33,600
builds them on separate machines but it

00:32:32,159 --> 00:32:34,399
all has to go through this central

00:32:33,600 --> 00:32:37,120
machine

00:32:34,399 --> 00:32:39,760
so which has a really slow rate

00:32:37,120 --> 00:32:42,000
something disk

00:32:39,760 --> 00:32:43,760
so very often the load on this machine

00:32:42,000 --> 00:32:45,919
goes to something like 100

00:32:43,760 --> 00:32:47,440
because you have 100 processors blocked

00:32:45,919 --> 00:32:50,720
on doing i o

00:32:47,440 --> 00:32:54,240
so uh so that's that's terrible

00:32:50,720 --> 00:32:54,240
uh so the

00:32:54,480 --> 00:32:58,000
so the next thing i want to do about the

00:32:56,159 --> 00:33:01,120
hydra q runner is to have

00:32:58,000 --> 00:33:03,120
builds directly uploaded to the binary

00:33:01,120 --> 00:33:03,519
cache so they don't have to be stored on

00:33:03,120 --> 00:33:07,519
the

00:33:03,519 --> 00:33:09,600
local nik store of this central machine

00:33:07,519 --> 00:33:10,559
so this would also be nice for users

00:33:09,600 --> 00:33:13,360
directly because

00:33:10,559 --> 00:33:14,799
uh you don't have to wait until the

00:33:13,360 --> 00:33:17,519
contents of this machine get

00:33:14,799 --> 00:33:19,760
mirrored into cache.nixos.org so things

00:33:17,519 --> 00:33:22,080
would end up in cast.nixores.org

00:33:19,760 --> 00:33:24,960
directly so as soon as high-res

00:33:22,080 --> 00:33:26,480
builds something your your builds get

00:33:24,960 --> 00:33:30,080
faster

00:33:26,480 --> 00:33:30,799
um and and of course we have unlimited

00:33:30,080 --> 00:33:34,000
disk space

00:33:30,799 --> 00:33:34,000
on ec2 so

00:33:34,640 --> 00:33:38,159
and the other thing that we really need

00:33:36,080 --> 00:33:40,320
is more mac osx machines

00:33:38,159 --> 00:33:41,200
and since those are not so easily

00:33:40,320 --> 00:33:44,399
proficient

00:33:41,200 --> 00:33:45,679
uh that's uh we'll have to figure

00:33:44,399 --> 00:33:47,840
something out i mean

00:33:45,679 --> 00:33:49,919
there is we use some company at

00:33:47,840 --> 00:33:52,720
logicblocks we use some company in

00:33:49,919 --> 00:33:58,080
atlanta i think that provides

00:33:52,720 --> 00:33:58,080
mac osx cloud machines sort of

00:33:58,399 --> 00:34:04,880
so we should plug some in

00:34:01,760 --> 00:34:08,159
oh that's actually my last slide so

00:34:04,880 --> 00:34:08,720
that was all i had to say so uh yeah i

00:34:08,159 --> 00:34:12,560
would

00:34:08,720 --> 00:34:16,879
like to open the floor to uh

00:34:12,560 --> 00:34:20,000
whatever crazy ideas or demands you have

00:34:16,879 --> 00:34:25,040
so if you think we should do this

00:34:20,000 --> 00:34:27,200
we should not do this then please say so

00:34:25,040 --> 00:34:29,040
so we have 15 to 20 minutes for

00:34:27,200 --> 00:34:31,599
questions so

00:34:29,040 --> 00:34:31,599
go wild

00:34:32,960 --> 00:34:36,159
it's probably a very bad idea but for

00:34:35,119 --> 00:34:40,159
build determinism

00:34:36,159 --> 00:34:40,560
uh why not have an external signature

00:34:40,159 --> 00:34:44,000
and an

00:34:40,560 --> 00:34:48,879
internal signature what does that mean

00:34:44,000 --> 00:34:52,800
though versus um uh you you change some

00:34:48,879 --> 00:34:54,800
some uh yeah you have some

00:34:52,800 --> 00:34:56,399
some file which has timestamp you know

00:34:54,800 --> 00:35:00,320
it doesn't influence

00:34:56,399 --> 00:35:00,320
the external behavior of your program

00:35:00,960 --> 00:35:04,560
right but how do you know it doesn't

00:35:02,640 --> 00:35:05,839
influence it i mean that's always

00:35:04,560 --> 00:35:08,160
so phrases take something like a

00:35:05,839 --> 00:35:11,119
timestamp so so generally

00:35:08,160 --> 00:35:11,680
it doesn't influence it uh but uh nix

00:35:11,119 --> 00:35:13,440
doesn't know

00:35:11,680 --> 00:35:16,160
anything about well for instance you

00:35:13,440 --> 00:35:19,680
might have a an output like a dot a file

00:35:16,160 --> 00:35:21,119
which has a timestamp or timestamps

00:35:19,680 --> 00:35:23,280
embedded in it

00:35:21,119 --> 00:35:24,960
uh nyx doesn't know anything about dot a

00:35:23,280 --> 00:35:27,440
file so it doesn't know that those

00:35:24,960 --> 00:35:28,720
timestamps don't matter all it sees is

00:35:27,440 --> 00:35:31,200
uh

00:35:28,720 --> 00:35:32,480
a lot of bites uh and it cannot

00:35:31,200 --> 00:35:35,520
distinguish between

00:35:32,480 --> 00:35:37,520
good differences and and bad differences

00:35:35,520 --> 00:35:39,040
except if he was supported and been

00:35:37,520 --> 00:35:41,599
declared as such

00:35:39,040 --> 00:35:44,160
have you ever thought about that oh so

00:35:41,599 --> 00:35:46,880
you would declare in the derivation

00:35:44,160 --> 00:35:49,599
like these kinds of changes don't matter

00:35:46,880 --> 00:35:49,599
something like that

00:35:51,599 --> 00:35:57,680
yeah if you had some but but it would

00:35:54,640 --> 00:36:00,000
have to be a pretty powerful way i mean

00:35:57,680 --> 00:36:02,480
for instance specifying that uh

00:36:00,000 --> 00:36:05,119
timestamps in a dot a don't matter

00:36:02,480 --> 00:36:06,640
uh yeah how would you specify that what

00:36:05,119 --> 00:36:07,839
kind of formalism would you have

00:36:06,640 --> 00:36:10,160
something to declare

00:36:07,839 --> 00:36:12,560
certain patterns in binaries don't

00:36:10,160 --> 00:36:15,760
matter or

00:36:12,560 --> 00:36:17,520
so it would in that

00:36:15,760 --> 00:36:20,079
that kind of situation it's better to

00:36:17,520 --> 00:36:24,240
just fix the package so that it

00:36:20,079 --> 00:36:24,240
generates deterministic dot a files

00:36:24,400 --> 00:36:29,200
right if you can yeah yeah yeah well so

00:36:27,599 --> 00:36:31,359
some of these things are easy like the

00:36:29,200 --> 00:36:33,839
dot a files so it turns out that

00:36:31,359 --> 00:36:35,359
i think nowadays there is an option to

00:36:33,839 --> 00:36:36,720
make them deterministic i think we're

00:36:35,359 --> 00:36:40,640
even using that

00:36:36,720 --> 00:36:44,400
um but then there are things like uh um

00:36:40,640 --> 00:36:46,800
uh for instance the gcc profiled built

00:36:44,400 --> 00:36:47,760
so it when you compile gc it does a

00:36:46,800 --> 00:36:50,560
profile run

00:36:47,760 --> 00:36:52,240
and uh so the result of that is very

00:36:50,560 --> 00:36:55,280
timing sensitive

00:36:52,240 --> 00:36:58,320
so the gcc you get depends uh

00:36:55,280 --> 00:37:01,359
might be influenced very slightly by uh

00:36:58,320 --> 00:37:04,240
timings and build time and yeah there's

00:37:01,359 --> 00:37:06,560
there's no way you can specify that uh

00:37:04,240 --> 00:37:10,560
this binary is equivalent to this binary

00:37:06,560 --> 00:37:10,560
i guess yeah that's just too hard

00:37:16,320 --> 00:37:19,599
this is just a kind of idea or

00:37:18,880 --> 00:37:23,040
suggestion

00:37:19,599 --> 00:37:24,880
we use nyx a lot in production right now

00:37:23,040 --> 00:37:26,400
the company i'm at which is the allen

00:37:24,880 --> 00:37:27,359
institute of artificial intelligence in

00:37:26,400 --> 00:37:30,560
seattle

00:37:27,359 --> 00:37:32,160
and uh one thing we've run into in

00:37:30,560 --> 00:37:33,839
introducing mix to new people

00:37:32,160 --> 00:37:35,520
we've got a lot of mixed expressions we

00:37:33,839 --> 00:37:36,079
use them to manage data sets all sorts

00:37:35,520 --> 00:37:39,280
of stuff

00:37:36,079 --> 00:37:40,720
um but when new people come the error

00:37:39,280 --> 00:37:41,760
messages a lot of times that we get from

00:37:40,720 --> 00:37:43,359
the parser

00:37:41,760 --> 00:37:44,880
um or the expressions can be very

00:37:43,359 --> 00:37:46,560
cryptic um i think as far as

00:37:44,880 --> 00:37:47,839
adoptability that's when the core issues

00:37:46,560 --> 00:37:48,880
we run into and like

00:37:47,839 --> 00:37:52,079
when we have new team members we're

00:37:48,880 --> 00:37:54,000
teaching it to is small little errors

00:37:52,079 --> 00:37:55,920
you know in you forget a semicolon

00:37:54,000 --> 00:37:58,560
somewhere or you don't

00:37:55,920 --> 00:37:59,200
you know close a string can result in

00:37:58,560 --> 00:38:01,520
just the

00:37:59,200 --> 00:38:02,880
absolutely you know very disconnected

00:38:01,520 --> 00:38:05,040
error messages so

00:38:02,880 --> 00:38:06,560
that would just be one thing i think

00:38:05,040 --> 00:38:07,920
from adoptability perspective we need to

00:38:06,560 --> 00:38:11,280
improve is just

00:38:07,920 --> 00:38:14,720
error messages yes as simple as that is

00:38:11,280 --> 00:38:16,800
yeah absolutely yeah it's kind of a hard

00:38:14,720 --> 00:38:18,880
problem so actually what you mentioned

00:38:16,800 --> 00:38:19,280
so syntax errors in my experience are

00:38:18,880 --> 00:38:21,119
not

00:38:19,280 --> 00:38:22,800
too bad because they're kind of

00:38:21,119 --> 00:38:24,240
localized it will tell you there's a

00:38:22,800 --> 00:38:26,800
parse error at that point

00:38:24,240 --> 00:38:27,359
the really hard problem is if you have

00:38:26,800 --> 00:38:29,599
say

00:38:27,359 --> 00:38:31,680
in an x-ray configuration you have some

00:38:29,599 --> 00:38:34,240
some type error basically

00:38:31,680 --> 00:38:35,280
and you get a giant stacked race and you

00:38:34,240 --> 00:38:39,040
have no idea

00:38:35,280 --> 00:38:45,200
where this comes from and what causes it

00:38:39,040 --> 00:38:45,200
and yeah and it's also not even clear

00:38:45,359 --> 00:38:49,040
whether for instance a giant stack trace

00:38:47,200 --> 00:38:52,079
is actually helpful because it's just

00:38:49,040 --> 00:38:52,560
uh all that garbage vomited over your

00:38:52,079 --> 00:38:57,119
screen

00:38:52,560 --> 00:38:57,119
generally just scares people away

00:38:58,839 --> 00:39:01,839
um

00:39:03,920 --> 00:39:08,079
yeah yeah i think yeah whenever you have

00:39:06,880 --> 00:39:11,520
a weird case like that

00:39:08,079 --> 00:39:11,520
yeah make a bug yeah

00:39:11,920 --> 00:39:16,240
hi uh two things first on you needing

00:39:15,359 --> 00:39:18,320
more mac os

00:39:16,240 --> 00:39:19,680
and builders have you considered or

00:39:18,320 --> 00:39:22,160
maybe this isn't possible with

00:39:19,680 --> 00:39:23,280
just virtualization like starting some

00:39:22,160 --> 00:39:26,640
linux and starting

00:39:23,280 --> 00:39:30,160
mac os virtualized and building inside

00:39:26,640 --> 00:39:31,520
that he didn't need hardware then i i

00:39:30,160 --> 00:39:34,000
think

00:39:31,520 --> 00:39:35,119
i i think we we sort of thought about it

00:39:34,000 --> 00:39:36,880
but

00:39:35,119 --> 00:39:38,560
yeah there's always kind of the the

00:39:36,880 --> 00:39:42,000
legal issue that you're not allowed to

00:39:38,560 --> 00:39:45,200
virtualize mac osx or uh

00:39:42,000 --> 00:39:47,280
i didn't know that okay so people

00:39:45,200 --> 00:39:57,280
you can do it but it's it's not really

00:39:47,280 --> 00:40:00,400
illegal cannot confirm nor deny

00:39:57,280 --> 00:40:03,440
right right right right so so then we

00:40:00,400 --> 00:40:05,440
okay uh just second thing on on

00:40:03,440 --> 00:40:06,960
the previous slide you said you had the

00:40:05,440 --> 00:40:11,760
idea of caching

00:40:06,960 --> 00:40:14,240
uh the names for next search

00:40:11,760 --> 00:40:14,960
what came up in my mind there is just

00:40:14,240 --> 00:40:16,560
that you really

00:40:14,960 --> 00:40:18,720
need a different representation of the

00:40:16,560 --> 00:40:22,319
data structures like a reverse index

00:40:18,720 --> 00:40:25,200
uh to to do faster search

00:40:22,319 --> 00:40:25,599
to find these things caching didn't

00:40:25,200 --> 00:40:29,200
really

00:40:25,599 --> 00:40:30,319
make sense to me there i think the cache

00:40:29,200 --> 00:40:33,839
is just

00:40:30,319 --> 00:40:37,200
well it's just a cache show it stores

00:40:33,839 --> 00:40:40,480
uh the list of packages

00:40:37,200 --> 00:40:43,520
attributes uh versions descriptions

00:40:40,480 --> 00:40:47,200
all the metadata uh to make

00:40:43,520 --> 00:40:50,839
nick's and or nick's queries faster

00:40:47,200 --> 00:40:54,400
so if you then do nick's nics

00:40:50,839 --> 00:40:58,079
install or actually if you do nix

00:40:54,400 --> 00:41:01,359
search uh firefox or something like that

00:40:58,079 --> 00:41:02,800
it would uh be able to very quickly

00:41:01,359 --> 00:41:04,400
search the metadata

00:41:02,800 --> 00:41:06,160
but but of course this whole caching

00:41:04,400 --> 00:41:09,040
stuff becomes a lot less important

00:41:06,160 --> 00:41:11,280
if we're installing by attribute name by

00:41:09,040 --> 00:41:13,920
default

00:41:11,280 --> 00:41:17,839
so it might actually be that nobody

00:41:13,920 --> 00:41:17,839
cares anymore about caching once we do

00:41:18,839 --> 00:41:25,040
that

00:41:21,839 --> 00:41:26,000
hello a quick practical question you

00:41:25,040 --> 00:41:28,079
said

00:41:26,000 --> 00:41:31,920
we should define multiple outputs for

00:41:28,079 --> 00:41:35,359
the packages to make the closure smaller

00:41:31,920 --> 00:41:39,119
if i for example new tls has

00:41:35,359 --> 00:41:42,400
the the default out and a man output

00:41:39,119 --> 00:41:46,960
defined and when i look into the

00:41:42,400 --> 00:41:49,839
in nyx wrapper i see new

00:41:46,960 --> 00:41:50,800
all tls.all standard n dot system dot

00:41:49,839 --> 00:41:53,359
type

00:41:50,800 --> 00:41:53,920
and dot man and dot out somewhere in

00:41:53,359 --> 00:41:56,720
between

00:41:53,920 --> 00:41:58,480
all those so discoverability with that

00:41:56,720 --> 00:42:00,839
can we improve that

00:41:58,480 --> 00:42:02,079
right so there should also be a dot

00:42:00,839 --> 00:42:06,079
output

00:42:02,079 --> 00:42:09,440
okay um which is the list of outputs

00:42:06,079 --> 00:42:10,079
so it's it's one so so the actual

00:42:09,440 --> 00:42:13,200
outputs

00:42:10,079 --> 00:42:16,400
so if you define an attribute output is

00:42:13,200 --> 00:42:20,400
uh def mon

00:42:16,400 --> 00:42:22,160
uh doc whatever that causes

00:42:20,400 --> 00:42:24,000
outputs with those names to be added so

00:42:22,160 --> 00:42:25,200
you get attributes with those names but

00:42:24,000 --> 00:42:29,119
there's also the dot

00:42:25,200 --> 00:42:31,040
outputs attributes so

00:42:29,119 --> 00:42:33,119
but but there are still a lot of issues

00:42:31,040 --> 00:42:33,680
uh to be figured out there so for

00:42:33,119 --> 00:42:36,960
instance

00:42:33,680 --> 00:42:40,160
nix n or nix uh so what

00:42:36,960 --> 00:42:42,480
output should it install by default yeah

00:42:40,160 --> 00:42:43,680
that's not really not at the moment

00:42:42,480 --> 00:42:46,880
right

00:42:43,680 --> 00:42:48,720
i'm actually not sure whether yeah

00:42:46,880 --> 00:42:50,160
i think it does the first yeah so you

00:42:48,720 --> 00:42:51,920
don't get the man pages which you

00:42:50,160 --> 00:42:56,839
probably do want

00:42:51,920 --> 00:42:59,839
uh oh it doesn't

00:42:56,839 --> 00:42:59,839
okay

00:43:06,640 --> 00:43:15,839
okay so that's

00:43:12,319 --> 00:43:19,040
right right so for the camera it

00:43:15,839 --> 00:43:21,200
source all outputs um and the

00:43:19,040 --> 00:43:22,560
general question do you think it's still

00:43:21,200 --> 00:43:25,599
possible to

00:43:22,560 --> 00:43:27,200
put a type system over nick's

00:43:25,599 --> 00:43:30,560
expressions

00:43:27,200 --> 00:43:33,839
what's what's your take on that

00:43:30,560 --> 00:43:33,839
that would be really hard

00:43:35,040 --> 00:43:38,079
because it's not even clear what the

00:43:37,040 --> 00:43:42,640
types

00:43:38,079 --> 00:43:45,839
would be uh so there actually once was a

00:43:42,640 --> 00:43:50,240
andres lowe wrote a uh

00:43:45,839 --> 00:43:52,160
grant proposal for a research project

00:43:50,240 --> 00:43:54,240
and i don't remember the exact details

00:43:52,160 --> 00:43:56,000
but so i assume he

00:43:54,240 --> 00:43:58,480
had some thoughts about what the type

00:43:56,000 --> 00:44:02,160
system would look like

00:43:58,480 --> 00:44:03,839
but uh i i assume that just doing basic

00:44:02,160 --> 00:44:05,440
hindley milner or something like that

00:44:03,839 --> 00:44:08,640
would not work because yeah

00:44:05,440 --> 00:44:12,319
it's basically attribute sets or

00:44:08,640 --> 00:44:16,160
records so uh and there are type systems

00:44:12,319 --> 00:44:19,839
for for for for record types but uh

00:44:16,160 --> 00:44:21,920
um it's also

00:44:19,839 --> 00:44:23,599
sort of slapping a type system onto a

00:44:21,920 --> 00:44:26,880
language that didn't have

00:44:23,599 --> 00:44:27,760
a static type system i mean we do lots

00:44:26,880 --> 00:44:30,800
of sort of

00:44:27,760 --> 00:44:33,040
dirty things that are probably not

00:44:30,800 --> 00:44:37,290
typeable

00:44:33,040 --> 00:44:40,160
so yeah

00:44:37,290 --> 00:44:44,240
[Applause]

00:44:40,160 --> 00:44:44,240
but it would be really nice that's

00:44:45,200 --> 00:44:50,480
one thing i'd be curious about is just

00:44:48,240 --> 00:44:52,720
the relationship of nyx to containers

00:44:50,480 --> 00:44:55,280
and and where

00:44:52,720 --> 00:44:56,480
what the future looks like for that not

00:44:55,280 --> 00:44:58,160
that it necessarily needs to be

00:44:56,480 --> 00:44:59,200
formalized or not that we need to have

00:44:58,160 --> 00:45:01,359
one but

00:44:59,200 --> 00:45:02,960
from a marketing to new users

00:45:01,359 --> 00:45:05,680
perspective

00:45:02,960 --> 00:45:06,319
where nick sits into relation of that or

00:45:05,680 --> 00:45:07,839
features

00:45:06,319 --> 00:45:09,520
that or ways that we can improve that

00:45:07,839 --> 00:45:10,720
ecosystem i'm just kidding you said

00:45:09,520 --> 00:45:13,359
containers right yeah

00:45:10,720 --> 00:45:14,400
yeah yeah so i actually kind of skipped

00:45:13,359 --> 00:45:16,079
over that

00:45:14,400 --> 00:45:18,079
so i had something there about improved

00:45:16,079 --> 00:45:21,440
container support but because my

00:45:18,079 --> 00:45:24,640
thoughts are not very concrete i uh

00:45:21,440 --> 00:45:27,680
sort of skipped that uh yeah

00:45:24,640 --> 00:45:30,839
so i i think um

00:45:27,680 --> 00:45:31,839
so certainly we can do a a lot better at

00:45:30,839 --> 00:45:34,640
um uh

00:45:31,839 --> 00:45:35,680
for instance uh using nixos to build

00:45:34,640 --> 00:45:38,960
containers like

00:45:35,680 --> 00:45:42,319
docker images

00:45:38,960 --> 00:45:44,079
because yeah and nyx or nixos are very

00:45:42,319 --> 00:45:44,960
suited for it doesn't necessarily have

00:45:44,079 --> 00:45:47,839
to be nixos

00:45:44,960 --> 00:45:47,839
but

00:45:49,280 --> 00:45:52,560
since you have all that stuff anyway you

00:45:50,800 --> 00:45:55,440
might as well like the module system you

00:45:52,560 --> 00:45:55,440
might as well use it

00:45:55,599 --> 00:45:59,280
but i've also been thinking about so for

00:45:58,079 --> 00:46:01,839
instance systemd

00:45:59,280 --> 00:46:02,640
provides a lot of sort of container-like

00:46:01,839 --> 00:46:06,560
features

00:46:02,640 --> 00:46:09,119
so you can run a service inside a

00:46:06,560 --> 00:46:10,560
a change route or inside an environment

00:46:09,119 --> 00:46:14,800
where it only has

00:46:10,560 --> 00:46:17,760
access to a few bind mounts

00:46:14,800 --> 00:46:19,359
um and and that's actually quite

00:46:17,760 --> 00:46:20,880
convenient so rather than having sort of

00:46:19,359 --> 00:46:22,880
full containers you just

00:46:20,880 --> 00:46:24,720
define subsets of the file system so for

00:46:22,880 --> 00:46:25,280
instance you could say the postgres

00:46:24,720 --> 00:46:28,400
service

00:46:25,280 --> 00:46:29,599
only needs access to uh slash data slash

00:46:28,400 --> 00:46:32,960
postgres

00:46:29,599 --> 00:46:33,760
and to uh well only the subset of the

00:46:32,960 --> 00:46:35,680
nick store

00:46:33,760 --> 00:46:37,280
namely the closure of postgres and nick

00:46:35,680 --> 00:46:38,240
store so those are the only paths it

00:46:37,280 --> 00:46:39,839
needs

00:46:38,240 --> 00:46:41,280
uh so that's basically a sort of

00:46:39,839 --> 00:46:44,480
container and

00:46:41,280 --> 00:46:47,760
and then you could have things like uh

00:46:44,480 --> 00:46:49,680
using a tool like nexops to migrate uh

00:46:47,760 --> 00:46:51,440
had the contents of a container to a

00:46:49,680 --> 00:46:52,720
different machine because you know that

00:46:51,440 --> 00:46:55,200
the only things that

00:46:52,720 --> 00:46:56,319
postgres can access are the things in

00:46:55,200 --> 00:46:58,800
those directories

00:46:56,319 --> 00:46:59,760
so then you really have sort of a handle

00:46:58,800 --> 00:47:02,880
on on

00:46:59,760 --> 00:47:06,800
uh yeah what makes up a

00:47:02,880 --> 00:47:08,800
service slash container

00:47:06,800 --> 00:47:10,079
so yeah there are all sorts of really

00:47:08,800 --> 00:47:13,359
cool things that could be done

00:47:10,079 --> 00:47:17,520
there that

00:47:13,359 --> 00:47:17,520
that i i don't know how to do yet

00:47:19,760 --> 00:47:23,760
yes i'm actually curious about the

00:47:21,520 --> 00:47:25,520
portability of nyx to other platforms

00:47:23,760 --> 00:47:28,720
besides linux and

00:47:25,520 --> 00:47:31,280
mac os x so for me for example

00:47:28,720 --> 00:47:32,800
i also do windows developments sometimes

00:47:31,280 --> 00:47:36,079
for me it would be great that

00:47:32,800 --> 00:47:38,640
we can also use nics properly on sequin

00:47:36,079 --> 00:47:40,480
but the problem is um yeah of course we

00:47:38,640 --> 00:47:43,200
need manpower to maintain

00:47:40,480 --> 00:47:44,960
the portability to of nics for sigwin

00:47:43,200 --> 00:47:47,119
and also we need to make some changes

00:47:44,960 --> 00:47:50,839
uh to nix packages so for example that

00:47:47,119 --> 00:47:53,440
the standard environment works properly

00:47:50,839 --> 00:47:54,720
um i think there are some improvements

00:47:53,440 --> 00:47:57,920
possible there so

00:47:54,720 --> 00:47:59,760
uh for me uh touching the standard

00:47:57,920 --> 00:48:01,599
environment i know how to bootstrap a

00:47:59,760 --> 00:48:02,640
linux system but still i find it a bit

00:48:01,599 --> 00:48:05,520
scary

00:48:02,640 --> 00:48:07,200
and i think yeah there are some things

00:48:05,520 --> 00:48:10,319
we can do to improve that

00:48:07,200 --> 00:48:14,000
um do you also have some ideas on that

00:48:10,319 --> 00:48:15,040
uh not me specifically but uh road code

00:48:14,000 --> 00:48:18,559
or is rock

00:48:15,040 --> 00:48:19,680
where is he uh so do you have something

00:48:18,559 --> 00:48:22,800
about

00:48:19,680 --> 00:48:25,040
how the sequin or windows stuff is going

00:48:22,800 --> 00:48:25,040
along

00:48:26,720 --> 00:48:34,480
yeah so it works if you sweat a lot

00:48:30,640 --> 00:48:37,119
and look long enough it's

00:48:34,480 --> 00:48:39,200
kind of works a lot of impurity but once

00:48:37,119 --> 00:48:42,400
you have this base image of

00:48:39,200 --> 00:48:44,640
um sequin at least from

00:48:42,400 --> 00:48:46,160
the last time it's when was the last

00:48:44,640 --> 00:48:49,839
snapshot with taken

00:48:46,160 --> 00:48:52,160
uh the branch probably like in june

00:48:49,839 --> 00:48:52,960
july so from june july next packages

00:48:52,160 --> 00:48:56,240
they work

00:48:52,960 --> 00:48:56,720
but then depends um which package you

00:48:56,240 --> 00:48:59,200
want

00:48:56,720 --> 00:49:00,000
um i don't know python works open ldap

00:48:59,200 --> 00:49:02,000
works

00:49:00,000 --> 00:49:03,119
um like quite a lot but they're just

00:49:02,000 --> 00:49:04,800
like some

00:49:03,119 --> 00:49:06,319
you just need to spend a bit of time

00:49:04,800 --> 00:49:08,559
it's it's not about manpower

00:49:06,319 --> 00:49:09,839
because nobody wants to work on cygwin

00:49:08,559 --> 00:49:14,319
uh it's more about

00:49:09,839 --> 00:49:16,800
uh it's it's true uh but it's more about

00:49:14,319 --> 00:49:18,240
companies wanting it that if if they

00:49:16,800 --> 00:49:19,920
have the deployment

00:49:18,240 --> 00:49:22,960
and you want to deploy on windows it's

00:49:19,920 --> 00:49:26,640
possible it just costs a bit more

00:49:22,960 --> 00:49:26,640
which is the equals manpower

00:49:27,119 --> 00:49:30,880
and of course it will bit rot uh quite a

00:49:30,400 --> 00:49:33,280
lot

00:49:30,880 --> 00:49:35,119
i mean it it used to work at some point

00:49:33,280 --> 00:49:36,960
in the past and

00:49:35,119 --> 00:49:38,319
then it for a long time it didn't and

00:49:36,960 --> 00:49:40,559
then you did stuff and

00:49:38,319 --> 00:49:42,000
so now it should be in a workable state

00:49:40,559 --> 00:49:44,559
again but

00:49:42,000 --> 00:49:45,920
of course yeah unless we have a sequin

00:49:44,559 --> 00:49:47,440
machine in the build farm it will

00:49:45,920 --> 00:49:49,200
probably uh

00:49:47,440 --> 00:49:50,960
sort of oscillate between working and

00:49:49,200 --> 00:49:59,839
not working

00:49:50,960 --> 00:49:59,839
we have more minutes for questions so

00:50:02,240 --> 00:50:09,839
um i've seen your email recently about

00:50:05,599 --> 00:50:09,839
hydra that is not officially supported

00:50:10,240 --> 00:50:13,760
i would like to ask if we possibly at

00:50:12,160 --> 00:50:17,359
least

00:50:13,760 --> 00:50:21,119
a document somewhere what commit

00:50:17,359 --> 00:50:21,119
works and

00:50:22,400 --> 00:50:25,440
yeah how to achieve some working

00:50:24,319 --> 00:50:28,559
configuration

00:50:25,440 --> 00:50:31,760
right because it's one of the parts of

00:50:28,559 --> 00:50:32,480
the nexos stuff that really brings

00:50:31,760 --> 00:50:35,920
people in

00:50:32,480 --> 00:50:37,680
i think and it's very hard to find a

00:50:35,920 --> 00:50:41,119
commit

00:50:37,680 --> 00:50:43,520
and configuration so that it actually

00:50:41,119 --> 00:50:43,520
works

00:50:44,240 --> 00:50:49,040
so the most recent one should work the

00:50:46,640 --> 00:50:52,240
the problem is if you're upgrading

00:50:49,040 --> 00:50:53,680
uh because i mean it might break your

00:50:52,240 --> 00:50:56,240
existing

00:50:53,680 --> 00:50:58,160
installation because it has schema

00:50:56,240 --> 00:51:00,880
changes and

00:50:58,160 --> 00:51:02,079
sometimes the default locations change

00:51:00,880 --> 00:51:04,720
and

00:51:02,079 --> 00:51:06,559
or yeah or it might require some other

00:51:04,720 --> 00:51:07,680
configuration changes so that that's

00:51:06,559 --> 00:51:09,280
really

00:51:07,680 --> 00:51:10,960
the problem but i mean the so the

00:51:09,280 --> 00:51:15,760
current

00:51:10,960 --> 00:51:19,839
revision is what hydra.nicos.org runs so

00:51:15,760 --> 00:51:23,200
that should work um

00:51:19,839 --> 00:51:24,480
yeah so it's but so the deeper question

00:51:23,200 --> 00:51:26,800
here is that

00:51:24,480 --> 00:51:27,920
we should really do hydra stable

00:51:26,800 --> 00:51:30,960
releases i guess

00:51:27,920 --> 00:51:34,240
that's uh yeah

00:51:30,960 --> 00:51:36,559
yeah that that would be obviously uh

00:51:34,240 --> 00:51:37,359
the best thing to do but it's kind of a

00:51:36,559 --> 00:51:40,960
manpower

00:51:37,359 --> 00:51:42,319
issue it takes time to do releases and

00:51:40,960 --> 00:51:46,160
write release notes and

00:51:42,319 --> 00:51:51,839
uh yeah and i

00:51:46,160 --> 00:51:51,839
don't really have that at the moment

00:51:53,440 --> 00:51:58,000
um my take on this is um if you if you

00:51:56,800 --> 00:52:00,079
get someone to be

00:51:58,000 --> 00:52:01,920
like the release manager to spend some

00:52:00,079 --> 00:52:03,760
time helping you know

00:52:01,920 --> 00:52:05,520
go through the commits and and form a

00:52:03,760 --> 00:52:07,680
changelog and all that

00:52:05,520 --> 00:52:09,040
shouldn't be too much investment and and

00:52:07,680 --> 00:52:11,119
if we get someone to

00:52:09,040 --> 00:52:12,319
take care of that i'm sure that we'll

00:52:11,119 --> 00:52:15,520
get momentum and

00:52:12,319 --> 00:52:18,400
and you know more people interested

00:52:15,520 --> 00:52:20,480
um so i i think it's yeah just if

00:52:18,400 --> 00:52:25,920
somebody volunteers basically to do

00:52:20,480 --> 00:52:25,920
to manage releases that will push this

00:52:30,839 --> 00:52:35,200
forward

00:52:32,240 --> 00:52:36,400
um a couple notes uh when you're talking

00:52:35,200 --> 00:52:39,920
about upgrading the nyx

00:52:36,400 --> 00:52:41,760
cli oh i'm over here um

00:52:39,920 --> 00:52:43,680
uh you might want to take an example

00:52:41,760 --> 00:52:46,000
from like the freebsd pkg

00:52:43,680 --> 00:52:47,040
it's almost doing the same thing like uh

00:52:46,000 --> 00:52:50,319
can you say that again

00:52:47,040 --> 00:52:53,760
oh like the freebsd pkg kng which is you

00:52:50,319 --> 00:52:57,200
have a pkg search pkg upgrade pkg audit

00:52:53,760 --> 00:52:57,200
pkg install

00:52:57,520 --> 00:53:04,160
it's almost like nyx search nix

00:53:01,359 --> 00:53:05,920
for with kind of the helping with cygwin

00:53:04,160 --> 00:53:06,319
stuff i think you can run sequin under

00:53:05,920 --> 00:53:08,800
wine

00:53:06,319 --> 00:53:09,599
so it you could probably put that into a

00:53:08,800 --> 00:53:12,480
test for

00:53:09,599 --> 00:53:13,440
hydra speaking of hydro hydra is

00:53:12,480 --> 00:53:14,960
incredibly useful

00:53:13,440 --> 00:53:16,480
but it is kind of it takes a bit getting

00:53:14,960 --> 00:53:18,160
used to uh so if you have

00:53:16,480 --> 00:53:19,760
questions about this the i think the irc

00:53:18,160 --> 00:53:22,800
channel is a good place to ask um

00:53:19,760 --> 00:53:25,040
i have done the hydro setup before and i

00:53:22,800 --> 00:53:28,240
try to help people but i can understand

00:53:25,040 --> 00:53:29,839
the lack and manpower in creating

00:53:28,240 --> 00:53:34,000
official releases for something that's

00:53:29,839 --> 00:53:34,000
kind of a development tool type thing so

00:53:34,160 --> 00:53:39,599
and one last thing for containers

00:53:37,839 --> 00:53:41,760
some of the people i work with released

00:53:39,599 --> 00:53:42,400
something called clear linux containers

00:53:41,760 --> 00:53:45,839
that use

00:53:42,400 --> 00:53:47,520
uh hardware support and

00:53:45,839 --> 00:53:50,000
new support in the linux kernels and

00:53:47,520 --> 00:53:53,359
they can deploy

00:53:50,000 --> 00:53:55,119
containers in about 150 milliseconds for

00:53:53,359 --> 00:53:56,880
spawning off a new system so there's

00:53:55,119 --> 00:53:57,839
some really neat technology going on in

00:53:56,880 --> 00:53:59,839
there that's

00:53:57,839 --> 00:54:01,680
coming out of the open source technology

00:53:59,839 --> 00:54:03,520
group at intel

00:54:01,680 --> 00:54:06,079
yeah somebody was also talking about uni

00:54:03,520 --> 00:54:06,079
kernels

00:54:08,839 --> 00:54:11,839
so

00:54:10,160 --> 00:54:13,280
okay so we've run out of time thank you

00:54:11,839 --> 00:54:23,760
very much echo for your

00:54:13,280 --> 00:54:23,760

YouTube URL: https://www.youtube.com/watch?v=JjXJGiOgfGg


