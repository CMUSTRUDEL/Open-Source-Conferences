Title: Rob Vermaas: Nix at LogicBlox (NixCon 2015)
Publication date: 2020-10-29
Playlist: NixCon 2015 (Berlin)
Description: 
	
Captions: 
	00:00:05,279 --> 00:00:08,880
okay

00:00:05,759 --> 00:00:11,280
and we're back um so

00:00:08,880 --> 00:00:12,000
you probably all know rob if nothing

00:00:11,280 --> 00:00:16,640
else you ask

00:00:12,000 --> 00:00:19,600
him to clear the storage on hydra

00:00:16,640 --> 00:00:21,119
it's not the only thing he does and

00:00:19,600 --> 00:00:22,160
actually he'll tell us everything about

00:00:21,119 --> 00:00:23,680
what he does

00:00:22,160 --> 00:00:26,880
well thank you i hope you guys can hear

00:00:23,680 --> 00:00:28,720
me i'll try to keep you entertained for

00:00:26,880 --> 00:00:31,119
about half an hour or 40 minutes until

00:00:28,720 --> 00:00:33,920
you go for lunch and then of course

00:00:31,119 --> 00:00:35,680
that's the best part of the day so so

00:00:33,920 --> 00:00:37,440
i'm go for mass

00:00:35,680 --> 00:00:39,440
i work for a company called logicblocks

00:00:37,440 --> 00:00:41,840
and you might have heard the name

00:00:39,440 --> 00:00:43,120
around on the irc channel or salt on the

00:00:41,840 --> 00:00:46,000
wiki

00:00:43,120 --> 00:00:47,280
um so this is my contact information if

00:00:46,000 --> 00:00:50,399
you ever want to

00:00:47,280 --> 00:00:53,440
talk to me most of the time on irc

00:00:50,399 --> 00:00:55,840
on most late times as well so

00:00:53,440 --> 00:00:57,600
just we're there to help i mean just

00:00:55,840 --> 00:00:59,039
like the whole nexus community they're

00:00:57,600 --> 00:01:02,800
awesome

00:00:59,039 --> 00:01:02,800
and very helpful usually on irc

00:01:03,520 --> 00:01:06,960
so i would like to tell you a bit about

00:01:05,439 --> 00:01:10,720
who i am and what i did

00:01:06,960 --> 00:01:13,760
with nix so i kind of

00:01:10,720 --> 00:01:14,799
looked back at uh at my commits and i

00:01:13,760 --> 00:01:18,320
found the first commit

00:01:14,799 --> 00:01:21,119
in 2004 when i added

00:01:18,320 --> 00:01:22,080
octave that was because i was i used to

00:01:21,119 --> 00:01:23,680
be a student at the

00:01:22,080 --> 00:01:25,119
university of utrecht which is also the

00:01:23,680 --> 00:01:28,799
place where nyx was

00:01:25,119 --> 00:01:30,079
developed originally so elk dolce was

00:01:28,799 --> 00:01:32,400
one of my

00:01:30,079 --> 00:01:33,280
fellow fellow students i mean he was a

00:01:32,400 --> 00:01:36,880
bit

00:01:33,280 --> 00:01:38,400
older so he finished before me

00:01:36,880 --> 00:01:40,880
but after my studies i went to work

00:01:38,400 --> 00:01:43,600
there and we i was working on a project

00:01:40,880 --> 00:01:46,880
called stratego xt which made

00:01:43,600 --> 00:01:49,680
like a it's like a language for

00:01:46,880 --> 00:01:50,399
to build compilers and that consisted of

00:01:49,680 --> 00:01:52,479
like 20

00:01:50,399 --> 00:01:54,960
out of packages and of course to build

00:01:52,479 --> 00:01:57,439
that that's terrible

00:01:54,960 --> 00:01:59,119
so what did we do is we actually started

00:01:57,439 --> 00:02:02,399
using the work that ilco

00:01:59,119 --> 00:02:05,759
was working on and nick's actually

00:02:02,399 --> 00:02:09,119
built and actually sent to the users

00:02:05,759 --> 00:02:11,039
this project so this is nice

00:02:09,119 --> 00:02:12,400
then we actually moved to tu delft where

00:02:11,039 --> 00:02:15,920
i actually worked on

00:02:12,400 --> 00:02:18,080
hydra and a bit on nexops and i've also

00:02:15,920 --> 00:02:20,480
contributed to nyx

00:02:18,080 --> 00:02:23,040
like hawk explained i also do a lot of

00:02:20,480 --> 00:02:24,319
infrastructure support for

00:02:23,040 --> 00:02:26,959
let's say the infrastructure that we

00:02:24,319 --> 00:02:28,640
have so hydra the website

00:02:26,959 --> 00:02:30,000
i do that together with ocudolstra

00:02:28,640 --> 00:02:32,720
sometimes summer is helping

00:02:30,000 --> 00:02:34,560
and there are nexus community members

00:02:32,720 --> 00:02:36,720
who help with that as well but basically

00:02:34,560 --> 00:02:40,080
more on the web ui

00:02:36,720 --> 00:02:43,920
not on the back end of the servers

00:02:40,080 --> 00:02:45,920
also this year we started the nixos

00:02:43,920 --> 00:02:48,319
foundation which is meant to support

00:02:45,920 --> 00:02:50,160
to give kind of a vehicle for people to

00:02:48,319 --> 00:02:52,640
give us donations so that we can keep

00:02:50,160 --> 00:02:54,000
all this infrastructure running

00:02:52,640 --> 00:02:56,000
so i would like to encourage you to give

00:02:54,000 --> 00:02:59,360
us all your money so we can do

00:02:56,000 --> 00:02:59,360
all kinds of awesome stuff

00:02:59,599 --> 00:03:04,080
so as i explained i work for logicblocks

00:03:02,480 --> 00:03:05,920
we develop a state-of-the-art

00:03:04,080 --> 00:03:07,920
database system that is used to develop

00:03:05,920 --> 00:03:08,800
applications for many top retailers and

00:03:07,920 --> 00:03:11,120
banks

00:03:08,800 --> 00:03:12,239
so that's the marketing statement i'm

00:03:11,120 --> 00:03:13,519
not going to tell you too much about

00:03:12,239 --> 00:03:14,720
logic blocks because it's actually not

00:03:13,519 --> 00:03:15,360
too interesting for you guys because

00:03:14,720 --> 00:03:17,519
it's

00:03:15,360 --> 00:03:18,720
not necessarily like an open product

00:03:17,519 --> 00:03:21,040
that you can actually use you have to

00:03:18,720 --> 00:03:22,560
work together with us

00:03:21,040 --> 00:03:24,239
but what is important is that we have a

00:03:22,560 --> 00:03:26,400
few mixers

00:03:24,239 --> 00:03:27,920
so first of all of course me i'm doing

00:03:26,400 --> 00:03:30,879
the presentation

00:03:27,920 --> 00:03:34,159
but also el codolsta i know where he is

00:03:30,879 --> 00:03:37,040
there everybody knows elko

00:03:34,159 --> 00:03:38,480
our cto is martin grafour you probably

00:03:37,040 --> 00:03:40,799
haven't seen many commits of the

00:03:38,480 --> 00:03:42,640
of him lately because i think his last

00:03:40,799 --> 00:03:45,840
commit was in 2008

00:03:42,640 --> 00:03:47,920
but he was actually using nick's very

00:03:45,840 --> 00:03:52,319
early on as well

00:03:47,920 --> 00:03:54,879
at some point shea leffy is also a

00:03:52,319 --> 00:03:55,360
good community member he works for us

00:03:54,879 --> 00:03:57,280
and

00:03:55,360 --> 00:03:59,040
we sometimes hire contractors to do work

00:03:57,280 --> 00:04:01,280
for us that we cannot do ourselves

00:03:59,040 --> 00:04:04,640
because of capacity reasons

00:04:01,280 --> 00:04:09,599
so jeff gainey he has worked for us

00:04:04,640 --> 00:04:12,400
many will know him as freedom on irc

00:04:09,599 --> 00:04:13,840
so what i usually do when i have a talk

00:04:12,400 --> 00:04:16,560
about

00:04:13,840 --> 00:04:19,359
i would like to remind myself why i use

00:04:16,560 --> 00:04:21,120
nyx because i think it's very important

00:04:19,359 --> 00:04:22,639
to kind of reflect over why you do

00:04:21,120 --> 00:04:25,040
things

00:04:22,639 --> 00:04:26,479
so my first point is always nix protects

00:04:25,040 --> 00:04:29,600
me against me

00:04:26,479 --> 00:04:30,800
so i make software and i break all kinds

00:04:29,600 --> 00:04:33,040
of all the time

00:04:30,800 --> 00:04:34,479
so i'm very good at making bugs so i

00:04:33,040 --> 00:04:35,520
like the feature that i can just roll

00:04:34,479 --> 00:04:37,840
back

00:04:35,520 --> 00:04:39,040
because that kind of gives a safety net

00:04:37,840 --> 00:04:41,520
that we actually

00:04:39,040 --> 00:04:42,240
need well that i actually need you of

00:04:41,520 --> 00:04:43,759
course are

00:04:42,240 --> 00:04:46,400
like perfect programmers and never make

00:04:43,759 --> 00:04:50,000
bugs um

00:04:46,400 --> 00:04:51,840
but also i'm very forgetful

00:04:50,000 --> 00:04:53,360
so unless i make something that's

00:04:51,840 --> 00:04:56,160
completely automated

00:04:53,360 --> 00:04:56,560
i forget how to do things and what nyx

00:04:56,160 --> 00:04:58,720
does

00:04:56,560 --> 00:05:00,240
it actually gives me a vehicle to do

00:04:58,720 --> 00:05:02,639
things consistently

00:05:00,240 --> 00:05:04,080
multiple times and on different machines

00:05:02,639 --> 00:05:06,160
and that takes away a lot of the pain

00:05:04,080 --> 00:05:09,199
that i have with software development

00:05:06,160 --> 00:05:13,039
and i'm sure you guys have that as well

00:05:09,199 --> 00:05:14,479
um what it also does is it exposes the

00:05:13,039 --> 00:05:16,479
things i forget

00:05:14,479 --> 00:05:18,320
like implicit dependencies i mean we all

00:05:16,479 --> 00:05:19,280
know when you start a project that's

00:05:18,320 --> 00:05:21,600
existing

00:05:19,280 --> 00:05:23,440
you make a next expression for it oh man

00:05:21,600 --> 00:05:24,000
there are so many implicit dependencies

00:05:23,440 --> 00:05:27,280
and so many

00:05:24,000 --> 00:05:29,520
assumptions being made so nick's exposes

00:05:27,280 --> 00:05:31,919
what i forget

00:05:29,520 --> 00:05:34,320
to actually declare and therefore it

00:05:31,919 --> 00:05:37,680
helps let's say the previous

00:05:34,320 --> 00:05:40,080
things that i wrote so

00:05:37,680 --> 00:05:41,199
one another thing is that over the

00:05:40,080 --> 00:05:42,960
course of time we actually have

00:05:41,199 --> 00:05:46,240
developed all kinds of tools

00:05:42,960 --> 00:05:48,080
uh like uh nyx nixos hydra

00:05:46,240 --> 00:05:49,759
and nixops and now we have just one

00:05:48,080 --> 00:05:52,880
language to rule them all

00:05:49,759 --> 00:05:54,560
like it says on the wi-fi password

00:05:52,880 --> 00:05:57,360
so that's what i like and i hope you

00:05:54,560 --> 00:06:02,160
guys like it as well

00:05:57,360 --> 00:06:04,400
so my presentation is basically

00:06:02,160 --> 00:06:06,560
a call out to make sure that you guys

00:06:04,400 --> 00:06:08,240
start nixifying companies so this will

00:06:06,560 --> 00:06:10,000
be a crash course in how to actually do

00:06:08,240 --> 00:06:12,639
this

00:06:10,000 --> 00:06:14,240
so there's a three step plan find a nice

00:06:12,639 --> 00:06:15,680
company which i did with logic blocks

00:06:14,240 --> 00:06:16,880
i'm sure you guys have nice companies as

00:06:15,680 --> 00:06:20,000
well

00:06:16,880 --> 00:06:20,479
you apply nyx wherever you can because

00:06:20,000 --> 00:06:21,759
people

00:06:20,479 --> 00:06:23,520
and companies will have problems that

00:06:21,759 --> 00:06:25,039
need to be solved and they can typically

00:06:23,520 --> 00:06:27,360
be solved very nicely with nics

00:06:25,039 --> 00:06:28,479
so just do it and set free we have

00:06:27,360 --> 00:06:30,960
profit or

00:06:28,479 --> 00:06:31,919
salary or whatever kind of your system

00:06:30,960 --> 00:06:36,240
is so

00:06:31,919 --> 00:06:36,240
that's basically my three step plan

00:06:37,600 --> 00:06:41,600
um so when you build software you build

00:06:40,720 --> 00:06:43,039
software

00:06:41,600 --> 00:06:45,440
you wanna make sure that you run tests

00:06:43,039 --> 00:06:48,639
and you wanna have it run somewhere

00:06:45,440 --> 00:06:49,520
so i call we have four components that i

00:06:48,639 --> 00:06:51,199
call the big four

00:06:49,520 --> 00:06:53,520
sunder will probably say no you have to

00:06:51,199 --> 00:06:55,680
have five because this nix

00:06:53,520 --> 00:06:57,199
is also part of that but in my case we

00:06:55,680 --> 00:07:00,639
don't use this nic yet

00:06:57,199 --> 00:07:03,759
so it's the big four so first of all nix

00:07:00,639 --> 00:07:05,120
which covers this whole pipeline uh of

00:07:03,759 --> 00:07:06,720
course hydra we use for building and

00:07:05,120 --> 00:07:09,199
testing

00:07:06,720 --> 00:07:12,240
and nyx ops and nixon actually get it

00:07:09,199 --> 00:07:12,240
deployed on systems

00:07:12,479 --> 00:07:15,759
so you get to a company that exists

00:07:14,000 --> 00:07:16,400
already i think in the case of logic

00:07:15,759 --> 00:07:18,160
blocks it

00:07:16,400 --> 00:07:19,680
existed for 10 years already so there's

00:07:18,160 --> 00:07:24,160
a lot of software there

00:07:19,680 --> 00:07:25,680
and what do you get bash scripts

00:07:24,160 --> 00:07:27,120
something called jenkins i don't know if

00:07:25,680 --> 00:07:29,039
you've worked with it it's terrible you

00:07:27,120 --> 00:07:30,960
have to maintain machines all kinds of

00:07:29,039 --> 00:07:32,639
stuff

00:07:30,960 --> 00:07:34,880
and of course people want to use

00:07:32,639 --> 00:07:35,360
enterprise operating systems like centos

00:07:34,880 --> 00:07:39,199
or red

00:07:35,360 --> 00:07:43,199
linux which i get the shifters from

00:07:39,199 --> 00:07:44,879
so of course i want to change everything

00:07:43,199 --> 00:07:46,639
but you can't change everything at the

00:07:44,879 --> 00:07:49,919
same time so

00:07:46,639 --> 00:07:52,720
yeah so

00:07:49,919 --> 00:07:54,479
what you just as a first step do because

00:07:52,720 --> 00:07:55,759
you can't immediately deploy it with nyx

00:07:54,479 --> 00:07:57,520
or nixops

00:07:55,759 --> 00:08:00,720
you basically make sure that you do your

00:07:57,520 --> 00:08:03,280
builds first step in the whole pipeline

00:08:00,720 --> 00:08:05,520
but man close source software i mean i'm

00:08:03,280 --> 00:08:07,680
a really big fan of open source software

00:08:05,520 --> 00:08:09,919
partly because people actually designed

00:08:07,680 --> 00:08:10,479
it to be shared with other people so

00:08:09,919 --> 00:08:13,599
they actually

00:08:10,479 --> 00:08:15,440
make sure they keep to certain like

00:08:13,599 --> 00:08:16,319
build systems standard build systems so

00:08:15,440 --> 00:08:18,639
then

00:08:16,319 --> 00:08:20,000
relatively easy to build open source

00:08:18,639 --> 00:08:21,599
software even though of course there are

00:08:20,000 --> 00:08:24,000
city parts sometimes as well

00:08:21,599 --> 00:08:27,039
but in closer software people use build

00:08:24,000 --> 00:08:28,879
script hard coded locations

00:08:27,039 --> 00:08:31,360
binary files who knows where they come

00:08:28,879 --> 00:08:33,919
from like library so files

00:08:31,360 --> 00:08:35,039
someone once built them put them in a

00:08:33,919 --> 00:08:38,320
repository

00:08:35,039 --> 00:08:40,880
and you actually have to use them

00:08:38,320 --> 00:08:42,399
also like huge builds uh a typical

00:08:40,880 --> 00:08:43,120
package index package is probably like a

00:08:42,399 --> 00:08:45,920
few

00:08:43,120 --> 00:08:46,640
maybe a few megabytes man i think my

00:08:45,920 --> 00:08:48,000
first build of

00:08:46,640 --> 00:08:49,839
logic blocks was about two nine

00:08:48,000 --> 00:08:53,040
gigabytes so

00:08:49,839 --> 00:08:55,200
it gives all kinds of troubles

00:08:53,040 --> 00:08:56,800
but also no let's just download

00:08:55,200 --> 00:08:58,080
something from the from the network it's

00:08:56,800 --> 00:09:00,560
difficult problem we have when we

00:08:58,080 --> 00:09:03,680
package the package in x right

00:09:00,560 --> 00:09:05,040
oh man or even worse not not just using

00:09:03,680 --> 00:09:07,920
one language

00:09:05,040 --> 00:09:09,920
you use six languages so it's all kind

00:09:07,920 --> 00:09:12,640
of nice if you have one npm package and

00:09:09,920 --> 00:09:13,519
that's it but oh man imagine using java

00:09:12,640 --> 00:09:16,560
scala

00:09:13,519 --> 00:09:17,120
c plus plus whatever language they can

00:09:16,560 --> 00:09:19,120
think of

00:09:17,120 --> 00:09:20,959
that was best to suit their purposes at

00:09:19,120 --> 00:09:24,480
the same time

00:09:20,959 --> 00:09:25,839
um so okay you've nextified your build

00:09:24,480 --> 00:09:28,720
and message was very ugly at the

00:09:25,839 --> 00:09:30,000
beginning it was a very big script

00:09:28,720 --> 00:09:32,399
hacking around all these kinds of

00:09:30,000 --> 00:09:33,519
hard-coded locations

00:09:32,399 --> 00:09:35,040
but of course you need to run it

00:09:33,519 --> 00:09:35,680
continuously so that's why we have hydra

00:09:35,040 --> 00:09:38,320
we all know

00:09:35,680 --> 00:09:39,519
this uh this screen at least i hope you

00:09:38,320 --> 00:09:43,200
do because it's kind of

00:09:39,519 --> 00:09:45,519
the main server in the whole nexus

00:09:43,200 --> 00:09:45,519
sphere

00:09:46,000 --> 00:09:52,399
so why i like hydra it's uh

00:09:50,160 --> 00:09:54,000
basically it's again most of the

00:09:52,399 --> 00:09:54,399
advantages here are actually caused by

00:09:54,000 --> 00:09:56,560
nyx

00:09:54,399 --> 00:09:59,200
so it's basically a generalized knicks

00:09:56,560 --> 00:10:02,480
runner in my opinion kind of it's like a

00:09:59,200 --> 00:10:05,120
nick scheduler in a sense

00:10:02,480 --> 00:10:06,240
and that's uh all bills are consider uh

00:10:05,120 --> 00:10:08,959
consolidated in

00:10:06,240 --> 00:10:10,560
one language nics and to my in my

00:10:08,959 --> 00:10:12,720
opinion that's really nice because

00:10:10,560 --> 00:10:14,320
i hate bash and not because she cannot

00:10:12,720 --> 00:10:16,160
do good things in bash

00:10:14,320 --> 00:10:18,000
but it seems to be that all programmers

00:10:16,160 --> 00:10:19,279
always forget everything they learned

00:10:18,000 --> 00:10:21,680
about programming

00:10:19,279 --> 00:10:22,720
in bash i don't know why it is and

00:10:21,680 --> 00:10:25,120
probably i do the same

00:10:22,720 --> 00:10:26,480
so it's not like i'm blaming others i'm

00:10:25,120 --> 00:10:29,120
just

00:10:26,480 --> 00:10:29,760
as bad and i need some guidance and nix

00:10:29,120 --> 00:10:32,399
gives me

00:10:29,760 --> 00:10:33,519
this guidance basically so less

00:10:32,399 --> 00:10:35,440
maintenance in the sense that you don't

00:10:33,519 --> 00:10:37,040
have to maintain computers like

00:10:35,440 --> 00:10:39,279
we had this jenkins machine that one

00:10:37,040 --> 00:10:42,560
version that have gcc for

00:10:39,279 --> 00:10:44,480
two and one gcc i don't know some other

00:10:42,560 --> 00:10:46,079
version

00:10:44,480 --> 00:10:48,320
i also want to be able to reproduce the

00:10:46,079 --> 00:10:49,519
build have caching of builds which is

00:10:48,320 --> 00:10:53,040
very important when you want to

00:10:49,519 --> 00:10:54,959
compose builds and i want to integrate

00:10:53,040 --> 00:10:59,279
this with our deployment tools

00:10:54,959 --> 00:11:02,320
so do you have never installed hydra

00:10:59,279 --> 00:11:04,000
we might call some things and you think

00:11:02,320 --> 00:11:06,079
like what the hell is a job set or what

00:11:04,000 --> 00:11:08,079
is a job or what is it build

00:11:06,079 --> 00:11:10,000
so in hydra you can actually group

00:11:08,079 --> 00:11:11,600
builds together in projects

00:11:10,000 --> 00:11:13,600
so for example blocks we have for each

00:11:11,600 --> 00:11:16,640
of our clients we have a project

00:11:13,600 --> 00:11:20,399
for our platform and then we have a

00:11:16,640 --> 00:11:20,399
concept of job sets it's basically

00:11:20,720 --> 00:11:24,800
you can see it maybe as you want to

00:11:22,560 --> 00:11:26,480
build a branch of your product

00:11:24,800 --> 00:11:28,000
or a pull request and then you create a

00:11:26,480 --> 00:11:30,640
job set and the result

00:11:28,000 --> 00:11:33,760
of a job set is actually a set of builds

00:11:30,640 --> 00:11:33,760
there can be multiple things

00:11:34,240 --> 00:11:37,600
so the features that are important for

00:11:35,600 --> 00:11:39,680
us and that we use a lot

00:11:37,600 --> 00:11:40,640
is the fact that it's so easy in hydra

00:11:39,680 --> 00:11:44,800
to create

00:11:40,640 --> 00:11:47,600
clones of job sets and build branches

00:11:44,800 --> 00:11:48,079
but also the ability to compose multiple

00:11:47,600 --> 00:11:51,200
builds is

00:11:48,079 --> 00:11:54,480
one logical build so

00:11:51,200 --> 00:11:57,680
let's see in our hydra we have

00:11:54,480 --> 00:11:58,160
19 projects and about 205 active job

00:11:57,680 --> 00:12:01,200
sets

00:11:58,160 --> 00:12:01,200
so that's actually a lot

00:12:01,360 --> 00:12:05,680
so what do we build we built our

00:12:03,839 --> 00:12:08,959
platform so i'm saying that

00:12:05,680 --> 00:12:12,639
we built a database platform

00:12:08,959 --> 00:12:14,480
and this is our main builds for thing so

00:12:12,639 --> 00:12:15,920
i had to kind of rotate it to make sure

00:12:14,480 --> 00:12:19,360
that it's fitted on the

00:12:15,920 --> 00:12:21,839
screen so if everybody can

00:12:19,360 --> 00:12:23,279
move over and then you can see that we

00:12:21,839 --> 00:12:26,560
we have a lot of builds

00:12:23,279 --> 00:12:28,399
and that's not because our platform

00:12:26,560 --> 00:12:29,680
might be just 50 of them which is

00:12:28,399 --> 00:12:31,920
probably like

00:12:29,680 --> 00:12:33,360
a third of it but we have a lot of

00:12:31,920 --> 00:12:36,639
things that we also trigger

00:12:33,360 --> 00:12:38,320
things like benchmarks or tests or

00:12:36,639 --> 00:12:42,399
things related to deployment or you want

00:12:38,320 --> 00:12:45,680
to try to build client application

00:12:42,399 --> 00:12:46,560
so we have a few different types of

00:12:45,680 --> 00:12:49,040
builds

00:12:46,560 --> 00:12:51,040
so and that's for a reason that our

00:12:49,040 --> 00:12:52,000
bills are getting so huge in the time of

00:12:51,040 --> 00:12:54,560
build time that they actually

00:12:52,000 --> 00:12:55,600
consume because we cannot commit

00:12:54,560 --> 00:12:59,680
basically build

00:12:55,600 --> 00:13:02,240
on any every commit but we actually do

00:12:59,680 --> 00:13:03,120
do that but we just use a smaller subset

00:13:02,240 --> 00:13:06,480
of

00:13:03,120 --> 00:13:09,839
of builds so for example if somebody

00:13:06,480 --> 00:13:12,320
commits something in our platform uh

00:13:09,839 --> 00:13:12,959
that triggers about 90 builds which is

00:13:12,320 --> 00:13:15,760
kind of like

00:13:12,959 --> 00:13:16,399
three hours worth of builds if you would

00:13:15,760 --> 00:13:19,440
do it in

00:13:16,399 --> 00:13:20,959
a sequence we also have

00:13:19,440 --> 00:13:22,720
nightly integration builds where we also

00:13:20,959 --> 00:13:24,240
built our client applications with it to

00:13:22,720 --> 00:13:26,399
validate if let's say change in the

00:13:24,240 --> 00:13:28,880
platform breaks something

00:13:26,399 --> 00:13:30,000
in those applications and then it gets a

00:13:28,880 --> 00:13:31,839
bit harder because

00:13:30,000 --> 00:13:33,279
each commit will actually cost 300

00:13:31,839 --> 00:13:36,480
builds

00:13:33,279 --> 00:13:38,079
120 hours of builds worse so let's say

00:13:36,480 --> 00:13:40,959
if we do that on every commits we would

00:13:38,079 --> 00:13:42,720
need a lot of build machines

00:13:40,959 --> 00:13:44,079
we have a lot of them but not that many

00:13:42,720 --> 00:13:47,519
we're not google

00:13:44,079 --> 00:13:49,279
or anything so we're building client

00:13:47,519 --> 00:13:53,199
applications

00:13:49,279 --> 00:13:56,560
and um how does that typically look like

00:13:53,199 --> 00:13:57,920
um so typically they have two inputs

00:13:56,560 --> 00:13:59,600
it's basically the platform release

00:13:57,920 --> 00:14:01,760
which is a

00:13:59,600 --> 00:14:03,440
an argument to specify which release we

00:14:01,760 --> 00:14:06,079
actually want to use

00:14:03,440 --> 00:14:08,079
the source code of the implementation of

00:14:06,079 --> 00:14:09,760
the application

00:14:08,079 --> 00:14:12,000
and it typically looks like a function

00:14:09,760 --> 00:14:12,880
call that calls like a generic app

00:14:12,000 --> 00:14:16,160
jobset

00:14:12,880 --> 00:14:19,120
a function that builds a set of jobs

00:14:16,160 --> 00:14:21,279
uh based on how to build uh the

00:14:19,120 --> 00:14:23,120
application so there's a built lb config

00:14:21,279 --> 00:14:25,519
we have a kind of like a standardized

00:14:23,120 --> 00:14:27,519
build system for lb applications

00:14:25,519 --> 00:14:29,120
that we can basically pass in logic

00:14:27,519 --> 00:14:30,800
blocks which is the database

00:14:29,120 --> 00:14:32,560
and block swap which is our application

00:14:30,800 --> 00:14:36,320
server

00:14:32,560 --> 00:14:39,199
so in hydra that will look like this

00:14:36,320 --> 00:14:40,560
it should look familiar for you guys

00:14:39,199 --> 00:14:42,320
there are like four builds that come out

00:14:40,560 --> 00:14:43,600
of this function

00:14:42,320 --> 00:14:45,040
one is the actual build of the

00:14:43,600 --> 00:14:45,920
application including the running of the

00:14:45,040 --> 00:14:48,880
test

00:14:45,920 --> 00:14:50,240
but also you can actually download a

00:14:48,880 --> 00:14:51,760
tarball version of

00:14:50,240 --> 00:14:53,360
what comes out of it so that the

00:14:51,760 --> 00:14:55,040
developers can just download it instead

00:14:53,360 --> 00:14:56,839
of let's say building it for a few hours

00:14:55,040 --> 00:14:59,600
on their own

00:14:56,839 --> 00:15:01,680
machines um and there

00:14:59,600 --> 00:15:03,199
we do some basic testing that's generic

00:15:01,680 --> 00:15:04,639
for each application

00:15:03,199 --> 00:15:06,480
and applications can actually add their

00:15:04,639 --> 00:15:09,279
own tests and that will show up as

00:15:06,480 --> 00:15:10,959
extra job sets so another thing that's

00:15:09,279 --> 00:15:12,639
important is the hare enclosure

00:15:10,959 --> 00:15:14,959
so probably not everybody knows but

00:15:12,639 --> 00:15:17,120
nyxops was once called haron

00:15:14,959 --> 00:15:19,040
when we wrote our first paper about it

00:15:17,120 --> 00:15:23,600
but nobody liked that name so

00:15:19,040 --> 00:15:23,600
we chose the boring nixops name

00:15:24,480 --> 00:15:27,519
so ollie charles he explained how they

00:15:26,399 --> 00:15:30,639
are using

00:15:27,519 --> 00:15:31,759
channels to do deployments we actually

00:15:30,639 --> 00:15:33,759
do something similar

00:15:31,759 --> 00:15:35,040
only i don't make it a channel but we

00:15:33,759 --> 00:15:38,240
basically create a

00:15:35,040 --> 00:15:40,880
composite build of all the dependencies

00:15:38,240 --> 00:15:41,440
needed for deployments so what you see

00:15:40,880 --> 00:15:44,959
here is

00:15:41,440 --> 00:15:46,720
a store path which is the hare enclosure

00:15:44,959 --> 00:15:48,880
which contains everything we need for

00:15:46,720 --> 00:15:51,839
deployment

00:15:48,880 --> 00:15:53,600
so that's the lb application also

00:15:51,839 --> 00:15:56,560
software dependencies like

00:15:53,600 --> 00:15:57,519
the platform or the application server

00:15:56,560 --> 00:16:00,639
the operating system

00:15:57,519 --> 00:16:01,839
mixed packages some generic system

00:16:00,639 --> 00:16:05,680
configuration files

00:16:01,839 --> 00:16:07,279
how to install lb monitoring stuff

00:16:05,680 --> 00:16:08,399
and the machine definitions which are

00:16:07,279 --> 00:16:10,959
part of the source code of the

00:16:08,399 --> 00:16:13,120
application

00:16:10,959 --> 00:16:14,720
so basically if we want to deploy we can

00:16:13,120 --> 00:16:16,800
just give it this path

00:16:14,720 --> 00:16:18,000
put the next path correctly and we'll

00:16:16,800 --> 00:16:18,639
find everything you need for the

00:16:18,000 --> 00:16:20,720
deployment

00:16:18,639 --> 00:16:22,000
and basically you'll just run so i

00:16:20,720 --> 00:16:23,279
thought it was very interesting that

00:16:22,000 --> 00:16:26,240
ollie charles actually did something

00:16:23,279 --> 00:16:27,759
similar at finder

00:16:26,240 --> 00:16:31,600
it's good to know that people have

00:16:27,759 --> 00:16:31,600
similar ideas basically

00:16:31,920 --> 00:16:35,920
so i explained that of course i started

00:16:34,160 --> 00:16:37,199
building stuff with nix

00:16:35,920 --> 00:16:39,759
and we couldn't use it for the whole

00:16:37,199 --> 00:16:43,680
thing like the deployments and of course

00:16:39,759 --> 00:16:45,279
they want to use centos hcos

00:16:43,680 --> 00:16:47,519
but the nice thing about cento is is

00:16:45,279 --> 00:16:49,759
that

00:16:47,519 --> 00:16:50,639
one thing that i hate more about centos

00:16:49,759 --> 00:16:52,560
than centos

00:16:50,639 --> 00:16:54,160
is the fact that people build centos

00:16:52,560 --> 00:16:55,680
images manually

00:16:54,160 --> 00:16:57,920
because building things manually of

00:16:55,680 --> 00:17:01,040
course that's that's the evil

00:16:57,920 --> 00:17:02,480
so what they actually did is i actually

00:17:01,040 --> 00:17:04,000
automated the centos

00:17:02,480 --> 00:17:05,839
image generation so that at least we had

00:17:04,000 --> 00:17:07,199
a declarative specification what is in

00:17:05,839 --> 00:17:08,959
our center as image

00:17:07,199 --> 00:17:11,120
instead of somebody actually making the

00:17:08,959 --> 00:17:13,120
image changing some stuff then cleaning

00:17:11,120 --> 00:17:14,240
out the ssh demon public key

00:17:13,120 --> 00:17:16,240
you know all the kind of things that

00:17:14,240 --> 00:17:17,919
it's needed to actually fix

00:17:16,240 --> 00:17:19,600
all kinds of impure stuff when you

00:17:17,919 --> 00:17:21,439
create something like that

00:17:19,600 --> 00:17:22,720
and one thing that's really important

00:17:21,439 --> 00:17:24,319
about this is that

00:17:22,720 --> 00:17:27,039
nix packages has a lot of weird

00:17:24,319 --> 00:17:28,960
functions in them so one of them

00:17:27,039 --> 00:17:30,720
is the run in linux vm where you can

00:17:28,960 --> 00:17:34,080
basically give it a next build

00:17:30,720 --> 00:17:36,160
and will just run in a vm

00:17:34,080 --> 00:17:37,679
magically so i think it starts up some

00:17:36,160 --> 00:17:38,799
key new stuff don't really know the

00:17:37,679 --> 00:17:40,880
specifics

00:17:38,799 --> 00:17:42,320
but it just works so if you ever need a

00:17:40,880 --> 00:17:43,679
build that actually needs roots for

00:17:42,320 --> 00:17:45,760
example to create a

00:17:43,679 --> 00:17:47,600
file system or something like that you

00:17:45,760 --> 00:17:50,559
can actually just use this function

00:17:47,600 --> 00:17:52,240
it's awesome in my opinion so it's also

00:17:50,559 --> 00:17:54,960
used for like easy2 and

00:17:52,240 --> 00:17:56,160
the images for like google cloud and

00:17:54,960 --> 00:17:57,360
first of all box

00:17:56,160 --> 00:17:59,039
so there's a reference there so make

00:17:57,360 --> 00:18:00,320
sure to check it out because i think

00:17:59,039 --> 00:18:01,919
this is one of these things

00:18:00,320 --> 00:18:04,160
that you don't really necessarily think

00:18:01,919 --> 00:18:07,280
of that that exists but it's

00:18:04,160 --> 00:18:11,520
undocumented but still super awesome

00:18:07,280 --> 00:18:13,919
um so we actually use that also to

00:18:11,520 --> 00:18:15,919
test our platform so we actually provide

00:18:13,919 --> 00:18:18,400
a binary release to our

00:18:15,919 --> 00:18:20,000
clients and to our developers and of

00:18:18,400 --> 00:18:21,120
course they're using like ubuntu and

00:18:20,000 --> 00:18:22,880
fedora

00:18:21,120 --> 00:18:24,720
but but i don't want to have fedora and

00:18:22,880 --> 00:18:26,320
ubuntu machines in my build form because

00:18:24,720 --> 00:18:29,200
i have to manage them and install them

00:18:26,320 --> 00:18:31,440
and maybe have to use puppet or

00:18:29,200 --> 00:18:33,360
something like that so we just do it in

00:18:31,440 --> 00:18:34,880
x because in nix you can actually build

00:18:33,360 --> 00:18:37,840
these kind of things to character

00:18:34,880 --> 00:18:39,600
flee so here you see an example of well

00:18:37,840 --> 00:18:41,280
you see the basic dependencies that lb

00:18:39,600 --> 00:18:42,080
has so we need to have bash installs we

00:18:41,280 --> 00:18:46,080
need to have java

00:18:42,080 --> 00:18:48,480
python and some proc.ps that's probably

00:18:46,080 --> 00:18:50,000
for the ps tool or something like that

00:18:48,480 --> 00:18:51,200
and we have a function called test

00:18:50,000 --> 00:18:52,480
download package which basically does

00:18:51,200 --> 00:18:53,039
the equivalent of downloading the

00:18:52,480 --> 00:18:54,960
package

00:18:53,039 --> 00:18:56,480
unpacking it running some basic tests on

00:18:54,960 --> 00:18:58,400
it and this is all

00:18:56,480 --> 00:19:00,799
done inside the next build so it

00:18:58,400 --> 00:19:03,280
integrates into hydra immediate

00:19:00,799 --> 00:19:05,039
like automatically so it's really nice i

00:19:03,280 --> 00:19:05,760
mean there's support for centos fedora

00:19:05,039 --> 00:19:09,120
ubuntu

00:19:05,760 --> 00:19:09,120
debian whatever

00:19:09,760 --> 00:19:14,160
oh really i haven't used that yet

00:19:14,400 --> 00:19:19,760
i always say we need to build everything

00:19:16,799 --> 00:19:22,720
so also we built our documentation

00:19:19,760 --> 00:19:24,320
automatically because doing things

00:19:22,720 --> 00:19:27,200
manually is is

00:19:24,320 --> 00:19:28,160
super evil and things will get it's not

00:19:27,200 --> 00:19:31,039
synchronized

00:19:28,160 --> 00:19:32,160
so our documentation is typically built

00:19:31,039 --> 00:19:33,200
continuously and

00:19:32,160 --> 00:19:35,039
every night there's actually a

00:19:33,200 --> 00:19:36,799
deployment going to our website to make

00:19:35,039 --> 00:19:38,720
sure that

00:19:36,799 --> 00:19:41,200
our clients have always up-to-date

00:19:38,720 --> 00:19:44,400
documentation

00:19:41,200 --> 00:19:47,679
so one thing that we have been using

00:19:44,400 --> 00:19:49,039
hydra a lot for and mostly since this

00:19:47,679 --> 00:19:51,039
year because we started

00:19:49,039 --> 00:19:52,080
a designated benchmark team which is

00:19:51,039 --> 00:19:53,760
very important for database

00:19:52,080 --> 00:19:55,440
because you kind of want to know when

00:19:53,760 --> 00:19:58,160
you introduce a performance

00:19:55,440 --> 00:19:59,679
regression it's uh so we introduced a

00:19:58,160 --> 00:20:02,720
lot of benchmarking in our

00:19:59,679 --> 00:20:04,159
uh in our builds

00:20:02,720 --> 00:20:06,080
the benchmark is kind of tricky when you

00:20:04,159 --> 00:20:06,960
have a build farm because that you kind

00:20:06,080 --> 00:20:10,159
of want to run

00:20:06,960 --> 00:20:11,280
in a consistent environment so what you

00:20:10,159 --> 00:20:13,280
cannot do is have

00:20:11,280 --> 00:20:14,880
two builds at the same time because it

00:20:13,280 --> 00:20:16,559
will actually influence things because

00:20:14,880 --> 00:20:18,799
there will be i o used by multiple

00:20:16,559 --> 00:20:20,960
prices

00:20:18,799 --> 00:20:22,320
or cpu used so you need to make sure

00:20:20,960 --> 00:20:22,960
that these kind of builds can run at the

00:20:22,320 --> 00:20:25,840
same

00:20:22,960 --> 00:20:26,720
uh in the same consistent way so how we

00:20:25,840 --> 00:20:29,120
have solved that

00:20:26,720 --> 00:20:30,559
is basically having a subset of our

00:20:29,120 --> 00:20:34,320
build farm in hydra

00:20:30,559 --> 00:20:36,080
that only allows one build at a time

00:20:34,320 --> 00:20:37,520
but the hydra scheduler actually was

00:20:36,080 --> 00:20:40,400
kind of dumb i mean he

00:20:37,520 --> 00:20:41,440
explained that yesterday and that caused

00:20:40,400 --> 00:20:43,360
a lot of

00:20:41,440 --> 00:20:44,559
contention on the build farm where the

00:20:43,360 --> 00:20:45,440
normal bills actually wouldn't go

00:20:44,559 --> 00:20:47,520
through because

00:20:45,440 --> 00:20:49,120
all the benchmark bills were waiting for

00:20:47,520 --> 00:20:50,559
a build slot

00:20:49,120 --> 00:20:52,480
so that's also one of the reasons why

00:20:50,559 --> 00:20:53,919
elco improved

00:20:52,480 --> 00:20:56,880
our scheduler in the hydraulic queue

00:20:53,919 --> 00:20:59,679
runner so that we can actually run

00:20:56,880 --> 00:21:01,360
these mass skill benchmarks on there as

00:20:59,679 --> 00:21:04,320
well

00:21:01,360 --> 00:21:05,520
um so when you do benchmarking there are

00:21:04,320 --> 00:21:07,760
a few things that you actually want to

00:21:05,520 --> 00:21:10,080
take into consideration

00:21:07,760 --> 00:21:11,520
so the data set that goes in so you can

00:21:10,080 --> 00:21:13,600
have data sets from one gigabyte thank

00:21:11,520 --> 00:21:15,280
you by 100 gigabytes

00:21:13,600 --> 00:21:16,720
but also things like the software which

00:21:15,280 --> 00:21:19,280
platform

00:21:16,720 --> 00:21:20,720
which version which type of benchmark

00:21:19,280 --> 00:21:22,320
you actually want to run

00:21:20,720 --> 00:21:23,919
but also what type of cpu you want to

00:21:22,320 --> 00:21:26,000
run it on how much memory how much

00:21:23,919 --> 00:21:28,000
storage what type of storage

00:21:26,000 --> 00:21:29,600
these kind of combinations are really

00:21:28,000 --> 00:21:32,559
nice to program in

00:21:29,600 --> 00:21:33,760
nix because we have this language to and

00:21:32,559 --> 00:21:36,240
the tools

00:21:33,760 --> 00:21:38,000
to actually describe all of these things

00:21:36,240 --> 00:21:41,520
so we have nexos 4

00:21:38,000 --> 00:21:44,240
for the let's see the system

00:21:41,520 --> 00:21:47,280
and nyx for the versions dataset that's

00:21:44,240 --> 00:21:49,280
basically just defined as a list

00:21:47,280 --> 00:21:51,039
but also nixops to actually deploy new

00:21:49,280 --> 00:21:53,840
instances on ec2

00:21:51,039 --> 00:21:55,520
for machines that we could normally not

00:21:53,840 --> 00:21:58,080
really buy ourselves

00:21:55,520 --> 00:21:59,840
so we have benchmarks that go against a

00:21:58,080 --> 00:22:01,120
terabyte of data

00:21:59,840 --> 00:22:05,120
but we don't have a build machine to

00:22:01,120 --> 00:22:07,520
actually fit that on so what the ilco

00:22:05,120 --> 00:22:09,280
developers the hydra ec2 provisioner

00:22:07,520 --> 00:22:12,320
we're given a certain

00:22:09,280 --> 00:22:14,720
type of feature that we need like memory

00:22:12,320 --> 00:22:15,840
or storage we actually deploy a new

00:22:14,720 --> 00:22:18,000
machine where that

00:22:15,840 --> 00:22:19,520
that actually will be built and it's

00:22:18,000 --> 00:22:19,840
really nice because now we can actually

00:22:19,520 --> 00:22:22,000
run

00:22:19,840 --> 00:22:26,000
benchmarks on really big job sets which

00:22:22,000 --> 00:22:30,320
you couldn't do before

00:22:26,000 --> 00:22:30,320
so i started the logic box in 2011

00:22:30,400 --> 00:22:35,760
and we started out with three linux

00:22:32,000 --> 00:22:38,480
machines at some point we got a mac

00:22:35,760 --> 00:22:40,240
but i i was located in utrecht and our

00:22:38,480 --> 00:22:41,360
office is in atlanta so you get the

00:22:40,240 --> 00:22:44,480
problem like

00:22:41,360 --> 00:22:45,200
you buy harder and hardware dies i hate

00:22:44,480 --> 00:22:47,440
hardware

00:22:45,200 --> 00:22:49,120
so we actually needed it people to

00:22:47,440 --> 00:22:50,320
actually respond quickly and of course

00:22:49,120 --> 00:22:52,480
like any company

00:22:50,320 --> 00:22:54,240
all right it department has a lot of

00:22:52,480 --> 00:22:56,080
stuff other stuff to do so the response

00:22:54,240 --> 00:22:58,159
time was pretty slow

00:22:56,080 --> 00:23:00,240
so after about two years we actually

00:22:58,159 --> 00:23:03,600
decided to run all our

00:23:00,240 --> 00:23:05,919
build farm outside of our net

00:23:03,600 --> 00:23:08,159
like our on-premise network and we

00:23:05,919 --> 00:23:10,480
actually moved to hedzner

00:23:08,159 --> 00:23:12,400
and i mean ashley he made the hesner

00:23:10,480 --> 00:23:13,760
back end and i'm so thankful for him

00:23:12,400 --> 00:23:17,440
that he did because it's

00:23:13,760 --> 00:23:20,000
awesome and it has saved us so much work

00:23:17,440 --> 00:23:21,440
and nowadays we have 21 machines at

00:23:20,000 --> 00:23:24,480
hester

00:23:21,440 --> 00:23:25,840
but also two mac osx machines not that

00:23:24,480 --> 00:23:27,360
hazard because they don't do that but

00:23:25,840 --> 00:23:30,080
there's an american company called mac

00:23:27,360 --> 00:23:33,760
stadium where you can basically hire

00:23:30,080 --> 00:23:35,360
or it's not higher rent the mac hardware

00:23:33,760 --> 00:23:38,080
and basically you pay some money for the

00:23:35,360 --> 00:23:40,240
hosting so we have also kind of

00:23:38,080 --> 00:23:41,600
it's not cloud but they deliver usually

00:23:40,240 --> 00:23:44,400
within two hours if you need extra

00:23:41,600 --> 00:23:45,760
capacity so it's actually pretty awesome

00:23:44,400 --> 00:23:47,919
and it's much cheaper than easy too

00:23:45,760 --> 00:23:51,440
because of course we could actually run

00:23:47,919 --> 00:23:53,919
24 7 on ec2 but then our bill would

00:23:51,440 --> 00:23:54,960
go skyrocket and it's already pretty

00:23:53,919 --> 00:23:58,240
high so

00:23:54,960 --> 00:23:58,240
that's probably not a good idea

00:23:58,320 --> 00:24:02,159
kind of to show you how our so this is

00:24:00,159 --> 00:24:04,799
the beginning when i

00:24:02,159 --> 00:24:06,159
joined ledger blocks uh this is a graph

00:24:04,799 --> 00:24:09,039
that shows the number of builds

00:24:06,159 --> 00:24:09,679
so our hydra is called bob the builder

00:24:09,039 --> 00:24:10,880
and

00:24:09,679 --> 00:24:12,880
so if you have children you know what

00:24:10,880 --> 00:24:15,120
it's about and

00:24:12,880 --> 00:24:15,919
you see there's a big steep like in the

00:24:15,120 --> 00:24:18,880
first year

00:24:15,919 --> 00:24:19,279
we went from zero to well i don't know

00:24:18,880 --> 00:24:21,200
00:24:19,279 --> 00:24:22,880
000 a month oh yeah so it's per month

00:24:21,200 --> 00:24:24,960
it's good no

00:24:22,880 --> 00:24:27,520
so currently we do about i don't know

00:24:24,960 --> 00:24:30,159
1200 builds a day

00:24:27,520 --> 00:24:31,440
with uh with hydra but more importantly

00:24:30,159 --> 00:24:33,120
i told you that we do

00:24:31,440 --> 00:24:35,360
benchmark builds a lot more since this

00:24:33,120 --> 00:24:37,039
year you can see the spike there because

00:24:35,360 --> 00:24:38,159
these benchmarks typically run really

00:24:37,039 --> 00:24:38,960
long especially when you have these

00:24:38,159 --> 00:24:42,159
longer

00:24:38,960 --> 00:24:42,880
job sets so i think it's tripled the

00:24:42,159 --> 00:24:44,880
time

00:24:42,880 --> 00:24:46,720
that we spent in the number of built

00:24:44,880 --> 00:24:49,440
hours so if we would have run it

00:24:46,720 --> 00:24:49,440
sequentially

00:24:50,799 --> 00:24:55,440
so okay now i've got all the builds the

00:24:53,760 --> 00:24:56,880
builds farm we're testing everything so

00:24:55,440 --> 00:25:00,240
it's really nice

00:24:56,880 --> 00:25:03,360
now we need to start deploying um

00:25:00,240 --> 00:25:05,600
so for you guys who

00:25:03,360 --> 00:25:07,279
might not know exactly what nextup sits

00:25:05,600 --> 00:25:09,120
it's basically a tool to deploy a set of

00:25:07,279 --> 00:25:10,880
nexus machines

00:25:09,120 --> 00:25:12,480
and that can be to anything it can be to

00:25:10,880 --> 00:25:14,400
like the cloud or it can be to

00:25:12,480 --> 00:25:16,480
on-premise machines

00:25:14,400 --> 00:25:17,919
it's based on nix it uses the nx

00:25:16,480 --> 00:25:19,840
language to actually describe it

00:25:17,919 --> 00:25:21,760
actually use the nexus module system as

00:25:19,840 --> 00:25:23,840
well so i think it has an expressive

00:25:21,760 --> 00:25:27,440
configuration language which is nice

00:25:23,840 --> 00:25:27,440
it's also nice and composable

00:25:27,520 --> 00:25:32,000
and it has uh kind of a separation at

00:25:30,159 --> 00:25:34,320
least it allows you to have a separate

00:25:32,000 --> 00:25:36,080
uh separation of logical and physical

00:25:34,320 --> 00:25:38,640
aspects of the deployment

00:25:36,080 --> 00:25:40,159
so what that means is that in one case

00:25:38,640 --> 00:25:41,200
we actually want to describe what is

00:25:40,159 --> 00:25:43,600
deployed to a system

00:25:41,200 --> 00:25:44,400
i want to have a running lb instance or

00:25:43,600 --> 00:25:46,240
like a

00:25:44,400 --> 00:25:47,600
database running or i want to have a web

00:25:46,240 --> 00:25:48,880
server running

00:25:47,600 --> 00:25:50,799
and on the other side you actually want

00:25:48,880 --> 00:25:52,559
to describe where you want to deploy it

00:25:50,799 --> 00:25:54,720
to so that's definitely i want to deploy

00:25:52,559 --> 00:25:56,880
to ec2 on this instance size or i want

00:25:54,720 --> 00:25:58,400
to deploy to virtualbox

00:25:56,880 --> 00:26:00,159
so it's useful for a lot of things like

00:25:58,400 --> 00:26:02,320
development but also for

00:26:00,159 --> 00:26:03,760
let's say if a client needs to go to a

00:26:02,320 --> 00:26:04,400
different cloud provider you actually

00:26:03,760 --> 00:26:07,919
want to

00:26:04,400 --> 00:26:11,200
don't want to do too much of changes

00:26:07,919 --> 00:26:14,480
so that's how it looks like in a picture

00:26:11,200 --> 00:26:16,400
so the typical example of nexops

00:26:14,480 --> 00:26:18,159
looks like this so you have this

00:26:16,400 --> 00:26:19,440
functional so i want to have the nixos

00:26:18,159 --> 00:26:22,559
homepage

00:26:19,440 --> 00:26:25,120
and i want to deploy to ec2 well turns

00:26:22,559 --> 00:26:26,799
out when you do a lot of deployments

00:26:25,120 --> 00:26:28,720
what will happen is people will start

00:26:26,799 --> 00:26:31,919
copying this part

00:26:28,720 --> 00:26:32,240
make a copy of it change it and of

00:26:31,919 --> 00:26:34,080
course

00:26:32,240 --> 00:26:36,880
code cloning results in all kinds of

00:26:34,080 --> 00:26:39,120
inconsistent deployments

00:26:36,880 --> 00:26:40,320
so what we have done a lot lately is

00:26:39,120 --> 00:26:42,000
because a lot of these client

00:26:40,320 --> 00:26:43,360
applications that we're deploying

00:26:42,000 --> 00:26:45,440
we actually want all kinds of different

00:26:43,360 --> 00:26:47,679
versions running some with a smaller

00:26:45,440 --> 00:26:50,000
data set some with a bigger data set

00:26:47,679 --> 00:26:52,240
but you also have the variability

00:26:50,000 --> 00:26:55,120
between production and development

00:26:52,240 --> 00:26:56,880
environments so what our deployments

00:26:55,120 --> 00:27:00,240
typically look like nowadays

00:26:56,880 --> 00:27:02,159
is uh it has actually arguments so it's

00:27:00,240 --> 00:27:04,320
actually a function

00:27:02,159 --> 00:27:05,440
which captured this variability so

00:27:04,320 --> 00:27:08,640
things like which

00:27:05,440 --> 00:27:10,320
aws account to deploy to uh which region

00:27:08,640 --> 00:27:11,760
uh which instance type

00:27:10,320 --> 00:27:13,200
do you want to have the batch enabled

00:27:11,760 --> 00:27:14,720
because sometimes let's say during

00:27:13,200 --> 00:27:16,000
development you don't want batches to

00:27:14,720 --> 00:27:17,600
trigger

00:27:16,000 --> 00:27:20,000
but also like is it the production

00:27:17,600 --> 00:27:21,360
system so we are a bit stricter with our

00:27:20,000 --> 00:27:22,320
production system so

00:27:21,360 --> 00:27:25,039
we want to make sure that all the

00:27:22,320 --> 00:27:26,559
monitoring is set up correctly

00:27:25,039 --> 00:27:29,200
so these kind of things you can cover

00:27:26,559 --> 00:27:30,720
with these arguments

00:27:29,200 --> 00:27:32,720
and i think that's a very nice thing

00:27:30,720 --> 00:27:34,480
because it kind of declares what your

00:27:32,720 --> 00:27:36,320
variability in the different deployments

00:27:34,480 --> 00:27:40,960
are

00:27:36,320 --> 00:27:44,320
without needing to copy the files around

00:27:40,960 --> 00:27:46,960
so do we use nexups oh yeah

00:27:44,320 --> 00:27:47,679
we have networks and clusters up to 54

00:27:46,960 --> 00:27:50,399
machines

00:27:47,679 --> 00:27:52,320
in one functional unit so you can

00:27:50,399 --> 00:27:55,520
imagine database once you do replication

00:27:52,320 --> 00:27:58,960
all kinds of clustering so our biggest

00:27:55,520 --> 00:27:58,960
network is 54 machines

00:27:59,039 --> 00:28:02,480
so i went and went to dig into all the

00:28:00,799 --> 00:28:05,760
logs to see how many times

00:28:02,480 --> 00:28:09,120
people did what so there were

00:28:05,760 --> 00:28:11,840
100 nixops create calls being done

00:28:09,120 --> 00:28:14,720
88 delete so that basically means there

00:28:11,840 --> 00:28:18,399
were 100 new deployments in 88

00:28:14,720 --> 00:28:20,159
thrown away uh 1700 times people called

00:28:18,399 --> 00:28:22,000
nixop's deploy which basically there can

00:28:20,159 --> 00:28:22,799
be anything from let's say configuration

00:28:22,000 --> 00:28:26,000
change

00:28:22,799 --> 00:28:29,200
to a full-scale new deployment

00:28:26,000 --> 00:28:30,880
and 300 environments have been destroyed

00:28:29,200 --> 00:28:32,399
and basically you kill the machines then

00:28:30,880 --> 00:28:35,200
but it can be that for example you want

00:28:32,399 --> 00:28:36,720
to redeploy it from scratch again

00:28:35,200 --> 00:28:38,799
and this is being done by 40 different

00:28:36,720 --> 00:28:40,720
people in the company

00:28:38,799 --> 00:28:41,840
so to give you an idea about how many

00:28:40,720 --> 00:28:44,960
servers we run

00:28:41,840 --> 00:28:46,399
with nixos and nixops

00:28:44,960 --> 00:28:47,760
is we have a lot of internal

00:28:46,399 --> 00:28:48,159
infrastructure you think like the build

00:28:47,760 --> 00:28:51,600
farm

00:28:48,159 --> 00:28:52,080
runs on like on hatsner but we also have

00:28:51,600 --> 00:28:55,360
some

00:28:52,080 --> 00:28:59,120
local servers in the on-premise with ec2

00:28:55,360 --> 00:29:01,279
on google cloud we have about 50 of them

00:28:59,120 --> 00:29:03,760
for our clients we have a whole lot more

00:29:01,279 --> 00:29:06,399
uh last i checked like three days ago it

00:29:03,760 --> 00:29:08,399
was 550 machines

00:29:06,399 --> 00:29:10,159
that we deploy for clients so that

00:29:08,399 --> 00:29:12,399
includes like big networks like

00:29:10,159 --> 00:29:14,799
that f50 machines right so it doesn't

00:29:12,399 --> 00:29:17,360
doesn't mean we have 500 deployments

00:29:14,799 --> 00:29:19,120
but at least the uh yeah there's quite a

00:29:17,360 --> 00:29:20,480
lot of machines

00:29:19,120 --> 00:29:22,559
so most of our deployments are kind of

00:29:20,480 --> 00:29:24,799
like static deployments so this has a

00:29:22,559 --> 00:29:25,919
fixed number of machines

00:29:24,799 --> 00:29:27,679
of course when you use the cloud you

00:29:25,919 --> 00:29:28,880
want to do all kinds of dynamic scaling

00:29:27,679 --> 00:29:31,279
so we have a system

00:29:28,880 --> 00:29:32,880
to offload some work for applications

00:29:31,279 --> 00:29:35,279
but also for developers

00:29:32,880 --> 00:29:36,399
where they can send some work to be done

00:29:35,279 --> 00:29:38,240
and that is actually running

00:29:36,399 --> 00:29:41,679
continuously and it has

00:29:38,240 --> 00:29:43,840
at any time of the week it has either

00:29:41,679 --> 00:29:45,520
from 0 to 1500 machines running

00:29:43,840 --> 00:29:47,600
concurrently

00:29:45,520 --> 00:29:49,520
so when ilco was showing that graph of

00:29:47,600 --> 00:29:52,840
the unique ip addresses

00:29:49,520 --> 00:29:55,840
that was probably me or at least part of

00:29:52,840 --> 00:29:58,480
it

00:29:55,840 --> 00:29:59,840
so maybe talk a bit about how we

00:29:58,480 --> 00:30:02,000
actually

00:29:59,840 --> 00:30:04,640
arrange all these deployments because

00:30:02,000 --> 00:30:06,080
there's 40 people actually doing it

00:30:04,640 --> 00:30:08,480
we have different clients and we don't

00:30:06,080 --> 00:30:10,159
want everybody to have access to all the

00:30:08,480 --> 00:30:10,880
systems so you want to make sure you

00:30:10,159 --> 00:30:14,320
kind of

00:30:10,880 --> 00:30:17,120
separate people and groups from

00:30:14,320 --> 00:30:18,320
certain deployments also like operations

00:30:17,120 --> 00:30:19,919
they won't have full control of the

00:30:18,320 --> 00:30:21,360
production environment so we can never

00:30:19,919 --> 00:30:24,240
touch them

00:30:21,360 --> 00:30:25,679
and stuff so basically we have two

00:30:24,240 --> 00:30:26,799
deployment machines there are actually

00:30:25,679 --> 00:30:28,799
three but

00:30:26,799 --> 00:30:30,960
two main ones one for the development

00:30:28,799 --> 00:30:32,399
and one for production

00:30:30,960 --> 00:30:34,320
where we have for each client a

00:30:32,399 --> 00:30:37,679
different

00:30:34,320 --> 00:30:40,159
user account which they can sudo into

00:30:37,679 --> 00:30:41,279
at least if you have the rights to go to

00:30:40,159 --> 00:30:43,360
a client's

00:30:41,279 --> 00:30:45,520
system and deploy there so that's how

00:30:43,360 --> 00:30:46,799
most people work

00:30:45,520 --> 00:30:49,440
but there's some issues with that

00:30:46,799 --> 00:30:50,000
because i mean go tell a salesperson to

00:30:49,440 --> 00:30:52,399
ssh

00:30:50,000 --> 00:30:55,440
into a machine and then run some kind of

00:30:52,399 --> 00:30:59,279
script it's kind of scary for them

00:30:55,440 --> 00:31:00,799
so they don't really like that so much

00:30:59,279 --> 00:31:02,720
but there's also another problem so in

00:31:00,799 --> 00:31:05,919
x-ops we actually store the credentials

00:31:02,720 --> 00:31:07,360
for the cloud that we're using

00:31:05,919 --> 00:31:09,120
in the home directory of the user where

00:31:07,360 --> 00:31:11,039
you're running nexup so they call that

00:31:09,120 --> 00:31:13,039
for example for ec2 it's the ec2 keys

00:31:11,039 --> 00:31:14,320
file in the home directory

00:31:13,039 --> 00:31:15,760
that basically means that anybody who

00:31:14,320 --> 00:31:17,039
has access to the user account will

00:31:15,760 --> 00:31:19,679
actually be able to

00:31:17,039 --> 00:31:21,519
just grab these credentials and that's

00:31:19,679 --> 00:31:22,720
of course a bad situation

00:31:21,519 --> 00:31:24,559
so we actually want to make sure that

00:31:22,720 --> 00:31:27,679
that gets a bit

00:31:24,559 --> 00:31:28,960
improved but even worse is we have this

00:31:27,679 --> 00:31:30,320
nice language to describe our

00:31:28,960 --> 00:31:32,640
deployments

00:31:30,320 --> 00:31:34,320
and you think that we have super

00:31:32,640 --> 00:31:36,960
consistent deployments but

00:31:34,320 --> 00:31:38,720
what actually happens is that when

00:31:36,960 --> 00:31:40,080
people are inconsistent in for example

00:31:38,720 --> 00:31:42,000
how they check out files

00:31:40,080 --> 00:31:45,200
which files they use or that suddenly

00:31:42,000 --> 00:31:46,640
they share a checkout of a repository

00:31:45,200 --> 00:31:48,960
between two deployments

00:31:46,640 --> 00:31:51,039
they actually start to interact because

00:31:48,960 --> 00:31:54,559
people are not disciplined enough to

00:31:51,039 --> 00:31:56,320
let's say use uh the correct processes

00:31:54,559 --> 00:31:58,159
for it so that basically means

00:31:56,320 --> 00:32:00,720
that you still get you have a nice

00:31:58,159 --> 00:32:02,559
language to actually deploy your stuff

00:32:00,720 --> 00:32:05,519
but you can still get incorrect and

00:32:02,559 --> 00:32:07,760
inconsistent deployment so

00:32:05,519 --> 00:32:09,279
a second thing is i said that i showed

00:32:07,760 --> 00:32:10,240
some statistics about how many people

00:32:09,279 --> 00:32:11,440
were deploying

00:32:10,240 --> 00:32:13,679
it's actually kind of hard to figure

00:32:11,440 --> 00:32:15,200
that out so nixop actually logs every

00:32:13,679 --> 00:32:17,200
command that you're running

00:32:15,200 --> 00:32:18,799
to the syslog and also logs who's

00:32:17,200 --> 00:32:19,840
actually doing it so it is actually

00:32:18,799 --> 00:32:23,120
possible but

00:32:19,840 --> 00:32:26,399
it's still not very easy to do

00:32:23,120 --> 00:32:29,200
so we are well actually we

00:32:26,399 --> 00:32:29,679
one of my colleagues usama from tunis

00:32:29,200 --> 00:32:31,200
he's

00:32:29,679 --> 00:32:32,960
going to work on the nixops dashboard

00:32:31,200 --> 00:32:35,279
which will be a web ui

00:32:32,960 --> 00:32:37,039
for nexups which will make it easier for

00:32:35,279 --> 00:32:40,080
let's say our sales people to spin up

00:32:37,039 --> 00:32:40,799
environments but also mitigate a few of

00:32:40,080 --> 00:32:43,840
the

00:32:40,799 --> 00:32:45,760
problems that we had with nixops

00:32:43,840 --> 00:32:47,279
it will be open source so i'm sure that

00:32:45,760 --> 00:32:48,799
let's say in the next few months

00:32:47,279 --> 00:32:50,880
it will just show up and we'll announce

00:32:48,799 --> 00:32:53,039
it once we have a usable version

00:32:50,880 --> 00:32:55,600
i hope you guys will start using it or

00:32:53,039 --> 00:32:57,200
at least try it

00:32:55,600 --> 00:32:58,720
so again we want to have a bit improved

00:32:57,200 --> 00:33:03,519
security by actually not

00:32:58,720 --> 00:33:06,320
allowing people direct access to the aws

00:33:03,519 --> 00:33:07,440
apis we want to have deeper operational

00:33:06,320 --> 00:33:09,200
visibility

00:33:07,440 --> 00:33:10,799
so that we can see what's going on

00:33:09,200 --> 00:33:12,000
because currently you have 40 people

00:33:10,799 --> 00:33:13,760
going somewhere

00:33:12,000 --> 00:33:15,919
and for example when you deploy

00:33:13,760 --> 00:33:16,720
something to the same deployment as two

00:33:15,919 --> 00:33:18,880
users

00:33:16,720 --> 00:33:20,159
the user just gets like yeah there's a

00:33:18,880 --> 00:33:22,080
lock on it

00:33:20,159 --> 00:33:23,840
but doesn't know what the other user is

00:33:22,080 --> 00:33:25,120
actually doing

00:33:23,840 --> 00:33:26,640
so it would be actually nice if you just

00:33:25,120 --> 00:33:27,440
in the web interface it says like no

00:33:26,640 --> 00:33:29,440
these operations

00:33:27,440 --> 00:33:31,519
are actually running and this user is

00:33:29,440 --> 00:33:33,039
doing that

00:33:31,519 --> 00:33:34,720
and it's very important if we want to

00:33:33,039 --> 00:33:36,240
have a proper audit drill so

00:33:34,720 --> 00:33:39,840
by redesigning this you want to make

00:33:36,240 --> 00:33:39,840
sure that that's all covered

00:33:40,159 --> 00:33:44,000
well and again this consists the issue

00:33:42,559 --> 00:33:45,360
things like checking out source code for

00:33:44,000 --> 00:33:47,200
the nyx expressions

00:33:45,360 --> 00:33:48,720
to deploy we want to make sure that

00:33:47,200 --> 00:33:51,440
that's also structured and

00:33:48,720 --> 00:33:53,440
basically by providing an api slash web

00:33:51,440 --> 00:33:56,080
user interface

00:33:53,440 --> 00:33:57,600
that will actually improve as well

00:33:56,080 --> 00:33:59,120
partly because we'll just basically

00:33:57,600 --> 00:34:00,799
allow

00:33:59,120 --> 00:34:04,320
only changes that were made in source

00:34:00,799 --> 00:34:04,320
control to be used

00:34:05,120 --> 00:34:10,399
so to uh

00:34:08,240 --> 00:34:11,359
summarize i think i was a bit quick

00:34:10,399 --> 00:34:14,800
maybe but uh

00:34:11,359 --> 00:34:16,639
that's okay gonna have lunch uh

00:34:14,800 --> 00:34:18,639
we wanna have reproducible composable

00:34:16,639 --> 00:34:20,079
builds with traceability so that's very

00:34:18,639 --> 00:34:21,359
important for me i really want to know

00:34:20,079 --> 00:34:22,399
what's going on in the system when

00:34:21,359 --> 00:34:24,159
there's a problem

00:34:22,399 --> 00:34:26,000
we want to know what changed for which

00:34:24,159 --> 00:34:26,720
reason i want to be able to actually

00:34:26,000 --> 00:34:29,119
efficiently

00:34:26,720 --> 00:34:30,000
look that up which i think nix and hydra

00:34:29,119 --> 00:34:32,399
give

00:34:30,000 --> 00:34:34,480
give us that opportunity so we want to

00:34:32,399 --> 00:34:36,720
have reproducible system configuration

00:34:34,480 --> 00:34:38,879
no more changing files on the servers

00:34:36,720 --> 00:34:40,399
like we were doing before

00:34:38,879 --> 00:34:41,919
and also making sure that we don't click

00:34:40,399 --> 00:34:44,399
in the aws console

00:34:41,919 --> 00:34:45,520
all kinds of infrastructure together in

00:34:44,399 --> 00:34:47,919
a manual way

00:34:45,520 --> 00:34:49,839
we need to do automation of provisioning

00:34:47,919 --> 00:34:50,960
and creating these reproducible networks

00:34:49,839 --> 00:34:53,520
as well

00:34:50,960 --> 00:34:54,000
so i won't say it's like nick's helps us

00:34:53,520 --> 00:34:55,679
a lot

00:34:54,000 --> 00:34:57,119
the fact that you guys are here so many

00:34:55,679 --> 00:34:59,440
people it

00:34:57,119 --> 00:35:00,960
it's awesome and the nexus community has

00:34:59,440 --> 00:35:03,520
given us a lot of things like for

00:35:00,960 --> 00:35:06,720
example the hetsner backhand of nixops

00:35:03,520 --> 00:35:08,160
that saves us so much time so logicbox

00:35:06,720 --> 00:35:10,079
is also thankful for that and that's why

00:35:08,160 --> 00:35:12,640
we try to give back

00:35:10,079 --> 00:35:13,760
at least changes to next next packages

00:35:12,640 --> 00:35:16,240
hydra and nixops

00:35:13,760 --> 00:35:17,760
back to the community but they also

00:35:16,240 --> 00:35:20,400
support our infrastructure

00:35:17,760 --> 00:35:22,240
so the fact that we have such a reliable

00:35:20,400 --> 00:35:24,320
binary cache nowadays

00:35:22,240 --> 00:35:25,760
that's fully being paid for by

00:35:24,320 --> 00:35:29,200
logicblocks

00:35:25,760 --> 00:35:30,960
so it's hosted on the ec2 on the s3

00:35:29,200 --> 00:35:33,200
with cloudfront and then make sure that

00:35:30,960 --> 00:35:34,960
we have reliable caches

00:35:33,200 --> 00:35:36,400
and make sure that people who deploy

00:35:34,960 --> 00:35:37,040
over the world actually have a decent

00:35:36,400 --> 00:35:38,560
speed

00:35:37,040 --> 00:35:40,240
which was kind of an issue before when

00:35:38,560 --> 00:35:40,800
we were just hosted in the data center

00:35:40,240 --> 00:35:44,160
of

00:35:40,800 --> 00:35:45,839
tu delft so i'm very happy that they're

00:35:44,160 --> 00:35:48,000
so supportive of

00:35:45,839 --> 00:35:49,680
all this so this is my last slide thank

00:35:48,000 --> 00:35:59,839
you for listening

00:35:49,680 --> 00:35:59,839
and i hope you guys have some questions

00:36:01,520 --> 00:36:05,839
okay we have a bit of time for questions

00:36:09,040 --> 00:36:13,599
i'm curious if you ever experimented

00:36:11,520 --> 00:36:15,520
with uh

00:36:13,599 --> 00:36:16,800
having like continuous integration or

00:36:15,520 --> 00:36:18,960
anything so taking

00:36:16,800 --> 00:36:20,560
outputs from hydra and then deploying

00:36:18,960 --> 00:36:22,880
them immediately with nick's ops

00:36:20,560 --> 00:36:24,240
yeah so we actually do that so let me go

00:36:22,880 --> 00:36:25,359
back to one of the slides because i

00:36:24,240 --> 00:36:28,079
probably didn't mention it

00:36:25,359 --> 00:36:29,520
clearly enough and i kind of skipped

00:36:28,079 --> 00:36:31,920
over it so

00:36:29,520 --> 00:36:33,599
this is an expression that uh shows how

00:36:31,920 --> 00:36:36,240
to build a client application

00:36:33,599 --> 00:36:37,520
and so sometimes usually we work with

00:36:36,240 --> 00:36:39,680
fixed releases so

00:36:37,520 --> 00:36:41,359
every month we do a release that is like

00:36:39,680 --> 00:36:43,599
let's say

00:36:41,359 --> 00:36:44,880
double checked also manually except for

00:36:43,599 --> 00:36:47,200
the

00:36:44,880 --> 00:36:48,079
the automated part so you can actually

00:36:47,200 --> 00:36:50,160
pass it like a

00:36:48,079 --> 00:36:51,920
version identifier so like the described

00:36:50,160 --> 00:36:53,760
there in the default value on top

00:36:51,920 --> 00:36:55,520
but what we actually also do what

00:36:53,760 --> 00:36:57,440
actually happens a lot is that people

00:36:55,520 --> 00:36:59,280
build their applications against

00:36:57,440 --> 00:37:00,960
uh in the integration build so that's

00:36:59,280 --> 00:37:02,720
for example a nightly build or

00:37:00,960 --> 00:37:04,480
let's say the continuous build and they

00:37:02,720 --> 00:37:04,960
can basically just configure that by in

00:37:04,480 --> 00:37:08,000
hydra

00:37:04,960 --> 00:37:11,440
saying changing the height the inputs

00:37:08,000 --> 00:37:13,040
from uh let's say not a string but to a

00:37:11,440 --> 00:37:14,400
previous hydra build and people point to

00:37:13,040 --> 00:37:15,839
the correct build and that will be

00:37:14,400 --> 00:37:17,359
automatically used

00:37:15,839 --> 00:37:20,240
application will be built and that's

00:37:17,359 --> 00:37:23,200
immediately deployable in xops

00:37:20,240 --> 00:37:23,760
so yes and then um just had a follow-up

00:37:23,200 --> 00:37:27,040
question

00:37:23,760 --> 00:37:29,520
is do you see uh any way that nix

00:37:27,040 --> 00:37:30,960
ops can help with orchestration like is

00:37:29,520 --> 00:37:33,839
that was that ever an issue

00:37:30,960 --> 00:37:35,440
like right now you are defining all of

00:37:33,839 --> 00:37:36,160
your services and deploying them with

00:37:35,440 --> 00:37:39,680
nixops

00:37:36,160 --> 00:37:41,440
but maybe there's some binding between

00:37:39,680 --> 00:37:43,680
which machines get which and all this

00:37:41,440 --> 00:37:46,079
but uh i'm wondering if

00:37:43,680 --> 00:37:47,599
you see opportunity there to to say to

00:37:46,079 --> 00:37:49,280
not have to specify that and

00:37:47,599 --> 00:37:50,880
do some smart allocation of where the

00:37:49,280 --> 00:37:51,520
applications are i think that's more

00:37:50,880 --> 00:37:55,040
like

00:37:51,520 --> 00:37:57,119
a bit more in the space of disneyx who's

00:37:55,040 --> 00:37:58,800
actually doing that next is really about

00:37:57,119 --> 00:38:00,720
machine configuration

00:37:58,800 --> 00:38:02,160
and i don't think that necessarily a

00:38:00,720 --> 00:38:04,960
good idea to implement let's say

00:38:02,160 --> 00:38:05,599
such an orchestration in nix objects

00:38:04,960 --> 00:38:08,160
itself

00:38:05,599 --> 00:38:08,720
i think it's a really good idea to look

00:38:08,160 --> 00:38:10,240
into

00:38:08,720 --> 00:38:11,760
the work that sunlight has been doing on

00:38:10,240 --> 00:38:14,560
this next because that's actually

00:38:11,760 --> 00:38:16,480
meant specifically designed for such a

00:38:14,560 --> 00:38:19,839
such a scenario

00:38:16,480 --> 00:38:19,839
thank you

00:38:24,160 --> 00:38:29,680
um so could you go forward to the test

00:38:26,560 --> 00:38:31,520
download slide i think

00:38:29,680 --> 00:38:33,359
yeah so so what is that actually

00:38:31,520 --> 00:38:34,079
downloading is that waiting for a commit

00:38:33,359 --> 00:38:35,359
to happen

00:38:34,079 --> 00:38:36,880
triggering a hydra build and then

00:38:35,359 --> 00:38:38,320
immediately uploading something and then

00:38:36,880 --> 00:38:39,760
trying to download it again

00:38:38,320 --> 00:38:41,359
or is that well so actually it doesn't

00:38:39,760 --> 00:38:42,400
really do the downloading and sensor it

00:38:41,359 --> 00:38:43,680
will have it

00:38:42,400 --> 00:38:46,480
available but it will actually do the

00:38:43,680 --> 00:38:46,880
unpacking okay so the the function name

00:38:46,480 --> 00:38:48,320
is

00:38:46,880 --> 00:38:50,160
might be a misnomer because it's not

00:38:48,320 --> 00:38:51,599
actually going to the network

00:38:50,160 --> 00:38:53,119
it's basically testing what comes out of

00:38:51,599 --> 00:38:54,320
let's say our integration build our

00:38:53,119 --> 00:38:57,599
continuous build

00:38:54,320 --> 00:39:00,079
and extracting that and check

00:38:57,599 --> 00:39:01,200
and doing basic tests on well in this

00:39:00,079 --> 00:39:02,880
case fedora

00:39:01,200 --> 00:39:04,640
okay have you have you considered having

00:39:02,880 --> 00:39:06,480
a hydro drop that does like an upload to

00:39:04,640 --> 00:39:07,839
a http server just to

00:39:06,480 --> 00:39:09,680
kind of know that you've got that full

00:39:07,839 --> 00:39:11,920
flow working uh

00:39:09,680 --> 00:39:13,599
yeah it's kind of tricky because yeah

00:39:11,920 --> 00:39:16,400
it's such a impure

00:39:13,599 --> 00:39:17,040
thing so we try to avoid uh try to avoid

00:39:16,400 --> 00:39:19,520
doing that

00:39:17,040 --> 00:39:20,079
okay so and i mean you have typical

00:39:19,520 --> 00:39:22,640
basic

00:39:20,079 --> 00:39:23,839
basically checks maybe with ping then to

00:39:22,640 --> 00:39:25,280
see if actually

00:39:23,839 --> 00:39:27,280
if you can actually download it so

00:39:25,280 --> 00:39:28,240
there's not necessarily that much of a

00:39:27,280 --> 00:39:30,560
need

00:39:28,240 --> 00:39:30,560
for it

00:39:31,760 --> 00:39:35,920
uh i have a christmas question about

00:39:33,440 --> 00:39:39,760
hydra have you have any thoughts of

00:39:35,920 --> 00:39:44,560
making it more declarative like declared

00:39:39,760 --> 00:39:46,320
the projects in nics or in some

00:39:44,560 --> 00:39:47,680
yeah we've considered it but we never

00:39:46,320 --> 00:39:49,200
got around to actually

00:39:47,680 --> 00:39:51,680
implementing it but it would actually be

00:39:49,200 --> 00:39:53,280
nice because then you can track change

00:39:51,680 --> 00:39:55,040
change over time so currently hydra

00:39:53,280 --> 00:39:57,680
doesn't check let's say

00:39:55,040 --> 00:39:58,320
the the job level specification of the

00:39:57,680 --> 00:40:00,480
inputs

00:39:58,320 --> 00:40:02,400
over time but it does track let's say

00:40:00,480 --> 00:40:02,880
the individual revisions that have been

00:40:02,400 --> 00:40:05,200
used

00:40:02,880 --> 00:40:06,480
so it would indeed be a nice feature uh

00:40:05,200 --> 00:40:10,079
to add hydra

00:40:06,480 --> 00:40:12,000
to be more declarative but it also uh

00:40:10,079 --> 00:40:14,079
kind of there's a downside to it uh of

00:40:12,000 --> 00:40:14,640
course in the sense of usability so for

00:40:14,079 --> 00:40:16,720
example

00:40:14,640 --> 00:40:18,160
it might be harder for let's say our

00:40:16,720 --> 00:40:20,960
consultants actually

00:40:18,160 --> 00:40:22,560
make a quick change uh in the user

00:40:20,960 --> 00:40:24,000
interface

00:40:22,560 --> 00:40:26,319
it will be harder let's say if they need

00:40:24,000 --> 00:40:29,200
to do it in code so that's kind of uh

00:40:26,319 --> 00:40:29,200
it's kind of a trade-off

00:40:33,680 --> 00:40:39,839
oh there's one there

00:40:41,520 --> 00:40:45,040
uh yeah you mentioned you know the um

00:40:44,240 --> 00:40:46,880
dealing with

00:40:45,040 --> 00:40:48,319
your builders your deploy users and all

00:40:46,880 --> 00:40:48,880
that and everything that goes on with

00:40:48,319 --> 00:40:50,880
there

00:40:48,880 --> 00:40:52,560
we have similar issues and i think we

00:40:50,880 --> 00:40:54,400
you know we were unansible and stuff

00:40:52,560 --> 00:40:54,960
like that but the same problem exists

00:40:54,400 --> 00:40:57,599
keys

00:40:54,960 --> 00:40:59,599
ssh et cetera um are just right there

00:40:57,599 --> 00:41:01,200
for the taking once the user's in there

00:40:59,599 --> 00:41:02,720
have you thought about how you do that i

00:41:01,200 --> 00:41:04,079
mean it sounds like the web ui helps

00:41:02,720 --> 00:41:06,400
because that pushes you back

00:41:04,079 --> 00:41:07,760
away from the machine but i mean i don't

00:41:06,400 --> 00:41:08,800
want to use a web ui i want to use my

00:41:07,760 --> 00:41:10,240
command line

00:41:08,800 --> 00:41:12,000
so i'm wondering if you had thought

00:41:10,240 --> 00:41:14,800
about any ideas

00:41:12,000 --> 00:41:15,280
so the web ui or it will actually be an

00:41:14,800 --> 00:41:17,119
api

00:41:15,280 --> 00:41:18,720
so it will actually you'll be able to

00:41:17,119 --> 00:41:20,400
develop tools to actually

00:41:18,720 --> 00:41:22,000
uh call there as well but then you

00:41:20,400 --> 00:41:23,599
actually still have to say the issue is

00:41:22,000 --> 00:41:26,640
still there right

00:41:23,599 --> 00:41:26,960
so we'll have to look into uh solving

00:41:26,640 --> 00:41:29,280
the

00:41:26,960 --> 00:41:30,240
credential issues not just by the ui

00:41:29,280 --> 00:41:33,040
because it's just one

00:41:30,240 --> 00:41:34,400
layer but maybe by some other key

00:41:33,040 --> 00:41:36,560
management system

00:41:34,400 --> 00:41:40,160
like i don't know these guys from

00:41:36,560 --> 00:41:40,160
hashicorp has some interesting stuff

00:41:44,960 --> 00:41:48,079
it's not a question more of a remark

00:41:47,119 --> 00:41:50,880
like

00:41:48,079 --> 00:41:51,440
that maybe before being very ambitious

00:41:50,880 --> 00:41:54,640
with

00:41:51,440 --> 00:41:55,280
like nixifying job sets we can do hydro

00:41:54,640 --> 00:41:58,960
cli

00:41:55,280 --> 00:42:00,480
properly and and from there we can sort

00:41:58,960 --> 00:42:04,240
of like

00:42:00,480 --> 00:42:07,119
be more declarative i guess at

00:42:04,240 --> 00:42:08,880
you know without doing a drastic step to

00:42:07,119 --> 00:42:10,319
to refactor everything

00:42:08,880 --> 00:42:11,520
yeah i'm not sure if that's a good idea

00:42:10,319 --> 00:42:12,720
i think it would be better to actually

00:42:11,520 --> 00:42:14,720
focus on making

00:42:12,720 --> 00:42:16,400
it more declarative because in the cli

00:42:14,720 --> 00:42:17,760
you'll still have the same issue as

00:42:16,400 --> 00:42:19,920
a web interface basically just a

00:42:17,760 --> 00:42:23,280
different vehicle uh to do this

00:42:19,920 --> 00:42:23,280
imperative changing of your

00:42:25,040 --> 00:42:27,520
well yeah

00:42:28,160 --> 00:42:34,720
yeah maybe we could consider it

00:42:31,520 --> 00:42:36,319
but if you feel like you

00:42:34,720 --> 00:42:44,400
if you ever want to contribute to hydra

00:42:36,319 --> 00:42:44,400

YouTube URL: https://www.youtube.com/watch?v=GoYXxADPiJ4


