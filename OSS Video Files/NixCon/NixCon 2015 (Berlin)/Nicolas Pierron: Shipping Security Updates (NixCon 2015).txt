Title: Nicolas Pierron: Shipping Security Updates (NixCon 2015)
Publication date: 2020-10-29
Playlist: NixCon 2015 (Berlin)
Description: 
	
Captions: 
	00:00:04,960 --> 00:00:08,640
welcome back i hope you enjoyed your

00:00:06,319 --> 00:00:08,640
lunch

00:00:08,880 --> 00:00:14,000
the last presentation is going to be

00:00:12,320 --> 00:00:15,679
very very interesting it's my pleasure

00:00:14,000 --> 00:00:18,880
to introduce nicholas perron

00:00:15,679 --> 00:00:20,880
who is another long time contributor of

00:00:18,880 --> 00:00:22,320
nixos i think it's also been working on

00:00:20,880 --> 00:00:23,600
the project for at least seven or eight

00:00:22,320 --> 00:00:25,439
years

00:00:23,600 --> 00:00:26,640
nicholas is a professional compiler

00:00:25,439 --> 00:00:29,679
engineer

00:00:26,640 --> 00:00:30,960
and his the most significant

00:00:29,679 --> 00:00:33,280
contribution to nixos

00:00:30,960 --> 00:00:35,960
is probably the module system that we

00:00:33,280 --> 00:00:38,000
all enjoy these days so when we write a

00:00:35,960 --> 00:00:39,840
configuration.nix the mechanism that

00:00:38,000 --> 00:00:40,640
actually turns this into something that

00:00:39,840 --> 00:00:43,600
runs is

00:00:40,640 --> 00:00:44,079
his invention and original design and

00:00:43,600 --> 00:00:46,640
today

00:00:44,079 --> 00:00:48,719
he's going to be talking about a novel

00:00:46,640 --> 00:00:52,239
way of shipping security updates

00:00:48,719 --> 00:00:55,600
so enjoy your presentation thanks peter

00:00:52,239 --> 00:00:57,199
oh okay so

00:00:55,600 --> 00:00:58,640
i have a bit of a problem with my

00:00:57,199 --> 00:01:01,280
presentation

00:00:58,640 --> 00:01:03,520
i realized that after repeating too many

00:01:01,280 --> 00:01:06,000
times i kind of shorten it and shorten

00:01:03,520 --> 00:01:09,040
it and shorten it so

00:01:06,000 --> 00:01:11,200
i found the solution which is

00:01:09,040 --> 00:01:12,880
i will do something during the

00:01:11,200 --> 00:01:14,720
introduction to speak how i

00:01:12,880 --> 00:01:17,680
accidentally shortened my presentation

00:01:14,720 --> 00:01:17,680
by repeating it

00:01:18,080 --> 00:01:23,759
so we are going to talk about shipping

00:01:20,799 --> 00:01:23,759
security updates

00:01:23,840 --> 00:01:27,280
one of the first thing i want to show

00:01:25,520 --> 00:01:32,079
you is

00:01:27,280 --> 00:01:35,040
security update matters and

00:01:32,079 --> 00:01:36,880
i have a few links so unfortunately the

00:01:35,040 --> 00:01:37,759
ones that you can find in my slides that

00:01:36,880 --> 00:01:40,799
i just

00:01:37,759 --> 00:01:42,799
mentioned on twitter are kind of a bit

00:01:40,799 --> 00:01:46,079
off because they decided to

00:01:42,799 --> 00:01:50,479
put the page to 40 or four foot

00:01:46,079 --> 00:01:53,680
four for just today

00:01:50,479 --> 00:01:56,079
who knows so

00:01:53,680 --> 00:01:57,920
they have a new presentation but i will

00:01:56,079 --> 00:02:00,960
probably show you the old one

00:01:57,920 --> 00:02:05,759
because the old one is sorted by dates

00:02:00,960 --> 00:02:09,039
which is not the case of this one so

00:02:05,759 --> 00:02:14,400
let me bring the old one

00:02:09,039 --> 00:02:14,400
so i looked for debian not because

00:02:15,280 --> 00:02:21,360
yeah debian is known for having lots

00:02:19,200 --> 00:02:23,520
and caring about security issues more

00:02:21,360 --> 00:02:27,360
than anybody else so

00:02:23,520 --> 00:02:31,760
i looked for dedian and i found some

00:02:27,360 --> 00:02:31,760
few interesting things so we use unzip

00:02:33,120 --> 00:02:38,920
okay separately f4 okay

00:02:36,800 --> 00:02:41,040
uh we use wordpress

00:02:38,920 --> 00:02:47,519
[Applause]

00:02:41,040 --> 00:02:52,640
okay uh that probably same class of bugs

00:02:47,519 --> 00:02:52,640
and zip and wordpress

00:02:52,800 --> 00:02:55,519
next page

00:02:56,160 --> 00:03:03,760
so php we use php

00:03:00,490 --> 00:03:05,440
[Laughter]

00:03:03,760 --> 00:03:07,920
i hear some people complaining about

00:03:05,440 --> 00:03:07,920
choosing it

00:03:08,400 --> 00:03:15,920
so okay php gdk pizza buff

00:03:12,319 --> 00:03:19,920
oh this one we use it in firefox i

00:03:15,920 --> 00:03:25,280
if i remember oh mini upnc

00:03:19,920 --> 00:03:25,280
okay so mariadb

00:03:26,560 --> 00:03:29,519
open gdk

00:03:30,319 --> 00:03:33,840
virtualbox we use virtualbox

00:03:36,720 --> 00:03:43,840
and okay and if i remember correctly

00:03:40,959 --> 00:03:45,440
uh on all the pages you have like

00:03:43,840 --> 00:03:48,879
firefox and others

00:03:45,440 --> 00:03:51,040
because we're making releases and

00:03:48,879 --> 00:03:52,000
stuff like that so as user link is a

00:03:51,040 --> 00:03:54,959
link to

00:03:52,000 --> 00:03:56,640
the u.s website with us the cve

00:03:54,959 --> 00:03:59,680
enumerations

00:03:56,640 --> 00:04:02,400
for enumerating

00:03:59,680 --> 00:04:03,439
bugs which are reported and we've have

00:04:02,400 --> 00:04:06,799
security flows

00:04:03,439 --> 00:04:07,760
oh here it is firefox so if we look at

00:04:06,799 --> 00:04:11,360
the bugs from

00:04:07,760 --> 00:04:15,840
last week or yeah last week

00:04:11,360 --> 00:04:15,840
so we use that acrobat reader

00:04:17,280 --> 00:04:23,759
okay i won't ask about cisco stuff

00:04:20,880 --> 00:04:23,759
we use android

00:04:27,600 --> 00:04:30,560
and firefox

00:04:30,720 --> 00:04:39,759
okay so that's my point

00:04:34,479 --> 00:04:43,360
we can get back to the presentation okay

00:04:39,759 --> 00:04:44,240
so basically there are lots of security

00:04:43,360 --> 00:04:46,479
issues

00:04:44,240 --> 00:04:49,040
in the wild and you are probably using

00:04:46,479 --> 00:04:52,479
software which have security issues

00:04:49,040 --> 00:04:56,639
so can we trust uh

00:04:52,479 --> 00:04:59,040
can we trust this software

00:04:56,639 --> 00:05:02,960
depends what we define by trust i cannot

00:04:59,040 --> 00:05:02,960
trust myself for not making any bugs

00:05:03,360 --> 00:05:07,280
that's a problem because i'm also

00:05:04,720 --> 00:05:10,240
developing in firefox and

00:05:07,280 --> 00:05:11,039
i kind of add lots of bugs hopefully we

00:05:10,240 --> 00:05:13,919
have a good

00:05:11,039 --> 00:05:14,960
uh security team which as a fuzz which

00:05:13,919 --> 00:05:16,800
use fuzzing

00:05:14,960 --> 00:05:20,639
on firefox to make sure that we don't

00:05:16,800 --> 00:05:22,720
ship any of this bike to the users

00:05:20,639 --> 00:05:23,680
sometimes it happens but hopefully not

00:05:22,720 --> 00:05:26,240
too frequently

00:05:23,680 --> 00:05:28,160
so the question is how do we define

00:05:26,240 --> 00:05:29,360
trust knowing that all softwares have

00:05:28,160 --> 00:05:33,120
bugs

00:05:29,360 --> 00:05:36,560
mostly so

00:05:33,120 --> 00:05:40,479
in terms of of shipping security updates

00:05:36,560 --> 00:05:43,280
we can view the trust relation as

00:05:40,479 --> 00:05:44,960
do the software developers and release

00:05:43,280 --> 00:05:48,880
and the person who release it

00:05:44,960 --> 00:05:50,720
care about you do they fix it

00:05:48,880 --> 00:05:53,199
do they ship it do they ship the

00:05:50,720 --> 00:05:56,720
security updates and do you get it

00:05:53,199 --> 00:05:59,759
so do they care about you basically

00:05:56,720 --> 00:06:01,120
and to show that i will take a few

00:05:59,759 --> 00:06:02,240
examples that we saw in the list

00:06:01,120 --> 00:06:05,600
previously

00:06:02,240 --> 00:06:08,960
not nexus not yet

00:06:05,600 --> 00:06:11,360
we will see android which is like uh

00:06:08,960 --> 00:06:12,639
well known and developed and released by

00:06:11,360 --> 00:06:16,000
different people

00:06:12,639 --> 00:06:19,120
and we will see firefox also uh

00:06:16,000 --> 00:06:22,160
which is developed by mozilla

00:06:19,120 --> 00:06:24,400
and released by mozilla as well

00:06:22,160 --> 00:06:26,080
but also by linux distribution such as

00:06:24,400 --> 00:06:29,120
nixos

00:06:26,080 --> 00:06:30,880
so first i will

00:06:29,120 --> 00:06:34,720
talk about this i will talk about these

00:06:30,880 --> 00:06:37,919
graphs this graph is

00:06:34,720 --> 00:06:42,080
how to explain it clearly this is

00:06:37,919 --> 00:06:45,440
how the api is the versions of the api

00:06:42,080 --> 00:06:48,000
of underrate in the wild so

00:06:45,440 --> 00:06:48,960
as of today we have like less than 10

00:06:48,000 --> 00:06:52,240
percent of

00:06:48,960 --> 00:06:54,800
uh 5.1 and this version of api

00:06:52,240 --> 00:06:56,800
are mapped to uh the version numbers of

00:06:54,800 --> 00:06:59,520
android

00:06:56,800 --> 00:07:01,680
what this graph does not show are the

00:06:59,520 --> 00:07:04,319
dot releases which are corresponding to

00:07:01,680 --> 00:07:06,560
the security fixes which are applied

00:07:04,319 --> 00:07:09,280
so first we will not look at this graph

00:07:06,560 --> 00:07:11,520
but only at the zero percent line

00:07:09,280 --> 00:07:13,520
the zero percent line is basically what

00:07:11,520 --> 00:07:14,960
google developers are doing or android

00:07:13,520 --> 00:07:18,319
developers

00:07:14,960 --> 00:07:20,720
to be more general which is like

00:07:18,319 --> 00:07:22,080
you see that they are making releases at

00:07:20,720 --> 00:07:24,960
quite a nice pace

00:07:22,080 --> 00:07:26,479
which is kind of good the other

00:07:24,960 --> 00:07:28,000
interesting point is that they are not

00:07:26,479 --> 00:07:31,759
making dot releases after

00:07:28,000 --> 00:07:34,560
they made a new uh minor release so

00:07:31,759 --> 00:07:38,880
as soon as they made 4.4s they are not

00:07:34,560 --> 00:07:38,880
making any dot releases for 4.3

00:07:38,960 --> 00:07:42,960
which is kind of a problem if you don't

00:07:40,639 --> 00:07:46,319
update your phone

00:07:42,960 --> 00:07:48,319
so just

00:07:46,319 --> 00:07:50,000
looking at the bottom of the graph i

00:07:48,319 --> 00:07:51,599
guess we can

00:07:50,000 --> 00:07:54,479
first android developers for making

00:07:51,599 --> 00:07:56,479
frequently releases to users

00:07:54,479 --> 00:07:58,080
but there is another part of this graph

00:07:56,479 --> 00:08:01,199
which shows us

00:07:58,080 --> 00:08:04,720
what people are using effectively

00:08:01,199 --> 00:08:09,360
and this is not google

00:08:04,720 --> 00:08:13,440
this is like your phone carrier or a

00:08:09,360 --> 00:08:16,240
phone manufacturer or network operator

00:08:13,440 --> 00:08:17,360
they are shipping is already selling

00:08:16,240 --> 00:08:20,400
user phones

00:08:17,360 --> 00:08:21,199
and the problem is that it costs them

00:08:20,400 --> 00:08:24,560
money

00:08:21,199 --> 00:08:25,440
to get a phone validated to work on the

00:08:24,560 --> 00:08:28,160
network

00:08:25,440 --> 00:08:29,919
and they don't care enough to pay for

00:08:28,160 --> 00:08:32,320
getting new updates to you

00:08:29,919 --> 00:08:34,000
to easy users so basically as these

00:08:32,320 --> 00:08:34,959
customers they don't want to ship new

00:08:34,000 --> 00:08:38,080
version and

00:08:34,959 --> 00:08:41,599
that's why you end up with like

00:08:38,080 --> 00:08:43,519
a bit near eighty percent

00:08:41,599 --> 00:08:47,040
of users which are running versions

00:08:43,519 --> 00:08:55,360
which are unlikely to be updated anymore

00:08:47,040 --> 00:08:59,680
hey uber 300 users

00:08:55,360 --> 00:09:00,160
yes so this diagram is updated as

00:08:59,680 --> 00:09:03,760
probably

00:09:00,160 --> 00:09:08,800
every or

00:09:03,760 --> 00:09:11,200
i mean

00:09:08,800 --> 00:09:12,399
okay i don't know all the details about

00:09:11,200 --> 00:09:14,720
android and i

00:09:12,399 --> 00:09:16,560
took this diagram from the wikipedia

00:09:14,720 --> 00:09:20,480
page about the story of

00:09:16,560 --> 00:09:20,480
these sort of android versions

00:09:20,839 --> 00:09:25,440
so this

00:09:23,200 --> 00:09:27,040
diagram shows us two things you can have

00:09:25,440 --> 00:09:31,200
developers who cares about

00:09:27,040 --> 00:09:34,839
users but if it's not released

00:09:31,200 --> 00:09:36,800
that's a big problem so let's look at

00:09:34,839 --> 00:09:40,480
firefox

00:09:36,800 --> 00:09:41,600
whoa that's when that's a lot of

00:09:40,480 --> 00:09:46,000
releases

00:09:41,600 --> 00:09:50,000
and by the way if you see 18.0.1

00:09:46,000 --> 00:09:52,800
hey i've made a patch over there

00:09:50,000 --> 00:09:52,800
kind of my fault

00:09:54,399 --> 00:09:58,560
sometimes things go in releases and who

00:09:57,519 --> 00:10:01,040
knows

00:09:58,560 --> 00:10:04,399
so one of the interesting thing about

00:10:01,040 --> 00:10:07,440
firefox is not uh

00:10:04,399 --> 00:10:08,480
that much that you're making a lot of

00:10:07,440 --> 00:10:11,519
releases oh

00:10:08,480 --> 00:10:14,959
it is uh it's

00:10:11,519 --> 00:10:16,800
so okay rewind

00:10:14,959 --> 00:10:18,399
firefox is making a lot of releases we

00:10:16,800 --> 00:10:20,160
can see that

00:10:18,399 --> 00:10:22,800
they seems to care a lot about their

00:10:20,160 --> 00:10:25,519
users that sounds like a good news

00:10:22,800 --> 00:10:26,800
and one of the questions we might ask is

00:10:25,519 --> 00:10:29,279
how do they do that

00:10:26,800 --> 00:10:33,120
how do they ship that many releases like

00:10:29,279 --> 00:10:36,640
if we look between 2013 and 2014

00:10:33,120 --> 00:10:40,880
we see that they have roughly between

00:10:36,640 --> 00:10:44,480
they have 10 major release and about 20

00:10:40,880 --> 00:10:46,000
patch releases that's kind of a lot of

00:10:44,480 --> 00:10:48,959
releases like more than one

00:10:46,000 --> 00:10:49,360
month is so we might wonder how you do

00:10:48,959 --> 00:10:52,560
that

00:10:49,360 --> 00:10:54,959
and the one of the things that

00:10:52,560 --> 00:10:56,160
you have to remember when you're making

00:10:54,959 --> 00:10:59,200
such updates

00:10:56,160 --> 00:11:00,560
is that you don't want something which

00:10:59,200 --> 00:11:03,120
involves stress

00:11:00,560 --> 00:11:04,160
because once this involves stress you

00:11:03,120 --> 00:11:06,959
are making

00:11:04,160 --> 00:11:09,279
mistakes like typos and copy and paste

00:11:06,959 --> 00:11:09,279
errors

00:11:09,440 --> 00:11:14,000
which apparently somebody caught in my

00:11:12,839 --> 00:11:17,600
slides

00:11:14,000 --> 00:11:20,079
so you want a process for

00:11:17,600 --> 00:11:21,120
making releases you want to make sure

00:11:20,079 --> 00:11:23,440
that

00:11:21,120 --> 00:11:25,200
if you have to ship a security issue

00:11:23,440 --> 00:11:26,399
then it will follow some things that you

00:11:25,200 --> 00:11:28,240
are sure to

00:11:26,399 --> 00:11:29,519
to not make any mistakes because that's

00:11:28,240 --> 00:11:31,440
some things that

00:11:29,519 --> 00:11:34,399
written down step one step two step

00:11:31,440 --> 00:11:36,800
three so

00:11:34,399 --> 00:11:38,640
for firefox we have a process which we

00:11:36,800 --> 00:11:41,600
call chemspiel for

00:11:38,640 --> 00:11:44,079
chemical spillage which is kind of the

00:11:41,600 --> 00:11:47,440
vocabulary that we have inside mozilla

00:11:44,079 --> 00:11:50,480
and the goal is to make sure

00:11:47,440 --> 00:11:53,600
that we do the things right so

00:11:50,480 --> 00:11:54,399
if we look at what this looks like from

00:11:53,600 --> 00:11:58,399
the time

00:11:54,399 --> 00:12:00,240
uh so before this graph we have like

00:11:58,399 --> 00:12:02,079
some developers making sure that they

00:12:00,240 --> 00:12:02,720
have the right fit is in time and

00:12:02,079 --> 00:12:05,519
checking

00:12:02,720 --> 00:12:08,320
that this are working and then this goes

00:12:05,519 --> 00:12:11,680
into the build farms that we have

00:12:08,320 --> 00:12:12,000
which ensures that as soon as we build

00:12:11,680 --> 00:12:14,160
we

00:12:12,000 --> 00:12:15,200
know the time frame and we know what to

00:12:14,160 --> 00:12:17,920
do

00:12:15,200 --> 00:12:18,560
so if we look at this graph we have a

00:12:17,920 --> 00:12:21,040
few

00:12:18,560 --> 00:12:22,639
we have at the beginning okay we

00:12:21,040 --> 00:12:23,200
received the information that we want to

00:12:22,639 --> 00:12:26,399
build it

00:12:23,200 --> 00:12:29,040
and we tagged it and then we

00:12:26,399 --> 00:12:29,680
do the linux build we pack it with the

00:12:29,040 --> 00:12:32,680
language

00:12:29,680 --> 00:12:34,079
pack because we need

00:12:32,680 --> 00:12:38,160
internationalization

00:12:34,079 --> 00:12:41,120
as opposed to nexus so far and then

00:12:38,160 --> 00:12:42,560
a few hours after we are able to ship

00:12:41,120 --> 00:12:45,440
android versions to

00:12:42,560 --> 00:12:46,240
uh android and linux version to uh or

00:12:45,440 --> 00:12:48,240
users

00:12:46,240 --> 00:12:49,680
so as a distribution that's where you

00:12:48,240 --> 00:12:52,720
want to start shipping

00:12:49,680 --> 00:12:53,120
uh versions of firefox but firefox is

00:12:52,720 --> 00:12:55,600
not

00:12:53,120 --> 00:12:57,440
only on linux so we have a long process

00:12:55,600 --> 00:12:59,600
which goes and goes and goes where we

00:12:57,440 --> 00:13:04,160
have qa to make sure that this works

00:12:59,600 --> 00:13:06,560
on uh windows and which works correctly

00:13:04,160 --> 00:13:08,880
and then we ship it to all our users

00:13:06,560 --> 00:13:12,639
which are mostly windows users so far

00:13:08,880 --> 00:13:17,519
so that's about the day

00:13:12,639 --> 00:13:20,480
but for us it's about four hours after

00:13:17,519 --> 00:13:23,680
as the linux distribution so now let's

00:13:20,480 --> 00:13:26,720
look at how we do that in nexus or next

00:13:23,680 --> 00:13:27,760
packages so we have multiple ways of

00:13:26,720 --> 00:13:31,360
doing it

00:13:27,760 --> 00:13:34,880
we have the solution of

00:13:31,360 --> 00:13:34,880
you can wait until

00:13:35,120 --> 00:13:41,600
until everything got rebuilt

00:13:38,240 --> 00:13:42,320
in which case you can win a long time

00:13:41,600 --> 00:13:44,959
depending on

00:13:42,320 --> 00:13:45,519
what's not building anymore or you can

00:13:44,959 --> 00:13:47,360
have a

00:13:45,519 --> 00:13:48,800
solution of taking a small channel of a

00:13:47,360 --> 00:13:50,959
few packages but

00:13:48,800 --> 00:13:52,800
then in the case of firefox you probably

00:13:50,959 --> 00:13:53,760
have to recompile it yourself and if

00:13:52,800 --> 00:13:56,560
there is something

00:13:53,760 --> 00:13:58,480
broken in the middle you will probably

00:13:56,560 --> 00:13:59,600
not be able to recompile it yourself and

00:13:58,480 --> 00:14:01,519
you will end up with

00:13:59,600 --> 00:14:04,000
still the old version of firefox which

00:14:01,519 --> 00:14:07,199
has a security issue

00:14:04,000 --> 00:14:07,680
so to fix that we kind of introduced

00:14:07,199 --> 00:14:10,800
like

00:14:07,680 --> 00:14:14,720
okay is that mostly for libraries

00:14:10,800 --> 00:14:16,959
if that's if you have a library which is

00:14:14,720 --> 00:14:18,480
not fire this does not apply for firefox

00:14:16,959 --> 00:14:19,680
but mostly for libraries if you have

00:14:18,480 --> 00:14:22,959
libraries which

00:14:19,680 --> 00:14:26,079
uh is wrong as an issue then

00:14:22,959 --> 00:14:28,399
we have a function in uh packages

00:14:26,079 --> 00:14:31,360
replace displacement

00:14:28,399 --> 00:14:33,600
replace dependencies and which has an

00:14:31,360 --> 00:14:34,160
express option equivalent for uh doing

00:14:33,600 --> 00:14:36,880
that

00:14:34,160 --> 00:14:38,240
which goes through okay you have a cl

00:14:36,880 --> 00:14:40,480
you have a closure of

00:14:38,240 --> 00:14:43,120
or you have a package a user environment

00:14:40,480 --> 00:14:46,079
or your linux distribution

00:14:43,120 --> 00:14:46,639
derivation and you want to go through

00:14:46,079 --> 00:14:49,199
and

00:14:46,639 --> 00:14:50,240
replace one child by another and say huh

00:14:49,199 --> 00:14:54,720
it's fixed

00:14:50,240 --> 00:14:58,079
so let's take an example

00:14:54,720 --> 00:15:01,040
imagine your you have your boss in asia

00:14:58,079 --> 00:15:02,399
for some reason and it calls you at 3 am

00:15:01,040 --> 00:15:04,639
in the morning and tells you

00:15:02,399 --> 00:15:05,519
ok i heard that we have an open ssl

00:15:04,639 --> 00:15:09,199
issue can

00:15:05,519 --> 00:15:12,560
is our system safe

00:15:09,199 --> 00:15:17,199
and then you go on the computer you

00:15:12,560 --> 00:15:20,320
go you check okay next nexus wiki

00:15:17,199 --> 00:15:23,600
and then you read okay dear user please

00:15:20,320 --> 00:15:25,600
proceed as follow so you create a module

00:15:23,600 --> 00:15:28,880
and you put this stuff and you include

00:15:25,600 --> 00:15:32,240
that in all your configuration

00:15:28,880 --> 00:15:34,959
what can be wrong i i'm asking you

00:15:32,240 --> 00:15:34,959
any guesses

00:15:37,120 --> 00:15:40,480
only heaters yeah with multiple outputs

00:15:39,759 --> 00:15:42,880
that can be a

00:15:40,480 --> 00:15:42,880
solution

00:15:46,160 --> 00:15:55,360
that's another solution the wiki was

00:15:48,000 --> 00:15:57,519
updated by ziyacker

00:15:55,360 --> 00:15:59,360
yeah this solution does not solve the

00:15:57,519 --> 00:16:02,800
problem of setting clinking

00:15:59,360 --> 00:16:03,600
but i have another one for you it's 3am

00:16:02,800 --> 00:16:05,279
in the morning

00:16:03,600 --> 00:16:06,800
and you just copy and paste this stuff

00:16:05,279 --> 00:16:09,120
and didn't realize that

00:16:06,800 --> 00:16:10,079
as a vim user you confuse the l and the

00:16:09,120 --> 00:16:12,720
h and

00:16:10,079 --> 00:16:14,959
while you were typing the original equal

00:16:12,720 --> 00:16:17,920
open ssh

00:16:14,959 --> 00:16:19,440
you made a mistake of locking yourself

00:16:17,920 --> 00:16:20,160
out of all the computers that you are

00:16:19,440 --> 00:16:22,240
updating

00:16:20,160 --> 00:16:24,959
while keeping a security issue in

00:16:22,240 --> 00:16:24,959
openssl

00:16:25,920 --> 00:16:28,880
yeah veeam users

00:16:29,759 --> 00:16:36,880
so you don't want users to handle

00:16:32,480 --> 00:16:39,839
themselves security issues

00:16:36,880 --> 00:16:42,240
so the current model that we have

00:16:39,839 --> 00:16:43,199
requires the user awareness like update

00:16:42,240 --> 00:16:46,720
this channel or

00:16:43,199 --> 00:16:49,199
do this crazy manipulation and

00:16:46,720 --> 00:16:50,000
there are some tricky things about abi

00:16:49,199 --> 00:16:52,560
compatibility

00:16:50,000 --> 00:16:55,120
is that the user is not necessarily

00:16:52,560 --> 00:16:55,120
aware of

00:16:55,360 --> 00:17:01,199
and that's still an exception that's not

00:16:58,399 --> 00:17:04,319
part of the normal deployment

00:17:01,199 --> 00:17:06,799
so what are the solution you can wait

00:17:04,319 --> 00:17:08,959
you know what can happen after a month

00:17:06,799 --> 00:17:13,439
you will get an update

00:17:08,959 --> 00:17:15,679
maybe not you probably know this logo

00:17:13,439 --> 00:17:17,679
this logo is the earplug logo from the

00:17:15,679 --> 00:17:21,120
openssl issue

00:17:17,679 --> 00:17:25,919
and what surprised me about this logo

00:17:21,120 --> 00:17:28,640
is that they got a logo

00:17:25,919 --> 00:17:29,919
it took us a year for the next a bit

00:17:28,640 --> 00:17:32,960
more than a year and

00:17:29,919 --> 00:17:33,919
two or three i can't remember to get the

00:17:32,960 --> 00:17:36,880
first logo

00:17:33,919 --> 00:17:39,919
that we recently replaced and in a few

00:17:36,880 --> 00:17:41,600
days they got a logo

00:17:39,919 --> 00:17:43,520
what what is this world in which we're

00:17:41,600 --> 00:17:47,360
living where security issues are getting

00:17:43,520 --> 00:17:51,360
a logo

00:17:47,360 --> 00:17:54,400
so let's see how we can fix that

00:17:51,360 --> 00:17:57,039
so currently replace dependency is one

00:17:54,400 --> 00:17:58,480
of the nicest ways that we have to

00:17:57,039 --> 00:18:00,559
update

00:17:58,480 --> 00:18:01,679
for security issues because it does not

00:18:00,559 --> 00:18:03,919
involve uh

00:18:01,679 --> 00:18:06,000
recompiling everything it only involves

00:18:03,919 --> 00:18:07,679
recompiling the ones that you have a fix

00:18:06,000 --> 00:18:09,679
for

00:18:07,679 --> 00:18:11,600
so the problems that we have today is

00:18:09,679 --> 00:18:14,480
it's maintained by and we don't want any

00:18:11,600 --> 00:18:17,600
user interaction

00:18:14,480 --> 00:18:20,799
one of the other problem is that the way

00:18:17,600 --> 00:18:22,559
it does today is like it make sure that

00:18:20,799 --> 00:18:23,760
you have all the packages and look for

00:18:22,559 --> 00:18:27,200
the runtime dependencies

00:18:23,760 --> 00:18:28,720
in hey you have to compile them and

00:18:27,200 --> 00:18:30,640
look for the runtime dependencies and

00:18:28,720 --> 00:18:32,640
then check okay is there is this runtime

00:18:30,640 --> 00:18:35,760
dependency okay replace it by this one

00:18:32,640 --> 00:18:36,720
so this means that you have to compile

00:18:35,760 --> 00:18:40,160
everything before

00:18:36,720 --> 00:18:42,640
knowing that you want to update it which

00:18:40,160 --> 00:18:44,400
can be kind of problematic if you're

00:18:42,640 --> 00:18:44,960
just wondering if you have a different

00:18:44,400 --> 00:18:46,799
one

00:18:44,960 --> 00:18:48,080
you just want to take okay do i get the

00:18:46,799 --> 00:18:51,440
same derivation oh

00:18:48,080 --> 00:18:54,480
no i get a new system to compile

00:18:51,440 --> 00:18:56,640
so and there is also the problems that

00:18:54,480 --> 00:18:59,679
elko mentioned about the fact that

00:18:56,640 --> 00:19:00,880
we still have issue about static linking

00:18:59,679 --> 00:19:03,360
but that's some things that we can

00:19:00,880 --> 00:19:05,919
handle in some way and

00:19:03,360 --> 00:19:08,400
that's a line that if i do that it

00:19:05,919 --> 00:19:08,400
disappear

00:19:09,520 --> 00:19:15,120
so we will

00:19:12,640 --> 00:19:16,080
address in the rest of this presentation

00:19:15,120 --> 00:19:18,400
a way

00:19:16,080 --> 00:19:20,320
that i started to make in april request

00:19:18,400 --> 00:19:22,400
to make sure that

00:19:20,320 --> 00:19:23,520
security updates are transparent for the

00:19:22,400 --> 00:19:25,919
users

00:19:23,520 --> 00:19:27,760
that they are fast which means that

00:19:25,919 --> 00:19:30,799
either only has to build one thing

00:19:27,760 --> 00:19:33,120
and one and make it the first thing that

00:19:30,799 --> 00:19:36,559
it has to build

00:19:33,120 --> 00:19:38,559
and that also it's easy for you

00:19:36,559 --> 00:19:40,320
where packaging software to make sure

00:19:38,559 --> 00:19:42,720
that okay i know what

00:19:40,320 --> 00:19:44,240
is an api i know that this is an api

00:19:42,720 --> 00:19:47,520
compatible change

00:19:44,240 --> 00:19:50,559
so let's do let's update it this way

00:19:47,520 --> 00:19:52,799
and saying in the sense that we don't

00:19:50,559 --> 00:19:53,679
look at frontline dependencies to know

00:19:52,799 --> 00:19:57,120
if

00:19:53,679 --> 00:20:00,880
it if we should update or not

00:19:57,120 --> 00:20:02,720
so by transparent what i mean is that

00:20:00,880 --> 00:20:04,080
if you were to do the first two lines

00:20:02,720 --> 00:20:07,039
and you should use this

00:20:04,080 --> 00:20:08,159
next two lines yeah it's the same

00:20:07,039 --> 00:20:11,280
ideally

00:20:08,159 --> 00:20:13,120
you shall not do anything that's how

00:20:11,280 --> 00:20:16,159
firefights is working you don't hey

00:20:13,120 --> 00:20:17,919
update it you got a new version but no

00:20:16,159 --> 00:20:20,480
user action at all

00:20:17,919 --> 00:20:21,600
but that's the ideal world and we can

00:20:20,480 --> 00:20:25,520
leave that for

00:20:21,600 --> 00:20:25,520
later so

00:20:25,679 --> 00:20:32,240
what does that imply that implies that

00:20:29,919 --> 00:20:33,360
we have next packages as of today which

00:20:32,240 --> 00:20:36,320
is a fixed point with

00:20:33,360 --> 00:20:37,280
a list of package where we have a

00:20:36,320 --> 00:20:39,440
package a

00:20:37,280 --> 00:20:41,600
a package b which depends on a and a

00:20:39,440 --> 00:20:45,440
package c which depends on b

00:20:41,600 --> 00:20:49,360
so if we want c we have to pull b and a

00:20:45,440 --> 00:20:50,240
and so in terms of implications this

00:20:49,360 --> 00:20:52,240
implies that we

00:20:50,240 --> 00:20:54,559
have to have the same layout as next

00:20:52,240 --> 00:20:56,080
packages so as a start we will take next

00:20:54,559 --> 00:21:00,480
packages as

00:20:56,080 --> 00:21:03,520
or solution that's transparent

00:21:00,480 --> 00:21:08,159
but we want to be and to have it fast

00:21:03,520 --> 00:21:08,159
and to avoid uh recompilation so

00:21:09,760 --> 00:21:14,240
that's one of the solution which is a

00:21:12,720 --> 00:21:17,280
bit more complex so

00:21:14,240 --> 00:21:20,960
let's look a bit at it

00:21:17,280 --> 00:21:24,320
we have a and c which are fixed version

00:21:20,960 --> 00:21:27,360
so i have a fixes for a so i have a i

00:21:24,320 --> 00:21:29,520
can recompile a oh

00:21:27,360 --> 00:21:31,840
i don't need the arrow from a to a

00:21:29,520 --> 00:21:34,799
that's a detail

00:21:31,840 --> 00:21:35,919
no i need yeah i need an arrow from the

00:21:34,799 --> 00:21:39,200
dependencies of a

00:21:35,919 --> 00:21:41,600
to the blue a whatever

00:21:39,200 --> 00:21:42,240
you you can do this transformation in

00:21:41,600 --> 00:21:45,760
your head and

00:21:42,240 --> 00:21:48,799
offset it will rip

00:21:45,760 --> 00:21:51,280
okay so

00:21:48,799 --> 00:21:52,480
we have a fixed version of a which is

00:21:51,280 --> 00:21:55,600
which is recompiled

00:21:52,480 --> 00:21:58,559
not against the new version

00:21:55,600 --> 00:21:59,200
the fixed packages but against the old

00:21:58,559 --> 00:22:03,600
packages

00:21:59,200 --> 00:22:08,320
the brown one same thing for c

00:22:03,600 --> 00:22:08,320
so what is this b it's a green b

00:22:08,799 --> 00:22:16,720
this b is a version of b

00:22:12,480 --> 00:22:20,000
where we compile it not

00:22:16,720 --> 00:22:22,159
uh we don't sorry we don't compile it

00:22:20,000 --> 00:22:24,000
we take the ones that we had before in

00:22:22,159 --> 00:22:29,200
next packages the brown one

00:22:24,000 --> 00:22:31,679
and instead of recompiling it we applies

00:22:29,200 --> 00:22:34,400
we apply the change that we change the

00:22:31,679 --> 00:22:37,600
old days brown a by the blue a

00:22:34,400 --> 00:22:42,640
so the green b is replacing

00:22:37,600 --> 00:22:42,640
the brown a by the blue a inside b

00:22:42,720 --> 00:22:46,480
we don't know if it's used we know that

00:22:44,720 --> 00:22:49,200
it's a compile time dependency

00:22:46,480 --> 00:22:51,440
and we know that we might be we might do

00:22:49,200 --> 00:22:51,440
that

00:22:51,520 --> 00:22:56,480
so this is how it looks like you have a

00:22:54,720 --> 00:22:58,159
first version that you already know

00:22:56,480 --> 00:23:00,159
that's your stable channel

00:22:58,159 --> 00:23:01,679
where you have everything brown you

00:23:00,159 --> 00:23:03,600
don't know if it's stable or not

00:23:01,679 --> 00:23:04,720
then you have another version where you

00:23:03,600 --> 00:23:07,679
have fixes for

00:23:04,720 --> 00:23:09,200
each of the each of the packages which

00:23:07,679 --> 00:23:11,200
had issues

00:23:09,200 --> 00:23:13,520
and then what you do is basically the

00:23:11,200 --> 00:23:16,080
same ideas replace dependencies which is

00:23:13,520 --> 00:23:16,960
fix everything which is on the chain

00:23:16,080 --> 00:23:18,960
with

00:23:16,960 --> 00:23:21,280
patching one and by replacing one

00:23:18,960 --> 00:23:24,799
dependency by the other

00:23:21,280 --> 00:23:26,960
okay keep that in mind or

00:23:24,799 --> 00:23:29,360
if you don't want to do it i can do that

00:23:26,960 --> 00:23:29,360
for you

00:23:34,080 --> 00:23:40,480
and we are back to the presentation

00:23:37,120 --> 00:23:42,720
yep we're back to the presentation

00:23:40,480 --> 00:23:42,720
so

00:23:44,960 --> 00:23:51,200
you you saw the fixed point before right

00:23:48,240 --> 00:23:53,039
you all understand how it works so a

00:23:51,200 --> 00:23:55,919
fixed point is that

00:23:53,039 --> 00:23:57,840
if i get this next packages basically it

00:23:55,919 --> 00:24:00,720
looping to itself until i get

00:23:57,840 --> 00:24:01,360
one thing so you can see it as a for

00:24:00,720 --> 00:24:05,200
loop which

00:24:01,360 --> 00:24:08,480
only it's it as soon as you are

00:24:05,200 --> 00:24:12,080
able to see the same result twice

00:24:08,480 --> 00:24:15,840
so let's go a bit deeper

00:24:12,080 --> 00:24:19,600
so we have a fixed point if i call

00:24:15,840 --> 00:24:21,120
f or if i call it twice i will still get

00:24:19,600 --> 00:24:23,760
a fixed point because i will get the

00:24:21,120 --> 00:24:23,760
same result

00:24:24,320 --> 00:24:32,240
so one more step if i have a fixed point

00:24:28,400 --> 00:24:33,279
on this packages i will get a full set

00:24:32,240 --> 00:24:35,120
of next packages and

00:24:33,279 --> 00:24:37,360
if i apply this packages a second time

00:24:35,120 --> 00:24:39,039
after i still get the same set of next

00:24:37,360 --> 00:24:41,919
packages

00:24:39,039 --> 00:24:43,919
because applying mixed packages once

00:24:41,919 --> 00:24:46,240
until i get a fixed point

00:24:43,919 --> 00:24:48,159
means that i don't have any more changes

00:24:46,240 --> 00:24:50,720
and if i apply it one more time

00:24:48,159 --> 00:24:52,559
i don't get any more changes because i

00:24:50,720 --> 00:24:55,840
had a fixed point

00:24:52,559 --> 00:24:56,400
so the trick is if you want to recompile

00:24:55,840 --> 00:24:58,960
only

00:24:56,400 --> 00:24:59,520
the software which got patched with

00:24:58,960 --> 00:25:03,760
issue

00:24:59,520 --> 00:25:06,320
with fixes for security issues or others

00:25:03,760 --> 00:25:07,440
you just take another nix packages with

00:25:06,320 --> 00:25:10,640
the fixes

00:25:07,440 --> 00:25:13,520
and you apply it after so hey

00:25:10,640 --> 00:25:14,880
you only recompile the packages that you

00:25:13,520 --> 00:25:16,799
have fixes for

00:25:14,880 --> 00:25:19,279
and all the others will recompile the

00:25:16,799 --> 00:25:19,279
same way

00:25:19,520 --> 00:25:25,520
so that does not give us the green one

00:25:23,760 --> 00:25:28,159
we have all the blue one but we don't

00:25:25,520 --> 00:25:31,360
have the green one

00:25:28,159 --> 00:25:31,760
if you apply it one more time then you

00:25:31,360 --> 00:25:34,480
got

00:25:31,760 --> 00:25:35,039
in a tricky position where you have some

00:25:34,480 --> 00:25:39,200
which are

00:25:35,039 --> 00:25:42,559
recompiled once uh with the fixes

00:25:39,200 --> 00:25:45,600
you have some which are recompiled with

00:25:42,559 --> 00:25:47,279
the fixed version but at the end you

00:25:45,600 --> 00:25:50,960
still recompile which is

00:25:47,279 --> 00:25:54,480
what oh gradient

00:25:50,960 --> 00:25:58,080
which is kind of bad when

00:25:54,480 --> 00:25:58,080
our goal is to be fast so

00:25:59,120 --> 00:26:03,600
we don't want free compilation so we

00:26:01,039 --> 00:26:05,200
don't want this red one

00:26:03,600 --> 00:26:07,360
which implies that we will recompile

00:26:05,200 --> 00:26:10,000
with everything

00:26:07,360 --> 00:26:11,039
but this red one has an information that

00:26:10,000 --> 00:26:13,840
we want

00:26:11,039 --> 00:26:16,720
the information that we want is that hey

00:26:13,840 --> 00:26:16,720
something changed

00:26:17,600 --> 00:26:27,120
so here is the tricky part

00:26:24,240 --> 00:26:28,880
what we are doing to get the fixes right

00:26:27,120 --> 00:26:32,320
to make sure that we are patching

00:26:28,880 --> 00:26:34,720
is we ask hey what

00:26:32,320 --> 00:26:35,600
happens if you do one more step do you

00:26:34,720 --> 00:26:38,880
recompile or

00:26:35,600 --> 00:26:39,840
you don't basically packages that we

00:26:38,880 --> 00:26:43,679
have today are

00:26:39,840 --> 00:26:45,679
like stdns blob

00:26:43,679 --> 00:26:47,279
okay i have no idea what's in this blob

00:26:45,679 --> 00:26:49,919
i have no idea that

00:26:47,279 --> 00:26:53,679
an input if that's something which is

00:26:49,919 --> 00:26:57,120
used for fetching the sources no clues

00:26:53,679 --> 00:26:57,760
so the only way we have to to make sure

00:26:57,120 --> 00:27:00,159
that

00:26:57,760 --> 00:27:00,960
we know if something has to recompile or

00:27:00,159 --> 00:27:04,559
not is

00:27:00,960 --> 00:27:05,279
to hey does is the output different or

00:27:04,559 --> 00:27:07,360
not

00:27:05,279 --> 00:27:08,640
so basically what's this one is doing

00:27:07,360 --> 00:27:11,520
it's

00:27:08,640 --> 00:27:12,080
doing hey i have the quick fixes in one

00:27:11,520 --> 00:27:14,559
side

00:27:12,080 --> 00:27:15,440
i have the one which are doing one more

00:27:14,559 --> 00:27:18,720
step

00:27:15,440 --> 00:27:20,480
do i get the same output if you don't

00:27:18,720 --> 00:27:21,360
get the same output that means that the

00:27:20,480 --> 00:27:24,240
one

00:27:21,360 --> 00:27:25,520
which has one more step is being

00:27:24,240 --> 00:27:28,240
recompiled with

00:27:25,520 --> 00:27:30,240
one of its input so if you take the list

00:27:28,240 --> 00:27:32,320
of inputs of both packages

00:27:30,240 --> 00:27:34,720
and you look for the differences you

00:27:32,320 --> 00:27:37,279
will surely find one difference

00:27:34,720 --> 00:27:39,039
and then you apply the difference to

00:27:37,279 --> 00:27:41,840
your result

00:27:39,039 --> 00:27:43,360
to the result of the ones that are in

00:27:41,840 --> 00:27:46,480
the blue part

00:27:43,360 --> 00:27:49,279
and you know what you're fixing

00:27:46,480 --> 00:27:51,039
you're basically replacing some

00:27:49,279 --> 00:27:53,360
something with

00:27:51,039 --> 00:27:54,480
you are replacing the brown one with the

00:27:53,360 --> 00:27:58,640
blue one

00:27:54,480 --> 00:27:58,640
it's a green one okay

00:27:59,440 --> 00:28:06,480
people are might be lost

00:28:03,200 --> 00:28:09,840
so what this is doing is basically

00:28:06,480 --> 00:28:13,279
asking hey do you recompile yes

00:28:09,840 --> 00:28:16,399
check the input you check the input

00:28:13,279 --> 00:28:18,880
you map them one to one and you know

00:28:16,399 --> 00:28:19,520
which dependency inside the inputs of

00:28:18,880 --> 00:28:22,880
your

00:28:19,520 --> 00:28:25,600
uh inside the inputs that you give to

00:28:22,880 --> 00:28:26,960
your expression you have to replace

00:28:25,600 --> 00:28:29,200
inside

00:28:26,960 --> 00:28:30,960
the current outputs that you get so

00:28:29,200 --> 00:28:32,159
basically you get the same as replace

00:28:30,960 --> 00:28:33,919
dependency

00:28:32,159 --> 00:28:36,799
except that you have it at compile time

00:28:33,919 --> 00:28:40,159
instead of with the runtime dependency

00:28:36,799 --> 00:28:43,279
which makes it sane and fast because you

00:28:40,159 --> 00:28:45,840
only recompile the quick fixes

00:28:43,279 --> 00:28:48,799
and you get to patch all others which

00:28:45,840 --> 00:28:48,799
are depending on them

00:28:51,039 --> 00:28:59,840
everybody's okay okay

00:28:54,480 --> 00:28:59,840
so now let's look how easy it is

00:29:00,240 --> 00:29:03,600
that simple as the first two you get the

00:29:02,799 --> 00:29:06,159
old one hey

00:29:03,600 --> 00:29:06,960
stable branch you get stable packages in

00:29:06,159 --> 00:29:10,480
one place

00:29:06,960 --> 00:29:12,320
and you get a few fixes over there so

00:29:10,480 --> 00:29:13,919
instead of shipping one version which is

00:29:12,320 --> 00:29:18,159
a stable branch you just ship

00:29:13,919 --> 00:29:20,720
two two versions of next packages

00:29:18,159 --> 00:29:22,559
not a big deal we can do that and call

00:29:20,720 --> 00:29:26,159
that the security channel and merge

00:29:22,559 --> 00:29:27,760
and that's all we're good so

00:29:26,159 --> 00:29:29,760
what happens in terms of release

00:29:27,760 --> 00:29:32,799
management so

00:29:29,760 --> 00:29:34,640
as a packager you want to know okay what

00:29:32,799 --> 00:29:37,520
do i do as a package manager knows that

00:29:34,640 --> 00:29:39,760
we solve the user case

00:29:37,520 --> 00:29:42,080
that's quite simple you know when

00:29:39,760 --> 00:29:45,200
something is compatible in terms of abi

00:29:42,080 --> 00:29:47,279
oh it's either in the version number

00:29:45,200 --> 00:29:49,120
or either it's contradicted by the

00:29:47,279 --> 00:29:52,640
change log

00:29:49,120 --> 00:29:55,039
when it's not in the version number and

00:29:52,640 --> 00:29:55,679
basically you know okay this is a fix

00:29:55,039 --> 00:29:58,159
which

00:29:55,679 --> 00:29:59,520
might be a security fix so let's say in

00:29:58,159 --> 00:30:02,720
github you annotate your

00:29:59,520 --> 00:30:03,919
uh pushes to master and say oh security

00:30:02,720 --> 00:30:06,320
fix

00:30:03,919 --> 00:30:06,960
then somebody will launch your patch and

00:30:06,320 --> 00:30:09,919
say okay

00:30:06,960 --> 00:30:11,039
this is a security fix i need to go to

00:30:09,919 --> 00:30:13,520
the security branch

00:30:11,039 --> 00:30:14,399
to the abi compatible branch and cherry

00:30:13,520 --> 00:30:16,320
picks this one

00:30:14,399 --> 00:30:18,080
so you have one model which is like you

00:30:16,320 --> 00:30:19,840
have a branch a master branch and you

00:30:18,080 --> 00:30:22,320
have an abi compatible branch which

00:30:19,840 --> 00:30:24,720
starts every time we have a new channel

00:30:22,320 --> 00:30:27,120
and which cherry pick every changes that

00:30:24,720 --> 00:30:27,120
you have

00:30:28,000 --> 00:30:34,399
so then you can wonder

00:30:31,840 --> 00:30:34,960
okay what is how do we endorse this api

00:30:34,399 --> 00:30:37,840
branch

00:30:34,960 --> 00:30:39,200
is aba compatible branch you have

00:30:37,840 --> 00:30:42,000
multiple solution

00:30:39,200 --> 00:30:42,799
also you can either merge master into it

00:30:42,000 --> 00:30:44,720
which

00:30:42,799 --> 00:30:46,000
has some nice property of keeping the

00:30:44,720 --> 00:30:49,360
ones which are not

00:30:46,000 --> 00:30:52,159
there already or you can reset the

00:30:49,360 --> 00:30:55,200
branch and start it again

00:30:52,159 --> 00:30:55,520
that's something which is up to debate

00:30:55,200 --> 00:30:57,200
and

00:30:55,520 --> 00:30:59,840
i'm not in the right position to ask

00:30:57,200 --> 00:31:04,399
that maybe domain

00:30:59,840 --> 00:31:07,039
so if you have other ideas

00:31:04,399 --> 00:31:09,440
feel free to contribute and

00:31:07,039 --> 00:31:10,720
unfortunately this model does not solve

00:31:09,440 --> 00:31:15,039
all the problem

00:31:10,720 --> 00:31:16,399
it's all like a big chunk of sanity and

00:31:15,039 --> 00:31:19,840
making sure that

00:31:16,399 --> 00:31:24,080
you get transparent updates for users

00:31:19,840 --> 00:31:27,919
which is like hey open ssh oops

00:31:24,080 --> 00:31:30,399
and this require also some

00:31:27,919 --> 00:31:31,600
instrumentation if we want to get it

00:31:30,399 --> 00:31:34,080
optimal

00:31:31,600 --> 00:31:35,840
like okay we're doing that with the

00:31:34,080 --> 00:31:37,600
compile time dependencies but if there

00:31:35,840 --> 00:31:38,960
is a gcc update

00:31:37,600 --> 00:31:40,799
okay you probably want to have the

00:31:38,960 --> 00:31:42,880
compile time the dependencies here

00:31:40,799 --> 00:31:45,039
uh let's take another example if there

00:31:42,880 --> 00:31:47,919
is a bash update

00:31:45,039 --> 00:31:49,840
okay if there is a bash update not in

00:31:47,919 --> 00:31:52,000
your program does not necessarily depend

00:31:49,840 --> 00:31:54,799
on bash

00:31:52,000 --> 00:31:56,559
and if it does you want to update it if

00:31:54,799 --> 00:31:58,720
it doesn't

00:31:56,559 --> 00:31:59,919
then you are going to patch something

00:31:58,720 --> 00:32:01,600
with something which one

00:31:59,919 --> 00:32:03,200
with an expression which will say okay

00:32:01,600 --> 00:32:05,120
take the old ash of bash

00:32:03,200 --> 00:32:06,240
take the new hash of bash and replace it

00:32:05,120 --> 00:32:07,760
in something where there is no

00:32:06,240 --> 00:32:10,399
occurrences of it

00:32:07,760 --> 00:32:11,360
so that's kind of pointless so one way

00:32:10,399 --> 00:32:14,399
of doing of

00:32:11,360 --> 00:32:16,960
optimizing that and i'm

00:32:14,399 --> 00:32:18,000
saying optimizing because this is the

00:32:16,960 --> 00:32:21,600
same version

00:32:18,000 --> 00:32:24,880
and we don't necessarily want to

00:32:21,600 --> 00:32:28,000
patch things with no up

00:32:24,880 --> 00:32:31,360
so a way of optimizing that is when

00:32:28,000 --> 00:32:32,399
hydra builds next packages we can say

00:32:31,360 --> 00:32:35,600
hey

00:32:32,399 --> 00:32:37,279
i scanned the build after building it

00:32:35,600 --> 00:32:40,640
which

00:32:37,279 --> 00:32:44,399
is by the way already done by the

00:32:40,640 --> 00:32:46,720
for the garbage collector so

00:32:44,399 --> 00:32:48,080
you can get all the dependencies that

00:32:46,720 --> 00:32:51,679
you have at run time

00:32:48,080 --> 00:32:53,519
and say oh you had a list of inputs

00:32:51,679 --> 00:32:55,200
among the list of inputs that you have

00:32:53,519 --> 00:32:58,080
here is how they are mapped

00:32:55,200 --> 00:32:59,840
in the binary so basically you can

00:32:58,080 --> 00:33:01,760
change that to the list of runtime

00:32:59,840 --> 00:33:03,760
dependencies

00:33:01,760 --> 00:33:06,720
and then you get an optimization which

00:33:03,760 --> 00:33:09,440
is oh i don't have to look at everyday

00:33:06,720 --> 00:33:11,200
every argument of my next expression for

00:33:09,440 --> 00:33:14,320
my package

00:33:11,200 --> 00:33:17,360
but this has a downside

00:33:14,320 --> 00:33:19,840
of not giving you the same shot because

00:33:17,360 --> 00:33:21,600
if you were to patch once you might get

00:33:19,840 --> 00:33:24,880
the same content

00:33:21,600 --> 00:33:28,159
but you had one more

00:33:24,880 --> 00:33:32,320
derivation to do one more fix

00:33:28,159 --> 00:33:35,760
and one more thing for needs 3.0

00:33:32,320 --> 00:33:39,440
so and of course you don't have a

00:33:35,760 --> 00:33:41,679
static library support which is

00:33:39,440 --> 00:33:43,600
another issue for in terms of security

00:33:41,679 --> 00:33:45,120
which is like annotating hey you depend

00:33:43,600 --> 00:33:48,159
on this statically

00:33:45,120 --> 00:33:53,840
but that's another issue

00:33:48,159 --> 00:33:53,840
and that's the end of my talk

00:34:01,110 --> 00:34:04,250
[Applause]

00:34:09,760 --> 00:34:15,440
yeah i have to admit i didn't quite

00:34:11,679 --> 00:34:15,440
understand the whole fixed point stuff

00:34:15,599 --> 00:34:20,320
can you sort of explain what for

00:34:18,079 --> 00:34:23,440
instance in terms of the open ssl

00:34:20,320 --> 00:34:26,000
example what would this mean concretely

00:34:23,440 --> 00:34:26,720
for the package maintainer so what what

00:34:26,000 --> 00:34:29,679
does

00:34:26,720 --> 00:34:31,679
he or she commit to say the security

00:34:29,679 --> 00:34:34,639
branch or the master branch

00:34:31,679 --> 00:34:37,919
and what does hydra do okay so how is it

00:34:34,639 --> 00:34:42,399
magically going to prevent recompilation

00:34:37,919 --> 00:34:45,200
so i i won't take it as like

00:34:42,399 --> 00:34:46,240
there is a packager got the information

00:34:45,200 --> 00:34:49,839
that there is a

00:34:46,240 --> 00:34:51,440
new open ssl fix in addition to

00:34:49,839 --> 00:34:53,679
the fact that we heard about the issue

00:34:51,440 --> 00:34:55,599
before and

00:34:53,679 --> 00:34:57,520
so you have a patch you have a patch

00:34:55,599 --> 00:35:00,880
which switch open ssl

00:34:57,520 --> 00:35:00,880
m2 version l

00:35:01,119 --> 00:35:04,800
you apply you make a pull request you

00:35:03,680 --> 00:35:07,359
apply it to master

00:35:04,800 --> 00:35:07,920
and you go to the aba branch and you

00:35:07,359 --> 00:35:10,079
apply

00:35:07,920 --> 00:35:11,920
and you cherry pick this change on top

00:35:10,079 --> 00:35:15,200
of the abi branch

00:35:11,920 --> 00:35:16,880
what this will do is that here we have

00:35:15,200 --> 00:35:20,079
master

00:35:16,880 --> 00:35:21,839
here we have the abi branch which are

00:35:20,079 --> 00:35:24,160
emerging to one

00:35:21,839 --> 00:35:26,720
channel that the user will receive but

00:35:24,160 --> 00:35:30,160
they're basically identical because you

00:35:26,720 --> 00:35:32,800
well i mean you cherry pick

00:35:30,160 --> 00:35:34,800
not exactly you have the latest master

00:35:32,800 --> 00:35:37,680
which compiled

00:35:34,800 --> 00:35:39,040
which had we still has the m version of

00:35:37,680 --> 00:35:41,680
open ssl

00:35:39,040 --> 00:35:42,240
you have the abi branch which has only

00:35:41,680 --> 00:35:46,160
the

00:35:42,240 --> 00:35:47,760
fixes since uh since the last master

00:35:46,160 --> 00:35:49,920
which compiled so here you have

00:35:47,760 --> 00:35:52,800
basically the same version

00:35:49,920 --> 00:35:52,800
with the fixes

00:35:53,359 --> 00:35:59,119
so what happens here if you

00:35:56,560 --> 00:36:00,079
have a fixed point of next packages here

00:35:59,119 --> 00:36:02,240
you will

00:36:00,079 --> 00:36:03,920
basically do the same compilation except

00:36:02,240 --> 00:36:05,839
for the one which has fixes because it

00:36:03,920 --> 00:36:07,520
will have a different derivation

00:36:05,839 --> 00:36:09,200
so you will get a different results than

00:36:07,520 --> 00:36:11,440
the fixed point

00:36:09,200 --> 00:36:13,280
so either i will see oh there is a new

00:36:11,440 --> 00:36:15,119
derivation that i don't know about

00:36:13,280 --> 00:36:16,880
because it's not in the state in the

00:36:15,119 --> 00:36:27,760
stable channel

00:36:16,880 --> 00:36:30,800
and you will recompise this one

00:36:27,760 --> 00:36:33,839
so won't there be many changes uh

00:36:30,800 --> 00:36:37,680
if we update the update open ssl so yes

00:36:33,839 --> 00:36:37,680
there will be many changes here

00:36:37,760 --> 00:36:44,320
but what hydra do stops here

00:36:41,599 --> 00:36:44,880
so as a user you will repatch every

00:36:44,320 --> 00:36:47,200
package

00:36:44,880 --> 00:36:50,000
which depends on the panel ssl in your

00:36:47,200 --> 00:36:51,680
build but hydra only recompiles open ssl

00:36:50,000 --> 00:36:53,200
once

00:36:51,680 --> 00:36:55,200
and does not recompile any of the

00:36:53,200 --> 00:36:56,960
dependencies after

00:36:55,200 --> 00:36:58,960
when you say it doesn't recompile any of

00:36:56,960 --> 00:37:00,240
the dependencies you mean the reverse

00:36:58,960 --> 00:37:03,119
dependencies

00:37:00,240 --> 00:37:05,599
i mean uh it's not going it's not going

00:37:03,119 --> 00:37:06,320
to rebuild anything that depends on open

00:37:05,599 --> 00:37:07,760
ssl

00:37:06,320 --> 00:37:10,000
it does not recompile anything which

00:37:07,760 --> 00:37:12,480
depends on ssl yes

00:37:10,000 --> 00:37:14,400
okay and and then what is the output is

00:37:12,480 --> 00:37:17,599
it going to be a

00:37:14,400 --> 00:37:20,480
basically a hash rewriting thing or what

00:37:17,599 --> 00:37:22,960
is the output of the patching phase yes

00:37:20,480 --> 00:37:25,599
that's the same as the replace the

00:37:22,960 --> 00:37:29,119
dependencies okay which is refrigerating

00:37:25,599 --> 00:37:29,119
the old dash with the new ash

00:37:31,359 --> 00:37:36,079
and what kind of formats i mean

00:37:33,680 --> 00:37:38,160
ultimately a channel needs to come come

00:37:36,079 --> 00:37:39,280
out of this uh and and what will that

00:37:38,160 --> 00:37:41,520
look like so

00:37:39,280 --> 00:37:43,119
currently i think this is still up to

00:37:41,520 --> 00:37:45,520
discussions the way i

00:37:43,119 --> 00:37:48,000
made it in the in the branch that i have

00:37:45,520 --> 00:37:51,440
is basically having a quick fix

00:37:48,000 --> 00:37:54,960
folder which is just a mirror

00:37:51,440 --> 00:37:54,960
of c api branch

00:37:55,920 --> 00:37:59,040
okay i i think i understand now so you

00:37:58,000 --> 00:38:03,280
you you call

00:37:59,040 --> 00:38:07,280
the api nix packages uh and you

00:38:03,280 --> 00:38:09,280
you pass it uh the master nix packages

00:38:07,280 --> 00:38:10,720
uh so it uses every or is it the other

00:38:09,280 --> 00:38:11,280
way around it's the other way around

00:38:10,720 --> 00:38:14,960
right

00:38:11,280 --> 00:38:18,000
uh so in terms of flow

00:38:14,960 --> 00:38:18,560
the the current stable one pass into the

00:38:18,000 --> 00:38:20,720
abi

00:38:18,560 --> 00:38:22,880
fixes which will give you the same one

00:38:20,720 --> 00:38:26,000
if you have no changes and give you

00:38:22,880 --> 00:38:33,839
the fixes if you have a new api fixes

00:38:26,000 --> 00:38:33,839
okay right okay thank you

00:38:34,800 --> 00:38:39,599
thank you very much uh i'm not maybe

00:38:38,000 --> 00:38:42,000
maybe i just asked my question whether i

00:38:39,599 --> 00:38:44,960
understood it right so

00:38:42,000 --> 00:38:47,119
in the brown box uh it's compiled in a

00:38:44,960 --> 00:38:49,040
way that all dependencies are just

00:38:47,119 --> 00:38:50,720
compiled through so if you would change

00:38:49,040 --> 00:38:52,480
the problem now is that if you would

00:38:50,720 --> 00:38:53,359
change something down somewhere down in

00:38:52,480 --> 00:38:55,760
the graph

00:38:53,359 --> 00:38:57,440
it would trigger a recompilation of

00:38:55,760 --> 00:38:59,359
everything which depends on it

00:38:57,440 --> 00:39:00,720
and this is what you try to avoid so

00:38:59,359 --> 00:39:03,440
what you do instead is

00:39:00,720 --> 00:39:04,720
you say you have a change and now

00:39:03,440 --> 00:39:07,200
normally in the normal

00:39:04,720 --> 00:39:09,359
build process everything that depends on

00:39:07,200 --> 00:39:12,079
it would have to be rebuilt

00:39:09,359 --> 00:39:13,359
and now you say you have the additional

00:39:12,079 --> 00:39:17,119
information that the

00:39:13,359 --> 00:39:19,839
abi is compatible and then you stop

00:39:17,119 --> 00:39:20,480
this recompilation process of the whole

00:39:19,839 --> 00:39:23,520
tree

00:39:20,480 --> 00:39:25,680
and then just take this and overlay this

00:39:23,520 --> 00:39:28,720
new thing that you stop by knowing that

00:39:25,680 --> 00:39:30,560
the abi is compatible with the old

00:39:28,720 --> 00:39:31,119
version and this is how you fix it do i

00:39:30,560 --> 00:39:35,920
get this

00:39:31,119 --> 00:39:39,040
right so i don't stop i just do it once

00:39:35,920 --> 00:39:41,280
well yes but you stop in terms of you

00:39:39,040 --> 00:39:41,760
don't recompile all the dependencies

00:39:41,280 --> 00:39:45,040
that you

00:39:41,760 --> 00:39:48,800
normally would compile in building the

00:39:45,040 --> 00:39:51,119
fixed point in the brown box yes

00:39:48,800 --> 00:39:52,800
so so it comes down to the information

00:39:51,119 --> 00:39:54,960
that you have to give the system that

00:39:52,800 --> 00:39:56,079
the api is compatible for this

00:39:54,960 --> 00:39:58,720
particular change

00:39:56,079 --> 00:40:00,079
which is the developer responsibility

00:39:58,720 --> 00:40:02,960
exactly and so so

00:40:00,079 --> 00:40:03,920
to apply this kind of mechanism what we

00:40:02,960 --> 00:40:06,560
need is

00:40:03,920 --> 00:40:07,440
a way to actually put this information

00:40:06,560 --> 00:40:09,680
into the

00:40:07,440 --> 00:40:11,920
system so that the system knows all

00:40:09,680 --> 00:40:12,240
right this is something where i can have

00:40:11,920 --> 00:40:16,480
an

00:40:12,240 --> 00:40:19,280
early stop because the abi is compatible

00:40:16,480 --> 00:40:19,839
and so i can just overlay this with the

00:40:19,280 --> 00:40:22,240
car on

00:40:19,839 --> 00:40:24,640
to the current branch or the current

00:40:22,240 --> 00:40:28,880
tree that has been compiled

00:40:24,640 --> 00:40:30,800
and um no because what you're suggesting

00:40:28,880 --> 00:40:32,720
by at least from what i understand what

00:40:30,800 --> 00:40:35,200
you're suggesting by overlay

00:40:32,720 --> 00:40:36,079
is to move the changes here now build a

00:40:35,200 --> 00:40:38,560
fixed point

00:40:36,079 --> 00:40:40,319
uh in the end not move the change on it

00:40:38,560 --> 00:40:43,440
but have a

00:40:40,319 --> 00:40:44,560
how to say um you have the brown thing

00:40:43,440 --> 00:40:47,119
which is a fully

00:40:44,560 --> 00:40:49,680
uh where the fixed point has been fully

00:40:47,119 --> 00:40:53,920
compiled um and every dependency

00:40:49,680 --> 00:40:57,200
is is is compiled and in the other one

00:40:53,920 --> 00:41:00,880
um you if you would make a change

00:40:57,200 --> 00:41:01,520
normally the dependency would propagate

00:41:00,880 --> 00:41:03,359
by

00:41:01,520 --> 00:41:05,119
the derivation that you build and not by

00:41:03,359 --> 00:41:08,480
the api

00:41:05,119 --> 00:41:10,480
so to stop the uh the rebuilding of

00:41:08,480 --> 00:41:13,119
all the dependencies you say i have this

00:41:10,480 --> 00:41:17,040
in additional information that api is

00:41:13,119 --> 00:41:18,000
uh i don't start how do we make it

00:41:17,040 --> 00:41:20,560
faster then

00:41:18,000 --> 00:41:22,880
i don't start dependencies needs

00:41:20,560 --> 00:41:24,160
packages is one big function which take

00:41:22,880 --> 00:41:27,440
itself as an input

00:41:24,160 --> 00:41:29,119
right so these functions are like hey i

00:41:27,440 --> 00:41:30,560
have one package which depends on the

00:41:29,119 --> 00:41:33,040
input of next packages

00:41:30,560 --> 00:41:34,720
and for each attribute as one function

00:41:33,040 --> 00:41:37,119
which we applied once

00:41:34,720 --> 00:41:37,839
the fixed point is here to make sure

00:41:37,119 --> 00:41:41,040
that you

00:41:37,839 --> 00:41:43,920
do you go through all the inputs

00:41:41,040 --> 00:41:44,560
deeply at multiple levels by just

00:41:43,920 --> 00:41:48,480
applying it

00:41:44,560 --> 00:41:53,280
once you just do one extra step

00:41:48,480 --> 00:41:53,280
so if this is if this is a function

00:41:56,480 --> 00:42:00,319
so maybe another way to explain it so in

00:41:58,560 --> 00:42:03,520
all packages.next the way

00:42:00,319 --> 00:42:07,880
we pass dependencies is not by passing

00:42:03,520 --> 00:42:11,440
for instance open ssl but by passing

00:42:07,880 --> 00:42:12,720
packages.openssl and packages.openssl in

00:42:11,440 --> 00:42:15,920
this case

00:42:12,720 --> 00:42:18,800
would refer to the old ssl

00:42:15,920 --> 00:42:20,800
so everything that depends on openssl

00:42:18,800 --> 00:42:23,440
would still be referring to the old open

00:42:20,800 --> 00:42:26,960
ssl so it wouldn't get recompiled

00:42:23,440 --> 00:42:28,839
it's only open ssl itself that would be

00:42:26,960 --> 00:42:32,319
recompiled

00:42:28,839 --> 00:42:34,319
so so

00:42:32,319 --> 00:42:37,520
if if you look at this as a function i'm

00:42:34,319 --> 00:42:41,200
just doing f plus one

00:42:37,520 --> 00:42:45,119
i am just calling it n time plus one

00:42:41,200 --> 00:42:47,520
yeah and we're just compiling open ssl

00:42:45,119 --> 00:42:49,200
but not any of its dependencies because

00:42:47,520 --> 00:42:51,839
all its dependencies are seeing

00:42:49,200 --> 00:42:53,440
the old version from the stable branch

00:42:51,839 --> 00:42:55,040
while openness is

00:42:53,440 --> 00:42:59,839
still seeing the old version but we have

00:42:55,040 --> 00:42:59,839
a different derivation for it

00:43:01,440 --> 00:43:07,680
maybe someone we can uh continue this

00:43:04,560 --> 00:43:07,680
discussion after if you want

00:43:07,920 --> 00:43:13,599
so um well let's just try it again

00:43:11,280 --> 00:43:15,040
so if this is a method to make things

00:43:13,599 --> 00:43:17,520
faster why don't you use it

00:43:15,040 --> 00:43:18,319
as a default is that's what i'm

00:43:17,520 --> 00:43:20,800
suggesting

00:43:18,319 --> 00:43:20,800
ah okay

00:43:21,520 --> 00:43:27,839
oh he's asking why don't we always do

00:43:24,079 --> 00:43:27,839
exactly yeah

00:43:33,359 --> 00:43:35,520
so

00:43:37,440 --> 00:43:40,640
it doesn't work for static builds but

00:43:39,440 --> 00:43:43,040
basically that's

00:43:40,640 --> 00:43:44,880
what hydra is doing except that hydra

00:43:43,040 --> 00:43:46,800
doesn't go

00:43:44,880 --> 00:43:48,720
beyond the project that it already has

00:43:46,800 --> 00:43:51,839
compiled

00:43:48,720 --> 00:43:54,800
but that's another detail

00:43:51,839 --> 00:43:55,119
okay i've got a remark i would question

00:43:54,800 --> 00:43:58,000
if

00:43:55,119 --> 00:44:00,000
this is really a sound approach to doing

00:43:58,000 --> 00:44:03,520
security updates

00:44:00,000 --> 00:44:06,640
because the first thing is

00:44:03,520 --> 00:44:08,480
not all security patches are necessarily

00:44:06,640 --> 00:44:10,720
binary compatible

00:44:08,480 --> 00:44:13,280
and second we still have the problem

00:44:10,720 --> 00:44:16,640
with statically linked in stuff

00:44:13,280 --> 00:44:18,960
so wouldn't it in contrast not be better

00:44:16,640 --> 00:44:20,960
to somehow speed the whole process up so

00:44:18,960 --> 00:44:24,800
that we can just

00:44:20,960 --> 00:44:28,720
get a soundly recompiled

00:44:24,800 --> 00:44:32,319
whole new tree so

00:44:28,720 --> 00:44:34,400
as i mentioned static binaries yes yes

00:44:32,319 --> 00:44:35,680
static compilation is not adverse by

00:44:34,400 --> 00:44:39,119
this solution

00:44:35,680 --> 00:44:41,520
i agree we will have to address it

00:44:39,119 --> 00:44:42,800
in probably a different way which might

00:44:41,520 --> 00:44:44,480
rely on that

00:44:42,800 --> 00:44:46,640
to make sure that we only recompile the

00:44:44,480 --> 00:44:49,040
one which depends statically on other

00:44:46,640 --> 00:44:49,040
programs

00:44:49,200 --> 00:44:55,839
so then updates which are not

00:44:52,880 --> 00:44:55,839
binary compatible

00:44:56,240 --> 00:45:04,000
complain to the one who made the package

00:44:59,760 --> 00:45:06,960
i can fix all the problems

00:45:04,000 --> 00:45:07,680
all right um yeah i mean for the we

00:45:06,960 --> 00:45:10,240
don't have

00:45:07,680 --> 00:45:11,040
many statically compiled um things and

00:45:10,240 --> 00:45:14,480
and we

00:45:11,040 --> 00:45:17,520
we want to avoid that um so

00:45:14,480 --> 00:45:20,560
but uh it's yeah so

00:45:17,520 --> 00:45:21,200
my question is um so the patching would

00:45:20,560 --> 00:45:23,280
happen

00:45:21,200 --> 00:45:25,280
on the user machine right so the

00:45:23,280 --> 00:45:29,119
patching will happen on the user machine

00:45:25,280 --> 00:45:32,640
yes right and it's a from what i've

00:45:29,119 --> 00:45:35,839
heard from the gates guys uh it's

00:45:32,640 --> 00:45:38,079
a matter of minutes all right uh

00:45:35,839 --> 00:45:39,359
less than 10 from what you told me so

00:45:38,079 --> 00:45:42,880
basically every time

00:45:39,359 --> 00:45:44,960
the security channel is updated on

00:45:42,880 --> 00:45:46,000
you know now every time the master

00:45:44,960 --> 00:45:48,640
branch

00:45:46,000 --> 00:45:50,319
finishes with the whole rebuild the

00:45:48,640 --> 00:45:52,960
security

00:45:50,319 --> 00:45:54,800
branch will will reset because you don't

00:45:52,960 --> 00:45:56,079
need a fast branch anymore because you

00:45:54,800 --> 00:45:58,720
have devices

00:45:56,079 --> 00:46:00,960
so this will always reset and we just

00:45:58,720 --> 00:46:04,000
pick in the updates

00:46:00,960 --> 00:46:07,200
and we we pull both channels down

00:46:04,000 --> 00:46:08,240
we apply the differences and that that's

00:46:07,200 --> 00:46:11,440
how it works right

00:46:08,240 --> 00:46:15,440
yes uh except that i was thinking

00:46:11,440 --> 00:46:18,160
instead of pulling both channels we pull

00:46:15,440 --> 00:46:19,760
the two branches into one channel where

00:46:18,160 --> 00:46:22,800
you have a quick fix directory which

00:46:19,760 --> 00:46:26,079
corresponds to the abi fixes

00:46:22,800 --> 00:46:29,839
okay so okay is that supposed to say

00:46:26,079 --> 00:46:29,839
okay yeah cool thanks

00:46:33,920 --> 00:46:37,520
as a note the problem with static

00:46:35,760 --> 00:46:38,880
linking is more than just linking in a

00:46:37,520 --> 00:46:39,920
static library it's also when the

00:46:38,880 --> 00:46:42,400
package takes us

00:46:39,920 --> 00:46:43,680
like the actual source code for zed

00:46:42,400 --> 00:46:46,000
whatever includes it with them

00:46:43,680 --> 00:46:46,960
so the solution to that one is actually

00:46:46,000 --> 00:46:49,920
doing a

00:46:46,960 --> 00:46:52,960
scan like a binary scan for signatures

00:46:49,920 --> 00:46:52,960
of the vulnerable functions

00:46:53,440 --> 00:46:57,040
so yes that's the problems that we have

00:46:55,440 --> 00:47:00,319
in firefox for example

00:46:57,040 --> 00:47:02,480
and one of the example i have in mind is

00:47:00,319 --> 00:47:04,240
for example the z-lib we include the

00:47:02,480 --> 00:47:07,599
zlib inside firefox

00:47:04,240 --> 00:47:10,079
and we one

00:47:07,599 --> 00:47:11,040
i can't remember when exactly we had a

00:47:10,079 --> 00:47:14,560
sick is there

00:47:11,040 --> 00:47:16,960
a security issue in zlib and uh

00:47:14,560 --> 00:47:17,920
some of the developers look okay what is

00:47:16,960 --> 00:47:21,119
the patch

00:47:17,920 --> 00:47:22,880
what does it affect and

00:47:21,119 --> 00:47:24,800
that's a responsibility of the person

00:47:22,880 --> 00:47:26,960
who were

00:47:24,800 --> 00:47:28,800
embedding these packages directly in

00:47:26,960 --> 00:47:30,720
their source code to make sure that they

00:47:28,800 --> 00:47:34,720
also update when there is

00:47:30,720 --> 00:47:36,720
an issue in the packages at the embed so

00:47:34,720 --> 00:47:39,520
in the case that i'm thinking about we

00:47:36,720 --> 00:47:42,720
didn't made a security update for

00:47:39,520 --> 00:47:43,599
uh firefox because we were not affected

00:47:42,720 --> 00:47:46,640
by

00:47:43,599 --> 00:47:49,920
zilli problem so

00:47:46,640 --> 00:47:49,920
that's no longer oracle

00:47:50,400 --> 00:47:54,960
except if we do recompile firefox with

00:47:53,280 --> 00:48:07,200
an external zlib instead of the one

00:47:54,960 --> 00:48:10,720
which is inside their tree

00:48:07,200 --> 00:48:14,160
um as a maintainer how do i keep

00:48:10,720 --> 00:48:17,599
up with the security updates

00:48:14,160 --> 00:48:20,640
uh follow the mailing list so

00:48:17,599 --> 00:48:22,960
if i'm a maintainer next packages is it

00:48:20,640 --> 00:48:25,440
my responsibility to do that or

00:48:22,960 --> 00:48:27,359
can i get notified if one of my packages

00:48:25,440 --> 00:48:28,240
is if you're following the mailing list

00:48:27,359 --> 00:48:32,079
then you're probably

00:48:28,240 --> 00:48:33,119
going to be notified otherwise i hope a

00:48:32,079 --> 00:48:35,760
few people will

00:48:33,119 --> 00:48:37,680
keep looking at the cve and others to

00:48:35,760 --> 00:48:39,920
make sure that hey

00:48:37,680 --> 00:48:40,960
ping's the right person or for uh or

00:48:39,920 --> 00:48:43,680
gives a patch

00:48:40,960 --> 00:48:45,520
for a badge or open ssl or whatever uh

00:48:43,680 --> 00:48:47,520
to make sure that it is applied even if

00:48:45,520 --> 00:48:50,160
you are the maintainer you're proud

00:48:47,520 --> 00:48:50,640
you might be in vacation or something

00:48:50,160 --> 00:48:52,000
else

00:48:50,640 --> 00:48:54,160
i don't know that's something that we

00:48:52,000 --> 00:48:58,079
have to discuss as a community

00:48:54,160 --> 00:48:58,079
uh what is the responsibility of who

00:48:58,160 --> 00:49:03,280
all right i was just gonna say we've

00:49:01,200 --> 00:49:05,599
also got the nixos packages monitor

00:49:03,280 --> 00:49:07,280
which is i think monitor.nicks.org

00:49:05,599 --> 00:49:08,800
which goes through the cves and tries to

00:49:07,280 --> 00:49:09,839
compare them against packages we have in

00:49:08,800 --> 00:49:11,119
mixed packages

00:49:09,839 --> 00:49:13,040
so you could at least look at that and

00:49:11,119 --> 00:49:16,640
then see if you're a maintainer for

00:49:13,040 --> 00:49:19,200
anything that has known cvs can i get an

00:49:16,640 --> 00:49:19,200
email when

00:49:20,000 --> 00:49:31,839
so somebody mentioned monitor.nixos.org

00:49:24,079 --> 00:49:31,839
to give an answer to that

00:49:36,079 --> 00:49:39,760
okay so if there are any other questions

00:49:38,319 --> 00:49:40,880
nicholas is still around right for the

00:49:39,760 --> 00:49:42,839
miranda of the conference

00:49:40,880 --> 00:49:45,839
yes so thank you very much for the

00:49:42,839 --> 00:49:45,839

YouTube URL: https://www.youtube.com/watch?v=iCdvaSliu6s


