Title: Lightning   Ignite talks day 1 (NixCon 2015)
Publication date: 2020-10-29
Playlist: NixCon 2015 (Berlin)
Description: 
	
Captions: 
	00:00:04,960 --> 00:00:09,120
so the first uh

00:00:06,160 --> 00:00:10,320
presentation is by aaron levin and he's

00:00:09,120 --> 00:00:12,880
going to talk about

00:00:10,320 --> 00:00:14,240
dual booting yeah okay so i'm going to

00:00:12,880 --> 00:00:15,599
make this very fast because i have to go

00:00:14,240 --> 00:00:16,720
look at the couch but then i'll be

00:00:15,599 --> 00:00:19,039
back to join you all for drinks and

00:00:16,720 --> 00:00:21,600
dinner later but um so

00:00:19,039 --> 00:00:22,480
my name's aaron i have you can read this

00:00:21,600 --> 00:00:26,160
but um

00:00:22,480 --> 00:00:27,680
i i'm living here from canada now um

00:00:26,160 --> 00:00:30,400
what i want to talk about was the state

00:00:27,680 --> 00:00:33,520
events of dual booting a a brand new

00:00:30,400 --> 00:00:35,120
macbook pro with uh nyx os so right now

00:00:33,520 --> 00:00:36,079
this macbook

00:00:35,120 --> 00:00:37,440
you don't have to believe me because all

00:00:36,079 --> 00:00:39,200
you see is a browser but it's running

00:00:37,440 --> 00:00:42,399
next os i guess i can

00:00:39,200 --> 00:00:45,680
do like you name dash a

00:00:42,399 --> 00:00:47,200
so it has uh nyx on there so

00:00:45,680 --> 00:00:49,200
i guess you couldn't like don't have to

00:00:47,200 --> 00:00:50,640
believe me for that either but yeah so i

00:00:49,200 --> 00:00:51,760
want to talk about that and what some of

00:00:50,640 --> 00:00:54,239
the issues are and

00:00:51,760 --> 00:00:55,680
uh there is one major bug that may or

00:00:54,239 --> 00:00:57,920
may not be a kernel bug

00:00:55,680 --> 00:00:59,840
and uh i will show it to you and then

00:00:57,920 --> 00:01:02,000
also i have a promise that if any of you

00:00:59,840 --> 00:01:02,960
wants to try to fix it i will donate 50

00:01:02,000 --> 00:01:06,320
euro to the

00:01:02,960 --> 00:01:09,040
nixos foundation and i'm like

00:01:06,320 --> 00:01:09,760
a very uh cash conscious person so

00:01:09,040 --> 00:01:12,000
that's like

00:01:09,760 --> 00:01:14,000
in my mind like thousands of dollars

00:01:12,000 --> 00:01:16,479
okay but uh because i'm

00:01:14,000 --> 00:01:17,119
consider my oh my god that's not what i

00:01:16,479 --> 00:01:20,799
want at all

00:01:17,119 --> 00:01:22,240
ah okay so um

00:01:20,799 --> 00:01:23,920
but i also have a meta presentation

00:01:22,240 --> 00:01:25,920
which is a new presentation technique

00:01:23,920 --> 00:01:27,200
that i invented called tab driven

00:01:25,920 --> 00:01:31,119
presentations

00:01:27,200 --> 00:01:32,640
um so it's really good

00:01:31,119 --> 00:01:35,040
i'm doing it right now i made my

00:01:32,640 --> 00:01:38,640
presentation two seconds ago so

00:01:35,040 --> 00:01:40,479
um that's why i'm a thought leader

00:01:38,640 --> 00:01:42,880
okay so the first thing i want to talk

00:01:40,479 --> 00:01:43,520
about is the level of support in the nix

00:01:42,880 --> 00:01:45,680
community

00:01:43,520 --> 00:01:46,720
this is a issue i had when i was

00:01:45,680 --> 00:01:50,240
installing

00:01:46,720 --> 00:01:53,040
um mac os i don't know what i'm doing um

00:01:50,240 --> 00:01:54,399
in the world of computers and so i had

00:01:53,040 --> 00:01:56,159
this big issue where i just cut and

00:01:54,399 --> 00:01:59,119
pasted as much as i could

00:01:56,159 --> 00:02:00,640
and then these really kind people just

00:01:59,119 --> 00:02:02,159
wouldn't leave me alone and they kept

00:02:00,640 --> 00:02:05,600
helping me

00:02:02,159 --> 00:02:07,439
and then i was like up like so late and

00:02:05,600 --> 00:02:09,039
uh you know let's see what happens

00:02:07,439 --> 00:02:11,920
there's no luck it was like

00:02:09,039 --> 00:02:13,200
four in the morning um i wish there was

00:02:11,920 --> 00:02:14,480
some kind of weight like it just goes

00:02:13,200 --> 00:02:17,920
i'm sorry

00:02:14,480 --> 00:02:19,599
um it just really goes on and on and on

00:02:17,920 --> 00:02:21,280
that they were helping me with this

00:02:19,599 --> 00:02:23,440
issue and

00:02:21,280 --> 00:02:25,520
the good thing is it has a see there's a

00:02:23,440 --> 00:02:27,440
green light here so it had a good

00:02:25,520 --> 00:02:29,599
ending so i just want to commend the

00:02:27,440 --> 00:02:36,480
next os community for being so

00:02:29,599 --> 00:02:39,599
supportive thank you um

00:02:36,480 --> 00:02:40,160
uh yeah but uh so what is the the the

00:02:39,599 --> 00:02:41,599
current

00:02:40,160 --> 00:02:43,200
um state of the union if you want to

00:02:41,599 --> 00:02:46,160
dual boot a mac os

00:02:43,200 --> 00:02:47,040
with uh nics you can do it it will work

00:02:46,160 --> 00:02:48,800
um

00:02:47,040 --> 00:02:50,400
and it's a fine system and you get the

00:02:48,800 --> 00:02:52,640
good hardware and you can look really

00:02:50,400 --> 00:02:54,480
cool in the cafes but um

00:02:52,640 --> 00:02:55,840
uh there is one really big problem and

00:02:54,480 --> 00:02:59,360
that's there's this

00:02:55,840 --> 00:03:01,280
uh nasty bug here that says unreliable

00:02:59,360 --> 00:03:02,480
suspend in weight on the macbook pro

00:03:01,280 --> 00:03:04,640
that says 12 1

00:03:02,480 --> 00:03:06,400
uh but if you scroll and scroll and

00:03:04,640 --> 00:03:08,159
scroll almost as much scrolling as my

00:03:06,400 --> 00:03:09,840
nixos support

00:03:08,159 --> 00:03:12,239
you will find many people are having

00:03:09,840 --> 00:03:13,440
this problem and so i promised i would

00:03:12,239 --> 00:03:15,599
demo the problem

00:03:13,440 --> 00:03:16,879
this is a different screen but also on

00:03:15,599 --> 00:03:20,080
the same computer

00:03:16,879 --> 00:03:22,959
and if i close this it probably actually

00:03:20,080 --> 00:03:23,920
might not break because of this business

00:03:22,959 --> 00:03:25,760
and

00:03:23,920 --> 00:03:27,519
so then you go into your work meeting

00:03:25,760 --> 00:03:29,519
and your boss is

00:03:27,519 --> 00:03:31,200
showing me the new deployment system on

00:03:29,519 --> 00:03:35,760
nick's os and

00:03:31,200 --> 00:03:38,480
you open it and uh nothing will show up

00:03:35,760 --> 00:03:39,120
and so you will panic because your boss

00:03:38,480 --> 00:03:41,680
is now

00:03:39,120 --> 00:03:43,360
thinking twice about all the new

00:03:41,680 --> 00:03:45,040
deployment setup you have

00:03:43,360 --> 00:03:46,640
and then it'll start getting really hot

00:03:45,040 --> 00:03:47,920
so now you're like sweating in the room

00:03:46,640 --> 00:03:48,879
with your boss because the computer is

00:03:47,920 --> 00:03:52,720
overheating

00:03:48,879 --> 00:03:55,599
and eventually it'll shut down which is

00:03:52,720 --> 00:03:55,599
good um

00:03:56,000 --> 00:04:01,760
and then you'll reboot and your system

00:03:57,519 --> 00:04:04,720
will back up again but uh

00:04:01,760 --> 00:04:06,000
i mean you don't want that so that's the

00:04:04,720 --> 00:04:08,640
the current state

00:04:06,000 --> 00:04:10,239
um and if anybody really wants to like

00:04:08,640 --> 00:04:13,040
dig very deep into this bug

00:04:10,239 --> 00:04:15,760
i will lend this computer and we can

00:04:13,040 --> 00:04:18,639
hack away at it and try to figure it out

00:04:15,760 --> 00:04:20,239
and and i will also commit to sharing

00:04:18,639 --> 00:04:21,280
the learnings of how we debugged it

00:04:20,239 --> 00:04:24,560
online

00:04:21,280 --> 00:04:26,880
as well but otherwise yeah

00:04:24,560 --> 00:04:28,400
you can install it it will work the

00:04:26,880 --> 00:04:32,240
suspend resume bug

00:04:28,400 --> 00:04:33,919
remains and thank for the

00:04:32,240 --> 00:04:43,840
thank nick sos community for the great

00:04:33,919 --> 00:04:43,840
support and that is the end of my talk

00:04:54,560 --> 00:04:57,919
i won't be offended if you don't ask

00:04:56,000 --> 00:05:00,240
questions so don't feel that you need to

00:04:57,919 --> 00:05:02,479
but i will like leave this room and feel

00:05:00,240 --> 00:05:02,479
sad

00:05:03,280 --> 00:05:08,880
i'm only kidding yeah help so

00:05:06,400 --> 00:05:10,400
this back uh the screen does turn off

00:05:08,880 --> 00:05:14,000
but the system

00:05:10,400 --> 00:05:16,240
works uh well it's

00:05:14,000 --> 00:05:17,520
different it seems it's uh so i tried to

00:05:16,240 --> 00:05:20,800
like

00:05:17,520 --> 00:05:22,560
cat uh two files and mash buttons and do

00:05:20,800 --> 00:05:25,520
as much as i could to figure it out

00:05:22,560 --> 00:05:26,160
it's if you look at the the logs um

00:05:25,520 --> 00:05:29,039
systemd

00:05:26,160 --> 00:05:30,240
registers asleep but it doesn't register

00:05:29,039 --> 00:05:33,600
awake

00:05:30,240 --> 00:05:36,880
um but when i open the the screen

00:05:33,600 --> 00:05:38,560
um like something's running but like a

00:05:36,880 --> 00:05:40,320
few things i noticed is like i have one

00:05:38,560 --> 00:05:42,000
of these

00:05:40,320 --> 00:05:43,680
keys that the security people at

00:05:42,000 --> 00:05:45,360
soundcloud made me use

00:05:43,680 --> 00:05:46,800
ubix or something i'm not a security

00:05:45,360 --> 00:05:49,919
person uh

00:05:46,800 --> 00:05:52,800
but uh the light won't like the usb

00:05:49,919 --> 00:05:54,240
uh is no longer gets detected anymore so

00:05:52,800 --> 00:05:55,759
like it'll be it'll detect it when it's

00:05:54,240 --> 00:05:57,039
shut or something but i open it and then

00:05:55,759 --> 00:05:59,600
it shuts off so

00:05:57,039 --> 00:06:00,400
i it's much beyond my understanding of

00:05:59,600 --> 00:06:02,800
systems so

00:06:00,400 --> 00:06:03,759
likely something else but sometimes i i

00:06:02,800 --> 00:06:07,440
get similar

00:06:03,759 --> 00:06:10,160
i don't have a macbook but it

00:06:07,440 --> 00:06:10,880
i don't get the screen is black and if i

00:06:10,160 --> 00:06:14,560
switch

00:06:10,880 --> 00:06:17,600
to virtual terminals and back to ex

00:06:14,560 --> 00:06:18,639
then it it gets back but yeah otherwise

00:06:17,600 --> 00:06:21,360
i'm unable to

00:06:18,639 --> 00:06:23,280
work around it yeah matt uh yeah you it

00:06:21,360 --> 00:06:25,280
it's straight up is like a brick and

00:06:23,280 --> 00:06:27,919
macbooks have this really nice feature

00:06:25,280 --> 00:06:28,720
that um these mouse pads have haptic

00:06:27,919 --> 00:06:30,319
feedback

00:06:28,720 --> 00:06:31,520
and so you really know when your machine

00:06:30,319 --> 00:06:33,039
turns off because you can't press the

00:06:31,520 --> 00:06:34,880
buttons anymore

00:06:33,039 --> 00:06:38,000
which is good for debugging a black

00:06:34,880 --> 00:06:38,000
screen um

00:06:38,400 --> 00:06:41,280
i mean like it was like literally i

00:06:39,759 --> 00:06:42,800
would be like is this thing even on like

00:06:41,280 --> 00:06:43,600
i can't hear anything and then like

00:06:42,800 --> 00:06:44,800
people are partying

00:06:43,600 --> 00:06:47,199
because i'm doing it at berghein all the

00:06:44,800 --> 00:06:49,039
time so i can't hear anything and uh

00:06:47,199 --> 00:06:50,160
the haptic feedback trick was very

00:06:49,039 --> 00:06:52,240
helpful for figuring out what's

00:06:50,160 --> 00:07:03,840
happening

00:06:52,240 --> 00:07:07,120
okay thank you

00:07:03,840 --> 00:07:10,160
next up is going to be matthias bayer

00:07:07,120 --> 00:07:11,840
who is going to talk about uh a

00:07:10,160 --> 00:07:17,840
collection of tools he's built

00:07:11,840 --> 00:07:17,840
called nick's scripts

00:07:25,360 --> 00:07:31,560
hi um so when i started with nixos i had

00:07:29,280 --> 00:07:33,919
this one problem i i added my

00:07:31,560 --> 00:07:35,919
configuration.nyx and

00:07:33,919 --> 00:07:38,160
re-edited and rebuilt the system and it

00:07:35,919 --> 00:07:42,400
worked and then i want to go on and

00:07:38,160 --> 00:07:46,000
edit it again and again and again and

00:07:42,400 --> 00:07:48,720
no i don't have don't have a device

00:07:46,000 --> 00:07:49,120
uh i don't have things to show um so and

00:07:48,720 --> 00:07:52,319
then

00:07:49,120 --> 00:07:55,759
i wanted to have uh the possibility to

00:07:52,319 --> 00:07:58,960
go back in my configuration.nyx

00:07:55,759 --> 00:08:02,080
to a point where my system built

00:07:58,960 --> 00:08:04,319
but i wasn't able to find it in the

00:08:02,080 --> 00:08:05,680
git reverse in the git history because

00:08:04,319 --> 00:08:09,680
there were so many comments

00:08:05,680 --> 00:08:09,680
so i started to write a script which

00:08:09,759 --> 00:08:14,960
generates a tag in my repository every

00:08:12,879 --> 00:08:17,440
time my system rebuilds

00:08:14,960 --> 00:08:19,520
so this was the first step and then i

00:08:17,440 --> 00:08:21,599
continued writing scripts and scripts

00:08:19,520 --> 00:08:23,440
and i put them together into a

00:08:21,599 --> 00:08:26,000
collection of scripts

00:08:23,440 --> 00:08:27,039
and there are tools available for

00:08:26,000 --> 00:08:29,759
updating

00:08:27,039 --> 00:08:31,120
package definitions in a next package

00:08:29,759 --> 00:08:32,839
repository by

00:08:31,120 --> 00:08:34,560
pulling the patch from the

00:08:32,839 --> 00:08:37,839
monitor.nixos.org

00:08:34,560 --> 00:08:38,479
tool applying the patch trying to build

00:08:37,839 --> 00:08:40,959
a package

00:08:38,479 --> 00:08:42,080
and if it works push it to github and i

00:08:40,959 --> 00:08:44,560
just have to

00:08:42,080 --> 00:08:45,279
push the pull request button and

00:08:44,560 --> 00:08:47,440
everything

00:08:45,279 --> 00:08:48,800
is fine and i have exactly one step in

00:08:47,440 --> 00:08:52,000
my command line

00:08:48,800 --> 00:08:55,120
to update a package

00:08:52,000 --> 00:08:56,720
i edited other tools to update my

00:08:55,120 --> 00:08:59,760
channels in one step

00:08:56,720 --> 00:09:02,000
so i can update my channels and if i can

00:08:59,760 --> 00:09:05,360
rebuild my system with this channel

00:09:02,000 --> 00:09:08,399
i can go into my configuration.nick's

00:09:05,360 --> 00:09:11,839
repository and i see i

00:09:08,399 --> 00:09:14,160
built generation 42 from this comet

00:09:11,839 --> 00:09:16,880
and from this channel at that time so i

00:09:14,160 --> 00:09:19,040
can go into my configuration

00:09:16,880 --> 00:09:20,240
set my channel generation to this

00:09:19,040 --> 00:09:22,080
specific point

00:09:20,240 --> 00:09:26,080
and rebuild the system exactly how it

00:09:22,080 --> 00:09:27,600
was with this one configuration.nyx

00:09:26,080 --> 00:09:29,440
yeah and there's some other tools

00:09:27,600 --> 00:09:31,600
available and you can find

00:09:29,440 --> 00:09:33,360
uh all the scripts on github and

00:09:31,600 --> 00:09:36,959
matthias buyer slash nixo has

00:09:33,360 --> 00:09:40,000
my dash scripts yeah and

00:09:36,959 --> 00:09:43,839
suggestions are welcome so

00:09:40,000 --> 00:09:43,839
that's all thanks

00:09:46,880 --> 00:09:50,000
can you say for one question or two one

00:09:49,600 --> 00:09:52,320
reaction

00:09:50,000 --> 00:09:52,320
or two

00:09:54,320 --> 00:09:58,800
hey i suggest you tweet the link because

00:09:57,120 --> 00:10:02,160
your name is difficult to spell

00:09:58,800 --> 00:10:05,839
for some people okay

00:10:02,160 --> 00:10:07,920
yeah i can uh

00:10:05,839 --> 00:10:10,800
yeah i can put it on i will see your

00:10:07,920 --> 00:10:13,839
mailing list or whatever

00:10:10,800 --> 00:10:14,320
yep okay very practical suggestion very

00:10:13,839 --> 00:10:18,000
good

00:10:14,320 --> 00:10:20,320
next next question

00:10:18,000 --> 00:10:22,399
um i went to your scripts because i

00:10:20,320 --> 00:10:25,120
wanted to do a difference between my

00:10:22,399 --> 00:10:26,959
two generations and just remember what's

00:10:25,120 --> 00:10:27,680
the change between generation two and

00:10:26,959 --> 00:10:30,399
three

00:10:27,680 --> 00:10:31,360
for example and i also made a pull

00:10:30,399 --> 00:10:34,880
request to your

00:10:31,360 --> 00:10:38,800
repo so you saw that but we are

00:10:34,880 --> 00:10:40,480
very limited in we cannot do difference

00:10:38,800 --> 00:10:41,760
between generations because most of the

00:10:40,480 --> 00:10:43,040
information is lost

00:10:41,760 --> 00:10:44,839
so you do not know what are the

00:10:43,040 --> 00:10:47,920
difference between the nix

00:10:44,839 --> 00:10:52,320
scripts that were used to generate

00:10:47,920 --> 00:10:54,480
the two generations you know what i mean

00:10:52,320 --> 00:10:55,680
not really you know if you compare to

00:10:54,480 --> 00:10:57,680
generations you can

00:10:55,680 --> 00:10:59,040
you can see what are the different

00:10:57,680 --> 00:11:00,480
different packages that have been

00:10:59,040 --> 00:11:01,680
installed and you can look at the

00:11:00,480 --> 00:11:03,519
different ash

00:11:01,680 --> 00:11:05,360
so if there is a package with the same

00:11:03,519 --> 00:11:06,800
name but the different hash you can

00:11:05,360 --> 00:11:08,880
assume that is

00:11:06,800 --> 00:11:10,480
there was a change somewhere but it's

00:11:08,880 --> 00:11:11,760
very difficult to know the root of the

00:11:10,480 --> 00:11:14,640
change

00:11:11,760 --> 00:11:15,200
okay so i know maybe you should talk

00:11:14,640 --> 00:11:17,360
about that

00:11:15,200 --> 00:11:19,440
yeah if someone has an idea of how can

00:11:17,360 --> 00:11:21,760
we retrieve the difference

00:11:19,440 --> 00:11:23,279
between the two nix expressions that

00:11:21,760 --> 00:11:24,320
were used to generate the two different

00:11:23,279 --> 00:11:27,120
systems

00:11:24,320 --> 00:11:29,839
that would be interesting okay you

00:11:27,120 --> 00:11:29,839
really should talk

00:11:31,760 --> 00:11:34,079
question

00:11:38,560 --> 00:11:42,079
have you thought about contributing any

00:11:39,839 --> 00:11:43,680
of this back to nix itself i'm

00:11:42,079 --> 00:11:45,440
wondering if maybe there's like you

00:11:43,680 --> 00:11:47,040
could have a hooks system or something

00:11:45,440 --> 00:11:47,839
in next that would maybe hook into your

00:11:47,040 --> 00:11:49,120
scripts

00:11:47,839 --> 00:11:51,600
rather than having to call your scripts

00:11:49,120 --> 00:11:53,839
directly would be a nice idea yes um

00:11:51,600 --> 00:11:54,720
i think the the purpose of nics and and

00:11:53,839 --> 00:11:58,399
my scripts are

00:11:54,720 --> 00:12:00,959
not really the same nix is like

00:11:58,399 --> 00:12:01,600
for me as a end user package management

00:12:00,959 --> 00:12:03,839
and so on

00:12:01,600 --> 00:12:05,839
and my scripts are like the surrounding

00:12:03,839 --> 00:12:10,240
parts

00:12:05,839 --> 00:12:13,600
but yeah would be a nice idea yes

00:12:10,240 --> 00:12:13,600
one more time for one more

00:12:15,120 --> 00:12:19,200
i can show you and github

00:12:19,440 --> 00:12:23,120
no really good question just wanted to

00:12:21,279 --> 00:12:23,680
report that i'm a very happy user and i

00:12:23,120 --> 00:12:27,920
wanted to

00:12:23,680 --> 00:12:27,920
say thank you for writing it thank you

00:12:28,959 --> 00:12:43,040
okay that's it thank you

00:12:39,519 --> 00:12:44,800
okay so while we are setting up the

00:12:43,040 --> 00:12:48,160
laptop

00:12:44,800 --> 00:12:52,000
i'll introduce the third lightning

00:12:48,160 --> 00:12:54,240
which is going to be by emery hemingway

00:12:52,000 --> 00:12:55,120
who will be talking about what happens

00:12:54,240 --> 00:12:58,800
when you point

00:12:55,120 --> 00:13:01,120
next to g note so i don't know what g

00:12:58,800 --> 00:13:07,839
note is so i'm really curious about

00:13:01,120 --> 00:13:07,839
what he's going to say

00:13:07,920 --> 00:13:10,240
okay

00:13:10,959 --> 00:13:13,279
um

00:13:16,560 --> 00:13:21,839
hopefully it works

00:13:24,720 --> 00:13:27,440
okay yeah

00:13:28,399 --> 00:13:31,839
um yeah so i've been spending the last

00:13:31,279 --> 00:13:35,680
few months

00:13:31,839 --> 00:13:39,519
porting next to gnode

00:13:35,680 --> 00:13:39,519
which is a micro kernel operating system

00:13:40,000 --> 00:13:44,560
this is all experimental and requires

00:13:41,760 --> 00:13:46,320
features that aren't in the master

00:13:44,560 --> 00:13:49,839
g node branch so it's not really

00:13:46,320 --> 00:13:49,839
reproducible right now

00:13:50,240 --> 00:13:54,720
the goals for the port were i had to do

00:13:52,800 --> 00:13:58,160
everything natively i didn't want to

00:13:54,720 --> 00:13:59,040
sort of do do unique simulation i didn't

00:13:58,160 --> 00:14:03,839
want to like just

00:13:59,040 --> 00:14:03,839
sort of try and fix system calls um

00:14:04,079 --> 00:14:08,480
i want it to be pure at least as pure as

00:14:06,639 --> 00:14:10,320
the unix implementation it's actually

00:14:08,480 --> 00:14:12,240
more pure and i'll get to that

00:14:10,320 --> 00:14:14,240
um i have to have a lockless store

00:14:12,240 --> 00:14:18,880
because our file system doesn't have

00:14:14,240 --> 00:14:22,320
locks no database either

00:14:18,880 --> 00:14:26,160
that's something that may not work

00:14:22,320 --> 00:14:29,040
long term but and it has to be invisible

00:14:26,160 --> 00:14:30,560
to applications and that does work and i

00:14:29,040 --> 00:14:32,160
want it to be recursive but that's

00:14:30,560 --> 00:14:33,920
that's theoretical and i don't see why

00:14:32,160 --> 00:14:37,440
it shouldn't be but that's

00:14:33,920 --> 00:14:39,199
not known um so just

00:14:37,440 --> 00:14:40,639
i gotta talk about unix first uh it's

00:14:39,199 --> 00:14:43,279
really old it's

00:14:40,639 --> 00:14:44,320
only made for development it's it has a

00:14:43,279 --> 00:14:46,320
file system as

00:14:44,320 --> 00:14:48,880
uh intrinsic feature it's provided by

00:14:46,320 --> 00:14:51,360
the kernel the file systems everywhere

00:14:48,880 --> 00:14:53,440
it's for multiple users policy is

00:14:51,360 --> 00:14:56,959
administrated by the root

00:14:53,440 --> 00:14:59,519
um and you have users and groups

00:14:56,959 --> 00:15:01,680
gino on the other hand is released

00:14:59,519 --> 00:15:03,519
outside of the university at dresden in

00:15:01,680 --> 00:15:05,120
00:15:03,519 --> 00:15:06,639
uh it's designed to be low complexity

00:15:05,120 --> 00:15:08,639
high security

00:15:06,639 --> 00:15:10,560
which makes things kind of complicated

00:15:08,639 --> 00:15:14,160
even though it says low complexity

00:15:10,560 --> 00:15:16,320
um it's kernel agnostic so

00:15:14,160 --> 00:15:18,079
it runs on microkernels separation

00:15:16,320 --> 00:15:18,720
kernels and monolithic kernels and i'm

00:15:18,079 --> 00:15:22,240
running a

00:15:18,720 --> 00:15:26,000
l4 family hypervisor right now

00:15:22,240 --> 00:15:27,199
um and if if it's going to

00:15:26,000 --> 00:15:29,360
count for anything we have to have

00:15:27,199 --> 00:15:30,399
legacy software support so we have a lib

00:15:29,360 --> 00:15:33,680
c

00:15:30,399 --> 00:15:36,000
uh we have sdl qt um and we have

00:15:33,680 --> 00:15:37,440
virtualbox running so

00:15:36,000 --> 00:15:39,759
what we don't support natively you can

00:15:37,440 --> 00:15:40,000
virtualize um we have distributed policy

00:15:39,759 --> 00:15:43,360
this

00:15:40,000 --> 00:15:45,199
is we don't have a root user so

00:15:43,360 --> 00:15:46,720
you can you can subdivide the system and

00:15:45,199 --> 00:15:50,399
then make meaningful

00:15:46,720 --> 00:15:51,839
policy decisions at different points

00:15:50,399 --> 00:15:53,279
and then we have different services and

00:15:51,839 --> 00:15:55,199
all the services are addressed by

00:15:53,279 --> 00:15:56,480
capabilities and we have

00:15:55,199 --> 00:15:58,399
you know we can share memory using

00:15:56,480 --> 00:16:01,040
capabilities and threads and

00:15:58,399 --> 00:16:02,079
stuff like this but the file system is

00:16:01,040 --> 00:16:05,920
optional

00:16:02,079 --> 00:16:07,440
and that's where it gets tricky so

00:16:05,920 --> 00:16:08,959
everything in gnode is done with the

00:16:07,440 --> 00:16:12,320
parent child relationship

00:16:08,959 --> 00:16:14,480
um like and then you have

00:16:12,320 --> 00:16:16,320
services routed between these components

00:16:14,480 --> 00:16:17,360
sometimes it crosses this parent child

00:16:16,320 --> 00:16:19,680
barrier

00:16:17,360 --> 00:16:20,639
and i said low complexity and this looks

00:16:19,680 --> 00:16:22,800
bad

00:16:20,639 --> 00:16:24,800
but each component only only

00:16:22,800 --> 00:16:27,680
communicates with the parent component

00:16:24,800 --> 00:16:28,240
so you have a simple interface from the

00:16:27,680 --> 00:16:32,240
from

00:16:28,240 --> 00:16:33,600
each component but

00:16:32,240 --> 00:16:35,440
you can have multiple file system

00:16:33,600 --> 00:16:36,560
servers which

00:16:35,440 --> 00:16:39,279
would seem to make this really

00:16:36,560 --> 00:16:39,279
complicated

00:16:39,519 --> 00:16:43,519
but when we run unix programs in our

00:16:42,399 --> 00:16:46,000
unix emulator

00:16:43,519 --> 00:16:47,120
we have this nukes process this is a

00:16:46,000 --> 00:16:48,839
confusing name

00:16:47,120 --> 00:16:51,680
[Music]

00:16:48,839 --> 00:16:52,959
but and so nukes sort of acts as the

00:16:51,680 --> 00:16:55,279
kernel

00:16:52,959 --> 00:16:56,160
um and there's this vfs virtual file

00:16:55,279 --> 00:16:58,320
system layer

00:16:56,160 --> 00:17:00,800
in the nukes runtime which is just like

00:16:58,320 --> 00:17:00,800
the kernel

00:17:01,680 --> 00:17:07,439
and we broke the vfs live we broke the

00:17:04,959 --> 00:17:10,720
vfs layer into a library

00:17:07,439 --> 00:17:14,160
so you can use the vfs

00:17:10,720 --> 00:17:17,520
to communicate over an fs session

00:17:14,160 --> 00:17:19,360
with a block server and you could

00:17:17,520 --> 00:17:20,640
i don't have the mp implemented yet nine

00:17:19,360 --> 00:17:22,400
p implemented yet but you can go over a

00:17:20,640 --> 00:17:26,720
network um

00:17:22,400 --> 00:17:29,760
so where do you put nics uh so

00:17:26,720 --> 00:17:32,880
when you configure a vfs um

00:17:29,760 --> 00:17:34,720
either in the the nukes run time or in a

00:17:32,880 --> 00:17:36,480
program that has the vfs library

00:17:34,720 --> 00:17:39,840
linkedin

00:17:36,480 --> 00:17:42,160
up here you see vfs root label that is a

00:17:39,840 --> 00:17:44,240
connection to a file system server

00:17:42,160 --> 00:17:45,600
and the root argument says change root

00:17:44,240 --> 00:17:49,200
as soon as i connect

00:17:45,600 --> 00:17:50,799
and the label is provided as a

00:17:49,200 --> 00:17:52,400
for the parent to decide where to route

00:17:50,799 --> 00:17:54,240
which file system server

00:17:52,400 --> 00:17:56,960
you're wanting and so i have nukes

00:17:54,240 --> 00:17:59,360
package written up here because

00:17:56,960 --> 00:18:00,880
these two these two top connections

00:17:59,360 --> 00:18:01,840
presumably i want them to go to the same

00:18:00,880 --> 00:18:04,400
place

00:18:01,840 --> 00:18:07,360
but for my home directory i want that to

00:18:04,400 --> 00:18:07,360
be a different server

00:18:07,600 --> 00:18:12,960
so the trick is if you can rewrite these

00:18:10,240 --> 00:18:15,600
arguments at the parent

00:18:12,960 --> 00:18:17,840
so up above say we have this vfs

00:18:15,600 --> 00:18:21,600
configuration

00:18:17,840 --> 00:18:23,039
i don't send the session request to a to

00:18:21,600 --> 00:18:26,320
a file system server

00:18:23,039 --> 00:18:28,320
i send it to this next server and so

00:18:26,320 --> 00:18:30,360
whenever this sees nuke's package it

00:18:28,320 --> 00:18:33,840
looks in this file nukes package

00:18:30,360 --> 00:18:35,120
default.next which can be a really

00:18:33,840 --> 00:18:38,400
simple function

00:18:35,120 --> 00:18:39,280
that takes the root argument and so here

00:18:38,400 --> 00:18:42,400
i'm just taking

00:18:39,280 --> 00:18:44,400
this root argument out of a set

00:18:42,400 --> 00:18:46,880
which presumably i'm rewriting the root

00:18:44,400 --> 00:18:49,440
argument to be a a

00:18:46,880 --> 00:18:51,120
store root and you can see here the

00:18:49,440 --> 00:18:51,760
store root doesn't have a leading slash

00:18:51,120 --> 00:18:55,200
on it

00:18:51,760 --> 00:18:58,320
which is it seems odd

00:18:55,200 --> 00:19:00,960
but then once once i have a connection

00:18:58,320 --> 00:19:02,640
vicariously through the next server i'm

00:19:00,960 --> 00:19:04,720
just going to pass a capability back

00:19:02,640 --> 00:19:06,640
up and then you have a direct connection

00:19:04,720 --> 00:19:10,400
but i have a root

00:19:06,640 --> 00:19:15,600
so i've rewritten the the the uh

00:19:10,400 --> 00:19:15,600
the root um using this and so

00:19:15,919 --> 00:19:19,440
what you can do is you can have the vfs

00:19:18,240 --> 00:19:21,840
in a server that serves

00:19:19,440 --> 00:19:24,000
fs sessions and then you just make one

00:19:21,840 --> 00:19:26,000
evaluation of the vfs server

00:19:24,000 --> 00:19:28,559
then all clients would use that that nyx

00:19:26,000 --> 00:19:30,080
evaluation

00:19:28,559 --> 00:19:31,360
and i'd like to talk about how it works

00:19:30,080 --> 00:19:33,280
underneath but i don't have time for

00:19:31,360 --> 00:19:38,320
that

00:19:33,280 --> 00:19:42,559
so i can give you a quick demo um

00:19:38,320 --> 00:19:42,559
this is well maybe i won't show you that

00:19:42,799 --> 00:19:47,200
but just for for brevity um

00:19:50,840 --> 00:19:55,440
okay

00:19:53,200 --> 00:19:58,640
so i'll start bash and the uh the

00:19:55,440 --> 00:20:00,640
runtime and you can see up here

00:19:58,640 --> 00:20:02,159
i'm not building the packages because i

00:20:00,640 --> 00:20:03,200
don't have all the expressions ready for

00:20:02,159 --> 00:20:07,200
that

00:20:03,200 --> 00:20:10,320
but i'm using

00:20:07,200 --> 00:20:13,120
connections to a next door

00:20:10,320 --> 00:20:14,480
and so well there's probably a lot of

00:20:13,120 --> 00:20:17,760
garbage in here

00:20:14,480 --> 00:20:22,400
but like i have this

00:20:17,760 --> 00:20:26,480
i have um i can look inside and see

00:20:22,400 --> 00:20:26,480
i have some store paths but

00:20:31,280 --> 00:20:34,559
i mean bash bash is not assembling bash

00:20:33,440 --> 00:20:39,039
is a real

00:20:34,559 --> 00:20:39,039
it's a real file um

00:20:39,120 --> 00:20:45,280
and this this launcher i have

00:20:43,120 --> 00:20:46,400
isn't doesn't have any sort of nik

00:20:45,280 --> 00:20:50,240
support built into it

00:20:46,400 --> 00:20:53,280
this is just a okay

00:20:50,240 --> 00:20:54,880
i've just sort of done this fs

00:20:53,280 --> 00:21:02,080
stuff and so i have a really stupid

00:20:54,880 --> 00:21:05,120
example here that i came up with

00:21:02,080 --> 00:21:05,120
so um

00:21:06,240 --> 00:21:14,559
all right so i have this folder next

00:21:11,440 --> 00:21:17,520
so what am this fire i

00:21:14,559 --> 00:21:17,840
there's nothing here but if i try and

00:21:17,520 --> 00:21:23,039
run

00:21:17,840 --> 00:21:23,039
a non-existent script

00:21:23,679 --> 00:21:34,080
generating fubar.sh

00:21:30,320 --> 00:21:36,799
that's the wrong uh extension

00:21:34,080 --> 00:21:37,360
okay yeah you're using dosbox but you

00:21:36,799 --> 00:21:40,320
can

00:21:37,360 --> 00:21:41,120
generate files to mix and so over here

00:21:40,320 --> 00:21:44,080
you can see

00:21:41,120 --> 00:21:45,679
um i don't know why it requests the file

00:21:44,080 --> 00:21:49,120
over and over

00:21:45,679 --> 00:21:52,559
i don't know that much about dos but

00:21:49,120 --> 00:21:56,000
if i if i have a libc i can sort of

00:21:52,559 --> 00:21:57,679
access nics solely using the file system

00:21:56,000 --> 00:21:59,600
by abstracting different parts of the

00:21:57,679 --> 00:22:00,880
file system and there's a lot of other

00:21:59,600 --> 00:22:12,400
details i could go into but i don't

00:22:00,880 --> 00:22:15,679
have time but yeah that's it right

00:22:12,400 --> 00:22:15,679
we got time for one question

00:22:22,559 --> 00:22:26,480
when should we expect like a full-blown

00:22:24,400 --> 00:22:28,720
talk because that's pretty interesting

00:22:26,480 --> 00:22:30,000
um i was afraid the wheels would fall

00:22:28,720 --> 00:22:33,440
off so i didn't want to

00:22:30,000 --> 00:22:35,600
request a time slot a full slot

00:22:33,440 --> 00:22:35,600
but

00:22:36,720 --> 00:22:40,240
again i need to sort of clean things up

00:22:38,400 --> 00:22:55,840
and get things finalized

00:22:40,240 --> 00:22:55,840
but yeah

00:23:34,840 --> 00:23:37,840
firsthand

00:23:38,799 --> 00:23:41,760
hello it's loading

00:23:42,720 --> 00:23:51,600
is my time already like counting because

00:23:46,240 --> 00:23:54,720
i thought i have a laptop and

00:23:51,600 --> 00:23:54,720
right i mean

00:23:55,440 --> 00:24:00,480
i'm i'm booting manjaro linux throw

00:23:58,240 --> 00:24:03,679
tomatoes with me

00:24:00,480 --> 00:24:06,240
it's like this not nexos thing

00:24:03,679 --> 00:24:06,880
i have an excuse though like i i have to

00:24:06,240 --> 00:24:10,320
build

00:24:06,880 --> 00:24:13,760
stuff for arch linux so this is sort of

00:24:10,320 --> 00:24:13,760
my development machine so then

00:24:16,840 --> 00:24:19,840
okay

00:24:23,520 --> 00:24:29,120
yeah does anybody know how to use

00:24:26,400 --> 00:24:29,120
x-ranger

00:24:29,200 --> 00:24:33,840
yeah me too

00:24:42,320 --> 00:24:46,080
yeah right okay it didn't detect

00:24:45,440 --> 00:24:51,440
anything

00:24:46,080 --> 00:24:51,440
why because the other things connected

00:24:58,840 --> 00:25:01,840
okay

00:25:09,650 --> 00:25:12,799
[Applause]

00:25:12,840 --> 00:25:15,840
yep

00:25:24,080 --> 00:25:28,960
i want i wanted i wanted to mirror okay

00:25:35,200 --> 00:25:38,880
i didn't even take time to change the

00:25:36,960 --> 00:25:39,600
desktop background that's how they like

00:25:38,880 --> 00:25:42,720
care

00:25:39,600 --> 00:25:45,200
okay let's just now wait for chromium to

00:25:42,720 --> 00:25:45,200
boot up

00:25:46,000 --> 00:25:48,640
oh cool

00:25:53,440 --> 00:25:57,840
yeah right there's that thing

00:26:03,279 --> 00:26:09,760
are you all right with it being cut off

00:26:06,400 --> 00:26:11,840
uh yeah i think so yeah oh shh no that's

00:26:09,760 --> 00:26:11,840
wrong

00:26:36,880 --> 00:26:39,840
all right here we go

00:26:41,279 --> 00:26:46,480
oops oops it didn't say anything

00:26:46,720 --> 00:26:48,960
cool

00:26:50,159 --> 00:26:53,840
let's go full screen

00:26:55,679 --> 00:26:58,480
okay cool

00:27:04,640 --> 00:27:07,840
i understand

00:27:09,520 --> 00:27:13,679
yeah that's that's that's that's nice

00:27:11,440 --> 00:27:13,679
yeah

00:27:14,880 --> 00:27:18,480
now it looks like it's okay yeah i mean

00:27:18,080 --> 00:27:22,720
it

00:27:18,480 --> 00:27:26,000
doesn't have text oh

00:27:22,720 --> 00:27:26,000
how did how did that happen

00:27:27,440 --> 00:27:31,679
anyway i opened the terminal and then

00:27:30,320 --> 00:27:36,159
everything worked

00:27:31,679 --> 00:27:38,880
cool so start a timer uh the topic of

00:27:36,159 --> 00:27:40,640
the topic of this talk is quest for

00:27:38,880 --> 00:27:43,360
distributed hydra

00:27:40,640 --> 00:27:45,440
and you might wonder like what what do i

00:27:43,360 --> 00:27:47,520
even mean with with distributed hydra we

00:27:45,440 --> 00:27:50,559
already have build farms right

00:27:47,520 --> 00:27:53,840
so in companies we

00:27:50,559 --> 00:27:57,039
build a lot of stuff and you know

00:27:53,840 --> 00:27:58,399
we sometimes want to add some servers to

00:27:57,039 --> 00:28:01,600
our build cluster

00:27:58,399 --> 00:28:03,120
through amazon ec for instance and not

00:28:01,600 --> 00:28:05,360
do any configuration just

00:28:03,120 --> 00:28:09,039
you know just have a build cluster like

00:28:05,360 --> 00:28:12,640
in erlang and forget about it

00:28:09,039 --> 00:28:15,840
also in ideal world we would love

00:28:12,640 --> 00:28:17,360
for you know people in nix community

00:28:15,840 --> 00:28:19,120
to be able to contribute their

00:28:17,360 --> 00:28:22,399
computation power

00:28:19,120 --> 00:28:23,120
to actually uh you know offload the load

00:28:22,399 --> 00:28:25,600
from the main

00:28:23,120 --> 00:28:26,799
hydra instance to build binary caches

00:28:25,600 --> 00:28:29,520
for the people

00:28:26,799 --> 00:28:30,159
and and here's the problem of trust

00:28:29,520 --> 00:28:32,960
right so

00:28:30,159 --> 00:28:34,480
we want so we we have two goals with

00:28:32,960 --> 00:28:36,799
this quest we're on

00:28:34,480 --> 00:28:37,760
first goal is zero configuration hydro

00:28:36,799 --> 00:28:40,159
clusters

00:28:37,760 --> 00:28:41,360
and the second goal is zero trust hydro

00:28:40,159 --> 00:28:45,279
clusters

00:28:41,360 --> 00:28:48,880
okay um so

00:28:45,279 --> 00:28:49,760
we we we do not want to you know go full

00:28:48,880 --> 00:28:52,640
on and

00:28:49,760 --> 00:28:53,200
redo hydra or something we want to take

00:28:52,640 --> 00:28:55,760
uh

00:28:53,200 --> 00:28:58,159
things very slow one step at a time and

00:28:55,760 --> 00:29:00,720
begin with figuring out how to

00:28:58,159 --> 00:29:03,039
actually use you know distributed

00:29:00,720 --> 00:29:06,640
build.pl script i think it's called

00:29:03,039 --> 00:29:09,679
uh to to to implement some

00:29:06,640 --> 00:29:10,720
strategy of you know distributing the

00:29:09,679 --> 00:29:13,120
bills because

00:29:10,720 --> 00:29:15,360
some strategy of distributing the builds

00:29:13,120 --> 00:29:17,360
other than fanning out the tasks

00:29:15,360 --> 00:29:19,039
with really smart locking right

00:29:17,360 --> 00:29:21,279
basically now we're as far as i

00:29:19,039 --> 00:29:24,960
understand we're fanning out the tasks

00:29:21,279 --> 00:29:28,880
uh you know uh across the

00:29:24,960 --> 00:29:32,399
the machines that are in our nix dot

00:29:28,880 --> 00:29:35,120
build machines and be and being really

00:29:32,399 --> 00:29:37,279
careful about how we lock stuff

00:29:35,120 --> 00:29:37,279
so

00:29:38,159 --> 00:29:44,799
what we want to do to begin with

00:29:41,600 --> 00:29:45,279
is to do to use consistent hashing to

00:29:44,799 --> 00:29:48,320
say

00:29:45,279 --> 00:29:50,240
okay like we have this set of like in

00:29:48,320 --> 00:29:53,360
our company we have this set of

00:29:50,240 --> 00:29:56,480
packages we're building and we will

00:29:53,360 --> 00:30:00,080
build you know that packages

00:29:56,480 --> 00:30:02,640
on this like we will hash

00:30:00,080 --> 00:30:03,200
package packages and we will figure out

00:30:02,640 --> 00:30:05,279
that

00:30:03,200 --> 00:30:06,720
at this state of cluster these machines

00:30:05,279 --> 00:30:09,520
are building that packages

00:30:06,720 --> 00:30:09,919
this way all our clients that want uh to

00:30:09,520 --> 00:30:13,600
get

00:30:09,919 --> 00:30:17,360
binary you know binary outputs

00:30:13,600 --> 00:30:20,720
will know from you know from consistent

00:30:17,360 --> 00:30:24,080
hashing algorithm from where they should

00:30:20,720 --> 00:30:28,000
obtain the binary the binary caches

00:30:24,080 --> 00:30:28,880
and of course we have no idea how to

00:30:28,000 --> 00:30:32,159
solve

00:30:28,880 --> 00:30:36,240
the the trust problem

00:30:32,159 --> 00:30:39,679
so this is why my colleague has

00:30:36,240 --> 00:30:43,200
has chosen this as his master's thesis

00:30:39,679 --> 00:30:46,480
so you have have if you have any like

00:30:43,200 --> 00:30:48,720
guidance and zero trust system systems

00:30:46,480 --> 00:30:50,159
then and if if you want to join us on

00:30:48,720 --> 00:30:52,080
this quest then

00:30:50,159 --> 00:30:54,159
you should drop us a line that's about

00:30:52,080 --> 00:30:54,159
it

00:30:54,640 --> 00:30:57,279
okay thank you

00:31:00,960 --> 00:31:05,840
okay i'm sure there must be questions

00:31:02,799 --> 00:31:05,840
about this so

00:31:08,320 --> 00:31:11,440
oh so you you actually talked about two

00:31:10,720 --> 00:31:14,080
things so

00:31:11,440 --> 00:31:16,080
uh distributed hydra and then you were

00:31:14,080 --> 00:31:17,360
mentioning the binary caches which is

00:31:16,080 --> 00:31:20,399
about the storage

00:31:17,360 --> 00:31:23,039
yes yes uh i maybe wasn't

00:31:20,399 --> 00:31:24,159
clear about it so basically we want to

00:31:23,039 --> 00:31:26,559
experiment first

00:31:24,159 --> 00:31:27,840
with you know distributed build pl

00:31:26,559 --> 00:31:30,320
script

00:31:27,840 --> 00:31:32,240
so to in sort of integrate a consistent

00:31:30,320 --> 00:31:35,120
hashing there

00:31:32,240 --> 00:31:36,720
right and see how it plays with the

00:31:35,120 --> 00:31:39,519
entire process of

00:31:36,720 --> 00:31:40,720
of of building stuff using uh the

00:31:39,519 --> 00:31:43,600
feature of nick's which

00:31:40,720 --> 00:31:44,159
uh which is called distributed builds

00:31:43,600 --> 00:31:46,159
and then

00:31:44,159 --> 00:31:47,919
sort of taking it from there with the

00:31:46,159 --> 00:31:48,799
with the experience with god and like

00:31:47,919 --> 00:31:52,240
with the

00:31:48,799 --> 00:31:53,519
pitfalls we felt and to do the proper

00:31:52,240 --> 00:31:56,320
thing with hydra

00:31:53,519 --> 00:31:56,960
right that's her vision of how how we

00:31:56,320 --> 00:31:58,559
should do that

00:31:56,960 --> 00:32:00,320
and we like by the way we don't have

00:31:58,559 --> 00:32:01,039
like any prototypes i can't show any

00:32:00,320 --> 00:32:04,000
demos

00:32:01,039 --> 00:32:05,760
it's just just that we think that

00:32:04,000 --> 00:32:07,360
eventually

00:32:05,760 --> 00:32:09,279
i mean for for the community i mean for

00:32:07,360 --> 00:32:09,919
companies we can write workarounds and

00:32:09,279 --> 00:32:11,519
whatever

00:32:09,919 --> 00:32:14,320
but for community it's extremely

00:32:11,519 --> 00:32:16,559
important to figure out this trust thing

00:32:14,320 --> 00:32:18,080
right so that i can that so that i can

00:32:16,559 --> 00:32:20,720
end like one click

00:32:18,080 --> 00:32:22,320
donate my computational power to the

00:32:20,720 --> 00:32:26,159
community

00:32:22,320 --> 00:32:28,320
so that you know we can uh we can build

00:32:26,159 --> 00:32:29,360
packages we can build binaries for the

00:32:28,320 --> 00:32:33,200
people

00:32:29,360 --> 00:32:33,200
that's that's our like end goal

00:32:33,679 --> 00:32:37,120
i'm gonna do another question but maybe

00:32:35,279 --> 00:32:42,000
you can already allow jack to

00:32:37,120 --> 00:32:44,559
shut up the next

00:32:42,000 --> 00:32:44,559
has a question

00:32:47,039 --> 00:32:54,799
um i guess i'm curious about what you

00:32:50,159 --> 00:32:56,480
really mean by zero trust so because

00:32:54,799 --> 00:32:58,320
there are different levels of trust

00:32:56,480 --> 00:33:00,640
right you can say i have

00:32:58,320 --> 00:33:02,559
public keys of people i know configured

00:33:00,640 --> 00:33:04,240
and then i trust those or

00:33:02,559 --> 00:33:06,640
do you have this web of trust kind of

00:33:04,240 --> 00:33:07,919
thing you have this

00:33:06,640 --> 00:33:10,080
well i'm not not quite sure how to

00:33:07,919 --> 00:33:13,120
interpret this requirement

00:33:10,080 --> 00:33:13,440
the thing is that we don't have uh you

00:33:13,120 --> 00:33:16,559
know

00:33:13,440 --> 00:33:20,080
any vision of

00:33:16,559 --> 00:33:20,880
how it should be done but we have some

00:33:20,080 --> 00:33:22,480
ideas

00:33:20,880 --> 00:33:24,480
for instance we can implement something

00:33:22,480 --> 00:33:27,919
like notary systems

00:33:24,480 --> 00:33:30,799
uh when the

00:33:27,919 --> 00:33:32,720
in in our cluster and this is where

00:33:30,799 --> 00:33:34,399
consistent hashing and

00:33:32,720 --> 00:33:36,399
if you have noticed like this is

00:33:34,399 --> 00:33:37,120
basically slides from bar show guys

00:33:36,399 --> 00:33:40,640
right

00:33:37,120 --> 00:33:42,720
so so we have we have more than one

00:33:40,640 --> 00:33:45,919
server building the same thing

00:33:42,720 --> 00:33:48,080
and then notaries are saying

00:33:45,919 --> 00:33:48,960
what is your output what is your output

00:33:48,080 --> 00:33:52,640
what is your if

00:33:48,960 --> 00:33:54,720
there is a consensus of outputs then we

00:33:52,640 --> 00:33:57,440
certain trusted and of course we have to

00:33:54,720 --> 00:34:00,000
make sure that in our hashing function

00:33:57,440 --> 00:34:01,120
somehow we know that these three you

00:34:00,000 --> 00:34:03,919
know servers

00:34:01,120 --> 00:34:05,279
are are owned by different parties right

00:34:03,919 --> 00:34:08,480
that are not that they

00:34:05,279 --> 00:34:09,919
don't have a conspiracy so this is this

00:34:08,480 --> 00:34:10,639
is sort of like what we're thinking

00:34:09,919 --> 00:34:14,879
about when

00:34:10,639 --> 00:34:14,879
when we're talking about zero trust uh

00:34:18,839 --> 00:34:21,839
hydroforms

00:34:23,200 --> 00:34:28,000
and some hints you might want into

00:34:25,280 --> 00:34:32,639
spoofing and sybil attacks

00:34:28,000 --> 00:34:36,079
okay sybil attacks s-y-b-i-l

00:34:32,639 --> 00:34:39,280
attacks and spoofing okay oh what

00:34:36,079 --> 00:34:42,720
what what do we spoof um

00:34:39,280 --> 00:34:45,280
like what is the the threat

00:34:42,720 --> 00:34:46,639
you may because you said uh you you have

00:34:45,280 --> 00:34:49,200
to make sure that

00:34:46,639 --> 00:34:49,919
there is not an alliance because um

00:34:49,200 --> 00:34:53,040
spoofing

00:34:49,919 --> 00:34:55,760
is essentially um

00:34:53,040 --> 00:34:57,040
when when more than one agent

00:34:55,760 --> 00:35:01,520
collaborates

00:34:57,040 --> 00:35:04,480
on uh um abusing the system

00:35:01,520 --> 00:35:04,480
the trust system

00:35:04,640 --> 00:35:08,160
so just some just some hints where you

00:35:06,640 --> 00:35:10,320
might want to look which which

00:35:08,160 --> 00:35:12,000
keywords you might yeah i mean we can

00:35:10,320 --> 00:35:13,520
talk about it but i mean i'm just stupid

00:35:12,000 --> 00:35:16,480
to see

00:35:13,520 --> 00:35:18,720
to see how it's immediately relevant

00:35:16,480 --> 00:35:22,320
like if we have good enough

00:35:18,720 --> 00:35:22,960
notary system then we just speak like

00:35:22,320 --> 00:35:25,680
random

00:35:22,960 --> 00:35:26,960
or i'm sorry uh we pick notaries with

00:35:25,680 --> 00:35:28,720
trust i guess and

00:35:26,960 --> 00:35:30,400
i mean we'll talk about it later i i'm

00:35:28,720 --> 00:35:32,960
just stupid to transfer that

00:35:30,400 --> 00:35:35,200
or think about it right now anything

00:35:32,960 --> 00:35:35,200
else

00:35:37,920 --> 00:35:45,839
cool thank you

00:35:51,760 --> 00:35:55,599
so the next uh presentation will be by

00:35:54,640 --> 00:35:58,800
jack cummings

00:35:55,599 --> 00:36:01,920
who will be talking about hydra in

00:35:58,800 --> 00:36:04,560
more practical terms i would say

00:36:01,920 --> 00:36:04,560
i think so

00:36:06,400 --> 00:36:16,800
all right

00:36:13,280 --> 00:36:17,920
all right um i wrote this

00:36:16,800 --> 00:36:20,079
five slides during one of the

00:36:17,920 --> 00:36:22,800
presentations this morning um someone

00:36:20,079 --> 00:36:24,400
was i was noting that hydra is a very

00:36:22,800 --> 00:36:25,440
very useful tool

00:36:24,400 --> 00:36:28,320
if you're doing internal next

00:36:25,440 --> 00:36:30,160
deployments and um

00:36:28,320 --> 00:36:31,440
it's actually kind of a bit of a work to

00:36:30,160 --> 00:36:32,880
get going um

00:36:31,440 --> 00:36:34,720
this is my experience of setting up

00:36:32,880 --> 00:36:36,240
hydra so things have probably changed

00:36:34,720 --> 00:36:36,960
since then i think i tried repeating

00:36:36,240 --> 00:36:39,839
this

00:36:36,960 --> 00:36:40,720
with a latest polo hydra and uh didn't

00:36:39,839 --> 00:36:43,680
merge well with

00:36:40,720 --> 00:36:45,040
some changes i'd made one of the

00:36:43,680 --> 00:36:47,520
problems i have is

00:36:45,040 --> 00:36:49,040
my builds can take hundreds of hours so

00:36:47,520 --> 00:36:50,160
it's really annoying when a bill takes

00:36:49,040 --> 00:36:53,520
99 hours and

00:36:50,160 --> 00:36:57,040
the timeout is 100 hours that you lose

00:36:53,520 --> 00:36:58,480
101 hours of the work um

00:36:57,040 --> 00:37:00,160
my hydra server doesn't run on exhaust

00:36:58,480 --> 00:37:03,119
it runs on a susa

00:37:00,160 --> 00:37:04,480
server it's the nix i'm using is a

00:37:03,119 --> 00:37:05,200
multi-user index installed that doesn't

00:37:04,480 --> 00:37:08,320
use

00:37:05,200 --> 00:37:09,119
nik store as a nyx path and it's all

00:37:08,320 --> 00:37:12,320
internal

00:37:09,119 --> 00:37:15,440
to the company work for so this

00:37:12,320 --> 00:37:18,800
is kind of a one of the less

00:37:15,440 --> 00:37:20,079
traveled paths than knicks i think

00:37:18,800 --> 00:37:22,160
so the first thing you need to do is you

00:37:20,079 --> 00:37:25,200
need to grab hydra

00:37:22,160 --> 00:37:26,320
that's canonical way to get it then you

00:37:25,200 --> 00:37:29,520
build hydra

00:37:26,320 --> 00:37:31,680
it actually uses nicks to build hydra

00:37:29,520 --> 00:37:33,119
one of the less known facts is you can

00:37:31,680 --> 00:37:34,880
actually use nyx as a replacement for

00:37:33,119 --> 00:37:37,920
make

00:37:34,880 --> 00:37:40,240
and more um you also need postgres

00:37:37,920 --> 00:37:42,160
um there was a time that hydra worked

00:37:40,240 --> 00:37:42,800
with sqlite but it does not work so

00:37:42,160 --> 00:37:44,560
anymore

00:37:42,800 --> 00:37:46,079
that one took me about two hours to

00:37:44,560 --> 00:37:49,119
figure out

00:37:46,079 --> 00:37:52,240
um then you make your hydra database

00:37:49,119 --> 00:37:55,359
um create a user for it pick a password

00:37:52,240 --> 00:37:58,960
throw it into pg pass so that i see

00:37:55,359 --> 00:38:02,839
tech ate my tilde but um

00:37:58,960 --> 00:38:05,920
then you can use locals authentication

00:38:02,839 --> 00:38:08,480
uh steady disclaimer when you're using

00:38:05,920 --> 00:38:10,079
either these things if you start up a

00:38:08,480 --> 00:38:11,440
postgres server

00:38:10,079 --> 00:38:13,200
on the big bad internet it might

00:38:11,440 --> 00:38:16,240
actually only yeah

00:38:13,200 --> 00:38:16,240
who knows what that happens

00:38:16,400 --> 00:38:19,760
so the next step is run hydra in it and

00:38:19,040 --> 00:38:23,040
that sets

00:38:19,760 --> 00:38:24,400
up all of the uh the loads the schema

00:38:23,040 --> 00:38:26,640
into the database

00:38:24,400 --> 00:38:29,119
sets up i don't know a few other things

00:38:26,640 --> 00:38:31,599
that hydra needs to get going

00:38:29,119 --> 00:38:32,880
and this is all stuff you run once the

00:38:31,599 --> 00:38:34,960
first time you set up hydra

00:38:32,880 --> 00:38:36,640
and then every time you run hydra i have

00:38:34,960 --> 00:38:39,599
just a little script to do this

00:38:36,640 --> 00:38:40,160
i do need to wrap this in a script

00:38:39,599 --> 00:38:41,839
because

00:38:40,160 --> 00:38:44,160
i have a different store and state

00:38:41,839 --> 00:38:47,119
directory so

00:38:44,160 --> 00:38:48,320
a lot of the next stuff has nick's store

00:38:47,119 --> 00:38:51,040
hard-coded into it

00:38:48,320 --> 00:38:53,440
which i tend to discover on a regular

00:38:51,040 --> 00:38:53,440
basis

00:38:53,760 --> 00:38:58,800
then once you've got the variable set up

00:38:57,440 --> 00:39:00,640
there are four parts that you need to

00:38:58,800 --> 00:39:01,680
run currently there's the postgres

00:39:00,640 --> 00:39:04,400
server which can

00:39:01,680 --> 00:39:06,640
contains all this state state about all

00:39:04,400 --> 00:39:08,480
the builds and all the evaluations

00:39:06,640 --> 00:39:10,079
the queue runner which dispatches

00:39:08,480 --> 00:39:13,599
everything the evaluator which

00:39:10,079 --> 00:39:15,680
periodically evaluates all of the

00:39:13,599 --> 00:39:16,800
expressions you tell you configure hydra

00:39:15,680 --> 00:39:18,400
to deal with

00:39:16,800 --> 00:39:20,960
and then a server which is actually the

00:39:18,400 --> 00:39:20,960
web front end

00:39:21,280 --> 00:39:25,359
once again i've never

00:39:26,320 --> 00:39:30,079
had an internet facing hydro server so

00:39:28,400 --> 00:39:31,760
who knows what kind of

00:39:30,079 --> 00:39:33,359
happens to it when you put in the

00:39:31,760 --> 00:39:37,440
internet

00:39:33,359 --> 00:39:40,079
so um then as far as this goes

00:39:37,440 --> 00:39:40,640
i believe the default is port 3000 i'm

00:39:40,079 --> 00:39:42,000
not sure

00:39:40,640 --> 00:39:44,160
that may have been somebody configured

00:39:42,000 --> 00:39:46,000
somewhere i can't remember um

00:39:44,160 --> 00:39:49,359
this is actually the easy part once you

00:39:46,000 --> 00:39:50,720
the hard part i had with hydra was

00:39:49,359 --> 00:39:52,079
getting all the dependencies and get it

00:39:50,720 --> 00:39:54,560
running and once it's running the web

00:39:52,079 --> 00:39:58,320
interface is actually really

00:39:54,560 --> 00:40:02,079
easy to use um just sending up inputs

00:39:58,320 --> 00:40:03,520
to a job set and uh

00:40:02,079 --> 00:40:06,560
pointing it at the derivation you want

00:40:03,520 --> 00:40:08,560
to run um

00:40:06,560 --> 00:40:10,800
it is worth noting it's worth backing up

00:40:08,560 --> 00:40:12,480
the hydra database quite often because

00:40:10,800 --> 00:40:15,839
in the application we use it for which

00:40:12,480 --> 00:40:18,400
i'll talk more about tomorrow

00:40:15,839 --> 00:40:20,480
i tend to use it for doing the reverse

00:40:18,400 --> 00:40:24,400
mapping of what derivations

00:40:20,480 --> 00:40:28,000
mapped back to what source sources

00:40:24,400 --> 00:40:30,319
which is something that i've i kind of

00:40:28,000 --> 00:40:31,599
missed a bit about nyx is being able to

00:40:30,319 --> 00:40:33,680
say oh i have this derivation in the

00:40:31,599 --> 00:40:35,119
store now how did i build that

00:40:33,680 --> 00:40:36,800
or what did i what sources did i build

00:40:35,119 --> 00:40:40,000
that from

00:40:36,800 --> 00:40:43,599
so um yeah that was kind of a

00:40:40,000 --> 00:40:53,839
quick uh whirlwind tour of the

00:40:43,599 --> 00:40:53,839
guts of setting up hydra

00:40:54,010 --> 00:40:57,269
[Applause]

00:40:58,319 --> 00:41:07,839
i would like to ask already

00:41:16,000 --> 00:41:20,880
anyone anyone um could you tell a bit

00:41:18,880 --> 00:41:21,359
more about that reverse mapping that

00:41:20,880 --> 00:41:23,440
sounds

00:41:21,359 --> 00:41:24,640
how do you actually do that sounds

00:41:23,440 --> 00:41:28,160
interesting okay

00:41:24,640 --> 00:41:30,880
so uh i have

00:41:28,160 --> 00:41:31,680
hydra set up to evaluate like every 60

00:41:30,880 --> 00:41:34,319
seconds

00:41:31,680 --> 00:41:35,680
because i don't really mind burning up a

00:41:34,319 --> 00:41:39,200
bit of computer resources

00:41:35,680 --> 00:41:40,319
so when hydra evaluates a branch

00:41:39,200 --> 00:41:42,400
and one of the inputs changes it'll

00:41:40,319 --> 00:41:45,440
reevaluate it so what happens is

00:41:42,400 --> 00:41:47,680
in the input tab of hydra

00:41:45,440 --> 00:41:48,720
it'll keep track of what revisions it

00:41:47,680 --> 00:41:50,560
used from what

00:41:48,720 --> 00:41:52,240
scm repository is to build the

00:41:50,560 --> 00:41:54,720
derivation so that

00:41:52,240 --> 00:41:55,760
that turns to the more useful features i

00:41:54,720 --> 00:41:57,520
use in hydra

00:41:55,760 --> 00:41:59,440
is being able to look at the big table

00:41:57,520 --> 00:42:02,400
of what job succeeded at what point

00:41:59,440 --> 00:42:03,599
find the green check marks in the mass

00:42:02,400 --> 00:42:07,040
there and find out

00:42:03,599 --> 00:42:09,359
what revisions that was and be able to

00:42:07,040 --> 00:42:11,359
track backwards from the derivations

00:42:09,359 --> 00:42:14,240
what changed in all the inputs

00:42:11,359 --> 00:42:15,440
this is since i find it very useful

00:42:14,240 --> 00:42:17,760
because

00:42:15,440 --> 00:42:19,040
my jobs can some takes time to take

00:42:17,760 --> 00:42:21,920
hundreds of hours so you have

00:42:19,040 --> 00:42:23,920
10 or 15 in the pipeline and the

00:42:21,920 --> 00:42:24,319
figuring out when stage 13 the pipeline

00:42:23,920 --> 00:42:26,319
failed

00:42:24,319 --> 00:42:27,839
what version that mapped back to and be

00:42:26,319 --> 00:42:31,200
able to figure out what you changed

00:42:27,839 --> 00:42:45,839
to break everything so that's

00:42:31,200 --> 00:42:45,839
how i use that

00:42:53,520 --> 00:42:59,440
okay so for the final talk for today um

00:42:57,359 --> 00:43:00,480
will be by bob long as you can already

00:42:59,440 --> 00:43:03,599
see on the slide

00:43:00,480 --> 00:43:13,119
and it's going to be about a haskell web

00:43:03,599 --> 00:43:15,920
framework as far as i know

00:43:13,119 --> 00:43:17,200
uh hey everyone uh my name is bob i'm

00:43:15,920 --> 00:43:19,119
from dublin ireland

00:43:17,200 --> 00:43:21,040
um and we were in berlin for a week or

00:43:19,119 --> 00:43:22,800
so um

00:43:21,040 --> 00:43:24,160
i just wanted to quickly talk about

00:43:22,800 --> 00:43:26,480
something that we've built at work

00:43:24,160 --> 00:43:28,880
using esod and we're building it with

00:43:26,480 --> 00:43:32,400
nix and deploying it with nyx

00:43:28,880 --> 00:43:34,400
um so i work at intercom what we do

00:43:32,400 --> 00:43:35,599
our kind of mission is to try and make

00:43:34,400 --> 00:43:37,359
web and mobile

00:43:35,599 --> 00:43:38,800
business a little bit more the

00:43:37,359 --> 00:43:40,000
communications involved a little bit

00:43:38,800 --> 00:43:41,920
more personal so if you've ever had a

00:43:40,000 --> 00:43:44,640
bad experience with a help desk

00:43:41,920 --> 00:43:45,920
which i tend to do multiple times a week

00:43:44,640 --> 00:43:47,440
we're trying to kind of solve that

00:43:45,920 --> 00:43:49,359
problem so we build a couple of products

00:43:47,440 --> 00:43:51,839
around customer communication but

00:43:49,359 --> 00:43:53,280
we also have a fairly good api and web

00:43:51,839 --> 00:43:54,079
hooks offering so you can build your own

00:43:53,280 --> 00:43:57,599
kind of software

00:43:54,079 --> 00:43:59,040
to do some of this stuff um one of those

00:43:57,599 --> 00:44:00,640
kind of things that we offer web hooks

00:43:59,040 --> 00:44:02,240
so

00:44:00,640 --> 00:44:03,920
when we built web hooks first we thought

00:44:02,240 --> 00:44:04,640
this was a cool feature and then a

00:44:03,920 --> 00:44:06,000
couple of months

00:44:04,640 --> 00:44:08,319
later we realized that people were

00:44:06,000 --> 00:44:10,079
building real businesses on it and

00:44:08,319 --> 00:44:11,680
we were not giving it the respect that

00:44:10,079 --> 00:44:14,000
it deserved

00:44:11,680 --> 00:44:15,680
you we we obviously tested and monitored

00:44:14,000 --> 00:44:17,280
every single part of our web book

00:44:15,680 --> 00:44:18,720
delivery pipeline but what we weren't

00:44:17,280 --> 00:44:20,880
doing was

00:44:18,720 --> 00:44:23,839
in an end-to-end way doing some sort of

00:44:20,880 --> 00:44:25,920
continuous quality assurance

00:44:23,839 --> 00:44:27,920
which is difficult to do because if you

00:44:25,920 --> 00:44:29,040
think about what web hooks are web posts

00:44:27,920 --> 00:44:31,040
are something that are fired

00:44:29,040 --> 00:44:32,480
sometimes seconds or more after they are

00:44:31,040 --> 00:44:35,119
triggered there's no

00:44:32,480 --> 00:44:37,119
request response model so this isn't

00:44:35,119 --> 00:44:38,000
like a typical web development testing

00:44:37,119 --> 00:44:40,800
task there's a

00:44:38,000 --> 00:44:42,319
there's an asynchronous nature there the

00:44:40,800 --> 00:44:44,319
other problem is that often you're

00:44:42,319 --> 00:44:46,079
investigating or want to investigate an

00:44:44,319 --> 00:44:48,000
issue on a production system

00:44:46,079 --> 00:44:49,440
but you're on your laptop on the bus or

00:44:48,000 --> 00:44:50,880
something but

00:44:49,440 --> 00:44:52,480
in order to receive web hooks you need

00:44:50,880 --> 00:44:52,960
to have a web server running and if it's

00:44:52,480 --> 00:44:55,359
on a

00:44:52,960 --> 00:44:57,040
if you're subscribing to a public uh

00:44:55,359 --> 00:45:01,280
production system then you need a public

00:44:57,040 --> 00:45:02,400
ip or dns to to subscribe to

00:45:01,280 --> 00:45:03,839
so we've been working on this tool

00:45:02,400 --> 00:45:06,720
called shell dock it's called shellduck

00:45:03,839 --> 00:45:08,640
because the team i'm on and intercom

00:45:06,720 --> 00:45:10,480
names all of our products after birds

00:45:08,640 --> 00:45:12,480
and we've been doing a lot of products

00:45:10,480 --> 00:45:16,560
so now the birds are getting weird

00:45:12,480 --> 00:45:18,800
but we're on shell look right now

00:45:16,560 --> 00:45:20,319
and this lets you write simple api

00:45:18,800 --> 00:45:22,480
request web hook

00:45:20,319 --> 00:45:25,280
expectations and then sheldrick just

00:45:22,480 --> 00:45:27,040
does all of the machinery behind it

00:45:25,280 --> 00:45:29,119
um so this is what it looks like each of

00:45:27,040 --> 00:45:31,119
these blocks is an event that

00:45:29,119 --> 00:45:32,240
shellduck has observed related to the

00:45:31,119 --> 00:45:34,079
box pipeline

00:45:32,240 --> 00:45:36,000
so if you're trying to investigate an

00:45:34,079 --> 00:45:37,760
issue this is where we go now and this

00:45:36,000 --> 00:45:40,079
this tells us what's up

00:45:37,760 --> 00:45:41,760
it's also got integrations with slack so

00:45:40,079 --> 00:45:44,400
it if you configure slack

00:45:41,760 --> 00:45:45,200
it will send notifications on test

00:45:44,400 --> 00:45:46,560
failures

00:45:45,200 --> 00:45:48,319
and your colleagues will know you're

00:45:46,560 --> 00:45:50,400
writing haskell because the f is in

00:45:48,319 --> 00:45:53,520
capital letters

00:45:50,400 --> 00:45:55,599
um it's also got keen io support so we

00:45:53,520 --> 00:45:57,280
do analytics based on failures

00:45:55,599 --> 00:45:59,359
and it just sprays all of this stuff

00:45:57,280 --> 00:46:00,720
into these different services

00:45:59,359 --> 00:46:02,560
so it's got a lot of concurrent

00:46:00,720 --> 00:46:05,760
components it's got a test runner

00:46:02,560 --> 00:46:07,839
a request engine is hitting the api it

00:46:05,760 --> 00:46:09,520
runs a separate web hook web server to

00:46:07,839 --> 00:46:11,680
receive those web hooks and then it runs

00:46:09,520 --> 00:46:13,359
an optional ssh tunnel so you can test

00:46:11,680 --> 00:46:15,280
this on the bus

00:46:13,359 --> 00:46:17,280
and it runs the esewed web server which

00:46:15,280 --> 00:46:20,640
you just saw

00:46:17,280 --> 00:46:22,400
uh you so it's cool if you like

00:46:20,640 --> 00:46:25,760
web development and you like haskell and

00:46:22,400 --> 00:46:28,160
you like dsls that's the venn diagram

00:46:25,760 --> 00:46:29,920
then uso it is for you in haskell we

00:46:28,160 --> 00:46:31,520
have the notion of quasi quotes well

00:46:29,920 --> 00:46:32,960
in ghc we have the notion of quasi

00:46:31,520 --> 00:46:36,000
quotes where we can kind of

00:46:32,960 --> 00:46:38,240
embed these dsls into haskell

00:46:36,000 --> 00:46:40,079
the sod itself is kind of i think they

00:46:38,240 --> 00:46:41,760
built it as kind of a traditional mvc

00:46:40,079 --> 00:46:42,640
framework with haskell's type system

00:46:41,760 --> 00:46:44,640
used

00:46:42,640 --> 00:46:45,680
to good effect it rules out a lot of the

00:46:44,640 --> 00:46:48,720
types of errors that

00:46:45,680 --> 00:46:50,960
web programs web programmers are pretty

00:46:48,720 --> 00:46:52,160
used to it's got a bit of a reputation

00:46:50,960 --> 00:46:53,920
of being difficult which i think is

00:46:52,160 --> 00:46:54,880
slightly unfounded if you look at the

00:46:53,920 --> 00:46:57,839
core

00:46:54,880 --> 00:47:00,400
simple eso web app is about 20 lines to

00:46:57,839 --> 00:47:02,720
get a hello world thing going

00:47:00,400 --> 00:47:03,839
but if you're if you want to do web

00:47:02,720 --> 00:47:05,119
development in haskell you should just

00:47:03,839 --> 00:47:06,319
pick a framework because if you don't

00:47:05,119 --> 00:47:08,000
like something

00:47:06,319 --> 00:47:09,440
generally things compose pretty well so

00:47:08,000 --> 00:47:11,359
you can just rip out parts

00:47:09,440 --> 00:47:12,720
and replace them with other parts so

00:47:11,359 --> 00:47:14,240
it's not a big decision you have to make

00:47:12,720 --> 00:47:16,720
which is nice you can't do that

00:47:14,240 --> 00:47:19,040
with rails and sinatra they don't

00:47:16,720 --> 00:47:21,119
compose at all

00:47:19,040 --> 00:47:22,640
so uh i feel a little bit embarrassed

00:47:21,119 --> 00:47:25,119
about the slide after listening to a day

00:47:22,640 --> 00:47:26,960
of cool stuff about nick's deployments

00:47:25,119 --> 00:47:28,960
but i thought i was really smart using

00:47:26,960 --> 00:47:30,800
nick's copyclosure to do this

00:47:28,960 --> 00:47:33,520
but my needs are pretty simple we just

00:47:30,800 --> 00:47:36,640
have a fixed ec2 instance

00:47:33,520 --> 00:47:39,280
and we use next copyclosure to send this

00:47:36,640 --> 00:47:40,160
closure over i will probably be doing

00:47:39,280 --> 00:47:42,800
next stop soon

00:47:40,160 --> 00:47:44,240
as a result uh intercom is pretty crazy

00:47:42,800 --> 00:47:45,760
about deployments if any of you've read

00:47:44,240 --> 00:47:46,960
any of our blog posts we do like 100

00:47:45,760 --> 00:47:50,000
deployments a day

00:47:46,960 --> 00:47:51,599
about without any down time

00:47:50,000 --> 00:47:53,520
and we've got a great ops team who care

00:47:51,599 --> 00:47:55,200
a lot about this stuff one advantage of

00:47:53,520 --> 00:47:57,599
next copy closure is that it's so

00:47:55,200 --> 00:47:59,440
kind of small it requires very little of

00:47:57,599 --> 00:48:01,599
an investment with a

00:47:59,440 --> 00:48:02,800
from your infrastructure team if you

00:48:01,599 --> 00:48:04,240
have one

00:48:02,800 --> 00:48:06,240
so if you're looking for a way to kind

00:48:04,240 --> 00:48:08,880
of sneak next in initially

00:48:06,240 --> 00:48:10,079
maybe this is a good approach as opposed

00:48:08,880 --> 00:48:13,359
to a full

00:48:10,079 --> 00:48:21,839
nexops thing so that's all i have

00:48:13,359 --> 00:48:21,839
thank you

00:48:23,119 --> 00:48:35,839
sorry sure

00:48:46,839 --> 00:48:49,839
oh

00:48:59,839 --> 00:49:02,880
uh so when you're doing these builds to

00:49:01,520 --> 00:49:04,880
do next copy closure

00:49:02,880 --> 00:49:05,920
is that do you have a pre-configured

00:49:04,880 --> 00:49:07,760
machine that knows

00:49:05,920 --> 00:49:09,280
about how to run nics or do you have all

00:49:07,760 --> 00:49:10,960
of your colleagues having to have them

00:49:09,280 --> 00:49:14,240
install next so they can do deployment

00:49:10,960 --> 00:49:16,720
yeah so uh the way we we

00:49:14,240 --> 00:49:17,599
do this is that we use virtual machines

00:49:16,720 --> 00:49:20,960
to develop

00:49:17,599 --> 00:49:23,599
it um and it's

00:49:20,960 --> 00:49:25,599
like a vanilla nyx os box that i think

00:49:23,599 --> 00:49:27,440
we install using vagrant or something

00:49:25,599 --> 00:49:30,000
because that's what everyone uses in

00:49:27,440 --> 00:49:33,359
work and so it's pretty easy to get

00:49:30,000 --> 00:49:34,720
up and running in about 20 minutes or so

00:49:33,359 --> 00:49:35,760
just by following a cell list of

00:49:34,720 --> 00:49:37,599
commands and then you can start

00:49:35,760 --> 00:49:39,200
deploying to our fixed instance

00:49:37,599 --> 00:49:45,839
okay so you have multiple people doing

00:49:39,200 --> 00:49:45,839
that yeah a couple

00:49:49,599 --> 00:49:55,680
uh are you using a servant oh no

00:49:52,720 --> 00:49:58,079
no no we're not we we so what's

00:49:55,680 --> 00:50:01,839
interesting about

00:49:58,079 --> 00:50:04,559
servant is uh kind of billed as a very

00:50:01,839 --> 00:50:06,000
type safe uh dsl and haskell for

00:50:04,559 --> 00:50:10,559
generating restful

00:50:06,000 --> 00:50:13,119
apis etc um yeah i just

00:50:10,559 --> 00:50:13,839
didn't pick it but it does run as i said

00:50:13,119 --> 00:50:15,920
two

00:50:13,839 --> 00:50:17,920
web servers one is and you sewed for the

00:50:15,920 --> 00:50:19,040
main ui and then another one is just for

00:50:17,920 --> 00:50:21,119
receiving

00:50:19,040 --> 00:50:22,800
uh web hooks so maybe that would be a

00:50:21,119 --> 00:50:27,359
good good pick there because we can swap

00:50:22,800 --> 00:50:41,359
that out pretty easily

00:50:27,359 --> 00:50:41,359

YouTube URL: https://www.youtube.com/watch?v=jtFQzQPvLHA


