Title: Oliver Charles: Nix in Production (NixCon 2015)
Publication date: 2020-10-29
Playlist: NixCon 2015 (Berlin)
Description: 
	
Captions: 
	00:00:05,040 --> 00:00:08,080
the

00:00:05,839 --> 00:00:09,760
next presenter is oliver charles who's

00:00:08,080 --> 00:00:12,400
been using nixos for

00:00:09,760 --> 00:00:14,320
approximately two years now he's a

00:00:12,400 --> 00:00:16,480
haskell software developer at

00:00:14,320 --> 00:00:18,400
circuit hub and he's going to share the

00:00:16,480 --> 00:00:18,960
insights he had working at that startup

00:00:18,400 --> 00:00:22,000
company

00:00:18,960 --> 00:00:22,960
using nick's in production i should

00:00:22,000 --> 00:00:25,439
mention that

00:00:22,960 --> 00:00:27,039
the most significant contribution of

00:00:25,439 --> 00:00:29,679
oliver to nyx source as far as i'm

00:00:27,039 --> 00:00:32,000
concerned is a series of blog posts

00:00:29,679 --> 00:00:34,000
in which he explained how he uses

00:00:32,000 --> 00:00:36,160
kabalto nix to register bills and nick's

00:00:34,000 --> 00:00:38,480
packages so that he could use them

00:00:36,160 --> 00:00:40,239
and i remember that it totally blew my

00:00:38,480 --> 00:00:45,840
mind to realize that you could actually

00:00:40,239 --> 00:00:45,840
document these things so that people

00:00:48,000 --> 00:00:52,320
so whenever you search for nix and

00:00:50,160 --> 00:00:53,680
haskell that's still by far the most

00:00:52,320 --> 00:00:57,520
popular

00:00:53,680 --> 00:01:00,399
google hitch so have fun

00:00:57,520 --> 00:01:02,239
cheers okay so i want to talk about how

00:01:00,399 --> 00:01:03,920
i've been using nicks in production and

00:01:02,239 --> 00:01:05,519
specifically how i've been using nick's

00:01:03,920 --> 00:01:06,799
in production at the startup that i've

00:01:05,519 --> 00:01:07,439
been working for for the last couple of

00:01:06,799 --> 00:01:09,840
years

00:01:07,439 --> 00:01:11,760
which is called finder and i remember

00:01:09,840 --> 00:01:13,600
when nyx conf was first announced and

00:01:11,760 --> 00:01:15,439
there was a call for contributions i was

00:01:13,600 --> 00:01:17,360
really excited about being able to give

00:01:15,439 --> 00:01:18,799
this talk because i thought oh finally i

00:01:17,360 --> 00:01:20,479
can kind of show the world that this is

00:01:18,799 --> 00:01:21,920
an operating system that's not just

00:01:20,479 --> 00:01:23,759
experimental and academic

00:01:21,920 --> 00:01:25,360
but it's really serious and ready for

00:01:23,759 --> 00:01:26,799
the real world

00:01:25,360 --> 00:01:28,240
but then only a couple of weeks ago when

00:01:26,799 --> 00:01:29,840
i was thinking about this i was like

00:01:28,240 --> 00:01:32,000
wait a minute i'm giving a talk at

00:01:29,840 --> 00:01:32,400
mixconf that kind of already proves that

00:01:32,000 --> 00:01:34,799
point

00:01:32,400 --> 00:01:36,240
um so that's probably better validation

00:01:34,799 --> 00:01:37,759
that this is a serious operating system

00:01:36,240 --> 00:01:39,200
than just my talk but

00:01:37,759 --> 00:01:41,040
maybe i contribute a little bit more

00:01:39,200 --> 00:01:44,079
kind of evidence that this is really

00:01:41,040 --> 00:01:45,360
ready for the real world so first yeah a

00:01:44,079 --> 00:01:47,280
little bit about me

00:01:45,360 --> 00:01:49,920
i'm o charles is probably how most

00:01:47,280 --> 00:01:52,079
people know me online or ollie in person

00:01:49,920 --> 00:01:53,280
and i'm a web or full-step programmer

00:01:52,079 --> 00:01:56,000
primarily

00:01:53,280 --> 00:01:57,840
currently specializing in haskell um so

00:01:56,000 --> 00:01:59,280
by full stack i mean like kind of do the

00:01:57,840 --> 00:02:01,520
boring html css

00:01:59,280 --> 00:02:02,320
javascript stuff like to do more stuff

00:02:01,520 --> 00:02:04,000
in the back end

00:02:02,320 --> 00:02:06,079
using haskell talking to post growth

00:02:04,000 --> 00:02:07,280
services and things like that

00:02:06,079 --> 00:02:08,399
but for all of the projects that i've

00:02:07,280 --> 00:02:10,239
been working on i've also had

00:02:08,399 --> 00:02:11,680
responsibilities for running servers and

00:02:10,239 --> 00:02:13,760
making sure that things are actually

00:02:11,680 --> 00:02:15,680
staying online so this is where my

00:02:13,760 --> 00:02:17,680
interest in nixos comes in because i

00:02:15,680 --> 00:02:19,200
have over time found that this is kind

00:02:17,680 --> 00:02:21,040
of the right way i want to be running my

00:02:19,200 --> 00:02:22,760
servers

00:02:21,040 --> 00:02:24,480
so i've been a nexus user since about

00:02:22,760 --> 00:02:26,319
00:02:24,480 --> 00:02:28,480
fairly low volume contributor to the

00:02:26,319 --> 00:02:30,959
project in terms of code i think about

00:02:28,480 --> 00:02:32,560
260 commits the last time i looked

00:02:30,959 --> 00:02:34,560
a large portion of those were all

00:02:32,560 --> 00:02:36,480
haskell packaging things but now peter

00:02:34,560 --> 00:02:39,599
has made me entirely redundant by just

00:02:36,480 --> 00:02:40,959
automating me away entirely but i still

00:02:39,599 --> 00:02:41,920
do a little bit of packaging on kind of

00:02:40,959 --> 00:02:43,440
modules and

00:02:41,920 --> 00:02:45,040
i'm like the maintainer for the postgres

00:02:43,440 --> 00:02:48,160
module and a couple of other

00:02:45,040 --> 00:02:49,599
small pieces and

00:02:48,160 --> 00:02:50,959
i absolutely love this quote a couple of

00:02:49,599 --> 00:02:51,360
people might have already seen it but i

00:02:50,959 --> 00:02:53,280
was

00:02:51,360 --> 00:02:54,879
initially very skeptical about the nixos

00:02:53,280 --> 00:02:56,640
project um so this

00:02:54,879 --> 00:02:58,560
is a comment i left on reddit probably

00:02:56,640 --> 00:03:01,280
back in 2012 or something when

00:02:58,560 --> 00:03:03,200
nix was posted to the haskell reddit and

00:03:01,280 --> 00:03:05,200
at this point i think i had maybe

00:03:03,200 --> 00:03:07,120
three maybe six months experience with

00:03:05,200 --> 00:03:08,239
haskell so i was a complete guru on all

00:03:07,120 --> 00:03:09,040
things about purely functional

00:03:08,239 --> 00:03:10,879
programming

00:03:09,040 --> 00:03:13,040
so i read like one sentence on the home

00:03:10,879 --> 00:03:14,720
page uh which said that nixos is this

00:03:13,040 --> 00:03:16,720
purely functional package manager and i

00:03:14,720 --> 00:03:18,000
was just like no that can't be true

00:03:16,720 --> 00:03:19,760
so jumped straight into the comment

00:03:18,000 --> 00:03:20,959
section i said well it's not purely

00:03:19,760 --> 00:03:22,319
functional otherwise it wouldn't

00:03:20,959 --> 00:03:23,599
actually do anything

00:03:22,319 --> 00:03:25,120
i don't think just because you treat

00:03:23,599 --> 00:03:26,080
your objects as immutable you can call

00:03:25,120 --> 00:03:28,159
yourself pure

00:03:26,080 --> 00:03:29,680
not in the sense of pure functions the

00:03:28,159 --> 00:03:31,360
package manager still has side effects

00:03:29,680 --> 00:03:33,200
it has to actually download and install

00:03:31,360 --> 00:03:35,280
things so you can be immutable but not

00:03:33,200 --> 00:03:36,879
pure and that's fine and a good thing

00:03:35,280 --> 00:03:39,280
but i don't think miss marketing is a

00:03:36,879 --> 00:03:40,480
great idea i actually think going

00:03:39,280 --> 00:03:42,000
straight to the comments section when

00:03:40,480 --> 00:03:44,319
you know nothing about a project is

00:03:42,000 --> 00:03:46,000
probably not a great idea

00:03:44,319 --> 00:03:47,519
and really i missed the point of mix i

00:03:46,000 --> 00:03:49,120
mean the point of nix is that by this

00:03:47,519 --> 00:03:50,799
idea that if the inputs don't change

00:03:49,120 --> 00:03:52,080
then the build result won't change

00:03:50,799 --> 00:03:54,000
of course it's going to do things that

00:03:52,080 --> 00:03:55,680
you do the evaluations but

00:03:54,000 --> 00:03:57,280
pure functional programs you know they

00:03:55,680 --> 00:03:58,720
heat up the cpu and we don't worry about

00:03:57,280 --> 00:04:00,640
things like that so

00:03:58,720 --> 00:04:02,159
i i did eventually come back to the

00:04:00,640 --> 00:04:03,760
project and gave it another chance and

00:04:02,159 --> 00:04:05,120
really read the kind of research papers

00:04:03,760 --> 00:04:06,720
around it and this is where things

00:04:05,120 --> 00:04:08,879
really started to click

00:04:06,720 --> 00:04:10,080
and it slowly began to appear on all of

00:04:08,879 --> 00:04:14,080
my devices and

00:04:10,080 --> 00:04:15,439
since 2013 i haven't looked back at all

00:04:14,080 --> 00:04:16,720
so the startup that i'm going to talk

00:04:15,439 --> 00:04:17,519
about is not the one i'm currently

00:04:16,720 --> 00:04:18,560
working for

00:04:17,519 --> 00:04:20,239
but it's the one that i have been

00:04:18,560 --> 00:04:22,479
working for for the last three years and

00:04:20,239 --> 00:04:24,160
that's a little startup called finder

00:04:22,479 --> 00:04:26,240
and to give you a bit of context there

00:04:24,160 --> 00:04:28,080
finder is an online booking system for

00:04:26,240 --> 00:04:30,400
classes and appointments

00:04:28,080 --> 00:04:32,000
um primarily we were focusing on the

00:04:30,400 --> 00:04:33,919
kind of wellness industry

00:04:32,000 --> 00:04:35,280
so this is really small businesses that

00:04:33,919 --> 00:04:36,960
are just one or two people running them

00:04:35,280 --> 00:04:39,120
that offer things like meditation or

00:04:36,960 --> 00:04:41,840
yoga classes and things like that

00:04:39,120 --> 00:04:42,479
and we offer this as a service model so

00:04:41,840 --> 00:04:45,040
very

00:04:42,479 --> 00:04:45,919
web 2.0 or whatever the current thing is

00:04:45,040 --> 00:04:47,360
now um

00:04:45,919 --> 00:04:48,639
but businesses should be able to sign up

00:04:47,360 --> 00:04:50,080
and be ready to take bookings and

00:04:48,639 --> 00:04:51,680
receive payments for their classes

00:04:50,080 --> 00:04:54,160
really within minutes

00:04:51,680 --> 00:04:56,000
um and we were kind of entering this to

00:04:54,160 --> 00:04:57,680
try and disrupt a market that previously

00:04:56,000 --> 00:04:59,600
only had very complicated or technical

00:04:57,680 --> 00:05:01,039
solutions so the existing booking

00:04:59,600 --> 00:05:02,639
systems are things that have been around

00:05:01,039 --> 00:05:04,800
for five maybe ten years

00:05:02,639 --> 00:05:06,240
they assume you've got a company with

00:05:04,800 --> 00:05:07,919
tens or maybe hundreds of different

00:05:06,240 --> 00:05:09,440
employees and they tend to be quite kind

00:05:07,919 --> 00:05:10,880
of archaic and technical so

00:05:09,440 --> 00:05:12,560
we wanted to say it was really simple

00:05:10,880 --> 00:05:13,600
and just let people have these ideas for

00:05:12,560 --> 00:05:16,639
running a business

00:05:13,600 --> 00:05:18,000
and to get their business online um and

00:05:16,639 --> 00:05:19,199
that comment there about being able to

00:05:18,000 --> 00:05:20,400
get online in minutes is

00:05:19,199 --> 00:05:22,639
actually something that we think we did

00:05:20,400 --> 00:05:24,160
manage to achieve um the last time we

00:05:22,639 --> 00:05:24,720
ran through setting up a kind of fake

00:05:24,160 --> 00:05:26,479
business

00:05:24,720 --> 00:05:28,080
you could get taking stripe payments in

00:05:26,479 --> 00:05:29,840
about four minutes

00:05:28,080 --> 00:05:31,360
and finder consists primarily of two

00:05:29,840 --> 00:05:33,199
main applications we've got what we call

00:05:31,360 --> 00:05:34,720
the widget which is what you would embed

00:05:33,199 --> 00:05:36,800
as a business on your web page and

00:05:34,720 --> 00:05:38,080
that's what allows customers to manage

00:05:36,800 --> 00:05:38,639
their schedule and make bookings with

00:05:38,080 --> 00:05:39,919
you

00:05:38,639 --> 00:05:41,520
and then there's an admin application as

00:05:39,919 --> 00:05:42,639
well which allows businesses to actually

00:05:41,520 --> 00:05:44,639
manage the schedule that they're

00:05:42,639 --> 00:05:46,479
offering their customers

00:05:44,639 --> 00:05:48,320
so this is what a customer would see

00:05:46,479 --> 00:05:49,520
this pops over your existing website you

00:05:48,320 --> 00:05:50,320
can see a list of all your upcoming

00:05:49,520 --> 00:05:51,600
classes

00:05:50,320 --> 00:05:53,840
all the upcoming classes that are on

00:05:51,600 --> 00:05:55,440
offer and you can book yourself in

00:05:53,840 --> 00:05:56,960
and as a business owner you get this

00:05:55,440 --> 00:05:58,880
kind of calendar view to manage your

00:05:56,960 --> 00:06:00,800
upcoming schedule and this kind of basic

00:05:58,880 --> 00:06:02,800
front desk screen that we call it to

00:06:00,800 --> 00:06:05,680
see who's coming to your classes and

00:06:02,800 --> 00:06:08,160
kind of deal with things over the phone

00:06:05,680 --> 00:06:09,840
from a technology perspective it's a

00:06:08,160 --> 00:06:11,199
fairly traditional stack i think

00:06:09,840 --> 00:06:13,120
both of the applications are written in

00:06:11,199 --> 00:06:15,120
closure script which compiles down to

00:06:13,120 --> 00:06:16,800
some static javascript files

00:06:15,120 --> 00:06:18,160
and then we're going to run that on some

00:06:16,800 --> 00:06:20,560
sort of http server

00:06:18,160 --> 00:06:22,880
we use nginx and these talk to

00:06:20,560 --> 00:06:25,120
haskell-powered api servers over https

00:06:22,880 --> 00:06:26,560
just basic rest and websockets

00:06:25,120 --> 00:06:28,160
and then all the data there is stored in

00:06:26,560 --> 00:06:29,680
postgres and readers so

00:06:28,160 --> 00:06:31,280
very traditional stack but to set the

00:06:29,680 --> 00:06:32,639
context of the kind of service

00:06:31,280 --> 00:06:33,600
administration that i was going to be

00:06:32,639 --> 00:06:34,639
needing to do

00:06:33,600 --> 00:06:36,639
that's that's basically what we're

00:06:34,639 --> 00:06:40,000
running there

00:06:36,639 --> 00:06:43,280
sorry oh well it would be a traditional

00:06:40,000 --> 00:06:45,120
haskell stack maybe if i guess as well

00:06:43,280 --> 00:06:47,120
um okay so let's dive in with some of

00:06:45,120 --> 00:06:48,400
the next step uh

00:06:47,120 --> 00:06:50,400
for my day-to-day work i actually need

00:06:48,400 --> 00:06:51,440
to write some code and and build things

00:06:50,400 --> 00:06:53,120
and add new features

00:06:51,440 --> 00:06:54,800
so i need to be able to enter some sort

00:06:53,120 --> 00:06:56,880
of development environment

00:06:54,800 --> 00:06:58,479
so i think a couple of years ago uh the

00:06:56,880 --> 00:07:00,479
next shell command was introduced which

00:06:58,479 --> 00:07:02,479
really kind of revolutionized my way of

00:07:00,479 --> 00:07:04,240
doing my kind of day-to-day development

00:07:02,479 --> 00:07:05,520
because nick shell allows us to spin up

00:07:04,240 --> 00:07:07,120
kind of per project development

00:07:05,520 --> 00:07:08,880
environments without covering

00:07:07,120 --> 00:07:10,880
our main kind of global or user

00:07:08,880 --> 00:07:12,800
environment

00:07:10,880 --> 00:07:14,160
so for the haskell side of things this

00:07:12,800 --> 00:07:15,680
is really straightforward these days

00:07:14,160 --> 00:07:17,199
because we've got the caval to nix tool

00:07:15,680 --> 00:07:18,240
which basically automates all of this

00:07:17,199 --> 00:07:19,599
process

00:07:18,240 --> 00:07:21,840
we use cavalier next to generate a

00:07:19,599 --> 00:07:24,080
default.nx expression which is basically

00:07:21,840 --> 00:07:26,960
a function that specifies how to build

00:07:24,080 --> 00:07:28,319
a certain project but you can't actually

00:07:26,960 --> 00:07:29,280
run functions you need to supply the

00:07:28,319 --> 00:07:32,160
function arguments

00:07:29,280 --> 00:07:34,000
to to do the main evaluation and that's

00:07:32,160 --> 00:07:35,039
what we use the shell.next expression

00:07:34,000 --> 00:07:37,039
for

00:07:35,039 --> 00:07:38,080
so shell.next for very simple projects

00:07:37,039 --> 00:07:39,759
is really just saying

00:07:38,080 --> 00:07:41,919
import all of mixed packages and run

00:07:39,759 --> 00:07:43,520
this default.next expression

00:07:41,919 --> 00:07:45,280
the slightly more complicated ones it

00:07:43,520 --> 00:07:46,879
says well you'll actually need these

00:07:45,280 --> 00:07:48,400
other projects to be built first

00:07:46,879 --> 00:07:49,840
so we override the haskell environment

00:07:48,400 --> 00:07:50,879
and specify those into project

00:07:49,840 --> 00:07:52,160
dependencies

00:07:50,879 --> 00:07:54,319
and a little bit later i'm going to show

00:07:52,160 --> 00:07:55,840
you what that actually looks like

00:07:54,319 --> 00:07:57,680
for closure script the story is not so

00:07:55,840 --> 00:07:59,120
good um closure script doesn't have

00:07:57,680 --> 00:08:01,440
great support in mixed packages

00:07:59,120 --> 00:08:03,199
and at the time i unfortunately couldn't

00:08:01,440 --> 00:08:04,560
put the time in to make it any better

00:08:03,199 --> 00:08:06,479
so we have handwritten expressions for

00:08:04,560 --> 00:08:08,000
closure script which do enough of the

00:08:06,479 --> 00:08:09,360
job but they don't do a great job of

00:08:08,000 --> 00:08:10,840
managing all of the kind of library

00:08:09,360 --> 00:08:12,479
dependencies that we use in

00:08:10,840 --> 00:08:14,000
closurescript

00:08:12,479 --> 00:08:15,440
in order to ensure that everyone uses

00:08:14,000 --> 00:08:17,440
the same versions of things we have our

00:08:15,440 --> 00:08:18,800
own uh fork of nyx packages

00:08:17,440 --> 00:08:20,400
so the nice thing about nick shell in

00:08:18,800 --> 00:08:20,960
general is the amount of control you get

00:08:20,400 --> 00:08:23,199
so

00:08:20,960 --> 00:08:25,680
languages like python have virtual m and

00:08:23,199 --> 00:08:27,599
cabal has covell sandboxes

00:08:25,680 --> 00:08:28,800
but these only give you a kind of subset

00:08:27,599 --> 00:08:30,639
of control over what your actual

00:08:28,800 --> 00:08:32,640
development environment is going to be

00:08:30,639 --> 00:08:34,479
using uh nix packages and nick shell

00:08:32,640 --> 00:08:36,000
we're able to control compiler versions

00:08:34,479 --> 00:08:37,680
specific patches are installed on

00:08:36,000 --> 00:08:39,039
compilers and stuff which we haven't

00:08:37,680 --> 00:08:40,159
needed to do but it's nice to have that

00:08:39,039 --> 00:08:41,919
level of granularity

00:08:40,159 --> 00:08:43,120
and know that all of my colleagues are

00:08:41,919 --> 00:08:44,560
going to have a consistent development

00:08:43,120 --> 00:08:45,920
environment

00:08:44,560 --> 00:08:47,839
but these shells only give you enough to

00:08:45,920 --> 00:08:49,600
do command line build so

00:08:47,839 --> 00:08:51,360
if you want to use emacs or you want to

00:08:49,600 --> 00:08:52,560
use vim that's really your choice and we

00:08:51,360 --> 00:08:53,519
don't impose that on any of our

00:08:52,560 --> 00:08:55,040
developers

00:08:53,519 --> 00:08:56,800
and we assume that they have some sort

00:08:55,040 --> 00:08:58,160
of text editor set up that suits their

00:08:56,800 --> 00:08:59,440
workflow

00:08:58,160 --> 00:09:01,200
and because these are build environments

00:08:59,440 --> 00:09:01,680
they're also not runnable environments

00:09:01,200 --> 00:09:03,279
so

00:09:01,680 --> 00:09:06,000
they don't mention the services that's

00:09:03,279 --> 00:09:07,760
needed to run these applications

00:09:06,000 --> 00:09:09,440
we did experiment for a bit of time

00:09:07,760 --> 00:09:10,160
using nexops and building virtual

00:09:09,440 --> 00:09:13,279
machines

00:09:10,160 --> 00:09:14,560
kind of for each project but i just find

00:09:13,279 --> 00:09:16,399
setting up virtual machines is a little

00:09:14,560 --> 00:09:17,120
bit too costly so we haven't done that

00:09:16,399 --> 00:09:18,399
so

00:09:17,120 --> 00:09:19,600
when it comes to actually having to run

00:09:18,399 --> 00:09:20,160
the stuff there's still a little bit of

00:09:19,600 --> 00:09:21,519
manual

00:09:20,160 --> 00:09:22,959
kind of communication and manual work

00:09:21,519 --> 00:09:24,240
that has to be done in order to make

00:09:22,959 --> 00:09:25,440
sure that these people are running the

00:09:24,240 --> 00:09:27,839
services that needs

00:09:25,440 --> 00:09:29,360
that these binaries need and i think

00:09:27,839 --> 00:09:30,560
there's probably some interesting future

00:09:29,360 --> 00:09:31,040
work that could be done around nick

00:09:30,560 --> 00:09:32,560
shell

00:09:31,040 --> 00:09:34,800
of actually spinning up containers as

00:09:32,560 --> 00:09:36,240
well and having services running

00:09:34,800 --> 00:09:38,399
but again i haven't had a chance to look

00:09:36,240 --> 00:09:41,040
at that just yet

00:09:38,399 --> 00:09:42,720
so these default linux expressions are

00:09:41,040 --> 00:09:43,440
specifications of how to actually build

00:09:42,720 --> 00:09:45,120
the software

00:09:43,440 --> 00:09:46,160
um so as i said they're automatically

00:09:45,120 --> 00:09:47,360
generated for haskell using

00:09:46,160 --> 00:09:49,760
compelltonics

00:09:47,360 --> 00:09:50,800
and we have them handwritten for script

00:09:49,760 --> 00:09:52,080
and these build expressions are

00:09:50,800 --> 00:09:53,600
important because as i'm going to show

00:09:52,080 --> 00:09:57,279
you in a moment we use hydra

00:09:53,600 --> 00:09:58,640
to actually do all of our builds for us

00:09:57,279 --> 00:10:00,080
so this is what i was talking about with

00:09:58,640 --> 00:10:01,120
the handwritten closure script and this

00:10:00,080 --> 00:10:02,880
is really

00:10:01,120 --> 00:10:04,800
a bit of a hack when it comes to the

00:10:02,880 --> 00:10:06,800
nice properties of nyx and the real hack

00:10:04,800 --> 00:10:08,959
here is this line and stool line

00:10:06,800 --> 00:10:11,440
which is actually going to connect to

00:10:08,959 --> 00:10:13,440
http servers and pull down jars

00:10:11,440 --> 00:10:14,959
at build time so i've given up some of

00:10:13,440 --> 00:10:16,640
the nice properties of mix and having

00:10:14,959 --> 00:10:18,399
really deterministic builds

00:10:16,640 --> 00:10:20,160
just that the kind of benefit that this

00:10:18,399 --> 00:10:21,760
is a really easy way to get

00:10:20,160 --> 00:10:23,839
the majority of what i want out of the

00:10:21,760 --> 00:10:25,440
build system and i have a feeling that

00:10:23,839 --> 00:10:26,640
jars are kind of meant to be immutable

00:10:25,440 --> 00:10:29,519
anyway if you have a new version you

00:10:26,640 --> 00:10:29,519
release a new version

00:10:30,839 --> 00:10:35,440
question

00:10:33,519 --> 00:10:37,440
yeah so so lion still knows how to do

00:10:35,440 --> 00:10:39,120
the defensive resolution itself as well

00:10:37,440 --> 00:10:40,800
the downside here is that because yeah

00:10:39,120 --> 00:10:41,760
it's pulling every single jar down every

00:10:40,800 --> 00:10:43,279
time we do a build

00:10:41,760 --> 00:10:44,959
this adds about a minute and a half to

00:10:43,279 --> 00:10:46,399
our build process

00:10:44,959 --> 00:10:47,920
but i think that minute and a half is

00:10:46,399 --> 00:10:49,200
still probably adding up to less time

00:10:47,920 --> 00:10:52,240
than it would be for me to actually

00:10:49,200 --> 00:10:53,440
package closer script properly so

00:10:52,240 --> 00:10:54,800
but a nice thing that we can do in the

00:10:53,440 --> 00:10:56,000
build expressions as well as you can see

00:10:54,800 --> 00:10:57,600
at the top we've got some kind of

00:10:56,000 --> 00:10:58,959
standard binary

00:10:57,600 --> 00:11:01,120
binaries that are required to do the

00:10:58,959 --> 00:11:02,160
build but we can also parameterize our

00:11:01,120 --> 00:11:05,360
builds over

00:11:02,160 --> 00:11:06,880
just basic um literals so here i've got

00:11:05,360 --> 00:11:07,760
a literal for widget host and widget

00:11:06,880 --> 00:11:09,839
tracking code

00:11:07,760 --> 00:11:11,519
widget host is the absolute url where

00:11:09,839 --> 00:11:13,040
this service will be running

00:11:11,519 --> 00:11:15,040
and widget tracking code is i think

00:11:13,040 --> 00:11:16,160
google analytics and the reason we're

00:11:15,040 --> 00:11:17,680
doing this is because

00:11:16,160 --> 00:11:19,040
these are javascript applications that

00:11:17,680 --> 00:11:20,160
are going to be going to be running on a

00:11:19,040 --> 00:11:21,760
client's browser

00:11:20,160 --> 00:11:23,519
and javascript is kind of tricky to

00:11:21,760 --> 00:11:25,839
actually do configuration with because

00:11:23,519 --> 00:11:27,600
you don't have configuration files we

00:11:25,839 --> 00:11:28,079
could probably generate an extra

00:11:27,600 --> 00:11:29,600
javascript

00:11:28,079 --> 00:11:31,120
file and kind of require it at runtime

00:11:29,600 --> 00:11:32,160
but i find it a lot easier to just

00:11:31,120 --> 00:11:33,920
generate this by

00:11:32,160 --> 00:11:36,079
compiling it directly into the source

00:11:33,920 --> 00:11:37,440
code as constants

00:11:36,079 --> 00:11:39,680
and the way this works is i can

00:11:37,440 --> 00:11:40,079
re-export these function parameters at

00:11:39,680 --> 00:11:42,880
the top

00:11:40,079 --> 00:11:44,399
down here and that gets re-exported as

00:11:42,880 --> 00:11:45,200
environment variables which are

00:11:44,399 --> 00:11:47,519
available for

00:11:45,200 --> 00:11:48,959
line install so when line install runs

00:11:47,519 --> 00:11:50,560
it looks at these environment variables

00:11:48,959 --> 00:11:51,680
and basically interpolates that into the

00:11:50,560 --> 00:11:53,839
source code

00:11:51,680 --> 00:11:55,519
at build time and again if any of these

00:11:53,839 --> 00:11:57,360
change then the build result will change

00:11:55,519 --> 00:12:00,720
so we have some deterministic builds

00:11:57,360 --> 00:12:01,920
there so to actually perform these

00:12:00,720 --> 00:12:03,920
builds as i mentioned

00:12:01,920 --> 00:12:05,200
uh we're using hydra and if you're not

00:12:03,920 --> 00:12:06,639
familiar with hydra

00:12:05,200 --> 00:12:09,360
although you may have seen it already

00:12:06,639 --> 00:12:11,279
today it's a continuous build system

00:12:09,360 --> 00:12:12,639
that's geared specifically towards

00:12:11,279 --> 00:12:14,399
working with nicks

00:12:12,639 --> 00:12:15,920
so all of the configuration in hydra is

00:12:14,399 --> 00:12:18,240
done with nyx expressions

00:12:15,920 --> 00:12:19,360
and it knows how to use these default.nx

00:12:18,240 --> 00:12:21,839
expressions that i've

00:12:19,360 --> 00:12:23,760
already written in order to do builds

00:12:21,839 --> 00:12:24,000
our hydra instance is configured to pull

00:12:23,760 --> 00:12:26,160
from

00:12:24,000 --> 00:12:28,000
the private github repositories and we

00:12:26,160 --> 00:12:28,880
have this single release.next expression

00:12:28,000 --> 00:12:30,639
which is

00:12:28,880 --> 00:12:32,639
basically defining how all of the

00:12:30,639 --> 00:12:34,399
projects will be built

00:12:32,639 --> 00:12:35,920
and this is what our release dot next

00:12:34,399 --> 00:12:37,440
expression looks like so

00:12:35,920 --> 00:12:38,959
it's a function itself we've got it

00:12:37,440 --> 00:12:40,880
parameterized over a couple of things

00:12:38,959 --> 00:12:42,720
that have to be specified at the top

00:12:40,880 --> 00:12:44,399
and then here some kind of optional

00:12:42,720 --> 00:12:46,320
parameters that you can put in and again

00:12:44,399 --> 00:12:47,680
these are the google analytics codes

00:12:46,320 --> 00:12:50,480
and things like that that get passed

00:12:47,680 --> 00:12:52,800
into the closure script builds

00:12:50,480 --> 00:12:54,320
we also override the set of haskell

00:12:52,800 --> 00:12:56,720
packages with our own

00:12:54,320 --> 00:12:58,320
um kind of proprietary haskell packages

00:12:56,720 --> 00:12:59,839
and also some other haskell packages

00:12:58,320 --> 00:13:01,519
that we've had to fork

00:12:59,839 --> 00:13:03,680
in order to just kind of apply our own

00:13:01,519 --> 00:13:05,760
custom patches too

00:13:03,680 --> 00:13:07,200
and this is using the the kind of latest

00:13:05,760 --> 00:13:08,399
version of haskell packaging and here

00:13:07,200 --> 00:13:09,920
you can see the

00:13:08,399 --> 00:13:11,760
rather insane amount of customization

00:13:09,920 --> 00:13:13,839
you can do um

00:13:11,760 --> 00:13:15,760
so metronome is our api server and

00:13:13,839 --> 00:13:17,519
finder and finder extras are our own

00:13:15,760 --> 00:13:20,399
projects and then there's things like

00:13:17,519 --> 00:13:22,560
jwt and monad are new which are forks of

00:13:20,399 --> 00:13:24,160
other people's work

00:13:22,560 --> 00:13:25,680
the body of the release.nyx expression

00:13:24,160 --> 00:13:27,440
is just an attribute set

00:13:25,680 --> 00:13:29,200
where every attribute is basically a

00:13:27,440 --> 00:13:31,040
thing that needs to be built

00:13:29,200 --> 00:13:32,480
so being good haskell programmers we of

00:13:31,040 --> 00:13:34,000
course wrote unit tests and then

00:13:32,480 --> 00:13:36,480
immediately disabled them because

00:13:34,000 --> 00:13:37,680
we have types so why do we need tests

00:13:36,480 --> 00:13:39,360
although we'll actually see that we do

00:13:37,680 --> 00:13:41,519
have acceptance tests later um

00:13:39,360 --> 00:13:43,040
so the reasons that these are turned off

00:13:41,519 --> 00:13:44,800
are unfortunately

00:13:43,040 --> 00:13:46,399
our unit tests seem to crash on our

00:13:44,800 --> 00:13:48,240
hydra instance

00:13:46,399 --> 00:13:49,760
not because of our code crashing because

00:13:48,240 --> 00:13:51,760
of a ghc runtime bug

00:13:49,760 --> 00:13:52,959
so um but we do have exceptional tests

00:13:51,760 --> 00:13:54,399
anyway um

00:13:52,959 --> 00:13:55,680
so these are the main things that we're

00:13:54,399 --> 00:13:57,040
going to be building here's the front

00:13:55,680 --> 00:13:58,079
end which is the closurescript

00:13:57,040 --> 00:13:59,360
application

00:13:58,079 --> 00:14:00,720
and you can see this inherit is

00:13:59,360 --> 00:14:01,839
basically just passing all of those

00:14:00,720 --> 00:14:04,000
function parameters

00:14:01,839 --> 00:14:05,279
down into the build and these are all

00:14:04,000 --> 00:14:06,160
coming from our overridden set of

00:14:05,279 --> 00:14:08,480
haskell packages

00:14:06,160 --> 00:14:10,399
just saying metronome is the metronome

00:14:08,480 --> 00:14:12,240
haskell package and finder is the finder

00:14:10,399 --> 00:14:14,000
haskell package and so on

00:14:12,240 --> 00:14:15,440
we also generate a channel and i'm going

00:14:14,000 --> 00:14:16,959
to talk about this a bit later

00:14:15,440 --> 00:14:18,639
and then there's also some stuff down

00:14:16,959 --> 00:14:19,279
here which are about running acceptance

00:14:18,639 --> 00:14:22,480
stuff which

00:14:19,279 --> 00:14:24,399
i'm also going to come back to later

00:14:22,480 --> 00:14:26,240
so hydra that file because it's a

00:14:24,399 --> 00:14:27,519
function is basically a kind of template

00:14:26,240 --> 00:14:29,920
for our builds and then we can

00:14:27,519 --> 00:14:31,760
instantiate this build template

00:14:29,920 --> 00:14:33,120
in hydra and specify what the actual

00:14:31,760 --> 00:14:34,000
values of these functions are going to

00:14:33,120 --> 00:14:35,839
be

00:14:34,000 --> 00:14:37,120
so that's probably a little small to see

00:14:35,839 --> 00:14:38,639
but you can basically

00:14:37,120 --> 00:14:40,320
what's going on here is there's a large

00:14:38,639 --> 00:14:41,040
amount of git checkouts which are going

00:14:40,320 --> 00:14:44,240
to provide

00:14:41,040 --> 00:14:47,519
those so if we go back over here

00:14:44,240 --> 00:14:48,639
you can see that all of these paths are

00:14:47,519 --> 00:14:50,240
in

00:14:48,639 --> 00:14:52,079
angle brackets and that means that they

00:14:50,240 --> 00:14:53,120
have to be available on the nix include

00:14:52,079 --> 00:14:55,600
path

00:14:53,120 --> 00:14:57,199
and by using git checkouts in hydra it

00:14:55,600 --> 00:14:58,880
basically puts those on the include path

00:14:57,199 --> 00:15:00,160
so you can refer to them

00:14:58,880 --> 00:15:02,079
but we've also got a couple of string

00:15:00,160 --> 00:15:04,160
values here which allows me to put in

00:15:02,079 --> 00:15:05,839
the api keys for each of the builds

00:15:04,160 --> 00:15:07,120
and then we instantiate this once for

00:15:05,839 --> 00:15:08,639
our production environment and we use

00:15:07,120 --> 00:15:10,079
all of our production keys

00:15:08,639 --> 00:15:11,680
and then we also instantiate it for a

00:15:10,079 --> 00:15:13,760
staging environment where we can put in

00:15:11,680 --> 00:15:15,199
you know the staging keys so we avoid

00:15:13,760 --> 00:15:18,160
using our actual production strive

00:15:15,199 --> 00:15:18,160
instance for example

00:15:18,399 --> 00:15:21,920
okay so onwards with the servers so

00:15:20,480 --> 00:15:23,440
finder has the benefit of being a pretty

00:15:21,920 --> 00:15:24,880
new project and also having a really

00:15:23,440 --> 00:15:26,399
small user base so

00:15:24,880 --> 00:15:28,320
we don't really require many servers at

00:15:26,399 --> 00:15:30,000
all in fact we're actually running on a

00:15:28,320 --> 00:15:32,320
single four gig line node server for

00:15:30,000 --> 00:15:34,240
production and we've got another

00:15:32,320 --> 00:15:35,600
almost exactly the same instance for a

00:15:34,240 --> 00:15:37,040
production failover

00:15:35,600 --> 00:15:38,800
and then we have one more server which

00:15:37,040 --> 00:15:40,160
is our staging server

00:15:38,800 --> 00:15:42,320
so all these servers are of course

00:15:40,160 --> 00:15:45,920
running nixos and we do all of the

00:15:42,320 --> 00:15:47,360
deployment management there with nixops

00:15:45,920 --> 00:15:49,120
in order to configure these servers

00:15:47,360 --> 00:15:50,880
because we're using nixops we basically

00:15:49,120 --> 00:15:52,959
get all the nice properties of the nixos

00:15:50,880 --> 00:15:54,800
declarative configuration files

00:15:52,959 --> 00:15:56,560
and we've embraced the module pattern

00:15:54,800 --> 00:15:58,399
that's used inside nixos

00:15:56,560 --> 00:16:00,160
so inside nexus you have modules which

00:15:58,399 --> 00:16:01,120
encapsulate kind of logical units of

00:16:00,160 --> 00:16:03,199
functionality

00:16:01,120 --> 00:16:04,480
such as postgres or readers and things

00:16:03,199 --> 00:16:06,079
like that

00:16:04,480 --> 00:16:08,079
we have our own service modules for

00:16:06,079 --> 00:16:09,519
running things such as metronome which

00:16:08,079 --> 00:16:11,199
is the api server

00:16:09,519 --> 00:16:13,279
and the widget and the admin web

00:16:11,199 --> 00:16:15,199
applications which are

00:16:13,279 --> 00:16:16,720
they actually uh kind of enable the

00:16:15,199 --> 00:16:18,639
nginx module and then

00:16:16,720 --> 00:16:21,040
specify what the actual different routes

00:16:18,639 --> 00:16:22,639
inside engine x would map to

00:16:21,040 --> 00:16:24,639
and we're using the option system here

00:16:22,639 --> 00:16:26,560
to provide api keys for things where we

00:16:24,639 --> 00:16:28,480
can generate configuration files so

00:16:26,560 --> 00:16:30,240
that's mainly the api server which is

00:16:28,480 --> 00:16:32,800
our haskell application

00:16:30,240 --> 00:16:34,399
uh we use the options system to generate

00:16:32,800 --> 00:16:35,920
to provide the api keys for that and

00:16:34,399 --> 00:16:38,240
then generate configuration files that

00:16:35,920 --> 00:16:39,839
those servers are going to run against

00:16:38,240 --> 00:16:41,600
we also have some modules that are

00:16:39,839 --> 00:16:43,040
basically pre-configured services so

00:16:41,600 --> 00:16:44,480
there's nginx with

00:16:43,040 --> 00:16:46,880
some kind of common options such as

00:16:44,480 --> 00:16:48,639
enabling ssl and things like that

00:16:46,880 --> 00:16:50,399
postgres by default i think is

00:16:48,639 --> 00:16:52,959
configured to run on machines with

00:16:50,399 --> 00:16:54,639
32 megabytes of ram we have a little bit

00:16:52,959 --> 00:16:56,320
more than 32 megabytes so of course we

00:16:54,639 --> 00:16:57,600
have a module there which

00:16:56,320 --> 00:16:59,759
takes full advantage of the fact that

00:16:57,600 --> 00:17:00,560
we've got four gigs of ram and radius

00:16:59,759 --> 00:17:02,720
and postfix and

00:17:00,560 --> 00:17:05,039
and so on and there's also these general

00:17:02,720 --> 00:17:06,640
configuration modules the main one there

00:17:05,039 --> 00:17:08,480
is some essential kernel parameters that

00:17:06,640 --> 00:17:11,039
you need in order to run online ode

00:17:08,480 --> 00:17:12,240
uh linode runs using kvm so you have to

00:17:11,039 --> 00:17:13,600
enable a couple of different modules

00:17:12,240 --> 00:17:15,439
just to make sure that the machine

00:17:13,600 --> 00:17:16,559
actually boots and because we've got a

00:17:15,439 --> 00:17:18,400
couple of these machines i don't want to

00:17:16,559 --> 00:17:19,039
repeat myself so we abstract that out

00:17:18,400 --> 00:17:22,079
into

00:17:19,039 --> 00:17:24,559
a module and the nice thing here is that

00:17:22,079 --> 00:17:25,919
our actual individual machines just come

00:17:24,559 --> 00:17:27,439
out really simply as kind of a

00:17:25,919 --> 00:17:29,679
composition of all of these modules so

00:17:27,439 --> 00:17:30,240
this is just a snippet of our staging

00:17:29,679 --> 00:17:31,840
server

00:17:30,240 --> 00:17:34,000
i specify the ip address where this

00:17:31,840 --> 00:17:35,520
machine uh is already running

00:17:34,000 --> 00:17:37,360
i give it a host name which is just

00:17:35,520 --> 00:17:38,559
useful for when i'm ssh den and i need

00:17:37,360 --> 00:17:40,320
to know where i am

00:17:38,559 --> 00:17:42,000
and then the bulk of the the definition

00:17:40,320 --> 00:17:42,559
is just importing all of these different

00:17:42,000 --> 00:17:44,640
modules

00:17:42,559 --> 00:17:46,000
um so there's api checks api server and

00:17:44,640 --> 00:17:48,320
so on there's plenty of these

00:17:46,000 --> 00:17:49,840
in the actual config and then the rest

00:17:48,320 --> 00:17:51,840
of the file is just specifying these

00:17:49,840 --> 00:17:53,600
essential configuration options so

00:17:51,840 --> 00:17:55,760
the secret and public key for stripe for

00:17:53,600 --> 00:17:58,559
example and various other bits of

00:17:55,760 --> 00:18:00,960
configuration there

00:17:58,559 --> 00:18:02,640
in terms of managing services uh so i

00:18:00,960 --> 00:18:04,640
said find a love system d

00:18:02,640 --> 00:18:06,160
i guess it's really me that love systemd

00:18:04,640 --> 00:18:07,600
but i'm responsible for all of this so

00:18:06,160 --> 00:18:09,840
i'm gonna say find a love systemd as

00:18:07,600 --> 00:18:11,760
well uh and we make extensive use of

00:18:09,840 --> 00:18:14,400
systemd throughout uh all of this

00:18:11,760 --> 00:18:15,600
because nixos gives us a really nice and

00:18:14,400 --> 00:18:17,360
easy way to spin up

00:18:15,600 --> 00:18:19,919
kind of new systemd services you just

00:18:17,360 --> 00:18:20,640
say systemd.services.whatever you want

00:18:19,919 --> 00:18:22,480
to call it

00:18:20,640 --> 00:18:24,799
and then you can specify the systemd

00:18:22,480 --> 00:18:26,960
configuration right there

00:18:24,799 --> 00:18:28,080
so we're obviously using systemd to run

00:18:26,960 --> 00:18:30,080
things like the api

00:18:28,080 --> 00:18:31,360
server which have to be running 24 7.

00:18:30,080 --> 00:18:32,880
but we also use systemd

00:18:31,360 --> 00:18:35,200
in what i think is a fairly interesting

00:18:32,880 --> 00:18:36,559
way to encapsulate this idea of state as

00:18:35,200 --> 00:18:38,559
a service

00:18:36,559 --> 00:18:40,000
so the idea here is the api server

00:18:38,559 --> 00:18:41,679
obviously depends on postgres because

00:18:40,000 --> 00:18:44,240
that's where the data is stored

00:18:41,679 --> 00:18:46,240
but it also depends on that postgres

00:18:44,240 --> 00:18:48,080
database having a certain schema

00:18:46,240 --> 00:18:50,320
and what we do is we have a migration

00:18:48,080 --> 00:18:52,559
binary that's encapsulated as

00:18:50,320 --> 00:18:53,840
a systemd service that the api server

00:18:52,559 --> 00:18:55,760
also depends on

00:18:53,840 --> 00:18:57,600
this means when i start the api server

00:18:55,760 --> 00:18:59,200
systemd is first going to basically

00:18:57,600 --> 00:19:00,799
check that my database schema

00:18:59,200 --> 00:19:02,720
corresponds to exactly what the binary

00:19:00,799 --> 00:19:04,720
is expecting performs the migration if

00:19:02,720 --> 00:19:06,640
necessary and then the api server starts

00:19:04,720 --> 00:19:08,400
up

00:19:06,640 --> 00:19:11,039
and the really nice property here is i

00:19:08,400 --> 00:19:12,400
mean when you do an exos deployment what

00:19:11,039 --> 00:19:14,080
essentially happens is you copy a bunch

00:19:12,400 --> 00:19:15,520
of binaries over and restart the

00:19:14,080 --> 00:19:16,880
services that you need to in order to

00:19:15,520 --> 00:19:18,720
bring that system up to date

00:19:16,880 --> 00:19:20,480
so we've managed to encapsulate schema

00:19:18,720 --> 00:19:22,160
migrations as part of an exhaust

00:19:20,480 --> 00:19:23,600
deployment process without really having

00:19:22,160 --> 00:19:25,760
to do anything particularly hard

00:19:23,600 --> 00:19:26,880
i just specify the services and specify

00:19:25,760 --> 00:19:28,880
the dependencies

00:19:26,880 --> 00:19:30,960
and let systemd take care of ordering

00:19:28,880 --> 00:19:32,480
those things appropriately

00:19:30,960 --> 00:19:33,760
i think there's also some future work

00:19:32,480 --> 00:19:35,600
that could be done here to take even

00:19:33,760 --> 00:19:37,679
more advantage of systemd which is

00:19:35,600 --> 00:19:38,640
in particular socket activation so

00:19:37,679 --> 00:19:41,120
systemd has

00:19:38,640 --> 00:19:42,960
the ability to create unix sockets

00:19:41,120 --> 00:19:44,799
before a service is even running

00:19:42,960 --> 00:19:46,320
it start accepting connections on that

00:19:44,799 --> 00:19:48,799
socket or tcp socket

00:19:46,320 --> 00:19:49,600
and then hand that over to any service

00:19:48,799 --> 00:19:52,720
that requires it

00:19:49,600 --> 00:19:54,799
in order to basically speed up the

00:19:52,720 --> 00:19:56,559
uh the boot process but i think you

00:19:54,799 --> 00:19:58,320
could also abuse that by doing zero turn

00:19:56,559 --> 00:19:59,440
time deployments by having the socket

00:19:58,320 --> 00:20:02,080
buffer connections

00:19:59,440 --> 00:20:03,760
while we restarted the api server um so

00:20:02,080 --> 00:20:05,039
this is future work a restart at the

00:20:03,760 --> 00:20:07,039
moment and a redeployment

00:20:05,039 --> 00:20:08,960
results in about 500 milliseconds of

00:20:07,039 --> 00:20:11,280
downtime and given the

00:20:08,960 --> 00:20:12,400
the kind of load we have i'm willing to

00:20:11,280 --> 00:20:14,640
live with that for now

00:20:12,400 --> 00:20:17,120
um but i really would like to look into

00:20:14,640 --> 00:20:19,039
this at some point

00:20:17,120 --> 00:20:20,559
and so before i look at the actual final

00:20:19,039 --> 00:20:21,440
kind of deployment process

00:20:20,559 --> 00:20:23,919
i wanted to come back to those

00:20:21,440 --> 00:20:25,600
acceptance tests so we have these

00:20:23,919 --> 00:20:26,720
modules that specify how all of our

00:20:25,600 --> 00:20:28,240
services are running

00:20:26,720 --> 00:20:30,400
and we can actually use these modules

00:20:28,240 --> 00:20:32,240
now to spin up uh one-off

00:20:30,400 --> 00:20:34,159
virtual machines which are going to run

00:20:32,240 --> 00:20:35,679
our acceptance tests

00:20:34,159 --> 00:20:37,520
so the reason i use virtual machines

00:20:35,679 --> 00:20:39,760
here is because acceptance tests

00:20:37,520 --> 00:20:40,960
um as a principal you you want to mimic

00:20:39,760 --> 00:20:42,559
your production environment as much as

00:20:40,960 --> 00:20:43,679
possible which means having postgres

00:20:42,559 --> 00:20:45,280
running on a certain port

00:20:43,679 --> 00:20:46,880
nginx running on another certain port

00:20:45,280 --> 00:20:48,080
and so on and if you're trying to run

00:20:46,880 --> 00:20:49,760
these in parallel

00:20:48,080 --> 00:20:51,200
ports start to clash and you have to do

00:20:49,760 --> 00:20:52,640
a lot of resource management it becomes

00:20:51,200 --> 00:20:54,559
very tedious

00:20:52,640 --> 00:20:56,400
but virtual machines basically solve all

00:20:54,559 --> 00:20:57,200
of those problems by ice giving you that

00:20:56,400 --> 00:21:00,640
isolation

00:20:57,200 --> 00:21:01,840
right up front so we have well i think

00:21:00,640 --> 00:21:03,039
it's very easier if i jump over to the

00:21:01,840 --> 00:21:03,679
code at this point to show you what that

00:21:03,039 --> 00:21:05,360
looks like

00:21:03,679 --> 00:21:06,720
we have two different jobs and one of

00:21:05,360 --> 00:21:10,000
them is to build

00:21:06,720 --> 00:21:11,760
a virtualbox disk image and

00:21:10,000 --> 00:21:13,200
again i don't really have to do anything

00:21:11,760 --> 00:21:14,480
particularly fancy here because this is

00:21:13,200 --> 00:21:17,280
something that's built into

00:21:14,480 --> 00:21:17,919
nixos as a module already so what i do

00:21:17,280 --> 00:21:19,520
is i call

00:21:17,919 --> 00:21:20,960
eval config which is a function that

00:21:19,520 --> 00:21:22,799
comes in mixed packages

00:21:20,960 --> 00:21:25,200
and this is the same function that's

00:21:22,799 --> 00:21:27,039
used to run nixos rebuild

00:21:25,200 --> 00:21:29,120
i specify all of these modules that i

00:21:27,039 --> 00:21:30,480
need to be present in the systems

00:21:29,120 --> 00:21:31,679
configuration

00:21:30,480 --> 00:21:33,919
one important one here is this

00:21:31,679 --> 00:21:35,760
virtualbox image module

00:21:33,919 --> 00:21:37,120
i also need x11 running because i'm

00:21:35,760 --> 00:21:39,039
going to be running firefox to run

00:21:37,120 --> 00:21:40,400
selenium browser tests

00:21:39,039 --> 00:21:41,679
and then these are those modules that

00:21:40,400 --> 00:21:43,039
i've talked about before that do things

00:21:41,679 --> 00:21:44,640
such as make sure the database is

00:21:43,039 --> 00:21:45,760
running and make sure my api server is

00:21:44,640 --> 00:21:48,080
running

00:21:45,760 --> 00:21:50,159
and then the rest of this is just a

00:21:48,080 --> 00:21:52,480
normal nexus configuration file

00:21:50,159 --> 00:21:54,640
so i've configured this slightly weirdly

00:21:52,480 --> 00:21:55,600
to redirect the api host to localhost

00:21:54,640 --> 00:21:58,480
because i'm just going to be

00:21:55,600 --> 00:21:59,520
doing all my testing on one machine i

00:21:58,480 --> 00:22:01,679
run

00:21:59,520 --> 00:22:03,600
some various services so i run finder i

00:22:01,679 --> 00:22:05,200
run metronome the api server

00:22:03,600 --> 00:22:07,039
there's a bit of nginx configuration

00:22:05,200 --> 00:22:08,159
noise here

00:22:07,039 --> 00:22:09,440
and then there's a little bit of kind of

00:22:08,159 --> 00:22:10,799
essential stuff at the bottom that's

00:22:09,440 --> 00:22:12,320
just specific for the fact that i'm

00:22:10,799 --> 00:22:13,520
running on a virtual machine which is to

00:22:12,320 --> 00:22:15,440
redirect the console

00:22:13,520 --> 00:22:16,559
redirect systemd's journal to the

00:22:15,440 --> 00:22:17,760
console

00:22:16,559 --> 00:22:20,480
and actually make sure this thing can

00:22:17,760 --> 00:22:21,520
boot and i also run the selenium server

00:22:20,480 --> 00:22:24,799
in the background

00:22:21,520 --> 00:22:25,600
once the machine is booted up the other

00:22:24,799 --> 00:22:27,760
job we have

00:22:25,600 --> 00:22:29,520
is just uh basically a shell script

00:22:27,760 --> 00:22:30,240
which assumes that this disk image is

00:22:29,520 --> 00:22:32,159
already built

00:22:30,240 --> 00:22:33,840
uh and that assumption comes from the

00:22:32,159 --> 00:22:34,480
fact that when i mount it i'm just able

00:22:33,840 --> 00:22:37,280
to refer

00:22:34,480 --> 00:22:38,799
to this acceptance test vbox job and

00:22:37,280 --> 00:22:40,080
hydra's clever enough to figure out that

00:22:38,799 --> 00:22:42,480
it's going to have to build the disk

00:22:40,080 --> 00:22:44,159
image before it tries to run the tests

00:22:42,480 --> 00:22:46,559
and the body of the script is basically

00:22:44,159 --> 00:22:47,919
um just interacting with virtualbox via

00:22:46,559 --> 00:22:48,880
the command line so i create a new

00:22:47,919 --> 00:22:52,000
virtual machine

00:22:48,880 --> 00:22:53,679
i give it a gigabyte of ram i attach

00:22:52,000 --> 00:22:55,440
this is a bit messy but i had to

00:22:53,679 --> 00:22:57,360
basically attach this acceptance test

00:22:55,440 --> 00:23:00,000
vbox disk image

00:22:57,360 --> 00:23:01,120
and then i boot the machine i wait for

00:23:00,000 --> 00:23:03,200
welcome to

00:23:01,120 --> 00:23:05,200
uh welcome to nixos to be printed to the

00:23:03,200 --> 00:23:06,880
console and at this point i basically

00:23:05,200 --> 00:23:08,480
made the assumption that x11 is running

00:23:06,880 --> 00:23:10,559
and unable to actually do things

00:23:08,480 --> 00:23:12,559
so i just use vbox manage to fire off

00:23:10,559 --> 00:23:15,679
this browser test executable

00:23:12,559 --> 00:23:17,120
wait for it to finish and if it well i

00:23:15,679 --> 00:23:17,520
assume that it exits successfully and

00:23:17,120 --> 00:23:19,200
then i

00:23:17,520 --> 00:23:22,000
kind of echo the contents of that back

00:23:19,200 --> 00:23:23,520
out to the build process

00:23:22,000 --> 00:23:25,200
um so i thought this was really cool

00:23:23,520 --> 00:23:27,520
because i'm able to not only

00:23:25,200 --> 00:23:28,720
test that my binaries are exactly the

00:23:27,520 --> 00:23:29,760
binaries that i'm going to push to my

00:23:28,720 --> 00:23:31,679
production servers

00:23:29,760 --> 00:23:33,120
but i'm also testing that the system

00:23:31,679 --> 00:23:34,000
configuration itself that i'm going to

00:23:33,120 --> 00:23:35,679
be running on

00:23:34,000 --> 00:23:37,840
the production servers is what i'm

00:23:35,679 --> 00:23:39,120
actually testing because you'll see here

00:23:37,840 --> 00:23:41,120
like in this operating system

00:23:39,120 --> 00:23:42,320
configuration i didn't say how to run

00:23:41,120 --> 00:23:44,320
the api server

00:23:42,320 --> 00:23:46,159
i just said well we're going to import

00:23:44,320 --> 00:23:48,000
the finder or the metronome

00:23:46,159 --> 00:23:49,039
service and then we're going to run it

00:23:48,000 --> 00:23:50,000
which is exactly what we do on

00:23:49,039 --> 00:23:53,279
production

00:23:50,000 --> 00:23:54,640
so these acceptance tests um come out

00:23:53,279 --> 00:24:04,240
very closely mimicking production i

00:23:54,640 --> 00:24:07,520
think a question

00:24:04,240 --> 00:24:10,320
yeah and the annoying thing here is

00:24:07,520 --> 00:24:12,080
that uses qemu and again we have a

00:24:10,320 --> 00:24:14,480
strange ghc runtime bug

00:24:12,080 --> 00:24:15,520
justin qemu that's not present in

00:24:14,480 --> 00:24:17,279
virtualbox so

00:24:15,520 --> 00:24:18,640
but this also has a nice property that i

00:24:17,279 --> 00:24:19,120
mean i've split this into two different

00:24:18,640 --> 00:24:21,120
jobs

00:24:19,120 --> 00:24:23,039
one that just fills the disk image and

00:24:21,120 --> 00:24:23,760
that means i can if the acceptance tests

00:24:23,039 --> 00:24:25,600
do fail

00:24:23,760 --> 00:24:27,520
i can download this disk image attach it

00:24:25,600 --> 00:24:28,080
to a local virtualbox instance boot it

00:24:27,520 --> 00:24:30,320
up

00:24:28,080 --> 00:24:31,200
watch the browser actually running and

00:24:30,320 --> 00:24:33,360
hopefully at that point

00:24:31,200 --> 00:24:34,960
see where the failure is i could

00:24:33,360 --> 00:24:36,720
probably do that with qemu as well but

00:24:34,960 --> 00:24:39,360
that came out very nicely with uh with

00:24:36,720 --> 00:24:39,360
virtualbox

00:24:40,080 --> 00:24:43,600
uh so i think that's all of that um so

00:24:42,240 --> 00:24:45,200
on to the deployments

00:24:43,600 --> 00:24:46,799
i mean my main consideration when i'm

00:24:45,200 --> 00:24:49,120
doing deployments is that

00:24:46,799 --> 00:24:50,640
i want these to be fast i'm going to

00:24:49,120 --> 00:24:51,600
ideally be deploying multiple times a

00:24:50,640 --> 00:24:53,840
day

00:24:51,600 --> 00:24:55,200
well if i'm having a good day and the

00:24:53,840 --> 00:24:57,039
slowest part of a deployment is going to

00:24:55,200 --> 00:24:58,080
be building binaries and we've already

00:24:57,039 --> 00:25:00,880
done that so

00:24:58,080 --> 00:25:02,720
why would i bother repeating that work

00:25:00,880 --> 00:25:05,039
what i ideally want to do is reuse those

00:25:02,720 --> 00:25:06,559
builds that we got from hydra

00:25:05,039 --> 00:25:08,880
i found the best way to do this at the

00:25:06,559 --> 00:25:11,360
time was to build a channel

00:25:08,880 --> 00:25:13,440
in hydra hydro does actually generate

00:25:11,360 --> 00:25:15,120
channels itself but the channels kind of

00:25:13,440 --> 00:25:15,520
came out slightly weird i think if one

00:25:15,120 --> 00:25:17,760
thing

00:25:15,520 --> 00:25:19,360
failed the channel would just refer to a

00:25:17,760 --> 00:25:19,840
previous version whereas i'd rather if

00:25:19,360 --> 00:25:21,919
one thing

00:25:19,840 --> 00:25:23,679
failed that there is no channel at all

00:25:21,919 --> 00:25:26,320
so we build our own channel

00:25:23,679 --> 00:25:27,520
and this again is kind of it's it's

00:25:26,320 --> 00:25:29,760
almost a bit of a hack

00:25:27,520 --> 00:25:31,919
uh the way it works uh so let me jump

00:25:29,760 --> 00:25:35,760
over to the full definition here

00:25:31,919 --> 00:25:36,320
in our release.nxfile the core of it is

00:25:35,760 --> 00:25:38,080
this

00:25:36,320 --> 00:25:39,520
really strange make fake derivation

00:25:38,080 --> 00:25:44,000
function which takes a name

00:25:39,520 --> 00:25:45,440
and a path into the next store um

00:25:44,000 --> 00:25:47,200
and then it uses this built-in store

00:25:45,440 --> 00:25:48,880
path to provide a derivation that will

00:25:47,200 --> 00:25:50,320
exist at that path in the store

00:25:48,880 --> 00:25:52,000
but it tells you nothing about how you

00:25:50,320 --> 00:25:54,000
would actually build this thing

00:25:52,000 --> 00:25:55,520
um so what we do in our channel is we

00:25:54,000 --> 00:25:57,039
kind of re-export all of the things we

00:25:55,520 --> 00:25:58,400
want available in our channel

00:25:57,039 --> 00:26:00,240
and then when you actually try and do an

00:25:58,400 --> 00:26:01,440
installation the only information you

00:26:00,240 --> 00:26:03,760
have is what the

00:26:01,440 --> 00:26:04,640
uh the hash is so the only thing you can

00:26:03,760 --> 00:26:05,840
do is talk to

00:26:04,640 --> 00:26:07,440
any of your available binary

00:26:05,840 --> 00:26:07,840
substitution servers saying do you have

00:26:07,440 --> 00:26:09,919
this

00:26:07,840 --> 00:26:11,360
thing built because i need it installed

00:26:09,919 --> 00:26:13,039
if they do you can just download the

00:26:11,360 --> 00:26:14,400
binary and install it directly

00:26:13,039 --> 00:26:15,919
if you don't have it then the only thing

00:26:14,400 --> 00:26:17,440
you can do is abort the build because

00:26:15,919 --> 00:26:18,720
you don't know how to build it

00:26:17,440 --> 00:26:20,159
but that's actually exactly what i want

00:26:18,720 --> 00:26:21,919
when doing deployments that means that

00:26:20,159 --> 00:26:23,120
my deployments will only use

00:26:21,919 --> 00:26:24,960
binaries that have been built on our

00:26:23,120 --> 00:26:26,480
hydra server which ideally means these

00:26:24,960 --> 00:26:29,679
are only binaries that have gone through

00:26:26,480 --> 00:26:31,840
the acceptance test process as well

00:26:29,679 --> 00:26:33,039
in order to expose that channel we just

00:26:31,840 --> 00:26:34,880
have to do a little bit of kind of

00:26:33,039 --> 00:26:36,000
hacking around with the nginx instance

00:26:34,880 --> 00:26:38,320
that runs hydra

00:26:36,000 --> 00:26:39,200
so i've got two routes here that kind of

00:26:38,320 --> 00:26:41,840
um

00:26:39,200 --> 00:26:42,640
this is the format of a next channel and

00:26:41,840 --> 00:26:44,720
i'm basically

00:26:42,640 --> 00:26:46,000
kind of interpolating the project name

00:26:44,720 --> 00:26:47,760
and the job name

00:26:46,000 --> 00:26:49,840
to generate a production and a staging

00:26:47,760 --> 00:26:51,200
channel so don't worry about the details

00:26:49,840 --> 00:26:53,200
there

00:26:51,200 --> 00:26:54,720
and to actually use this in deployments

00:26:53,200 --> 00:26:57,760
um the way i do it is

00:26:54,720 --> 00:26:59,919
so this is at the top is a nikksops file

00:26:57,760 --> 00:27:01,840
i specify finder packages as a function

00:26:59,919 --> 00:27:02,480
argument and then i'm able to basically

00:27:01,840 --> 00:27:04,640
use

00:27:02,480 --> 00:27:06,159
i i assume that metronome is present in

00:27:04,640 --> 00:27:07,360
this finder packages object

00:27:06,159 --> 00:27:09,200
so here i'm saying service system

00:27:07,360 --> 00:27:11,440
metronome package is

00:27:09,200 --> 00:27:12,880
metronome from finder packages and in

00:27:11,440 --> 00:27:13,600
order to actually provide that function

00:27:12,880 --> 00:27:16,080
argument

00:27:13,600 --> 00:27:17,919
i just use nixops to do that so here i'm

00:27:16,080 --> 00:27:19,200
modifying the production environment by

00:27:17,919 --> 00:27:21,840
adding

00:27:19,200 --> 00:27:22,880
the set of root channels to productions

00:27:21,840 --> 00:27:24,559
include path

00:27:22,880 --> 00:27:26,240
do deployments as root which maybe is

00:27:24,559 --> 00:27:28,000
not a great idea

00:27:26,240 --> 00:27:29,679
and then i also set the finder packages

00:27:28,000 --> 00:27:32,080
argument to just import this finder

00:27:29,679 --> 00:27:34,000
production channel

00:27:32,080 --> 00:27:35,919
and now deployments become a uh very

00:27:34,000 --> 00:27:36,720
easily scriptable uh it's approximately

00:27:35,919 --> 00:27:38,399
the following there's

00:27:36,720 --> 00:27:40,799
a little bit more kind of error catching

00:27:38,399 --> 00:27:42,640
going on here but we have our own

00:27:40,799 --> 00:27:44,640
uh nix packages repository on the

00:27:42,640 --> 00:27:45,919
deployment machine so i see the internet

00:27:44,640 --> 00:27:47,760
and do a git pull

00:27:45,919 --> 00:27:49,760
the pull here is to basically make sure

00:27:47,760 --> 00:27:50,960
i do any operating system upgrades such

00:27:49,760 --> 00:27:54,320
as upgrading to a different

00:27:50,960 --> 00:27:56,000
uh nyx release version this isn't going

00:27:54,320 --> 00:27:57,200
to change the binaries that are actually

00:27:56,000 --> 00:27:59,200
deployed in terms of

00:27:57,200 --> 00:28:00,960
the api server and things like that in

00:27:59,200 --> 00:28:02,240
order to change that i do next channel

00:28:00,960 --> 00:28:04,399
update which is going to pull down the

00:28:02,240 --> 00:28:06,000
latest production and staging channels

00:28:04,399 --> 00:28:07,520
and then i can do nick saltz deploy dash

00:28:06,000 --> 00:28:09,200
d production which

00:28:07,520 --> 00:28:10,880
has now been configured to know about

00:28:09,200 --> 00:28:12,640
these mixed channels use all those

00:28:10,880 --> 00:28:14,320
binaries pull them down from hydra push

00:28:12,640 --> 00:28:15,679
them out to servers and restart all the

00:28:14,320 --> 00:28:17,919
necessary system d

00:28:15,679 --> 00:28:19,520
services and this whole process

00:28:17,919 --> 00:28:21,679
generally means deployments take

00:28:19,520 --> 00:28:24,159
about seven seconds the last time i

00:28:21,679 --> 00:28:30,559
looked which for me is pretty perfect

00:28:24,159 --> 00:28:32,080
when it comes to deployments

00:28:30,559 --> 00:28:33,840
so that is that's everything i really

00:28:32,080 --> 00:28:35,120
wanted to talk about um so hopefully

00:28:33,840 --> 00:28:36,399
you've seen that how we're using the

00:28:35,120 --> 00:28:39,039
kind of development environment

00:28:36,399 --> 00:28:39,760
to just uh get development environments

00:28:39,039 --> 00:28:41,760
but also to

00:28:39,760 --> 00:28:43,679
have our build expressions those dev

00:28:41,760 --> 00:28:45,520
environments can reuse the binaries that

00:28:43,679 --> 00:28:46,720
we're building on hydra by letting my

00:28:45,520 --> 00:28:48,399
colleagues use that as a binary

00:28:46,720 --> 00:28:49,520
substitution server

00:28:48,399 --> 00:28:51,279
and then we've also got the module

00:28:49,520 --> 00:28:53,360
system which allow us to do deployments

00:28:51,279 --> 00:28:55,200
but also to reuse these modules for

00:28:53,360 --> 00:28:57,360
acceptance tests so i've been really

00:28:55,200 --> 00:28:59,360
happy with how this has all come out

00:28:57,360 --> 00:29:02,799
and certainly better than chef and

00:28:59,360 --> 00:29:02,799
puppet which is my previous experience

00:29:02,960 --> 00:29:13,840
thank you

00:29:17,919 --> 00:29:22,320
hey so two questions first question can

00:29:20,720 --> 00:29:25,600
i steal the source code please

00:29:22,320 --> 00:29:26,960
uh yeah so i mean there's there's

00:29:25,600 --> 00:29:28,240
probably some stuff that maybe i have to

00:29:26,960 --> 00:29:28,720
clear up but i would like to get a lot

00:29:28,240 --> 00:29:30,880
of this

00:29:28,720 --> 00:29:32,399
shared i should also mention actually i

00:29:30,880 --> 00:29:33,600
kind of cribbed all these slides from a

00:29:32,399 --> 00:29:34,320
blog post that i never got around to

00:29:33,600 --> 00:29:36,000
publishing

00:29:34,320 --> 00:29:37,520
so hopefully in the next week or so i'll

00:29:36,000 --> 00:29:38,880
have a kind of full write-up of all of

00:29:37,520 --> 00:29:40,159
this in a bit more detail

00:29:38,880 --> 00:29:42,640
um but yeah i'd like to share some of

00:29:40,159 --> 00:29:42,880
this amazing and and the real question

00:29:42,640 --> 00:29:46,960
is

00:29:42,880 --> 00:29:49,039
um how do you sort of use all this stack

00:29:46,960 --> 00:29:50,559
during the development because during

00:29:49,039 --> 00:29:51,600
the development the build is really slow

00:29:50,559 --> 00:29:54,480
right

00:29:51,600 --> 00:29:55,360
uh they're as slow as they kind of need

00:29:54,480 --> 00:29:57,120
to be

00:29:55,360 --> 00:29:58,399
so we have the nice property that nix is

00:29:57,120 --> 00:29:59,520
obviously only going to rebuild things

00:29:58,399 --> 00:30:01,520
that have changed

00:29:59,520 --> 00:30:03,039
so if i just work on one project i tend

00:30:01,520 --> 00:30:04,640
to be in that development environment

00:30:03,039 --> 00:30:06,720
and i just do the minimal rebuilds that

00:30:04,640 --> 00:30:08,480
need to happen there

00:30:06,720 --> 00:30:10,000
but like in your broader question like

00:30:08,480 --> 00:30:13,120
services and stuff we

00:30:10,000 --> 00:30:13,840
yeah i'm sorry like like during your

00:30:13,120 --> 00:30:17,039
development

00:30:13,840 --> 00:30:18,880
uh process do you do next build or or do

00:30:17,039 --> 00:30:22,080
you can line install whatever

00:30:18,880 --> 00:30:23,840
no um so yeah for the closure script

00:30:22,080 --> 00:30:25,360
stuff we do next shell on that project

00:30:23,840 --> 00:30:26,799
which is going to bring down all of the

00:30:25,360 --> 00:30:29,120
dependencies

00:30:26,799 --> 00:30:30,720
um because i mean that was actually a

00:30:29,120 --> 00:30:32,000
bit of an abbreviation um there is a

00:30:30,720 --> 00:30:33,600
separate step that just brings down

00:30:32,000 --> 00:30:34,399
dependencies which is before the build

00:30:33,600 --> 00:30:35,840
phase

00:30:34,399 --> 00:30:38,480
and then i just run things like line

00:30:35,840 --> 00:30:40,399
replica and things for the haskell stuff

00:30:38,480 --> 00:30:42,000
i never run nyx build but if i do nick

00:30:40,399 --> 00:30:43,520
shell on a project that depends on

00:30:42,000 --> 00:30:45,120
another project that has changed

00:30:43,520 --> 00:30:46,159
nix will automatically build that for me

00:30:45,120 --> 00:30:47,360
and bring it into my environment so

00:30:46,159 --> 00:30:48,880
that's kind of what i meant where

00:30:47,360 --> 00:30:51,840
nyx does the least amount of stuff

00:30:48,880 --> 00:30:51,840
possible to make it happen

00:30:54,250 --> 00:30:57,319
[Music]

00:31:00,480 --> 00:31:04,960
okay question how did you convince your

00:31:03,760 --> 00:31:07,360
co-workers to

00:31:04,960 --> 00:31:08,559
give nicks a try or do they have any

00:31:07,360 --> 00:31:10,480
chance even

00:31:08,559 --> 00:31:11,760
uh so if we're gonna if we're gonna be

00:31:10,480 --> 00:31:12,960
honest as you said before

00:31:11,760 --> 00:31:15,840
i just said you want to try next and

00:31:12,960 --> 00:31:17,519
they said yeah so i had the the benefit

00:31:15,840 --> 00:31:19,519
of working very small teams i mean when

00:31:17,519 --> 00:31:21,120
we started this we had no existing

00:31:19,519 --> 00:31:22,480
deployment infrastructure in place

00:31:21,120 --> 00:31:24,480
this was a brand new project that we

00:31:22,480 --> 00:31:24,960
were starting from the ground up i'd had

00:31:24,480 --> 00:31:26,480
nix

00:31:24,960 --> 00:31:28,240
on my machine for a while and been using

00:31:26,480 --> 00:31:30,559
it for local development

00:31:28,240 --> 00:31:31,279
and the rest of the guys were basically

00:31:30,559 --> 00:31:32,640
kind of

00:31:31,279 --> 00:31:33,760
happy enough with how i was doing my

00:31:32,640 --> 00:31:35,200
development it seemed to be working very

00:31:33,760 --> 00:31:36,799
well for me

00:31:35,200 --> 00:31:47,840
and we were just willing to give it a

00:31:36,799 --> 00:31:47,840
shot i think it paid off nicely

00:31:52,240 --> 00:31:58,320
hi um how long do you think it took you

00:31:55,120 --> 00:32:00,399
to set up the whole environment

00:31:58,320 --> 00:32:02,320
uh so it's kind of it's kind of tricky

00:32:00,399 --> 00:32:04,159
to put a time frame on it because it's

00:32:02,320 --> 00:32:06,240
it wasn't really something that we did

00:32:04,159 --> 00:32:07,760
from start to finish i mean we the first

00:32:06,240 --> 00:32:09,200
thing that i did was build these

00:32:07,760 --> 00:32:11,200
development shelves because i just

00:32:09,200 --> 00:32:12,480
wanted to be able to work on the code

00:32:11,200 --> 00:32:13,679
and we weren't even deploying anything

00:32:12,480 --> 00:32:15,279
at that point because we were still in a

00:32:13,679 --> 00:32:17,519
development phase so

00:32:15,279 --> 00:32:19,279
i i mean the acceptance test stuff took

00:32:17,519 --> 00:32:21,039
me a reasonable amount of time

00:32:19,279 --> 00:32:22,399
but i did that far later than the other

00:32:21,039 --> 00:32:23,840
stuff that was in there

00:32:22,399 --> 00:32:26,240
setting up hydra as someone mentioned

00:32:23,840 --> 00:32:27,679
before like it's not particularly easy

00:32:26,240 --> 00:32:29,120
so there was certainly some time sunk

00:32:27,679 --> 00:32:30,559
into just getting hydra working and

00:32:29,120 --> 00:32:33,600
finding a commit that worked

00:32:30,559 --> 00:32:34,720
which is a bit annoying i i guess in

00:32:33,600 --> 00:32:36,080
in the grand scheme of things it doesn't

00:32:34,720 --> 00:32:37,600
feel like it was a massive time think it

00:32:36,080 --> 00:32:39,039
definitely did take some time

00:32:37,600 --> 00:32:40,240
um which is why i'd like to document

00:32:39,039 --> 00:32:41,679
some of this stuff so people don't have

00:32:40,240 --> 00:32:42,080
to go through that kind of research

00:32:41,679 --> 00:32:45,360
process

00:32:42,080 --> 00:32:45,360
again thank you

00:32:53,120 --> 00:32:56,159
kind of along those lines thinking back

00:32:55,519 --> 00:32:57,760
if you

00:32:56,159 --> 00:32:59,200
were working in a you know an

00:32:57,760 --> 00:33:00,559
organization that's already been running

00:32:59,200 --> 00:33:00,880
for quite a bit of time and you wanted

00:33:00,559 --> 00:33:02,399
to

00:33:00,880 --> 00:33:04,000
introduce some of this stuff how how do

00:33:02,399 --> 00:33:05,919
you think you might go about that

00:33:04,000 --> 00:33:07,279
uh so i guess that's the position i'm in

00:33:05,919 --> 00:33:08,960
right now so i've just joined circuit

00:33:07,279 --> 00:33:10,240
hub in the last couple of weeks

00:33:08,960 --> 00:33:12,159
the first thing i did there was to just

00:33:10,240 --> 00:33:13,200
add these default.nicks and shell.next

00:33:12,159 --> 00:33:15,200
expressions to

00:33:13,200 --> 00:33:17,279
all the projects which at least means i

00:33:15,200 --> 00:33:19,440
can now work on that code and use nyx to

00:33:17,279 --> 00:33:20,640
build my development environments

00:33:19,440 --> 00:33:23,279
the next thing i want to do is get a

00:33:20,640 --> 00:33:24,880
hydra instance set up because i mean my

00:33:23,279 --> 00:33:26,080
my colleagues there are also familiar

00:33:24,880 --> 00:33:27,600
with knicks and they'd like to see how

00:33:26,080 --> 00:33:28,960
well it plays out in practice

00:33:27,600 --> 00:33:30,960
so what i want to be able to do is have

00:33:28,960 --> 00:33:32,559
my own hydra instance running and then

00:33:30,960 --> 00:33:34,240
i can tell them oh yeah just go into

00:33:32,559 --> 00:33:36,880
this project run get pull

00:33:34,240 --> 00:33:38,000
and run nick shell with my binary cache

00:33:36,880 --> 00:33:39,039
and you should be in a development

00:33:38,000 --> 00:33:39,679
environment in like a minute or

00:33:39,039 --> 00:33:40,880
something

00:33:39,679 --> 00:33:42,320
and hopefully at this point things start

00:33:40,880 --> 00:33:42,799
to become quite convincing that there is

00:33:42,320 --> 00:33:45,120
value

00:33:42,799 --> 00:33:46,399
in these tools uh as for the actual

00:33:45,120 --> 00:33:47,679
deployments i mean

00:33:46,399 --> 00:33:49,200
i i guess that's just going to have to

00:33:47,679 --> 00:33:50,159
be a bigger discussion because that's

00:33:49,200 --> 00:33:53,840
quite a big buy-in

00:33:50,159 --> 00:33:53,840
at that point

00:34:04,399 --> 00:34:07,679
you mentioned you mentioned before that

00:34:05,919 --> 00:34:09,200
you want to have something like next

00:34:07,679 --> 00:34:12,240
shell for containers

00:34:09,200 --> 00:34:15,119
there is a small wrapper around mixo's

00:34:12,240 --> 00:34:17,760
container which is called nixos shell

00:34:15,119 --> 00:34:21,839
okay and then go and okay i'm not

00:34:17,760 --> 00:34:21,839
familiar with that so i definitely

00:34:30,879 --> 00:34:34,960
so i thought it was interesting that you

00:34:32,480 --> 00:34:38,560
mentioned the building closure script

00:34:34,960 --> 00:34:40,960
using nyx closure script like

00:34:38,560 --> 00:34:42,879
closure uses the maven ecosystem for its

00:34:40,960 --> 00:34:46,320
dependency tracking so

00:34:42,879 --> 00:34:47,200
do you feel that nyx can contribute

00:34:46,320 --> 00:34:50,480
something

00:34:47,200 --> 00:34:54,879
to projects that use maven as the

00:34:50,480 --> 00:34:56,240
main dependency resolution system um

00:34:54,879 --> 00:34:58,079
or do you think that they are sort of

00:34:56,240 --> 00:35:01,280
orthogonal to each other

00:34:58,079 --> 00:35:02,000
uh contributing back to that ecosystem

00:35:01,280 --> 00:35:04,560
i'm not so sure

00:35:02,000 --> 00:35:06,000
about i mean i i did briefly look into

00:35:04,560 --> 00:35:07,599
actually bringing some of that packaging

00:35:06,000 --> 00:35:09,359
kind of into nyx and teaching nicks a

00:35:07,599 --> 00:35:11,599
bit more about how it all fits together

00:35:09,359 --> 00:35:12,880
and it definitely looks doable i mean it

00:35:11,599 --> 00:35:14,240
looks like it's the kind of classic

00:35:12,880 --> 00:35:15,680
story of having a bunch of stuff on

00:35:14,240 --> 00:35:17,119
environment variables that

00:35:15,680 --> 00:35:20,000
specify the paths that you need to

00:35:17,119 --> 00:35:22,160
include so i think what i'd rather do is

00:35:20,000 --> 00:35:24,079
try and kind of bring some of that

00:35:22,160 --> 00:35:25,920
ideally in an automated way into next

00:35:24,079 --> 00:35:27,280
packages again

00:35:25,920 --> 00:35:29,119
the same kind of idea is how we do it

00:35:27,280 --> 00:35:30,880
with package of just basically

00:35:29,119 --> 00:35:32,240
mirroring like closures which is one of

00:35:30,880 --> 00:35:34,800
the main package repositories

00:35:32,240 --> 00:35:36,160
um and i think then maybe at that point

00:35:34,800 --> 00:35:37,520
then we have a convincing story to bring

00:35:36,160 --> 00:35:39,359
some more developers in saying hey we

00:35:37,520 --> 00:35:41,119
already have your entire ecosystem

00:35:39,359 --> 00:35:43,440
maybe you want to try our tool out and

00:35:41,119 --> 00:35:46,079
you know see if it helps you

00:35:43,440 --> 00:35:46,800
um but again that's just a time thing

00:35:46,079 --> 00:35:48,560
really

00:35:46,800 --> 00:35:59,839
and i'm now not writing closure script

00:35:48,560 --> 00:35:59,839
anymore so i guess it won't be me

00:36:01,000 --> 00:36:05,040
[Music]

00:36:02,320 --> 00:36:05,040
any more questions

00:36:06,960 --> 00:36:09,599
okay if you can still think of a

00:36:08,240 --> 00:36:11,200
question in a minute also all of us

00:36:09,599 --> 00:36:20,480
around i think right

00:36:11,200 --> 00:36:20,480

YouTube URL: https://www.youtube.com/watch?v=Ykyh8v76p6M


