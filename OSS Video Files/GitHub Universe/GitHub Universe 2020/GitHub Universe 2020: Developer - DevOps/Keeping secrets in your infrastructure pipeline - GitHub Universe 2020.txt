Title: Keeping secrets in your infrastructure pipeline - GitHub Universe 2020
Publication date: 2020-12-10
Playlist: GitHub Universe 2020: Developer - DevOps
Description: 
	Presented by Rosemary Wang, Developer Advocate, HashiCorp

You’ve set up your infrastructure as code in GitHub Actions to securely test and deploy to production. One year later, you discover the account keys you used for automation have been compromised! In a panic, you scramble around multiple repositories looking for where you used the account keys and throw together a script to rotate them. You start to wonder, “is there a better way I could have managed my secret?” In this talk, you’ll learn how to manage secrets in your infrastructure pipeline using HashiCorp Vault and Terraform with GitHub Actions. By using Vault’s dynamic secrets engines, you can rotate, audit, and manage the lifecycle of your infrastructure account keys and API tokens. In addition to managing service account keys for Terraform automation, we’ll cover how Vault can generate secrets such as database passwords for creating infrastructure resources.


For more from GitHub Universe 2020, visit https://githubuniverse.com

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:02,210 --> 00:00:05,370
[Music]

00:00:02,270 --> 00:00:05,370
[Applause]

00:00:06,240 --> 00:00:10,160
thanks for the introduction

00:00:07,600 --> 00:00:12,000
welcome to the jungle i'm rosemary wong

00:00:10,160 --> 00:00:13,040
and today i'm going to be talking about

00:00:12,000 --> 00:00:16,000
keeping secrets

00:00:13,040 --> 00:00:17,760
in your infrastructure pipeline so

00:00:16,000 --> 00:00:20,400
before i even talk about

00:00:17,760 --> 00:00:22,800
keeping secrets because keeping secrets

00:00:20,400 --> 00:00:25,039
really isn't all that fun

00:00:22,800 --> 00:00:26,800
infrastructure pipelines are continuous

00:00:25,039 --> 00:00:28,000
integration pipelines for infrastructure

00:00:26,800 --> 00:00:29,679
as code

00:00:28,000 --> 00:00:31,599
the idea is that when you run

00:00:29,679 --> 00:00:32,160
infrastructures code no matter what the

00:00:31,599 --> 00:00:34,239
tool

00:00:32,160 --> 00:00:35,920
you're using you need a way to

00:00:34,239 --> 00:00:37,760
facilitate a deployment

00:00:35,920 --> 00:00:40,000
to production for any kind of

00:00:37,760 --> 00:00:43,440
infrastructure whether that be cloud

00:00:40,000 --> 00:00:45,360
data center or even metrics

00:00:43,440 --> 00:00:46,879
when you're using infrastructure's code

00:00:45,360 --> 00:00:48,559
you tend to have a couple different

00:00:46,879 --> 00:00:49,200
steps in this kind of pipeline or

00:00:48,559 --> 00:00:51,760
workflow

00:00:49,200 --> 00:00:53,680
the first is that you tend to unit test

00:00:51,760 --> 00:00:54,960
the configurations you have make sure

00:00:53,680 --> 00:00:57,520
the configurations

00:00:54,960 --> 00:00:58,079
are what you expect them to be you might

00:00:57,520 --> 00:01:00,079
taste test

00:00:58,079 --> 00:01:01,440
them to make sure your configurations

00:01:00,079 --> 00:01:03,520
don't have something

00:01:01,440 --> 00:01:04,879
misconfigured this could be an open

00:01:03,520 --> 00:01:06,640
security group rule it could be a

00:01:04,879 --> 00:01:08,479
different network policy

00:01:06,640 --> 00:01:10,240
then you'll build and deploy this to

00:01:08,479 --> 00:01:12,000
some kind of production environments

00:01:10,240 --> 00:01:14,080
and then you'll integration test that to

00:01:12,000 --> 00:01:15,119
make sure it functionally works

00:01:14,080 --> 00:01:16,799
today we're talking about

00:01:15,119 --> 00:01:18,479
infrastructure's code using hashicorp

00:01:16,799 --> 00:01:20,799
terraform hashicorp terraform

00:01:18,479 --> 00:01:21,840
is an open source project that you can

00:01:20,799 --> 00:01:23,600
use to deploy

00:01:21,840 --> 00:01:24,880
infrastructure to pretty much any

00:01:23,600 --> 00:01:27,920
provider that's supported

00:01:24,880 --> 00:01:30,960
including but not limited to

00:01:27,920 --> 00:01:33,200
pizza you can actually provision pizza

00:01:30,960 --> 00:01:34,960
using terraform and someone did write a

00:01:33,200 --> 00:01:37,680
plug-in for that so check out

00:01:34,960 --> 00:01:38,960
terraform as an open source project i've

00:01:37,680 --> 00:01:40,479
done a lot of these infrastructure

00:01:38,960 --> 00:01:42,399
pipelines before

00:01:40,479 --> 00:01:43,759
and they usually follow this general

00:01:42,399 --> 00:01:46,159
approach which is plan

00:01:43,759 --> 00:01:47,680
security test apply and then check if

00:01:46,159 --> 00:01:50,560
everything is working

00:01:47,680 --> 00:01:51,680
but there's kind of a problem when i use

00:01:50,560 --> 00:01:53,680
these pipelines

00:01:51,680 --> 00:01:55,520
for example sometimes i'll go back to

00:01:53,680 --> 00:01:56,880
pipelines and realize that some of the

00:01:55,520 --> 00:01:59,040
secrets i was using

00:01:56,880 --> 00:02:00,479
uh were actually about a year old and i

00:01:59,040 --> 00:02:02,240
never touched them

00:02:00,479 --> 00:02:04,399
the pipeline had continued running on

00:02:02,240 --> 00:02:07,280
its merry way but i had never changed

00:02:04,399 --> 00:02:08,399
that set of secrets or that of

00:02:07,280 --> 00:02:11,840
information

00:02:08,399 --> 00:02:14,000
this is actually a view of my pipeline

00:02:11,840 --> 00:02:15,599
that i had not run for about a year and

00:02:14,000 --> 00:02:17,520
it had some azure credentials that were

00:02:15,599 --> 00:02:19,280
about a year old so basically i was

00:02:17,520 --> 00:02:21,120
deploying to azure and i could continue

00:02:19,280 --> 00:02:23,200
to deploy to azure with the same

00:02:21,120 --> 00:02:24,239
username effectively username passwords

00:02:23,200 --> 00:02:27,040
and tokens

00:02:24,239 --> 00:02:27,840
that i had done for about a year the

00:02:27,040 --> 00:02:30,319
other problem

00:02:27,840 --> 00:02:30,959
is that um sometimes my security tests

00:02:30,319 --> 00:02:33,680
fail

00:02:30,959 --> 00:02:34,319
or i'll review some pull requests and

00:02:33,680 --> 00:02:37,120
realize

00:02:34,319 --> 00:02:38,480
in horror that i committed the database

00:02:37,120 --> 00:02:40,080
password

00:02:38,480 --> 00:02:41,440
in a previous session you probably

00:02:40,080 --> 00:02:43,280
learned a little bit about how you can

00:02:41,440 --> 00:02:46,879
scan for secrets in your github

00:02:43,280 --> 00:02:48,879
pipeline github actions workflow however

00:02:46,879 --> 00:02:50,800
in this particular situation i didn't

00:02:48,879 --> 00:02:51,599
catch it before i went to production

00:02:50,800 --> 00:02:53,120
instead

00:02:51,599 --> 00:02:55,440
i sort of caught it when i had already

00:02:53,120 --> 00:02:58,080
done it and and actually recently

00:02:55,440 --> 00:02:59,920
i printed out my database password in a

00:02:58,080 --> 00:03:02,480
pull request by accident

00:02:59,920 --> 00:03:03,840
so either way none of these scenarios

00:03:02,480 --> 00:03:06,000
are great you know either you have long

00:03:03,840 --> 00:03:09,200
lived secrets or you accidentally

00:03:06,000 --> 00:03:11,760
printed out your password in plain text

00:03:09,200 --> 00:03:12,879
so after this situation happens i

00:03:11,760 --> 00:03:15,920
usually invoke plan

00:03:12,879 --> 00:03:17,920
r plan r has a couple of steps to it the

00:03:15,920 --> 00:03:19,840
first step is regret everything regret

00:03:17,920 --> 00:03:21,440
that you became an engineer regret that

00:03:19,840 --> 00:03:22,480
you started to do devops and all of

00:03:21,440 --> 00:03:23,760
these things

00:03:22,480 --> 00:03:25,840
regret that you started to learn

00:03:23,760 --> 00:03:28,000
infrastructure as code and dare to touch

00:03:25,840 --> 00:03:28,879
cloud infrastructure so after you get

00:03:28,000 --> 00:03:31,040
over that step

00:03:28,879 --> 00:03:32,000
the next step that you think about is

00:03:31,040 --> 00:03:33,599
revoking the

00:03:32,000 --> 00:03:35,519
password or the token that you were

00:03:33,599 --> 00:03:36,480
using in the case of my long-lived

00:03:35,519 --> 00:03:38,959
credentials

00:03:36,480 --> 00:03:40,400
i would revoke it and then i would

00:03:38,959 --> 00:03:42,239
rotate it with the new one

00:03:40,400 --> 00:03:44,159
so this happens with a number of

00:03:42,239 --> 00:03:45,040
sensitive sort of variables that you

00:03:44,159 --> 00:03:48,400
might have

00:03:45,040 --> 00:03:48,720
in your pipelines the next thing you do

00:03:48,400 --> 00:03:51,200
is

00:03:48,720 --> 00:03:53,200
find all references this could mean that

00:03:51,200 --> 00:03:54,480
your database password was referenced by

00:03:53,200 --> 00:03:56,319
multiple applications

00:03:54,480 --> 00:03:58,159
it could mean that it was referenced by

00:03:56,319 --> 00:03:59,840
one or two other

00:03:58,159 --> 00:04:02,080
repositories you don't know where it was

00:03:59,840 --> 00:04:04,159
referenced but you have to find them

00:04:02,080 --> 00:04:05,840
and the next is to replace so basically

00:04:04,159 --> 00:04:08,640
steps four and five

00:04:05,840 --> 00:04:09,200
tend to relate to a control f and

00:04:08,640 --> 00:04:11,200
control

00:04:09,200 --> 00:04:13,200
r uh that is our automation for

00:04:11,200 --> 00:04:14,000
referencing and replacing any instance

00:04:13,200 --> 00:04:16,479
of that sensitive

00:04:14,000 --> 00:04:17,840
variable that we've compromised and then

00:04:16,479 --> 00:04:20,160
we rerun everything

00:04:17,840 --> 00:04:21,759
at one time that i committed a database

00:04:20,160 --> 00:04:24,320
password and had to rotate it

00:04:21,759 --> 00:04:25,440
rotate it i think it took 10 or 15

00:04:24,320 --> 00:04:27,600
pipelines

00:04:25,440 --> 00:04:28,720
re-triggering and running and basically

00:04:27,600 --> 00:04:31,360
redeploying

00:04:28,720 --> 00:04:32,080
so plan r is an extensive plan sometimes

00:04:31,360 --> 00:04:33,919
it can take

00:04:32,080 --> 00:04:37,199
two days other times it can take seven

00:04:33,919 --> 00:04:39,120
weeks you never know what it will take

00:04:37,199 --> 00:04:40,720
all right so when i became a developer

00:04:39,120 --> 00:04:41,759
advocate i started to think is there a

00:04:40,720 --> 00:04:43,199
better way to do this

00:04:41,759 --> 00:04:44,960
it turns out there is a better way to do

00:04:43,199 --> 00:04:46,800
this and it's with another open source

00:04:44,960 --> 00:04:49,919
tool called hashicorp vault

00:04:46,800 --> 00:04:51,440
uh hashicorp vault is um

00:04:49,919 --> 00:04:52,960
you know going to handle a couple of

00:04:51,440 --> 00:04:55,280
different types of secrets

00:04:52,960 --> 00:04:56,000
hashtag vault will actually store and

00:04:55,280 --> 00:04:57,680
rotate service

00:04:56,000 --> 00:04:59,520
accounts so these are things that log

00:04:57,680 --> 00:05:02,000
into an infrastructure provider

00:04:59,520 --> 00:05:03,440
they'll store any kind of sensitive

00:05:02,000 --> 00:05:04,880
resource attribute that you need

00:05:03,440 --> 00:05:06,160
including database passwords or

00:05:04,880 --> 00:05:08,000
certificates

00:05:06,160 --> 00:05:10,800
and you can also have it generate some

00:05:08,000 --> 00:05:13,039
secrets for you actually

00:05:10,800 --> 00:05:14,000
this subset of things is kind of the

00:05:13,039 --> 00:05:15,919
stuff that you would put in your

00:05:14,000 --> 00:05:16,960
pipeline if you think about the secrets

00:05:15,919 --> 00:05:18,560
in your pipeline

00:05:16,960 --> 00:05:20,880
they usually fall into one of these

00:05:18,560 --> 00:05:22,560
three buckets so things that you need to

00:05:20,880 --> 00:05:24,320
log into an infrastructure provider

00:05:22,560 --> 00:05:25,120
these are api tokens or service account

00:05:24,320 --> 00:05:26,800
keys

00:05:25,120 --> 00:05:28,720
you also have resource attributes these

00:05:26,800 --> 00:05:31,039
are database passwords or certificates

00:05:28,720 --> 00:05:32,560
so you might pass an admin password to a

00:05:31,039 --> 00:05:35,600
resource to make sure you

00:05:32,560 --> 00:05:37,520
start up a database with the right login

00:05:35,600 --> 00:05:38,639
and then you also have generated secrets

00:05:37,520 --> 00:05:40,560
so these are things that

00:05:38,639 --> 00:05:42,800
the pipeline itself creates these could

00:05:40,560 --> 00:05:44,960
be random passwords or tokens

00:05:42,800 --> 00:05:46,320
we're only going to talk about the first

00:05:44,960 --> 00:05:47,440
two which is service accounts and

00:05:46,320 --> 00:05:49,840
resource attributes

00:05:47,440 --> 00:05:50,639
because generating secrets tends to be

00:05:49,840 --> 00:05:53,360
an output

00:05:50,639 --> 00:05:53,840
securing output is a whole other talk

00:05:53,360 --> 00:05:55,520
and

00:05:53,840 --> 00:05:56,960
so what we're going to do is focus on

00:05:55,520 --> 00:05:59,360
the first part of this talk which is

00:05:56,960 --> 00:06:02,240
keeping your secrets indeed a secret

00:05:59,360 --> 00:06:02,240
as inputs

00:06:02,479 --> 00:06:08,400
so when you use a secrets manager what

00:06:04,880 --> 00:06:10,319
do you do and why do you bother using it

00:06:08,400 --> 00:06:12,240
well a secrets manager actually takes

00:06:10,319 --> 00:06:13,199
away a couple of steps the first thing

00:06:12,240 --> 00:06:15,360
is regret

00:06:13,199 --> 00:06:17,120
you might push a password and regret

00:06:15,360 --> 00:06:20,080
that you pushed it in the first place

00:06:17,120 --> 00:06:21,120
but you actually get the simplification

00:06:20,080 --> 00:06:22,639
of the revocation

00:06:21,120 --> 00:06:24,720
and the rotation of secrets with the

00:06:22,639 --> 00:06:27,600
secrets manager so if you need to change

00:06:24,720 --> 00:06:29,360
the secret it's no big deal

00:06:27,600 --> 00:06:31,199
the next is actually the reference step

00:06:29,360 --> 00:06:32,880
you still have to find pipelines that

00:06:31,199 --> 00:06:34,639
are referencing it you still have to

00:06:32,880 --> 00:06:36,720
find applications that are referencing

00:06:34,639 --> 00:06:38,720
it but at the end of the day the

00:06:36,720 --> 00:06:40,560
bulk of the revocation and the rotation

00:06:38,720 --> 00:06:43,360
are handled by secrets manager

00:06:40,560 --> 00:06:45,039
and then you follow the rerun command so

00:06:43,360 --> 00:06:46,560
sometimes you have to rerun it other

00:06:45,039 --> 00:06:48,319
times you don't depends on what your

00:06:46,560 --> 00:06:49,919
automation supports

00:06:48,319 --> 00:06:51,759
at the end of the day you kind of remove

00:06:49,919 --> 00:06:52,880
the regret and the replace step for the

00:06:51,759 --> 00:06:54,960
most part

00:06:52,880 --> 00:06:56,319
vault as a secrets manager will handle

00:06:54,960 --> 00:06:58,479
that for you and

00:06:56,319 --> 00:07:00,479
for the most part you can go and use the

00:06:58,479 --> 00:07:01,039
new database password or service account

00:07:00,479 --> 00:07:04,319
without

00:07:01,039 --> 00:07:06,720
any other thoughts all right so

00:07:04,319 --> 00:07:08,080
the way that secrets get into a pipeline

00:07:06,720 --> 00:07:10,080
in the first place specifically an

00:07:08,080 --> 00:07:11,759
infrastructure pipeline is this process

00:07:10,080 --> 00:07:13,840
of secrets injection

00:07:11,759 --> 00:07:15,599
the first step is to authenticate to

00:07:13,840 --> 00:07:16,639
said sequence manager you can't just get

00:07:15,599 --> 00:07:18,720
a secret

00:07:16,639 --> 00:07:20,000
you need to authenticate to your secrets

00:07:18,720 --> 00:07:22,000
manager first

00:07:20,000 --> 00:07:23,680
and then the second step is to actually

00:07:22,000 --> 00:07:24,880
introduce the secret or get the secret

00:07:23,680 --> 00:07:26,639
from it

00:07:24,880 --> 00:07:29,280
after that you can pass it to your

00:07:26,639 --> 00:07:32,080
pipeline for usage

00:07:29,280 --> 00:07:33,759
in the case of vault what we can do is

00:07:32,080 --> 00:07:35,919
consolidate these two steps

00:07:33,759 --> 00:07:37,440
so we would first authenticate to vault

00:07:35,919 --> 00:07:39,039
and then we would get the secrets at a

00:07:37,440 --> 00:07:41,599
specific api path

00:07:39,039 --> 00:07:42,639
in the secrets manager and we passed

00:07:41,599 --> 00:07:44,560
this through

00:07:42,639 --> 00:07:46,080
the consolidation of these two steps

00:07:44,560 --> 00:07:46,479
actually is done by the vault github

00:07:46,080 --> 00:07:49,280
action

00:07:46,479 --> 00:07:50,960
it's an open source github action you

00:07:49,280 --> 00:07:53,440
can use it in any of our pipelines we

00:07:50,960 --> 00:07:55,360
also have a terraform github action

00:07:53,440 --> 00:07:57,120
so you get to automate this end-to-end

00:07:55,360 --> 00:07:58,479
process and take away the pain of this

00:07:57,120 --> 00:08:01,120
workflow

00:07:58,479 --> 00:08:01,840
using github action specifically so

00:08:01,120 --> 00:08:04,000
today

00:08:01,840 --> 00:08:06,319
we're actually going to look at this in

00:08:04,000 --> 00:08:07,840
action

00:08:06,319 --> 00:08:09,520
it's going to get a little complicated

00:08:07,840 --> 00:08:11,680
but i'm going to try to

00:08:09,520 --> 00:08:13,599
articulate some of the design elements

00:08:11,680 --> 00:08:15,039
in this particular demo

00:08:13,599 --> 00:08:17,039
the first thing is that i have an

00:08:15,039 --> 00:08:17,919
infrastructure pipeline using github

00:08:17,039 --> 00:08:19,360
actions so

00:08:17,919 --> 00:08:21,120
it's a repository that has some

00:08:19,360 --> 00:08:23,360
terraform configuration in it

00:08:21,120 --> 00:08:25,039
and i expect to deploy it to amazon web

00:08:23,360 --> 00:08:26,400
services today

00:08:25,039 --> 00:08:28,240
what i'll do is i'll tell this

00:08:26,400 --> 00:08:29,680
infrastructure pipeline to authenticate

00:08:28,240 --> 00:08:31,919
to vaults first

00:08:29,680 --> 00:08:33,519
after it's authenticated to vault the

00:08:31,919 --> 00:08:35,680
github action for vault

00:08:33,519 --> 00:08:37,120
will retrieve the secrets that i want so

00:08:35,680 --> 00:08:40,080
i'll tell it to retrieve

00:08:37,120 --> 00:08:42,080
a static secret with an admin token the

00:08:40,080 --> 00:08:44,560
reason why i wanted a static secret for

00:08:42,080 --> 00:08:47,279
my database and not just a dynamic

00:08:44,560 --> 00:08:47,920
credential to start is that well my

00:08:47,279 --> 00:08:50,000
database

00:08:47,920 --> 00:08:52,160
doesn't actually exist yet so i can't

00:08:50,000 --> 00:08:54,240
really create a database password and

00:08:52,160 --> 00:08:54,880
username without the database existing

00:08:54,240 --> 00:08:57,200
first

00:08:54,880 --> 00:08:58,160
so i have to be deliberate about passing

00:08:57,200 --> 00:09:00,399
the admin

00:08:58,160 --> 00:09:01,200
password there so i'll retrieve it and

00:09:00,399 --> 00:09:03,600
then

00:09:01,200 --> 00:09:05,600
i'll retrieve the aws credentials so

00:09:03,600 --> 00:09:07,680
this two-step process will allow me

00:09:05,600 --> 00:09:09,200
to authenticate to vault and ultimately

00:09:07,680 --> 00:09:12,480
get the secrets i need

00:09:09,200 --> 00:09:15,040
for my pipeline to run the next step

00:09:12,480 --> 00:09:16,160
is to basically tell aws hey i want to

00:09:15,040 --> 00:09:19,920
log in

00:09:16,160 --> 00:09:22,240
and aws will tell me okay here's a token

00:09:19,920 --> 00:09:24,080
after i get that token i can create that

00:09:22,240 --> 00:09:25,519
managed database

00:09:24,080 --> 00:09:27,360
and after i've created that managed

00:09:25,519 --> 00:09:28,800
database i can continue to configure

00:09:27,360 --> 00:09:30,000
vault to basically get a set of

00:09:28,800 --> 00:09:31,519
read-only credentials for the

00:09:30,000 --> 00:09:33,040
application

00:09:31,519 --> 00:09:34,480
something important to understand about

00:09:33,040 --> 00:09:34,880
this workflow is that some of these

00:09:34,480 --> 00:09:37,440
things

00:09:34,880 --> 00:09:37,920
are over public internet uh you can put

00:09:37,440 --> 00:09:39,920
everything

00:09:37,920 --> 00:09:42,080
over a private connection if you

00:09:39,920 --> 00:09:42,720
actually create uh self-hosted runners

00:09:42,080 --> 00:09:45,040
or

00:09:42,720 --> 00:09:45,920
you put them in the same virtual peering

00:09:45,040 --> 00:09:48,399
connection

00:09:45,920 --> 00:09:49,360
or you peer together with a virtual

00:09:48,399 --> 00:09:51,279
appearing

00:09:49,360 --> 00:09:53,279
vpc with the peering connection between

00:09:51,279 --> 00:09:55,440
them in the case of

00:09:53,279 --> 00:09:57,680
the vault instance the vault instance

00:09:55,440 --> 00:09:58,640
actually is privately connecting to the

00:09:57,680 --> 00:10:01,760
database

00:09:58,640 --> 00:10:04,320
so the database itself doesn't have any

00:10:01,760 --> 00:10:05,440
public connection but the vaults

00:10:04,320 --> 00:10:07,279
instance that i'm using

00:10:05,440 --> 00:10:08,880
is a manage vault instance and it is

00:10:07,279 --> 00:10:11,040
publicly available so

00:10:08,880 --> 00:10:12,959
uh the github action is actually

00:10:11,040 --> 00:10:13,600
connecting to my secrets manager over

00:10:12,959 --> 00:10:15,680
public

00:10:13,600 --> 00:10:17,440
again you can configure this all private

00:10:15,680 --> 00:10:19,040
from a security standpoint but for

00:10:17,440 --> 00:10:20,720
today's demo i'll just demonstrate it

00:10:19,040 --> 00:10:22,560
over the public internet

00:10:20,720 --> 00:10:23,920
all right so this is the workflow at a

00:10:22,560 --> 00:10:27,040
very high level let's dig

00:10:23,920 --> 00:10:28,640
deeper into the code itself i'm going to

00:10:27,040 --> 00:10:30,839
try to share my screen

00:10:28,640 --> 00:10:32,399
and hope that it is large enough for

00:10:30,839 --> 00:10:34,720
everyone

00:10:32,399 --> 00:10:34,720
all right

00:10:38,000 --> 00:10:41,200
sure all right so unfortunately you will

00:10:40,800 --> 00:10:44,000
not

00:10:41,200 --> 00:10:45,120
have my view face of my face on your

00:10:44,000 --> 00:10:47,440
view unfortunately

00:10:45,120 --> 00:10:49,200
uh but what i have is actually the code

00:10:47,440 --> 00:10:50,720
base if you would like to see more of

00:10:49,200 --> 00:10:52,000
this code base you can take a look on

00:10:50,720 --> 00:10:54,640
github

00:10:52,000 --> 00:10:55,920
it's at my handle there so the first

00:10:54,640 --> 00:10:58,079
thing we're going to actually take a

00:10:55,920 --> 00:11:00,640
look at is the workflow itself

00:10:58,079 --> 00:11:02,640
this is actually really amazing to me

00:11:00,640 --> 00:11:05,200
because it's so simplistic

00:11:02,640 --> 00:11:06,959
the first thing that i did was add the

00:11:05,200 --> 00:11:09,440
vault github action

00:11:06,959 --> 00:11:10,720
the vault github action has a set of

00:11:09,440 --> 00:11:13,200
parameters

00:11:10,720 --> 00:11:14,560
that take in the url of the vault

00:11:13,200 --> 00:11:16,480
instance for me i

00:11:14,560 --> 00:11:17,839
use it as a github secret so the address

00:11:16,480 --> 00:11:20,320
role and secret

00:11:17,839 --> 00:11:22,160
as well as the name space and it will

00:11:20,320 --> 00:11:22,720
actually go and authenticate to vault

00:11:22,160 --> 00:11:25,360
without

00:11:22,720 --> 00:11:27,200
me needing to do anything else the next

00:11:25,360 --> 00:11:29,600
important thing that it will do

00:11:27,200 --> 00:11:32,079
is retrieve secrets from my vault

00:11:29,600 --> 00:11:34,240
database or my vault secrets engines so

00:11:32,079 --> 00:11:35,360
vault has a set of plugins that will

00:11:34,240 --> 00:11:37,680
rotate

00:11:35,360 --> 00:11:39,839
all of these kinds of secrets for you

00:11:37,680 --> 00:11:41,200
you can enable them selectively so i for

00:11:39,839 --> 00:11:44,480
example have enabled a

00:11:41,200 --> 00:11:46,480
static key value store this stores my

00:11:44,480 --> 00:11:49,600
static database login and database

00:11:46,480 --> 00:11:51,360
password i also enabled the aws secrets

00:11:49,600 --> 00:11:53,040
engine the aws secrets engine will

00:11:51,360 --> 00:11:56,800
actually handle the rotation

00:11:53,040 --> 00:11:58,160
of aws tokens and access keys and secret

00:11:56,800 --> 00:11:59,440
access keys depending on how you

00:11:58,160 --> 00:12:01,920
configure it

00:11:59,440 --> 00:12:04,160
i also have a token just to store my

00:12:01,920 --> 00:12:06,160
terraform state if you're familiar with

00:12:04,160 --> 00:12:07,839
terraform terraform creates

00:12:06,160 --> 00:12:09,200
infrastructure and it needs to store the

00:12:07,839 --> 00:12:09,920
state of that infrastructure somewhere

00:12:09,200 --> 00:12:12,959
so this is

00:12:09,920 --> 00:12:14,720
for me to securely store that state if i

00:12:12,959 --> 00:12:18,160
actually examine this

00:12:14,720 --> 00:12:19,519
rough api path in vault the api path in

00:12:18,160 --> 00:12:23,200
vault sort of looks like

00:12:19,519 --> 00:12:24,000
this you have an aws api path here which

00:12:23,200 --> 00:12:27,440
is the infrastructure

00:12:24,000 --> 00:12:28,800
pipeline slash aws i also have the aws

00:12:27,440 --> 00:12:30,959
of the static

00:12:28,800 --> 00:12:32,959
section for specifically database

00:12:30,959 --> 00:12:36,079
passwords and user names

00:12:32,959 --> 00:12:38,720
all of this is available all right

00:12:36,079 --> 00:12:39,680
so what i've done is actually pre-staged

00:12:38,720 --> 00:12:41,279
the database

00:12:39,680 --> 00:12:42,880
the reason why i pre-staged the database

00:12:41,279 --> 00:12:44,560
is that sometimes databases take a

00:12:42,880 --> 00:12:46,480
little bit of time to provision

00:12:44,560 --> 00:12:47,920
the database is up and running already

00:12:46,480 --> 00:12:49,040
in aws

00:12:47,920 --> 00:12:50,639
what i'm going to do is actually

00:12:49,040 --> 00:12:52,480
configure the second part of this with a

00:12:50,639 --> 00:12:55,360
pull request

00:12:52,480 --> 00:12:57,920
using the terraform github action i can

00:12:55,360 --> 00:12:58,480
actually i can plan the terraform that i

00:12:57,920 --> 00:13:01,680
expect

00:12:58,480 --> 00:13:02,560
to to use so for example this terraform

00:13:01,680 --> 00:13:04,800
is going to

00:13:02,560 --> 00:13:07,760
configure vault for me it will actually

00:13:04,800 --> 00:13:11,200
add a new secret backend for my postgres

00:13:07,760 --> 00:13:14,639
database that i've provisioned in aws

00:13:11,200 --> 00:13:17,120
when i actually run the plan it will

00:13:14,639 --> 00:13:19,519
funnel this back to my poll request so

00:13:17,120 --> 00:13:21,680
you can see all of the plan information

00:13:19,519 --> 00:13:23,040
you can verify from a team standpoint

00:13:21,680 --> 00:13:24,000
sometimes you want to check if these

00:13:23,040 --> 00:13:26,079
connections

00:13:24,000 --> 00:13:27,360
are are correct or if you maybe

00:13:26,079 --> 00:13:29,360
misconfigured something

00:13:27,360 --> 00:13:31,440
another neat important feature that

00:13:29,360 --> 00:13:34,160
happened in terraform or dot 14

00:13:31,440 --> 00:13:34,720
uh soros recently released is actually

00:13:34,160 --> 00:13:36,959
the

00:13:34,720 --> 00:13:37,920
market mark of sensitive variables so it

00:13:36,959 --> 00:13:39,680
will actually redact

00:13:37,920 --> 00:13:41,120
certain sensitive variables if you mark

00:13:39,680 --> 00:13:43,040
them in

00:13:41,120 --> 00:13:44,560
sort of your terraform configuration in

00:13:43,040 --> 00:13:46,160
the first place

00:13:44,560 --> 00:13:48,079
so all of this is actually planning to

00:13:46,160 --> 00:13:50,880
put a new database secret engine

00:13:48,079 --> 00:13:51,839
and basically this will handle the

00:13:50,880 --> 00:13:54,399
rotation

00:13:51,839 --> 00:13:55,600
of database passwords so while this

00:13:54,399 --> 00:13:58,560
actually

00:13:55,600 --> 00:14:00,880
runs i'm going to confirm and merge a

00:13:58,560 --> 00:14:04,000
request

00:14:00,880 --> 00:14:06,480
all right while that runs i'll actually

00:14:04,000 --> 00:14:07,279
show the aws portion so remember i said

00:14:06,480 --> 00:14:10,160
that the

00:14:07,279 --> 00:14:12,480
pipeline has to connect to aws the

00:14:10,160 --> 00:14:15,440
important way that it connects to aws

00:14:12,480 --> 00:14:15,839
is through the revocation and rotation

00:14:15,440 --> 00:14:19,600
of an

00:14:15,839 --> 00:14:22,880
sts token this token for aws

00:14:19,600 --> 00:14:24,480
only lives for about 30 minutes

00:14:22,880 --> 00:14:26,160
and this is important to understand

00:14:24,480 --> 00:14:28,399
because i'm keeping it a secret through

00:14:26,160 --> 00:14:30,320
ephemerality i'm not letting it stick

00:14:28,399 --> 00:14:31,040
around so remember in my previous

00:14:30,320 --> 00:14:33,680
example

00:14:31,040 --> 00:14:35,839
i put in one year for a secret and i

00:14:33,680 --> 00:14:37,519
never touched it in this case my secret

00:14:35,839 --> 00:14:40,000
only lasts for 30 minutes

00:14:37,519 --> 00:14:41,120
i've run this pipeline about four times

00:14:40,000 --> 00:14:43,760
in the past

00:14:41,120 --> 00:14:44,399
hour and the three times that i had run

00:14:43,760 --> 00:14:46,560
it

00:14:44,399 --> 00:14:48,240
already expired so that's actually what

00:14:46,560 --> 00:14:49,839
you see when i list

00:14:48,240 --> 00:14:52,240
the leases which is the passwords that

00:14:49,839 --> 00:14:54,800
have been generated for aws

00:14:52,240 --> 00:14:56,240
i just ran this so i got one aws

00:14:54,800 --> 00:14:57,839
credential on demand

00:14:56,240 --> 00:15:00,560
the next time i run this i'll get

00:14:57,839 --> 00:15:04,000
another aws credential on demand

00:15:00,560 --> 00:15:06,560
i tune the kind of configuration i want

00:15:04,000 --> 00:15:08,320
for the time to live of that secret if i

00:15:06,560 --> 00:15:10,320
don't need that eriebus credential

00:15:08,320 --> 00:15:11,760
for more than an hour i don't need it

00:15:10,320 --> 00:15:13,440
for more than an hour

00:15:11,760 --> 00:15:15,199
my recommendation is tune the

00:15:13,440 --> 00:15:16,880
credentials that you need for the amount

00:15:15,199 --> 00:15:18,560
of time based on how long your pipeline

00:15:16,880 --> 00:15:20,399
runs right in the case of infrastructure

00:15:18,560 --> 00:15:22,320
pipelines some of them can be very long

00:15:20,399 --> 00:15:23,920
running they can be like an hour

00:15:22,320 --> 00:15:26,079
because you're creating those resources

00:15:23,920 --> 00:15:28,160
so make sure you give it enough time

00:15:26,079 --> 00:15:30,000
so that the pipeline can use the set of

00:15:28,160 --> 00:15:32,720
credentials properly

00:15:30,000 --> 00:15:34,240
but in this case i have a set of one

00:15:32,720 --> 00:15:35,920
credential because i've only run this

00:15:34,240 --> 00:15:38,639
pipeline once

00:15:35,920 --> 00:15:39,120
you also notice that i've printed the

00:15:38,639 --> 00:15:41,839
vault

00:15:39,120 --> 00:15:42,800
credential vault generation of database

00:15:41,839 --> 00:15:44,800
credentials

00:15:42,800 --> 00:15:46,480
and it says there's no value basically i

00:15:44,800 --> 00:15:47,839
haven't generated any database

00:15:46,480 --> 00:15:50,480
credentials yet

00:15:47,839 --> 00:15:53,360
i'm using a static database password for

00:15:50,480 --> 00:15:54,639
the admin i can always change that

00:15:53,360 --> 00:15:57,120
all right so let's see if this is done

00:15:54,639 --> 00:16:01,440
running hopefully it's done running

00:15:57,120 --> 00:16:04,480
still running all right so this is done

00:16:01,440 --> 00:16:05,199
in this github actions workflow i've set

00:16:04,480 --> 00:16:07,360
up

00:16:05,199 --> 00:16:09,040
a couple steps again importing the

00:16:07,360 --> 00:16:10,800
secrets i verify to make sure that

00:16:09,040 --> 00:16:12,639
they've been injected into the pipeline

00:16:10,800 --> 00:16:14,240
remember this is the aws secret and the

00:16:12,639 --> 00:16:16,399
static database password

00:16:14,240 --> 00:16:17,839
i'll also set up terraform as well as

00:16:16,399 --> 00:16:20,160
format and initialize

00:16:17,839 --> 00:16:22,480
and apply everything so now this is

00:16:20,160 --> 00:16:25,759
actually a database that i can run

00:16:22,480 --> 00:16:27,759
and try to log into all right

00:16:25,759 --> 00:16:28,880
so finally the second portion of this

00:16:27,759 --> 00:16:31,680
and i think the most

00:16:28,880 --> 00:16:33,360
interesting portion remember the

00:16:31,680 --> 00:16:34,880
database password can be used by a lot

00:16:33,360 --> 00:16:36,079
of different applications it can be used

00:16:34,880 --> 00:16:37,360
by many different

00:16:36,079 --> 00:16:40,160
you know people for even just

00:16:37,360 --> 00:16:43,440
verification debugging and tracking

00:16:40,160 --> 00:16:46,800
what i can do is now create a database

00:16:43,440 --> 00:16:47,279
credential on demand so if i am going to

00:16:46,800 --> 00:16:49,360
go

00:16:47,279 --> 00:16:51,519
and let's say log into this database

00:16:49,360 --> 00:16:53,279
read only i just want to have my

00:16:51,519 --> 00:16:54,079
application pull some information from

00:16:53,279 --> 00:16:56,240
it

00:16:54,079 --> 00:16:58,000
i can actually request to vault and say

00:16:56,240 --> 00:16:58,800
hey can you just give me a database

00:16:58,000 --> 00:17:00,480
credential

00:16:58,800 --> 00:17:03,199
so that's actually what i'm going to do

00:17:00,480 --> 00:17:04,319
i'm going to get a database credential

00:17:03,199 --> 00:17:05,600
and hopefully i'm typing the right

00:17:04,319 --> 00:17:08,640
command because i didn't feel like

00:17:05,600 --> 00:17:08,640
copying and pasting today

00:17:09,679 --> 00:17:14,720
right let's do this

00:17:15,039 --> 00:17:18,959
if any if by the way if you actually

00:17:16,959 --> 00:17:20,640
want to refer to more of this

00:17:18,959 --> 00:17:22,640
you're welcome to go into this

00:17:20,640 --> 00:17:24,640
repository and try to run it on your own

00:17:22,640 --> 00:17:25,679
it does configure vault for you and i

00:17:24,640 --> 00:17:29,200
did not get into

00:17:25,679 --> 00:17:30,320
exactly some of the vault configurations

00:17:29,200 --> 00:17:31,760
if you're actually doing this in your

00:17:30,320 --> 00:17:32,880
organization you want a vault

00:17:31,760 --> 00:17:34,880
administrator

00:17:32,880 --> 00:17:37,039
who has configured this for a good

00:17:34,880 --> 00:17:40,799
portion of this for you

00:17:37,039 --> 00:17:43,840
so in this case i have retrieved a

00:17:40,799 --> 00:17:45,679
read only database credential

00:17:43,840 --> 00:17:47,679
this is read only by configuration

00:17:45,679 --> 00:17:50,480
myvault administrator which is me

00:17:47,679 --> 00:17:52,080
configure this to be read only and now

00:17:50,480 --> 00:17:54,160
we've got a vault list

00:17:52,080 --> 00:17:55,760
so when i list the number the

00:17:54,160 --> 00:17:57,679
credentials that i've generated

00:17:55,760 --> 00:17:59,039
i only have one set of database

00:17:57,679 --> 00:18:01,280
credentials

00:17:59,039 --> 00:18:02,799
which is really powerful if i issue and

00:18:01,280 --> 00:18:04,240
try to get another set of database

00:18:02,799 --> 00:18:06,080
credentials

00:18:04,240 --> 00:18:07,520
i'll actually see two database

00:18:06,080 --> 00:18:09,520
credentials issued

00:18:07,520 --> 00:18:10,720
i did not print out the password by the

00:18:09,520 --> 00:18:12,559
way i was told do not print out

00:18:10,720 --> 00:18:15,280
passwords during live demos

00:18:12,559 --> 00:18:17,120
this is a username so don't fear this is

00:18:15,280 --> 00:18:17,919
a username it will get revoked in about

00:18:17,120 --> 00:18:19,280
20 minutes

00:18:17,919 --> 00:18:21,280
i've set the time to live for the

00:18:19,280 --> 00:18:21,840
database credentials specifically to 20

00:18:21,280 --> 00:18:23,600
minutes

00:18:21,840 --> 00:18:25,120
and the database itself is not publicly

00:18:23,600 --> 00:18:26,720
accessible so unless you can find the

00:18:25,120 --> 00:18:27,679
database and access it there's not much

00:18:26,720 --> 00:18:29,600
you could do

00:18:27,679 --> 00:18:31,840
but basically the whole workflow that

00:18:29,600 --> 00:18:35,039
i've demonstrated here allows you

00:18:31,840 --> 00:18:37,440
to retrieve secrets on demand

00:18:35,039 --> 00:18:39,520
no matter what kind of application you

00:18:37,440 --> 00:18:41,919
have no matter what kind

00:18:39,520 --> 00:18:42,640
of you know information you're trying to

00:18:41,919 --> 00:18:44,720
store

00:18:42,640 --> 00:18:47,120
the idea is that you can go to a secrets

00:18:44,720 --> 00:18:48,880
manager the secrets manager will handle

00:18:47,120 --> 00:18:50,880
all of the steps you need in order to

00:18:48,880 --> 00:18:51,919
keep a secret a secret especially in a

00:18:50,880 --> 00:18:53,919
pipeline

00:18:51,919 --> 00:18:55,120
there are a lot of deeper nuances to

00:18:53,919 --> 00:18:57,200
configuring

00:18:55,120 --> 00:18:58,160
some of this workflow especially if

00:18:57,200 --> 00:19:00,559
you've got different

00:18:58,160 --> 00:19:01,200
methods and different databases for

00:19:00,559 --> 00:19:03,360
example

00:19:01,200 --> 00:19:04,320
in the high level architecture that i

00:19:03,360 --> 00:19:06,880
have here

00:19:04,320 --> 00:19:07,919
i'm using some specific authentication

00:19:06,880 --> 00:19:09,679
methods you can use

00:19:07,919 --> 00:19:11,120
authentication methods to vault for

00:19:09,679 --> 00:19:12,799
github for example

00:19:11,120 --> 00:19:14,320
and you will have to configure that as

00:19:12,799 --> 00:19:15,919
part of your github action

00:19:14,320 --> 00:19:18,000
but all of it is open source and all of

00:19:15,919 --> 00:19:19,760
it is supported so you're welcome to go

00:19:18,000 --> 00:19:20,080
dig into the documentation and if you

00:19:19,760 --> 00:19:21,919
have

00:19:20,080 --> 00:19:23,520
any questions you're more than welcome

00:19:21,919 --> 00:19:27,120
to reach out to me

00:19:23,520 --> 00:19:31,520
or any of the team at hashicorp

00:19:27,120 --> 00:19:31,520
finally next please

00:19:31,840 --> 00:19:35,120
all right finally if you want to

00:19:33,600 --> 00:19:36,320
reference this pipeline i'm putting the

00:19:35,120 --> 00:19:38,320
url here

00:19:36,320 --> 00:19:40,160
for additional reference and if you are

00:19:38,320 --> 00:19:40,960
curious you want to take it and reverse

00:19:40,160 --> 00:19:43,200
engineer it and

00:19:40,960 --> 00:19:44,240
try to do it yourself and the other

00:19:43,200 --> 00:19:46,480
thing is like if you

00:19:44,240 --> 00:19:47,679
have little knowledge on vault or you're

00:19:46,480 --> 00:19:49,200
trying to get more familiar with

00:19:47,679 --> 00:19:50,880
terraform and vault

00:19:49,200 --> 00:19:52,640
i'll have a list of references here as

00:19:50,880 --> 00:19:54,400
well as the session resources

00:19:52,640 --> 00:19:56,640
take a look at some of the links we have

00:19:54,400 --> 00:19:57,600
tutorials we also have guides on how you

00:19:56,640 --> 00:20:01,039
would configure this

00:19:57,600 --> 00:20:02,559
for your own workflow needs thank you

00:20:01,039 --> 00:20:03,280
and i hope you learned how to keep your

00:20:02,559 --> 00:20:04,720
secrets

00:20:03,280 --> 00:20:07,440
and your infrastructure pipeline a

00:20:04,720 --> 00:20:07,440

YouTube URL: https://www.youtube.com/watch?v=qgF7XquqVSA


