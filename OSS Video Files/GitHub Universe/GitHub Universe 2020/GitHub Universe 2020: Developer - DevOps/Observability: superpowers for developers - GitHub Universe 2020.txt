Title: Observability: superpowers for developers - GitHub Universe 2020
Publication date: 2020-12-10
Playlist: GitHub Universe 2020: Developer - DevOps
Description: 
	Presented by Christine Yen, CEO/Cofounder, Honeycomb

The adoption of observability practices has allowed us to understand our production software in a whole new way. When viewed from the perspective of a developer, it can feel like gaining superpowers. When observability is folded into the development process itself, it represents the potential for a beautifully virtuous cycle: Production stops being just where our development code runs into issues, and it becomes where part of our development process lives. This talk will cover how to implement observability practices (from your tools and from your humans) and what you can achieve as a result.

For more from GitHub Universe 2020, visit https://githubuniverse.com

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:01,490 --> 00:00:08,480
[Music]

00:00:06,000 --> 00:00:08,480
hello

00:00:09,440 --> 00:00:13,120
every time i think i'm full up on the

00:00:11,599 --> 00:00:15,040
superhero genre

00:00:13,120 --> 00:00:16,880
a new movie comes out and sucks me right

00:00:15,040 --> 00:00:18,320
back in uh i think there's something

00:00:16,880 --> 00:00:21,439
irresistible

00:00:18,320 --> 00:00:22,320
and appealing about this fight against

00:00:21,439 --> 00:00:24,400
chaos

00:00:22,320 --> 00:00:26,480
about good people trying their best and

00:00:24,400 --> 00:00:28,960
having to level up fast

00:00:26,480 --> 00:00:30,000
and segway it could also be pretty

00:00:28,960 --> 00:00:31,920
reliable

00:00:30,000 --> 00:00:33,680
relatable to our lives as developers

00:00:31,920 --> 00:00:35,280
pushing our code into the chaos of

00:00:33,680 --> 00:00:37,440
production

00:00:35,280 --> 00:00:39,600
relatable maybe minus the hollywood

00:00:37,440 --> 00:00:42,239
actors and glitzy production

00:00:39,600 --> 00:00:42,239
let's jump in

00:00:42,640 --> 00:00:46,879
so as we all know all good superhero

00:00:44,800 --> 00:00:50,160
tales start with an origin story

00:00:46,879 --> 00:00:53,760
here's mine i'm christine

00:00:50,160 --> 00:00:55,680
and i am a developer early in my career

00:00:53,760 --> 00:00:57,199
one of the things i took pride in was

00:00:55,680 --> 00:00:58,879
that i was fast

00:00:57,199 --> 00:01:00,480
sometimes it seemed like i was non-stop

00:00:58,879 --> 00:01:04,159
i could just go go

00:01:00,480 --> 00:01:05,840
go get this little cycle going

00:01:04,159 --> 00:01:07,439
and i made it through a few jobs

00:01:05,840 --> 00:01:09,600
actually before i interacted with with

00:01:07,439 --> 00:01:11,360
my first real ops person

00:01:09,600 --> 00:01:12,880
and i met her because i was working on a

00:01:11,360 --> 00:01:14,400
new component of a system

00:01:12,880 --> 00:01:16,240
and that nice little development cycle

00:01:14,400 --> 00:01:18,159
i'd gotten used to

00:01:16,240 --> 00:01:19,680
started to look a little bit more like

00:01:18,159 --> 00:01:22,880
this

00:01:19,680 --> 00:01:24,880
and it became clear to me quickly why

00:01:22,880 --> 00:01:28,720
certain unflattering stereotypes

00:01:24,880 --> 00:01:30,799
or around engineering roles exist

00:01:28,720 --> 00:01:31,840
which is such a shame we could be on the

00:01:30,799 --> 00:01:33,680
same side

00:01:31,840 --> 00:01:35,119
theoretically we are on the same side

00:01:33,680 --> 00:01:37,360
we're just trying to provide a great

00:01:35,119 --> 00:01:39,360
experience for our users

00:01:37,360 --> 00:01:40,560
but what we were doing hunkering down

00:01:39,360 --> 00:01:42,399
refusing to see the other side's

00:01:40,560 --> 00:01:44,479
perspective

00:01:42,399 --> 00:01:45,759
blaming them for some failure or

00:01:44,479 --> 00:01:49,200
downtime

00:01:45,759 --> 00:01:51,040
just made it harder to get that done

00:01:49,200 --> 00:01:53,119
since then fortunately the world has

00:01:51,040 --> 00:01:54,960
changed in a way that means

00:01:53,119 --> 00:01:56,719
whether we like it or not dev and ops

00:01:54,960 --> 00:01:58,240
have to learn how to work more closely

00:01:56,719 --> 00:02:00,479
together

00:01:58,240 --> 00:02:02,320
the days of having one database and one

00:02:00,479 --> 00:02:03,280
monolithic application running on one

00:02:02,320 --> 00:02:06,640
server or

00:02:03,280 --> 00:02:08,640
a handful are gone we've decoupled and

00:02:06,640 --> 00:02:10,239
decomposed everything to the point where

00:02:08,640 --> 00:02:11,920
no one person

00:02:10,239 --> 00:02:14,480
or an ops team in the absence of

00:02:11,920 --> 00:02:17,120
developers can make sense of it anymore

00:02:14,480 --> 00:02:18,480
and this old pattern of developers write

00:02:17,120 --> 00:02:20,959
code on their machines

00:02:18,480 --> 00:02:22,640
ops worries about it after release it's

00:02:20,959 --> 00:02:25,680
already started falling apart

00:02:22,640 --> 00:02:27,200
and in its place teams are building a

00:02:25,680 --> 00:02:31,120
shared sense of ownership

00:02:27,200 --> 00:02:33,360
of production how well

00:02:31,120 --> 00:02:35,599
if the first wave of devops was for ops

00:02:33,360 --> 00:02:38,080
folks to learn how to code

00:02:35,599 --> 00:02:39,360
or to automate their work the second

00:02:38,080 --> 00:02:41,840
wave of devops

00:02:39,360 --> 00:02:43,280
is for developers for us to learn how to

00:02:41,840 --> 00:02:46,800
own our code

00:02:43,280 --> 00:02:49,040
in production and that little bridge

00:02:46,800 --> 00:02:50,640
my favorite way to blur the lines

00:02:49,040 --> 00:02:54,080
between dev and ops

00:02:50,640 --> 00:02:55,840
is through observability now

00:02:54,080 --> 00:02:57,200
there's an old school definition of it

00:02:55,840 --> 00:02:59,519
which is useful when talking about

00:02:57,200 --> 00:03:01,200
disciplines like spaceflight mechanical

00:02:59,519 --> 00:03:02,800
engineering

00:03:01,200 --> 00:03:04,640
in today's software world i like to

00:03:02,800 --> 00:03:06,159
think of it as

00:03:04,640 --> 00:03:07,920
why is my software behaving like that

00:03:06,159 --> 00:03:09,360
over there

00:03:07,920 --> 00:03:10,959
observability is more than just a tool

00:03:09,360 --> 00:03:12,400
chain it's about the culture and

00:03:10,959 --> 00:03:14,480
processes of a team

00:03:12,400 --> 00:03:18,000
and how the entire engineering org

00:03:14,480 --> 00:03:20,879
thinks about production

00:03:18,000 --> 00:03:22,319
so why is this especially interesting

00:03:20,879 --> 00:03:24,560
for developers

00:03:22,319 --> 00:03:26,720
isn't observability like monitoring and

00:03:24,560 --> 00:03:29,519
more of an ops thing

00:03:26,720 --> 00:03:30,640
i say no observability is relevant to

00:03:29,519 --> 00:03:33,280
developers because

00:03:30,640 --> 00:03:35,360
in a way we're already doing it we have

00:03:33,280 --> 00:03:37,360
the most to gain

00:03:35,360 --> 00:03:38,640
so many of the right instincts for

00:03:37,360 --> 00:03:40,000
catching problems in production are

00:03:38,640 --> 00:03:41,280
already in place

00:03:40,000 --> 00:03:43,200
if we look at our modern software

00:03:41,280 --> 00:03:44,799
development process it's already

00:03:43,200 --> 00:03:46,799
so full of curiosity just look at the

00:03:44,799 --> 00:03:48,879
number of times

00:03:46,799 --> 00:03:50,640
we you know include this concept of

00:03:48,879 --> 00:03:52,959
testing comparing the code that we think

00:03:50,640 --> 00:03:54,400
that we wrote versus how it actually ran

00:03:52,959 --> 00:03:56,959
and we do it again and again as the

00:03:54,400 --> 00:03:58,959
environment gets more complicated

00:03:56,959 --> 00:04:00,000
even this last step something that

00:03:58,959 --> 00:04:02,319
previously fell

00:04:00,000 --> 00:04:06,319
on the upside of the deployment wall can

00:04:02,319 --> 00:04:06,319
be considered a form of testing

00:04:06,799 --> 00:04:10,480
writing pre-production tests good

00:04:09,280 --> 00:04:12,319
pre-production tests

00:04:10,480 --> 00:04:14,319
is all about thinking through various

00:04:12,319 --> 00:04:15,200
scenarios right describing how our code

00:04:14,319 --> 00:04:17,359
behaves

00:04:15,200 --> 00:04:18,799
and then investigating when it deviates

00:04:17,359 --> 00:04:20,320
from those expectations

00:04:18,799 --> 00:04:22,240
the more practice we get at it the

00:04:20,320 --> 00:04:24,080
better our code gets because we begin

00:04:22,240 --> 00:04:26,320
thinking ahead and explicitly examining

00:04:24,080 --> 00:04:28,320
our assumptions

00:04:26,320 --> 00:04:29,840
when folks look at graphs of how systems

00:04:28,320 --> 00:04:31,040
behave in production

00:04:29,840 --> 00:04:32,880
they're basically doing the exact same

00:04:31,040 --> 00:04:35,919
thing trying to figure out why the

00:04:32,880 --> 00:04:37,919
nicely behaved system that we expect

00:04:35,919 --> 00:04:39,759
is behaving a little bit more like a

00:04:37,919 --> 00:04:41,520
whole different beast

00:04:39,759 --> 00:04:43,120
and as we transfer what we do in our

00:04:41,520 --> 00:04:44,639
written tests

00:04:43,120 --> 00:04:46,639
to graphs describing what we're doing in

00:04:44,639 --> 00:04:48,560
production we

00:04:46,639 --> 00:04:49,840
will be the ones who will be best

00:04:48,560 --> 00:04:52,960
positioned to handle it

00:04:49,840 --> 00:04:54,639
when expected deviates from actual

00:04:52,960 --> 00:04:56,560
and then suddenly what ops does in

00:04:54,639 --> 00:04:58,960
production what ops used to do

00:04:56,560 --> 00:05:02,240
versus what devs should do doesn't feel

00:04:58,960 --> 00:05:02,240
like such a sharp line after all

00:05:03,120 --> 00:05:06,720
okay so we're bought in we've set the

00:05:06,080 --> 00:05:09,120
scene

00:05:06,720 --> 00:05:10,560
we know our players now we can activate

00:05:09,120 --> 00:05:13,600
our powers

00:05:10,560 --> 00:05:15,680
earlier when i described observability

00:05:13,600 --> 00:05:18,000
you'll notice i use lots of verbs

00:05:15,680 --> 00:05:20,560
understanding asking questions

00:05:18,000 --> 00:05:21,280
because not just having a tool isn't

00:05:20,560 --> 00:05:24,639
enough

00:05:21,280 --> 00:05:26,320
to let you do the powerful thing

00:05:24,639 --> 00:05:28,240
there's a few things that we need to do

00:05:26,320 --> 00:05:30,720
or can do ahead of time to make this

00:05:28,240 --> 00:05:32,479
easier for the developers

00:05:30,720 --> 00:05:34,160
first one of the first things to really

00:05:32,479 --> 00:05:36,000
empower developers in production is to

00:05:34,160 --> 00:05:39,280
teach production tools

00:05:36,000 --> 00:05:40,400
to speak our language traditional

00:05:39,280 --> 00:05:42,080
monitoring tools

00:05:40,400 --> 00:05:44,479
tend to assume their users care about a

00:05:42,080 --> 00:05:46,320
certain subset of nouns

00:05:44,479 --> 00:05:48,880
and they often don't tie directly back

00:05:46,320 --> 00:05:51,440
to the concepts i deal with in my code

00:05:48,880 --> 00:05:52,080
having an ops person come to me angry

00:05:51,440 --> 00:05:54,320
that

00:05:52,080 --> 00:05:56,800
cpu utilization is up on a particular

00:05:54,320 --> 00:05:58,880
subset of cassandra nodes

00:05:56,800 --> 00:06:00,160
tells me nothing about how to go about

00:05:58,880 --> 00:06:03,440
diagnosing the issue

00:06:00,160 --> 00:06:05,280
much less how to fix it in my code

00:06:03,440 --> 00:06:07,440
compare that to the sorts of nouns that

00:06:05,280 --> 00:06:09,440
appear naturally in my tests

00:06:07,440 --> 00:06:11,440
things that i know will trigger

00:06:09,440 --> 00:06:13,680
different behaviors in the code itself

00:06:11,440 --> 00:06:15,600
if instead of getting alerted about

00:06:13,680 --> 00:06:17,680
cassandra right through it

00:06:15,600 --> 00:06:18,960
what if i found out that the latest

00:06:17,680 --> 00:06:21,600
deploys seems to

00:06:18,960 --> 00:06:22,720
result in increased latency for a

00:06:21,600 --> 00:06:24,639
payment endpoint

00:06:22,720 --> 00:06:26,080
and our second largest customer was

00:06:24,639 --> 00:06:27,120
impacted

00:06:26,080 --> 00:06:28,319
well that gives me a much better

00:06:27,120 --> 00:06:29,280
starting point for reproducing that

00:06:28,319 --> 00:06:35,120
behavior

00:06:29,280 --> 00:06:38,160
possibly in a test and fixing that issue

00:06:35,120 --> 00:06:40,479
high cardinality data is also key

00:06:38,160 --> 00:06:42,080
those fields that hold a ton of

00:06:40,479 --> 00:06:43,600
potential values

00:06:42,080 --> 00:06:46,240
again these are the names i deal with

00:06:43,600 --> 00:06:48,319
day to day that capture characteristics

00:06:46,240 --> 00:06:50,000
of the workloads that i'm using that

00:06:48,319 --> 00:06:51,919
change how my code behaves

00:06:50,000 --> 00:06:54,000
and these are the nouns that i'll want

00:06:51,919 --> 00:06:56,639
to slice and dice by to understand

00:06:54,000 --> 00:06:58,960
who's being impacted and how to go about

00:06:56,639 --> 00:07:01,599
putting together a fix

00:06:58,960 --> 00:07:02,880
to ground this in reality build id it's

00:07:01,599 --> 00:07:05,280
one of my favorite

00:07:02,880 --> 00:07:06,720
stealthy high cardinality attributes

00:07:05,280 --> 00:07:09,120
right

00:07:06,720 --> 00:07:10,800
theoretically unbounded set of values

00:07:09,120 --> 00:07:12,160
but also one of the most immediately

00:07:10,800 --> 00:07:13,919
useful

00:07:12,160 --> 00:07:16,639
this is a screenshot of our dog food

00:07:13,919 --> 00:07:19,360
instance of honeycomb

00:07:16,639 --> 00:07:21,280
and it is a data set that represents our

00:07:19,360 --> 00:07:22,960
traffic hitting our web app

00:07:21,280 --> 00:07:24,560
you'll see the second starter query that

00:07:22,960 --> 00:07:26,080
i've circled

00:07:24,560 --> 00:07:27,599
that our engineers have configured is

00:07:26,080 --> 00:07:30,080
just one that asks

00:07:27,599 --> 00:07:31,199
has the code i care about been deployed

00:07:30,080 --> 00:07:34,319
yet

00:07:31,199 --> 00:07:34,960
super simple and often hard to do hard

00:07:34,319 --> 00:07:39,280
to get in

00:07:34,960 --> 00:07:39,280
our traditional monitoring tools

00:07:39,919 --> 00:07:44,479
finally we should treat instrumentation

00:07:41,919 --> 00:07:46,400
like docs and tests

00:07:44,479 --> 00:07:48,160
we know that the easier it is to write

00:07:46,400 --> 00:07:50,080
and run pre-production tests

00:07:48,160 --> 00:07:51,919
the more folks will write them the

00:07:50,080 --> 00:07:55,280
easier they'll be to update

00:07:51,919 --> 00:07:55,280
the same is true of instrumentation

00:07:56,080 --> 00:08:00,639
all of these things lead to developers

00:07:58,400 --> 00:08:03,520
being more comfortable with production

00:08:00,639 --> 00:08:04,160
and production not feeling like some far

00:08:03,520 --> 00:08:06,400
away

00:08:04,160 --> 00:08:07,599
magical mysterious place anymore but

00:08:06,400 --> 00:08:10,840
instead just

00:08:07,599 --> 00:08:12,160
an extension of our development

00:08:10,840 --> 00:08:13,919
environment

00:08:12,160 --> 00:08:15,680
so we just talked about a bunch of nouns

00:08:13,919 --> 00:08:17,360
making sure those line up

00:08:15,680 --> 00:08:19,599
but we can reach for different visuals

00:08:17,360 --> 00:08:23,199
too to help map production artifacts

00:08:19,599 --> 00:08:25,120
back to developer world concepts

00:08:23,199 --> 00:08:27,520
tracing is one of the most developer

00:08:25,120 --> 00:08:29,599
friendly evolutions yet in this industry

00:08:27,520 --> 00:08:31,680
you look at a trace you can immediately

00:08:29,599 --> 00:08:34,080
start to map that to your mental model

00:08:31,680 --> 00:08:37,440
of how code executes

00:08:34,080 --> 00:08:37,440
back to developer world concepts

00:08:37,680 --> 00:08:42,560
someone recently described tracing as um

00:08:40,640 --> 00:08:43,680
chrome developer tools for non-browser

00:08:42,560 --> 00:08:47,040
software

00:08:43,680 --> 00:08:48,720
which i loved because it's true

00:08:47,040 --> 00:08:50,959
and it's so exciting to be able to

00:08:48,720 --> 00:08:52,480
connect this very developer friendly

00:08:50,959 --> 00:08:54,959
final representation of

00:08:52,480 --> 00:08:55,600
something happening in production where

00:08:54,959 --> 00:08:58,640
i can see

00:08:55,600 --> 00:09:01,279
surface boundaries and function names

00:08:58,640 --> 00:09:02,959
to the graphs and higher level analyses

00:09:01,279 --> 00:09:06,959
that let us understand

00:09:02,959 --> 00:09:06,959
how our code is running in context

00:09:07,600 --> 00:09:10,640
we need graphs to be able to pick out

00:09:09,120 --> 00:09:11,680
patterns and understand what happens

00:09:10,640 --> 00:09:13,680
when we run that code

00:09:11,680 --> 00:09:15,120
over and over and over again not just in

00:09:13,680 --> 00:09:16,640
a test environment

00:09:15,120 --> 00:09:18,480
and having both being able to switch

00:09:16,640 --> 00:09:20,160
back and forth between the two

00:09:18,480 --> 00:09:22,240
is what allows us to take that

00:09:20,160 --> 00:09:25,760
production sense and map it to

00:09:22,240 --> 00:09:25,760
what feels natural as a developer

00:09:26,720 --> 00:09:33,839
and tracing has cleverly found a way to

00:09:30,720 --> 00:09:34,240
make logs tractable and meaningful we're

00:09:33,839 --> 00:09:35,839
not

00:09:34,240 --> 00:09:37,279
in a log scale world anymore all right

00:09:35,839 --> 00:09:39,120
logs are no longer human scale

00:09:37,279 --> 00:09:41,760
anymore everything's machine scale

00:09:39,120 --> 00:09:41,760
everything is huge

00:09:41,839 --> 00:09:45,120
once you add a little bit of structure

00:09:42,959 --> 00:09:46,640
into your logs some semblance of

00:09:45,120 --> 00:09:48,720
hierarchy

00:09:46,640 --> 00:09:50,000
to tie individual log lines together and

00:09:48,720 --> 00:09:52,000
you start to get something

00:09:50,000 --> 00:09:54,720
that again better reflects the code

00:09:52,000 --> 00:09:56,480
feeds our understanding of production

00:09:54,720 --> 00:09:58,640
tracing is what happens when logs grow

00:09:56,480 --> 00:09:58,640
up

00:10:00,480 --> 00:10:04,800
so what does this all look like how does

00:10:02,480 --> 00:10:05,680
that virtuous cycle make me better at

00:10:04,800 --> 00:10:08,720
doing what

00:10:05,680 --> 00:10:10,160
i actually care about writing code well

00:10:08,720 --> 00:10:12,399
let's run through let's run through a

00:10:10,160 --> 00:10:14,399
few examples

00:10:12,399 --> 00:10:16,399
when observability is our superpower we

00:10:14,399 --> 00:10:18,959
can use it to figure out

00:10:16,399 --> 00:10:19,440
what code to write in the first place

00:10:18,959 --> 00:10:22,560
right

00:10:19,440 --> 00:10:24,240
when we start our days it often or

00:10:22,560 --> 00:10:27,120
when we see a ticket or get started with

00:10:24,240 --> 00:10:29,200
a new task often there's a frustratingly

00:10:27,120 --> 00:10:31,040
vague complaint something is slow

00:10:29,200 --> 00:10:33,680
something is broken

00:10:31,040 --> 00:10:35,120
okay what's slow is everything slow are

00:10:33,680 --> 00:10:38,399
only some operations slow

00:10:35,120 --> 00:10:38,399
sometimes for some users

00:10:38,959 --> 00:10:42,480
exploring and investigating these sorts

00:10:40,959 --> 00:10:43,839
of questions in order to figure out

00:10:42,480 --> 00:10:45,360
where to begin with our code

00:10:43,839 --> 00:10:47,040
should feel like the way that we

00:10:45,360 --> 00:10:49,440
investigate anything in life

00:10:47,040 --> 00:10:51,120
by asking new questions and exploring

00:10:49,440 --> 00:10:52,720
starting at a high level

00:10:51,120 --> 00:10:54,560
identifying differences between

00:10:52,720 --> 00:10:56,320
expectations and reality

00:10:54,560 --> 00:10:58,880
and then teasing apart that signal from

00:10:56,320 --> 00:11:01,040
noise iterating and zooming until we can

00:10:58,880 --> 00:11:02,720
isolate something interesting

00:11:01,040 --> 00:11:04,800
and then being able to flip into that

00:11:02,720 --> 00:11:08,320
specific example to understand

00:11:04,800 --> 00:11:08,320
how all the building blocks fit together

00:11:12,000 --> 00:11:15,360
and if we do that we can stop guessing

00:11:14,640 --> 00:11:17,279
at

00:11:15,360 --> 00:11:18,720
what we think will fix the problem we

00:11:17,279 --> 00:11:21,680
can we can start to map

00:11:18,720 --> 00:11:22,240
data to okay this this seems like the

00:11:21,680 --> 00:11:25,120
right

00:11:22,240 --> 00:11:27,839
place to focus our efforts these are

00:11:25,120 --> 00:11:29,839
some tweets from cj silvera over at ease

00:11:27,839 --> 00:11:34,079
who recently got our team to invest

00:11:29,839 --> 00:11:35,760
in instrumenting a legacy monolith

00:11:34,079 --> 00:11:37,839
and suddenly realize what it was like to

00:11:35,760 --> 00:11:39,279
be able to see

00:11:37,839 --> 00:11:40,880
the more you can understand what's

00:11:39,279 --> 00:11:43,040
actually happening with your code

00:11:40,880 --> 00:11:44,880
the less scary it is to think about

00:11:43,040 --> 00:11:46,880
changing anything about it

00:11:44,880 --> 00:11:48,880
and by embracing observability we can we

00:11:46,880 --> 00:11:51,200
can learn what to do with our time

00:11:48,880 --> 00:11:52,800
for maximum impact it's no longer a

00:11:51,200 --> 00:11:57,839
scary problem to

00:11:52,800 --> 00:12:00,240
touch this thing that other folks built

00:11:57,839 --> 00:12:02,720
what observability is our superpower we

00:12:00,240 --> 00:12:05,760
can use it to figure out the best way

00:12:02,720 --> 00:12:05,760
to write that code

00:12:06,160 --> 00:12:10,000
again going back to the sometimes you

00:12:09,200 --> 00:12:12,240
get a ticket

00:12:10,000 --> 00:12:14,000
that just says something like build out

00:12:12,240 --> 00:12:16,720
nessa json support

00:12:14,000 --> 00:12:19,200
okay cool well as a developer we know we

00:12:16,720 --> 00:12:21,519
can just build it pull it out

00:12:19,200 --> 00:12:25,600
but first how many users are actually

00:12:21,519 --> 00:12:27,519
using this how might it impact them

00:12:25,600 --> 00:12:29,680
is this what we want who's relying on

00:12:27,519 --> 00:12:31,920
the old behavior

00:12:29,680 --> 00:12:34,240
by by being able to ask these questions

00:12:31,920 --> 00:12:35,839
to understand what normal is

00:12:34,240 --> 00:12:39,040
before we change that normal with our

00:12:35,839 --> 00:12:41,920
code we can figure out if the fix

00:12:39,040 --> 00:12:43,600
will actually be a fix all of these

00:12:41,920 --> 00:12:44,880
domain specific pieces of metadata i

00:12:43,600 --> 00:12:47,200
talked about earlier

00:12:44,880 --> 00:12:48,720
they're what help us understand does it

00:12:47,200 --> 00:12:53,360
matter to the business does this matter

00:12:48,720 --> 00:12:55,680
to my users

00:12:53,360 --> 00:12:56,560
instrumentation basically turns

00:12:55,680 --> 00:12:58,959
production

00:12:56,560 --> 00:13:00,399
into one giant machine spitting out

00:12:58,959 --> 00:13:04,079
debug statements

00:13:00,399 --> 00:13:04,079
but just against real world traffic

00:13:04,160 --> 00:13:07,360
you know some um some folks out there

00:13:05,920 --> 00:13:08,240
might be sitting and thinking well this

00:13:07,360 --> 00:13:09,680
is this is what my

00:13:08,240 --> 00:13:11,760
product manager does right we're product

00:13:09,680 --> 00:13:14,880
managers out there thinking about

00:13:11,760 --> 00:13:16,800
what to do and and uh you know building

00:13:14,880 --> 00:13:19,360
their plans based on intuition and

00:13:16,800 --> 00:13:20,560
qualitative interviews well we're

00:13:19,360 --> 00:13:22,399
developers

00:13:20,560 --> 00:13:25,440
we have access to prod we can make

00:13:22,399 --> 00:13:25,440
arguments based on data

00:13:26,959 --> 00:13:31,839
when observability is our superpower we

00:13:28,959 --> 00:13:34,959
can use it to even anticipate issues

00:13:31,839 --> 00:13:38,160
and predict the future

00:13:34,959 --> 00:13:41,360
complex systems our systems today

00:13:38,160 --> 00:13:42,079
have an almost have an infinitely long

00:13:41,360 --> 00:13:45,279
list

00:13:42,079 --> 00:13:46,320
of almost impossible failure scenarios

00:13:45,279 --> 00:13:47,839
our systems are only getting more

00:13:46,320 --> 00:13:49,040
complex which means that our previous

00:13:47,839 --> 00:13:51,120
approach

00:13:49,040 --> 00:13:52,399
of trying to guess at the future

00:13:51,120 --> 00:13:54,800
enshrining guesses

00:13:52,399 --> 00:13:56,480
into pre-production test cases or

00:13:54,800 --> 00:13:58,639
dashboards on a wall

00:13:56,480 --> 00:14:00,800
metaphorical wall in this world isn't

00:13:58,639 --> 00:14:02,160
going to be enough

00:14:00,800 --> 00:14:04,320
we have to move away from trying to

00:14:02,160 --> 00:14:06,240
predict each of these incredibly rare

00:14:04,320 --> 00:14:07,680
extremely unpredictable black swan

00:14:06,240 --> 00:14:10,240
failure scenarios

00:14:07,680 --> 00:14:12,000
and embrace observability to make sure

00:14:10,240 --> 00:14:15,120
that if something happens

00:14:12,000 --> 00:14:16,720
we find out immediately

00:14:15,120 --> 00:14:19,360
and have enough information to know what

00:14:16,720 --> 00:14:19,360
to do about it

00:14:22,000 --> 00:14:25,360
test and production has become a

00:14:23,760 --> 00:14:28,000
polarizing phrase for some

00:14:25,360 --> 00:14:30,399
so necessary disclaimer this does not

00:14:28,000 --> 00:14:33,600
mean to not test before production

00:14:30,399 --> 00:14:35,920
but production is a great test bed for

00:14:33,600 --> 00:14:37,040
hypotheses

00:14:35,920 --> 00:14:39,760
i'm going to tell a story about our

00:14:37,040 --> 00:14:42,079
friends of right gecko board

00:14:39,760 --> 00:14:43,440
who we're building out a new feature

00:14:42,079 --> 00:14:45,040
that essentially reduced to the bin

00:14:43,440 --> 00:14:46,399
packing problem right an mp complete

00:14:45,040 --> 00:14:46,880
problem lots of possible ways to solve

00:14:46,399 --> 00:14:49,360
it

00:14:46,880 --> 00:14:51,279
um no one you know necessarily blessed

00:14:49,360 --> 00:14:53,839
best solution

00:14:51,279 --> 00:14:55,360
and instead of having an engineer or

00:14:53,839 --> 00:14:57,360
multiple engineers kind of go off and

00:14:55,360 --> 00:14:59,760
build something and test something and

00:14:57,360 --> 00:15:01,279
run simulations and try to guess at what

00:14:59,760 --> 00:15:04,560
would work best for their

00:15:01,279 --> 00:15:06,079
use case they

00:15:04,560 --> 00:15:08,160
came up with a few different hypotheses

00:15:06,079 --> 00:15:10,079
three different algorithms that they put

00:15:08,160 --> 00:15:12,240
in product they ran production traffic

00:15:10,079 --> 00:15:14,399
against captured the output

00:15:12,240 --> 00:15:16,399
stored the output threw away the results

00:15:14,399 --> 00:15:19,120
no user impact

00:15:16,399 --> 00:15:21,279
but they were able to measure how each

00:15:19,120 --> 00:15:24,000
of their experiments ran

00:15:21,279 --> 00:15:25,440
they were able to by the end of a day

00:15:24,000 --> 00:15:27,120
say hey this one looks like it's best

00:15:25,440 --> 00:15:28,399
against our ship of traffic and our

00:15:27,120 --> 00:15:30,000
current customers let's move forward

00:15:28,399 --> 00:15:32,560
with that

00:15:30,000 --> 00:15:33,759
and all of this is possible because

00:15:32,560 --> 00:15:37,279
their tools supported

00:15:33,759 --> 00:15:40,079
these ad hoc experiments their team

00:15:37,279 --> 00:15:41,519
believed in flexible instrumentation and

00:15:40,079 --> 00:15:43,040
their development team

00:15:41,519 --> 00:15:46,079
had gotten comfortable running

00:15:43,040 --> 00:15:46,079
experiments in production

00:15:47,600 --> 00:15:50,959
finally i love the superpower because it

00:15:49,839 --> 00:15:52,000
pairs so well

00:15:50,959 --> 00:15:54,720
with these other techniques that are

00:15:52,000 --> 00:15:57,040
becoming commonplace in our modern

00:15:54,720 --> 00:15:57,839
development processes feature flags are

00:15:57,040 --> 00:15:59,279
great

00:15:57,839 --> 00:16:01,040
it's incredibly powerful to be able to

00:15:59,279 --> 00:16:03,519
test out code on a very small

00:16:01,040 --> 00:16:04,399
amount of traffic it's even more

00:16:03,519 --> 00:16:06,399
powerful

00:16:04,399 --> 00:16:07,600
when we can take those feature flag

00:16:06,399 --> 00:16:09,600
values on off

00:16:07,600 --> 00:16:10,880
you know these 15 feature flags all

00:16:09,600 --> 00:16:12,399
converging

00:16:10,880 --> 00:16:14,560
take those values and pump it into our

00:16:12,399 --> 00:16:16,240
tools we pump it into our dog food

00:16:14,560 --> 00:16:18,160
instance of honeycomb

00:16:16,240 --> 00:16:19,920
and then we have access to all of our

00:16:18,160 --> 00:16:22,399
normal top level metrics

00:16:19,920 --> 00:16:23,759
but are able to slice by whatever tiny

00:16:22,399 --> 00:16:25,759
segment of folks

00:16:23,759 --> 00:16:28,079
have been flagged into this experimental

00:16:25,759 --> 00:16:31,600
feature or that experimental

00:16:28,079 --> 00:16:31,600
branch that day

00:16:33,680 --> 00:16:37,199
so this being a talk and not actually a

00:16:35,360 --> 00:16:39,279
movie we are jumping to the end here

00:16:37,199 --> 00:16:41,120
um i'm sure you've all seen your fair

00:16:39,279 --> 00:16:43,600
share of cgi battles where good times

00:16:41,120 --> 00:16:43,600
over evil

00:16:44,480 --> 00:16:48,079
in the old world devs cared about code

00:16:47,279 --> 00:16:49,759
in the production

00:16:48,079 --> 00:16:53,199
sorry in the development and test

00:16:49,759 --> 00:16:54,639
environments and ops cared about prod

00:16:53,199 --> 00:16:56,720
but there are all sorts of reasons now

00:16:54,639 --> 00:16:58,560
to break down these barriers

00:16:56,720 --> 00:17:00,639
and empower developers to own our code

00:16:58,560 --> 00:17:02,240
and production

00:17:00,639 --> 00:17:03,759
we talked about some concrete things to

00:17:02,240 --> 00:17:06,959
do to facilitate that

00:17:03,759 --> 00:17:09,280
today so that we can all

00:17:06,959 --> 00:17:11,679
take our learnings from production and

00:17:09,280 --> 00:17:13,280
supercharge our development process

00:17:11,679 --> 00:17:14,799
at each step along the way there are

00:17:13,280 --> 00:17:16,880
things that we can be learning about

00:17:14,799 --> 00:17:18,799
how our code is behaving in production

00:17:16,880 --> 00:17:21,839
that will inform our choices

00:17:18,799 --> 00:17:21,839
and ensure better output

00:17:22,559 --> 00:17:25,600
and as we all know from the marvel

00:17:24,640 --> 00:17:27,039
universe

00:17:25,600 --> 00:17:29,120
being a superhero is more fun with a

00:17:27,039 --> 00:17:30,799
team in real life

00:17:29,120 --> 00:17:32,480
being able to transfer that knowledge

00:17:30,799 --> 00:17:34,720
and share ownership

00:17:32,480 --> 00:17:38,080
not just a plot device it's how we scale

00:17:34,720 --> 00:17:40,080
good intentions and build intuition

00:17:38,080 --> 00:17:41,440
after all all debugging is inherently

00:17:40,080 --> 00:17:44,000
social if

00:17:41,440 --> 00:17:44,799
even if it's just present you trying to

00:17:44,000 --> 00:17:47,440
figure out what

00:17:44,799 --> 00:17:49,120
past you discovered in order to help

00:17:47,440 --> 00:17:50,160
future you

00:17:49,120 --> 00:17:52,640
and that's why i'll hammer this point

00:17:50,160 --> 00:17:53,760
again observability isn't just about

00:17:52,640 --> 00:17:56,000
your choice of tool

00:17:53,760 --> 00:17:57,520
although that can catalyze change

00:17:56,000 --> 00:17:58,080
ultimately it's about the processes you

00:17:57,520 --> 00:17:59,600
enable

00:17:58,080 --> 00:18:01,840
and the culture you build around

00:17:59,600 --> 00:18:01,840
production

00:18:02,320 --> 00:18:06,000
in the end we're all just trying to

00:18:04,320 --> 00:18:07,520
fight fewer battles

00:18:06,000 --> 00:18:09,840
we're trying to reduce that tension and

00:18:07,520 --> 00:18:10,880
release to reduce the number of times

00:18:09,840 --> 00:18:13,200
we're woken up in the middle of the

00:18:10,880 --> 00:18:15,200
night or our teammates are woken up in

00:18:13,200 --> 00:18:18,080
the middle of the night

00:18:15,200 --> 00:18:18,480
because that's how we burn out that way

00:18:18,080 --> 00:18:21,840
lies

00:18:18,480 --> 00:18:23,280
alert fatigue too many dashboards

00:18:21,840 --> 00:18:25,039
and the sorts of habits where new

00:18:23,280 --> 00:18:26,960
engineers have to

00:18:25,039 --> 00:18:28,160
decode and claw through a bunch of

00:18:26,960 --> 00:18:29,840
tribal knowledge

00:18:28,160 --> 00:18:33,039
to learn which notifications to take

00:18:29,840 --> 00:18:35,039
seriously which ones can be ignored

00:18:33,039 --> 00:18:37,520
the more work that we can do to shift

00:18:35,039 --> 00:18:40,000
high stress situations

00:18:37,520 --> 00:18:40,960
where we have to be reactive and then

00:18:40,000 --> 00:18:42,799
stressed

00:18:40,960 --> 00:18:44,880
into proactive work where we can think

00:18:42,799 --> 00:18:46,400
ahead of time about expecteds versus

00:18:44,880 --> 00:18:48,720
actuals where we can build up

00:18:46,400 --> 00:18:50,160
those muscles to investigate issues the

00:18:48,720 --> 00:18:51,600
more we'll be able to take care of our

00:18:50,160 --> 00:18:54,880
teams

00:18:51,600 --> 00:18:54,880
and focus on doing what we want

00:18:55,679 --> 00:18:59,679
so if you happen to be an ops or infra

00:18:57,840 --> 00:19:01,840
engineer out there

00:18:59,679 --> 00:19:03,919
think about how you can empower your

00:19:01,840 --> 00:19:04,880
devs to share the great responsibility

00:19:03,919 --> 00:19:07,679
of production

00:19:04,880 --> 00:19:08,799
and the great power and if you're a

00:19:07,679 --> 00:19:10,320
developer

00:19:08,799 --> 00:19:12,480
remember that these superpowers are

00:19:10,320 --> 00:19:14,400
possible and have been within your grasp

00:19:12,480 --> 00:19:15,760
this whole time

00:19:14,400 --> 00:19:18,000
we stand to benefit the most from

00:19:15,760 --> 00:19:22,080
observability because it'll help us

00:19:18,000 --> 00:19:22,080
write better code at each step along the

00:19:22,840 --> 00:19:26,640
way

00:19:24,000 --> 00:19:28,240
you um i'd love to answer questions or

00:19:26,640 --> 00:19:30,400
point folks to more resources

00:19:28,240 --> 00:19:33,520
for anyone looking to learn about more

00:19:30,400 --> 00:19:33,520

YouTube URL: https://www.youtube.com/watch?v=oPAtbWK9oyY


