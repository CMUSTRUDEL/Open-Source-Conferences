Title: How we make VS Code in the open - GitHub Universe 2020
Publication date: 2020-12-10
Playlist: GitHub Universe 2020: Developer - DevOps
Description: 
	Presented by 
Alex Ross, Software Engineer, Microsoft
Benjamin Pasero, Software Engineer, Microsoft

VS Code was launched over five years ago and has become the top-most contributed-to project on GitHub. While developing in the open, our team has learned how to balance community engagement with delivering value and shipping code. In this talk, we'll share engineering best practices our team has adopted on GitHub to collaborate with our users, get feedback, and iterate quickly.

For more from GitHub Universe 2020, visit https://githubuniverse.com

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:01,470 --> 00:00:04,589
[Music]

00:00:05,839 --> 00:00:10,639
thank you for that intro

00:00:07,359 --> 00:00:16,160
hi i'm alex my co-presenter here is

00:00:10,639 --> 00:00:18,000
ben hi everyone thanks for having us

00:00:16,160 --> 00:00:19,760
uh and we're both software engineers for

00:00:18,000 --> 00:00:22,000
vs code joining you from

00:00:19,760 --> 00:00:25,920
zurich today we're going to talk to you

00:00:22,000 --> 00:00:25,920
about how we build vs code in the open

00:00:26,080 --> 00:00:28,800
we'll take you through some of the

00:00:26,960 --> 00:00:30,160
principles we try to stick to to make vs

00:00:28,800 --> 00:00:33,920
code a successful open source

00:00:30,160 --> 00:00:35,680
project and during github universe

00:00:33,920 --> 00:00:37,760
you can join our discord and you might

00:00:35,680 --> 00:00:41,280
get some some vs code stickers

00:00:37,760 --> 00:00:43,920
at aka dot ms slash open

00:00:41,280 --> 00:00:44,719
source dash discord we're also going to

00:00:43,920 --> 00:00:47,440
have an ama

00:00:44,719 --> 00:00:50,879
on vs code at microsoft reactor if you

00:00:47,440 --> 00:00:50,879
want to learn more after this session

00:00:51,440 --> 00:00:55,840
first let me introduce you to how the

00:00:53,199 --> 00:00:58,879
team is set up

00:00:55,840 --> 00:01:01,039
we have two physical sites one in

00:00:58,879 --> 00:01:02,800
zurich and the other in redmond

00:01:01,039 --> 00:01:05,680
washington at microsoft's

00:01:02,800 --> 00:01:07,520
main location we also have several

00:01:05,680 --> 00:01:09,920
remote members in the us

00:01:07,520 --> 00:01:12,240
and of course even our physical sites

00:01:09,920 --> 00:01:15,920
now are more distributed

00:01:12,240 --> 00:01:18,880
there are 25 engineers six pms

00:01:15,920 --> 00:01:19,920
two dock writers one designer one person

00:01:18,880 --> 00:01:22,560
in marketing

00:01:19,920 --> 00:01:24,080
one ux researcher all of these team

00:01:22,560 --> 00:01:26,080
members are spread across the vs code

00:01:24,080 --> 00:01:26,799
associated projects which include vs

00:01:26,080 --> 00:01:28,880
code

00:01:26,799 --> 00:01:30,400
our components like the monaco editor

00:01:28,880 --> 00:01:35,200
our collaborations with electron

00:01:30,400 --> 00:01:35,200
and xterm.js and many extensions

00:01:35,280 --> 00:01:39,920
with that team vs code has been one of

00:01:37,840 --> 00:01:40,640
the top projects on github by number of

00:01:39,920 --> 00:01:43,920
contributors

00:01:40,640 --> 00:01:45,119
since 2016. because of this we tend to

00:01:43,920 --> 00:01:48,960
get a lot of love on twitter

00:01:45,119 --> 00:01:50,640
like this very kind tweet at code has to

00:01:48,960 --> 00:01:52,159
be the highest quality open source

00:01:50,640 --> 00:01:54,240
project i've ever seen

00:01:52,159 --> 00:01:56,560
whoever does their change and community

00:01:54,240 --> 00:01:58,560
management deserves a raise

00:01:56,560 --> 00:02:00,719
this really is a very nice compliment to

00:01:58,560 --> 00:02:02,640
the whole team because it is the entire

00:02:00,719 --> 00:02:05,600
team that contributes to change logs and

00:02:02,640 --> 00:02:05,600
community management

00:02:05,680 --> 00:02:09,119
this snapshot of our issues page in our

00:02:08,640 --> 00:02:11,760
repo

00:02:09,119 --> 00:02:13,200
was taken in mid-november and you can

00:02:11,760 --> 00:02:14,480
see how engaged folks are with the

00:02:13,200 --> 00:02:16,720
project

00:02:14,480 --> 00:02:18,480
the outlines in red are the work that we

00:02:16,720 --> 00:02:21,120
do incoming issues

00:02:18,480 --> 00:02:22,720
discussions and issues but in the green

00:02:21,120 --> 00:02:23,520
you can see that we also get a lot of

00:02:22,720 --> 00:02:25,520
love

00:02:23,520 --> 00:02:27,760
lots of people watching starring and

00:02:25,520 --> 00:02:29,520
forking our repo

00:02:27,760 --> 00:02:30,959
in addition to being active on github we

00:02:29,520 --> 00:02:31,680
have a getter for accessibility

00:02:30,959 --> 00:02:34,080
discussion

00:02:31,680 --> 00:02:35,599
which our team actively participates in

00:02:34,080 --> 00:02:36,239
and of course one way the community gets

00:02:35,599 --> 00:02:39,040
involved

00:02:36,239 --> 00:02:40,959
is by creating extensions for extension

00:02:39,040 --> 00:02:42,000
authors we have a monthly extension

00:02:40,959 --> 00:02:45,360
author call

00:02:42,000 --> 00:02:45,360
where they can have a voice too

00:02:45,920 --> 00:02:50,239
the team's work doesn't only happen in

00:02:47,920 --> 00:02:51,920
the vs code repository though all of

00:02:50,239 --> 00:02:54,480
these other repos are run by us

00:02:51,920 --> 00:02:56,480
and contribute to vs code included here

00:02:54,480 --> 00:02:57,120
are the debug extensions the monaco

00:02:56,480 --> 00:02:58,720
editor

00:02:57,120 --> 00:03:00,959
the language server protocol debug

00:02:58,720 --> 00:03:05,760
adapter protocol documentation

00:03:00,959 --> 00:03:07,280
samples and much more

00:03:05,760 --> 00:03:09,440
to keep all of these projects running

00:03:07,280 --> 00:03:10,720
smoothly we try to follow these open

00:03:09,440 --> 00:03:16,239
source principles

00:03:10,720 --> 00:03:16,239
zero distance automate almost everything

00:03:16,400 --> 00:03:22,640
monthly get feedback early

00:03:19,440 --> 00:03:23,680
and share recurring duties now i will

00:03:22,640 --> 00:03:24,959
hand it over to ben

00:03:23,680 --> 00:03:27,440
to talk about the first of our

00:03:24,959 --> 00:03:30,400
principles

00:03:27,440 --> 00:03:31,840
thank you alex so zero distance is the

00:03:30,400 --> 00:03:33,920
first principle i want to

00:03:31,840 --> 00:03:35,840
talk a little bit more in detail about

00:03:33,920 --> 00:03:36,480
and what this is really about is that we

00:03:35,840 --> 00:03:38,480
are

00:03:36,480 --> 00:03:40,720
trying to engage with our users

00:03:38,480 --> 00:03:43,120
firsthand we as a development team

00:03:40,720 --> 00:03:44,720
so when you are engaging with us us on

00:03:43,120 --> 00:03:46,480
github issues

00:03:44,720 --> 00:03:48,319
for example you will talk to developers

00:03:46,480 --> 00:03:49,599
directly there's no level one support

00:03:48,319 --> 00:03:52,879
involved

00:03:49,599 --> 00:03:54,720
so for that we keep for example uh our

00:03:52,879 --> 00:03:55,760
roadmap in the duration plans and end

00:03:54,720 --> 00:03:58,080
games plans

00:03:55,760 --> 00:04:00,080
all public in the guitar issue tracker

00:03:58,080 --> 00:04:02,080
so you're free to see it there

00:04:00,080 --> 00:04:04,319
engage even ask questions and we're

00:04:02,080 --> 00:04:06,400
happy to to comment on them

00:04:04,319 --> 00:04:08,000
besides that we try to be very active on

00:04:06,400 --> 00:04:10,720
our social channels

00:04:08,000 --> 00:04:12,319
we maintain a fairly popular twitter

00:04:10,720 --> 00:04:14,400
account at code

00:04:12,319 --> 00:04:15,680
but also stakeoverflow or hacker news

00:04:14,400 --> 00:04:18,239
reddit and even

00:04:15,680 --> 00:04:20,560
on the chat rooms we maintain um

00:04:18,239 --> 00:04:23,360
whenever there's a new release we try to

00:04:20,560 --> 00:04:23,840
uh watch for feedback and and engage

00:04:23,360 --> 00:04:26,000
there

00:04:23,840 --> 00:04:28,000
as well directly if we see that there

00:04:26,000 --> 00:04:30,080
are any issues with a new release

00:04:28,000 --> 00:04:31,040
but our main source of feedback is

00:04:30,080 --> 00:04:32,960
github issues

00:04:31,040 --> 00:04:34,639
uh where i think we count two to three

00:04:32,960 --> 00:04:35,360
thousand issues per month which is quite

00:04:34,639 --> 00:04:38,080
a bit

00:04:35,360 --> 00:04:38,720
and in this talk we will universal

00:04:38,080 --> 00:04:40,880
manage these

00:04:38,720 --> 00:04:42,400
issues so you might find some advice

00:04:40,880 --> 00:04:45,120
here how to do that

00:04:42,400 --> 00:04:46,560
we have a inbox tracker which is a role

00:04:45,120 --> 00:04:47,520
that we will explain a little bit later

00:04:46,560 --> 00:04:50,560
to manage these

00:04:47,520 --> 00:04:52,960
these issues and as well as some bots

00:04:50,560 --> 00:04:54,960
uh as you can imagine we get lots of

00:04:52,960 --> 00:04:57,040
customer emotions um i mean

00:04:54,960 --> 00:04:58,000
like i'm watching universe from popular

00:04:57,040 --> 00:04:59,600
issues and

00:04:58,000 --> 00:05:01,440
some of the feature requests that we

00:04:59,600 --> 00:05:02,720
implemented over the years are a result

00:05:01,440 --> 00:05:05,199
of these upvotes

00:05:02,720 --> 00:05:07,039
um for example tabs multi-root folders

00:05:05,199 --> 00:05:08,479
or even customizable icons

00:05:07,039 --> 00:05:11,039
are all coming from there because we

00:05:08,479 --> 00:05:13,199
didn't have them in the beginning

00:05:11,039 --> 00:05:14,800
we also get lots of pull requests so

00:05:13,199 --> 00:05:16,479
that's another task we

00:05:14,800 --> 00:05:18,160
do daily we look at the incoming pro

00:05:16,479 --> 00:05:19,199
requests and try to merge them in a

00:05:18,160 --> 00:05:21,280
timely manner

00:05:19,199 --> 00:05:23,440
and you might have already seen that we

00:05:21,280 --> 00:05:24,560
call out on these pull requests in our

00:05:23,440 --> 00:05:26,720
thank you section

00:05:24,560 --> 00:05:28,320
and i want to emphasize that you can

00:05:26,720 --> 00:05:29,919
actually have a wiki page

00:05:28,320 --> 00:05:31,360
on our github repository how to

00:05:29,919 --> 00:05:33,280
contribute to vs code

00:05:31,360 --> 00:05:35,199
and that clearly explains you how easy

00:05:33,280 --> 00:05:37,120
it is to do these pull requests so i

00:05:35,199 --> 00:05:39,919
encourage you to do that

00:05:37,120 --> 00:05:40,560
let's look into the flow for a feature

00:05:39,919 --> 00:05:42,880
request

00:05:40,560 --> 00:05:43,919
how that can actually go uh when you

00:05:42,880 --> 00:05:45,600
file one

00:05:43,919 --> 00:05:47,919
so first thing that will happen is that

00:05:45,600 --> 00:05:49,360
we receive a feature request and this is

00:05:47,919 --> 00:05:50,400
probably most of the issues that we

00:05:49,360 --> 00:05:52,479
receive

00:05:50,400 --> 00:05:54,000
and the first task is to assign a

00:05:52,479 --> 00:05:56,319
someone from the development

00:05:54,000 --> 00:05:58,479
development team to the um to the issue

00:05:56,319 --> 00:06:00,560
this can either be the inbox tracker or

00:05:58,479 --> 00:06:02,160
the bot based on some machine learning

00:06:00,560 --> 00:06:03,840
and the content we actually know which

00:06:02,160 --> 00:06:04,960
developer is most likely to be the

00:06:03,840 --> 00:06:07,199
assignee

00:06:04,960 --> 00:06:09,440
and then the first task of the owner is

00:06:07,199 --> 00:06:11,520
to assign a feature area label

00:06:09,440 --> 00:06:12,639
and that is really a way to categorize

00:06:11,520 --> 00:06:15,600
these issues and

00:06:12,639 --> 00:06:16,720
later find them easier and then there is

00:06:15,600 --> 00:06:19,120
a decision to be made

00:06:16,720 --> 00:06:21,039
if the issue should move to the backlog

00:06:19,120 --> 00:06:22,639
or to backlog candidates

00:06:21,039 --> 00:06:24,720
and that is an iteration that we are

00:06:22,639 --> 00:06:26,639
maintaining on github where we say

00:06:24,720 --> 00:06:28,160
everything that is on backlog is

00:06:26,639 --> 00:06:30,400
something that we do accept

00:06:28,160 --> 00:06:32,240
and eventually commit to it doesn't

00:06:30,400 --> 00:06:34,000
really say when we're doing it but it's

00:06:32,240 --> 00:06:35,759
a good sign that we're interested in

00:06:34,000 --> 00:06:37,840
implementing the feature

00:06:35,759 --> 00:06:39,199
but if the uh developer moves it to

00:06:37,840 --> 00:06:41,280
backlog candy that's then

00:06:39,199 --> 00:06:42,560
it's a sign that we are not yet sure if

00:06:41,280 --> 00:06:44,240
we want to do it we are

00:06:42,560 --> 00:06:46,880
waiting for more feedback and

00:06:44,240 --> 00:06:50,319
specifically we want some upvotes here

00:06:46,880 --> 00:06:52,880
to get community interest in the feature

00:06:50,319 --> 00:06:53,520
and when we have these 20 upvotes we

00:06:52,880 --> 00:06:55,759
accept

00:06:53,520 --> 00:06:57,199
the issue automatically the bot moves it

00:06:55,759 --> 00:06:59,199
to the backlog

00:06:57,199 --> 00:07:00,479
but after 60 days the bot will actually

00:06:59,199 --> 00:07:02,720
close the issue

00:07:00,479 --> 00:07:03,680
and this whole flow is meant to really

00:07:02,720 --> 00:07:06,319
filter out

00:07:03,680 --> 00:07:08,160
those feature requests that um really

00:07:06,319 --> 00:07:09,919
there is lots of interest in and that we

00:07:08,160 --> 00:07:10,639
should do from the ones which maybe have

00:07:09,919 --> 00:07:13,039
less

00:07:10,639 --> 00:07:14,800
interest so if you are wanting to have a

00:07:13,039 --> 00:07:16,560
feature in vs code i recommend you to

00:07:14,800 --> 00:07:18,319
look at these upvotes and add your vote

00:07:16,560 --> 00:07:20,720
as well

00:07:18,319 --> 00:07:21,919
so in the next slide i want to quickly

00:07:20,720 --> 00:07:23,919
look into

00:07:21,919 --> 00:07:25,360
a special iteration that we are doing

00:07:23,919 --> 00:07:27,440
every year

00:07:25,360 --> 00:07:29,440
because we have been doing it just now

00:07:27,440 --> 00:07:31,759
it's our housekeeping iteration

00:07:29,440 --> 00:07:33,120
and the idea here is that once per year

00:07:31,759 --> 00:07:34,000
we are really trying to get our issue

00:07:33,120 --> 00:07:37,360
number down

00:07:34,000 --> 00:07:39,520
by focusing on this for one month

00:07:37,360 --> 00:07:42,000
and typically our magical number for

00:07:39,520 --> 00:07:44,800
starting this is if we have above 5000

00:07:42,000 --> 00:07:45,360
issues and you can see here we just did

00:07:44,800 --> 00:07:47,520
that

00:07:45,360 --> 00:07:48,479
in october and november we are getting

00:07:47,520 --> 00:07:51,520
down from

00:07:48,479 --> 00:07:52,479
5 000 to around 4 000 issues and we do

00:07:51,520 --> 00:07:55,039
that by

00:07:52,479 --> 00:07:56,400
looking for obsolete issues some of them

00:07:55,039 --> 00:07:58,720
are fixed some of

00:07:56,400 --> 00:07:59,680
them will be marked as obsolete or out

00:07:58,720 --> 00:08:01,520
of scope

00:07:59,680 --> 00:08:03,919
so really trying aggressively to work on

00:08:01,520 --> 00:08:05,759
them and one result of this is that um

00:08:03,919 --> 00:08:06,960
for example in this december iteration

00:08:05,759 --> 00:08:09,599
that we're about to ship

00:08:06,960 --> 00:08:11,199
you will see many feature requests fixed

00:08:09,599 --> 00:08:13,120
that maybe are a bit older simply

00:08:11,199 --> 00:08:15,599
because we had time to look at it

00:08:13,120 --> 00:08:16,319
and this chart here is done by benjamin

00:08:15,599 --> 00:08:18,240
lennon

00:08:16,319 --> 00:08:20,240
shouting out here to his his website

00:08:18,240 --> 00:08:21,599
he's not part of the team but actually a

00:08:20,240 --> 00:08:24,080
community member that

00:08:21,599 --> 00:08:25,919
is was willing to do this website where

00:08:24,080 --> 00:08:27,280
you basically can see an overview of our

00:08:25,919 --> 00:08:29,280
issues each day

00:08:27,280 --> 00:08:30,800
so i know last time we did this i think

00:08:29,280 --> 00:08:31,520
the website was breaking down from the

00:08:30,800 --> 00:08:33,200
traffic

00:08:31,520 --> 00:08:37,680
i really hope that today that's not the

00:08:33,200 --> 00:08:37,680
case um so give it back to you alex

00:08:38,159 --> 00:08:41,599
thank you ben our second principle is to

00:08:41,120 --> 00:08:44,480
automate

00:08:41,599 --> 00:08:46,080
as much as we possibly can and use tools

00:08:44,480 --> 00:08:47,360
wherever possible to keep manual

00:08:46,080 --> 00:08:49,120
processes low

00:08:47,360 --> 00:08:50,640
we have a ci pipeline that runs

00:08:49,120 --> 00:08:52,959
regularly so we can catch

00:08:50,640 --> 00:08:54,480
build and test failures as they happen

00:08:52,959 --> 00:08:55,920
and on the right you can see our pull

00:08:54,480 --> 00:08:58,080
request ci checks

00:08:55,920 --> 00:08:59,839
which help us focus only on prs that we

00:08:58,080 --> 00:09:01,839
could accept

00:08:59,839 --> 00:09:03,440
we do use eslint rules to enforce our

00:09:01,839 --> 00:09:04,800
code layering structure

00:09:03,440 --> 00:09:07,120
so you can't push code that creates a

00:09:04,800 --> 00:09:09,279
dependency that is

00:09:07,120 --> 00:09:11,360
while we don't have a unified code style

00:09:09,279 --> 00:09:12,959
we do still use custom hygiene checks

00:09:11,360 --> 00:09:15,519
and git commit hooks to maintain a

00:09:12,959 --> 00:09:17,600
standard across the code base

00:09:15,519 --> 00:09:20,080
our unit tests can be run against vs

00:09:17,600 --> 00:09:22,160
code and browser-based vs code

00:09:20,080 --> 00:09:23,519
and it runs in the browser using

00:09:22,160 --> 00:09:25,440
playwright

00:09:23,519 --> 00:09:27,200
when we're ready to ship we have a set

00:09:25,440 --> 00:09:30,160
of automated smoke tests which

00:09:27,200 --> 00:09:34,160
replaced original manual smoke tests and

00:09:30,160 --> 00:09:34,160
they are just a good sanity check for us

00:09:35,120 --> 00:09:38,959
at the top of this page you can see the

00:09:37,279 --> 00:09:40,720
header for our internal tools

00:09:38,959 --> 00:09:43,200
we use these internal tools to help our

00:09:40,720 --> 00:09:44,800
monthly help run our monthly end game

00:09:43,200 --> 00:09:46,560
these tools assign and load balance

00:09:44,800 --> 00:09:47,360
testing so that tests are evenly

00:09:46,560 --> 00:09:48,959
distributed

00:09:47,360 --> 00:09:51,519
and no one feels like they're stuck

00:09:48,959 --> 00:09:53,040
doing a majority of the testing

00:09:51,519 --> 00:09:54,480
these tools also help us make sure we

00:09:53,040 --> 00:09:55,920
don't miss any community members who

00:09:54,480 --> 00:09:57,120
contribute a pull request when we write

00:09:55,920 --> 00:09:58,640
the acknowledgement section of our

00:09:57,120 --> 00:10:01,760
release notes

00:09:58,640 --> 00:10:03,360
below that is our internal builds page

00:10:01,760 --> 00:10:04,959
here we can view builds for different

00:10:03,360 --> 00:10:08,399
diff for different qualities

00:10:04,959 --> 00:10:10,320
this one is showing it also view

00:10:08,399 --> 00:10:12,079
builds for stable and for our

00:10:10,320 --> 00:10:13,920
exploration

00:10:12,079 --> 00:10:15,279
you can download builds from here that's

00:10:13,920 --> 00:10:16,640
what all those icons are and you can see

00:10:15,279 --> 00:10:18,399
there are some missing some icons

00:10:16,640 --> 00:10:20,320
missing in various rows the build didn't

00:10:18,399 --> 00:10:22,720
finish there for whatever reason

00:10:20,320 --> 00:10:23,839
we can filter by commit filter by

00:10:22,720 --> 00:10:26,880
release and then

00:10:23,839 --> 00:10:30,079
on the right there are those check boxes

00:10:26,880 --> 00:10:32,000
for releasing a build and for freezing a

00:10:30,079 --> 00:10:33,839
build so if we put out a build that has

00:10:32,000 --> 00:10:35,680
a problem significant enough

00:10:33,839 --> 00:10:38,959
that we don't want further people to be

00:10:35,680 --> 00:10:38,959
able to download it we'll freeze it

00:10:39,680 --> 00:10:44,399
since issues go directly to us part of

00:10:42,800 --> 00:10:46,800
reducing manual process

00:10:44,399 --> 00:10:48,959
is giving users the tools to report more

00:10:46,800 --> 00:10:50,959
meaningful issues

00:10:48,959 --> 00:10:52,800
to help with this we have a built-in

00:10:50,959 --> 00:10:55,680
issue reporter envious code

00:10:52,800 --> 00:10:57,760
that collects some essential info if we

00:10:55,680 --> 00:10:59,920
need further information

00:10:57,760 --> 00:11:01,760
she asked users to use our cli which

00:10:59,920 --> 00:11:04,079
provides troubleshooting options

00:11:01,760 --> 00:11:05,519
or provide logging or look at the dev

00:11:04,079 --> 00:11:07,040
tools

00:11:05,519 --> 00:11:08,800
we often get issues that can be traced

00:11:07,040 --> 00:11:11,920
back to specific extensions

00:11:08,800 --> 00:11:14,240
and aren't caused by vs code itself

00:11:11,920 --> 00:11:15,440
to assist with finding these extensions

00:11:14,240 --> 00:11:17,920
we have a new feature

00:11:15,440 --> 00:11:18,800
in extension bisect which works like get

00:11:17,920 --> 00:11:20,720
bisect

00:11:18,800 --> 00:11:22,480
and we'll disable extensions in a binary

00:11:20,720 --> 00:11:24,880
search to help you find the source of an

00:11:22,480 --> 00:11:24,880
issue

00:11:25,440 --> 00:11:28,720
one part of our automation that you may

00:11:26,959 --> 00:11:29,279
have had personal experience with on

00:11:28,720 --> 00:11:31,839
github

00:11:29,279 --> 00:11:33,279
is our triage bot our triage bot uses

00:11:31,839 --> 00:11:34,800
machine learning to determine who an

00:11:33,279 --> 00:11:37,279
issue should be assigned to

00:11:34,800 --> 00:11:38,720
based on which feature area the issue is

00:11:37,279 --> 00:11:40,959
about

00:11:38,720 --> 00:11:42,000
the bot will suggest duplicate issues

00:11:40,959 --> 00:11:43,839
and uses github

00:11:42,000 --> 00:11:45,680
actions to respond to key label changes

00:11:43,839 --> 00:11:47,600
and comment contents

00:11:45,680 --> 00:11:50,639
one example of this is the needs more

00:11:47,600 --> 00:11:51,839
info flow which is shown here

00:11:50,639 --> 00:11:53,839
when we get an issue that isn't

00:11:51,839 --> 00:11:55,440
actionable in its current state because

00:11:53,839 --> 00:11:56,560
of missing information like maybe the

00:11:55,440 --> 00:11:58,880
build number

00:11:56,560 --> 00:12:00,399
we can add the needs more info label

00:11:58,880 --> 00:12:02,720
this will trigger the bot to add a

00:12:00,399 --> 00:12:04,320
comment that asks for basic info

00:12:02,720 --> 00:12:05,839
and if further information isn't

00:12:04,320 --> 00:12:08,800
provided then the bot will close the

00:12:05,839 --> 00:12:11,120
issue for us after 10 days

00:12:08,800 --> 00:12:12,959
one of the most hands-off actions that

00:12:11,120 --> 00:12:16,000
our issues bot does is respond to

00:12:12,959 --> 00:12:17,680
incoming issues that aren't in english

00:12:16,000 --> 00:12:19,120
since you're talking directly to us when

00:12:17,680 --> 00:12:20,720
you create an issue and since

00:12:19,120 --> 00:12:22,480
english is the primary language of the

00:12:20,720 --> 00:12:24,079
team we require

00:12:22,480 --> 00:12:26,160
issues to be in english before we start

00:12:24,079 --> 00:12:27,760
working on them when an issue comes in

00:12:26,160 --> 00:12:29,680
that isn't in english the bot will

00:12:27,760 --> 00:12:30,800
respond in the original language and ask

00:12:29,680 --> 00:12:32,480
for translation

00:12:30,800 --> 00:12:35,519
at that point a community member might

00:12:32,480 --> 00:12:37,120
jump in and provide the translation

00:12:35,519 --> 00:12:39,440
then i'll hand it back to you for some

00:12:37,120 --> 00:12:42,959
more principles

00:12:39,440 --> 00:12:45,120
thank you so our next principle is

00:12:42,959 --> 00:12:46,240
involve the community and what we mean

00:12:45,120 --> 00:12:49,120
by that is

00:12:46,240 --> 00:12:50,639
that we are really trying to get some of

00:12:49,120 --> 00:12:53,600
our community members that are very

00:12:50,639 --> 00:12:55,360
active to help out on our issue tracking

00:12:53,600 --> 00:12:58,880
and you can see here john murray who is

00:12:55,360 --> 00:13:00,800
one of these top conut community members

00:12:58,880 --> 00:13:02,639
that has some special rights here to

00:13:00,800 --> 00:13:05,279
trigger an action with our bot

00:13:02,639 --> 00:13:06,000
by confirming an issue so in this case

00:13:05,279 --> 00:13:08,240
an issue came

00:13:06,000 --> 00:13:09,200
in and we maybe didn't have time to look

00:13:08,240 --> 00:13:11,120
into it yet

00:13:09,200 --> 00:13:12,959
and he was already confirming it with

00:13:11,120 --> 00:13:14,320
some steps how to reproduce and then the

00:13:12,959 --> 00:13:16,800
bot adds this label

00:13:14,320 --> 00:13:18,639
and that is incredibly useful for us to

00:13:16,800 --> 00:13:20,240
distill these issues because we know

00:13:18,639 --> 00:13:20,800
they have been confirmed and we don't

00:13:20,240 --> 00:13:24,399
have to

00:13:20,800 --> 00:13:27,519
try to reproduce it another example

00:13:24,399 --> 00:13:29,519
in the next slide is something that joe

00:13:27,519 --> 00:13:31,200
has been started here from our team it's

00:13:29,519 --> 00:13:34,000
the author verify request

00:13:31,200 --> 00:13:34,880
author verification requested label

00:13:34,000 --> 00:13:36,720
which triggers

00:13:34,880 --> 00:13:39,120
quite a bit of activity as you can see

00:13:36,720 --> 00:13:41,199
on the issue and the idea here is that

00:13:39,120 --> 00:13:42,399
once an issue is closed and was fixed by

00:13:41,199 --> 00:13:44,720
a developer

00:13:42,399 --> 00:13:46,720
we want the author to verify the issue

00:13:44,720 --> 00:13:49,120
and we actually have a process that says

00:13:46,720 --> 00:13:51,279
every end game every end of an iteration

00:13:49,120 --> 00:13:52,720
we verify every issue we fixed

00:13:51,279 --> 00:13:54,399
because we believe that's the only way

00:13:52,720 --> 00:13:55,519
to really know that an issue has been

00:13:54,399 --> 00:13:57,279
addressed properly

00:13:55,519 --> 00:13:59,680
and ideally it's someone else verifying

00:13:57,279 --> 00:14:02,160
that issue not the one that closed it

00:13:59,680 --> 00:14:03,920
but here with this bot we can actually

00:14:02,160 --> 00:14:06,320
trigger an action that

00:14:03,920 --> 00:14:07,920
asks the user to verify the issue once

00:14:06,320 --> 00:14:09,519
an insider's build is out

00:14:07,920 --> 00:14:11,360
and an insider's build is a nightly

00:14:09,519 --> 00:14:13,120
version of vs code that always includes

00:14:11,360 --> 00:14:15,279
the changes from the last day

00:14:13,120 --> 00:14:17,920
and this bot is actually smart enough to

00:14:15,279 --> 00:14:19,920
track once the insiders is released

00:14:17,920 --> 00:14:21,519
and then ask the user to verify it

00:14:19,920 --> 00:14:23,199
following these steps

00:14:21,519 --> 00:14:24,880
and in the end the user can set this

00:14:23,199 --> 00:14:25,600
verified label and we have the whole

00:14:24,880 --> 00:14:27,440
end-to-end

00:14:25,600 --> 00:14:30,320
experience here without a developer

00:14:27,440 --> 00:14:32,639
having to work on it at all back to you

00:14:30,320 --> 00:14:32,639
alex

00:14:32,800 --> 00:14:38,000
thank you our next principle is to ship

00:14:35,519 --> 00:14:38,000
monthly

00:14:38,320 --> 00:14:42,000
and that involves shipping predictably

00:14:40,240 --> 00:14:44,079
and with high quality

00:14:42,000 --> 00:14:45,519
to do this we operate on four to five

00:14:44,079 --> 00:14:47,279
week cycles

00:14:45,519 --> 00:14:49,120
during the first week of each iteration

00:14:47,279 --> 00:14:50,800
we take the time to reduce debt

00:14:49,120 --> 00:14:52,240
work on tools and plan the rest of the

00:14:50,800 --> 00:14:53,760
iteration

00:14:52,240 --> 00:14:55,360
team members use their discretion to

00:14:53,760 --> 00:14:56,000
determine to determine which debt should

00:14:55,360 --> 00:14:59,279
be worked on

00:14:56,000 --> 00:15:00,720
or what tools made this is debt week and

00:14:59,279 --> 00:15:02,480
it's one of the reasons that the code

00:15:00,720 --> 00:15:04,320
base is still in such good condition

00:15:02,480 --> 00:15:05,839
after nine years of work

00:15:04,320 --> 00:15:08,000
the next couple weeks of the iteration

00:15:05,839 --> 00:15:09,519
are used to execute that was made during

00:15:08,000 --> 00:15:11,279
the first week

00:15:09,519 --> 00:15:12,880
team members usually have ownership over

00:15:11,279 --> 00:15:14,480
a whole feature area which prevents one

00:15:12,880 --> 00:15:15,120
person from getting blocked on another's

00:15:14,480 --> 00:15:17,120
work

00:15:15,120 --> 00:15:19,360
and allows for a lot of autonomy over

00:15:17,120 --> 00:15:21,360
future distances

00:15:19,360 --> 00:15:22,639
as we complete features we demo them

00:15:21,360 --> 00:15:25,279
during our daily team stand

00:15:22,639 --> 00:15:28,240
up during this time we meet weekly as a

00:15:25,279 --> 00:15:30,079
team to see how the plan is progressing

00:15:28,240 --> 00:15:31,360
in the last week of an iteration we have

00:15:30,079 --> 00:15:33,120
endgame

00:15:31,360 --> 00:15:34,720
during endgame everyone stops working on

00:15:33,120 --> 00:15:36,320
features and we all focus on getting

00:15:34,720 --> 00:15:38,079
ready to ship

00:15:36,320 --> 00:15:39,519
once we've shipped we watch for new

00:15:38,079 --> 00:15:42,000
issues and make a recovery release

00:15:39,519 --> 00:15:44,079
during the following iteration if needed

00:15:42,000 --> 00:15:45,680
recovery releases are small patches to

00:15:44,079 --> 00:15:48,480
fix important new issues

00:15:45,680 --> 00:15:50,880
after a release an issue meets the bar

00:15:48,480 --> 00:15:53,120
for recovery if it's regression

00:15:50,880 --> 00:15:54,959
if it's breaking a feature or if we know

00:15:53,120 --> 00:15:58,000
we will get lots of duplicate reports if

00:15:54,959 --> 00:15:58,000
we don't fix it quickly

00:15:58,560 --> 00:16:03,199
end game involves all the steps we need

00:16:00,880 --> 00:16:05,759
to do to make sure we're ready to ship

00:16:03,199 --> 00:16:07,600
it's run by the endgame champion and

00:16:05,759 --> 00:16:09,759
endgame buddy

00:16:07,600 --> 00:16:11,680
during endgame everyone writes tests

00:16:09,759 --> 00:16:13,680
plans everyone tests

00:16:11,680 --> 00:16:15,600
everyone fixes and everyone writes

00:16:13,680 --> 00:16:17,120
documentation and yes this means that

00:16:15,600 --> 00:16:18,959
the devs write the docs

00:16:17,120 --> 00:16:21,199
there's an edit pass from a doc writer

00:16:18,959 --> 00:16:22,800
but the docs were written by us

00:16:21,199 --> 00:16:25,680
the endgame champion is supported by

00:16:22,800 --> 00:16:29,040
tools but the role is still manual

00:16:25,680 --> 00:16:30,560
the first step for any and is use the

00:16:29,040 --> 00:16:31,519
template to create an issue for the end

00:16:30,560 --> 00:16:33,440
game plan

00:16:31,519 --> 00:16:34,839
which you can see our end game plan from

00:16:33,440 --> 00:16:39,519
october

00:16:34,839 --> 00:16:39,519
here the endgame champion is responsible

00:16:39,600 --> 00:16:44,320
and for following the plan many users

00:16:42,720 --> 00:16:45,839
love our release notes

00:16:44,320 --> 00:16:47,360
and we do work hard to make sure they're

00:16:45,839 --> 00:16:48,639
worth loving

00:16:47,360 --> 00:16:50,399
during endgame we use our weekly

00:16:48,639 --> 00:16:51,680
teamwide meeting to read through the

00:16:50,399 --> 00:16:52,959
release notes and make sure they're

00:16:51,680 --> 00:16:56,720
comprehensive

00:16:52,959 --> 00:16:58,800
useful and full of gifts

00:16:56,720 --> 00:17:01,440
and i will hand it back to ben for our

00:16:58,800 --> 00:17:04,480
last two principles

00:17:01,440 --> 00:17:06,000
yeah here we go so this one is a very

00:17:04,480 --> 00:17:08,559
important one to me personally

00:17:06,000 --> 00:17:09,839
always get feedback early on and what

00:17:08,559 --> 00:17:11,600
that really means is that we are

00:17:09,839 --> 00:17:13,520
maintaining an insider's channel

00:17:11,600 --> 00:17:15,199
besides the stable channel that you

00:17:13,520 --> 00:17:17,919
probably all heard of

00:17:15,199 --> 00:17:20,559
the insider channel is nightly updated

00:17:17,919 --> 00:17:22,559
with around 50 000 users by now

00:17:20,559 --> 00:17:24,880
and what this means is that you can try

00:17:22,559 --> 00:17:26,880
out the changes from the previous day

00:17:24,880 --> 00:17:28,960
right on the next day and more

00:17:26,880 --> 00:17:30,960
importantly since the vs code

00:17:28,960 --> 00:17:32,559
development team all of us we are using

00:17:30,960 --> 00:17:34,320
insiders you can

00:17:32,559 --> 00:17:36,480
be sure that this version is actually

00:17:34,320 --> 00:17:38,240
good enough to use every day because

00:17:36,480 --> 00:17:39,360
otherwise we couldn't work on vs code

00:17:38,240 --> 00:17:41,200
itself

00:17:39,360 --> 00:17:43,679
so to make sure to give that version a

00:17:41,200 --> 00:17:45,520
try and give us feedback

00:17:43,679 --> 00:17:47,520
earlier than the stable channel that is

00:17:45,520 --> 00:17:50,000
updated only monthly

00:17:47,520 --> 00:17:52,000
we also have extension shipping insiders

00:17:50,000 --> 00:17:54,559
versions for example the pull request

00:17:52,000 --> 00:17:55,280
extension or the js debug extension you

00:17:54,559 --> 00:17:58,080
can

00:17:55,280 --> 00:18:00,080
install them and try them out to benefit

00:17:58,080 --> 00:18:02,400
from from features and i should also

00:18:00,080 --> 00:18:04,400
say you can install insiders and stables

00:18:02,400 --> 00:18:05,600
side by side and for example use setting

00:18:04,400 --> 00:18:07,840
synchronization

00:18:05,600 --> 00:18:08,720
to sync your extensions and settings

00:18:07,840 --> 00:18:11,039
over from both

00:18:08,720 --> 00:18:12,960
and and use them at the same time which

00:18:11,039 --> 00:18:15,280
i find actually quite nice

00:18:12,960 --> 00:18:16,960
less known is the exploration channel

00:18:15,280 --> 00:18:17,919
has around 100 users we don't really

00:18:16,960 --> 00:18:20,799
advertise this

00:18:17,919 --> 00:18:22,799
it's mainly used for electron updates

00:18:20,799 --> 00:18:24,880
electron is the framework we use to

00:18:22,799 --> 00:18:26,240
to ship cross-platform and since it is a

00:18:24,880 --> 00:18:28,880
larger component

00:18:26,240 --> 00:18:30,799
we try to still get some feedback but

00:18:28,880 --> 00:18:33,679
maybe don't push it to insiders because

00:18:30,799 --> 00:18:35,520
they are just too many users there

00:18:33,679 --> 00:18:37,919
so let's look at the last principle that

00:18:35,520 --> 00:18:37,919
we have

00:18:38,240 --> 00:18:42,080
which is share requiring duties we

00:18:40,480 --> 00:18:44,320
actually already talked about lots of

00:18:42,080 --> 00:18:47,039
these duties that we have in the team

00:18:44,320 --> 00:18:48,080
um and we are trying to share these

00:18:47,039 --> 00:18:50,240
duties uh

00:18:48,080 --> 00:18:51,919
across the team so that not everyone not

00:18:50,240 --> 00:18:52,799
a single person has to do them all the

00:18:51,919 --> 00:18:56,080
time

00:18:52,799 --> 00:18:58,000
the inbox tracker is a weekly assignment

00:18:56,080 --> 00:18:59,679
that we round robin between zurich and

00:18:58,000 --> 00:19:01,520
redmond and as you

00:18:59,679 --> 00:19:03,039
already heard is supported by bots and

00:19:01,520 --> 00:19:04,640
github actions

00:19:03,039 --> 00:19:06,880
and i should say that all the bots we

00:19:04,640 --> 00:19:08,320
talked about are actually open source

00:19:06,880 --> 00:19:10,080
so feel free to look at those

00:19:08,320 --> 00:19:11,120
repositories and actually use them for

00:19:10,080 --> 00:19:12,720
yourself

00:19:11,120 --> 00:19:14,960
there's a build champion role that's the

00:19:12,720 --> 00:19:17,120
same person as the inbox tracker

00:19:14,960 --> 00:19:19,280
that's the person that has to make sure

00:19:17,120 --> 00:19:21,760
that our insider bills are released

00:19:19,280 --> 00:19:23,360
every day and are fine and then we have

00:19:21,760 --> 00:19:24,000
the end game champion that runs the end

00:19:23,360 --> 00:19:26,960
game it's

00:19:24,000 --> 00:19:28,320
a monthly assignment and it's quite a

00:19:26,960 --> 00:19:30,240
job i would say because you have to run

00:19:28,320 --> 00:19:32,240
the end game show for a week

00:19:30,240 --> 00:19:34,000
but you are assisted by the end game

00:19:32,240 --> 00:19:35,360
buddy in the other time zone

00:19:34,000 --> 00:19:37,200
and that is typically the uncamped

00:19:35,360 --> 00:19:38,960
champion of the last iteration to hand

00:19:37,200 --> 00:19:41,520
it over

00:19:38,960 --> 00:19:43,280
yeah so i think we reached the end of

00:19:41,520 --> 00:19:47,679
the presentation

00:19:43,280 --> 00:19:49,840
i would like to shout out our github url

00:19:47,679 --> 00:19:52,160
microsoft slash vs code on github to

00:19:49,840 --> 00:19:53,919
really exercise this for yourself

00:19:52,160 --> 00:19:55,919
look at our issues look at our wiki

00:19:53,919 --> 00:19:59,039
pages our roadmap and

00:19:55,919 --> 00:19:59,039

YouTube URL: https://www.youtube.com/watch?v=-Olo7N9xwV8


