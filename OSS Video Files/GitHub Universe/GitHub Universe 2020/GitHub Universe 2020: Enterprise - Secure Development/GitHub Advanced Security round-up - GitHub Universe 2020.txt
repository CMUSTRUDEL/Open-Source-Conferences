Title: GitHub Advanced Security round-up - GitHub Universe 2020
Publication date: 2020-12-09
Playlist: GitHub Universe 2020: Enterprise - Secure Development
Description: 
	Presented by Justin Hutchings, Staff Product Manager - Security, GitHub

The state of software security is changing constantly, and it can be hard to keep up! This session is for novices and experts alike who are looking for an overview of all things software security. We'll walk through the latest trends in security, and tell you about how GitHub Advanced Security, the all-in-one DevSecOps solution from GitHub that can help you up your security game.

For more from GitHub Universe 2020, visit https://githubuniverse.com

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:07,359 --> 00:00:10,559
hi

00:00:07,919 --> 00:00:12,160
and welcome to uh the github advanced

00:00:10,559 --> 00:00:14,160
security roundup

00:00:12,160 --> 00:00:16,240
i'm justin hutchings and i'm a product

00:00:14,160 --> 00:00:17,920
manager on github's security team

00:00:16,240 --> 00:00:19,680
today i'll give you a very brief

00:00:17,920 --> 00:00:20,640
introduction to the state of software

00:00:19,680 --> 00:00:22,240
security

00:00:20,640 --> 00:00:24,320
tell you about some of things github has

00:00:22,240 --> 00:00:25,519
been working on that can really help you

00:00:24,320 --> 00:00:27,199
protect yourselves

00:00:25,519 --> 00:00:29,359
from the modern security threats that

00:00:27,199 --> 00:00:32,320
are out there

00:00:29,359 --> 00:00:34,480
so let's start by touching base on the

00:00:32,320 --> 00:00:36,719
state of software security

00:00:34,480 --> 00:00:38,960
and i need to acknowledge i can't tell

00:00:36,719 --> 00:00:41,840
you everything about software security

00:00:38,960 --> 00:00:42,960
in a 20-minute talk we could spend hours

00:00:41,840 --> 00:00:46,160
on any one

00:00:42,960 --> 00:00:46,879
chunk here at github we're really

00:00:46,160 --> 00:00:48,800
focused on

00:00:46,879 --> 00:00:50,399
understanding security from the

00:00:48,800 --> 00:00:52,320
developer's point of view

00:00:50,399 --> 00:00:53,680
because empowering developers to build

00:00:52,320 --> 00:00:56,239
secure code

00:00:53,680 --> 00:00:59,840
is one of the best ways to move the

00:00:56,239 --> 00:00:59,840
needle on your security story

00:01:00,559 --> 00:01:04,559
now there's a ton of great data in the

00:01:02,399 --> 00:01:06,400
state of the octoverse report this year

00:01:04,559 --> 00:01:08,640
but one of the things that i like to

00:01:06,400 --> 00:01:11,920
point out is how developers

00:01:08,640 --> 00:01:13,520
introduce security vulnerabilities at a

00:01:11,920 --> 00:01:16,080
relatively constant rate

00:01:13,520 --> 00:01:18,960
with every line of code that's written

00:01:16,080 --> 00:01:20,960
and that's not me criticizing developers

00:01:18,960 --> 00:01:22,720
i don't write the code and i know just

00:01:20,960 --> 00:01:24,799
how hard it is

00:01:22,720 --> 00:01:26,560
this should really underscore that

00:01:24,799 --> 00:01:28,720
writing secure software

00:01:26,560 --> 00:01:30,000
is really hard it doesn't matter how

00:01:28,720 --> 00:01:32,640
smart your team is

00:01:30,000 --> 00:01:33,840
it doesn't matter you know how well you

00:01:32,640 --> 00:01:36,000
hire

00:01:33,840 --> 00:01:37,520
there's a reason that mitre has so many

00:01:36,000 --> 00:01:39,759
different cwe buckets

00:01:37,520 --> 00:01:42,240
it's because as humans we tend to

00:01:39,759 --> 00:01:45,759
introduce the same kinds of problems

00:01:42,240 --> 00:01:45,759
over and over again

00:01:45,920 --> 00:01:49,200
you know another great source for

00:01:47,360 --> 00:01:51,200
context on the ecosystem

00:01:49,200 --> 00:01:53,119
is verico's state of software security

00:01:51,200 --> 00:01:56,159
report and that tells us

00:01:53,119 --> 00:01:56,560
that around 83 of applications have at

00:01:56,159 --> 00:01:59,759
least

00:01:56,560 --> 00:02:02,079
one security vulnerability in them so

00:01:59,759 --> 00:02:03,920
if you're not doing something to go and

00:02:02,079 --> 00:02:05,840
find those and mitigate them

00:02:03,920 --> 00:02:08,000
you're putting your users at risk

00:02:05,840 --> 00:02:11,520
whether that's open source or enterprise

00:02:08,000 --> 00:02:13,840
software that could be a real problem

00:02:11,520 --> 00:02:14,720
but there's reason for hope and that's

00:02:13,840 --> 00:02:17,920
because

00:02:14,720 --> 00:02:19,840
organizations that adopt devsecops

00:02:17,920 --> 00:02:23,200
practices

00:02:19,840 --> 00:02:24,800
run and run security scans daily reduce

00:02:23,200 --> 00:02:25,520
their mean time to remediate security

00:02:24,800 --> 00:02:28,560
problems

00:02:25,520 --> 00:02:30,319
by around 72 percent versus

00:02:28,560 --> 00:02:33,280
organizations that run

00:02:30,319 --> 00:02:35,440
you know just a few times a year that's

00:02:33,280 --> 00:02:37,360
a big difference in terms of how long

00:02:35,440 --> 00:02:39,760
your users are exposed

00:02:37,360 --> 00:02:42,239
as well as just how secure you are

00:02:39,760 --> 00:02:42,239
overall

00:02:42,879 --> 00:02:46,480
so that's why we at github have been

00:02:45,120 --> 00:02:47,760
hard at work with a collection of

00:02:46,480 --> 00:02:51,040
security solutions

00:02:47,760 --> 00:02:52,560
that we call github advanced security

00:02:51,040 --> 00:02:54,959
within github advanced security we've

00:02:52,560 --> 00:02:57,920
got three major product areas

00:02:54,959 --> 00:02:59,280
the first is secure dependencies and

00:02:57,920 --> 00:03:01,280
this is your classic software

00:02:59,280 --> 00:03:04,560
composition analysis or

00:03:01,280 --> 00:03:05,840
sca capabilities they help you track the

00:03:04,560 --> 00:03:07,519
software you depend on for

00:03:05,840 --> 00:03:10,159
vulnerabilities

00:03:07,519 --> 00:03:11,840
considering that you know as much as 90

00:03:10,159 --> 00:03:14,319
of the code on github

00:03:11,840 --> 00:03:15,519
depends on open source vulnerabilities

00:03:14,319 --> 00:03:19,360
in your supply chain

00:03:15,519 --> 00:03:21,599
are more important than ever

00:03:19,360 --> 00:03:23,120
the next area is secure code and this is

00:03:21,599 --> 00:03:24,879
our set of features that handle static

00:03:23,120 --> 00:03:27,519
analysis security testing

00:03:24,879 --> 00:03:30,000
or sas while sca looks for

00:03:27,519 --> 00:03:31,840
vulnerabilities in code you depend on

00:03:30,000 --> 00:03:33,120
sas looks for vulnerabilities in code

00:03:31,840 --> 00:03:35,200
you wrote by

00:03:33,120 --> 00:03:38,159
analyzing that code and finding bad

00:03:35,200 --> 00:03:40,799
patterns and data flows

00:03:38,159 --> 00:03:42,560
finally secure secrets we know

00:03:40,799 --> 00:03:43,599
credential leaks are a huge problem both

00:03:42,560 --> 00:03:46,319
for security

00:03:43,599 --> 00:03:47,840
and reliability reasons i mean have you

00:03:46,319 --> 00:03:50,080
ever tried to roll keys on an

00:03:47,840 --> 00:03:51,360
app where someone hard-coded credentials

00:03:50,080 --> 00:03:52,640
into the source code

00:03:51,360 --> 00:03:54,640
instead of putting them into the key

00:03:52,640 --> 00:03:56,000
vault it's not going to be a good day

00:03:54,640 --> 00:03:59,439
you're going to cause an outage

00:03:56,000 --> 00:03:59,439
and everyone's going to be unhappy

00:03:59,599 --> 00:04:04,879
so let's drill in

00:04:02,959 --> 00:04:06,319
you know with secure dependencies we've

00:04:04,879 --> 00:04:08,319
got three capabilities that are going to

00:04:06,319 --> 00:04:10,000
make your life a lot easier

00:04:08,319 --> 00:04:11,360
um the first one is dependable

00:04:10,000 --> 00:04:13,200
dependabat is our

00:04:11,360 --> 00:04:15,040
trusty robot that watches for

00:04:13,200 --> 00:04:16,000
vulnerabilities and sends you automated

00:04:15,040 --> 00:04:18,720
pull requests

00:04:16,000 --> 00:04:20,239
to help keep things up to date

00:04:18,720 --> 00:04:21,199
dependency review is a brand new

00:04:20,239 --> 00:04:24,320
capability that

00:04:21,199 --> 00:04:27,040
we unveil unveiled here today you might

00:04:24,320 --> 00:04:29,520
have seen nat speak about it earlier

00:04:27,040 --> 00:04:30,960
this helps give code reviewers insights

00:04:29,520 --> 00:04:32,320
about the dependencies in your pull

00:04:30,960 --> 00:04:34,240
requests

00:04:32,320 --> 00:04:35,680
and then finally the dependency graph

00:04:34,240 --> 00:04:38,800
which is the plumbing that makes all

00:04:35,680 --> 00:04:38,800
this possible on github

00:04:39,520 --> 00:04:43,360
so dependable is a terrific service

00:04:41,919 --> 00:04:46,639
because it really makes

00:04:43,360 --> 00:04:48,400
fixing vulnerabilities so easy

00:04:46,639 --> 00:04:49,840
it starts by telling you when there are

00:04:48,400 --> 00:04:51,360
security vulnerabilities in your

00:04:49,840 --> 00:04:53,440
dependencies

00:04:51,360 --> 00:04:54,960
but what makes it special is that it

00:04:53,440 --> 00:04:57,040
generates a pull request

00:04:54,960 --> 00:04:58,720
that updates you to the minimum secure

00:04:57,040 --> 00:05:00,479
version of your dependency

00:04:58,720 --> 00:05:02,880
and it even shows you a compatibility

00:05:00,479 --> 00:05:04,560
score so you can get a better idea of

00:05:02,880 --> 00:05:05,919
whether this is likely to cause problems

00:05:04,560 --> 00:05:07,919
in your app

00:05:05,919 --> 00:05:09,360
we do this because for every one of

00:05:07,919 --> 00:05:11,919
these pull requests

00:05:09,360 --> 00:05:13,280
on a public repository we look at the ci

00:05:11,919 --> 00:05:15,600
results associated with

00:05:13,280 --> 00:05:17,440
repos that are impacted and then we can

00:05:15,600 --> 00:05:18,160
aggregate all those insights at github

00:05:17,440 --> 00:05:21,199
scale

00:05:18,160 --> 00:05:23,759
to say whether this particular change

00:05:21,199 --> 00:05:26,000
is likely to cause any problems for you

00:05:23,759 --> 00:05:28,720
and this is super effective

00:05:26,000 --> 00:05:30,320
you know we see that repositories that

00:05:28,720 --> 00:05:32,880
use dependabot

00:05:30,320 --> 00:05:33,680
fix their vulnerabilities 1.4 times

00:05:32,880 --> 00:05:39,440
faster

00:05:33,680 --> 00:05:40,960
than repositories without it

00:05:39,440 --> 00:05:42,880
dependency review is a brand new

00:05:40,960 --> 00:05:45,759
capability as well and this is going to

00:05:42,880 --> 00:05:47,120
be rolling out over the next few weeks

00:05:45,759 --> 00:05:49,039
this is an experience we've added to

00:05:47,120 --> 00:05:51,360
your pull requests that helps the

00:05:49,039 --> 00:05:53,759
developers reviewing your code

00:05:51,360 --> 00:05:56,160
understand the impact of changes in the

00:05:53,759 --> 00:05:58,720
dependencies in a pull request

00:05:56,160 --> 00:06:01,280
now this could be as simple as telling

00:05:58,720 --> 00:06:02,479
you what dependencies you have

00:06:01,280 --> 00:06:03,840
all the way through helping you

00:06:02,479 --> 00:06:05,120
understand whether there are

00:06:03,840 --> 00:06:06,639
vulnerabilities

00:06:05,120 --> 00:06:08,400
or whether it has a license that's

00:06:06,639 --> 00:06:10,000
compatible with your business

00:06:08,400 --> 00:06:13,600
we all know somebody that's going to be

00:06:10,000 --> 00:06:15,039
upset when you check in some gpl b3

00:06:13,600 --> 00:06:17,120
this feature is free for open source

00:06:15,039 --> 00:06:18,840
repositories and it's available as part

00:06:17,120 --> 00:06:21,840
of advanced security for our enterprise

00:06:18,840 --> 00:06:21,840
customers

00:06:23,039 --> 00:06:26,479
finally the dependency graph is what

00:06:24,800 --> 00:06:28,240
makes all of our dependency security

00:06:26,479 --> 00:06:30,400
features possible

00:06:28,240 --> 00:06:32,160
it does this by scanning the manifest

00:06:30,400 --> 00:06:34,560
files for supported

00:06:32,160 --> 00:06:38,000
package managers and building out a

00:06:34,560 --> 00:06:39,840
graph of all the software you depend on

00:06:38,000 --> 00:06:41,039
now we've got great coverage here we

00:06:39,840 --> 00:06:43,840
currently support

00:06:41,039 --> 00:06:44,800
npm and yarn for javascript maven for

00:06:43,840 --> 00:06:48,000
java

00:06:44,800 --> 00:06:49,280
nuget for net developers composer for

00:06:48,000 --> 00:06:52,319
you php

00:06:49,280 --> 00:06:55,199
developers rubygen for ruby

00:06:52,319 --> 00:06:57,199
and then pi pi for python and so for

00:06:55,199 --> 00:06:59,280
most of you we've got something

00:06:57,199 --> 00:07:03,759
and of course this is an area that we're

00:06:59,280 --> 00:07:06,800
constantly looking to improve

00:07:03,759 --> 00:07:07,919
so let's look at secure code now i'll

00:07:06,800 --> 00:07:08,400
tell you about a few of the things that

00:07:07,919 --> 00:07:11,840
set up

00:07:08,400 --> 00:07:13,199
set us apart first code scanning

00:07:11,840 --> 00:07:14,960
this is our integrated developer

00:07:13,199 --> 00:07:17,120
experience for running sas tools

00:07:14,960 --> 00:07:19,120
and visualizing those results inside

00:07:17,120 --> 00:07:21,680
developer workflows

00:07:19,120 --> 00:07:23,759
next we've got codeql which is github's

00:07:21,680 --> 00:07:25,840
own semantic code analysis engine

00:07:23,759 --> 00:07:27,599
and it's the backbone of our secure code

00:07:25,840 --> 00:07:29,039
offerings

00:07:27,599 --> 00:07:31,680
last we built our code scanning

00:07:29,039 --> 00:07:33,199
experience to interoperate with lots of

00:07:31,680 --> 00:07:36,639
third-party analyzers

00:07:33,199 --> 00:07:36,639
so we'll tell you about some of those

00:07:37,919 --> 00:07:42,800
now if you've ever tried to ask a

00:07:39,840 --> 00:07:45,280
developer who is otherwise really busy

00:07:42,800 --> 00:07:46,800
to take security problems seriously you

00:07:45,280 --> 00:07:48,879
know how tough it can be

00:07:46,800 --> 00:07:50,560
because you're competing against so many

00:07:48,879 --> 00:07:52,080
other priorities

00:07:50,560 --> 00:07:54,080
that's why we've made it really easy to

00:07:52,080 --> 00:07:57,199
view results in code scanning

00:07:54,080 --> 00:07:59,360
super easy by integrating those alerts

00:07:57,199 --> 00:08:01,199
into pull requests and making sure the

00:07:59,360 --> 00:08:03,120
developers are only blocked

00:08:01,199 --> 00:08:05,520
when they introduce a net new

00:08:03,120 --> 00:08:07,360
vulnerability in their code

00:08:05,520 --> 00:08:08,960
that way when you have a lot of security

00:08:07,360 --> 00:08:10,560
debt it's not going to come up every day

00:08:08,960 --> 00:08:12,479
it's not going to slow you down

00:08:10,560 --> 00:08:15,599
it's still there and we hope you'll fix

00:08:12,479 --> 00:08:17,199
it but it's not in your way

00:08:15,599 --> 00:08:19,360
you know code scanning is the best and

00:08:17,199 --> 00:08:22,560
easiest way to run code ql

00:08:19,360 --> 00:08:23,840
or other analysis tools on github we've

00:08:22,560 --> 00:08:26,160
integrated with both

00:08:23,840 --> 00:08:28,000
the action ci system as well as some

00:08:26,160 --> 00:08:29,919
third-party ci systems using a simple

00:08:28,000 --> 00:08:31,520
cli

00:08:29,919 --> 00:08:33,760
code scanning is generally available in

00:08:31,520 --> 00:08:34,959
cloud and as maya mentioned in the

00:08:33,760 --> 00:08:36,320
previous section

00:08:34,959 --> 00:08:38,800
will be generally available in the

00:08:36,320 --> 00:08:42,880
upcoming enterprise server 3.0 release

00:08:38,800 --> 00:08:45,279
as well codeql

00:08:42,880 --> 00:08:47,839
is the semantic analysis engine that

00:08:45,279 --> 00:08:50,000
powers our own security analysis

00:08:47,839 --> 00:08:51,760
now a lot of static analysis tools out

00:08:50,000 --> 00:08:53,600
there do things like use regular

00:08:51,760 --> 00:08:56,000
expressions or look at bytecode

00:08:53,600 --> 00:08:57,839
to try and figure out what's happening

00:08:56,000 --> 00:08:59,920
codeql we actually map

00:08:57,839 --> 00:09:01,440
all the code in your repository into a

00:08:59,920 --> 00:09:04,320
graph database

00:09:01,440 --> 00:09:06,560
and this is uh special because it allows

00:09:04,320 --> 00:09:07,279
security researchers to reason over that

00:09:06,560 --> 00:09:10,000
code

00:09:07,279 --> 00:09:11,519
and develop queries that can find really

00:09:10,000 --> 00:09:14,320
complicated vulnerabilities

00:09:11,519 --> 00:09:16,399
with really high precision you know

00:09:14,320 --> 00:09:17,839
we've open source more than two thousand

00:09:16,399 --> 00:09:20,640
codeql queries

00:09:17,839 --> 00:09:21,519
on github we work with partners across

00:09:20,640 --> 00:09:23,600
the community

00:09:21,519 --> 00:09:25,120
to improve these to reduce false

00:09:23,600 --> 00:09:27,519
positives as well as

00:09:25,120 --> 00:09:29,760
improve coverage of new types of

00:09:27,519 --> 00:09:32,000
vulnerabilities

00:09:29,760 --> 00:09:33,839
in fact we've been focused on reviewing

00:09:32,000 --> 00:09:35,360
the set of cves that have been published

00:09:33,839 --> 00:09:36,560
over the last couple years

00:09:35,360 --> 00:09:39,040
and whether our queries would have

00:09:36,560 --> 00:09:41,120
caught them you know as of today we find

00:09:39,040 --> 00:09:43,440
that about 24

00:09:41,120 --> 00:09:44,640
of recent javascript cves out there

00:09:43,440 --> 00:09:48,080
would have been caught

00:09:44,640 --> 00:09:50,240
by a default code ql query on github

00:09:48,080 --> 00:09:52,160
and that may not sound like a lot but go

00:09:50,240 --> 00:09:55,360
and look how many cves there are

00:09:52,160 --> 00:09:56,800
for javascript it's a lot and

00:09:55,360 --> 00:09:59,760
this can really help improve your

00:09:56,800 --> 00:09:59,760
security posture

00:10:00,080 --> 00:10:03,760
now codeql currently supports seven of

00:10:01,920 --> 00:10:04,800
the top programming languages out there

00:10:03,760 --> 00:10:08,240
including c

00:10:04,800 --> 00:10:11,519
c plus plus c sharp go javascript

00:10:08,240 --> 00:10:13,200
java python and typescript of course

00:10:11,519 --> 00:10:15,040
we're working on expanding this coverage

00:10:13,200 --> 00:10:16,880
soon so i'll just say

00:10:15,040 --> 00:10:19,120
keep an eye on the roadmap for a little

00:10:16,880 --> 00:10:22,720
more information there

00:10:19,120 --> 00:10:25,360
we're also detecting more than 160 cwes

00:10:22,720 --> 00:10:27,200
or common weaknesses this includes all

00:10:25,360 --> 00:10:27,920
the classic problems that you know to

00:10:27,200 --> 00:10:30,839
look for

00:10:27,920 --> 00:10:33,279
like cross-site scripting or denial of

00:10:30,839 --> 00:10:34,720
service

00:10:33,279 --> 00:10:36,720
and you know i mentioned security

00:10:34,720 --> 00:10:38,720
researchers earlier and i think it's an

00:10:36,720 --> 00:10:40,800
important point to drill in on

00:10:38,720 --> 00:10:42,640
the github security lab is a coalition

00:10:40,800 --> 00:10:44,240
we've built with the security research

00:10:42,640 --> 00:10:45,839
community to help find

00:10:44,240 --> 00:10:47,839
new vulnerabilities and get them

00:10:45,839 --> 00:10:49,360
responsibly patched

00:10:47,839 --> 00:10:52,399
we've been running a bounty program to

00:10:49,360 --> 00:10:54,920
encourage participation participation

00:10:52,399 --> 00:10:56,880
and to date our researchers have found

00:10:54,920 --> 00:10:58,880
186 cves

00:10:56,880 --> 00:11:00,399
including ones like this remote code

00:10:58,880 --> 00:11:02,800
execution vulnerability

00:11:00,399 --> 00:11:04,800
alvaro uncovered in germany's covet 19

00:11:02,800 --> 00:11:06,160
contact racing software

00:11:04,800 --> 00:11:08,640
and this is the sort of stuff that the

00:11:06,160 --> 00:11:10,399
security lab does every day

00:11:08,640 --> 00:11:12,000
they're going out and trying to innovate

00:11:10,399 --> 00:11:14,880
to find new vulnerabilities

00:11:12,000 --> 00:11:17,120
that we can then bring back and

00:11:14,880 --> 00:11:20,160
inoculate your software against

00:11:17,120 --> 00:11:20,160
using codeql

00:11:20,320 --> 00:11:23,839
of course we're big believers in defense

00:11:23,040 --> 00:11:25,680
in depth

00:11:23,839 --> 00:11:28,160
which is why we built code scanning to

00:11:25,680 --> 00:11:29,440
be interoperable from the start

00:11:28,160 --> 00:11:31,360
we've been engaging with the broader

00:11:29,440 --> 00:11:33,120
community of security tool vendors

00:11:31,360 --> 00:11:34,560
and open source projects to make it

00:11:33,120 --> 00:11:36,720
really easy

00:11:34,560 --> 00:11:37,600
to add in scenarios like container

00:11:36,720 --> 00:11:39,519
scanning

00:11:37,600 --> 00:11:41,680
you know using a tool like anchor or

00:11:39,519 --> 00:11:43,440
trivi or sneak

00:11:41,680 --> 00:11:44,959
doing configures code scanning so your

00:11:43,440 --> 00:11:46,560
yaml and

00:11:44,959 --> 00:11:49,120
you know hashicorp files are all

00:11:46,560 --> 00:11:50,160
protected or even performing analysis on

00:11:49,120 --> 00:11:52,560
additional languages

00:11:50,160 --> 00:11:54,000
with open source tools like breakband or

00:11:52,560 --> 00:11:54,480
with any of these commercial products

00:11:54,000 --> 00:11:56,800
that are

00:11:54,480 --> 00:11:57,920
that are in the sidebar we've done this

00:11:56,800 --> 00:12:00,720
by building against

00:11:57,920 --> 00:12:02,320
an open standard that makes it really

00:12:00,720 --> 00:12:04,079
easy for you to plug in your own tools

00:12:02,320 --> 00:12:06,160
as well

00:12:04,079 --> 00:12:08,399
now the reason this is so important is

00:12:06,160 --> 00:12:10,160
because by bringing all of this together

00:12:08,399 --> 00:12:13,200
in one user experience

00:12:10,160 --> 00:12:15,120
we're making it easier than ever to get

00:12:13,200 --> 00:12:16,240
security challenges in front of

00:12:15,120 --> 00:12:20,560
developers

00:12:16,240 --> 00:12:20,560
before they're a problem for your users

00:12:22,720 --> 00:12:25,519
rounding things out i want to tell you

00:12:24,160 --> 00:12:27,680
just a little bit about our secure

00:12:25,519 --> 00:12:32,399
secret capabilities with secret scanning

00:12:27,680 --> 00:12:32,399
for both public and private repos

00:12:32,959 --> 00:12:36,079
now you may know that we've been

00:12:34,240 --> 00:12:37,600
scanning public repos for secrets for

00:12:36,079 --> 00:12:39,440
the last couple of years

00:12:37,600 --> 00:12:41,200
you might have even seen an email when

00:12:39,440 --> 00:12:44,240
you made your own mistake

00:12:41,200 --> 00:12:46,399
checking in an aws key once you check a

00:12:44,240 --> 00:12:47,680
secret into a public repository and push

00:12:46,399 --> 00:12:49,120
that to github

00:12:47,680 --> 00:12:51,360
you've got to consider a compromise

00:12:49,120 --> 00:12:53,519
there's no coming back from that

00:12:51,360 --> 00:12:55,440
so secret scanning in public repos is

00:12:53,519 --> 00:12:58,000
integrated with more than 30 partners

00:12:55,440 --> 00:12:59,519
who review potential matches in those

00:12:58,000 --> 00:13:00,880
public repositories

00:12:59,519 --> 00:13:02,959
and then revoke the secrets from the

00:13:00,880 --> 00:13:04,720
server side before they can be used

00:13:02,959 --> 00:13:06,240
maliciously

00:13:04,720 --> 00:13:08,480
you know we're still seeing more than a

00:13:06,240 --> 00:13:11,600
hundred thousand potential secrets

00:13:08,480 --> 00:13:14,160
per week in public repositories

00:13:11,600 --> 00:13:16,399
because this is such an easy mistake to

00:13:14,160 --> 00:13:16,399
make

00:13:18,800 --> 00:13:21,760
and we're using that exact same

00:13:20,079 --> 00:13:22,639
infrastructure to help enterprise

00:13:21,760 --> 00:13:24,399
developers

00:13:22,639 --> 00:13:27,120
identify secrets in their private code

00:13:24,399 --> 00:13:28,399
as well this scans the full history of

00:13:27,120 --> 00:13:30,079
your repositories

00:13:28,399 --> 00:13:32,000
and it provides users with a native

00:13:30,079 --> 00:13:34,240
experience for triaging secrets that we

00:13:32,000 --> 00:13:36,000
find in your code

00:13:34,240 --> 00:13:38,079
as much as this is a security feature

00:13:36,000 --> 00:13:40,480
it's also a reliability feature

00:13:38,079 --> 00:13:42,079
i mentioned earlier rotating secrets can

00:13:40,480 --> 00:13:43,839
be really problematic

00:13:42,079 --> 00:13:45,839
if you've got secrets checked into your

00:13:43,839 --> 00:13:47,839
code you know that can cause

00:13:45,839 --> 00:13:48,880
big problems because maybe one of your

00:13:47,839 --> 00:13:50,320
micro services

00:13:48,880 --> 00:13:52,560
doesn't use the key vault and the other

00:13:50,320 --> 00:13:55,920
ones do so you flip the switch and all

00:13:52,560 --> 00:13:55,920
of a sudden you've got an outage

00:13:56,240 --> 00:14:00,160
secret scanning is available in beta on

00:13:58,000 --> 00:14:02,079
both cloud and the upcoming github

00:14:00,160 --> 00:14:05,519
enterprise server 3.0 release

00:14:02,079 --> 00:14:07,839
so it's there for you to try and we hope

00:14:05,519 --> 00:14:07,839
you will

00:14:10,160 --> 00:14:13,600
i mentioned partners for secret scanning

00:14:11,920 --> 00:14:15,839
and we've got a ton of them

00:14:13,600 --> 00:14:17,279
we're working from with everyone from

00:14:15,839 --> 00:14:20,320
you know big clouds

00:14:17,279 --> 00:14:21,920
like aws azure or google through

00:14:20,320 --> 00:14:24,959
developer tools like npm

00:14:21,920 --> 00:14:27,199
twilio hashicorp or pollumi

00:14:24,959 --> 00:14:28,880
this list is growing all the time as

00:14:27,199 --> 00:14:30,800
more and more companies

00:14:28,880 --> 00:14:32,720
work to help their users avoid security

00:14:30,800 --> 00:14:34,399
risks in the cloud

00:14:32,720 --> 00:14:35,920
all it takes is some regular expressions

00:14:34,399 --> 00:14:38,399
and a webhook endpoint

00:14:35,920 --> 00:14:39,920
so if your service produces tokens i

00:14:38,399 --> 00:14:41,040
would definitely recommend reaching out

00:14:39,920 --> 00:14:44,800
to us and we'd be

00:14:41,040 --> 00:14:46,880
happy to partner with you

00:14:44,800 --> 00:14:48,800
you know that was a very quick summary

00:14:46,880 --> 00:14:50,480
of some of our security features

00:14:48,800 --> 00:14:52,800
and as you leave here today i want you

00:14:50,480 --> 00:14:54,240
to go back and review

00:14:52,800 --> 00:14:55,839
some of your code security best

00:14:54,240 --> 00:14:58,480
practices are you

00:14:55,839 --> 00:14:59,600
monitoring dependencies are you looking

00:14:58,480 --> 00:15:02,800
at your code

00:14:59,600 --> 00:15:04,079
or your secrets if you're not

00:15:02,800 --> 00:15:06,160
i'd ask that you jump on over to

00:15:04,079 --> 00:15:08,079
github.com features

00:15:06,160 --> 00:15:10,399
security so you can learn more about

00:15:08,079 --> 00:15:13,040
what we have

00:15:10,399 --> 00:15:14,880
of course i'd be remiss not to mention

00:15:13,040 --> 00:15:16,639
just a ton of

00:15:14,880 --> 00:15:19,040
additional security talks that have

00:15:16,639 --> 00:15:20,480
already aired at github universe today

00:15:19,040 --> 00:15:22,720
you know these talks go into more detail

00:15:20,480 --> 00:15:23,680
about things like codeql or dependency

00:15:22,720 --> 00:15:25,519
review

00:15:23,680 --> 00:15:27,199
and uh if you'd like to learn more i

00:15:25,519 --> 00:15:30,160
definitely encourage you to catch up on

00:15:27,199 --> 00:15:33,199
those videos later on

00:15:30,160 --> 00:15:40,079
on the webcast with that thank you and

00:15:33,199 --> 00:15:42,399
back to the host

00:15:40,079 --> 00:15:42,399

YouTube URL: https://www.youtube.com/watch?v=T_-Tn81b4lc


