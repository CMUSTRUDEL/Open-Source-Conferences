Title: Delivering code to car with Tekton and GitHub Advanced Security - GitHub Universe 2020
Publication date: 2020-12-09
Playlist: GitHub Universe 2020: Enterprise - Secure Development
Description: 
	Presented by
Dan Hebberd, Senior Engineer, TRI-AD
Gwenn Etourneau, Senior Infrastructure Engineer, TRI-AD

For more from GitHub Universe 2020, visit https://githubuniverse.com

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:06,000 --> 00:00:09,360
hello everyone

00:00:06,960 --> 00:00:10,880
and thank you for joining us today my

00:00:09,360 --> 00:00:12,719
name is gwenyton

00:00:10,880 --> 00:00:13,920
and together with my teammate daniel

00:00:12,719 --> 00:00:16,160
albert

00:00:13,920 --> 00:00:16,960
we are going to introduce from code to

00:00:16,160 --> 00:00:19,279
the car

00:00:16,960 --> 00:00:21,680
with github advanced security on tekton

00:00:19,279 --> 00:00:21,680
cd

00:00:23,279 --> 00:00:28,400
so this is to the agenda first

00:00:26,400 --> 00:00:30,720
we will introduce our company and the

00:00:28,400 --> 00:00:33,200
product we are working on

00:00:30,720 --> 00:00:35,840
and the challenge that we are facing and

00:00:33,200 --> 00:00:38,320
how we address them

00:00:35,840 --> 00:00:39,680
then why we decide to go with github

00:00:38,320 --> 00:00:42,719
advanced security

00:00:39,680 --> 00:00:45,840
and how we integrate within our workflow

00:00:42,719 --> 00:00:45,840
using tech density

00:00:47,920 --> 00:00:51,680
thanks very much gwen you may not have

00:00:51,039 --> 00:00:55,440
heard of

00:00:51,680 --> 00:00:57,760
us before our company triad

00:00:55,440 --> 00:00:58,879
is a fairly new company based here in

00:00:57,760 --> 00:01:01,440
nihombashi

00:00:58,879 --> 00:01:03,440
in tokyo japan we've been around for

00:01:01,440 --> 00:01:04,479
about two years we've been rapidly

00:01:03,440 --> 00:01:07,840
growing

00:01:04,479 --> 00:01:09,680
throughout it's our goal at trid

00:01:07,840 --> 00:01:11,840
to blend the best of silicon valley

00:01:09,680 --> 00:01:14,479
innovation with the quality driven

00:01:11,840 --> 00:01:16,560
values of a trusted japanese company

00:01:14,479 --> 00:01:18,479
in order to create the world's a

00:01:16,560 --> 00:01:21,600
world-class technology

00:01:18,479 --> 00:01:23,040
and build the safest car in the world

00:01:21,600 --> 00:01:25,040
we believe this is a place where

00:01:23,040 --> 00:01:26,960
engineers and designers can manifest

00:01:25,040 --> 00:01:28,880
their dreams into globe-spanning

00:01:26,960 --> 00:01:31,920
realities

00:01:28,880 --> 00:01:33,840
it's our role to build a robust pipeline

00:01:31,920 --> 00:01:36,000
between research and production

00:01:33,840 --> 00:01:37,040
in order to accelerate the development

00:01:36,000 --> 00:01:40,479
and deployment of

00:01:37,040 --> 00:01:40,960
automated vehicle technology have a lot

00:01:40,479 --> 00:01:42,799
of

00:01:40,960 --> 00:01:45,439
very exciting projects underway here at

00:01:42,799 --> 00:01:49,520
trid and i encourage you to look us up

00:01:45,439 --> 00:01:49,520
and learn more about what's going on

00:01:50,640 --> 00:01:53,920
i've included a bunch of photos of what

00:01:52,720 --> 00:01:58,960
it's like to work a

00:01:53,920 --> 00:02:01,680
tier id in more relatively normal times

00:01:58,960 --> 00:02:02,479
you can see my messy standing desk down

00:02:01,680 --> 00:02:04,799
there in the

00:02:02,479 --> 00:02:06,840
bottom left you can see where gwen's

00:02:04,799 --> 00:02:08,959
team would normally sit in the bottom

00:02:06,840 --> 00:02:12,239
right uh and you can see

00:02:08,959 --> 00:02:12,959
um our next generation usability

00:02:12,239 --> 00:02:16,400
simulator

00:02:12,959 --> 00:02:17,920
in the the sort of middle bottom there

00:02:16,400 --> 00:02:19,520
if you'd like to learn more about what's

00:02:17,920 --> 00:02:23,200
going on with that then

00:02:19,520 --> 00:02:25,920
jump on our website and read more about

00:02:23,200 --> 00:02:25,920
what's going on

00:02:27,599 --> 00:02:31,599
so the product gwen and i are working on

00:02:29,599 --> 00:02:33,680
here ied is called irene

00:02:31,599 --> 00:02:36,160
and it's our goal with irene to open

00:02:33,680 --> 00:02:38,480
vehicle programming to everybody by

00:02:36,160 --> 00:02:41,200
simplifying vehicle software development

00:02:38,480 --> 00:02:41,760
and increasing deployment frequency

00:02:41,200 --> 00:02:44,560
without

00:02:41,760 --> 00:02:45,200
compromising safety and security we

00:02:44,560 --> 00:02:47,280
believe

00:02:45,200 --> 00:02:49,120
this will create a whole new market of

00:02:47,280 --> 00:02:51,599
vehicle application developers

00:02:49,120 --> 00:02:53,680
through software are able to integrate a

00:02:51,599 --> 00:02:56,560
vehicle into our daily lives

00:02:53,680 --> 00:02:56,560
in novel ways

00:02:58,319 --> 00:03:02,720
irene is a vehicle development platform

00:03:01,040 --> 00:03:04,519
with state-of-the-art tools

00:03:02,720 --> 00:03:06,959
vehicle application programming

00:03:04,519 --> 00:03:10,319
interfaces safety building blocks

00:03:06,959 --> 00:03:13,440
which allow rapid iteration to shorten

00:03:10,319 --> 00:03:15,599
the time from concept to deployment

00:03:13,440 --> 00:03:16,720
arene enables developers and vehicle

00:03:15,599 --> 00:03:19,440
manufacturers

00:03:16,720 --> 00:03:20,560
to provide continuous value to customers

00:03:19,440 --> 00:03:22,879
through the frequent

00:03:20,560 --> 00:03:25,040
release of small software increments in

00:03:22,879 --> 00:03:27,440
an agile fashion

00:03:25,040 --> 00:03:29,280
with arene a new vehicle software

00:03:27,440 --> 00:03:31,440
development cycle is enabled

00:03:29,280 --> 00:03:33,280
with modern software development tools

00:03:31,440 --> 00:03:35,360
and best practices

00:03:33,280 --> 00:03:38,000
irene provides developers with a

00:03:35,360 --> 00:03:40,239
comprehensive set of tools and services

00:03:38,000 --> 00:03:42,319
in order to get their ideas into an

00:03:40,239 --> 00:03:44,239
actual vehicle

00:03:42,319 --> 00:03:45,360
using irene's carefully designed vehicle

00:03:44,239 --> 00:03:47,040
abstraction layer

00:03:45,360 --> 00:03:49,360
developers will be able to deploy the

00:03:47,040 --> 00:03:50,080
same code to any vehicle running arena

00:03:49,360 --> 00:03:52,480
os

00:03:50,080 --> 00:03:54,959
which includes middleware and a hardware

00:03:52,480 --> 00:03:54,959
abstraction

00:03:56,159 --> 00:03:59,280
so today vehicle software developers

00:03:58,879 --> 00:04:01,120
face

00:03:59,280 --> 00:04:02,560
a lot of challenges we're hoping to

00:04:01,120 --> 00:04:04,159
solve some of these challenges with

00:04:02,560 --> 00:04:08,000
arena

00:04:04,159 --> 00:04:11,599
and here's a few important points

00:04:08,000 --> 00:04:13,920
to discuss today first of all

00:04:11,599 --> 00:04:15,840
the process through which developers

00:04:13,920 --> 00:04:18,560
develop for vehicles

00:04:15,840 --> 00:04:20,239
suffers from long planning and

00:04:18,560 --> 00:04:22,079
development cycles

00:04:20,239 --> 00:04:24,160
and they developers typically have

00:04:22,079 --> 00:04:25,199
limited opportunity to deploy and test

00:04:24,160 --> 00:04:28,240
their code

00:04:25,199 --> 00:04:30,400
so developer agility is is reduced

00:04:28,240 --> 00:04:32,080
or opportunities for developer agility

00:04:30,400 --> 00:04:35,360
are reduced

00:04:32,080 --> 00:04:38,479
developers for vehicles need to

00:04:35,360 --> 00:04:42,639
work with a variety of proprietary

00:04:38,479 --> 00:04:44,720
and disconnected and unfamiliar tools

00:04:42,639 --> 00:04:47,199
there is a steep learning curve moving

00:04:44,720 --> 00:04:49,840
from non-vehicle software development

00:04:47,199 --> 00:04:51,199
into vehicle software development and

00:04:49,840 --> 00:04:54,080
again things like the

00:04:51,199 --> 00:04:56,240
the disconnected and unfamiliar and even

00:04:54,080 --> 00:05:00,000
proprietary tools are a big

00:04:56,240 --> 00:05:00,000
factor contributing towards that

00:05:01,919 --> 00:05:08,240
the tools and services which

00:05:05,120 --> 00:05:08,880
developers use to build and test are

00:05:08,240 --> 00:05:11,759
usually

00:05:08,880 --> 00:05:13,360
quite limited in terms of options for

00:05:11,759 --> 00:05:16,880
scalability

00:05:13,360 --> 00:05:20,000
um in particular with respect to

00:05:16,880 --> 00:05:22,960
frequency of testing

00:05:20,000 --> 00:05:24,639
every line of code which a developer

00:05:22,960 --> 00:05:27,120
writes needs to be

00:05:24,639 --> 00:05:28,880
traceable all the way from requirements

00:05:27,120 --> 00:05:31,680
to code in the

00:05:28,880 --> 00:05:32,880
and every artifact which we produce from

00:05:31,680 --> 00:05:35,919
code to car

00:05:32,880 --> 00:05:35,919
needs to be immutable

00:05:37,759 --> 00:05:42,080
we believe that through the use of

00:05:40,240 --> 00:05:44,400
github advanced security we can help

00:05:42,080 --> 00:05:46,880
solve some of these challenges

00:05:44,400 --> 00:05:47,840
first of all with respect to developer

00:05:46,880 --> 00:05:50,080
agility

00:05:47,840 --> 00:05:52,479
and the disconnected and unfamiliar

00:05:50,080 --> 00:05:56,720
nature of tooling

00:05:52,479 --> 00:05:59,039
we believe that we can integrate

00:05:56,720 --> 00:06:01,120
as much tooling as possible into the

00:05:59,039 --> 00:06:05,199
familiar github interface

00:06:01,120 --> 00:06:08,240
so examples include integrating

00:06:05,199 --> 00:06:11,919
status to the use of serif

00:06:08,240 --> 00:06:13,120
um and through the use of lgtm

00:06:11,919 --> 00:06:15,759
enterprise we can

00:06:13,120 --> 00:06:18,160
integrate the experience we provide to

00:06:15,759 --> 00:06:21,840
our developers in our github environment

00:06:18,160 --> 00:06:21,840
back to our gitlab

00:06:24,400 --> 00:06:28,160
secondly through the use of the codeql

00:06:27,360 --> 00:06:30,560
extension

00:06:28,160 --> 00:06:31,840
for vs code we're able to bring the

00:06:30,560 --> 00:06:34,720
static analysis

00:06:31,840 --> 00:06:36,960
scans that we perform via github into

00:06:34,720 --> 00:06:38,800
the developer's ide

00:06:36,960 --> 00:06:40,080
and through the use of plugins for

00:06:38,800 --> 00:06:42,800
familiar

00:06:40,080 --> 00:06:44,720
and popular ids like intellij we're able

00:06:42,800 --> 00:06:48,080
to bring the github experience

00:06:44,720 --> 00:06:50,000
into those ides

00:06:48,080 --> 00:06:51,840
super importantly for us through the use

00:06:50,000 --> 00:06:55,840
of code qr we can create

00:06:51,840 --> 00:06:58,400
custom rules for scanning important

00:06:55,840 --> 00:07:00,840
requirements and standards uh

00:06:58,400 --> 00:07:03,840
particularly with respect to safety and

00:07:00,840 --> 00:07:03,840
security

00:07:05,360 --> 00:07:10,240
so it's our goal to produce the world's

00:07:08,720 --> 00:07:12,000
safest vehicle

00:07:10,240 --> 00:07:13,599
safety and security of critical

00:07:12,000 --> 00:07:17,120
importance to us

00:07:13,599 --> 00:07:18,880
and as such implementation of tools

00:07:17,120 --> 00:07:21,599
workflows and processes to both

00:07:18,880 --> 00:07:22,800
guide simplify and enhance capabilities

00:07:21,599 --> 00:07:24,960
to conform to

00:07:22,800 --> 00:07:26,880
and exceed the expectations of these

00:07:24,960 --> 00:07:28,319
standards is again of critical

00:07:26,880 --> 00:07:30,319
importance

00:07:28,319 --> 00:07:33,280
two standards that matter tremendously

00:07:30,319 --> 00:07:35,360
to us iso 26262

00:07:33,280 --> 00:07:37,280
functional safety for road vehicles and

00:07:35,360 --> 00:07:41,280
iso 21434

00:07:37,280 --> 00:07:41,280
cyber security for road vehicles

00:07:41,840 --> 00:07:46,639
and rule sets which assist in compliance

00:07:45,520 --> 00:07:50,319
with these standards

00:07:46,639 --> 00:07:53,360
are auto star c plus plus 14 and seis

00:07:50,319 --> 00:07:56,000
c 134

00:07:53,360 --> 00:07:57,440
and we've engaged with github to create

00:07:56,000 --> 00:08:01,360
coql rules

00:07:57,440 --> 00:08:04,479
for scanning against these two rule sets

00:08:01,360 --> 00:08:07,520
and integration of those scans into the

00:08:04,479 --> 00:08:10,840
familiar github interface and

00:08:07,520 --> 00:08:13,199
into the vs code ide as i mentioned

00:08:10,840 --> 00:08:15,440
earlier and it's our intent to work with

00:08:13,199 --> 00:08:17,280
github to open source these rules for

00:08:15,440 --> 00:08:21,680
broader community use

00:08:17,280 --> 00:08:21,680
and more rapid adoption of our platform

00:08:22,720 --> 00:08:26,319
and with that i'd like to hand over to

00:08:24,240 --> 00:08:30,720
my colleague gwen

00:08:26,319 --> 00:08:33,360
to introduce to code to car

00:08:30,720 --> 00:08:35,120
yeah thanks don for the introduction so

00:08:33,360 --> 00:08:35,760
now i'm going to share what is the

00:08:35,120 --> 00:08:38,320
meaning of

00:08:35,760 --> 00:08:40,159
god to the car and the warfare

00:08:38,320 --> 00:08:42,240
associated to it

00:08:40,159 --> 00:08:44,240
and i will talk a bit more on the

00:08:42,240 --> 00:08:46,720
technology beyond this workflow called

00:08:44,240 --> 00:08:46,720
tecton

00:08:48,640 --> 00:08:55,440
so now it's important to understand

00:08:51,839 --> 00:08:57,760
how d fair workflow for code to the car

00:08:55,440 --> 00:08:59,680
from a typical software delivery

00:08:57,760 --> 00:09:03,279
workflow

00:08:59,680 --> 00:09:06,480
for common software doorstep or job are

00:09:03,279 --> 00:09:09,279
you when you check out your code you do

00:09:06,480 --> 00:09:11,120
unit testing then integration testing

00:09:09,279 --> 00:09:12,959
and then finally you deploy and you may

00:09:11,120 --> 00:09:15,920
have functional testing

00:09:12,959 --> 00:09:16,800
of course this is a really general

00:09:15,920 --> 00:09:19,839
concept

00:09:16,800 --> 00:09:23,120
and some workflow or pipeline may differ

00:09:19,839 --> 00:09:24,000
but i think this is pretty accurate most

00:09:23,120 --> 00:09:26,720
of those steps

00:09:24,000 --> 00:09:28,080
are primarily synchronous meaning the

00:09:26,720 --> 00:09:29,760
workflow

00:09:28,080 --> 00:09:32,480
don't really need to have a pause or

00:09:29,760 --> 00:09:35,200
long pause between step or job

00:09:32,480 --> 00:09:38,080
and often do not involve human

00:09:35,200 --> 00:09:40,880
interaction or process validation

00:09:38,080 --> 00:09:41,360
obviously sometimes it does for example

00:09:40,880 --> 00:09:43,600
if

00:09:41,360 --> 00:09:44,880
you use telephone you may have telephone

00:09:43,600 --> 00:09:47,360
approval

00:09:44,880 --> 00:09:48,240
but it doesn't really take long just

00:09:47,360 --> 00:09:51,360
minutes

00:09:48,240 --> 00:09:54,080
or maximum hours then

00:09:51,360 --> 00:09:55,279
the hardware or os used for those steps

00:09:54,080 --> 00:09:58,480
are putting command

00:09:55,279 --> 00:10:00,320
and we know windows linux which are

00:09:58,480 --> 00:10:02,959
machine mobile

00:10:00,320 --> 00:10:05,200
nothing really fancy and most of them

00:10:02,959 --> 00:10:08,560
can be provisioned to api or cloud

00:10:05,200 --> 00:10:08,560
provider ipr and so on

00:10:09,839 --> 00:10:15,200
now if we look at delivering code to the

00:10:13,920 --> 00:10:18,160
car

00:10:15,200 --> 00:10:19,600
this involves a lot of different steps

00:10:18,160 --> 00:10:23,040
of course

00:10:19,600 --> 00:10:26,320
we do have the user suspect check out

00:10:23,040 --> 00:10:28,800
unit testing but

00:10:26,320 --> 00:10:29,680
where the complications start to happen

00:10:28,800 --> 00:10:31,680
is

00:10:29,680 --> 00:10:34,160
when we need to do software simulation

00:10:31,680 --> 00:10:38,000
which require a lot of cpu or gpu

00:10:34,160 --> 00:10:38,800
a lot hardware simulation with specific

00:10:38,000 --> 00:10:41,200
hardware

00:10:38,800 --> 00:10:42,480
which require a lot of effort to

00:10:41,200 --> 00:10:44,800
integrate

00:10:42,480 --> 00:10:46,720
same for this ecu what we call

00:10:44,800 --> 00:10:50,079
electronic control unit

00:10:46,720 --> 00:10:51,519
basically the same as hardware as in the

00:10:50,079 --> 00:10:53,120
car

00:10:51,519 --> 00:10:55,519
which you want to be sure your

00:10:53,120 --> 00:10:58,560
application behave as expected

00:10:55,519 --> 00:11:00,480
and then of course after those steps

00:10:58,560 --> 00:11:02,959
we need to do compliance check and this

00:11:00,480 --> 00:11:04,959
is where github admin security

00:11:02,959 --> 00:11:06,160
is an important is playing an important

00:11:04,959 --> 00:11:08,720
role for us

00:11:06,160 --> 00:11:10,399
and for the last part we have multiple

00:11:08,720 --> 00:11:13,200
manual approval steps

00:11:10,399 --> 00:11:15,360
meaning a synchronous step like security

00:11:13,200 --> 00:11:20,720
approval legola profile

00:11:15,360 --> 00:11:20,720
safety approval regulatory apparel etc

00:11:21,040 --> 00:11:25,600
so to reason a bit for the workflow code

00:11:24,640 --> 00:11:27,839
to the car

00:11:25,600 --> 00:11:28,800
we need to integrate different hardware

00:11:27,839 --> 00:11:31,920
and process

00:11:28,800 --> 00:11:33,760
which can be manual with human iteration

00:11:31,920 --> 00:11:35,920
or not

00:11:33,760 --> 00:11:37,440
simulation again we need specific

00:11:35,920 --> 00:11:40,880
hardware which

00:11:37,440 --> 00:11:43,200
include sensor for example camera

00:11:40,880 --> 00:11:46,079
for the software simulation again we

00:11:43,200 --> 00:11:50,320
need gpu and a lot of them

00:11:46,079 --> 00:11:53,519
and simulation tasks could take minutes

00:11:50,320 --> 00:11:55,839
hours or even day to run so

00:11:53,519 --> 00:11:57,600
we really need a way to pause the

00:11:55,839 --> 00:12:00,480
workflow

00:11:57,600 --> 00:12:00,880
same with the check and uploads most of

00:12:00,480 --> 00:12:04,320
those

00:12:00,880 --> 00:12:06,800
process are and most likely interact

00:12:04,320 --> 00:12:10,160
with one or multiple person

00:12:06,800 --> 00:12:11,760
we can imagine even interpreting with

00:12:10,160 --> 00:12:13,920
different companies

00:12:11,760 --> 00:12:16,160
for example a third party company for

00:12:13,920 --> 00:12:19,440
certification

00:12:16,160 --> 00:12:21,600
and then those check include compliance

00:12:19,440 --> 00:12:24,399
and again this is where github advanced

00:12:21,600 --> 00:12:26,959
security is going to help us and for

00:12:24,399 --> 00:12:28,639
example in japan we may need government

00:12:26,959 --> 00:12:29,440
approval to be able to add software to

00:12:28,639 --> 00:12:32,720
the car

00:12:29,440 --> 00:12:35,519
so in our workflow system what

00:12:32,720 --> 00:12:37,040
we are doing we are working now is

00:12:35,519 --> 00:12:40,320
integrating simulation

00:12:37,040 --> 00:12:40,320
and asynchronous process

00:12:41,120 --> 00:12:48,560
as step-by-slide

00:12:44,560 --> 00:12:51,760
we need traceability and immutability

00:12:48,560 --> 00:12:54,079
everything needs to be traceable logs

00:12:51,760 --> 00:12:55,279
need to be possible logs need to be kept

00:12:54,079 --> 00:12:58,480
for x years

00:12:55,279 --> 00:12:58,959
indefinitely and we need to be able to

00:12:58,480 --> 00:13:00,959
trace

00:12:58,959 --> 00:13:02,480
from the commit to the code deployed to

00:13:00,959 --> 00:13:05,519
the car

00:13:02,480 --> 00:13:06,880
and then every produce artifact need to

00:13:05,519 --> 00:13:10,000
be in mutables

00:13:06,880 --> 00:13:12,639
logs binary coverage results

00:13:10,000 --> 00:13:13,519
test results basically everything

00:13:12,639 --> 00:13:15,920
produced

00:13:13,519 --> 00:13:17,360
during the workflow and by the workflow

00:13:15,920 --> 00:13:21,200
need to be immutable

00:13:17,360 --> 00:13:24,639
and tamper proof so we have built

00:13:21,200 --> 00:13:25,839
traceability and immutability as a core

00:13:24,639 --> 00:13:28,639
function of

00:13:25,839 --> 00:13:29,600
our workflow system and for the

00:13:28,639 --> 00:13:32,720
technology

00:13:29,600 --> 00:13:36,480
to enable us to solve those challenge we

00:13:32,720 --> 00:13:41,120
decided to use tekton cd

00:13:36,480 --> 00:13:45,279
so tekton is a cloud native ci cd

00:13:41,120 --> 00:13:48,560
it's a powerful and flexible framework

00:13:45,279 --> 00:13:50,880
and you can deploy tekton across cloud

00:13:48,560 --> 00:13:53,920
provider and on-premise system

00:13:50,880 --> 00:13:54,720
the important point there is tekton is

00:13:53,920 --> 00:13:59,120
flexible

00:13:54,720 --> 00:13:59,120
and it's a framework to beat cicd

00:14:00,000 --> 00:14:04,079
so one of the most attractive features

00:14:02,560 --> 00:14:06,079
of tecton

00:14:04,079 --> 00:14:07,920
is this flexibility that the software

00:14:06,079 --> 00:14:11,040
gave us

00:14:07,920 --> 00:14:12,079
we can basically fully custom customize

00:14:11,040 --> 00:14:15,360
our workflow

00:14:12,079 --> 00:14:17,760
and enforce our process

00:14:15,360 --> 00:14:19,199
we consider tecton to not only be a

00:14:17,760 --> 00:14:22,560
pipeline enzyme

00:14:19,199 --> 00:14:25,680
but also a warfare enzyme again

00:14:22,560 --> 00:14:28,720
tecton is a framework

00:14:25,680 --> 00:14:31,360
one of them that we made clear

00:14:28,720 --> 00:14:33,519
in the present slide is that we need to

00:14:31,360 --> 00:14:36,959
be able to pause the workflow

00:14:33,519 --> 00:14:39,680
which tecton allows to do

00:14:36,959 --> 00:14:41,120
tecton is built on top of kubernetes

00:14:39,680 --> 00:14:42,399
it's a kind of extension for the

00:14:41,120 --> 00:14:43,839
kubernetes api

00:14:42,399 --> 00:14:45,760
why we call it custom resources

00:14:43,839 --> 00:14:48,959
definition and one

00:14:45,760 --> 00:14:52,639
interesting features is that tecton

00:14:48,959 --> 00:14:56,240
can call other crd natively

00:14:52,639 --> 00:14:58,240
like we have our own custom crd

00:14:56,240 --> 00:14:59,839
and this allows us to extend the

00:14:58,240 --> 00:15:02,959
workflow as we want

00:14:59,839 --> 00:15:05,600
for example again approval process

00:15:02,959 --> 00:15:07,360
specific simulation need basically

00:15:05,600 --> 00:15:09,120
everything we want to implement could be

00:15:07,360 --> 00:15:11,760
a part of the workflow

00:15:09,120 --> 00:15:12,639
of course it because you run on top of

00:15:11,760 --> 00:15:15,760
kubernetes

00:15:12,639 --> 00:15:19,519
it does support all the magic level

00:15:15,760 --> 00:15:22,639
node gpu scheduling auto scanning

00:15:19,519 --> 00:15:24,079
this workflow required to be scalable

00:15:22,639 --> 00:15:26,160
and for the part running on top of

00:15:24,079 --> 00:15:28,160
kubernetes for example the gpu

00:15:26,160 --> 00:15:30,480
we just need to add resources to our

00:15:28,160 --> 00:15:34,480
humanities cluster

00:15:30,480 --> 00:15:37,839
and some of those steps could be complex

00:15:34,480 --> 00:15:41,519
but thanks to the kubernetes integration

00:15:37,839 --> 00:15:44,240
and the tecton flexibility

00:15:41,519 --> 00:15:47,440
this helps us to reduce the complexity

00:15:44,240 --> 00:15:47,440
of this workflow process

00:15:50,079 --> 00:15:56,000
so now i'm going to introduce a small

00:15:54,000 --> 00:15:57,600
example of where we have the following

00:15:56,000 --> 00:16:00,639
code qrows

00:15:57,600 --> 00:16:04,560
first security team can

00:16:00,639 --> 00:16:06,880
enforce and create their own rules plus

00:16:04,560 --> 00:16:07,600
in the automotive there is some

00:16:06,880 --> 00:16:12,560
standards

00:16:07,600 --> 00:16:14,959
and for security there is iso 21434

00:16:12,560 --> 00:16:17,839
and then as a developer you can bring

00:16:14,959 --> 00:16:17,839
your own rules

00:16:18,320 --> 00:16:23,360
next is github give us some different

00:16:21,040 --> 00:16:24,000
rules and one of the most important for

00:16:23,360 --> 00:16:26,160
us

00:16:24,000 --> 00:16:27,600
is the compliance and standard rules for

00:16:26,160 --> 00:16:31,680
the safety which is based

00:16:27,600 --> 00:16:31,680
on the iso 26262

00:16:33,759 --> 00:16:37,839
so a bit more description there

00:16:38,720 --> 00:16:43,600
what happened when the developer is

00:16:41,199 --> 00:16:45,680
pushing the code

00:16:43,600 --> 00:16:48,320
from the time the developer pushed his

00:16:45,680 --> 00:16:51,440
code to our ci cd waffle system

00:16:48,320 --> 00:16:53,839
what happened in the building process

00:16:51,440 --> 00:16:54,560
how we can enforce compliance and how

00:16:53,839 --> 00:16:57,759
cultural

00:16:54,560 --> 00:17:00,399
interact during this time so

00:16:57,759 --> 00:17:02,000
in this very simple example you can see

00:17:00,399 --> 00:17:05,199
in the screen

00:17:02,000 --> 00:17:07,760
we have two repositories one containing

00:17:05,199 --> 00:17:09,520
the mandatory rules like security and

00:17:07,760 --> 00:17:11,760
compliance meaning

00:17:09,520 --> 00:17:12,720
those who will run every time and you

00:17:11,760 --> 00:17:15,199
can't change that

00:17:12,720 --> 00:17:18,799
we enforce those process and the other

00:17:15,199 --> 00:17:21,919
one the application code so

00:17:18,799 --> 00:17:22,319
the developer will push his code and

00:17:21,919 --> 00:17:25,760
then

00:17:22,319 --> 00:17:28,400
this will trigger a technique

00:17:25,760 --> 00:17:29,840
three simple tasks check out unit

00:17:28,400 --> 00:17:32,960
testing and building

00:17:29,840 --> 00:17:34,240
again suggest for example during the

00:17:32,960 --> 00:17:37,280
building process

00:17:34,240 --> 00:17:38,880
we will first check out the rules from

00:17:37,280 --> 00:17:41,440
the rows repository

00:17:38,880 --> 00:17:42,799
and then we will start to initialize the

00:17:41,440 --> 00:17:45,360
codeqr database

00:17:42,799 --> 00:17:47,440
which is in the format serif and then

00:17:45,360 --> 00:17:50,720
the main process happened

00:17:47,440 --> 00:17:54,400
in this example this is a c plus plus

00:17:50,720 --> 00:17:58,640
application so call ql we

00:17:54,400 --> 00:18:01,200
analyze this code during the compilation

00:17:58,640 --> 00:18:02,400
so once we get the compilation down at

00:18:01,200 --> 00:18:04,960
the end

00:18:02,400 --> 00:18:08,799
we will upload the code qr database to

00:18:04,960 --> 00:18:11,280
github advanced security api

00:18:08,799 --> 00:18:12,080
and then once the results are uploaded

00:18:11,280 --> 00:18:16,000
together

00:18:12,080 --> 00:18:16,000
the developer will be able to check them

00:18:16,400 --> 00:18:19,440
as you can see on the pictures we have

00:18:18,000 --> 00:18:23,679
some interesting information

00:18:19,440 --> 00:18:25,919
of course we have the issue itself

00:18:23,679 --> 00:18:27,120
then as you can see in green we have

00:18:25,919 --> 00:18:29,679
open

00:18:27,120 --> 00:18:32,880
meaning this issue is still there and

00:18:29,679 --> 00:18:35,280
have not been resolved yet

00:18:32,880 --> 00:18:36,559
then we are warning warning is the level

00:18:35,280 --> 00:18:40,000
of the issue

00:18:36,559 --> 00:18:42,720
and now thanks to this information

00:18:40,000 --> 00:18:43,440
we will be able to use for example the

00:18:42,720 --> 00:18:47,679
level

00:18:43,440 --> 00:18:50,960
as a gate in our pipeline for example

00:18:47,679 --> 00:18:52,480
high and medium levels should be

00:18:50,960 --> 00:18:54,840
addressed

00:18:52,480 --> 00:18:56,240
before being able to move forward in the

00:18:54,840 --> 00:18:59,520
pipeline

00:18:56,240 --> 00:18:59,919
and that basically help us to detect and

00:18:59,520 --> 00:19:04,640
stop

00:18:59,919 --> 00:19:04,640
early on the process if needed

00:19:07,200 --> 00:19:11,039
but at the end of the day what really

00:19:08,720 --> 00:19:13,120
matters for us is to improve the

00:19:11,039 --> 00:19:16,160
developer experiences

00:19:13,120 --> 00:19:19,280
we want the developer to focus on coding

00:19:16,160 --> 00:19:21,600
we want to bring the same experience as

00:19:19,280 --> 00:19:23,039
developing a web application as

00:19:21,600 --> 00:19:24,400
developing a code to the care

00:19:23,039 --> 00:19:26,720
application

00:19:24,400 --> 00:19:28,960
we want to remove the complexity out of

00:19:26,720 --> 00:19:32,240
the developer hands

00:19:28,960 --> 00:19:34,799
so the tooling is integrated

00:19:32,240 --> 00:19:36,640
and developer has one press for the code

00:19:34,799 --> 00:19:39,280
to the car

00:19:36,640 --> 00:19:41,840
the workflow by default is scalable and

00:19:39,280 --> 00:19:45,120
flexible

00:19:41,840 --> 00:19:47,600
by defaulting the offload again we bring

00:19:45,120 --> 00:19:48,640
the safety the security the standard

00:19:47,600 --> 00:19:51,679
compliance

00:19:48,640 --> 00:19:54,400
cultural rules and then

00:19:51,679 --> 00:19:56,240
as i said before flexibility and

00:19:54,400 --> 00:19:58,640
immutability

00:19:56,240 --> 00:20:00,720
it's a core function of the workflow

00:19:58,640 --> 00:20:03,120
system and with that

00:20:00,720 --> 00:20:04,799
i think we will improve the developer

00:20:03,120 --> 00:20:06,559
experience for code to the camera

00:20:04,799 --> 00:20:08,240
and then from that i will give back the

00:20:06,559 --> 00:20:12,640
hand to my teammate

00:20:08,240 --> 00:20:12,640
daniel thanks very much gwen

00:20:14,000 --> 00:20:18,799
so uh as you heard today we have an

00:20:16,480 --> 00:20:22,320
exciting and challenging mission ahead

00:20:18,799 --> 00:20:25,360
here at trid with our irene product

00:20:22,320 --> 00:20:26,159
if you're looking to take ownership and

00:20:25,360 --> 00:20:28,799
grow together

00:20:26,159 --> 00:20:30,240
as part of an exciting and dynamic team

00:20:28,799 --> 00:20:32,880
to make history

00:20:30,240 --> 00:20:34,080
then i encourage you to look us up and

00:20:32,880 --> 00:20:36,640
learn about

00:20:34,080 --> 00:20:39,200
the roles that we have open here as part

00:20:36,640 --> 00:20:39,200
of our team

00:20:41,360 --> 00:20:45,679
thanks everyone and please if you want

00:20:43,760 --> 00:20:48,159
to check our website you can find online

00:20:45,679 --> 00:20:49,520
or you can follow this qr code or scan

00:20:48,159 --> 00:20:59,120
this qr code

00:20:49,520 --> 00:20:59,120

YouTube URL: https://www.youtube.com/watch?v=Twdftv0Tkfo


