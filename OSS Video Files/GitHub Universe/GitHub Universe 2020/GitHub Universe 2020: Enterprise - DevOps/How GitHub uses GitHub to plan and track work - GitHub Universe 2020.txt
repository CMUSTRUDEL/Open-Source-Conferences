Title: How GitHub uses GitHub to plan and track work - GitHub Universe 2020
Publication date: 2020-12-10
Playlist: GitHub Universe 2020: Enterprise - DevOps
Description: 
	Presented by Lauren Brose, Senior Product Manager, GitHub

Hear directly from the Product Manager of Issues on how her team takes an idea to the cloud. Youâ€™ll get an overview of how labels, milestones, project boards, and references can bring this process to life on the GitHub platform, and learn some tips for how to make the most of tools.

For more from GitHub Universe 2020, visit https://githubuniverse.com

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:00,950 --> 00:00:04,020
[Music]

00:00:05,200 --> 00:00:08,320
hi

00:00:05,520 --> 00:00:10,559
everyone uh welcome to this talk about

00:00:08,320 --> 00:00:11,440
how github uses github to plan and track

00:00:10,559 --> 00:00:13,759
work

00:00:11,440 --> 00:00:14,880
now github is a really large company

00:00:13,759 --> 00:00:17,920
with almost

00:00:14,880 --> 00:00:19,119
2 000 employees and so it takes a lot to

00:00:17,920 --> 00:00:22,400
make sure we're all kind of

00:00:19,119 --> 00:00:23,920
growing in the same direction uh however

00:00:22,400 --> 00:00:26,880
at the same time we believe

00:00:23,920 --> 00:00:28,560
in empowering teams to work autonomously

00:00:26,880 --> 00:00:32,160
so that they can make decisions

00:00:28,560 --> 00:00:35,120
and iterate on product faster

00:00:32,160 --> 00:00:36,399
and so you know with that autonomy

00:00:35,120 --> 00:00:39,920
though we still have to

00:00:36,399 --> 00:00:42,079
be able to align as a company with wider

00:00:39,920 --> 00:00:43,680
planning so i'll be focusing on two

00:00:42,079 --> 00:00:45,840
sides of that coin one is how do we

00:00:43,680 --> 00:00:48,879
actually set up our teams for success

00:00:45,840 --> 00:00:50,879
and empower them to be autonomous and

00:00:48,879 --> 00:00:52,320
what do we do as an org to align

00:00:50,879 --> 00:00:55,120
so that we can make sure we're all

00:00:52,320 --> 00:00:57,600
sailing in the same direction

00:00:55,120 --> 00:00:59,280
uh i'll quickly just reintroduce myself

00:00:57,600 --> 00:01:01,520
so my name is lauren bros

00:00:59,280 --> 00:01:03,199
i'm a senior product manager at github

00:01:01,520 --> 00:01:05,280
and i work with the teams making

00:01:03,199 --> 00:01:07,520
improvements to the issue space

00:01:05,280 --> 00:01:09,040
so when i talk about what teams do

00:01:07,520 --> 00:01:12,000
day-to-day i'll be drawing from my

00:01:09,040 --> 00:01:14,240
experience working with the issues team

00:01:12,000 --> 00:01:15,840
but the beauty of autonomous teams is

00:01:14,240 --> 00:01:17,360
that we can all approach the same

00:01:15,840 --> 00:01:19,439
planning and tracking challenges

00:01:17,360 --> 00:01:21,360
in different ways and so i hope by

00:01:19,439 --> 00:01:22,960
sharing my experience you can kind of

00:01:21,360 --> 00:01:25,200
come out with a tip or some way to

00:01:22,960 --> 00:01:26,080
improve yourself as a team and i'm super

00:01:25,200 --> 00:01:27,840
looking forward to

00:01:26,080 --> 00:01:29,280
talking about discussions ways that

00:01:27,840 --> 00:01:31,439
maybe y'all work that we could improve

00:01:29,280 --> 00:01:33,600
as well

00:01:31,439 --> 00:01:35,439
so what we're going to cover i'll talk

00:01:33,600 --> 00:01:36,560
about the people how do we actually

00:01:35,439 --> 00:01:38,840
organize ourselves

00:01:36,560 --> 00:01:40,479
to maximize autonomy of our engineering

00:01:38,840 --> 00:01:42,399
teams then i'll

00:01:40,479 --> 00:01:44,159
take you through how do we think about

00:01:42,399 --> 00:01:46,320
taking an idea

00:01:44,159 --> 00:01:49,360
and turning it into an impactful code

00:01:46,320 --> 00:01:51,759
change that reaches all of our users

00:01:49,360 --> 00:01:52,479
and you know throughout i'll also be

00:01:51,759 --> 00:01:55,200
discussing

00:01:52,479 --> 00:01:56,079
how do we use issue building blocks like

00:01:55,200 --> 00:01:59,439
our labels

00:01:56,079 --> 00:02:00,320
milestones templates and our own team

00:01:59,439 --> 00:02:02,960
processes

00:02:00,320 --> 00:02:03,680
in a way that we think works really well

00:02:02,960 --> 00:02:04,719
and

00:02:03,680 --> 00:02:07,119
through this i hope you'll learn a

00:02:04,719 --> 00:02:09,039
little bit about how github thinks about

00:02:07,119 --> 00:02:10,800
its own planning tools and come away

00:02:09,039 --> 00:02:13,760
with something new that you can

00:02:10,800 --> 00:02:15,280
use on your team and you know with that

00:02:13,760 --> 00:02:16,000
i'm just going to jump right into how do

00:02:15,280 --> 00:02:19,599
we set up

00:02:16,000 --> 00:02:21,280
our people so at github we take

00:02:19,599 --> 00:02:23,760
our product development group you know

00:02:21,280 --> 00:02:25,599
within our 2000 person organization

00:02:23,760 --> 00:02:27,200
and we split them into what we call epd

00:02:25,599 --> 00:02:30,560
squads so

00:02:27,200 --> 00:02:32,879
epd it stands for engineering product

00:02:30,560 --> 00:02:34,560
and design and the idea is that this is

00:02:32,879 --> 00:02:37,519
really a cross-functional team

00:02:34,560 --> 00:02:38,239
that's working closely together on a

00:02:37,519 --> 00:02:41,040
specific

00:02:38,239 --> 00:02:42,239
problem uh so they're they're actually

00:02:41,040 --> 00:02:44,720
pretty small there's

00:02:42,239 --> 00:02:45,599
generally one product manager one

00:02:44,720 --> 00:02:47,840
designer

00:02:45,599 --> 00:02:50,239
one engineering manager and then like

00:02:47,840 --> 00:02:52,000
four to six developers and

00:02:50,239 --> 00:02:53,280
we would like to keep them small because

00:02:52,000 --> 00:02:55,200
we believe that kind of

00:02:53,280 --> 00:02:57,519
creates focus like you can really only

00:02:55,200 --> 00:02:59,120
take on one problem at a time as a group

00:02:57,519 --> 00:03:01,280
and so each squad is kind of pushing the

00:02:59,120 --> 00:03:03,440
same rock in one direction

00:03:01,280 --> 00:03:04,640
as opposed to a larger team you might be

00:03:03,440 --> 00:03:06,480
tempted to

00:03:04,640 --> 00:03:08,239
have like four or five rocks that you're

00:03:06,480 --> 00:03:11,040
trying to push at once

00:03:08,239 --> 00:03:12,239
um and so that's that's really kind of

00:03:11,040 --> 00:03:15,280
how we've broken apart

00:03:12,239 --> 00:03:17,680
our engineering group but

00:03:15,280 --> 00:03:19,200
i can't talk about our epd squads

00:03:17,680 --> 00:03:20,800
without talking about

00:03:19,200 --> 00:03:23,360
the repos the places where they're

00:03:20,800 --> 00:03:25,280
actually making these code changes

00:03:23,360 --> 00:03:28,080
so it may or may not be surprising to

00:03:25,280 --> 00:03:29,760
you but the code that powers github.com

00:03:28,080 --> 00:03:32,400
that you use every day

00:03:29,760 --> 00:03:35,280
is actually mostly in a mono repo so all

00:03:32,400 --> 00:03:37,040
these epd squads across github are

00:03:35,280 --> 00:03:38,879
you know opening pull requests

00:03:37,040 --> 00:03:40,080
committing deploying all from the same

00:03:38,879 --> 00:03:42,319
repo

00:03:40,080 --> 00:03:43,280
which in itself is a little bit chaotic

00:03:42,319 --> 00:03:44,799
at times

00:03:43,280 --> 00:03:47,200
so you can only imagine the chaos

00:03:44,799 --> 00:03:48,799
amplified if every single epd squad in

00:03:47,200 --> 00:03:51,760
our entire organization

00:03:48,799 --> 00:03:52,159
was also trying to open their issues

00:03:51,760 --> 00:03:55,200
track

00:03:52,159 --> 00:03:57,519
changes you know create labels change

00:03:55,200 --> 00:03:58,879
templates nobody would be able to agree

00:03:57,519 --> 00:04:00,959
on anything

00:03:58,879 --> 00:04:02,400
and it would be impossible to follow any

00:04:00,959 --> 00:04:05,280
notifications

00:04:02,400 --> 00:04:06,640
so to mitigate that each epd squad

00:04:05,280 --> 00:04:09,599
actually has its own

00:04:06,640 --> 00:04:10,640
repository set up specifically for their

00:04:09,599 --> 00:04:14,239
issues

00:04:10,640 --> 00:04:17,120
and team docs so i've got a picture here

00:04:14,239 --> 00:04:18,479
of the github issues repo you can see

00:04:17,120 --> 00:04:20,160
we've got a bunch of issues open

00:04:18,479 --> 00:04:21,519
a couple pull requests as we're changing

00:04:20,160 --> 00:04:23,520
our docs

00:04:21,519 --> 00:04:26,160
uh we have a readme where we talk about

00:04:23,520 --> 00:04:28,639
how do we fit in the organization

00:04:26,160 --> 00:04:29,840
outline some of our goals for a quarter

00:04:28,639 --> 00:04:32,320
uh and this really gives

00:04:29,840 --> 00:04:34,320
us a little bit of personality as a team

00:04:32,320 --> 00:04:36,240
but we're also really empowered

00:04:34,320 --> 00:04:37,680
to just change whatever we need in this

00:04:36,240 --> 00:04:39,840
repo as we

00:04:37,680 --> 00:04:40,800
go through our day-to-day work so

00:04:39,840 --> 00:04:42,720
everybody

00:04:40,800 --> 00:04:45,520
has admin permissions they can open up

00:04:42,720 --> 00:04:46,880
settings add a template at any time

00:04:45,520 --> 00:04:49,600
you know decide we should turn on

00:04:46,880 --> 00:04:51,199
actions uh decide to turn on enough

00:04:49,600 --> 00:04:54,479
discussions all of that

00:04:51,199 --> 00:04:56,479
and this is just a way that we really

00:04:54,479 --> 00:04:58,960
let teams kind of be creative

00:04:56,479 --> 00:05:01,039
and keep keep their work and have a

00:04:58,960 --> 00:05:02,639
clear home

00:05:01,039 --> 00:05:04,560
but you know there is one exception to

00:05:02,639 --> 00:05:06,639
this and that's bugs

00:05:04,560 --> 00:05:08,320
you can imagine if every team at github

00:05:06,639 --> 00:05:10,240
is trying to track bugs

00:05:08,320 --> 00:05:11,600
in each of their repos nobody would know

00:05:10,240 --> 00:05:14,000
where to file it

00:05:11,600 --> 00:05:15,120
you know at github since we use github

00:05:14,000 --> 00:05:16,639
to build github

00:05:15,120 --> 00:05:17,840
you hit the occasional bug in your

00:05:16,639 --> 00:05:19,360
day-to-day work and you want to make

00:05:17,840 --> 00:05:22,320
sure that we fix it

00:05:19,360 --> 00:05:23,280
and so we actually standardize on

00:05:22,320 --> 00:05:25,360
opening those bugs

00:05:23,280 --> 00:05:27,520
in the github github monorepo so that's

00:05:25,360 --> 00:05:28,960
the one type of issue you'll find there

00:05:27,520 --> 00:05:30,800
and that helps us facilitate

00:05:28,960 --> 00:05:31,680
conversations like you see in these

00:05:30,800 --> 00:05:33,039
comments

00:05:31,680 --> 00:05:35,120
where people are trying to find the

00:05:33,039 --> 00:05:37,039
right team

00:05:35,120 --> 00:05:39,360
to really tackle the bug or have the

00:05:37,039 --> 00:05:41,680
context required to fix it

00:05:39,360 --> 00:05:42,880
and but at the same time as you can see

00:05:41,680 --> 00:05:45,680
these these

00:05:42,880 --> 00:05:46,639
comments are pinging an entire squad of

00:05:45,680 --> 00:05:48,320
people

00:05:46,639 --> 00:05:49,919
and that sets off this like race like

00:05:48,320 --> 00:05:51,680
every person in the squad wants to be

00:05:49,919 --> 00:05:53,520
helpful wants to respond

00:05:51,680 --> 00:05:54,800
and now all eight people in the epd

00:05:53,520 --> 00:05:56,720
squad are

00:05:54,800 --> 00:05:58,400
running to answer this question and all

00:05:56,720 --> 00:06:00,479
randomized

00:05:58,400 --> 00:06:01,919
which is a really great way to work it's

00:06:00,479 --> 00:06:04,800
very distracting

00:06:01,919 --> 00:06:06,560
so we've come up with this role within

00:06:04,800 --> 00:06:08,000
the epd squad we call the first

00:06:06,560 --> 00:06:10,240
responder

00:06:08,000 --> 00:06:11,759
and the first responder kind of rotates

00:06:10,240 --> 00:06:13,680
each week it's just one person in the

00:06:11,759 --> 00:06:17,199
engineering part of the epd

00:06:13,680 --> 00:06:18,840
that is responsible for replying to

00:06:17,199 --> 00:06:21,120
those bug pings on the github get

00:06:18,840 --> 00:06:22,800
monorepo they're also responsible for

00:06:21,120 --> 00:06:24,880
reviewing any pull requests

00:06:22,800 --> 00:06:26,639
into our areas of maintainership that

00:06:24,880 --> 00:06:27,600
are coming from other teams

00:06:26,639 --> 00:06:28,960
and you know while they're first

00:06:27,600 --> 00:06:30,880
responder for the week they're really

00:06:28,960 --> 00:06:32,319
just focused on fixing bugs

00:06:30,880 --> 00:06:34,880
and any other maintenance items that

00:06:32,319 --> 00:06:36,960
come up and this helps protect

00:06:34,880 --> 00:06:39,039
the other focus from the rest of the

00:06:36,960 --> 00:06:40,880
team so that you know

00:06:39,039 --> 00:06:43,199
they see an issue-wide team ping they

00:06:40,880 --> 00:06:45,039
know okay whoever's first responders got

00:06:43,199 --> 00:06:46,840
it i can keep my head down and keep

00:06:45,039 --> 00:06:48,560
focusing on whatever i'm trying to

00:06:46,840 --> 00:06:51,440
tackle

00:06:48,560 --> 00:06:53,280
so that's kind of how we've organized

00:06:51,440 --> 00:06:55,039
ourselves we've got our epd squads

00:06:53,280 --> 00:06:56,880
that have their own repo for work they

00:06:55,039 --> 00:06:58,720
work in a monorepo where we also keep

00:06:56,880 --> 00:06:59,680
bugs to make it easy for anybody in the

00:06:58,720 --> 00:07:01,120
company to file

00:06:59,680 --> 00:07:03,360
and then we use the first responder to

00:07:01,120 --> 00:07:05,199
make sure that we're having a high bar

00:07:03,360 --> 00:07:08,240
for quality

00:07:05,199 --> 00:07:10,160
and that is a great segue into the

00:07:08,240 --> 00:07:12,240
actual issue life cycle

00:07:10,160 --> 00:07:13,840
how do we think about actual future

00:07:12,240 --> 00:07:14,960
improvements or product improvements

00:07:13,840 --> 00:07:18,160
that we're making and

00:07:14,960 --> 00:07:18,639
what does that flow look like so i have

00:07:18,160 --> 00:07:21,680
this

00:07:18,639 --> 00:07:22,240
diagram here where i've kind of got two

00:07:21,680 --> 00:07:24,720
parts

00:07:22,240 --> 00:07:26,160
i've got a planning phase or you know i

00:07:24,720 --> 00:07:28,720
might have an idea

00:07:26,160 --> 00:07:30,560
i scope it to something manageable and

00:07:28,720 --> 00:07:31,280
then i prioritize it in my backlog of

00:07:30,560 --> 00:07:32,479
work

00:07:31,280 --> 00:07:34,000
and then i kind of shift to this

00:07:32,479 --> 00:07:35,759
tracking phase where now i'm just

00:07:34,000 --> 00:07:37,360
executed i'm building things

00:07:35,759 --> 00:07:39,280
i'm getting it ready to release to our

00:07:37,360 --> 00:07:40,880
users um through that

00:07:39,280 --> 00:07:42,720
execution cycle you know i have

00:07:40,880 --> 00:07:43,440
something i need to learn i build

00:07:42,720 --> 00:07:45,840
something

00:07:43,440 --> 00:07:47,280
i demon demo it to you know internal

00:07:45,840 --> 00:07:48,960
teams customers

00:07:47,280 --> 00:07:51,280
i just keep going on that loop until i'm

00:07:48,960 --> 00:07:53,039
ready to actually release as a beta or

00:07:51,280 --> 00:07:54,240
general availability

00:07:53,039 --> 00:07:55,759
and then you know as soon as it's in the

00:07:54,240 --> 00:07:58,319
hands of users you get that feedback

00:07:55,759 --> 00:07:59,919
that starts the next idea and that's

00:07:58,319 --> 00:08:02,000
really the full cycle

00:07:59,919 --> 00:08:03,360
and so what i'll do is i'll just go

00:08:02,000 --> 00:08:04,319
through each phase and talk a little bit

00:08:03,360 --> 00:08:07,360
about the tooling

00:08:04,319 --> 00:08:09,280
that we have that makes it happen

00:08:07,360 --> 00:08:11,120
so it's just starting at the beginning

00:08:09,280 --> 00:08:13,360
how do we actually capture ideas for how

00:08:11,120 --> 00:08:15,680
to improve our products

00:08:13,360 --> 00:08:18,319
now i have this sticker on my laptop it

00:08:15,680 --> 00:08:20,080
says all my issues are on github

00:08:18,319 --> 00:08:21,840
and i think that's the core of capturing

00:08:20,080 --> 00:08:23,840
ideas you

00:08:21,840 --> 00:08:26,000
want to write it down in a place that

00:08:23,840 --> 00:08:28,000
you can easily share so when you open

00:08:26,000 --> 00:08:30,080
an issue you've got a url you can send

00:08:28,000 --> 00:08:31,919
it to anybody for feedback

00:08:30,080 --> 00:08:33,120
the other great thing about capturing

00:08:31,919 --> 00:08:35,919
those ideas and issues

00:08:33,120 --> 00:08:37,599
is that it's indexed it's searchable so

00:08:35,919 --> 00:08:40,000
within the github organization

00:08:37,599 --> 00:08:42,399
if you have an idea for something like

00:08:40,000 --> 00:08:45,120
adding video support to comments

00:08:42,399 --> 00:08:45,920
uh you can just do a quick search and

00:08:45,120 --> 00:08:47,839
find any

00:08:45,920 --> 00:08:49,920
any historical context and as your

00:08:47,839 --> 00:08:51,200
organization grows

00:08:49,920 --> 00:08:53,440
it you just have this wealth of

00:08:51,200 --> 00:08:54,480
knowledge and issues which is really

00:08:53,440 --> 00:08:55,920
great

00:08:54,480 --> 00:08:57,839
the the people that wrote it might be

00:08:55,920 --> 00:09:01,519
gone but you've got that whole history

00:08:57,839 --> 00:09:03,680
right there in the issue um

00:09:01,519 --> 00:09:05,440
but if everybody's opening a bunch of

00:09:03,680 --> 00:09:07,040
ideas and issues

00:09:05,440 --> 00:09:08,160
how do you keep them organized how do

00:09:07,040 --> 00:09:09,440
you make sure you have enough

00:09:08,160 --> 00:09:12,800
information that

00:09:09,440 --> 00:09:14,959
years from now it's still actionable and

00:09:12,800 --> 00:09:17,040
that's where we've really heavily

00:09:14,959 --> 00:09:18,880
leveraged issue templates

00:09:17,040 --> 00:09:20,560
now you know issue templates they came

00:09:18,880 --> 00:09:23,360
about in 2016

00:09:20,560 --> 00:09:24,560
as the solution for the an open source

00:09:23,360 --> 00:09:26,959
problem where

00:09:24,560 --> 00:09:29,360
a community really wants to provide

00:09:26,959 --> 00:09:32,399
feedback on how a project can improve

00:09:29,360 --> 00:09:33,440
but you really need to have the same

00:09:32,399 --> 00:09:35,440
context

00:09:33,440 --> 00:09:37,200
for each item so that you can actually

00:09:35,440 --> 00:09:39,519
turn into action

00:09:37,200 --> 00:09:40,800
and the same thing is true in a large

00:09:39,519 --> 00:09:42,640
organization

00:09:40,800 --> 00:09:44,240
where you want to encourage inner source

00:09:42,640 --> 00:09:45,680
you know other teams want to make sure

00:09:44,240 --> 00:09:46,320
that when they have an idea for your

00:09:45,680 --> 00:09:48,000
area

00:09:46,320 --> 00:09:50,320
you can actually action it and make it

00:09:48,000 --> 00:09:52,160
possible and so we found that using

00:09:50,320 --> 00:09:53,440
templates really helps kind of codify

00:09:52,160 --> 00:09:55,040
that

00:09:53,440 --> 00:09:57,440
the other great thing about templates is

00:09:55,040 --> 00:09:58,320
it can automatically include labels when

00:09:57,440 --> 00:10:00,160
you open an issue

00:09:58,320 --> 00:10:02,079
so you're categorizing and organizing

00:10:00,160 --> 00:10:04,160
ideas easily

00:10:02,079 --> 00:10:06,000
and uh something else we've kind of

00:10:04,160 --> 00:10:07,920
discovered through using templates is

00:10:06,000 --> 00:10:09,680
it really helps you codify as a squad

00:10:07,920 --> 00:10:11,040
like what have you agreed should be in

00:10:09,680 --> 00:10:13,920
an issue

00:10:11,040 --> 00:10:14,399
uh so i have an example of this here so

00:10:13,920 --> 00:10:16,399
after

00:10:14,399 --> 00:10:17,760
a retrospective we talked about how we

00:10:16,399 --> 00:10:20,560
could have clearer user

00:10:17,760 --> 00:10:22,000
stories and uh this pull request kind of

00:10:20,560 --> 00:10:23,760
came as a result of that

00:10:22,000 --> 00:10:25,279
where we were talked about how we should

00:10:23,760 --> 00:10:26,480
probably include who's the target user

00:10:25,279 --> 00:10:29,200
for the story

00:10:26,480 --> 00:10:29,839
uh to really help people you know get

00:10:29,200 --> 00:10:32,399
into the

00:10:29,839 --> 00:10:33,760
user's shoes and have that empathy and

00:10:32,399 --> 00:10:35,760
then in our functional

00:10:33,760 --> 00:10:37,200
kind of requirements we wanted to add

00:10:35,760 --> 00:10:38,640
something about metrics so that we're

00:10:37,200 --> 00:10:39,760
thinking about that up front

00:10:38,640 --> 00:10:42,800
making sure we have the right

00:10:39,760 --> 00:10:45,920
instrumentation to measure our success

00:10:42,800 --> 00:10:47,120
and uh you know this was all facilitated

00:10:45,920 --> 00:10:49,519
through templates and now

00:10:47,120 --> 00:10:51,440
anytime we open a user story we have

00:10:49,519 --> 00:10:53,760
that context of

00:10:51,440 --> 00:10:55,440
of that retro uh we're reminded of all

00:10:53,760 --> 00:10:56,720
the things we agreed upon and it's just

00:10:55,440 --> 00:11:00,399
a great way to keep

00:10:56,720 --> 00:11:02,000
improving our own cycle

00:11:00,399 --> 00:11:04,079
and so you know now we have all these

00:11:02,000 --> 00:11:06,079
ideas and issues

00:11:04,079 --> 00:11:07,839
uh now we need to make sure that we have

00:11:06,079 --> 00:11:10,720
some scope that we can actually

00:11:07,839 --> 00:11:12,320
prioritize against all of our other work

00:11:10,720 --> 00:11:13,760
and this is really a place where we

00:11:12,320 --> 00:11:15,120
start to need to align as an

00:11:13,760 --> 00:11:17,279
organization

00:11:15,120 --> 00:11:18,640
we want each squad to be able to compare

00:11:17,279 --> 00:11:19,600
like apples to apples when they're

00:11:18,640 --> 00:11:22,000
planning

00:11:19,600 --> 00:11:22,800
and so we've standardized on what we

00:11:22,000 --> 00:11:25,440
call epics

00:11:22,800 --> 00:11:27,120
which are just issues that represent

00:11:25,440 --> 00:11:30,240
four to six weeks of scope

00:11:27,120 --> 00:11:31,680
for an epd squad uh that are problem

00:11:30,240 --> 00:11:33,440
focused

00:11:31,680 --> 00:11:35,440
so i have an example here for video

00:11:33,440 --> 00:11:36,880
uploads uh where i have a problem

00:11:35,440 --> 00:11:38,560
statement about you know wanting to

00:11:36,880 --> 00:11:38,959
attach video files to my comments i've

00:11:38,560 --> 00:11:42,320
got

00:11:38,959 --> 00:11:45,200
the point people for this uh epic

00:11:42,320 --> 00:11:45,839
and i have some measure of success and

00:11:45,200 --> 00:11:47,760
uh

00:11:45,839 --> 00:11:49,279
you know we we take all our ideas and we

00:11:47,760 --> 00:11:52,079
write them into epics when we're kind of

00:11:49,279 --> 00:11:55,440
ready to start prioritizing them

00:11:52,079 --> 00:11:57,040
and so that comes

00:11:55,440 --> 00:11:58,480
with you know kind of the next question

00:11:57,040 --> 00:12:01,120
is okay so you have all these ideas

00:11:58,480 --> 00:12:02,880
what's actually coming soon for issues

00:12:01,120 --> 00:12:04,320
and i get asked this all the time as a

00:12:02,880 --> 00:12:07,040
product manager

00:12:04,320 --> 00:12:08,000
um both from people that i work with

00:12:07,040 --> 00:12:11,120
every day

00:12:08,000 --> 00:12:12,399
as well as other epd teams at github and

00:12:11,120 --> 00:12:13,200
the best way i've kind of found to

00:12:12,399 --> 00:12:16,160
organize this

00:12:13,200 --> 00:12:16,880
is through project boards uh so i've got

00:12:16,160 --> 00:12:19,279
this

00:12:16,880 --> 00:12:20,800
organization level project board i have

00:12:19,279 --> 00:12:24,320
all my epics

00:12:20,800 --> 00:12:25,680
and the um you know various columns talk

00:12:24,320 --> 00:12:26,480
about the themes what's in design

00:12:25,680 --> 00:12:29,200
research

00:12:26,480 --> 00:12:31,120
what's coming up next and because this

00:12:29,200 --> 00:12:33,120
is an organizational project board

00:12:31,120 --> 00:12:34,160
anybody at gut hub can actually discover

00:12:33,120 --> 00:12:36,639
this project board

00:12:34,160 --> 00:12:38,240
easily by searching and can see what's

00:12:36,639 --> 00:12:40,720
coming up soon so if they have any

00:12:38,240 --> 00:12:41,920
thoughts or security concerns or any

00:12:40,720 --> 00:12:44,240
context to bring

00:12:41,920 --> 00:12:44,959
about mp4 support they can just open the

00:12:44,240 --> 00:12:46,480
issue

00:12:44,959 --> 00:12:50,160
and maybe even subscribe so they know

00:12:46,480 --> 00:12:52,959
when they might be able to alpha test it

00:12:50,160 --> 00:12:53,839
and at that point you know we've got our

00:12:52,959 --> 00:12:57,279
epic it's

00:12:53,839 --> 00:12:58,560
it's queued up uh and

00:12:57,279 --> 00:13:00,639
we're ready to kind of break it down

00:12:58,560 --> 00:13:02,000
into milestones because you know epics

00:13:00,639 --> 00:13:03,760
they're four to six weeks

00:13:02,000 --> 00:13:05,440
that's a long time to go without getting

00:13:03,760 --> 00:13:07,680
any user feedback

00:13:05,440 --> 00:13:09,040
and so what we do is we take our

00:13:07,680 --> 00:13:10,639
milestones which are just

00:13:09,040 --> 00:13:12,320
logical groupings based on you know a

00:13:10,639 --> 00:13:14,560
release or a date

00:13:12,320 --> 00:13:15,680
uh and we break apart what's like the

00:13:14,560 --> 00:13:18,639
actual goal of each

00:13:15,680 --> 00:13:19,040
iterative correct version towards our

00:13:18,639 --> 00:13:22,480
epic

00:13:19,040 --> 00:13:24,560
problem um and we personally

00:13:22,480 --> 00:13:27,440
uh don't actually assign dates to our

00:13:24,560 --> 00:13:30,320
milestones because we like to be focused

00:13:27,440 --> 00:13:31,680
on the increment and shipping it when

00:13:30,320 --> 00:13:33,360
it's ready and not necessarily the date

00:13:31,680 --> 00:13:35,360
that's going to ship

00:13:33,360 --> 00:13:37,040
so using the video upload example you

00:13:35,360 --> 00:13:39,199
know our first milestone is actually

00:13:37,040 --> 00:13:40,800
supporting the file type for mp4

00:13:39,199 --> 00:13:42,720
our next milestone is about like how

00:13:40,800 --> 00:13:44,560
does that work in markdown

00:13:42,720 --> 00:13:46,160
and these milestones help us kind of

00:13:44,560 --> 00:13:49,279
stay focused on

00:13:46,160 --> 00:13:51,199
each increment of our epoch and so when

00:13:49,279 --> 00:13:53,199
a new a new issue comes in we can say

00:13:51,199 --> 00:13:54,800
okay this doesn't help us with this goal

00:13:53,199 --> 00:13:56,720
so we'll just tee it up for the next

00:13:54,800 --> 00:13:59,199
milestone and it helps you kind of make

00:13:56,720 --> 00:14:01,519
those priority decisions

00:13:59,199 --> 00:14:03,360
and so you know we've had our epic we've

00:14:01,519 --> 00:14:04,560
broken it down into milestones after we

00:14:03,360 --> 00:14:07,120
prioritized it and

00:14:04,560 --> 00:14:08,079
now we're ready to just go uh so let's

00:14:07,120 --> 00:14:09,440
talk about

00:14:08,079 --> 00:14:11,519
everyone's favorite question once

00:14:09,440 --> 00:14:14,880
something has started which is

00:14:11,519 --> 00:14:16,320
can you give me an update on this issue

00:14:14,880 --> 00:14:17,600
uh you know it's one of those shoulder

00:14:16,320 --> 00:14:19,040
tapping problems you know people are

00:14:17,600 --> 00:14:20,480
excited about the work and they just

00:14:19,040 --> 00:14:22,399
want to know like

00:14:20,480 --> 00:14:24,560
you know is that in development is it

00:14:22,399 --> 00:14:26,399
like ready to staff ship

00:14:24,560 --> 00:14:28,720
which is when we like ship internally to

00:14:26,399 --> 00:14:31,120
ourselves before users

00:14:28,720 --> 00:14:32,639
uh and this is just one of those

00:14:31,120 --> 00:14:34,320
shoulder tapping problems

00:14:32,639 --> 00:14:35,760
uh that can be really distracting if

00:14:34,320 --> 00:14:37,360
you're a developer and you're like i

00:14:35,760 --> 00:14:39,360
open the issue i'm assigned to it like

00:14:37,360 --> 00:14:43,920
let me just work on it

00:14:39,360 --> 00:14:44,959
and so what we've kind of adopted to

00:14:43,920 --> 00:14:46,320
help

00:14:44,959 --> 00:14:49,360
keep everybody in the loop about what

00:14:46,320 --> 00:14:50,880
the status is is issue and pr linking

00:14:49,360 --> 00:14:52,800
so if you're not familiar issue and pr

00:14:50,880 --> 00:14:54,880
linking is this concept of when you

00:14:52,800 --> 00:14:57,040
open a pull request you can say this pr

00:14:54,880 --> 00:14:58,880
you know closes issue one two three

00:14:57,040 --> 00:15:00,959
and that creates this really tight link

00:14:58,880 --> 00:15:03,120
between the issue and the pull request

00:15:00,959 --> 00:15:04,480
which is surfaced across github and then

00:15:03,120 --> 00:15:05,839
once the pr gets merged it actually

00:15:04,480 --> 00:15:07,199
closes the issue automatically so you

00:15:05,839 --> 00:15:08,560
don't have to remember to like go clean

00:15:07,199 --> 00:15:11,040
it up

00:15:08,560 --> 00:15:14,000
and this really helps limit shoulder

00:15:11,040 --> 00:15:16,800
taps because anybody looking at my

00:15:14,000 --> 00:15:17,920
issue feature backlog board might check

00:15:16,800 --> 00:15:20,160
out the up next column

00:15:17,920 --> 00:15:21,519
they expand the comment support for mp4

00:15:20,160 --> 00:15:23,839
video uploads

00:15:21,519 --> 00:15:25,680
they see this linked pull request and

00:15:23,839 --> 00:15:28,000
immediately can tell okay this has

00:15:25,680 --> 00:15:29,199
proof of concept kind of appended it's

00:15:28,000 --> 00:15:31,680
got a big do not merge

00:15:29,199 --> 00:15:33,120
label uh so somebody has kind of spiked

00:15:31,680 --> 00:15:34,399
out how this might work

00:15:33,120 --> 00:15:36,560
and so when i'm looking at this pull

00:15:34,399 --> 00:15:38,240
request i should consider like it as a

00:15:36,560 --> 00:15:39,199
proof of concept and not necessarily a

00:15:38,240 --> 00:15:41,040
final experience

00:15:39,199 --> 00:15:42,560
and i'll you know adjust my feedback

00:15:41,040 --> 00:15:45,360
accordingly

00:15:42,560 --> 00:15:47,199
um and the other great thing about this

00:15:45,360 --> 00:15:50,320
is it actually makes it really clear

00:15:47,199 --> 00:15:51,920
what in a repo is currently in flight so

00:15:50,320 --> 00:15:54,240
my favorite thing to do in any open

00:15:51,920 --> 00:15:55,600
source project now is actually search

00:15:54,240 --> 00:15:56,480
for the issues that have link pull

00:15:55,600 --> 00:15:58,720
requests

00:15:56,480 --> 00:16:00,320
so you can do this today uh there's a

00:15:58,720 --> 00:16:02,320
qualifier called linked pr

00:16:00,320 --> 00:16:03,519
and i just you know add this to is open

00:16:02,320 --> 00:16:04,720
like linked pull request and i

00:16:03,519 --> 00:16:06,880
immediately see

00:16:04,720 --> 00:16:08,000
all the work that's currently happening

00:16:06,880 --> 00:16:09,680
and it gives you that extra

00:16:08,000 --> 00:16:11,600
sense of status like what's actually in

00:16:09,680 --> 00:16:13,519
flight

00:16:11,600 --> 00:16:14,720
and this works really great for

00:16:13,519 --> 00:16:16,480
individual issues

00:16:14,720 --> 00:16:18,160
like on your team when you're looking at

00:16:16,480 --> 00:16:18,800
your project board but we have to think

00:16:18,160 --> 00:16:20,800
back to

00:16:18,800 --> 00:16:23,120
the github organization as a whole how

00:16:20,800 --> 00:16:25,120
do we keep everybody

00:16:23,120 --> 00:16:26,480
aligned on the status of epics at any

00:16:25,120 --> 00:16:29,040
given time

00:16:26,480 --> 00:16:30,480
and so as an organization we have this

00:16:29,040 --> 00:16:33,519
concept

00:16:30,480 --> 00:16:36,240
we call status update comments and

00:16:33,519 --> 00:16:37,839
a status update comment is just a

00:16:36,240 --> 00:16:40,560
comment on the epic

00:16:37,839 --> 00:16:41,759
that talks about you know whether it's

00:16:40,560 --> 00:16:44,399
green on track

00:16:41,759 --> 00:16:45,600
you know yellow there's some risks a red

00:16:44,399 --> 00:16:47,279
you know there's a big block or an

00:16:45,600 --> 00:16:50,320
impediment so we're

00:16:47,279 --> 00:16:52,079
working and then it includes a demo of

00:16:50,320 --> 00:16:55,440
the current functionality

00:16:52,079 --> 00:16:56,240
uh so we have this saying no demos not

00:16:55,440 --> 00:16:58,639
memos

00:16:56,240 --> 00:17:00,480
because you could spend all this time

00:16:58,639 --> 00:17:02,000
writing up what something

00:17:00,480 --> 00:17:03,360
is and what a current state is but

00:17:02,000 --> 00:17:05,439
there's nothing like seeing the actual

00:17:03,360 --> 00:17:07,600
end user experience

00:17:05,439 --> 00:17:09,199
uh and being brought to life and you can

00:17:07,600 --> 00:17:10,720
immediately tell like how far it is in

00:17:09,199 --> 00:17:12,160
the development cycle

00:17:10,720 --> 00:17:14,559
and you know demo doesn't have to

00:17:12,160 --> 00:17:16,480
actually be something in production it

00:17:14,559 --> 00:17:17,760
could be you know a design prototype or

00:17:16,480 --> 00:17:19,839
wireframe

00:17:17,760 --> 00:17:21,919
it could be something in a development

00:17:19,839 --> 00:17:23,280
branch like in this example

00:17:21,919 --> 00:17:25,760
or it could actually be something in

00:17:23,280 --> 00:17:28,160
production and this is how we

00:17:25,760 --> 00:17:29,360
check in with each other on any blockers

00:17:28,160 --> 00:17:32,480
any risks

00:17:29,360 --> 00:17:35,600
and have a place that we can start to

00:17:32,480 --> 00:17:36,080
provide feedback to each other or share

00:17:35,600 --> 00:17:40,559
with

00:17:36,080 --> 00:17:42,640
our external users to get their feedback

00:17:40,559 --> 00:17:44,640
you know but again the scale of github

00:17:42,640 --> 00:17:46,480
2000 people writing these status update

00:17:44,640 --> 00:17:48,880
comments on their epics like

00:17:46,480 --> 00:17:50,400
how would the leadership team know

00:17:48,880 --> 00:17:51,440
what's important for them to take a look

00:17:50,400 --> 00:17:53,679
at

00:17:51,440 --> 00:17:55,919
and this is where we've actually kind of

00:17:53,679 --> 00:17:58,880
adapted actions a bit

00:17:55,919 --> 00:18:00,160
so we have an action that runs on our

00:17:58,880 --> 00:18:04,000
epics

00:18:00,160 --> 00:18:06,240
and it generates this report comment and

00:18:04,000 --> 00:18:07,679
calculates some things so it checks our

00:18:06,240 --> 00:18:10,720
work in progress limits

00:18:07,679 --> 00:18:12,640
for squads again because our epd squads

00:18:10,720 --> 00:18:14,000
are really small and focused

00:18:12,640 --> 00:18:16,000
we don't want anybody to have be

00:18:14,000 --> 00:18:17,200
assigned more than like two epics

00:18:16,000 --> 00:18:19,120
because they're trying to do too much at

00:18:17,200 --> 00:18:20,559
once and we have to have a priority

00:18:19,120 --> 00:18:22,880
conversation

00:18:20,559 --> 00:18:25,280
it calculates you know how long has this

00:18:22,880 --> 00:18:26,960
epic been in progress

00:18:25,280 --> 00:18:28,240
and you know if we're hitting that six

00:18:26,960 --> 00:18:30,080
week mark we need to maybe have a

00:18:28,240 --> 00:18:32,480
conversation about how can we

00:18:30,080 --> 00:18:33,200
split this epic into more epics um so

00:18:32,480 --> 00:18:35,760
that we're

00:18:33,200 --> 00:18:37,200
having more increments and check-ins or

00:18:35,760 --> 00:18:38,720
is there some big

00:18:37,200 --> 00:18:41,760
big risk that we identified through

00:18:38,720 --> 00:18:43,600
investigating this particular problem

00:18:41,760 --> 00:18:44,960
and it also aggregates all those red and

00:18:43,600 --> 00:18:46,720
yellow statuses

00:18:44,960 --> 00:18:48,720
for the leadership team so that they

00:18:46,720 --> 00:18:50,720
know what is actually

00:18:48,720 --> 00:18:52,320
most critical for them to pay attention

00:18:50,720 --> 00:18:54,320
to

00:18:52,320 --> 00:18:56,000
and you know we just keep keep doing

00:18:54,320 --> 00:18:57,919
this until we're ready to

00:18:56,000 --> 00:19:00,080
you know flip that feature flag on for

00:18:57,919 --> 00:19:01,679
our users through beta or

00:19:00,080 --> 00:19:04,240
uh to actually deploy as a general

00:19:01,679 --> 00:19:06,799
availability feature

00:19:04,240 --> 00:19:07,520
and you know here we are coming up on

00:19:06,799 --> 00:19:09,520
time

00:19:07,520 --> 00:19:10,799
so quick recap of everything i just

00:19:09,520 --> 00:19:14,799
talked about

00:19:10,799 --> 00:19:17,120
going back to that chart i've got

00:19:14,799 --> 00:19:19,200
my ideas they're all in issues i'm using

00:19:17,120 --> 00:19:20,960
templates to categorize them

00:19:19,200 --> 00:19:23,679
make sure i have enough context from

00:19:20,960 --> 00:19:25,600
everyone i'm scoping them down and then

00:19:23,679 --> 00:19:27,600
as an organization we're aligning by

00:19:25,600 --> 00:19:28,880
using this like four to six week epic

00:19:27,600 --> 00:19:31,520
template

00:19:28,880 --> 00:19:33,200
uh that is focused on problems we

00:19:31,520 --> 00:19:36,240
prioritize those problems

00:19:33,200 --> 00:19:37,280
for each squad and then pick up the

00:19:36,240 --> 00:19:40,320
thing that's next

00:19:37,280 --> 00:19:42,000
and then as we're iterating through

00:19:40,320 --> 00:19:43,360
you know breaking that epic down into

00:19:42,000 --> 00:19:45,200
milestones

00:19:43,360 --> 00:19:46,480
and sharing our demos with each other

00:19:45,200 --> 00:19:48,400
we're learning

00:19:46,480 --> 00:19:50,480
we're building more and iterating on the

00:19:48,400 --> 00:19:52,400
final end user experience

00:19:50,480 --> 00:19:54,559
we release it and then we get great

00:19:52,400 --> 00:19:58,080
feedback from our users that starts that

00:19:54,559 --> 00:19:59,520
cycle all over again uh so

00:19:58,080 --> 00:20:01,120
i'm super looking forward to your

00:19:59,520 --> 00:20:04,720
questions and you know thank you so much

00:20:01,120 --> 00:20:04,720

YouTube URL: https://www.youtube.com/watch?v=UTDAlZFhPyM


