Title: Paying down technical debt at GitHub - GitHub Universe 2020
Publication date: 2020-12-10
Playlist: GitHub Universe 2020: Enterprise - DevOps
Description: 
	Presented by 
Keith Ballinger, SVP of Engineering
Keerthana ""KK"" Kumar, Staff Engineering Manager
Liz Saling, Director of Engineering

GitHub invested an entire quarter to identify, prioritize, and tackle some of the business’ biggest challenges both inside and out. Hear from Keith Ballinger, SVP of Engineering, Liz Saling, Director of Engineering, and Keerthana “KK” Kumar, Staff Engineering Manager, how they planned, approached, and solved an initiative that involved over 400 engineers, 3 categories of work, and 20 specific projects.

For more from GitHub Universe 2020, visit https://githubuniverse.com

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:02,150 --> 00:00:05,180
[Music]

00:00:07,680 --> 00:00:10,639
thank you

00:00:08,400 --> 00:00:12,000
dana and martin very much uh it was a

00:00:10,639 --> 00:00:14,080
great uh

00:00:12,000 --> 00:00:15,440
introduction very flattering and today

00:00:14,080 --> 00:00:16,880
we're going to be talking about paying

00:00:15,440 --> 00:00:19,920
down technical debt at

00:00:16,880 --> 00:00:21,439
github so just to recap very briefly my

00:00:19,920 --> 00:00:24,240
name is keith ballinger

00:00:21,439 --> 00:00:26,480
i am the svp of engineering at github

00:00:24,240 --> 00:00:29,679
i've been here for about a year

00:00:26,480 --> 00:00:30,000
and we'll just pop right into it you

00:00:29,679 --> 00:00:32,000
know

00:00:30,000 --> 00:00:33,440
technical that something that we've all

00:00:32,000 --> 00:00:36,000
heard about something that

00:00:33,440 --> 00:00:38,079
plagues a lot of engineering teams and

00:00:36,000 --> 00:00:40,000
so what is technical debt martin fowler

00:00:38,079 --> 00:00:41,760
has a really great description of it he

00:00:40,000 --> 00:00:43,920
calls it cruft in a system

00:00:41,760 --> 00:00:46,480
that makes things harder to understand

00:00:43,920 --> 00:00:49,039
makes it harder to change the system

00:00:46,480 --> 00:00:50,640
and this technical debt always exists

00:00:49,039 --> 00:00:53,199
it's in every project you don't

00:00:50,640 --> 00:00:55,360
get rid of it like debt and you know any

00:00:53,199 --> 00:00:57,680
kind of economic system

00:00:55,360 --> 00:00:59,440
it's there to help you at times move

00:00:57,680 --> 00:01:01,359
faster to gain leverage

00:00:59,440 --> 00:01:02,480
but you do have to pay it back and when

00:01:01,359 --> 00:01:04,400
you have too much

00:01:02,480 --> 00:01:06,320
things slow down too much and as things

00:01:04,400 --> 00:01:07,439
slow down in terms of your ability to

00:01:06,320 --> 00:01:09,520
make changes

00:01:07,439 --> 00:01:11,360
that's when you start seeing issues

00:01:09,520 --> 00:01:13,119
either your velocity slows down

00:01:11,360 --> 00:01:14,960
or you start having too many bugs that

00:01:13,119 --> 00:01:16,240
you can't keep up with or you even have

00:01:14,960 --> 00:01:18,880
like reliability

00:01:16,240 --> 00:01:21,280
and other issues like that so at github

00:01:18,880 --> 00:01:23,040
this summer we basically decided to

00:01:21,280 --> 00:01:24,720
have a project where we were going to

00:01:23,040 --> 00:01:28,400
pay down this technical debt

00:01:24,720 --> 00:01:31,119
with very specific outcomes in mind we

00:01:28,400 --> 00:01:33,119
stopped most not all feature development

00:01:31,119 --> 00:01:34,479
to really focus the engineering team on

00:01:33,119 --> 00:01:36,799
swarming on these issues

00:01:34,479 --> 00:01:38,640
we went out to ics to understand what

00:01:36,799 --> 00:01:40,079
are the problems that they are seeing

00:01:38,640 --> 00:01:41,040
and of course we looked at you know what

00:01:40,079 --> 00:01:41,920
are the problems we're seeing kind of

00:01:41,040 --> 00:01:44,720
holistically

00:01:41,920 --> 00:01:46,720
across the entire system and out of that

00:01:44,720 --> 00:01:49,439
we came up with three major

00:01:46,720 --> 00:01:49,920
objectives or work streams for how we

00:01:49,439 --> 00:01:52,320
wanted

00:01:49,920 --> 00:01:52,960
uh to organize this effort one was

00:01:52,320 --> 00:01:56,240
around

00:01:52,960 --> 00:01:58,640
both the outer loop how you deploy

00:01:56,240 --> 00:01:59,840
software but also our observability both

00:01:58,640 --> 00:02:01,680
observability

00:01:59,840 --> 00:02:04,320
during a deploy and then just generally

00:02:01,680 --> 00:02:05,920
speaking another big set of work streams

00:02:04,320 --> 00:02:08,160
was around the inner loop

00:02:05,920 --> 00:02:10,080
and testing that is when someone is

00:02:08,160 --> 00:02:11,280
coding they're making a build locally

00:02:10,080 --> 00:02:12,959
they're running tests

00:02:11,280 --> 00:02:15,200
all of those kinds of things and then

00:02:12,959 --> 00:02:17,280
the final loop was final work stream was

00:02:15,200 --> 00:02:20,319
specifically around reliability

00:02:17,280 --> 00:02:22,560
what parts of the system do we need to

00:02:20,319 --> 00:02:24,560
make better and stronger so that you

00:02:22,560 --> 00:02:26,000
know the site is always up always

00:02:24,560 --> 00:02:28,720
serving our customers

00:02:26,000 --> 00:02:30,800
in all cases and so we organized across

00:02:28,720 --> 00:02:32,560
those we had objective leads who kind of

00:02:30,800 --> 00:02:34,640
looked at each one of these three and

00:02:32,560 --> 00:02:37,040
then underneath them we created virtual

00:02:34,640 --> 00:02:38,959
teams of work stream leads to

00:02:37,040 --> 00:02:40,160
tackle very specific problems and so

00:02:38,959 --> 00:02:41,760
we're going to kind of go through that

00:02:40,160 --> 00:02:43,360
funnel with you today

00:02:41,760 --> 00:02:45,680
and i'm going to hand it off to liz

00:02:43,360 --> 00:02:46,160
salling who was one of those objective

00:02:45,680 --> 00:02:48,400
leads

00:02:46,160 --> 00:02:51,840
focused on this outer loop and

00:02:48,400 --> 00:02:51,840
observability take it away liz

00:02:52,080 --> 00:02:56,480
thank you keith i am excited to share

00:02:54,560 --> 00:02:57,920
with y'all some of the things

00:02:56,480 --> 00:02:59,599
that stood out to me that were great

00:02:57,920 --> 00:03:00,480
about the work that we did for this

00:02:59,599 --> 00:03:03,280
outer loop

00:03:00,480 --> 00:03:04,000
and observability objective this was a

00:03:03,280 --> 00:03:06,319
big deal right

00:03:04,000 --> 00:03:08,400
to have this time to work with dozens of

00:03:06,319 --> 00:03:11,040
teams and hundreds of engineers

00:03:08,400 --> 00:03:11,840
all focused on making things here easier

00:03:11,040 --> 00:03:14,319
and faster

00:03:11,840 --> 00:03:15,920
and really even some more fun to get

00:03:14,319 --> 00:03:17,360
things into the hands of our customers

00:03:15,920 --> 00:03:21,280
quickly

00:03:17,360 --> 00:03:24,159
so we deploy to github.com

00:03:21,280 --> 00:03:26,000
a few dozen times every day and that

00:03:24,159 --> 00:03:27,599
takes a couple of hours from each of the

00:03:26,000 --> 00:03:29,840
involved engineers

00:03:27,599 --> 00:03:32,000
and that is assuming that it all goes to

00:03:29,840 --> 00:03:35,120
plan so again remembering those overall

00:03:32,000 --> 00:03:35,920
goals to make shipping github.com fast

00:03:35,120 --> 00:03:39,280
ev

00:03:35,920 --> 00:03:42,000
fast easy and fun so we've been tweaking

00:03:39,280 --> 00:03:44,239
this process over time to make it better

00:03:42,000 --> 00:03:46,000
and given that we have this opportunity

00:03:44,239 --> 00:03:47,760
to do so much more together

00:03:46,000 --> 00:03:49,440
we asked all of engineering for their

00:03:47,760 --> 00:03:51,040
ideas and proposals

00:03:49,440 --> 00:03:52,720
and we took some time to evaluate each

00:03:51,040 --> 00:03:54,799
one of those for the value and impact it

00:03:52,720 --> 00:03:55,680
could have on our deployment process and

00:03:54,799 --> 00:03:57,680
you know

00:03:55,680 --> 00:04:00,480
we had to make some hard decisions we

00:03:57,680 --> 00:04:03,519
had a lot of good proposals

00:04:00,480 --> 00:04:03,920
and ultimately we selected these as some

00:04:03,519 --> 00:04:05,920
of the

00:04:03,920 --> 00:04:07,840
work streams that the projects that we

00:04:05,920 --> 00:04:09,599
were going to work on first

00:04:07,840 --> 00:04:11,200
we wanted to look at how we could speed

00:04:09,599 --> 00:04:12,640
up our artifact builds

00:04:11,200 --> 00:04:14,640
and we need some more progressive

00:04:12,640 --> 00:04:15,439
rollout stages and automation around

00:04:14,640 --> 00:04:17,199
them

00:04:15,439 --> 00:04:18,880
and we noticed that there were recurring

00:04:17,199 --> 00:04:20,560
themes of deployment problems that we

00:04:18,880 --> 00:04:22,479
could eliminate that could take care of

00:04:20,560 --> 00:04:23,199
that need for manual intervention so we

00:04:22,479 --> 00:04:25,199
aimed to

00:04:23,199 --> 00:04:26,840
increase that deployment success rate

00:04:25,199 --> 00:04:29,360
and we also wanted to add some

00:04:26,840 --> 00:04:31,600
resilience in our deployment process to

00:04:29,360 --> 00:04:33,600
github.com outages so that we could use

00:04:31,600 --> 00:04:34,479
github.com more in our deployment

00:04:33,600 --> 00:04:36,320
process

00:04:34,479 --> 00:04:38,560
so that we could restore service faster

00:04:36,320 --> 00:04:40,800
when there is in fact an event

00:04:38,560 --> 00:04:42,320
all right so once we settled on what we

00:04:40,800 --> 00:04:43,680
were going to do we took a minute to

00:04:42,320 --> 00:04:45,759
settle together

00:04:43,680 --> 00:04:47,280
how we were going to do it here's some

00:04:45,759 --> 00:04:49,280
of the things that we did that i thought

00:04:47,280 --> 00:04:51,680
really contributed to this going well

00:04:49,280 --> 00:04:52,240
for us so i want to give a quick shout

00:04:51,680 --> 00:04:54,000
out to

00:04:52,240 --> 00:04:55,520
all of the work stream leads that worked

00:04:54,000 --> 00:04:56,000
with us this summer on this project and

00:04:55,520 --> 00:04:58,560
i definitely

00:04:56,000 --> 00:05:00,080
want to acknowledge and the outer loop

00:04:58,560 --> 00:05:00,639
work stream leads that i got to work

00:05:00,080 --> 00:05:02,960
with

00:05:00,639 --> 00:05:04,160
when i first met with each one of them

00:05:02,960 --> 00:05:06,400
to ask them if they

00:05:04,160 --> 00:05:08,080
wanted to go on this adventure with me

00:05:06,400 --> 00:05:09,840
we covered a well-defined

00:05:08,080 --> 00:05:11,199
set of expectations for the role right

00:05:09,840 --> 00:05:13,600
we had an md file

00:05:11,199 --> 00:05:15,039
right in our overall project repository

00:05:13,600 --> 00:05:16,800
that listed all the details of what we

00:05:15,039 --> 00:05:19,039
expected from them that they'd be

00:05:16,800 --> 00:05:20,240
ultimately responsible for driving the

00:05:19,039 --> 00:05:22,160
project with me

00:05:20,240 --> 00:05:23,680
coming up with a plan engaging other

00:05:22,160 --> 00:05:25,680
teams running point on all the

00:05:23,680 --> 00:05:28,240
communications

00:05:25,680 --> 00:05:29,199
and one neat thing to note here is that

00:05:28,240 --> 00:05:31,120
we didn't always

00:05:29,199 --> 00:05:32,400
select project managers or engineering

00:05:31,120 --> 00:05:33,120
managers right we extended this

00:05:32,400 --> 00:05:35,680
opportunity

00:05:33,120 --> 00:05:36,639
to a lot of different individuals and it

00:05:35,680 --> 00:05:38,479
worked given

00:05:36,639 --> 00:05:40,560
what we outlined and how we kept up with

00:05:38,479 --> 00:05:41,199
each other and that the support that we

00:05:40,560 --> 00:05:42,960
had

00:05:41,199 --> 00:05:45,120
from the other leaders and around the

00:05:42,960 --> 00:05:47,520
engineering organization

00:05:45,120 --> 00:05:48,560
right so the first thing leads had to

00:05:47,520 --> 00:05:50,560
officially do

00:05:48,560 --> 00:05:51,759
was take a couple weeks and come up with

00:05:50,560 --> 00:05:54,000
a project plan

00:05:51,759 --> 00:05:56,400
so to set them up for success we were

00:05:54,000 --> 00:05:58,560
really particular that they had to work

00:05:56,400 --> 00:06:00,560
with one or two other people that fit a

00:05:58,560 --> 00:06:03,520
few perspectives so that we could fight

00:06:00,560 --> 00:06:05,440
bias right from the start of course we

00:06:03,520 --> 00:06:06,000
needed someone who had that context

00:06:05,440 --> 00:06:08,160
right where

00:06:06,000 --> 00:06:09,759
are things at now what's been tried

00:06:08,160 --> 00:06:10,880
before what pitfalls do we need to look

00:06:09,759 --> 00:06:12,960
out for

00:06:10,880 --> 00:06:15,120
the next key person in here was someone

00:06:12,960 --> 00:06:16,800
who maybe wasn't as familiar with the

00:06:15,120 --> 00:06:18,240
current systems but they had other

00:06:16,800 --> 00:06:21,360
relative expert

00:06:18,240 --> 00:06:23,120
expertise experience ideas and not the

00:06:21,360 --> 00:06:24,880
least important was that if this wasn't

00:06:23,120 --> 00:06:26,560
already covered with the other two

00:06:24,880 --> 00:06:28,160
we had to have a representative from the

00:06:26,560 --> 00:06:29,919
team that would be picking up this work

00:06:28,160 --> 00:06:32,319
and continuing to maintain it

00:06:29,919 --> 00:06:33,039
we didn't want any oh they'll figure it

00:06:32,319 --> 00:06:35,840
out later

00:06:33,039 --> 00:06:36,960
type of afterthoughts sure all of this

00:06:35,840 --> 00:06:38,479
was a little bit

00:06:36,960 --> 00:06:40,160
of an additional investment in our time

00:06:38,479 --> 00:06:42,240
to get to kicking off the work

00:06:40,160 --> 00:06:44,479
but we saw some great things emerge as a

00:06:42,240 --> 00:06:46,319
result like there was a lot more buy-in

00:06:44,479 --> 00:06:47,360
than we've seen with other disruptive

00:06:46,319 --> 00:06:49,440
work

00:06:47,360 --> 00:06:50,720
so with that we kicked off the work we

00:06:49,440 --> 00:06:53,520
ran the project like we

00:06:50,720 --> 00:06:54,560
typically would and again here's a few

00:06:53,520 --> 00:06:55,919
key points

00:06:54,560 --> 00:06:58,240
in running the project that really

00:06:55,919 --> 00:06:58,800
helped it really helped that thing for

00:06:58,240 --> 00:07:00,880
us

00:06:58,800 --> 00:07:02,880
we reminded each other often to keep

00:07:00,880 --> 00:07:04,080
that healthy dissatisfaction with the

00:07:02,880 --> 00:07:05,680
status quo

00:07:04,080 --> 00:07:07,199
so instead of running each project

00:07:05,680 --> 00:07:08,880
separately you know the leads met

00:07:07,199 --> 00:07:09,840
together often especially right up front

00:07:08,880 --> 00:07:12,000
right we and then

00:07:09,840 --> 00:07:13,440
at least once a week after that and we

00:07:12,000 --> 00:07:14,000
talk about where we could combine

00:07:13,440 --> 00:07:15,599
efforts

00:07:14,000 --> 00:07:17,840
and where can we build off each other's

00:07:15,599 --> 00:07:18,800
outcomes some of the things that we saw

00:07:17,840 --> 00:07:22,080
come out of this

00:07:18,800 --> 00:07:23,599
were that the outer loop um the metrics

00:07:22,080 --> 00:07:25,680
that we were developing for the

00:07:23,599 --> 00:07:27,680
for the dashboards we were quickly able

00:07:25,680 --> 00:07:28,560
to derive progressive rollouts with them

00:07:27,680 --> 00:07:30,080
we'd already

00:07:28,560 --> 00:07:31,520
plan to do that we just planned to get

00:07:30,080 --> 00:07:32,319
to it later but we were able to pull

00:07:31,520 --> 00:07:34,240
that in

00:07:32,319 --> 00:07:35,840
and get that going quickly and we did

00:07:34,240 --> 00:07:37,360
more than what we'd originally scoped

00:07:35,840 --> 00:07:38,720
for separating the merge queue out of

00:07:37,360 --> 00:07:40,240
the deployment process

00:07:38,720 --> 00:07:42,240
that ended up cutting a big chunk of

00:07:40,240 --> 00:07:44,160
work that we were planning to do for

00:07:42,240 --> 00:07:45,759
deployment success rates

00:07:44,160 --> 00:07:47,919
so just to reiterate on that healthy

00:07:45,759 --> 00:07:49,680
part of the dissatisfaction with this

00:07:47,919 --> 00:07:51,360
status quo right there's a natural

00:07:49,680 --> 00:07:53,520
tendency to focus

00:07:51,360 --> 00:07:54,720
on friction in the current system it was

00:07:53,520 --> 00:07:56,720
great to see people

00:07:54,720 --> 00:07:58,319
really acknowledging the work done and

00:07:56,720 --> 00:07:59,680
the people who did it and the dreams

00:07:58,319 --> 00:08:00,240
that they had for the things that if

00:07:59,680 --> 00:08:01,840
they had

00:08:00,240 --> 00:08:03,280
all the time and people available that

00:08:01,840 --> 00:08:05,840
they could have done

00:08:03,280 --> 00:08:06,560
but we really drove home that help don't

00:08:05,840 --> 00:08:08,000
judge

00:08:06,560 --> 00:08:10,240
thing consistently and it was great to

00:08:08,000 --> 00:08:11,840
see that throughout because really

00:08:10,240 --> 00:08:13,759
we wanted everyone to focus on their

00:08:11,840 --> 00:08:15,120
well-being especially this year but

00:08:13,759 --> 00:08:16,560
always right

00:08:15,120 --> 00:08:18,560
even getting started with us we

00:08:16,560 --> 00:08:20,800
acknowledge how disruptive it was

00:08:18,560 --> 00:08:21,919
compared to continuing work we usually

00:08:20,800 --> 00:08:24,160
focus on

00:08:21,919 --> 00:08:25,759
and taking that on this year it wasn't a

00:08:24,160 --> 00:08:27,840
decision that we made lightly

00:08:25,759 --> 00:08:29,599
and we tried to do some things to make

00:08:27,840 --> 00:08:31,840
it a little more fun right like

00:08:29,599 --> 00:08:32,880
we worked on getting some swag together

00:08:31,840 --> 00:08:34,800
and there

00:08:32,880 --> 00:08:36,159
may have been some fun internal evidence

00:08:34,800 --> 00:08:37,760
that we produced

00:08:36,159 --> 00:08:39,279
but really we did focus on working

00:08:37,760 --> 00:08:42,479
together well

00:08:39,279 --> 00:08:44,720
so as we progress through the summer

00:08:42,479 --> 00:08:46,240
as usual you know we we learned some

00:08:44,720 --> 00:08:47,839
things we had to adjust

00:08:46,240 --> 00:08:49,360
we had to accommodate new information

00:08:47,839 --> 00:08:51,440
and situations that came up

00:08:49,360 --> 00:08:53,600
we ended up dropping some work streams

00:08:51,440 --> 00:08:56,160
that we have originally planned to do

00:08:53,600 --> 00:08:57,600
so that we could really focus in and do

00:08:56,160 --> 00:09:00,080
the ones that we

00:08:57,600 --> 00:09:01,600
focus on well um again we didn't want to

00:09:00,080 --> 00:09:02,399
squeeze ourselves we really wanted to

00:09:01,600 --> 00:09:03,839
focus that

00:09:02,399 --> 00:09:05,680
energy while we had everybody's

00:09:03,839 --> 00:09:07,200
attention and move the biggest things

00:09:05,680 --> 00:09:08,800
forward together

00:09:07,200 --> 00:09:10,720
and we also identified that we were

00:09:08,800 --> 00:09:12,880
generating a lot of work

00:09:10,720 --> 00:09:14,560
for other teams to implement that fan

00:09:12,880 --> 00:09:16,880
out work to you know implement the

00:09:14,560 --> 00:09:18,399
improvements across the organization at

00:09:16,880 --> 00:09:20,880
one point we had to pause a bit

00:09:18,399 --> 00:09:22,080
and prioritize these better so it wasn't

00:09:20,880 --> 00:09:24,000
going to each individual

00:09:22,080 --> 00:09:25,600
team to sort out for themselves and that

00:09:24,000 --> 00:09:25,920
did affect some of our timelines but it

00:09:25,600 --> 00:09:27,440
was

00:09:25,920 --> 00:09:29,120
quite it was good to trust that early

00:09:27,440 --> 00:09:31,360
and get that moving

00:09:29,120 --> 00:09:32,560
okay so fast forward a couple of months

00:09:31,360 --> 00:09:33,839
and here's what we were able to

00:09:32,560 --> 00:09:36,560
accomplish

00:09:33,839 --> 00:09:37,120
first we added several reliability

00:09:36,560 --> 00:09:39,680
features

00:09:37,120 --> 00:09:41,120
and thankfully we were able to maintain

00:09:39,680 --> 00:09:42,640
we were able to do this without adding

00:09:41,120 --> 00:09:43,040
friction right we were able to maintain

00:09:42,640 --> 00:09:44,800
that

00:09:43,040 --> 00:09:46,880
critical cue to deploy time that we

00:09:44,800 --> 00:09:48,080
watch because we shave time off

00:09:46,880 --> 00:09:50,240
elsewhere

00:09:48,080 --> 00:09:51,600
and we've seen our deployment frequency

00:09:50,240 --> 00:09:53,519
bump up we're often

00:09:51,600 --> 00:09:55,120
delivering over 100 pull requests a day

00:09:53,519 --> 00:09:56,720
to github.com now

00:09:55,120 --> 00:09:58,800
the number of deployment rollbacks we

00:09:56,720 --> 00:10:00,399
have to do are fewer and fewer it saves

00:09:58,800 --> 00:10:02,079
so many hours of deployment

00:10:00,399 --> 00:10:05,040
interruptions each week this past month

00:10:02,079 --> 00:10:07,360
alone it was down another 15

00:10:05,040 --> 00:10:09,279
last uh let's see the time to resolve

00:10:07,360 --> 00:10:10,079
incidents when they do happen is vastly

00:10:09,279 --> 00:10:11,920
improved

00:10:10,079 --> 00:10:13,680
and i want to mention a thing that i was

00:10:11,920 --> 00:10:16,079
super excited to see happen here we set

00:10:13,680 --> 00:10:17,760
up a mirror of our github repository so

00:10:16,079 --> 00:10:18,640
that we can build and deploy github

00:10:17,760 --> 00:10:20,959
still

00:10:18,640 --> 00:10:22,560
when github isn't available the thing

00:10:20,959 --> 00:10:24,720
that we do it when it is

00:10:22,560 --> 00:10:26,720
and another one i'm super excited about

00:10:24,720 --> 00:10:28,800
is that we're enabling merge queues for

00:10:26,720 --> 00:10:30,399
more of our repositories we've separated

00:10:28,800 --> 00:10:32,880
out how we bundle up our

00:10:30,399 --> 00:10:34,560
pull requests and that's separate out of

00:10:32,880 --> 00:10:36,079
the deployment process now for that

00:10:34,560 --> 00:10:38,640
repository

00:10:36,079 --> 00:10:40,399
so yeah so all of this along with some

00:10:38,640 --> 00:10:41,760
simpler confidence dashboards

00:10:40,399 --> 00:10:43,920
again that progressive rollout

00:10:41,760 --> 00:10:46,079
automation and really i believe

00:10:43,920 --> 00:10:48,240
just involving so many more people to

00:10:46,079 --> 00:10:49,760
work on this experience and the outer

00:10:48,240 --> 00:10:52,640
loop and the observability

00:10:49,760 --> 00:10:54,160
it led to this great improvement in our

00:10:52,640 --> 00:10:55,600
development happiness measurement that

00:10:54,160 --> 00:10:59,440
we take each quarter

00:10:55,600 --> 00:11:00,880
160 percent y'all like that's that's big

00:10:59,440 --> 00:11:02,480
and i don't want to like to call out

00:11:00,880 --> 00:11:04,480
another key observation related to this

00:11:02,480 --> 00:11:06,399
and that is the increased unity

00:11:04,480 --> 00:11:09,040
across the engineering organizations

00:11:06,399 --> 00:11:10,399
right so many teams had opportunities

00:11:09,040 --> 00:11:12,079
to work together on things that we

00:11:10,399 --> 00:11:13,680
wouldn't ever get a chance to

00:11:12,079 --> 00:11:16,160
collaborate on normally and the results

00:11:13,680 --> 00:11:18,160
of that have been so positive

00:11:16,160 --> 00:11:20,000
so yeah so these results right there

00:11:18,160 --> 00:11:21,680
they're fun they're really good

00:11:20,000 --> 00:11:23,120
but really how do we keep this up that's

00:11:21,680 --> 00:11:25,839
what's really important

00:11:23,120 --> 00:11:28,240
so we have now what i like to call

00:11:25,839 --> 00:11:30,560
anti-slip measures in place um formally

00:11:28,240 --> 00:11:32,720
here we call it our fundamentals program

00:11:30,560 --> 00:11:35,120
but for every improvement that we make

00:11:32,720 --> 00:11:37,040
we set new benchmarks we raise that bar

00:11:35,120 --> 00:11:38,880
we monitor them and tweet to understand

00:11:37,040 --> 00:11:40,800
does something need to be nudged a bit

00:11:38,880 --> 00:11:43,040
right we have that additional visibility

00:11:40,800 --> 00:11:44,880
to make it a lot easier to have these

00:11:43,040 --> 00:11:46,160
conversations with product managers and

00:11:44,880 --> 00:11:48,399
engineering leaders

00:11:46,160 --> 00:11:49,519
and it makes planning able to factor

00:11:48,399 --> 00:11:51,279
this in better and

00:11:49,519 --> 00:11:52,560
at least be more aware of what we're

00:11:51,279 --> 00:11:54,399
going to set aside if we're choosing to

00:11:52,560 --> 00:11:56,480
do other things right

00:11:54,399 --> 00:11:58,959
and we continuing and we continue

00:11:56,480 --> 00:11:59,920
partnering and working with other teams

00:11:58,959 --> 00:12:01,279
who would

00:11:59,920 --> 00:12:03,120
really like to contribute and this is

00:12:01,279 --> 00:12:04,079
helping us work smarter and be more

00:12:03,120 --> 00:12:05,920
effective

00:12:04,079 --> 00:12:07,680
and really get that high performing

00:12:05,920 --> 00:12:08,880
thing without having to work longer

00:12:07,680 --> 00:12:11,680
hours

00:12:08,880 --> 00:12:12,160
so with all that i am excited to hand it

00:12:11,680 --> 00:12:13,839
over

00:12:12,160 --> 00:12:15,120
to one of my favorite colleagues kk

00:12:13,839 --> 00:12:16,639
she's going to talk to us about the

00:12:15,120 --> 00:12:17,440
experience on one work stream in

00:12:16,639 --> 00:12:19,279
particular

00:12:17,440 --> 00:12:21,279
one that really helps speed things up

00:12:19,279 --> 00:12:25,200
for us for continuous

00:12:21,279 --> 00:12:28,240
integration okay

00:12:25,200 --> 00:12:29,920
thank you liz um um everybody i'm kk and

00:12:28,240 --> 00:12:32,240
i'm a staff engineering manager but

00:12:29,920 --> 00:12:33,440
specifically on this effort to pay down

00:12:32,240 --> 00:12:36,240
technical debt i

00:12:33,440 --> 00:12:36,959
was one of the work stream leads you

00:12:36,240 --> 00:12:39,519
know as

00:12:36,959 --> 00:12:40,959
keith and liz mentioned um you know as

00:12:39,519 --> 00:12:43,360
we build software

00:12:40,959 --> 00:12:44,240
for a long time as just how we have done

00:12:43,360 --> 00:12:47,040
in github we

00:12:44,240 --> 00:12:48,480
accumulate a ton of technical debt um so

00:12:47,040 --> 00:12:50,560
right before we started this initiative

00:12:48,480 --> 00:12:52,160
we asked the entire engineering org

00:12:50,560 --> 00:12:53,920
to suggest you know what kind of

00:12:52,160 --> 00:12:55,920
engineering improvements we want to see

00:12:53,920 --> 00:12:56,959
what technical that we wanted to purge

00:12:55,920 --> 00:12:58,560
um and

00:12:56,959 --> 00:13:00,160
i have the privilege to work on one of

00:12:58,560 --> 00:13:03,360
the most popular requests

00:13:00,160 --> 00:13:06,399
made that is to make our ci jobs run

00:13:03,360 --> 00:13:09,279
faster so let's talk about what goes

00:13:06,399 --> 00:13:11,120
behind the scene as we build github so

00:13:09,279 --> 00:13:14,000
github.com is supported by

00:13:11,120 --> 00:13:15,680
a large ruby monolith that is deployed

00:13:14,000 --> 00:13:18,880
several times a day

00:13:15,680 --> 00:13:21,040
as an engineering team we are reviewing

00:13:18,880 --> 00:13:22,959
and shipping hundreds of pulled requests

00:13:21,040 --> 00:13:26,160
a day and at the same time

00:13:22,959 --> 00:13:28,639
so we also care about

00:13:26,160 --> 00:13:29,360
quality and maintainability and that's

00:13:28,639 --> 00:13:31,600
why our

00:13:29,360 --> 00:13:32,880
project contains about seven thousand

00:13:31,600 --> 00:13:36,079
test suites and

00:13:32,880 --> 00:13:38,800
five 5000 test files so before

00:13:36,079 --> 00:13:40,160
every deployment and after every commit

00:13:38,800 --> 00:13:43,360
on an active pull request

00:13:40,160 --> 00:13:44,160
we run all of our continuous integration

00:13:43,360 --> 00:13:47,199
jobs

00:13:44,160 --> 00:13:49,839
um to ensure quality these jobs

00:13:47,199 --> 00:13:50,560
are foreign type so there's build jobs

00:13:49,839 --> 00:13:52,639
um

00:13:50,560 --> 00:13:53,600
linting jobs unit test jobs and

00:13:52,639 --> 00:13:57,279
integration jobs

00:13:53,600 --> 00:14:00,639
in total we have about 25 ci jobs

00:13:57,279 --> 00:14:01,360
together they take about 45 minutes to

00:14:00,639 --> 00:14:03,600
run

00:14:01,360 --> 00:14:05,839
well 45 minutes is a long time to wait

00:14:03,600 --> 00:14:06,639
and i often could get a workout in

00:14:05,839 --> 00:14:08,160
before

00:14:06,639 --> 00:14:09,839
you know things are being ready for

00:14:08,160 --> 00:14:12,480
merge but

00:14:09,839 --> 00:14:14,320
i also want to note that the in the best

00:14:12,480 --> 00:14:16,480
case scenario assuming

00:14:14,320 --> 00:14:17,760
all ci jobs were successful around the

00:14:16,480 --> 00:14:19,839
first run

00:14:17,760 --> 00:14:20,959
um the lead time to change that liz was

00:14:19,839 --> 00:14:22,959
talking about that is

00:14:20,959 --> 00:14:24,480
the time it takes for a piece of code to

00:14:22,959 --> 00:14:26,639
go from a developer's commit

00:14:24,480 --> 00:14:28,839
to a feature on the website took about

00:14:26,639 --> 00:14:30,320
two hours and that's the best case

00:14:28,839 --> 00:14:31,920
scenario

00:14:30,320 --> 00:14:34,240
of course we also had break class

00:14:31,920 --> 00:14:36,880
scenarios in place in order to ship

00:14:34,240 --> 00:14:39,279
hot fixes to get around this 45-minute

00:14:36,880 --> 00:14:41,199
ci runtime

00:14:39,279 --> 00:14:42,720
but the norm was 45-minute and it is

00:14:41,199 --> 00:14:44,320
evident that it slowed down our

00:14:42,720 --> 00:14:45,519
development process and added to

00:14:44,320 --> 00:14:48,639
developer friction

00:14:45,519 --> 00:14:50,560
so going back to that 25 ci jobs we

00:14:48,639 --> 00:14:53,440
looked deeper into it and found out

00:14:50,560 --> 00:14:55,120
that all but two integration jobs took

00:14:53,440 --> 00:14:57,440
less than 13 minutes

00:14:55,120 --> 00:14:58,480
so obviously the two integration jobs

00:14:57,440 --> 00:15:01,120
were considered

00:14:58,480 --> 00:15:01,519
a bottleneck in our deployment process

00:15:01,120 --> 00:15:03,120
and

00:15:01,519 --> 00:15:05,279
a little more into that two integration

00:15:03,120 --> 00:15:08,399
jobs we were actually running tests on

00:15:05,279 --> 00:15:10,560
our github enterprise server builds

00:15:08,399 --> 00:15:11,440
so you know what does github enterprise

00:15:10,560 --> 00:15:13,600
server maybe you

00:15:11,440 --> 00:15:15,360
used it as part of enterprise teams but

00:15:13,600 --> 00:15:17,760
we ship github enterprise

00:15:15,360 --> 00:15:19,120
server every quarter and we make a patch

00:15:17,760 --> 00:15:21,519
release every two weeks

00:15:19,120 --> 00:15:22,959
but on the contrary we ship dot com

00:15:21,519 --> 00:15:24,800
several times a day

00:15:22,959 --> 00:15:26,320
so we wanted to find the solution that

00:15:24,800 --> 00:15:28,959
can guarantee the quality

00:15:26,320 --> 00:15:30,959
of every product we ship while still

00:15:28,959 --> 00:15:32,320
keeping the ci runtime as low as

00:15:30,959 --> 00:15:35,120
possible

00:15:32,320 --> 00:15:36,560
so we developed the solution calling it

00:15:35,120 --> 00:15:38,399
deferred compliance

00:15:36,560 --> 00:15:40,240
different compliance is basically a tool

00:15:38,399 --> 00:15:41,440
that was integrated along with our ci

00:15:40,240 --> 00:15:43,360
workflow

00:15:41,440 --> 00:15:45,680
this allowed our developers to continue

00:15:43,360 --> 00:15:46,880
to ship updatesthe.com which is

00:15:45,680 --> 00:15:48,959
github.com

00:15:46,880 --> 00:15:52,240
without having to wait for the results

00:15:48,959 --> 00:15:54,720
of the long-running ci jobs that tested

00:15:52,240 --> 00:15:55,600
github enterprise server we essentially

00:15:54,720 --> 00:15:58,000
deferred that

00:15:55,600 --> 00:15:59,279
for a later time let's walk through a

00:15:58,000 --> 00:16:01,279
scenario

00:15:59,279 --> 00:16:02,639
a developer let's say creates a pull

00:16:01,279 --> 00:16:04,560
request gets

00:16:02,639 --> 00:16:06,720
everything reviewed and it's set to

00:16:04,560 --> 00:16:09,279
merge at this point

00:16:06,720 --> 00:16:09,759
we set aside two different types of jobs

00:16:09,279 --> 00:16:11,759
one

00:16:09,759 --> 00:16:13,040
the long-running ci jobs that run in the

00:16:11,759 --> 00:16:15,680
background and

00:16:13,040 --> 00:16:17,040
two the short runnings quick ci jobs

00:16:15,680 --> 00:16:20,480
that are essential

00:16:17,040 --> 00:16:21,519
so as soon as all the essential nci jobs

00:16:20,480 --> 00:16:24,000
are complete

00:16:21,519 --> 00:16:24,959
the pulled request is set to merge and

00:16:24,000 --> 00:16:28,480
deployed

00:16:24,959 --> 00:16:30,800
on to dot com now at the same time as

00:16:28,480 --> 00:16:32,720
the long running ci jobs are waiting

00:16:30,800 --> 00:16:35,120
we have two scenarios that can happen

00:16:32,720 --> 00:16:37,519
things go succeed that means github

00:16:35,120 --> 00:16:40,480
enterprise servers quality is insured

00:16:37,519 --> 00:16:41,040
and we call it compliance is achieved if

00:16:40,480 --> 00:16:44,000
the

00:16:41,040 --> 00:16:44,639
long-running ci job fails compliance is

00:16:44,000 --> 00:16:49,120
broken

00:16:44,639 --> 00:16:52,320
and a developer is informed of this

00:16:49,120 --> 00:16:52,880
and we have a 72-hour clock that kicks

00:16:52,320 --> 00:16:56,000
off

00:16:52,880 --> 00:16:56,800
this 72 hours allows the developer to be

00:16:56,000 --> 00:16:58,560
able to fix

00:16:56,800 --> 00:16:59,839
the issue that was there on the github

00:16:58,560 --> 00:17:01,680
and a price server build

00:16:59,839 --> 00:17:03,360
and reverse that or revert the change

00:17:01,680 --> 00:17:06,400
that they made um

00:17:03,360 --> 00:17:07,919
if the fix or the change didn't happen

00:17:06,400 --> 00:17:09,919
within the 72 hours

00:17:07,919 --> 00:17:11,120
a big hammer is thrown and all

00:17:09,919 --> 00:17:14,480
deployments to

00:17:11,120 --> 00:17:16,880
github.com is halted until the quality

00:17:14,480 --> 00:17:19,919
of github enterprise server is restored

00:17:16,880 --> 00:17:22,720
so we chose 72 hours keeping in mind our

00:17:19,919 --> 00:17:24,480
global team we wanted everyone to be

00:17:22,720 --> 00:17:27,839
able to continuously ship

00:17:24,480 --> 00:17:30,880
to github uninterrupted around the clock

00:17:27,839 --> 00:17:31,440
what 72 hours ensures that a potential

00:17:30,880 --> 00:17:33,280
build

00:17:31,440 --> 00:17:35,120
that was broken in github enterprise

00:17:33,280 --> 00:17:35,919
server shipped by a developer in san

00:17:35,120 --> 00:17:38,320
francisco

00:17:35,919 --> 00:17:40,480
let's say on a friday evening doesn't

00:17:38,320 --> 00:17:41,200
block a developer in sydney from making

00:17:40,480 --> 00:17:43,440
a change

00:17:41,200 --> 00:17:45,120
to github.com first thing on their

00:17:43,440 --> 00:17:47,360
monday morning

00:17:45,120 --> 00:17:48,720
as we worked on this we use our own

00:17:47,360 --> 00:17:50,720
platform to remind

00:17:48,720 --> 00:17:52,559
developers um through issues and

00:17:50,720 --> 00:17:54,480
notifications several times during that

00:17:52,559 --> 00:17:56,880
72 hour window

00:17:54,480 --> 00:17:57,760
and as liz talked about one of the key

00:17:56,880 --> 00:17:59,360
factors why

00:17:57,760 --> 00:18:01,760
while developing the solution was to

00:17:59,360 --> 00:18:05,440
gather context collect the ideas

00:18:01,760 --> 00:18:07,679
and find something that was maintainable

00:18:05,440 --> 00:18:09,280
so as we build deferred compliance

00:18:07,679 --> 00:18:11,919
workflow in rci

00:18:09,280 --> 00:18:14,000
system we leveraged our products issues

00:18:11,919 --> 00:18:15,760
actions workflow integrations

00:18:14,000 --> 00:18:17,039
we focused on the key metrics to

00:18:15,760 --> 00:18:19,840
identify

00:18:17,039 --> 00:18:21,679
uh bottlenecks and found a maintainable

00:18:19,840 --> 00:18:23,760
and a reusable solution

00:18:21,679 --> 00:18:25,520
we ultimately built an internal tool

00:18:23,760 --> 00:18:26,480
that supports our developers and at the

00:18:25,520 --> 00:18:28,160
same time

00:18:26,480 --> 00:18:29,679
acts as a guard rail for product

00:18:28,160 --> 00:18:32,880
qualities

00:18:29,679 --> 00:18:35,679
and as for numbers we reduce our ci time

00:18:32,880 --> 00:18:37,280
to 13 minutes making our ci workflow

00:18:35,679 --> 00:18:39,520
three times faster

00:18:37,280 --> 00:18:40,960
then as an added bonus we reduced our

00:18:39,520 --> 00:18:44,559
compute cost down

00:18:40,960 --> 00:18:47,120
by a fourth this was improvement done

00:18:44,559 --> 00:18:47,760
just in one of the work streams in the

00:18:47,120 --> 00:18:49,679
larger and

00:18:47,760 --> 00:18:51,280
safe in the larger initiative there was

00:18:49,679 --> 00:18:52,080
a lot more improvement as liz talked

00:18:51,280 --> 00:18:54,160
about

00:18:52,080 --> 00:18:56,000
but we focused on the fundamentals of

00:18:54,160 --> 00:18:58,960
development tracking down

00:18:56,000 --> 00:19:00,160
important metrics deploy frequency

00:18:58,960 --> 00:19:02,000
change fail to rate

00:19:00,160 --> 00:19:05,120
time to restore a service and of course

00:19:02,000 --> 00:19:07,440
what i fix lead time to change

00:19:05,120 --> 00:19:09,679
above and beyond numbers github

00:19:07,440 --> 00:19:12,480
engineering work together to identify

00:19:09,679 --> 00:19:13,120
prioritize plan swarm on the most

00:19:12,480 --> 00:19:15,679
important

00:19:13,120 --> 00:19:17,120
impactful issues that matter to us we

00:19:15,679 --> 00:19:19,039
brought together teams from

00:19:17,120 --> 00:19:20,240
different parts of organization to work

00:19:19,039 --> 00:19:22,799
on the fundamentals

00:19:20,240 --> 00:19:24,240
and what warmed my heart the most is how

00:19:22,799 --> 00:19:26,799
we were able to focus

00:19:24,240 --> 00:19:28,160
on our engineering platform cracking

00:19:26,799 --> 00:19:31,440
down technical debt

00:19:28,160 --> 00:19:33,679
making engineering improvements so that

00:19:31,440 --> 00:19:34,480
we could continue to build the best in

00:19:33,679 --> 00:19:37,760
class

00:19:34,480 --> 00:19:39,520
developer products for you with that

00:19:37,760 --> 00:19:40,799
thank you so much for listening to how

00:19:39,520 --> 00:19:43,520
we fixed

00:19:40,799 --> 00:19:46,880
and worked on technical debt at github

00:19:43,520 --> 00:19:46,880

YouTube URL: https://www.youtube.com/watch?v=3XR7qeAosFs


