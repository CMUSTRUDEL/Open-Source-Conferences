Title: Managing test environments with GitOps and Actions - GitHub Universe 2020
Publication date: 2020-12-10
Playlist: GitHub Universe 2020: Enterprise - DevOps
Description: 
	Presented by:
Andreas Prang, Team Lead Infrastructure Services, Axel Springer SE
Daniel Fassbender, Senior Software Engineer, Axel Springer SE

This talk will cover how to build a setup that creates a separate development and test environment, using BILD.de — one of Europe's biggest news sites — as an example. Through the combination of GitHub Actions, Container Registry, and GitOps, these Phoenix Environments can be set up in less than 200 lines of code, providing individual test environments automatically within minutes. The benefit: Your developers are able to show a preview to stakeholders with just a few automated and manual tests.

For more from GitHub Universe 2020, visit https://githubuniverse.com

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:02,070 --> 00:00:05,120
[Music]

00:00:06,799 --> 00:00:09,840
hi

00:00:07,440 --> 00:00:11,840
i'm andreas i'm the team lead of our

00:00:09,840 --> 00:00:14,480
infrastructure and services team here at

00:00:11,840 --> 00:00:16,880
axospringer national median tech

00:00:14,480 --> 00:00:18,000
our team is creating an infrastructure

00:00:16,880 --> 00:00:20,400
platform

00:00:18,000 --> 00:00:21,920
to give our developers the possibility

00:00:20,400 --> 00:00:25,519
to run their services

00:00:21,920 --> 00:00:26,640
easily for our platforms like blte and

00:00:25,519 --> 00:00:28,880
valde

00:00:26,640 --> 00:00:30,800
some of the biggest news portals in

00:00:28,880 --> 00:00:33,200
germany and europe

00:00:30,800 --> 00:00:35,120
later on i'm happy to be joined by

00:00:33,200 --> 00:00:36,480
daniel one of our senior devops

00:00:35,120 --> 00:00:39,360
engineers

00:00:36,480 --> 00:00:40,320
today we want to share our solution on

00:00:39,360 --> 00:00:42,960
how to set up

00:00:40,320 --> 00:00:44,399
completely automated test environments

00:00:42,960 --> 00:00:47,280
in kubernetes

00:00:44,399 --> 00:00:49,680
using githubs and the github toolchain

00:00:47,280 --> 00:00:52,800
when developers start with a new feature

00:00:49,680 --> 00:00:55,360
they want us to spin up a complete

00:00:52,800 --> 00:00:57,199
new test environment and when the last

00:00:55,360 --> 00:00:58,239
pull request has been merged to the main

00:00:57,199 --> 00:01:01,039
branch

00:00:58,239 --> 00:01:01,760
they close the feature branch and want

00:01:01,039 --> 00:01:03,920
us

00:01:01,760 --> 00:01:04,799
to destroy the test environment

00:01:03,920 --> 00:01:07,920
completely to

00:01:04,799 --> 00:01:09,360
avoid any costs afterwards so this kind

00:01:07,920 --> 00:01:11,920
of test environments

00:01:09,360 --> 00:01:13,760
are called phoenix environments and for

00:01:11,920 --> 00:01:14,960
those phoenix environments we do have

00:01:13,760 --> 00:01:18,000
two stakeholders

00:01:14,960 --> 00:01:18,720
at first they are the developers they

00:01:18,000 --> 00:01:21,200
list

00:01:18,720 --> 00:01:22,720
their code changes as close as possible

00:01:21,200 --> 00:01:25,759
to production

00:01:22,720 --> 00:01:28,320
and so they can avoid conflicts

00:01:25,759 --> 00:01:30,720
on parallel development in different

00:01:28,320 --> 00:01:33,439
features but the same project

00:01:30,720 --> 00:01:35,040
the second group are the product owners

00:01:33,439 --> 00:01:36,079
they want to have these phoenix

00:01:35,040 --> 00:01:38,400
environments

00:01:36,079 --> 00:01:39,759
to test and approve new features before

00:01:38,400 --> 00:01:42,799
going live

00:01:39,759 --> 00:01:46,159
and to do so we give them a unique url

00:01:42,799 --> 00:01:47,840
for each phoenix environment and

00:01:46,159 --> 00:01:50,000
why do we want to be as close as

00:01:47,840 --> 00:01:52,000
possible to production

00:01:50,000 --> 00:01:54,159
we could do it the either way and just

00:01:52,000 --> 00:01:57,040
create a new namespace and kubernetes

00:01:54,159 --> 00:01:57,520
and deploy a few services and have a

00:01:57,040 --> 00:01:59,920
look

00:01:57,520 --> 00:02:03,920
how it's working but what we do is to

00:01:59,920 --> 00:02:03,920
create a copy of the complete

00:02:04,000 --> 00:02:09,440
live environment including

00:02:07,040 --> 00:02:10,319
all monitorings loggings and many more

00:02:09,440 --> 00:02:12,160
services

00:02:10,319 --> 00:02:13,760
we have in place for our production

00:02:12,160 --> 00:02:16,080
system

00:02:13,760 --> 00:02:18,080
before we dive into the workflow i want

00:02:16,080 --> 00:02:19,680
to give you a very short introduction

00:02:18,080 --> 00:02:23,599
into githubs

00:02:19,680 --> 00:02:25,280
which is a combination of infrastructure

00:02:23,599 --> 00:02:27,360
requirements defined

00:02:25,280 --> 00:02:28,560
in yaml files and saved in a github

00:02:27,360 --> 00:02:31,680
repository

00:02:28,560 --> 00:02:32,480
and a service running in kubernetes in

00:02:31,680 --> 00:02:35,280
our case

00:02:32,480 --> 00:02:36,400
it's flux cd which continuously is

00:02:35,280 --> 00:02:39,519
watching the

00:02:36,400 --> 00:02:42,319
infrastructure repository and whenever

00:02:39,519 --> 00:02:44,879
any changes occur these changes will be

00:02:42,319 --> 00:02:47,920
applied to the kubernetes cluster

00:02:44,879 --> 00:02:49,920
the benefit for us to use githubs is to

00:02:47,920 --> 00:02:50,720
get rid of old-fashioned toolings like

00:02:49,920 --> 00:02:53,760
jenkins

00:02:50,720 --> 00:02:55,360
having complex ci cd pipelines and

00:02:53,760 --> 00:02:58,239
discussions within the teams

00:02:55,360 --> 00:03:01,599
who is responsible on which part of this

00:02:58,239 --> 00:03:04,959
complex cicd platform

00:03:01,599 --> 00:03:09,040
i set up the development teams to just

00:03:04,959 --> 00:03:12,239
be responsible by creating the new image

00:03:09,040 --> 00:03:14,080
for the service testing it and uploading

00:03:12,239 --> 00:03:16,239
the new docker image to the github

00:03:14,080 --> 00:03:19,840
container registry

00:03:16,239 --> 00:03:19,840
now let's dive into our workflow

00:03:20,159 --> 00:03:24,400
let's say one of our developers want to

00:03:22,879 --> 00:03:26,239
start creating a new feature

00:03:24,400 --> 00:03:27,519
the first thing he will do is to create

00:03:26,239 --> 00:03:30,799
a new feature branch

00:03:27,519 --> 00:03:32,000
and by doing this in behind a github

00:03:30,799 --> 00:03:34,640
action a very small

00:03:32,000 --> 00:03:36,959
one inside of the repository will be

00:03:34,640 --> 00:03:38,959
triggered by the oncreate event

00:03:36,959 --> 00:03:40,319
this one grabs the right informations

00:03:38,959 --> 00:03:42,480
out of the feature branch

00:03:40,319 --> 00:03:43,760
like the feature branch name and the

00:03:42,480 --> 00:03:45,760
project name

00:03:43,760 --> 00:03:47,120
and hands it over to a more centralized

00:03:45,760 --> 00:03:50,080
github action

00:03:47,120 --> 00:03:50,080
which takes these info

00:03:50,480 --> 00:03:56,720
grabs pulls the right flux cd repository

00:03:54,560 --> 00:03:59,680
where all the definitions for the

00:03:56,720 --> 00:04:01,599
live environment are in it takes the

00:03:59,680 --> 00:04:04,319
yummy files creates a copy

00:04:01,599 --> 00:04:06,560
replaces some values and pushes those

00:04:04,319 --> 00:04:10,720
new files back to the github

00:04:06,560 --> 00:04:14,400
flux cd repository by doing this

00:04:10,720 --> 00:04:17,600
now the flux cd service will notice

00:04:14,400 --> 00:04:19,519
oh there are some changes and these

00:04:17,600 --> 00:04:22,639
changes to the kubernetes cluster

00:04:19,519 --> 00:04:25,280
creating a new feature namespace

00:04:22,639 --> 00:04:27,759
and set up the kubernetes resources like

00:04:25,280 --> 00:04:30,160
secrets the configuration map

00:04:27,759 --> 00:04:32,000
and by doing this it tells the ham

00:04:30,160 --> 00:04:35,520
operator to deploy

00:04:32,000 --> 00:04:37,600
all services needed to run this new test

00:04:35,520 --> 00:04:41,199
environment

00:04:37,600 --> 00:04:44,400
these are the main features of our

00:04:41,199 --> 00:04:47,440
setup and to tell you about all

00:04:44,400 --> 00:04:48,479
all others features and look have a look

00:04:47,440 --> 00:04:52,720
into the code

00:04:48,479 --> 00:04:52,720
let's hand over to daniel daniel

00:04:55,040 --> 00:04:58,320
so thank you andreas

00:05:04,160 --> 00:05:11,840
and you want to share a screen

00:05:13,440 --> 00:05:19,919
and here we go so

00:05:16,720 --> 00:05:21,520
um now we will perform a demo of a life

00:05:19,919 --> 00:05:23,680
cycle of our feature branch and its

00:05:21,520 --> 00:05:25,600
corresponding phoenix environment

00:05:23,680 --> 00:05:27,919
and we do this from the perspective of a

00:05:25,600 --> 00:05:29,840
developer some looks behind the scene of

00:05:27,919 --> 00:05:30,960
the creation process for phoenix

00:05:29,840 --> 00:05:33,680
environment

00:05:30,960 --> 00:05:36,000
so first let's assume we got a ticket

00:05:33,680 --> 00:05:37,840
from our product owner

00:05:36,000 --> 00:05:40,160
to implement video embeds on our news

00:05:37,840 --> 00:05:44,000
page so our ticket has a number

00:05:40,160 --> 00:05:46,960
let's say it's abc -123 and that will be

00:05:44,000 --> 00:05:49,520
used as a label to identify our phoenix

00:05:46,960 --> 00:05:49,520
environment

00:05:50,080 --> 00:05:54,400
so first we start in the terminal and uh

00:05:53,199 --> 00:05:56,880
we are locked in and one of our

00:05:54,400 --> 00:05:59,280
kubernetes clusters and

00:05:56,880 --> 00:06:00,080
we will check if there still exists an

00:05:59,280 --> 00:06:03,440
environment

00:06:00,080 --> 00:06:06,880
with this label so

00:06:03,440 --> 00:06:07,520
we display all our available name spaces

00:06:06,880 --> 00:06:11,120
here

00:06:07,520 --> 00:06:13,280
as you can see there is no namespace

00:06:11,120 --> 00:06:16,560
uh for a phoenix environment with a

00:06:13,280 --> 00:06:20,960
label abc minus one two three

00:06:16,560 --> 00:06:24,960
so then we go over to the browser and

00:06:20,960 --> 00:06:28,400
we will have a look on the production

00:06:24,960 --> 00:06:30,560
state of our news page so

00:06:28,400 --> 00:06:31,759
as you can see there's just twitter

00:06:30,560 --> 00:06:34,240
embed

00:06:31,759 --> 00:06:36,479
but the product owner says he wants to

00:06:34,240 --> 00:06:40,080
have a video embed

00:06:36,479 --> 00:06:42,479
above the summary so as a developer i go

00:06:40,080 --> 00:06:46,840
to our code repository

00:06:42,479 --> 00:06:49,840
and make there some small changes on the

00:06:46,840 --> 00:06:49,840
code

00:06:54,080 --> 00:06:58,639
and i commit this on a branch with the

00:06:56,400 --> 00:06:58,639
name

00:07:00,840 --> 00:07:05,360
turn

00:07:02,160 --> 00:07:08,080
picture minus abc

00:07:05,360 --> 00:07:10,800
minus one two three and have a short

00:07:08,080 --> 00:07:10,800
description here

00:07:12,000 --> 00:07:18,240
so with a commit um to this branch

00:07:15,759 --> 00:07:19,919
we've triggered two actions in our

00:07:18,240 --> 00:07:22,560
project

00:07:19,919 --> 00:07:23,280
so the first one is the ci pipeline of

00:07:22,560 --> 00:07:26,800
our

00:07:23,280 --> 00:07:29,919
project look inside and

00:07:26,800 --> 00:07:33,199
what we see we built a docker image and

00:07:29,919 --> 00:07:36,240
push this to the github docker registry

00:07:33,199 --> 00:07:39,680
and we use the github api to create

00:07:36,240 --> 00:07:41,280
a deployment for our commit and set the

00:07:39,680 --> 00:07:44,560
state of this deployment

00:07:41,280 --> 00:07:47,520
to state queued so we will come back

00:07:44,560 --> 00:07:48,560
to this deployment later first we go to

00:07:47,520 --> 00:07:51,280
our

00:07:48,560 --> 00:07:51,280
second action

00:07:51,599 --> 00:07:55,520
and the second second action is a

00:07:53,520 --> 00:07:59,599
trigger for our creation process of the

00:07:55,520 --> 00:08:02,960
phoenix environment

00:07:59,599 --> 00:08:06,720
we just collect

00:08:02,960 --> 00:08:09,039
some informations about the

00:08:06,720 --> 00:08:10,080
phoenix environment we want to create

00:08:09,039 --> 00:08:13,680
and

00:08:10,080 --> 00:08:16,800
add this this data to a payload and

00:08:13,680 --> 00:08:19,919
create a dispatch workflow event

00:08:16,800 --> 00:08:23,440
for on the github api

00:08:19,919 --> 00:08:24,000
and with this event we trigger another

00:08:23,440 --> 00:08:27,759
action

00:08:24,000 --> 00:08:33,120
in our github flux cd

00:08:27,759 --> 00:08:33,120
project and this action

00:08:33,440 --> 00:08:37,360
takes the um the data from the workload

00:08:37,039 --> 00:08:40,640
as

00:08:37,360 --> 00:08:42,719
input parameters and then

00:08:40,640 --> 00:08:44,880
it checks out the repository and runs

00:08:42,719 --> 00:08:48,800
this group to create our phoenix

00:08:44,880 --> 00:08:50,800
and finally it pushes back the data

00:08:48,800 --> 00:08:52,480
the changed files to the github

00:08:50,800 --> 00:08:54,399
repository

00:08:52,480 --> 00:08:55,839
so let's have a closer look on this

00:08:54,399 --> 00:08:59,680
script

00:08:55,839 --> 00:09:03,120
we use here so let's create phoenix

00:08:59,680 --> 00:09:03,440
and first we start and make a copy of

00:09:03,120 --> 00:09:07,040
the

00:09:03,440 --> 00:09:10,000
production definition of our

00:09:07,040 --> 00:09:10,640
github demo project then use some tools

00:09:10,000 --> 00:09:14,080
like

00:09:10,640 --> 00:09:16,959
yammer query and in this case set

00:09:14,080 --> 00:09:18,640
customize these yummy files so we set

00:09:16,959 --> 00:09:21,040
the namespace for our phoenix

00:09:18,640 --> 00:09:22,240
and we add the phoenix name as a label

00:09:21,040 --> 00:09:25,279
to the urls

00:09:22,240 --> 00:09:28,880
of our project and finally we add

00:09:25,279 --> 00:09:28,880
the created files to it

00:09:30,080 --> 00:09:37,600
so the result you can see here

00:09:33,680 --> 00:09:40,640
we created a new folder for our

00:09:37,600 --> 00:09:44,399
demo application or phoenix

00:09:40,640 --> 00:09:47,600
demo application and then we switch over

00:09:44,399 --> 00:09:47,600
to the terminal again

00:09:47,680 --> 00:09:54,000
and let's see like fluxiv

00:09:50,880 --> 00:09:55,680
on its job so list the workspace the

00:09:54,000 --> 00:09:57,360
namespaces again

00:09:55,680 --> 00:09:59,839
and you can see github demo feature

00:09:57,360 --> 00:10:01,120
minus abc minus one to three namespaces

00:09:59,839 --> 00:10:05,839
created

00:10:01,120 --> 00:10:05,839
and we will look what's inside

00:10:25,279 --> 00:10:28,399
as you can see there are some parts and

00:10:27,200 --> 00:10:32,240
the service

00:10:28,399 --> 00:10:36,800
and you see our system is up and running

00:10:32,240 --> 00:10:40,640
and we go to the browser now

00:10:36,800 --> 00:10:42,480
so you can use this test for

00:10:40,640 --> 00:10:44,800
automated test scenarios at this

00:10:42,480 --> 00:10:46,959
environment like end-to-end tests or for

00:10:44,800 --> 00:10:50,240
manual tests of your qa department

00:10:46,959 --> 00:10:53,200
or your product owner or stakeholder can

00:10:50,240 --> 00:10:53,680
make some approvals here so we will

00:10:53,200 --> 00:10:55,839
adjust

00:10:53,680 --> 00:10:56,800
the url a little bit for this manual

00:10:55,839 --> 00:11:00,560
test so

00:10:56,800 --> 00:11:00,560
we are on a test cluster now and

00:11:01,040 --> 00:11:07,150
it's another feature

00:11:04,040 --> 00:11:07,150
[Music]

00:11:07,680 --> 00:11:14,399
as abc minus one two three label

00:11:11,279 --> 00:11:15,040
and fire so you see the same article

00:11:14,399 --> 00:11:19,120
here

00:11:15,040 --> 00:11:23,200
but we got some new elements here

00:11:19,120 --> 00:11:23,200
a video embed above the summary

00:11:24,480 --> 00:11:30,959
so then we go back to our github

00:11:28,079 --> 00:11:33,279
code repository and first i want to show

00:11:30,959 --> 00:11:33,279
you the

00:11:33,760 --> 00:11:37,680
the benefit of the deployments we have

00:11:35,440 --> 00:11:39,440
created in our ci process

00:11:37,680 --> 00:11:40,880
so you can see a list of the

00:11:39,440 --> 00:11:44,320
environments of

00:11:40,880 --> 00:11:47,120
all the of all environments you have

00:11:44,320 --> 00:11:48,000
deployed your application to you can see

00:11:47,120 --> 00:11:51,279
here our

00:11:48,000 --> 00:11:54,320
new created phoenix environment

00:11:51,279 --> 00:11:57,120
go in there see okay this commit was

00:11:54,320 --> 00:11:58,480
deployed here and there's another

00:11:57,120 --> 00:12:01,360
benefit

00:11:58,480 --> 00:12:03,120
you see in the main environment you also

00:12:01,360 --> 00:12:04,639
get a history of all your deployments

00:12:03,120 --> 00:12:05,200
there and the final state they have

00:12:04,639 --> 00:12:08,000
reached

00:12:05,200 --> 00:12:11,760
so audio we're inactive and the new one

00:12:08,000 --> 00:12:15,200
is active here

00:12:11,760 --> 00:12:18,079
so then we finally reached the end of

00:12:15,200 --> 00:12:20,480
the life cycle of our feature branch

00:12:18,079 --> 00:12:22,240
so usually we want to go here and say

00:12:20,480 --> 00:12:24,399
okay we make a pull request

00:12:22,240 --> 00:12:26,720
then we merge this progress to the

00:12:24,399 --> 00:12:30,399
master or main branch now

00:12:26,720 --> 00:12:33,040
and then we delete

00:12:30,399 --> 00:12:34,160
our feature branch so for the demo we

00:12:33,040 --> 00:12:38,560
just

00:12:34,160 --> 00:12:40,399
just delete it

00:12:38,560 --> 00:12:44,240
and with this deletion we triggered a

00:12:40,399 --> 00:12:47,920
new action for deleting a phoenix

00:12:44,240 --> 00:12:50,800
you look inside it's similar the same as

00:12:47,920 --> 00:12:52,880
uh on the creation creating creating

00:12:50,800 --> 00:12:55,839
process of our phoenix

00:12:52,880 --> 00:12:56,800
so we collect some informations create a

00:12:55,839 --> 00:13:00,800
payload of this

00:12:56,800 --> 00:13:04,839
and make a workflow dispatch event

00:13:00,800 --> 00:13:07,040
and what we also do here is right

00:13:04,839 --> 00:13:09,519
back we remove

00:13:07,040 --> 00:13:12,320
all the deployments we have created for

00:13:09,519 --> 00:13:14,560
this phoenix environment

00:13:12,320 --> 00:13:15,839
so that's the first one we see here the

00:13:14,560 --> 00:13:19,200
environment is gone

00:13:15,839 --> 00:13:22,880
so we need it anymore and then we go to

00:13:19,200 --> 00:13:25,440
our flux cd repository and

00:13:22,880 --> 00:13:28,480
here's also an action triggered for

00:13:25,440 --> 00:13:28,480
destroying the phoenix

00:13:31,680 --> 00:13:38,000
so nearly nearly the same as creating

00:13:35,680 --> 00:13:39,680
so you check out our repository run a

00:13:38,000 --> 00:13:41,680
script for destroying the phoenix and

00:13:39,680 --> 00:13:45,199
then push back the

00:13:41,680 --> 00:13:48,000
changed files to github

00:13:45,199 --> 00:13:50,240
also have a look at the script we use

00:13:48,000 --> 00:13:50,240
here

00:13:51,279 --> 00:13:55,920
that it's short script just removing a

00:13:53,680 --> 00:13:59,680
folder from our

00:13:55,920 --> 00:14:03,680
project and if it's work

00:13:59,680 --> 00:14:07,920
you can see it here let's remove there

00:14:03,680 --> 00:14:10,880
so then we can go back to the terminal

00:14:07,920 --> 00:14:11,600
clear it and then flux should have

00:14:10,880 --> 00:14:15,519
removed

00:14:11,600 --> 00:14:19,040
our namespace here so

00:14:15,519 --> 00:14:22,079
and we have removed the namespace and so

00:14:19,040 --> 00:14:24,320
we finally reached

00:14:22,079 --> 00:14:24,320
the

00:14:25,920 --> 00:14:30,160
the end of the lifecycle of our demo

00:14:28,079 --> 00:14:34,320
project and

00:14:30,160 --> 00:14:38,880
also of our demo

00:14:34,320 --> 00:14:45,839
and we go back to andreas and

00:14:38,880 --> 00:14:45,839
our slides

00:14:52,320 --> 00:14:56,000
okay thanks daniel

00:14:56,839 --> 00:15:03,440
so let's go to our last slide

00:15:00,800 --> 00:15:03,440
here we are

00:15:04,480 --> 00:15:06,800
okay

00:15:08,240 --> 00:15:14,160
okay so let's sum up what we achieved

00:15:12,000 --> 00:15:16,639
we achieved to have a setup with less

00:15:14,160 --> 00:15:19,120
than 200 lines of code

00:15:16,639 --> 00:15:19,839
and with this setup which is very

00:15:19,120 --> 00:15:22,800
dynamic

00:15:19,839 --> 00:15:24,000
we can your many product projects and

00:15:22,800 --> 00:15:26,399
services

00:15:24,000 --> 00:15:27,360
it's completely automated and it's

00:15:26,399 --> 00:15:30,399
completely

00:15:27,360 --> 00:15:31,920
close to a production and which

00:15:30,399 --> 00:15:35,440
technologies are we using

00:15:31,920 --> 00:15:37,120
we're using kubernetes fluxity and out

00:15:35,440 --> 00:15:38,320
of the github tool chain we are using

00:15:37,120 --> 00:15:41,120
github actions

00:15:38,320 --> 00:15:41,920
the container registry the deployment

00:15:41,120 --> 00:15:45,440
api

00:15:41,920 --> 00:15:52,000
and the repositories that having said

00:15:45,440 --> 00:15:52,000

YouTube URL: https://www.youtube.com/watch?v=uYAE-jBBn-I


