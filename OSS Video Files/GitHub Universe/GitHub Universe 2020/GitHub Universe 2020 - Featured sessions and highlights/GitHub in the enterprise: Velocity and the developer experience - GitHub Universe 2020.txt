Title: GitHub in the enterprise: Velocity and the developer experience - GitHub Universe 2020
Publication date: 2020-12-09
Playlist: GitHub Universe 2020 - Featured sessions and highlights
Description: 
	Presented by Erica Brescia, COO, GitHub

The ability to quickly deliver secure, high quality software is critical to remaining competitive in virtually any market. Enterprises of all sizes are looking for ways to create an advantage and GitHub has a simple formula for success. Join Erica Brescia, COO, to hear how GitHub is helping enterprises increase velocity by focusing on the developer experience.

For more from GitHub Universe 2020, visit https://githubuniverse.com

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:06,799 --> 00:00:10,080
hello and thanks to all of you for

00:00:08,400 --> 00:00:11,280
joining us back here for day two of

00:00:10,080 --> 00:00:13,360
github universe

00:00:11,280 --> 00:00:14,559
what a fantastic first day we had

00:00:13,360 --> 00:00:16,560
yesterday

00:00:14,559 --> 00:00:19,039
we showed you how to ship even faster

00:00:16,560 --> 00:00:21,119
with auto merge on pull requests

00:00:19,039 --> 00:00:22,240
actions has a brand new workflow

00:00:21,119 --> 00:00:24,560
visualizer

00:00:22,240 --> 00:00:25,359
protected environments and deployment

00:00:24,560 --> 00:00:28,640
approvals

00:00:25,359 --> 00:00:31,039
making it a full-featured ci cd platform

00:00:28,640 --> 00:00:33,120
we announced corporate sponsors enabling

00:00:31,039 --> 00:00:35,360
organizations to help support the open

00:00:33,120 --> 00:00:37,920
source projects they rely on

00:00:35,360 --> 00:00:39,760
github enterprise server 3.0 is coming

00:00:37,920 --> 00:00:41,200
soon with full support for the tools

00:00:39,760 --> 00:00:44,160
that developers love

00:00:41,200 --> 00:00:45,520
actions packages code scanning and more

00:00:44,160 --> 00:00:47,200
and last but not least

00:00:45,520 --> 00:00:49,440
what i know many of you are excited

00:00:47,200 --> 00:00:51,199
about we unveiled dark mode for

00:00:49,440 --> 00:00:53,600
github.com

00:00:51,199 --> 00:00:55,760
as nat said yesterday delivering the

00:00:53,600 --> 00:00:57,520
best possible developer experience is at

00:00:55,760 --> 00:00:59,680
the heart of everything we do

00:00:57,520 --> 00:01:01,199
it drives every feature we ship every

00:00:59,680 --> 00:01:03,199
decision we make

00:01:01,199 --> 00:01:04,799
we draw in our own experience using

00:01:03,199 --> 00:01:06,960
github to build github

00:01:04,799 --> 00:01:07,920
as well as the experience that you our

00:01:06,960 --> 00:01:10,320
community has

00:01:07,920 --> 00:01:12,640
every day on the platform while we have

00:01:10,320 --> 00:01:14,560
incredibly talented people on our team

00:01:12,640 --> 00:01:16,080
their creativity can never match the

00:01:14,560 --> 00:01:18,400
collective knowledge and the skill of

00:01:16,080 --> 00:01:20,320
the global developer community

00:01:18,400 --> 00:01:22,960
as the home to so many of the world's

00:01:20,320 --> 00:01:25,040
developers we tap into emerging trends

00:01:22,960 --> 00:01:26,400
and best practices to build the platform

00:01:25,040 --> 00:01:28,080
for all developers

00:01:26,400 --> 00:01:30,640
with the goal of making their lives

00:01:28,080 --> 00:01:32,640
easier with each and every new ship

00:01:30,640 --> 00:01:34,640
at the end of the day that means helping

00:01:32,640 --> 00:01:36,560
developers do what they do best

00:01:34,640 --> 00:01:38,960
it means removing distractions and

00:01:36,560 --> 00:01:39,759
automating away as many mundane tasks as

00:01:38,960 --> 00:01:41,600
possible

00:01:39,759 --> 00:01:43,840
so that developers can focus on their

00:01:41,600 --> 00:01:45,439
craft and have an awesome experience

00:01:43,840 --> 00:01:47,360
doing it

00:01:45,439 --> 00:01:49,200
we talk to developers all the time and

00:01:47,360 --> 00:01:50,159
we also hear from businesses of all

00:01:49,200 --> 00:01:52,079
sizes

00:01:50,159 --> 00:01:53,759
everyone wants to improve their ability

00:01:52,079 --> 00:01:55,920
to deliver software

00:01:53,759 --> 00:01:56,960
in our experience for businesses it's

00:01:55,920 --> 00:01:58,880
fairly simple

00:01:56,960 --> 00:02:01,200
you accelerate velocity and improve

00:01:58,880 --> 00:02:01,920
quality and end up with a happier team

00:02:01,200 --> 00:02:04,799
to boot

00:02:01,920 --> 00:02:06,719
by focusing on the developer experience

00:02:04,799 --> 00:02:09,039
so what does that really mean

00:02:06,719 --> 00:02:11,280
a great developer experience boils down

00:02:09,039 --> 00:02:13,760
to three key components

00:02:11,280 --> 00:02:15,440
first developer workflow including

00:02:13,760 --> 00:02:17,520
frictionless collaboration and

00:02:15,440 --> 00:02:19,440
automating manual tasks so developers

00:02:17,520 --> 00:02:21,599
can stay in flow

00:02:19,440 --> 00:02:23,440
second developer focus security and

00:02:21,599 --> 00:02:24,720
compliance to take the worry and risk

00:02:23,440 --> 00:02:27,040
away from developers

00:02:24,720 --> 00:02:27,840
and allow them to focus on their work

00:02:27,040 --> 00:02:29,920
and finally

00:02:27,840 --> 00:02:31,120
platform reliability to ensure your

00:02:29,920 --> 00:02:33,440
platform is scalable

00:02:31,120 --> 00:02:36,480
resilient and available whenever your

00:02:33,440 --> 00:02:39,280
developers need to use it

00:02:36,480 --> 00:02:41,599
so let's talk about developer workflow

00:02:39,280 --> 00:02:43,440
github centralizes your workflows around

00:02:41,599 --> 00:02:44,319
your developers around the software they

00:02:43,440 --> 00:02:46,400
build

00:02:44,319 --> 00:02:48,560
most developers just want to write great

00:02:46,400 --> 00:02:51,360
code and for it to have an impact

00:02:48,560 --> 00:02:52,800
ci cd testing issue management

00:02:51,360 --> 00:02:55,040
refactoring and so on

00:02:52,800 --> 00:02:56,560
are seen by many developers as more of

00:02:55,040 --> 00:02:58,239
an annoyance that gets in the way and

00:02:56,560 --> 00:03:00,560
interrupts their flow

00:02:58,239 --> 00:03:02,480
according to research by uc irvine and

00:03:00,560 --> 00:03:04,959
humboldt university in germany

00:03:02,480 --> 00:03:06,800
it takes an average of 23 minutes to

00:03:04,959 --> 00:03:09,360
enter an optimal creative state

00:03:06,800 --> 00:03:10,800
or what we call flow or to re-enter it

00:03:09,360 --> 00:03:12,879
after a distraction

00:03:10,800 --> 00:03:14,560
so staying in flow is critical for

00:03:12,879 --> 00:03:16,800
developer productivity

00:03:14,560 --> 00:03:18,879
it also just feels good to be cranking

00:03:16,800 --> 00:03:21,599
away at something with deep focus

00:03:18,879 --> 00:03:23,840
i know i certainly love that feeling the

00:03:21,599 --> 00:03:25,760
intuitive collaboration and automation

00:03:23,840 --> 00:03:27,440
features we've built into github help

00:03:25,760 --> 00:03:30,480
developers stay in flow

00:03:27,440 --> 00:03:32,080
allowing your team to do so much more to

00:03:30,480 --> 00:03:34,799
put some numbers around this

00:03:32,080 --> 00:03:37,040
the 2019 dora report found that elite

00:03:34,799 --> 00:03:39,280
and high performing devops teams

00:03:37,040 --> 00:03:41,360
are automating significantly more work

00:03:39,280 --> 00:03:44,360
than low-performing teams

00:03:41,360 --> 00:03:47,440
in fact these elite teams are delivering

00:03:44,360 --> 00:03:48,799
208 times more frequent code deployments

00:03:47,440 --> 00:03:51,080
than those who aren't

00:03:48,799 --> 00:03:52,560
their lead time from commit to deploy is

00:03:51,080 --> 00:03:55,120
106 times

00:03:52,560 --> 00:03:58,640
faster and they recover from incidents

00:03:55,120 --> 00:04:00,799
over 2 600 times more quickly

00:03:58,640 --> 00:04:02,480
automation not only increases the time

00:04:00,799 --> 00:04:04,640
developers spend on code

00:04:02,480 --> 00:04:06,480
but also makes their jobs easier because

00:04:04,640 --> 00:04:07,760
they're able to minimize distractions

00:04:06,480 --> 00:04:09,439
and stay in flow

00:04:07,760 --> 00:04:11,439
focused on work that's driven by

00:04:09,439 --> 00:04:14,480
creativity and collaboration

00:04:11,439 --> 00:04:16,000
instead of redundancy and interruptions

00:04:14,480 --> 00:04:17,759
github defined one of the most

00:04:16,000 --> 00:04:19,359
foundational code collaboration

00:04:17,759 --> 00:04:20,400
workflows when we created the github

00:04:19,359 --> 00:04:22,320
pull request

00:04:20,400 --> 00:04:24,720
providing an interface and workflow for

00:04:22,320 --> 00:04:25,600
sharing suggesting and reviewing code

00:04:24,720 --> 00:04:28,560
changes throughout

00:04:25,600 --> 00:04:30,560
open source and private repos prior to

00:04:28,560 --> 00:04:32,639
the pull request developers literally

00:04:30,560 --> 00:04:34,479
emailed their disks to one another you

00:04:32,639 --> 00:04:36,080
had to hope the person on the other side

00:04:34,479 --> 00:04:36,720
knew what to do with your code and what

00:04:36,080 --> 00:04:39,520
it did

00:04:36,720 --> 00:04:40,720
before you could even attempt to merge

00:04:39,520 --> 00:04:42,560
that one feature

00:04:40,720 --> 00:04:44,560
set the benchmark for how we approach

00:04:42,560 --> 00:04:46,560
supporting developer workflows

00:04:44,560 --> 00:04:47,680
start with highly repetitive developer

00:04:46,560 --> 00:04:50,080
tasks make them

00:04:47,680 --> 00:04:51,840
significantly easier and a joy to use

00:04:50,080 --> 00:04:54,160
and iterate from there

00:04:51,840 --> 00:04:56,240
for example yesterday we announced the

00:04:54,160 --> 00:04:59,120
latest feature on top of pull requests

00:04:56,240 --> 00:05:01,120
auto merge auto merge accelerates time

00:04:59,120 --> 00:05:02,320
to merge and allows more work to happen

00:05:01,120 --> 00:05:04,240
in parallel

00:05:02,320 --> 00:05:06,160
no more time spent tracking down pull

00:05:04,240 --> 00:05:08,160
request authors updating out of date

00:05:06,160 --> 00:05:10,479
branches and waiting for tests to pass

00:05:08,160 --> 00:05:12,560
just so you can click the merge button

00:05:10,479 --> 00:05:14,400
once all requirements are met your pr

00:05:12,560 --> 00:05:17,039
can merge rebase or squash

00:05:14,400 --> 00:05:18,880
automatically so the developer who is

00:05:17,039 --> 00:05:21,199
waiting to go back and merge the pr

00:05:18,880 --> 00:05:23,120
herself auto merge is handling that for

00:05:21,199 --> 00:05:23,520
her now and she's already writing more

00:05:23,120 --> 00:05:25,280
code

00:05:23,520 --> 00:05:27,199
opening another pr creating a new

00:05:25,280 --> 00:05:28,000
release or pairing with another

00:05:27,199 --> 00:05:30,000
developer

00:05:28,000 --> 00:05:31,360
for developers this is hopefully a

00:05:30,000 --> 00:05:33,600
finely moment

00:05:31,360 --> 00:05:35,360
for enterprises now you can just set

00:05:33,600 --> 00:05:36,240
consistent requirements across your

00:05:35,360 --> 00:05:38,639
organization

00:05:36,240 --> 00:05:40,320
for merging pull requests and instead of

00:05:38,639 --> 00:05:41,440
a developer having to come back and

00:05:40,320 --> 00:05:44,160
merge each one

00:05:41,440 --> 00:05:46,560
we do it for you and all of those auto

00:05:44,160 --> 00:05:48,560
merge pr's will have universally applied

00:05:46,560 --> 00:05:50,240
security and compliance review

00:05:48,560 --> 00:05:52,240
reducing security risks and the

00:05:50,240 --> 00:05:54,000
potential for human error

00:05:52,240 --> 00:05:56,080
all while allowing your developers to

00:05:54,000 --> 00:05:57,919
focus their energy on work that truly

00:05:56,080 --> 00:05:59,840
adds value

00:05:57,919 --> 00:06:01,680
improving workflow isn't about one

00:05:59,840 --> 00:06:03,520
feature capability though

00:06:01,680 --> 00:06:05,680
keeping developers focused on high

00:06:03,520 --> 00:06:07,520
impact work extends to every facet of

00:06:05,680 --> 00:06:09,440
the developer experience

00:06:07,520 --> 00:06:11,039
we're helping developers stay connected

00:06:09,440 --> 00:06:13,360
and productive with our native github

00:06:11,039 --> 00:06:15,120
mobile apps for ios and android

00:06:13,360 --> 00:06:17,199
need to merge a pr but you're away from

00:06:15,120 --> 00:06:18,240
your desk just swipe to merge on your

00:06:17,199 --> 00:06:20,880
phone

00:06:18,240 --> 00:06:22,720
with github code spaces developers get a

00:06:20,880 --> 00:06:24,400
fully featured cloud-hosted dev

00:06:22,720 --> 00:06:26,000
environment that spins up in minutes

00:06:24,400 --> 00:06:27,759
directly within github

00:06:26,000 --> 00:06:30,319
so they can start contributing to a

00:06:27,759 --> 00:06:32,800
project or switch between projects

00:06:30,319 --> 00:06:34,720
without delay codespaces dramatically

00:06:32,800 --> 00:06:36,720
reduces the overhead of managing dev

00:06:34,720 --> 00:06:38,720
environments and switching contexts

00:06:36,720 --> 00:06:40,160
allowing developers to stay in flow and

00:06:38,720 --> 00:06:42,160
focus on the code

00:06:40,160 --> 00:06:44,319
it saves companies time in running

00:06:42,160 --> 00:06:45,919
managing and overseeing hardware across

00:06:44,319 --> 00:06:48,000
your developer environment

00:06:45,919 --> 00:06:49,919
that's all running in the cloud now it

00:06:48,000 --> 00:06:51,520
gives your developers flexibility and

00:06:49,919 --> 00:06:52,880
drives collaboration within your

00:06:51,520 --> 00:06:54,720
organization

00:06:52,880 --> 00:06:56,560
teammates can jump in quickly to work

00:06:54,720 --> 00:06:58,639
with others on a project even when they

00:06:56,560 --> 00:07:00,240
only have a limited amount of time

00:06:58,639 --> 00:07:02,080
just spin up an environment in an

00:07:00,240 --> 00:07:04,560
instant and they're good to go

00:07:02,080 --> 00:07:06,479
and it simplifies access eliminating

00:07:04,560 --> 00:07:07,759
reliance on institutional knowledge or

00:07:06,479 --> 00:07:09,360
specific individuals

00:07:07,759 --> 00:07:11,840
and ensuring the work can be done

00:07:09,360 --> 00:07:14,639
whenever and by whomever is needed

00:07:11,840 --> 00:07:16,000
from an i.t perspective codespaces also

00:07:14,639 --> 00:07:18,479
reduces the amount of time

00:07:16,000 --> 00:07:20,400
and effort spent on fleet management by

00:07:18,479 --> 00:07:22,240
shifting dev environments the cloud

00:07:20,400 --> 00:07:23,840
there's no longer a need to provision

00:07:22,240 --> 00:07:25,199
and maintain developer environments on

00:07:23,840 --> 00:07:27,199
local machines

00:07:25,199 --> 00:07:28,880
this also has the potential of reducing

00:07:27,199 --> 00:07:29,599
the hardware requirements for your dev

00:07:28,880 --> 00:07:31,280
boxes

00:07:29,599 --> 00:07:33,680
as the amount of processing actually

00:07:31,280 --> 00:07:35,440
happening locally is minimal

00:07:33,680 --> 00:07:36,960
great software development workflows

00:07:35,440 --> 00:07:38,479
include more than developers and they

00:07:36,960 --> 00:07:39,280
don't stop when the human leaves the

00:07:38,479 --> 00:07:41,840
room

00:07:39,280 --> 00:07:43,440
great workflows do the work for you they

00:07:41,840 --> 00:07:45,520
bring in the right people at the right

00:07:43,440 --> 00:07:46,800
time they fail intelligently and they

00:07:45,520 --> 00:07:48,319
self-monitor

00:07:46,800 --> 00:07:50,080
that's how you increase developer

00:07:48,319 --> 00:07:52,800
velocity through smart

00:07:50,080 --> 00:07:54,639
interconnected workflows and while we're

00:07:52,800 --> 00:07:55,759
building those capabilities into code

00:07:54,639 --> 00:07:58,000
heavy workflows

00:07:55,759 --> 00:07:59,360
we're also building this philosophy into

00:07:58,000 --> 00:08:01,360
your infrastructure

00:07:59,360 --> 00:08:03,840
i'm talking about automation and

00:08:01,360 --> 00:08:05,919
particularly the increasingly powerful

00:08:03,840 --> 00:08:07,759
github actions

00:08:05,919 --> 00:08:09,919
yesterday we announced the launch of

00:08:07,759 --> 00:08:12,080
github enterprise server 3.0

00:08:09,919 --> 00:08:13,759
a release i'm particularly excited about

00:08:12,080 --> 00:08:14,800
because it delivers features such as

00:08:13,759 --> 00:08:16,720
code scanning

00:08:14,800 --> 00:08:18,560
packages and actions the community

00:08:16,720 --> 00:08:21,120
standard for workflow automation

00:08:18,560 --> 00:08:22,960
to our self-hosted product github

00:08:21,120 --> 00:08:25,360
enterprise server customers now have

00:08:22,960 --> 00:08:26,400
access to powerful ci cd and automation

00:08:25,360 --> 00:08:28,319
capabilities

00:08:26,400 --> 00:08:29,919
built into github and housed directly

00:08:28,319 --> 00:08:32,320
next to their code

00:08:29,919 --> 00:08:34,640
in less than a year actions has become

00:08:32,320 --> 00:08:37,120
the number one ci solution on github in

00:08:34,640 --> 00:08:39,519
both public and private repositories

00:08:37,120 --> 00:08:41,440
but that's just where it starts across

00:08:39,519 --> 00:08:43,519
all open source repositories

00:08:41,440 --> 00:08:46,560
repos that use actions on pull request

00:08:43,519 --> 00:08:48,399
cprs merge 1.2 times faster

00:08:46,560 --> 00:08:50,160
and the number of merged prs increased

00:08:48,399 --> 00:08:53,519
by 1.3 x

00:08:50,160 --> 00:08:55,760
that's 34 more poll requests merged

00:08:53,519 --> 00:08:57,360
this is huge in terms of improving

00:08:55,760 --> 00:08:59,360
developer velocity

00:08:57,360 --> 00:09:01,680
and the scales exponentially with your

00:08:59,360 --> 00:09:03,440
team according to 3m

00:09:01,680 --> 00:09:06,160
building with github allowed them to go

00:09:03,440 --> 00:09:09,519
from 400 deployments in 60 days

00:09:06,160 --> 00:09:12,800
to 6 000 deployments that's a 15

00:09:09,519 --> 00:09:14,880
times increase in ships the open source

00:09:12,800 --> 00:09:16,640
community including teams and companies

00:09:14,880 --> 00:09:17,360
around the world has come together to

00:09:16,640 --> 00:09:19,440
build

00:09:17,360 --> 00:09:21,519
share and improve on actions that

00:09:19,440 --> 00:09:24,000
simplify workflow automation

00:09:21,519 --> 00:09:25,680
there are now over 6 000 community

00:09:24,000 --> 00:09:27,600
actions in the marketplace

00:09:25,680 --> 00:09:29,600
helping developers automate everything

00:09:27,600 --> 00:09:31,519
from testing to incident management to

00:09:29,600 --> 00:09:33,519
kubernetes deployments

00:09:31,519 --> 00:09:36,480
as with any other code you can fork and

00:09:33,519 --> 00:09:37,839
modify actions to meet your needs then

00:09:36,480 --> 00:09:40,399
share them with others so they can

00:09:37,839 --> 00:09:42,399
continue to iterate on what you've built

00:09:40,399 --> 00:09:44,320
a number of github partners are creating

00:09:42,399 --> 00:09:46,000
what we call verified actions which

00:09:44,320 --> 00:09:48,640
means that we have verified the source

00:09:46,000 --> 00:09:50,320
the actions your organization is using

00:09:48,640 --> 00:09:52,800
let's check out some demos from our

00:09:50,320 --> 00:09:52,800
partners

00:09:52,959 --> 00:09:57,200
at servicenow we're excited to announce

00:09:55,839 --> 00:10:00,399
our newly published

00:09:57,200 --> 00:10:02,000
servicenow cicd github actions as part

00:10:00,399 --> 00:10:04,160
of our ongoing commitment to the

00:10:02,000 --> 00:10:06,240
servicenow developer experience

00:10:04,160 --> 00:10:07,839
these new actions help developers

00:10:06,240 --> 00:10:10,160
quickly set up and configure

00:10:07,839 --> 00:10:11,519
ci cd pipelines for apps built on the

00:10:10,160 --> 00:10:14,480
now platform using

00:10:11,519 --> 00:10:15,920
github to accelerate app delivery we'll

00:10:14,480 --> 00:10:18,000
start by creating an

00:10:15,920 --> 00:10:19,360
actions workflow for an app linked to

00:10:18,000 --> 00:10:21,279
our github repo

00:10:19,360 --> 00:10:24,000
using the example template built on the

00:10:21,279 --> 00:10:26,399
newly published github actions

00:10:24,000 --> 00:10:27,360
next we'll set up secrets for this

00:10:26,399 --> 00:10:29,200
github repo

00:10:27,360 --> 00:10:32,640
including credentials for service

00:10:29,200 --> 00:10:34,959
accounts and other workflow variables

00:10:32,640 --> 00:10:36,079
then check out a feature branch in our

00:10:34,959 --> 00:10:38,800
dev instance using

00:10:36,079 --> 00:10:41,440
studio the built-in ide and then make

00:10:38,800 --> 00:10:41,440
some commits

00:10:42,560 --> 00:10:47,200
after that we create a pull request and

00:10:45,279 --> 00:10:49,839
watch our first ci build get

00:10:47,200 --> 00:10:50,640
triggered automatically when our build

00:10:49,839 --> 00:10:53,120
passes

00:10:50,640 --> 00:10:54,880
we'll merge our pull request and confirm

00:10:53,120 --> 00:10:56,399
that the push to our main branch

00:10:54,880 --> 00:10:58,160
triggered a release build

00:10:56,399 --> 00:10:59,839
which automatically validates and

00:10:58,160 --> 00:11:00,959
deploys our app to our production

00:10:59,839 --> 00:11:03,680
instance

00:11:00,959 --> 00:11:04,959
and that's how easy it is to get started

00:11:03,680 --> 00:11:07,680
with ci cd

00:11:04,959 --> 00:11:08,800
for now platform app development for a

00:11:07,680 --> 00:11:10,800
full demo

00:11:08,800 --> 00:11:12,079
visit our landing page on the github

00:11:10,800 --> 00:11:14,079
universe site

00:11:12,079 --> 00:11:15,680
take advantage of streamlining your

00:11:14,079 --> 00:11:18,880
development workflow today

00:11:15,680 --> 00:11:22,640
with servicenow cicd github actions

00:11:18,880 --> 00:11:24,959
published on the github marketplace

00:11:22,640 --> 00:11:26,000
hi i'm abelash i'm a product manager at

00:11:24,959 --> 00:11:28,079
datadog

00:11:26,000 --> 00:11:29,519
datadog is a full stack observability

00:11:28,079 --> 00:11:31,440
and security platform

00:11:29,519 --> 00:11:32,959
we have over 400 integrations so that

00:11:31,440 --> 00:11:35,120
developers can monitor their stacks

00:11:32,959 --> 00:11:36,800
without manual instrumentation

00:11:35,120 --> 00:11:38,800
we recently launched an integration that

00:11:36,800 --> 00:11:40,079
provides cv analysis from our continuous

00:11:38,800 --> 00:11:42,160
profiler

00:11:40,079 --> 00:11:44,160
the data.continuous profiler provides

00:11:42,160 --> 00:11:45,760
method level spans that provide insights

00:11:44,160 --> 00:11:48,800
on which parts of your code base

00:11:45,760 --> 00:11:51,279
run how often and for how long

00:11:48,800 --> 00:11:52,800
a cve analysis or common vulnerabilities

00:11:51,279 --> 00:11:54,880
and exposures analysis

00:11:52,800 --> 00:11:56,720
provides insight on what vulnerabilities

00:11:54,880 --> 00:11:58,880
exist in your application

00:11:56,720 --> 00:12:00,639
but vulnerabilities are everywhere that

00:11:58,880 --> 00:12:01,680
doesn't mean each vulnerability is even

00:12:00,639 --> 00:12:03,680
exploitable

00:12:01,680 --> 00:12:05,040
they also come in many flavors for

00:12:03,680 --> 00:12:06,160
example it could be a library in your

00:12:05,040 --> 00:12:08,320
container image repo

00:12:06,160 --> 00:12:10,000
or a package that you don't really call

00:12:08,320 --> 00:12:10,560
there are many ways for them to exist in

00:12:10,000 --> 00:12:12,959
your app

00:12:10,560 --> 00:12:14,800
but not be relevant what you really need

00:12:12,959 --> 00:12:16,079
to care about is which vulnerabilities

00:12:14,800 --> 00:12:18,959
are invoked in production

00:12:16,079 --> 00:12:20,480
and are exposed to user traffic our new

00:12:18,959 --> 00:12:22,240
integration provides a way to map the

00:12:20,480 --> 00:12:22,800
vulnerabilities with how often they're

00:12:22,240 --> 00:12:25,120
invoked

00:12:22,800 --> 00:12:27,040
and from which parts for example here's

00:12:25,120 --> 00:12:29,760
a time series view of how often some of

00:12:27,040 --> 00:12:31,680
these vulnerabilities are invoked

00:12:29,760 --> 00:12:34,079
now to get this working customers need

00:12:31,680 --> 00:12:35,519
to first create a dependency graph

00:12:34,079 --> 00:12:36,880
this creates a mapping between the

00:12:35,519 --> 00:12:38,800
customer's application and the

00:12:36,880 --> 00:12:40,560
vulnerability database

00:12:38,800 --> 00:12:42,320
once this is generated they then need to

00:12:40,560 --> 00:12:44,160
upload this dependency graph to datadock

00:12:42,320 --> 00:12:45,920
for the actual analysis

00:12:44,160 --> 00:12:48,079
this workflow creates some onboarding

00:12:45,920 --> 00:12:48,560
friction the easiest way to reduce this

00:12:48,079 --> 00:12:51,680
friction

00:12:48,560 --> 00:12:53,440
is to automate today we're excited to

00:12:51,680 --> 00:12:55,600
announce the launch of datadog's first

00:12:53,440 --> 00:12:57,279
github action on the marketplace

00:12:55,600 --> 00:12:59,279
with this new github action we can

00:12:57,279 --> 00:13:00,079
easily onboard with our cve analysis

00:12:59,279 --> 00:13:01,839
workflow

00:13:00,079 --> 00:13:03,600
it's also easy to add to your ci cd

00:13:01,839 --> 00:13:04,959
pipeline and keep the cve analysis

00:13:03,600 --> 00:13:06,880
updated

00:13:04,959 --> 00:13:08,560
here's a quick demo we have a sample

00:13:06,880 --> 00:13:10,959
application here with a workflow

00:13:08,560 --> 00:13:11,760
the workflow has several steps the first

00:13:10,959 --> 00:13:13,839
couple of steps

00:13:11,760 --> 00:13:15,680
invokes other github actions in order to

00:13:13,839 --> 00:13:16,560
set up your environment this is easily

00:13:15,680 --> 00:13:18,320
done

00:13:16,560 --> 00:13:20,399
next we use the environment variables to

00:13:18,320 --> 00:13:23,040
parse and store the deployment version

00:13:20,399 --> 00:13:25,279
we then call our github action this runs

00:13:23,040 --> 00:13:26,079
a series of scripts and requires no user

00:13:25,279 --> 00:13:28,000
input

00:13:26,079 --> 00:13:29,360
if it notices a new deployment version

00:13:28,000 --> 00:13:30,959
it generates and uploads a new

00:13:29,360 --> 00:13:33,120
dependency graph

00:13:30,959 --> 00:13:35,519
here's a data flow whenever there's a

00:13:33,120 --> 00:13:37,279
code merge the ci cd pipeline takes over

00:13:35,519 --> 00:13:38,639
if all the tests pass the action is

00:13:37,279 --> 00:13:40,240
invoked this

00:13:38,639 --> 00:13:41,760
then generates and uploads a new

00:13:40,240 --> 00:13:43,839
dependency graph and kicks off the

00:13:41,760 --> 00:13:46,160
datadoc cv analysis process

00:13:43,839 --> 00:13:47,120
the cve data is updated based on a new

00:13:46,160 --> 00:13:48,560
dependency graph

00:13:47,120 --> 00:13:51,279
this keeps the cv analysis data

00:13:48,560 --> 00:13:53,199
synchronized with new deployments

00:13:51,279 --> 00:13:54,720
with github actions we were able to

00:13:53,199 --> 00:13:55,600
reduce the onboarding friction for this

00:13:54,720 --> 00:13:57,199
workflow

00:13:55,600 --> 00:13:59,040
customers can now get access to an

00:13:57,199 --> 00:14:00,000
end-to-end cv analysis with just a few

00:13:59,040 --> 00:14:01,600
clicks

00:14:00,000 --> 00:14:03,760
we were also able to solve this problem

00:14:01,600 --> 00:14:05,279
faster by leaning on github actions

00:14:03,760 --> 00:14:07,360
rather than changing our application

00:14:05,279 --> 00:14:09,040
code this is because github actions are

00:14:07,360 --> 00:14:11,600
just easy to use and require

00:14:09,040 --> 00:14:13,360
almost no overhead we were also able to

00:14:11,600 --> 00:14:15,519
meet our customers where they were

00:14:13,360 --> 00:14:17,839
on the github marketplace this adds

00:14:15,519 --> 00:14:19,600
another layer of discoverability

00:14:17,839 --> 00:14:21,839
this has been a quick overview of how

00:14:19,600 --> 00:14:23,600
datadog leverages github actions we hope

00:14:21,839 --> 00:14:26,079
you have a great rest of the conference

00:14:23,600 --> 00:14:27,600
thank you hi my name is william marquito

00:14:26,079 --> 00:14:29,440
aveda i'm a product manager with an

00:14:27,600 --> 00:14:31,440
openshift and i'm very excited to talk

00:14:29,440 --> 00:14:33,040
about the github actions that we built

00:14:31,440 --> 00:14:35,279
that will enable your developers to

00:14:33,040 --> 00:14:36,959
deploy applications to openshift

00:14:35,279 --> 00:14:38,320
so here are the actions already in the

00:14:36,959 --> 00:14:39,839
github marketplace

00:14:38,320 --> 00:14:41,600
but i'm going to show you now how you

00:14:39,839 --> 00:14:42,399
can very easily add that to your github

00:14:41,600 --> 00:14:44,240
projects

00:14:42,399 --> 00:14:45,760
so here's my github project it has no

00:14:44,240 --> 00:14:47,519
workflows currently set up

00:14:45,760 --> 00:14:48,800
i can click in actions and you get to

00:14:47,519 --> 00:14:50,480
this list here

00:14:48,800 --> 00:14:52,160
i have already found the get the

00:14:50,480 --> 00:14:54,160
openshift workflow

00:14:52,160 --> 00:14:56,320
that i'm going to set up now to deploy

00:14:54,160 --> 00:14:59,120
to my openshift environment

00:14:56,320 --> 00:14:59,920
i'm going to replace some of the values

00:14:59,120 --> 00:15:01,519
that you can

00:14:59,920 --> 00:15:03,920
use here to for example use your

00:15:01,519 --> 00:15:05,839
container registry and then of course

00:15:03,920 --> 00:15:08,240
the two secrets pointing to your

00:15:05,839 --> 00:15:10,399
openshift cluster in your openshift

00:15:08,240 --> 00:15:11,600
token as well you can also use your

00:15:10,399 --> 00:15:13,040
username and password

00:15:11,600 --> 00:15:15,760
but that's pretty much all you need i'm

00:15:13,040 --> 00:15:18,639
gonna commit that to my repository

00:15:15,760 --> 00:15:19,920
and that's going to trigger a build that

00:15:18,639 --> 00:15:23,440
as you can see it's

00:15:19,920 --> 00:15:25,600
just getting started right now uh

00:15:23,440 --> 00:15:27,199
but that's pretty much all you have to

00:15:25,600 --> 00:15:28,560
do and this application now will land in

00:15:27,199 --> 00:15:30,240
my openshift cluster

00:15:28,560 --> 00:15:32,480
i'm gonna very quickly walk you through

00:15:30,240 --> 00:15:33,920
the secret as well as you can see i have

00:15:32,480 --> 00:15:36,000
the registry password

00:15:33,920 --> 00:15:38,480
and the two values for my openshift

00:15:36,000 --> 00:15:42,480
environment the server and the token

00:15:38,480 --> 00:15:44,399
but uh that's it like it's that simple

00:15:42,480 --> 00:15:46,639
and now that the build is complete let's

00:15:44,399 --> 00:15:48,000
see the url for that application in my

00:15:46,639 --> 00:15:49,839
openshift cluster

00:15:48,000 --> 00:15:51,600
uh this is a qrcos app so the startup

00:15:49,839 --> 00:15:53,680
time will be really fast

00:15:51,600 --> 00:15:55,839
and that's it my app is up and running

00:15:53,680 --> 00:15:57,839
now we're very excited about this

00:15:55,839 --> 00:15:59,600
partnership and we look forward to see

00:15:57,839 --> 00:16:00,639
what developers will build with this

00:15:59,600 --> 00:16:04,959
github actions for

00:16:00,639 --> 00:16:04,959
openshift and for other red hat projects

00:16:05,600 --> 00:16:09,519
i'm always so impressed by the ways our

00:16:07,759 --> 00:16:11,920
community is using actions

00:16:09,519 --> 00:16:14,000
i love this quote from mckesson and i

00:16:11,920 --> 00:16:15,920
couldn't have said it better myself

00:16:14,000 --> 00:16:18,000
the more you allow developers to do

00:16:15,920 --> 00:16:19,519
their best work the more you automate

00:16:18,000 --> 00:16:21,759
the manual tasks

00:16:19,519 --> 00:16:23,839
the more you can do for your customers

00:16:21,759 --> 00:16:25,519
github actions enhance the developer

00:16:23,839 --> 00:16:26,639
experience through developer focused

00:16:25,519 --> 00:16:28,959
workflows

00:16:26,639 --> 00:16:30,800
by producing shared and secure ways to

00:16:28,959 --> 00:16:32,079
automate away the manual steps to

00:16:30,800 --> 00:16:34,079
shipping software

00:16:32,079 --> 00:16:35,839
actions allows developers to focus on

00:16:34,079 --> 00:16:37,600
writing code and in turn delivering

00:16:35,839 --> 00:16:40,639
great products to your customers

00:16:37,600 --> 00:16:42,959
whether they're internal or external but

00:16:40,639 --> 00:16:44,240
great developer experiences require more

00:16:42,959 --> 00:16:45,920
than the best features and an

00:16:44,240 --> 00:16:48,959
uninterrupted workflow

00:16:45,920 --> 00:16:52,000
they also need to deliver peace of mind

00:16:48,959 --> 00:16:54,160
securing software is truly a team effort

00:16:52,000 --> 00:16:56,480
discovering reporting and remediating

00:16:54,160 --> 00:16:58,240
vulnerabilities is a full-time job

00:16:56,480 --> 00:17:00,959
and not one everyone is equipped to do

00:16:58,240 --> 00:17:03,040
well we've captured the expertise of

00:17:00,959 --> 00:17:04,799
world leading security experts in our

00:17:03,040 --> 00:17:05,439
products so that addressing security

00:17:04,799 --> 00:17:07,280
concerns

00:17:05,439 --> 00:17:09,039
becomes a streamline part of automated

00:17:07,280 --> 00:17:10,240
workflows rather than something

00:17:09,039 --> 00:17:13,360
developers need to do

00:17:10,240 --> 00:17:15,520
on the side of course

00:17:13,360 --> 00:17:17,360
security isn't just about preventing bad

00:17:15,520 --> 00:17:19,280
actors from breaching your code

00:17:17,360 --> 00:17:20,799
it's also about ensuring that human

00:17:19,280 --> 00:17:22,559
error doesn't expose you or your

00:17:20,799 --> 00:17:24,720
customers to risk

00:17:22,559 --> 00:17:25,839
on a random sample of over 500

00:17:24,720 --> 00:17:28,240
advisories across

00:17:25,839 --> 00:17:30,320
six package ecosystems we found that

00:17:28,240 --> 00:17:32,000
only 17 percent of security

00:17:30,320 --> 00:17:35,280
vulnerabilities are from malicious

00:17:32,000 --> 00:17:37,280
behavior put another way 83 percent of

00:17:35,280 --> 00:17:38,160
vulnerabilities are simply the result of

00:17:37,280 --> 00:17:39,919
human error

00:17:38,160 --> 00:17:42,960
mistakes that anyone could make and it

00:17:39,919 --> 00:17:45,360
could happen anywhere in any company

00:17:42,960 --> 00:17:47,039
vulnerabilities are hard to identify and

00:17:45,360 --> 00:17:48,160
expensive and time consuming to

00:17:47,039 --> 00:17:50,400
remediate

00:17:48,160 --> 00:17:52,799
with github you have an entire community

00:17:50,400 --> 00:17:53,919
of security researchers helping you find

00:17:52,799 --> 00:17:56,559
and fix

00:17:53,919 --> 00:17:58,880
vulnerabilities in applying this tooling

00:17:56,559 --> 00:18:00,960
and expertise to open source software

00:17:58,880 --> 00:18:02,720
suddenly the whole supply chain becomes

00:18:00,960 --> 00:18:04,559
more secure for us all

00:18:02,720 --> 00:18:06,559
given that so much of today's software

00:18:04,559 --> 00:18:08,480
is built on open source

00:18:06,559 --> 00:18:09,840
we believe in both securing the software

00:18:08,480 --> 00:18:11,760
supply chain and

00:18:09,840 --> 00:18:14,000
frequently scanning code before

00:18:11,760 --> 00:18:15,520
deployment to prevent vulnerabilities

00:18:14,000 --> 00:18:16,400
and their variants from making their way

00:18:15,520 --> 00:18:19,679
into production

00:18:16,400 --> 00:18:21,200
code security on github works just like

00:18:19,679 --> 00:18:23,520
your developers do

00:18:21,200 --> 00:18:25,760
it's centered around your code embedded

00:18:23,520 --> 00:18:27,600
in existing collaboration workflows

00:18:25,760 --> 00:18:30,559
and bolstered by the confidence and the

00:18:27,600 --> 00:18:32,320
power of the open source community

00:18:30,559 --> 00:18:34,240
we can look at the process of patching

00:18:32,320 --> 00:18:36,559
vulnerabilities as an example of how

00:18:34,240 --> 00:18:38,720
this works in favor of developers

00:18:36,559 --> 00:18:40,240
repositories that automatically generate

00:18:38,720 --> 00:18:42,640
a dependable pull request

00:18:40,240 --> 00:18:43,919
patch their software 13 days sooner or

00:18:42,640 --> 00:18:46,240
1.4 times

00:18:43,919 --> 00:18:47,840
faster than those who don't that's huge

00:18:46,240 --> 00:18:49,919
when it comes to security

00:18:47,840 --> 00:18:51,600
if you're not already using dependable

00:18:49,919 --> 00:18:52,720
you should spend some time checking it

00:18:51,600 --> 00:18:54,640
out

00:18:52,720 --> 00:18:56,400
as i mentioned we have an incredible

00:18:54,640 --> 00:18:58,320
team of security researchers

00:18:56,400 --> 00:19:00,000
and we've built their expertise directly

00:18:58,320 --> 00:19:01,840
and intuitively into the github

00:19:00,000 --> 00:19:04,000
enterprise platform

00:19:01,840 --> 00:19:05,600
github enterprise server customers now

00:19:04,000 --> 00:19:07,840
have access to github's advanced

00:19:05,600 --> 00:19:08,720
security suite which includes codeql

00:19:07,840 --> 00:19:10,799
code scanning

00:19:08,720 --> 00:19:12,720
as part of their server deployment the

00:19:10,799 --> 00:19:14,640
combination of advanced security and our

00:19:12,720 --> 00:19:15,760
supply chain security features including

00:19:14,640 --> 00:19:17,440
dependabot

00:19:15,760 --> 00:19:19,360
offers companies with an on-prem

00:19:17,440 --> 00:19:20,720
deployment platform to help secure their

00:19:19,360 --> 00:19:22,960
use of open source

00:19:20,720 --> 00:19:25,840
simplify security and automate their

00:19:22,960 --> 00:19:27,919
application security practices

00:19:25,840 --> 00:19:29,679
and yesterday we announced the beta

00:19:27,919 --> 00:19:32,240
availability of secret scanning in

00:19:29,679 --> 00:19:34,400
github enterprise server 3.0 to help

00:19:32,240 --> 00:19:36,160
prevent credentials and other protected

00:19:34,400 --> 00:19:37,039
information from being accidentally

00:19:36,160 --> 00:19:39,280
exposed

00:19:37,039 --> 00:19:40,559
or giving systems access to potential

00:19:39,280 --> 00:19:43,200
intruders

00:19:40,559 --> 00:19:45,360
security advisories codeql code scanning

00:19:43,200 --> 00:19:47,360
secret scanning and dependabot

00:19:45,360 --> 00:19:49,760
all work together to secure your code

00:19:47,360 --> 00:19:50,320
end to end security is not just about

00:19:49,760 --> 00:19:52,240
tools

00:19:50,320 --> 00:19:53,440
it's also about the community working

00:19:52,240 --> 00:19:55,440
together

00:19:53,440 --> 00:19:58,080
github brings the power of the community

00:19:55,440 --> 00:20:00,000
to help secure software including yours

00:19:58,080 --> 00:20:01,360
into our platform through the security

00:20:00,000 --> 00:20:03,520
lab take

00:20:01,360 --> 00:20:05,440
postmates for example who leverage

00:20:03,520 --> 00:20:06,000
codeql's code scanning to do what

00:20:05,440 --> 00:20:08,000
literally

00:20:06,000 --> 00:20:09,440
no other developer focused security

00:20:08,000 --> 00:20:11,679
tooling can do

00:20:09,440 --> 00:20:12,640
github security features meet developers

00:20:11,679 --> 00:20:15,200
where they are

00:20:12,640 --> 00:20:17,280
in the source code and we also have a

00:20:15,200 --> 00:20:19,120
fantastic partner here with us who's

00:20:17,280 --> 00:20:21,039
working to provide additional security

00:20:19,120 --> 00:20:22,960
capabilities to github customers through

00:20:21,039 --> 00:20:26,799
their own integrations

00:20:22,960 --> 00:20:28,159
take a look hi i'm matt from bridge crew

00:20:26,799 --> 00:20:30,960
the cloud security platform for

00:20:28,159 --> 00:20:33,520
developers with the advent of devops

00:20:30,960 --> 00:20:35,520
git ops infrastructure as code becoming

00:20:33,520 --> 00:20:37,360
staples of our day-to-day

00:20:35,520 --> 00:20:39,360
there's no better place than github to

00:20:37,360 --> 00:20:40,640
start the development team's security

00:20:39,360 --> 00:20:42,080
journey

00:20:40,640 --> 00:20:44,000
bridge crew's mission is to enable

00:20:42,080 --> 00:20:46,559
security where code happens

00:20:44,000 --> 00:20:48,320
and we do this through frictionless

00:20:46,559 --> 00:20:50,480
infrastructure as code scanning

00:20:48,320 --> 00:20:51,520
automated remediation and runtime

00:20:50,480 --> 00:20:53,840
scanning

00:20:51,520 --> 00:20:55,120
but most importantly we do all of this

00:20:53,840 --> 00:20:57,440
right within the developers

00:20:55,120 --> 00:20:58,960
existing workflows let's take a look at

00:20:57,440 --> 00:21:00,480
that

00:20:58,960 --> 00:21:01,919
we'll start with terry go our

00:21:00,480 --> 00:21:04,000
intentionally vulnerable set of

00:21:01,919 --> 00:21:05,600
terraform manifests for infrastructure

00:21:04,000 --> 00:21:07,600
as code security training

00:21:05,600 --> 00:21:08,960
here we have multiple infrastructures

00:21:07,600 --> 00:21:10,720
and multiple different types of

00:21:08,960 --> 00:21:13,440
terraform resources

00:21:10,720 --> 00:21:15,440
by cloning that locally we can see we

00:21:13,440 --> 00:21:18,720
have a couple of azure app services

00:21:15,440 --> 00:21:21,200
we can add a third and make a commit

00:21:18,720 --> 00:21:23,919
we'll commit that to a new branch and

00:21:21,200 --> 00:21:26,080
we'll push that

00:21:23,919 --> 00:21:28,799
we'll then make a pull request against

00:21:26,080 --> 00:21:30,720
our main branch

00:21:28,799 --> 00:21:33,360
and once that's done we can see that

00:21:30,720 --> 00:21:34,880
pull request in github

00:21:33,360 --> 00:21:37,039
as you can see bridge crews already

00:21:34,880 --> 00:21:38,400
scanned this pr and found issues with

00:21:37,039 --> 00:21:39,039
our infrastructure's code security

00:21:38,400 --> 00:21:41,919
posture

00:21:39,039 --> 00:21:43,280
which is highlighted by scrolling to the

00:21:41,919 --> 00:21:45,520
bottom of the pull request

00:21:43,280 --> 00:21:47,520
we'll find the bridge crew set of checks

00:21:45,520 --> 00:21:48,480
clicking details will take us to a

00:21:47,520 --> 00:21:49,919
single page

00:21:48,480 --> 00:21:51,720
where we can see all the issues and

00:21:49,919 --> 00:21:53,440
suggested remediations

00:21:51,720 --> 00:21:55,760
[Music]

00:21:53,440 --> 00:21:57,039
to remediate we can simply click on one

00:21:55,760 --> 00:21:59,039
of the issues

00:21:57,039 --> 00:22:01,039
add it to our list of remediations and

00:21:59,039 --> 00:22:02,559
click remediate

00:22:01,039 --> 00:22:04,320
going back to github this will

00:22:02,559 --> 00:22:04,880
automatically add a new commit into our

00:22:04,320 --> 00:22:08,960
pr

00:22:04,880 --> 00:22:10,960
to solve that particular security issue

00:22:08,960 --> 00:22:12,000
clicking on the individual pull request

00:22:10,960 --> 00:22:13,919
comments also

00:22:12,000 --> 00:22:15,120
takes us to guidance so individual

00:22:13,919 --> 00:22:17,360
developers on the team

00:22:15,120 --> 00:22:19,919
can see context as to why that change

00:22:17,360 --> 00:22:19,919
needs to occur

00:22:20,159 --> 00:22:23,440
while we're in the platform let's look

00:22:21,840 --> 00:22:24,480
at existing issues within our main

00:22:23,440 --> 00:22:26,960
branch

00:22:24,480 --> 00:22:28,799
as you can see app service 1 and 2

00:22:26,960 --> 00:22:30,559
suffer from the same issue

00:22:28,799 --> 00:22:32,480
here we can click into them to see the

00:22:30,559 --> 00:22:34,000
same remediation suggestions

00:22:32,480 --> 00:22:37,280
and even though they're already in our

00:22:34,000 --> 00:22:39,200
main branch we can click remediate

00:22:37,280 --> 00:22:41,280
this will generate you've guessed it a

00:22:39,200 --> 00:22:43,200
new pull request against that branch

00:22:41,280 --> 00:22:46,080
to fix the infrastructure's code issues

00:22:43,200 --> 00:22:47,440
already highlighted

00:22:46,080 --> 00:22:49,200
we can also see from the types of

00:22:47,440 --> 00:22:51,120
violations in the list

00:22:49,200 --> 00:22:53,200
that bridge crews also noticed one of

00:22:51,120 --> 00:22:55,120
these infrastructure as code issues

00:22:53,200 --> 00:22:57,360
has made it all the way to production

00:22:55,120 --> 00:22:59,679
and is highlighting a runtime violation

00:22:57,360 --> 00:23:01,840
from azure for the same issue

00:22:59,679 --> 00:23:03,600
last but not least we can also add

00:23:01,840 --> 00:23:05,840
badges to all our repos

00:23:03,600 --> 00:23:06,960
to highlight the infrastructure as code

00:23:05,840 --> 00:23:08,880
security posture

00:23:06,960 --> 00:23:12,159
to other developers and to make it easy

00:23:08,880 --> 00:23:12,159
to track our improvements

00:23:15,360 --> 00:23:18,400
accelerating velocity is critical to

00:23:17,440 --> 00:23:20,159
keeping pace

00:23:18,400 --> 00:23:22,559
but doing so without investing in

00:23:20,159 --> 00:23:24,720
security can create additional risk

00:23:22,559 --> 00:23:25,760
we want to help teams ship more secure

00:23:24,720 --> 00:23:27,840
code faster

00:23:25,760 --> 00:23:29,600
and a developer focused approach

00:23:27,840 --> 00:23:31,520
supported by the community with the

00:23:29,600 --> 00:23:34,559
right tools and the right partners

00:23:31,520 --> 00:23:36,480
is the best way to get there github is

00:23:34,559 --> 00:23:39,039
where the world builds software

00:23:36,480 --> 00:23:40,000
over 50 million developers trust github

00:23:39,039 --> 00:23:42,559
to collaborate

00:23:40,000 --> 00:23:43,679
test build and deploy code including

00:23:42,559 --> 00:23:46,559
over 70

00:23:43,679 --> 00:23:47,279
of the fortune 50. in fact in the last

00:23:46,559 --> 00:23:50,000
year

00:23:47,279 --> 00:23:53,520
over 60 million new repos were added and

00:23:50,000 --> 00:23:56,000
over 1.9 billion contributions were made

00:23:53,520 --> 00:23:57,919
those are some seriously big numbers the

00:23:56,000 --> 00:23:59,760
stability and resilience of our global

00:23:57,919 --> 00:24:01,360
platform is critical to providing

00:23:59,760 --> 00:24:02,320
developers with a platform they can

00:24:01,360 --> 00:24:04,240
count on

00:24:02,320 --> 00:24:06,159
github enterprise is built on the same

00:24:04,240 --> 00:24:08,159
principles as github.com

00:24:06,159 --> 00:24:10,159
and as a result benefits from the years

00:24:08,159 --> 00:24:11,200
we've spent optimizing the platform to

00:24:10,159 --> 00:24:14,720
be trusted

00:24:11,200 --> 00:24:16,799
reliable and resilient from day one

00:24:14,720 --> 00:24:19,039
we've focused on building great products

00:24:16,799 --> 00:24:20,720
and experiences for the developers who

00:24:19,039 --> 00:24:21,600
spend their days or their nights on

00:24:20,720 --> 00:24:23,600
github

00:24:21,600 --> 00:24:25,120
from pull requests to code spaces

00:24:23,600 --> 00:24:27,440
actions to codeql

00:24:25,120 --> 00:24:29,440
and everything in between our vision is

00:24:27,440 --> 00:24:31,039
to build the home for all developers

00:24:29,440 --> 00:24:32,799
whether they're working on a fun side

00:24:31,039 --> 00:24:35,039
project or building mission critical

00:24:32,799 --> 00:24:36,880
software for fortune 500

00:24:35,039 --> 00:24:38,640
developers benefit from working in a

00:24:36,880 --> 00:24:39,360
collaborative community built around

00:24:38,640 --> 00:24:41,440
code

00:24:39,360 --> 00:24:43,760
one that scales with each new project

00:24:41,440 --> 00:24:44,880
allows for expertise sharing cross-team

00:24:43,760 --> 00:24:47,279
problem solving

00:24:44,880 --> 00:24:49,360
and code and workflow reuse by

00:24:47,279 --> 00:24:50,960
replicating this experience in-house

00:24:49,360 --> 00:24:52,559
enterprises can benefit from the

00:24:50,960 --> 00:24:54,799
practices that have helped the open

00:24:52,559 --> 00:24:56,400
source community grow and thrive

00:24:54,799 --> 00:24:58,559
call it intersourcing or digital

00:24:56,400 --> 00:25:00,240
transformation it boils down to

00:24:58,559 --> 00:25:01,440
empowering developers to work the way

00:25:00,240 --> 00:25:03,120
they work best

00:25:01,440 --> 00:25:05,360
collaboratively and free from

00:25:03,120 --> 00:25:07,279
unnecessary distractions

00:25:05,360 --> 00:25:09,120
regardless of your goals for this year

00:25:07,279 --> 00:25:10,720
whether it be to improve your workflows

00:25:09,120 --> 00:25:12,000
or to achieve your vision of digital

00:25:10,720 --> 00:25:13,840
transformation

00:25:12,000 --> 00:25:16,159
investing in a top-notch developer

00:25:13,840 --> 00:25:18,480
experience will be key to your success

00:25:16,159 --> 00:25:20,159
one that embraces the developer workflow

00:25:18,480 --> 00:25:21,039
seamlessly addresses security and

00:25:20,159 --> 00:25:23,120
compliance

00:25:21,039 --> 00:25:26,400
and provides access to a scalable

00:25:23,120 --> 00:25:27,760
reliable platform built for developers

00:25:26,400 --> 00:25:29,600
we're here to partner with you to

00:25:27,760 --> 00:25:31,440
accelerate developer velocity and

00:25:29,600 --> 00:25:33,120
deliver world-class software

00:25:31,440 --> 00:25:34,720
and we're excited for what the future

00:25:33,120 --> 00:25:38,600
holds for us all

00:25:34,720 --> 00:25:41,600
thank you and enjoy day two of github

00:25:38,600 --> 00:25:41,600

YouTube URL: https://www.youtube.com/watch?v=Cl2QDxG4gt4


