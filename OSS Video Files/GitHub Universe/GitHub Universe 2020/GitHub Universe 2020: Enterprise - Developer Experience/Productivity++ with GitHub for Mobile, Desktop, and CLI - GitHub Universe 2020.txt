Title: Productivity++ with GitHub for Mobile, Desktop, and CLI - GitHub Universe 2020
Publication date: 2020-12-11
Playlist: GitHub Universe 2020: Enterprise - Developer Experience
Description: 
	Presented by Billy Griffin, Staff Engineering Manager, GitHub

Billy has been at GitHub for the past two years, working in Product and now in Engineering, managing the GitHub Desktop and GitHub CLI teams. He started his career in the U.S. Navy serving as a Surface Warfare Officer. Since leaving the Navy in 2013, he cofounded a company, Base Directory, helping service members and their families find information on U.S. military bases. Immediately prior to joining GitHub, Billy spent two years at 18F helping the federal government build more user-friendly websites and applications. He lives in Denver, Colorado, and loves the mountains and nature. 

For more from GitHub Universe 2020, visit https://githubuniverse.com

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:01,800 --> 00:00:11,860
[Music]

00:00:13,360 --> 00:00:16,640
thanks so much for that wonderful intro

00:00:15,200 --> 00:00:18,240
all the hosts are cracking me up and

00:00:16,640 --> 00:00:19,439
i've been loving all the talks over the

00:00:18,240 --> 00:00:20,880
past few days

00:00:19,439 --> 00:00:22,480
i'm billy griffin and i'm part of the

00:00:20,880 --> 00:00:23,359
team that builds github's client

00:00:22,480 --> 00:00:26,000
applications

00:00:23,359 --> 00:00:26,720
more specifically github cli desktop and

00:00:26,000 --> 00:00:28,160
mobile

00:00:26,720 --> 00:00:29,359
we've shipped a lot of stuff in the past

00:00:28,160 --> 00:00:30,160
year to bridge the gaps you've

00:00:29,359 --> 00:00:32,320
encountered

00:00:30,160 --> 00:00:33,920
and github mobile and github cli are

00:00:32,320 --> 00:00:36,160
brand new this year

00:00:33,920 --> 00:00:37,920
as a result of feedback from our users

00:00:36,160 --> 00:00:38,480
this talk is called productivity plus

00:00:37,920 --> 00:00:40,000
plus

00:00:38,480 --> 00:00:41,520
and i want to share with you how these

00:00:40,000 --> 00:00:42,320
github apps can help you be more

00:00:41,520 --> 00:00:44,320
productive

00:00:42,320 --> 00:00:46,000
and make building things on github more

00:00:44,320 --> 00:00:47,520
fun

00:00:46,000 --> 00:00:49,120
so why should you even care about being

00:00:47,520 --> 00:00:50,399
productive well

00:00:49,120 --> 00:00:51,840
it helps you get more done when you're

00:00:50,399 --> 00:00:53,600
working and provides you more

00:00:51,840 --> 00:00:55,600
flexibility so you can find a better

00:00:53,600 --> 00:00:57,440
balance between doing your best work

00:00:55,600 --> 00:00:59,840
and finding space for life outside of

00:00:57,440 --> 00:00:59,840
work

00:00:59,920 --> 00:01:04,320
when i think about productivity there

00:01:01,920 --> 00:01:05,920
are three themes that i like to focus on

00:01:04,320 --> 00:01:08,000
productivity from our perspective at

00:01:05,920 --> 00:01:10,240
github is about helping you reduce

00:01:08,000 --> 00:01:12,080
context switching helping you focus on

00:01:10,240 --> 00:01:16,240
what matters most to you

00:01:12,080 --> 00:01:16,240
and bringing github to wherever you are

00:01:17,119 --> 00:01:20,960
you may not have heard but github is a

00:01:18,799 --> 00:01:23,200
new command line interface or cli

00:01:20,960 --> 00:01:24,640
it just came out of beta two months ago

00:01:23,200 --> 00:01:26,000
but if you love github and you do

00:01:24,640 --> 00:01:27,840
anything at all from your terminal

00:01:26,000 --> 00:01:29,439
you should totally be using it to

00:01:27,840 --> 00:01:31,280
illustrate why let's walk through a

00:01:29,439 --> 00:01:32,640
scenario to help demonstrate how github

00:01:31,280 --> 00:01:36,159
cli or gh

00:01:32,640 --> 00:01:36,159
helps you reduce context switching

00:01:36,720 --> 00:01:40,560
we'll start by using githubcli to find

00:01:38,799 --> 00:01:42,720
all issues assigned to me

00:01:40,560 --> 00:01:44,720
with the command gh issued list dash

00:01:42,720 --> 00:01:48,079
dash assignee billy griffin which is my

00:01:44,720 --> 00:01:48,079
super original github handle

00:01:48,399 --> 00:01:52,159
here we can see that there are three

00:01:49,680 --> 00:01:54,000
issues assigned to me

00:01:52,159 --> 00:01:58,000
next let's take a closer look at that

00:01:54,000 --> 00:01:58,000
first one using gh issue view

00:02:00,479 --> 00:02:03,920
with this we can see a lot more detail

00:02:02,799 --> 00:02:06,640
about the issue

00:02:03,920 --> 00:02:07,360
the author how long it's been open any

00:02:06,640 --> 00:02:09,039
labels

00:02:07,360 --> 00:02:10,560
and most importantly we can read through

00:02:09,039 --> 00:02:12,720
the body of the issue and find out a

00:02:10,560 --> 00:02:14,720
little bit more about what's going on

00:02:12,720 --> 00:02:16,480
after taking a closer look this looks

00:02:14,720 --> 00:02:19,680
like something i can probably fix

00:02:16,480 --> 00:02:19,680
so i'm going to go ahead and do that

00:02:20,080 --> 00:02:23,920
works on my machine so we'll call it

00:02:21,599 --> 00:02:23,920
fixed

00:02:24,080 --> 00:02:27,360
when we're ready to share our work and

00:02:25,520 --> 00:02:28,160
get feedback it's time to create a pull

00:02:27,360 --> 00:02:30,480
request

00:02:28,160 --> 00:02:37,040
and you can do so right from githubcli

00:02:30,480 --> 00:02:40,400
using ghprcreate

00:02:37,040 --> 00:02:42,080
you can add the title for your pr

00:02:40,400 --> 00:02:44,480
and choose from the pr templates for

00:02:42,080 --> 00:02:46,480
your repo in this case we fixed a bug

00:02:44,480 --> 00:02:48,560
so let's pick the bug fix template but

00:02:46,480 --> 00:02:50,160
it's important to note that any

00:02:48,560 --> 00:02:51,840
templates for your repo will be

00:02:50,160 --> 00:02:54,879
populated in this in this

00:02:51,840 --> 00:02:56,560
uh list to choose from

00:02:54,879 --> 00:02:58,879
and we can even fill out a more detailed

00:02:56,560 --> 00:03:01,760
pr body using our preferred editor

00:02:58,879 --> 00:03:01,760
and write in markdown

00:03:01,920 --> 00:03:05,599
and when we're all done we can add

00:03:03,440 --> 00:03:06,239
metadata like labels and assignees if we

00:03:05,599 --> 00:03:08,080
want

00:03:06,239 --> 00:03:09,760
or even preview our pr in the browser

00:03:08,080 --> 00:03:11,280
prior to submitting it

00:03:09,760 --> 00:03:12,879
in this case especially since our goal

00:03:11,280 --> 00:03:14,239
is to reduce context searching we'll

00:03:12,879 --> 00:03:16,720
just go ahead and submit it right here

00:03:14,239 --> 00:03:18,879
from our terminal

00:03:16,720 --> 00:03:19,920
and our pr submitted we get this nice

00:03:18,879 --> 00:03:21,120
link as output

00:03:19,920 --> 00:03:23,599
if we want to go check it out in the

00:03:21,120 --> 00:03:25,920
browser or we can move on to whatever's

00:03:23,599 --> 00:03:25,920
next

00:03:26,720 --> 00:03:30,959
now that i've created my pr it's time to

00:03:28,959 --> 00:03:32,959
check in on the status of other prs

00:03:30,959 --> 00:03:37,200
in the repo that might need my attention

00:03:32,959 --> 00:03:39,040
we'll use ghpr status to do just that

00:03:37,200 --> 00:03:40,720
i love this overview that pr status

00:03:39,040 --> 00:03:43,040
gives me with approval

00:03:40,720 --> 00:03:44,319
and check status right in my terminal

00:03:43,040 --> 00:03:47,840
let's go ahead and check out the one

00:03:44,319 --> 00:03:47,840
where someone has requested my review

00:03:48,640 --> 00:03:52,239
how do i check out that pr locally again

00:03:50,799 --> 00:03:54,000
i don't know if you're anything like me

00:03:52,239 --> 00:03:55,360
but i always forget how to check a pr

00:03:54,000 --> 00:03:57,040
out and get

00:03:55,360 --> 00:03:58,400
according to the stack overflow answer

00:03:57,040 --> 00:04:00,319
after furiously googling

00:03:58,400 --> 00:04:02,319
every single time i guess i need to look

00:04:00,319 --> 00:04:04,319
up the pr number the branch name and

00:04:02,319 --> 00:04:05,840
then remember a couple steps and get

00:04:04,319 --> 00:04:08,000
well maybe i'm destined to have to look

00:04:05,840 --> 00:04:09,599
this up every single time wishing

00:04:08,000 --> 00:04:12,640
wasting precious time and energy on

00:04:09,599 --> 00:04:12,640
something so trivial

00:04:12,720 --> 00:04:16,079
but instead of that back and forth or

00:04:14,400 --> 00:04:17,680
needing to go to the browser at all

00:04:16,079 --> 00:04:19,120
i can just take the pr number that i saw

00:04:17,680 --> 00:04:22,959
in ghpr status

00:04:19,120 --> 00:04:22,959
and use gh to check out the pr

00:04:23,040 --> 00:04:26,800
this also sets up the branch locally so

00:04:25,199 --> 00:04:28,720
i'll be able to just push to the branch

00:04:26,800 --> 00:04:29,759
using git push without having to do

00:04:28,720 --> 00:04:33,759
anything extra

00:04:29,759 --> 00:04:35,360
and get now i want to take a quick look

00:04:33,759 --> 00:04:37,280
at what's changed in the pr

00:04:35,360 --> 00:04:42,320
to orient myself and see how complex it

00:04:37,280 --> 00:04:44,240
is i can do that with ghpr diff

00:04:42,320 --> 00:04:46,720
here we can see what's changed just like

00:04:44,240 --> 00:04:47,520
the files change tab on github.com's pr

00:04:46,720 --> 00:04:49,199
page

00:04:47,520 --> 00:04:50,880
especially for smaller pr's that don't

00:04:49,199 --> 00:04:52,560
have a ton of files or changes

00:04:50,880 --> 00:04:54,400
this is a great way to quickly get your

00:04:52,560 --> 00:04:57,840
arms around what a pr is doing

00:04:54,400 --> 00:04:57,840
without having to leave your terminal

00:04:58,320 --> 00:05:01,759
and if everything looks good we can go

00:05:00,000 --> 00:05:04,240
ahead and approve the pr right here in

00:05:01,759 --> 00:05:04,240
our terminal

00:05:04,800 --> 00:05:08,160
and there we go it's approved

00:05:08,880 --> 00:05:14,000
now that the pr is approved and good to

00:05:10,479 --> 00:05:14,000
go we can even merge

00:05:16,320 --> 00:05:20,320
github cli allows you to merge in

00:05:18,240 --> 00:05:20,960
whatever way works best for you or your

00:05:20,320 --> 00:05:22,639
project

00:05:20,960 --> 00:05:24,560
as we know preferences and norms differ

00:05:22,639 --> 00:05:26,080
across projects so if you're the type of

00:05:24,560 --> 00:05:28,240
person who always rebases

00:05:26,080 --> 00:05:29,759
or always squashes and merges then you

00:05:28,240 --> 00:05:31,360
can do that right here and if your

00:05:29,759 --> 00:05:34,240
project mandates one or the other

00:05:31,360 --> 00:05:34,240
it's no problem at all

00:05:34,800 --> 00:05:38,400
and say goodbye to all those branches

00:05:36,400 --> 00:05:40,960
just hanging around on merged pr's

00:05:38,400 --> 00:05:42,560
that are still open github cli allows

00:05:40,960 --> 00:05:43,120
you to optionally delete the branch on

00:05:42,560 --> 00:05:44,800
github

00:05:43,120 --> 00:05:46,479
and on your local machine so you can

00:05:44,800 --> 00:05:48,960
avoid having to go back and clean up you

00:05:46,479 --> 00:05:53,840
after yourself later

00:05:48,960 --> 00:05:53,840
and now we're ready to submit

00:05:54,320 --> 00:05:58,000
now the pr is merged our branches are

00:05:56,319 --> 00:06:00,319
deleted and we're back on the main

00:05:58,000 --> 00:06:02,319
branch

00:06:00,319 --> 00:06:03,919
and finally when everything is in a good

00:06:02,319 --> 00:06:05,520
place and we're ready to share what

00:06:03,919 --> 00:06:07,840
we've built with the world

00:06:05,520 --> 00:06:10,319
we can use github cli to create a github

00:06:07,840 --> 00:06:10,319
release

00:06:11,440 --> 00:06:15,680
it walks you through the steps just like

00:06:13,360 --> 00:06:18,080
the pr creation flow did

00:06:15,680 --> 00:06:18,880
and just like that we completed the full

00:06:18,080 --> 00:06:21,360
workflow

00:06:18,880 --> 00:06:22,000
end end-to-end from finding an issue to

00:06:21,360 --> 00:06:24,319
work on

00:06:22,000 --> 00:06:27,360
to releasing software without ever

00:06:24,319 --> 00:06:27,360
having to leave our terminal

00:06:28,160 --> 00:06:31,199
in addition to supporting end-to-end

00:06:29,759 --> 00:06:31,919
workflows as we just walked through

00:06:31,199 --> 00:06:34,319
together

00:06:31,919 --> 00:06:35,840
github cli is also incredibly flexible

00:06:34,319 --> 00:06:36,880
allowing you to customize it to suit

00:06:35,840 --> 00:06:39,039
your own needs

00:06:36,880 --> 00:06:40,880
for example one of our community

00:06:39,039 --> 00:06:43,360
contributors shared how they combined

00:06:40,880 --> 00:06:45,919
the alias command with the api command

00:06:43,360 --> 00:06:46,800
to view all draft prs for a repo using

00:06:45,919 --> 00:06:48,400
gh

00:06:46,800 --> 00:06:50,639
you can use the same pattern to build

00:06:48,400 --> 00:06:52,160
custom aliases for anything you can do

00:06:50,639 --> 00:06:54,000
with the github api

00:06:52,160 --> 00:06:56,720
so if gh doesn't have it go ahead and

00:06:54,000 --> 00:06:59,360
add it for yourself

00:06:56,720 --> 00:07:00,960
as another example of just this let's

00:06:59,360 --> 00:07:02,880
take the command we just started that we

00:07:00,960 --> 00:07:04,400
started out with to list all the issues

00:07:02,880 --> 00:07:05,840
assigned to me

00:07:04,400 --> 00:07:07,360
so instead of having to type all that

00:07:05,840 --> 00:07:08,080
out each time it's a pretty verbose

00:07:07,360 --> 00:07:10,319
command

00:07:08,080 --> 00:07:13,840
we can just alias it to a command let's

00:07:10,319 --> 00:07:17,039
call it gh my issues

00:07:13,840 --> 00:07:18,639
and our alias is added now that we have

00:07:17,039 --> 00:07:20,880
that alias available

00:07:18,639 --> 00:07:25,039
we can run the gh my issues command and

00:07:20,880 --> 00:07:25,039
get the exact same output we saw earlier

00:07:26,880 --> 00:07:30,800
improving your productivity isn't just

00:07:28,720 --> 00:07:32,560
about getting the most work done

00:07:30,800 --> 00:07:34,880
to stay at your best you also need to

00:07:32,560 --> 00:07:36,960
take breaks and get out into nature

00:07:34,880 --> 00:07:39,120
get up cli has you covered for that too

00:07:36,960 --> 00:07:40,800
with your repo's very own garden

00:07:39,120 --> 00:07:43,039
customized with each commit as a

00:07:40,800 --> 00:07:44,639
wildflower whenever i'm having a tough

00:07:43,039 --> 00:07:46,240
day at work or when i'm confronted with

00:07:44,639 --> 00:07:48,560
a particularly tough challenge

00:07:46,240 --> 00:07:50,560
i love to spend some time by the stream

00:07:48,560 --> 00:07:51,039
check out my wildflowers and just unwind

00:07:50,560 --> 00:07:53,120
with

00:07:51,039 --> 00:07:56,639
gh repo garden it's a delightful

00:07:53,120 --> 00:07:56,639
experience and i hope you'll try it out

00:07:56,840 --> 00:08:00,400
too

00:07:58,560 --> 00:08:02,000
moving on to our second theme we'll talk

00:08:00,400 --> 00:08:03,840
about how github's apps help you focus

00:08:02,000 --> 00:08:05,599
on what matters most to you

00:08:03,840 --> 00:08:07,759
and like we did with github cli in the

00:08:05,599 --> 00:08:10,000
first theme we'll use github desktop to

00:08:07,759 --> 00:08:11,840
illustrate how you can do just that

00:08:10,000 --> 00:08:14,400
if you're unfamiliar with github desktop

00:08:11,840 --> 00:08:15,759
it's a graphical user interface or gui

00:08:14,400 --> 00:08:17,360
that makes it easier to work with your

00:08:15,759 --> 00:08:18,319
github repositories on your local

00:08:17,360 --> 00:08:20,000
machine

00:08:18,319 --> 00:08:22,080
if you haven't tried it or haven't tried

00:08:20,000 --> 00:08:23,919
it recently i'd encourage you to do so

00:08:22,080 --> 00:08:25,360
as major improvements over the past few

00:08:23,919 --> 00:08:26,720
years have led to github desktop

00:08:25,360 --> 00:08:30,720
recently crossing

00:08:26,720 --> 00:08:30,720
1 million users monthly

00:08:31,520 --> 00:08:34,959
git is an incredibly powerful tool that

00:08:33,279 --> 00:08:36,880
enables you to do so much

00:08:34,959 --> 00:08:38,719
but in the words of my colleague mislove

00:08:36,880 --> 00:08:40,320
git is simply too hard

00:08:38,719 --> 00:08:42,399
github desktop takes all of the

00:08:40,320 --> 00:08:43,839
complexity of git and distills it into

00:08:42,399 --> 00:08:45,600
the most important things

00:08:43,839 --> 00:08:47,600
so you can easily overcome those points

00:08:45,600 --> 00:08:48,240
of friction and focus on what matters

00:08:47,600 --> 00:08:49,920
most

00:08:48,240 --> 00:08:52,240
to allow you to build the most amazing

00:08:49,920 --> 00:08:52,240
things

00:08:52,320 --> 00:08:55,440
remember how we talked about how

00:08:53,519 --> 00:08:56,160
cumbersome it is to check out a pr and

00:08:55,440 --> 00:08:58,160
git

00:08:56,160 --> 00:08:59,839
well from any pr page you can check it

00:08:58,160 --> 00:09:02,080
out locally in desktop with just one

00:08:59,839 --> 00:09:05,120
click

00:09:02,080 --> 00:09:06,000
and similarly from any repo page you can

00:09:05,120 --> 00:09:08,160
clone the repo

00:09:06,000 --> 00:09:12,000
and get set up locally in desktop just

00:09:08,160 --> 00:09:12,000
by clicking open with github desktop

00:09:12,160 --> 00:09:15,440
so now we've cloned the repo made some

00:09:14,160 --> 00:09:16,959
changes

00:09:15,440 --> 00:09:18,959
and with other tools those changes are

00:09:16,959 --> 00:09:20,399
pretty transparent to you but require

00:09:18,959 --> 00:09:21,040
you to navigate somewhere else to see

00:09:20,399 --> 00:09:22,959
them

00:09:21,040 --> 00:09:24,480
get a desktop instead just puts the

00:09:22,959 --> 00:09:28,320
changes you just made

00:09:24,480 --> 00:09:28,320
right in front of you in a gorgeous diff

00:09:28,399 --> 00:09:32,080
and if you prefer split diffs to unified

00:09:30,240 --> 00:09:34,560
diffs github desktop has you covered

00:09:32,080 --> 00:09:34,560
there too

00:09:34,880 --> 00:09:38,160
a feature i absolutely love on github is

00:09:36,959 --> 00:09:39,760
protected branches

00:09:38,160 --> 00:09:42,000
it helps ensure you don't accidentally

00:09:39,760 --> 00:09:43,200
push to a branch one thing we'd see

00:09:42,000 --> 00:09:44,720
people do and get though

00:09:43,200 --> 00:09:46,720
is committing to a protected branch

00:09:44,720 --> 00:09:48,320
locally and then realizing they have to

00:09:46,720 --> 00:09:50,240
move those commits to another branch

00:09:48,320 --> 00:09:52,320
just to be able to push them

00:09:50,240 --> 00:09:53,920
github desktop helps you avoid that pain

00:09:52,320 --> 00:09:57,040
by gently nudging you to switch to a

00:09:53,920 --> 00:09:58,880
different branch prior to committing

00:09:57,040 --> 00:10:01,440
similarly i struggle with stashing in

00:09:58,880 --> 00:10:02,399
git i'll often have like 30 stashes just

00:10:01,440 --> 00:10:03,839
hanging around

00:10:02,399 --> 00:10:05,680
and i have no idea what's actually in

00:10:03,839 --> 00:10:06,399
any of them and it's too cumbersome to

00:10:05,680 --> 00:10:08,800
go look at them

00:10:06,399 --> 00:10:10,160
individually so eventually all that work

00:10:08,800 --> 00:10:12,240
just gets abandoned

00:10:10,160 --> 00:10:13,600
get a desktop makes stashing visible if

00:10:12,240 --> 00:10:15,120
you're in the middle of a feature

00:10:13,600 --> 00:10:16,720
and your co-worker asks you to take a

00:10:15,120 --> 00:10:17,760
quick look at their branch

00:10:16,720 --> 00:10:20,240
you can just choose to leave your

00:10:17,760 --> 00:10:21,920
changes behind

00:10:20,240 --> 00:10:23,920
and when you come back the changes are

00:10:21,920 --> 00:10:25,279
right there for you and you can decide

00:10:23,920 --> 00:10:26,880
whether you'd like to restore them to

00:10:25,279 --> 00:10:32,160
pick up where you left off

00:10:26,880 --> 00:10:33,680
or discard them and start anew in the

00:10:32,160 --> 00:10:35,519
vein of not having to remember to do

00:10:33,680 --> 00:10:37,600
things in a particular order

00:10:35,519 --> 00:10:39,440
desktop allows you to do a chunk of work

00:10:37,600 --> 00:10:41,040
and then afterward gives you the ability

00:10:39,440 --> 00:10:41,680
to organize your commits however you'd

00:10:41,040 --> 00:10:43,680
like

00:10:41,680 --> 00:10:45,440
by simply selecting a set of lines to

00:10:43,680 --> 00:10:47,360
include in each of your commits

00:10:45,440 --> 00:10:49,200
in this case amanda's first commit is

00:10:47,360 --> 00:10:50,560
one set of lines in a file

00:10:49,200 --> 00:10:52,240
and then her second commit is this

00:10:50,560 --> 00:10:53,440
another set of lines so you can organize

00:10:52,240 --> 00:10:56,959
your commits

00:10:53,440 --> 00:10:56,959
however you'd like after the fact

00:10:57,360 --> 00:11:00,000
one thing that's important is to make

00:10:58,560 --> 00:11:01,120
sure you stay up to date with changes

00:11:00,000 --> 00:11:03,040
from the default branch

00:11:01,120 --> 00:11:05,120
so you're not diverging too much i've

00:11:03,040 --> 00:11:07,040
shown you several features within the ui

00:11:05,120 --> 00:11:08,160
but another thing i love about desktop

00:11:07,040 --> 00:11:09,920
is that once you understand what's

00:11:08,160 --> 00:11:11,040
possible there are keyboard shortcuts

00:11:09,920 --> 00:11:13,120
for most actions

00:11:11,040 --> 00:11:14,640
so with just a couple key presses we can

00:11:13,120 --> 00:11:17,200
merge the default branch into our

00:11:14,640 --> 00:11:17,200
feature branch

00:11:17,519 --> 00:11:21,040
one thing i personally use to struggle

00:11:19,440 --> 00:11:22,160
with and get is merged conflicts and

00:11:21,040 --> 00:11:24,160
we've hit one here

00:11:22,160 --> 00:11:26,839
but with github desktop you get a nice

00:11:24,160 --> 00:11:28,079
guided flow that walks you through each

00:11:26,839 --> 00:11:29,839
conflict

00:11:28,079 --> 00:11:33,120
displays your progress as you work

00:11:29,839 --> 00:11:34,720
through resolving each of them

00:11:33,120 --> 00:11:36,160
and gives you a nice bit of confidence

00:11:34,720 --> 00:11:37,600
with those green check marks when all

00:11:36,160 --> 00:11:40,959
the conflicts are resolved and you're

00:11:37,600 --> 00:11:40,959
all set to commit your merge

00:11:41,440 --> 00:11:44,959
and when your work is done and you're

00:11:42,959 --> 00:11:46,399
ready to share github desktop doesn't

00:11:44,959 --> 00:11:47,200
make you think about what you have to do

00:11:46,399 --> 00:11:48,720
next

00:11:47,200 --> 00:11:50,399
as you can see here when you've

00:11:48,720 --> 00:11:52,079
committed and you push your branch

00:11:50,399 --> 00:11:55,040
you see this nice suggestion that it's

00:11:52,079 --> 00:11:55,040
time to create a pr

00:11:55,600 --> 00:11:58,320
since we're done with our work let's

00:11:57,040 --> 00:12:00,880
switch gears and check out someone

00:11:58,320 --> 00:12:00,880
else's pr

00:12:00,959 --> 00:12:04,639
we saw how difficult checking out a pr

00:12:02,720 --> 00:12:06,720
was earlier and even inside github

00:12:04,639 --> 00:12:08,800
desktop it's also just incredibly simple

00:12:06,720 --> 00:12:10,959
to see what pr's are open for your repo

00:12:08,800 --> 00:12:14,480
what their check status is and check any

00:12:10,959 --> 00:12:14,480
of them out just by clicking on them

00:12:14,560 --> 00:12:17,600
so i checked out a coworker's pr and

00:12:16,480 --> 00:12:19,040
there's something that i noticed that

00:12:17,600 --> 00:12:20,639
needs a little bit more thinking

00:12:19,040 --> 00:12:24,560
i'll reach out to them we can pair on

00:12:20,639 --> 00:12:26,720
getting across the finish line

00:12:24,560 --> 00:12:28,320
now we're done and we're ready to commit

00:12:26,720 --> 00:12:30,480
and since this is work we paired on

00:12:28,320 --> 00:12:31,680
i'll include my co-worker as a co-author

00:12:30,480 --> 00:12:33,120
on the commit

00:12:31,680 --> 00:12:35,680
this is really difficult to remember how

00:12:33,120 --> 00:12:37,440
to do in git but github desktop makes it

00:12:35,680 --> 00:12:39,760
as simple as adding their handle in the

00:12:37,440 --> 00:12:41,360
co-author field and that's it

00:12:39,760 --> 00:12:43,120
we think sharing credit is a really

00:12:41,360 --> 00:12:44,560
important part of building an inclusive

00:12:43,120 --> 00:12:46,000
and fun team environment

00:12:44,560 --> 00:12:47,360
and everyone is more productive when

00:12:46,000 --> 00:12:48,320
they feel like their contributions are

00:12:47,360 --> 00:12:52,480
valued

00:12:48,320 --> 00:12:54,480
so go ahead and use that co-author field

00:12:52,480 --> 00:12:56,079
we just saw how github cli helps you

00:12:54,480 --> 00:12:57,839
reduce context switching

00:12:56,079 --> 00:12:59,519
and how github desktop helps you focus

00:12:57,839 --> 00:13:01,120
on what matters most to you

00:12:59,519 --> 00:13:04,000
the final theme i want to show you is

00:13:01,120 --> 00:13:05,920
how github meets you where you are

00:13:04,000 --> 00:13:07,440
github's mobile app was released on ios

00:13:05,920 --> 00:13:09,200
and android just this year

00:13:07,440 --> 00:13:10,800
and if you haven't tried it you have to

00:13:09,200 --> 00:13:12,880
download it right when my talk is done

00:13:10,800 --> 00:13:14,720
it's amazing let's walk through a couple

00:13:12,880 --> 00:13:17,600
scenarios of how github mobile brings

00:13:14,720 --> 00:13:17,600
get up to where you are

00:13:17,839 --> 00:13:21,519
first and most obviously you can easily

00:13:19,920 --> 00:13:22,240
triage your github notifications on the

00:13:21,519 --> 00:13:24,880
go

00:13:22,240 --> 00:13:25,920
in pre-coveted times i'd be on the bus

00:13:24,880 --> 00:13:27,279
or on the train

00:13:25,920 --> 00:13:28,880
want to make sure that when i got to my

00:13:27,279 --> 00:13:29,680
desk i'd already have a sense of what i

00:13:28,880 --> 00:13:31,120
should work on

00:13:29,680 --> 00:13:33,120
and not get bogged down in a bunch of

00:13:31,120 --> 00:13:34,639
notifications that aren't important

00:13:33,120 --> 00:13:36,240
in the gita mobile app i can save

00:13:34,639 --> 00:13:38,160
notifications to come back to

00:13:36,240 --> 00:13:40,480
and mark notifications as done when i no

00:13:38,160 --> 00:13:42,000
longer need them

00:13:40,480 --> 00:13:43,839
one of the things i love about the

00:13:42,000 --> 00:13:45,120
mobile app is push notifications

00:13:43,839 --> 00:13:46,959
but i don't want to be interrupted by

00:13:45,120 --> 00:13:48,560
push notifications for everything

00:13:46,959 --> 00:13:50,560
just for things that truly deserve my

00:13:48,560 --> 00:13:52,160
attention so github's mobile app only

00:13:50,560 --> 00:13:53,120
sends you push notifications for app

00:13:52,160 --> 00:13:54,959
mentions

00:13:53,120 --> 00:13:56,560
in this case amanda is mentioning me on

00:13:54,959 --> 00:13:57,199
a pr where our colleague steve is

00:13:56,560 --> 00:13:58,320
blocked

00:13:57,199 --> 00:14:00,720
looks like something i should definitely

00:13:58,320 --> 00:14:02,560
check out

00:14:00,720 --> 00:14:04,560
tapping the notification puts me right

00:14:02,560 --> 00:14:06,320
into the right context of the pr

00:14:04,560 --> 00:14:08,160
where i can read the description scroll

00:14:06,320 --> 00:14:09,600
through it see what's changed

00:14:08,160 --> 00:14:11,760
and what needs to happen before we can

00:14:09,600 --> 00:14:16,880
get it merged in this case it looks like

00:14:11,760 --> 00:14:18,399
it's just my review blocking the pr

00:14:16,880 --> 00:14:20,240
so let's take a look at what's changed

00:14:18,399 --> 00:14:21,199
right in the mobile app i can scroll

00:14:20,240 --> 00:14:23,839
through the files

00:14:21,199 --> 00:14:24,959
mark files viewed as i go and even leave

00:14:23,839 --> 00:14:26,320
a review

00:14:24,959 --> 00:14:30,320
looks like this one is just a markdown

00:14:26,320 --> 00:14:31,920
file so it's pretty simple

00:14:30,320 --> 00:14:33,360
i love that github's mobile app allows

00:14:31,920 --> 00:14:34,720
me to at mention others

00:14:33,360 --> 00:14:36,560
and even provides a beautiful

00:14:34,720 --> 00:14:37,760
autocomplete interface to do so

00:14:36,560 --> 00:14:40,079
so i'll write a quick message to

00:14:37,760 --> 00:14:44,800
accompany my review

00:14:40,079 --> 00:14:46,880
and now i'm ready to approve the pr

00:14:44,800 --> 00:14:49,760
now that the pr is approved i see that

00:14:46,880 --> 00:14:49,760
it's ready to merge

00:14:50,240 --> 00:14:54,320
looks like everything is good to go it's

00:14:52,240 --> 00:14:57,519
approved all the checks are passing

00:14:54,320 --> 00:14:57,519
and there are no conflicts

00:14:57,600 --> 00:15:01,440
let's go ahead and merge and just like

00:14:59,600 --> 00:15:02,959
we saw earlier with getupcli

00:15:01,440 --> 00:15:04,560
you can merge using whatever method

00:15:02,959 --> 00:15:07,440
you're most comfortable with or whatever

00:15:04,560 --> 00:15:11,839
your project mandates

00:15:07,440 --> 00:15:14,000
and that's it to recap what we just saw

00:15:11,839 --> 00:15:16,079
i got a push notification from my phone

00:15:14,000 --> 00:15:18,000
on my co-worker at mentioning me

00:15:16,079 --> 00:15:19,120
i went right to the pr by tapping the

00:15:18,000 --> 00:15:21,600
notification

00:15:19,120 --> 00:15:22,399
i reviewed and approved it and i merged

00:15:21,600 --> 00:15:25,199
it all

00:15:22,399 --> 00:15:26,000
entirely from my phone github's mobile

00:15:25,199 --> 00:15:27,920
app frees you

00:15:26,000 --> 00:15:31,600
from being tethered to your desk and

00:15:27,920 --> 00:15:31,600
puts github at your fingertips

00:15:31,920 --> 00:15:35,920
we paired each of these themes with a

00:15:33,519 --> 00:15:37,920
single app but it's important to note

00:15:35,920 --> 00:15:40,000
that all of github's client apps

00:15:37,920 --> 00:15:42,560
helps you do each of these themes and i

00:15:40,000 --> 00:15:44,959
use all of them every single day

00:15:42,560 --> 00:15:46,480
for example we just look at how looked

00:15:44,959 --> 00:15:47,600
at how github for mobile meets you where

00:15:46,480 --> 00:15:49,600
you are

00:15:47,600 --> 00:15:50,720
but for your development workflows if

00:15:49,600 --> 00:15:52,639
you're the type of person

00:15:50,720 --> 00:15:54,800
who just lives in your terminal github

00:15:52,639 --> 00:15:56,480
cli is a great tool for you

00:15:54,800 --> 00:15:58,240
and similarly if you're a more visual

00:15:56,480 --> 00:15:59,839
person who gains confidence from being

00:15:58,240 --> 00:16:00,639
able to visualize exactly what you're

00:15:59,839 --> 00:16:04,160
doing

00:16:00,639 --> 00:16:04,160
github desktop is a great choice

00:16:07,279 --> 00:16:11,600
finally here's how you can try them out

00:16:09,600 --> 00:16:13,440
we only covered a small subset of what

00:16:11,600 --> 00:16:15,199
each of these apps enables for you

00:16:13,440 --> 00:16:17,040
so we hope you'll see for yourself how

00:16:15,199 --> 00:16:19,920
you can become even more productive

00:16:17,040 --> 00:16:20,880
with githubcli github desktop and get up

00:16:19,920 --> 00:16:22,720
mobile

00:16:20,880 --> 00:16:24,240
and as of the last month each one of

00:16:22,720 --> 00:16:28,399
these apps is available for github

00:16:24,240 --> 00:16:28,399
enterprise users as well as github.com

00:16:29,279 --> 00:16:32,560
to wrap up none of this would be

00:16:31,040 --> 00:16:34,399
possible without the feedback

00:16:32,560 --> 00:16:35,680
input and contributions from the users

00:16:34,399 --> 00:16:38,160
of github's apps

00:16:35,680 --> 00:16:40,079
since github cli is open source we built

00:16:38,160 --> 00:16:41,680
gh credits to say thanks to everyone who

00:16:40,079 --> 00:16:43,199
has contributed

00:16:41,680 --> 00:16:44,560
and i'd also like to personally say a

00:16:43,199 --> 00:16:45,920
thank you to all the engineers and

00:16:44,560 --> 00:16:47,839
designers here at github

00:16:45,920 --> 00:16:49,199
that made these products what they are

00:16:47,839 --> 00:16:50,560
and who continue to pour their hearts

00:16:49,199 --> 00:16:52,880
into making them even better

00:16:50,560 --> 00:16:54,240
every day and finally to everyone who

00:16:52,880 --> 00:16:55,920
uses these products

00:16:54,240 --> 00:16:57,680
thank you for giving us the opportunity

00:16:55,920 --> 00:17:02,000
to continue to build tools that enable

00:16:57,680 --> 00:17:02,000

YouTube URL: https://www.youtube.com/watch?v=0Jlb2BoxTUY


