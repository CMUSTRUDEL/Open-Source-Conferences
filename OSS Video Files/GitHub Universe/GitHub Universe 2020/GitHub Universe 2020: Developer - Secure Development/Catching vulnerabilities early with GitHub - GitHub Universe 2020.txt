Title: Catching vulnerabilities early with GitHub - GitHub Universe 2020
Publication date: 2020-12-09
Playlist: GitHub Universe 2020: Developer - Secure Development
Description: 
	Presented by:
Maya Kaczorowski, Product Manager, Software Supply Chain Security, GitHub
William Bartholomew, Staff Product Manager, GitHub

"Shifting left allows development teams to implement security controls earlier, thus helping your team catch issues earlier, too. In this talk, we’ll first cover what your supply chain is, including everything you need to know about the dependencies you pull into your software—including information on their vulnerabilities—to determine your risk profile. We'll then dive into what GitHub can do to help you address vulnerabilities in these dependencies and alert you when new vulnerabilities arise using Dependency Graph and Dependabot. Then, we’ll delve into new updates that will help you shift left starting today.

https://githubuniverse.com/developer"

For more from GitHub Universe 2020, visit https://githubuniverse.com

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:00,690 --> 00:00:06,070
[Music]

00:00:02,970 --> 00:00:06,070
[Applause]

00:00:06,880 --> 00:00:09,940
[Music]

00:00:12,160 --> 00:00:14,639
hello

00:00:12,799 --> 00:00:15,759
welcome thank you so much for joining us

00:00:14,639 --> 00:00:17,680
today to talk about catching

00:00:15,759 --> 00:00:19,840
vulnerabilities early with github

00:00:17,680 --> 00:00:21,760
i'm maya kaczorowski a product manager

00:00:19,840 --> 00:00:24,000
at github working on software supply

00:00:21,760 --> 00:00:26,080
chain security

00:00:24,000 --> 00:00:27,359
and i'm william bartholomew also a

00:00:26,080 --> 00:00:31,279
product manager at github

00:00:27,359 --> 00:00:33,200
working on supply chain security

00:00:31,279 --> 00:00:34,480
so today in this session we'll cover a

00:00:33,200 --> 00:00:36,399
couple of different topics

00:00:34,480 --> 00:00:38,000
first what your supply chain is

00:00:36,399 --> 00:00:39,520
including everything you need to know

00:00:38,000 --> 00:00:40,480
about the dependencies you pull into

00:00:39,520 --> 00:00:41,680
your software

00:00:40,480 --> 00:00:43,520
such as information on their

00:00:41,680 --> 00:00:44,960
vulnerabilities in order to determine

00:00:43,520 --> 00:00:46,640
your risk profile

00:00:44,960 --> 00:00:48,079
then we'll dive into what github can do

00:00:46,640 --> 00:00:49,280
to help you address vulnerabilities in

00:00:48,079 --> 00:00:50,879
these dependencies

00:00:49,280 --> 00:00:52,480
and alert you when new vulnerabilities

00:00:50,879 --> 00:00:54,559
arise using dependency graph

00:00:52,480 --> 00:00:56,000
and depend about and for the main

00:00:54,559 --> 00:00:56,480
attraction today i'll hand it over to

00:00:56,000 --> 00:00:58,079
william

00:00:56,480 --> 00:00:59,600
to delve into a new feature that we just

00:00:58,079 --> 00:01:01,199
demoed in the keynote this morning

00:00:59,600 --> 00:01:03,120
that will help you shift left starting

00:01:01,199 --> 00:01:04,960
today dependency review

00:01:03,120 --> 00:01:06,960
we'll cover what dependency review is

00:01:04,960 --> 00:01:10,840
how it works and how it can help you

00:01:06,960 --> 00:01:13,280
shift left so let's get

00:01:10,840 --> 00:01:13,760
started if you're unfamiliar with the

00:01:13,280 --> 00:01:16,560
term

00:01:13,760 --> 00:01:16,880
software supply chain it's used to refer

00:01:16,560 --> 00:01:18,720
to

00:01:16,880 --> 00:01:20,320
everything that goes into your software

00:01:18,720 --> 00:01:23,119
and where it comes from

00:01:20,320 --> 00:01:25,360
and what is that it's dependencies your

00:01:23,119 --> 00:01:27,360
software supply chain depends on well

00:01:25,360 --> 00:01:28,799
your dependencies as well as properties

00:01:27,360 --> 00:01:31,280
of your dependencies

00:01:28,799 --> 00:01:33,280
and what is a dependency a dependency is

00:01:31,280 --> 00:01:34,640
another binary that your software needs

00:01:33,280 --> 00:01:36,799
in order to run

00:01:34,640 --> 00:01:38,159
this can include both binaries required

00:01:36,799 --> 00:01:40,560
when building the application

00:01:38,159 --> 00:01:42,240
often called dev dependencies as well as

00:01:40,560 --> 00:01:43,439
binaries that are actually used at

00:01:42,240 --> 00:01:45,040
runtime

00:01:43,439 --> 00:01:46,880
a dependency enters your environment

00:01:45,040 --> 00:01:47,759
when a developer specifies it as part of

00:01:46,880 --> 00:01:49,840
your application

00:01:47,759 --> 00:01:51,360
in a manifest file where dependencies

00:01:49,840 --> 00:01:53,040
are declared or log file where

00:01:51,360 --> 00:01:55,200
particular versions of dependencies are

00:01:53,040 --> 00:01:56,719
specified dependencies can also be

00:01:55,200 --> 00:01:59,280
included transitively

00:01:56,719 --> 00:01:59,759
so a dependency of your dependency is

00:01:59,280 --> 00:02:02,159
also

00:01:59,759 --> 00:02:03,280
your dependency the thing is

00:02:02,159 --> 00:02:06,000
dependencies

00:02:03,280 --> 00:02:06,880
can be risky they're not code that you

00:02:06,000 --> 00:02:08,560
wrote you don't

00:02:06,880 --> 00:02:10,239
really know what's in them kind of like

00:02:08,560 --> 00:02:11,680
you don't really know what's in that 2

00:02:10,239 --> 00:02:12,319
a.m shawarma from the place around the

00:02:11,680 --> 00:02:14,879
corner

00:02:12,319 --> 00:02:16,160
it seems fine but you never know so one

00:02:14,879 --> 00:02:16,879
particular piece of information

00:02:16,160 --> 00:02:19,040
developers

00:02:16,879 --> 00:02:20,080
should pay attention to is vulnerability

00:02:19,040 --> 00:02:21,520
information

00:02:20,080 --> 00:02:23,360
if your dependency has known

00:02:21,520 --> 00:02:25,280
vulnerabilities well maybe you should

00:02:23,360 --> 00:02:27,120
update it to a patched version

00:02:25,280 --> 00:02:28,319
however not all vulnerabilities are

00:02:27,120 --> 00:02:31,200
properly disclosed

00:02:28,319 --> 00:02:32,000
or patched and there are other potential

00:02:31,200 --> 00:02:34,400
risks

00:02:32,000 --> 00:02:36,000
to using a given dependency other

00:02:34,400 --> 00:02:38,000
security risks that make it more

00:02:36,000 --> 00:02:39,920
susceptible to being attacked or harder

00:02:38,000 --> 00:02:42,000
to detect an attack

00:02:39,920 --> 00:02:43,519
legal and compliance risks for using a

00:02:42,000 --> 00:02:46,560
dependency in a way that's not

00:02:43,519 --> 00:02:48,800
in line with the specified license

00:02:46,560 --> 00:02:50,239
maintenance risks if a dependency is no

00:02:48,800 --> 00:02:51,440
longer supported and you don't have a

00:02:50,239 --> 00:02:54,319
viable alternative

00:02:51,440 --> 00:02:55,840
and other risks as well so to make the

00:02:54,319 --> 00:02:58,720
dependencies that you pull in

00:02:55,840 --> 00:03:00,159
less scary we want transparency as to

00:02:58,720 --> 00:03:02,319
what's in them so that you can be

00:03:00,159 --> 00:03:03,920
confident in what you're consuming

00:03:02,319 --> 00:03:06,560
this means means that you might want to

00:03:03,920 --> 00:03:09,360
know for a given dependency

00:03:06,560 --> 00:03:11,440
who wrote it when it was contributed how

00:03:09,360 --> 00:03:13,599
it's been reviewed for security issues

00:03:11,440 --> 00:03:15,680
any known vulnerabilities supported

00:03:13,599 --> 00:03:17,680
versions license information

00:03:15,680 --> 00:03:19,599
everything all of these things help you

00:03:17,680 --> 00:03:22,720
determine your risk profile

00:03:19,599 --> 00:03:23,760
but that's just a given dependency and

00:03:22,720 --> 00:03:27,200
the reality is

00:03:23,760 --> 00:03:29,920
you probably have a lot of dependencies

00:03:27,200 --> 00:03:31,280
software dependencies are pervasive it's

00:03:29,920 --> 00:03:32,959
normal for your project

00:03:31,280 --> 00:03:34,400
to use hundreds or even thousands of

00:03:32,959 --> 00:03:37,200
open source dependencies

00:03:34,400 --> 00:03:38,000
the developer didn't write themselves

00:03:37,200 --> 00:03:40,319
from the latest

00:03:38,000 --> 00:03:41,120
state of the octoverse report we know

00:03:40,319 --> 00:03:45,040
that anywhere

00:03:41,120 --> 00:03:46,480
from 65 to 94 of active repos rely on

00:03:45,040 --> 00:03:48,319
open source code

00:03:46,480 --> 00:03:49,840
with the variability depending on the

00:03:48,319 --> 00:03:51,519
ecosystem

00:03:49,840 --> 00:03:53,760
and that although although the median

00:03:51,519 --> 00:03:55,760
active repo might only have a handful of

00:03:53,760 --> 00:03:58,640
direct dependencies

00:03:55,760 --> 00:04:00,640
it has many hidden indirect dependencies

00:03:58,640 --> 00:04:01,879
with javascript being the clear winner

00:04:00,640 --> 00:04:05,200
with a median

00:04:01,879 --> 00:04:08,640
683 transitive dependencies

00:04:05,200 --> 00:04:12,319
whoa so so many dependencies so

00:04:08,640 --> 00:04:14,080
what can you do on github today

00:04:12,319 --> 00:04:15,519
if you're using github there are several

00:04:14,080 --> 00:04:16,639
features you can take advantage of to

00:04:15,519 --> 00:04:19,120
improve the security of your

00:04:16,639 --> 00:04:22,320
dependencies

00:04:19,120 --> 00:04:23,520
um we have uh first you need to know

00:04:22,320 --> 00:04:25,520
your environment so you need to

00:04:23,520 --> 00:04:26,880
understand what dependencies you use and

00:04:25,520 --> 00:04:28,400
manage your dependencies that is

00:04:26,880 --> 00:04:30,000
know about vulnerabilities in those

00:04:28,400 --> 00:04:33,199
dependencies and

00:04:30,000 --> 00:04:34,639
patches so you can address them really

00:04:33,199 --> 00:04:38,240
be quick to discover it

00:04:34,639 --> 00:04:38,880
and react to it on github to know your

00:04:38,240 --> 00:04:42,080
environment

00:04:38,880 --> 00:04:45,360
use dependency graph dependency graph

00:04:42,080 --> 00:04:47,360
identifies all upstream dependencies and

00:04:45,360 --> 00:04:50,160
public downstream dependence

00:04:47,360 --> 00:04:51,280
of a repository or package and items are

00:04:50,160 --> 00:04:52,720
automatically added

00:04:51,280 --> 00:04:54,560
to the dependency graph when you add a

00:04:52,720 --> 00:04:56,880
new dependency

00:04:54,560 --> 00:04:58,240
and to manage your dependencies

00:04:56,880 --> 00:05:00,479
dependable alerts

00:04:58,240 --> 00:05:02,560
notify you of repositories affected by a

00:05:00,479 --> 00:05:04,240
newly discovered vulnerability

00:05:02,560 --> 00:05:05,919
to do this github compares the

00:05:04,240 --> 00:05:07,600
information in the dependency graph

00:05:05,919 --> 00:05:10,400
to the information in github's advisory

00:05:07,600 --> 00:05:11,919
database a dependable alert can either

00:05:10,400 --> 00:05:14,400
be sent when you added

00:05:11,919 --> 00:05:15,840
a new dependency um or when a new

00:05:14,400 --> 00:05:18,000
vulnerabilities is covered in an

00:05:15,840 --> 00:05:20,400
existing dependency that you have

00:05:18,000 --> 00:05:21,360
dependable security updates will send

00:05:20,400 --> 00:05:23,039
you a pull request

00:05:21,360 --> 00:05:24,639
to update a dependency to the minimum

00:05:23,039 --> 00:05:25,759
version that resolves a known

00:05:24,639 --> 00:05:27,840
vulnerability

00:05:25,759 --> 00:05:29,680
this is done automatically based on

00:05:27,840 --> 00:05:30,240
known vulnerabilities and known patched

00:05:29,680 --> 00:05:32,080
versions

00:05:30,240 --> 00:05:35,039
by suggesting a change to update

00:05:32,080 --> 00:05:37,759
packages in a lock file

00:05:35,039 --> 00:05:39,600
and lastly dependable version updates

00:05:37,759 --> 00:05:40,560
keep your dependencies up to date

00:05:39,600 --> 00:05:42,400
even when there isn't a new

00:05:40,560 --> 00:05:44,800
vulnerability by checking for new

00:05:42,400 --> 00:05:47,199
versions on a configured schedule

00:05:44,800 --> 00:05:48,720
dependency graph dependable alerts

00:05:47,199 --> 00:05:52,080
independent about security updates are

00:05:48,720 --> 00:05:53,680
all on for public repos by default and

00:05:52,080 --> 00:05:55,600
so putting it all together that means

00:05:53,680 --> 00:05:57,680
that instead of having to identify

00:05:55,600 --> 00:05:59,440
examine triage the vulnerabilities

00:05:57,680 --> 00:06:00,800
independencies yourself

00:05:59,440 --> 00:06:02,240
with these features with dependency

00:06:00,800 --> 00:06:03,919
graph dependable alerts and the pen

00:06:02,240 --> 00:06:05,440
about security updates enabled

00:06:03,919 --> 00:06:07,919
managing a new vulnerability is as

00:06:05,440 --> 00:06:09,680
simple as merging prs from dependable

00:06:07,919 --> 00:06:10,960
now that sounds too good to be true

00:06:09,680 --> 00:06:13,199
right

00:06:10,960 --> 00:06:14,319
well it isn't really it really is that

00:06:13,199 --> 00:06:16,479
straightforward but

00:06:14,319 --> 00:06:18,319
please still be cautious review the

00:06:16,479 --> 00:06:20,400
content of your pr's

00:06:18,319 --> 00:06:22,319
if the patch requires a major version

00:06:20,400 --> 00:06:23,919
change you'll want to ensure it's still

00:06:22,319 --> 00:06:25,759
compatible with your environment

00:06:23,919 --> 00:06:27,759
the most important thing to do here is

00:06:25,759 --> 00:06:29,520
to please please run your normal test

00:06:27,759 --> 00:06:32,240
suite against these changes

00:06:29,520 --> 00:06:33,280
to ensure that they will work and you

00:06:32,240 --> 00:06:35,440
might also have to wait

00:06:33,280 --> 00:06:37,120
to patch and to avoid interrupting any

00:06:35,440 --> 00:06:39,039
operations that you have going on

00:06:37,120 --> 00:06:40,639
so it's not always as straightforward as

00:06:39,039 --> 00:06:42,479
you'd like it to be

00:06:40,639 --> 00:06:44,319
our goal here is still to help you find

00:06:42,479 --> 00:06:46,240
and patch vulnerabilities faster

00:06:44,319 --> 00:06:47,600
and the reality is and i'm happy to say

00:06:46,240 --> 00:06:49,280
it's working

00:06:47,600 --> 00:06:51,360
from the latest state of the october

00:06:49,280 --> 00:06:52,880
report again we know that repositories

00:06:51,360 --> 00:06:53,759
using automation define and address

00:06:52,880 --> 00:06:55,680
vulnerabilities

00:06:53,759 --> 00:06:57,680
like dependable security updates

00:06:55,680 --> 00:07:00,000
remediate those faster

00:06:57,680 --> 00:07:01,680
where a repository automatically

00:07:00,000 --> 00:07:02,880
generated a pull request to update to

00:07:01,680 --> 00:07:05,199
the fixed version

00:07:02,880 --> 00:07:07,360
they patched their software in 33 days

00:07:05,199 --> 00:07:08,240
which is 13 days faster than those who

00:07:07,360 --> 00:07:10,000
didn't

00:07:08,240 --> 00:07:13,360
that's for meeting and remediating an

00:07:10,000 --> 00:07:15,360
issue 1.4 times faster

00:07:13,360 --> 00:07:16,800
and by automating patch management you

00:07:15,360 --> 00:07:17,759
can focus your team's resources where it

00:07:16,800 --> 00:07:19,440
really matters

00:07:17,759 --> 00:07:21,520
for simple patches there's not much to

00:07:19,440 --> 00:07:22,880
do fine and for more complex patches

00:07:21,520 --> 00:07:24,160
they can now spend much more time

00:07:22,880 --> 00:07:25,520
validating an upgrade

00:07:24,160 --> 00:07:27,199
and ensuring that your systems make the

00:07:25,520 --> 00:07:29,199
change safely this makes it

00:07:27,199 --> 00:07:31,759
easier and safer to integrate fixes into

00:07:29,199 --> 00:07:33,440
your environment

00:07:31,759 --> 00:07:34,880
so what we've been talking about so far

00:07:33,440 --> 00:07:35,680
are remediations and dependency

00:07:34,880 --> 00:07:37,440
management

00:07:35,680 --> 00:07:39,039
after the fact once you already have a

00:07:37,440 --> 00:07:40,800
dependency

00:07:39,039 --> 00:07:42,319
but there's an ongoing trend in devops

00:07:40,800 --> 00:07:44,240
to shift left to move

00:07:42,319 --> 00:07:46,000
processes earlier in the development

00:07:44,240 --> 00:07:47,919
life cycle where development teams are

00:07:46,000 --> 00:07:49,759
so they can take action

00:07:47,919 --> 00:07:51,680
and a developer-centric approach means

00:07:49,759 --> 00:07:53,120
that developers can stay in context and

00:07:51,680 --> 00:07:55,280
respond to issues when they code

00:07:53,120 --> 00:07:56,960
not days later at deployment time or

00:07:55,280 --> 00:07:58,960
worse months later from a penetration

00:07:56,960 --> 00:08:00,639
penetration test report

00:07:58,960 --> 00:08:03,039
by moving steps like testing including

00:08:00,639 --> 00:08:05,039
security testing from a final gate at

00:08:03,039 --> 00:08:06,960
deployment time to an earlier step

00:08:05,039 --> 00:08:08,720
fewer mistakes are made and developers

00:08:06,960 --> 00:08:10,080
can move more quickly

00:08:08,720 --> 00:08:11,759
dependable already helps you a little

00:08:10,080 --> 00:08:13,280
bit with that today it not only warns

00:08:11,759 --> 00:08:14,960
you about a security issue in your repos

00:08:13,280 --> 00:08:16,319
dependencies but it does send you a pull

00:08:14,960 --> 00:08:18,000
request to respond to

00:08:16,319 --> 00:08:19,360
that means that instead of a vulnerable

00:08:18,000 --> 00:08:21,120
dependency being an issue for the

00:08:19,360 --> 00:08:22,720
security team to follow up on

00:08:21,120 --> 00:08:24,240
it's a pull request for the development

00:08:22,720 --> 00:08:26,160
team to review

00:08:24,240 --> 00:08:27,599
but all this thinking about shifting

00:08:26,160 --> 00:08:29,440
left let us a github to think

00:08:27,599 --> 00:08:31,520
what if we could tell a developer in

00:08:29,440 --> 00:08:32,959
context what they needed to catch these

00:08:31,520 --> 00:08:35,360
vulnerable dependencies

00:08:32,959 --> 00:08:37,120
before they're introduced to begin with

00:08:35,360 --> 00:08:41,599
so let's welcome back william to show us

00:08:37,120 --> 00:08:44,240
how that's possible on github now

00:08:41,599 --> 00:08:44,720
thanks maya fire has just shown us why

00:08:44,240 --> 00:08:47,200
it's so

00:08:44,720 --> 00:08:48,880
important to manage your dependencies

00:08:47,200 --> 00:08:49,920
and some of the features that github

00:08:48,880 --> 00:08:52,800
provides to do

00:08:49,920 --> 00:08:54,800
just that i'm going to show you our

00:08:52,800 --> 00:08:56,480
newest feature dependency review

00:08:54,800 --> 00:08:59,600
which helps you shift dependency

00:08:56,480 --> 00:08:59,600
management left

00:08:59,760 --> 00:09:03,839
so what is dependency to review

00:09:01,920 --> 00:09:05,279
dependency review lets you easily see

00:09:03,839 --> 00:09:06,320
changes to your repositories

00:09:05,279 --> 00:09:07,920
dependencies

00:09:06,320 --> 00:09:09,360
and the vulnerabilities in those

00:09:07,920 --> 00:09:11,120
dependencies when reviewing pull

00:09:09,360 --> 00:09:13,040
requests

00:09:11,120 --> 00:09:14,720
if you've ever reviewed changes to a

00:09:13,040 --> 00:09:17,760
dependency manifest file such as a

00:09:14,720 --> 00:09:19,519
package.json or package.json

00:09:17,760 --> 00:09:21,760
then you know how difficult it can be to

00:09:19,519 --> 00:09:24,480
see exactly what changed

00:09:21,760 --> 00:09:26,480
people aren't great json xml or even

00:09:24,480 --> 00:09:28,000
yaml parsers and we shouldn't expect you

00:09:26,480 --> 00:09:29,839
to be

00:09:28,000 --> 00:09:31,120
once you've worked out what's changed do

00:09:29,839 --> 00:09:34,800
you go one by one

00:09:31,120 --> 00:09:37,680
and look up every dependency to

00:09:34,800 --> 00:09:38,640
see if it has vulnerabilities probably

00:09:37,680 --> 00:09:41,839
not

00:09:38,640 --> 00:09:43,680
as this isn't practical at scale

00:09:41,839 --> 00:09:46,480
especially if you consider transitive

00:09:43,680 --> 00:09:48,320
also called indirect dependencies

00:09:46,480 --> 00:09:50,880
if you're a savvy github user then you

00:09:48,320 --> 00:09:52,399
may have turned on dependable alerts

00:09:50,880 --> 00:09:54,399
to alert you to vulnerabilities in your

00:09:52,399 --> 00:09:56,399
repository's dependencies

00:09:54,399 --> 00:09:58,160
there's no fun for anyone merging a pull

00:09:56,399 --> 00:10:00,720
request only then to find out it

00:09:58,160 --> 00:10:03,120
introduces a new vulnerability

00:10:00,720 --> 00:10:04,800
if someone introduces a new dependency

00:10:03,120 --> 00:10:08,160
what do you know about that dependency

00:10:04,800 --> 00:10:10,720
is it commonly used how is it licensed

00:10:08,160 --> 00:10:19,839
so let's see how dependency review helps

00:10:10,720 --> 00:10:19,839
solve these problems with a demo

00:10:23,839 --> 00:10:30,839
okay so here i've got a

00:10:27,360 --> 00:10:34,959
pretty standard express application

00:10:30,839 --> 00:10:36,160
that i generated using express generator

00:10:34,959 --> 00:10:38,959
and we're going to take a look at some

00:10:36,160 --> 00:10:42,240
of the pull requests that are in

00:10:38,959 --> 00:10:43,760
this repository

00:10:42,240 --> 00:10:45,519
so if i jump over to the normal pull

00:10:43,760 --> 00:10:46,000
request tab like i would when reviewing

00:10:45,519 --> 00:10:50,160
any pull

00:10:46,000 --> 00:10:53,680
requests i'm going to pull up this first

00:10:50,160 --> 00:10:54,800
pull request which is you know updating

00:10:53,680 --> 00:10:56,399
looks like we're going to output

00:10:54,800 --> 00:10:57,920
operating system in front of the console

00:10:56,399 --> 00:11:00,320
when the server started so i'm going to

00:10:57,920 --> 00:11:03,600
jump over to the files change tab

00:11:00,320 --> 00:11:05,600
and take a look at the changes so this

00:11:03,600 --> 00:11:09,279
all looks pretty innocuous you know

00:11:05,600 --> 00:11:10,959
importing a module calling some code

00:11:09,279 --> 00:11:14,240
then we've got the changes to the

00:11:10,959 --> 00:11:16,000
package manifest themselves

00:11:14,240 --> 00:11:17,279
um so if we look at the package json

00:11:16,000 --> 00:11:22,480
first

00:11:17,279 --> 00:11:22,480
yeah i can see that the um

00:11:22,959 --> 00:11:28,399
version of system information or this

00:11:25,680 --> 00:11:30,399
new package has been introduced

00:11:28,399 --> 00:11:32,079
uh but it looks like this didn't change

00:11:30,399 --> 00:11:34,240
it's marked as a diff but it looks like

00:11:32,079 --> 00:11:36,160
there's just an extra comma there

00:11:34,240 --> 00:11:37,600
so let's switch over to dependency

00:11:36,160 --> 00:11:40,560
review to see if it can give us a

00:11:37,600 --> 00:11:43,120
clearer view of what went on here

00:11:40,560 --> 00:11:45,519
and so here i can see at a glance that

00:11:43,120 --> 00:11:48,320
you know a new dependency was added

00:11:45,519 --> 00:11:49,920
and this was the version range but i can

00:11:48,320 --> 00:11:51,839
also see that

00:11:49,920 --> 00:11:53,440
this particular version has a couple of

00:11:51,839 --> 00:11:54,800
vulnerabilities

00:11:53,440 --> 00:11:57,680
and so i might want to look if there's a

00:11:54,800 --> 00:11:59,440
newer version i can jump in and

00:11:57,680 --> 00:12:02,079
take a look at the advisory to see

00:11:59,440 --> 00:12:05,040
what's going on

00:12:02,079 --> 00:12:05,839
um and if i take a look at the package

00:12:05,040 --> 00:12:08,480
lock here

00:12:05,839 --> 00:12:10,000
i can see that you know this diff is

00:12:08,480 --> 00:12:13,040
complex enough that it's not rendered

00:12:10,000 --> 00:12:16,160
by default but again i can jump in

00:12:13,040 --> 00:12:19,600
and see the details here and i can see

00:12:16,160 --> 00:12:21,680
you know ten point ten point

00:12:19,600 --> 00:12:23,360
seven thousand repositories depend on

00:12:21,680 --> 00:12:26,800
this particular one

00:12:23,360 --> 00:12:29,760
now if i jump over to

00:12:26,800 --> 00:12:32,720
another pr let's see what happens in

00:12:29,760 --> 00:12:32,720
other scenarios

00:12:33,120 --> 00:12:37,040
so if i look at this particular one

00:12:35,120 --> 00:12:39,920
we'll go through the same workflow

00:12:37,040 --> 00:12:41,839
you know we review the code again pretty

00:12:39,920 --> 00:12:45,120
simple change

00:12:41,839 --> 00:12:47,040
just adding a new dependency oh

00:12:45,120 --> 00:12:48,480
again we can see there's a vulnerability

00:12:47,040 --> 00:12:50,959
but let's take a look at the diff for

00:12:48,480 --> 00:12:52,880
this one

00:12:50,959 --> 00:12:55,360
in this case the diff was a lot more

00:12:52,880 --> 00:12:57,760
complex you know this particular package

00:12:55,360 --> 00:13:00,079
has a lot of dependencies

00:12:57,760 --> 00:13:01,600
and we can go through and see what those

00:13:00,079 --> 00:13:04,399
transitive dependencies are

00:13:01,600 --> 00:13:06,560
how they're licensed what they depend on

00:13:04,399 --> 00:13:08,800
and vulnerabilities that are being

00:13:06,560 --> 00:13:10,240
introduced by those indirect

00:13:08,800 --> 00:13:12,720
dependencies

00:13:10,240 --> 00:13:13,680
to decide whether you know this

00:13:12,720 --> 00:13:15,120
particular pr

00:13:13,680 --> 00:13:17,279
is something we're willing to accept or

00:13:15,120 --> 00:13:22,720
do we want to work with the contributor

00:13:17,279 --> 00:13:22,720
of the pr to upgrade those dependencies

00:13:23,040 --> 00:13:26,240
the final scenario i want to show you

00:13:24,880 --> 00:13:29,360
here is

00:13:26,240 --> 00:13:30,079
an update to a dependency so in this

00:13:29,360 --> 00:13:33,440
case

00:13:30,079 --> 00:13:36,720
this was a dependency that the

00:13:33,440 --> 00:13:38,720
project already had if i take a look at

00:13:36,720 --> 00:13:41,760
the files changes again we can see

00:13:38,720 --> 00:13:43,760
if this is a major version change

00:13:41,760 --> 00:13:45,760
um so we can expect there to be a fair

00:13:43,760 --> 00:13:48,160
number of changes here

00:13:45,760 --> 00:13:49,519
again the dependency reviews giving me

00:13:48,160 --> 00:13:52,639
that at a glance here

00:13:49,519 --> 00:13:54,320
here's exactly what changed if we take a

00:13:52,639 --> 00:13:57,279
look at the

00:13:54,320 --> 00:13:59,920
package block json here we can see that

00:13:57,279 --> 00:14:02,240
there's a lot of diffs in this json file

00:13:59,920 --> 00:14:03,360
you know there's almost 20 000 changes

00:14:02,240 --> 00:14:06,560
in total

00:14:03,360 --> 00:14:08,480
um 4 000 editions six almost 16 000

00:14:06,560 --> 00:14:10,560
deletions

00:14:08,480 --> 00:14:12,560
this probably isn't something where we

00:14:10,560 --> 00:14:14,399
want to review the json changes so let's

00:14:12,560 --> 00:14:16,560
see if defensive review is helping us

00:14:14,399 --> 00:14:19,199
here as well

00:14:16,560 --> 00:14:20,880
so i'm going to switch to the rich diff

00:14:19,199 --> 00:14:24,399
and again we get that

00:14:20,880 --> 00:14:26,480
very clear view of you know this

00:14:24,399 --> 00:14:27,839
particular version was updated and has a

00:14:26,480 --> 00:14:30,720
dependency

00:14:27,839 --> 00:14:32,240
i can see all of the individual

00:14:30,720 --> 00:14:35,279
dependencies that were

00:14:32,240 --> 00:14:38,000
added if i want to i can click through

00:14:35,279 --> 00:14:40,399
to see the repository that produces that

00:14:38,000 --> 00:14:42,800
particular dependency

00:14:40,399 --> 00:14:45,600
and in this case i can also see if i

00:14:42,800 --> 00:14:47,680
scroll down

00:14:45,600 --> 00:14:50,079
um dependencies are being removed so i

00:14:47,680 --> 00:14:53,760
can get that at a glance feel for

00:14:50,079 --> 00:14:56,240
you know is what is the overall impact

00:14:53,760 --> 00:14:56,240
of this

00:14:57,199 --> 00:15:03,760
so jumping back to the presentation for

00:15:01,279 --> 00:15:03,760
a minute

00:15:04,880 --> 00:15:07,440
one of the

00:15:08,639 --> 00:15:12,320
um now that you've seen it in action

00:15:10,720 --> 00:15:14,240
let's take a look at how it works

00:15:12,320 --> 00:15:16,079
and we'll start with a typical pull

00:15:14,240 --> 00:15:18,079
request workflow

00:15:16,079 --> 00:15:20,959
that reviews commits between a topic

00:15:18,079 --> 00:15:23,920
branch and a compare branch

00:15:20,959 --> 00:15:27,839
with dependency review we extend this to

00:15:23,920 --> 00:15:27,839
generate a dependency manifest

00:15:33,120 --> 00:15:36,959
for both branches these dependency

00:15:35,199 --> 00:15:37,920
manifests are generated by github's

00:15:36,959 --> 00:15:40,079
dependency graph

00:15:37,920 --> 00:15:42,399
the same one that shows dependencies on

00:15:40,079 --> 00:15:44,959
repositories and powers depend upon

00:15:42,399 --> 00:15:44,959
alerts

00:15:45,680 --> 00:15:57,440
once we have those dependency manifests

00:15:54,880 --> 00:15:59,040
we then compare them to work out exactly

00:15:57,440 --> 00:16:01,440
what changed

00:15:59,040 --> 00:16:03,360
and pull in additional package metadata

00:16:01,440 --> 00:16:05,199
which is then displayed in the rich diff

00:16:03,360 --> 00:16:07,279
in the pull request

00:16:05,199 --> 00:16:09,440
this process updates whenever the pull

00:16:07,279 --> 00:16:10,880
request is updated or the destination

00:16:09,440 --> 00:16:13,279
branch is updated

00:16:10,880 --> 00:16:16,959
so you'll always always understand the

00:16:13,279 --> 00:16:18,800
impact of a pull request on dependencies

00:16:16,959 --> 00:16:20,560
and what's great about dependency review

00:16:18,800 --> 00:16:23,680
is if you have dependency graph

00:16:20,560 --> 00:16:26,240
already turned on there's no additional

00:16:23,680 --> 00:16:27,440
onboarding or configuration to have

00:16:26,240 --> 00:16:30,800
dependency review

00:16:27,440 --> 00:16:30,800
work in your repository

00:16:31,839 --> 00:16:38,720
so how does this work

00:16:35,360 --> 00:16:40,800
with defendable alerts so

00:16:38,720 --> 00:16:42,720
why i spoke earlier about defenderbot

00:16:40,800 --> 00:16:44,959
alerts and this helps you react to

00:16:42,720 --> 00:16:46,560
vulnerabilities that already exist in

00:16:44,959 --> 00:16:48,160
your dependency manifests

00:16:46,560 --> 00:16:50,320
or when new vulnerabilities are

00:16:48,160 --> 00:16:51,680
discovered in existing dependencies that

00:16:50,320 --> 00:16:53,360
you have

00:16:51,680 --> 00:16:56,560
it will also catch changes that are

00:16:53,360 --> 00:16:58,880
pushed directly to the repository

00:16:56,560 --> 00:17:00,720
dependency review helps you shift left

00:16:58,880 --> 00:17:01,839
catching vulnerable dependencies before

00:17:00,720 --> 00:17:03,839
they're introduced

00:17:01,839 --> 00:17:04,880
as well as giving you more context about

00:17:03,839 --> 00:17:06,799
those dependencies

00:17:04,880 --> 00:17:09,039
they're complementary and you should use

00:17:06,799 --> 00:17:09,039
both

00:17:12,400 --> 00:17:19,839
github provides other ways to shift left

00:17:18,000 --> 00:17:22,400
you can use code scanning to run static

00:17:19,839 --> 00:17:24,160
analysis including code ql but also any

00:17:22,400 --> 00:17:26,880
code scanning tool that outputs

00:17:24,160 --> 00:17:28,480
industry standard serif dependerbot

00:17:26,880 --> 00:17:29,679
version updates will help keep you on

00:17:28,480 --> 00:17:31,600
the latest stable

00:17:29,679 --> 00:17:32,799
version of your dependencies which can

00:17:31,600 --> 00:17:34,400
help avoid

00:17:32,799 --> 00:17:36,799
undiscovered vulnerabilities and take

00:17:34,400 --> 00:17:39,039
the pain out of having to upgrade across

00:17:36,799 --> 00:17:40,160
many versions when a new vulnerability

00:17:39,039 --> 00:17:42,640
is found

00:17:40,160 --> 00:17:44,400
you can use actions to run build test or

00:17:42,640 --> 00:17:46,799
other automation on pull requests to

00:17:44,400 --> 00:17:48,720
validate changes and of course you can

00:17:46,799 --> 00:17:50,640
use protected branches and check suites

00:17:48,720 --> 00:17:54,480
to ensure these requirements are met

00:17:50,640 --> 00:17:54,480
when merging into specific branches

00:17:57,440 --> 00:18:01,200
dependency review is currently rolling

00:17:59,120 --> 00:18:02,080
out for public repositories so if it's

00:18:01,200 --> 00:18:04,880
not already there

00:18:02,080 --> 00:18:05,919
it will be over the next few weeks to

00:18:04,880 --> 00:18:07,360
see it in action

00:18:05,919 --> 00:18:09,200
when reviewing a pull request that

00:18:07,360 --> 00:18:10,640
modifies a manifest file

00:18:09,200 --> 00:18:12,480
click on the rich gif to get this

00:18:10,640 --> 00:18:13,520
streamlined review experience that will

00:18:12,480 --> 00:18:16,640
also highlight

00:18:13,520 --> 00:18:16,640
known vulnerabilities

00:18:20,240 --> 00:18:23,120
if you'd like to learn more about

00:18:21,360 --> 00:18:24,880
defensive review or some of the other

00:18:23,120 --> 00:18:26,480
features we've talked about today

00:18:24,880 --> 00:18:28,480
please check out these things these

00:18:26,480 --> 00:18:29,200
links we'd love to hear your feedback as

00:18:28,480 --> 00:18:31,919
well so

00:18:29,200 --> 00:18:32,559
keep it coming and thank you so much for

00:18:31,919 --> 00:18:39,039
joining us

00:18:32,559 --> 00:18:39,039

YouTube URL: https://www.youtube.com/watch?v=l2epzyytPGE


