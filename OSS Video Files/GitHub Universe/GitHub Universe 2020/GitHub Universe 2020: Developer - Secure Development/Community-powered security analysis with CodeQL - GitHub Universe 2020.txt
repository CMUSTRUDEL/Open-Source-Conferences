Title: Community-powered security analysis with CodeQL - GitHub Universe 2020
Publication date: 2020-12-11
Playlist: GitHub Universe 2020: Developer - Secure Development
Description: 
	Presented by: 
Bas van Schaik, Staff Product Manager, GitHub
Xavier RenÃ©-Corail, Director of Security Research, GitHub

CodeQL security analysis powers GitHub code scanning and has helped identify and prevent thousands of security vulnerabilities. Through code scanning, it analyzes your pull requests and flags up security issues as early as possible. But who creates these CodeQL queries and how do they know what to look for? For the last two years, a community of security researchers have been contributing to CodeQL queries that formalize their security knowledge. Queries written by independent researchers, enterprise security teams, and everyone in between now help protect all CodeQL users from security vulnerabilities. In this session you'll find out more about this community, the bounty programs, and the tools they use to help you secure your code. And how you can become part of it!

For more from GitHub Universe 2020, visit https://githubuniverse.com

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:06,960 --> 00:00:10,320
hey everyone

00:00:07,919 --> 00:00:11,519
good morning good afternoon good evening

00:00:10,320 --> 00:00:13,360
to you all from my home

00:00:11,519 --> 00:00:14,880
here in oxford and thank you very much

00:00:13,360 --> 00:00:17,119
for joining us today

00:00:14,880 --> 00:00:18,000
my name is baz i'm a product manager

00:00:17,119 --> 00:00:19,600
here at github

00:00:18,000 --> 00:00:21,840
and i look after the codeql analysis

00:00:19,600 --> 00:00:24,080
technology joining me today

00:00:21,840 --> 00:00:25,039
is my colleague zavier who is the

00:00:24,080 --> 00:00:28,160
director

00:00:25,039 --> 00:00:31,359
of our github security

00:00:28,160 --> 00:00:33,280
lab sergey and his team use um the

00:00:31,359 --> 00:00:34,800
qr technology that i look after on a

00:00:33,280 --> 00:00:37,360
daily basis to hunt

00:00:34,800 --> 00:00:38,719
for security vulnerabilities and today

00:00:37,360 --> 00:00:40,800
we'd like to tell you a bit more about

00:00:38,719 --> 00:00:42,879
how the security community

00:00:40,800 --> 00:00:44,960
powers github code scanning through the

00:00:42,879 --> 00:00:46,719
use of code qr technology

00:00:44,960 --> 00:00:48,960
for those of you who are new to code

00:00:46,719 --> 00:00:50,320
scanning new to security analysis and

00:00:48,960 --> 00:00:53,760
new to code qr don't worry

00:00:50,320 --> 00:00:56,239
we'll take you through it step by step

00:00:53,760 --> 00:00:57,039
but before we continue i would like to

00:00:56,239 --> 00:00:58,559
share with

00:00:57,039 --> 00:01:01,120
you and celebrate with you a very

00:00:58,559 --> 00:01:03,280
special achievement a year ago

00:01:01,120 --> 00:01:04,799
our teams joined github to help secure

00:01:03,280 --> 00:01:07,520
the world's source code

00:01:04,799 --> 00:01:09,360
and at universe last year we made codeql

00:01:07,520 --> 00:01:12,000
freely available to the community

00:01:09,360 --> 00:01:12,960
and we announced a bounty program for

00:01:12,000 --> 00:01:14,799
contributions

00:01:12,960 --> 00:01:16,240
that help secure the open source

00:01:14,799 --> 00:01:19,119
ecosystem

00:01:16,240 --> 00:01:21,280
last week we exceeded the milestone of

00:01:19,119 --> 00:01:21,920
one hundred thousand dollars worth and

00:01:21,280 --> 00:01:24,960
banties

00:01:21,920 --> 00:01:26,080
to secure the open source ecosystem and

00:01:24,960 --> 00:01:27,680
those bounties

00:01:26,080 --> 00:01:29,360
were paid to members of the security

00:01:27,680 --> 00:01:29,920
community who shared their security

00:01:29,360 --> 00:01:31,680
knowledge

00:01:29,920 --> 00:01:33,119
in the form of open source code qr

00:01:31,680 --> 00:01:35,520
queries and these

00:01:33,119 --> 00:01:36,960
security analyses can now be used by by

00:01:35,520 --> 00:01:40,320
everyone and anyone

00:01:36,960 --> 00:01:42,399
and they help secure the open source

00:01:40,320 --> 00:01:44,399
software that we all write thank you

00:01:42,399 --> 00:01:45,600
everybody who contributed and keep up

00:01:44,399 --> 00:01:47,439
the good work

00:01:45,600 --> 00:01:49,520
in this talk i will give you a few

00:01:47,439 --> 00:01:51,520
examples of such contributions

00:01:49,520 --> 00:01:52,799
and will tell you a bit more about the

00:01:51,520 --> 00:01:55,280
impact that they've had

00:01:52,799 --> 00:01:55,920
and of course i will tell you how you

00:01:55,280 --> 00:01:58,000
can

00:01:55,920 --> 00:01:59,200
how you can participate yourself in this

00:01:58,000 --> 00:02:00,960
program

00:01:59,200 --> 00:02:02,960
i'll start with an introduction to

00:02:00,960 --> 00:02:04,079
github code scanning which is how most

00:02:02,960 --> 00:02:06,000
people actually

00:02:04,079 --> 00:02:07,520
see those contributions from security

00:02:06,000 --> 00:02:09,200
experts we'll then dive

00:02:07,520 --> 00:02:11,440
under the hood of code scanning and look

00:02:09,200 --> 00:02:13,760
at kql a bit more closely

00:02:11,440 --> 00:02:14,959
and that will include a live demo after

00:02:13,760 --> 00:02:17,599
that i'll hand over

00:02:14,959 --> 00:02:19,280
to savier and he will tell you all about

00:02:17,599 --> 00:02:22,480
the security research community

00:02:19,280 --> 00:02:24,720
and how you can be part of it so

00:02:22,480 --> 00:02:25,680
github code scanning earlier this year

00:02:24,720 --> 00:02:27,520
we announced it

00:02:25,680 --> 00:02:30,000
and code scanning does exactly what it

00:02:27,520 --> 00:02:32,560
says on the tin it scans your code

00:02:30,000 --> 00:02:34,239
for security vulnerabilities and any

00:02:32,560 --> 00:02:36,080
alerts we find in pool requests are

00:02:34,239 --> 00:02:37,680
automatically flagged up to you

00:02:36,080 --> 00:02:39,519
so that you can fix them before you

00:02:37,680 --> 00:02:40,480
merge the code changes into your main

00:02:39,519 --> 00:02:42,400
branch

00:02:40,480 --> 00:02:43,760
now under the hood code scanning

00:02:42,400 --> 00:02:45,680
actually supports multiple

00:02:43,760 --> 00:02:48,080
engines that actually perform the

00:02:45,680 --> 00:02:50,319
analysis the most popular

00:02:48,080 --> 00:02:51,360
code scanning engine is our own code ql

00:02:50,319 --> 00:02:53,920
analysis engine

00:02:51,360 --> 00:02:56,000
which performs deep analysis for a

00:02:53,920 --> 00:02:58,319
variety of programming languages

00:02:56,000 --> 00:02:59,280
and even though code scanning only just

00:02:58,319 --> 00:03:00,720
came out of beta

00:02:59,280 --> 00:03:03,599
we're about to hit the milestone of

00:03:00,720 --> 00:03:05,120
having analyzed two million commits

00:03:03,599 --> 00:03:06,800
now i've actually already set up code

00:03:05,120 --> 00:03:07,840
scanning on one of my repositories that

00:03:06,800 --> 00:03:10,239
i'll show you today

00:03:07,840 --> 00:03:12,400
it's a node.js application that uses a

00:03:10,239 --> 00:03:15,840
better javascript that's egs

00:03:12,400 --> 00:03:17,280
templates and express i'll show you the

00:03:15,840 --> 00:03:18,640
code in a moment but first i want to

00:03:17,280 --> 00:03:20,800
show you how

00:03:18,640 --> 00:03:22,720
code qr and code scanning integrate into

00:03:20,800 --> 00:03:25,920
your development workflow

00:03:22,720 --> 00:03:26,640
so here you see a screenshot of a pull

00:03:25,920 --> 00:03:30,159
request

00:03:26,640 --> 00:03:32,879
that i've created on my codebase

00:03:30,159 --> 00:03:35,680
and in the ci cd status checks you can

00:03:32,879 --> 00:03:37,360
see that ktr has flagged up a problem

00:03:35,680 --> 00:03:39,200
if i click on the details i can see

00:03:37,360 --> 00:03:42,560
exactly what goodql

00:03:39,200 --> 00:03:45,040
analysis is worried about

00:03:42,560 --> 00:03:45,920
codeql has flagged up a potential

00:03:45,040 --> 00:03:48,720
server-side

00:03:45,920 --> 00:03:50,159
template injection vulnerability now let

00:03:48,720 --> 00:03:51,680
me briefly tell you a bit more about

00:03:50,159 --> 00:03:54,480
this type of vulnerability

00:03:51,680 --> 00:03:56,319
and server-side template injection um or

00:03:54,480 --> 00:03:58,400
ssti for short

00:03:56,319 --> 00:04:00,640
is a type of vulnerability that affects

00:03:58,400 --> 00:04:03,360
basically any language

00:04:00,640 --> 00:04:04,319
any any code in which you develop a a

00:04:03,360 --> 00:04:06,879
web application

00:04:04,319 --> 00:04:08,879
that uses templates to serve web pages

00:04:06,879 --> 00:04:11,040
to users

00:04:08,879 --> 00:04:12,400
and injection vulnerabilities in general

00:04:11,040 --> 00:04:14,480
are vulnerabilities

00:04:12,400 --> 00:04:16,959
that allow an attacker to inject their

00:04:14,480 --> 00:04:18,959
own code into your application

00:04:16,959 --> 00:04:21,199
the most well-known type of such an

00:04:18,959 --> 00:04:22,880
attack is cross-site scripting

00:04:21,199 --> 00:04:24,240
for example if you write a javascript

00:04:22,880 --> 00:04:28,320
application

00:04:24,240 --> 00:04:30,800
in which you use user control data like

00:04:28,320 --> 00:04:32,240
like a form submission get variables

00:04:30,800 --> 00:04:34,400
from from a url

00:04:32,240 --> 00:04:35,680
and you use that data again in the code

00:04:34,400 --> 00:04:37,840
of your web page

00:04:35,680 --> 00:04:38,960
in an unsafe way then an attacker might

00:04:37,840 --> 00:04:41,919
be able to inject

00:04:38,960 --> 00:04:42,880
their own javascript into your web page

00:04:41,919 --> 00:04:45,040
and that way

00:04:42,880 --> 00:04:46,960
an attacker might be able to steal the

00:04:45,040 --> 00:04:50,080
credentials of an unsuspecting user

00:04:46,960 --> 00:04:51,680
or maybe their cookies ssti is

00:04:50,080 --> 00:04:54,320
a type of injection but as the name

00:04:51,680 --> 00:04:57,840
suggests it happens on the server side

00:04:54,320 --> 00:04:57,840
server side template injection

00:04:58,080 --> 00:05:03,759
in if a web application is vulnerable

00:05:01,440 --> 00:05:05,680
to such template injection an attacker

00:05:03,759 --> 00:05:06,639
can very easily carry out a cross-site

00:05:05,680 --> 00:05:09,600
scripting attack

00:05:06,639 --> 00:05:10,000
but it can be worse an attacker might be

00:05:09,600 --> 00:05:11,840
able to

00:05:10,000 --> 00:05:13,680
actually take control of your web server

00:05:11,840 --> 00:05:16,880
and execute arbitrary code

00:05:13,680 --> 00:05:18,560
there now in a moment i'll show you why

00:05:16,880 --> 00:05:20,639
my code was actually vulnerable

00:05:18,560 --> 00:05:22,320
and how goku analyzed it but before we

00:05:20,639 --> 00:05:22,720
do that i'd like to tell you a bit more

00:05:22,320 --> 00:05:25,680
about

00:05:22,720 --> 00:05:27,759
kuqra itself so we know it's an engine

00:05:25,680 --> 00:05:29,759
that powers code scanning and it's able

00:05:27,759 --> 00:05:31,039
to detect a wide variety of security

00:05:29,759 --> 00:05:33,120
vulnerabilities

00:05:31,039 --> 00:05:34,800
but how does it actually work and how

00:05:33,120 --> 00:05:37,199
does it recognize

00:05:34,800 --> 00:05:38,800
that particular code patterns could be

00:05:37,199 --> 00:05:41,840
for example a server-side template

00:05:38,800 --> 00:05:41,840
injection vulnerability

00:05:42,160 --> 00:05:45,280
when you run codeql whether that's in

00:05:44,400 --> 00:05:47,919
code scanning

00:05:45,280 --> 00:05:49,039
or on your own local machine the first

00:05:47,919 --> 00:05:51,520
thing

00:05:49,039 --> 00:05:53,520
it will do is it extracts all of the

00:05:51,520 --> 00:05:56,960
source code that you have

00:05:53,520 --> 00:05:59,360
into a special relational database

00:05:56,960 --> 00:06:00,960
in a way it's similar to a mysql or a

00:05:59,360 --> 00:06:02,800
postcards database

00:06:00,960 --> 00:06:04,400
it's a very special one though special

00:06:02,800 --> 00:06:07,360
purpose-built read-only one

00:06:04,400 --> 00:06:10,000
we call it a ql database and just like

00:06:07,360 --> 00:06:12,000
with my sql and with postgres

00:06:10,000 --> 00:06:14,639
you can run queries against that

00:06:12,000 --> 00:06:16,560
database and in fact a code ql query

00:06:14,639 --> 00:06:18,560
looks a bit like a sql query but it's a

00:06:16,560 --> 00:06:21,440
lot more powerful i'll show you one

00:06:18,560 --> 00:06:22,880
in in the live demo that i've got now a

00:06:21,440 --> 00:06:25,759
code qr query is

00:06:22,880 --> 00:06:26,880
a way to sort of interrogate and explore

00:06:25,759 --> 00:06:28,720
your source code

00:06:26,880 --> 00:06:30,880
a very simple query might for example

00:06:28,720 --> 00:06:33,919
look for a variable called

00:06:30,880 --> 00:06:36,000
password that you then write to a plain

00:06:33,919 --> 00:06:37,919
text log file

00:06:36,000 --> 00:06:39,680
more advanced security analysis more

00:06:37,919 --> 00:06:42,639
advanced queries

00:06:39,680 --> 00:06:44,479
do very intricate flow analysis they

00:06:42,639 --> 00:06:46,240
track where

00:06:44,479 --> 00:06:48,319
user control data enters your

00:06:46,240 --> 00:06:49,919
application they track it through your

00:06:48,319 --> 00:06:51,199
application through function calls and

00:06:49,919 --> 00:06:53,039
data structures

00:06:51,199 --> 00:06:55,120
to a location where it might be used in

00:06:53,039 --> 00:06:58,000
an unsafe way

00:06:55,120 --> 00:06:58,720
and the ssdi analysis does exactly that

00:06:58,000 --> 00:07:01,280
it tracks

00:06:58,720 --> 00:07:01,759
untrusted user data that eventually ends

00:07:01,280 --> 00:07:05,599
up

00:07:01,759 --> 00:07:08,240
in a template now in a way

00:07:05,599 --> 00:07:08,800
every query captures the security

00:07:08,240 --> 00:07:10,800
knowledge

00:07:08,800 --> 00:07:12,479
of a security researcher and by

00:07:10,800 --> 00:07:15,599
codifying that knowledge

00:07:12,479 --> 00:07:17,759
that we can apply it at a massive scale

00:07:15,599 --> 00:07:19,919
so for example we run kql against

00:07:17,759 --> 00:07:22,400
hundreds of thousands of repositories

00:07:19,919 --> 00:07:23,120
and every single query result that we

00:07:22,400 --> 00:07:28,000
get

00:07:23,120 --> 00:07:30,639
is a is an alert in in code scanning

00:07:28,000 --> 00:07:32,639
now that's that's enough talk from me

00:07:30,639 --> 00:07:36,240
it's time for a live demo so let me

00:07:32,639 --> 00:07:40,800
actually share my screen and show you

00:07:36,240 --> 00:07:40,800
how this works on my computer

00:07:42,319 --> 00:07:46,960
you should be able to see my vs code

00:07:44,960 --> 00:07:49,520
editor now

00:07:46,960 --> 00:07:51,280
and this is my unsafe node.js

00:07:49,520 --> 00:07:53,360
application it uses ejs

00:07:51,280 --> 00:07:54,560
express and it does something really

00:07:53,360 --> 00:07:56,879
quite simple

00:07:54,560 --> 00:07:58,160
it generates a form that asks the user

00:07:56,879 --> 00:08:00,400
for their age

00:07:58,160 --> 00:08:02,879
and once the user submits their age it

00:08:00,400 --> 00:08:04,879
will generate a confirmation page

00:08:02,879 --> 00:08:06,800
it will tell the user it will confirm

00:08:04,879 --> 00:08:09,280
their age and it will tell the user

00:08:06,800 --> 00:08:11,039
what time it is and you see here that

00:08:09,280 --> 00:08:13,759
i've injected the

00:08:11,039 --> 00:08:14,479
time value into the template using the

00:08:13,759 --> 00:08:17,039
special

00:08:14,479 --> 00:08:18,960
ejs template syntax but i've

00:08:17,039 --> 00:08:20,639
accidentally made a mistake

00:08:18,960 --> 00:08:22,560
i haven't used that syntax here that

00:08:20,639 --> 00:08:25,440
means i'm actually concatenating

00:08:22,560 --> 00:08:26,400
the user input their age straight into

00:08:25,440 --> 00:08:29,520
the template

00:08:26,400 --> 00:08:33,279
and if the attacker were to send me

00:08:29,520 --> 00:08:35,839
their age in a script tag

00:08:33,279 --> 00:08:37,039
then they could be executing arbitrary

00:08:35,839 --> 00:08:40,080
javascript code

00:08:37,039 --> 00:08:42,479
on in the user web browser if they know

00:08:40,080 --> 00:08:42,800
a bit more about how this template here

00:08:42,479 --> 00:08:46,000
is

00:08:42,800 --> 00:08:48,080
interpreted and processed by ejs

00:08:46,000 --> 00:08:50,640
the damage could be much worse and they

00:08:48,080 --> 00:08:52,800
might even get control of the web server

00:08:50,640 --> 00:08:54,720
now like i suggest like i said the first

00:08:52,800 --> 00:08:56,880
thing you need to do with codeql

00:08:54,720 --> 00:08:58,640
is to create a database normally that

00:08:56,880 --> 00:09:01,279
happens in code scanning

00:08:58,640 --> 00:09:03,200
and here i do it uh on my local machine

00:09:01,279 --> 00:09:04,000
so i'm going to say go ql this is the

00:09:03,200 --> 00:09:07,040
quick qr

00:09:04,000 --> 00:09:10,959
command line interface click qr database

00:09:07,040 --> 00:09:13,920
create the language is javascript

00:09:10,959 --> 00:09:16,560
and i'm going to call it my new codeql

00:09:13,920 --> 00:09:16,560
database

00:09:17,600 --> 00:09:20,640
and here it now extracts all of the

00:09:19,519 --> 00:09:22,800
source code

00:09:20,640 --> 00:09:25,519
that i've written and a few extra bits

00:09:22,800 --> 00:09:28,640
and bobs that the analysis might need

00:09:25,519 --> 00:09:30,959
i've already loaded up a database into

00:09:28,640 --> 00:09:32,000
vs code there's a good qr extension for

00:09:30,959 --> 00:09:35,279
vs code

00:09:32,000 --> 00:09:37,519
and i can now write my own qr queries

00:09:35,279 --> 00:09:39,040
right here in vs code so i've got the

00:09:37,519 --> 00:09:42,000
database loaded up

00:09:39,040 --> 00:09:42,560
ready to ask questions so i'm going to

00:09:42,000 --> 00:09:46,320
load

00:09:42,560 --> 00:09:48,640
into vs code the javascript

00:09:46,320 --> 00:09:49,680
libraries for kql and i'm going to say

00:09:48,640 --> 00:09:51,120
well um

00:09:49,680 --> 00:09:52,720
let's find out what files that are in

00:09:51,120 --> 00:09:54,800
the database from all the things that

00:09:52,720 --> 00:09:59,760
are files in a database

00:09:54,800 --> 00:09:59,760
i want to know um the number of

00:10:00,080 --> 00:10:04,160
lines of code in the file and a bit more

00:10:02,800 --> 00:10:08,399
information about it

00:10:04,160 --> 00:10:11,120
i can right click say run code qr query

00:10:08,399 --> 00:10:12,000
and i get a whole bunch of results right

00:10:11,120 --> 00:10:14,079
here

00:10:12,000 --> 00:10:15,760
now these are all files that are not

00:10:14,079 --> 00:10:17,040
actually ones that i wrote these are in

00:10:15,760 --> 00:10:19,279
the database

00:10:17,040 --> 00:10:21,680
but i'm not that interested in them i

00:10:19,279 --> 00:10:24,320
can actually make my query more precise

00:10:21,680 --> 00:10:27,120
i can say well i want to see those files

00:10:24,320 --> 00:10:30,240
but only if those files

00:10:27,120 --> 00:10:34,000
have an absolute path that matches

00:10:30,240 --> 00:10:36,079
for example um super secure

00:10:34,000 --> 00:10:38,720
code which is the name of my uh

00:10:36,079 --> 00:10:38,720
application

00:10:40,320 --> 00:10:43,360
and i run that query again and now i

00:10:42,320 --> 00:10:46,160
should get there we go

00:10:43,360 --> 00:10:48,480
fewer results so i've made my query more

00:10:46,160 --> 00:10:52,720
precise

00:10:48,480 --> 00:10:52,720
um i can also for example ask

00:10:53,040 --> 00:10:58,640
where in my code do i use the

00:10:56,320 --> 00:10:59,600
egs templating system now for that i

00:10:58,640 --> 00:11:03,279
need to use

00:10:59,600 --> 00:11:03,920
the data flow libraries and i want to

00:11:03,279 --> 00:11:06,240
ask it

00:11:03,920 --> 00:11:07,040
um well for all from all the places

00:11:06,240 --> 00:11:12,160
where i do

00:11:07,040 --> 00:11:16,320
a call call to a to a function

00:11:12,160 --> 00:11:19,760
where that call has something to do um

00:11:16,320 --> 00:11:23,440
import something to do with the egs

00:11:19,760 --> 00:11:26,880
import um give me this all method

00:11:23,440 --> 00:11:28,640
calls from that and i would like to know

00:11:26,880 --> 00:11:30,959
about these calls

00:11:28,640 --> 00:11:32,959
get the i want to know the esd node the

00:11:30,959 --> 00:11:35,040
location

00:11:32,959 --> 00:11:36,880
in the source code so now it's going to

00:11:35,040 --> 00:11:37,519
tell me where in the source code i've

00:11:36,880 --> 00:11:41,040
used

00:11:37,519 --> 00:11:43,519
ejs functions

00:11:41,040 --> 00:11:44,720
and indeed it's flagged at one location

00:11:43,519 --> 00:11:46,880
in my source code

00:11:44,720 --> 00:11:48,800
where i call the render method that's

00:11:46,880 --> 00:11:51,600
super useful

00:11:48,800 --> 00:11:52,560
so you you sort of get the idea these

00:11:51,600 --> 00:11:56,240
queries can get

00:11:52,560 --> 00:11:57,519
very advanced and very precise

00:11:56,240 --> 00:11:59,440
and they can of course get a little bit

00:11:57,519 --> 00:12:00,720
more complicated luckily code ql is

00:11:59,440 --> 00:12:01,440
designed in such a way that you can

00:12:00,720 --> 00:12:03,600
actually

00:12:01,440 --> 00:12:06,000
build upon the works work that others

00:12:03,600 --> 00:12:09,200
have done for you already

00:12:06,000 --> 00:12:10,160
and i'm not going to show you the ssdi

00:12:09,200 --> 00:12:13,120
query example

00:12:10,160 --> 00:12:14,720
that also uses that data flow analysis

00:12:13,120 --> 00:12:17,279
and it looks for data flow

00:12:14,720 --> 00:12:19,519
by specifying exactly what flow is

00:12:17,279 --> 00:12:22,160
interested in by specifying the source

00:12:19,519 --> 00:12:23,120
it's interested in any type of remote

00:12:22,160 --> 00:12:25,920
data

00:12:23,120 --> 00:12:26,720
and the sync that we're interested in as

00:12:25,920 --> 00:12:30,240
any call

00:12:26,720 --> 00:12:32,320
to the render method in ejs and if i now

00:12:30,240 --> 00:12:34,399
run that query

00:12:32,320 --> 00:12:35,839
i should get exactly the same result

00:12:34,399 --> 00:12:38,959
here we are that i got

00:12:35,839 --> 00:12:41,200
in code scanning earlier it tells me

00:12:38,959 --> 00:12:42,639
where the untrusted user data has

00:12:41,200 --> 00:12:45,600
entered my application

00:12:42,639 --> 00:12:47,279
through an http request how it flows

00:12:45,600 --> 00:12:50,839
through my application

00:12:47,279 --> 00:12:52,079
and eventually is used in the render

00:12:50,839 --> 00:12:53,680
method

00:12:52,079 --> 00:12:55,600
so now you know what happens under the

00:12:53,680 --> 00:12:57,600
hood i've only scratched the surface but

00:12:55,600 --> 00:13:00,880
but you get the idea

00:12:57,600 --> 00:13:01,440
i will now hand over to xavier who will

00:13:00,880 --> 00:13:06,000
tell you

00:13:01,440 --> 00:13:07,680
exactly where these queries come from

00:13:06,000 --> 00:13:10,639
thank you bass yeah thank you for this

00:13:07,680 --> 00:13:12,560
demo so yeah let's now see who writes

00:13:10,639 --> 00:13:13,680
these queries that run on your open

00:13:12,560 --> 00:13:15,839
source projects

00:13:13,680 --> 00:13:17,680
and you'll be disappointed to know that

00:13:15,839 --> 00:13:20,079
bass doesn't write all of them

00:13:17,680 --> 00:13:21,040
but yeah okay so follow me through the

00:13:20,079 --> 00:13:25,120
original story

00:13:21,040 --> 00:13:25,120
of the ssti quadco query

00:13:25,279 --> 00:13:28,639
there are basically three broad steps

00:13:27,519 --> 00:13:30,480
when uh

00:13:28,639 --> 00:13:33,279
writing a query it usually starts with a

00:13:30,480 --> 00:13:35,920
bug found by a security researcher

00:13:33,279 --> 00:13:37,760
after auditing code the second phase is

00:13:35,920 --> 00:13:39,600
the variant analysis phase and this is

00:13:37,760 --> 00:13:41,839
the core of the query writing

00:13:39,600 --> 00:13:44,000
during this phase a security researcher

00:13:41,839 --> 00:13:46,240
will try to find

00:13:44,000 --> 00:13:48,000
other occurrences of this same bug

00:13:46,240 --> 00:13:50,560
pattern this is what we call the

00:13:48,000 --> 00:13:52,240
variance the code they they will code

00:13:50,560 --> 00:13:54,160
the general pattern into the column

00:13:52,240 --> 00:13:55,199
query then they will run it on several

00:13:54,160 --> 00:13:58,160
code bases

00:13:55,199 --> 00:13:59,199
and to find similar bugs then finally in

00:13:58,160 --> 00:14:01,760
the third phase

00:13:59,199 --> 00:14:02,320
the community will improve the query and

00:14:01,760 --> 00:14:04,480
here

00:14:02,320 --> 00:14:06,560
it's not only the security community who

00:14:04,480 --> 00:14:07,440
will improve the query but also the

00:14:06,560 --> 00:14:09,279
developers

00:14:07,440 --> 00:14:11,519
developers will bring in their expertise

00:14:09,279 --> 00:14:13,199
of the language and of the frameworks

00:14:11,519 --> 00:14:15,360
they will either extend the query to

00:14:13,199 --> 00:14:17,360
find more problems or they will adapt it

00:14:15,360 --> 00:14:19,680
to reduce false positive

00:14:17,360 --> 00:14:20,480
because you know a security researcher

00:14:19,680 --> 00:14:23,279
wants to find

00:14:20,480 --> 00:14:25,360
as many bugs as possible so they don't

00:14:23,279 --> 00:14:27,120
really care about precision

00:14:25,360 --> 00:14:28,480
but this is not ideal for developers

00:14:27,120 --> 00:14:31,680
developers prefer to receive

00:14:28,480 --> 00:14:34,880
alerts only for real problems

00:14:31,680 --> 00:14:37,760
so only when the query

00:14:34,880 --> 00:14:38,480
is as precise as possible it will be

00:14:37,760 --> 00:14:41,839
suitable

00:14:38,480 --> 00:14:41,839
for continuous integration

00:14:42,240 --> 00:14:46,720
okay so our first stop is uh in our

00:14:44,800 --> 00:14:47,920
story is the security research activity

00:14:46,720 --> 00:14:50,480
and

00:14:47,920 --> 00:14:52,240
security research know that github has

00:14:50,480 --> 00:14:54,160
its own team for this activity which is

00:14:52,240 --> 00:14:54,720
the github security lab it's a team of

00:14:54,160 --> 00:14:57,440
hackers

00:14:54,720 --> 00:14:58,240
created last year at kitab universe and

00:14:57,440 --> 00:14:59,839
with this team

00:14:58,240 --> 00:15:01,519
and there are thousands of hours of

00:14:59,839 --> 00:15:03,440
security research github

00:15:01,519 --> 00:15:05,120
is really committing to help secure the

00:15:03,440 --> 00:15:07,519
open source ecosystem

00:15:05,120 --> 00:15:08,959
what we do we we audit open source code

00:15:07,519 --> 00:15:10,880
and we already reported many

00:15:08,959 --> 00:15:13,760
vulnerabilities you can see examples in

00:15:10,880 --> 00:15:16,959
this slide in chrome angularjs samba

00:15:13,760 --> 00:15:19,040
open ssl but the most important thing is

00:15:16,959 --> 00:15:20,959
our approach our maintenance first

00:15:19,040 --> 00:15:23,839
approach we are here to make security

00:15:20,959 --> 00:15:25,680
easy for developers

00:15:23,839 --> 00:15:27,199
and a big part of our mission is to

00:15:25,680 --> 00:15:30,320
share and educate

00:15:27,199 --> 00:15:32,079
via workshops or articles we explain

00:15:30,320 --> 00:15:32,800
vulnerabilities that we found for

00:15:32,079 --> 00:15:35,120
example

00:15:32,800 --> 00:15:37,680
you can see in the slide here in chrome

00:15:35,120 --> 00:15:38,399
ubuntu or recently in germany's kovind

00:15:37,680 --> 00:15:41,680
knighting

00:15:38,399 --> 00:15:44,240
contract contact tracing app

00:15:41,680 --> 00:15:46,320
and because at github we claim that

00:15:44,240 --> 00:15:48,000
coding is social we are also building a

00:15:46,320 --> 00:15:50,800
community of researchers and developers

00:15:48,000 --> 00:15:53,920
who want to help secure open source

00:15:50,800 --> 00:15:54,800
so coming back to our origin story the

00:15:53,920 --> 00:15:57,680
first phase

00:15:54,800 --> 00:15:58,560
is how security researchers or members

00:15:57,680 --> 00:16:01,279
of our community

00:15:58,560 --> 00:16:02,639
find a bug for example here alvaro munoz

00:16:01,279 --> 00:16:06,000
from the security lab

00:16:02,639 --> 00:16:07,839
discovered a high severity ssti in xwiki

00:16:06,000 --> 00:16:10,959
this bug allows any user to run

00:16:07,839 --> 00:16:13,040
arbitrage java code on the xwiki server

00:16:10,959 --> 00:16:14,800
during the research alvaro identifies

00:16:13,040 --> 00:16:16,880
the exact bug in the code

00:16:14,800 --> 00:16:18,160
and he points it out privately to the

00:16:16,880 --> 00:16:20,880
maintainer but

00:16:18,160 --> 00:16:24,000
having identified the exact faulty code

00:16:20,880 --> 00:16:25,920
pattern we can code it into a query

00:16:24,000 --> 00:16:28,560
and this is what happens in the second

00:16:25,920 --> 00:16:30,320
phase a security researcher will grasp

00:16:28,560 --> 00:16:32,959
this code pattern from the original

00:16:30,320 --> 00:16:34,320
vulnerability possibly found by another

00:16:32,959 --> 00:16:35,519
researcher

00:16:34,320 --> 00:16:38,480
and they will code it into a code called

00:16:35,519 --> 00:16:40,160
query you can see here in my example

00:16:38,480 --> 00:16:41,680
that someone who goes by the github

00:16:40,160 --> 00:16:44,399
bundle of monkey junkie

00:16:41,680 --> 00:16:46,480
proposed a pull request for codeq query

00:16:44,399 --> 00:16:49,199
that detects sstis in popular

00:16:46,480 --> 00:16:50,720
javascript's rendering engines

00:16:49,199 --> 00:16:52,560
look at the query on the left and you

00:16:50,720 --> 00:16:53,839
will recognize what bus showed you

00:16:52,560 --> 00:16:58,000
during the live demo

00:16:53,839 --> 00:17:00,000
applied to egs but also to other engines

00:16:58,000 --> 00:17:01,519
by doing that monkey junkie amplifies

00:17:00,000 --> 00:17:03,199
the original research

00:17:01,519 --> 00:17:05,439
they coded they make it available for

00:17:03,199 --> 00:17:06,799
the whole community under executable

00:17:05,439 --> 00:17:09,839
form

00:17:06,799 --> 00:17:11,520
now why would monkey junkie do that of

00:17:09,839 --> 00:17:13,360
course because contributing to open

00:17:11,520 --> 00:17:13,919
source software security is a compelling

00:17:13,360 --> 00:17:16,480
purpose

00:17:13,919 --> 00:17:18,000
and open source users are eager to share

00:17:16,480 --> 00:17:20,079
their knowledge for the benefits of the

00:17:18,000 --> 00:17:22,480
community

00:17:20,079 --> 00:17:24,160
but also because github incentivizes the

00:17:22,480 --> 00:17:27,919
community to write these queries

00:17:24,160 --> 00:17:30,000
with a bunch of bounty program so

00:17:27,919 --> 00:17:32,160
traditional bounty programs reward

00:17:30,000 --> 00:17:34,000
people who report bugs

00:17:32,160 --> 00:17:35,360
in our program we reward people who

00:17:34,000 --> 00:17:37,120
prevent bugs

00:17:35,360 --> 00:17:38,880
they write a code query for the open

00:17:37,120 --> 00:17:40,160
source community and they contribute to

00:17:38,880 --> 00:17:43,200
making less bug happen

00:17:40,160 --> 00:17:46,320
so monkey junkie on github goes by

00:17:43,200 --> 00:17:48,080
zelibob on hacker1 and they got 2 300

00:17:46,320 --> 00:17:50,000
bounty for their contribution to open

00:17:48,080 --> 00:17:51,679
source security as we said in the

00:17:50,000 --> 00:17:54,400
introduction github already paid

00:17:51,679 --> 00:17:56,160
100 000 for search contribution and we

00:17:54,400 --> 00:17:57,120
will continue these incentives because

00:17:56,160 --> 00:18:00,559
these queries

00:17:57,120 --> 00:18:02,400
actually help everyone to be more secure

00:18:00,559 --> 00:18:04,080
the last phase of the query writing is

00:18:02,400 --> 00:18:06,640
the improvement by the community

00:18:04,080 --> 00:18:08,240
and this phase never ends actually it

00:18:06,640 --> 00:18:09,760
starts during the code review

00:18:08,240 --> 00:18:11,360
and it never ends on the first

00:18:09,760 --> 00:18:12,480
screenshot you can see an example of a

00:18:11,360 --> 00:18:15,039
pull request

00:18:12,480 --> 00:18:17,360
with a review by a community member it's

00:18:15,039 --> 00:18:20,160
interesting because the comment is about

00:18:17,360 --> 00:18:21,919
the code mpc framework specifics its

00:18:20,160 --> 00:18:22,720
developer knowledge and not security

00:18:21,919 --> 00:18:25,360
knowledge

00:18:22,720 --> 00:18:27,039
on the second one you see an improvement

00:18:25,360 --> 00:18:29,600
of our ssti query

00:18:27,039 --> 00:18:31,280
the one developed by monk chunky here

00:18:29,600 --> 00:18:32,960
it's my colleague asghar who is a

00:18:31,280 --> 00:18:35,360
developer and not a security researcher

00:18:32,960 --> 00:18:37,360
who extended the original query

00:18:35,360 --> 00:18:38,559
he added the support of another popular

00:18:37,360 --> 00:18:41,600
javascript framework

00:18:38,559 --> 00:18:42,000
lodash and there will be more of this

00:18:41,600 --> 00:18:45,200
improvement

00:18:42,000 --> 00:18:45,840
in the future okay so we've seen the

00:18:45,200 --> 00:18:48,240
story of the

00:18:45,840 --> 00:18:49,039
of a query phase one security research

00:18:48,240 --> 00:18:50,880
phase two

00:18:49,039 --> 00:18:52,720
joint analysis and then community

00:18:50,880 --> 00:18:56,160
improvement so now

00:18:52,720 --> 00:18:58,400
let's wrap up um first

00:18:56,160 --> 00:18:59,280
automated securities analysis is

00:18:58,400 --> 00:19:01,120
essential it

00:18:59,280 --> 00:19:02,880
augments manual code audit and it

00:19:01,120 --> 00:19:04,799
prevents repetitive mistakes

00:19:02,880 --> 00:19:06,559
at github we believe in the power of

00:19:04,799 --> 00:19:08,880
community we transform also free

00:19:06,559 --> 00:19:11,679
activities into social activities and

00:19:08,880 --> 00:19:13,280
security analysis makes no exception we

00:19:11,679 --> 00:19:15,280
believe that codeql is the perfect

00:19:13,280 --> 00:19:18,000
enabler for the community to share

00:19:15,280 --> 00:19:18,640
collaborate automate and scale this is

00:19:18,000 --> 00:19:20,160
why

00:19:18,640 --> 00:19:21,840
we incentivize the community to

00:19:20,160 --> 00:19:24,080
contribute to the codeword queries

00:19:21,840 --> 00:19:27,600
and this is why codeql and code scanning

00:19:24,080 --> 00:19:28,960
are free for the open source community

00:19:27,600 --> 00:19:30,880
and the last thing i would like you to

00:19:28,960 --> 00:19:32,960
remember is that codecredit is

00:19:30,880 --> 00:19:34,000
unique in the sense that it allows

00:19:32,960 --> 00:19:36,240
security

00:19:34,000 --> 00:19:37,280
experts and developers to collaborate on

00:19:36,240 --> 00:19:39,440
the security check

00:19:37,280 --> 00:19:41,520
they bring in their specific expertises

00:19:39,440 --> 00:19:42,720
security on one hand and language and

00:19:41,520 --> 00:19:44,559
framework on the

00:19:42,720 --> 00:19:46,480
on the other hand they collaborate on

00:19:44,559 --> 00:19:48,960
the same artifact the query

00:19:46,480 --> 00:19:49,679
so nothing is lost in translation and as

00:19:48,960 --> 00:19:52,559
a developer

00:19:49,679 --> 00:19:53,679
you are not just consuming security

00:19:52,559 --> 00:19:55,200
checks from others

00:19:53,679 --> 00:19:56,960
you can be in the driver's seat and

00:19:55,200 --> 00:19:59,360
contribute to improve the checks for the

00:19:56,960 --> 00:20:01,760
open source community

00:19:59,360 --> 00:20:03,120
so where should you start head to the

00:20:01,760 --> 00:20:04,640
security lab website

00:20:03,120 --> 00:20:06,480
you will find the link here in the slide

00:20:04,640 --> 00:20:07,200
and you will find pointers to learn

00:20:06,480 --> 00:20:08,880
codeql

00:20:07,200 --> 00:20:11,520
with our interactive github learning

00:20:08,880 --> 00:20:11,840
labs uh to contribute to control queries

00:20:11,520 --> 00:20:13,520
and

00:20:11,840 --> 00:20:15,760
cherry on top when contributing to

00:20:13,520 --> 00:20:16,720
codeql if you find potential security

00:20:15,760 --> 00:20:18,320
vulnerabilities

00:20:16,720 --> 00:20:20,480
you can get rewarded thanks to our

00:20:18,320 --> 00:20:21,520
bounty program so looking forward to

00:20:20,480 --> 00:20:27,600
seeing you there

00:20:21,520 --> 00:20:27,600

YouTube URL: https://www.youtube.com/watch?v=Y6PjAaZKNYk


