Title: Expanding GitHub’s security capabilities through integrations - GitHub Universe 2020
Publication date: 2020-12-09
Playlist: GitHub Universe 2020: Developer - Secure Development
Description: 
	Presented by 
Jose Palafox, Business Development Manager, GitHub
Sara Joshi, Member of Technical Staff, Accurics
Alfredo Deza, Senior Software Engineer, Anchore
Jaap Karan Singh, Customer Success SME, Secure Code Warrior,

GitHub provides industry-leading native security capabilities within the developer workflow. Our code scanning, secret scanning, and Dependabot products and features deliver great value toward securing applications. Yet, additional security capabilities can be unlocked thanks to integrations. In this panel, we’ll share how third-party vendor solutions integrated with GitHub Actions can improve your security posture on top of native security capabilities. We’ll discuss contextual developer security training, infrastructure as code checks, and container scanning. And you'll learn about how to detect and prevent security issues in your code, how to ensure that runtime environments are up to date, and how to validate the security and configuration of deployment environments.

For more from GitHub Universe 2020, visit https://githubuniverse.com

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:06,250 --> 00:00:12,240
[Music]

00:00:11,200 --> 00:00:14,559
hey welcome to

00:00:12,240 --> 00:00:15,759
expanding github security capabilities

00:00:14,559 --> 00:00:17,760
through integrations

00:00:15,759 --> 00:00:18,880
i'm jose palafox and i'm a business

00:00:17,760 --> 00:00:21,359
development manager

00:00:18,880 --> 00:00:23,199
here at github covering our security

00:00:21,359 --> 00:00:26,080
product portfolio

00:00:23,199 --> 00:00:26,960
uh with me today i've got three awesome

00:00:26,080 --> 00:00:28,800
panelists

00:00:26,960 --> 00:00:30,160
and we're going to talk about some of

00:00:28,800 --> 00:00:32,239
the mechanisms

00:00:30,160 --> 00:00:33,360
in github that you can use to scan your

00:00:32,239 --> 00:00:36,320
application code

00:00:33,360 --> 00:00:38,000
your infrastructure code and help train

00:00:36,320 --> 00:00:40,960
developers to

00:00:38,000 --> 00:00:42,000
react better to security vulnerabilities

00:00:40,960 --> 00:00:43,760
as you've been hearing through the

00:00:42,000 --> 00:00:45,120
conference and as you'll keep hearing

00:00:43,760 --> 00:00:46,960
throughout the conference security is

00:00:45,120 --> 00:00:48,640
incredibly important to us and we've

00:00:46,960 --> 00:00:50,480
added a number of new features to help

00:00:48,640 --> 00:00:53,920
secure your applications

00:00:50,480 --> 00:00:54,879
uh codeql is github's own security

00:00:53,920 --> 00:00:57,280
product

00:00:54,879 --> 00:00:59,039
that scans your application code base

00:00:57,280 --> 00:01:00,960
for vulnerabilities

00:00:59,039 --> 00:01:02,800
and we'll hear from some of our partners

00:01:00,960 --> 00:01:04,640
that are extending the software

00:01:02,800 --> 00:01:06,960
development life cycle

00:01:04,640 --> 00:01:08,479
security posture further on down so

00:01:06,960 --> 00:01:11,200
we've got

00:01:08,479 --> 00:01:12,560
friends here from encore acurix and

00:01:11,200 --> 00:01:14,479
secure code warrior

00:01:12,560 --> 00:01:16,159
and i'll let them start off by

00:01:14,479 --> 00:01:17,840
introducing themselves and we'll talk

00:01:16,159 --> 00:01:19,280
through how these products can help

00:01:17,840 --> 00:01:21,200
uh further secure the software

00:01:19,280 --> 00:01:24,560
development life cycle

00:01:21,200 --> 00:01:24,560
alfredo you want to kick it off with an

00:01:24,840 --> 00:01:27,840
introduction

00:01:31,759 --> 00:01:35,360
yes hi jose hi everybody thank you so

00:01:34,880 --> 00:01:38,720
much

00:01:35,360 --> 00:01:41,439
my name is alfredo desa i have

00:01:38,720 --> 00:01:43,280
almost two decades of software

00:01:41,439 --> 00:01:44,560
development experience and i currently

00:01:43,280 --> 00:01:48,320
work at anchor

00:01:44,560 --> 00:01:51,520
with the tools and integrations team uh

00:01:48,320 --> 00:01:54,799
trying to to get all of the all of the

00:01:51,520 --> 00:01:55,360
the the reporting integrated with github

00:01:54,799 --> 00:01:57,439
actions

00:01:55,360 --> 00:01:59,200
so that whenever vulnerabilities are

00:01:57,439 --> 00:02:02,479
coming up uh we have

00:01:59,200 --> 00:02:03,520
accurate reporting at any any given

00:02:02,479 --> 00:02:05,600
point in time when

00:02:03,520 --> 00:02:07,119
when we're interacting with uh github

00:02:05,600 --> 00:02:08,879
specifically

00:02:07,119 --> 00:02:11,280
excited to be here thank you so much for

00:02:08,879 --> 00:02:14,640
having me

00:02:11,280 --> 00:02:17,520
great thanks alfredo sarah you want to

00:02:14,640 --> 00:02:17,520
introduce yourself

00:02:17,920 --> 00:02:22,640
yeah absolutely hi everyone my name is

00:02:20,560 --> 00:02:24,400
sarah joshi i'm a member of technical

00:02:22,640 --> 00:02:26,000
staff at acurix i've been working here

00:02:24,400 --> 00:02:29,360
for about five months now

00:02:26,000 --> 00:02:31,360
so here at acura our mission is to

00:02:29,360 --> 00:02:32,640
connect and fix cloud infrastructure

00:02:31,360 --> 00:02:34,879
misconfigurations

00:02:32,640 --> 00:02:36,239
in design build and run time i'm

00:02:34,879 --> 00:02:38,160
thrilled to be here because

00:02:36,239 --> 00:02:39,680
devsecops is such an interesting field

00:02:38,160 --> 00:02:40,480
and i really love learning and talking

00:02:39,680 --> 00:02:43,599
about it so

00:02:40,480 --> 00:02:43,599
thank you so much for having me

00:02:44,000 --> 00:02:47,440
yeah of course excited to have you here

00:02:45,519 --> 00:02:49,440
sarah jopp you want to introduce

00:02:47,440 --> 00:02:52,080
yourself

00:02:49,440 --> 00:02:52,800
yeah absolutely uh my name is uh job

00:02:52,080 --> 00:02:55,120
currency

00:02:52,800 --> 00:02:56,879
i am part of the founding team and uh

00:02:55,120 --> 00:02:59,360
customer success sme

00:02:56,879 --> 00:03:01,200
at securia um first of all jose thank

00:02:59,360 --> 00:03:04,159
you so much uh for having us it's

00:03:01,200 --> 00:03:05,360
a great pleasure to be on this panel i'm

00:03:04,159 --> 00:03:07,200
talking to you about

00:03:05,360 --> 00:03:08,959
integrating secure code warrior with

00:03:07,200 --> 00:03:10,000
github i think it's quite an exciting

00:03:08,959 --> 00:03:11,280
thing for developers

00:03:10,000 --> 00:03:13,040
and for us as well i think this is

00:03:11,280 --> 00:03:15,360
something that we've all been waiting on

00:03:13,040 --> 00:03:18,800
is you know how we can tightly integrate

00:03:15,360 --> 00:03:21,760
security into the pipeline my background

00:03:18,800 --> 00:03:23,840
i'm a developer by trade by profession

00:03:21,760 --> 00:03:25,519
so i've done that my whole life

00:03:23,840 --> 00:03:27,599
and then early on in my career i saw the

00:03:25,519 --> 00:03:29,120
light when it came to appsx i've been an

00:03:27,599 --> 00:03:30,959
abstech practitioner

00:03:29,120 --> 00:03:32,159
so before i was at secure code warrior i

00:03:30,959 --> 00:03:34,799
was working as an

00:03:32,159 --> 00:03:37,200
application security consultant at bae

00:03:34,799 --> 00:03:37,200
systems

00:03:38,720 --> 00:03:41,840
awesome so if i'm a developer and i've

00:03:40,959 --> 00:03:45,040
started writing an

00:03:41,840 --> 00:03:47,519
application i'm using codeql to scan

00:03:45,040 --> 00:03:48,080
whatever language i'm using and pick up

00:03:47,519 --> 00:03:51,360
common

00:03:48,080 --> 00:03:52,959
common mistakes or coding uh errors

00:03:51,360 --> 00:03:54,799
and and once i've done that i want to

00:03:52,959 --> 00:03:56,080
package my application up into a

00:03:54,799 --> 00:03:57,920
container image

00:03:56,080 --> 00:03:59,360
so that i have a build artifact and i

00:03:57,920 --> 00:04:01,040
think that's where anchor really can

00:03:59,360 --> 00:04:02,000
help out so alfredo you want to talk to

00:04:01,040 --> 00:04:03,920
us a little bit about

00:04:02,000 --> 00:04:05,920
what encore does with container scanning

00:04:03,920 --> 00:04:07,840
and how that can help customers

00:04:05,920 --> 00:04:14,959
identify other vulnerabilities that that

00:04:07,840 --> 00:04:18,320
aren't in scope for codeql

00:04:14,959 --> 00:04:20,639
uh yeah uh that that's right well

00:04:18,320 --> 00:04:21,680
the thing with uh anchor what what we

00:04:20,639 --> 00:04:23,520
are trying to

00:04:21,680 --> 00:04:25,040
what we're trying to do is uh really

00:04:23,520 --> 00:04:27,360
stay on top

00:04:25,040 --> 00:04:28,720
on on when vulnerabilities are being

00:04:27,360 --> 00:04:31,040
reported and

00:04:28,720 --> 00:04:31,919
having a straightforward way of

00:04:31,040 --> 00:04:35,280
reporting those

00:04:31,919 --> 00:04:38,080
to whoever is developing so

00:04:35,280 --> 00:04:40,160
what happens is that whenever i'm i'm

00:04:38,080 --> 00:04:43,600
crafting a new application i'm

00:04:40,160 --> 00:04:46,639
creating a production code i may not

00:04:43,600 --> 00:04:49,040
be aware of dependencies that

00:04:46,639 --> 00:04:51,280
that might have security vulnerabilities

00:04:49,040 --> 00:04:53,680
since vulnerabilities are reporting all

00:04:51,280 --> 00:04:54,880
getting reported all of the time so

00:04:53,680 --> 00:04:56,639
whenever

00:04:54,880 --> 00:04:58,560
there's a process behind the scenes that

00:04:56,639 --> 00:04:59,600
is continuously updating its database

00:04:58,560 --> 00:05:02,320
and continuously

00:04:59,600 --> 00:05:02,960
knowing what vulnerabilities are uh are

00:05:02,320 --> 00:05:05,600
coming up

00:05:02,960 --> 00:05:07,759
uh then that's uh that that's a

00:05:05,600 --> 00:05:10,240
definitely a good way to

00:05:07,759 --> 00:05:11,759
to help not only build more secure

00:05:10,240 --> 00:05:14,880
software but also

00:05:11,759 --> 00:05:18,720
ensure that delivery processes is more

00:05:14,880 --> 00:05:21,759
robust um

00:05:18,720 --> 00:05:22,880
that's basically the the the what we're

00:05:21,759 --> 00:05:24,960
trying to do with

00:05:22,880 --> 00:05:26,479
uh with with anchor and specifically

00:05:24,960 --> 00:05:29,360
with the github actions

00:05:26,479 --> 00:05:29,680
uh the integration process allows us to

00:05:29,360 --> 00:05:31,919
uh

00:05:29,680 --> 00:05:32,960
report whenever there's a pull request

00:05:31,919 --> 00:05:35,360
uh and

00:05:32,960 --> 00:05:37,520
uh and and some vulnerabilities may have

00:05:35,360 --> 00:05:40,000
been reported for a dependency

00:05:37,520 --> 00:05:42,320
one of the ideas is that uh say for

00:05:40,000 --> 00:05:45,919
example if i'm if i'm a

00:05:42,320 --> 00:05:48,320
node.js developer and i'm using

00:05:45,919 --> 00:05:49,440
some library say uh confabulation which

00:05:48,320 --> 00:05:52,560
is like it's been

00:05:49,440 --> 00:05:53,919
it's been around forever and it's it's

00:05:52,560 --> 00:05:56,800
pretty uh

00:05:53,919 --> 00:05:57,440
uh pretty stable and i said well uh

00:05:56,800 --> 00:05:59,039
everything's

00:05:57,440 --> 00:06:01,520
fine with this library no no

00:05:59,039 --> 00:06:03,919
vulnerabilities have been reported

00:06:01,520 --> 00:06:04,880
but the the thing is that for the past

00:06:03,919 --> 00:06:07,440
10 years

00:06:04,880 --> 00:06:07,919
for the past 10 months or so we've had

00:06:07,440 --> 00:06:11,600
around

00:06:07,919 --> 00:06:12,000
eight security vulnerabilities reported

00:06:11,600 --> 00:06:15,919
for

00:06:12,000 --> 00:06:18,479
for node.js which is the runtime so as a

00:06:15,919 --> 00:06:19,360
as a node.js developer i may not be

00:06:18,479 --> 00:06:21,360
aware

00:06:19,360 --> 00:06:24,000
that vulnerabilities are getting

00:06:21,360 --> 00:06:26,880
reported against the runtime itself

00:06:24,000 --> 00:06:27,919
even though my dependencies of the

00:06:26,880 --> 00:06:28,880
application that i'm currently

00:06:27,919 --> 00:06:30,880
developing

00:06:28,880 --> 00:06:32,319
are perfectly fine so that's where

00:06:30,880 --> 00:06:34,720
anchor comes in

00:06:32,319 --> 00:06:36,319
and can report accurately right there

00:06:34,720 --> 00:06:38,160
with github actions

00:06:36,319 --> 00:06:39,440
as preventing a pull request from

00:06:38,160 --> 00:06:41,840
getting merged or

00:06:39,440 --> 00:06:42,560
or even as as part of a nightly run for

00:06:41,840 --> 00:06:44,240
example

00:06:42,560 --> 00:06:46,720
which is perfectly suited for github

00:06:44,240 --> 00:06:49,120
actions so that's why it's important

00:06:46,720 --> 00:06:50,080
and it allows developers that might be

00:06:49,120 --> 00:06:52,560
not be aware

00:06:50,080 --> 00:06:53,440
of of something that is coming up to be

00:06:52,560 --> 00:06:56,000
um

00:06:53,440 --> 00:06:58,639
have that information right there to

00:06:56,000 --> 00:06:58,639
take some action

00:06:59,039 --> 00:07:04,240
awesome and and once i've packaged my

00:07:01,919 --> 00:07:05,599
application into a container image and

00:07:04,240 --> 00:07:09,120
you've scanned it

00:07:05,599 --> 00:07:11,039
i tend to write some configuration code

00:07:09,120 --> 00:07:12,000
for my cloud provider or maybe some

00:07:11,039 --> 00:07:15,840
terraform

00:07:12,000 --> 00:07:17,919
or some kind of aws cloud formation

00:07:15,840 --> 00:07:20,160
template to deploy the software

00:07:17,919 --> 00:07:22,319
uh to my cloud environment and i think

00:07:20,160 --> 00:07:24,800
uh accurix here can help

00:07:22,319 --> 00:07:26,240
uh scan the configuration code so so

00:07:24,800 --> 00:07:26,960
sarah can you talk to us a little bit

00:07:26,240 --> 00:07:29,199
about

00:07:26,960 --> 00:07:30,319
uh what is infrastructure is code and

00:07:29,199 --> 00:07:32,479
how does acurax help

00:07:30,319 --> 00:07:35,680
detect security vulnerabilities in the

00:07:32,479 --> 00:07:35,680
configuration itself

00:07:36,639 --> 00:07:41,120
yeah absolutely i can do that so

00:07:38,800 --> 00:07:42,880
infrastructure as code or iac enables

00:07:41,120 --> 00:07:45,039
developers to define and manage

00:07:42,880 --> 00:07:47,440
cloud infrastructure through code

00:07:45,039 --> 00:07:48,319
examples of iic that you may be familiar

00:07:47,440 --> 00:07:50,800
with like you said

00:07:48,319 --> 00:07:52,080
are terraform aws cloud formation

00:07:50,800 --> 00:07:55,599
kubernetes yaml

00:07:52,080 --> 00:07:57,520
helm charts etc so the benefit of iac

00:07:55,599 --> 00:07:59,680
is that it helps developers to avoid

00:07:57,520 --> 00:08:01,360
cloud deployment inconsistencies

00:07:59,680 --> 00:08:03,199
and it also increases developer

00:08:01,360 --> 00:08:05,360
productivity however

00:08:03,199 --> 00:08:07,120
simple misconfigurations in iec can

00:08:05,360 --> 00:08:09,599
create serious exposures

00:08:07,120 --> 00:08:11,520
and in fact in the last two years alone

00:08:09,599 --> 00:08:13,840
cloud infrastructure misconfigurations

00:08:11,520 --> 00:08:16,960
have contributed to 200 breaches

00:08:13,840 --> 00:08:19,280
that exposed over 30 billion records so

00:08:16,960 --> 00:08:20,319
here at acurix we use the open policy

00:08:19,280 --> 00:08:23,599
agent or opa

00:08:20,319 --> 00:08:24,319
framework from cncf to deliver policy as

00:08:23,599 --> 00:08:27,120
code

00:08:24,319 --> 00:08:28,639
we have a library of 1800 plus policies

00:08:27,120 --> 00:08:29,759
to scan your iac

00:08:28,639 --> 00:08:32,320
and it can detect common

00:08:29,759 --> 00:08:33,200
misconfigurations like s3 buckets open

00:08:32,320 --> 00:08:35,200
to the public

00:08:33,200 --> 00:08:36,240
ssh ports open to the internet open

00:08:35,200 --> 00:08:38,640
security groups

00:08:36,240 --> 00:08:40,000
and much more more importantly though

00:08:38,640 --> 00:08:41,919
the app helps you fix these

00:08:40,000 --> 00:08:43,680
issues by automatically generating the

00:08:41,919 --> 00:08:45,839
pull requests and also providing the

00:08:43,680 --> 00:08:47,360
code required to resolve these issues

00:08:45,839 --> 00:08:49,600
you simply need to review and then

00:08:47,360 --> 00:08:52,320
approve the pull request so we call this

00:08:49,600 --> 00:08:54,000
capability remediation as code

00:08:52,320 --> 00:08:56,000
so now let me give you a real life

00:08:54,000 --> 00:08:57,680
example of how policy is code can be

00:08:56,000 --> 00:09:00,160
used to mitigate risk

00:08:57,680 --> 00:09:01,200
a few weeks ago a security advisory was

00:09:00,160 --> 00:09:03,600
published about an

00:09:01,200 --> 00:09:05,920
unreleased bug in kubernetes that can

00:09:03,600 --> 00:09:07,200
lead to denial of service in snapshot

00:09:05,920 --> 00:09:08,880
controllers

00:09:07,200 --> 00:09:10,480
at a high level this bug can be

00:09:08,880 --> 00:09:11,440
exploited under the following two

00:09:10,480 --> 00:09:13,360
conditions

00:09:11,440 --> 00:09:15,440
if a cluster is running a vulnerable

00:09:13,360 --> 00:09:17,760
version of the snapshot controller

00:09:15,440 --> 00:09:20,320
and if untrusted users are able to

00:09:17,760 --> 00:09:22,080
create volume snapshot resources in a

00:09:20,320 --> 00:09:24,560
specific api group

00:09:22,080 --> 00:09:26,399
so after reviewing the security advisory

00:09:24,560 --> 00:09:28,240
accurix added a new policy to its

00:09:26,399 --> 00:09:30,640
library that check the images

00:09:28,240 --> 00:09:32,160
used by controllers if a vulnerable

00:09:30,640 --> 00:09:33,920
version is present

00:09:32,160 --> 00:09:35,760
it raises a violation and then it

00:09:33,920 --> 00:09:37,680
pinpoints the exact code that needs to

00:09:35,760 --> 00:09:38,480
be updated to use a non-vulnerable

00:09:37,680 --> 00:09:40,399
version

00:09:38,480 --> 00:09:42,240
this enabled customers to detect and

00:09:40,399 --> 00:09:45,519
then eliminate the risk before deploying

00:09:42,240 --> 00:09:45,519
the infrastructure to production

00:09:46,080 --> 00:09:50,959
awesome thanks sarah once we've

00:09:49,120 --> 00:09:53,600
identified some of these vulnerabilities

00:09:50,959 --> 00:09:54,399
we get some cwe alerts or some other

00:09:53,600 --> 00:09:56,720
kind of

00:09:54,399 --> 00:09:58,080
vulnerability database alerts and job i

00:09:56,720 --> 00:10:00,080
was hoping you could talk to us a little

00:09:58,080 --> 00:10:01,200
bit about what secure code warrior can

00:10:00,080 --> 00:10:03,200
do with those alerts

00:10:01,200 --> 00:10:04,800
and how we can help train developers

00:10:03,200 --> 00:10:07,120
from making those mistakes in the first

00:10:04,800 --> 00:10:09,920
place

00:10:07,120 --> 00:10:11,519
yeah absolutely so i think with all

00:10:09,920 --> 00:10:13,200
these tools that we have that we're able

00:10:11,519 --> 00:10:14,320
to put into the pipeline and give that

00:10:13,200 --> 00:10:17,040
early feedback

00:10:14,320 --> 00:10:17,519
loop to the developers um you know we're

00:10:17,040 --> 00:10:19,680
able to

00:10:17,519 --> 00:10:21,440
surface vulnerabilities much quicker uh

00:10:19,680 --> 00:10:23,440
but unfortunately um these are

00:10:21,440 --> 00:10:26,000
application security tools most of them

00:10:23,440 --> 00:10:26,880
and in general what we find is

00:10:26,000 --> 00:10:29,040
developers

00:10:26,880 --> 00:10:30,320
just do not have the skills to be able

00:10:29,040 --> 00:10:31,920
to fix these vulnerabilities

00:10:30,320 --> 00:10:33,920
so if you're coming out of university

00:10:31,920 --> 00:10:36,079
today you're a software engineer

00:10:33,920 --> 00:10:37,839
the one skill that you're not taught is

00:10:36,079 --> 00:10:39,279
how to do things securely you're taught

00:10:37,839 --> 00:10:40,880
how to write functional code

00:10:39,279 --> 00:10:43,200
if you're taught some architecture type

00:10:40,880 --> 00:10:46,560
things but not what it takes why

00:10:43,200 --> 00:10:46,880
good quality uh secure code so that's

00:10:46,560 --> 00:10:49,839
where

00:10:46,880 --> 00:10:50,480
secure code warrior comes in our mission

00:10:49,839 --> 00:10:52,800
is to

00:10:50,480 --> 00:10:54,959
empower developers um with the right

00:10:52,800 --> 00:10:56,640
skills and the tools that they need to

00:10:54,959 --> 00:10:57,279
be able to act as that first line of

00:10:56,640 --> 00:10:59,279
defense

00:10:57,279 --> 00:11:01,040
within their organization because if it

00:10:59,279 --> 00:11:01,680
comes down to it i think everything

00:11:01,040 --> 00:11:03,680
these days

00:11:01,680 --> 00:11:05,519
is uh powered by technology so if that's

00:11:03,680 --> 00:11:07,040
the case if everything's being powered

00:11:05,519 --> 00:11:09,200
by a piece of code

00:11:07,040 --> 00:11:10,160
that originated from a developer writing

00:11:09,200 --> 00:11:12,079
it

00:11:10,160 --> 00:11:13,279
developers really are the people that we

00:11:12,079 --> 00:11:14,240
should be targeting they're most

00:11:13,279 --> 00:11:16,959
critical

00:11:14,240 --> 00:11:18,240
piece of that puzzle so we had a very

00:11:16,959 --> 00:11:20,079
interesting case study

00:11:18,240 --> 00:11:21,680
from a customer that speaks to kind of

00:11:20,079 --> 00:11:23,839
the power of

00:11:21,680 --> 00:11:25,279
teaching developers about secure coding

00:11:23,839 --> 00:11:28,000
and it's a u.s

00:11:25,279 --> 00:11:29,440
tier one financial institution and they

00:11:28,000 --> 00:11:31,440
have a large number of developers and

00:11:29,440 --> 00:11:32,160
they set themselves a lofty goal they

00:11:31,440 --> 00:11:34,000
wanted to train

00:11:32,160 --> 00:11:35,519
all these developers on sql coding on

00:11:34,000 --> 00:11:37,120
the top vulnerabilities that they were

00:11:35,519 --> 00:11:39,920
seeing within their organization

00:11:37,120 --> 00:11:40,560
but also understanding that developers

00:11:39,920 --> 00:11:42,959
are busy

00:11:40,560 --> 00:11:43,920
developers are very overworked they're

00:11:42,959 --> 00:11:45,920
always

00:11:43,920 --> 00:11:47,920
constantly chasing deadlines being asked

00:11:45,920 --> 00:11:50,639
to add features

00:11:47,920 --> 00:11:51,360
so they went about using secure code

00:11:50,639 --> 00:11:53,040
warrior

00:11:51,360 --> 00:11:55,200
to achieve this goal and the way they

00:11:53,040 --> 00:11:57,360
did it is by trying to build

00:11:55,200 --> 00:11:58,639
habits into the developers day-to-day

00:11:57,360 --> 00:12:00,000
workflow

00:11:58,639 --> 00:12:02,880
and what they did was assign the

00:12:00,000 --> 00:12:04,639
developers a task for every single day

00:12:02,880 --> 00:12:06,240
to go and do a security vulnerability

00:12:04,639 --> 00:12:07,519
challenge now that challenge

00:12:06,240 --> 00:12:09,760
takes anywhere from three to five

00:12:07,519 --> 00:12:12,399
minutes and the whole idea was

00:12:09,760 --> 00:12:13,680
you as a developer find your rhythm and

00:12:12,399 --> 00:12:15,839
you figure out when you want to do that

00:12:13,680 --> 00:12:16,399
is it on your bus ride or train ride to

00:12:15,839 --> 00:12:17,920
work

00:12:16,399 --> 00:12:19,040
is it early in the morning you know

00:12:17,920 --> 00:12:20,320
similar to how a lot of people read

00:12:19,040 --> 00:12:22,000
newspaper maybe

00:12:20,320 --> 00:12:23,680
you go and do a security challenge

00:12:22,000 --> 00:12:24,639
basically do one challenge a day for

00:12:23,680 --> 00:12:26,880
three months

00:12:24,639 --> 00:12:28,240
and build that into your daily routine

00:12:26,880 --> 00:12:31,200
and what they found

00:12:28,240 --> 00:12:32,240
at the end of that three months is that

00:12:31,200 --> 00:12:35,360
the developer

00:12:32,240 --> 00:12:37,440
accuracy level increased by 60

00:12:35,360 --> 00:12:38,399
so they were making less mistakes when

00:12:37,440 --> 00:12:40,320
it came

00:12:38,399 --> 00:12:41,680
to writing code and they were writing

00:12:40,320 --> 00:12:43,440
secure code from the beginning

00:12:41,680 --> 00:12:44,959
and essentially what that translates to

00:12:43,440 --> 00:12:47,519
is obviously we're catching

00:12:44,959 --> 00:12:49,200
uh less bugs at the at the later end so

00:12:47,519 --> 00:12:50,959
there's less security bugs for us to

00:12:49,200 --> 00:12:52,399
go and fix we're exposing our

00:12:50,959 --> 00:12:53,600
applications less

00:12:52,399 --> 00:12:55,760
in production when it comes to these

00:12:53,600 --> 00:12:57,680
vulnerabilities with all these attackers

00:12:55,760 --> 00:12:58,800
but also if you look at it from an

00:12:57,680 --> 00:13:01,279
engineering function

00:12:58,800 --> 00:13:02,320
perspective there is a massive gain to

00:13:01,279 --> 00:13:03,920
be had

00:13:02,320 --> 00:13:06,480
from a product velocity perspective

00:13:03,920 --> 00:13:08,639
because we don't have to come back and

00:13:06,480 --> 00:13:10,320
fix all of these vulnerabilities and

00:13:08,639 --> 00:13:11,920
what we've tried to do with the github

00:13:10,320 --> 00:13:13,680
integration is basically just

00:13:11,920 --> 00:13:15,680
act as an extension of that so we've got

00:13:13,680 --> 00:13:17,519
a training platform where you can go in

00:13:15,680 --> 00:13:19,200
you can have some very targeted training

00:13:17,519 --> 00:13:21,360
programs but if you

00:13:19,200 --> 00:13:23,600
look at the power of the github

00:13:21,360 --> 00:13:25,600
integration the action ecosystem

00:13:23,600 --> 00:13:27,360
it's that we're able to catch these

00:13:25,600 --> 00:13:29,120
things really early on if a

00:13:27,360 --> 00:13:30,959
developer commits something maybe they

00:13:29,120 --> 00:13:32,880
have a pull request if we can

00:13:30,959 --> 00:13:34,480
surface bad things to them straight away

00:13:32,880 --> 00:13:35,279
it's so much quicker for them to go and

00:13:34,480 --> 00:13:37,519
fix it

00:13:35,279 --> 00:13:38,959
and so that's the case one of the things

00:13:37,519 --> 00:13:41,519
that developers will need

00:13:38,959 --> 00:13:44,000
is targeted remediation advice so if

00:13:41,519 --> 00:13:45,680
encore or acure x comes back and says

00:13:44,000 --> 00:13:47,440
hey you've got this vulnerability with

00:13:45,680 --> 00:13:49,199
your docker config or

00:13:47,440 --> 00:13:51,279
you know if you're doing sas scanning

00:13:49,199 --> 00:13:52,800
you've got this web application or

00:13:51,279 --> 00:13:55,040
mobile vulnerability

00:13:52,800 --> 00:13:55,839
as a developer how do you go and fix it

00:13:55,040 --> 00:13:58,320
i think today

00:13:55,839 --> 00:13:59,360
what we find is that developers will go

00:13:58,320 --> 00:14:00,800
and remediate

00:13:59,360 --> 00:14:02,880
it might not be the best way to fix it

00:14:00,800 --> 00:14:04,880
maybe it goes back again goes back again

00:14:02,880 --> 00:14:06,399
and that's a normal thing that happens

00:14:04,880 --> 00:14:07,760
in the workflow it's like two or three

00:14:06,399 --> 00:14:09,600
times for you to actually get the

00:14:07,760 --> 00:14:11,600
vulnerability right and fix it

00:14:09,600 --> 00:14:13,519
um so where we're coming in is once

00:14:11,600 --> 00:14:15,920
you've got all these amazing tools

00:14:13,519 --> 00:14:18,000
come in and find these vulnerabilities

00:14:15,920 --> 00:14:18,720
we want to be able to enrich the results

00:14:18,000 --> 00:14:21,519
of these

00:14:18,720 --> 00:14:22,720
vulnerabilities with targeted advice on

00:14:21,519 --> 00:14:24,399
secure code warriors so we have a

00:14:22,720 --> 00:14:25,760
massive content library that covers

00:14:24,399 --> 00:14:29,279
everything from web

00:14:25,760 --> 00:14:31,279
mobile api even mainframe like cobol

00:14:29,279 --> 00:14:34,000
and so on so if there's a vulnerability

00:14:31,279 --> 00:14:35,440
found we'll point you to a deep link

00:14:34,000 --> 00:14:37,040
within secure code warrior

00:14:35,440 --> 00:14:39,279
that will say hey this is how you fix

00:14:37,040 --> 00:14:40,160
this particular cwe or this

00:14:39,279 --> 00:14:41,680
vulnerability

00:14:40,160 --> 00:14:43,199
within your language and framework and

00:14:41,680 --> 00:14:44,800
this is going to be actual functional

00:14:43,199 --> 00:14:49,199
code apis

00:14:44,800 --> 00:14:51,440
that you can use awesome

00:14:49,199 --> 00:14:53,519
one thing we've all mentioned and maybe

00:14:51,440 --> 00:14:54,880
hasn't been explicitly shared is how all

00:14:53,519 --> 00:14:57,120
these products integrate

00:14:54,880 --> 00:14:58,000
with github and so what i was hoping we

00:14:57,120 --> 00:15:00,240
could do next is

00:14:58,000 --> 00:15:01,199
talk about how these alerts show up in

00:15:00,240 --> 00:15:03,120
the ui

00:15:01,199 --> 00:15:04,240
and why it's important to present this

00:15:03,120 --> 00:15:06,160
information to

00:15:04,240 --> 00:15:07,360
developers while they're writing their

00:15:06,160 --> 00:15:09,600
software

00:15:07,360 --> 00:15:11,519
so if we go to the next slide i think uh

00:15:09,600 --> 00:15:12,240
alfredo this sets you up to maybe talk

00:15:11,519 --> 00:15:14,480
through

00:15:12,240 --> 00:15:16,160
uh the kinds of alerts that encore is

00:15:14,480 --> 00:15:17,760
finding and how those are surfaced in

00:15:16,160 --> 00:15:21,120
the github ui could you give us a little

00:15:17,760 --> 00:15:21,120
context of what's going on here

00:15:21,440 --> 00:15:29,040
yeah um that's right so the idea here

00:15:25,040 --> 00:15:31,360
is that you have say a container a

00:15:29,040 --> 00:15:36,399
container-based application with

00:15:31,360 --> 00:15:39,519
with a docker file and you are able to

00:15:36,399 --> 00:15:41,839
build this container and create your

00:15:39,519 --> 00:15:42,800
your application and through the github

00:15:41,839 --> 00:15:45,120
actions

00:15:42,800 --> 00:15:46,160
uh you build this container and then we

00:15:45,120 --> 00:15:48,959
go in and

00:15:46,160 --> 00:15:49,920
start uh analyzing the different various

00:15:48,959 --> 00:15:52,560
layers and

00:15:49,920 --> 00:15:54,800
components of this completed container

00:15:52,560 --> 00:15:56,240
so so that's that's a crucial thing that

00:15:54,800 --> 00:15:58,399
that happens here because

00:15:56,240 --> 00:15:59,920
as a developer you might not know what

00:15:58,399 --> 00:16:03,519
it's getting pulled in

00:15:59,920 --> 00:16:05,440
so by being able to build a container

00:16:03,519 --> 00:16:08,560
and then we go in and analyze these

00:16:05,440 --> 00:16:10,240
uh built uh built image uh we can

00:16:08,560 --> 00:16:12,240
accurately say well this is what

00:16:10,240 --> 00:16:14,240
what would uh happen at the end of the

00:16:12,240 --> 00:16:15,440
day if this if this code and if this

00:16:14,240 --> 00:16:18,399
docker file gets uh

00:16:15,440 --> 00:16:20,079
executed we end up with a with a running

00:16:18,399 --> 00:16:23,519
container it would look like these

00:16:20,079 --> 00:16:25,759
and and then we correlate the um

00:16:23,519 --> 00:16:27,519
uh the the the software build the

00:16:25,759 --> 00:16:28,959
materials like everything the catalog

00:16:27,519 --> 00:16:31,680
that gets produced out of

00:16:28,959 --> 00:16:32,639
investigating what the contents are and

00:16:31,680 --> 00:16:35,040
then a matching

00:16:32,639 --> 00:16:36,079
uh starts occurring if there's a package

00:16:35,040 --> 00:16:39,360
and a certain given

00:16:36,079 --> 00:16:42,000
version and so what ha what happens here

00:16:39,360 --> 00:16:42,399
it's uh there's there's a couple of

00:16:42,000 --> 00:16:45,680
things

00:16:42,399 --> 00:16:47,920
first we were able to alert and prevent

00:16:45,680 --> 00:16:49,839
a certain uh pull request or a change in

00:16:47,920 --> 00:16:51,199
github

00:16:49,839 --> 00:16:55,040
given the type of reporting that we're

00:16:51,199 --> 00:16:57,120
getting so you can actually say wow

00:16:55,040 --> 00:16:58,880
i'm fairly certain that my the

00:16:57,120 --> 00:17:00,160
vulnerabilities that are low risk or

00:16:58,880 --> 00:17:02,639
medium risk are

00:17:00,160 --> 00:17:03,360
are good to go but if there's anything

00:17:02,639 --> 00:17:05,600
that is

00:17:03,360 --> 00:17:07,199
critical it's a critical vulnerability

00:17:05,600 --> 00:17:09,679
like you need to stop these

00:17:07,199 --> 00:17:10,559
pull requests so we are able to

00:17:09,679 --> 00:17:12,400
fine-tune

00:17:10,559 --> 00:17:14,880
what type of vulnerabilities are getting

00:17:12,400 --> 00:17:19,039
reported in the github ui

00:17:14,880 --> 00:17:22,959
and those are optionally um

00:17:19,039 --> 00:17:27,039
sent over to uh produce a serif report

00:17:22,959 --> 00:17:29,600
which allows you to have a nice um

00:17:27,039 --> 00:17:30,640
kind of like a table based view of

00:17:29,600 --> 00:17:33,280
everything that is

00:17:30,640 --> 00:17:34,080
being reported and and you can act

00:17:33,280 --> 00:17:37,440
actually uh

00:17:34,080 --> 00:17:39,520
go through different details so

00:17:37,440 --> 00:17:41,760
it is not only the reporting that is

00:17:39,520 --> 00:17:43,679
interesting it's also that

00:17:41,760 --> 00:17:45,280
you can actually say well i want to i

00:17:43,679 --> 00:17:46,960
want to see what critical

00:17:45,280 --> 00:17:48,640
vulnerabilities are being reported where

00:17:46,960 --> 00:17:49,440
they're coming from what software is

00:17:48,640 --> 00:17:50,720
affected

00:17:49,440 --> 00:17:52,720
how is it how is it that that's

00:17:50,720 --> 00:17:53,679
affecting me how how does this thing got

00:17:52,720 --> 00:17:55,520
matched

00:17:53,679 --> 00:17:56,880
and which are important and critical

00:17:55,520 --> 00:17:59,120
details when you're developing an

00:17:56,880 --> 00:18:01,120
application you might not be aware

00:17:59,120 --> 00:18:02,240
where what that where that information

00:18:01,120 --> 00:18:04,320
is coming from

00:18:02,240 --> 00:18:06,640
um so that's that's kind of like what

00:18:04,320 --> 00:18:08,080
we're we're seeing here on this slide

00:18:06,640 --> 00:18:10,640
that's that's basically kind of like the

00:18:08,080 --> 00:18:12,559
workflow

00:18:10,640 --> 00:18:14,960
nice and i know sarah you've got

00:18:12,559 --> 00:18:16,640
something similar with acurix maybe

00:18:14,960 --> 00:18:19,280
on the next slide you could walk us

00:18:16,640 --> 00:18:20,320
through what the acureex reports look

00:18:19,280 --> 00:18:23,440
like when they're scanning your

00:18:20,320 --> 00:18:23,440
infrastructure as code

00:18:24,320 --> 00:18:29,039
yeah absolutely so you can get the

00:18:26,720 --> 00:18:30,480
acurex app from the github marketplace

00:18:29,039 --> 00:18:32,000
and sign up for free

00:18:30,480 --> 00:18:34,080
once you do that you simply need to

00:18:32,000 --> 00:18:34,960
specify the repo or repos that you want

00:18:34,080 --> 00:18:36,640
to scan

00:18:34,960 --> 00:18:38,960
the app will begin scanning the repo and

00:18:36,640 --> 00:18:41,919
then report violations in the issues tab

00:18:38,960 --> 00:18:43,679
as you can see here on this screenshot

00:18:41,919 --> 00:18:45,679
each issue reported has an associated

00:18:43,679 --> 00:18:47,440
severity level with it so it'll be high

00:18:45,679 --> 00:18:49,760
medium or low

00:18:47,440 --> 00:18:51,679
as issues are detected the app helps

00:18:49,760 --> 00:18:52,960
developers fix them by automatically

00:18:51,679 --> 00:18:54,640
generating pull requests and then

00:18:52,960 --> 00:18:56,080
providing the code required to resolve

00:18:54,640 --> 00:18:59,120
these issues so if you go

00:18:56,080 --> 00:18:59,120
to the next slide

00:19:01,280 --> 00:19:05,200
there we go developers simply need to

00:19:03,840 --> 00:19:05,840
review and then approve the pull

00:19:05,200 --> 00:19:07,760
requests

00:19:05,840 --> 00:19:10,240
so as we can see in this example the

00:19:07,760 --> 00:19:10,799
vulnerability is to ensure that s3

00:19:10,240 --> 00:19:12,799
buckets

00:19:10,799 --> 00:19:14,960
have server-side encryption at rest

00:19:12,799 --> 00:19:16,240
enabled so we provide some information

00:19:14,960 --> 00:19:17,840
about remediation

00:19:16,240 --> 00:19:20,080
then we add the code to resolve it in

00:19:17,840 --> 00:19:22,240
the pull request so this functionality

00:19:20,080 --> 00:19:24,400
allows developers to leverage iic

00:19:22,240 --> 00:19:26,640
to achieve speed and agility while

00:19:24,400 --> 00:19:30,480
simultaneously ensuring that compliance

00:19:26,640 --> 00:19:30,480
and security best practices are observed

00:19:30,960 --> 00:19:35,679
awesome thanks sarah and i know job you

00:19:33,919 --> 00:19:37,679
built a github action that

00:19:35,679 --> 00:19:39,440
kind of intercepts some of these reports

00:19:37,679 --> 00:19:41,120
that are going into the github ui and

00:19:39,440 --> 00:19:43,520
then appends them with the

00:19:41,120 --> 00:19:44,880
contextual training information so maybe

00:19:43,520 --> 00:19:46,400
you can talk us through

00:19:44,880 --> 00:19:48,160
you know if we're using the secure code

00:19:46,400 --> 00:19:50,080
warrior add-on here to any of these

00:19:48,160 --> 00:19:51,679
security tools what that looks like and

00:19:50,080 --> 00:19:54,400
kind of what the developer experiences

00:19:51,679 --> 00:19:54,400
on the next slide

00:19:54,480 --> 00:19:59,600
yeah absolutely so what we'll do is uh

00:19:57,679 --> 00:20:01,200
once all these appsec tools have worked

00:19:59,600 --> 00:20:03,760
very hard and they've

00:20:01,200 --> 00:20:06,880
found all of these vulnerabilities or

00:20:03,760 --> 00:20:10,080
flaws and they pinpoint what cwes or

00:20:06,880 --> 00:20:10,960
cves they are um we will enrich that

00:20:10,080 --> 00:20:13,600
information

00:20:10,960 --> 00:20:15,360
uh with training links um so and

00:20:13,600 --> 00:20:17,520
training information so you'll see

00:20:15,360 --> 00:20:20,000
uh over here i've got a pull request

00:20:17,520 --> 00:20:22,240
view so this is a node.js application

00:20:20,000 --> 00:20:23,280
someone has raised this pull request and

00:20:22,240 --> 00:20:25,600
there happens to be

00:20:23,280 --> 00:20:27,039
a vulnerability in it which is reflected

00:20:25,600 --> 00:20:28,640
cross-site scripting

00:20:27,039 --> 00:20:30,080
now if the user already knows how to fix

00:20:28,640 --> 00:20:32,640
it great they can go and

00:20:30,080 --> 00:20:34,559
fix it or you know let's say in the case

00:20:32,640 --> 00:20:35,840
of accurate sometimes they just raise a

00:20:34,559 --> 00:20:36,320
pull request all you need to do is

00:20:35,840 --> 00:20:39,440
review

00:20:36,320 --> 00:20:40,080
and fix it that would be amazing if that

00:20:39,440 --> 00:20:41,679
just happened

00:20:40,080 --> 00:20:43,760
but in a lot of cases you have to

00:20:41,679 --> 00:20:45,280
actually go in and do it yourself and

00:20:43,760 --> 00:20:46,080
you have to figure out hey what that

00:20:45,280 --> 00:20:48,400
vulnerability

00:20:46,080 --> 00:20:49,760
is and then b okay well now that i

00:20:48,400 --> 00:20:51,280
understand it i know why this is

00:20:49,760 --> 00:20:53,120
important for me to go and fix

00:20:51,280 --> 00:20:54,400
well how do i actually go and fix it um

00:20:53,120 --> 00:20:57,840
so if you go over to the

00:20:54,400 --> 00:21:00,799
next slide once you click

00:20:57,840 --> 00:21:02,320
on the training link from within the the

00:21:00,799 --> 00:21:05,360
pull request from that comment

00:21:02,320 --> 00:21:06,240
uh you will land on this particular page

00:21:05,360 --> 00:21:08,480
that you see

00:21:06,240 --> 00:21:10,080
on the on the bottom right hand side and

00:21:08,480 --> 00:21:11,600
there's two things to note here so we

00:21:10,080 --> 00:21:13,600
clicked on the link

00:21:11,600 --> 00:21:15,360
and then if you look at number two we're

00:21:13,600 --> 00:21:17,039
actually in the language and framework

00:21:15,360 --> 00:21:18,000
in this case this was a node.js express

00:21:17,039 --> 00:21:19,679
application

00:21:18,000 --> 00:21:21,120
um so we're looking at a node.js express

00:21:19,679 --> 00:21:21,760
code base and if you look at number

00:21:21,120 --> 00:21:24,640
three

00:21:21,760 --> 00:21:25,440
uh we're looking at a training piece of

00:21:24,640 --> 00:21:28,080
content

00:21:25,440 --> 00:21:29,600
uh for reflected cross-site scripting

00:21:28,080 --> 00:21:30,000
and that's the whole idea for me as a

00:21:29,600 --> 00:21:33,039
developer

00:21:30,000 --> 00:21:35,120
i can go in very quickly understand what

00:21:33,039 --> 00:21:37,039
this vulnerability is in node.js

00:21:35,120 --> 00:21:40,559
and then also the second part how do i

00:21:37,039 --> 00:21:43,919
go about fixing it within my stack

00:21:40,559 --> 00:21:44,960
awesome well thanks for sharing that

00:21:43,919 --> 00:21:46,720
everybody i think

00:21:44,960 --> 00:21:48,960
uh this is really good to kind of see

00:21:46,720 --> 00:21:50,720
how all of your tools integrate into the

00:21:48,960 --> 00:21:52,559
github ui and provide

00:21:50,720 --> 00:21:54,000
more information to developers as

00:21:52,559 --> 00:21:56,799
they're working actively

00:21:54,000 --> 00:21:58,480
on their their application um in the

00:21:56,799 --> 00:21:59,200
last five minutes here to take us out

00:21:58,480 --> 00:22:02,400
i'd love to

00:21:59,200 --> 00:22:02,720
kind of understand uh what's coming next

00:22:02,400 --> 00:22:04,400
for

00:22:02,720 --> 00:22:06,400
for your companies you know where

00:22:04,400 --> 00:22:08,159
where's the product headed or what are

00:22:06,400 --> 00:22:08,880
the next kind of set of problems on your

00:22:08,159 --> 00:22:12,799
horizon

00:22:08,880 --> 00:22:16,000
alfredo you want to kick us off

00:22:12,799 --> 00:22:18,799
yeah uh that's right jose like i i see

00:22:16,000 --> 00:22:20,000
in the in the near future a couple of uh

00:22:18,799 --> 00:22:21,600
a couple of

00:22:20,000 --> 00:22:23,520
different things that are are pretty

00:22:21,600 --> 00:22:26,080
interesting um

00:22:23,520 --> 00:22:27,039
personally what i would like to see is a

00:22:26,080 --> 00:22:30,640
more

00:22:27,039 --> 00:22:34,640
and more integrations in within github

00:22:30,640 --> 00:22:37,520
for security vulnerability reporting

00:22:34,640 --> 00:22:39,280
we have on the on the static analysis

00:22:37,520 --> 00:22:42,720
side of things

00:22:39,280 --> 00:22:45,440
we already know when packages are

00:22:42,720 --> 00:22:46,559
uh specified for a certain dependency uh

00:22:45,440 --> 00:22:48,960
to be installed

00:22:46,559 --> 00:22:50,720
and that could be a docker file for

00:22:48,960 --> 00:22:52,000
python that's a set of pi or

00:22:50,720 --> 00:22:54,000
requirements.txt so

00:22:52,000 --> 00:22:56,559
we already know where packages are being

00:22:54,000 --> 00:22:59,840
declared at what a particular version

00:22:56,559 --> 00:23:00,640
and developers have uh the first thing

00:22:59,840 --> 00:23:03,679
that they're seeing

00:23:00,640 --> 00:23:05,520
is not some tab in some ui but rather

00:23:03,679 --> 00:23:07,120
when they're seeing the code right in

00:23:05,520 --> 00:23:09,760
front of them

00:23:07,120 --> 00:23:11,360
to have some sort of reporting right

00:23:09,760 --> 00:23:13,679
there and then this is similar to

00:23:11,360 --> 00:23:17,039
different lending

00:23:13,679 --> 00:23:18,559
tools that exist today for for most any

00:23:17,039 --> 00:23:20,559
uh any language

00:23:18,559 --> 00:23:22,400
where where the linking occurs right

00:23:20,559 --> 00:23:25,360
right there in the ide

00:23:22,400 --> 00:23:27,440
or um the text editor so i think a

00:23:25,360 --> 00:23:30,159
better integration there that allows

00:23:27,440 --> 00:23:31,919
uh reporting uh security vulnerabilities

00:23:30,159 --> 00:23:33,360
in front of the developer that would be

00:23:31,919 --> 00:23:35,120
that would be tremendous and the other

00:23:33,360 --> 00:23:36,640
one is um

00:23:35,120 --> 00:23:38,400
so that's kind of like going left but

00:23:36,640 --> 00:23:40,400
like the r the other um

00:23:38,400 --> 00:23:41,600
uh interesting one is uh going going all

00:23:40,400 --> 00:23:43,440
the way to the right when

00:23:41,600 --> 00:23:45,279
when there's a dynamic application

00:23:43,440 --> 00:23:47,440
security testing or dash

00:23:45,279 --> 00:23:48,960
um when when you have an application

00:23:47,440 --> 00:23:51,360
that is up and running

00:23:48,960 --> 00:23:52,960
and kind of like sandbox and somehow

00:23:51,360 --> 00:23:53,679
it's pulling dependencies out of the

00:23:52,960 --> 00:23:55,919
blue

00:23:53,679 --> 00:23:58,320
uh that you were not uh getting

00:23:55,919 --> 00:24:01,760
accounted for so i i think those two are

00:23:58,320 --> 00:24:02,559
are crucial and and i think uh more work

00:24:01,760 --> 00:24:05,360
will go into

00:24:02,559 --> 00:24:08,159
into those areas to to provide better

00:24:05,360 --> 00:24:08,159
better reporting

00:24:09,200 --> 00:24:13,520
sarah what's new for acure x or what's

00:24:11,279 --> 00:24:16,159
on the horizon big big features you're

00:24:13,520 --> 00:24:16,159
excited about

00:24:16,559 --> 00:24:20,720
yeah sure so there are a lot of new and

00:24:18,960 --> 00:24:21,679
exciting innovations in the works at

00:24:20,720 --> 00:24:24,240
acurix to help

00:24:21,679 --> 00:24:24,880
developers embrace security as many of

00:24:24,240 --> 00:24:26,640
you know

00:24:24,880 --> 00:24:28,000
in high velocity development

00:24:26,640 --> 00:24:30,000
environments where iac

00:24:28,000 --> 00:24:31,360
is constantly being updated and issues

00:24:30,000 --> 00:24:32,799
are constantly being reported

00:24:31,360 --> 00:24:34,880
it can be really overwhelming for

00:24:32,799 --> 00:24:35,200
developers to know like which issues to

00:24:34,880 --> 00:24:37,760
fix

00:24:35,200 --> 00:24:40,159
first so at accurix we're going beyond

00:24:37,760 --> 00:24:42,240
policy as code and remediation as code

00:24:40,159 --> 00:24:44,320
with a capability that we call security

00:24:42,240 --> 00:24:44,960
as code so this will automatically

00:24:44,320 --> 00:24:47,279
perform

00:24:44,960 --> 00:24:49,360
threat modeling and help prioritize

00:24:47,279 --> 00:24:51,200
risks based on severity

00:24:49,360 --> 00:24:52,880
so let me give you an example of how

00:24:51,200 --> 00:24:54,720
this could have prevented a breach at a

00:24:52,880 --> 00:24:56,000
well-known clean energy company a couple

00:24:54,720 --> 00:24:57,840
of years ago

00:24:56,000 --> 00:24:59,520
so in this breach attackers found a

00:24:57,840 --> 00:25:00,159
kubernetes server exposed to the

00:24:59,520 --> 00:25:01,520
internet

00:25:00,159 --> 00:25:03,360
and the server did not have

00:25:01,520 --> 00:25:05,440
authentication enabled

00:25:03,360 --> 00:25:07,360
the attackers found credentials stored

00:25:05,440 --> 00:25:09,120
inside the kubernetes pod and they were

00:25:07,360 --> 00:25:11,679
able to use these credentials

00:25:09,120 --> 00:25:12,640
to explore data within the company's s3

00:25:11,679 --> 00:25:14,799
buckets

00:25:12,640 --> 00:25:16,640
so here's how security as code could

00:25:14,799 --> 00:25:18,000
have been used to detect and mitigate

00:25:16,640 --> 00:25:20,080
this breach path

00:25:18,000 --> 00:25:21,520
if a container scanning tool reported

00:25:20,080 --> 00:25:24,080
that credentials were found

00:25:21,520 --> 00:25:25,520
inside a kubernetes pod acura's can then

00:25:24,080 --> 00:25:28,240
build threat models

00:25:25,520 --> 00:25:29,520
to analyze if that pod has any exposures

00:25:28,240 --> 00:25:31,120
specifically it would be able to

00:25:29,520 --> 00:25:32,960
determine the following so

00:25:31,120 --> 00:25:35,520
if the server was exposed to the

00:25:32,960 --> 00:25:37,039
internet if authentication was not

00:25:35,520 --> 00:25:38,559
enabled for the server

00:25:37,039 --> 00:25:40,799
if the credentials could be used to

00:25:38,559 --> 00:25:43,120
access any cloud storage services

00:25:40,799 --> 00:25:44,080
and then the overall blast radius of the

00:25:43,120 --> 00:25:46,000
attack

00:25:44,080 --> 00:25:48,320
i'm really excited about this capability

00:25:46,000 --> 00:25:50,960
because i i believe in making security

00:25:48,320 --> 00:25:52,799
simple yet effective for developers it's

00:25:50,960 --> 00:25:54,400
a really complex topic with lots of

00:25:52,799 --> 00:25:56,720
nuances and so my goal

00:25:54,400 --> 00:25:59,200
is to help build a product that fits

00:25:56,720 --> 00:26:01,840
into developers cloud native workflows

00:25:59,200 --> 00:26:03,440
helps them to be able to identify issues

00:26:01,840 --> 00:26:07,440
and then also to be able to fix them

00:26:03,440 --> 00:26:07,440
without having to be security experts

00:26:07,520 --> 00:26:12,320
awesome what's going on with secure code

00:26:10,960 --> 00:26:13,760
warrior next are you adding more

00:26:12,320 --> 00:26:15,440
frameworks or new

00:26:13,760 --> 00:26:18,400
new vulnerability databases or what's

00:26:15,440 --> 00:26:20,240
what's coming at us next

00:26:18,400 --> 00:26:22,240
uh so i think one of the things that we

00:26:20,240 --> 00:26:23,039
are always doing is uh adding new

00:26:22,240 --> 00:26:24,240
languages

00:26:23,039 --> 00:26:26,960
and frameworks and vulnerability

00:26:24,240 --> 00:26:29,440
databases actually just crossed the 50

00:26:26,960 --> 00:26:30,720
language mark recently uh but i'm going

00:26:29,440 --> 00:26:33,120
to i'm going to make a

00:26:30,720 --> 00:26:34,240
place a big bet and say 2021 not just

00:26:33,120 --> 00:26:36,159
for scw

00:26:34,240 --> 00:26:37,440
i think in general for the application

00:26:36,159 --> 00:26:39,520
security industry

00:26:37,440 --> 00:26:41,279
is going to be the year of integrations

00:26:39,520 --> 00:26:42,640
and i think mainly the reason for that

00:26:41,279 --> 00:26:44,080
is if you look at integrations or you

00:26:42,640 --> 00:26:45,679
look at partnerships it's not just you

00:26:44,080 --> 00:26:47,279
know one plus one equals two

00:26:45,679 --> 00:26:49,840
i think it's more a case of one plus one

00:26:47,279 --> 00:26:51,279
equals eleven so hopefully i think just

00:26:49,840 --> 00:26:53,200
as part of like everything that we've

00:26:51,279 --> 00:26:55,200
discussed today people realize that

00:26:53,200 --> 00:26:56,640
by integrating all of these amazing

00:26:55,200 --> 00:26:59,520
tools together

00:26:56,640 --> 00:27:00,720
um you don't just get you know a greater

00:26:59,520 --> 00:27:03,279
effect of all of them it's actually the

00:27:00,720 --> 00:27:05,840
combined effect is so much greater

00:27:03,279 --> 00:27:07,120
than the sum of its individual parts so

00:27:05,840 --> 00:27:09,279
i think that's what we're going for so

00:27:07,120 --> 00:27:11,120
we want to double down on integrations

00:27:09,279 --> 00:27:12,799
and one of the things that i think we

00:27:11,120 --> 00:27:16,559
can really bring to the table

00:27:12,799 --> 00:27:19,440
is really really really bad code 99

00:27:16,559 --> 00:27:20,000
percent of the code that we have in sew

00:27:19,440 --> 00:27:21,679
is bad

00:27:20,000 --> 00:27:23,200
codes we have this massive library of

00:27:21,679 --> 00:27:25,520
really bad vulnerabilities

00:27:23,200 --> 00:27:27,039
and if we look at you know all these uh

00:27:25,520 --> 00:27:28,240
application security tools we look at

00:27:27,039 --> 00:27:30,640
github with you know it's advanced

00:27:28,240 --> 00:27:33,200
security codeql

00:27:30,640 --> 00:27:34,799
you you know partners can leverage our

00:27:33,200 --> 00:27:37,039
content you know the thousands of

00:27:34,799 --> 00:27:38,880
challenges and code bases that we have

00:27:37,039 --> 00:27:41,440
to make their engines better so you're

00:27:38,880 --> 00:27:44,399
better at detecting bad vulnerability

00:27:41,440 --> 00:27:45,600
patterns then i think on the flip side

00:27:44,399 --> 00:27:48,080
uh the benefit that

00:27:45,600 --> 00:27:49,279
we can get from all these tools is as we

00:27:48,080 --> 00:27:51,279
integrate together

00:27:49,279 --> 00:27:52,799
uh there are probably blind spots that

00:27:51,279 --> 00:27:55,039
we have because at the end of the day

00:27:52,799 --> 00:27:56,480
all of these vulnerability databases

00:27:55,039 --> 00:27:58,720
these challenges that we have

00:27:56,480 --> 00:28:00,159
are written by humans so we're going to

00:27:58,720 --> 00:28:00,559
write about vulnerabilities that we

00:28:00,159 --> 00:28:01,840
don't

00:28:00,559 --> 00:28:03,039
that we know about and we're going to

00:28:01,840 --> 00:28:03,679
completely ignore the ones that we don't

00:28:03,039 --> 00:28:06,080
know about

00:28:03,679 --> 00:28:07,279
so i think taking advantage of the

00:28:06,080 --> 00:28:09,440
ecosystem

00:28:07,279 --> 00:28:11,360
uh looking at tools like codeql if

00:28:09,440 --> 00:28:13,520
you're able to identify

00:28:11,360 --> 00:28:15,200
what the gaps are in our own content

00:28:13,520 --> 00:28:16,960
based on these production tools that are

00:28:15,200 --> 00:28:20,000
running on open source

00:28:16,960 --> 00:28:21,520
repositories on private repositories we

00:28:20,000 --> 00:28:23,760
can then leverage that to

00:28:21,520 --> 00:28:26,799
identify the gaps and then build content

00:28:23,760 --> 00:28:26,799
in that particular area

00:28:26,960 --> 00:28:30,720
awesome well thanks so much everybody

00:28:28,640 --> 00:28:32,640
for joining the panel today i hope

00:28:30,720 --> 00:28:34,320
those in attendance got to get to hear

00:28:32,640 --> 00:28:36,240
some good new information about how

00:28:34,320 --> 00:28:37,760
these tools integrate with github

00:28:36,240 --> 00:28:39,279
if you take a look at the last slide all

00:28:37,760 --> 00:28:41,120
of these integrations are available

00:28:39,279 --> 00:28:43,200
today in the github marketplace

00:28:41,120 --> 00:28:45,279
and help your development team shift

00:28:43,200 --> 00:28:46,159
left by going and installing them give

00:28:45,279 --> 00:28:48,799
them a dry run

00:28:46,159 --> 00:28:49,600
i think you'll like the results so

00:28:48,799 --> 00:28:55,120
thanks a ton

00:28:49,600 --> 00:28:55,120

YouTube URL: https://www.youtube.com/watch?v=lq9J03RoG10


