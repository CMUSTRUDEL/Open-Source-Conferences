Title: The Metasploit Framework - GitHub Universe 2020
Publication date: 2020-12-09
Playlist: GitHub Universe 2020: Developer - Secure Development
Description: 
	Presented by Spencer McIntyre, Lead Researcher, Metasploit Framework

The Metasploit Framework is an open source tool for testing and demonstrating security vulnerabilities within software. In this session, we'll talk about how it can be used to perform an assessmentâ€”and describe the heart of the framework content, the exploit module. Finally, we'll go over how the open source community itself can contribute to the Metasploit Framework.

For more from GitHub Universe 2020, visit https://githubuniverse.com

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:07,270 --> 00:00:12,000
[Music]

00:00:11,200 --> 00:00:13,840
hello everyone

00:00:12,000 --> 00:00:15,040
my name is spencer mcatar i'm really

00:00:13,840 --> 00:00:17,119
happy to be here i hope everyone's

00:00:15,040 --> 00:00:18,880
having a great github universe so far

00:00:17,119 --> 00:00:20,320
um so we're here to talk about the

00:00:18,880 --> 00:00:21,520
metabolic framework and if you're not

00:00:20,320 --> 00:00:22,640
familiar with it we're gonna go over a

00:00:21,520 --> 00:00:24,160
little bit about what it is

00:00:22,640 --> 00:00:25,840
uh show a little bit about how it can be

00:00:24,160 --> 00:00:27,680
used and finally close out with talking

00:00:25,840 --> 00:00:28,320
about how to go ahead and contribute to

00:00:27,680 --> 00:00:29,920
it

00:00:28,320 --> 00:00:32,239
uh so like was mentioned uh my name is

00:00:29,920 --> 00:00:34,079
spencer mcintyre um i am uh the research

00:00:32,239 --> 00:00:35,040
lead on the medically project uh at

00:00:34,079 --> 00:00:37,040
rapid seven

00:00:35,040 --> 00:00:38,160
i've been a metasploit contributor uh

00:00:37,040 --> 00:00:40,320
for about ten years

00:00:38,160 --> 00:00:41,680
now i've been contributing content to uh

00:00:40,320 --> 00:00:43,920
the muscle framework um

00:00:41,680 --> 00:00:45,840
started about 10 years ago so it's been

00:00:43,920 --> 00:00:47,200
uh it's been a great and wild ride and

00:00:45,840 --> 00:00:48,960
i'm here to share a little bit about

00:00:47,200 --> 00:00:51,280
that with it

00:00:48,960 --> 00:00:53,440
so those plate is an open source uh

00:00:51,280 --> 00:00:54,559
security framework it started out as an

00:00:53,440 --> 00:00:56,719
exploit framework

00:00:54,559 --> 00:00:57,840
uh which is like the core of the content

00:00:56,719 --> 00:01:00,239
uh and it has since

00:00:57,840 --> 00:01:02,239
evolved into that to be a framework to

00:01:00,239 --> 00:01:03,760
facilitate security research and most

00:01:02,239 --> 00:01:04,799
notably security testing which is what

00:01:03,760 --> 00:01:06,000
we're going to be talking about quite a

00:01:04,799 --> 00:01:07,680
bit

00:01:06,000 --> 00:01:09,760
and when i say security testing we're

00:01:07,680 --> 00:01:10,960
thinking about like penetration testing

00:01:09,760 --> 00:01:12,640
we're looking for

00:01:10,960 --> 00:01:14,080
you know authorized users that are

00:01:12,640 --> 00:01:16,320
looking to emulate

00:01:14,080 --> 00:01:18,479
malicious users to try to identify

00:01:16,320 --> 00:01:20,320
security flaws and vulnerabilities and

00:01:18,479 --> 00:01:22,960
prove that they can be

00:01:20,320 --> 00:01:23,759
leveraged in order to achieve something

00:01:22,960 --> 00:01:26,960
potentially

00:01:23,759 --> 00:01:28,479
dangerous or malicious so that might be

00:01:26,960 --> 00:01:30,240
you know crashing a system

00:01:28,479 --> 00:01:32,079
most often times stealing data and

00:01:30,240 --> 00:01:33,920
things along those lines so they do that

00:01:32,079 --> 00:01:35,680
by leveraging the exploit content

00:01:33,920 --> 00:01:37,600
and uh that's all part of the the open

00:01:35,680 --> 00:01:39,759
source project that we provide

00:01:37,600 --> 00:01:40,880
and so this is a slide with a whole

00:01:39,759 --> 00:01:42,799
bunch of the users

00:01:40,880 --> 00:01:43,920
just some of the many many users that

00:01:42,799 --> 00:01:44,640
have contributed to the messenger

00:01:43,920 --> 00:01:46,640
framework

00:01:44,640 --> 00:01:48,079
uh since its time on github which has

00:01:46,640 --> 00:01:49,439
been on github for quite a few years now

00:01:48,079 --> 00:01:51,119
and is now the uh the core of our

00:01:49,439 --> 00:01:52,640
workflow where we accept contributions

00:01:51,119 --> 00:01:55,759
through uh pull requests

00:01:52,640 --> 00:01:56,640
like many other projects out there uh so

00:01:55,759 --> 00:01:58,399
like i mentioned we're gonna talk a

00:01:56,640 --> 00:02:00,719
little bit about what metasploit is

00:01:58,399 --> 00:02:01,920
uh today i've already talked about how

00:02:00,719 --> 00:02:05,200
it's you know

00:02:01,920 --> 00:02:05,680
intended to help users emulate malicious

00:02:05,200 --> 00:02:07,759
users

00:02:05,680 --> 00:02:09,200
to to play the part of of the bad guy

00:02:07,759 --> 00:02:11,200
and kind of show

00:02:09,200 --> 00:02:13,120
the possibility of like what what could

00:02:11,200 --> 00:02:14,080
happen and the intention of like why we

00:02:13,120 --> 00:02:15,680
would want to do this

00:02:14,080 --> 00:02:17,760
is or in order to be able to go ahead

00:02:15,680 --> 00:02:18,959
and help people identify flaws so they

00:02:17,760 --> 00:02:21,360
can fix them before

00:02:18,959 --> 00:02:22,319
actual malicious users get around to

00:02:21,360 --> 00:02:23,840
doing it

00:02:22,319 --> 00:02:25,120
and so that whole workflow is going to

00:02:23,840 --> 00:02:26,160
be part of the penetration testing

00:02:25,120 --> 00:02:28,160
workflow which we're going to talk a

00:02:26,160 --> 00:02:30,080
little bit about the overview of what

00:02:28,160 --> 00:02:31,680
that workflow sort of looks like

00:02:30,080 --> 00:02:33,280
so that way we can better understand how

00:02:31,680 --> 00:02:35,360
metasploit fits in and

00:02:33,280 --> 00:02:36,560
the various steps as part of that

00:02:35,360 --> 00:02:39,760
workflow that mentally

00:02:36,560 --> 00:02:40,720
really helps out and to uh facilitate

00:02:39,760 --> 00:02:42,879
and then we're gonna talk about uh

00:02:40,720 --> 00:02:44,480
contributing to medical aid my favorite

00:02:42,879 --> 00:02:45,920
type of content which is going to be of

00:02:44,480 --> 00:02:49,840
course the the exploit

00:02:45,920 --> 00:02:52,239
content uh so with that um let's play is

00:02:49,840 --> 00:02:53,680
a is a collection of operational

00:02:52,239 --> 00:02:55,760
capabilities in terms

00:02:53,680 --> 00:02:56,720
of you know exploit modules that are

00:02:55,760 --> 00:02:58,800
going to leverage

00:02:56,720 --> 00:03:00,640
a vulnerability to achieve some kind of

00:02:58,800 --> 00:03:02,879
an effect that is most often times

00:03:00,640 --> 00:03:04,400
not going to be the intended effect it's

00:03:02,879 --> 00:03:06,480
going to be explicit vulnerability to

00:03:04,400 --> 00:03:08,480
achieve say code execution

00:03:06,480 --> 00:03:10,959
uh information disclosure privilege

00:03:08,480 --> 00:03:12,879
escalation something along those lines

00:03:10,959 --> 00:03:14,159
so who might want to use this well

00:03:12,879 --> 00:03:16,879
metasploit is a sort of

00:03:14,159 --> 00:03:18,720
toolbox that provides libraries for

00:03:16,879 --> 00:03:20,400
exploitation tasks

00:03:18,720 --> 00:03:21,440
if you're watching this talk you're

00:03:20,400 --> 00:03:23,280
probably a developer and you're probably

00:03:21,440 --> 00:03:24,159
very familiar with uh with the concept

00:03:23,280 --> 00:03:26,640
of libraries

00:03:24,159 --> 00:03:27,360
well writing exploits uh presents some

00:03:26,640 --> 00:03:29,200
interesting

00:03:27,360 --> 00:03:30,879
problems and like many other coding

00:03:29,200 --> 00:03:32,640
problems it makes a lot of sense to have

00:03:30,879 --> 00:03:34,080
reusable code in the form of libraries

00:03:32,640 --> 00:03:34,640
or to be able to go ahead and facilitate

00:03:34,080 --> 00:03:35,440
that

00:03:34,640 --> 00:03:37,200
and that's one of the things that

00:03:35,440 --> 00:03:38,959
metasploit provides is a sort of

00:03:37,200 --> 00:03:40,720
baseline functionality with a lot of the

00:03:38,959 --> 00:03:42,159
libraries so that exploit developers and

00:03:40,720 --> 00:03:43,760
vulnerability researchers

00:03:42,159 --> 00:03:45,360
can get off the ground running very

00:03:43,760 --> 00:03:46,959
quickly and sort of prove

00:03:45,360 --> 00:03:48,959
uh the exploitability of the

00:03:46,959 --> 00:03:50,400
vulnerability that they're looking at

00:03:48,959 --> 00:03:52,080
and that kind of leads right into the

00:03:50,400 --> 00:03:53,280
the second set of

00:03:52,080 --> 00:03:54,799
common users which are going to be like

00:03:53,280 --> 00:03:55,760
the penetration testers the people that

00:03:54,799 --> 00:03:57,519
are looking for

00:03:55,760 --> 00:03:58,879
these vulnerabilities that have content

00:03:57,519 --> 00:03:59,519
in metasploits that way they can go

00:03:58,879 --> 00:04:02,159
ahead and

00:03:59,519 --> 00:04:03,439
identify and prove that they exist and

00:04:02,159 --> 00:04:05,040
we say prove that they exist we're

00:04:03,439 --> 00:04:06,879
trying to ensure that

00:04:05,040 --> 00:04:08,159
there are no false positives because if

00:04:06,879 --> 00:04:08,799
you're familiar with security you've

00:04:08,159 --> 00:04:10,319
probably run

00:04:08,799 --> 00:04:12,560
vulnerability scans you can know that

00:04:10,319 --> 00:04:14,480
false positives uh can be an issue they

00:04:12,560 --> 00:04:16,320
can be a problem that you know lead to

00:04:14,480 --> 00:04:17,600
wasting time you're not entirely sure if

00:04:16,320 --> 00:04:18,560
the vulnerability exists or something

00:04:17,600 --> 00:04:19,840
along those lines

00:04:18,560 --> 00:04:21,359
that's kind of where multiplayer can

00:04:19,840 --> 00:04:23,120
really help out where when it has an

00:04:21,359 --> 00:04:24,880
exploit module

00:04:23,120 --> 00:04:26,400
the exploit module can be leveraged to

00:04:24,880 --> 00:04:28,000
deliver another kind of module which is

00:04:26,400 --> 00:04:29,759
going to be like a payload

00:04:28,000 --> 00:04:31,280
this is one of the nice parts of the

00:04:29,759 --> 00:04:32,800
frameworks that you can select

00:04:31,280 --> 00:04:34,400
this other type of module of the payload

00:04:32,800 --> 00:04:36,639
to be what you want to

00:04:34,400 --> 00:04:38,960
happen when the exploit occurs that way

00:04:36,639 --> 00:04:41,280
you can show definitively that

00:04:38,960 --> 00:04:43,040
no this this vulnerability that you know

00:04:41,280 --> 00:04:45,360
we may have thought was a false positive

00:04:43,040 --> 00:04:47,280
is a real thing it can be leveraged and

00:04:45,360 --> 00:04:48,960
we should prioritize fixing it

00:04:47,280 --> 00:04:50,560
accordingly based off of the findings of

00:04:48,960 --> 00:04:51,280
what we had you know we leaked critical

00:04:50,560 --> 00:04:52,960
information

00:04:51,280 --> 00:04:54,320
we should patch this today or there

00:04:52,960 --> 00:04:55,040
wasn't really anything so maybe we can

00:04:54,320 --> 00:04:57,440
push it until

00:04:55,040 --> 00:04:58,160
next month something along those lines

00:04:57,440 --> 00:05:00,160
and so

00:04:58,160 --> 00:05:02,000
i've already mentioned a couple of the

00:05:00,160 --> 00:05:03,440
module types uh that are going through

00:05:02,000 --> 00:05:05,199
through metallic which is like the very

00:05:03,440 --> 00:05:06,000
the the core of the framework is built

00:05:05,199 --> 00:05:08,000
out in these

00:05:06,000 --> 00:05:10,080
content blocks that are the modules so

00:05:08,000 --> 00:05:11,840
we have the explain modules

00:05:10,080 --> 00:05:13,520
everyone's favorite modules is the one

00:05:11,840 --> 00:05:15,120
that we have the most of

00:05:13,520 --> 00:05:16,960
and the exploit modules are used to go

00:05:15,120 --> 00:05:17,280
ahead and deliver payload modules which

00:05:16,960 --> 00:05:19,520
is

00:05:17,280 --> 00:05:20,639
like i had mentioned the type of content

00:05:19,520 --> 00:05:24,560
of like what

00:05:20,639 --> 00:05:26,320
occurs if an exploit is able to

00:05:24,560 --> 00:05:27,840
leverage a vulnerability to do something

00:05:26,320 --> 00:05:28,240
malicious that's something malicious is

00:05:27,840 --> 00:05:31,039
the

00:05:28,240 --> 00:05:32,000
the payload module and so when working

00:05:31,039 --> 00:05:33,919
through those those are

00:05:32,000 --> 00:05:35,680
two of our modules we also have encoder

00:05:33,919 --> 00:05:36,880
modules which handle things like bad

00:05:35,680 --> 00:05:38,720
characters in the payload which is a

00:05:36,880 --> 00:05:40,479
very common problem if you're an exploit

00:05:38,720 --> 00:05:41,840
developer you have applications that you

00:05:40,479 --> 00:05:43,520
know if it's a stack based buffer

00:05:41,840 --> 00:05:44,639
overflow maybe you have like bad null

00:05:43,520 --> 00:05:47,440
characters because that's the

00:05:44,639 --> 00:05:49,199
terminator uh for a string so you need

00:05:47,440 --> 00:05:50,880
to encode your payload in order to get

00:05:49,199 --> 00:05:51,520
around this we have encoder modules for

00:05:50,880 --> 00:05:53,919
that

00:05:51,520 --> 00:05:55,919
we also have post modules that can

00:05:53,919 --> 00:05:59,039
interact with established

00:05:55,919 --> 00:06:01,840
sessions from payload modules that can

00:05:59,039 --> 00:06:02,880
do interesting things after an exploit

00:06:01,840 --> 00:06:04,639
has taken place

00:06:02,880 --> 00:06:06,639
so once we have compromised the system

00:06:04,639 --> 00:06:08,000
we want to be able to show the potential

00:06:06,639 --> 00:06:09,360
impact of it that's where the post

00:06:08,000 --> 00:06:09,919
modules would come in and kind of help

00:06:09,360 --> 00:06:12,000
us

00:06:09,919 --> 00:06:13,919
uh take a look at you know what what

00:06:12,000 --> 00:06:15,680
could be done

00:06:13,919 --> 00:06:17,039
and uh in order to go ahead and help out

00:06:15,680 --> 00:06:19,520
with this whole process we have a couple

00:06:17,039 --> 00:06:21,039
of evasion modules trying to

00:06:19,520 --> 00:06:22,560
be sneaky and test detection

00:06:21,039 --> 00:06:24,800
capabilities and then

00:06:22,560 --> 00:06:26,240
the finally the last and second most

00:06:24,800 --> 00:06:27,919
popular type of module

00:06:26,240 --> 00:06:29,440
is the auxiliary module and this kind of

00:06:27,919 --> 00:06:29,919
catches everything that doesn't fall

00:06:29,440 --> 00:06:31,919
into

00:06:29,919 --> 00:06:33,039
one of those other categories and is

00:06:31,919 --> 00:06:35,840
very important for like

00:06:33,039 --> 00:06:36,720
reconnaissance scanning enumeration

00:06:35,840 --> 00:06:39,680
which is kind of how

00:06:36,720 --> 00:06:40,319
metasploit helps put everything together

00:06:39,680 --> 00:06:41,919
so

00:06:40,319 --> 00:06:43,919
in terms of like the workflow you might

00:06:41,919 --> 00:06:45,360
start out with like using an auxiliary

00:06:43,919 --> 00:06:46,560
module to go ahead and look for a

00:06:45,360 --> 00:06:48,720
vulnerability that we know

00:06:46,560 --> 00:06:49,680
is high profile uh metabolite has an

00:06:48,720 --> 00:06:50,880
exploit module for

00:06:49,680 --> 00:06:53,120
something along those lines so we'll

00:06:50,880 --> 00:06:56,560
fire up an auxiliary module and check

00:06:53,120 --> 00:06:58,080
a class c of hosts like 250

00:06:56,560 --> 00:06:59,520
for host and check to see you know does

00:06:58,080 --> 00:07:00,479
this vulnerability exist does the

00:06:59,520 --> 00:07:02,479
service

00:07:00,479 --> 00:07:04,240
uh present and then from there we'll

00:07:02,479 --> 00:07:05,919
identify that it is and we'll move on to

00:07:04,240 --> 00:07:07,440
an exploit module choose a payload that

00:07:05,919 --> 00:07:09,440
we'd like to be delivered and go ahead

00:07:07,440 --> 00:07:11,199
and exploit the service

00:07:09,440 --> 00:07:13,440
upon successful exploitation we'll have

00:07:11,199 --> 00:07:15,120
a session and then that's when the post

00:07:13,440 --> 00:07:17,360
modules come in the post modules can use

00:07:15,120 --> 00:07:18,960
that session to for example

00:07:17,360 --> 00:07:21,280
enumerate out sensitive information that

00:07:18,960 --> 00:07:23,520
might be stored in the browser

00:07:21,280 --> 00:07:25,120
leak clear correct text credentials out

00:07:23,520 --> 00:07:26,639
of memory something along those lines

00:07:25,120 --> 00:07:28,720
can be looking for that

00:07:26,639 --> 00:07:30,720
sensitive information so that way the

00:07:28,720 --> 00:07:32,479
tester whoever is operating medically

00:07:30,720 --> 00:07:34,000
can go back to the owner of the system

00:07:32,479 --> 00:07:35,680
and show the stakeholders

00:07:34,000 --> 00:07:37,520
look we were able to find you know this

00:07:35,680 --> 00:07:38,479
information using this vulnerability so

00:07:37,520 --> 00:07:40,800
this one should

00:07:38,479 --> 00:07:42,160
be addressed with a much greater sense

00:07:40,800 --> 00:07:43,759
of urgency than say

00:07:42,160 --> 00:07:45,599
some others that we perhaps you know

00:07:43,759 --> 00:07:47,199
weren't able to exploit maybe it's false

00:07:45,599 --> 00:07:48,960
positive something along those lines so

00:07:47,199 --> 00:07:50,720
we were able to help the users

00:07:48,960 --> 00:07:52,000
triage and prioritize those

00:07:50,720 --> 00:07:53,840
vulnerabilities because we all know

00:07:52,000 --> 00:07:55,039
our time is not infinite you know we

00:07:53,840 --> 00:07:56,479
have a certain

00:07:55,039 --> 00:07:58,080
amount of time so we want to be able to

00:07:56,479 --> 00:07:59,680
use it most effectively

00:07:58,080 --> 00:08:01,280
and that's what can help us get that

00:07:59,680 --> 00:08:03,039
that knowledge in order to go ahead and

00:08:01,280 --> 00:08:04,639
do that

00:08:03,039 --> 00:08:06,000
so breaking down the workflow a little

00:08:04,639 --> 00:08:07,919
bit more i've already kind of mentioned

00:08:06,000 --> 00:08:09,120
uh starting out with like reconnaissance

00:08:07,919 --> 00:08:11,520
and scanning these are where the

00:08:09,120 --> 00:08:12,000
auxiliary modules are are heavy hitters

00:08:11,520 --> 00:08:13,280
out of the

00:08:12,000 --> 00:08:15,120
metaphor you know we're looking for

00:08:13,280 --> 00:08:16,479
targets we're identifying services that

00:08:15,120 --> 00:08:18,960
we might be interested in

00:08:16,479 --> 00:08:20,720
say smb rdp and of course our favorite

00:08:18,960 --> 00:08:21,199
http we want to be able to identify you

00:08:20,720 --> 00:08:23,360
know

00:08:21,199 --> 00:08:25,199
as the server engine x or their popular

00:08:23,360 --> 00:08:27,039
web applications on it like say maybe

00:08:25,199 --> 00:08:28,879
wordpress something along those lines

00:08:27,039 --> 00:08:30,479
we want to be able to identify our

00:08:28,879 --> 00:08:30,879
targets this is very often if you don't

00:08:30,479 --> 00:08:32,399
know

00:08:30,879 --> 00:08:33,919
or you're not looking for like a very

00:08:32,399 --> 00:08:34,399
specific target if you're looking at

00:08:33,919 --> 00:08:36,240
like

00:08:34,399 --> 00:08:37,440
for example a whole network worth of

00:08:36,240 --> 00:08:38,320
host you'll be spending a lot of time in

00:08:37,440 --> 00:08:40,800
the scan and the

00:08:38,320 --> 00:08:42,800
uh recon phases from there once you have

00:08:40,800 --> 00:08:44,320
your targets moving on into the attack

00:08:42,800 --> 00:08:45,279
phase where you load up an exploitation

00:08:44,320 --> 00:08:47,120
module and try to

00:08:45,279 --> 00:08:48,160
go ahead and leverage the service and

00:08:47,120 --> 00:08:50,240
then hopefully you're successful and

00:08:48,160 --> 00:08:51,920
you've compromised that system

00:08:50,240 --> 00:08:53,760
now this is how it's often taught in a

00:08:51,920 --> 00:08:54,000
very linear fashion but i can tell you

00:08:53,760 --> 00:08:56,480
from

00:08:54,000 --> 00:08:58,080
experience i it doesn't quite work out

00:08:56,480 --> 00:08:59,440
like this in the real world a lot of

00:08:58,080 --> 00:09:01,040
times you bounce around

00:08:59,440 --> 00:09:02,880
between the different steps you know you

00:09:01,040 --> 00:09:04,480
might go from reconnaissance and for

00:09:02,880 --> 00:09:05,120
whatever reason you identify as service

00:09:04,480 --> 00:09:06,560
that you're

00:09:05,120 --> 00:09:08,640
very confident is vulnerable and you

00:09:06,560 --> 00:09:10,560
move on into the attack phase

00:09:08,640 --> 00:09:11,680
and you know perhaps the attack doesn't

00:09:10,560 --> 00:09:12,959
work so you move back into the

00:09:11,680 --> 00:09:13,360
reconnaissance phase and you're looking

00:09:12,959 --> 00:09:16,560
for

00:09:13,360 --> 00:09:18,640
another system and so on and so forth so

00:09:16,560 --> 00:09:19,760
it doesn't quite work out this linearly

00:09:18,640 --> 00:09:21,519
or this cleanly in

00:09:19,760 --> 00:09:22,880
in the real world but it's all good

00:09:21,519 --> 00:09:25,600
because metabolic kind of

00:09:22,880 --> 00:09:27,760
helps to facilitate all that and so the

00:09:25,600 --> 00:09:29,200
sort of glue that metasploit provides to

00:09:27,760 --> 00:09:31,200
combine all of these things i've already

00:09:29,200 --> 00:09:33,120
mentioned there's a lot of those modules

00:09:31,200 --> 00:09:34,959
metabolite helps take those modules that

00:09:33,120 --> 00:09:37,120
would otherwise be isolated

00:09:34,959 --> 00:09:38,640
tools that users might perhaps run and

00:09:37,120 --> 00:09:40,800
turn them into a sort of

00:09:38,640 --> 00:09:42,240
workflow so in terms of the scanning and

00:09:40,800 --> 00:09:44,399
the reconnaissance phase i've already

00:09:42,240 --> 00:09:45,839
mentioned when we utilize our auxiliary

00:09:44,399 --> 00:09:46,560
modules to go ahead and look for a

00:09:45,839 --> 00:09:48,320
service

00:09:46,560 --> 00:09:49,600
the metabolic database in the background

00:09:48,320 --> 00:09:51,040
is going to be gathering information

00:09:49,600 --> 00:09:52,240
that's reported by these modules

00:09:51,040 --> 00:09:54,880
including what systems

00:09:52,240 --> 00:09:56,240
are online what services are identified

00:09:54,880 --> 00:09:57,440
and then key pieces of information that

00:09:56,240 --> 00:09:58,880
are important from an exploitation

00:09:57,440 --> 00:10:00,240
perspective such as

00:09:58,880 --> 00:10:02,560
what vulnerabilities might have been

00:10:00,240 --> 00:10:04,000
identified what versions of software are

00:10:02,560 --> 00:10:05,440
affected so if you find an old version

00:10:04,000 --> 00:10:07,200
of wordpress this can be noted in the

00:10:05,440 --> 00:10:08,480
database and we can sort of feed that

00:10:07,200 --> 00:10:10,399
module or excuse me

00:10:08,480 --> 00:10:12,079
that information into the next step of

00:10:10,399 --> 00:10:12,640
our workflow where we might be looking

00:10:12,079 --> 00:10:14,320
for

00:10:12,640 --> 00:10:15,839
attacks that can leverage that old

00:10:14,320 --> 00:10:16,560
version of wordpress or something along

00:10:15,839 --> 00:10:18,240
those lines

00:10:16,560 --> 00:10:19,600
so the database is sort of the core of

00:10:18,240 --> 00:10:22,800
the glue that ties

00:10:19,600 --> 00:10:23,760
this workflow together and so with that

00:10:22,800 --> 00:10:28,320
i'd like to show

00:10:23,760 --> 00:10:30,079
a quick demo of how this might look

00:10:28,320 --> 00:10:31,920
in this particular example we're going

00:10:30,079 --> 00:10:32,399
to go ahead and we're going to show

00:10:31,920 --> 00:10:34,720
using

00:10:32,399 --> 00:10:35,760
an auxiliary module to go ahead and

00:10:34,720 --> 00:10:38,000
identify

00:10:35,760 --> 00:10:40,399
systems that are vulnerable to a

00:10:38,000 --> 00:10:42,160
high-profile vulnerability ms-1710 that

00:10:40,399 --> 00:10:43,600
came out quite a while ago

00:10:42,160 --> 00:10:45,839
we'd be surprised we do still find

00:10:43,600 --> 00:10:47,120
systems with this vulnerability present

00:10:45,839 --> 00:10:49,920
occasionally

00:10:47,120 --> 00:10:51,440
but it's very easy to exploit so as a a

00:10:49,920 --> 00:10:52,399
tester if i'm looking at a network i

00:10:51,440 --> 00:10:54,240
would definitely want to

00:10:52,399 --> 00:10:55,600
identify this vulnerability might be one

00:10:54,240 --> 00:10:56,800
of the very early steps that i'm using

00:10:55,600 --> 00:10:58,000
while i'm doing my scanning and my

00:10:56,800 --> 00:10:59,200
reconnaissance

00:10:58,000 --> 00:11:01,360
so i'm going to use metasploit to go

00:10:59,200 --> 00:11:03,120
ahead and run this module and it's going

00:11:01,360 --> 00:11:04,880
to go ahead and it's going to identify

00:11:03,120 --> 00:11:06,560
a system that's vulnerable it's going to

00:11:04,880 --> 00:11:07,920
store that information for me

00:11:06,560 --> 00:11:09,839
in the database so it's kind of like

00:11:07,920 --> 00:11:11,839
keeping those notes for me

00:11:09,839 --> 00:11:13,200
automatically of course as a pentester

00:11:11,839 --> 00:11:14,880
i'm probably going to be keeping a

00:11:13,200 --> 00:11:16,800
notebook and keeping this separately

00:11:14,880 --> 00:11:18,240
but if we ever forget we lose that we

00:11:16,800 --> 00:11:19,760
have this information the database which

00:11:18,240 --> 00:11:21,600
is what we're looking at here we're

00:11:19,760 --> 00:11:23,279
seeing the systems that were identified

00:11:21,600 --> 00:11:25,040
and the services and the vulnerabilities

00:11:23,279 --> 00:11:26,399
that were noted so right now it's a very

00:11:25,040 --> 00:11:28,079
small example if you're

00:11:26,399 --> 00:11:29,519
looking at say like a thousand two

00:11:28,079 --> 00:11:31,040
thousand five thousand systems

00:11:29,519 --> 00:11:32,640
this would become very very important

00:11:31,040 --> 00:11:34,079
very valuable as it's filling all this

00:11:32,640 --> 00:11:35,279
information out for us

00:11:34,079 --> 00:11:36,959
and what we're doing is we're gonna go

00:11:35,279 --> 00:11:38,399
ahead and take this knowledge that we

00:11:36,959 --> 00:11:40,079
had and we're going to move

00:11:38,399 --> 00:11:41,600
into the next phase where we're actually

00:11:40,079 --> 00:11:42,560
gonna go ahead and exploit this

00:11:41,600 --> 00:11:44,320
vulnerability

00:11:42,560 --> 00:11:46,079
so we load up the explain module and we

00:11:44,320 --> 00:11:47,040
set the information that we had just

00:11:46,079 --> 00:11:48,560
gathered

00:11:47,040 --> 00:11:49,760
let me go ahead and run the check method

00:11:48,560 --> 00:11:50,720
to make sure that the vulnerability is

00:11:49,760 --> 00:11:52,399
going to work

00:11:50,720 --> 00:11:54,240
before selecting the payload and then

00:11:52,399 --> 00:11:55,680
ultimately exploiting the vulnerability

00:11:54,240 --> 00:11:57,279
which you're looking to see here

00:11:55,680 --> 00:11:58,800
as it's holding on for just a couple of

00:11:57,279 --> 00:12:00,320
seconds this expo usually takes just a

00:11:58,800 --> 00:12:02,160
few seconds to run

00:12:00,320 --> 00:12:03,839
uh before it is successful and you can

00:12:02,160 --> 00:12:06,399
see that the the prompt

00:12:03,839 --> 00:12:07,680
changed um into the interpreter prompt

00:12:06,399 --> 00:12:09,200
so we're in kind of a different

00:12:07,680 --> 00:12:11,040
workspace at this point

00:12:09,200 --> 00:12:12,800
where we're interacting with an agent

00:12:11,040 --> 00:12:13,920
that was provided by the payload that we

00:12:12,800 --> 00:12:15,920
selected

00:12:13,920 --> 00:12:17,120
that we utilized to compromise this

00:12:15,920 --> 00:12:18,639
system and of course in

00:12:17,120 --> 00:12:20,480
in this particular example leveraging

00:12:18,639 --> 00:12:21,040
this vulnerability we were able to

00:12:20,480 --> 00:12:23,440
obtain

00:12:21,040 --> 00:12:25,440
full administrative access on the system

00:12:23,440 --> 00:12:26,000
have fully compromised it so we move on

00:12:25,440 --> 00:12:28,399
to

00:12:26,000 --> 00:12:29,680
say the explanatory the exfiltration

00:12:28,399 --> 00:12:31,360
phase where we'd be looking around at

00:12:29,680 --> 00:12:33,600
the file system on the system

00:12:31,360 --> 00:12:35,680
trying to identify anything interesting

00:12:33,600 --> 00:12:37,920
that we might want to take out to

00:12:35,680 --> 00:12:39,040
use as proof of what an attacker could

00:12:37,920 --> 00:12:40,959
do

00:12:39,040 --> 00:12:42,160
and uh if they had leveraged this

00:12:40,959 --> 00:12:45,760
vulnerability

00:12:42,160 --> 00:12:48,560
um so that's sort of uh the

00:12:45,760 --> 00:12:49,040
uh demonstration there um so then with

00:12:48,560 --> 00:12:51,760
those

00:12:49,040 --> 00:12:52,480
steps afterwards we might wanted to have

00:12:51,760 --> 00:12:56,000
looked at

00:12:52,480 --> 00:12:57,680
say uh the lateral movement and and post

00:12:56,000 --> 00:13:00,000
exploitation so we kind of saw

00:12:57,680 --> 00:13:01,440
when utilizing interpreter we moved

00:13:00,000 --> 00:13:03,519
right on into the

00:13:01,440 --> 00:13:05,040
file system but we could also automate

00:13:03,519 --> 00:13:06,720
that with a lot of the post modules i

00:13:05,040 --> 00:13:08,800
can go ahead and look for that

00:13:06,720 --> 00:13:10,160
finally once we had wrapped up and done

00:13:08,800 --> 00:13:10,720
what we needed to do we would go ahead

00:13:10,160 --> 00:13:12,880
and

00:13:10,720 --> 00:13:14,800
clean up after ourselves and take part

00:13:12,880 --> 00:13:15,760
in what's the most important part of the

00:13:14,800 --> 00:13:17,519
assessment and that's

00:13:15,760 --> 00:13:18,880
the reporting and that's again where the

00:13:17,519 --> 00:13:20,480
database that stored all that

00:13:18,880 --> 00:13:21,920
information is really going to help us

00:13:20,480 --> 00:13:23,200
out as an assessor so that way we can

00:13:21,920 --> 00:13:26,160
get the important facts

00:13:23,200 --> 00:13:27,839
and relay that to the the hosts that are

00:13:26,160 --> 00:13:29,120
responsible for the systems that we were

00:13:27,839 --> 00:13:31,200
testing so that way they can

00:13:29,120 --> 00:13:32,800
address the findings that were there

00:13:31,200 --> 00:13:34,639
it's a quick note on cleanup a lot of

00:13:32,800 --> 00:13:35,440
the stuff that metaplay does is memory

00:13:34,639 --> 00:13:38,000
resonance so

00:13:35,440 --> 00:13:39,680
rebooting is going to fix it we don't

00:13:38,000 --> 00:13:41,279
write too much out to disk unless of

00:13:39,680 --> 00:13:42,959
course you know the user specifies a

00:13:41,279 --> 00:13:43,360
module to do that so we try to keep

00:13:42,959 --> 00:13:46,480
things

00:13:43,360 --> 00:13:48,639
in memory as much as we possibly can

00:13:46,480 --> 00:13:49,680
so with that we've talked about the the

00:13:48,639 --> 00:13:51,040
content in medical

00:13:49,680 --> 00:13:52,800
which are going to be those modules and

00:13:51,040 --> 00:13:53,199
so those are the contributions that we

00:13:52,800 --> 00:13:55,680
get

00:13:53,199 --> 00:13:57,760
quite frequently one of the most popular

00:13:55,680 --> 00:14:00,160
contribution types that we get

00:13:57,760 --> 00:14:00,800
is documentation uh the vulnerability

00:14:00,160 --> 00:14:02,560
that we looked at

00:14:00,800 --> 00:14:04,079
is a very very high profile

00:14:02,560 --> 00:14:05,600
vulnerability it's very common but we

00:14:04,079 --> 00:14:07,600
have a lot of ones that are quite a bit

00:14:05,600 --> 00:14:09,360
lesser known and so there's been a big

00:14:07,600 --> 00:14:11,839
push over the past couple of years

00:14:09,360 --> 00:14:13,120
to document a lot more of the content in

00:14:11,839 --> 00:14:15,440
metasploit the form of

00:14:13,120 --> 00:14:16,880
module specific documentation to help

00:14:15,440 --> 00:14:19,040
the user understand you know what the

00:14:16,880 --> 00:14:20,560
vulnerability is what the module does

00:14:19,040 --> 00:14:23,360
how it can be leveraged and those types

00:14:20,560 --> 00:14:24,880
of things so it's a very common

00:14:23,360 --> 00:14:26,320
uh common contribution that we get

00:14:24,880 --> 00:14:28,639
that's very very valuable it helps

00:14:26,320 --> 00:14:30,480
people understand and digest the content

00:14:28,639 --> 00:14:31,839
that metasploit providers can oftentimes

00:14:30,480 --> 00:14:34,720
be very dense and by the

00:14:31,839 --> 00:14:35,199
very nature of it very very technical

00:14:34,720 --> 00:14:36,880
the

00:14:35,199 --> 00:14:39,040
most common contribution type that we

00:14:36,880 --> 00:14:39,839
get though is new module content

00:14:39,040 --> 00:14:41,680
so we're going to talk a little bit

00:14:39,839 --> 00:14:43,440
about that from the perspective of

00:14:41,680 --> 00:14:44,240
exploit specifically which is our most

00:14:43,440 --> 00:14:46,639
popular

00:14:44,240 --> 00:14:47,760
module content type these often come

00:14:46,639 --> 00:14:50,399
from one of uh

00:14:47,760 --> 00:14:51,920
two resources either it's uh brand new

00:14:50,399 --> 00:14:53,680
research that the vulnerability research

00:14:51,920 --> 00:14:55,279
who identified the vulnerability

00:14:53,680 --> 00:14:57,839
might go directly into metasploit and

00:14:55,279 --> 00:14:59,279
create the module directly immediately

00:14:57,839 --> 00:14:59,839
leveraging the capabilities and the

00:14:59,279 --> 00:15:01,040
payloads

00:14:59,839 --> 00:15:02,720
the encoders and everything that are

00:15:01,040 --> 00:15:04,079
provided by metasploit so they'll make

00:15:02,720 --> 00:15:05,600
the module

00:15:04,079 --> 00:15:07,199
and they'll go ahead and release it as

00:15:05,600 --> 00:15:07,839
part of the vulnerability disclosure to

00:15:07,199 --> 00:15:09,680
show

00:15:07,839 --> 00:15:12,320
uh to demonstrate the vulnerability to

00:15:09,680 --> 00:15:14,480
prove that it exists that type of thing

00:15:12,320 --> 00:15:16,399
a second comment is uh we get a lot of

00:15:14,480 --> 00:15:18,160
ports of public exploits so for one

00:15:16,399 --> 00:15:19,680
reason or another a researcher may not

00:15:18,160 --> 00:15:20,720
write it from that display it may be a

00:15:19,680 --> 00:15:22,000
little bit difficult to write for

00:15:20,720 --> 00:15:24,480
multiple way for

00:15:22,000 --> 00:15:26,399
uh whatever reason uh perhaps they're

00:15:24,480 --> 00:15:28,240
not as familiar with the framework um

00:15:26,399 --> 00:15:29,519
but you know we there's a lot of public

00:15:28,240 --> 00:15:30,639
exploits out there they're not all for

00:15:29,519 --> 00:15:32,800
medical and so we'll

00:15:30,639 --> 00:15:34,079
we have a pretty large community of

00:15:32,800 --> 00:15:35,920
folks that will identify

00:15:34,079 --> 00:15:37,360
public exploits and import them over

00:15:35,920 --> 00:15:38,320
into metabolic which is very nice

00:15:37,360 --> 00:15:40,880
because then we have

00:15:38,320 --> 00:15:41,440
our exploit content in a standardized uh

00:15:40,880 --> 00:15:43,040
format

00:15:41,440 --> 00:15:44,880
and a framework so that once you have

00:15:43,040 --> 00:15:46,480
the framework installed you can go ahead

00:15:44,880 --> 00:15:49,920
and uh from a security practitioner's

00:15:46,480 --> 00:15:51,759
perspective utilize this content

00:15:49,920 --> 00:15:53,360
so what are some of the benefits of

00:15:51,759 --> 00:15:54,639
using a module for medical you've kind

00:15:53,360 --> 00:15:55,839
of talked about you know people either

00:15:54,639 --> 00:15:58,720
directly ready for medical

00:15:55,839 --> 00:16:00,639
or or they don't of course i'm biased as

00:15:58,720 --> 00:16:02,000
one of the uh top contributors i'm a

00:16:00,639 --> 00:16:02,959
huge motherboard fan i bet you wouldn't

00:16:02,000 --> 00:16:04,240
have guessed that

00:16:02,959 --> 00:16:06,560
uh but there's a lot of benefits to

00:16:04,240 --> 00:16:07,600
writing content uh for metasploit

00:16:06,560 --> 00:16:09,120
one of the great things is that when

00:16:07,600 --> 00:16:09,920
you're writing an exploit a lot of times

00:16:09,120 --> 00:16:11,839
you don't really need

00:16:09,920 --> 00:16:13,360
to worry about the payload it's not

00:16:11,839 --> 00:16:15,279
necessarily relevant to

00:16:13,360 --> 00:16:16,720
the module or the vulnerability that

00:16:15,279 --> 00:16:18,399
you're trying to leverage

00:16:16,720 --> 00:16:20,240
so multiplayer provides that for you and

00:16:18,399 --> 00:16:22,160
you don't have to worry about it

00:16:20,240 --> 00:16:23,920
another capability is that database that

00:16:22,160 --> 00:16:25,600
i've been talking about um is all of the

00:16:23,920 --> 00:16:26,639
reporting capabilities if you write a

00:16:25,600 --> 00:16:28,320
one-off tool

00:16:26,639 --> 00:16:30,320
you you're probably ending up you know

00:16:28,320 --> 00:16:31,920
printing output to the console and

00:16:30,320 --> 00:16:33,199
expecting the user to go ahead and like

00:16:31,920 --> 00:16:34,720
take their notes manually which isn't

00:16:33,199 --> 00:16:36,560
the best user experience

00:16:34,720 --> 00:16:38,320
but if you're doing it medically you can

00:16:36,560 --> 00:16:40,079
blog you know version information

00:16:38,320 --> 00:16:40,480
service information credentials that you

00:16:40,079 --> 00:16:43,199
have

00:16:40,480 --> 00:16:44,880
gathered and things like that finally is

00:16:43,199 --> 00:16:46,320
a transparent proxy support so when you

00:16:44,880 --> 00:16:48,480
compromise a host you can actually

00:16:46,320 --> 00:16:50,880
leverage that and have

00:16:48,480 --> 00:16:51,839
vulnerabilities be leverageable through

00:16:50,880 --> 00:16:53,279
that in terms of

00:16:51,839 --> 00:16:55,279
being able to pivot which is a very

00:16:53,279 --> 00:16:56,560
powerful capability for users that are

00:16:55,279 --> 00:16:58,800
looking to expand

00:16:56,560 --> 00:17:00,320
into networks they're able to compromise

00:16:58,800 --> 00:17:01,120
the system and leverage that to then

00:17:00,320 --> 00:17:04,400
attack

00:17:01,120 --> 00:17:05,839
other ones so if you you know

00:17:04,400 --> 00:17:07,679
see a lot of value in those and you want

00:17:05,839 --> 00:17:08,559
to contribute a multiplayer exploit

00:17:07,679 --> 00:17:09,760
module

00:17:08,559 --> 00:17:11,439
the exploit modules themselves are

00:17:09,760 --> 00:17:12,799
broken down into kind of three main

00:17:11,439 --> 00:17:13,520
components which we'll go ahead and take

00:17:12,799 --> 00:17:15,120
a look at

00:17:13,520 --> 00:17:16,720
the first of which is going to be the

00:17:15,120 --> 00:17:19,120
metadata and the

00:17:16,720 --> 00:17:20,799
uh particular options that are provided

00:17:19,120 --> 00:17:21,839
to the users that way they can go ahead

00:17:20,799 --> 00:17:23,919
and

00:17:21,839 --> 00:17:25,600
check those out the next is the check

00:17:23,919 --> 00:17:27,439
method not all exploits

00:17:25,600 --> 00:17:28,799
have this capability but we try to

00:17:27,439 --> 00:17:29,760
provide check methods for all the

00:17:28,799 --> 00:17:31,919
exploits uh

00:17:29,760 --> 00:17:33,440
that we can it's very specific to the

00:17:31,919 --> 00:17:34,559
vulnerability but the idea is to provide

00:17:33,440 --> 00:17:36,559
a safe way

00:17:34,559 --> 00:17:37,919
to be able to see if we think an exploit

00:17:36,559 --> 00:17:39,280
is going to work without actually

00:17:37,919 --> 00:17:41,200
exploiting the system which can

00:17:39,280 --> 00:17:42,559
unfortunately be inherently dangerous

00:17:41,200 --> 00:17:43,919
sometimes you know there's a chance that

00:17:42,559 --> 00:17:44,559
you may crash the service and that may

00:17:43,919 --> 00:17:46,799
be

00:17:44,559 --> 00:17:48,240
maybe undesirable um of course we

00:17:46,799 --> 00:17:49,200
understand this we provide check methods

00:17:48,240 --> 00:17:51,440
that are intended to be

00:17:49,200 --> 00:17:53,440
very very safe and then of course the

00:17:51,440 --> 00:17:55,039
core of the logic is to go ahead and to

00:17:53,440 --> 00:17:55,360
the exploit method which actually going

00:17:55,039 --> 00:17:57,120
to

00:17:55,360 --> 00:17:59,200
leverage the vulnerability to go ahead

00:17:57,120 --> 00:18:00,080
and and do the thing and deliver a

00:17:59,200 --> 00:18:02,960
payload and

00:18:00,080 --> 00:18:04,720
demonstrate the vulnerability itself so

00:18:02,960 --> 00:18:06,160
this is a quick example of the the

00:18:04,720 --> 00:18:08,799
module metadata it's

00:18:06,160 --> 00:18:11,120
basically just definitions um there's

00:18:08,799 --> 00:18:13,120
there's no real logic in here we're

00:18:11,120 --> 00:18:15,039
showing you know references you know i

00:18:13,120 --> 00:18:16,480
was the author of this particular module

00:18:15,039 --> 00:18:17,120
we have our target definitions down

00:18:16,480 --> 00:18:19,280
there

00:18:17,120 --> 00:18:20,960
uh this also includes metadata that we

00:18:19,280 --> 00:18:22,799
can go ahead and uh relay to

00:18:20,960 --> 00:18:24,320
the user in terms of uh what might

00:18:22,799 --> 00:18:27,360
happen when this module

00:18:24,320 --> 00:18:28,000
runs you know if if it does go wrong and

00:18:27,360 --> 00:18:31,120
things you know

00:18:28,000 --> 00:18:32,720
fail um is the system going to restart

00:18:31,120 --> 00:18:34,320
like the like the underlying operating

00:18:32,720 --> 00:18:36,160
system is that going to restart is just

00:18:34,320 --> 00:18:38,240
going to be the surface that we start is

00:18:36,160 --> 00:18:38,559
it highly unlikely that the surface will

00:18:38,240 --> 00:18:40,720
be

00:18:38,559 --> 00:18:42,320
adversely affected all of these

00:18:40,720 --> 00:18:44,160
vulnerabilities are unique so we want to

00:18:42,320 --> 00:18:44,799
be able to relay this information to the

00:18:44,160 --> 00:18:47,360
user

00:18:44,799 --> 00:18:48,880
so that way they can make an educated uh

00:18:47,360 --> 00:18:49,919
decision based on the information that

00:18:48,880 --> 00:18:51,360
we've provided to them

00:18:49,919 --> 00:18:53,039
on whether or not it's an appropriate

00:18:51,360 --> 00:18:53,679
action to go ahead and exploit this

00:18:53,039 --> 00:18:55,440
module

00:18:53,679 --> 00:18:56,320
and go ahead and attempt this we just

00:18:55,440 --> 00:18:57,520
want to make sure that they have the

00:18:56,320 --> 00:18:59,440
tools

00:18:57,520 --> 00:19:00,960
available to them to make an informed

00:18:59,440 --> 00:19:03,360
decision about what's you know

00:19:00,960 --> 00:19:04,960
best for their environment and that

00:19:03,360 --> 00:19:05,280
leads right into our check method you

00:19:04,960 --> 00:19:07,200
know

00:19:05,280 --> 00:19:08,720
um if you don't want to take the risk of

00:19:07,200 --> 00:19:11,120
going ahead and running the actual

00:19:08,720 --> 00:19:12,559
exploit a lot of our newer modules

00:19:11,120 --> 00:19:14,320
have check methods which are going to go

00:19:12,559 --> 00:19:16,400
ahead and provide a little bit of logic

00:19:14,320 --> 00:19:16,799
to make a best effort guest to see you

00:19:16,400 --> 00:19:18,080
know

00:19:16,799 --> 00:19:19,840
do we are we confident we're going to be

00:19:18,080 --> 00:19:20,160
able to exploit this does it appear to

00:19:19,840 --> 00:19:21,760
be

00:19:20,160 --> 00:19:23,360
patched you know can we even determine

00:19:21,760 --> 00:19:24,480
that the service is running something

00:19:23,360 --> 00:19:26,559
along those lines

00:19:24,480 --> 00:19:28,240
uh so in this particular example the

00:19:26,559 --> 00:19:30,960
underlying vulnerability was that a

00:19:28,240 --> 00:19:33,440
a cryptographic secret was leaked so

00:19:30,960 --> 00:19:35,039
we're able to go ahead and gather enough

00:19:33,440 --> 00:19:36,559
information to see if we can

00:19:35,039 --> 00:19:38,960
sign something with a publicly known

00:19:36,559 --> 00:19:40,559
secret and identify if the vulnerability

00:19:38,960 --> 00:19:41,679
is present or not and there's no code

00:19:40,559 --> 00:19:44,080
execution nothing

00:19:41,679 --> 00:19:44,960
is corrupted so this is a very safe

00:19:44,080 --> 00:19:46,880
technique to check

00:19:44,960 --> 00:19:48,799
this particular vulnerability but again

00:19:46,880 --> 00:19:51,360
it's very very context

00:19:48,799 --> 00:19:52,960
sensitive and lastly we go ahead and be

00:19:51,360 --> 00:19:55,120
the actual exploit module which would

00:19:52,960 --> 00:19:57,200
expand on this particular content uh

00:19:55,120 --> 00:20:00,160
quite a bit by actually implementing the

00:19:57,200 --> 00:20:00,880
the logic um in order to go ahead and

00:20:00,160 --> 00:20:03,039
leverage

00:20:00,880 --> 00:20:03,919
uh the vulnerability to demonstrate that

00:20:03,039 --> 00:20:06,880
it is in fact

00:20:03,919 --> 00:20:09,440
present and with that i want to go ahead

00:20:06,880 --> 00:20:10,799
and thank you for your time i hope you

00:20:09,440 --> 00:20:13,039
uh found the muscular project as

00:20:10,799 --> 00:20:14,559
interesting as as i do and maybe perhaps

00:20:13,039 --> 00:20:17,600
you'll be interested in checking us out

00:20:14,559 --> 00:20:17,600

YouTube URL: https://www.youtube.com/watch?v=u-Cdl-H7qDo


