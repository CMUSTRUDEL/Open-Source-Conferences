Title: Secure container development workflows with Anchore and GitHub Actions- GitHub Universe 2019
Publication date: 2019-12-13
Playlist: GitHub Universe 2019 - Skills
Description: 
	Presented by Zach Hill, Principal Architect, Anchore, and Steve Winton, Senior Partner Engineer, GitHub

Containers are a driving force behind code reuse for businesses of all sizes, allowing developers to choose from a variety of software sources when they’re building an application. However, containers can sometimes introduce unwanted security and compliance flaws. GitHub’s Steve Winton and Anchore’s Zach Hill will discuss how users can now check containers for known vulnerabilities and configuration issues automatically, thanks to Anchore and GitHub Actions. Plus, they’ll show you some ways you can integrate this new product into your development pipeline.

About GitHub Universe:
GitHub Universe is a two-day conference dedicated to the creativity and curiosity of the largest software community in the world. Sessions cover topics from team culture to open source software across industries and technologies.

For more information on GitHub Universe, check the website:
https://githubuniverse.com
Captions: 
	00:00:00,650 --> 00:00:14,240
[Music]

00:00:17,370 --> 00:00:24,420
everyone hope you're all doing well

00:00:20,810 --> 00:00:27,200
thanks for coming to this session secure

00:00:24,420 --> 00:00:28,800
container workflows with Angkor and

00:00:27,200 --> 00:00:32,130
github actions

00:00:28,800 --> 00:00:35,309
glad you all could make it my name is

00:00:32,130 --> 00:00:38,010
Steve Winton I am a member of the

00:00:35,309 --> 00:00:40,920
partner engineering team at github where

00:00:38,010 --> 00:00:44,489
it's my pleasure to work with github x'

00:00:40,920 --> 00:00:46,320
many wonderful partners and help them

00:00:44,489 --> 00:00:48,420
and work with them as they bring new

00:00:46,320 --> 00:00:50,370
products and services that work with

00:00:48,420 --> 00:00:53,550
github to market for our shared

00:00:50,370 --> 00:00:55,620
customers i've been working for the last

00:00:53,550 --> 00:00:58,110
several weeks with our partner angkor

00:00:55,620 --> 00:01:02,730
and we're excited to show you what we've

00:00:58,110 --> 00:01:04,170
been working on today Zak so my name is

00:01:02,730 --> 00:01:06,750
Zack Hill and I'm the principal

00:01:04,170 --> 00:01:08,520
architect at Angkor and looking forward

00:01:06,750 --> 00:01:10,470
to kind of showing you this new angkor

00:01:08,520 --> 00:01:12,090
container scan action and how you can

00:01:10,470 --> 00:01:15,479
use that to bring security to your

00:01:12,090 --> 00:01:17,190
container based workflows so today we'll

00:01:15,479 --> 00:01:18,780
start off talking about some of the

00:01:17,190 --> 00:01:21,240
opportunities and challenges that arise

00:01:18,780 --> 00:01:23,819
in these new container workflows I'll

00:01:21,240 --> 00:01:26,220
then talk about the capabilities of the

00:01:23,819 --> 00:01:28,170
Angkor can scanning system and how it

00:01:26,220 --> 00:01:30,420
does container scanning analysis and

00:01:28,170 --> 00:01:33,539
policy evaluation then I'll cover

00:01:30,420 --> 00:01:35,190
quickly the Anker container scan action

00:01:33,539 --> 00:01:37,950
itself so how it works and what it's

00:01:35,190 --> 00:01:40,470
doing in your actions workflow and then

00:01:37,950 --> 00:01:41,910
we'll see how to add that scan action

00:01:40,470 --> 00:01:43,649
into your own workflow so that you can

00:01:41,910 --> 00:01:45,660
be scanning the container artifacts that

00:01:43,649 --> 00:01:49,649
are coming out of your actions pipelines

00:01:45,660 --> 00:01:51,420
so at a high level we really like

00:01:49,649 --> 00:01:53,310
containers right they've they've really

00:01:51,420 --> 00:01:55,880
helped us increase development velocity

00:01:53,310 --> 00:01:58,140
by providing things like reusability

00:01:55,880 --> 00:01:59,729
isolations you can run many versions of

00:01:58,140 --> 00:02:02,009
an application right next to each other

00:01:59,729 --> 00:02:03,780
without worrying about configuration

00:02:02,009 --> 00:02:05,670
conflicts right it enables faster

00:02:03,780 --> 00:02:07,170
testing you can test you know multiple

00:02:05,670 --> 00:02:09,390
versions or multiple sets of

00:02:07,170 --> 00:02:10,920
dependencies all at the same time and it

00:02:09,390 --> 00:02:12,569
provides a consistent development

00:02:10,920 --> 00:02:14,430
experience all the way from say

00:02:12,569 --> 00:02:15,660
onboarding new developers where you can

00:02:14,430 --> 00:02:17,670
quickly spin them up with your

00:02:15,660 --> 00:02:19,530
application stack on their laptop all

00:02:17,670 --> 00:02:21,690
the way through the CI testing and

00:02:19,530 --> 00:02:25,980
ultimately deployment and this this

00:02:21,690 --> 00:02:27,780
consistency and brings significant ease

00:02:25,980 --> 00:02:29,129
of ingress for new technologies so it's

00:02:27,780 --> 00:02:30,390
much easier now to bring in new

00:02:29,129 --> 00:02:32,490
applications or component

00:02:30,390 --> 00:02:34,020
of your application stack and get them

00:02:32,490 --> 00:02:36,450
directly from testing and into

00:02:34,020 --> 00:02:38,220
production and so overall this is

00:02:36,450 --> 00:02:40,620
increasing the development velocity

00:02:38,220 --> 00:02:42,750
which is great so development and DevOps

00:02:40,620 --> 00:02:44,100
teams feel empowered kind of move fast

00:02:42,750 --> 00:02:45,600
and be able to break stuff because

00:02:44,100 --> 00:02:47,880
they're confident that they can push out

00:02:45,600 --> 00:02:49,410
updates quickly and reliably without

00:02:47,880 --> 00:02:51,240
having to babysit their infrastructure

00:02:49,410 --> 00:02:53,940
and worry about you know how hard is it

00:02:51,240 --> 00:02:59,130
going to be to roll things back so we'll

00:02:53,940 --> 00:03:02,190
kind of show that in action here so as

00:02:59,130 --> 00:03:04,320
well as my day job at github I also have

00:03:02,190 --> 00:03:06,930
a bit of a side project going at the

00:03:04,320 --> 00:03:09,450
moment where I'm a web developer for a

00:03:06,930 --> 00:03:12,690
new enterprise called top socks which

00:03:09,450 --> 00:03:15,209
perhaps many of you have heard of it's

00:03:12,690 --> 00:03:16,950
basically the top destination for socks

00:03:15,209 --> 00:03:19,140
on the internet I'm sure you've heard of

00:03:16,950 --> 00:03:21,360
us if not check us out I have been

00:03:19,140 --> 00:03:25,880
working in my spare time really really

00:03:21,360 --> 00:03:28,230
hard on a new feature that is pretty

00:03:25,880 --> 00:03:30,330
important to my marketing team there's

00:03:28,230 --> 00:03:31,890
quite a lot of pressure around this to

00:03:30,330 --> 00:03:35,370
get us out the door it's an animated

00:03:31,890 --> 00:03:37,680
gift service and it's gonna power all of

00:03:35,370 --> 00:03:39,780
the animated gifts of our marketing team

00:03:37,680 --> 00:03:41,760
needs on our e-commerce front end

00:03:39,780 --> 00:03:45,209
something working super hard on this I

00:03:41,760 --> 00:03:47,549
need to get out the door ASAP and here

00:03:45,209 --> 00:03:50,940
is the the repository now fortunately I

00:03:47,549 --> 00:03:53,030
had the foresight to wrap this service

00:03:50,940 --> 00:03:56,970
in a container so it's all neatly

00:03:53,030 --> 00:03:58,769
containerized here as we can see so this

00:03:56,970 --> 00:04:00,690
gives me confidence that when I ship

00:03:58,769 --> 00:04:02,760
this the code that I've been running on

00:04:00,690 --> 00:04:06,840
my development machine is exactly the

00:04:02,760 --> 00:04:09,989
same as what lands on master so and in

00:04:06,840 --> 00:04:12,780
addition to being containerized I've

00:04:09,989 --> 00:04:15,450
also been extremely clever in using

00:04:12,780 --> 00:04:18,900
github actions to create this build and

00:04:15,450 --> 00:04:21,299
deploy pipeline and I've got several

00:04:18,900 --> 00:04:24,690
steps in here you can see running tests

00:04:21,299 --> 00:04:26,700
I'm doing even an audit of my NPM

00:04:24,690 --> 00:04:29,310
packages that are in my service I'm

00:04:26,700 --> 00:04:31,380
building my container and if all of that

00:04:29,310 --> 00:04:33,630
is successful I'll ultimately deploy

00:04:31,380 --> 00:04:36,810
that container the deploy step here

00:04:33,630 --> 00:04:39,870
involves pushing it to get hub packages

00:04:36,810 --> 00:04:42,090
where then a separate process will see

00:04:39,870 --> 00:04:44,190
that it will pick up that new container

00:04:42,090 --> 00:04:46,560
and it will push it off to production

00:04:44,190 --> 00:04:49,380
for me so it's all fully automated

00:04:46,560 --> 00:04:52,080
really repeatable a really reliable

00:04:49,380 --> 00:04:54,120
process and this is going to help me

00:04:52,080 --> 00:04:55,620
move fast which I really need because

00:04:54,120 --> 00:04:57,690
like I said there's a lot of pressure to

00:04:55,620 --> 00:05:00,270
get this done right now so here I am

00:04:57,690 --> 00:05:02,370
with my pull request that's like 90% of

00:05:00,270 --> 00:05:04,230
the way there opening this pull request

00:05:02,370 --> 00:05:06,930
is actually going to trigger off all of

00:05:04,230 --> 00:05:08,820
my actions all of my checks to run for

00:05:06,930 --> 00:05:11,280
me and it's going to give me that kind

00:05:08,820 --> 00:05:13,170
of added amount of confidence to make

00:05:11,280 --> 00:05:15,360
sure that it all goes well so here we

00:05:13,170 --> 00:05:17,430
see the the checks now are being kicked

00:05:15,360 --> 00:05:19,320
off for my pull request and we can jump

00:05:17,430 --> 00:05:21,420
in and check out the details and make

00:05:19,320 --> 00:05:24,000
sure it's going okay so this should all

00:05:21,420 --> 00:05:25,710
start running here in a second and if

00:05:24,000 --> 00:05:27,240
anything does fail then that's going to

00:05:25,710 --> 00:05:29,300
block my pull request I won't be able to

00:05:27,240 --> 00:05:32,040
merge anything checking out the code

00:05:29,300 --> 00:05:34,110
that pass don't expect that to fail I'm

00:05:32,040 --> 00:05:35,490
cashing my node modules which gives me a

00:05:34,110 --> 00:05:38,280
little bit of a performance boost if

00:05:35,490 --> 00:05:39,830
anything does go wrong I need to do it

00:05:38,280 --> 00:05:42,240
again I won't need to do that step again

00:05:39,830 --> 00:05:44,940
it looks like this time we do need to

00:05:42,240 --> 00:05:52,050
install those packages take a couple of

00:05:44,940 --> 00:05:54,360
seconds to do that and then my tests are

00:05:52,050 --> 00:05:55,620
going to run I've got some tests in

00:05:54,360 --> 00:05:57,840
there I could probably boost those a

00:05:55,620 --> 00:06:01,050
little bit with my coverage and most

00:05:57,840 --> 00:06:03,230
importantly my audit step here so zero

00:06:01,050 --> 00:06:07,169
vulnerabilities and almost almost

00:06:03,230 --> 00:06:08,850
900,000 packages it's crazy but yeah

00:06:07,169 --> 00:06:12,690
zero vulnerabilities there which is

00:06:08,850 --> 00:06:14,250
awesome so I'm you know with every green

00:06:12,690 --> 00:06:16,050
checkmark that I'm getting here I'm just

00:06:14,250 --> 00:06:18,990
getting increased confidence in the

00:06:16,050 --> 00:06:22,260
quality of this release so my image is

00:06:18,990 --> 00:06:24,419
being built now I do see a few warnings

00:06:22,260 --> 00:06:26,040
there but I don't think I need to be too

00:06:24,419 --> 00:06:27,750
concerned about that I saw the same

00:06:26,040 --> 00:06:30,060
thing on my development machine and it

00:06:27,750 --> 00:06:37,350
was fine so let's just wait for the bill

00:06:30,060 --> 00:06:39,210
to complete here and just a second okay

00:06:37,350 --> 00:06:40,650
and right because we're on a full

00:06:39,210 --> 00:06:44,310
request here I'm not actually going to

00:06:40,650 --> 00:06:46,530
do a deployment once that once this pull

00:06:44,310 --> 00:06:51,030
request emerges will do the deploy at

00:06:46,530 --> 00:06:53,490
that step on from master so this is all

00:06:51,030 --> 00:06:56,400
green now I'm feeling pretty good about

00:06:53,490 --> 00:06:58,020
this so I think I can hit that merge

00:06:56,400 --> 00:06:59,790
button

00:06:58,020 --> 00:07:02,430
it's a big decision but I do feel good

00:06:59,790 --> 00:07:07,620
about this so yeah I think we can go

00:07:02,430 --> 00:07:14,010
ahead and merge this now thinking about

00:07:07,620 --> 00:07:18,900
it let's merge do this yeah here we go

00:07:14,010 --> 00:07:20,070
yeah and there's my email address so and

00:07:18,900 --> 00:07:22,650
we can delete the branch we don't need

00:07:20,070 --> 00:07:28,200
that anymore so yeah like I said now

00:07:22,650 --> 00:07:31,380
this has been merged to master that

00:07:28,200 --> 00:07:33,450
merge commit we'll run another scan on

00:07:31,380 --> 00:07:37,770
that merge commit and then that will get

00:07:33,450 --> 00:07:39,060
pushed out to production get picked up

00:07:37,770 --> 00:07:41,330
by a separate process which will do the

00:07:39,060 --> 00:07:46,200
actual deployment so all that to say

00:07:41,330 --> 00:07:48,510
this process of running automated checks

00:07:46,200 --> 00:07:50,700
of running an audit on my packages of

00:07:48,510 --> 00:07:53,220
running my tests pushing the container

00:07:50,700 --> 00:07:55,080
out to get our packages this allowed me

00:07:53,220 --> 00:07:57,210
to move fast it's allowed me to get this

00:07:55,080 --> 00:07:58,320
new service out to production really

00:07:57,210 --> 00:08:00,390
quickly

00:07:58,320 --> 00:08:02,250
basically I'm pretty happy at this point

00:08:00,390 --> 00:08:04,010
I'm going to tell my marketing team that

00:08:02,250 --> 00:08:05,580
the new service is ready they'll be

00:08:04,010 --> 00:08:07,290
ridiculous that they wanted it yesterday

00:08:05,580 --> 00:08:09,810
but I think there'll be amazed that it

00:08:07,290 --> 00:08:12,360
landed today in production and I think

00:08:09,810 --> 00:08:14,340
at this point I can pretty much relax

00:08:12,360 --> 00:08:16,140
give myself a pat on the back and

00:08:14,340 --> 00:08:21,410
probably finish my working day early so

00:08:16,140 --> 00:08:24,210
thanks for coming everyone we're done

00:08:21,410 --> 00:08:27,150
but I too am moonlighting for top stocks

00:08:24,210 --> 00:08:29,610
and my job is security and I say great

00:08:27,150 --> 00:08:31,740
job Steve I was very happy that to see

00:08:29,610 --> 00:08:33,390
that NPM audit but what we deployed was

00:08:31,740 --> 00:08:34,950
actually a container and so what I

00:08:33,390 --> 00:08:37,320
didn't see is any understanding and

00:08:34,950 --> 00:08:42,750
analysis or or policy around what can be

00:08:37,320 --> 00:08:47,190
in that container itself okay so maybe I

00:08:42,750 --> 00:08:50,130
haven't finished my day just yet so I

00:08:47,190 --> 00:08:50,990
guess my my security officer might have

00:08:50,130 --> 00:08:53,370
a point

00:08:50,990 --> 00:08:55,860
maybe there are some additional things

00:08:53,370 --> 00:08:58,170
in my container that I might have

00:08:55,860 --> 00:09:00,540
overlooked even though my 900,000

00:08:58,170 --> 00:09:02,040
packages didn't have any vulnerabilities

00:09:00,540 --> 00:09:05,130
yeah perhaps there is something else in

00:09:02,040 --> 00:09:07,650
there but you know I'm just a developer

00:09:05,130 --> 00:09:09,300
I don't really have time I'm trying to

00:09:07,650 --> 00:09:10,529
you know meet our business requirements

00:09:09,300 --> 00:09:14,399
I'm trying to keep my

00:09:10,529 --> 00:09:16,110
Marketing team happy I feel like now

00:09:14,399 --> 00:09:17,970
I've got the security officer kind of

00:09:16,110 --> 00:09:20,790
asking me to direct your things as well

00:09:17,970 --> 00:09:22,829
I'm already doing all of this stuff and

00:09:20,790 --> 00:09:25,199
it's kind of getting a bit overwhelming

00:09:22,829 --> 00:09:27,180
like what all these choices that I need

00:09:25,199 --> 00:09:28,709
to now make what is a good base image to

00:09:27,180 --> 00:09:31,829
start building from but I don't really

00:09:28,709 --> 00:09:33,990
know to be completely sure I want to be

00:09:31,829 --> 00:09:35,579
able to ship confidently and with high

00:09:33,990 --> 00:09:38,220
velocity but I feel like this is going

00:09:35,579 --> 00:09:40,230
to just slow me down all this kind of

00:09:38,220 --> 00:09:42,629
additional complexity responsibilities

00:09:40,230 --> 00:09:45,269
I'm not sure what I should check I'm not

00:09:42,629 --> 00:09:47,189
a security expert honestly I kind of

00:09:45,269 --> 00:09:52,589
wish that I could outsource this problem

00:09:47,189 --> 00:09:54,120
to someone else and so that that feeling

00:09:52,589 --> 00:09:55,680
is kind of emblematic of some of the

00:09:54,120 --> 00:09:57,749
security challenges that we see with

00:09:55,680 --> 00:09:59,579
these containerized workflows and more

00:09:57,749 --> 00:10:02,220
generally this this ongoing transition

00:09:59,579 --> 00:10:04,170
from dev - dev ops and dev SEC ops right

00:10:02,220 --> 00:10:06,089
as developers are getting the tools to

00:10:04,170 --> 00:10:07,949
move very quickly and push things

00:10:06,089 --> 00:10:09,689
through to production very fast it's

00:10:07,949 --> 00:10:10,860
also actually making the choices that

00:10:09,689 --> 00:10:13,470
are made earlier in the development

00:10:10,860 --> 00:10:14,639
process even more important in terms of

00:10:13,470 --> 00:10:16,829
what actually gets deployed in

00:10:14,639 --> 00:10:18,720
production so an early decision by

00:10:16,829 --> 00:10:20,550
developer to just grab a random image

00:10:18,720 --> 00:10:21,629
you know I need a database I'm gonna

00:10:20,550 --> 00:10:23,309
grab this and stick this into my

00:10:21,629 --> 00:10:24,870
deployment template suddenly that makes

00:10:23,309 --> 00:10:27,480
it all the way through to production

00:10:24,870 --> 00:10:29,399
without the proper checks and maybe

00:10:27,480 --> 00:10:30,750
violating a lot of different security or

00:10:29,399 --> 00:10:33,750
compliance requirements that the

00:10:30,750 --> 00:10:34,920
organization has so this kind of leads

00:10:33,750 --> 00:10:36,660
to the question what about security

00:10:34,920 --> 00:10:40,009
review and where does security reviews

00:10:36,660 --> 00:10:42,870
fit in these workflows who owns them and

00:10:40,009 --> 00:10:44,339
how do you scale these processes for

00:10:42,870 --> 00:10:45,839
micro service architectures that are

00:10:44,339 --> 00:10:48,059
becoming so popular right you might be

00:10:45,839 --> 00:10:50,610
pushing tens hundreds even thousands of

00:10:48,059 --> 00:10:52,139
services out with multiple updates per

00:10:50,610 --> 00:10:54,360
day right you've got a very polished

00:10:52,139 --> 00:10:56,639
deployment pipeline every merge is going

00:10:54,360 --> 00:10:58,920
and resulting in a new commit a new

00:10:56,639 --> 00:11:00,899
version of the software being pushed out

00:10:58,920 --> 00:11:03,420
to your customers and so this overall

00:11:00,899 --> 00:11:05,160
leads to a really large inventory so you

00:11:03,420 --> 00:11:07,649
have a bunch of container images out

00:11:05,160 --> 00:11:08,850
there potentially lots of churn and even

00:11:07,649 --> 00:11:10,860
more specifically a really short

00:11:08,850 --> 00:11:12,360
container lifecycle so a given version

00:11:10,860 --> 00:11:14,579
of your software may only be running

00:11:12,360 --> 00:11:16,559
four days or a week and that has

00:11:14,579 --> 00:11:17,879
implications on the back end when you're

00:11:16,559 --> 00:11:19,860
looking when you need to do security

00:11:17,879 --> 00:11:21,120
audits and security reviews for

00:11:19,860 --> 00:11:23,040
understanding kind of what was running

00:11:21,120 --> 00:11:25,500
and where

00:11:23,040 --> 00:11:27,329
and so ideally we want to you know

00:11:25,500 --> 00:11:29,639
assist this with tooling and the first

00:11:27,329 --> 00:11:31,709
step in this tooling and helping kind of

00:11:29,639 --> 00:11:33,420
bridge this gap is understanding the

00:11:31,709 --> 00:11:34,500
container content kind of in a deep way

00:11:33,420 --> 00:11:36,660
and we don't want to have to do this

00:11:34,500 --> 00:11:38,820
with a manual process or a manual review

00:11:36,660 --> 00:11:40,139
but it's important to understand that

00:11:38,820 --> 00:11:42,540
there's a lot that goes into these

00:11:40,139 --> 00:11:44,430
containers besides just the application

00:11:42,540 --> 00:11:45,899
code right so there's build metadata

00:11:44,430 --> 00:11:47,519
that comes in from the docker file

00:11:45,899 --> 00:11:49,790
during the build step and we saw a

00:11:47,519 --> 00:11:52,050
fairly straightforward docker file there

00:11:49,790 --> 00:11:53,820
but you know it's not uncommon to see

00:11:52,050 --> 00:11:55,680
docker files that are 50 hundred lines

00:11:53,820 --> 00:11:58,230
with lots of different operations you

00:11:55,680 --> 00:11:59,880
know pulling in tar balls from various

00:11:58,230 --> 00:12:01,410
sources within the organization and

00:11:59,880 --> 00:12:03,870
dropping those into the container for

00:12:01,410 --> 00:12:05,639
example that includes the software

00:12:03,870 --> 00:12:08,190
packages that get installed during your

00:12:05,639 --> 00:12:09,779
build as well as any underlying what

00:12:08,190 --> 00:12:11,190
I'll call OS packages but usually

00:12:09,779 --> 00:12:13,110
they're things like Lib C right there

00:12:11,190 --> 00:12:14,940
they're user space libraries that are

00:12:13,110 --> 00:12:17,240
needed to run maybe your language

00:12:14,940 --> 00:12:19,740
framework right node or Ruby on Rails

00:12:17,240 --> 00:12:21,750
those have low-level dependencies as

00:12:19,740 --> 00:12:23,639
well there's also configuration files

00:12:21,750 --> 00:12:26,070
that will define how these various

00:12:23,639 --> 00:12:28,680
processes run the OS files themselves

00:12:26,070 --> 00:12:30,269
and even in some cases application data

00:12:28,680 --> 00:12:31,889
so things like machine learning images

00:12:30,269 --> 00:12:34,260
we see that often get front loaded with

00:12:31,889 --> 00:12:37,230
a pretty big corpus of data during the

00:12:34,260 --> 00:12:38,310
container build itself and so all this

00:12:37,230 --> 00:12:39,750
means you have a lot of different

00:12:38,310 --> 00:12:41,790
classifications of things that are in

00:12:39,750 --> 00:12:43,079
the container and you need to understand

00:12:41,790 --> 00:12:44,699
that and be able to do the appropriate

00:12:43,079 --> 00:12:46,560
security checks against all of those

00:12:44,699 --> 00:12:47,850
things to make sure that what you're

00:12:46,560 --> 00:12:49,110
pushing into production meets all of

00:12:47,850 --> 00:12:51,449
your requirements for security

00:12:49,110 --> 00:12:53,970
compliance and audit you know security

00:12:51,449 --> 00:12:55,199
is more than just scanning a thing for

00:12:53,970 --> 00:12:57,510
vulnerabilities it's about understanding

00:12:55,199 --> 00:12:59,430
the audit trail so where did things come

00:12:57,510 --> 00:13:01,740
from where did they run which commits of

00:12:59,430 --> 00:13:03,720
code resulted in which containers and

00:13:01,740 --> 00:13:07,160
which artifacts eventually ended up into

00:13:03,720 --> 00:13:09,149
production it's also about enforcing

00:13:07,160 --> 00:13:11,310
organizational best practices in

00:13:09,149 --> 00:13:13,260
configuration so things that help your

00:13:11,310 --> 00:13:15,959
processes further down the line say

00:13:13,260 --> 00:13:17,670
required labels in your docker file

00:13:15,959 --> 00:13:20,910
right that are used to track deployment

00:13:17,670 --> 00:13:22,829
later on or specific health checks that

00:13:20,910 --> 00:13:25,290
you want to ensure every container has

00:13:22,829 --> 00:13:28,019
and so enforcing this and that can

00:13:25,290 --> 00:13:30,720
impact your security stance as well so

00:13:28,019 --> 00:13:33,449
the best way to address this overall is

00:13:30,720 --> 00:13:35,040
through policy and automation right so

00:13:33,449 --> 00:13:36,600
you want to make sure that you're

00:13:35,040 --> 00:13:38,190
scanning and verifying the you

00:13:36,600 --> 00:13:40,620
that you're actually deploying which in

00:13:38,190 --> 00:13:42,120
these cases is the container itself and

00:13:40,620 --> 00:13:43,980
this has a couple of other benefits as

00:13:42,120 --> 00:13:45,870
well because you can use the same

00:13:43,980 --> 00:13:47,580
approaches for things that are runtime

00:13:45,870 --> 00:13:50,640
dependencies of your application stack

00:13:47,580 --> 00:13:52,770
your databases message brokers caching

00:13:50,640 --> 00:13:54,390
systems all of this can be analyzed the

00:13:52,770 --> 00:13:56,550
same way even though they're delivered

00:13:54,390 --> 00:13:59,340
as containers but they're not actually

00:13:56,550 --> 00:14:01,080
your source code so what we see in real

00:13:59,340 --> 00:14:02,730
deployments is often you know the

00:14:01,080 --> 00:14:04,950
application that you're deploying is

00:14:02,730 --> 00:14:06,450
part of a broader stack that and your

00:14:04,950 --> 00:14:08,970
application code may only be a small

00:14:06,450 --> 00:14:10,970
portion of the total deployment service

00:14:08,970 --> 00:14:13,290
that gets pushed out with each update

00:14:10,970 --> 00:14:15,210
and we use policy here to help

00:14:13,290 --> 00:14:17,250
communicate and enforce requirements so

00:14:15,210 --> 00:14:18,660
this is how you know Steve as the

00:14:17,250 --> 00:14:20,100
developer doesn't have to understand all

00:14:18,660 --> 00:14:21,540
the requirements and exactly what to

00:14:20,100 --> 00:14:23,190
check that can be a process that's

00:14:21,540 --> 00:14:25,050
coordinated between the development team

00:14:23,190 --> 00:14:27,030
and security team if you're lucky to

00:14:25,050 --> 00:14:28,710
have one or by somebody in the security

00:14:27,030 --> 00:14:30,420
organization and then it's very clear

00:14:28,710 --> 00:14:31,800
what the requirements are and it's very

00:14:30,420 --> 00:14:33,810
clear that those will get enforced

00:14:31,800 --> 00:14:35,940
automatically on every on every commit

00:14:33,810 --> 00:14:37,650
and ideally you'd even be able to keep

00:14:35,940 --> 00:14:39,150
this policy with the application code

00:14:37,650 --> 00:14:40,860
furthering that coupling and that

00:14:39,150 --> 00:14:43,920
communication between the various teams

00:14:40,860 --> 00:14:45,690
and for automation we bring that in and

00:14:43,920 --> 00:14:48,090
we want to automate this process so that

00:14:45,690 --> 00:14:50,250
developers get feedback very early in

00:14:48,090 --> 00:14:52,860
the process for example on your your

00:14:50,250 --> 00:14:54,720
push or your PR so that developers can

00:14:52,860 --> 00:14:56,400
address these known issues immediately

00:14:54,720 --> 00:14:58,650
and ensure that they're not wasting

00:14:56,400 --> 00:15:00,810
further CI cycles or deployment cycles

00:14:58,650 --> 00:15:02,340
and tracking things back after that

00:15:00,810 --> 00:15:04,200
they've been deployed you can catch it

00:15:02,340 --> 00:15:06,570
early in the workflow where it's the

00:15:04,200 --> 00:15:09,180
most effective most efficient in terms

00:15:06,570 --> 00:15:11,340
of cost and time and then the last

00:15:09,180 --> 00:15:13,590
aspect where this is particularly

00:15:11,340 --> 00:15:16,320
advantage advantageous with things like

00:15:13,590 --> 00:15:18,270
github actions is audit so we can

00:15:16,320 --> 00:15:20,220
combine the the results of these scans

00:15:18,270 --> 00:15:21,960
with the commits that generated them so

00:15:20,220 --> 00:15:23,340
it creates a natural and nice audit

00:15:21,960 --> 00:15:24,960
trail through the system where we can

00:15:23,340 --> 00:15:27,120
see each change that comes through the

00:15:24,960 --> 00:15:28,860
code resulted in this change to the

00:15:27,120 --> 00:15:31,050
containers that it generated and

00:15:28,860 --> 00:15:37,590
actually these compliance and security

00:15:31,050 --> 00:15:39,420
checks that resulted so that's where

00:15:37,590 --> 00:15:40,800
anchor that the container scan action

00:15:39,420 --> 00:15:42,870
comes in so what we've done is we've

00:15:40,800 --> 00:15:44,850
built a scan action that you can execute

00:15:42,870 --> 00:15:46,320
in your github actions workflow that

00:15:44,850 --> 00:15:48,780
takes the anchor technology which I'll

00:15:46,320 --> 00:15:49,449
go over momentarily and embeds that into

00:15:48,780 --> 00:15:51,129
your actions we

00:15:49,449 --> 00:15:53,739
floo so that you get a consistent policy

00:15:51,129 --> 00:15:55,029
based approach to validating the

00:15:53,739 --> 00:15:58,509
containers that are moving through your

00:15:55,029 --> 00:16:00,339
pipelines so Angkor at its heart is a

00:15:58,509 --> 00:16:03,579
container analysis and policy evaluation

00:16:00,339 --> 00:16:05,589
tool and platform so it takes containers

00:16:03,579 --> 00:16:07,600
it cracks them open tries to classify

00:16:05,589 --> 00:16:09,730
and understand all the content that's in

00:16:07,600 --> 00:16:11,799
them and then provides a policy language

00:16:09,730 --> 00:16:13,899
where you can define checks an audit

00:16:11,799 --> 00:16:15,970
trail on each of those aspects so that

00:16:13,899 --> 00:16:18,429
you can both focus your security and

00:16:15,970 --> 00:16:20,259
compliance efforts as well as get a nice

00:16:18,429 --> 00:16:22,749
audit of what was found in the container

00:16:20,259 --> 00:16:24,399
so first the thing that most people

00:16:22,749 --> 00:16:26,379
understand right away is vulnerability

00:16:24,399 --> 00:16:28,179
matching right so so anchor can do

00:16:26,379 --> 00:16:31,209
vulnerability matching against the OS

00:16:28,179 --> 00:16:33,489
packages so things like rpms Debs

00:16:31,209 --> 00:16:36,579
you know your distribution packages as

00:16:33,489 --> 00:16:40,959
well as language or application packages

00:16:36,579 --> 00:16:42,910
NPMs ruby gems Python files Java jars

00:16:40,959 --> 00:16:45,040
things like that so it can do a full

00:16:42,910 --> 00:16:46,899
suite vulnerability matching and it can

00:16:45,040 --> 00:16:48,399
do that because it deeply understands

00:16:46,899 --> 00:16:50,889
all the content that's in the container

00:16:48,399 --> 00:16:53,169
and that includes enumerated all the OS

00:16:50,889 --> 00:16:55,419
packages and language packages but also

00:16:53,169 --> 00:16:57,730
extending down into the guts of the file

00:16:55,419 --> 00:16:59,889
system where we do a full scan of all

00:16:57,730 --> 00:17:01,689
the files checksum every file in the

00:16:59,889 --> 00:17:03,609
container and so we can understand

00:17:01,689 --> 00:17:06,039
change control over time and between

00:17:03,609 --> 00:17:07,569
images and then this policy language

00:17:06,039 --> 00:17:09,819
let's say you define checks on the

00:17:07,569 --> 00:17:11,769
results of that scan so things like best

00:17:09,819 --> 00:17:13,329
practice validation looking at the

00:17:11,769 --> 00:17:14,889
docker file that you was used to build

00:17:13,329 --> 00:17:17,110
the container and then ensuring that it

00:17:14,889 --> 00:17:19,169
has certain best practices or for

00:17:17,110 --> 00:17:22,510
example white listing or black listing

00:17:19,169 --> 00:17:24,339
application package maybe NPM s or OS

00:17:22,510 --> 00:17:26,470
packages you want to make sure that lib

00:17:24,339 --> 00:17:28,329
SSL is at least some version or greater

00:17:26,470 --> 00:17:31,029
right you can enforce that in the

00:17:28,329 --> 00:17:33,130
container scan itself Ankur also has the

00:17:31,029 --> 00:17:34,480
capability to do credential enforcement

00:17:33,130 --> 00:17:35,740
so it will look at the content of the

00:17:34,480 --> 00:17:37,120
container and ensure that there's

00:17:35,740 --> 00:17:39,159
nothing in there that looks like it was

00:17:37,120 --> 00:17:40,870
a accidentally left over credential and

00:17:39,159 --> 00:17:42,730
this these things can result from either

00:17:40,870 --> 00:17:44,110
being directly in your your code

00:17:42,730 --> 00:17:45,909
repository which we hope you've got

00:17:44,110 --> 00:17:47,769
other tooling further up the chain to

00:17:45,909 --> 00:17:50,080
help identify that you're not committing

00:17:47,769 --> 00:17:51,880
keys into your github repo but that can

00:17:50,080 --> 00:17:54,010
also come in with building environment

00:17:51,880 --> 00:17:56,320
variables that are used or may be logged

00:17:54,010 --> 00:17:59,710
during the build process itself and can

00:17:56,320 --> 00:18:01,899
end up in containers that way so it

00:17:59,710 --> 00:18:03,220
provides a rich and kind of very

00:18:01,899 --> 00:18:04,870
flexible policy layer

00:18:03,220 --> 00:18:06,880
that lets you define the acceptance

00:18:04,870 --> 00:18:08,710
criteria and what you want to check for

00:18:06,880 --> 00:18:11,679
each of these kind of aspects of The

00:18:08,710 --> 00:18:14,590
Container content itself and here next

00:18:11,679 --> 00:18:16,450
I'll provide a really short example of

00:18:14,590 --> 00:18:18,700
the kind of policy rule so anka our

00:18:16,450 --> 00:18:20,530
policies are just json documents and

00:18:18,700 --> 00:18:22,330
they have love sets of rules and they

00:18:20,530 --> 00:18:24,340
have parameters so here this is

00:18:22,330 --> 00:18:26,650
extracted from the default policy that

00:18:24,340 --> 00:18:29,350
ships with the container scan action

00:18:26,650 --> 00:18:31,210
that we're talking about today and at

00:18:29,350 --> 00:18:33,490
the top there you see the the action is

00:18:31,210 --> 00:18:36,669
stopped so if this rule fires it will

00:18:33,490 --> 00:18:37,630
will block it can block a build and then

00:18:36,669 --> 00:18:38,919
there's some parameter so you see

00:18:37,630 --> 00:18:41,200
there's a gate that we're checked that

00:18:38,919 --> 00:18:43,570
we're evaluating the thing that's doing

00:18:41,200 --> 00:18:44,650
is a vulnerability check at the bottom I

00:18:43,570 --> 00:18:46,809
should have changed the ordering here

00:18:44,650 --> 00:18:48,460
the bottom it's triggering on packages

00:18:46,809 --> 00:18:50,679
so it's looking for vulnerabilities in

00:18:48,460 --> 00:18:52,090
packages within your container and then

00:18:50,679 --> 00:18:54,100
there's a bunch of parameter so what

00:18:52,090 --> 00:18:55,960
kind of package should it match against

00:18:54,100 --> 00:18:57,909
what kind of comparison should it use

00:18:55,960 --> 00:19:00,400
for the severity of the vulnerability

00:18:57,909 --> 00:19:03,280
and a limit on severity so but this one

00:19:00,400 --> 00:19:05,440
is actually describing is a stop action

00:19:03,280 --> 00:19:07,390
for any vulnerability that's found

00:19:05,440 --> 00:19:09,340
that's either high or critical severity

00:19:07,390 --> 00:19:11,169
and for which for which a fix is

00:19:09,340 --> 00:19:13,270
available so that last parameter that

00:19:11,169 --> 00:19:14,919
name value pair at the bottom says fix

00:19:13,270 --> 00:19:16,750
avail was true so this is helping us

00:19:14,919 --> 00:19:18,610
reduce the set of thing you know the

00:19:16,750 --> 00:19:20,230
noise in the system two things that you

00:19:18,610 --> 00:19:22,419
can actually resolve because there's a

00:19:20,230 --> 00:19:24,700
fix available and you can update the

00:19:22,419 --> 00:19:27,789
update your container to resolve that

00:19:24,700 --> 00:19:30,760
issue that's just one small example of

00:19:27,789 --> 00:19:32,500
one rule there's a whole bunch more feel

00:19:30,760 --> 00:19:34,720
free to check us out on the web later

00:19:32,500 --> 00:19:36,610
for kind of a better listing of that or

00:19:34,720 --> 00:19:38,559
come find me after the talk but at a

00:19:36,610 --> 00:19:40,360
high level the anchor policy has several

00:19:38,559 --> 00:19:42,120
features that we think make it really

00:19:40,360 --> 00:19:44,679
useful in terms of identifying

00:19:42,120 --> 00:19:46,630
actionable issues and and helping you

00:19:44,679 --> 00:19:49,150
build better images as a result and not

00:19:46,630 --> 00:19:50,679
just ingesting a giant list of

00:19:49,150 --> 00:19:52,690
vulnerabilities that somebody has to

00:19:50,679 --> 00:19:55,090
manually filter through later and figure

00:19:52,690 --> 00:19:56,799
out whether those 27 medium

00:19:55,090 --> 00:19:59,110
vulnerabilities actually matter to your

00:19:56,799 --> 00:20:01,059
application or not and that and that's

00:19:59,110 --> 00:20:02,890
around the the parameterization so you

00:20:01,059 --> 00:20:04,809
can kind of specify the kinds of checks

00:20:02,890 --> 00:20:08,799
that you want the parameters including

00:20:04,809 --> 00:20:10,870
things like cbss severity whether or not

00:20:08,799 --> 00:20:12,850
a fix has been available how long a fix

00:20:10,870 --> 00:20:14,320
has been available how long an image has

00:20:12,850 --> 00:20:15,970
had a vulnerability there's grace

00:20:14,320 --> 00:20:16,470
periods all kind of these these

00:20:15,970 --> 00:20:17,909
parameter

00:20:16,470 --> 00:20:21,559
help you focus in on what matters most

00:20:17,909 --> 00:20:24,150
for your organization we also consider

00:20:21,559 --> 00:20:26,010
support inline comments so for each rule

00:20:24,150 --> 00:20:28,110
you can set a comment that helps you

00:20:26,010 --> 00:20:30,480
provide context so anybody reading that

00:20:28,110 --> 00:20:34,500
policy they can see that this is why

00:20:30,480 --> 00:20:35,880
this rule is in place we also have a

00:20:34,500 --> 00:20:37,289
capability of doing whitelisting

00:20:35,880 --> 00:20:39,330
directly in the policy and this is

00:20:37,289 --> 00:20:40,860
important because as we know no policy

00:20:39,330 --> 00:20:42,419
will ever be perfect there will always

00:20:40,860 --> 00:20:44,669
need to be exceptions and this lets you

00:20:42,419 --> 00:20:46,860
track and if those exceptions to the

00:20:44,669 --> 00:20:49,110
rule within the policy directly and

00:20:46,860 --> 00:20:50,760
again ideally tying this directly into

00:20:49,110 --> 00:20:53,370
your the source repository that's

00:20:50,760 --> 00:20:55,830
building the container itself and lastly

00:20:53,370 --> 00:20:57,960
the way ankhor evaluates policy is very

00:20:55,830 --> 00:20:59,880
audit friendly so it will evaluate every

00:20:57,960 --> 00:21:01,530
single rule in the policy and give

00:20:59,880 --> 00:21:04,140
outputs for every single rule whether

00:21:01,530 --> 00:21:06,480
that's a stop action as we saw anchor

00:21:04,140 --> 00:21:09,150
also supports two other types of action

00:21:06,480 --> 00:21:10,770
which are go and warns you can craft the

00:21:09,150 --> 00:21:12,390
messaging for the output of that policy

00:21:10,770 --> 00:21:14,070
maybe you just want to run a bunch of

00:21:12,390 --> 00:21:16,890
checks and record the results but not

00:21:14,070 --> 00:21:18,780
actually block your CI pipeline so it's

00:21:16,890 --> 00:21:21,990
very flexible and audit friendly in that

00:21:18,780 --> 00:21:23,820
way so how does it actually work like

00:21:21,990 --> 00:21:26,340
what is Ankur actually do so anchora

00:21:23,820 --> 00:21:29,309
engine is an open source project that

00:21:26,340 --> 00:21:31,350
provides a stateful service that you

00:21:29,309 --> 00:21:33,620
make API calls and tell it to analyze

00:21:31,350 --> 00:21:36,450
images and it fetches those images from

00:21:33,620 --> 00:21:38,190
docker image registries analyzes them

00:21:36,450 --> 00:21:41,370
and provides an API for asking questions

00:21:38,190 --> 00:21:43,740
about did it pass policy what it does it

00:21:41,370 --> 00:21:45,360
have in it you know you get a

00:21:43,740 --> 00:21:47,039
notification if there's a change in the

00:21:45,360 --> 00:21:49,740
vulnerability status of an existing

00:21:47,039 --> 00:21:51,659
image etc etc so it contains a powerful

00:21:49,740 --> 00:21:53,580
set of reports and queries and eventing

00:21:51,659 --> 00:21:55,549
and it you can integrate it into an

00:21:53,580 --> 00:21:58,830
existing action workflow using API calls

00:21:55,549 --> 00:21:59,850
but often for a lot of github users this

00:21:58,830 --> 00:22:01,380
isn't going to be sufficient because

00:21:59,850 --> 00:22:02,850
they don't want to run yet another

00:22:01,380 --> 00:22:04,950
stateful service that they have to

00:22:02,850 --> 00:22:06,450
expose on the internet somewhere so that

00:22:04,950 --> 00:22:08,850
their their github action workflow can

00:22:06,450 --> 00:22:10,530
access it and so we've wrapped that

00:22:08,850 --> 00:22:12,150
around what we call the inline scan

00:22:10,530 --> 00:22:13,919
which takes all of that logic and and

00:22:12,150 --> 00:22:15,659
composes it so that we can run it

00:22:13,919 --> 00:22:18,059
entirely locally that's kind of a

00:22:15,659 --> 00:22:19,950
command line so you just say do the

00:22:18,059 --> 00:22:22,289
thing and give me the output alright so

00:22:19,950 --> 00:22:23,429
that makes it much more consumable and

00:22:22,289 --> 00:22:25,409
it doesn't have any external

00:22:23,429 --> 00:22:27,360
dependencies you don't have to do any

00:22:25,409 --> 00:22:29,280
call-outs to any other API as no

00:22:27,360 --> 00:22:30,419
external services are required but it's

00:22:29,280 --> 00:22:32,100
still fully featured in term

00:22:30,419 --> 00:22:35,100
it's metadata and the vulnerability

00:22:32,100 --> 00:22:36,509
checks and for the scan action itself

00:22:35,100 --> 00:22:38,399
the thing you actually run in in your

00:22:36,509 --> 00:22:40,320
actions workflow we've wrapped that in

00:22:38,399 --> 00:22:42,299
line scan around some inputs and outputs

00:22:40,320 --> 00:22:44,730
so what actually happens when you invoke

00:22:42,299 --> 00:22:46,619
the ink or container scan action is it's

00:22:44,730 --> 00:22:49,619
gonna pull down a docker image from our

00:22:46,619 --> 00:22:51,059
docker hub repo that contains all the

00:22:49,619 --> 00:22:52,230
vulnerabilities and those get updated

00:22:51,059 --> 00:22:53,999
nightly so you always have fresh

00:22:52,230 --> 00:22:55,950
vulnerability data then it does an

00:22:53,999 --> 00:22:57,809
unpack and deep scan of your container

00:22:55,950 --> 00:22:59,340
that you've told it scan this container

00:22:57,809 --> 00:23:01,289
on my localhost or in the github

00:22:59,340 --> 00:23:03,119
workflow and then it will do the

00:23:01,289 --> 00:23:04,529
security scanning and then take those

00:23:03,119 --> 00:23:06,239
outputs and pass all that through the

00:23:04,529 --> 00:23:08,669
policy engine ultimately giving you a

00:23:06,239 --> 00:23:11,399
pass or a fail and again to reiterate

00:23:08,669 --> 00:23:13,139
this runs entirely within your CI or in

00:23:11,399 --> 00:23:15,509
your actions workflow and there's no

00:23:13,139 --> 00:23:17,639
external prudential assistant hit any

00:23:15,509 --> 00:23:20,159
other service running outside of the

00:23:17,639 --> 00:23:22,859
workflow at all so no data leave your

00:23:20,159 --> 00:23:25,619
pipeline so I'll just quickly touch on

00:23:22,859 --> 00:23:28,019
some of the input parameters for the

00:23:25,619 --> 00:23:29,220
action itself and well and Steve will

00:23:28,019 --> 00:23:31,289
show us kind of later how we actually

00:23:29,220 --> 00:23:33,480
use this thing but high-level I just

00:23:31,289 --> 00:23:34,859
want to highlight at the very top there

00:23:33,480 --> 00:23:36,359
the image reference is really the only

00:23:34,859 --> 00:23:38,639
thing you need to give it you can call

00:23:36,359 --> 00:23:40,289
the action say analyze this image right

00:23:38,639 --> 00:23:42,149
with this tag that I just built locally

00:23:40,289 --> 00:23:43,529
and it will do the rest

00:23:42,149 --> 00:23:45,299
there's other things you can set like

00:23:43,529 --> 00:23:47,820
whether you want to fail the actual

00:23:45,299 --> 00:23:49,859
actions build or not based on the result

00:23:47,820 --> 00:23:52,769
of the policy whether you want to

00:23:49,859 --> 00:23:54,149
include a custom policy so we we have a

00:23:52,769 --> 00:23:56,220
default policy that ships with the

00:23:54,149 --> 00:23:58,889
action you can always build your own

00:23:56,220 --> 00:24:00,359
policy document and use that instead and

00:23:58,889 --> 00:24:02,070
so you have that level of flexibility

00:24:00,359 --> 00:24:04,200
and the outputs when it when it

00:24:02,070 --> 00:24:06,210
completes or a bill of materials which

00:24:04,200 --> 00:24:07,889
is all the packages specifically that it

00:24:06,210 --> 00:24:09,389
found we don't dump the full file system

00:24:07,889 --> 00:24:11,399
yet that's a little little too verbose

00:24:09,389 --> 00:24:12,869
for most workflows the list of

00:24:11,399 --> 00:24:14,460
vulnerabilities and the output of the

00:24:12,869 --> 00:24:16,499
policy check and the intent here is that

00:24:14,460 --> 00:24:18,840
you can use these downstream in your

00:24:16,499 --> 00:24:20,940
actions workflow to do other logic maybe

00:24:18,840 --> 00:24:22,409
you want to file an issue because of

00:24:20,940 --> 00:24:23,999
some output or you want to initiate a

00:24:22,409 --> 00:24:25,440
different kind of deployment push it to

00:24:23,999 --> 00:24:28,169
a quarantine or push it to a staging

00:24:25,440 --> 00:24:30,570
environment those kind of things and as

00:24:28,169 --> 00:24:32,639
an example of the scan action output

00:24:30,570 --> 00:24:34,859
itself I've included this is just a

00:24:32,639 --> 00:24:36,659
snippet out of one of the actual builds

00:24:34,859 --> 00:24:39,179
and this is where the audit ability

00:24:36,659 --> 00:24:40,289
comes in here we can see that that at

00:24:39,179 --> 00:24:41,970
the top we actually have the image

00:24:40,289 --> 00:24:43,320
digest that was built so you can trace

00:24:41,970 --> 00:24:44,370
that through your system we have a

00:24:43,320 --> 00:24:46,140
status

00:24:44,370 --> 00:24:48,420
which is passed here and then actually

00:24:46,140 --> 00:24:50,250
showing the kind of output of each of

00:24:48,420 --> 00:24:52,830
the policy rules organized here by this

00:24:50,250 --> 00:24:54,420
gate and trigger and then some detail so

00:24:52,830 --> 00:24:56,160
with this particular output is showing

00:24:54,420 --> 00:24:57,960
us is that one of our metadata checks

00:24:56,160 --> 00:25:00,960
has raised a warning that your

00:24:57,960 --> 00:25:02,190
dockerfile looks like it's indicating

00:25:00,960 --> 00:25:04,530
that the container should run as root

00:25:02,190 --> 00:25:06,120
and that's generally considered against

00:25:04,530 --> 00:25:09,570
best practice we want to run as non-root

00:25:06,120 --> 00:25:11,730
so that's that's an example the default

00:25:09,570 --> 00:25:13,770
policy that we include with the action

00:25:11,730 --> 00:25:15,690
will fail on critical and high

00:25:13,770 --> 00:25:17,130
vulnerabilities with fixes available so

00:25:15,690 --> 00:25:18,390
again it's it's things that you can take

00:25:17,130 --> 00:25:20,960
action on directly and immediately

00:25:18,390 --> 00:25:24,390
without a lot of noise of course you can

00:25:20,960 --> 00:25:26,309
you can expand this and customize it as

00:25:24,390 --> 00:25:28,080
much as you need to later on and it will

00:25:26,309 --> 00:25:30,059
give you warnings for dockerfile best

00:25:28,080 --> 00:25:32,100
practices such as the the one we just

00:25:30,059 --> 00:25:34,320
saw around the non root but also for

00:25:32,100 --> 00:25:35,610
missing health checks or if it finds

00:25:34,320 --> 00:25:38,010
anything in the container that look like

00:25:35,610 --> 00:25:39,510
secrets so now to show us how to

00:25:38,010 --> 00:25:42,179
actually add the action in your workflow

00:25:39,510 --> 00:25:45,690
I'll hand it over to Steve cool play cue

00:25:42,179 --> 00:25:49,710
Zak so that was quite an education for

00:25:45,690 --> 00:25:53,309
me and I think I want to incorporate

00:25:49,710 --> 00:25:55,679
this new capability into my workflow to

00:25:53,309 --> 00:25:58,260
get a more secure development process

00:25:55,679 --> 00:26:00,240
through policy and automation so I found

00:25:58,260 --> 00:26:04,590
the action here on github market place

00:26:00,240 --> 00:26:06,150
the anchor scan action and I want to

00:26:04,590 --> 00:26:07,860
definitely incorporate this get the

00:26:06,150 --> 00:26:11,340
additional analysis and have added

00:26:07,860 --> 00:26:13,800
security in in added sorry confidence in

00:26:11,340 --> 00:26:15,090
the security of my releases so all

00:26:13,800 --> 00:26:17,309
that's required here is to grab the

00:26:15,090 --> 00:26:20,790
latest version and there's a Hamel

00:26:17,309 --> 00:26:23,790
snippet here that I can just copy grab

00:26:20,790 --> 00:26:28,160
that and paste it in as a new step to my

00:26:23,790 --> 00:26:31,260
existing workflow so let's grab that and

00:26:28,160 --> 00:26:34,440
actually committed this earlier you can

00:26:31,260 --> 00:26:39,630
see it here the the scan action that

00:26:34,440 --> 00:26:43,260
I've added in between my build step and

00:26:39,630 --> 00:26:46,980
my deploy step so after a successful

00:26:43,260 --> 00:26:49,620
build we'll do a scan of the image I'm

00:26:46,980 --> 00:26:52,140
using the latest version of the action

00:26:49,620 --> 00:26:54,060
here we're passing in the image

00:26:52,140 --> 00:26:58,050
reference which is required so that the

00:26:54,060 --> 00:27:00,900
action can actually inspect it I want to

00:26:58,050 --> 00:27:03,360
set the fail build option to true so if

00:27:00,900 --> 00:27:05,460
there are any policy violations then

00:27:03,360 --> 00:27:08,070
that does actually prevent the pull

00:27:05,460 --> 00:27:10,470
request from merging and also I'm

00:27:08,070 --> 00:27:12,720
passing in the path to my dacha file so

00:27:10,470 --> 00:27:16,710
we can do an analysis on the dock file

00:27:12,720 --> 00:27:18,750
as well so everything else is the same

00:27:16,710 --> 00:27:21,270
as before the only thing that we've

00:27:18,750 --> 00:27:25,560
added here is this additional scan image

00:27:21,270 --> 00:27:28,170
step so here's a previous run against

00:27:25,560 --> 00:27:31,590
the code that's currently on master and

00:27:28,170 --> 00:27:34,550
we can see everything is green as it was

00:27:31,590 --> 00:27:36,600
before but it looks like so caching

00:27:34,550 --> 00:27:39,030
installing testing the order at the

00:27:36,600 --> 00:27:43,290
build is all green but it does look like

00:27:39,030 --> 00:27:46,200
the scan image has reported a policy

00:27:43,290 --> 00:27:49,950
violation which is unfortunate so let's

00:27:46,200 --> 00:27:52,770
jump in and see what it found so we can

00:27:49,950 --> 00:27:55,050
see and the annotation there's a failed

00:27:52,770 --> 00:27:57,350
policy evaluation and then if we jump

00:27:55,050 --> 00:28:00,090
down and expand the details here and

00:27:57,350 --> 00:28:01,470
just take a look it looks like there

00:28:00,090 --> 00:28:03,210
were are a couple of high

00:28:01,470 --> 00:28:05,130
vulnerabilities which were missed before

00:28:03,210 --> 00:28:07,980
and it looks like there are some

00:28:05,130 --> 00:28:09,860
operating system packages that contain

00:28:07,980 --> 00:28:12,450
some vulnerabilities which is

00:28:09,860 --> 00:28:13,860
unfortunate and also we can see that

00:28:12,450 --> 00:28:17,240
there are some warnings as well from our

00:28:13,860 --> 00:28:20,220
dhaka files so we're using the root user

00:28:17,240 --> 00:28:21,690
so yeah that that's unfortunate but at

00:28:20,220 --> 00:28:23,130
least I do have the confidence now that

00:28:21,690 --> 00:28:26,550
we can catch these earlier in our

00:28:23,130 --> 00:28:30,420
release process and also generated from

00:28:26,550 --> 00:28:32,370
the action we have a couple of outputs

00:28:30,420 --> 00:28:34,590
are quite useful we can see them at the

00:28:32,370 --> 00:28:37,500
bottom there so we have this bill of

00:28:34,590 --> 00:28:38,820
materials which is a JSON report of kind

00:28:37,500 --> 00:28:41,370
of a list of everything that's included

00:28:38,820 --> 00:28:43,350
in my image and then our list of

00:28:41,370 --> 00:28:45,270
vulnerabilities and also that policy

00:28:43,350 --> 00:28:47,580
check fail so it's great that these are

00:28:45,270 --> 00:28:48,960
exposed as outputs by my action that

00:28:47,580 --> 00:28:51,240
means they can be easily consumed

00:28:48,960 --> 00:28:55,260
downstream and we could produce further

00:28:51,240 --> 00:28:56,880
reporting on top of that but for now I

00:28:55,260 --> 00:28:58,830
think what I want to do because my

00:28:56,880 --> 00:29:01,470
marketing team is getting a little

00:28:58,830 --> 00:29:03,780
panicky now I think what I want to do is

00:29:01,470 --> 00:29:07,470
just try and address this vulnerability

00:29:03,780 --> 00:29:11,360
to see if we can get a pass here so

00:29:07,470 --> 00:29:13,700
let's see if we can do that I have

00:29:11,360 --> 00:29:16,730
a pull request as before that's that

00:29:13,700 --> 00:29:18,200
I've started here I've I've got a single

00:29:16,730 --> 00:29:19,850
commit on this pull request at the

00:29:18,200 --> 00:29:22,460
moment it's just an empty commit that I

00:29:19,850 --> 00:29:25,460
used to just trigger a rebuild and we

00:29:22,460 --> 00:29:27,820
can see that that is also failing and

00:29:25,460 --> 00:29:30,440
now if I scroll further down then

00:29:27,820 --> 00:29:33,620
because the CI is failing I'm actually

00:29:30,440 --> 00:29:35,150
blocked right now from merging this pull

00:29:33,620 --> 00:29:38,179
request which is actually kind of what

00:29:35,150 --> 00:29:40,220
we want wish I had this before but let's

00:29:38,179 --> 00:29:44,809
see if we can fix this so I'm going to

00:29:40,220 --> 00:29:46,220
jump into my branch here and I think a

00:29:44,809 --> 00:29:47,780
sensible place to start would be the

00:29:46,220 --> 00:29:50,809
dockerfile so I'm going to open that up

00:29:47,780 --> 00:29:52,940
and I see one of the first thing that

00:29:50,809 --> 00:29:55,280
jumps out at me is that I'm building on

00:29:52,940 --> 00:29:58,130
top of this node eight Alpine base image

00:29:55,280 --> 00:30:00,679
but I don't actually update any of the

00:29:58,130 --> 00:30:02,570
software packages that are on that image

00:30:00,679 --> 00:30:04,130
so that seems like some some low-hanging

00:30:02,570 --> 00:30:08,150
fruit there I think I'm going to start

00:30:04,130 --> 00:30:11,120
there so it's edit this file and because

00:30:08,150 --> 00:30:13,220
this is an Alpine based image to update

00:30:11,120 --> 00:30:16,130
there I just need to run a command which

00:30:13,220 --> 00:30:21,110
is the 8 using apk so let's run apk

00:30:16,130 --> 00:30:24,380
 type Thank You APK update and apk

00:30:21,110 --> 00:30:28,090
upgrade is the cart command we want to

00:30:24,380 --> 00:30:31,130
run so just check that looks good and

00:30:28,090 --> 00:30:33,410
yep we want to bake that bake that in

00:30:31,130 --> 00:30:35,179
now to our container image so let's

00:30:33,410 --> 00:30:37,250
commit that and I'll commit it directly

00:30:35,179 --> 00:30:40,370
back to that address security

00:30:37,250 --> 00:30:42,290
vulnerability branch so let's commit

00:30:40,370 --> 00:30:46,250
that and jump back to our pull request

00:30:42,290 --> 00:30:48,890
and there's our new commit saying update

00:30:46,250 --> 00:30:52,070
docker file and again this is going to

00:30:48,890 --> 00:30:54,530
trigger our CI process which is in the

00:30:52,070 --> 00:30:57,500
queued state so let's jump into the

00:30:54,530 --> 00:31:00,350
details and see how this is going so

00:30:57,500 --> 00:31:01,820
because this our time is precious I'm

00:31:00,350 --> 00:31:04,460
going to temporarily suspend the

00:31:01,820 --> 00:31:06,440
constraints of time and space and we're

00:31:04,460 --> 00:31:09,710
gonna jump through some of this stuff so

00:31:06,440 --> 00:31:12,950
that audit has passed again we are this

00:31:09,710 --> 00:31:17,480
time in the build we're updating the OS

00:31:12,950 --> 00:31:18,799
packages on their build pasts everything

00:31:17,480 --> 00:31:20,690
as green as before we can see that the

00:31:18,799 --> 00:31:22,880
caching step meant that we could skip

00:31:20,690 --> 00:31:24,740
the installation step which is nice and

00:31:22,880 --> 00:31:26,990
now that we're

00:31:24,740 --> 00:31:33,020
away and scanning our image and looking

00:31:26,990 --> 00:31:35,750
for any policy violations here okay so

00:31:33,020 --> 00:31:41,179
this time I'm pretty pleased to say that

00:31:35,750 --> 00:31:44,270
the scan has passed and I see that there

00:31:41,179 --> 00:31:47,179
are a still a few warnings in here but

00:31:44,270 --> 00:31:50,780
most importantly there are no policy

00:31:47,179 --> 00:31:52,100
violations I think you know maybe for a

00:31:50,780 --> 00:31:54,290
future version of this workflow it would

00:31:52,100 --> 00:31:56,420
be nice to maybe consume these reports

00:31:54,290 --> 00:31:58,760
consume those warnings maybe create

00:31:56,420 --> 00:32:04,429
issues in my repo so I can track those

00:31:58,760 --> 00:32:06,740
later but for now everything is green it

00:32:04,429 --> 00:32:09,410
looks beautiful right I also got a plus

00:32:06,740 --> 00:32:11,240
one from my colleague Thomas who's on

00:32:09,410 --> 00:32:13,190
the team so I'm glad someone else has

00:32:11,240 --> 00:32:15,140
also reviewed my pull request thanks

00:32:13,190 --> 00:32:17,300
Thomas I appreciate that and bad I'm not

00:32:15,140 --> 00:32:20,390
in this alone so everything is green

00:32:17,300 --> 00:32:22,970
I've got my approval from my team I've

00:32:20,390 --> 00:32:24,650
built my container I've run my tests

00:32:22,970 --> 00:32:26,870
I've done an audit and I've done a scan

00:32:24,650 --> 00:32:29,600
okay now I do actually feel really

00:32:26,870 --> 00:32:32,960
confident in this release so this time

00:32:29,600 --> 00:32:34,340
gonna merge with added confidence delete

00:32:32,960 --> 00:32:35,890
that branch again we don't need that

00:32:34,340 --> 00:32:40,700
anymore

00:32:35,890 --> 00:32:43,460
and yeah so you know I'm feeling really

00:32:40,700 --> 00:32:48,230
comfortable really confident now with

00:32:43,460 --> 00:32:51,530
this deeper insight into my release

00:32:48,230 --> 00:32:53,690
process it's still fully automated still

00:32:51,530 --> 00:32:56,090
really repeatable but it's also much

00:32:53,690 --> 00:32:57,770
much deeper before so we have confidence

00:32:56,090 --> 00:33:03,110
not only in the quality of our release

00:32:57,770 --> 00:33:07,040
but also also the security of it so just

00:33:03,110 --> 00:33:09,590
to take a step back for a moment and to

00:33:07,040 --> 00:33:12,559
review what we just saw there this is

00:33:09,590 --> 00:33:16,090
kind of a secure container workflow that

00:33:12,559 --> 00:33:19,580
we would advocate as a best practice so

00:33:16,090 --> 00:33:21,740
what we've shown is on every push and

00:33:19,580 --> 00:33:23,390
every pull request we're doing kind of

00:33:21,740 --> 00:33:26,840
our standard unit tests on the

00:33:23,390 --> 00:33:29,059
application itself but we're also doing

00:33:26,840 --> 00:33:31,610
this kind of much deeper vulnerability

00:33:29,059 --> 00:33:33,860
scan on the app dependencies we're doing

00:33:31,610 --> 00:33:36,890
a deep inspection of that container and

00:33:33,860 --> 00:33:38,690
when all of that stuff passes we can

00:33:36,890 --> 00:33:42,230
ship so even though I'm not

00:33:38,690 --> 00:33:45,560
a security expert I'm a developer I can

00:33:42,230 --> 00:33:48,050
still ship with confidence and with high

00:33:45,560 --> 00:33:50,810
velocity be confident in the security of

00:33:48,050 --> 00:33:54,680
my release and the quality thanks to the

00:33:50,810 --> 00:33:57,380
ankle scan action and github actions and

00:33:54,680 --> 00:34:00,290
just to recap how to grab this it's a

00:33:57,380 --> 00:34:02,060
simple three-step process navigate to

00:34:00,290 --> 00:34:05,090
get a marketplace that's github.com

00:34:02,060 --> 00:34:09,470
stash marketplace use the search there

00:34:05,090 --> 00:34:12,110
for Angkor and you want to add the ankle

00:34:09,470 --> 00:34:14,170
scan action step to your workflow like

00:34:12,110 --> 00:34:17,300
we showed you it's just a matter of

00:34:14,170 --> 00:34:22,730
copying the Yama's Nippert and adding it

00:34:17,300 --> 00:34:24,830
as a step to your workflow great thanks

00:34:22,730 --> 00:34:27,350
Steve so for more information on Angkor

00:34:24,830 --> 00:34:28,760
you can find us at the link above check

00:34:27,350 --> 00:34:30,770
out more information on the github

00:34:28,760 --> 00:34:32,270
actions for for more interesting and

00:34:30,770 --> 00:34:34,430
sophisticated things you can do in your

00:34:32,270 --> 00:34:36,200
workflows and if you want to engage us

00:34:34,430 --> 00:34:38,060
for the container scan action itself

00:34:36,200 --> 00:34:40,400
that's also open source and you can find

00:34:38,060 --> 00:34:42,080
that on github as well in the

00:34:40,400 --> 00:34:45,590
marketplace which will then also link to

00:34:42,080 --> 00:34:49,220
the actual source so check us out there

00:34:45,590 --> 00:34:51,050
and or find us after the talk cool that

00:34:49,220 --> 00:34:52,850
concludes this session thanks everyone

00:34:51,050 --> 00:34:54,860
that's it thanks thanks for coming we'll

00:34:52,850 --> 00:34:56,900
be around if you want to grab us for any

00:34:54,860 --> 00:34:57,350
questions but have a great rest of the

00:34:56,900 --> 00:34:59,070
conference

00:34:57,350 --> 00:35:28,860
Thanks

00:34:59,070 --> 00:35:28,860

YouTube URL: https://www.youtube.com/watch?v=bZwlD6rh3FA


