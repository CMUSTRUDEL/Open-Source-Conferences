Title: Building and deploying modern websites and apps - GitHub Universe 2019
Publication date: 2019-12-13
Playlist: GitHub Universe 2019 - Skills
Description: 
	Presented by Guillermo Rauch, CEO, ZEIT

What does it take to build and deploy a cutting-edge website? Guillermo will take you through the complexity of the modern web, whether you’re building single or multiple pages that are static or dynamic, or working on the frontend or backend with serverless lambda functions.

He’ll help you bring your app code to life with preview deployments for every push and maximize performance and availability with a global CDN. Finally, he’ll cover how to go into production—and revert it—faster than ever before, while improving QA and testing with GitHub apps.

About GitHub Universe:
GitHub Universe is a two-day conference dedicated to the creativity and curiosity of the largest software community in the world. Sessions cover topics from team culture to open source software across industries and technologies.

For more information on GitHub Universe, check the website:
https://githubuniverse.com
Captions: 
	00:00:00,680 --> 00:00:18,929
[Music]

00:00:19,859 --> 00:00:27,400
so for my presentation today I'm gonna

00:00:24,220 --> 00:00:30,039
talk about briefly about the industry

00:00:27,400 --> 00:00:32,470
trends that we're seeing that are

00:00:30,039 --> 00:00:35,730
leading to better ways to develop deploy

00:00:32,470 --> 00:00:38,589
and scale websites and applications

00:00:35,730 --> 00:00:42,040
followed by what are the best practices

00:00:38,589 --> 00:00:43,780
that we've learned followed by what are

00:00:42,040 --> 00:00:46,180
the best ways to use github in

00:00:43,780 --> 00:00:47,290
combination with our deployment

00:00:46,180 --> 00:00:50,350
technology and our development

00:00:47,290 --> 00:00:53,770
technology to make apps that are more

00:00:50,350 --> 00:00:57,430
efficient more correct and are faster in

00:00:53,770 --> 00:01:00,070
every possible way a little bit about me

00:00:57,430 --> 00:01:03,399
some of you and recognized so we know

00:01:00,070 --> 00:01:07,060
each other my background is in front-end

00:01:03,399 --> 00:01:08,679
development back in 2007 I got started

00:01:07,060 --> 00:01:12,490
with a project called mootools which was

00:01:08,679 --> 00:01:14,950
kind of the spiritual predecessor to

00:01:12,490 --> 00:01:16,840
react in many ways mootools was a

00:01:14,950 --> 00:01:20,710
project that was early on adopted by

00:01:16,840 --> 00:01:23,350
Facebook that later on became fbj us and

00:01:20,710 --> 00:01:24,790
the rest is history one part of that

00:01:23,350 --> 00:01:29,320
history that is really interesting

00:01:24,790 --> 00:01:31,450
mootools overrode prototype dot flatten

00:01:29,320 --> 00:01:33,790
and then the web could never use it

00:01:31,450 --> 00:01:36,909
again and that led to a big discussion

00:01:33,790 --> 00:01:38,470
over the damage that mootools did but

00:01:36,909 --> 00:01:41,290
overall it was a really great experience

00:01:38,470 --> 00:01:43,360
that led me into this path of JavaScript

00:01:41,290 --> 00:01:45,399
and front-end development I spent some

00:01:43,360 --> 00:01:48,040
time creating other projects REO and

00:01:45,399 --> 00:01:51,670
Mongoose later on a focus on this idea

00:01:48,040 --> 00:01:53,950
of developer experience how can we build

00:01:51,670 --> 00:01:57,130
the best developer experiences to build

00:01:53,950 --> 00:02:01,090
great websites and applications as a

00:01:57,130 --> 00:02:04,299
company site we started in 2016 with a

00:02:01,090 --> 00:02:07,329
deployment platform and later on a way

00:02:04,299 --> 00:02:11,110
of creating really slick really easily

00:02:07,329 --> 00:02:14,350
react applications called next yes this

00:02:11,110 --> 00:02:17,410
react framework kind of pioneered this

00:02:14,350 --> 00:02:20,140
idea of zero config development we

00:02:17,410 --> 00:02:21,640
pioneered this idea that the file system

00:02:20,140 --> 00:02:23,049
should kind of work like PHP and it

00:02:21,640 --> 00:02:24,820
should be very easy to just get started

00:02:23,049 --> 00:02:26,830
put a bunch of files inside with a bunch

00:02:24,820 --> 00:02:28,989
of components inside and off to the

00:02:26,830 --> 00:02:32,319
races we got it started with this idea

00:02:28,989 --> 00:02:34,959
of empowering developers to do

00:02:32,319 --> 00:02:36,670
really fast applications and one of the

00:02:34,959 --> 00:02:39,489
techniques that we sort of used as a

00:02:36,670 --> 00:02:42,219
default was server rendering and very

00:02:39,489 --> 00:02:44,019
importantly we didn't we didn't think

00:02:42,219 --> 00:02:46,420
that the web and the applications and

00:02:44,019 --> 00:02:49,150
websites that you'd build would be just

00:02:46,420 --> 00:02:52,389
a single page and we kind of put forward

00:02:49,150 --> 00:02:55,150
this idea that your project scales by

00:02:52,389 --> 00:02:57,129
its introducing more and more pages so

00:02:55,150 --> 00:02:58,629
instead of single page applications we

00:02:57,129 --> 00:03:01,989
kind of introduced the idea of multi

00:02:58,629 --> 00:03:03,430
page applications in 2018 we created a

00:03:01,989 --> 00:03:06,069
new deployment platform and it was based

00:03:03,430 --> 00:03:08,980
around this idea of static hosting and

00:03:06,069 --> 00:03:11,109
serverless we found that the best way to

00:03:08,980 --> 00:03:14,260
scale your site's and applications is to

00:03:11,109 --> 00:03:18,549
have no state whatsoever in terms of a

00:03:14,260 --> 00:03:21,189
server they'd have to maintain and in

00:03:18,549 --> 00:03:23,319
2019 we've made a very significant

00:03:21,189 --> 00:03:26,049
significant progress in growing at this

00:03:23,319 --> 00:03:29,099
technology a few days ago we announced

00:03:26,049 --> 00:03:32,079
our collaboration with Google Chrome and

00:03:29,099 --> 00:03:34,959
part of this has been the idea that in

00:03:32,079 --> 00:03:37,120
order to make react faster at scale we

00:03:34,959 --> 00:03:39,669
have to all work together on marrying

00:03:37,120 --> 00:03:44,109
developer experience with great end-user

00:03:39,669 --> 00:03:46,720
performance we're also introducing this

00:03:44,109 --> 00:03:49,780
idea of a meta or hybrid framework where

00:03:46,720 --> 00:03:51,790
you are in charge of how that page that

00:03:49,780 --> 00:03:53,859
you are building on top of gets rendered

00:03:51,790 --> 00:03:55,689
whether it's a static rendering or

00:03:53,859 --> 00:03:58,389
static site generation or server

00:03:55,689 --> 00:04:02,319
rendering all in one cohesive experience

00:03:58,389 --> 00:04:04,780
and where does all sort of stem from

00:04:02,319 --> 00:04:07,810
this is stems from an observation that

00:04:04,780 --> 00:04:10,989
we've made that the industry at large is

00:04:07,810 --> 00:04:12,819
changing quite dramatically so we kind

00:04:10,989 --> 00:04:15,939
of started with servers a bunch of years

00:04:12,819 --> 00:04:18,759
ago and really in the indie industry

00:04:15,939 --> 00:04:20,530
itself the idea of creating a server to

00:04:18,759 --> 00:04:22,690
get it started with building a website

00:04:20,530 --> 00:04:25,509
or building a web application it's a

00:04:22,690 --> 00:04:27,099
still a pretty pervasive idea but what

00:04:25,509 --> 00:04:29,919
we're seeing is sort of this transition

00:04:27,099 --> 00:04:31,900
into server less if you're a front-end

00:04:29,919 --> 00:04:34,180
developer you don't want to deal with

00:04:31,900 --> 00:04:36,310
creating clusters and containers even

00:04:34,180 --> 00:04:37,900
though the parallel track someone else

00:04:36,310 --> 00:04:40,270
in this conference is talking about

00:04:37,900 --> 00:04:42,729
containers we think that the best way to

00:04:40,270 --> 00:04:45,400
empower the developer that is kind of

00:04:42,729 --> 00:04:47,580
working on the last mile on the pro

00:04:45,400 --> 00:04:49,750
is to actually not worry about servers

00:04:47,580 --> 00:04:52,780
the transition that we're seeing as well

00:04:49,750 --> 00:04:55,389
as from the data center to a global edge

00:04:52,780 --> 00:04:56,680
network so when you get rid of all the

00:04:55,389 --> 00:04:59,229
server so you have this tremendous

00:04:56,680 --> 00:05:02,110
advantage when it comes to application

00:04:59,229 --> 00:05:05,320
delivery where if you export your

00:05:02,110 --> 00:05:07,600
project you can put it oddly at the edge

00:05:05,320 --> 00:05:09,389
automatically so there's no single

00:05:07,600 --> 00:05:12,610
location that you're kind of bound to

00:05:09,389 --> 00:05:15,370
broadly as well with sort of react and

00:05:12,610 --> 00:05:16,900
next is and view and svelte and web

00:05:15,370 --> 00:05:19,780
components we're seeing this transition

00:05:16,900 --> 00:05:22,180
away from the modality that frameworks

00:05:19,780 --> 00:05:24,460
like free at rails introduced where you

00:05:22,180 --> 00:05:26,380
would base everything on templates and

00:05:24,460 --> 00:05:28,300
we're seeing the emergence of components

00:05:26,380 --> 00:05:30,960
as sort of the primitive of the entire

00:05:28,300 --> 00:05:33,130
web components that are highly reusable

00:05:30,960 --> 00:05:34,990
components that are well documented

00:05:33,130 --> 00:05:37,870
components that follow a style guide

00:05:34,990 --> 00:05:40,680
components that have a semantic meaning

00:05:37,870 --> 00:05:42,880
as part of broader design systems and

00:05:40,680 --> 00:05:44,770
even more interestingly we're starting

00:05:42,880 --> 00:05:47,710
to approach this idea that we're

00:05:44,770 --> 00:05:50,080
transitioning away even from code to I'm

00:05:47,710 --> 00:05:53,050
gonna use a buzzword here low code and

00:05:50,080 --> 00:05:56,200
perhaps even later on no code negative

00:05:53,050 --> 00:05:58,510
amounts of code and I think to summarize

00:05:56,200 --> 00:06:01,690
really what we're seeing is a transition

00:05:58,510 --> 00:06:03,580
away from the back end and a transition

00:06:01,690 --> 00:06:05,919
towards empowering the front end

00:06:03,580 --> 00:06:07,840
developer and when I was referring to

00:06:05,919 --> 00:06:08,889
this idea of code and no code I think

00:06:07,840 --> 00:06:12,430
something that's interesting is that

00:06:08,889 --> 00:06:14,889
we're decisively focusing less and less

00:06:12,430 --> 00:06:17,620
and less in abstraction and more and on

00:06:14,889 --> 00:06:19,599
interaction for example when you build a

00:06:17,620 --> 00:06:21,880
a design system built of components

00:06:19,599 --> 00:06:24,789
you're essentially focusing a lot more

00:06:21,880 --> 00:06:27,760
on the product rather than the

00:06:24,789 --> 00:06:30,910
underlying abstraction or code or even

00:06:27,760 --> 00:06:33,880
code ifs and and and and get and all

00:06:30,910 --> 00:06:36,250
that just kidding so we have this idea

00:06:33,880 --> 00:06:39,580
that the entry point to the entire

00:06:36,250 --> 00:06:41,770
universe is the web browser right and

00:06:39,580 --> 00:06:44,410
the web browser is up obviously showing

00:06:41,770 --> 00:06:47,260
up in other places like electron is

00:06:44,410 --> 00:06:49,419
showing up inside native apps is showing

00:06:47,260 --> 00:06:52,000
up everywhere but the front is sort of

00:06:49,419 --> 00:06:55,390
this idea that there's a URL you open it

00:06:52,000 --> 00:06:58,780
and then you have broad access to a wide

00:06:55,390 --> 00:06:59,169
range of services some services are

00:06:58,780 --> 00:07:01,509
maintained

00:06:59,169 --> 00:07:03,969
by yourself or your company where you

00:07:01,509 --> 00:07:06,370
have an API such as a REST API or right

00:07:03,969 --> 00:07:09,180
or a graphical API but broadly we're

00:07:06,370 --> 00:07:11,469
also seeing the transition towards

00:07:09,180 --> 00:07:14,229
deferring some of the work that you

00:07:11,469 --> 00:07:17,919
would have previously done yourself to

00:07:14,229 --> 00:07:19,479
dedicated powerful very optimal services

00:07:17,919 --> 00:07:21,580
so I like to talk about for example

00:07:19,479 --> 00:07:23,919
headless CMS is where they're providing

00:07:21,580 --> 00:07:25,419
a service that you can query directly

00:07:23,919 --> 00:07:29,020
from the front-end or sometimes at build

00:07:25,419 --> 00:07:31,300
time that is entirely separate and

00:07:29,020 --> 00:07:34,990
independently scale and maintain and you

00:07:31,300 --> 00:07:36,099
operate - with it with an API and I'd

00:07:34,990 --> 00:07:38,919
like to talk about content management

00:07:36,099 --> 00:07:41,080
because using the sort of metaphor of

00:07:38,919 --> 00:07:44,139
Ruby on Rails that I was talking about

00:07:41,080 --> 00:07:47,080
earlier where it's more server centric

00:07:44,139 --> 00:07:50,259
it's it's more about scaffolding kind of

00:07:47,080 --> 00:07:53,860
everything from scratch one of the sort

00:07:50,259 --> 00:07:56,800
of beginning of of how he was introduced

00:07:53,860 --> 00:08:00,610
to the world it was a screencast by DHH

00:07:56,800 --> 00:08:02,259
on creating a blog and throughout the

00:08:00,610 --> 00:08:04,750
years a lot of people have asked me like

00:08:02,259 --> 00:08:07,569
where is the Ruby on Rails of JavaScript

00:08:04,750 --> 00:08:09,129
and my response is the Ruby on Rails of

00:08:07,569 --> 00:08:11,110
JavaScript is probably not gonna look

00:08:09,129 --> 00:08:12,939
like Ruby on Rails because instead of

00:08:11,110 --> 00:08:15,129
for example scaffolding your own blog

00:08:12,939 --> 00:08:17,669
system on top of your own database

00:08:15,129 --> 00:08:19,870
you're likely deferring that word to

00:08:17,669 --> 00:08:22,810
fantastic content management service

00:08:19,870 --> 00:08:25,659
like content fall or even wordpress is

00:08:22,810 --> 00:08:27,610
with a headless API and we're seeing the

00:08:25,659 --> 00:08:29,379
same with persistence with famously

00:08:27,610 --> 00:08:31,330
firebase a few years ago that gave us

00:08:29,379 --> 00:08:33,849
this sort of introduction to being able

00:08:31,330 --> 00:08:36,789
to talk to a data service directly from

00:08:33,849 --> 00:08:40,479
the front end authentication services as

00:08:36,789 --> 00:08:43,959
well such as osteo or firebase login or

00:08:40,479 --> 00:08:45,100
kognito or fast where again the

00:08:43,959 --> 00:08:48,040
front-end developer is sort of in charge

00:08:45,100 --> 00:08:49,630
of deciding what the UI looks like and

00:08:48,040 --> 00:08:51,640
then deferring all the hard work to an

00:08:49,630 --> 00:08:54,040
authentication service that has given

00:08:51,640 --> 00:08:56,230
you an API and ensured that the security

00:08:54,040 --> 00:08:58,630
service of your project is preserved as

00:08:56,230 --> 00:09:01,269
well as real time services payments

00:08:58,630 --> 00:09:04,720
search everything is sort of becoming a

00:09:01,269 --> 00:09:07,630
service and this could seem in on some

00:09:04,720 --> 00:09:09,310
level like oh all the work it's done

00:09:07,630 --> 00:09:11,279
there's nothing left for me to do but

00:09:09,310 --> 00:09:12,430
the other side that we see is that is

00:09:11,279 --> 00:09:14,620
extremely

00:09:12,430 --> 00:09:16,270
empowering to this developer that is

00:09:14,620 --> 00:09:17,740
looking at everything from the lens of

00:09:16,270 --> 00:09:20,290
the web browser because now they have

00:09:17,740 --> 00:09:22,600
the ability that to completely sidestep

00:09:20,290 --> 00:09:25,149
and heavily paralyze the access to

00:09:22,600 --> 00:09:27,430
services and we're seeing this show up

00:09:25,149 --> 00:09:29,470
in the data as well right so if you go

00:09:27,430 --> 00:09:31,779
to stack overflow the trends have

00:09:29,470 --> 00:09:34,959
changed dramatically everyone used to

00:09:31,779 --> 00:09:37,450
seek this full stack server in front and

00:09:34,959 --> 00:09:40,180
combined framework and now it's all

00:09:37,450 --> 00:09:41,920
conversations surrounding around ok how

00:09:40,180 --> 00:09:43,959
do you use react to make an API call to

00:09:41,920 --> 00:09:46,660
this how do I combine view with graph QL

00:09:43,959 --> 00:09:49,360
so the conversation global is also being

00:09:46,660 --> 00:09:50,950
delineated in this way and again we're

00:09:49,360 --> 00:09:54,850
seeing it in the data in a very very

00:09:50,950 --> 00:09:57,190
dramatic way so the idea that kind of

00:09:54,850 --> 00:10:00,130
makes this happen is that you can use a

00:09:57,190 --> 00:10:01,600
lot of JavaScript to sort of whereas you

00:10:00,130 --> 00:10:03,790
would have use it on the backend you can

00:10:01,600 --> 00:10:05,950
now use it on the front-end you can

00:10:03,790 --> 00:10:07,810
query API is whether you do it at build

00:10:05,950 --> 00:10:09,310
them or on the front-end and there's

00:10:07,810 --> 00:10:12,279
also this sort of entry point that is a

00:10:09,310 --> 00:10:13,240
markup of your project and what's

00:10:12,279 --> 00:10:15,190
interesting from a scalability

00:10:13,240 --> 00:10:18,010
standpoint is that two out of those this

00:10:15,190 --> 00:10:21,150
three are naturally serverless right so

00:10:18,010 --> 00:10:23,650
like you can build out two of the third

00:10:21,150 --> 00:10:25,750
two-thirds of this stack completely

00:10:23,650 --> 00:10:28,600
statically and the rest you can define

00:10:25,750 --> 00:10:30,459
you can defer two ways of scaling and

00:10:28,600 --> 00:10:33,130
ways of executing code in a secure

00:10:30,459 --> 00:10:35,080
manner without using servers so this

00:10:33,130 --> 00:10:37,720
translates into a world where again the

00:10:35,080 --> 00:10:40,300
front-end developer not only is skipping

00:10:37,720 --> 00:10:41,980
the idea of setting up a server there is

00:10:40,300 --> 00:10:44,650
no need there's absolutely no

00:10:41,980 --> 00:10:46,810
requirement and there's two examples

00:10:44,650 --> 00:10:48,370
that I'd like to talk about here there's

00:10:46,810 --> 00:10:50,770
probably in this room two types of

00:10:48,370 --> 00:10:52,870
people those of you that spend a lot of

00:10:50,770 --> 00:10:54,310
time on Twitter and those of you guys

00:10:52,870 --> 00:10:56,470
spend a lot of time in LinkedIn in

00:10:54,310 --> 00:10:57,670
hybrids that spend a lot like me they

00:10:56,470 --> 00:10:59,470
spend a lot of time in LinkedIn and

00:10:57,670 --> 00:11:01,270
Twitter and don't do any work at all

00:10:59,470 --> 00:11:02,800
during the day so what's interesting

00:11:01,270 --> 00:11:05,709
about these two applications is that

00:11:02,800 --> 00:11:08,350
they recently completely revamped

00:11:05,709 --> 00:11:11,200
themselves right so like Twitter started

00:11:08,350 --> 00:11:13,810
as a project of being a mobile website

00:11:11,200 --> 00:11:15,880
and then is sort of succeeded very

00:11:13,810 --> 00:11:18,700
organically and it can kind of became

00:11:15,880 --> 00:11:20,410
twitter.com and Linkedin it was kind of

00:11:18,700 --> 00:11:22,180
a similar situation but what's

00:11:20,410 --> 00:11:24,910
interesting about these two apps is that

00:11:22,180 --> 00:11:26,110
they both boot up to just a static

00:11:24,910 --> 00:11:28,300
markup when

00:11:26,110 --> 00:11:30,010
you launched this apps they kind of are

00:11:28,300 --> 00:11:32,560
behaving more like their iOS

00:11:30,010 --> 00:11:35,320
counterparts you boot up to them and you

00:11:32,560 --> 00:11:37,209
see the Twitter bird and then you see a

00:11:35,320 --> 00:11:39,880
skeleton and then you see data being

00:11:37,209 --> 00:11:42,070
loaded in parallel which as you imagine

00:11:39,880 --> 00:11:44,019
they're acquiring their own API but in

00:11:42,070 --> 00:11:45,610
in a modern application you could put in

00:11:44,019 --> 00:11:50,230
multiple API so I get mentioned kind of

00:11:45,610 --> 00:11:52,720
concurrently so this to this to you why

00:11:50,230 --> 00:11:55,630
primitives are signaling to me that

00:11:52,720 --> 00:11:57,670
they're moving on to adopting this model

00:11:55,630 --> 00:11:59,680
at a scale that is not just you know

00:11:57,670 --> 00:12:01,600
small projects but we're seeing even

00:11:59,680 --> 00:12:03,100
succeed at the very high levels of you

00:12:01,600 --> 00:12:06,490
know consumer websites and applications

00:12:03,100 --> 00:12:08,500
and what's behind this is that teams

00:12:06,490 --> 00:12:11,440
inside this companies were able to

00:12:08,500 --> 00:12:14,380
completely reinvent this experiences by

00:12:11,440 --> 00:12:16,779
just piggybacking entirely on powerful

00:12:14,380 --> 00:12:19,959
front and frameworks like in this case

00:12:16,779 --> 00:12:21,940
amber and I believe create react app and

00:12:19,959 --> 00:12:23,680
the other interesting thing we've

00:12:21,940 --> 00:12:25,959
appreciated from these experiences is

00:12:23,680 --> 00:12:27,850
that it happened very quickly and it

00:12:25,959 --> 00:12:29,230
happened with not a lot of people and it

00:12:27,850 --> 00:12:31,630
specifically it happened with people

00:12:29,230 --> 00:12:33,699
from what we know that were very close

00:12:31,630 --> 00:12:36,490
to the user people that were very close

00:12:33,699 --> 00:12:40,600
to caring about design and components

00:12:36,490 --> 00:12:42,760
and CSS and so on so really this is

00:12:40,600 --> 00:12:46,120
really changing how we think about the

00:12:42,760 --> 00:12:47,649
entire development lifecycle from

00:12:46,120 --> 00:12:49,089
education and training is an example

00:12:47,649 --> 00:12:51,459
that I'd like to give because we're all

00:12:49,089 --> 00:12:54,730
probably here familiar with the nascent

00:12:51,459 --> 00:12:56,050
ways of learning about programming what

00:12:54,730 --> 00:12:57,880
we're seeing broadly is that if you go

00:12:56,050 --> 00:12:59,529
to a coding school today you're probably

00:12:57,880 --> 00:13:02,339
being taught a front and stack like

00:12:59,529 --> 00:13:04,420
react and redux and style components

00:13:02,339 --> 00:13:06,730
we're seeing the proliferation of

00:13:04,420 --> 00:13:10,899
developing directly in the browser right

00:13:06,730 --> 00:13:12,910
so tools like code pen or code sandbox

00:13:10,899 --> 00:13:14,649
they even bundle technologies like web

00:13:12,910 --> 00:13:17,260
pack directly in the browser so they're

00:13:14,649 --> 00:13:18,760
mixing the medium that you're using to

00:13:17,260 --> 00:13:21,310
develop with the medium that you're

00:13:18,760 --> 00:13:23,170
using to deploy or the actual

00:13:21,310 --> 00:13:25,089
application medium or even the

00:13:23,170 --> 00:13:28,060
trajectory of the web inspector that is

00:13:25,089 --> 00:13:30,820
evolving to become the tool that you're

00:13:28,060 --> 00:13:32,920
also using to edit so web inspector

00:13:30,820 --> 00:13:35,440
today has tools for even persisting CSS

00:13:32,920 --> 00:13:37,120
back to your editor and even the

00:13:35,440 --> 00:13:38,949
tutorials right so like if you compare

00:13:37,120 --> 00:13:39,740
the experience of learning any back-end

00:13:38,949 --> 00:13:43,250
language

00:13:39,740 --> 00:13:44,660
that sort of traditional native stack to

00:13:43,250 --> 00:13:46,340
the idea that you just opened web

00:13:44,660 --> 00:13:48,830
inspector you're editing the web

00:13:46,340 --> 00:13:49,970
front-end directly now I like to talk

00:13:48,830 --> 00:13:52,070
about this in the context of someone

00:13:49,970 --> 00:13:54,410
getting started but there is even an

00:13:52,070 --> 00:13:57,830
interesting aspect of that when it comes

00:13:54,410 --> 00:14:01,760
to debugging when you adopt a front-end

00:13:57,830 --> 00:14:04,490
focus stack such as this for example

00:14:01,760 --> 00:14:07,790
when an exception occurs you have one

00:14:04,490 --> 00:14:09,440
area of debugging surface to worry about

00:14:07,790 --> 00:14:11,870
you don't have sort of this duality

00:14:09,440 --> 00:14:14,300
between server and Franta to worry about

00:14:11,870 --> 00:14:16,340
you have one security model to worry

00:14:14,300 --> 00:14:18,890
about so like now all you know is that

00:14:16,340 --> 00:14:20,960
there is a bunch of static assets being

00:14:18,890 --> 00:14:23,690
shipped to a client and there are gonna

00:14:20,960 --> 00:14:25,550
be execute execute it in a safe manner

00:14:23,690 --> 00:14:27,470
and you're gonna control the

00:14:25,550 --> 00:14:30,080
authentication and a CL medium back to

00:14:27,470 --> 00:14:31,190
the server when it comes to development

00:14:30,080 --> 00:14:33,890
is what we're seeing the biggest

00:14:31,190 --> 00:14:35,900
transition of all so what next J is

00:14:33,890 --> 00:14:39,020
pioneered among other things is this

00:14:35,900 --> 00:14:41,480
idea that hot module replacement it's

00:14:39,020 --> 00:14:42,950
not something that you configure hot

00:14:41,480 --> 00:14:45,530
module replacement is something that is

00:14:42,950 --> 00:14:47,510
an invariant to this model and we're

00:14:45,530 --> 00:14:50,240
benefiting here from this ability of

00:14:47,510 --> 00:14:52,760
just shipping J's back and forth from

00:14:50,240 --> 00:14:54,770
your local environment to the browser so

00:14:52,760 --> 00:14:56,960
this quick video is a little bit of sped

00:14:54,770 --> 00:14:59,300
up but we recorded it because we wanted

00:14:56,960 --> 00:15:01,190
to show how easy we've made it

00:14:59,300 --> 00:15:04,280
specifically because of this ability to

00:15:01,190 --> 00:15:05,120
see to have this direct contact with

00:15:04,280 --> 00:15:09,170
your creation

00:15:05,120 --> 00:15:11,450
we kind of bootstrap this hacker news

00:15:09,170 --> 00:15:14,720
clone from scratch in just a few minutes

00:15:11,450 --> 00:15:17,240
and everything from CSS to your real

00:15:14,720 --> 00:15:20,720
components to the patient navigation

00:15:17,240 --> 00:15:23,000
system it's all kind of provided by by

00:15:20,720 --> 00:15:26,000
next year's for you so the development

00:15:23,000 --> 00:15:27,350
experience is drastically superior to

00:15:26,000 --> 00:15:31,430
what we've been used to with regards to

00:15:27,350 --> 00:15:33,170
like traditional server stacks when it

00:15:31,430 --> 00:15:35,030
comes to design we're seeing some of the

00:15:33,170 --> 00:15:38,120
most interesting changes as well I've

00:15:35,030 --> 00:15:39,620
recently turned my attention to a stack

00:15:38,120 --> 00:15:41,090
that is becoming really popular in

00:15:39,620 --> 00:15:43,490
combination with neck j/s which is

00:15:41,090 --> 00:15:47,030
tailwind and we kind of see the same

00:15:43,490 --> 00:15:48,320
story here not only are we targeting the

00:15:47,030 --> 00:15:51,320
browser but we're starting to develop

00:15:48,320 --> 00:15:53,660
the design develop obviously because of

00:15:51,320 --> 00:15:56,330
HMR but we're also starting to design

00:15:53,660 --> 00:15:58,130
directly in it so there's a bunch of

00:15:56,330 --> 00:15:59,420
screencaps on the web that kind of show

00:15:58,130 --> 00:16:01,610
off this idea that you started with

00:15:59,420 --> 00:16:04,190
markup you throw in a bunch of

00:16:01,610 --> 00:16:06,920
well-thought-out classes and you're

00:16:04,190 --> 00:16:09,440
practically just designing directly in

00:16:06,920 --> 00:16:11,540
the browser so this is kind of the

00:16:09,440 --> 00:16:13,430
testament to this idea of the role of

00:16:11,540 --> 00:16:15,980
the developer and the role of the design

00:16:13,430 --> 00:16:17,750
or a kind of conversion into one I think

00:16:15,980 --> 00:16:20,060
when you have the right primitives to

00:16:17,750 --> 00:16:22,400
start with combined with this front-end

00:16:20,060 --> 00:16:24,560
medium that allows you to like just see

00:16:22,400 --> 00:16:29,320
your changes reactively you're

00:16:24,560 --> 00:16:31,790
effectively designing in the browser and

00:16:29,320 --> 00:16:33,740
another close example that is the heir

00:16:31,790 --> 00:16:35,960
to github of course I think they were

00:16:33,740 --> 00:16:38,900
pioneers and this is this idea that once

00:16:35,960 --> 00:16:40,850
you've kind of determined what the

00:16:38,900 --> 00:16:43,190
guidelines are of your design you cannot

00:16:40,850 --> 00:16:44,990
come up with a design system right so

00:16:43,190 --> 00:16:47,570
not only are you able to move very

00:16:44,990 --> 00:16:49,250
quickly if you focus on front-end but if

00:16:47,570 --> 00:16:51,020
you combine a front-end that has already

00:16:49,250 --> 00:16:53,270
all these primitives that have been

00:16:51,020 --> 00:16:55,760
built up for example in the form of a

00:16:53,270 --> 00:17:00,080
reusable component system then you move

00:16:55,760 --> 00:17:03,620
even faster and they think for from our

00:17:00,080 --> 00:17:06,260
perspective we show a lot of examples

00:17:03,620 --> 00:17:08,300
such as the the next json' where if

00:17:06,260 --> 00:17:10,850
you're kind of always confined to your

00:17:08,300 --> 00:17:13,760
local computer right so in this example

00:17:10,850 --> 00:17:17,300
the first thing that happened was we

00:17:13,760 --> 00:17:20,510
boot it to like localhost 3000 let me

00:17:17,300 --> 00:17:22,250
see if the yeah so you you cannot run

00:17:20,510 --> 00:17:24,860
your local development server and you go

00:17:22,250 --> 00:17:27,949
to localhost 3000 and kind of the work

00:17:24,860 --> 00:17:29,810
gets confined to that you know simple

00:17:27,949 --> 00:17:32,870
experience of the browser and your

00:17:29,810 --> 00:17:34,370
editor but we're talking about a lot

00:17:32,870 --> 00:17:38,480
we're talking a lot about how we've

00:17:34,370 --> 00:17:40,730
really simplified the stack we have just

00:17:38,480 --> 00:17:43,040
a bunch of static acids we have jas we

00:17:40,730 --> 00:17:46,460
have CSS anything what's interesting

00:17:43,040 --> 00:17:48,860
here is that it's directly affecting how

00:17:46,460 --> 00:17:51,560
fast and how frequently we can deploy

00:17:48,860 --> 00:17:54,770
and deploy is that technology that will

00:17:51,560 --> 00:17:57,590
allow us to escape two things one is it

00:17:54,770 --> 00:17:59,720
allow us escape localhost and share our

00:17:57,590 --> 00:18:01,820
work more proactively and the other one

00:17:59,720 --> 00:18:04,100
that is particularly interesting is that

00:18:01,820 --> 00:18:06,940
it's allowing us to work more closely

00:18:04,100 --> 00:18:10,239
with the production environment

00:18:06,940 --> 00:18:12,399
so when you think about a developer that

00:18:10,239 --> 00:18:15,340
is immersed in this world of this really

00:18:12,399 --> 00:18:17,919
nice separation that for example you

00:18:15,340 --> 00:18:19,330
know having access to JavaScript HTML se

00:18:17,919 --> 00:18:21,700
it says that queries APs and the backend

00:18:19,330 --> 00:18:24,340
provides a lot of things really become

00:18:21,700 --> 00:18:26,409
completely uninteresting so even the

00:18:24,340 --> 00:18:28,570
idea of a container setting up a

00:18:26,409 --> 00:18:31,659
deployment pipeline configuring it

00:18:28,570 --> 00:18:35,320
setting up SSL it's really completely

00:18:31,659 --> 00:18:37,419
uninteresting to this profile of

00:18:35,320 --> 00:18:40,899
developer that is focused on delivering

00:18:37,419 --> 00:18:43,029
product results and I think what we've

00:18:40,899 --> 00:18:45,070
really appreciated is that this kind of

00:18:43,029 --> 00:18:47,859
profile worries a lot more about the

00:18:45,070 --> 00:18:50,590
product right so thinks about enabling

00:18:47,859 --> 00:18:53,409
or disabling features customizing the

00:18:50,590 --> 00:18:55,179
component system combining them ensuring

00:18:53,409 --> 00:18:57,879
that there are effective solutions to

00:18:55,179 --> 00:18:59,649
the customers problems performance light

00:18:57,879 --> 00:19:02,009
house audits these are this these are

00:18:59,649 --> 00:19:04,869
the concerns of this type of developer

00:19:02,009 --> 00:19:08,320
so really what we went from is this

00:19:04,869 --> 00:19:10,359
world of I had a lot of config and it

00:19:08,320 --> 00:19:12,519
had a lot of state to worry about it had

00:19:10,359 --> 00:19:14,679
a lot of clusters and containers - I

00:19:12,519 --> 00:19:16,869
don't have anything other than a URL

00:19:14,679 --> 00:19:18,789
that it kind of deploy with one command

00:19:16,869 --> 00:19:21,820
and that gives me access to a snapshot

00:19:18,789 --> 00:19:25,389
of that kind of front-end heavy work

00:19:21,820 --> 00:19:27,759
that I was doing and what's interesting

00:19:25,389 --> 00:19:29,710
as well is that one of the particular

00:19:27,759 --> 00:19:32,320
integration points of this system is the

00:19:29,710 --> 00:19:34,029
code review process right so when you

00:19:32,320 --> 00:19:36,369
first interact with this continuous

00:19:34,029 --> 00:19:38,379
deployment technology you can add it on

00:19:36,369 --> 00:19:40,090
top of your git workflow so that every

00:19:38,379 --> 00:19:42,669
push and every PR gets automatically

00:19:40,090 --> 00:19:45,639
deployed so what happens really is that

00:19:42,669 --> 00:19:47,409
we're shifting from code review to

00:19:45,639 --> 00:19:49,659
deployment preview and I think what's

00:19:47,409 --> 00:19:52,359
interesting here is that the code sort

00:19:49,659 --> 00:19:55,779
of takes a backstage to the ability to

00:19:52,359 --> 00:19:58,059
access through a URL the actual work the

00:19:55,779 --> 00:19:59,739
actual pixels the actual interactions

00:19:58,059 --> 00:20:02,739
that you've been working on

00:19:59,739 --> 00:20:05,440
so from review to preview and of course

00:20:02,739 --> 00:20:07,690
you will continue to write and read code

00:20:05,440 --> 00:20:11,830
but there is an argument to be made

00:20:07,690 --> 00:20:14,849
about being a lot less reliant on that

00:20:11,830 --> 00:20:16,960
idea of just reading a diff and then

00:20:14,849 --> 00:20:18,940
optimistically merging and hoping that

00:20:16,960 --> 00:20:20,440
you got your tests right and in fact

00:20:18,940 --> 00:20:22,630
this profoundly

00:20:20,440 --> 00:20:24,700
impacts even the way that you do tests

00:20:22,630 --> 00:20:27,460
and I'll talk about that a little bit

00:20:24,700 --> 00:20:30,850
later on so what it looks like in the

00:20:27,460 --> 00:20:33,490
context of your github system is when

00:20:30,850 --> 00:20:36,250
you install our app is this now it'll

00:20:33,490 --> 00:20:37,390
deploy it automatically every push that

00:20:36,250 --> 00:20:39,850
you made us you see on the right-hand

00:20:37,390 --> 00:20:41,290
side gets its own deployment property

00:20:39,850 --> 00:20:43,870
now what's interesting here is that

00:20:41,290 --> 00:20:46,900
we're registering a check but we're also

00:20:43,870 --> 00:20:48,790
telling github that we have a deployment

00:20:46,900 --> 00:20:50,770
and this is kind of one of the very

00:20:48,790 --> 00:20:54,520
interesting features of this system is

00:20:50,770 --> 00:20:56,980
github knows there is a deployment so

00:20:54,520 --> 00:20:59,260
I'll show you a quick demo earlier today

00:20:56,980 --> 00:21:02,170
I was on github

00:20:59,260 --> 00:21:06,160
and I was on the explore tab and I came

00:21:02,170 --> 00:21:10,630
across a very interesting project so it

00:21:06,160 --> 00:21:13,780
was a new way of creating a credit card

00:21:10,630 --> 00:21:21,280
form that was originally written in view

00:21:13,780 --> 00:21:24,700
and this woman Jasmine am if' decided

00:21:21,280 --> 00:21:26,350
I'm gonna pour it over to react and this

00:21:24,700 --> 00:21:28,540
looks great I have you know the ability

00:21:26,350 --> 00:21:29,830
to see exactly how it works but it was

00:21:28,540 --> 00:21:33,460
kind of like looking around it was like

00:21:29,830 --> 00:21:36,160
okay I would like to try this out so

00:21:33,460 --> 00:21:39,100
what we did is we told this user hey how

00:21:36,160 --> 00:21:40,630
about you deploy it right because by

00:21:39,100 --> 00:21:42,100
deploying it you now can give everyone

00:21:40,630 --> 00:21:44,010
the ability to interact directly with it

00:21:42,100 --> 00:21:46,540
and because we know it's you know a

00:21:44,010 --> 00:21:49,750
simple front-end project it should be

00:21:46,540 --> 00:21:52,030
very easy to deploy so I'm gonna go and

00:21:49,750 --> 00:21:53,290
open sort of our project creator tool

00:21:52,030 --> 00:21:56,680
here I'm gonna say I want to deploy

00:21:53,290 --> 00:21:59,530
under guillermo rauch and it's coming

00:21:56,680 --> 00:22:01,750
from this repository and then I'm gonna

00:21:59,530 --> 00:22:03,100
say that actually also want to clone it

00:22:01,750 --> 00:22:06,850
for myself and I want to create a

00:22:03,100 --> 00:22:08,290
private repo so it's gonna take all the

00:22:06,850 --> 00:22:10,180
code that was in that repo it's gonna

00:22:08,290 --> 00:22:12,190
create a variable for myself on github

00:22:10,180 --> 00:22:13,840
but obviously it's not gonna stop there

00:22:12,190 --> 00:22:15,970
what's interesting about this is okay

00:22:13,840 --> 00:22:17,800
now I have that foreign code and I want

00:22:15,970 --> 00:22:20,340
to get this URL back that allowed me to

00:22:17,800 --> 00:22:24,220
share it with everyone in the world so

00:22:20,340 --> 00:22:26,200
my project gets created and the

00:22:24,220 --> 00:22:29,410
deployment begins so what's interesting

00:22:26,200 --> 00:22:31,450
is deployment when I talked about this

00:22:29,410 --> 00:22:33,910
idea of oh there's just HTML and CSS

00:22:31,450 --> 00:22:34,300
it's kind of an overly simplistic view

00:22:33,910 --> 00:22:36,760
of too

00:22:34,300 --> 00:22:37,600
this front in the world today's front in

00:22:36,760 --> 00:22:38,620
the world's a little bit more

00:22:37,600 --> 00:22:39,910
complicated than that

00:22:38,620 --> 00:22:41,860
there is usually for example a build

00:22:39,910 --> 00:22:44,860
process right so this example is that

00:22:41,860 --> 00:22:47,590
create react app application so I'm

00:22:44,860 --> 00:22:48,760
gonna briefly show you the logs ok it's

00:22:47,590 --> 00:22:51,550
already deployed so I'm gonna show you

00:22:48,760 --> 00:22:53,650
what it looks like really quickly so

00:22:51,550 --> 00:22:55,930
instead of my gift I now can interact

00:22:53,650 --> 00:22:57,790
with it I have my deployment it has

00:22:55,930 --> 00:23:00,640
obviously its own unique URL that I can

00:22:57,790 --> 00:23:02,800
share with anyone it's live rather than

00:23:00,640 --> 00:23:05,410
you know code but what's interesting too

00:23:02,800 --> 00:23:08,530
is that the system automatically built

00:23:05,410 --> 00:23:11,920
and pushed to production the code that

00:23:08,530 --> 00:23:14,110
was already on github and I have the

00:23:11,920 --> 00:23:16,960
ability to do so not only for just this

00:23:14,110 --> 00:23:19,150
initial version which we'll call our

00:23:16,960 --> 00:23:21,820
production deployment but it can do it

00:23:19,150 --> 00:23:23,110
for every push in the future so this is

00:23:21,820 --> 00:23:24,970
where it gets even more interesting

00:23:23,110 --> 00:23:29,530
right so I mentioned earlier that I got

00:23:24,970 --> 00:23:32,080
my own copy of the repository right so I

00:23:29,530 --> 00:23:35,800
completely stole this repository is

00:23:32,080 --> 00:23:40,180
private I have the ability to animate I

00:23:35,800 --> 00:23:42,160
use a big awesome github UI here I have

00:23:40,180 --> 00:23:44,950
the ability to continue to make edits to

00:23:42,160 --> 00:23:47,410
this and without affecting production I

00:23:44,950 --> 00:23:50,850
can create this let's call it code

00:23:47,410 --> 00:23:53,440
review that is actually based on actual

00:23:50,850 --> 00:23:55,840
improvements and I apologize I can't see

00:23:53,440 --> 00:24:04,450
much so I'm gonna do an atrocity here

00:23:55,840 --> 00:24:06,250
I'm gonna add some code so the github

00:24:04,450 --> 00:24:09,040
inline editor has a very convenient

00:24:06,250 --> 00:24:11,230
feature here which is that it it could

00:24:09,040 --> 00:24:13,090
it could commit directly to my master

00:24:11,230 --> 00:24:15,190
branch but I don't even know if that

00:24:13,090 --> 00:24:17,410
looks good but instead I can propose a

00:24:15,190 --> 00:24:21,730
file change that can later on become a

00:24:17,410 --> 00:24:23,800
poor request so I now have my code

00:24:21,730 --> 00:24:24,880
change let's take a really quick look at

00:24:23,800 --> 00:24:27,250
it ok

00:24:24,880 --> 00:24:28,930
again it's code I cannot see what it

00:24:27,250 --> 00:24:31,570
looks like so let's instead create a

00:24:28,930 --> 00:24:33,820
pull request and typically here is where

00:24:31,570 --> 00:24:35,860
the workflow especially for a product

00:24:33,820 --> 00:24:38,590
focus team kind of breaks down right

00:24:35,860 --> 00:24:42,100
because ok it made a visual change to my

00:24:38,590 --> 00:24:44,880
project how come all I get is a boring

00:24:42,100 --> 00:24:47,650
code if I want to see what it looks like

00:24:44,880 --> 00:24:48,179
so as I mentioned we cannot go through

00:24:47,650 --> 00:24:50,909
the process

00:24:48,179 --> 00:24:52,440
of building and and reading your project

00:24:50,909 --> 00:24:56,759
and then we're gonna give it a unique

00:24:52,440 --> 00:24:59,009
URL so my ugly addition to these

00:24:56,759 --> 00:25:01,440
beautiful projects there and again I get

00:24:59,009 --> 00:25:04,049
this sort of unique snapshot of my front

00:25:01,440 --> 00:25:06,990
and that I can share with my team now

00:25:04,049 --> 00:25:10,169
this idea of just sharing with your team

00:25:06,990 --> 00:25:12,240
is not entirely new it really it's not

00:25:10,169 --> 00:25:14,399
entirely new this has been done before

00:25:12,240 --> 00:25:16,559
but what's happening that we're sort of

00:25:14,399 --> 00:25:19,019
seeing every day and it's becoming more

00:25:16,559 --> 00:25:20,129
obvious to us every day through multiple

00:25:19,019 --> 00:25:22,320
improvements that we've made it the

00:25:20,129 --> 00:25:26,129
underlying system is that the

00:25:22,320 --> 00:25:29,669
constraints that this has to have

00:25:26,129 --> 00:25:31,379
tremendous benefits one that is really

00:25:29,669 --> 00:25:34,470
obviously it's it's dramatically faster

00:25:31,379 --> 00:25:37,710
to deploy its zero config notice that I

00:25:34,470 --> 00:25:39,690
took a random project that was on github

00:25:37,710 --> 00:25:42,269
trending today the beautiful sort of

00:25:39,690 --> 00:25:46,200
card thing and they just added it I said

00:25:42,269 --> 00:25:47,850
new project boom zero config everything

00:25:46,200 --> 00:25:50,220
that it typically worried about as a

00:25:47,850 --> 00:25:53,369
server person got figured out for me

00:25:50,220 --> 00:25:58,110
including a global CDN that makes things

00:25:53,369 --> 00:26:01,610
really fast to serve HTTP with let's

00:25:58,110 --> 00:26:04,139
encrypt and like all that not fun stuff

00:26:01,610 --> 00:26:06,509
interestingly enough it has no single

00:26:04,139 --> 00:26:08,399
point of failure because that URL is

00:26:06,509 --> 00:26:10,379
kind of it has the ability to like

00:26:08,399 --> 00:26:13,559
infinitely scale and kind of show up

00:26:10,379 --> 00:26:16,289
everywhere without you know being down

00:26:13,559 --> 00:26:17,820
and things like that and as I mentioned

00:26:16,289 --> 00:26:20,159
earlier there's this advantage of a

00:26:17,820 --> 00:26:23,879
security model it just is very very easy

00:26:20,159 --> 00:26:26,850
to understand so as I mentioned I think

00:26:23,879 --> 00:26:29,759
that the benefits of getting this URL

00:26:26,850 --> 00:26:31,980
for every step of evolution to your code

00:26:29,759 --> 00:26:34,919
it's interesting perhaps not entirely

00:26:31,980 --> 00:26:36,590
new until you start considering sort of

00:26:34,919 --> 00:26:38,789
the performance improvements or the

00:26:36,590 --> 00:26:40,940
features of the model when it comes to

00:26:38,789 --> 00:26:43,559
scaling and distributing your project

00:26:40,940 --> 00:26:46,289
but I'm gonna talk about where this gets

00:26:43,559 --> 00:26:48,929
really really interesting so I mentioned

00:26:46,289 --> 00:26:50,669
earlier that that URL that a god is as

00:26:48,929 --> 00:26:52,860
good as any other production URL

00:26:50,669 --> 00:26:55,230
including it for example the definitive

00:26:52,860 --> 00:26:56,879
domain of your project like google.com

00:26:55,230 --> 00:26:59,519
they could say I'm gonna deploy that

00:26:56,879 --> 00:27:02,130
beautiful credit card form to Google com

00:26:59,519 --> 00:27:04,140
so you've probably heard of the

00:27:02,130 --> 00:27:06,540
this idea of testing and production and

00:27:04,140 --> 00:27:08,670
obviously when I say this a lot of you

00:27:06,540 --> 00:27:10,590
are like oh testing in production now I

00:27:08,670 --> 00:27:12,720
don't even deploy in a Friday night and

00:27:10,590 --> 00:27:14,130
then I test in production but there are

00:27:12,720 --> 00:27:16,830
two features here that are interesting

00:27:14,130 --> 00:27:20,100
is one is the environment is the same

00:27:16,830 --> 00:27:21,810
right so like that URL had even though

00:27:20,100 --> 00:27:23,670
it didn't have the exact domain for

00:27:21,810 --> 00:27:26,040
example it has an environment that

00:27:23,670 --> 00:27:29,310
completely mirrors production it's

00:27:26,040 --> 00:27:31,680
served by the same city and the CDN

00:27:29,310 --> 00:27:34,860
behaves with interesting features like

00:27:31,680 --> 00:27:36,780
caching and etags and rewrites and all

00:27:34,860 --> 00:27:38,550
kinds of different features but it's

00:27:36,780 --> 00:27:40,890
gonna be consistent with how production

00:27:38,550 --> 00:27:43,230
works when it comes to testing my

00:27:40,890 --> 00:27:45,930
back-end it gives me the ability to go

00:27:43,230 --> 00:27:48,320
directly to the real data source so in a

00:27:45,930 --> 00:27:51,060
lot of cases when you have an API like

00:27:48,320 --> 00:27:53,010
your graphical API or you're acquiring a

00:27:51,060 --> 00:27:54,270
headless CMS you have the ability to

00:27:53,010 --> 00:27:56,460
this new front-end

00:27:54,270 --> 00:27:58,440
query the actual data that then the

00:27:56,460 --> 00:28:01,200
eventual front-end that goes to prod is

00:27:58,440 --> 00:28:03,900
gonna is gonna query so I've been a big

00:28:01,200 --> 00:28:06,840
proponent of this idea as well that real

00:28:03,900 --> 00:28:09,810
testing happens when you mirror the end

00:28:06,840 --> 00:28:11,670
user so you can write as many unit tests

00:28:09,810 --> 00:28:13,920
as you want but then you went to the

00:28:11,670 --> 00:28:16,620
credit card forum and then there's a new

00:28:13,920 --> 00:28:19,860
div that overlaps the input and then

00:28:16,620 --> 00:28:22,260
I've lost all my revenue because I don't

00:28:19,860 --> 00:28:24,360
know like I can't type into the input so

00:28:22,260 --> 00:28:26,370
it's not only just that the environment

00:28:24,360 --> 00:28:28,350
is the same but the other property that

00:28:26,370 --> 00:28:31,380
makes testing really interesting is that

00:28:28,350 --> 00:28:34,830
you can replicate as closely as possible

00:28:31,380 --> 00:28:36,390
with the end-user does so I have two

00:28:34,830 --> 00:28:38,880
viral tweets that I'm really proud of

00:28:36,390 --> 00:28:39,900
that when I die I want them print it out

00:28:38,880 --> 00:28:42,360
next to my grave

00:28:39,900 --> 00:28:45,330
just kidding won it but they're they're

00:28:42,360 --> 00:28:51,390
fun when it's right test not too many

00:28:45,330 --> 00:28:53,940
mostly integration that is a riff of eat

00:28:51,390 --> 00:28:56,940
food mostly plant not too much mostly

00:28:53,940 --> 00:28:58,320
plants and the other one I guess I'm

00:28:56,940 --> 00:29:01,470
really been on this thread of

00:28:58,320 --> 00:29:03,600
really fun interesting tweets is In God

00:29:01,470 --> 00:29:06,150
We Trust all others must bring into and

00:29:03,600 --> 00:29:07,590
tests and it probably said that when we

00:29:06,150 --> 00:29:10,440
didn't have it into and test and it was

00:29:07,590 --> 00:29:13,470
kind of reminiscing on what would have

00:29:10,440 --> 00:29:15,240
happened what could have been so the

00:29:13,470 --> 00:29:16,050
interesting thing about that URL that I

00:29:15,240 --> 00:29:18,870
talked about

00:29:16,050 --> 00:29:21,780
is that it really becomes it really puts

00:29:18,870 --> 00:29:24,120
the deployment at the center of gravity

00:29:21,780 --> 00:29:25,680
all I do every day from the moment I

00:29:24,120 --> 00:29:27,630
wake up to the moment go to bed is

00:29:25,680 --> 00:29:28,410
deploy deploy deploy and deploy that's

00:29:27,630 --> 00:29:31,440
all I do

00:29:28,410 --> 00:29:33,600
so the deploy URL is sort of this sort

00:29:31,440 --> 00:29:35,640
of center of gravity and the interesting

00:29:33,600 --> 00:29:38,640
thing is that once I have that prod

00:29:35,640 --> 00:29:40,260
ready or L there is an ecosystem of

00:29:38,640 --> 00:29:42,420
possibilities and applications that

00:29:40,260 --> 00:29:44,550
opens up to me for example I can perform

00:29:42,420 --> 00:29:46,920
end-to-end tests against that I can

00:29:44,550 --> 00:29:48,870
perform screenshot diffing so I only

00:29:46,920 --> 00:29:52,170
talked about okay what happens if a div

00:29:48,870 --> 00:29:54,000
moved on to my input and all my unit

00:29:52,170 --> 00:29:56,280
tests pass but all of a sudden can't

00:29:54,000 --> 00:29:56,700
type I can actually div what it looks

00:29:56,280 --> 00:29:59,880
like

00:29:56,700 --> 00:30:03,510
I can may make assertions about content

00:29:59,880 --> 00:30:06,320
being returned by the HTML or content

00:30:03,510 --> 00:30:09,660
appearing in my functional responses I

00:30:06,320 --> 00:30:12,180
can make assertions about performance

00:30:09,660 --> 00:30:14,430
and conformance I can do cross browser

00:30:12,180 --> 00:30:17,280
testing like do some really quick boot

00:30:14,430 --> 00:30:18,390
it up in Safari and hope it doesn't

00:30:17,280 --> 00:30:21,690
break and things like that

00:30:18,390 --> 00:30:24,740
I can actually do that really scalable

00:30:21,690 --> 00:30:26,730
user testing by shipping that URL to a

00:30:24,740 --> 00:30:29,820
set of people that are gonna give me

00:30:26,730 --> 00:30:31,590
feedback on it and I can get feedback

00:30:29,820 --> 00:30:34,470
internally much more quickly from my own

00:30:31,590 --> 00:30:37,290
team obviously and I can do my as much

00:30:34,470 --> 00:30:40,440
manual QA as I want right I give you

00:30:37,290 --> 00:30:43,080
this URL typically on on slack or or

00:30:40,440 --> 00:30:45,720
JIRA and say hey take a look at and just

00:30:43,080 --> 00:30:47,520
tell me if this feels good for example

00:30:45,720 --> 00:30:51,210
things that it might not be as easy to

00:30:47,520 --> 00:30:53,100
do automatically so in practice this is

00:30:51,210 --> 00:30:54,420
enabled by that property that I

00:30:53,100 --> 00:30:57,870
mentioned earlier which is that our

00:30:54,420 --> 00:30:59,850
system will signal that there is a

00:30:57,870 --> 00:31:02,760
deployment so it's not just a regular

00:30:59,850 --> 00:31:06,260
check like it will be with circle CI for

00:31:02,760 --> 00:31:10,200
example or Travis CI or get up actions

00:31:06,260 --> 00:31:11,130
but it's a deployment right if I have a

00:31:10,200 --> 00:31:13,590
deployment

00:31:11,130 --> 00:31:15,000
then my screen should diffing tool can

00:31:13,590 --> 00:31:17,760
wait for the deployment to be available

00:31:15,000 --> 00:31:19,260
now it has a URL that's really snappy

00:31:17,760 --> 00:31:20,790
that it can launch a bunch of

00:31:19,260 --> 00:31:23,460
screenshots that in screenshot test

00:31:20,790 --> 00:31:25,260
against I can do assertion testing as I

00:31:23,460 --> 00:31:28,440
mentioned they can do cross browser

00:31:25,260 --> 00:31:29,580
testing I can do I'm a really big fan of

00:31:28,440 --> 00:31:30,840
this we're starting

00:31:29,580 --> 00:31:33,450
to create stories that are very

00:31:30,840 --> 00:31:35,190
important to our system like you've

00:31:33,450 --> 00:31:37,170
probably all familiar with the idea that

00:31:35,190 --> 00:31:39,600
you continue to evolve your system and

00:31:37,170 --> 00:31:42,030
you live in this sort of black box of

00:31:39,600 --> 00:31:44,310
you know everything about how to log in

00:31:42,030 --> 00:31:46,740
and sign up but one day something moves

00:31:44,310 --> 00:31:49,200
one inch to the left and then your final

00:31:46,740 --> 00:31:51,630
kind of just got ruined so we started to

00:31:49,200 --> 00:31:53,580
create with this github app check lis a

00:31:51,630 --> 00:31:55,110
lot of the critical user stories that we

00:31:53,580 --> 00:31:58,650
want to have the certainty that they get

00:31:55,110 --> 00:32:03,000
completed before we merge the master so

00:31:58,650 --> 00:32:05,660
our system right now in combination with

00:32:03,000 --> 00:32:08,850
github then creates a gravity around

00:32:05,660 --> 00:32:11,130
deployment that enables a bunch of super

00:32:08,850 --> 00:32:12,930
interesting applications to do things

00:32:11,130 --> 00:32:16,860
that you typically were doing earlier

00:32:12,930 --> 00:32:19,500
either maybe not completely or you were

00:32:16,860 --> 00:32:20,850
doing them with code and perhaps now

00:32:19,500 --> 00:32:23,220
there's tools that allow you to do it

00:32:20,850 --> 00:32:26,970
with beautiful UI it's a great example

00:32:23,220 --> 00:32:29,550
is that we used to write tests like into

00:32:26,970 --> 00:32:31,650
and tasks with a lot of code or we used

00:32:29,550 --> 00:32:33,630
to get more distracted by unit tests but

00:32:31,650 --> 00:32:36,000
now I sold chocolate for someone to say

00:32:33,630 --> 00:32:40,500
hey go here click this click that boom

00:32:36,000 --> 00:32:43,050
off to the races and not only are we

00:32:40,500 --> 00:32:45,030
able to test more effectively and ship

00:32:43,050 --> 00:32:47,430
with more confidence but we can also

00:32:45,030 --> 00:32:50,220
ship with less confidence which is very

00:32:47,430 --> 00:32:52,530
interesting so typically the behavior of

00:32:50,220 --> 00:32:54,840
our system is that you merge and that

00:32:52,530 --> 00:32:59,010
goes to prod you merge goes to prod ok

00:32:54,840 --> 00:33:02,670
so if I had a truckloads of confidence

00:32:59,010 --> 00:33:04,710
here because everything passed we have

00:33:02,670 --> 00:33:08,040
the five systems of testing it's pretty

00:33:04,710 --> 00:33:10,740
insane so super confident so you merge

00:33:08,040 --> 00:33:13,080
and you go live and even probably during

00:33:10,740 --> 00:33:15,690
this talk my team has been doing that

00:33:13,080 --> 00:33:18,630
right because they're so confident but

00:33:15,690 --> 00:33:20,700
in reality there's always the stuff that

00:33:18,630 --> 00:33:22,730
goes wrong right like like we're not

00:33:20,700 --> 00:33:25,770
perfect and we always want to balance

00:33:22,730 --> 00:33:28,380
agility with you know you know the

00:33:25,770 --> 00:33:30,240
ability of making reasonable mistakes so

00:33:28,380 --> 00:33:33,630
an interesting property of this is that

00:33:30,240 --> 00:33:35,850
you can very quickly revert your pr's so

00:33:33,630 --> 00:33:38,040
I mentioned earlier that every push gets

00:33:35,850 --> 00:33:41,820
a deploy which means that when you

00:33:38,040 --> 00:33:43,270
revert likely that deployment that in

00:33:41,820 --> 00:33:46,120
this case for example to maybe

00:33:43,270 --> 00:33:48,250
20 seconds already existed so we

00:33:46,120 --> 00:33:50,380
automatically diff and we apply the

00:33:48,250 --> 00:33:54,040
previous deployment at with zero

00:33:50,380 --> 00:33:56,950
milliseconds not 20 seconds so this is a

00:33:54,040 --> 00:33:59,670
fairly good property really fast reverts

00:33:56,950 --> 00:34:03,460
will increase your ability to

00:33:59,670 --> 00:34:06,010
confidently ship with no confidence but

00:34:03,460 --> 00:34:08,200
toward the future we envision even

00:34:06,010 --> 00:34:09,730
better ways of experimenting so we're

00:34:08,200 --> 00:34:12,790
starting to integrate with third-party

00:34:09,730 --> 00:34:15,040
providers to do this but basically when

00:34:12,790 --> 00:34:17,140
you build for example your next project

00:34:15,040 --> 00:34:19,630
you can tell next yes hey I want this

00:34:17,140 --> 00:34:21,940
page to have two variants and I want

00:34:19,630 --> 00:34:24,760
this variant to have access to a smaller

00:34:21,940 --> 00:34:26,260
percentage of the traffic and that in

00:34:24,760 --> 00:34:28,390
itself is pretty good because you're

00:34:26,260 --> 00:34:32,950
constrained the delivery of a new

00:34:28,390 --> 00:34:34,540
feature to smaller set of users but what

00:34:32,950 --> 00:34:36,490
we are able to do as well is that we're

00:34:34,540 --> 00:34:38,710
able to get data from it right so

00:34:36,490 --> 00:34:40,840
there's a constant flow that completes

00:34:38,710 --> 00:34:43,780
the feedback loop where if for example

00:34:40,840 --> 00:34:46,510
tools like century tell us hey there is

00:34:43,780 --> 00:34:48,970
an increased exception rate on this new

00:34:46,510 --> 00:34:51,419
page that you just shipped and you were

00:34:48,970 --> 00:34:54,159
you know it works great on Chrome but

00:34:51,419 --> 00:34:56,290
going back to the example of testing it

00:34:54,159 --> 00:34:59,110
is common that we test more with

00:34:56,290 --> 00:35:01,180
headless browsers like puppeteer so what

00:34:59,110 --> 00:35:03,130
about Firefox ok you might have missed

00:35:01,180 --> 00:35:05,650
it what about the error rate increased

00:35:03,130 --> 00:35:07,660
only in Firefox automatically revert my

00:35:05,650 --> 00:35:10,270
project and again because our system

00:35:07,660 --> 00:35:12,190
will ensure that this reverse are atomic

00:35:10,270 --> 00:35:14,290
and snappy and global you start

00:35:12,190 --> 00:35:16,720
experimenting with more confidence not

00:35:14,290 --> 00:35:21,340
just shipping with more confidence okay

00:35:16,720 --> 00:35:22,660
so this is a in a nutshell the system

00:35:21,340 --> 00:35:25,810
that we've evolved over the past few

00:35:22,660 --> 00:35:27,460
years we're very lucky to have amazing

00:35:25,810 --> 00:35:29,740
customers using it in production and a

00:35:27,460 --> 00:35:31,540
lot of you using it on github if they

00:35:29,740 --> 00:35:33,640
can have a Pico system but for those of

00:35:31,540 --> 00:35:35,350
you that haven't tried it yet the

00:35:33,640 --> 00:35:37,480
easiest way to sort of recap everything

00:35:35,350 --> 00:35:40,330
that I've talked about today is either

00:35:37,480 --> 00:35:43,120
code slash github do not go to sydejko

00:35:40,330 --> 00:35:45,400
slash gitlab under any circumstances we

00:35:43,120 --> 00:35:47,080
don't like that here just kidding and

00:35:45,400 --> 00:35:50,230
also please follow us on twitter at site

00:35:47,080 --> 00:35:51,220
HQ and i believe we have a few minutes

00:35:50,230 --> 00:35:52,650
for questions as well

00:35:51,220 --> 00:35:59,800
thank you

00:35:52,650 --> 00:35:59,800
[Applause]

00:36:00,280 --> 00:36:05,630
great question so he's asking who's

00:36:02,809 --> 00:36:08,720
supposed to create the api's so I think

00:36:05,630 --> 00:36:11,510
it's a mix right I think the trend of

00:36:08,720 --> 00:36:13,460
you exporting your own API is a real

00:36:11,510 --> 00:36:15,470
trend today so I think most projects

00:36:13,460 --> 00:36:17,420
nowadays are probably already working

00:36:15,470 --> 00:36:19,430
there the assumption of a hypothetical

00:36:17,420 --> 00:36:22,339
third party client that is not just your

00:36:19,430 --> 00:36:24,859
front-end so restful api is graphical

00:36:22,339 --> 00:36:27,170
api so great fits for this as well as

00:36:24,859 --> 00:36:29,180
standalone services that are giving you

00:36:27,170 --> 00:36:30,920
this out of the box right like instead

00:36:29,180 --> 00:36:32,900
of creating your own payment api

00:36:30,920 --> 00:36:34,910
endpoint you're saying oh I'm gonna talk

00:36:32,900 --> 00:36:37,309
to stripe directly for example so

00:36:34,910 --> 00:36:39,470
there's that kind of broad category the

00:36:37,309 --> 00:36:40,910
other category is we want to empower the

00:36:39,470 --> 00:36:44,119
front-end developer to have the same

00:36:40,910 --> 00:36:46,339
mental model of scalability and global

00:36:44,119 --> 00:36:48,319
distribution and speed and fault

00:36:46,339 --> 00:36:50,869
tolerance that you get from just

00:36:48,319 --> 00:36:52,609
front-end code but for back-end code and

00:36:50,869 --> 00:36:55,579
this is where for example next is now

00:36:52,609 --> 00:36:57,710
allows you to define an API directory

00:36:55,579 --> 00:36:59,930
where you define your service functions

00:36:57,710 --> 00:37:02,630
so you can kind of structure your

00:36:59,930 --> 00:37:04,190
project as you know your pages that are

00:37:02,630 --> 00:37:05,480
all gonna be your front-end pages and

00:37:04,190 --> 00:37:08,089
then you can say okay I'm going to

00:37:05,480 --> 00:37:10,099
define a API directory and I start

00:37:08,089 --> 00:37:11,930
introducing functions that can bridge

00:37:10,099 --> 00:37:14,059
the gap between back-end and front-end

00:37:11,930 --> 00:37:15,890
and the way that we see this in

00:37:14,059 --> 00:37:19,880
production is that for example I showed

00:37:15,890 --> 00:37:21,770
earlier our system has a the ability to

00:37:19,880 --> 00:37:26,270
take screenshots of your projects right

00:37:21,770 --> 00:37:27,440
so the way that we did that the screen

00:37:26,270 --> 00:37:29,540
is gone but the way that we did that is

00:37:27,440 --> 00:37:32,150
like we didn't wait it's putting on the

00:37:29,540 --> 00:37:34,010
front and hat we didn't wait for the API

00:37:32,150 --> 00:37:35,450
team to figure out how to create that

00:37:34,010 --> 00:37:37,250
because we knew that it was a feature

00:37:35,450 --> 00:37:39,200
was particularly interesting to the

00:37:37,250 --> 00:37:42,290
front-end but we knew that it required

00:37:39,200 --> 00:37:44,540
back in execution so we just find it

00:37:42,290 --> 00:37:46,460
alongside our next Reyes repo inside the

00:37:44,540 --> 00:37:48,109
API pages directory and then we just

00:37:46,460 --> 00:37:50,780
deployed it all together and has that

00:37:48,109 --> 00:37:53,240
same cohesion as the front-end code and

00:37:50,780 --> 00:37:56,690
that's why you have this view of build

00:37:53,240 --> 00:37:59,000
and you have a view of runtime so if

00:37:56,690 --> 00:38:00,260
there was if there were functions that

00:37:59,000 --> 00:38:03,589
are doing something in the backend you

00:38:00,260 --> 00:38:06,830
would have seen them in runtime so like

00:38:03,589 --> 00:38:08,480
I said the broad trends that

00:38:06,830 --> 00:38:09,860
are probably already going on in a lot

00:38:08,480 --> 00:38:11,810
of projects even when they look at

00:38:09,860 --> 00:38:14,300
things like WordPress and the REST API

00:38:11,810 --> 00:38:17,360
plug-in or when they look at how Rails

00:38:14,300 --> 00:38:19,700
has shifted toward being an API server a

00:38:17,360 --> 00:38:28,880
lot more we kind of find a very nice

00:38:19,700 --> 00:38:32,150
cohesion of these two worlds with my

00:38:28,880 --> 00:38:33,950
experience and uh with a maintaining a

00:38:32,150 --> 00:38:35,030
large set of NN tests that go against

00:38:33,950 --> 00:38:36,680
live production there's usually

00:38:35,030 --> 00:38:38,750
idiosyncrasies and those production

00:38:36,680 --> 00:38:41,120
services whether those services have

00:38:38,750 --> 00:38:43,190
downtime problems or they have changing

00:38:41,120 --> 00:38:45,640
perhaps the services you're baking on or

00:38:43,190 --> 00:38:48,350
not as resilient or fault tolerant or as

00:38:45,640 --> 00:38:50,120
predictable and reliable have you found

00:38:48,350 --> 00:38:53,030
anything as you've been working with

00:38:50,120 --> 00:38:55,580
customers who are using live production

00:38:53,030 --> 00:38:57,340
back-end services you know any any type

00:38:55,580 --> 00:38:59,150
of ways to sort of help them eliminate

00:38:57,340 --> 00:39:02,000
positives it may be as a result of

00:38:59,150 --> 00:39:03,470
service problems I would say there's in

00:39:02,000 --> 00:39:05,270
your observation is correct I think

00:39:03,470 --> 00:39:07,250
there are broadly two categories there

00:39:05,270 --> 00:39:09,860
is customers that prefer to have a

00:39:07,250 --> 00:39:12,020
completely different staging API server

00:39:09,860 --> 00:39:14,780
and we give them the ability for all

00:39:12,020 --> 00:39:16,760
their deploy previews to have customized

00:39:14,780 --> 00:39:18,440
em that they target that a staging

00:39:16,760 --> 00:39:20,390
environment and we're making we're

00:39:18,440 --> 00:39:22,540
working even making that more ergonomic

00:39:20,390 --> 00:39:26,540
because we see it as a very common trend

00:39:22,540 --> 00:39:29,030
but also we when we look at okay testing

00:39:26,540 --> 00:39:30,680
against production we find that there is

00:39:29,030 --> 00:39:32,330
versioning schemes that we are putting

00:39:30,680 --> 00:39:34,550
in place to prevent sort of regressions

00:39:32,330 --> 00:39:36,230
so their front end Alliance there is

00:39:34,550 --> 00:39:39,650
also this assumption that when you move

00:39:36,230 --> 00:39:41,510
into kind of the sba type front end you

00:39:39,650 --> 00:39:43,430
don't know that there could be multiple

00:39:41,510 --> 00:39:46,070
versions of your front end running at

00:39:43,430 --> 00:39:47,630
any given time right so like the ability

00:39:46,070 --> 00:39:50,390
to maintain this kind of backwards

00:39:47,630 --> 00:39:53,180
compatibility of the API has been more

00:39:50,390 --> 00:39:54,940
of a more of a concern I think

00:39:53,180 --> 00:39:57,620
rightfully so anything is a good thing

00:39:54,940 --> 00:39:59,750
because of this front is that load once

00:39:57,620 --> 00:40:02,390
and perhaps you have them open for very

00:39:59,750 --> 00:40:03,890
long sessions right I think for me

00:40:02,390 --> 00:40:07,250
Twitter is a great example right like

00:40:03,890 --> 00:40:10,130
and I very hardly ever refresh that so

00:40:07,250 --> 00:40:12,830
the versioning being mindful with

00:40:10,130 --> 00:40:14,690
versioning of your production api's will

00:40:12,830 --> 00:40:17,960
allow that this system continues to sort

00:40:14,690 --> 00:40:19,520
of have this congruence of oh yeah I can

00:40:17,960 --> 00:40:20,180
confidently run my test and it's gonna

00:40:19,520 --> 00:40:22,339
go to

00:40:20,180 --> 00:40:24,290
like data that works and when it comes

00:40:22,339 --> 00:40:27,440
to flakiness I think that's interesting

00:40:24,290 --> 00:40:29,750
right we debate this a lot and I think

00:40:27,440 --> 00:40:32,210
the flakiness of your end-to-end test

00:40:29,750 --> 00:40:33,980
kind of creates this lower bound on the

00:40:32,210 --> 00:40:36,200
flakiness of your user experience so I

00:40:33,980 --> 00:40:37,760
think if I experienced that flakiness

00:40:36,200 --> 00:40:40,609
with some of these systems that we've

00:40:37,760 --> 00:40:42,710
configured it's just some flakiness that

00:40:40,609 --> 00:40:45,349
the end user would like at least some

00:40:42,710 --> 00:40:48,020
subset of end-users would experience now

00:40:45,349 --> 00:40:50,930
it is true that maybe that's within your

00:40:48,020 --> 00:40:52,099
tolerance of your SLA targets or the

00:40:50,930 --> 00:40:55,400
quality of service that you want to

00:40:52,099 --> 00:40:57,050
provide so apps like check Lee and we

00:40:55,400 --> 00:40:59,359
work very closely with that company

00:40:57,050 --> 00:41:00,829
allowed you for example to retry some of

00:40:59,359 --> 00:41:03,829
the assertions that you think are more

00:41:00,829 --> 00:41:06,680
complex or have more time variants or

00:41:03,829 --> 00:41:09,050
will allow you say this one I don't care

00:41:06,680 --> 00:41:11,150
as much about it's an interesting data

00:41:09,050 --> 00:41:13,670
point if it passed but it's not required

00:41:11,150 --> 00:41:15,890
so I think github checks in that sense

00:41:13,670 --> 00:41:18,680
are very very useful and going back to

00:41:15,890 --> 00:41:20,900
that idea of it really allows you to

00:41:18,680 --> 00:41:22,880
ship without even seeing the code which

00:41:20,900 --> 00:41:24,740
is obviously a pipe dream you have to do

00:41:22,880 --> 00:41:27,410
code reviews but one thing that we've

00:41:24,740 --> 00:41:30,079
we've done is we installed a bot called

00:41:27,410 --> 00:41:33,470
Kodiak that'll automatically merge

00:41:30,079 --> 00:41:35,869
certain categories of pr's if all the

00:41:33,470 --> 00:41:37,910
tests pass and we can do that with quite

00:41:35,869 --> 00:41:40,730
a high degree of confidence like we send

00:41:37,910 --> 00:41:43,460
that PR all the checks fast and in order

00:41:40,730 --> 00:41:46,670
merges so the PR kind of becomes they

00:41:43,460 --> 00:41:48,859
kind of like dumpster fire like if it

00:41:46,670 --> 00:41:50,569
didn't tautomer j-- and it fell in their

00:41:48,859 --> 00:41:52,369
categories of the ones that should

00:41:50,569 --> 00:41:53,599
oughta march then it becomes a thing

00:41:52,369 --> 00:41:54,859
that you have to put your attention on

00:41:53,599 --> 00:41:57,040
because like hey like something went

00:41:54,859 --> 00:41:57,040
wrong

00:41:57,680 --> 00:42:21,460
[Music]

00:42:21,619 --> 00:42:23,680
you

00:42:24,420 --> 00:42:28,699

YouTube URL: https://www.youtube.com/watch?v=KlO5Ksk7baQ


