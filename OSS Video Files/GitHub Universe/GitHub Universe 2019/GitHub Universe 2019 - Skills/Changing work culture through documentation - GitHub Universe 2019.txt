Title: Changing work culture through documentation - GitHub Universe 2019
Publication date: 2019-12-13
Playlist: GitHub Universe 2019 - Skills
Description: 
	Presented by Tania Allard, Developer Advocate at Microsoft

Most developers have heard “good code documents itself” or “documentation outdates easily, the code does not” at some point. This is an excuse to not write documentation or justify the absence of it. In my work with many teams, the lack of documentation is often a symptom of high technical debt.

What if we could turn this around and use documentation like a driver for positive culture change and start paying the critical technical debt? This approach not only helps teams to faster identify areas that need critical support but also brings more empathy to the table.

In this talk, Tania draws on experiences using documentation as a weapon for positive culture and process change in machine learning and scientific computing environments. She focuses on the processes and approaches that enable the creation of documentation for data scientists, infrastructure, and software engineering teams, and clients.

By the end of the talk, you'll learn efficient techniques to make documentation a first-class citizen in your development cycles—and leave with one or two tricks to convince even the most reluctant developer to document code.

About GitHub Universe:
GitHub Universe is a two-day conference dedicated to the creativity and curiosity of the largest software community in the world. Sessions cover topics from team culture to open source software across industries and technologies.

For more information on GitHub Universe, check the website:
https://githubuniverse.com
Captions: 
	00:00:00,580 --> 00:00:14,179
[Music]

00:00:17,080 --> 00:00:22,700
hello everyone and thank you for coming

00:00:19,850 --> 00:00:25,190
to my presentation I am Tony Olerud and

00:00:22,700 --> 00:00:28,490
I'm a developer advocate for Microsoft

00:00:25,190 --> 00:00:31,250
and I'm based in the UK I'm gonna be

00:00:28,490 --> 00:00:33,830
talking about good code documents itself

00:00:31,250 --> 00:00:36,260
and other lines and justice about how we

00:00:33,830 --> 00:00:39,200
can start changing our organizational

00:00:36,260 --> 00:00:41,239
culture through documentation and how we

00:00:39,200 --> 00:00:44,270
can also use dogs to pay some of our

00:00:41,239 --> 00:00:48,080
technical debt all of these lights are

00:00:44,270 --> 00:00:50,809
CCI so feel free to use remix and adapt

00:00:48,080 --> 00:00:53,059
as you see fit and here is a link

00:00:50,809 --> 00:00:58,820
worried you'll be able to access all the

00:00:53,059 --> 00:01:00,890
slides after ADA presentation oh so just

00:00:58,820 --> 00:01:03,830
a little bit about me I am in open

00:01:00,890 --> 00:01:05,990
source advocate and I worry Microsoft

00:01:03,830 --> 00:01:07,720
with all of the open source communities

00:01:05,990 --> 00:01:10,820
that are science communities and

00:01:07,720 --> 00:01:13,040
researchers I also love complex systems

00:01:10,820 --> 00:01:16,400
I have a background in research in this

00:01:13,040 --> 00:01:17,600
and as such I specialized in all things

00:01:16,400 --> 00:01:21,259
scientific computing and machine

00:01:17,600 --> 00:01:24,170
learning and that aside I also love

00:01:21,259 --> 00:01:26,509
mechanical keywords I like using them I

00:01:24,170 --> 00:01:32,899
love assembling them and I often share

00:01:26,509 --> 00:01:35,000
pictures of this on Twitter so what

00:01:32,899 --> 00:01:37,460
you're going to take away after a test

00:01:35,000 --> 00:01:39,619
presentation first an understanding of

00:01:37,460 --> 00:01:41,930
what is technical depth and how is that

00:01:39,619 --> 00:01:45,259
you probably acquired some of this in in

00:01:41,930 --> 00:01:47,780
your projects or your organization we're

00:01:45,259 --> 00:01:50,299
also focusing on documentation as an

00:01:47,780 --> 00:01:53,030
entry point to identify and pay this

00:01:50,299 --> 00:01:55,429
technical depth and also some useful

00:01:53,030 --> 00:01:57,469
trade the tip sorry for you to use

00:01:55,429 --> 00:02:00,350
documentation to drive change within

00:01:57,469 --> 00:02:04,490
your organization no matter how big

00:02:00,350 --> 00:02:06,549
their team is so I'm just gonna ask for

00:02:04,490 --> 00:02:11,450
a little show of hands of who likes

00:02:06,549 --> 00:02:15,020
writing documentation I love writing

00:02:11,450 --> 00:02:17,920
ducks now who actually writes the cumin

00:02:15,020 --> 00:02:21,500
tation as a regular practice let's say

00:02:17,920 --> 00:02:26,180
day to day under normal water flow each

00:02:21,500 --> 00:02:28,100
sometimes cool and what if I told you

00:02:26,180 --> 00:02:30,970
that you can actually change your

00:02:28,100 --> 00:02:34,130
culture your team's culture is through

00:02:30,970 --> 00:02:37,940
writing more ducks or writing better

00:02:34,130 --> 00:02:40,100
ducks and also be some technical depth I

00:02:37,940 --> 00:02:42,350
know this sounds a bit like a dream and

00:02:40,100 --> 00:02:46,880
like a wishful thinking kind of thing

00:02:42,350 --> 00:02:50,240
but it's not let's start by identifying

00:02:46,880 --> 00:02:52,880
what is technical depth when I think

00:02:50,240 --> 00:02:56,210
about this I usually think about the

00:02:52,880 --> 00:03:01,640
monster that leaves under my bed my bed

00:02:56,210 --> 00:03:04,010
or inside I close it and we kind of want

00:03:01,640 --> 00:03:06,350
to believe it's not dairy but we'd

00:03:04,010 --> 00:03:08,570
rather not look under the bed or open to

00:03:06,350 --> 00:03:12,710
close it in case it is actually a real

00:03:08,570 --> 00:03:15,110
thing and but it's very very insidious

00:03:12,710 --> 00:03:17,800
it starts creeping off little by little

00:03:15,110 --> 00:03:21,740
until it becomes a very very big thing

00:03:17,800 --> 00:03:24,470
out of control so basically technical

00:03:21,740 --> 00:03:27,560
depth starts with a series of bad

00:03:24,470 --> 00:03:27,920
decisions that are eventually leading to

00:03:27,560 --> 00:03:32,960
our

00:03:27,920 --> 00:03:36,880
prone code or architecture and such

00:03:32,960 --> 00:03:40,460
decisions can also lead to unnecessary

00:03:36,880 --> 00:03:42,880
years or bad years of certain resources

00:03:40,460 --> 00:03:46,520
and these resources can be either

00:03:42,880 --> 00:03:51,440
infrastructural or people or other sort

00:03:46,520 --> 00:03:54,320
of resources so whenever you start

00:03:51,440 --> 00:03:57,260
thinking about technical depth injury

00:03:54,320 --> 00:04:00,110
infrastructure or injury team it's

00:03:57,260 --> 00:04:02,720
always worth to think what were these

00:04:00,110 --> 00:04:07,930
decisions made in the past that prevent

00:04:02,720 --> 00:04:10,400
me from getting stuff done today and

00:04:07,930 --> 00:04:12,860
first of all eight days we have told

00:04:10,400 --> 00:04:17,090
centers and what causes technical depth

00:04:12,860 --> 00:04:18,530
in brief you and me I would like to talk

00:04:17,090 --> 00:04:20,419
to any of you that have never

00:04:18,530 --> 00:04:23,000
contributed to any technical depth and

00:04:20,419 --> 00:04:26,960
some examples in which we'd rmally do

00:04:23,000 --> 00:04:29,900
this or in which I have been gullible of

00:04:26,960 --> 00:04:32,720
doing this is by favoring nice shiny

00:04:29,900 --> 00:04:36,740
feature is instead of favoring tests or

00:04:32,720 --> 00:04:40,580
robustness in my infrastructure

00:04:36,740 --> 00:04:42,920
something else that massively leads and

00:04:40,580 --> 00:04:46,610
contributes to technical depth ace time

00:04:42,920 --> 00:04:50,330
crunch when a project or a new feature

00:04:46,610 --> 00:04:53,960
or any release was to yesterday or is

00:04:50,330 --> 00:04:57,440
due today and it's four o'clock in the

00:04:53,960 --> 00:05:00,620
evening and when we start doing working

00:04:57,440 --> 00:05:03,830
on this time crunch on this very short

00:05:00,620 --> 00:05:05,690
or tight or unrealistic deadlines we

00:05:03,830 --> 00:05:07,610
start doing things like I'm gonna write

00:05:05,690 --> 00:05:10,790
this code and then I'll come back and

00:05:07,610 --> 00:05:13,070
tidy up later a week or a month later

00:05:10,790 --> 00:05:14,600
and that doesn't happen or I'm gonna

00:05:13,070 --> 00:05:19,060
come back and write the documentation

00:05:14,600 --> 00:05:22,160
later and that dots never gets reading

00:05:19,060 --> 00:05:25,010
this is something that also happens a

00:05:22,160 --> 00:05:27,710
lot in because I work a lot with machine

00:05:25,010 --> 00:05:30,650
learning I'm gonna use a machine

00:05:27,710 --> 00:05:33,490
learning example now deep learning is

00:05:30,650 --> 00:05:36,470
very popular everybody wants to do AI

00:05:33,490 --> 00:05:38,660
and some people want here's the latest

00:05:36,470 --> 00:05:41,080
trends or the latest algorithm because

00:05:38,660 --> 00:05:43,550
all the cool faults are doing it

00:05:41,080 --> 00:05:46,460
sometimes you can use a more a much

00:05:43,550 --> 00:05:49,520
simpler approach to get similar accuracy

00:05:46,460 --> 00:05:52,400
or similar predictions but we didn't do

00:05:49,520 --> 00:05:54,500
it or it some folks don't do it that's

00:05:52,400 --> 00:05:56,920
also an example of technical depth and

00:05:54,500 --> 00:05:59,810
we're favoring blackbox algorithms or a

00:05:56,920 --> 00:06:05,810
very very complex infrastructure to

00:05:59,810 --> 00:06:08,450
tackle smaller problems also being a

00:06:05,810 --> 00:06:10,910
NAND already broken Cola tree and when

00:06:08,450 --> 00:06:13,220
you're already working in an environment

00:06:10,910 --> 00:06:15,470
where everything seems to be a pile of

00:06:13,220 --> 00:06:18,050
garbage it's very very easy to think if

00:06:15,470 --> 00:06:22,540
I add a ton of it to that pile of

00:06:18,050 --> 00:06:27,850
garbage nobody's gonna notice am i right

00:06:22,540 --> 00:06:30,470
yeah so how can we start identifying

00:06:27,850 --> 00:06:32,570
technical taps what are those can create

00:06:30,470 --> 00:06:36,560
little things that we'll see in our code

00:06:32,570 --> 00:06:39,950
bases or in our worry that will point

00:06:36,560 --> 00:06:42,020
into technical depth a lot already

00:06:39,950 --> 00:06:45,950
discuss today the different decisions

00:06:42,020 --> 00:06:48,409
are two different social parts but Frank

00:06:45,950 --> 00:06:50,360
said we one thing that Clairol indicates

00:06:48,409 --> 00:06:54,639
this code smells that are not

00:06:50,360 --> 00:06:59,599
necessarily bugs but our indicator is of

00:06:54,639 --> 00:07:02,149
deeper problems so if you go to your

00:06:59,599 --> 00:07:04,939
codebase and find a half-baked feature

00:07:02,149 --> 00:07:07,489
Eden was rated probably six months ago

00:07:04,939 --> 00:07:10,039
and nobody had time to go back and

00:07:07,489 --> 00:07:12,139
revisit and make it more robust or die

00:07:10,039 --> 00:07:16,729
or tighten the implementation that's a

00:07:12,139 --> 00:07:21,979
code smell if despite of your code being

00:07:16,729 --> 00:07:24,050
on git or github for that matter is you

00:07:21,979 --> 00:07:26,899
started seeing a lot of commented out

00:07:24,050 --> 00:07:31,489
pieces of code that's also a code smell

00:07:26,899 --> 00:07:33,709
and it also reflects with well I'm

00:07:31,489 --> 00:07:35,209
writing this piece of code and that or

00:07:33,709 --> 00:07:37,459
this function that will replace this

00:07:35,209 --> 00:07:39,349
other function but what if I later I

00:07:37,459 --> 00:07:44,089
need this previous part but that never

00:07:39,349 --> 00:07:47,179
gets deleted also would you go to your

00:07:44,089 --> 00:07:49,459
codebase and don't find tests or even

00:07:47,179 --> 00:07:52,429
worse when you find tests that are

00:07:49,459 --> 00:07:56,029
broken and have been broken for a very

00:07:52,429 --> 00:08:01,129
very long time that's also a significant

00:07:56,029 --> 00:08:04,879
code smell multiple versions of your CI

00:08:01,129 --> 00:08:07,219
order city descriptions but only one in

00:08:04,879 --> 00:08:09,919
years I've seen DS quite a bit where

00:08:07,219 --> 00:08:14,149
folks are using a certain CI or city

00:08:09,919 --> 00:08:16,519
provider and they updated but then the

00:08:14,149 --> 00:08:18,949
old one gets moved to another directory

00:08:16,519 --> 00:08:22,579
inside the same repository where it's

00:08:18,949 --> 00:08:24,800
old CI or something of the such again

00:08:22,579 --> 00:08:28,339
just in case they need to go pack or

00:08:24,800 --> 00:08:30,469
flip back and no documentation and poor

00:08:28,339 --> 00:08:32,930
documentation is also a very big

00:08:30,469 --> 00:08:38,630
indicator of these technical depth

00:08:32,930 --> 00:08:41,449
smells when we talk about infrastructure

00:08:38,630 --> 00:08:44,509
e and something that it can also lead to

00:08:41,449 --> 00:08:46,839
this a or e indicate high technical

00:08:44,509 --> 00:08:50,930
depth is having this house of cards

00:08:46,839 --> 00:08:53,720
infrastructure where if you move a tiny

00:08:50,930 --> 00:08:56,420
component of your infrastructure or your

00:08:53,720 --> 00:08:58,490
code base all of the things that are

00:08:56,420 --> 00:09:01,160
rounded will just suddenly start to

00:08:58,490 --> 00:09:02,120
crumble how many of you have ever been

00:09:01,160 --> 00:09:05,120
in a situation

00:09:02,120 --> 00:09:07,009
Murari you've wanted to modify something

00:09:05,120 --> 00:09:09,949
but somebody injury to you tell the oh

00:09:07,009 --> 00:09:12,860
no don't touch that part it just works

00:09:09,949 --> 00:09:14,089
like that it doesn't need for factory -

00:09:12,860 --> 00:09:16,040
don't touch it

00:09:14,089 --> 00:09:20,509
not even with its take didn't look at it

00:09:16,040 --> 00:09:23,740
just at all yes I've been there so

00:09:20,509 --> 00:09:26,749
that's also an enforcement a bad one and

00:09:23,740 --> 00:09:30,499
another indicator is that everything is

00:09:26,749 --> 00:09:32,839
on fire all the time and sometimes we

00:09:30,499 --> 00:09:37,220
will have monitoring is good having

00:09:32,839 --> 00:09:39,499
monitoring and and having am sorry tools

00:09:37,220 --> 00:09:42,740
in place identify when something's fell

00:09:39,499 --> 00:09:46,430
in our system is good but when we're

00:09:42,740 --> 00:09:49,399
getting alarms all the time that

00:09:46,430 --> 00:09:51,920
everything is on fire all the time it's

00:09:49,399 --> 00:09:53,749
a very easy to lose sight of what it's

00:09:51,920 --> 00:09:55,579
really important and what is there

00:09:53,749 --> 00:09:57,769
really critical porridge a night there

00:09:55,579 --> 00:10:02,480
our code base or our infrastructure or

00:09:57,769 --> 00:10:05,120
our products and then it just seems that

00:10:02,480 --> 00:10:08,059
eventually because everything is ever

00:10:05,120 --> 00:10:10,870
all the time on fire you are a living in

00:10:08,059 --> 00:10:13,429
two dumpster in fiery so not only

00:10:10,870 --> 00:10:16,790
everything around you is failing but

00:10:13,429 --> 00:10:20,379
your team is constantly anxious like

00:10:16,790 --> 00:10:20,379
that little foal kinder

00:10:23,089 --> 00:10:29,209
also for those of you that work more in

00:10:25,579 --> 00:10:31,579
a more data intensive scenario having

00:10:29,209 --> 00:10:34,549
unstable or underutilized data

00:10:31,579 --> 00:10:36,079
dependencies is terrible for those of

00:10:34,549 --> 00:10:37,759
you of what well there are not very

00:10:36,079 --> 00:10:40,399
familiar with machine learning for

00:10:37,759 --> 00:10:42,859
example when we're trying to do

00:10:40,399 --> 00:10:45,019
predictions we tend to aggregate data

00:10:42,859 --> 00:10:47,649
from different sources so that can be

00:10:45,019 --> 00:10:50,389
different API is the friend databases

00:10:47,649 --> 00:10:52,429
but for us to be able to utilize this

00:10:50,389 --> 00:10:54,379
data and we need to do some

00:10:52,429 --> 00:10:56,659
transformation and some loading and made

00:10:54,379 --> 00:11:00,949
it make it accessible for other folks to

00:10:56,659 --> 00:11:05,299
use so if down the pipeline you end up

00:11:00,949 --> 00:11:07,699
with 30 databases and you're only only

00:11:05,299 --> 00:11:10,789
needing one then that means that you're

00:11:07,699 --> 00:11:12,139
having 29 databases that you still have

00:11:10,789 --> 00:11:14,359
to maintain that you still have to

00:11:12,139 --> 00:11:17,689
provision infrastructure that you still

00:11:14,359 --> 00:11:20,239
need to compute on to get to those or

00:11:17,689 --> 00:11:25,129
you only need one so that's also very

00:11:20,239 --> 00:11:28,009
very bad and pipeline jungles this is

00:11:25,129 --> 00:11:30,289
very related to the previous one worried

00:11:28,009 --> 00:11:32,899
all of these dependencies or data

00:11:30,289 --> 00:11:36,079
dependencies become intermingled so it

00:11:32,899 --> 00:11:39,709
becomes very hard to understand the word

00:11:36,079 --> 00:11:42,979
data is coming from and where it's going

00:11:39,709 --> 00:11:45,079
to so you can't really understand how

00:11:42,979 --> 00:11:47,479
their data is being utilized or how to

00:11:45,079 --> 00:11:53,929
improve the performance of this data

00:11:47,479 --> 00:11:55,699
transfer so now that we've covered all

00:11:53,929 --> 00:11:58,789
of these spreads of technical depth

00:11:55,699 --> 00:12:01,249
which is easier to do when we are

00:11:58,789 --> 00:12:03,669
dealing with this phenomenon either

00:12:01,249 --> 00:12:06,709
burning everything to the ground

00:12:03,669 --> 00:12:08,779
refactoring or a code base or a changer

00:12:06,709 --> 00:12:14,079
world-weary culture is to use sub

00:12:08,779 --> 00:12:14,079
pointing fingers this is number one

00:12:14,319 --> 00:12:21,259
number two for those that love

00:12:16,519 --> 00:12:25,929
refactoring and number three no it says

00:12:21,259 --> 00:12:29,780
easier now which is more impactful today

00:12:25,929 --> 00:12:32,780
one two three three

00:12:29,780 --> 00:12:34,970
it's of course than the hardest one it's

00:12:32,780 --> 00:12:37,040
the one that's gonna take more of my aim

00:12:34,970 --> 00:12:41,870
from the different stakeholders more

00:12:37,040 --> 00:12:43,280
time and probably a lot of fights so I'm

00:12:41,870 --> 00:12:47,120
gonna start doing it the story time

00:12:43,280 --> 00:12:49,490
because we all love stories and well

00:12:47,120 --> 00:12:52,280
George github universe you are going

00:12:49,490 --> 00:12:55,310
down the sponsored boots as we always do

00:12:52,280 --> 00:12:57,980
we're gathering swag like getting Jace

00:12:55,310 --> 00:13:00,500
near t-shirts and pins and exchanging

00:12:57,980 --> 00:13:02,090
pins with faults and you come up to this

00:13:00,500 --> 00:13:05,750
new birth

00:13:02,090 --> 00:13:08,630
that is labeled as The Wizard of Oz like

00:13:05,750 --> 00:13:12,080
oh okay I've never seen this fault so

00:13:08,630 --> 00:13:14,240
you approach the birth and the with

00:13:12,080 --> 00:13:21,280
story tells you he's gonna give you a

00:13:14,240 --> 00:13:21,280
present oh I like persons I love swag so

00:13:21,700 --> 00:13:29,810
this person comes with a set of rules or

00:13:25,460 --> 00:13:31,490
a with a set of conditions the first of

00:13:29,810 --> 00:13:33,770
this is that you have to build your

00:13:31,490 --> 00:13:36,380
present you have to put all the pieces

00:13:33,770 --> 00:13:39,620
together like okay I am cool with that I

00:13:36,380 --> 00:13:42,500
have built mechanical keyboards and I

00:13:39,620 --> 00:13:47,589
write code for a living so I'm cool with

00:13:42,500 --> 00:13:50,750
that with no instructions like well

00:13:47,589 --> 00:13:53,240
there is stuck overflow I can do some

00:13:50,750 --> 00:13:57,610
internet searching that's fine I do that

00:13:53,240 --> 00:13:57,610
all the time that's how I got a job

00:13:58,540 --> 00:14:06,800
there are more conscious even some

00:14:01,940 --> 00:14:09,260
pieces are my be missing so as you're

00:14:06,800 --> 00:14:12,710
building your present you'll have to

00:14:09,260 --> 00:14:16,310
build these pieces as well again with no

00:14:12,710 --> 00:14:18,170
or minimal instructions so because

00:14:16,310 --> 00:14:21,760
you're making this on the girl with no

00:14:18,170 --> 00:14:25,700
instructions some pieces might never fit

00:14:21,760 --> 00:14:27,800
so you'll have to use glue and tape and

00:14:25,700 --> 00:14:32,240
probably chewing gum to put them

00:14:27,800 --> 00:14:38,200
together which means that your present

00:14:32,240 --> 00:14:38,200
might or it might never work as expected

00:14:38,660 --> 00:14:47,149
and a wizard worst part you're gonna be

00:14:42,889 --> 00:14:48,949
miserable all the time and this picture

00:14:47,149 --> 00:14:50,720
is a very nice representation they're

00:14:48,949 --> 00:14:53,779
probably trying to put that piece of

00:14:50,720 --> 00:14:56,329
mirror on the ceiling and paste it with

00:14:53,779 --> 00:14:58,550
a piece of chewing gum so the next time

00:14:56,329 --> 00:15:01,449
that you're walking near it it might or

00:14:58,550 --> 00:15:04,579
might not fall on your head

00:15:01,449 --> 00:15:07,130
so when when you receive a present with

00:15:04,579 --> 00:15:09,290
all of these different God chests you

00:15:07,130 --> 00:15:12,470
realize that that's not a person that's

00:15:09,290 --> 00:15:18,139
some sort of a curse and what do you

00:15:12,470 --> 00:15:20,389
tell the Wizard of Oz go away wizard

00:15:18,139 --> 00:15:24,769
I don't want your curse I don't want

00:15:20,389 --> 00:15:28,880
your present so this is now replace the

00:15:24,769 --> 00:15:32,690
word Wizard of Oz by your monetary or a

00:15:28,880 --> 00:15:36,560
senior colleague or during onboarding

00:15:32,690 --> 00:15:38,720
body the present is the code or the code

00:15:36,560 --> 00:15:42,500
base that you are inheriting at your

00:15:38,720 --> 00:15:44,569
company and all of these little gotchas

00:15:42,500 --> 00:15:47,569
missing pieces is all the technical

00:15:44,569 --> 00:15:49,550
depth and the lack of instructions is

00:15:47,569 --> 00:15:51,230
the lack of documentation that we are

00:15:49,550 --> 00:15:57,740
facing when we are importing a new

00:15:51,230 --> 00:16:00,829
project how can we counteract all of

00:15:57,740 --> 00:16:04,009
these frustration one way to do it is

00:16:00,829 --> 00:16:07,730
writing the docs and the other way to do

00:16:04,009 --> 00:16:10,459
it is make Doc's valuable for the

00:16:07,730 --> 00:16:13,029
developers for your team for your

00:16:10,459 --> 00:16:13,029
customers

00:16:16,040 --> 00:16:21,860
dogs can be part of your work and you

00:16:19,400 --> 00:16:26,870
know the in teams were people were not

00:16:21,860 --> 00:16:28,970
writing dogs a a way to forest folks to

00:16:26,870 --> 00:16:29,680
start writing dogs is making a part of

00:16:28,970 --> 00:16:33,410
the job

00:16:29,680 --> 00:16:34,490
so no feature is complete or no new code

00:16:33,410 --> 00:16:37,520
base is complete

00:16:34,490 --> 00:16:42,260
if there are no equivalent comments or a

00:16:37,520 --> 00:16:45,740
documentation to go with it if you force

00:16:42,260 --> 00:16:47,570
this through using jury CI and testing

00:16:45,740 --> 00:16:49,850
your dogs and building your ducts

00:16:47,570 --> 00:16:51,730
through your continuous integration or

00:16:49,850 --> 00:16:58,190
your continuous delivery pipe lines

00:16:51,730 --> 00:16:59,900
during forcing these practices there is

00:16:58,190 --> 00:17:02,090
a bit of a trade-off here because it

00:16:59,900 --> 00:17:04,100
does worry from the technical

00:17:02,090 --> 00:17:07,520
perspective but also when you are trying

00:17:04,100 --> 00:17:08,990
to get Gerry team tie in you will

00:17:07,520 --> 00:17:13,430
probably find a lot of resistance

00:17:08,990 --> 00:17:15,290
because nobody likes writing dogs so I'm

00:17:13,430 --> 00:17:18,079
going to give some tips later and how

00:17:15,290 --> 00:17:22,280
you can probably incentivize folks to

00:17:18,079 --> 00:17:25,640
write them one of these is also when you

00:17:22,280 --> 00:17:29,390
are trying to write dogs especially for

00:17:25,640 --> 00:17:32,930
a library that you maintain or for a new

00:17:29,390 --> 00:17:35,420
feature that are implementing we don't

00:17:32,930 --> 00:17:38,150
like it because it feels like we have to

00:17:35,420 --> 00:17:40,040
do it but if that's something that we

00:17:38,150 --> 00:17:42,400
have to do it a good technique is thing

00:17:40,040 --> 00:17:45,170
that your best friend is going to read

00:17:42,400 --> 00:17:47,990
how do you want your best friend to be

00:17:45,170 --> 00:17:49,090
introduced to this new feature or to

00:17:47,990 --> 00:17:54,230
this new library

00:17:49,090 --> 00:17:57,110
be mindful how easy do you want it to be

00:17:54,230 --> 00:18:01,670
for them to enjoy Diaz and start using

00:17:57,110 --> 00:18:04,070
what you're evolving an example that is

00:18:01,670 --> 00:18:07,840
very well pristine the area where I work

00:18:04,070 --> 00:18:10,970
is a supply a lot of folks praise how

00:18:07,840 --> 00:18:13,760
completed documentation is how good it

00:18:10,970 --> 00:18:18,560
is for awarding new contributors as well

00:18:13,760 --> 00:18:22,160
as new users and a technique that I

00:18:18,560 --> 00:18:24,560
really like from them is whenever they

00:18:22,160 --> 00:18:27,740
find anything that is confusing or

00:18:24,560 --> 00:18:29,480
whenever a new contributor or a member

00:18:27,740 --> 00:18:31,220
identify something that is come

00:18:29,480 --> 00:18:33,919
few thing to get the newcomers to

00:18:31,220 --> 00:18:37,250
contribute back because they have less

00:18:33,919 --> 00:18:41,540
of that expert buyers than the core team

00:18:37,250 --> 00:18:43,850
normally has and by doing that the team

00:18:41,540 --> 00:18:47,320
has also been able to identify some

00:18:43,850 --> 00:18:49,700
critical bugs and fixes for this box

00:18:47,320 --> 00:18:52,429
because once you understand and you're

00:18:49,700 --> 00:18:56,710
so deep into the codebase it's very very

00:18:52,429 --> 00:18:56,710
hard to get rid of that expert bias

00:18:57,940 --> 00:19:04,669
something that is very important as well

00:19:01,130 --> 00:19:08,270
is thinking about the vocabulary and how

00:19:04,669 --> 00:19:09,290
we are writing this documentation for

00:19:08,270 --> 00:19:11,870
many many years

00:19:09,290 --> 00:19:16,429
us as developers or developers have used

00:19:11,870 --> 00:19:19,190
terms like mastery and slave but this

00:19:16,429 --> 00:19:21,620
can be extremely complex in terms of

00:19:19,190 --> 00:19:24,830
power structures and inclusiveness

00:19:21,620 --> 00:19:28,360
towards our a multicultural users and

00:19:24,830 --> 00:19:31,730
multicultural teams so whenever possible

00:19:28,360 --> 00:19:34,059
try to replace this terms for others

00:19:31,730 --> 00:19:36,650
that are more mindful and more inclusive

00:19:34,059 --> 00:19:39,500
for example a good alternative to

00:19:36,650 --> 00:19:44,090
mastering slave is using primary or

00:19:39,500 --> 00:19:48,160
replica quick captain and sailor worker

00:19:44,090 --> 00:19:50,090
and helper the same when we talk about

00:19:48,160 --> 00:19:53,600
blacklist and whitelist

00:19:50,090 --> 00:19:58,610
we can replace that with terms like deny

00:19:53,600 --> 00:20:02,030
list or allow lists and as you start

00:19:58,610 --> 00:20:04,610
using much more inclusive language on

00:20:02,030 --> 00:20:06,980
your documentation and be more mindful

00:20:04,610 --> 00:20:09,799
of both the people that are writing it

00:20:06,980 --> 00:20:12,049
and are reading it you can also start

00:20:09,799 --> 00:20:13,820
having dis conversations with your team

00:20:12,049 --> 00:20:16,370
and your routine will become much more

00:20:13,820 --> 00:20:19,510
mindful of those that are integrating

00:20:16,370 --> 00:20:19,510
your use-values ways

00:20:22,120 --> 00:20:26,860
if you don't want to manually go and

00:20:24,880 --> 00:20:29,950
check all your dogs and all of your

00:20:26,860 --> 00:20:32,830
white papers for this incidence there

00:20:29,950 --> 00:20:34,809
are different libraries in one library

00:20:32,830 --> 00:20:38,440
that will help you a lot to do this is

00:20:34,809 --> 00:20:41,970
called Daleks it's designed to catch

00:20:38,440 --> 00:20:44,500
these occurrences for example and

00:20:41,970 --> 00:20:46,890
incidents of Master and slave and they

00:20:44,500 --> 00:20:50,169
give you alternatives for you to use

00:20:46,890 --> 00:20:53,590
there are more gender neutral that are

00:20:50,169 --> 00:20:56,399
more inclusive and you can use this from

00:20:53,590 --> 00:20:59,529
your common line you can use this online

00:20:56,399 --> 00:21:02,320
they have different limitations if he is

00:20:59,529 --> 00:21:09,730
an even Visual Studio code there is an

00:21:02,320 --> 00:21:12,250
extension for that also we were writing

00:21:09,730 --> 00:21:14,440
documentation we have two levels like

00:21:12,250 --> 00:21:18,460
two different strands of documentation

00:21:14,440 --> 00:21:20,289
first is the comments or in code

00:21:18,460 --> 00:21:21,929
documentation versus the public-facing

00:21:20,289 --> 00:21:25,659
or the user-facing

00:21:21,929 --> 00:21:29,110
and curious where a lot of folks say

00:21:25,659 --> 00:21:30,789
well good code documents itself you

00:21:29,110 --> 00:21:32,700
don't need to write big documentation

00:21:30,789 --> 00:21:35,620
you don't need to write comments because

00:21:32,700 --> 00:21:39,820
documentation out dates easily and code

00:21:35,620 --> 00:21:42,190
doesn't some other folks say well if I

00:21:39,820 --> 00:21:45,549
don't write a documentation I'm the only

00:21:42,190 --> 00:21:49,750
one who knows how this work so they're

00:21:45,549 --> 00:21:52,450
never gonna replace me but the thing is

00:21:49,750 --> 00:21:55,330
code tells you how you're doing that

00:21:52,450 --> 00:21:57,640
how'd you achieve a certain thing if

00:21:55,330 --> 00:22:00,039
you're writing a function that retrieves

00:21:57,640 --> 00:22:03,730
data from a database and four months in

00:22:00,039 --> 00:22:06,190
a permit set in an appropriate usable

00:22:03,730 --> 00:22:09,850
way the code tells you how you're doing

00:22:06,190 --> 00:22:13,419
it but the comments inside re actually

00:22:09,850 --> 00:22:15,760
tells you why it gives a much bigger

00:22:13,419 --> 00:22:18,490
clarity and your process of thought as

00:22:15,760 --> 00:22:22,149
you were writing said function or it

00:22:18,490 --> 00:22:24,610
said method and they describe direct

00:22:22,149 --> 00:22:27,760
code to other developers to whoever is

00:22:24,610 --> 00:22:30,909
gonna take care of that code base later

00:22:27,760 --> 00:22:32,880
whether that is your new on board member

00:22:30,909 --> 00:22:36,620
or your best friend

00:22:32,880 --> 00:22:36,620
or yourself in six months time

00:22:39,290 --> 00:22:45,570
documentation on the other hand

00:22:41,240 --> 00:22:50,850
describes dysfunction or a dis methods

00:22:45,570 --> 00:22:52,470
functionality to your users and as a

00:22:50,850 --> 00:22:54,810
guideline when I tried to write

00:22:52,470 --> 00:22:57,210
documentation and help folks to improve

00:22:54,810 --> 00:23:00,710
your documentation I liked recommending

00:22:57,210 --> 00:23:04,350
tests that I called mindful structure

00:23:00,710 --> 00:23:07,440
again its main goal is to get folks up

00:23:04,350 --> 00:23:10,770
to speed as fast as possible you want to

00:23:07,440 --> 00:23:14,250
get your users to lower data of

00:23:10,770 --> 00:23:16,200
deputation or ingestion barrier and

00:23:14,250 --> 00:23:18,810
start using your product as fast as

00:23:16,200 --> 00:23:21,330
possible so if you first start by

00:23:18,810 --> 00:23:25,110
explaining featuring what is that it

00:23:21,330 --> 00:23:28,860
dose then describe some use cases how

00:23:25,110 --> 00:23:31,410
people might be able to use it and when

00:23:28,860 --> 00:23:34,620
is this function or this method better

00:23:31,410 --> 00:23:36,960
it another alternative if there is any

00:23:34,620 --> 00:23:39,570
additional recommended tooling or any

00:23:36,960 --> 00:23:42,420
additional recommended importance and

00:23:39,570 --> 00:23:44,570
also common error is very common gotcha

00:23:42,420 --> 00:23:48,720
this is something that is often missing

00:23:44,570 --> 00:23:52,950
documentation or sometimes we update

00:23:48,720 --> 00:23:55,680
databases it's sorry code bases we

00:23:52,950 --> 00:23:58,320
forget to add these little gotchas on

00:23:55,680 --> 00:24:03,000
this is imported now or a DS replaces

00:23:58,320 --> 00:24:05,250
odd so if we're writing to your

00:24:03,000 --> 00:24:08,250
documentation do realize that you're

00:24:05,250 --> 00:24:12,240
struggling a lot here is this mindful

00:24:08,250 --> 00:24:14,340
structure you may also need you might

00:24:12,240 --> 00:24:18,000
also find that you need to refactor it

00:24:14,340 --> 00:24:20,910
at specific piece of code because if

00:24:18,000 --> 00:24:22,830
it's not clear how do would you set when

00:24:20,910 --> 00:24:25,380
you would use it and when you wouldn't

00:24:22,830 --> 00:24:32,580
you said probably you need to improve

00:24:25,380 --> 00:24:34,400
that and I've mentioned a lot of times

00:24:32,580 --> 00:24:37,530
already that your documentation

00:24:34,400 --> 00:24:39,750
healthier user is to avoid Ori to use

00:24:37,530 --> 00:24:43,770
your feature or your library or your

00:24:39,750 --> 00:24:46,010
package but documentation is also helped

00:24:43,770 --> 00:24:50,240
your user is to make the right choice

00:24:46,010 --> 00:24:52,100
and you want this to be also Smith do

00:24:50,240 --> 00:24:55,250
you want them to use your product

00:24:52,100 --> 00:24:58,070
because it adds value to whatever

00:24:55,250 --> 00:25:00,620
they're doing not because they didn't

00:24:58,070 --> 00:25:03,559
know better but it's also a very good

00:25:00,620 --> 00:25:06,590
way to build trust between you as a

00:25:03,559 --> 00:25:12,980
developer and whoever is using jury tool

00:25:06,590 --> 00:25:15,140
or is contributing back to your tool and

00:25:12,980 --> 00:25:18,620
I'll also give them useful starting

00:25:15,140 --> 00:25:21,290
points something that I've that I like a

00:25:18,620 --> 00:25:23,510
lot is when you can start seeing how

00:25:21,290 --> 00:25:27,140
other people are using that tool

00:25:23,510 --> 00:25:29,390
straightaway and find a code or a

00:25:27,140 --> 00:25:34,429
workflow that will be parallel to your

00:25:29,390 --> 00:25:36,820
is also when you're writing your dogs

00:25:34,429 --> 00:25:40,040
trying to make the abstract tangible

00:25:36,820 --> 00:25:42,559
sometimes we like describing very

00:25:40,040 --> 00:25:45,290
complex architectures or very complex

00:25:42,559 --> 00:25:48,260
functions but we could do the same or

00:25:45,290 --> 00:25:52,850
achieve even more if we added schematics

00:25:48,260 --> 00:25:55,160
that are easier to read there are a lot

00:25:52,850 --> 00:25:57,770
of folks especially like me that are

00:25:55,160 --> 00:26:00,490
very visual so if you were to give me a

00:25:57,770 --> 00:26:03,530
schematic like this that explains how

00:26:00,490 --> 00:26:06,679
three different packages or libraries

00:26:03,530 --> 00:26:09,500
interact together I would understand it

00:26:06,679 --> 00:26:14,200
much more and much better and much

00:26:09,500 --> 00:26:17,750
faster than having described in words

00:26:14,200 --> 00:26:20,600
and also trying to introduce the people

00:26:17,750 --> 00:26:23,150
again who's going to be using jury tools

00:26:20,600 --> 00:26:26,330
how do you think they're going to be

00:26:23,150 --> 00:26:28,700
using them sometimes we can't anticipate

00:26:26,330 --> 00:26:32,210
who is going to be using my other tools

00:26:28,700 --> 00:26:35,600
but if you have a persona and you say

00:26:32,210 --> 00:26:37,429
well for example this developer Jane is

00:26:35,600 --> 00:26:41,030
trying to achieve that you can also

00:26:37,429 --> 00:26:48,350
drive how your dogs are being written to

00:26:41,030 --> 00:26:50,360
help avoid someone like Jane and also

00:26:48,350 --> 00:26:54,020
think about design patterns if you have

00:26:50,360 --> 00:26:57,110
a chance later on in is Montana gave a

00:26:54,020 --> 00:26:57,620
very very good keynote at PyCon India

00:26:57,110 --> 00:27:00,110
she

00:26:57,620 --> 00:27:01,970
one of the founders of Spacey that is a

00:27:00,110 --> 00:27:05,930
library for natural language processing

00:27:01,970 --> 00:27:09,920
and a really liked approach that they

00:27:05,930 --> 00:27:12,800
use worried their library tries to give

00:27:09,920 --> 00:27:15,740
them the power to do NLP but at the same

00:27:12,800 --> 00:27:20,420
time use the nicest features or deny

00:27:15,740 --> 00:27:23,710
cities of - so that way not only dari

00:27:20,420 --> 00:27:26,360
using interlibrary but they're utilizing

00:27:23,710 --> 00:27:30,890
pythoness language without them having

00:27:26,360 --> 00:27:34,160
to spend a lot of time supporting little

00:27:30,890 --> 00:27:37,310
features that would marginally make the

00:27:34,160 --> 00:27:42,110
developers work faster but will

00:27:37,310 --> 00:27:44,870
constrain them a lot so also think of

00:27:42,110 --> 00:27:47,510
that and in having documentation about

00:27:44,870 --> 00:27:49,580
the limitations and how's your tool

00:27:47,510 --> 00:27:57,890
integrates with other framework can be

00:27:49,580 --> 00:28:01,040
very very very useful again under under

00:27:57,890 --> 00:28:03,110
adolfs manual Docs we for it for many

00:28:01,040 --> 00:28:05,780
areas with not had to write our

00:28:03,110 --> 00:28:09,710
documentation manually or separately

00:28:05,780 --> 00:28:12,910
from our code if you're already adding

00:28:09,710 --> 00:28:16,450
comments or if you're already adding an

00:28:12,910 --> 00:28:18,890
explanation with the injury code waves

00:28:16,450 --> 00:28:21,620
there are a lot of libraries that allow

00:28:18,890 --> 00:28:24,490
you to generate literate programming or

00:28:21,620 --> 00:28:28,760
literally Lear literate sorry focused

00:28:24,490 --> 00:28:31,250
documentation something that I used a

00:28:28,760 --> 00:28:34,550
lot is Piko that is the implementation

00:28:31,250 --> 00:28:37,450
of dokgo because it gives you these very

00:28:34,550 --> 00:28:40,340
very nice views of documentation were

00:28:37,450 --> 00:28:42,440
you have the comments in your code base

00:28:40,340 --> 00:28:46,430
and then when to render d-dogs

00:28:42,440 --> 00:28:48,770
you see all the different dogs side by

00:28:46,430 --> 00:28:54,980
side - were in the code base that

00:28:48,770 --> 00:28:57,770
originates from so this should become

00:28:54,980 --> 00:29:00,380
easier and more natural because again if

00:28:57,770 --> 00:29:02,300
users start enforcing this as being part

00:29:00,380 --> 00:29:04,640
of their job being part of your

00:29:02,300 --> 00:29:07,980
pipelines you don't have to do extra

00:29:04,640 --> 00:29:10,409
manual level it's already integrated

00:29:07,980 --> 00:29:12,330
as one of the automated checks or one of

00:29:10,409 --> 00:29:15,600
the checks that you run along with

00:29:12,330 --> 00:29:17,639
testing and building and deploying so

00:29:15,600 --> 00:29:19,830
non-wage ensure that soon as you create

00:29:17,639 --> 00:29:22,470
a new release the equivalent

00:29:19,830 --> 00:29:26,990
documentation for that Nene release is

00:29:22,470 --> 00:29:26,990
also up to date and it's also maintained

00:29:27,500 --> 00:29:34,260
you know something that I've worked on a

00:29:30,269 --> 00:29:37,639
lot and with great success is having dr.

00:29:34,260 --> 00:29:40,889
Sprint's and this helps a lot with that

00:29:37,639 --> 00:29:44,610
notion of you're forcing all of a sudden

00:29:40,889 --> 00:29:46,950
injury team to write Doc's we organize a

00:29:44,610 --> 00:29:50,760
lot of code sprints or we organize

00:29:46,950 --> 00:29:54,450
hackathons why not organize saying dogs

00:29:50,760 --> 00:29:57,510
sprint nobody likes doing it but if you

00:29:54,450 --> 00:29:59,970
sit people together and it had all

00:29:57,510 --> 00:30:02,880
regular timings and probably bring tail

00:29:59,970 --> 00:30:06,570
traits like I don't know done it's or

00:30:02,880 --> 00:30:11,460
fruit sorry hello my fries whatever your

00:30:06,570 --> 00:30:13,049
team likes then they feel like they are

00:30:11,460 --> 00:30:13,639
all on the same board did they help each

00:30:13,049 --> 00:30:16,590
other

00:30:13,639 --> 00:30:19,440
but also let them choose give them the

00:30:16,590 --> 00:30:22,110
freedom to choose on what documentation

00:30:19,440 --> 00:30:24,260
they want to start working on in most

00:30:22,110 --> 00:30:26,610
cases people are gonna start working on

00:30:24,260 --> 00:30:29,519
documentation for features that they

00:30:26,610 --> 00:30:34,230
implemented themselves but never had

00:30:29,519 --> 00:30:37,399
time to go back and document if enjoy

00:30:34,230 --> 00:30:41,549
team you have both native and non-native

00:30:37,399 --> 00:30:43,019
English speakers or German speakers or

00:30:41,549 --> 00:30:45,539
French speaker is what average or

00:30:43,019 --> 00:30:53,309
documentation language is paired them

00:30:45,539 --> 00:30:58,049
together so make it a joy of writing

00:30:53,309 --> 00:31:01,289
Docs and I really like this this suite

00:30:58,049 --> 00:31:03,779
from a book - that we were running were

00:31:01,289 --> 00:31:06,600
we were never expecting someone to come

00:31:03,779 --> 00:31:12,799
and say I really really enjoyed writing

00:31:06,600 --> 00:31:16,350
a chapter on linting on linting right um

00:31:12,799 --> 00:31:18,750
but when you said the right the right

00:31:16,350 --> 00:31:20,210
mind frame and the right environment

00:31:18,750 --> 00:31:25,730
people can actually

00:31:20,210 --> 00:31:28,730
start enjoying writing dogs I'm just as

00:31:25,730 --> 00:31:30,710
important as it is to recognize those

00:31:28,730 --> 00:31:33,040
who country to Georgia commit to your

00:31:30,710 --> 00:31:35,660
code it's important to recommend and

00:31:33,040 --> 00:31:40,520
recognize those that are a contributing

00:31:35,660 --> 00:31:42,580
to your Ducks and that can be writing

00:31:40,520 --> 00:31:45,770
and tearing your pieces of documentation

00:31:42,580 --> 00:31:48,290
fixing typos and making it more

00:31:45,770 --> 00:31:51,430
accessible again make it easy

00:31:48,290 --> 00:32:00,140
making it easier for those newcomers to

00:31:51,430 --> 00:32:04,450
embarked so why ducks why do I recommend

00:32:00,140 --> 00:32:09,200
and I've successfully used documentation

00:32:04,450 --> 00:32:11,720
to change culture first because the

00:32:09,200 --> 00:32:15,200
documentation is an open window or an

00:32:11,720 --> 00:32:17,930
open Tory to jury code to your codebase

00:32:15,200 --> 00:32:22,190
it exposes it to the world but also it

00:32:17,930 --> 00:32:25,130
exposes your team culture a lot once you

00:32:22,190 --> 00:32:26,780
start integrating something that people

00:32:25,130 --> 00:32:29,450
don't really enjoy like writing

00:32:26,780 --> 00:32:31,970
documentation and start bringing the

00:32:29,450 --> 00:32:35,540
people back into the process your jury

00:32:31,970 --> 00:32:37,400
still and now placing jury teammates and

00:32:35,540 --> 00:32:40,280
jury developer is in the correct mindset

00:32:37,400 --> 00:32:44,090
to be more mindful also about pull

00:32:40,280 --> 00:32:47,360
requests or more active or more mindful

00:32:44,090 --> 00:32:49,850
when reviewing code people also start

00:32:47,360 --> 00:32:52,520
becoming more mindful when you are doing

00:32:49,850 --> 00:32:55,100
the sprints planning because then you

00:32:52,520 --> 00:32:58,100
have to factor in the documentation then

00:32:55,100 --> 00:33:02,540
it's go in dirt and a review of the

00:32:58,100 --> 00:33:05,600
documentation they can also help you to

00:33:02,540 --> 00:33:08,210
expose those code smells and identify

00:33:05,600 --> 00:33:10,190
pirates that might need refactoring or

00:33:08,210 --> 00:33:15,170
are not as usable as you would like them

00:33:10,190 --> 00:33:18,080
to it also helps you to keep your

00:33:15,170 --> 00:33:19,730
institutional knowledge so when that

00:33:18,080 --> 00:33:23,150
person that has not been documenting

00:33:19,730 --> 00:33:27,920
your codebase for eight or ten months or

00:33:23,150 --> 00:33:29,990
83 years leaves the company it's because

00:33:27,920 --> 00:33:32,990
they decided to go to somewhere else

00:33:29,990 --> 00:33:33,860
probably but jury during knowledge and

00:33:32,990 --> 00:33:37,340
your codebase

00:33:33,860 --> 00:33:40,070
safe and you can build and dad and your

00:33:37,340 --> 00:33:43,309
reduce that card and that house of cards

00:33:40,070 --> 00:33:49,910
effect as well and it also protects you

00:33:43,309 --> 00:33:53,750
against time Turing it's in general

00:33:49,910 --> 00:33:55,700
having all of this viewpoint on

00:33:53,750 --> 00:33:58,880
documentation as a first-class citizen

00:33:55,700 --> 00:34:02,360
in our eco development also help people

00:33:58,880 --> 00:34:04,580
to be happier at work and also helps

00:34:02,360 --> 00:34:07,700
your user is to be happier when

00:34:04,580 --> 00:34:13,550
consuming your products so both are more

00:34:07,700 --> 00:34:17,300
likely to stay around so under note

00:34:13,550 --> 00:34:19,520
there are how do you start using dogs to

00:34:17,300 --> 00:34:24,350
change your culture or e to bring your

00:34:19,520 --> 00:34:26,960
people back into the process throughout

00:34:24,350 --> 00:34:30,470
this presentation I have discussed three

00:34:26,960 --> 00:34:34,310
main parts which is what is the

00:34:30,470 --> 00:34:36,200
technical depth what is what are some

00:34:34,310 --> 00:34:40,520
practices for documentation and how to

00:34:36,200 --> 00:34:42,440
integrate so for us to be successful in

00:34:40,520 --> 00:34:44,780
this process we have to first accept

00:34:42,440 --> 00:34:46,419
that we have a problem and stop pointing

00:34:44,780 --> 00:34:49,310
fingers

00:34:46,419 --> 00:34:52,550
we're probably gonna encounter ourselves

00:34:49,310 --> 00:34:54,889
in technical depth a good exercise is

00:34:52,550 --> 00:34:57,250
trying to rethink about those bad

00:34:54,889 --> 00:35:00,530
decisions that led to technical depth

00:34:57,250 --> 00:35:03,109
but not to point fingers at or blame

00:35:00,530 --> 00:35:08,960
someone but to better understand how we

00:35:03,109 --> 00:35:13,160
can start repaying this depth the second

00:35:08,960 --> 00:35:15,920
step would be to use documentation to

00:35:13,160 --> 00:35:18,859
identify the suffering code smells and

00:35:15,920 --> 00:35:21,440
pay technical debt make sure that if

00:35:18,859 --> 00:35:25,390
you're using the mindful documentation

00:35:21,440 --> 00:35:28,690
structure or if you are refactoring

00:35:25,390 --> 00:35:31,640
enjoy documentation to remove

00:35:28,690 --> 00:35:35,690
non-inclusive terms then also you might

00:35:31,640 --> 00:35:38,330
refactor in some parts and again bring

00:35:35,690 --> 00:35:41,540
people back into the process and drive

00:35:38,330 --> 00:35:44,000
culture change this is again the more

00:35:41,540 --> 00:35:45,590
you bring jury developers into writing

00:35:44,000 --> 00:35:46,490
documentation the more you bring the

00:35:45,590 --> 00:35:48,740
personas and

00:35:46,490 --> 00:35:52,550
scenarios of the users into how to write

00:35:48,740 --> 00:35:55,070
documentation you also put your users in

00:35:52,550 --> 00:35:57,619
the plane in the first stage so you can

00:35:55,070 --> 00:35:59,510
develop features that will be useful for

00:35:57,619 --> 00:36:04,010
them and meaningful for them in the

00:35:59,510 --> 00:36:06,290
future and also people start becoming

00:36:04,010 --> 00:36:09,070
much more accountable your team will

00:36:06,290 --> 00:36:12,230
become much more accountable and sorry

00:36:09,070 --> 00:36:15,910
thinking about writing dogs saying no to

00:36:12,230 --> 00:36:25,040
time turn probably saying now to

00:36:15,910 --> 00:36:27,800
unnecessary complexity so if you want to

00:36:25,040 --> 00:36:31,100
try and drive change again as one

00:36:27,800 --> 00:36:36,560
identify and accept or adapt use the

00:36:31,100 --> 00:36:39,200
dogs and bring people back that is it

00:36:36,560 --> 00:36:41,840
thank you very much getting touched

00:36:39,200 --> 00:36:44,710
derice my twitter is you can find it on

00:36:41,840 --> 00:36:46,880
Twitter yet check there is also my email

00:36:44,710 --> 00:36:50,390
and these slides are gonna be available

00:36:46,880 --> 00:36:52,070
after this session if you try to go to

00:36:50,390 --> 00:36:55,900
your hole is going to give you a 404 at

00:36:52,070 --> 00:36:58,310
the moment and I'm gonna be also around

00:36:55,900 --> 00:37:00,140
github the univer is today and tomorrow

00:36:58,310 --> 00:37:04,430
is if you want to talk anything about

00:37:00,140 --> 00:37:08,859
dogs CI CD and machine learning I'm

00:37:04,430 --> 00:37:08,859
happy to talk to you thank you

00:37:08,960 --> 00:37:37,300

YouTube URL: https://www.youtube.com/watch?v=BctzNj1RcPU


