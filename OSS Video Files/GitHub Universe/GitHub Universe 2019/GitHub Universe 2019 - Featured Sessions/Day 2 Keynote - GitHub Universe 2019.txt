Title: Day 2 Keynote - GitHub Universe 2019
Publication date: 2019-12-13
Playlist: GitHub Universe 2019 - Featured Sessions
Description: 
	Today at GitHub Universe, we announced GitHub Security Lab to bring together security researchers, maintainers, and companies across the industry who share our belief that the security of open source is important for everyone.

As part of today’s announcement, GitHub Security Lab is making CodeQL freely available for anyone to find vulnerabilities in open source code. CodeQL is a tool many security research teams around the world use to perform semantic analysis of code, and we’ve used it ourselves to find over 100 reported CVEs in some of the most popular open source projects.

We’re also launching the GitHub Advisory Database, a public database of advisories created on GitHub, plus additional data curated and mapped to packages tracked by the GitHub dependency graph.

For more information, check out our blog post: https://github.blog/2019-11-14-announcing-github-security-lab-securing-the-worlds-code-together/

About GitHub Universe:
GitHub Universe is a two-day conference dedicated to the creativity and curiosity of the largest software community in the world. Sessions cover topics from team culture to open source software across industries and technologies.

For more information on GitHub Universe, check the website:
https://githubuniverse.com
Captions: 
	00:00:00,540 --> 00:00:09,690
[Music]

00:00:06,979 --> 00:00:14,360
please welcome the chief operating

00:00:09,690 --> 00:00:14,360
officer of github Erica brush I

00:00:16,100 --> 00:00:21,600
[Applause]

00:00:17,970 --> 00:00:23,790
good morning everyone and thank you for

00:00:21,600 --> 00:00:26,910
being here and joining us to kick off

00:00:23,790 --> 00:00:30,360
day 2 of universe I hope you had a

00:00:26,910 --> 00:00:32,610
fantastic time yesterday meeting Hubbard

00:00:30,360 --> 00:00:36,510
others in the community and learning

00:00:32,610 --> 00:00:39,420
from each other at github our mission is

00:00:36,510 --> 00:00:42,570
to be the home for all developers all

00:00:39,420 --> 00:00:45,300
developers that's a pretty monumental

00:00:42,570 --> 00:00:49,110
task when you think about what it really

00:00:45,300 --> 00:00:51,900
means as not shared yesterday there are

00:00:49,110 --> 00:00:55,890
over 40 million developers on the github

00:00:51,900 --> 00:00:58,170
platform today 40 million that's more

00:00:55,890 --> 00:01:01,890
than the population of most countries

00:00:58,170 --> 00:01:04,350
and those developers are writing code in

00:01:01,890 --> 00:01:07,440
over three hundred and seventy different

00:01:04,350 --> 00:01:10,620
languages and for a huge variety of

00:01:07,440 --> 00:01:14,250
purposes from healthcare to machine

00:01:10,620 --> 00:01:19,229
learning to finance video games help

00:01:14,250 --> 00:01:23,580
sorry automotive mobile nonprofits and

00:01:19,229 --> 00:01:27,510
more and these folks are developing

00:01:23,580 --> 00:01:29,910
software all over the world over 80% of

00:01:27,510 --> 00:01:33,420
open source is now developed outside of

00:01:29,910 --> 00:01:36,000
the US so there are all of these

00:01:33,420 --> 00:01:39,420
developers building all of this software

00:01:36,000 --> 00:01:42,060
for so many different reasons and for

00:01:39,420 --> 00:01:44,520
people all over the world these folks

00:01:42,060 --> 00:01:46,710
have different workflows different tools

00:01:44,520 --> 00:01:49,520
that they depend on and different ways

00:01:46,710 --> 00:01:52,560
that they collaborate across their teams

00:01:49,520 --> 00:01:54,780
we're lucky to work with some incredibly

00:01:52,560 --> 00:01:57,630
talented developers at github but

00:01:54,780 --> 00:02:00,090
there's no way that their creativity can

00:01:57,630 --> 00:02:03,720
match that of the over 40 million

00:02:00,090 --> 00:02:06,330
developers using github today that's why

00:02:03,720 --> 00:02:09,479
the ecosystem is so important to us and

00:02:06,330 --> 00:02:12,900
why delivering an open platform with

00:02:09,479 --> 00:02:17,819
robust api's is so core to what makes

00:02:12,900 --> 00:02:19,980
github github now we talked a lot about

00:02:17,819 --> 00:02:22,230
developers but another way to look at

00:02:19,980 --> 00:02:25,910
the ecosystem is in the dependency graph

00:02:22,230 --> 00:02:28,530
and how packages depend on one another

00:02:25,910 --> 00:02:30,600
we might be working with vastly

00:02:28,530 --> 00:02:31,710
different problems in different

00:02:30,600 --> 00:02:34,770
languages

00:02:31,710 --> 00:02:37,250
from places all over the world but

00:02:34,770 --> 00:02:39,600
everyone building software today is

00:02:37,250 --> 00:02:43,860
reliant on the broader open source

00:02:39,600 --> 00:02:47,460
community after all 99% of software

00:02:43,860 --> 00:02:49,830
projects depend on open source so each

00:02:47,460 --> 00:02:52,260
time you pull in an open source package

00:02:49,830 --> 00:02:55,770
you're pulling in all of that packages

00:02:52,260 --> 00:02:58,530
dependencies as well in fact open source

00:02:55,770 --> 00:03:00,390
projects on github have over a hundred

00:02:58,530 --> 00:03:03,360
and eighty different package

00:03:00,390 --> 00:03:06,120
dependencies and some of the most

00:03:03,360 --> 00:03:08,100
popular open source projects have a huge

00:03:06,120 --> 00:03:12,620
number of projects that depend on them

00:03:08,100 --> 00:03:16,230
for example the MDM packages have over

00:03:12,620 --> 00:03:19,890
3.5 million projects that depend on them

00:03:16,230 --> 00:03:22,080
so an issue in one of those packages can

00:03:19,890 --> 00:03:25,040
cause problems for thousands or even

00:03:22,080 --> 00:03:27,810
millions of projects that depend on it

00:03:25,040 --> 00:03:29,790
at github we feel it's our

00:03:27,810 --> 00:03:32,670
responsibility to ensure we're giving

00:03:29,790 --> 00:03:36,510
developers to build tool great safe

00:03:32,670 --> 00:03:40,860
software so that we can truly depend on

00:03:36,510 --> 00:03:43,950
our dependency trees and by safe I mean

00:03:40,860 --> 00:03:46,830
secure now normally security

00:03:43,950 --> 00:03:47,880
conversations are about fear but I don't

00:03:46,830 --> 00:03:50,250
see it that way

00:03:47,880 --> 00:03:52,170
security is the enabler that allows us

00:03:50,250 --> 00:03:55,380
to benefit from the exponential

00:03:52,170 --> 00:03:58,050
productivity impact of open source if we

00:03:55,380 --> 00:04:00,660
can build applications and consume open

00:03:58,050 --> 00:04:02,850
source with confidence then nothing

00:04:00,660 --> 00:04:05,370
stands in our way now

00:04:02,850 --> 00:04:08,280
we know that we can't secure the world's

00:04:05,370 --> 00:04:11,460
code on our own no one company can do

00:04:08,280 --> 00:04:14,070
that our goal is enable to enable the

00:04:11,460 --> 00:04:16,770
world software community to secure the

00:04:14,070 --> 00:04:19,380
software that we all depend on I'd like

00:04:16,770 --> 00:04:21,450
to invite Jayme cool our VP of security

00:04:19,380 --> 00:04:23,520
offerings to walk through how we're

00:04:21,450 --> 00:04:25,950
approaching security at github

00:04:23,520 --> 00:04:27,270
welcome Jaime

00:04:25,950 --> 00:04:28,630
[Applause]

00:04:27,270 --> 00:04:34,960
[Music]

00:04:28,630 --> 00:04:36,500
[Applause]

00:04:34,960 --> 00:04:39,530
thanks Erica

00:04:36,500 --> 00:04:42,440
now at github security is something that

00:04:39,530 --> 00:04:44,030
we take incredibly seriously so much of

00:04:42,440 --> 00:04:45,650
the world's development now happens on

00:04:44,030 --> 00:04:47,720
github that it's something that we think

00:04:45,650 --> 00:04:50,300
of not just as an opportunity but really

00:04:47,720 --> 00:04:51,920
a responsibility so I want to spend the

00:04:50,300 --> 00:04:53,990
next few minutes and talk about our

00:04:51,920 --> 00:04:54,950
overall approach to security and along

00:04:53,990 --> 00:04:57,860
the way I've got some pretty cool

00:04:54,950 --> 00:04:59,710
announcements to show you as well the

00:04:57,860 --> 00:05:02,240
place I want to start is really with the

00:04:59,710 --> 00:05:05,210
simplest of all possible scenarios

00:05:02,240 --> 00:05:07,730
developers not leaking the credentials

00:05:05,210 --> 00:05:09,380
to their application and the reason I

00:05:07,730 --> 00:05:11,810
want to start there is because even in

00:05:09,380 --> 00:05:13,700
this most simple of examples it shows

00:05:11,810 --> 00:05:16,190
that it's a problem that we cannot solve

00:05:13,700 --> 00:05:18,800
by yourself so the open web application

00:05:16,190 --> 00:05:20,390
security project keeps a running list of

00:05:18,800 --> 00:05:22,580
the top 10 web app web app

00:05:20,390 --> 00:05:23,990
vulnerabilities and it has the types of

00:05:22,580 --> 00:05:25,850
things that you would expect sequel

00:05:23,990 --> 00:05:27,950
injection attacks cross-site scripting

00:05:25,850 --> 00:05:29,210
but I actually think that the next time

00:05:27,950 --> 00:05:32,240
they update that they need to have a

00:05:29,210 --> 00:05:34,100
special category all to itself just for

00:05:32,240 --> 00:05:35,990
developers checking in their application

00:05:34,100 --> 00:05:39,350
tokens into their source repository

00:05:35,990 --> 00:05:40,850
because they do it all the time I know

00:05:39,350 --> 00:05:44,120
this because just in the last month

00:05:40,850 --> 00:05:46,280
we've detected over 800,000 potential to

00:05:44,120 --> 00:05:48,980
mo tokens that had been committed into

00:05:46,280 --> 00:05:51,260
github public repos the reason why we're

00:05:48,980 --> 00:05:54,830
able to know this is that we have a

00:05:51,260 --> 00:05:56,690
service that scans repos looking for

00:05:54,830 --> 00:05:58,760
potential tokens so we'll sum find

00:05:56,690 --> 00:06:00,560
something that looks like a token and

00:05:58,760 --> 00:06:02,930
then help go through a remediation

00:06:00,560 --> 00:06:05,090
workflow to get the developer yeah to

00:06:02,930 --> 00:06:07,160
update the code to something like what

00:06:05,090 --> 00:06:08,570
it should be but think about what it

00:06:07,160 --> 00:06:10,700
takes for us to really go and do this

00:06:08,570 --> 00:06:12,440
there are so many different services and

00:06:10,700 --> 00:06:14,780
so many different types of tokens out

00:06:12,440 --> 00:06:17,240
there how do we get hub know that this

00:06:14,780 --> 00:06:19,010
was a token and even if we knew it was a

00:06:17,240 --> 00:06:21,020
token how do we know it's actually an

00:06:19,010 --> 00:06:23,150
active token that could be used it's not

00:06:21,020 --> 00:06:25,880
our service and even if we knew it was

00:06:23,150 --> 00:06:27,470
an active token what do we do about it

00:06:25,880 --> 00:06:30,050
we can't go and remediate it it's not

00:06:27,470 --> 00:06:33,230
our token so the answer to this is we

00:06:30,050 --> 00:06:36,080
partner so we work with a whole set of

00:06:33,230 --> 00:06:38,690
partners to secure this and the way that

00:06:36,080 --> 00:06:40,850
this works is that they tell us what

00:06:38,690 --> 00:06:42,320
their tokens look like when we find one

00:06:40,850 --> 00:06:44,000
that matches we tell them about that

00:06:42,320 --> 00:06:44,850
possibility and they can go and check to

00:06:44,000 --> 00:06:46,470
see if it's an

00:06:44,850 --> 00:06:48,540
to token and then take the right action

00:06:46,470 --> 00:06:50,310
for their service and it means that if

00:06:48,540 --> 00:06:52,920
you're a user of one of these services

00:06:50,310 --> 00:06:55,500
you have to worry a lot less about your

00:06:52,920 --> 00:06:57,120
developers leaking your tokens and I'm

00:06:55,500 --> 00:06:59,670
thrilled to announce that today we have

00:06:57,120 --> 00:07:02,580
four new partners that are joining us to

00:06:59,670 --> 00:07:04,710
detect tokens hashey Corp postman go

00:07:02,580 --> 00:07:06,750
card 'let go cardless and Tencent cloud

00:07:04,710 --> 00:07:08,160
I'm thrilled to have them and if there's

00:07:06,750 --> 00:07:10,050
anybody listening here that is

00:07:08,160 --> 00:07:14,040
interested in participating in this with

00:07:10,050 --> 00:07:15,540
their service please reach out now I

00:07:14,040 --> 00:07:19,170
want to talk about a problem that is

00:07:15,540 --> 00:07:21,870
just slightly more complicated which is

00:07:19,170 --> 00:07:25,140
trying to secure the open source supply

00:07:21,870 --> 00:07:27,090
chain so like Erika mentioned the depth

00:07:25,140 --> 00:07:29,940
and complexity of applications today is

00:07:27,090 --> 00:07:32,550
exploding and it's all powered by open

00:07:29,940 --> 00:07:34,500
source and this is fantastic the place

00:07:32,550 --> 00:07:36,870
where this really becomes real for me is

00:07:34,500 --> 00:07:39,810
with the dependency graph you can go on

00:07:36,870 --> 00:07:41,520
any repo today on github and look and

00:07:39,810 --> 00:07:43,740
see what the dependencies of it actually

00:07:41,520 --> 00:07:45,960
are so pick your favorite repo any open

00:07:43,740 --> 00:07:48,150
source project for example and go and

00:07:45,960 --> 00:07:49,710
you will see that there are so many

00:07:48,150 --> 00:07:51,420
dependencies of dependencies of

00:07:49,710 --> 00:07:53,070
dependencies of dependencies it's kind

00:07:51,420 --> 00:07:54,510
of crazy but this is a great you get

00:07:53,070 --> 00:07:55,680
thousands of committers that are helping

00:07:54,510 --> 00:07:57,600
you go faster and building your

00:07:55,680 --> 00:07:59,460
application but it also means you have

00:07:57,600 --> 00:08:02,970
thousands of committers that you have to

00:07:59,460 --> 00:08:05,940
take care of in terms of in terms of

00:08:02,970 --> 00:08:08,280
written risk exposure so what happens

00:08:05,940 --> 00:08:09,990
when something goes wrong here open

00:08:08,280 --> 00:08:12,540
source has to be something that we can

00:08:09,990 --> 00:08:14,580
all use with confidence we can use with

00:08:12,540 --> 00:08:16,110
safety and because so much of it lives

00:08:14,580 --> 00:08:17,550
on github this is a problem that we

00:08:16,110 --> 00:08:20,550
really wanted to see what we could do

00:08:17,550 --> 00:08:23,070
about so we step back and we ask

00:08:20,550 --> 00:08:24,840
ourselves who are all of the types of

00:08:23,070 --> 00:08:26,850
participants that are involved in this

00:08:24,840 --> 00:08:29,250
supply chain and there are quite a lot

00:08:26,850 --> 00:08:31,260
from security researchers to developers

00:08:29,250 --> 00:08:32,729
maintainer x' and organizational

00:08:31,260 --> 00:08:35,820
security teams and they all have to be

00:08:32,729 --> 00:08:38,430
able to work together as part of this if

00:08:35,820 --> 00:08:41,280
we look at what a typical workflow looks

00:08:38,430 --> 00:08:44,190
like you see all of these roles and you

00:08:41,280 --> 00:08:45,960
see all the problems that come out let's

00:08:44,190 --> 00:08:47,730
start with security researchers these

00:08:45,960 --> 00:08:49,500
are the folks that find the majority of

00:08:47,730 --> 00:08:52,380
the actual security vulnerabilities but

00:08:49,500 --> 00:08:53,970
even today in 2019 and even when you

00:08:52,380 --> 00:08:55,920
have access to much of the source code

00:08:53,970 --> 00:08:58,360
finding those vulnerabilities is often

00:08:55,920 --> 00:08:59,980
an extremely manual process and then

00:08:58,360 --> 00:09:01,959
to find the issue what do you do like

00:08:59,980 --> 00:09:04,120
how do if you don't know anything you

00:09:01,959 --> 00:09:05,680
don't know anybody in the project how do

00:09:04,120 --> 00:09:06,850
you reach out and tell them about this

00:09:05,680 --> 00:09:09,100
security vulnerability without

00:09:06,850 --> 00:09:10,899
disclosing it to the world and then

00:09:09,100 --> 00:09:12,700
maintainer x' maintainer is already are

00:09:10,899 --> 00:09:13,899
busy enough but they now have to be

00:09:12,700 --> 00:09:15,970
responsible for fixing these

00:09:13,899 --> 00:09:18,910
vulnerabilities and because open-source

00:09:15,970 --> 00:09:20,649
repos are public you don't typically

00:09:18,910 --> 00:09:21,760
want to fix security vulnerabilities in

00:09:20,649 --> 00:09:23,230
the open because you don't want to

00:09:21,760 --> 00:09:24,490
disclose them it means you often can't

00:09:23,230 --> 00:09:26,890
even use the same tools and workflows

00:09:24,490 --> 00:09:28,180
that you're used to when you fix these

00:09:26,890 --> 00:09:29,890
vulnerabilities and then you have to

00:09:28,180 --> 00:09:31,570
notify all of the people in the world

00:09:29,890 --> 00:09:33,450
that are using this vault using this

00:09:31,570 --> 00:09:36,339
project how do you go and do that and

00:09:33,450 --> 00:09:38,920
then finally developers have to actually

00:09:36,339 --> 00:09:40,779
update to this application and how many

00:09:38,920 --> 00:09:43,329
times have we seen a security

00:09:40,779 --> 00:09:45,760
vulnerability that was found and fixed

00:09:43,329 --> 00:09:48,040
and months later exploited because the

00:09:45,760 --> 00:09:50,230
application simply didn't update to the

00:09:48,040 --> 00:09:52,959
new version and kind of the worst from

00:09:50,230 --> 00:09:54,399
my standpoint is that these same type of

00:09:52,959 --> 00:09:56,200
vulnerabilities happen again and again

00:09:54,399 --> 00:09:58,959
and again how many times have we read an

00:09:56,200 --> 00:10:00,519
article about a buffer overflow issue or

00:09:58,959 --> 00:10:02,170
a cross-site scripting issue the same

00:10:00,519 --> 00:10:04,510
types of problems come up and up up

00:10:02,170 --> 00:10:06,459
again and again so we've been putting a

00:10:04,510 --> 00:10:09,370
lot of energy in to see what we could do

00:10:06,459 --> 00:10:11,079
that to help all of all of these roles

00:10:09,370 --> 00:10:13,420
work together to try and fix this

00:10:11,079 --> 00:10:14,769
problem but it's easier to show than it

00:10:13,420 --> 00:10:21,250
is to talk about so let's go look at a

00:10:14,769 --> 00:10:22,959
demo so we're gonna go through that

00:10:21,250 --> 00:10:25,089
end-to-end flow and we're gonna start as

00:10:22,959 --> 00:10:27,130
a security researcher so I'm a security

00:10:25,089 --> 00:10:29,500
researcher I found a vulnerability and

00:10:27,130 --> 00:10:32,079
let's say I found the vulnerability in

00:10:29,500 --> 00:10:34,630
the public web pack project and I want

00:10:32,079 --> 00:10:36,399
to report it how would I do that well

00:10:34,630 --> 00:10:38,170
the logical thing to do would be to go

00:10:36,399 --> 00:10:40,180
where the web pack maintainer x' live

00:10:38,170 --> 00:10:42,519
which is at the web pack repo on github

00:10:40,180 --> 00:10:44,019
and then the logical thing to do would

00:10:42,519 --> 00:10:46,089
be to go where you report issues to

00:10:44,019 --> 00:10:49,140
 web pack which is on their

00:10:46,089 --> 00:10:51,279
issues page so if I create a new issue

00:10:49,140 --> 00:10:53,470
you'll see that there's something that's

00:10:51,279 --> 00:10:55,779
telling me the path I should take for

00:10:53,470 --> 00:10:57,579
reporting a security vulnerability so we

00:10:55,779 --> 00:10:59,620
support security policies which allow

00:10:57,579 --> 00:11:01,959
maintainer x' to specify how they would

00:10:59,620 --> 00:11:05,440
like to see security vulnerabilities

00:11:01,959 --> 00:11:07,029
reported to their repository now once

00:11:05,440 --> 00:11:09,250
you know about a security vulnerability

00:11:07,029 --> 00:11:12,240
as a maintainer it's time to fix it and

00:11:09,250 --> 00:11:15,130
that's where security advisories come in

00:11:12,240 --> 00:11:18,250
security advisories are a concept that

00:11:15,130 --> 00:11:19,690
provide a mechanism for a maintainer to

00:11:18,250 --> 00:11:21,880
work in private

00:11:19,690 --> 00:11:23,200
even on a public repo to fix that

00:11:21,880 --> 00:11:25,150
security vulnerability and then

00:11:23,200 --> 00:11:27,280
ultimately to publish it to the world

00:11:25,150 --> 00:11:29,830
so here I have an example of a draft

00:11:27,280 --> 00:11:32,350
security vulnerability where it hasn't

00:11:29,830 --> 00:11:33,940
been fixed quite yet and I want to I

00:11:32,350 --> 00:11:35,530
want to color I want to actually go

00:11:33,940 --> 00:11:38,350
through collaborating so this is a space

00:11:35,530 --> 00:11:39,610
much like a pull request where the team

00:11:38,350 --> 00:11:42,700
can come in and discuss the

00:11:39,610 --> 00:11:44,830
vulnerability in private I can invite

00:11:42,700 --> 00:11:46,360
whoever I want so if I wanted to invite

00:11:44,830 --> 00:11:49,480
even the person that originally reported

00:11:46,360 --> 00:11:51,850
the security vulnerability I can I can

00:11:49,480 --> 00:11:53,050
specify metadata like how severe the

00:11:51,850 --> 00:11:54,880
vulnerability is what package that

00:11:53,050 --> 00:11:57,520
applies to what versions it applies to

00:11:54,880 --> 00:11:59,710
and go through fixing it and to fix it

00:11:57,520 --> 00:12:01,750
you also get a private Fork

00:11:59,710 --> 00:12:04,870
which is a prilae what it sounds like a

00:12:01,750 --> 00:12:07,300
private agate fork for you to make the

00:12:04,870 --> 00:12:10,060
change before it's actually published in

00:12:07,300 --> 00:12:11,470
live now once you've made the change

00:12:10,060 --> 00:12:13,450
it's time to tell the rest of the world

00:12:11,470 --> 00:12:15,400
about it so you can publish this

00:12:13,450 --> 00:12:16,750
advisory which will tell us about it and

00:12:15,400 --> 00:12:18,580
then we will take the next steps which

00:12:16,750 --> 00:12:19,990
we'll get to in a second but one of the

00:12:18,580 --> 00:12:22,210
things that I'm excited is now

00:12:19,990 --> 00:12:24,370
officially live today is that as a

00:12:22,210 --> 00:12:26,710
maintainer you can request a CBE

00:12:24,370 --> 00:12:29,680
directly from this page and what this

00:12:26,710 --> 00:12:31,720
means is sea bees are the mechanism that

00:12:29,680 --> 00:12:33,910
the broader security community uses to

00:12:31,720 --> 00:12:36,040
communicate about vulnerabilities but

00:12:33,910 --> 00:12:39,370
the mechanism for getting the CVE has a

00:12:36,040 --> 00:12:42,130
little bit of a tax to it so github can

00:12:39,370 --> 00:12:44,050
now issue CVEs on behalf of open source

00:12:42,130 --> 00:12:46,150
projects and that will allow us to

00:12:44,050 --> 00:12:47,830
connect the open source community to the

00:12:46,150 --> 00:12:49,650
rest of the security community so I'm

00:12:47,830 --> 00:12:52,810
very excited about that

00:12:49,650 --> 00:12:55,390
now once you've published this advisory

00:12:52,810 --> 00:12:58,150
what happens well it goes into our

00:12:55,390 --> 00:13:00,550
advisory database so the advisory

00:12:58,150 --> 00:13:02,140
database this is a collection of all of

00:13:00,550 --> 00:13:03,790
the vulnerabilities that we know about

00:13:02,140 --> 00:13:06,400
it github whether it was one that was

00:13:03,790 --> 00:13:08,350
reported directly to us via security

00:13:06,400 --> 00:13:10,120
advisories or whether it was a saidit

00:13:08,350 --> 00:13:12,010
whether it was one that we pulled in

00:13:10,120 --> 00:13:14,020
from one of the public feeds like the

00:13:12,010 --> 00:13:15,610
national vulnerability database if

00:13:14,020 --> 00:13:17,590
you've ever gotten a security alert from

00:13:15,610 --> 00:13:20,920
github it's because it was part of our

00:13:17,590 --> 00:13:23,110
advisory database now we think this data

00:13:20,920 --> 00:13:24,670
is incredibly important and we think

00:13:23,110 --> 00:13:25,350
this vulnerability data is something

00:13:24,670 --> 00:13:27,510
that everyone

00:13:25,350 --> 00:13:29,760
needs to help keep our software safe so

00:13:27,510 --> 00:13:31,860
I am thrilled to announce today that the

00:13:29,760 --> 00:13:41,520
github advisory database is available

00:13:31,860 --> 00:13:43,200
for free for everyone you can access it

00:13:41,520 --> 00:13:46,050
via the web or you can access it via

00:13:43,200 --> 00:13:48,240
api's you can search by CVE

00:13:46,050 --> 00:13:50,600
or particular strings you can filter it

00:13:48,240 --> 00:13:53,910
down to particular severity levels or

00:13:50,600 --> 00:13:55,770
specific ecosystems we were to look at

00:13:53,910 --> 00:13:57,660
the Python ecosystem and then let's pick

00:13:55,770 --> 00:13:59,580
us one of the recent more severe

00:13:57,660 --> 00:14:01,350
security vulnerabilities you can drill

00:13:59,580 --> 00:14:03,420
in and you'll get a richness you can get

00:14:01,350 --> 00:14:05,370
a description of exactly what's wrong

00:14:03,420 --> 00:14:07,110
with that vulnerability and kind of the

00:14:05,370 --> 00:14:08,760
exciting thing for me is because this

00:14:07,110 --> 00:14:10,170
vulnerability it was reported natively

00:14:08,760 --> 00:14:12,450
on github we have a level of

00:14:10,170 --> 00:14:15,000
traceability with with vulnerabilities

00:14:12,450 --> 00:14:17,430
that we have rarely had before so I can

00:14:15,000 --> 00:14:19,650
see for this one the actual repo that it

00:14:17,430 --> 00:14:21,300
was fixed on and in fact because this

00:14:19,650 --> 00:14:23,610
one was filed by a security advisory I

00:14:21,300 --> 00:14:26,010
can go to the actual security advisory

00:14:23,610 --> 00:14:27,810
on the actual repo that this is reported

00:14:26,010 --> 00:14:29,610
on and in this case the team even has

00:14:27,810 --> 00:14:31,440
more information like links to issues

00:14:29,610 --> 00:14:33,330
where the vulnerability is being

00:14:31,440 --> 00:14:34,470
discussed if you've ever tried to find

00:14:33,330 --> 00:14:37,350
out more information about a

00:14:34,470 --> 00:14:40,470
vulnerability in the owner ability

00:14:37,350 --> 00:14:42,150
online this kind of connectivity is

00:14:40,470 --> 00:14:47,480
something that has been sorely needed in

00:14:42,150 --> 00:14:49,440
my opinion now the data the

00:14:47,480 --> 00:14:52,050
vulnerability is now in our advisory

00:14:49,440 --> 00:14:54,180
database the next step is to alert the

00:14:52,050 --> 00:14:55,860
people that are using this particular

00:14:54,180 --> 00:14:58,110
dependency that they need to take action

00:14:55,860 --> 00:15:00,630
so the way that we do that is we take

00:14:58,110 --> 00:15:02,820
the data in a debate in the advisory

00:15:00,630 --> 00:15:05,310
database and we match that up with the

00:15:02,820 --> 00:15:08,700
dependency graph I Briand this earlier

00:15:05,310 --> 00:15:10,710
but this is where you can view all the

00:15:08,700 --> 00:15:13,110
dependencies and the dependencies of the

00:15:10,710 --> 00:15:14,250
dependencies of dependencies of the

00:15:13,110 --> 00:15:17,610
dependencies we could go for a while

00:15:14,250 --> 00:15:20,760
here as part of this but if any one of

00:15:17,610 --> 00:15:22,830
those dependencies has a version that is

00:15:20,760 --> 00:15:24,960
that has a vulnerability in our database

00:15:22,830 --> 00:15:27,770
you will get a security alert you will

00:15:24,960 --> 00:15:31,200
get a security alert in the web portal

00:15:27,770 --> 00:15:33,360
you will also get a security email and

00:15:31,200 --> 00:15:35,820
for those of you that have been

00:15:33,360 --> 00:15:38,280
receiving security emails already I have

00:15:35,820 --> 00:15:39,240
good news we've been listening to you so

00:15:38,280 --> 00:15:40,800
in addition to all

00:15:39,240 --> 00:15:42,750
all of the security emails you already

00:15:40,800 --> 00:15:45,420
get we will now send you an additional

00:15:42,750 --> 00:15:50,700
security email every 15 minutes until

00:15:45,420 --> 00:15:53,459
you fix that vulnerability it's

00:15:50,700 --> 00:15:55,110
completely configurable it 15 minutes is

00:15:53,459 --> 00:15:56,270
too frequent you know you can dial it

00:15:55,110 --> 00:15:58,950
down to five minutes

00:15:56,270 --> 00:16:00,720
our security our infrastructure team has

00:15:58,950 --> 00:16:02,820
been laying fiber so that we can send as

00:16:00,720 --> 00:16:05,970
many emails as it takes to secure the

00:16:02,820 --> 00:16:09,570
world software you guys think I'm joking

00:16:05,970 --> 00:16:11,250
don't you seriously though we have heard

00:16:09,570 --> 00:16:12,959
your feedback that sometimes the number

00:16:11,250 --> 00:16:15,750
of security alert emails can be a little

00:16:12,959 --> 00:16:17,820
bit a little bit volumous so we recently

00:16:15,750 --> 00:16:19,709
shipped a feature that internally we

00:16:17,820 --> 00:16:22,200
lovingly called garden hose as opposed

00:16:19,709 --> 00:16:25,410
to fire hose and what garden hose lets

00:16:22,200 --> 00:16:27,209
you do is configure how you want to

00:16:25,410 --> 00:16:30,089
receive security alerts so if you would

00:16:27,209 --> 00:16:32,070
rather receive a digest of all the

00:16:30,089 --> 00:16:35,930
security alerts and only get that once a

00:16:32,070 --> 00:16:41,550
day or once a week you can now do that

00:16:35,930 --> 00:16:43,380
okay so I've gotten a security alert the

00:16:41,550 --> 00:16:46,500
next thing is to get the developer to

00:16:43,380 --> 00:16:47,790
fix it so to make that easier we now we

00:16:46,500 --> 00:16:49,800
support a feature called automatic

00:16:47,790 --> 00:16:51,899
security updates and what automatic

00:16:49,800 --> 00:16:54,480
security updates does is it will

00:16:51,899 --> 00:16:57,630
generate a pull request which will

00:16:54,480 --> 00:16:59,610
update the version of the dependency to

00:16:57,630 --> 00:17:01,800
the one that has the security fix in it

00:16:59,610 --> 00:17:03,360
and in this case it's showing me all of

00:17:01,800 --> 00:17:05,339
the changes in total that I'm going to

00:17:03,360 --> 00:17:08,370
pick as part of this change so it means

00:17:05,339 --> 00:17:09,870
if you marry this with actions or the CI

00:17:08,370 --> 00:17:11,730
system of your choice that's validating

00:17:09,870 --> 00:17:13,199
your change all the developers should

00:17:11,730 --> 00:17:14,970
have to do is come in to the pull

00:17:13,199 --> 00:17:17,910
request that was generated review it and

00:17:14,970 --> 00:17:20,790
Mergent this is all powered by

00:17:17,910 --> 00:17:22,980
dependable dependable joint github at

00:17:20,790 --> 00:17:25,319
satellite last May and I am thrilled to

00:17:22,980 --> 00:17:27,390
announce that it is now fully integrated

00:17:25,319 --> 00:17:29,460
into github it is generally available

00:17:27,390 --> 00:17:33,170
and it is protecting millions of

00:17:29,460 --> 00:17:33,170
repositories today

00:17:36,530 --> 00:17:42,720
now this was for a flow for one repo but

00:17:39,960 --> 00:17:44,940
many organizations out there have tens

00:17:42,720 --> 00:17:46,440
of repos hundreds of repos thousands of

00:17:44,940 --> 00:17:48,480
repos tens of thousands and as a

00:17:46,440 --> 00:17:50,730
customer yesterday told me in some cases

00:17:48,480 --> 00:17:52,440
hundreds of thousands of repos and it

00:17:50,730 --> 00:17:55,500
can be hard to keep track of the state

00:17:52,440 --> 00:17:56,850
of of the state of all of your repos so

00:17:55,500 --> 00:17:58,590
we've been working on that problem with

00:17:56,850 --> 00:18:00,360
something we call dependency insights

00:17:58,590 --> 00:18:02,760
and what dependency Insights does is

00:18:00,360 --> 00:18:04,830
give you a view across all the repos or

00:18:02,760 --> 00:18:06,690
organizations so you can see what the

00:18:04,830 --> 00:18:08,850
total set of outstanding advisories are

00:18:06,690 --> 00:18:11,130
how severe they are and what the

00:18:08,850 --> 00:18:12,600
dependencies that you have you can you

00:18:11,130 --> 00:18:14,610
can filter this with different views in

00:18:12,600 --> 00:18:16,440
this case I can filter it down to see

00:18:14,610 --> 00:18:18,600
the dependencies that have the most set

00:18:16,440 --> 00:18:21,750
of security advisories I just pick one

00:18:18,600 --> 00:18:23,280
and drill in I can see that in fact this

00:18:21,750 --> 00:18:25,170
particular version of this dependency

00:18:23,280 --> 00:18:27,180
has 12 security advisories that's not

00:18:25,170 --> 00:18:28,980
ideal but then I can also go see that

00:18:27,180 --> 00:18:30,210
there's actually only one repo in my

00:18:28,980 --> 00:18:31,800
organization

00:18:30,210 --> 00:18:33,390
that's using that so I can decide what

00:18:31,800 --> 00:18:35,040
the next action to take is maybe I need

00:18:33,390 --> 00:18:37,230
to go give them a little kick maybe this

00:18:35,040 --> 00:18:44,190
repo needs to be archived and I had that

00:18:37,230 --> 00:18:46,020
data to be able to do that okay now if

00:18:44,190 --> 00:18:47,610
you were paying close attention you'll

00:18:46,020 --> 00:18:48,990
have noticed that we tackled a bunch of

00:18:47,610 --> 00:18:51,720
the problems that I talked about but

00:18:48,990 --> 00:18:53,550
there were two that we didn't one was

00:18:51,720 --> 00:18:55,020
how new security researchers find the

00:18:53,550 --> 00:18:56,550
vulnerability to begin with and the

00:18:55,020 --> 00:18:58,050
other is how do we stop these

00:18:56,550 --> 00:19:00,210
vulnerabilities from happening again and

00:18:58,050 --> 00:19:03,210
again and again so those two problems

00:19:00,210 --> 00:19:06,120
are exactly why in September Cemil joint

00:19:03,210 --> 00:19:09,090
github so how the SEM will help us

00:19:06,120 --> 00:19:11,580
tackle those two problems it brings with

00:19:09,090 --> 00:19:13,290
it an amazing technology called code QL

00:19:11,580 --> 00:19:16,200
which is essentially a semantic code

00:19:13,290 --> 00:19:18,450
engine so what does that mean it takes

00:19:16,200 --> 00:19:20,640
your code and it transforms it into a

00:19:18,450 --> 00:19:22,380
database that is now queryable so you

00:19:20,640 --> 00:19:24,780
can now query that database as a

00:19:22,380 --> 00:19:26,820
security researcher to go and hunt for

00:19:24,780 --> 00:19:28,620
vulnerabilities in that code you can

00:19:26,820 --> 00:19:30,360
then take those same queries and use

00:19:28,620 --> 00:19:32,700
them to make sure as a developer you're

00:19:30,360 --> 00:19:34,680
not introducing similar types of

00:19:32,700 --> 00:19:36,360
vulnerabilities so I'm really excited

00:19:34,680 --> 00:19:37,710
about this but it's also way easier to

00:19:36,360 --> 00:19:40,310
show than it is to talk about so let's

00:19:37,710 --> 00:19:40,310
take a look

00:19:44,969 --> 00:19:52,659
so I am on the net data repository that

00:19:50,320 --> 00:19:55,210
data is a popular real-time monitoring

00:19:52,659 --> 00:19:57,339
solution and they've been using code QL

00:19:55,210 --> 00:19:59,080
to make sure that they don't introduce

00:19:57,339 --> 00:20:01,629
new security vulnerabilities into their

00:19:59,080 --> 00:20:04,059
changes so every time a pull request is

00:20:01,629 --> 00:20:06,729
created code QL is run to go look for

00:20:04,059 --> 00:20:08,830
new potential vulnerabilities and at

00:20:06,729 --> 00:20:09,639
some point in this change which was a

00:20:08,830 --> 00:20:12,309
pretty big one

00:20:09,639 --> 00:20:13,899
we actually detected with code QL three

00:20:12,309 --> 00:20:15,039
potential vulnerabilities and one of

00:20:13,899 --> 00:20:18,009
them was a cross-site scripting

00:20:15,039 --> 00:20:21,279
vulnerability so let's go let's go look

00:20:18,009 --> 00:20:23,139
at that so I'm gonna jump over and we're

00:20:21,279 --> 00:20:26,529
gonna look at those and this particular

00:20:23,139 --> 00:20:28,960
vulnerability is in main je s main JJ s

00:20:26,529 --> 00:20:30,099
actually has two vulnerabilities but in

00:20:28,960 --> 00:20:33,909
the interest of time we're just going to

00:20:30,099 --> 00:20:35,499
look at the second one and we'll look at

00:20:33,909 --> 00:20:38,830
this cross site scripting one so this

00:20:35,499 --> 00:20:40,869
shows me the piece of text where it

00:20:38,830 --> 00:20:42,279
thinks I have a vulnerability so what is

00:20:40,869 --> 00:20:43,960
a cross-site scripting vulnerability

00:20:42,279 --> 00:20:46,299
it's essentially an attempt by an

00:20:43,960 --> 00:20:48,999
attacker to take a string that they set

00:20:46,299 --> 00:20:50,889
in some form maybe a URL and get it

00:20:48,999 --> 00:20:52,869
injected into your Dom so that it can

00:20:50,889 --> 00:20:55,269
then run script and do things like steal

00:20:52,869 --> 00:20:57,849
your cookies steal your cookies and data

00:20:55,269 --> 00:20:59,289
and I can kind of see from this line why

00:20:57,849 --> 00:21:00,940
this might be a problem because it is

00:20:59,289 --> 00:21:02,499
setting something into my DOM and there

00:21:00,940 --> 00:21:04,269
is a variable that's got data coming

00:21:02,499 --> 00:21:06,369
from somewhere but this could be okay

00:21:04,269 --> 00:21:07,719
think about what it actually takes to

00:21:06,369 --> 00:21:10,570
find a real cross-site scripting

00:21:07,719 --> 00:21:12,009
vulnerability you need to know where the

00:21:10,570 --> 00:21:14,769
data is coming from and that that data

00:21:12,009 --> 00:21:17,349
might be unsafe you then need to know

00:21:14,769 --> 00:21:18,879
how that data might be used that could

00:21:17,349 --> 00:21:20,320
be dangerous like put it into the DOM

00:21:18,879 --> 00:21:22,269
and then you need to be able to track

00:21:20,320 --> 00:21:24,669
that data as it moves through your

00:21:22,269 --> 00:21:26,549
program however it goes from point A to

00:21:24,669 --> 00:21:30,219
point B this is a pretty hard problem

00:21:26,549 --> 00:21:32,049
but that's exactly what code ql' does so

00:21:30,219 --> 00:21:33,700
if I drill in I can see that the data

00:21:32,049 --> 00:21:35,619
from this source is actually coming

00:21:33,700 --> 00:21:37,659
being read in from a variable from a

00:21:35,619 --> 00:21:39,489
separate frame separate frame different

00:21:37,659 --> 00:21:41,440
URL URL potentially this is where the

00:21:39,489 --> 00:21:43,330
cross-site scripting comes in and then

00:21:41,440 --> 00:21:45,339
it gives me the sack Trey says that data

00:21:43,330 --> 00:21:47,049
flows from point A to point B through

00:21:45,339 --> 00:21:48,609
different variables and eventually

00:21:47,049 --> 00:21:51,429
getting down to the place where it is

00:21:48,609 --> 00:21:53,219
inserted into the HTML thus the

00:21:51,429 --> 00:21:56,740
potential cross-site scripting attack

00:21:53,219 --> 00:21:59,830
now this vulnerability was found by

00:21:56,740 --> 00:22:01,510
running one of the many queries that are

00:21:59,830 --> 00:22:03,880
available so this particular project has

00:22:01,510 --> 00:22:05,940
three different languages in it each of

00:22:03,880 --> 00:22:09,340
them have a different set of queries in

00:22:05,940 --> 00:22:11,049
fact we have over 2,000 built-in queries

00:22:09,340 --> 00:22:12,520
that have been authored to find

00:22:11,049 --> 00:22:15,010
different different vulnerabilities and

00:22:12,520 --> 00:22:16,899
because one of those queries existed

00:22:15,010 --> 00:22:20,020
that knew how to detect detect this type

00:22:16,899 --> 00:22:23,260
of vulnerability the net data team was

00:22:20,020 --> 00:22:25,299
able to make a fix to not just insert

00:22:23,260 --> 00:22:27,340
you know straight but to make sure it's

00:22:25,299 --> 00:22:30,970
coming in his text before this change

00:22:27,340 --> 00:22:32,380
ever got merged into master so this type

00:22:30,970 --> 00:22:34,299
of vulnerability when you talk about

00:22:32,380 --> 00:22:35,500
static analysis is the real kind that

00:22:34,299 --> 00:22:37,809
you want to find because it's not

00:22:35,500 --> 00:22:40,899
theoretical it's a real exploitable one

00:22:37,809 --> 00:22:42,640
they're also the hardest to find and the

00:22:40,899 --> 00:22:44,890
reason why we were able to find this one

00:22:42,640 --> 00:22:46,539
is kind of twofold one because the tech

00:22:44,890 --> 00:22:49,110
here is kind of cool

00:22:46,539 --> 00:22:51,429
but the other one is because someone

00:22:49,110 --> 00:22:54,070
authored in this case a security

00:22:51,429 --> 00:22:56,320
research or security expert authored

00:22:54,070 --> 00:22:58,659
this query that knew how to go and find

00:22:56,320 --> 00:23:00,399
it so that data is the key thing that

00:22:58,659 --> 00:23:03,640
connection between the work that a

00:23:00,399 --> 00:23:08,049
security expert did to the workflow of a

00:23:03,640 --> 00:23:09,580
developer so this I think is one of the

00:23:08,049 --> 00:23:11,919
key things and one of the key

00:23:09,580 --> 00:23:14,140
opportunities because if you talk about

00:23:11,919 --> 00:23:16,510
the entire set of roles that need to

00:23:14,140 --> 00:23:18,340
participate in this there's an

00:23:16,510 --> 00:23:20,500
incredibly important one which is the

00:23:18,340 --> 00:23:22,419
security researcher so there's a great

00:23:20,500 --> 00:23:24,429
opportunity for us to take all of the

00:23:22,419 --> 00:23:26,500
amazing work that the security community

00:23:24,429 --> 00:23:29,440
is doing the security experts the

00:23:26,500 --> 00:23:31,720
security researchers and connect that

00:23:29,440 --> 00:23:34,390
directly into the work flow and the

00:23:31,720 --> 00:23:36,970
lives of the millions of developers on

00:23:34,390 --> 00:23:39,159
github to help make the but make all of

00:23:36,970 --> 00:23:40,899
this software that we're using safer so

00:23:39,159 --> 00:23:42,010
I'd like to invite echo Wiseman on stage

00:23:40,899 --> 00:23:44,080
to tell us more about that

00:23:42,010 --> 00:23:45,940
Iko is one of the world's foremost

00:23:44,080 --> 00:23:47,620
security researchers and I couldn't be

00:23:45,940 --> 00:23:49,510
more thrilled to have him here at github

00:23:47,620 --> 00:23:50,110
as a colleague helping us solve these

00:23:49,510 --> 00:23:53,110
problems

00:23:50,110 --> 00:23:56,529
so please welcome Eko Wiseman

00:23:53,110 --> 00:24:00,740
[Music]

00:23:56,529 --> 00:24:03,169
Thank You Jamie hi my name is Nico I'm a

00:24:00,740 --> 00:24:05,929
part of a tribe I tried that hunt for

00:24:03,169 --> 00:24:07,940
gaming code but start for me now as a

00:24:05,929 --> 00:24:10,490
hobby in their 90's somehow end up

00:24:07,940 --> 00:24:12,080
turned into a job and that job

00:24:10,490 --> 00:24:15,200
eventually turned into a career and

00:24:12,080 --> 00:24:17,690
today some 20 years later I find myself

00:24:15,200 --> 00:24:19,519
part of an ever-growing community whose

00:24:17,690 --> 00:24:22,789
skills have since became indispensable

00:24:19,519 --> 00:24:25,159
in modern society initially in those

00:24:22,789 --> 00:24:27,289
early days my own little try focused

00:24:25,159 --> 00:24:30,200
mostly or never infrastructure and

00:24:27,289 --> 00:24:32,779
managing user access but their natural

00:24:30,200 --> 00:24:34,880
next step was to focus our effort to

00:24:32,779 --> 00:24:37,100
where what those users were actually

00:24:34,880 --> 00:24:39,350
using to interface to the infrastructure

00:24:37,100 --> 00:24:42,200
that was under our care basically a

00:24:39,350 --> 00:24:44,360
software so with time a significant

00:24:42,200 --> 00:24:46,700
chunk of this drive focused shift to

00:24:44,360 --> 00:24:49,039
integrated into the software development

00:24:46,700 --> 00:24:51,080
lifecycle and it was with that shift

00:24:49,039 --> 00:24:53,570
that a vibrant and thriving community

00:24:51,080 --> 00:24:57,679
spawned a community that was solely

00:24:53,570 --> 00:25:01,340
focused on insure software behave the

00:24:57,679 --> 00:25:04,190
way they actually intend to behave our

00:25:01,340 --> 00:25:06,950
job became to explore and document the

00:25:04,190 --> 00:25:08,960
unintended states of the sword around

00:25:06,950 --> 00:25:11,570
our world and most important

00:25:08,960 --> 00:25:14,960
well actually security impact those

00:25:11,570 --> 00:25:17,750
state space my heart I'm sure by now

00:25:14,960 --> 00:25:19,159
everyone guess who my tribe is I'm a

00:25:17,750 --> 00:25:22,220
hacker I mean a security professional

00:25:19,159 --> 00:25:24,320
and my tribe is the information security

00:25:22,220 --> 00:25:26,389
community the information security

00:25:24,320 --> 00:25:28,909
community started as a small group of

00:25:26,389 --> 00:25:31,130
people on IRC that for those are young

00:25:28,909 --> 00:25:32,470
here it's sort of like slack but with

00:25:31,130 --> 00:25:35,330
all the animated gif

00:25:32,470 --> 00:25:37,279
it has since grow into a massive

00:25:35,330 --> 00:25:39,200
community that attracts thousands of

00:25:37,279 --> 00:25:41,470
people to security conference around the

00:25:39,200 --> 00:25:45,110
globe to discuss the latest research

00:25:41,470 --> 00:25:47,960
what used to be a necessary pursuit of

00:25:45,110 --> 00:25:51,080
gaining or preventing access in clarity

00:25:47,960 --> 00:25:55,340
wave has since became a full-blown

00:25:51,080 --> 00:25:58,250
industry however along the way my tribe

00:25:55,340 --> 00:26:00,200
has committed some cardinal sins these

00:25:58,250 --> 00:26:02,750
are the Hornets to this day I have

00:26:00,200 --> 00:26:06,300
prevalence from integrated effectively

00:26:02,750 --> 00:26:09,310
into the very fabric we aim to protect

00:26:06,300 --> 00:26:11,320
one of our largest things I believe is

00:26:09,310 --> 00:26:15,370
our historico antagonistic relationship

00:26:11,320 --> 00:26:18,130
with IT QA support and most important

00:26:15,370 --> 00:26:20,560
the software development teams for too

00:26:18,130 --> 00:26:23,050
long have we as an industry taking an

00:26:20,560 --> 00:26:25,450
ivory tower position dueling out our

00:26:23,050 --> 00:26:28,000
judgement on code and product quality

00:26:25,450 --> 00:26:30,700
without offering any tangible deployable

00:26:28,000 --> 00:26:32,620
solution she's providing a single

00:26:30,700 --> 00:26:35,650
example of flows and expecting people to

00:26:32,620 --> 00:26:37,330
just figure it out the four major

00:26:35,650 --> 00:26:41,440
security industry should be a

00:26:37,330 --> 00:26:44,080
facilitator not an innovator and we

00:26:41,440 --> 00:26:46,600
decide to do something about that so a

00:26:44,080 --> 00:26:49,600
certain really free to announce today

00:26:46,600 --> 00:26:52,690
they get cap security lab what is the

00:26:49,600 --> 00:26:54,280
key cap security lab the key kept secure

00:26:52,690 --> 00:26:56,620
lab will be the home of security

00:26:54,280 --> 00:26:58,060
researchers at github our mission will

00:26:56,620 --> 00:27:00,340
be to hunt for bull amenities and open

00:26:58,060 --> 00:27:02,830
source projects to build tool and that

00:27:00,340 --> 00:27:04,630
will help secure code bases as well as

00:27:02,830 --> 00:27:06,940
partnering with other security teams

00:27:04,630 --> 00:27:10,030
across the industry to build bridges

00:27:06,940 --> 00:27:13,810
between the research community and the

00:27:10,030 --> 00:27:16,090
wider softball community we have a

00:27:13,810 --> 00:27:19,120
dedicated handpick of highly skilled

00:27:16,090 --> 00:27:21,850
security researchers our team will hand

00:27:19,120 --> 00:27:24,250
and fix bullet e in the most the most

00:27:21,850 --> 00:27:27,640
important projects we go beyond just

00:27:24,250 --> 00:27:30,880
racking up CVS and also enable the open

00:27:27,640 --> 00:27:33,220
source community to act as a force

00:27:30,880 --> 00:27:35,980
multiplier for the security research

00:27:33,220 --> 00:27:39,700
community through integrated unity bar

00:27:35,980 --> 00:27:41,940
and analysis in essence our security

00:27:39,700 --> 00:27:45,130
research will be your security research

00:27:41,940 --> 00:27:47,560
to date disease has collect more than a

00:27:45,130 --> 00:27:49,450
hundred CVS and some of them are

00:27:47,560 --> 00:27:51,580
critical moment is in really big

00:27:49,450 --> 00:27:53,560
projects and this is only a small

00:27:51,580 --> 00:27:58,240
example of what we'll be able to achieve

00:27:53,560 --> 00:28:00,340
together a Spanish philosopher once said

00:27:58,240 --> 00:28:03,760
that those who cannot remember the past

00:28:00,340 --> 00:28:06,310
are condemned to repeat it this quote to

00:28:03,760 --> 00:28:08,950
me represents the various sense of what

00:28:06,310 --> 00:28:10,870
coal coil is same to prevent the

00:28:08,950 --> 00:28:12,420
repetition of the past and as a

00:28:10,870 --> 00:28:17,260
consequence their mistakes

00:28:12,420 --> 00:28:19,840
the main comes at behind QL is to model

00:28:17,260 --> 00:28:22,590
normal abilities down to their essence

00:28:19,840 --> 00:28:26,169
extracting the cold patterns and then

00:28:22,590 --> 00:28:28,360
convert them into queries later we use

00:28:26,169 --> 00:28:31,240
those queries assist to uncover Mulla

00:28:28,360 --> 00:28:33,789
realities in your code base we want to

00:28:31,240 --> 00:28:36,760
help developers write secure code I keep

00:28:33,789 --> 00:28:38,980
the old tradition of killing one moon

00:28:36,760 --> 00:28:42,070
amity at a time which basically does not

00:28:38,980 --> 00:28:45,250
scale especially consider that codes are

00:28:42,070 --> 00:28:47,409
not static entities they're moving

00:28:45,250 --> 00:28:52,000
targets that change continually with

00:28:47,409 --> 00:28:53,169
every commit to that n I'm very excited

00:28:52,000 --> 00:28:55,659
to there that tell you that we are

00:28:53,169 --> 00:29:01,570
releasing Coquille for free for open

00:28:55,659 --> 00:29:04,179
source and academic years now we are

00:29:01,570 --> 00:29:06,309
also releasing a vehicle extension that

00:29:04,179 --> 00:29:08,250
will help stream like cocoa integrated

00:29:06,309 --> 00:29:11,320
into your workflow

00:29:08,250 --> 00:29:13,240
let me now invite Kevin Backhouse to

00:29:11,320 --> 00:29:14,710
stage gives a fantastic security

00:29:13,240 --> 00:29:17,559
researcher I have found whatever it is

00:29:14,710 --> 00:29:20,880
in a poorly beset you the X a new kernel

00:29:17,559 --> 00:29:20,880
and many many other projects

00:29:23,040 --> 00:29:34,909
[Music]

00:29:32,350 --> 00:29:36,559
hi I'm going to show you a quick demo of

00:29:34,909 --> 00:29:39,110
a vulnerability that I found earlier

00:29:36,559 --> 00:29:41,330
this year in Facebook fizz fizz is

00:29:39,110 --> 00:29:43,909
Facebook's open source TLS

00:29:41,330 --> 00:29:47,120
implementations so that's the software

00:29:43,909 --> 00:29:50,710
that does the HTTP part of HTTP

00:29:47,120 --> 00:29:52,820
facebook.com/ as you can imagine that's

00:29:50,710 --> 00:29:55,340
critically important software for

00:29:52,820 --> 00:29:57,500
Facebook and the bug that I found could

00:29:55,340 --> 00:30:00,650
have caused a serious outage at Facebook

00:29:57,500 --> 00:30:02,870
and Instagram so because face because

00:30:00,650 --> 00:30:04,429
fizz is so important Facebook have put a

00:30:02,870 --> 00:30:06,919
lot of effort into making sure that it's

00:30:04,429 --> 00:30:09,620
secure so it's been extensively fuzz

00:30:06,919 --> 00:30:11,120
tested and audited and from having a

00:30:09,620 --> 00:30:13,940
look at looked at the source code myself

00:30:11,120 --> 00:30:15,770
I'd say it's very high quality so the

00:30:13,940 --> 00:30:17,950
bug that I found with code QL had

00:30:15,770 --> 00:30:20,029
managed to slip through a very tight net

00:30:17,950 --> 00:30:22,190
so I'm going to do first is I'm just

00:30:20,029 --> 00:30:23,750
going to show you a demo of the exploit

00:30:22,190 --> 00:30:27,260
proof-of-concept that I wrote so I've

00:30:23,750 --> 00:30:29,899
got fizz fizz server running here and in

00:30:27,260 --> 00:30:31,520
this terminal here I'm going to run the

00:30:29,899 --> 00:30:34,159
attack so you can see that that's

00:30:31,520 --> 00:30:37,130
extremely cheap for an attacker to run

00:30:34,159 --> 00:30:39,610
that just sent off a 64 kilobyte message

00:30:37,130 --> 00:30:43,250
to the fizz server and then disconnected

00:30:39,610 --> 00:30:46,789
and you can see over here now I've got

00:30:43,250 --> 00:30:49,850
top running that the fizz server up here

00:30:46,789 --> 00:30:53,179
is using 100% of a CPU core and it's

00:30:49,850 --> 00:30:57,200
become completely unresponsive so let me

00:30:53,179 --> 00:31:00,039
just shut that down so how did I find

00:30:57,200 --> 00:31:04,270
this vulnerability this is v/s code and

00:31:00,039 --> 00:31:07,490
over here is the code ql extension and

00:31:04,270 --> 00:31:09,529
up here i've got a database for fizz

00:31:07,490 --> 00:31:12,230
loaded jamie mentioned these databases

00:31:09,529 --> 00:31:16,299
earlier in his in his talk so what the

00:31:12,230 --> 00:31:18,409
database is is the source code for Fears

00:31:16,299 --> 00:31:21,559
converted into a form that is now

00:31:18,409 --> 00:31:23,659
queryable and over here I've got the

00:31:21,559 --> 00:31:25,429
query that found a vulnerability so what

00:31:23,659 --> 00:31:28,399
I was looking for was integer overflows

00:31:25,429 --> 00:31:30,649
in the fears source code integer

00:31:28,399 --> 00:31:34,039
overflows are difficult to find with a

00:31:30,649 --> 00:31:35,630
text-based search like grab because they

00:31:34,039 --> 00:31:38,990
tend to be implicit in the code but with

00:31:35,630 --> 00:31:40,940
code QL it's easy because the database

00:31:38,990 --> 00:31:42,500
contains not just the text of the source

00:31:40,940 --> 00:31:43,280
code but also other information like

00:31:42,500 --> 00:31:46,460
types

00:31:43,280 --> 00:31:48,110
so what I'll show you first is some

00:31:46,460 --> 00:31:50,270
query results so this was a simple query

00:31:48,110 --> 00:31:52,310
that I wrote just looking for potential

00:31:50,270 --> 00:31:54,200
Institute integer overflows you could

00:31:52,310 --> 00:31:56,390
see that there's quite a lot of results

00:31:54,200 --> 00:31:59,150
and what I really want to know is

00:31:56,390 --> 00:32:01,370
whether it's possible for an attacker to

00:31:59,150 --> 00:32:04,490
put some malicious data into an incoming

00:32:01,370 --> 00:32:08,150
message and for that to actually trigger

00:32:04,490 --> 00:32:10,580
one of these integer overflows so the

00:32:08,150 --> 00:32:13,400
query that found the bug is here that I

00:32:10,580 --> 00:32:15,320
used our taint tracking library to do

00:32:13,400 --> 00:32:17,210
that so what would with taint tracking

00:32:15,320 --> 00:32:20,510
what I'm able to do is I'm able to say

00:32:17,210 --> 00:32:24,110
I'm only interested if there's a source

00:32:20,510 --> 00:32:25,790
of network data that flows to a sink

00:32:24,110 --> 00:32:28,820
where there might be an integer overflow

00:32:25,790 --> 00:32:32,420
and you can see the result of that query

00:32:28,820 --> 00:32:36,110
over here let me just hide this yeah and

00:32:32,420 --> 00:32:37,640
now there's just one result and it's

00:32:36,110 --> 00:32:39,020
given me a data flow path as well so

00:32:37,640 --> 00:32:41,000
this is the same data flow path

00:32:39,020 --> 00:32:44,180
technology that you also saw earlier in

00:32:41,000 --> 00:32:46,520
Jamie's demo on lg TM com

00:32:44,180 --> 00:32:48,170
and these data flow paths are incredibly

00:32:46,520 --> 00:32:51,260
valuable for me as a security researcher

00:32:48,170 --> 00:32:52,970
because they allow me to figure out why

00:32:51,260 --> 00:32:55,430
the query thinks that there might be a

00:32:52,970 --> 00:32:57,290
problem in the code and if it has found

00:32:55,430 --> 00:32:59,840
a problem then it also helps me to then

00:32:57,290 --> 00:33:01,340
construct an exploit for it so what you

00:32:59,840 --> 00:33:03,590
can see here is that the data flow path

00:33:01,340 --> 00:33:06,350
starts out with an engine this

00:33:03,590 --> 00:33:08,060
conversion there and that's often a

00:33:06,350 --> 00:33:11,540
telltale sign of data that's coming out

00:33:08,060 --> 00:33:14,420
of a network packet and then that's used

00:33:11,540 --> 00:33:16,550
here to read an unsigned 16-bit integer

00:33:14,420 --> 00:33:18,920
into this variable length and then the

00:33:16,550 --> 00:33:20,600
final step of the data flow path this is

00:33:18,920 --> 00:33:22,340
where the integer overflow happens so

00:33:20,600 --> 00:33:24,950
this plus equals what my proof of

00:33:22,340 --> 00:33:26,780
concept does is it triggers an integer

00:33:24,950 --> 00:33:29,390
overflow which causes length to wrap

00:33:26,780 --> 00:33:32,150
around and become zero and then this

00:33:29,390 --> 00:33:33,650
loop up here ends up going back to the

00:33:32,150 --> 00:33:35,540
beginning of the message and pausing it

00:33:33,650 --> 00:33:38,780
again which is why there ends up being

00:33:35,540 --> 00:33:39,950
an infinite loop in the code so you can

00:33:38,780 --> 00:33:43,790
see that this bug would have been very

00:33:39,950 --> 00:33:45,500
difficult to find without code ql' so

00:33:43,790 --> 00:33:47,060
that was the end of my demo I'm going to

00:33:45,500 --> 00:33:48,710
hand back to Nico now who's going to

00:33:47,060 --> 00:33:50,540
talk about the impact this is going to

00:33:48,710 --> 00:33:52,730
have for software security in general

00:33:50,540 --> 00:33:53,470
thanks

00:33:52,730 --> 00:33:54,820
[Music]

00:33:53,470 --> 00:33:57,289
[Applause]

00:33:54,820 --> 00:33:59,000
thank you Gary

00:33:57,289 --> 00:34:00,649
this is a great bag but if you didn't

00:33:59,000 --> 00:34:03,230
understand the back you have to worry

00:34:00,649 --> 00:34:04,850
about the whole idea of what we're

00:34:03,230 --> 00:34:07,039
trying to do here is that we will soon

00:34:04,850 --> 00:34:10,220
be able to transform the great work of

00:34:07,039 --> 00:34:12,619
our research like cap and leverage it

00:34:10,220 --> 00:34:15,740
across multiple code bases to prevent

00:34:12,619 --> 00:34:18,290
those bugs to ever happen again I would

00:34:15,740 --> 00:34:20,649
like to introduce now Ralph Fletcher rob

00:34:18,290 --> 00:34:22,760
is a head of product security at uber

00:34:20,649 --> 00:34:24,950
healing his team are responsible for

00:34:22,760 --> 00:34:26,929
product security his team mission is to

00:34:24,950 --> 00:34:29,690
help over developer developers write

00:34:26,929 --> 00:34:31,760
more secure code a mission that is very

00:34:29,690 --> 00:34:33,139
similar to our own and we have the

00:34:31,760 --> 00:34:36,250
privilege of working with him in the

00:34:33,139 --> 00:34:40,480
past Rob why don't tell us more

00:34:36,250 --> 00:34:40,480
[Music]

00:34:42,630 --> 00:34:46,510
hello hello my name is Rob Fletcher and

00:34:45,220 --> 00:34:48,220
I'm a security engineering manager at

00:34:46,510 --> 00:34:50,200
uber I'm excited to speak for a few

00:34:48,220 --> 00:34:52,270
minutes today about how we've used two

00:34:50,200 --> 00:34:54,360
LG TM and code QL to really strengthen

00:34:52,270 --> 00:34:56,320
our applications security program

00:34:54,360 --> 00:34:58,120
several years ago we launched a

00:34:56,320 --> 00:34:59,830
three-part test phase to explore the

00:34:58,120 --> 00:35:01,930
efficacy of LG TM and we were really

00:34:59,830 --> 00:35:03,730
excited to see the results that came

00:35:01,930 --> 00:35:05,920
from the control flow analysis and the

00:35:03,730 --> 00:35:07,900
tainting of functionality since then

00:35:05,920 --> 00:35:09,160
we've rolled out LG TM more broadly and

00:35:07,900 --> 00:35:10,870
it's become an important part of our

00:35:09,160 --> 00:35:12,820
vulnerability management strategy

00:35:10,870 --> 00:35:14,710
helping to create a more robust life

00:35:12,820 --> 00:35:18,100
cycle between manual findings and

00:35:14,710 --> 00:35:20,230
automated findings for example we take

00:35:18,100 --> 00:35:23,050
our manual findings and plug that into

00:35:20,230 --> 00:35:25,120
code QL writing and on average we've

00:35:23,050 --> 00:35:27,250
been able to find three true variants

00:35:25,120 --> 00:35:29,800
for every individual manual finding that

00:35:27,250 --> 00:35:31,240
we write a query for you know besides

00:35:29,800 --> 00:35:32,860
those obvious results of getting more

00:35:31,240 --> 00:35:34,720
vulnerabilities it's really raised the

00:35:32,860 --> 00:35:36,940
ceiling to on how we can scale with the

00:35:34,720 --> 00:35:39,010
company when we couldn't do that as well

00:35:36,940 --> 00:35:40,750
previously instead of finding one

00:35:39,010 --> 00:35:42,430
vulnerability in one codebase we can

00:35:40,750 --> 00:35:44,170
write a code KL query that allows us to

00:35:42,430 --> 00:35:47,050
find that vulnerability in all of our

00:35:44,170 --> 00:35:49,420
code bases in an ongoing basis as modern

00:35:47,050 --> 00:35:51,820
development workflows and continue to

00:35:49,420 --> 00:35:53,560
get faster really the only way security

00:35:51,820 --> 00:35:55,900
teams can be successful in scale with

00:35:53,560 --> 00:35:57,100
the company is automation and LG TM has

00:35:55,900 --> 00:35:59,650
really helped us there

00:35:57,100 --> 00:36:00,970
besides that LG TM has also allowed us

00:35:59,650 --> 00:36:03,640
to be a little more creative in the way

00:36:00,970 --> 00:36:05,440
we find vulnerabilities as an example

00:36:03,640 --> 00:36:07,000
the idea of a dangerous source making

00:36:05,440 --> 00:36:09,010
its way into a vulnerable sink is a

00:36:07,000 --> 00:36:11,110
relatively well known paradigm and

00:36:09,010 --> 00:36:12,970
security for finding vulnerabilities but

00:36:11,110 --> 00:36:14,920
the flexibility of code KL allowed us to

00:36:12,970 --> 00:36:16,900
kind of start thinking in a more

00:36:14,920 --> 00:36:19,000
creative way on how we could flip that

00:36:16,900 --> 00:36:21,700
paradigm on its head and so what we

00:36:19,000 --> 00:36:23,440
started doing is looking for leaky our

00:36:21,700 --> 00:36:24,990
sensitive sources making their way into

00:36:23,440 --> 00:36:27,190
leaky sinks as a way to identify

00:36:24,990 --> 00:36:29,470
sensitive data leakage --is and things

00:36:27,190 --> 00:36:31,000
like request handlers so borrowing a

00:36:29,470 --> 00:36:32,470
friend's quote code quelle is a really

00:36:31,000 --> 00:36:34,270
great way to ask questions about your

00:36:32,470 --> 00:36:36,220
code base and I'm excited to see how we

00:36:34,270 --> 00:36:38,050
can continue to use code QL and creative

00:36:36,220 --> 00:36:40,210
ways as our application security program

00:36:38,050 --> 00:36:41,200
grows it's with all that context that

00:36:40,210 --> 00:36:43,150
we're excited to be partnering with

00:36:41,200 --> 00:36:45,100
github on the open source coalition and

00:36:43,150 --> 00:36:47,360
I look forward to seeing what the future

00:36:45,100 --> 00:36:48,400
of code QL holds thank you

00:36:47,360 --> 00:36:50,080
[Applause]

00:36:48,400 --> 00:36:54,440
[Music]

00:36:50,080 --> 00:36:56,240
thank you're up we are excited to have

00:36:54,440 --> 00:36:57,980
an initial set of partners today that

00:36:56,240 --> 00:36:59,840
all have commits to contribute in

00:36:57,980 --> 00:37:02,120
different forms such as stooling

00:36:59,840 --> 00:37:04,820
computer infrastructure funding and

00:37:02,120 --> 00:37:06,710
hours of research time all to help

00:37:04,820 --> 00:37:09,500
secure the open source software for the

00:37:06,710 --> 00:37:13,430
community we want to invite others to

00:37:09,500 --> 00:37:14,570
join the same effort with our partners

00:37:13,430 --> 00:37:17,780
commitment to open source security

00:37:14,570 --> 00:37:19,100
really constitute a formula results to

00:37:17,780 --> 00:37:21,680
really make the difference

00:37:19,100 --> 00:37:24,380
we need our entire community or more and

00:37:21,680 --> 00:37:26,980
but better way to invite the community

00:37:24,380 --> 00:37:29,870
participation then offer intangible

00:37:26,980 --> 00:37:31,700
incentives to us as a security of open

00:37:29,870 --> 00:37:33,740
source software and who better to

00:37:31,700 --> 00:37:35,630
discuss the subject that me Kushan

00:37:33,740 --> 00:37:37,210
director of product management a hacker

00:37:35,630 --> 00:37:44,549
one

00:37:37,210 --> 00:37:44,549
[Music]

00:37:45,630 --> 00:37:51,070
Thank You Nico at hacker one as a part

00:37:49,630 --> 00:37:53,050
of our mission to make the internet

00:37:51,070 --> 00:37:55,500
safer we believe that protecting

00:37:53,050 --> 00:37:57,960
open-source is our social responsibility

00:37:55,500 --> 00:38:00,690
after all like most companies

00:37:57,960 --> 00:38:03,460
open-source software powers hacker 1 and

00:38:00,690 --> 00:38:05,560
that's why we are thrilled to see how

00:38:03,460 --> 00:38:07,660
much github is investing in open-source

00:38:05,560 --> 00:38:09,790
security they're really in one of the

00:38:07,660 --> 00:38:13,300
best positions to have meaningful change

00:38:09,790 --> 00:38:15,160
in case you're not familiar with us are

00:38:13,300 --> 00:38:17,650
ready at hacker 1 we work with a

00:38:15,160 --> 00:38:20,500
community of over half a million hackers

00:38:17,650 --> 00:38:22,540
or security researchers to help them

00:38:20,500 --> 00:38:25,900
disclose vulnerabilities to programs

00:38:22,540 --> 00:38:29,530
often programs pay a bounty for the

00:38:25,900 --> 00:38:31,240
security research that they received one

00:38:29,530 --> 00:38:33,610
of the ways that we support open-source

00:38:31,240 --> 00:38:35,680
is by sponsoring the internet bug bounty

00:38:33,610 --> 00:38:37,660
along with github that pays down

00:38:35,680 --> 00:38:42,070
bounties to some of the most important

00:38:37,660 --> 00:38:44,110
open source projects another is that

00:38:42,070 --> 00:38:46,870
open source projects can use a version

00:38:44,110 --> 00:38:49,300
of our popular bounty offering for free

00:38:46,870 --> 00:38:53,110
called a hacker one Community Edition

00:38:49,300 --> 00:38:55,510
and today I'm happy to announce that

00:38:53,110 --> 00:38:57,700
we're upgrading the Community Edition to

00:38:55,510 --> 00:39:00,790
include the best feature suite that we

00:38:57,700 --> 00:39:02,950
offer and we're not stopping there

00:39:00,790 --> 00:39:05,560
we're also eliminating the majority of

00:39:02,950 --> 00:39:08,290
our program fees so that more of the

00:39:05,560 --> 00:39:10,120
bounty goes to the hacker which will

00:39:08,290 --> 00:39:13,380
increase incentives for open-source

00:39:10,120 --> 00:39:13,380
security research

00:39:17,010 --> 00:39:22,450
and finally I want to briefly talk about

00:39:20,530 --> 00:39:24,609
two things we've learned running bug

00:39:22,450 --> 00:39:27,930
bounty programs the first is

00:39:24,609 --> 00:39:30,130
transparency the more open a program is

00:39:27,930 --> 00:39:32,500
meaning the more that it discloses

00:39:30,130 --> 00:39:35,260
vulnerabilities and the more people it

00:39:32,500 --> 00:39:39,450
invites to hack the better results

00:39:35,260 --> 00:39:44,740
it gets the next is that put simply it

00:39:39,450 --> 00:39:47,260
helps a lot to get paid when programs

00:39:44,740 --> 00:39:49,569
start paying bounties or when they start

00:39:47,260 --> 00:39:51,579
increasing their bounties they get

00:39:49,569 --> 00:39:54,400
better results which means more secure

00:39:51,579 --> 00:39:57,099
code that's why facilitating payments

00:39:54,400 --> 00:39:59,920
will have such a deep impact on open

00:39:57,099 --> 00:40:08,559
source security and with that I'd like

00:39:59,920 --> 00:40:10,839
to hand it back to Nikko there is a

00:40:08,559 --> 00:40:13,299
famous Linux law among security people

00:40:10,839 --> 00:40:16,559
that state that given enough ice all

00:40:13,299 --> 00:40:18,700
bags are shallow really this to be true

00:40:16,559 --> 00:40:21,040
that is why we are fully committed to

00:40:18,700 --> 00:40:24,220
rewarding your time for looking at open

00:40:21,040 --> 00:40:25,839
source code and to that end we are

00:40:24,220 --> 00:40:27,309
establishing two main mountains to

00:40:25,839 --> 00:40:29,470
reward blue narrative research on an

00:40:27,309 --> 00:40:31,780
open source project the first one we

00:40:29,470 --> 00:40:33,609
call it the Box layer this vanity will

00:40:31,780 --> 00:40:35,770
reward a security researchers that

00:40:33,609 --> 00:40:39,040
create boring queries that have found

00:40:35,770 --> 00:40:42,700
multiple real-world boon abilities with

00:40:39,040 --> 00:40:44,799
associated CVE numbers the second one we

00:40:42,700 --> 00:40:46,450
call the alpha one one for all these

00:40:44,799 --> 00:40:48,430
money will reward security researchers

00:40:46,450 --> 00:40:50,920
who create courage that are such of high

00:40:48,430 --> 00:40:53,290
quality and instability that can be

00:40:50,920 --> 00:40:55,089
mainlined to our shipit' tool chain thus

00:40:53,290 --> 00:40:59,260
directly benefiting the entire

00:40:55,089 --> 00:41:01,569
open-source community finally I want to

00:40:59,260 --> 00:41:03,880
invite everyone maintainer developers

00:41:01,569 --> 00:41:05,559
security researchers and everyone else

00:41:03,880 --> 00:41:08,410
involved into software development

00:41:05,559 --> 00:41:10,359
community to visit our website where you

00:41:08,410 --> 00:41:12,760
can download tools such as Cole QL and

00:41:10,359 --> 00:41:15,160
the newbie SEO extension receive

00:41:12,760 --> 00:41:16,720
information about it coming events and

00:41:15,160 --> 00:41:18,190
learn about the commitment that some of

00:41:16,720 --> 00:41:20,109
these key players in the open source

00:41:18,190 --> 00:41:23,470
community have made to improve the

00:41:20,109 --> 00:41:25,329
security of our share ecosystem please

00:41:23,470 --> 00:41:27,190
check out our website follow us on

00:41:25,329 --> 00:41:29,530
Twitter and stay tuned for the amazing

00:41:27,190 --> 00:41:31,450
things are coming we have

00:41:29,530 --> 00:41:33,910
capture the flag at connect space after

00:41:31,450 --> 00:41:36,040
Kino you can met the security team so

00:41:33,910 --> 00:41:37,650
please visit us and now let me welcome

00:41:36,040 --> 00:41:43,350
back Erika

00:41:37,650 --> 00:41:46,380
[Music]

00:41:43,350 --> 00:41:49,350
thanks Nico Jamie me too

00:41:46,380 --> 00:41:51,120
Rob and Kevin I couldn't be more excited

00:41:49,350 --> 00:41:53,640
about the work that we're doing in the

00:41:51,120 --> 00:41:56,520
security space it's great to see this

00:41:53,640 --> 00:41:58,800
range of companies coming together to

00:41:56,520 --> 00:42:01,440
work on issues for the benefit of the

00:41:58,800 --> 00:42:03,750
broader community and this is just the

00:42:01,440 --> 00:42:06,720
beginning I can't wait to see this

00:42:03,750 --> 00:42:08,210
community grow and flourish so please do

00:42:06,720 --> 00:42:11,220
check it out

00:42:08,210 --> 00:42:13,410
now let's look at another way to get

00:42:11,220 --> 00:42:16,290
involved in the ecosystem and that's via

00:42:13,410 --> 00:42:19,260
actions actions lets you automate any

00:42:16,290 --> 00:42:21,780
part of your development workflow from

00:42:19,260 --> 00:42:25,110
running tests to triaging issues to

00:42:21,780 --> 00:42:28,620
deploying to a cloud we build actions to

00:42:25,110 --> 00:42:31,080
be fundamentally extensible in fact the

00:42:28,620 --> 00:42:33,840
github repo graph is the actions

00:42:31,080 --> 00:42:36,120
ecosystem you can take actions from

00:42:33,840 --> 00:42:39,240
anywhere in the open-source community

00:42:36,120 --> 00:42:41,730
edit them and reshare when you fork a

00:42:39,240 --> 00:42:45,920
project with an action in it the action

00:42:41,730 --> 00:42:48,690
comes right along with it to date over

00:42:45,920 --> 00:42:52,860
1,200 actions have been published in the

00:42:48,690 --> 00:42:55,770
github marketplace that's up over 250

00:42:52,860 --> 00:42:56,760
percent since August I'm going to invite

00:42:55,770 --> 00:42:59,160
Erica kado

00:42:56,760 --> 00:43:01,200
who runs our partner engineering team to

00:42:59,160 --> 00:43:02,940
the stage to talk to us about some of

00:43:01,200 --> 00:43:05,190
the work our team has been doing with

00:43:02,940 --> 00:43:08,980
partners to enable some really cool

00:43:05,190 --> 00:43:14,049
actions for github welcome Erica

00:43:08,980 --> 00:43:17,390
[Applause]

00:43:14,049 --> 00:43:20,480
now just to set the record straight I'm

00:43:17,390 --> 00:43:23,329
Erica bee this is Erica kay and we are

00:43:20,480 --> 00:43:28,940
not to be confused with Erica a our SVP

00:43:23,329 --> 00:43:30,859
of sales there's so many areas hi Erica

00:43:28,940 --> 00:43:33,499
we have been thrilled by how many of

00:43:30,859 --> 00:43:36,319
embraced actions so quickly here are

00:43:33,499 --> 00:43:38,089
just a few of our partners our partners

00:43:36,319 --> 00:43:41,029
have created actions to let you build

00:43:38,089 --> 00:43:43,940
very cool work flows between github and

00:43:41,029 --> 00:43:45,650
their products and projects yeah I love

00:43:43,940 --> 00:43:48,109
seeing the engagement around actions

00:43:45,650 --> 00:43:50,779
it's such a great example of how the

00:43:48,109 --> 00:43:53,029
ecosystem can provide new functionality

00:43:50,779 --> 00:43:55,279
to get hub users and make it easier to

00:43:53,029 --> 00:43:57,499
use other products and projects with

00:43:55,279 --> 00:43:59,619
github Erica what are some of your

00:43:57,499 --> 00:44:02,769
favorite actions you've seen so far well

00:43:59,619 --> 00:44:05,539
to start I'd like to highlight terraform

00:44:02,769 --> 00:44:08,299
managing infrastructure has always been

00:44:05,539 --> 00:44:10,730
complex now imagine having large

00:44:08,299 --> 00:44:13,460
multi-tier applications or multi cloud

00:44:10,730 --> 00:44:15,499
deployments Hashi curves terraform

00:44:13,460 --> 00:44:18,589
allows you to codify infrastructure

00:44:15,499 --> 00:44:20,630
unless you deploy to any cloud this

00:44:18,589 --> 00:44:25,160
simplifies a provisioning process so

00:44:20,630 --> 00:44:27,619
much in this example we want to inverse

00:44:25,160 --> 00:44:30,140
the color scheme on this octocat site

00:44:27,619 --> 00:44:33,339
and have it automatically deploy the

00:44:30,140 --> 00:44:35,749
necklace I with our development workflow

00:44:33,339 --> 00:44:38,210
when a pull request is made in github

00:44:35,749 --> 00:44:40,489
the terraform plan is triggered from

00:44:38,210 --> 00:44:42,049
github actions which will check to make

00:44:40,489 --> 00:44:45,890
sure your plan really matches your

00:44:42,049 --> 00:44:48,410
expectations then when the pull request

00:44:45,890 --> 00:44:50,539
is merged the github actions will kick

00:44:48,410 --> 00:44:52,880
off the terraform apply and you're good

00:44:50,539 --> 00:44:54,739
to go I know this is a simple example

00:44:52,880 --> 00:44:57,529
but this totally automates your

00:44:54,739 --> 00:44:59,869
deployment from code to cloud it's

00:44:57,529 --> 00:45:02,420
impressive how terraform allows you to

00:44:59,869 --> 00:45:06,349
deploy to multiple platforms so simply

00:45:02,420 --> 00:45:08,450
great work a she Court another action

00:45:06,349 --> 00:45:11,509
that I'm excited about is a white source

00:45:08,450 --> 00:45:13,400
action with github packages you can

00:45:11,509 --> 00:45:16,400
discover and publish packages within

00:45:13,400 --> 00:45:18,619
github white source offers containers

00:45:16,400 --> 00:45:20,450
securities to canning so when you

00:45:18,619 --> 00:45:23,150
include the white source action those

00:45:20,450 --> 00:45:25,700
docker images you're publishing can be

00:45:23,150 --> 00:45:26,540
scanned for you when the scanning is

00:45:25,700 --> 00:45:28,970
complete

00:45:26,540 --> 00:45:30,740
you will receive a full report back with

00:45:28,970 --> 00:45:34,910
known security vulnerabilities and

00:45:30,740 --> 00:45:37,490
license information this example

00:45:34,910 --> 00:45:39,710
workflow demonstrates the white source

00:45:37,490 --> 00:45:42,260
action being kicked off when a docker

00:45:39,710 --> 00:45:46,010
container is published to github

00:45:42,260 --> 00:45:48,020
packages the workflow will then add the

00:45:46,010 --> 00:45:52,100
security report to an artifact and

00:45:48,020 --> 00:45:53,810
github you can also visit the white

00:45:52,100 --> 00:45:56,930
source site to see the visual

00:45:53,810 --> 00:45:59,870
representation of your report this

00:45:56,930 --> 00:46:03,470
essentially lets you bake security into

00:45:59,870 --> 00:46:05,840
your workflow and it's so simple I think

00:46:03,470 --> 00:46:08,450
we've shown that security is paramount

00:46:05,840 --> 00:46:10,460
to us at github it's great to see this

00:46:08,450 --> 00:46:12,680
partner integration and enables you to

00:46:10,460 --> 00:46:15,170
scan your containers for known security

00:46:12,680 --> 00:46:15,740
vulnerabilities before you put them into

00:46:15,170 --> 00:46:19,790
production

00:46:15,740 --> 00:46:22,130
well done white source and last but not

00:46:19,790 --> 00:46:25,190
least Twilio lets you build really cool

00:46:22,130 --> 00:46:26,690
communications work flows via api's they

00:46:25,190 --> 00:46:29,240
have written an action that makes

00:46:26,690 --> 00:46:31,760
triggering an SMS from github super

00:46:29,240 --> 00:46:33,980
simple having an automated workflow is

00:46:31,760 --> 00:46:36,290
great but there may be times when you

00:46:33,980 --> 00:46:40,310
need to alert someone through SMS for

00:46:36,290 --> 00:46:42,860
some high priority item we've created a

00:46:40,310 --> 00:46:45,290
workflow here when app or quest is made

00:46:42,860 --> 00:46:48,050
for a slide presentation it can count

00:46:45,290 --> 00:46:50,030
how many errors are included and send a

00:46:48,050 --> 00:46:53,450
notification when it detects a threshold

00:46:50,030 --> 00:46:55,970
value clearly there are too many erica's

00:46:53,450 --> 00:46:58,120
in this presentation I don't think

00:46:55,970 --> 00:47:00,530
you're gonna ever have too many Erica's

00:46:58,120 --> 00:47:03,380
seriously though how cool is it that you

00:47:00,530 --> 00:47:08,060
can trigger an SMS from github so simply

00:47:03,380 --> 00:47:10,270
this is awesome work from Twilio thanks

00:47:08,060 --> 00:47:11,580
so much Erika

00:47:10,270 --> 00:47:14,070
[Applause]

00:47:11,580 --> 00:47:17,400
and of course that's just a small sample

00:47:14,070 --> 00:47:20,190
of the over 1,200 actions available

00:47:17,400 --> 00:47:21,900
today and now that actions is generally

00:47:20,190 --> 00:47:24,090
available they're available to everyone

00:47:21,900 --> 00:47:26,280
so please go ahead check them out in the

00:47:24,090 --> 00:47:33,300
marketplace and even build your own

00:47:26,280 --> 00:47:36,210
thanks so much Erica I talked earlier

00:47:33,300 --> 00:47:39,150
about our mission at github to be the

00:47:36,210 --> 00:47:42,630
home for all developers and we know that

00:47:39,150 --> 00:47:44,460
developers want choice who doesn't we're

00:47:42,630 --> 00:47:46,500
committed to delivering on this and

00:47:44,460 --> 00:47:48,720
ensuring that every part of your

00:47:46,500 --> 00:47:51,390
development life cycle is swappable when

00:47:48,720 --> 00:47:54,030
you're using github this includes CI

00:47:51,390 --> 00:47:57,420
providers security solutions cloud

00:47:54,030 --> 00:47:59,940
platforms and more actions takes this to

00:47:57,420 --> 00:48:02,370
heart you can automate anything replace

00:47:59,940 --> 00:48:05,400
any part of your workflow and integrate

00:48:02,370 --> 00:48:07,320
easily with other tools on that note I'd

00:48:05,400 --> 00:48:10,140
like to invite Claire a principal

00:48:07,320 --> 00:48:12,480
engineer from Amazon Web Services to the

00:48:10,140 --> 00:48:14,040
stage to show us an awesome cloud code

00:48:12,480 --> 00:48:17,270
to cloud workflow that they've built

00:48:14,040 --> 00:48:17,270
welcome Claire

00:48:17,800 --> 00:48:19,000
[Applause]

00:48:18,810 --> 00:48:22,219
[Music]

00:48:19,000 --> 00:48:22,219
[Applause]

00:48:22,990 --> 00:48:27,890
hi I'm Claire Liguori I'm a principal

00:48:26,180 --> 00:48:31,359
engineer on the aid of youth containers

00:48:27,890 --> 00:48:34,099
team and I'm a big fan of containers I

00:48:31,359 --> 00:48:36,829
love that containers can help us to

00:48:34,099 --> 00:48:38,839
share our applications with others and I

00:48:36,829 --> 00:48:41,319
love that containers can help us to

00:48:38,839 --> 00:48:44,420
deploy our applications to the cloud I

00:48:41,319 --> 00:48:46,190
like that there's this easy standardized

00:48:44,420 --> 00:48:48,769
way to describe how to build my

00:48:46,190 --> 00:48:50,450
application for a container with all the

00:48:48,769 --> 00:48:53,599
dependencies built right into the

00:48:50,450 --> 00:48:55,579
container image I like that when I share

00:48:53,599 --> 00:48:57,470
that image with you I don't have to make

00:48:55,579 --> 00:48:59,869
any assumptions about what Linux flavor

00:48:57,470 --> 00:49:02,450
you're running or libraries you have

00:48:59,869 --> 00:49:05,599
installed I can simply share this image

00:49:02,450 --> 00:49:07,789
with you and then it's as easy as darker

00:49:05,599 --> 00:49:09,799
pole and docker run for you to have my

00:49:07,789 --> 00:49:15,500
super cool application running on your

00:49:09,799 --> 00:49:18,349
laptop so it's that easy and then when

00:49:15,500 --> 00:49:20,539
you get to the cloud now you can scale

00:49:18,349 --> 00:49:22,549
out to multiple copies of your

00:49:20,539 --> 00:49:25,400
application running in containers for

00:49:22,549 --> 00:49:27,259
high scale you can scale out to multiple

00:49:25,400 --> 00:49:29,809
applications across many different

00:49:27,259 --> 00:49:31,490
containers but you start to need

00:49:29,809 --> 00:49:33,980
something to manage all of these

00:49:31,490 --> 00:49:36,829
containers for you to help you deploy

00:49:33,980 --> 00:49:40,880
and scale and keep them running all the

00:49:36,829 --> 00:49:43,039
time at AWS we have a broad portfolio of

00:49:40,880 --> 00:49:45,440
services to help you run your containers

00:49:43,039 --> 00:49:47,930
in the cloud the elastic container

00:49:45,440 --> 00:49:49,819
registry ECR will help you to store your

00:49:47,930 --> 00:49:52,609
container images and share those

00:49:49,819 --> 00:49:54,529
applications with others we have two

00:49:52,609 --> 00:49:57,680
services to help you manage and deploy

00:49:54,529 --> 00:49:59,779
and scale containers the elastic

00:49:57,680 --> 00:50:02,029
kubernetes service eks for your

00:49:59,779 --> 00:50:02,900
kubernetes workloads and the elastic

00:50:02,029 --> 00:50:06,769
container service

00:50:02,900 --> 00:50:09,440
ECS we have two options for ecs for

00:50:06,769 --> 00:50:13,490
where your containers run easy to and

00:50:09,440 --> 00:50:15,980
Fargate so for example if you use ECS to

00:50:13,490 --> 00:50:17,720
deploy and manage your containers you

00:50:15,980 --> 00:50:20,630
can create a resource called a service

00:50:17,720 --> 00:50:22,430
where you tell ECS I want to run fifteen

00:50:20,630 --> 00:50:24,890
application fifteen copies of my

00:50:22,430 --> 00:50:27,200
application all the time ECS will keep

00:50:24,890 --> 00:50:30,170
those containers running and you can

00:50:27,200 --> 00:50:33,349
give three easy two instances to ECS to

00:50:30,170 --> 00:50:34,550
run those containers or you can take

00:50:33,349 --> 00:50:36,890
advantage of Fargate

00:50:34,550 --> 00:50:40,400
Fargate is serverless compute for your

00:50:36,890 --> 00:50:42,410
containers so you can tell ECS i still

00:50:40,400 --> 00:50:45,230
want to run 15 copies of my application

00:50:42,410 --> 00:50:47,450
but i want to use Fargate so you don't

00:50:45,230 --> 00:50:51,590
have to have any ec2 instances to scale

00:50:47,450 --> 00:50:53,270
or manage or patch those instances you

00:50:51,590 --> 00:50:55,430
can simply focus on building your

00:50:53,270 --> 00:50:56,990
applications packaging them into

00:50:55,430 --> 00:50:58,730
containers and deploying them to the

00:50:56,990 --> 00:51:00,530
cloud without worrying about the

00:50:58,730 --> 00:51:04,040
underlying compute for those containers

00:51:00,530 --> 00:51:06,590
I specifically focus on developer

00:51:04,040 --> 00:51:08,500
tooling for ECS and Fargate so I'm super

00:51:06,590 --> 00:51:12,140
excited to be here today talking about

00:51:08,500 --> 00:51:15,440
github actions for ECS Fargate and EC

00:51:12,140 --> 00:51:18,560
are I think that github actions can help

00:51:15,440 --> 00:51:20,960
us to smooth the way to getting our code

00:51:18,560 --> 00:51:22,850
into the cloud I think a lot in my day

00:51:20,960 --> 00:51:24,740
to day life about what are those little

00:51:22,850 --> 00:51:27,440
frustrations we have as developers every

00:51:24,740 --> 00:51:29,750
day what are those things that slow us

00:51:27,440 --> 00:51:31,670
down from getting our code into the

00:51:29,750 --> 00:51:33,980
cloud and I think about what are the

00:51:31,670 --> 00:51:37,910
integrations that we can create for ECS

00:51:33,980 --> 00:51:39,440
to help make that a smooth process so

00:51:37,910 --> 00:51:42,200
today I'm really excited to announce

00:51:39,440 --> 00:51:45,050
that AWS and github have collaborated on

00:51:42,200 --> 00:51:48,400
a set of for github actions that are in

00:51:45,050 --> 00:51:48,400
the github marketplace today

00:51:52,250 --> 00:51:56,540
so in order to show you these four

00:51:54,740 --> 00:51:58,790
actions I'm gonna take you through a

00:51:56,540 --> 00:52:02,599
sample day in the life of a developer

00:51:58,790 --> 00:52:06,349
who's using ecs Fargate ECR and these

00:52:02,599 --> 00:52:09,109
github actions so to do that I'm going

00:52:06,349 --> 00:52:11,420
to use mythical misfits calm this is an

00:52:09,109 --> 00:52:13,480
online adoption agency for mythical

00:52:11,420 --> 00:52:15,710
creatures you can select different

00:52:13,480 --> 00:52:18,080
characteristics to find your favorite

00:52:15,710 --> 00:52:19,730
mythical creature and then view their

00:52:18,080 --> 00:52:22,609
profile to find out more information

00:52:19,730 --> 00:52:24,260
about them I happen to like koko the

00:52:22,609 --> 00:52:26,420
dragon quite a bit I think she's pretty

00:52:24,260 --> 00:52:29,750
cute so I'm gonna go ahead and hit this

00:52:26,420 --> 00:52:31,460
like button this little heart so this is

00:52:29,750 --> 00:52:34,099
a containerized application with

00:52:31,460 --> 00:52:37,910
multiple micro services behind it so I

00:52:34,099 --> 00:52:40,910
have a like micro service so this is

00:52:37,910 --> 00:52:43,430
generating the the API that's driving

00:52:40,910 --> 00:52:45,530
that heart button that like button so we

00:52:43,430 --> 00:52:47,780
can go ahead and try it out and I'll

00:52:45,530 --> 00:52:48,770
paste in the ID for Coco the dragon

00:52:47,780 --> 00:52:55,070
she's pretty cute

00:52:48,770 --> 00:52:57,109
so now Coco has two likes so as I said

00:52:55,070 --> 00:52:59,180
this is a containerized application this

00:52:57,109 --> 00:53:02,300
micro service is running on e CS and

00:52:59,180 --> 00:53:04,280
Fargate ecs is keeping three copies of

00:53:02,300 --> 00:53:08,390
my application running at all times and

00:53:04,280 --> 00:53:10,910
it's running on Fargate so if I go over

00:53:08,390 --> 00:53:13,790
to the ec2 console I have no instances

00:53:10,910 --> 00:53:16,160
running I can simply focus on deploying

00:53:13,790 --> 00:53:20,660
my applications and containers and not

00:53:16,160 --> 00:53:22,849
on those instances here's my docker file

00:53:20,660 --> 00:53:25,339
so this is such an easy way for me to

00:53:22,849 --> 00:53:28,099
specify here my Python dependencies

00:53:25,339 --> 00:53:29,990
here's my Python code do a little bit of

00:53:28,099 --> 00:53:32,119
linting in there to make sure my style

00:53:29,990 --> 00:53:35,510
is good and then here's the command to

00:53:32,119 --> 00:53:38,060
actually run that and then this is the

00:53:35,510 --> 00:53:41,810
actual Python flask code that's driving

00:53:38,060 --> 00:53:44,570
that API but one of the things we have a

00:53:41,810 --> 00:53:47,210
problem here there's no unlike API I

00:53:44,570 --> 00:53:49,580
can't actually unselect that heart if I

00:53:47,210 --> 00:53:51,320
decide I don't like Coco anymore so I'm

00:53:49,580 --> 00:53:54,680
gonna go ahead and build that today and

00:53:51,320 --> 00:53:56,810
push that out to my application so the

00:53:54,680 --> 00:53:58,339
first thing I do on my laptop I run

00:53:56,810 --> 00:54:01,609
docker build I got to get my workspace

00:53:58,339 --> 00:54:03,980
set up but it looks like the build is

00:54:01,609 --> 00:54:05,450
broken looks like some linting rules

00:54:03,980 --> 00:54:07,490
have failed

00:54:05,450 --> 00:54:10,400
so I'm gonna go ahead and see who

00:54:07,490 --> 00:54:13,369
actually broke the build who on my team

00:54:10,400 --> 00:54:14,900
broke it and it's Coco the dragon that's

00:54:13,369 --> 00:54:18,200
weird what is she doing in my git

00:54:14,900 --> 00:54:20,780
repository she says I tested this

00:54:18,200 --> 00:54:23,569
locally on my laptop so it totally works

00:54:20,780 --> 00:54:25,369
I promise and haven't we all heard that

00:54:23,569 --> 00:54:28,190
from our teammates and maybe for

00:54:25,369 --> 00:54:29,720
ourselves at one point or another so you

00:54:28,190 --> 00:54:31,849
think this is one of those first things

00:54:29,720 --> 00:54:33,859
that slows us down day to day as

00:54:31,849 --> 00:54:36,530
developers from getting our code into

00:54:33,859 --> 00:54:39,260
the cloud so I'm going to automate this

00:54:36,530 --> 00:54:41,180
away with github actions so the first

00:54:39,260 --> 00:54:43,880
thing I do is I have this check workflow

00:54:41,180 --> 00:54:46,160
on every pull request it's just gonna

00:54:43,880 --> 00:54:48,410
run docker build this is such an easy

00:54:46,160 --> 00:54:50,270
way for me to make sure that that build

00:54:48,410 --> 00:54:54,200
has never broken and I don't get slowed

00:54:50,270 --> 00:54:56,270
down by my other teammates so to see

00:54:54,200 --> 00:54:59,089
this in action I have my unlike API

00:54:56,270 --> 00:55:00,890
ready to go it's in a pull request my

00:54:59,089 --> 00:55:04,069
teammates can review this code and

00:55:00,890 --> 00:55:06,770
github have written that unlike API and

00:55:04,069 --> 00:55:08,270
my applied on flask application and then

00:55:06,770 --> 00:55:10,190
my teammates can see that the checks

00:55:08,270 --> 00:55:14,089
have passed and they've seen that my

00:55:10,190 --> 00:55:17,180
custom github action check has has run

00:55:14,089 --> 00:55:20,599
successfully and it's ran that docker

00:55:17,180 --> 00:55:22,280
build command so this is the same thing

00:55:20,599 --> 00:55:24,109
that I could do for any containerized

00:55:22,280 --> 00:55:26,750
application that I store it in a github

00:55:24,109 --> 00:55:28,579
repository I can have that really simple

00:55:26,750 --> 00:55:31,700
check run every time there's a pull

00:55:28,579 --> 00:55:36,730
request so now we've seen that it's

00:55:31,700 --> 00:55:39,410
successfully built now I need to deploy

00:55:36,730 --> 00:55:41,359
now is the second time where I have a

00:55:39,410 --> 00:55:43,609
something slowing me down from getting

00:55:41,359 --> 00:55:45,109
my code into the cloud what we're

00:55:43,609 --> 00:55:48,020
looking at here is a task definition

00:55:45,109 --> 00:55:50,510
file for ECS this is basically the

00:55:48,020 --> 00:55:53,089
configuration I need to give to ECS to

00:55:50,510 --> 00:55:54,799
run my container things like what image

00:55:53,089 --> 00:55:57,920
do I want to run what environment

00:55:54,799 --> 00:56:00,349
variables do I want to set but the image

00:55:57,920 --> 00:56:02,869
ID changes every time I have a unique

00:56:00,349 --> 00:56:05,420
image ID that I need to go and fill in

00:56:02,869 --> 00:56:09,380
to this file then I need to deploy this

00:56:05,420 --> 00:56:12,109
file to ECS so this is a multi-stage

00:56:09,380 --> 00:56:14,450
process it's kind of manual it's

00:56:12,109 --> 00:56:16,190
error-prone I don't really like to do it

00:56:14,450 --> 00:56:19,310
I just want to focus on writing my code

00:56:16,190 --> 00:56:22,310
so I'm gonna again automate this away

00:56:19,310 --> 00:56:25,100
with github actions so this is using

00:56:22,310 --> 00:56:27,560
those four actions that AWS has

00:56:25,100 --> 00:56:30,860
published today this is going to run on

00:56:27,560 --> 00:56:32,330
every push to the master branch first

00:56:30,860 --> 00:56:33,830
thing that happens is it's checking out

00:56:32,330 --> 00:56:36,980
my source code that just got pushed to

00:56:33,830 --> 00:56:38,480
the master branch next is the first

00:56:36,980 --> 00:56:41,330
github action we've published today

00:56:38,480 --> 00:56:42,740
configure a degress credentials this is

00:56:41,330 --> 00:56:44,690
taking eight of those credentials that

00:56:42,740 --> 00:56:46,790
I've stored and github action secrets

00:56:44,690 --> 00:56:51,050
and configuring the environment so that

00:56:46,790 --> 00:56:53,000
other actions can use them next I'm

00:56:51,050 --> 00:56:58,640
logging in to ECR this is where I'm

00:56:53,000 --> 00:57:00,260
storing my container images next I'm

00:56:58,640 --> 00:57:03,530
going to go build and push that image

00:57:00,260 --> 00:57:05,570
into ECR so the tag for this image is

00:57:03,530 --> 00:57:07,580
going to be the commit ID and it's going

00:57:05,570 --> 00:57:10,970
to push it into the registry that came

00:57:07,580 --> 00:57:12,440
out of that login ECR action so this is

00:57:10,970 --> 00:57:15,440
pretty much what you would do for any

00:57:12,440 --> 00:57:19,030
containerized application docker build

00:57:15,440 --> 00:57:21,620
and docker push with this unique ID and

00:57:19,030 --> 00:57:23,990
then I need to take that ID and fill it

00:57:21,620 --> 00:57:25,940
in to the task definition so this is the

00:57:23,990 --> 00:57:28,070
third action that we've published render

00:57:25,940 --> 00:57:30,170
task definition it's gonna take that

00:57:28,070 --> 00:57:32,480
unique image ID that was generated from

00:57:30,170 --> 00:57:34,880
the commit ID and fill it in to my task

00:57:32,480 --> 00:57:39,920
definition for me replacing that to do

00:57:34,880 --> 00:57:42,170
fill-in string and then last but not

00:57:39,920 --> 00:57:44,510
least the fourth action deployed task

00:57:42,170 --> 00:57:46,640
definition so this is going to take that

00:57:44,510 --> 00:57:49,610
file deploy my image and the

00:57:46,640 --> 00:57:53,060
configuration around it to ECS and wait

00:57:49,610 --> 00:57:55,430
for that deployment to be successful so

00:57:53,060 --> 00:57:58,510
let's look at it in action I'm gonna

00:57:55,430 --> 00:58:01,190
merge in my unlike API pull request and

00:57:58,510 --> 00:58:03,320
because I'm merging into master that's

00:58:01,190 --> 00:58:08,480
actually going to kick off automatically

00:58:03,320 --> 00:58:11,720
my deploy action here so as soon as I

00:58:08,480 --> 00:58:13,720
push into my my repository I can see

00:58:11,720 --> 00:58:16,040
that this deployment is in progress and

00:58:13,720 --> 00:58:17,720
we're quickly going through checking out

00:58:16,040 --> 00:58:20,690
the code configuring those eight abyss

00:58:17,720 --> 00:58:23,600
credentials logging into ECR and we're

00:58:20,690 --> 00:58:25,310
on to the build for the docker image so

00:58:23,600 --> 00:58:28,070
it's pulling in all of my Python

00:58:25,310 --> 00:58:31,280
dependencies copying in all of my Python

00:58:28,070 --> 00:58:32,829
code running linting and then finally

00:58:31,280 --> 00:58:35,170
it's going to push into

00:58:32,829 --> 00:58:37,089
er so at this point I could share this

00:58:35,170 --> 00:58:38,769
application with others and now I'm

00:58:37,089 --> 00:58:43,089
going to deploy this application to the

00:58:38,769 --> 00:58:45,400
cloud so now that I have this unique

00:58:43,089 --> 00:58:47,709
image ID with that commit ID for the

00:58:45,400 --> 00:58:49,959
commit it's filled it into my task

00:58:47,709 --> 00:58:54,789
definition automatically and now my

00:58:49,959 --> 00:58:56,769
deployment is in progress so looking on

00:58:54,789 --> 00:59:00,579
the ECS console we can watch this

00:58:56,769 --> 00:59:02,589
deployment in progress so ives told ECS

00:59:00,579 --> 00:59:05,440
I want three copies of my application so

00:59:02,589 --> 00:59:07,630
I now have three copies of the old and

00:59:05,440 --> 00:59:11,859
three copies of the new while the

00:59:07,630 --> 00:59:13,869
deployment is in progress and then we

00:59:11,859 --> 00:59:15,789
can go and we can look at the events tab

00:59:13,869 --> 00:59:18,309
and actually watch what's happening

00:59:15,789 --> 00:59:20,229
under the hood so one of the things

00:59:18,309 --> 00:59:21,819
we'll see is those new containers have

00:59:20,229 --> 00:59:24,579
been started up and they're being added

00:59:21,819 --> 00:59:26,349
to the load balancer so anyone who's

00:59:24,579 --> 00:59:30,339
going to mythical misfits right now is

00:59:26,349 --> 00:59:35,019
actually able to see the unlike API in

00:59:30,339 --> 00:59:37,809
action and then it's going to start D

00:59:35,019 --> 00:59:39,609
registering the old version that doesn't

00:59:37,809 --> 00:59:42,009
have the unlike API from the load

00:59:39,609 --> 00:59:43,930
balancer and it's gonna drain

00:59:42,009 --> 00:59:45,999
connections first so that we don't have

00:59:43,930 --> 00:59:50,799
any more requests going to those tasks

00:59:45,999 --> 00:59:56,319
and then finally it's going to have shut

00:59:50,799 --> 00:59:58,359
down all of the old containers and so

00:59:56,319 --> 00:59:59,829
now what we see is that we now are back

00:59:58,359 --> 01:00:02,109
to only three copies of the application

00:59:59,829 --> 01:00:05,739
all running that new version of the

01:00:02,109 --> 01:00:07,509
application so then when we go back to

01:00:05,739 --> 01:00:09,489
the github action we can see that this

01:00:07,509 --> 01:00:12,759
deployment is successful and it waited

01:00:09,489 --> 01:00:15,549
for it to be successful in ECS and so

01:00:12,759 --> 01:00:17,469
right in my github repository I can see

01:00:15,549 --> 01:00:21,819
that I've now deployed successfully to

01:00:17,469 --> 01:00:27,009
the cloud so we can try out this unlike

01:00:21,819 --> 01:00:28,869
API I'm gonna again paste in the ID for

01:00:27,009 --> 01:00:31,239
Coco the dragon she broke the bills

01:00:28,869 --> 01:00:34,690
it's an unlike for me for Coco the

01:00:31,239 --> 01:00:38,380
dragon today and so now she's back down

01:00:34,690 --> 01:00:40,779
to one like so I encourage you to check

01:00:38,380 --> 01:00:42,910
out mythical misfits comm for an online

01:00:40,779 --> 01:00:46,630
workshop to get started with ECS and

01:00:42,910 --> 01:00:48,640
Fargate and you can check out in the

01:00:46,630 --> 01:00:51,460
have actions tab in your github

01:00:48,640 --> 01:00:54,489
repository today you can see the deploy

01:00:51,460 --> 01:00:56,440
to Amazon ECS starter workflow to help

01:00:54,489 --> 01:01:00,249
you get started continuously deploying

01:00:56,440 --> 01:01:01,839
to ECS and Fargate so thank you so much

01:01:00,249 --> 01:01:04,330
for having me today and i'm going to

01:01:01,839 --> 01:01:04,620
hand it over to Erica

01:01:04,330 --> 01:01:09,490
[Applause]

01:01:04,620 --> 01:01:13,060
[Music]

01:01:09,490 --> 01:01:16,839
thank you so much Claire such great work

01:01:13,060 --> 01:01:19,510
from you and the a WS team with that I'd

01:01:16,839 --> 01:01:22,510
like to invite another partner Dan Mable

01:01:19,510 --> 01:01:24,369
dan Belcher excuse me from Mabel to talk

01:01:22,510 --> 01:01:29,290
about a great action that they have

01:01:24,369 --> 01:01:32,260
built welcome Dan you are a Dan Mabel

01:01:29,290 --> 01:01:33,940
yeah call me whatever you'd like well

01:01:32,260 --> 01:01:36,099
thank you very much Erika and good

01:01:33,940 --> 01:01:38,109
morning everyone if you're not familiar

01:01:36,099 --> 01:01:40,930
with Mabel we're in the business of

01:01:38,109 --> 01:01:42,700
making automated end-to-end browser

01:01:40,930 --> 01:01:45,490
testing easy

01:01:42,700 --> 01:01:48,609
so with Mabel you can create automated

01:01:45,490 --> 01:01:51,430
tests in minutes plug those tests into

01:01:48,609 --> 01:01:54,280
your CI CD pipeline run the tests in the

01:01:51,430 --> 01:01:57,820
cloud at scale across all major browsers

01:01:54,280 --> 01:01:59,859
on any deploy and then Mabel does two

01:01:57,820 --> 01:02:02,140
things that are really interesting we

01:01:59,859 --> 01:02:05,410
collect a tremendous amount of data with

01:02:02,140 --> 01:02:09,339
every step of every test and use that

01:02:05,410 --> 01:02:11,170
data to make tests not be brittle and

01:02:09,339 --> 01:02:13,780
not be flaky two of the problems that

01:02:11,170 --> 01:02:16,570
have plagued UI UI tests you know for

01:02:13,780 --> 01:02:18,700
quite some time and then secondly we

01:02:16,570 --> 01:02:21,130
analyze that data automatically and

01:02:18,700 --> 01:02:23,500
discover risks or issues in your

01:02:21,130 --> 01:02:26,470
deployments things like visual

01:02:23,500 --> 01:02:29,890
regressions performance regressions new

01:02:26,470 --> 01:02:32,109
JavaScript errors and so forth now since

01:02:29,890 --> 01:02:33,430
the beginning we've been very excited

01:02:32,109 --> 01:02:36,510
about the idea of bringing those

01:02:33,430 --> 01:02:40,359
capabilities to help developers create

01:02:36,510 --> 01:02:42,810
intelligent pipelines the way that we

01:02:40,359 --> 01:02:46,869
see it that starts with giving pipelines

01:02:42,810 --> 01:02:48,580
visibility into test results but we go

01:02:46,869 --> 01:02:52,210
beyond that we want to help the

01:02:48,580 --> 01:02:55,270
pipelines themselves understand risks

01:02:52,210 --> 01:02:57,849
associated with changes again things

01:02:55,270 --> 01:03:01,180
like visual changes performance changes

01:02:57,849 --> 01:03:04,330
and so forth and we think that providing

01:03:01,180 --> 01:03:06,730
that context will and allow developers

01:03:04,330 --> 01:03:09,310
to create very sophisticated workflows

01:03:06,730 --> 01:03:11,770
to automate a lot of the manual

01:03:09,310 --> 01:03:14,200
intervention that's required today to

01:03:11,770 --> 01:03:19,210
get code from development into

01:03:14,200 --> 01:03:21,220
production and so that's started for us

01:03:19,210 --> 01:03:25,180
with building and

01:03:21,220 --> 01:03:27,190
action that will trigger Mable tests and

01:03:25,180 --> 01:03:29,590
so it's a very simple action it accepts

01:03:27,190 --> 01:03:32,530
as inputs information about your

01:03:29,590 --> 01:03:34,660
application environments deployments and

01:03:32,530 --> 01:03:36,910
also allows you to override the

01:03:34,660 --> 01:03:39,940
configuration of your test plans if

01:03:36,910 --> 01:03:43,150
needed and then it returns the results

01:03:39,940 --> 01:03:44,800
of your tests how that works you may

01:03:43,150 --> 01:03:47,200
have a workflow that has a deployment

01:03:44,800 --> 01:03:50,590
step then you'll have a step to run

01:03:47,200 --> 01:03:52,960
Mable tests that step notifies the Mable

01:03:50,590 --> 01:03:58,840
deployments API which will in turn

01:03:52,960 --> 01:04:01,359
trigger your tests to run in Mable now

01:03:58,840 --> 01:04:04,450
as those tests are running the Mable

01:04:01,359 --> 01:04:06,790
action queries the test results API

01:04:04,450 --> 01:04:09,930
pulls the test results API and brings

01:04:06,790 --> 01:04:12,340
those results back into your workflow

01:04:09,930 --> 01:04:15,670
now I'll show you a very simple example

01:04:12,340 --> 01:04:19,420
of how that plays out here we're making

01:04:15,670 --> 01:04:22,990
a change to a simple HTML file in our

01:04:19,420 --> 01:04:25,900
repository as one does I'll commit that

01:04:22,990 --> 01:04:31,119
change straight to master and this will

01:04:25,900 --> 01:04:33,220
trigger our run Mable tests action now I

01:04:31,119 --> 01:04:35,260
can watch as that action kicks off right

01:04:33,220 --> 01:04:37,150
now it's notifying the Mable deployments

01:04:35,260 --> 01:04:38,530
API that it deployments available now

01:04:37,150 --> 01:04:40,510
the test is running and we're looking at

01:04:38,530 --> 01:04:42,940
Mable as those tests are running live

01:04:40,510 --> 01:04:44,800
now here you can see Mable collecting

01:04:42,940 --> 01:04:46,540
all that rich data we have screenshots

01:04:44,800 --> 01:04:49,210
you'll see in a moment that we're

01:04:46,540 --> 01:04:51,880
collecting snapshots of the DOM at every

01:04:49,210 --> 01:04:55,330
step of the test we're also collecting

01:04:51,880 --> 01:04:58,690
page load information at every step of

01:04:55,330 --> 01:05:01,630
every test now our tests are complete

01:04:58,690 --> 01:05:04,050
and they've all passed now the important

01:05:01,630 --> 01:05:07,540
thing here is that this context is

01:05:04,050 --> 01:05:09,510
available to the pipeline so as a

01:05:07,540 --> 01:05:11,680
developer I can trigger additional

01:05:09,510 --> 01:05:14,020
automation off those test results like

01:05:11,680 --> 01:05:16,180
that simple deployment that I just made

01:05:14,020 --> 01:05:19,030
the test pass I probably just promote

01:05:16,180 --> 01:05:21,540
that to production right away today

01:05:19,030 --> 01:05:25,839
we're excited that we've extended our

01:05:21,540 --> 01:05:28,660
action support to the Mable CLI so what

01:05:25,839 --> 01:05:30,130
that means is from actions you can call

01:05:28,660 --> 01:05:33,400
all of the features that are available

01:05:30,130 --> 01:05:34,599
from the Mable CLI for example we have a

01:05:33,400 --> 01:05:37,749
customer that will you

01:05:34,599 --> 01:05:40,420
that after the test run to take those

01:05:37,749 --> 01:05:43,690
screenshots that Mabel captured and then

01:05:40,420 --> 01:05:46,839
use the AWS CLI to store them on s3 for

01:05:43,690 --> 01:05:49,210
archival and compliance purposes okay

01:05:46,839 --> 01:05:50,680
but I know that many of your workflows

01:05:49,210 --> 01:05:53,140
are much more sophisticated than that

01:05:50,680 --> 01:05:54,789
right and what you really want is to

01:05:53,140 --> 01:05:57,220
understand as I mentioned the risk

01:05:54,789 --> 01:06:00,309
associated with your code deployments

01:05:57,220 --> 01:06:02,140
now Mabel assesses that risk today and

01:06:00,309 --> 01:06:03,999
we provide insights but those insights

01:06:02,140 --> 01:06:07,119
have historically always been to

01:06:03,999 --> 01:06:08,950
developers right and will provide slack

01:06:07,119 --> 01:06:12,700
notifications today or will send you an

01:06:08,950 --> 01:06:16,239
email today for the first time we've

01:06:12,700 --> 01:06:18,609
made pipelines aware of those insights

01:06:16,239 --> 01:06:22,569
and so as of today the Mabel github app

01:06:18,609 --> 01:06:24,940
can generate events in your repository

01:06:22,569 --> 01:06:27,369
when mabel discovers risks or issues

01:06:24,940 --> 01:06:29,920
within your application and the power of

01:06:27,369 --> 01:06:33,009
actions is then you can use that those

01:06:29,920 --> 01:06:36,039
events in your workflows to trigger or

01:06:33,009 --> 01:06:38,829
control additional actions alright so

01:06:36,039 --> 01:06:41,170
for example you may grate all of my

01:06:38,829 --> 01:06:43,349
tests past but I may also want to

01:06:41,170 --> 01:06:45,009
confirm that Mabel didn't discover any

01:06:43,349 --> 01:06:47,499
regressions from a performance

01:06:45,009 --> 01:06:49,569
perspective that are new javascript

01:06:47,499 --> 01:06:52,900
errors that show up in the console or

01:06:49,569 --> 01:06:55,239
what have you so that's available today

01:06:52,900 --> 01:06:57,039
and I think these are three really good

01:06:55,239 --> 01:07:01,059
examples of the power of bringing

01:06:57,039 --> 01:07:02,529
together testing information information

01:07:01,059 --> 01:07:04,329
about the risk associated with

01:07:02,529 --> 01:07:06,700
deployments and making that all

01:07:04,329 --> 01:07:09,789
available in this flexible platform in

01:07:06,700 --> 01:07:11,950
actions now if you'd like to see it

01:07:09,789 --> 01:07:14,469
working live you could stop by and see

01:07:11,950 --> 01:07:16,539
us at the partner innovation connect

01:07:14,469 --> 01:07:18,249
event this afternoon from 12:00 to 2:00

01:07:16,539 --> 01:07:19,750
and thank you very much

01:07:18,249 --> 01:07:22,500
well welcome Erika back to the stage

01:07:19,750 --> 01:07:28,690
[Applause]

01:07:22,500 --> 01:07:31,450
thanks dad and thanks to all of our

01:07:28,690 --> 01:07:32,740
presenters today it's so cool to see the

01:07:31,450 --> 01:07:34,930
way that different members of the

01:07:32,740 --> 01:07:37,450
community are coming together to work on

01:07:34,930 --> 01:07:40,450
addressing challenges such as software

01:07:37,450 --> 01:07:43,600
security via token scanning security

01:07:40,450 --> 01:07:46,660
research container scanning and more I

01:07:43,600 --> 01:07:49,060
also love seeing how the combination of

01:07:46,660 --> 01:07:52,060
products and projects from across the

01:07:49,060 --> 01:07:54,010
ecosystem can automate manual work for

01:07:52,060 --> 01:07:56,670
developers via solutions for cross

01:07:54,010 --> 01:08:03,400
browser testing code to cloud

01:07:56,670 --> 01:08:05,890
notifications and more in a world with

01:08:03,400 --> 01:08:09,520
over a hundred million developers on

01:08:05,890 --> 01:08:11,560
github by 2025 the creativity of our

01:08:09,520 --> 01:08:14,230
development team can never match that

01:08:11,560 --> 01:08:16,870
the creativity of the world's developers

01:08:14,230 --> 01:08:19,600
it's only through collaboration that we

01:08:16,870 --> 01:08:21,310
can jointly deliver everything needed to

01:08:19,600 --> 01:08:23,640
support all of the different ways that

01:08:21,310 --> 01:08:26,650
people want to build software together

01:08:23,640 --> 01:08:28,420
we look forward on to continuing on our

01:08:26,650 --> 01:08:30,940
mission to be the home for all

01:08:28,420 --> 01:08:33,400
developers and to work with the software

01:08:30,940 --> 01:08:35,620
development community to provide the

01:08:33,400 --> 01:08:39,640
canvas on which the world's developers

01:08:35,620 --> 01:08:43,509
can do their best work now before I wrap

01:08:39,640 --> 01:08:45,460
up just a few quick notes first stop by

01:08:43,509 --> 01:08:47,350
the partner innovation area as Dan

01:08:45,460 --> 01:08:49,120
mentioned from 12:00 to 2:00 we have a

01:08:47,350 --> 01:08:51,160
variety of partners who will be showing

01:08:49,120 --> 01:08:53,080
their actions and they can also answer

01:08:51,160 --> 01:08:55,120
your questions about what it was like to

01:08:53,080 --> 01:08:58,299
build actions and give you some pro tips

01:08:55,120 --> 01:09:00,089
and also stop by the ask github booth

01:08:58,299 --> 01:09:03,009
where we're staffed with support folks

01:09:00,089 --> 01:09:05,650
engineers and others from across github

01:09:03,009 --> 01:09:07,779
to answer all your questions and also of

01:09:05,650 --> 01:09:09,310
course to collect your feedback and hear

01:09:07,779 --> 01:09:11,830
what you'd like to see next from github

01:09:09,310 --> 01:09:13,960
with that thanks everyone for being here

01:09:11,830 --> 01:09:15,250
and have a fantastic day at github

01:09:13,960 --> 01:09:17,930
universe

01:09:15,250 --> 01:09:45,119
[Applause]

01:09:17,930 --> 01:09:45,119

YouTube URL: https://www.youtube.com/watch?v=VnaK_ONmtC4


