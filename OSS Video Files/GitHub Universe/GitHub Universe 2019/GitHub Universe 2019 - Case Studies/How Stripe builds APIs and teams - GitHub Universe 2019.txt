Title: How Stripe builds APIs and teams - GitHub Universe 2019
Publication date: 2019-12-14
Playlist: GitHub Universe 2019 - Case Studies
Description: 
	Presented by Michael Glukhovsky, Developer Advocate at Stripe

Stripe’s global team builds economic infrastructure for the internet, maintains hundreds of distinct API endpoints, and deploys more than 4,000 API versions per year. In this talk, Developer Advocate Michael Glukhovsky, will share what engineering teams can derive from thoughtful API design—and how Stripe applies these learnings to accelerate product velocity, while maintaining a sharp focus on customer experience.

About GitHub Universe:
GitHub Universe is a two-day conference dedicated to the creativity and curiosity of the largest software community in the world. Sessions cover topics from team culture to open source software across industries and technologies.

For more information on GitHub Universe, check the website:
https://githubuniverse.com
Captions: 
	00:00:00,580 --> 00:00:14,179
[Music]

00:00:17,500 --> 00:00:24,200
hi there my name is Michael offski

00:00:22,610 --> 00:00:25,850
and I work on stripes developer

00:00:24,200 --> 00:00:30,350
relations team building new developer

00:00:25,850 --> 00:00:31,910
experiences on our platform 2019 marks

00:00:30,350 --> 00:00:34,850
the fiftieth anniversary of the Apollo

00:00:31,910 --> 00:00:36,470
moon landing when NASA wrote the

00:00:34,850 --> 00:00:38,480
original engineering requirements for

00:00:36,470 --> 00:00:41,000
the Apollo mission it didn't even

00:00:38,480 --> 00:00:43,850
mention the word software in his book

00:00:41,000 --> 00:00:46,430
digital Apollo MIT Aeronautics Professor

00:00:43,850 --> 00:00:48,320
David Mindell wrote software was not

00:00:46,430 --> 00:00:51,110
included in the budget and it was not

00:00:48,320 --> 00:00:53,239
included in the schedule but as he may

00:00:51,110 --> 00:00:56,120
know Safra ended up being critical to

00:00:53,239 --> 00:00:59,269
the Apollo mission running the ignition

00:00:56,120 --> 00:01:01,519
sequence automatic maneuvers and onboard

00:00:59,269 --> 00:01:03,170
controls on the spacecraft in fact you

00:01:01,519 --> 00:01:07,640
can find the Apollo mission source code

00:01:03,170 --> 00:01:10,250
on github today Margaret Hamilton joined

00:01:07,640 --> 00:01:13,159
the program in 1961 to develop software

00:01:10,250 --> 00:01:16,280
for the Apollo guidance computer and in

00:01:13,159 --> 00:01:20,210
1965 she became the team lead later

00:01:16,280 --> 00:01:23,299
coining the term software engineering by

00:01:20,210 --> 00:01:25,820
1968 over 400 people were writing

00:01:23,299 --> 00:01:27,409
software for the Apollo program software

00:01:25,820 --> 00:01:31,549
was going to help the u.s. get to the

00:01:27,409 --> 00:01:33,649
moon there was no existing framework of

00:01:31,549 --> 00:01:35,539
software development philosophy to rely

00:01:33,649 --> 00:01:38,000
on this was the first real software

00:01:35,539 --> 00:01:40,570
engineering team cobbled together from a

00:01:38,000 --> 00:01:43,640
sprawling army of MIT contractors

00:01:40,570 --> 00:01:47,210
personnel NASA engineers and private

00:01:43,640 --> 00:01:50,509
contractors with so many software

00:01:47,210 --> 00:01:51,679
engineers NASA MIT quickly found that

00:01:50,509 --> 00:01:53,929
their biggest challenges were

00:01:51,679 --> 00:01:56,500
organizational they had to manage

00:01:53,929 --> 00:01:59,179
communication problems trained new hires

00:01:56,500 --> 00:02:00,590
build unit and integration tests and

00:01:59,179 --> 00:02:03,469
they ultimately designed their codebase

00:02:00,590 --> 00:02:05,030
as a series of independent modules so

00:02:03,469 --> 00:02:07,399
that work could proceed in parallel a

00:02:05,030 --> 00:02:09,649
set of Central Committee's managed

00:02:07,399 --> 00:02:11,240
design and development process and each

00:02:09,649 --> 00:02:13,160
module was verified in two paws

00:02:11,240 --> 00:02:17,510
independently with the Flight Readiness

00:02:13,160 --> 00:02:20,569
review there was little margin for error

00:02:17,510 --> 00:02:22,450
and real world impact for human lives

00:02:20,569 --> 00:02:25,430
for every decision the Apollo team made

00:02:22,450 --> 00:02:28,160
code was prepared for launch on a series

00:02:25,430 --> 00:02:28,819
of punch cards and then hardwired into a

00:02:28,160 --> 00:02:32,049
four

00:02:28,819 --> 00:02:35,299
read-only memory called core rope memory

00:02:32,049 --> 00:02:37,819
with composed of ferromagnetic ceramic

00:02:35,299 --> 00:02:39,409
rings in a fine wire thread a 1-bit was

00:02:37,819 --> 00:02:41,659
stored by threading the wire through the

00:02:39,409 --> 00:02:43,819
core while a 0 bit was stored by

00:02:41,659 --> 00:02:45,530
bypassing the core and this design was

00:02:43,819 --> 00:02:47,900
resistant to radiation in space and

00:02:45,530 --> 00:02:51,290
could store about 1,500 bits per cubic

00:02:47,900 --> 00:02:53,569
inch this software was then literally

00:02:51,290 --> 00:02:55,669
woven into memory and the eight-week

00:02:53,569 --> 00:02:57,919
production lead time meant that any

00:02:55,669 --> 00:02:59,959
mistake in the codebase could lead to

00:02:57,919 --> 00:03:01,939
hole throwing the whole program off

00:02:59,959 --> 00:03:03,530
schedule and sometimes it still feels

00:03:01,939 --> 00:03:07,040
like legacy business software today is

00:03:03,530 --> 00:03:09,169
still running on core rope memory the

00:03:07,040 --> 00:03:11,569
Apollo mission is an incredible snapshot

00:03:09,169 --> 00:03:13,730
of how hard it is to build software they

00:03:11,569 --> 00:03:16,189
had to start quite literally from the

00:03:13,730 --> 00:03:17,419
ground up and had to learn all the hard

00:03:16,189 --> 00:03:19,819
lessons of building infrastructure

00:03:17,419 --> 00:03:22,879
software with a lofty goal and an

00:03:19,819 --> 00:03:25,280
incredibly compressed timeline and in

00:03:22,879 --> 00:03:26,889
the decades since the exponential rise

00:03:25,280 --> 00:03:28,730
in Hardware computing power

00:03:26,889 --> 00:03:31,040
significantly raised the stakes

00:03:28,730 --> 00:03:33,229
software could suddenly solve incredibly

00:03:31,040 --> 00:03:35,389
complex problems with the same questions

00:03:33,229 --> 00:03:36,109
the Apollo team learned and needed to

00:03:35,389 --> 00:03:38,479
answer

00:03:36,109 --> 00:03:40,159
suddenly magnified and we've all been

00:03:38,479 --> 00:03:44,449
relearning those lessons in the decades

00:03:40,159 --> 00:03:46,970
since which brings us to how we deal

00:03:44,449 --> 00:03:49,040
with this problem at stripe we build

00:03:46,970 --> 00:03:50,989
economic infrastructure for millions of

00:03:49,040 --> 00:03:53,689
businesses around the world and expose

00:03:50,989 --> 00:03:55,340
it via an API platform when you operate

00:03:53,689 --> 00:03:57,319
infrastructure the decisions you make

00:03:55,340 --> 00:03:59,470
about how to build software impact

00:03:57,319 --> 00:04:03,290
everyone who relies on your service

00:03:59,470 --> 00:04:06,319
we process more than 250 million API

00:04:03,290 --> 00:04:10,159
requests every day deploy more than

00:04:06,319 --> 00:04:12,439
4,000 API versions every year I maintain

00:04:10,159 --> 00:04:14,780
more than 500 distinct distinct API

00:04:12,439 --> 00:04:16,699
endpoints and we do so with a team of

00:04:14,780 --> 00:04:19,310
more than 800 engineers around the world

00:04:16,699 --> 00:04:22,759
from Dublin to San Francisco to

00:04:19,310 --> 00:04:25,039
Singapore and our API constitutes the

00:04:22,759 --> 00:04:26,960
building blocks the common language and

00:04:25,039 --> 00:04:28,990
the infrastructure that businesses rely

00:04:26,960 --> 00:04:28,990
on

00:04:30,020 --> 00:04:35,700
the API as we produce need to be simple

00:04:33,750 --> 00:04:38,190
and approachable for global audience

00:04:35,700 --> 00:04:40,740
they need to feel powerful and flexible

00:04:38,190 --> 00:04:42,960
for developers and be collectively

00:04:40,740 --> 00:04:45,060
composable so businesses can evolve and

00:04:42,960 --> 00:04:49,050
design their operating model through

00:04:45,060 --> 00:04:51,150
code so we are thoughtful about our team

00:04:49,050 --> 00:04:53,450
structures and design practices that

00:04:51,150 --> 00:04:56,070
enable us to operate in a distributed

00:04:53,450 --> 00:05:00,450
autonomous fashion while preserving a

00:04:56,070 --> 00:05:02,610
consistent API in this talk I'm going to

00:05:00,450 --> 00:05:04,680
focus on a few key principles that we've

00:05:02,610 --> 00:05:11,250
learned from that experience so let's

00:05:04,680 --> 00:05:13,080
take a look one of the things our team

00:05:11,250 --> 00:05:16,290
has discovered is the most important

00:05:13,080 --> 00:05:17,820
principle is users first this lesson is

00:05:16,290 --> 00:05:19,400
well learned by the best product and

00:05:17,820 --> 00:05:22,710
engineering teams across our industry

00:05:19,400 --> 00:05:23,700
always start with your user I had to

00:05:22,710 --> 00:05:25,440
learn this myself

00:05:23,700 --> 00:05:27,870
before starting stripe before joining

00:05:25,440 --> 00:05:29,700
stripe I started rethink DB a database

00:05:27,870 --> 00:05:31,290
and developer tools company our very

00:05:29,700 --> 00:05:33,470
first release was based on our own

00:05:31,290 --> 00:05:35,880
system software and research development

00:05:33,470 --> 00:05:37,620
technically it was a great product but

00:05:35,880 --> 00:05:39,810
we didn't establish products market fit

00:05:37,620 --> 00:05:42,180
until we set aside our designs and

00:05:39,810 --> 00:05:43,950
started talking to users those

00:05:42,180 --> 00:05:45,900
conversations catalyzed our open source

00:05:43,950 --> 00:05:50,010
community and we ended up building the

00:05:45,900 --> 00:05:52,260
product with our users Vernor Vogel's

00:05:50,010 --> 00:05:55,200
Amazon CTO and one of the chief

00:05:52,260 --> 00:05:58,200
architects behind AWS outlined their

00:05:55,200 --> 00:06:00,330
approach to their approach to designing

00:05:58,200 --> 00:06:02,430
for users in a process called working

00:06:00,330 --> 00:06:05,640
backwards where they create four

00:06:02,430 --> 00:06:08,640
documents before starting any project

00:06:05,640 --> 00:06:10,380
that press release an FAQ an outline of

00:06:08,640 --> 00:06:13,680
the customer experience and the user

00:06:10,380 --> 00:06:15,810
manual as the name suggests it may seem

00:06:13,680 --> 00:06:18,210
backwards to start with the user manual

00:06:15,810 --> 00:06:20,070
in the press release but armed with

00:06:18,210 --> 00:06:22,320
these resources Amazon teams can

00:06:20,070 --> 00:06:23,970
reliably communicate about new projects

00:06:22,320 --> 00:06:26,520
and quickly establish a shared vision

00:06:23,970 --> 00:06:27,930
and one of the reasons that AWS focused

00:06:26,520 --> 00:06:30,030
here is because when you build for

00:06:27,930 --> 00:06:32,310
builders it's even more important to get

00:06:30,030 --> 00:06:34,590
all these details right developers can

00:06:32,310 --> 00:06:38,850
spend over a dozen hours a day designing

00:06:34,590 --> 00:06:41,310
and debugging with your tools Donald

00:06:38,850 --> 00:06:42,980
Knuth author of the legendary tome the

00:06:41,310 --> 00:06:45,050
art of computer programming

00:06:42,980 --> 00:06:46,580
the typesetting system tech used by

00:06:45,050 --> 00:06:50,210
scientists and engineers all around the

00:06:46,580 --> 00:06:52,130
world noted I came to the conclusion

00:06:50,210 --> 00:06:53,780
that the designer of a new system must

00:06:52,130 --> 00:06:56,300
not only be the implementer in the first

00:06:53,780 --> 00:06:59,240
large-scale user the designer should

00:06:56,300 --> 00:07:00,410
also write the first user manual if the

00:06:59,240 --> 00:07:02,360
separation of any of these four

00:07:00,410 --> 00:07:03,860
components would have hurt tech

00:07:02,360 --> 00:07:06,770
significantly if I had not participated

00:07:03,860 --> 00:07:08,570
fully in all these activities literally

00:07:06,770 --> 00:07:10,100
hundreds of improvements would never

00:07:08,570 --> 00:07:11,930
have been made because I never would

00:07:10,100 --> 00:07:12,860
have thought of them or perceived that

00:07:11,930 --> 00:07:17,570
they were important

00:07:12,860 --> 00:07:20,300
a similar intense focus on users is a

00:07:17,570 --> 00:07:21,740
core part of stripes pthose users first

00:07:20,300 --> 00:07:23,510
is one of our company's operating

00:07:21,740 --> 00:07:24,980
principles and you'll often hear us

00:07:23,510 --> 00:07:28,700
mention it in conversation with each

00:07:24,980 --> 00:07:29,270
other it's also a critical part of our

00:07:28,700 --> 00:07:31,190
history

00:07:29,270 --> 00:07:33,340
back when stripe was a fledgling startup

00:07:31,190 --> 00:07:35,720
in a small office in downtown Palo Alto

00:07:33,340 --> 00:07:37,520
building out the very first version of

00:07:35,720 --> 00:07:39,200
the stripe API the team sat with

00:07:37,520 --> 00:07:41,450
prospective users and carefully

00:07:39,200 --> 00:07:43,790
interviewed them on the API design it

00:07:41,450 --> 00:07:45,650
took three major redesigns before it

00:07:43,790 --> 00:07:48,380
shipped and for an early-stage company

00:07:45,650 --> 00:07:50,630
this is an eternity but with stripes

00:07:48,380 --> 00:07:52,670
focus on developers we realized it was

00:07:50,630 --> 00:07:55,010
critical to both get the right semantics

00:07:52,670 --> 00:07:58,670
and build something that just felt good

00:07:55,010 --> 00:08:01,010
to use engineer's wrote the

00:07:58,670 --> 00:08:03,920
documentation for each api resource and

00:08:01,010 --> 00:08:05,510
in the early days every api error would

00:08:03,920 --> 00:08:07,910
trigger an email to John and Patrick's

00:08:05,510 --> 00:08:09,680
inboxes and every support ticket would

00:08:07,910 --> 00:08:11,150
page their cell phones and they often

00:08:09,680 --> 00:08:15,290
pair program these first stripe

00:08:11,150 --> 00:08:17,270
integrations with their users and to

00:08:15,290 --> 00:08:18,680
this day we still maintain the same IRC

00:08:17,270 --> 00:08:21,320
channel and habited by our earliest

00:08:18,680 --> 00:08:24,050
users who provide us with key feedback

00:08:21,320 --> 00:08:26,420
on our API designs our most passionate

00:08:24,050 --> 00:08:29,630
users cement our culture of investing in

00:08:26,420 --> 00:08:32,030
API design today we need to support a

00:08:29,630 --> 00:08:34,220
highly diverse global user base in over

00:08:32,030 --> 00:08:38,000
45 countries so we had to scale our

00:08:34,220 --> 00:08:39,890
approach to designing for users for

00:08:38,000 --> 00:08:42,080
example this year we designed a new set

00:08:39,890 --> 00:08:44,420
of asynchronous payment api's to support

00:08:42,080 --> 00:08:45,710
new European regulations to secure

00:08:44,420 --> 00:08:48,350
payments called strong customer

00:08:45,710 --> 00:08:50,690
authentication we sent a team to London

00:08:48,350 --> 00:08:52,220
to introduce users to these new api's to

00:08:50,690 --> 00:08:54,360
spend time with them in person and

00:08:52,220 --> 00:08:57,449
introduce the documentation

00:08:54,360 --> 00:08:59,610
and writing the announcement blog post

00:08:57,449 --> 00:09:01,439
and the FAQ before starting a new

00:08:59,610 --> 00:09:02,999
project or implementation is still a

00:09:01,439 --> 00:09:04,889
very common practice at stripe for

00:09:02,999 --> 00:09:07,139
product briefs here's an example

00:09:04,889 --> 00:09:08,339
describing new support for paper checks

00:09:07,139 --> 00:09:10,259
and our billing product

00:09:08,339 --> 00:09:14,910
it helped us align on exactly what we

00:09:10,259 --> 00:09:16,799
were trying to do with this product we

00:09:14,910 --> 00:09:18,929
gather feedback directly from our API

00:09:16,799 --> 00:09:20,730
documentation and the developer view in

00:09:18,929 --> 00:09:22,529
the dashboard with a CSAT metric and

00:09:20,730 --> 00:09:24,480
comets these are then reviewed by

00:09:22,529 --> 00:09:27,709
developer experience teams and funneled

00:09:24,480 --> 00:09:31,019
directly to product development teams in

00:09:27,709 --> 00:09:32,939
fact our best products often emerge from

00:09:31,019 --> 00:09:35,279
this ongoing conversation with our users

00:09:32,939 --> 00:09:37,829
after seeing many users follow an

00:09:35,279 --> 00:09:39,959
extract transform load pattern with

00:09:37,829 --> 00:09:42,329
stripe data to produce custom reporting

00:09:39,959 --> 00:09:44,339
we created Sigma to allow users to

00:09:42,329 --> 00:09:46,139
rapidly query the stripe dataset

00:09:44,339 --> 00:09:51,299
directly using the common sequel

00:09:46,139 --> 00:09:53,879
interface we have multiple teams across

00:09:51,299 --> 00:09:55,860
the company continuously talking to and

00:09:53,879 --> 00:09:57,889
learning from users including our UX

00:09:55,860 --> 00:10:00,869
research teams product managers

00:09:57,889 --> 00:10:03,360
deployment teams support engineers and

00:10:00,869 --> 00:10:05,669
developer experience teams in fact we

00:10:03,360 --> 00:10:07,559
encourage everyone within stripe to talk

00:10:05,669 --> 00:10:10,379
to users in whatever capacity they

00:10:07,559 --> 00:10:12,779
operate we maintain ongoing lists of the

00:10:10,379 --> 00:10:15,179
top asks from businesses of all sizes

00:10:12,779 --> 00:10:17,069
and across geographies to provide a

00:10:15,179 --> 00:10:21,869
total view on what the platform needs to

00:10:17,069 --> 00:10:24,179
provide as an infrastructure the

00:10:21,869 --> 00:10:27,089
foundation of our roadmap is built from

00:10:24,179 --> 00:10:32,699
seeing patterns of need across these

00:10:27,089 --> 00:10:34,709
conversations with our users the next

00:10:32,699 --> 00:10:39,089
principle is that you just have to spend

00:10:34,709 --> 00:10:40,799
time making it good in San Francisco we

00:10:39,089 --> 00:10:42,629
love baking sourdough bread and it's a

00:10:40,799 --> 00:10:45,119
delicious metaphor for the effort that

00:10:42,629 --> 00:10:46,709
goes into developer experience the

00:10:45,119 --> 00:10:50,759
ingredients are exactly the same every

00:10:46,709 --> 00:10:52,169
single time flour water salt yeast and

00:10:50,759 --> 00:10:52,919
your first attempts are going to be

00:10:52,169 --> 00:10:54,959
disastrous

00:10:52,919 --> 00:10:57,480
but as any true sourdough Baker will

00:10:54,959 --> 00:10:59,809
tell you over time you perfect a recipe

00:10:57,480 --> 00:11:02,339
and it kind of becomes really special

00:10:59,809 --> 00:11:04,679
it's a labor of love and it just takes

00:11:02,339 --> 00:11:06,240
time you can feed the starter for more

00:11:04,679 --> 00:11:07,890
than a year and every time you bake a

00:11:06,240 --> 00:11:10,440
loaf it just gets a bit better

00:11:07,890 --> 00:11:14,519
should euler should you use more water

00:11:10,440 --> 00:11:16,950
less salt more time to prove need harder

00:11:14,519 --> 00:11:19,440
or need lighter you learn more every

00:11:16,950 --> 00:11:22,110
time you make a mistake an API design is

00:11:19,440 --> 00:11:25,620
like this to every small decision humid

00:11:22,110 --> 00:11:27,329
Lee makes the difference we have teams

00:11:25,620 --> 00:11:29,040
dedicated to reviewing our developer

00:11:27,329 --> 00:11:31,010
experience and improving the frontline

00:11:29,040 --> 00:11:33,360
tools that they work with every day

00:11:31,010 --> 00:11:35,370
client libraries and multiple languages

00:11:33,360 --> 00:11:36,870
and an API reference both of which you

00:11:35,370 --> 00:11:38,970
oughta Auto generate directly from

00:11:36,870 --> 00:11:40,410
source code so they're always accurate

00:11:38,970 --> 00:11:42,300
or the new striped command-line

00:11:40,410 --> 00:11:44,160
interface that we released earlier this

00:11:42,300 --> 00:11:45,510
month are just a few examples of the

00:11:44,160 --> 00:11:49,920
developer touch points that we pay

00:11:45,510 --> 00:11:51,959
attention to externally the stripe API

00:11:49,920 --> 00:11:54,480
is often perceived as being deeply

00:11:51,959 --> 00:11:56,370
consistent and polished and people often

00:11:54,480 --> 00:11:58,410
ask me what's the secret behind your

00:11:56,370 --> 00:12:01,230
approach the simple truth is that there

00:11:58,410 --> 00:12:03,180
is no secret you just have to spend time

00:12:01,230 --> 00:12:05,670
I think that there's no way around this

00:12:03,180 --> 00:12:07,440
law of physics and API design you have

00:12:05,670 --> 00:12:09,870
to put in the time to make using the API

00:12:07,440 --> 00:12:11,940
delightful that means a lot of engineers

00:12:09,870 --> 00:12:13,760
who understand our users need to be

00:12:11,940 --> 00:12:18,810
involved at all stages of development

00:12:13,760 --> 00:12:21,510
lifecycle for any API it's important to

00:12:18,810 --> 00:12:23,339
infuse a culture of great API design at

00:12:21,510 --> 00:12:26,010
multiple levels of a product and

00:12:23,339 --> 00:12:27,750
engineering organization over time we've

00:12:26,010 --> 00:12:33,510
settled on a few key properties that

00:12:27,750 --> 00:12:37,680
capture approach toward API design first

00:12:33,510 --> 00:12:40,260
simplicity very top level API resources

00:12:37,680 --> 00:12:42,630
should be easy to understand and map to

00:12:40,260 --> 00:12:44,579
real-life concepts in a way that may

00:12:42,630 --> 00:12:46,410
feels intuitive this makes them feel

00:12:44,579 --> 00:12:50,120
tactile for the developer and makes it

00:12:46,410 --> 00:12:53,279
easy to understand how to use them

00:12:50,120 --> 00:12:55,470
API should be composable they should be

00:12:53,279 --> 00:12:57,329
additive building blocks should fit

00:12:55,470 --> 00:12:59,130
together our goal is that every

00:12:57,329 --> 00:13:00,779
component of the platform will work

00:12:59,130 --> 00:13:02,760
predictably with every other component

00:13:00,779 --> 00:13:04,949
whenever there's a point of friction we

00:13:02,760 --> 00:13:07,589
apply effort to smooth it out as you use

00:13:04,949 --> 00:13:09,510
more stripes API you gain a cumulative

00:13:07,589 --> 00:13:11,640
advantage for example we often find that

00:13:09,510 --> 00:13:14,339
our users start with our connect API and

00:13:11,640 --> 00:13:17,100
then steadily add billing then terminal

00:13:14,339 --> 00:13:20,899
then Sigma as their business evolves and

00:13:17,100 --> 00:13:20,899
they seek to unlock new functionality

00:13:21,090 --> 00:13:26,200
next is predictable api's our

00:13:24,280 --> 00:13:28,510
infrastructure when you turn on the tap

00:13:26,200 --> 00:13:30,670
you expect water to come out and when

00:13:28,510 --> 00:13:32,640
you check a Swiss watch it tells you the

00:13:30,670 --> 00:13:35,200
right time when you perform an operation

00:13:32,640 --> 00:13:37,660
multiple times you should expect the

00:13:35,200 --> 00:13:40,510
same operation and the same outcome so

00:13:37,660 --> 00:13:42,910
we provide idempotent operations so that

00:13:40,510 --> 00:13:44,800
users can safely rerun transactions

00:13:42,910 --> 00:13:49,390
without worrying about accidentally

00:13:44,800 --> 00:13:52,090
duplicating charges each of these design

00:13:49,390 --> 00:13:54,130
principles enables stripe businesses to

00:13:52,090 --> 00:13:56,710
reliably integrate with any number of

00:13:54,130 --> 00:13:58,570
our api's operate them at scale and

00:13:56,710 --> 00:14:02,560
maintain them over time with a minimum

00:13:58,570 --> 00:14:05,860
of effort finally api's should be

00:14:02,560 --> 00:14:07,510
backwards compatible by design you can

00:14:05,860 --> 00:14:09,700
continue transacting on stripe using

00:14:07,510 --> 00:14:12,100
your existing technical integration even

00:14:09,700 --> 00:14:13,960
as we add new features and involve our

00:14:12,100 --> 00:14:15,640
design you can then choose when to

00:14:13,960 --> 00:14:21,130
upgrade your infrastructure when you're

00:14:15,640 --> 00:14:23,200
ready so those are our principles we

00:14:21,130 --> 00:14:25,030
then have a rigorous API design process

00:14:23,200 --> 00:14:26,350
that allows teams to follow them

00:14:25,030 --> 00:14:28,810
independently while designing new

00:14:26,350 --> 00:14:31,030
products and API interfaces here's a

00:14:28,810 --> 00:14:35,110
product process that we follow while

00:14:31,030 --> 00:14:37,300
building a new API we start with a

00:14:35,110 --> 00:14:39,910
design document that proposes a new API

00:14:37,300 --> 00:14:42,970
specification it details any new

00:14:39,910 --> 00:14:45,910
endpoints API resources events or

00:14:42,970 --> 00:14:49,750
changes to responses parameters or web

00:14:45,910 --> 00:14:52,000
hug behavior we have a cross-functional

00:14:49,750 --> 00:14:53,950
review team with expertise and our

00:14:52,000 --> 00:14:56,800
platform operations developer

00:14:53,950 --> 00:14:59,020
experienced front-end tooling security

00:14:56,800 --> 00:15:01,180
practices and other areas across stripe

00:14:59,020 --> 00:15:03,730
this group meets in person to discuss

00:15:01,180 --> 00:15:05,590
questions like are the changes

00:15:03,730 --> 00:15:08,080
consistent with design patterns across

00:15:05,590 --> 00:15:10,030
our API will the experience feel

00:15:08,080 --> 00:15:11,800
consistent when using different

00:15:10,030 --> 00:15:14,770
programming languages for different

00:15:11,800 --> 00:15:16,480
client libraries with stripe how would

00:15:14,770 --> 00:15:18,940
this look and feel to someone outside

00:15:16,480 --> 00:15:21,820
the stripe organization how might this

00:15:18,940 --> 00:15:24,160
break user expectations how might the

00:15:21,820 --> 00:15:27,250
change affect API is that layer on top

00:15:24,160 --> 00:15:29,320
of the proposal what is the friction for

00:15:27,250 --> 00:15:31,540
an existing or new user to adopt this

00:15:29,320 --> 00:15:33,010
new API are we introducing severe

00:15:31,540 --> 00:15:37,360
technical burden to migrate

00:15:33,010 --> 00:15:39,220
to it we then conduct user testing to

00:15:37,360 --> 00:15:40,810
learn about how real users might adopt

00:15:39,220 --> 00:15:44,320
the new feature and what tensions might

00:15:40,810 --> 00:15:46,449
come up and then we produce an early

00:15:44,320 --> 00:15:49,480
version and use infrastructure in our

00:15:46,449 --> 00:15:51,130
systems to gate in specific users to

00:15:49,480 --> 00:15:54,339
provide as much early feedback as

00:15:51,130 --> 00:15:56,649
possible on a real working API before we

00:15:54,339 --> 00:16:00,730
release it and ship it to the rest of

00:15:56,649 --> 00:16:02,829
the world our team then irons out any

00:16:00,730 --> 00:16:05,380
bugs documents the new feature and

00:16:02,829 --> 00:16:07,360
issues a new API version when we're

00:16:05,380 --> 00:16:09,070
ready to go live we then incremental e

00:16:07,360 --> 00:16:11,110
roll out the feature to users across our

00:16:09,070 --> 00:16:14,019
platform and keep a close eye for any

00:16:11,110 --> 00:16:16,060
issues that might come up the key to

00:16:14,019 --> 00:16:18,190
this process is that we introduce as

00:16:16,060 --> 00:16:20,320
many opportunities as possible for

00:16:18,190 --> 00:16:22,570
feedback from experts across the company

00:16:20,320 --> 00:16:27,190
and we avoid building our products in

00:16:22,570 --> 00:16:29,019
isolation from our users one of the most

00:16:27,190 --> 00:16:31,240
important opportunities for expert

00:16:29,019 --> 00:16:34,120
feedback in that flow is our stripe API

00:16:31,240 --> 00:16:36,250
review this team of engineers encourages

00:16:34,120 --> 00:16:37,630
a culture of great API design and over

00:16:36,250 --> 00:16:39,760
the years they've arrived at a set of

00:16:37,630 --> 00:16:41,589
encouraged design patterns I'm going to

00:16:39,760 --> 00:16:43,630
share a few of them today drawn from the

00:16:41,589 --> 00:16:47,560
concrete checklists and guidelines that

00:16:43,630 --> 00:16:50,949
we use internally here's a good one

00:16:47,560 --> 00:16:52,779
avoid industry jargon our users

00:16:50,949 --> 00:16:55,300
shouldn't need to be experts in payments

00:16:52,779 --> 00:16:57,670
stripe should provide familiar tactile

00:16:55,300 --> 00:16:59,440
parameter names every credit card has

00:16:57,670 --> 00:17:02,760
that long number across the front it's

00:16:59,440 --> 00:17:06,549
known as a primary account number or pan

00:17:02,760 --> 00:17:09,189
but we say card number and not card dot

00:17:06,549 --> 00:17:13,650
pan on our API everyone understands the

00:17:09,189 --> 00:17:13,650
word number but only insiders know pan

00:17:13,770 --> 00:17:18,220
some of these examples are going to get

00:17:16,000 --> 00:17:20,199
even more detailed for example we use

00:17:18,220 --> 00:17:22,179
nested structures to group related

00:17:20,199 --> 00:17:23,500
concepts rather than flattening

00:17:22,179 --> 00:17:25,870
everything to the top level

00:17:23,500 --> 00:17:29,770
this improves understanding and enables

00:17:25,870 --> 00:17:32,710
future extensibility more details

00:17:29,770 --> 00:17:35,380
properties in API are preferred as enums

00:17:32,710 --> 00:17:37,090
rather than billions we can't predict

00:17:35,380 --> 00:17:39,340
all possible future states for a

00:17:37,090 --> 00:17:41,710
property here you can see an example

00:17:39,340 --> 00:17:44,620
from stripe issuing if we chosen to make

00:17:41,710 --> 00:17:46,210
cancelled a boolean to denote active or

00:17:44,620 --> 00:17:48,100
canceled states for

00:17:46,210 --> 00:17:50,110
hard we couldn't have later added the

00:17:48,100 --> 00:17:54,279
inactive state when we later realized

00:17:50,110 --> 00:17:56,679
that we needed that too if an API

00:17:54,279 --> 00:17:58,330
request affects an object state it

00:17:56,679 --> 00:18:00,760
should be reflected in the response as

00:17:58,330 --> 00:18:02,950
an example you can see the request here

00:18:00,760 --> 00:18:06,070
is modifying the customer's description

00:18:02,950 --> 00:18:08,020
to hello it's important that hello is

00:18:06,070 --> 00:18:10,270
reflected in the response so you know a

00:18:08,020 --> 00:18:14,590
P I request is successful and did what

00:18:10,270 --> 00:18:18,190
you expected we have a consistent

00:18:14,590 --> 00:18:20,380
pattern for polymorphic ap is sometimes

00:18:18,190 --> 00:18:22,390
api's can return multiple types of

00:18:20,380 --> 00:18:24,730
objects but we want to provide one

00:18:22,390 --> 00:18:27,299
generalized api so we can include a

00:18:24,730 --> 00:18:30,130
polymorphic response for each type

00:18:27,299 --> 00:18:31,630
polymorphism and api's is notoriously

00:18:30,130 --> 00:18:33,340
difficult to get right and the best

00:18:31,630 --> 00:18:36,190
pattern we've arrived at for developers

00:18:33,340 --> 00:18:37,870
is to rely on a type field to easily

00:18:36,190 --> 00:18:39,820
disambiguate what kind of object you're

00:18:37,870 --> 00:18:42,070
receiving and provide parameters that

00:18:39,820 --> 00:18:47,350
are unique to that type in a designated

00:18:42,070 --> 00:18:49,330
nested structure side-effects and

00:18:47,350 --> 00:18:51,970
meaningful changes should be expressed

00:18:49,330 --> 00:18:53,980
through verbs when you are substantially

00:18:51,970 --> 00:18:56,350
modifying a core API resource an

00:18:53,980 --> 00:18:57,490
explicit verb makes it much easier to

00:18:56,350 --> 00:19:00,460
understand that there's a state

00:18:57,490 --> 00:19:02,799
transition for example we capture the

00:19:00,460 --> 00:19:07,029
payment intent or mark the invoice is

00:19:02,799 --> 00:19:09,100
uncollectible and this gives us a neat

00:19:07,029 --> 00:19:11,620
and understandable pattern for time

00:19:09,100 --> 00:19:16,529
stamps related to changes any such

00:19:11,620 --> 00:19:16,529
timestamp should be expressed as verb at

00:19:19,310 --> 00:19:24,650
finally API review explicitly encourages

00:19:22,610 --> 00:19:26,840
providing early access to rapidly

00:19:24,650 --> 00:19:29,150
iterate on designs with beta users a

00:19:26,840 --> 00:19:31,580
critical part of our infrastructure is a

00:19:29,150 --> 00:19:33,410
system of software gates that unlock new

00:19:31,580 --> 00:19:35,900
functionality on our platform this

00:19:33,410 --> 00:19:37,430
enables us to invite external users to

00:19:35,900 --> 00:19:40,040
try a new feature before it's released

00:19:37,430 --> 00:19:42,020
to the general stripe user base teams

00:19:40,040 --> 00:19:44,450
are encouraged to trial a few designs

00:19:42,020 --> 00:19:47,510
with users as have L on the best options

00:19:44,450 --> 00:19:51,070
for example the stripe issuing API was

00:19:47,510 --> 00:19:51,070
developed behind a gate for over a year

00:19:52,630 --> 00:19:57,230
it's also important to remove these

00:19:55,130 --> 00:19:58,580
gates aggressively once the feature has

00:19:57,230 --> 00:20:03,470
shipped you don't want to maintain

00:19:58,580 --> 00:20:06,560
multiple code paths for very long and so

00:20:03,470 --> 00:20:09,410
what may seem like smaller details are

00:20:06,560 --> 00:20:10,970
an aggregate highly impactful of course

00:20:09,410 --> 00:20:13,460
none of these are hard and fast rules

00:20:10,970 --> 00:20:16,460
there can often be a good reason to make

00:20:13,460 --> 00:20:18,950
an exception the API review team holds

00:20:16,460 --> 00:20:21,710
in person discussions to examine the

00:20:18,950 --> 00:20:24,800
spaces in between and identify the right

00:20:21,710 --> 00:20:26,810
solution for users the any time that

00:20:24,800 --> 00:20:29,360
we're in doubt we let the developer

00:20:26,810 --> 00:20:35,060
experience drive us and not how hard it

00:20:29,360 --> 00:20:36,440
is to implement for stripe and we don't

00:20:35,060 --> 00:20:38,300
always pick the right design the first

00:20:36,440 --> 00:20:40,880
time around we ultimately still learn

00:20:38,300 --> 00:20:43,400
the most from our users for example we

00:20:40,880 --> 00:20:45,590
introduced an API named issuer fraud

00:20:43,400 --> 00:20:47,780
records and we were really excited about

00:20:45,590 --> 00:20:49,970
it because it provided fraud warnings

00:20:47,780 --> 00:20:52,370
from based on reports from fraud from

00:20:49,970 --> 00:20:53,660
card networks which enables users to

00:20:52,370 --> 00:20:55,820
identify potentially fraudulent

00:20:53,660 --> 00:20:59,440
purchases before they result in a

00:20:55,820 --> 00:21:01,970
dispute which could have additional fees

00:20:59,440 --> 00:21:03,890
but early feedback from a small set of

00:21:01,970 --> 00:21:05,960
invited users showed the name to be

00:21:03,890 --> 00:21:07,850
really confusing to them the only Google

00:21:05,960 --> 00:21:10,430
results for issue or fraud record were

00:21:07,850 --> 00:21:11,690
striped documentation pages so our

00:21:10,430 --> 00:21:13,310
product team our product team

00:21:11,690 --> 00:21:15,380
brainstormed some new options and

00:21:13,310 --> 00:21:17,660
renamed this to the early fraud warning

00:21:15,380 --> 00:21:19,190
API which more closely captures the

00:21:17,660 --> 00:21:21,970
essence of the functionality that that

00:21:19,190 --> 00:21:21,970
API provides

00:21:22,490 --> 00:21:27,350
and that's just one example of why an

00:21:25,220 --> 00:21:30,920
essential challenge and API design is

00:21:27,350 --> 00:21:32,660
naming each stripe API resource should

00:21:30,920 --> 00:21:34,910
have an easy-to-understand name and

00:21:32,660 --> 00:21:36,500
we're obsessive about name naming

00:21:34,910 --> 00:21:38,780
because it's for a global audience names

00:21:36,500 --> 00:21:41,330
like customers payment methods and

00:21:38,780 --> 00:21:43,760
disputes it's not just that they need to

00:21:41,330 --> 00:21:45,560
make sense but that users will need to

00:21:43,760 --> 00:21:47,300
type them over and over again and each

00:21:45,560 --> 00:21:50,990
time that they do so it acts as a touch

00:21:47,300 --> 00:21:53,480
point for stripe and names have long

00:21:50,990 --> 00:21:55,060
lives you can look to the basic unix

00:21:53,480 --> 00:21:57,680
commands that still live at the core of

00:21:55,060 --> 00:22:01,760
Linux and Mac OS servers that we use

00:21:57,680 --> 00:22:02,330
today with arcane names like CP RM and

00:22:01,760 --> 00:22:05,090
mV

00:22:02,330 --> 00:22:07,400
why are they so cryptic one of the

00:22:05,090 --> 00:22:09,770
original UNIX pioneers hundred Thomason

00:22:07,400 --> 00:22:12,080
explained that in the early days of UNIX

00:22:09,770 --> 00:22:14,330
mainframes you would log in on thin

00:22:12,080 --> 00:22:16,340
clients and you were charged for CPU and

00:22:14,330 --> 00:22:19,220
network time that you used and so

00:22:16,340 --> 00:22:22,760
characters were at a premium and he also

00:22:19,220 --> 00:22:24,650
said the keys they really required a

00:22:22,760 --> 00:22:26,090
hard hit so if you were working the

00:22:24,650 --> 00:22:28,070
whole day you would really feel it in

00:22:26,090 --> 00:22:29,960
your knuckles and that's the reason why

00:22:28,070 --> 00:22:31,700
the UNIX command repertoire has these

00:22:29,960 --> 00:22:33,950
short names because if it could save

00:22:31,700 --> 00:22:36,290
typing one keystroke per command it

00:22:33,950 --> 00:22:39,170
really helps and we're still using these

00:22:36,290 --> 00:22:41,270
same Unix commands today so we take this

00:22:39,170 --> 00:22:42,740
very seriously we expect the names that

00:22:41,270 --> 00:22:48,050
we choose will live on in software

00:22:42,740 --> 00:22:50,390
systems for a very long time we also

00:22:48,050 --> 00:22:52,700
spend a lot of time building with our

00:22:50,390 --> 00:22:54,860
own api's to experience any pain points

00:22:52,700 --> 00:22:56,480
firsthand ourselves when I talk to

00:22:54,860 --> 00:22:58,190
interview candidates the one of the

00:22:56,480 --> 00:23:00,950
basic questions I'm curious to answer is

00:22:58,190 --> 00:23:02,960
what are you building it's surprising

00:23:00,950 --> 00:23:04,730
how many organizations operate in a way

00:23:02,960 --> 00:23:09,380
that's divorced from the product that

00:23:04,730 --> 00:23:12,020
they build for their users Microsoft

00:23:09,380 --> 00:23:15,170
manager Paul Maritz coined the term dog

00:23:12,020 --> 00:23:17,150
fooding inspired by Alpo dog food whose

00:23:15,170 --> 00:23:19,130
spokesperson famously proclaimed that

00:23:17,150 --> 00:23:21,260
their product was so good his own dogs

00:23:19,130 --> 00:23:23,390
loved in a Talpiot everyday and at

00:23:21,260 --> 00:23:25,370
Microsoft merits insisted that all

00:23:23,390 --> 00:23:27,580
employees adopt the Microsoft land

00:23:25,370 --> 00:23:29,360
manager so they can understand firsthand

00:23:27,580 --> 00:23:32,450
themselves how the product should be

00:23:29,360 --> 00:23:34,700
improved and the idea caught on

00:23:32,450 --> 00:23:36,889
so we write your Li dog food our own

00:23:34,700 --> 00:23:39,559
api's and developer tools we build

00:23:36,889 --> 00:23:40,970
practical examples ourselves often early

00:23:39,559 --> 00:23:43,369
in a product's development cycle and

00:23:40,970 --> 00:23:45,139
before we launch a new product we want

00:23:43,369 --> 00:23:50,200
an internal hackathon to encourage

00:23:45,139 --> 00:23:53,179
testing of the new API we also produce

00:23:50,200 --> 00:23:55,249
focused reviews of particular api's or

00:23:53,179 --> 00:23:57,590
products and ask teams to write up

00:23:55,249 --> 00:23:59,119
developer experience friction logs the

00:23:57,590 --> 00:24:00,950
goal is to produce a log of every

00:23:59,119 --> 00:24:02,960
command that you run and your personal

00:24:00,950 --> 00:24:04,639
reactions along the way noting things

00:24:02,960 --> 00:24:06,679
like I found this section of

00:24:04,639 --> 00:24:08,330
documentation confusing or I was

00:24:06,679 --> 00:24:10,549
frustrated by the number of steps this

00:24:08,330 --> 00:24:12,859
took and this captures the sharp edges

00:24:10,549 --> 00:24:17,239
in experience that a typical bug report

00:24:12,859 --> 00:24:18,950
can't capture and many stripes also run

00:24:17,239 --> 00:24:21,320
a side project or family business on our

00:24:18,950 --> 00:24:23,509
platform we encourage this because it

00:24:21,320 --> 00:24:25,759
provides us with even more first-hand

00:24:23,509 --> 00:24:28,730
experiences using our tools and platform

00:24:25,759 --> 00:24:31,489
and here a few examples one of our

00:24:28,730 --> 00:24:33,679
engineers Johnny Holman manages cushion

00:24:31,489 --> 00:24:36,769
which helps freelancers manage their

00:24:33,679 --> 00:24:39,559
clients invoices and projects and uses

00:24:36,769 --> 00:24:43,100
billing for invoices Sigma for analytics

00:24:39,559 --> 00:24:46,429
and Atlas for incorporation and Barrie

00:24:43,100 --> 00:24:48,559
Paget our CRO runs a horse farm Koro

00:24:46,429 --> 00:24:50,299
equestrian who board trained and

00:24:48,559 --> 00:24:51,950
provided clinic for horses in northern

00:24:50,299 --> 00:24:54,200
Washington and they use billing for

00:24:51,950 --> 00:24:56,029
invoices and at stripe we love to get

00:24:54,200 --> 00:24:58,609
creative with our emoji who doesn't and

00:24:56,029 --> 00:25:01,070
so our CTO David singleton created hot

00:24:58,609 --> 00:25:02,419
dog pins calm to sell custom pins for

00:25:01,070 --> 00:25:04,100
all our favorites like this skiing hot

00:25:02,419 --> 00:25:05,570
dog and I hear he's trying to meet his

00:25:04,100 --> 00:25:08,440
revenue goals by end of years so you

00:25:05,570 --> 00:25:11,559
should go visit it after the talk and

00:25:08,440 --> 00:25:17,149
that brings us to our final principle

00:25:11,559 --> 00:25:18,649
design your organization when we look

00:25:17,149 --> 00:25:20,869
back to the Apollo mission one of the

00:25:18,649 --> 00:25:22,460
emergent properties that they discovered

00:25:20,869 --> 00:25:24,529
was the importance of setting up the

00:25:22,460 --> 00:25:26,119
right effective organizational

00:25:24,529 --> 00:25:29,059
structures and establishing a clear

00:25:26,119 --> 00:25:31,580
vision one of the mythic stories from

00:25:29,059 --> 00:25:34,159
that era is of JFK's first visit to NASA

00:25:31,580 --> 00:25:35,809
headquarters and while he was there he

00:25:34,159 --> 00:25:38,239
noticed a janitor carrying a broom and

00:25:35,809 --> 00:25:39,799
he asked him what are you doing and he

00:25:38,239 --> 00:25:41,239
interrupted his tour and and and went

00:25:39,799 --> 00:25:43,399
over to ask him this question excuse me

00:25:41,239 --> 00:25:45,310
sir what are you doing well mr.

00:25:43,399 --> 00:25:49,780
president the janitor responded

00:25:45,310 --> 00:25:51,340
I'm putting a man on the moon however it

00:25:49,780 --> 00:25:54,040
was significantly harder to establish

00:25:51,340 --> 00:25:56,590
shared vision across a sprawling army of

00:25:54,040 --> 00:25:58,870
NASA personnel MIT scientists and

00:25:56,590 --> 00:26:02,650
contractors so they designed new

00:25:58,870 --> 00:26:04,960
organizational structures in the final

00:26:02,650 --> 00:26:08,560
report of the Apollo guidance oft wear

00:26:04,960 --> 00:26:10,080
Task Force NASA concluded quote the

00:26:08,560 --> 00:26:12,730
difficulties in software development

00:26:10,080 --> 00:26:15,460
will continue to require top-level

00:26:12,730 --> 00:26:17,530
management attention software complexity

00:26:15,460 --> 00:26:19,810
requires a high level of communication

00:26:17,530 --> 00:26:24,520
and participation by the many

00:26:19,810 --> 00:26:27,220
organizations involved in that process

00:26:24,520 --> 00:26:28,750
NASA uncovered what is now well known as

00:26:27,220 --> 00:26:32,260
an emergent property of software

00:26:28,750 --> 00:26:34,960
engineering as an organization in 1967

00:26:32,260 --> 00:26:36,490
computer scientist and hacker Mel Conway

00:26:34,960 --> 00:26:39,280
authored what has become known as

00:26:36,490 --> 00:26:41,370
Conway's law summarizing the same lesson

00:26:39,280 --> 00:26:44,140
that NASA learned and it goes

00:26:41,370 --> 00:26:47,050
organizations which design systems are

00:26:44,140 --> 00:26:48,970
constrained to produce designs which are

00:26:47,050 --> 00:26:52,720
copies of the communication structures

00:26:48,970 --> 00:26:54,940
of these organizations this especially

00:26:52,720 --> 00:26:56,800
holds true for software as we've

00:26:54,940 --> 00:26:58,630
steadily replaced our physical world

00:26:56,800 --> 00:27:00,580
with software systems we can learn a lot

00:26:58,630 --> 00:27:02,770
about why software works a certain way

00:27:00,580 --> 00:27:06,190
by examining the organization which

00:27:02,770 --> 00:27:08,740
created it as a basic example if five

00:27:06,190 --> 00:27:10,930
software teams work on a software system

00:27:08,740 --> 00:27:13,780
there will tend to be five software

00:27:10,930 --> 00:27:16,000
components but Conway's law has an

00:27:13,780 --> 00:27:17,860
inverse corollary you can be intentional

00:27:16,000 --> 00:27:20,050
about how you build a software

00:27:17,860 --> 00:27:21,580
engineering organization knowing that

00:27:20,050 --> 00:27:25,810
will be reflected in the work you

00:27:21,580 --> 00:27:27,900
produce when you look at a map of our

00:27:25,810 --> 00:27:31,020
products you can observe something else

00:27:27,900 --> 00:27:32,560
spoiler alert this maps to our org chart

00:27:31,020 --> 00:27:34,750
internally we have a payment

00:27:32,560 --> 00:27:36,820
infrastructure team and foundation

00:27:34,750 --> 00:27:39,190
groups whose work building the Global

00:27:36,820 --> 00:27:41,380
Payments and Treasury Network supports

00:27:39,190 --> 00:27:44,880
multiple product groups for everything

00:27:41,380 --> 00:27:44,880
you see that runs on top of that network

00:27:45,660 --> 00:27:50,790
stripe is a global engineering

00:27:47,850 --> 00:27:52,350
organization because of our scale it's

00:27:50,790 --> 00:27:54,510
important to build cultural and

00:27:52,350 --> 00:27:56,490
communication systems that support

00:27:54,510 --> 00:28:01,380
quickly building new ap is in a

00:27:56,490 --> 00:28:02,580
distributed and parallel fashion and a

00:28:01,380 --> 00:28:05,040
critical part of our communication

00:28:02,580 --> 00:28:07,110
system is of course github we maintain

00:28:05,040 --> 00:28:09,480
an internal mono repo where most of our

00:28:07,110 --> 00:28:11,280
daily work unfolds hundreds of thousands

00:28:09,480 --> 00:28:13,350
of commits code review and adjacent

00:28:11,280 --> 00:28:15,570
infrastructure to help us deploy

00:28:13,350 --> 00:28:20,490
thousands of versions of the stripe API

00:28:15,570 --> 00:28:22,170
every year we use github enterprise not

00:28:20,490 --> 00:28:24,180
just as shared infrastructure for code

00:28:22,170 --> 00:28:25,800
but to enable everyone from API

00:28:24,180 --> 00:28:28,140
engineers to marketing teams across

00:28:25,800 --> 00:28:29,970
stripe to contribute to projects we

00:28:28,140 --> 00:28:32,180
teach team members to use these shared

00:28:29,970 --> 00:28:35,040
tools as a collaborative environment

00:28:32,180 --> 00:28:39,870
shared tools help cross team boundaries

00:28:35,040 --> 00:28:41,790
and act as social infrastructure we

00:28:39,870 --> 00:28:43,650
extend this operating model to how we

00:28:41,790 --> 00:28:45,450
collaborate and work with hundreds of

00:28:43,650 --> 00:28:47,700
stripe and stripe users to build our

00:28:45,450 --> 00:28:50,850
core client libraries like no J in

00:28:47,700 --> 00:28:53,910
languages like nodejs Python Ruby Go

00:28:50,850 --> 00:28:56,280
Java PHP and dotnet and we maintain

00:28:53,910 --> 00:28:57,840
these open source projects so we learn

00:28:56,280 --> 00:29:01,490
an incredible amount of what our users

00:28:57,840 --> 00:29:04,230
want by building alongside them and

00:29:01,490 --> 00:29:06,180
whenever possible we open source the

00:29:04,230 --> 00:29:07,800
tools we create internally so we can

00:29:06,180 --> 00:29:10,920
share them with the world and improve

00:29:07,800 --> 00:29:13,110
the developer ecosystem most recently we

00:29:10,920 --> 00:29:15,300
released sorbet a fast type checker for

00:29:13,110 --> 00:29:18,030
Ruby which we use extensively at stripe

00:29:15,300 --> 00:29:20,250
sorbet ism is multi-threaded checking

00:29:18,030 --> 00:29:22,260
millions of lines of code by scaling

00:29:20,250 --> 00:29:24,600
Linda Lee across cores in the CPU and

00:29:22,260 --> 00:29:27,060
comes with a vs code plugin and is used

00:29:24,600 --> 00:29:30,090
by companies like Shopify coinbase and

00:29:27,060 --> 00:29:32,220
Kickstarter tools like sorbet help us

00:29:30,090 --> 00:29:36,680
keep our development process safe and

00:29:32,220 --> 00:29:36,680
consistent across a global organization

00:29:37,400 --> 00:29:42,930
the constellation of API design

00:29:40,110 --> 00:29:44,760
principles and shared tools enable us to

00:29:42,930 --> 00:29:47,430
support millions of internet businesses

00:29:44,760 --> 00:29:49,140
of all shapes and sizes every company is

00:29:47,430 --> 00:29:50,970
unique but by providing the right

00:29:49,140 --> 00:29:52,650
building blocks we hope to help them

00:29:50,970 --> 00:29:54,780
shape how they build our organizations

00:29:52,650 --> 00:29:57,230
how they communicate and in turn build

00:29:54,780 --> 00:29:57,230
software

00:29:57,799 --> 00:30:03,509
the lessons we've learned don't just

00:30:00,600 --> 00:30:05,610
apply to API platforms all engineering

00:30:03,509 --> 00:30:07,350
teams can study their own practices to

00:30:05,610 --> 00:30:09,389
better understand exactly how they build

00:30:07,350 --> 00:30:12,450
their product here's a few things you

00:30:09,389 --> 00:30:14,970
can try with your own team first build

00:30:12,450 --> 00:30:17,369
for your users of today but consider

00:30:14,970 --> 00:30:19,679
your platform of tomorrow interview

00:30:17,369 --> 00:30:21,840
users carefully consider patterns of

00:30:19,679 --> 00:30:23,730
feedback as you northstar but remember

00:30:21,840 --> 00:30:27,350
that every feature that you build you'll

00:30:23,730 --> 00:30:27,350
need to support for a very long time

00:30:28,580 --> 00:30:33,840
next you have to build for builders the

00:30:32,129 --> 00:30:36,149
best ap is our building blocks that

00:30:33,840 --> 00:30:38,879
creators can use predictably to design a

00:30:36,149 --> 00:30:41,129
solution for their own unique needs ap

00:30:38,879 --> 00:30:42,720
is our infrastructure you can't always

00:30:41,129 --> 00:30:45,480
predict how users will build on your

00:30:42,720 --> 00:30:48,379
api's but your knows most novel products

00:30:45,480 --> 00:30:52,429
will surely Ammar emerge from it from

00:30:48,379 --> 00:30:54,509
enabling their creativity and finally

00:30:52,429 --> 00:30:56,549
design your organization and

00:30:54,509 --> 00:30:58,739
communication structures to support your

00:30:56,549 --> 00:31:01,529
product you can influence your products

00:30:58,739 --> 00:31:03,799
quality and design by changing how your

00:31:01,529 --> 00:31:06,119
team communicates and organizes itself

00:31:03,799 --> 00:31:08,340
so these are the lessons that we've

00:31:06,119 --> 00:31:09,690
learned along the way catch me after

00:31:08,340 --> 00:31:12,350
this talk to share what you've learned

00:31:09,690 --> 00:31:41,099
thank you

00:31:12,350 --> 00:31:41,099

YouTube URL: https://www.youtube.com/watch?v=0TyfK_jsJa0


