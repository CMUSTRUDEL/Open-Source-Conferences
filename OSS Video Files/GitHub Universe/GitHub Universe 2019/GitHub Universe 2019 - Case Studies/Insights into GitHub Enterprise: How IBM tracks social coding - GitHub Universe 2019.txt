Title: Insights into GitHub Enterprise: How IBM tracks social coding - GitHub Universe 2019
Publication date: 2019-12-14
Playlist: GitHub Universe 2019 - Case Studies
Description: 
	Presented by Emma Dickson, Data Scientist/Data Engineer, IBM

How do you track whether GitHub is supporting and increasing the frequency of good coding behaviors like code review, continuous integration, and social coding for your company? When faced with this problem, IBM dove into their instance of GitHub Enterprise. In doing so, they gained insight into how IBM's internal coding practices within GitHub have developed since 2015 and information about the health of the ecosystem that has sprung up within GitHub. In this talk, you'll hear about their methods of investigation that can be applied to any organization and enterprise-specific datasets to apply business context to the data.

About GitHub Universe:
GitHub Universe is a two-day conference dedicated to the creativity and curiosity of the largest software community in the world. Sessions cover topics from team culture to open source software across industries and technologies.

For more information on GitHub Universe, check the website:
https://githubuniverse.com
Captions: 
	00:00:00,680 --> 00:00:18,929
[Music]

00:00:19,280 --> 00:00:25,740
hi I am Emma Dixon my pronouns are they

00:00:23,100 --> 00:00:28,410
them I work at IBM in a small

00:00:25,740 --> 00:00:30,900
four-person squad and this year we did

00:00:28,410 --> 00:00:32,369
kind of an octave arson spired intern

00:00:30,900 --> 00:00:35,250
choose why I'm here to talk to you today

00:00:32,369 --> 00:00:38,040
so the talk is called insights into

00:00:35,250 --> 00:00:42,120
github Enterprise how IBM analyzes the

00:00:38,040 --> 00:00:44,430
impact of github adoption so I want to

00:00:42,120 --> 00:00:46,440
give a little context about where my

00:00:44,430 --> 00:00:47,910
small four-person squad sits within IBM

00:00:46,440 --> 00:00:50,580
because I think it's helpful to

00:00:47,910 --> 00:00:51,809
understand why we undertook this project

00:00:50,580 --> 00:00:54,270
in the first place why it was

00:00:51,809 --> 00:00:57,059
interesting to us so we sit under

00:00:54,270 --> 00:00:59,399
toolbox and toolbox is the larger group

00:00:57,059 --> 00:01:01,260
within IBM that works to bring the best

00:00:59,399 --> 00:01:04,589
third-party tools in the industry

00:01:01,260 --> 00:01:06,470
things like slack github Safari books to

00:01:04,589 --> 00:01:09,180
IBM errs in order to support their work

00:01:06,470 --> 00:01:11,340
and we manage instances of these tools

00:01:09,180 --> 00:01:15,420
and we surface insights into their usage

00:01:11,340 --> 00:01:17,640
across all of IBM and that team sits

00:01:15,420 --> 00:01:22,170
under the CIO directly which is Fletcher

00:01:17,640 --> 00:01:23,940
Previn and so my squad is the insight

00:01:22,170 --> 00:01:26,190
squad which is part of toolbox we're

00:01:23,940 --> 00:01:28,800
basically the data analytics team within

00:01:26,190 --> 00:01:31,440
toolbox we use machine learning data

00:01:28,800 --> 00:01:34,410
science we create analytical pipelines

00:01:31,440 --> 00:01:36,599
to derive insights into tool usage

00:01:34,410 --> 00:01:39,750
across the company as well as predicted

00:01:36,599 --> 00:01:42,330
option trends we perform analysis on all

00:01:39,750 --> 00:01:45,330
of the 14 tools that toolbox covers and

00:01:42,330 --> 00:01:49,770
we have a total population of users of

00:01:45,330 --> 00:01:52,560
about 500,000 people so in 2019 we

00:01:49,770 --> 00:01:54,959
wanted to analyze the usage of github

00:01:52,560 --> 00:01:58,530
across IBM and see how it had impacted

00:01:54,959 --> 00:02:00,030
the way that IBM has worked so it's

00:01:58,530 --> 00:02:01,560
important to understand before we get

00:02:00,030 --> 00:02:03,060
into all of that kind of how github came

00:02:01,560 --> 00:02:06,060
to IBM because obviously it wasn't

00:02:03,060 --> 00:02:08,459
always there so IBM adopted github in

00:02:06,060 --> 00:02:10,380
2015 and the idea was that it would

00:02:08,459 --> 00:02:13,520
improve developers productivity and

00:02:10,380 --> 00:02:15,750
engagement that it would encourage

00:02:13,520 --> 00:02:17,730
collaboration code sharing code reuse

00:02:15,750 --> 00:02:20,069
all of that good kind of social coding

00:02:17,730 --> 00:02:22,050
stuff and we also thought that it would

00:02:20,069 --> 00:02:25,260
probably improve talent attraction and

00:02:22,050 --> 00:02:26,910
retention so currently or the last time

00:02:25,260 --> 00:02:30,180
I checked some time last week we have

00:02:26,910 --> 00:02:30,810
70,000 active users right now within IBM

00:02:30,180 --> 00:02:33,660
have yet

00:02:30,810 --> 00:02:36,120
and an active user is just anybody who's

00:02:33,660 --> 00:02:38,640
touched github in the last month so we

00:02:36,120 --> 00:02:45,270
have a lot of licensed users but 70,000

00:02:38,640 --> 00:02:47,910
active users so in 2019 it's been four

00:02:45,270 --> 00:02:51,000
years since github came to IBM and we

00:02:47,910 --> 00:02:53,490
hadn't done any real in-depth level of

00:02:51,000 --> 00:02:55,890
analysis into how github was being used

00:02:53,490 --> 00:02:57,330
aside from just those kind of general

00:02:55,890 --> 00:02:58,800
usage numbers that I mentioned so we

00:02:57,330 --> 00:03:00,870
knew how many people were active within

00:02:58,800 --> 00:03:02,370
github and we could see how that trended

00:03:00,870 --> 00:03:05,400
over time but we hadn't done any

00:03:02,370 --> 00:03:07,170
in-depth analysis of what was going on

00:03:05,400 --> 00:03:10,320
with how people were actually using the

00:03:07,170 --> 00:03:11,790
tool so we came up with a couple of

00:03:10,320 --> 00:03:13,380
questions we were just trying to

00:03:11,790 --> 00:03:16,140
brainstorm you know how do we see what's

00:03:13,380 --> 00:03:18,090
going on and we wanted to know how with

00:03:16,140 --> 00:03:20,130
practices around coding and specifically

00:03:18,090 --> 00:03:23,160
with regards to collaboration code

00:03:20,130 --> 00:03:24,780
sharing and reuse changed over time how

00:03:23,160 --> 00:03:26,820
are these behaviors around coding

00:03:24,780 --> 00:03:29,580
distributed across IBM from kind of a

00:03:26,820 --> 00:03:31,500
business perspective and as IBM ears

00:03:29,580 --> 00:03:33,500
have self-organized in github Enterprise

00:03:31,500 --> 00:03:36,450
is there a need for garbage collection

00:03:33,500 --> 00:03:38,280
so the first question was important

00:03:36,450 --> 00:03:39,540
because we wanted to see if github had

00:03:38,280 --> 00:03:41,340
fulfilled its use case if it had

00:03:39,540 --> 00:03:43,650
actually kind of done the things that we

00:03:41,340 --> 00:03:46,290
thought it would do the second one was

00:03:43,650 --> 00:03:48,810
important because we wanted to see how

00:03:46,290 --> 00:03:50,940
from a business perspective certain

00:03:48,810 --> 00:03:53,100
areas of the company were performing in

00:03:50,940 --> 00:03:55,260
those above behaviors and the last one

00:03:53,100 --> 00:03:57,299
was important mostly because if you have

00:03:55,260 --> 00:03:59,730
things that are unnecessary in a large

00:03:57,299 --> 00:04:01,410
enterprise organization like IBM you're

00:03:59,730 --> 00:04:02,790
probably costing money you could

00:04:01,410 --> 00:04:05,790
probably save money by getting rid of

00:04:02,790 --> 00:04:08,400
whatever is redundant and you might have

00:04:05,790 --> 00:04:10,440
people looking for you know orgs that

00:04:08,400 --> 00:04:13,650
don't exist for repos that aren't

00:04:10,440 --> 00:04:14,880
relevant anymore so there's there's

00:04:13,650 --> 00:04:20,280
motivation to keep your organization

00:04:14,880 --> 00:04:22,169
pretty clean so our initial thought with

00:04:20,280 --> 00:04:24,690
how to undergo this type of analysis was

00:04:22,169 --> 00:04:26,220
to look at the github API we figured out

00:04:24,690 --> 00:04:30,150
pretty quickly that that would not work

00:04:26,220 --> 00:04:32,460
for our scale it was just way too much

00:04:30,150 --> 00:04:37,320
both on github Zen to handle and ours so

00:04:32,460 --> 00:04:39,240
we decided to look at the database so I

00:04:37,320 --> 00:04:41,310
want to go into kind of how we set up

00:04:39,240 --> 00:04:43,830
the technical part of that report and

00:04:41,310 --> 00:04:44,729
then I'll get into what we actually

00:04:43,830 --> 00:04:46,409
found

00:04:44,729 --> 00:04:47,759
we did it but you know immediately when

00:04:46,409 --> 00:04:49,620
you sit down to a new project like this

00:04:47,759 --> 00:04:51,629
you come up with the constraints so the

00:04:49,620 --> 00:04:54,749
first one was we had to replicate the

00:04:51,629 --> 00:04:57,270
database our sre squad was the one who

00:04:54,749 --> 00:05:00,089
was managing our IBM's instance of the

00:04:57,270 --> 00:05:02,279
github enterprise database and we

00:05:00,089 --> 00:05:03,449
absolutely could not touch that instance

00:05:02,279 --> 00:05:05,819
because it was our production instance

00:05:03,449 --> 00:05:08,939
and for a report like this in the early

00:05:05,819 --> 00:05:10,289
stages negotiating that and dealing with

00:05:08,939 --> 00:05:11,400
that level of risk was just not

00:05:10,289 --> 00:05:13,919
something that anybody wanted to

00:05:11,400 --> 00:05:15,569
undertake so instead we decided all

00:05:13,919 --> 00:05:17,580
right we're gonna have to replicate the

00:05:15,569 --> 00:05:20,460
database instance and host it ourselves

00:05:17,580 --> 00:05:22,949
so that was the first constraint the

00:05:20,460 --> 00:05:25,139
second was sanitation we couldn't

00:05:22,949 --> 00:05:26,729
surface any private repo content

00:05:25,139 --> 00:05:29,249
basically anything to do with repos that

00:05:26,729 --> 00:05:30,779
were merged private or sensitive user

00:05:29,249 --> 00:05:33,089
information from the github enterprise

00:05:30,779 --> 00:05:35,249
database and we couldn't increase our

00:05:33,089 --> 00:05:37,289
authority over the github data and what

00:05:35,249 --> 00:05:39,180
that means was basically we didn't want

00:05:37,289 --> 00:05:40,710
any of the additional responsibility

00:05:39,180 --> 00:05:43,199
that our sorry squad was dealing with

00:05:40,710 --> 00:05:44,789
because they had the authority over the

00:05:43,199 --> 00:05:46,680
data to look at those sorts of things

00:05:44,789 --> 00:05:48,870
and kind of do that in-depth analysis we

00:05:46,680 --> 00:05:51,569
wanted to remain pretty normal users of

00:05:48,870 --> 00:05:52,919
github so by necessity we had to censor

00:05:51,569 --> 00:05:55,620
certain information that we weren't

00:05:52,919 --> 00:05:58,740
privy to and the third was creating a

00:05:55,620 --> 00:06:00,270
pipeline and this was partially just

00:05:58,740 --> 00:06:01,560
because of how the inside squad usually

00:06:00,270 --> 00:06:02,879
works we prefer to make things in

00:06:01,560 --> 00:06:04,770
pipelines because we want things to be

00:06:02,879 --> 00:06:07,919
repeatable you don't want anybody ever

00:06:04,770 --> 00:06:10,770
looking at stale data and we want things

00:06:07,919 --> 00:06:12,749
to be able to be spun up fairly quickly

00:06:10,770 --> 00:06:14,819
and reliably and to not have to do the

00:06:12,749 --> 00:06:16,979
kind of annoying translation works that

00:06:14,819 --> 00:06:18,479
come when you build your POC and Jupiter

00:06:16,979 --> 00:06:19,680
and then you have to translate it to

00:06:18,479 --> 00:06:22,919
something else just to get it to work

00:06:19,680 --> 00:06:25,319
again so those were our constraints and

00:06:22,919 --> 00:06:27,870
I'm gonna go into kind of how we

00:06:25,319 --> 00:06:29,490
addressed each of them the first one we

00:06:27,870 --> 00:06:31,499
started with was how we replicate the

00:06:29,490 --> 00:06:34,289
database and host it and kind of deal

00:06:31,499 --> 00:06:36,959
with that so it's helpful to understand

00:06:34,289 --> 00:06:38,550
how we managed our other data sources

00:06:36,959 --> 00:06:41,669
because we basically just slotted the

00:06:38,550 --> 00:06:43,979
database into our existing setup so the

00:06:41,669 --> 00:06:45,870
data insight squad uses a data lake with

00:06:43,979 --> 00:06:48,569
hive and presto to manage multiple data

00:06:45,870 --> 00:06:51,809
stores we manage these instances with

00:06:48,569 --> 00:06:54,490
helm charts and we host them on our own

00:06:51,809 --> 00:06:56,199
kubernetes cluster hoster and IBM cloud

00:06:54,490 --> 00:06:58,960
so the github enterprise database

00:06:56,199 --> 00:07:01,180
instance we decided would just be hosted

00:06:58,960 --> 00:07:03,810
on our kubernetes cluster and connected

00:07:01,180 --> 00:07:06,400
to the existing infrastructure and

00:07:03,810 --> 00:07:08,289
that's a little wordy so here's just a

00:07:06,400 --> 00:07:08,889
quick diagram that kind of makes it

00:07:08,289 --> 00:07:11,319
really clear

00:07:08,889 --> 00:07:13,270
presto sits above everything else over

00:07:11,319 --> 00:07:15,610
hive connects directly to the MySQL

00:07:13,270 --> 00:07:18,819
github enterprise database your views

00:07:15,610 --> 00:07:21,370
and hive is where we put the tool stuff

00:07:18,819 --> 00:07:23,259
like slack Safari all those 14 tools as

00:07:21,370 --> 00:07:26,259
well as the business information which

00:07:23,259 --> 00:07:28,389
is what blue pages is so we're able to

00:07:26,259 --> 00:07:30,820
pretty easily connect the github

00:07:28,389 --> 00:07:32,770
enterprise database to presto and use

00:07:30,820 --> 00:07:34,150
the existing presto structure to connect

00:07:32,770 --> 00:07:39,130
that information to anything else we

00:07:34,150 --> 00:07:41,650
want and then we moved on to

00:07:39,130 --> 00:07:45,039
sanitization so privacy was a big

00:07:41,650 --> 00:07:47,020
concern for us we talked with the SRA

00:07:45,039 --> 00:07:50,139
squad and other domain experts about

00:07:47,020 --> 00:07:52,120
where private repo content and SBI might

00:07:50,139 --> 00:07:54,729
be stored in the database schema I also

00:07:52,120 --> 00:07:57,610
looked through all of the like I think

00:07:54,729 --> 00:07:59,979
that it was 300 nearly 400 table schemas

00:07:57,610 --> 00:08:02,169
just to see what seemed like it could

00:07:59,979 --> 00:08:03,849
potentially be sensitive information we

00:08:02,169 --> 00:08:06,490
had a sit-down meeting where we figured

00:08:03,849 --> 00:08:08,650
out what exactly we wanted to censor and

00:08:06,490 --> 00:08:11,199
once we identified what we weren't

00:08:08,650 --> 00:08:13,750
allowed to look at we censored columns

00:08:11,199 --> 00:08:15,159
with zeros rather than removing them you

00:08:13,750 --> 00:08:17,259
never want to actually delete the

00:08:15,159 --> 00:08:19,840
information right so we decided the best

00:08:17,259 --> 00:08:22,090
thing was just to zero out any columns

00:08:19,840 --> 00:08:24,849
that we didn't want to surface and we

00:08:22,090 --> 00:08:26,770
managed all of that with switch which if

00:08:24,849 --> 00:08:29,500
you're not familiar it's just a tool a

00:08:26,770 --> 00:08:32,140
database management tool that allows you

00:08:29,500 --> 00:08:33,760
to have a deployment job which in our

00:08:32,140 --> 00:08:35,800
case was the sensor job

00:08:33,760 --> 00:08:39,070
the verification associated with that

00:08:35,800 --> 00:08:41,380
deployment and a revert job so we had an

00:08:39,070 --> 00:08:42,849
individual job for every act of

00:08:41,380 --> 00:08:45,670
censorship that we wanted to perform on

00:08:42,849 --> 00:08:47,320
the database we could verify each of

00:08:45,670 --> 00:08:49,750
those to make sure that the information

00:08:47,320 --> 00:08:51,520
was actually zeroed out and if it wasn't

00:08:49,750 --> 00:08:56,860
we could revert it try to figure out

00:08:51,520 --> 00:08:59,050
what went wrong and so all of that kind

00:08:56,860 --> 00:09:01,209
of went into building the pipeline and

00:08:59,050 --> 00:09:03,130
there's a diagram that goes into this a

00:09:01,209 --> 00:09:04,449
little bit better on the next slide but

00:09:03,130 --> 00:09:05,620
I'm just going to talk a little bit

00:09:04,449 --> 00:09:07,720
about

00:09:05,620 --> 00:09:10,210
big part of setting up our pipeline was

00:09:07,720 --> 00:09:13,570
negotiating with the SRA squad about how

00:09:10,210 --> 00:09:17,230
often we would receive the data so we

00:09:13,570 --> 00:09:19,990
settled on a monthly basis they receive

00:09:17,230 --> 00:09:22,480
daily backups of the github enterprise

00:09:19,990 --> 00:09:25,029
database instance and we asked them to

00:09:22,480 --> 00:09:29,020
basically on a monthly basis combine all

00:09:25,029 --> 00:09:32,020
of that and give us that huge file and

00:09:29,020 --> 00:09:34,300
we picked that because it was about as

00:09:32,020 --> 00:09:35,860
fine a glandular tea that you really

00:09:34,300 --> 00:09:38,860
want to get into with these kind of long

00:09:35,860 --> 00:09:40,330
longitudinal you know studies looking at

00:09:38,860 --> 00:09:41,770
how some they did on a week by week

00:09:40,330 --> 00:09:45,580
basis over the course of four years

00:09:41,770 --> 00:09:47,950
isn't really helpful and also because as

00:09:45,580 --> 00:09:50,170
I'm gonna explain the pipeline takes

00:09:47,950 --> 00:09:52,630
about 24 hours to restore all of that

00:09:50,170 --> 00:09:55,029
data because there's so much of it so a

00:09:52,630 --> 00:09:57,040
job that takes about 24 hours to perform

00:09:55,029 --> 00:09:58,720
we could handle that about once a month

00:09:57,040 --> 00:10:01,870
so it made the most sense for our

00:09:58,720 --> 00:10:04,480
initial use case and once we have that

00:10:01,870 --> 00:10:06,370
data we update the kubernetes AML file

00:10:04,480 --> 00:10:08,800
to point to the latest database backup

00:10:06,370 --> 00:10:10,870
in our object storage we run switch

00:10:08,800 --> 00:10:12,430
against the new database instance to

00:10:10,870 --> 00:10:14,830
ensure that it's sanitized and then it's

00:10:12,430 --> 00:10:16,959
basically ready so this is just kind of

00:10:14,830 --> 00:10:18,970
a step by step breakdown we get the

00:10:16,959 --> 00:10:21,339
monthly backup into our cloud object

00:10:18,970 --> 00:10:23,529
storage we manually delete the old

00:10:21,339 --> 00:10:25,330
database we update the yeah mol for the

00:10:23,529 --> 00:10:29,010
database configuration to point to the

00:10:25,330 --> 00:10:31,240
new database it spins up the deployment

00:10:29,010 --> 00:10:33,430
that's the part that takes about 24

00:10:31,240 --> 00:10:36,040
hours because it's dealing with all of

00:10:33,430 --> 00:10:37,870
this data and then once that's done we

00:10:36,040 --> 00:10:39,700
drop the old switch database create a

00:10:37,870 --> 00:10:41,500
new switch pod and if all of those

00:10:39,700 --> 00:10:45,600
sanitization jobs complete successfully

00:10:41,500 --> 00:10:50,230
then we declare it ready to be queried

00:10:45,600 --> 00:10:51,880
and query in the database like I said

00:10:50,230 --> 00:10:54,459
earlier since it's connected to our

00:10:51,880 --> 00:10:57,250
existing data lake we're able to just

00:10:54,459 --> 00:10:59,230
query it directly through presto access

00:10:57,250 --> 00:11:01,110
to the Presto instance is limited to the

00:10:59,230 --> 00:11:03,870
insight squad members so only people

00:11:01,110 --> 00:11:06,279
directly on my team are able to actually

00:11:03,870 --> 00:11:09,490
directly touch this instance of the

00:11:06,279 --> 00:11:12,070
database and we use chario as a data

00:11:09,490 --> 00:11:13,959
visualization tool and chario is

00:11:12,070 --> 00:11:16,120
basically just a dashboarding tool it

00:11:13,959 --> 00:11:18,910
allows you to connect to data stores

00:11:16,120 --> 00:11:21,460
like presto so we

00:11:18,910 --> 00:11:23,350
to secure SSH tunnel that we also hosted

00:11:21,460 --> 00:11:26,020
in our cluster you connect cheerio to

00:11:23,350 --> 00:11:28,000
that and you're able to just create a

00:11:26,020 --> 00:11:34,120
new dashboard and directly query the

00:11:28,000 --> 00:11:35,800
database instance so we had all of the

00:11:34,120 --> 00:11:37,840
technical stuff in place we were able to

00:11:35,800 --> 00:11:40,930
query the database and we had a vague

00:11:37,840 --> 00:11:43,360
idea of what we were trying to figure

00:11:40,930 --> 00:11:46,150
out but just what we wanted to analyze

00:11:43,360 --> 00:11:47,740
but now I want to go through how we

00:11:46,150 --> 00:11:49,140
broke down each of those three questions

00:11:47,740 --> 00:11:51,460
I mentioned earlier and what we actually

00:11:49,140 --> 00:11:53,920
materially looked at in the database to

00:11:51,460 --> 00:11:55,300
come to those conclusions so the first

00:11:53,920 --> 00:11:58,150
one that we looked at was how do we

00:11:55,300 --> 00:11:59,740
analyze these coding behaviors because

00:11:58,150 --> 00:12:01,750
again we wanted to see if github had

00:11:59,740 --> 00:12:04,270
fulfilled its original use case had it

00:12:01,750 --> 00:12:06,220
increased the social behaviors that we

00:12:04,270 --> 00:12:08,260
were expecting it to you so we talked to

00:12:06,220 --> 00:12:10,690
our service quad and some other people

00:12:08,260 --> 00:12:12,010
with domain knowledge to figure out what

00:12:10,690 --> 00:12:14,380
would help track the behaviors which we

00:12:12,010 --> 00:12:15,880
were interested in we also wanted to

00:12:14,380 --> 00:12:17,560
look at the number of private versus

00:12:15,880 --> 00:12:19,270
public repos because we considered that

00:12:17,560 --> 00:12:21,970
to be a fairly good measurement of if

00:12:19,270 --> 00:12:25,540
people were engaging in social coding

00:12:21,970 --> 00:12:27,910
and kind of breaking down silos so we

00:12:25,540 --> 00:12:30,880
were aware pretty early on because we

00:12:27,910 --> 00:12:33,130
were talking to users as well as the SRA

00:12:30,880 --> 00:12:34,660
squad and the higher-ups that there

00:12:33,130 --> 00:12:38,890
would be a gradient in how people were

00:12:34,660 --> 00:12:41,050
engaging with github and our own model

00:12:38,890 --> 00:12:45,250
of engagement looked something like this

00:12:41,050 --> 00:12:46,720
kind of four tier I don't want to say

00:12:45,250 --> 00:12:48,040
shallow because that that's kind of

00:12:46,720 --> 00:12:49,870
passing judgment but just different

00:12:48,040 --> 00:12:52,210
levels of engagement the first being

00:12:49,870 --> 00:12:53,680
people who are just opening are

00:12:52,210 --> 00:12:55,330
commenting on issues and we knew that

00:12:53,680 --> 00:12:57,130
those users existed because we talked to

00:12:55,330 --> 00:12:58,930
people in sales and other kind of

00:12:57,130 --> 00:13:01,180
non-technical roles who just really

00:12:58,930 --> 00:13:03,100
liked using github for issue tracking so

00:13:01,180 --> 00:13:06,310
that's one level of engagement and the

00:13:03,100 --> 00:13:09,190
second is people who push code the third

00:13:06,310 --> 00:13:11,860
are people who open PRS and the fourth

00:13:09,190 --> 00:13:15,220
or people who were viewing PRS so we

00:13:11,860 --> 00:13:18,130
kind of imagined this tiered approach to

00:13:15,220 --> 00:13:19,540
you know a shallow involvement with just

00:13:18,130 --> 00:13:22,420
using kind of the tools for issue

00:13:19,540 --> 00:13:24,970
tracking engaging in coding behaviors

00:13:22,420 --> 00:13:26,710
engaging in coding behavior subject to

00:13:24,970 --> 00:13:30,120
peer review and then actually providing

00:13:26,710 --> 00:13:30,120
the valuable service a peer review

00:13:30,710 --> 00:13:37,040
and the database has tables that

00:13:34,910 --> 00:13:39,790
correlate to all of those pretty

00:13:37,040 --> 00:13:42,350
directly so there's a table dealing with

00:13:39,790 --> 00:13:44,240
when people are reviewing PR is opening

00:13:42,350 --> 00:13:46,339
PR is pushing code so it's fairly easy

00:13:44,240 --> 00:13:47,870
to just break that down by when those

00:13:46,339 --> 00:13:49,550
behaviors occurred connect them to

00:13:47,870 --> 00:13:53,089
unique identifiers and get the aggregate

00:13:49,550 --> 00:13:54,470
count just how we approached it and the

00:13:53,089 --> 00:13:58,760
second question was how do we connect

00:13:54,470 --> 00:14:00,140
this to business info so we decided to

00:13:58,760 --> 00:14:02,930
break down the results of some of our

00:14:00,140 --> 00:14:05,810
queries across business units and that's

00:14:02,930 --> 00:14:07,399
an internal IBM term there's about ten

00:14:05,810 --> 00:14:09,920
of them in the company they range in

00:14:07,399 --> 00:14:12,649
size from 10,000 employees to around a

00:14:09,920 --> 00:14:14,720
hundred thousand and we picked business

00:14:12,649 --> 00:14:17,390
units because one they were of interest

00:14:14,720 --> 00:14:19,339
or stakeholders VPS are usually pretty

00:14:17,390 --> 00:14:21,440
interested in how their huge group is

00:14:19,339 --> 00:14:23,990
doing that's kind of the level that they

00:14:21,440 --> 00:14:25,580
you know tend to look at things but also

00:14:23,990 --> 00:14:27,890
because it was high enough in the

00:14:25,580 --> 00:14:30,649
employee chain that reverse engineering

00:14:27,890 --> 00:14:31,700
any sort of personal information would

00:14:30,649 --> 00:14:33,410
be completely impossible

00:14:31,700 --> 00:14:35,060
we wanted to eliminate the scenario

00:14:33,410 --> 00:14:36,830
where you're able to search by manager

00:14:35,060 --> 00:14:38,690
and you stumble across a three-person

00:14:36,830 --> 00:14:40,400
team and suddenly you're able to figure

00:14:38,690 --> 00:14:42,470
out how your neighbors performing or

00:14:40,400 --> 00:14:44,540
your boss is able to you know criticize

00:14:42,470 --> 00:14:46,550
why haven't you contributed to our

00:14:44,540 --> 00:14:48,440
commit numbers recently we wanted to

00:14:46,550 --> 00:14:49,910
avoid that entirely and there's really

00:14:48,440 --> 00:14:51,680
no way that somebody's going to pick you

00:14:49,910 --> 00:14:53,660
out of a crowd of you know ten thousand

00:14:51,680 --> 00:14:57,770
to a hundred thousand so that was the

00:14:53,660 --> 00:14:58,820
safe bet and we went with that and the

00:14:57,770 --> 00:15:02,000
third question was what does

00:14:58,820 --> 00:15:03,529
organizational hygiene look like so

00:15:02,000 --> 00:15:05,180
first we had to identify which

00:15:03,529 --> 00:15:07,400
structures were available to people in

00:15:05,180 --> 00:15:09,350
github how can people self organize and

00:15:07,400 --> 00:15:11,870
there's basically only three there's

00:15:09,350 --> 00:15:13,730
repositories teams and organizations and

00:15:11,870 --> 00:15:16,579
those are the structures that you can

00:15:13,730 --> 00:15:18,050
create on your own and manage and this

00:15:16,579 --> 00:15:19,520
one actually was kind of the most

00:15:18,050 --> 00:15:20,420
interesting thing to debate because it

00:15:19,520 --> 00:15:24,470
raised a lot of really interesting

00:15:20,420 --> 00:15:26,360
questions about what what is something

00:15:24,470 --> 00:15:28,670
that's unnecessary especially in this

00:15:26,360 --> 00:15:30,440
kind of enterprise space is it a repo

00:15:28,670 --> 00:15:34,490
that hasn't been touched in six months

00:15:30,440 --> 00:15:36,890
is it a year is it an org that's kind of

00:15:34,490 --> 00:15:40,220
just a duplicate of a team you know what

00:15:36,890 --> 00:15:42,350
is unnecessary and we basically decided

00:15:40,220 --> 00:15:43,459
to just go with the strictest possible

00:15:42,350 --> 00:15:45,910
definition

00:15:43,459 --> 00:15:48,439
so after some discussion we decided that

00:15:45,910 --> 00:15:50,809
the only way something was unnecessary

00:15:48,439 --> 00:15:55,579
it was if it had been abandoned and

00:15:50,809 --> 00:15:57,230
things were abandoned if they had if

00:15:55,579 --> 00:15:59,509
they were comprised only of people who

00:15:57,230 --> 00:16:02,029
no longer worked at IBM so if you made a

00:15:59,509 --> 00:16:03,649
team and then everybody left the company

00:16:02,029 --> 00:16:06,079
but you forgot to delete the team on

00:16:03,649 --> 00:16:07,790
your way out or an org or a repo that

00:16:06,079 --> 00:16:09,800
was an abandoned structure and it was

00:16:07,790 --> 00:16:12,350
something that was unnecessary and it's

00:16:09,800 --> 00:16:14,209
a pretty strict definition I think

00:16:12,350 --> 00:16:16,519
there's room to explore this a little

00:16:14,209 --> 00:16:19,990
more in further iterations but that was

00:16:16,519 --> 00:16:22,819
what we went with for the initial report

00:16:19,990 --> 00:16:24,110
so before I get into kind of the charts

00:16:22,819 --> 00:16:25,550
that we actually produced about it I

00:16:24,110 --> 00:16:28,309
want to go over the results broadly

00:16:25,550 --> 00:16:29,629
because I think that that's I think that

00:16:28,309 --> 00:16:31,730
that's more helpful than just kind of

00:16:29,629 --> 00:16:34,910
pointing out some charts and talking

00:16:31,730 --> 00:16:36,649
about them so the first question that we

00:16:34,910 --> 00:16:39,319
looked at was how have practices around

00:16:36,649 --> 00:16:41,269
coding changed over time and we found a

00:16:39,319 --> 00:16:43,490
steady increase in the numbers of users

00:16:41,269 --> 00:16:47,269
pushing code engaging in collaborative

00:16:43,490 --> 00:16:49,100
behavior over the years we also saw a

00:16:47,269 --> 00:16:51,619
similar number of private versus public

00:16:49,100 --> 00:16:53,119
repos and I'll get into that a little

00:16:51,619 --> 00:16:55,939
bit later because it's one of our kind

00:16:53,119 --> 00:16:57,829
of follow up actions and how are

00:16:55,939 --> 00:17:00,589
behaviors around coding distributed

00:16:57,829 --> 00:17:03,860
across IBM they we saw a really wide

00:17:00,589 --> 00:17:06,260
variation we were able to connect them

00:17:03,860 --> 00:17:09,260
in kind of expected ways so sales teams

00:17:06,260 --> 00:17:11,809
had fairly low percentages of people

00:17:09,260 --> 00:17:15,140
reviewing code which is what you would

00:17:11,809 --> 00:17:16,789
usually expect and then the last one was

00:17:15,140 --> 00:17:18,169
as IBM errs of self-organized

00:17:16,789 --> 00:17:20,929
is there a need for garbage collection

00:17:18,169 --> 00:17:22,839
and we did find abandoned structures so

00:17:20,929 --> 00:17:25,069
there was a need for garbage collection

00:17:22,839 --> 00:17:26,809
but we didn't see as many as we had

00:17:25,069 --> 00:17:29,330
feared especially with a really large

00:17:26,809 --> 00:17:30,860
company we were a little bit afraid that

00:17:29,330 --> 00:17:32,690
once we got in there we would see that

00:17:30,860 --> 00:17:34,549
there were a lot of abandoned teams or

00:17:32,690 --> 00:17:36,230
orgs or repos and the numbers were

00:17:34,549 --> 00:17:40,159
actually pretty low so we were happy

00:17:36,230 --> 00:17:41,690
with that and I've broken up some of the

00:17:40,159 --> 00:17:45,950
charts that I want to look at just by

00:17:41,690 --> 00:17:48,049
the questions so again how if practices

00:17:45,950 --> 00:17:50,149
around coding changed over time and so

00:17:48,049 --> 00:17:53,090
you can see that the pusher count is

00:17:50,149 --> 00:17:56,389
climbing steadily and significantly to

00:17:53,090 --> 00:17:57,260
around 42,000 and at the same time you

00:17:56,389 --> 00:17:59,270
see the

00:17:57,260 --> 00:18:03,320
centage of users who are pushing code

00:17:59,270 --> 00:18:05,000
dropping so the percentage is the the

00:18:03,320 --> 00:18:07,940
overall percentage of users of get FN

00:18:05,000 --> 00:18:10,100
price who have ever pushed code or the

00:18:07,940 --> 00:18:14,180
count of users in the github enterprise

00:18:10,100 --> 00:18:15,650
system who have ever pushed code and for

00:18:14,180 --> 00:18:18,590
us when we saw this we immediately

00:18:15,650 --> 00:18:20,210
connected it to that first tier of the

00:18:18,590 --> 00:18:21,950
user engagement that we identified

00:18:20,210 --> 00:18:23,870
earlier so if you look at the beginning

00:18:21,950 --> 00:18:26,000
you know in 2015

00:18:23,870 --> 00:18:28,400
oh - I think we only had three people

00:18:26,000 --> 00:18:30,290
using github and of course those three

00:18:28,400 --> 00:18:31,580
people are early adopters they're the

00:18:30,290 --> 00:18:33,440
first people to get on the system

00:18:31,580 --> 00:18:35,600
they're going to be developers who are

00:18:33,440 --> 00:18:38,150
really interested in using github for it

00:18:35,600 --> 00:18:41,330
development use case but as time goes on

00:18:38,150 --> 00:18:43,400
we see more people adopt github for

00:18:41,330 --> 00:18:45,350
issue tracking only and that's why we

00:18:43,400 --> 00:18:47,510
see the increase in the count and the

00:18:45,350 --> 00:18:54,500
simultaneous decrease in the overall

00:18:47,510 --> 00:18:56,960
percentage and this is a graph of the

00:18:54,500 --> 00:18:59,930
count of public and private repositories

00:18:56,960 --> 00:19:02,540
so a little bit of explanation basically

00:18:59,930 --> 00:19:06,740
at any month and year on this graph it's

00:19:02,540 --> 00:19:08,270
looking at the of the repos created in

00:19:06,740 --> 00:19:09,680
that month and year what is the count of

00:19:08,270 --> 00:19:13,130
public what is the count of private

00:19:09,680 --> 00:19:16,640
public being green private being red so

00:19:13,130 --> 00:19:19,670
at the end we have about two hundred and

00:19:16,640 --> 00:19:21,530
sixty one thousand public two hundred

00:19:19,670 --> 00:19:23,510
thousand private so the number was

00:19:21,530 --> 00:19:25,910
closer together than we would have liked

00:19:23,510 --> 00:19:28,370
and this has actually been the subject

00:19:25,910 --> 00:19:30,530
of my team's kind of focused before a

00:19:28,370 --> 00:19:32,270
couple of years ago a colleague Jeff

00:19:30,530 --> 00:19:35,780
Checotah gave a talk at github universe

00:19:32,270 --> 00:19:38,060
about his efforts to increase the number

00:19:35,780 --> 00:19:41,150
of public repos versus private repos in

00:19:38,060 --> 00:19:42,800
ibm's instance and this is something

00:19:41,150 --> 00:19:47,150
that we're kind of going to continue to

00:19:42,800 --> 00:19:50,000
address in the follow-up and this again

00:19:47,150 --> 00:19:52,310
is just similar to the pushing this is

00:19:50,000 --> 00:19:54,650
showing the overall count versus the

00:19:52,310 --> 00:19:57,160
percentage of people who are reviewing

00:19:54,650 --> 00:20:00,260
code and people who are pulling or

00:19:57,160 --> 00:20:01,970
creating pull requests and this further

00:20:00,260 --> 00:20:05,560
validated our kind of four tier model

00:20:01,970 --> 00:20:08,320
because we saw that there were around

00:20:05,560 --> 00:20:09,970
um 26,000 people who were opening pool

00:20:08,320 --> 00:20:12,520
requests so less than people who were

00:20:09,970 --> 00:20:14,530
pushing code and even less people who

00:20:12,520 --> 00:20:18,040
were actually reviewing code only around

00:20:14,530 --> 00:20:19,660
19,000 and that's you know that's kind

00:20:18,040 --> 00:20:20,980
of to be expected there are always less

00:20:19,660 --> 00:20:22,510
people reviewing code than you want

00:20:20,980 --> 00:20:25,210
there's always people more willing to

00:20:22,510 --> 00:20:27,340
open PRS and review but it was

00:20:25,210 --> 00:20:29,350
interesting to see the same overall

00:20:27,340 --> 00:20:33,130
trend of the count continuing to grow

00:20:29,350 --> 00:20:38,620
while the percentage of overall users

00:20:33,130 --> 00:20:41,140
shrinks slightly and the second question

00:20:38,620 --> 00:20:42,340
was how do we look at these when we look

00:20:41,140 --> 00:20:45,430
at these distributed across business

00:20:42,340 --> 00:20:48,400
units how do they look so at the request

00:20:45,430 --> 00:20:50,650
of my boss I have censored the names but

00:20:48,400 --> 00:20:53,350
you can see that there's a pretty wide

00:20:50,650 --> 00:20:59,140
variation in how these behaviors are

00:20:53,350 --> 00:21:02,080
distributed same for again the pull

00:20:59,140 --> 00:21:07,090
requests versus performing review even

00:21:02,080 --> 00:21:09,790
among like similar business units you'll

00:21:07,090 --> 00:21:12,880
see that you know maybe there's for some

00:21:09,790 --> 00:21:15,220
reason the bottom one second from the

00:21:12,880 --> 00:21:17,320
right has a lot of people opening pull

00:21:15,220 --> 00:21:18,760
requests but an extremely low and out of

00:21:17,320 --> 00:21:21,670
people reviewing pull requests so that

00:21:18,760 --> 00:21:26,890
one this behavior was pretty interesting

00:21:21,670 --> 00:21:28,840
to us and as IBM herself organized is

00:21:26,890 --> 00:21:30,460
there a need for garbage collection so

00:21:28,840 --> 00:21:32,410
the first thing we made was a heat map

00:21:30,460 --> 00:21:34,540
that was just shot oh sorry I shouldn't

00:21:32,410 --> 00:21:38,650
touch that we made a heat map that was

00:21:34,540 --> 00:21:41,410
showing the number and the count of

00:21:38,650 --> 00:21:44,260
abandoned structures and each of those

00:21:41,410 --> 00:21:46,480
rows again I guess each of those columns

00:21:44,260 --> 00:21:48,730
corresponds to a business unit whose

00:21:46,480 --> 00:21:50,920
name I've chopped off at the bottom but

00:21:48,730 --> 00:21:53,500
you can see there were kind of clusters

00:21:50,920 --> 00:21:55,950
of organizations that were abandoned

00:21:53,500 --> 00:21:57,970
versus repositories versus teams and

00:21:55,950 --> 00:21:59,350
actually we found that the most likely

00:21:57,970 --> 00:22:01,360
thing to be abandoned was an

00:21:59,350 --> 00:22:05,950
organization repositories were pretty

00:22:01,360 --> 00:22:07,990
rarely abandoned and teams were kind of

00:22:05,950 --> 00:22:09,480
middling you know somewhat often

00:22:07,990 --> 00:22:12,490
abandoned but not as much as

00:22:09,480 --> 00:22:14,110
organizations and when we looked at the

00:22:12,490 --> 00:22:15,730
actual accounts we were pretty pretty

00:22:14,110 --> 00:22:18,400
happy because each of these lines

00:22:15,730 --> 00:22:18,909
represents a business unit and at the

00:22:18,400 --> 00:22:21,580
maximum

00:22:18,909 --> 00:22:22,989
we saw 56 abandoned teams which in a

00:22:21,580 --> 00:22:26,009
group of you know up to a hundred

00:22:22,989 --> 00:22:28,840
thousand employees is pretty decent and

00:22:26,009 --> 00:22:30,729
same for repos we only saw at max 17

00:22:28,840 --> 00:22:32,289
abandoned repos so people were doing a

00:22:30,729 --> 00:22:33,909
pretty good job of cleaning up after the

00:22:32,289 --> 00:22:38,349
repos and shutting them down when they

00:22:33,909 --> 00:22:40,599
were no longer necessary so the

00:22:38,349 --> 00:22:42,970
implications of these findings like what

00:22:40,599 --> 00:22:45,909
do we what do we do with this what do we

00:22:42,970 --> 00:22:47,200
take away from it and we saw it pretty

00:22:45,909 --> 00:22:49,809
clearly we have a fairly high percentage

00:22:47,200 --> 00:22:52,059
of users at IBM who use github

00:22:49,809 --> 00:22:55,149
enterprise without pushing code or

00:22:52,059 --> 00:22:57,190
engaging in those collaborative coding

00:22:55,149 --> 00:22:59,169
practices that we were trying to measure

00:22:57,190 --> 00:23:02,529
in the first place so who are these

00:22:59,169 --> 00:23:04,960
people from talking to some users we had

00:23:02,529 --> 00:23:07,840
a pretty fair idea that they were mostly

00:23:04,960 --> 00:23:09,460
salespeople or managers who were you

00:23:07,840 --> 00:23:11,229
know in touch with technical teams and

00:23:09,460 --> 00:23:13,450
wanted to stay on top of what people

00:23:11,229 --> 00:23:16,929
were doing but weren't actually engaging

00:23:13,450 --> 00:23:19,509
in code but we didn't do a really

00:23:16,929 --> 00:23:21,129
in-depth analysis of that user

00:23:19,509 --> 00:23:23,559
population for this report our initial

00:23:21,129 --> 00:23:27,039
focus was more how has the use case of

00:23:23,559 --> 00:23:29,289
github been carried out so we saw pretty

00:23:27,039 --> 00:23:31,509
clearly that we needed to do further

00:23:29,289 --> 00:23:33,249
analysis on this population and figure

00:23:31,509 --> 00:23:35,470
out you know what were they contributing

00:23:33,249 --> 00:23:37,869
to the github ecosystem at IBM how is

00:23:35,470 --> 00:23:40,389
their use affecting how other people

00:23:37,869 --> 00:23:45,009
were using it just you know what are

00:23:40,389 --> 00:23:46,119
they doing in the community basically we

00:23:45,009 --> 00:23:47,409
saw that there was garbage to be

00:23:46,119 --> 00:23:49,330
collected so we have to figure out how

00:23:47,409 --> 00:23:53,379
to go about doing that

00:23:49,330 --> 00:23:55,210
it's tricky to contact somebody to clean

00:23:53,379 --> 00:23:57,820
up an org when everybody in that org has

00:23:55,210 --> 00:24:02,080
no longer works for your company so we

00:23:57,820 --> 00:24:02,889
need to figure out a solution for maybe

00:24:02,080 --> 00:24:05,229
preemptively

00:24:02,889 --> 00:24:08,919
recognizing that something is at risk of

00:24:05,229 --> 00:24:10,450
being deprecated or taking authority

00:24:08,919 --> 00:24:12,190
over something where everybody is gone

00:24:10,450 --> 00:24:15,429
from the company that's a question that

00:24:12,190 --> 00:24:17,109
we still have to address and the number

00:24:15,429 --> 00:24:19,090
of public and private repos is near even

00:24:17,109 --> 00:24:21,309
is there anything we can do to encourage

00:24:19,090 --> 00:24:23,529
more public repos like I mentioned

00:24:21,309 --> 00:24:25,059
earlier we had a colleague who attempted

00:24:23,529 --> 00:24:28,269
to do something like this kind of early

00:24:25,059 --> 00:24:32,100
on in github at IBM and his solution

00:24:28,269 --> 00:24:33,780
involved putting a hook on every repo

00:24:32,100 --> 00:24:35,490
opening up an issue and the private ones

00:24:33,780 --> 00:24:36,929
kind of politely asking are you sure

00:24:35,490 --> 00:24:39,510
that this needs to be private could you

00:24:36,929 --> 00:24:41,520
please make it public and that quickly

00:24:39,510 --> 00:24:44,190
became unfeasible due to the scale of

00:24:41,520 --> 00:24:47,100
what we were dealing with so we haven't

00:24:44,190 --> 00:24:49,740
attempted anything similar to that since

00:24:47,100 --> 00:24:51,870
then and this kind of seen how post the

00:24:49,740 --> 00:24:54,169
numbers were kind of made us think that

00:24:51,870 --> 00:24:56,549
we need to address this moving forward

00:24:54,169 --> 00:25:00,870
whether through communication or some

00:24:56,549 --> 00:25:03,240
other method and so we came away with a

00:25:00,870 --> 00:25:05,100
couple next steps further automation of

00:25:03,240 --> 00:25:06,990
the pipeline using air flow we've

00:25:05,100 --> 00:25:09,659
recently used air flow on our team to

00:25:06,990 --> 00:25:11,370
complete Ulta schedule a couple of

00:25:09,659 --> 00:25:12,809
things for some other repeatable

00:25:11,370 --> 00:25:15,090
processes that we had to do and we found

00:25:12,809 --> 00:25:16,770
it helpful we also want to reduce the

00:25:15,090 --> 00:25:19,679
latency obviously like I said it takes

00:25:16,770 --> 00:25:21,360
about 24 hours to spin up a fully

00:25:19,679 --> 00:25:23,549
functional instance of the database and

00:25:21,360 --> 00:25:25,710
start querying it so we would love to

00:25:23,549 --> 00:25:27,690
get that time down slightly we want to

00:25:25,710 --> 00:25:29,909
keep promoting the work with n IBM as a

00:25:27,690 --> 00:25:32,340
resource for people to use to keep

00:25:29,909 --> 00:25:34,799
abreast of trends within github so I

00:25:32,340 --> 00:25:36,240
didn't show you you know the whole the

00:25:34,799 --> 00:25:38,880
whole report exists basically is this

00:25:36,240 --> 00:25:41,789
big chart IO dashboard with a bunch of a

00:25:38,880 --> 00:25:43,650
bunch of charts and the full report is

00:25:41,789 --> 00:25:45,440
available to anybody who works at IBM

00:25:43,650 --> 00:25:47,730
because it's all information that

00:25:45,440 --> 00:25:50,960
they're able to look at so they can see

00:25:47,730 --> 00:25:53,520
how their bu is doing how trends

00:25:50,960 --> 00:25:55,289
increase or decrease over time so we

00:25:53,520 --> 00:25:56,700
want to continue to promote that and

00:25:55,289 --> 00:25:59,340
encourage people to look at it and kind

00:25:56,700 --> 00:26:01,980
of get a feel for their place and a

00:25:59,340 --> 00:26:03,120
larger github community we also want to

00:26:01,980 --> 00:26:05,549
continue the conversation with

00:26:03,120 --> 00:26:07,380
stakeholders and domain experts about

00:26:05,549 --> 00:26:10,260
how to get the information from the

00:26:07,380 --> 00:26:11,850
github database the database is a really

00:26:10,260 --> 00:26:13,789
really rich source of information I

00:26:11,850 --> 00:26:16,020
didn't go into it too much but they have

00:26:13,789 --> 00:26:19,350
tables that would allow us to figure out

00:26:16,020 --> 00:26:21,600
the mean closing time for an issue like

00:26:19,350 --> 00:26:22,980
clustering patterns around comments and

00:26:21,600 --> 00:26:25,350
that's something that we want to look at

00:26:22,980 --> 00:26:27,600
in the next version of this report is

00:26:25,350 --> 00:26:29,340
okay you open a pull request what's the

00:26:27,600 --> 00:26:31,260
actual mean time for a pull request to

00:26:29,340 --> 00:26:33,120
get closed in IBM do we see how that

00:26:31,260 --> 00:26:35,820
changes over time does that tell us

00:26:33,120 --> 00:26:39,179
anything there's a lot that we can still

00:26:35,820 --> 00:26:40,890
pull out from that data store and we

00:26:39,179 --> 00:26:44,610
want to do similar in-depth studies on

00:26:40,890 --> 00:26:44,909
other tools that we manage so the the

00:26:44,610 --> 00:26:46,830
type

00:26:44,909 --> 00:26:48,690
of analysis that we can do on tools is

00:26:46,830 --> 00:26:51,779
limited by the data that we receive and

00:26:48,690 --> 00:26:54,359
luckily for us the github database has a

00:26:51,779 --> 00:26:57,210
wealth of information but this is really

00:26:54,359 --> 00:26:59,220
the only type of report like this that

00:26:57,210 --> 00:27:00,989
we've been able to do we want to expand

00:26:59,220 --> 00:27:04,379
it to some of the other tools we cover

00:27:00,989 --> 00:27:07,499
like slack or pager duty

00:27:04,379 --> 00:27:10,739
you know Safari books we want to keep

00:27:07,499 --> 00:27:13,259
doing kind of this really in-depth user

00:27:10,739 --> 00:27:19,559
studies on all of the other tools that

00:27:13,259 --> 00:27:21,679
we handle and that was it that was all I

00:27:19,559 --> 00:27:21,679
had

00:27:21,890 --> 00:27:53,449
[Applause]

00:27:22,890 --> 00:27:53,449

YouTube URL: https://www.youtube.com/watch?v=4wbxxzDp98c


