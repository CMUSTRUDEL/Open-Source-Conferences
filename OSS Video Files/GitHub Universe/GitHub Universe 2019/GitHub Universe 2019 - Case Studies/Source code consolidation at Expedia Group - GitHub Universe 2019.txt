Title: Source code consolidation at Expedia Group - GitHub Universe 2019
Publication date: 2019-12-14
Playlist: GitHub Universe 2019 - Case Studies
Description: 
	Presented by Jeff Josephson, Senior Systems Engineer, Expedia Group

In 2018, Expedia Group started a project to consolidate all their source code into a single instance of GitHub Enterprise. The team wanted to drive more collaborative development and improve developer efficiency. In this talk, you'll learn about the background of the project, goals, and objectives for success, the design and architecture of the new instance, migration methods used and how they were automated, and details on the challenges faced and how they were resolved.

About GitHub Universe:
GitHub Universe is a two-day conference dedicated to the creativity and curiosity of the largest software community in the world. Sessions cover topics from team culture to open source software across industries and technologies.

For more information on GitHub Universe, check the website:
https://githubuniverse.com
Captions: 
	00:00:00,680 --> 00:00:21,880
[Music]

00:00:18,670 --> 00:00:23,560
all right hello everyone welcome to the

00:00:21,880 --> 00:00:26,410
last group of sessions here at Universe

00:00:23,560 --> 00:00:28,390
2019 thanks for sticking with me my name

00:00:26,410 --> 00:00:30,669
is Jeff Josephson I'm a senior system

00:00:28,390 --> 00:00:32,230
engineer at Expedia group and I'm going

00:00:30,669 --> 00:00:34,300
to be talking to you today about Expedia

00:00:32,230 --> 00:00:36,309
group's ongoing project to consolidate

00:00:34,300 --> 00:00:37,839
all of our source code into a single

00:00:36,309 --> 00:00:39,460
instance of github and how we're using

00:00:37,839 --> 00:00:40,780
that to allow our developers to be more

00:00:39,460 --> 00:00:42,699
efficient and better collaborate with

00:00:40,780 --> 00:00:44,409
each other so first a little bit about

00:00:42,699 --> 00:00:46,780
me I've been a speedy group for about

00:00:44,409 --> 00:00:48,579
five years I'm a member of the developer

00:00:46,780 --> 00:00:50,680
collaboration team and I primarily work

00:00:48,579 --> 00:00:52,750
on cloud design and architecture for our

00:00:50,680 --> 00:00:54,699
developer tools that includes all new

00:00:52,750 --> 00:00:56,410
Greenfield deployments as well as legacy

00:00:54,699 --> 00:00:58,570
tool migrations out of our data center

00:00:56,410 --> 00:00:59,769
and into the cloud when I'm not work you

00:00:58,570 --> 00:01:02,949
probably find me right in my mountain

00:00:59,769 --> 00:01:03,969
bike or playing soccer so the start was

00:01:02,949 --> 00:01:05,320
a little background how do we get

00:01:03,969 --> 00:01:07,840
started on our consolidation project

00:01:05,320 --> 00:01:09,880
well if we go back in time about three

00:01:07,840 --> 00:01:11,530
years ago we can see that Expedia group

00:01:09,880 --> 00:01:13,420
has been growing organically for a long

00:01:11,530 --> 00:01:15,100
time we've added a lot of brands to the

00:01:13,420 --> 00:01:16,330
group and in general each of those

00:01:15,100 --> 00:01:19,090
brands has brought with them their own

00:01:16,330 --> 00:01:20,860
source code instance that's been great

00:01:19,090 --> 00:01:22,390
it's let our developers be very agile

00:01:20,860 --> 00:01:23,530
they sort of have their own place

00:01:22,390 --> 00:01:25,090
through their work they can work quickly

00:01:23,530 --> 00:01:26,860
you do what they need to do but they're

00:01:25,090 --> 00:01:28,390
also very siloed they're generally

00:01:26,860 --> 00:01:29,950
working by themselves in their own place

00:01:28,390 --> 00:01:31,299
they're not easily able to share code

00:01:29,950 --> 00:01:32,880
they may not even know about all the

00:01:31,299 --> 00:01:35,110
other instances that exist out there

00:01:32,880 --> 00:01:36,700
that also leads to decentralized

00:01:35,110 --> 00:01:38,049
administration different teams run all

00:01:36,700 --> 00:01:39,640
these instances if you want to get

00:01:38,049 --> 00:01:40,930
access to one or permissions or learn

00:01:39,640 --> 00:01:42,220
something more about it you have to

00:01:40,930 --> 00:01:44,770
figure out what team to talk to you not

00:01:42,220 --> 00:01:46,689
even know all these instances were also

00:01:44,770 --> 00:01:48,130
deployed in our on-premise data center

00:01:46,689 --> 00:01:50,380
so that gave them limited connectivity

00:01:48,130 --> 00:01:52,360
to things like the cloud or external

00:01:50,380 --> 00:01:54,369
integrations and we even had some

00:01:52,360 --> 00:01:55,960
systems have had an inconsistent user

00:01:54,369 --> 00:01:57,219
base where the user directory for one

00:01:55,960 --> 00:01:58,630
system might not match the user

00:01:57,219 --> 00:01:59,740
directory in another which just makes

00:01:58,630 --> 00:02:02,619
things like permissions even more

00:01:59,740 --> 00:02:04,000
difficult so why do we decide to

00:02:02,619 --> 00:02:05,469
consolidate well for starters we want a

00:02:04,000 --> 00:02:07,270
single source of truth we want all of

00:02:05,469 --> 00:02:08,259
our code in one place we want our

00:02:07,270 --> 00:02:09,820
developers know that if you're looking

00:02:08,259 --> 00:02:11,739
for code you only have to go to one

00:02:09,820 --> 00:02:12,940
place to find it we also want to give

00:02:11,739 --> 00:02:14,980
our developers a unified development

00:02:12,940 --> 00:02:16,989
experience across all these other

00:02:14,980 --> 00:02:18,340
systems if you change teams or orgs you

00:02:16,989 --> 00:02:19,930
might have to completely relearn how to

00:02:18,340 --> 00:02:21,579
just commit code in the source control

00:02:19,930 --> 00:02:22,930
we all know developers be able to do

00:02:21,579 --> 00:02:25,239
things the same way no matter where they

00:02:22,930 --> 00:02:26,950
are in the company we also want to be

00:02:25,239 --> 00:02:28,090
able to enable embrace a collaborative

00:02:26,950 --> 00:02:29,200
development practices we're on our

00:02:28,090 --> 00:02:31,120
developers to be able to work together

00:02:29,200 --> 00:02:32,560
with each other to find other teams code

00:02:31,120 --> 00:02:34,330
to contribute to it too

00:02:32,560 --> 00:02:35,440
use it themselves we want them to be

00:02:34,330 --> 00:02:37,150
able to easily find that and take

00:02:35,440 --> 00:02:39,130
advantage of it and that's true for both

00:02:37,150 --> 00:02:40,510
inter sourcing and open sourcing we want

00:02:39,130 --> 00:02:41,739
our developers to be able to both work

00:02:40,510 --> 00:02:43,569
with each other and contribute to each

00:02:41,739 --> 00:02:44,739
other inside the company and also be

00:02:43,569 --> 00:02:47,260
able to be part of the greater community

00:02:44,739 --> 00:02:48,819
at large and finally we want to reduce

00:02:47,260 --> 00:02:49,690
some costs we've got a lot of

00:02:48,819 --> 00:02:51,370
infrastructure rolling these two

00:02:49,690 --> 00:02:52,720
different systems we got a license all

00:02:51,370 --> 00:02:54,310
of them we got it have different teams

00:02:52,720 --> 00:02:55,630
administering them and we have to train

00:02:54,310 --> 00:02:58,120
users to use them when they move around

00:02:55,630 --> 00:03:01,300
inside the company or there's a reorg or

00:02:58,120 --> 00:03:02,319
something like that so that sounds great

00:03:01,300 --> 00:03:04,239
we get a lot of benefits out of

00:03:02,319 --> 00:03:05,440
consolidating but we had some sources of

00:03:04,239 --> 00:03:07,450
resistance when he tried to start this

00:03:05,440 --> 00:03:09,280
project so for starters there's just

00:03:07,450 --> 00:03:10,989
plain organizational inertia to a lot of

00:03:09,280 --> 00:03:13,269
developers the current systems work just

00:03:10,989 --> 00:03:14,620
fine you check out your code you make

00:03:13,269 --> 00:03:16,930
your changes you submit it you deploy it

00:03:14,620 --> 00:03:18,280
everything seems good it's difficult for

00:03:16,930 --> 00:03:19,959
the teams to see the immediate benefits

00:03:18,280 --> 00:03:22,510
of going through a large-scale migration

00:03:19,959 --> 00:03:23,709
like this go into a central system also

00:03:22,510 --> 00:03:25,420
requires teams to accept some

00:03:23,709 --> 00:03:26,680
compromises when they own their own

00:03:25,420 --> 00:03:28,540
system they can do whatever they want

00:03:26,680 --> 00:03:30,280
they can fully customize it make things

00:03:28,540 --> 00:03:31,630
work however they want if they go to a

00:03:30,280 --> 00:03:32,620
central system they're giving up some of

00:03:31,630 --> 00:03:34,000
that control and they're letting another

00:03:32,620 --> 00:03:36,640
team make some decisions that may not

00:03:34,000 --> 00:03:38,109
always be ideal for them there's also

00:03:36,640 --> 00:03:39,820
potential loss of historical metadata

00:03:38,109 --> 00:03:41,170
with any sort of migration project we'll

00:03:39,820 --> 00:03:42,519
do our best to migrate everything over

00:03:41,170 --> 00:03:44,140
get all their data get everything they

00:03:42,519 --> 00:03:46,359
need but it's always possible that we'll

00:03:44,140 --> 00:03:47,410
lose something in the transition they're

00:03:46,359 --> 00:03:49,090
also going to lose ownership of their

00:03:47,410 --> 00:03:51,040
systems they're not going to be able to

00:03:49,090 --> 00:03:52,989
control themselves have you no system

00:03:51,040 --> 00:03:55,120
Ataman lights that sort of thing they're

00:03:52,989 --> 00:03:56,260
giving all that up to another team and

00:03:55,120 --> 00:03:57,970
it also just creates a lot of churn

00:03:56,260 --> 00:03:59,739
you're changing all the things about

00:03:57,970 --> 00:04:01,389
your code pipeline you may have to redo

00:03:59,739 --> 00:04:03,250
existing customizations or integrations

00:04:01,389 --> 00:04:04,540
all that has to take place before you

00:04:03,250 --> 00:04:06,639
can really take advantage the new system

00:04:04,540 --> 00:04:08,950
and finally there could just be a lack

00:04:06,639 --> 00:04:10,150
of feature parity there the system they

00:04:08,950 --> 00:04:11,829
were using might not have the exact same

00:04:10,150 --> 00:04:14,950
features at the new system or they might

00:04:11,829 --> 00:04:15,519
work in a different way so how do we

00:04:14,950 --> 00:04:17,200
move forward

00:04:15,519 --> 00:04:18,579
well for starters executive sponsorship

00:04:17,200 --> 00:04:20,320
is always important for something on

00:04:18,579 --> 00:04:21,910
this scale you need an executive that's

00:04:20,320 --> 00:04:23,650
willing to to go out there and say this

00:04:21,910 --> 00:04:25,600
is a useful project this is important to

00:04:23,650 --> 00:04:27,550
us it's worth the pain we're gonna

00:04:25,600 --> 00:04:29,470
actually make this happen that kind of

00:04:27,550 --> 00:04:31,510
mandate is extremely helpful but it

00:04:29,470 --> 00:04:32,830
can't be the only thing you do you also

00:04:31,510 --> 00:04:34,300
need to make a new system awesome make

00:04:32,830 --> 00:04:35,860
it great make it something that teams

00:04:34,300 --> 00:04:37,060
are going to want to use if you give

00:04:35,860 --> 00:04:38,740
them some new features or better

00:04:37,060 --> 00:04:40,630
performance or easier connectivity or

00:04:38,740 --> 00:04:41,590
something like that then it's it's going

00:04:40,630 --> 00:04:43,150
to be something that they want to switch

00:04:41,590 --> 00:04:45,590
to and they're willing to accept the the

00:04:43,150 --> 00:04:47,450
short-term pain of the migration

00:04:45,590 --> 00:04:49,250
we also want to simplify the migration

00:04:47,450 --> 00:04:50,660
process we really this is all about it

00:04:49,250 --> 00:04:51,680
making it easy for our developers we

00:04:50,660 --> 00:04:53,419
want them to be able to move from one

00:04:51,680 --> 00:04:55,520
system to another without it being some

00:04:53,419 --> 00:04:56,780
big drawn-out process we want to make it

00:04:55,520 --> 00:04:57,950
as easy as possible for them to get

00:04:56,780 --> 00:05:00,380
their code in the new system and to

00:04:57,950 --> 00:05:01,430
start taking advantage of it we also

00:05:00,380 --> 00:05:03,620
want to make as much of this self

00:05:01,430 --> 00:05:04,790
service and self owned as possible our

00:05:03,620 --> 00:05:06,410
teams love to have their own control

00:05:04,790 --> 00:05:08,150
over things we want to allow them to do

00:05:06,410 --> 00:05:09,500
that and we much rather that they solve

00:05:08,150 --> 00:05:11,120
their problems and they figure things

00:05:09,500 --> 00:05:12,650
out then they have to constantly come to

00:05:11,120 --> 00:05:14,060
the support team for it so we want to do

00:05:12,650 --> 00:05:16,730
as much self service and self ownership

00:05:14,060 --> 00:05:18,320
as we can we also want to have thorough

00:05:16,730 --> 00:05:19,639
high-quality documentation and we want

00:05:18,320 --> 00:05:21,680
to have it ready before the questions

00:05:19,639 --> 00:05:23,750
are even asked we want to allow our

00:05:21,680 --> 00:05:24,950
developers to move quickly to get on

00:05:23,750 --> 00:05:26,510
board with a new system and to start

00:05:24,950 --> 00:05:28,460
reusing it we don't want them to have a

00:05:26,510 --> 00:05:30,110
constantly stopped ask questions wait

00:05:28,460 --> 00:05:31,280
for us to respond that's for thing so we

00:05:30,110 --> 00:05:32,840
want to get them some Docs have them

00:05:31,280 --> 00:05:34,750
ready to go make it easy to search and

00:05:32,840 --> 00:05:37,310
find so they can help themselves and

00:05:34,750 --> 00:05:38,510
finally it's important to listen you're

00:05:37,310 --> 00:05:39,770
not the one that's likely going to be

00:05:38,510 --> 00:05:41,479
using your system the most you're

00:05:39,770 --> 00:05:42,860
probably more of an engineering team so

00:05:41,479 --> 00:05:43,910
patients are what your developers are

00:05:42,860 --> 00:05:45,260
trying to do what are their challenges

00:05:43,910 --> 00:05:46,610
what are their struggles what are the

00:05:45,260 --> 00:05:47,900
things that they're they're having

00:05:46,610 --> 00:05:49,280
trouble with in their current system and

00:05:47,900 --> 00:05:53,090
what can you do in your new system to

00:05:49,280 --> 00:05:54,530
make things easier for them so we came

00:05:53,090 --> 00:05:55,880
up with a plan it's pretty easy we're

00:05:54,530 --> 00:05:57,800
gonna build a new system we're gonna

00:05:55,880 --> 00:05:59,840
migrate all relevant code to it relevant

00:05:57,800 --> 00:06:01,100
is a bit of a key word there we only

00:05:59,840 --> 00:06:02,660
want to ring over what actually matters

00:06:01,100 --> 00:06:04,310
tons of stuff builds up in source

00:06:02,660 --> 00:06:05,930
control over time we want to leave all

00:06:04,310 --> 00:06:07,100
that junk behind we want to just bring

00:06:05,930 --> 00:06:08,539
over what really matters what's going to

00:06:07,100 --> 00:06:10,550
be used in the future it's our chance to

00:06:08,539 --> 00:06:12,440
kind of get a fresh slate clean slate

00:06:10,550 --> 00:06:14,090
and finally want to enable our

00:06:12,440 --> 00:06:16,160
developers we want them to be organized

00:06:14,090 --> 00:06:17,090
we want them to be able to encourage and

00:06:16,160 --> 00:06:18,800
embrace collaborative development

00:06:17,090 --> 00:06:20,060
practices and you want to make sure that

00:06:18,800 --> 00:06:22,600
we remove any roadblocks that are

00:06:20,060 --> 00:06:24,800
preventing them for being more efficient

00:06:22,600 --> 00:06:25,850
so we start with the build process we're

00:06:24,800 --> 00:06:27,470
gonna build our all new instance of

00:06:25,850 --> 00:06:29,150
gettime Enterprise so why did we pick

00:06:27,470 --> 00:06:30,289
get our enterprise well it's the

00:06:29,150 --> 00:06:32,330
industry standard when you think about

00:06:30,289 --> 00:06:34,010
get you think of github it also has a

00:06:32,330 --> 00:06:35,360
common experience with github calm so

00:06:34,010 --> 00:06:36,680
anybody that's been working with github

00:06:35,360 --> 00:06:38,120
calm and familiar with the user

00:06:36,680 --> 00:06:39,889
interface they come to enterprise it

00:06:38,120 --> 00:06:41,900
looks the same works the same feels the

00:06:39,889 --> 00:06:44,090
same so it's something that everybody's

00:06:41,900 --> 00:06:45,710
pretty used to it is already in use in

00:06:44,090 --> 00:06:47,870
parts of expedia group so we have some

00:06:45,710 --> 00:06:48,860
organizational momentum there we have

00:06:47,870 --> 00:06:50,539
some users that are already on board

00:06:48,860 --> 00:06:51,500
with it happy with it so it was easy to

00:06:50,539 --> 00:06:53,479
make this decision

00:06:51,500 --> 00:06:55,190
and finally it's familiar to most

00:06:53,479 --> 00:06:56,479
everyone developers coming out of

00:06:55,190 --> 00:06:57,950
college and probably using it for the

00:06:56,479 --> 00:06:59,390
project's they're people involved in

00:06:57,950 --> 00:07:00,680
open source and their personal lives

00:06:59,390 --> 00:07:02,240
I've been using it it's something that

00:07:00,680 --> 00:07:03,260
isn't gonna seem foreign to a lot of

00:07:02,240 --> 00:07:03,800
people getting started for the first

00:07:03,260 --> 00:07:05,810
time

00:07:03,800 --> 00:07:07,160
and finally we love the get-ups

00:07:05,810 --> 00:07:08,570
dedicated to continuous product

00:07:07,160 --> 00:07:10,250
improvement I mean we've just seen over

00:07:08,570 --> 00:07:11,600
the last couple days that there's all

00:07:10,250 --> 00:07:14,000
sorts of new features getting added to

00:07:11,600 --> 00:07:15,230
get up every six months really crossing

00:07:14,000 --> 00:07:17,230
our fingers that we get all that stuff

00:07:15,230 --> 00:07:19,250
from an enterprise server pretty soon

00:07:17,230 --> 00:07:20,600
and we're also really happy about

00:07:19,250 --> 00:07:22,610
enterprise support we like knowing that

00:07:20,600 --> 00:07:23,870
there's a team behind us that if we have

00:07:22,610 --> 00:07:26,030
problems if something doesn't go right

00:07:23,870 --> 00:07:29,660
that we can go to them and get the help

00:07:26,030 --> 00:07:30,830
we need and move forward so we came up

00:07:29,660 --> 00:07:32,330
with a list of requirements that we

00:07:30,830 --> 00:07:33,710
wonder instance to have first we want to

00:07:32,330 --> 00:07:35,480
built in the cloud building in cloud

00:07:33,710 --> 00:07:36,650
gives us easy scalability we can turn up

00:07:35,480 --> 00:07:38,840
the resources if we need them without

00:07:36,650 --> 00:07:40,550
much pain lowers our costs we only have

00:07:38,840 --> 00:07:41,600
to pay for what we need and finally we

00:07:40,550 --> 00:07:43,610
can use automatic and deployment

00:07:41,600 --> 00:07:45,470
configuration tools we also want to make

00:07:43,610 --> 00:07:47,750
sure that we have a single endpoint an

00:07:45,470 --> 00:07:50,150
only single endpoint some of our old

00:07:47,750 --> 00:07:51,680
systems had six seven maybe eight

00:07:50,150 --> 00:07:53,630
different proxy servers four different

00:07:51,680 --> 00:07:55,160
network locations and regions of the

00:07:53,630 --> 00:07:56,450
globe we don't want our developers to

00:07:55,160 --> 00:07:58,190
have to deal with that anymore that's a

00:07:56,450 --> 00:07:59,690
lot of configuration overhead a lot of

00:07:58,190 --> 00:08:00,770
tribal and knowledge you have to

00:07:59,690 --> 00:08:02,180
remember if they want to get the best

00:08:00,770 --> 00:08:03,620
performance we want them to just

00:08:02,180 --> 00:08:05,900
remember a single address that's all

00:08:03,620 --> 00:08:07,400
they ever need to use we also want to be

00:08:05,900 --> 00:08:09,290
geographically available we want to be

00:08:07,400 --> 00:08:10,610
in multiple regions we want intelligent

00:08:09,290 --> 00:08:12,170
around in those regions so that you're

00:08:10,610 --> 00:08:14,210
the user traffic will go wherever look

00:08:12,170 --> 00:08:15,380
at the best performance we also want it

00:08:14,210 --> 00:08:16,430
to be redundant so that if we have a

00:08:15,380 --> 00:08:18,800
problem in one reason we can easily

00:08:16,430 --> 00:08:21,110
failover keep going the users may not

00:08:18,800 --> 00:08:21,920
even notice and finally it should be

00:08:21,110 --> 00:08:23,510
secure

00:08:21,920 --> 00:08:25,040
we want our intent to be fully protected

00:08:23,510 --> 00:08:26,120
upon a laugh in front of it make sure

00:08:25,040 --> 00:08:28,370
that we're protected from malicious

00:08:26,120 --> 00:08:30,590
traffic DDoS attacks things like that

00:08:28,370 --> 00:08:32,720
and we want to only allow trusted access

00:08:30,590 --> 00:08:34,490
we want to make sure that only Expedia

00:08:32,720 --> 00:08:37,760
owned that approved sources can access

00:08:34,490 --> 00:08:40,100
our source control so we take those

00:08:37,760 --> 00:08:41,060
designs and put them all together we get

00:08:40,100 --> 00:08:43,250
something that looks a little bit like

00:08:41,060 --> 00:08:44,360
this and it's pretty straightforward you

00:08:43,250 --> 00:08:46,670
start at the top you can see our user

00:08:44,360 --> 00:08:48,710
traffic coming in we use Akamai for our

00:08:46,670 --> 00:08:50,660
IP whitelisting and geolocation services

00:08:48,710 --> 00:08:52,490
Akamai will look at the incoming traffic

00:08:50,660 --> 00:08:53,600
figure out which of our three regionals

00:08:52,490 --> 00:08:55,400
give it the best performance and route

00:08:53,600 --> 00:08:56,780
the traffic they're all over three

00:08:55,400 --> 00:08:58,070
regions then have a direct connect back

00:08:56,780 --> 00:09:01,420
to our data center so we can still send

00:08:58,070 --> 00:09:03,530
web hooks to on premise legacy systems

00:09:01,420 --> 00:09:04,820
so what kind of user experience do we

00:09:03,530 --> 00:09:05,450
get with that design well there's a

00:09:04,820 --> 00:09:06,770
single URL

00:09:05,450 --> 00:09:08,300
there's only one address that our

00:09:06,770 --> 00:09:09,830
developers ever need to know you get

00:09:08,300 --> 00:09:11,270
code you always just go to the same

00:09:09,830 --> 00:09:13,050
place doesn't matter if you're in the

00:09:11,270 --> 00:09:14,610
lab if you're in production it

00:09:13,050 --> 00:09:16,740
you're working on the VPN or working at

00:09:14,610 --> 00:09:19,110
home in a Chicago office London whatever

00:09:16,740 --> 00:09:20,760
one address is all you ever need and you

00:09:19,110 --> 00:09:22,740
also get automatic regional proxying

00:09:20,760 --> 00:09:23,970
from that use that one address and an

00:09:22,740 --> 00:09:24,899
outcome I'll figure out the right place

00:09:23,970 --> 00:09:26,399
to send you so you get the best

00:09:24,899 --> 00:09:28,830
performance possible no additional

00:09:26,399 --> 00:09:31,050
configuration needed we also support

00:09:28,830 --> 00:09:32,730
HTTPS and SSH so teams can use whichever

00:09:31,050 --> 00:09:34,740
authentication method works best for

00:09:32,730 --> 00:09:36,089
them and it's responsive and fast since

00:09:34,740 --> 00:09:37,350
it's built in a cloud we can easily just

00:09:36,089 --> 00:09:39,720
crank the knobs up if we need a little

00:09:37,350 --> 00:09:41,640
bit more horsepower and finally it's

00:09:39,720 --> 00:09:43,529
reliable with very little downtime and

00:09:41,640 --> 00:09:46,800
upgrades with get of enterprise or quick

00:09:43,529 --> 00:09:48,540
and very low impact so we've got a new

00:09:46,800 --> 00:09:51,180
instance built now I need to migrate all

00:09:48,540 --> 00:09:53,399
my stuff to it so what are we dealing

00:09:51,180 --> 00:09:55,200
with well Expedia Group we got about a

00:09:53,399 --> 00:09:57,149
little over 10,000 active get users

00:09:55,200 --> 00:09:59,070
we've got something like 60,000 git

00:09:57,149 --> 00:10:00,899
repos across both bitbucket and get of

00:09:59,070 --> 00:10:02,820
enterprise hundreds of thousands of pull

00:10:00,899 --> 00:10:04,709
requests in those repos we also 15

00:10:02,820 --> 00:10:06,750
perforce systems about 1,800 active

00:10:04,709 --> 00:10:09,630
perforce users and then minor amounts of

00:10:06,750 --> 00:10:12,870
code in subversion TFS get lab and some

00:10:09,630 --> 00:10:14,519
other things so some challenges that we

00:10:12,870 --> 00:10:16,140
face with this kind of a migration scope

00:10:14,519 --> 00:10:17,670
well for starters that migration process

00:10:16,140 --> 00:10:19,440
is different for each system the way you

00:10:17,670 --> 00:10:20,820
migrate code out a bit bucket isn't the

00:10:19,440 --> 00:10:22,950
same as you migrate code out of github

00:10:20,820 --> 00:10:24,329
or perforce there's also pretty big

00:10:22,950 --> 00:10:25,860
impact to our development teams with

00:10:24,329 --> 00:10:27,720
this kind of migration any existing

00:10:25,860 --> 00:10:29,550
automation or reporting systems will

00:10:27,720 --> 00:10:31,410
need to be updated for the new system

00:10:29,550 --> 00:10:32,760
and there could just be differences if

00:10:31,410 --> 00:10:33,779
you're working in perforce that's a very

00:10:32,760 --> 00:10:36,000
different experience than if you're

00:10:33,779 --> 00:10:37,350
working in github and finally this kind

00:10:36,000 --> 00:10:39,570
of migration is going to have an impact

00:10:37,350 --> 00:10:41,040
to our teams your roadmap is going to be

00:10:39,570 --> 00:10:41,850
affected your release cadence might not

00:10:41,040 --> 00:10:43,800
be able to stay the same

00:10:41,850 --> 00:10:46,020
first more time there's probably some

00:10:43,800 --> 00:10:47,940
impacts to milestones there's also

00:10:46,020 --> 00:10:50,250
impact to our support team our sport

00:10:47,940 --> 00:10:52,170
team isn't huge if there's a lot of

00:10:50,250 --> 00:10:53,850
problems with migrations it could they

00:10:52,170 --> 00:10:55,170
could get overwhelmed they may not be

00:10:53,850 --> 00:10:57,300
able to keep up with the flow of tickets

00:10:55,170 --> 00:10:58,949
if they fall behind that's going to slow

00:10:57,300 --> 00:11:00,540
responses to teams and that could slow

00:10:58,949 --> 00:11:02,279
development teams down even more and

00:11:00,540 --> 00:11:03,990
finally there's just plain processing

00:11:02,279 --> 00:11:05,310
time we're talking about a huge amount

00:11:03,990 --> 00:11:08,279
of data and you can only move so much

00:11:05,310 --> 00:11:09,660
data so quickly so it very base level we

00:11:08,279 --> 00:11:10,740
just have to wait for all this data and

00:11:09,660 --> 00:11:14,550
move where it needs to go and get

00:11:10,740 --> 00:11:16,649
processed into the system so what's our

00:11:14,550 --> 00:11:19,019
plan well we want to automate as much as

00:11:16,649 --> 00:11:20,730
possible doing automated graison's means

00:11:19,019 --> 00:11:22,440
we can drastically lower the amount of

00:11:20,730 --> 00:11:24,540
manual effort is required from our

00:11:22,440 --> 00:11:26,550
support teams we also want to allow our

00:11:24,540 --> 00:11:26,790
teams to migrate on their own terms we

00:11:26,550 --> 00:11:28,320
want

00:11:26,790 --> 00:11:29,940
make migration a self-service process

00:11:28,320 --> 00:11:31,410
for them we want them to be able to

00:11:29,940 --> 00:11:33,240
decide when the time is right

00:11:31,410 --> 00:11:34,650
make the choice themselves and then

00:11:33,240 --> 00:11:36,450
execute the entire migration without

00:11:34,650 --> 00:11:38,250
having to contact us or the support team

00:11:36,450 --> 00:11:39,480
we also want to make sure that we give

00:11:38,250 --> 00:11:40,950
our teams reasonable deadlines so

00:11:39,480 --> 00:11:42,570
provide them the tools let them self

00:11:40,950 --> 00:11:43,980
service the migration but give them a

00:11:42,570 --> 00:11:45,870
deadline that they have to meet and hold

00:11:43,980 --> 00:11:47,310
them to it if we keep letting teams push

00:11:45,870 --> 00:11:49,380
things out things are never gonna get

00:11:47,310 --> 00:11:51,180
done one of the great things about

00:11:49,380 --> 00:11:52,830
self-service migrations is that you also

00:11:51,180 --> 00:11:54,720
can let your team's test-first they can

00:11:52,830 --> 00:11:56,520
move over a repo maybe to check all

00:11:54,720 --> 00:11:57,870
their pipelines check the CI CD make

00:11:56,520 --> 00:11:59,820
sure that everything is working with a

00:11:57,870 --> 00:12:01,170
new system get everything ready so when

00:11:59,820 --> 00:12:02,760
that's finally the time is right they

00:12:01,170 --> 00:12:05,760
can push the button migrant everything

00:12:02,760 --> 00:12:06,900
and be ready to keep going we also make

00:12:05,760 --> 00:12:09,000
sure that our migrations of

00:12:06,900 --> 00:12:10,410
easy-to-follow instructions we want to

00:12:09,000 --> 00:12:12,300
make sure our instructors are clear and

00:12:10,410 --> 00:12:13,500
concise that when teams are ready to

00:12:12,300 --> 00:12:15,930
migrate they can follow the

00:12:13,500 --> 00:12:17,430
documentation follow the steps move the

00:12:15,930 --> 00:12:19,290
repos over and everything works on the

00:12:17,430 --> 00:12:20,430
first shot we want to make sure that we

00:12:19,290 --> 00:12:21,840
document anything that gets asked

00:12:20,430 --> 00:12:23,070
frequently so that all the answers are

00:12:21,840 --> 00:12:25,380
right there waiting for them and they

00:12:23,070 --> 00:12:26,880
don't have to come to us that said if

00:12:25,380 --> 00:12:28,140
they do have problems or have questions

00:12:26,880 --> 00:12:30,060
we want to have a dedicated support

00:12:28,140 --> 00:12:31,740
contact point we want to make sure that

00:12:30,060 --> 00:12:32,970
if teams have problems if they need to

00:12:31,740 --> 00:12:33,930
get a quick answer we don't want them to

00:12:32,970 --> 00:12:35,280
have to look through some service

00:12:33,930 --> 00:12:36,600
directory or some sort of ticketing

00:12:35,280 --> 00:12:37,860
system something want them to be able to

00:12:36,600 --> 00:12:39,360
get to someone quickly that has the

00:12:37,860 --> 00:12:40,680
information they need so they can answer

00:12:39,360 --> 00:12:44,220
the question and move on with their

00:12:40,680 --> 00:12:45,630
migration so what do we do for automated

00:12:44,220 --> 00:12:46,860
migrations well for us we were able to

00:12:45,630 --> 00:12:48,360
support them for github Enterprise in

00:12:46,860 --> 00:12:50,940
bitbucket we use two different utilities

00:12:48,360 --> 00:12:53,220
for that versus ghe migrator this is the

00:12:50,940 --> 00:12:54,720
native github import/export tool it's

00:12:53,220 --> 00:12:56,430
included on every github Enterprise

00:12:54,720 --> 00:12:57,990
appliance and you run it on both the

00:12:56,430 --> 00:12:59,430
source and the destination so if you're

00:12:57,990 --> 00:13:01,710
coming out of getting enterprise you run

00:12:59,430 --> 00:13:03,210
GT migrate export the repo transfer that

00:13:01,710 --> 00:13:05,130
to your destination get of enterprise

00:13:03,210 --> 00:13:07,950
appliance and then GHU migrator again to

00:13:05,130 --> 00:13:08,370
import it in BBS migrator is for

00:13:07,950 --> 00:13:10,020
bitbucket

00:13:08,370 --> 00:13:12,060
and that is a github developed bitbucket

00:13:10,020 --> 00:13:14,520
export tool and export to repo data

00:13:12,060 --> 00:13:16,620
through the bitbucket REST API and it

00:13:14,520 --> 00:13:18,300
generates a ghe migrator compatible repo

00:13:16,620 --> 00:13:19,650
bundle which means that you can take

00:13:18,300 --> 00:13:20,100
your repo bundle export it out a bit

00:13:19,650 --> 00:13:22,230
bucket

00:13:20,100 --> 00:13:23,970
copy to your clients and then run GG

00:13:22,230 --> 00:13:25,170
migrator to import it and the

00:13:23,970 --> 00:13:27,180
combination of these two utilities

00:13:25,170 --> 00:13:28,680
covers about 95% of all Expedia group

00:13:27,180 --> 00:13:29,670
repos that need to be migrated so this

00:13:28,680 --> 00:13:33,330
is where the bulk of our automation

00:13:29,670 --> 00:13:34,440
efforts were focused so what are the

00:13:33,330 --> 00:13:36,360
challenges of trying to automate these

00:13:34,440 --> 00:13:37,680
migrations well for starters these

00:13:36,360 --> 00:13:40,150
migration tools require high level

00:13:37,680 --> 00:13:42,250
permissions there they're generally

00:13:40,150 --> 00:13:43,480
man line utilities then Gigi migrators

00:13:42,250 --> 00:13:45,250
meant to run on the github appliance

00:13:43,480 --> 00:13:47,470
itself see any root level access there

00:13:45,250 --> 00:13:49,630
and BBS migrator requires system admin

00:13:47,470 --> 00:13:51,280
permissions in bitbucket there also a

00:13:49,630 --> 00:13:52,690
manual process by default these are just

00:13:51,280 --> 00:13:54,700
command line utilities that take a bunch

00:13:52,690 --> 00:13:56,760
of parameters it's not the sort of thing

00:13:54,700 --> 00:13:59,710
has been designed to be automated

00:13:56,760 --> 00:14:00,700
migration are these tools are also

00:13:59,710 --> 00:14:02,920
generally meant to be used

00:14:00,700 --> 00:14:03,970
asynchronously so the export process is

00:14:02,920 --> 00:14:05,380
completely different from the import

00:14:03,970 --> 00:14:06,820
process so you have to have some way to

00:14:05,380 --> 00:14:08,080
communicate from the export to the

00:14:06,820 --> 00:14:10,000
import and make sure they stay in sync

00:14:08,080 --> 00:14:12,460
with each other and it's also a serial

00:14:10,000 --> 00:14:14,740
process github only allows one instance

00:14:12,460 --> 00:14:16,360
of ghe migrator to xu at a time so that

00:14:14,740 --> 00:14:18,220
means that the speed that you can import

00:14:16,360 --> 00:14:20,850
repos in to get of enterprise is limited

00:14:18,220 --> 00:14:23,290
by how fast you can execute ghe migrator

00:14:20,850 --> 00:14:24,940
it's also difficult to paralyze these

00:14:23,290 --> 00:14:27,310
migrations while it is possible to batch

00:14:24,940 --> 00:14:29,170
repos into GG migrator you have to use a

00:14:27,310 --> 00:14:30,460
single conflicts file during conflicts

00:14:29,170 --> 00:14:31,750
processing for all of those repos and

00:14:30,460 --> 00:14:34,240
that can make doing that with automation

00:14:31,750 --> 00:14:35,530
pretty difficult so let's go into a

00:14:34,240 --> 00:14:36,730
little more detail about conflicts

00:14:35,530 --> 00:14:38,170
processing this is one of the trickiest

00:14:36,730 --> 00:14:40,360
parts of dealing with these migrations

00:14:38,170 --> 00:14:42,010
conflicts processing is basically where

00:14:40,360 --> 00:14:43,300
github will compare the incoming

00:14:42,010 --> 00:14:44,980
metadata from your repo that you're

00:14:43,300 --> 00:14:46,390
importing to what already exists in your

00:14:44,980 --> 00:14:48,730
destination so it's looking at things

00:14:46,390 --> 00:14:51,460
like users teams or anything that would

00:14:48,730 --> 00:14:53,290
collide github will generate a conflict

00:14:51,460 --> 00:14:55,300
on CSV file and it'll list out all of

00:14:53,290 --> 00:14:57,280
the things that are a conflict between

00:14:55,300 --> 00:14:58,630
the source and the destination and allow

00:14:57,280 --> 00:15:00,880
you to tell github what you want to do

00:14:58,630 --> 00:15:02,560
with that conflict you can use this to

00:15:00,880 --> 00:15:04,030
map things together if they're the same

00:15:02,560 --> 00:15:05,410
you can rename things you can remove

00:15:04,030 --> 00:15:06,910
things it's a pretty powerful and

00:15:05,410 --> 00:15:08,500
flexible tool but it needs to be

00:15:06,910 --> 00:15:10,210
customized to every repo that you're

00:15:08,500 --> 00:15:12,190
importing so you can't use a general set

00:15:10,210 --> 00:15:14,290
of settings for every repo that's coming

00:15:12,190 --> 00:15:16,360
in there's also something you have to be

00:15:14,290 --> 00:15:17,830
very careful with if you do something

00:15:16,360 --> 00:15:20,050
wrong in the conflicts file you can

00:15:17,830 --> 00:15:21,550
easily import 400 user accounts that you

00:15:20,050 --> 00:15:23,410
didn't mean to or a whole bunch of teams

00:15:21,550 --> 00:15:24,790
that do nothing it's a really good way

00:15:23,410 --> 00:15:26,050
to pollute your nice new github

00:15:24,790 --> 00:15:27,580
Enterprise appliance with a bunch of

00:15:26,050 --> 00:15:28,570
garbage data that can be a real pain to

00:15:27,580 --> 00:15:30,940
clean up afterwards

00:15:28,570 --> 00:15:32,530
so generally I definitely use it

00:15:30,940 --> 00:15:34,810
carefully and test everything thoroughly

00:15:32,530 --> 00:15:36,100
before you try to use in production in

00:15:34,810 --> 00:15:37,540
our specific case one of the most

00:15:36,100 --> 00:15:39,610
difficult things to handle was when we

00:15:37,540 --> 00:15:40,990
had inconsistent user bases between our

00:15:39,610 --> 00:15:42,670
source instance and our destination

00:15:40,990 --> 00:15:44,170
incidents so this means that the user

00:15:42,670 --> 00:15:45,790
directory that the repo is coming from

00:15:44,170 --> 00:15:47,950
is different from the user directory of

00:15:45,790 --> 00:15:49,570
our new github Enterprise appliance so

00:15:47,950 --> 00:15:51,220
this would mean that if the user J Smith

00:15:49,570 --> 00:15:53,200
for example existed in the source and

00:15:51,220 --> 00:15:53,490
existed in the destination we couldn't

00:15:53,200 --> 00:15:55,800
be

00:15:53,490 --> 00:15:57,390
they were actually the same person it

00:15:55,800 --> 00:15:59,310
could also be the case that even if J

00:15:57,390 --> 00:16:01,320
Smith didn't exist in the destination he

00:15:59,310 --> 00:16:02,640
might someday get hired and if they did

00:16:01,320 --> 00:16:03,959
then they probably wouldn't allow again

00:16:02,640 --> 00:16:05,399
to get up for the first time and see

00:16:03,959 --> 00:16:07,680
that they had four hundred commits under

00:16:05,399 --> 00:16:08,850
their name from ten years ago it's the

00:16:07,680 --> 00:16:09,870
kind of thing you don't want to run into

00:16:08,850 --> 00:16:12,180
in the future either

00:16:09,870 --> 00:16:14,250
so our solution to this problem is that

00:16:12,180 --> 00:16:15,360
whenever we import repos from a system

00:16:14,250 --> 00:16:17,370
that does not have the same user

00:16:15,360 --> 00:16:18,930
directory we rename all of the users

00:16:17,370 --> 00:16:20,610
coming in with a special tag that shows

00:16:18,930 --> 00:16:21,899
where they came from but also make sure

00:16:20,610 --> 00:16:23,700
that we never have any user name

00:16:21,899 --> 00:16:25,740
conflicts with our destination instance

00:16:23,700 --> 00:16:27,570
we've also done something similar with

00:16:25,740 --> 00:16:29,310
importing teams since in general the

00:16:27,570 --> 00:16:30,779
teams on a source instance are not going

00:16:29,310 --> 00:16:32,670
to exactly match up with the teams that

00:16:30,779 --> 00:16:34,230
the users want on the destination we

00:16:32,670 --> 00:16:35,610
basically consolidate all teams being

00:16:34,230 --> 00:16:37,260
imported down to a single placeholder

00:16:35,610 --> 00:16:38,580
team and then allow our developers to

00:16:37,260 --> 00:16:42,060
create their new team structure as they

00:16:38,580 --> 00:16:43,709
need to in the new instance so to handle

00:16:42,060 --> 00:16:45,839
all this automated migration we created

00:16:43,709 --> 00:16:47,370
something we called Gus Gus stands for

00:16:45,839 --> 00:16:49,620
github self service this was developed

00:16:47,370 --> 00:16:51,270
by Expedia group and essentially wraps

00:16:49,620 --> 00:16:54,360
the existing migration tools to allow

00:16:51,270 --> 00:16:55,890
their use by non edmonds with Gus our

00:16:54,360 --> 00:16:57,390
users can do one-click migrations of

00:16:55,890 --> 00:16:59,610
repos from their source instance to the

00:16:57,390 --> 00:17:02,070
destination instance Gus is written in

00:16:59,610 --> 00:17:04,410
Python uses JIRA for tracking and

00:17:02,070 --> 00:17:06,300
notification uses an s3 bucket for repo

00:17:04,410 --> 00:17:09,870
storage and it has a cron job on the

00:17:06,300 --> 00:17:12,030
appliances to handle scheduling so this

00:17:09,870 --> 00:17:13,920
is the flow chart for Gus this kind of

00:17:12,030 --> 00:17:15,689
lays out the processes that it takes and

00:17:13,920 --> 00:17:17,459
you can see there's only a single user

00:17:15,689 --> 00:17:19,290
interaction for this entire flow chart

00:17:17,459 --> 00:17:20,880
in the top left you can see it says user

00:17:19,290 --> 00:17:22,140
completes Gus migration form that's the

00:17:20,880 --> 00:17:24,300
only thing the user ever does for this

00:17:22,140 --> 00:17:25,860
entire process the user fills out the

00:17:24,300 --> 00:17:27,569
migration form clicks the go button and

00:17:25,860 --> 00:17:29,850
they're done Gus takes it from there

00:17:27,569 --> 00:17:31,800
Gus will check their input make sure

00:17:29,850 --> 00:17:33,030
it's valid check their permissions make

00:17:31,800 --> 00:17:34,620
sure they're allowed to migrate the repo

00:17:33,030 --> 00:17:37,110
it'll create a JIRA ticket for tracking

00:17:34,620 --> 00:17:38,600
and then it'll export the repo from

00:17:37,110 --> 00:17:40,620
either get of enterprise or bitbucket

00:17:38,600 --> 00:17:42,510
once the export is complete it'll

00:17:40,620 --> 00:17:43,830
transfer the bundle up to s3 and it'll

00:17:42,510 --> 00:17:45,990
update your ticket to say that the

00:17:43,830 --> 00:17:47,490
export was successful from there the

00:17:45,990 --> 00:17:49,260
second half of Gus takes over on the

00:17:47,490 --> 00:17:50,760
destination github appliance it'll

00:17:49,260 --> 00:17:52,620
download the repo bundle from s3

00:17:50,760 --> 00:17:55,020
process conflicts on the repo and

00:17:52,620 --> 00:17:56,670
generate a custom conflict CSV file and

00:17:55,020 --> 00:17:59,820
then it will import the repo into github

00:17:56,670 --> 00:18:01,440
using that custom conflicts file repo

00:17:59,820 --> 00:18:03,300
will be unlocked the JIRA ticket will be

00:18:01,440 --> 00:18:05,820
resolved and the repo is ready to use in

00:18:03,300 --> 00:18:07,190
github if anything happens along the way

00:18:05,820 --> 00:18:08,840
that goes wrong there's an error so

00:18:07,190 --> 00:18:10,220
like that it'll update the dirt ticket

00:18:08,840 --> 00:18:11,360
with the arrow details and escalate it

00:18:10,220 --> 00:18:15,410
to our support team for them to take a

00:18:11,360 --> 00:18:17,570
look so we look at a screenshot of Gus

00:18:15,410 --> 00:18:18,470
this is what it actually looks like text

00:18:17,570 --> 00:18:19,580
is a little small up there but that's

00:18:18,470 --> 00:18:20,780
okay

00:18:19,580 --> 00:18:22,340
you can see there's some documentation

00:18:20,780 --> 00:18:23,630
some links to our migration stuff up

00:18:22,340 --> 00:18:25,120
there are some instructions if people

00:18:23,630 --> 00:18:27,830
don't want to read the documentation and

00:18:25,120 --> 00:18:29,360
some simple boxes at the bottom if you

00:18:27,830 --> 00:18:31,370
wanted Margarito you paste in your repo

00:18:29,360 --> 00:18:33,710
URL select to github or go send it to

00:18:31,370 --> 00:18:35,600
you can put in a repo name prefix if you

00:18:33,710 --> 00:18:37,460
want and your email address and that's

00:18:35,600 --> 00:18:39,200
it click the green button wait a little

00:18:37,460 --> 00:18:40,580
bit and your repo magically pops out and

00:18:39,200 --> 00:18:42,050
github ready to go with all of its

00:18:40,580 --> 00:18:43,990
history all of its pull requests all of

00:18:42,050 --> 00:18:46,010
its metadata everything that it needs

00:18:43,990 --> 00:18:47,690
one of the cool things that our engineer

00:18:46,010 --> 00:18:49,520
did with this is he you work to mimic

00:18:47,690 --> 00:18:50,990
the user interface of github itself in

00:18:49,520 --> 00:18:51,980
the migration tool so Gus looks very

00:18:50,990 --> 00:18:53,360
similar to github

00:18:51,980 --> 00:18:54,800
it really helps tie the migration

00:18:53,360 --> 00:18:56,840
process together with the new system

00:18:54,800 --> 00:18:57,770
that our users are going to be using and

00:18:56,840 --> 00:18:59,270
you can also see up at the very top

00:18:57,770 --> 00:19:01,070
there's a couple other tabs up there

00:18:59,270 --> 00:19:02,060
we've even extended Gus since we created

00:19:01,070 --> 00:19:03,440
it and given up some additional

00:19:02,060 --> 00:19:04,640
self-service functionality to handle

00:19:03,440 --> 00:19:08,660
things like org creation and a

00:19:04,640 --> 00:19:11,270
permission viewer so some stats on using

00:19:08,660 --> 00:19:13,520
Gus well so far we've migrated over

00:19:11,270 --> 00:19:15,380
5,500 repos with get a better prize we

00:19:13,520 --> 00:19:17,810
see 99% success on our first migration

00:19:15,380 --> 00:19:19,580
attempt with bitbucket we see about 90%

00:19:17,810 --> 00:19:20,750
success though in the last couple of

00:19:19,580 --> 00:19:22,400
weeks we've even been able to shove that

00:19:20,750 --> 00:19:24,140
number up a little higher by doing some

00:19:22,400 --> 00:19:25,760
things like reducing latency between Gus

00:19:24,140 --> 00:19:26,930
and our bitbucket servers and also

00:19:25,760 --> 00:19:29,120
making sure that Gus has enough

00:19:26,930 --> 00:19:31,000
resources to handle exporting our

00:19:29,120 --> 00:19:33,350
largest repos that are in bitbucket or

00:19:31,000 --> 00:19:34,400
average migration time for repos forget

00:19:33,350 --> 00:19:36,320
of enterprise takes about 15 minutes

00:19:34,400 --> 00:19:38,420
doesn't matter how big the repo is brew

00:19:36,320 --> 00:19:40,070
bucket takes 30 minutes plus an hour for

00:19:38,420 --> 00:19:41,810
every thousand pull requests the main

00:19:40,070 --> 00:19:43,340
reason that bitbucket takes a bit longer

00:19:41,810 --> 00:19:43,880
is everything's being done over the REST

00:19:43,340 --> 00:19:45,560
API

00:19:43,880 --> 00:19:46,580
so there's pagination involved if you've

00:19:45,560 --> 00:19:48,230
got a whole lot of data coming out

00:19:46,580 --> 00:19:50,720
there's a lot of HTTP overhead things

00:19:48,230 --> 00:19:52,760
like that just takes a bit longer one of

00:19:50,720 --> 00:19:53,960
the cool things that that were is an

00:19:52,760 --> 00:19:55,580
example of the collaboration we're

00:19:53,960 --> 00:19:58,370
hoping to see more from going to github

00:19:55,580 --> 00:20:00,980
is originally we're only migrated a

00:19:58,370 --> 00:20:02,210
single repo at a time it just has you

00:20:00,980 --> 00:20:04,220
pasted in one repo click the button

00:20:02,210 --> 00:20:05,660
that's it well one of our dev teams took

00:20:04,220 --> 00:20:07,520
a look at Gus figured out the right way

00:20:05,660 --> 00:20:08,900
to submit an HTTP request to it and

00:20:07,520 --> 00:20:09,650
figured out that it was possible to

00:20:08,900 --> 00:20:12,140
script

00:20:09,650 --> 00:20:13,430
submitting migration requests to Gus so

00:20:12,140 --> 00:20:14,750
they were able to write up a list of all

00:20:13,430 --> 00:20:16,100
the Reba's that wanted to move make sure

00:20:14,750 --> 00:20:17,480
they were ready to go and then write a

00:20:16,100 --> 00:20:20,060
script to submit them all through Gus

00:20:17,480 --> 00:20:21,050
all at once they'd queue up 100 120

00:20:20,060 --> 00:20:22,880
different repos to Mike

00:20:21,050 --> 00:20:25,520
and Gus was just chew through them over

00:20:22,880 --> 00:20:26,900
the next you know period of hours this

00:20:25,520 --> 00:20:28,400
script was done pretty much without our

00:20:26,900 --> 00:20:29,960
interaction they came to us said hey we

00:20:28,400 --> 00:20:31,970
wrote the script and a migration repose

00:20:29,960 --> 00:20:33,440
that's good that's awesome give it to us

00:20:31,970 --> 00:20:34,580
let's get it on our site let's share it

00:20:33,440 --> 00:20:36,020
and we've since had a lot of other

00:20:34,580 --> 00:20:37,340
developer teams that have been using the

00:20:36,020 --> 00:20:38,960
same script enhanced it with their own

00:20:37,340 --> 00:20:40,490
requirements it's been a great way to

00:20:38,960 --> 00:20:41,720
lower teams to move things over in bulk

00:20:40,490 --> 00:20:42,830
once they're ready to go without having

00:20:41,720 --> 00:20:46,940
to go through the user interface a whole

00:20:42,830 --> 00:20:49,010
bunch of times so we can look at some of

00:20:46,940 --> 00:20:51,290
the statistics of migrating things with

00:20:49,010 --> 00:20:52,520
Gus so know the numbers are pretty small

00:20:51,290 --> 00:20:53,690
in here and that's okay that the the

00:20:52,520 --> 00:20:55,460
shape of the line is really the more

00:20:53,690 --> 00:20:57,620
important thing here and this is showing

00:20:55,460 --> 00:20:59,450
our migrations over time the red line is

00:20:57,620 --> 00:21:01,760
migration request created the Green Line

00:20:59,450 --> 00:21:02,900
is migration request completed and you

00:21:01,760 --> 00:21:04,700
can see that when you first introduced

00:21:02,900 --> 00:21:06,380
Gus a little over a year ago we migrated

00:21:04,700 --> 00:21:08,540
our first instance pretty quickly we did

00:21:06,380 --> 00:21:09,500
about 2,500 repos in about a month and a

00:21:08,540 --> 00:21:10,850
half

00:21:09,500 --> 00:21:11,990
things slowed down for a little bit

00:21:10,850 --> 00:21:13,250
after that and then you can see at the

00:21:11,990 --> 00:21:15,440
beginning of this summer we added a

00:21:13,250 --> 00:21:17,450
couple more instances to Gus and a repos

00:21:15,440 --> 00:21:19,070
of migrations have taken off again the

00:21:17,450 --> 00:21:20,390
really cool thing about this graph

00:21:19,070 --> 00:21:22,160
though is that you can see that the two

00:21:20,390 --> 00:21:23,480
lines tracked very closely on top of

00:21:22,160 --> 00:21:25,010
each other and that really shows the

00:21:23,480 --> 00:21:27,680
impact of automation and how successful

00:21:25,010 --> 00:21:29,840
it's been we can clearly see that a

00:21:27,680 --> 00:21:31,730
migration request comes in Gus migrates

00:21:29,840 --> 00:21:32,870
it Gus closes it moves on to the next

00:21:31,730 --> 00:21:33,980
one we're not seeing a lot of waviness

00:21:32,870 --> 00:21:37,040
where Gus was struggling or having

00:21:33,980 --> 00:21:38,360
problems we can look at the same data in

00:21:37,040 --> 00:21:40,790
a slightly different form if you look at

00:21:38,360 --> 00:21:42,560
the non-cumulative graph and it looks a

00:21:40,790 --> 00:21:44,150
bit more like this so we can see that

00:21:42,560 --> 00:21:45,620
this is the same thing again red line is

00:21:44,150 --> 00:21:47,540
my cursor of Gus created Green Line is

00:21:45,620 --> 00:21:48,980
migrations completed and you can see

00:21:47,540 --> 00:21:50,810
that the two lines have basically the

00:21:48,980 --> 00:21:53,420
same pattern and that just shows us that

00:21:50,810 --> 00:21:54,530
even when we get up to 100 120 migration

00:21:53,420 --> 00:21:56,780
requests in a single day

00:21:54,530 --> 00:21:58,400
Gus is doing this job it sees them

00:21:56,780 --> 00:22:00,050
migrate them through chews through all

00:21:58,400 --> 00:22:03,920
the migrations we don't see a lot of

00:22:00,050 --> 00:22:05,270
impact or support team from it so that's

00:22:03,920 --> 00:22:06,530
great we've got our automated migrations

00:22:05,270 --> 00:22:08,480
but that doesn't cover all of our code

00:22:06,530 --> 00:22:09,620
bases we're trying to centralize so we

00:22:08,480 --> 00:22:11,150
have some other migration methods as

00:22:09,620 --> 00:22:12,980
well we call them assisted migration

00:22:11,150 --> 00:22:15,110
this is if you're migrating from github

00:22:12,980 --> 00:22:16,400
calm or perforce this still includes

00:22:15,110 --> 00:22:17,750
your full history all your pull requests

00:22:16,400 --> 00:22:19,880
all your issues projects things like

00:22:17,750 --> 00:22:21,590
that but they have to be scheduled with

00:22:19,880 --> 00:22:22,970
our support team so it's something that

00:22:21,590 --> 00:22:24,200
takes a bit of effort on our part

00:22:22,970 --> 00:22:26,420
there's a bit of manual work involved

00:22:24,200 --> 00:22:28,610
but these could be automated through Gus

00:22:26,420 --> 00:22:30,020
if they became requirement we don't have

00:22:28,610 --> 00:22:31,250
a whole lot of code and get into common

00:22:30,020 --> 00:22:32,870
perforce as moving over so we haven't

00:22:31,250 --> 00:22:34,330
done that yet but it's always an option

00:22:32,870 --> 00:22:35,230
and find

00:22:34,330 --> 00:22:36,700
there's just a plain old manual

00:22:35,230 --> 00:22:38,470
migration basically just doing a gift

00:22:36,700 --> 00:22:40,029
phone and get push anybody can do that

00:22:38,470 --> 00:22:41,830
doesn't require anything from the sport

00:22:40,029 --> 00:22:43,090
team it's totally self service you still

00:22:41,830 --> 00:22:44,769
get your full commit history you just

00:22:43,090 --> 00:22:46,750
don't get pull requests or issues or

00:22:44,769 --> 00:22:47,919
other metadata like that but it's a

00:22:46,750 --> 00:22:50,169
great thing to use if you're just moving

00:22:47,919 --> 00:22:53,649
over a test repo a hackathon repo a

00:22:50,169 --> 00:22:54,850
sandbox repo or something like that so

00:22:53,649 --> 00:22:56,649
we might grow to code over I've got a

00:22:54,850 --> 00:22:58,600
new system online how do we get our

00:22:56,649 --> 00:23:00,010
developers to be more efficient in to

00:22:58,600 --> 00:23:02,559
collaborate with each other well for

00:23:00,010 --> 00:23:04,210
starters we want to get organized first

00:23:02,559 --> 00:23:05,110
thing we do is we created some standards

00:23:04,210 --> 00:23:07,419
for how we're going to use github

00:23:05,110 --> 00:23:09,340
organisations we disable the ability for

00:23:07,419 --> 00:23:10,659
users to create them by default and we

00:23:09,340 --> 00:23:12,429
wanted to make sure that order to reuse

00:23:10,659 --> 00:23:13,389
thoughtfully and carefully because we

00:23:12,429 --> 00:23:15,159
didn't want to wind up with a whole

00:23:13,389 --> 00:23:17,529
bunch of clutter in our brand-new kit of

00:23:15,159 --> 00:23:18,850
instance right off the bat so we

00:23:17,529 --> 00:23:20,559
published some standards for when an org

00:23:18,850 --> 00:23:22,539
is a good idea when it's not and we

00:23:20,559 --> 00:23:23,830
limited creation of orgs to our senior

00:23:22,539 --> 00:23:25,120
level engineers and above so that

00:23:23,830 --> 00:23:26,649
there's some thought that goes in to

00:23:25,120 --> 00:23:28,059
creating one and it's not something that

00:23:26,649 --> 00:23:30,519
just spur the moment somebody can throw

00:23:28,059 --> 00:23:31,690
up if they decide they want to we've

00:23:30,519 --> 00:23:32,919
also tried to set some source control

00:23:31,690 --> 00:23:33,880
standards for our developers to meet now

00:23:32,919 --> 00:23:35,139
we want to make sure that they use good

00:23:33,880 --> 00:23:37,899
naming conventions for things like

00:23:35,139 --> 00:23:39,429
organizations repos and teams we also

00:23:37,899 --> 00:23:41,620
want them to use discoverability AIDS so

00:23:39,429 --> 00:23:43,360
right good readme files use repo topics

00:23:41,620 --> 00:23:44,440
things like that and we want our

00:23:43,360 --> 00:23:46,269
developer use to branch protection

00:23:44,440 --> 00:23:47,649
features we want to embrace up a pull

00:23:46,269 --> 00:23:48,970
request driven model we want to make

00:23:47,649 --> 00:23:50,350
sure there's code review on everything

00:23:48,970 --> 00:23:52,090
people are looking at things and giving

00:23:50,350 --> 00:23:53,380
their feedback and we want our

00:23:52,090 --> 00:23:55,000
developers to define a contribution

00:23:53,380 --> 00:23:57,070
process to the repost make sure they're

00:23:55,000 --> 00:23:58,929
adding a contributing MD file that lays

00:23:57,070 --> 00:24:00,730
out what the code that they're using is

00:23:58,929 --> 00:24:01,929
how they expect it to be used what kind

00:24:00,730 --> 00:24:03,970
of standards they want it to meet things

00:24:01,929 --> 00:24:05,500
like that we want to make sure our repo

00:24:03,970 --> 00:24:06,549
containers are clearly noted and clearly

00:24:05,500 --> 00:24:08,440
identified and that they're paying

00:24:06,549 --> 00:24:09,610
attention to their repos and we want to

00:24:08,440 --> 00:24:10,899
make sure that our developers are all

00:24:09,610 --> 00:24:13,240
comfortable working with pull requests

00:24:10,899 --> 00:24:16,149
and Forks and so their primary means of

00:24:13,240 --> 00:24:17,799
doing collaborative development so how

00:24:16,149 --> 00:24:18,309
we try to encourage collaborative

00:24:17,799 --> 00:24:20,649
development

00:24:18,309 --> 00:24:22,450
well we've created an internal inner and

00:24:20,649 --> 00:24:24,429
open-source foundation at Expedia group

00:24:22,450 --> 00:24:26,350
this is a team that has broad

00:24:24,429 --> 00:24:27,850
representation across the company it's

00:24:26,350 --> 00:24:29,620
not limited any one brand or any one

00:24:27,850 --> 00:24:30,700
part of the company and their mission is

00:24:29,620 --> 00:24:33,429
to develop standards and best practices

00:24:30,700 --> 00:24:35,080
for code development collaborative

00:24:33,429 --> 00:24:36,700
development working together things like

00:24:35,080 --> 00:24:38,350
that they're also there to try and

00:24:36,700 --> 00:24:39,580
communicate the message of collaborative

00:24:38,350 --> 00:24:41,049
element what are the benefits that can

00:24:39,580 --> 00:24:42,700
be gained from it why is it valuable why

00:24:41,049 --> 00:24:44,770
is it worthwhile why is it something we

00:24:42,700 --> 00:24:46,450
should be trying to do they also try to

00:24:44,770 --> 00:24:47,800
foster a bit of a community get people

00:24:46,450 --> 00:24:50,020
talking about working together get

00:24:47,800 --> 00:24:51,580
sharing stories things like that one of

00:24:50,020 --> 00:24:53,470
the things they've done is set up what

00:24:51,580 --> 00:24:55,300
we call lean coffee sessions these are

00:24:53,470 --> 00:24:57,640
basically informal meetings between

00:24:55,300 --> 00:24:59,590
developers on different teams that are

00:24:57,640 --> 00:25:01,450
happens for to spontaneously at our

00:24:59,590 --> 00:25:03,070
offices around the globe and the point

00:25:01,450 --> 00:25:04,240
is just to get together talk about what

00:25:03,070 --> 00:25:05,410
you're working on talked about your

00:25:04,240 --> 00:25:07,600
challenges what you're trying to figure

00:25:05,410 --> 00:25:09,250
out talk about the things you've learned

00:25:07,600 --> 00:25:10,510
lately or the new tools you found or a

00:25:09,250 --> 00:25:12,250
great new framework you're working with

00:25:10,510 --> 00:25:13,720
or something like that they say just a

00:25:12,250 --> 00:25:16,510
way to get people more familiar with

00:25:13,720 --> 00:25:18,190
some of the challenges and issues facing

00:25:16,510 --> 00:25:19,300
the development teams that may be you

00:25:18,190 --> 00:25:21,820
know right next door to them but didn't

00:25:19,300 --> 00:25:23,260
ever talk to before and finally we've

00:25:21,820 --> 00:25:24,610
done some hackathon and Roadshow days in

00:25:23,260 --> 00:25:26,650
conjunction with github where we've gone

00:25:24,610 --> 00:25:28,330
to our corporate offices put on the

00:25:26,650 --> 00:25:30,130
series of talks and demonstrations of

00:25:28,330 --> 00:25:31,360
github and what it can do and then even

00:25:30,130 --> 00:25:33,190
got our engineers involved in a

00:25:31,360 --> 00:25:34,750
hackathon to get their hands on with

00:25:33,190 --> 00:25:36,370
github and learn how to actually take

00:25:34,750 --> 00:25:40,180
advantage of some of its more advantage

00:25:36,370 --> 00:25:41,290
more important features finally we also

00:25:40,180 --> 00:25:42,520
want to make sure that we celebrate our

00:25:41,290 --> 00:25:44,650
successes with collaborative development

00:25:42,520 --> 00:25:46,120
this is a big shift in development for

00:25:44,650 --> 00:25:47,260
us it's something we are developers

00:25:46,120 --> 00:25:48,340
weren't super familiar with before we

00:25:47,260 --> 00:25:49,510
want to make sure that people know when

00:25:48,340 --> 00:25:50,890
it's gone well know when it's been a

00:25:49,510 --> 00:25:52,540
good idea and when things have worked

00:25:50,890 --> 00:25:54,400
out for them so write some blog posts

00:25:52,540 --> 00:25:56,200
about it if you've found someone else's

00:25:54,400 --> 00:25:57,610
project and you used it and it worked

00:25:56,200 --> 00:25:59,080
really well make sure people know about

00:25:57,610 --> 00:26:00,520
that make sure people know that you work

00:25:59,080 --> 00:26:01,990
together with them and that it really

00:26:00,520 --> 00:26:03,940
save you time and effort and that sort

00:26:01,990 --> 00:26:05,020
of thing it's also great to bring these

00:26:03,940 --> 00:26:06,490
things up in product reviews of

00:26:05,020 --> 00:26:07,660
leadership leadership gloves to hear

00:26:06,490 --> 00:26:09,460
when things have gone well and you've

00:26:07,660 --> 00:26:11,500
done good things so make sure they know

00:26:09,460 --> 00:26:13,630
about it tell people that I worked with

00:26:11,500 --> 00:26:15,220
this developer in you know the other

00:26:13,630 --> 00:26:16,900
side of the continent and we came up

00:26:15,220 --> 00:26:18,370
with this project together and you know

00:26:16,900 --> 00:26:19,900
we both had a need and we both made it

00:26:18,370 --> 00:26:21,250
happen make sure that people know that

00:26:19,900 --> 00:26:24,610
you've had that kind of success with

00:26:21,250 --> 00:26:26,050
collaboration and we also want to make

00:26:24,610 --> 00:26:27,580
sure that teams don't just have plain

00:26:26,050 --> 00:26:29,470
roadblocks blocking them for trying to

00:26:27,580 --> 00:26:30,970
work in a collaborative model for

00:26:29,470 --> 00:26:33,400
starters it seems really simple but use

00:26:30,970 --> 00:26:35,410
a public repo a lot of our developers

00:26:33,400 --> 00:26:36,820
were pretty used to sort of owning their

00:26:35,410 --> 00:26:38,500
space and they tended to work in a

00:26:36,820 --> 00:26:40,120
private repo they tended to do things on

00:26:38,500 --> 00:26:40,690
their own in you know out of the eyes of

00:26:40,120 --> 00:26:42,940
everyone else

00:26:40,690 --> 00:26:44,710
a big change that is just merely

00:26:42,940 --> 00:26:45,970
flipping a repo to public and being ok

00:26:44,710 --> 00:26:47,490
with everyone else seeing your code

00:26:45,970 --> 00:26:49,480
everyone else seeing what you're doing

00:26:47,490 --> 00:26:51,940
another part of that is to get used to

00:26:49,480 --> 00:26:53,890
working with a fork based reflow using a

00:26:51,940 --> 00:26:55,570
fork on a public repo means that you can

00:26:53,890 --> 00:26:56,740
commit pull requests back to that source

00:26:55,570 --> 00:26:59,050
repo without even needing write

00:26:56,740 --> 00:27:00,670
permissions on it that's a common

00:26:59,050 --> 00:27:01,360
paradigm in the open-source world on

00:27:00,670 --> 00:27:02,410
github.com

00:27:01,360 --> 00:27:04,809
something our developers haven't been

00:27:02,410 --> 00:27:06,100
very familiar with so far it's also

00:27:04,809 --> 00:27:08,110
important that our developers are open

00:27:06,100 --> 00:27:10,600
outside ideas in the past they've really

00:27:08,110 --> 00:27:12,220
owned their systems themselves they felt

00:27:10,600 --> 00:27:14,140
like it was their thing to decide how it

00:27:12,220 --> 00:27:16,150
was used ick Tait what people did with

00:27:14,140 --> 00:27:17,860
it but that's something to really get

00:27:16,150 --> 00:27:19,570
away from in the collaborative mindset

00:27:17,860 --> 00:27:22,030
it's really important to avoid an

00:27:19,570 --> 00:27:23,559
ownership mindset if you're maintaining

00:27:22,030 --> 00:27:25,120
a repo you're really more of a guide of

00:27:23,559 --> 00:27:26,170
that repo you're there to make sure that

00:27:25,120 --> 00:27:27,760
it moves in the right direction that

00:27:26,170 --> 00:27:29,530
people are making worthwhile changes to

00:27:27,760 --> 00:27:31,090
it but you don't really control and

00:27:29,530 --> 00:27:31,990
dictate exactly how people take

00:27:31,090 --> 00:27:33,309
advantage of it

00:27:31,990 --> 00:27:35,440
it's good to kind of think yourself more

00:27:33,309 --> 00:27:37,179
like a park ranger if you're going to a

00:27:35,440 --> 00:27:38,650
national park the Ranger doesn't own the

00:27:37,179 --> 00:27:40,600
park he doesn't tell everyone exactly

00:27:38,650 --> 00:27:41,950
what to do there instead he's just there

00:27:40,600 --> 00:27:43,419
to make sure that you take advantage of

00:27:41,950 --> 00:27:45,370
the features of the park in a safe way

00:27:43,419 --> 00:27:48,100
that he keeps the place tidy that keeps

00:27:45,370 --> 00:27:49,660
it ready for the next person and finally

00:27:48,100 --> 00:27:50,830
make sure that our developers review

00:27:49,660 --> 00:27:52,360
their pull requests promptly there's

00:27:50,830 --> 00:27:54,100
nothing worse than finding a repo out

00:27:52,360 --> 00:27:55,660
there that can really help you it needs

00:27:54,100 --> 00:27:57,160
a to line changes to make it work with

00:27:55,660 --> 00:27:58,690
your environment you submit a pull

00:27:57,160 --> 00:28:00,580
request it's really simple and then you

00:27:58,690 --> 00:28:02,049
hear nothing two weeks go by nobody's

00:28:00,580 --> 00:28:03,309
gotten back to you it's just the worst

00:28:02,049 --> 00:28:04,990
thing you really want to use their code

00:28:03,309 --> 00:28:06,700
you don't want to just completely fork

00:28:04,990 --> 00:28:07,750
the thing yourself but nobody will get

00:28:06,700 --> 00:28:10,270
back to you about one and never merge

00:28:07,750 --> 00:28:11,440
your pull request so pay attention to

00:28:10,270 --> 00:28:12,820
your pull request provide honest

00:28:11,440 --> 00:28:14,340
unbiased helpful feedback and do it

00:28:12,820 --> 00:28:16,600
quickly

00:28:14,340 --> 00:28:17,530
so how do we measure success how do we

00:28:16,600 --> 00:28:19,299
know if this project have been

00:28:17,530 --> 00:28:20,890
successful well for starters we're using

00:28:19,299 --> 00:28:22,179
something called Autodesk Hubble Hubble

00:28:20,890 --> 00:28:23,950
was demonstrated here at universe a

00:28:22,179 --> 00:28:25,090
couple years ago it's essentially an

00:28:23,950 --> 00:28:26,950
application that crawls your github

00:28:25,090 --> 00:28:29,530
instance and it generates statistics of

00:28:26,950 --> 00:28:30,700
your development activity so it'll

00:28:29,530 --> 00:28:32,559
create some reports on all of your

00:28:30,700 --> 00:28:34,780
practices and things like contributions

00:28:32,559 --> 00:28:36,880
to orgs total contributors pull request

00:28:34,780 --> 00:28:38,350
usage fork usage system activity there's

00:28:36,880 --> 00:28:40,179
tons of different statistics that it has

00:28:38,350 --> 00:28:41,860
it's a free application it's on github

00:28:40,179 --> 00:28:43,090
you can go download yourself and turn it

00:28:41,860 --> 00:28:45,429
loose on your own github and you might

00:28:43,090 --> 00:28:47,260
find something out specifically we're

00:28:45,429 --> 00:28:49,150
really interested in the collaboration

00:28:47,260 --> 00:28:50,500
graph so it looks like just a whole

00:28:49,150 --> 00:28:52,450
bunch of colors bunch of lines

00:28:50,500 --> 00:28:54,460
everything but it's actually showing

00:28:52,450 --> 00:28:56,380
when our developers are contributing to

00:28:54,460 --> 00:28:58,660
organizations outside of the sort of

00:28:56,380 --> 00:29:00,309
home org that they normally live in so

00:28:58,660 --> 00:29:01,720
as we see more collaboration we should

00:29:00,309 --> 00:29:02,799
hopefully start seeing more and more of

00:29:01,720 --> 00:29:05,260
these lines connecting different

00:29:02,799 --> 00:29:06,669
segments together as it stands right now

00:29:05,260 --> 00:29:09,190
this is the the actual graph from

00:29:06,669 --> 00:29:11,140
Expedia group github at the moment and

00:29:09,190 --> 00:29:13,240
if we zoom in a little bit on one org we

00:29:11,140 --> 00:29:14,230
can see that org one here has seen a

00:29:13,240 --> 00:29:15,049
little bit of collaboration they've

00:29:14,230 --> 00:29:17,029
contributed to

00:29:15,049 --> 00:29:19,009
our organizations and they've received

00:29:17,029 --> 00:29:20,419
the contribution of another one so it's

00:29:19,009 --> 00:29:24,350
a good start and we hope to see more of

00:29:20,419 --> 00:29:25,610
that in the future so what kind of

00:29:24,350 --> 00:29:28,909
lessons have you learned from doing this

00:29:25,610 --> 00:29:30,230
whole thing well for starters avoid some

00:29:28,909 --> 00:29:32,419
things to avoid avoid overly rigid

00:29:30,230 --> 00:29:34,279
thinking it's really easy to get fixated

00:29:32,419 --> 00:29:36,080
on trying to do things perfectly trying

00:29:34,279 --> 00:29:37,999
to come up with the absolute best of

00:29:36,080 --> 00:29:39,830
everything and actually doing things the

00:29:37,999 --> 00:29:41,899
perfect way all the time and that's just

00:29:39,830 --> 00:29:44,230
unrealistic you really can't expect

00:29:41,899 --> 00:29:46,039
everyone to be able to work the same way

00:29:44,230 --> 00:29:47,269
teams have different needs different

00:29:46,039 --> 00:29:48,499
requirements different skill levels

00:29:47,269 --> 00:29:49,999
you're gonna have teams that are

00:29:48,499 --> 00:29:52,730
technically advanced and teams that are

00:29:49,999 --> 00:29:54,109
a bit more you know behind the times and

00:29:52,730 --> 00:29:55,399
you still need to support all of them

00:29:54,109 --> 00:29:57,080
your system still needs to support all

00:29:55,399 --> 00:29:59,029
of them so it's important that you be

00:29:57,080 --> 00:30:00,799
flexible be willing to adapt to what

00:29:59,029 --> 00:30:02,359
your team's need and don't get caught up

00:30:00,799 --> 00:30:04,999
on trying to be the absolute latest and

00:30:02,359 --> 00:30:06,980
greatest all the time so I can make sure

00:30:04,999 --> 00:30:08,509
that you listen to your users your users

00:30:06,980 --> 00:30:09,950
are the ones that are having to deal

00:30:08,509 --> 00:30:11,059
with what you've given them so pay

00:30:09,950 --> 00:30:13,190
attention to their sources of friction

00:30:11,059 --> 00:30:14,359
what are their unique challenges what

00:30:13,190 --> 00:30:15,799
are the things that they're trying to do

00:30:14,359 --> 00:30:16,909
that they can't do right now or what are

00:30:15,799 --> 00:30:19,309
the things that are hard for them to do

00:30:16,909 --> 00:30:21,289
right now listen to them and see if you

00:30:19,309 --> 00:30:23,029
can do something to to make their lives

00:30:21,289 --> 00:30:24,679
better to make things easier for them it

00:30:23,029 --> 00:30:26,960
might just be that a small tweak to your

00:30:24,679 --> 00:30:28,850
your design will make things so much

00:30:26,960 --> 00:30:30,109
easier for them or it could even be that

00:30:28,850 --> 00:30:31,789
they just aren't aware of a certain

00:30:30,109 --> 00:30:33,350
feature in github and if you explain it

00:30:31,789 --> 00:30:35,720
to them and how it works have a

00:30:33,350 --> 00:30:36,710
face-to-face conversation you'll be able

00:30:35,720 --> 00:30:38,419
to get them started on the right foot

00:30:36,710 --> 00:30:40,369
and let me feel much more confident and

00:30:38,419 --> 00:30:42,399
comfortable with migrating to new system

00:30:40,369 --> 00:30:44,239
and having to move all their code over

00:30:42,399 --> 00:30:45,859
basically ignoring your users you could

00:30:44,239 --> 00:30:46,850
miss out on some really big wins Noakes

00:30:45,859 --> 00:30:48,409
has be some of the best things to

00:30:46,850 --> 00:30:50,690
celebrate is if you find a problem

00:30:48,409 --> 00:30:53,059
they've had solve it for them and then

00:30:50,690 --> 00:30:54,289
they're more efficient as a result and

00:30:53,059 --> 00:30:56,929
finally you don't want to ignore reality

00:30:54,289 --> 00:30:59,090
we all have technical debt it's a thing

00:30:56,929 --> 00:31:01,639
it exists we don't like it but we all

00:30:59,090 --> 00:31:03,049
have to deal with it as much as we'd

00:31:01,639 --> 00:31:04,970
like all of our developers to be writing

00:31:03,049 --> 00:31:06,440
micro services that are containerize and

00:31:04,970 --> 00:31:08,480
auto scaled and all that sort of stuff

00:31:06,440 --> 00:31:10,460
it just doesn't exist everybody isn't

00:31:08,480 --> 00:31:13,429
ready for that and it's something that

00:31:10,460 --> 00:31:14,929
you just can't expect so pay attention

00:31:13,429 --> 00:31:15,919
your technical debt make sure that

00:31:14,929 --> 00:31:17,539
you've addressed it and that you're

00:31:15,919 --> 00:31:19,519
supporting it and that your system isn't

00:31:17,539 --> 00:31:21,200
leaving behind some of the legacy teams

00:31:19,519 --> 00:31:24,440
that are still maintaining code that is

00:31:21,200 --> 00:31:26,690
critical to your business now that said

00:31:24,440 --> 00:31:28,300
you also don't want to try to cover 100%

00:31:26,690 --> 00:31:29,890
of every use case you're going

00:31:28,300 --> 00:31:31,720
have those teams out there that have

00:31:29,890 --> 00:31:33,400
just never had a good reason to change

00:31:31,720 --> 00:31:35,020
their practices they're still using some

00:31:33,400 --> 00:31:36,880
old waterfall deployment process they're

00:31:35,020 --> 00:31:38,320
still eating some awful batch file

00:31:36,880 --> 00:31:39,970
script deployment system or something

00:31:38,320 --> 00:31:42,600
like that they have no way to pass

00:31:39,970 --> 00:31:44,470
ooofff tokens to github in a secure way

00:31:42,600 --> 00:31:45,670
those are the teams that you're going to

00:31:44,470 --> 00:31:46,930
want to really talk to because you

00:31:45,670 --> 00:31:48,580
probably don't want to compromise your

00:31:46,930 --> 00:31:51,490
design to support what they're trying to

00:31:48,580 --> 00:31:52,690
do the migration project you're trying

00:31:51,490 --> 00:31:54,520
to get started could be the thing that

00:31:52,690 --> 00:31:56,080
finally pushes them to make some changes

00:31:54,520 --> 00:31:58,090
maybe they finally need something that

00:31:56,080 --> 00:31:59,560
they can't physically do anymore to get

00:31:58,090 --> 00:32:03,610
them to move on and join the modern

00:31:59,560 --> 00:32:04,960
world so some key takeaways from this

00:32:03,610 --> 00:32:06,970
whole thing that we can work on well for

00:32:04,960 --> 00:32:09,220
starters these migrations take time

00:32:06,970 --> 00:32:10,660
we've been going at this for almost two

00:32:09,220 --> 00:32:13,240
years now it's probably going to be

00:32:10,660 --> 00:32:15,000
another year maybe even two it's a long

00:32:13,240 --> 00:32:18,520
project there's a lot of stuff going on

00:32:15,000 --> 00:32:20,050
so be ready for that so as part of that

00:32:18,520 --> 00:32:21,580
you want to set reasonable deadlines for

00:32:20,050 --> 00:32:22,030
your users but you want to hold them to

00:32:21,580 --> 00:32:23,590
it

00:32:22,030 --> 00:32:25,690
the worst thing is when you try to say

00:32:23,590 --> 00:32:27,970
okay let's get this done by May 1st and

00:32:25,690 --> 00:32:29,530
then April 30th comes around they go oh

00:32:27,970 --> 00:32:31,510
yeah we didn't get started on that

00:32:29,530 --> 00:32:32,950
you're never gonna get done if you let

00:32:31,510 --> 00:32:34,180
that stuff happen too often it's

00:32:32,950 --> 00:32:35,860
important that you get teams involved

00:32:34,180 --> 00:32:37,570
get them the information they need make

00:32:35,860 --> 00:32:38,710
sure they can move forward and then hold

00:32:37,570 --> 00:32:41,710
them to a deadline to make sure they

00:32:38,710 --> 00:32:43,330
actually get it done also automate and

00:32:41,710 --> 00:32:45,040
self-serve as much as possible the more

00:32:43,330 --> 00:32:46,630
you can get teams doing the work for

00:32:45,040 --> 00:32:49,270
Migration themselves the less you have

00:32:46,630 --> 00:32:50,950
to do so put your legwork in up front

00:32:49,270 --> 00:32:52,120
get your migration tools in place get

00:32:50,950 --> 00:32:54,160
your automation place get your

00:32:52,120 --> 00:32:55,420
documentation in place and you let teams

00:32:54,160 --> 00:32:56,740
be able just do it on their own things

00:32:55,420 --> 00:32:58,900
just happen while you're sleeping it's

00:32:56,740 --> 00:33:00,550
great to leave work one day and come in

00:32:58,900 --> 00:33:01,780
the next and find the 200 repos got

00:33:00,550 --> 00:33:05,950
moved into github overnight and you

00:33:01,780 --> 00:33:07,330
didn't lift a finger also find ways to

00:33:05,950 --> 00:33:09,490
encourage passion and excitement with

00:33:07,330 --> 00:33:11,290
your project new systems can be cool

00:33:09,490 --> 00:33:12,940
they can be exciting like getting

00:33:11,290 --> 00:33:14,500
frustrated and bogged down with some old

00:33:12,940 --> 00:33:16,030
system that has horrible network

00:33:14,500 --> 00:33:18,040
connectivity or poor performance or

00:33:16,030 --> 00:33:19,510
something like that when they find a way

00:33:18,040 --> 00:33:20,770
to get your users excited that they're

00:33:19,510 --> 00:33:22,150
gonna have something new that can do

00:33:20,770 --> 00:33:23,470
cool new things you know if you come to

00:33:22,150 --> 00:33:25,240
universe and you see some great features

00:33:23,470 --> 00:33:27,370
added to github communicate that to your

00:33:25,240 --> 00:33:28,450
users make them realize that hey when we

00:33:27,370 --> 00:33:29,830
get onto github you're gonna be able to

00:33:28,450 --> 00:33:31,660
do this this and this and you can't do

00:33:29,830 --> 00:33:33,370
that right now anything you can do to

00:33:31,660 --> 00:33:34,600
get users to get excited about the

00:33:33,370 --> 00:33:35,860
project they're doing get them talking

00:33:34,600 --> 00:33:37,060
to their co-workers about how much

00:33:35,860 --> 00:33:38,680
better it's going to be when they move

00:33:37,060 --> 00:33:40,030
to their system that's nothing but a

00:33:38,680 --> 00:33:41,470
good thing it just tells people get on

00:33:40,030 --> 00:33:42,970
the same page as you and be willing to

00:33:41,470 --> 00:33:44,380
forward and make the changes that are

00:33:42,970 --> 00:33:47,640
necessary to make a project like this a

00:33:44,380 --> 00:33:49,900
success keep management up-to-date with

00:33:47,640 --> 00:33:51,190
successes the executive that made the

00:33:49,900 --> 00:33:52,809
decision to make this all happen in the

00:33:51,190 --> 00:33:54,549
first place he's gonna love it when you

00:33:52,809 --> 00:33:55,780
get to go to and say hey that big

00:33:54,549 --> 00:33:58,000
decision you made that thing that you

00:33:55,780 --> 00:33:59,409
took a risk on it's paid off we've done

00:33:58,000 --> 00:34:00,850
all of this we've made all these things

00:33:59,409 --> 00:34:02,710
happen everybody is this much more

00:34:00,850 --> 00:34:04,150
productive we've been able to deploy

00:34:02,710 --> 00:34:05,770
this much faster you know whatever it is

00:34:04,150 --> 00:34:07,179
whatever you've got to communicate how

00:34:05,770 --> 00:34:08,200
great things have been make sure they

00:34:07,179 --> 00:34:09,310
know about it they love to hear when

00:34:08,200 --> 00:34:11,830
their decisions have led to good things

00:34:09,310 --> 00:34:13,810
that said make sure they know about your

00:34:11,830 --> 00:34:14,980
challenges to these kinds of projects

00:34:13,810 --> 00:34:16,540
always come with conditions there's

00:34:14,980 --> 00:34:18,340
always things that you're you're trying

00:34:16,540 --> 00:34:20,109
to figure out that you're still working

00:34:18,340 --> 00:34:21,609
through that aren't ideal right at the

00:34:20,109 --> 00:34:22,899
moment make sure they know that you're

00:34:21,609 --> 00:34:24,399
you're working on them so they know that

00:34:22,899 --> 00:34:26,409
you're making progress but that you have

00:34:24,399 --> 00:34:27,849
a path forward and you have a process to

00:34:26,409 --> 00:34:30,820
make sure that you solve the problem and

00:34:27,849 --> 00:34:33,730
that you can move on and finally keep

00:34:30,820 --> 00:34:35,409
your head up these projects are huge it

00:34:33,730 --> 00:34:36,310
there's so many teams involved we've

00:34:35,409 --> 00:34:37,899
delivered have been talking to people

00:34:36,310 --> 00:34:39,669
across the entirety of expedia group in

00:34:37,899 --> 00:34:41,649
every office we have trying to make sure

00:34:39,669 --> 00:34:43,000
that we can get them on board and that

00:34:41,649 --> 00:34:44,740
they're able to move the code over and

00:34:43,000 --> 00:34:46,480
that every all of their deployment

00:34:44,740 --> 00:34:48,220
systems and integration system build

00:34:46,480 --> 00:34:49,510
systems are all working correctly it can

00:34:48,220 --> 00:34:51,010
be really easy to kind of get bogged

00:34:49,510 --> 00:34:52,149
down and start to worry about how were

00:34:51,010 --> 00:34:53,230
ever going to accomplish this for

00:34:52,149 --> 00:34:56,560
everyone how everybody's ever going to

00:34:53,230 --> 00:34:58,150
be happy it's a long project but keep

00:34:56,560 --> 00:34:59,589
moving forward pay attention to what

00:34:58,150 --> 00:35:01,450
your users want and solve the problems

00:34:59,589 --> 00:35:03,550
talk to them and stay on the same page

00:35:01,450 --> 00:35:05,050
as them and you'll find that you'll just

00:35:03,550 --> 00:35:06,250
keep moving on and that graph I showed

00:35:05,050 --> 00:35:09,070
you earlier we'll just keep creeping up

00:35:06,250 --> 00:35:10,960
things just keep moving forward so be

00:35:09,070 --> 00:35:12,580
confident know what you're doing and

00:35:10,960 --> 00:35:15,400
take care of things for users and

00:35:12,580 --> 00:35:17,500
everything will turn out fine so that's

00:35:15,400 --> 00:35:18,700
all I have for today if you have any

00:35:17,500 --> 00:35:19,990
questions or comments feel free to come

00:35:18,700 --> 00:35:21,310
up afterwards I'd love to talk to you

00:35:19,990 --> 00:35:22,690
and if not you can shoot me an email

00:35:21,310 --> 00:35:24,590
something like that that's all I have

00:35:22,690 --> 00:35:26,620
thanks

00:35:24,590 --> 00:35:57,880
[Applause]

00:35:26,620 --> 00:35:57,880

YouTube URL: https://www.youtube.com/watch?v=DDaJHR0DngE


