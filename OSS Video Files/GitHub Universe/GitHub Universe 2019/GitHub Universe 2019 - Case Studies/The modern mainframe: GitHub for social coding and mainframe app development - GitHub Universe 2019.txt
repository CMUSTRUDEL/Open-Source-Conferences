Title: The modern mainframe: GitHub for social coding and mainframe app development - GitHub Universe 2019
Publication date: 2019-12-14
Playlist: GitHub Universe 2019 - Case Studies
Description: 
	Rumors of the mainframe's demise have been greatly exaggerated. In fact, mainframe workloads are growing in many Enterprises. Until recently mainframe tooling and development processes have been static - stuck in earlier eras. Non-mainframe developers favor Git and GitHub for their decentralized nature, collaboration, and workflow flexibility. As seasoned mainframe programmers leave the workforce many developers are being hired to enhance, modernize, and manage mainframe applications. This makes the need to provide familiar tools and processes more important than ever.

This session covers how businesses can modernize their mainframe development experience with tooling including Git, GitHub, and Jenkins, making it easier for a new generation of developers to support growing mainframe workloads.

About GitHub Universe:
GitHub Universe is a two-day conference dedicated to the creativity and curiosity of the largest software community in the world. Sessions cover topics from team culture to open source software across industries and technologies.

For more information on GitHub Universe, check the website:
https://githubuniverse.com
Captions: 
	00:00:00,680 --> 00:00:18,929
[Music]

00:00:20,039 --> 00:00:24,220
hey good morning everybody welcome

00:00:21,789 --> 00:00:26,500
today's talk on the modern mainframe

00:00:24,220 --> 00:00:29,829
which is using github for social coding

00:00:26,500 --> 00:00:31,649
on mainframe code I'm Phil Halloran I'm

00:00:29,829 --> 00:00:33,760
a solutions engineer here at github ah

00:00:31,649 --> 00:00:36,309
good morning on my name is Venkat

00:00:33,760 --> 00:00:38,500
monopod repository I'm the architect at

00:00:36,309 --> 00:00:42,040
Broadcom and I am responsible for the

00:00:38,500 --> 00:00:43,390
enterprise devops suite in Broadcom so

00:00:42,040 --> 00:00:44,920
as we're all here talking about modern

00:00:43,390 --> 00:00:46,870
application development it makes a lot

00:00:44,920 --> 00:00:49,210
of sense to talk about mainframe

00:00:46,870 --> 00:00:51,820
computers because in the words of the

00:00:49,210 --> 00:00:54,070
mainframe loosely adapted from elsewhere

00:00:51,820 --> 00:00:56,710
rumors of its demise have been greatly

00:00:54,070 --> 00:00:59,079
exaggerated and so what do we exactly

00:00:56,710 --> 00:01:00,879
mean by that well when some people think

00:00:59,079 --> 00:01:01,989
mainframe they're thinking of the 1950s

00:01:00,879 --> 00:01:04,360
era computers that would take up an

00:01:01,989 --> 00:01:06,009
entire room or two but the the mainframe

00:01:04,360 --> 00:01:08,259
heritages continued to evolve over time

00:01:06,009 --> 00:01:10,170
as we continue to move in the 1980s and

00:01:08,259 --> 00:01:12,190
then today with mainframes taking up a

00:01:10,170 --> 00:01:13,840
standard Z system they're taking up a

00:01:12,190 --> 00:01:15,820
rack or two in your data center and

00:01:13,840 --> 00:01:19,420
providing a lot of capability that

00:01:15,820 --> 00:01:21,460
businesses depend upon each day and you

00:01:19,420 --> 00:01:23,409
know there's always hype in any sort of

00:01:21,460 --> 00:01:25,210
new technology era and that technology

00:01:23,409 --> 00:01:27,340
is really that this new deployment

00:01:25,210 --> 00:01:28,960
architecture and this new pattern is

00:01:27,340 --> 00:01:31,150
gonna completely displace the prior

00:01:28,960 --> 00:01:34,049
pattern and so we've seen that in

00:01:31,150 --> 00:01:36,340
history over time at first it was that

00:01:34,049 --> 00:01:38,350
distributed servers and then desktops

00:01:36,340 --> 00:01:39,970
were going to replace the mainframe but

00:01:38,350 --> 00:01:41,290
they didn't completely do that and then

00:01:39,970 --> 00:01:43,570
containers were supposed to kill

00:01:41,290 --> 00:01:45,280
distributed servers that hasn't happened

00:01:43,570 --> 00:01:47,680
either and then of course server lists

00:01:45,280 --> 00:01:49,810
have came around to kill it all but the

00:01:47,680 --> 00:01:52,049
reality is that each new architecture is

00:01:49,810 --> 00:01:54,729
an opportunity to optimize for the best

00:01:52,049 --> 00:01:58,329
purposes of that deployment pattern and

00:01:54,729 --> 00:02:00,130
so for mainframes so so I guess you know

00:01:58,329 --> 00:02:02,770
the obvious question why mainframe and

00:02:00,130 --> 00:02:05,380
I'd like to think of it as why not

00:02:02,770 --> 00:02:07,570
mainframe right it's been there for ages

00:02:05,380 --> 00:02:09,579
and it you know the qualities of surface

00:02:07,570 --> 00:02:11,140
that that mainframe actually provides in

00:02:09,579 --> 00:02:13,690
terms of the throughput scalability

00:02:11,140 --> 00:02:19,859
security reliability that's unmatched

00:02:13,690 --> 00:02:22,600
right and then the key thing here is

00:02:19,859 --> 00:02:26,519
mainframe continues to serve as the

00:02:22,600 --> 00:02:29,620
backbone for you know retail airline

00:02:26,519 --> 00:02:31,930
finance insurance government industries

00:02:29,620 --> 00:02:32,590
today so there are some statistics in

00:02:31,930 --> 00:02:35,110
here that

00:02:32,590 --> 00:02:37,030
that actually proved the relevance of

00:02:35,110 --> 00:02:41,050
mainframe and the importance of

00:02:37,030 --> 00:02:43,989
mainframe in the current industry so any

00:02:41,050 --> 00:02:46,540
of you who actually used a credit card

00:02:43,989 --> 00:02:48,849
today yesterday whenever right the

00:02:46,540 --> 00:02:50,410
chance is that your credit that

00:02:48,849 --> 00:02:51,760
particular transaction was actually

00:02:50,410 --> 00:02:54,730
touching your mainframe on the back end

00:02:51,760 --> 00:03:00,489
that's how prevalent it is out there and

00:02:54,730 --> 00:03:01,840
yes it still exists but that presence in

00:03:00,489 --> 00:03:04,269
that technology presents a number of

00:03:01,840 --> 00:03:05,739
challenges for today because a lot of

00:03:04,269 --> 00:03:07,600
those patterns that are around have been

00:03:05,739 --> 00:03:09,220
in place for a long time and so there

00:03:07,600 --> 00:03:11,200
are really you know the standard DevOps

00:03:09,220 --> 00:03:12,519
challenges that exist for any other

00:03:11,200 --> 00:03:14,650
pattern or any other deployment

00:03:12,519 --> 00:03:16,690
environment are present even more so on

00:03:14,650 --> 00:03:18,880
the mainframe they are challenges around

00:03:16,690 --> 00:03:20,799
the processes that are involved in

00:03:18,880 --> 00:03:22,660
actually getting code from the point

00:03:20,799 --> 00:03:24,700
that it's written through testing and

00:03:22,660 --> 00:03:26,380
into production the technological

00:03:24,700 --> 00:03:28,510
challenges of getting it through that

00:03:26,380 --> 00:03:30,040
process and then of course the human the

00:03:28,510 --> 00:03:32,140
cultural the people challenges of

00:03:30,040 --> 00:03:34,989
adapting to new workflows and new

00:03:32,140 --> 00:03:36,640
technologies so as we start looking at

00:03:34,989 --> 00:03:38,890
some of those challenges one of the more

00:03:36,640 --> 00:03:41,590
obvious ones is a people challenge and

00:03:38,890 --> 00:03:44,500
that is that most mainframe developers

00:03:41,590 --> 00:03:46,209
out there are seasoned developers but

00:03:44,500 --> 00:03:48,549
that code isn't going anywhere and there

00:03:46,209 --> 00:03:50,380
need to be people to maintain that so on

00:03:48,549 --> 00:03:51,940
average right now about 7% of mainframe

00:03:50,380 --> 00:03:53,980
developers that are actively maintaining

00:03:51,940 --> 00:03:57,459
and producing COBOL are under the age of

00:03:53,980 --> 00:03:59,530
30 but almost 30% are over 60 and

00:03:57,459 --> 00:04:01,180
approaching retirement and this is going

00:03:59,530 --> 00:04:04,000
to create a pretty significant skills

00:04:01,180 --> 00:04:05,799
gap in shortage as the knowledge and all

00:04:04,000 --> 00:04:07,120
the capability that is currently

00:04:05,799 --> 00:04:09,000
maintaining those applications and

00:04:07,120 --> 00:04:11,889
workloads ends up leaving the workforce

00:04:09,000 --> 00:04:14,380
leaving a large hole to be filled in

00:04:11,889 --> 00:04:17,019
their place and then there's the process

00:04:14,380 --> 00:04:18,940
challenge then cotton doll of those core

00:04:17,019 --> 00:04:20,380
business systems that we rely on day to

00:04:18,940 --> 00:04:22,780
day for credit card transaction

00:04:20,380 --> 00:04:25,419
processing Airport airline ticketing all

00:04:22,780 --> 00:04:27,370
these other systems and a lot of teams

00:04:25,419 --> 00:04:29,169
are building things on top of those core

00:04:27,370 --> 00:04:31,330
business functions whether that be a

00:04:29,169 --> 00:04:33,160
mobile application that allows you to

00:04:31,330 --> 00:04:34,870
perform your financial transactions or

00:04:33,160 --> 00:04:35,860
your Airlines mobile application that

00:04:34,870 --> 00:04:37,900
allows you to interact with the

00:04:35,860 --> 00:04:40,750
ticketing system they're all moving at

00:04:37,900 --> 00:04:43,270
the pace of agile rapid workflows and

00:04:40,750 --> 00:04:45,220
are often dependent upon changes to that

00:04:43,270 --> 00:04:46,510
underlying mainframe system that's stuck

00:04:45,220 --> 00:04:49,180
in a very legacy

00:04:46,510 --> 00:04:50,740
waterfall process where things have to

00:04:49,180 --> 00:04:52,480
be planned out weeks to months ahead of

00:04:50,740 --> 00:04:54,430
time before they even bother to get into

00:04:52,480 --> 00:04:56,140
production tying up the ability to

00:04:54,430 --> 00:04:59,470
deploy that new application that new

00:04:56,140 --> 00:05:01,870
capability out to the customer base and

00:04:59,470 --> 00:05:04,390
then you know last but not least is the

00:05:01,870 --> 00:05:05,800
tools right so how many people are

00:05:04,390 --> 00:05:09,820
actually familiar with those those

00:05:05,800 --> 00:05:13,870
screen caps up there okay these are the

00:05:09,820 --> 00:05:17,050
traditional ispf green screens and is

00:05:13,870 --> 00:05:21,850
everybody sitting believe it not that is

00:05:17,050 --> 00:05:24,130
the primary IDE today in 2019 when it

00:05:21,850 --> 00:05:26,710
comes to mentoring organizations and I'm

00:05:24,130 --> 00:05:28,870
not kidding okay so that's the state of

00:05:26,710 --> 00:05:31,240
tools now I'm not saying this is a good

00:05:28,870 --> 00:05:33,760
or a bad thing that's how the the

00:05:31,240 --> 00:05:36,130
mainframe industry has evolved over a

00:05:33,760 --> 00:05:37,690
period of time right because of the

00:05:36,130 --> 00:05:40,300
heritage and the legacy that's been

00:05:37,690 --> 00:05:42,580
there over the last 50 60 years you know

00:05:40,300 --> 00:05:43,900
the tools that people have been using at

00:05:42,580 --> 00:05:46,000
that particular time which were great

00:05:43,900 --> 00:05:48,790
you know they built up the muscle memory

00:05:46,000 --> 00:05:50,770
right and they are really productive and

00:05:48,790 --> 00:05:53,350
it's amazing how productive they are but

00:05:50,770 --> 00:05:57,490
that's the state of the the the current

00:05:53,350 --> 00:06:00,130
affairs and then you know so in order to

00:05:57,490 --> 00:06:04,840
modernize some of that stuff Eclipse

00:06:00,130 --> 00:06:06,760
tools were born and you know they took a

00:06:04,840 --> 00:06:09,760
stab at modernizing those green screen

00:06:06,760 --> 00:06:12,010
interfaces a lot of vendors have

00:06:09,760 --> 00:06:14,410
actually provided the plugins to and

00:06:12,010 --> 00:06:16,750
then the child challenge always existed

00:06:14,410 --> 00:06:20,020
because because of the history right the

00:06:16,750 --> 00:06:22,240
30 40 50 year history organizations have

00:06:20,020 --> 00:06:24,010
tried to solve the problem which means

00:06:22,240 --> 00:06:25,990
they have built proprietary tools around

00:06:24,010 --> 00:06:27,820
it so the integration of those

00:06:25,990 --> 00:06:31,090
proprietary tools and bringing them into

00:06:27,820 --> 00:06:34,150
you know the fold became a problem when

00:06:31,090 --> 00:06:36,370
it comes to tools and so these

00:06:34,150 --> 00:06:38,260
challenges are onboarding because if

00:06:36,370 --> 00:06:40,030
you're going to be a relatively new

00:06:38,260 --> 00:06:41,350
developer in the mainframe space not

00:06:40,030 --> 00:06:43,630
only do you have to potentially learn a

00:06:41,350 --> 00:06:45,310
new language COBOL which languages are

00:06:43,630 --> 00:06:46,930
relatively easy to pick up people learn

00:06:45,310 --> 00:06:49,030
them all the time you've got to learn an

00:06:46,930 --> 00:06:51,060
entirely new and quite antiquated

00:06:49,030 --> 00:06:53,830
process in order to get that code into

00:06:51,060 --> 00:06:55,210
production the new tooling everything

00:06:53,830 --> 00:06:56,290
that's involved with that which is

00:06:55,210 --> 00:06:57,850
markedly different than probably

00:06:56,290 --> 00:07:00,370
anything you've ever touched as a

00:06:57,850 --> 00:07:02,199
developer before this creates a problem

00:07:00,370 --> 00:07:03,880
recruitment because who wants to go

00:07:02,199 --> 00:07:06,040
learn thirty-year-old technology and

00:07:03,880 --> 00:07:07,540
process in order to get the job running

00:07:06,040 --> 00:07:08,949
and who wants to have to deal with that

00:07:07,540 --> 00:07:10,300
constant context switching if they're

00:07:08,949 --> 00:07:11,919
gonna be maintaining mainframe code

00:07:10,300 --> 00:07:13,990
part-time and then have to switch over

00:07:11,919 --> 00:07:17,380
to distributed code or code for mobile

00:07:13,990 --> 00:07:18,610
other desktop applications so that

00:07:17,380 --> 00:07:20,410
really this kind of begs the question

00:07:18,610 --> 00:07:22,720
what other platform out there requires

00:07:20,410 --> 00:07:24,610
this much specialization and the fact is

00:07:22,720 --> 00:07:26,500
right now it's none all of those other

00:07:24,610 --> 00:07:28,210
deployment targets are used pretty much

00:07:26,500 --> 00:07:30,190
the same tooling and process in order to

00:07:28,210 --> 00:07:33,150
get the code through that doesn't have

00:07:30,190 --> 00:07:36,690
to be the case for mainframe anymore and

00:07:33,150 --> 00:07:38,740
modernization isn't new on the mainframe

00:07:36,690 --> 00:07:40,840
modernization has continued to occur

00:07:38,740 --> 00:07:42,460
over and over again as mainframes have

00:07:40,840 --> 00:07:44,110
supported things like virtualization and

00:07:42,460 --> 00:07:45,880
containerization and scalability and

00:07:44,110 --> 00:07:47,979
persistent encryption for a number of

00:07:45,880 --> 00:07:51,220
years but what hasn't modernized as of

00:07:47,979 --> 00:07:53,889
yet is that process and we're up here

00:07:51,220 --> 00:07:55,300
today to talk about how the that is no

00:07:53,889 --> 00:07:57,669
longer the case with the tools that are

00:07:55,300 --> 00:08:00,610
present and the first step in that was

00:07:57,669 --> 00:08:02,949
honestly it's a port forget so rocket

00:08:00,610 --> 00:08:04,810
Software a couple of years back created

00:08:02,949 --> 00:08:07,750
an open-source port of get to run

00:08:04,810 --> 00:08:09,760
natively on z/os this is what starts to

00:08:07,750 --> 00:08:11,410
enable branch based work close and more

00:08:09,760 --> 00:08:13,990
modern iterative development on

00:08:11,410 --> 00:08:16,000
mainframe application and with code in

00:08:13,990 --> 00:08:17,919
git we can then start integrating other

00:08:16,000 --> 00:08:20,830
more modern tools and processes and

00:08:17,919 --> 00:08:22,599
start strict removing a lot of those

00:08:20,830 --> 00:08:24,880
from those mainframe specific antiquated

00:08:22,599 --> 00:08:27,400
tools into a more modern framework and

00:08:24,880 --> 00:08:29,560
this really gets at that pressing need

00:08:27,400 --> 00:08:31,449
to modernize that application stack

00:08:29,560 --> 00:08:33,700
modernize the development tooling so

00:08:31,449 --> 00:08:35,320
that organizations can more easily bring

00:08:33,700 --> 00:08:36,880
people into the mainframe development

00:08:35,320 --> 00:08:40,330
fold and continue to maintain those work

00:08:36,880 --> 00:08:43,870
floats that everyone depends upon and

00:08:40,330 --> 00:08:46,750
talking about open source right one of

00:08:43,870 --> 00:08:48,070
our philosophies at comm internally as

00:08:46,750 --> 00:08:51,700
well as what we are actually telling our

00:08:48,070 --> 00:08:55,480
customers is you know mainframe can

00:08:51,700 --> 00:08:58,000
actually embrace open source and we

00:08:55,480 --> 00:09:01,510
along with IBM and rocket software

00:08:58,000 --> 00:09:04,750
actually created a consortium called Zoe

00:09:01,510 --> 00:09:07,740
it is the first-ever mainframe-based

00:09:04,750 --> 00:09:11,900
open source project it's under the open

00:09:07,740 --> 00:09:15,470
mainframe under the the Linux Foundation

00:09:11,900 --> 00:09:18,580
so the goal here is to actually make

00:09:15,470 --> 00:09:21,680
mainframe be like any other platform

00:09:18,580 --> 00:09:23,480
right in this current day and age you

00:09:21,680 --> 00:09:25,310
know mainframe has been siloed for a

00:09:23,480 --> 00:09:27,080
very long time it has been considered as

00:09:25,310 --> 00:09:28,670
oh my god this is you know this

00:09:27,080 --> 00:09:30,170
antiquated machine you know using

00:09:28,670 --> 00:09:32,210
antiquated languages and things like

00:09:30,170 --> 00:09:35,570
that that has been kind of kept away

00:09:32,210 --> 00:09:37,339
from from the normal flow but with the

00:09:35,570 --> 00:09:40,220
current change and trends in the

00:09:37,339 --> 00:09:43,279
industry organizations wanna standardize

00:09:40,220 --> 00:09:46,580
on a common stack right mobile mainframe

00:09:43,279 --> 00:09:49,700
is is a reality it is there today

00:09:46,580 --> 00:09:51,620
so from an enterprise point of view they

00:09:49,700 --> 00:09:54,760
would like to have a consistent set of

00:09:51,620 --> 00:09:56,540
tooling and processes and workflows

00:09:54,760 --> 00:09:58,820
across the board whether they're

00:09:56,540 --> 00:10:01,670
actually developing mainframe or mobile

00:09:58,820 --> 00:10:03,830
right and zoe is an open source project

00:10:01,670 --> 00:10:07,160
that is actually opening up the doors

00:10:03,830 --> 00:10:10,430
you know for open source 2 to 2

00:10:07,160 --> 00:10:14,360
mainframe so one of the key components

00:10:10,430 --> 00:10:16,420
of Zoe is a CLI so on this picture

00:10:14,360 --> 00:10:19,760
pretty much paints the picture right

00:10:16,420 --> 00:10:22,430
it's it says the story for you so today

00:10:19,760 --> 00:10:26,300
you can see you know developers actually

00:10:22,430 --> 00:10:30,380
using CLI to interact with AWS sure

00:10:26,300 --> 00:10:33,830
right why can't we have the same thing

00:10:30,380 --> 00:10:36,860
for mainframe right why should mainframe

00:10:33,830 --> 00:10:41,900
be different so Zoe CLI actually enables

00:10:36,860 --> 00:10:45,350
that kind of capability to interact with

00:10:41,900 --> 00:10:47,660
mainframe now one of the key things that

00:10:45,350 --> 00:10:51,350
Zoe is also driving from a modernization

00:10:47,660 --> 00:10:53,890
perspective is for it of for anybody to

00:10:51,350 --> 00:10:56,660
actually use the CLI you know there are

00:10:53,890 --> 00:10:58,850
picture shows you some some you know

00:10:56,660 --> 00:11:00,890
mainframe related technologies some are

00:10:58,850 --> 00:11:02,089
basically infrastructural pieces some

00:11:00,890 --> 00:11:05,000
are actually the middleware software

00:11:02,089 --> 00:11:07,820
that's actually running there but in

00:11:05,000 --> 00:11:10,459
order to actually leverage CLI right

00:11:07,820 --> 00:11:14,720
what it force it is everybody to think

00:11:10,459 --> 00:11:16,700
about API a'f occation so all of those

00:11:14,720 --> 00:11:21,050
infrastructure pieces middleware

00:11:16,700 --> 00:11:23,690
software now have REST API that can be

00:11:21,050 --> 00:11:25,880
you know involved through a CLI

00:11:23,690 --> 00:11:28,160
interface and the idea of CL

00:11:25,880 --> 00:11:31,460
is anything that you can renounce yell I

00:11:28,160 --> 00:11:33,830
can be scripted which means you can

00:11:31,460 --> 00:11:36,140
actually automate it so this is a way

00:11:33,830 --> 00:11:39,470
for us to actually bring mainframe into

00:11:36,140 --> 00:11:42,680
the fold and have tools like you know

00:11:39,470 --> 00:11:45,800
consistent set of tools for CI CD be

00:11:42,680 --> 00:11:47,210
used in in the flow so there's a couple

00:11:45,800 --> 00:11:49,850
of different approaches to being able to

00:11:47,210 --> 00:11:51,740
start utilizing tools like the Zoe CLI

00:11:49,850 --> 00:11:52,940
and the api's that are there and then

00:11:51,740 --> 00:11:55,460
all the other automations that are

00:11:52,940 --> 00:11:57,500
present and get and ultimately it comes

00:11:55,460 --> 00:12:00,560
down to a decision of replace or

00:11:57,500 --> 00:12:02,240
interface so one option is of course to

00:12:00,560 --> 00:12:04,730
take all the code that exists in your

00:12:02,240 --> 00:12:06,920
existing mainframe SCM and bring it

00:12:04,730 --> 00:12:09,290
directly into get and use git natively

00:12:06,920 --> 00:12:12,200
going forward depending upon how much

00:12:09,290 --> 00:12:13,910
heritage and how much mainframe code you

00:12:12,200 --> 00:12:15,590
have and how many decades of processes

00:12:13,910 --> 00:12:18,290
are built in that may or may not be a

00:12:15,590 --> 00:12:20,570
very large task to handle the other

00:12:18,290 --> 00:12:22,670
approach is to go ahead and interface to

00:12:20,570 --> 00:12:24,260
that existing system so that all the

00:12:22,670 --> 00:12:25,640
modern tooling can happen on top and

00:12:24,260 --> 00:12:27,350
mainframe developers and maintainers

00:12:25,640 --> 00:12:29,900
don't have to worry about that interface

00:12:27,350 --> 00:12:31,520
and we're here today and ven cuts gonna

00:12:29,900 --> 00:12:33,470
share a bit more too about broad comms

00:12:31,520 --> 00:12:35,750
approach which is that embracing of

00:12:33,470 --> 00:12:37,370
heritage to be able to utilize those

00:12:35,750 --> 00:12:40,120
best debris to lanes and start working

00:12:37,370 --> 00:12:42,680
much more quickly without a need to

00:12:40,120 --> 00:12:44,330
migrate all of that logic on all of the

00:12:42,680 --> 00:12:49,310
code that exists in that problem those

00:12:44,330 --> 00:12:53,210
projects so you know the approach that

00:12:49,310 --> 00:12:54,770
we are actually taking is so but never

00:12:53,210 --> 00:12:57,080
let me take it one more step back right

00:12:54,770 --> 00:13:00,200
whenever we talk about mainframe you

00:12:57,080 --> 00:13:02,090
know you hear the word legacy right I

00:13:00,200 --> 00:13:03,920
don't want to look at it as a legacy

00:13:02,090 --> 00:13:06,380
legacy something that you leave behind I

00:13:03,920 --> 00:13:07,400
want to look at it as heritage that is

00:13:06,380 --> 00:13:09,320
something that you can actually leverage

00:13:07,400 --> 00:13:12,860
you continue to use you continue to

00:13:09,320 --> 00:13:15,890
build on right the reality is you know

00:13:12,860 --> 00:13:20,540
organizations have invested 30 40 50

00:13:15,890 --> 00:13:23,150
years of effort in it and our goal right

00:13:20,540 --> 00:13:25,670
internally for ourselves as well as for

00:13:23,150 --> 00:13:28,880
our customers is to see how we can

00:13:25,670 --> 00:13:32,930
leverage or proba allow that heritage to

00:13:28,880 --> 00:13:34,280
can to be to be reused right now as as

00:13:32,930 --> 00:13:36,140
phil was talking about obviously there

00:13:34,280 --> 00:13:37,730
are different approaches right for the

00:13:36,140 --> 00:13:39,649
folks who actually attended the Ford

00:13:37,730 --> 00:13:41,149
session yesterday they

00:13:39,649 --> 00:13:43,999
were actually talking about moving from

00:13:41,149 --> 00:13:46,459
clearcase to get up and that's a perfect

00:13:43,999 --> 00:13:48,709
use case right you know and and that's

00:13:46,459 --> 00:13:50,899
pretty legit and if there are

00:13:48,709 --> 00:13:52,939
organizations who have their source code

00:13:50,899 --> 00:13:55,249
be sitting in a proprietary repository

00:13:52,939 --> 00:13:56,959
or something else that is all flat for

00:13:55,249 --> 00:13:59,629
migrating together of standardizing on

00:13:56,959 --> 00:14:03,230
it is a perfect approach but is that the

00:13:59,629 --> 00:14:04,939
answer for all the cases probably not

00:14:03,230 --> 00:14:05,809
right and that's one of the things that

00:14:04,939 --> 00:14:10,160
we are actually going to talk about

00:14:05,809 --> 00:14:12,619
today so so our goal is to say that you

00:14:10,160 --> 00:14:15,769
know there is a there is a mainframe SEM

00:14:12,619 --> 00:14:19,790
right so for for the folks who are not

00:14:15,769 --> 00:14:22,069
familiar with mainframe SCMS typical

00:14:19,790 --> 00:14:25,670
stuff that exists there is it's not just

00:14:22,069 --> 00:14:28,730
a version control system right it is

00:14:25,670 --> 00:14:31,819
also a build engine it is actually also

00:14:28,730 --> 00:14:35,089
a lifecycle management governance audit

00:14:31,819 --> 00:14:37,309
tool so what that means is the

00:14:35,089 --> 00:14:38,990
investment that the organization's have

00:14:37,309 --> 00:14:41,749
put in and the processes that they have

00:14:38,990 --> 00:14:44,480
established around it is is something

00:14:41,749 --> 00:14:45,889
that needs to be managed maintained and

00:14:44,480 --> 00:14:48,949
you don't want to disrupt that workflow

00:14:45,889 --> 00:14:51,470
so that's one of our key you know

00:14:48,949 --> 00:14:53,959
bedrock principles as we are looking at

00:14:51,470 --> 00:14:57,439
this modernization effort now the other

00:14:53,959 --> 00:15:00,439
thing is you know as I said mainframe

00:14:57,439 --> 00:15:02,350
run code runs on mainframe is built on

00:15:00,439 --> 00:15:06,319
mainframe it's deployed on the mainframe

00:15:02,350 --> 00:15:07,819
so and then the number of assets that

00:15:06,319 --> 00:15:10,999
we're actually talking about actually

00:15:07,819 --> 00:15:13,540
runs into millions right so over the

00:15:10,999 --> 00:15:17,149
years that's what it has grown to so

00:15:13,540 --> 00:15:18,860
those things you know if if the approach

00:15:17,149 --> 00:15:21,379
is to say hey you know you know to take

00:15:18,860 --> 00:15:24,769
everything out of your SCM and move it

00:15:21,379 --> 00:15:26,299
to github and then rebuild or reinvent

00:15:24,769 --> 00:15:27,709
your infrastructure so that you can

00:15:26,299 --> 00:15:30,709
actually do the bills the promotion the

00:15:27,709 --> 00:15:33,049
lifecycle management that's a huge task

00:15:30,709 --> 00:15:34,850
for these mainframe organizations who

00:15:33,049 --> 00:15:37,850
are still trying to get their head

00:15:34,850 --> 00:15:39,949
around you know DevOps agile principles

00:15:37,850 --> 00:15:43,040
and things like that so we want to make

00:15:39,949 --> 00:15:46,819
life easy and and simple using using

00:15:43,040 --> 00:15:48,679
these using using our bridging approach

00:15:46,819 --> 00:15:51,799
and the other thing that we want to do

00:15:48,679 --> 00:15:53,360
is one of the things mainframe

00:15:51,799 --> 00:15:55,819
organization of

00:15:53,360 --> 00:15:58,339
ever Stu is bringing new tools to the

00:15:55,819 --> 00:16:00,709
platform so if you want to get a new

00:15:58,339 --> 00:16:03,379
tool on to the mainframe it's a huge

00:16:00,709 --> 00:16:05,449
task because you know because of the

00:16:03,379 --> 00:16:06,769
existing processes in terms of when you

00:16:05,449 --> 00:16:07,459
know new mainframe software can be

00:16:06,769 --> 00:16:09,860
installed

00:16:07,459 --> 00:16:12,230
what kind of rigor and checks it needs

00:16:09,860 --> 00:16:15,799
to go through before it gets approved

00:16:12,230 --> 00:16:18,049
and blessed so we want we don't want to

00:16:15,799 --> 00:16:20,540
you know introduce you know any niche

00:16:18,049 --> 00:16:22,639
tools onto the platform but rather

00:16:20,540 --> 00:16:24,679
leverage something that's there but

00:16:22,639 --> 00:16:28,959
still gave organizations the flexibility

00:16:24,679 --> 00:16:33,799
to do the job in using the modern tools

00:16:28,959 --> 00:16:35,600
so so why get for mainframe right so so

00:16:33,799 --> 00:16:37,879
we talked about why we still need the

00:16:35,600 --> 00:16:39,379
mainframe on the back end right because

00:16:37,879 --> 00:16:40,790
it needs to do the build it needs to do

00:16:39,379 --> 00:16:42,679
the lifecycle management there are set

00:16:40,790 --> 00:16:44,660
of practices that are established so we

00:16:42,679 --> 00:16:47,809
need to kind of preserve that so why get

00:16:44,660 --> 00:16:49,459
well I mean there is a lot of text on

00:16:47,809 --> 00:16:53,029
that chart but the thing that struck me

00:16:49,459 --> 00:16:57,049
is that October's report that said 1.7

00:16:53,029 --> 00:17:01,189
million students learn how to code using

00:16:57,049 --> 00:17:03,589
github now related back to the slide

00:17:01,189 --> 00:17:07,279
that Phil had talking about the skill

00:17:03,589 --> 00:17:10,250
gap if you think about it you know these

00:17:07,279 --> 00:17:13,309
1.7 million students who have learned

00:17:10,250 --> 00:17:15,380
how to code on github are the ones were

00:17:13,309 --> 00:17:18,709
gonna come into this workforce trying to

00:17:15,380 --> 00:17:20,419
bridge that skills gap so providing or

00:17:18,709 --> 00:17:24,289
having set of tools that they can

00:17:20,419 --> 00:17:26,720
understand they know they relate to can

00:17:24,289 --> 00:17:30,769
actually welcome them to the platform

00:17:26,720 --> 00:17:32,750
and not put too much burden the green

00:17:30,769 --> 00:17:35,179
screen remember that we don't want that

00:17:32,750 --> 00:17:36,260
in the 2-2 to welcome the new generation

00:17:35,179 --> 00:17:38,990
of application developers to the

00:17:36,260 --> 00:17:40,070
platform okay the other thing that I

00:17:38,990 --> 00:17:41,860
mentioned when we talk to our

00:17:40,070 --> 00:17:44,059
organization I mean the various

00:17:41,860 --> 00:17:45,799
customers is they want to standardize

00:17:44,059 --> 00:17:47,690
right I mentioned that they want to use

00:17:45,799 --> 00:17:50,450
a common set of tools they want their

00:17:47,690 --> 00:17:54,019
developers to be speaking the same

00:17:50,450 --> 00:17:55,820
language same workflow so that you know

00:17:54,019 --> 00:17:58,039
they can actually have full stack

00:17:55,820 --> 00:18:01,220
developer to be developing Java Ruby

00:17:58,039 --> 00:18:02,570
Python or COBOL and B be familiar with

00:18:01,220 --> 00:18:04,220
the workflows and the tools that they're

00:18:02,570 --> 00:18:06,889
actually using

00:18:04,220 --> 00:18:08,750
and you know that involves providing a

00:18:06,889 --> 00:18:11,269
seamless experience when it comes to

00:18:08,750 --> 00:18:12,470
your you know how developers are

00:18:11,269 --> 00:18:14,360
actually interacting the tools that

00:18:12,470 --> 00:18:17,720
they're actually using which is which

00:18:14,360 --> 00:18:20,570
may include their favorite IDE right and

00:18:17,720 --> 00:18:22,940
then you know leverage the the proven

00:18:20,570 --> 00:18:25,549
and collaboration practices that are out

00:18:22,940 --> 00:18:26,929
there to establish that so that's the

00:18:25,549 --> 00:18:30,230
reason why we're going to actually use

00:18:26,929 --> 00:18:33,529
get our standardized on get further four

00:18:30,230 --> 00:18:36,320
main training organizations so then the

00:18:33,529 --> 00:18:39,950
question arises what happens to those

00:18:36,320 --> 00:18:43,879
you know my good friends who are about

00:18:39,950 --> 00:18:46,190
or 60 the 30 percent 60 plus year old

00:18:43,879 --> 00:18:49,750
mainframe errs who are really productive

00:18:46,190 --> 00:18:53,000
with the existing tools our solution

00:18:49,750 --> 00:18:57,409
will give the organizations the

00:18:53,000 --> 00:18:59,299
flexibility that so that the existing

00:18:57,409 --> 00:19:02,269
set of developers who don't know

00:18:59,299 --> 00:19:05,000
anything about gear github they can

00:19:02,269 --> 00:19:07,039
continue to use their the tools that

00:19:05,000 --> 00:19:08,659
they're actually familiar with they

00:19:07,039 --> 00:19:10,490
don't have to transform anything they

00:19:08,659 --> 00:19:12,440
don't have to change anything at the

00:19:10,490 --> 00:19:14,990
same time you know allowing the new

00:19:12,440 --> 00:19:17,360
generation of developers to use you know

00:19:14,990 --> 00:19:19,159
their favorite IDE and the interface

00:19:17,360 --> 00:19:20,509
that they want to actually go ahead I

00:19:19,159 --> 00:19:22,009
definitely identify with the one on the

00:19:20,509 --> 00:19:23,809
left as I know a bit of COBOL and I've

00:19:22,009 --> 00:19:25,610
never touched much of a green screen in

00:19:23,809 --> 00:19:27,320
my life where you'd probably be a little

00:19:25,610 --> 00:19:28,279
more toward the other side with a lot

00:19:27,320 --> 00:19:30,649
more of that knowledge

00:19:28,279 --> 00:19:34,250
probably yeah I don't wanna admit that

00:19:30,649 --> 00:19:35,960
but hey why not so so that's that's the

00:19:34,250 --> 00:19:38,419
the the again striking that balance

00:19:35,960 --> 00:19:41,120
right making it easy for enterprises to

00:19:38,419 --> 00:19:43,759
go through this transformation and not

00:19:41,120 --> 00:19:45,950
you know change the the entire workflow

00:19:43,759 --> 00:19:47,870
processes for everybody with the flip of

00:19:45,950 --> 00:19:52,850
a switch so that's what we're actually

00:19:47,870 --> 00:19:55,610
looking at right so what enables that

00:19:52,850 --> 00:19:59,210
magic so what we are what we have

00:19:55,610 --> 00:20:03,350
developed is called get bridge you know

00:19:59,210 --> 00:20:10,549
it's essentially a simple springboard

00:20:03,350 --> 00:20:14,179
java application bridges get hub to the

00:20:10,549 --> 00:20:17,029
mainframe source configuration system so

00:20:14,179 --> 00:20:18,110
the gate bridge is the magic that's

00:20:17,029 --> 00:20:19,730
going to manage every

00:20:18,110 --> 00:20:25,070
thing behind the covers from a developer

00:20:19,730 --> 00:20:27,080
perspective and you know a mainframe

00:20:25,070 --> 00:20:30,020
developer can actually use the green

00:20:27,080 --> 00:20:31,730
screen Eclipse interface whatever they

00:20:30,020 --> 00:20:35,179
want to use right they can continue to

00:20:31,730 --> 00:20:36,799
work on using that and more you know a

00:20:35,179 --> 00:20:39,970
new age application developer can use

00:20:36,799 --> 00:20:44,210
their favorite IDE vs code Eclipse

00:20:39,970 --> 00:20:46,120
IntelliJ you name it right and the gate

00:20:44,210 --> 00:20:49,490
bridge is actually going to manage the

00:20:46,120 --> 00:20:51,559
synchronization of these two and make it

00:20:49,490 --> 00:20:54,169
seamless from from a end user

00:20:51,559 --> 00:20:57,049
perspective and they don't have to worry

00:20:54,169 --> 00:21:00,080
about you know the interacting with

00:20:57,049 --> 00:21:01,370
mainframe so as you can see on this

00:21:00,080 --> 00:21:04,400
particular chart we have identified

00:21:01,370 --> 00:21:07,580
three different personas Michelle is our

00:21:04,400 --> 00:21:10,580
new age application developer Tod is our

00:21:07,580 --> 00:21:11,660
enterprise get administrator he's the

00:21:10,580 --> 00:21:14,299
one who's responsible for actually

00:21:11,660 --> 00:21:16,790
setting up the enterprise github and

00:21:14,299 --> 00:21:19,280
also the gate bridge and do the mappings

00:21:16,790 --> 00:21:26,030
and stuff like that and we have Karl who

00:21:19,280 --> 00:21:28,250
is our back-end SEM admin so here is a

00:21:26,030 --> 00:21:30,559
basically a simple overview of how how

00:21:28,250 --> 00:21:33,799
you know it works so the gate bridge

00:21:30,559 --> 00:21:38,570
saying this app actually manages the

00:21:33,799 --> 00:21:40,910
mapping between a github repository or a

00:21:38,570 --> 00:21:43,880
branch to whatever is actually sitting

00:21:40,910 --> 00:21:47,030
on the mainframe SCM in the backend so

00:21:43,880 --> 00:21:48,520
it essentially does the the the mapping

00:21:47,030 --> 00:21:54,140
management and the synchronization

00:21:48,520 --> 00:21:56,540
aspects of it and the components that we

00:21:54,140 --> 00:21:59,679
have in there are well the user would

00:21:56,540 --> 00:22:02,900
actually be interacting with using a web

00:21:59,679 --> 00:22:04,940
UI and they there is an email

00:22:02,900 --> 00:22:06,559
notification that actually comes in when

00:22:04,940 --> 00:22:09,860
there are some changes that the user has

00:22:06,559 --> 00:22:11,870
to worry about and then we have a

00:22:09,860 --> 00:22:13,160
scheduler remember I said the gate

00:22:11,870 --> 00:22:16,580
bridge is responsible for doing the

00:22:13,160 --> 00:22:17,780
synchronization so so organizations when

00:22:16,580 --> 00:22:19,760
they're actually setting up this good

00:22:17,780 --> 00:22:21,290
bridge can say I want to do the

00:22:19,760 --> 00:22:23,720
synchronization on a particular schedule

00:22:21,290 --> 00:22:26,059
or we have even based synchronization

00:22:23,720 --> 00:22:28,790
mechanism that'll actually you know

00:22:26,059 --> 00:22:32,029
synchronize the backend mainframe ECM to

00:22:28,790 --> 00:22:36,169
to the the github

00:22:32,029 --> 00:22:37,099
nice repo we use JDO for actually doing

00:22:36,169 --> 00:22:39,169
our persistence

00:22:37,099 --> 00:22:40,460
there's logging infrastructure and then

00:22:39,169 --> 00:22:41,929
there is a endeavour web services

00:22:40,460 --> 00:22:43,789
component which is basically the

00:22:41,929 --> 00:22:46,700
interacting with the backend mainframe

00:22:43,789 --> 00:22:48,679
using REST API so remember the CLI

00:22:46,700 --> 00:22:50,539
aspect of it that actually you know

00:22:48,679 --> 00:22:52,879
forced us to have these REST API and

00:22:50,539 --> 00:22:55,399
that enabled you know us to do more

00:22:52,879 --> 00:22:56,989
innovation in this area we use jagged

00:22:55,399 --> 00:22:59,869
library to talk to github there is a

00:22:56,989 --> 00:23:02,570
github app you know that pretty much you

00:22:59,869 --> 00:23:06,379
know I loves us to integrate the the

00:23:02,570 --> 00:23:08,960
Gate Bridge to the github repository to

00:23:06,379 --> 00:23:11,269
handle any of the authentication race

00:23:08,960 --> 00:23:15,289
api's hook management and stuff like

00:23:11,269 --> 00:23:18,589
that so that's a very high-level picture

00:23:15,289 --> 00:23:20,419
of how we do it now here is a picture

00:23:18,589 --> 00:23:23,239
that shows you of our back-end you know

00:23:20,419 --> 00:23:25,249
SCM system and what the the sdlc

00:23:23,239 --> 00:23:26,599
lifecycle would look like so what you're

00:23:25,249 --> 00:23:28,820
looking at here is basically the

00:23:26,599 --> 00:23:31,460
different stages right the dev test

00:23:28,820 --> 00:23:33,499
fraud this is this is configurable so

00:23:31,460 --> 00:23:35,539
organizations so this is how the code

00:23:33,499 --> 00:23:37,129
would actually flow when I talk about

00:23:35,539 --> 00:23:41,269
lifecycle management on the mainframe

00:23:37,129 --> 00:23:43,849
right so it goes from dev to test one to

00:23:41,269 --> 00:23:46,009
test you to pre prod to prod but that's

00:23:43,849 --> 00:23:48,559
the workflow that you have and there is

00:23:46,009 --> 00:23:50,989
a map you know that be back in the CM

00:23:48,559 --> 00:23:53,479
managers in terms of you know what

00:23:50,989 --> 00:23:56,629
artifact is sitting where so it has that

00:23:53,479 --> 00:23:58,219
particular knowledge and the key thing

00:23:56,629 --> 00:23:59,899
here to note is there is something

00:23:58,219 --> 00:24:01,729
called an increased age this is where

00:23:59,899 --> 00:24:02,839
the developers actually work this is

00:24:01,729 --> 00:24:05,330
where developers are actually pulling

00:24:02,839 --> 00:24:09,349
the you know the latest version from to

00:24:05,330 --> 00:24:11,839
make the further modifications and why

00:24:09,349 --> 00:24:15,169
is that important because as I said you

00:24:11,839 --> 00:24:19,070
know these back-end SEMS typically may

00:24:15,169 --> 00:24:21,259
have millions of artifacts to enable

00:24:19,070 --> 00:24:22,909
this we don't want to clone all of those

00:24:21,259 --> 00:24:24,499
million artifacts into a github

00:24:22,909 --> 00:24:26,450
repository because we don't want it to

00:24:24,499 --> 00:24:28,700
take like a week before people can

00:24:26,450 --> 00:24:31,099
actually start using it so the idea here

00:24:28,700 --> 00:24:33,080
is the gate bridge will only map to this

00:24:31,099 --> 00:24:35,479
code and code entry stage that the

00:24:33,080 --> 00:24:38,089
developers are actually working with so

00:24:35,479 --> 00:24:40,519
what that does is basically it subsets

00:24:38,089 --> 00:24:42,460
the amount of you know artifacts that

00:24:40,519 --> 00:24:44,679
the users are actually looking at

00:24:42,460 --> 00:24:46,779
right so that way you are not cloning

00:24:44,679 --> 00:24:49,119
everything and then the Gate Bridge has

00:24:46,779 --> 00:24:51,190
additional functionality to say oh if I

00:24:49,119 --> 00:24:52,720
need a dependency for example that is

00:24:51,190 --> 00:24:54,820
not part of the stuff you can actually

00:24:52,720 --> 00:24:56,919
pull it using into it into the working

00:24:54,820 --> 00:25:00,279
directory using the using the Goodrich

00:24:56,919 --> 00:25:06,240
so that's essentially how the magic

00:25:00,279 --> 00:25:08,649
actually happens now you know a typical

00:25:06,240 --> 00:25:10,360
get developer rate you know you have

00:25:08,649 --> 00:25:12,879
your enterprise good repo you create

00:25:10,360 --> 00:25:16,269
your free to branch you make your

00:25:12,879 --> 00:25:19,090
changes and then what you know if you're

00:25:16,269 --> 00:25:22,090
following the the basic principles you

00:25:19,090 --> 00:25:24,730
would actually want to do it build just

00:25:22,090 --> 00:25:27,009
compile a link off your changes without

00:25:24,730 --> 00:25:28,749
actually being you know we impacting

00:25:27,009 --> 00:25:31,240
other changes or pulling in other

00:25:28,749 --> 00:25:35,230
changes from other developers so what we

00:25:31,240 --> 00:25:38,889
have is you know a a mechanism so we

00:25:35,230 --> 00:25:42,119
actually ship a build script that can be

00:25:38,889 --> 00:25:44,110
customized and it leverages Zoe

00:25:42,119 --> 00:25:48,220
remember that open source project that I

00:25:44,110 --> 00:25:51,549
mentioned it leverages Zoe to facilitate

00:25:48,220 --> 00:25:54,669
the build of the user changes so this

00:25:51,549 --> 00:25:56,259
provides the developer isolation and you

00:25:54,669 --> 00:25:58,029
know in terms of the build so that they

00:25:56,259 --> 00:26:00,309
can actually build this their changes

00:25:58,029 --> 00:26:02,529
validate their changes before actually

00:26:00,309 --> 00:26:05,440
pushing it back into the into the main

00:26:02,529 --> 00:26:09,009
repository okay

00:26:05,440 --> 00:26:12,369
now I've done my job

00:26:09,009 --> 00:26:17,940
right as a developer I made my changes I

00:26:12,369 --> 00:26:20,649
built it I verified it excuse me sorry

00:26:17,940 --> 00:26:23,080
now I wanna I want to actually use the

00:26:20,649 --> 00:26:25,269
workflow so I commit my changes to the

00:26:23,080 --> 00:26:27,129
enterprise's good repo and then the gate

00:26:25,269 --> 00:26:30,210
bridge is going to propagate those

00:26:27,129 --> 00:26:31,360
changes back to back to the backend SCM

00:26:30,210 --> 00:26:33,789
ok

00:26:31,360 --> 00:26:35,740
life is great right now what happens

00:26:33,789 --> 00:26:38,080
when something goes wrong which is the

00:26:35,740 --> 00:26:40,899
case where Carl has made some changes

00:26:38,080 --> 00:26:43,419
using his ispf interface for the same

00:26:40,899 --> 00:26:44,830
source modules you know that the user is

00:26:43,419 --> 00:26:48,009
actually working in a gate environment

00:26:44,830 --> 00:26:49,869
so the collisions are possible so the

00:26:48,009 --> 00:26:52,990
gate bridge actually detects those

00:26:49,869 --> 00:26:55,179
changes and before it actually pushes or

00:26:52,990 --> 00:26:56,290
synchronizes those changes back it does

00:26:55,179 --> 00:26:58,840
a vanity there is a valley

00:26:56,290 --> 00:27:00,700
datian step where it validates and if

00:26:58,840 --> 00:27:03,820
there is a conflict that cannot mean

00:27:00,700 --> 00:27:05,740
that you know merged automatically it'll

00:27:03,820 --> 00:27:08,050
actually create a private branch and

00:27:05,740 --> 00:27:09,910
notify the user why our email saying hey

00:27:08,050 --> 00:27:11,740
you know you need to worry about merging

00:27:09,910 --> 00:27:17,160
in these changes because something else

00:27:11,740 --> 00:27:20,890
has happened on the backend okay so I

00:27:17,160 --> 00:27:24,820
have a real recorded demo nowise because

00:27:20,890 --> 00:27:27,790
I like to talk so we'll just run through

00:27:24,820 --> 00:27:29,980
this this particular demo that to give

00:27:27,790 --> 00:27:34,330
you an idea of how how it actually works

00:27:29,980 --> 00:27:37,330
so what you're seeing here is our get

00:27:34,330 --> 00:27:40,630
bridge interface right so this is where

00:27:37,330 --> 00:27:42,940
Todd are in the gate of admin would

00:27:40,630 --> 00:27:44,680
actually come in and do the mappings so

00:27:42,940 --> 00:27:45,790
this is not a typical developer

00:27:44,680 --> 00:27:48,310
interface that they would actually

00:27:45,790 --> 00:27:50,050
interact with so he would do the clone

00:27:48,310 --> 00:27:53,200
he would do the mapping and as you can

00:27:50,050 --> 00:27:55,920
see there are these COBOL artifacts that

00:27:53,200 --> 00:27:58,630
have been cloned into into a get up repo

00:27:55,920 --> 00:28:00,190
they can actually look at and hey you

00:27:58,630 --> 00:28:04,480
know there is even syntax highlighting

00:28:00,190 --> 00:28:06,850
for COBOL code awesome now the developer

00:28:04,480 --> 00:28:10,180
here is you know we're actually again in

00:28:06,850 --> 00:28:11,770
spirit of opening up open source here is

00:28:10,180 --> 00:28:14,860
a choice from a developer's perspective

00:28:11,770 --> 00:28:17,230
this is Eclipse Shea which is a hosted

00:28:14,860 --> 00:28:19,930
IDE that we have extended for with COBOL

00:28:17,230 --> 00:28:21,490
specific tooling and then you know the

00:28:19,930 --> 00:28:23,710
developer is working there the lower git

00:28:21,490 --> 00:28:26,440
pull just to make sure that everything

00:28:23,710 --> 00:28:29,020
is up to date and then create a feature

00:28:26,440 --> 00:28:33,820
branch right the typical to get related

00:28:29,020 --> 00:28:36,010
activities from the IDE and now what I

00:28:33,820 --> 00:28:38,320
would do is I open up my COBOL program

00:28:36,010 --> 00:28:40,480
where I need to make the changes and as

00:28:38,320 --> 00:28:42,730
you can see it has you know COBOL

00:28:40,480 --> 00:28:44,980
specific syntax highlighting this is the

00:28:42,730 --> 00:28:46,810
extensions that we built you can

00:28:44,980 --> 00:28:49,210
actually do pretty much expect all sorts

00:28:46,810 --> 00:28:51,790
of common things like you know curtis's

00:28:49,210 --> 00:28:55,960
real time validation for COBOL for any

00:28:51,790 --> 00:28:58,510
other language and you know they don't

00:28:55,960 --> 00:29:00,100
let architects do coding anymore so all

00:28:58,510 --> 00:29:03,520
I'm allowed to do is basically make a

00:29:00,100 --> 00:29:06,540
comment change here so making that

00:29:03,520 --> 00:29:10,470
particular change in my feature branch

00:29:06,540 --> 00:29:10,470
so add it in a comment

00:29:12,200 --> 00:29:21,239
and once I'm done I can actually go save

00:29:17,759 --> 00:29:23,639
it and then use leverage the IDE

00:29:21,239 --> 00:29:26,129
capabilities and the gate capabilities

00:29:23,639 --> 00:29:28,710
that are built in to do a comparison of

00:29:26,129 --> 00:29:31,049
the current version that's out there so

00:29:28,710 --> 00:29:34,080
I can use that I can see my changes and

00:29:31,049 --> 00:29:37,559
now since I made a very important change

00:29:34,080 --> 00:29:41,340
I need to build it okay so I'm gonna run

00:29:37,559 --> 00:29:43,559
the script to do the build and what it's

00:29:41,340 --> 00:29:46,139
doing is essentially it's leveraging Zoe

00:29:43,559 --> 00:29:48,509
as the infrastructure to take the

00:29:46,139 --> 00:29:51,720
modified artifacts sitting in my future

00:29:48,509 --> 00:29:53,099
branch to the mainframe leveraging the

00:29:51,720 --> 00:29:54,859
build infrastructure that's already been

00:29:53,099 --> 00:29:58,229
established for years

00:29:54,859 --> 00:30:00,210
build it and then you can see you know

00:29:58,229 --> 00:30:01,919
it comes back with the results in terms

00:30:00,210 --> 00:30:04,559
of whether the build was successful or

00:30:01,919 --> 00:30:06,929
not and if I want to see the output from

00:30:04,559 --> 00:30:09,989
the build you know I can issue use the

00:30:06,929 --> 00:30:12,479
same script and issue a command to see

00:30:09,989 --> 00:30:13,799
the output from that particular build so

00:30:12,479 --> 00:30:17,639
what it's doing is again it's

00:30:13,799 --> 00:30:20,009
downloading the build output to the IDE

00:30:17,639 --> 00:30:26,190
so that I can actually go look at it and

00:30:20,009 --> 00:30:28,229
as a developer I can go in look at that

00:30:26,190 --> 00:30:34,109
particular output that front from that

00:30:28,229 --> 00:30:35,759
from the build and here we go that's

00:30:34,109 --> 00:30:37,849
what that's how it looks like now the

00:30:35,759 --> 00:30:42,090
most important thing to notice here is

00:30:37,849 --> 00:30:44,220
the comment is still there so just to

00:30:42,090 --> 00:30:47,179
prove that is the same version of the

00:30:44,220 --> 00:30:50,639
code that's actually being built so I

00:30:47,179 --> 00:30:52,739
did my change I validated it I built it

00:30:50,639 --> 00:30:55,080
now I'm actually going to go through the

00:30:52,739 --> 00:30:56,369
gate steps of committing those changes

00:30:55,080 --> 00:31:00,029
and pushing those changes to the

00:30:56,369 --> 00:31:02,039
enterprise repo so as you can see you

00:31:00,029 --> 00:31:04,080
know I actually I'm doing a good push

00:31:02,039 --> 00:31:07,499
and it's telling me that new branch

00:31:04,080 --> 00:31:10,129
isn't exist so typical good stuff so I

00:31:07,499 --> 00:31:13,429
would actually say you know issue the

00:31:10,129 --> 00:31:13,429
setup stream

00:31:15,330 --> 00:31:21,869
it's a new branch it's in there now it's

00:31:20,549 --> 00:31:27,119
actually committed to the to the

00:31:21,869 --> 00:31:31,710
enterprise repo and now I can come back

00:31:27,119 --> 00:31:38,519
here and typical get forth flow

00:31:31,710 --> 00:31:41,249
I'll open a April request so that you

00:31:38,519 --> 00:31:43,889
know if essentially what you're seeing

00:31:41,249 --> 00:31:45,570
here is the same good workflow right for

00:31:43,889 --> 00:31:47,489
Pete you know if you people want to use

00:31:45,570 --> 00:31:49,769
want to actually collaborate do the code

00:31:47,489 --> 00:31:51,869
reviews and things like that all of

00:31:49,769 --> 00:31:54,480
those capabilities are still intact and

00:31:51,869 --> 00:31:57,119
you know anybody who understands get up

00:31:54,480 --> 00:31:59,359
can follow the same set of principles

00:31:57,119 --> 00:32:01,859
and rules that have been established

00:31:59,359 --> 00:32:09,330
while still working with the mainframe

00:32:01,859 --> 00:32:11,970
code so it's merged in so let's confirm

00:32:09,330 --> 00:32:14,850
that it's already it's in there so as

00:32:11,970 --> 00:32:17,070
you can see you know or the comment

00:32:14,850 --> 00:32:18,720
actually made it so it is still just the

00:32:17,070 --> 00:32:21,419
file that I actually modified in my

00:32:18,720 --> 00:32:24,239
future branch and the last step right

00:32:21,419 --> 00:32:26,309
let's prove that it is actually the gate

00:32:24,239 --> 00:32:29,340
bridge has done its job of synchronizing

00:32:26,309 --> 00:32:31,230
it back with the mainframe SCM and as

00:32:29,340 --> 00:32:36,419
you can see the new comment that we

00:32:31,230 --> 00:32:38,850
added in there is in the repository so

00:32:36,419 --> 00:32:41,359
that's pretty much the workflow in terms

00:32:38,850 --> 00:32:45,570
of how you know the user is actually

00:32:41,359 --> 00:32:47,279
interacting with get without actually

00:32:45,570 --> 00:32:49,409
knowing what's happening on the back end

00:32:47,279 --> 00:32:50,999
and that's the kind of modernization

00:32:49,409 --> 00:32:53,970
that we're actually bringing to the

00:32:50,999 --> 00:32:56,009
table you know for mainframe

00:32:53,970 --> 00:32:58,859
organizations and taking things to the

00:32:56,009 --> 00:33:02,700
next level and all we are doing here is

00:32:58,859 --> 00:33:04,320
leveraging open source tools with the

00:33:02,700 --> 00:33:06,690
help of some innovation like the Gate

00:33:04,320 --> 00:33:09,720
Bridge that we that we did and bridging

00:33:06,690 --> 00:33:12,299
the old world to the new world and so

00:33:09,720 --> 00:33:14,940
and so now with the Zoe CLI I as a

00:33:12,299 --> 00:33:16,109
aspiring COBOL programmer with not a lot

00:33:14,940 --> 00:33:17,940
of knowledge of the underlying

00:33:16,109 --> 00:33:19,950
infrastructure can use the tools that I

00:33:17,940 --> 00:33:24,749
already am familiar with whether that be

00:33:19,950 --> 00:33:26,190
vs code IntelliJ WordPad whatever I want

00:33:24,749 --> 00:33:28,440
to use in order to interact with my

00:33:26,190 --> 00:33:29,010
repository interact with it with a get

00:33:28,440 --> 00:33:30,810
in

00:33:29,010 --> 00:33:32,370
push it into github and then let all the

00:33:30,810 --> 00:33:34,890
other automations that are available in

00:33:32,370 --> 00:33:37,020
github run on this repository as well

00:33:34,890 --> 00:33:38,580
whether you want to run some github

00:33:37,020 --> 00:33:40,350
specific actions on events in the

00:33:38,580 --> 00:33:41,820
repository leveraging what we've seen in

00:33:40,350 --> 00:33:43,680
some of the keynotes earlier today

00:33:41,820 --> 00:33:46,290
leverage of the ability to automatically

00:33:43,680 --> 00:33:47,820
assign code reviewers vyas just the core

00:33:46,290 --> 00:33:49,980
capabilities of the pull request and

00:33:47,820 --> 00:33:51,780
then get those changes into the system

00:33:49,980 --> 00:33:53,820
much more quickly we're able to branch

00:33:51,780 --> 00:33:55,890
and work on multiple feature branches at

00:33:53,820 --> 00:33:58,080
once in mainframe code which is a very

00:33:55,890 --> 00:33:59,970
new capability tackling we can start to

00:33:58,080 --> 00:34:01,620
unblock those weeks to months long

00:33:59,970 --> 00:34:03,750
deploy queues and start to get them more

00:34:01,620 --> 00:34:05,820
in sync with the other projects that are

00:34:03,750 --> 00:34:07,500
being built on top of this logic that

00:34:05,820 --> 00:34:09,659
with that everyone has been previously

00:34:07,500 --> 00:34:11,280
waiting for the mainframe organization

00:34:09,659 --> 00:34:12,540
to deploy to production so we can

00:34:11,280 --> 00:34:14,909
actually get the rest of those features

00:34:12,540 --> 00:34:16,200
and those applications out the door it's

00:34:14,909 --> 00:34:18,179
essentially you know letting the

00:34:16,200 --> 00:34:20,580
mainframe organizations know what is

00:34:18,179 --> 00:34:23,310
possible right and the existing set of

00:34:20,580 --> 00:34:25,710
tools you know from a CI perspective CD

00:34:23,310 --> 00:34:27,780
perspective can be leveraged for the

00:34:25,710 --> 00:34:29,010
mainframe core as well right one of the

00:34:27,780 --> 00:34:30,450
things that I am Phil we're talking

00:34:29,010 --> 00:34:32,790
about just before this presentation is

00:34:30,450 --> 00:34:35,040
our next step is to actually incorporate

00:34:32,790 --> 00:34:37,020
get up actions into this particular demo

00:34:35,040 --> 00:34:39,750
and pretty much go through the whole CI

00:34:37,020 --> 00:34:42,360
CD process right that's which is

00:34:39,750 --> 00:34:43,860
possible you know we just didn't get

00:34:42,360 --> 00:34:46,230
there exactly yeah

00:34:43,860 --> 00:34:48,030
we will but you know that's the

00:34:46,230 --> 00:34:52,470
progression that we're actually looking

00:34:48,030 --> 00:34:53,790
at so with that we're really excited to

00:34:52,470 --> 00:34:56,250
be able to share this story with you

00:34:53,790 --> 00:34:57,510
today and if you have any questions want

00:34:56,250 --> 00:34:58,770
to ask us anything here after the

00:34:57,510 --> 00:35:00,660
presentation and been cut and I'll be

00:34:58,770 --> 00:35:02,520
around for a while so thank you very

00:35:00,660 --> 00:35:04,230
much everyone for coming on out and

00:35:02,520 --> 00:35:06,870
taking some time to learn about the

00:35:04,230 --> 00:35:08,190
exciting future of a very established

00:35:06,870 --> 00:35:10,860
heritage technology and how we can

00:35:08,190 --> 00:35:13,410
continue to bring new people onto that

00:35:10,860 --> 00:35:44,429
platform thank you

00:35:13,410 --> 00:35:44,429

YouTube URL: https://www.youtube.com/watch?v=MI-bZ-z1X7o


