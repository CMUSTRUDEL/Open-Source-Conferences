Title: Agility and security: Navigating the enterprise balancing act - GitHub Universe 2019
Publication date: 2019-12-14
Playlist: GitHub Universe 2019 - Case Studies
Description: 
	Featuring Window Snyder, CSO, Square, Rhys Arkins, Director of Product, Whitesource, and Jason Mealins, VP, Platform Engineering, Tanium. Moderated by Natalie Bradley, Field Architect, GitHub. 

Your business needs to innovate at the same pace of your customers’ fast-changing needs but without sacrificing necessary security and compliance processes. Balancing the tension between speed and risk is key to be successful—and there are lots of team management strategies and tools that can help. Hear from leaders who’ve learned how to strike a balance that works for their organizations and how you can borrow from what they’ve discovered.

About GitHub Universe:
GitHub Universe is a two-day conference dedicated to the creativity and curiosity of the largest software community in the world. Sessions cover topics from team culture to open source software across industries and technologies.

For more information on GitHub Universe, check the website:
https://githubuniverse.com
Captions: 
	00:00:00,680 --> 00:00:25,099
[Music]

00:00:22,210 --> 00:00:27,230
okay good afternoon everyone

00:00:25,099 --> 00:00:28,939
super excited you're all here hope

00:00:27,230 --> 00:00:31,699
you're enjoying your universe experience

00:00:28,939 --> 00:00:33,949
too so far I'm Natalie Bradley I'm a

00:00:31,699 --> 00:00:35,449
field architecture to github I work with

00:00:33,949 --> 00:00:37,570
our customers to help them modernize

00:00:35,449 --> 00:00:41,720
their software development practices

00:00:37,570 --> 00:00:43,940
specifically at scale our customers like

00:00:41,720 --> 00:00:47,089
many enterprise customers are focusing

00:00:43,940 --> 00:00:49,489
on implementing DevOps practices scaling

00:00:47,089 --> 00:00:50,780
agile method illah methodologies and

00:00:49,489 --> 00:00:53,330
shifting their culture to be more

00:00:50,780 --> 00:00:55,309
collaborative and transparent and I

00:00:53,330 --> 00:00:57,019
think it's obvious why they're looking

00:00:55,309 --> 00:00:59,809
to do this right because all of those

00:00:57,019 --> 00:01:02,449
practices and changes really enhance how

00:00:59,809 --> 00:01:04,909
a business is able to build at speed

00:01:02,449 --> 00:01:08,390
deliver efficiencies and quality

00:01:04,909 --> 00:01:11,900
products but with speed they often kind

00:01:08,390 --> 00:01:16,659
of find more security risks shall we say

00:01:11,900 --> 00:01:19,430
in your development process sorry so

00:01:16,659 --> 00:01:21,500
organizations are kind of trading off do

00:01:19,430 --> 00:01:23,600
we continue to build at speed or do we

00:01:21,500 --> 00:01:25,729
build more secure products so with me

00:01:23,600 --> 00:01:26,149
today I have a panel of experts on all

00:01:25,729 --> 00:01:28,039
things

00:01:26,149 --> 00:01:30,469
security and software development to

00:01:28,039 --> 00:01:33,859
kind of talk through this problem of how

00:01:30,469 --> 00:01:35,450
we balance both agility and security so

00:01:33,859 --> 00:01:38,899
I'm going to turn it over to you guys to

00:01:35,450 --> 00:01:41,210
introduce yourselves who you are kind of

00:01:38,899 --> 00:01:43,759
what you do where you came from and your

00:01:41,210 --> 00:01:45,350
background and a little bit about what

00:01:43,759 --> 00:01:48,319
software development practices look like

00:01:45,350 --> 00:01:51,829
in your organization recent we start

00:01:48,319 --> 00:01:53,810
with you hi so my name is Risa Hawkins

00:01:51,829 --> 00:01:55,850
and I work at a company called white

00:01:53,810 --> 00:01:59,990
soft I'm product director responsible

00:01:55,850 --> 00:02:03,560
for developer solutions we are actually

00:01:59,990 --> 00:02:05,090
both a github customer we use github

00:02:03,560 --> 00:02:07,249
very heavily to develop all of our

00:02:05,090 --> 00:02:10,429
software but we're also a security

00:02:07,249 --> 00:02:12,410
partner for github where we build open

00:02:10,429 --> 00:02:15,680
source security solutions that integrate

00:02:12,410 --> 00:02:19,550
with github and github Enterprise so we

00:02:15,680 --> 00:02:21,680
come from both angles there and within

00:02:19,550 --> 00:02:23,840
white sauce you know we have a mix of

00:02:21,680 --> 00:02:27,439
both open source as well as you know

00:02:23,840 --> 00:02:29,689
internal repositories and we have an

00:02:27,439 --> 00:02:30,890
agile methodology where we attempt to do

00:02:29,689 --> 00:02:34,580
regular soft

00:02:30,890 --> 00:02:35,930
delivery's we do how about you I'm

00:02:34,580 --> 00:02:39,140
window Schneider I'm the chief security

00:02:35,930 --> 00:02:41,360
officer at square and prior to square I

00:02:39,140 --> 00:02:44,020
have been in security leadership roles

00:02:41,360 --> 00:02:48,020
at companies like Intel Apple Microsoft

00:02:44,020 --> 00:02:49,430
Mozilla and fastly I started off as a

00:02:48,020 --> 00:02:51,800
software engineer and developed a number

00:02:49,430 --> 00:02:56,560
of methodologies including threat

00:02:51,800 --> 00:03:00,170
modeling to support application security

00:02:56,560 --> 00:03:01,700
analysis and mitigation at a time when

00:03:00,170 --> 00:03:04,160
we didn't have much of an application

00:03:01,700 --> 00:03:05,209
application security space so I've

00:03:04,160 --> 00:03:08,270
gotten to see a lot of different kinds

00:03:05,209 --> 00:03:10,070
of security engineering environments and

00:03:08,270 --> 00:03:11,720
work on security in those environments

00:03:10,070 --> 00:03:12,820
and that's what we're talking about

00:03:11,720 --> 00:03:15,830
today

00:03:12,820 --> 00:03:17,420
I'm Jason Mewes I work a titanium or an

00:03:15,830 --> 00:03:20,540
endpoint security platform I've been

00:03:17,420 --> 00:03:24,260
doing platform development for about 16

00:03:20,540 --> 00:03:26,269
years when you deliver solutions on over

00:03:24,260 --> 00:03:29,209
a dozen platform and architectures and

00:03:26,269 --> 00:03:30,920
so we we aim to help our customers

00:03:29,209 --> 00:03:32,390
customers to secure their environments

00:03:30,920 --> 00:03:35,590
and report on everything that they see

00:03:32,390 --> 00:03:37,579
within them we do a mostly air gaps

00:03:35,590 --> 00:03:42,070
development practice using github

00:03:37,579 --> 00:03:44,450
enterprise and so before we get too

00:03:42,070 --> 00:03:46,130
indepe with all of these questions you

00:03:44,450 --> 00:03:47,209
just want to level set a little bit

00:03:46,130 --> 00:03:48,440
because there's probably some terms that

00:03:47,209 --> 00:03:50,060
we're gonna use quite a bit and I want

00:03:48,440 --> 00:03:52,010
to make sure that we're all using the

00:03:50,060 --> 00:03:54,350
same definition for these so Rhys can

00:03:52,010 --> 00:03:56,269
you tell us a little bit about what

00:03:54,350 --> 00:03:59,450
shift to the left means the developer

00:03:56,269 --> 00:04:02,780
mentality or noise what those kind of

00:03:59,450 --> 00:04:05,410
terms mean to all of us sure yeah so

00:04:02,780 --> 00:04:08,000
shift left is a term that you hear a lot

00:04:05,410 --> 00:04:10,370
in the in the industry so it's a really

00:04:08,000 --> 00:04:13,280
good one to to define what we mean by it

00:04:10,370 --> 00:04:15,739
in general the concept of shift left

00:04:13,280 --> 00:04:18,140
originates from this idea or it's not

00:04:15,739 --> 00:04:20,090
even idea to concept that when the

00:04:18,140 --> 00:04:21,890
earlier you catch problems in the

00:04:20,090 --> 00:04:25,400
software development lifecycle the

00:04:21,890 --> 00:04:28,310
cheaper it will be to fix them so the

00:04:25,400 --> 00:04:30,470
idea being that you know problems such

00:04:28,310 --> 00:04:32,810
as security problems that are caught in

00:04:30,470 --> 00:04:35,570
say the development phase might be 10

00:04:32,810 --> 00:04:38,710
times cheaper to address and if they're

00:04:35,570 --> 00:04:41,240
caught in the testing and QA phase and

00:04:38,710 --> 00:04:42,919
depending upon the type of software that

00:04:41,240 --> 00:04:44,460
you build it's it's very hard to put a

00:04:42,919 --> 00:04:46,650
figure on how much

00:04:44,460 --> 00:04:48,300
more expensive security problem is if it

00:04:46,650 --> 00:04:50,430
actually gets out into the wild

00:04:48,300 --> 00:04:53,610
right so for shift left we kind of mean

00:04:50,430 --> 00:04:55,009
let's try and address things earlier in

00:04:53,610 --> 00:04:57,180
the software development lifecycle

00:04:55,009 --> 00:05:00,389
that's that that's the very like

00:04:57,180 --> 00:05:02,849
theoretical approach to it practically

00:05:00,389 --> 00:05:06,120
what this means in a security point of

00:05:02,849 --> 00:05:09,360
view is giving developers the tools they

00:05:06,120 --> 00:05:11,520
require to perform the responsibilities

00:05:09,360 --> 00:05:15,030
that we now put on them to secure

00:05:11,520 --> 00:05:18,199
software from from the beginning so you

00:05:15,030 --> 00:05:20,880
know if we are saying that you know

00:05:18,199 --> 00:05:24,330
security is a shared responsibility and

00:05:20,880 --> 00:05:27,570
developers take over the role of or

00:05:24,330 --> 00:05:28,949
assume much of the role of security we

00:05:27,570 --> 00:05:31,289
need more than just words there so

00:05:28,949 --> 00:05:33,449
developers need visibility they need

00:05:31,289 --> 00:05:36,810
access to policies and things like that

00:05:33,449 --> 00:05:40,289
so an example of like say shift left

00:05:36,810 --> 00:05:41,699
done wrong just a mild example which was

00:05:40,289 --> 00:05:43,800
brought up yesterday at the birds of a

00:05:41,699 --> 00:05:45,569
feather was where a developer brought

00:05:43,800 --> 00:05:48,720
essentially a finished product for

00:05:45,569 --> 00:05:50,580
review only for everybody to discover it

00:05:48,720 --> 00:05:53,820
was built on top of a third-party

00:05:50,580 --> 00:05:55,470
dependency that was not appropriate for

00:05:53,820 --> 00:05:57,000
the way it was going to be released so

00:05:55,470 --> 00:05:59,520
it had to go all the way back and to be

00:05:57,000 --> 00:06:01,530
largely rewritten this is not

00:05:59,520 --> 00:06:03,509
necessarily developers fault if there

00:06:01,530 --> 00:06:07,190
wasn't a process in place where the

00:06:03,509 --> 00:06:10,080
second that they attempted to use a

00:06:07,190 --> 00:06:11,669
dependency that did not match you know

00:06:10,080 --> 00:06:13,440
policies that they weren't alerted to

00:06:11,669 --> 00:06:14,880
that so if we think of how they could

00:06:13,440 --> 00:06:17,400
have gone more left

00:06:14,880 --> 00:06:19,770
first of all ideally it wouldn't get to

00:06:17,400 --> 00:06:21,060
like a human review ideally that would

00:06:19,770 --> 00:06:24,090
have been caught in like automated

00:06:21,060 --> 00:06:28,080
testing like so at the minimum the

00:06:24,090 --> 00:06:30,690
minute that it was pushed to github and

00:06:28,080 --> 00:06:32,639
run on CIC be if you have corporate

00:06:30,690 --> 00:06:34,380
policies for dependencies then it should

00:06:32,639 --> 00:06:35,729
have been caught they're ideal it could

00:06:34,380 --> 00:06:38,070
have been caught even earlier and this

00:06:35,729 --> 00:06:39,960
is where tools such as IDE plugins come

00:06:38,070 --> 00:06:44,400
in so like a developer could literally

00:06:39,960 --> 00:06:46,169
go to install a dependency and get a

00:06:44,400 --> 00:06:50,940
real-time alert that this dependency

00:06:46,169 --> 00:06:53,310
violates a security or a licensing you

00:06:50,940 --> 00:06:55,529
know things like that so yes so

00:06:53,310 --> 00:06:58,379
essentially shift left in practice means

00:06:55,529 --> 00:07:00,509
that if you

00:06:58,379 --> 00:07:02,310
if you ask developers to assume the

00:07:00,509 --> 00:07:03,930
roles of security you've got to give

00:07:02,310 --> 00:07:05,479
them the tools and the visibility that

00:07:03,930 --> 00:07:08,870
they need to do that you can't just say

00:07:05,479 --> 00:07:12,840
Security's everybody's responsibility

00:07:08,870 --> 00:07:15,930
okay so now that we've kind of got that

00:07:12,840 --> 00:07:18,120
cleared up what where do we begin with

00:07:15,930 --> 00:07:20,520
all of this right there's tons of

00:07:18,120 --> 00:07:23,280
security tools out there there's best

00:07:20,520 --> 00:07:26,069
practices there's experts there's

00:07:23,280 --> 00:07:28,349
different roles and functional areas do

00:07:26,069 --> 00:07:31,500
we need to change our models do we need

00:07:28,349 --> 00:07:33,960
to change who we are what we do we're

00:07:31,500 --> 00:07:36,419
window would you say we begin in all of

00:07:33,960 --> 00:07:37,650
this well we definitely begin with

00:07:36,419 --> 00:07:39,780
security requirements because if you

00:07:37,650 --> 00:07:42,360
don't define what you need to protect

00:07:39,780 --> 00:07:45,840
against and then you're operating a

00:07:42,360 --> 00:07:47,550
little bit blind and defining the

00:07:45,840 --> 00:07:49,800
requirements is appropriate even if

00:07:47,550 --> 00:07:50,969
you're coming into an environment where

00:07:49,800 --> 00:07:52,169
there's an established product it's been

00:07:50,969 --> 00:07:56,310
out there you've got legacy of ten years

00:07:52,169 --> 00:07:57,599
of code or more sometimes a lot more if

00:07:56,310 --> 00:07:59,189
you don't know what the requirements are

00:07:57,599 --> 00:08:00,419
then it's hard to evaluate which risks

00:07:59,189 --> 00:08:01,650
you can tolerate which risks need and

00:08:00,419 --> 00:08:02,940
mitigated it's hard to evaluate whether

00:08:01,650 --> 00:08:05,190
or not this risk is sufficient this

00:08:02,940 --> 00:08:07,229
mitigation is sufficient to the risk and

00:08:05,190 --> 00:08:10,319
how much of an investment makes sense in

00:08:07,229 --> 00:08:11,789
these kinds of environments so I always

00:08:10,319 --> 00:08:14,969
want to start by identifying what's

00:08:11,789 --> 00:08:17,400
important what risks were concerned with

00:08:14,969 --> 00:08:20,460
and what are the requirements to the

00:08:17,400 --> 00:08:22,050
security requirements for the system in

00:08:20,460 --> 00:08:25,319
an organization trying to figure out

00:08:22,050 --> 00:08:26,460
where to start there is a tendency to

00:08:25,319 --> 00:08:28,469
start in places that are high-impact

00:08:26,460 --> 00:08:31,500
like looking for vulnerabilities to

00:08:28,469 --> 00:08:34,709
demonstrate that the the work you want

00:08:31,500 --> 00:08:37,079
to do in making a product system and

00:08:34,709 --> 00:08:38,419
network more resilience is justified

00:08:37,079 --> 00:08:40,380
because look at these vulnerabilities

00:08:38,419 --> 00:08:42,390
but if you're in an environment that's

00:08:40,380 --> 00:08:44,099
already on board with oh yeah we do have

00:08:42,390 --> 00:08:46,980
to do some security work here because we

00:08:44,099 --> 00:08:48,690
can recognize that this is the way the

00:08:46,980 --> 00:08:51,360
the landscape looks that we would like

00:08:48,690 --> 00:08:55,320
people who are in our space who are

00:08:51,360 --> 00:08:58,350
deploying similar apps or operations do

00:08:55,320 --> 00:09:02,070
see attacker so we have to incorporate

00:08:58,350 --> 00:09:04,440
that into our thinking then they're the

00:09:02,070 --> 00:09:08,220
investment of demonstration is not

00:09:04,440 --> 00:09:09,630
nearly as valuable as evaluating the

00:09:08,220 --> 00:09:10,980
resiliency of the system and starting

00:09:09,630 --> 00:09:12,509
from the perspective of

00:09:10,980 --> 00:09:14,399
what are we trying to protect in the

00:09:12,509 --> 00:09:16,470
system what are we what mechanisms are

00:09:14,399 --> 00:09:18,779
in place to make the system more

00:09:16,470 --> 00:09:21,389
resilient and are they sufficient to the

00:09:18,779 --> 00:09:22,739
threats that we see both in our

00:09:21,389 --> 00:09:24,899
environment and in similar environments

00:09:22,739 --> 00:09:26,970
and potentially in environments that are

00:09:24,899 --> 00:09:31,439
more sophisticated but may have

00:09:26,970 --> 00:09:32,819
attackers moving from from certain kinds

00:09:31,439 --> 00:09:34,980
of targets to targets that look maybe

00:09:32,819 --> 00:09:38,009
more like your environment your app your

00:09:34,980 --> 00:09:40,170
deployment a Jason would you agree with

00:09:38,009 --> 00:09:43,170
that do be seen similar experience when

00:09:40,170 --> 00:09:45,600
you're beginning yeah you know you know

00:09:43,170 --> 00:09:47,699
what recent window said is very

00:09:45,600 --> 00:09:49,139
applicable I mean you really want to

00:09:47,699 --> 00:09:50,610
security to be all parts of the practice

00:09:49,139 --> 00:09:52,709
if you want to make it everyone's job

00:09:50,610 --> 00:09:54,660
you need not only to you armed people

00:09:52,709 --> 00:09:56,279
with the tools to do good design reviews

00:09:54,660 --> 00:09:58,199
you need to have a good security team

00:09:56,279 --> 00:10:01,019
you need to invest in outside plan

00:09:58,199 --> 00:10:02,519
testing resources it's there's no single

00:10:01,019 --> 00:10:04,649
point of success when it comes to

00:10:02,519 --> 00:10:06,509
security it's at every point of the

00:10:04,649 --> 00:10:08,429
development cycle it's at every moment

00:10:06,509 --> 00:10:10,319
of progress you need to stop and

00:10:08,429 --> 00:10:13,679
reevaluate what we're building why we're

00:10:10,319 --> 00:10:14,790
building it and is it secure do you mind

00:10:13,679 --> 00:10:17,189
talking a little bit more about that

00:10:14,790 --> 00:10:19,439
external pentesting group and kind of

00:10:17,189 --> 00:10:21,480
why you would go external to

00:10:19,439 --> 00:10:24,389
organization to bring them in I think

00:10:21,480 --> 00:10:26,339
it's you really want to you know invest

00:10:24,389 --> 00:10:27,839
in both internal resources you know you

00:10:26,339 --> 00:10:29,459
have these bots that you buy that

00:10:27,839 --> 00:10:31,949
analyze your source code you just attic

00:10:29,459 --> 00:10:33,329
analysis you thread sanitizer but when

00:10:31,949 --> 00:10:35,399
you're looking at your software from the

00:10:33,329 --> 00:10:38,309
inside over and over again

00:10:35,399 --> 00:10:41,220
you tend to get stuck in patterns so by

00:10:38,309 --> 00:10:44,189
looking to outside firms to validate

00:10:41,220 --> 00:10:46,920
your assumptions or uncover new

00:10:44,189 --> 00:10:49,129
assumptions you just you're constantly

00:10:46,920 --> 00:10:51,959
keeping your security practice fresh i

00:10:49,129 --> 00:10:56,339
if you stick on one thing you'll get

00:10:51,959 --> 00:10:59,040
stuck okay awesome and Rhys what about

00:10:56,339 --> 00:11:01,619
you have you seen any patterns with

00:10:59,040 --> 00:11:03,749
enterprise customers that are super

00:11:01,619 --> 00:11:05,970
successful in getting them to start to

00:11:03,749 --> 00:11:07,499
take off yeah yeah so this is coming

00:11:05,970 --> 00:11:09,209
from the experience of you know seeing

00:11:07,499 --> 00:11:10,619
multiple customers and you know

00:11:09,209 --> 00:11:13,589
sometimes things seem to work really

00:11:10,619 --> 00:11:17,100
well sometimes not so much one of the

00:11:13,589 --> 00:11:19,860
things with bringing security tools into

00:11:17,100 --> 00:11:21,869
the workflow is that you can have this

00:11:19,860 --> 00:11:23,100
high amount of what we call noise if

00:11:21,869 --> 00:11:25,829
you're not careful

00:11:23,100 --> 00:11:28,230
you know so you know tell me a great

00:11:25,829 --> 00:11:29,940
security scanning tool and I'll find you

00:11:28,230 --> 00:11:32,310
a hundred people on Twitter boasting

00:11:29,940 --> 00:11:34,709
that they send all of its emails to

00:11:32,310 --> 00:11:36,570
trash you know like if you don't have a

00:11:34,709 --> 00:11:38,880
handle the noise right that's kind of

00:11:36,570 --> 00:11:40,709
the result that you will get and this is

00:11:38,880 --> 00:11:43,769
especially true if you have like a large

00:11:40,709 --> 00:11:45,750
number of repositories or you are also

00:11:43,769 --> 00:11:46,980
shifting left very fast you know if

00:11:45,750 --> 00:11:49,709
you're going from having minimal

00:11:46,980 --> 00:11:53,550
automated approaches to having you know

00:11:49,709 --> 00:11:55,740
really sophisticated tools so in terms

00:11:53,550 --> 00:11:57,750
of what we see companies doing right

00:11:55,740 --> 00:12:02,459
that is that they manage the

00:11:57,750 --> 00:12:05,610
signal-to-noise ratio now you know so

00:12:02,459 --> 00:12:08,699
first part is that like as an example

00:12:05,610 --> 00:12:10,920
not all projects are created equal so

00:12:08,699 --> 00:12:12,000
you may have like a vulnerability a

00:12:10,920 --> 00:12:14,459
Security Alert

00:12:12,000 --> 00:12:16,829
but if that's like an internal like

00:12:14,459 --> 00:12:19,470
timesheet tool or something like that or

00:12:16,829 --> 00:12:22,589
if that is a back-end that has very

00:12:19,470 --> 00:12:26,220
strongly typed inputs then a large

00:12:22,589 --> 00:12:27,360
majority of the vulnerabilities you

00:12:26,220 --> 00:12:29,940
might get raised for that are

00:12:27,360 --> 00:12:33,209
essentially not applicable so the first

00:12:29,940 --> 00:12:35,579
thing that companies doing a good job of

00:12:33,209 --> 00:12:39,540
is that they have at least two tiers

00:12:35,579 --> 00:12:42,000
between like exterior facing projects

00:12:39,540 --> 00:12:43,319
and internal ones because you know if

00:12:42,000 --> 00:12:45,990
you've got a team with limit amount of

00:12:43,319 --> 00:12:48,000
time and limited patience if you start

00:12:45,990 --> 00:12:50,250
like alerting them that you know that

00:12:48,000 --> 00:12:52,709
the the buildings on fire the buildings

00:12:50,250 --> 00:12:55,139
on fire and then they look and say okay

00:12:52,709 --> 00:12:57,510
no that's just not that's just not going

00:12:55,139 --> 00:12:59,430
to happen you know so the best ones the

00:12:57,510 --> 00:13:01,529
best approaches have like a first step

00:12:59,430 --> 00:13:04,260
automatic triaging between external

00:13:01,529 --> 00:13:07,439
facing internal facing so that can

00:13:04,260 --> 00:13:10,519
reduce things a great deal the second

00:13:07,439 --> 00:13:13,319
approach is a little more you know

00:13:10,519 --> 00:13:16,410
subjective and that is that a large

00:13:13,319 --> 00:13:18,000
degree of the security threats are still

00:13:16,410 --> 00:13:21,000
not applicable even if they are user

00:13:18,000 --> 00:13:23,579
facing because they require the user to

00:13:21,000 --> 00:13:27,600
have the ability to very specifically

00:13:23,579 --> 00:13:29,550
craft inputs so like a very good for

00:13:27,600 --> 00:13:32,710
second step I should say in this like

00:13:29,550 --> 00:13:35,680
filtering process or triage is

00:13:32,710 --> 00:13:37,900
that you try to identify immediately

00:13:35,680 --> 00:13:40,120
that the description for this like

00:13:37,900 --> 00:13:41,890
vulnerability or this security threat is

00:13:40,120 --> 00:13:44,050
it actually possible for the user to

00:13:41,890 --> 00:13:46,060
craft that type of thing or as it is

00:13:44,050 --> 00:13:47,170
impossible in our system now even if

00:13:46,060 --> 00:13:48,340
it's impossible that doesn't mean you

00:13:47,170 --> 00:13:50,050
don't wanna get rid of it but it means

00:13:48,340 --> 00:13:51,430
you don't want to be telling people stop

00:13:50,050 --> 00:13:53,710
all the work you're doing and so on

00:13:51,430 --> 00:13:56,170
so basically the ability to have like a

00:13:53,710 --> 00:13:59,470
multi-stage triage process semi

00:13:56,170 --> 00:14:03,130
automated and semi manual where you only

00:13:59,470 --> 00:14:06,160
alert people to fires when you've gone

00:14:03,130 --> 00:14:08,640
through a minimal amount of triaging

00:14:06,160 --> 00:14:10,990
this is very important because otherwise

00:14:08,640 --> 00:14:13,120
you'll just not get you'll struggle to

00:14:10,990 --> 00:14:15,610
get acceptance of tools because you're

00:14:13,120 --> 00:14:16,960
just constantly alerting people to

00:14:15,610 --> 00:14:19,360
things that they think are wasting the

00:14:16,960 --> 00:14:23,380
time that's awesome that's great I'm a

00:14:19,360 --> 00:14:25,330
pattern to get people justed too so

00:14:23,380 --> 00:14:27,610
let's check out the like breakthrough

00:14:25,330 --> 00:14:28,810
moment so obviously you've all come up

00:14:27,610 --> 00:14:30,310
in your careers and you've worked with

00:14:28,810 --> 00:14:31,690
different organizations and they're all

00:14:30,310 --> 00:14:34,510
in different phases but if you have a

00:14:31,690 --> 00:14:36,520
beginning and you start to see your

00:14:34,510 --> 00:14:38,170
development teams in your organization's

00:14:36,520 --> 00:14:40,300
start to do things smarter and better

00:14:38,170 --> 00:14:42,100
when did you notice that breakthrough

00:14:40,300 --> 00:14:44,020
moment of like okay we're actually

00:14:42,100 --> 00:14:47,470
getting it where we're moving there and

00:14:44,020 --> 00:14:51,340
how did you keep that momentum alive

00:14:47,470 --> 00:14:53,260
we don't even think going sure in 2002 I

00:14:51,340 --> 00:14:53,980
had just run Microsoft and I had come

00:14:53,260 --> 00:14:56,460
from a company called

00:14:53,980 --> 00:14:58,660
at stake which was a very early security

00:14:56,460 --> 00:15:02,110
consulting company Fair Play on security

00:14:58,660 --> 00:15:06,790
consulting and at Microsoft there was a

00:15:02,110 --> 00:15:08,110
lot of pain around malware and Bill

00:15:06,790 --> 00:15:09,520
Gates had just released the memo about

00:15:08,110 --> 00:15:11,950
how we're gonna you know turn the ship

00:15:09,520 --> 00:15:13,420
and take security seriously etc but I

00:15:11,950 --> 00:15:16,150
found I was beating my head against a

00:15:13,420 --> 00:15:18,910
wall in terms of trying to get security

00:15:16,150 --> 00:15:20,860
work in place now to be fair we didn't

00:15:18,910 --> 00:15:22,300
have books on security on application

00:15:20,860 --> 00:15:23,850
security work back there there was there

00:15:22,300 --> 00:15:28,630
was barely an industry around

00:15:23,850 --> 00:15:30,460
application or product security so it's

00:15:28,630 --> 00:15:32,680
not surprising that there was a you know

00:15:30,460 --> 00:15:34,300
a little resistance to this because it's

00:15:32,680 --> 00:15:35,470
a security work that you want to do

00:15:34,300 --> 00:15:36,670
especially in an engineering environment

00:15:35,470 --> 00:15:38,320
is always in conflict with things like

00:15:36,670 --> 00:15:39,430
performance or schedule or some

00:15:38,320 --> 00:15:41,260
delightful feature that you want to ship

00:15:39,430 --> 00:15:42,040
to your customers but it's gonna

00:15:41,260 --> 00:15:43,090
undermine the entire security

00:15:42,040 --> 00:15:46,480
architecture of everything you've built

00:15:43,090 --> 00:15:49,089
so it was very hard to make

00:15:46,480 --> 00:15:52,170
progress until slammer and blaster over

00:15:49,089 --> 00:15:55,570
the same couple of months really

00:15:52,170 --> 00:15:56,649
inflamed the entire ecosystem people are

00:15:55,570 --> 00:15:58,180
feeling a lot of pain

00:15:56,649 --> 00:15:59,620
customers were feeling pain and that

00:15:58,180 --> 00:16:01,329
meant Microsoft is feeling pain and all

00:15:59,620 --> 00:16:03,250
of a sudden they were very open to a lot

00:16:01,329 --> 00:16:07,600
of the work that I was trying to drive

00:16:03,250 --> 00:16:09,880
there so pain is is very useful but it's

00:16:07,600 --> 00:16:11,199
not sufficient because you don't you

00:16:09,880 --> 00:16:12,190
don't want your organization to have to

00:16:11,199 --> 00:16:14,320
go through that pain in the first place

00:16:12,190 --> 00:16:17,350
especially if you have contributions

00:16:14,320 --> 00:16:19,660
that you want to get out into the into

00:16:17,350 --> 00:16:21,010
the engineering environment into the

00:16:19,660 --> 00:16:23,139
into the operations and the

00:16:21,010 --> 00:16:27,190
infrastructure that will prevent that

00:16:23,139 --> 00:16:29,139
pain from happening so leveraging out

00:16:27,190 --> 00:16:31,029
someone else's pain is fantastic if

00:16:29,139 --> 00:16:32,019
you're able to do it like this is what

00:16:31,029 --> 00:16:33,310
the world used to look like before we

00:16:32,019 --> 00:16:34,360
did this kind of work and that's why we

00:16:33,310 --> 00:16:37,120
do this kind of work so we don't feel

00:16:34,360 --> 00:16:42,389
this kind of pain that's fantastic if

00:16:37,120 --> 00:16:45,670
you can to see that there are public

00:16:42,389 --> 00:16:47,470
disclosures of incidents that could have

00:16:45,670 --> 00:16:49,750
happened to this environment your

00:16:47,470 --> 00:16:51,370
environment your application but won't

00:16:49,750 --> 00:16:53,260
because they happen somebody else and so

00:16:51,370 --> 00:16:54,910
we can see that this is a problem that

00:16:53,260 --> 00:16:57,730
we need to mitigate make sure that we

00:16:54,910 --> 00:16:59,339
are resilient against that we can great

00:16:57,730 --> 00:17:02,350
justified in making an investment in

00:16:59,339 --> 00:17:04,299
that's useful as well but there are lots

00:17:02,350 --> 00:17:05,589
of organizations that are able to do

00:17:04,299 --> 00:17:07,030
that kind of work proactively that are

00:17:05,589 --> 00:17:10,089
able to justify that kind of investment

00:17:07,030 --> 00:17:13,000
and it's it's generally our

00:17:10,089 --> 00:17:15,549
responsibility as security folks to try

00:17:13,000 --> 00:17:18,459
and find the right balance between the

00:17:15,549 --> 00:17:21,610
the business needs and the security risk

00:17:18,459 --> 00:17:22,510
and help expose that to the the folks

00:17:21,610 --> 00:17:24,459
who need to make decisions for that

00:17:22,510 --> 00:17:27,010
product product manager the leadership

00:17:24,459 --> 00:17:28,630
of that organization probably you to

00:17:27,010 --> 00:17:32,620
some degree if you're if you're in that

00:17:28,630 --> 00:17:34,860
that role to demonstrate and make more

00:17:32,620 --> 00:17:38,980
visible the kinds of risks that your

00:17:34,860 --> 00:17:44,380
deployment application network or

00:17:38,980 --> 00:17:47,169
company are up against but for the kinds

00:17:44,380 --> 00:17:48,730
of environments that are just starting

00:17:47,169 --> 00:17:50,500
to think about what is security what

00:17:48,730 --> 00:17:53,110
kind of security required for for our

00:17:50,500 --> 00:17:56,049
needs not waiting until you feel that

00:17:53,110 --> 00:17:58,580
that that pain point is going to mean

00:17:56,049 --> 00:18:02,090
that your earlier on in the development

00:17:58,580 --> 00:18:04,700
Faye's you are equipped to do the kind

00:18:02,090 --> 00:18:06,640
of work that is a design change on a

00:18:04,700 --> 00:18:10,100
whiteboard before it's a massive code

00:18:06,640 --> 00:18:11,510
implementation that needs to be reworked

00:18:10,100 --> 00:18:13,880
or thrown out

00:18:11,510 --> 00:18:15,740
hopefully not and the earlier you're

00:18:13,880 --> 00:18:17,659
able to make those kinds of changes and

00:18:15,740 --> 00:18:20,090
raise this kind of awareness or I think

00:18:17,659 --> 00:18:23,120
about what in what ways the application

00:18:20,090 --> 00:18:24,919
or system needs to be resilient and to

00:18:23,120 --> 00:18:26,510
what and what sort of investment is

00:18:24,919 --> 00:18:28,190
appropriate for this business you're

00:18:26,510 --> 00:18:30,260
going to be able to mitigate that pain

00:18:28,190 --> 00:18:32,960
for this company and then the

00:18:30,260 --> 00:18:34,580
unfortunate end of this is that after

00:18:32,960 --> 00:18:36,440
you've built something that's pretty

00:18:34,580 --> 00:18:37,700
strong pretty resilient almost certainly

00:18:36,440 --> 00:18:39,590
you'll get no credit for having done

00:18:37,700 --> 00:18:41,720
this because you only see security when

00:18:39,590 --> 00:18:43,580
it fails so you just get to know that

00:18:41,720 --> 00:18:45,049
like hey I think I addressed the things

00:18:43,580 --> 00:18:46,610
that I care most about that are most

00:18:45,049 --> 00:18:49,130
important for this business this system

00:18:46,610 --> 00:18:51,260
and that's gonna have to probably be

00:18:49,130 --> 00:18:52,640
enough for us so breakthrough moment

00:18:51,260 --> 00:18:54,740
it's almost when no one comes knocking

00:18:52,640 --> 00:18:56,960
on your door for a couple weeks at a

00:18:54,740 --> 00:18:58,909
time because there are no issues it's

00:18:56,960 --> 00:19:00,169
kind of a good thing well if you don't

00:18:58,909 --> 00:19:02,120
see any security issues it might be

00:19:00,169 --> 00:19:05,210
because you're resilient to it you're

00:19:02,120 --> 00:19:06,559
not you're not vulnerable to the to the

00:19:05,210 --> 00:19:07,580
attackers that are out there or it might

00:19:06,559 --> 00:19:08,960
be because you're not very good at

00:19:07,580 --> 00:19:11,090
looking for them and your audit

00:19:08,960 --> 00:19:12,710
mechanisms are insufficient so yeah you

00:19:11,090 --> 00:19:13,960
just you only know how to look for the

00:19:12,710 --> 00:19:16,309
things you know how to look for so

00:19:13,960 --> 00:19:18,260
instead of trying to address the things

00:19:16,309 --> 00:19:22,120
you know how to look for building a

00:19:18,260 --> 00:19:27,830
foundation of resilience that is

00:19:22,120 --> 00:19:31,190
functional in its core function is is is

00:19:27,830 --> 00:19:34,279
going to help you develop a more

00:19:31,190 --> 00:19:36,640
realistic sense of what you should have

00:19:34,279 --> 00:19:43,970
confidence in and what is going to be

00:19:36,640 --> 00:19:45,770
let's say more exposed I think it's it's

00:19:43,970 --> 00:19:48,409
the the things that everyone know you

00:19:45,770 --> 00:19:51,140
know having good build pipelines

00:19:48,409 --> 00:19:53,270
infrastructures code you know if people

00:19:51,140 --> 00:19:54,770
are spending a lot of their time trying

00:19:53,270 --> 00:19:57,289
to recreate their build environments

00:19:54,770 --> 00:19:58,669
recreate their dependencies you're going

00:19:57,289 --> 00:20:00,460
to keep making different mistakes over

00:19:58,669 --> 00:20:03,740
and over again so it's simply just

00:20:00,460 --> 00:20:06,320
stopping spending the time to make sure

00:20:03,740 --> 00:20:07,970
packages are repeatable make sure builds

00:20:06,320 --> 00:20:09,730
are repeatable make sure that people can

00:20:07,970 --> 00:20:11,710
easily test new

00:20:09,730 --> 00:20:14,260
new pieces of software new pieces of

00:20:11,710 --> 00:20:16,090
code and most importantly regression

00:20:14,260 --> 00:20:17,920
testing right if you have as a bomb

00:20:16,090 --> 00:20:19,300
vulnerability why isn't that a test why

00:20:17,920 --> 00:20:22,450
isn't that running every time you build

00:20:19,300 --> 00:20:23,830
because it's the 78th time when someone

00:20:22,450 --> 00:20:25,720
makes a change way over here that

00:20:23,830 --> 00:20:27,460
something breaks it's the initial

00:20:25,720 --> 00:20:29,590
investment in time and infrastructure

00:20:27,460 --> 00:20:32,830
and build pipelines is is invaluable

00:20:29,590 --> 00:20:34,540
like too many too many times we take

00:20:32,830 --> 00:20:36,790
shortcuts and we don't spend the time to

00:20:34,540 --> 00:20:39,580
build our infrastructure properly and we

00:20:36,790 --> 00:20:40,960
always it always pays dividends so I'm

00:20:39,580 --> 00:20:42,550
gonna piggyback off that thought because

00:20:40,960 --> 00:20:45,790
we talked about what makes organizations

00:20:42,550 --> 00:20:48,090
successful so you kind of let a little

00:20:45,790 --> 00:20:49,930
bit into what makes them unsuccessful

00:20:48,090 --> 00:20:51,340
Reese do you have anything to add

00:20:49,930 --> 00:20:53,170
because you kind of talked us through

00:20:51,340 --> 00:20:54,400
what you've seen that was successful can

00:20:53,170 --> 00:20:56,380
you talk us through what maybe you have

00:20:54,400 --> 00:20:58,630
seen that is not successful or not

00:20:56,380 --> 00:21:01,060
working yeah yeah so I almost did that

00:20:58,630 --> 00:21:01,960
earlier on the on the flip side so you

00:21:01,060 --> 00:21:04,420
know we talked about signal-to-noise

00:21:01,960 --> 00:21:06,670
ratio so a classic way to be

00:21:04,420 --> 00:21:09,970
unsuccessful is to spend time chasing

00:21:06,670 --> 00:21:12,310
after alerts and vulnerabilities that

00:21:09,970 --> 00:21:13,480
are not actually like applicable you

00:21:12,310 --> 00:21:15,670
know and we kind of a perfect world

00:21:13,480 --> 00:21:18,510
where we just automatically know for

00:21:15,670 --> 00:21:21,370
sure but certainly a classic

00:21:18,510 --> 00:21:26,110
anti-pattern is you know chasing after

00:21:21,370 --> 00:21:28,210
every single alert that is raised so

00:21:26,110 --> 00:21:30,930
that then takes it to the like the next

00:21:28,210 --> 00:21:33,940
challenge right nice okay so how do we

00:21:30,930 --> 00:21:36,370
within the organization how do we kind

00:21:33,940 --> 00:21:38,200
of prioritize or how do we decide what

00:21:36,370 --> 00:21:40,570
to do right and but this can actually

00:21:38,200 --> 00:21:43,180
lead to the next problem which is where

00:21:40,570 --> 00:21:46,030
if you take an overly simplistic

00:21:43,180 --> 00:21:48,310
approach to measuring success you know

00:21:46,030 --> 00:21:50,680
and it's very tempting to use you know

00:21:48,310 --> 00:21:53,770
numbers for that as we all can count and

00:21:50,680 --> 00:21:55,780
measure that's a classic mistake so to

00:21:53,770 --> 00:21:58,600
give an example you might bring in

00:21:55,780 --> 00:22:01,360
security scanning and you get a number

00:21:58,600 --> 00:22:02,950
you get a count and you can say okay so

00:22:01,360 --> 00:22:05,530
maybe we're going to be modest we're

00:22:02,950 --> 00:22:08,050
going to say every month we want to

00:22:05,530 --> 00:22:09,460
bring that total down something like

00:22:08,050 --> 00:22:10,990
that well you might say we want to

00:22:09,460 --> 00:22:12,790
reduce it by ten percent twenty percent

00:22:10,990 --> 00:22:16,540
something like that so this is kind of

00:22:12,790 --> 00:22:18,460
like a top-line approach to it now there

00:22:16,540 --> 00:22:21,370
are a couple of sayings

00:22:18,460 --> 00:22:23,560
quite similar that I like one that is

00:22:21,370 --> 00:22:25,960
that you are what you measure and the

00:22:23,560 --> 00:22:28,330
other is show me the incentives and I'll

00:22:25,960 --> 00:22:29,800
show you the results so if you take a

00:22:28,330 --> 00:22:32,140
top-line approach where you say we want

00:22:29,800 --> 00:22:34,720
to reduce the raw number and people in

00:22:32,140 --> 00:22:36,490
companies are rational and they will do

00:22:34,720 --> 00:22:38,200
whatever they can do to reduce that

00:22:36,490 --> 00:22:40,570
number in the quickest amount of time

00:22:38,200 --> 00:22:45,340
and that would probably mean they're

00:22:40,570 --> 00:22:48,910
going to look at ignoring or remediating

00:22:45,340 --> 00:22:50,380
the lowest priority or quickest to solve

00:22:48,910 --> 00:22:51,910
first right because you've told them

00:22:50,380 --> 00:22:54,820
we're rewarding you based upon how many

00:22:51,910 --> 00:22:56,880
you close they'll close the ones that

00:22:54,820 --> 00:22:59,680
are quickest and that might be almost

00:22:56,880 --> 00:23:02,020
the opposite end of actually what's most

00:22:59,680 --> 00:23:04,150
important you know you leave the hardest

00:23:02,020 --> 00:23:06,100
ones the most dangerous ones because

00:23:04,150 --> 00:23:08,680
you've been incentivized to to lower a

00:23:06,100 --> 00:23:11,560
number on the other hand though people

00:23:08,680 --> 00:23:13,180
might say okay I understand that mistake

00:23:11,560 --> 00:23:14,880
so what we're going to do is we're going

00:23:13,180 --> 00:23:17,590
to aim to have zero high risk

00:23:14,880 --> 00:23:19,270
vulnerabilities like a constant you know

00:23:17,590 --> 00:23:21,460
we get these classifications from the

00:23:19,270 --> 00:23:24,250
databases low medium high so we're gonna

00:23:21,460 --> 00:23:26,200
say we want to have a zero high risk

00:23:24,250 --> 00:23:28,720
approach and then we do our best with

00:23:26,200 --> 00:23:31,000
the rest and and and this seems like a

00:23:28,720 --> 00:23:33,160
good balance right to not overload the

00:23:31,000 --> 00:23:35,170
teams and the challenge though with this

00:23:33,160 --> 00:23:37,030
is that again you're incentivizing them

00:23:35,170 --> 00:23:39,730
to take a very narrow portal view

00:23:37,030 --> 00:23:42,730
because what might be classified as a

00:23:39,730 --> 00:23:45,520
low or medium threat from a generic

00:23:42,730 --> 00:23:48,220
point of view might actually be a

00:23:45,520 --> 00:23:50,590
completely exploitable security problem

00:23:48,220 --> 00:23:53,290
in a user facing application and if

00:23:50,590 --> 00:23:55,810
you've told your you know employees your

00:23:53,290 --> 00:23:57,700
teams that you know you're incentivized

00:23:55,810 --> 00:24:01,810
or you're measured based upon high risk

00:23:57,700 --> 00:24:04,120
then they will naturally ignore ones

00:24:01,810 --> 00:24:06,760
that classified as lower medium risk but

00:24:04,120 --> 00:24:10,750
actually have a very large impact so

00:24:06,760 --> 00:24:13,990
basically by using over simplistic KPIs

00:24:10,750 --> 00:24:16,240
this is probably the most easy mistake

00:24:13,990 --> 00:24:17,800
to stumble into because it seems like a

00:24:16,240 --> 00:24:20,920
good idea you know measuring is a good

00:24:17,800 --> 00:24:22,990
idea but you just have to remember that

00:24:20,920 --> 00:24:25,090
there does need to be a level of like

00:24:22,990 --> 00:24:28,330
subjectivity

00:24:25,090 --> 00:24:30,730
and I think that having staff understand

00:24:28,330 --> 00:24:32,860
that like security is security and

00:24:30,730 --> 00:24:34,960
ultimately you know we don't want to be

00:24:32,860 --> 00:24:37,360
exploited that we don't want exploitable

00:24:34,960 --> 00:24:39,400
problems rather than we only focus on

00:24:37,360 --> 00:24:41,700
the numbers this is kind of like the

00:24:39,400 --> 00:24:43,810
best way to avoid those types of like

00:24:41,700 --> 00:24:48,190
simplistic mistakes that seem like a

00:24:43,810 --> 00:24:52,060
good idea when you start out okay so how

00:24:48,190 --> 00:24:54,640
do we throw this one to you window what

00:24:52,060 --> 00:24:56,470
what kind of culture do we need to

00:24:54,640 --> 00:24:59,680
establish in an organization or do we

00:24:56,470 --> 00:25:01,840
even need a culture to be established so

00:24:59,680 --> 00:25:04,360
that we follow these successful patterns

00:25:01,840 --> 00:25:06,340
but we're not just constantly looking

00:25:04,360 --> 00:25:08,650
for the easy out like measuring our

00:25:06,340 --> 00:25:11,530
successes and looking at statistics

00:25:08,650 --> 00:25:14,260
would you say the kind of a company

00:25:11,530 --> 00:25:19,630
culture goal could be if that's such a

00:25:14,260 --> 00:25:20,830
thing so I think the the first place to

00:25:19,630 --> 00:25:23,260
start is with leadership because that's

00:25:20,830 --> 00:25:25,450
a smaller number of folks to change give

00:25:23,260 --> 00:25:27,850
folks the space to do the work that they

00:25:25,450 --> 00:25:30,070
know they need to do developers very

00:25:27,850 --> 00:25:33,730
often know where the security problems

00:25:30,070 --> 00:25:36,220
are in their software but may or may not

00:25:33,730 --> 00:25:40,630
get the time required to address them

00:25:36,220 --> 00:25:45,070
and might be incentivized by getting

00:25:40,630 --> 00:25:48,010
features out but not for addressing more

00:25:45,070 --> 00:25:50,560
of the the work of maintenance the work

00:25:48,010 --> 00:25:53,110
of refinement the work of resilience and

00:25:50,560 --> 00:25:57,670
security is and that isn't that set of

00:25:53,110 --> 00:25:58,780
things so there is very often you know

00:25:57,670 --> 00:26:00,310
large scale applications that have

00:25:58,780 --> 00:26:02,860
hundreds of developers working on them

00:26:00,310 --> 00:26:04,750
but there's also an understanding that

00:26:02,860 --> 00:26:06,070
like oh if it if this thing happened it

00:26:04,750 --> 00:26:07,930
would all go sideways it's not very

00:26:06,070 --> 00:26:10,150
resilient in this one critical function

00:26:07,930 --> 00:26:13,710
or we've got dead code lighting around

00:26:10,150 --> 00:26:13,710
because the work of going around and

00:26:14,700 --> 00:26:18,460
taking care of it assessing it

00:26:16,810 --> 00:26:20,320
evaluating if it we if it needs to be

00:26:18,460 --> 00:26:21,820
refactor and then the actual work of may

00:26:20,320 --> 00:26:23,590
be re-implemented something that's that

00:26:21,820 --> 00:26:26,770
that hasn't been touched in a while so

00:26:23,590 --> 00:26:30,420
that it's faster well that's harder then

00:26:26,770 --> 00:26:30,420
let's say we'll just give this more

00:26:31,539 --> 00:26:37,249
processing in order to support that that

00:26:33,889 --> 00:26:41,029
that work we don't make a lot of space

00:26:37,249 --> 00:26:42,289
for that kind of work and finding that

00:26:41,029 --> 00:26:43,820
balance for the business is really

00:26:42,289 --> 00:26:45,799
important that's one one thing we can do

00:26:43,820 --> 00:26:47,720
from a culture perspective is get give

00:26:45,799 --> 00:26:51,860
folks the space they need to do the work

00:26:47,720 --> 00:26:54,379
in the first place and evaluate their

00:26:51,860 --> 00:26:58,669
success beyond which features they

00:26:54,379 --> 00:27:02,629
manage to ship but find ways to reward

00:26:58,669 --> 00:27:06,590
folks who are making our our software

00:27:02,629 --> 00:27:08,659
more resilient and more robust more

00:27:06,590 --> 00:27:09,080
scalable more maintainable that kind of

00:27:08,659 --> 00:27:11,929
work

00:27:09,080 --> 00:27:14,809
additionally in over reliance on tools

00:27:11,929 --> 00:27:17,539
to evaluate whether or not we're doing

00:27:14,809 --> 00:27:19,820
good work in security is is problematic

00:27:17,539 --> 00:27:21,590
my my phone's been ringing off the hook

00:27:19,820 --> 00:27:24,289
because someone gave my personal number

00:27:21,590 --> 00:27:25,369
to a conference at some point and then

00:27:24,289 --> 00:27:26,809
it got sold to a bunch of vendors and

00:27:25,369 --> 00:27:29,649
now they're like calling me constantly

00:27:26,809 --> 00:27:31,700
and it's it's very frustrating for me

00:27:29,649 --> 00:27:33,049
for lots of reasons but number one is

00:27:31,700 --> 00:27:34,399
that I don't start with a solution and

00:27:33,049 --> 00:27:36,860
try and figure out how it can benefit my

00:27:34,399 --> 00:27:38,480
organization I start with a problem and

00:27:36,860 --> 00:27:40,730
then evaluate whether I need a solution

00:27:38,480 --> 00:27:44,929
that is you know a third party

00:27:40,730 --> 00:27:46,249
commercial tool that that I could

00:27:44,929 --> 00:27:50,360
potentially deploy to fix this problem

00:27:46,249 --> 00:27:51,769
or can be solved by by let's say a

00:27:50,360 --> 00:27:53,570
changes I make in the environment or in

00:27:51,769 --> 00:27:55,789
the codebase or you know is there

00:27:53,570 --> 00:27:57,919
something that we're doing here through

00:27:55,789 --> 00:28:03,289
education that we could unless I do in a

00:27:57,919 --> 00:28:05,450
more widespread way a a focus on an

00:28:03,289 --> 00:28:08,509
over-reliance on tools and on vendor

00:28:05,450 --> 00:28:11,090
solutions is is problematic because they

00:28:08,509 --> 00:28:12,619
very often especially if they are

00:28:11,090 --> 00:28:15,529
looking for a signal to evaluate whether

00:28:12,619 --> 00:28:16,549
or not there's a problem present is it's

00:28:15,529 --> 00:28:17,539
problematic cuz they only know how to

00:28:16,549 --> 00:28:19,429
look for the things but know how to look

00:28:17,539 --> 00:28:21,379
for so let's say one of these tools does

00:28:19,429 --> 00:28:24,110
something like let's say it's a static

00:28:21,379 --> 00:28:25,129
analysis tool for your code base it goes

00:28:24,110 --> 00:28:27,200
and looks for the sets of code

00:28:25,129 --> 00:28:28,639
constructs it knows how to identify that

00:28:27,200 --> 00:28:31,190
may or may not result in a vulnerability

00:28:28,639 --> 00:28:33,529
and to your point about too many signals

00:28:31,190 --> 00:28:36,080
and trying to evaluate the the the

00:28:33,529 --> 00:28:38,659
signal to noise ratio and you know only

00:28:36,080 --> 00:28:40,549
only devote to engineering resources to

00:28:38,659 --> 00:28:42,859
the to the to the noise I mean to the

00:28:40,549 --> 00:28:43,730
signal it's problematic because that's a

00:28:42,859 --> 00:28:47,240
lot of work

00:28:43,730 --> 00:28:50,090
and sift through those but for example

00:28:47,240 --> 00:28:52,430
moving up to a higher-level language

00:28:50,090 --> 00:28:53,930
where memory management is obstructed

00:28:52,430 --> 00:28:55,790
away from developers really mitigates

00:28:53,930 --> 00:28:58,130
the risk of corruption and memory

00:28:55,790 --> 00:29:00,440
corruption issues and a lot of in a lot

00:28:58,130 --> 00:29:01,760
of ways so that's a way to mitigate a

00:29:00,440 --> 00:29:05,060
lot of different kinds of

00:29:01,760 --> 00:29:08,750
vulnerabilities at once and it doesn't

00:29:05,060 --> 00:29:09,980
doesn't let's say require the the code

00:29:08,750 --> 00:29:11,090
analysis tool to try and identify

00:29:09,980 --> 00:29:12,170
whether or not this specific code

00:29:11,090 --> 00:29:14,000
construct is going to result in the

00:29:12,170 --> 00:29:16,400
vulnerability for the most part those

00:29:14,000 --> 00:29:20,860
tools are not nearly as effective as

00:29:16,400 --> 00:29:22,970
let's say the the the eyeballs of a very

00:29:20,860 --> 00:29:26,870
of a developer who's familiar with with

00:29:22,970 --> 00:29:30,020
the the way the application functions

00:29:26,870 --> 00:29:32,660
and also has some security training

00:29:30,020 --> 00:29:33,410
security expertise has has spent some

00:29:32,660 --> 00:29:36,710
time learning how to find

00:29:33,410 --> 00:29:37,700
vulnerabilities the but if you have one

00:29:36,710 --> 00:29:40,430
release in your system and you

00:29:37,700 --> 00:29:41,960
definitely do trying to find them all is

00:29:40,430 --> 00:29:42,860
problematic because again you only know

00:29:41,960 --> 00:29:44,420
how to find the things you know how to

00:29:42,860 --> 00:29:47,540
find so instead of finding them all

00:29:44,420 --> 00:29:49,130
implementing high-level practices like

00:29:47,540 --> 00:29:50,630
isolation of compartmentalization such

00:29:49,130 --> 00:29:53,240
that there is a vulnerability in this

00:29:50,630 --> 00:29:54,200
component I don't know where it is I'm

00:29:53,240 --> 00:29:55,610
probably gonna be a little shake them

00:29:54,200 --> 00:29:57,530
all out with either tools I have or the

00:29:55,610 --> 00:29:59,180
skill set that I've got present on my

00:29:57,530 --> 00:30:00,230
team so how can I mitigate those

00:29:59,180 --> 00:30:02,030
specific vulnerabilities in this

00:30:00,230 --> 00:30:03,770
component well through isolation and

00:30:02,030 --> 00:30:05,360
compartmentalization I can make it more

00:30:03,770 --> 00:30:07,010
difficult to for a vulnerability

00:30:05,360 --> 00:30:08,450
exploited in one of these components to

00:30:07,010 --> 00:30:10,310
impact other components in the system I

00:30:08,450 --> 00:30:13,700
can go through my codebase and say well

00:30:10,310 --> 00:30:14,510
here is a bunch of code that maybe

00:30:13,700 --> 00:30:16,820
doesn't serve a business function

00:30:14,510 --> 00:30:18,950
anymore maybe it's not widely used by

00:30:16,820 --> 00:30:19,730
our customers maybe it was built because

00:30:18,950 --> 00:30:20,960
we're gonna go in a certain direction

00:30:19,730 --> 00:30:23,830
and then we decided to go in a different

00:30:20,960 --> 00:30:26,780
direction and creating a practice of

00:30:23,830 --> 00:30:28,010
eliminating code that is I won't say

00:30:26,780 --> 00:30:30,230
dead because if it's reachable then it's

00:30:28,010 --> 00:30:31,400
potentially problematic from a security

00:30:30,230 --> 00:30:34,070
perspective but maybe not serving a

00:30:31,400 --> 00:30:36,380
business need anymore and pulling back

00:30:34,070 --> 00:30:37,460
on that so that it doesn't serve our

00:30:36,380 --> 00:30:39,410
abilities and that code base don't

00:30:37,460 --> 00:30:42,580
impact your customers these are the the

00:30:39,410 --> 00:30:45,290
the only real way that you're able to

00:30:42,580 --> 00:30:47,770
have a significant degree of confidence

00:30:45,290 --> 00:30:50,030
that you understand the vulnerability or

00:30:47,770 --> 00:30:51,770
resilience of your of your system is

00:30:50,030 --> 00:30:52,910
through these practices that we've

00:30:51,770 --> 00:30:54,980
always known how to do and they are the

00:30:52,910 --> 00:30:57,080
same in every environment and like scale

00:30:54,980 --> 00:30:57,590
up and down the tech stack whether we're

00:30:57,080 --> 00:30:58,370
talking about

00:30:57,590 --> 00:30:59,539
you know your application your

00:30:58,370 --> 00:31:03,909
applications server your operating

00:30:59,539 --> 00:31:06,890
system your firmware your micro code

00:31:03,909 --> 00:31:09,529
compartmentalization isolation reduce

00:31:06,890 --> 00:31:12,020
reduction of attack surface reducing

00:31:09,529 --> 00:31:14,630
complexity to simplicity as much as

00:31:12,020 --> 00:31:16,250
possible those strategies will make for

00:31:14,630 --> 00:31:19,520
a more resilient code base and also a

00:31:16,250 --> 00:31:21,200
code base or system or deployment that

00:31:19,520 --> 00:31:22,970
you're better able to evaluate the

00:31:21,200 --> 00:31:25,400
overall risk for the system because you

00:31:22,970 --> 00:31:28,340
can say with confidence this is let's

00:31:25,400 --> 00:31:30,620
say a narrow communication channel

00:31:28,340 --> 00:31:33,169
between these two large components so

00:31:30,620 --> 00:31:36,679
the attack surface available to this

00:31:33,169 --> 00:31:38,750
component is reduced by a significant

00:31:36,679 --> 00:31:40,100
degree in terms of the the input that's

00:31:38,750 --> 00:31:41,890
available to it from the system had to

00:31:40,100 --> 00:31:43,610
go through a very narrow well-defined

00:31:41,890 --> 00:31:44,779
communications channel and so whatever

00:31:43,610 --> 00:31:46,130
vulnerabilities are present here are

00:31:44,779 --> 00:31:48,549
going to be even more difficult to

00:31:46,130 --> 00:31:51,649
exploit than they would otherwise be

00:31:48,549 --> 00:31:54,350
these are gonna give you a lot more

00:31:51,649 --> 00:31:56,299
confidence than some vendors tool that's

00:31:54,350 --> 00:31:59,539
going to scan your codebase looking for

00:31:56,299 --> 00:32:00,380
vulnerabilities that it that code

00:31:59,539 --> 00:32:01,850
constructs not even a sorry

00:32:00,380 --> 00:32:04,130
vulnerabilities constructs that might be

00:32:01,850 --> 00:32:06,020
vulnerabilities or the the equivalent

00:32:04,130 --> 00:32:09,649
for the deployment and of things might

00:32:06,020 --> 00:32:12,529
be you know the vulnerabilities that are

00:32:09,649 --> 00:32:15,559
identified publicly in technologies that

00:32:12,529 --> 00:32:16,820
you deploy in your in your you know data

00:32:15,559 --> 00:32:21,279
center in the cloud that are part of

00:32:16,820 --> 00:32:24,500
your your system your ability to patch

00:32:21,279 --> 00:32:26,960
quickly is critical but there's always

00:32:24,500 --> 00:32:28,220
going to be a window of opportunity for

00:32:26,960 --> 00:32:29,539
an attacker especially somebody's going

00:32:28,220 --> 00:32:31,610
around looking opportunistically for

00:32:29,539 --> 00:32:32,929
who's deployed this technology is it and

00:32:31,610 --> 00:32:35,029
is it reachable from the Internet

00:32:32,929 --> 00:32:37,789
what can I throw at it am I am i Mike

00:32:35,029 --> 00:32:39,770
can I be successful here and the the the

00:32:37,789 --> 00:32:41,860
window of time it takes to go from a

00:32:39,770 --> 00:32:44,450
vulnerability being identified at to

00:32:41,860 --> 00:32:46,669
crafting a purpose-built exploit to go

00:32:44,450 --> 00:32:48,200
after it it really depends on the team

00:32:46,669 --> 00:32:50,179
that's doing it but it's it's it's

00:32:48,200 --> 00:32:53,840
faster then you probably are able to

00:32:50,179 --> 00:32:55,429
patch so you're better able to protect

00:32:53,840 --> 00:32:57,620
your environment if you are able to

00:32:55,429 --> 00:32:59,090
minimize the attack surface if you're

00:32:57,620 --> 00:33:03,130
able to highly compartmentalize if

00:32:59,090 --> 00:33:04,999
you're able to create sandbox Azure

00:33:03,130 --> 00:33:09,849
levels of

00:33:04,999 --> 00:33:15,519
of separation that that that reduced the

00:33:09,849 --> 00:33:19,009
the attack surface within your different

00:33:15,519 --> 00:33:20,659
components of the system those are the

00:33:19,009 --> 00:33:22,159
constructs that you can have more

00:33:20,659 --> 00:33:24,979
confidence in than your ability to

00:33:22,159 --> 00:33:26,599
identify whether or not this behavior is

00:33:24,979 --> 00:33:31,759
suspicious this code construct might be

00:33:26,599 --> 00:33:32,779
a vulnerability or patch quickly quicker

00:33:31,759 --> 00:33:34,279
than the attacker who's

00:33:32,779 --> 00:33:36,319
opportunistically waiting to get into

00:33:34,279 --> 00:33:41,029
your environment there's a lot of work

00:33:36,319 --> 00:33:42,669
to do but and obviously culture is is a

00:33:41,029 --> 00:33:44,899
big part of that right I think

00:33:42,669 --> 00:33:46,579
identifying problems before we find

00:33:44,899 --> 00:33:48,409
solutions is a definitely a different

00:33:46,579 --> 00:33:50,749
way that companies work they kind of

00:33:48,409 --> 00:33:52,249
want that easy button and I think

00:33:50,749 --> 00:33:56,389
there's a lot of change that's required

00:33:52,249 --> 00:33:58,039
there I've got two questions left so

00:33:56,389 --> 00:34:01,689
Jason I'm gonna have you answer this one

00:33:58,039 --> 00:34:05,059
pretty quickly and it's it's kind of a

00:34:01,689 --> 00:34:07,039
eight I guess a continuation almost of

00:34:05,059 --> 00:34:09,589
culture but is there something that you

00:34:07,039 --> 00:34:13,250
see companies spending way too much time

00:34:09,589 --> 00:34:15,289
on is it they're over analyzing tools

00:34:13,250 --> 00:34:18,139
are over architecting the perfect

00:34:15,289 --> 00:34:19,819
solution and they're just not getting

00:34:18,139 --> 00:34:22,639
and their pipeline of their dreams

00:34:19,819 --> 00:34:25,609
created or what have you noticed there I

00:34:22,639 --> 00:34:27,679
mean I think window put up and put it

00:34:25,609 --> 00:34:29,720
pretty well I think companies focus on

00:34:27,679 --> 00:34:30,769
security as a secondary concern it's

00:34:29,720 --> 00:34:32,869
something to be solved

00:34:30,769 --> 00:34:34,369
you really need to build a culture of

00:34:32,869 --> 00:34:36,079
security in your development practices

00:34:34,369 --> 00:34:38,750
security needs to be part of what you're

00:34:36,079 --> 00:34:42,230
doing not something that is like to be

00:34:38,750 --> 00:34:44,720
fixed and things need to be developed

00:34:42,230 --> 00:34:46,009
and thought about securely if you're

00:34:44,720 --> 00:34:47,450
always trying to solve it with a vendor

00:34:46,009 --> 00:34:49,549
tool you're trying to solve it with some

00:34:47,450 --> 00:34:50,750
sort of thing that gives you a green

00:34:49,549 --> 00:34:53,599
light a red light you know it's like

00:34:50,750 --> 00:34:55,879
these tools are good but it's not it

00:34:53,599 --> 00:34:57,740
doesn't stop security is constant yeah

00:34:55,879 --> 00:34:59,180
you have to string it through from the

00:34:57,740 --> 00:35:01,460
beginning of software design all the way

00:34:59,180 --> 00:35:05,059
to delivery if you think that it's going

00:35:01,460 --> 00:35:06,380
to be solved at one single point it's

00:35:05,059 --> 00:35:08,460
not

00:35:06,380 --> 00:35:12,750
definitely as much culture as it is

00:35:08,460 --> 00:35:14,460
everything else so due to the time the

00:35:12,750 --> 00:35:16,550
amount of time that we've got left I do

00:35:14,460 --> 00:35:19,710
want to leave the audience with maybe a

00:35:16,550 --> 00:35:21,630
bit of advice a recommendation whether

00:35:19,710 --> 00:35:23,730
they are just beginning this journey

00:35:21,630 --> 00:35:25,410
whether they've been continuing to do it

00:35:23,730 --> 00:35:27,660
for years and just can't get over that

00:35:25,410 --> 00:35:29,670
hump of success what what piece of

00:35:27,660 --> 00:35:31,530
advice would you give everybody in the

00:35:29,670 --> 00:35:35,100
audience one last thing to leave them

00:35:31,530 --> 00:35:37,260
with and Rhys okay so one piece of

00:35:35,100 --> 00:35:39,300
advice we talked a little bit about the

00:35:37,260 --> 00:35:40,740
limitations or overlying some tools but

00:35:39,300 --> 00:35:43,230
a white sauce we are a tool vendor so

00:35:40,740 --> 00:35:45,210
I'm gonna I'm gonna double down what I

00:35:43,230 --> 00:35:48,270
have a favorite quote from the matrix

00:35:45,210 --> 00:35:51,000
and that is never send a human to do a

00:35:48,270 --> 00:35:53,130
machines job now what's important is to

00:35:51,000 --> 00:35:55,440
understand which jobs are machine jobs

00:35:53,130 --> 00:35:57,750
and not to accidentally miss classify

00:35:55,440 --> 00:35:59,940
but there are a lot of things that can

00:35:57,750 --> 00:36:01,890
be done automated and should be done

00:35:59,940 --> 00:36:03,270
automated sofa can be a ship so if you

00:36:01,890 --> 00:36:06,870
have a policy not to have outdated

00:36:03,270 --> 00:36:09,180
dependencies then fail fail the feature

00:36:06,870 --> 00:36:11,610
request that includes a new dependency

00:36:09,180 --> 00:36:13,860
that is unmaintained automate the

00:36:11,610 --> 00:36:17,070
updating of dependencies you know if you

00:36:13,860 --> 00:36:19,500
have very specific information about how

00:36:17,070 --> 00:36:22,560
to fix a vulnerability then give that

00:36:19,500 --> 00:36:25,920
patch to the developer to apply not just

00:36:22,560 --> 00:36:27,360
kind of a description saying upgrade so

00:36:25,920 --> 00:36:29,130
these are what I call like machine jobs

00:36:27,360 --> 00:36:31,770
and I think that that would be the one

00:36:29,130 --> 00:36:33,480
thing I'd say is like identify what jobs

00:36:31,770 --> 00:36:35,610
should be done by machines and automate

00:36:33,480 --> 00:36:38,010
it don't just sort of say to people hey

00:36:35,610 --> 00:36:39,450
make sure you're not using this or you

00:36:38,010 --> 00:36:41,310
know make sure you don't do this because

00:36:39,450 --> 00:36:48,810
people will just forget or to make what

00:36:41,310 --> 00:36:50,160
you can I guess you know based on the

00:36:48,810 --> 00:36:52,650
talk it's really the security isn't

00:36:50,160 --> 00:36:54,060
something to be solved it's a process it

00:36:52,650 --> 00:36:55,800
needs to be continual you need to

00:36:54,060 --> 00:36:57,810
continually practice it there is no aunt

00:36:55,800 --> 00:37:00,270
so if you think of it as something that

00:36:57,810 --> 00:37:04,350
will be finished you can have a lot of

00:37:00,270 --> 00:37:06,060
problems it would be to evaluate what

00:37:04,350 --> 00:37:07,890
you're trying to protect and against

00:37:06,060 --> 00:37:09,720
what first to establish those security

00:37:07,890 --> 00:37:11,100
requirements and make sure that your

00:37:09,720 --> 00:37:12,360
investment and security is appropriate

00:37:11,100 --> 00:37:14,530
to the threats that you're up against to

00:37:12,360 --> 00:37:16,750
the the needs of the business

00:37:14,530 --> 00:37:18,910
and that your investment should be

00:37:16,750 --> 00:37:22,870
continuously measured against that as it

00:37:18,910 --> 00:37:25,150
changes and you know focus everything

00:37:22,870 --> 00:37:26,530
you do in security around whether or not

00:37:25,150 --> 00:37:30,970
it's satisfying a core need for the

00:37:26,530 --> 00:37:33,760
business okay that's that's about it got

00:37:30,970 --> 00:37:38,470
like one minute left so if anybody have

00:37:33,760 --> 00:37:43,450
any last thoughts parting words shout

00:37:38,470 --> 00:37:46,260
out now very quiet but okay um thank you

00:37:43,450 --> 00:37:49,030
everybody for your time today I hope you

00:37:46,260 --> 00:37:50,350
have some piece of information or

00:37:49,030 --> 00:37:52,360
something to go with when you go back to

00:37:50,350 --> 00:37:54,010
your office to start through your

00:37:52,360 --> 00:37:55,960
journey of balancing agility and

00:37:54,010 --> 00:37:58,780
security these guys are going to be here

00:37:55,960 --> 00:38:00,850
floating around so if you want to have a

00:37:58,780 --> 00:38:03,730
little bit more of a deeper dive they'll

00:38:00,850 --> 00:38:05,700
be here to have that conversation so

00:38:03,730 --> 00:38:06,650
thank you all

00:38:05,700 --> 00:38:38,020
[Applause]

00:38:06,650 --> 00:38:38,020

YouTube URL: https://www.youtube.com/watch?v=ihul33Y7DUk


