Title: Deep dive into GitHub's newest features - GitHub Universe 2019
Publication date: 2019-12-13
Playlist: GitHub Universe 2019 - GitHub Product Updates
Description: 
	Presented by Jarryd McCree, Senior Product Manager at GitHub

GitHub has shipped a lot of features in the past few months that you might not even know about. In this talk, I will show you some features that weâ€™ve added, how you can use them as part of your day to day workflows, and dive a bit deeper into some of the new features we shared in our keynote.

About GitHub Universe:
GitHub Universe is a two-day conference dedicated to the creativity and curiosity of the largest software community in the world. Sessions cover topics from team culture to open source software across industries and technologies.

For more information on GitHub Universe, check the website:
https://githubuniverse.com
Captions: 
	00:00:00,620 --> 00:00:14,210
[Music]

00:00:17,400 --> 00:00:24,300
lo how are y'all doing today I love

00:00:21,570 --> 00:00:26,190
excitement in here alright folks my name

00:00:24,300 --> 00:00:28,140
is Jared McCree and I'm a senior product

00:00:26,190 --> 00:00:30,360
manager here at github and today we're

00:00:28,140 --> 00:00:32,160
gonna do a deep dive into some of the

00:00:30,360 --> 00:00:34,170
newest features we've released I was

00:00:32,160 --> 00:00:37,559
able to do this talk last year so I'm

00:00:34,170 --> 00:00:40,110
incredibly fortunate excited and happy

00:00:37,559 --> 00:00:42,840
to do it again so in my professional

00:00:40,110 --> 00:00:44,970
career I've been a developer I've been a

00:00:42,840 --> 00:00:47,910
product manager been a start-up founder

00:00:44,970 --> 00:00:50,670
and a consultant I got to tell you I

00:00:47,910 --> 00:00:53,220
love being a product manager

00:00:50,670 --> 00:00:54,480
I love diving into the UX with a design

00:00:53,220 --> 00:00:56,850
team and then going through the

00:00:54,480 --> 00:00:58,830
day-to-day with my engineering team but

00:00:56,850 --> 00:01:00,420
all this starts out with my favorite

00:00:58,830 --> 00:01:03,030
part of the job which is talking with

00:01:00,420 --> 00:01:04,739
customers like you fortunately here at

00:01:03,030 --> 00:01:07,230
github I've been able to work with a

00:01:04,739 --> 00:01:11,010
wide array of different customers some

00:01:07,230 --> 00:01:13,830
of them are students executives QA

00:01:11,010 --> 00:01:15,870
security DevOps the works and part of my

00:01:13,830 --> 00:01:17,820
job is taking the feedback from all

00:01:15,870 --> 00:01:20,100
those conversations and distilling it

00:01:17,820 --> 00:01:22,710
into a coherent story that I can tell

00:01:20,100 --> 00:01:25,410
our design and engineering teams to me

00:01:22,710 --> 00:01:27,270
product managers are storytellers too

00:01:25,410 --> 00:01:28,500
and it's probably what attracted me to

00:01:27,270 --> 00:01:30,270
being a product manager in the first

00:01:28,500 --> 00:01:32,160
place because I've loved I've loved

00:01:30,270 --> 00:01:35,240
stories since I was a kid

00:01:32,160 --> 00:01:38,520
video games movies fiction nonfiction

00:01:35,240 --> 00:01:40,290
loved them all I remember when I was in

00:01:38,520 --> 00:01:42,330
elementary school and the Scholastic

00:01:40,290 --> 00:01:44,430
Book Fair came around I always asked my

00:01:42,330 --> 00:01:46,290
parents for a bunch of money so I could

00:01:44,430 --> 00:01:47,760
get a big stack of books and somehow

00:01:46,290 --> 00:01:49,560
they always had enough money for that

00:01:47,760 --> 00:01:51,660
but I really think that laid the

00:01:49,560 --> 00:01:54,750
groundwork for me being a storytelling

00:01:51,660 --> 00:01:56,730
PM so again we're gonna go into a bunch

00:01:54,750 --> 00:01:59,070
of our newest features and when I

00:01:56,730 --> 00:02:00,480
thought about how to shape this talk I

00:01:59,070 --> 00:02:03,120
thought about what's the most coherent

00:02:00,480 --> 00:02:04,950
story I can tell you what is how can I

00:02:03,120 --> 00:02:06,510
present this material in a logical

00:02:04,950 --> 00:02:08,190
manner so that you're able to have

00:02:06,510 --> 00:02:10,619
actionable steps when you walk away

00:02:08,190 --> 00:02:12,060
because the goal of this speech and what

00:02:10,619 --> 00:02:14,190
I want you to all to be able to walk

00:02:12,060 --> 00:02:16,470
away with is having actionable steps

00:02:14,190 --> 00:02:18,209
that'll help you and your project or

00:02:16,470 --> 00:02:20,940
your business so I'm gonna tell you a

00:02:18,209 --> 00:02:22,920
series of stories a series of stories on

00:02:20,940 --> 00:02:26,609
the features that we've made how we

00:02:22,920 --> 00:02:29,159
built them and why we built them so the

00:02:26,609 --> 00:02:31,349
name of this talk is deepest dive into

00:02:29,159 --> 00:02:33,900
our newest features and we've released a

00:02:31,349 --> 00:02:35,340
hundreds of things in the past year so I

00:02:33,900 --> 00:02:37,409
can't go through them all so when I was

00:02:35,340 --> 00:02:38,969
thinking about which ones to choose I

00:02:37,409 --> 00:02:41,370
thought about who's gonna be here in the

00:02:38,969 --> 00:02:43,590
audience you know we've got press we've

00:02:41,370 --> 00:02:46,590
got developers we've got executives and

00:02:43,590 --> 00:02:49,379
because it's github I know someone's dog

00:02:46,590 --> 00:02:50,879
is stuffed around here somewhere but for

00:02:49,379 --> 00:02:52,879
today I'm gonna talk about three

00:02:50,879 --> 00:02:56,280
distinctive people three specific

00:02:52,879 --> 00:02:59,730
personas the developer the project

00:02:56,280 --> 00:03:00,750
manager in the enterprise owner now many

00:02:59,730 --> 00:03:02,430
of the features that I'm gonna walk

00:03:00,750 --> 00:03:05,700
through they apply to more than one

00:03:02,430 --> 00:03:07,680
persona that's okay what I'm gonna talk

00:03:05,700 --> 00:03:10,139
about is how this particular feature

00:03:07,680 --> 00:03:12,900
applies to this particular persona and

00:03:10,139 --> 00:03:14,939
I'm gonna start off with the developer

00:03:12,900 --> 00:03:17,250
now you probably heard in the keynotes

00:03:14,939 --> 00:03:20,040
and the speakers before our goal is to

00:03:17,250 --> 00:03:21,030
be the home for all developers not just

00:03:20,040 --> 00:03:23,040
hobby devs

00:03:21,030 --> 00:03:25,859
not just architects not just security

00:03:23,040 --> 00:03:28,139
minded folks the home for all developers

00:03:25,859 --> 00:03:30,720
and everyone in this room is a developer

00:03:28,139 --> 00:03:33,389
whether you code right now or not now I

00:03:30,720 --> 00:03:35,459
get to talk with a lot of new developers

00:03:33,389 --> 00:03:38,639
and it's it's always sobering for me to

00:03:35,459 --> 00:03:40,500
do that you know some are in school some

00:03:38,639 --> 00:03:43,049
are trying to create a new product or

00:03:40,500 --> 00:03:45,690
first startup and some are looking for a

00:03:43,049 --> 00:03:48,870
career change now all of them have the

00:03:45,690 --> 00:03:49,500
exact same question where do I even

00:03:48,870 --> 00:03:51,750
start

00:03:49,500 --> 00:03:54,389
now we have 40 million developers who

00:03:51,750 --> 00:03:57,329
work who use github and it would be very

00:03:54,389 --> 00:03:59,729
easy for us to think that everyone knows

00:03:57,329 --> 00:04:00,229
git or github and that's absolutely not

00:03:59,729 --> 00:04:02,909
the case

00:04:00,229 --> 00:04:05,790
github we have a responsibility to help

00:04:02,909 --> 00:04:07,500
you regardless of your skill level we

00:04:05,790 --> 00:04:09,359
want to help new developers take that

00:04:07,500 --> 00:04:11,129
first step I mean the four things we

00:04:09,359 --> 00:04:13,560
want to teach especially are you know

00:04:11,129 --> 00:04:15,840
how do you use git what's the correct

00:04:13,560 --> 00:04:17,970
merging flow how do you use pull

00:04:15,840 --> 00:04:21,510
requests and comments how do you set up

00:04:17,970 --> 00:04:24,680
an IDE or what is an ID even so github

00:04:21,510 --> 00:04:27,150
desktop is an open source cross-platform

00:04:24,680 --> 00:04:30,479
application that brings github into your

00:04:27,150 --> 00:04:32,070
local device environment and it's

00:04:30,479 --> 00:04:34,650
available for the low low price of free

00:04:32,070 --> 00:04:37,470
today and you can download it at desktop

00:04:34,650 --> 00:04:39,930
die github calm now get up desktop isn't

00:04:37,470 --> 00:04:42,029
a replacement for get up calm it just

00:04:39,930 --> 00:04:42,659
meant as a tool to allow you to be more

00:04:42,029 --> 00:04:44,370
productive

00:04:42,659 --> 00:04:45,150
we understand that git can be

00:04:44,370 --> 00:04:47,340
intimidating

00:04:45,150 --> 00:04:49,500
especially for new developers and github

00:04:47,340 --> 00:04:51,780
desktop is designed to make interactions

00:04:49,500 --> 00:04:54,660
with get more approachable and easier

00:04:51,780 --> 00:04:56,100
now the Godot desktop desktop team has

00:04:54,660 --> 00:04:57,960
been doing a lot of research and do

00:04:56,100 --> 00:05:01,260
their research they learn that most

00:04:57,960 --> 00:05:04,920
people learn get from a buddy be it a

00:05:01,260 --> 00:05:07,320
friend a co-worker a professor or even a

00:05:04,920 --> 00:05:10,110
youtube video now based on that feedback

00:05:07,320 --> 00:05:12,090
we created a git and github tutorial to

00:05:10,110 --> 00:05:12,750
be your buddy and so let's take a look

00:05:12,090 --> 00:05:15,540
at it right now

00:05:12,750 --> 00:05:16,740
when you download get up desktop for the

00:05:15,540 --> 00:05:18,950
first time you're gonna see a little

00:05:16,740 --> 00:05:21,720
button on top it says create a tutorial

00:05:18,950 --> 00:05:25,020
repository at this phase we're focused

00:05:21,720 --> 00:05:28,140
on two things one creating a repository

00:05:25,020 --> 00:05:30,600
and two connecting an editor there's

00:05:28,140 --> 00:05:33,150
many tools that you need to get set up

00:05:30,600 --> 00:05:34,830
encoding but getting an IDE getting a

00:05:33,150 --> 00:05:36,480
code editor set up is it's one of the

00:05:34,830 --> 00:05:39,120
first things you need and if you needed

00:05:36,480 --> 00:05:41,070
a any advice on one I highly recommend

00:05:39,120 --> 00:05:43,140
Adam this little company called github

00:05:41,070 --> 00:05:45,540
made it and maintains it so I highly

00:05:43,140 --> 00:05:47,730
recommend that after that we're gonna

00:05:45,540 --> 00:05:49,650
walk you through the github flow it's a

00:05:47,730 --> 00:05:51,780
branch based workflow that supports

00:05:49,650 --> 00:05:53,880
collaboration and the steps that you're

00:05:51,780 --> 00:05:56,730
gonna go through after that are creating

00:05:53,880 --> 00:05:59,100
a new branch making a change to a file

00:05:56,730 --> 00:06:01,860
committing it and then pushing it up to

00:05:59,100 --> 00:06:04,140
github now all of this is leading up to

00:06:01,860 --> 00:06:06,930
the beautiful thing that we like to call

00:06:04,140 --> 00:06:08,910
the pull request now I know we all

00:06:06,930 --> 00:06:10,610
mostly probably know what a pull request

00:06:08,910 --> 00:06:14,070
is but just as a quick refresher

00:06:10,610 --> 00:06:16,950
refresher a pull request provide a forum

00:06:14,070 --> 00:06:20,250
to discuss proposed changes on a branch

00:06:16,950 --> 00:06:22,680
before you merge them in now before pull

00:06:20,250 --> 00:06:24,450
requests you know it's actually getting

00:06:22,680 --> 00:06:26,400
new code into a branch was kind of a

00:06:24,450 --> 00:06:27,990
pain in the butt if you worked on a team

00:06:26,400 --> 00:06:30,840
you had to bring your changes and

00:06:27,990 --> 00:06:33,150
locally you had to test them find out if

00:06:30,840 --> 00:06:35,190
what changes you needed go to a meeting

00:06:33,150 --> 00:06:37,470
in real life with your team discuss them

00:06:35,190 --> 00:06:39,180
go back to your computer make those

00:06:37,470 --> 00:06:41,700
changes and do that whole cycle again

00:06:39,180 --> 00:06:44,550
before you actually were able to commit

00:06:41,700 --> 00:06:46,940
that branch to master now meeting with

00:06:44,550 --> 00:06:50,370
your team is in real life is wonderful

00:06:46,940 --> 00:06:53,310
but you lose a lot of productivity and

00:06:50,370 --> 00:06:56,940
the benefits of pull requests are you're

00:06:53,310 --> 00:06:58,490
able to assign and make reviews add

00:06:56,940 --> 00:07:01,729
integrations and we're

00:06:58,490 --> 00:07:03,860
remotely it's a great tool for for a

00:07:01,729 --> 00:07:06,620
remote team and to be a very distributed

00:07:03,860 --> 00:07:08,509
team now all features evolve and pull

00:07:06,620 --> 00:07:10,610
requests have been out for a long time

00:07:08,509 --> 00:07:14,240
and the natural evolution of pull

00:07:10,610 --> 00:07:16,699
requests were work in progress PRS now

00:07:14,240 --> 00:07:17,780
work in progress pull requests there I

00:07:16,699 --> 00:07:19,789
mean there's a couple different reasons

00:07:17,780 --> 00:07:22,400
people did that you you would open them

00:07:19,789 --> 00:07:25,130
to show progress on on work but not

00:07:22,400 --> 00:07:26,690
necessarily need feedback you may be

00:07:25,130 --> 00:07:28,789
experimenting with something and you

00:07:26,690 --> 00:07:31,009
don't intend to merge it or you open a

00:07:28,789 --> 00:07:34,039
PR with no code you know just to start a

00:07:31,009 --> 00:07:35,930
discussion now the problem with you know

00:07:34,039 --> 00:07:37,340
work-in-progress PRS is you always have

00:07:35,930 --> 00:07:40,610
to tag it you always have to add that

00:07:37,340 --> 00:07:43,789
WIP in the top and a title if you have

00:07:40,610 --> 00:07:45,650
code owners on a pull request as soon as

00:07:43,789 --> 00:07:47,810
you open that PR they're getting paint

00:07:45,650 --> 00:07:49,400
and at that time you don't need them to

00:07:47,810 --> 00:07:51,620
review so once you need them to actually

00:07:49,400 --> 00:07:54,740
perform a grouper view you have to ping

00:07:51,620 --> 00:07:56,599
them again and if you have CI running it

00:07:54,740 --> 00:07:59,389
can be a very expensive and you don't

00:07:56,599 --> 00:08:01,190
necessarily need it at that time so we

00:07:59,389 --> 00:08:04,220
wanted to save you time here at get up

00:08:01,190 --> 00:08:06,650
so we created draft PRS now these are

00:08:04,220 --> 00:08:07,940
available right now on comm as well as

00:08:06,650 --> 00:08:10,099
github and a price server

00:08:07,940 --> 00:08:11,630
there's many wins and many advantages to

00:08:10,099 --> 00:08:12,770
this but there are three specific big

00:08:11,630 --> 00:08:15,020
wins I want to talk about for

00:08:12,770 --> 00:08:16,370
work-in-progress PRS one they

00:08:15,020 --> 00:08:17,870
automatically tag it and you're

00:08:16,370 --> 00:08:19,849
automatically showing your team that

00:08:17,870 --> 00:08:22,219
this is in draft status and this is

00:08:19,849 --> 00:08:24,199
something that you can you can use

00:08:22,219 --> 00:08:25,699
throughout every team if you use if

00:08:24,199 --> 00:08:28,849
you're in multiple teams or multiple

00:08:25,699 --> 00:08:31,880
orgs some may put WIP in the top someone

00:08:28,849 --> 00:08:33,829
may say do not merge but having draft PR

00:08:31,880 --> 00:08:36,469
is a common practice did you be able to

00:08:33,829 --> 00:08:38,360
use throughout all your organizations it

00:08:36,469 --> 00:08:40,760
also prevents accidental merging you

00:08:38,360 --> 00:08:43,099
cannot merge a draft PR it has to go

00:08:40,760 --> 00:08:45,860
into ready for review status and it

00:08:43,099 --> 00:08:49,250
obviously reduces unneeded notifications

00:08:45,860 --> 00:08:52,070
so change is good the change is also

00:08:49,250 --> 00:08:54,740
very hard and we wanted to reduce the

00:08:52,070 --> 00:08:57,100
friction to adopt in this feature so we

00:08:54,740 --> 00:08:59,660
put it directly in the same button as

00:08:57,100 --> 00:09:02,270
regular PR just click on that drop down

00:08:59,660 --> 00:09:03,770
on the right select draft PR and now

00:09:02,270 --> 00:09:05,750
you've opened your draft pull request

00:09:03,770 --> 00:09:07,490
and again this is a repeatable pattern

00:09:05,750 --> 00:09:09,709
that you can use throughout all your

00:09:07,490 --> 00:09:11,900
different orgs and your teams now this

00:09:09,709 --> 00:09:12,460
doesn't break how you code it doesn't

00:09:11,900 --> 00:09:14,320
break how you

00:09:12,460 --> 00:09:16,720
commits all of that is exactly the same

00:09:14,320 --> 00:09:18,399
as soon as you're ready to use a mark

00:09:16,720 --> 00:09:20,589
that draft pull request is ready for

00:09:18,399 --> 00:09:23,230
review you just click on ready for

00:09:20,589 --> 00:09:25,089
review and that's when the the feedback

00:09:23,230 --> 00:09:27,760
starts now

00:09:25,089 --> 00:09:29,350
I want to pull request as you all know

00:09:27,760 --> 00:09:31,510
there's there's many types of feedback

00:09:29,350 --> 00:09:32,980
you get sometimes people come in and say

00:09:31,510 --> 00:09:35,140
this is great or you need a test

00:09:32,980 --> 00:09:37,720
sometimes they're saying this is great

00:09:35,140 --> 00:09:40,240
approved and sometimes it's not so

00:09:37,720 --> 00:09:41,890
positive I think my favorite pull

00:09:40,240 --> 00:09:43,510
request comment I've ever gotten that

00:09:41,890 --> 00:09:46,779
was up to like three in a morning coding

00:09:43,510 --> 00:09:50,470
one time and I woke up and the PR

00:09:46,779 --> 00:09:55,330
comment was at Jared this is the hottest

00:09:50,470 --> 00:09:58,930
of garbage smiley face emoji yeah but

00:09:55,330 --> 00:10:00,760
that's what happens now sometimes as a

00:09:58,930 --> 00:10:02,529
reviewer when you come in you know

00:10:00,760 --> 00:10:04,930
exactly what needs to be changed like

00:10:02,529 --> 00:10:07,779
sometimes it's a typo sometimes it's

00:10:04,930 --> 00:10:10,510
linting sometimes you actually know what

00:10:07,779 --> 00:10:12,399
code needs to be added in now adding

00:10:10,510 --> 00:10:13,990
these changes can be cumbersome you you

00:10:12,399 --> 00:10:16,600
have to copy that line put it in a

00:10:13,990 --> 00:10:18,370
comment and then the author actually has

00:10:16,600 --> 00:10:21,279
to come back go into their local

00:10:18,370 --> 00:10:23,140
environment paste that code snippet and

00:10:21,279 --> 00:10:24,880
then push it back up it would be great

00:10:23,140 --> 00:10:27,220
if we could make that easier and that's

00:10:24,880 --> 00:10:29,290
what we did with suggested changes so

00:10:27,220 --> 00:10:31,480
what you're seeing behind me is in a

00:10:29,290 --> 00:10:34,750
reviewer coming in and making a comment

00:10:31,480 --> 00:10:36,310
on a PR at that time they actually found

00:10:34,750 --> 00:10:38,170
out which line of code they want to

00:10:36,310 --> 00:10:39,520
change so what they're doing here is

00:10:38,170 --> 00:10:42,160
they're clicking on a button that says

00:10:39,520 --> 00:10:44,320
insert a suggested change that copies

00:10:42,160 --> 00:10:46,330
that line of code into the comment and

00:10:44,320 --> 00:10:48,459
the reviewer at that point is able to

00:10:46,330 --> 00:10:50,560
actually make the change to the code or

00:10:48,459 --> 00:10:51,459
suggest it rather on the flip side for

00:10:50,560 --> 00:10:53,529
the author

00:10:51,459 --> 00:10:56,470
I don't know wait till it gets caught up

00:10:53,529 --> 00:10:59,740
here with that that author is able to

00:10:56,470 --> 00:11:01,600
see the diffident the reviewer made and

00:10:59,740 --> 00:11:03,579
they're you they are able to either

00:11:01,600 --> 00:11:05,500
accept that or deny it

00:11:03,579 --> 00:11:06,820
now if they accept it what's great is

00:11:05,500 --> 00:11:08,860
that the reviewer is added as a

00:11:06,820 --> 00:11:10,450
co-author so in your contribution graph

00:11:08,860 --> 00:11:12,730
you actually get credit for making that

00:11:10,450 --> 00:11:15,760
suggested change and this is available

00:11:12,730 --> 00:11:17,290
today on enterprise cloud as well as

00:11:15,760 --> 00:11:19,510
github Enterprise Server for all those

00:11:17,290 --> 00:11:22,270
Enterprise folks out there this doesn't

00:11:19,510 --> 00:11:24,190
it doesn't break any existing workflows

00:11:22,270 --> 00:11:26,050
it's just a great painkiller feature

00:11:24,190 --> 00:11:29,589
this saves time for both

00:11:26,050 --> 00:11:31,839
developer and the reviewer now again as

00:11:29,589 --> 00:11:33,580
I talked about earlier features evolved

00:11:31,839 --> 00:11:36,339
and based on that feedback that you all

00:11:33,580 --> 00:11:39,490
gave us you said that you love this but

00:11:36,339 --> 00:11:42,339
you want more now the feedback said that

00:11:39,490 --> 00:11:44,230
there's a lot of noise when accepting a

00:11:42,339 --> 00:11:47,140
lot of different changes for example if

00:11:44,230 --> 00:11:48,880
you have 30 different suggested changes

00:11:47,140 --> 00:11:51,670
in a pull request that's 30 different

00:11:48,880 --> 00:11:54,040
commits and the universal feedback was

00:11:51,670 --> 00:11:56,079
that you wanted to batch all of those

00:11:54,040 --> 00:11:59,470
together so we we added the ability to

00:11:56,079 --> 00:12:02,170
add suggestions to a batch this way if

00:11:59,470 --> 00:12:03,940
you have multiple suggestions or maybe

00:12:02,170 --> 00:12:05,440
three or four that actually need to be

00:12:03,940 --> 00:12:08,230
added at the same time so you can have

00:12:05,440 --> 00:12:11,110
clean history you can do that one of the

00:12:08,230 --> 00:12:12,640
people one of the pieces of feedback we

00:12:11,110 --> 00:12:15,040
got was that for certain functional

00:12:12,640 --> 00:12:17,230
programming languages if you only commit

00:12:15,040 --> 00:12:19,959
one suggested change but not to others

00:12:17,230 --> 00:12:22,029
it actually breaks the application so

00:12:19,959 --> 00:12:23,890
now you're able to add them all to a

00:12:22,029 --> 00:12:27,010
batch and then commit them as one single

00:12:23,890 --> 00:12:30,100
commit so at this point we talked about

00:12:27,010 --> 00:12:32,380
get a desktop using PRS reviewing

00:12:30,100 --> 00:12:35,620
getting them merged you're doing work

00:12:32,380 --> 00:12:39,339
now for any developer you need to be

00:12:35,620 --> 00:12:42,399
able to track that work and you do that

00:12:39,339 --> 00:12:43,360
using user owned project boards now why

00:12:42,399 --> 00:12:45,100
the heck am i talking to you about

00:12:43,360 --> 00:12:47,200
project boards there's plenty of apps

00:12:45,100 --> 00:12:49,959
out there to do it project boards aren't

00:12:47,200 --> 00:12:53,290
new well the feedback we got was that

00:12:49,959 --> 00:12:56,279
our project boards weren't enough for

00:12:53,290 --> 00:12:59,050
example you need to manage your own work

00:12:56,279 --> 00:13:01,209
sometimes it originally project boards

00:12:59,050 --> 00:13:02,770
were only tied to a repository so if

00:13:01,209 --> 00:13:04,810
you're working on projects across

00:13:02,770 --> 00:13:06,220
multiple repos it wasn't very easy to

00:13:04,810 --> 00:13:09,160
use that especially if you're in

00:13:06,220 --> 00:13:10,690
multiple teams and also the piece of

00:13:09,160 --> 00:13:12,640
feedback we got was that you wanted to

00:13:10,690 --> 00:13:14,680
manage in your own style if you're in a

00:13:12,640 --> 00:13:16,149
repo not your own personal project

00:13:14,680 --> 00:13:17,980
you're kind of tied to whatever style

00:13:16,149 --> 00:13:20,440
they want you want to be able to manage

00:13:17,980 --> 00:13:22,420
that work in your own way now the

00:13:20,440 --> 00:13:24,370
solution that we made makes it so you

00:13:22,420 --> 00:13:26,769
don't need to be tied to a repository

00:13:24,370 --> 00:13:29,260
you can organize and plan in your own

00:13:26,769 --> 00:13:31,089
style you can do this all within github

00:13:29,260 --> 00:13:32,709
we want to be the home for all

00:13:31,089 --> 00:13:34,660
developers and if you have to go to an

00:13:32,709 --> 00:13:36,130
outside application to track your work

00:13:34,660 --> 00:13:39,130
you're not at home anymore

00:13:36,130 --> 00:13:41,259
so this is available on comm as well as

00:13:39,130 --> 00:13:43,540
Enterprise Server it's super easy to set

00:13:41,259 --> 00:13:45,699
up go to your profile page which is get

00:13:43,540 --> 00:13:48,490
up comm slash your handle click on the

00:13:45,699 --> 00:13:50,199
projects tab on the very top from there

00:13:48,490 --> 00:13:52,449
you're able to make your project boards

00:13:50,199 --> 00:13:54,519
private you can make them public you can

00:13:52,449 --> 00:13:57,190
add in automation with Kanban or Kanban

00:13:54,519 --> 00:13:59,110
depending on how you like to say it but

00:13:57,190 --> 00:14:01,269
you can also link to any repository that

00:13:59,110 --> 00:14:03,220
you have access to this makes it easier

00:14:01,269 --> 00:14:05,380
to add issues and pull requests which

00:14:03,220 --> 00:14:07,240
are related to the repositories you you

00:14:05,380 --> 00:14:09,220
work in and you're able to track this

00:14:07,240 --> 00:14:12,810
work for both the open-source work you

00:14:09,220 --> 00:14:15,459
do as well as the enterprise work now

00:14:12,810 --> 00:14:18,670
project boards aren't meant to track

00:14:15,459 --> 00:14:20,949
everything you get pinged on something

00:14:18,670 --> 00:14:22,959
in a comment there's a new feature that

00:14:20,949 --> 00:14:24,970
you found in a repo that you want to use

00:14:22,959 --> 00:14:26,170
there's a person you want to follow like

00:14:24,970 --> 00:14:27,430
you're not gonna put all that out and

00:14:26,170 --> 00:14:29,920
then in a project port

00:14:27,430 --> 00:14:34,690
that's not scalable so how do you track

00:14:29,920 --> 00:14:36,880
that you have 90 million tabs open and

00:14:34,690 --> 00:14:39,810
personally there's a huge problem for me

00:14:36,880 --> 00:14:43,600
I have intricate setups in Gmail to

00:14:39,810 --> 00:14:45,699
highlight stuff I've got too many chrome

00:14:43,600 --> 00:14:48,459
windows and Firefox windows with a bunch

00:14:45,699 --> 00:14:50,350
of tabs and what this told us is that we

00:14:48,459 --> 00:14:52,360
didn't have what you needed you need it

00:14:50,350 --> 00:14:54,250
home you needed something better so we

00:14:52,360 --> 00:14:57,310
needed to overhaul our notification

00:14:54,250 --> 00:14:59,079
process now my my colleague Becca talked

00:14:57,310 --> 00:15:01,449
about this in the keynote earlier but

00:14:59,079 --> 00:15:03,430
we've released this and beta now the

00:15:01,449 --> 00:15:06,699
benefits of our new notification program

00:15:03,430 --> 00:15:08,380
our new diffic notification feature or

00:15:06,699 --> 00:15:11,079
that it's a consolidated view for

00:15:08,380 --> 00:15:13,569
triaging and context gathering you can

00:15:11,079 --> 00:15:15,850
also similar to email you can mark

00:15:13,569 --> 00:15:18,459
things as read unread unsubscribe

00:15:15,850 --> 00:15:20,290
archived and even save them you can also

00:15:18,459 --> 00:15:22,089
filter by project we have a bunch of

00:15:20,290 --> 00:15:23,439
filters that are available by default

00:15:22,089 --> 00:15:26,290
but you can also create your own custom

00:15:23,439 --> 00:15:29,019
ones to track what you want to now let's

00:15:26,290 --> 00:15:30,790
take a look at what this looks like so

00:15:29,019 --> 00:15:32,860
as you can see this is very similar to

00:15:30,790 --> 00:15:34,509
email that you've seen before if you

00:15:32,860 --> 00:15:36,490
look on the top left you can see with

00:15:34,509 --> 00:15:38,589
what's unread what's in your inbox you

00:15:36,490 --> 00:15:40,899
can also save notifications to come back

00:15:38,589 --> 00:15:43,569
to them later we have five default

00:15:40,899 --> 00:15:45,910
filters added by straight out-of-the-box

00:15:43,569 --> 00:15:46,449
but you can add those custom ones as you

00:15:45,910 --> 00:15:48,370
want

00:15:46,449 --> 00:15:49,420
again this is made to help you eliminate

00:15:48,370 --> 00:15:51,280
tabs

00:15:49,420 --> 00:15:54,220
and hope you triage your notifications

00:15:51,280 --> 00:15:57,220
better now this is the first project

00:15:54,220 --> 00:15:58,660
that I've mentioned that is in beta and

00:15:57,220 --> 00:16:01,240
we have a good amount of features in

00:15:58,660 --> 00:16:03,970
beta so how do you enable this this is

00:16:01,240 --> 00:16:05,530
something you have to opt into so what

00:16:03,970 --> 00:16:08,200
we did for this and it's a little bit

00:16:05,530 --> 00:16:11,320
different we created a feature to enable

00:16:08,200 --> 00:16:13,480
this feature called feature preview now

00:16:11,320 --> 00:16:15,610
feature preview we added and about two

00:16:13,480 --> 00:16:18,430
weeks ago and we did this to allow just

00:16:15,610 --> 00:16:20,020
to have like a very consolidated list of

00:16:18,430 --> 00:16:20,470
all the features that are in beta right

00:16:20,020 --> 00:16:22,630
now

00:16:20,470 --> 00:16:24,820
and what this is enables you to do is

00:16:22,630 --> 00:16:27,400
actually give more consolidated feedback

00:16:24,820 --> 00:16:29,140
on to humans like me and other product

00:16:27,400 --> 00:16:31,900
managers on the features that we've

00:16:29,140 --> 00:16:34,180
released in beta if you're happy we want

00:16:31,900 --> 00:16:35,560
to hear it if you're unhappy we also

00:16:34,180 --> 00:16:38,740
want to hear it because we want to make

00:16:35,560 --> 00:16:40,750
things better here get up we staff staff

00:16:38,740 --> 00:16:43,390
ship everything so we test all of it

00:16:40,750 --> 00:16:46,450
internally but we also do early access

00:16:43,390 --> 00:16:48,490
programs for maintainer x' and such but

00:16:46,450 --> 00:16:49,900
we wanted to cast a wider net we wanted

00:16:48,490 --> 00:16:52,870
to get more feedback from all of you

00:16:49,900 --> 00:16:54,910
users so how do you set this up you go

00:16:52,870 --> 00:16:57,040
to your homepage click on the top right

00:16:54,910 --> 00:16:59,440
on your avatar and navigate down to

00:16:57,040 --> 00:17:01,120
feature preview from there you'll see a

00:16:59,440 --> 00:17:02,590
list of everything in beta including the

00:17:01,120 --> 00:17:05,470
notifications that I just mentioned

00:17:02,590 --> 00:17:06,970
you're able to opt in turn it on turn it

00:17:05,470 --> 00:17:09,550
off and you're also able to provide

00:17:06,970 --> 00:17:11,589
feedback and that goes directly to our

00:17:09,550 --> 00:17:13,930
our product team and our engineering

00:17:11,589 --> 00:17:16,300
teams and this gives a centralized place

00:17:13,930 --> 00:17:17,980
for all that feedback I was talking with

00:17:16,300 --> 00:17:20,079
Katie who was the product manager for

00:17:17,980 --> 00:17:22,300
this and she had a great line for that I

00:17:20,079 --> 00:17:24,370
wanted to let you all know when we

00:17:22,300 --> 00:17:26,290
released stuff it matters to our

00:17:24,370 --> 00:17:28,360
community and we want to make sure you

00:17:26,290 --> 00:17:30,040
have a voice this feature is here so you

00:17:28,360 --> 00:17:31,960
know that when you're actually giving

00:17:30,040 --> 00:17:35,140
feedback on a particular feature it goes

00:17:31,960 --> 00:17:37,870
directly to the product manager so that

00:17:35,140 --> 00:17:39,070
is for the individual developer now

00:17:37,870 --> 00:17:40,900
we're going to talk about the project

00:17:39,070 --> 00:17:42,490
manager and what we strive to be the

00:17:40,900 --> 00:17:44,560
home for all developers we know that

00:17:42,490 --> 00:17:46,150
more than just coders work here and for

00:17:44,560 --> 00:17:48,940
project managers we need to make sure

00:17:46,150 --> 00:17:50,530
that we're making tools to help them now

00:17:48,940 --> 00:17:52,180
the duties of the project manager a

00:17:50,530 --> 00:17:54,010
little bit different than the developer

00:17:52,180 --> 00:17:56,920
and the project manager you're dealing

00:17:54,010 --> 00:17:59,200
with resource planning budget monitoring

00:17:56,920 --> 00:18:01,450
risk management and organizing and

00:17:59,200 --> 00:18:03,010
managing a team organizing and managing

00:18:01,450 --> 00:18:04,420
a team on github you

00:18:03,010 --> 00:18:08,680
do that through roles and permissions

00:18:04,420 --> 00:18:10,990
now we only had three roles that you use

00:18:08,680 --> 00:18:13,630
to manage to manage github who's we

00:18:10,990 --> 00:18:15,760
read/write and admin and you all told us

00:18:13,630 --> 00:18:17,470
that's not good enough we need more than

00:18:15,760 --> 00:18:19,600
that we need more fine-grained

00:18:17,470 --> 00:18:21,730
permissions and so it's satellite we

00:18:19,600 --> 00:18:24,070
introduced two new roles the triage and

00:18:21,730 --> 00:18:25,840
maintain rules which we've actually g8

00:18:24,070 --> 00:18:28,870
now for both enterprise server as well

00:18:25,840 --> 00:18:32,290
as on cloud now the triage role can be

00:18:28,870 --> 00:18:34,090
thought of as read Plus users with this

00:18:32,290 --> 00:18:36,700
role are able to triage a repository

00:18:34,090 --> 00:18:38,980
without having right access to it

00:18:36,700 --> 00:18:42,130
they're able to open and close PRS and

00:18:38,980 --> 00:18:44,620
issues request reviews from developers

00:18:42,130 --> 00:18:46,480
as well as manage milestones on the

00:18:44,620 --> 00:18:48,820
other hand the maintain role can be

00:18:46,480 --> 00:18:50,890
thought of as right plus these

00:18:48,820 --> 00:18:52,990
particular users are able to manage the

00:18:50,890 --> 00:18:55,480
entire repository without having access

00:18:52,990 --> 00:18:58,600
to potentially destructive capabilities

00:18:55,480 --> 00:19:00,190
like deleting a repository they can

00:18:58,600 --> 00:19:01,960
manage the entire software development

00:19:00,190 --> 00:19:04,390
lifecycle for that repo including

00:19:01,960 --> 00:19:06,850
pushing the protected branches locking

00:19:04,390 --> 00:19:08,860
conversations and managing interaction

00:19:06,850 --> 00:19:11,380
limits and it fits directly in the

00:19:08,860 --> 00:19:13,690
current workflow to get it set up you go

00:19:11,380 --> 00:19:15,370
to the Settings tab on your repository

00:19:13,690 --> 00:19:17,260
and then click on collaborators and

00:19:15,370 --> 00:19:20,460
teams on the left from there you're able

00:19:17,260 --> 00:19:23,800
to apply these roles to both teams

00:19:20,460 --> 00:19:25,690
members and actually as well outside

00:19:23,800 --> 00:19:27,130
collaborators and very soon in the next

00:19:25,690 --> 00:19:29,350
couple months we'll be releasing this

00:19:27,130 --> 00:19:30,850
ability to add this as a base role so

00:19:29,350 --> 00:19:34,330
that any new members who come into your

00:19:30,850 --> 00:19:36,520
org automatically get that role now

00:19:34,330 --> 00:19:39,190
another duty of the project manager is

00:19:36,520 --> 00:19:41,200
project planning and github issues are a

00:19:39,190 --> 00:19:44,230
super powerful feature to help with this

00:19:41,200 --> 00:19:46,570
you use them to communicate requirements

00:19:44,230 --> 00:19:48,910
deadlines and even ask for help on

00:19:46,570 --> 00:19:51,100
particular subjects and here at github

00:19:48,910 --> 00:19:53,170
we use get up we use github issues for

00:19:51,100 --> 00:19:54,310
everything one of the problems with

00:19:53,170 --> 00:19:56,620
issues though is that there's no

00:19:54,310 --> 00:19:59,140
standard way to add issues and this

00:19:56,620 --> 00:20:01,840
leads to a lot of unneeded cleanup for

00:19:59,140 --> 00:20:05,020
project managers it would be great if

00:20:01,840 --> 00:20:07,600
github automated that so we did we did

00:20:05,020 --> 00:20:09,490
that using issue templates now issue

00:20:07,600 --> 00:20:12,520
templates help guide users through the

00:20:09,490 --> 00:20:14,770
correct path when creating users the

00:20:12,520 --> 00:20:16,900
benefits of this are when creating

00:20:14,770 --> 00:20:19,540
issues now the benefits of this

00:20:16,900 --> 00:20:21,430
you get a higher quality content you've

00:20:19,540 --> 00:20:23,110
reduced the triaging for the project

00:20:21,430 --> 00:20:24,850
manager and you also have better

00:20:23,110 --> 00:20:26,470
onboarding for new users because they

00:20:24,850 --> 00:20:28,540
know the style that they need to be

00:20:26,470 --> 00:20:31,840
writing their issues in now how do you

00:20:28,540 --> 00:20:34,690
use this very simple you navigate to the

00:20:31,840 --> 00:20:37,720
settings tab on your repository scroll

00:20:34,690 --> 00:20:39,490
down and click on issue templates now we

00:20:37,720 --> 00:20:41,140
give two standard issue templates from

00:20:39,490 --> 00:20:42,730
the beginning those are bug reports and

00:20:41,140 --> 00:20:45,010
feature requests but you're able to

00:20:42,730 --> 00:20:46,870
customize these as much as you want the

00:20:45,010 --> 00:20:50,080
things you can customize are you can add

00:20:46,870 --> 00:20:52,090
suggested titles for these for these

00:20:50,080 --> 00:20:54,760
issues you can also customize the

00:20:52,090 --> 00:20:57,040
markdown format in the body you can

00:20:54,760 --> 00:20:59,170
automate what labels get assigned to

00:20:57,040 --> 00:21:01,660
these as well as who gets assigned to

00:20:59,170 --> 00:21:03,520
those particular issues this is another

00:21:01,660 --> 00:21:06,280
way to further automate your software

00:21:03,520 --> 00:21:09,010
development lifecycle process now issue

00:21:06,280 --> 00:21:11,380
templates live in your repository and

00:21:09,010 --> 00:21:13,510
the dot github slash issue template

00:21:11,380 --> 00:21:15,460
folder now this is great because if you

00:21:13,510 --> 00:21:17,110
have multiple replot and repositories

00:21:15,460 --> 00:21:19,090
and you want to use those same templates

00:21:17,110 --> 00:21:20,740
throughout you can just copy that folder

00:21:19,090 --> 00:21:22,660
from one put it in the other and it's

00:21:20,740 --> 00:21:26,140
gonna have the exact same issue

00:21:22,660 --> 00:21:28,960
templates for all of them again all

00:21:26,140 --> 00:21:31,570
features evolved and based on your

00:21:28,960 --> 00:21:34,270
feedback there's two major ones that we

00:21:31,570 --> 00:21:36,640
we needed to change a very common use

00:21:34,270 --> 00:21:38,830
case for for maintainer x' is someone

00:21:36,640 --> 00:21:40,720
will come in and write a question in an

00:21:38,830 --> 00:21:43,330
issue there's nothing wrong with that

00:21:40,720 --> 00:21:45,520
but it would be better suited to be

00:21:43,330 --> 00:21:47,710
asked in a slack question there's gonna

00:21:45,520 --> 00:21:50,470
be a slack channel so you all asked us

00:21:47,710 --> 00:21:52,930
how would can we direct our users to our

00:21:50,470 --> 00:21:54,910
slack workspace or channel another

00:21:52,930 --> 00:21:57,940
common thing that happens is someone

00:21:54,910 --> 00:22:00,250
will go into a repository and create an

00:21:57,940 --> 00:22:03,730
issue and it'll be blank it'll just have

00:22:00,250 --> 00:22:05,530
a title thanks to super cool but that

00:22:03,730 --> 00:22:07,510
doesn't help anybody and that just leads

00:22:05,530 --> 00:22:09,880
to the project manager I'm gonna go back

00:22:07,510 --> 00:22:11,890
and ask more and more questions so we

00:22:09,880 --> 00:22:14,200
added more control with issue templates

00:22:11,890 --> 00:22:15,640
and a llamÃ³ file so this yellow file

00:22:14,200 --> 00:22:17,290
lives within the issue template

00:22:15,640 --> 00:22:19,420
directory and it gives you more control

00:22:17,290 --> 00:22:21,250
over your issue templates so you can see

00:22:19,420 --> 00:22:23,830
here on the top left I've turned off

00:22:21,250 --> 00:22:26,290
blank issues so people are have to use

00:22:23,830 --> 00:22:27,820
issue templates or one of the provided

00:22:26,290 --> 00:22:30,820
templates you had and there can't be any

00:22:27,820 --> 00:22:32,289
more blank issues you can also link to X

00:22:30,820 --> 00:22:35,320
Journal resources what I have shown here

00:22:32,289 --> 00:22:37,630
is linking to the get up community forum

00:22:35,320 --> 00:22:40,029
as well as the bug bounty program but

00:22:37,630 --> 00:22:40,659
you can link to a slack slack workspace

00:22:40,029 --> 00:22:42,820
as well

00:22:40,659 --> 00:22:45,130
and being that all of this is and get

00:22:42,820 --> 00:22:47,950
its version so you can audit this as

00:22:45,130 --> 00:22:50,169
well as any whoever changes it another

00:22:47,950 --> 00:22:53,409
problem that we have and we ran into is

00:22:50,169 --> 00:22:54,880
duplicate issues much as you set up

00:22:53,409 --> 00:22:57,070
issue templates people are still gonna

00:22:54,880 --> 00:22:59,259
put in duplicates there so we introduced

00:22:57,070 --> 00:23:01,299
this small sexy little feature called

00:22:59,259 --> 00:23:03,669
similar issues so what you're seeing

00:23:01,299 --> 00:23:06,399
here on the right is I'm going in to the

00:23:03,669 --> 00:23:09,850
rails org and I'm gonna add in a bug

00:23:06,399 --> 00:23:11,799
report Grails uses issue templates to

00:23:09,850 --> 00:23:13,840
shout-out to them but what I'm doing

00:23:11,799 --> 00:23:16,450
right now is I'm trying to add in a bug

00:23:13,840 --> 00:23:20,049
for an invalid argument as soon as I

00:23:16,450 --> 00:23:24,220
start typing invalid argument what shows

00:23:20,049 --> 00:23:26,019
below is a about four different other

00:23:24,220 --> 00:23:28,330
bugs that have already opened up been

00:23:26,019 --> 00:23:29,860
opened up for that invalid argument now

00:23:28,330 --> 00:23:32,230
what the benefits of this are it helps

00:23:29,860 --> 00:23:33,850
users find existing issues that already

00:23:32,230 --> 00:23:35,590
have pertinent details if you're gonna

00:23:33,850 --> 00:23:37,480
open a bug report and it's already been

00:23:35,590 --> 00:23:39,220
made you actually may be able to find a

00:23:37,480 --> 00:23:41,409
workaround and help you and you don't

00:23:39,220 --> 00:23:43,570
actually have to log that bug report so

00:23:41,409 --> 00:23:45,639
second thing again helps project

00:23:43,570 --> 00:23:48,429
managers and maintainer Xand triaging

00:23:45,639 --> 00:23:50,200
duplicate issues so that's another

00:23:48,429 --> 00:23:54,220
problem that we help solve something

00:23:50,200 --> 00:23:55,659
else is is incorrectly filed issues so a

00:23:54,220 --> 00:23:57,669
lot of project managers they have

00:23:55,659 --> 00:23:59,950
multiple different repositories and as

00:23:57,669 --> 00:24:01,870
much as you try and get issues in that

00:23:59,950 --> 00:24:04,210
right repo they're not always going to

00:24:01,870 --> 00:24:05,950
do it and for the project manager what

00:24:04,210 --> 00:24:08,110
you're having to do is delete one issue

00:24:05,950 --> 00:24:10,929
copy the content here put it in another

00:24:08,110 --> 00:24:13,120
repo tell people to go to this issue not

00:24:10,929 --> 00:24:15,490
that one and it's just a lot of wasted

00:24:13,120 --> 00:24:18,250
time so we wanted to reduce those manual

00:24:15,490 --> 00:24:20,830
steps it takes to transfer an issue and

00:24:18,250 --> 00:24:23,379
that's why we created transfer issue now

00:24:20,830 --> 00:24:25,870
transfer issues don't just navigate the

00:24:23,379 --> 00:24:28,090
content of the issue but in it migrates

00:24:25,870 --> 00:24:29,980
all the associated metadata as well the

00:24:28,090 --> 00:24:32,379
assignees the labels all of that also

00:24:29,980 --> 00:24:34,509
goes over and there's no need to update

00:24:32,379 --> 00:24:36,850
users on the new location of the issue

00:24:34,509 --> 00:24:38,620
they're automatically redirected once

00:24:36,850 --> 00:24:40,750
that issue is transferred this is

00:24:38,620 --> 00:24:42,610
available on github.com as well as

00:24:40,750 --> 00:24:44,530
enterprise server now how do you use

00:24:42,610 --> 00:24:46,270
this super easy

00:24:44,530 --> 00:24:47,950
navigate to the issue that you want to

00:24:46,270 --> 00:24:49,540
transfer and click on that beautiful

00:24:47,950 --> 00:24:51,640
button on the right that says transfer

00:24:49,540 --> 00:24:53,650
issue from there you're able to choose a

00:24:51,640 --> 00:24:55,480
repository that you'd like to transfer

00:24:53,650 --> 00:24:58,360
it to you can transfer it to any

00:24:55,480 --> 00:25:01,090
repository that you own or any one that

00:24:58,360 --> 00:25:03,040
you have right access to once you've

00:25:01,090 --> 00:25:04,750
done that click on transfer issue and we

00:25:03,040 --> 00:25:06,880
take it from there in terms of migrating

00:25:04,750 --> 00:25:09,070
all that content this is just something

00:25:06,880 --> 00:25:12,430
another thing that just saves time for

00:25:09,070 --> 00:25:13,720
the project manager now that's all I'm

00:25:12,430 --> 00:25:17,080
going to talk about with issues right

00:25:13,720 --> 00:25:19,420
now another another duty of the project

00:25:17,080 --> 00:25:21,490
manager is setting up new projects and

00:25:19,420 --> 00:25:23,440
typically something that we find with a

00:25:21,490 --> 00:25:26,230
lot of organizations is that they have a

00:25:23,440 --> 00:25:28,360
quote/unquote blessed scaffolding for a

00:25:26,230 --> 00:25:30,490
particular for room for how they want

00:25:28,360 --> 00:25:32,350
repositories they know how they want the

00:25:30,490 --> 00:25:33,850
file and directory structure to be set

00:25:32,350 --> 00:25:37,180
up they have the issue templates they

00:25:33,850 --> 00:25:39,820
want but a lot of time is spent getting

00:25:37,180 --> 00:25:41,800
that set initial scaffolding set up it

00:25:39,820 --> 00:25:44,650
would be great if github could automate

00:25:41,800 --> 00:25:47,290
it so we did and we did that with

00:25:44,650 --> 00:25:49,510
repository templates now repository

00:25:47,290 --> 00:25:51,760
templates allow any user with right

00:25:49,510 --> 00:25:54,490
access to a repo to mark it as a

00:25:51,760 --> 00:25:56,080
template after that any user that has

00:25:54,490 --> 00:25:58,660
read access to that particular

00:25:56,080 --> 00:26:00,700
repository can come in and use it as a

00:25:58,660 --> 00:26:03,580
template and it'll have this exact same

00:26:00,700 --> 00:26:05,620
files and directories as its base this

00:26:03,580 --> 00:26:07,690
is available on github.com as well as

00:26:05,620 --> 00:26:11,290
Enterprise Server and setting it up

00:26:07,690 --> 00:26:14,260
super easy navigate to this settings tab

00:26:11,290 --> 00:26:18,160
on your repository and click on Markus

00:26:14,260 --> 00:26:20,710
template done now any user that wants to

00:26:18,160 --> 00:26:21,970
go in and create a new repository with

00:26:20,710 --> 00:26:23,830
that template can just go to that

00:26:21,970 --> 00:26:26,440
repository and click use this as a

00:26:23,830 --> 00:26:30,580
template or use the URL to get it set

00:26:26,440 --> 00:26:32,530
back up so folks we've talked about now

00:26:30,580 --> 00:26:34,750
the developer we've talked about the

00:26:32,530 --> 00:26:36,640
project manager and now I'm going to

00:26:34,750 --> 00:26:38,800
talk about the needs of the enterprise

00:26:36,640 --> 00:26:40,210
owner so the needs of the enterprise

00:26:38,800 --> 00:26:42,250
owner a little bit different because

00:26:40,210 --> 00:26:43,510
your responsibilities are different the

00:26:42,250 --> 00:26:46,840
enterprise owner is thinking about

00:26:43,510 --> 00:26:48,250
effective DevOps automation security and

00:26:46,840 --> 00:26:50,740
compliance continuous integration

00:26:48,250 --> 00:26:52,510
they're also thinking about how do how

00:26:50,740 --> 00:26:54,660
do I make sure that all the platforms

00:26:52,510 --> 00:26:57,160
that my employees use are easy to use

00:26:54,660 --> 00:26:58,210
you're trying to make sure that those

00:26:57,160 --> 00:26:59,740
platforms are cost

00:26:58,210 --> 00:27:01,660
efficient because we all have a finance

00:26:59,740 --> 00:27:03,850
department and we want to make sure that

00:27:01,660 --> 00:27:06,450
we're able to easily enforce policies

00:27:03,850 --> 00:27:08,380
across all of your applications

00:27:06,450 --> 00:27:10,960
ultimately you're trying to maximize

00:27:08,380 --> 00:27:13,750
innovation while reducing risks

00:27:10,960 --> 00:27:15,940
now here github what we do focus on

00:27:13,750 --> 00:27:18,100
enterprises getup was built on open

00:27:15,940 --> 00:27:19,810
source and the needs of and while the

00:27:18,100 --> 00:27:21,820
needs of enterprises differ from the

00:27:19,810 --> 00:27:24,130
open source community there are concepts

00:27:21,820 --> 00:27:26,770
that can be applied to enterprises to

00:27:24,130 --> 00:27:28,390
drive innovation now new applications

00:27:26,770 --> 00:27:30,580
regardless of where they are are made up

00:27:28,390 --> 00:27:33,430
about 80 to 90 percent open source

00:27:30,580 --> 00:27:35,470
software so enterprises are reliant on

00:27:33,430 --> 00:27:38,410
open source whether they know it or not

00:27:35,470 --> 00:27:41,410
a common issue for organizations is

00:27:38,410 --> 00:27:43,720
working in silos now silos prevent

00:27:41,410 --> 00:27:46,030
collaboration both internally within

00:27:43,720 --> 00:27:47,830
your teams but also externally within

00:27:46,030 --> 00:27:50,140
the community and your community and an

00:27:47,830 --> 00:27:53,170
enterprise being your enterprise team

00:27:50,140 --> 00:27:55,090
now the open source community teaches us

00:27:53,170 --> 00:27:57,940
to foster more collaboration and a

00:27:55,090 --> 00:28:01,150
concept that we call inter sourcing now

00:27:57,940 --> 00:28:02,890
inter sourcing applies the the lessons

00:28:01,150 --> 00:28:05,200
of open source to all software

00:28:02,890 --> 00:28:08,800
engineering it does this to increase

00:28:05,200 --> 00:28:10,990
quality speed and developer joy and the

00:28:08,800 --> 00:28:13,900
fundamentals of inter sourcing are open

00:28:10,990 --> 00:28:16,480
communication transparency and internal

00:28:13,900 --> 00:28:18,400
collaboration now internal collaboration

00:28:16,480 --> 00:28:20,500
isn't simple you know it's often

00:28:18,400 --> 00:28:22,960
multiple teams working across multiple

00:28:20,500 --> 00:28:25,780
projects can become disconnected and

00:28:22,960 --> 00:28:28,300
this results in duplicative work a loss

00:28:25,780 --> 00:28:31,690
of cross team communication and a loss

00:28:28,300 --> 00:28:34,210
of knowledge sharing now at best this

00:28:31,690 --> 00:28:35,650
creates a drag on productivity but in

00:28:34,210 --> 00:28:37,840
the worst case it creates security

00:28:35,650 --> 00:28:40,420
exploits there's a very common one that

00:28:37,840 --> 00:28:42,160
happened where a bug was found in a team

00:28:40,420 --> 00:28:43,930
and they fixed it but didn't tell the

00:28:42,160 --> 00:28:45,190
other team that they worked with and

00:28:43,930 --> 00:28:47,560
this actually created a very large

00:28:45,190 --> 00:28:50,500
exploit which we all have had to deal

00:28:47,560 --> 00:28:52,690
with now get up has been known to help

00:28:50,500 --> 00:28:54,580
distributed teams collaborate for a long

00:28:52,690 --> 00:28:56,500
time and we're trying to do that to just

00:28:54,580 --> 00:28:58,930
better drive innovation within the

00:28:56,500 --> 00:29:01,390
open-source community as well as within

00:28:58,930 --> 00:29:04,330
enterprises now we're continuing to

00:29:01,390 --> 00:29:06,030
enable enterprises by building this very

00:29:04,330 --> 00:29:08,860
cool feature we called internal

00:29:06,030 --> 00:29:10,510
repositories now internal repositories

00:29:08,860 --> 00:29:12,090
add the ability to see the same

00:29:10,510 --> 00:29:14,970
repository across any

00:29:12,090 --> 00:29:17,130
organization you can search for discover

00:29:14,970 --> 00:29:19,230
reuse code and contribute to those

00:29:17,130 --> 00:29:21,450
high-value projects all within your

00:29:19,230 --> 00:29:23,070
enterprise for the enterprise owner this

00:29:21,450 --> 00:29:25,169
gives you peace of mind because no

00:29:23,070 --> 00:29:27,600
outside contractors will be able to see

00:29:25,169 --> 00:29:30,360
these internal repositories none of your

00:29:27,600 --> 00:29:32,340
IP will be released and it's very simple

00:29:30,360 --> 00:29:35,279
to set up a new repository with a

00:29:32,340 --> 00:29:37,830
setting click on new repository you'll

00:29:35,279 --> 00:29:38,850
see a third setting called internal and

00:29:37,830 --> 00:29:42,029
you'll set it right there

00:29:38,850 --> 00:29:44,640
this is all done through the enterprise

00:29:42,029 --> 00:29:46,710
account now the enterprise account gives

00:29:44,640 --> 00:29:48,809
administrators a single point of view a

00:29:46,710 --> 00:29:50,159
single point of visibility into the

00:29:48,809 --> 00:29:52,740
management of their of their

00:29:50,159 --> 00:29:54,090
organization and a big thing for the

00:29:52,740 --> 00:29:56,789
enterprise owner and the enterprise

00:29:54,090 --> 00:29:59,220
admin is managing policies and you can

00:29:56,789 --> 00:30:02,100
manage policies at this level you can

00:29:59,220 --> 00:30:03,690
set the repo creation permissions do you

00:30:02,100 --> 00:30:06,299
want people to be able to create public

00:30:03,690 --> 00:30:09,090
repositories private internal or

00:30:06,299 --> 00:30:10,799
combination of both do you want forking

00:30:09,090 --> 00:30:13,289
on your organization do you want your

00:30:10,799 --> 00:30:15,960
users to be able to fork from private

00:30:13,289 --> 00:30:17,850
and internal repositories you can also

00:30:15,960 --> 00:30:19,590
control invitations if you don't want

00:30:17,850 --> 00:30:21,539
outside collaborators in your org you

00:30:19,590 --> 00:30:23,909
can set this at that and set this policy

00:30:21,539 --> 00:30:26,309
at this level as well as repo and issue

00:30:23,909 --> 00:30:30,210
deletion you can turn this on or off at

00:30:26,309 --> 00:30:32,760
this level now security is also managed

00:30:30,210 --> 00:30:34,289
at this level you can enforce two-factor

00:30:32,760 --> 00:30:36,960
authentication throughout your entire

00:30:34,289 --> 00:30:39,059
organization you can set up sam'l either

00:30:36,960 --> 00:30:41,279
your own custom one or a proprietary one

00:30:39,059 --> 00:30:42,779
as well as view the audit log data we

00:30:41,279 --> 00:30:44,340
have a very cool little GUI that

00:30:42,779 --> 00:30:48,120
actually shows you where your your

00:30:44,340 --> 00:30:49,649
instances are being accessed from now we

00:30:48,120 --> 00:30:52,140
have this concept called enterprise

00:30:49,649 --> 00:30:53,820
fundamentals it means that we actually

00:30:52,140 --> 00:30:56,010
need to be that we need to deliver

00:30:53,820 --> 00:30:58,080
certain functionality to our enterprises

00:30:56,010 --> 00:30:59,190
to allow them to innovate and through

00:30:58,080 --> 00:31:00,929
that feedback and through the

00:30:59,190 --> 00:31:03,000
conversations we've had with enterprises

00:31:00,929 --> 00:31:06,659
you said that we needed an IP filtering

00:31:03,000 --> 00:31:09,179
so an alpha today we've allowed IP allow

00:31:06,659 --> 00:31:11,520
lists now IP allow list allows github

00:31:09,179 --> 00:31:13,440
enterprise cloud customers the ability

00:31:11,520 --> 00:31:16,649
to filter traffic from specified IP

00:31:13,440 --> 00:31:19,470
addresses you can filter the log in of

00:31:16,649 --> 00:31:22,200
course but also sam'l SSO it also

00:31:19,470 --> 00:31:24,659
filters private personal access tokens

00:31:22,200 --> 00:31:25,860
as well as that's a sage keys all done

00:31:24,659 --> 00:31:28,230
all done through the

00:31:25,860 --> 00:31:30,270
enterprise account it's very easy to

00:31:28,230 --> 00:31:31,950
enable this go into your enterprise

00:31:30,270 --> 00:31:33,960
account and click on settings on the

00:31:31,950 --> 00:31:36,570
left from there navigate down to

00:31:33,960 --> 00:31:38,610
security and you'll see IP allow us in

00:31:36,570 --> 00:31:40,730
the very bottom from there you're able

00:31:38,610 --> 00:31:44,070
to restrict or filter IP addresses

00:31:40,730 --> 00:31:46,410
individual IP addresses or an IP range

00:31:44,070 --> 00:31:48,090
as well as adding in a description now

00:31:46,410 --> 00:31:49,530
this is available in alpha and we'll be

00:31:48,090 --> 00:31:52,049
releasing it in beta in the next couple

00:31:49,530 --> 00:31:53,700
weeks but if you'd like to actually get

00:31:52,049 --> 00:31:55,770
involved in that beta there's a

00:31:53,700 --> 00:31:57,480
gentleman right there in the hoodie you

00:31:55,770 --> 00:32:00,630
can talk to him and you can get on the

00:31:57,480 --> 00:32:02,010
beta list now we've talked a lot today

00:32:00,630 --> 00:32:03,750
we talked about a couple of different

00:32:02,010 --> 00:32:05,790
things so let's review we talked about

00:32:03,750 --> 00:32:08,250
the developer the project manager and

00:32:05,790 --> 00:32:10,049
the enterprise owner for the developer

00:32:08,250 --> 00:32:12,059
we got you started with github desktop

00:32:10,049 --> 00:32:13,860
and then you open your first draft pull

00:32:12,059 --> 00:32:16,679
request once you made that pull request

00:32:13,860 --> 00:32:18,750
your reviewer gave you some suggested

00:32:16,679 --> 00:32:20,460
changes and you track your work on your

00:32:18,750 --> 00:32:22,290
project board from there you are

00:32:20,460 --> 00:32:25,140
actually triaging notifications that you

00:32:22,290 --> 00:32:27,510
enabled through feature feature preview

00:32:25,140 --> 00:32:29,370
for the project manager we gave you more

00:32:27,510 --> 00:32:31,260
fine-grained permissions with triage in

00:32:29,370 --> 00:32:32,850
the main chain chain rule you set up

00:32:31,260 --> 00:32:34,380
issue templates the guide your users

00:32:32,850 --> 00:32:36,299
better and how they want to start and

00:32:34,380 --> 00:32:38,790
how you want them to set up their issues

00:32:36,299 --> 00:32:40,500
you reduce duplicate issues with similar

00:32:38,790 --> 00:32:42,630
issues and then you transfer it issues

00:32:40,500 --> 00:32:44,220
with issue transfer and it gets started

00:32:42,630 --> 00:32:46,830
up with projects better

00:32:44,220 --> 00:32:48,510
you have repository templates for the

00:32:46,830 --> 00:32:50,520
enterprise owner we talked about the

00:32:48,510 --> 00:32:52,620
concepts of inner sourcing and how

00:32:50,520 --> 00:32:53,610
internal repositories drive that now

00:32:52,620 --> 00:32:55,559
it's all controlled through the

00:32:53,610 --> 00:32:57,870
enterprise account I told you about our

00:32:55,559 --> 00:33:01,650
new feature IP allow us to help

00:32:57,870 --> 00:33:03,840
enterprises more folks I told you a

00:33:01,650 --> 00:33:05,730
series of stories on the features we've

00:33:03,840 --> 00:33:07,590
built and how we built them to help you

00:33:05,730 --> 00:33:09,750
all and what I'd like you to think about

00:33:07,590 --> 00:33:11,160
as you walk out of here is what's gonna

00:33:09,750 --> 00:33:13,679
be the story on the features you've

00:33:11,160 --> 00:33:15,660
built the build now and build in the

00:33:13,679 --> 00:33:18,210
future and in the spirit of open source

00:33:15,660 --> 00:33:20,630
whatever you end up building github will

00:33:18,210 --> 00:33:24,150
be there for you thanks for your time

00:33:20,630 --> 00:33:46,559
[Applause]

00:33:24,150 --> 00:33:48,620
[Music]

00:33:46,559 --> 00:33:48,620
you

00:33:49,160 --> 00:33:52,679

YouTube URL: https://www.youtube.com/watch?v=iCOmzYEGavo


