Title: Actions Packaged: Using GitHub Actions and GitHub Package Registry - GitHub Universe 2019
Publication date: 2019-12-13
Playlist: GitHub Universe 2019 - GitHub Product Updates
Description: 
	Presented by Jeremy Epling, Senior Director of Product Management, and Simina Pasat, Director of Product Management, GitHub

This session will focus on the latest updates for GitHub Actions and GitHub Package Registry, and how to use them to build, test, and deploy your code. We’ll also walk through examples of repositories using GitHub Actions and GitHub Package Registry for their production CI/CD with multiple different configurations. At the end of this talk, you’ll have an end-to-end understanding of GitHub Actions and GitHub Package Registry, as well as how to use them with your project.

About GitHub Universe:
GitHub Universe is a two-day conference dedicated to the creativity and curiosity of the largest software community in the world. Sessions cover topics from team culture to open source software across industries and technologies.

For more information on GitHub Universe, check the website:
https://githubuniverse.com
Captions: 
	00:00:00,680 --> 00:00:24,910
[Music]

00:00:22,029 --> 00:00:26,739
I hope you had a great morning and you

00:00:24,910 --> 00:00:28,960
really enjoy the keynote I think it was

00:00:26,739 --> 00:00:32,680
a great keynote and a great way to start

00:00:28,960 --> 00:00:36,010
this foggy day in San Francisco maybe

00:00:32,680 --> 00:00:38,500
for some summer is a bit of a slow time

00:00:36,010 --> 00:00:40,720
at work but for us at github

00:00:38,500 --> 00:00:43,239
this summer was super busy and super

00:00:40,720 --> 00:00:45,309
exciting we worked on new products new

00:00:43,239 --> 00:00:48,430
features and we launched ton of

00:00:45,309 --> 00:00:51,100
improvements and for Jeremy and I on the

00:00:48,430 --> 00:00:54,370
actions and packages team things were

00:00:51,100 --> 00:00:56,590
extra special and extra busy because in

00:00:54,370 --> 00:00:59,769
May we launched the beta for github

00:00:56,590 --> 00:01:03,879
packages bringing packages and source

00:00:59,769 --> 00:01:06,580
code together on github and in August we

00:01:03,879 --> 00:01:09,490
launched the extended beta for actions

00:01:06,580 --> 00:01:13,090
v2 bringing integrated CI CD

00:01:09,490 --> 00:01:15,369
capabilities into github and today just

00:01:13,090 --> 00:01:17,800
few months later we announced that both

00:01:15,369 --> 00:01:20,619
of these products github actions and

00:01:17,800 --> 00:01:26,050
github packages are available for

00:01:20,619 --> 00:01:28,690
everybody in github to use so hey

00:01:26,050 --> 00:01:31,149
everybody I'm Jeremy Epling and I lead

00:01:28,690 --> 00:01:33,819
code the cloud teams a github on the

00:01:31,149 --> 00:01:36,840
product side and I'm seaman opposite and

00:01:33,819 --> 00:01:40,030
I'm a product manager on github packages

00:01:36,840 --> 00:01:42,640
so developers are at the center of

00:01:40,030 --> 00:01:44,709
github and when we think about

00:01:42,640 --> 00:01:47,860
developers there is so many definitions

00:01:44,709 --> 00:01:50,140
out there maybe some of you know what

00:01:47,860 --> 00:01:52,959
Urban Dictionary is saying that a

00:01:50,140 --> 00:01:56,560
developer is a person who transforms

00:01:52,959 --> 00:01:59,020
caffeine into code but now let's be

00:01:56,560 --> 00:02:01,450
serious code doesn't mean that much

00:01:59,020 --> 00:02:02,319
until the moment when it becomes useful

00:02:01,450 --> 00:02:05,530
to somebody

00:02:02,319 --> 00:02:07,720
until that open-source package or that

00:02:05,530 --> 00:02:10,360
product or that mobile app gets in the

00:02:07,720 --> 00:02:14,500
hands of your users whoever your users

00:02:10,360 --> 00:02:17,230
might be so for us developers are these

00:02:14,500 --> 00:02:20,050
super smart people working together in

00:02:17,230 --> 00:02:23,769
teams and transforming code into end

00:02:20,050 --> 00:02:26,470
value to our customers but you know

00:02:23,769 --> 00:02:28,720
between writing the code and delivering

00:02:26,470 --> 00:02:30,460
that end value there's a lot of

00:02:28,720 --> 00:02:31,590
different things that have to happen in

00:02:30,460 --> 00:02:33,870
the meanwhile

00:02:31,590 --> 00:02:36,989
so we find these teams and these

00:02:33,870 --> 00:02:39,920
developers siloed between different

00:02:36,989 --> 00:02:42,780
systems managing permissions

00:02:39,920 --> 00:02:44,940
configurations copying secrets and by

00:02:42,780 --> 00:02:45,900
the end of the day we even forget where

00:02:44,940 --> 00:02:48,269
we started from

00:02:45,900 --> 00:02:51,569
because sometimes were even in remote

00:02:48,269 --> 00:02:53,819
locations and on different time zones so

00:02:51,569 --> 00:02:56,610
with github actions and github packages

00:02:53,819 --> 00:02:59,580
we are bringing this code to cloud

00:02:56,610 --> 00:03:03,269
features in the table where you and your

00:02:59,580 --> 00:03:06,299
teams are already collaborating and for

00:03:03,269 --> 00:03:08,670
open source repositories this means that

00:03:06,299 --> 00:03:11,670
they don't only have their code their

00:03:08,670 --> 00:03:14,280
issues and their wiki's on github now

00:03:11,670 --> 00:03:17,040
they also have their CI CD running

00:03:14,280 --> 00:03:19,200
directly on github and this means that

00:03:17,040 --> 00:03:21,390
when somebody is getting started with an

00:03:19,200 --> 00:03:23,819
open-source repo and they want to fork

00:03:21,390 --> 00:03:26,160
it it's gonna be super easy for them to

00:03:23,819 --> 00:03:30,200
get started and directly build that

00:03:26,160 --> 00:03:30,200
project starting from the configurations

00:03:30,590 --> 00:03:37,530
each hub actions and github packages are

00:03:33,450 --> 00:03:39,840
available today they are GA and if you

00:03:37,530 --> 00:03:41,730
liked the keynote that was only the tip

00:03:39,840 --> 00:03:43,920
of the iceberg because Jeremy and I will

00:03:41,730 --> 00:03:46,079
show you a bit more details about

00:03:43,920 --> 00:03:47,850
actions and packages and also lots and

00:03:46,079 --> 00:03:51,769
lots of demos with all the cool things

00:03:47,850 --> 00:03:51,769
that we released in the last few months

00:03:51,920 --> 00:03:56,010
yeah Smita was saying with github

00:03:54,569 --> 00:03:58,440
actions there's really a lot that you

00:03:56,010 --> 00:04:00,720
can do while most of the core workflows

00:03:58,440 --> 00:04:02,670
really are CI CD for most of what you do

00:04:00,720 --> 00:04:04,799
as a developer you can really automate

00:04:02,670 --> 00:04:06,329
anything in github any events and we'll

00:04:04,799 --> 00:04:08,010
walk through some of this in the demos

00:04:06,329 --> 00:04:09,780
later but whether it be creating an

00:04:08,010 --> 00:04:11,819
issue editing a pull request somebody

00:04:09,780 --> 00:04:13,560
new comes to your repo a deployment

00:04:11,819 --> 00:04:15,239
happens any of those events can all be

00:04:13,560 --> 00:04:16,859
automated you know what the goal behind

00:04:15,239 --> 00:04:18,479
that is to make it really easy for you

00:04:16,859 --> 00:04:20,070
to focus on what matters which is

00:04:18,479 --> 00:04:21,299
writing the code for your project you

00:04:20,070 --> 00:04:22,830
don't want to be always out triaging

00:04:21,299 --> 00:04:24,450
bugs and kind of dealing with all these

00:04:22,830 --> 00:04:26,370
repetitive tasks you want to be able to

00:04:24,450 --> 00:04:27,660
automate those away and one of the great

00:04:26,370 --> 00:04:30,090
things is because these are just files

00:04:27,660 --> 00:04:31,650
checked into a repository you can go and

00:04:30,090 --> 00:04:34,050
look at how other projects work as well

00:04:31,650 --> 00:04:35,850
maybe you know you like the way the node

00:04:34,050 --> 00:04:37,830
project works or kubernetes if they're

00:04:35,850 --> 00:04:39,330
using actions and then they have those

00:04:37,830 --> 00:04:41,610
workflow files checked in right there

00:04:39,330 --> 00:04:43,830
you can go ahead and fork those remix

00:04:41,610 --> 00:04:45,009
them put them into your workflows as

00:04:43,830 --> 00:04:47,169
well and then we have a market

00:04:45,009 --> 00:04:49,210
places of over 1200 actions that's

00:04:47,169 --> 00:04:50,979
constantly growing or you can see what

00:04:49,210 --> 00:04:52,449
more and more developers are doing to

00:04:50,979 --> 00:04:55,449
make it easier to kind of automate all

00:04:52,449 --> 00:04:56,860
the different tasks you have so as we

00:04:55,449 --> 00:04:58,300
talked about a little bit in the keynote

00:04:56,860 --> 00:04:59,949
we have all the core things you would

00:04:58,300 --> 00:05:01,210
expect for a built in CI and we'll go

00:04:59,949 --> 00:05:03,430
through that whether that being like

00:05:01,210 --> 00:05:06,249
expressions matrix build support for

00:05:03,430 --> 00:05:08,529
containers Windows Mac Linux everything

00:05:06,249 --> 00:05:09,999
you have streaming logs we have a built

00:05:08,529 --> 00:05:12,069
in secrets store and then to speed up

00:05:09,999 --> 00:05:16,330
your builds artifact caching and then

00:05:12,069 --> 00:05:18,460
now self hosted runners for github

00:05:16,330 --> 00:05:20,800
packages we're bringing your packages

00:05:18,460 --> 00:05:23,409
and your code source together on github

00:05:20,800 --> 00:05:25,180
and this means a couple of things for

00:05:23,409 --> 00:05:28,120
teams who want to keep things private

00:05:25,180 --> 00:05:30,370
within their organization it means I can

00:05:28,120 --> 00:05:32,409
push and their publisher packages to

00:05:30,370 --> 00:05:34,990
github and only people from their

00:05:32,409 --> 00:05:37,270
organizations will be able to see and to

00:05:34,990 --> 00:05:39,370
install those packages this means these

00:05:37,270 --> 00:05:41,169
teams don't have to sync permissions

00:05:39,370 --> 00:05:43,059
between different systems and to deal

00:05:41,169 --> 00:05:45,189
with all that stuff when a new developer

00:05:43,059 --> 00:05:47,529
comes to the team or when a developer

00:05:45,189 --> 00:05:50,080
leaves the team for open source

00:05:47,529 --> 00:05:52,029
developers and teams this means that

00:05:50,080 --> 00:05:53,649
they can publish their packages to

00:05:52,029 --> 00:05:56,620
github and there's a direct correlation

00:05:53,649 --> 00:05:59,080
between the repository and the package

00:05:56,620 --> 00:06:03,219
in the last few months during this beta

00:05:59,080 --> 00:06:05,409
we saw over 10,000 users using packages

00:06:03,219 --> 00:06:07,479
and they published tens of thousands of

00:06:05,409 --> 00:06:09,509
packages so we're super excited to see

00:06:07,479 --> 00:06:12,430
what will come next

00:06:09,509 --> 00:06:14,319
github packages has support for public

00:06:12,430 --> 00:06:17,319
and private registries and there's no

00:06:14,319 --> 00:06:20,409
magic there if the package corresponds

00:06:17,319 --> 00:06:22,120
to a public repository then the package

00:06:20,409 --> 00:06:25,029
will be public if the package

00:06:22,120 --> 00:06:27,219
corresponds to a private repository then

00:06:25,029 --> 00:06:29,349
the package will be private and there is

00:06:27,219 --> 00:06:31,689
no need to manage permissions between

00:06:29,349 --> 00:06:33,699
these two between packages and code

00:06:31,689 --> 00:06:35,589
because there's one login for code and

00:06:33,699 --> 00:06:38,139
packages and everything is under github

00:06:35,589 --> 00:06:39,849
what is means is that you can log into

00:06:38,139 --> 00:06:42,399
github with the same account that you

00:06:39,849 --> 00:06:44,649
always use use the same search and

00:06:42,399 --> 00:06:46,719
you'll find packages use the same

00:06:44,649 --> 00:06:48,939
permissions that you have read and write

00:06:46,719 --> 00:06:51,819
to know if you can only install

00:06:48,939 --> 00:06:54,639
permission only install packages or also

00:06:51,819 --> 00:06:57,120
publish packages we have support for

00:06:54,639 --> 00:06:58,780
some of the some of the most important

00:06:57,120 --> 00:07:02,110
registries there

00:06:58,780 --> 00:07:04,060
and p.m. docker maven rubygems and

00:07:02,110 --> 00:07:06,600
nougat and just few weeks back we

00:07:04,060 --> 00:07:10,210
released support for Gradle as well as

00:07:06,600 --> 00:07:12,580
you can expect it works with any CI and

00:07:10,210 --> 00:07:14,230
with github actions and we think we're

00:07:12,580 --> 00:07:17,110
really gonna like this one because we

00:07:14,230 --> 00:07:18,700
paid extra attention on how github

00:07:17,110 --> 00:07:21,490
actions and github packages work

00:07:18,700 --> 00:07:23,470
together of course if you want you can

00:07:21,490 --> 00:07:26,410
use github packages from your local

00:07:23,470 --> 00:07:28,630
machine but we really recommend letting

00:07:26,410 --> 00:07:32,290
the robots doing the work and automating

00:07:28,630 --> 00:07:35,710
this one being part of github we really

00:07:32,290 --> 00:07:37,960
believe in integrations and api's so

00:07:35,710 --> 00:07:40,600
github packages has a full graphical

00:07:37,960 --> 00:07:42,430
support and webhook supports so you can

00:07:40,600 --> 00:07:45,940
automate your work those however you

00:07:42,430 --> 00:07:47,980
prefer there's also packaged analytics

00:07:45,940 --> 00:07:49,900
for maintainer and for consumers alike

00:07:47,980 --> 00:07:52,150
so as a consumer you can see how many

00:07:49,900 --> 00:07:54,760
downloads a package has if it's popular

00:07:52,150 --> 00:07:58,210
or not what are the details previous

00:07:54,760 --> 00:08:00,250
versions and so on and finally during

00:07:58,210 --> 00:08:02,290
the beta we heard from a lot of people

00:08:00,250 --> 00:08:04,840
that it's really important to have an

00:08:02,290 --> 00:08:07,990
easy configuration and especially for

00:08:04,840 --> 00:08:10,600
NPM easy configuration is key so we are

00:08:07,990 --> 00:08:13,870
offering proxy support for NPM which

00:08:10,600 --> 00:08:15,430
means github packages will proxy the

00:08:13,870 --> 00:08:19,120
packages that you need from NPM and

00:08:15,430 --> 00:08:21,669
deliver them straight to your project so

00:08:19,120 --> 00:08:23,800
this was a bit in a nutshell about

00:08:21,669 --> 00:08:25,900
actions and packages but now we want to

00:08:23,800 --> 00:08:30,669
show you some cool demos about what they

00:08:25,900 --> 00:08:32,039
are really about great thanks to Mina so

00:08:30,669 --> 00:08:34,719
I'm gonna walk through a couple demos

00:08:32,039 --> 00:08:37,360
and these will be different than the

00:08:34,719 --> 00:08:38,950
keynote so one of the things that you'll

00:08:37,360 --> 00:08:42,430
notice is before we just walk through

00:08:38,950 --> 00:08:44,560
kind of creating a new workflow so as

00:08:42,430 --> 00:08:45,910
you saw before in the keynote we clicked

00:08:44,560 --> 00:08:47,710
here and we were able to create a new

00:08:45,910 --> 00:08:49,660
workflow it automatically detected my

00:08:47,710 --> 00:08:51,190
language but let's dig in a little bit

00:08:49,660 --> 00:08:53,350
more and see what's actually happening

00:08:51,190 --> 00:08:54,970
in some of these workflow files so as we

00:08:53,350 --> 00:08:56,589
said we're automatically detecting that

00:08:54,970 --> 00:08:58,300
Java scripts the primary language in

00:08:56,589 --> 00:09:00,430
this case and automatically suggesting a

00:08:58,300 --> 00:09:02,140
set of workflows but what we've done is

00:09:00,430 --> 00:09:03,760
we want to really make sure we're

00:09:02,140 --> 00:09:05,710
embracing the community with each one of

00:09:03,760 --> 00:09:07,180
these ideally and we've already seen a

00:09:05,710 --> 00:09:08,740
lot of open source contributors as

00:09:07,180 --> 00:09:10,480
people from node or helping us figure

00:09:08,740 --> 00:09:12,460
out what's the best way to have node CI

00:09:10,480 --> 00:09:14,560
work and the same for go and

00:09:12,460 --> 00:09:16,390
every one of these different languages

00:09:14,560 --> 00:09:18,940
that we support so each one of these is

00:09:16,390 --> 00:09:20,440
actually an open source repository so if

00:09:18,940 --> 00:09:22,060
I were to click right here you can see

00:09:20,440 --> 00:09:24,430
we have an actions organization on

00:09:22,060 --> 00:09:26,470
github and then we have a repo with all

00:09:24,430 --> 00:09:28,210
the starter workflows so anybody can

00:09:26,470 --> 00:09:29,830
come and contribute directly what these

00:09:28,210 --> 00:09:32,200
are so maybe if you're wanted to browse

00:09:29,830 --> 00:09:34,030
the workflows see what the actual code

00:09:32,200 --> 00:09:35,920
is behind these before committing to one

00:09:34,030 --> 00:09:37,960
of them you can go through and see what

00:09:35,920 --> 00:09:39,400
each one of these are you can go up and

00:09:37,960 --> 00:09:42,700
see that we have a myriad of different

00:09:39,400 --> 00:09:45,640
CI workflows and then we also have a set

00:09:42,700 --> 00:09:46,570
of workflows for automation as well so

00:09:45,640 --> 00:09:48,850
whether or not you want to greet new

00:09:46,570 --> 00:09:50,470
contributors or you want to go ahead and

00:09:48,850 --> 00:09:52,180
mark an issue a sale or anything like

00:09:50,470 --> 00:09:53,860
that it's all supported with a set of

00:09:52,180 --> 00:09:56,440
workflows to make it very easy just to

00:09:53,860 --> 00:10:03,250
get started there so now let's jump back

00:09:56,440 --> 00:10:04,570
to where we were a second ago and one of

00:10:03,250 --> 00:10:06,430
the things you'll see is that this is

00:10:04,570 --> 00:10:07,750
true for all the starter other starter

00:10:06,430 --> 00:10:10,000
workflows as well so whether it be

00:10:07,750 --> 00:10:11,770
Python Ruby anything all these are

00:10:10,000 --> 00:10:15,160
open-source and we're ready to see your

00:10:11,770 --> 00:10:16,150
contributions directly to those if I

00:10:15,160 --> 00:10:18,910
were to go ahead and click and get

00:10:16,150 --> 00:10:20,710
started on one of these you saw before a

00:10:18,910 --> 00:10:22,150
little bit of kind of how we have

00:10:20,710 --> 00:10:23,320
autocomplete and things like that to

00:10:22,150 --> 00:10:25,390
make it a little bit more approachable

00:10:23,320 --> 00:10:27,910
as you come through so again we have a

00:10:25,390 --> 00:10:29,650
lot of different features here that you

00:10:27,910 --> 00:10:31,960
can go ahead and have so when you think

00:10:29,650 --> 00:10:33,820
about what does it mean to build CI CD

00:10:31,960 --> 00:10:35,470
well basically you have a directed

00:10:33,820 --> 00:10:37,240
acyclic graph and that's the way to

00:10:35,470 --> 00:10:39,100
think about it basically we have a set

00:10:37,240 --> 00:10:41,200
of jobs and a workflow is composed of a

00:10:39,100 --> 00:10:43,570
set of jobs within a job you have a set

00:10:41,200 --> 00:10:45,040
of steps and the jobs are the graph so

00:10:43,570 --> 00:10:46,270
each one of these are running on a

00:10:45,040 --> 00:10:48,520
different runner this could be a

00:10:46,270 --> 00:10:50,080
self-hosted runner that you have it

00:10:48,520 --> 00:10:51,370
could be like a Raspberry Pi under your

00:10:50,080 --> 00:10:52,960
desk it could be something in the cloud

00:10:51,370 --> 00:10:55,090
or it could be one of github runners

00:10:52,960 --> 00:10:57,970
itself and we have runners for Windows

00:10:55,090 --> 00:10:59,770
Linux and Mac that are free for open

00:10:57,970 --> 00:11:01,540
source and then for every single private

00:10:59,770 --> 00:11:02,950
repository there's included minutes as

00:11:01,540 --> 00:11:05,410
well but we'll go through more a little

00:11:02,950 --> 00:11:07,150
bit later and then as I'm going through

00:11:05,410 --> 00:11:08,410
and editing these files there's multiple

00:11:07,150 --> 00:11:10,810
different events that I could have so I

00:11:08,410 --> 00:11:14,080
could have a push event or I could do

00:11:10,810 --> 00:11:16,000
issue create again any of these events

00:11:14,080 --> 00:11:19,270
that happen on github you can go ahead

00:11:16,000 --> 00:11:21,520
and subscribe to these as well so then

00:11:19,270 --> 00:11:23,770
if I go over here to give you an idea

00:11:21,520 --> 00:11:25,630
almost anything that we generate a

00:11:23,770 --> 00:11:26,259
webhook event for these are actually

00:11:25,630 --> 00:11:28,929
fully sub

00:11:26,259 --> 00:11:30,549
ported directly and github actions so we

00:11:28,929 --> 00:11:32,139
go down here you can go ahead and look

00:11:30,549 --> 00:11:33,790
so whether or not you want to say hey I

00:11:32,139 --> 00:11:36,489
want to trigger our workflow off a check

00:11:33,790 --> 00:11:38,139
run or a check sweet or whenever a tag

00:11:36,489 --> 00:11:40,209
is created maybe you want to kick off a

00:11:38,139 --> 00:11:41,619
release whenever a tags created or you

00:11:40,209 --> 00:11:43,179
want to kick off a release only on a

00:11:41,619 --> 00:11:44,910
specific pattern of when that tags

00:11:43,179 --> 00:11:47,470
created maybe you want to say like

00:11:44,910 --> 00:11:49,809
v-star we can go ahead and do that as

00:11:47,470 --> 00:11:51,369
well if you want to filter down to a set

00:11:49,809 --> 00:11:53,169
of branches and only say for this set of

00:11:51,369 --> 00:11:55,539
branches if you want to filter down to

00:11:53,169 --> 00:11:57,579
just a path maybe you have a large mono

00:11:55,539 --> 00:11:58,929
repo and then you only want you want to

00:11:57,579 --> 00:12:00,309
have separate workflows for different

00:11:58,929 --> 00:12:01,749
paths than that so you want to go

00:12:00,309 --> 00:12:03,309
through and say hey if code changes in

00:12:01,749 --> 00:12:04,689
this directory let's go ahead and do

00:12:03,309 --> 00:12:06,189
this bill if it changes this directory

00:12:04,689 --> 00:12:08,309
do a different build again all that

00:12:06,189 --> 00:12:10,269
support is built directly into actions

00:12:08,309 --> 00:12:12,850
whether or not there's a deployment

00:12:10,269 --> 00:12:14,439
deployment status forking almost any

00:12:12,850 --> 00:12:16,209
event that happens on github it's all

00:12:14,439 --> 00:12:18,429
there and then we have a general event

00:12:16,209 --> 00:12:20,470
called the repository dispatch event so

00:12:18,429 --> 00:12:22,419
this allows any third party system to

00:12:20,470 --> 00:12:24,699
actually plug in with github actions and

00:12:22,419 --> 00:12:27,189
trigger any kind of workflow so this

00:12:24,699 --> 00:12:30,399
could be Prometheus this could be JIRA

00:12:27,189 --> 00:12:32,289
ticket is created it could be almost any

00:12:30,399 --> 00:12:34,269
event that's out there you can go ahead

00:12:32,289 --> 00:12:36,309
and hook up and it just gives you that

00:12:34,269 --> 00:12:38,019
flexibility to really make actions the

00:12:36,309 --> 00:12:40,329
glue that connects all these different

00:12:38,019 --> 00:12:41,079
pieces across your workflow so we really

00:12:40,329 --> 00:12:43,299
want you to be able to automate

00:12:41,079 --> 00:12:45,999
everything from idea all the way to

00:12:43,299 --> 00:12:51,699
production as well and not just have CI

00:12:45,999 --> 00:12:52,899
CD so let's jump back over here and one

00:12:51,699 --> 00:12:54,249
of the things that you'll notice here is

00:12:52,899 --> 00:12:56,889
a couple different things in this Marc

00:12:54,249 --> 00:12:58,539
flow in this markdown file sorry in this

00:12:56,889 --> 00:13:00,129
yamo file you'll notice here we have the

00:12:58,539 --> 00:13:01,149
matrix build and we're going ahead and

00:13:00,129 --> 00:13:03,129
building across multiple different

00:13:01,149 --> 00:13:04,689
versions of node again this matrix

00:13:03,129 --> 00:13:06,369
syntax isn't just something that's

00:13:04,689 --> 00:13:09,069
specific to node you could be doing this

00:13:06,369 --> 00:13:11,559
with multiple versions of go or Ruby or

00:13:09,069 --> 00:13:13,359
dotnet or anything there you can even do

00:13:11,559 --> 00:13:15,459
includes and excludes on these as well

00:13:13,359 --> 00:13:17,649
so you can say hey actually on this

00:13:15,459 --> 00:13:19,659
specific leg of the matrix I want to go

00:13:17,649 --> 00:13:21,429
and add this set of variables to that

00:13:19,659 --> 00:13:23,919
and specialize the build there or I want

00:13:21,429 --> 00:13:25,509
to exclude these other options you can

00:13:23,919 --> 00:13:27,220
have it fail fast so if one of the

00:13:25,509 --> 00:13:28,629
things in the matrix fails it's going to

00:13:27,220 --> 00:13:30,129
go ahead and stop running the whole

00:13:28,629 --> 00:13:33,129
matrix so you don't kind of burn up all

00:13:30,129 --> 00:13:34,749
that compute if you don't want to if we

00:13:33,129 --> 00:13:36,369
kind of crack open one of these you'll

00:13:34,749 --> 00:13:38,559
notice that we really went for an

00:13:36,369 --> 00:13:39,640
explicit syntax for how we go and build

00:13:38,559 --> 00:13:41,590
these so

00:13:39,640 --> 00:13:42,850
here with actions you'll notice that the

00:13:41,590 --> 00:13:44,500
first thing you have to do is check out

00:13:42,850 --> 00:13:46,480
and again this is because we're more

00:13:44,500 --> 00:13:48,310
than just the ICD if you're looking for

00:13:46,480 --> 00:13:50,710
you know an issue created or you're

00:13:48,310 --> 00:13:52,090
making a kind of a chat ops bot where

00:13:50,710 --> 00:13:54,010
you want to say when everybody adds a

00:13:52,090 --> 00:13:55,540
comment to the PR that's a slash deploy

00:13:54,010 --> 00:13:57,820
it's gonna kick off a deploy you don't

00:13:55,540 --> 00:13:59,200
want to be cloning code at that point so

00:13:57,820 --> 00:14:01,270
again you go ahead and check out the

00:13:59,200 --> 00:14:03,640
repo and then we have a set of actions

00:14:01,270 --> 00:14:04,870
to make it get started very easily with

00:14:03,640 --> 00:14:07,960
all the different languages and

00:14:04,870 --> 00:14:10,150
platforms we support so under actions we

00:14:07,960 --> 00:14:11,560
have setup node we also have a lot of

00:14:10,150 --> 00:14:13,840
different set up actions you can see if

00:14:11,560 --> 00:14:15,820
we're here set up Java set up Ruby go

00:14:13,840 --> 00:14:17,770
again all these easy ways to get started

00:14:15,820 --> 00:14:18,970
and kind of help you with some of the

00:14:17,770 --> 00:14:20,860
basics especially if you're doing

00:14:18,970 --> 00:14:23,380
cross-platform builds there's definitely

00:14:20,860 --> 00:14:25,150
differences between Linux and Windows

00:14:23,380 --> 00:14:26,620
and Mac on how some of these environment

00:14:25,150 --> 00:14:27,970
variables need this be set up if you

00:14:26,620 --> 00:14:30,760
want to set up proxy and authentication

00:14:27,970 --> 00:14:32,370
and all these other cases so these are

00:14:30,760 --> 00:14:34,300
helper actions that make it really easy

00:14:32,370 --> 00:14:36,370
but one of the cool things you'll notice

00:14:34,300 --> 00:14:38,950
here is you can just do run and then we

00:14:36,370 --> 00:14:40,420
will just run a bash command like

00:14:38,950 --> 00:14:41,740
directly here and then you can set

00:14:40,420 --> 00:14:43,720
environment variables and that's all

00:14:41,740 --> 00:14:45,490
scoped to this one step here but you

00:14:43,720 --> 00:14:49,150
notice some of these just say uses and

00:14:45,490 --> 00:14:50,890
it says uses actions setup node so what

00:14:49,150 --> 00:14:52,870
this is actually doing is it's going to

00:14:50,890 --> 00:14:57,810
the actions org and going ahead and

00:14:52,870 --> 00:15:00,850
grabbing the code directly off there and

00:14:57,810 --> 00:15:06,300
from there you can actually go and let's

00:15:00,850 --> 00:15:06,300
jump over and look at what that is here

00:15:18,410 --> 00:15:22,010
and then right down here we can go ahead

00:15:20,420 --> 00:15:23,570
and see the code for this specific

00:15:22,010 --> 00:15:25,280
action so there's a couple different

00:15:23,570 --> 00:15:27,650
things we have going on here one of them

00:15:25,280 --> 00:15:29,690
is everyone has this actions yamo file

00:15:27,650 --> 00:15:31,760
and what this does is just specify the

00:15:29,690 --> 00:15:32,900
basics of creating an action so that you

00:15:31,760 --> 00:15:34,610
can go ahead and share that in the

00:15:32,900 --> 00:15:36,320
marketplace and have other people go

00:15:34,610 --> 00:15:38,090
ahead and use that so it's a pretty

00:15:36,320 --> 00:15:39,440
similar similar format you would imagine

00:15:38,090 --> 00:15:41,690
you can go through give it a name

00:15:39,440 --> 00:15:43,340
description author you can specify a set

00:15:41,690 --> 00:15:46,130
of inputs in this case this set up one

00:15:43,340 --> 00:15:47,660
is has a couple inputs for the off that

00:15:46,130 --> 00:15:49,850
you want the specific node version that

00:15:47,660 --> 00:15:51,920
you want a registry URLs to make sure

00:15:49,850 --> 00:15:53,420
npm publish works properly scope

00:15:51,920 --> 00:15:55,640
information that you would need as well

00:15:53,420 --> 00:15:57,770
as well as version and then there's two

00:15:55,640 --> 00:15:59,330
different ways to write actions one of

00:15:57,770 --> 00:16:01,190
them is to just create a container and

00:15:59,330 --> 00:16:02,420
we'll execute that container another one

00:16:01,190 --> 00:16:03,770
is to use javascript to write your

00:16:02,420 --> 00:16:05,120
action and you just have a set of

00:16:03,770 --> 00:16:06,530
javascript which is what we used in this

00:16:05,120 --> 00:16:09,710
case just sitting right there in the

00:16:06,530 --> 00:16:12,650
repository so let me jump back up over

00:16:09,710 --> 00:16:14,060
here and we'll jump over to the source

00:16:12,650 --> 00:16:16,460
directory and get an idea of what that

00:16:14,060 --> 00:16:17,930
looks like so if I go over to this setup

00:16:16,460 --> 00:16:19,880
node in this case we ended up writing

00:16:17,930 --> 00:16:22,190
this in typescript but you can see we

00:16:19,880 --> 00:16:23,990
have a set of helper modules to make it

00:16:22,190 --> 00:16:25,910
really easy so directly in the actions

00:16:23,990 --> 00:16:28,280
or we have a core module that you can

00:16:25,910 --> 00:16:29,540
use so again doing cross-platform see

00:16:28,280 --> 00:16:30,980
ICD isn't always the most

00:16:29,540 --> 00:16:32,510
straightforward thing you have to

00:16:30,980 --> 00:16:33,770
execute things differently the file

00:16:32,510 --> 00:16:35,450
systems work a little bit so we have a

00:16:33,770 --> 00:16:38,120
set of helper functions to make that

00:16:35,450 --> 00:16:39,620
really easy to support that but other

00:16:38,120 --> 00:16:41,720
than that you're just writing JavaScript

00:16:39,620 --> 00:16:43,310
or typescript or anything that compiles

00:16:41,720 --> 00:16:44,930
down or trans piles directly down into

00:16:43,310 --> 00:16:46,760
JavaScript to go ahead and create your

00:16:44,930 --> 00:16:48,350
action which makes it really easy and

00:16:46,760 --> 00:16:50,630
approachable so you can go through and

00:16:48,350 --> 00:16:51,920
see what's going on here we can see

00:16:50,630 --> 00:16:53,870
we're grabbing the version from that

00:16:51,920 --> 00:16:55,160
version parameter we saw before we're

00:16:53,870 --> 00:16:56,780
going ahead and downloading a version if

00:16:55,160 --> 00:16:59,300
it's not there setting up the

00:16:56,780 --> 00:17:00,680
authentication and then setting up a set

00:16:59,300 --> 00:17:02,240
of problem a chore so that we can get

00:17:00,680 --> 00:17:04,459
better errors for what's happening for

00:17:02,240 --> 00:17:06,140
that specific language so again this

00:17:04,459 --> 00:17:07,880
gives you a little bit of an idea of

00:17:06,140 --> 00:17:09,680
what does it mean to go ahead and build

00:17:07,880 --> 00:17:11,180
an action and there's a talk later

00:17:09,680 --> 00:17:12,740
tomorrow afternoon

00:17:11,180 --> 00:17:14,959
that'll dig a little bit more on how to

00:17:12,740 --> 00:17:20,810
go and build actions and what that looks

00:17:14,959 --> 00:17:24,170
like so let's jump back to where we were

00:17:20,810 --> 00:17:26,870
before and I'll show you a couple more

00:17:24,170 --> 00:17:28,850
things here one of the other things that

00:17:26,870 --> 00:17:31,100
you saw from the demo was the set of

00:17:28,850 --> 00:17:31,950
marketplace actions and we have lots of

00:17:31,100 --> 00:17:33,330
different actions

00:17:31,950 --> 00:17:36,180
rectly in the marketplace so from right

00:17:33,330 --> 00:17:38,400
here you can go ahead and search so if

00:17:36,180 --> 00:17:41,250
you want to maybe work on a fireplace

00:17:38,400 --> 00:17:43,110
firefox add in I can go over here search

00:17:41,250 --> 00:17:44,670
for Firefox there's an add-in right

00:17:43,110 --> 00:17:46,830
there I can go ahead and see the number

00:17:44,670 --> 00:17:49,200
of stars if I wanted to click on this I

00:17:46,830 --> 00:17:50,850
can get an idea of the listing I can see

00:17:49,200 --> 00:17:52,920
the gamal that I need to copy and paste

00:17:50,850 --> 00:17:55,680
directly in and I can click right here

00:17:52,920 --> 00:17:58,350
go over here and just copy and paste

00:17:55,680 --> 00:17:59,730
that yeah mol directly in and again this

00:17:58,350 --> 00:18:02,010
is searching the entire marketplace

00:17:59,730 --> 00:18:03,600
again if you wanted to go over you can

00:18:02,010 --> 00:18:05,040
go over and view the full listing on the

00:18:03,600 --> 00:18:07,470
marketplace to get all the information

00:18:05,040 --> 00:18:11,700
on that let's go over and check out one

00:18:07,470 --> 00:18:13,380
more of these so we saw that there were

00:18:11,700 --> 00:18:17,610
some kubernetes ones as well so we can

00:18:13,380 --> 00:18:20,820
click on this one right here and jump

00:18:17,610 --> 00:18:21,750
over to the full marketplace listing and

00:18:20,820 --> 00:18:23,940
one of the things you'll notice is you

00:18:21,750 --> 00:18:27,000
have a full readme file as an author of

00:18:23,940 --> 00:18:28,380
these we have creator verification as

00:18:27,000 --> 00:18:29,880
well so we can tell you if it's an

00:18:28,380 --> 00:18:30,960
organization that you can trust is this

00:18:29,880 --> 00:18:33,390
officially from that official

00:18:30,960 --> 00:18:35,010
organization like is it the specific one

00:18:33,390 --> 00:18:37,110
that you know the code cuff team built

00:18:35,010 --> 00:18:39,120
for doing code coverage or is it from

00:18:37,110 --> 00:18:41,940
this case a sure is it from Google is it

00:18:39,120 --> 00:18:43,380
from AWS you can see stars you can see

00:18:41,940 --> 00:18:45,840
contributors you can see if there are

00:18:43,380 --> 00:18:47,550
open issues pull requests and then go

00:18:45,840 --> 00:18:51,110
through and get more information on what

00:18:47,550 --> 00:18:53,720
that is and how to go use that action so

00:18:51,110 --> 00:18:56,090
now let's jump over to another repo and

00:18:53,720 --> 00:19:00,570
walk through a little bit more detailed

00:18:56,090 --> 00:19:01,980
CI system so in this one is we as I

00:19:00,570 --> 00:19:03,450
mentioned before you can have multiple

00:19:01,980 --> 00:19:05,130
different filters and events so in this

00:19:03,450 --> 00:19:06,390
case it's pull request we have a push

00:19:05,130 --> 00:19:08,010
event we're filtering these down to

00:19:06,390 --> 00:19:09,690
branches you can include exclude

00:19:08,010 --> 00:19:12,660
branches you can filter on tags and

00:19:09,690 --> 00:19:14,910
paths as we talked about before you can

00:19:12,660 --> 00:19:16,260
set up matrices across multiple

00:19:14,910 --> 00:19:18,390
different things so you don't have to

00:19:16,260 --> 00:19:20,010
have a single matrix that's just note or

00:19:18,390 --> 00:19:22,110
a single variable you can multiply these

00:19:20,010 --> 00:19:23,460
out so in this case what's gonna happen

00:19:22,110 --> 00:19:25,890
is it's gonna run these three node

00:19:23,460 --> 00:19:28,200
versions across these four OS versions

00:19:25,890 --> 00:19:30,090
so I'm gonna kick off 12 simultaneous

00:19:28,200 --> 00:19:33,930
jobs that are all gonna run in parallel

00:19:30,090 --> 00:19:35,490
every single time I run my CI this is

00:19:33,930 --> 00:19:38,310
similar as we walked you before checking

00:19:35,490 --> 00:19:39,690
out the repo setting up the environment

00:19:38,310 --> 00:19:42,840
and going ahead and running a couple

00:19:39,690 --> 00:19:44,430
scripts then down here you can see some

00:19:42,840 --> 00:19:45,190
more of these use cases for these set up

00:19:44,430 --> 00:19:46,870
actions so

00:19:45,190 --> 00:19:48,550
this case I really want to target a

00:19:46,870 --> 00:19:50,140
specific version of node I want to have

00:19:48,550 --> 00:19:51,730
the registry and proxy and

00:19:50,140 --> 00:19:53,560
authentication information all set up

00:19:51,730 --> 00:19:56,680
for me so again all I'm gonna have to

00:19:53,560 --> 00:19:59,170
run is NPM publish and then we have a

00:19:56,680 --> 00:20:01,330
built-in secret store directly in to

00:19:59,170 --> 00:20:05,920
github as well so if I were to go over

00:20:01,330 --> 00:20:07,960
here and click on settings I can go down

00:20:05,920 --> 00:20:11,140
and right here there's a secret store

00:20:07,960 --> 00:20:12,790
built into every single repository so

00:20:11,140 --> 00:20:14,380
you can see I named this one NPM token

00:20:12,790 --> 00:20:16,270
again if you want to add a new secret

00:20:14,380 --> 00:20:18,520
it's as simple as going to here typing

00:20:16,270 --> 00:20:20,020
in a new secret the name and then

00:20:18,520 --> 00:20:22,750
providing a value and again that's

00:20:20,020 --> 00:20:25,360
securely stored by github and then if

00:20:22,750 --> 00:20:27,670
you wanted to use self-hosted runners as

00:20:25,360 --> 00:20:29,020
well we now have self hosted runner

00:20:27,670 --> 00:20:31,270
support as well so you can see I've

00:20:29,020 --> 00:20:33,520
already configured this Linux VM and

00:20:31,270 --> 00:20:35,620
it's not in use right now but if I

00:20:33,520 --> 00:20:37,090
wanted to add another runner we have an

00:20:35,620 --> 00:20:38,560
easy set of scripts that you can go do

00:20:37,090 --> 00:20:40,480
to download that runner on your own

00:20:38,560 --> 00:20:43,000
hardware and again we support Linux

00:20:40,480 --> 00:20:45,520
Windows and Mac OS and next week will

00:20:43,000 --> 00:20:48,760
also be supporting arm architectures arm

00:20:45,520 --> 00:20:50,320
32 arm 64 as well as x86 as well and

00:20:48,760 --> 00:20:51,880
we're continuing just to expand the

00:20:50,320 --> 00:20:53,260
breadth of that matrix so that you can

00:20:51,880 --> 00:20:58,530
test everything that you need to be able

00:20:53,260 --> 00:20:58,530
to test to have a full CI CD experience

00:20:59,250 --> 00:21:03,400
before one of things we talked about too

00:21:01,510 --> 00:21:05,020
was wanting to have fast builds so a key

00:21:03,400 --> 00:21:06,580
to that is having caching support and

00:21:05,020 --> 00:21:08,620
I'm really excited that we now have

00:21:06,580 --> 00:21:10,480
caching support so in this case maybe

00:21:08,620 --> 00:21:12,700
you want to cache your node modules

00:21:10,480 --> 00:21:14,110
directory this could be nougat packages

00:21:12,700 --> 00:21:17,140
or this could be some binaries that you

00:21:14,110 --> 00:21:19,270
went and built as well so we can jump

00:21:17,140 --> 00:21:21,250
over actually and check out that

00:21:19,270 --> 00:21:24,100
repository itself because again all

00:21:21,250 --> 00:21:27,040
these actions are open source I'll

00:21:24,100 --> 00:21:28,960
scroll down here and we have a set of

00:21:27,040 --> 00:21:30,850
examples right here to kind of give you

00:21:28,960 --> 00:21:33,370
an idea of how do you go ahead and use

00:21:30,850 --> 00:21:36,010
this action what does it mean okay the

00:21:33,370 --> 00:21:37,420
cache action we need a specific path to

00:21:36,010 --> 00:21:38,680
be provided so we know what we're gonna

00:21:37,420 --> 00:21:41,500
be caching and then you can generate

00:21:38,680 --> 00:21:44,260
that key yourself and again that T key

00:21:41,500 --> 00:21:45,970
could be tied to a path a specific

00:21:44,260 --> 00:21:47,470
runner a branch that you want to cache

00:21:45,970 --> 00:21:48,790
and obviously if there's a hundred

00:21:47,470 --> 00:21:50,920
percent cache hit it's gonna be really

00:21:48,790 --> 00:21:52,480
fast but we also have fallback as well

00:21:50,920 --> 00:21:54,490
so we you don't have to have a hundred

00:21:52,480 --> 00:21:55,960
percent cache hit you could say oh let's

00:21:54,490 --> 00:21:57,010
fall back let's check this other branch

00:21:55,960 --> 00:21:58,750
maybe from awhile ago

00:21:57,010 --> 00:21:59,030
grab the relevant packages there so

00:21:58,750 --> 00:22:00,950
you'll

00:21:59,030 --> 00:22:03,830
get some speed benefit maybe not as much

00:22:00,950 --> 00:22:06,470
with an exact cache hit and then if I

00:22:03,830 --> 00:22:08,450
click down here you'll also notice that

00:22:06,470 --> 00:22:10,700
we have examples for just about every

00:22:08,450 --> 00:22:13,880
language again our goal is to have every

00:22:10,700 --> 00:22:17,870
language every platform every cloud so

00:22:13,880 --> 00:22:20,540
whether you use Go Java maven NPM you're

00:22:17,870 --> 00:22:22,220
using yarn PHP again we have good

00:22:20,540 --> 00:22:23,930
examples the community is helping us

00:22:22,220 --> 00:22:26,540
author to make sure that you can use

00:22:23,930 --> 00:22:32,810
caching and build ci CD really into end

00:22:26,540 --> 00:22:34,370
for what you need now let's go ahead and

00:22:32,810 --> 00:22:37,940
look at what does it mean when we

00:22:34,370 --> 00:22:39,590
actually publish one of these so down

00:22:37,940 --> 00:22:42,040
before you solve that workflow that I

00:22:39,590 --> 00:22:44,810
was showing here a second ago

00:22:42,040 --> 00:22:47,450
where not only have I gone through and

00:22:44,810 --> 00:22:49,910
did the build but I also published here

00:22:47,450 --> 00:22:51,500
to NPM and github packages and now

00:22:49,910 --> 00:22:53,150
Samina is going to come up and show you

00:22:51,500 --> 00:23:03,880
what we've been working on with github

00:22:53,150 --> 00:23:06,800
packages so Jeremy showed you all about

00:23:03,880 --> 00:23:09,440
actions or not all about but a lot about

00:23:06,800 --> 00:23:11,030
actions and how to publish a package but

00:23:09,440 --> 00:23:13,730
these packages are only useful when

00:23:11,030 --> 00:23:16,670
somebody wants to consume them and need

00:23:13,730 --> 00:23:19,010
them and uses them so let's assume that

00:23:16,670 --> 00:23:21,290
I want to use the package that Jeremy

00:23:19,010 --> 00:23:23,410
just published there's a couple ways I

00:23:21,290 --> 00:23:25,940
could do that one is that I could go to

00:23:23,410 --> 00:23:29,780
Google let's say and search for a

00:23:25,940 --> 00:23:31,640
Fibonacci note package and install

00:23:29,780 --> 00:23:35,570
whatever I find on Google because it's a

00:23:31,640 --> 00:23:37,520
super safe way to use my source code now

00:23:35,570 --> 00:23:39,950
I won't do that another way I could do

00:23:37,520 --> 00:23:42,560
is to go to github into use search and

00:23:39,950 --> 00:23:45,290
to see what packages I find there that's

00:23:42,560 --> 00:23:47,600
a little bit better but in this case I

00:23:45,290 --> 00:23:49,460
want to use a package that somebody in

00:23:47,600 --> 00:23:50,870
my organization published because I

00:23:49,460 --> 00:23:53,840
really trust these people

00:23:50,870 --> 00:23:57,650
so what I can do is to go to my

00:23:53,840 --> 00:23:59,540
organization space on github and I will

00:23:57,650 --> 00:24:02,210
see here I have a lot of repositories

00:23:59,540 --> 00:24:06,020
and next to the repository step there's

00:24:02,210 --> 00:24:08,090
a package tab and these packages are all

00:24:06,020 --> 00:24:11,270
the packages that were published by

00:24:08,090 --> 00:24:12,470
somebody in my organization so what is

00:24:11,270 --> 00:24:14,180
signals to me is a

00:24:12,470 --> 00:24:16,280
I can trust these packages these are

00:24:14,180 --> 00:24:19,700
people that have already commit rights

00:24:16,280 --> 00:24:21,440
to the repositories in the org so I can

00:24:19,700 --> 00:24:23,750
trust them and install packages that

00:24:21,440 --> 00:24:26,360
they published as well and you can see

00:24:23,750 --> 00:24:28,610
here that github packages has support

00:24:26,360 --> 00:24:31,580
for many ecosystems so there's here a

00:24:28,610 --> 00:24:34,250
docker image and there's a maven package

00:24:31,580 --> 00:24:37,160
there's a Gradle one and there's also

00:24:34,250 --> 00:24:39,650
support for nougat and Ruby gems but in

00:24:37,160 --> 00:24:41,780
this specific scenario what I care is

00:24:39,650 --> 00:24:44,210
about installing a node package and

00:24:41,780 --> 00:24:46,790
looking at the node packages looks like

00:24:44,210 --> 00:24:49,910
this one over here is really popular it

00:24:46,790 --> 00:24:53,570
has over 1,000 downloads good job

00:24:49,910 --> 00:24:56,420
journey so I will click on this package

00:24:53,570 --> 00:24:59,120
and here on this page I will be able to

00:24:56,420 --> 00:25:00,770
see a lot of useful information so first

00:24:59,120 --> 00:25:02,540
of all it's a latest version which means

00:25:00,770 --> 00:25:05,150
it's probably the version that i should

00:25:02,540 --> 00:25:09,520
install and at the top there's the

00:25:05,150 --> 00:25:13,040
install instructions generated by github

00:25:09,520 --> 00:25:15,290
so i can simply copy these instructions

00:25:13,040 --> 00:25:17,630
put them in my project and then get

00:25:15,290 --> 00:25:20,540
started with this package i can also

00:25:17,630 --> 00:25:23,840
configure my project to use github

00:25:20,540 --> 00:25:25,640
packages as a proxy so it gets all the

00:25:23,840 --> 00:25:27,170
in for all the other packages that i

00:25:25,640 --> 00:25:32,510
have specified in my package JSON

00:25:27,170 --> 00:25:34,850
straight from NPM js now here there's a

00:25:32,510 --> 00:25:37,490
description for the package but if I

00:25:34,850 --> 00:25:39,290
wanted to make things a bit more clear

00:25:37,490 --> 00:25:40,580
for developers that are wanting to use

00:25:39,290 --> 00:25:42,950
the package or include more information

00:25:40,580 --> 00:25:45,890
I can simply edit it it's a simple

00:25:42,950 --> 00:25:49,460
simple markdown file so it's easy to get

00:25:45,890 --> 00:25:52,430
started what else I have more package

00:25:49,460 --> 00:25:56,120
details such as the organization and the

00:25:52,430 --> 00:25:58,610
repository that this package belongs to

00:25:56,120 --> 00:26:02,330
the date when it was published and also

00:25:58,610 --> 00:26:05,690
download activity so this was the

00:26:02,330 --> 00:26:07,790
repository that Jeremy published earlier

00:26:05,690 --> 00:26:09,350
today and then I can also see previous

00:26:07,790 --> 00:26:14,390
versions that were published in the neck

00:26:09,350 --> 00:26:15,980
last few days so with that I want to

00:26:14,390 --> 00:26:19,870
pass back to Jeremy and to show us some

00:26:15,980 --> 00:26:21,950
more stuff about actions great thanks

00:26:19,870 --> 00:26:25,910
one of the things that we talked about

00:26:21,950 --> 00:26:27,350
before was CI CD is amazing for getting

00:26:25,910 --> 00:26:29,810
productivity back in making sure that

00:26:27,350 --> 00:26:31,160
you can deploy packages and get those

00:26:29,810 --> 00:26:32,480
into production and get all of your

00:26:31,160 --> 00:26:34,460
building and testing especially in

00:26:32,480 --> 00:26:36,560
parallel but another key part of that is

00:26:34,460 --> 00:26:38,030
actually deploying web services so when

00:26:36,560 --> 00:26:39,890
to spend some time kind of showing some

00:26:38,030 --> 00:26:43,850
of the work that we've done around there

00:26:39,890 --> 00:26:46,730
as well so let's go in here and look at

00:26:43,850 --> 00:26:48,320
one of these workflows so you can see we

00:26:46,730 --> 00:26:50,510
have a couple different workflows all

00:26:48,320 --> 00:26:53,090
upload this one right here for deploying

00:26:50,510 --> 00:26:54,980
Google so again we have a set of starter

00:26:53,090 --> 00:26:57,020
workflows that make it really easy for

00:26:54,980 --> 00:26:58,730
you just to grab ones in this case this

00:26:57,020 --> 00:27:00,770
is one that Google supports themselves

00:26:58,730 --> 00:27:04,970
and you can go ahead and see their

00:27:00,770 --> 00:27:07,130
recommended way of deploying to gke so

00:27:04,970 --> 00:27:08,510
in here you can see we're automatically

00:27:07,130 --> 00:27:10,160
going to kick off this deployment

00:27:08,510 --> 00:27:12,320
whenever there's a change to pull

00:27:10,160 --> 00:27:14,720
requests in the master branch you set a

00:27:12,320 --> 00:27:16,550
set of environment variables up front

00:27:14,720 --> 00:27:18,500
again we have environment variables at

00:27:16,550 --> 00:27:20,210
the work flow level you have to go ahead

00:27:18,500 --> 00:27:22,100
and configure a couple different secrets

00:27:20,210 --> 00:27:23,780
to get that image in there correctly and

00:27:22,100 --> 00:27:25,520
then a lot of the things that you would

00:27:23,780 --> 00:27:26,390
expect for deploying the kubernetes if

00:27:25,520 --> 00:27:29,320
you've done that before

00:27:26,390 --> 00:27:31,550
I can go ahead here check out the repo

00:27:29,320 --> 00:27:33,590
they go ahead and create a github

00:27:31,550 --> 00:27:36,890
deployment what this actually does is

00:27:33,590 --> 00:27:39,560
creates a little bit of deployment UI in

00:27:36,890 --> 00:27:41,690
the air repo as well so what that does

00:27:39,560 --> 00:27:43,160
is if I were to go over here to code

00:27:41,690 --> 00:27:44,870
you'll notice this environments tab

00:27:43,160 --> 00:27:46,400
appears if you go ahead and create a

00:27:44,870 --> 00:27:47,990
github deployment and it will also show

00:27:46,400 --> 00:27:49,850
that in the pull request as well so you

00:27:47,990 --> 00:27:52,250
don't just see the workflow run you also

00:27:49,850 --> 00:27:54,530
see the actual deployment specifics and

00:27:52,250 --> 00:27:56,330
if you dig into this you can kind of see

00:27:54,530 --> 00:27:57,830
all the different environments this AWS

00:27:56,330 --> 00:27:59,870
environment Google and Azure that are

00:27:57,830 --> 00:28:03,370
there as well as a history of all the

00:27:59,870 --> 00:28:03,370
different deployments that have happened

00:28:04,450 --> 00:28:08,890
so let's jump back into this workflow

00:28:12,290 --> 00:28:16,860
so for here I've created the github

00:28:14,340 --> 00:28:19,770
deployment and then they've also created

00:28:16,860 --> 00:28:21,300
a setup g-cloud action as well so what

00:28:19,770 --> 00:28:22,920
this enables you to do is to make sure

00:28:21,300 --> 00:28:25,080
you have the latest version of the

00:28:22,920 --> 00:28:26,730
g-cloud CLI installed you can go ahead

00:28:25,080 --> 00:28:28,590
and specify that here and get the basic

00:28:26,730 --> 00:28:30,810
setup for your account key email

00:28:28,590 --> 00:28:32,820
everything an easy action to get started

00:28:30,810 --> 00:28:34,980
there and then they run a couple scripts

00:28:32,820 --> 00:28:37,110
just going ahead and authenticating into

00:28:34,980 --> 00:28:38,880
g-cloud going ahead and building a

00:28:37,110 --> 00:28:40,290
docker image and again you're just using

00:28:38,880 --> 00:28:42,300
the normal commands that you'll be

00:28:40,290 --> 00:28:45,390
running locally as well

00:28:42,300 --> 00:28:47,310
go down here publish and again you can

00:28:45,390 --> 00:28:48,870
publish to github package registry we

00:28:47,310 --> 00:28:50,520
have great container support as well in

00:28:48,870 --> 00:28:54,180
this case it's getting published to the

00:28:50,520 --> 00:28:56,370
Google container registry go ahead and

00:28:54,180 --> 00:28:58,440
set up a couple more items and then do a

00:28:56,370 --> 00:29:01,050
deployment right here and then update

00:28:58,440 --> 00:29:03,750
your deployment status at the end so

00:29:01,050 --> 00:29:05,700
again a familiar easy way to go approach

00:29:03,750 --> 00:29:07,620
these these are all bash scripts that

00:29:05,700 --> 00:29:09,150
we're just running directly inline here

00:29:07,620 --> 00:29:11,520
you'd be able to run these on your local

00:29:09,150 --> 00:29:13,500
machine to test and debug those as well

00:29:11,520 --> 00:29:16,280
one by one just to make sure it's all

00:29:13,500 --> 00:29:20,460
working exactly the way that you expect

00:29:16,280 --> 00:29:23,220
and then as well with actions obviously

00:29:20,460 --> 00:29:25,740
if you've been doing a lot of workflows

00:29:23,220 --> 00:29:27,210
and CI CD you need an easy way to kind

00:29:25,740 --> 00:29:29,340
of get an idea of what is the state of

00:29:27,210 --> 00:29:30,780
my system or my builds going well or my

00:29:29,340 --> 00:29:32,100
deployments going bad where is it

00:29:30,780 --> 00:29:33,360
failing maybe you have someone that kind

00:29:32,100 --> 00:29:35,460
of looks after the build on your

00:29:33,360 --> 00:29:37,470
engineering team and we have a really

00:29:35,460 --> 00:29:39,090
easy experience for doing that directly

00:29:37,470 --> 00:29:40,470
and github actions you can go over here

00:29:39,090 --> 00:29:42,360
and you saw me earlier create a new

00:29:40,470 --> 00:29:43,530
workflow I can also see all the

00:29:42,360 --> 00:29:45,210
different workflows that are in this

00:29:43,530 --> 00:29:48,120
repository right here on the left hand

00:29:45,210 --> 00:29:50,190
side I can go ahead and scroll down and

00:29:48,120 --> 00:29:52,080
see each one of the runs of those

00:29:50,190 --> 00:29:54,360
workflows so in this case I'm at all

00:29:52,080 --> 00:29:58,590
workflows view but let's dig in just

00:29:54,360 --> 00:30:00,510
specifically to the Google one so I'll

00:29:58,590 --> 00:30:01,920
click right here and now we've filtered

00:30:00,510 --> 00:30:04,020
the list you can see that added right

00:30:01,920 --> 00:30:06,420
there to the search bar just down to the

00:30:04,020 --> 00:30:07,650
deploying to gke ones I can go through

00:30:06,420 --> 00:30:09,870
here and I can see all there was a

00:30:07,650 --> 00:30:11,280
failure a couple of them succeeded I can

00:30:09,870 --> 00:30:14,310
go ahead and see the branch who

00:30:11,280 --> 00:30:16,980
triggered that how long ago was it how

00:30:14,310 --> 00:30:18,870
long did the deployment take and then be

00:30:16,980 --> 00:30:20,700
able to jump into specifics like going

00:30:18,870 --> 00:30:22,290
ahead and view that individual run or

00:30:20,700 --> 00:30:23,850
being able to pull out a workflow file I

00:30:22,290 --> 00:30:25,020
can even click over here and easily

00:30:23,850 --> 00:30:27,450
search maybe I

00:30:25,020 --> 00:30:29,550
to go filter all these by the branch or

00:30:27,450 --> 00:30:31,170
a specific events it's all right there

00:30:29,550 --> 00:30:33,030
right in my search box or I can search

00:30:31,170 --> 00:30:34,650
directly here to to maybe see who was it

00:30:33,030 --> 00:30:38,610
that triggered that build or who didn't

00:30:34,650 --> 00:30:41,010
trigger that build but again it's again

00:30:38,610 --> 00:30:43,020
with actions it's not just CI CD so we

00:30:41,010 --> 00:30:44,640
looked at packages we looked at also web

00:30:43,020 --> 00:30:45,990
service deployments there's a lot of

00:30:44,640 --> 00:30:48,690
other really interesting things and this

00:30:45,990 --> 00:30:51,420
is one of my favorite actions they got

00:30:48,690 --> 00:30:55,050
build recently is that the yarn team has

00:30:51,420 --> 00:30:59,250
actually been using this to determine if

00:30:55,050 --> 00:31:02,240
a bug is reproducible or not so let's go

00:30:59,250 --> 00:31:02,240
over here and look for this

00:31:10,280 --> 00:31:17,450
and we can go ahead and click on one of

00:31:12,950 --> 00:31:18,530
the bugs here and one of the things that

00:31:17,450 --> 00:31:20,960
you'll notice they built this really

00:31:18,530 --> 00:31:22,610
creative github action so whenever

00:31:20,960 --> 00:31:24,290
someone's filing an issue in the yarn

00:31:22,610 --> 00:31:26,420
repo a lot of times they want to know is

00:31:24,290 --> 00:31:27,710
this bug reproducible or is it not and

00:31:26,420 --> 00:31:28,820
it's a lot of work for the kind of

00:31:27,710 --> 00:31:30,290
maintainer x' to go through sometimes

00:31:28,820 --> 00:31:32,090
the person filing the issue does that

00:31:30,290 --> 00:31:33,770
hard work sometimes they don't but now

00:31:32,090 --> 00:31:36,170
what you can do is if you just do proper

00:31:33,770 --> 00:31:37,670
code fencing on a on when you file the

00:31:36,170 --> 00:31:39,800
issue you can come in here and put a

00:31:37,670 --> 00:31:42,170
block of code and then what they will do

00:31:39,800 --> 00:31:44,030
is they created this github action via

00:31:42,170 --> 00:31:46,250
this yarn bot that will automatically

00:31:44,030 --> 00:31:48,530
run that set of code see if the issue is

00:31:46,250 --> 00:31:50,720
reproducible and go ahead and label it

00:31:48,530 --> 00:31:52,550
as well so again this shows the kind of

00:31:50,720 --> 00:31:53,900
variety of things you can do Wow we have

00:31:52,550 --> 00:31:56,000
full support for everything you would

00:31:53,900 --> 00:31:58,370
expect with CI CD conditional statements

00:31:56,000 --> 00:32:00,830
to run steps or not run steps to get

00:31:58,370 --> 00:32:03,050
back call the github API to get an

00:32:00,830 --> 00:32:05,150
insight into specifically what's going

00:32:03,050 --> 00:32:06,710
on with your builds again you can do all

00:32:05,150 --> 00:32:07,970
of that but there's really this whole

00:32:06,710 --> 00:32:09,380
other world of things that we can

00:32:07,970 --> 00:32:11,450
automate whether it be if an issue is

00:32:09,380 --> 00:32:13,280
reproducible or welcoming a new

00:32:11,450 --> 00:32:15,110
contributor or maybe you have in your

00:32:13,280 --> 00:32:17,090
Enterprise you have a set of corporate

00:32:15,110 --> 00:32:18,700
compliance policies that you need to say

00:32:17,090 --> 00:32:21,380
hey whenever somebody joins a repository

00:32:18,700 --> 00:32:23,870
we need to go ahead and take some action

00:32:21,380 --> 00:32:25,040
or whenever somebody leads the company

00:32:23,870 --> 00:32:26,960
we want to go ahead and make sure that

00:32:25,040 --> 00:32:29,270
we remove their access to the repository

00:32:26,960 --> 00:32:30,170
all of these are the examples of

00:32:29,270 --> 00:32:35,120
different things that you can go ahead

00:32:30,170 --> 00:32:36,140
and automate with github actions all

00:32:35,120 --> 00:32:41,300
right now let's switch back to the

00:32:36,140 --> 00:32:42,470
slides so as you saw we went over a

00:32:41,300 --> 00:32:44,270
couple different things with github

00:32:42,470 --> 00:32:47,330
actions you can see we can build on

00:32:44,270 --> 00:32:49,340
Linux Windows Mac as well as having

00:32:47,330 --> 00:32:51,350
container builds one of the interesting

00:32:49,340 --> 00:32:53,240
things about containers as well as not

00:32:51,350 --> 00:32:54,590
only what can we build inside the

00:32:53,240 --> 00:32:56,450
container so you can provide a set of

00:32:54,590 --> 00:32:58,730
steps that we can go run there we also

00:32:56,450 --> 00:32:59,990
have multi container testing and that

00:32:58,730 --> 00:33:01,730
one of the talks tomorrow is going to go

00:32:59,990 --> 00:33:02,090
into even more details of how to set

00:33:01,730 --> 00:33:04,310
that up

00:33:02,090 --> 00:33:06,230
so in that case imagine you're doing a

00:33:04,310 --> 00:33:07,610
web service and you have maybe like a

00:33:06,230 --> 00:33:09,770
node web service and then you minitest

00:33:07,610 --> 00:33:11,300
with a Postgres database we have full

00:33:09,770 --> 00:33:12,890
set up right there and our CI CD

00:33:11,300 --> 00:33:14,780
workflow so that you can easily and

00:33:12,890 --> 00:33:17,120
automatically network those together to

00:33:14,780 --> 00:33:20,060
do functional into end testing directly

00:33:17,120 --> 00:33:22,000
in your CI CD Matrix builds and caching

00:33:20,060 --> 00:33:24,130
to have those fast parallel testing

00:33:22,000 --> 00:33:25,870
streaming searchable law

00:33:24,130 --> 00:33:27,580
again with color coding everything that

00:33:25,870 --> 00:33:29,380
you would expect right there to quickly

00:33:27,580 --> 00:33:31,060
find that issue you can even link to

00:33:29,380 --> 00:33:32,170
specific lines of the log send that to

00:33:31,060 --> 00:33:33,490
somebody else if you're not sure what

00:33:32,170 --> 00:33:36,160
the error is and get their feedback on

00:33:33,490 --> 00:33:38,440
that we have a built-in secret store and

00:33:36,160 --> 00:33:40,240
then finally we now have self hosted

00:33:38,440 --> 00:33:44,530
runners including next week ARM

00:33:40,240 --> 00:33:46,390
architecture support and x86 support for

00:33:44,530 --> 00:33:49,390
packages you can publish your public and

00:33:46,390 --> 00:33:51,610
private packages and you have one login

00:33:49,390 --> 00:33:53,770
for your code and packages and this also

00:33:51,610 --> 00:33:56,830
means you'll have the same it hub api's

00:33:53,770 --> 00:34:00,190
and web hook support for your forget hub

00:33:56,830 --> 00:34:03,810
packages it has support for multiple

00:34:00,190 --> 00:34:07,150
ecosystems NPM docker maven and Gradle

00:34:03,810 --> 00:34:08,710
nugget and ruby gems and finally where

00:34:07,150 --> 00:34:11,830
it's really well with actions and with

00:34:08,710 --> 00:34:14,010
any CI now I you might be wondering what

00:34:11,830 --> 00:34:18,100
it costs if you're an open-source

00:34:14,010 --> 00:34:20,620
maintainer or a team working on open

00:34:18,100 --> 00:34:22,870
source repositories both github actions

00:34:20,620 --> 00:34:27,210
and github packages are completely free

00:34:22,870 --> 00:34:27,210
for open source and public repositories

00:34:29,190 --> 00:34:35,620
if you are using private repositories we

00:34:34,030 --> 00:34:38,679
also have really good news for you

00:34:35,620 --> 00:34:41,350
github actions offers a simple

00:34:38,679 --> 00:34:44,260
pay-as-you-go pricing with included

00:34:41,350 --> 00:34:46,179
minutes on each plan to get started and

00:34:44,260 --> 00:34:48,580
it's the same for packages you will get

00:34:46,179 --> 00:34:51,370
it for every one every plan and you'll

00:34:48,580 --> 00:34:53,590
have included storage and downloads on

00:34:51,370 --> 00:34:57,640
every plan so what does it mean in

00:34:53,590 --> 00:35:01,360
practice for github actions we are

00:34:57,640 --> 00:35:03,370
charging you per minute and you will

00:35:01,360 --> 00:35:05,860
have a generous amount of minute on any

00:35:03,370 --> 00:35:08,650
plan you are for private repositories so

00:35:05,860 --> 00:35:11,080
if you're on github free and that means

00:35:08,650 --> 00:35:14,080
you're paying precisely zero dollars for

00:35:11,080 --> 00:35:19,060
github you will get 2,000 minutes of

00:35:14,080 --> 00:35:21,160
free 2,000 minutes of yeah for private

00:35:19,060 --> 00:35:23,230
repositories and if you're on

00:35:21,160 --> 00:35:25,980
organization you can get up to 50

00:35:23,230 --> 00:35:30,460
thousands minutes for an enterprise

00:35:25,980 --> 00:35:32,890
organization for per billing entity if

00:35:30,460 --> 00:35:35,650
you want more it's easy you can just

00:35:32,890 --> 00:35:37,869
enable overages either through your

00:35:35,650 --> 00:35:40,990
billing settings UI or byte

00:35:37,869 --> 00:35:42,430
into your sales account manager and you

00:35:40,990 --> 00:35:45,069
can just pay as you go for the extra

00:35:42,430 --> 00:35:47,769
minutes and if you want to use your own

00:35:45,069 --> 00:35:50,859
self hosted machines either in a VM

00:35:47,769 --> 00:35:54,940
somewhere or on your Prem it's all for

00:35:50,859 --> 00:35:57,789
free for github packages it's similar

00:35:54,940 --> 00:36:00,099
so github charges for the storage used

00:35:57,789 --> 00:36:01,720
by your packages and for the Downloads

00:36:00,099 --> 00:36:04,390
made for the packages so for the data

00:36:01,720 --> 00:36:06,880
transfer out and you will get included

00:36:04,390 --> 00:36:09,249
amounts from free to pro to team to

00:36:06,880 --> 00:36:11,259
enterprise and for instance for

00:36:09,249 --> 00:36:14,819
enterprise you get 50 gigabytes of

00:36:11,259 --> 00:36:17,589
storage for your enterprise account and

00:36:14,819 --> 00:36:19,660
200 gigabytes for data transfer out and

00:36:17,589 --> 00:36:22,029
this is already included in what you're

00:36:19,660 --> 00:36:23,920
paying today if you need more you can

00:36:22,029 --> 00:36:27,069
pay additionally for storage and for

00:36:23,920 --> 00:36:29,380
data transfer out now if you use github

00:36:27,069 --> 00:36:31,630
packages and github actions together and

00:36:29,380 --> 00:36:34,930
we think you really should the data

00:36:31,630 --> 00:36:36,849
transferred out from github packages

00:36:34,930 --> 00:36:39,519
it's for free when use with github

00:36:36,849 --> 00:36:41,920
actions so if you use an action doing

00:36:39,519 --> 00:36:47,680
npm install or the Downloads from github

00:36:41,920 --> 00:36:49,960
packages will be for free ok so I think

00:36:47,680 --> 00:36:51,960
that's about it we are really excited

00:36:49,960 --> 00:36:55,690
about bringing actions and packages

00:36:51,960 --> 00:36:58,509
general available available today you

00:36:55,690 --> 00:37:00,400
can go ahead and check them out go and

00:36:58,509 --> 00:37:02,739
try them out in your repositories it's

00:37:00,400 --> 00:37:05,499
for free if you have public repos if not

00:37:02,739 --> 00:37:09,430
you have plenty already included to get

00:37:05,499 --> 00:37:12,009
started and yeah come to us the github

00:37:09,430 --> 00:37:14,230
as github boost ask us questions and

00:37:12,009 --> 00:37:15,999
also go to Kayla's and add session

00:37:14,230 --> 00:37:18,010
tomorrow afternoon at the Embarcadero

00:37:15,999 --> 00:37:20,150
stage thanks

00:37:18,010 --> 00:37:51,809
[Applause]

00:37:20,150 --> 00:37:51,809

YouTube URL: https://www.youtube.com/watch?v=5bvafq4zSUo


