Title: Advanced GitHub Actions: workflows for production grade CI CD - GitHub Universe 2019
Publication date: 2019-12-13
Playlist: GitHub Universe 2019 - GitHub Product Updates
Description: 
	Join GitHub Product Managers, Kayla Ngan and Edward Thomson, for a demo-packed session on GitHub Actions. After a short primer on advanced features, see how to deploy to GitHub Packages, auto-merge dependabot pull requests, and deploy a web service. This talk will inspire you to get creative with how you use Actions in your daily workflows.

About GitHub Universe:
GitHub Universe is a two-day conference dedicated to the creativity and curiosity of the largest software community in the world. Sessions cover topics from team culture to open source software across industries and technologies.

For more information on GitHub Universe, check the website:
https://githubuniverse.com
Captions: 
	00:00:00,680 --> 00:00:18,929
[Music]

00:00:19,310 --> 00:00:27,390
hi folks my name is ed this is my

00:00:23,730 --> 00:00:29,849
colleague kala today we want to talk a

00:00:27,390 --> 00:00:32,309
little bit about github actions I hope

00:00:29,849 --> 00:00:35,250
that you've heard a lot already

00:00:32,309 --> 00:00:38,309
between yesterday's keynote with Jeremy

00:00:35,250 --> 00:00:40,500
the session between that the Jeremy did

00:00:38,309 --> 00:00:45,720
after that and of course today's keynote

00:00:40,500 --> 00:00:47,370
as well so I think that I hope at least

00:00:45,720 --> 00:00:49,199
that you've seen a lot about actions so

00:00:47,370 --> 00:00:51,899
far but we want to take it just a little

00:00:49,199 --> 00:00:53,520
bit deeper we want to show you a few

00:00:51,899 --> 00:00:56,969
more advanced things a few more advanced

00:00:53,520 --> 00:00:59,129
scenarios that you can do with github

00:00:56,969 --> 00:01:01,079
actions real quick introduction my name

00:00:59,129 --> 00:01:04,800
is Edward Thompson I'm a product manager

00:01:01,079 --> 00:01:06,690
for github actions so I'm part of the

00:01:04,800 --> 00:01:08,580
team that's that's been working on this

00:01:06,690 --> 00:01:11,039
really exciting product so I wish the

00:01:08,580 --> 00:01:15,149
whole team could be here sadly it's just

00:01:11,039 --> 00:01:16,729
me and Kayla for now but we'll have some

00:01:15,149 --> 00:01:19,229
more people from the team available

00:01:16,729 --> 00:01:21,149
after this if you want to hang out and

00:01:19,229 --> 00:01:23,310
talk and get your get your questions

00:01:21,149 --> 00:01:24,720
answered and if you don't if you're if

00:01:23,310 --> 00:01:27,270
you're feeling a little introverted or a

00:01:24,720 --> 00:01:28,470
little shy or you're overwhelmed with

00:01:27,270 --> 00:01:30,270
the number of things that you can do at

00:01:28,470 --> 00:01:32,910
universe that's totally cool feel free

00:01:30,270 --> 00:01:36,179
to hit me up you can find me on twitter

00:01:32,910 --> 00:01:39,209
i'm e Thompson it's Thompson without a P

00:01:36,179 --> 00:01:42,780
ETH OMS o n happy to answer any

00:01:39,209 --> 00:01:44,910
questions that you have and I'm Kayla

00:01:42,780 --> 00:01:47,280
I'm also a product manager on github

00:01:44,910 --> 00:01:49,470
actions and like Ed said you can find me

00:01:47,280 --> 00:01:53,459
after the talk at the hack space down

00:01:49,470 --> 00:01:56,190
though so diving right in I'm gonna

00:01:53,459 --> 00:01:58,099
start by covering a few concepts before

00:01:56,190 --> 00:02:03,450
we go deeper so I'll talk about triggers

00:01:58,099 --> 00:02:05,970
matrices and caching so here I have a

00:02:03,450 --> 00:02:10,679
node app it's for a basic calculator and

00:02:05,970 --> 00:02:13,040
let's just set up CI for it so I'll go

00:02:10,679 --> 00:02:16,110
to the actions tab to get started and

00:02:13,040 --> 00:02:18,599
github actions suggest a couple of

00:02:16,110 --> 00:02:21,000
different templates for me to use sees

00:02:18,599 --> 00:02:23,989
that I have a note app so let's just use

00:02:21,000 --> 00:02:23,989
that and template

00:02:24,340 --> 00:02:28,780
taking a look at this template we can

00:02:26,680 --> 00:02:32,739
see that it's going to trigger on every

00:02:28,780 --> 00:02:34,300
push it'll run on Ubuntu latest and then

00:02:32,739 --> 00:02:36,489
it's actually going to create a matrix

00:02:34,300 --> 00:02:40,360
of jobs for three different versions of

00:02:36,489 --> 00:02:42,819
node for the steps it'll check out the

00:02:40,360 --> 00:02:44,709
repository it'll set up that version of

00:02:42,819 --> 00:02:49,599
node and then it'll do the build and

00:02:44,709 --> 00:02:52,060
test so right now it's configured to run

00:02:49,599 --> 00:02:53,920
on every push and that may not be

00:02:52,060 --> 00:02:55,930
something that I want I might not want

00:02:53,920 --> 00:02:58,599
it to run on every push every feature

00:02:55,930 --> 00:03:02,200
branch for example so I can actually set

00:02:58,599 --> 00:03:04,599
up triggers to be more specific so I'm

00:03:02,200 --> 00:03:07,470
going to actually update this trigger to

00:03:04,599 --> 00:03:11,230
run on pushes two particular branches

00:03:07,470 --> 00:03:14,799
specifically master and release branches

00:03:11,230 --> 00:03:17,079
and here I can actually use wildcards so

00:03:14,799 --> 00:03:18,700
I don't have to specify a bunch of

00:03:17,079 --> 00:03:22,900
branches I can say anything that matches

00:03:18,700 --> 00:03:26,019
release slash I can also set this up for

00:03:22,900 --> 00:03:29,560
pull request validation so I'll add a

00:03:26,019 --> 00:03:37,989
second trigger and I will run this on

00:03:29,560 --> 00:03:40,060
pull requests into master great so right

00:03:37,989 --> 00:03:42,700
now it's running a matrix across three

00:03:40,060 --> 00:03:46,120
versions of node I'm actually going to

00:03:42,700 --> 00:03:49,450
update this and run a matrix across the

00:03:46,120 --> 00:03:52,139
three operating systems so let's replace

00:03:49,450 --> 00:03:56,319
this with the three os's

00:03:52,139 --> 00:04:01,180
we've got Ubuntu latest Windows latest

00:03:56,319 --> 00:04:05,799
and Mac OS latest and then I'll update

00:04:01,180 --> 00:04:11,169
the runs on above to use the matrix OS

00:04:05,799 --> 00:04:13,750
variable and then we'll also want to

00:04:11,169 --> 00:04:15,790
replace the node version variable that

00:04:13,750 --> 00:04:18,579
we had using we're using down at the

00:04:15,790 --> 00:04:22,090
bottom and let's just use twelve points

00:04:18,579 --> 00:04:23,979
for now so one other thing that I can

00:04:22,090 --> 00:04:28,060
add to my workflow that'll help speed it

00:04:23,979 --> 00:04:29,440
up in some cases is caching so I'm going

00:04:28,060 --> 00:04:31,780
to go over to the market place here and

00:04:29,440 --> 00:04:35,689
look for the caching action

00:04:31,780 --> 00:04:38,419
so I see here is the cash action I can

00:04:35,689 --> 00:04:39,590
go view the marketplace listing and I

00:04:38,419 --> 00:04:42,710
can go get some more information about

00:04:39,590 --> 00:04:45,289
it I can see you know who's contributed

00:04:42,710 --> 00:04:49,490
to it the number of stars it has and I

00:04:45,289 --> 00:04:52,430
can view some documentation so I can see

00:04:49,490 --> 00:04:54,889
the inputs it requires the outputs an

00:04:52,430 --> 00:04:56,930
example workflow and here at the bottom

00:04:54,889 --> 00:05:01,129
there are some other examples so let's

00:04:56,930 --> 00:05:05,900
click that and we can see that there's

00:05:01,129 --> 00:05:07,550
actually a node NPM example so at the

00:05:05,900 --> 00:05:10,659
top here there's a snippet for Mac OS

00:05:07,550 --> 00:05:15,469
and Ubuntu you can see it takes the path

00:05:10,659 --> 00:05:18,529
then it has a key it hashes the file so

00:05:15,469 --> 00:05:31,460
let's copy that snippet into our

00:05:18,529 --> 00:05:34,340
workflow now if you remember this was

00:05:31,460 --> 00:05:37,069
just for Mac OS and Linux so we'd want

00:05:34,340 --> 00:05:42,979
this step to be conditional if the

00:05:37,069 --> 00:05:44,750
runner OS is not Windows I could add

00:05:42,979 --> 00:05:46,699
another step here to do something

00:05:44,750 --> 00:05:48,949
similar for Windows but that's actually

00:05:46,699 --> 00:05:51,319
kind of clunky so you might have seen

00:05:48,949 --> 00:05:54,259
that below there's a snippet for

00:05:51,319 --> 00:05:57,940
multiple systems so let's grab that and

00:05:54,259 --> 00:05:57,940
stick that into our workflow

00:06:02,400 --> 00:06:10,030
all right so you can see what it's doing

00:06:05,680 --> 00:06:12,790
here it's actually setting the cache

00:06:10,030 --> 00:06:16,390
outputs directory and then using that in

00:06:12,790 --> 00:06:21,610
the next step for the path so let's

00:06:16,390 --> 00:06:30,160
actually go ahead and commit this we can

00:06:21,610 --> 00:06:35,440
create a new branch and then we will

00:06:30,160 --> 00:06:37,750
create a PR so you can see here in the

00:06:35,440 --> 00:06:40,480
bottom the jobs are popping in let me

00:06:37,750 --> 00:06:44,590
see all three OSS and then we can go to

00:06:40,480 --> 00:06:46,660
the checks tab and view the live logs so

00:06:44,590 --> 00:06:49,480
it sets up the job it pulls in the

00:06:46,660 --> 00:06:51,850
actions that it's going to use it checks

00:06:49,480 --> 00:06:55,390
out the repo sets up the version of node

00:06:51,850 --> 00:06:58,210
that we specified and then does the

00:06:55,390 --> 00:07:02,260
cache steps that we had and then finally

00:06:58,210 --> 00:07:07,720
it does the build and test so if we dig

00:07:02,260 --> 00:07:11,380
into these steps here we can see that it

00:07:07,720 --> 00:07:14,380
set the cache directory and then as

00:07:11,380 --> 00:07:16,030
expected in the cache step and there's

00:07:14,380 --> 00:07:17,740
actually a cache that it's not found

00:07:16,030 --> 00:07:19,870
this is the first time we ran it and

00:07:17,740 --> 00:07:24,910
then the end it actually saves the cache

00:07:19,870 --> 00:07:28,030
successfully for future runs so that's

00:07:24,910 --> 00:07:30,130
the first example pretty quick overview

00:07:28,030 --> 00:07:33,960
the next one I want to show is how you

00:07:30,130 --> 00:07:33,960
can integrate with github packages

00:07:33,980 --> 00:07:39,190
so again we have the basic calculator

00:07:36,260 --> 00:07:42,020
app we'll go to the actions tab again

00:07:39,190 --> 00:07:53,210
this time we will look for a docker

00:07:42,020 --> 00:07:56,200
template it's a scrolling down and

00:07:53,210 --> 00:07:58,760
there's the docker image on the right

00:07:56,200 --> 00:08:01,160
okay so this is actually a very basic

00:07:58,760 --> 00:08:04,490
workflow it's triggering on every push

00:08:01,160 --> 00:08:07,460
runs on Ubuntu latest checks out the

00:08:04,490 --> 00:08:11,000
repo and builds the docker image so

00:08:07,460 --> 00:08:15,710
let's actually update this to also

00:08:11,000 --> 00:08:21,410
publish to get home packages so let's

00:08:15,710 --> 00:08:28,430
update the name here and we will update

00:08:21,410 --> 00:08:31,280
the build step as well so we have the

00:08:28,430 --> 00:08:35,690
name of my package here my username the

00:08:31,280 --> 00:08:38,390
repo app and then to publish to github

00:08:35,690 --> 00:08:44,000
packages we'll need to log in so let's

00:08:38,390 --> 00:08:49,090
create a multi-line script here and we

00:08:44,000 --> 00:08:49,090
will log in so docker login

00:08:53,430 --> 00:09:00,790
and then provide my username and then

00:08:58,450 --> 00:09:03,160
for the password actually because we're

00:09:00,790 --> 00:09:06,010
using actions and packages together I

00:09:03,160 --> 00:09:12,670
can get the github token in the secrets

00:09:06,010 --> 00:09:17,440
context so it's super easy to integrate

00:09:12,670 --> 00:09:21,940
the two and lastly let's just push this

00:09:17,440 --> 00:09:30,070
so docker push add the image that we

00:09:21,940 --> 00:09:31,780
create in that first step there and then

00:09:30,070 --> 00:09:33,460
to make sure that those versions match

00:09:31,780 --> 00:09:51,310
we're actually going to create a version

00:09:33,460 --> 00:09:54,550
variable and we'll reuse that great so

00:09:51,310 --> 00:10:02,800
let's go ahead and commit that create

00:09:54,550 --> 00:10:07,930
another branch create the pull request

00:10:02,800 --> 00:10:10,480
and again we'll see the job pop in and

00:10:07,930 --> 00:10:14,820
like before we can go to the checks tab

00:10:10,480 --> 00:10:14,820
and view the live logs

00:10:18,380 --> 00:10:23,260
[Music]

00:10:20,760 --> 00:10:26,320
so it set up the job checked out the

00:10:23,260 --> 00:10:31,510
repo building the image publishing a

00:10:26,320 --> 00:10:33,640
ticket a packages so if we skip ahead we

00:10:31,510 --> 00:10:35,860
can actually go over to the packages for

00:10:33,640 --> 00:10:38,760
this repository and we can see that it

00:10:35,860 --> 00:10:40,839
was successfully packaged or published

00:10:38,760 --> 00:10:42,820
so now I'm gonna actually hand it off to

00:10:40,839 --> 00:10:51,220
Ed and he's gonna go into some more

00:10:42,820 --> 00:10:52,330
examples cool thanks Kayla thanks so

00:10:51,220 --> 00:10:55,180
much I'm really excited about the

00:10:52,330 --> 00:10:57,070
integration that github Actions has with

00:10:55,180 --> 00:11:00,220
other parts of the github ecosystem like

00:10:57,070 --> 00:11:01,510
github packages another part of the

00:11:00,220 --> 00:11:03,580
github ecosystem that I think is

00:11:01,510 --> 00:11:06,700
incredibly important as I think you saw

00:11:03,580 --> 00:11:10,660
on today's keynote is the security

00:11:06,700 --> 00:11:13,990
aspects of github I think that we have a

00:11:10,660 --> 00:11:16,690
real responsibility at github to make

00:11:13,990 --> 00:11:18,970
sure that your code stays secure and

00:11:16,690 --> 00:11:22,660
stays safe and so one of the ways that

00:11:18,970 --> 00:11:25,300
you can do that is by integrating github

00:11:22,660 --> 00:11:30,220
actions with the new automated security

00:11:25,300 --> 00:11:31,270
fixes that you saw earlier today so I'm

00:11:30,220 --> 00:11:33,490
actually gonna use the same repository

00:11:31,270 --> 00:11:37,600
that kayla was working on this sort of

00:11:33,490 --> 00:11:39,730
node J s calculator application and this

00:11:37,600 --> 00:11:41,860
is one that I've had for a little while

00:11:39,730 --> 00:11:46,089
I've been using this repo for a while

00:11:41,860 --> 00:11:47,650
and sort of organically I wish you know

00:11:46,089 --> 00:11:50,830
I had faked this but organically over

00:11:47,650 --> 00:11:53,410
time I've had security issues in this

00:11:50,830 --> 00:11:56,020
repository I've had vulnerabilities crop

00:11:53,410 --> 00:11:57,280
up in my dependencies so if we actually

00:11:56,020 --> 00:12:00,270
go up and take a look at my pull

00:11:57,280 --> 00:12:05,680
requests and go to the closed tab and

00:12:00,270 --> 00:12:08,170
then navigate to this one there we go so

00:12:05,680 --> 00:12:10,510
you can see that this is actually a a

00:12:08,170 --> 00:12:14,770
pull request that was opened by our

00:12:10,510 --> 00:12:17,860
automated security review process what

00:12:14,770 --> 00:12:21,220
we used to call dependable if we scroll

00:12:17,860 --> 00:12:23,170
down and open up this little commits we

00:12:21,220 --> 00:12:26,410
can actually see exactly all the things

00:12:23,170 --> 00:12:28,320
that it that it did it upgraded Milo -

00:12:26,410 --> 00:12:32,160
dependency actually several times

00:12:28,320 --> 00:12:34,380
conversion 4.17 not 11 to 4.17 not 15

00:12:32,160 --> 00:12:37,940
something a little safer something that

00:12:34,380 --> 00:12:41,250
didn't have all of the vulnerabilities

00:12:37,940 --> 00:12:42,750
right so this is actually emerged pull

00:12:41,250 --> 00:12:44,880
request what I want to do is go to a

00:12:42,750 --> 00:12:49,440
different repository one that hasn't had

00:12:44,880 --> 00:12:51,330
this merged yet and we can see what our

00:12:49,440 --> 00:12:53,670
security alerts actually look like you

00:12:51,330 --> 00:12:55,080
can see this this yellow bar in the

00:12:53,670 --> 00:12:56,730
middle of my repository now this is

00:12:55,080 --> 00:12:59,910
something only I can see as a repository

00:12:56,730 --> 00:13:02,430
owner it's not that anybody can navigate

00:12:59,910 --> 00:13:04,740
to my repository and see that there's a

00:13:02,430 --> 00:13:07,650
security vulnerability but it gives me a

00:13:04,740 --> 00:13:11,490
lot of visibility into the problem so I

00:13:07,650 --> 00:13:13,830
can go I can look at that and I can come

00:13:11,490 --> 00:13:18,570
over to the to the right hand side and

00:13:13,830 --> 00:13:20,190
click view Security Alert and that will

00:13:18,570 --> 00:13:23,910
actually show me the information I can

00:13:20,190 --> 00:13:26,880
drill down a little deeper and it will

00:13:23,910 --> 00:13:29,220
actually tell me exactly what's going on

00:13:26,880 --> 00:13:30,990
I can click one more time and actually

00:13:29,220 --> 00:13:32,820
get to the pull request so unlike my

00:13:30,990 --> 00:13:37,650
previous repository this pull request is

00:13:32,820 --> 00:13:39,330
still open and I have github actions set

00:13:37,650 --> 00:13:46,290
up to do continuous integration builds

00:13:39,330 --> 00:13:49,110
on this repository so we've detected

00:13:46,290 --> 00:13:50,630
this security vulnerability we've opened

00:13:49,110 --> 00:13:52,560
a pull request that fixes it

00:13:50,630 --> 00:13:55,680
automatically upgrading to the latest

00:13:52,560 --> 00:13:58,530
version of lodash and we've run all of

00:13:55,680 --> 00:14:00,630
these CI checks so we know that the that

00:13:58,530 --> 00:14:04,770
everything builds and that all my tests

00:14:00,630 --> 00:14:07,110
pass and now in a perfect world what I

00:14:04,770 --> 00:14:08,520
would do is is just click merge pull

00:14:07,110 --> 00:14:10,290
request and I have a high degree of

00:14:08,520 --> 00:14:12,600
confidence because I've got good test

00:14:10,290 --> 00:14:15,930
coverage to know that everything's safe

00:14:12,600 --> 00:14:18,570
but in a more perfect world what I might

00:14:15,930 --> 00:14:20,340
actually be able to get is github to do

00:14:18,570 --> 00:14:22,230
this for me it's gone so far as to

00:14:20,340 --> 00:14:23,760
create this pull request what if we

00:14:22,230 --> 00:14:26,460
could actually just merge it and in fact

00:14:23,760 --> 00:14:29,090
you can let's take a look at what that

00:14:26,460 --> 00:14:34,380
looks like so I've got yet another

00:14:29,090 --> 00:14:38,910
repository and at this point I don't

00:14:34,380 --> 00:14:39,930
have automated security setup I don't

00:14:38,910 --> 00:14:43,470
have to pend a bot set up in this

00:14:39,930 --> 00:14:52,470
repository what I do want to do though

00:14:43,470 --> 00:15:00,440
is sorry let me pop back to that there

00:14:52,470 --> 00:15:03,510
we go and now I want to navigate to my

00:15:00,440 --> 00:15:05,339
workflows there we go

00:15:03,510 --> 00:15:07,760
and open up my workflow and this is

00:15:05,339 --> 00:15:09,750
right now just the default nodejs

00:15:07,760 --> 00:15:11,640
workflow that you've seen now a couple

00:15:09,750 --> 00:15:15,030
of times you've seen it in several demos

00:15:11,640 --> 00:15:17,390
over the last two days but let's let's

00:15:15,030 --> 00:15:22,530
change this up a little bit

00:15:17,390 --> 00:15:27,810
so I can click Edit and what I want to

00:15:22,530 --> 00:15:35,790
do now is change the trigger from on

00:15:27,810 --> 00:15:39,110
push to be on pull request and I want to

00:15:35,790 --> 00:15:41,430
scope it just to a couple of branches

00:15:39,110 --> 00:15:43,770
we'll just select the master branch and

00:15:41,430 --> 00:15:45,270
you can see that that that very nice

00:15:43,770 --> 00:15:46,170
yeah no editing experience because I

00:15:45,270 --> 00:15:48,630
don't know about you

00:15:46,170 --> 00:15:51,210
yeah Mel's not my favorite thing to work

00:15:48,630 --> 00:15:56,880
on having this autocomplete this wizard

00:15:51,210 --> 00:15:57,510
is a big help ok let's scroll down a

00:15:56,880 --> 00:16:01,530
little bit

00:15:57,510 --> 00:16:03,270
and what we want to do is add a new job

00:16:01,530 --> 00:16:05,940
that will run after our build so we've

00:16:03,270 --> 00:16:09,360
got that build job but I can add a new

00:16:05,940 --> 00:16:14,910
one let's call it Auto merge we'll give

00:16:09,360 --> 00:16:16,650
it a name and now what we want to do is

00:16:14,910 --> 00:16:19,740
actually add some conditionals we don't

00:16:16,650 --> 00:16:21,300
want to always run this auto merge we

00:16:19,740 --> 00:16:24,560
want to be very careful we want to scope

00:16:21,300 --> 00:16:26,730
it just to things that were opened by

00:16:24,560 --> 00:16:28,310
dependable and we can actually do that

00:16:26,730 --> 00:16:31,230
really easily we can look at the github

00:16:28,310 --> 00:16:32,310
context this is information this is the

00:16:31,230 --> 00:16:35,130
same sort of thing that you would see in

00:16:32,310 --> 00:16:37,460
a web hook but we can see the github

00:16:35,130 --> 00:16:43,310
context in our actions workflow

00:16:37,460 --> 00:16:43,310
execution so I can select

00:16:44,010 --> 00:16:49,510
NEADS right here first we're gonna run

00:16:46,779 --> 00:16:51,610
after the build this is this will run us

00:16:49,510 --> 00:16:52,450
sequentially instead of in parallel we

00:16:51,610 --> 00:16:54,070
want to make sure that our build

00:16:52,450 --> 00:16:59,380
succeeds before we go ahead and do that

00:16:54,070 --> 00:17:00,910
that merge and then we can say if and we

00:16:59,380 --> 00:17:02,620
can see all the things that we can do we

00:17:00,910 --> 00:17:05,709
can do a little bit of advanced

00:17:02,620 --> 00:17:08,110
execution but what I want to do is look

00:17:05,709 --> 00:17:13,620
directly at the github context so I can

00:17:08,110 --> 00:17:15,819
say github dot is master so if it's a

00:17:13,620 --> 00:17:18,699
going into master and I can say if

00:17:15,819 --> 00:17:21,120
github not actor equals dependable

00:17:18,699 --> 00:17:25,240
that's the name of the dependable user

00:17:21,120 --> 00:17:29,320
so now this particular step will only

00:17:25,240 --> 00:17:36,179
run on dependable pull requests and then

00:17:29,320 --> 00:17:38,500
I can say steps will do the merge and

00:17:36,179 --> 00:17:42,210
there are several options here at this

00:17:38,500 --> 00:17:44,740
point we could use run and type some -

00:17:42,210 --> 00:17:47,350
but one of my colleagues Jake LEM came

00:17:44,740 --> 00:17:48,700
up with something incredibly clever that

00:17:47,350 --> 00:17:52,990
I'm really excited about it's called

00:17:48,700 --> 00:17:56,020
github script so we can say uses actions

00:17:52,990 --> 00:17:58,630
slash github script we'll give it a

00:17:56,020 --> 00:18:03,309
version and basically what this lets us

00:17:58,630 --> 00:18:05,500
do is it lets us run JavaScript with the

00:18:03,309 --> 00:18:09,070
octo kit context and with the github

00:18:05,500 --> 00:18:10,840
context so basically I'm ready to go in

00:18:09,070 --> 00:18:12,340
an environment where instead of

00:18:10,840 --> 00:18:14,470
scripting with bash i'm already

00:18:12,340 --> 00:18:17,380
authenticated i'm already set up and I

00:18:14,470 --> 00:18:23,550
can just write JavaScript so I can say

00:18:17,380 --> 00:18:29,950
with this script and I can say github

00:18:23,550 --> 00:18:32,350
dot dot merge this is basically octo kit

00:18:29,950 --> 00:18:34,120
for let's merge a pull request and I'll

00:18:32,350 --> 00:18:36,700
give us some more information and I can

00:18:34,120 --> 00:18:37,950
get this out of the github context so we

00:18:36,700 --> 00:18:44,010
need the owner

00:18:37,950 --> 00:18:44,010
we need the repo that we're in

00:18:47,760 --> 00:18:53,080
and finally we need the ID the pull

00:18:51,640 --> 00:18:54,490
request ID the number of the pull

00:18:53,080 --> 00:19:01,630
request we want to merge so that's the

00:18:54,490 --> 00:19:02,980
current one and again we get all this

00:19:01,630 --> 00:19:06,250
information we get the basically the

00:19:02,980 --> 00:19:08,350
payload of a web hook so we've got all

00:19:06,250 --> 00:19:11,140
sorts of information about the the

00:19:08,350 --> 00:19:14,020
action that happened finally I need to

00:19:11,140 --> 00:19:16,560
add a github token and that's in our

00:19:14,020 --> 00:19:16,560
secrets

00:19:19,080 --> 00:19:27,100
that's github.com and so Kayla used this

00:19:24,940 --> 00:19:30,100
earlier this is basically a very

00:19:27,100 --> 00:19:32,940
short-lived token that allows us to work

00:19:30,100 --> 00:19:35,530
on our repository it's repository scoped

00:19:32,940 --> 00:19:38,230
when you fork it it's read-only so it's

00:19:35,530 --> 00:19:40,050
it's very safe very limited amount of

00:19:38,230 --> 00:19:42,400
time and very limited amount of

00:19:40,050 --> 00:19:44,710
privileges that this token has but

00:19:42,400 --> 00:19:49,660
enough that we can in fact merge this

00:19:44,710 --> 00:19:53,470
pull request so we've got this red

00:19:49,660 --> 00:19:55,660
squiggle here where so this is another

00:19:53,470 --> 00:19:57,370
nice thing about our gamal editor it

00:19:55,660 --> 00:19:59,680
will actually do some linting until you

00:19:57,370 --> 00:20:03,250
when it's wrong I've missed a required

00:19:59,680 --> 00:20:05,530
key so let's add runs on here we're

00:20:03,250 --> 00:20:08,680
gonna run this on just a Linux image

00:20:05,530 --> 00:20:10,870
there we go and now we can check that in

00:20:08,680 --> 00:20:17,530
so we'll go ahead and check it right

00:20:10,870 --> 00:20:21,490
into the master branch there we go and

00:20:17,530 --> 00:20:24,660
if we go up to the actions tab oh sorry

00:20:21,490 --> 00:20:24,660
let's go to the security tab first

00:20:30,049 --> 00:20:37,759
and let's do that again there we go

00:20:35,999 --> 00:20:41,190
we'll turn on automated security updates

00:20:37,759 --> 00:20:45,509
this turns on depend amat so now when I

00:20:41,190 --> 00:20:47,099
do a push or when I actually just by

00:20:45,509 --> 00:20:50,669
turning that on that'll that'll start

00:20:47,099 --> 00:20:52,769
the security scan so there we go

00:20:50,669 --> 00:20:55,109
now I've got a security update I can

00:20:52,769 --> 00:20:59,849
click on that and what it's doing now is

00:20:55,109 --> 00:21:01,379
it's in the background doing a creating

00:20:59,849 --> 00:21:03,479
a pull request to do that fix so it's

00:21:01,379 --> 00:21:05,460
analyzing the problem it's gonna try

00:21:03,479 --> 00:21:08,369
applying the newest version of lodash

00:21:05,460 --> 00:21:09,899
then the next four newest version until

00:21:08,369 --> 00:21:11,219
we get to the absolute latest version

00:21:09,899 --> 00:21:13,559
trying to make sure that they all

00:21:11,219 --> 00:21:14,729
actually work with my project and then

00:21:13,559 --> 00:21:16,529
it'll open up the pull request and

00:21:14,729 --> 00:21:18,059
github actions will actually do the test

00:21:16,529 --> 00:21:20,669
to make sure that it works with my

00:21:18,059 --> 00:21:27,349
project so there we go and we can look

00:21:20,669 --> 00:21:30,779
at this pull request let's dig in here

00:21:27,349 --> 00:21:31,979
and if we here's our pull request so if

00:21:30,779 --> 00:21:35,700
we scroll down we can look into the

00:21:31,979 --> 00:21:38,789
checks area and we can see that our CI

00:21:35,700 --> 00:21:40,679
is running actually our CI finished so

00:21:38,789 --> 00:21:45,299
let's go look at show all checks over

00:21:40,679 --> 00:21:46,440
here and oh oh oh it happened really

00:21:45,299 --> 00:21:49,019
quickly our pull request actually

00:21:46,440 --> 00:21:50,489
already got merged which is actually

00:21:49,019 --> 00:21:53,609
exactly what we wanted to happen we

00:21:50,489 --> 00:21:56,339
wanted our CI to run our tests to pass

00:21:53,609 --> 00:21:58,499
and then github actions to merge the

00:21:56,339 --> 00:21:59,729
pull request for us let's take a look at

00:21:58,499 --> 00:22:03,330
what actually happened let's look at our

00:21:59,729 --> 00:22:06,450
actions run its just finishing up its

00:22:03,330 --> 00:22:11,789
that top one right there let's click

00:22:06,450 --> 00:22:14,369
into that and so yeah so we had a matrix

00:22:11,789 --> 00:22:16,649
build on NPM eight ten and twelve on no

00:22:14,369 --> 00:22:18,899
date ten and twelve and then we did this

00:22:16,649 --> 00:22:24,440
last up the merge pull request step

00:22:18,899 --> 00:22:27,269
let's dig into that and open up the

00:22:24,440 --> 00:22:29,549
merge job there we go and that's just

00:22:27,269 --> 00:22:32,900
going to show us this github action

00:22:29,549 --> 00:22:35,870
script that we ran so

00:22:32,900 --> 00:22:37,610
very straightforward only a couple lines

00:22:35,870 --> 00:22:39,050
of code to get us from the point at

00:22:37,610 --> 00:22:41,690
which depend upon is opening pull

00:22:39,050 --> 00:22:45,110
requests for us to us validating those

00:22:41,690 --> 00:22:47,000
pull requests by running CI tests to

00:22:45,110 --> 00:22:49,670
finally just saying well if we have good

00:22:47,000 --> 00:22:51,440
test coverage we can trust dependable to

00:22:49,670 --> 00:22:53,900
do a good job and merge those pull

00:22:51,440 --> 00:22:55,100
requests so not something you want to do

00:22:53,900 --> 00:22:56,510
until you do have that good test

00:22:55,100 --> 00:22:58,040
coverage but once you're there I think

00:22:56,510 --> 00:23:01,450
that this is a great way to just

00:22:58,040 --> 00:23:14,420
automate security from end to end

00:23:01,450 --> 00:23:16,400
ok one of the other things that I'm

00:23:14,420 --> 00:23:19,880
really excited about in in github

00:23:16,400 --> 00:23:23,320
actions is the ability to use containers

00:23:19,880 --> 00:23:26,260
as part of the build

00:23:23,320 --> 00:23:28,160
so with github actions we give you

00:23:26,260 --> 00:23:30,980
virtual machines that you can take

00:23:28,160 --> 00:23:35,929
advantage of we give you Windows Linux

00:23:30,980 --> 00:23:37,390
and Mac OS VMs and we and we've got a

00:23:35,929 --> 00:23:41,600
ton of software installed on them but

00:23:37,390 --> 00:23:44,120
it's honestly not always enough you

00:23:41,600 --> 00:23:46,429
might need some very bespoke sort of

00:23:44,120 --> 00:23:50,059
tool as part of your build you may have

00:23:46,429 --> 00:23:51,920
some dependency that has a very special

00:23:50,059 --> 00:23:53,960
installation requirement or it's very

00:23:51,920 --> 00:23:56,410
large that you don't you know want to

00:23:53,960 --> 00:24:01,480
download and unpacked every single time

00:23:56,410 --> 00:24:05,660
so by using containers you can scope

00:24:01,480 --> 00:24:07,100
exactly what you want to your CI system

00:24:05,660 --> 00:24:13,190
you don't have to rely on the things

00:24:07,100 --> 00:24:15,559
that we give you so instead of my node

00:24:13,190 --> 00:24:17,600
app that is a very simple calculator

00:24:15,559 --> 00:24:21,320
I've got an even more simple node AB

00:24:17,600 --> 00:24:25,429
here this is this is something that

00:24:21,320 --> 00:24:27,140
we'll talk to a Postgres database it

00:24:25,429 --> 00:24:29,270
doesn't do anything really advanced I'm

00:24:27,140 --> 00:24:31,190
a I'm a product manager not an engineer

00:24:29,270 --> 00:24:34,760
so let's take a look at what it does do

00:24:31,190 --> 00:24:35,900
though I'm gonna open that up and you

00:24:34,760 --> 00:24:39,950
can see here up top we're gonna

00:24:35,900 --> 00:24:42,110
basically just connect to a Postgres

00:24:39,950 --> 00:24:44,210
database we're going to read out of the

00:24:42,110 --> 00:24:45,910
environment the database to connect to

00:24:44,210 --> 00:24:47,530
the host and the port and then

00:24:45,910 --> 00:24:49,870
just gonna connect and once we're

00:24:47,530 --> 00:24:54,850
connected we're gonna do a really

00:24:49,870 --> 00:24:56,800
awesome query we're going to select the

00:24:54,850 --> 00:24:58,750
now function yeah

00:24:56,800 --> 00:25:02,590
it'll give us the current time like I

00:24:58,750 --> 00:25:04,480
said I'm not an engineer here's the

00:25:02,590 --> 00:25:08,820
problem with this though we don't

00:25:04,480 --> 00:25:12,070
actually have Postgres installed on our

00:25:08,820 --> 00:25:14,230
runners that we give you so we've got

00:25:12,070 --> 00:25:17,590
all these these virtual machines but not

00:25:14,230 --> 00:25:18,880
a one of them has Postgres on it the

00:25:17,590 --> 00:25:23,190
nice thing though is that we can solve

00:25:18,880 --> 00:25:25,300
that by actually just using containers

00:25:23,190 --> 00:25:29,410
so one of the things that we can do is

00:25:25,300 --> 00:25:31,150
we can either allow github actions to

00:25:29,410 --> 00:25:33,670
run a container by specifying that in

00:25:31,150 --> 00:25:35,830
the build steps and so when you say run

00:25:33,670 --> 00:25:39,160
that run context will actually be

00:25:35,830 --> 00:25:40,810
executed inside a container or we can

00:25:39,160 --> 00:25:42,820
bring what we call service containers to

00:25:40,810 --> 00:25:45,760
the party and that's a this is a great

00:25:42,820 --> 00:25:50,320
use of that what I want to do is use a

00:25:45,760 --> 00:25:53,260
Postgres database as part of my test but

00:25:50,320 --> 00:25:55,120
I don't really need it for anything else

00:25:53,260 --> 00:25:57,610
so I can just actually spin up a a

00:25:55,120 --> 00:26:01,030
Postgres container just exactly the ones

00:25:57,610 --> 00:26:05,890
that I'd get off docker hub and use it

00:26:01,030 --> 00:26:07,660
for my tests so let's take a look so

00:26:05,890 --> 00:26:09,640
like I said here's the list of software

00:26:07,660 --> 00:26:11,550
that's installed on the github hosted

00:26:09,640 --> 00:26:14,170
runners I can scroll through here and

00:26:11,550 --> 00:26:16,530
scroll and scratch there's a lot of

00:26:14,170 --> 00:26:23,250
stuff look at all those haskell versions

00:26:16,530 --> 00:26:26,410
but if i if i search what I don't see is

00:26:23,250 --> 00:26:29,200
Postgres right so I've got all this

00:26:26,410 --> 00:26:30,940
stuff i've got dotnet core SDKs i've got

00:26:29,200 --> 00:26:34,150
several different versions of just 2.2

00:26:30,940 --> 00:26:39,730
but yeah not a single instance of

00:26:34,150 --> 00:26:43,360
Postgres so let's fix that so here's

00:26:39,730 --> 00:26:46,930
what I want to do I want to go to my

00:26:43,360 --> 00:26:49,170
actions tab and I want to set up a new

00:26:46,930 --> 00:26:49,170
workflow

00:26:50,989 --> 00:26:55,769
and I'm not gonna take one of these

00:26:54,090 --> 00:26:57,929
out-of-the-box ones I'm going to set up

00:26:55,769 --> 00:27:03,139
a blank workflow I'm gonna check the set

00:26:57,929 --> 00:27:08,059
up a workflow yourself there we go and

00:27:03,139 --> 00:27:11,309
we can set up Postgres as a service so

00:27:08,059 --> 00:27:16,590
I'm gonna navigate here above our steps

00:27:11,309 --> 00:27:19,739
and I'm going to add services I'm gonna

00:27:16,590 --> 00:27:22,979
give it the name Postgres and this is

00:27:19,739 --> 00:27:26,159
arbitrary this is this is just a key so

00:27:22,979 --> 00:27:27,809
I I'm able to use this to refer to it

00:27:26,159 --> 00:27:28,859
later it's just the name doesn't have to

00:27:27,809 --> 00:27:31,619
be anything special I could have called

00:27:28,859 --> 00:27:33,269
it foo but what is special then is the

00:27:31,619 --> 00:27:38,129
image so I'm gonna specify

00:27:33,269 --> 00:27:40,470
image Postgres 10.8 and what's gonna

00:27:38,129 --> 00:27:44,279
happen when i specify this is that it's

00:27:40,470 --> 00:27:46,499
going to download this container image

00:27:44,279 --> 00:27:51,570
and it's going to start it inside my

00:27:46,499 --> 00:27:53,849
execution vm so like I said by default

00:27:51,570 --> 00:27:56,369
I'm running on a VM I'll have this

00:27:53,849 --> 00:27:58,799
container there running side by side

00:27:56,369 --> 00:28:01,409
inside my VM so I can I can take

00:27:58,799 --> 00:28:04,859
advantage of it if I were if I specified

00:28:01,409 --> 00:28:06,539
other services they would also be spun

00:28:04,859 --> 00:28:09,599
up on the VM and they'd be all networked

00:28:06,539 --> 00:28:12,119
together and finally I could even again

00:28:09,599 --> 00:28:15,269
use a container to actually do my run

00:28:12,119 --> 00:28:17,249
steps to run my actions workflows and

00:28:15,269 --> 00:28:18,869
then that would bring yet another

00:28:17,249 --> 00:28:20,639
container to the party all networks

00:28:18,869 --> 00:28:24,149
together so it's very straightforward to

00:28:20,639 --> 00:28:26,460
to set up actually complex build and

00:28:24,149 --> 00:28:33,690
test environment that I can that I can

00:28:26,460 --> 00:28:35,489
use so after that I want to provide some

00:28:33,690 --> 00:28:42,090
environment variables again we need

00:28:35,489 --> 00:28:46,229
Postgres Postgres user and we'll set

00:28:42,090 --> 00:28:48,899
that to Postgres Postgres password we'll

00:28:46,229 --> 00:28:50,999
also set that to Postgres because again

00:28:48,899 --> 00:28:55,349
I'm a product manager not a security guy

00:28:50,999 --> 00:28:58,749
and finally Postgres DB and we'll call

00:28:55,349 --> 00:29:00,559
that Postgres as well

00:28:58,749 --> 00:29:02,389
once that's there we're gonna add some

00:29:00,559 --> 00:29:04,730
options to the container I'm gonna paste

00:29:02,389 --> 00:29:07,039
this in what this does is it just

00:29:04,730 --> 00:29:09,379
ensures that the Postgres database

00:29:07,039 --> 00:29:12,710
becomes healthy before we actually start

00:29:09,379 --> 00:29:15,590
testing against it and finally we're

00:29:12,710 --> 00:29:20,480
gonna expose a port will expose port 5 4

00:29:15,590 --> 00:29:23,960
3 2 on the container there we go and

00:29:20,480 --> 00:29:26,119
what that does is it Maps basically a

00:29:23,960 --> 00:29:29,299
port on the VM you know if you're

00:29:26,119 --> 00:29:30,320
familiar with docker I this is probably

00:29:29,299 --> 00:29:32,749
something that you're used to doing

00:29:30,320 --> 00:29:35,869
we're mapping a port inside the

00:29:32,749 --> 00:29:38,450
container to the VM we don't actually

00:29:35,869 --> 00:29:42,049
know what port though this particular

00:29:38,450 --> 00:29:44,090
syntax lets us we'll just pick an

00:29:42,049 --> 00:29:45,739
arbitrary unused port on the virtual

00:29:44,090 --> 00:29:48,259
machine and you might think that that's

00:29:45,739 --> 00:29:50,419
kind of weird and I concede that it kind

00:29:48,259 --> 00:29:56,239
of is but we'll take a look at what that

00:29:50,419 --> 00:30:01,669
how that works in just a second so once

00:29:56,239 --> 00:30:03,440
that's done let's come down here let's

00:30:01,669 --> 00:30:07,009
get rid of these dummy steps and

00:30:03,440 --> 00:30:09,950
actually do some work so what we want to

00:30:07,009 --> 00:30:16,039
do is run npm CI and then we want to run

00:30:09,950 --> 00:30:18,049
our little application client j s and we

00:30:16,039 --> 00:30:22,720
will set up some environment variables

00:30:18,049 --> 00:30:26,119
again we'll set up Postgres host and

00:30:22,720 --> 00:30:31,100
Postgres port and these are actually

00:30:26,119 --> 00:30:32,539
used by our application to to connect to

00:30:31,100 --> 00:30:34,850
Postgres that's that's actually in the

00:30:32,539 --> 00:30:37,279
java script that you saw now what port

00:30:34,850 --> 00:30:41,509
number do we use well what we can

00:30:37,279 --> 00:30:43,609
actually do is query the the data that

00:30:41,509 --> 00:30:45,830
we that that github actions has created

00:30:43,609 --> 00:30:47,869
as part of this workflow so when we set

00:30:45,830 --> 00:30:50,779
up that port we can actually interrogate

00:30:47,869 --> 00:30:52,549
it later using that kind of dollar curly

00:30:50,779 --> 00:30:55,669
curly syntax that you've probably seen

00:30:52,549 --> 00:30:57,529
it's not just for for the secrets

00:30:55,669 --> 00:31:01,100
variables or for environment variables

00:30:57,529 --> 00:31:03,320
it's also for variables that github

00:31:01,100 --> 00:31:05,509
actions will set that you can take

00:31:03,320 --> 00:31:12,260
advantage of so in this case I want to

00:31:05,509 --> 00:31:15,740
say job dot services dot

00:31:12,260 --> 00:31:19,360
Postgres dot ports five four three two

00:31:15,740 --> 00:31:22,460
and that's i concede a little bit

00:31:19,360 --> 00:31:25,130
verbose but what does it actually mean

00:31:22,460 --> 00:31:27,830
well it's it's hierarchical so it's

00:31:25,130 --> 00:31:30,950
actually pointing up to our jobs up top

00:31:27,830 --> 00:31:34,070
so up it will actually map eventually to

00:31:30,950 --> 00:31:37,550
this ports key right here services

00:31:34,070 --> 00:31:42,200
Postgres ports and then it'll actually

00:31:37,550 --> 00:31:46,250
expand out to five four three two so or

00:31:42,200 --> 00:31:48,110
I'm sorry it'll map to the what port

00:31:46,250 --> 00:31:50,570
five four three two on the container is

00:31:48,110 --> 00:31:53,270
mapped to in the VM so it'll actually be

00:31:50,570 --> 00:31:54,790
something random like 32 five 64 or

00:31:53,270 --> 00:32:05,680
something

00:31:54,790 --> 00:32:12,280
okay so let's commit this there we go

00:32:05,680 --> 00:32:12,280
and let's take a look at our actions run

00:32:12,970 --> 00:32:24,470
okay and then come down and look at this

00:32:16,460 --> 00:32:26,540
workflow execution cool so right now

00:32:24,470 --> 00:32:28,610
what we're doing is the first thing we

00:32:26,540 --> 00:32:30,640
do is initialize the containers so we're

00:32:28,610 --> 00:32:33,470
basically downloading that Postgres

00:32:30,640 --> 00:32:38,300
container image and then we'll start it

00:32:33,470 --> 00:32:40,220
up we'll map the ports so that we can

00:32:38,300 --> 00:32:47,150
actually get to port five four three two

00:32:40,220 --> 00:32:48,380
on the container once the container is

00:32:47,150 --> 00:32:51,200
actually started again we want to make

00:32:48,380 --> 00:32:55,910
sure that Postgres starts healthy will

00:32:51,200 --> 00:32:58,280
run npm CI and then we will run our our

00:32:55,910 --> 00:33:00,130
client our javascript and that will

00:32:58,280 --> 00:33:02,090
actually do the connection to Postgres

00:33:00,130 --> 00:33:03,710
as our tests

00:33:02,090 --> 00:33:07,850
so let's actually expand that out and

00:33:03,710 --> 00:33:11,330
see what happens well yep indeed if i

00:33:07,850 --> 00:33:15,410
look there and at my results i did

00:33:11,330 --> 00:33:19,090
select now and i got my query back and

00:33:15,410 --> 00:33:21,200
so that's the the current time so i

00:33:19,090 --> 00:33:24,350
think this is really great it's super

00:33:21,200 --> 00:33:25,970
straightforward to set something up that

00:33:24,350 --> 00:33:29,060
allows us

00:33:25,970 --> 00:33:33,110
to use dependencies that we don't

00:33:29,060 --> 00:33:37,130
actually have on our runners but that we

00:33:33,110 --> 00:33:39,130
might need for our our CI build so we do

00:33:37,130 --> 00:33:41,570
offer self hosted runners in case you

00:33:39,130 --> 00:33:44,630
need even more of a spoke things you

00:33:41,570 --> 00:33:46,250
know I know people who work in very or

00:33:44,630 --> 00:33:47,840
who work with software that has very

00:33:46,250 --> 00:33:49,850
strict licensing requirements and

00:33:47,840 --> 00:33:53,780
actually needs a dongle like plugged

00:33:49,850 --> 00:33:55,190
into a computer in the year 2019 and if

00:33:53,780 --> 00:33:59,420
that's true you can use a self hosted

00:33:55,190 --> 00:34:02,150
runner but if you have less complicated

00:33:59,420 --> 00:34:03,620
if you will licensing requirements then

00:34:02,150 --> 00:34:06,950
you can take advantage of docker

00:34:03,620 --> 00:34:11,840
containers and still run them in our in

00:34:06,950 --> 00:34:14,960
our runners finally I want to take just

00:34:11,840 --> 00:34:17,120
one minute to talk about creating your

00:34:14,960 --> 00:34:18,740
own action we've we've talked a lot over

00:34:17,120 --> 00:34:20,090
the last two days about creating

00:34:18,740 --> 00:34:22,370
workflows and running workflow

00:34:20,090 --> 00:34:25,100
executions but what we haven't talked

00:34:22,370 --> 00:34:26,240
about is actions and I think that's

00:34:25,100 --> 00:34:29,149
really important because that's where

00:34:26,240 --> 00:34:32,629
github actions got its name from actions

00:34:29,149 --> 00:34:34,669
are small reusable components that you

00:34:32,629 --> 00:34:36,500
can use within your workflow that you

00:34:34,669 --> 00:34:37,940
can share within your organization or

00:34:36,500 --> 00:34:48,250
that you can upload on to the github

00:34:37,940 --> 00:34:51,169
marketplace and share with others so so

00:34:48,250 --> 00:34:55,610
there we go so how many people have

00:34:51,169 --> 00:34:57,770
played untitled goo scam yes it's my

00:34:55,610 --> 00:35:00,770
favorite new game if you haven't played

00:34:57,770 --> 00:35:02,480
it yet the the conceit is that there is

00:35:00,770 --> 00:35:03,890
a lovely village full of lovely people

00:35:02,480 --> 00:35:07,460
just trying to go about their daily

00:35:03,890 --> 00:35:10,970
basis and you were a goose you are an

00:35:07,460 --> 00:35:15,410
angry goose and you sneak up on them and

00:35:10,970 --> 00:35:16,820
try to be difficult so my one of my

00:35:15,410 --> 00:35:20,590
friends one of my colleagues here at

00:35:16,820 --> 00:35:23,810
github has created an action that can

00:35:20,590 --> 00:35:27,230
that can help with this and so if I come

00:35:23,810 --> 00:35:28,940
to into an issue and it's a lovely issue

00:35:27,230 --> 00:35:34,010
and I come in and I want to add a

00:35:28,940 --> 00:35:37,740
comments and I do that he's created an

00:35:34,010 --> 00:35:41,609
action that will run on issue comments

00:35:37,740 --> 00:35:44,130
if we look at the camel we've got a

00:35:41,609 --> 00:35:46,980
trigger that will run on issues created

00:35:44,130 --> 00:35:49,260
and when that happens it will run his

00:35:46,980 --> 00:35:52,290
action it's called Jeff after Punk

00:35:49,260 --> 00:35:54,270
action if we go into his repository we

00:35:52,290 --> 00:35:56,940
can look at what makes up a github

00:35:54,270 --> 00:35:59,820
action it could be one of two things it

00:35:56,940 --> 00:36:02,790
could be a docker container or it could

00:35:59,820 --> 00:36:04,170
be a JavaScript application the nice

00:36:02,790 --> 00:36:07,080
thing about using a JavaScript

00:36:04,170 --> 00:36:09,180
application is that it's cross-platform

00:36:07,080 --> 00:36:11,339
docker containers are only gonna run on

00:36:09,180 --> 00:36:13,589
Linux if you build an action using

00:36:11,339 --> 00:36:16,260
JavaScript it can run on Windows it can

00:36:13,589 --> 00:36:17,369
run on Mac OS and it can run on Linux so

00:36:16,260 --> 00:36:19,710
in this case he's actually written

00:36:17,369 --> 00:36:23,609
typescript and let's take a look at what

00:36:19,710 --> 00:36:27,680
it does so we've got some imports this

00:36:23,609 --> 00:36:31,650
brings in the github actions toolkit

00:36:27,680 --> 00:36:35,490
this basically allows us to use octo kit

00:36:31,650 --> 00:36:36,780
and a number of other you know pieces of

00:36:35,490 --> 00:36:40,589
functionality that allow you to write

00:36:36,780 --> 00:36:42,480
cross-platform actions very easily the

00:36:40,589 --> 00:36:48,240
next thing we're going to do is actually

00:36:42,480 --> 00:36:49,890
inspect that github issue payload and so

00:36:48,240 --> 00:36:51,150
we'll see what happens basically again

00:36:49,890 --> 00:36:56,130
this is just like what you would see

00:36:51,150 --> 00:36:58,200
when you have a web hook execution we

00:36:56,130 --> 00:36:59,910
can get the issue information then we

00:36:58,200 --> 00:37:02,430
can get the comment what was actually

00:36:59,910 --> 00:37:04,410
posted the issue comment that was

00:37:02,430 --> 00:37:07,770
written that's comment body right here

00:37:04,410 --> 00:37:10,770
and what we're gonna do is see if the

00:37:07,770 --> 00:37:12,630
comment body matches honk the word honk

00:37:10,770 --> 00:37:15,119
is in the comment body if you are in

00:37:12,630 --> 00:37:18,150
fact an angry goose then we'll return

00:37:15,119 --> 00:37:21,690
we'll just stop doing anything at all if

00:37:18,150 --> 00:37:25,859
you didn't say honk in the issue we're

00:37:21,690 --> 00:37:30,030
going to delete your comment so this is

00:37:25,859 --> 00:37:33,540
this is an angry unfriendly action right

00:37:30,030 --> 00:37:37,980
here so again if we go back to our

00:37:33,540 --> 00:37:40,470
actual oh yes our our comment was

00:37:37,980 --> 00:37:42,420
deleted two minutes ago by github

00:37:40,470 --> 00:37:45,510
actions and it has replaced it with a

00:37:42,420 --> 00:37:48,359
honking goose well that is very

00:37:45,510 --> 00:37:51,060
unfriendly this obviously is in a very

00:37:48,359 --> 00:37:51,480
useful action unless you really hate

00:37:51,060 --> 00:37:56,220
your

00:37:51,480 --> 00:37:58,440
workers but it's just an example of some

00:37:56,220 --> 00:38:00,930
of the things that you can do with

00:37:58,440 --> 00:38:04,470
github actions you can trigger on any

00:38:00,930 --> 00:38:07,800
github event it's not just about CI CD

00:38:04,470 --> 00:38:11,630
you can look at issue comments you can

00:38:07,800 --> 00:38:13,950
look at when releases were created and

00:38:11,630 --> 00:38:18,480
ultimately you can use this github

00:38:13,950 --> 00:38:21,540
actions toolkit as a way to to take

00:38:18,480 --> 00:38:24,030
advantage of that so if you are

00:38:21,540 --> 00:38:26,130
interested in using pieces of reusable

00:38:24,030 --> 00:38:28,740
components within your workflows sharing

00:38:26,130 --> 00:38:32,220
it within your organization or sharing

00:38:28,740 --> 00:38:35,040
it with the rest of github and you can

00:38:32,220 --> 00:38:37,530
go to github marketplace to look at all

00:38:35,040 --> 00:38:40,380
of the actions that are there that

00:38:37,530 --> 00:38:43,140
people have contributed I think that

00:38:40,380 --> 00:38:45,690
that's a a great piece of technology to

00:38:43,140 --> 00:38:48,740
build it allows us to really work

00:38:45,690 --> 00:38:51,920
together to enable community powered

00:38:48,740 --> 00:39:06,480
continuous integration and repository

00:38:51,920 --> 00:39:09,359
functionality great so with that I'm

00:39:06,480 --> 00:39:15,119
afraid that we are just out of time for

00:39:09,359 --> 00:39:17,369
questions but we will be in the connect

00:39:15,119 --> 00:39:18,810
space Kayla and I will be there as well

00:39:17,369 --> 00:39:21,210
as some other members of the github

00:39:18,810 --> 00:39:22,530
actions team we'd be happy to answer any

00:39:21,210 --> 00:39:25,580
questions that you have if you want to

00:39:22,530 --> 00:39:28,050
come to us with your workflow problems

00:39:25,580 --> 00:39:30,869
we'd be happy to see if we can solve

00:39:28,050 --> 00:39:32,280
them and again if you if you have other

00:39:30,869 --> 00:39:34,619
stuff going on this afternoon that's

00:39:32,280 --> 00:39:37,980
totally fine feel free to reach out on a

00:39:34,619 --> 00:39:39,840
Thompson on Twitter and if you see Kayla

00:39:37,980 --> 00:39:42,340
or I around the event feel free to ask

00:39:39,840 --> 00:40:05,290
us so thanks so much

00:39:42,340 --> 00:40:07,350
[Music]

00:40:05,290 --> 00:40:07,350
you

00:40:09,320 --> 00:40:13,599

YouTube URL: https://www.youtube.com/watch?v=0ahRkhrOePo


