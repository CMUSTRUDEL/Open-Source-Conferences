Title: Keynote: Securing Open Source - David A. Wheeler, Director, Open Source Supply Chain Security
Publication date: 2021-05-04
Playlist: Cloud Native Security Day EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Keynote: Securing Open Source - David A. Wheeler, Director, Open Source Supply Chain Security, The Linux Foundation

The subversion of SolarWinds’ Orion build system, dependency confusion attacks, and event-stream's subversion make it clear that attackers can successfully attack systems by attacking their supply chains, and attackers have not stopped attacking vulnerabilities in software developed & deployed. This talk will briefly discuss the software supply chain environment, some countermeasures, and some ongoing activities to reduce risks from software vulnerabilities and the software supply chain. The good news is that there are ways to counter such attacks, but they will require changes in how we do software development, selection, and deployment.
Captions: 
	00:00:01,040 --> 00:00:06,160
hello my name is david a wheeler

00:00:03,600 --> 00:00:08,560
and i'm here to talk about securing open

00:00:06,160 --> 00:00:08,560
source

00:00:09,679 --> 00:00:12,960
i hope to convince you about four key

00:00:11,920 --> 00:00:16,640
points

00:00:12,960 --> 00:00:19,680
attacks weakness hope change

00:00:16,640 --> 00:00:22,240
attacks hope weakness hope

00:00:19,680 --> 00:00:23,279
change what do i mean by that well the

00:00:22,240 --> 00:00:25,760
first part

00:00:23,279 --> 00:00:26,560
part i hope you already are convinced of

00:00:25,760 --> 00:00:29,519
attackers

00:00:26,560 --> 00:00:31,599
are attacking systems they're attacking

00:00:29,519 --> 00:00:32,800
those systems via the vulnerabilities

00:00:31,599 --> 00:00:34,880
that they have

00:00:32,800 --> 00:00:36,239
when they are deployed and also through

00:00:34,880 --> 00:00:39,440
their supply chains

00:00:36,239 --> 00:00:40,719
weakness sadly those attackers are often

00:00:39,440 --> 00:00:43,520
succeeding

00:00:40,719 --> 00:00:44,079
um and this is primarily because current

00:00:43,520 --> 00:00:46,559
development

00:00:44,079 --> 00:00:48,640
and supply chain processes really often

00:00:46,559 --> 00:00:50,640
don't adequately counter attacks

00:00:48,640 --> 00:00:53,360
and even when they're fixed they often

00:00:50,640 --> 00:00:55,600
don't get deployed in a timely way

00:00:53,360 --> 00:00:57,280
but i don't want you to leave without

00:00:55,600 --> 00:00:59,520
hope there is hope

00:00:57,280 --> 00:01:02,000
there are counter measures to attacks

00:00:59,520 --> 00:01:04,320
and there's ongoing work to ease their

00:01:02,000 --> 00:01:07,040
deployment

00:01:04,320 --> 00:01:09,040
for change we need to change how we

00:01:07,040 --> 00:01:10,000
develop software how we select it how we

00:01:09,040 --> 00:01:12,000
deploy it

00:01:10,000 --> 00:01:13,600
uh things like making sure that things

00:01:12,000 --> 00:01:15,920
are secure by default

00:01:13,600 --> 00:01:17,439
and we're going to need to continuously

00:01:15,920 --> 00:01:21,439
learn from adversaries

00:01:17,439 --> 00:01:21,439
and anticipate adversaries

00:01:23,520 --> 00:01:26,640
i think that first point about

00:01:24,960 --> 00:01:27,360
software's under attack is pretty

00:01:26,640 --> 00:01:30,159
obvious

00:01:27,360 --> 00:01:30,720
um i mean these are just some logos and

00:01:30,159 --> 00:01:33,520
and some

00:01:30,720 --> 00:01:34,400
indications of examples of software

00:01:33,520 --> 00:01:36,400
under attack

00:01:34,400 --> 00:01:38,159
uh the top left symbol there is heart

00:01:36,400 --> 00:01:40,079
bleed um

00:01:38,159 --> 00:01:42,640
but in fact there's a whole bunch of

00:01:40,079 --> 00:01:45,280
different attacks and vulnerabilities

00:01:42,640 --> 00:01:46,560
um but of course repositories have been

00:01:45,280 --> 00:01:49,520
under attack

00:01:46,560 --> 00:01:50,479
um the more recent solarwinds orion

00:01:49,520 --> 00:01:52,399
subversion

00:01:50,479 --> 00:01:54,079
was caused through a subverted build

00:01:52,399 --> 00:01:55,920
environment it didn't matter what the

00:01:54,079 --> 00:01:57,759
software developers wrote because the

00:01:55,920 --> 00:01:59,920
code they wrote wasn't what was going to

00:01:57,759 --> 00:02:02,320
be used for shipping

00:01:59,920 --> 00:02:03,840
um there's a an interesting paper called

00:02:02,320 --> 00:02:07,680
the backstabbers knife collection that

00:02:03,840 --> 00:02:09,759
reviewed over 174 supply chain attacks

00:02:07,680 --> 00:02:12,640
found a dominance of type of squatting

00:02:09,759 --> 00:02:12,640
attacks for example

00:02:14,000 --> 00:02:18,640
a good part of this problem is that most

00:02:16,879 --> 00:02:22,319
projects and organizations

00:02:18,640 --> 00:02:26,640
simply cannot accurately summarize

00:02:22,319 --> 00:02:26,640
what software is within their system

00:02:29,760 --> 00:02:33,200
and some of you may say oh hey we use

00:02:32,080 --> 00:02:34,959
cloud therefore

00:02:33,200 --> 00:02:36,879
somehow we're immune to all this so of

00:02:34,959 --> 00:02:39,920
course that's ridiculous

00:02:36,879 --> 00:02:42,800
um dan lawrence has this interesting um

00:02:39,920 --> 00:02:43,680
article where uh he notes that today's

00:02:42,800 --> 00:02:45,519
cloud

00:02:43,680 --> 00:02:48,000
infrastructure is still being built out

00:02:45,519 --> 00:02:51,519
of duct tape and kite strings

00:02:48,000 --> 00:02:53,040
um so he played around with um uh helm3

00:02:51,519 --> 00:02:55,200
he looked at a particular helm

00:02:53,040 --> 00:02:56,720
chart and tried to answer what you would

00:02:55,200 --> 00:02:58,560
think would be simple questions

00:02:56,720 --> 00:03:00,400
you know exactly what software was

00:02:58,560 --> 00:03:03,200
installed where did it come from

00:03:00,400 --> 00:03:04,959
how was it built and he could not answer

00:03:03,200 --> 00:03:08,239
those questions

00:03:04,959 --> 00:03:09,920
and as a result you know he he made some

00:03:08,239 --> 00:03:11,599
interesting observations one of course

00:03:09,920 --> 00:03:13,440
is if you think your container scanning

00:03:11,599 --> 00:03:15,760
setup is catching everything

00:03:13,440 --> 00:03:17,040
think again he found 25 vulnerabilities

00:03:15,760 --> 00:03:20,080
in just that one

00:03:17,040 --> 00:03:21,920
package um and he noted that hey package

00:03:20,080 --> 00:03:25,040
managers add convenience but

00:03:21,920 --> 00:03:26,480
every layer adds trust and i would also

00:03:25,040 --> 00:03:29,599
add adds time

00:03:26,480 --> 00:03:31,599
it can take a long time for a

00:03:29,599 --> 00:03:35,360
vulnerability that's been fixed to get

00:03:31,599 --> 00:03:35,360
through all those layers

00:03:38,319 --> 00:03:42,640
so it's i think it's helpful to think

00:03:39,920 --> 00:03:44,720
about how is software developed

00:03:42,640 --> 00:03:46,879
um you know and so this is a simple

00:03:44,720 --> 00:03:48,959
model of the software supply chain

00:03:46,879 --> 00:03:51,040
called a supply chain integrity map as

00:03:48,959 --> 00:03:53,519
you can see you know it's a simple map

00:03:51,040 --> 00:03:55,519
what's what goes on developers work

00:03:53,519 --> 00:03:58,080
within their local environments

00:03:55,519 --> 00:04:00,720
then send their changes and so on off to

00:03:58,080 --> 00:04:03,599
source and data repositories

00:04:00,720 --> 00:04:04,640
then they that software gets built and

00:04:03,599 --> 00:04:06,720
verified

00:04:04,640 --> 00:04:08,319
eventually it's approved for release to

00:04:06,720 --> 00:04:11,360
be sent out to various package

00:04:08,319 --> 00:04:13,519
repositories and distribution platforms

00:04:11,360 --> 00:04:14,480
uh hopefully they're that's assessed in

00:04:13,519 --> 00:04:15,840
various ways

00:04:14,480 --> 00:04:17,919
both the builds and the eventual

00:04:15,840 --> 00:04:20,160
packages

00:04:17,919 --> 00:04:21,359
finally people select and acquire them

00:04:20,160 --> 00:04:22,639
and then bring them into their

00:04:21,359 --> 00:04:25,040
environments to be

00:04:22,639 --> 00:04:25,759
uh to go through the cycle all again and

00:04:25,040 --> 00:04:29,520
eventually

00:04:25,759 --> 00:04:30,960
things get deployed out to operations

00:04:29,520 --> 00:04:32,880
and of course there are cycles here

00:04:30,960 --> 00:04:34,639
because smaller components get

00:04:32,880 --> 00:04:37,840
brought into larger components which get

00:04:34,639 --> 00:04:37,840
into larger components

00:04:38,880 --> 00:04:42,160
but of course if you look at this from

00:04:40,800 --> 00:04:45,120
the point of view

00:04:42,160 --> 00:04:46,960
of an attacker that's a system and

00:04:45,120 --> 00:04:48,560
systems can be attacked

00:04:46,960 --> 00:04:50,160
and a great way to learn how to attack

00:04:48,560 --> 00:04:53,199
them is to look at those parts

00:04:50,160 --> 00:04:54,720
and see how those various parts of the

00:04:53,199 --> 00:04:57,120
system can be attacked

00:04:54,720 --> 00:04:59,199
and those these red squares are just

00:04:57,120 --> 00:05:00,240
sample kinds of attacks and there's a

00:04:59,199 --> 00:05:02,880
lot of them

00:05:00,240 --> 00:05:03,759
uh typo squatting which is basically

00:05:02,880 --> 00:05:06,880
confusing

00:05:03,759 --> 00:05:08,240
uh acquirers and developers uh

00:05:06,880 --> 00:05:10,240
into thinking they're installing one

00:05:08,240 --> 00:05:12,400
package when they're installing another

00:05:10,240 --> 00:05:14,000
dependency confusion where they think

00:05:12,400 --> 00:05:15,039
it's the software's coming from one

00:05:14,000 --> 00:05:17,039
repository

00:05:15,039 --> 00:05:18,960
but it's actually coming from another

00:05:17,039 --> 00:05:22,080
there's malicious software

00:05:18,960 --> 00:05:24,800
um there's all sorts of

00:05:22,080 --> 00:05:25,759
vulnerabilities that go in as part of

00:05:24,800 --> 00:05:27,840
developments

00:05:25,759 --> 00:05:29,759
and just there's a whole host of

00:05:27,840 --> 00:05:31,680
problems

00:05:29,759 --> 00:05:34,160
but i don't want you to leave with oh my

00:05:31,680 --> 00:05:36,880
gosh there are so many problems

00:05:34,160 --> 00:05:38,080
because in fact there are counter

00:05:36,880 --> 00:05:40,000
measures

00:05:38,080 --> 00:05:41,120
and these are again just a sample of

00:05:40,000 --> 00:05:43,759
counter measures

00:05:41,120 --> 00:05:44,720
various approaches where you can do

00:05:43,759 --> 00:05:48,000
various things

00:05:44,720 --> 00:05:51,039
to counter some of those attacks i

00:05:48,000 --> 00:05:53,199
certainly can't talk about all of them

00:05:51,039 --> 00:05:54,160
but a trivial one i'll note for example

00:05:53,199 --> 00:05:55,759
is you know

00:05:54,160 --> 00:05:57,759
one of the big problems right now is

00:05:55,759 --> 00:06:00,319
developers often don't understand a lot

00:05:57,759 --> 00:06:02,080
of things nobody teaches them in classes

00:06:00,319 --> 00:06:03,919
and so a little education and training

00:06:02,080 --> 00:06:06,319
can go a long way

00:06:03,919 --> 00:06:08,319
and of course that's not enough there's

00:06:06,319 --> 00:06:10,800
various tools you can add to say the

00:06:08,319 --> 00:06:13,600
build verification processes and so on

00:06:10,800 --> 00:06:13,600
to really help

00:06:16,479 --> 00:06:20,000
there's no silver bullet there is no one

00:06:19,120 --> 00:06:22,479
thing if you do

00:06:20,000 --> 00:06:23,680
the one thing congratulations you have

00:06:22,479 --> 00:06:26,240
solved all problems

00:06:23,680 --> 00:06:26,960
that's not how it works instead you need

00:06:26,240 --> 00:06:29,440
to bring

00:06:26,960 --> 00:06:31,840
a variety of approaches to bear to

00:06:29,440 --> 00:06:34,960
counter the different kinds of attacks

00:06:31,840 --> 00:06:36,800
that attackers can do

00:06:34,960 --> 00:06:38,639
so what can open source software

00:06:36,800 --> 00:06:40,560
developers and users do

00:06:38,639 --> 00:06:42,639
well if you're not already doing these

00:06:40,560 --> 00:06:44,479
already here's some first starting steps

00:06:42,639 --> 00:06:45,680
you'll learn how to develop and acquire

00:06:44,479 --> 00:06:48,479
secure software

00:06:45,680 --> 00:06:48,880
uh if you don't have if you if nothing

00:06:48,479 --> 00:06:50,560
else

00:06:48,880 --> 00:06:52,080
take a look at the secure software

00:06:50,560 --> 00:06:52,639
development fundamentals course it's

00:06:52,080 --> 00:06:54,800
free

00:06:52,639 --> 00:06:56,319
it's on edx go take it there's others

00:06:54,800 --> 00:06:59,599
take those

00:06:56,319 --> 00:07:01,680
but learn how to do this stuff make the

00:06:59,599 --> 00:07:04,160
software secure by default

00:07:01,680 --> 00:07:05,120
make it easy to use securely harden it

00:07:04,160 --> 00:07:07,599
up

00:07:05,120 --> 00:07:08,720
against attacks if you're doing open

00:07:07,599 --> 00:07:10,880
source software development

00:07:08,720 --> 00:07:14,400
work to earn an open source i'm sorry

00:07:10,880 --> 00:07:16,800
cii best practices badge there's the url

00:07:14,400 --> 00:07:18,160
use many tools to find vulnerabilities

00:07:16,800 --> 00:07:18,880
in your build and verification

00:07:18,160 --> 00:07:21,039
environment

00:07:18,880 --> 00:07:22,400
no tools will not find everything but

00:07:21,039 --> 00:07:25,599
they're helpful as

00:07:22,400 --> 00:07:26,880
part of a solution of course monitor for

00:07:25,599 --> 00:07:29,919
known vulnerabilities

00:07:26,880 --> 00:07:31,440
in the in whatever you depend on so that

00:07:29,919 --> 00:07:33,199
you can immediately respond and

00:07:31,440 --> 00:07:34,800
immediately update

00:07:33,199 --> 00:07:36,800
of course in order to do that rapid

00:07:34,800 --> 00:07:39,440
update you need to use package managers

00:07:36,800 --> 00:07:40,400
and automated tools so you can rapidly

00:07:39,440 --> 00:07:42,240
respond

00:07:40,400 --> 00:07:43,919
when a vulnerability is found and i

00:07:42,240 --> 00:07:45,360
mentioned these tests those need to

00:07:43,919 --> 00:07:46,960
include negative tests

00:07:45,360 --> 00:07:48,560
in other words there are some things

00:07:46,960 --> 00:07:50,960
that should not be allowed

00:07:48,560 --> 00:07:51,599
test for that make sure they stay not

00:07:50,960 --> 00:07:52,960
allowed

00:07:51,599 --> 00:07:55,680
this is something that people often

00:07:52,960 --> 00:07:57,759
forget particularly if they're using tdd

00:07:55,680 --> 00:07:59,599
finally evaluate software before you

00:07:57,759 --> 00:08:01,599
select it you know look for typo

00:07:59,599 --> 00:08:03,440
squatting is that really the right name

00:08:01,599 --> 00:08:06,560
is that software malicious do you have

00:08:03,440 --> 00:08:06,560
reason to believe it secure

00:08:07,039 --> 00:08:10,639
and when you're evaluating here's some

00:08:08,960 --> 00:08:12,400
sample things to consider

00:08:10,639 --> 00:08:14,000
is it easy to use securely is there

00:08:12,400 --> 00:08:14,639
evidence that developers work to make it

00:08:14,000 --> 00:08:17,360
secure

00:08:14,639 --> 00:08:18,479
is it maintained has significant use

00:08:17,360 --> 00:08:21,680
what's the license

00:08:18,479 --> 00:08:22,240
um if it has a not an open source

00:08:21,680 --> 00:08:24,720
license

00:08:22,240 --> 00:08:26,400
shockingly it's not going to be

00:08:24,720 --> 00:08:28,000
collaboratively developed like an open

00:08:26,400 --> 00:08:29,840
source project

00:08:28,000 --> 00:08:32,800
if it's important what is your own

00:08:29,840 --> 00:08:35,279
evaluation of it

00:08:32,800 --> 00:08:36,479
the good news is lots of folks are

00:08:35,279 --> 00:08:39,839
working to make

00:08:36,479 --> 00:08:41,919
things better the open ssf for example

00:08:39,839 --> 00:08:43,680
open source security foundation

00:08:41,919 --> 00:08:45,360
uh is working on this there's a number

00:08:43,680 --> 00:08:48,320
of other projects here in fact this is a

00:08:45,360 --> 00:08:50,000
short list there's many more uh uh

00:08:48,320 --> 00:08:52,839
projects and foundations and

00:08:50,000 --> 00:08:55,519
organizations working to make things

00:08:52,839 --> 00:08:58,240
better

00:08:55,519 --> 00:08:59,839
so if you are an open source software

00:08:58,240 --> 00:09:01,279
developer user

00:08:59,839 --> 00:09:02,800
you need to do all those things i

00:09:01,279 --> 00:09:03,839
mentioned earlier but you also need to

00:09:02,800 --> 00:09:05,839
prep for the future

00:09:03,839 --> 00:09:07,279
here's some things that i see coming

00:09:05,839 --> 00:09:10,640
down the pike

00:09:07,279 --> 00:09:12,640
um you need to start being prepared to

00:09:10,640 --> 00:09:15,200
generate and request software build

00:09:12,640 --> 00:09:17,600
materials uh there's a lot of pressure

00:09:15,200 --> 00:09:20,000
in even high levels of government and so

00:09:17,600 --> 00:09:21,680
on to start saying we need to know

00:09:20,000 --> 00:09:23,839
what's in our software

00:09:21,680 --> 00:09:27,680
and we need to be prepared to answer

00:09:23,839 --> 00:09:29,120
that question it's a reasonable question

00:09:27,680 --> 00:09:30,800
look for more information about the

00:09:29,120 --> 00:09:32,720
software before you select it there's

00:09:30,800 --> 00:09:33,440
organizations like those within the open

00:09:32,720 --> 00:09:36,560
ssf

00:09:33,440 --> 00:09:37,839
that are working to improve information

00:09:36,560 --> 00:09:40,240
about the software

00:09:37,839 --> 00:09:41,519
uh that you're to improve information

00:09:40,240 --> 00:09:43,360
about the software so you can have

00:09:41,519 --> 00:09:45,360
better information when you select it

00:09:43,360 --> 00:09:47,040
i think verified reproducible builds are

00:09:45,360 --> 00:09:47,920
important that's particularly useful for

00:09:47,040 --> 00:09:51,040
countering

00:09:47,920 --> 00:09:53,440
uh subverted builds um improved

00:09:51,040 --> 00:09:55,519
cryptographic signature verification

00:09:53,440 --> 00:09:56,959
um you know we've had this for a long

00:09:55,519 --> 00:09:58,080
time but it's challenging to do

00:09:56,959 --> 00:10:01,200
verification

00:09:58,080 --> 00:10:02,640
i think sigstor has a lot of promise um

00:10:01,200 --> 00:10:04,640
but you know we'll see but no matter

00:10:02,640 --> 00:10:06,480
what i think this is something we need

00:10:04,640 --> 00:10:09,279
to see more of

00:10:06,480 --> 00:10:11,200
more generally integrity attestation

00:10:09,279 --> 00:10:13,839
approaches like in toto

00:10:11,200 --> 00:10:15,760
and increasing use of memory safe and

00:10:13,839 --> 00:10:18,560
more generally safe languages

00:10:15,760 --> 00:10:19,519
and more broadly working with others to

00:10:18,560 --> 00:10:22,800
help things

00:10:19,519 --> 00:10:23,839
to help make things better there's a lot

00:10:22,800 --> 00:10:25,519
of opportunity

00:10:23,839 --> 00:10:27,120
and frankly there are folks who could

00:10:25,519 --> 00:10:30,880
really use your help to

00:10:27,120 --> 00:10:31,519
speed these up so let me do a quick

00:10:30,880 --> 00:10:33,120
recap

00:10:31,519 --> 00:10:34,640
i came and said there are four key

00:10:33,120 --> 00:10:37,839
points i wanted to talk about

00:10:34,640 --> 00:10:40,480
attacks weakness hope change

00:10:37,839 --> 00:10:42,399
and i hope that you'll see that it's yes

00:10:40,480 --> 00:10:44,640
they're attacks and yes there's weakness

00:10:42,399 --> 00:10:48,000
but there is hope and but will need to

00:10:44,640 --> 00:10:50,320
change to take advantage of that hope

00:10:48,000 --> 00:10:52,320
a quick parting thought developing and

00:10:50,320 --> 00:10:52,959
deploying secure software is a journey

00:10:52,320 --> 00:10:56,079
of learning

00:10:52,959 --> 00:10:58,560
and improving it's not a single event

00:10:56,079 --> 00:10:59,279
but that's okay we just need to get

00:10:58,560 --> 00:11:03,519
started

00:10:59,279 --> 00:11:03,519

YouTube URL: https://www.youtube.com/watch?v=lUl8K9d1wdY


