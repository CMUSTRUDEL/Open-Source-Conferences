Title: Capture The Flag Summary + Wrap UpVirtual - Andrew Martin, Lewis Denham-Parry
Publication date: 2021-05-14
Playlist: Cloud Native Security Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Capture The Flag Summary + Wrap UpVirtual - Andrew Martin, Lewis Denham-Parry
Captions: 
	00:00:00,000 --> 00:00:04,879
hey andy i think it's time for us to

00:00:01,599 --> 00:00:04,879
start doing this wrap-up talk

00:00:05,920 --> 00:00:12,000
fabulous and wonderful well

00:00:09,679 --> 00:00:12,799
welcome to the cloud native security day

00:00:12,000 --> 00:00:15,679
ctf

00:00:12,799 --> 00:00:17,520
outro uh oh he says outro and this is

00:00:15,679 --> 00:00:21,600
the recap

00:00:17,520 --> 00:00:24,560
let's go to bear instead there we are

00:00:21,600 --> 00:00:24,960
welcome to the recap we will do a post

00:00:24,560 --> 00:00:27,920
cap

00:00:24,960 --> 00:00:28,880
recap decap uh walk through what we did

00:00:27,920 --> 00:00:31,519
today

00:00:28,880 --> 00:00:32,880
and go under the hood to explain some of

00:00:31,519 --> 00:00:35,920
the attacks

00:00:32,880 --> 00:00:37,280
peace indeed is never an option for a

00:00:35,920 --> 00:00:40,320
naughty goose

00:00:37,280 --> 00:00:44,719
and today we were off

00:00:40,320 --> 00:00:46,879
hunting clusters in the wild

00:00:44,719 --> 00:00:48,239
but actually it was not the public

00:00:46,879 --> 00:00:52,559
internet we were using

00:00:48,239 --> 00:00:56,399
it was uh far more whoops a lazy

00:00:52,559 --> 00:01:00,160
a far more constrained environment

00:00:56,399 --> 00:01:02,320
whereby we stood everything up in order

00:01:00,160 --> 00:01:02,320
to

00:01:02,399 --> 00:01:07,600
practice and learn in a safe place so

00:01:05,040 --> 00:01:10,320
every cluster had a bastion host

00:01:07,600 --> 00:01:11,040
and every cluster was inaccessible from

00:01:10,320 --> 00:01:14,880
the public

00:01:11,040 --> 00:01:17,200
internet so what were we trying to do

00:01:14,880 --> 00:01:19,360
we were trying to avoid this kind of

00:01:17,200 --> 00:01:21,280
thing

00:01:19,360 --> 00:01:23,680
but you know a little bit of frustration

00:01:21,280 --> 00:01:27,840
is a helpful learning tool

00:01:23,680 --> 00:01:31,119
but by having a taskmaster available

00:01:27,840 --> 00:01:33,759
and hopefully responsive enough we uh

00:01:31,119 --> 00:01:35,920
we look to assuage some of those

00:01:33,759 --> 00:01:39,280
concerns

00:01:35,920 --> 00:01:42,960
so let's have a look

00:01:39,280 --> 00:01:45,600
at the spoilers we do not have very long

00:01:42,960 --> 00:01:47,439
to get through all of these so we're

00:01:45,600 --> 00:01:49,920
going to try and do them as quickly as

00:01:47,439 --> 00:01:49,920
possible

00:01:50,479 --> 00:01:57,040
and do a pwn bipon demo of

00:01:54,399 --> 00:01:58,159
uh well as you say everything that we

00:01:57,040 --> 00:02:03,680
were doing

00:01:58,159 --> 00:02:03,680
so we will start off

00:02:05,439 --> 00:02:10,399
he says sorry

00:02:08,800 --> 00:02:12,560
yeah so i think we're going to start off

00:02:10,399 --> 00:02:14,480
with scenario 3 which is avalanche so

00:02:12,560 --> 00:02:17,599
earlier on today we had

00:02:14,480 --> 00:02:18,879
uh two separate twitch streams um in a

00:02:17,599 --> 00:02:20,160
first twitch stream we went through

00:02:18,879 --> 00:02:21,520
scenario one

00:02:20,160 --> 00:02:23,840
and they'll be available for you to

00:02:21,520 --> 00:02:24,800
review and then also in the afternoon

00:02:23,840 --> 00:02:27,040
twitch stream

00:02:24,800 --> 00:02:28,879
we went through scenario five so without

00:02:27,040 --> 00:02:31,360
further ado i'll pass back to

00:02:28,879 --> 00:02:32,000
mr andrew martin to uh show us a way

00:02:31,360 --> 00:02:35,840
through the

00:02:32,000 --> 00:02:38,080
uh scenario free which was called avalon

00:02:35,840 --> 00:02:39,760
thank you very much so with the purpose

00:02:38,080 --> 00:02:43,120
of this

00:02:39,760 --> 00:02:47,200
excuse me the purpose of this is

00:02:43,120 --> 00:02:50,080
uh we trust within our private networks

00:02:47,200 --> 00:02:52,640
um our own container registers hold code

00:02:50,080 --> 00:02:53,840
that we believe is safe to use

00:02:52,640 --> 00:02:56,720
so we've deployed an image from our

00:02:53,840 --> 00:02:58,640
private registry but the pirates captain

00:02:56,720 --> 00:03:00,080
hash jack and the nefarious crew have

00:02:58,640 --> 00:03:03,920
taken the registry down

00:03:00,080 --> 00:03:05,120
so we can no longer get images from it

00:03:03,920 --> 00:03:07,120
but there's a secret

00:03:05,120 --> 00:03:09,200
in one of those deployed images so let's

00:03:07,120 --> 00:03:11,360
have a look for the secret key

00:03:09,200 --> 00:03:13,120
to uh unlock the plug in the bottom of

00:03:11,360 --> 00:03:16,000
the captain's prize ship

00:03:13,120 --> 00:03:17,280
and hopefully scuttle it so we're in the

00:03:16,000 --> 00:03:20,800
hash jackpot

00:03:17,280 --> 00:03:21,440
in the avalon namespace well what does

00:03:20,800 --> 00:03:24,720
that mean

00:03:21,440 --> 00:03:27,760
as usual let's just see what the

00:03:24,720 --> 00:03:31,360
mount points look like let's check df

00:03:27,760 --> 00:03:33,599
and see okay the

00:03:31,360 --> 00:03:36,560
initial dual in any kubernetes

00:03:33,599 --> 00:03:38,720
escalation is the service count

00:03:36,560 --> 00:03:40,239
so let's see what we've got available so

00:03:38,720 --> 00:03:41,440
we have queue control installed

00:03:40,239 --> 00:03:44,480
so we're probably in a container that

00:03:41,440 --> 00:03:46,400
was used internally by administrators to

00:03:44,480 --> 00:03:48,560
do something useful

00:03:46,400 --> 00:03:51,519
and we will try and use for something

00:03:48,560 --> 00:03:53,920
that's less than useful

00:03:51,519 --> 00:03:56,080
so let's see what access we've got well

00:03:53,920 --> 00:03:58,159
we can hit the api server

00:03:56,080 --> 00:03:59,760
we can see in the m that we've got

00:03:58,159 --> 00:04:02,799
routing to these things

00:03:59,760 --> 00:04:04,480
it is the bitnami cubecontrol app thank

00:04:02,799 --> 00:04:06,080
you very much bitnami

00:04:04,480 --> 00:04:08,159
that probably means it's relatively well

00:04:06,080 --> 00:04:09,280
configured from a file system

00:04:08,159 --> 00:04:11,040
perspective

00:04:09,280 --> 00:04:12,959
what does that mean it means that we're

00:04:11,040 --> 00:04:16,320
uid 1001

00:04:12,959 --> 00:04:18,880
but group id zero does that uh

00:04:16,320 --> 00:04:20,000
does that show us anything well actually

00:04:18,880 --> 00:04:23,040
there is no

00:04:20,000 --> 00:04:25,199
you at 1001 so that means that our file

00:04:23,040 --> 00:04:27,600
system access is going to be difficult

00:04:25,199 --> 00:04:28,240
it's also why we see i have no name

00:04:27,600 --> 00:04:30,000
because

00:04:28,240 --> 00:04:32,400
our username is pulled from etsy

00:04:30,000 --> 00:04:34,479
password and we have no reconciliation

00:04:32,400 --> 00:04:37,919
because we have no

00:04:34,479 --> 00:04:40,720
entry no line in there

00:04:37,919 --> 00:04:42,400
okay so we do have cube control and this

00:04:40,720 --> 00:04:43,680
is probably a bad day for cluster

00:04:42,400 --> 00:04:47,040
administrators

00:04:43,680 --> 00:04:48,639
what pods do we have okay so we can see

00:04:47,040 --> 00:04:52,400
already that we've

00:04:48,639 --> 00:04:53,759
got uh three private earpods

00:04:52,400 --> 00:04:55,840
and if we try and do this across all

00:04:53,759 --> 00:04:58,880
name

00:04:55,840 --> 00:05:00,960
excuse me that's not quite how you spell

00:04:58,880 --> 00:05:02,720
spaces

00:05:00,960 --> 00:05:05,039
then we can see here so we have a we

00:05:02,720 --> 00:05:09,120
have a forbidden

00:05:05,039 --> 00:05:13,600
and the api server has leaked our

00:05:09,120 --> 00:05:16,560
um service count name and

00:05:13,600 --> 00:05:18,479
the namespace back to us so we can't

00:05:16,560 --> 00:05:22,080
list pods across all namespaces

00:05:18,479 --> 00:05:24,560
fine but we do have access to our own

00:05:22,080 --> 00:05:26,560
local namespace so what do we know about

00:05:24,560 --> 00:05:28,639
the scenario well just going back to the

00:05:26,560 --> 00:05:30,479
beginning

00:05:28,639 --> 00:05:32,800
we can see there's a secret in one of

00:05:30,479 --> 00:05:36,479
the deployed images

00:05:32,800 --> 00:05:38,000
so we've got access to these pods

00:05:36,479 --> 00:05:40,320
how do we find out what images they're

00:05:38,000 --> 00:05:43,199
running we

00:05:40,320 --> 00:05:43,600
examine them as yellow and we grep for

00:05:43,199 --> 00:05:46,880
the

00:05:43,600 --> 00:05:50,320
image tag or the image

00:05:46,880 --> 00:05:53,600
key there we go

00:05:50,320 --> 00:05:55,919
so that looks pretty hopeful

00:05:53,600 --> 00:05:57,919
this container image is probably the one

00:05:55,919 --> 00:06:00,240
that we want

00:05:57,919 --> 00:06:02,000
so let's just see if we can exact

00:06:00,240 --> 00:06:05,440
straight in

00:06:02,000 --> 00:06:08,400
control exec interactive session

00:06:05,440 --> 00:06:09,600
attached to sudo terminal let's go into

00:06:08,400 --> 00:06:11,680
privateer

00:06:09,600 --> 00:06:13,440
oh we don't have a completion which

00:06:11,680 --> 00:06:16,639
we'll fix

00:06:13,440 --> 00:06:20,240
and let's run sh okay so we

00:06:16,639 --> 00:06:21,600
do not have pods exec that's not very

00:06:20,240 --> 00:06:22,560
helpful when we want to read the

00:06:21,600 --> 00:06:25,440
contents of the

00:06:22,560 --> 00:06:27,039
image that the pod is running from but

00:06:25,440 --> 00:06:28,400
we can do something slightly different

00:06:27,039 --> 00:06:31,919
which is

00:06:28,400 --> 00:06:35,840
run the thing instead

00:06:31,919 --> 00:06:35,840
and then see if that works

00:06:36,800 --> 00:06:40,800
okay so we've managed to do something

00:06:38,800 --> 00:06:41,759
and in fact i've called pod sh which is

00:06:40,800 --> 00:06:45,360
never a good look

00:06:41,759 --> 00:06:45,360
let's call it test random

00:06:47,280 --> 00:06:51,680
okay so we're able to run but we're not

00:06:49,919 --> 00:06:55,039
able to attach to the pod

00:06:51,680 --> 00:06:55,919
that's not very useful uh let's just

00:06:55,039 --> 00:06:58,560
have a look again

00:06:55,919 --> 00:07:00,080
and see what pods we have so here's the

00:06:58,560 --> 00:07:02,880
erroneously named and here's the

00:07:00,080 --> 00:07:06,000
recently named

00:07:02,880 --> 00:07:07,599
so what can we do here well we're

00:07:06,000 --> 00:07:08,960
looking for something in the file system

00:07:07,599 --> 00:07:11,360
of a pod

00:07:08,960 --> 00:07:12,160
of an image rather we can't get that

00:07:11,360 --> 00:07:14,080
image

00:07:12,160 --> 00:07:15,360
because it's from a private registry so

00:07:14,080 --> 00:07:16,319
the only thing we can do here is to

00:07:15,360 --> 00:07:19,840
execute something

00:07:16,319 --> 00:07:24,800
inside the pod that will reveal unto us

00:07:19,840 --> 00:07:27,039
the actual flag on the file system so

00:07:24,800 --> 00:07:27,039
um

00:07:28,240 --> 00:07:35,440
let us say pods is going to be called

00:07:32,560 --> 00:07:37,360
uh test and we'll give it a random name

00:07:35,440 --> 00:07:39,280
so that we can we can use the bash built

00:07:37,360 --> 00:07:42,840
in random variable

00:07:39,280 --> 00:07:46,560
so that we get excuse me so that we get

00:07:42,840 --> 00:07:48,800
a different name every time

00:07:46,560 --> 00:07:50,240
then that's our pod name and then the

00:07:48,800 --> 00:07:53,599
command we want to run

00:07:50,240 --> 00:07:56,800
is probably uh bash

00:07:53,599 --> 00:07:57,599
and then let's just get our id and then

00:07:56,800 --> 00:07:59,360
once we've done

00:07:57,599 --> 00:08:02,319
that give it a few seconds for the pod

00:07:59,360 --> 00:08:06,720
to start at the cube control logs

00:08:02,319 --> 00:08:06,720
on the pod just see what happens

00:08:07,599 --> 00:08:13,840
so three seconds pod starting hopefully

00:08:14,720 --> 00:08:21,360
pod apparently not starting

00:08:18,000 --> 00:08:21,360
i don't know if i need those in there

00:08:25,440 --> 00:08:29,360
okay maybe we'll try a slightly

00:08:26,960 --> 00:08:32,639
different approach to this

00:08:29,360 --> 00:08:32,639
why would that not work

00:08:33,279 --> 00:08:37,760
so andy the way that i did this earlier

00:08:36,800 --> 00:08:41,120
was just

00:08:37,760 --> 00:08:42,880
to uh in the sleeper command during it

00:08:41,120 --> 00:08:44,720
is just to write out those logs as

00:08:42,880 --> 00:08:47,279
you've done but then keep call logs

00:08:44,720 --> 00:08:48,880
on the pod and then write it to a dump

00:08:47,279 --> 00:08:50,560
so temp dump

00:08:48,880 --> 00:08:52,160
and then to cut it out from there that's

00:08:50,560 --> 00:08:55,920
how i

00:08:52,160 --> 00:08:57,600
that's a good idea so let's just

00:08:55,920 --> 00:08:59,279
so we've named the pod something the

00:08:57,600 --> 00:08:59,519
other thing we can do here while we're

00:08:59,279 --> 00:09:01,519
at

00:08:59,519 --> 00:09:03,279
it is just to turn debug mode on and

00:09:01,519 --> 00:09:05,839
bash to make sure that the command is as

00:09:03,279 --> 00:09:09,519
i think it is

00:09:05,839 --> 00:09:12,880
okay well mystically that worked

00:09:09,519 --> 00:09:15,920
so let's just do uh

00:09:12,880 --> 00:09:18,320
shell command id make sure that we have

00:09:15,920 --> 00:09:18,320
something

00:09:20,839 --> 00:09:23,839
um

00:09:28,000 --> 00:09:31,200
okay we may have to come back to this

00:09:29,760 --> 00:09:35,200
one because i would expect

00:09:31,200 --> 00:09:36,480
this to reveal something to us at least

00:09:35,200 --> 00:09:39,040
looks like we're just hanging with the

00:09:36,480 --> 00:09:39,040
invocation

00:09:41,920 --> 00:09:45,519
live demos hey joy joy of live demos

00:09:44,720 --> 00:09:48,839
yeah

00:09:45,519 --> 00:09:51,839
we spin up over well i've forgotten the

00:09:48,839 --> 00:09:51,839
numbers

00:09:56,000 --> 00:09:59,519
okay so it was because i tried to attach

00:09:58,000 --> 00:10:02,880
terminal to it

00:09:59,519 --> 00:10:06,000
so let's get back to where we were

00:10:02,880 --> 00:10:08,399
uh command id and then we'll pull the

00:10:06,000 --> 00:10:08,399
logs

00:10:10,160 --> 00:10:12,880
as so

00:10:14,640 --> 00:10:18,720
okay but we do need to leave a few

00:10:15,920 --> 00:10:21,040
seconds for the pod to actually start

00:10:18,720 --> 00:10:22,079
this is a kind of blind injection attack

00:10:21,040 --> 00:10:24,399
against the pod

00:10:22,079 --> 00:10:27,200
there we go so now we can execute

00:10:24,399 --> 00:10:29,600
commands within this one shot container

00:10:27,200 --> 00:10:32,079
in the interests of the time that i've

00:10:29,600 --> 00:10:33,920
wasted that you will never get back uh

00:10:32,079 --> 00:10:35,120
let's grab for the flag with my

00:10:33,920 --> 00:10:39,040
favorites

00:10:35,120 --> 00:10:40,959
one liner which looks a bit like this

00:10:39,040 --> 00:10:42,320
so we're going to find something now we

00:10:40,959 --> 00:10:43,680
happen to know

00:10:42,320 --> 00:10:45,680
that it's in the temp directory to save

00:10:43,680 --> 00:10:48,959
us a little bit of time

00:10:45,680 --> 00:10:52,480
and that hopefully should now dump out

00:10:48,959 --> 00:10:54,160
a flag if i'm being sensible

00:10:52,480 --> 00:10:57,600
and as as people have pointed out before

00:10:54,160 --> 00:10:57,600
we don't have to use find here

00:10:57,839 --> 00:11:03,839
we do have to oh no that's not correct

00:11:00,800 --> 00:11:05,279
sorry we do want to search this

00:11:03,839 --> 00:11:07,200
we could just grep from the root of the

00:11:05,279 --> 00:11:10,560
file system

00:11:07,200 --> 00:11:11,519
um okay finally use a share never going

00:11:10,560 --> 00:11:14,720
to make you

00:11:11,519 --> 00:11:15,920
this smells of lewis denim paris cluster

00:11:14,720 --> 00:11:18,160
perturbering

00:11:15,920 --> 00:11:20,959
uh but there is our flag finally hidden

00:11:18,160 --> 00:11:22,160
in some nefarious local coil system

00:11:20,959 --> 00:11:24,320
and we've pulled that from inside the

00:11:22,160 --> 00:11:26,160
container now that puts us

00:11:24,320 --> 00:11:27,760
slightly behind time so let's see how

00:11:26,160 --> 00:11:30,160
quickly we can get through the next so

00:11:27,760 --> 00:11:31,120
whilst do you get that next one set up

00:11:30,160 --> 00:11:33,680
yes um

00:11:31,120 --> 00:11:35,279
value to my calling card to rick roll

00:11:33,680 --> 00:11:36,480
whenever i get into a cluster or these

00:11:35,279 --> 00:11:38,959
scenarios

00:11:36,480 --> 00:11:40,240
um again we're tight on time today so

00:11:38,959 --> 00:11:43,440
we're going to see if we can get

00:11:40,240 --> 00:11:44,720
to the second but andy whenever you're

00:11:43,440 --> 00:11:46,720
ready to go give me a shout

00:11:44,720 --> 00:11:49,120
and for i think we're going to go on to

00:11:46,720 --> 00:11:50,399
scenario four now

00:11:49,120 --> 00:11:52,240
what is the name of that scenario when

00:11:50,399 --> 00:11:57,839
it's home one second it is

00:11:52,240 --> 00:11:57,839
escalates okay there we go

00:12:04,480 --> 00:12:07,920
okay so what are we doing here the

00:12:06,160 --> 00:12:09,760
supply chain is compromised

00:12:07,920 --> 00:12:11,680
who would have thought such a thing

00:12:09,760 --> 00:12:12,160
hashtag and the motley crew have managed

00:12:11,680 --> 00:12:15,279
to get

00:12:12,160 --> 00:12:17,519
code merged into the application library

00:12:15,279 --> 00:12:19,120
that developers use the lobby runs in a

00:12:17,519 --> 00:12:21,519
pod and attackers

00:12:19,120 --> 00:12:24,079
have then escalated trying to find

00:12:21,519 --> 00:12:27,040
secrets on the host

00:12:24,079 --> 00:12:28,480
so what do we know here well we know

00:12:27,040 --> 00:12:32,240
that we

00:12:28,480 --> 00:12:33,680
have uh we have two

00:12:32,240 --> 00:12:36,320
unknown containers from the starting

00:12:33,680 --> 00:12:38,399
point in the process audit pod

00:12:36,320 --> 00:12:40,800
so again we'll just do standards just

00:12:38,399 --> 00:12:43,920
see what's uh what exists here

00:12:40,800 --> 00:12:45,200
we have we have a service account we

00:12:43,920 --> 00:12:48,000
don't have cube control

00:12:45,200 --> 00:12:52,079
uh we could install it but let's look at

00:12:48,000 --> 00:12:55,839
some other things first

00:12:52,079 --> 00:12:58,800
the process table is interesting

00:12:55,839 --> 00:13:01,680
so we can see here that we've got sleep

00:12:58,800 --> 00:13:03,920
infinity twice

00:13:01,680 --> 00:13:06,160
the reason for this is that there are

00:13:03,920 --> 00:13:08,639
two containers in this pod

00:13:06,160 --> 00:13:10,000
and for some reason the containers can

00:13:08,639 --> 00:13:13,200
see each other's init

00:13:10,000 --> 00:13:16,480
process that is generally a

00:13:13,200 --> 00:13:17,360
bad day because once we share process

00:13:16,480 --> 00:13:20,480
namespaces

00:13:17,360 --> 00:13:23,200
we share proc and proc

00:13:20,480 --> 00:13:25,200
gives us access to all the good stuff so

00:13:23,200 --> 00:13:29,120
we can now see for example

00:13:25,200 --> 00:13:32,079
uh how that process was invoked

00:13:29,120 --> 00:13:33,040
uh and actually we need to do some uh

00:13:32,079 --> 00:13:34,800
some null bytes

00:13:33,040 --> 00:13:36,240
fixing so it's visible so we've got

00:13:34,800 --> 00:13:37,200
sleep infinity in there so we know that

00:13:36,240 --> 00:13:39,839
it's

00:13:37,200 --> 00:13:41,440
process 11 here's 11. we've got the

00:13:39,839 --> 00:13:43,120
right one

00:13:41,440 --> 00:13:45,199
okay so what else could we look for in

00:13:43,120 --> 00:13:46,639
here well we have access to the entire

00:13:45,199 --> 00:13:49,839
root file system

00:13:46,639 --> 00:13:52,800
of that process

00:13:49,839 --> 00:13:55,519
uh which of course is is a joy for um

00:13:52,800 --> 00:13:59,360
all to behold

00:13:55,519 --> 00:13:59,360
let's just go back and do an ls

00:14:00,000 --> 00:14:02,959
okay so there's some stuff in there but

00:14:01,680 --> 00:14:03,920
that's not actually what we're looking

00:14:02,959 --> 00:14:08,320
for

00:14:03,920 --> 00:14:12,000
um got some stuff in temp

00:14:08,320 --> 00:14:17,120
but what are we looking for here well

00:14:12,000 --> 00:14:19,360
actually in this case we are looking for

00:14:17,120 --> 00:14:21,360
perhaps something in the environment so

00:14:19,360 --> 00:14:24,560
again we're looking in the environment

00:14:21,360 --> 00:14:25,279
of the other container in the pod there

00:14:24,560 --> 00:14:28,399
are two

00:14:25,279 --> 00:14:29,120
containers in this pod and this one is

00:14:28,399 --> 00:14:32,160
giving us

00:14:29,120 --> 00:14:35,839
some useful information perhaps again

00:14:32,160 --> 00:14:38,959
things are not bite delimited

00:14:35,839 --> 00:14:39,360
and their joyful joys is something that

00:14:38,959 --> 00:14:43,600
looks

00:14:39,360 --> 00:14:48,000
suspiciously like a flag happy days

00:14:43,600 --> 00:14:49,920
there we go um on to uh on to the next

00:14:48,000 --> 00:14:52,000
in the last five minutes i'm sure we can

00:14:49,920 --> 00:14:52,399
hear it so whilst you get set up for

00:14:52,000 --> 00:14:54,240
that

00:14:52,399 --> 00:14:55,920
some honorable mentions to today so we

00:14:54,240 --> 00:14:59,920
had chris stuffed um

00:14:55,920 --> 00:15:03,040
well d um noel mahey

00:14:59,920 --> 00:15:05,519
uh we had you val all just

00:15:03,040 --> 00:15:07,199
smashing through the scenarios uh thank

00:15:05,519 --> 00:15:09,120
you to wallet as well who is

00:15:07,199 --> 00:15:11,120
i feel is the community support officer

00:15:09,120 --> 00:15:13,040
so thank you ever so much

00:15:11,120 --> 00:15:14,800
for the channel uh lena thank you for

00:15:13,040 --> 00:15:15,680
being the most eager person to request a

00:15:14,800 --> 00:15:17,519
cluster 20 min

00:15:15,680 --> 00:15:18,959
20 hours before the event starts but

00:15:17,519 --> 00:15:22,000
it's totally awesome

00:15:18,959 --> 00:15:25,839
and a safe as well but at this point

00:15:22,000 --> 00:15:26,720
and you've got four minutes to do a hack

00:15:25,839 --> 00:15:28,560
uh excellent

00:15:26,720 --> 00:15:29,839
okay so the cluster is almost about to

00:15:28,560 --> 00:15:32,560
die as well because it's an

00:15:29,839 --> 00:15:33,519
old one so what are we going to do well

00:15:32,560 --> 00:15:35,360
um

00:15:33,519 --> 00:15:37,120
the environment doesn't give us much

00:15:35,360 --> 00:15:40,720
cube control

00:15:37,120 --> 00:15:41,120
has no local routing okay so in this

00:15:40,720 --> 00:15:43,360
case

00:15:41,120 --> 00:15:44,720
again i'd like to check the mount points

00:15:43,360 --> 00:15:45,519
this is not something that we would

00:15:44,720 --> 00:15:48,160
expect to see

00:15:45,519 --> 00:15:48,800
so let's unmount whatever is bind mount

00:15:48,160 --> 00:15:52,000
is

00:15:48,800 --> 00:15:53,040
over root.cube have a look there's still

00:15:52,000 --> 00:15:54,880
nothing there

00:15:53,040 --> 00:15:56,079
why might that be because there are two

00:15:54,880 --> 00:15:57,759
bind mounts

00:15:56,079 --> 00:15:59,680
okay and then let's just double check

00:15:57,759 --> 00:16:01,600
that the mounts are actually gone

00:15:59,680 --> 00:16:03,040
yeah there's nothing there anymore bind

00:16:01,600 --> 00:16:04,800
mounts are just a way of hiding things

00:16:03,040 --> 00:16:05,680
on a file system you can hide processes

00:16:04,800 --> 00:16:07,880
as well

00:16:05,680 --> 00:16:09,600
but in this case we were hiding

00:16:07,880 --> 00:16:12,639
root.cube

00:16:09,600 --> 00:16:14,240
and now we've got cubecontrol access

00:16:12,639 --> 00:16:17,519
and there we go we can route to the

00:16:14,240 --> 00:16:20,399
master the api server

00:16:17,519 --> 00:16:22,720
so what is the point of this exercise i

00:16:20,399 --> 00:16:26,399
hear you ask

00:16:22,720 --> 00:16:26,399
what's the point of this exercise andy

00:16:27,279 --> 00:16:32,639
it is to find where hashtag has hidden

00:16:30,720 --> 00:16:33,759
his ill-gotten treasure in a

00:16:32,639 --> 00:16:36,880
hard-to-find

00:16:33,759 --> 00:16:40,399
place okay so first of all

00:16:36,880 --> 00:16:41,920
we probably want to uh get onto the

00:16:40,399 --> 00:16:42,320
master but we don't know how we can do

00:16:41,920 --> 00:16:44,720
that

00:16:42,320 --> 00:16:46,720
easily let's see if we can get any

00:16:44,720 --> 00:16:49,959
secrets

00:16:46,720 --> 00:16:52,720
um irredeemable villainy and

00:16:49,959 --> 00:16:53,839
pseudo-reminiscent uh are both potential

00:16:52,720 --> 00:16:56,160
candidates

00:16:53,839 --> 00:16:56,880
but of course if we have access to all

00:16:56,160 --> 00:16:59,519
name spaces

00:16:56,880 --> 00:16:59,920
let's just take that one down two down

00:16:59,519 --> 00:17:02,839
uh

00:16:59,920 --> 00:17:04,480
we can see there's a fair bit more in

00:17:02,839 --> 00:17:06,240
here

00:17:04,480 --> 00:17:07,760
so noticeably some of these controller

00:17:06,240 --> 00:17:09,919
tokens are masquerading

00:17:07,760 --> 00:17:11,600
so that suggests that it's a service

00:17:09,919 --> 00:17:12,319
account token but it's not that is

00:17:11,600 --> 00:17:14,400
created by

00:17:12,319 --> 00:17:16,319
a human in the same way these default

00:17:14,400 --> 00:17:19,679
tokens

00:17:16,319 --> 00:17:24,799
that's not how it should be so

00:17:19,679 --> 00:17:26,720
um subcompensatory super averageness

00:17:24,799 --> 00:17:27,919
let's see if we can figure out which of

00:17:26,720 --> 00:17:31,120
these uh

00:17:27,919 --> 00:17:31,120
actually holds

00:17:31,600 --> 00:17:35,360
the uh the token so what are we going to

00:17:34,640 --> 00:17:38,960
do

00:17:35,360 --> 00:17:41,280
let's uh let's get a secret

00:17:38,960 --> 00:17:42,480
and i will be honest lewis i i'm not

00:17:41,280 --> 00:17:45,679
actually sure which is what so

00:17:42,480 --> 00:17:46,000
if you um so what i did andy when you

00:17:45,679 --> 00:17:48,559
dropped

00:17:46,000 --> 00:17:50,240
this one on me was to go all name spaces

00:17:48,559 --> 00:17:53,600
get secrets hyphen

00:17:50,240 --> 00:17:55,120
o yaml life

00:17:53,600 --> 00:17:57,039
and then just grab from that because it

00:17:55,120 --> 00:18:00,640
will give you everything so grab

00:17:57,039 --> 00:18:02,720
um ssh i think yeah

00:18:00,640 --> 00:18:04,320
and there we go is something that looks

00:18:02,720 --> 00:18:07,600
like a private key

00:18:04,320 --> 00:18:07,600
here's one that we made earlier

00:18:09,120 --> 00:18:12,240
there we go so we've now got a private

00:18:10,559 --> 00:18:16,880
key let's stick that

00:18:12,240 --> 00:18:19,280
into ssh id i suppose

00:18:16,880 --> 00:18:19,280
and

00:18:21,520 --> 00:18:26,559
so maybe if we did an

00:18:24,799 --> 00:18:28,559
nmap andy we would have found a certain

00:18:26,559 --> 00:18:31,600
port open but again to save you from

00:18:28,559 --> 00:18:35,039
doing it if you curled the master ip

00:18:31,600 --> 00:18:37,679
um and port 5678

00:18:35,039 --> 00:18:39,200
so if you've got the master ip node uh

00:18:37,679 --> 00:18:40,640
if you have a master ip

00:18:39,200 --> 00:18:42,640
from doing cube called get notice i have

00:18:40,640 --> 00:18:44,000
no wide and

00:18:42,640 --> 00:18:46,559
oh there you go you've already done that

00:18:44,000 --> 00:18:48,320
so unfair so okay very nice information

00:18:46,559 --> 00:18:50,320
thank you very much so it's a message

00:18:48,320 --> 00:18:53,520
from our archetypal

00:18:50,320 --> 00:18:54,640
arch adversary follow the 22 white

00:18:53,520 --> 00:18:57,039
rabbits

00:18:54,640 --> 00:18:57,919
so had we done this beforehand we may

00:18:57,039 --> 00:19:00,080
have then

00:18:57,919 --> 00:19:01,679
thought about trying to find ssh keys

00:19:00,080 --> 00:19:04,000
which at this point we have done

00:19:01,679 --> 00:19:06,080
anachronously but so we now have access

00:19:04,000 --> 00:19:09,360
to this uh we also know

00:19:06,080 --> 00:19:12,000
from running keep control version

00:19:09,360 --> 00:19:13,520
what the master appears of course we can

00:19:12,000 --> 00:19:14,320
get that from our local cube config as

00:19:13,520 --> 00:19:17,039
well

00:19:14,320 --> 00:19:18,320
which is probably that much easier there

00:19:17,039 --> 00:19:21,679
we go

00:19:18,320 --> 00:19:25,919
so let's follow

00:19:21,679 --> 00:19:28,080
the captain onto the master node whoops

00:19:25,919 --> 00:19:29,120
and you've got about a minute as well to

00:19:28,080 --> 00:19:30,799
pull this up so i'm

00:19:29,120 --> 00:19:32,080
going forward okay yes so that's

00:19:30,799 --> 00:19:34,960
permission denied but that is because

00:19:32,080 --> 00:19:38,559
we're not using the right key

00:19:34,960 --> 00:19:39,440
there's the shid and we do a classic

00:19:38,559 --> 00:19:42,480
trick

00:19:39,440 --> 00:19:43,600
of not setting our permissions okay off

00:19:42,480 --> 00:19:45,200
we go we're onto the master

00:19:43,600 --> 00:19:47,120
so at this point what am i actually

00:19:45,200 --> 00:19:50,000
doing here um we need

00:19:47,120 --> 00:19:51,520
to we need to inspect we need to find

00:19:50,000 --> 00:19:52,480
that there's an image on there control

00:19:51,520 --> 00:19:56,160
plane i o

00:19:52,480 --> 00:19:57,280
valiant effort and we want to inspect

00:19:56,160 --> 00:20:00,880
that image

00:19:57,280 --> 00:20:04,080
and we want to find uh where the diff is

00:20:00,880 --> 00:20:05,520
so um nice and then

00:20:04,080 --> 00:20:07,760
but we want to gain access to that diff

00:20:05,520 --> 00:20:09,760
but to be able to do so um we don't have

00:20:07,760 --> 00:20:11,440
pseudo access on this so if we remember

00:20:09,760 --> 00:20:12,000
back to the first scenario of today we

00:20:11,440 --> 00:20:13,760
showed you

00:20:12,000 --> 00:20:15,039
how to get privileged access if you run

00:20:13,760 --> 00:20:17,679
a privileged container so

00:20:15,039 --> 00:20:19,200
let's if we could just loop back to

00:20:17,679 --> 00:20:20,159
trying to do a docker run to run a

00:20:19,200 --> 00:20:23,440
private uh

00:20:20,159 --> 00:20:26,720
i can't say it a privileged container on

00:20:23,440 --> 00:20:27,600
on our kubernetes master which would

00:20:26,720 --> 00:20:30,400
then allow us

00:20:27,600 --> 00:20:33,200
to mount the dev xv da1 mount the same

00:20:30,400 --> 00:20:35,600
thing that we did in scenario one today

00:20:33,200 --> 00:20:36,400
which then allows us to traverse to the

00:20:35,600 --> 00:20:40,960
file system

00:20:36,400 --> 00:20:40,960
that the docker image is within and

00:20:43,840 --> 00:20:49,440
speed running it really is so it first

00:20:47,120 --> 00:20:50,559
says this far live docker location is on

00:20:49,440 --> 00:20:53,600
the hosts

00:20:50,559 --> 00:20:54,320
um uh it's on the host file system which

00:20:53,600 --> 00:20:56,240
we're on

00:20:54,320 --> 00:20:57,520
but it's owned by root so that means

00:20:56,240 --> 00:20:59,280
that we have to escalate

00:20:57,520 --> 00:21:02,320
we can do that through a container or we

00:20:59,280 --> 00:21:03,440
can just mount the file system as we're

00:21:02,320 --> 00:21:05,600
about to do

00:21:03,440 --> 00:21:07,360
here so we've mounted the so if we go

00:21:05,600 --> 00:21:08,960
into host

00:21:07,360 --> 00:21:11,600
there we go so now we should have access

00:21:08,960 --> 00:21:11,600
to this

00:21:15,039 --> 00:21:18,799
he says access

00:21:20,480 --> 00:21:23,440
oh yeah thanks

00:21:24,320 --> 00:21:29,600
okay yes it's the directory and then

00:21:27,280 --> 00:21:32,880
proc self command line is the only

00:21:29,600 --> 00:21:35,360
file hidden in the container image

00:21:32,880 --> 00:21:36,559
and therein lies the flag that was a

00:21:35,360 --> 00:21:38,080
speed run and a half

00:21:36,559 --> 00:21:40,400
there are a couple more that you can see

00:21:38,080 --> 00:21:42,640
that were on the live streams earlier

00:21:40,400 --> 00:21:44,240
and i hope that's been at least vaguely

00:21:42,640 --> 00:21:47,840
informative if not a little bit

00:21:44,240 --> 00:21:50,320
too fast to follow thank you

00:21:47,840 --> 00:21:52,000
that's a good question just to say for

00:21:50,320 --> 00:21:53,360
thank yous

00:21:52,000 --> 00:21:56,240
that's an excellent point and there are

00:21:53,360 --> 00:21:58,240
the thank yous yes indeed

00:21:56,240 --> 00:21:59,760
thank you to everybody who's uh helped

00:21:58,240 --> 00:22:03,360
putting everything together

00:21:59,760 --> 00:22:04,559
and also the organizers the work done to

00:22:03,360 --> 00:22:09,039
get today

00:22:04,559 --> 00:22:11,200
uh smooth and um speed bump free

00:22:09,039 --> 00:22:13,120
and uh and control plane folks who've

00:22:11,200 --> 00:22:16,799
been laboring on the back end

00:22:13,120 --> 00:22:18,480
past and present thanks to you all

00:22:16,799 --> 00:22:20,080
there is the the great passing of the

00:22:18,480 --> 00:22:23,840
seas

00:22:20,080 --> 00:22:25,520
uh some attendees enjoyed themselves

00:22:23,840 --> 00:22:28,880
and yes of course don't put kubernetes

00:22:25,520 --> 00:22:30,559
api servers on the public internet

00:22:28,880 --> 00:22:32,480
control plane does this for a living if

00:22:30,559 --> 00:22:34,240
you'd like us to run a ctf for you

00:22:32,480 --> 00:22:35,840
um or indeed you'd like to attend some

00:22:34,240 --> 00:22:37,760
of the sans training courses

00:22:35,840 --> 00:22:38,880
then uh please do reach out to the

00:22:37,760 --> 00:22:40,559
relevant channels

00:22:38,880 --> 00:22:43,760
and thank you very much for playing have

00:22:40,559 --> 00:22:43,760

YouTube URL: https://www.youtube.com/watch?v=phKBYX6Pd_A


