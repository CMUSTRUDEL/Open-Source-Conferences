Title: Lightning Talk: Weaviate Vector Search Engine - Enhancing Cybersecurity - Bob van Luijt , SeMI Tech
Publication date: 2021-05-12
Playlist: Cloud Native Security Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Lightning Talk: Weaviate Vector Search Engine - Enhancing Cybersecurity - Bob van Luijt , SeMI Technologies

This talk is an introduction to the vector search engine Weaviate. You will learn how storing data using vectors enables semantic search and automatic data classification. Topics like the underlying vector storage mechanism and how the pre-trained language vectorization model enables this are touched. In addition, this presentation consists of live demos to show the power of Weaviate and how you can get started with your own datasets. No prior technical knowledge is required; all concepts are illustrated with real use case examples and live demos. Although Weaviate could be applied in a broad set of use cases, Weaviate has high potential in cybersecurity. Automatic classification of attacks, clustering of incoming threats, and better search through data in the security realm could improve the cyber security of systems and assist security analysts in analysing and preventing attacks.
Captions: 
	00:00:00,000 --> 00:00:03,199
hello everybody thank you for watching

00:00:02,320 --> 00:00:05,680
this video

00:00:03,199 --> 00:00:07,040
i'm going to talk about the viviate

00:00:05,680 --> 00:00:09,840
vector search engine

00:00:07,040 --> 00:00:10,960
and then specifically from the

00:00:09,840 --> 00:00:14,639
perspective of

00:00:10,960 --> 00:00:17,119
threat analysis in cyber security

00:00:14,639 --> 00:00:17,840
on mostly we're gonna focusing on i'm

00:00:17,119 --> 00:00:19,279
gonna

00:00:17,840 --> 00:00:21,760
tell a little bit about what weave it is

00:00:19,279 --> 00:00:23,840
and then we're gonna focus on the demo

00:00:21,760 --> 00:00:26,240
um and i'm also gonna show give you some

00:00:23,840 --> 00:00:29,439
pointers how you can start working with

00:00:26,240 --> 00:00:29,840
it yourself so we've hit is a vector

00:00:29,439 --> 00:00:33,600
search

00:00:29,840 --> 00:00:34,960
engine and it's a it's a full across

00:00:33,600 --> 00:00:36,719
support database

00:00:34,960 --> 00:00:38,879
but the most important thing to bear in

00:00:36,719 --> 00:00:42,160
mind is that the

00:00:38,879 --> 00:00:43,200
the difference between traditional

00:00:42,160 --> 00:00:46,000
search engines

00:00:43,200 --> 00:00:47,840
and vector search engines like we've yet

00:00:46,000 --> 00:00:51,760
is that we've yet focuses

00:00:47,840 --> 00:00:54,000
on the vector representation of the data

00:00:51,760 --> 00:00:56,160
that is stored within it and those

00:00:54,000 --> 00:00:59,199
factory representations are given to it

00:00:56,160 --> 00:01:01,920
based on machine learning models

00:00:59,199 --> 00:01:04,080
and the simplest way to show you the

00:01:01,920 --> 00:01:06,479
difference between a traditional search

00:01:04,080 --> 00:01:09,600
engine and a vector search engine

00:01:06,479 --> 00:01:10,560
is the following so let's look at this

00:01:09,600 --> 00:01:12,640
data object

00:01:10,560 --> 00:01:14,479
so we have here data object representing

00:01:12,640 --> 00:01:16,640
a in this case

00:01:14,479 --> 00:01:18,159
cybersecurity threat group so we have

00:01:16,640 --> 00:01:19,520
here fin6

00:01:18,159 --> 00:01:21,200
and then you see like a group that has

00:01:19,520 --> 00:01:22,320
focused on an attacking point of sales

00:01:21,200 --> 00:01:24,640
devices

00:01:22,320 --> 00:01:26,080
well if he would store this data object

00:01:24,640 --> 00:01:28,080
in a traditional search

00:01:26,080 --> 00:01:29,920
engine and we want to retrieve it and

00:01:28,080 --> 00:01:30,640
now we say for example we are looking

00:01:29,920 --> 00:01:33,680
for something

00:01:30,640 --> 00:01:35,840
related to finance hardware attacks

00:01:33,680 --> 00:01:38,320
then it will not find anything because

00:01:35,840 --> 00:01:42,240
we know that fin6 is related to these

00:01:38,320 --> 00:01:45,119
this query but well the um

00:01:42,240 --> 00:01:46,640
the exact keywords are not matched in

00:01:45,119 --> 00:01:48,960
this

00:01:46,640 --> 00:01:51,200
data object however when you do this in

00:01:48,960 --> 00:01:53,840
a vector search engine like we've yet

00:01:51,200 --> 00:01:55,439
it will actually return fin6 because it

00:01:53,840 --> 00:01:57,840
know that there's a relation between

00:01:55,439 --> 00:02:01,040
finance hardware and attack

00:01:57,840 --> 00:02:03,360
based on a group that focuses on

00:02:01,040 --> 00:02:05,680
attacking point of sales devices

00:02:03,360 --> 00:02:07,280
and that is the most important added

00:02:05,680 --> 00:02:10,399
value of these

00:02:07,280 --> 00:02:13,200
vector search engines like we've yet and

00:02:10,399 --> 00:02:15,440
as you will see in the demo a lot of new

00:02:13,200 --> 00:02:17,680
use cases come from this

00:02:15,440 --> 00:02:19,680
so when it comes to the cyber security

00:02:17,680 --> 00:02:21,280
domain our main focus

00:02:19,680 --> 00:02:23,680
or our main question that we want to

00:02:21,280 --> 00:02:25,120
answer is like can we go from like a

00:02:23,680 --> 00:02:28,160
rule-based approach to a

00:02:25,120 --> 00:02:30,800
prediction-based approach

00:02:28,160 --> 00:02:31,680
so a little bit about the core features

00:02:30,800 --> 00:02:33,280
so with that

00:02:31,680 --> 00:02:35,599
two core features the first one is

00:02:33,280 --> 00:02:38,480
search or as we like to say

00:02:35,599 --> 00:02:40,000
search and discovery in your data so the

00:02:38,480 --> 00:02:42,239
demo that i'm going to show you is

00:02:40,000 --> 00:02:45,120
completely focusing on search and how to

00:02:42,239 --> 00:02:47,440
find things using we've yet but on the

00:02:45,120 --> 00:02:48,720
other hand we also have classification

00:02:47,440 --> 00:02:50,959
and the easiest way to think of

00:02:48,720 --> 00:02:53,200
classification is context is that we've

00:02:50,959 --> 00:02:54,480
yet can automatically make relations in

00:02:53,200 --> 00:02:56,800
your data sets

00:02:54,480 --> 00:02:58,159
so where search there's some form of

00:02:56,800 --> 00:03:00,800
human or machine

00:02:58,159 --> 00:03:02,400
input to get to insights with

00:03:00,800 --> 00:03:04,480
classification you can ask we've yet to

00:03:02,400 --> 00:03:07,599
do that automatically

00:03:04,480 --> 00:03:08,319
then we have some other well unique

00:03:07,599 --> 00:03:11,040
features from

00:03:08,319 --> 00:03:12,720
eva's so first the modules as i just

00:03:11,040 --> 00:03:14,560
described

00:03:12,720 --> 00:03:17,360
we have a bunch of them if you have

00:03:14,560 --> 00:03:20,879
ideas for modules we're more than

00:03:17,360 --> 00:03:21,920
happy to hear um you know how you think

00:03:20,879 --> 00:03:24,239
we can

00:03:21,920 --> 00:03:25,519
improve vva's module ecosystem by the

00:03:24,239 --> 00:03:29,200
way you can also create your

00:03:25,519 --> 00:03:29,680
own modules then we support any media

00:03:29,200 --> 00:03:33,040
type

00:03:29,680 --> 00:03:35,599
so we've had not only the vector

00:03:33,040 --> 00:03:37,760
representations that we've yet can store

00:03:35,599 --> 00:03:38,799
but also the data objects can be of any

00:03:37,760 --> 00:03:42,000
media type

00:03:38,799 --> 00:03:45,280
so within one single vp8 you can store

00:03:42,000 --> 00:03:47,360
textual text objects and text effect

00:03:45,280 --> 00:03:51,360
vectors to represent these data objects

00:03:47,360 --> 00:03:54,400
but also for example images or video

00:03:51,360 --> 00:03:57,680
we've hit itself has a graph like

00:03:54,400 --> 00:04:01,040
a data model so what you will see when

00:03:57,680 --> 00:04:04,400
i show the demo to you we use graphql

00:04:01,040 --> 00:04:06,799
graphql is used to

00:04:04,400 --> 00:04:08,159
not only do the machine learning

00:04:06,799 --> 00:04:10,959
matching but also

00:04:08,159 --> 00:04:13,840
to make traditional graph relations and

00:04:10,959 --> 00:04:15,760
most importantly to mix and match them

00:04:13,840 --> 00:04:18,320
and then of course we focus on we

00:04:15,760 --> 00:04:20,000
being scalable and fast and we're

00:04:18,320 --> 00:04:21,199
constantly updating and improving we've

00:04:20,000 --> 00:04:24,320
yet so with every

00:04:21,199 --> 00:04:26,720
release we get a bit more a bit more

00:04:24,320 --> 00:04:30,639
faster and a bit more scalable

00:04:26,720 --> 00:04:33,680
so when it comes to the um the vertical

00:04:30,639 --> 00:04:36,720
of cyber security um

00:04:33,680 --> 00:04:38,080
uh we mostly focus on intelligent threat

00:04:36,720 --> 00:04:41,199
analysis

00:04:38,080 --> 00:04:42,560
um meaning that we we've had focuses on

00:04:41,199 --> 00:04:44,639
structured data

00:04:42,560 --> 00:04:46,479
so that can be descriptions text

00:04:44,639 --> 00:04:51,040
documents or those kind of things

00:04:46,479 --> 00:04:53,840
that are related to a threat analysis

00:04:51,040 --> 00:04:54,840
so for this demo we're using the metro

00:04:53,840 --> 00:04:57,840
tech

00:04:54,840 --> 00:05:00,000
framework for the simple reason that it

00:04:57,840 --> 00:05:00,479
contains a lot of graph relations but

00:05:00,000 --> 00:05:04,320
also

00:05:00,479 --> 00:05:04,320
a lot of unstructured data

00:05:04,880 --> 00:05:11,120
we use a vva transformers module

00:05:08,960 --> 00:05:12,720
which is fine to fine-tune with cyber

00:05:11,120 --> 00:05:15,919
security data

00:05:12,720 --> 00:05:19,680
uh in this case we use sentence birth

00:05:15,919 --> 00:05:23,039
and that brings me to the demo

00:05:19,680 --> 00:05:24,960
so when we are in the we've hit console

00:05:23,039 --> 00:05:27,600
we get an interface where we can use

00:05:24,960 --> 00:05:31,919
graphql to query true vp8

00:05:27,600 --> 00:05:33,120
and the setup how ev8 works is actually

00:05:31,919 --> 00:05:36,880
very simple so

00:05:33,120 --> 00:05:40,240
um with it has three core functions

00:05:36,880 --> 00:05:43,840
meaning that's aggregate that is

00:05:40,240 --> 00:05:47,039
explore and that is get

00:05:43,840 --> 00:05:49,520
and aggregate is used to

00:05:47,039 --> 00:05:51,199
well get an as an aggregate function so

00:05:49,520 --> 00:05:53,919
for example how many objects

00:05:51,199 --> 00:05:56,000
are stored in wv8 explorer is used to

00:05:53,919 --> 00:05:59,280
search for the complete vector space

00:05:56,000 --> 00:06:02,000
but get is used to make a mix of

00:05:59,280 --> 00:06:03,199
vector searches and graph searches and

00:06:02,000 --> 00:06:04,160
that's what we're going to use for the

00:06:03,199 --> 00:06:08,160
demo

00:06:04,160 --> 00:06:08,160
inside vv8 you have a

00:06:08,960 --> 00:06:12,800
graph like data model so that means that

00:06:11,680 --> 00:06:15,600
you can create

00:06:12,800 --> 00:06:17,600
any class and any property so in this

00:06:15,600 --> 00:06:19,680
case our class and property structure is

00:06:17,600 --> 00:06:22,560
based on the meteor attack framework

00:06:19,680 --> 00:06:23,600
so let's take a look at the first one so

00:06:22,560 --> 00:06:26,319
let's take a look at

00:06:23,600 --> 00:06:27,600
thread groups so the thread groups have

00:06:26,319 --> 00:06:29,919
a name

00:06:27,600 --> 00:06:31,840
and this very simple query says like get

00:06:29,919 --> 00:06:34,400
me thread groups and show them

00:06:31,840 --> 00:06:36,160
show me their names so running this

00:06:34,400 --> 00:06:38,240
query you see a bunch of

00:06:36,160 --> 00:06:40,400
thread groups they're not organized in

00:06:38,240 --> 00:06:44,400
any way they're just randomly shown

00:06:40,400 --> 00:06:47,039
based on this query we can also go

00:06:44,400 --> 00:06:49,280
add properties so we can say for example

00:06:47,039 --> 00:06:50,880
say like a show the description

00:06:49,280 --> 00:06:53,520
and there you see for example copy

00:06:50,880 --> 00:06:53,840
kittens you see the the description of

00:06:53,520 --> 00:06:56,880
the

00:06:53,840 --> 00:06:57,680
the thread group so let's go one step

00:06:56,880 --> 00:06:59,759
back

00:06:57,680 --> 00:07:00,880
now what we now can do is that we can

00:06:59,759 --> 00:07:03,199
enable the

00:07:00,880 --> 00:07:05,919
machine learning model and in this we've

00:07:03,199 --> 00:07:09,199
had instance we have two modules enabled

00:07:05,919 --> 00:07:11,440
the factorization module and the q and a

00:07:09,199 --> 00:07:12,560
modules so let's start by looking at the

00:07:11,440 --> 00:07:14,880
from the perspective

00:07:12,560 --> 00:07:16,400
of the q a module so what we can do is

00:07:14,880 --> 00:07:17,039
that we can say well we want to ask a

00:07:16,400 --> 00:07:19,840
question

00:07:17,039 --> 00:07:20,639
then of course we have the question and

00:07:19,840 --> 00:07:23,759
um

00:07:20,639 --> 00:07:27,039
the question that we want to ask is

00:07:23,759 --> 00:07:30,560
who targeted

00:07:27,039 --> 00:07:34,319
the government in the

00:07:30,560 --> 00:07:34,960
middle east make an array that's

00:07:34,319 --> 00:07:38,319
incorrect

00:07:34,960 --> 00:07:40,240
should like do it like this we can se

00:07:38,319 --> 00:07:41,759
the properties that we want to search

00:07:40,240 --> 00:07:43,280
through and that is something we want to

00:07:41,759 --> 00:07:46,080
do based on the

00:07:43,280 --> 00:07:48,240
descriptions and then we have so-called

00:07:46,080 --> 00:07:50,400
underscore properties

00:07:48,240 --> 00:07:51,680
additional or we can say well this is

00:07:50,400 --> 00:07:53,919
where we want to see the

00:07:51,680 --> 00:07:55,039
answer to the question and we want to

00:07:53,919 --> 00:07:57,039
see the result so

00:07:55,039 --> 00:07:58,800
very simple question a query where we

00:07:57,039 --> 00:08:00,479
say based on these

00:07:58,800 --> 00:08:02,240
thread groups search for the

00:08:00,479 --> 00:08:04,000
descriptions and show us

00:08:02,240 --> 00:08:07,280
who targeted the government in the

00:08:04,000 --> 00:08:10,240
middle east so let's run this query

00:08:07,280 --> 00:08:12,879
so here we'll find the answer oral rig

00:08:10,240 --> 00:08:13,840
what we now can do with uh with y8 is

00:08:12,879 --> 00:08:16,960
that we can

00:08:13,840 --> 00:08:19,120
say like well for example also include

00:08:16,960 --> 00:08:20,639
the name of this thread the description

00:08:19,120 --> 00:08:21,919
of this thread group

00:08:20,639 --> 00:08:24,800
and then you see that the name is

00:08:21,919 --> 00:08:27,599
actually also oil rig

00:08:24,800 --> 00:08:28,960
but if you're also gonna look at um uh

00:08:27,599 --> 00:08:30,800
the description

00:08:28,960 --> 00:08:32,800
uh then we see that actually inside the

00:08:30,800 --> 00:08:36,080
description there's more information

00:08:32,800 --> 00:08:36,560
about oil rig so let's go one step

00:08:36,080 --> 00:08:40,479
deeper

00:08:36,560 --> 00:08:44,399
so let's say like uh what kind of

00:08:40,479 --> 00:08:47,680
attacks does all rig

00:08:44,399 --> 00:08:50,240
use and we find that

00:08:47,680 --> 00:08:53,040
in the document white ulric the answer

00:08:50,240 --> 00:08:55,120
is found which is supply chain attacks

00:08:53,040 --> 00:08:56,480
um we've now been looking at the graph

00:08:55,120 --> 00:08:59,279
from the level of the

00:08:56,480 --> 00:08:59,839
thread group so let's take a completely

00:08:59,279 --> 00:09:02,000
different

00:08:59,839 --> 00:09:03,680
approach and use the supply chain

00:09:02,000 --> 00:09:05,760
effects in there

00:09:03,680 --> 00:09:08,000
so let's start from the perspective of

00:09:05,760 --> 00:09:10,480
the attack technique

00:09:08,000 --> 00:09:12,640
and so if you now also say i have this

00:09:10,480 --> 00:09:14,560
simple query say where we say get

00:09:12,640 --> 00:09:15,920
attack techniques and show me the names

00:09:14,560 --> 00:09:17,839
and if we run this query

00:09:15,920 --> 00:09:19,600
we just get a bunch of attack techniques

00:09:17,839 --> 00:09:21,120
coming from the metro attack framework

00:09:19,600 --> 00:09:22,000
now when we hit we can do question

00:09:21,120 --> 00:09:26,240
answering but we can

00:09:22,000 --> 00:09:29,120
also do a near searches so we can also

00:09:26,240 --> 00:09:30,399
search for neighboring concepts so let's

00:09:29,120 --> 00:09:32,560
say for example here we have

00:09:30,399 --> 00:09:33,600
near text and we're going to look for

00:09:32,560 --> 00:09:35,920
concepts and then

00:09:33,600 --> 00:09:38,000
for the concepts let's look at the

00:09:35,920 --> 00:09:40,959
supply chain attacks

00:09:38,000 --> 00:09:41,760
and let's say for this query limit that

00:09:40,959 --> 00:09:46,000
to the first

00:09:41,760 --> 00:09:47,839
10 results so if i now run these queries

00:09:46,000 --> 00:09:49,680
then with supply chain attacks then the

00:09:47,839 --> 00:09:51,839
most neighboring concepts are of course

00:09:49,680 --> 00:09:53,519
well the supply chain compromise

00:09:51,839 --> 00:09:56,959
the supply chain compromise or the

00:09:53,519 --> 00:10:00,880
compromising hardware supply chain etc

00:09:56,959 --> 00:10:04,800
so a port was opened

00:10:00,880 --> 00:10:07,839
at the hosts

00:10:04,800 --> 00:10:08,560
firewall so same query but we're now

00:10:07,839 --> 00:10:12,240
going to say

00:10:08,560 --> 00:10:15,760
well inside the the attack

00:10:12,240 --> 00:10:18,480
they somehow opened uh

00:10:15,760 --> 00:10:19,600
they opened a port at the hostess

00:10:18,480 --> 00:10:22,560
firewall

00:10:19,600 --> 00:10:24,720
we want to be at least 80 certain and we

00:10:22,560 --> 00:10:27,200
want immediately shown what the known

00:10:24,720 --> 00:10:30,240
mitigations are for these solutions

00:10:27,200 --> 00:10:32,320
and we want to see names for these types

00:10:30,240 --> 00:10:33,760
of attacks

00:10:32,320 --> 00:10:36,240
so thank you very much for listening my

00:10:33,760 --> 00:10:37,920
name is bob fallout feel free to reach

00:10:36,240 --> 00:10:40,079
out to me on bob at seminar technology

00:10:37,920 --> 00:10:41,680
if you want to learn more about how bv8

00:10:40,079 --> 00:10:45,279
can help

00:10:41,680 --> 00:10:47,560
in your domain or with your

00:10:45,279 --> 00:10:49,440
the challenges that you have on

00:10:47,560 --> 00:10:51,040
semi.technology you can also find our

00:10:49,440 --> 00:10:53,360
open core software so you can play

00:10:51,040 --> 00:10:55,040
around with it you can try it out

00:10:53,360 --> 00:10:57,279
so i'm looking very much forward to

00:10:55,040 --> 00:10:58,480
hearing from you and hopefully we can

00:10:57,279 --> 00:11:01,839
help you

00:10:58,480 --> 00:11:03,279
taking the next step in intelligent

00:11:01,839 --> 00:11:07,440
threat analysis

00:11:03,279 --> 00:11:07,440

YouTube URL: https://www.youtube.com/watch?v=4sWiCY1fMiY


