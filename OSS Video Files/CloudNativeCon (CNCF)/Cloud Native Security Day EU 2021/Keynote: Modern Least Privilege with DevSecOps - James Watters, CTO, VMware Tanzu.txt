Title: Keynote: Modern Least Privilege with DevSecOps - James Watters, CTO, VMware Tanzu
Publication date: 2021-05-04
Playlist: Cloud Native Security Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Keynote: Modern Least Privilege with DevSecOps - James Watters, CTO, VMware Tanzu
Captions: 
	00:00:00,080 --> 00:00:02,800
thanks for joining me from san francisco

00:00:01,280 --> 00:00:03,439
today i'm on a zoom i wish i was in a

00:00:02,800 --> 00:00:05,520
room

00:00:03,439 --> 00:00:06,799
uh but here we are and uh i appreciate

00:00:05,520 --> 00:00:08,320
any feedback and some of these ideas i'm

00:00:06,799 --> 00:00:09,679
just starting to scratch them down

00:00:08,320 --> 00:00:11,120
and uh hopefully we'll both have a good

00:00:09,679 --> 00:00:12,880
time kicking this around so hit me on

00:00:11,120 --> 00:00:14,320
twitter i'm at waters james if you watch

00:00:12,880 --> 00:00:15,599
this let me know you saw it

00:00:14,320 --> 00:00:17,520
let me know what you think thanks so

00:00:15,599 --> 00:00:20,640
much we'll keep it fun like that

00:00:17,520 --> 00:00:23,600
uh next slide here

00:00:20,640 --> 00:00:25,359
so everywhere i go over zoom uh today

00:00:23,600 --> 00:00:26,720
you know i'm running into more and more

00:00:25,359 --> 00:00:28,480
teams that consider themselves

00:00:26,720 --> 00:00:29,760
essentially the platform teams

00:00:28,480 --> 00:00:31,519
of these organizations and they're not

00:00:29,760 --> 00:00:33,680
pure infrastructure teams

00:00:31,519 --> 00:00:35,520
um and they're not uh you know if you

00:00:33,680 --> 00:00:38,000
were pure application teams

00:00:35,520 --> 00:00:39,280
their their you know reason for being is

00:00:38,000 --> 00:00:41,520
that they're connecting

00:00:39,280 --> 00:00:42,640
developers to infrastructure in a secure

00:00:41,520 --> 00:00:45,039
pipeline

00:00:42,640 --> 00:00:47,760
um typically using kubernetes as the

00:00:45,039 --> 00:00:50,079
final infrastructure api

00:00:47,760 --> 00:00:51,680
and i'm seeing you know a convergence in

00:00:50,079 --> 00:00:53,600
enterprises at least where security has

00:00:51,680 --> 00:00:54,960
always been a paramount value

00:00:53,600 --> 00:00:56,320
essentially you know the definition of

00:00:54,960 --> 00:00:57,360
an enterprise is you become an

00:00:56,320 --> 00:00:58,719
institution

00:00:57,360 --> 00:01:00,480
and the first job of an institution is

00:00:58,719 --> 00:01:01,359
survivability sustainability in some

00:01:00,480 --> 00:01:03,840
sense

00:01:01,359 --> 00:01:05,519
uh and so this focus on devsecops has

00:01:03,840 --> 00:01:06,080
been really strong in these platform

00:01:05,519 --> 00:01:07,600
teams

00:01:06,080 --> 00:01:09,119
and i'd say about 60 of the

00:01:07,600 --> 00:01:11,840
organizations i mean there's now someone

00:01:09,119 --> 00:01:12,880
carrying a director of devsecops title

00:01:11,840 --> 00:01:15,840
so in some ways that's

00:01:12,880 --> 00:01:16,960
a new and exciting thing um and i think

00:01:15,840 --> 00:01:19,680
it reflects that

00:01:16,960 --> 00:01:21,520
organizational patterns have changed um

00:01:19,680 --> 00:01:23,600
our security culture and methods

00:01:21,520 --> 00:01:25,360
are evolving to meet modern applications

00:01:23,600 --> 00:01:26,240
we want the continuous delivery of

00:01:25,360 --> 00:01:28,320
features

00:01:26,240 --> 00:01:31,439
we want to be able to respond to a user

00:01:28,320 --> 00:01:34,000
need in days or under a week

00:01:31,439 --> 00:01:34,640
versus on a more waterfall six-month

00:01:34,000 --> 00:01:37,040
three-month

00:01:34,640 --> 00:01:38,079
two-month schedule and we'd like to see

00:01:37,040 --> 00:01:39,520
those changes

00:01:38,079 --> 00:01:41,200
you know make their way to production

00:01:39,520 --> 00:01:42,720
for feedback to the developers as

00:01:41,200 --> 00:01:44,000
rapidly as possible

00:01:42,720 --> 00:01:46,159
i'm going to talk a little bit about how

00:01:44,000 --> 00:01:48,079
i think security is part of devsecops is

00:01:46,159 --> 00:01:49,600
really just coming along for that ride

00:01:48,079 --> 00:01:51,680
and how in the same way that as an

00:01:49,600 --> 00:01:53,520
organization wants to get a feature to

00:01:51,680 --> 00:01:54,960
production as fast as possible

00:01:53,520 --> 00:01:56,320
if there's a vulnerability discovered

00:01:54,960 --> 00:01:58,159
somewhere in the world as opposed to

00:01:56,320 --> 00:01:59,759
there being meetings about it

00:01:58,159 --> 00:02:01,280
i think our modern cloud native software

00:01:59,759 --> 00:02:03,040
systems need to be responsive

00:02:01,280 --> 00:02:04,719
and almost at the moment of that event

00:02:03,040 --> 00:02:06,320
of that vulnerability occurring

00:02:04,719 --> 00:02:07,759
starts to kick off a series of processes

00:02:06,320 --> 00:02:09,119
and controller reconciler patterns that

00:02:07,759 --> 00:02:09,920
bring it to production as rapidly as

00:02:09,119 --> 00:02:11,840
possible

00:02:09,920 --> 00:02:13,680
so this is a time of great adaptation to

00:02:11,840 --> 00:02:16,000
this era of microservices continuous

00:02:13,680 --> 00:02:19,599
delivery containerization

00:02:16,000 --> 00:02:20,480
um and there's a ever growing focus on

00:02:19,599 --> 00:02:22,480
concepts

00:02:20,480 --> 00:02:24,480
of things like xero trust now that we've

00:02:22,480 --> 00:02:26,000
got these distributed microservices

00:02:24,480 --> 00:02:27,760
and you're suddenly adding all of this

00:02:26,000 --> 00:02:29,760
network networking into the core

00:02:27,760 --> 00:02:31,120
business logic of an application

00:02:29,760 --> 00:02:33,760
well how do we build our application

00:02:31,120 --> 00:02:34,560
level networks uh before you know a java

00:02:33,760 --> 00:02:37,920
program

00:02:34,560 --> 00:02:39,280
1200 functions running and one jvm um

00:02:37,920 --> 00:02:40,480
you understood the privilege model of

00:02:39,280 --> 00:02:41,680
that application because it was all

00:02:40,480 --> 00:02:43,200
inherently one application but now

00:02:41,680 --> 00:02:45,200
you've introduced networking

00:02:43,200 --> 00:02:47,200
and so the idea of the zero trust

00:02:45,200 --> 00:02:48,959
heavily identity centric network has

00:02:47,200 --> 00:02:51,040
come into play and in some ways that

00:02:48,959 --> 00:02:53,519
feels like a new fresh take

00:02:51,040 --> 00:02:54,319
on how we should do networking but in

00:02:53,519 --> 00:02:56,080
some sense

00:02:54,319 --> 00:02:57,840
i think that's also not true and we've

00:02:56,080 --> 00:02:59,519
been on this trend of least privileged

00:02:57,840 --> 00:03:02,560
for a long time

00:02:59,519 --> 00:03:04,480
in fact if you go back to you know acm

00:03:02,560 --> 00:03:06,480
journals in the early 70s

00:03:04,480 --> 00:03:07,920
there were people articulating this idea

00:03:06,480 --> 00:03:09,360
of least privilege then

00:03:07,920 --> 00:03:11,200
the idea that every program and every

00:03:09,360 --> 00:03:12,319
privileged user of the system

00:03:11,200 --> 00:03:14,640
should operate the least amount of

00:03:12,319 --> 00:03:16,319
privilege necessary to complete the job

00:03:14,640 --> 00:03:18,159
and i think while in some sense the

00:03:16,319 --> 00:03:19,360
internet was really not about least

00:03:18,159 --> 00:03:20,959
privilege because the internet was built

00:03:19,360 --> 00:03:23,760
for collaboration and sharing like

00:03:20,959 --> 00:03:24,640
http smtp these were protocols really

00:03:23,760 --> 00:03:26,319
meant to say

00:03:24,640 --> 00:03:28,480
here's some content i want to share with

00:03:26,319 --> 00:03:30,239
you um and that's a great quote from the

00:03:28,480 --> 00:03:30,640
woman who founded yubikey where she said

00:03:30,239 --> 00:03:33,599
hey

00:03:30,640 --> 00:03:35,040
we're now trying to retrofit uh you know

00:03:33,599 --> 00:03:36,560
kind of identity and access management

00:03:35,040 --> 00:03:38,640
and controls into an organ

00:03:36,560 --> 00:03:40,799
into a series of protocols built for

00:03:38,640 --> 00:03:43,200
sharing and collaboration first

00:03:40,799 --> 00:03:44,720
but if you think of the cloud really as

00:03:43,200 --> 00:03:47,280
a modern

00:03:44,720 --> 00:03:48,959
at scale continuously delivered model of

00:03:47,280 --> 00:03:49,840
what the mainframe really was providing

00:03:48,959 --> 00:03:51,760
in the 70s

00:03:49,840 --> 00:03:52,959
this articulated articulation of least

00:03:51,760 --> 00:03:54,159
privilege starts to make sense

00:03:52,959 --> 00:03:56,159
and you can start to look at some of the

00:03:54,159 --> 00:03:57,840
zero trust networking devsecops a lot of

00:03:56,159 --> 00:03:59,680
these modern security practices

00:03:57,840 --> 00:04:00,879
as bringing cloud computing back into

00:03:59,680 --> 00:04:03,680
that uh

00:04:00,879 --> 00:04:03,680
era of design

00:04:04,480 --> 00:04:07,439
and i think as i think back over the

00:04:06,080 --> 00:04:08,400
last 10 years that i've worked in

00:04:07,439 --> 00:04:11,439
computing

00:04:08,400 --> 00:04:13,519
i've always seen security and especially

00:04:11,439 --> 00:04:14,720
designs of enterprise systems that favor

00:04:13,519 --> 00:04:17,280
least privilege

00:04:14,720 --> 00:04:18,400
to be highly attractive and i like to

00:04:17,280 --> 00:04:21,600
think about this quote

00:04:18,400 --> 00:04:22,880
uh from jeff bezos where he basically

00:04:21,600 --> 00:04:24,720
articulates that everyone talks about

00:04:22,880 --> 00:04:26,320
what will change over the next 10 years

00:04:24,720 --> 00:04:28,400
but what you can really build on is what

00:04:26,320 --> 00:04:29,759
won't change and i think

00:04:28,400 --> 00:04:30,800
as i think over the last 10 years that

00:04:29,759 --> 00:04:31,759
i've been working on cloud native

00:04:30,800 --> 00:04:33,520
systems

00:04:31,759 --> 00:04:34,560
the idea of least privilege and high

00:04:33,520 --> 00:04:36,320
security has been something i

00:04:34,560 --> 00:04:37,759
consistently bet on uh

00:04:36,320 --> 00:04:39,840
and our organization has consistently

00:04:37,759 --> 00:04:42,880
bet on successfully

00:04:39,840 --> 00:04:45,280
we took uh you know articulate it more

00:04:42,880 --> 00:04:47,360
we took one bank from you know on

00:04:45,280 --> 00:04:49,440
average a six-month wait for patching

00:04:47,360 --> 00:04:51,120
um of their core systems and platforms

00:04:49,440 --> 00:04:52,720
to about an every three-day pace because

00:04:51,120 --> 00:04:54,080
we made it a first-class object of the

00:04:52,720 --> 00:04:55,440
system they were using of the platform

00:04:54,080 --> 00:04:57,199
they were using

00:04:55,440 --> 00:04:58,880
and they were so excited about it the

00:04:57,199 --> 00:05:00,560
cio is excited about it everyone was

00:04:58,880 --> 00:05:01,919
excited about it

00:05:00,560 --> 00:05:04,000
and someone asked me once they said well

00:05:01,919 --> 00:05:05,280
you know how did you know to design for

00:05:04,000 --> 00:05:06,479
security how did you know to make

00:05:05,280 --> 00:05:08,160
security a focus

00:05:06,479 --> 00:05:09,520
of that microservices platform and

00:05:08,160 --> 00:05:11,360
actually was pretty inarticulate at the

00:05:09,520 --> 00:05:11,600
time it was almost like a fish and water

00:05:11,360 --> 00:05:13,120
i

00:05:11,600 --> 00:05:14,960
had been so close to enterprises that

00:05:13,120 --> 00:05:16,960
always favored this model that i wasn't

00:05:14,960 --> 00:05:19,520
able to be crisp about why

00:05:16,960 --> 00:05:21,280
um but i think this idea of least

00:05:19,520 --> 00:05:23,440
privilege coming to cloud native

00:05:21,280 --> 00:05:24,880
is an important articulation of why

00:05:23,440 --> 00:05:26,960
enterprises really want to bet on this

00:05:24,880 --> 00:05:28,800
for the next 10 years as well

00:05:26,960 --> 00:05:30,880
and what we saw with the first

00:05:28,800 --> 00:05:33,039
generation of our cloud native designs

00:05:30,880 --> 00:05:35,520
was that we were able to articulate and

00:05:33,039 --> 00:05:37,360
expose the right set of interfaces

00:05:35,520 --> 00:05:38,960
such that we achieved what we called at

00:05:37,360 --> 00:05:40,160
the time the three r's and those are

00:05:38,960 --> 00:05:41,440
still really important i think for the

00:05:40,160 --> 00:05:42,960
cloud native computer community to

00:05:41,440 --> 00:05:44,240
design around

00:05:42,960 --> 00:05:46,639
i'll give you an example of the three

00:05:44,240 --> 00:05:49,120
r's in terms of repair

00:05:46,639 --> 00:05:50,080
if a cve came out we would automatically

00:05:49,120 --> 00:05:52,560
do a

00:05:50,080 --> 00:05:54,160
rolling update of that system so one

00:05:52,560 --> 00:05:56,240
node at a time would be replaced

00:05:54,160 --> 00:05:58,000
declaratively a manifest would inspect

00:05:56,240 --> 00:05:59,600
version one versus version two see the

00:05:58,000 --> 00:06:01,280
diff and apply the diff

00:05:59,600 --> 00:06:02,639
and we did that the entire way from the

00:06:01,280 --> 00:06:04,080
operating system

00:06:02,639 --> 00:06:06,479
up to some of the application runtime

00:06:04,080 --> 00:06:08,400
vulnerabilities so anytime a repair

00:06:06,479 --> 00:06:10,080
you know event hit the system it would

00:06:08,400 --> 00:06:12,240
be replaced

00:06:10,080 --> 00:06:14,319
we would as part of that repair also

00:06:12,240 --> 00:06:16,560
recreate those immutable images

00:06:14,319 --> 00:06:18,080
from scratch and so organizations were

00:06:16,560 --> 00:06:19,360
much more comfortable that the platform

00:06:18,080 --> 00:06:20,880
they were consuming

00:06:19,360 --> 00:06:22,960
was free of malware because we were

00:06:20,880 --> 00:06:25,199
always rebuilding from sign source

00:06:22,960 --> 00:06:26,720
and people you know as high up as cios

00:06:25,199 --> 00:06:28,240
and major banking organizations now

00:06:26,720 --> 00:06:29,120
swear by this repaving model where

00:06:28,240 --> 00:06:30,960
they're like

00:06:29,120 --> 00:06:32,319
every week we rebuild every node in the

00:06:30,960 --> 00:06:33,680
system and i think this is a really

00:06:32,319 --> 00:06:36,639
important part of it of

00:06:33,680 --> 00:06:38,160
modern application platform security

00:06:36,639 --> 00:06:40,319
designs

00:06:38,160 --> 00:06:41,919
we'd also build as much as possible of

00:06:40,319 --> 00:06:43,520
you know the controls right into the

00:06:41,919 --> 00:06:45,680
standard developer experience

00:06:43,520 --> 00:06:47,280
so as you went to execute a pipeline say

00:06:45,680 --> 00:06:49,280
10 out of 12 controls were

00:06:47,280 --> 00:06:50,960
embedded in the process already so while

00:06:49,280 --> 00:06:52,240
the developer might be responsible for

00:06:50,960 --> 00:06:53,840
and you know ensuring some of the

00:06:52,240 --> 00:06:55,520
controls were still met a lot of them

00:06:53,840 --> 00:06:56,639
were automated and part of the developer

00:06:55,520 --> 00:06:58,240
experience

00:06:56,639 --> 00:06:59,840
and finally you know if anyone who's

00:06:58,240 --> 00:07:01,120
seen some of the postmortem on the

00:06:59,840 --> 00:07:03,039
equifax study knows that

00:07:01,120 --> 00:07:04,160
you know letting uh secret space

00:07:03,039 --> 00:07:06,240
credentials

00:07:04,160 --> 00:07:07,599
uh languish in the system or be exposed

00:07:06,240 --> 00:07:10,240
in plain text or

00:07:07,599 --> 00:07:10,880
uh persist is a really dangerous thing a

00:07:10,240 --> 00:07:12,880
lot of the

00:07:10,880 --> 00:07:14,240
exploits we see come come down to the

00:07:12,880 --> 00:07:15,280
acquisition and exploitation and

00:07:14,240 --> 00:07:16,240
privilege escalation of these

00:07:15,280 --> 00:07:18,160
credentials

00:07:16,240 --> 00:07:20,000
so we really you know fashioned our

00:07:18,160 --> 00:07:21,599
platform after idea that constantly

00:07:20,000 --> 00:07:23,120
anytime a node would be touched we could

00:07:21,599 --> 00:07:24,000
rotate the credentials so these were the

00:07:23,120 --> 00:07:25,599
three r's

00:07:24,000 --> 00:07:27,840
and there was incredible demand almost

00:07:25,599 --> 00:07:29,520
that jeff bezos like limitless demand to

00:07:27,840 --> 00:07:30,160
go as fast as possible in those three

00:07:29,520 --> 00:07:31,680
r's

00:07:30,160 --> 00:07:33,440
just like an amazon customer would

00:07:31,680 --> 00:07:34,800
rather have everything they order as a

00:07:33,440 --> 00:07:37,440
consumer to be cheaper

00:07:34,800 --> 00:07:39,039
and sooner enterprises really like this

00:07:37,440 --> 00:07:41,120
model of least privilege

00:07:39,039 --> 00:07:42,319
in terms of what any node in the system

00:07:41,120 --> 00:07:44,000
how long it persisted

00:07:42,319 --> 00:07:45,440
how long it kept credentials and how

00:07:44,000 --> 00:07:46,960
long it went without being updated and

00:07:45,440 --> 00:07:48,639
how compliant the pipeline was by

00:07:46,960 --> 00:07:50,560
default

00:07:48,639 --> 00:07:52,639
and i think if we apply some of those

00:07:50,560 --> 00:07:54,000
gen one platform designs to our modern

00:07:52,639 --> 00:07:55,039
systems

00:07:54,000 --> 00:07:57,120
that we're building now as the next

00:07:55,039 --> 00:07:59,199
generation in tanzu i think of the

00:07:57,120 --> 00:08:01,360
checklist sort of like this

00:07:59,199 --> 00:08:02,879
at a baseline of course immutability and

00:08:01,360 --> 00:08:05,599
manifest based deployments

00:08:02,879 --> 00:08:06,000
so that governance um and controls are

00:08:05,599 --> 00:08:09,039
very

00:08:06,000 --> 00:08:10,560
clear and explicit so that's a baseline

00:08:09,039 --> 00:08:12,319
but i don't think it's enough i really

00:08:10,560 --> 00:08:14,800
think this trend towards a high a more

00:08:12,319 --> 00:08:17,199
highly ephemeral system is part of

00:08:14,800 --> 00:08:18,479
modern least privilege i think time has

00:08:17,199 --> 00:08:20,639
entered out as a dimension

00:08:18,479 --> 00:08:22,160
of how long something should even exist

00:08:20,639 --> 00:08:23,680
is almost in a sense part of the

00:08:22,160 --> 00:08:25,599
metaphor of privilege

00:08:23,680 --> 00:08:27,120
the shorter something shorter something

00:08:25,599 --> 00:08:29,599
is uh you know

00:08:27,120 --> 00:08:30,639
available um the less time anyone trying

00:08:29,599 --> 00:08:32,719
to exploit it could

00:08:30,639 --> 00:08:33,919
exercise its privilege and so the idea

00:08:32,719 --> 00:08:36,080
that nodes should be

00:08:33,919 --> 00:08:37,519
rebuilt constantly replicated from sort

00:08:36,080 --> 00:08:40,399
of a sign source model of

00:08:37,519 --> 00:08:42,399
the original intention is important uh

00:08:40,399 --> 00:08:44,560
the identity of that short lived node

00:08:42,399 --> 00:08:46,320
is also important and i think in

00:08:44,560 --> 00:08:48,160
tanzania we're tilting away from this

00:08:46,320 --> 00:08:50,320
idea of these shared secrets

00:08:48,160 --> 00:08:51,279
sort of like the aftermarket secrets you

00:08:50,320 --> 00:08:52,959
know model

00:08:51,279 --> 00:08:54,480
versus more of an inherent strong

00:08:52,959 --> 00:08:57,519
ephemeral identity baked into the

00:08:54,480 --> 00:08:58,640
platform with things like spiffy inspire

00:08:57,519 --> 00:09:00,000
i'm very excited about some of the

00:08:58,640 --> 00:09:01,680
demonstrations i've seen where more of

00:09:00,000 --> 00:09:03,120
an event-driven vulnerability management

00:09:01,680 --> 00:09:05,839
i'll talk a little bit about build packs

00:09:03,120 --> 00:09:07,519
but as a vulnerability is found the

00:09:05,839 --> 00:09:08,080
build pipeline is automatically updated

00:09:07,519 --> 00:09:09,600
in some cases

00:09:08,080 --> 00:09:11,200
the application is automatically updated

00:09:09,600 --> 00:09:13,839
to remove that vulnerability

00:09:11,200 --> 00:09:14,480
so ideally just like that jeff bezos

00:09:13,839 --> 00:09:16,160
statement

00:09:14,480 --> 00:09:17,519
we should be converging to zero time

00:09:16,160 --> 00:09:18,959
between vulnerability discovery and

00:09:17,519 --> 00:09:19,680
vulnerability patching in the system if

00:09:18,959 --> 00:09:21,279
possible

00:09:19,680 --> 00:09:22,880
enterprises are always going to want a

00:09:21,279 --> 00:09:25,279
shorter and shorter time

00:09:22,880 --> 00:09:27,600
between the discovery of a vulnerability

00:09:25,279 --> 00:09:29,279
and the replacement of it in a safe way

00:09:27,600 --> 00:09:31,279
and finally one of the biggest things

00:09:29,279 --> 00:09:32,160
we've seen is this merge of devx and

00:09:31,279 --> 00:09:34,480
control

00:09:32,160 --> 00:09:36,480
is super powerful so by paving the path

00:09:34,480 --> 00:09:37,920
for developers by giving them

00:09:36,480 --> 00:09:39,519
a set of conditions by which they can

00:09:37,920 --> 00:09:41,440
get code to production quickly

00:09:39,519 --> 00:09:43,200
that also meet compliance and security

00:09:41,440 --> 00:09:44,000
needs it's an incredible one plus one

00:09:43,200 --> 00:09:45,760
equals five so see

00:09:44,000 --> 00:09:47,040
these are some of i think the modern

00:09:45,760 --> 00:09:48,240
principles of least privilege that i'm

00:09:47,040 --> 00:09:49,760
going to keep riffing on and

00:09:48,240 --> 00:09:51,680
looking to encourage all of our teams

00:09:49,760 --> 00:09:53,040
building tonsil around

00:09:51,680 --> 00:09:54,640
let me give you some examples of where i

00:09:53,040 --> 00:09:56,000
think this is going to take off and i'll

00:09:54,640 --> 00:09:58,399
close with that

00:09:56,000 --> 00:10:00,000
um i'm super excited about the ephemeral

00:09:58,399 --> 00:10:00,560
node model of k-native that scales to

00:10:00,000 --> 00:10:02,160
zero

00:10:00,560 --> 00:10:04,079
because as you start to articulate an

00:10:02,160 --> 00:10:08,079
application as more of the serverless

00:10:04,079 --> 00:10:09,200
model where you've got an api or a route

00:10:08,079 --> 00:10:11,120
and then you've got a series of

00:10:09,200 --> 00:10:11,839
revisions and you can constantly restart

00:10:11,120 --> 00:10:13,519
that node

00:10:11,839 --> 00:10:15,200
based off of traffic well that gives us

00:10:13,519 --> 00:10:16,880
the opportunity to

00:10:15,200 --> 00:10:19,200
refresh the node to make it more

00:10:16,880 --> 00:10:20,079
ephemeral to make sure this identity is

00:10:19,200 --> 00:10:21,600
short-lived

00:10:20,079 --> 00:10:23,680
so i think building applications that

00:10:21,600 --> 00:10:25,680
fit the serverless canadian model first

00:10:23,680 --> 00:10:27,360
when possible is super exciting and

00:10:25,680 --> 00:10:28,800
we're looking to bring a modern devx the

00:10:27,360 --> 00:10:29,440
whole way to this k-native model and i

00:10:28,800 --> 00:10:31,360
think

00:10:29,440 --> 00:10:32,720
this application pattern this modern

00:10:31,360 --> 00:10:34,640
microservices pattern

00:10:32,720 --> 00:10:36,079
mixed with modern security practices

00:10:34,640 --> 00:10:37,600
together is super powerful

00:10:36,079 --> 00:10:38,800
because it allows that three hours model

00:10:37,600 --> 00:10:40,399
of security to come into the next

00:10:38,800 --> 00:10:42,160
generation of platform designs

00:10:40,399 --> 00:10:43,920
and we can start to say shorter and

00:10:42,160 --> 00:10:45,600
shorter time to lives for all the nodes

00:10:43,920 --> 00:10:49,279
identities secrets

00:10:45,600 --> 00:10:49,279
excess etc on the platform

00:10:49,440 --> 00:10:53,760
we're also going to bring a modern

00:10:51,920 --> 00:10:56,000
software supply chain

00:10:53,760 --> 00:10:57,600
to to the k-native experience so the

00:10:56,000 --> 00:10:58,880
tons of build service and the modern

00:10:57,600 --> 00:11:00,000
software supply chain we're building

00:10:58,880 --> 00:11:01,120
with it let me just give you a quick

00:11:00,000 --> 00:11:02,320
highlight of why i think that's so

00:11:01,120 --> 00:11:04,800
important

00:11:02,320 --> 00:11:06,240
by default a developer should not have

00:11:04,800 --> 00:11:08,160
to craft

00:11:06,240 --> 00:11:10,000
a python microservice or a java

00:11:08,160 --> 00:11:11,839
microservices docker file

00:11:10,000 --> 00:11:14,079
in a sense that's a real violation of

00:11:11,839 --> 00:11:17,279
lease privilege instead of just having

00:11:14,079 --> 00:11:19,680
the uh the the application

00:11:17,279 --> 00:11:20,959
be deriving the docker image through the

00:11:19,680 --> 00:11:21,760
build service the build service runs a

00:11:20,959 --> 00:11:23,600
process and

00:11:21,760 --> 00:11:25,040
build pack called detect compile it

00:11:23,600 --> 00:11:26,240
detects what's in the

00:11:25,040 --> 00:11:28,240
application what it needs and it

00:11:26,240 --> 00:11:30,079
compiles in a safe and secure way that's

00:11:28,240 --> 00:11:31,519
constantly updated for vulnerabilities

00:11:30,079 --> 00:11:33,200
a fresh image and runs that in the

00:11:31,519 --> 00:11:34,959
docker registry of your choice

00:11:33,200 --> 00:11:36,320
to me that's right on this idea of least

00:11:34,959 --> 00:11:37,600
privilege that we're converging more and

00:11:36,320 --> 00:11:38,880
more on throughout the devsecops

00:11:37,600 --> 00:11:40,240
pipeline

00:11:38,880 --> 00:11:42,000
by reducing the privilege of the

00:11:40,240 --> 00:11:44,079
developer themselves

00:11:42,000 --> 00:11:45,120
she no longer is crafting her own custom

00:11:44,079 --> 00:11:46,240
docker image

00:11:45,120 --> 00:11:47,839
and the vulnerabilities are

00:11:46,240 --> 00:11:49,680
automatically updated i think that fits

00:11:47,839 --> 00:11:51,519
that modern model of uh least privilege

00:11:49,680 --> 00:11:53,519
of devsecops so it's super exciting

00:11:51,519 --> 00:11:55,360
we're seeing people almost debate what

00:11:53,519 --> 00:11:57,040
build service is is it a security layer

00:11:55,360 --> 00:11:58,399
or is it a devex later is it a speed

00:11:57,040 --> 00:11:59,120
layer we have some organizations calling

00:11:58,399 --> 00:12:00,399
it all three

00:11:59,120 --> 00:12:01,839
and all three are right and that's that

00:12:00,399 --> 00:12:03,519
magic convergence of developer

00:12:01,839 --> 00:12:04,800
experience and controls

00:12:03,519 --> 00:12:06,320
that i think are made possible through

00:12:04,800 --> 00:12:09,360
this new server-less model of

00:12:06,320 --> 00:12:11,040
applications and platforms

00:12:09,360 --> 00:12:13,200
uh we want to bring that same os

00:12:11,040 --> 00:12:15,120
patching uh speed and alacrity

00:12:13,200 --> 00:12:17,200
uh in a declarative fashion that we had

00:12:15,120 --> 00:12:19,440
in generation one platform designs

00:12:17,200 --> 00:12:20,320
uh to tonzu and to our next generation

00:12:19,440 --> 00:12:22,240
of systems

00:12:20,320 --> 00:12:23,600
and so uh we're working with some of the

00:12:22,240 --> 00:12:25,040
same customers that did that continuous

00:12:23,600 --> 00:12:27,279
rebuild of their operating system

00:12:25,040 --> 00:12:28,720
to bring os management and os update to

00:12:27,279 --> 00:12:29,920
cluster api so now we've got the

00:12:28,720 --> 00:12:31,600
kubernetes native

00:12:29,920 --> 00:12:32,880
cluster api way of articulating

00:12:31,600 --> 00:12:34,000
configurations you've got that

00:12:32,880 --> 00:12:35,920
declarative config

00:12:34,000 --> 00:12:38,160
the os is just baked into it so as the i

00:12:35,920 --> 00:12:39,519
as rolls the node you're rolling the os

00:12:38,160 --> 00:12:41,519
and building the event and alerting

00:12:39,519 --> 00:12:42,320
model around when that os needs updated

00:12:41,519 --> 00:12:44,079
and patched

00:12:42,320 --> 00:12:45,440
uh right into our platform is an

00:12:44,079 --> 00:12:46,720
important part of this modern security

00:12:45,440 --> 00:12:49,600
posture

00:12:46,720 --> 00:12:51,440
so imagine the oneplus one here of a

00:12:49,600 --> 00:12:53,760
k-native style serverless application

00:12:51,440 --> 00:12:55,519
and then a cluster api managed os

00:12:53,760 --> 00:12:57,279
anytime that you want to update that os

00:12:55,519 --> 00:12:58,880
your application is always ready for a

00:12:57,279 --> 00:13:00,000
restart because it's inherently scale

00:12:58,880 --> 00:13:01,839
out scale to zero

00:13:00,000 --> 00:13:03,120
so applying these updates becomes really

00:13:01,839 --> 00:13:04,959
intuitive and proven

00:13:03,120 --> 00:13:07,200
uh operational model for the platform

00:13:04,959 --> 00:13:08,639
team so that devsecops team can say

00:13:07,200 --> 00:13:10,240
if there's a vulnerability in either the

00:13:08,639 --> 00:13:10,639
application in the build pack or in the

00:13:10,240 --> 00:13:12,959
os

00:13:10,639 --> 00:13:14,160
and in kubernetes between cluster api

00:13:12,959 --> 00:13:15,519
and the buildpack model

00:13:14,160 --> 00:13:17,040
we're going to patch that and update

00:13:15,519 --> 00:13:18,800
that immediately and i think we'll see

00:13:17,040 --> 00:13:20,079
that same convergence too as the event

00:13:18,800 --> 00:13:21,360
happens it can be updated

00:13:20,079 --> 00:13:23,040
and i think that's really this

00:13:21,360 --> 00:13:25,519
long-standing demand in the market for

00:13:23,040 --> 00:13:28,240
more and more security over time

00:13:25,519 --> 00:13:29,440
it's never fast enough uh really quickly

00:13:28,240 --> 00:13:30,800
touching on this there's some things

00:13:29,440 --> 00:13:32,000
that aren't custom applications for

00:13:30,800 --> 00:13:32,880
things that aren't custom applications

00:13:32,000 --> 00:13:34,399
for things that are

00:13:32,880 --> 00:13:35,600
packaged open source we have a secure

00:13:34,399 --> 00:13:37,200
pipeline that builds something called

00:13:35,600 --> 00:13:39,600
the tonzo application catalog

00:13:37,200 --> 00:13:40,320
to give you providence proven proof of

00:13:39,600 --> 00:13:41,920
testing

00:13:40,320 --> 00:13:42,959
uh open source deployed to production

00:13:41,920 --> 00:13:44,240
with confidence we have so many people

00:13:42,959 --> 00:13:46,079
that are saying oh we used to go out and

00:13:44,240 --> 00:13:47,920
just grab any open source off the web

00:13:46,079 --> 00:13:49,440
compile it ourselves uh we're now

00:13:47,920 --> 00:13:50,639
trusting this proven software supply

00:13:49,440 --> 00:13:51,279
chain from the tanzania application

00:13:50,639 --> 00:13:53,199
catalog

00:13:51,279 --> 00:13:55,360
to surround our customer applications

00:13:53,199 --> 00:13:56,800
with that code

00:13:55,360 --> 00:13:58,000
the last thing then though is that you

00:13:56,800 --> 00:13:59,199
know these microservices running in

00:13:58,000 --> 00:14:00,959
containers or apps

00:13:59,199 --> 00:14:02,320
often apps and so we're building into

00:14:00,959 --> 00:14:04,320
the spring framework

00:14:02,320 --> 00:14:06,560
more and more out of the box devx around

00:14:04,320 --> 00:14:07,839
security and i won't cover it all today

00:14:06,560 --> 00:14:09,680
but i'll give you a quick preview of

00:14:07,839 --> 00:14:11,040
where we're headed there

00:14:09,680 --> 00:14:12,720
if you think about that k-native

00:14:11,040 --> 00:14:13,279
server-less application it starts to

00:14:12,720 --> 00:14:15,839
expose

00:14:13,279 --> 00:14:17,920
an api and you really want to mix the

00:14:15,839 --> 00:14:18,880
best of api management and microservices

00:14:17,920 --> 00:14:21,040
management

00:14:18,880 --> 00:14:22,399
and in the past we saw that there were

00:14:21,040 --> 00:14:24,079
separate teams

00:14:22,399 --> 00:14:25,839
one that was running the application

00:14:24,079 --> 00:14:27,120
another was running the api security

00:14:25,839 --> 00:14:28,839
team

00:14:27,120 --> 00:14:31,199
and if you wanted uh you know strong

00:14:28,839 --> 00:14:34,800
authentication rate limiting

00:14:31,199 --> 00:14:35,519
um routing or security controls on that

00:14:34,800 --> 00:14:37,600
application

00:14:35,519 --> 00:14:39,040
say anomaly detection of the application

00:14:37,600 --> 00:14:40,959
and api behavior

00:14:39,040 --> 00:14:42,880
you had to have one team separate from

00:14:40,959 --> 00:14:43,600
the other so we're doing two things

00:14:42,880 --> 00:14:44,959
there

00:14:43,600 --> 00:14:46,720
we think this lease privilege also

00:14:44,959 --> 00:14:47,199
applies to the applications models as

00:14:46,720 --> 00:14:48,720
well

00:14:47,199 --> 00:14:50,560
we think that every microservices should

00:14:48,720 --> 00:14:52,240
have full api security both in terms of

00:14:50,560 --> 00:14:54,240
a micro gateway to protect it

00:14:52,240 --> 00:14:56,839
um from ddos attacks with rate limiting

00:14:54,240 --> 00:14:58,800
should have strong oidc integration for

00:14:56,839 --> 00:15:00,079
authentication and then we're taking

00:14:58,800 --> 00:15:01,440
that even further than just the spring

00:15:00,079 --> 00:15:03,600
gateway itself

00:15:01,440 --> 00:15:04,959
um and we made an acquisition uh a

00:15:03,600 --> 00:15:06,240
company called mesh seven

00:15:04,959 --> 00:15:07,680
and now we're starting to take what used

00:15:06,240 --> 00:15:09,600
to be the exclusive you know

00:15:07,680 --> 00:15:10,800
capabilities of these api security

00:15:09,600 --> 00:15:12,240
gateways and we're bringing that into

00:15:10,800 --> 00:15:13,600
the envoy ecosystem into the cloud

00:15:12,240 --> 00:15:15,279
native ecosystem

00:15:13,600 --> 00:15:16,639
and we're saying with the extensible you

00:15:15,279 --> 00:15:18,720
know envoy model

00:15:16,639 --> 00:15:20,800
could we bring an over time potentially

00:15:18,720 --> 00:15:22,560
even awesome compatible ecosystem of

00:15:20,800 --> 00:15:23,600
security and observability features to

00:15:22,560 --> 00:15:25,120
every envoy

00:15:23,600 --> 00:15:27,600
such that every microservice can be

00:15:25,120 --> 00:15:28,639
protected as it's created within

00:15:27,600 --> 00:15:30,399
kubernetes

00:15:28,639 --> 00:15:32,560
as opposed to that being a separate job

00:15:30,399 --> 00:15:33,839
of an api only team

00:15:32,560 --> 00:15:35,600
and i'll just close with this example of

00:15:33,839 --> 00:15:37,279
why i think that's another you know

00:15:35,600 --> 00:15:38,560
the endless demand for security within

00:15:37,279 --> 00:15:40,000
enterprise is always bringing that

00:15:38,560 --> 00:15:41,360
closer that devsecops model

00:15:40,000 --> 00:15:43,680
we've talked to some organizations where

00:15:41,360 --> 00:15:45,279
they might have 2000 apis but only

00:15:43,680 --> 00:15:47,199
800 of them formerly protected by their

00:15:45,279 --> 00:15:48,880
api management team and the reason was

00:15:47,199 --> 00:15:50,399
is that that api management team wasn't

00:15:48,880 --> 00:15:52,079
as close to the sdlc to container

00:15:50,399 --> 00:15:52,720
management to that devsecops pipeline

00:15:52,079 --> 00:15:54,240
team

00:15:52,720 --> 00:15:55,839
but now with mesh 7 and the spring

00:15:54,240 --> 00:15:58,880
gateway we think we can bring

00:15:55,839 --> 00:16:01,440
all of the security and control um and

00:15:58,880 --> 00:16:03,279
uh observability of those you know

00:16:01,440 --> 00:16:04,240
enterprise api management tools to every

00:16:03,279 --> 00:16:05,839
microservice

00:16:04,240 --> 00:16:07,120
and what's a microservice what's an api

00:16:05,839 --> 00:16:08,000
they have the superpowers of each other

00:16:07,120 --> 00:16:09,120
immediately so

00:16:08,000 --> 00:16:11,279
you can deploy with the speed of

00:16:09,120 --> 00:16:13,440
microservices and the security

00:16:11,279 --> 00:16:14,560
and control of an api all in one so

00:16:13,440 --> 00:16:16,639
we're really excited about

00:16:14,560 --> 00:16:18,880
you know kind of that roadmap bringing

00:16:16,639 --> 00:16:20,079
this least privilege this endless demand

00:16:18,880 --> 00:16:22,000
that enterprises want to be more and

00:16:20,079 --> 00:16:24,160
more secure every day

00:16:22,000 --> 00:16:25,440
to every application so that's a little

00:16:24,160 --> 00:16:28,480
bit of my current thinking

00:16:25,440 --> 00:16:31,040
um you know i'm pretty excited about

00:16:28,480 --> 00:16:32,320
looking to bring uh that model to our

00:16:31,040 --> 00:16:33,199
modern application platforms on

00:16:32,320 --> 00:16:34,639
kubernetes

00:16:33,199 --> 00:16:36,639
and i think it's an extension really of

00:16:34,639 --> 00:16:38,000
a trend we've seen for a long long time

00:16:36,639 --> 00:16:39,680
but we're bringing to this distributed

00:16:38,000 --> 00:16:41,279
application model so it's an exciting

00:16:39,680 --> 00:16:42,560
time to work on distributed applications

00:16:41,279 --> 00:16:43,680
container applications

00:16:42,560 --> 00:16:44,720
as we start to bring some of the

00:16:43,680 --> 00:16:46,480
security we might have had to

00:16:44,720 --> 00:16:48,240
consolidated monoliths into consolidated

00:16:46,480 --> 00:16:49,759
systems to our distributed systems

00:16:48,240 --> 00:16:51,120
so thanks for listening in the talk

00:16:49,759 --> 00:16:51,839
throw me a tweet if any of this makes

00:16:51,120 --> 00:16:53,360
sense or

00:16:51,839 --> 00:16:54,720
is thought provoking i'd like to

00:16:53,360 --> 00:16:56,240
continue to work on this kind of least

00:16:54,720 --> 00:16:57,199
privilege for distributed applications

00:16:56,240 --> 00:17:00,399
uh model together

00:16:57,199 --> 00:17:00,399

YouTube URL: https://www.youtube.com/watch?v=PL83WEA3-Bk


