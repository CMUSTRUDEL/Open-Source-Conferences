Title: A First Look at the Security of Serverless Applications - Eduard Marin, Telefonica Research
Publication date: 2021-05-04
Playlist: Cloud Native Security Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

A First Look at the Security of Serverless Applications - Eduard Marin, Telefonica Research

Serverless computing is emerging as a new paradigm to deploy applications in the cloud, offering many advantages to cloud providers and their customers. Customers only have to be concerned about implementing their functions, leaving the management of the underlying hardware and software to cloud providers. Consequently, cloud providers are responsible for developing all security mechanisms to protect serverless applications from security attacks. Unfortunately, as serverless computing is a relatively new concept, its security has not yet been properly examined. In this talk, Eduard will shed light on the unique security threats and challenges of serverless platforms. Building on academic and industry research, Eduard will introduce the main types of security attacks against serverless applications along with the feasibility of realizing such attacks, and possible ways to mitigate them.
Captions: 
	00:00:00,719 --> 00:00:04,160
good afternoon everyone my name is

00:00:02,800 --> 00:00:05,759
eduard marin and i'm a researcher at

00:00:04,160 --> 00:00:07,759
telefonica research

00:00:05,759 --> 00:00:09,920
today i will talk about the security of

00:00:07,759 --> 00:00:11,440
serverless a new computing paradigm that

00:00:09,920 --> 00:00:12,639
has experienced significant growth over

00:00:11,440 --> 00:00:14,080
the last few years

00:00:12,639 --> 00:00:15,440
and is expected to become the dominant

00:00:14,080 --> 00:00:17,920
pattern for cloud computing in the

00:00:15,440 --> 00:00:17,920
future

00:00:18,480 --> 00:00:21,520
over the last decade we have witnessed

00:00:20,240 --> 00:00:22,880
significant advancements in cloud

00:00:21,520 --> 00:00:24,800
computing

00:00:22,880 --> 00:00:26,160
these were intended to simplify the

00:00:24,800 --> 00:00:27,199
development and management of

00:00:26,160 --> 00:00:30,800
applications

00:00:27,199 --> 00:00:33,360
as well as reduce the cost of running

00:00:30,800 --> 00:00:34,960
these applications in the cloud in the

00:00:33,360 --> 00:00:37,040
early days of cloud computing

00:00:34,960 --> 00:00:38,640
cloud providers gave users the ability

00:00:37,040 --> 00:00:39,520
to port their monolithic applications to

00:00:38,640 --> 00:00:41,360
the cloud

00:00:39,520 --> 00:00:43,520
virtual machines were key to achieving

00:00:41,360 --> 00:00:45,039
this offering strong isolation while

00:00:43,520 --> 00:00:47,120
providing users a sense of having an

00:00:45,039 --> 00:00:48,879
infinite amount of resources

00:00:47,120 --> 00:00:50,640
the main downside of this approach was

00:00:48,879 --> 00:00:52,160
that users not only had to manage the

00:00:50,640 --> 00:00:53,840
virtual machines themselves

00:00:52,160 --> 00:00:55,760
but also had to develop mechanisms to

00:00:53,840 --> 00:00:58,160
scale their applications

00:00:55,760 --> 00:01:00,079
motivated by these limitations it was

00:00:58,160 --> 00:01:00,800
proposed to decompose applications into

00:01:00,079 --> 00:01:02,719
smaller

00:01:00,800 --> 00:01:04,080
independent components known as

00:01:02,719 --> 00:01:07,280
microservices

00:01:04,080 --> 00:01:08,000
and placed them inside containers this

00:01:07,280 --> 00:01:11,119
approach

00:01:08,000 --> 00:01:13,439
increased portability it provided

00:01:11,119 --> 00:01:14,640
lower startup times compared to virtual

00:01:13,439 --> 00:01:18,560
machines

00:01:14,640 --> 00:01:20,080
and it allowed for greater efficiency

00:01:18,560 --> 00:01:22,479
but it also came with some important

00:01:20,080 --> 00:01:23,759
limitations as all containers in a host

00:01:22,479 --> 00:01:25,520
share the same kernel

00:01:23,759 --> 00:01:27,360
containers offer weaker isolation

00:01:25,520 --> 00:01:30,159
guarantees than virtual machines

00:01:27,360 --> 00:01:31,920
also software developers still need to

00:01:30,159 --> 00:01:34,000
configure and manage the containers

00:01:31,920 --> 00:01:35,600
themselves

00:01:34,000 --> 00:01:37,040
in addition to this a common limitation

00:01:35,600 --> 00:01:38,560
of the previous approaches is that they

00:01:37,040 --> 00:01:40,960
rely on a static

00:01:38,560 --> 00:01:42,079
billing model where users pay a monthly

00:01:40,960 --> 00:01:43,680
fixed amount

00:01:42,079 --> 00:01:46,079
regardless of the number of resources

00:01:43,680 --> 00:01:48,320
they consume

00:01:46,079 --> 00:01:49,439
serverless allows us to overcome these

00:01:48,320 --> 00:01:51,920
limitations

00:01:49,439 --> 00:01:53,280
first it allows software developers to

00:01:51,920 --> 00:01:56,240
outsource all operational

00:01:53,280 --> 00:01:57,840
infrastructure tasks to cloud providers

00:01:56,240 --> 00:01:59,200
allowing software developers to focus

00:01:57,840 --> 00:02:01,360
only on writing

00:01:59,200 --> 00:02:02,320
the code for their applications

00:02:01,360 --> 00:02:04,399
serverless

00:02:02,320 --> 00:02:05,680
proposes to the couple storage from

00:02:04,399 --> 00:02:07,600
computation

00:02:05,680 --> 00:02:09,520
the application logic is divided into a

00:02:07,600 --> 00:02:11,039
set of short-lived stateless

00:02:09,520 --> 00:02:13,520
functions each running inside an

00:02:11,039 --> 00:02:16,560
execution environment storage

00:02:13,520 --> 00:02:20,000
is provided by cloud services such as

00:02:16,560 --> 00:02:22,560
s3 or dynamodb

00:02:20,000 --> 00:02:23,599
in serverless scaling of applications is

00:02:22,560 --> 00:02:25,840
managed directly

00:02:23,599 --> 00:02:27,520
by cloud providers meaning that software

00:02:25,840 --> 00:02:28,959
developers don't need to worry about

00:02:27,520 --> 00:02:31,760
when and how the application

00:02:28,959 --> 00:02:33,120
needs to be scaled up or down unlike

00:02:31,760 --> 00:02:36,160
previous approaches

00:02:33,120 --> 00:02:36,720
serverless offers a pure pay-per-use

00:02:36,160 --> 00:02:38,720
model

00:02:36,720 --> 00:02:39,840
where users pay only for the resources

00:02:38,720 --> 00:02:41,920
they consume

00:02:39,840 --> 00:02:44,000
cloud providers such as amazon microsoft

00:02:41,920 --> 00:02:44,959
and google are already offering service

00:02:44,000 --> 00:02:47,599
less

00:02:44,959 --> 00:02:48,640
computing services to their customers

00:02:47,599 --> 00:02:50,319
meanwhile

00:02:48,640 --> 00:02:51,920
several open source serverless platforms

00:02:50,319 --> 00:02:52,959
have also been developed over the last

00:02:51,920 --> 00:02:55,360
few years

00:02:52,959 --> 00:02:57,040
before going into the details of

00:02:55,360 --> 00:02:58,560
serverless security

00:02:57,040 --> 00:03:00,959
let me briefly explain how serverless

00:02:58,560 --> 00:03:02,640
platforms work functions are the main

00:03:00,959 --> 00:03:05,599
element in circle computing

00:03:02,640 --> 00:03:06,879
they run inside a fresh isolated

00:03:05,599 --> 00:03:07,840
execution environment such as a

00:03:06,879 --> 00:03:09,440
container

00:03:07,840 --> 00:03:11,840
and are typically executed in response

00:03:09,440 --> 00:03:14,800
to several types of events

00:03:11,840 --> 00:03:16,640
such as a web request another important

00:03:14,800 --> 00:03:19,920
component in serverless platforms

00:03:16,640 --> 00:03:21,920
are api gateways which expose

00:03:19,920 --> 00:03:25,360
rest endpoints to customers and act as a

00:03:21,920 --> 00:03:27,440
bridge between users and functions

00:03:25,360 --> 00:03:29,200
if a function is triggered many times

00:03:27,440 --> 00:03:31,040
the cloud provider can opt for creating

00:03:29,200 --> 00:03:32,799
new instances of the same function

00:03:31,040 --> 00:03:35,120
in other execution environments and

00:03:32,799 --> 00:03:36,480
redirecting some requests to them

00:03:35,120 --> 00:03:39,120
functions typically communicate with

00:03:36,480 --> 00:03:42,640
other functions and also with

00:03:39,120 --> 00:03:47,360
other cloud services so for example for

00:03:42,640 --> 00:03:49,760
for achieving for storage purposes

00:03:47,360 --> 00:03:51,680
and all this communication is done via

00:03:49,760 --> 00:03:53,760
standard apis

00:03:51,680 --> 00:03:55,200
in addition to this serverless platforms

00:03:53,760 --> 00:03:56,480
include a set of control plane

00:03:55,200 --> 00:03:58,400
functionalities

00:03:56,480 --> 00:04:00,159
for example one could be an

00:03:58,400 --> 00:04:02,080
authentication server

00:04:00,159 --> 00:04:04,159
that authenticates incoming requests

00:04:02,080 --> 00:04:07,760
before passing them to the corresponding

00:04:04,159 --> 00:04:09,519
functions another one could be

00:04:07,760 --> 00:04:10,959
the so-called identity and access

00:04:09,519 --> 00:04:14,159
management component

00:04:10,959 --> 00:04:17,199
which is responsible for specifying

00:04:14,159 --> 00:04:18,160
the functions and cloud services that

00:04:17,199 --> 00:04:21,759
each function can

00:04:18,160 --> 00:04:23,520
can access another well-known component

00:04:21,759 --> 00:04:25,520
is the so-called virtual private

00:04:23,520 --> 00:04:28,080
component which

00:04:25,520 --> 00:04:29,440
basically allows to create virtual

00:04:28,080 --> 00:04:31,520
networks

00:04:29,440 --> 00:04:32,720
with all the functions that belong to

00:04:31,520 --> 00:04:34,560
the same application

00:04:32,720 --> 00:04:36,000
so that all the functions that belong to

00:04:34,560 --> 00:04:37,120
this application can communicate with

00:04:36,000 --> 00:04:39,520
each other

00:04:37,120 --> 00:04:41,440
while preventing others from from doing

00:04:39,520 --> 00:04:43,759
from doing this

00:04:41,440 --> 00:04:45,280
in practice the serverless ecosystem is

00:04:43,759 --> 00:04:46,960
much more complex than that

00:04:45,280 --> 00:04:48,320
the figure shown in the slide is a

00:04:46,960 --> 00:04:50,240
simple example illustrating

00:04:48,320 --> 00:04:51,600
a real state website using serverless

00:04:50,240 --> 00:04:53,520
functions

00:04:51,600 --> 00:04:56,080
note that server developers can choose

00:04:53,520 --> 00:04:58,080
to write the functions themselves

00:04:56,080 --> 00:04:59,919
use functions from third parties or use

00:04:58,080 --> 00:05:02,639
preparative functions for which they pay

00:04:59,919 --> 00:05:04,560
licensing fees also note that only a

00:05:02,639 --> 00:05:06,400
subset of functions can communicate with

00:05:04,560 --> 00:05:08,240
the outside world

00:05:06,400 --> 00:05:10,560
let's now try to understand what the

00:05:08,240 --> 00:05:12,639
threat model of serverless

00:05:10,560 --> 00:05:14,400
in any serverless platform adversaries

00:05:12,639 --> 00:05:15,360
can try to steal sensitive information

00:05:14,400 --> 00:05:17,360
such as

00:05:15,360 --> 00:05:19,199
cryptographic keys or the application

00:05:17,360 --> 00:05:21,199
logic they can try to

00:05:19,199 --> 00:05:22,320
exfiltrate data control the function's

00:05:21,199 --> 00:05:24,080
execution flow

00:05:22,320 --> 00:05:26,000
disrupt other applications run

00:05:24,080 --> 00:05:27,360
applications without being charged

00:05:26,000 --> 00:05:29,919
or even worse associate their

00:05:27,360 --> 00:05:31,600
application cost to other users

00:05:29,919 --> 00:05:34,720
these attacks can be performed by

00:05:31,600 --> 00:05:38,479
external and internal adversaries

00:05:34,720 --> 00:05:40,080
that is malicious external users that

00:05:38,479 --> 00:05:42,240
leverage any of the existing external

00:05:40,080 --> 00:05:44,240
apis malicious

00:05:42,240 --> 00:05:46,080
functions or compromise functions that

00:05:44,240 --> 00:05:47,440
try to bypass specified security

00:05:46,080 --> 00:05:50,639
policies

00:05:47,440 --> 00:05:52,080
or even the cloud provider

00:05:50,639 --> 00:05:53,919
we think that it's important to model

00:05:52,080 --> 00:05:54,880
cloud providers as honest but curious

00:05:53,919 --> 00:05:56,080
entities

00:05:54,880 --> 00:05:57,919
since they can potentially learn

00:05:56,080 --> 00:06:00,800
sensitive information about users

00:05:57,919 --> 00:06:02,479
while running their applications with

00:06:00,800 --> 00:06:03,600
the increase in diversity of attacks

00:06:02,479 --> 00:06:05,199
against the cloud

00:06:03,600 --> 00:06:06,720
security and privacy are a key factor

00:06:05,199 --> 00:06:08,720
for the widespread adoption

00:06:06,720 --> 00:06:10,400
of surveillance computing at first

00:06:08,720 --> 00:06:11,759
glance one could argue that serverless

00:06:10,400 --> 00:06:13,120
computing is intrinsically more secure

00:06:11,759 --> 00:06:14,800
than its predecessors

00:06:13,120 --> 00:06:16,720
however in practice serverless improves

00:06:14,800 --> 00:06:19,840
some security aspects but also makes

00:06:16,720 --> 00:06:20,880
some other matters worse let's first

00:06:19,840 --> 00:06:23,919
talk about the

00:06:20,880 --> 00:06:26,240
positive ones for example

00:06:23,919 --> 00:06:27,440
the fact that functions are short-lived

00:06:26,240 --> 00:06:30,080
makes it more difficult for the

00:06:27,440 --> 00:06:30,960
nurses to find ways to persist in their

00:06:30,080 --> 00:06:32,400
attacks

00:06:30,960 --> 00:06:34,000
the bad news is that adversaries have

00:06:32,400 --> 00:06:36,080
already proven to be capable of

00:06:34,000 --> 00:06:38,800
bypassing these to mounted attacks

00:06:36,080 --> 00:06:40,160
but despite this it is positive for

00:06:38,800 --> 00:06:43,120
security that functions

00:06:40,160 --> 00:06:43,840
run for such a short period of time with

00:06:43,120 --> 00:06:46,319
serverless

00:06:43,840 --> 00:06:47,440
security is a shared responsibility

00:06:46,319 --> 00:06:48,720
software developers are still

00:06:47,440 --> 00:06:49,680
responsible for application level

00:06:48,720 --> 00:06:51,680
security

00:06:49,680 --> 00:06:54,160
but the rest of the security tasks are

00:06:51,680 --> 00:06:55,919
now carried out by cloud providers

00:06:54,160 --> 00:06:57,280
this is expected to eliminate the number

00:06:55,919 --> 00:06:58,880
of attacks against serverless

00:06:57,280 --> 00:07:00,479
applications

00:06:58,880 --> 00:07:02,639
due to the flexibility and elasticity

00:07:00,479 --> 00:07:04,319
serverless provides it is now also

00:07:02,639 --> 00:07:06,240
possible to mitigate denial of service

00:07:04,319 --> 00:07:08,240
attacks that aim to overload the server

00:07:06,240 --> 00:07:10,479
where the application runs

00:07:08,240 --> 00:07:11,840
despite these advantages we can argue

00:07:10,479 --> 00:07:12,560
that serverless increases the attack

00:07:11,840 --> 00:07:14,000
surface

00:07:12,560 --> 00:07:15,599
and introduces unique trade-offs and

00:07:14,000 --> 00:07:17,280
design choices that can negatively

00:07:15,599 --> 00:07:18,960
impact security

00:07:17,280 --> 00:07:20,560
in the next slides i will go more in

00:07:18,960 --> 00:07:23,520
depth on those

00:07:20,560 --> 00:07:23,520
negative aspects

00:07:24,240 --> 00:07:27,360
there are three main reasons why the

00:07:25,520 --> 00:07:28,880
attack surface of serverless is larger

00:07:27,360 --> 00:07:32,319
than in previous approaches

00:07:28,880 --> 00:07:33,680
first functions are even event driven

00:07:32,319 --> 00:07:35,360
which means that they can be triggered

00:07:33,680 --> 00:07:37,919
by many types of internal

00:07:35,360 --> 00:07:39,440
and external event sources with multiple

00:07:37,919 --> 00:07:41,280
formats and encodings

00:07:39,440 --> 00:07:42,479
this clearly opens the door for

00:07:41,280 --> 00:07:45,440
aggressors to perform

00:07:42,479 --> 00:07:46,720
many attacks as functions are stateless

00:07:45,440 --> 00:07:47,360
and are intended to perform a single

00:07:46,720 --> 00:07:48,800
task

00:07:47,360 --> 00:07:50,400
they are required to constantly interact

00:07:48,800 --> 00:07:52,800
with other functions and cloud services

00:07:50,400 --> 00:07:54,639
to realize more complex functionalities

00:07:52,800 --> 00:07:56,800
however the definition and enforcement

00:07:54,639 --> 00:07:58,800
of security policies that specify how

00:07:56,800 --> 00:08:01,840
functions interact with each other

00:07:58,800 --> 00:08:05,520
and with which cloud

00:08:01,840 --> 00:08:07,280
services functions can interact with

00:08:05,520 --> 00:08:08,879
in such dynamic environments is very

00:08:07,280 --> 00:08:10,879
challenging

00:08:08,879 --> 00:08:12,240
finally serverless platforms include

00:08:10,879 --> 00:08:13,120
several new components and cloud

00:08:12,240 --> 00:08:16,720
services

00:08:13,120 --> 00:08:19,599
many of which are shared across users

00:08:16,720 --> 00:08:21,759
these may lead to new forms of cover and

00:08:19,599 --> 00:08:24,639
side channels that can result in attacks

00:08:21,759 --> 00:08:26,160
aimed to retrieve sensitive data or

00:08:24,639 --> 00:08:27,360
allow malicious functions to communicate

00:08:26,160 --> 00:08:30,400
with each other without the cloud

00:08:27,360 --> 00:08:30,400
provider noticing it

00:08:32,240 --> 00:08:36,560
ideally cloud providers would like to

00:08:34,719 --> 00:08:37,599
develop serverless platforms that jolly

00:08:36,560 --> 00:08:39,360
maximize

00:08:37,599 --> 00:08:41,519
security and performance in their

00:08:39,360 --> 00:08:43,919
infrastructures and their customers

00:08:41,519 --> 00:08:45,120
applications while keeping their cost as

00:08:43,919 --> 00:08:47,040
low as possible

00:08:45,120 --> 00:08:48,640
in practice however experience has shown

00:08:47,040 --> 00:08:49,519
that cloud providers often sacrifice

00:08:48,640 --> 00:08:51,279
some security

00:08:49,519 --> 00:08:53,279
to be able to accommodate more users and

00:08:51,279 --> 00:08:54,240
to provide greater performance to their

00:08:53,279 --> 00:08:56,880
users

00:08:54,240 --> 00:08:58,880
applications one clear example is on the

00:08:56,880 --> 00:09:00,240
selection of the sandboxing mechanisms

00:08:58,880 --> 00:09:02,399
as we explained before

00:09:00,240 --> 00:09:03,519
with the example of the bm and the

00:09:02,399 --> 00:09:05,200
container

00:09:03,519 --> 00:09:07,360
another example is on whether to use

00:09:05,200 --> 00:09:09,200
cold or warm containers

00:09:07,360 --> 00:09:10,800
called containers refer to containers

00:09:09,200 --> 00:09:12,560
that are used only once

00:09:10,800 --> 00:09:14,160
the problem with cold containers is that

00:09:12,560 --> 00:09:15,279
their booting time is often similar to

00:09:14,160 --> 00:09:16,880
the time it takes to execute the

00:09:15,279 --> 00:09:18,399
function itself

00:09:16,880 --> 00:09:20,959
therefore the latency introduced when

00:09:18,399 --> 00:09:22,080
booting can significantly affect the

00:09:20,959 --> 00:09:24,399
function's performance

00:09:22,080 --> 00:09:25,440
in addition to this cloud providers

00:09:24,399 --> 00:09:27,920
don't build

00:09:25,440 --> 00:09:28,560
users based on the booting time of their

00:09:27,920 --> 00:09:31,600
functions

00:09:28,560 --> 00:09:32,880
so of course they want to minimize it as

00:09:31,600 --> 00:09:35,680
much as possible

00:09:32,880 --> 00:09:36,080
to solve this problem cloud providers

00:09:35,680 --> 00:09:38,480
have

00:09:36,080 --> 00:09:39,600
started to use so-called worm containers

00:09:38,480 --> 00:09:41,279
one containers are

00:09:39,600 --> 00:09:43,760
normal containers that are reused to run

00:09:41,279 --> 00:09:46,480
several instances of the same function

00:09:43,760 --> 00:09:47,920
they provide much lower startup times

00:09:46,480 --> 00:09:49,839
but at the same time they also introduce

00:09:47,920 --> 00:09:50,640
some security risk as advantages could

00:09:49,839 --> 00:09:54,560
mount

00:09:50,640 --> 00:09:58,160
cross-invocation attacks another

00:09:54,560 --> 00:10:00,720
example has to do with the process of

00:09:58,160 --> 00:10:02,399
assigning functions to the host

00:10:00,720 --> 00:10:04,800
this can be done using deterministic of

00:10:02,399 --> 00:10:06,320
randomized scheduling algorithms

00:10:04,800 --> 00:10:07,839
while deterministic scheduling

00:10:06,320 --> 00:10:09,440
algorithms can lead to a more optimal

00:10:07,839 --> 00:10:11,279
use of resources and less communication

00:10:09,440 --> 00:10:13,040
overhead

00:10:11,279 --> 00:10:14,320
randomized algorithms can offer stronger

00:10:13,040 --> 00:10:16,240
protection

00:10:14,320 --> 00:10:19,120
against attacks that exploit residency

00:10:16,240 --> 00:10:20,480
with the victim all these examples

00:10:19,120 --> 00:10:21,760
show that there is a need to achieve a

00:10:20,480 --> 00:10:24,240
good balance between security and

00:10:21,760 --> 00:10:24,240
performance

00:10:27,519 --> 00:10:32,160
one of the main advantages of serverless

00:10:29,760 --> 00:10:33,760
is that cloud providers are now only

00:10:32,160 --> 00:10:35,920
responsible for conducting

00:10:33,760 --> 00:10:37,600
all operational infrastructure tasks

00:10:35,920 --> 00:10:39,120
including those aim to protect their

00:10:37,600 --> 00:10:40,079
infrastructures and the workloads

00:10:39,120 --> 00:10:43,040
running on them

00:10:40,079 --> 00:10:43,760
from internal and external threats at

00:10:43,040 --> 00:10:45,200
first

00:10:43,760 --> 00:10:46,959
this is expected to reduce the number of

00:10:45,200 --> 00:10:48,720
attacks against severus platforms

00:10:46,959 --> 00:10:50,240
yet this can also lead software

00:10:48,720 --> 00:10:52,079
developers to ignore security in their

00:10:50,240 --> 00:10:54,399
applications and to make realistic

00:10:52,079 --> 00:10:56,399
unrealistic assumptions about the

00:10:54,399 --> 00:10:58,839
security measures in place

00:10:56,399 --> 00:11:00,000
this could create a false sense of

00:10:58,839 --> 00:11:02,000
security

00:11:00,000 --> 00:11:03,040
to make things worse cloud providers

00:11:02,000 --> 00:11:04,800
typically keep all

00:11:03,040 --> 00:11:06,800
or most information about their backups

00:11:04,800 --> 00:11:08,399
confidential this makes it difficult to

00:11:06,800 --> 00:11:11,120
scrutinize the security and privacy of

00:11:08,399 --> 00:11:11,120
such platforms

00:11:12,560 --> 00:11:16,560
some of the infrastructure aspects cloud

00:11:14,240 --> 00:11:20,240
providers tend to keep

00:11:16,560 --> 00:11:23,600
confidential includes how functions

00:11:20,240 --> 00:11:25,839
instances are placed in host how

00:11:23,600 --> 00:11:29,200
the resources are assigned and managed

00:11:25,839 --> 00:11:32,640
or how isolation is achieved

00:11:29,200 --> 00:11:34,160
among others all of them have in common

00:11:32,640 --> 00:11:37,279
that they can impact the security and

00:11:34,160 --> 00:11:40,399
privacy serverless platforms provide

00:11:37,279 --> 00:11:42,000
in recent times researchers have devoted

00:11:40,399 --> 00:11:44,320
significant efforts into understanding

00:11:42,000 --> 00:11:46,720
and documenting the way

00:11:44,320 --> 00:11:49,440
serverless platforms of the main cloud

00:11:46,720 --> 00:11:52,079
providers operate

00:11:49,440 --> 00:11:53,120
their studies showed that despite cloud

00:11:52,079 --> 00:11:55,360
providers

00:11:53,120 --> 00:11:56,800
share the same goals there are important

00:11:55,360 --> 00:12:00,079
differences in the way they implemented

00:11:56,800 --> 00:12:00,079
their serverless infrastructures

00:12:00,560 --> 00:12:04,480
let's now talk about the main attacks

00:12:02,800 --> 00:12:07,440
against

00:12:04,480 --> 00:12:09,200
serverless we have identified three

00:12:07,440 --> 00:12:11,839
three main classes

00:12:09,200 --> 00:12:11,839
one of them is

00:12:12,240 --> 00:12:16,079
related to their application level

00:12:13,760 --> 00:12:16,480
attacks the other one is more specific

00:12:16,079 --> 00:12:20,480
to

00:12:16,480 --> 00:12:20,480
to serverless and the last one

00:12:20,560 --> 00:12:24,079
is about hardware attacks such as

00:12:22,839 --> 00:12:26,480
microarchitectural

00:12:24,079 --> 00:12:27,920
type of attacks like meltdown or raw

00:12:26,480 --> 00:12:29,600
hammer type of attacks

00:12:27,920 --> 00:12:31,200
due to the time constraints i will not

00:12:29,600 --> 00:12:34,560
cover hardware attacks in this

00:12:31,200 --> 00:12:37,279
in this talk o wasp

00:12:34,560 --> 00:12:38,880
has recently released a report

00:12:37,279 --> 00:12:40,240
explaining the top 10 security threats

00:12:38,880 --> 00:12:43,680
for surveillance allocations

00:12:40,240 --> 00:12:46,720
you can see them on the on the slide you

00:12:43,680 --> 00:12:48,800
you're probably thinking that all these

00:12:46,720 --> 00:12:50,000
type of threats are well understood by

00:12:48,800 --> 00:12:52,000
industry and academia

00:12:50,000 --> 00:12:53,440
but unfortunately software developers

00:12:52,000 --> 00:12:54,000
keep designing applications with this

00:12:53,440 --> 00:12:57,680
kind of

00:12:54,000 --> 00:13:00,399
vulnerabilities some of the

00:12:57,680 --> 00:13:01,040
most well-known ones such as for example

00:13:00,399 --> 00:13:03,680
injection

00:13:01,040 --> 00:13:05,440
attacks due to some data not being

00:13:03,680 --> 00:13:08,079
properly stabilized

00:13:05,440 --> 00:13:10,160
can allow bursaries to fully control

00:13:08,079 --> 00:13:12,399
functions

00:13:10,160 --> 00:13:13,360
other types of attacks for example are

00:13:12,399 --> 00:13:14,959
caused by

00:13:13,360 --> 00:13:16,880
software developers giving too many

00:13:14,959 --> 00:13:21,200
permissions to a function

00:13:16,880 --> 00:13:24,880
another classical type of type of threat

00:13:21,200 --> 00:13:26,480
is the one is the one caused by

00:13:24,880 --> 00:13:29,440
using third-party components with

00:13:26,480 --> 00:13:29,440
non-vulnerabilities

00:13:30,079 --> 00:13:34,480
to mitigate the previous issues it is

00:13:32,560 --> 00:13:35,600
recommended to treat every function as a

00:13:34,480 --> 00:13:38,639
separate

00:13:35,600 --> 00:13:41,519
security perimeter it's also

00:13:38,639 --> 00:13:42,320
recommended that software developers

00:13:41,519 --> 00:13:45,680
follow

00:13:42,320 --> 00:13:49,120
standard secure coding best practices

00:13:45,680 --> 00:13:51,440
so for example they should not trust the

00:13:49,120 --> 00:13:53,600
inputs that are received in each

00:13:51,440 --> 00:13:57,199
function

00:13:53,600 --> 00:14:00,240
additionally software developers

00:13:57,199 --> 00:14:02,560
should also follow the principle of

00:14:00,240 --> 00:14:05,440
least privilege because

00:14:02,560 --> 00:14:06,320
functions will eventually be compromised

00:14:05,440 --> 00:14:08,639
and once

00:14:06,320 --> 00:14:10,000
a function is compromised the goal

00:14:08,639 --> 00:14:13,040
should be is to

00:14:10,000 --> 00:14:15,199
to reduce the the amount of damage that

00:14:13,040 --> 00:14:17,199
the bursary can do

00:14:15,199 --> 00:14:19,040
and finally to prevent this kind of

00:14:17,199 --> 00:14:21,519
attacks it's also it's very important

00:14:19,040 --> 00:14:22,800
to secure data both at rest and in

00:14:21,519 --> 00:14:26,079
transit

00:14:22,800 --> 00:14:27,360
to secure data address one can use cloud

00:14:26,079 --> 00:14:29,680
services

00:14:27,360 --> 00:14:30,800
and to secure data in transit for

00:14:29,680 --> 00:14:33,120
example one can use

00:14:30,800 --> 00:14:35,600
strong cryptographic protocols such as

00:14:33,120 --> 00:14:35,600
tls

00:14:36,160 --> 00:14:43,120
let's now go a little bit more in depth

00:14:39,519 --> 00:14:46,959
on the surface specific type of attacks

00:14:43,120 --> 00:14:49,360
one of them is the the one so-called

00:14:46,959 --> 00:14:50,639
resource exhaustion attacks the goal of

00:14:49,360 --> 00:14:53,279
this kind of attack is to

00:14:50,639 --> 00:14:54,079
over utilize the resources of the victim

00:14:53,279 --> 00:14:57,199
to either

00:14:54,079 --> 00:15:00,560
disrupt the service or to impose

00:14:57,199 --> 00:15:02,560
excessive financial loads to the victim

00:15:00,560 --> 00:15:05,120
so basically to perform so-called denial

00:15:02,560 --> 00:15:08,000
of wallet attacks

00:15:05,120 --> 00:15:08,880
in such a complex and dynamic type of

00:15:08,000 --> 00:15:10,959
system

00:15:08,880 --> 00:15:12,639
adversaries can also try to leverage

00:15:10,959 --> 00:15:13,920
inconsistencies in functions and cloud

00:15:12,639 --> 00:15:17,040
services

00:15:13,920 --> 00:15:18,320
this remains unexplored so far but i

00:15:17,040 --> 00:15:21,519
think it's an interesting

00:15:18,320 --> 00:15:23,199
avenue for for research

00:15:21,519 --> 00:15:25,360
site channel attacks are also very

00:15:23,199 --> 00:15:27,760
important in serverless platforms

00:15:25,360 --> 00:15:28,959
they can come with different flavors

00:15:27,760 --> 00:15:31,600
there are different

00:15:28,959 --> 00:15:32,639
ways these kind of attacks can be can be

00:15:31,600 --> 00:15:35,199
achieved

00:15:32,639 --> 00:15:37,759
one of them is based on for example the

00:15:35,199 --> 00:15:39,680
access patterns or timing information

00:15:37,759 --> 00:15:41,680
then i also envision that there will be

00:15:39,680 --> 00:15:45,199
some inter container and

00:15:41,680 --> 00:15:48,240
intra host type of said channel so

00:15:45,199 --> 00:15:50,000
i expect that there will be some

00:15:48,240 --> 00:15:51,519
new attacks coming in this space in the

00:15:50,000 --> 00:15:55,519
next in the next

00:15:51,519 --> 00:15:57,040
years and last but not least

00:15:55,519 --> 00:15:58,959
there is also the possibility for

00:15:57,040 --> 00:16:02,160
adversaries to exploit

00:15:58,959 --> 00:16:05,759
the disks the disk space

00:16:02,160 --> 00:16:08,320
in the temp directory this is used to to

00:16:05,759 --> 00:16:10,160
keep state that is used

00:16:08,320 --> 00:16:12,720
across different instances of the same

00:16:10,160 --> 00:16:16,079
function that run on the same

00:16:12,720 --> 00:16:16,079
on the same container

00:16:18,320 --> 00:16:22,639
as the future work i think it's

00:16:21,199 --> 00:16:24,720
interesting to

00:16:22,639 --> 00:16:26,240
explore all the all the attacks that i

00:16:24,720 --> 00:16:27,199
explained before in the in the previous

00:16:26,240 --> 00:16:31,040
slide

00:16:27,199 --> 00:16:31,839
in in depth i also think that it's very

00:16:31,040 --> 00:16:34,240
important to

00:16:31,839 --> 00:16:35,920
better understand the cloud provider

00:16:34,240 --> 00:16:38,639
back ends so for example investigate the

00:16:35,920 --> 00:16:43,199
security of new execution environments

00:16:38,639 --> 00:16:46,320
such as amazon's solution called

00:16:43,199 --> 00:16:48,560
firecracker and i also think that

00:16:46,320 --> 00:16:51,519
it's very important to mitigate all

00:16:48,560 --> 00:16:51,519
sites and tags

00:16:52,560 --> 00:16:55,920
to conclude my presentation i would like

00:16:54,639 --> 00:16:59,440
to to say that

00:16:55,920 --> 00:17:02,880
this is a very challenging and a very

00:16:59,440 --> 00:17:04,079
active uh research area clearly i mean i

00:17:02,880 --> 00:17:05,439
hope that uh

00:17:04,079 --> 00:17:07,760
with this presentation i convince you

00:17:05,439 --> 00:17:10,000
that there are some very unique security

00:17:07,760 --> 00:17:13,039
and privacy threats and challenges

00:17:10,000 --> 00:17:14,160
that will probably come with new attacks

00:17:13,039 --> 00:17:18,559
and

00:17:14,160 --> 00:17:21,039
hopefully better defenses for the future

00:17:18,559 --> 00:17:22,240
so i hope that you're convinced that

00:17:21,039 --> 00:17:24,480
serverless

00:17:22,240 --> 00:17:25,919
is the is the way to go and that

00:17:24,480 --> 00:17:28,720
security and privacy

00:17:25,919 --> 00:17:30,480
should be considered by design and it

00:17:28,720 --> 00:17:33,679
should be considered now that serverless

00:17:30,480 --> 00:17:36,400
is started to be to be adopted

00:17:33,679 --> 00:17:37,520
finally i want to refer to you to uh to

00:17:36,400 --> 00:17:41,280
a paper

00:17:37,520 --> 00:17:43,760
on serverless security that explores

00:17:41,280 --> 00:17:45,360
uh in more depth all the of the

00:17:43,760 --> 00:17:47,280
different aspects that i've been

00:17:45,360 --> 00:17:50,000
discussing in this presentation you can

00:17:47,280 --> 00:17:53,520
find it in my personal website

00:17:50,000 --> 00:17:54,799
and i also want to to mention that we're

00:17:53,520 --> 00:17:57,600
organizing a workshop

00:17:54,799 --> 00:18:00,160
on serverless for mobile networks you

00:17:57,600 --> 00:18:02,720
can also see the website there

00:18:00,160 --> 00:18:03,840
and that's all from my site if you have

00:18:02,720 --> 00:18:08,240
any questions i'll be

00:18:03,840 --> 00:18:08,240

YouTube URL: https://www.youtube.com/watch?v=EpFxQjcCJfk


