Title: Secure Code Development and Lessons Learned from etcd Security Audit - Sahdev Zala & Hitoshi Mitake
Publication date: 2021-05-04
Playlist: Cloud Native Security Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Secure Code Development and Lessons Learned from etcd Security Audit - Sahdev Zala, IBM & Hitoshi Mitake, Indeed

When it comes to the importance of writing secure code, it gets a unanimous vote. This is even more important for an open code. Checking the security of your code needs manual steps as well use of automated tools. As project maintainers for the etcd project, we recently led a third party security audit of etcd code. In this talk, we will share our experience of what are the common areas in code that get overlooked and pose a security risk from general weaknesses to critical threats. We will also provide a walk-through of security vulnerabilities that were reported from the audit work.
Captions: 
	00:00:01,520 --> 00:00:06,640
um hello everyone welcome to this

00:00:03,919 --> 00:00:08,559
talk this recording uh for secure code

00:00:06,640 --> 00:00:11,200
development and lessons learned from

00:00:08,559 --> 00:00:14,320
hd security edit my name is sadio zala i

00:00:11,200 --> 00:00:16,640
am a senior software engineer at ibm

00:00:14,320 --> 00:00:19,119
and in context of this stock i am one of

00:00:16,640 --> 00:00:22,560
the fcd project maintainer

00:00:19,119 --> 00:00:26,320
and i have hitoshi mitake with me uh he

00:00:22,560 --> 00:00:28,560
is a site reliability engineer at indeed

00:00:26,320 --> 00:00:29,359
and he is also one of the project

00:00:28,560 --> 00:00:32,800
manager

00:00:29,359 --> 00:00:32,800
for the lcd

00:00:34,000 --> 00:00:37,360
all right so in this talk we basically

00:00:36,960 --> 00:00:40,079
will

00:00:37,360 --> 00:00:41,360
uh briefly cover you know a couple of

00:00:40,079 --> 00:00:43,760
the best practices

00:00:41,360 --> 00:00:44,879
like identifying the you know areas

00:00:43,760 --> 00:00:45,600
where you should be paying more

00:00:44,879 --> 00:00:48,239
attention

00:00:45,600 --> 00:00:50,239
as far as security of your project your

00:00:48,239 --> 00:00:53,440
software is concerned

00:00:50,239 --> 00:00:56,719
uh we'll talk about code analysis uh

00:00:53,440 --> 00:00:59,039
and you know then we will have uh

00:00:56,719 --> 00:01:02,160
mitaki uh talk about uh that's the

00:00:59,039 --> 00:01:04,640
security model we'll talk about

00:01:02,160 --> 00:01:05,439
uh some of the vulnerabilities uh

00:01:04,640 --> 00:01:08,080
examples

00:01:05,439 --> 00:01:09,439
that uh you know we they are real life

00:01:08,080 --> 00:01:13,439
examples that we run

00:01:09,439 --> 00:01:15,920
uh while uh doing the cd security audit

00:01:13,439 --> 00:01:17,119
and then we'll talk about uh you know

00:01:15,920 --> 00:01:20,400
working with github

00:01:17,119 --> 00:01:23,040
uh to publish series

00:01:20,400 --> 00:01:24,159
uh and then we'll conclude the talk uh

00:01:23,040 --> 00:01:27,439
we will not

00:01:24,159 --> 00:01:30,079
go into the you know the full software

00:01:27,439 --> 00:01:31,119
development life cycle and security will

00:01:30,079 --> 00:01:34,240
pretty much you know

00:01:31,119 --> 00:01:37,040
focus on the coding aspect

00:01:34,240 --> 00:01:38,840
uh in other things are out of scope for

00:01:37,040 --> 00:01:40,960
this talk

00:01:38,840 --> 00:01:42,799
so all right um

00:01:40,960 --> 00:01:44,720
so there are a couple of things that we

00:01:42,799 --> 00:01:46,000
really want to emphasize here you know

00:01:44,720 --> 00:01:48,159
as far as these

00:01:46,000 --> 00:01:49,439
uh secure coding practices are concerned

00:01:48,159 --> 00:01:52,640
the first one is

00:01:49,439 --> 00:01:54,880
you know identify uh

00:01:52,640 --> 00:01:58,240
you know high securities areas right

00:01:54,880 --> 00:02:01,200
that you want to pay a special attention

00:01:58,240 --> 00:02:03,439
um and you know how do you do that well

00:02:01,200 --> 00:02:05,840
refer to your project architecture right

00:02:03,439 --> 00:02:09,599
uh your software architecture that will

00:02:05,840 --> 00:02:11,840
help you to identify those areas where

00:02:09,599 --> 00:02:13,280
you know that it needs a special

00:02:11,840 --> 00:02:16,319
attention

00:02:13,280 --> 00:02:19,520
and we'll talk more about those

00:02:16,319 --> 00:02:21,440
checklists in the next slide then we'll

00:02:19,520 --> 00:02:23,120
talk about you know

00:02:21,440 --> 00:02:24,720
the most important part right the code

00:02:23,120 --> 00:02:28,000
assessment uh

00:02:24,720 --> 00:02:29,200
there are like two main methods in

00:02:28,000 --> 00:02:31,040
automated

00:02:29,200 --> 00:02:32,480
code assessment using the automated

00:02:31,040 --> 00:02:35,200
tools and

00:02:32,480 --> 00:02:37,760
doing the code review manually you want

00:02:35,200 --> 00:02:40,480
to make sure that you define the role

00:02:37,760 --> 00:02:41,440
of the assessment team up front right so

00:02:40,480 --> 00:02:45,120
that will help you

00:02:41,440 --> 00:02:47,519
as you go forward with the process and

00:02:45,120 --> 00:02:49,120
you also want to make sure that you plan

00:02:47,519 --> 00:02:51,040
on how do you

00:02:49,120 --> 00:02:52,720
how you will be addressing the findings

00:02:51,040 --> 00:02:54,640
right in short term

00:02:52,720 --> 00:02:56,319
like you know as soon as possible and

00:02:54,640 --> 00:02:58,879
then

00:02:56,319 --> 00:03:00,319
have it uh plan for the longer term

00:02:58,879 --> 00:03:04,239
something that you can

00:03:00,319 --> 00:03:06,879
uh you know apply so that

00:03:04,239 --> 00:03:07,360
in future you can prevent any any any of

00:03:06,879 --> 00:03:09,280
these

00:03:07,360 --> 00:03:11,440
issues that you ran into it as part of

00:03:09,280 --> 00:03:13,200
your code review

00:03:11,440 --> 00:03:15,760
and then you know depending on your

00:03:13,200 --> 00:03:18,959
project depending on your software

00:03:15,760 --> 00:03:22,480
uh you may want to plan uh

00:03:18,959 --> 00:03:25,200
on on you know publishing the cves right

00:03:22,480 --> 00:03:26,720
you may not need you may um so you

00:03:25,200 --> 00:03:30,080
decided but cbe is

00:03:26,720 --> 00:03:33,440
uh they help you uh you know

00:03:30,080 --> 00:03:35,200
typically uh to disclose uh any security

00:03:33,440 --> 00:03:38,560
flows with your software

00:03:35,200 --> 00:03:40,879
uh publicly right it helps the consumer

00:03:38,560 --> 00:03:44,959
of your software your project

00:03:40,879 --> 00:03:47,599
to stay relevant um all right so

00:03:44,959 --> 00:03:48,159
you know the things will talk they apply

00:03:47,599 --> 00:03:50,879
to

00:03:48,159 --> 00:03:52,879
you know pretty much uh any development

00:03:50,879 --> 00:03:54,239
environments you know any programming

00:03:52,879 --> 00:03:57,280
language that you are using

00:03:54,239 --> 00:04:00,480
but uh for this talk we will use

00:03:57,280 --> 00:04:01,680
uh you know golang and the lcd project

00:04:00,480 --> 00:04:04,959
as an example

00:04:01,680 --> 00:04:06,640
okay all right

00:04:04,959 --> 00:04:08,159
so i mentioned earlier that it's very

00:04:06,640 --> 00:04:11,439
important

00:04:08,159 --> 00:04:14,879
to identify the the areas that

00:04:11,439 --> 00:04:16,959
you think are you know critical crucial

00:04:14,879 --> 00:04:20,000
for your uh project security right

00:04:16,959 --> 00:04:23,440
so here is list of uh some of

00:04:20,000 --> 00:04:26,720
some of these um areas right uh

00:04:23,440 --> 00:04:30,400
you can have more uh than what i'm gonna

00:04:26,720 --> 00:04:32,240
mention here but these are some things

00:04:30,400 --> 00:04:35,759
that you definitely want to

00:04:32,240 --> 00:04:37,520
keep in mind while you uh you know worry

00:04:35,759 --> 00:04:39,120
about the security of your

00:04:37,520 --> 00:04:41,280
your project your software your

00:04:39,120 --> 00:04:44,560
application

00:04:41,280 --> 00:04:47,120
so as you know uh the first steps for

00:04:44,560 --> 00:04:47,600
you know security or software security

00:04:47,120 --> 00:04:49,360
is

00:04:47,600 --> 00:04:50,880
you know it starts with authentication

00:04:49,360 --> 00:04:54,639
right so

00:04:50,880 --> 00:04:57,759
uh for external users for internal users

00:04:54,639 --> 00:05:00,720
you know regardless make sure

00:04:57,759 --> 00:05:02,000
uh you have a a good authentication

00:05:00,720 --> 00:05:05,199
method

00:05:02,000 --> 00:05:06,960
uh in place right and then you know

00:05:05,199 --> 00:05:09,600
you are doing a lot of things like you

00:05:06,960 --> 00:05:10,080
know not just accepting any password

00:05:09,600 --> 00:05:12,560
right

00:05:10,080 --> 00:05:15,840
i have some validations there password

00:05:12,560 --> 00:05:18,479
length and you know that kind of things

00:05:15,840 --> 00:05:19,840
and the the follow-up step is uh

00:05:18,479 --> 00:05:22,720
authorizations right

00:05:19,840 --> 00:05:24,000
so once user get authenticated you're

00:05:22,720 --> 00:05:27,039
just making sure that

00:05:24,000 --> 00:05:29,440
they only have access where they

00:05:27,039 --> 00:05:33,120
are authorized right so you know using

00:05:29,440 --> 00:05:35,039
like a role based access control

00:05:33,120 --> 00:05:36,400
um tls certificates you want to make

00:05:35,039 --> 00:05:40,080
sure that you have a

00:05:36,400 --> 00:05:42,000
encrypted communication right and

00:05:40,080 --> 00:05:43,600
you don't allow the monkey in the middle

00:05:42,000 --> 00:05:46,800
interface

00:05:43,600 --> 00:05:47,840
uh input or data validations you know

00:05:46,800 --> 00:05:50,960
when it did all

00:05:47,840 --> 00:05:54,080
uh input parameters right um

00:05:50,960 --> 00:05:56,960
you know data type length range

00:05:54,080 --> 00:05:59,039
whatever you can think of uh do the

00:05:56,960 --> 00:06:01,199
proper validation

00:05:59,039 --> 00:06:02,160
right uh file permissions it's another

00:06:01,199 --> 00:06:05,120
important area

00:06:02,160 --> 00:06:06,240
uh you know make sure that while

00:06:05,120 --> 00:06:08,560
creating new files

00:06:06,240 --> 00:06:09,840
while working with any existing files

00:06:08,560 --> 00:06:12,160
directories

00:06:09,840 --> 00:06:13,840
you are checking and handling the

00:06:12,160 --> 00:06:15,520
permissions you know and pay special

00:06:13,840 --> 00:06:18,000
attention

00:06:15,520 --> 00:06:20,960
to any third party libraries or tools

00:06:18,000 --> 00:06:22,400
that you are using for file management

00:06:20,960 --> 00:06:25,039
we will actually show you an example

00:06:22,400 --> 00:06:27,360
later in this talk

00:06:25,039 --> 00:06:28,160
error handling uh that's another

00:06:27,360 --> 00:06:31,360
important

00:06:28,160 --> 00:06:32,560
idea for the overall health the security

00:06:31,360 --> 00:06:36,479
of the project

00:06:32,560 --> 00:06:39,680
or software so make sure that

00:06:36,479 --> 00:06:40,639
you know accidentally you're not leaking

00:06:39,680 --> 00:06:43,360
any information

00:06:40,639 --> 00:06:44,080
that can help you know hacks attackers

00:06:43,360 --> 00:06:47,680
write

00:06:44,080 --> 00:06:51,120
for example the password um

00:06:47,680 --> 00:06:54,240
and then locking right uh anything

00:06:51,120 --> 00:06:57,120
that you think uh can helpful towards

00:06:54,240 --> 00:06:57,759
uh identifying any security issues uh

00:06:57,120 --> 00:06:59,840
you know

00:06:57,759 --> 00:07:02,160
uh alerts right you you should be

00:06:59,840 --> 00:07:03,440
logging it

00:07:02,160 --> 00:07:05,599
you know that can help you with the

00:07:03,440 --> 00:07:07,120
auditing purpose later on like where the

00:07:05,599 --> 00:07:11,440
request is coming from

00:07:07,120 --> 00:07:11,440
uh who is sending the request right

00:07:12,080 --> 00:07:15,599
data exposure to make sure that you are

00:07:15,280 --> 00:07:18,639
not

00:07:15,599 --> 00:07:19,520
exposing any sensitive data uh so keep

00:07:18,639 --> 00:07:22,080
that in mind

00:07:19,520 --> 00:07:25,360
and you know the last but not least is

00:07:22,080 --> 00:07:29,680
uh if you are using a third party

00:07:25,360 --> 00:07:31,759
tools uh then make sure uh you know you

00:07:29,680 --> 00:07:33,840
you you use their latest release right

00:07:31,759 --> 00:07:38,080
and you keep buying any

00:07:33,840 --> 00:07:38,080
cve advisories okay uh

00:07:38,400 --> 00:07:45,440
all right um so

00:07:42,319 --> 00:07:48,879
code analysis uh as i mentioned earlier

00:07:45,440 --> 00:07:53,120
uh that that is critical uh

00:07:48,879 --> 00:07:55,840
for the uh you know overall security of

00:07:53,120 --> 00:07:58,319
uh your code right uh just making sure

00:07:55,840 --> 00:08:00,479
that uh

00:07:58,319 --> 00:08:02,639
you you know things up front while your

00:08:00,479 --> 00:08:03,199
development or you know after your codes

00:08:02,639 --> 00:08:05,680
in place

00:08:03,199 --> 00:08:06,319
right make sure you you do the

00:08:05,680 --> 00:08:08,720
assessment

00:08:06,319 --> 00:08:11,120
right um and there are two main ways um

00:08:08,720 --> 00:08:14,160
either it's going to be an automated way

00:08:11,120 --> 00:08:16,720
using the tools or you can do the manual

00:08:14,160 --> 00:08:18,800
code review

00:08:16,720 --> 00:08:20,479
so when you talk about automated tools

00:08:18,800 --> 00:08:22,479
you know you have uh

00:08:20,479 --> 00:08:24,400
you know either going to use the static

00:08:22,479 --> 00:08:27,599
tools right that can

00:08:24,400 --> 00:08:30,800
prevent uh you know uh

00:08:27,599 --> 00:08:31,759
you know mistakes that can you know if

00:08:30,800 --> 00:08:34,080
not directly

00:08:31,759 --> 00:08:35,039
uh maybe indirectly impact your security

00:08:34,080 --> 00:08:36,959
uh off code

00:08:35,039 --> 00:08:39,200
right so for example like variable

00:08:36,959 --> 00:08:41,120
shadowing you know the unreachable code

00:08:39,200 --> 00:08:43,120
right so

00:08:41,120 --> 00:08:44,240
um i'm sure you know most programming

00:08:43,120 --> 00:08:47,760
languages they have

00:08:44,240 --> 00:08:48,720
uh tools uh specific the language right

00:08:47,760 --> 00:08:51,760
for go

00:08:48,720 --> 00:08:53,600
you have actually a whole list of

00:08:51,760 --> 00:08:55,920
tools available i have provided link

00:08:53,600 --> 00:08:58,000
here how you can take a look uh

00:08:55,920 --> 00:08:59,839
to see the whole list but like you know

00:08:58,000 --> 00:09:03,040
those like go wait static check

00:08:59,839 --> 00:09:03,040
you should be using

00:09:03,200 --> 00:09:09,760
and then uh dynamic tools right so like

00:09:06,320 --> 00:09:12,959
fuzzer right uh that can help you

00:09:09,760 --> 00:09:16,480
find uh bugs by you know they

00:09:12,959 --> 00:09:19,839
by automatically injecting uh randomly

00:09:16,480 --> 00:09:22,959
uh injecting uh data and and you know

00:09:19,839 --> 00:09:25,920
uh find uh

00:09:22,959 --> 00:09:26,880
you know different kinds of uh bugs

00:09:25,920 --> 00:09:30,240
based on their

00:09:26,880 --> 00:09:32,240
the injection data injection

00:09:30,240 --> 00:09:33,279
uh the second thing is manual code

00:09:32,240 --> 00:09:36,399
review uh

00:09:33,279 --> 00:09:37,519
you know tools are great they can take a

00:09:36,399 --> 00:09:40,399
look at the code

00:09:37,519 --> 00:09:42,560
automatically you know and and point out

00:09:40,399 --> 00:09:43,519
to the possible issues but definitely a

00:09:42,560 --> 00:09:46,720
human needs to

00:09:43,519 --> 00:09:48,640
verify those issues right and make sure

00:09:46,720 --> 00:09:52,560
they are the real issues

00:09:48,640 --> 00:09:54,800
and you know also uh

00:09:52,560 --> 00:09:57,279
the development team they should be you

00:09:54,800 --> 00:09:59,440
know doing the thorough code review

00:09:57,279 --> 00:10:01,200
of all the areas we talked about right

00:09:59,440 --> 00:10:04,320
and make sure

00:10:01,200 --> 00:10:06,480
that it looks good to them right um

00:10:04,320 --> 00:10:07,440
and keep in mind that there's no

00:10:06,480 --> 00:10:09,440
alternative to

00:10:07,440 --> 00:10:12,880
you know manual code review right that

00:10:09,440 --> 00:10:12,880
is critically important

00:10:13,120 --> 00:10:19,440
um all right so you know with that uh

00:10:16,800 --> 00:10:20,240
you know before we talk more about a cd

00:10:19,440 --> 00:10:22,320
security

00:10:20,240 --> 00:10:24,480
model before we talk about uh some of

00:10:22,320 --> 00:10:26,320
the examples of the vulnerabilities that

00:10:24,480 --> 00:10:29,440
we ran into

00:10:26,320 --> 00:10:32,000
uh as part of the audit right and

00:10:29,440 --> 00:10:33,200
and you know how we address them let me

00:10:32,000 --> 00:10:35,600
just briefly mention

00:10:33,200 --> 00:10:36,399
about lcd you might already know it

00:10:35,600 --> 00:10:39,440
right that

00:10:36,399 --> 00:10:40,959
hd is an open source distributed qle

00:10:39,440 --> 00:10:44,160
store

00:10:40,959 --> 00:10:47,200
uh it you know

00:10:44,160 --> 00:10:49,839
provides you consistency

00:10:47,200 --> 00:10:50,480
and high availability and it is used to

00:10:49,839 --> 00:10:52,320
store

00:10:50,480 --> 00:10:54,560
critical data of a distributed system so

00:10:52,320 --> 00:10:58,880
for example kubernetes store

00:10:54,560 --> 00:11:01,839
all its cluster data in hcd

00:10:58,880 --> 00:11:02,640
the diagram here uh it just shows a

00:11:01,839 --> 00:11:05,920
single

00:11:02,640 --> 00:11:09,120
node hd cluster uh as you can see has to

00:11:05,920 --> 00:11:11,440
use raft consistence algorithm

00:11:09,120 --> 00:11:12,560
uh to maintain the replicated states and

00:11:11,440 --> 00:11:15,680
the data

00:11:12,560 --> 00:11:16,800
are first persistent white uh storing

00:11:15,680 --> 00:11:18,800
disk

00:11:16,800 --> 00:11:20,880
uh typically in productions uh you would

00:11:18,800 --> 00:11:24,399
use uh three to

00:11:20,880 --> 00:11:27,760
five node cluster uh

00:11:24,399 --> 00:11:30,240
the lcd is a it's a you know

00:11:27,760 --> 00:11:33,040
it's a cncf project and you can learn

00:11:30,240 --> 00:11:35,200
more about it on etsy.io

00:11:33,040 --> 00:11:37,360
and the hd community they love new

00:11:35,200 --> 00:11:40,320
contributors you know that helps

00:11:37,360 --> 00:11:42,320
grow the growth of the project the you

00:11:40,320 --> 00:11:44,800
know makes the project better so

00:11:42,320 --> 00:11:46,480
you know um if you're interested please

00:11:44,800 --> 00:11:48,160
contribute

00:11:46,480 --> 00:11:49,680
uh you can find more details on

00:11:48,160 --> 00:11:52,240
contribution guidelines

00:11:49,680 --> 00:11:54,160
and you know uh other things on the

00:11:52,240 --> 00:11:57,920
development environments and whatnot

00:11:54,160 --> 00:11:57,920
on the gita repo

00:11:58,000 --> 00:12:01,839
um all right with that uh i will hand it

00:12:00,800 --> 00:12:04,320
over to

00:12:01,839 --> 00:12:04,959
mitaki to talk about its city security

00:12:04,320 --> 00:12:07,600
model

00:12:04,959 --> 00:12:10,800
and you know some of the examples so

00:12:07,600 --> 00:12:12,720
medaki to you okay

00:12:10,800 --> 00:12:14,320
let me introduce the security model

00:12:12,720 --> 00:12:16,560
opacity

00:12:14,320 --> 00:12:17,440
it's the clients and it's these servers

00:12:16,560 --> 00:12:21,040
communicate with

00:12:17,440 --> 00:12:22,399
jrpc over tcp it's also possible to use

00:12:21,040 --> 00:12:26,000
grpc proxy for

00:12:22,399 --> 00:12:28,240
multiplexing at the clients etsy servers

00:12:26,000 --> 00:12:32,800
use a specialized http protocol

00:12:28,240 --> 00:12:35,200
named after http and the tcp connections

00:12:32,800 --> 00:12:37,760
used for jrpc and http protocols are

00:12:35,200 --> 00:12:39,440
encrypted and authenticated with trls if

00:12:37,760 --> 00:12:41,519
our cluster follows a recommended

00:12:39,440 --> 00:12:44,240
configuration

00:12:41,519 --> 00:12:46,560
we also have a component named gateway

00:12:44,240 --> 00:12:49,200
this is a component which only lays tcp

00:12:46,560 --> 00:12:51,120
connections between clients and servers

00:12:49,200 --> 00:12:54,240
this is a component which only helps

00:12:51,120 --> 00:12:57,040
discover your bentley cluster

00:12:54,240 --> 00:12:57,040
visible next

00:12:59,040 --> 00:13:02,079
and if a user needs more fine-grained

00:13:01,200 --> 00:13:04,320
access control

00:13:02,079 --> 00:13:06,320
keys the 3d provides artwork-based

00:13:04,320 --> 00:13:08,000
authentication and authorization as an

00:13:06,320 --> 00:13:10,639
optional feature

00:13:08,000 --> 00:13:11,519
with this feature we can grant

00:13:10,639 --> 00:13:14,399
permission to

00:13:11,519 --> 00:13:16,240
read and or write about specific gear

00:13:14,399 --> 00:13:18,399
range to users

00:13:16,240 --> 00:13:19,360
from the cluster use this feature

00:13:18,399 --> 00:13:21,200
servers have

00:13:19,360 --> 00:13:22,880
two options for authenticating and

00:13:21,200 --> 00:13:25,839
authorizing users

00:13:22,880 --> 00:13:26,639
one is using authenticate jrpc method in

00:13:25,839 --> 00:13:28,480
this case

00:13:26,639 --> 00:13:30,320
clients invoke the method during

00:13:28,480 --> 00:13:33,600
initializing the client plot

00:13:30,320 --> 00:13:35,440
object information of authenticated user

00:13:33,600 --> 00:13:38,160
is stored in a job

00:13:35,440 --> 00:13:38,560
token returned by the server another

00:13:38,160 --> 00:13:41,120
option

00:13:38,560 --> 00:13:42,720
is using commonly period of trs

00:13:41,120 --> 00:13:44,800
certificate

00:13:42,720 --> 00:13:48,160
in this case no password-based

00:13:44,800 --> 00:13:50,480
authentication is required

00:13:48,160 --> 00:13:52,639
this mechanism also supports limiting uh

00:13:50,480 --> 00:13:54,320
special administrative observations like

00:13:52,639 --> 00:13:56,959
membership change

00:13:54,320 --> 00:13:58,720
the special user root is the only user

00:13:56,959 --> 00:14:01,360
which is allowed to execute such

00:13:58,720 --> 00:14:01,360
applications

00:14:06,880 --> 00:14:10,399
let me introduce the security audit

00:14:09,040 --> 00:14:12,959
project

00:14:10,399 --> 00:14:14,160
it's liquidity performed security audit

00:14:12,959 --> 00:14:17,360
last year

00:14:14,160 --> 00:14:20,720
cnc supported this third-party audit

00:14:17,360 --> 00:14:22,639
and trailer bit helped this project

00:14:20,720 --> 00:14:24,639
you can download the full report of the

00:14:22,639 --> 00:14:27,199
audit from the url

00:14:24,639 --> 00:14:29,120
we will introduce some findings from the

00:14:27,199 --> 00:14:31,920
report

00:14:29,120 --> 00:14:31,920
critical things

00:14:33,600 --> 00:14:37,040
the first example is an issue related to

00:14:36,079 --> 00:14:40,639
logs

00:14:37,040 --> 00:14:42,639
a cd has a problem of inaudible related

00:14:40,639 --> 00:14:43,519
to failed authentication attempts for

00:14:42,639 --> 00:14:45,839
users

00:14:43,519 --> 00:14:47,920
which can only be used with common name

00:14:45,839 --> 00:14:50,639
based authentication

00:14:47,920 --> 00:14:52,480
as i mentioned earlier silly supports

00:14:50,639 --> 00:14:54,079
multiple user authentication mechanisms

00:14:52,480 --> 00:14:56,399
for our work

00:14:54,079 --> 00:14:58,240
username password-based upload and

00:14:56,399 --> 00:14:59,680
common name of the trs certificate

00:14:58,240 --> 00:15:02,000
approach

00:14:59,680 --> 00:15:03,199
especially for the other one it's only

00:15:02,000 --> 00:15:05,760
supposed to create

00:15:03,199 --> 00:15:07,360
users which only support commonly based

00:15:05,760 --> 00:15:09,120
authentication

00:15:07,360 --> 00:15:11,360
which doesn't support username plus

00:15:09,120 --> 00:15:14,000
password-based approach

00:15:11,360 --> 00:15:15,120
when a client applies authentication

00:15:14,000 --> 00:15:18,320
with password

00:15:15,120 --> 00:15:21,279
for such a user a cd log

00:15:18,320 --> 00:15:22,079
isn't useful for understanding that the

00:15:21,279 --> 00:15:25,360
client gave

00:15:22,079 --> 00:15:25,760
a wrong password or user gave a password

00:15:25,360 --> 00:15:29,040
to

00:15:25,760 --> 00:15:31,519
no password user it is harmful for

00:15:29,040 --> 00:15:32,800
auditing failed attempts for from the

00:15:31,519 --> 00:15:34,959
box

00:15:32,800 --> 00:15:37,120
we fixed the issue by adding the new

00:15:34,959 --> 00:15:37,759
record for representing such a failed

00:15:37,120 --> 00:15:41,759
attempt

00:15:37,759 --> 00:15:46,880
and make the log clearer

00:15:41,759 --> 00:15:46,880
next i'm not sure

00:15:47,600 --> 00:15:53,199
the next example is related to gateway

00:15:50,720 --> 00:15:55,600
gateway there is tcp connection between

00:15:53,199 --> 00:15:57,600
sv client and servo

00:15:55,600 --> 00:15:59,279
the component doesn't validate

00:15:57,600 --> 00:16:02,639
acceptance of trs connection

00:15:59,279 --> 00:16:06,320
to its endpoint it only checks

00:16:02,639 --> 00:16:08,639
tcp itability during initialization

00:16:06,320 --> 00:16:10,800
so if the pain if the endpoints are

00:16:08,639 --> 00:16:11,360
misconfigured and appoint a malicious

00:16:10,800 --> 00:16:14,880
server

00:16:11,360 --> 00:16:17,600
accidentally they can receive

00:16:14,880 --> 00:16:19,120
data sent by the clients if the clients

00:16:17,600 --> 00:16:22,959
don't use tls

00:16:19,120 --> 00:16:24,959
probably properly gateway is a component

00:16:22,959 --> 00:16:25,519
which only helps discovery of the

00:16:24,959 --> 00:16:28,720
cluster

00:16:25,519 --> 00:16:30,800
and doesn't tell me a tals connection

00:16:28,720 --> 00:16:32,399
using theories is the responsibility of

00:16:30,800 --> 00:16:35,440
the development

00:16:32,399 --> 00:16:38,399
we fixed the ambiguity of this program

00:16:35,440 --> 00:16:38,399
in the documentation

00:16:40,959 --> 00:16:47,199
sure the next

00:16:44,160 --> 00:16:49,040
example is related to metric total

00:16:47,199 --> 00:16:51,759
number of database key is compounded

00:16:49,040 --> 00:16:53,680
battery was never changed

00:16:51,759 --> 00:16:55,839
this is because the code of conduction

00:16:53,680 --> 00:16:58,880
will work the statement of increment

00:16:55,839 --> 00:17:01,519
the variable for the metric

00:16:58,880 --> 00:17:04,000
the issue can result with understanding

00:17:01,519 --> 00:17:06,160
about the resource usage

00:17:04,000 --> 00:17:08,079
at the time of auditing the issue was

00:17:06,160 --> 00:17:08,959
already fixed in the master blanche but

00:17:08,079 --> 00:17:12,880
the fix wasn't

00:17:08,959 --> 00:17:12,880
but ported to the stable bbc's

00:17:13,760 --> 00:17:20,720
okay next and i'd like to handle it

00:17:17,679 --> 00:17:23,039
sure uh you want me to talk on this

00:17:20,720 --> 00:17:26,480
mitagi

00:17:23,039 --> 00:17:28,000
yeah okay thank you hey uh thank you so

00:17:26,480 --> 00:17:31,039
much again uh

00:17:28,000 --> 00:17:33,840
so all right a couple more examples

00:17:31,039 --> 00:17:35,440
right uh mitaki did explained a few of

00:17:33,840 --> 00:17:37,120
them i'll talk about couple more

00:17:35,440 --> 00:17:40,480
examples here

00:17:37,120 --> 00:17:40,960
uh so very uh you know a small snippet

00:17:40,480 --> 00:17:43,919
here

00:17:40,960 --> 00:17:45,200
um which is basically doing nothing but

00:17:43,919 --> 00:17:49,520
creating a new directory

00:17:45,200 --> 00:17:53,760
by calling make their all do you see any

00:17:49,520 --> 00:17:57,280
security issue in this snippet

00:17:53,760 --> 00:18:00,320
well i wish we were talking in person

00:17:57,280 --> 00:18:03,679
and i could see the raised hands

00:18:00,320 --> 00:18:08,000
uh you know besides mitaki smiling

00:18:03,679 --> 00:18:08,480
uh but uh we're recording so i will go

00:18:08,000 --> 00:18:12,720
ahead

00:18:08,480 --> 00:18:15,840
and show what's wrong here

00:18:12,720 --> 00:18:15,840
right well so

00:18:16,080 --> 00:18:20,640
the problem here is if the provided

00:18:19,520 --> 00:18:23,919
directory path

00:18:20,640 --> 00:18:26,000
is already existing right it's

00:18:23,919 --> 00:18:27,039
it's an existing directory then the

00:18:26,000 --> 00:18:30,080
maker all

00:18:27,039 --> 00:18:32,080
does nothing and it returns new so then

00:18:30,080 --> 00:18:33,760
the flow continues right

00:18:32,080 --> 00:18:35,919
with the nail you are controlling the

00:18:33,760 --> 00:18:39,360
flow that's what the project was doing

00:18:35,919 --> 00:18:41,200
and uh

00:18:39,360 --> 00:18:42,480
that's not something we were expecting

00:18:41,200 --> 00:18:44,799
right uh

00:18:42,480 --> 00:18:46,160
because what happens if there is an

00:18:44,799 --> 00:18:51,679
existing directory with

00:18:46,160 --> 00:18:53,280
uh you know 777 uh permission mode right

00:18:51,679 --> 00:18:54,720
somebody could have created that

00:18:53,280 --> 00:18:58,080
directory upfront

00:18:54,720 --> 00:19:00,720
with extra permissions there and

00:18:58,080 --> 00:19:02,000
you know with some malicious desire and

00:19:00,720 --> 00:19:06,960
you know could hurt

00:19:02,000 --> 00:19:10,240
uh the the project uh

00:19:06,960 --> 00:19:14,080
you know running ncd eventually right

00:19:10,240 --> 00:19:17,760
so the fix was you know to make sure

00:19:14,080 --> 00:19:19,919
that if the directory exists then uh

00:19:17,760 --> 00:19:22,320
it has the desired permission if not

00:19:19,919 --> 00:19:26,160
then you know we will

00:19:22,320 --> 00:19:29,919
consider that as an error case right um

00:19:26,160 --> 00:19:32,640
so that's how it was fixed

00:19:29,919 --> 00:19:33,679
right uh it was pretty quick fix small

00:19:32,640 --> 00:19:36,720
fix but

00:19:33,679 --> 00:19:40,080
could have uh you know

00:19:36,720 --> 00:19:43,919
security related uh problem

00:19:40,080 --> 00:19:44,480
if not handled um so another snippet

00:19:43,919 --> 00:19:46,880
here

00:19:44,480 --> 00:19:48,720
uh another small snippet you know we we

00:19:46,880 --> 00:19:52,080
try to put uh some of the smaller

00:19:48,720 --> 00:19:54,799
uh issues here uh

00:19:52,080 --> 00:19:56,480
so data validation rights uh remember i

00:19:54,799 --> 00:19:59,280
mentioned earlier the input data

00:19:56,480 --> 00:20:00,240
validation uh is very important and you

00:19:59,280 --> 00:20:02,240
want to

00:20:00,240 --> 00:20:03,760
basically validate you know everything

00:20:02,240 --> 00:20:06,400
right

00:20:03,760 --> 00:20:07,760
if you don't then that could hurt the

00:20:06,400 --> 00:20:11,039
running

00:20:07,760 --> 00:20:11,039
project right so

00:20:11,280 --> 00:20:15,280
the parts compaction retention function

00:20:14,240 --> 00:20:17,919
uh

00:20:15,280 --> 00:20:19,200
do you see what's wrong here any

00:20:17,919 --> 00:20:21,840
security issues

00:20:19,200 --> 00:20:22,240
well again i wish we had to raise ends

00:20:21,840 --> 00:20:26,159
but

00:20:22,240 --> 00:20:28,480
let me go ahead here so the problem here

00:20:26,159 --> 00:20:29,679
as you can see the string conversion

00:20:28,480 --> 00:20:34,240
functions right

00:20:29,679 --> 00:20:37,840
uh the written value can be negative

00:20:34,240 --> 00:20:40,480
and uh that's not an error case

00:20:37,840 --> 00:20:41,919
okay you can write a negative value and

00:20:40,480 --> 00:20:45,840
that's not my error case

00:20:41,919 --> 00:20:48,000
and as you could see the

00:20:45,840 --> 00:20:49,039
project you know we weren't handling the

00:20:48,000 --> 00:20:50,640
issue right

00:20:49,039 --> 00:20:52,799
and we were just checking the error and

00:20:50,640 --> 00:20:53,520
if that's me we will just go ahead and

00:20:52,799 --> 00:20:56,799
you know

00:20:53,520 --> 00:20:58,080
continue the flow uh the secret issue

00:20:56,799 --> 00:21:00,799
here was

00:20:58,080 --> 00:21:01,360
if someone uh you know who has that

00:21:00,799 --> 00:21:04,080
access

00:21:01,360 --> 00:21:05,280
right that that role who could uh

00:21:04,080 --> 00:21:07,120
misconfigure

00:21:05,280 --> 00:21:08,720
the art of competition compaction

00:21:07,120 --> 00:21:12,400
retention

00:21:08,720 --> 00:21:14,240
uh by setting it to negative or you know

00:21:12,400 --> 00:21:16,080
maybe accidentally right but if it's set

00:21:14,240 --> 00:21:19,440
to negative value then

00:21:16,080 --> 00:21:22,640
you know that could impact uh

00:21:19,440 --> 00:21:23,760
the absolute uh you know the process

00:21:22,640 --> 00:21:26,080
right

00:21:23,760 --> 00:21:26,960
it may not work properly as expected

00:21:26,080 --> 00:21:29,440
right

00:21:26,960 --> 00:21:30,000
because that would be that could be like

00:21:29,440 --> 00:21:32,799
a forever

00:21:30,000 --> 00:21:35,280
compacting um fill up the disk space and

00:21:32,799 --> 00:21:35,280
whatnot

00:21:35,360 --> 00:21:39,919
so the solution again here was simple

00:21:37,919 --> 00:21:40,400
you know just not to accept any negative

00:21:39,919 --> 00:21:43,440
value

00:21:40,400 --> 00:21:48,000
and you know handle it

00:21:43,440 --> 00:21:48,559
properly the other thing i would mention

00:21:48,000 --> 00:21:51,600
here

00:21:48,559 --> 00:21:54,480
is the documentation right we

00:21:51,600 --> 00:21:54,480
need to make sure

00:21:55,200 --> 00:22:01,919
that you have a proper

00:21:58,480 --> 00:22:03,919
documentation uh for the for the you

00:22:01,919 --> 00:22:06,080
know for the for the soft right in the

00:22:03,919 --> 00:22:08,080
code

00:22:06,080 --> 00:22:10,320
uh you may not see that as an you know

00:22:08,080 --> 00:22:12,320
direct impacting direct impact on your

00:22:10,320 --> 00:22:15,520
security uh

00:22:12,320 --> 00:22:17,120
for the project but but you know three

00:22:15,520 --> 00:22:19,280
of the report issues that

00:22:17,120 --> 00:22:20,880
we had in uh city secure audits they

00:22:19,280 --> 00:22:24,400
were related to the documentations

00:22:20,880 --> 00:22:27,200
and and naming of functions

00:22:24,400 --> 00:22:28,240
so you know we had a couple functions

00:22:27,200 --> 00:22:31,360
they were

00:22:28,240 --> 00:22:33,440
uh having a misleading name um

00:22:31,360 --> 00:22:35,200
again that happens accidentally and you

00:22:33,440 --> 00:22:37,520
know something that were not

00:22:35,200 --> 00:22:38,320
caught as part of uh in a good review

00:22:37,520 --> 00:22:42,880
while

00:22:38,320 --> 00:22:46,159
you know those pull requests right um

00:22:42,880 --> 00:22:48,159
and then we had uh a couple of uh

00:22:46,159 --> 00:22:50,000
you know misleading uh documentation

00:22:48,159 --> 00:22:51,760
right description so

00:22:50,000 --> 00:22:53,600
you know that that as i said you know

00:22:51,760 --> 00:22:57,280
that that ended uh

00:22:53,600 --> 00:23:00,480
up as in three reported issues by

00:22:57,280 --> 00:23:02,080
the auditing team uh so you know the

00:23:00,480 --> 00:23:05,360
lack of documentations

00:23:02,080 --> 00:23:07,039
or not enough coverage right or poor

00:23:05,360 --> 00:23:09,280
naming of functions

00:23:07,039 --> 00:23:10,240
they can create confusions right during

00:23:09,280 --> 00:23:12,960
the code

00:23:10,240 --> 00:23:14,000
review process and that can impact

00:23:12,960 --> 00:23:17,039
productivity and

00:23:14,000 --> 00:23:20,159
it can also mislead users so

00:23:17,039 --> 00:23:22,480
uh you want to keep in mind that

00:23:20,159 --> 00:23:24,720
you know you have a good documentations

00:23:22,480 --> 00:23:24,720
right

00:23:25,120 --> 00:23:30,400
the other thing i want to cover is uh

00:23:28,400 --> 00:23:32,320
you know before i hand it over to metaki

00:23:30,400 --> 00:23:36,000
again

00:23:32,320 --> 00:23:39,440
is uh this is something we learned

00:23:36,000 --> 00:23:41,919
as part of uh the auditing process right

00:23:39,440 --> 00:23:43,039
uh as as i mentioned earlier the cves

00:23:41,919 --> 00:23:46,240
are important

00:23:43,039 --> 00:23:49,360
and uh you know they can uh

00:23:46,240 --> 00:23:52,480
basically help you to to

00:23:49,360 --> 00:23:53,919
you know disclose uh the security flaws

00:23:52,480 --> 00:23:56,880
issues publicly

00:23:53,919 --> 00:23:57,600
uh and so that the users of project

00:23:56,880 --> 00:24:00,640
software

00:23:57,600 --> 00:24:00,640
uh stay relevant

00:24:00,799 --> 00:24:05,679
uh the process can be confusing uh but

00:24:03,600 --> 00:24:08,720
we learned during this process

00:24:05,679 --> 00:24:11,919
you know the security audit process that

00:24:08,720 --> 00:24:14,880
we can use the relatively new features

00:24:11,919 --> 00:24:17,440
which is integrated part of github

00:24:14,880 --> 00:24:18,480
to request and publish cvs and

00:24:17,440 --> 00:24:22,480
advisories right

00:24:18,480 --> 00:24:23,039
so we just tried that and you know we

00:24:22,480 --> 00:24:26,480
loved it

00:24:23,039 --> 00:24:28,240
that was easy to use uh and very you

00:24:26,480 --> 00:24:29,919
know this can be very handy for you

00:24:28,240 --> 00:24:31,279
if your project is hosted on github

00:24:29,919 --> 00:24:34,000
right and

00:24:31,279 --> 00:24:34,640
you want to publish advisories and you

00:24:34,000 --> 00:24:37,840
know

00:24:34,640 --> 00:24:39,679
cves right because

00:24:37,840 --> 00:24:41,360
now everything you're doing is is on

00:24:39,679 --> 00:24:45,600
github you know you're not going

00:24:41,360 --> 00:24:49,840
to like a military websites or you know

00:24:45,600 --> 00:24:50,960
anywhere else uh to work on cvs right

00:24:49,840 --> 00:24:54,320
the publishing uh

00:24:50,960 --> 00:24:56,640
other stuff so if you uh

00:24:54,320 --> 00:24:57,520
have an admit admin access to your

00:24:56,640 --> 00:25:01,279
github repo

00:24:57,520 --> 00:25:04,400
right then you you will actually see

00:25:01,279 --> 00:25:07,679
under the security tab and

00:25:04,400 --> 00:25:09,919
option to you know to draft security

00:25:07,679 --> 00:25:13,120
advisory

00:25:09,919 --> 00:25:15,279
excuse me and

00:25:13,120 --> 00:25:17,120
uh the you know the other great thing

00:25:15,279 --> 00:25:18,000
here is you can actually privately

00:25:17,120 --> 00:25:20,960
discuss

00:25:18,000 --> 00:25:23,520
uh and and you know the issues and fix

00:25:20,960 --> 00:25:25,039
issues with your code changes and it's

00:25:23,520 --> 00:25:26,000
all private and then you basically

00:25:25,039 --> 00:25:28,320
publish

00:25:26,000 --> 00:25:29,840
you know after having reviews uh in your

00:25:28,320 --> 00:25:31,919
internal teams right uh

00:25:29,840 --> 00:25:34,799
a team of maintainers for example right

00:25:31,919 --> 00:25:37,919
or interested parties

00:25:34,799 --> 00:25:38,400
and then you basically you know uh push

00:25:37,919 --> 00:25:42,799
them

00:25:38,400 --> 00:25:45,440
uh those changes to your repository um

00:25:42,799 --> 00:25:46,960
it also has a really good template uh

00:25:45,440 --> 00:25:50,159
you know it shows what kind of

00:25:46,960 --> 00:25:53,600
uh vulnerability is it right the one

00:25:50,159 --> 00:25:56,799
that you are interested in publishing uh

00:25:53,600 --> 00:26:01,600
who is impacted you know any

00:25:56,799 --> 00:26:01,600
any problem

00:26:02,480 --> 00:26:08,840
that has been patched

00:26:05,520 --> 00:26:10,000
what version should the user of software

00:26:08,840 --> 00:26:13,039
project

00:26:10,000 --> 00:26:15,440
uh you know they should upgrade to right

00:26:13,039 --> 00:26:17,200
and and if there's any work around so it

00:26:15,440 --> 00:26:18,559
it the template allows you to put like a

00:26:17,200 --> 00:26:21,520
good detail that can help

00:26:18,559 --> 00:26:22,320
uh users understand the cv so we want to

00:26:21,520 --> 00:26:25,039
mention because

00:26:22,320 --> 00:26:26,240
as i said this is something we learned

00:26:25,039 --> 00:26:30,080
as as part of the

00:26:26,240 --> 00:26:30,080
security audit process okay

00:26:30,240 --> 00:26:37,120
um with that uh mitaki would you

00:26:33,279 --> 00:26:39,919
would you like to conclude the talk

00:26:37,120 --> 00:26:42,080
uh let me conclude this talk uh yeah

00:26:39,919 --> 00:26:43,279
writing security is challenging but

00:26:42,080 --> 00:26:45,760
possible

00:26:43,279 --> 00:26:47,120
uh for the purpose of the code review

00:26:45,760 --> 00:26:49,919
and various tests

00:26:47,120 --> 00:26:53,360
and uh numbers two starting static

00:26:49,919 --> 00:26:55,840
analyzer and further very helpful

00:26:53,360 --> 00:26:56,480
and also although it costs time and

00:26:55,840 --> 00:26:58,480
budget

00:26:56,480 --> 00:27:00,960
somebody audit is helpful for checking

00:26:58,480 --> 00:27:02,960
the status of the project

00:27:00,960 --> 00:27:05,760
and also making documentation and

00:27:02,960 --> 00:27:06,000
walking is difficult uh it's not trivial

00:27:05,760 --> 00:27:09,039
at

00:27:06,000 --> 00:27:10,240
all and creating and publishing uh cds

00:27:09,039 --> 00:27:12,159
with github is easy

00:27:10,240 --> 00:27:14,080
uh let's utilize the future for managing

00:27:12,159 --> 00:27:16,400
security issues

00:27:14,080 --> 00:27:17,520
and also less popular features can use

00:27:16,400 --> 00:27:19,840
also problems

00:27:17,520 --> 00:27:20,559
in this case of security entity security

00:27:19,840 --> 00:27:22,960
audit

00:27:20,559 --> 00:27:23,760
multiple issues were found in gateway

00:27:22,960 --> 00:27:26,399
features

00:27:23,760 --> 00:27:27,919
which isn't used heavily we need to be

00:27:26,399 --> 00:27:28,399
careful about such features and think

00:27:27,919 --> 00:27:29,919
before

00:27:28,399 --> 00:27:35,840
on the new features for making the

00:27:29,919 --> 00:27:35,840
entire project secure

00:27:38,240 --> 00:27:46,159
let me this is the last slide we have so

00:27:42,960 --> 00:27:48,640
uh uh we want to thank you uh

00:27:46,159 --> 00:27:50,080
you know uh many folks here all the

00:27:48,640 --> 00:27:50,960
contributors of that city all the

00:27:50,080 --> 00:27:53,679
mentors

00:27:50,960 --> 00:27:54,640
right uh especially wanna thanks uh

00:27:53,679 --> 00:27:58,399
siang li

00:27:54,640 --> 00:28:00,880
yoli jingy and brandon philippe they are

00:27:58,399 --> 00:28:02,080
maintainers and they were you know

00:28:00,880 --> 00:28:05,200
integrated part of

00:28:02,080 --> 00:28:07,200
uh you know working with uh

00:28:05,200 --> 00:28:09,200
the security issues that that we

00:28:07,200 --> 00:28:13,200
resolved that came out of the

00:28:09,200 --> 00:28:17,600
lcd security audit uh we

00:28:13,200 --> 00:28:20,880
wanna thank cncf for

00:28:17,600 --> 00:28:21,520
sponsoring the uh the audits are going

00:28:20,880 --> 00:28:25,120
to

00:28:21,520 --> 00:28:26,320
thanks trail of bits for conducting the

00:28:25,120 --> 00:28:29,600
audits

00:28:26,320 --> 00:28:33,120
uh they have great materials you know

00:28:29,600 --> 00:28:34,000
blog post right that can be like a

00:28:33,120 --> 00:28:36,080
really big

00:28:34,000 --> 00:28:38,320
good learning resource for security uh

00:28:36,080 --> 00:28:41,919
understanding the security

00:28:38,320 --> 00:28:44,159
of the project uh we want to thank owasp

00:28:41,919 --> 00:28:45,440
we have a lot of good practices and

00:28:44,159 --> 00:28:48,399
other materials so

00:28:45,440 --> 00:28:50,559
we did refer them those materials we

00:28:48,399 --> 00:28:53,840
definitely thank our employer

00:28:50,559 --> 00:28:56,640
um ibm and indeed uh and

00:28:53,840 --> 00:28:58,559
thank you all of you who are watching

00:28:56,640 --> 00:29:00,559
this video

00:28:58,559 --> 00:29:01,679
all right well thank you so much with

00:29:00,559 --> 00:29:04,720
that

00:29:01,679 --> 00:29:10,240
i think uh we will end the thought

00:29:04,720 --> 00:29:10,240

YouTube URL: https://www.youtube.com/watch?v=wD-K5hHS3rM


