Title: Keynote: Supply Chain: The New Threat Vector in Cloud Native Security - Ali Golshan
Publication date: 2021-05-04
Playlist: Cloud Native Security Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Keynote: Supply Chain: The New Threat Vector in Cloud Native Security - Ali Golshan, Co-founder and CTO, StackRox now Red Hat

At its core, cloud native technologies are heavily dependent on community contributions and developers. As a result, the final stack of tools most organisations run in production are assembled from a series of assets that have been developed outside the organisation. The security and trust in supply chain matters now more than ever. We will discuss how the attack surface in cloud native has shifted from the traditional vectors to the supply chain as well as open source resources, and what we as a community need to do to reduce this risk.
Captions: 
	00:00:00,080 --> 00:00:04,000
hi i'm ali golshan senior director of

00:00:02,560 --> 00:00:05,680
software engineering at red hat

00:00:04,000 --> 00:00:06,799
previously cto and co-founder at

00:00:05,680 --> 00:00:08,080
stackrocks

00:00:06,799 --> 00:00:10,320
today we're going to be talking a little

00:00:08,080 --> 00:00:12,320
bit about supply chain security and why

00:00:10,320 --> 00:00:14,400
recently it has become such a hot topic

00:00:12,320 --> 00:00:16,160
in cloud native technologies

00:00:14,400 --> 00:00:17,600
one of the main things that we have seen

00:00:16,160 --> 00:00:19,920
is this change and

00:00:17,600 --> 00:00:20,720
shift in the attack landscape and attack

00:00:19,920 --> 00:00:22,800
surface

00:00:20,720 --> 00:00:25,439
from traditional exploitation and

00:00:22,800 --> 00:00:27,439
vulnerability exploitation at run time

00:00:25,439 --> 00:00:29,439
towards the supply chain and the reason

00:00:27,439 --> 00:00:31,679
for this is is that very simple

00:00:29,439 --> 00:00:32,480
um it's the fact that on the supply

00:00:31,679 --> 00:00:34,559
chain side

00:00:32,480 --> 00:00:36,480
there is a much more proliferated set of

00:00:34,559 --> 00:00:38,160
tools and solutions to use and there's

00:00:36,480 --> 00:00:40,320
truly no perimeter

00:00:38,160 --> 00:00:43,040
combined with the fact that there's less

00:00:40,320 --> 00:00:44,960
maturity around security tooling

00:00:43,040 --> 00:00:46,800
dev teams need to continuously

00:00:44,960 --> 00:00:48,719
communicate with security teams

00:00:46,800 --> 00:00:50,800
there's generally less controls around

00:00:48,719 --> 00:00:53,840
tools and products

00:00:50,800 --> 00:00:56,480
and the main goal on the developing side

00:00:53,840 --> 00:00:58,399
on the devops side on the left side is

00:00:56,480 --> 00:01:00,480
really lowering friction

00:00:58,399 --> 00:01:02,160
injecting velocity and as a result

00:01:00,480 --> 00:01:04,479
removing any blockers which has

00:01:02,160 --> 00:01:07,119
typically been associated with security

00:01:04,479 --> 00:01:09,600
has created this landscape where attacks

00:01:07,119 --> 00:01:11,840
are starting to grow substantially more

00:01:09,600 --> 00:01:14,400
the other aspect of it is that

00:01:11,840 --> 00:01:15,920
traditional attribution is substantially

00:01:14,400 --> 00:01:18,479
more difficult to apply

00:01:15,920 --> 00:01:20,720
on the supply chain side as a result it

00:01:18,479 --> 00:01:22,880
reduces the risk of discovery

00:01:20,720 --> 00:01:25,680
and it can actually increase the attack

00:01:22,880 --> 00:01:27,840
surface as an attacker you can go after

00:01:25,680 --> 00:01:29,840
this is also why it's very important and

00:01:27,840 --> 00:01:31,840
this is why at red hat we believe

00:01:29,840 --> 00:01:34,320
it's very important for security to be

00:01:31,840 --> 00:01:36,960
built in versus bolted on for developer

00:01:34,320 --> 00:01:38,720
tools and as part of the supply chain

00:01:36,960 --> 00:01:40,560
now what are some of the things that you

00:01:38,720 --> 00:01:42,880
have to consider and be able to make

00:01:40,560 --> 00:01:45,200
sure you take into consideration as part

00:01:42,880 --> 00:01:46,560
of your supply chain security well one

00:01:45,200 --> 00:01:48,320
major question is where am i

00:01:46,560 --> 00:01:50,240
where do my software components come

00:01:48,320 --> 00:01:52,720
from where am i getting my tools where

00:01:50,240 --> 00:01:54,560
am i getting all these particular images

00:01:52,720 --> 00:01:56,560
images and public registries can be

00:01:54,560 --> 00:01:57,360
potentially poisoned with unwanted

00:01:56,560 --> 00:02:00,640
application

00:01:57,360 --> 00:02:03,040
malware back doors or potentially

00:02:00,640 --> 00:02:05,920
components that are unuseful to you

00:02:03,040 --> 00:02:07,680
but could be very useful for attackers

00:02:05,920 --> 00:02:08,959
and for anybody trying to infiltrate

00:02:07,680 --> 00:02:11,360
your network

00:02:08,959 --> 00:02:13,200
in some cases these can be detected with

00:02:11,360 --> 00:02:14,720
static tool analysis

00:02:13,200 --> 00:02:16,400
and this is why it's very important to

00:02:14,720 --> 00:02:17,120
have static analysis as part of your

00:02:16,400 --> 00:02:19,120
system

00:02:17,120 --> 00:02:21,440
however introducing a lot of vanilla

00:02:19,120 --> 00:02:23,840
images and ensuring that there's a large

00:02:21,440 --> 00:02:24,560
touch point to your potentially infected

00:02:23,840 --> 00:02:26,640
images

00:02:24,560 --> 00:02:28,560
can also ensure that the deployment of

00:02:26,640 --> 00:02:29,200
these images increases and eventually

00:02:28,560 --> 00:02:31,680
they make them

00:02:29,200 --> 00:02:33,040
into the stream of the development the

00:02:31,680 --> 00:02:34,480
other part of it is

00:02:33,040 --> 00:02:36,160
vulnerability management and

00:02:34,480 --> 00:02:38,480
configuration management as part of the

00:02:36,160 --> 00:02:40,640
supply chain in a declarative fashion

00:02:38,480 --> 00:02:41,519
is still a substantially unsolved

00:02:40,640 --> 00:02:43,680
problem

00:02:41,519 --> 00:02:45,599
the volume of attacks is increasing

00:02:43,680 --> 00:02:45,920
dramatically suggesting that there's

00:02:45,599 --> 00:02:48,480
more

00:02:45,920 --> 00:02:48,959
and more organized infrastructure and

00:02:48,480 --> 00:02:51,840
some

00:02:48,959 --> 00:02:52,400
targeting of which companies introduce a

00:02:51,840 --> 00:02:54,480
higher

00:02:52,400 --> 00:02:55,680
level of tooling into other companies

00:02:54,480 --> 00:02:57,280
supply chains

00:02:55,680 --> 00:02:58,959
obviously this is an example that we

00:02:57,280 --> 00:03:01,519
recently saw with the

00:02:58,959 --> 00:03:03,440
solar winds attacks combined with the

00:03:01,519 --> 00:03:05,120
attribution we talked about and the

00:03:03,440 --> 00:03:05,920
problem that it presents on the supply

00:03:05,120 --> 00:03:07,280
chain

00:03:05,920 --> 00:03:09,040
poisoning the well can be a

00:03:07,280 --> 00:03:10,319
substantially more lucrative way to

00:03:09,040 --> 00:03:12,959
attack businesses

00:03:10,319 --> 00:03:14,959
versus actively engaging of exploitation

00:03:12,959 --> 00:03:18,159
exploitation of vulnerabilities

00:03:14,959 --> 00:03:20,480
at run time so when we talk about cves

00:03:18,159 --> 00:03:21,680
even though this is an unsolved problem

00:03:20,480 --> 00:03:23,680
there is still a lot of

00:03:21,680 --> 00:03:25,840
gaps that we need to go and figure out

00:03:23,680 --> 00:03:28,159
so we need to pay more attention to it

00:03:25,840 --> 00:03:29,920
um understanding vulnerability packages

00:03:28,159 --> 00:03:31,760
and their dependencies

00:03:29,920 --> 00:03:33,840
these typically create thousands of

00:03:31,760 --> 00:03:35,440
alerts and there's no good way to triage

00:03:33,840 --> 00:03:37,120
these understanding what are they

00:03:35,440 --> 00:03:39,840
actually relevant to

00:03:37,120 --> 00:03:42,239
which ones can be solved or upgraded if

00:03:39,840 --> 00:03:44,480
they are upgraded what can they break

00:03:42,239 --> 00:03:45,599
um which ones are actually exposed to me

00:03:44,480 --> 00:03:47,440
in runtime

00:03:45,599 --> 00:03:50,560
are they allowing for permissive attack

00:03:47,440 --> 00:03:52,000
surface do i have proper configurations

00:03:50,560 --> 00:03:53,439
to be able to prevent them

00:03:52,000 --> 00:03:55,760
and more importantly which ones are

00:03:53,439 --> 00:03:57,920
actually being exploited into the wild

00:03:55,760 --> 00:04:00,640
so i can push that information back to

00:03:57,920 --> 00:04:02,720
my engineers to my developers to reduce

00:04:00,640 --> 00:04:03,760
that time in resolving those particular

00:04:02,720 --> 00:04:05,439
problems

00:04:03,760 --> 00:04:07,519
now typically one of the things that we

00:04:05,439 --> 00:04:10,319
have seen from supply chain attacks and

00:04:07,519 --> 00:04:11,840
general attacks on misconfigurations

00:04:10,319 --> 00:04:13,840
really the way we can solve these

00:04:11,840 --> 00:04:15,840
problems through a declarative fashion

00:04:13,840 --> 00:04:17,840
the problems have centered around mostly

00:04:15,840 --> 00:04:19,040
for example installing cryptocurrency

00:04:17,840 --> 00:04:20,799
miners

00:04:19,040 --> 00:04:22,880
or establishing a footprint for

00:04:20,799 --> 00:04:24,960
distributed dental service attacks

00:04:22,880 --> 00:04:26,000
but more recently we have started to see

00:04:24,960 --> 00:04:28,639
a substantially more

00:04:26,000 --> 00:04:29,759
targeted approach for supply chain

00:04:28,639 --> 00:04:31,919
attacks

00:04:29,759 --> 00:04:34,080
again being able to push yourself into a

00:04:31,919 --> 00:04:36,000
stream where because of all these layers

00:04:34,080 --> 00:04:37,919
and all these abstractions you become

00:04:36,000 --> 00:04:39,440
embedded into images and tools

00:04:37,919 --> 00:04:42,160
and eventually become part of the

00:04:39,440 --> 00:04:44,639
existing stack which creates substantial

00:04:42,160 --> 00:04:46,320
problems now you combine this with

00:04:44,639 --> 00:04:48,560
additional problems like

00:04:46,320 --> 00:04:50,479
uh the fact that more and more we're

00:04:48,560 --> 00:04:52,320
using from a development and automation

00:04:50,479 --> 00:04:53,199
standpoint infrastructure as code

00:04:52,320 --> 00:04:54,639
templates

00:04:53,199 --> 00:04:56,800
so whether we're using things like

00:04:54,639 --> 00:04:59,600
hashicorp terra hashicorp terraform

00:04:56,800 --> 00:05:01,440
aws cloud formation templates kubernetes

00:04:59,600 --> 00:05:02,960
app manifest yamls

00:05:01,440 --> 00:05:05,360
these are things developers use and

00:05:02,960 --> 00:05:07,759
devops teams use to be able to move

00:05:05,360 --> 00:05:08,560
faster but at the same time if we can

00:05:07,759 --> 00:05:10,960
essentially

00:05:08,560 --> 00:05:12,800
move more and more to the left and be

00:05:10,960 --> 00:05:15,199
able to do things as an example

00:05:12,800 --> 00:05:16,000
tools like for example kube linter where

00:05:15,199 --> 00:05:18,000
we can actually

00:05:16,000 --> 00:05:20,160
fix misconfiguration and be able to

00:05:18,000 --> 00:05:22,560
identify some of these problems in

00:05:20,160 --> 00:05:24,160
configuration and supply chain issues

00:05:22,560 --> 00:05:25,759
before they're introduced into

00:05:24,160 --> 00:05:28,080
infrastructure at runtime

00:05:25,759 --> 00:05:29,280
they present a much easier way to solve

00:05:28,080 --> 00:05:30,720
these things

00:05:29,280 --> 00:05:32,479
the other reason why supply chain

00:05:30,720 --> 00:05:33,520
security is very important is

00:05:32,479 --> 00:05:36,800
understanding these

00:05:33,520 --> 00:05:38,400
deep dependencies several layers down

00:05:36,800 --> 00:05:39,840
and being able to understand what is

00:05:38,400 --> 00:05:41,440
good and what is bad

00:05:39,840 --> 00:05:43,280
um in a lot of the cases the

00:05:41,440 --> 00:05:45,120
dependencies become a problem

00:05:43,280 --> 00:05:47,120
because sometimes you have maintainers

00:05:45,120 --> 00:05:49,039
that abandon them or sell them

00:05:47,120 --> 00:05:50,720
or you have in a case where bad actors

00:05:49,039 --> 00:05:52,479
take control of them

00:05:50,720 --> 00:05:54,240
and they somehow end up on a developer's

00:05:52,479 --> 00:05:56,160
machine so to be able to understand and

00:05:54,240 --> 00:05:56,639
have good hygiene as part of your supply

00:05:56,160 --> 00:05:58,800
chain

00:05:56,639 --> 00:06:00,639
to be able to understand dependencies

00:05:58,800 --> 00:06:02,160
these assets and then managing this

00:06:00,639 --> 00:06:03,280
inventory of assets and how they're

00:06:02,160 --> 00:06:04,319
getting introduced into your

00:06:03,280 --> 00:06:06,800
infrastructure

00:06:04,319 --> 00:06:08,400
is very critical this is why we think

00:06:06,800 --> 00:06:09,199
it's very important not just to have

00:06:08,400 --> 00:06:11,520
security for

00:06:09,199 --> 00:06:12,800
build deploy and run but it's very

00:06:11,520 --> 00:06:14,720
important to be able to tie

00:06:12,800 --> 00:06:16,800
all these stages together through a

00:06:14,720 --> 00:06:19,039
cohesive policy language

00:06:16,800 --> 00:06:20,080
where context can be shared and problems

00:06:19,039 --> 00:06:23,120
can be solved

00:06:20,080 --> 00:06:24,960
based on actual relevance and impact

00:06:23,120 --> 00:06:26,880
one of the other types of more recent

00:06:24,960 --> 00:06:28,560
attacks we've seen on the supply chain

00:06:26,880 --> 00:06:30,000
is actually the notions of typo

00:06:28,560 --> 00:06:31,600
squatting which is we're starting to see

00:06:30,000 --> 00:06:33,199
a more rise towards

00:06:31,600 --> 00:06:35,199
so as we talk more and more about

00:06:33,199 --> 00:06:37,680
infrastructure as code templates

00:06:35,199 --> 00:06:39,520
it's very important to understand that

00:06:37,680 --> 00:06:41,120
if these misconfigurations are

00:06:39,520 --> 00:06:43,440
introduced into your infrastructure

00:06:41,120 --> 00:06:45,840
they substantially amplify the risk that

00:06:43,440 --> 00:06:47,680
goes into your runtime infrastructure

00:06:45,840 --> 00:06:49,520
and in a lot of cases these become

00:06:47,680 --> 00:06:51,919
embedded in your infrastructure and

00:06:49,520 --> 00:06:53,759
very difficult to roll back this is why

00:06:51,919 --> 00:06:55,680
you constantly now hear about this

00:06:53,759 --> 00:06:57,039
notion of shift left and why it's very

00:06:55,680 --> 00:06:59,440
important to do that

00:06:57,039 --> 00:07:00,400
now we recognize at red hat that there

00:06:59,440 --> 00:07:02,880
is a very fine

00:07:00,400 --> 00:07:04,000
balance between velocity and flexibility

00:07:02,880 --> 00:07:05,360
for developers

00:07:04,000 --> 00:07:06,720
developers want to be able to choose

00:07:05,360 --> 00:07:08,400
their packages want to be able to

00:07:06,720 --> 00:07:09,280
determine which containers they want to

00:07:08,400 --> 00:07:11,199
use

00:07:09,280 --> 00:07:12,720
and being able to essentially determine

00:07:11,199 --> 00:07:15,120
how they build together

00:07:12,720 --> 00:07:16,000
their tools that allow them to move

00:07:15,120 --> 00:07:18,000
faster and deliver

00:07:16,000 --> 00:07:20,000
business goals but at the same time we

00:07:18,000 --> 00:07:20,479
want to have vetting and controls in

00:07:20,000 --> 00:07:22,400
place

00:07:20,479 --> 00:07:24,880
so we can apply compliance whether it

00:07:22,400 --> 00:07:25,840
starts from very basic aspects of cis

00:07:24,880 --> 00:07:29,039
benchmarks

00:07:25,840 --> 00:07:31,520
or more custom or very specific useful

00:07:29,039 --> 00:07:33,120
custom tools and controls that are

00:07:31,520 --> 00:07:35,919
specific to your business and

00:07:33,120 --> 00:07:38,479
organization to be able to vet these out

00:07:35,919 --> 00:07:40,319
the other reason as to why supply chain

00:07:38,479 --> 00:07:41,440
security becomes very important and

00:07:40,319 --> 00:07:42,800
dealing with these issues in a

00:07:41,440 --> 00:07:44,879
declarative fashion

00:07:42,800 --> 00:07:47,120
is not just the infrastructure itself

00:07:44,879 --> 00:07:48,960
but all the new layers of tooling that

00:07:47,120 --> 00:07:50,080
are highly automating and contributing

00:07:48,960 --> 00:07:51,919
to scale

00:07:50,080 --> 00:07:53,919
for example going from kubernetes to

00:07:51,919 --> 00:07:55,759
istio general service meshes

00:07:53,919 --> 00:07:57,440
these are all components that are highly

00:07:55,759 --> 00:07:58,319
contributing to the velocity of

00:07:57,440 --> 00:08:00,319
development

00:07:58,319 --> 00:08:02,479
so if we do not take on this notion of

00:08:00,319 --> 00:08:04,080
shared responsibility and ensure that

00:08:02,479 --> 00:08:04,800
our supply chains are properly locked

00:08:04,080 --> 00:08:06,400
down

00:08:04,800 --> 00:08:07,840
looking for bad indicators and

00:08:06,400 --> 00:08:08,879
eventually solving these through

00:08:07,840 --> 00:08:11,360
configurations

00:08:08,879 --> 00:08:12,000
and declarative fashions we end up with

00:08:11,360 --> 00:08:13,919
a runtime

00:08:12,000 --> 00:08:15,440
environment that you really don't have

00:08:13,919 --> 00:08:17,520
to think about your highest risk

00:08:15,440 --> 00:08:19,039
environment being even a vulnerability

00:08:17,520 --> 00:08:21,039
that is going to be exploited

00:08:19,039 --> 00:08:24,000
it could be simple misconfigurations in

00:08:21,039 --> 00:08:25,840
your our back or even exposed apis

00:08:24,000 --> 00:08:27,919
and this is again what brings us back

00:08:25,840 --> 00:08:30,319
where at red hat what we are focused on

00:08:27,919 --> 00:08:32,240
is ensuring developer velocity business

00:08:30,319 --> 00:08:34,479
moving as quickly as possible

00:08:32,240 --> 00:08:36,080
but at the same time for us to integrate

00:08:34,479 --> 00:08:36,880
all of our security tooling and

00:08:36,080 --> 00:08:39,519
knowledge

00:08:36,880 --> 00:08:41,279
across the entire life cycle and ensure

00:08:39,519 --> 00:08:43,039
that we are leveraging as many open

00:08:41,279 --> 00:08:44,800
source tools and as many tools that the

00:08:43,039 --> 00:08:46,320
developers can integrate into their

00:08:44,800 --> 00:08:48,080
existing workflows

00:08:46,320 --> 00:08:49,760
to solve for a lot of these particular

00:08:48,080 --> 00:08:51,279
supply chain securities

00:08:49,760 --> 00:08:52,399
thank you very much for your time and if

00:08:51,279 --> 00:08:55,839
you have any questions feel free to

00:08:52,399 --> 00:08:55,839

YouTube URL: https://www.youtube.com/watch?v=McecdJAC8sM


