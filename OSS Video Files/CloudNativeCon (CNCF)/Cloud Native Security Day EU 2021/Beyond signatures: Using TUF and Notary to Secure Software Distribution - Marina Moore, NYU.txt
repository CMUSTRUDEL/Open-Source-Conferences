Title: Beyond signatures: Using TUF and Notary to Secure Software Distribution - Marina Moore, NYU
Publication date: 2021-05-04
Playlist: Cloud Native Security Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Beyond signatures: Using TUF and Notary to Secure Software Distribution - Marina Moore, New York University

The Update Framework (TUF) provides a unique level of protection against attacks on software distribution and updates. Marina Moore will discuss how TUF can ensure secure distribution for registries. She will present an adaption of TUF for use with the Notary v2 project that addresses diverse secure distribution use cases unique to the registry ecosystem.
Captions: 
	00:00:01,360 --> 00:00:06,399
hello everyone my name is marina

00:00:03,760 --> 00:00:07,759
and i am a phd student at nyu and i'm

00:00:06,399 --> 00:00:09,200
going to talk to you today

00:00:07,759 --> 00:00:12,800
about some of the work i've been doing

00:00:09,200 --> 00:00:12,800
for secure software distribution

00:00:14,000 --> 00:00:17,440
so why do we care about secure software

00:00:15,519 --> 00:00:18,720
distribution this is an attack factor

00:00:17,440 --> 00:00:20,640
that's being used a lot

00:00:18,720 --> 00:00:22,640
especially recently to distribute

00:00:20,640 --> 00:00:23,519
malware to large numbers of systems all

00:00:22,640 --> 00:00:25,119
at once

00:00:23,519 --> 00:00:27,279
this includes the recent solar wind

00:00:25,119 --> 00:00:27,920
attack which relied on software updates

00:00:27,279 --> 00:00:31,439
as well as

00:00:27,920 --> 00:00:32,239
a wider software supply chain attack to

00:00:31,439 --> 00:00:36,079
distribute

00:00:32,239 --> 00:00:38,559
that malware in addition the mall

00:00:36,079 --> 00:00:40,320
sorry let's flame malware was

00:00:38,559 --> 00:00:40,879
distributed through microsoft windows

00:00:40,320 --> 00:00:43,360
update

00:00:40,879 --> 00:00:44,000
not pettya which caused all kinds of

00:00:43,360 --> 00:00:46,000
outages

00:00:44,000 --> 00:00:48,480
in hospitals and major companies also

00:00:46,000 --> 00:00:50,239
spread through software updates

00:00:48,480 --> 00:00:52,320
more close to this community the docker

00:00:50,239 --> 00:00:52,800
hub password database compromised was

00:00:52,320 --> 00:00:55,199
part of

00:00:52,800 --> 00:00:57,199
you know a docker hub compromise and

00:00:55,199 --> 00:00:59,120
many images were compromised there

00:00:57,199 --> 00:01:00,160
although this was very much mitigated by

00:00:59,120 --> 00:01:02,719
an earlier version

00:01:00,160 --> 00:01:04,960
of this work in addition all these

00:01:02,719 --> 00:01:07,840
attacks have huge economic damages

00:01:04,960 --> 00:01:09,360
including this one example where malware

00:01:07,840 --> 00:01:10,960
distributed over

00:01:09,360 --> 00:01:13,119
software updates in south korea caused

00:01:10,960 --> 00:01:15,840
almost 800 million dollars

00:01:13,119 --> 00:01:15,840
of damages

00:01:16,799 --> 00:01:20,400
so what are we going to do about this so

00:01:18,720 --> 00:01:21,200
in the cloud in this space i've been

00:01:20,400 --> 00:01:23,920
working on

00:01:21,200 --> 00:01:25,680
the node v2 effort which is an effort to

00:01:23,920 --> 00:01:27,920
create a more broadly used secure

00:01:25,680 --> 00:01:30,560
distribution system for registries

00:01:27,920 --> 00:01:32,320
by building onto the work done in notary

00:01:30,560 --> 00:01:33,600
and addressing some of the limitations

00:01:32,320 --> 00:01:36,159
of that system

00:01:33,600 --> 00:01:37,680
these include avoiding trust on first

00:01:36,159 --> 00:01:39,280
use for keys

00:01:37,680 --> 00:01:41,200
and really consolidating the key

00:01:39,280 --> 00:01:44,079
management to make it much easier to use

00:01:41,200 --> 00:01:46,240
and use securely hosting metadata

00:01:44,079 --> 00:01:48,240
directly on repositories to avoid

00:01:46,240 --> 00:01:49,360
users having to run additional services

00:01:48,240 --> 00:01:52,479
in order to

00:01:49,360 --> 00:01:54,000
use secure distribution

00:01:52,479 --> 00:01:56,560
this space is especially interesting

00:01:54,000 --> 00:01:58,320
from um this perspective

00:01:56,560 --> 00:02:01,439
in in the way that it's different from

00:01:58,320 --> 00:02:04,320
traditional software repository systems

00:02:01,439 --> 00:02:06,560
in that we also have to secure ephemeral

00:02:04,320 --> 00:02:08,160
clients which don't have any state

00:02:06,560 --> 00:02:10,080
on them that we can use to store

00:02:08,160 --> 00:02:11,680
information to be used as part of this

00:02:10,080 --> 00:02:14,480
update process

00:02:11,680 --> 00:02:15,360
update or distribution process sorry we

00:02:14,480 --> 00:02:17,360
also have shared

00:02:15,360 --> 00:02:18,879
repositories with private data and you

00:02:17,360 --> 00:02:20,879
don't want this private data

00:02:18,879 --> 00:02:22,319
to leak to other users through the use

00:02:20,879 --> 00:02:23,760
of metadata

00:02:22,319 --> 00:02:25,840
and finally we have this idea of

00:02:23,760 --> 00:02:27,920
scalability where

00:02:25,840 --> 00:02:30,080
some registries have have millions of

00:02:27,920 --> 00:02:31,840
images and we want to make sure that

00:02:30,080 --> 00:02:33,440
the security solution we have scales to

00:02:31,840 --> 00:02:36,480
registries even when they are

00:02:33,440 --> 00:02:39,200
that large

00:02:36,480 --> 00:02:40,959
so to do so we have a threat model this

00:02:39,200 --> 00:02:42,560
is the place to start with how to design

00:02:40,959 --> 00:02:44,879
a security solution

00:02:42,560 --> 00:02:46,480
so in our threat model we looking at

00:02:44,879 --> 00:02:47,680
these previous compromises that i've

00:02:46,480 --> 00:02:48,319
talked about we kind of make this

00:02:47,680 --> 00:02:51,519
assumption

00:02:48,319 --> 00:02:54,239
that it's not a question of

00:02:51,519 --> 00:02:55,519
you know if your repository or your

00:02:54,239 --> 00:02:56,879
registry will be compromised

00:02:55,519 --> 00:02:58,560
it's a question of what will you do when

00:02:56,879 --> 00:02:59,280
that happens and and how protected will

00:02:58,560 --> 00:03:00,720
you be

00:02:59,280 --> 00:03:02,800
when that happens because even these

00:03:00,720 --> 00:03:03,360
companies with huge huge security

00:03:02,800 --> 00:03:05,280
budgets

00:03:03,360 --> 00:03:07,280
and people focusing on this this still

00:03:05,280 --> 00:03:08,080
happens to them and so we want to make

00:03:07,280 --> 00:03:10,640
sure that even

00:03:08,080 --> 00:03:12,080
even when this happens we're protected

00:03:10,640 --> 00:03:12,879
so we assume that the attacker can

00:03:12,080 --> 00:03:15,599
compromise

00:03:12,879 --> 00:03:16,000
some but not all signing keys and that

00:03:15,599 --> 00:03:17,599
they

00:03:16,000 --> 00:03:19,519
can have control of the registry for

00:03:17,599 --> 00:03:21,360
some period of time

00:03:19,519 --> 00:03:23,920
in addition the attacker is able to

00:03:21,360 --> 00:03:27,680
watch traffic to or from the registry

00:03:23,920 --> 00:03:29,840
and alter this traffic and the goal

00:03:27,680 --> 00:03:31,840
in the system is to prevent users from

00:03:29,840 --> 00:03:33,040
installing a package that doesn't have a

00:03:31,840 --> 00:03:35,280
currently valid

00:03:33,040 --> 00:03:36,959
signature this includes of course

00:03:35,280 --> 00:03:39,440
arbitrary software installation

00:03:36,959 --> 00:03:40,560
or when the attacker can install

00:03:39,440 --> 00:03:43,120
arbitrary malware

00:03:40,560 --> 00:03:44,799
onto users machines but it also includes

00:03:43,120 --> 00:03:47,280
things like rollback attacks where the

00:03:44,799 --> 00:03:50,159
attacker is able to convince users

00:03:47,280 --> 00:03:52,480
to install a previous version or version

00:03:50,159 --> 00:03:54,480
that no longer has a valid signature

00:03:52,480 --> 00:03:55,519
or maybe was has a signature with a

00:03:54,480 --> 00:03:57,680
revoked key

00:03:55,519 --> 00:03:59,840
any of the situations we want to avoid

00:03:57,680 --> 00:04:01,280
as well as a few more subtle attacks

00:03:59,840 --> 00:04:03,040
in ways that the attacker can try and

00:04:01,280 --> 00:04:08,080
convince the user to install

00:04:03,040 --> 00:04:09,360
a non-optimal version of the software

00:04:08,080 --> 00:04:11,840
so the first approach that i'll talk

00:04:09,360 --> 00:04:13,040
about for how to secure software

00:04:11,840 --> 00:04:15,439
distribution

00:04:13,040 --> 00:04:16,479
in general is using cryptographic

00:04:15,439 --> 00:04:18,000
signatures

00:04:16,479 --> 00:04:20,239
and these are a piece of probably any

00:04:18,000 --> 00:04:21,600
system for secure distribution

00:04:20,239 --> 00:04:23,440
that you'll see but this is kind of

00:04:21,600 --> 00:04:24,560
looking at looking at systems that kind

00:04:23,440 --> 00:04:27,600
of focus on

00:04:24,560 --> 00:04:29,199
the cryptographic signature aspect

00:04:27,600 --> 00:04:31,280
and so what these signatures do is they

00:04:29,199 --> 00:04:32,320
attest that the person with the private

00:04:31,280 --> 00:04:35,120
key who signs

00:04:32,320 --> 00:04:36,720
an image has access to this private key

00:04:35,120 --> 00:04:38,400
and they attest to the contents of the

00:04:36,720 --> 00:04:41,680
image

00:04:38,400 --> 00:04:43,440
in tls this is often done through

00:04:41,680 --> 00:04:44,880
keys that are stored on a repository or

00:04:43,440 --> 00:04:48,240
on a server somewhere

00:04:44,880 --> 00:04:50,000
and then images are going there and the

00:04:48,240 --> 00:04:50,880
user can make sure that the image that

00:04:50,000 --> 00:04:52,479
they're downloading

00:04:50,880 --> 00:04:54,960
is the same one that's hosted on the

00:04:52,479 --> 00:04:57,280
repository and this can also

00:04:54,960 --> 00:04:59,759
include keys that are controlled by

00:04:57,280 --> 00:05:01,520
individual developers or individual

00:04:59,759 --> 00:05:04,000
you know other machines that develop

00:05:01,520 --> 00:05:05,600
code like cicd systems

00:05:04,000 --> 00:05:06,880
and um and then these individual

00:05:05,600 --> 00:05:07,680
developers i'll just call them

00:05:06,880 --> 00:05:11,280
developers

00:05:07,680 --> 00:05:13,360
for simplicity um you can sign the sign

00:05:11,280 --> 00:05:15,120
an image or artifact locally and then

00:05:13,360 --> 00:05:16,400
upload that artifact and the signature

00:05:15,120 --> 00:05:20,080
attached to it

00:05:16,400 --> 00:05:20,720
up to a registry the downside with just

00:05:20,080 --> 00:05:22,960
this approach

00:05:20,720 --> 00:05:25,120
is that whoever has control of the keys

00:05:22,960 --> 00:05:26,000
in the system has full control over the

00:05:25,120 --> 00:05:29,280
system

00:05:26,000 --> 00:05:30,479
and can consign arbitrary software or

00:05:29,280 --> 00:05:32,880
arbitrary malware

00:05:30,479 --> 00:05:34,320
as the case may be and convince users to

00:05:32,880 --> 00:05:36,639
install it

00:05:34,320 --> 00:05:38,720
so if the if these keys are on a

00:05:36,639 --> 00:05:39,919
repository or a registry

00:05:38,720 --> 00:05:42,560
i'm using those terms a little bit

00:05:39,919 --> 00:05:43,759
interchangeably but um

00:05:42,560 --> 00:05:45,520
it's basically whatever server you're

00:05:43,759 --> 00:05:47,120
hosting your code for the purpose of

00:05:45,520 --> 00:05:50,160
this talk that's what i mean

00:05:47,120 --> 00:05:52,479
by either of those terms um but yeah if

00:05:50,160 --> 00:05:54,720
an attacker compromises

00:05:52,479 --> 00:05:56,639
this repository there and there's an

00:05:54,720 --> 00:05:58,960
online key on this repository

00:05:56,639 --> 00:06:00,479
they're able to sign any any images and

00:05:58,960 --> 00:06:02,479
give them to the client

00:06:00,479 --> 00:06:03,680
if the developer controls these

00:06:02,479 --> 00:06:06,400
signatures

00:06:03,680 --> 00:06:07,600
an attacker and an attacker compromises

00:06:06,400 --> 00:06:10,080
a developer key

00:06:07,600 --> 00:06:11,280
they're also able to sign arbitrary

00:06:10,080 --> 00:06:13,440
images

00:06:11,280 --> 00:06:14,960
and this is in part because users don't

00:06:13,440 --> 00:06:16,479
have a good way to know

00:06:14,960 --> 00:06:18,400
which signatures to trust and which

00:06:16,479 --> 00:06:19,360
signatures to trust for which particular

00:06:18,400 --> 00:06:21,840
images

00:06:19,360 --> 00:06:23,600
and so they often have a key ring and if

00:06:21,840 --> 00:06:25,440
any key in that ring is compromised

00:06:23,600 --> 00:06:26,720
it can be used just to sign arbitrary

00:06:25,440 --> 00:06:29,199
malware and they'll

00:06:26,720 --> 00:06:30,960
then trust and install it and in this

00:06:29,199 --> 00:06:32,880
system there's often

00:06:30,960 --> 00:06:34,880
no good ability to rebuild keys and

00:06:32,880 --> 00:06:38,479
ensure timely revocation

00:06:34,880 --> 00:06:40,639
of keys there's a quick summary of

00:06:38,479 --> 00:06:42,880
those attacks that i just talked about

00:06:40,639 --> 00:06:45,039
if a developer key is compromised

00:06:42,880 --> 00:06:47,840
the malicious developer key can be

00:06:45,039 --> 00:06:50,639
trusted by all users

00:06:47,840 --> 00:06:52,560
even if you know to sign malware if a

00:06:50,639 --> 00:06:54,479
repository or registry is compromised

00:06:52,560 --> 00:06:57,120
the attacker can alter content

00:06:54,479 --> 00:06:58,479
and show older versions of images that

00:06:57,120 --> 00:07:00,960
were previously signed

00:06:58,479 --> 00:07:03,360
by developers um even if those developer

00:07:00,960 --> 00:07:04,960
signatures are no longer valid

00:07:03,360 --> 00:07:07,759
if a mirror is compromised it has pretty

00:07:04,960 --> 00:07:08,800
much the same abilities as a registry to

00:07:07,759 --> 00:07:12,000
alter content

00:07:08,800 --> 00:07:13,360
or share old versions and then if the

00:07:12,000 --> 00:07:15,360
attacker is acting as like a machine in

00:07:13,360 --> 00:07:17,919
the middle or on the network

00:07:15,360 --> 00:07:19,120
they can save and replay old signatures

00:07:17,919 --> 00:07:21,120
even after

00:07:19,120 --> 00:07:23,520
a vulnerability is discovered or the

00:07:21,120 --> 00:07:27,039
software is otherwise

00:07:23,520 --> 00:07:27,039
no longer signed

00:07:27,759 --> 00:07:31,440
so next i'll introduce the update

00:07:29,360 --> 00:07:33,120
framework or taf as we like to call it

00:07:31,440 --> 00:07:33,919
which is a framework for secure software

00:07:33,120 --> 00:07:35,599
updates

00:07:33,919 --> 00:07:37,520
that i participate in the research and

00:07:35,599 --> 00:07:39,120
development for that was designed with

00:07:37,520 --> 00:07:42,400
compromised resilience in mind

00:07:39,120 --> 00:07:44,000
to get addressed some of these issues

00:07:42,400 --> 00:07:46,080
as part of that key revocation and

00:07:44,000 --> 00:07:47,280
delegation are first class primitives

00:07:46,080 --> 00:07:48,560
they're really built in from

00:07:47,280 --> 00:07:50,319
from the bottom to make sure that

00:07:48,560 --> 00:07:52,800
they're always used and they're always

00:07:50,319 --> 00:07:54,319
easy to use in any of these compromise

00:07:52,800 --> 00:07:56,080
situations

00:07:54,319 --> 00:07:58,080
and because of all the additional

00:07:56,080 --> 00:08:00,720
security focus on security

00:07:58,080 --> 00:08:03,199
we also just we also in in tough focus

00:08:00,720 --> 00:08:04,560
on this idea of invisible usability

00:08:03,199 --> 00:08:06,720
which means that even though there's a

00:08:04,560 --> 00:08:07,360
lot of security going on behind the

00:08:06,720 --> 00:08:09,840
scenes

00:08:07,360 --> 00:08:10,639
the users don't need to know exactly

00:08:09,840 --> 00:08:12,479
what's happening

00:08:10,639 --> 00:08:14,000
unless something goes wrong so for the

00:08:12,479 --> 00:08:15,120
most part they all they know is that

00:08:14,000 --> 00:08:16,240
they're downloading software and it's

00:08:15,120 --> 00:08:18,080
being verified

00:08:16,240 --> 00:08:20,000
they're like they don't they would they

00:08:18,080 --> 00:08:21,759
don't have to specifically do

00:08:20,000 --> 00:08:23,199
a lot of steps it's all part of an

00:08:21,759 --> 00:08:24,319
automated process

00:08:23,199 --> 00:08:28,240
trying to make this easier for both

00:08:24,319 --> 00:08:30,000
developers and users of software

00:08:28,240 --> 00:08:31,599
and using tough and i'll go into a lot

00:08:30,000 --> 00:08:33,279
more detail about how tough works in a

00:08:31,599 --> 00:08:37,519
minute but i just wanted to summarize

00:08:33,279 --> 00:08:39,919
those same attacks here at the beginning

00:08:37,519 --> 00:08:41,919
so if a developer key is compromised in

00:08:39,919 --> 00:08:44,000
a system using tuff

00:08:41,919 --> 00:08:45,519
only the files that that developer key

00:08:44,000 --> 00:08:47,680
is specifically

00:08:45,519 --> 00:08:49,200
like the artifacts that are specifically

00:08:47,680 --> 00:08:51,440
assigned to that developer

00:08:49,200 --> 00:08:52,320
could be compromised using this

00:08:51,440 --> 00:08:54,160
developer key

00:08:52,320 --> 00:08:55,760
and that's only if a threshold of

00:08:54,160 --> 00:08:57,279
developer keys are compromised and i'll

00:08:55,760 --> 00:08:59,120
go into what that means

00:08:57,279 --> 00:09:00,800
in a minute and in addition developer

00:08:59,120 --> 00:09:04,160
keys can be revoked

00:09:00,800 --> 00:09:06,000
by more trusted roles at any time if a

00:09:04,160 --> 00:09:08,640
repository or registry

00:09:06,000 --> 00:09:11,040
is compromised in a system using tough

00:09:08,640 --> 00:09:14,080
the attacker would be able to

00:09:11,040 --> 00:09:17,040
to a limited extent show old metadata

00:09:14,080 --> 00:09:18,399
but this is mitigated a little bit by a

00:09:17,040 --> 00:09:20,720
client's verification that

00:09:18,399 --> 00:09:22,640
any metadata they see is newer than

00:09:20,720 --> 00:09:24,800
metadata already on the system

00:09:22,640 --> 00:09:27,839
and this is also recoverable using

00:09:24,800 --> 00:09:30,720
delegation for more trusted roles

00:09:27,839 --> 00:09:32,000
um for mirrors the mirrors actually

00:09:30,720 --> 00:09:34,320
don't have any trust

00:09:32,000 --> 00:09:36,000
in a system using trust using tough and

00:09:34,320 --> 00:09:36,959
so the mirrors aren't able to change any

00:09:36,000 --> 00:09:39,680
content

00:09:36,959 --> 00:09:40,320
without detection and then somewhat

00:09:39,680 --> 00:09:42,880
similarly

00:09:40,320 --> 00:09:43,839
a machine in the middle or attacker on

00:09:42,880 --> 00:09:46,880
the network

00:09:43,839 --> 00:09:49,519
is not able to alter any anything and

00:09:46,880 --> 00:09:51,760
any um old signatures will be detected

00:09:49,519 --> 00:09:54,000
by the clients and so they can't be used

00:09:51,760 --> 00:09:57,600
to install old versions

00:09:54,000 --> 00:09:58,000
of the software so how does stuff do

00:09:57,600 --> 00:10:00,959
this

00:09:58,000 --> 00:10:03,360
so it uses a few principles in order to

00:10:00,959 --> 00:10:04,880
achieve kind of this level of security

00:10:03,360 --> 00:10:06,480
the first principle is this idea of

00:10:04,880 --> 00:10:08,480
separation of duties

00:10:06,480 --> 00:10:09,519
where any one person or anyone signing

00:10:08,480 --> 00:10:12,000
key

00:10:09,519 --> 00:10:13,519
is only trusted to do a certain set of

00:10:12,000 --> 00:10:14,959
things within the system

00:10:13,519 --> 00:10:16,720
and the way this works is it starts with

00:10:14,959 --> 00:10:18,800
a root of trust

00:10:16,720 --> 00:10:20,320
or root role which serves as the root of

00:10:18,800 --> 00:10:22,399
trust for the system

00:10:20,320 --> 00:10:23,839
and this role then delegates or provides

00:10:22,399 --> 00:10:26,240
the public keys for

00:10:23,839 --> 00:10:28,000
some other top level roles so these are

00:10:26,240 --> 00:10:29,440
the time stamp role which provides a

00:10:28,000 --> 00:10:31,680
notion of timeliness

00:10:29,440 --> 00:10:33,600
which ensures that for example

00:10:31,680 --> 00:10:36,160
revocations and metadata

00:10:33,600 --> 00:10:37,680
are always timely and consistent with

00:10:36,160 --> 00:10:40,399
what's currently on

00:10:37,680 --> 00:10:41,279
the registry or repository a snapshot

00:10:40,399 --> 00:10:45,120
role

00:10:41,279 --> 00:10:47,440
which ensures consistency of images

00:10:45,120 --> 00:10:49,519
and then a top level targets role which

00:10:47,440 --> 00:10:51,680
um is where you start to provide actual

00:10:49,519 --> 00:10:52,560
information about the artifacts and

00:10:51,680 --> 00:10:55,279
images

00:10:52,560 --> 00:10:57,600
on the registry and this targets role is

00:10:55,279 --> 00:11:00,480
also able to provide further delegations

00:10:57,600 --> 00:11:00,800
to other individual developers or teams

00:11:00,480 --> 00:11:03,120
to

00:11:00,800 --> 00:11:05,279
prevent any key sharing even at that

00:11:03,120 --> 00:11:06,720
level to make sure that

00:11:05,279 --> 00:11:09,200
each key is only trusted for the

00:11:06,720 --> 00:11:12,800
specific piece of the system

00:11:09,200 --> 00:11:12,800
that it is attesting to

00:11:12,959 --> 00:11:16,959
next we have threshold signatures um the

00:11:15,760 --> 00:11:19,839
idea here is that

00:11:16,959 --> 00:11:21,040
um especially for more high security

00:11:19,839 --> 00:11:22,399
roles

00:11:21,040 --> 00:11:24,399
the role isn't trusted unless a

00:11:22,399 --> 00:11:26,560
threshold of signatures all signs the

00:11:24,399 --> 00:11:28,079
same piece of metadata for that role

00:11:26,560 --> 00:11:29,760
so in this example here the target's

00:11:28,079 --> 00:11:31,920
metadata isn't trusted

00:11:29,760 --> 00:11:33,680
unless three out of the four keys for

00:11:31,920 --> 00:11:34,640
that role have all signed the same

00:11:33,680 --> 00:11:37,519
metadata

00:11:34,640 --> 00:11:38,959
and this just makes sure that um if

00:11:37,519 --> 00:11:40,399
there are different people trusted

00:11:38,959 --> 00:11:42,240
for the role they all sign it and it

00:11:40,399 --> 00:11:43,760
takes a it would take in this example

00:11:42,240 --> 00:11:45,920
three key compromises

00:11:43,760 --> 00:11:49,360
for an attacker to be able to sign

00:11:45,920 --> 00:11:51,120
arbitrary targets metadata

00:11:49,360 --> 00:11:52,959
next we have explicit and implicit

00:11:51,120 --> 00:11:54,800
relocation of keys

00:11:52,959 --> 00:11:56,480
so the implicit relocation of keys is

00:11:54,800 --> 00:11:59,600
just that all keys in the system

00:11:56,480 --> 00:12:02,240
have a a time

00:11:59,600 --> 00:12:04,639
a time stamp and they all they expire

00:12:02,240 --> 00:12:07,839
after a certain period of time

00:12:04,639 --> 00:12:09,600
and the explicit revocation

00:12:07,839 --> 00:12:12,240
means that any higher level role in the

00:12:09,600 --> 00:12:13,920
system can explicitly sign new metadata

00:12:12,240 --> 00:12:16,480
that removes a signature that removes a

00:12:13,920 --> 00:12:18,079
public key for a lower level role so any

00:12:16,480 --> 00:12:19,680
key in the system can be explicitly

00:12:18,079 --> 00:12:21,680
revoked at any time

00:12:19,680 --> 00:12:24,160
and users and because of the notion of

00:12:21,680 --> 00:12:26,399
timeliness users will know right away

00:12:24,160 --> 00:12:28,240
when a key has been revoked and they'll

00:12:26,399 --> 00:12:32,240
be prevented from using

00:12:28,240 --> 00:12:34,480
a revoked key in their verification

00:12:32,240 --> 00:12:36,480
and finally tuff minimizes the risk

00:12:34,480 --> 00:12:38,000
using offline keys

00:12:36,480 --> 00:12:40,079
so for especially again these more high

00:12:38,000 --> 00:12:40,880
security roles especially the root role

00:12:40,079 --> 00:12:46,320
and also the

00:12:40,880 --> 00:12:46,320
top level targets role tough encourages

00:12:46,399 --> 00:12:49,920
users of the system to use offline keys

00:12:48,720 --> 00:12:51,519
for these roles

00:12:49,920 --> 00:12:54,000
because as we've mentioned one of the

00:12:51,519 --> 00:12:54,959
assumptions in the system is that

00:12:54,000 --> 00:12:56,959
you know your servers will be

00:12:54,959 --> 00:12:58,639
compromised at one point or another so

00:12:56,959 --> 00:12:59,760
if these keys are not on any servers if

00:12:58,639 --> 00:13:01,519
they're just

00:12:59,760 --> 00:13:03,040
you know exist physically in some lock

00:13:01,519 --> 00:13:05,040
box somewhere an

00:13:03,040 --> 00:13:06,560
attacker using just the internet can't

00:13:05,040 --> 00:13:07,920
possibly compromise them

00:13:06,560 --> 00:13:10,160
and they would need to do some kind of

00:13:07,920 --> 00:13:12,800
you know ocean's level and ocean's 11

00:13:10,160 --> 00:13:14,000
heist kind of you know physical attack

00:13:12,800 --> 00:13:16,079
to actually get access

00:13:14,000 --> 00:13:20,000
to these keys which just really

00:13:16,079 --> 00:13:22,079
increases the security of your system

00:13:20,000 --> 00:13:24,880
putting it all together when there's a

00:13:22,079 --> 00:13:27,120
compromise of your system

00:13:24,880 --> 00:13:28,399
protects it using a combination of all

00:13:27,120 --> 00:13:30,959
of these properties

00:13:28,399 --> 00:13:31,839
so um the timestamp and snapshot rule

00:13:30,959 --> 00:13:34,480
are

00:13:31,839 --> 00:13:36,320
are both on the registry or repository

00:13:34,480 --> 00:13:37,839
so if the register repository is

00:13:36,320 --> 00:13:39,680
compromised

00:13:37,839 --> 00:13:41,199
these two roles would probably also be

00:13:39,680 --> 00:13:44,079
compromised but in this

00:13:41,199 --> 00:13:46,079
situation the actual targets roles and

00:13:44,079 --> 00:13:48,720
the actual keys used to cite images

00:13:46,079 --> 00:13:50,320
aren't compromised and so the attacker

00:13:48,720 --> 00:13:51,839
isn't able to change any of that

00:13:50,320 --> 00:13:54,320
information

00:13:51,839 --> 00:13:55,040
and also the root role is able to be is

00:13:54,320 --> 00:13:58,240
can be used

00:13:55,040 --> 00:14:00,480
to revoke the time stamp and snapshot

00:13:58,240 --> 00:14:02,480
rules and kind of re-establish trust

00:14:00,480 --> 00:14:04,399
in the system once you get back control

00:14:02,480 --> 00:14:06,639
of your registry

00:14:04,399 --> 00:14:09,680
and without any manual intervention on

00:14:06,639 --> 00:14:11,519
decline systems to kind of

00:14:09,680 --> 00:14:12,800
re-establish trust it's all kind of

00:14:11,519 --> 00:14:15,440
automatically done

00:14:12,800 --> 00:14:17,120
after the attack and then if any single

00:14:15,440 --> 00:14:20,399
developer key is compromised

00:14:17,120 --> 00:14:22,399
only that one package or that one thing

00:14:20,399 --> 00:14:24,639
that the developer was trusted to sign

00:14:22,399 --> 00:14:25,680
would be compromised and again that can

00:14:24,639 --> 00:14:28,399
be

00:14:25,680 --> 00:14:29,360
revoked by any of the higher level

00:14:28,399 --> 00:14:30,639
targets keys

00:14:29,360 --> 00:14:33,519
all the way up to the boot roll which

00:14:30,639 --> 00:14:35,279
could just revoke all of them if need be

00:14:33,519 --> 00:14:38,560
although probably a lower level one

00:14:35,279 --> 00:14:41,279
should be broken first just prevent

00:14:38,560 --> 00:14:41,279
the overhead there

00:14:41,839 --> 00:14:44,959
and in addition to all of these kind of

00:14:43,360 --> 00:14:45,600
existing features of tough and kind of

00:14:44,959 --> 00:14:47,839
this

00:14:45,600 --> 00:14:49,279
whole kind of philosophy around secure

00:14:47,839 --> 00:14:50,959
software distribution

00:14:49,279 --> 00:14:52,399
in order to kind of adapt this more for

00:14:50,959 --> 00:14:54,959
the nodeov2 effort

00:14:52,399 --> 00:14:55,920
and the container registry specific

00:14:54,959 --> 00:14:57,440
scenarios

00:14:55,920 --> 00:14:59,839
we have a couple of new features that

00:14:57,440 --> 00:15:02,320
i'm going to talk about here today

00:14:59,839 --> 00:15:04,000
so the first of these is client pinning

00:15:02,320 --> 00:15:05,920
of targets keys

00:15:04,000 --> 00:15:08,079
so the idea here is to reduce trust in

00:15:05,920 --> 00:15:09,360
the registry by allowing the client to

00:15:08,079 --> 00:15:13,040
define

00:15:09,360 --> 00:15:14,800
the pr i'm sorry the public keys that

00:15:13,040 --> 00:15:17,279
they would like to trust in order to

00:15:14,800 --> 00:15:19,360
sign specific targets files

00:15:17,279 --> 00:15:20,320
um this means that the even the root

00:15:19,360 --> 00:15:22,880
role

00:15:20,320 --> 00:15:23,680
on the registry or repository itself

00:15:22,880 --> 00:15:25,040
doesn't have

00:15:23,680 --> 00:15:26,399
won't be able to override this without

00:15:25,040 --> 00:15:28,000
the client knowing about it so the

00:15:26,399 --> 00:15:29,519
client will know

00:15:28,000 --> 00:15:31,120
um you know whenever this key is changed

00:15:29,519 --> 00:15:31,759
whenever a new developer is signing it

00:15:31,120 --> 00:15:33,600
whenever

00:15:31,759 --> 00:15:34,880
something changes like that and this can

00:15:33,600 --> 00:15:36,480
be especially useful

00:15:34,880 --> 00:15:38,399
in open source projects where you want

00:15:36,480 --> 00:15:39,279
to keep track of who is currently

00:15:38,399 --> 00:15:42,880
signing

00:15:39,279 --> 00:15:44,480
for this release and also just you want

00:15:42,880 --> 00:15:46,399
more control over

00:15:44,480 --> 00:15:48,079
over the process it's also good for

00:15:46,399 --> 00:15:49,440
unlisted packages so kind of these

00:15:48,079 --> 00:15:51,759
private packages

00:15:49,440 --> 00:15:54,160
that might not be covered by the

00:15:51,759 --> 00:15:55,600
registry's top level targets metadata

00:15:54,160 --> 00:15:57,759
but is still kind of listed on the

00:15:55,600 --> 00:15:58,560
registry and this can provide the client

00:15:57,759 --> 00:16:01,199
a way to

00:15:58,560 --> 00:16:02,639
list public keys for those files as well

00:16:01,199 --> 00:16:05,839
and kind of work with

00:16:02,639 --> 00:16:08,160
the security measures of the top level

00:16:05,839 --> 00:16:09,920
rules of tough the time stamp and

00:16:08,160 --> 00:16:11,759
snapshot roles but provide kind of a

00:16:09,920 --> 00:16:14,959
separate chain of trust

00:16:11,759 --> 00:16:17,839
for specific targets

00:16:14,959 --> 00:16:18,560
another new feature for node v2 that

00:16:17,839 --> 00:16:21,120
we've

00:16:18,560 --> 00:16:22,720
been discussing is this idea of succinct

00:16:21,120 --> 00:16:25,040
fin delegations

00:16:22,720 --> 00:16:27,279
which is kind of a way to reduce the

00:16:25,040 --> 00:16:30,079
size of delegations

00:16:27,279 --> 00:16:31,759
especially this is especially useful for

00:16:30,079 --> 00:16:34,079
larger public registries where

00:16:31,759 --> 00:16:35,360
a lot of the packages are signed by the

00:16:34,079 --> 00:16:38,399
registry itself and not

00:16:35,360 --> 00:16:40,320
offline by developers

00:16:38,399 --> 00:16:42,079
and in this case that the registry can

00:16:40,320 --> 00:16:43,360
sign

00:16:42,079 --> 00:16:45,519
you can automatically sign for these

00:16:43,360 --> 00:16:48,560
images using online keys

00:16:45,519 --> 00:16:50,240
by um by separating the packages into

00:16:48,560 --> 00:16:51,680
bins based on the hash

00:16:50,240 --> 00:16:53,120
and this just reduces the size of the

00:16:51,680 --> 00:16:55,279
metadata when you're doing a lot of

00:16:53,120 --> 00:16:57,519
online signatures

00:16:55,279 --> 00:17:00,639
for again for those really large public

00:16:57,519 --> 00:17:00,639
registry use cases

00:17:01,120 --> 00:17:04,720
so if you'd like to learn more about

00:17:03,360 --> 00:17:06,799
tough we have our

00:17:04,720 --> 00:17:08,400
our website as well as the specification

00:17:06,799 --> 00:17:08,959
which goes into a lot more detail about

00:17:08,400 --> 00:17:11,199
how the

00:17:08,959 --> 00:17:12,799
all of the aspects of the system work

00:17:11,199 --> 00:17:14,079
there's also a reference implementation

00:17:12,799 --> 00:17:16,160
for tuff

00:17:14,079 --> 00:17:18,000
um which you can find from the website

00:17:16,160 --> 00:17:18,799
or you can contact me and i can get that

00:17:18,000 --> 00:17:20,720
to you

00:17:18,799 --> 00:17:22,160
we're also available on the the cncf

00:17:20,720 --> 00:17:24,000
slack um

00:17:22,160 --> 00:17:25,520
we have a couple of channels one got the

00:17:24,000 --> 00:17:27,919
tough channel as well as the

00:17:25,520 --> 00:17:29,280
python tuff channel where we talk about

00:17:27,919 --> 00:17:31,360
you know the reference invitation

00:17:29,280 --> 00:17:33,360
specifically

00:17:31,360 --> 00:17:34,880
for the nodejs v2 this is an ongoing

00:17:33,360 --> 00:17:35,360
design process so if you have any

00:17:34,880 --> 00:17:37,200
interest

00:17:35,360 --> 00:17:39,280
in secure distribution this is kind of i

00:17:37,200 --> 00:17:42,640
think a good great place to get involved

00:17:39,280 --> 00:17:43,840
we are we're on the cncf slack and

00:17:42,640 --> 00:17:46,799
a lot of the work that i've presented

00:17:43,840 --> 00:17:49,919
here is included in a tough prototype

00:17:46,799 --> 00:17:50,240
design piece which is is there's a link

00:17:49,919 --> 00:17:53,200
to

00:17:50,240 --> 00:17:53,919
here and yeah we'd love to work more

00:17:53,200 --> 00:17:56,160
with

00:17:53,919 --> 00:17:57,600
with folks and see how we can solve all

00:17:56,160 --> 00:18:01,120
of our use cases and get

00:17:57,600 --> 00:18:02,960
everyone's packages signed on registries

00:18:01,120 --> 00:18:05,280
and so feel free to email me or contact

00:18:02,960 --> 00:18:06,799
me on the cncf slack

00:18:05,280 --> 00:18:12,240
and i will be available live for

00:18:06,799 --> 00:18:12,240

YouTube URL: https://www.youtube.com/watch?v=tqAqKJmt3FA


