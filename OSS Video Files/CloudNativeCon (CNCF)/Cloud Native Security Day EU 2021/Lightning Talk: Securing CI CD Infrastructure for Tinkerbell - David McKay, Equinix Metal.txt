Title: Lightning Talk: Securing CI CD Infrastructure for Tinkerbell - David McKay, Equinix Metal
Publication date: 2021-05-04
Playlist: Cloud Native Security Day EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Lightning Talk: Securing CI/CD Infrastructure for Tinkerbell - David McKay, Equinix Metal

Tinkerbell, a CNCF sandbox project, has some pretty unique CI/CD needs. As a bare metal provisioning system, CI/CD involves running servers for DHCP, iPXE, virtual machines with QEMU, and a few others bits and pieces. This use-case is not natively supported by most CI/CD SaaS vendors. To tackle this, the Tinkerbell team has automated the management and provisioning of their own CI/CD runners using a collection of off-the-shelf tools. You will learn how Tinkerbell secured their unique infrastructure and how to approach securing your own CI/CD stack. We will demonstrate Tinkerbell’s provisioning tools and dive deep into how they were configured for security. The same tools are publicly available and could be used in your own CI/CD setups. You will also learn how to secure engineer access to your infrastructure without getting tied to a single cloud provider.
Captions: 
	00:00:00,320 --> 00:00:06,080
hello welcome to my session today

00:00:04,319 --> 00:00:07,919
today we're going to be taking a look at

00:00:06,080 --> 00:00:09,840
securing the

00:00:07,919 --> 00:00:12,240
continuous integration and delivery

00:00:09,840 --> 00:00:15,519
infrastructure for the tinker bell

00:00:12,240 --> 00:00:17,600
project my name is david mckay

00:00:15,519 --> 00:00:19,199
and i am a senior developer advocate for

00:00:17,600 --> 00:00:22,480
equinix metal

00:00:19,199 --> 00:00:24,960
i am also a cncf ambassador

00:00:22,480 --> 00:00:28,320
and i do quite a lot of live streaming

00:00:24,960 --> 00:00:30,720
you can find my streams at rawcode.live

00:00:28,320 --> 00:00:31,519
my goal with streaming is to provide

00:00:30,720 --> 00:00:33,760
educational

00:00:31,519 --> 00:00:35,520
resources for all of us to learn the

00:00:33,760 --> 00:00:37,920
vast cloud native landscape

00:00:35,520 --> 00:00:37,920
together

00:00:38,559 --> 00:00:42,079
and today i want to introduce you to

00:00:40,000 --> 00:00:42,559
tinkerbell a bare metal provisioning

00:00:42,079 --> 00:00:45,600
system

00:00:42,559 --> 00:00:47,440
open sourced by equinix metal now a cncf

00:00:45,600 --> 00:00:49,920
sandbox project

00:00:47,440 --> 00:00:51,840
that aims to solve some challenges that

00:00:49,920 --> 00:00:54,640
have been difficult for a long time

00:00:51,840 --> 00:00:56,640
and that is commoditizing bare metal

00:00:54,640 --> 00:00:59,039
which is no easy task

00:00:56,640 --> 00:01:02,079
so before we dive right in let me just

00:00:59,039 --> 00:01:02,079
shrink myself down

00:01:05,600 --> 00:01:08,880
so tinkerbell isn't your run-of-the-mill

00:01:07,119 --> 00:01:10,560
project when we're working directly with

00:01:08,880 --> 00:01:12,159
the metal there are a lot of things that

00:01:10,560 --> 00:01:13,680
a little bit harder than working with

00:01:12,159 --> 00:01:17,040
virtual machines

00:01:13,680 --> 00:01:19,040
first tinkerbell has to run an n memory

00:01:17,040 --> 00:01:21,439
operating system

00:01:19,040 --> 00:01:22,159
that can handle partitioning disks

00:01:21,439 --> 00:01:24,400
encrypting

00:01:22,159 --> 00:01:25,600
disks writing and installing operating

00:01:24,400 --> 00:01:27,759
systems through container-based

00:01:25,600 --> 00:01:30,880
workflows

00:01:27,759 --> 00:01:32,079
there's multiple microservices that are

00:01:30,880 --> 00:01:33,600
responsible for

00:01:32,079 --> 00:01:35,119
understanding which bare metal devices

00:01:33,600 --> 00:01:36,479
are coming online through mac address

00:01:35,119 --> 00:01:38,320
identification

00:01:36,479 --> 00:01:39,520
there is ipexa for building the

00:01:38,320 --> 00:01:41,360
operating system

00:01:39,520 --> 00:01:43,119
and streaming the operating systems over

00:01:41,360 --> 00:01:46,640
the network and of course there's ip

00:01:43,119 --> 00:01:48,640
address management too in dhcp

00:01:46,640 --> 00:01:50,320
and while you can use traditional ci

00:01:48,640 --> 00:01:52,840
systems you're probably

00:01:50,320 --> 00:01:55,600
you definitely have to provide your own

00:01:52,840 --> 00:01:57,600
runners

00:01:55,600 --> 00:01:59,200
so in order to build out our continuous

00:01:57,600 --> 00:02:00,399
integration and delivery system for the

00:01:59,200 --> 00:02:04,159
tinkerbell project

00:02:00,399 --> 00:02:06,000
we need access to some metal personally

00:02:04,159 --> 00:02:07,200
i work for echo next metal and economics

00:02:06,000 --> 00:02:08,800
metal do donate

00:02:07,200 --> 00:02:10,560
a substantial amount of infrastructure

00:02:08,800 --> 00:02:11,280
and inventory to the cloud data

00:02:10,560 --> 00:02:14,480
foundation

00:02:11,280 --> 00:02:14,480
for projects like this

00:02:14,800 --> 00:02:20,160
my go-to tool for spinning up brand new

00:02:18,080 --> 00:02:21,760
machines on any cloud provider of choice

00:02:20,160 --> 00:02:23,520
is blooming

00:02:21,760 --> 00:02:24,879
and there are a few reasons i want to

00:02:23,520 --> 00:02:28,239
talk about polymer

00:02:24,879 --> 00:02:29,040
for this session one polymer very

00:02:28,239 --> 00:02:31,280
graciously

00:02:29,040 --> 00:02:33,040
gave us a free access to polymer cloud

00:02:31,280 --> 00:02:34,239
for the tinkerbell project

00:02:33,040 --> 00:02:36,239
this comes with a whole bunch of

00:02:34,239 --> 00:02:38,239
benefits from the security side

00:02:36,239 --> 00:02:41,120
it meant that we could commoditize

00:02:38,239 --> 00:02:42,640
access through their our back system

00:02:41,120 --> 00:02:45,680
it also meant we could take advantage of

00:02:42,640 --> 00:02:47,680
their secrets management as well

00:02:45,680 --> 00:02:49,440
something that bulumi does really well

00:02:47,680 --> 00:02:52,400
is allow us to really

00:02:49,440 --> 00:02:53,360
adhere and adopt get ops by having

00:02:52,400 --> 00:02:55,519
everything that we need

00:02:53,360 --> 00:02:57,200
including secrets and the repository and

00:02:55,519 --> 00:02:59,360
pushed

00:02:57,200 --> 00:03:00,640
they are of course encrypted using the

00:02:59,360 --> 00:03:04,000
polumi cloud

00:03:00,640 --> 00:03:05,440
back end however if you want to use

00:03:04,000 --> 00:03:06,959
pollumi and you want to stick to the

00:03:05,440 --> 00:03:11,760
open source you can

00:03:06,959 --> 00:03:11,760
use any cloud kms as a backend as well

00:03:11,920 --> 00:03:16,480
and this is our actual production stack

00:03:14,159 --> 00:03:19,680
file which is open source on github.com

00:03:16,480 --> 00:03:21,120
you can see we have aws credentials here

00:03:19,680 --> 00:03:23,680
and we also have our equinix metal

00:03:21,120 --> 00:03:23,680
credentials

00:03:26,319 --> 00:03:30,080
and next it's not we can't just spin up

00:03:29,440 --> 00:03:31,440
metal and

00:03:30,080 --> 00:03:32,959
magically does something right we have

00:03:31,440 --> 00:03:34,959
to go through some professioning stage

00:03:32,959 --> 00:03:35,840
so we need some software on the devices

00:03:34,959 --> 00:03:38,000
too

00:03:35,840 --> 00:03:40,480
my go to tool for this is solid stack

00:03:38,000 --> 00:03:42,720
again focusing on the security reasons

00:03:40,480 --> 00:03:44,480
of why i'm using the salt stack there's

00:03:42,720 --> 00:03:46,640
one there's no ssh

00:03:44,480 --> 00:03:48,720
as a transport protocol solstack uses

00:03:46,640 --> 00:03:50,879
0mq based messaging

00:03:48,720 --> 00:03:52,560
to pass messages which the minions are

00:03:50,879 --> 00:03:56,319
subscribing to from the master

00:03:52,560 --> 00:03:56,319
and executing those days

00:03:56,400 --> 00:04:00,480
salt also has a concept of pillars which

00:03:58,799 --> 00:04:02,799
allows us to have secret information

00:04:00,480 --> 00:04:04,959
available on the salt master node

00:04:02,799 --> 00:04:07,040
and selectively distributing the keys

00:04:04,959 --> 00:04:09,040
that we want to each individual machine

00:04:07,040 --> 00:04:12,239
or minion based on a whole bunch of

00:04:09,040 --> 00:04:12,239
grains and parameters

00:04:12,879 --> 00:04:16,560
one final thing about the messaging

00:04:14,480 --> 00:04:17,919
system here is that it simplifies all of

00:04:16,560 --> 00:04:19,440
our network policies

00:04:17,919 --> 00:04:21,199
the minions only have to be able to

00:04:19,440 --> 00:04:22,800
speak to the salt master we're not

00:04:21,199 --> 00:04:24,240
opening up ports for the salt master to

00:04:22,800 --> 00:04:29,120
reach all of our minions

00:04:24,240 --> 00:04:31,440
and that's a big win too

00:04:29,120 --> 00:04:33,199
and the way that we're consuming salt

00:04:31,440 --> 00:04:34,639
stack or a provisioning salt stack on

00:04:33,199 --> 00:04:38,639
these machines

00:04:34,639 --> 00:04:40,080
is leveraging palumi's secret store

00:04:38,639 --> 00:04:42,240
writing the secrets that we need to

00:04:40,080 --> 00:04:45,280
cloud in it

00:04:42,240 --> 00:04:47,040
and then they'll come available to salt

00:04:45,280 --> 00:04:48,720
and the secrets being stored in pillars

00:04:47,040 --> 00:04:50,080
means that we can selectively distribute

00:04:48,720 --> 00:04:52,479
them based on grain data

00:04:50,080 --> 00:04:54,840
to each of the minions so the menus only

00:04:52,479 --> 00:04:57,440
get the secrets that we allow them to

00:04:54,840 --> 00:04:59,759
see

00:04:57,440 --> 00:05:01,360
and it's worth pointing out the while

00:04:59,759 --> 00:05:02,960
tinkerbell was open sourced by equinix

00:05:01,360 --> 00:05:04,880
metal and a majority of the team comes

00:05:02,960 --> 00:05:06,800
from equinix metal that is a cncf

00:05:04,880 --> 00:05:08,880
sandbox project

00:05:06,800 --> 00:05:10,800
this means that we're using hardware not

00:05:08,880 --> 00:05:13,600
on our equinox metal accounts

00:05:10,800 --> 00:05:15,199
but on our cncf accounts it also means

00:05:13,600 --> 00:05:16,560
that any maintainer or contributor

00:05:15,199 --> 00:05:19,280
regardless of where they

00:05:16,560 --> 00:05:20,560
where they are employed should be able

00:05:19,280 --> 00:05:22,400
to have the same amount of access we

00:05:20,560 --> 00:05:25,840
want to protect against the bus factor

00:05:22,400 --> 00:05:27,840
of course as well

00:05:25,840 --> 00:05:30,479
so we need to commoditize the access to

00:05:27,840 --> 00:05:30,479
the machines

00:05:31,440 --> 00:05:34,720
and for that i'm falling back on one of

00:05:33,360 --> 00:05:38,639
my other favorite tools

00:05:34,720 --> 00:05:43,520
teleport teleport allows us to disable

00:05:38,639 --> 00:05:46,639
open ssh we don't need to rely

00:05:43,520 --> 00:05:49,120
on giving people access to the machines

00:05:46,639 --> 00:05:49,840
by reaching out and getting their ssh

00:05:49,120 --> 00:05:52,720
keys

00:05:49,840 --> 00:05:54,160
or scraping them from github we don't

00:05:52,720 --> 00:05:57,919
need to add everybody

00:05:54,160 --> 00:05:57,919
to the project on equinix metal

00:05:58,000 --> 00:06:01,680
we can use teleport's ssh server which

00:06:00,960 --> 00:06:05,600
is backed by

00:06:01,680 --> 00:06:07,840
github sso and restrict access to these

00:06:05,600 --> 00:06:09,440
machines based on a group that we create

00:06:07,840 --> 00:06:11,520
within the tinkerbell organization on

00:06:09,440 --> 00:06:13,360
github

00:06:11,520 --> 00:06:15,759
so in order to give people access to the

00:06:13,360 --> 00:06:17,520
runners or to the salt master itself

00:06:15,759 --> 00:06:18,880
we just have to add them to a group on

00:06:17,520 --> 00:06:21,840
github

00:06:18,880 --> 00:06:21,840
and that's pretty cool

00:06:24,000 --> 00:06:27,280
we're keeping teleport secure by only

00:06:26,639 --> 00:06:30,319
allowing

00:06:27,280 --> 00:06:31,759
private ipv4 access for other nodes to

00:06:30,319 --> 00:06:33,840
join the cluster

00:06:31,759 --> 00:06:34,880
and again the tokens are all stored in

00:06:33,840 --> 00:06:36,960
the blooming store

00:06:34,880 --> 00:06:38,720
are encrypted by polumi and distributed

00:06:36,960 --> 00:06:39,280
via cloud and at two salt stack to the

00:06:38,720 --> 00:06:42,240
runners

00:06:39,280 --> 00:06:42,240
as needed

00:06:43,199 --> 00:06:49,840
so what does that all look like

00:06:50,160 --> 00:06:54,880
okay so first you can see all the codes

00:06:54,080 --> 00:06:56,720
to provision

00:06:54,880 --> 00:06:58,319
this infrastructure and the applications

00:06:56,720 --> 00:07:02,400
running on top of the machines

00:06:58,319 --> 00:07:04,160
at github.com tinkerbell infrastructure

00:07:02,400 --> 00:07:07,280
we have the paloma directory which is

00:07:04,160 --> 00:07:09,440
responsible for running the pollute up

00:07:07,280 --> 00:07:10,880
provisioning the bare metal writing

00:07:09,440 --> 00:07:11,680
everything that we need to cloud in it

00:07:10,880 --> 00:07:14,319
to self

00:07:11,680 --> 00:07:15,120
bootstrap the salt setup from there salt

00:07:14,319 --> 00:07:16,400
takes over

00:07:15,120 --> 00:07:18,160
and installs everything else that we

00:07:16,400 --> 00:07:21,680
need on itself

00:07:18,160 --> 00:07:21,680
and the runner devices

00:07:22,000 --> 00:07:26,720
using polumi's cloud we have access to

00:07:24,400 --> 00:07:29,840
see when pollutant commands are run

00:07:26,720 --> 00:07:32,800
against a stack we can just click on

00:07:29,840 --> 00:07:35,840
tinkerbell infrastructure production

00:07:32,800 --> 00:07:38,400
we can see the outputs you can see the

00:07:35,840 --> 00:07:41,360
configuration used including secrets

00:07:38,400 --> 00:07:41,840
although they are nicely sophisticated

00:07:41,360 --> 00:07:43,520
and

00:07:41,840 --> 00:07:45,520
what else is cool is that we have the

00:07:43,520 --> 00:07:46,080
activity view that shows us every time

00:07:45,520 --> 00:07:48,080
someone

00:07:46,080 --> 00:07:49,199
ran the blooming stack so we got really

00:07:48,080 --> 00:07:50,879
good visibility

00:07:49,199 --> 00:07:52,720
and to when any of these seekers were

00:07:50,879 --> 00:07:55,360
accessed the state was changed and nodes

00:07:52,720 --> 00:07:55,360
were spun up

00:07:56,639 --> 00:08:00,199
now in order to get access to the

00:07:58,240 --> 00:08:01,759
machines we can browse to

00:08:00,199 --> 00:08:03,680
teleport.tankerbill.org

00:08:01,759 --> 00:08:06,000
there is only one option to log in and

00:08:03,680 --> 00:08:08,160
that is through github

00:08:06,000 --> 00:08:10,840
i click the magic button and i now have

00:08:08,160 --> 00:08:12,000
access to all of the machines within the

00:08:10,840 --> 00:08:14,160
infrastructure

00:08:12,000 --> 00:08:16,160
think what is really cool about teleport

00:08:14,160 --> 00:08:19,039
as our ssh means

00:08:16,160 --> 00:08:20,800
is that we can have the ability to see

00:08:19,039 --> 00:08:22,560
active sessions and in fact we can even

00:08:20,800 --> 00:08:24,240
join them if they were in progress and

00:08:22,560 --> 00:08:27,120
see what the people are typing or doing

00:08:24,240 --> 00:08:28,240
or whatever and the sessions are also

00:08:27,120 --> 00:08:31,280
recorded

00:08:28,240 --> 00:08:36,159
so let's take a look at that

00:08:31,280 --> 00:08:36,159
we can jump on to our salt master

00:08:37,519 --> 00:08:41,760
and i can just run nice simple salt

00:08:39,599 --> 00:08:44,320
command to ensure that all of my devices

00:08:41,760 --> 00:08:44,320
are online

00:08:44,560 --> 00:08:49,680
if we pop back over here we can click on

00:08:48,080 --> 00:08:52,720
active sessions and we can see

00:08:49,680 --> 00:08:56,080
that i have an ssh session in progress

00:08:52,720 --> 00:08:56,959
and i have a join button which if i type

00:08:56,080 --> 00:09:00,560
echo

00:08:56,959 --> 00:09:04,240
hello i can see

00:09:00,560 --> 00:09:08,399
both of my terminals very very cool

00:09:04,240 --> 00:09:10,480
let's end both of these sessions

00:09:08,399 --> 00:09:13,430
and refresh and that'll end in just a

00:09:10,480 --> 00:09:16,760
moment hopefully it shows up here

00:09:13,430 --> 00:09:16,760
[Music]

00:09:19,760 --> 00:09:24,560
and now our session is gone we can go to

00:09:22,640 --> 00:09:26,160
our audit log we can see that sessions

00:09:24,560 --> 00:09:27,760
were started we can see the single

00:09:26,160 --> 00:09:29,920
sign-on from github

00:09:27,760 --> 00:09:32,480
we can see that someone joined a session

00:09:29,920 --> 00:09:35,519
and we can see the user disconnected

00:09:32,480 --> 00:09:37,040
we can come back here and click play on

00:09:35,519 --> 00:09:38,560
our recorded session

00:09:37,040 --> 00:09:40,720
and see all of those commands that were

00:09:38,560 --> 00:09:44,080
executed we got the cell

00:09:40,720 --> 00:09:50,640
we have the cell test.peng followed

00:09:44,080 --> 00:09:53,519
by our echo

00:09:50,640 --> 00:09:53,920
thank you for watching this session i

00:09:53,519 --> 00:09:56,000
hope

00:09:53,920 --> 00:09:57,680
you get as much value out of pollumi

00:09:56,000 --> 00:10:01,040
soul stack and teleport

00:09:57,680 --> 00:10:04,399
as i the tinker bell and equinix metal

00:10:01,040 --> 00:10:04,399

YouTube URL: https://www.youtube.com/watch?v=7w1ni54Zm7E


