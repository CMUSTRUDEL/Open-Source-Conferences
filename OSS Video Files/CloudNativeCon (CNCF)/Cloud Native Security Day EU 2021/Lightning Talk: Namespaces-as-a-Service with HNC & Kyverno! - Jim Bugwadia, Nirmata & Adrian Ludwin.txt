Title: Lightning Talk: Namespaces-as-a-Service with HNC & Kyverno! - Jim Bugwadia, Nirmata & Adrian Ludwin
Publication date: 2021-05-04
Playlist: Cloud Native Security Day EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Lightning Talk: Namespaces-as-a-Service with HNC and Kyverno! - Jim Bugwadia, Nirmata & Adrian Ludwin, Google

Kubernetes namespaces provide a strong security boundary and allow sharing cluster resources to reduce costs and increase efficiencies. However, enabling secure self-service namespaces is complex. In this session, Jim and Adrian from the Kubernetes Multi-Tenancy Working Group will demonstrate how the Hierarchical Namespace Controller (HNC) and Kyverno can be used together to enable “namespaces-as-a-service” for enterprise teams. First, Jim will show Kyverno how it can automate fine-grained permission management, enforce security, and generate default configurations. Next, Adrian will discuss how HNC makes it easy for developers to manage additional sub-namespaces without requiring cluster-admin privileges. They will then show a live demonstration of using the two CNCF projects together to enable self-service for namespaces without compromising security.
Captions: 
	00:00:00,719 --> 00:00:04,720
hey everyone this is jim beguardia from

00:00:02,560 --> 00:00:05,759
nermata and i'm here with adrian ludman

00:00:04,720 --> 00:00:07,600
from google

00:00:05,759 --> 00:00:09,120
and we're going to talk about namespaces

00:00:07,600 --> 00:00:12,400
as a service using

00:00:09,120 --> 00:00:13,599
hnc and kiverno so in kubernetes

00:00:12,400 --> 00:00:15,519
namespaces as a

00:00:13,599 --> 00:00:17,680
are a fundamental building block for

00:00:15,519 --> 00:00:19,359
segmentation isolation

00:00:17,680 --> 00:00:21,359
and a number of other kubernetes

00:00:19,359 --> 00:00:25,279
resources such as

00:00:21,359 --> 00:00:27,760
roles or role bindings secrets

00:00:25,279 --> 00:00:30,000
quotas all of these also build on top of

00:00:27,760 --> 00:00:32,160
name spaces

00:00:30,000 --> 00:00:34,079
when kubernetes is used within an

00:00:32,160 --> 00:00:36,320
organization

00:00:34,079 --> 00:00:37,360
and every organization of course is

00:00:36,320 --> 00:00:39,840
looking to deliver

00:00:37,360 --> 00:00:41,600
value faster to their customers to

00:00:39,840 --> 00:00:43,760
increase efficiencies

00:00:41,600 --> 00:00:45,440
multi-tenancy very quickly becomes

00:00:43,760 --> 00:00:47,680
important

00:00:45,440 --> 00:00:49,120
as a way of achieving some of these

00:00:47,680 --> 00:00:51,039
goals

00:00:49,120 --> 00:00:53,039
so there are two common ways that

00:00:51,039 --> 00:00:54,800
multi-tenancy is typically delivered

00:00:53,039 --> 00:00:57,280
within organizations

00:00:54,800 --> 00:00:58,559
either using clusters as a service where

00:00:57,280 --> 00:01:01,520
entire clusters

00:00:58,559 --> 00:01:02,960
are created for application or protein

00:01:01,520 --> 00:01:06,400
or using namespaces

00:01:02,960 --> 00:01:08,640
as a service where a shared cluster

00:01:06,400 --> 00:01:10,960
is used and different teams different

00:01:08,640 --> 00:01:13,200
apps can leverage namespaces

00:01:10,960 --> 00:01:14,159
so each model has different pros and

00:01:13,200 --> 00:01:16,320
cons

00:01:14,159 --> 00:01:17,439
namespaces as a service is slightly less

00:01:16,320 --> 00:01:19,360
flexible

00:01:17,439 --> 00:01:22,000
because you know you cannot have

00:01:19,360 --> 00:01:24,479
cluster-wide resources per tenant

00:01:22,000 --> 00:01:25,759
but there's a lot of value in utilizing

00:01:24,479 --> 00:01:28,479
namespaces

00:01:25,759 --> 00:01:30,640
as a service for agility for increased

00:01:28,479 --> 00:01:32,799
efficiencies

00:01:30,640 --> 00:01:35,600
so today what we're going to see is how

00:01:32,799 --> 00:01:37,520
hnc or hierarchical namespace controller

00:01:35,600 --> 00:01:40,159
and caverno work together

00:01:37,520 --> 00:01:43,119
to deliver namespaces as a service for

00:01:40,159 --> 00:01:43,119
organizations

00:01:43,520 --> 00:01:47,360
so i'm going to talk a little bit about

00:01:45,680 --> 00:01:49,840
hnc itself

00:01:47,360 --> 00:01:51,439
so as the name implies what we're doing

00:01:49,840 --> 00:01:52,399
is we're taking existing kubernetes

00:01:51,439 --> 00:01:54,079
namespaces

00:01:52,399 --> 00:01:55,680
and making them hierarchical now why

00:01:54,079 --> 00:01:58,479
would you want to do this uh

00:01:55,680 --> 00:02:00,000
namespaces as jim said are fundamental

00:01:58,479 --> 00:02:02,000
to a lot of different areas but they are

00:02:00,000 --> 00:02:03,200
also cluster level resources

00:02:02,000 --> 00:02:04,560
and by default are completely

00:02:03,200 --> 00:02:06,719
independent from each other this does

00:02:04,560 --> 00:02:10,080
not make them very useful

00:02:06,719 --> 00:02:11,760
uh within any kind of level of tenancy

00:02:10,080 --> 00:02:13,520
uh because you need cluster level

00:02:11,760 --> 00:02:16,720
permissions to modify them

00:02:13,520 --> 00:02:19,840
and it's hard to apply policies across

00:02:16,720 --> 00:02:21,440
um across a set of namespaces so with

00:02:19,840 --> 00:02:22,800
hierarchical namespaces you can arrange

00:02:21,440 --> 00:02:24,560
them into a hierarchy

00:02:22,800 --> 00:02:25,840
with an arbitrary depth and you could

00:02:24,560 --> 00:02:27,200
modify that

00:02:25,840 --> 00:02:29,040
that hierarchy over time with enough

00:02:27,200 --> 00:02:30,959
permissions what this allows you to do

00:02:29,040 --> 00:02:32,480
is it allows you to propagate policies

00:02:30,959 --> 00:02:34,640
from parents to children

00:02:32,480 --> 00:02:36,560
and also it lets you do some neat things

00:02:34,640 --> 00:02:38,080
with applying policies such as network

00:02:36,560 --> 00:02:39,599
policy across a group of related name

00:02:38,080 --> 00:02:41,840
spaces as well

00:02:39,599 --> 00:02:43,519
and there's a bunch of other talks

00:02:41,840 --> 00:02:44,800
online that you can find about this

00:02:43,519 --> 00:02:46,800
another thing that lets you do is

00:02:44,800 --> 00:02:48,080
self-service namespace creation so

00:02:46,800 --> 00:02:49,840
typically you need cluster level

00:02:48,080 --> 00:02:52,160
permissions to create a namespace but

00:02:49,840 --> 00:02:53,440
with hncu you can create a small object

00:02:52,160 --> 00:02:54,720
called an anchor in the parent which

00:02:53,440 --> 00:02:56,879
we'll demonstrate later

00:02:54,720 --> 00:02:59,120
and agency will create the subname space

00:02:56,879 --> 00:03:02,800
for you and then automatically propagate

00:02:59,120 --> 00:03:04,400
all the configured policies as well

00:03:02,800 --> 00:03:06,159
so why would you use this well it's

00:03:04,400 --> 00:03:06,800
great for really fine-grained namespaces

00:03:06,159 --> 00:03:08,800
if you just

00:03:06,800 --> 00:03:10,239
gave every tenant to one namespace and

00:03:08,800 --> 00:03:11,840
said well okay here's your playground

00:03:10,239 --> 00:03:13,680
you can do everything in there

00:03:11,840 --> 00:03:15,440
that can work but it doesn't allow you

00:03:13,680 --> 00:03:17,680
to differentiate between

00:03:15,440 --> 00:03:19,360
uh different security policies that

00:03:17,680 --> 00:03:22,159
might be applied to different workloads

00:03:19,360 --> 00:03:22,879
that are run by that one tenant um and

00:03:22,159 --> 00:03:24,879
so

00:03:22,879 --> 00:03:26,959
with hsc you can write composable

00:03:24,879 --> 00:03:29,040
multi-name space policies where you need

00:03:26,959 --> 00:03:30,480
and also apply workload specific

00:03:29,040 --> 00:03:31,200
policies where those are required as

00:03:30,480 --> 00:03:33,680
well

00:03:31,200 --> 00:03:35,280
and also it's useful for cell service

00:03:33,680 --> 00:03:36,879
name spaces any time where you wouldn't

00:03:35,280 --> 00:03:37,920
want to file a ticket for a cluster

00:03:36,879 --> 00:03:39,760
level operation

00:03:37,920 --> 00:03:41,280
this can be very useful in dev clusters

00:03:39,760 --> 00:03:43,840
or in clusters that use for things like

00:03:41,280 --> 00:03:46,720
batch operations

00:03:43,840 --> 00:03:49,120
now um hnc on its own can't really

00:03:46,720 --> 00:03:51,120
provide namespaces as a service because

00:03:49,120 --> 00:03:52,560
if you create a new top level namespace

00:03:51,120 --> 00:03:53,360
it's completely empty there's nothing in

00:03:52,560 --> 00:03:56,720
there

00:03:53,360 --> 00:03:57,439
um and when you create a subname space

00:03:56,720 --> 00:03:59,439
it only

00:03:57,439 --> 00:04:01,439
propagates objects from the parents so

00:03:59,439 --> 00:04:02,959
for example you can't put a quota

00:04:01,439 --> 00:04:05,920
in a child that wasn't defined and

00:04:02,959 --> 00:04:09,040
apparent um but with caverno you can

00:04:05,920 --> 00:04:11,439
use its generation in mutation um

00:04:09,040 --> 00:04:12,959
capabilities which can execute actions

00:04:11,439 --> 00:04:14,319
when you create a new namespace versus

00:04:12,959 --> 00:04:15,439
up namespace and the two of these

00:04:14,319 --> 00:04:17,680
together

00:04:15,439 --> 00:04:20,799
can give you a big piece of the

00:04:17,680 --> 00:04:22,960
namespace as a service picture

00:04:20,799 --> 00:04:25,040
so very briefly caverno is a policy

00:04:22,960 --> 00:04:27,199
engine designed for kubernetes

00:04:25,040 --> 00:04:29,360
where policies are just modeled as

00:04:27,199 --> 00:04:31,280
kubernetes resources itself

00:04:29,360 --> 00:04:32,720
there's no new language to learn so you

00:04:31,280 --> 00:04:35,840
can use familiar

00:04:32,720 --> 00:04:38,160
yaml syntax um very similar to

00:04:35,840 --> 00:04:39,600
customizers overlay patterns

00:04:38,160 --> 00:04:41,840
which you can use to define your

00:04:39,600 --> 00:04:44,080
policies itself and with caverno

00:04:41,840 --> 00:04:45,600
policies you can validate configurations

00:04:44,080 --> 00:04:46,960
you can also mutate existing

00:04:45,600 --> 00:04:49,360
configurations

00:04:46,960 --> 00:04:50,639
and generate new resources as required

00:04:49,360 --> 00:04:53,360
based on different

00:04:50,639 --> 00:04:54,560
triggers so what we'll take a quick look

00:04:53,360 --> 00:04:56,479
at in a demo

00:04:54,560 --> 00:04:57,919
is caverno managing the top level

00:04:56,479 --> 00:05:01,600
namespaces and then

00:04:57,919 --> 00:05:03,600
hnc working to create the subname spaces

00:05:01,600 --> 00:05:06,560
and propagating resources

00:05:03,600 --> 00:05:07,600
within that hierarchy itself so let me

00:05:06,560 --> 00:05:10,639
switch to my

00:05:07,600 --> 00:05:13,759
console and what i have here um

00:05:10,639 --> 00:05:17,039
is agency and group config

00:05:13,759 --> 00:05:20,240
and and given our already installed

00:05:17,039 --> 00:05:21,039
and if i look at the hnc setup um i'm

00:05:20,240 --> 00:05:23,759
going to use the

00:05:21,039 --> 00:05:25,759
hns command line plugin and describe the

00:05:23,759 --> 00:05:27,759
configuration i already have it set up

00:05:25,759 --> 00:05:29,280
to propagate different resources like

00:05:27,759 --> 00:05:31,600
network policies

00:05:29,280 --> 00:05:32,560
role bindings and roles so the first

00:05:31,600 --> 00:05:34,639
thing i'm going to do

00:05:32,560 --> 00:05:36,320
and just to further you know kind of

00:05:34,639 --> 00:05:38,639
explain the setup i have

00:05:36,320 --> 00:05:41,440
i've created a couple of custom roles

00:05:38,639 --> 00:05:43,440
these roles can only create namespaces

00:05:41,440 --> 00:05:45,039
when they can only operate based on

00:05:43,440 --> 00:05:46,800
kivernal policies they'll get

00:05:45,039 --> 00:05:50,160
fine-grained permissions

00:05:46,800 --> 00:05:52,639
to only operate on their particular

00:05:50,160 --> 00:05:54,240
namespaces itself so i'll

00:05:52,639 --> 00:05:56,400
go ahead and create try to create a

00:05:54,240 --> 00:05:59,680
namespace called test

00:05:56,400 --> 00:06:01,199
as a user one of the namespace admin

00:05:59,680 --> 00:06:03,039
users nancy

00:06:01,199 --> 00:06:05,680
and kivarno is going to block that and

00:06:03,039 --> 00:06:06,720
say that the namespace needs to have a

00:06:05,680 --> 00:06:08,720
label

00:06:06,720 --> 00:06:10,400
which designates what kind of resource

00:06:08,720 --> 00:06:12,639
quota it requires

00:06:10,400 --> 00:06:14,560
so to go ahead and create this i'm going

00:06:12,639 --> 00:06:17,360
to now use

00:06:14,560 --> 00:06:18,160
a yaml i already have with the necessary

00:06:17,360 --> 00:06:21,759
label

00:06:18,160 --> 00:06:23,120
and in fact what i should do is i'm

00:06:21,759 --> 00:06:26,479
going to create this as

00:06:23,120 --> 00:06:28,319
the as the right user so i'll delete

00:06:26,479 --> 00:06:29,440
that namespace which i created as an

00:06:28,319 --> 00:06:33,360
admin

00:06:29,440 --> 00:06:37,759
and we'll go ahead and create it again

00:06:33,360 --> 00:06:42,639
as the user

00:06:37,759 --> 00:06:42,639
nancy so let's try that again

00:06:46,800 --> 00:06:50,080
okay so now that the namespace is

00:06:48,479 --> 00:06:51,520
created as this user

00:06:50,080 --> 00:06:54,080
if we go ahead and describe the

00:06:51,520 --> 00:06:58,000
namespace what we should see

00:06:54,080 --> 00:07:00,880
um is that the properties for that

00:06:58,000 --> 00:07:02,160
namespace so we created test so it

00:07:00,880 --> 00:07:05,120
already has the resource

00:07:02,160 --> 00:07:06,800
quotas it has you know other uh like the

00:07:05,120 --> 00:07:10,560
limit range configured

00:07:06,800 --> 00:07:14,000
and it should also have if we do

00:07:10,560 --> 00:07:17,039
um a get you know for the net

00:07:14,000 --> 00:07:19,919
network policy

00:07:17,039 --> 00:07:21,840
on that namespace as that user we should

00:07:19,919 --> 00:07:23,919
see that we're allowed to

00:07:21,840 --> 00:07:25,680
see the there's a default deny network

00:07:23,919 --> 00:07:28,319
policy and the

00:07:25,680 --> 00:07:29,440
as that user we have visibility into it

00:07:28,319 --> 00:07:31,840
now just as a quick

00:07:29,440 --> 00:07:33,759
test if i try this as the other user i'm

00:07:31,840 --> 00:07:35,840
not allowed access to it

00:07:33,759 --> 00:07:37,440
so now let's go ahead and create a sub

00:07:35,840 --> 00:07:41,680
namespace using

00:07:37,440 --> 00:07:45,280
hnc um so i'll use the hns plugin

00:07:41,680 --> 00:07:47,440
and here i'm gonna to for that

00:07:45,280 --> 00:07:49,280
user i'm going to create another

00:07:47,440 --> 00:07:52,960
namespace called test2

00:07:49,280 --> 00:07:56,479
under test and we'll also do this

00:07:52,960 --> 00:07:58,800
as the namespace admin user nancy

00:07:56,479 --> 00:08:01,039
and so this creates the name the sub

00:07:58,800 --> 00:08:04,400
name space and just to see

00:08:01,039 --> 00:08:07,280
how that's set up if we look at that

00:08:04,400 --> 00:08:08,080
as nancy we should be able to see the

00:08:07,280 --> 00:08:10,479
tree

00:08:08,080 --> 00:08:12,000
and we should also again just to verify

00:08:10,479 --> 00:08:15,120
if we try it as the other user

00:08:12,000 --> 00:08:17,440
we're not able to see that and if i do a

00:08:15,120 --> 00:08:20,400
describe on this

00:08:17,440 --> 00:08:22,240
on test2 which is the other namespace i

00:08:20,400 --> 00:08:23,599
also see that the right resources are

00:08:22,240 --> 00:08:25,360
propagated

00:08:23,599 --> 00:08:27,440
so this is just a really quick demo

00:08:25,360 --> 00:08:28,800
which shows how the two tools again can

00:08:27,440 --> 00:08:30,800
work together

00:08:28,800 --> 00:08:34,240
to solve some of the main problems for

00:08:30,800 --> 00:08:34,240
namespaces as a service

00:08:34,479 --> 00:08:39,279
so just to summarize multi-tenancy is

00:08:36,959 --> 00:08:40,800
essential for most organizations for

00:08:39,279 --> 00:08:43,120
community success

00:08:40,800 --> 00:08:45,440
and namespaces as a service is a handy

00:08:43,120 --> 00:08:46,240
way of providing multi-tenancy for a

00:08:45,440 --> 00:08:49,279
large

00:08:46,240 --> 00:08:51,040
segment of applications and hnc and

00:08:49,279 --> 00:08:53,760
kiverno can work together

00:08:51,040 --> 00:08:55,680
to automate some of the key concerns for

00:08:53,760 --> 00:08:57,200
namespaces as a service

00:08:55,680 --> 00:08:59,680
so please reach out if you have more

00:08:57,200 --> 00:09:00,880
questions we are on the multi-tenancy

00:08:59,680 --> 00:09:03,920
slack channel

00:09:00,880 --> 00:09:04,480
uh on the kubernetes slack and i also

00:09:03,920 --> 00:09:07,920
have some

00:09:04,480 --> 00:09:09,519
we have links here for the repos for hnc

00:09:07,920 --> 00:09:11,680
as well as kiberno

00:09:09,519 --> 00:09:13,760
and if you want to learn more about uh

00:09:11,680 --> 00:09:16,959
hnc you can go check out some past

00:09:13,760 --> 00:09:18,399
talks that we've given at uh q con over

00:09:16,959 --> 00:09:21,920
the past year or so

00:09:18,399 --> 00:09:21,920

YouTube URL: https://www.youtube.com/watch?v=f3LBwIMk0Zs


