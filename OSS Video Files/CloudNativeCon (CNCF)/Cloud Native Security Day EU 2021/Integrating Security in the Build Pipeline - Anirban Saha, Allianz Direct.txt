Title: Integrating Security in the Build Pipeline - Anirban Saha, Allianz Direct
Publication date: 2021-05-04
Playlist: Cloud Native Security Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Integrating Security in the Build Pipeline - Anirban Saha, Allianz Direct

With infrastructures and platforms going cloud native, there are greater security risks now than ever before. In the build and release workflow, often the focus on security comes at a very later stage and sometimes unfortunately, it does not happen at all due to lot of constraints. In this session, Anirban Saha will demonstrate security can be integrated in the build and deployment pipeline and address the problems early in the process. He will stress on the factors that can be problems in achieving this objective and how to go about solving them. He will also discuss the different vulnerability points that can and need to be considered when designing the solution. He will also demonstrate situations where deployment decisions can be made depending on the security status of the artifacts thus eliminating the need for post deployment measures to tackle security flaws.
Captions: 
	00:00:00,640 --> 00:00:03,600
hey everyone i hope you have been having

00:00:02,560 --> 00:00:05,680
a great experience

00:00:03,600 --> 00:00:06,879
at the cloud native security day europe

00:00:05,680 --> 00:00:08,880
virtual event

00:00:06,879 --> 00:00:10,960
and i'm here to try and add to that

00:00:08,880 --> 00:00:12,880
experience with this session

00:00:10,960 --> 00:00:14,400
integrating security in the bill

00:00:12,880 --> 00:00:16,880
pipeline

00:00:14,400 --> 00:00:18,160
let me take a moment to introduce myself

00:00:16,880 --> 00:00:20,080
my name is anirban

00:00:18,160 --> 00:00:21,199
and i'm a member of the devops

00:00:20,080 --> 00:00:23,680
engineering team

00:00:21,199 --> 00:00:24,560
at allianz direct based in munich

00:00:23,680 --> 00:00:26,400
islands direct

00:00:24,560 --> 00:00:27,920
is the online insurance platform of

00:00:26,400 --> 00:00:30,560
allianz operating

00:00:27,920 --> 00:00:31,679
in a few countries in europe i have been

00:00:30,560 --> 00:00:33,840
working with cloud native

00:00:31,679 --> 00:00:36,000
infrastructures for almost 10 years

00:00:33,840 --> 00:00:37,120
and tend to automate solutions to make

00:00:36,000 --> 00:00:39,920
others and

00:00:37,120 --> 00:00:41,680
my life easier also with so many

00:00:39,920 --> 00:00:42,640
security incidents happening in our

00:00:41,680 --> 00:00:45,280
daily lives

00:00:42,640 --> 00:00:46,320
i sometimes tend to get a bit paranoid

00:00:45,280 --> 00:00:49,920
about security

00:00:46,320 --> 00:00:51,840
in my projects i should also mention

00:00:49,920 --> 00:00:54,719
here that all the information

00:00:51,840 --> 00:00:57,120
tools strategies opinions and

00:00:54,719 --> 00:00:59,440
demonstration presented in this session

00:00:57,120 --> 00:01:01,680
are entirely my own and they do not

00:00:59,440 --> 00:01:04,799
represent the views of alias direct

00:01:01,680 --> 00:01:07,280
or any other allianz entity although we

00:01:04,799 --> 00:01:10,080
do a lot of cool stuff at alias direct

00:01:07,280 --> 00:01:12,720
the contents of this session are not

00:01:10,080 --> 00:01:14,400
really aligned with them

00:01:12,720 --> 00:01:16,880
this session ends with a live

00:01:14,400 --> 00:01:20,080
demonstration of a ci cd pipeline

00:01:16,880 --> 00:01:22,720
with security tests enabled and involves

00:01:20,080 --> 00:01:24,479
a cloud native setup i'll explain the

00:01:22,720 --> 00:01:26,799
tools that have been used here

00:01:24,479 --> 00:01:28,479
during the session and for the attendees

00:01:26,799 --> 00:01:29,520
who are really interested in trying it

00:01:28,479 --> 00:01:31,680
out themselves

00:01:29,520 --> 00:01:34,240
i have added the configuration files in

00:01:31,680 --> 00:01:36,880
a couple of github repositories

00:01:34,240 --> 00:01:38,079
the build pipeline repository also has

00:01:36,880 --> 00:01:40,240
general guidelines

00:01:38,079 --> 00:01:41,600
about the base components that we are

00:01:40,240 --> 00:01:44,560
using in the demo

00:01:41,600 --> 00:01:46,399
and the commands to set them up i

00:01:44,560 --> 00:01:48,799
understand that for some beginners

00:01:46,399 --> 00:01:50,799
it might be a bit much to grasp but

00:01:48,799 --> 00:01:52,960
unfortunately because of some time

00:01:50,799 --> 00:01:54,799
constraints i'll not be able to

00:01:52,960 --> 00:01:55,600
demonstrate setting up the base

00:01:54,799 --> 00:01:57,920
components

00:01:55,600 --> 00:01:58,719
such as the kubernetes cluster the auto

00:01:57,920 --> 00:02:02,159
scaler

00:01:58,719 --> 00:02:02,880
and the ingress controllers so we will

00:02:02,159 --> 00:02:04,960
first look

00:02:02,880 --> 00:02:06,880
at why we are here understand the

00:02:04,960 --> 00:02:09,119
problem analyze it

00:02:06,880 --> 00:02:10,879
find out reasons for them and look at

00:02:09,119 --> 00:02:12,800
ways to mitigate them

00:02:10,879 --> 00:02:14,560
we will look at how a vulnerability

00:02:12,800 --> 00:02:16,959
scanning workflow works

00:02:14,560 --> 00:02:18,400
how they plug into the build pipeline

00:02:16,959 --> 00:02:20,800
the options that we have

00:02:18,400 --> 00:02:21,680
in terms of tools analyze different

00:02:20,800 --> 00:02:23,840
strategies

00:02:21,680 --> 00:02:25,280
to integrate security scans into the

00:02:23,840 --> 00:02:27,520
build pipeline

00:02:25,280 --> 00:02:30,480
and finally we will watch one such

00:02:27,520 --> 00:02:32,160
pipeline in live action

00:02:30,480 --> 00:02:33,680
i know that we all hate staring at

00:02:32,160 --> 00:02:35,440
powerpoint presentations

00:02:33,680 --> 00:02:37,680
believe me i know i really know that

00:02:35,440 --> 00:02:38,560
pain so i'm gonna finish up with the

00:02:37,680 --> 00:02:41,440
presentation

00:02:38,560 --> 00:02:43,040
as fast as possible and we'll dive into

00:02:41,440 --> 00:02:45,440
the fun stuff

00:02:43,040 --> 00:02:46,800
this is required as i really want to

00:02:45,440 --> 00:02:48,879
keep this simple

00:02:46,800 --> 00:02:52,560
and really want you to understand what

00:02:48,879 --> 00:02:54,800
we are doing and why we are doing it

00:02:52,560 --> 00:02:56,800
so why are we really here what is the

00:02:54,800 --> 00:02:58,879
problem that we are trying to solve

00:02:56,800 --> 00:03:01,360
in general terms we are trying to

00:02:58,879 --> 00:03:04,720
implement software security

00:03:01,360 --> 00:03:06,000
so how do we do it generally it starts

00:03:04,720 --> 00:03:09,200
with the business goals

00:03:06,000 --> 00:03:11,040
being defined resulting in products to

00:03:09,200 --> 00:03:13,840
be launched which happens

00:03:11,040 --> 00:03:15,280
at the management level the architect

00:03:13,840 --> 00:03:17,840
designs the software

00:03:15,280 --> 00:03:19,519
as per requirements developers get on

00:03:17,840 --> 00:03:21,120
the same page with the architect

00:03:19,519 --> 00:03:23,840
and they start creating some cool

00:03:21,120 --> 00:03:26,720
software with modern life cycle

00:03:23,840 --> 00:03:28,400
software life cycle processes testing

00:03:26,720 --> 00:03:30,959
the software is very essential

00:03:28,400 --> 00:03:32,080
we all we all know that once all of this

00:03:30,959 --> 00:03:34,560
is achieved

00:03:32,080 --> 00:03:35,920
the artifact is created and the product

00:03:34,560 --> 00:03:38,959
is released

00:03:35,920 --> 00:03:40,159
generally at this point a security or

00:03:38,959 --> 00:03:42,480
penetration test

00:03:40,159 --> 00:03:43,840
is scheduled where vulnerabilities are

00:03:42,480 --> 00:03:46,080
detected

00:03:43,840 --> 00:03:49,040
or sometimes unfortunately there's

00:03:46,080 --> 00:03:51,120
really no security test done at all

00:03:49,040 --> 00:03:52,640
as the software has never been scanned

00:03:51,120 --> 00:03:55,760
before this list

00:03:52,640 --> 00:03:56,879
is quite long now think about a cloud

00:03:55,760 --> 00:03:59,519
native scenario

00:03:56,879 --> 00:04:01,439
where we are talking about more than 50

00:03:59,519 --> 00:04:03,920
to 60 micro services

00:04:01,439 --> 00:04:05,439
and the amount of time it would require

00:04:03,920 --> 00:04:08,159
to fix those problems

00:04:05,439 --> 00:04:08,959
that's huge right now with product

00:04:08,159 --> 00:04:10,879
priorities

00:04:08,959 --> 00:04:12,720
and feature requests it is quite

00:04:10,879 --> 00:04:14,239
difficult to devote dedicated time for

00:04:12,720 --> 00:04:17,120
such fixes

00:04:14,239 --> 00:04:18,799
as a result it gets postponed or greatly

00:04:17,120 --> 00:04:21,040
neglected altogether

00:04:18,799 --> 00:04:22,880
and before we know there is a breach

00:04:21,040 --> 00:04:25,440
taking place

00:04:22,880 --> 00:04:27,360
so how do we approach the problem you

00:04:25,440 --> 00:04:30,880
might have come across the phase

00:04:27,360 --> 00:04:33,680
shifting left on security this

00:04:30,880 --> 00:04:34,800
very very simply means that in the left

00:04:33,680 --> 00:04:37,680
to right process

00:04:34,800 --> 00:04:38,400
progress of software development life

00:04:37,680 --> 00:04:40,479
cycle

00:04:38,400 --> 00:04:41,840
we need to move the security testing

00:04:40,479 --> 00:04:44,560
towards the left

00:04:41,840 --> 00:04:46,400
that is early on in the development

00:04:44,560 --> 00:04:49,759
process

00:04:46,400 --> 00:04:52,720
the basic idea is to detect and fix

00:04:49,759 --> 00:04:55,120
security problems during development and

00:04:52,720 --> 00:04:56,960
not after the service is released

00:04:55,120 --> 00:04:59,759
so how do we actually go about

00:04:56,960 --> 00:05:02,240
addressing the issue

00:04:59,759 --> 00:05:04,080
the final objective of any business is

00:05:02,240 --> 00:05:08,080
to create a trust relationship

00:05:04,080 --> 00:05:10,800
with the customers the clients and

00:05:08,080 --> 00:05:12,639
and the registered users to do this you

00:05:10,800 --> 00:05:14,960
need to be able to convince them

00:05:12,639 --> 00:05:16,800
that when they provide you with the data

00:05:14,960 --> 00:05:19,840
it is not going to be compromised

00:05:16,800 --> 00:05:23,120
under any circumstances at present

00:05:19,840 --> 00:05:26,800
we are providing our financial insurance

00:05:23,120 --> 00:05:29,680
medical and our personal data online

00:05:26,800 --> 00:05:31,440
to service providers every day we would

00:05:29,680 --> 00:05:32,639
definitely not want to be associated

00:05:31,440 --> 00:05:35,680
with a service

00:05:32,639 --> 00:05:38,080
who are not able to protect our data

00:05:35,680 --> 00:05:39,039
to do this first and foremost thing to

00:05:38,080 --> 00:05:41,440
be done

00:05:39,039 --> 00:05:44,479
is to make each and every person

00:05:41,440 --> 00:05:46,160
responsible for security

00:05:44,479 --> 00:05:48,000
when you leave your office door open by

00:05:46,160 --> 00:05:50,160
mistake you are responsible for the

00:05:48,000 --> 00:05:51,680
safety of hundreds of your colleagues in

00:05:50,160 --> 00:05:53,759
the office building

00:05:51,680 --> 00:05:55,199
and you can compromise it by letting in

00:05:53,759 --> 00:05:57,360
an intruder

00:05:55,199 --> 00:05:58,560
this person can be an office

00:05:57,360 --> 00:06:01,759
administrator

00:05:58,560 --> 00:06:04,160
he can be an engineer a manager or even

00:06:01,759 --> 00:06:06,000
the ceo of the company

00:06:04,160 --> 00:06:08,000
similarly in the software product

00:06:06,000 --> 00:06:10,080
lifecycle each person

00:06:08,000 --> 00:06:12,240
needs to understand that they need to be

00:06:10,080 --> 00:06:14,720
responsible for security

00:06:12,240 --> 00:06:15,520
whether it is via software design code

00:06:14,720 --> 00:06:18,840
creation

00:06:15,520 --> 00:06:21,199
software deployment or really site

00:06:18,840 --> 00:06:23,440
reliability

00:06:21,199 --> 00:06:25,840
developers really understand features

00:06:23,440 --> 00:06:28,560
and feature requests very well right

00:06:25,840 --> 00:06:29,520
so start treating security fixes as

00:06:28,560 --> 00:06:31,440
features

00:06:29,520 --> 00:06:32,639
and integrate them in the development

00:06:31,440 --> 00:06:35,039
process

00:06:32,639 --> 00:06:37,360
in large development teams instead of

00:06:35,039 --> 00:06:38,720
asking and expecting everyone to fix

00:06:37,360 --> 00:06:41,360
their libraries

00:06:38,720 --> 00:06:43,120
use a pre-built library repository which

00:06:41,360 --> 00:06:46,240
only contains pre-approved

00:06:43,120 --> 00:06:46,960
and vulnerability-free libraries to fix

00:06:46,240 --> 00:06:48,880
problems

00:06:46,960 --> 00:06:51,199
you need to detect them first and know

00:06:48,880 --> 00:06:53,039
how to make it part of the process

00:06:51,199 --> 00:06:54,720
so go for professional help in such

00:06:53,039 --> 00:06:58,400
cases or

00:06:54,720 --> 00:07:00,160
really hire dedicated security personnel

00:06:58,400 --> 00:07:02,319
train the teams so that they first

00:07:00,160 --> 00:07:04,400
understand what they are doing and why

00:07:02,319 --> 00:07:06,639
they are doing it

00:07:04,400 --> 00:07:08,560
it's not only important to decide to

00:07:06,639 --> 00:07:12,160
shift left on security

00:07:08,560 --> 00:07:14,400
but also to understand what to scan for

00:07:12,160 --> 00:07:16,240
vulnerabilities are of different kinds

00:07:14,400 --> 00:07:17,280
and there are different stages when they

00:07:16,240 --> 00:07:19,840
can be detected

00:07:17,280 --> 00:07:20,800
and fixed the first step in this

00:07:19,840 --> 00:07:23,039
direction

00:07:20,800 --> 00:07:24,479
is to look for package or dependency

00:07:23,039 --> 00:07:26,240
vulnerabilities

00:07:24,479 --> 00:07:27,919
they include base operating system

00:07:26,240 --> 00:07:31,280
packages and also

00:07:27,919 --> 00:07:34,160
application packages such as ruby python

00:07:31,280 --> 00:07:36,240
java node or just any other programming

00:07:34,160 --> 00:07:38,160
language dependencies

00:07:36,240 --> 00:07:39,360
this is a stage where the code is not

00:07:38,160 --> 00:07:41,599
involved yet

00:07:39,360 --> 00:07:43,680
it's just the system on which the code

00:07:41,599 --> 00:07:45,759
is supposed to run

00:07:43,680 --> 00:07:48,879
next we need to scan for vulnerabilities

00:07:45,759 --> 00:07:51,199
in code which has not been compiled yet

00:07:48,879 --> 00:07:54,000
these are situations when problems in

00:07:51,199 --> 00:07:57,199
the code can lead to unintended code

00:07:54,000 --> 00:07:58,000
executions this is called static

00:07:57,199 --> 00:08:01,440
application

00:07:58,000 --> 00:08:04,960
security testing or sast

00:08:01,440 --> 00:08:07,520
because the code is not running yet

00:08:04,960 --> 00:08:08,639
another type of security scanning is the

00:08:07,520 --> 00:08:12,160
dasd

00:08:08,639 --> 00:08:14,639
or dynamic application security testing

00:08:12,160 --> 00:08:15,360
in this stage the application needs to

00:08:14,639 --> 00:08:18,080
be scanned

00:08:15,360 --> 00:08:20,879
for vulnerabilities which exist when the

00:08:18,080 --> 00:08:23,120
code has been executed

00:08:20,879 --> 00:08:25,440
this need needs to be done against a

00:08:23,120 --> 00:08:27,919
running web application

00:08:25,440 --> 00:08:28,639
so we can really see that the attack

00:08:27,919 --> 00:08:31,759
vector

00:08:28,639 --> 00:08:33,440
is quite huge

00:08:31,759 --> 00:08:36,000
next we will look at general

00:08:33,440 --> 00:08:38,560
vulnerability scanning workflow

00:08:36,000 --> 00:08:40,320
the ci cd tool is probably one of the

00:08:38,560 --> 00:08:42,800
most important component

00:08:40,320 --> 00:08:44,880
in the setup which orchestrates the

00:08:42,800 --> 00:08:47,600
entire pipeline

00:08:44,880 --> 00:08:48,720
the code repository is used as a source

00:08:47,600 --> 00:08:50,880
for our code

00:08:48,720 --> 00:08:53,040
and the image repository for image

00:08:50,880 --> 00:08:55,120
artifact storage

00:08:53,040 --> 00:08:56,080
the security tool is really not

00:08:55,120 --> 00:08:59,200
mandatory

00:08:56,080 --> 00:09:03,040
in most cases there is a central

00:08:59,200 --> 00:09:05,920
solution security platform or tool

00:09:03,040 --> 00:09:07,519
which coordinates the communication

00:09:05,920 --> 00:09:10,240
between the build pipeline

00:09:07,519 --> 00:09:12,080
and the vulnerability scanners it is

00:09:10,240 --> 00:09:14,640
also used as a visibility tool

00:09:12,080 --> 00:09:16,160
to visualize vulnerability reports

00:09:14,640 --> 00:09:19,440
believe me when you look at the command

00:09:16,160 --> 00:09:22,080
line and see all those vulnerabilities

00:09:19,440 --> 00:09:24,800
it's not really that helpful a dashboard

00:09:22,080 --> 00:09:26,720
can really help you here

00:09:24,800 --> 00:09:28,160
pipelines can also direct commun

00:09:26,720 --> 00:09:30,640
directly communicate

00:09:28,160 --> 00:09:31,360
with the scanners the vulnerability

00:09:30,640 --> 00:09:33,839
scanners

00:09:31,360 --> 00:09:36,560
are the databases against which we

00:09:33,839 --> 00:09:38,880
compare our image packages

00:09:36,560 --> 00:09:39,600
if all goes well we can deploy our

00:09:38,880 --> 00:09:43,279
artifact

00:09:39,600 --> 00:09:45,920
on the container orchestration platform

00:09:43,279 --> 00:09:47,760
for our demo we will use a similar setup

00:09:45,920 --> 00:09:48,880
where we will use github as the code

00:09:47,760 --> 00:09:52,399
repository

00:09:48,880 --> 00:09:55,200
techton and argo cd as the cicd tool

00:09:52,399 --> 00:09:56,160
harbour as a security tool and the image

00:09:55,200 --> 00:09:58,480
repository

00:09:56,160 --> 00:09:59,360
and kubernetes as a container

00:09:58,480 --> 00:10:02,000
orchestration

00:09:59,360 --> 00:10:03,440
platform there are few open source

00:10:02,000 --> 00:10:06,640
vulnerability scanners

00:10:03,440 --> 00:10:09,040
available such as clear and trivi which

00:10:06,640 --> 00:10:11,279
are really really powerful tools

00:10:09,040 --> 00:10:12,079
the default deployment of harbor ships

00:10:11,279 --> 00:10:15,440
with trivi

00:10:12,079 --> 00:10:18,240
as the default scanner we will fetch

00:10:15,440 --> 00:10:19,920
our application code and dockerfile from

00:10:18,240 --> 00:10:22,560
the app repository

00:10:19,920 --> 00:10:24,000
build it and push it to a test image

00:10:22,560 --> 00:10:26,079
repository

00:10:24,000 --> 00:10:27,200
we will then scan the image from the

00:10:26,079 --> 00:10:29,839
test repository

00:10:27,200 --> 00:10:30,640
for vulnerabilities if there are none to

00:10:29,839 --> 00:10:33,279
be found

00:10:30,640 --> 00:10:35,040
then the image is promoted from the test

00:10:33,279 --> 00:10:37,600
to a prod repository

00:10:35,040 --> 00:10:39,279
finally we will deploy the app from the

00:10:37,600 --> 00:10:41,279
prod repository

00:10:39,279 --> 00:10:43,200
we definitely wouldn't want vulnerable

00:10:41,279 --> 00:10:44,320
images to land up in plot repositories

00:10:43,200 --> 00:10:46,560
right

00:10:44,320 --> 00:10:47,760
if the image has vulnerabilities the

00:10:46,560 --> 00:10:50,160
pipeline will stop

00:10:47,760 --> 00:10:53,279
at that stage and we can visualize the

00:10:50,160 --> 00:10:56,959
vulnerabilities in the harvard dashboard

00:10:53,279 --> 00:11:00,240
for our demo our app is a simple nginx

00:10:56,959 --> 00:11:00,720
container built from a debian or ubuntu

00:11:00,240 --> 00:11:04,399
based

00:11:00,720 --> 00:11:07,360
image nginx is installed on this image

00:11:04,399 --> 00:11:07,760
and a test web page is added so really

00:11:07,360 --> 00:11:11,360
really

00:11:07,760 --> 00:11:13,360
simple stuff the debian image has high

00:11:11,360 --> 00:11:15,200
and critical vulnerabilities which we

00:11:13,360 --> 00:11:18,560
don't want to be in fraud

00:11:15,200 --> 00:11:20,800
whereas the ubuntu image only has medium

00:11:18,560 --> 00:11:23,120
and lower vulnerabilities which we

00:11:20,800 --> 00:11:24,720
definitely want deployed

00:11:23,120 --> 00:11:26,640
that that will actually be our

00:11:24,720 --> 00:11:28,880
simulation

00:11:26,640 --> 00:11:29,760
we will use techton to create a build

00:11:28,880 --> 00:11:32,160
pipeline

00:11:29,760 --> 00:11:34,240
an argo cd to run the pipeline and

00:11:32,160 --> 00:11:36,720
deploy it on kubernetes

00:11:34,240 --> 00:11:37,440
argo cd is a cloud native deployment

00:11:36,720 --> 00:11:40,560
tool

00:11:37,440 --> 00:11:42,720
based on the gitops methodology there

00:11:40,560 --> 00:11:45,200
are some two specific terminologies

00:11:42,720 --> 00:11:46,720
used in the session but if you feel

00:11:45,200 --> 00:11:49,519
intimidated

00:11:46,720 --> 00:11:51,600
please feel free to use any other ci

00:11:49,519 --> 00:11:55,040
tool of your choice

00:11:51,600 --> 00:11:58,160
it is also a cncf incubating project

00:11:55,040 --> 00:12:00,320
however is also a cncf graduated project

00:11:58,160 --> 00:12:01,519
which is an image registry and helm

00:12:00,320 --> 00:12:04,160
repository

00:12:01,519 --> 00:12:04,959
it can also add plugable vulnerability

00:12:04,160 --> 00:12:08,880
scanners

00:12:04,959 --> 00:12:10,560
to be able to scan the uploaded images

00:12:08,880 --> 00:12:12,800
although we will demonstrate an

00:12:10,560 --> 00:12:14,880
automated bill pipeline in this demo

00:12:12,800 --> 00:12:16,320
this is quite far from a production

00:12:14,880 --> 00:12:18,399
build setup

00:12:16,320 --> 00:12:20,000
advanced features such as triggering

00:12:18,399 --> 00:12:22,320
pipelines via events

00:12:20,000 --> 00:12:23,760
and passing parameters are not part of

00:12:22,320 --> 00:12:26,399
this demo

00:12:23,760 --> 00:12:27,839
i have kept the app repo with helm chart

00:12:26,399 --> 00:12:30,079
and the pipeline repo

00:12:27,839 --> 00:12:31,200
different to help you understand this

00:12:30,079 --> 00:12:34,079
better

00:12:31,200 --> 00:12:36,800
however they can be modified to create a

00:12:34,079 --> 00:12:40,320
more sophisticated workflow

00:12:36,800 --> 00:12:42,079
okay so we will now start with our demo

00:12:40,320 --> 00:12:44,079
this is the hardware dashboard that we

00:12:42,079 --> 00:12:45,279
have already installed in our kubernetes

00:12:44,079 --> 00:12:47,360
cluster

00:12:45,279 --> 00:12:48,320
we have created two different projects

00:12:47,360 --> 00:12:52,240
one for broad

00:12:48,320 --> 00:12:55,519
and one for test each harbour project

00:12:52,240 --> 00:12:58,320
acts as a docker image registry and

00:12:55,519 --> 00:13:00,320
also a help chart repository we have

00:12:58,320 --> 00:13:02,959
already gone to the configuration page

00:13:00,320 --> 00:13:04,399
for both projects and enabled the option

00:13:02,959 --> 00:13:07,839
to automatically scan

00:13:04,399 --> 00:13:07,839
images on push

00:13:08,320 --> 00:13:12,639
if we go to integration services we can

00:13:10,320 --> 00:13:15,680
see that trivi is already installed

00:13:12,639 --> 00:13:19,360
as the default scanner if we want

00:13:15,680 --> 00:13:21,839
we can add a new scanner like claire

00:13:19,360 --> 00:13:22,560
we have already set up claire in the

00:13:21,839 --> 00:13:25,120
harbour

00:13:22,560 --> 00:13:27,040
namespace in kubernetes if we check the

00:13:25,120 --> 00:13:29,120
parts

00:13:27,040 --> 00:13:31,040
we can see we have a clear part running

00:13:29,120 --> 00:13:31,760
and a clear postgres board which is a

00:13:31,040 --> 00:13:33,920
database

00:13:31,760 --> 00:13:35,760
where it stores the vulnerabilities

00:13:33,920 --> 00:13:38,959
database

00:13:35,760 --> 00:13:41,279
we also have a clear scanner adapter

00:13:38,959 --> 00:13:43,279
which helps clear to communicate with

00:13:41,279 --> 00:13:46,560
hardware

00:13:43,279 --> 00:13:49,839
if we add a new scanner

00:13:46,560 --> 00:13:49,839
we name it claire

00:13:50,959 --> 00:13:54,079
we put in the address which is the

00:13:53,360 --> 00:13:58,560
service

00:13:54,079 --> 00:13:58,560
for glare and the port

00:13:59,440 --> 00:14:04,320
there you can see we have added glare as

00:14:02,560 --> 00:14:07,680
a secondary

00:14:04,320 --> 00:14:10,959
vulnerability scanner for our demo

00:14:07,680 --> 00:14:12,880
we will still use trivi

00:14:10,959 --> 00:14:15,279
for our demo we have created couple of

00:14:12,880 --> 00:14:18,320
help charts which will help us

00:14:15,279 --> 00:14:19,839
run our pipeline the first term chart is

00:14:18,320 --> 00:14:22,959
called app deploy

00:14:19,839 --> 00:14:25,440
which is actually a simple help chart

00:14:22,959 --> 00:14:26,399
to deploy an application and create an

00:14:25,440 --> 00:14:29,360
ingress for it

00:14:26,399 --> 00:14:30,000
to expose it to the internet the second

00:14:29,360 --> 00:14:34,240
helm chart

00:14:30,000 --> 00:14:37,040
is called tecton build pipeline which

00:14:34,240 --> 00:14:37,760
contains all the configurations to run a

00:14:37,040 --> 00:14:41,600
tecton

00:14:37,760 --> 00:14:44,880
build pipeline we have already built

00:14:41,600 --> 00:14:47,519
both of these hunt charts

00:14:44,880 --> 00:14:49,440
and we have already uploaded them to the

00:14:47,519 --> 00:14:52,480
health charts repository

00:14:49,440 --> 00:14:54,079
in the broad project in harbour

00:14:52,480 --> 00:14:56,079
if we check the build pipeline

00:14:54,079 --> 00:14:57,360
repository we will find a directory

00:14:56,079 --> 00:14:59,199
called secrets

00:14:57,360 --> 00:15:01,199
which are some kubernetes secret

00:14:59,199 --> 00:15:03,360
manifests which are to be applied

00:15:01,199 --> 00:15:05,279
to the combinator's namespaces before

00:15:03,360 --> 00:15:06,880
our demo can be run

00:15:05,279 --> 00:15:09,120
they are just basic authentication

00:15:06,880 --> 00:15:12,240
credentials as some and some docker

00:15:09,120 --> 00:15:15,920
registry credentials

00:15:12,240 --> 00:15:17,920
next if we check our health charts

00:15:15,920 --> 00:15:19,440
we will quickly go to the components

00:15:17,920 --> 00:15:22,399
that we have added here

00:15:19,440 --> 00:15:24,399
we have added some pipeline resources

00:15:22,399 --> 00:15:27,839
which have our git repository

00:15:24,399 --> 00:15:27,839
and the image registry

00:15:28,639 --> 00:15:34,800
we have added some config maps which has

00:15:31,680 --> 00:15:36,560
the metadata for our build pipeline like

00:15:34,800 --> 00:15:39,600
docker tag the image name

00:15:36,560 --> 00:15:43,519
the namespaces and the argo cd server

00:15:39,600 --> 00:15:43,519
and the argosy application name

00:15:43,680 --> 00:15:47,680
we also have a series of tasks that we

00:15:46,959 --> 00:15:49,519
are going to run

00:15:47,680 --> 00:15:52,720
in our pipeline which we have already

00:15:49,519 --> 00:15:54,959
discussed which is the docker build task

00:15:52,720 --> 00:15:56,160
the security scan task the image

00:15:54,959 --> 00:16:01,199
promotion task

00:15:56,160 --> 00:16:01,199
and finally the rocd up sync task

00:16:02,480 --> 00:16:06,399
we also have a service account which is

00:16:04,720 --> 00:16:07,680
attached to one of the docker

00:16:06,399 --> 00:16:09,920
credentials

00:16:07,680 --> 00:16:12,800
which helps us to provide authentication

00:16:09,920 --> 00:16:16,079
for our pipeline

00:16:12,800 --> 00:16:18,079
we have a pipeline definition which

00:16:16,079 --> 00:16:20,720
integrates all the tasks that we have

00:16:18,079 --> 00:16:23,440
already created

00:16:20,720 --> 00:16:24,160
and finally we have a pipeline run

00:16:23,440 --> 00:16:27,279
definition

00:16:24,160 --> 00:16:30,320
which actually runs our pipeline

00:16:27,279 --> 00:16:31,600
using tecton our second repository is

00:16:30,320 --> 00:16:33,440
called example app

00:16:31,600 --> 00:16:36,000
which has the configurations for the

00:16:33,440 --> 00:16:38,160
application that we are going to deploy

00:16:36,000 --> 00:16:40,160
the first directory is called app and it

00:16:38,160 --> 00:16:41,839
contains the docker file

00:16:40,160 --> 00:16:44,079
and the sample web page that we are

00:16:41,839 --> 00:16:45,839
going to deploy we are going to start

00:16:44,079 --> 00:16:47,120
with the debian image which is supposed

00:16:45,839 --> 00:16:48,240
to have the high and critical

00:16:47,120 --> 00:16:51,279
vulnerabilities

00:16:48,240 --> 00:16:53,519
and will be breaking our pipeline

00:16:51,279 --> 00:16:54,480
the second directory is called hell map

00:16:53,519 --> 00:16:57,600
and it has

00:16:54,480 --> 00:16:58,160
the helm chart specification to deploy

00:16:57,600 --> 00:17:00,160
the

00:16:58,160 --> 00:17:04,480
application and it uses the app

00:17:00,160 --> 00:17:06,079
deployment chart as a dependency

00:17:04,480 --> 00:17:08,640
the third directory is called helm

00:17:06,079 --> 00:17:11,120
pipeline and it uses the tecton build

00:17:08,640 --> 00:17:11,919
pipeline helm chart as a dependency and

00:17:11,120 --> 00:17:14,959
will be used

00:17:11,919 --> 00:17:17,120
to run a tecton pipeline

00:17:14,959 --> 00:17:18,959
in the build pipeline repository there's

00:17:17,120 --> 00:17:19,839
another directory called argo cd

00:17:18,959 --> 00:17:22,480
resources

00:17:19,839 --> 00:17:24,720
which has some manifests for our argo cd

00:17:22,480 --> 00:17:28,160
application

00:17:24,720 --> 00:17:30,480
the first one is used to add the

00:17:28,160 --> 00:17:32,080
hardware registry information into argo

00:17:30,480 --> 00:17:34,720
cd so that it can fetch

00:17:32,080 --> 00:17:34,720
help charts

00:17:35,120 --> 00:17:38,960
the example app manifest is used to

00:17:38,000 --> 00:17:41,520
create the applique

00:17:38,960 --> 00:17:44,160
the argo cd application to deploy to

00:17:41,520 --> 00:17:46,320
actually deploy the application

00:17:44,160 --> 00:17:47,919
and the third manifest is used to create

00:17:46,320 --> 00:17:51,200
the argo city application

00:17:47,919 --> 00:17:53,600
which will run our pill pipeline we will

00:17:51,200 --> 00:17:56,559
now go to the command line

00:17:53,600 --> 00:17:58,880
go to the argo city resources directory

00:17:56,559 --> 00:17:58,880
and

00:17:59,200 --> 00:18:14,720
we will apply each

00:18:02,240 --> 00:18:18,559
of this manifests

00:18:14,720 --> 00:18:21,520
if we now go to the argo cd dashboard

00:18:18,559 --> 00:18:23,200
we will see both our applications have

00:18:21,520 --> 00:18:25,360
been created

00:18:23,200 --> 00:18:27,520
and if we go to the repositories page we

00:18:25,360 --> 00:18:30,880
will see that our hardware

00:18:27,520 --> 00:18:31,679
helmet repository has automatically been

00:18:30,880 --> 00:18:34,160
added

00:18:31,679 --> 00:18:35,919
and the connection is successful the

00:18:34,160 --> 00:18:38,799
example lab build pipeline

00:18:35,919 --> 00:18:40,160
gets its configuration from the helm

00:18:38,799 --> 00:18:43,760
pipeline directory

00:18:40,160 --> 00:18:45,039
of the example app repository the values

00:18:43,760 --> 00:18:47,280
file

00:18:45,039 --> 00:18:48,080
of the sun chart has the corresponding

00:18:47,280 --> 00:18:50,799
values

00:18:48,080 --> 00:18:52,400
which helps the pipeline determine its

00:18:50,799 --> 00:18:54,960
status

00:18:52,400 --> 00:18:55,760
if we go to the argo cd application we

00:18:54,960 --> 00:18:57,919
will see

00:18:55,760 --> 00:18:59,120
that all of these resources are ready to

00:18:57,919 --> 00:19:01,679
be created

00:18:59,120 --> 00:19:03,120
and it creates a dynamic name for the

00:19:01,679 --> 00:19:06,160
pipeline run

00:19:03,120 --> 00:19:09,200
with help of the tag

00:19:06,160 --> 00:19:11,360
that we have added in the values file

00:19:09,200 --> 00:19:13,360
in a more sophisticated workflow we will

00:19:11,360 --> 00:19:16,000
not be adding this tag manually

00:19:13,360 --> 00:19:17,840
but it will be created when our

00:19:16,000 --> 00:19:21,440
automated build pipeline works

00:19:17,840 --> 00:19:24,080
via triggers and events so finally

00:19:21,440 --> 00:19:24,480
it's time for us to run our pipeline and

00:19:24,080 --> 00:19:28,000
see

00:19:24,480 --> 00:19:30,480
the output we will run the sync option

00:19:28,000 --> 00:19:31,200
and we will select the prone parameter

00:19:30,480 --> 00:19:34,400
here

00:19:31,200 --> 00:19:36,160
and we will run synchronize this will

00:19:34,400 --> 00:19:39,200
take some time so i will skip

00:19:36,160 --> 00:19:40,880
the video here if we now check our

00:19:39,200 --> 00:19:45,679
pipeline we will see that

00:19:40,880 --> 00:19:47,840
it has stopped at the security scan step

00:19:45,679 --> 00:19:49,440
and we will see the reason why because

00:19:47,840 --> 00:19:52,480
it has found high

00:19:49,440 --> 00:19:53,520
and critical vulnerabilities so in the

00:19:52,480 --> 00:19:55,600
meantime

00:19:53,520 --> 00:19:57,840
we have gone ahead and we have edited a

00:19:55,600 --> 00:19:58,480
docker file to change the image from

00:19:57,840 --> 00:20:01,840
debian

00:19:58,480 --> 00:20:04,960
to ubuntu and we have

00:20:01,840 --> 00:20:08,880
also bumped

00:20:04,960 --> 00:20:09,360
the tag for the image if we go to argo

00:20:08,880 --> 00:20:11,120
cd

00:20:09,360 --> 00:20:13,200
we will see that the change has

00:20:11,120 --> 00:20:15,760
automatically been detected

00:20:13,200 --> 00:20:16,640
and the zero zero one pipeline run is to

00:20:15,760 --> 00:20:19,919
be removed

00:20:16,640 --> 00:20:20,480
and a new pipeline run with 002 will be

00:20:19,919 --> 00:20:23,200
started

00:20:20,480 --> 00:20:24,320
when we synchronize the pipeline so we

00:20:23,200 --> 00:20:27,200
will go ahead

00:20:24,320 --> 00:20:28,400
and run synchronize again and we will

00:20:27,200 --> 00:20:31,039
select the prune option

00:20:28,400 --> 00:20:31,679
so that the old pipeline's old tasks are

00:20:31,039 --> 00:20:35,840
removed

00:20:31,679 --> 00:20:35,840
and the new ones are created

00:20:37,440 --> 00:20:41,520
if we now check our pipeline we will see

00:20:39,440 --> 00:20:44,720
that it has completed successfully

00:20:41,520 --> 00:20:45,600
because the security scan step was not

00:20:44,720 --> 00:20:48,640
able to find

00:20:45,600 --> 00:20:50,559
high or critical vulnerabilities

00:20:48,640 --> 00:20:53,120
if we now quickly check our hardware

00:20:50,559 --> 00:20:56,400
dashboard and check the test project

00:20:53,120 --> 00:20:58,799
we will find our example have image here

00:20:56,400 --> 00:21:00,159
and if we go into details we will see

00:20:58,799 --> 00:21:02,480
each of our tags

00:21:00,159 --> 00:21:03,360
with its corresponding vulnerabilities

00:21:02,480 --> 00:21:06,400
here we can see

00:21:03,360 --> 00:21:07,039
tag 001 has critical vulnerabilities and

00:21:06,400 --> 00:21:10,080
0 0

00:21:07,039 --> 00:21:14,000
2 has medium and lower ones which is why

00:21:10,080 --> 00:21:16,240
it allowed us to perform our deployment

00:21:14,000 --> 00:21:18,640
if we go further we can actually get

00:21:16,240 --> 00:21:21,679
details about all the vulnerabilities

00:21:18,640 --> 00:21:24,400
that were found if you're curious as to

00:21:21,679 --> 00:21:26,640
what we did for the security scan step

00:21:24,400 --> 00:21:29,440
just go to the tasks manifest file in

00:21:26,640 --> 00:21:32,400
the tecton build pipeline head chart

00:21:29,440 --> 00:21:34,159
go to the app docker security scan task

00:21:32,400 --> 00:21:37,600
and there you will be able to see

00:21:34,159 --> 00:21:40,880
that we used the trivi docker image

00:21:37,600 --> 00:21:44,159
and we ran the trivi command to scan

00:21:40,880 --> 00:21:44,480
our image from the test repository and

00:21:44,159 --> 00:21:46,400
we

00:21:44,480 --> 00:21:47,679
checked for high and critical

00:21:46,400 --> 00:21:50,480
vulnerabilities

00:21:47,679 --> 00:21:52,799
and we asked the command to fail if it

00:21:50,480 --> 00:21:54,960
did find such vulnerabilities

00:21:52,799 --> 00:21:55,919
so with that we have reached the end of

00:21:54,960 --> 00:21:58,080
this session

00:21:55,919 --> 00:21:59,360
i hope the session was able to help you

00:21:58,080 --> 00:22:01,600
get some understanding

00:21:59,360 --> 00:22:02,640
of how we can have better and secure

00:22:01,600 --> 00:22:04,880
build pipelines

00:22:02,640 --> 00:22:05,919
and optimize the software development

00:22:04,880 --> 00:22:08,400
process

00:22:05,919 --> 00:22:10,640
i have added some links about this topic

00:22:08,400 --> 00:22:13,039
so be sure to check them out

00:22:10,640 --> 00:22:14,720
i hope to see you in another awesome

00:22:13,039 --> 00:22:17,600
event in the future

00:22:14,720 --> 00:22:17,600

YouTube URL: https://www.youtube.com/watch?v=eP3RSo4UsHM


