Title: Lightning Talk: Building web services for a future based on WebAssembly - Connor Hicks, 1Password
Publication date: 2021-05-04
Playlist: Cloud Native Wasm Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Lightning Talk: Building web services for a future based on WebAssembly - Connor Hicks, 1Password

In this talk, Connor will dive into Atmo, an open source framework designed for building cloud native applications using WebAssembly modules. Atmo is enabling developers to build their applications with the popular patterns of serverless computing, while harnessing the power and security of WebAssembly. Connor will show how WebAssembly makes it easier to deploy an application to the cloud by demonstrating Atmo's unique development patterns, easy to use APIs, and straightforward deployments. Connor will also be providing extensive example code and a deep dive into what makes WebAssembly the next iteration of cloud software development.
Captions: 
	00:00:01,199 --> 00:00:05,359
hello my name is connor hicks i'm a

00:00:03,360 --> 00:00:07,279
staff developer and one password

00:00:05,359 --> 00:00:09,840
and for the last year and a half or so

00:00:07,279 --> 00:00:12,799
i've been building suborbital which is

00:00:09,840 --> 00:00:13,360
a group of open source repos that work

00:00:12,799 --> 00:00:16,000
together

00:00:13,360 --> 00:00:18,080
to make webassembly on the server a

00:00:16,000 --> 00:00:19,760
useful and practical tool

00:00:18,080 --> 00:00:21,439
i'm going to be talking about building

00:00:19,760 --> 00:00:22,880
web services for a future based on

00:00:21,439 --> 00:00:24,560
webassembly and i'm going to be doing a

00:00:22,880 --> 00:00:26,640
deep dive into atmo which is one of the

00:00:24,560 --> 00:00:28,160
sub-orbital projects

00:00:26,640 --> 00:00:30,080
so a little bit more about what

00:00:28,160 --> 00:00:32,160
suborbital does it

00:00:30,080 --> 00:00:34,880
is a collection of projects it started

00:00:32,160 --> 00:00:36,719
out as a functions as a service system

00:00:34,880 --> 00:00:38,239
but has since evolved to include

00:00:36,719 --> 00:00:39,600
multiple projects that are all working

00:00:38,239 --> 00:00:42,559
together towards this goal

00:00:39,600 --> 00:00:43,200
of server-side webassembly so the

00:00:42,559 --> 00:00:46,160
projects

00:00:43,200 --> 00:00:46,960
are reactor it's a job scheduler it's

00:00:46,160 --> 00:00:48,879
kind of the core

00:00:46,960 --> 00:00:50,160
that actually runs the webassembly

00:00:48,879 --> 00:00:53,199
modules it

00:00:50,160 --> 00:00:54,640
manages their memory inputs outputs and

00:00:53,199 --> 00:00:56,640
all the asynchronous execution that

00:00:54,640 --> 00:00:59,760
needs to happen grav

00:00:56,640 --> 00:01:00,640
is a message bus that allows go

00:00:59,760 --> 00:01:03,520
applications

00:01:00,640 --> 00:01:04,400
to communicate asynchronously using

00:01:03,520 --> 00:01:07,439
plugins for

00:01:04,400 --> 00:01:08,640
discovering each other and also actually

00:01:07,439 --> 00:01:11,040
communicating with each other over

00:01:08,640 --> 00:01:13,280
various protocols and then vector

00:01:11,040 --> 00:01:14,560
is an http framework that integrates

00:01:13,280 --> 00:01:16,159
really tightly with grav

00:01:14,560 --> 00:01:18,080
and reactor and when you put those three

00:01:16,159 --> 00:01:20,000
together it forms atmo

00:01:18,080 --> 00:01:22,159
and that is what i call the batteries

00:01:20,000 --> 00:01:24,799
included web assembly framework

00:01:22,159 --> 00:01:26,400
and includes all of the apis and the

00:01:24,799 --> 00:01:27,040
server server-side runtime that allows

00:01:26,400 --> 00:01:29,040
you to

00:01:27,040 --> 00:01:31,119
build cloud-native applications with

00:01:29,040 --> 00:01:33,280
webassembly

00:01:31,119 --> 00:01:35,280
and atmo is being developed alongside

00:01:33,280 --> 00:01:37,520
what i call the sufa design pattern

00:01:35,280 --> 00:01:39,200
this is a way of building applications

00:01:37,520 --> 00:01:42,399
that they're easy to understand

00:01:39,200 --> 00:01:44,000
and easy to deploy so sufa stands for

00:01:42,399 --> 00:01:45,759
simple unified function based

00:01:44,000 --> 00:01:47,680
applications and

00:01:45,759 --> 00:01:48,880
it quite simply means that your

00:01:47,680 --> 00:01:50,479
application should be simple to

00:01:48,880 --> 00:01:51,840
understand and simple to deploy

00:01:50,479 --> 00:01:54,159
using something like a simple auto

00:01:51,840 --> 00:01:56,159
scaling group it should be unified

00:01:54,159 --> 00:01:57,680
meaning that when you build them it

00:01:56,159 --> 00:02:01,040
results in a single

00:01:57,680 --> 00:02:03,200
thing that thing can be a docker image

00:02:01,040 --> 00:02:05,360
or it can be an atmo application bundle

00:02:03,200 --> 00:02:06,320
but you don't need to build many docker

00:02:05,360 --> 00:02:08,399
images or

00:02:06,320 --> 00:02:10,160
many different things in order for your

00:02:08,399 --> 00:02:12,160
system to work properly

00:02:10,160 --> 00:02:15,200
and then function based means that you

00:02:12,160 --> 00:02:16,879
are segmenting your application into

00:02:15,200 --> 00:02:18,319
multiple different functions that are

00:02:16,879 --> 00:02:20,400
composed together

00:02:18,319 --> 00:02:22,400
to form your business logic and we'll

00:02:20,400 --> 00:02:24,720
talk about how that works

00:02:22,400 --> 00:02:26,080
using the directive which is a

00:02:24,720 --> 00:02:29,040
declarative file

00:02:26,080 --> 00:02:29,520
that describes your application and

00:02:29,040 --> 00:02:31,040
actually

00:02:29,520 --> 00:02:33,680
lets you compose those functions

00:02:31,040 --> 00:02:36,720
together using different control

00:02:33,680 --> 00:02:37,680
flows and different clauses and

00:02:36,720 --> 00:02:40,319
operators that

00:02:37,680 --> 00:02:41,280
make it really easy to work with complex

00:02:40,319 --> 00:02:42,800
logic

00:02:41,280 --> 00:02:44,800
we'll talk about a whole lot more of

00:02:42,800 --> 00:02:47,920
that in a minute

00:02:44,800 --> 00:02:50,080
so we're gonna go deep into atmo

00:02:47,920 --> 00:02:51,280
i'm gonna give you a quick tour of an

00:02:50,080 --> 00:02:54,879
apple application

00:02:51,280 --> 00:02:56,080
and we'll talk about how it all works

00:02:54,879 --> 00:02:58,319
the application that i'm going to go

00:02:56,080 --> 00:03:00,879
through is called telescope it is

00:02:58,319 --> 00:03:02,080
on my github my github is cohex

00:03:00,879 --> 00:03:03,840
c-o-h-i-x

00:03:02,080 --> 00:03:06,800
you can find all the source code there

00:03:03,840 --> 00:03:09,200
and you can try it out for yourself

00:03:06,800 --> 00:03:10,239
so the directive is where everything

00:03:09,200 --> 00:03:12,319
starts and

00:03:10,239 --> 00:03:13,599
so i'll take you through a quick tour of

00:03:12,319 --> 00:03:15,680
it uh

00:03:13,599 --> 00:03:16,959
it describes all the endpoints that this

00:03:15,680 --> 00:03:19,200
application will provide

00:03:16,959 --> 00:03:20,080
things like getting files getting a list

00:03:19,200 --> 00:03:22,560
of repos

00:03:20,080 --> 00:03:23,920
getting a single repo and generating

00:03:22,560 --> 00:03:24,480
report we'll talk about this one a

00:03:23,920 --> 00:03:26,959
little bit more

00:03:24,480 --> 00:03:28,879
later but the overall goal of the

00:03:26,959 --> 00:03:29,680
application is to provide information

00:03:28,879 --> 00:03:32,799
about

00:03:29,680 --> 00:03:35,599
the repos in an organization so

00:03:32,799 --> 00:03:37,040
let's dive in and look at the list repos

00:03:35,599 --> 00:03:38,959
runnable

00:03:37,040 --> 00:03:41,120
so this one's written in rust atmos

00:03:38,959 --> 00:03:42,959
supports rust and swift and more

00:03:41,120 --> 00:03:44,879
languages are coming soon

00:03:42,959 --> 00:03:46,480
but what they all have in common is they

00:03:44,879 --> 00:03:47,599
use something called the suborbital

00:03:46,480 --> 00:03:49,920
runnable api

00:03:47,599 --> 00:03:52,080
in order to gain access to capabilities

00:03:49,920 --> 00:03:55,200
that server side applications need to

00:03:52,080 --> 00:03:55,760
operate properly so things like access

00:03:55,200 --> 00:03:57,920
and cache

00:03:55,760 --> 00:03:59,760
making http requests and more these are

00:03:57,920 --> 00:04:02,959
all granted by the host

00:03:59,760 --> 00:04:04,640
to work with the webassembly sandbox

00:04:02,959 --> 00:04:06,159
ensure you have everything you need to

00:04:04,640 --> 00:04:07,439
build your application without

00:04:06,159 --> 00:04:09,439
sacrificing the security that

00:04:07,439 --> 00:04:13,040
webassembly provides

00:04:09,439 --> 00:04:15,680
so the runnable itself conforms to the

00:04:13,040 --> 00:04:17,519
runnable trait and that just means it

00:04:15,680 --> 00:04:19,840
has a run function that takes an input

00:04:17,519 --> 00:04:22,079
provides either an output or an error

00:04:19,840 --> 00:04:23,840
and then it uses that runnable api to

00:04:22,079 --> 00:04:26,000
actually do something interesting

00:04:23,840 --> 00:04:27,759
so in this case we're using the file api

00:04:26,000 --> 00:04:29,759
to get some configuration

00:04:27,759 --> 00:04:31,440
and this allows you to actually package

00:04:29,759 --> 00:04:33,759
static files with your application

00:04:31,440 --> 00:04:35,199
and they get mounted as a read-only file

00:04:33,759 --> 00:04:36,080
system that you can access from your

00:04:35,199 --> 00:04:37,840
modules

00:04:36,080 --> 00:04:39,919
so for example if i'm getting this

00:04:37,840 --> 00:04:40,479
organization configuration file that

00:04:39,919 --> 00:04:43,120
tells me

00:04:40,479 --> 00:04:44,639
which organization that the application

00:04:43,120 --> 00:04:47,759
is being run against

00:04:44,639 --> 00:04:48,479
and i can use things like the http

00:04:47,759 --> 00:04:51,680
client

00:04:48,479 --> 00:04:55,040
and access things like a cache

00:04:51,680 --> 00:04:58,160
now this directive is using

00:04:55,040 --> 00:05:00,400
the the runnable to

00:04:58,160 --> 00:05:01,199
respond directly to the request and so

00:05:00,400 --> 00:05:03,280
the runnable

00:05:01,199 --> 00:05:05,840
responds with json and actually sets

00:05:03,280 --> 00:05:07,360
some response headers like the content

00:05:05,840 --> 00:05:09,199
type

00:05:07,360 --> 00:05:10,639
so let's take a look at what it actually

00:05:09,199 --> 00:05:12,320
means to run this application we're

00:05:10,639 --> 00:05:13,759
going to use the suborbital cli tool

00:05:12,320 --> 00:05:16,160
which is called subo

00:05:13,759 --> 00:05:17,680
and we're going to run subo build i'm

00:05:16,160 --> 00:05:19,199
going to pass the native flag because i

00:05:17,680 --> 00:05:22,000
want to use the tool chains on my

00:05:19,199 --> 00:05:23,600
local machine if you don't have the

00:05:22,000 --> 00:05:24,000
various language tool chains installed

00:05:23,600 --> 00:05:26,479
subo

00:05:24,000 --> 00:05:27,280
actually ships with a docker runtime

00:05:26,479 --> 00:05:29,360
that can

00:05:27,280 --> 00:05:31,600
build your applications without needing

00:05:29,360 --> 00:05:32,960
to have for example the cargo tool chain

00:05:31,600 --> 00:05:34,479
installed

00:05:32,960 --> 00:05:36,479
so it builds all of my webassembly

00:05:34,479 --> 00:05:37,360
modules and it builds a bundle that

00:05:36,479 --> 00:05:40,560
includes

00:05:37,360 --> 00:05:42,240
the webassembly modules my static files

00:05:40,560 --> 00:05:44,240
and my directive so it's everything that

00:05:42,240 --> 00:05:46,960
atmo needs to actually

00:05:44,240 --> 00:05:49,440
execute my application so if i start up

00:05:46,960 --> 00:05:51,840
a development server here using subodev

00:05:49,440 --> 00:05:53,840
it is going to start atmo and we can

00:05:51,840 --> 00:05:55,919
take a look at how it works

00:05:53,840 --> 00:05:57,039
so i'll start by making a request to

00:05:55,919 --> 00:05:59,440
that repos endpoint

00:05:57,039 --> 00:06:01,440
to get a list of all of the repos in the

00:05:59,440 --> 00:06:03,360
suborbital organization

00:06:01,440 --> 00:06:04,960
and take note that it took about 300

00:06:03,360 --> 00:06:06,240
milliseconds to respond to that request

00:06:04,960 --> 00:06:07,919
you know it was talking to the github

00:06:06,240 --> 00:06:09,360
api so there's multiple network hops

00:06:07,919 --> 00:06:12,319
involved etc

00:06:09,360 --> 00:06:13,440
but if you'll remember we were talking

00:06:12,319 --> 00:06:15,919
to the cache and we were actually

00:06:13,440 --> 00:06:18,639
filling that in with repo information

00:06:15,919 --> 00:06:20,880
so if we go over here and make a request

00:06:18,639 --> 00:06:23,199
to get a single repo

00:06:20,880 --> 00:06:24,400
you'll notice that it executes much more

00:06:23,199 --> 00:06:27,680
quickly because

00:06:24,400 --> 00:06:30,800
the get repo runnable

00:06:27,680 --> 00:06:33,280
is actually accessing the cache and

00:06:30,800 --> 00:06:34,319
if the repo information is available it

00:06:33,280 --> 00:06:36,560
is returning that

00:06:34,319 --> 00:06:37,759
but if it's not it goes accesses the

00:06:36,560 --> 00:06:40,800
github api and then

00:06:37,759 --> 00:06:42,560
fills in the cache behind it so that's

00:06:40,800 --> 00:06:45,680
an example of some of the different

00:06:42,560 --> 00:06:46,840
sub-orbital runnable apis available but

00:06:45,680 --> 00:06:48,240
let's look at a slightly more

00:06:46,840 --> 00:06:50,720
complicated

00:06:48,240 --> 00:06:51,599
handler so this report endpoint for

00:06:50,720 --> 00:06:54,319
example

00:06:51,599 --> 00:06:55,680
it combines multiple runnables together

00:06:54,319 --> 00:06:59,039
in order to do something

00:06:55,680 --> 00:07:01,840
a little bit more fun so we're using the

00:06:59,039 --> 00:07:02,639
list repos runnable from the other

00:07:01,840 --> 00:07:04,720
handler

00:07:02,639 --> 00:07:06,639
but instead of just responding directly

00:07:04,720 --> 00:07:09,039
with that information

00:07:06,639 --> 00:07:10,080
this particular handler actually uses

00:07:09,039 --> 00:07:13,120
the for each

00:07:10,080 --> 00:07:13,919
operator to iterate over the array of

00:07:13,120 --> 00:07:15,840
repos

00:07:13,919 --> 00:07:17,360
and perform an operation on each element

00:07:15,840 --> 00:07:20,000
so we're actually going to be calling

00:07:17,360 --> 00:07:21,039
the send report runnable on each element

00:07:20,000 --> 00:07:24,560
of the repos

00:07:21,039 --> 00:07:27,680
list and that send report

00:07:24,560 --> 00:07:31,280
function looks a little bit like this

00:07:27,680 --> 00:07:34,319
it's going to get the element that it is

00:07:31,280 --> 00:07:35,840
being operated upon it's going to filter

00:07:34,319 --> 00:07:36,880
out the repos that have less than 5

00:07:35,840 --> 00:07:40,160
stars

00:07:36,880 --> 00:07:41,759
it is going to read a configuration file

00:07:40,160 --> 00:07:43,280
called webhook to

00:07:41,759 --> 00:07:45,840
know where it wants to send this report

00:07:43,280 --> 00:07:48,080
to and it's going to construct a payload

00:07:45,840 --> 00:07:50,080
and then actually send a web hook using

00:07:48,080 --> 00:07:51,840
the http client so why don't we take a

00:07:50,080 --> 00:07:56,000
look at that

00:07:51,840 --> 00:07:57,680
if we send that api v1 report request

00:07:56,000 --> 00:07:59,680
you'll see something happening in the

00:07:57,680 --> 00:08:01,520
background here and we're actually

00:07:59,680 --> 00:08:03,919
getting some messages in discord

00:08:01,520 --> 00:08:05,280
uh and we're getting a report about the

00:08:03,919 --> 00:08:06,720
various repos and the number of

00:08:05,280 --> 00:08:08,800
stargazers that they have as long as

00:08:06,720 --> 00:08:10,960
they have more than five

00:08:08,800 --> 00:08:12,479
so this is you know a couple of

00:08:10,960 --> 00:08:13,199
different examples about how you can

00:08:12,479 --> 00:08:16,160
compose

00:08:13,199 --> 00:08:17,280
webassembly modules together to form uh

00:08:16,160 --> 00:08:20,160
logic

00:08:17,280 --> 00:08:22,000
and i hope it's a good example of how

00:08:20,160 --> 00:08:25,199
webassembly can be useful

00:08:22,000 --> 00:08:28,639
on the server now there is

00:08:25,199 --> 00:08:29,759
a bunch of additional apis that i didn't

00:08:28,639 --> 00:08:32,159
talk about here

00:08:29,759 --> 00:08:33,919
and there are a number of other control

00:08:32,159 --> 00:08:35,519
flow clauses that you can use in the

00:08:33,919 --> 00:08:39,039
directive so i suggest you

00:08:35,519 --> 00:08:40,080
look at atmo.suborbital.dev to see the

00:08:39,039 --> 00:08:43,599
entire documentation

00:08:40,080 --> 00:08:43,919
and what is possible the subo cli also

00:08:43,599 --> 00:08:45,519
has

00:08:43,919 --> 00:08:47,440
a number of other features as well that

00:08:45,519 --> 00:08:48,240
i suggest you check out it's very useful

00:08:47,440 --> 00:08:49,839
for building

00:08:48,240 --> 00:08:52,000
webassembly applications whether they're

00:08:49,839 --> 00:08:55,600
being used for atmo or

00:08:52,000 --> 00:08:58,240
not so that's the end of the demo

00:08:55,600 --> 00:08:59,680
and i just want to close out by saying

00:08:58,240 --> 00:09:00,720
thank you for having me at the

00:08:59,680 --> 00:09:02,880
conference

00:09:00,720 --> 00:09:04,320
and i hope you'll check out suborbital

00:09:02,880 --> 00:09:07,680
at github.com

00:09:04,320 --> 00:09:08,000
suborbital and please don't hesitate to

00:09:07,680 --> 00:09:10,399
open

00:09:08,000 --> 00:09:11,360
issues or join our discord if you have

00:09:10,399 --> 00:09:14,480
any questions

00:09:11,360 --> 00:09:17,519
or if you want to ask about building

00:09:14,480 --> 00:09:20,480
something with one of the projects so

00:09:17,519 --> 00:09:23,440
that's all for me and i will see you all

00:09:20,480 --> 00:09:23,440

YouTube URL: https://www.youtube.com/watch?v=TP3o_EyXG4E


