Title: Sponsored Keynote: WebAssembly: The future of distributed computing - Liam Randall, Wasmcloud
Publication date: 2021-05-04
Playlist: Cloud Native Wasm Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Sponsored Keynote: WebAssembly: The future of distributed computing - Liam Randall, Founder, Cosmonic & co-Founder, Wasmcloud

Looking forward to the intersection of cloud, 5G, and IoT we are poised on the precipice of the next era of computing. In this talk Liam outlines the opportunities to drive the software and infrastructure of the near future - find out why the CNCF and Wasm are better together!
Captions: 
	00:00:00,320 --> 00:00:04,640
hello and thank you for coming to

00:00:01,920 --> 00:00:06,160
kubecon eu 2021 wasm day where we've

00:00:04,640 --> 00:00:07,759
been spending time at the intersection

00:00:06,160 --> 00:00:08,480
of webassembly and everything cloud

00:00:07,759 --> 00:00:10,559
native

00:00:08,480 --> 00:00:12,480
a tremendous thank you to chris a elena

00:00:10,559 --> 00:00:14,240
vogel the cncf staff

00:00:12,480 --> 00:00:15,839
and my fellow wasmday program committee

00:00:14,240 --> 00:00:16,800
members for putting on an incredible

00:00:15,839 --> 00:00:18,560
event

00:00:16,800 --> 00:00:19,920
i'm liam randall and for the last couple

00:00:18,560 --> 00:00:21,840
of years i've been working on a

00:00:19,920 --> 00:00:22,880
distributed application framework for

00:00:21,840 --> 00:00:24,560
microservices

00:00:22,880 --> 00:00:26,800
that leverages webassembly called

00:00:24,560 --> 00:00:28,480
wasmcloud and today i'm going to share

00:00:26,800 --> 00:00:30,640
our perspective on webassembly as the

00:00:28,480 --> 00:00:33,040
future of distributed computing

00:00:30,640 --> 00:00:34,960
let's jump right in webassembly brings

00:00:33,040 --> 00:00:35,600
some powerful value propositions to any

00:00:34,960 --> 00:00:37,840
domain

00:00:35,600 --> 00:00:39,600
distributed or not people are excited

00:00:37,840 --> 00:00:40,320
about web assembly sometimes referred to

00:00:39,600 --> 00:00:42,160
as wasm

00:00:40,320 --> 00:00:44,559
for a lot of reasons and while the

00:00:42,160 --> 00:00:46,320
future of webassembly is simply dazzling

00:00:44,559 --> 00:00:47,600
today it already brings a lot to the

00:00:46,320 --> 00:00:49,760
table first

00:00:47,600 --> 00:00:50,879
it's efficient and fast it runs at near

00:00:49,760 --> 00:00:53,120
native speed

00:00:50,879 --> 00:00:53,920
second it's safe and secure not just

00:00:53,120 --> 00:00:55,920
sandbox

00:00:53,920 --> 00:00:58,000
but it operates in a deny by default

00:00:55,920 --> 00:00:59,359
mode where we need to explicitly grant

00:00:58,000 --> 00:01:02,160
capabilities

00:00:59,359 --> 00:01:03,680
third it's open and debuggable fourth

00:01:02,160 --> 00:01:05,119
wasm's polyglot

00:01:03,680 --> 00:01:07,040
choose your own language and you can

00:01:05,119 --> 00:01:08,240
bring well-tested libraries to a new

00:01:07,040 --> 00:01:10,720
domain

00:01:08,240 --> 00:01:12,560
finally it's portable webassembly is a

00:01:10,720 --> 00:01:13,520
compilation target and it runs on lots

00:01:12,560 --> 00:01:16,560
of different things

00:01:13,520 --> 00:01:18,240
servers browsers embedded devices heck

00:01:16,560 --> 00:01:20,479
you can even put wasm inside of other

00:01:18,240 --> 00:01:22,080
applications if you wanted to

00:01:20,479 --> 00:01:23,759
next let's introduce the modern

00:01:22,080 --> 00:01:25,520
distributed computing environment

00:01:23,759 --> 00:01:27,040
the linux foundation edge has helped to

00:01:25,520 --> 00:01:28,880
put together this continuum

00:01:27,040 --> 00:01:30,880
a view of the world we can use as a

00:01:28,880 --> 00:01:32,720
starting point this view of the world

00:01:30,880 --> 00:01:35,040
helps us to frame the complexity of the

00:01:32,720 --> 00:01:37,759
modern distributed computing environment

00:01:35,040 --> 00:01:39,680
there are many different device types

00:01:37,759 --> 00:01:41,920
with a variety of system architectures

00:01:39,680 --> 00:01:43,840
and capabilities but these categories

00:01:41,920 --> 00:01:44,799
actually undersell the complexity a

00:01:43,840 --> 00:01:46,720
little bit

00:01:44,799 --> 00:01:48,399
because if we annotate this view just

00:01:46,720 --> 00:01:49,680
ever so slightly to include some

00:01:48,399 --> 00:01:51,439
additional context

00:01:49,680 --> 00:01:54,079
with some of the platforms that are both

00:01:51,439 --> 00:01:55,360
incumbent and common in the ecosystem we

00:01:54,079 --> 00:01:57,200
get a more complete

00:01:55,360 --> 00:01:59,200
and complicated world view that we need

00:01:57,200 --> 00:02:01,200
to account for for example

00:01:59,200 --> 00:02:03,439
on the service provider and public cloud

00:02:01,200 --> 00:02:03,840
edge we of course find kubernetes in

00:02:03,439 --> 00:02:06,159
both

00:02:03,840 --> 00:02:07,759
regular and micro sizes and we find

00:02:06,159 --> 00:02:08,720
applications that are hosted on top of

00:02:07,759 --> 00:02:10,319
kubernetes

00:02:08,720 --> 00:02:12,000
we should include developer environments

00:02:10,319 --> 00:02:13,599
in our ecosystem as well

00:02:12,000 --> 00:02:15,599
and certainly if we're including mobile

00:02:13,599 --> 00:02:17,680
devices we should have we should have

00:02:15,599 --> 00:02:18,400
phones and lots of browsers and smart

00:02:17,680 --> 00:02:21,520
tvs

00:02:18,400 --> 00:02:23,360
and all the rest of the iot iot even the

00:02:21,520 --> 00:02:24,480
really small things with teeny tiny

00:02:23,360 --> 00:02:26,160
capabilities

00:02:24,480 --> 00:02:29,280
so let's pair up this new environment

00:02:26,160 --> 00:02:31,440
with our current evolution of technology

00:02:29,280 --> 00:02:32,720
now over the last 30 years technology

00:02:31,440 --> 00:02:35,680
has continued to evolve

00:02:32,720 --> 00:02:36,800
over two primary dimensions the formats

00:02:35,680 --> 00:02:38,800
in which we deliver

00:02:36,800 --> 00:02:40,400
applications and the orchestration of

00:02:38,800 --> 00:02:41,599
those formats into a specific

00:02:40,400 --> 00:02:43,440
environment

00:02:41,599 --> 00:02:44,959
now this picture all the green is

00:02:43,440 --> 00:02:46,400
provided by the developer building the

00:02:44,959 --> 00:02:49,040
apps and the blue

00:02:46,400 --> 00:02:51,200
is the platform layer and while 15 years

00:02:49,040 --> 00:02:53,680
ago the launch of the public cloud

00:02:51,200 --> 00:02:57,360
ushered in its own revolution the launch

00:02:53,680 --> 00:02:59,840
of docker in 2013 and kubernetes in 2014

00:02:57,360 --> 00:03:01,440
accelerated the pace and now today we

00:02:59,840 --> 00:03:02,480
find ourselves on the cusp of yet

00:03:01,440 --> 00:03:05,599
another revolution

00:03:02,480 --> 00:03:06,800
with webassembly as we can see over time

00:03:05,599 --> 00:03:08,640
these formats have gotten

00:03:06,800 --> 00:03:10,159
simpler and more decoupled from the

00:03:08,640 --> 00:03:11,840
underlying environments

00:03:10,159 --> 00:03:14,000
we're moving from a tightly coupled

00:03:11,840 --> 00:03:15,040
world on the left to a more declarative

00:03:14,000 --> 00:03:16,720
world on the right

00:03:15,040 --> 00:03:18,560
and the developer responsibilities

00:03:16,720 --> 00:03:20,080
continue to be reduced further

00:03:18,560 --> 00:03:22,080
by decreasing the number of things that

00:03:20,080 --> 00:03:23,760
they're responsible for maintaining

00:03:22,080 --> 00:03:25,440
let's put up some comparisons and see

00:03:23,760 --> 00:03:27,360
what really stands out

00:03:25,440 --> 00:03:28,640
if we start to line these technologies

00:03:27,360 --> 00:03:30,319
up side by side

00:03:28,640 --> 00:03:32,000
we start to uncover the patterns that

00:03:30,319 --> 00:03:33,760
emerge in the ecosystem

00:03:32,000 --> 00:03:35,440
each progressive wave has further

00:03:33,760 --> 00:03:37,680
decoupled applications

00:03:35,440 --> 00:03:38,799
from their underlying architectures that

00:03:37,680 --> 00:03:41,360
is to say with each

00:03:38,799 --> 00:03:43,519
format we've carried fewer and fewer

00:03:41,360 --> 00:03:45,599
assumptions forward into the landscape

00:03:43,519 --> 00:03:47,440
and we see this reflected at both the

00:03:45,599 --> 00:03:50,159
where our formats can run

00:03:47,440 --> 00:03:50,959
and in the security boundary with

00:03:50,159 --> 00:03:52,480
security

00:03:50,959 --> 00:03:54,159
in webassembly we've moved to an

00:03:52,480 --> 00:03:56,000
entirely sandboxed approach

00:03:54,159 --> 00:03:57,599
and we'll review the deny by default

00:03:56,000 --> 00:03:58,480
explicit granting granting of

00:03:57,599 --> 00:04:00,879
capabilities

00:03:58,480 --> 00:04:01,680
shortly and the where is part of the

00:04:00,879 --> 00:04:03,519
reason why

00:04:01,680 --> 00:04:05,439
we believe that webassembly will come to

00:04:03,519 --> 00:04:07,680
dominate distributed computing

00:04:05,439 --> 00:04:09,840
in fact let's take these two world views

00:04:07,680 --> 00:04:12,239
and put them together

00:04:09,840 --> 00:04:14,319
by observing what we are we are already

00:04:12,239 --> 00:04:16,400
seeing across today's ecosystem

00:04:14,319 --> 00:04:18,239
we have compelling evidence that wasm

00:04:16,400 --> 00:04:20,479
today is on the path to becoming

00:04:18,239 --> 00:04:22,560
the critical technology leveraged to

00:04:20,479 --> 00:04:23,600
deploy software across the distributed

00:04:22,560 --> 00:04:26,160
continuum

00:04:23,600 --> 00:04:28,479
as examples starting on the far right we

00:04:26,160 --> 00:04:29,120
see native execution of microservices on

00:04:28,479 --> 00:04:31,120
servers

00:04:29,120 --> 00:04:33,120
with frameworks like wasmcloud in

00:04:31,120 --> 00:04:34,080
research we are we are already seeing

00:04:33,120 --> 00:04:36,080
webassembly

00:04:34,080 --> 00:04:38,560
as a native orchestration technology for

00:04:36,080 --> 00:04:41,680
kubernetes with microsoft's crosslit

00:04:38,560 --> 00:04:43,919
the kubernetes rust kubelet we see

00:04:41,680 --> 00:04:44,880
wasm inside embedded inside critical

00:04:43,919 --> 00:04:47,120
technologies

00:04:44,880 --> 00:04:48,240
for example both oppa and envoy are

00:04:47,120 --> 00:04:51,120
leveraging wasm

00:04:48,240 --> 00:04:52,720
to execute untrusted third-party plugins

00:04:51,120 --> 00:04:54,400
where previously they might have chosen

00:04:52,720 --> 00:04:56,560
lua or javascript

00:04:54,400 --> 00:04:59,040
on the edges we see organizations like

00:04:56,560 --> 00:05:00,160
fastly and shopify using wasm as a

00:04:59,040 --> 00:05:03,120
deployment platform

00:05:00,160 --> 00:05:04,560
to run third party untrusted code if

00:05:03,120 --> 00:05:06,320
that pattern feels familiar

00:05:04,560 --> 00:05:08,400
get used to it i think a lot more

00:05:06,320 --> 00:05:10,240
organizations are starting to recognize

00:05:08,400 --> 00:05:11,759
that all code should be treated as

00:05:10,240 --> 00:05:13,759
untrusted code

00:05:11,759 --> 00:05:15,360
we see thousands of examples of

00:05:13,759 --> 00:05:16,479
applications running in browsers on

00:05:15,360 --> 00:05:18,400
mobile phones

00:05:16,479 --> 00:05:20,720
on tablets and in web browsers

00:05:18,400 --> 00:05:22,720
everywhere google earth uses wasm

00:05:20,720 --> 00:05:24,400
so does microsoft flight simulator

00:05:22,720 --> 00:05:26,160
microsoft even makes a toolkit that

00:05:24,400 --> 00:05:27,280
leverages web assembly in the browser

00:05:26,160 --> 00:05:29,520
called blazer

00:05:27,280 --> 00:05:31,280
the anecdotes are one thing what are the

00:05:29,520 --> 00:05:31,919
real challenges of this distributed

00:05:31,280 --> 00:05:34,160
environment

00:05:31,919 --> 00:05:35,520
and how well is wasm actually stack

00:05:34,160 --> 00:05:37,520
stacking up

00:05:35,520 --> 00:05:39,199
now this is not an exhaustive list

00:05:37,520 --> 00:05:40,880
however today i will highlight

00:05:39,199 --> 00:05:42,560
five critical challenges to be solved in

00:05:40,880 --> 00:05:44,080
distributed computing

00:05:42,560 --> 00:05:45,759
first the diversity of system

00:05:44,080 --> 00:05:48,720
architecture which is that

00:05:45,759 --> 00:05:50,800
as cloud native uh community we are no

00:05:48,720 --> 00:05:54,080
longer targeting just the x86

00:05:50,800 --> 00:05:56,880
monolith cpu memory functionality

00:05:54,080 --> 00:05:57,919
capability and os are all in variable

00:05:56,880 --> 00:05:59,440
now

00:05:57,919 --> 00:06:02,160
the second great challenge will be the

00:05:59,440 --> 00:06:03,600
diversity of application architectures

00:06:02,160 --> 00:06:05,440
how will these things be connected in

00:06:03,600 --> 00:06:06,319
the near future what design patterns

00:06:05,440 --> 00:06:08,240
will they use

00:06:06,319 --> 00:06:09,759
how will they speak to each other the

00:06:08,240 --> 00:06:11,680
third will be our approach to

00:06:09,759 --> 00:06:13,919
distributed security

00:06:11,680 --> 00:06:15,680
fourth will be offline use this

00:06:13,919 --> 00:06:16,319
incredibly diverse ecosystem will be

00:06:15,680 --> 00:06:18,960
running

00:06:16,319 --> 00:06:20,400
loads of complex software and finally

00:06:18,960 --> 00:06:22,319
bringing machine learning to the end

00:06:20,400 --> 00:06:24,080
devices to make them intelligent

00:06:22,319 --> 00:06:25,840
okay let's just make them less dumb

00:06:24,080 --> 00:06:27,759
first

00:06:25,840 --> 00:06:29,280
both the number and incredible diversity

00:06:27,759 --> 00:06:31,199
of devices connected to the internet

00:06:29,280 --> 00:06:34,319
continues to simply skyrocket

00:06:31,199 --> 00:06:37,440
as we head towards an estimated 50

00:06:34,319 --> 00:06:38,080
billion connected devices in 2030 the

00:06:37,440 --> 00:06:40,319
enterprise

00:06:38,080 --> 00:06:41,120
the enterprise integration tasks are

00:06:40,319 --> 00:06:43,600
compounded

00:06:41,120 --> 00:06:44,639
by a dozen popular and incompatible cpu

00:06:43,600 --> 00:06:46,720
architectures

00:06:44,639 --> 00:06:48,960
each of which has its own relatively

00:06:46,720 --> 00:06:51,360
unique operational life cycle

00:06:48,960 --> 00:06:53,360
from dozens of major manufacturers

00:06:51,360 --> 00:06:54,800
webassembly is already well positioned

00:06:53,360 --> 00:06:55,599
to operate well in this complex

00:06:54,800 --> 00:06:58,240
environment

00:06:55,599 --> 00:06:59,039
wasn't runtimes can even be optimized to

00:06:58,240 --> 00:07:02,080
adapt an

00:06:59,039 --> 00:07:04,080
application for specific circumstances

00:07:02,080 --> 00:07:05,599
for example the bytecode alliance is

00:07:04,080 --> 00:07:08,720
wasm time for servers

00:07:05,599 --> 00:07:09,520
and their wasm micro runtime or whammer

00:07:08,720 --> 00:07:11,599
for short

00:07:09,520 --> 00:07:13,840
has been optimized for smaller embedded

00:07:11,599 --> 00:07:15,280
devices

00:07:13,840 --> 00:07:17,440
surely these vast collections of

00:07:15,280 --> 00:07:19,120
distributed and connected ecosystem

00:07:17,440 --> 00:07:20,720
systems will be interconnected in

00:07:19,120 --> 00:07:22,639
tremendously different ways

00:07:20,720 --> 00:07:24,400
end tier applications model view

00:07:22,639 --> 00:07:27,120
controller pub sub

00:07:24,400 --> 00:07:28,720
microservices and more today we already

00:07:27,120 --> 00:07:30,880
see webassembly running on

00:07:28,720 --> 00:07:32,160
embedded into and running around our

00:07:30,880 --> 00:07:34,560
software stacks

00:07:32,160 --> 00:07:35,440
wasm excels here as well its near native

00:07:34,560 --> 00:07:37,680
performance

00:07:35,440 --> 00:07:39,520
makes it ideal for standalone embedded

00:07:37,680 --> 00:07:41,280
or other types of integrations

00:07:39,520 --> 00:07:42,639
as a component we already have many

00:07:41,280 --> 00:07:45,599
large scale examples

00:07:42,639 --> 00:07:48,000
of webassembly running in complex stacks

00:07:45,599 --> 00:07:49,840
now the security of iot is a broad topic

00:07:48,000 --> 00:07:51,840
however the native security design of

00:07:49,840 --> 00:07:53,840
webassembly is a welcome addition

00:07:51,840 --> 00:07:55,120
to distributed projects running anywhere

00:07:53,840 --> 00:07:56,960
in the continuum

00:07:55,120 --> 00:07:59,280
webassembly itself functions as a

00:07:56,960 --> 00:08:00,240
sandbox helpful when you want to adapt

00:07:59,280 --> 00:08:02,720
or bring code

00:08:00,240 --> 00:08:05,039
to a huge variety of complex systems and

00:08:02,720 --> 00:08:07,199
webassembly brings to the ecosystem

00:08:05,039 --> 00:08:08,319
a powerful approach to capability-based

00:08:07,199 --> 00:08:10,319
security

00:08:08,319 --> 00:08:12,080
if you think back not that long ago when

00:08:10,319 --> 00:08:13,599
you started a child application

00:08:12,080 --> 00:08:16,240
it usually inherited the rights of the

00:08:13,599 --> 00:08:18,720
parents so if i could write or read to

00:08:16,240 --> 00:08:21,039
disk then so could my child process

00:08:18,720 --> 00:08:23,199
in more recent years however nearly

00:08:21,039 --> 00:08:25,520
every industry has started to migrate

00:08:23,199 --> 00:08:27,759
to a capabilities-based approach where

00:08:25,520 --> 00:08:28,720
an application must be explicitly

00:08:27,759 --> 00:08:30,879
granted

00:08:28,720 --> 00:08:33,360
access to a capability in order to use

00:08:30,879 --> 00:08:34,240
it with webassembly the combination of a

00:08:33,360 --> 00:08:36,080
sandbox

00:08:34,240 --> 00:08:38,000
and deny by default approach means that

00:08:36,080 --> 00:08:40,479
it's more difficult to abuse and

00:08:38,000 --> 00:08:42,320
compromise your applications

00:08:40,479 --> 00:08:44,480
now it is easy to think that when we're

00:08:42,320 --> 00:08:45,040
connecting billions of devices to the

00:08:44,480 --> 00:08:46,959
internet

00:08:45,040 --> 00:08:49,600
that we can simply offload all of the

00:08:46,959 --> 00:08:51,440
functionality to remote api services

00:08:49,600 --> 00:08:53,440
that these and that these could be dumb

00:08:51,440 --> 00:08:56,080
endpoints on the end user side

00:08:53,440 --> 00:08:57,120
connected back to an ultra smart core or

00:08:56,080 --> 00:08:58,959
that the edge

00:08:57,120 --> 00:09:01,120
moves the capabilities closer to the

00:08:58,959 --> 00:09:02,080
users and minimizes any performance

00:09:01,120 --> 00:09:04,320
impacts

00:09:02,080 --> 00:09:05,440
while these are two valid and common

00:09:04,320 --> 00:09:07,040
architectures

00:09:05,440 --> 00:09:09,040
there are many compelling reasons to

00:09:07,040 --> 00:09:11,120
believe that most devices

00:09:09,040 --> 00:09:12,560
will be both connected and still offer

00:09:11,120 --> 00:09:14,399
some level of functionality

00:09:12,560 --> 00:09:16,080
when offline or during intermittent

00:09:14,399 --> 00:09:18,160
connections real

00:09:16,080 --> 00:09:20,720
complex logic will need to live on the

00:09:18,160 --> 00:09:23,120
device because for a few reasons

00:09:20,720 --> 00:09:23,760
first latency and determinism for

00:09:23,120 --> 00:09:26,399
example

00:09:23,760 --> 00:09:27,279
driverless cars need to react instantly

00:09:26,399 --> 00:09:29,440
second

00:09:27,279 --> 00:09:30,640
large data must first be processed where

00:09:29,440 --> 00:09:33,200
the data resides

00:09:30,640 --> 00:09:35,279
at the devices perhaps an ml model

00:09:33,200 --> 00:09:38,080
extracting metadata to be shipped back

00:09:35,279 --> 00:09:39,600
back to the public cloud third privacy

00:09:38,080 --> 00:09:40,240
and security will keep logic at the

00:09:39,600 --> 00:09:42,320
edges

00:09:40,240 --> 00:09:43,360
some data shouldn't just shouldn't be

00:09:42,320 --> 00:09:46,000
shipped

00:09:43,360 --> 00:09:47,680
fourth limited or deliberate autonomy

00:09:46,000 --> 00:09:49,360
some devices will need to be able to

00:09:47,680 --> 00:09:50,560
operate under all conditions without

00:09:49,360 --> 00:09:54,080
connectivity

00:09:50,560 --> 00:09:57,920
ships far out at sea rovers drones

00:09:54,080 --> 00:10:00,959
even refrigerators finally regulatory

00:09:57,920 --> 00:10:01,600
gdpr and ccpa are the start of things to

00:10:00,959 --> 00:10:02,959
come

00:10:01,600 --> 00:10:04,640
big tech is going to be further

00:10:02,959 --> 00:10:06,480
regulated in the future

00:10:04,640 --> 00:10:08,000
and this will impact the where and how

00:10:06,480 --> 00:10:11,040
in the design of our distributed

00:10:08,000 --> 00:10:13,200
software systems what this means is that

00:10:11,040 --> 00:10:14,000
these 50 billion connected devices by

00:10:13,200 --> 00:10:16,480
00:10:14,000 --> 00:10:17,519
will amplify our workloads these devices

00:10:16,480 --> 00:10:19,360
may be small

00:10:17,519 --> 00:10:22,000
they may be cheap but they will be

00:10:19,360 --> 00:10:23,680
increasingly intelligent and complex

00:10:22,000 --> 00:10:25,600
for the aforementioned reasons web

00:10:23,680 --> 00:10:27,839
assemblies write once run everywhere

00:10:25,600 --> 00:10:29,600
security model and portability are sure

00:10:27,839 --> 00:10:32,160
to come into play

00:10:29,600 --> 00:10:33,600
finally one overarching theme of iot

00:10:32,160 --> 00:10:34,800
will be making all the dumb things in

00:10:33,600 --> 00:10:36,560
our life smart

00:10:34,800 --> 00:10:38,399
tuning and optimizing models is

00:10:36,560 --> 00:10:39,920
difficult enough without having to worry

00:10:38,399 --> 00:10:41,760
about the differences between

00:10:39,920 --> 00:10:43,440
hundreds of potential different

00:10:41,760 --> 00:10:45,920
deployment chipsets

00:10:43,440 --> 00:10:47,760
even today incredibly compelling work is

00:10:45,920 --> 00:10:48,399
coming out of the google tensorflow.js

00:10:47,760 --> 00:10:50,160
team

00:10:48,399 --> 00:10:51,760
where they are compiling ml models for

00:10:50,160 --> 00:10:54,000
use in the web browser

00:10:51,760 --> 00:10:55,519
running and leveraging the speed and

00:10:54,000 --> 00:10:56,320
performance of webassembly in the

00:10:55,519 --> 00:10:58,320
browser

00:10:56,320 --> 00:11:00,720
and andrew and sun over on the intel

00:10:58,320 --> 00:11:01,920
team have already ported their wazi nn

00:11:00,720 --> 00:11:04,399
machine learning framework

00:11:01,920 --> 00:11:06,240
to wasm time as an experiment i can

00:11:04,399 --> 00:11:06,800
imagine a near future where these models

00:11:06,240 --> 00:11:09,200
are run

00:11:06,800 --> 00:11:10,640
throughout the distributed continuum i

00:11:09,200 --> 00:11:12,240
hope you have found today's

00:11:10,640 --> 00:11:13,760
talk about distributed systems

00:11:12,240 --> 00:11:15,519
interesting and informative

00:11:13,760 --> 00:11:17,600
if you care about these topics as much

00:11:15,519 --> 00:11:19,360
as we do i hope you will follow along as

00:11:17,600 --> 00:11:20,880
we build an enterprise solution

00:11:19,360 --> 00:11:22,560
to help developers navigate these

00:11:20,880 --> 00:11:25,120
complex opportunities

00:11:22,560 --> 00:11:27,440
join us working on wasm cloud our open

00:11:25,120 --> 00:11:29,040
source distributed application runtime

00:11:27,440 --> 00:11:30,880
for the enterprise or for more

00:11:29,040 --> 00:11:31,600
information on future enterprise

00:11:30,880 --> 00:11:33,760
offerings

00:11:31,600 --> 00:11:35,600
sign up for our early adopters program

00:11:33,760 --> 00:11:37,800
at cosmonic.com

00:11:35,600 --> 00:11:40,800
thank you very much and have a wonderful

00:11:37,800 --> 00:11:40,800

YouTube URL: https://www.youtube.com/watch?v=HPA8qmsHQfc


