Title: Lightning Talk: Build trusted cloud apps with Wasm: WebAssembly Micro Runtime is ready - Xin Wang
Publication date: 2021-05-04
Playlist: Cloud Native Wasm Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Lightning Talk: Build trusted cloud apps with Wasm: WebAssembly Micro Runtime is ready - Xin Wang, Intel

It is critical to guarantee the confidentiality and integrity of user code and data on the cloud and the solutions often rely on the CPU Trusted Execution Environment (TEE) feature such as Intel Software Guard Extension (SGX). Wasm introduced a new approach for abstracting workloads from the underlying TEE HW differences. WebAssembly Micro Runtime (WAMR), a Bytecode Alliance open source project has provided comprehensive support for Intel SGX, such as compiled Wasm modules, WASI, TensorFlow, and it has made an excellent adoption trend on SGX by open-source projects and commercial products. This talk will introduce the WAMR architecture and key features, as well as its usages on cloud TEE such as Smart Contract, Multi-parties computing. It will also share how the projects like Inclavare, Faasm use WAMR to orchestrate Wasm workloads for smoothly extending to cloud TEE.
Captions: 
	00:00:02,399 --> 00:00:08,000
hi my name is

00:00:03,600 --> 00:00:11,120
xinhuan and i work at intel

00:00:08,000 --> 00:00:15,519
today i'm going to talk about

00:00:11,120 --> 00:00:20,320
how to build trusted cloud applications

00:00:15,519 --> 00:00:20,320
with the web assembly on intel sjx

00:00:21,760 --> 00:00:26,800
this presentation contains a few use

00:00:25,439 --> 00:00:31,519
cases

00:00:26,800 --> 00:00:35,600
provided by michael bowman from intel

00:00:31,519 --> 00:00:35,600
and the jia zhang from alibaba

00:00:39,200 --> 00:00:46,000
building a trusted cloud application

00:00:42,640 --> 00:00:48,239
is not an easy job if you are the

00:00:46,000 --> 00:00:52,079
application owner

00:00:48,239 --> 00:00:55,120
you're probably concerned how to protect

00:00:52,079 --> 00:00:56,079
your cloud code and the data from being

00:00:55,120 --> 00:00:59,280
accessed

00:00:56,079 --> 00:01:03,520
by either the csp hackers

00:00:59,280 --> 00:01:06,960
or other malicious cloud applications

00:01:03,520 --> 00:01:10,240
for the csp they need to ensure

00:01:06,960 --> 00:01:13,200
their infrastructure can resist

00:01:10,240 --> 00:01:15,280
the attacks from any malicious cloud

00:01:13,200 --> 00:01:17,920
applications

00:01:15,280 --> 00:01:19,520
they also need to prove to their

00:01:17,920 --> 00:01:23,920
customers

00:01:19,520 --> 00:01:28,799
their concerns can be solved technically

00:01:23,920 --> 00:01:28,799
and also in some cloud applications

00:01:29,520 --> 00:01:33,200
it will consume the data from third

00:01:31,759 --> 00:01:36,640
party

00:01:33,200 --> 00:01:39,280
we also need to address the data owner's

00:01:36,640 --> 00:01:39,280
concerns

00:01:39,520 --> 00:01:44,000
for data leaking or misusing

00:01:46,320 --> 00:01:53,200
it is hard to address all the challenges

00:01:49,680 --> 00:01:54,560
by pure software solution typically we

00:01:53,200 --> 00:01:57,600
need to leverage some

00:01:54,560 --> 00:01:58,399
hardware capability such as trusted

00:01:57,600 --> 00:02:03,119
execution

00:01:58,399 --> 00:02:06,880
environment or we call it tee

00:02:03,119 --> 00:02:10,319
the te provides hardware-based isolation

00:02:06,880 --> 00:02:12,560
for the code execution and the data

00:02:10,319 --> 00:02:14,720
te usually provides remote

00:02:12,560 --> 00:02:17,360
authentication capability

00:02:14,720 --> 00:02:21,040
that is also very needed for building

00:02:17,360 --> 00:02:21,040
trusted cloud applications

00:02:21,760 --> 00:02:28,400
intel sgx is the most most

00:02:25,120 --> 00:02:31,519
researched updated

00:02:28,400 --> 00:02:34,640
and battle test hardware-based te

00:02:31,519 --> 00:02:35,440
for the data center it's available

00:02:34,640 --> 00:02:38,239
across the

00:02:35,440 --> 00:02:40,959
entire line of iceland scalable

00:02:38,239 --> 00:02:40,959
processors

00:02:42,080 --> 00:02:49,519
it delivers the smallest

00:02:46,000 --> 00:02:52,400
potential attack surface of any te

00:02:49,519 --> 00:02:53,040
available for the data center on the

00:02:52,400 --> 00:02:56,239
iceland

00:02:53,040 --> 00:03:00,000
xeon processor the sdgx supports

00:02:56,239 --> 00:03:05,599
up up to one terabyte protected

00:03:00,000 --> 00:03:08,000
enclaves of the data in the code

00:03:05,599 --> 00:03:09,200
webassembly provides a lightweight

00:03:08,000 --> 00:03:12,319
sandbox

00:03:09,200 --> 00:03:13,360
that supports scalable concurrent

00:03:12,319 --> 00:03:16,640
execution

00:03:13,360 --> 00:03:19,760
of different washer modules

00:03:16,640 --> 00:03:24,000
by using wasn't sgx

00:03:19,760 --> 00:03:27,360
we can leverage subjects to protect

00:03:24,000 --> 00:03:31,519
the applications from external attacks

00:03:27,360 --> 00:03:35,599
and also leverage the western sandbox

00:03:31,519 --> 00:03:35,599
to protect the host environment

00:03:35,680 --> 00:03:40,720
from internal attacks by malicious

00:03:44,840 --> 00:03:49,760
applications

00:03:46,640 --> 00:03:53,360
whether somebody met for a long time or

00:03:49,760 --> 00:03:56,560
walmart is an open source project

00:03:53,360 --> 00:03:57,360
on the back corner lines with supporting

00:03:56,560 --> 00:04:00,799
suggests

00:03:57,360 --> 00:04:01,439
as the first class citizen warmer

00:04:00,799 --> 00:04:05,040
provides

00:04:01,439 --> 00:04:08,560
a full feature set for sgx support

00:04:05,040 --> 00:04:11,840
firstly the warmer is designed for small

00:04:08,560 --> 00:04:14,879
pcb as it is a

00:04:11,840 --> 00:04:18,479
it's a total binary size can be

00:04:14,879 --> 00:04:21,280
and 100 kilobytes

00:04:18,479 --> 00:04:22,320
and one may support interpreter and a

00:04:21,280 --> 00:04:25,040
hydro time

00:04:22,320 --> 00:04:26,000
compilation for the what was an

00:04:25,040 --> 00:04:29,759
execution

00:04:26,000 --> 00:04:33,360
on sgx enclave

00:04:29,759 --> 00:04:36,400
the liberty is also supported

00:04:33,360 --> 00:04:37,840
for the watson application based on

00:04:36,400 --> 00:04:41,840
intel sgx

00:04:37,840 --> 00:04:44,960
sdk there

00:04:41,840 --> 00:04:46,880
simply is also supported by warmer on

00:04:44,960 --> 00:04:49,759
the sgx

00:04:46,880 --> 00:04:51,120
we have built some ia framework such as

00:04:49,759 --> 00:04:55,600
tensorflow

00:04:51,120 --> 00:04:59,199
to wasan and successfully executed

00:04:55,600 --> 00:04:59,199
from suggest enclave

00:04:59,280 --> 00:05:03,199
so far walmart has a good adoption

00:05:02,160 --> 00:05:06,160
progress

00:05:03,199 --> 00:05:07,120
by either open source or commercial

00:05:06,160 --> 00:05:10,160
usage

00:05:07,120 --> 00:05:14,479
with sdx now i will give

00:05:10,160 --> 00:05:20,160
introduction for a few

00:05:14,479 --> 00:05:20,160
solutions that is warmer on sgx

00:05:21,919 --> 00:05:26,080
private data objects is an open source

00:05:25,360 --> 00:05:29,120
project

00:05:26,080 --> 00:05:33,360
and hyperledger labs that

00:05:29,120 --> 00:05:37,039
enables sharing our data and correlating

00:05:33,360 --> 00:05:40,160
action among mutual distributing

00:05:37,039 --> 00:05:43,440
parties pdo provides

00:05:40,160 --> 00:05:43,840
a secure framework for loading wasn't

00:05:43,440 --> 00:05:46,320
based

00:05:43,840 --> 00:05:47,280
some other contracts into suggest

00:05:46,320 --> 00:05:50,840
enclave

00:05:47,280 --> 00:05:53,840
and excluded with web assembly

00:05:50,840 --> 00:05:53,840
microruntime

00:05:58,479 --> 00:06:03,039
enclave container is another open source

00:06:01,759 --> 00:06:07,120
project

00:06:03,039 --> 00:06:10,560
that uses russon on sjx

00:06:07,120 --> 00:06:13,600
the enclaver project is an

00:06:10,560 --> 00:06:14,319
infrastructure that built confidential

00:06:13,600 --> 00:06:17,520
containers

00:06:14,319 --> 00:06:22,240
for pe and extend

00:06:17,520 --> 00:06:26,400
kubernetes across different teas

00:06:22,240 --> 00:06:29,759
as a diagram illustrated

00:06:26,400 --> 00:06:32,639
the enclaver container

00:06:29,759 --> 00:06:33,360
can build the washer modules and the

00:06:32,639 --> 00:06:36,880
development

00:06:33,360 --> 00:06:42,000
runtime into a confidential container

00:06:36,880 --> 00:06:45,280
with some new plugin and the components

00:06:42,000 --> 00:06:48,000
that they introduced

00:06:45,280 --> 00:06:49,199
into this project the confidential

00:06:48,000 --> 00:06:53,199
containers

00:06:49,199 --> 00:06:58,720
can be orchestrated by the kubernetes

00:06:53,199 --> 00:07:02,319
across the pe this is a great project

00:06:58,720 --> 00:07:08,080
that solves the challenge without

00:07:02,319 --> 00:07:08,080
application modifications

00:07:10,319 --> 00:07:16,319
the last use case here is the usage of

00:07:13,759 --> 00:07:18,240
using wazon ice jacks for multi-party

00:07:16,319 --> 00:07:21,440
computation

00:07:18,240 --> 00:07:24,800
in this use case each party

00:07:21,440 --> 00:07:28,319
develops a wasm application

00:07:24,800 --> 00:07:31,599
that can be either data consumer or

00:07:28,319 --> 00:07:35,440
data supplier or in both

00:07:31,599 --> 00:07:38,479
rows all the parties

00:07:35,440 --> 00:07:41,919
review the source code of

00:07:38,479 --> 00:07:45,599
webassembly applications and assign the

00:07:41,919 --> 00:07:47,759
binary modules a base

00:07:45,599 --> 00:07:48,639
infrastructure will load the russian

00:07:47,759 --> 00:07:53,039
modules

00:07:48,639 --> 00:07:57,039
into sgx enclave and the support

00:07:53,039 --> 00:08:01,680
establishing secure and the trustworthy

00:07:57,039 --> 00:08:05,120
channel between the russo modules

00:08:01,680 --> 00:08:09,120
in such way the multi-parties

00:08:05,120 --> 00:08:09,120
can share the data for competition

00:08:10,840 --> 00:08:15,120
safely

00:08:12,000 --> 00:08:18,000
have finished the presentation

00:08:15,120 --> 00:08:19,199
and thank you for listening if you are

00:08:18,000 --> 00:08:22,720
interested

00:08:19,199 --> 00:08:27,160
please go to the github and the download

00:08:22,720 --> 00:08:30,160
warmer and try it out with sjx

00:08:27,160 --> 00:08:30,160

YouTube URL: https://www.youtube.com/watch?v=P3QhfP4aFzA


