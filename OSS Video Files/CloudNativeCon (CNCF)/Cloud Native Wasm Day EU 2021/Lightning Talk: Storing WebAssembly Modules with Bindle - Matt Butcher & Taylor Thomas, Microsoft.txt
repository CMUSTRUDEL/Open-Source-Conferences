Title: Lightning Talk: Storing WebAssembly Modules with Bindle - Matt Butcher & Taylor Thomas, Microsoft
Publication date: 2021-05-04
Playlist: Cloud Native Wasm Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Lightning Talk: Storing WebAssembly Modules with Bindle - Matt Butcher & Taylor Thomas, Microsoft

In this presentation we introduce Bindle, a technology for distributing collections of WebAssembly modules. We will talk about supply chain security, distributing nanoprocess-based applications (including wasmCloud), secure proxying, and dynamically assembling applications based on host capabilities. Bindle is designed to move beyond plain object storage. It can describe applications as graphs, where the application can be assembled at runtime based on the constraints and capabilities of the host. An embedded device may favor performance and speed of thoroughness. A server may run an application with a web frontend, while a phone may render it using a native windowing solution. Bindle provides a way to describe these characteristics so that the client can assemble the right collection of WebAssembly binaries to execute optimally.
Captions: 
	00:00:00,799 --> 00:00:04,400
hi welcome to storing webassembly

00:00:03,040 --> 00:00:06,560
modules with bindle

00:00:04,400 --> 00:00:08,960
i'm matt butcher and this i'm joined by

00:00:06,560 --> 00:00:09,519
taylor thomas and we are going to very

00:00:08,960 --> 00:00:12,480
quickly

00:00:09,519 --> 00:00:14,559
go through an overview of bindle an

00:00:12,480 --> 00:00:16,320
aggregate object storage system

00:00:14,559 --> 00:00:17,840
so what do we mean when we talk about

00:00:16,320 --> 00:00:19,600
aggregate object storage

00:00:17,840 --> 00:00:21,359
well the idea here is that we want to

00:00:19,600 --> 00:00:24,400
store a collection

00:00:21,359 --> 00:00:26,000
of related objects under a named entry

00:00:24,400 --> 00:00:27,199
and with a single shared piece of

00:00:26,000 --> 00:00:30,000
metadata so

00:00:27,199 --> 00:00:32,079
we want to be able to represent a group

00:00:30,000 --> 00:00:33,920
of objects as a single thing and

00:00:32,079 --> 00:00:35,920
represent the relationships between

00:00:33,920 --> 00:00:37,760
those objects in that group

00:00:35,920 --> 00:00:38,960
as sort of an added bonus we want to be

00:00:37,760 --> 00:00:42,079
able to share

00:00:38,960 --> 00:00:44,160
when when an aggregate has you know five

00:00:42,079 --> 00:00:45,760
objects and another aggregate has

00:00:44,160 --> 00:00:47,440
three objects and there's overlap we

00:00:45,760 --> 00:00:49,039
want to be able to share the objects in

00:00:47,440 --> 00:00:50,160
between so we're not constantly copying

00:00:49,039 --> 00:00:52,160
up the same things

00:00:50,160 --> 00:00:53,440
and that allows us to optimize for

00:00:52,160 --> 00:00:56,160
transmission for

00:00:53,440 --> 00:00:58,160
caching and for reuse so i put together

00:00:56,160 --> 00:00:58,559
a little diagram to sort of explain this

00:00:58,160 --> 00:01:01,280
idea

00:00:58,559 --> 00:01:01,840
when we talk about object storage like

00:01:01,280 --> 00:01:05,280
azure

00:01:01,840 --> 00:01:07,280
blob storage or amazon s3

00:01:05,280 --> 00:01:08,880
or mineo or something like that we're

00:01:07,280 --> 00:01:10,320
typically thinking of this mod

00:01:08,880 --> 00:01:12,000
model where there's a single piece of

00:01:10,320 --> 00:01:14,560
metadata that has the name

00:01:12,000 --> 00:01:17,040
the size other attributes of that object

00:01:14,560 --> 00:01:19,280
and then a single binary object

00:01:17,040 --> 00:01:20,880
and the two of them are tightly related

00:01:19,280 --> 00:01:24,000
we can think of other

00:01:20,880 --> 00:01:25,360
types of object storage that use similar

00:01:24,000 --> 00:01:27,520
models but might model

00:01:25,360 --> 00:01:28,640
with more than one object so for example

00:01:27,520 --> 00:01:31,520
the oci

00:01:28,640 --> 00:01:33,600
registries and and the image spec in

00:01:31,520 --> 00:01:35,200
which docker images are stored

00:01:33,600 --> 00:01:36,640
the idea there is you have one piece of

00:01:35,200 --> 00:01:38,320
metadata and then you have several

00:01:36,640 --> 00:01:40,000
different layers that can all be pulled

00:01:38,320 --> 00:01:42,560
down together and reassembled into

00:01:40,000 --> 00:01:45,439
one docker container on the other side

00:01:42,560 --> 00:01:46,720
bindle sort of one step beyond that

00:01:45,439 --> 00:01:48,880
where the idea is that we should be able

00:01:46,720 --> 00:01:50,720
to express more complicated

00:01:48,880 --> 00:01:52,320
relationships between objects so it can

00:01:50,720 --> 00:01:54,640
represent things in a more

00:01:52,320 --> 00:01:57,119
tree-like structure where we might have

00:01:54,640 --> 00:01:58,640
nine or 11 or 50 different objects but

00:01:57,119 --> 00:01:59,600
those objects could be related in

00:01:58,640 --> 00:02:01,119
different ways

00:01:59,600 --> 00:02:03,520
and later on in this presentation we'll

00:02:01,119 --> 00:02:04,399
talk about grouping and feature flags as

00:02:03,520 --> 00:02:06,079
way of in

00:02:04,399 --> 00:02:08,879
ways of indicating which particular

00:02:06,079 --> 00:02:11,120
objects within an aggregate object

00:02:08,879 --> 00:02:13,040
storage system we want to pull and how

00:02:11,120 --> 00:02:14,800
we want to configure them when we do

00:02:13,040 --> 00:02:17,440
so i'm going to pass on now to taylor to

00:02:14,800 --> 00:02:19,760
talk us through the parts of bindle

00:02:17,440 --> 00:02:21,440
so how does all of this get expressed so

00:02:19,760 --> 00:02:21,840
that it looked like a kind of complex

00:02:21,440 --> 00:02:23,360
graph

00:02:21,840 --> 00:02:24,959
in our in our fun little clip art there

00:02:23,360 --> 00:02:26,560
in the beginning and so

00:02:24,959 --> 00:02:28,000
what are the different parts of a bundle

00:02:26,560 --> 00:02:30,000
so let's go ahead and talk about the

00:02:28,000 --> 00:02:31,599
bindle itself so a bundle which we refer

00:02:30,000 --> 00:02:33,040
to with the lowercase b

00:02:31,599 --> 00:02:35,360
to differentiate from the name of the

00:02:33,040 --> 00:02:36,000
project is an is the name for the

00:02:35,360 --> 00:02:38,400
package

00:02:36,000 --> 00:02:39,200
inside of the bundle system so we're

00:02:38,400 --> 00:02:41,680
talking

00:02:39,200 --> 00:02:43,920
the the whole thing this is part this

00:02:41,680 --> 00:02:45,840
consists of two parts first the invoice

00:02:43,920 --> 00:02:47,519
which is the description of the bindle

00:02:45,840 --> 00:02:48,000
and that includes the metadata for it

00:02:47,519 --> 00:02:49,280
and

00:02:48,000 --> 00:02:50,800
a list of everything that should be

00:02:49,280 --> 00:02:52,800
attached to it and the parcels which are

00:02:50,800 --> 00:02:55,040
the objects related to

00:02:52,800 --> 00:02:55,840
that invoice and that together makes a

00:02:55,040 --> 00:02:59,040
bindle

00:02:55,840 --> 00:03:01,040
so what's the invoice an invoice is

00:02:59,040 --> 00:03:02,640
a description of the whole thing

00:03:01,040 --> 00:03:03,280
altogether so it first has the top-level

00:03:02,640 --> 00:03:04,959
metadata

00:03:03,280 --> 00:03:07,280
so we're talking the thing you normally

00:03:04,959 --> 00:03:08,720
expect name version the authors of it

00:03:07,280 --> 00:03:10,080
any additional there's also additional

00:03:08,720 --> 00:03:13,200
annotations that are

00:03:10,080 --> 00:03:14,720
that are allowed then you have a parcels

00:03:13,200 --> 00:03:16,319
list and this is the list of each

00:03:14,720 --> 00:03:18,560
attached parcel which we'll talk about

00:03:16,319 --> 00:03:21,519
what makes a part what makes up a parcel

00:03:18,560 --> 00:03:23,280
and then each um each invoice can have a

00:03:21,519 --> 00:03:24,319
set of groups that gives you a way to

00:03:23,280 --> 00:03:26,959
organize

00:03:24,319 --> 00:03:28,159
different parts of the bindle together

00:03:26,959 --> 00:03:29,519
and there's also a section for

00:03:28,159 --> 00:03:30,799
signatures which we'll talk a little bit

00:03:29,519 --> 00:03:34,080
more about in a second

00:03:30,799 --> 00:03:36,560
now as for a parcel

00:03:34,080 --> 00:03:38,000
a parcel in and of itself is just data

00:03:36,560 --> 00:03:41,120
it can be anything it's just

00:03:38,000 --> 00:03:43,120
it's just bytes of some kind and so

00:03:41,120 --> 00:03:45,120
um the invoice actually lists all those

00:03:43,120 --> 00:03:46,000
parcels and how they're connected using

00:03:45,120 --> 00:03:47,840
a shot

00:03:46,000 --> 00:03:49,200
and then that shot contains them and

00:03:47,840 --> 00:03:50,560
then there's also other information like

00:03:49,200 --> 00:03:52,080
what kind of type it is what you'd

00:03:50,560 --> 00:03:54,640
expect in in most

00:03:52,080 --> 00:03:56,480
object storage systems now what's

00:03:54,640 --> 00:03:58,959
interesting is that because it can be an

00:03:56,480 --> 00:04:00,720
arbitrary any arbitrary types of data

00:03:58,959 --> 00:04:02,000
a bundle could be used to represent

00:04:00,720 --> 00:04:04,239
something like a web page and it would

00:04:02,000 --> 00:04:06,400
have a parcel for the html file a parcel

00:04:04,239 --> 00:04:07,760
for the css file a parcel for each image

00:04:06,400 --> 00:04:09,439
file probably a parcel for

00:04:07,760 --> 00:04:11,760
the javascript file all those things

00:04:09,439 --> 00:04:11,760
together

00:04:12,799 --> 00:04:17,040
so in addition to this we have this

00:04:14,560 --> 00:04:19,440
notion of features and groups as way of

00:04:17,040 --> 00:04:20,079
ways of describing the relationships

00:04:19,440 --> 00:04:22,880
between

00:04:20,079 --> 00:04:23,440
different objects inside of an invoice

00:04:22,880 --> 00:04:24,880
so

00:04:23,440 --> 00:04:27,040
you might think of it this way imagine

00:04:24,880 --> 00:04:28,160
we had an application that had both a

00:04:27,040 --> 00:04:29,840
web ui

00:04:28,160 --> 00:04:31,199
and a potential ui that could run on the

00:04:29,840 --> 00:04:33,280
desktop right

00:04:31,199 --> 00:04:35,120
a lot of the logic is is the same so

00:04:33,280 --> 00:04:36,400
you've got some sort of core resources

00:04:35,120 --> 00:04:38,479
that are in one group

00:04:36,400 --> 00:04:39,680
and then you might have a group that has

00:04:38,479 --> 00:04:43,040
a

00:04:39,680 --> 00:04:44,960
a web ui with the same kind of index

00:04:43,040 --> 00:04:47,919
dot html and css files and things like

00:04:44,960 --> 00:04:50,400
that groups allow you ways to say okay

00:04:47,919 --> 00:04:52,240
these objects these parcels belong here

00:04:50,400 --> 00:04:54,479
these parcels belong here

00:04:52,240 --> 00:04:56,080
and uh and when you pull this one these

00:04:54,479 --> 00:04:57,600
are the required relationships between

00:04:56,080 --> 00:04:59,520
this and when you pull that these are

00:04:57,600 --> 00:05:01,039
the required relationships between those

00:04:59,520 --> 00:05:03,039
features are a little more special

00:05:01,039 --> 00:05:04,800
imagine like if you have a system where

00:05:03,039 --> 00:05:07,120
there's a gpu you might want to turn on

00:05:04,800 --> 00:05:08,720
a feature to take advantage of that gpu

00:05:07,120 --> 00:05:10,800
whereas on a platform without one you

00:05:08,720 --> 00:05:12,400
might not want to turn on that feature

00:05:10,800 --> 00:05:14,720
so features and groups together are

00:05:12,400 --> 00:05:15,840
tools to indicate a parcel's

00:05:14,720 --> 00:05:17,840
relationship

00:05:15,840 --> 00:05:21,039
uh to the bindle itself and to the other

00:05:17,840 --> 00:05:22,800
parcels inside of that bindle

00:05:21,039 --> 00:05:24,479
now quickly i'll also talk about

00:05:22,800 --> 00:05:25,759
signatures one of the important things

00:05:24,479 --> 00:05:27,600
that we wanted to make sure we could

00:05:25,759 --> 00:05:30,560
accomplish in this system

00:05:27,600 --> 00:05:32,000
was a cryptographic provenance trail so

00:05:30,560 --> 00:05:34,639
that you would always be able to say

00:05:32,000 --> 00:05:37,280
okay when i pull this assembly of

00:05:34,639 --> 00:05:39,440
objects these are exactly the objects

00:05:37,280 --> 00:05:40,639
that the creator in that the creator of

00:05:39,440 --> 00:05:43,759
this bindle

00:05:40,639 --> 00:05:45,280
intended to be pulled together right and

00:05:43,759 --> 00:05:47,199
uh and we wanted to do that a little

00:05:45,280 --> 00:05:48,960
more elaborately where you could say uh

00:05:47,199 --> 00:05:50,240
i want to ensure that you know somebody

00:05:48,960 --> 00:05:51,680
verified that these were the correct

00:05:50,240 --> 00:05:53,120
things and somebody hosted these and

00:05:51,680 --> 00:05:54,720
it's a host that i trust and somebody

00:05:53,120 --> 00:05:55,840
created it and it's a person that i know

00:05:54,720 --> 00:05:57,600
and so on

00:05:55,840 --> 00:05:59,039
so we created a signature model that

00:05:57,600 --> 00:06:00,160
allows you to express relatively

00:05:59,039 --> 00:06:02,400
complicated

00:06:00,160 --> 00:06:04,400
uh signing chains and provenance chains

00:06:02,400 --> 00:06:06,720
so that in those cases where software

00:06:04,400 --> 00:06:08,400
supply chain security matters to you

00:06:06,720 --> 00:06:10,160
there are a plethora of different ways

00:06:08,400 --> 00:06:12,000
that you can use this signature data to

00:06:10,160 --> 00:06:14,479
verify that things are as

00:06:12,000 --> 00:06:16,880
the original creators hosts and

00:06:14,479 --> 00:06:18,479
verifiers intended them to be

00:06:16,880 --> 00:06:19,840
so now we're going to switch over to

00:06:18,479 --> 00:06:22,080
some examples and taylor is going to

00:06:19,840 --> 00:06:24,479
kick us off with the first one here

00:06:22,080 --> 00:06:25,919
yeah so the examples part is really just

00:06:24,479 --> 00:06:27,520
you might have gotten lost in that big

00:06:25,919 --> 00:06:29,120
fire hose of information we just gave

00:06:27,520 --> 00:06:31,280
you so let's go ahead and talk about

00:06:29,120 --> 00:06:33,120
some very specific examples so each

00:06:31,280 --> 00:06:35,039
example starting with this basic bundle

00:06:33,120 --> 00:06:36,479
example we'll have a link here at the

00:06:35,039 --> 00:06:37,840
top you can click on that when you if

00:06:36,479 --> 00:06:38,560
you download the slides and you'll be

00:06:37,840 --> 00:06:40,639
able to see

00:06:38,560 --> 00:06:42,080
the uh what the invoice actually looks

00:06:40,639 --> 00:06:45,280
like so this first one

00:06:42,080 --> 00:06:46,639
is a very simple basic bundle with none

00:06:45,280 --> 00:06:48,400
of the the bells and whistles

00:06:46,639 --> 00:06:49,680
this is just representing an example web

00:06:48,400 --> 00:06:51,599
page an

00:06:49,680 --> 00:06:53,680
invoice has a name that generally has

00:06:51,599 --> 00:06:54,800
some sort of arbitrarily pathy

00:06:53,680 --> 00:06:57,120
thing so in this case it's just called

00:06:54,800 --> 00:06:58,160
my bindle and then a semver compatible

00:06:57,120 --> 00:07:00,319
version

00:06:58,160 --> 00:07:01,599
we won't go in december right now but

00:07:00,319 --> 00:07:02,800
that's something that's very strong

00:07:01,599 --> 00:07:04,479
inside of bundle that we use all the

00:07:02,800 --> 00:07:05,199
time and you'll see that there are three

00:07:04,479 --> 00:07:08,720
separate

00:07:05,199 --> 00:07:09,280
um parcels or or files that are used

00:07:08,720 --> 00:07:10,800
here so this

00:07:09,280 --> 00:07:12,560
we're talking about there's an html file

00:07:10,800 --> 00:07:14,960
a css file and a

00:07:12,560 --> 00:07:16,880
javascript file now these are all

00:07:14,960 --> 00:07:17,919
technically by default part of the

00:07:16,880 --> 00:07:20,080
default group

00:07:17,919 --> 00:07:21,360
hence the name and so i put a little box

00:07:20,080 --> 00:07:22,880
around to show there's a group but

00:07:21,360 --> 00:07:24,080
there's no requirements here that are

00:07:22,880 --> 00:07:25,759
expressed this is just

00:07:24,080 --> 00:07:27,199
there's a bundle and there's three files

00:07:25,759 --> 00:07:31,840
in the spindle there's no relationships

00:07:27,199 --> 00:07:31,840
defined or anything like that

00:07:32,240 --> 00:07:35,360
this is a slightly more complicated

00:07:34,240 --> 00:07:37,199
example that uh

00:07:35,360 --> 00:07:39,680
that illustrates how groups might be

00:07:37,199 --> 00:07:42,160
used so now in taylor's example when an

00:07:39,680 --> 00:07:44,319
end user agent pulled that

00:07:42,160 --> 00:07:45,919
that bindle the assumption is that it

00:07:44,319 --> 00:07:47,599
would pull all three parcels because

00:07:45,919 --> 00:07:50,160
they were part of the default group

00:07:47,599 --> 00:07:51,919
well what if we have a situation where

00:07:50,160 --> 00:07:54,240
uh a particular bindle

00:07:51,919 --> 00:07:55,360
uh maps a more sophisticated array of

00:07:54,240 --> 00:07:58,479
objects so

00:07:55,360 --> 00:08:00,400
uh here's an example my bindle uh

00:07:58,479 --> 00:08:02,000
is actually has both a client

00:08:00,400 --> 00:08:03,520
application in it and a server

00:08:02,000 --> 00:08:05,360
application in it

00:08:03,520 --> 00:08:07,120
and we can represent these as separate

00:08:05,360 --> 00:08:08,400
groups right then we might also even

00:08:07,120 --> 00:08:10,400
have a third group

00:08:08,400 --> 00:08:12,639
that has some utilities that could be

00:08:10,400 --> 00:08:14,319
used that are additional command line

00:08:12,639 --> 00:08:16,400
tools that might be necessary in some

00:08:14,319 --> 00:08:18,800
situations but not in others

00:08:16,400 --> 00:08:20,240
so we've got some red bright bold red

00:08:18,800 --> 00:08:22,560
arrows here to indicate when a

00:08:20,240 --> 00:08:24,879
relationship is required

00:08:22,560 --> 00:08:26,000
and and then we've got some pale arrows

00:08:24,879 --> 00:08:28,479
to indicate when it's not when

00:08:26,000 --> 00:08:30,479
it's optional right so the idea here is

00:08:28,479 --> 00:08:33,680
we've got a group called a cli group

00:08:30,479 --> 00:08:36,240
it has two objects in it so

00:08:33,680 --> 00:08:38,479
by default when i pull this invoice and

00:08:36,240 --> 00:08:39,279
and activate the cli group i will get

00:08:38,479 --> 00:08:41,839
those two

00:08:39,279 --> 00:08:43,120
first and second objects and they will

00:08:41,839 --> 00:08:45,279
be pulled down along

00:08:43,120 --> 00:08:46,560
with my uh with my bundle so those are

00:08:45,279 --> 00:08:47,600
two parcels that are going to come in

00:08:46,560 --> 00:08:50,720
the bundle

00:08:47,600 --> 00:08:53,440
now if i want to run a server i might

00:08:50,720 --> 00:08:55,120
also want to turn on the server group

00:08:53,440 --> 00:08:57,040
and turning that on will give me a

00:08:55,120 --> 00:08:57,600
daemon that i can run in the background

00:08:57,040 --> 00:09:00,000
right

00:08:57,600 --> 00:09:01,600
so if i turn on that group then when my

00:09:00,000 --> 00:09:02,640
bundle client pulls it's going to pull

00:09:01,600 --> 00:09:05,200
the server

00:09:02,640 --> 00:09:06,480
but it is also going to pull the utility

00:09:05,200 --> 00:09:08,000
group because we can see that there's a

00:09:06,480 --> 00:09:10,640
requirement relationship between

00:09:08,000 --> 00:09:11,519
the daemon process and the blue box

00:09:10,640 --> 00:09:14,800
there at the bottom

00:09:11,519 --> 00:09:17,360
with the third item located inside of it

00:09:14,800 --> 00:09:19,440
so what what's illustrated here is this

00:09:17,360 --> 00:09:21,279
idea that you can have a single

00:09:19,440 --> 00:09:23,360
bindle that encapsulates a more

00:09:21,279 --> 00:09:25,200
sophisticated application

00:09:23,360 --> 00:09:27,600
and you can model the relationship so

00:09:25,200 --> 00:09:29,519
that the agent can really pull a bundle

00:09:27,600 --> 00:09:30,640
and pass in the configuration and be

00:09:29,519 --> 00:09:32,880
sure that the

00:09:30,640 --> 00:09:34,560
the configuration it passes in i need

00:09:32,880 --> 00:09:35,279
this group i want this feature enabled

00:09:34,560 --> 00:09:37,120
whatever

00:09:35,279 --> 00:09:38,320
will result in an application that the

00:09:37,120 --> 00:09:41,040
runtime can actually

00:09:38,320 --> 00:09:42,880
execute whatever that runtime is now

00:09:41,040 --> 00:09:44,240
we've been a little hand wavy about what

00:09:42,880 --> 00:09:45,440
the runtimes are

00:09:44,240 --> 00:09:47,200
but i'm going to hand it over again to

00:09:45,440 --> 00:09:48,800
taylor to talk specifically about one of

00:09:47,200 --> 00:09:52,399
the runtimes that we

00:09:48,800 --> 00:09:54,399
intended to target with bindle

00:09:52,399 --> 00:09:56,000
yeah so last just to finish this off as

00:09:54,399 --> 00:09:57,519
an example of using was and nano

00:09:56,000 --> 00:09:58,720
processes which is a thing that still in

00:09:57,519 --> 00:09:59,360
products we're not going to talk about

00:09:58,720 --> 00:10:01,200
here

00:09:59,360 --> 00:10:02,720
but the idea is what if you had a heavy

00:10:01,200 --> 00:10:04,079
and light example so if you wanted to

00:10:02,720 --> 00:10:05,040
run if you were on a more powerful

00:10:04,079 --> 00:10:07,040
device

00:10:05,040 --> 00:10:08,480
or a something else like a raspberry pi

00:10:07,040 --> 00:10:09,519
you could run two different versions of

00:10:08,480 --> 00:10:11,680
something so in this

00:10:09,519 --> 00:10:13,120
example weather app we have something

00:10:11,680 --> 00:10:14,800
that's part of the default group that is

00:10:13,120 --> 00:10:15,360
just required because there's always

00:10:14,800 --> 00:10:17,680
something

00:10:15,360 --> 00:10:19,200
that must be pulled for for something to

00:10:17,680 --> 00:10:20,480
run and in this case this is a

00:10:19,200 --> 00:10:22,880
weather.wasm

00:10:20,480 --> 00:10:24,640
but that weather.wasm has a requirement

00:10:22,880 --> 00:10:26,880
of having some sort of almanac

00:10:24,640 --> 00:10:28,079
service to talk to and this omnic group

00:10:26,880 --> 00:10:30,000
has one that's heavy

00:10:28,079 --> 00:10:31,600
and one that's light and a runtime such

00:10:30,000 --> 00:10:34,560
as a as a wasm

00:10:31,600 --> 00:10:35,680
runtime could choose which one it needs

00:10:34,560 --> 00:10:38,800
based on

00:10:35,680 --> 00:10:40,720
the type of device it's actually running

00:10:38,800 --> 00:10:42,000
so if you need that heavier thing it's

00:10:40,720 --> 00:10:43,360
going to give you more accurate results

00:10:42,000 --> 00:10:45,120
and you have the processing power to do

00:10:43,360 --> 00:10:46,720
it it'll select you can select one of

00:10:45,120 --> 00:10:48,640
the almanac group members

00:10:46,720 --> 00:10:50,880
or if you're running on a raspberry pi

00:10:48,640 --> 00:10:52,560
you could run the lib almanac lite

00:10:50,880 --> 00:10:54,079
and so that's what these they're both

00:10:52,560 --> 00:10:56,079
required in this case but you're allowed

00:10:54,079 --> 00:10:56,880
to select from each group to be able to

00:10:56,079 --> 00:10:58,640
satisfy

00:10:56,880 --> 00:11:00,000
the requirements so hopefully you've

00:10:58,640 --> 00:11:01,680
enjoyed this overview of bindle

00:11:00,000 --> 00:11:03,760
very fast if you're interested please

00:11:01,680 --> 00:11:07,120
check it out and we can we'd love to

00:11:03,760 --> 00:11:07,120

YouTube URL: https://www.youtube.com/watch?v=3-XSXrPcFtI


