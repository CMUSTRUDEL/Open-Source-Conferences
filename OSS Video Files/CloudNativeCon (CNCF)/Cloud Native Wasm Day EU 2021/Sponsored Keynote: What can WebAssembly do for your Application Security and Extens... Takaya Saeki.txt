Title: Sponsored Keynote: What can WebAssembly do for your Application Security and Extens... Takaya Saeki
Publication date: 2021-05-11
Playlist: Cloud Native Wasm Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Sponsored Keynote: What can WebAssembly do for your Application Security and Extensibility - Takaya Saeki, Tetrate Engineer and Envoy Contributor, Tetrate

WebAssembly was born as portable bytecode to run in browsers, but it is now much more than that. Many out-of-browser environments for running WebAssembly have emerged, including proxy-wasm, Krustlet, and WASI.

Why is WebAssembly gaining a presence outside the browser?
The key lies in the fact that WebAssembly has multiple advantages that were not previously available, especially safeness and openness.

In this talk, I will summarize what features of WebAssembly are giving rise to a wide variety of applications in the world outside the browser, and reflect on how "WebAssembly outside the browser" is a great idea and its impact on application security.
Captions: 
	00:00:00,080 --> 00:00:04,560
okay so let me start today's my talk

00:00:02,800 --> 00:00:05,839
what can web assembly do for your

00:00:04,560 --> 00:00:09,040
application security

00:00:05,839 --> 00:00:13,280
and extensibility i'm takaya saki from

00:00:09,040 --> 00:00:15,440
total inc and today's my topic i'm sorry

00:00:13,280 --> 00:00:18,080
today's my talk has two topics

00:00:15,440 --> 00:00:19,840
so the first topic is why webassembly is

00:00:18,080 --> 00:00:20,800
gaining presence in the cloud-native

00:00:19,840 --> 00:00:23,359
world

00:00:20,800 --> 00:00:24,480
and the second topic is the impact of

00:00:23,359 --> 00:00:26,240
web assembly

00:00:24,480 --> 00:00:28,800
on application extensibility and

00:00:26,240 --> 00:00:30,880
security

00:00:28,800 --> 00:00:32,880
so before getting started let me

00:00:30,880 --> 00:00:34,239
introduce this about myself on twitter a

00:00:32,880 --> 00:00:37,840
little

00:00:34,239 --> 00:00:41,120
i'm takasaki a software engineer title

00:00:37,840 --> 00:00:43,200
from tokyo japan i love programming

00:00:41,120 --> 00:00:45,120
and here is the list of my favorite

00:00:43,200 --> 00:00:48,480
projects

00:00:45,120 --> 00:00:50,079
and about saturate a tetrad is the

00:00:48,480 --> 00:00:52,000
substance company

00:00:50,079 --> 00:00:54,320
we are making the application aerial

00:00:52,000 --> 00:00:58,000
networking

00:00:54,320 --> 00:01:01,359
and tethoid is also a big oss

00:00:58,000 --> 00:01:02,239
contributor tetra8 is one of the top

00:01:01,359 --> 00:01:05,119
android computer

00:01:02,239 --> 00:01:06,880
contributors in the world fedoras is the

00:01:05,119 --> 00:01:10,159
biggest contributor

00:01:06,880 --> 00:01:12,880
to android after google

00:01:10,159 --> 00:01:16,720
and the attitude is also one of top

00:01:12,880 --> 00:01:16,720
issue contributors in the world

00:01:18,400 --> 00:01:25,280
okay let me get down to the main topic

00:01:21,439 --> 00:01:27,280
so web assembly has many applications is

00:01:25,280 --> 00:01:29,759
accounted well today

00:01:27,280 --> 00:01:31,119
so here i tested the schedule of today's

00:01:29,759 --> 00:01:32,880
web assembly day

00:01:31,119 --> 00:01:35,280
as you can see there are many

00:01:32,880 --> 00:01:39,040
applications of the web assembly

00:01:35,280 --> 00:01:41,600
uh for example yz or

00:01:39,040 --> 00:01:42,880
h h-cloud computing visual assembly and

00:01:41,600 --> 00:01:44,799
proxy button

00:01:42,880 --> 00:01:46,560
or cloud-native runtime for several

00:01:44,799 --> 00:01:50,159
function visual assembly

00:01:46,560 --> 00:01:52,880
or a song and so on

00:01:50,159 --> 00:01:53,439
so while web assembly is gaining

00:01:52,880 --> 00:01:56,479
presence

00:01:53,439 --> 00:01:56,479
in the current world

00:01:56,960 --> 00:02:04,560
to reflect on that let's get back to the

00:02:00,719 --> 00:02:04,560
basic property of the assembly

00:02:05,040 --> 00:02:11,599
so webassembly is safe portable

00:02:08,720 --> 00:02:12,080
and loadable binary instructional format

00:02:11,599 --> 00:02:14,400
and

00:02:12,080 --> 00:02:15,440
its design spec lists certain design

00:02:14,400 --> 00:02:18,560
goals

00:02:15,440 --> 00:02:21,120
for example fast safe open

00:02:18,560 --> 00:02:23,040
and language independent and portable

00:02:21,120 --> 00:02:26,879
and much more

00:02:23,040 --> 00:02:30,480
and in today's talk i want to focus on

00:02:26,879 --> 00:02:34,840
those two three those four properties

00:02:30,480 --> 00:02:36,720
the safe open language independent and

00:02:34,840 --> 00:02:38,720
portable

00:02:36,720 --> 00:02:39,920
so web assembly has those four

00:02:38,720 --> 00:02:43,360
properties

00:02:39,920 --> 00:02:44,000
so webassembly is safe web assembly can

00:02:43,360 --> 00:02:46,720
safely

00:02:44,000 --> 00:02:48,000
run untrusted codes in sandbox

00:02:46,720 --> 00:02:51,040
environment

00:02:48,000 --> 00:02:51,599
and the web assembly is open uh by the

00:02:51,040 --> 00:02:54,000
way

00:02:51,599 --> 00:02:55,120
let me call this open property as

00:02:54,000 --> 00:02:58,159
environmental property

00:02:55,120 --> 00:03:01,280
sometimes for for to make it

00:02:58,159 --> 00:03:02,239
easier to understand what what open does

00:03:01,280 --> 00:03:04,959
mean

00:03:02,239 --> 00:03:07,440
and it means web assembly has

00:03:04,959 --> 00:03:08,800
customizable interface with external

00:03:07,440 --> 00:03:12,879
environment

00:03:08,800 --> 00:03:16,159
for example a web assembly has a

00:03:12,879 --> 00:03:18,959
external environment such as rosi where

00:03:16,159 --> 00:03:20,080
the assembly can run on abstracted

00:03:18,959 --> 00:03:24,000
operating system

00:03:20,080 --> 00:03:26,560
platform or proxy button

00:03:24,000 --> 00:03:27,840
in proxy button with assembly module

00:03:26,560 --> 00:03:30,319
communicate with

00:03:27,840 --> 00:03:30,959
external proxy applications to

00:03:30,319 --> 00:03:34,000
manipulate

00:03:30,959 --> 00:03:34,640
or handle traffic such as http or udp

00:03:34,000 --> 00:03:38,239
traffic

00:03:34,640 --> 00:03:39,040
or tcp of course and weaver assembly is

00:03:38,239 --> 00:03:41,360
portable

00:03:39,040 --> 00:03:42,879
it's architecture independent and it's

00:03:41,360 --> 00:03:45,040
private

00:03:42,879 --> 00:03:47,840
webassembly can be compiled for many

00:03:45,040 --> 00:03:47,840
programming languages

00:03:49,599 --> 00:03:53,599
however if you think about each

00:03:52,400 --> 00:03:56,000
properties

00:03:53,599 --> 00:03:57,599
actually there are other good solutions

00:03:56,000 --> 00:04:00,879
for similar goals

00:03:57,599 --> 00:04:03,920
so for example naco is a google's great

00:04:00,879 --> 00:04:07,200
software fault isolation solution

00:04:03,920 --> 00:04:09,120
itself invisible and polygons it lands

00:04:07,200 --> 00:04:11,519
untrusted codes

00:04:09,120 --> 00:04:12,640
as invites some software fault isolation

00:04:11,519 --> 00:04:15,680
technique

00:04:12,640 --> 00:04:18,639
but it lacks portability because narco

00:04:15,680 --> 00:04:19,440
is based on the native binary and the

00:04:18,639 --> 00:04:21,759
ebpf

00:04:19,440 --> 00:04:22,880
is self enviable and portable program

00:04:21,759 --> 00:04:24,720
mainly for canon

00:04:22,880 --> 00:04:26,320
but because it's language it's not

00:04:24,720 --> 00:04:28,560
private of course

00:04:26,320 --> 00:04:29,600
and the lure is prominent embeddable

00:04:28,560 --> 00:04:32,320
script language

00:04:29,600 --> 00:04:33,759
but it's not provoked easily a native

00:04:32,320 --> 00:04:34,400
variable format native library

00:04:33,759 --> 00:04:37,120
performance

00:04:34,400 --> 00:04:38,560
is there of course available but because

00:04:37,120 --> 00:04:41,520
it's native library

00:04:38,560 --> 00:04:42,080
it has no safety net portability and

00:04:41,520 --> 00:04:44,560
java

00:04:42,080 --> 00:04:46,800
is a great language that lands anywhere

00:04:44,560 --> 00:04:49,199
but isolation is not java's first class

00:04:46,800 --> 00:04:49,199
season

00:04:49,840 --> 00:04:55,680
so existing solutions have similar goals

00:04:53,280 --> 00:04:56,880
but none of them satisfies all the code

00:04:55,680 --> 00:04:59,840
at the same time

00:04:56,880 --> 00:05:01,360
however web assembly is a new solution

00:04:59,840 --> 00:05:05,120
which aims to meet

00:05:01,360 --> 00:05:05,120
source codes simultaneously

00:05:05,600 --> 00:05:09,440
so this diagram shows the positioning of

00:05:08,000 --> 00:05:12,400
web assembly

00:05:09,440 --> 00:05:13,440
as you can see a web assembly is open

00:05:12,400 --> 00:05:16,639
and portable

00:05:13,440 --> 00:05:19,039
safe and horrible at the same time so

00:05:16,639 --> 00:05:22,240
wasn't realized multiple goals that were

00:05:19,039 --> 00:05:25,360
not covered simultaneously before

00:05:22,240 --> 00:05:26,639
and as you can see of course as other

00:05:25,360 --> 00:05:29,759
existing solutions

00:05:26,639 --> 00:05:32,960
lack some aspects of those properties

00:05:29,759 --> 00:05:35,759
for example a native library is open

00:05:32,960 --> 00:05:36,720
and private but it's not portable not

00:05:35,759 --> 00:05:40,160
safe

00:05:36,720 --> 00:05:42,240
and lure is portable safe and open

00:05:40,160 --> 00:05:44,080
but because it's language lawyer is not

00:05:42,240 --> 00:05:46,960
private

00:05:44,080 --> 00:05:48,479
in other words a web assembly is as

00:05:46,960 --> 00:05:50,560
portable as java

00:05:48,479 --> 00:05:52,080
and the web assembly is as safe as

00:05:50,560 --> 00:05:55,759
knuckle a comp

00:05:52,080 --> 00:05:57,199
and as endable as lure and as follicles

00:05:55,759 --> 00:06:00,240
as native library

00:05:57,199 --> 00:06:02,720
so that's the strength of the assembly

00:06:00,240 --> 00:06:03,360
is under why webassembly is gaining

00:06:02,720 --> 00:06:06,960
presence

00:06:03,360 --> 00:06:10,319
in the coordinate world and

00:06:06,960 --> 00:06:13,039
because fast because being fast

00:06:10,319 --> 00:06:14,080
is a basic property of assembly of

00:06:13,039 --> 00:06:16,639
course

00:06:14,080 --> 00:06:17,520
if you put a fast property in the

00:06:16,639 --> 00:06:21,840
diagram

00:06:17,520 --> 00:06:21,840
this the diagonal will look like this

00:06:22,720 --> 00:06:27,840
so that's why we were simply scanning

00:06:24,720 --> 00:06:30,639
presence in the cloned world

00:06:27,840 --> 00:06:35,199
so let me talk about its impact on

00:06:30,639 --> 00:06:38,080
extensibility and security interest

00:06:35,199 --> 00:06:40,639
so because what is an object how much

00:06:38,080 --> 00:06:43,600
just like f

00:06:40,639 --> 00:06:44,720
what web assembly module can actually do

00:06:43,600 --> 00:06:48,160
is defined by

00:06:44,720 --> 00:06:50,720
external but embedding interface

00:06:48,160 --> 00:06:52,560
so version embedding interface defines

00:06:50,720 --> 00:06:54,160
functions and other symbols

00:06:52,560 --> 00:06:57,039
that the vessel module imports and

00:06:54,160 --> 00:07:00,639
exports this gives like the variety of

00:06:57,039 --> 00:07:03,840
actual interfaces for wasm

00:07:00,639 --> 00:07:08,240
and i pick up two examples here

00:07:03,840 --> 00:07:11,440
it's proximasum adwazi uh i pick up this

00:07:08,240 --> 00:07:14,000
example because i think these two

00:07:11,440 --> 00:07:15,280
examples are very fundamental examples

00:07:14,000 --> 00:07:18,479
of fast embedding

00:07:15,280 --> 00:07:21,360
interfaces so and

00:07:18,479 --> 00:07:22,000
today i focus on proximation because

00:07:21,360 --> 00:07:25,120
it's an

00:07:22,000 --> 00:07:25,120
embedded interface

00:07:25,919 --> 00:07:30,240
so what why wave assembly and why amd

00:07:29,280 --> 00:07:33,199
wave assembly

00:07:30,240 --> 00:07:34,080
in some application is important it's

00:07:33,199 --> 00:07:36,720
because

00:07:34,080 --> 00:07:38,319
a web assembly can provide secure

00:07:36,720 --> 00:07:41,919
extensibility mechanisms

00:07:38,319 --> 00:07:42,639
for applications so application advanced

00:07:41,919 --> 00:07:45,120
modules

00:07:42,639 --> 00:07:46,639
communicate through bi-directional api

00:07:45,120 --> 00:07:49,360
and api

00:07:46,639 --> 00:07:50,160
and then thanks to wasn't users of an

00:07:49,360 --> 00:07:53,120
application

00:07:50,160 --> 00:07:56,160
to make extension security portably and

00:07:53,120 --> 00:07:56,160
in any languages

00:07:56,639 --> 00:08:03,280
and proxy version is an example of such

00:08:00,240 --> 00:08:05,680
secure extension mechanism

00:08:03,280 --> 00:08:07,599
so proximasum is an extensibility

00:08:05,680 --> 00:08:10,400
interface for proxy servers

00:08:07,599 --> 00:08:12,960
hardware web assembly and the envoys

00:08:10,400 --> 00:08:15,199
reference implementation of that

00:08:12,960 --> 00:08:18,639
it provides secure and portable way to

00:08:15,199 --> 00:08:18,639
manipulate fox traffic

00:08:19,599 --> 00:08:26,080
and here is how proxy wasn't about

00:08:22,639 --> 00:08:29,520
ambush extensivity mechanism so before

00:08:26,080 --> 00:08:32,320
wasn't uh amboy offers static systems

00:08:29,520 --> 00:08:33,680
library as its extension mechanism so it

00:08:32,320 --> 00:08:35,360
has no isolation

00:08:33,680 --> 00:08:37,919
and synthesizers only support the

00:08:35,360 --> 00:08:40,000
language and the updating extension

00:08:37,919 --> 00:08:44,320
regarding the built

00:08:40,000 --> 00:08:46,959
however after the adoption wasn't

00:08:44,320 --> 00:08:48,399
now mbo extension lands in an isolated

00:08:46,959 --> 00:08:50,480
environment security

00:08:48,399 --> 00:08:55,839
and it's language independent and

00:08:50,480 --> 00:08:55,839
dynamic load of extensions are supported

00:08:57,040 --> 00:09:03,920
so like in that example

00:09:01,279 --> 00:09:04,800
web assembly brings secure extensibility

00:09:03,920 --> 00:09:07,200
mechanism

00:09:04,800 --> 00:09:07,839
to the cloud native applications and

00:09:07,200 --> 00:09:09,040
emblem

00:09:07,839 --> 00:09:11,440
still provides such security

00:09:09,040 --> 00:09:13,839
extensibility mechanism for application

00:09:11,440 --> 00:09:15,920
message by proxy version

00:09:13,839 --> 00:09:17,440
you will be able to write your embryo

00:09:15,920 --> 00:09:19,440
extension by version

00:09:17,440 --> 00:09:20,640
for example custom authorization and

00:09:19,440 --> 00:09:23,760
custom authentication

00:09:20,640 --> 00:09:24,560
logging so proxy version is an important

00:09:23,760 --> 00:09:26,880
example

00:09:24,560 --> 00:09:30,000
future security extensive mechanism for

00:09:26,880 --> 00:09:30,000
other web assembly

00:09:30,080 --> 00:09:34,000
so here is that today is my topic my

00:09:32,800 --> 00:09:36,720
talk summary

00:09:34,000 --> 00:09:37,839
so the embeddable self-portable and

00:09:36,720 --> 00:09:40,560
portable properties

00:09:37,839 --> 00:09:42,000
wasn't gives rise to the variables

00:09:40,560 --> 00:09:44,160
interfaces

00:09:42,000 --> 00:09:45,839
and the secure extensive mechanism is a

00:09:44,160 --> 00:09:48,240
typical interface

00:09:45,839 --> 00:09:50,080
and such interface i mean and the proxy

00:09:48,240 --> 00:09:51,360
version is an extensive mechanism for

00:09:50,080 --> 00:09:53,600
proxy

00:09:51,360 --> 00:09:55,680
and what will continue to bring new

00:09:53,600 --> 00:09:58,839
secret extensibility mechanisms

00:09:55,680 --> 00:10:01,839
to the cloud-native world applications

00:09:58,839 --> 00:10:01,839

YouTube URL: https://www.youtube.com/watch?v=SRXEuJJR0XE


