Title: WASM in the Wild West: A Practical Application Tale - Matt Butche & Taylor Thomas, Microsoft
Publication date: 2021-05-11
Playlist: Cloud Native Wasm Day EU 2021
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

WASM in the Wild West: A Practical Application Tale - Matt Butche & Taylor Thomas, Microsoft

Almost one year ago, our team released Krustlet, a Kubernetes Kubelet implementation for running WASM modules. Since then, we’ve spent plenty of time out on the frontier, implementing full Kubernetes functionality for WASM as well as other experiments like WAGI. Along the way, we’ve seen all the rough edges and gaps when using WASM in the cloud. Using these project as a practical backdrop, we’ll discuss the lessons we’ve learned and the remaining gaps to be filled (and how you can participate!) in order for WASM to become more mainstream.
Captions: 
	00:00:01,760 --> 00:00:07,120
all right welcome to wassum in the wild

00:00:04,319 --> 00:00:09,040
west a practical application tale

00:00:07,120 --> 00:00:10,320
uh i'd like to introduce you to your

00:00:09,040 --> 00:00:12,559
outlaws for the day

00:00:10,320 --> 00:00:14,160
i'm from colorado and uh we are

00:00:12,559 --> 00:00:16,080
definitely cowboyish here

00:00:14,160 --> 00:00:17,440
i'm matt butcher i lead an open source

00:00:16,080 --> 00:00:19,920
team at microsoft

00:00:17,440 --> 00:00:21,600
uh i have worked on helm kubernetes

00:00:19,920 --> 00:00:24,240
various pads systems

00:00:21,600 --> 00:00:25,119
uh openstack and this web assembly world

00:00:24,240 --> 00:00:28,240
is my latest

00:00:25,119 --> 00:00:30,400
foray into the wide world of cloud

00:00:28,240 --> 00:00:32,559
uh you can reach me at any of these uh

00:00:30,400 --> 00:00:35,040
social media handles

00:00:32,559 --> 00:00:36,719
and i'm taylor thomas um i also live in

00:00:35,040 --> 00:00:38,480
what used to be the wild west but that's

00:00:36,719 --> 00:00:40,320
not why we're theming it this way

00:00:38,480 --> 00:00:42,399
i'm a chrysler and helm core maintainer

00:00:40,320 --> 00:00:44,239
emeritus i've been doing kubernetes

00:00:42,399 --> 00:00:46,559
things since around docker

00:00:44,239 --> 00:00:48,399
since 1.2 and docker around 0.7 so i've

00:00:46,559 --> 00:00:51,280
been doing this for a while as well

00:00:48,399 --> 00:00:52,559
the cloud native space i came to rust by

00:00:51,280 --> 00:00:54,640
way of go which kind of makes sense

00:00:52,559 --> 00:00:56,399
given the kubernetes background

00:00:54,640 --> 00:00:58,079
i have a problem with consistency with

00:00:56,399 --> 00:00:59,440
my social media handles given when they

00:00:58,079 --> 00:01:00,960
were created and whatnot and i'm always

00:00:59,440 --> 00:01:03,359
afraid to change them because

00:01:00,960 --> 00:01:05,119
we all know what that can do so uh yeah

00:01:03,359 --> 00:01:06,799
that's us so let's go ahead and just get

00:01:05,119 --> 00:01:09,119
straight on into things and talk a

00:01:06,799 --> 00:01:10,799
little bit about just kind of a

00:01:09,119 --> 00:01:11,920
to wet your whistle let's let's talk

00:01:10,799 --> 00:01:13,600
about the projects that we're going to

00:01:11,920 --> 00:01:14,720
be referencing in here a little bit

00:01:13,600 --> 00:01:16,320
and we're going to be talking and

00:01:14,720 --> 00:01:17,920
focusing mostly on wasm but we want to

00:01:16,320 --> 00:01:19,759
give these as kind of a backdrop so you

00:01:17,920 --> 00:01:23,439
know where we're coming from

00:01:19,759 --> 00:01:25,439
so both matt and i have worked together

00:01:23,439 --> 00:01:27,040
on on all these projects as along with

00:01:25,439 --> 00:01:29,840
the other members of our team

00:01:27,040 --> 00:01:30,159
and the first one is crestlet in cressit

00:01:29,840 --> 00:01:32,079
we

00:01:30,159 --> 00:01:34,159
are running web assembly workloads in

00:01:32,079 --> 00:01:36,320
kubernetes and so this allows you to

00:01:34,159 --> 00:01:38,320
take whatever kind of uh

00:01:36,320 --> 00:01:40,479
compatible wasm binary and be able to

00:01:38,320 --> 00:01:42,479
run it inside of kubernetes

00:01:40,479 --> 00:01:44,240
just like you would a normal container

00:01:42,479 --> 00:01:45,840
it's not running in a container it's

00:01:44,240 --> 00:01:48,320
it's running actually just as a straight

00:01:45,840 --> 00:01:49,119
was in binary and then bindle is an

00:01:48,320 --> 00:01:50,560
aggregate

00:01:49,119 --> 00:01:52,079
aggregate object storage engine we've

00:01:50,560 --> 00:01:53,520
given another talk on this in case you

00:01:52,079 --> 00:01:55,840
want to check it out this allows us to

00:01:53,520 --> 00:01:58,159
store all of the wasn't things together

00:01:55,840 --> 00:02:00,399
and then last is waggy which we kind of

00:01:58,159 --> 00:02:03,600
took from all of our dogs on our team

00:02:00,399 --> 00:02:04,399
but it is a an easy way to write cloud

00:02:03,600 --> 00:02:07,280
side wasm

00:02:04,399 --> 00:02:07,759
kind of as a http handler so those are

00:02:07,280 --> 00:02:09,599
the

00:02:07,759 --> 00:02:11,680
three projects that we've come from with

00:02:09,599 --> 00:02:13,360
all this knowledge as we discuss

00:02:11,680 --> 00:02:15,440
um how we've used wasm and what it's

00:02:13,360 --> 00:02:16,640
like using it in really what is the wild

00:02:15,440 --> 00:02:18,319
west right now

00:02:16,640 --> 00:02:20,160
so let's go ahead and kind of explore

00:02:18,319 --> 00:02:23,520
how we got there

00:02:20,160 --> 00:02:25,520
so my team our team um meets usually

00:02:23,520 --> 00:02:27,280
under normal circumstances about once or

00:02:25,520 --> 00:02:28,480
twice a year together we're distributed

00:02:27,280 --> 00:02:30,720
most of the time

00:02:28,480 --> 00:02:32,080
uh but we'd like to get together uh

00:02:30,720 --> 00:02:34,560
brainstorm about

00:02:32,080 --> 00:02:36,400
cool interesting ideas and and go

00:02:34,560 --> 00:02:37,760
through a number of you know exercises

00:02:36,400 --> 00:02:41,519
see how we're doing

00:02:37,760 --> 00:02:42,879
well in 2019 we all got together in

00:02:41,519 --> 00:02:45,920
vancouver

00:02:42,879 --> 00:02:47,280
and uh vancouver island rather and had

00:02:45,920 --> 00:02:50,800
our

00:02:47,280 --> 00:02:52,720
typical on-site off-site meeting

00:02:50,800 --> 00:02:54,400
but somewhere along the way here we got

00:02:52,720 --> 00:02:56,160
sort of sidetracked from our usual

00:02:54,400 --> 00:02:57,760
kubernetes container

00:02:56,160 --> 00:02:59,599
virtual machine helm kinds of

00:02:57,760 --> 00:03:00,720
conversation and got going on web

00:02:59,599 --> 00:03:02,400
assembly

00:03:00,720 --> 00:03:04,640
and uh we were talking about the

00:03:02,400 --> 00:03:05,599
interesting aspects of webassembly's

00:03:04,640 --> 00:03:07,440
runtime

00:03:05,599 --> 00:03:09,519
and how while it was intended to run in

00:03:07,440 --> 00:03:10,560
a browser it actually had a lot of

00:03:09,519 --> 00:03:13,040
potential

00:03:10,560 --> 00:03:14,879
for running on a cloud side and creating

00:03:13,040 --> 00:03:15,519
the kind of isolated runtime that we

00:03:14,879 --> 00:03:19,120
need

00:03:15,519 --> 00:03:21,440
in multi-tenant cloud situations so

00:03:19,120 --> 00:03:22,879
uh as soon as that that sentence sort of

00:03:21,440 --> 00:03:24,640
made it out into the room we just

00:03:22,879 --> 00:03:25,120
started talking and talking it was after

00:03:24,640 --> 00:03:27,200
dinner

00:03:25,120 --> 00:03:28,879
we must have spent hours sitting at a

00:03:27,200 --> 00:03:30,879
table in the restaurant just talking

00:03:28,879 --> 00:03:32,959
through all these various scenarios

00:03:30,879 --> 00:03:34,159
uh with ideas sort of flying fast and

00:03:32,959 --> 00:03:36,080
furiously

00:03:34,159 --> 00:03:37,840
it was a lot of fun finished up our

00:03:36,080 --> 00:03:39,680
meeting all went back home

00:03:37,840 --> 00:03:42,319
and then you know a month or so passed

00:03:39,680 --> 00:03:45,120
and we decided to give it a shot

00:03:42,319 --> 00:03:46,640
and the first idea was to try out

00:03:45,120 --> 00:03:49,599
building a kubernetes

00:03:46,640 --> 00:03:51,360
kubelet that could execute webassembly

00:03:49,599 --> 00:03:53,280
we wrote this in rust so we named it

00:03:51,360 --> 00:03:55,840
crestlit because kubelet rust

00:03:53,280 --> 00:03:58,400
seemed funny to us uh and it turned out

00:03:55,840 --> 00:04:01,040
to not be too hard to basically just

00:03:58,400 --> 00:04:02,640
write a small amount of code that could

00:04:01,040 --> 00:04:05,280
connect to a kubernetes cluster

00:04:02,640 --> 00:04:06,959
advertise itself as a kubernetes node

00:04:05,280 --> 00:04:08,480
but when it got a request instead of

00:04:06,959 --> 00:04:10,159
pulling containers and executing

00:04:08,480 --> 00:04:12,000
containers it was pulling web assembly

00:04:10,159 --> 00:04:13,840
modules and executing those

00:04:12,000 --> 00:04:15,840
so this is sort of our first heist we

00:04:13,840 --> 00:04:17,600
were pretty proud of ourselves we got

00:04:15,840 --> 00:04:19,280
got enough of this done to show off to a

00:04:17,600 --> 00:04:21,359
few people and of course it started

00:04:19,280 --> 00:04:23,680
peaking more and more people's interests

00:04:21,359 --> 00:04:25,600
and what happens is that your uh cute

00:04:23,680 --> 00:04:28,160
little proof of concept suddenly

00:04:25,600 --> 00:04:29,680
uh runs into actual production use cases

00:04:28,160 --> 00:04:32,479
and people say can it do this

00:04:29,680 --> 00:04:33,360
well no can it do that well no so then

00:04:32,479 --> 00:04:35,520
we had to sort of

00:04:33,360 --> 00:04:37,440
upgrade from a heist to an all out great

00:04:35,520 --> 00:04:39,199
train robbery style thing

00:04:37,440 --> 00:04:41,040
and we went from a proof of concept to

00:04:39,199 --> 00:04:43,199
an mvp

00:04:41,040 --> 00:04:45,440
and anytime you make that an mvp being a

00:04:43,199 --> 00:04:46,560
minimum viable product right so anytime

00:04:45,440 --> 00:04:48,720
you go from

00:04:46,560 --> 00:04:50,240
uh the nice little demo wear to

00:04:48,720 --> 00:04:51,840
something that can actually execute

00:04:50,240 --> 00:04:53,520
production workloads on it

00:04:51,840 --> 00:04:55,759
you're gonna encounter some growing

00:04:53,520 --> 00:04:57,600
pains uh so we'll talk a little bit more

00:04:55,759 --> 00:05:00,240
about that here and uh and and

00:04:57,600 --> 00:05:00,639
and also in our talk about crestlet in

00:05:00,240 --> 00:05:05,120
the

00:05:00,639 --> 00:05:08,160
um uh was no sorry the rest day

00:05:05,120 --> 00:05:09,520
event uh but we got going on that it was

00:05:08,160 --> 00:05:11,280
very exciting the team

00:05:09,520 --> 00:05:12,639
got together produced something really

00:05:11,280 --> 00:05:14,720
cool and

00:05:12,639 --> 00:05:16,800
more and more ideas started to percolate

00:05:14,720 --> 00:05:18,320
up and we wrote bindle and then we wrote

00:05:16,800 --> 00:05:20,639
waggy and then we wrote

00:05:18,320 --> 00:05:22,000
an http client library and then we wrote

00:05:20,639 --> 00:05:24,000
and we started writing yo

00:05:22,000 --> 00:05:26,560
awesome and more and more different

00:05:24,000 --> 00:05:27,280
projects uh that got us really kind of

00:05:26,560 --> 00:05:29,039
deeply

00:05:27,280 --> 00:05:31,360
entrenched into the webassembly

00:05:29,039 --> 00:05:32,000
ecosystem and deeply deeply passionate

00:05:31,360 --> 00:05:33,919
about

00:05:32,000 --> 00:05:36,080
the tools and the potential that we were

00:05:33,919 --> 00:05:38,400
seeing there

00:05:36,080 --> 00:05:40,000
so that really tells the story about why

00:05:38,400 --> 00:05:41,520
we care about what we're talking about

00:05:40,000 --> 00:05:42,960
here

00:05:41,520 --> 00:05:44,160
um we want to talk about what we've

00:05:42,960 --> 00:05:45,759
learned what some of the gaps are

00:05:44,160 --> 00:05:46,560
because what we've noticed is that many

00:05:45,759 --> 00:05:48,560
times

00:05:46,560 --> 00:05:49,600
um at these at these wasn't conferences

00:05:48,560 --> 00:05:51,199
everyone is

00:05:49,600 --> 00:05:52,479
looking into the clouds which is a good

00:05:51,199 --> 00:05:53,919
thing that's what we want here this is

00:05:52,479 --> 00:05:56,319
such an exciting area

00:05:53,919 --> 00:05:57,600
but we sometimes forget about the people

00:05:56,319 --> 00:05:59,280
actually trying to implement this

00:05:57,600 --> 00:06:00,800
in the wild west so we wanted to talk

00:05:59,280 --> 00:06:01,919
about the things that people on the

00:06:00,800 --> 00:06:04,160
ground are

00:06:01,919 --> 00:06:05,600
are running into right now and so first

00:06:04,160 --> 00:06:06,000
off we have this saying if it's never

00:06:05,600 --> 00:06:08,319
too late

00:06:06,000 --> 00:06:10,080
to check your cinch if you have never

00:06:08,319 --> 00:06:12,800
ridden horses before

00:06:10,080 --> 00:06:14,000
you have a a saddle that sits on top

00:06:12,800 --> 00:06:15,360
which is obvious but then

00:06:14,000 --> 00:06:17,120
underneath there's a cinch that runs

00:06:15,360 --> 00:06:18,880
through and you always want to check it

00:06:17,120 --> 00:06:20,639
for two reasons because either

00:06:18,880 --> 00:06:22,479
you'll cinch it too tight and your horse

00:06:20,639 --> 00:06:24,560
will pass out on top of you

00:06:22,479 --> 00:06:26,479
or you'll have it too loose and it'll

00:06:24,560 --> 00:06:28,000
slide right to the side or off and

00:06:26,479 --> 00:06:29,680
you'll fall off so both ways you end up

00:06:28,000 --> 00:06:31,600
under a horse and falling off

00:06:29,680 --> 00:06:33,360
so this is kind of our well what did we

00:06:31,600 --> 00:06:35,280
learn in this

00:06:33,360 --> 00:06:37,840
uh in this whole experiment we've done

00:06:35,280 --> 00:06:38,560
and first off is our horse and pony show

00:06:37,840 --> 00:06:40,000
we're gonna do a little bit of

00:06:38,560 --> 00:06:41,440
comparison here so one of the things

00:06:40,000 --> 00:06:42,479
that happens is when people talk about

00:06:41,440 --> 00:06:44,400
waz and they're like

00:06:42,479 --> 00:06:45,919
well and they always hold up a finger

00:06:44,400 --> 00:06:46,240
haven't we tried that before and it's

00:06:45,919 --> 00:06:48,560
like

00:06:46,240 --> 00:06:50,319
yes i mean everything kind of reinvents

00:06:48,560 --> 00:06:51,039
things just every every 10 years we know

00:06:50,319 --> 00:06:52,560
that but

00:06:51,039 --> 00:06:53,919
let's talk about some of the most common

00:06:52,560 --> 00:06:55,280
ones compared to we'll start off with

00:06:53,919 --> 00:06:58,479
the java vm

00:06:55,280 --> 00:06:59,919
the java vm is very tried and true

00:06:58,479 --> 00:07:01,840
and infinitely tweakable and

00:06:59,919 --> 00:07:03,759
configurable people have careers out of

00:07:01,840 --> 00:07:06,319
tweaking the jvm

00:07:03,759 --> 00:07:07,520
however it is very uh let's just put it

00:07:06,319 --> 00:07:11,039
nicely bulky

00:07:07,520 --> 00:07:13,759
uh it takes a lot of

00:07:11,039 --> 00:07:15,520
resources and it's very large so it's

00:07:13,759 --> 00:07:16,319
just kind of bulky and also it's limited

00:07:15,520 --> 00:07:18,000
to a single

00:07:16,319 --> 00:07:20,240
language ecosystem now granted you have

00:07:18,000 --> 00:07:21,440
java you have kotlin you have

00:07:20,240 --> 00:07:23,280
all the different things that run on top

00:07:21,440 --> 00:07:26,160
of the jvm which is great but you're

00:07:23,280 --> 00:07:28,160
still limited to just that ecosystem

00:07:26,160 --> 00:07:30,479
and it's also a little bit of a leaky

00:07:28,160 --> 00:07:32,319
abstraction in that the java libraries

00:07:30,479 --> 00:07:34,639
encompass everything from files and

00:07:32,319 --> 00:07:37,759
networking with no real way to say

00:07:34,639 --> 00:07:39,840
uh you know when i say when the when the

00:07:37,759 --> 00:07:41,680
guest module says i want a file the host

00:07:39,840 --> 00:07:43,120
module can fulfill it this way

00:07:41,680 --> 00:07:44,400
and of course there have been many tools

00:07:43,120 --> 00:07:46,160
written to do that but one of the things

00:07:44,400 --> 00:07:48,160
we liked about web assembly compared to

00:07:46,160 --> 00:07:48,800
java was that web assembly provided some

00:07:48,160 --> 00:07:51,120
of that

00:07:48,800 --> 00:07:52,080
for free right out of the box without

00:07:51,120 --> 00:07:53,599
quite as

00:07:52,080 --> 00:07:58,400
as taylor put it without the sort of

00:07:53,599 --> 00:08:00,240
bulkiness of of java

00:07:58,400 --> 00:08:02,000
containers were another one that we were

00:08:00,240 --> 00:08:03,199
fairly passionate about we've done a lot

00:08:02,000 --> 00:08:06,319
of work in the container

00:08:03,199 --> 00:08:08,160
container ecosystem container system um

00:08:06,319 --> 00:08:09,680
they're more lightweight than java in a

00:08:08,160 --> 00:08:12,639
sense right uh

00:08:09,680 --> 00:08:14,639
particularly a single well-made sort of

00:08:12,639 --> 00:08:17,280
carefully crafted containers you can get

00:08:14,639 --> 00:08:18,960
fairly small ones

00:08:17,280 --> 00:08:20,720
and you can run things written in just

00:08:18,960 --> 00:08:22,479
about any programming language provided

00:08:20,720 --> 00:08:25,280
it meets the operational constraints you

00:08:22,479 --> 00:08:27,360
need to execute a container right

00:08:25,280 --> 00:08:28,879
but cross-platform is hard with

00:08:27,360 --> 00:08:30,879
containers there have been many many

00:08:28,879 --> 00:08:32,159
attempts to do them in different ways

00:08:30,879 --> 00:08:33,599
uh with you know running linux

00:08:32,159 --> 00:08:34,839
containers on windows running windows

00:08:33,599 --> 00:08:37,599
containers on linux

00:08:34,839 --> 00:08:39,440
multi-architecture containers and so on

00:08:37,599 --> 00:08:42,320
but a lot of those require extra build

00:08:39,440 --> 00:08:44,880
steps or other specialized tooling

00:08:42,320 --> 00:08:46,480
and oftentimes also added some

00:08:44,880 --> 00:08:47,200
constraints upon what the developer

00:08:46,480 --> 00:08:49,040
themselves

00:08:47,200 --> 00:08:52,959
themselves had to do in order to make

00:08:49,040 --> 00:08:55,440
this run in the expected ecosystem

00:08:52,959 --> 00:08:56,399
and that brings us to the actual wasm

00:08:55,440 --> 00:08:58,240
run times

00:08:56,399 --> 00:08:59,600
so especially and these are this is

00:08:58,240 --> 00:09:02,880
really in comparison to

00:08:59,600 --> 00:09:03,600
the the java vm and also the also

00:09:02,880 --> 00:09:05,279
containers

00:09:03,600 --> 00:09:07,279
the thing with wasm runtimes is they're

00:09:05,279 --> 00:09:08,480
very lightweight both the runtimes and

00:09:07,279 --> 00:09:09,440
the binaries

00:09:08,480 --> 00:09:12,080
we're going to talk a little bit more

00:09:09,440 --> 00:09:13,600
about that in a second but the binaries

00:09:12,080 --> 00:09:14,640
can be very very small especially in

00:09:13,600 --> 00:09:17,040
comparison

00:09:14,640 --> 00:09:18,640
to a container even well-made containers

00:09:17,040 --> 00:09:20,560
i'm not talking about the

00:09:18,640 --> 00:09:22,240
the nightmare containers that are

00:09:20,560 --> 00:09:23,680
multiple gigabytes i'm talking about

00:09:22,240 --> 00:09:24,959
well-made containers they're still

00:09:23,680 --> 00:09:26,080
smaller than that

00:09:24,959 --> 00:09:28,640
uh the other thing is that it's

00:09:26,080 --> 00:09:30,320
sandboxed by default and so for

00:09:28,640 --> 00:09:31,680
for that for us that's a very important

00:09:30,320 --> 00:09:33,600
thing because you are

00:09:31,680 --> 00:09:35,360
completely locked in without having

00:09:33,600 --> 00:09:36,000
specific what are called capabilities

00:09:35,360 --> 00:09:38,560
granted to

00:09:36,000 --> 00:09:40,560
you to be able to access files or access

00:09:38,560 --> 00:09:43,040
network or whatever it might be

00:09:40,560 --> 00:09:44,720
and was in runtimes are the closest

00:09:43,040 --> 00:09:46,000
thing we've seen in a while to be truly

00:09:44,720 --> 00:09:48,160
cross-platform

00:09:46,000 --> 00:09:49,839
i can build a binary on my mac have it

00:09:48,160 --> 00:09:51,519
run on my windows machine have it run on

00:09:49,839 --> 00:09:53,600
a raspberry pi have it run on

00:09:51,519 --> 00:09:55,200
a linux server in the cloud and i built

00:09:53,600 --> 00:09:56,959
it on a mac there's no changing there's

00:09:55,200 --> 00:09:58,640
no different up like it's just the same

00:09:56,959 --> 00:10:00,959
binary

00:09:58,640 --> 00:10:02,640
and there's also this idea of being able

00:10:00,959 --> 00:10:04,800
to compile from any language without

00:10:02,640 --> 00:10:07,760
additional steps so with docker

00:10:04,800 --> 00:10:08,640
it made developers have to learn the

00:10:07,760 --> 00:10:10,880
intricacies of

00:10:08,640 --> 00:10:12,880
all their dependencies which in one

00:10:10,880 --> 00:10:14,800
sense is good because sometimes in

00:10:12,880 --> 00:10:16,240
in the old-fashioned way of doing things

00:10:14,800 --> 00:10:16,880
developers would just kind of shovel it

00:10:16,240 --> 00:10:19,920
over to

00:10:16,880 --> 00:10:21,519
the ops people but the thing is is devs

00:10:19,920 --> 00:10:23,360
that's not their specialty and sometimes

00:10:21,519 --> 00:10:25,200
there's little nuances that

00:10:23,360 --> 00:10:26,320
that people don't know about unless

00:10:25,200 --> 00:10:26,880
they've done it for a long time or

00:10:26,320 --> 00:10:29,360
that's their

00:10:26,880 --> 00:10:30,800
their specialty and so you have to know

00:10:29,360 --> 00:10:32,079
about that with docker files and

00:10:30,800 --> 00:10:34,160
building a docker image but with the

00:10:32,079 --> 00:10:36,800
wasn't runtime

00:10:34,160 --> 00:10:38,880
as it stands you can just compile into a

00:10:36,800 --> 00:10:41,040
wasm binary there's no special steps

00:10:38,880 --> 00:10:42,399
except specifying a target

00:10:41,040 --> 00:10:44,160
and that obviously depends on the

00:10:42,399 --> 00:10:45,600
language but you can compile straight to

00:10:44,160 --> 00:10:46,880
it instead

00:10:45,600 --> 00:10:49,279
and one of the interesting things about

00:10:46,880 --> 00:10:50,320
webassembly is that it's already a w3

00:10:49,279 --> 00:10:52,240
standard

00:10:50,320 --> 00:10:54,720
and there are already many many run

00:10:52,240 --> 00:10:57,040
times available for web assembly

00:10:54,720 --> 00:10:58,880
uh that all implement consistently the

00:10:57,040 --> 00:11:00,240
same spec with different pros and cons

00:10:58,880 --> 00:11:02,640
and advantages and disadvantages

00:11:00,240 --> 00:11:04,720
to the way it executes it but the same

00:11:02,640 --> 00:11:07,760
webassembly module will run on say wasm

00:11:04,720 --> 00:11:09,360
3 wasmtime and scriptin and so on

00:11:07,760 --> 00:11:11,200
which brought us to our first choice

00:11:09,360 --> 00:11:14,240
right taylor oh yes

00:11:11,200 --> 00:11:16,320
the language so this is always this we

00:11:14,240 --> 00:11:17,839
all know as developers that languages

00:11:16,320 --> 00:11:19,680
generally cause flame wars

00:11:17,839 --> 00:11:21,519
uh we are trying to avoid that here but

00:11:19,680 --> 00:11:23,920
we're just trying to inform like why

00:11:21,519 --> 00:11:24,959
why we decided the way we did and for us

00:11:23,920 --> 00:11:28,079
it came down to be

00:11:24,959 --> 00:11:29,279
a question of rust or javascript

00:11:28,079 --> 00:11:30,640
now that doesn't mean other languages

00:11:29,279 --> 00:11:31,760
can't do it we're going to actually talk

00:11:30,640 --> 00:11:34,320
about that too

00:11:31,760 --> 00:11:36,399
but the idea was with javascript it was

00:11:34,320 --> 00:11:38,000
the first language to do wasm in a real

00:11:36,399 --> 00:11:41,040
quote unquote real way

00:11:38,000 --> 00:11:42,720
it's obviously flexible and very popular

00:11:41,040 --> 00:11:45,200
as the creator of javascript has said

00:11:42,720 --> 00:11:46,560
like bet on bet on javascript i mean and

00:11:45,200 --> 00:11:48,720
wasm he said actually

00:11:46,560 --> 00:11:50,160
but that like there's there's good

00:11:48,720 --> 00:11:51,920
reasons to use javascript it's very

00:11:50,160 --> 00:11:53,680
accessible to people but really

00:11:51,920 --> 00:11:55,120
even with node it's not as good for

00:11:53,680 --> 00:11:56,240
system level development as other

00:11:55,120 --> 00:11:58,560
languages

00:11:56,240 --> 00:12:00,639
rust has the disadvantage of being newer

00:11:58,560 --> 00:12:02,880
and having a still evolving ecosystem

00:12:00,639 --> 00:12:04,160
and therefore not being as popular and

00:12:02,880 --> 00:12:07,040
even if it was as popular it's

00:12:04,160 --> 00:12:08,480
definitely not accessible as javascript

00:12:07,040 --> 00:12:10,240
most of the tooling though on the

00:12:08,480 --> 00:12:12,959
bleeding edge of the wasm space

00:12:10,240 --> 00:12:14,480
is written in rest and it's amazing for

00:12:12,959 --> 00:12:16,560
systems level development with

00:12:14,480 --> 00:12:17,600
really really strict and good safety

00:12:16,560 --> 00:12:20,800
guarantees

00:12:17,600 --> 00:12:22,800
so we chose rust because those

00:12:20,800 --> 00:12:24,079
even though it was less popular and we'd

00:12:22,800 --> 00:12:24,800
have a little bit harder time getting

00:12:24,079 --> 00:12:28,399
people

00:12:24,800 --> 00:12:29,279
um hooked into it it was much better for

00:12:28,399 --> 00:12:31,360
choosing how we did

00:12:29,279 --> 00:12:34,079
our building things for how we were

00:12:31,360 --> 00:12:35,440
going to do and use wasm

00:12:34,079 --> 00:12:36,959
yeah and sort of in the end for us even

00:12:35,440 --> 00:12:38,959
though we chose rust and we use it in

00:12:36,959 --> 00:12:40,240
our major projects we do still do a lot

00:12:38,959 --> 00:12:43,120
with em scriptin and

00:12:40,240 --> 00:12:44,160
and wasm three and other runtimes uh we

00:12:43,120 --> 00:12:45,760
just found that

00:12:44,160 --> 00:12:47,600
our projects we would probably stick to

00:12:45,760 --> 00:12:48,480
rust for the main ones but in the end

00:12:47,600 --> 00:12:50,720
doesn't represent

00:12:48,480 --> 00:12:53,440
any hard feelings or anything like that

00:12:50,720 --> 00:12:54,959
toward any of those other runtimes

00:12:53,440 --> 00:12:56,480
one of the really interesting things

00:12:54,959 --> 00:12:57,839
we've been learning as we've been doing

00:12:56,480 --> 00:13:00,240
web assembly is

00:12:57,839 --> 00:13:02,240
uh is the long path to optimization and

00:13:00,240 --> 00:13:03,600
this is a virtuous long path to

00:13:02,240 --> 00:13:06,480
optimization

00:13:03,600 --> 00:13:07,360
um you know when you the the compiler is

00:13:06,480 --> 00:13:09,600
going to

00:13:07,360 --> 00:13:11,600
mainly just try and transform the source

00:13:09,600 --> 00:13:14,720
code to web assemblies

00:13:11,600 --> 00:13:15,120
uh to bytecodes right uh and so when i

00:13:14,720 --> 00:13:17,519
was

00:13:15,120 --> 00:13:19,040
playing around with swift my first swift

00:13:17,519 --> 00:13:20,160
application when i compiled it to

00:13:19,040 --> 00:13:23,600
webassembly was

00:13:20,160 --> 00:13:24,720
about 9.8 meg which was considerably

00:13:23,600 --> 00:13:26,320
larger than

00:13:24,720 --> 00:13:27,839
most of the other languages i had

00:13:26,320 --> 00:13:30,160
compiled in

00:13:27,839 --> 00:13:31,680
uh so i went about kind of investigating

00:13:30,160 --> 00:13:33,040
the different ways that we could

00:13:31,680 --> 00:13:35,839
optimize this

00:13:33,040 --> 00:13:38,160
and there are many tools out there

00:13:35,839 --> 00:13:41,519
simply running the wasm opt command line

00:13:38,160 --> 00:13:44,320
reduced my binary from 9.8 meg to 4.3

00:13:41,519 --> 00:13:45,760
meg by stripping out pieces of the

00:13:44,320 --> 00:13:47,440
webassembly code that actually weren't

00:13:45,760 --> 00:13:49,440
called or weren't used and doing some

00:13:47,440 --> 00:13:51,680
other optimization passes

00:13:49,440 --> 00:13:52,959
uh to compress down some of the symbols

00:13:51,680 --> 00:13:56,160
and things like that

00:13:52,959 --> 00:13:58,000
so instantly i cut my binary size in

00:13:56,160 --> 00:14:00,639
just over half just by running

00:13:58,000 --> 00:14:02,079
a tool but then we started looking at

00:14:00,639 --> 00:14:03,680
all these various other

00:14:02,079 --> 00:14:05,600
techniques out there and there are

00:14:03,680 --> 00:14:09,120
things like being able to pre-load the

00:14:05,600 --> 00:14:11,040
binary into the runtime to allow you to

00:14:09,120 --> 00:14:12,160
start up to allow you to drop startup

00:14:11,040 --> 00:14:15,199
times from

00:14:12,160 --> 00:14:16,480
maybe 100 milliseconds to just uh

00:14:15,199 --> 00:14:19,519
nanoseconds there are

00:14:16,480 --> 00:14:21,279
fractions of of the amount of time uh

00:14:19,519 --> 00:14:22,959
running in a run time with a jit

00:14:21,279 --> 00:14:26,079
optimizer means we could get

00:14:22,959 --> 00:14:27,680
even faster run times and we're even

00:14:26,079 --> 00:14:28,800
experimenting now with ahead of time

00:14:27,680 --> 00:14:30,560
compilers

00:14:28,800 --> 00:14:32,000
that when we know for example we're

00:14:30,560 --> 00:14:34,560
running in a pas

00:14:32,000 --> 00:14:35,760
kind of circumstance and the uh end user

00:14:34,560 --> 00:14:38,000
has uploaded a

00:14:35,760 --> 00:14:40,720
web assembly binary we know that the

00:14:38,000 --> 00:14:42,639
user's intent is to execute that binary

00:14:40,720 --> 00:14:44,320
on the platform they uploaded it to so

00:14:42,639 --> 00:14:45,040
we can even do ahead of time compiling

00:14:44,320 --> 00:14:47,360
on that

00:14:45,040 --> 00:14:49,279
uh and even achieve further optimization

00:14:47,360 --> 00:14:51,199
and and faster startup time

00:14:49,279 --> 00:14:52,480
and there are even some amazing tools

00:14:51,199 --> 00:14:55,040
that are being developed out there one

00:14:52,480 --> 00:14:57,600
of our current favorites is called wiser

00:14:55,040 --> 00:14:59,600
and this can run the initialization code

00:14:57,600 --> 00:15:01,040
on your webassembly module so basically

00:14:59,600 --> 00:15:03,279
get it all started up

00:15:01,040 --> 00:15:05,360
and then re-freeze it as a webassembly

00:15:03,279 --> 00:15:07,760
module so that the next time you

00:15:05,360 --> 00:15:09,279
you run it it's already initialized and

00:15:07,760 --> 00:15:12,000
you're just running you're just

00:15:09,279 --> 00:15:13,120
diving straight in so there's some tools

00:15:12,000 --> 00:15:14,240
like this that are just sort of

00:15:13,120 --> 00:15:16,560
mind-boggling

00:15:14,240 --> 00:15:18,399
but opens up the possibilities that

00:15:16,560 --> 00:15:20,399
webassembly is presenting us with

00:15:18,399 --> 00:15:22,240
because of the way the format works

00:15:20,399 --> 00:15:23,440
and because of the sort of flexibility

00:15:22,240 --> 00:15:26,399
of the runtimes and the multiple

00:15:23,440 --> 00:15:27,920
implementations of runtimes

00:15:26,399 --> 00:15:29,920
this kind of leads into the idea that

00:15:27,920 --> 00:15:31,839
there are many different ways

00:15:29,920 --> 00:15:33,519
in which you can execute a webassembly

00:15:31,839 --> 00:15:35,120
module so it's not merely a matter of

00:15:33,519 --> 00:15:38,240
how you optimize it

00:15:35,120 --> 00:15:39,759
prior to starting it up but uh

00:15:38,240 --> 00:15:41,360
webassembly is structured in such a way

00:15:39,759 --> 00:15:42,560
that you can run it in a flat out

00:15:41,360 --> 00:15:44,240
interpreter which will

00:15:42,560 --> 00:15:46,399
execute as it reads through the

00:15:44,240 --> 00:15:48,240
webassembly file this is

00:15:46,399 --> 00:15:49,839
excellent if you are working in an

00:15:48,240 --> 00:15:51,920
embedded space and you only want to

00:15:49,839 --> 00:15:53,519
allocate very small chunks of memory as

00:15:51,920 --> 00:15:57,199
you're executing things

00:15:53,519 --> 00:15:58,720
um so wasm 3 which is a

00:15:57,199 --> 00:16:00,880
great interpreter if you're interested

00:15:58,720 --> 00:16:03,759
in running in arduinos or

00:16:00,880 --> 00:16:05,440
other limited space devices it uses this

00:16:03,759 --> 00:16:08,160
interpretation model

00:16:05,440 --> 00:16:10,160
but for when we're optimizing for speed

00:16:08,160 --> 00:16:10,639
we often want to go one step further and

00:16:10,160 --> 00:16:13,759
look at

00:16:10,639 --> 00:16:15,360
a jit style compiler where as it's

00:16:13,759 --> 00:16:17,360
reading in the byte codes it's compiling

00:16:15,360 --> 00:16:17,759
it into an intermediate representation

00:16:17,360 --> 00:16:20,480
that

00:16:17,759 --> 00:16:20,959
then might take more memory and might

00:16:20,480 --> 00:16:23,040
consume

00:16:20,959 --> 00:16:24,079
more cpu and other resources as it's

00:16:23,040 --> 00:16:28,000
ramping up

00:16:24,079 --> 00:16:29,519
uh it tends to execute much faster

00:16:28,000 --> 00:16:31,759
and then i think i mentioned on the last

00:16:29,519 --> 00:16:32,079
slide even now we're looking at ahead of

00:16:31,759 --> 00:16:34,560
time

00:16:32,079 --> 00:16:35,199
compilers wasm time now includes a with

00:16:34,560 --> 00:16:38,160
i think

00:16:35,199 --> 00:16:40,079
26 now includes an ahead of time

00:16:38,160 --> 00:16:41,600
compiler so you can even pre-compile

00:16:40,079 --> 00:16:42,720
some of this stuff which even speeds

00:16:41,600 --> 00:16:44,240
things up further

00:16:42,720 --> 00:16:45,839
at the cost of having to have storage

00:16:44,240 --> 00:16:47,759
and also at the cost of sort of having

00:16:45,839 --> 00:16:49,279
to bind it to one particular run time as

00:16:47,759 --> 00:16:51,440
you're executing or one particular

00:16:49,279 --> 00:16:53,759
family of run times right

00:16:51,440 --> 00:16:55,440
but again if if you're willing to make

00:16:53,759 --> 00:16:57,440
that trade off for speed

00:16:55,440 --> 00:16:58,720
ahead of time compiling might be the the

00:16:57,440 --> 00:17:00,560
fastest object

00:16:58,720 --> 00:17:02,320
but the thing that we really appreciate

00:17:00,560 --> 00:17:03,839
about this is the developer never has to

00:17:02,320 --> 00:17:05,839
be concerned with whether it's running

00:17:03,839 --> 00:17:08,240
in an interpreter a jet environment

00:17:05,839 --> 00:17:09,199
an ahead of time compile environment or

00:17:08,240 --> 00:17:11,360
whatnot

00:17:09,199 --> 00:17:12,880
the developer simply writes their code

00:17:11,360 --> 00:17:14,319
and compiles it

00:17:12,880 --> 00:17:16,079
and something else can optimize

00:17:14,319 --> 00:17:17,360
something else can tweak and tune and

00:17:16,079 --> 00:17:19,120
something else can run it and the

00:17:17,360 --> 00:17:19,600
developer can be blissfully unaware of

00:17:19,120 --> 00:17:22,319
that

00:17:19,600 --> 00:17:24,160
we like that because that tends to

00:17:22,319 --> 00:17:25,839
alleviate the kind of operational

00:17:24,160 --> 00:17:27,919
decisions from the developers

00:17:25,839 --> 00:17:28,960
plate while at the same time giving the

00:17:27,919 --> 00:17:30,799
operations staff

00:17:28,960 --> 00:17:33,840
all kinds of options for how they'd like

00:17:30,799 --> 00:17:33,840
to execute something

00:17:35,600 --> 00:17:39,280
so the last thing uh in our learnings

00:17:38,480 --> 00:17:41,679
section is

00:17:39,280 --> 00:17:43,280
around the wazi spec so this is really

00:17:41,679 --> 00:17:44,799
important to us so we consider wazi to

00:17:43,280 --> 00:17:47,280
be the future of wasm now that isn't

00:17:44,799 --> 00:17:49,039
meant to be a technical declaration

00:17:47,280 --> 00:17:50,400
more a community declaration we'll talk

00:17:49,039 --> 00:17:53,200
about that a little bit but

00:17:50,400 --> 00:17:55,280
it gives us a common interface that any

00:17:53,200 --> 00:17:57,520
wasm project can then build on

00:17:55,280 --> 00:17:59,120
so these can be possible posix-like or

00:17:57,520 --> 00:18:01,600
libsy-like apis

00:17:59,120 --> 00:18:02,960
common abstractions for passing data now

00:18:01,600 --> 00:18:04,960
the thing is is it is still

00:18:02,960 --> 00:18:06,880
very very much in flex but progress is

00:18:04,960 --> 00:18:07,679
being made we're adding streams we're

00:18:06,880 --> 00:18:09,919
adding

00:18:07,679 --> 00:18:11,840
um starting at least experiments with

00:18:09,919 --> 00:18:13,120
something called nanoprocesses

00:18:11,840 --> 00:18:15,520
all these things are very important but

00:18:13,120 --> 00:18:18,799
for us the most important thing

00:18:15,520 --> 00:18:20,320
is just being able to do this in a way

00:18:18,799 --> 00:18:22,799
that allows people to extend

00:18:20,320 --> 00:18:24,320
and build on top of a great foundation

00:18:22,799 --> 00:18:25,440
which kind of leads into

00:18:24,320 --> 00:18:27,280
some of the next things we're going to

00:18:25,440 --> 00:18:28,000
talk about so our next topic we're

00:18:27,280 --> 00:18:30,000
calling

00:18:28,000 --> 00:18:31,520
keep your butt in the saddle uh now that

00:18:30,000 --> 00:18:34,080
is a phrase that i hear uh

00:18:31,520 --> 00:18:35,520
my wife does horse uh horsemanship stuff

00:18:34,080 --> 00:18:36,080
and that's a phrase you hear all the

00:18:35,520 --> 00:18:37,679
time

00:18:36,080 --> 00:18:39,440
it sounds like something stupid but

00:18:37,679 --> 00:18:40,799
sometimes you forget to keep yourself in

00:18:39,440 --> 00:18:42,320
the saddle and if you get out of the

00:18:40,799 --> 00:18:44,559
saddle or out of place

00:18:42,320 --> 00:18:45,440
your horse will ride poorly and you can

00:18:44,559 --> 00:18:47,360
fall out

00:18:45,440 --> 00:18:49,520
so this is kind of our discussion of how

00:18:47,360 --> 00:18:50,000
we can avoid the gap and to kick it off

00:18:49,520 --> 00:18:52,080
i want to

00:18:50,000 --> 00:18:53,039
to talk about something that is very

00:18:52,080 --> 00:18:54,960
close to

00:18:53,039 --> 00:18:56,400
what the last thing was around the wazi

00:18:54,960 --> 00:18:58,480
spec is around community

00:18:56,400 --> 00:19:00,799
fracturing and this is a potential gap

00:18:58,480 --> 00:19:03,360
that is very serious for us so

00:19:00,799 --> 00:19:04,320
in general there's an unevenness across

00:19:03,360 --> 00:19:06,240
all these different

00:19:04,320 --> 00:19:08,559
wasm implementations there's various run

00:19:06,240 --> 00:19:11,679
times and protocols we have wasmtime

00:19:08,559 --> 00:19:13,039
wasmer wapi-c and wasmcloud there's

00:19:11,679 --> 00:19:15,679
witix bindings

00:19:13,039 --> 00:19:16,400
there's other projects like suborbital

00:19:15,679 --> 00:19:19,200
and the thing is

00:19:16,400 --> 00:19:21,039
each project has its own buy-in you have

00:19:19,200 --> 00:19:22,240
to use their custom libraries and their

00:19:21,039 --> 00:19:24,559
custom things

00:19:22,240 --> 00:19:26,640
and really there's no major community

00:19:24,559 --> 00:19:28,400
found community or foundation to use as

00:19:26,640 --> 00:19:29,440
a gathering place or a watering hole

00:19:28,400 --> 00:19:32,080
shall we say

00:19:29,440 --> 00:19:33,360
um given the theme of this stock uh

00:19:32,080 --> 00:19:35,520
there there's no

00:19:33,360 --> 00:19:37,520
community place for us to just talk

00:19:35,520 --> 00:19:38,000
these things over so where we want to be

00:19:37,520 --> 00:19:39,919
with this

00:19:38,000 --> 00:19:42,000
and this this is meant to show the gap

00:19:39,919 --> 00:19:43,760
as we would like common specifications

00:19:42,000 --> 00:19:45,360
with various implementations that people

00:19:43,760 --> 00:19:48,000
can build around them

00:19:45,360 --> 00:19:49,280
um we would like to have less lock-in to

00:19:48,000 --> 00:19:51,280
custom libraries

00:19:49,280 --> 00:19:52,640
and we want a better community

00:19:51,280 --> 00:19:56,080
collaboration meeting

00:19:52,640 --> 00:19:57,600
foundation space to do this our opinion

00:19:56,080 --> 00:19:59,919
and all of this is that we're better

00:19:57,600 --> 00:20:01,600
together is if we can work together like

00:19:59,919 --> 00:20:03,120
we know that there's going to be things

00:20:01,600 --> 00:20:05,120
there's there's competitors working

00:20:03,120 --> 00:20:05,600
together to build this but we don't have

00:20:05,120 --> 00:20:07,280
to

00:20:05,600 --> 00:20:08,880
like this foundation doesn't have to be

00:20:07,280 --> 00:20:10,320
something we compete over or to create

00:20:08,880 --> 00:20:12,159
competing standards

00:20:10,320 --> 00:20:13,600
and the thing we worry about as we've

00:20:12,159 --> 00:20:14,640
observed things we worry the community

00:20:13,600 --> 00:20:17,280
is trying to do everything

00:20:14,640 --> 00:20:18,640
right now in fracture which will cause

00:20:17,280 --> 00:20:20,799
lots of problems in the future so we

00:20:18,640 --> 00:20:22,640
would prefer to be where what we kind of

00:20:20,799 --> 00:20:24,559
listed in this right column

00:20:22,640 --> 00:20:26,080
and in a moment we will come back and

00:20:24,559 --> 00:20:26,720
talk a little bit about where we see

00:20:26,080 --> 00:20:30,240
wazi

00:20:26,720 --> 00:20:32,000
on this particular uh

00:20:30,240 --> 00:20:33,520
where we see its role in this ecosystem

00:20:32,000 --> 00:20:34,080
because we do believe that the wazi

00:20:33,520 --> 00:20:36,240
specification

00:20:34,080 --> 00:20:37,440
may be sort of the key to help tie this

00:20:36,240 --> 00:20:39,120
all together

00:20:37,440 --> 00:20:40,480
but but before we go there we want to

00:20:39,120 --> 00:20:42,400
talk about another thing

00:20:40,480 --> 00:20:43,840
that is actually very near and dear to

00:20:42,400 --> 00:20:44,799
our hearts which is the developer

00:20:43,840 --> 00:20:48,400
experience

00:20:44,799 --> 00:20:48,960
uh to us we we feel like at the end of

00:20:48,400 --> 00:20:50,960
the day

00:20:48,960 --> 00:20:52,960
uh developers are going to use the tools

00:20:50,960 --> 00:20:54,799
that they feel the most comfortable with

00:20:52,960 --> 00:20:56,799
and the tools that we use as developers

00:20:54,799 --> 00:20:58,400
today they could use improvement

00:20:56,799 --> 00:21:00,240
always they could use improvement right

00:20:58,400 --> 00:21:01,440
so we want to be part of that story of

00:21:00,240 --> 00:21:04,080
how we improve

00:21:01,440 --> 00:21:05,600
uh the the average experience of

00:21:04,080 --> 00:21:08,320
creating code that can run

00:21:05,600 --> 00:21:09,919
in this kind of cloud native ecosystem

00:21:08,320 --> 00:21:11,840
so where we are today uh

00:21:09,919 --> 00:21:13,600
we see a lot of work in order to

00:21:11,840 --> 00:21:15,120
bootstrap environments and in order to

00:21:13,600 --> 00:21:17,280
get objects imported into

00:21:15,120 --> 00:21:18,799
assembly runtimes and so on we see a lot

00:21:17,280 --> 00:21:21,200
of work with custom

00:21:18,799 --> 00:21:23,200
bindings and annotations each of which

00:21:21,200 --> 00:21:25,200
matches its specific little platform

00:21:23,200 --> 00:21:27,039
like we talked about on the last slide

00:21:25,200 --> 00:21:28,559
a lot of work with sort of like bespoke

00:21:27,039 --> 00:21:30,080
tool chains where you've got to line up

00:21:28,559 --> 00:21:31,600
you need these four things

00:21:30,080 --> 00:21:33,120
you need to execute them in this order

00:21:31,600 --> 00:21:34,480
but if you're writing for that platform

00:21:33,120 --> 00:21:36,159
you need these six things and you need

00:21:34,480 --> 00:21:38,960
to execute them like this

00:21:36,159 --> 00:21:39,760
um a lot of stuff that just becomes

00:21:38,960 --> 00:21:41,919
developer

00:21:39,760 --> 00:21:43,679
cognitive overhead you've got to do all

00:21:41,919 --> 00:21:45,200
of these different steps before you can

00:21:43,679 --> 00:21:48,960
run your application

00:21:45,200 --> 00:21:50,480
uh one of one of my call my boss brandon

00:21:48,960 --> 00:21:52,000
burns was recently saying

00:21:50,480 --> 00:21:53,840
i just wanted to you know create my

00:21:52,000 --> 00:21:55,679
first webassembly module and i had to go

00:21:53,840 --> 00:21:57,360
through so many steps

00:21:55,679 --> 00:21:58,720
just to create hello world that it was

00:21:57,360 --> 00:22:00,320
really frustrating

00:21:58,720 --> 00:22:01,919
even though it was so exciting to then

00:22:00,320 --> 00:22:03,280
have this binary that i could use in all

00:22:01,919 --> 00:22:05,120
these different environments that's the

00:22:03,280 --> 00:22:08,480
kind of experience that we want to

00:22:05,120 --> 00:22:10,240
alleviate right uh and then what we're

00:22:08,480 --> 00:22:12,320
seeing is the very beginning of an

00:22:10,240 --> 00:22:13,760
emergence of set of sets of tools that

00:22:12,320 --> 00:22:14,559
will be able to do this we've worked on

00:22:13,760 --> 00:22:16,720
one called

00:22:14,559 --> 00:22:17,600
yowasum which is a yeoman generator for

00:22:16,720 --> 00:22:19,200
web assembly

00:22:17,600 --> 00:22:20,880
where it'll walk you through the process

00:22:19,200 --> 00:22:22,320
of saying yeah i want a c

00:22:20,880 --> 00:22:24,080
project that will compile the

00:22:22,320 --> 00:22:24,720
webassembly and i want to use github

00:22:24,080 --> 00:22:26,799
actions

00:22:24,720 --> 00:22:28,559
and i want to push my resulting artifact

00:22:26,799 --> 00:22:30,240
here and then it'll scaffold everything

00:22:28,559 --> 00:22:31,760
out and set up vs code so that you have

00:22:30,240 --> 00:22:34,960
a nice pretty environment

00:22:31,760 --> 00:22:36,400
the wash cli for wasm cloud we're very

00:22:34,960 --> 00:22:39,120
excited about because

00:22:36,400 --> 00:22:40,159
uh that ecosystem has gone from very

00:22:39,120 --> 00:22:42,880
much the nine

00:22:40,159 --> 00:22:43,600
steps to from development to running a

00:22:42,880 --> 00:22:45,600
test

00:22:43,600 --> 00:22:47,200
down to this nice little cli experience

00:22:45,600 --> 00:22:49,039
where you can run a cli

00:22:47,200 --> 00:22:50,720
interactively and it'll help you

00:22:49,039 --> 00:22:52,080
bootstrap everything and get it running

00:22:50,720 --> 00:22:52,880
and you can instrument your running

00:22:52,080 --> 00:22:54,960
process

00:22:52,880 --> 00:22:56,080
so we are seeing things start to move in

00:22:54,960 --> 00:22:58,159
the right direction

00:22:56,080 --> 00:22:59,840
but we want to be even further right we

00:22:58,159 --> 00:23:02,799
want this kind of

00:22:59,840 --> 00:23:04,720
one step where you say all right build

00:23:02,799 --> 00:23:06,480
and deploy this thing and it builds it

00:23:04,720 --> 00:23:08,720
signs it pushes it and then the next

00:23:06,480 --> 00:23:10,240
thing you know you're you know

00:23:08,720 --> 00:23:11,760
checking out the results of your work to

00:23:10,240 --> 00:23:13,600
see if it all looks good

00:23:11,760 --> 00:23:15,679
uh we do think that there is room in

00:23:13,600 --> 00:23:17,200
here for code generating particularly as

00:23:15,679 --> 00:23:18,159
we start seeing multiple language

00:23:17,200 --> 00:23:20,400
support

00:23:18,159 --> 00:23:22,080
um where you might want to be able to

00:23:20,400 --> 00:23:24,080
very quickly say okay

00:23:22,080 --> 00:23:25,919
i want the same functionality in c that

00:23:24,080 --> 00:23:28,240
i had over here in rest or that i had

00:23:25,919 --> 00:23:29,679
over there in assembly script or whatnot

00:23:28,240 --> 00:23:31,919
and then finally we want to be able to

00:23:29,679 --> 00:23:35,120
compile a webassembly binary

00:23:31,919 --> 00:23:37,280
as easily as a normal binary and

00:23:35,120 --> 00:23:38,159
some environments like rust i feel like

00:23:37,280 --> 00:23:40,320
make this

00:23:38,159 --> 00:23:42,159
trivially easy while others the

00:23:40,320 --> 00:23:44,559
compilation process still needs a little

00:23:42,159 --> 00:23:47,120
more tweaking before it feels quite as

00:23:44,559 --> 00:23:50,159
native and quick as it does in rust or

00:23:47,120 --> 00:23:52,159
or maybe assembly script

00:23:50,159 --> 00:23:54,559
now as uh matt mentioned we're going to

00:23:52,159 --> 00:23:57,039
talk a little bit more about wazi so

00:23:54,559 --> 00:23:57,760
um where do we where are we at with wazi

00:23:57,039 --> 00:23:59,760
so

00:23:57,760 --> 00:24:01,440
um in case you we haven't mentioned it

00:23:59,760 --> 00:24:03,120
yet wazi is the webassembly systems

00:24:01,440 --> 00:24:04,080
interface it's kind of this main spec

00:24:03,120 --> 00:24:05,919
that we were mentioning

00:24:04,080 --> 00:24:08,640
and where we're at right now is that

00:24:05,919 --> 00:24:10,320
networking is kind of a mishmash of

00:24:08,640 --> 00:24:12,240
stopgap solutions including

00:24:10,320 --> 00:24:13,520
mission one something in that mishmash

00:24:12,240 --> 00:24:16,559
is something we wrote

00:24:13,520 --> 00:24:19,760
um that's our wazi experimental http

00:24:16,559 --> 00:24:21,760
uh that allows us to get some sort of

00:24:19,760 --> 00:24:24,400
http support there's this current

00:24:21,760 --> 00:24:24,799
ongoing streams versus posix debates

00:24:24,400 --> 00:24:27,919
that

00:24:24,799 --> 00:24:28,640
that is uh kind of the current uh i

00:24:27,919 --> 00:24:30,400
guess

00:24:28,640 --> 00:24:33,039
topic of discussion inside of these

00:24:30,400 --> 00:24:35,600
meetings inside the w3c group

00:24:33,039 --> 00:24:36,559
subgroup and also concurrent tasks and

00:24:35,600 --> 00:24:38,559
nano processes

00:24:36,559 --> 00:24:40,240
are there's some solid design ideas but

00:24:38,559 --> 00:24:41,120
they're still just an idea there's only

00:24:40,240 --> 00:24:43,360
a few kind of

00:24:41,120 --> 00:24:44,320
very very experimental implementations

00:24:43,360 --> 00:24:45,919
and ideas

00:24:44,320 --> 00:24:47,600
so where we want to be and this is kind

00:24:45,919 --> 00:24:50,720
of a in a year because

00:24:47,600 --> 00:24:52,799
ideally we want everything to be uh

00:24:50,720 --> 00:24:54,960
all all in place and a wonderful 1.0

00:24:52,799 --> 00:24:57,440
spec but where we want to be in a year

00:24:54,960 --> 00:24:59,520
is a working stream implementation which

00:24:57,440 --> 00:25:00,159
allows for flexible extensions on top so

00:24:59,520 --> 00:25:02,080
for i o

00:25:00,159 --> 00:25:04,000
networking all those things and we would

00:25:02,080 --> 00:25:05,200
like an initial nano processors

00:25:04,000 --> 00:25:07,039
implementation

00:25:05,200 --> 00:25:08,799
so that's kind of where we'd like to be

00:25:07,039 --> 00:25:11,120
at in about a year

00:25:08,799 --> 00:25:12,720
that streams the i o streams i o array

00:25:11,120 --> 00:25:14,320
work that that is happening under the

00:25:12,720 --> 00:25:16,480
streams kind of idea

00:25:14,320 --> 00:25:17,679
is what really opens us up to being able

00:25:16,480 --> 00:25:20,080
to uh

00:25:17,679 --> 00:25:21,919
to write guest modules that rely on

00:25:20,080 --> 00:25:24,240
resources outside of them

00:25:21,919 --> 00:25:25,520
and we can write very convenient apis so

00:25:24,240 --> 00:25:27,200
we can very quickly

00:25:25,520 --> 00:25:29,039
write things like key value storage

00:25:27,200 --> 00:25:31,520
drivers database drivers

00:25:29,039 --> 00:25:33,120
file system implementations and so on so

00:25:31,520 --> 00:25:35,440
if we can get there in a year

00:25:33,120 --> 00:25:36,320
then we feel like we've really unblocked

00:25:35,440 --> 00:25:38,159
kind of the key

00:25:36,320 --> 00:25:39,679
bit of potential that is currently sort

00:25:38,159 --> 00:25:41,039
of locked up in the webassembly

00:25:39,679 --> 00:25:42,880
ecosystem and is that

00:25:41,039 --> 00:25:44,480
is accounting for a lot of what we're

00:25:42,880 --> 00:25:46,880
currently seeing as fracturing in the

00:25:44,480 --> 00:25:47,679
ecosystem so we're optimistic that that

00:25:46,880 --> 00:25:49,360
could

00:25:47,679 --> 00:25:51,039
really sort of re-level the playing

00:25:49,360 --> 00:25:52,159
field and get everybody excited about

00:25:51,039 --> 00:25:54,480
building together

00:25:52,159 --> 00:25:57,200
instead of each separate project having

00:25:54,480 --> 00:25:58,400
to kind of build their own thing

00:25:57,200 --> 00:25:59,840
so we'll go ahead and whisk through

00:25:58,400 --> 00:26:01,039
these last two points just because

00:25:59,840 --> 00:26:02,720
they're relatively quick so we can

00:26:01,039 --> 00:26:03,520
finish up with why we're excited about

00:26:02,720 --> 00:26:05,600
all this

00:26:03,520 --> 00:26:07,120
so one of the things is guest languages

00:26:05,600 --> 00:26:08,799
uh there's really only five

00:26:07,120 --> 00:26:10,400
and of those if we're being honest like

00:26:08,799 --> 00:26:11,200
the ones that people use in production

00:26:10,400 --> 00:26:14,720
there's three of them

00:26:11,200 --> 00:26:16,400
rust c and swift and the others kind of

00:26:14,720 --> 00:26:17,760
have they can build wasm for the web but

00:26:16,400 --> 00:26:20,799
they don't really build

00:26:17,760 --> 00:26:21,279
uh wasm for uh like wazi compatible

00:26:20,799 --> 00:26:22,880
things

00:26:21,279 --> 00:26:24,320
so where we would like to be in a year

00:26:22,880 --> 00:26:26,400
again is that we'd like to have

00:26:24,320 --> 00:26:28,880
uh first like native level support in c

00:26:26,400 --> 00:26:30,880
sharp python go and java some like the

00:26:28,880 --> 00:26:32,640
big names in enterprise

00:26:30,880 --> 00:26:34,159
uh development just so people can have

00:26:32,640 --> 00:26:36,000
an easy target

00:26:34,159 --> 00:26:37,679
and then i still want pearl but you know

00:26:36,000 --> 00:26:38,000
it's oh yeah everyone wants pearl we

00:26:37,679 --> 00:26:41,360
love

00:26:38,000 --> 00:26:42,720
pearl and then the last thing we have is

00:26:41,360 --> 00:26:46,000
storing and sharing so

00:26:42,720 --> 00:26:46,799
right now to store a webassembly binary

00:26:46,000 --> 00:26:49,039
we use

00:26:46,799 --> 00:26:50,720
oci there's a wasm to oci tool that

00:26:49,039 --> 00:26:51,840
allows you to store inside a container

00:26:50,720 --> 00:26:53,600
registry

00:26:51,840 --> 00:26:55,039
we have our oci distribution crate we've

00:26:53,600 --> 00:26:56,320
written in rust there's other object

00:26:55,039 --> 00:26:58,320
stores people have used

00:26:56,320 --> 00:27:00,159
and other companies like glue that have

00:26:58,320 --> 00:27:02,159
created their own custom registries

00:27:00,159 --> 00:27:04,320
but really where we want to be is to

00:27:02,159 --> 00:27:05,360
have better oc oci support we know that

00:27:04,320 --> 00:27:08,080
we can never escape

00:27:05,360 --> 00:27:09,919
like having oci support in specific

00:27:08,080 --> 00:27:12,000
places in the cloud native ecosystem

00:27:09,919 --> 00:27:13,520
but also something like bindle our

00:27:12,000 --> 00:27:15,039
aggregate object storage engine we've

00:27:13,520 --> 00:27:15,919
worked on now obviously we're biased

00:27:15,039 --> 00:27:18,320
towards that but

00:27:15,919 --> 00:27:19,600
it's something along the lines of how we

00:27:18,320 --> 00:27:20,880
would like it to work in the future

00:27:19,600 --> 00:27:21,840
which you can check it out by clicking

00:27:20,880 --> 00:27:23,440
on the link there

00:27:21,840 --> 00:27:24,640
so those are the gaps we've seen but we

00:27:23,440 --> 00:27:27,679
really just want to close with our

00:27:24,640 --> 00:27:27,679
excitement for this

00:27:28,000 --> 00:27:32,880
yeah uh the reason that the things that

00:27:31,039 --> 00:27:35,039
got us excited about this when we first

00:27:32,880 --> 00:27:37,200
looked at them at vancouver

00:27:35,039 --> 00:27:38,799
uh you know a couple of years ago are

00:27:37,200 --> 00:27:39,919
still the things that we are really

00:27:38,799 --> 00:27:42,240
excited about

00:27:39,919 --> 00:27:43,360
we see here the the potential to have a

00:27:42,240 --> 00:27:46,960
secure

00:27:43,360 --> 00:27:47,600
lightweight vm language vm uh that is

00:27:46,960 --> 00:27:50,240
portable

00:27:47,600 --> 00:27:52,320
and that ultimately with just a little

00:27:50,240 --> 00:27:54,240
more work we'll deliver a really really

00:27:52,320 --> 00:27:56,799
solid developer story

00:27:54,240 --> 00:27:58,720
uh we feel we know we all need to work

00:27:56,799 --> 00:28:00,799
together and it's exciting to see the

00:27:58,720 --> 00:28:01,520
community sort of starting to form ad

00:28:00,799 --> 00:28:04,720
hoc

00:28:01,520 --> 00:28:06,960
and uh common patterns emerging

00:28:04,720 --> 00:28:09,200
uh largely the people in the web

00:28:06,960 --> 00:28:10,880
assembly ecosystem we all know we've all

00:28:09,200 --> 00:28:11,520
done this before and we're all going

00:28:10,880 --> 00:28:13,840
okay

00:28:11,520 --> 00:28:16,240
we know that if we start working

00:28:13,840 --> 00:28:18,080
together and sharing information

00:28:16,240 --> 00:28:20,320
it's going to make everything easier for

00:28:18,080 --> 00:28:21,840
us everything easier for our users

00:28:20,320 --> 00:28:23,440
and ultimately you know that kind of

00:28:21,840 --> 00:28:24,399
translates to an ecosystem that's

00:28:23,440 --> 00:28:26,640
inviting

00:28:24,399 --> 00:28:30,320
and approachable for new developers or

00:28:26,640 --> 00:28:30,960
new developers in this space yeah and

00:28:30,320 --> 00:28:32,720
really like

00:28:30,960 --> 00:28:34,159
there's a gap here that we can fill

00:28:32,720 --> 00:28:36,559
because there's not

00:28:34,159 --> 00:28:38,000
that we don't have this nice portability

00:28:36,559 --> 00:28:40,240
with a very small footprint it just

00:28:38,000 --> 00:28:42,399
doesn't exist yet and that's such a

00:28:40,240 --> 00:28:43,760
big gap in the cloud native ecosystem

00:28:42,399 --> 00:28:44,000
that would make a lot of people very

00:28:43,760 --> 00:28:45,760
very

00:28:44,000 --> 00:28:47,120
happy combined with that developer

00:28:45,760 --> 00:28:48,640
experience and also

00:28:47,120 --> 00:28:50,080
this is kind of our call to action just

00:28:48,640 --> 00:28:51,440
help us gather the wagons this

00:28:50,080 --> 00:28:53,279
conference is a good first step it

00:28:51,440 --> 00:28:55,360
allows us to talk about these things

00:28:53,279 --> 00:28:56,880
with with people who want to have these

00:28:55,360 --> 00:28:59,520
features we've talked about

00:28:56,880 --> 00:29:01,039
but as if our invitation is to join into

00:28:59,520 --> 00:29:03,360
this community and help out

00:29:01,039 --> 00:29:05,120
so that we can get uh wasm to the point

00:29:03,360 --> 00:29:07,600
where it's accessible for everyone

00:29:05,120 --> 00:29:08,480
and that we can get these features yeah

00:29:07,600 --> 00:29:10,000
and there are places like the

00:29:08,480 --> 00:29:11,679
webassembly discord

00:29:10,000 --> 00:29:13,840
server is a great place to get connected

00:29:11,679 --> 00:29:15,600
with people as are you know the various

00:29:13,840 --> 00:29:16,240
issue cues on the various projects and

00:29:15,600 --> 00:29:18,080
of course

00:29:16,240 --> 00:29:20,080
you're more than welcome to reach out to

00:29:18,080 --> 00:29:22,080
taylor and i and the other people on our

00:29:20,080 --> 00:29:23,840
team because we are passionate about

00:29:22,080 --> 00:29:25,679
getting this community uh sort of

00:29:23,840 --> 00:29:28,000
rallied around the wagons circled

00:29:25,679 --> 00:29:29,919
and doing some really interesting cool

00:29:28,000 --> 00:29:32,000
things over the next few years as we see

00:29:29,919 --> 00:29:34,240
this ecosystem go from

00:29:32,000 --> 00:29:35,760
uh you know some fancy ideas to

00:29:34,240 --> 00:29:36,399
something that we think is just going to

00:29:35,760 --> 00:29:39,679
be

00:29:36,399 --> 00:29:42,320
a a lovely experience for developers and

00:29:39,679 --> 00:29:44,320
a powerful experience for operators

00:29:42,320 --> 00:29:46,240
so thank you very much for coming today

00:29:44,320 --> 00:29:47,840
and please again reach out to us if you

00:29:46,240 --> 00:29:51,120
have questions comments or just want to

00:29:47,840 --> 00:29:51,120

YouTube URL: https://www.youtube.com/watch?v=qfF2O8-8YAQ


