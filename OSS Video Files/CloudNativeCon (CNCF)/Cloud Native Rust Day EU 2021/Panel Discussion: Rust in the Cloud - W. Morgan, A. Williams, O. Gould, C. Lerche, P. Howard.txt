Title: Panel Discussion: Rust in the Cloud - W. Morgan, A. Williams, O. Gould, C. Lerche, P. Howard
Publication date: 2021-05-03
Playlist: Cloud Native Rust Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Panel Discussion: Rust in the Cloud - Moderated by William Morgan, Buoyant; Ashely Williams, Rust Foundation; Oliver Gould, Buoyant; Carl Lerche, Amazon; Paul Howard, Arm

Speakers: Paul Howard, Ashley Williams, Oliver Gould, Carl Lerche
In this discussion, panelists from several areas in the intersection of the Rust and Cloud Native communities will discuss what's next for the Rust in the cloud. Questions will cover both social and community aspects (e.g. the parallels between cloud native and Rust community ethos), the technical (e.g. the introduction of async/await), and the subjective (e.g. is there anything else Rust needs in order to be successful in the cloud space?).
Captions: 
	00:00:00,080 --> 00:00:03,520
everyone thanks for joining us today for

00:00:02,080 --> 00:00:06,080
the rust in the cloud

00:00:03,520 --> 00:00:06,640
panel discussion at the cloud native

00:00:06,080 --> 00:00:10,639
rust

00:00:06,640 --> 00:00:13,360
day i'm your moderator

00:00:10,639 --> 00:00:14,880
william morgan i'm joined by a panel of

00:00:13,360 --> 00:00:18,080
illustrious

00:00:14,880 --> 00:00:19,279
illustrious rust experts and i would

00:00:18,080 --> 00:00:21,520
at this point like to ask them to

00:00:19,279 --> 00:00:24,000
introduce themselves uh going from

00:00:21,520 --> 00:00:26,000
left to right in alphabetical order by

00:00:24,000 --> 00:00:28,560
first name

00:00:26,000 --> 00:00:30,560
nice i think that means i'm first my

00:00:28,560 --> 00:00:30,880
name is ashley williams i'm currently

00:00:30,560 --> 00:00:32,480
the

00:00:30,880 --> 00:00:34,320
interim executive director at the rust

00:00:32,480 --> 00:00:36,160
foundation i'm also a member of the russ

00:00:34,320 --> 00:00:38,320
core team and

00:00:36,160 --> 00:00:40,719
have participated in almost it feels

00:00:38,320 --> 00:00:42,960
like all the rust teams at some point

00:00:40,719 --> 00:00:44,079
um but for i guess the purposes of this

00:00:42,960 --> 00:00:47,680
panel i

00:00:44,079 --> 00:00:49,680
uh i used to work at cloudflare um

00:00:47,680 --> 00:00:52,480
and i'm very interested in web assembly

00:00:49,680 --> 00:00:52,480
and serverless

00:00:53,039 --> 00:00:57,360
carl yep and i'm carl lerch i'm a

00:00:56,239 --> 00:01:00,960
principal engineer

00:00:57,360 --> 00:01:03,520
at amazon web services and i've

00:01:00,960 --> 00:01:05,040
worked on tokyo in the asynchronous

00:01:03,520 --> 00:01:07,439
runtime for the rust programming

00:01:05,040 --> 00:01:11,280
language

00:01:07,439 --> 00:01:13,920
paul oliver sorry ah it's fine um

00:01:11,280 --> 00:01:14,960
i'm oliver gould i'm the cto at a

00:01:13,920 --> 00:01:17,119
company called buoyant

00:01:14,960 --> 00:01:19,439
um where we work mostly where i work

00:01:17,119 --> 00:01:20,640
mostly on linkedin it's a cncf project

00:01:19,439 --> 00:01:23,680
that we created

00:01:20,640 --> 00:01:26,240
about five years ago now um and this

00:01:23,680 --> 00:01:28,159
this version of it uh linker d2 is

00:01:26,240 --> 00:01:30,640
heavily built on a rust proxy

00:01:28,159 --> 00:01:32,880
and so we've been really focused on the

00:01:30,640 --> 00:01:36,000
rust tokyo ecosystem

00:01:32,880 --> 00:01:38,240
heavily over the past three to five

00:01:36,000 --> 00:01:38,240
years

00:01:38,320 --> 00:01:42,720
how about you paul sure yeah i'm paul

00:01:41,520 --> 00:01:45,119
howard um

00:01:42,720 --> 00:01:45,840
principal system solutions architect uh

00:01:45,119 --> 00:01:47,520
with arm

00:01:45,840 --> 00:01:49,680
i work in the arm architecture and

00:01:47,520 --> 00:01:51,680
technology group uh i lead a small

00:01:49,680 --> 00:01:52,720
engineering team here at arm where we

00:01:51,680 --> 00:01:56,079
are contributing

00:01:52,720 --> 00:01:58,560
into the parsec project and parsec is a

00:01:56,079 --> 00:01:59,680
rust-based security focus project that

00:01:58,560 --> 00:02:01,759
is now

00:01:59,680 --> 00:02:02,880
part of the cncf it's been a cncf

00:02:01,759 --> 00:02:07,040
sandbox project

00:02:02,880 --> 00:02:08,720
since last year so yeah that's me

00:02:07,040 --> 00:02:10,640
awesome and i'm william morgan i'm the

00:02:08,720 --> 00:02:13,920
ceo of buoyance i work

00:02:10,640 --> 00:02:15,920
closely with oliver uh i have never

00:02:13,920 --> 00:02:16,319
written a line of rest in my life so i

00:02:15,920 --> 00:02:19,840
am

00:02:16,319 --> 00:02:21,840
pure still pure and and beautiful

00:02:19,840 --> 00:02:22,879
so i will constrain myself in this

00:02:21,840 --> 00:02:25,360
presentation asking

00:02:22,879 --> 00:02:26,640
questions should we do a quick question

00:02:25,360 --> 00:02:27,840
number one should we do a quick vote

00:02:26,640 --> 00:02:30,319
based on these

00:02:27,840 --> 00:02:30,879
profile images of who is most likely to

00:02:30,319 --> 00:02:36,080
end up

00:02:30,879 --> 00:02:39,599
in prison due to their rust related code

00:02:36,080 --> 00:02:41,120
i'm gonna go with what sorry that was a

00:02:39,599 --> 00:02:42,400
joke because everyone looks

00:02:41,120 --> 00:02:44,640
like that's really happy except for

00:02:42,400 --> 00:02:48,400
oliver who looks very frightened

00:02:44,640 --> 00:02:51,200
you chose the pictures i took i took the

00:02:48,400 --> 00:02:51,680
latest twitter images for each person

00:02:51,200 --> 00:02:54,400
okay

00:02:51,680 --> 00:02:57,440
that's a dangerous game wow all right i

00:02:54,400 --> 00:02:58,720
feel like i dodged a bullet there okay

00:02:57,440 --> 00:03:00,000
at the end of the discussion we'll do

00:02:58,720 --> 00:03:01,840
another vote and see how results have

00:03:00,000 --> 00:03:04,319
changed

00:03:01,840 --> 00:03:04,959
okay so the first question that i bring

00:03:04,319 --> 00:03:07,280
uh

00:03:04,959 --> 00:03:09,760
before you illustrious panelists is uh

00:03:07,280 --> 00:03:10,959
the the topic of this panel is rust in

00:03:09,760 --> 00:03:12,879
the cloud

00:03:10,959 --> 00:03:14,159
so what have you been working on in this

00:03:12,879 --> 00:03:15,680
area and

00:03:14,159 --> 00:03:17,440
what have you learned and ashley i'd

00:03:15,680 --> 00:03:21,200
like to start with you

00:03:17,440 --> 00:03:23,440
yeah sure um so what i am

00:03:21,200 --> 00:03:24,720
actively working on is probably slightly

00:03:23,440 --> 00:03:26,480
different uh

00:03:24,720 --> 00:03:28,720
than you might mean by this question but

00:03:26,480 --> 00:03:32,000
i'll get to that um

00:03:28,720 --> 00:03:35,440
so i guess the very first

00:03:32,000 --> 00:03:37,120
time that i got rust uh into the cloud

00:03:35,440 --> 00:03:37,680
in production was when i was working at

00:03:37,120 --> 00:03:39,920
npm

00:03:37,680 --> 00:03:41,360
several years ago and uh my favorite

00:03:39,920 --> 00:03:44,560
quote from the cto at the time

00:03:41,360 --> 00:03:47,840
cj silverio is i like rust because rust

00:03:44,560 --> 00:03:50,239
is boring um and

00:03:47,840 --> 00:03:51,280
uh ultimately that just means i we were

00:03:50,239 --> 00:03:53,840
getting woken up

00:03:51,280 --> 00:03:55,519
uh by pagerduty a lot less thanks or

00:03:53,840 --> 00:03:56,640
rust services and that was really

00:03:55,519 --> 00:03:58,959
delightful

00:03:56,640 --> 00:04:00,080
uh and it kind of goes against the the

00:03:58,959 --> 00:04:01,920
general

00:04:00,080 --> 00:04:03,120
vibe of picking up technologies because

00:04:01,920 --> 00:04:05,680
they're exciting

00:04:03,120 --> 00:04:06,560
um and and so the boring quality has

00:04:05,680 --> 00:04:08,400
always been really

00:04:06,560 --> 00:04:10,000
fantastic the thing that i'll say i've

00:04:08,400 --> 00:04:13,200
learned is that

00:04:10,000 --> 00:04:15,360
convincing folks to transition services

00:04:13,200 --> 00:04:16,639
to rust regardless of whether they're in

00:04:15,360 --> 00:04:19,840
the cloud or not

00:04:16,639 --> 00:04:23,040
um requires this transition of

00:04:19,840 --> 00:04:24,960
understanding when you invest time

00:04:23,040 --> 00:04:26,320
that on the face might sound very simple

00:04:24,960 --> 00:04:27,520
but it's actually kind of like a big

00:04:26,320 --> 00:04:29,600
culture shift

00:04:27,520 --> 00:04:31,840
uh which is when you're writing things

00:04:29,600 --> 00:04:35,199
in rust you end up needing to invest

00:04:31,840 --> 00:04:35,919
a lot more time up front uh instead of

00:04:35,199 --> 00:04:38,320
you know

00:04:35,919 --> 00:04:40,000
you know i'm working on a service uh and

00:04:38,320 --> 00:04:42,560
then i put it into production

00:04:40,000 --> 00:04:43,759
and then it screams at me uh with rust

00:04:42,560 --> 00:04:47,120
all that screaming

00:04:43,759 --> 00:04:47,759
happens at the beginning uh and getting

00:04:47,120 --> 00:04:49,840
used to

00:04:47,759 --> 00:04:51,199
that investment up front instead of

00:04:49,840 --> 00:04:52,720
coming later um

00:04:51,199 --> 00:04:56,160
can be really tricky when you're trying

00:04:52,720 --> 00:04:59,360
to transition a team

00:04:56,160 --> 00:05:02,400
awesome paul how about you

00:04:59,360 --> 00:05:04,800
uh yeah so um so as i've mentioned the

00:05:02,400 --> 00:05:07,120
parsec project so i work on this parsec

00:05:04,800 --> 00:05:09,440
project so parsec is a software service

00:05:07,120 --> 00:05:10,960
and it's it's providing uh convenient

00:05:09,440 --> 00:05:12,880
abstractions and common api

00:05:10,960 --> 00:05:15,360
is over hardware security for things

00:05:12,880 --> 00:05:17,120
like key storage and crypto

00:05:15,360 --> 00:05:19,520
so so it's really about building a cloud

00:05:17,120 --> 00:05:21,199
native and portable dev experience for

00:05:19,520 --> 00:05:23,520
security

00:05:21,199 --> 00:05:26,080
more and more in the world of edge

00:05:23,520 --> 00:05:27,759
rather than necessarily in the cloud

00:05:26,080 --> 00:05:29,520
um and i think actually workloads

00:05:27,759 --> 00:05:31,840
roaming from cloud to edge is

00:05:29,520 --> 00:05:33,039
is one of the really interesting areas

00:05:31,840 --> 00:05:35,280
um for rust

00:05:33,039 --> 00:05:36,720
as well now i have to say i chose rust

00:05:35,280 --> 00:05:38,960
for plastic

00:05:36,720 --> 00:05:40,400
i kind of was was in the chair to make

00:05:38,960 --> 00:05:42,560
that call

00:05:40,400 --> 00:05:44,080
and and this was without ever having

00:05:42,560 --> 00:05:47,680
written a line of rust code

00:05:44,080 --> 00:05:50,880
right um this was a couple of years ago

00:05:47,680 --> 00:05:52,400
um i just felt really from what i knew

00:05:50,880 --> 00:05:53,919
about the language what i'd read about

00:05:52,400 --> 00:05:55,759
the language and what i'd heard other

00:05:53,919 --> 00:05:58,560
people saying

00:05:55,759 --> 00:05:59,759
um it it it felt like the way to

00:05:58,560 --> 00:06:02,000
intercept the future

00:05:59,759 --> 00:06:03,680
right it really felt like it was a

00:06:02,000 --> 00:06:06,960
language that was in

00:06:03,680 --> 00:06:10,400
exactly the right space um for a

00:06:06,960 --> 00:06:13,759
security focused system level piece um

00:06:10,400 --> 00:06:15,600
like parsec and two years down the line

00:06:13,759 --> 00:06:18,840
i don't regret that decision

00:06:15,600 --> 00:06:22,639
at all right so so what i've learned

00:06:18,840 --> 00:06:24,000
well i've learned a mixture of things

00:06:22,639 --> 00:06:26,639
one of the things i've learned is that

00:06:24,000 --> 00:06:27,759
the language is actually a lot more

00:06:26,639 --> 00:06:30,880
beautiful

00:06:27,759 --> 00:06:32,639
than it often gets credit for so all of

00:06:30,880 --> 00:06:35,120
the messaging you hear around rust is

00:06:32,639 --> 00:06:36,880
its focus on safety and more performance

00:06:35,120 --> 00:06:38,960
both of which of course are absolutely

00:06:36,880 --> 00:06:40,240
core and critical to what this language

00:06:38,960 --> 00:06:43,120
is doing

00:06:40,240 --> 00:06:44,960
um less tends to be said about the dev

00:06:43,120 --> 00:06:45,280
experience and i think this is a shame

00:06:44,960 --> 00:06:46,880
and

00:06:45,280 --> 00:06:48,319
in fact when the dev experience is

00:06:46,880 --> 00:06:51,199
spoken of it

00:06:48,319 --> 00:06:53,039
it can be a little bit negative um you

00:06:51,199 --> 00:06:54,880
know it gets a reputation as having a

00:06:53,039 --> 00:06:56,560
steep learning curve and a high barrier

00:06:54,880 --> 00:06:58,880
to entry

00:06:56,560 --> 00:07:00,800
these criticisms aren't entirely

00:06:58,880 --> 00:07:03,199
unfounded but the language can be a

00:07:00,800 --> 00:07:05,039
beautiful language as a very expressive

00:07:03,199 --> 00:07:06,639
its abstractions are concise

00:07:05,039 --> 00:07:09,680
syntactically

00:07:06,639 --> 00:07:10,479
as well as as being low runtime costs as

00:07:09,680 --> 00:07:12,800
well

00:07:10,479 --> 00:07:14,639
um now i i still haven't become an

00:07:12,800 --> 00:07:16,800
expert rust developer as yet right

00:07:14,639 --> 00:07:18,479
like i'm still working on that i can't

00:07:16,800 --> 00:07:20,080
lay claim to that

00:07:18,479 --> 00:07:22,319
but what i have seen so far is that you

00:07:20,080 --> 00:07:23,840
can write code that is as elegant as

00:07:22,319 --> 00:07:25,599
like a pure functional language for

00:07:23,840 --> 00:07:28,639
instance with things like pattern

00:07:25,599 --> 00:07:30,240
matching lots of expressive power

00:07:28,639 --> 00:07:32,240
and yet you know all along that you're

00:07:30,240 --> 00:07:34,080
writing code that's going to give you

00:07:32,240 --> 00:07:35,280
you know performance parity with clc

00:07:34,080 --> 00:07:37,199
plus plus

00:07:35,280 --> 00:07:38,800
but without the memory faults and the

00:07:37,199 --> 00:07:41,919
data races um

00:07:38,800 --> 00:07:44,800
and so forth so you know it's really the

00:07:41,919 --> 00:07:47,360
the best of all worlds in in that regard

00:07:44,800 --> 00:07:49,360
so so i i always speak up for the dev

00:07:47,360 --> 00:07:50,879
experience of rust

00:07:49,360 --> 00:07:52,800
because i think it's a shame that the

00:07:50,879 --> 00:07:55,919
learning curve message

00:07:52,800 --> 00:07:57,759
gets in the way of um of what is

00:07:55,919 --> 00:08:00,560
actually a really elegant dev experience

00:07:57,759 --> 00:08:00,560
with this language

00:08:01,199 --> 00:08:06,319
hey very nicely put uh carl

00:08:04,720 --> 00:08:08,319
what have you been up to if anything

00:08:06,319 --> 00:08:11,440
what what have i been up to

00:08:08,319 --> 00:08:14,560
um yeah i mentioned earlier i

00:08:11,440 --> 00:08:15,199
work on tokyo the um an asynchronous

00:08:14,560 --> 00:08:18,800
runtime

00:08:15,199 --> 00:08:20,879
for rus so specifically it tokyo

00:08:18,800 --> 00:08:22,720
lets you write network applications for

00:08:20,879 --> 00:08:25,120
rust

00:08:22,720 --> 00:08:26,560
and it turns out when you're in the

00:08:25,120 --> 00:08:28,800
cloud there are networks

00:08:26,560 --> 00:08:30,560
that you have to factor in there's you

00:08:28,800 --> 00:08:33,279
know shuffle bytes between

00:08:30,560 --> 00:08:33,919
one node server or whatever whatever

00:08:33,279 --> 00:08:37,039
they're containing

00:08:33,919 --> 00:08:37,599
call these these containers um lambda

00:08:37,039 --> 00:08:39,599
function

00:08:37,599 --> 00:08:40,719
functions or whatever they whatever

00:08:39,599 --> 00:08:43,279
people do these days

00:08:40,719 --> 00:08:44,320
i tend to stay lower in the stack so i'm

00:08:43,279 --> 00:08:47,760
trying to keep up

00:08:44,320 --> 00:08:50,000
but um before you riding

00:08:47,760 --> 00:08:51,600
um ross before i really got into rust i

00:08:50,000 --> 00:08:54,560
spent most of my time

00:08:51,600 --> 00:08:56,080
in the jvm which is a great piece of

00:08:54,560 --> 00:08:59,360
technology you know

00:08:56,080 --> 00:09:02,399
lots of really solid software is written

00:08:59,360 --> 00:09:06,240
with java and other jvm languages

00:09:02,399 --> 00:09:10,240
in the cloud too but what i was finding

00:09:06,240 --> 00:09:12,959
is like some of what

00:09:10,240 --> 00:09:14,240
some of what java and the jvm gives you

00:09:12,959 --> 00:09:18,000
like the garbage collector which

00:09:14,240 --> 00:09:20,399
makes some things really easy can impact

00:09:18,000 --> 00:09:21,519
your the runtime characteristics of the

00:09:20,399 --> 00:09:22,240
program that you're writing like

00:09:21,519 --> 00:09:24,160
especially

00:09:22,240 --> 00:09:25,600
like what the garbage collector runs

00:09:24,160 --> 00:09:27,600
stop the world pause

00:09:25,600 --> 00:09:29,519
requests and that can cause like result

00:09:27,600 --> 00:09:33,360
in tail latencies to spike

00:09:29,519 --> 00:09:34,240
and when working like with microservices

00:09:33,360 --> 00:09:36,959
when you have lots of

00:09:34,240 --> 00:09:37,360
different services talking to each other

00:09:36,959 --> 00:09:40,480
that

00:09:37,360 --> 00:09:43,519
the tail latencies will result in

00:09:40,480 --> 00:09:45,680
um like we'll be

00:09:43,519 --> 00:09:46,560
we'll impact like the end application

00:09:45,680 --> 00:09:48,000
because you're talking about you're

00:09:46,560 --> 00:09:49,360
fanning out lots of requests

00:09:48,000 --> 00:09:51,279
if one request is slow it's going to

00:09:49,360 --> 00:09:54,560
impact the entire like

00:09:51,279 --> 00:09:58,320
ensemble of requests so

00:09:54,560 --> 00:10:02,720
rust offers um a solution to that by

00:09:58,320 --> 00:10:04,800
having a runtime-less language and

00:10:02,720 --> 00:10:06,160
you can really get really like

00:10:04,800 --> 00:10:08,720
controlled tight low

00:10:06,160 --> 00:10:09,519
resource um services so you're you're

00:10:08,720 --> 00:10:10,560
paying less

00:10:09,519 --> 00:10:11,680
like you're building services in the

00:10:10,560 --> 00:10:12,560
cloud you're paying less you're using

00:10:11,680 --> 00:10:14,480
less memory

00:10:12,560 --> 00:10:16,399
your requests respond faster more

00:10:14,480 --> 00:10:19,680
controlled more reliable

00:10:16,399 --> 00:10:21,600
um and that's really attractive to

00:10:19,680 --> 00:10:24,240
a lot of people building you know

00:10:21,600 --> 00:10:27,360
products software in the cloud

00:10:24,240 --> 00:10:30,240
so like i think um

00:10:27,360 --> 00:10:31,040
paul hinted at that learning curve i

00:10:30,240 --> 00:10:32,880
think part of that

00:10:31,040 --> 00:10:34,160
i mean there's the language aspect and

00:10:32,880 --> 00:10:35,519
it's you know it's

00:10:34,160 --> 00:10:37,440
improving all the time but there's also

00:10:35,519 --> 00:10:40,240
the aspect of

00:10:37,440 --> 00:10:41,519
like rust really is still a new language

00:10:40,240 --> 00:10:44,560
and the ecosystem is

00:10:41,519 --> 00:10:47,120
young compared to you know platforms

00:10:44,560 --> 00:10:49,760
like java or go that have matured

00:10:47,120 --> 00:10:50,480
a lot over the years so what i'm trying

00:10:49,760 --> 00:10:53,279
to do

00:10:50,480 --> 00:10:53,920
um these days is improve like the

00:10:53,279 --> 00:10:56,240
tooling

00:10:53,920 --> 00:10:58,640
especially around debugging and like

00:10:56,240 --> 00:11:01,040
build up more of that higher level like

00:10:58,640 --> 00:11:01,760
tangential infrastructure around

00:11:01,040 --> 00:11:05,279
building

00:11:01,760 --> 00:11:05,920
services so i think um and i'm on a team

00:11:05,279 --> 00:11:09,120
at

00:11:05,920 --> 00:11:12,720
amazon um rust platform team that were

00:11:09,120 --> 00:11:13,040
like nico matsakis and felix and a few

00:11:12,720 --> 00:11:15,040
other

00:11:13,040 --> 00:11:17,040
rust developers that work out in the

00:11:15,040 --> 00:11:20,079
open um are on this team

00:11:17,040 --> 00:11:21,680
and we're working kind of on the open

00:11:20,079 --> 00:11:25,279
source infrastructure so

00:11:21,680 --> 00:11:27,760
nico started with the async vision dock

00:11:25,279 --> 00:11:28,399
which you can probably google on the

00:11:27,760 --> 00:11:31,760
it's on the rock

00:11:28,399 --> 00:11:34,959
rust blog but kind of solicitating

00:11:31,760 --> 00:11:38,079
experience from people building um

00:11:34,959 --> 00:11:40,000
services with rust to kind of see to

00:11:38,079 --> 00:11:41,600
learn what is missing so we're doing

00:11:40,000 --> 00:11:45,279
that and then step two

00:11:41,600 --> 00:11:45,279
hopefully we'll be fixing some of that

00:11:45,839 --> 00:11:49,680
great okay oliver how about you what

00:11:48,800 --> 00:11:52,800
have you been working on

00:11:49,680 --> 00:11:54,880
in rust and the cloud uh

00:11:52,800 --> 00:11:56,000
those were both all three were kind of

00:11:54,880 --> 00:11:57,839
great setups for my

00:11:56,000 --> 00:11:59,600
experience um working on cloud

00:11:57,839 --> 00:12:00,000
infrastructure so when we got started

00:11:59,600 --> 00:12:03,600
with

00:12:00,000 --> 00:12:05,680
point and linkery um this is about 2015

00:12:03,600 --> 00:12:07,600
the cloud ecosystem actually looked

00:12:05,680 --> 00:12:08,880
quite differently than it does today is

00:12:07,600 --> 00:12:11,120
especially when we talk about cloud

00:12:08,880 --> 00:12:12,480
native we're much more focused on things

00:12:11,120 --> 00:12:15,440
like mesos which

00:12:12,480 --> 00:12:15,839
is kind of a predecessor to kubernetes

00:12:15,440 --> 00:12:17,839
and

00:12:15,839 --> 00:12:19,279
that mod that ecosystem in general was

00:12:17,839 --> 00:12:22,240
very jvm heavy

00:12:19,279 --> 00:12:24,560
right so mesos itself lots of the

00:12:22,240 --> 00:12:27,120
schedulers were written in the jvm

00:12:24,560 --> 00:12:28,160
and as we started working on the first

00:12:27,120 --> 00:12:30,959
version of linker d

00:12:28,160 --> 00:12:31,920
we were coming from twitter's ecosystem

00:12:30,959 --> 00:12:34,000
which was heavily

00:12:31,920 --> 00:12:35,839
jvm and scholar centric and so what we

00:12:34,000 --> 00:12:40,399
got in that ecosystem

00:12:35,839 --> 00:12:40,399
was great functional primitives

00:12:40,480 --> 00:12:46,000
type safety and a really kind of mature

00:12:43,600 --> 00:12:49,440
runtime so the jvm comes with plugins

00:12:46,000 --> 00:12:51,360
and monitoring tools and all sorts of

00:12:49,440 --> 00:12:53,760
bells and whistles that folks have

00:12:51,360 --> 00:12:56,560
experienced running in production

00:12:53,760 --> 00:12:57,200
and then shifting forward a few years we

00:12:56,560 --> 00:13:00,079
really saw

00:12:57,200 --> 00:13:01,519
kubernetes and that model of

00:13:00,079 --> 00:13:03,680
microservices

00:13:01,519 --> 00:13:06,320
and that operational model really take

00:13:03,680 --> 00:13:07,200
root in the cloud ecosystem and so in

00:13:06,320 --> 00:13:09,279
that world we

00:13:07,200 --> 00:13:12,079
we where we were running linkerity as

00:13:09,279 --> 00:13:14,480
this kind of very large proxy per node

00:13:12,079 --> 00:13:16,240
we want to have now basically a proxy

00:13:14,480 --> 00:13:19,360
per process or a proxy per

00:13:16,240 --> 00:13:21,920
pod right a group of processes um

00:13:19,360 --> 00:13:22,639
and that transition really made us look

00:13:21,920 --> 00:13:24,399
to

00:13:22,639 --> 00:13:26,639
uh something with a native runtime

00:13:24,399 --> 00:13:29,519
something that was gonna compile down to

00:13:26,639 --> 00:13:29,839
to be a as fast and efficient as c and

00:13:29,519 --> 00:13:32,399
so

00:13:29,839 --> 00:13:33,839
at the time i think rust was far in the

00:13:32,399 --> 00:13:36,000
lead and now there's things like swift

00:13:33,839 --> 00:13:39,760
which are kind of in a similar space but

00:13:36,000 --> 00:13:43,199
um especially as as when we talk about

00:13:39,760 --> 00:13:44,480
the the type system and the types of

00:13:43,199 --> 00:13:46,240
primitives that you can actually build

00:13:44,480 --> 00:13:49,519
composable primitives

00:13:46,240 --> 00:13:50,399
rust was really really uh hit that sweet

00:13:49,519 --> 00:13:53,279
spot

00:13:50,399 --> 00:13:53,680
um and so as we've moved into this i

00:13:53,279 --> 00:13:54,959
think

00:13:53,680 --> 00:13:56,320
the things that carl are talking about

00:13:54,959 --> 00:13:57,360
of having kind of the operational

00:13:56,320 --> 00:13:59,839
tooling

00:13:57,360 --> 00:14:00,720
where that ecosystem isn't quite as

00:13:59,839 --> 00:14:03,199
mature

00:14:00,720 --> 00:14:04,079
um as it is going to need to be but

00:14:03,199 --> 00:14:07,040
really seeing

00:14:04,079 --> 00:14:07,920
the trajectory of the ecosystem going so

00:14:07,040 --> 00:14:09,600
when we started

00:14:07,920 --> 00:14:11,279
there there were you know we had hyper

00:14:09,600 --> 00:14:13,440
but there was no hdb2

00:14:11,279 --> 00:14:14,880
uh there were little on hdb3 or anything

00:14:13,440 --> 00:14:17,839
kind of fancy like that

00:14:14,880 --> 00:14:19,839
and really seeing the set of primitives

00:14:17,839 --> 00:14:21,839
in the ecosystem blossom over the past

00:14:19,839 --> 00:14:23,360
three years so things like tonic and

00:14:21,839 --> 00:14:26,720
tower uh

00:14:23,360 --> 00:14:29,199
really really um make me think that

00:14:26,720 --> 00:14:30,079
like it's time for us in a much more

00:14:29,199 --> 00:14:31,600
serious way

00:14:30,079 --> 00:14:32,880
and i think that'll be the theme of what

00:14:31,600 --> 00:14:33,279
we're going to talk about today is that

00:14:32,880 --> 00:14:36,320
really

00:14:33,279 --> 00:14:38,079
the the kind of maturity point for the

00:14:36,320 --> 00:14:39,600
ecosystem is really hitting a place

00:14:38,079 --> 00:14:40,160
where people can be really productive

00:14:39,600 --> 00:14:42,399
without

00:14:40,160 --> 00:14:43,600
having to invest in low-level primitives

00:14:42,399 --> 00:14:45,199
in the way that we've had to over the

00:14:43,600 --> 00:14:47,680
past several years so

00:14:45,199 --> 00:14:48,399
i am super stoked for for where we're

00:14:47,680 --> 00:14:50,639
going um

00:14:48,399 --> 00:14:52,639
and it really does feel like you know

00:14:50,639 --> 00:14:54,399
two years ago telling people to like

00:14:52,639 --> 00:14:55,760
start going to production with rust

00:14:54,399 --> 00:14:56,880
you're gonna throw them into kind of

00:14:55,760 --> 00:14:58,560
like a

00:14:56,880 --> 00:15:00,079
a box of tools that they're going to

00:14:58,560 --> 00:15:01,199
have to go put together and now we're

00:15:00,079 --> 00:15:03,440
getting the place where there's a lot

00:15:01,199 --> 00:15:07,120
more ready-made patterns and ecosystem

00:15:03,440 --> 00:15:11,279
to save for products great

00:15:07,120 --> 00:15:13,120
okay um so you know that was a pretty

00:15:11,279 --> 00:15:14,480
that was an easy open-ended question i

00:15:13,120 --> 00:15:15,199
actually want to ask something that is a

00:15:14,480 --> 00:15:18,560
lot

00:15:15,199 --> 00:15:21,199
harder um for this next one which is

00:15:18,560 --> 00:15:22,079
you know it's it's there's lots of nice

00:15:21,199 --> 00:15:24,240
things to say

00:15:22,079 --> 00:15:25,519
about rust in a variety of contexts but

00:15:24,240 --> 00:15:28,079
is there something

00:15:25,519 --> 00:15:29,600
that makes rust you know whether it's a

00:15:28,079 --> 00:15:30,480
language or the ecosystem or the

00:15:29,600 --> 00:15:33,279
community

00:15:30,480 --> 00:15:34,880
um or or any aspect of rust something

00:15:33,279 --> 00:15:37,920
that makes it a particularly good

00:15:34,880 --> 00:15:39,839
fit for the constraints of the cloud

00:15:37,920 --> 00:15:41,839
you know which is this very particular

00:15:39,839 --> 00:15:43,440
environment you know that that is

00:15:41,839 --> 00:15:45,600
uh quite different from other kind of

00:15:43,440 --> 00:15:48,000
execution environments out there

00:15:45,600 --> 00:15:49,040
let me just insert my my one take on

00:15:48,000 --> 00:15:52,480
this first um

00:15:49,040 --> 00:15:56,000
since i'm already talking uh the

00:15:52,480 --> 00:15:58,320
um i really think the union of um

00:15:56,000 --> 00:15:59,920
like cloud is necessarily network right

00:15:58,320 --> 00:16:01,920
it's about a dynamic system where things

00:15:59,920 --> 00:16:04,959
are going to communicate over a network

00:16:01,920 --> 00:16:05,759
uh and to do network software in any

00:16:04,959 --> 00:16:07,440
reasonable way

00:16:05,759 --> 00:16:08,959
you need safety guarantees especially

00:16:07,440 --> 00:16:11,680
memory safety right

00:16:08,959 --> 00:16:13,279
if we look back over the past decade

00:16:11,680 --> 00:16:14,079
anything that's network focused that's

00:16:13,279 --> 00:16:16,720
written in c

00:16:14,079 --> 00:16:18,000
is an attack vector and so having that

00:16:16,720 --> 00:16:21,360
kind of

00:16:18,000 --> 00:16:24,000
the joint the union of like networking

00:16:21,360 --> 00:16:24,720
primitives and memory safety are really

00:16:24,000 --> 00:16:26,880
kind of the

00:16:24,720 --> 00:16:28,000
critical uh the killer app for for why

00:16:26,880 --> 00:16:30,560
rest is going to be a cloud

00:16:28,000 --> 00:16:31,279
native technology in my opinion i i

00:16:30,560 --> 00:16:33,199
think you can

00:16:31,279 --> 00:16:34,639
i mean i'm going to go off and tangent

00:16:33,199 --> 00:16:38,240
but it is

00:16:34,639 --> 00:16:40,880
possible to write safe c like correct c

00:16:38,240 --> 00:16:41,839
it just takes like an amount of

00:16:40,880 --> 00:16:44,959
resources and

00:16:41,839 --> 00:16:47,279
energy that um

00:16:44,959 --> 00:16:48,399
most organizations won't even be able to

00:16:47,279 --> 00:16:52,480
afford to put in like

00:16:48,399 --> 00:16:55,199
i mean like um s2n like amazon's um

00:16:52,480 --> 00:16:55,920
tls implementation is c but the amount

00:16:55,199 --> 00:16:57,600
of like

00:16:55,920 --> 00:16:59,120
they go in and formally prove it they

00:16:57,600 --> 00:16:59,600
you like they use their improvers they

00:16:59,120 --> 00:17:02,000
go

00:16:59,600 --> 00:17:03,120
like audits they fuzzers they like very

00:17:02,000 --> 00:17:06,559
limit and like very

00:17:03,120 --> 00:17:08,720
well constrained um like code it's just

00:17:06,559 --> 00:17:10,000
but that is a lot of effort that most

00:17:08,720 --> 00:17:12,079
would not even do

00:17:10,000 --> 00:17:13,039
and i don't even even on amazon we'd

00:17:12,079 --> 00:17:14,480
rather not

00:17:13,039 --> 00:17:16,559
put in that effort if we don't have to

00:17:14,480 --> 00:17:19,199
which is why um we're

00:17:16,559 --> 00:17:20,160
using rust heavily and it's also why

00:17:19,199 --> 00:17:23,199
before us

00:17:20,160 --> 00:17:23,919
um people uh people would use the jb

00:17:23,199 --> 00:17:25,839
like jvm

00:17:23,919 --> 00:17:27,199
based language so what makes it a good

00:17:25,839 --> 00:17:29,919
fit for the cloud

00:17:27,199 --> 00:17:30,960
it's um well not having to worry about

00:17:29,919 --> 00:17:32,799
that safety

00:17:30,960 --> 00:17:34,160
side of things so that's a mental burden

00:17:32,799 --> 00:17:37,280
you can take off of your head

00:17:34,160 --> 00:17:40,480
but then run leaner right less memory

00:17:37,280 --> 00:17:41,840
less cpu it'll cost less um it'll be

00:17:40,480 --> 00:17:42,640
better for the environment you know when

00:17:41,840 --> 00:17:45,120
you're if you're talking about

00:17:42,640 --> 00:17:46,080
huge scale that will have a impact less

00:17:45,120 --> 00:17:49,600
carbon emission

00:17:46,080 --> 00:17:52,160
i'm just going to throw that in um but

00:17:49,600 --> 00:17:53,679
and and as as the ecosystem improves

00:17:52,160 --> 00:17:54,160
it's going to be a good experience i

00:17:53,679 --> 00:17:55,679
think

00:17:54,160 --> 00:17:57,039
it's not there yet but we're going to

00:17:55,679 --> 00:17:58,640
get there like it's there i mean there

00:17:57,039 --> 00:18:01,200
is a lot that's good now

00:17:58,640 --> 00:18:02,480
but we're i think in a few years it's

00:18:01,200 --> 00:18:05,760
going to be

00:18:02,480 --> 00:18:05,760
pretty stellar i hope

00:18:05,919 --> 00:18:10,400
paul does that jive with your experience

00:18:08,000 --> 00:18:13,520
at parsec

00:18:10,400 --> 00:18:14,720
um yeah i mean i i think know this this

00:18:13,520 --> 00:18:17,120
is a really interesting question

00:18:14,720 --> 00:18:17,919
that what about rust makes it

00:18:17,120 --> 00:18:20,640
particularly

00:18:17,919 --> 00:18:20,960
good fit for the cloud parsec is more of

00:18:20,640 --> 00:18:24,160
an

00:18:20,960 --> 00:18:27,120
edge compute project

00:18:24,160 --> 00:18:28,000
but i i think what i'd say in response

00:18:27,120 --> 00:18:31,200
to this question

00:18:28,000 --> 00:18:32,720
is um well maybe two things the first

00:18:31,200 --> 00:18:34,160
thing i'd say is what makes it good for

00:18:32,720 --> 00:18:35,360
the cloud is the same as what makes it

00:18:34,160 --> 00:18:38,320
good for anything else

00:18:35,360 --> 00:18:39,919
right it just gives you you know fast

00:18:38,320 --> 00:18:40,960
fast execution great performance

00:18:39,919 --> 00:18:43,679
characteristics

00:18:40,960 --> 00:18:44,640
uh low low memory footprint and with all

00:18:43,679 --> 00:18:46,720
of those

00:18:44,640 --> 00:18:48,640
uh safety and security guarantees built

00:18:46,720 --> 00:18:50,320
in as well i mean

00:18:48,640 --> 00:18:52,160
when when would you not want that

00:18:50,320 --> 00:18:54,000
whether you're you're in the cloud or

00:18:52,160 --> 00:18:56,880
indeed anywhere else

00:18:54,000 --> 00:18:58,640
um but i think it's particular

00:18:56,880 --> 00:19:02,240
opportunities to shine in the cloud

00:18:58,640 --> 00:19:04,080
come in like the software defined

00:19:02,240 --> 00:19:06,000
infrastructure pieces right the pieces

00:19:04,080 --> 00:19:07,360
of your cloud orchestration that you

00:19:06,000 --> 00:19:09,200
need to just

00:19:07,360 --> 00:19:10,400
stay out of the way but do everything

00:19:09,200 --> 00:19:13,440
perfectly

00:19:10,400 --> 00:19:14,400
you know um rust compiles down to very

00:19:13,440 --> 00:19:16,720
very small

00:19:14,400 --> 00:19:18,400
low footprint binaries it's absolutely

00:19:16,720 --> 00:19:20,559
perfect

00:19:18,400 --> 00:19:21,600
for your software-defined networking for

00:19:20,559 --> 00:19:24,960
your

00:19:21,600 --> 00:19:27,919
service mesh layers um

00:19:24,960 --> 00:19:28,880
for your for your tenant separation

00:19:27,919 --> 00:19:31,440
primitives you know

00:19:28,880 --> 00:19:32,160
the the the frame the skeletal

00:19:31,440 --> 00:19:34,880
frameworks

00:19:32,160 --> 00:19:37,280
in your deployment that keep workloads

00:19:34,880 --> 00:19:39,039
isolated from each other

00:19:37,280 --> 00:19:41,360
i mean look what link linker do you

00:19:39,039 --> 00:19:45,679
write is a great example

00:19:41,360 --> 00:19:47,280
um look at look at like micro vm

00:19:45,679 --> 00:19:50,400
technologies right think things like

00:19:47,280 --> 00:19:52,400
firecracker uh aws firecracker is is a

00:19:50,400 --> 00:19:56,400
hypervisor written in rust

00:19:52,400 --> 00:19:59,039
um i i think that that kind of thing

00:19:56,400 --> 00:20:00,720
where you want

00:19:59,039 --> 00:20:02,240
you you want software-defined

00:20:00,720 --> 00:20:04,400
infrastructure that shrinks

00:20:02,240 --> 00:20:05,520
out of the way of the the workloads that

00:20:04,400 --> 00:20:06,880
you're running

00:20:05,520 --> 00:20:08,880
that's not to say your workloads might

00:20:06,880 --> 00:20:10,960
not be rust as well right

00:20:08,880 --> 00:20:12,159
um but i think but i think for that soft

00:20:10,960 --> 00:20:13,679
that those software defined

00:20:12,159 --> 00:20:15,280
infrastructure pieces

00:20:13,679 --> 00:20:16,720
those thin pieces that just need to

00:20:15,280 --> 00:20:20,720
slide in

00:20:16,720 --> 00:20:21,919
um and you know separating the workloads

00:20:20,720 --> 00:20:23,840
from the hardware separating the

00:20:21,919 --> 00:20:27,039
workloads from each other

00:20:23,840 --> 00:20:29,039
um i think that that's that's an area

00:20:27,039 --> 00:20:29,840
where rust really has the opportunity to

00:20:29,039 --> 00:20:32,960
shine

00:20:29,840 --> 00:20:34,159
um because security is just so so

00:20:32,960 --> 00:20:38,000
critical

00:20:34,159 --> 00:20:40,480
in those areas right and um in rust

00:20:38,000 --> 00:20:41,200
rust you you get you get so much of that

00:20:40,480 --> 00:20:42,799
uh

00:20:41,200 --> 00:20:44,320
not not for free but i think it's

00:20:42,799 --> 00:20:45,280
exactly what ashley was saying right you

00:20:44,320 --> 00:20:47,039
invest

00:20:45,280 --> 00:20:50,400
you invest at the right time right

00:20:47,039 --> 00:20:52,960
rusty's rust is major left shifting

00:20:50,400 --> 00:20:54,080
um you know you you pay you pay all of

00:20:52,960 --> 00:20:57,919
that pain

00:20:54,080 --> 00:20:59,679
to get your code compiling and there but

00:20:57,919 --> 00:21:00,960
then after that you're happy right

00:20:59,679 --> 00:21:02,080
that shouldn't be something we complain

00:21:00,960 --> 00:21:03,919
about that should be something we

00:21:02,080 --> 00:21:05,840
celebrate yeah

00:21:03,919 --> 00:21:07,039
yeah like i hear some from some users of

00:21:05,840 --> 00:21:08,799
tokyo they're like they don't

00:21:07,039 --> 00:21:12,480
necessarily need the raw performance

00:21:08,799 --> 00:21:14,080
but they're able to not worry about it

00:21:12,480 --> 00:21:15,679
like so it's they're like they're stuck

00:21:14,080 --> 00:21:16,240
like why would you want to spend all

00:21:15,679 --> 00:21:19,280
that time

00:21:16,240 --> 00:21:21,280
up front it's it's when you get like you

00:21:19,280 --> 00:21:22,880
over time it gets less time but also

00:21:21,280 --> 00:21:24,720
like a startup doesn't have to worry

00:21:22,880 --> 00:21:26,640
about performance for example i mean

00:21:24,720 --> 00:21:27,760
within some boundary i hear from like

00:21:26,640 --> 00:21:29,919
fly.io

00:21:27,760 --> 00:21:31,440
they're like we like we've never

00:21:29,919 --> 00:21:34,720
optimized it's just it's within

00:21:31,440 --> 00:21:36,240
our target but and also not just um

00:21:34,720 --> 00:21:37,760
long-lived infrastructure but i think

00:21:36,240 --> 00:21:40,000
you hinted at that though but

00:21:37,760 --> 00:21:41,280
um like startup times like if you have

00:21:40,000 --> 00:21:43,200
bits of

00:21:41,280 --> 00:21:44,559
you know cloud functions that run

00:21:43,200 --> 00:21:47,679
occasionally

00:21:44,559 --> 00:21:48,400
something like like rust will let you

00:21:47,679 --> 00:21:51,280
write your

00:21:48,400 --> 00:21:51,919
functions to with very very short boot

00:21:51,280 --> 00:21:54,000
up time

00:21:51,919 --> 00:21:55,840
so you don't have to keep them hot or

00:21:54,000 --> 00:21:57,360
when they are

00:21:55,840 --> 00:21:59,600
being called occasionally you don't have

00:21:57,360 --> 00:22:00,320
that startup cost associated with it

00:21:59,600 --> 00:22:03,600
that time

00:22:00,320 --> 00:22:03,600
to boot up a vm

00:22:04,080 --> 00:22:07,440
this is also where wasm comes into it is

00:22:05,679 --> 00:22:08,600
it really well yeah i was about to say

00:22:07,440 --> 00:22:12,240
like we've been getting

00:22:08,600 --> 00:22:14,640
extremely close to saying the w word um

00:22:12,240 --> 00:22:15,679
but i i do think like when we say is

00:22:14,640 --> 00:22:17,360
there something about russ that makes it

00:22:15,679 --> 00:22:17,840
particularly a good fit for the cloud

00:22:17,360 --> 00:22:20,799
like

00:22:17,840 --> 00:22:23,039
i i really do agree with john that like

00:22:20,799 --> 00:22:23,840
i think rust is a good fit for the cloud

00:22:23,039 --> 00:22:25,679
like

00:22:23,840 --> 00:22:28,400
the same way it's a good fit for a lot

00:22:25,679 --> 00:22:30,400
of different problems like the cloud

00:22:28,400 --> 00:22:32,400
perhaps this is blasphemous to say but i

00:22:30,400 --> 00:22:35,039
don't necessarily think that the

00:22:32,400 --> 00:22:35,840
the needs the cloud has are particularly

00:22:35,039 --> 00:22:39,520
unique

00:22:35,840 --> 00:22:41,440
to many software projects um and so like

00:22:39,520 --> 00:22:42,400
the reliability and the efficiency but i

00:22:41,440 --> 00:22:45,760
think talking about

00:22:42,400 --> 00:22:47,919
why rust is well suited to web assembly

00:22:45,760 --> 00:22:49,520
a lot of people talked about webassembly

00:22:47,919 --> 00:22:51,200
like particularly when it first showed

00:22:49,520 --> 00:22:54,159
up as like oh it's like

00:22:51,200 --> 00:22:56,480
our multi-language future um and then

00:22:54,159 --> 00:22:56,799
inevitably people very quickly realized

00:22:56,480 --> 00:22:58,880
that

00:22:56,799 --> 00:23:00,799
compiling any language to webassembly

00:22:58,880 --> 00:23:03,280
was not really going to be a great

00:23:00,799 --> 00:23:05,120
great situation uh as somebody who has

00:23:03,280 --> 00:23:06,840
worked on many projects of compiling

00:23:05,120 --> 00:23:08,960
all sorts of different languages to

00:23:06,840 --> 00:23:11,280
webassembly um

00:23:08,960 --> 00:23:12,960
it's it's it's a much harder problem and

00:23:11,280 --> 00:23:14,080
the efficiency gains that you might get

00:23:12,960 --> 00:23:15,760
from something like it

00:23:14,080 --> 00:23:17,200
can disappear sometimes if you're

00:23:15,760 --> 00:23:19,200
particularly trying to take a gc

00:23:17,200 --> 00:23:22,960
language and put it into webassembly

00:23:19,200 --> 00:23:26,480
but rust benefits

00:23:22,960 --> 00:23:29,280
uh from its very very low run time cost

00:23:26,480 --> 00:23:31,520
and i i've been shamed by c programmers

00:23:29,280 --> 00:23:32,320
to when i say that rust has a no run

00:23:31,520 --> 00:23:35,679
time

00:23:32,320 --> 00:23:38,400
um because they uh i won't get into it

00:23:35,679 --> 00:23:42,240
but i'll say extremely low runtime cost

00:23:38,400 --> 00:23:44,080
um but i i think the other thing that

00:23:42,240 --> 00:23:46,080
makes rust really well suited for

00:23:44,080 --> 00:23:47,520
webassembly which goes back to a point

00:23:46,080 --> 00:23:49,360
that a lot of folks have touched on here

00:23:47,520 --> 00:23:52,640
but not said explicitly

00:23:49,360 --> 00:23:53,120
is rus learning experience is tough and

00:23:52,640 --> 00:23:55,679
that's an

00:23:53,120 --> 00:23:56,640
element of developer experience but rust

00:23:55,679 --> 00:23:58,400
tooling

00:23:56,640 --> 00:23:59,679
is top notch and when you're talking

00:23:58,400 --> 00:24:02,799
about compiling

00:23:59,679 --> 00:24:05,120
things having a good tool chain

00:24:02,799 --> 00:24:06,799
is super important and so other

00:24:05,120 --> 00:24:08,000
languages that i think are well suited

00:24:06,799 --> 00:24:11,760
to webassembly

00:24:08,000 --> 00:24:12,320
just they don't have as friendly of

00:24:11,760 --> 00:24:14,960
tooling

00:24:12,320 --> 00:24:16,880
as rust has um and that makes for us

00:24:14,960 --> 00:24:19,679
particularly well suited for that space

00:24:16,880 --> 00:24:20,880
and i mean with web assembly it's like

00:24:19,679 --> 00:24:23,360
low-level system

00:24:20,880 --> 00:24:25,440
plus containers um i don't think we've

00:24:23,360 --> 00:24:28,720
seen the future of webassembly yet but

00:24:25,440 --> 00:24:30,240
my favorite thing about it is that uh

00:24:28,720 --> 00:24:32,320
in theory it was developed to like

00:24:30,240 --> 00:24:35,440
replace flash and browsers but

00:24:32,320 --> 00:24:37,600
it is becoming a tool of the cloud

00:24:35,440 --> 00:24:41,440
probably exclusively before it ends up

00:24:37,600 --> 00:24:41,440
actually showing up in anybody's client

00:24:41,760 --> 00:24:46,240
yeah so that's a great uh segue into the

00:24:44,240 --> 00:24:47,039
next question because he used the word

00:24:46,240 --> 00:24:49,279
future

00:24:47,039 --> 00:24:50,320
so we've talked you know so far about

00:24:49,279 --> 00:24:53,679
kind of the state

00:24:50,320 --> 00:24:56,480
of uh where rust is today

00:24:53,679 --> 00:24:58,000
and uh developer experience versus

00:24:56,480 --> 00:25:00,480
tooling and so on

00:24:58,000 --> 00:25:01,200
if we fast forward for uh i picked a

00:25:00,480 --> 00:25:04,240
limited

00:25:01,200 --> 00:25:04,559
horizon just five years from now um you

00:25:04,240 --> 00:25:08,320
know

00:25:04,559 --> 00:25:10,080
how will we see rust used in cloud

00:25:08,320 --> 00:25:11,039
environments especially ashley it seems

00:25:10,080 --> 00:25:13,919
like this question is

00:25:11,039 --> 00:25:14,720
uh taylormade well i want to weigh in on

00:25:13,919 --> 00:25:16,880
one thing because

00:25:14,720 --> 00:25:19,039
you say limited scope five years from

00:25:16,880 --> 00:25:22,400
now if we take a second

00:25:19,039 --> 00:25:24,240
and think about what ac like

00:25:22,400 --> 00:25:26,080
network programming looked like in rust

00:25:24,240 --> 00:25:29,039
five years ago

00:25:26,080 --> 00:25:30,880
um oh my goodness five years is a really

00:25:29,039 --> 00:25:33,600
really long time and i see

00:25:30,880 --> 00:25:35,520
no reason to believe that the epic

00:25:33,600 --> 00:25:37,360
amount of progress that was made

00:25:35,520 --> 00:25:39,520
um in the last five years will not be

00:25:37,360 --> 00:25:41,440
the type i mean we're gonna see that if

00:25:39,520 --> 00:25:44,720
not more i think particularly

00:25:41,440 --> 00:25:46,720
uh in cloud application space for rust

00:25:44,720 --> 00:25:48,480
uh and and i think what i would say just

00:25:46,720 --> 00:25:49,440
kind of probably to tee it off for

00:25:48,480 --> 00:25:51,279
everybody else

00:25:49,440 --> 00:25:52,799
is so we recently announced the rust

00:25:51,279 --> 00:25:54,960
foundation or i guess

00:25:52,799 --> 00:25:56,159
in february which feels like it was

00:25:54,960 --> 00:25:59,360
yesterday but

00:25:56,159 --> 00:26:02,480
i don't know what is time uh but uh

00:25:59,360 --> 00:26:06,000
our founding sponsors are

00:26:02,480 --> 00:26:07,520
some of the biggest clouds on the planet

00:26:06,000 --> 00:26:09,440
uh and one of the things that's

00:26:07,520 --> 00:26:10,880
particularly exciting to me about all of

00:26:09,440 --> 00:26:14,159
them is that they are all

00:26:10,880 --> 00:26:14,799
interested not only in using rust but

00:26:14,159 --> 00:26:18,000
also

00:26:14,799 --> 00:26:22,840
working on and contributing to

00:26:18,000 --> 00:26:25,600
rust itself and so um

00:26:22,840 --> 00:26:26,720
i i think the future is going to be very

00:26:25,600 --> 00:26:28,559
very interesting

00:26:26,720 --> 00:26:31,039
uh and i'm really really excited about

00:26:28,559 --> 00:26:31,520
it but it'd probably be easier to

00:26:31,039 --> 00:26:33,279
predict

00:26:31,520 --> 00:26:34,799
like a couple months from now than five

00:26:33,279 --> 00:26:36,480
years because i think a lot of things

00:26:34,799 --> 00:26:38,400
are going to change

00:26:36,480 --> 00:26:40,159
well the flip side is i hope i think

00:26:38,400 --> 00:26:43,360
russ has has

00:26:40,159 --> 00:26:46,880
had five years of like extremely

00:26:43,360 --> 00:26:49,919
fast like evolution and growth and churn

00:26:46,880 --> 00:26:52,240
and figuring out what it's all about um

00:26:49,919 --> 00:26:54,320
and i think the next five years are

00:26:52,240 --> 00:26:57,440
going to be a lot more stable so

00:26:54,320 --> 00:27:01,120
it will be less evolution like of rust

00:26:57,440 --> 00:27:02,880
and more growth like i guess russ is

00:27:01,120 --> 00:27:04,799
probably in his teenage years like

00:27:02,880 --> 00:27:06,159
it's going to finally like you know

00:27:04,799 --> 00:27:09,279
start fitting they go

00:27:06,159 --> 00:27:11,120
kind of like the tooling will start

00:27:09,279 --> 00:27:12,320
getting more refined it's going to be

00:27:11,120 --> 00:27:15,919
more about filling in

00:27:12,320 --> 00:27:18,000
the gaps and um polishing off edges

00:27:15,919 --> 00:27:21,840
and i don't know i did a lot of evolving

00:27:18,000 --> 00:27:21,840
in my 20s carl

00:27:22,480 --> 00:27:27,679
with the foundation's there right there

00:27:24,720 --> 00:27:30,880
the foundation is there

00:27:27,679 --> 00:27:33,679
all right um let's see uh

00:27:30,880 --> 00:27:34,640
but so there is going to be change but i

00:27:33,679 --> 00:27:36,880
hope it's not going to be

00:27:34,640 --> 00:27:38,640
like groundbreaking change i think i

00:27:36,880 --> 00:27:39,919
think we'll see more of the same i mean

00:27:38,640 --> 00:27:41,360
if they're like wasn't

00:27:39,919 --> 00:27:43,279
i think wasm is probably going to be

00:27:41,360 --> 00:27:45,279
where there's the most discovery

00:27:43,279 --> 00:27:46,399
um because i mean the whole ecosystem

00:27:45,279 --> 00:27:47,600
still figuring out

00:27:46,399 --> 00:27:50,080
what it is about and where the

00:27:47,600 --> 00:27:51,520
applications are um it's not my area of

00:27:50,080 --> 00:27:53,279
expertise so i will

00:27:51,520 --> 00:27:56,799
ashley it's a technology with an

00:27:53,279 --> 00:27:59,840
identity crisis it knows that

00:27:56,799 --> 00:28:01,200
um but besides like in the networking

00:27:59,840 --> 00:28:03,520
space and the cloud

00:28:01,200 --> 00:28:04,799
like i think it's just going to be more

00:28:03,520 --> 00:28:07,840
like we'll see

00:28:04,799 --> 00:28:09,760
more um application of it as

00:28:07,840 --> 00:28:10,960
as that learning curve and as more

00:28:09,760 --> 00:28:13,360
people learn it and as

00:28:10,960 --> 00:28:15,600
we polish off that beginning like

00:28:13,360 --> 00:28:17,679
getting started experience that like

00:28:15,600 --> 00:28:19,200
debugging experience that like tooling

00:28:17,679 --> 00:28:23,440
experience i think more we'll

00:28:19,200 --> 00:28:25,120
we'll see more um rust use

00:28:23,440 --> 00:28:27,200
in places you know in places we might

00:28:25,120 --> 00:28:30,240
not initially expect it but

00:28:27,200 --> 00:28:32,960
um not necessarily new groundbreaking

00:28:30,240 --> 00:28:33,600
areas more just some new field new

00:28:32,960 --> 00:28:36,320
experience

00:28:33,600 --> 00:28:38,080
uh news development and existing spaces

00:28:36,320 --> 00:28:39,440
something that i've noticed about

00:28:38,080 --> 00:28:42,000
my interactions with the russ community

00:28:39,440 --> 00:28:43,840
is that the community really skews young

00:28:42,000 --> 00:28:45,520
right or i see a lot of folks either in

00:28:43,840 --> 00:28:48,159
college or coming out of college

00:28:45,520 --> 00:28:49,840
and like when i was in college if you

00:28:48,159 --> 00:28:50,799
wanted to be a systems programmer you

00:28:49,840 --> 00:28:53,039
were going to learn c

00:28:50,799 --> 00:28:54,960
or c plus plus and like that was you

00:28:53,039 --> 00:28:57,440
know not a very welcoming

00:28:54,960 --> 00:28:58,159
job opportunity or career path there and

00:28:57,440 --> 00:29:01,600
and i see

00:28:58,159 --> 00:29:03,360
now lots of younger people who are

00:29:01,600 --> 00:29:05,440
coming into the industry

00:29:03,360 --> 00:29:07,520
really enthused about rust and kind of

00:29:05,440 --> 00:29:08,480
really engaged at the systems level in a

00:29:07,520 --> 00:29:11,520
way that

00:29:08,480 --> 00:29:14,320
was just not there 10 plus years ago

00:29:11,520 --> 00:29:16,399
from my perspective at least and so i i

00:29:14,320 --> 00:29:20,640
do think that there's going to be

00:29:16,399 --> 00:29:22,880
uh and i don't want to say the word army

00:29:20,640 --> 00:29:25,600
but a big kind of contingent of

00:29:22,880 --> 00:29:26,000
uh of rus developers coming into the

00:29:25,600 --> 00:29:27,840
industry

00:29:26,000 --> 00:29:29,360
in the next couple years and there yeah

00:29:27,840 --> 00:29:32,640
a big herd of

00:29:29,360 --> 00:29:33,279
stations coming into the um into the

00:29:32,640 --> 00:29:35,039
community

00:29:33,279 --> 00:29:37,279
or into the industry and i think that's

00:29:35,039 --> 00:29:37,840
really going to drive a title shift in

00:29:37,279 --> 00:29:40,960
terms of

00:29:37,840 --> 00:29:43,600
like the quality of infrastructure

00:29:40,960 --> 00:29:45,039
and you know i i i don't know what it's

00:29:43,600 --> 00:29:47,760
going to look like but i know that it's

00:29:45,039 --> 00:29:49,200
going to be wild and exciting

00:29:47,760 --> 00:29:50,880
i mean you touched on something that i

00:29:49,200 --> 00:29:53,200
don't think we mentioned much but

00:29:50,880 --> 00:29:54,559
russ makes systems level programming

00:29:53,200 --> 00:29:57,360
approachable like

00:29:54,559 --> 00:29:58,080
the fact that you can go and write at

00:29:57,360 --> 00:30:01,440
that level

00:29:58,080 --> 00:30:04,080
and not worry about um

00:30:01,440 --> 00:30:05,440
the sharp edges of c or c plus plus is

00:30:04,080 --> 00:30:08,000
very empowering

00:30:05,440 --> 00:30:10,159
and it's going to be like it's going to

00:30:08,000 --> 00:30:12,640
be interesting to see as more

00:30:10,159 --> 00:30:13,600
um developers get to that level what are

00:30:12,640 --> 00:30:15,600
we going to build

00:30:13,600 --> 00:30:17,919
like it's just like you know all the

00:30:15,600 --> 00:30:20,559
advantages of having more

00:30:17,919 --> 00:30:23,279
mines on it right so it's my favorite

00:30:20,559 --> 00:30:24,880
part of rust

00:30:23,279 --> 00:30:26,480
let's let's talk about that a little bit

00:30:24,880 --> 00:30:29,600
so you know our audience

00:30:26,480 --> 00:30:32,880
probably like me is still in their

00:30:29,600 --> 00:30:35,919
uh rust infancy uh so what

00:30:32,880 --> 00:30:37,039
is the best way for people who are not

00:30:35,919 --> 00:30:39,520
currently

00:30:37,039 --> 00:30:40,480
you know doing anything with rust to get

00:30:39,520 --> 00:30:43,600
involved

00:30:40,480 --> 00:30:46,240
uh with rust both in general but also

00:30:43,600 --> 00:30:46,799
you know since the topic is cloud native

00:30:46,240 --> 00:30:49,520
rust

00:30:46,799 --> 00:30:50,000
for cloud related rust efforts and paul

00:30:49,520 --> 00:30:53,200
why don't we

00:30:50,000 --> 00:30:55,840
kick it off with you um

00:30:53,200 --> 00:30:58,159
yeah sure that yeah interesting question

00:30:55,840 --> 00:30:58,159
um

00:30:58,960 --> 00:31:04,640
what one obvious way i think is to just

00:31:01,840 --> 00:31:06,799
go seek out the growing number

00:31:04,640 --> 00:31:08,000
of rust-based open source projects that

00:31:06,799 --> 00:31:11,279
are out there

00:31:08,000 --> 00:31:14,399
um you know but both both in cncf uh

00:31:11,279 --> 00:31:15,840
and and elsewhere i'm biased of course

00:31:14,399 --> 00:31:17,440
parsec is one example

00:31:15,840 --> 00:31:19,039
um you can you can go and learn about

00:31:17,440 --> 00:31:22,480
that if you're interested in

00:31:19,039 --> 00:31:24,480
in platform agnostic security um but

00:31:22,480 --> 00:31:25,519
but the num the number of projects is

00:31:24,480 --> 00:31:29,600
growing uh

00:31:25,519 --> 00:31:29,600
and you know rust is

00:31:30,399 --> 00:31:34,799
these projects are crying out for people

00:31:33,279 --> 00:31:37,679
to come and learn the language

00:31:34,799 --> 00:31:39,679
um and and get involved um because the

00:31:37,679 --> 00:31:41,440
number of rust developers out there

00:31:39,679 --> 00:31:43,840
you know it's it's growing but it's not

00:31:41,440 --> 00:31:47,120
big enough yet we'd like it to be bigger

00:31:43,840 --> 00:31:48,799
um so so yeah i think just just go and

00:31:47,120 --> 00:31:51,200
go and see what's out there would be one

00:31:48,799 --> 00:31:53,120
of my calls to action

00:31:51,200 --> 00:31:54,399
and it sort of goes back to the previous

00:31:53,120 --> 00:31:57,519
question as well because i

00:31:54,399 --> 00:31:58,480
you know i think usage is definitely

00:31:57,519 --> 00:31:59,919
going to grow

00:31:58,480 --> 00:32:02,240
ashley already mentioned the rust

00:31:59,919 --> 00:32:04,640
foundation i think the rust foundation

00:32:02,240 --> 00:32:06,559
uh is a is a great step forward you know

00:32:04,640 --> 00:32:09,200
there's this independent stewardship

00:32:06,559 --> 00:32:09,840
stewardship of the language um not to

00:32:09,200 --> 00:32:12,840
mention the

00:32:09,840 --> 00:32:14,080
the adoption by the uh the major sort of

00:32:12,840 --> 00:32:17,200
um

00:32:14,080 --> 00:32:17,600
the major hyperscale cloud players um as

00:32:17,200 --> 00:32:21,600
well

00:32:17,600 --> 00:32:23,120
so uh so so yeah um

00:32:21,600 --> 00:32:25,360
i don't know if i have anything better

00:32:23,120 --> 00:32:26,799
to say other than to just go go find the

00:32:25,360 --> 00:32:28,480
go find the open source projects that

00:32:26,799 --> 00:32:31,919
are out there and uh

00:32:28,480 --> 00:32:31,919
and find a way to get stuck in

00:32:33,760 --> 00:32:37,760
oliver does that make sense to you from

00:32:35,440 --> 00:32:40,880
the perspective of linkerdy

00:32:37,760 --> 00:32:42,399
yeah i mean where we've seen successes

00:32:40,880 --> 00:32:44,240
i know if you're a student summer of

00:32:42,399 --> 00:32:47,120
code is a great or or some of these kind

00:32:44,240 --> 00:32:49,279
of paid internships are great ways to

00:32:47,120 --> 00:32:50,240
get involved in open source and i i

00:32:49,279 --> 00:32:52,799
think definitely

00:32:50,240 --> 00:32:54,399
my strong advice is to go through the

00:32:52,799 --> 00:32:56,240
open source trying to

00:32:54,399 --> 00:32:57,840
um you know there's where you can read

00:32:56,240 --> 00:32:59,760
the most code and learn the most and

00:32:57,840 --> 00:33:02,240
there's usually like if you go to the

00:32:59,760 --> 00:33:03,919
um tokyo discord for instance it's like

00:33:02,240 --> 00:33:05,120
packed full of people talking about 30

00:33:03,919 --> 00:33:06,559
different projects

00:33:05,120 --> 00:33:08,159
and there's you know if you're

00:33:06,559 --> 00:33:12,320
interested there you can just soak up

00:33:08,159 --> 00:33:14,240
a lot of information just by watching um

00:33:12,320 --> 00:33:16,080
yeah i i think the cloud native

00:33:14,240 --> 00:33:18,480
computing foundation hosts now

00:33:16,080 --> 00:33:20,000
i think three or four rus projects if

00:33:18,480 --> 00:33:22,000
not more and so there's

00:33:20,000 --> 00:33:23,200
entries there they do some code projects

00:33:22,000 --> 00:33:26,880
every year

00:33:23,200 --> 00:33:27,440
um there's things like uh crosslit which

00:33:26,880 --> 00:33:29,519
is

00:33:27,440 --> 00:33:31,519
uh if you're interested in kubernetes is

00:33:29,519 --> 00:33:32,880
a way to

00:33:31,519 --> 00:33:34,559
use i think i think it's the

00:33:32,880 --> 00:33:37,279
intersection of wasm and rust

00:33:34,559 --> 00:33:38,240
and kublet uh which is pretty

00:33:37,279 --> 00:33:41,760
interesting

00:33:38,240 --> 00:33:44,240
um the name makes me laugh everyday

00:33:41,760 --> 00:33:45,760
yeah i mean like i i i mean i don't know

00:33:44,240 --> 00:33:46,480
the way i got into any of this stuff is

00:33:45,760 --> 00:33:48,799
like find

00:33:46,480 --> 00:33:50,240
the thing that you want to spend time on

00:33:48,799 --> 00:33:51,360
and if you find it a project that you

00:33:50,240 --> 00:33:52,799
actually want to spend time on you'll

00:33:51,360 --> 00:33:53,279
get good and you'll get involved in it

00:33:52,799 --> 00:33:54,960
and

00:33:53,279 --> 00:33:57,919
you know that usually will lead to

00:33:54,960 --> 00:33:59,519
something good hopefully

00:33:57,919 --> 00:34:01,039
one thing i worry about you know because

00:33:59,519 --> 00:34:04,080
i do know a little bit about

00:34:01,039 --> 00:34:06,000
uh linker d is that uh i think linkery

00:34:04,080 --> 00:34:08,079
could be a hard project to get started

00:34:06,000 --> 00:34:09,919
with you know it's like advanced rust

00:34:08,079 --> 00:34:11,040
and parsec may have some elements of

00:34:09,919 --> 00:34:13,280
that too

00:34:11,040 --> 00:34:15,119
are those are those actually good

00:34:13,280 --> 00:34:18,240
starting points

00:34:15,119 --> 00:34:20,159
well yeah to get re just get your feet

00:34:18,240 --> 00:34:23,359
wet like in the tokyo

00:34:20,159 --> 00:34:26,560
github we have mini redis which

00:34:23,359 --> 00:34:27,280
is a kind of educational um project

00:34:26,560 --> 00:34:30,720
that's trying to

00:34:27,280 --> 00:34:33,200
have a larger real um

00:34:30,720 --> 00:34:34,079
some like piece of software that you can

00:34:33,200 --> 00:34:35,839
um read

00:34:34,079 --> 00:34:38,079
it's well commented and it's also the

00:34:35,839 --> 00:34:39,440
foundation the tokyo guide so one like

00:34:38,079 --> 00:34:41,359
if it's just to get your feet wet you

00:34:39,440 --> 00:34:42,720
can go and like try to add a new

00:34:41,359 --> 00:34:43,200
implement a new redis command because

00:34:42,720 --> 00:34:45,040
there's a

00:34:43,200 --> 00:34:46,720
redis command for everything which is

00:34:45,040 --> 00:34:49,440
one reason why i was like let's do mini

00:34:46,720 --> 00:34:51,200
redis like any any educational

00:34:49,440 --> 00:34:52,480
topic we can find a writer's command to

00:34:51,200 --> 00:34:54,639
model it but

00:34:52,480 --> 00:34:55,520
um besides that i was gonna say before

00:34:54,639 --> 00:34:58,160
you jump from that

00:34:55,520 --> 00:34:59,280
i want to give carl a shout out because

00:34:58,160 --> 00:35:01,280
when i was running

00:34:59,280 --> 00:35:02,560
uh the developer experience team for

00:35:01,280 --> 00:35:04,079
cloudflare workers

00:35:02,560 --> 00:35:05,760
uh we were writing some of our tooling

00:35:04,079 --> 00:35:07,200
in rust and they were trying they're

00:35:05,760 --> 00:35:09,839
kind of struggling through

00:35:07,200 --> 00:35:11,680
uh you know learning tokyo and stuff not

00:35:09,839 --> 00:35:13,599
to critique tokyo anyway just

00:35:11,680 --> 00:35:16,960
as we've i think all said like it's a

00:35:13,599 --> 00:35:18,400
little hard um this mini redis project

00:35:16,960 --> 00:35:20,480
was just kicking off and

00:35:18,400 --> 00:35:21,520
carl actually worked with one of my new

00:35:20,480 --> 00:35:23,119
engineers um

00:35:21,520 --> 00:35:25,200
to do a little bit of stuff on that and

00:35:23,119 --> 00:35:27,920
it was huge for him

00:35:25,200 --> 00:35:29,520
uh just learning how to navigate tokyo

00:35:27,920 --> 00:35:32,720
and is now considered the tokyo

00:35:29,520 --> 00:35:34,800
expert on a lot of the restrooms um so

00:35:32,720 --> 00:35:37,040
that was a really awesome experience

00:35:34,800 --> 00:35:38,880
it was good to hear thanks every time

00:35:37,040 --> 00:35:39,760
i've tried to like i've had to learn

00:35:38,880 --> 00:35:41,040
async

00:35:39,760 --> 00:35:42,320
you know russ's evolved a lot in the

00:35:41,040 --> 00:35:44,079
last couple years and i've had to like

00:35:42,320 --> 00:35:45,839
learn async await or learn

00:35:44,079 --> 00:35:47,760
wasm and the way i learned these things

00:35:45,839 --> 00:35:51,040
is to write little toy programs like

00:35:47,760 --> 00:35:53,359
it doesn't have to be a top-line

00:35:51,040 --> 00:35:54,640
you know project or increase that io to

00:35:53,359 --> 00:35:56,640
be a good

00:35:54,640 --> 00:35:58,720
project to work on so i try to find

00:35:56,640 --> 00:35:59,440
little toy projects or tools to write

00:35:58,720 --> 00:36:01,920
for myself

00:35:59,440 --> 00:36:03,200
to learn things and yeah and yeah and i

00:36:01,920 --> 00:36:05,920
think the biggest

00:36:03,200 --> 00:36:07,359
like air missing gap again for me it's

00:36:05,920 --> 00:36:09,119
tooling and like little

00:36:07,359 --> 00:36:10,839
like just writing a little tool to do a

00:36:09,119 --> 00:36:14,640
little small thing that can help

00:36:10,839 --> 00:36:17,520
like the the build debugging or the

00:36:14,640 --> 00:36:19,040
like experience around building things

00:36:17,520 --> 00:36:20,560
like you're probably gonna

00:36:19,040 --> 00:36:22,400
try it out hit friction build a little

00:36:20,560 --> 00:36:24,400
tool to help it make it better and

00:36:22,400 --> 00:36:27,280
that will like there's a big need for

00:36:24,400 --> 00:36:30,000
that too

00:36:27,280 --> 00:36:30,800
uh i would also just shout out very

00:36:30,000 --> 00:36:33,680
quickly

00:36:30,800 --> 00:36:34,400
that um while they are by no means

00:36:33,680 --> 00:36:36,640
perfect

00:36:34,400 --> 00:36:38,560
uh if you're interested in learning rust

00:36:36,640 --> 00:36:41,760
we have the rust book

00:36:38,560 --> 00:36:44,000
and then uh when we did the 2018 edition

00:36:41,760 --> 00:36:46,000
back in 2018 we had kicked off what we

00:36:44,000 --> 00:36:49,119
called these domain working groups

00:36:46,000 --> 00:36:51,280
and they were able to um write these

00:36:49,119 --> 00:36:53,119
kind of intermediate level books

00:36:51,280 --> 00:36:55,119
so it's like oh you know rust but now

00:36:53,119 --> 00:36:57,440
you like want to do something with russ

00:36:55,119 --> 00:37:00,640
like where do i go after that book

00:36:57,440 --> 00:37:03,359
um and there's a book i we call the

00:37:00,640 --> 00:37:06,880
async book that's about networking

00:37:03,359 --> 00:37:09,599
there's also a webassembly one so i

00:37:06,880 --> 00:37:10,880
it can often be the trap and i'm a huge

00:37:09,599 --> 00:37:13,760
fan of this that like

00:37:10,880 --> 00:37:15,280
in order to get involved uh with open

00:37:13,760 --> 00:37:17,119
source you end up having to contribute

00:37:15,280 --> 00:37:18,240
to open source but that can be a super

00:37:17,119 --> 00:37:21,040
heavy lift for folks

00:37:18,240 --> 00:37:22,480
um you can also just build a wacky

00:37:21,040 --> 00:37:24,079
project like the

00:37:22,480 --> 00:37:25,920
the web assembly book for example has

00:37:24,079 --> 00:37:28,320
you build conway's game of life

00:37:25,920 --> 00:37:29,680
which honestly continues to be one of my

00:37:28,320 --> 00:37:30,880
favorite little projects i don't know

00:37:29,680 --> 00:37:33,119
you can do we've seen

00:37:30,880 --> 00:37:34,960
really cool like artsy variants on it

00:37:33,119 --> 00:37:37,359
that are just super awesome

00:37:34,960 --> 00:37:39,040
um but yeah you can also just feel free

00:37:37,359 --> 00:37:40,320
like when i wrote the original rust

00:37:39,040 --> 00:37:43,280
bridge curriculum

00:37:40,320 --> 00:37:44,000
um we we wrote a program that's like a

00:37:43,280 --> 00:37:46,240
simple

00:37:44,000 --> 00:37:48,320
website that will randomly give you a

00:37:46,240 --> 00:37:50,640
compliment every time you refresh it

00:37:48,320 --> 00:37:51,440
so just coming up with like a project

00:37:50,640 --> 00:37:53,680
that's fun

00:37:51,440 --> 00:37:55,200
i think is really the best don't feel

00:37:53,680 --> 00:37:57,920
like you have to

00:37:55,200 --> 00:37:59,920
you know necessarily like fix a bug in

00:37:57,920 --> 00:38:02,960
tokyo as your first step

00:37:59,920 --> 00:38:05,359
it's super super chill and in fact

00:38:02,960 --> 00:38:06,880
the rus the rust ecosystem is really

00:38:05,359 --> 00:38:08,880
excited for people building small

00:38:06,880 --> 00:38:09,200
projects and rust and so tweeting about

00:38:08,880 --> 00:38:11,680
it

00:38:09,200 --> 00:38:12,560
and like there's a huge community um

00:38:11,680 --> 00:38:15,680
yeah

00:38:12,560 --> 00:38:15,680
just do something you think is fun

00:38:15,760 --> 00:38:19,119
and even like get like the easy

00:38:17,839 --> 00:38:20,640
sometimes the easiest way to involve is

00:38:19,119 --> 00:38:24,160
submit apr that just

00:38:20,640 --> 00:38:26,640
fixes a typo like we love like i

00:38:24,160 --> 00:38:27,280
we love those and like oftentimes we'll

00:38:26,640 --> 00:38:28,720
see people come

00:38:27,280 --> 00:38:30,400
like i don't know it's just a typos like

00:38:28,720 --> 00:38:32,640
no just like a one character

00:38:30,400 --> 00:38:34,480
pr is great just first to get involved

00:38:32,640 --> 00:38:35,760
just open line of communication start

00:38:34,480 --> 00:38:37,280
talking with people

00:38:35,760 --> 00:38:39,200
or asking questions about the docs is

00:38:37,280 --> 00:38:40,480
even usually a really good signal just

00:38:39,200 --> 00:38:41,440
like i don't understand this explain

00:38:40,480 --> 00:38:45,119
this to me it can really

00:38:41,440 --> 00:38:45,119
help fill out the docs for projects

00:38:45,200 --> 00:38:48,640
all right so we're coming up on time so

00:38:47,040 --> 00:38:51,040
we're going to wrap it up with our

00:38:48,640 --> 00:38:52,960
you know final open-ended question uh

00:38:51,040 --> 00:38:53,359
from each of you which is if you could

00:38:52,960 --> 00:38:55,359
have

00:38:53,359 --> 00:38:57,520
embed one take-home message in the

00:38:55,359 --> 00:38:59,839
brains of our audience members

00:38:57,520 --> 00:39:00,640
what would that be uh and then let's do

00:38:59,839 --> 00:39:02,240
let's do the

00:39:00,640 --> 00:39:03,359
opposite order from what we did in the

00:39:02,240 --> 00:39:04,720
first question so we'll start with you

00:39:03,359 --> 00:39:07,119
oliver

00:39:04,720 --> 00:39:08,720
so every time i've talked about um

00:39:07,119 --> 00:39:10,800
lincoln's proxy over the past

00:39:08,720 --> 00:39:11,760
few kubecons and things like that i

00:39:10,800 --> 00:39:13,359
asked people to raise their hands if

00:39:11,760 --> 00:39:15,040
they tried rust and like

00:39:13,359 --> 00:39:17,359
a couple hands go up and i say like well

00:39:15,040 --> 00:39:19,599
wait two years all your hands will be up

00:39:17,359 --> 00:39:21,359
and then last year there's like a little

00:39:19,599 --> 00:39:24,240
bit more but i really think

00:39:21,359 --> 00:39:24,960
that um now is the time to start playing

00:39:24,240 --> 00:39:27,200
with rust

00:39:24,960 --> 00:39:28,720
it's ready for you and there's a lot of

00:39:27,200 --> 00:39:30,320
opportunities to still get involved and

00:39:28,720 --> 00:39:32,240
build cool things it's not like a

00:39:30,320 --> 00:39:33,920
finished ecosystem

00:39:32,240 --> 00:39:35,839
but it is a lot more welcoming than it

00:39:33,920 --> 00:39:38,400
was a few years ago so

00:39:35,839 --> 00:39:39,599
if systems programming is something that

00:39:38,400 --> 00:39:41,599
interests you

00:39:39,599 --> 00:39:42,640
please come get involved talk to any of

00:39:41,599 --> 00:39:44,240
the communities

00:39:42,640 --> 00:39:48,000
for the folks here or other rest

00:39:44,240 --> 00:39:51,440
projects it's a very welcoming space

00:39:48,000 --> 00:39:54,800
carl how about you um

00:39:51,440 --> 00:39:56,240
well i think russ is not the best tool

00:39:54,800 --> 00:39:58,160
for every single job in

00:39:56,240 --> 00:40:00,320
programming i'm not going to say that

00:39:58,160 --> 00:40:03,760
but i think the

00:40:00,320 --> 00:40:07,040
span of use cases that it can be really

00:40:03,760 --> 00:40:09,520
good for is going is larger than

00:40:07,040 --> 00:40:10,880
some people might think so we say

00:40:09,520 --> 00:40:13,920
systems programming a lot

00:40:10,880 --> 00:40:14,880
um but even like maybe even a web

00:40:13,920 --> 00:40:17,359
application

00:40:14,880 --> 00:40:18,160
like that might be a good fit because of

00:40:17,359 --> 00:40:20,720
how like

00:40:18,160 --> 00:40:21,920
built like i've seen people like rewrite

00:40:20,720 --> 00:40:24,880
python

00:40:21,920 --> 00:40:25,359
um like a python web app to rust and

00:40:24,880 --> 00:40:26,319
they

00:40:25,359 --> 00:40:28,560
say like they reduce their

00:40:26,319 --> 00:40:31,520
infrastructure costs by like 10x

00:40:28,560 --> 00:40:32,160
so the it's like russ is getting easier

00:40:31,520 --> 00:40:34,000
to use

00:40:32,160 --> 00:40:35,839
it's gonna like it's there's still

00:40:34,000 --> 00:40:38,960
improvements to be made but every

00:40:35,839 --> 00:40:40,319
you know month we're pushing out fixes

00:40:38,960 --> 00:40:43,040
and improvements and

00:40:40,319 --> 00:40:43,920
give it a shot now um if it's seeing if

00:40:43,040 --> 00:40:45,760
you hit off

00:40:43,920 --> 00:40:48,319
off something like let us know because

00:40:45,760 --> 00:40:52,079
we can't fix things that we don't know

00:40:48,319 --> 00:40:55,119
um but yeah like now now's the best time

00:40:52,079 --> 00:40:58,800
it's ever been to try rust

00:40:55,119 --> 00:40:58,800
love it paul how about you

00:40:58,960 --> 00:41:03,839
um yeah i think i well for start i agree

00:41:02,480 --> 00:41:05,760
with with all of that

00:41:03,839 --> 00:41:07,040
uh the other thing i'd say i guess is i

00:41:05,760 --> 00:41:10,240
i'd echo what i said

00:41:07,040 --> 00:41:12,480
um right at the start uh don't

00:41:10,240 --> 00:41:13,280
don't think of the the learning curve

00:41:12,480 --> 00:41:15,839
into rust

00:41:13,280 --> 00:41:17,599
as as pure overhead right it's exactly

00:41:15,839 --> 00:41:20,400
as ashley was saying is it's it's

00:41:17,599 --> 00:41:21,599
investment in the right place um

00:41:20,400 --> 00:41:23,839
you know don't don't worry about

00:41:21,599 --> 00:41:25,680
fighting the you you should celebrate

00:41:23,839 --> 00:41:26,960
fighting the borrow check and not

00:41:25,680 --> 00:41:28,880
don't be put off by fighting the

00:41:26,960 --> 00:41:32,240
borrower checker it's um

00:41:28,880 --> 00:41:34,079
you know you're you're you're going

00:41:32,240 --> 00:41:37,920
through the pain at the right time and

00:41:34,079 --> 00:41:40,240
and saving yourself um a lot

00:41:37,920 --> 00:41:41,280
in the long run um and it's a beautiful

00:41:40,240 --> 00:41:42,720
language as well

00:41:41,280 --> 00:41:45,359
i have to keep plugging for that because

00:41:42,720 --> 00:41:47,040
it does that that message does get lost

00:41:45,359 --> 00:41:48,560
in amongst all of the um

00:41:47,040 --> 00:41:50,880
all of the other messaging around last

00:41:48,560 --> 00:41:53,920
rust you know incredibly

00:41:50,880 --> 00:41:56,560
um incredibly expressively powerful

00:41:53,920 --> 00:41:58,880
um and uh and very beautiful once you're

00:41:56,560 --> 00:41:58,880
into it

00:41:59,599 --> 00:42:06,400
very nice ashley want to close this out

00:42:02,960 --> 00:42:07,520
uh yeah so it says what's my take home

00:42:06,400 --> 00:42:11,040
message but i might

00:42:07,520 --> 00:42:12,960
uh reach for some words from from julia

00:42:11,040 --> 00:42:14,800
evans also known as bork

00:42:12,960 --> 00:42:16,000
online she does a lot of great scenes

00:42:14,800 --> 00:42:19,119
particularly around systems

00:42:16,000 --> 00:42:21,280
programming and she did one about rust

00:42:19,119 --> 00:42:22,400
and what she said about rust is that

00:42:21,280 --> 00:42:26,880
rust makes

00:42:22,400 --> 00:42:30,000
improbable programs possible

00:42:26,880 --> 00:42:33,040
and then she also says that rust

00:42:30,000 --> 00:42:34,240
makes her think hey maybe i could write

00:42:33,040 --> 00:42:36,560
that program

00:42:34,240 --> 00:42:39,119
and i think there's two kind of messages

00:42:36,560 --> 00:42:41,520
of like hope and empowerment in there

00:42:39,119 --> 00:42:42,640
one is uh you know in the future we're

00:42:41,520 --> 00:42:44,720
going to see

00:42:42,640 --> 00:42:46,079
more systems programmers so if you're

00:42:44,720 --> 00:42:48,319
someone who never

00:42:46,079 --> 00:42:49,200
thought like you could be a systems

00:42:48,319 --> 00:42:52,240
programmer

00:42:49,200 --> 00:42:54,800
for any number of reasons like

00:42:52,240 --> 00:42:55,520
rust exists to try to convince you

00:42:54,800 --> 00:42:58,319
otherwise

00:42:55,520 --> 00:42:58,960
that it can help you do that and that in

00:42:58,319 --> 00:43:00,560
addition

00:42:58,960 --> 00:43:02,319
types of programs that we would

00:43:00,560 --> 00:43:04,079
otherwise think were

00:43:02,319 --> 00:43:06,880
not really possible for example i think

00:43:04,079 --> 00:43:08,000
about the parallelization effort of the

00:43:06,880 --> 00:43:11,359
css engine

00:43:08,000 --> 00:43:12,960
in uh firefox for example like literally

00:43:11,359 --> 00:43:13,440
tried to do it a ton of times and just

00:43:12,960 --> 00:43:15,760
like

00:43:13,440 --> 00:43:17,440
couldn't do it and then they decided oh

00:43:15,760 --> 00:43:19,040
we should probably like write a new

00:43:17,440 --> 00:43:20,480
programming language to do this or like

00:43:19,040 --> 00:43:22,800
wow okay um

00:43:20,480 --> 00:43:24,240
russ made that possible and so i think

00:43:22,800 --> 00:43:26,319
there's going to be

00:43:24,240 --> 00:43:28,480
new types of programs out there that are

00:43:26,319 --> 00:43:30,079
going to happen because of rust

00:43:28,480 --> 00:43:32,480
and we're going to have a lot more

00:43:30,079 --> 00:43:34,160
people uh writing them and i think that

00:43:32,480 --> 00:43:35,760
that's particularly exciting and if you

00:43:34,160 --> 00:43:40,560
want to be a part of that

00:43:35,760 --> 00:43:40,560

YouTube URL: https://www.youtube.com/watch?v=8oOiqbxGu0U


