Title: Apache Teaclave (incubating): An Open Source Universal Secure Computing Platform in... Mingshen Sun
Publication date: 2021-05-03
Playlist: Cloud Native Rust Day EU 2021
Description: 
	Donâ€™t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon North America 2021 in Los Angeles, CA from October 12-15. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Apache Teaclave (incubating): An Open Source Universal Secure Computing Platform in Rust - Mingshen Sun, Baidu

Apache Teaclave (incubating) is a universal secure computing platform written in Rust, making computation on privacy-sensitive data on cloud safe and secure. Teaclave adopts multiple security technologies to enable secure computing, in particular, Teaclave is written in Rust to prevent memory-safety issues. It uses Intel SGX to serve the most security-sensitive tasks with hardware-based isolation, memory encryption and attestation. Teaclave is a function-as-a-service platform. With many built-in functions, it also supports a wide variety of tasks on sensitive data like privacy preserving machine learning, private set intersection, etc. Unlike traditional FaaS, Teaclave supports both general secure computing tasks and flexible single- and multi-party secure computation. In this talk, Mingshen will talk about the background, design and how Rust empowers Teaclave's implementation.
Captions: 
	00:00:00,080 --> 00:00:04,880
hello everyone my name is ming chun sun

00:00:02,960 --> 00:00:07,200
from baidu security

00:00:04,880 --> 00:00:08,960
on behalf of the tequila community today

00:00:07,200 --> 00:00:11,200
i will talk about our open source

00:00:08,960 --> 00:00:15,040
universal secure computing platform

00:00:11,200 --> 00:00:17,039
written in rust tcleaf

00:00:15,040 --> 00:00:19,039
i'll start with this background and then

00:00:17,039 --> 00:00:19,760
briefly introduce current status and

00:00:19,039 --> 00:00:22,880
some highlight

00:00:19,760 --> 00:00:25,279
of degree project then i will provide

00:00:22,880 --> 00:00:27,199
some details of the ticket of internals

00:00:25,279 --> 00:00:28,880
and last i will talk about how to get

00:00:27,199 --> 00:00:32,320
involved and present

00:00:28,880 --> 00:00:34,800
the tclub community okay let's get

00:00:32,320 --> 00:00:34,800
started

00:00:35,040 --> 00:00:38,399
emerging technologies of big data

00:00:37,280 --> 00:00:40,800
analytics

00:00:38,399 --> 00:00:41,600
machine learning cloud and edge

00:00:40,800 --> 00:00:44,239
computing

00:00:41,600 --> 00:00:46,079
and blockchain are leading significant

00:00:44,239 --> 00:00:47,760
progress in our society

00:00:46,079 --> 00:00:50,559
but they are also bringing

00:00:47,760 --> 00:00:53,440
confidentiality in the security issues

00:00:50,559 --> 00:00:55,120
on public cloud and blockchain sensitive

00:00:53,440 --> 00:00:56,160
data like health and the financial

00:00:55,120 --> 00:00:59,039
records may be

00:00:56,160 --> 00:01:00,719
exploited at runtime by untrusted

00:00:59,039 --> 00:01:04,000
computing processes

00:01:00,719 --> 00:01:06,000
running on compromised platform

00:01:04,000 --> 00:01:07,840
during in-house data exchange

00:01:06,000 --> 00:01:10,320
configuration information across

00:01:07,840 --> 00:01:11,439
different clearance boundaries and

00:01:10,320 --> 00:01:14,080
possibly

00:01:11,439 --> 00:01:15,840
fall into the wrong hands also not to

00:01:14,080 --> 00:01:17,119
mention the privacy issue arising

00:01:15,840 --> 00:01:21,360
offshore data

00:01:17,119 --> 00:01:24,479
supply chain and other than data privacy

00:01:21,360 --> 00:01:27,200
uh the models algorithm they

00:01:24,479 --> 00:01:28,479
themselves also need to be well

00:01:27,200 --> 00:01:31,119
protected

00:01:28,479 --> 00:01:32,799
once leaked attackers can steal

00:01:31,119 --> 00:01:34,799
intellectual properties

00:01:32,799 --> 00:01:37,600
or launch white box attack and easily

00:01:34,799 --> 00:01:41,759
exploit the weakness of the models

00:01:37,600 --> 00:01:44,479
fixing all this kind of risky scenarios

00:01:41,759 --> 00:01:44,799
we are in desperate need of a trusted

00:01:44,479 --> 00:01:48,240
and

00:01:44,799 --> 00:01:51,840
secure mechanism enabling us to protect

00:01:48,240 --> 00:01:52,170
both private data and computing models

00:01:51,840 --> 00:01:53,360
during

00:01:52,170 --> 00:01:56,000
[Music]

00:01:53,360 --> 00:01:57,840
marketable execution in potential and

00:01:56,000 --> 00:02:00,719
safe environment

00:01:57,840 --> 00:02:02,079
yet preserving functionalities

00:02:00,719 --> 00:02:06,399
performance

00:02:02,079 --> 00:02:06,399
compatibility and flexibility

00:02:06,840 --> 00:02:10,640
flexibility as

00:02:08,319 --> 00:02:11,680
illustrated in this figure secure

00:02:10,640 --> 00:02:14,800
computing

00:02:11,680 --> 00:02:15,360
provides a solution for the attractions

00:02:14,800 --> 00:02:18,160
a

00:02:15,360 --> 00:02:19,360
secure execution environment that

00:02:18,160 --> 00:02:22,480
redefines a

00:02:19,360 --> 00:02:23,599
big data business model even if data and

00:02:22,480 --> 00:02:26,720
model

00:02:23,599 --> 00:02:30,239
originated from different parties with

00:02:26,720 --> 00:02:32,560
no mutual trust confidentiality

00:02:30,239 --> 00:02:34,000
and integrity can still be effectively

00:02:32,560 --> 00:02:37,360
protected

00:02:34,000 --> 00:02:39,840
moreover it significantly reduces uh

00:02:37,360 --> 00:02:40,879
trusted computing base and makes the

00:02:39,840 --> 00:02:46,319
whole

00:02:40,879 --> 00:02:48,560
stack easily auditable and verifiable

00:02:46,319 --> 00:02:49,760
secure computing also called

00:02:48,560 --> 00:02:53,760
confidential

00:02:49,760 --> 00:02:57,040
con computing is to provide a secure

00:02:53,760 --> 00:02:57,680
place and safe place for multi-party to

00:02:57,040 --> 00:03:01,040
compute

00:02:57,680 --> 00:03:01,680
on sensitive data trusted execution

00:03:01,040 --> 00:03:04,879
environment

00:03:01,680 --> 00:03:06,560
or te is one of the technology for

00:03:04,879 --> 00:03:09,680
secure computing

00:03:06,560 --> 00:03:13,599
it provides hardware-based isolation

00:03:09,680 --> 00:03:18,800
memory encryption and attestation

00:03:13,599 --> 00:03:23,360
for example intel sgx arm transom and

00:03:18,800 --> 00:03:24,959
amd scv te implementations by different

00:03:23,360 --> 00:03:28,000
vendors

00:03:24,959 --> 00:03:30,080
in nutshell developer need to separate

00:03:28,000 --> 00:03:32,799
the program into two parts

00:03:30,080 --> 00:03:33,840
one in untrusted world and another in

00:03:32,799 --> 00:03:36,640
secure world

00:03:33,840 --> 00:03:37,760
or trusted world to process sensitive

00:03:36,640 --> 00:03:40,879
data

00:03:37,760 --> 00:03:41,840
within the te with all the security

00:03:40,879 --> 00:03:45,200
guarantees

00:03:41,840 --> 00:03:48,640
by te so right now

00:03:45,200 --> 00:03:51,519
service providers like microsoft azure

00:03:48,640 --> 00:03:52,640
google cloud and ibm cloud have already

00:03:51,519 --> 00:03:57,599
provided the

00:03:52,640 --> 00:03:57,599
vm products on their uh cloud

00:03:57,680 --> 00:04:02,400
the goal of dkiv is to create a

00:04:00,799 --> 00:04:05,599
framework

00:04:02,400 --> 00:04:08,480
or platform that allows programmer to

00:04:05,599 --> 00:04:11,200
concentrate on business logic and

00:04:08,480 --> 00:04:12,319
automate small production of their code

00:04:11,200 --> 00:04:15,120
and data

00:04:12,319 --> 00:04:16,479
without worrying about technology detail

00:04:15,120 --> 00:04:20,400
technical detail

00:04:16,479 --> 00:04:23,520
of t development programmers

00:04:20,400 --> 00:04:24,320
or users only need to focus on sensitive

00:04:23,520 --> 00:04:27,680
data

00:04:24,320 --> 00:04:30,639
business logic and their interface

00:04:27,680 --> 00:04:31,919
between users and the platforms the

00:04:30,639 --> 00:04:35,759
platform manages

00:04:31,919 --> 00:04:39,120
data and executes business logic

00:04:35,759 --> 00:04:43,280
in pe computing units deploy

00:04:39,120 --> 00:04:46,320
iso distributed system

00:04:43,280 --> 00:04:50,080
so when implementing

00:04:46,320 --> 00:04:52,000
the tclav we have several

00:04:50,080 --> 00:04:54,160
requirements for the programming

00:04:52,000 --> 00:04:57,840
languages in mind

00:04:54,160 --> 00:05:00,960
the first one is memory safety um

00:04:57,840 --> 00:05:04,720
as we all know a memory safety issue uh

00:05:00,960 --> 00:05:09,039
in in current application development

00:05:04,720 --> 00:05:12,160
can cause uh uh dangerous damage

00:05:09,039 --> 00:05:14,639
but the memory safety issue in the

00:05:12,160 --> 00:05:17,360
trusted execution environment can break

00:05:14,639 --> 00:05:20,400
all security guarantees provided by

00:05:17,360 --> 00:05:22,000
hardware historically we have seen that

00:05:20,400 --> 00:05:25,039
memory safety vulnerabilities

00:05:22,000 --> 00:05:29,600
of te written in c and c purpose

00:05:25,039 --> 00:05:32,160
can lead to sensitive data leakage

00:05:29,600 --> 00:05:35,199
another property we want to achieve is

00:05:32,160 --> 00:05:38,240
they are efficiency

00:05:35,199 --> 00:05:39,280
because tea is a resource constraint

00:05:38,240 --> 00:05:42,320
environment

00:05:39,280 --> 00:05:45,039
and we have limited memory and io

00:05:42,320 --> 00:05:48,479
capabilities

00:05:45,039 --> 00:05:51,520
we need to have a minimal

00:05:48,479 --> 00:05:55,120
runtime and also for

00:05:51,520 --> 00:05:55,759
security we want to have a deterministic

00:05:55,120 --> 00:05:58,800
runtime

00:05:55,759 --> 00:06:04,080
to ensure the computationality of

00:05:58,800 --> 00:06:04,080
privacy data and integrity of code

00:06:04,160 --> 00:06:07,759
in these security properties also be

00:06:06,720 --> 00:06:13,039
remotely

00:06:07,759 --> 00:06:13,039
attested by end users

00:06:14,240 --> 00:06:21,600
so that's why we choose rust

00:06:17,680 --> 00:06:25,199
rust has uh has a strong type system

00:06:21,600 --> 00:06:28,000
to guarantee the memory safety of the

00:06:25,199 --> 00:06:28,880
program so it can be statistically

00:06:28,000 --> 00:06:32,479
compiled

00:06:28,880 --> 00:06:35,520
and has a small runtime

00:06:32,479 --> 00:06:38,800
so the rust ecosystem

00:06:35,520 --> 00:06:42,160
is ready for cloud computing and have

00:06:38,800 --> 00:06:44,280
many uh third-party libraries for

00:06:42,160 --> 00:06:46,720
uh rpcs

00:06:44,280 --> 00:06:50,319
[Music]

00:06:46,720 --> 00:06:53,520
and such cloud and computing

00:06:50,319 --> 00:06:56,720
need capabilities the community of

00:06:53,520 --> 00:06:59,599
us is also very healthy and strong to

00:06:56,720 --> 00:06:59,599
support our

00:07:00,840 --> 00:07:05,360
development

00:07:02,319 --> 00:07:08,400
so then let me summarize c clave

00:07:05,360 --> 00:07:10,639
or t apache take wave as open source or

00:07:08,400 --> 00:07:14,479
universal secure computing platform

00:07:10,639 --> 00:07:18,240
uh retain rust makes a computation on

00:07:14,479 --> 00:07:20,960
privacy sensitive data safe and simple

00:07:18,240 --> 00:07:21,599
so this project originally developed it

00:07:20,960 --> 00:07:25,039
baidu

00:07:21,599 --> 00:07:25,800
as known as my city was open sourced in

00:07:25,039 --> 00:07:30,080
july

00:07:25,800 --> 00:07:33,599
2019 and then we donated the uh

00:07:30,080 --> 00:07:38,440
project along with rust sjx sdk

00:07:33,599 --> 00:07:41,440
to apache software foundation in august

00:07:38,440 --> 00:07:43,759
2019 and changed the project name to

00:07:41,440 --> 00:07:47,199
tclef

00:07:43,759 --> 00:07:51,199
uh 2021 this year

00:07:47,199 --> 00:07:55,360
uh we also donated russ the opt

00:07:51,199 --> 00:07:58,400
trustum sdk to tclav as the subject

00:07:55,360 --> 00:08:02,160
so right now the tk have

00:07:58,400 --> 00:08:07,840
ability to write d e

00:08:02,160 --> 00:08:10,240
in intel sgx and amp trust zone

00:08:07,840 --> 00:08:11,680
and currently declave is under the

00:08:10,240 --> 00:08:15,120
apache incubator

00:08:11,680 --> 00:08:17,840
and the open source in the apache way

00:08:15,120 --> 00:08:18,800
i will introduce some highlights next

00:08:17,840 --> 00:08:21,039
you can visit

00:08:18,800 --> 00:08:23,680
our home page and the repositories to

00:08:21,039 --> 00:08:23,680
learn more

00:08:25,280 --> 00:08:31,199
pcrave have four um basic

00:08:28,560 --> 00:08:32,800
um highlights the first one is

00:08:31,199 --> 00:08:35,839
functionality

00:08:32,800 --> 00:08:38,719
uh to give a

00:08:35,839 --> 00:08:40,000
convenient interface for end users ticle

00:08:38,719 --> 00:08:42,479
is provided as a

00:08:40,000 --> 00:08:44,080
functionality service platform with many

00:08:42,479 --> 00:08:46,320
building functions

00:08:44,080 --> 00:08:47,920
it supports tasks like machine learning

00:08:46,320 --> 00:08:51,440
private settings section

00:08:47,920 --> 00:08:54,160
crypto communication actual actual

00:08:51,440 --> 00:08:56,399
addition developer can also deploy and

00:08:54,160 --> 00:08:58,880
execute python scripts in

00:08:56,399 --> 00:09:00,720
dk but more importantly unlike

00:08:58,880 --> 00:09:04,000
traditional functional service

00:09:00,720 --> 00:09:05,360
platform decay supports both general

00:09:04,000 --> 00:09:08,240
secure computing tasks

00:09:05,360 --> 00:09:10,560
and flexible single and multi-party

00:09:08,240 --> 00:09:14,240
secure computation

00:09:10,560 --> 00:09:16,640
so for security we adopt multiple uh

00:09:14,240 --> 00:09:17,760
security technologies to enable secure

00:09:16,640 --> 00:09:21,279
computing

00:09:17,760 --> 00:09:22,399
in particular degree use entire cx i'm

00:09:21,279 --> 00:09:24,399
trust zone to serve

00:09:22,399 --> 00:09:26,240
most secure sensitive tasks with

00:09:24,399 --> 00:09:26,880
hardware based isolation memory

00:09:26,240 --> 00:09:30,240
encryption

00:09:26,880 --> 00:09:32,000
and the test station also tclab is

00:09:30,240 --> 00:09:35,760
written in rust to prevent

00:09:32,000 --> 00:09:37,600
any memory safety issues for usability

00:09:35,760 --> 00:09:38,640
degradability is components in

00:09:37,600 --> 00:09:41,360
containers

00:09:38,640 --> 00:09:42,160
uh therefore it can be deployed both

00:09:41,360 --> 00:09:45,279
locally and

00:09:42,160 --> 00:09:47,360
within cloud infrastructures and tickle

00:09:45,279 --> 00:09:50,760
also provide convenient and

00:09:47,360 --> 00:09:55,279
endpoint apis client sdk in

00:09:50,760 --> 00:09:58,959
a lot of languages and

00:09:55,279 --> 00:09:58,959
also command line tools

00:09:59,040 --> 00:10:03,920
and last modularity components in

00:10:01,760 --> 00:10:05,279
particular are designed in modular and

00:10:03,920 --> 00:10:07,760
some components can

00:10:05,279 --> 00:10:09,120
uh like remote attestation can be easily

00:10:07,760 --> 00:10:12,959
embedded in other

00:10:09,120 --> 00:10:15,279
projects in addition tk hdx sdk

00:10:12,959 --> 00:10:16,079
and the personal sdk can be used

00:10:15,279 --> 00:10:19,519
separate

00:10:16,079 --> 00:10:20,240
separately to write standalone sjs

00:10:19,519 --> 00:10:22,640
enclave

00:10:20,240 --> 00:10:25,120
and the trisome application for other

00:10:22,640 --> 00:10:25,120
purpose

00:10:26,399 --> 00:10:29,600
so since tclav is a functionality

00:10:28,399 --> 00:10:32,640
service platform

00:10:29,600 --> 00:10:36,000
user only need to consider about

00:10:32,640 --> 00:10:39,760
functions business logic and

00:10:36,000 --> 00:10:41,680
participants when can the user have

00:10:39,760 --> 00:10:45,200
determined about three factors

00:10:41,680 --> 00:10:47,120
they can follow this step to execute

00:10:45,200 --> 00:10:50,320
tasks on excessive data

00:10:47,120 --> 00:10:54,160
in sgx just like a

00:10:50,320 --> 00:10:56,880
normal function service platform

00:10:54,160 --> 00:10:58,000
first they register data and function to

00:10:56,880 --> 00:11:00,720
the platform

00:10:58,000 --> 00:11:01,519
and then create and run tasks at last

00:11:00,720 --> 00:11:04,800
you can get

00:11:01,519 --> 00:11:05,519
execution results from the platform apis

00:11:04,800 --> 00:11:09,760
are pretty

00:11:05,519 --> 00:11:15,839
easy we provide say rust python and even

00:11:09,760 --> 00:11:18,320
events with client sdks

00:11:15,839 --> 00:11:19,040
now currently services uh are

00:11:18,320 --> 00:11:22,480
implemented

00:11:19,040 --> 00:11:25,519
in sgx enclaves and written

00:11:22,480 --> 00:11:29,040
in rust and we have several

00:11:25,519 --> 00:11:30,560
services of in front-end core services

00:11:29,040 --> 00:11:33,120
and workers

00:11:30,560 --> 00:11:34,560
they are authentication services service

00:11:33,120 --> 00:11:36,320
front-end service

00:11:34,560 --> 00:11:38,320
storage service management service

00:11:36,320 --> 00:11:41,360
scheduler service access control

00:11:38,320 --> 00:11:44,560
and execution services

00:11:41,360 --> 00:11:47,920
we separate it into three domains and

00:11:44,560 --> 00:11:51,519
to manage the data and make sure uh

00:11:47,920 --> 00:11:57,839
sensitive data can only be stuck around

00:11:51,519 --> 00:11:57,839
inside one domain

00:11:58,880 --> 00:12:05,279
services are communicated with rpcs

00:12:02,639 --> 00:12:07,279
and here are some interfaces defined in

00:12:05,279 --> 00:12:10,320
protobuf

00:12:07,279 --> 00:12:13,680
i will skip this details here

00:12:10,320 --> 00:12:15,839
but you if you are interested in these

00:12:13,680 --> 00:12:16,720
communication interface you can see the

00:12:15,839 --> 00:12:19,440
protobuf

00:12:16,720 --> 00:12:19,440
definitions

00:12:23,680 --> 00:12:29,360
so here's some uh here's a brief

00:12:26,720 --> 00:12:30,160
introduction of the interfaces between

00:12:29,360 --> 00:12:33,279
each

00:12:30,160 --> 00:12:36,079
service basically clients communicate

00:12:33,279 --> 00:12:36,880
authenticate their id confidential

00:12:36,079 --> 00:12:39,839
credential

00:12:36,880 --> 00:12:40,800
to get a session key this session key

00:12:39,839 --> 00:12:43,200
will be used

00:12:40,800 --> 00:12:44,079
later to communicate with the front-end

00:12:43,200 --> 00:12:47,040
service

00:12:44,079 --> 00:12:47,839
incline the then client then register

00:12:47,040 --> 00:12:50,959
data

00:12:47,839 --> 00:12:54,399
and function if needed and assigned

00:12:50,959 --> 00:12:57,440
approve invoke task clients

00:12:54,399 --> 00:13:01,200
can also get information of functions

00:12:57,440 --> 00:13:04,880
tasks foreign service will

00:13:01,200 --> 00:13:08,000
redirect our valid requests

00:13:04,880 --> 00:13:11,920
to the management service

00:13:08,000 --> 00:13:15,040
and the management service get also an

00:13:11,920 --> 00:13:18,639
authorization of data function

00:13:15,040 --> 00:13:21,680
usage and task invocation

00:13:18,639 --> 00:13:23,120
and then persist a function data tags

00:13:21,680 --> 00:13:26,800
into database

00:13:23,120 --> 00:13:28,560
in the storage service and the scheduler

00:13:26,800 --> 00:13:31,760
service will fetch

00:13:28,560 --> 00:13:35,360
any uh functions data

00:13:31,760 --> 00:13:38,880
tasks needed to be executed in the queue

00:13:35,360 --> 00:13:42,480
and dispatch tasks

00:13:38,880 --> 00:13:46,160
into execution services

00:13:42,480 --> 00:13:47,440
so the execution service and scheduler

00:13:46,160 --> 00:13:51,440
service use

00:13:47,440 --> 00:13:55,199
subscribe and the pool model

00:13:51,440 --> 00:13:58,480
execution service can get a

00:13:55,199 --> 00:14:02,160
task and execute it

00:13:58,480 --> 00:14:04,399
after executing the function the result

00:14:02,160 --> 00:14:06,320
will be update and the processing

00:14:04,399 --> 00:14:10,399
storage service

00:14:06,320 --> 00:14:10,959
so a synchronizedly um clients can get a

00:14:10,399 --> 00:14:14,839
result

00:14:10,959 --> 00:14:17,600
later so that's the

00:14:14,839 --> 00:14:18,639
simple interfaces between different

00:14:17,600 --> 00:14:22,720
service

00:14:18,639 --> 00:14:24,959
as you can see the interface

00:14:22,720 --> 00:14:25,920
interfaces between service are pretty

00:14:24,959 --> 00:14:31,839
simple

00:14:25,920 --> 00:14:31,839
and it designed in in cloud

00:14:32,160 --> 00:14:35,839
and you can deploy this uh service in

00:14:35,040 --> 00:14:39,120
dockers

00:14:35,839 --> 00:14:41,839
and uh in the orc in your cloud

00:14:39,120 --> 00:14:41,839
infrastructure

00:14:42,800 --> 00:14:50,160
to get started with tcleaf

00:14:45,839 --> 00:14:53,199
we provide extensive documentations

00:14:50,160 --> 00:14:56,240
including to first

00:14:53,199 --> 00:15:00,000
try the functions how to write

00:14:56,240 --> 00:15:04,320
functions in python and how to add

00:15:00,000 --> 00:15:07,680
building functions written in rust and

00:15:04,320 --> 00:15:10,399
also we provide documentations to

00:15:07,680 --> 00:15:11,440
describe of designs and implementations

00:15:10,399 --> 00:15:14,720
in details

00:15:11,440 --> 00:15:18,160
like us our threat model and

00:15:14,720 --> 00:15:21,519
how how the mutual attestation between

00:15:18,160 --> 00:15:24,959
in our platform and

00:15:21,519 --> 00:15:28,399
access to control modules

00:15:24,959 --> 00:15:31,759
and our build systems

00:15:28,399 --> 00:15:35,199
for rust and some

00:15:31,759 --> 00:15:38,480
other internals of implementation

00:15:35,199 --> 00:15:42,560
of tk service so if you

00:15:38,480 --> 00:15:45,920
want to read the code for each

00:15:42,560 --> 00:15:46,560
code based directories we also have a

00:15:45,920 --> 00:15:51,120
readme

00:15:46,560 --> 00:15:51,120
to help you to get you through the code

00:15:52,720 --> 00:15:55,920
the let at last let me give an overview

00:15:55,440 --> 00:15:59,279
of

00:15:55,920 --> 00:15:59,279
the ticker community

00:15:59,360 --> 00:16:03,519
since tikilev is a huge project which

00:16:02,079 --> 00:16:06,839
have multiple layers

00:16:03,519 --> 00:16:08,639
many users can get involved in the

00:16:06,839 --> 00:16:11,839
community platform

00:16:08,639 --> 00:16:14,240
users can use the tk platform directly

00:16:11,839 --> 00:16:15,600
for example deploy the system in private

00:16:14,240 --> 00:16:19,120
infrastructure

00:16:15,600 --> 00:16:19,519
and some other users may prefer to only

00:16:19,120 --> 00:16:22,560
use

00:16:19,519 --> 00:16:23,759
one standalone service for example our

00:16:22,560 --> 00:16:27,279
storage service

00:16:23,759 --> 00:16:30,560
execution service and so on also

00:16:27,279 --> 00:16:31,680
a lot of project using our attestation

00:16:30,560 --> 00:16:34,480
implementations

00:16:31,680 --> 00:16:36,079
and of course some users directly use

00:16:34,480 --> 00:16:38,160
rust xtx sdk

00:16:36,079 --> 00:16:40,160
and trustor sdk to build their own

00:16:38,160 --> 00:16:44,160
applications

00:16:40,160 --> 00:16:50,240
so we are pretty open to different users

00:16:44,160 --> 00:16:52,959
to meet their various needs

00:16:50,240 --> 00:16:53,519
particular community have also supported

00:16:52,959 --> 00:16:56,959
many

00:16:53,519 --> 00:16:59,839
other projects like commercial products

00:16:56,959 --> 00:17:03,120
academic research projects and some

00:16:59,839 --> 00:17:06,319
other open source projects

00:17:03,120 --> 00:17:09,679
you can see from our uh home page

00:17:06,319 --> 00:17:12,400
uh there's page called um powered by

00:17:09,679 --> 00:17:13,520
in the community you can see uh like

00:17:12,400 --> 00:17:18,000
organizations

00:17:13,520 --> 00:17:22,000
like baidu uh by dance enigma

00:17:18,000 --> 00:17:25,360
and the projects like uh advanced

00:17:22,000 --> 00:17:29,200
uh unified crypto chain uh

00:17:25,360 --> 00:17:33,360
outcome uh and so on so first i will not

00:17:29,200 --> 00:17:36,480
uh try to uh

00:17:33,360 --> 00:17:37,440
list them now so they are all using

00:17:36,480 --> 00:17:40,799
tclav

00:17:37,440 --> 00:17:46,080
either the platform and the library

00:17:40,799 --> 00:17:49,360
of rust sgx ultrasound sdk

00:17:46,080 --> 00:17:53,679
overall we encourage all people in the

00:17:49,360 --> 00:17:53,679
rust committee and in the

00:17:53,720 --> 00:17:58,720
sdxt community to come in and get

00:17:58,840 --> 00:18:01,840
involved

00:18:02,240 --> 00:18:05,520
so i last i want to put more information

00:18:05,120 --> 00:18:10,640
on

00:18:05,520 --> 00:18:14,000
t cliff uh if you want to

00:18:10,640 --> 00:18:15,520
follow our latest news please join us on

00:18:14,000 --> 00:18:18,640
the maori list

00:18:15,520 --> 00:18:22,080
and right now we have a month

00:18:18,640 --> 00:18:25,200
we have monthly virtual meetup on

00:18:22,080 --> 00:18:28,720
zoom in every month

00:18:25,200 --> 00:18:31,360
so follow the our

00:18:28,720 --> 00:18:32,160
monolith modeling list to see the

00:18:31,360 --> 00:18:35,919
schedule

00:18:32,160 --> 00:18:39,679
and we also uh invite some uh

00:18:35,919 --> 00:18:43,520
speakers to talk about some topics in

00:18:39,679 --> 00:18:46,880
rust and teeclave so you can also

00:18:43,520 --> 00:18:49,919
visit our homepage to see documents and

00:18:46,880 --> 00:18:52,960
projects powered by tclav and

00:18:49,919 --> 00:18:57,039
some tutorials you can also follow

00:18:52,960 --> 00:18:59,840
us on twitter and check out our code

00:18:57,039 --> 00:19:01,039
and at last we always call for

00:18:59,840 --> 00:19:04,080
contributions

00:19:01,039 --> 00:19:07,120
and the contributors so uh

00:19:04,080 --> 00:19:08,880
thanks so last things uh we just

00:19:07,120 --> 00:19:12,559
announced the tk

00:19:08,880 --> 00:19:15,919
trisom sdk besides

00:19:12,559 --> 00:19:19,600
sgx sdk we can also write

00:19:15,919 --> 00:19:25,840
just now applications please check out

00:19:19,600 --> 00:19:25,840

YouTube URL: https://www.youtube.com/watch?v=vJL36xv9VbM


