Title: A Tale of a Meshi Kafka: Securing Kafka Deployment When Istio Is... Ariel Shuper & Nikolas Mousouros
Publication date: 2020-12-03
Playlist: Cloud Native Security Day North America 2020
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4–7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

A Tale of a Meshi Kafka: Securing Kafka Deployment When Istio Is Used - Ariel Shuper, Portshift & Nikolas Mousouros, Marlow Navigation 

Kafka is a commonly used message broker for microservices real-time data feeds. A standard setup allows any micro-service to read or write any messages to/from any topic. The need for security typically starts when multiple applications use the same Kafka broker in a cluster, or when confidential information is shared in the Kafka topics. Common security practices to use are authenticating subscribers and publishers, authorization policies for access control and data encryption. When Istio is being used with microservices that access Kafka topics, the envoy proxies is expected to offload these security elements.  However, creating sustainable and consistent authorization policies when Istio is deployed isn't feasible, and tracking the microservices based on their IPs isn’t feasible because of their replacement.   The session will present how to build an external authorization mechanism and simplify policy management for Kafka topics by using open source tools, like OPA and others
Captions: 
	00:00:00,080 --> 00:00:04,319
hello everyone and welcome to our

00:00:03,040 --> 00:00:07,520
session

00:00:04,319 --> 00:00:10,800
uh a tale of meshi kafka

00:00:07,520 --> 00:00:13,519
um my name is ariel shuper uh by the

00:00:10,800 --> 00:00:15,599
time of the recording i'm in port shift

00:00:13,519 --> 00:00:16,880
uh but i'm by the time of the when we

00:00:15,599 --> 00:00:19,359
hear this session i'm gonna be part of

00:00:16,880 --> 00:00:19,359
cisco

00:00:21,039 --> 00:00:24,640
hello from every other as well i'm very

00:00:23,760 --> 00:00:28,080
happy to be

00:00:24,640 --> 00:00:28,080
part of this event today

00:00:28,400 --> 00:00:33,280
thank you nicolas um

00:00:32,160 --> 00:00:35,760
what we're going to talk to you about

00:00:33,280 --> 00:00:38,320
today we'll tell you who we are

00:00:35,760 --> 00:00:39,040
a little bit more details i will talk

00:00:38,320 --> 00:00:42,840
about

00:00:39,040 --> 00:00:44,879
kafka usage in general and in kubernetes

00:00:42,840 --> 00:00:46,399
specifically we'll talk about the

00:00:44,879 --> 00:00:49,440
security architecture

00:00:46,399 --> 00:00:53,280
or how do we secure kafka clusters

00:00:49,440 --> 00:00:56,559
um we'll talk about kafka in istio

00:00:53,280 --> 00:00:59,280
or any type of service mesh

00:00:56,559 --> 00:01:00,800
and then nicolas will talk about uh

00:00:59,280 --> 00:01:03,760
marlon architecture

00:01:00,800 --> 00:01:04,000
and how do they secure the deployment uh

00:01:03,760 --> 00:01:08,560
and

00:01:04,000 --> 00:01:11,280
will share with us uh a great demo

00:01:08,560 --> 00:01:11,680
a little bit about myself who am i so my

00:01:11,280 --> 00:01:14,560
name is

00:01:11,680 --> 00:01:16,400
ariel schuper i'm a principal product

00:01:14,560 --> 00:01:18,880
manager at cisco

00:01:16,400 --> 00:01:21,040
uh used to be a vp product management in

00:01:18,880 --> 00:01:22,640
port shift port shifted the cloud native

00:01:21,040 --> 00:01:24,640
security vendor

00:01:22,640 --> 00:01:26,159
uh before working in port shift i was

00:01:24,640 --> 00:01:29,759
the head of serverless solution at

00:01:26,159 --> 00:01:31,680
aqua security um and before that i led

00:01:29,759 --> 00:01:32,479
the cloud security solutions in

00:01:31,680 --> 00:01:36,320
checkpoints of

00:01:32,479 --> 00:01:38,960
technologies uh part of uh open source

00:01:36,320 --> 00:01:40,479
uh with the the qb project that we in

00:01:38,960 --> 00:01:43,280
port shift

00:01:40,479 --> 00:01:44,079
created and also a member of the easter

00:01:43,280 --> 00:01:47,680
security

00:01:44,079 --> 00:01:50,799
working group um

00:01:47,680 --> 00:01:54,560
a little bit about port shift we are

00:01:50,799 --> 00:01:58,320
were founded by 2018

00:01:54,560 --> 00:02:00,719
uh then uh acquired by cisco

00:01:58,320 --> 00:02:01,600
uh beginning of november beginning of

00:02:00,719 --> 00:02:04,880
this

00:02:01,600 --> 00:02:07,920
uh beginning of this month uh focusing

00:02:04,880 --> 00:02:10,160
on cloud native security platform

00:02:07,920 --> 00:02:11,440
and more specifically on integrating it

00:02:10,160 --> 00:02:14,800
with service mesh

00:02:11,440 --> 00:02:17,840
any type of service mesh

00:02:14,800 --> 00:02:17,840
and that's it about it

00:02:19,120 --> 00:02:23,120
i'm nicolas museros i worked in

00:02:21,959 --> 00:02:25,760
telecommunication

00:02:23,120 --> 00:02:27,599
currency exchange commercial companies

00:02:25,760 --> 00:02:30,160
and now i'm glad to be part

00:02:27,599 --> 00:02:31,120
of two organizations as a devops

00:02:30,160 --> 00:02:33,280
engineer

00:02:31,120 --> 00:02:34,480
the first to the first one is marlo

00:02:33,280 --> 00:02:36,160
navigation

00:02:34,480 --> 00:02:37,760
and now i'm trying to start my own

00:02:36,160 --> 00:02:40,800
startup business

00:02:37,760 --> 00:02:44,239
rtx direct which is providing

00:02:40,800 --> 00:02:44,239
cloud native services

00:02:45,200 --> 00:02:49,680
mobile and commercial ship management

00:02:47,360 --> 00:02:52,480
company

00:02:49,680 --> 00:02:53,280
offices in over 10 countries over a

00:02:52,480 --> 00:02:56,640
thousand

00:02:53,280 --> 00:02:59,760
sure based employees and over 13 000

00:02:56,640 --> 00:03:03,440
employees on board at any given time

00:02:59,760 --> 00:03:03,440
so let's go ahead with ariel

00:03:03,680 --> 00:03:07,440
thank you nicholas and let's talk about

00:03:06,080 --> 00:03:08,879
get into the details

00:03:07,440 --> 00:03:11,440
and let's talk about a little bit about

00:03:08,879 --> 00:03:14,959
microservices communication

00:03:11,440 --> 00:03:18,159
so we are moving to microservices

00:03:14,959 --> 00:03:19,920
okay microservices um

00:03:18,159 --> 00:03:21,920
usually look like that we when we're

00:03:19,920 --> 00:03:23,760
working in distributed applications we

00:03:21,920 --> 00:03:24,879
start breaking down monolithic into

00:03:23,760 --> 00:03:26,959
small

00:03:24,879 --> 00:03:28,080
components we want each of them to

00:03:26,959 --> 00:03:31,519
communicate with

00:03:28,080 --> 00:03:34,959
with each other so we are creating

00:03:31,519 --> 00:03:36,640
you know a nice communication uh schema

00:03:34,959 --> 00:03:38,560
but then eventually when the cluster

00:03:36,640 --> 00:03:41,360
grows and there are more

00:03:38,560 --> 00:03:42,959
uh more elements we can quickly turn

00:03:41,360 --> 00:03:46,080
into this famous

00:03:42,959 --> 00:03:47,519
uh diagram that shows the lift micro

00:03:46,080 --> 00:03:48,080
services communication before they

00:03:47,519 --> 00:03:50,159
started

00:03:48,080 --> 00:03:51,840
the project with envoy before they moved

00:03:50,159 --> 00:03:54,159
to service mesh

00:03:51,840 --> 00:03:56,000
um and the idea that you know when we

00:03:54,159 --> 00:03:57,120
have lots of micro services a lot of

00:03:56,000 --> 00:03:57,760
communication i'm not going to talk

00:03:57,120 --> 00:04:00,640
about

00:03:57,760 --> 00:04:01,439
whether or not uh service mesh is the

00:04:00,640 --> 00:04:03,680
right

00:04:01,439 --> 00:04:04,799
way to choose it but we can talk about

00:04:03,680 --> 00:04:07,200
lots of microchips

00:04:04,799 --> 00:04:09,120
communicating with each other we can use

00:04:07,200 --> 00:04:10,799
it like the mesh in synchronous

00:04:09,120 --> 00:04:11,920
mechanism that everyone

00:04:10,799 --> 00:04:14,720
can communicate with everyone

00:04:11,920 --> 00:04:17,519
synchronically but you can also use

00:04:14,720 --> 00:04:19,840
uh asynchronous communication or

00:04:17,519 --> 00:04:23,280
security message passing

00:04:19,840 --> 00:04:25,840
with there are multiple options uh kafka

00:04:23,280 --> 00:04:29,040
pachi kafka just a popular one but there

00:04:25,840 --> 00:04:33,120
are many other options of how we can use

00:04:29,040 --> 00:04:36,880
event streaming between services

00:04:33,120 --> 00:04:39,360
which are not synchronous now

00:04:36,880 --> 00:04:40,960
we would like to talk about apache kafka

00:04:39,360 --> 00:04:44,160
you know as a popular

00:04:40,960 --> 00:04:46,960
uh event streaming mechanism uh

00:04:44,160 --> 00:04:48,800
apache kafka was you know becoming a pop

00:04:46,960 --> 00:04:50,320
very popular tool was donated by

00:04:48,800 --> 00:04:51,440
linkedin to the open source community in

00:04:50,320 --> 00:04:53,840
00:04:51,440 --> 00:04:55,600
as a message queue quickly turned in to

00:04:53,840 --> 00:04:56,639
be like an event streaming so we're not

00:04:55,600 --> 00:04:59,759
just

00:04:56,639 --> 00:05:00,800
making like some simple computation uh

00:04:59,759 --> 00:05:04,000
actions on

00:05:00,800 --> 00:05:06,479
messages we can run multiple actions on

00:05:04,000 --> 00:05:09,199
multiple messages simultaneously

00:05:06,479 --> 00:05:10,000
we can also maintain uh persistency with

00:05:09,199 --> 00:05:12,000
keeping

00:05:10,000 --> 00:05:14,400
up the message there are many benefits

00:05:12,000 --> 00:05:17,600
to to apache kafka and to the way

00:05:14,400 --> 00:05:20,720
uh it is used today for

00:05:17,600 --> 00:05:22,800
asynchronous communication now our focus

00:05:20,720 --> 00:05:24,000
today and nikolas will uprise it a

00:05:22,800 --> 00:05:27,199
little bit more when you talk

00:05:24,000 --> 00:05:28,560
about architecture is on an open source

00:05:27,199 --> 00:05:32,000
distribution

00:05:28,560 --> 00:05:34,240
of kubernetes called strimzy

00:05:32,000 --> 00:05:37,440
and strimsy goal is to simplify the

00:05:34,240 --> 00:05:40,000
process of running kafka in kubernetes

00:05:37,440 --> 00:05:41,840
uh it provides you know the relevant

00:05:40,000 --> 00:05:45,039
container images

00:05:41,840 --> 00:05:48,320
uh streams you also created uh

00:05:45,039 --> 00:05:50,639
dedicated operators uh that can run

00:05:48,320 --> 00:05:52,240
the you know the kafka cluster and can

00:05:50,639 --> 00:05:54,880
add a lot of uh

00:05:52,240 --> 00:05:56,000
support or a lot of uh simple to

00:05:54,880 --> 00:05:58,639
simplify

00:05:56,000 --> 00:06:00,000
uh those these operations and to make it

00:05:58,639 --> 00:06:02,080
you know more

00:06:00,000 --> 00:06:03,120
cloud native way by automating a lot of

00:06:02,080 --> 00:06:06,080
those uh

00:06:03,120 --> 00:06:07,680
things um and the cafe component is run

00:06:06,080 --> 00:06:09,840
as a cluster so it can be like you know

00:06:07,680 --> 00:06:13,120
for availability purposes

00:06:09,840 --> 00:06:14,080
um and as i said again uh nicolas will

00:06:13,120 --> 00:06:17,840
explain more

00:06:14,080 --> 00:06:20,720
about the benefits of using it now

00:06:17,840 --> 00:06:21,680
when we talk about kafka and we want to

00:06:20,720 --> 00:06:23,440
talk about you know the

00:06:21,680 --> 00:06:25,360
different security changes so how do we

00:06:23,440 --> 00:06:27,680
secure this environment

00:06:25,360 --> 00:06:30,080
um it's important to know that kafka

00:06:27,680 --> 00:06:32,160
does require some level of security by

00:06:30,080 --> 00:06:33,520
by nature the default setting is that

00:06:32,160 --> 00:06:35,919
you know um

00:06:33,520 --> 00:06:36,960
the different configuration allow any

00:06:35,919 --> 00:06:39,600
user

00:06:36,960 --> 00:06:40,720
uh to read or write or publish or

00:06:39,600 --> 00:06:43,440
subscribe

00:06:40,720 --> 00:06:43,840
of you know any or all the data so you

00:06:43,440 --> 00:06:45,600
can

00:06:43,840 --> 00:06:48,160
you know publish your type to any topic

00:06:45,600 --> 00:06:52,080
so you get a full exposure

00:06:48,160 --> 00:06:53,680
um the communication is in plain text

00:06:52,080 --> 00:06:55,360
if you don't do anything specifically

00:06:53,680 --> 00:06:58,720
and you know and you go and

00:06:55,360 --> 00:07:00,800
configure the tls uh between your

00:06:58,720 --> 00:07:02,400
users and their brokers the

00:07:00,800 --> 00:07:03,360
communication is in plain text so if

00:07:02,400 --> 00:07:05,840
someone

00:07:03,360 --> 00:07:08,000
can intercept it in the cluster i can

00:07:05,840 --> 00:07:09,599
get exposed to all the

00:07:08,000 --> 00:07:11,039
communication there's no need to you

00:07:09,599 --> 00:07:14,639
know decrypt it

00:07:11,039 --> 00:07:18,000
users can delete the data and

00:07:14,639 --> 00:07:20,479
in some distributions uh the secrets or

00:07:18,000 --> 00:07:23,120
credentials are stored in plain text so

00:07:20,479 --> 00:07:24,319
you want to restrict the access of

00:07:23,120 --> 00:07:26,960
people who can

00:07:24,319 --> 00:07:28,240
access those you know uh the zookeeper

00:07:26,960 --> 00:07:31,840
uh location

00:07:28,240 --> 00:07:34,479
so by default uh there are many

00:07:31,840 --> 00:07:36,720
uh i would say security challenges but

00:07:34,479 --> 00:07:37,360
you know uh given the maturity of the

00:07:36,720 --> 00:07:39,199
product

00:07:37,360 --> 00:07:40,560
a lot of them you know were taken care

00:07:39,199 --> 00:07:43,520
of were handled

00:07:40,560 --> 00:07:45,680
uh more specifically uh talking about

00:07:43,520 --> 00:07:47,599
streamsi kafka looking the main

00:07:45,680 --> 00:07:49,199
security building block so the

00:07:47,599 --> 00:07:52,560
authentication

00:07:49,199 --> 00:07:55,120
um use user authentication

00:07:52,560 --> 00:07:56,400
can can be managed kafka listeners use

00:07:55,120 --> 00:07:58,240
authentication

00:07:56,400 --> 00:08:00,879
so they can ensure secure client

00:07:58,240 --> 00:08:02,560
connection um it does support

00:08:00,879 --> 00:08:04,240
different authentication different

00:08:02,560 --> 00:08:06,400
authentication options

00:08:04,240 --> 00:08:08,240
uh there's a dedicated user operator

00:08:06,400 --> 00:08:10,879
that can simplify some of them

00:08:08,240 --> 00:08:12,080
but as you can see that you know in

00:08:10,879 --> 00:08:14,800
practice

00:08:12,080 --> 00:08:15,199
not all of them are always in use but at

00:08:14,800 --> 00:08:17,520
least

00:08:15,199 --> 00:08:18,800
the foundation or the infrastructure to

00:08:17,520 --> 00:08:21,919
use them

00:08:18,800 --> 00:08:24,400
is available uh authorization the native

00:08:21,919 --> 00:08:28,319
authorization in kafka is using the

00:08:24,400 --> 00:08:30,319
simple acl authorizers uh it's based on

00:08:28,319 --> 00:08:32,959
authentication of users and then you

00:08:30,319 --> 00:08:35,279
allow if you have users authenticate and

00:08:32,959 --> 00:08:37,839
identified you can define

00:08:35,279 --> 00:08:41,599
access control list and you can define

00:08:37,839 --> 00:08:46,000
what user can access what resource

00:08:41,599 --> 00:08:48,240
encryption in streams is with tls

00:08:46,000 --> 00:08:49,519
so the communication is always encrypted

00:08:48,240 --> 00:08:51,440
in the

00:08:49,519 --> 00:08:53,680
main control elements like between the

00:08:51,440 --> 00:08:57,120
brokers the zookeeper nodes

00:08:53,680 --> 00:08:59,360
the operator and the exporter um you

00:08:57,120 --> 00:09:01,040
can you know encrypting the user traffic

00:08:59,360 --> 00:09:03,760
the user communication

00:09:01,040 --> 00:09:04,959
uh with the brokers is something that

00:09:03,760 --> 00:09:09,839
that is required

00:09:04,959 --> 00:09:13,440
users intervention and and making it um

00:09:09,839 --> 00:09:13,839
with the tls option so and i was talking

00:09:13,440 --> 00:09:16,880
about

00:09:13,839 --> 00:09:19,920
security in kubernetes committees offer

00:09:16,880 --> 00:09:21,600
a rich set of security mechanism

00:09:19,920 --> 00:09:24,000
there's a lot of investment a lot of

00:09:21,600 --> 00:09:24,800
work and also coming from the maturity

00:09:24,000 --> 00:09:26,560
of the

00:09:24,800 --> 00:09:28,560
of kubernetes in its deployment there

00:09:26,560 --> 00:09:30,720
are multiple options for security both

00:09:28,560 --> 00:09:33,440
for deployments for services for

00:09:30,720 --> 00:09:35,279
policies but also for authentication

00:09:33,440 --> 00:09:37,360
authorization and you know powerful

00:09:35,279 --> 00:09:40,800
role-based access control

00:09:37,360 --> 00:09:42,720
now when service mesh is used i provide

00:09:40,800 --> 00:09:44,240
flexible option to offload out of it a

00:09:42,720 --> 00:09:46,080
lot of you know the authentication and

00:09:44,240 --> 00:09:48,320
authorization decisions

00:09:46,080 --> 00:09:49,200
uh the encryption is a completely

00:09:48,320 --> 00:09:52,000
different

00:09:49,200 --> 00:09:54,160
experience when using service mesh so

00:09:52,000 --> 00:09:57,200
all in all the security posture

00:09:54,160 --> 00:09:58,080
of cluster is much higher now this lead

00:09:57,200 --> 00:10:01,120
us to think that

00:09:58,080 --> 00:10:02,560
when we deploy kafka in kubernetes and

00:10:01,120 --> 00:10:05,120
with istio

00:10:02,560 --> 00:10:06,399
um will be in a much better stage

00:10:05,120 --> 00:10:08,079
because the kubernetes the kafka

00:10:06,399 --> 00:10:09,600
security and the course

00:10:08,079 --> 00:10:11,279
although there are you know they don't

00:10:09,600 --> 00:10:14,800
match but if we're using it

00:10:11,279 --> 00:10:15,440
with kubernetes um then we can get the

00:10:14,800 --> 00:10:18,959
benefit

00:10:15,440 --> 00:10:20,800
of all the existing tools uh especially

00:10:18,959 --> 00:10:22,800
you know easter can used

00:10:20,800 --> 00:10:24,000
uh like it does today can contribute you

00:10:22,800 --> 00:10:25,680
know seamlessly

00:10:24,000 --> 00:10:28,000
to the security level because it's doing

00:10:25,680 --> 00:10:30,000
it you know using offloading the traffic

00:10:28,000 --> 00:10:31,440
not touching more defining or changing

00:10:30,000 --> 00:10:34,320
anything in the workload

00:10:31,440 --> 00:10:35,600
so this would come make a thing that uh

00:10:34,320 --> 00:10:38,720
the security

00:10:35,600 --> 00:10:41,200
security situat the security status uh

00:10:38,720 --> 00:10:43,120
can be much better now what we

00:10:41,200 --> 00:10:47,279
discovered

00:10:43,120 --> 00:10:50,160
and also together uh with marloy is that

00:10:47,279 --> 00:10:50,720
easter and kafka are not you know the

00:10:50,160 --> 00:10:53,839
best

00:10:50,720 --> 00:10:55,279
match or i would say uh they're not a

00:10:53,839 --> 00:10:58,160
match made in heaven

00:10:55,279 --> 00:10:59,040
and it's time for multiple reasons you

00:10:58,160 --> 00:11:00,640
know but

00:10:59,040 --> 00:11:02,560
when you come to think about it that you

00:11:00,640 --> 00:11:03,920
know kafka and zookeeper were both

00:11:02,560 --> 00:11:06,240
designed to have

00:11:03,920 --> 00:11:07,680
all the required resources available at

00:11:06,240 --> 00:11:10,000
startup time

00:11:07,680 --> 00:11:12,880
uh in current kubernetes versions

00:11:10,000 --> 00:11:16,560
sidecars like the envoy proxy

00:11:12,880 --> 00:11:18,320
uh availability can today still be after

00:11:16,560 --> 00:11:20,320
the pod is already running

00:11:18,320 --> 00:11:22,480
um and as a result we can see that for

00:11:20,320 --> 00:11:24,160
example in zookeeper it can lead to

00:11:22,480 --> 00:11:27,600
instability operation that

00:11:24,160 --> 00:11:30,640
members can't create a for a quorum

00:11:27,600 --> 00:11:32,160
uh with the brokers uh if a broker tried

00:11:30,640 --> 00:11:34,399
to communicate with the zookeeper and

00:11:32,160 --> 00:11:37,120
envoy is not ready or not available

00:11:34,399 --> 00:11:39,279
uh the broker will crash uh we also saw

00:11:37,120 --> 00:11:43,200
that in zookeeper installation

00:11:39,279 --> 00:11:46,399
um it binds it to the pod ip

00:11:43,200 --> 00:11:47,279
but nvo uses localhost for forwarding

00:11:46,399 --> 00:11:49,600
traffic

00:11:47,279 --> 00:11:50,560
and the result can be connection refused

00:11:49,600 --> 00:11:54,240
errors

00:11:50,560 --> 00:11:57,120
and some other uh challenges that uh

00:11:54,240 --> 00:11:57,519
we we happen to found and unfortunately

00:11:57,120 --> 00:11:59,360
this

00:11:57,519 --> 00:12:02,000
leave us you know with situation the

00:11:59,360 --> 00:12:04,959
still from one side we do deploy

00:12:02,000 --> 00:12:07,360
the kafka we can benefit from all those

00:12:04,959 --> 00:12:10,480
great tools but the reality is

00:12:07,360 --> 00:12:13,680
that those are cannot be used now

00:12:10,480 --> 00:12:15,760
what you know the way to move forward

00:12:13,680 --> 00:12:18,880
and really secure and benefit from

00:12:15,760 --> 00:12:20,639
what uh kubernetes and what service mesh

00:12:18,880 --> 00:12:23,279
can offer kafka

00:12:20,639 --> 00:12:24,320
is you know if you can really make some

00:12:23,279 --> 00:12:25,920
uh small

00:12:24,320 --> 00:12:27,600
changes or do something which some have

00:12:25,920 --> 00:12:29,680
already in the work but some

00:12:27,600 --> 00:12:31,360
uh can be done so what are the

00:12:29,680 --> 00:12:33,279
requirement what do we need in order to

00:12:31,360 --> 00:12:34,160
make kafka and east you a perfect match

00:12:33,279 --> 00:12:36,959
right

00:12:34,160 --> 00:12:38,639
so in order to create what we call a

00:12:36,959 --> 00:12:42,160
kafka friendly easter

00:12:38,639 --> 00:12:43,440
kafka friendly service mesh um

00:12:42,160 --> 00:12:45,920
something that will let us you know to

00:12:43,440 --> 00:12:47,360
benefit from all the security controls

00:12:45,920 --> 00:12:50,160
in an automated and

00:12:47,360 --> 00:12:50,639
smooth you know for existing users but

00:12:50,160 --> 00:12:52,720
also

00:12:50,639 --> 00:12:54,720
more importantly for future users which

00:12:52,720 --> 00:12:56,560
are deploying you want to connect

00:12:54,720 --> 00:12:59,279
you know with the kafka cluster there

00:12:56,560 --> 00:13:01,600
are two critical elements that you know

00:12:59,279 --> 00:13:04,959
need to be fixed in order to get this

00:13:01,600 --> 00:13:06,720
uh kafka friendly level uh expectation

00:13:04,959 --> 00:13:09,200
one of it which is already in the work

00:13:06,720 --> 00:13:12,399
was supposed to be part of 1.18

00:13:09,200 --> 00:13:13,920
1.19 but i believe it will uh be

00:13:12,399 --> 00:13:16,399
in the next in the next version

00:13:13,920 --> 00:13:20,160
definitely going to be included

00:13:16,399 --> 00:13:22,639
is making a sidecar first-class citizen

00:13:20,160 --> 00:13:24,320
uh part of kubernetes now what do i mean

00:13:22,639 --> 00:13:28,320
first-class citizen

00:13:24,320 --> 00:13:31,040
making sure that when a sidecar

00:13:28,320 --> 00:13:32,399
container like envoy is deployed with

00:13:31,040 --> 00:13:35,519
every pod

00:13:32,399 --> 00:13:37,920
uh you know make sure that the this

00:13:35,519 --> 00:13:38,720
sidecar is up before the regular

00:13:37,920 --> 00:13:41,440
containers are

00:13:38,720 --> 00:13:43,040
up and making sure it's shut down only

00:13:41,440 --> 00:13:43,600
after all the other containers are

00:13:43,040 --> 00:13:46,320
terminated

00:13:43,600 --> 00:13:47,680
and this will make will ensure that all

00:13:46,320 --> 00:13:48,079
the challenges we discussed in the

00:13:47,680 --> 00:13:51,040
previous

00:13:48,079 --> 00:13:52,560
slide will not happen because envoy will

00:13:51,040 --> 00:13:55,199
always be there so we can

00:13:52,560 --> 00:13:57,600
both zookeepers and the brokers uh can

00:13:55,199 --> 00:13:59,839
establish their communication without

00:13:57,600 --> 00:14:01,920
worrying about it but that's not it

00:13:59,839 --> 00:14:04,160
there's some a little bit more tweaking

00:14:01,920 --> 00:14:04,480
that is required and you know thanks to

00:14:04,160 --> 00:14:07,600
the

00:14:04,480 --> 00:14:09,199
flexibility of envoy and istio this is

00:14:07,600 --> 00:14:09,600
something which was already available

00:14:09,199 --> 00:14:12,560
since

00:14:09,600 --> 00:14:14,639
1.5 and this is adding a special

00:14:12,560 --> 00:14:17,279
detection to kafka traffic

00:14:14,639 --> 00:14:18,480
either by enhancing the current kafka

00:14:17,279 --> 00:14:21,920
filter because today

00:14:18,480 --> 00:14:23,600
envoy supports a filter for detecting

00:14:21,920 --> 00:14:24,240
kafka traffic but there's slightly more

00:14:23,600 --> 00:14:27,120
that

00:14:24,240 --> 00:14:30,240
needs to be done or creating a new

00:14:27,120 --> 00:14:34,160
filter or a new proxy for envoy

00:14:30,240 --> 00:14:38,000
which again also you know post 1.5

00:14:34,160 --> 00:14:40,880
uh is much simpler to do

00:14:38,000 --> 00:14:43,040
now as i said before so one there are

00:14:40,880 --> 00:14:46,160
infrastructure issues which are being

00:14:43,040 --> 00:14:47,920
mean done or managing kubernetes already

00:14:46,160 --> 00:14:50,000
part of the release plan and

00:14:47,920 --> 00:14:51,920
it's going to be you know included uh

00:14:50,000 --> 00:14:54,240
probably in the next version but

00:14:51,920 --> 00:14:55,360
there are some you know modifications to

00:14:54,240 --> 00:14:57,519
envoy

00:14:55,360 --> 00:14:58,480
uh which are required in order to make

00:14:57,519 --> 00:15:02,639
it you know

00:14:58,480 --> 00:15:05,920
kafka friendly um so

00:15:02,639 --> 00:15:08,880
if we will achieve that we can run

00:15:05,920 --> 00:15:10,399
envoy proxy in all kafka elements

00:15:08,880 --> 00:15:12,959
whether it's broker

00:15:10,399 --> 00:15:14,240
brokers zookeepers subscribers and

00:15:12,959 --> 00:15:17,040
producers

00:15:14,240 --> 00:15:19,120
um if we can use similar mechanisms like

00:15:17,040 --> 00:15:22,320
could today with http

00:15:19,120 --> 00:15:24,000
kind of a proxy that allow us to parse

00:15:22,320 --> 00:15:27,839
the kafka stream

00:15:24,000 --> 00:15:30,959
and you know send it for authentication

00:15:27,839 --> 00:15:33,120
uh and authorization so we can authorize

00:15:30,959 --> 00:15:34,959
any request now this can be done

00:15:33,120 --> 00:15:38,000
either by enhancement to the current

00:15:34,959 --> 00:15:40,800
filter or by using the new webassembly

00:15:38,000 --> 00:15:41,519
uh toolkit uh which allowed to customize

00:15:40,800 --> 00:15:44,639
and create

00:15:41,519 --> 00:15:47,360
uh customize filters for envoy like an

00:15:44,639 --> 00:15:47,680
on demand um and then you know we can

00:15:47,360 --> 00:15:50,160
use

00:15:47,680 --> 00:15:51,120
envoy to invoke authorization for every

00:15:50,160 --> 00:15:53,279
message

00:15:51,120 --> 00:15:55,279
based on installation properties we can

00:15:53,279 --> 00:15:57,440
of course uh authorize it

00:15:55,279 --> 00:15:58,720
uh we can create policies those

00:15:57,440 --> 00:15:59,199
processes will authorize we can of

00:15:58,720 --> 00:16:01,040
course

00:15:59,199 --> 00:16:03,040
cache the results so it's not gonna be

00:16:01,040 --> 00:16:06,160
like every request only for

00:16:03,040 --> 00:16:07,759
a new connection or new service which is

00:16:06,160 --> 00:16:10,000
something that will allow us you know to

00:16:07,759 --> 00:16:12,480
benefit from a fully authorized

00:16:10,000 --> 00:16:13,440
uh mechanism that allow users to define

00:16:12,480 --> 00:16:15,680
the rules

00:16:13,440 --> 00:16:16,480
uh envoy can enforce it can create it

00:16:15,680 --> 00:16:20,240
just like

00:16:16,480 --> 00:16:23,600
we do today with our http communication

00:16:20,240 --> 00:16:26,160
now anybody can also pass authentication

00:16:23,600 --> 00:16:29,839
information to kafka authorizers

00:16:26,160 --> 00:16:32,800
uh an envoy can seamlessly encrypt uh

00:16:29,839 --> 00:16:33,360
encrypt and manage all the certificates

00:16:32,800 --> 00:16:35,360
uh

00:16:33,360 --> 00:16:37,519
you know of the cluster of the brokers

00:16:35,360 --> 00:16:40,000
of the users there's no need

00:16:37,519 --> 00:16:41,920
to work on the tls certificates for the

00:16:40,000 --> 00:16:44,079
users we can also take it

00:16:41,920 --> 00:16:46,079
a step forward and do all the ingress in

00:16:44,079 --> 00:16:47,440
the egress communication we can manage

00:16:46,079 --> 00:16:50,240
them

00:16:47,440 --> 00:16:51,839
and using the service mesh policies so

00:16:50,240 --> 00:16:55,040
with

00:16:51,839 --> 00:16:56,000
having the right filters uh and some

00:16:55,040 --> 00:16:58,399
little to help

00:16:56,000 --> 00:16:59,519
we can really reach level of very kafka

00:16:58,399 --> 00:17:02,000
friendly istio

00:16:59,519 --> 00:17:03,120
that will allow us to benefit uh from

00:17:02,000 --> 00:17:05,280
all you know the

00:17:03,120 --> 00:17:06,640
inherent security which are included so

00:17:05,280 --> 00:17:07,520
how's the structure is going to look

00:17:06,640 --> 00:17:09,679
like

00:17:07,520 --> 00:17:10,720
um so this is going to be like we're

00:17:09,679 --> 00:17:14,240
going to

00:17:10,720 --> 00:17:17,839
inject the istio or the endovoy proxy to

00:17:14,240 --> 00:17:20,000
consumer pods producer pods

00:17:17,839 --> 00:17:20,959
and the kafka broker the easter control

00:17:20,000 --> 00:17:24,079
plane

00:17:20,959 --> 00:17:24,959
uh will uh make sure that everything is

00:17:24,079 --> 00:17:28,160
encrypted

00:17:24,959 --> 00:17:29,280
and you know the the envoy will encrypt

00:17:28,160 --> 00:17:32,799
the traffic

00:17:29,280 --> 00:17:35,440
uh you know get the and and of course

00:17:32,799 --> 00:17:36,880
uh rotate when it's rotated but can

00:17:35,440 --> 00:17:42,000
encrypt the traffic as soon as

00:17:36,880 --> 00:17:44,559
leave the the uh consumer um

00:17:42,000 --> 00:17:46,559
or the producer containers uh when it

00:17:44,559 --> 00:17:48,640
reaches the broker the broker

00:17:46,559 --> 00:17:49,679
uh will will forward the traffic for

00:17:48,640 --> 00:17:52,960
authorization

00:17:49,679 --> 00:17:54,400
so i can verify the three results every

00:17:52,960 --> 00:17:56,000
new authorization request will be

00:17:54,400 --> 00:17:58,080
verified it will be cached

00:17:56,000 --> 00:17:59,280
and this can be maintained and the

00:17:58,080 --> 00:18:01,520
traffic will

00:17:59,280 --> 00:18:04,880
uh talking not not going to impact the

00:18:01,520 --> 00:18:04,880
the perform the performance

00:18:05,280 --> 00:18:08,400
so what's going to look like so instead

00:18:06,640 --> 00:18:10,160
of using the regular authentication we

00:18:08,400 --> 00:18:12,080
can of course use the easter based

00:18:10,160 --> 00:18:14,240
authentication the android proxy will

00:18:12,080 --> 00:18:16,080
extract the application or the or the

00:18:14,240 --> 00:18:19,200
micro service identity

00:18:16,080 --> 00:18:20,480
uh and forward it and afford it for the

00:18:19,200 --> 00:18:22,480
authorizer

00:18:20,480 --> 00:18:23,520
uh just like you know it's using it

00:18:22,480 --> 00:18:26,080
today

00:18:23,520 --> 00:18:26,960
uh just decision will be made locally

00:18:26,080 --> 00:18:30,080
and will be

00:18:26,960 --> 00:18:30,080
well maintained locally

00:18:31,200 --> 00:18:34,160
just a second

00:18:34,320 --> 00:18:41,200
okay authorization

00:18:38,559 --> 00:18:43,200
will be will be the same so we can you

00:18:41,200 --> 00:18:46,880
know authorize user business specific

00:18:43,200 --> 00:18:48,480
attributes um and then use the android

00:18:46,880 --> 00:18:50,799
proxy for that

00:18:48,480 --> 00:18:52,160
uh as well we can get much flexible more

00:18:50,799 --> 00:18:55,360
granular options

00:18:52,160 --> 00:18:55,840
setting the rules uh and caching those

00:18:55,360 --> 00:18:58,559
uh

00:18:55,840 --> 00:18:58,559
results

00:18:59,919 --> 00:19:05,120
encryption can can spread around the

00:19:02,799 --> 00:19:08,320
entire cluster so instead of keeping it

00:19:05,120 --> 00:19:10,080
uh only specific to the control we can

00:19:08,320 --> 00:19:11,360
run it you know all the clustering trip

00:19:10,080 --> 00:19:12,400
all the traffic between the micro

00:19:11,360 --> 00:19:15,200
services

00:19:12,400 --> 00:19:16,640
uh and the brokers or even the internal

00:19:15,200 --> 00:19:18,480
everything can be managed you know

00:19:16,640 --> 00:19:20,640
rotating certificates

00:19:18,480 --> 00:19:21,600
uh it's gonna be a much easier and

00:19:20,640 --> 00:19:25,760
simpler

00:19:21,600 --> 00:19:28,799
uh task to do so all in all

00:19:25,760 --> 00:19:32,160
uh with having uh

00:19:28,799 --> 00:19:35,600
with you know making those changes

00:19:32,160 --> 00:19:39,360
you know we can uh make istio

00:19:35,600 --> 00:19:42,000
a much friendlier to

00:19:39,360 --> 00:19:43,520
kafka we can then once we deploy

00:19:42,000 --> 00:19:46,480
together we can

00:19:43,520 --> 00:19:46,880
use all those mechanisms which today are

00:19:46,480 --> 00:19:48,720
not

00:19:46,880 --> 00:19:50,880
very advanced in kafka we can use the

00:19:48,720 --> 00:19:52,799
easter mechanism and then we can

00:19:50,880 --> 00:19:55,520
bring the kafka to the same level of

00:19:52,799 --> 00:19:57,440
security like any other regular workload

00:19:55,520 --> 00:19:58,799
that's running in in kubernetes so we

00:19:57,440 --> 00:20:03,360
can really benefit

00:19:58,799 --> 00:20:03,360
uh from both worlds together

00:20:03,440 --> 00:20:06,799
but that brings us to the question what

00:20:04,960 --> 00:20:10,240
do we do until that

00:20:06,799 --> 00:20:10,960
uh and until we have uh is your friendly

00:20:10,240 --> 00:20:14,159
what can be an

00:20:10,960 --> 00:20:15,120
intermediate solution and here we won't

00:20:14,159 --> 00:20:18,240
talk about what

00:20:15,120 --> 00:20:20,559
we are using today

00:20:18,240 --> 00:20:23,120
and today we're using the open policy

00:20:20,559 --> 00:20:25,200
agent so the open policy agent

00:20:23,120 --> 00:20:26,559
uh to do all the micro services

00:20:25,200 --> 00:20:29,360
authorization

00:20:26,559 --> 00:20:30,240
uh just on a nutshell the open policy

00:20:29,360 --> 00:20:33,520
agent

00:20:30,240 --> 00:20:36,400
um it's a popular tool uh it decouple

00:20:33,520 --> 00:20:37,440
policy decision making from enforcement

00:20:36,400 --> 00:20:40,320
decision

00:20:37,440 --> 00:20:40,720
okay so when we use open policy agent

00:20:40,320 --> 00:20:43,760
with

00:20:40,720 --> 00:20:46,799
kafka uh we can we need to

00:20:43,760 --> 00:20:50,159
use a uh an opa plugin

00:20:46,799 --> 00:20:52,240
uh inside you know the streamsi kafka

00:20:50,159 --> 00:20:54,799
and this plugin can redirect or make

00:20:52,240 --> 00:20:58,080
authorization requests to the oppa

00:20:54,799 --> 00:20:59,520
server so when opa is using with kafka

00:20:58,080 --> 00:21:02,880
the kafka authorizer

00:20:59,520 --> 00:21:05,120
call to the plugin the opa server uh to

00:21:02,880 --> 00:21:06,720
evaluate the policy based on the input

00:21:05,120 --> 00:21:09,360
from the authorizers

00:21:06,720 --> 00:21:10,720
uh input is the same set of information

00:21:09,360 --> 00:21:14,640
just nothing change

00:21:10,720 --> 00:21:16,960
and then in opa server people can define

00:21:14,640 --> 00:21:18,320
their policies and the oppa can evaluate

00:21:16,960 --> 00:21:20,559
any request

00:21:18,320 --> 00:21:21,679
uh based on the policy and respond to

00:21:20,559 --> 00:21:23,679
the authorizer

00:21:21,679 --> 00:21:25,440
uh with a decision whether the whether

00:21:23,679 --> 00:21:27,039
the request is allowed or not

00:21:25,440 --> 00:21:29,679
and decision are cashed by the

00:21:27,039 --> 00:21:34,159
authorizer to make sure performance

00:21:29,679 --> 00:21:37,360
is not is not affected

00:21:34,159 --> 00:21:38,799
so this is open policy agent uh in port

00:21:37,360 --> 00:21:40,720
shift

00:21:38,799 --> 00:21:42,640
we use the same architecture and use the

00:21:40,720 --> 00:21:45,760
same plugin

00:21:42,640 --> 00:21:49,760
also to allow people to communicate

00:21:45,760 --> 00:21:51,600
and define uh their authorization rules

00:21:49,760 --> 00:21:53,360
and then the opa plugin will forward it

00:21:51,600 --> 00:21:56,880
to port shift port shift

00:21:53,360 --> 00:21:59,120
uh will based on based act like just the

00:21:56,880 --> 00:21:59,760
opa server and based on the predefined

00:21:59,120 --> 00:22:03,440
rules

00:21:59,760 --> 00:22:07,600
we'll verify what users can access

00:22:03,440 --> 00:22:11,039
uh what uh you know what um

00:22:07,600 --> 00:22:13,120
topic uh what broker uh can be accessed

00:22:11,039 --> 00:22:15,280
we are focusing on on topics

00:22:13,120 --> 00:22:16,960
um all the new communication going to be

00:22:15,280 --> 00:22:18,480
authorized the micro services are going

00:22:16,960 --> 00:22:20,400
to be authenticated

00:22:18,480 --> 00:22:22,080
based on the runtime properties you know

00:22:20,400 --> 00:22:22,640
in the namespace they are deployed their

00:22:22,080 --> 00:22:25,039
source of

00:22:22,640 --> 00:22:27,039
region uh we can use those customized

00:22:25,039 --> 00:22:30,159
identities and verify that

00:22:27,039 --> 00:22:32,240
our users are

00:22:30,159 --> 00:22:34,799
author authenticated and then the

00:22:32,240 --> 00:22:37,600
traffic encrypted is used to be done

00:22:34,799 --> 00:22:37,600
independently

00:22:38,240 --> 00:22:41,520
so that's going to be how our clusters

00:22:40,400 --> 00:22:44,480
not look like

00:22:41,520 --> 00:22:45,360
um you know the main issue is the op-up

00:22:44,480 --> 00:22:46,720
plugin

00:22:45,360 --> 00:22:49,039
or getting information from the

00:22:46,720 --> 00:22:51,840
authorizers calling port shift

00:22:49,039 --> 00:22:53,919
and getting information uh istio is not

00:22:51,840 --> 00:22:55,520
really in place not in the kafka brokers

00:22:53,919 --> 00:22:58,000
not in the kafka pods

00:22:55,520 --> 00:22:59,120
but it does being in but used in the

00:22:58,000 --> 00:23:01,679
kafka pods

00:22:59,120 --> 00:23:03,039
but again it's a the current version

00:23:01,679 --> 00:23:04,480
which is still

00:23:03,039 --> 00:23:06,080
need some modification to get it like

00:23:04,480 --> 00:23:09,440
you know in full fledge to get

00:23:06,080 --> 00:23:12,720
from all the benefits uh enjoyed

00:23:09,440 --> 00:23:15,520
so this is all from my side

00:23:12,720 --> 00:23:16,799
i'll hand over to nicolas nicolas please

00:23:15,520 --> 00:23:23,840
take us through

00:23:16,799 --> 00:23:23,840
what you do in tomorrow

00:23:28,080 --> 00:23:35,039
i'm sorry i was stubborn slide 20 on

00:23:31,520 --> 00:23:37,679
so i will talk about

00:23:35,039 --> 00:23:38,080
the marlow story and what happened in

00:23:37,679 --> 00:23:41,279
the

00:23:38,080 --> 00:23:45,200
practical side of stuff what

00:23:41,279 --> 00:23:48,400
marlow is currently using we are using a

00:23:45,200 --> 00:23:48,960
legacy system that was built for 25

00:23:48,400 --> 00:23:52,400
years

00:23:48,960 --> 00:23:54,559
it kept growing and became complex

00:23:52,400 --> 00:23:55,919
and if i can recall correctly it reached

00:23:54,559 --> 00:24:00,480
its end of life

00:23:55,919 --> 00:24:02,799
support in 2003 not only that

00:24:00,480 --> 00:24:04,880
but the server side application does

00:24:02,799 --> 00:24:07,760
everything it receives requests

00:24:04,880 --> 00:24:09,600
executes domain logic retrieves and

00:24:07,760 --> 00:24:11,760
updates data from database

00:24:09,600 --> 00:24:13,840
and responds back to the client

00:24:11,760 --> 00:24:15,840
modularity within the application is

00:24:13,840 --> 00:24:17,679
typically based on features of the

00:24:15,840 --> 00:24:19,279
programming language

00:24:17,679 --> 00:24:21,440
even a small change of to the

00:24:19,279 --> 00:24:22,960
application requires that the entire

00:24:21,440 --> 00:24:26,400
monolithic system

00:24:22,960 --> 00:24:27,919
is rebuilt and redeployed it gets

00:24:26,400 --> 00:24:30,880
difficult for change

00:24:27,919 --> 00:24:32,880
not to affect the whole system as much

00:24:30,880 --> 00:24:35,679
as it grows over the years it gets

00:24:32,880 --> 00:24:37,760
difficult and complex to maintain

00:24:35,679 --> 00:24:39,039
and in order to scale the application we

00:24:37,760 --> 00:24:41,279
would simply create

00:24:39,039 --> 00:24:42,080
more instances of that process and

00:24:41,279 --> 00:24:43,679
usually

00:24:42,080 --> 00:24:47,840
it is not possible to scale the

00:24:43,679 --> 00:24:47,840
components in primary

00:24:49,919 --> 00:24:55,200
so moving to cloud native micro services

00:24:52,880 --> 00:24:56,720
and google networks micro services

00:24:55,200 --> 00:24:58,799
with the google nethers natives

00:24:56,720 --> 00:25:02,480
deployments we can get view on different

00:24:58,799 --> 00:25:05,039
metrics such as cpu usage and ram usage

00:25:02,480 --> 00:25:06,960
the horizontal product scalers give us

00:25:05,039 --> 00:25:07,840
the ability to scale the number of

00:25:06,960 --> 00:25:10,400
instances

00:25:07,840 --> 00:25:12,960
in a replication controller or replica

00:25:10,400 --> 00:25:14,720
set based on those metrics

00:25:12,960 --> 00:25:16,480
we can also use the same metrics

00:25:14,720 --> 00:25:18,000
alongside with shell checks to

00:25:16,480 --> 00:25:20,799
vertically scale

00:25:18,000 --> 00:25:22,880
our infrastructure when needed even that

00:25:20,799 --> 00:25:26,000
we prefer scaling horizontally

00:25:22,880 --> 00:25:28,000
our infrastructure as well and

00:25:26,000 --> 00:25:30,559
with the introduction of githubs

00:25:28,000 --> 00:25:32,799
deployment configs sharing charts

00:25:30,559 --> 00:25:34,320
we save a lot of time we have better

00:25:32,799 --> 00:25:36,480
versioning

00:25:34,320 --> 00:25:38,880
and obviously much easier rolling

00:25:36,480 --> 00:25:42,480
updates

00:25:38,880 --> 00:25:44,240
so a bit about our this is a small

00:25:42,480 --> 00:25:47,039
representation of how

00:25:44,240 --> 00:25:49,039
our system works we still need to get

00:25:47,039 --> 00:25:52,080
data from our legacy system

00:25:49,039 --> 00:25:54,880
since we are still in development so

00:25:52,080 --> 00:25:56,000
we have stateless apps in blue color

00:25:54,880 --> 00:25:58,159
that issue commands

00:25:56,000 --> 00:25:59,360
and events but we still need to keep the

00:25:58,159 --> 00:26:01,760
state somewhere

00:25:59,360 --> 00:26:03,919
so we decided to use kafka and other

00:26:01,760 --> 00:26:06,159
storage services elasticsearch to do

00:26:03,919 --> 00:26:06,159
that

00:26:07,520 --> 00:26:12,720
given all that

00:26:10,559 --> 00:26:13,760
we need and given that we needed to move

00:26:12,720 --> 00:26:16,159
forward to

00:26:13,760 --> 00:26:17,919
a hybrid environment at some point which

00:26:16,159 --> 00:26:19,520
is a lengthy subject that i don't want

00:26:17,919 --> 00:26:21,520
to get into today

00:26:19,520 --> 00:26:23,600
we decided to move from managed kafka

00:26:21,520 --> 00:26:26,559
services to streams

00:26:23,600 --> 00:26:27,760
streams gave us freedom in so many ways

00:26:26,559 --> 00:26:29,919
for example

00:26:27,760 --> 00:26:31,520
leveraging all the kubernetes concepts

00:26:29,919 --> 00:26:34,480
that i already talked about

00:26:31,520 --> 00:26:36,080
we are able to use githubs to to easily

00:26:34,480 --> 00:26:39,120
deploy a ton of kafka

00:26:36,080 --> 00:26:41,279
with a few clicks we parameterize a lot

00:26:39,120 --> 00:26:43,279
of the configuration

00:26:41,279 --> 00:26:44,880
it's pretty much secure in comparison

00:26:43,279 --> 00:26:47,039
with other services

00:26:44,880 --> 00:26:49,760
and has a great community that is always

00:26:47,039 --> 00:26:49,760
willing to help

00:26:51,039 --> 00:26:55,679
the problem with such environments and

00:26:53,520 --> 00:26:58,159
traditional firewalls is that

00:26:55,679 --> 00:27:00,400
they need skills to get configured well

00:26:58,159 --> 00:27:02,320
especially on cloud-native environments

00:27:00,400 --> 00:27:04,400
and complex networks

00:27:02,320 --> 00:27:06,960
imagine having to secure a whole kaka

00:27:04,400 --> 00:27:09,200
cluster using regular expressions

00:27:06,960 --> 00:27:11,600
and having almost zero visibility on the

00:27:09,200 --> 00:27:14,720
request made

00:27:11,600 --> 00:27:16,000
furthermore firewalls need a lot of fuel

00:27:14,720 --> 00:27:18,000
to get configured

00:27:16,000 --> 00:27:19,039
which it uses the agility and the

00:27:18,000 --> 00:27:21,520
acceleration

00:27:19,039 --> 00:27:23,520
of all the development which is bad for

00:27:21,520 --> 00:27:26,159
everyone

00:27:23,520 --> 00:27:27,919
we also sometimes need to give or block

00:27:26,159 --> 00:27:30,480
access on different layers

00:27:27,919 --> 00:27:33,279
such as on the micro service level and

00:27:30,480 --> 00:27:36,159
more importantly on the topic level

00:27:33,279 --> 00:27:37,600
also given that a lot of times now with

00:27:36,159 --> 00:27:40,159
the corona virus days

00:27:37,600 --> 00:27:42,399
we need to work on home they need to

00:27:40,159 --> 00:27:44,159
secure the environment for specifically

00:27:42,399 --> 00:27:46,880
peace came up

00:27:44,159 --> 00:27:49,279
and as much as we move forward

00:27:46,880 --> 00:27:51,360
configuring and securing streamsy

00:27:49,279 --> 00:27:52,880
we realize that we need something more

00:27:51,360 --> 00:27:55,600
sophisticated from

00:27:52,880 --> 00:27:56,480
managed cloud services and that's where

00:27:55,600 --> 00:28:01,919
courtship

00:27:56,480 --> 00:28:04,000
jumped into the game to save our lives

00:28:01,919 --> 00:28:06,320
so the port shift solution

00:28:04,000 --> 00:28:09,039
gave us visibility on what requests are

00:28:06,320 --> 00:28:11,919
made with tables and nice graphs

00:28:09,039 --> 00:28:14,000
we were able to set up rules on a very

00:28:11,919 --> 00:28:16,320
user-friendly environment

00:28:14,000 --> 00:28:19,360
we are able to add rules for specific

00:28:16,320 --> 00:28:22,320
microservices and specific topics

00:28:19,360 --> 00:28:23,039
and moving forward i will show a small

00:28:22,320 --> 00:28:27,200
demo

00:28:23,039 --> 00:28:27,200
of how easily those stuff can be done

00:28:27,360 --> 00:28:33,760
so on that demo i will be using arco cd

00:28:30,559 --> 00:28:36,799
which is a great tool for githubs

00:28:33,760 --> 00:28:40,000
another great tool is lenses that is

00:28:36,799 --> 00:28:41,919
great for visualization of data in kafka

00:28:40,000 --> 00:28:43,279
among other stuff but that's what i will

00:28:41,919 --> 00:28:46,320
show today

00:28:43,279 --> 00:28:48,240
obviously i will use openshift we use

00:28:46,320 --> 00:28:50,640
our kubernetes cluster

00:28:48,240 --> 00:28:52,399
streamsy and our security solution which

00:28:50,640 --> 00:28:59,840
is spot shift

00:28:52,399 --> 00:28:59,840
so let me share my screen

00:29:00,640 --> 00:29:06,960
with argo i will create a new app

00:29:03,919 --> 00:29:08,480
i will give an application name afghan

00:29:06,960 --> 00:29:11,520
demo

00:29:08,480 --> 00:29:14,559
i will select the default project

00:29:11,520 --> 00:29:17,600
i will select auto create namespace

00:29:14,559 --> 00:29:20,159
i will choose my git reaper and choose

00:29:17,600 --> 00:29:23,520
the root path

00:29:20,159 --> 00:29:23,520
i'll choose my cluster

00:29:23,679 --> 00:29:30,240
and the namespace name i want

00:29:27,200 --> 00:29:33,440
and after creating and sensing that

00:29:30,240 --> 00:29:35,279
after some time we will have a full

00:29:33,440 --> 00:29:41,840
workable kafka cluster on

00:29:35,279 --> 00:29:41,840
openshift so let's see what happened

00:29:42,159 --> 00:29:46,320
we have embroidered zookeeper lenses and

00:29:45,200 --> 00:29:50,000
the operator

00:29:46,320 --> 00:29:52,159
and the kafka connect let's head to

00:29:50,000 --> 00:29:53,760
lenses to see what's happening here we

00:29:52,159 --> 00:29:57,440
have some

00:29:53,760 --> 00:30:00,720
three topics with mock data created

00:29:57,440 --> 00:30:00,720
let's see what's inside

00:30:02,000 --> 00:30:08,399
so some sensitive info of our customers

00:30:05,760 --> 00:30:09,919
some customer information and some

00:30:08,399 --> 00:30:13,919
iphone numbers

00:30:09,919 --> 00:30:13,919
all of those are mock data don't worry

00:30:14,799 --> 00:30:22,159
and let's head to post shift to see what

00:30:16,880 --> 00:30:25,360
we can do

00:30:22,159 --> 00:30:28,240
we can click on policies and then

00:30:25,360 --> 00:30:31,520
connection rules

00:30:28,240 --> 00:30:31,520
let's start adding rules

00:30:33,679 --> 00:30:39,200
i will select by and put the nssa port

00:30:37,600 --> 00:30:44,159
name

00:30:39,200 --> 00:30:46,159
then next i will select by kafka

00:30:44,159 --> 00:30:47,200
here i can see my brokers and the

00:30:46,159 --> 00:30:49,440
cluster

00:30:47,200 --> 00:30:50,720
i will select the network that we just

00:30:49,440 --> 00:30:54,320
created

00:30:50,720 --> 00:30:55,520
next we will select kafka now we can see

00:30:54,320 --> 00:30:59,519
all the topics

00:30:55,520 --> 00:31:01,519
that are used in this broker

00:30:59,519 --> 00:31:05,840
i will just select the iban numbers and

00:31:01,519 --> 00:31:05,840
the sensitive information

00:31:08,640 --> 00:31:14,720
and i want to block access for reading

00:31:10,960 --> 00:31:14,720
and writing on those topics

00:31:14,799 --> 00:31:19,840
next we just put a name

00:31:29,039 --> 00:31:32,159
and then block the axis when i press

00:31:31,519 --> 00:31:35,440
finish

00:31:32,159 --> 00:31:35,440
and apply the policy

00:31:37,039 --> 00:31:40,880
i will head back to lenses and after

00:31:39,440 --> 00:31:44,159
some time

00:31:40,880 --> 00:31:44,159
i will lose access to it

00:31:44,640 --> 00:31:48,640
so i cannot have access to those topics

00:31:46,720 --> 00:31:49,519
but i still have access to the custom

00:31:48,640 --> 00:31:52,640
information

00:31:49,519 --> 00:31:52,640
that i want access to

00:31:52,960 --> 00:31:56,240
so back to put shift

00:31:58,960 --> 00:32:03,600
i will add another rule i want to block

00:32:02,240 --> 00:32:06,399
access to eyepiece

00:32:03,600 --> 00:32:07,120
for everyone in the world so i'll put

00:32:06,399 --> 00:32:12,399
zero zero

00:32:07,120 --> 00:32:12,399
zero zero easy as that

00:32:13,039 --> 00:32:17,919
sorry about that zero next

00:32:22,090 --> 00:32:28,480
[Music]

00:32:24,320 --> 00:32:33,360
i'll choose a name len says in that case

00:32:28,480 --> 00:32:43,840
next and incredible

00:32:33,360 --> 00:32:43,840
and then block

00:32:45,279 --> 00:32:50,720
right click finish and then apply the

00:32:47,120 --> 00:32:53,760
policy i can't get back to learning this

00:32:50,720 --> 00:32:57,840
we need to wait a bit for it to work

00:32:53,760 --> 00:32:57,840
let's see what happens

00:33:00,480 --> 00:33:04,000
doesn't where it's going to sell on the

00:33:02,320 --> 00:33:07,120
first refresh but

00:33:04,000 --> 00:33:07,120
let's see the second one

00:33:08,640 --> 00:33:14,399
now it's blocked let's try again to be

00:33:12,159 --> 00:33:14,399
sure

00:33:15,040 --> 00:33:18,130
[Music]

00:33:18,559 --> 00:33:22,799
blocked but now i want to be able to

00:33:21,919 --> 00:33:25,919
work from home

00:33:22,799 --> 00:33:29,039
so i will add my ap to be allowed so

00:33:25,919 --> 00:33:29,039
let's select by ap

00:33:29,279 --> 00:33:34,720
i will play it out for now so you can't

00:33:32,159 --> 00:33:34,720
see my p

00:33:35,279 --> 00:33:40,399
i'm adding my ip and 32 for just one ip

00:33:46,960 --> 00:33:49,840
click next

00:33:50,240 --> 00:33:53,840
again with the same name

00:33:54,720 --> 00:34:07,840
clicking next any layer 7 protocol

00:33:59,360 --> 00:34:07,840
that now allow i will add a name

00:34:10,800 --> 00:34:14,159
finish and now because i want this rule

00:34:13,520 --> 00:34:17,919
to have

00:34:14,159 --> 00:34:21,839
higher priority i can easily move it up

00:34:17,919 --> 00:34:21,839
so let's apply the policy

00:34:24,079 --> 00:34:37,359
go back to lenses refresh

00:34:34,320 --> 00:34:39,520
now we have access to lenses but

00:34:37,359 --> 00:34:40,560
we still don't have access to the topics

00:34:39,520 --> 00:34:43,359
we blocked

00:34:40,560 --> 00:34:45,440
so that's good so let's head back to

00:34:43,359 --> 00:34:47,200
podchick to see the rest of the goodies

00:34:45,440 --> 00:34:49,839
it give us

00:34:47,200 --> 00:34:52,720
has a nice dashboard with some risky

00:34:49,839 --> 00:34:56,800
workloads events connection

00:34:52,720 --> 00:34:59,839
how much portal running permissions

00:34:56,800 --> 00:35:02,880
fascinates navigator that's kind of a

00:34:59,839 --> 00:35:06,000
nice diagram of what's happening now

00:35:02,880 --> 00:35:06,000
we can expand this

00:35:06,079 --> 00:35:09,599
and we can see all the external

00:35:07,680 --> 00:35:11,119
connections and all the internal

00:35:09,599 --> 00:35:14,240
connections so one

00:35:11,119 --> 00:35:17,119
data connect connecting to the brokers

00:35:14,240 --> 00:35:19,200
and lenses connecting to workers and

00:35:17,119 --> 00:35:20,400
some ips from the outside connecting to

00:35:19,200 --> 00:35:24,160
lenses

00:35:20,400 --> 00:35:25,520
let's go to ci we can see all our images

00:35:24,160 --> 00:35:28,079
here

00:35:25,520 --> 00:35:30,400
we can see some vulnerabilities and how

00:35:28,079 --> 00:35:34,079
many there are in every image

00:35:30,400 --> 00:35:34,079
we can click on the critical

00:35:34,240 --> 00:35:38,320
we have a lot of information here such

00:35:36,320 --> 00:35:39,280
as the description and we can click the

00:35:38,320 --> 00:35:41,599
exact cv

00:35:39,280 --> 00:35:44,160
to go to the cv page and see what's

00:35:41,599 --> 00:35:47,200
happening with that

00:35:44,160 --> 00:35:49,920
so that's nice as well and then we can

00:35:47,200 --> 00:35:51,680
go to the runtime

00:35:49,920 --> 00:35:53,680
where we can see all the workloads

00:35:51,680 --> 00:35:56,880
running on our cluster

00:35:53,680 --> 00:35:58,000
and some more information the result if

00:35:56,880 --> 00:35:59,760
it's allowed

00:35:58,000 --> 00:36:01,359
and then we can see all the connections

00:35:59,760 --> 00:36:03,040
happening right now

00:36:01,359 --> 00:36:04,400
as you can see on the right side we

00:36:03,040 --> 00:36:06,640
can't even see

00:36:04,400 --> 00:36:09,119
which topics are accessed by which

00:36:06,640 --> 00:36:11,920
workload

00:36:09,119 --> 00:36:13,440
and finally the risk assessment of our

00:36:11,920 --> 00:36:15,760
system

00:36:13,440 --> 00:36:19,920
we can select the scan time or schedule

00:36:15,760 --> 00:36:22,079
it we can select the severity to report

00:36:19,920 --> 00:36:26,079
and if we want we can select the

00:36:22,079 --> 00:36:29,839
namespace we don't want to right now

00:36:26,079 --> 00:36:33,520
after we click save the scan is starting

00:36:29,839 --> 00:36:34,880
and after some time that i cut out

00:36:33,520 --> 00:36:37,680
it's finishing and showing the

00:36:34,880 --> 00:36:41,200
vulnerabilities

00:36:37,680 --> 00:36:44,000
so that's me that's it for my side

00:36:41,200 --> 00:36:46,640
heading back to ariel to summarize the

00:36:44,000 --> 00:36:49,599
presentation

00:36:46,640 --> 00:36:50,880
cuny colas thank you for this uh great

00:36:49,599 --> 00:36:54,800
demo

00:36:50,880 --> 00:36:58,400
uh and thank you for showing everything

00:36:54,800 --> 00:37:01,520
i know just to summarize everything

00:36:58,400 --> 00:37:04,960
um you know kafka

00:37:01,520 --> 00:37:08,000
even when deploying kubernetes

00:37:04,960 --> 00:37:10,880
does require dedicated security tools it

00:37:08,000 --> 00:37:13,680
does not benefit or inherent

00:37:10,880 --> 00:37:16,079
security mechanisms which are deployed

00:37:13,680 --> 00:37:19,760
east 2 cannot be ideal candidate for

00:37:16,079 --> 00:37:21,280
man to do it or to achieve this level

00:37:19,760 --> 00:37:23,119
some of the work in order to make it

00:37:21,280 --> 00:37:25,839
it's not natively out of the box

00:37:23,119 --> 00:37:27,040
some require will be enhanced in the

00:37:25,839 --> 00:37:28,640
future when

00:37:27,040 --> 00:37:30,640
scica containers will get the better

00:37:28,640 --> 00:37:32,480
treatment and some require a little bit

00:37:30,640 --> 00:37:35,200
more tweaking by adding

00:37:32,480 --> 00:37:36,079
a dedicated filter and envoy that can

00:37:35,200 --> 00:37:38,320
detect

00:37:36,079 --> 00:37:41,119
and manipulate the traffic but with

00:37:38,320 --> 00:37:44,079
small fixes i'm sure in the near future

00:37:41,119 --> 00:37:45,760
i will be able to use istio and really

00:37:44,079 --> 00:37:48,000
get benefit

00:37:45,760 --> 00:37:49,119
from all the security mechanisms and to

00:37:48,000 --> 00:37:51,119
bring the

00:37:49,119 --> 00:37:53,119
kafka cluster to the same level of

00:37:51,119 --> 00:37:54,960
security which allow everyone to use it

00:37:53,119 --> 00:37:57,359
freely and securely

00:37:54,960 --> 00:37:58,240
in kubernetes or in openshift in the

00:37:57,359 --> 00:38:00,800
meantime

00:37:58,240 --> 00:38:03,280
opensort the open policy agent can be

00:38:00,800 --> 00:38:05,440
used in order to customize

00:38:03,280 --> 00:38:07,920
a lot of the work but having but

00:38:05,440 --> 00:38:11,119
nevertheless i'm sure in the near future

00:38:07,920 --> 00:38:14,240
we'll be able to benefit from uh the

00:38:11,119 --> 00:38:15,920
meshi kafka and make a serving flesh

00:38:14,240 --> 00:38:18,800
friendly kafka

00:38:15,920 --> 00:38:20,720
um so that's it thank you very much for

00:38:18,800 --> 00:38:22,320
joining thank you nicolas for a great

00:38:20,720 --> 00:38:22,960
demo and thank you for doing this for

00:38:22,320 --> 00:38:24,640
joining and

00:38:22,960 --> 00:38:26,240
will be available for in the next few

00:38:24,640 --> 00:38:27,520
minutes for a few questions from the

00:38:26,240 --> 00:38:30,720
audience

00:38:27,520 --> 00:38:30,720

YouTube URL: https://www.youtube.com/watch?v=Ku6gKTLbD78


