Title: Hardware Backed Security For Multitenancy at the Edge with SPIFFE & PAR... Paul Howard & Andres Vega
Publication date: 2020-11-25
Playlist: Cloud Native Security Day North America 2020
Description: 
	Hardware Backed Security For Multitenancy at the Edge with SPIFFE & PARSEC - Paul Howard, Arm & Andres Vega, VMware

Three powerful CNCF projects come together in this session, which focuses on how cloud-native workloads can access the best hardware security facilities of any platform in a way that is portable, convenient to consume, and which scales to multiple workloads.  SPIFFE, the Secure Production Identity Framework for Everyone, alongside its production-grade implementation project SPIRE, are both now incubation projects within CNCF.  Parsec (CNCF sandbox) is the Platform Abstraction for Security: a simple and portable way to access platform facilities for key management and cryptography on any hardware in any programming language. But Parsec is so much more than just an API shim. It also provides key management and access control based on the identities of workloads, keeping their secure assets separate.  This session will show how Parsec can be combined with SPIFFE and SPIRE to provide a key management service based on attested workload identities,
Captions: 
	00:00:00,399 --> 00:00:05,440
okay uh so welcome everyone to our

00:00:03,280 --> 00:00:07,759
lightning talk hardware backed security

00:00:05,440 --> 00:00:10,000
for multi-tenancy at the edge uh with

00:00:07,759 --> 00:00:11,840
spiffy and parsec

00:00:10,000 --> 00:00:13,280
let's quickly introduce ourselves uh my

00:00:11,840 --> 00:00:15,519
name's paul howard

00:00:13,280 --> 00:00:17,600
i'm here representing the parsec project

00:00:15,519 --> 00:00:19,439
i'm a solutions architect with arm

00:00:17,600 --> 00:00:21,199
and i lead the team that's contributing

00:00:19,439 --> 00:00:24,240
to parsec inside of arm

00:00:21,199 --> 00:00:26,160
so andres over to you thank you paul

00:00:24,240 --> 00:00:27,439
and i am andres vega i am product

00:00:26,160 --> 00:00:30,960
manager for the

00:00:27,439 --> 00:00:33,680
spiffy inspire projects representing

00:00:30,960 --> 00:00:37,760
b projects and i happen to also work at

00:00:33,680 --> 00:00:37,760
vmware as a product line manager

00:00:38,000 --> 00:00:42,160
okay cool thanks um so what we're going

00:00:40,320 --> 00:00:44,480
to see today is a first glimpse and the

00:00:42,160 --> 00:00:45,520
first demonstration really of how parsec

00:00:44,480 --> 00:00:47,840
can work

00:00:45,520 --> 00:00:49,520
in combination with spiffy and spire and

00:00:47,840 --> 00:00:51,600
how we can use the security and key

00:00:49,520 --> 00:00:53,600
management abstractions of parsec

00:00:51,600 --> 00:00:55,600
in combination with the production

00:00:53,600 --> 00:00:57,440
identity framework of spiffy

00:00:55,600 --> 00:00:58,879
to provide us with a multi-tenant

00:00:57,440 --> 00:01:00,559
security abstraction

00:00:58,879 --> 00:01:02,160
where multiple workloads can use

00:01:00,559 --> 00:01:04,720
hardware-backed security

00:01:02,160 --> 00:01:05,280
to protect the private keys based on

00:01:04,720 --> 00:01:07,840
their own

00:01:05,280 --> 00:01:09,280
attested and proven identity it's the

00:01:07,840 --> 00:01:11,680
first time we've shown all three of

00:01:09,280 --> 00:01:15,600
these cncf projects working together

00:01:11,680 --> 00:01:17,520
to provide an integrated solution

00:01:15,600 --> 00:01:19,200
so let's just quickly summarize what

00:01:17,520 --> 00:01:21,439
these projects are

00:01:19,200 --> 00:01:24,000
parsec is the new kid on the block

00:01:21,439 --> 00:01:25,040
parsec joined cncf sandbox just earlier

00:01:24,000 --> 00:01:26,880
this year

00:01:25,040 --> 00:01:29,840
and it's the platform abstraction for

00:01:26,880 --> 00:01:31,439
security parsec aims to create a uniform

00:01:29,840 --> 00:01:33,200
software interface to the hardware

00:01:31,439 --> 00:01:35,439
security of any platform

00:01:33,200 --> 00:01:36,640
making secure services like key storage

00:01:35,439 --> 00:01:39,040
and cryptography

00:01:36,640 --> 00:01:41,040
available to cloud native applications

00:01:39,040 --> 00:01:42,240
in a platform agnostic and language

00:01:41,040 --> 00:01:43,759
agnostic way

00:01:42,240 --> 00:01:45,840
so application developers know they're

00:01:43,759 --> 00:01:47,920
getting the best available secure

00:01:45,840 --> 00:01:49,920
features of their platform like hardware

00:01:47,920 --> 00:01:51,680
protection for private keys

00:01:49,920 --> 00:01:53,520
but they get that without having to

00:01:51,680 --> 00:01:55,040
understand and code against all of the

00:01:53,520 --> 00:01:57,280
specs and apis

00:01:55,040 --> 00:01:58,240
that are needed to store keys in say an

00:01:57,280 --> 00:02:00,640
hsm

00:01:58,240 --> 00:02:02,960
or a tpm parsec handles all of those

00:02:00,640 --> 00:02:06,159
details and then allows applications

00:02:02,960 --> 00:02:08,160
to just code against parsec and not only

00:02:06,159 --> 00:02:09,440
that but they can code against parsec

00:02:08,160 --> 00:02:10,319
using their preferred programming

00:02:09,440 --> 00:02:11,520
language

00:02:10,319 --> 00:02:14,080
and using an interface that is

00:02:11,520 --> 00:02:15,280
simplified fluent and sensitive to

00:02:14,080 --> 00:02:17,760
common use cases

00:02:15,280 --> 00:02:18,959
in key storage and security and let me

00:02:17,760 --> 00:02:23,440
hand back to andres

00:02:18,959 --> 00:02:27,200
to summarize spiffy inspire for us

00:02:23,440 --> 00:02:30,480
thank you paul that is very interesting

00:02:27,200 --> 00:02:33,519
so spiffy inspired spiffy

00:02:30,480 --> 00:02:36,640
really defines a set of interfaces

00:02:33,519 --> 00:02:39,599
the apis and the documents for proving

00:02:36,640 --> 00:02:41,120
validating and obtaining service

00:02:39,599 --> 00:02:43,680
identities

00:02:41,120 --> 00:02:45,040
spire is the software that implements

00:02:43,680 --> 00:02:46,879
the spiffy interfaces

00:02:45,040 --> 00:02:48,080
for establishing trust between different

00:02:46,879 --> 00:02:50,080
systems

00:02:48,080 --> 00:02:51,840
now when we talk about trust that goes

00:02:50,080 --> 00:02:52,560
from securing the microservice

00:02:51,840 --> 00:02:55,519
communication

00:02:52,560 --> 00:02:56,640
automatically through application

00:02:55,519 --> 00:03:00,239
proxies

00:02:56,640 --> 00:03:03,440
x509 certificates or json web tokens

00:03:00,239 --> 00:03:06,080
it can help authenticate to common

00:03:03,440 --> 00:03:09,519
third-party services without relying on

00:03:06,080 --> 00:03:12,720
any api keys or embedded secrets

00:03:09,519 --> 00:03:14,959
and it can also help build bridge

00:03:12,720 --> 00:03:16,400
and extend service meshes across

00:03:14,959 --> 00:03:19,760
organizations without

00:03:16,400 --> 00:03:22,560
sharing any private keys

00:03:19,760 --> 00:03:22,560
back to you paul

00:03:24,319 --> 00:03:27,440
i think you're going to talk to this one

00:03:25,599 --> 00:03:30,560
as well andres

00:03:27,440 --> 00:03:33,599
i do intend to talk to this one as well

00:03:30,560 --> 00:03:37,920
so bringing the

00:03:33,599 --> 00:03:40,959
projects together in an integration

00:03:37,920 --> 00:03:42,159
parsec is establishing the keystore

00:03:40,959 --> 00:03:43,920
partitioning logic

00:03:42,159 --> 00:03:45,519
you see here at the bottom of the

00:03:43,920 --> 00:03:48,560
picture now

00:03:45,519 --> 00:03:51,120
from a developer percep perspective

00:03:48,560 --> 00:03:53,439
it is a platform agnostic experience

00:03:51,120 --> 00:03:56,239
nothing changes in their workflow

00:03:53,439 --> 00:03:59,280
and from an application perspective

00:03:56,239 --> 00:04:01,680
these being multi-tenant applications

00:03:59,280 --> 00:04:03,280
neither application can see each other's

00:04:01,680 --> 00:04:06,319
keys they're

00:04:03,280 --> 00:04:10,159
hard partitioned all that is required

00:04:06,319 --> 00:04:14,879
is a reliable source of identity to tell

00:04:10,159 --> 00:04:17,040
one apart from the other

00:04:14,879 --> 00:04:18,560
okay great thanks and that's where spire

00:04:17,040 --> 00:04:21,040
and spiffy come in of course

00:04:18,560 --> 00:04:21,919
um so for multi-tenancy to be a feature

00:04:21,040 --> 00:04:23,600
of parsec

00:04:21,919 --> 00:04:26,160
there has to be this reliable and

00:04:23,600 --> 00:04:28,400
verifiable source of identity

00:04:26,160 --> 00:04:30,400
um that source could be anything in fact

00:04:28,400 --> 00:04:31,600
and parsec doesn't prescribe a single

00:04:30,400 --> 00:04:33,520
solution to that

00:04:31,600 --> 00:04:34,800
um but if our workloads are running in a

00:04:33,520 --> 00:04:36,320
spiffy trust domain

00:04:34,800 --> 00:04:39,040
then it absolutely makes sense for

00:04:36,320 --> 00:04:41,680
spiffy ids to be what parsec uses

00:04:39,040 --> 00:04:42,880
to separate the clients and isolates

00:04:41,680 --> 00:04:44,880
their key storage

00:04:42,880 --> 00:04:46,479
and all that's needed is the appropriate

00:04:44,880 --> 00:04:47,440
three-way integration between the

00:04:46,479 --> 00:04:51,040
application

00:04:47,440 --> 00:04:53,040
and spire and parsec now all parsec

00:04:51,040 --> 00:04:55,199
client applications talk to parsec

00:04:53,040 --> 00:04:56,320
through a client library that is linked

00:04:55,199 --> 00:04:58,400
in process

00:04:56,320 --> 00:04:59,520
so if we give that client library the

00:04:58,400 --> 00:05:01,919
capability

00:04:59,520 --> 00:05:04,320
to consume a spiffy identity in the form

00:05:01,919 --> 00:05:05,680
of a spiffy verifiable identity document

00:05:04,320 --> 00:05:07,360
or an s-vid

00:05:05,680 --> 00:05:10,000
from the spire agent on the local

00:05:07,360 --> 00:05:12,479
machine then the client can pass that

00:05:10,000 --> 00:05:13,120
s-vid to parsec in the form of a job

00:05:12,479 --> 00:05:15,600
token

00:05:13,120 --> 00:05:17,680
which is added as an auth header onto

00:05:15,600 --> 00:05:18,800
the api request as it goes from the

00:05:17,680 --> 00:05:21,120
client's library

00:05:18,800 --> 00:05:22,720
into the parsec service and then the

00:05:21,120 --> 00:05:24,560
triangle is completed

00:05:22,720 --> 00:05:26,400
by a new authenticator module that we

00:05:24,560 --> 00:05:28,479
add to the front end of parsec

00:05:26,400 --> 00:05:30,720
which is going to see that incoming

00:05:28,479 --> 00:05:31,680
s-vid and verify it using the trust

00:05:30,720 --> 00:05:34,479
bundle

00:05:31,680 --> 00:05:34,479
from spire

00:05:34,800 --> 00:05:38,080
so let's get to the demo and before i

00:05:36,479 --> 00:05:39,520
run through the demo here i just want to

00:05:38,080 --> 00:05:41,199
make a couple of shout outs to some

00:05:39,520 --> 00:05:43,120
great people in the cncf community

00:05:41,199 --> 00:05:44,960
who've helped to make this possible

00:05:43,120 --> 00:05:46,960
so firstly to my colleague at arm

00:05:44,960 --> 00:05:48,240
development who actually made the demo

00:05:46,960 --> 00:05:50,960
we're about to see

00:05:48,240 --> 00:05:52,560
um also joe ellis who was the founding

00:05:50,960 --> 00:05:54,400
contributor of the cli

00:05:52,560 --> 00:05:56,800
parsec tool uh that you're going to see

00:05:54,400 --> 00:05:57,600
us using um and lastly to savory

00:05:56,800 --> 00:05:59,759
blackmon

00:05:57,600 --> 00:06:03,199
who created the rust client library for

00:05:59,759 --> 00:06:05,360
spiffy that we're going to use here

00:06:03,199 --> 00:06:07,520
now what you're about to see we split

00:06:05,360 --> 00:06:09,360
the screen into these four quadrants

00:06:07,520 --> 00:06:11,120
and each one is showing a shell command

00:06:09,360 --> 00:06:12,000
session they're all running on the same

00:06:11,120 --> 00:06:13,919
machine

00:06:12,000 --> 00:06:15,120
so on the right hand side we have our

00:06:13,919 --> 00:06:17,520
services

00:06:15,120 --> 00:06:18,319
parsec lower right and the spire service

00:06:17,520 --> 00:06:21,840
and the spy

00:06:18,319 --> 00:06:23,919
agent running upper right we've created

00:06:21,840 --> 00:06:25,520
a very simple minimal deployment here

00:06:23,919 --> 00:06:26,479
where both the service and the agent are

00:06:25,520 --> 00:06:28,800
running together

00:06:26,479 --> 00:06:31,039
on the same machine and the services are

00:06:28,800 --> 00:06:32,639
run during the entire demo

00:06:31,039 --> 00:06:34,160
we've got logging enabled so that you

00:06:32,639 --> 00:06:36,319
can observe what's going on

00:06:34,160 --> 00:06:37,440
in the services as we go through the

00:06:36,319 --> 00:06:39,440
demo

00:06:37,440 --> 00:06:40,880
and then on the left we have the two

00:06:39,440 --> 00:06:42,080
client windows

00:06:40,880 --> 00:06:44,960
and in these we're going to use the

00:06:42,080 --> 00:06:46,560
parsec tool which is just a simple

00:06:44,960 --> 00:06:48,560
command line scripting interface for

00:06:46,560 --> 00:06:50,160
parsec and we're just going to go

00:06:48,560 --> 00:06:51,039
through some simple key management

00:06:50,160 --> 00:06:53,120
operations

00:06:51,039 --> 00:06:54,240
nothing more complicated just creating

00:06:53,120 --> 00:06:56,240
listing and deleting

00:06:54,240 --> 00:06:57,360
some keys but the important thing we're

00:06:56,240 --> 00:06:59,360
going to show

00:06:57,360 --> 00:07:00,639
is that each one of those clients has

00:06:59,360 --> 00:07:02,479
its own key store

00:07:00,639 --> 00:07:04,080
the key stores are isolated from each

00:07:02,479 --> 00:07:05,520
other because each client has a

00:07:04,080 --> 00:07:08,160
different spiffy id

00:07:05,520 --> 00:07:10,000
parsec is going to verify those ids and

00:07:08,160 --> 00:07:12,240
partition the keystore views

00:07:10,000 --> 00:07:13,199
so that neither of our clients is able

00:07:12,240 --> 00:07:17,840
to see

00:07:13,199 --> 00:07:17,840
the keys of the other

00:07:23,759 --> 00:07:27,759
okay so let's start by spinning up the

00:07:26,000 --> 00:07:28,960
parsec service

00:07:27,759 --> 00:07:30,960
and then from one of the client

00:07:28,960 --> 00:07:34,160
applications we'll just run a quick

00:07:30,960 --> 00:07:36,560
ping using the parsec tool just to make

00:07:34,160 --> 00:07:38,560
sure that parsec has been spun up

00:07:36,560 --> 00:07:41,680
and is healthy and agreeing to talk back

00:07:38,560 --> 00:07:43,440
to us so there we go

00:07:41,680 --> 00:07:45,440
and now upper right will spin up the

00:07:43,440 --> 00:07:48,560
spire service

00:07:45,440 --> 00:07:50,639
and then we'll generate a join token

00:07:48,560 --> 00:07:53,680
from the spyder service which we need to

00:07:50,639 --> 00:07:53,680
start the agent

00:07:55,039 --> 00:07:58,479
and so now we're going to use that join

00:07:56,840 --> 00:08:02,639
token

00:07:58,479 --> 00:08:02,639
to join the agent to the system

00:08:07,759 --> 00:08:11,039
okay and there we go so we have the

00:08:09,280 --> 00:08:13,440
agent running there as well

00:08:11,039 --> 00:08:15,440
so now we're going to register two

00:08:13,440 --> 00:08:17,919
spiffy workload ids

00:08:15,440 --> 00:08:19,680
for our two clients um we're going to do

00:08:17,919 --> 00:08:22,160
this based on the unix

00:08:19,680 --> 00:08:24,639
user id of each client so we're running

00:08:22,160 --> 00:08:27,280
each client as a different unix user

00:08:24,639 --> 00:08:29,280
we're using the uids a thousand and two

00:08:27,280 --> 00:08:31,280
and a thousand and three

00:08:29,280 --> 00:08:32,640
um so in this really simple system the

00:08:31,280 --> 00:08:35,200
only selector

00:08:32,640 --> 00:08:37,360
is going to be the uid but of course we

00:08:35,200 --> 00:08:42,880
could have any number of selectors

00:08:37,360 --> 00:08:42,880
to map the workloads to their ids

00:08:42,959 --> 00:08:46,320
okay so both of our workloads now

00:08:44,640 --> 00:08:47,839
registered with their two different

00:08:46,320 --> 00:08:50,240
spiffy ids

00:08:47,839 --> 00:08:52,080
so let's now go ahead start interacting

00:08:50,240 --> 00:08:53,760
with parsec

00:08:52,080 --> 00:08:55,839
from those two client windows and we're

00:08:53,760 --> 00:08:56,399
just going to use the parsex cli tool

00:08:55,839 --> 00:08:58,080
here

00:08:56,399 --> 00:09:00,320
to run some simple key management

00:08:58,080 --> 00:09:09,440
operations

00:09:00,320 --> 00:09:11,120
so first of all we'll list the keys

00:09:09,440 --> 00:09:12,880
and we get an empty list back to show

00:09:11,120 --> 00:09:14,959
that we're starting from a clean state

00:09:12,880 --> 00:09:16,560
we haven't created any keys yet

00:09:14,959 --> 00:09:18,080
so you can see the bottom right just

00:09:16,560 --> 00:09:21,120
there also

00:09:18,080 --> 00:09:22,399
we'll highlight it just there um but

00:09:21,120 --> 00:09:24,560
parsec has

00:09:22,399 --> 00:09:25,600
seen and validated the job token that

00:09:24,560 --> 00:09:27,040
was passed to it

00:09:25,600 --> 00:09:28,720
and mapped it to its correct

00:09:27,040 --> 00:09:30,399
corresponding spiffy id

00:09:28,720 --> 00:09:31,839
which becomes a name space for the key

00:09:30,399 --> 00:09:33,760
store

00:09:31,839 --> 00:09:35,760
okay let's create a key now with the

00:09:33,760 --> 00:09:38,240
parsec tool from that first client don't

00:09:35,760 --> 00:09:41,040
worry about the details of the key

00:09:38,240 --> 00:09:44,240
um except that its name is toto that's

00:09:41,040 --> 00:09:46,560
generate key toto

00:09:44,240 --> 00:09:48,640
okay so it's telling us that the parsec

00:09:46,560 --> 00:09:50,240
key toto was generated you

00:09:48,640 --> 00:09:52,320
see some chatter there from the parsec

00:09:50,240 --> 00:09:55,600
service as well

00:09:52,320 --> 00:09:57,600
but now let's switch clients and the

00:09:55,600 --> 00:09:59,519
lower clients begin to repeat that list

00:09:57,600 --> 00:10:01,040
keys operation

00:09:59,519 --> 00:10:02,640
and you'll notice again that the key

00:10:01,040 --> 00:10:05,440
store is empty

00:10:02,640 --> 00:10:06,959
the key we just created isn't listed now

00:10:05,440 --> 00:10:08,720
the reason this isn't listed here is

00:10:06,959 --> 00:10:11,279
because this is a different client

00:10:08,720 --> 00:10:12,000
a different spiffy id and also it's a

00:10:11,279 --> 00:10:14,240
different name

00:10:12,000 --> 00:10:16,160
space and so it's a different key store

00:10:14,240 --> 00:10:19,200
this one is still empty

00:10:16,160 --> 00:10:21,600
and just to label that point you'll also

00:10:19,200 --> 00:10:24,079
see that we can't delete that key either

00:10:21,600 --> 00:10:26,560
um if we try to delete it here let's run

00:10:24,079 --> 00:10:28,480
a delete command

00:10:26,560 --> 00:10:32,720
it's actually a destroy command let's

00:10:28,480 --> 00:10:34,480
run a destroy command for toto

00:10:32,720 --> 00:10:35,680
okay if parsec is now reporting that

00:10:34,480 --> 00:10:38,000
we're trying to delete a key that

00:10:35,680 --> 00:10:40,640
doesn't exist so it is now ensuring

00:10:38,000 --> 00:10:42,720
that the second client cannot see or try

00:10:40,640 --> 00:10:44,640
to work with or do any operations on the

00:10:42,720 --> 00:10:46,399
keys of the first client

00:10:44,640 --> 00:10:48,000
so let's go back to where we can see it

00:10:46,399 --> 00:10:48,560
let's go back to the first client top

00:10:48,000 --> 00:10:50,720
left

00:10:48,560 --> 00:10:51,680
and now destroy the key we'll list it

00:10:50,720 --> 00:10:53,920
first

00:10:51,680 --> 00:10:56,640
show that it's still there and then

00:10:53,920 --> 00:10:56,640
we'll destroy it

00:10:59,040 --> 00:11:03,600
and lastly one final list keys to show

00:11:01,680 --> 00:11:05,440
the store is empty again so there we go

00:11:03,600 --> 00:11:08,160
it deleted successfully

00:11:05,440 --> 00:11:10,079
um and we're done uh so you've seen two

00:11:08,160 --> 00:11:10,880
distinct parsec clients using spiffy

00:11:10,079 --> 00:11:13,440
inspire

00:11:10,880 --> 00:11:14,880
for the identity management parsec for

00:11:13,440 --> 00:11:17,519
the key store management

00:11:14,880 --> 00:11:19,760
using those spiffy ids to ensure that

00:11:17,519 --> 00:11:22,079
the key stores are kept separate

00:11:19,760 --> 00:11:23,279
and that's it that's the demo it's very

00:11:22,079 --> 00:11:25,040
simple we're just creating and

00:11:23,279 --> 00:11:26,399
destroying some keys otherwise not doing

00:11:25,040 --> 00:11:28,720
anything interesting with them

00:11:26,399 --> 00:11:30,399
but it very visibly demonstrates this

00:11:28,720 --> 00:11:32,480
principle of isolation

00:11:30,399 --> 00:11:33,440
uh using the spiffy ids as the name

00:11:32,480 --> 00:11:35,279
space

00:11:33,440 --> 00:11:39,200
um and with that let me hand over to

00:11:35,279 --> 00:11:39,200
andres to wrap up the talk for us

00:11:39,600 --> 00:11:43,600
thanks paul you've said simple but it is

00:11:42,399 --> 00:11:45,680
illuminating

00:11:43,600 --> 00:11:46,880
to see how we can do hardware-backed

00:11:45,680 --> 00:11:50,560
security

00:11:46,880 --> 00:11:53,600
for multi-tenancy at the edge in a very

00:11:50,560 --> 00:11:56,880
simple but secure way leveraging

00:11:53,600 --> 00:11:57,600
parsec spiffy inspire if you would like

00:11:56,880 --> 00:12:00,240
to learn more

00:11:57,600 --> 00:12:00,959
about the projects how they come

00:12:00,240 --> 00:12:04,480
together

00:12:00,959 --> 00:12:05,120
as well as the intricacies that there

00:12:04,480 --> 00:12:07,760
are to

00:12:05,120 --> 00:12:09,120
each of the projects respectively we'd

00:12:07,760 --> 00:12:11,200
like to invite you to

00:12:09,120 --> 00:12:13,600
check the resources available you see on

00:12:11,200 --> 00:12:16,079
the screen you will find the

00:12:13,600 --> 00:12:17,680
code repositories on github for both

00:12:16,079 --> 00:12:20,880
parsec as well as

00:12:17,680 --> 00:12:21,839
spiffy inspire the respective slack

00:12:20,880 --> 00:12:24,079
channels

00:12:21,839 --> 00:12:25,200
if you have any questions if you would

00:12:24,079 --> 00:12:28,320
like to

00:12:25,200 --> 00:12:28,959
share work that you're doing and would

00:12:28,320 --> 00:12:30,959
you like

00:12:28,959 --> 00:12:33,519
feedback or the perspective of others

00:12:30,959 --> 00:12:36,320
that's a great place to come join

00:12:33,519 --> 00:12:39,200
exchange ideas learn from others and

00:12:36,320 --> 00:12:42,639
collaborate with the community and last

00:12:39,200 --> 00:12:45,120
here are some links to the project

00:12:42,639 --> 00:12:46,240
websites for each of the projects where

00:12:45,120 --> 00:12:49,519
you'll find

00:12:46,240 --> 00:12:50,000
documentation available i hope that you

00:12:49,519 --> 00:12:52,399
find

00:12:50,000 --> 00:12:54,720
our talk informational and hopefully

00:12:52,399 --> 00:12:58,240
it's something you can get to try for

00:12:54,720 --> 00:13:02,160
yourself pretty soon thank you

00:12:58,240 --> 00:13:02,160

YouTube URL: https://www.youtube.com/watch?v=-I_rCKMyY7Y


