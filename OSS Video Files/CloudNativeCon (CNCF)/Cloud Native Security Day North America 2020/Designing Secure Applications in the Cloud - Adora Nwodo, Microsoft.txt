Title: Designing Secure Applications in the Cloud - Adora Nwodo, Microsoft
Publication date: 2020-11-25
Playlist: Cloud Native Security Day North America 2020
Description: 
	Designing Secure Applications in the Cloud - Adora Nwodo, Microsoft

When building cloud applications, we should always bear in mind that our services are exposed on the Internet and can be accessed by anyone and may have untrusted users.  Because of this, we need to be proactive and aware of these possible security threats so that we can design our cloud applications to be able to handle them properly. Apart from preventing malicious attacks, cloud applications must also be designed to protect sensitive data and grant access for certain resources to only authorized users.  In this session, I will be talking about 3 security patterns that can be used to prevent malicious or accidental actions outside of the applications designed usage, and to prevent disclosure or loss of information when building for the cloud.
Captions: 
	00:00:00,320 --> 00:00:05,600
hello and welcome to cloud native

00:00:03,760 --> 00:00:08,639
security today

00:00:05,600 --> 00:00:10,480
my name is adora and i am so excited to

00:00:08,639 --> 00:00:13,120
be giving this talk to you today

00:00:10,480 --> 00:00:13,920
and the title of my talk is designing

00:00:13,120 --> 00:00:17,279
secure

00:00:13,920 --> 00:00:19,840
cloud applications it's 2020

00:00:17,279 --> 00:00:20,480
and we have moved or are currently

00:00:19,840 --> 00:00:22,720
moving

00:00:20,480 --> 00:00:23,760
all of our computing to the cloud in

00:00:22,720 --> 00:00:27,840
different forms

00:00:23,760 --> 00:00:31,439
and this comes with a few benefits

00:00:27,840 --> 00:00:34,640
you don't need um to download

00:00:31,439 --> 00:00:35,680
anything to any particular software

00:00:34,640 --> 00:00:38,800
anymore

00:00:35,680 --> 00:00:39,760
your applications and utilities are over

00:00:38,800 --> 00:00:42,399
the internet

00:00:39,760 --> 00:00:44,239
you can manipulate and configure your

00:00:42,399 --> 00:00:46,800
apps online

00:00:44,239 --> 00:00:48,239
and you have on-demand self-service and

00:00:46,800 --> 00:00:51,280
a lot of other

00:00:48,239 --> 00:00:52,239
benefits for moving to the cloud but the

00:00:51,280 --> 00:00:55,280
truth is

00:00:52,239 --> 00:00:57,520
with all of these benefits comes

00:00:55,280 --> 00:00:59,039
some kind of responsibility with all of

00:00:57,520 --> 00:01:02,239
these benefits

00:00:59,039 --> 00:01:04,239
also come some disadvantages that we

00:01:02,239 --> 00:01:05,040
need to be aware of so that we can

00:01:04,239 --> 00:01:08,320
control

00:01:05,040 --> 00:01:11,439
and to that effect i'm going to play

00:01:08,320 --> 00:01:13,680
a short video that describes this

00:01:11,439 --> 00:01:16,880
problem i'm about to talk about

00:01:13,680 --> 00:01:18,000
in layman's terms hey there i'm going to

00:01:16,880 --> 00:01:19,600
tell you a story

00:01:18,000 --> 00:01:22,400
about what happens when you do not

00:01:19,600 --> 00:01:25,040
protect public resources

00:01:22,400 --> 00:01:27,759
this house has water supply in form of a

00:01:25,040 --> 00:01:30,159
bucket at the compound

00:01:27,759 --> 00:01:31,439
this is a housemate who actually needs

00:01:30,159 --> 00:01:33,920
water

00:01:31,439 --> 00:01:36,079
he gets some into his bowl and goes back

00:01:33,920 --> 00:01:38,320
inside

00:01:36,079 --> 00:01:39,759
this second person who happens not to be

00:01:38,320 --> 00:01:41,759
a housemate

00:01:39,759 --> 00:01:44,240
comes to the public area where the water

00:01:41,759 --> 00:01:44,799
is and makes it unfit for everyone to

00:01:44,240 --> 00:01:48,240
use

00:01:44,799 --> 00:01:50,320
by washing her hands inside

00:01:48,240 --> 00:01:52,399
this housemate happened to be walking in

00:01:50,320 --> 00:01:55,360
the direction of the water

00:01:52,399 --> 00:01:57,600
and accidentally kicked it now all the

00:01:55,360 --> 00:02:00,000
water is gone

00:01:57,600 --> 00:02:02,560
why did this happen because access to

00:02:00,000 --> 00:02:05,360
the water wasn't properly regulated

00:02:02,560 --> 00:02:06,960
how do we fix this take the bucket away

00:02:05,360 --> 00:02:10,399
and keep it in a safe place

00:02:06,960 --> 00:02:13,280
secure the house to prevent outsiders

00:02:10,399 --> 00:02:15,599
walking by from tampering with resources

00:02:13,280 --> 00:02:18,080
only meant for housemates

00:02:15,599 --> 00:02:18,879
connect a tap so the housemates get

00:02:18,080 --> 00:02:24,080
water

00:02:18,879 --> 00:02:24,080
in a structured way end

00:02:24,879 --> 00:02:31,040
so as we can see from that story

00:02:28,319 --> 00:02:32,239
not properly securing our cloud

00:02:31,040 --> 00:02:34,560
resources

00:02:32,239 --> 00:02:36,959
can lead to things like human error

00:02:34,560 --> 00:02:38,319
where the actual developer is even the

00:02:36,959 --> 00:02:41,760
one that makes the mistake

00:02:38,319 --> 00:02:44,000
like a very random example here would be

00:02:41,760 --> 00:02:45,519
not properly securing your resources

00:02:44,000 --> 00:02:48,239
used in production

00:02:45,519 --> 00:02:50,720
and a developer on your team goes there

00:02:48,239 --> 00:02:53,920
and accidentally deletes it

00:02:50,720 --> 00:02:55,440
malicious attacks that's a very common

00:02:53,920 --> 00:02:58,000
example where you have

00:02:55,440 --> 00:02:59,680
people that are not supposed to have

00:02:58,000 --> 00:03:02,560
access to the system

00:02:59,680 --> 00:03:04,000
gain attack and do very ridiculous

00:03:02,560 --> 00:03:06,560
things to your application

00:03:04,000 --> 00:03:07,120
and to your data you can also fall into

00:03:06,560 --> 00:03:09,760
legal

00:03:07,120 --> 00:03:10,400
or compliance issues where you are

00:03:09,760 --> 00:03:12,080
having

00:03:10,400 --> 00:03:13,440
different lawsuits because your

00:03:12,080 --> 00:03:16,720
customers

00:03:13,440 --> 00:03:18,560
and your customers feel that their data

00:03:16,720 --> 00:03:19,519
is not secure and you're using their

00:03:18,560 --> 00:03:21,760
data

00:03:19,519 --> 00:03:23,280
for unspeakable things and it might just

00:03:21,760 --> 00:03:24,480
be the case that you're actually not

00:03:23,280 --> 00:03:27,440
using their data for

00:03:24,480 --> 00:03:28,879
unspeakable things but your application

00:03:27,440 --> 00:03:31,920
is not secure enough

00:03:28,879 --> 00:03:33,360
and their data is not secure so somehow

00:03:31,920 --> 00:03:35,760
some way

00:03:33,360 --> 00:03:37,599
things are just getting wrong and

00:03:35,760 --> 00:03:40,080
everything isn't going right

00:03:37,599 --> 00:03:42,239
and in this talk i'm going to be listing

00:03:40,080 --> 00:03:44,480
a few ways that you can

00:03:42,239 --> 00:03:45,599
secure your cloud applications i'll be

00:03:44,480 --> 00:03:48,319
talking about three

00:03:45,599 --> 00:03:49,040
security cloud patterns and i'll also be

00:03:48,319 --> 00:03:52,080
talking about

00:03:49,040 --> 00:03:55,360
a few things that you can do beyond

00:03:52,080 --> 00:03:59,120
these patterns when you are coding

00:03:55,360 --> 00:04:01,280
when you are designing and in other

00:03:59,120 --> 00:04:03,200
software engineering steps but before i

00:04:01,280 --> 00:04:04,400
start to do that i would want to quickly

00:04:03,200 --> 00:04:07,519
introduce

00:04:04,400 --> 00:04:10,000
myself my name is adora and i am a

00:04:07,519 --> 00:04:11,280
software engineer at the microsoft mixed

00:04:10,000 --> 00:04:14,720
reality team

00:04:11,280 --> 00:04:16,799
i'm a tech content creator at adora hack

00:04:14,720 --> 00:04:18,000
there a hack is a blog that i started

00:04:16,799 --> 00:04:21,359
myself

00:04:18,000 --> 00:04:24,560
i write articles and i also publish

00:04:21,359 --> 00:04:25,360
youtube videos under the brand adora

00:04:24,560 --> 00:04:29,280
hack

00:04:25,360 --> 00:04:32,240
i am the co-founder of unstock which is

00:04:29,280 --> 00:04:32,960
a community where we focus more on

00:04:32,240 --> 00:04:36,240
hands-on

00:04:32,960 --> 00:04:38,240
workshops as opposed to

00:04:36,240 --> 00:04:40,160
just normal talks because we feel that

00:04:38,240 --> 00:04:42,880
many people learn more

00:04:40,160 --> 00:04:46,400
by doing i'm also on the advisory board

00:04:42,880 --> 00:04:50,080
of vra nigeria which is

00:04:46,400 --> 00:04:52,000
a local chapter in nigerian chapter of

00:04:50,080 --> 00:04:53,280
the vr ar community and i believe this

00:04:52,000 --> 00:04:56,400
makes sense for me

00:04:53,280 --> 00:04:58,560
because as someone that is

00:04:56,400 --> 00:05:01,520
very excited about mixed reality and

00:04:58,560 --> 00:05:04,400
what we can do with that technology

00:05:01,520 --> 00:05:05,039
i would expect that personally myself i

00:05:04,400 --> 00:05:09,039
would be

00:05:05,039 --> 00:05:11,360
in a community of i would be running

00:05:09,039 --> 00:05:12,400
or at least be in a community where i

00:05:11,360 --> 00:05:14,960
have

00:05:12,400 --> 00:05:17,120
mixed reality developers and i am also

00:05:14,960 --> 00:05:18,880
surrounded by people enthusiastic about

00:05:17,120 --> 00:05:20,160
this technology and what we can do with

00:05:18,880 --> 00:05:22,080
it in the future

00:05:20,160 --> 00:05:24,000
i'm also popular in on twitter as a

00:05:22,080 --> 00:05:26,960
doran model you can check me

00:05:24,000 --> 00:05:28,479
out my twitter handle will be on the

00:05:26,960 --> 00:05:30,320
screen

00:05:28,479 --> 00:05:32,560
so before you start building your

00:05:30,320 --> 00:05:35,039
application you would think

00:05:32,560 --> 00:05:35,919
what kind of application am i building

00:05:35,039 --> 00:05:38,479
and

00:05:35,919 --> 00:05:40,720
you may need to run some kind of

00:05:38,479 --> 00:05:41,759
security checklist so that you can

00:05:40,720 --> 00:05:45,199
basically

00:05:41,759 --> 00:05:48,000
you know analyze and understand

00:05:45,199 --> 00:05:50,080
how your application needs to be secured

00:05:48,000 --> 00:05:50,960
if your application even needs to be

00:05:50,080 --> 00:05:52,320
secured

00:05:50,960 --> 00:05:54,320
and there are some questions that you

00:05:52,320 --> 00:05:56,720
might ask yourself which is

00:05:54,320 --> 00:05:58,000
will my app contain sensitive customer

00:05:56,720 --> 00:06:00,479
data

00:05:58,000 --> 00:06:01,360
where and how is my application's data

00:06:00,479 --> 00:06:03,520
stored

00:06:01,360 --> 00:06:05,600
will this application be available over

00:06:03,520 --> 00:06:07,520
the internet or just internally

00:06:05,600 --> 00:06:10,080
how do i plan to verify my user's

00:06:07,520 --> 00:06:12,639
identity what sensitive tasks

00:06:10,080 --> 00:06:13,840
are performed in my application does my

00:06:12,639 --> 00:06:17,680
application perform

00:06:13,840 --> 00:06:21,440
any risky software activities

00:06:17,680 --> 00:06:24,160
and these questions would help you

00:06:21,440 --> 00:06:26,080
you know understand what is actually

00:06:24,160 --> 00:06:28,560
what the security requirements of your

00:06:26,080 --> 00:06:31,600
application are asking yourself

00:06:28,560 --> 00:06:33,680
these six key questions and more

00:06:31,600 --> 00:06:36,400
if possible but these six key questions

00:06:33,680 --> 00:06:39,199
would actually help you understand what

00:06:36,400 --> 00:06:41,199
is required in your system in terms of

00:06:39,199 --> 00:06:43,520
in terms of security

00:06:41,199 --> 00:06:44,960
so when you say oh will my app contain

00:06:43,520 --> 00:06:46,960
sensitive data

00:06:44,960 --> 00:06:49,120
and if your app does contain sensitive

00:06:46,960 --> 00:06:50,800
data then you should be thinking about

00:06:49,120 --> 00:06:53,280
a data protection method for your

00:06:50,800 --> 00:06:55,280
application if sensitive tasks are going

00:06:53,280 --> 00:06:57,199
to be performed in your application

00:06:55,280 --> 00:06:58,880
you might be thinking about

00:06:57,199 --> 00:07:00,720
authentication and authorized

00:06:58,880 --> 00:07:02,080
authorization and you can you might also

00:07:00,720 --> 00:07:04,960
be thinking about

00:07:02,080 --> 00:07:06,960
multiple steps in the process which

00:07:04,960 --> 00:07:08,160
you'd have to do odd for example

00:07:06,960 --> 00:07:11,440
if you're going to be performing a

00:07:08,160 --> 00:07:14,840
sensitive task like transferring money

00:07:11,440 --> 00:07:16,479
yes you would want to authenticate the

00:07:14,840 --> 00:07:19,120
user i mean

00:07:16,479 --> 00:07:20,319
to the app itself but you might also

00:07:19,120 --> 00:07:23,520
want to do

00:07:20,319 --> 00:07:26,319
one kind of extra verification step

00:07:23,520 --> 00:07:27,759
before the money is transferred so these

00:07:26,319 --> 00:07:28,880
are a few things that you might want to

00:07:27,759 --> 00:07:30,720
think about

00:07:28,880 --> 00:07:31,919
and this would help you you know

00:07:30,720 --> 00:07:34,800
understand

00:07:31,919 --> 00:07:35,759
the level of security and based on these

00:07:34,800 --> 00:07:38,000
six questions

00:07:35,759 --> 00:07:38,800
i i went ahead to break down these

00:07:38,000 --> 00:07:41,759
questions

00:07:38,800 --> 00:07:44,080
and put them into you know different

00:07:41,759 --> 00:07:47,440
blocks that i felt were similar

00:07:44,080 --> 00:07:50,240
and these six questions

00:07:47,440 --> 00:07:51,199
come down into two different major

00:07:50,240 --> 00:07:53,840
umbrellas

00:07:51,199 --> 00:07:55,759
one being data protection and the other

00:07:53,840 --> 00:07:57,520
being identity management

00:07:55,759 --> 00:07:59,520
and based on that i'm going to be

00:07:57,520 --> 00:08:02,160
talking about like i said

00:07:59,520 --> 00:08:03,919
three security patterns in this talk the

00:08:02,160 --> 00:08:05,440
data protection pattern will be the

00:08:03,919 --> 00:08:07,440
gatekeeper pattern

00:08:05,440 --> 00:08:08,960
and the two identity management patterns

00:08:07,440 --> 00:08:11,280
i will be talking about would be

00:08:08,960 --> 00:08:12,000
the federated identity pattern and the

00:08:11,280 --> 00:08:14,560
valet key

00:08:12,000 --> 00:08:16,319
pattern so now let's talk about the

00:08:14,560 --> 00:08:18,160
gatekeeper pattern

00:08:16,319 --> 00:08:20,319
applications functionality are usually

00:08:18,160 --> 00:08:23,520
exposed when they accept

00:08:20,319 --> 00:08:24,960
and process a client's request if the

00:08:23,520 --> 00:08:27,440
system is compromised

00:08:24,960 --> 00:08:29,680
and a malicious user gains access or

00:08:27,440 --> 00:08:32,080
sensitive data will be exposed

00:08:29,680 --> 00:08:33,760
so in cases like this you might want to

00:08:32,080 --> 00:08:37,120
introduce

00:08:33,760 --> 00:08:40,719
a gatekeeper that helps with

00:08:37,120 --> 00:08:43,919
um request validation and what this

00:08:40,719 --> 00:08:46,640
gatekeeper does basically is that it's

00:08:43,919 --> 00:08:48,240
it's as the name implies the gateskeeper

00:08:46,640 --> 00:08:51,279
it's in the middle

00:08:48,240 --> 00:08:55,200
of the client and the actual host

00:08:51,279 --> 00:08:57,360
and the guest keeper exposes

00:08:55,200 --> 00:08:59,440
one endpoint to the client and that's

00:08:57,360 --> 00:09:03,920
the client that's the end point

00:08:59,440 --> 00:09:06,480
that the client would always call and

00:09:03,920 --> 00:09:08,080
when the client calls that endpoint the

00:09:06,480 --> 00:09:11,120
gatekeeper validates

00:09:08,080 --> 00:09:12,800
and just fantastic the request

00:09:11,120 --> 00:09:14,640
checks that based on all the

00:09:12,800 --> 00:09:19,279
requirements that i have

00:09:14,640 --> 00:09:21,760
based on what a same request should be

00:09:19,279 --> 00:09:23,040
i have validated this request and i have

00:09:21,760 --> 00:09:25,920
sanitized

00:09:23,040 --> 00:09:26,800
it's in case there's any you know web

00:09:25,920 --> 00:09:30,800
queries

00:09:26,800 --> 00:09:32,640
or anything funny or weird going on that

00:09:30,800 --> 00:09:36,000
shouldn't be going on and then based

00:09:32,640 --> 00:09:39,360
on that i can now come call the host

00:09:36,000 --> 00:09:41,279
and then i make that you know call

00:09:39,360 --> 00:09:43,680
and then the host goes ahead to access

00:09:41,279 --> 00:09:45,920
my data access the service

00:09:43,680 --> 00:09:47,440
and access all of that stuff and a real

00:09:45,920 --> 00:09:48,880
life example

00:09:47,440 --> 00:09:51,120
for that you can implement the

00:09:48,880 --> 00:09:54,080
gatekeeper in different ways

00:09:51,120 --> 00:09:56,240
you can have a gatekeeper role which

00:09:54,080 --> 00:09:58,320
would have like a limited privilege role

00:09:56,240 --> 00:09:58,880
and then you can also have a trusted

00:09:58,320 --> 00:10:01,519
role

00:09:58,880 --> 00:10:02,720
which ha which is like improved in full

00:10:01,519 --> 00:10:06,079
privileged mode

00:10:02,720 --> 00:10:08,480
and the gates keeper role exposes a

00:10:06,079 --> 00:10:10,720
public endpoint to the clients

00:10:08,480 --> 00:10:11,760
and the public endpoint is what the

00:10:10,720 --> 00:10:14,480
client calls

00:10:11,760 --> 00:10:15,440
and once the client calls that endpoint

00:10:14,480 --> 00:10:17,279
like we said

00:10:15,440 --> 00:10:18,560
the request is sanitized and the request

00:10:17,279 --> 00:10:21,360
is validated

00:10:18,560 --> 00:10:23,600
and then the internal endpoint is called

00:10:21,360 --> 00:10:27,200
and the internal endpoint

00:10:23,600 --> 00:10:30,079
is the end point that in turn

00:10:27,200 --> 00:10:31,519
makes you reach the service you know

00:10:30,079 --> 00:10:33,200
reach out to the service

00:10:31,519 --> 00:10:34,959
the next one for me will be the valet

00:10:33,200 --> 00:10:36,399
key pattern

00:10:34,959 --> 00:10:38,480
and this is an identity management

00:10:36,399 --> 00:10:41,519
scenario um the

00:10:38,480 --> 00:10:44,560
key pattern actually

00:10:41,519 --> 00:10:47,360
helps you securely control

00:10:44,560 --> 00:10:49,920
access to data by using a token that

00:10:47,360 --> 00:10:52,440
expires after a period of time

00:10:49,920 --> 00:10:53,600
so this qr token can be used for

00:10:52,440 --> 00:10:56,880
authentication

00:10:53,600 --> 00:11:00,240
and authorization and the steps

00:10:56,880 --> 00:11:04,240
the way this works is first of all

00:11:00,240 --> 00:11:06,240
the user makes a request

00:11:04,240 --> 00:11:07,839
to the application for a particular

00:11:06,240 --> 00:11:10,560
resource

00:11:07,839 --> 00:11:10,959
and once the user makes that resource

00:11:10,560 --> 00:11:13,200
the

00:11:10,959 --> 00:11:15,680
application you know validates the

00:11:13,200 --> 00:11:19,600
request and generates a token

00:11:15,680 --> 00:11:23,200
and returns that token back to the user

00:11:19,600 --> 00:11:24,880
and now the user can use that token to

00:11:23,200 --> 00:11:27,040
access that resource

00:11:24,880 --> 00:11:29,760
but after a period of time the token

00:11:27,040 --> 00:11:33,200
becomes invalid so the user will have to

00:11:29,760 --> 00:11:36,480
you know make another request

00:11:33,200 --> 00:11:38,560
again so an example of this would be

00:11:36,480 --> 00:11:40,640
you know requesting a particular

00:11:38,560 --> 00:11:43,360
resource and then getting sas tokens

00:11:40,640 --> 00:11:45,200
after a while your sas tokens become

00:11:43,360 --> 00:11:48,240
invalid and you'd have to request

00:11:45,200 --> 00:11:49,440
another token so that's basically you

00:11:48,240 --> 00:11:52,399
know how this works

00:11:49,440 --> 00:11:54,399
and these tokens would usually have some

00:11:52,399 --> 00:11:57,440
kind of access that you get so

00:11:54,399 --> 00:11:58,880
if you have read access to azure storage

00:11:57,440 --> 00:12:00,800
for example

00:11:58,880 --> 00:12:02,320
if you get token that gives you read

00:12:00,800 --> 00:12:05,440
access to azure storage

00:12:02,320 --> 00:12:09,120
you know that you can only read

00:12:05,440 --> 00:12:12,160
blobs read resources read data

00:12:09,120 --> 00:12:14,560
read anything from from azure storage

00:12:12,160 --> 00:12:16,639
but you cannot at any point

00:12:14,560 --> 00:12:18,560
write to that storage because you only

00:12:16,639 --> 00:12:19,839
have read permissions with the token

00:12:18,560 --> 00:12:23,600
that's available

00:12:19,839 --> 00:12:25,040
to you and i i got this code from the

00:12:23,600 --> 00:12:28,160
microsoft website

00:12:25,040 --> 00:12:31,360
the microsoft documentation and this

00:12:28,160 --> 00:12:35,040
code shows you a sample

00:12:31,360 --> 00:12:38,240
of how you can generate a

00:12:35,040 --> 00:12:41,680
token a sas token for

00:12:38,240 --> 00:12:42,880
a storage for azure storage so the first

00:12:41,680 --> 00:12:45,839
thing that happens

00:12:42,880 --> 00:12:48,000
is that you know yes you create your

00:12:45,839 --> 00:12:50,000
blog service client and your blog

00:12:48,000 --> 00:12:52,880
container the method is called get

00:12:50,000 --> 00:12:55,040
shared access reference for upload

00:12:52,880 --> 00:12:56,720
and then we've defined the structs which

00:12:55,040 --> 00:12:59,120
is a storage entity sas

00:12:56,720 --> 00:13:00,079
and that's what we we want to return at

00:12:59,120 --> 00:13:03,440
the end of the day

00:13:00,079 --> 00:13:04,560
our storage agency sas has our

00:13:03,440 --> 00:13:07,760
credentials

00:13:04,560 --> 00:13:11,839
which is uh you know token

00:13:07,760 --> 00:13:15,440
and the blob uri that we actually want

00:13:11,839 --> 00:13:17,200
the url to the blob that we want access

00:13:15,440 --> 00:13:22,399
to

00:13:17,200 --> 00:13:25,519
so we go ahead and we you know get the

00:13:22,399 --> 00:13:30,160
blogs and then we

00:13:25,519 --> 00:13:32,160
create a storage key credential

00:13:30,160 --> 00:13:33,519
we go ahead and specify a blobster

00:13:32,160 --> 00:13:37,360
builder

00:13:33,519 --> 00:13:39,279
we pass the name of the blob container

00:13:37,360 --> 00:13:42,240
we pass the name of the blob

00:13:39,279 --> 00:13:44,079
we specify the resource and we put a

00:13:42,240 --> 00:13:47,279
time constraint so

00:13:44,079 --> 00:13:50,160
this is when

00:13:47,279 --> 00:13:51,440
it should start and this is when you

00:13:50,160 --> 00:13:52,720
should get access and this is when your

00:13:51,440 --> 00:13:54,320
access should be revoked

00:13:52,720 --> 00:13:56,399
so for this particular example your

00:13:54,320 --> 00:13:59,760
access will be revoked

00:13:56,399 --> 00:14:03,680
after 10 minutes and

00:13:59,760 --> 00:14:06,800
the user has right access so we go ahead

00:14:03,680 --> 00:14:09,839
create the sas and then we return

00:14:06,800 --> 00:14:12,480
the sas and the uri

00:14:09,839 --> 00:14:13,199
of the blob and then in other parts of

00:14:12,480 --> 00:14:16,320
the code

00:14:13,199 --> 00:14:17,680
you can take that and get access to you

00:14:16,320 --> 00:14:20,399
know azure storage

00:14:17,680 --> 00:14:22,800
and write whatever you want to write to

00:14:20,399 --> 00:14:26,079
the storage because you were able to

00:14:22,800 --> 00:14:29,040
get right permissions

00:14:26,079 --> 00:14:29,519
the final pattern i will be talking

00:14:29,040 --> 00:14:31,600
about

00:14:29,519 --> 00:14:33,440
is the federated identity pattern which

00:14:31,600 --> 00:14:34,480
is also under the identity management

00:14:33,440 --> 00:14:36,320
scenario

00:14:34,480 --> 00:14:38,480
and this pattern allows you to separate

00:14:36,320 --> 00:14:39,440
user authentication from application

00:14:38,480 --> 00:14:41,600
source code

00:14:39,440 --> 00:14:43,760
and delegate authentication to an

00:14:41,600 --> 00:14:46,720
external provider

00:14:43,760 --> 00:14:47,360
so how this works is and this is sort of

00:14:46,720 --> 00:14:50,079
like

00:14:47,360 --> 00:14:50,639
claims based access control so how this

00:14:50,079 --> 00:14:54,880
works

00:14:50,639 --> 00:14:58,320
is um your service is using some kind of

00:14:54,880 --> 00:15:02,399
id provider or some kind of sts

00:14:58,320 --> 00:15:06,399
and a user authenticates

00:15:02,399 --> 00:15:08,240
and requests an sts token and the gay

00:15:06,399 --> 00:15:12,240
talking back from sts

00:15:08,240 --> 00:15:15,600
and then the user presents the token to

00:15:12,240 --> 00:15:16,480
the service and based on that the user

00:15:15,600 --> 00:15:19,680
is

00:15:16,480 --> 00:15:23,120
authenticated and based on you know

00:15:19,680 --> 00:15:26,800
what roles the user has

00:15:23,120 --> 00:15:29,600
and how you know you've implemented

00:15:26,800 --> 00:15:30,560
rule-based access control basically and

00:15:29,600 --> 00:15:33,839
what

00:15:30,560 --> 00:15:37,279
data is in each clean

00:15:33,839 --> 00:15:41,600
what the user is able to do is now

00:15:37,279 --> 00:15:43,920
controlled and this is helpful for you

00:15:41,600 --> 00:15:45,839
know like single enterprise sign on

00:15:43,920 --> 00:15:47,600
when you have multiple partners and when

00:15:45,839 --> 00:15:50,959
you have sas applications

00:15:47,600 --> 00:15:55,600
so you can decide to be like okay

00:15:50,959 --> 00:15:57,839
i'm going to provide this

00:15:55,600 --> 00:15:59,440
sort of i'm going to provide this sort

00:15:57,839 --> 00:16:03,920
of service

00:15:59,440 --> 00:16:05,839
to users in this particular tenant in

00:16:03,920 --> 00:16:09,680
this particular enterprise so

00:16:05,839 --> 00:16:12,320
if you try to access this thing and you

00:16:09,680 --> 00:16:14,240
you are not you are not under this

00:16:12,320 --> 00:16:17,680
tenant then

00:16:14,240 --> 00:16:20,079
i should kick you out basically um

00:16:17,680 --> 00:16:21,199
see so yeah this is what this means as

00:16:20,079 --> 00:16:24,240
well i have

00:16:21,199 --> 00:16:25,920
explained these three security patterns

00:16:24,240 --> 00:16:26,720
and now i want to move on to the other

00:16:25,920 --> 00:16:29,839
ways

00:16:26,720 --> 00:16:32,880
that you can enforce security the first

00:16:29,839 --> 00:16:36,160
way is using multi-factor authentication

00:16:32,880 --> 00:16:36,880
this is very important nowadays just one

00:16:36,160 --> 00:16:40,560
password

00:16:36,880 --> 00:16:44,000
is no longer enough we have people

00:16:40,560 --> 00:16:45,120
that want to always just constantly

00:16:44,000 --> 00:16:47,680
break into things

00:16:45,120 --> 00:16:48,720
and take as much data as much

00:16:47,680 --> 00:16:52,480
information

00:16:48,720 --> 00:16:54,880
as much things as they can take

00:16:52,480 --> 00:16:55,680
and for whatever reason if it's social

00:16:54,880 --> 00:16:59,199
media

00:16:55,680 --> 00:17:03,360
if it's finance applications whatever it

00:16:59,199 --> 00:17:07,039
is that that requires authentication

00:17:03,360 --> 00:17:09,280
um depending on the level

00:17:07,039 --> 00:17:10,640
of importance and the level of security

00:17:09,280 --> 00:17:13,280
that you're going for

00:17:10,640 --> 00:17:14,880
using multiple using multi-factor

00:17:13,280 --> 00:17:18,720
authentication is very

00:17:14,880 --> 00:17:22,000
important and this could be in form of

00:17:18,720 --> 00:17:25,760
you know a third-party authenticator app

00:17:22,000 --> 00:17:27,439
this could be in form of sending otps to

00:17:25,760 --> 00:17:30,880
a user

00:17:27,439 --> 00:17:33,440
this could be in form of some kind of

00:17:30,880 --> 00:17:35,120
security question this could be in form

00:17:33,440 --> 00:17:35,919
of different codes that you give the

00:17:35,120 --> 00:17:38,799
user

00:17:35,919 --> 00:17:39,440
and i like the user could only use one

00:17:38,799 --> 00:17:42,640
code

00:17:39,440 --> 00:17:45,039
once and then once that code is used

00:17:42,640 --> 00:17:46,799
in authentication the code is now

00:17:45,039 --> 00:17:48,880
invalid and when the user

00:17:46,799 --> 00:17:50,000
has exhausted all their i don't know 10

00:17:48,880 --> 00:17:52,160
codes for example

00:17:50,000 --> 00:17:53,200
they can always regenerate new ones

00:17:52,160 --> 00:17:56,640
different ways

00:17:53,200 --> 00:18:00,799
think of creative ways to just

00:17:56,640 --> 00:18:03,039
help secure the

00:18:00,799 --> 00:18:04,799
secure the user's data secure the user's

00:18:03,039 --> 00:18:05,280
profile secure the application a lot

00:18:04,799 --> 00:18:07,679
more

00:18:05,280 --> 00:18:09,120
another way is cons is that you should

00:18:07,679 --> 00:18:12,160
consider implementing

00:18:09,120 --> 00:18:13,520
jit access for resources um i talked

00:18:12,160 --> 00:18:16,799
about

00:18:13,520 --> 00:18:18,480
you know the developer being

00:18:16,799 --> 00:18:20,640
possibly being the one to make the

00:18:18,480 --> 00:18:23,919
mistake at the beginning of this talk

00:18:20,640 --> 00:18:26,720
and one way to prevent that is

00:18:23,919 --> 00:18:27,679
by enforcing it on production resources

00:18:26,720 --> 00:18:31,840
for example

00:18:27,679 --> 00:18:34,880
so if anybody for anyone to get

00:18:31,840 --> 00:18:38,960
access to production resources they

00:18:34,880 --> 00:18:42,320
need jit access everyone by default

00:18:38,960 --> 00:18:45,760
doesn't have access and that way you can

00:18:42,320 --> 00:18:47,440
at least minimize and control the amount

00:18:45,760 --> 00:18:49,919
of times that

00:18:47,440 --> 00:18:51,919
you know all your data is deleted or

00:18:49,919 --> 00:18:56,799
your whole service goes away

00:18:51,919 --> 00:18:59,840
or everything is missing because

00:18:56,799 --> 00:19:00,559
not everyone just has random access to

00:18:59,840 --> 00:19:03,280
production

00:19:00,559 --> 00:19:04,080
resources and can do what they like with

00:19:03,280 --> 00:19:06,400
it

00:19:04,080 --> 00:19:07,200
another thing that is very important is

00:19:06,400 --> 00:19:09,760
to use

00:19:07,200 --> 00:19:10,799
stable authentication and authorization

00:19:09,760 --> 00:19:12,559
platforms

00:19:10,799 --> 00:19:14,640
and this is one of the reasons why the

00:19:12,559 --> 00:19:18,880
federated identity pattern

00:19:14,640 --> 00:19:21,679
is is in existence um

00:19:18,880 --> 00:19:23,360
requiring reauthentication for some

00:19:21,679 --> 00:19:26,480
actions as well

00:19:23,360 --> 00:19:28,720
um for financial transactions you know

00:19:26,480 --> 00:19:32,000
once you've logged in

00:19:28,720 --> 00:19:35,120
find great but if you want to transfer

00:19:32,000 --> 00:19:36,720
i don't know one million pounds or

00:19:35,120 --> 00:19:40,000
something

00:19:36,720 --> 00:19:43,360
it's always it's always safe

00:19:40,000 --> 00:19:47,039
to re-authenticate the person

00:19:43,360 --> 00:19:50,080
before you go ahead with that you know

00:19:47,039 --> 00:19:51,520
transaction it's important to require it

00:19:50,080 --> 00:19:54,160
i think it's mostly financial

00:19:51,520 --> 00:19:57,280
transactions that do this

00:19:54,160 --> 00:19:57,600
um one other very important thing again

00:19:57,280 --> 00:20:00,080
is

00:19:57,600 --> 00:20:01,760
reducing your attack surface it could be

00:20:00,080 --> 00:20:05,280
something as small as just

00:20:01,760 --> 00:20:08,720
a machine that you are not using right

00:20:05,280 --> 00:20:11,679
if you don't need that vm

00:20:08,720 --> 00:20:12,480
remove it the bigger your attack surface

00:20:11,679 --> 00:20:15,720
is

00:20:12,480 --> 00:20:19,039
the easier it is for

00:20:15,720 --> 00:20:22,799
unauthorized for unauthorized

00:20:19,039 --> 00:20:25,679
users to gain access

00:20:22,799 --> 00:20:26,799
and do malicious things on your

00:20:25,679 --> 00:20:28,799
application

00:20:26,799 --> 00:20:31,120
because now they have different points

00:20:28,799 --> 00:20:32,240
to try out if they try to gain access to

00:20:31,120 --> 00:20:34,880
your system

00:20:32,240 --> 00:20:36,480
through one point and it did not work

00:20:34,880 --> 00:20:37,679
out they will go somewhere else to try

00:20:36,480 --> 00:20:38,240
and then they will go somewhere else to

00:20:37,679 --> 00:20:40,240
try

00:20:38,240 --> 00:20:42,799
so you should try and make your attack

00:20:40,240 --> 00:20:45,200
surface as small as possible

00:20:42,799 --> 00:20:47,200
if you are not using any vm if there's

00:20:45,200 --> 00:20:48,799
anything that is

00:20:47,200 --> 00:20:50,159
in the clouds that you're supposed to be

00:20:48,799 --> 00:20:51,200
using but for whatever reason you are

00:20:50,159 --> 00:20:53,679
not using

00:20:51,200 --> 00:20:54,960
remove it until you need it and then you

00:20:53,679 --> 00:20:56,960
can always bring it back

00:20:54,960 --> 00:20:59,440
probably handle errors and exceptions

00:20:56,960 --> 00:21:03,919
this this doesn't directly

00:20:59,440 --> 00:21:07,200
help with you know securing your system

00:21:03,919 --> 00:21:10,480
but it helps with telemetry helps with

00:21:07,200 --> 00:21:12,080
monitoring why something is not working

00:21:10,480 --> 00:21:12,880
as it should in your system it helps

00:21:12,080 --> 00:21:15,200
with

00:21:12,880 --> 00:21:16,480
you know if something happens for

00:21:15,200 --> 00:21:19,200
example

00:21:16,480 --> 00:21:21,280
and the whole system crashed you know

00:21:19,200 --> 00:21:24,080
why it crashed and

00:21:21,280 --> 00:21:24,640
it might be for a security reason it

00:21:24,080 --> 00:21:28,240
might be

00:21:24,640 --> 00:21:29,440
for other reasons it might be for other

00:21:28,240 --> 00:21:31,280
reasons i mean

00:21:29,440 --> 00:21:33,440
different software could crash for

00:21:31,280 --> 00:21:35,120
different reasons but you

00:21:33,440 --> 00:21:36,960
probably if you properly handle errors

00:21:35,120 --> 00:21:40,240
and you probably handle exceptions

00:21:36,960 --> 00:21:42,320
you know it would help your debugging

00:21:40,240 --> 00:21:44,000
process and this also turns into the

00:21:42,320 --> 00:21:46,159
next point which is you know probably

00:21:44,000 --> 00:21:47,919
monitor your service and trigger a lot

00:21:46,159 --> 00:21:50,000
about issues so

00:21:47,919 --> 00:21:51,120
if there are serious issues you want to

00:21:50,000 --> 00:21:53,280
trigger

00:21:51,120 --> 00:21:54,159
alert so that people can attend to them

00:21:53,280 --> 00:21:56,960
and fix them

00:21:54,159 --> 00:21:58,000
as fast as they can and your response

00:21:56,960 --> 00:22:01,600
time is pretty

00:21:58,000 --> 00:22:02,000
fast also encrypt sensitive data which i

00:22:01,600 --> 00:22:04,960
think

00:22:02,000 --> 00:22:06,080
is very important store sensitive things

00:22:04,960 --> 00:22:09,120
in a secret

00:22:06,080 --> 00:22:10,960
manager um you can use you know azure

00:22:09,120 --> 00:22:12,240
key vault for example or any other ones

00:22:10,960 --> 00:22:15,440
that you're interested in

00:22:12,240 --> 00:22:19,679
but do not for whatever reason

00:22:15,440 --> 00:22:21,280
had code important information don't

00:22:19,679 --> 00:22:23,919
have code sensitive data

00:22:21,280 --> 00:22:25,200
implement fail-safe measures if for

00:22:23,919 --> 00:22:28,159
whatever reason your app

00:22:25,200 --> 00:22:29,840
your application fails or crashes you

00:22:28,159 --> 00:22:33,280
wanted to go back

00:22:29,840 --> 00:22:36,880
you know to a state

00:22:33,280 --> 00:22:37,600
that is safe and then somebody can you

00:22:36,880 --> 00:22:41,360
know

00:22:37,600 --> 00:22:45,679
try again or retry another thing

00:22:41,360 --> 00:22:49,440
is that you should consider

00:22:45,679 --> 00:22:53,039
threat modelling um threat modelling

00:22:49,440 --> 00:22:55,520
is helpful especially in the initial

00:22:53,039 --> 00:22:58,960
process of trying to

00:22:55,520 --> 00:23:02,320
design your applications because

00:22:58,960 --> 00:23:03,600
it helps you understand the possible

00:23:02,320 --> 00:23:05,760
threats

00:23:03,600 --> 00:23:08,159
the same way initially i talked about

00:23:05,760 --> 00:23:09,679
you know asking yourself these questions

00:23:08,159 --> 00:23:12,799
that you can understand your security

00:23:09,679 --> 00:23:16,080
requirements with threat modeling

00:23:12,799 --> 00:23:19,120
you are analyzing your system and

00:23:16,080 --> 00:23:22,559
analyzing the flow of

00:23:19,120 --> 00:23:24,400
data the flow of oppressions

00:23:22,559 --> 00:23:25,760
in your system and understanding a

00:23:24,400 --> 00:23:28,640
possible

00:23:25,760 --> 00:23:30,240
area where you could get attacked a

00:23:28,640 --> 00:23:31,840
possible area where there could be a

00:23:30,240 --> 00:23:36,159
security breach

00:23:31,840 --> 00:23:39,600
and trying to mitigate

00:23:36,159 --> 00:23:43,279
that in your design before you start

00:23:39,600 --> 00:23:44,799
implementation and i'm going to be

00:23:43,279 --> 00:23:48,080
talking about

00:23:44,799 --> 00:23:49,520
the stride threat modeling and i'm going

00:23:48,080 --> 00:23:51,200
to be taking each threat

00:23:49,520 --> 00:23:52,799
and talking about it so let's talk about

00:23:51,200 --> 00:23:56,720
the first one if

00:23:52,799 --> 00:23:58,320
you if spoofing attacks would be the

00:23:56,720 --> 00:24:01,520
threat for example

00:23:58,320 --> 00:24:03,520
which means that it's an issue on

00:24:01,520 --> 00:24:04,960
authentication and one of the possible

00:24:03,520 --> 00:24:08,240
mitigations would be

00:24:04,960 --> 00:24:11,600
enforced you know http connections if

00:24:08,240 --> 00:24:13,360
is that somebody could possibly tamper

00:24:11,600 --> 00:24:16,720
with resources then it's

00:24:13,360 --> 00:24:19,120
a it's a problem it's a it's an

00:24:16,720 --> 00:24:21,679
integrity issue and then you should

00:24:19,120 --> 00:24:23,679
make sure that you're using valid ssl

00:24:21,679 --> 00:24:27,760
and tls certificates

00:24:23,679 --> 00:24:30,080
if reputation is a threat then

00:24:27,760 --> 00:24:31,600
you know you should consider enabling

00:24:30,080 --> 00:24:33,440
monitoring and

00:24:31,600 --> 00:24:34,960
doing proper instrumentation in your

00:24:33,440 --> 00:24:36,960
application if

00:24:34,960 --> 00:24:38,960
information disclosure is a threat then

00:24:36,960 --> 00:24:41,039
it's a serious threat

00:24:38,960 --> 00:24:42,000
and it's a confidentiality problem which

00:24:41,039 --> 00:24:43,440
you need to fix

00:24:42,000 --> 00:24:46,080
and one of the ways to fix that

00:24:43,440 --> 00:24:47,120
depending on how your application is set

00:24:46,080 --> 00:24:49,760
up is that

00:24:47,120 --> 00:24:50,720
you might decide to encrypt sensitive

00:24:49,760 --> 00:24:53,919
data

00:24:50,720 --> 00:24:56,559
or you might decide to implement data

00:24:53,919 --> 00:24:58,320
protection methods because you want to

00:24:56,559 --> 00:25:00,799
keep your data as

00:24:58,320 --> 00:25:02,880
you know confidential as possible if now

00:25:00,799 --> 00:25:04,559
of service is a threat then that's an

00:25:02,880 --> 00:25:06,559
availability problem

00:25:04,559 --> 00:25:07,919
and you might want to enable proper

00:25:06,559 --> 00:25:10,559
monitoring and proper

00:25:07,919 --> 00:25:11,600
instrumentation so that you so that you

00:25:10,559 --> 00:25:13,360
can look at

00:25:11,600 --> 00:25:15,360
the logs of your application you can

00:25:13,360 --> 00:25:16,400
look at the metrics and you should you

00:25:15,360 --> 00:25:19,919
can see

00:25:16,400 --> 00:25:24,880
how well your availability is doing

00:25:19,919 --> 00:25:26,720
and possibly try and improve on that

00:25:24,880 --> 00:25:28,799
and it will give you like a clear view

00:25:26,720 --> 00:25:31,120
of what you're looking at

00:25:28,799 --> 00:25:32,000
evaluation of privilege is the threat

00:25:31,120 --> 00:25:35,039
then

00:25:32,000 --> 00:25:38,400
authorization is the problem and

00:25:35,039 --> 00:25:40,640
one way that

00:25:38,400 --> 00:25:42,080
you can mitigate this issue is by using

00:25:40,640 --> 00:25:44,240
like really secure identity

00:25:42,080 --> 00:25:45,600
management and going back to that the

00:25:44,240 --> 00:25:49,919
federated

00:25:45,600 --> 00:25:53,279
identity pattern is a way to help

00:25:49,919 --> 00:25:55,760
with this particular problem

00:25:53,279 --> 00:25:57,760
so other ways that you can implement

00:25:55,760 --> 00:25:59,360
security is by using libraries that are

00:25:57,760 --> 00:26:01,919
secure

00:25:59,360 --> 00:26:03,520
if you have to use open source libraries

00:26:01,919 --> 00:26:05,120
make sure that these libraries are

00:26:03,520 --> 00:26:06,799
actively maintained

00:26:05,120 --> 00:26:08,640
and if you can contribute to them that

00:26:06,799 --> 00:26:10,880
would be very nice as well but make sure

00:26:08,640 --> 00:26:13,600
these libraries are actively maintained

00:26:10,880 --> 00:26:15,840
and also update your service

00:26:13,600 --> 00:26:16,880
dependencies you prefer vulnerabilities

00:26:15,840 --> 00:26:18,960
and

00:26:16,880 --> 00:26:20,000
avoid hard coding i've talked about this

00:26:18,960 --> 00:26:23,520
before

00:26:20,000 --> 00:26:27,039
if you have any important

00:26:23,520 --> 00:26:29,200
data any secrets any keys make sure you

00:26:27,039 --> 00:26:30,559
are referencing them from some kind of

00:26:29,200 --> 00:26:33,760
secrets manager

00:26:30,559 --> 00:26:36,880
if you want to learn more about security

00:26:33,760 --> 00:26:39,840
i would suggest that you look at

00:26:36,880 --> 00:26:40,960
any of these links on the screen they'll

00:26:39,840 --> 00:26:43,760
be really helpful

00:26:40,960 --> 00:26:46,000
to you thank you for watching this talk

00:26:43,760 --> 00:26:49,279
like i said earlier i am truly

00:26:46,000 --> 00:26:51,600
honored to be giving this talk today

00:26:49,279 --> 00:26:55,840
thank you for watching this talk and

00:26:51,600 --> 00:26:55,840

YouTube URL: https://www.youtube.com/watch?v=-AH2rAvipcw


