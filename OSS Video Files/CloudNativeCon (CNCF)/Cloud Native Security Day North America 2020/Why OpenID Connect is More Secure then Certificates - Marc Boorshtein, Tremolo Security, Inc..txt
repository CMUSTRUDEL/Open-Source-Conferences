Title: Why OpenID Connect is More Secure then Certificates - Marc Boorshtein, Tremolo Security, Inc.
Publication date: 2020-11-25
Playlist: Cloud Native Security Day North America 2020
Description: 
	Why OpenID Connect is More Secure then Certificates - Marc Boorshtein, Tremolo Security, Inc.

Most user's first experience accessing a cluster usually involves a certificate.  It's one of the most secure ways to authenticate a user, when done properly.  It's not nearly as secure as OpenID Connect for your clusters.  In this session you will learn why certificate authentication is a bad idea for your users accessing your clusters and why you should be using OpenID Connect.  In addition to showing why OpenID Connect is the more secure method for accessing your clusters, the session will detail the OpenID Connect threat model and how to mitigate it.  The session will also contrast this model with certificates and show how it's nearly impossible to create an authentication system with certificates as secure as one protected with OpenID Connect.  There will also be a chance for those attending to try to take over an OpenID Connect protected cluster!
Captions: 
	00:00:00,080 --> 00:00:03,520
why openid connect is more secure than

00:00:02,159 --> 00:00:05,120
certificates my name is bart

00:00:03,520 --> 00:00:06,560
boerstein i'm the cto of trimble

00:00:05,120 --> 00:00:09,519
security

00:00:06,560 --> 00:00:10,480
all right why certificates the strongest

00:00:09,519 --> 00:00:13,599
credential out there

00:00:10,480 --> 00:00:16,560
when done correctly example u.s federal

00:00:13,599 --> 00:00:19,439
government uses them for their strongest

00:00:16,560 --> 00:00:21,119
transactions a lot of industries use

00:00:19,439 --> 00:00:22,720
them built into smart cards outside of

00:00:21,119 --> 00:00:25,199
the u.s federal government

00:00:22,720 --> 00:00:26,320
when done correctly it is a great

00:00:25,199 --> 00:00:27,760
credential

00:00:26,320 --> 00:00:29,599
done correctly is the important part

00:00:27,760 --> 00:00:30,320
we're going to get into that in the next

00:00:29,599 --> 00:00:32,320
set of

00:00:30,320 --> 00:00:33,600
slides it's built directly into

00:00:32,320 --> 00:00:36,719
kubernetes

00:00:33,600 --> 00:00:38,480
chances are the first time you used uh

00:00:36,719 --> 00:00:40,719
authentication with kubernetes was with

00:00:38,480 --> 00:00:42,559
a certificate you deployed kube adm

00:00:40,719 --> 00:00:45,840
got your admin.com file and you were off

00:00:42,559 --> 00:00:45,840
to the races

00:00:46,000 --> 00:00:49,360
so let's talk about what makes a

00:00:47,440 --> 00:00:51,039
certificate secure where does that

00:00:49,360 --> 00:00:51,440
security come from you got three actors

00:00:51,039 --> 00:00:53,280
here

00:00:51,440 --> 00:00:54,480
you got key store hardware security

00:00:53,280 --> 00:00:56,239
module and

00:00:54,480 --> 00:00:57,600
just about everything these days has a

00:00:56,239 --> 00:00:59,280
hardware security module where you're

00:00:57,600 --> 00:01:01,680
talking about a mobile phone

00:00:59,280 --> 00:01:03,840
or a server it could be on a smart card

00:01:01,680 --> 00:01:05,119
or a yuba key

00:01:03,840 --> 00:01:07,040
and so that's where you're going to keep

00:01:05,119 --> 00:01:08,479
your your key in your certificate

00:01:07,040 --> 00:01:10,960
you've got certificate authority that's

00:01:08,479 --> 00:01:12,640
where the trust comes from

00:01:10,960 --> 00:01:14,240
and you've got a web server web server

00:01:12,640 --> 00:01:17,280
trustee champion authority

00:01:14,240 --> 00:01:19,520
certificate authority trusts you

00:01:17,280 --> 00:01:20,479
so onsite on your device you generate

00:01:19,520 --> 00:01:22,080
your key pair

00:01:20,479 --> 00:01:24,240
and you generate a certificate signing

00:01:22,080 --> 00:01:24,720
request the certificate signing request

00:01:24,240 --> 00:01:26,880
is then

00:01:24,720 --> 00:01:28,400
sent to the certificate authority not

00:01:26,880 --> 00:01:30,400
your private key

00:01:28,400 --> 00:01:31,840
just your certificate signing request

00:01:30,400 --> 00:01:33,360
that contains a public key

00:01:31,840 --> 00:01:35,520
as well as some additional metadata

00:01:33,360 --> 00:01:37,759
information for your ca

00:01:35,520 --> 00:01:39,119
ca says yep we're going to sign it signs

00:01:37,759 --> 00:01:42,880
it with its private key

00:01:39,119 --> 00:01:44,640
sends back a that certificate you then

00:01:42,880 --> 00:01:47,200
install that directly into your keystore

00:01:44,640 --> 00:01:48,720
hardware security module

00:01:47,200 --> 00:01:50,960
you're going to go interact with an

00:01:48,720 --> 00:01:52,960
application like the api server

00:01:50,960 --> 00:01:54,720
you establish connection exchange

00:01:52,960 --> 00:01:56,240
certificates at this point the web

00:01:54,720 --> 00:01:58,000
server is going to tell you hey

00:01:56,240 --> 00:01:59,920
here are all the issuers that i'm going

00:01:58,000 --> 00:02:01,840
to trust give me a cert from one of

00:01:59,920 --> 00:02:03,759
these issuers

00:02:01,840 --> 00:02:05,119
you present the cert the web server is

00:02:03,759 --> 00:02:06,479
going to check a couple of things

00:02:05,119 --> 00:02:08,319
including whether or not it's on a

00:02:06,479 --> 00:02:10,800
certificate revocation list

00:02:08,319 --> 00:02:11,520
identity certificates can be very long

00:02:10,800 --> 00:02:13,760
live

00:02:11,520 --> 00:02:14,959
for instance those piv cards the

00:02:13,760 --> 00:02:16,800
certificates used

00:02:14,959 --> 00:02:18,400
by the us federal government often have

00:02:16,800 --> 00:02:20,959
lives of five years because they want to

00:02:18,400 --> 00:02:23,599
keep replacing those cards

00:02:20,959 --> 00:02:24,800
and so if somebody's contract ends they

00:02:23,599 --> 00:02:27,040
retire

00:02:24,800 --> 00:02:28,560
they leave their agency their company

00:02:27,040 --> 00:02:30,080
what not

00:02:28,560 --> 00:02:33,200
for whatever reason that certificate is

00:02:30,080 --> 00:02:35,280
no longer valid guess what

00:02:33,200 --> 00:02:37,040
by dates it's still valid so if you want

00:02:35,280 --> 00:02:38,640
to make sure that nobody uses it anymore

00:02:37,040 --> 00:02:40,640
you need to add it to something called a

00:02:38,640 --> 00:02:42,800
certificate revocation list

00:02:40,640 --> 00:02:43,920
now say this certificate has been

00:02:42,800 --> 00:02:45,760
revoked

00:02:43,920 --> 00:02:47,120
that's how the web server knows hey even

00:02:45,760 --> 00:02:49,360
though this search is still technically

00:02:47,120 --> 00:02:51,599
valid from a cryptographic standpoint

00:02:49,360 --> 00:02:53,360
it should no longer be trusted that all

00:02:51,599 --> 00:02:55,519
checks out all the trust is validated

00:02:53,360 --> 00:02:59,519
your handshake is established

00:02:55,519 --> 00:03:02,000
you do secure stuff at no point

00:02:59,519 --> 00:03:02,640
did your private key leave the hsm and

00:03:02,000 --> 00:03:05,360
that's where

00:03:02,640 --> 00:03:07,920
the security of this comes in the

00:03:05,360 --> 00:03:09,519
private key the thing that makes this so

00:03:07,920 --> 00:03:12,000
secure

00:03:09,519 --> 00:03:13,680
never left your hsm which means in order

00:03:12,000 --> 00:03:15,519
to get access to it they need to have

00:03:13,680 --> 00:03:17,120
physical an attacker would need to have

00:03:15,519 --> 00:03:20,159
physical access

00:03:17,120 --> 00:03:22,879
to the hsm

00:03:20,159 --> 00:03:23,360
so why wouldn't you use certificates

00:03:22,879 --> 00:03:26,799
well

00:03:23,360 --> 00:03:28,440
for one there is no hsm support in good

00:03:26,799 --> 00:03:30,640
control right now

00:03:28,440 --> 00:03:32,640
pkcs11 which is the protocol that's used

00:03:30,640 --> 00:03:35,599
to talk hardware security modules

00:03:32,640 --> 00:03:36,480
is not right now supported by cube

00:03:35,599 --> 00:03:40,000
control

00:03:36,480 --> 00:03:41,840
um that is changing uh there is an open

00:03:40,000 --> 00:03:43,519
cap and somebody's being paid to build

00:03:41,840 --> 00:03:45,040
it so i'm pretty confident that i'll

00:03:43,519 --> 00:03:46,640
make it in there in the not too distant

00:03:45,040 --> 00:03:48,159
future

00:03:46,640 --> 00:03:50,879
now even if you have that hardware

00:03:48,159 --> 00:03:52,959
security support there is no crl support

00:03:50,879 --> 00:03:55,040
in the api server

00:03:52,959 --> 00:03:56,400
so even if you have access to that

00:03:55,040 --> 00:03:58,000
hardware certificate that

00:03:56,400 --> 00:04:00,480
really really strong certificate that

00:03:58,000 --> 00:04:01,680
you're using to identify users

00:04:00,480 --> 00:04:04,080
you can't make sure that that

00:04:01,680 --> 00:04:05,920
certificate should still be trusted

00:04:04,080 --> 00:04:07,360
there is an open issue for it it hasn't

00:04:05,920 --> 00:04:09,120
really made a lot of progress

00:04:07,360 --> 00:04:10,720
it also was called out as part of the

00:04:09,120 --> 00:04:13,200
kubernetes security audit from a couple

00:04:10,720 --> 00:04:13,200
years ago

00:04:13,519 --> 00:04:17,120
this all assumes that you're deploying

00:04:15,120 --> 00:04:19,440
your certificates correctly

00:04:17,120 --> 00:04:20,639
and quite frankly that's probably not

00:04:19,440 --> 00:04:22,639
the case

00:04:20,639 --> 00:04:23,840
um i don't mean to call anybody's baby

00:04:22,639 --> 00:04:26,320
ugly but if you're

00:04:23,840 --> 00:04:28,720
downloading your key pair if somebody's

00:04:26,320 --> 00:04:31,199
giving you a call file

00:04:28,720 --> 00:04:33,120
you're not doing it right and so you're

00:04:31,199 --> 00:04:34,560
losing a lot of the security benefit

00:04:33,120 --> 00:04:36,560
there

00:04:34,560 --> 00:04:38,400
group management is really really hard

00:04:36,560 --> 00:04:39,600
why are groups you can do groups and a

00:04:38,400 --> 00:04:41,360
certificate

00:04:39,600 --> 00:04:43,040
you can do it as an ou and the subject

00:04:41,360 --> 00:04:43,759
of the cert but there are two problems

00:04:43,040 --> 00:04:45,520
with it

00:04:43,759 --> 00:04:48,479
one you can't revoke the cert so if your

00:04:45,520 --> 00:04:52,240
groups change the cert can't be revoked

00:04:48,479 --> 00:04:54,240
two you don't want to say okay we're

00:04:52,240 --> 00:04:55,919
going to do it all with our back

00:04:54,240 --> 00:04:57,600
you know if you have 5 or ten developers

00:04:55,919 --> 00:04:58,960
doing with the rbac probably not that

00:04:57,600 --> 00:05:02,240
big of a deal listing each

00:04:58,960 --> 00:05:04,960
one in a role binding uh you have 50

00:05:02,240 --> 00:05:05,600
100 a thousand developers in a large

00:05:04,960 --> 00:05:10,160
enterprise

00:05:05,600 --> 00:05:12,960
it's getting messy really really fast

00:05:10,160 --> 00:05:14,560
you want to be able to do groups and

00:05:12,960 --> 00:05:18,400
won't work with the managed cluster

00:05:14,560 --> 00:05:20,880
so if you're using uh eks gk whatever

00:05:18,400 --> 00:05:22,560
certificates aren't even an option not

00:05:20,880 --> 00:05:24,160
right out of the box

00:05:22,560 --> 00:05:25,919
and they won't work the reverse proxy if

00:05:24,160 --> 00:05:27,840
you want your api server

00:05:25,919 --> 00:05:30,240
to validate a certificate directly guess

00:05:27,840 --> 00:05:31,520
what none of that network infrastructure

00:05:30,240 --> 00:05:33,680
that you have for tls

00:05:31,520 --> 00:05:35,120
offloading is going to work you need to

00:05:33,680 --> 00:05:36,720
have that direct connection

00:05:35,120 --> 00:05:39,360
now there is kind of an exception to

00:05:36,720 --> 00:05:41,600
that we'll get to that at the end

00:05:39,360 --> 00:05:44,000
so what makes openid connect so great

00:05:41,600 --> 00:05:46,639
it's a ratified standard well

00:05:44,000 --> 00:05:49,440
set of standards there's like 30 or 40

00:05:46,639 --> 00:05:51,919
of them i think that make it up

00:05:49,440 --> 00:05:53,759
it supports multiple mfa options because

00:05:51,919 --> 00:05:55,360
it's reliant upon a web browser when

00:05:53,759 --> 00:05:56,800
done correctly

00:05:55,360 --> 00:05:59,360
if you are putting your username and

00:05:56,800 --> 00:06:02,319
password into a cli you're not

00:05:59,360 --> 00:06:02,319
doing it correctly

00:06:02,880 --> 00:06:07,120
that web browser opens up infinite

00:06:05,280 --> 00:06:09,120
numbers of mfa options where you talk

00:06:07,120 --> 00:06:13,120
about something like duo or octa

00:06:09,120 --> 00:06:16,880
i'm a big fan of u2f which is the fido

00:06:13,120 --> 00:06:19,360
standard using hardware keys

00:06:16,880 --> 00:06:20,960
lots of possibilities there it'll work

00:06:19,360 --> 00:06:22,560
with both on-prem and managed clouds you

00:06:20,960 --> 00:06:24,479
can use impersonation with open id

00:06:22,560 --> 00:06:26,160
connect and they'll work with any cloud

00:06:24,479 --> 00:06:27,600
so you can have the authenticate the

00:06:26,160 --> 00:06:29,120
same way to your on-prem stuff as your

00:06:27,600 --> 00:06:31,440
off-prompt stuff

00:06:29,120 --> 00:06:32,160
uh and short-lived tokens so you don't

00:06:31,440 --> 00:06:35,039
have these

00:06:32,160 --> 00:06:36,880
five-year certificates you have these

00:06:35,039 --> 00:06:37,919
one-minute tokens and we'll talk about

00:06:36,880 --> 00:06:39,199
how that works

00:06:37,919 --> 00:06:40,800
and finally groups are easy because

00:06:39,199 --> 00:06:42,000
those tokens are short-lived it's just a

00:06:40,800 --> 00:06:43,680
bit of json

00:06:42,000 --> 00:06:46,160
that's digitally signed you can shove

00:06:43,680 --> 00:06:47,680
all your groups right in there

00:06:46,160 --> 00:06:48,880
all right so how does openid connect

00:06:47,680 --> 00:06:51,520
work first thing you do is you

00:06:48,880 --> 00:06:53,520
authenticate to your identity provider

00:06:51,520 --> 00:06:55,360
this part is completely non-standard

00:06:53,520 --> 00:06:56,800
this is dependent entirely

00:06:55,360 --> 00:06:59,280
on your client and your identity

00:06:56,800 --> 00:07:00,960
provider open unison has a couple really

00:06:59,280 --> 00:07:02,960
nifty ways to automate this without

00:07:00,960 --> 00:07:04,160
having to deploy anything additional

00:07:02,960 --> 00:07:05,759
but there are apps out there to work

00:07:04,160 --> 00:07:07,520
with both key clock and dex if you want

00:07:05,759 --> 00:07:08,800
to go that route

00:07:07,520 --> 00:07:11,199
identity provider is going to give you

00:07:08,800 --> 00:07:11,840
two tokens an id token and a refresh

00:07:11,199 --> 00:07:14,000
token

00:07:11,840 --> 00:07:15,680
the id token gets you into the party the

00:07:14,000 --> 00:07:16,160
refresh token gets you a new ticket when

00:07:15,680 --> 00:07:20,479
the

00:07:16,160 --> 00:07:22,400
time comes if the id token is still good

00:07:20,479 --> 00:07:23,680
when you make a request to the api

00:07:22,400 --> 00:07:24,160
server you're just going to put that id

00:07:23,680 --> 00:07:26,400
token

00:07:24,160 --> 00:07:28,800
right into the request this is what's

00:07:26,400 --> 00:07:32,400
called a bearer token

00:07:28,800 --> 00:07:34,720
this is a security issue because you

00:07:32,400 --> 00:07:37,360
don't need anything else with it

00:07:34,720 --> 00:07:39,199
if somebody compromises that token they

00:07:37,360 --> 00:07:40,800
can use it against your api server which

00:07:39,199 --> 00:07:44,720
is why it's so important to have a

00:07:40,800 --> 00:07:46,160
short lived token

00:07:44,720 --> 00:07:47,840
once you're authenticated you can do

00:07:46,160 --> 00:07:50,160
your just secure stuff

00:07:47,840 --> 00:07:52,000
uh finally has the id token expired it's

00:07:50,160 --> 00:07:54,000
been a minute you need a new token

00:07:52,000 --> 00:07:55,919
so now you authenticate but with the

00:07:54,000 --> 00:07:58,240
refresh token so the cell happens with

00:07:55,919 --> 00:08:00,560
code control behind the scenes

00:07:58,240 --> 00:08:02,319
that refresh token is one-time use once

00:08:00,560 --> 00:08:02,879
it's used it's burned you can't use it

00:08:02,319 --> 00:08:06,080
again

00:08:02,879 --> 00:08:07,680
get a new refresh token a new id token

00:08:06,080 --> 00:08:10,560
rinse and repeat until you're done doing

00:08:07,680 --> 00:08:10,560
your work for the day

00:08:10,720 --> 00:08:14,479
so oidc is perfect right not really like

00:08:13,919 --> 00:08:16,879
i said

00:08:14,479 --> 00:08:18,080
bearer token easily abused there's

00:08:16,879 --> 00:08:21,599
always a string

00:08:18,080 --> 00:08:23,360
a history of leakage uh

00:08:21,599 --> 00:08:24,879
vulnerabilities one just came out with

00:08:23,360 --> 00:08:27,280
vmware i think

00:08:24,879 --> 00:08:29,039
um so it's really important to have

00:08:27,280 --> 00:08:30,879
those short-lived tokens

00:08:29,039 --> 00:08:32,880
it can be difficult to implement a lot

00:08:30,879 --> 00:08:33,440
of different steps different projects in

00:08:32,880 --> 00:08:35,120
there

00:08:33,440 --> 00:08:37,360
whereas with certificates it's a direct

00:08:35,120 --> 00:08:38,000
connection uh so that can make it harder

00:08:37,360 --> 00:08:41,279
to implement

00:08:38,000 --> 00:08:44,959
and hard to be to debug

00:08:41,279 --> 00:08:46,399
but what about using vault copy cert and

00:08:44,959 --> 00:08:47,279
all sorts of other schemes that i've

00:08:46,399 --> 00:08:50,000
seen

00:08:47,279 --> 00:08:52,640
um ultimately you're re-implementing

00:08:50,000 --> 00:08:54,640
open id connects refresh process

00:08:52,640 --> 00:08:55,760
but without the thousands of hours of

00:08:54,640 --> 00:08:58,640
peer review

00:08:55,760 --> 00:09:01,040
that open id has gotten chances are

00:08:58,640 --> 00:09:02,720
unless you work at one of the larger

00:09:01,040 --> 00:09:04,160
cloud vendors you are not going to have

00:09:02,720 --> 00:09:06,720
enough eyes on

00:09:04,160 --> 00:09:08,560
whatever you develop to equal the amount

00:09:06,720 --> 00:09:10,959
of time that's been put into open id

00:09:08,560 --> 00:09:10,959
connect

00:09:11,440 --> 00:09:15,519
i really want search great you search

00:09:13,839 --> 00:09:17,200
with open id connect have your identity

00:09:15,519 --> 00:09:19,760
provider authenticate with a certificate

00:09:17,200 --> 00:09:21,440
check your crl you're off to the races

00:09:19,760 --> 00:09:23,440
that doesn't work for you use the

00:09:21,440 --> 00:09:25,200
reverse proxy with impersonation

00:09:23,440 --> 00:09:26,800
reverse proxy checks the search checks

00:09:25,200 --> 00:09:28,720
the crl

00:09:26,800 --> 00:09:30,080
uses impersonation with the api server

00:09:28,720 --> 00:09:33,920
works in both cloud

00:09:30,080 --> 00:09:35,839
and man and on-prem solutions

00:09:33,920 --> 00:09:37,440
hey thanks very much for taking the time

00:09:35,839 --> 00:09:39,680
to learn about certificates you can find

00:09:37,440 --> 00:09:41,120
me on the twitters at mlbim

00:09:39,680 --> 00:09:43,920
and if you're looking for an openid

00:09:41,120 --> 00:09:45,440
connect identity provider for your

00:09:43,920 --> 00:09:48,320
kubernetes deployment take a look at

00:09:45,440 --> 00:09:51,519
open unison it's our open source project

00:09:48,320 --> 00:09:52,560
open id connect saml ldap theworks

00:09:51,519 --> 00:09:57,839
multifactor

00:09:52,560 --> 00:09:57,839

YouTube URL: https://www.youtube.com/watch?v=Ub6oEQN9zMw


