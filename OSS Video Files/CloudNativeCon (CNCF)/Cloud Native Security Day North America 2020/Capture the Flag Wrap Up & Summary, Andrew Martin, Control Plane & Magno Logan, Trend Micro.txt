Title: Capture the Flag Wrap Up & Summary, Andrew Martin, Control Plane & Magno Logan, Trend Micro
Publication date: 2020-12-02
Playlist: Cloud Native Security Day North America 2020
Description: 
	Don’t miss out! Join us at our upcoming event: KubeCon + CloudNativeCon Europe 2021 Virtual from May 4–7, 2021. Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Capture the Flag Wrap Up & Summary, Andrew Martin, Control Plane & Magno Logan, Trend Micro
Captions: 
	00:00:00,240 --> 00:00:04,319
hello everybody and welcome to the

00:00:02,720 --> 00:00:06,879
capture the flag

00:00:04,319 --> 00:00:08,559
shakedown uh we will go through what has

00:00:06,879 --> 00:00:10,800
occurred today

00:00:08,559 --> 00:00:11,759
and uh we'll actually replay the

00:00:10,800 --> 00:00:15,280
scenarios

00:00:11,759 --> 00:00:17,520
and look at uh what you could have won

00:00:15,280 --> 00:00:19,199
now notably we didn't actually have any

00:00:17,520 --> 00:00:22,560
prizes today and that was uh

00:00:19,199 --> 00:00:25,439
intentional so let's

00:00:22,560 --> 00:00:27,119
explain why that was and what has

00:00:25,439 --> 00:00:28,960
happened

00:00:27,119 --> 00:00:31,519
uh hopefully my screen should be sharing

00:00:28,960 --> 00:00:34,559
we shall see

00:00:31,519 --> 00:00:38,559
okay so yes we

00:00:34,559 --> 00:00:41,360
we had a ctf today hello and welcome

00:00:38,559 --> 00:00:42,559
thanks for your attendance and hopefully

00:00:41,360 --> 00:00:45,120
this will leave you

00:00:42,559 --> 00:00:45,760
mildly entertained so what were we doing

00:00:45,120 --> 00:00:48,160
today

00:00:45,760 --> 00:00:48,800
uh today was a day of ambition we aimed

00:00:48,160 --> 00:00:52,000
to

00:00:48,800 --> 00:00:52,960
educate amuse beguile and everything in

00:00:52,000 --> 00:00:56,480
between

00:00:52,960 --> 00:00:58,239
in a safe and happy environment

00:00:56,480 --> 00:00:59,680
and we had the absolute pleasure of

00:00:58,239 --> 00:01:03,359
introducing people to

00:00:59,680 --> 00:01:03,359
the joys of container hacking

00:01:03,440 --> 00:01:07,200
scenarios are each built with a learning

00:01:06,080 --> 00:01:09,920
outcome in mind

00:01:07,200 --> 00:01:11,439
and our capable task masters also

00:01:09,920 --> 00:01:15,280
constructed the scenarios

00:01:11,439 --> 00:01:18,400
which gave us a little bit more closure

00:01:15,280 --> 00:01:19,600
on actually helping and

00:01:18,400 --> 00:01:22,479
giving hints to people as they went

00:01:19,600 --> 00:01:25,040
through notably absent from the list of

00:01:22,479 --> 00:01:27,280
goals is ranking

00:01:25,040 --> 00:01:29,119
uh this is because there's no official

00:01:27,280 --> 00:01:30,400
scores there's no prizes

00:01:29,119 --> 00:01:32,799
and the idea here is just to take the

00:01:30,400 --> 00:01:35,360
pressure off and to encourage people

00:01:32,799 --> 00:01:36,880
to go and hack stuff and to learn and to

00:01:35,360 --> 00:01:38,880
enjoy themselves

00:01:36,880 --> 00:01:40,240
breaking things in a safe and

00:01:38,880 --> 00:01:42,799
importantly legal

00:01:40,240 --> 00:01:42,799
environment

00:01:44,320 --> 00:01:47,520
although saying that if you have

00:01:45,920 --> 00:01:50,399
captured a flag

00:01:47,520 --> 00:01:50,960
or more and you'd like some some secret

00:01:50,399 --> 00:01:53,840
swag

00:01:50,960 --> 00:01:55,280
then do dm a physical address to the

00:01:53,840 --> 00:01:58,320
nice task master

00:01:55,280 --> 00:02:01,200
and they will ship you something worthy

00:01:58,320 --> 00:02:01,200
of your efforts

00:02:01,759 --> 00:02:07,439
okay so today was hopefully an exercise

00:02:04,799 --> 00:02:09,200
in preparing for the unexpected thinking

00:02:07,439 --> 00:02:12,480
a little bit outside of the box

00:02:09,200 --> 00:02:14,640
and uh an encouragement that uh nothing

00:02:12,480 --> 00:02:16,879
is entirely secure and we should we

00:02:14,640 --> 00:02:19,920
should pay attention to these things

00:02:16,879 --> 00:02:20,560
so we are in the uk time zone on this

00:02:19,920 --> 00:02:22,400
end so

00:02:20,560 --> 00:02:24,640
please bear with us um it's been five

00:02:22,400 --> 00:02:28,080
o'clock for quite some time

00:02:24,640 --> 00:02:28,560
we had six scenarios one scenario per

00:02:28,080 --> 00:02:30,720
talk

00:02:28,560 --> 00:02:32,160
so if you did the first scenario it was

00:02:30,720 --> 00:02:32,959
concurrently running with the first talk

00:02:32,160 --> 00:02:36,080
and then

00:02:32,959 --> 00:02:39,280
detectively throughout the day um and

00:02:36,080 --> 00:02:42,720
lots of talking but nefarious small and

00:02:39,280 --> 00:02:44,720
potentially mild vulnerabilities

00:02:42,720 --> 00:02:46,080
unless of course uh someone did better

00:02:44,720 --> 00:02:48,319
than we bargained for

00:02:46,080 --> 00:02:49,440
and uh the aws build will be

00:02:48,319 --> 00:02:53,120
significantly higher

00:02:49,440 --> 00:02:54,879
than we thought so there are many places

00:02:53,120 --> 00:02:56,560
to look for vulnerable clusters

00:02:54,879 --> 00:02:58,480
but we believe the only way to up skill

00:02:56,560 --> 00:03:01,680
people is to give them a safe place

00:02:58,480 --> 00:03:04,720
to practice in so instead of going on

00:03:01,680 --> 00:03:06,959
uh cluster safari we prefer to run

00:03:04,720 --> 00:03:09,280
ctf-based training

00:03:06,959 --> 00:03:10,000
but capture the flags can often be

00:03:09,280 --> 00:03:12,080
daunting

00:03:10,000 --> 00:03:13,280
big challenging filled with the kind of

00:03:12,080 --> 00:03:16,159
people who we

00:03:13,280 --> 00:03:17,360
we look up to and we want to break those

00:03:16,159 --> 00:03:19,519
barriers down and give everybody the

00:03:17,360 --> 00:03:21,680
opportunity to be involved

00:03:19,519 --> 00:03:23,040
so we hope there's been a strong first

00:03:21,680 --> 00:03:26,799
user experience

00:03:23,040 --> 00:03:27,680
um there's attentive moderators in the

00:03:26,799 --> 00:03:30,400
channels

00:03:27,680 --> 00:03:31,680
and teaching assistants and uh yeah we

00:03:30,400 --> 00:03:32,080
just want to give people a boost on

00:03:31,680 --> 00:03:35,360
their

00:03:32,080 --> 00:03:37,360
cloud native journey so uh

00:03:35,360 --> 00:03:38,879
spoiler alert um if anybody is still

00:03:37,360 --> 00:03:42,239
playing your time is up

00:03:38,879 --> 00:03:44,720
and we will uh not be

00:03:42,239 --> 00:03:46,319
validating any flags after this point uh

00:03:44,720 --> 00:03:46,799
so let's go through the scenarios and

00:03:46,319 --> 00:03:49,920
find

00:03:46,799 --> 00:04:01,840
all the flags now

00:03:49,920 --> 00:04:01,840
um excuse me while i shuffle my screens

00:04:06,000 --> 00:04:12,400
okay so the first scenario

00:04:09,040 --> 00:04:15,920
um was uh called node

00:04:12,400 --> 00:04:19,359
secret breach so

00:04:15,920 --> 00:04:19,359
back to the screen share hopefully

00:04:22,240 --> 00:04:30,400
okay so uh what happened

00:04:26,000 --> 00:04:32,160
here well first of all

00:04:30,400 --> 00:04:33,759
we start we're starting as the root user

00:04:32,160 --> 00:04:36,800
and this is uh

00:04:33,759 --> 00:04:38,479
this is mixed of course root has a

00:04:36,800 --> 00:04:41,120
special set of privileges

00:04:38,479 --> 00:04:42,800
in linux the root user is a specific and

00:04:41,120 --> 00:04:45,440
special user

00:04:42,800 --> 00:04:46,320
that means it has capabilities and those

00:04:45,440 --> 00:04:49,520
capabilities

00:04:46,320 --> 00:04:50,800
may include things like changing other

00:04:49,520 --> 00:04:54,400
people's files

00:04:50,800 --> 00:04:57,199
or opening a network adapter in

00:04:54,400 --> 00:04:57,600
a low level mode so we can just either

00:04:57,199 --> 00:05:00,000
send

00:04:57,600 --> 00:05:01,360
custom packets or turn it set it into a

00:05:00,000 --> 00:05:03,280
different mode so we can sniff stuff on

00:05:01,360 --> 00:05:04,880
the network

00:05:03,280 --> 00:05:06,639
these are not things we'd want an

00:05:04,880 --> 00:05:08,320
average user to do

00:05:06,639 --> 00:05:10,800
and so the distinction of running in a

00:05:08,320 --> 00:05:14,800
container without username spaces

00:05:10,800 --> 00:05:18,160
is important at this point so

00:05:14,800 --> 00:05:19,280
let's see what else is in this container

00:05:18,160 --> 00:05:21,039
let's have a look around well this is

00:05:19,280 --> 00:05:22,400
what we expect right we've got a process

00:05:21,039 --> 00:05:23,199
namespace so we can only see the

00:05:22,400 --> 00:05:26,400
processes

00:05:23,199 --> 00:05:28,160
that we have available to us

00:05:26,400 --> 00:05:30,880
what else might we do we might have a

00:05:28,160 --> 00:05:33,440
look around and see what else is mounted

00:05:30,880 --> 00:05:34,560
um this is kind of noisy there's not

00:05:33,440 --> 00:05:36,639
really much here that's

00:05:34,560 --> 00:05:39,120
that's useful there are a few things

00:05:36,639 --> 00:05:42,320
anytime we see

00:05:39,120 --> 00:05:43,280
a docker uh or perhaps one of these

00:05:42,320 --> 00:05:46,240
mounts

00:05:43,280 --> 00:05:47,120
they could be interesting so uh df the

00:05:46,240 --> 00:05:48,720
disk free tool

00:05:47,120 --> 00:05:51,280
is a little bit of a quicker way to get

00:05:48,720 --> 00:05:54,720
a view on this in my opinion

00:05:51,280 --> 00:05:55,440
and of course we see a service account

00:05:54,720 --> 00:05:58,720
there

00:05:55,440 --> 00:06:00,880
service accounts are juicy and uh

00:05:58,720 --> 00:06:02,479
we are people that love messing around

00:06:00,880 --> 00:06:04,319
with service accounts

00:06:02,479 --> 00:06:06,639
on this occasion though um this was not

00:06:04,319 --> 00:06:10,080
a service account based challenge

00:06:06,639 --> 00:06:11,039
and uh okay so we've had a look what's

00:06:10,080 --> 00:06:12,800
running

00:06:11,039 --> 00:06:14,800
uh sorry we've had a look what's mounted

00:06:12,800 --> 00:06:17,840
within the container

00:06:14,800 --> 00:06:18,560
um there's a lot here but some of the

00:06:17,840 --> 00:06:22,319
things

00:06:18,560 --> 00:06:23,759
notably a device from the host

00:06:22,319 --> 00:06:25,520
other stuff that doesn't look like it's

00:06:23,759 --> 00:06:28,560
inside the container well

00:06:25,520 --> 00:06:30,720
that's because containers are wonderful

00:06:28,560 --> 00:06:32,880
but they're not a perfect abstraction

00:06:30,720 --> 00:06:35,680
and that concretely means that

00:06:32,880 --> 00:06:37,440
container runtimes have to put effort in

00:06:35,680 --> 00:06:40,080
to hide certain things from us

00:06:37,440 --> 00:06:41,520
and those things may include parts of

00:06:40,080 --> 00:06:44,160
the proc file system

00:06:41,520 --> 00:06:44,560
bits of cis the way that we interact

00:06:44,160 --> 00:06:47,600
with

00:06:44,560 --> 00:06:48,639
the process table and also the way that

00:06:47,600 --> 00:06:51,759
things are mounted

00:06:48,639 --> 00:06:55,280
in so uh okay

00:06:51,759 --> 00:06:58,000
um containers are a child of evolution

00:06:55,280 --> 00:06:59,919
um rather than intelligent design and

00:06:58,000 --> 00:07:02,319
like everything else on the internet our

00:06:59,919 --> 00:07:03,680
gaffer tape together uh no disrespect to

00:07:02,319 --> 00:07:05,759
people who've done an excellent job

00:07:03,680 --> 00:07:07,599
making them available to us

00:07:05,759 --> 00:07:09,840
um okay but enough of this there's a lot

00:07:07,599 --> 00:07:11,520
of noise here we want to get some signal

00:07:09,840 --> 00:07:14,319
uh let's think about what we can do with

00:07:11,520 --> 00:07:17,520
the service counts

00:07:14,319 --> 00:07:20,720
right so we can see that

00:07:17,520 --> 00:07:21,919
dev is here so what does this mean so

00:07:20,720 --> 00:07:26,319
docker will mount in

00:07:21,919 --> 00:07:28,319
etsy hosts using the

00:07:26,319 --> 00:07:29,680
mount point from the host that it's on

00:07:28,319 --> 00:07:31,360
so wherever you store your container

00:07:29,680 --> 00:07:34,400
images those read write layers

00:07:31,360 --> 00:07:35,199
that's where this is so already the

00:07:34,400 --> 00:07:39,360
abstraction has

00:07:35,199 --> 00:07:39,360
leaked with the file system here

00:07:39,440 --> 00:07:42,880
what do we do next then well

00:07:43,039 --> 00:07:46,080
i guess it's probably worth uh checking

00:07:44,960 --> 00:07:48,319
our privilege

00:07:46,080 --> 00:07:49,120
now there is a canonical way of doing

00:07:48,319 --> 00:07:50,560
this

00:07:49,120 --> 00:07:52,479
uh which is jesse frazil's am i

00:07:50,560 --> 00:07:53,919
contained of course

00:07:52,479 --> 00:07:55,599
it's not doing anything magic it's

00:07:53,919 --> 00:07:58,160
checking

00:07:55,599 --> 00:07:59,039
states and files that are available to

00:07:58,160 --> 00:08:01,520
us

00:07:59,039 --> 00:08:03,039
inside a container but it makes it very

00:08:01,520 --> 00:08:04,000
easy for us to do and gives us a unified

00:08:03,039 --> 00:08:07,599
view so

00:08:04,000 --> 00:08:08,080
let's try and do that one thing to bear

00:08:07,599 --> 00:08:11,120
in mind

00:08:08,080 --> 00:08:12,319
is that we are roots and that means that

00:08:11,120 --> 00:08:15,599
we have the ability

00:08:12,319 --> 00:08:17,360
to run package manager commands we need

00:08:15,599 --> 00:08:18,960
to be able to write to any location on

00:08:17,360 --> 00:08:20,080
the file system so we have to be root to

00:08:18,960 --> 00:08:23,280
do this

00:08:20,080 --> 00:08:26,400
generally and uh yeah there we are so

00:08:23,280 --> 00:08:27,680
just installed curl because without curl

00:08:26,400 --> 00:08:30,160
i'm gonna have trouble

00:08:27,680 --> 00:08:31,360
pulling in stuff from remote endpoints

00:08:30,160 --> 00:08:32,640
although of course

00:08:31,360 --> 00:08:34,640
any programming language is an

00:08:32,640 --> 00:08:36,800
interpreter and most can be used to

00:08:34,640 --> 00:08:41,039
replicate curl in some way

00:08:36,800 --> 00:08:44,159
so let's pull am i contained from github

00:08:41,039 --> 00:08:46,240
chamod it and run it

00:08:44,159 --> 00:08:47,600
happy days okay so we've got some stuff

00:08:46,240 --> 00:08:49,839
here what does this say

00:08:47,600 --> 00:08:51,839
uh we're in kubernetes does it have

00:08:49,839 --> 00:08:53,680
namespaces pid namespace

00:08:51,839 --> 00:08:55,600
generally that is always true anyway

00:08:53,680 --> 00:08:57,120
username space is generally always false

00:08:55,600 --> 00:09:00,160
because

00:08:57,120 --> 00:09:01,360
username spaces are not enabled i

00:09:00,160 --> 00:09:04,880
suppose by default

00:09:01,360 --> 00:09:06,959
in run c or in kubernetes

00:09:04,880 --> 00:09:08,959
this is interesting though we're

00:09:06,959 --> 00:09:10,720
unconfined in app armor

00:09:08,959 --> 00:09:12,800
now if we were running in docker that

00:09:10,720 --> 00:09:15,839
would always have a profile

00:09:12,800 --> 00:09:19,040
kubernetes of course disables this

00:09:15,839 --> 00:09:19,519
and uh so it's just reinforcing the fact

00:09:19,040 --> 00:09:21,120
that we're

00:09:19,519 --> 00:09:24,399
in kubernetes but it doesn't tell us

00:09:21,120 --> 00:09:27,760
anything uh too drastic

00:09:24,399 --> 00:09:31,440
this however what is this this is

00:09:27,760 --> 00:09:33,920
a a wide bounding set of capabilities

00:09:31,440 --> 00:09:35,279
so stuff in here this means we can

00:09:33,920 --> 00:09:37,279
change ownerships

00:09:35,279 --> 00:09:38,320
override discretionary access control

00:09:37,279 --> 00:09:39,519
which is um

00:09:38,320 --> 00:09:41,920
basically writing on other people's

00:09:39,519 --> 00:09:43,600
files and all sorts of things in here

00:09:41,920 --> 00:09:46,560
that we recognize

00:09:43,600 --> 00:09:47,760
processes being killed raw input and

00:09:46,560 --> 00:09:50,959
outputs

00:09:47,760 --> 00:09:53,200
access to the network adapters this is

00:09:50,959 --> 00:09:54,880
pretty likely to be a privileged

00:09:53,200 --> 00:09:57,360
container

00:09:54,880 --> 00:09:58,959
okay so we know what that means that

00:09:57,360 --> 00:10:02,000
means that actually

00:09:58,959 --> 00:10:03,200
what is in dev is a reflection of what's

00:10:02,000 --> 00:10:06,160
on the host

00:10:03,200 --> 00:10:07,600
so as a reminder the privileged flag uh

00:10:06,160 --> 00:10:08,320
the most dangerous flag in the history

00:10:07,600 --> 00:10:13,120
of computing

00:10:08,320 --> 00:10:15,120
as i will off to repeat disables

00:10:13,120 --> 00:10:16,640
most namespaces it turns off app armor

00:10:15,120 --> 00:10:19,120
and setcomp if they're enabled

00:10:16,640 --> 00:10:20,880
it grants all capabilities and it mounts

00:10:19,120 --> 00:10:24,079
all of the hosts devices

00:10:20,880 --> 00:10:27,120
into the container this is a bad day

00:10:24,079 --> 00:10:29,839
for a system administrator why because

00:10:27,120 --> 00:10:31,519
we can say all right we know which disk

00:10:29,839 --> 00:10:34,880
is mounted from the host

00:10:31,519 --> 00:10:39,760
so let's mount

00:10:34,880 --> 00:10:39,760
that disk into an empty mount directory

00:10:39,920 --> 00:10:44,079
okay so this is probably not what we

00:10:42,320 --> 00:10:48,640
were hoping to see

00:10:44,079 --> 00:10:51,839
because if we were blue team um because

00:10:48,640 --> 00:10:54,560
that's what the root of the containers

00:10:51,839 --> 00:10:56,560
file system partition looks like whereas

00:10:54,560 --> 00:10:58,720
what we've mounted in from the roots

00:10:56,560 --> 00:11:01,360
uh let's go back to there we've mounted

00:10:58,720 --> 00:11:04,480
it from the host contains extra stuff

00:11:01,360 --> 00:11:06,640
and lo and behold it contains a

00:11:04,480 --> 00:11:10,959
directory called node secrets

00:11:06,640 --> 00:11:11,920
this may be obvious oops let's uh let's

00:11:10,959 --> 00:11:14,240
actually

00:11:11,920 --> 00:11:17,279
yep go in there uh and there we go so

00:11:14,240 --> 00:11:17,279
there is our first flag

00:11:17,519 --> 00:11:21,680
the disadvantages of running privileged

00:11:19,440 --> 00:11:24,640
containers are that they

00:11:21,680 --> 00:11:25,839
are equivalent to running the process on

00:11:24,640 --> 00:11:27,519
the host

00:11:25,839 --> 00:11:29,680
there is essentially no containerization

00:11:27,519 --> 00:11:32,800
going on when we run privilege

00:11:29,680 --> 00:11:34,399
and yes run for the hills

00:11:32,800 --> 00:11:36,560
if that's the kind of thing you are

00:11:34,399 --> 00:11:37,839
trying to defend because it's more or

00:11:36,560 --> 00:11:41,360
less indefensible

00:11:37,839 --> 00:11:44,399
okay that was the first one

00:11:41,360 --> 00:11:48,399
next we have uh escalate and cover

00:11:44,399 --> 00:11:48,399
secrets and

00:11:49,040 --> 00:11:52,639
let's jump in so this alias will just

00:11:51,279 --> 00:11:55,680
take me into the

00:11:52,639 --> 00:11:57,200
um into the next host

00:11:55,680 --> 00:11:59,519
okay let's spend a bit more time looking

00:11:57,200 --> 00:12:03,519
at what's happening here so um

00:11:59,519 --> 00:12:03,519
we're in the attack container

00:12:03,760 --> 00:12:09,360
and escalate and cover secret sre has

00:12:07,279 --> 00:12:10,880
deployed a postgres demon set

00:12:09,360 --> 00:12:12,800
and a new pod for monitoring the

00:12:10,880 --> 00:12:15,040
processes in your cluster

00:12:12,800 --> 00:12:16,800
following a routine audit of an

00:12:15,040 --> 00:12:18,399
application it is believed

00:12:16,800 --> 00:12:20,160
that the deployment setup allows a

00:12:18,399 --> 00:12:23,279
compromised process audit

00:12:20,160 --> 00:12:24,880
pod container a mouthful

00:12:23,279 --> 00:12:27,360
to escalate its attack to other

00:12:24,880 --> 00:12:29,279
containers on the host

00:12:27,360 --> 00:12:31,279
this doesn't sound like it makes sense

00:12:29,279 --> 00:12:31,920
there's obviously something a little bit

00:12:31,279 --> 00:12:35,200
askew

00:12:31,920 --> 00:12:36,880
here okay so the the question then is

00:12:35,200 --> 00:12:38,560
verify this by uncovering both the

00:12:36,880 --> 00:12:39,760
postgres database password and the

00:12:38,560 --> 00:12:42,399
secret key

00:12:39,760 --> 00:12:43,760
we will start in the process audit pod

00:12:42,399 --> 00:12:47,360
okay

00:12:43,760 --> 00:12:49,440
so um first of all we know that it's

00:12:47,360 --> 00:12:53,200
possible to provision secrets via

00:12:49,440 --> 00:12:55,600
environment variables this is um

00:12:53,200 --> 00:12:57,360
this is something that the 12 factor app

00:12:55,600 --> 00:13:00,399
has told us historically

00:12:57,360 --> 00:13:01,519
but as we know the environment of a

00:13:00,399 --> 00:13:04,880
process leaks

00:13:01,519 --> 00:13:06,000
to other users of the system and so we

00:13:04,880 --> 00:13:08,240
actually prefer to provision

00:13:06,000 --> 00:13:09,200
passwords with a with a file and an

00:13:08,240 --> 00:13:12,240
environment variable

00:13:09,200 --> 00:13:15,760
as a as a pointer containing the

00:13:12,240 --> 00:13:16,800
path of that file so i mean the first

00:13:15,760 --> 00:13:19,279
place to start here

00:13:16,800 --> 00:13:20,639
um then is probably just looking at the

00:13:19,279 --> 00:13:23,440
environment

00:13:20,639 --> 00:13:25,040
let's just see what is in here okay well

00:13:23,440 --> 00:13:28,240
there's actually nothing

00:13:25,040 --> 00:13:30,959
particularly juicy in here and uh

00:13:28,240 --> 00:13:31,839
because we know i'll just go up and

00:13:30,959 --> 00:13:34,720
because we know

00:13:31,839 --> 00:13:36,000
that the the flag has a specific format

00:13:34,720 --> 00:13:39,040
at this point

00:13:36,000 --> 00:13:40,000
um we can use that string to uh to just

00:13:39,040 --> 00:13:41,519
grab through the end

00:13:40,000 --> 00:13:44,000
we haven't missed anything there's

00:13:41,519 --> 00:13:47,279
nothing there okay

00:13:44,000 --> 00:13:48,880
um so we're supposed to be

00:13:47,279 --> 00:13:51,040
let's just remind ourselves this audit

00:13:48,880 --> 00:13:52,480
this process audit pod

00:13:51,040 --> 00:13:55,920
and we're looking to understand what the

00:13:52,480 --> 00:13:58,240
database adjacent to us is doing

00:13:55,920 --> 00:14:00,320
so let's just see what we've got running

00:13:58,240 --> 00:14:03,120
okay this is a red flag

00:14:00,320 --> 00:14:03,920
for a catalonian festival we should not

00:14:03,120 --> 00:14:06,480
be seeing

00:14:03,920 --> 00:14:08,000
this many processes because as we saw

00:14:06,480 --> 00:14:11,440
let's go back up to where we were

00:14:08,000 --> 00:14:13,440
earlier as we saw in the process table

00:14:11,440 --> 00:14:15,120
excuse me it's further than i thought

00:14:13,440 --> 00:14:18,000
the process table here

00:14:15,120 --> 00:14:18,720
for the container which is isolated to

00:14:18,000 --> 00:14:20,959
itself

00:14:18,720 --> 00:14:22,000
we're only seeing a very small number of

00:14:20,959 --> 00:14:24,240
processors

00:14:22,000 --> 00:14:26,079
and notably we see pid 1 which is not

00:14:24,240 --> 00:14:28,560
systemd or an init system

00:14:26,079 --> 00:14:30,000
it's just a sleep command so that's what

00:14:28,560 --> 00:14:32,720
we would expect to see

00:14:30,000 --> 00:14:34,800
but actually we can see all sorts of

00:14:32,720 --> 00:14:38,480
things we can see stuff on the host

00:14:34,800 --> 00:14:41,199
uh so this is again a remarkably

00:14:38,480 --> 00:14:42,800
bad day um the question here though is

00:14:41,199 --> 00:14:45,199
not how we uh

00:14:42,800 --> 00:14:46,079
we take over the hosts although from

00:14:45,199 --> 00:14:48,560
from here it's um

00:14:46,079 --> 00:14:50,320
not especially difficult we still want

00:14:48,560 --> 00:14:53,279
to exfiltrate those um

00:14:50,320 --> 00:14:54,399
those crucial bits of data the secret

00:14:53,279 --> 00:14:58,240
and the key

00:14:54,399 --> 00:15:00,720
uh okay so this is probably how

00:14:58,240 --> 00:15:01,839
we traversed containers because we

00:15:00,720 --> 00:15:02,399
shouldn't be able to see the process

00:15:01,839 --> 00:15:04,880
list

00:15:02,399 --> 00:15:05,440
as soon as we can let's list it uh in

00:15:04,880 --> 00:15:07,760
its

00:15:05,440 --> 00:15:09,279
fullest extent and have a look for

00:15:07,760 --> 00:15:12,079
postgres

00:15:09,279 --> 00:15:13,279
okay so we found postgres and just to be

00:15:12,079 --> 00:15:14,560
clear

00:15:13,279 --> 00:15:17,199
this is post squares running in a

00:15:14,560 --> 00:15:20,399
container on the same host

00:15:17,199 --> 00:15:23,519
what we're seeing here is a host

00:15:20,399 --> 00:15:26,720
pid namespace share and this again

00:15:23,519 --> 00:15:27,600
is um of questionable repute as a

00:15:26,720 --> 00:15:29,680
practice

00:15:27,600 --> 00:15:30,800
that there is some necessity for it but

00:15:29,680 --> 00:15:32,079
we should always be careful when

00:15:30,800 --> 00:15:33,920
disabling

00:15:32,079 --> 00:15:36,160
a container security feature or

00:15:33,920 --> 00:15:38,320
container primitive like host namespaces

00:15:36,160 --> 00:15:40,639
for networking or pids

00:15:38,320 --> 00:15:42,399
or even mounting stuff in that we're

00:15:40,639 --> 00:15:45,199
breaking the container abstraction

00:15:42,399 --> 00:15:46,880
by adding stuff or taking stuff away uh

00:15:45,199 --> 00:15:50,560
really we want to be locking it down

00:15:46,880 --> 00:15:54,160
and not sharing stuff further with other

00:15:50,560 --> 00:15:56,639
workloads on the system okay so um

00:15:54,160 --> 00:15:58,560
right we've got a pid for postgres and

00:15:56,639 --> 00:16:01,600
we can also see the postgres

00:15:58,560 --> 00:16:04,880
uh we can also see the pits so uh

00:16:01,600 --> 00:16:05,600
let's do some magic proc diving so if we

00:16:04,880 --> 00:16:08,720
go into proc

00:16:05,600 --> 00:16:10,639
and we put the pid in there then

00:16:08,720 --> 00:16:12,639
let's start off just looking at the

00:16:10,639 --> 00:16:16,240
command

00:16:12,639 --> 00:16:18,880
okay so a foible of proc

00:16:16,240 --> 00:16:19,680
is that everything is uh is null

00:16:18,880 --> 00:16:20,880
terminated

00:16:19,680 --> 00:16:21,920
so in order to just get a bit of

00:16:20,880 --> 00:16:23,600
visibility into what's actually

00:16:21,920 --> 00:16:27,040
happening here let's

00:16:23,600 --> 00:16:27,519
uh replace knoll with uh just space this

00:16:27,040 --> 00:16:29,199
time

00:16:27,519 --> 00:16:30,959
okay so we can see that it's just been

00:16:29,199 --> 00:16:33,120
invoked as postgres

00:16:30,959 --> 00:16:34,480
all right no problem that's that's sound

00:16:33,120 --> 00:16:36,800
enough

00:16:34,480 --> 00:16:38,480
but what else is in proc um i'll give

00:16:36,800 --> 00:16:41,759
you a clue

00:16:38,480 --> 00:16:43,279
the environment and at this point

00:16:41,759 --> 00:16:45,759
even though that looks like a massive

00:16:43,279 --> 00:16:48,959
junk let's see if we've got

00:16:45,759 --> 00:16:50,399
there's our flag so again using the flag

00:16:48,959 --> 00:16:53,519
ctf grep

00:16:50,399 --> 00:16:55,440
when there's a well-known flag string um

00:16:53,519 --> 00:16:58,800
can help because otherwise it's a kind

00:16:55,440 --> 00:17:00,399
of indeterminate mess of uh

00:16:58,800 --> 00:17:02,880
of black and white that's a little bit

00:17:00,399 --> 00:17:06,160
difficult to pick things out of

00:17:02,880 --> 00:17:07,600
okay one down so that is uh that is a

00:17:06,160 --> 00:17:09,439
flag

00:17:07,600 --> 00:17:11,520
but if we go back to the beginning of

00:17:09,439 --> 00:17:14,000
this scenario we were told

00:17:11,520 --> 00:17:15,199
uh there is more than one flag so i'm

00:17:14,000 --> 00:17:17,679
covering both

00:17:15,199 --> 00:17:19,520
the database password and the secret key

00:17:17,679 --> 00:17:20,240
okay so we know we've got the database

00:17:19,520 --> 00:17:23,280
password

00:17:20,240 --> 00:17:26,799
but there's a secret key

00:17:23,280 --> 00:17:30,080
we don't have any access to that

00:17:26,799 --> 00:17:34,000
adjacent postgres container except for

00:17:30,080 --> 00:17:38,640
through the the proc table

00:17:34,000 --> 00:17:38,640
okay so what else can we do with proc

00:17:40,799 --> 00:17:46,000
we can examine the root file system

00:17:43,840 --> 00:17:49,360
mounted into that container let's start

00:17:46,000 --> 00:17:49,360
with hello and studs

00:17:51,360 --> 00:17:55,840
okay so it's a sim link we don't mind

00:17:54,400 --> 00:17:58,480
too much about that

00:17:55,840 --> 00:18:01,120
here we go again we have got into the

00:17:58,480 --> 00:18:03,600
file system of a container

00:18:01,120 --> 00:18:05,200
running on the same machine as we are so

00:18:03,600 --> 00:18:06,559
we've got into the mount namespace

00:18:05,200 --> 00:18:07,919
essentially

00:18:06,559 --> 00:18:10,960
without having access to the container

00:18:07,919 --> 00:18:12,080
itself if we go into secrets we can see

00:18:10,960 --> 00:18:12,640
that there is something that looks like

00:18:12,080 --> 00:18:15,679
a key

00:18:12,640 --> 00:18:20,000
there and if i have readline

00:18:15,679 --> 00:18:22,240
there we go okay that is key number two

00:18:20,000 --> 00:18:24,400
i'm conscious of time and i will try and

00:18:22,240 --> 00:18:26,080
keep on clipping

00:18:24,400 --> 00:18:28,559
um so the point here is that there is a

00:18:26,080 --> 00:18:32,080
real risk with enabling

00:18:28,559 --> 00:18:35,200
using the um sorry process name spaces

00:18:32,080 --> 00:18:36,880
and uh yes while it's necessary

00:18:35,200 --> 00:18:40,240
obviously the feature was shipped

00:18:36,880 --> 00:18:41,360
for a reason we should be cognizant and

00:18:40,240 --> 00:18:43,039
of course everything should be threat

00:18:41,360 --> 00:18:44,640
modeled and then we can balance the

00:18:43,039 --> 00:18:46,080
impact of that thing

00:18:44,640 --> 00:18:49,200
actually being breached or negatively

00:18:46,080 --> 00:18:51,360
affected or or exfiltrated

00:18:49,200 --> 00:18:52,960
with the benefit that we get from using

00:18:51,360 --> 00:18:56,080
it in the way that it's intended

00:18:52,960 --> 00:19:01,039
okay on we go and we're

00:18:56,080 --> 00:19:01,039
into a ci server vulnerability

00:19:02,400 --> 00:19:06,080
right so what are we doing here uh we're

00:19:04,400 --> 00:19:08,000
pen testing a cluster we found the

00:19:06,080 --> 00:19:09,360
vulnerability

00:19:08,000 --> 00:19:11,760
uh the pod is part of the build

00:19:09,360 --> 00:19:13,280
infrastructure as we know

00:19:11,760 --> 00:19:15,440
uh build infrastructure is a juicy

00:19:13,280 --> 00:19:18,480
target uh supply chain security

00:19:15,440 --> 00:19:20,720
is a uh a particular interest of uh

00:19:18,480 --> 00:19:21,600
of of security and the cloud native

00:19:20,720 --> 00:19:24,640
security day

00:19:21,600 --> 00:19:25,360
of which we are apart and so build

00:19:24,640 --> 00:19:26,720
infrastructure

00:19:25,360 --> 00:19:28,960
yeah that's okay that's of interest to

00:19:26,720 --> 00:19:30,640
me uh all right what's happening then

00:19:28,960 --> 00:19:32,880
we're concerned that a compromise may

00:19:30,640 --> 00:19:35,760
lead to leaked secrets

00:19:32,880 --> 00:19:36,400
okay so we want to extract the secret

00:19:35,760 --> 00:19:38,799
key

00:19:36,400 --> 00:19:39,679
and look suspiciously like we are in a

00:19:38,799 --> 00:19:42,640
jenkins

00:19:39,679 --> 00:19:42,640
flavored pod

00:19:43,120 --> 00:19:46,480
okay so so again we kind of just want to

00:19:44,880 --> 00:19:46,880
do a bit of recon let's just figure out

00:19:46,480 --> 00:19:50,240
what's

00:19:46,880 --> 00:19:52,799
what's going on process table is okay uh

00:19:50,240 --> 00:19:54,000
the amount name space so again there's a

00:19:52,799 --> 00:19:55,919
couple of things here that

00:19:54,000 --> 00:19:57,280
jump straight out one is the service

00:19:55,919 --> 00:19:58,400
count um

00:19:57,280 --> 00:20:00,640
of course you can do the same thing

00:19:58,400 --> 00:20:02,720
again looking here but nothing really

00:20:00,640 --> 00:20:04,880
jumps out from there immediately

00:20:02,720 --> 00:20:06,559
uh that to me again is just a little bit

00:20:04,880 --> 00:20:08,000
of a mess

00:20:06,559 --> 00:20:10,400
the thing that jumps out for me here is

00:20:08,000 --> 00:20:15,120
not the service count it is the presence

00:20:10,400 --> 00:20:16,960
of the hallowed docker socket

00:20:15,120 --> 00:20:19,200
a socket is an inter-process

00:20:16,960 --> 00:20:22,400
communication mechanism

00:20:19,200 --> 00:20:24,320
amongst other things and in this case

00:20:22,400 --> 00:20:26,480
it means that we can probably talk to

00:20:24,320 --> 00:20:27,440
the docker demon whose socket is mounted

00:20:26,480 --> 00:20:30,000
into the pod

00:20:27,440 --> 00:20:31,039
which we're probably safe to assume

00:20:30,000 --> 00:20:34,640
belongs to

00:20:31,039 --> 00:20:37,600
the jenkins host um

00:20:34,640 --> 00:20:39,120
now at this point we would hope the

00:20:37,600 --> 00:20:41,679
docker is installed

00:20:39,120 --> 00:20:43,360
uh we would probably check uh see the

00:20:41,679 --> 00:20:44,320
kernel is nice and recent okay that's

00:20:43,360 --> 00:20:46,640
all good

00:20:44,320 --> 00:20:49,039
see what release we've got okay it's all

00:20:46,640 --> 00:20:50,159
relatively recent so we assume

00:20:49,039 --> 00:20:52,400
probably that we can install docker

00:20:50,159 --> 00:20:53,520
through the package manager but we can

00:20:52,400 --> 00:20:58,159
also do something

00:20:53,520 --> 00:20:59,600
via backdoor because we have curl

00:20:58,159 --> 00:21:01,440
so let's just pull the official docker

00:20:59,600 --> 00:21:02,880
installer

00:21:01,440 --> 00:21:05,280
maybe we'll we'll free ourselves from

00:21:02,880 --> 00:21:07,679
bugs in docker itself

00:21:05,280 --> 00:21:08,720
although those days are much further

00:21:07,679 --> 00:21:10,240
behind us

00:21:08,720 --> 00:21:11,600
um but it's nice to be on the latest

00:21:10,240 --> 00:21:12,240
version isn't it even if we're going to

00:21:11,600 --> 00:21:15,440
break stuff

00:21:12,240 --> 00:21:17,200
let's do it with uh correct operator

00:21:15,440 --> 00:21:19,840
practices

00:21:17,200 --> 00:21:20,480
all right so we're installing the docker

00:21:19,840 --> 00:21:22,559
client

00:21:20,480 --> 00:21:24,159
in the expectation that we can use it to

00:21:22,559 --> 00:21:25,679
abuse the docker socket

00:21:24,159 --> 00:21:27,520
we could just send restful commands over

00:21:25,679 --> 00:21:28,640
the docker socket but it's a bit more

00:21:27,520 --> 00:21:30,880
long-winded

00:21:28,640 --> 00:21:32,480
and right so what we see here is the

00:21:30,880 --> 00:21:35,200
docker version command

00:21:32,480 --> 00:21:36,400
has given us the client and the server

00:21:35,200 --> 00:21:39,200
happy days

00:21:36,400 --> 00:21:39,919
so let's see what's running here there

00:21:39,200 --> 00:21:43,600
is a lot

00:21:39,919 --> 00:21:43,600
and of course we see

00:21:43,679 --> 00:21:49,200
kubernetes oops uh let's do color

00:21:46,720 --> 00:21:51,919
in the us spelling always yeah and then

00:21:49,200 --> 00:21:54,320
we see cubenet is all over the place

00:21:51,919 --> 00:21:55,679
so it's probably again not a good day

00:21:54,320 --> 00:21:58,720
for somebody

00:21:55,679 --> 00:22:00,080
um in this case we probably want to look

00:21:58,720 --> 00:22:02,799
in the nginx

00:22:00,080 --> 00:22:02,799
container

00:22:03,600 --> 00:22:09,440
he says so let's um

00:22:07,120 --> 00:22:10,480
let's have a look in here if we do a

00:22:09,440 --> 00:22:13,679
docker inspect

00:22:10,480 --> 00:22:14,480
in fact we can do it more elegantly with

00:22:13,679 --> 00:22:17,679
the

00:22:14,480 --> 00:22:20,159
containers sure okay

00:22:17,679 --> 00:22:22,080
again there's a lot of information here

00:22:20,159 --> 00:22:24,159
we can kind of spool through it

00:22:22,080 --> 00:22:26,559
but because we're volume hunting and we

00:22:24,159 --> 00:22:30,159
uh or flag hunting i suppose and we know

00:22:26,559 --> 00:22:31,919
the flag again sweet there we go there's

00:22:30,159 --> 00:22:33,520
our secret access key

00:22:31,919 --> 00:22:35,200
that looks so let's have a look at some

00:22:33,520 --> 00:22:41,840
context around that

00:22:35,200 --> 00:22:43,520
um and colorization is always useful

00:22:41,840 --> 00:22:45,520
okay so what's happened the environment

00:22:43,520 --> 00:22:47,520
of the container has specified

00:22:45,520 --> 00:22:49,600
this environment variable so we're back

00:22:47,520 --> 00:22:52,799
into environment variables again

00:22:49,600 --> 00:22:53,520
not only do they leak on the host on

00:22:52,799 --> 00:22:57,360
which they

00:22:53,520 --> 00:22:59,679
are running but also they leak from

00:22:57,360 --> 00:23:01,120
uh metadata about the thing as you see

00:22:59,679 --> 00:23:01,760
in this case it is an insecure

00:23:01,120 --> 00:23:04,640
provisioning

00:23:01,760 --> 00:23:06,559
method because um it's either set at

00:23:04,640 --> 00:23:10,159
runtime or set in the image itself

00:23:06,559 --> 00:23:13,360
ideally not of course so

00:23:10,159 --> 00:23:13,919
really what we want here is um is to

00:23:13,360 --> 00:23:16,320
instead

00:23:13,919 --> 00:23:18,159
point that secret to a file and this is

00:23:16,320 --> 00:23:19,840
as kubernetes will do with a secret file

00:23:18,159 --> 00:23:22,640
map for us

00:23:19,840 --> 00:23:23,440
and that way we we need to have access

00:23:22,640 --> 00:23:26,559
not only to

00:23:23,440 --> 00:23:27,120
to the uh to the containers metadata

00:23:26,559 --> 00:23:29,120
like this

00:23:27,120 --> 00:23:30,799
but also the container itself or as we

00:23:29,120 --> 00:23:35,039
saw previously the process table

00:23:30,799 --> 00:23:38,320
um etc right at this point

00:23:35,039 --> 00:23:40,400
we had pretty good um

00:23:38,320 --> 00:23:41,760
i would say turnout we had we had a lot

00:23:40,400 --> 00:23:42,960
of people we'll uh we'll get to those

00:23:41,760 --> 00:23:44,480
numbers at the end

00:23:42,960 --> 00:23:46,080
but also a lot of people got through

00:23:44,480 --> 00:23:47,919
these scenarios and

00:23:46,080 --> 00:23:50,559
uh and at this point most people were

00:23:47,919 --> 00:23:54,159
still still with us

00:23:50,559 --> 00:23:58,159
so let's persist next we have

00:23:54,159 --> 00:23:58,159
a non-user compromise

00:24:00,320 --> 00:24:05,840
okay and out and back in again

00:24:08,799 --> 00:24:16,720
okay so what we'll be doing here um

00:24:11,840 --> 00:24:19,360
more uh escalation sideways and so

00:24:16,720 --> 00:24:20,880
just moving laterally through um through

00:24:19,360 --> 00:24:24,720
kubernetes or maybe actually

00:24:20,880 --> 00:24:26,640
on the yep on multiple nodes

00:24:24,720 --> 00:24:28,080
so okay so secrets have been extracted

00:24:26,640 --> 00:24:30,960
from the cluster

00:24:28,080 --> 00:24:32,559
we're in a post-mortem phase but it's

00:24:30,960 --> 00:24:33,360
not clear how the anonymous user managed

00:24:32,559 --> 00:24:36,240
to escalate

00:24:33,360 --> 00:24:38,000
sideways after the initial breach so

00:24:36,240 --> 00:24:40,000
let's try and replay the intrusion from

00:24:38,000 --> 00:24:41,520
inside the cluster

00:24:40,000 --> 00:24:43,760
okay so we're in the pod that was

00:24:41,520 --> 00:24:46,880
breached excuse me

00:24:43,760 --> 00:24:50,240
and we're going to replay what the

00:24:46,880 --> 00:24:53,919
what the what we expect the attacker did

00:24:50,240 --> 00:24:56,080
um now again we've got our

00:24:53,919 --> 00:24:58,960
our kind of basic recon which is just

00:24:56,080 --> 00:25:02,159
saying uh how's our process table

00:24:58,960 --> 00:25:03,440
do we have anything spare or extraneous

00:25:02,159 --> 00:25:04,799
mounted in here

00:25:03,440 --> 00:25:06,559
um we'll go to the map points for the

00:25:04,799 --> 00:25:08,000
whole system uh

00:25:06,559 --> 00:25:09,600
we can install am i contained and see

00:25:08,000 --> 00:25:12,799
what our bounding set is

00:25:09,600 --> 00:25:14,559
but in the interest of time this is

00:25:12,799 --> 00:25:17,039
this is slightly different so at this

00:25:14,559 --> 00:25:19,760
point we are attacking

00:25:17,039 --> 00:25:22,240
things that are outside our domain as

00:25:19,760 --> 00:25:25,520
sorry outside our namespace let's say

00:25:22,240 --> 00:25:27,679
and we have got the ip addresses of the

00:25:25,520 --> 00:25:30,559
nodes

00:25:27,679 --> 00:25:31,360
so what runs on the kubernetes worker

00:25:30,559 --> 00:25:33,360
node

00:25:31,360 --> 00:25:34,720
well there's the cubelet there's q proxy

00:25:33,360 --> 00:25:38,159
there may be

00:25:34,720 --> 00:25:38,159
things for the cni as well

00:25:38,240 --> 00:25:42,240
the cubelet has some configurations that

00:25:40,840 --> 00:25:45,360
um

00:25:42,240 --> 00:25:49,279
are less than optimal let's say uh

00:25:45,360 --> 00:25:52,080
such as the uh the read only port so

00:25:49,279 --> 00:25:53,440
let's just see if we can find anything

00:25:52,080 --> 00:25:57,279
excuse me if my mouse

00:25:53,440 --> 00:26:00,400
constantly doing that um

00:25:57,279 --> 00:26:02,799
in and around here so uh

00:26:00,400 --> 00:26:04,080
again i know what i need to use in

00:26:02,799 --> 00:26:06,320
advance so i will just

00:26:04,080 --> 00:26:07,360
install it i don't need to do an app

00:26:06,320 --> 00:26:11,520
update

00:26:07,360 --> 00:26:14,720
i get curl and jk so

00:26:11,520 --> 00:26:14,720
what are we actually doing here

00:26:15,600 --> 00:26:19,279
let's just see if we can access these

00:26:17,919 --> 00:26:25,840
host nodes

00:26:19,279 --> 00:26:28,320
so let's go up in here

00:26:25,840 --> 00:26:30,159
and as a reminder this is a network

00:26:28,320 --> 00:26:34,080
route from the pod

00:26:30,159 --> 00:26:36,960
onto the public interface of the host

00:26:34,080 --> 00:26:38,000
and really there's not a great deal of

00:26:36,960 --> 00:26:41,840
rationale for

00:26:38,000 --> 00:26:44,640
um for running like this

00:26:41,840 --> 00:26:45,840
uh we should be using network uh network

00:26:44,640 --> 00:26:48,799
policy

00:26:45,840 --> 00:26:50,320
and um yeah frankly constraining our

00:26:48,799 --> 00:26:51,200
outbound traffic so that we can't hit

00:26:50,320 --> 00:26:53,440
anything at all

00:26:51,200 --> 00:26:54,880
start with the default deny and uh and

00:26:53,440 --> 00:26:57,760
then upgrade

00:26:54,880 --> 00:27:00,240
okay that was smooth let's just install

00:26:57,760 --> 00:27:00,240
that too

00:27:03,520 --> 00:27:07,679
so as you can see i'm having to install

00:27:05,440 --> 00:27:10,400
a lot of software as i go along

00:27:07,679 --> 00:27:11,440
that's kind of standard there is uh

00:27:10,400 --> 00:27:12,640
generally we don't ship

00:27:11,440 --> 00:27:14,480
curl and that kind of thing to

00:27:12,640 --> 00:27:16,880
production because why would we unless

00:27:14,480 --> 00:27:20,480
we needed it for our application

00:27:16,880 --> 00:27:23,200
but as an attacker i am able to install

00:27:20,480 --> 00:27:26,320
stuff inside the container

00:27:23,200 --> 00:27:28,080
really just by setting a non-root user

00:27:26,320 --> 00:27:29,600
uh maybe even removing the package

00:27:28,080 --> 00:27:32,640
manager if needs be

00:27:29,600 --> 00:27:34,080
that makes for a much safer day let's

00:27:32,640 --> 00:27:35,440
say the jq and curl

00:27:34,080 --> 00:27:37,840
if i installed those what did i get

00:27:35,440 --> 00:27:41,200
wrong there nothing

00:27:37,840 --> 00:27:42,559
okay and let's um skip verifying the

00:27:41,200 --> 00:27:45,360
certificates

00:27:42,559 --> 00:27:47,440
okay that means that we can read from

00:27:45,360 --> 00:27:49,360
the cubelet

00:27:47,440 --> 00:27:52,159
and we can see lots of things that are

00:27:49,360 --> 00:27:55,760
running here

00:27:52,159 --> 00:27:56,320
and what we care about uh potentially is

00:27:55,760 --> 00:28:02,480
something

00:27:56,320 --> 00:28:05,760
um compromise ish so let's have a look

00:28:02,480 --> 00:28:07,760
uh nope there's nothing in there

00:28:05,760 --> 00:28:09,919
uh now that probably means that what

00:28:07,760 --> 00:28:12,080
we're looking for is on the other node

00:28:09,919 --> 00:28:14,720
so let's just remind ourselves which

00:28:12,080 --> 00:28:14,720
nodes were which

00:28:14,960 --> 00:28:17,840
and switch over

00:28:19,279 --> 00:28:22,480
happy days that is the pod that we are

00:28:21,520 --> 00:28:24,880
looking for

00:28:22,480 --> 00:28:25,760
okay so now we have more information

00:28:24,880 --> 00:28:28,640
about

00:28:25,760 --> 00:28:30,399
what we're looking to attack so what

00:28:28,640 --> 00:28:33,679
should we do with that well

00:28:30,399 --> 00:28:37,520
let's see if we can dump the end

00:28:33,679 --> 00:28:40,720
of this um this pod so the pod

00:28:37,520 --> 00:28:44,399
is um what is it going to be the

00:28:40,720 --> 00:28:46,960
workload pod there

00:28:44,399 --> 00:28:50,000
and then if you will just excuse my copy

00:28:46,960 --> 00:28:50,000
pasta one second

00:28:51,120 --> 00:28:56,399
and this won't quite work because of the

00:28:52,559 --> 00:28:56,399
node ip so let's just

00:28:56,840 --> 00:29:00,640
place

00:28:58,480 --> 00:29:03,360
llp is the one we've just used which is

00:29:00,640 --> 00:29:03,360
the second one

00:29:05,919 --> 00:29:12,080
okay so we're posting a command

00:29:09,919 --> 00:29:12,960
oops okay so we're posting to the note

00:29:12,080 --> 00:29:16,799
ip

00:29:12,960 --> 00:29:19,840
um force of habits uh on the insecure

00:29:16,799 --> 00:29:21,600
uh on the read only port rather

00:29:19,840 --> 00:29:23,919
and uh we want we want to go into this

00:29:21,600 --> 00:29:28,159
pods

00:29:23,919 --> 00:29:31,360
and then run the print end command

00:29:28,159 --> 00:29:33,039
okay um joyful joys

00:29:31,360 --> 00:29:36,320
that is not coming back with anything

00:29:33,039 --> 00:29:36,320
have i done something wrong

00:29:37,760 --> 00:29:45,200
um i guess the pod name should be

00:29:41,360 --> 00:29:45,200
pod name and not pods

00:29:47,039 --> 00:29:50,480
that was a great relief to me and as we

00:29:50,000 --> 00:29:54,480
go

00:29:50,480 --> 00:29:57,279
again there is our flag happy days

00:29:54,480 --> 00:29:58,880
okay let's uh steamroller on through the

00:29:57,279 --> 00:30:01,440
rest of these

00:29:58,880 --> 00:30:03,120
um we are on to pod breech extract and

00:30:01,440 --> 00:30:09,840
for this i will pass over to

00:30:03,120 --> 00:30:09,840
my worthy companion magno

00:30:11,760 --> 00:30:26,000
hey everyone

00:30:22,080 --> 00:30:26,000
think you need to stop sharing andy

00:30:29,840 --> 00:30:35,279
okay thank you okay

00:30:54,559 --> 00:31:00,720
the scenario here that we have for the

00:30:57,600 --> 00:31:04,080
for the ctf uh is the the

00:31:00,720 --> 00:31:07,840
pod uh pod breeders tract right

00:31:04,080 --> 00:31:19,840
so in this scenario let me just

00:31:07,840 --> 00:31:19,840
log in again here

00:31:39,679 --> 00:31:42,960
verify your suspicion by breaking to the

00:31:41,519 --> 00:31:45,840
pod and extract the value of

00:31:42,960 --> 00:31:47,600
user credits password right so and and

00:31:45,840 --> 00:31:48,799
your starting point here you're starting

00:31:47,600 --> 00:31:51,760
on a visual machine

00:31:48,799 --> 00:31:52,880
external to the cluster right so so how

00:31:51,760 --> 00:31:54,799
do you get access

00:31:52,880 --> 00:31:56,240
to to the cluster to the pods of the

00:31:54,799 --> 00:32:00,159
cluster itself right

00:31:56,240 --> 00:32:01,039
so um basic things here in the interest

00:32:00,159 --> 00:32:14,159
of time

00:32:01,039 --> 00:32:16,480
uh i'll

00:32:14,159 --> 00:32:16,480
okay

00:32:20,320 --> 00:32:27,679
good uh so first thing if if i need to

00:32:24,320 --> 00:32:28,640
access that uh that server or their

00:32:27,679 --> 00:32:31,440
service right

00:32:28,640 --> 00:32:32,799
i need to uh i don't have the

00:32:31,440 --> 00:32:43,840
credentials right so

00:32:32,799 --> 00:32:43,840
i need to uh first do like uh

00:32:52,159 --> 00:32:58,159
your your server make sure that

00:32:56,080 --> 00:32:58,640
everything's okay i ran this before just

00:32:58,159 --> 00:33:01,440
before

00:32:58,640 --> 00:33:03,279
uh the example just to make sure that uh

00:33:01,440 --> 00:33:04,559
everything is

00:33:03,279 --> 00:33:07,039
running smoothly and we don't need to

00:33:04,559 --> 00:33:09,519
download it again so

00:33:07,039 --> 00:33:10,399
uh and and here one of the tools that

00:33:09,519 --> 00:33:13,360
you can use

00:33:10,399 --> 00:33:13,840
to to do that to do the network uh

00:33:13,360 --> 00:33:25,840
mapping

00:33:13,840 --> 00:33:25,840
and scanning is nmap right

00:33:31,919 --> 00:33:39,840
thank you you will now be placed into

00:34:22,159 --> 00:34:24,399
okay

00:34:30,720 --> 00:34:38,399
okay uh can you guys hear me again

00:34:34,159 --> 00:34:38,399
uh my screen sharing

00:34:39,599 --> 00:34:42,399
i'm sharing it

00:34:46,839 --> 00:34:49,839
oh

00:34:57,040 --> 00:35:03,839
hi can you hear me can you guys give me

00:34:59,359 --> 00:35:03,839
some feedback on the chat

00:35:07,760 --> 00:35:12,800
yeah okay sounds good awesome uh

00:35:10,880 --> 00:35:14,839
yeah so as i was saying sorry about

00:35:12,800 --> 00:35:18,240
technical discords here

00:35:14,839 --> 00:35:19,280
um so as i was saying we installed nmap

00:35:18,240 --> 00:35:22,240
there

00:35:19,280 --> 00:35:22,960
and another uh one of the things that we

00:35:22,240 --> 00:35:26,320
can do

00:35:22,960 --> 00:35:29,119
is to run any map on this uh specific

00:35:26,320 --> 00:35:31,520
node id that was provided to us for this

00:35:29,119 --> 00:35:33,760
challenge right

00:35:31,520 --> 00:35:35,760
okay and i've selected a few ports here

00:35:33,760 --> 00:35:38,640
so the scan doesn't take forever

00:35:35,760 --> 00:35:40,079
right so specifically for uh just the

00:35:38,640 --> 00:35:42,240
demonstration here

00:35:40,079 --> 00:35:43,440
uh and we can see that there is a port

00:35:42,240 --> 00:35:46,400
open on

00:35:43,440 --> 00:35:47,440
on this higher port here uh three zero

00:35:46,400 --> 00:35:50,960
zero two two

00:35:47,440 --> 00:35:53,440
right so one of the things uh

00:35:50,960 --> 00:35:54,079
and it's very famous on on on pen

00:35:53,440 --> 00:35:56,400
testing

00:35:54,079 --> 00:35:57,200
and and like uh application security

00:35:56,400 --> 00:36:00,400
scenarios

00:35:57,200 --> 00:36:01,920
is uh brute forcing right so one of the

00:36:00,400 --> 00:36:03,920
attacks that you can run

00:36:01,920 --> 00:36:05,680
uh you can get a list of username and

00:36:03,920 --> 00:36:08,000
passwords and try to just

00:36:05,680 --> 00:36:09,520
brute force the system to guess those

00:36:08,000 --> 00:36:11,599
credentials right

00:36:09,520 --> 00:36:13,200
and one of the tools that you can use

00:36:11,599 --> 00:36:16,640
here or for

00:36:13,200 --> 00:36:19,839
brute forcing at this uh the sport

00:36:16,640 --> 00:36:21,440
and and access the service right so

00:36:19,839 --> 00:36:23,119
i don't know exactly from the end map

00:36:21,440 --> 00:36:26,960
there i don't know exactly which server

00:36:23,119 --> 00:36:28,640
it is but i can uh i think it can run

00:36:26,960 --> 00:36:30,400
this one let's see if it's gonna give us

00:36:28,640 --> 00:36:34,000
to us

00:36:30,400 --> 00:36:34,000
a little bit more information there

00:36:34,480 --> 00:36:41,680
if it takes too long then we can just

00:36:37,359 --> 00:36:44,320
move on

00:36:41,680 --> 00:36:44,320
see here

00:36:44,880 --> 00:36:51,200
okay yeah okay

00:36:49,040 --> 00:36:53,040
so we can see that this service right so

00:36:51,200 --> 00:36:55,200
it was showing on the first scan was

00:36:53,040 --> 00:36:58,240
showing as unknown right so i run

00:36:55,200 --> 00:37:00,000
uh i added the flag dash a here so to

00:36:58,240 --> 00:37:00,640
scan the services and the versions as

00:37:00,000 --> 00:37:03,280
well

00:37:00,640 --> 00:37:04,800
so we know that this port is running an

00:37:03,280 --> 00:37:08,079
open ssh server

00:37:04,800 --> 00:37:11,280
there and and then and now i can try to

00:37:08,079 --> 00:37:14,160
uh to brute force it right passing

00:37:11,280 --> 00:37:15,920
a list of username and passwords right

00:37:14,160 --> 00:37:16,560
so one of the tools that you can easily

00:37:15,920 --> 00:37:19,680
do that

00:37:16,560 --> 00:37:23,680
is called hydra

00:37:19,680 --> 00:37:26,560
and uh the way to install it just

00:37:23,680 --> 00:37:26,560
typing oops

00:37:28,960 --> 00:37:31,119
and

00:37:32,079 --> 00:37:37,839
type in this command here

00:37:39,119 --> 00:37:41,920
i have demos

00:37:43,520 --> 00:37:47,200
okay so i have right hydra installed

00:37:46,079 --> 00:37:50,480
already just to

00:37:47,200 --> 00:37:52,320
show you guys here and now what i need

00:37:50,480 --> 00:37:54,640
to run this brute force right i need a

00:37:52,320 --> 00:37:57,920
list of username and passwords right

00:37:54,640 --> 00:38:00,640
uh one one of the the very common uh

00:37:57,920 --> 00:38:02,800
list of passwords is the roku list so

00:38:00,640 --> 00:38:05,520
you could have download that and use it

00:38:02,800 --> 00:38:06,800
but this server this this server here is

00:38:05,520 --> 00:38:10,240
not very protected so

00:38:06,800 --> 00:38:12,240
the the password is not the username and

00:38:10,240 --> 00:38:16,839
the password are not very hard

00:38:12,240 --> 00:38:18,880
um so i created a list uh here already

00:38:16,839 --> 00:38:22,240
on on this

00:38:18,880 --> 00:38:23,119
server uh called the list of users so i

00:38:22,240 --> 00:38:26,480
have a

00:38:23,119 --> 00:38:28,320
list of usernames here and i have a list

00:38:26,480 --> 00:38:29,440
of passwords that i could try so it

00:38:28,320 --> 00:38:32,880
doesn't take forever

00:38:29,440 --> 00:38:34,720
when running right so here's the command

00:38:32,880 --> 00:38:38,000
that i'm gonna use for hydra

00:38:34,720 --> 00:38:40,400
to uh try to brute force this uh

00:38:38,000 --> 00:38:41,119
this username and password on this

00:38:40,400 --> 00:38:47,839
server

00:38:41,119 --> 00:38:47,839
location here thanks

00:39:12,839 --> 00:39:15,839
okay

00:39:24,640 --> 00:39:29,839
let me just show you guys so just moving

00:39:28,240 --> 00:39:31,839
on here so we don't lose

00:39:29,839 --> 00:39:33,119
a lot of time we're almost running out

00:39:31,839 --> 00:39:35,680
of time here

00:39:33,119 --> 00:39:36,240
uh basically if you run this command you

00:39:35,680 --> 00:39:39,520
should get

00:39:36,240 --> 00:39:43,359
the uh the results that had it

00:39:39,520 --> 00:39:48,720
here before i know i i

00:39:43,359 --> 00:39:48,720
really uh okay sounds good

00:39:49,520 --> 00:39:56,160
sure uh almost done uh

00:39:52,640 --> 00:39:57,760
so yeah basically just

00:39:56,160 --> 00:40:00,240
after i find out the username and

00:39:57,760 --> 00:40:05,280
password i can

00:40:00,240 --> 00:40:05,280
access this server oops

00:40:07,119 --> 00:40:13,440
yep you should copy and paste here

00:40:10,160 --> 00:40:14,880
and so the the user's admin and the

00:40:13,440 --> 00:40:16,960
passwords password very

00:40:14,880 --> 00:40:18,960
very easy for you guys you know even if

00:40:16,960 --> 00:40:22,480
you don't have like a tool you could

00:40:18,960 --> 00:40:25,520
uh try guessing and access that okay so

00:40:22,480 --> 00:40:29,680
i'm inside this called

00:40:25,520 --> 00:40:32,960
jump box right so what i'm gonna do here

00:40:29,680 --> 00:40:36,480
is try to uh connect to the

00:40:32,960 --> 00:40:40,319
api server and make some requests

00:40:36,480 --> 00:40:40,880
so base base the the base request here

00:40:40,319 --> 00:40:42,880
that i can

00:40:40,880 --> 00:40:44,720
make is check the version of the the

00:40:42,880 --> 00:40:48,000
kubernetes api server

00:40:44,720 --> 00:40:50,200
this is one of the ways to do that right

00:40:48,000 --> 00:40:51,520
so i can see that's running our version

00:40:50,200 --> 00:40:54,800
119.4

00:40:51,520 --> 00:40:55,280
stuff like that right so just to wrap up

00:40:54,800 --> 00:40:58,240
here

00:40:55,280 --> 00:40:58,640
uh one of the things that i can do is

00:40:58,240 --> 00:41:01,680
wha

00:40:58,640 --> 00:41:02,160
uh as andy mentioned before uh there is

00:41:01,680 --> 00:41:05,520
some

00:41:02,160 --> 00:41:06,160
um secrets and tokens inside the pods

00:41:05,520 --> 00:41:09,359
right

00:41:06,160 --> 00:41:12,240
so i can grab that and and use to

00:41:09,359 --> 00:41:13,280
impersonate uh the policy talk to the

00:41:12,240 --> 00:41:15,760
api server

00:41:13,280 --> 00:41:16,400
right so basically here what i'm gonna

00:41:15,760 --> 00:41:18,839
do

00:41:16,400 --> 00:41:20,240
is just create two variables the

00:41:18,839 --> 00:41:23,040
namespace uh

00:41:20,240 --> 00:41:25,200
telling that's uh located at var run

00:41:23,040 --> 00:41:26,400
secrets kubernetes.io service account

00:41:25,200 --> 00:41:29,839
namespace

00:41:26,400 --> 00:41:35,760
and i'll do the same thing for the token

00:41:29,839 --> 00:41:38,880
here cubetoken okay almost done

00:41:35,760 --> 00:41:42,079
uh and then now i can make uh if i have

00:41:38,880 --> 00:41:43,119
uh permissions to do that i can make a

00:41:42,079 --> 00:41:46,800
request

00:41:43,119 --> 00:41:48,880
to this namespace and uh through

00:41:46,800 --> 00:41:50,240
via the api server and ask for the

00:41:48,880 --> 00:41:51,760
secrets and since this is a

00:41:50,240 --> 00:41:56,400
misconfigured cluster

00:41:51,760 --> 00:41:56,400
i have the permissions uh so

00:41:56,880 --> 00:42:03,920
here just just making this api let me

00:42:01,119 --> 00:42:05,440
show that again right so this is the the

00:42:03,920 --> 00:42:08,640
request that i made

00:42:05,440 --> 00:42:09,920
and i can see all the secrets and here

00:42:08,640 --> 00:42:13,359
is the flag

00:42:09,920 --> 00:42:17,680
user creds password and and that's it

00:42:13,359 --> 00:42:22,160
for this challenge i'll hand it over to

00:42:17,680 --> 00:42:22,160
andrew again so thank you guys bye

00:42:23,760 --> 00:42:30,000
awesome thank you very much okay let's

00:42:27,119 --> 00:42:32,880
zoom through the ends of the slides

00:42:30,000 --> 00:42:33,760
there was one more scenario which people

00:42:32,880 --> 00:42:36,319
didn't quite get to

00:42:33,760 --> 00:42:37,440
so um if you would like a go at that

00:42:36,319 --> 00:42:40,160
then uh

00:42:37,440 --> 00:42:40,880
do feel free to dm right let's get

00:42:40,160 --> 00:42:43,359
through to the end

00:42:40,880 --> 00:42:44,079
so uh this was this was the control

00:42:43,359 --> 00:42:47,359
plane team

00:42:44,079 --> 00:42:48,960
at uh seven o'clock this morning um

00:42:47,359 --> 00:42:51,200
we are just about through the other end

00:42:48,960 --> 00:42:54,319
of it so honorable mentions

00:42:51,200 --> 00:42:55,440
thank you to these individuals for uh

00:42:54,319 --> 00:42:59,680
being with us through most of the

00:42:55,440 --> 00:43:01,599
journey today and um

00:42:59,680 --> 00:43:02,800
we had a great time on dms it's fair to

00:43:01,599 --> 00:43:05,119
say uh

00:43:02,800 --> 00:43:06,720
there's some really uh people show some

00:43:05,119 --> 00:43:08,720
real grit and persistence

00:43:06,720 --> 00:43:10,240
and that's what it's all about so good

00:43:08,720 --> 00:43:11,920
job those people

00:43:10,240 --> 00:43:14,160
um we have some honorable mentions as

00:43:11,920 --> 00:43:17,760
well um

00:43:14,160 --> 00:43:20,319
dilshan mathias michael matthew walid

00:43:17,760 --> 00:43:21,680
steve mohammed and noel were all there

00:43:20,319 --> 00:43:24,800
for the whole journey

00:43:21,680 --> 00:43:29,200
and thank you very much for your efforts

00:43:24,800 --> 00:43:31,119
in parting the container defenses

00:43:29,200 --> 00:43:32,880
um various people enjoyed themselves

00:43:31,119 --> 00:43:35,280
slightly

00:43:32,880 --> 00:43:36,800
and i hope this has been a beneficial

00:43:35,280 --> 00:43:38,640
learning experience i'm sorry there was

00:43:36,800 --> 00:43:40,240
no cake

00:43:38,640 --> 00:43:42,000
and thank you very much to the control

00:43:40,240 --> 00:43:44,160
plane uh people at this end

00:43:42,000 --> 00:43:45,760
for manning everything and to magno for

00:43:44,160 --> 00:43:48,079
all his assistants and helping us out

00:43:45,760 --> 00:43:50,720
and testing etc

00:43:48,079 --> 00:43:51,280
this is a public service announcement we

00:43:50,720 --> 00:43:52,880
don't run

00:43:51,280 --> 00:43:55,520
administrative endpoints on the public

00:43:52,880 --> 00:43:57,359
internet the kubernetes api server is

00:43:55,520 --> 00:43:59,280
one of them

00:43:57,359 --> 00:44:00,800
if you like what you saw today control

00:43:59,280 --> 00:44:04,319
plane do this for a living

00:44:00,800 --> 00:44:05,280
and we'd be happy to stand up a ctf for

00:44:04,319 --> 00:44:06,720
you

00:44:05,280 --> 00:44:07,920
thank you very much for your attention

00:44:06,720 --> 00:44:09,119
and thank you to everybody who

00:44:07,920 --> 00:44:12,880
contributed today

00:44:09,119 --> 00:44:16,079
we had a total of 327 clusters spun up

00:44:12,880 --> 00:44:19,280
uh that is about 15 000 nodes um

00:44:16,079 --> 00:44:21,280
we had a peak of 73 users

00:44:19,280 --> 00:44:23,119
so thank you for everybody who played

00:44:21,280 --> 00:44:26,560
and we

00:44:23,119 --> 00:44:30,240
welcome all and any feedback

00:44:26,560 --> 00:44:30,240

YouTube URL: https://www.youtube.com/watch?v=pOi1aKpcuC0


