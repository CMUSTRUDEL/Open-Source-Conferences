Title: Introduction to NATS Streams and Services on Kubernetes - Waldemar Quevedo, Synadia
Publication date: 2020-09-11
Playlist: Cloud Native + Open Source Virtual Summit China 2020
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.

Introduction to NATS Streams and Services on Kubernetes - Waldemar Quevedo, Synadia 

Streams and Services are the two main building blocks for creating applications using NATS.  Streams are perfect for emitting and consuming data whereas Services can be used for endpoints that expect a response (aka RPC).  Furthermore, with NATS v2 features you can use these to model the flows of your data with imports and exports that are isolated via account namespaces for multi-tenancy.  In this talk, you will learn how to architect your distributed application in terms of streams and services all plugged into NATS, as well as how to best use the tooling in the `nats-io/k8s` to setup a secure multi-region NATS deployment in Kubernetes using NATS Gateways and Leafnodes.  

https://sched.co/cpAq
Captions: 
	00:00:02,000 --> 00:00:05,279
hey everyone

00:00:03,040 --> 00:00:06,319
this is an introduction to nat's streams

00:00:05,279 --> 00:00:08,800
and services

00:00:06,319 --> 00:00:09,679
on kubernetes my name is valdi

00:00:08,800 --> 00:00:13,120
marquevedo

00:00:09,679 --> 00:00:14,799
i'm one of the nat's core maintainers

00:00:13,120 --> 00:00:16,640
i currently work at scientific

00:00:14,799 --> 00:00:18,720
communications where many of the nats

00:00:16,640 --> 00:00:21,760
score maintainers are working

00:00:18,720 --> 00:00:22,640
i've been using nuts-based systems for a

00:00:21,760 --> 00:00:26,400
number of years

00:00:22,640 --> 00:00:29,119
almost for eight years already

00:00:26,400 --> 00:00:30,720
and i wrote a book about nets practical

00:00:29,119 --> 00:00:32,320
nets

00:00:30,720 --> 00:00:34,480
which i was released a couple of years

00:00:32,320 --> 00:00:35,680
ago covering many of the core concepts

00:00:34,480 --> 00:00:38,480
of

00:00:35,680 --> 00:00:38,480
using nets

00:00:38,879 --> 00:00:42,079
so in this talk i want to briefly cover

00:00:41,520 --> 00:00:43,920
uh

00:00:42,079 --> 00:00:45,200
what is snatch it's going to be an

00:00:43,920 --> 00:00:46,480
introduction

00:00:45,200 --> 00:00:48,559
we'll talk about some of the

00:00:46,480 --> 00:00:50,399
abstractions when you uh

00:00:48,559 --> 00:00:51,840
talk about nets which are streams and

00:00:50,399 --> 00:00:53,920
services

00:00:51,840 --> 00:00:56,399
uh talk about the different network

00:00:53,920 --> 00:00:59,520
topologies that you can

00:00:56,399 --> 00:01:02,000
form by using uh nets uh what we call

00:00:59,520 --> 00:01:04,720
the adaptive edge architectures

00:01:02,000 --> 00:01:05,119
and also give a couple of demos of using

00:01:04,720 --> 00:01:07,760
uh

00:01:05,119 --> 00:01:09,040
nuts clusters and deploying with helm on

00:01:07,760 --> 00:01:13,200
kubernetes

00:01:09,040 --> 00:01:17,439
followed by questions so what is nuts

00:01:13,200 --> 00:01:19,840
nuts is a 10 year old this year

00:01:17,439 --> 00:01:21,840
it's a very battle-tested system

00:01:19,840 --> 00:01:24,240
cloud-native messaging system

00:01:21,840 --> 00:01:26,479
made for developers and operators that

00:01:24,240 --> 00:01:28,400
want to spend more time doing their work

00:01:26,479 --> 00:01:29,600
and less time worrying about how to do

00:01:28,400 --> 00:01:32,799
messaging

00:01:29,600 --> 00:01:35,439
uh what distinguishes nets is its

00:01:32,799 --> 00:01:37,840
performance the simplicity security and

00:01:35,439 --> 00:01:41,360
availability trade-offs that

00:01:37,840 --> 00:01:44,320
are implicated in the design it has a

00:01:41,360 --> 00:01:46,000
multiple quality of service has about at

00:01:44,320 --> 00:01:47,119
most once delivery and at least one

00:01:46,000 --> 00:01:49,840
delivery

00:01:47,119 --> 00:01:51,600
uh thanks to the simple protocol it has

00:01:49,840 --> 00:01:54,720
multiple communication and

00:01:51,600 --> 00:01:57,520
multiple client implementations and

00:01:54,720 --> 00:01:58,320
it supports multiple communication

00:01:57,520 --> 00:02:01,360
patterns

00:01:58,320 --> 00:02:04,880
we joined the cncf

00:02:01,360 --> 00:02:07,680
last year in 2018

00:02:04,880 --> 00:02:08,640
under this in the landscape cncf

00:02:07,680 --> 00:02:10,160
landscape you can

00:02:08,640 --> 00:02:12,720
see that under the streaming and

00:02:10,160 --> 00:02:16,080
messaging section

00:02:12,720 --> 00:02:19,280
next to grpc for example

00:02:16,080 --> 00:02:22,480
and since the

00:02:19,280 --> 00:02:26,560
uh nats contributions are

00:02:22,480 --> 00:02:30,800
ramping up for a new few years already

00:02:26,560 --> 00:02:34,800
has thousands of contributors many

00:02:30,800 --> 00:02:34,800
not public reports

00:02:35,440 --> 00:02:40,319
also about over 50 million uh downloads

00:02:38,400 --> 00:02:42,879
for the nat server and live streaming

00:02:40,319 --> 00:02:44,160
server images the slack community is

00:02:42,879 --> 00:02:47,280
also increasing and is

00:02:44,160 --> 00:02:47,920
continuously increasing that's v2 was

00:02:47,280 --> 00:02:51,120
released

00:02:47,920 --> 00:02:55,360
a couple of years now but uh

00:02:51,120 --> 00:02:57,599
so we're currently in the 2.17 version

00:02:55,360 --> 00:03:00,239
of the server

00:02:57,599 --> 00:03:02,080
and the performance is still pretty fast

00:03:00,239 --> 00:03:04,159
18 million messages per second

00:03:02,080 --> 00:03:07,200
in a single server many times a single

00:03:04,159 --> 00:03:07,200
server is all it takes

00:03:08,560 --> 00:03:11,760
if you use multiple data scenes you can

00:03:10,080 --> 00:03:14,400
even get it to

00:03:11,760 --> 00:03:14,959
80 million messages per second with a

00:03:14,400 --> 00:03:18,319
very

00:03:14,959 --> 00:03:20,720
beefy machine and that's

00:03:18,319 --> 00:03:22,400
it's a single binary it's uh has no

00:03:20,720 --> 00:03:25,599
other dependencies uh

00:03:22,400 --> 00:03:27,040
it's very lightweight uh docker

00:03:25,599 --> 00:03:29,200
container

00:03:27,040 --> 00:03:30,319
i use that eight gigabytes uh the

00:03:29,200 --> 00:03:32,959
protocol which has

00:03:30,319 --> 00:03:34,879
almost not changed uh in this uh almost

00:03:32,959 --> 00:03:38,239
a decade from nets

00:03:34,879 --> 00:03:40,000
um it's it's very simple

00:03:38,239 --> 00:03:42,319
uh it takes base protocol you can just

00:03:40,000 --> 00:03:44,319
use the telnet to

00:03:42,319 --> 00:03:46,159
type in the protocol and interact with

00:03:44,319 --> 00:03:47,040
the system it doesn't take a lot of

00:03:46,159 --> 00:03:50,799
configuration

00:03:47,040 --> 00:03:53,040
um you just should just work by default

00:03:50,799 --> 00:03:54,720
and the api is a first step forward just

00:03:53,040 --> 00:03:56,959
a power subscribe

00:03:54,720 --> 00:03:57,920
one of the cool things from nets is that

00:03:56,959 --> 00:04:00,159
it uh

00:03:57,920 --> 00:04:01,599
there's a gossiping of the topology so

00:04:00,159 --> 00:04:04,720
just as

00:04:01,599 --> 00:04:08,159
nodes join and go from the system

00:04:04,720 --> 00:04:09,920
um they will uh

00:04:08,159 --> 00:04:12,239
their clients will gossip each other

00:04:09,920 --> 00:04:15,280
about the network endpoints so

00:04:12,239 --> 00:04:19,199
that they can use to fail over

00:04:15,280 --> 00:04:21,040
as i mentioned before uh has

00:04:19,199 --> 00:04:23,759
at most once delivery for the course

00:04:21,040 --> 00:04:26,240
system but you can also

00:04:23,759 --> 00:04:28,560
have at least one delivery by using some

00:04:26,240 --> 00:04:29,520
other sub modules such as nut streaming

00:04:28,560 --> 00:04:31,440
and also the

00:04:29,520 --> 00:04:33,520
jet stream which another take on that

00:04:31,440 --> 00:04:34,880
and i'm not streaming or the persistence

00:04:33,520 --> 00:04:36,639
of messages in nets

00:04:34,880 --> 00:04:39,280
that is in the work right now in the

00:04:36,639 --> 00:04:42,000
works right now

00:04:39,280 --> 00:04:42,560
and let's lead to a couple of very good

00:04:42,000 --> 00:04:45,280
features

00:04:42,560 --> 00:04:45,919
uh interesting features that made it are

00:04:45,280 --> 00:04:48,320
the

00:04:45,919 --> 00:04:50,240
authority and authorization schemes you

00:04:48,320 --> 00:04:51,759
have things like end keys which like

00:04:50,240 --> 00:04:54,800
private and public

00:04:51,759 --> 00:04:57,360
based uh authentication

00:04:54,800 --> 00:04:58,479
so the centralized identities used in

00:04:57,360 --> 00:05:02,000
the jbl teams

00:04:58,479 --> 00:05:06,320
we can also have use the sans from the

00:05:02,000 --> 00:05:09,759
tls search for auth as well as a svit

00:05:06,320 --> 00:05:11,680
from spfe certificates

00:05:09,759 --> 00:05:13,919
also that that system became a

00:05:11,680 --> 00:05:17,039
multi-tenant using accounts have

00:05:13,919 --> 00:05:18,960
isolation or so you can have name spaces

00:05:17,039 --> 00:05:22,560
for the subjects

00:05:18,960 --> 00:05:25,840
and also have multiple network

00:05:22,560 --> 00:05:27,840
topologies is more flexible and we call

00:05:25,840 --> 00:05:30,160
them um

00:05:27,840 --> 00:05:31,919
not only uh cluster connections that has

00:05:30,160 --> 00:05:32,720
a gateways and leaf node connections

00:05:31,919 --> 00:05:35,840
that will

00:05:32,720 --> 00:05:39,919
talk about them in a bit and also

00:05:35,840 --> 00:05:43,440
uh websocket support has landed already

00:05:39,919 --> 00:05:46,560
so uh nets is its core

00:05:43,440 --> 00:05:49,199
um is a public subscribe messaging

00:05:46,560 --> 00:05:51,360
uh has uh when we're talking about the

00:05:49,199 --> 00:05:53,680
apis from nets you can do a request

00:05:51,360 --> 00:05:56,000
reply which is a one-to-one

00:05:53,680 --> 00:05:58,160
um singing message expecting a response

00:05:56,000 --> 00:05:58,720
back you can do publish and subscribe

00:05:58,160 --> 00:06:02,560
which is

00:05:58,720 --> 00:06:04,560
receiving um any messages

00:06:02,560 --> 00:06:06,639
well having a number of consumers

00:06:04,560 --> 00:06:08,800
receive the message and you can also

00:06:06,639 --> 00:06:12,560
enable uh load balancing of these uh

00:06:08,800 --> 00:06:15,440
subscriptions uh request replies uh

00:06:12,560 --> 00:06:16,160
works by having an inbox to each one of

00:06:15,440 --> 00:06:18,000
the

00:06:16,160 --> 00:06:20,319
for each one of the messages that the

00:06:18,000 --> 00:06:23,360
other subscriber can

00:06:20,319 --> 00:06:24,880
respond used to respond so yeah at the

00:06:23,360 --> 00:06:28,080
api levels

00:06:24,880 --> 00:06:30,160
you have a subscription an asic handler

00:06:28,080 --> 00:06:32,560
and you can respond into that that

00:06:30,160 --> 00:06:32,560
message

00:06:32,720 --> 00:06:37,039
whereas poly subscribe you can publish

00:06:35,039 --> 00:06:38,960
it and continue to publish messages and

00:06:37,039 --> 00:06:43,039
then an end number of subscribers

00:06:38,960 --> 00:06:45,759
will uh receive receive it

00:06:43,039 --> 00:06:47,600
and again at the api level just uh

00:06:45,759 --> 00:06:49,840
subscribe on a subject

00:06:47,600 --> 00:06:51,759
then receive a message and use publish

00:06:49,840 --> 00:06:54,479
on through you will receive

00:06:51,759 --> 00:06:56,319
that message you can enable load

00:06:54,479 --> 00:07:00,080
balancing for any of them

00:06:56,319 --> 00:07:00,400
where only one member of part of that

00:07:00,080 --> 00:07:03,280
group

00:07:00,400 --> 00:07:05,520
will receive that message so you can do

00:07:03,280 --> 00:07:05,520
um

00:07:05,599 --> 00:07:11,759
create a queue groups where you can

00:07:08,639 --> 00:07:14,960
share the work distribution

00:07:11,759 --> 00:07:16,000
distributed work among a group the api

00:07:14,960 --> 00:07:18,639
for that is uh

00:07:16,000 --> 00:07:20,560
subscribe and it's very similar just uh

00:07:18,639 --> 00:07:24,080
to subscribe

00:07:20,560 --> 00:07:25,280
you can also have a wildcard support

00:07:24,080 --> 00:07:27,759
there are two different

00:07:25,280 --> 00:07:29,360
types of wildcards you have asterisk

00:07:27,759 --> 00:07:30,880
which is matches on a single level of

00:07:29,360 --> 00:07:33,360
the other subject

00:07:30,880 --> 00:07:35,840
and you also have the greater than or

00:07:33,360 --> 00:07:39,680
full wildcard which will match

00:07:35,840 --> 00:07:42,080
all of the subjects um all of the

00:07:39,680 --> 00:07:44,479
world match anything that is after that

00:07:42,080 --> 00:07:48,879
that part of the subject

00:07:44,479 --> 00:07:49,919
so um those are still at the api level

00:07:48,879 --> 00:07:52,160
when we talk about

00:07:49,919 --> 00:07:53,599
request reply and publish and

00:07:52,160 --> 00:07:55,280
subscribing

00:07:53,599 --> 00:07:57,199
but when we're talking about the

00:07:55,280 --> 00:07:59,520
architecture of the system

00:07:57,199 --> 00:08:01,440
it helps having more higher level

00:07:59,520 --> 00:08:04,000
abstractions in this case

00:08:01,440 --> 00:08:05,680
whenever we talk about sending a request

00:08:04,000 --> 00:08:08,639
and explaining a response

00:08:05,680 --> 00:08:09,039
what we're talking about is a service so

00:08:08,639 --> 00:08:11,759
we

00:08:09,039 --> 00:08:12,560
start calling this and starting from not

00:08:11,759 --> 00:08:16,879
to v2 what

00:08:12,560 --> 00:08:20,720
we call these services

00:08:16,879 --> 00:08:23,759
whereas if you have a sequence of events

00:08:20,720 --> 00:08:27,039
um that are going to be consumed by

00:08:23,759 --> 00:08:29,440
an n number of uh consumers

00:08:27,039 --> 00:08:30,400
uh we call them streams and you can

00:08:29,440 --> 00:08:31,919
enable load

00:08:30,400 --> 00:08:33,519
load balancing of course to either

00:08:31,919 --> 00:08:36,880
streams or services

00:08:33,519 --> 00:08:39,039
but now we'll have this uh other

00:08:36,880 --> 00:08:41,519
level of level of abstractions will help

00:08:39,039 --> 00:08:42,800
for

00:08:41,519 --> 00:08:45,040
especially when talking about the

00:08:42,800 --> 00:08:48,720
isolation and the permissioning

00:08:45,040 --> 00:08:48,720
about how to

00:08:49,360 --> 00:08:55,600
configure this because

00:08:52,720 --> 00:08:57,839
they work kind of differently so for a

00:08:55,600 --> 00:09:00,160
stream against uh just a flow

00:08:57,839 --> 00:09:02,480
or just a re sequence of messages that

00:09:00,160 --> 00:09:04,959
can be consumed and will be found out

00:09:02,480 --> 00:09:06,000
whereas service is something that is

00:09:04,959 --> 00:09:08,640
expected to require

00:09:06,000 --> 00:09:10,480
a receiver request and then do something

00:09:08,640 --> 00:09:12,399
and return a result

00:09:10,480 --> 00:09:13,519
and the recommendation is to for this to

00:09:12,399 --> 00:09:17,040
always be

00:09:13,519 --> 00:09:19,680
load balanced when

00:09:17,040 --> 00:09:20,560
using the accounts installation features

00:09:19,680 --> 00:09:22,560
from nets

00:09:20,560 --> 00:09:25,040
for example in this case we have a

00:09:22,560 --> 00:09:28,320
couple of accounts

00:09:25,040 --> 00:09:31,120
one is acme and the cncf and we can see

00:09:28,320 --> 00:09:32,000
already how it helps having to use these

00:09:31,120 --> 00:09:36,000
abstractions for

00:09:32,000 --> 00:09:36,000
streams where we say that the

00:09:36,160 --> 00:09:42,959
account will export export a stream

00:09:39,760 --> 00:09:46,000
named acme which is uh the greater

00:09:42,959 --> 00:09:46,880
uh that is basically any event that is

00:09:46,000 --> 00:09:50,160
published after

00:09:46,880 --> 00:09:51,040
the greater than wildcard here and the

00:09:50,160 --> 00:09:54,160
cnc

00:09:51,040 --> 00:09:58,240
cncf account can import from the

00:09:54,160 --> 00:10:02,160
the acme account into the

00:09:58,240 --> 00:10:04,959
acme subject with a import prefix

00:10:02,160 --> 00:10:06,160
to receive all the events so now we can

00:10:04,959 --> 00:10:08,079
have a ticker

00:10:06,160 --> 00:10:09,920
just publishing those events on this uh

00:10:08,079 --> 00:10:12,000
any subject after acme

00:10:09,920 --> 00:10:13,279
and then the subscriber on the cncf

00:10:12,000 --> 00:10:16,560
account is going to be

00:10:13,279 --> 00:10:20,240
receiving those events on the other hand

00:10:16,560 --> 00:10:24,320
when we talk about the stream services

00:10:20,240 --> 00:10:27,839
we say it is expected to have a response

00:10:24,320 --> 00:10:30,160
for for that message so in this case we

00:10:27,839 --> 00:10:32,959
have a q subscription

00:10:30,160 --> 00:10:34,160
for the hello subject that is going to

00:10:32,959 --> 00:10:37,519
be

00:10:34,160 --> 00:10:40,640
uh provided by the acme account

00:10:37,519 --> 00:10:42,560
and then the cncf account can enable

00:10:40,640 --> 00:10:46,480
data sharing between those accounts by

00:10:42,560 --> 00:10:48,800
mounting that api or the hello api

00:10:46,480 --> 00:10:49,839
from the acme account into the cncf

00:10:48,800 --> 00:10:52,079
account

00:10:49,839 --> 00:10:55,120
and so now that under the cncf account

00:10:52,079 --> 00:10:58,399
you make a request on cncf.hello

00:10:55,120 --> 00:11:01,440
and we receive a request a reply back

00:10:58,399 --> 00:11:04,640
from this uh

00:11:01,440 --> 00:11:07,519
producer or world service on their

00:11:04,640 --> 00:11:07,519
acme account

00:11:08,160 --> 00:11:14,480
and all of these um another thing that

00:11:12,839 --> 00:11:17,519
um

00:11:14,480 --> 00:11:21,440
made into the nuts v2 are the

00:11:17,519 --> 00:11:23,200
flexible um they became more flexible

00:11:21,440 --> 00:11:24,480
about the architecture that you can

00:11:23,200 --> 00:11:28,399
build

00:11:24,480 --> 00:11:31,600
um so one of the missions from nets

00:11:28,399 --> 00:11:34,640
version 2 is that make it more flexible

00:11:31,600 --> 00:11:36,640
to expand across a single data center

00:11:34,640 --> 00:11:38,480
the vision is to not have more silos and

00:11:36,640 --> 00:11:39,680
be able to connect and not

00:11:38,480 --> 00:11:41,519
use nets to be able to connect

00:11:39,680 --> 00:11:43,120
everything so they have more building

00:11:41,519 --> 00:11:45,600
blocks you can use

00:11:43,120 --> 00:11:46,800
not only clusters that were part of nasa

00:11:45,600 --> 00:11:50,480
b1 you can have a

00:11:46,800 --> 00:11:52,079
gateways to connect multiple

00:11:50,480 --> 00:11:54,079
data centers and also have something

00:11:52,079 --> 00:11:56,079
called a lymph nodes which create

00:11:54,079 --> 00:11:57,760
extensions of a super cluster of a

00:11:56,079 --> 00:12:00,959
single cluster to have a

00:11:57,760 --> 00:12:04,079
hop-and-spoke type of topologies

00:12:00,959 --> 00:12:06,240
so the classic nets architecture was

00:12:04,079 --> 00:12:08,000
uh if we want was to have for example

00:12:06,240 --> 00:12:10,000
let's say like a load balancer that is

00:12:08,000 --> 00:12:13,279
exposing the number of http endpoints

00:12:10,000 --> 00:12:16,320
and then behind that is using nets for

00:12:13,279 --> 00:12:19,120
the internal communication

00:12:16,320 --> 00:12:20,639
using that services and of course that

00:12:19,120 --> 00:12:22,880
could be a highly available

00:12:20,639 --> 00:12:24,079
and that's clustered with if you if one

00:12:22,880 --> 00:12:26,480
of those go away

00:12:24,079 --> 00:12:27,440
then if clients will reconnect and be

00:12:26,480 --> 00:12:31,279
able to find it

00:12:27,440 --> 00:12:31,760
still continue to talk to each other by

00:12:31,279 --> 00:12:35,440
using

00:12:31,760 --> 00:12:39,519
failover into another that's a server

00:12:35,440 --> 00:12:42,079
so the idea with nats v2 is to have um

00:12:39,519 --> 00:12:43,279
be able to expand not only from a single

00:12:42,079 --> 00:12:46,320
data center

00:12:43,279 --> 00:12:48,800
into into a multiple ones have global

00:12:46,320 --> 00:12:50,399
deployments in this case we have uh

00:12:48,800 --> 00:12:53,680
super clusters which are

00:12:50,399 --> 00:12:56,000
cluster cluster of clusters

00:12:53,680 --> 00:12:56,720
and you also have the leaf nodes that

00:12:56,000 --> 00:12:58,880
can connect

00:12:56,720 --> 00:13:00,000
connect to a super cluster either a

00:12:58,880 --> 00:13:03,360
super cluster or

00:13:00,000 --> 00:13:03,920
a cluster and can also uh they can even

00:13:03,360 --> 00:13:07,040
kind of be

00:13:03,920 --> 00:13:08,959
a daisy chain as well

00:13:07,040 --> 00:13:11,120
so you can have like very arbitrary

00:13:08,959 --> 00:13:15,360
topologies now

00:13:11,120 --> 00:13:19,040
the super clusters are optimized for

00:13:15,360 --> 00:13:22,320
one or one network links

00:13:19,040 --> 00:13:23,760
and high latency um so where are the

00:13:22,320 --> 00:13:25,839
the cluster type of connections are

00:13:23,760 --> 00:13:29,760
meant to be in a single data center

00:13:25,839 --> 00:13:32,560
the gateways are more like um

00:13:29,760 --> 00:13:32,959
uh at most will give you like three hops

00:13:32,560 --> 00:13:35,040
from

00:13:32,959 --> 00:13:39,360
when routing a message from one cluster

00:13:35,040 --> 00:13:43,120
to another cluster in another region

00:13:39,360 --> 00:13:46,399
and the leaf nodes uh allow you to

00:13:43,120 --> 00:13:48,079
extend them extend these um

00:13:46,399 --> 00:13:50,000
we say that error ideal for edge

00:13:48,079 --> 00:13:51,440
computing or iot because

00:13:50,000 --> 00:13:52,800
you can delegate some of the work

00:13:51,440 --> 00:13:54,320
through the leaf nodes for example you

00:13:52,800 --> 00:13:57,760
can have a leaf node

00:13:54,320 --> 00:14:00,880
that is bound to localhost so

00:13:57,760 --> 00:14:03,120
a device that can just start using a tls

00:14:00,880 --> 00:14:05,040
is very constrained i can't talk to the

00:14:03,120 --> 00:14:07,839
leaf node but the lymph node itself is

00:14:05,040 --> 00:14:11,440
has a secure connection to there and not

00:14:07,839 --> 00:14:14,480
super clustering has credentials

00:14:11,440 --> 00:14:17,519
so let's say for example we have in the

00:14:14,480 --> 00:14:20,240
the pink dots they are clients um

00:14:17,519 --> 00:14:20,560
they are connected to a leaf node we can

00:14:20,240 --> 00:14:23,600
be

00:14:20,560 --> 00:14:25,440
sending messages from a region in san

00:14:23,600 --> 00:14:27,760
francisco and then

00:14:25,440 --> 00:14:30,000
uh it is going to make it make it across

00:14:27,760 --> 00:14:31,440
the gateway connection to

00:14:30,000 --> 00:14:33,519
let's say in this case it's gonna be an

00:14:31,440 --> 00:14:36,000
amsterdam cluster that will be building

00:14:33,519 --> 00:14:37,760
in the demo but it is going through a

00:14:36,000 --> 00:14:40,880
leaf node and then

00:14:37,760 --> 00:14:42,399
receiving the message so this client is

00:14:40,880 --> 00:14:43,600
not connecting directly to the super

00:14:42,399 --> 00:14:47,279
cluster but

00:14:43,600 --> 00:14:48,639
to a leaf node connection and in case

00:14:47,279 --> 00:14:52,079
there is no connection uh

00:14:48,639 --> 00:14:54,959
here if it was a new subscriber

00:14:52,079 --> 00:14:56,000
then the message will be routed to

00:14:54,959 --> 00:14:58,079
another uh

00:14:56,000 --> 00:15:00,399
cluster that it can fail over to in this

00:14:58,079 --> 00:15:03,199
case for example in singapore

00:15:00,399 --> 00:15:03,680
so let's build uh that type of topology

00:15:03,199 --> 00:15:06,399
uh

00:15:03,680 --> 00:15:07,680
using helm in kubernetes so it's gonna

00:15:06,399 --> 00:15:10,800
be actually two demos

00:15:07,680 --> 00:15:12,560
uh one is gonna be using uh gateways

00:15:10,800 --> 00:15:14,560
uh connections between san francisco

00:15:12,560 --> 00:15:16,560
amsterdam and singapore

00:15:14,560 --> 00:15:17,839
and from the second demo we're gonna

00:15:16,560 --> 00:15:21,279
create the same bot

00:15:17,839 --> 00:15:24,720
using a super cluster for communicating

00:15:21,279 --> 00:15:26,000
uh across regions so

00:15:24,720 --> 00:15:28,160
you'll notice that the difference

00:15:26,000 --> 00:15:28,800
between uh the configuration between

00:15:28,160 --> 00:15:32,480
these two

00:15:28,800 --> 00:15:35,759
uh deployments

00:15:32,480 --> 00:15:36,959
so let's start with uh helm first we

00:15:35,759 --> 00:15:39,440
have a

00:15:36,959 --> 00:15:42,000
i really prepared a cluster in digital

00:15:39,440 --> 00:15:44,720
ocean where we have a couple of a

00:15:42,000 --> 00:15:45,759
few fireball ports open at four to two

00:15:44,720 --> 00:15:49,759
for them

00:15:45,759 --> 00:15:50,880
nuts clients to connect for uh 7422 for

00:15:49,759 --> 00:15:53,600
the leaf nodes

00:15:50,880 --> 00:15:55,040
and also for the gateway connection 75

00:15:53,600 --> 00:15:59,519
00:15:55,040 --> 00:15:59,519
so first i'll generate the

00:16:00,480 --> 00:16:04,160
urls for the gateways

00:16:04,560 --> 00:16:11,600
and then i'm you're going to use it to

00:16:08,000 --> 00:16:14,639
create a helm

00:16:11,600 --> 00:16:14,639
and yammer file

00:16:15,600 --> 00:16:21,600
that has this each one of the endpoints

00:16:18,720 --> 00:16:23,440
explicitly defined these are the

00:16:21,600 --> 00:16:27,519
external ip addresses for the

00:16:23,440 --> 00:16:29,519
node the modes uh because it is by it is

00:16:27,519 --> 00:16:31,839
binding into the host port from each one

00:16:29,519 --> 00:16:31,839
of these

00:16:32,160 --> 00:16:38,320
cubelets uh you could change this into

00:16:35,920 --> 00:16:40,639
using dns for example or a node port if

00:16:38,320 --> 00:16:42,320
you if it's your deployment

00:16:40,639 --> 00:16:43,759
and which is actually recommend

00:16:42,320 --> 00:16:47,120
recommended for uh

00:16:43,759 --> 00:16:51,839
production so i will deploy

00:16:47,120 --> 00:16:51,839
this as a signal access

00:16:52,800 --> 00:16:58,320
so let's deploy this and in case you

00:16:56,160 --> 00:17:00,610
don't have it added already you can

00:16:58,320 --> 00:17:02,800
add the helm charts

00:17:00,610 --> 00:17:06,720
[Music]

00:17:02,800 --> 00:17:09,919
for net now we'll deploy

00:17:06,720 --> 00:17:09,919
into the three regions

00:17:11,919 --> 00:17:23,839
and once it is deployed we will

00:17:19,280 --> 00:17:28,079
created a stream which essentially a

00:17:23,839 --> 00:17:31,679
a consumer of messages in san francisco

00:17:28,079 --> 00:17:35,000
san francisco it is running this ip

00:17:31,679 --> 00:17:37,520
right now now it's connected to

00:17:35,000 --> 00:17:39,679
[Music]

00:17:37,520 --> 00:17:42,559
san francisco and i'll send a message

00:17:39,679 --> 00:17:42,559
from singapore

00:17:42,720 --> 00:17:51,120
it's still not up yet

00:17:47,679 --> 00:17:53,600
so let's

00:17:51,120 --> 00:17:54,640
wait a little bit okay so you can see

00:17:53,600 --> 00:17:58,160
now

00:17:54,640 --> 00:17:59,039
the message got routed across different

00:17:58,160 --> 00:18:00,880
regions

00:17:59,039 --> 00:18:02,720
if i make a quick telnet connection to

00:18:00,880 --> 00:18:05,760
this endpoint

00:18:02,720 --> 00:18:09,120
you'll see that the

00:18:05,760 --> 00:18:09,120
they're very different clusters

00:18:09,440 --> 00:18:12,720
these are cluster in san francisco once

00:18:12,000 --> 00:18:14,320
again

00:18:12,720 --> 00:18:16,960
and they connect your elsa basically

00:18:14,320 --> 00:18:19,360
when the client gets to be able to

00:18:16,960 --> 00:18:20,880
identify what are the other servers uh

00:18:19,360 --> 00:18:23,840
brokers that it can uh

00:18:20,880 --> 00:18:26,000
use for to fail over when singapore is a

00:18:23,840 --> 00:18:29,360
very different cluster but still there's

00:18:26,000 --> 00:18:32,400
communication between these uh by

00:18:29,360 --> 00:18:35,360
with the gateway connections now

00:18:32,400 --> 00:18:37,760
we will create a service instead uh

00:18:35,360 --> 00:18:42,720
let's go use a

00:18:37,760 --> 00:18:46,000
reply with foo and send a request

00:18:42,720 --> 00:18:49,520
again from singapore you can see that

00:18:46,000 --> 00:18:54,000
you can make requests

00:18:49,520 --> 00:18:54,000
across the from region to region

00:18:55,440 --> 00:19:00,559
so this is um

00:19:01,919 --> 00:19:07,840
not too difficult to set up but

00:19:04,960 --> 00:19:08,640
um see easy ball involves it's a super

00:19:07,840 --> 00:19:10,880
cluster

00:19:08,640 --> 00:19:12,559
so you involve like having to take into

00:19:10,880 --> 00:19:16,720
account the dns

00:19:12,559 --> 00:19:19,120
and having this

00:19:16,720 --> 00:19:20,960
public external all the gateways need to

00:19:19,120 --> 00:19:24,640
talk to each other because

00:19:20,960 --> 00:19:26,799
otherwise uh there would be partitions

00:19:24,640 --> 00:19:28,960
but unfortunately there's already a

00:19:26,799 --> 00:19:31,600
super cluster that you can use

00:19:28,960 --> 00:19:32,480
you can use a lyft node connections so

00:19:31,600 --> 00:19:36,320
i've already

00:19:32,480 --> 00:19:39,600
tore down this cluster and

00:19:36,320 --> 00:19:41,280
just to compare i'm going to create a a

00:19:39,600 --> 00:19:43,840
leaf node based

00:19:41,280 --> 00:19:45,840
multi-region cluster that is just

00:19:43,840 --> 00:19:48,160
another super cluster to able to

00:19:45,840 --> 00:19:48,960
stitch all those regions together for

00:19:48,160 --> 00:19:50,880
this you'll need

00:19:48,960 --> 00:19:52,799
uh credentials for that super closer in

00:19:50,880 --> 00:19:56,559
this case i'm using

00:19:52,799 --> 00:19:56,559
an ngs super cluster

00:19:56,720 --> 00:19:59,919
and i

00:20:02,480 --> 00:20:08,240
will use those credentials and connect

00:20:05,679 --> 00:20:10,400
as a leaf node to this other super

00:20:08,240 --> 00:20:14,799
cluster

00:20:10,400 --> 00:20:16,320
so now i will deploy this uh with helm

00:20:14,799 --> 00:20:18,320
so you can see that the configuration is

00:20:16,320 --> 00:20:20,559
gonna be uh simpler

00:20:18,320 --> 00:20:21,760
because you already are using leveraging

00:20:20,559 --> 00:20:23,280
another super cluster for the

00:20:21,760 --> 00:20:28,159
communication between

00:20:23,280 --> 00:20:28,159
uh different uh regions

00:20:29,280 --> 00:20:35,840
this one is still connected so i'm gonna

00:20:30,880 --> 00:20:35,840
disconnect it

00:20:47,280 --> 00:20:53,760
represent okay

00:20:50,400 --> 00:20:53,760
um yeah

00:20:55,919 --> 00:21:03,679
so now i will subscribe from

00:20:59,600 --> 00:21:05,280
what is that singapore now san francisco

00:21:03,679 --> 00:21:09,200
and publish

00:21:05,280 --> 00:21:11,760
messages from singapore

00:21:09,200 --> 00:21:14,480
in this communication using the leaf

00:21:11,760 --> 00:21:14,480
node connection

00:21:15,360 --> 00:21:19,840
make a service

00:21:25,760 --> 00:21:31,840
and request response across regions

00:21:41,200 --> 00:21:48,240
they're both connected to

00:21:44,320 --> 00:21:51,520
this ngs super cluster

00:21:48,240 --> 00:21:51,520
which is just a super cluster

00:21:54,320 --> 00:22:01,200
yeah that's what enables the the routing

00:21:59,520 --> 00:22:02,880
so but the roadmap there are a few

00:22:01,200 --> 00:22:05,120
things in the pipeline uh

00:22:02,880 --> 00:22:06,640
this year and notably the jet stream

00:22:05,120 --> 00:22:09,440
which is the reworking of

00:22:06,640 --> 00:22:11,039
not streaming message headers which are

00:22:09,440 --> 00:22:13,760
some of it has already merged

00:22:11,039 --> 00:22:15,360
merchant master but still not released

00:22:13,760 --> 00:22:17,679
yet

00:22:15,360 --> 00:22:18,720
there's a new work for exposing this

00:22:17,679 --> 00:22:21,840
service and stream

00:22:18,720 --> 00:22:22,960
apis into the client also incoming is

00:22:21,840 --> 00:22:27,039
mqtt support

00:22:22,960 --> 00:22:30,240
and more enhancement for monitoring and

00:22:27,039 --> 00:22:31,120
zero trust and security and also in the

00:22:30,240 --> 00:22:33,840
future is a

00:22:31,120 --> 00:22:36,320
more entire integration with a web

00:22:33,840 --> 00:22:36,320
assembly

00:22:36,400 --> 00:22:41,840
so that's it for my talk and as a time

00:22:38,799 --> 00:22:41,840

YouTube URL: https://www.youtube.com/watch?v=Rbtdh6Ev0OQ


