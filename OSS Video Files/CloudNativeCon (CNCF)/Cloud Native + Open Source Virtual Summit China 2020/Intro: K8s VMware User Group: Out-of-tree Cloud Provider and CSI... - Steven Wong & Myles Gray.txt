Title: Intro: K8s VMware User Group: Out-of-tree Cloud Provider and CSI... - Steven Wong & Myles Gray
Publication date: 2020-09-11
Playlist: Cloud Native + Open Source Virtual Summit China 2020
Description: 
	Donâ€™t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more atÂ https://kubecon.ioÂ The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Intro: K8s VMware User Group: Out-of-tree Cloud Provider and CSI Storage Migration - Steven Wong & Myles Gray, VMware 

This is a presentation by the recently formed Kubernetes VMware User Group. This group addresses running all forms of Kubernetes on VMware infrastructure. Kubernetes is in the process of deprecating the cloud provider and storage plugins that have historically been built into the source tree and directly packaged with many distributions. The new out-of-tree cloud provider and CSI storage plugin are now recommended for production use. The legacy plugins are no longer getting feature upgrades. However, when running on older hypervisor or Kubernetes releases, choices may be constrained. This session will cover the in vs out-of-tree feature and compatibility matrix, offer guidance on migration to out-of-tree - and cover documentation and support resources. 

https://sched.co/cpA7
Captions: 
	00:00:00,640 --> 00:00:05,120
hi this is presented by the kubernetes

00:00:03,360 --> 00:00:07,040
vmware user group

00:00:05,120 --> 00:00:08,720
this is about running all forms of

00:00:07,040 --> 00:00:11,679
kubernetes on the

00:00:08,720 --> 00:00:12,320
vmware infrastructure platform i'm steve

00:00:11,679 --> 00:00:15,440
wong

00:00:12,320 --> 00:00:16,240
co-chair of the vmware user group i work

00:00:15,440 --> 00:00:18,480
on kubernetes

00:00:16,240 --> 00:00:20,160
and a few other open source projects as

00:00:18,480 --> 00:00:22,560
an employee of vmware

00:00:20,160 --> 00:00:23,760
today i'm joined by miles gray the other

00:00:22,560 --> 00:00:26,160
co-chair

00:00:23,760 --> 00:00:27,599
miles is a senior technical marketing

00:00:26,160 --> 00:00:28,640
architect in the storage and

00:00:27,599 --> 00:00:31,840
availability

00:00:28,640 --> 00:00:31,840
business unit at vmware

00:00:32,559 --> 00:00:36,320
we'll give contact information and a

00:00:34,480 --> 00:00:37,360
link to the deck at the end but here's

00:00:36,320 --> 00:00:39,600
the agenda

00:00:37,360 --> 00:00:42,320
i'm going to start with a really quick

00:00:39,600 --> 00:00:44,000
summary of what moving out of tree means

00:00:42,320 --> 00:00:46,079
and why it's happening

00:00:44,000 --> 00:00:47,600
two components are moving on a tree the

00:00:46,079 --> 00:00:50,079
cloud provider adapter

00:00:47,600 --> 00:00:51,360
and the storage adapter and we'll cover

00:00:50,079 --> 00:00:53,600
each of these

00:00:51,360 --> 00:00:54,960
we'll move on to best practices for

00:00:53,600 --> 00:00:57,840
configuration

00:00:54,960 --> 00:00:59,359
and wrap up with some links to resources

00:00:57,840 --> 00:01:00,960
hopefully you'll like this talk

00:00:59,359 --> 00:01:03,199
and at the end i'm going to provide

00:01:00,960 --> 00:01:05,920
details on how you can become a member

00:01:03,199 --> 00:01:08,080
of the kubernetes vmware user group

00:01:05,920 --> 00:01:12,960
where we host ongoing discussions on

00:01:08,080 --> 00:01:15,360
topics like the material in this talk

00:01:12,960 --> 00:01:17,840
so here's the origin story many years

00:01:15,360 --> 00:01:19,759
ago when kubernetes was young

00:01:17,840 --> 00:01:20,960
actually that was only about five years

00:01:19,759 --> 00:01:23,759
ago uh

00:01:20,960 --> 00:01:26,000
kubernetes was being built for what was

00:01:23,759 --> 00:01:28,159
a small set of popular hosting

00:01:26,000 --> 00:01:30,400
and storage platforms the code to

00:01:28,159 --> 00:01:31,920
support these platforms was built right

00:01:30,400 --> 00:01:34,479
into kubernetes

00:01:31,920 --> 00:01:36,479
all packaged into each release with code

00:01:34,479 --> 00:01:38,479
to support things you needed

00:01:36,479 --> 00:01:40,479
unfortunately along with some things you

00:01:38,479 --> 00:01:42,399
probably didn't need

00:01:40,479 --> 00:01:44,240
yes kubernetes was like one of those

00:01:42,399 --> 00:01:45,920
monolith things that your mother told

00:01:44,240 --> 00:01:48,960
you to avoid

00:01:45,920 --> 00:01:50,640
as kubernetes gained popularity more and

00:01:48,960 --> 00:01:53,680
more cloud providers

00:01:50,640 --> 00:01:55,280
and storage plugins crowded into the

00:01:53,680 --> 00:01:57,119
train

00:01:55,280 --> 00:01:59,600
it became obvious that this was

00:01:57,119 --> 00:02:00,000
unsustainable it's kind of a bad thing

00:01:59,600 --> 00:02:02,560
to

00:02:00,000 --> 00:02:05,040
have each release get monster sized it

00:02:02,560 --> 00:02:07,360
slows down releases and patches

00:02:05,040 --> 00:02:08,640
and it increases the security threat

00:02:07,360 --> 00:02:11,200
model

00:02:08,640 --> 00:02:13,680
over two years ago this flaw was

00:02:11,200 --> 00:02:16,160
recognized and work began to move cloud

00:02:13,680 --> 00:02:19,120
providers and storage plugins

00:02:16,160 --> 00:02:20,800
out of the kubernetes code base enabling

00:02:19,120 --> 00:02:22,480
these plugins to be developed and

00:02:20,800 --> 00:02:25,680
released independently

00:02:22,480 --> 00:02:28,400
of the kubernetes release cycle

00:02:25,680 --> 00:02:30,720
it was recognized that this was a large

00:02:28,400 --> 00:02:33,040
undertaking and would take several years

00:02:30,720 --> 00:02:33,920
well now that works finished and for the

00:02:33,040 --> 00:02:38,239
most part

00:02:33,920 --> 00:02:38,239
for most users it's time to move on

00:02:38,959 --> 00:02:42,879
so the cloud providers the is the

00:02:41,120 --> 00:02:45,120
abstraction layer that hides the

00:02:42,879 --> 00:02:47,040
underlying variations between one

00:02:45,120 --> 00:02:49,680
platform and another

00:02:47,040 --> 00:02:50,400
storage networking and potentially a few

00:02:49,680 --> 00:02:52,640
other things

00:02:50,400 --> 00:02:53,760
use different technology on different

00:02:52,640 --> 00:02:55,760
clouds

00:02:53,760 --> 00:02:58,000
and the cloud provider abstraction is

00:02:55,760 --> 00:03:00,879
what enables kubernetes to host

00:02:58,000 --> 00:03:01,360
apps that don't care and to a large

00:03:00,879 --> 00:03:03,760
extent

00:03:01,360 --> 00:03:05,120
can't even tell where they're running

00:03:03,760 --> 00:03:08,879
the cloud provider

00:03:05,120 --> 00:03:11,120
enables the portability in kubernetes

00:03:08,879 --> 00:03:13,120
now some of these abstractions handled

00:03:11,120 --> 00:03:14,239
by the cloud provider are optional for

00:03:13,120 --> 00:03:17,360
example

00:03:14,239 --> 00:03:19,519
public clouds usually have a single

00:03:17,360 --> 00:03:20,159
choice of a built-in load balancer

00:03:19,519 --> 00:03:22,319
service

00:03:20,159 --> 00:03:23,440
so they build in a load balancer

00:03:22,319 --> 00:03:26,400
abstraction

00:03:23,440 --> 00:03:28,400
with vsphere and other on-premises

00:03:26,400 --> 00:03:31,760
solutions in general

00:03:28,400 --> 00:03:34,239
users don't have a single standard

00:03:31,760 --> 00:03:35,760
implementation of load balancers network

00:03:34,239 --> 00:03:38,000
routing etc

00:03:35,760 --> 00:03:39,920
so the interest of maximum choice the

00:03:38,000 --> 00:03:43,280
vsphere cloud provider

00:03:39,920 --> 00:03:45,680
leaves this up to the kubernetes user

00:03:43,280 --> 00:03:48,640
a few things i want to point out the

00:03:45,680 --> 00:03:52,239
legacy entry cloud provider is linked

00:03:48,640 --> 00:03:54,720
and used with the entry storage plugin

00:03:52,239 --> 00:03:56,879
so these are tied together and my

00:03:54,720 --> 00:03:58,799
colleague miles will talk more about

00:03:56,879 --> 00:04:01,360
storage in a moment

00:03:58,799 --> 00:04:03,120
also even though i just said that the

00:04:01,360 --> 00:04:04,640
vsphere cloud provider

00:04:03,120 --> 00:04:06,720
doesn't have the load balancer

00:04:04,640 --> 00:04:08,959
abstraction uh

00:04:06,720 --> 00:04:10,799
the code technically does have a

00:04:08,959 --> 00:04:14,319
disabled by default

00:04:10,799 --> 00:04:17,519
alpha feature gated facade for an nsxt

00:04:14,319 --> 00:04:19,759
load balancer at this point in time this

00:04:17,519 --> 00:04:22,240
is a recommended for general use

00:04:19,759 --> 00:04:24,000
and alpha features are subject to change

00:04:22,240 --> 00:04:25,840
and even future removal

00:04:24,000 --> 00:04:27,840
but i just want to point this out for

00:04:25,840 --> 00:04:30,320
the sake of being a hundred percent

00:04:27,840 --> 00:04:30,320
accurate

00:04:30,800 --> 00:04:36,240
so here's a logic flow that gives you

00:04:33,840 --> 00:04:37,919
an entry versus out of tree

00:04:36,240 --> 00:04:40,800
recommendation

00:04:37,919 --> 00:04:42,080
my summary for most users you should be

00:04:40,800 --> 00:04:44,720
on the out of tree right

00:04:42,080 --> 00:04:46,639
now and eventually you're going to be

00:04:44,720 --> 00:04:48,639
forced to go there because the entry

00:04:46,639 --> 00:04:51,600
version will go away

00:04:48,639 --> 00:04:52,639
exceptions if you use a kubernetes

00:04:51,600 --> 00:04:54,800
distribution

00:04:52,639 --> 00:04:56,800
do whatever your vendor recommends and

00:04:54,800 --> 00:04:57,600
let your vendor manage the work of

00:04:56,800 --> 00:05:00,960
migration

00:04:57,600 --> 00:05:03,520
for you the other exception is if you

00:05:00,960 --> 00:05:06,560
are running a really old kubernetes

00:05:03,520 --> 00:05:08,479
or an older vsphere version you might be

00:05:06,560 --> 00:05:12,720
stuck on entry

00:05:08,479 --> 00:05:13,600
kubernetes 113 dates back to december of

00:05:12,720 --> 00:05:15,759
00:05:13,600 --> 00:05:17,680
so in my opinion you shouldn't be there

00:05:15,759 --> 00:05:19,360
anyway because it's no longer getting

00:05:17,680 --> 00:05:22,320
security patches

00:05:19,360 --> 00:05:22,800
or bug fixes but i recognize that some

00:05:22,320 --> 00:05:28,240
people

00:05:22,800 --> 00:05:30,400
might be on this uh vsphere 6.7 u3

00:05:28,240 --> 00:05:33,039
isn't that old it dates back to august

00:05:30,400 --> 00:05:36,320
of 2019

00:05:33,039 --> 00:05:38,320
but some people face impediments to a

00:05:36,320 --> 00:05:40,960
vsphere upgrade

00:05:38,320 --> 00:05:43,919
maybe it's a license issue or it could

00:05:40,960 --> 00:05:46,560
be a legacy hardware issue that

00:05:43,919 --> 00:05:47,280
is where you've got old enough servers

00:05:46,560 --> 00:05:49,680
that

00:05:47,280 --> 00:05:50,720
they can't be used to install a newer

00:05:49,680 --> 00:05:53,280
version

00:05:50,720 --> 00:05:56,080
so for now you can stay on entry if you

00:05:53,280 --> 00:05:58,240
really want to it hasn't gone away yet

00:05:56,080 --> 00:05:59,199
but if you're on entry you're missing

00:05:58,240 --> 00:06:02,400
out on

00:05:59,199 --> 00:06:04,319
new features and community-based support

00:06:02,400 --> 00:06:04,880
is always better when you're doing with

00:06:04,319 --> 00:06:08,319
mo

00:06:04,880 --> 00:06:11,440
what whatever most other users are doing

00:06:08,319 --> 00:06:15,120
um i also want to point out

00:06:11,440 --> 00:06:18,080
that the vsphere 6.7 u3

00:06:15,120 --> 00:06:20,560
uh requirement for out a tree refers to

00:06:18,080 --> 00:06:23,759
the v sphere

00:06:20,560 --> 00:06:27,120
vcenter server if you keep a handful

00:06:23,759 --> 00:06:29,520
of old legacy esxi hypervisor hosts

00:06:27,120 --> 00:06:31,360
around

00:06:29,520 --> 00:06:33,680
as long as you have some also have some

00:06:31,360 --> 00:06:36,400
new ones and your vcenter

00:06:33,680 --> 00:06:38,560
is the newer version this is okay as

00:06:36,400 --> 00:06:41,440
long as your kubernetes nodes run

00:06:38,560 --> 00:06:45,440
only on the newer hypervisor hosts you

00:06:41,440 --> 00:06:45,440
can run a mixed version vsphere

00:06:45,919 --> 00:06:49,199
here's a summary of the information

00:06:47,680 --> 00:06:50,960
you're going to need to gather

00:06:49,199 --> 00:06:53,759
to set up your cloud provider

00:06:50,960 --> 00:06:56,479
configuration

00:06:53,759 --> 00:06:58,240
it's based on an ini file and the full

00:06:56,479 --> 00:07:01,759
details are in the dock

00:06:58,240 --> 00:07:05,599
linked with the link in this slide

00:07:01,759 --> 00:07:09,759
you'll need this vsphere comp file

00:07:05,599 --> 00:07:13,280
whether you go with the cube adm

00:07:09,759 --> 00:07:15,440
or a hardway route of passing command

00:07:13,280 --> 00:07:18,720
line flags to kubernetes

00:07:15,440 --> 00:07:20,960
components if you're on a distribution

00:07:18,720 --> 00:07:23,360
this likely captures the same

00:07:20,960 --> 00:07:24,319
information but you might not fill out

00:07:23,360 --> 00:07:27,599
this

00:07:24,319 --> 00:07:28,000
ini file directly it might be involved

00:07:27,599 --> 00:07:31,280
with

00:07:28,000 --> 00:07:32,160
some sort of configuration capture

00:07:31,280 --> 00:07:35,120
through your

00:07:32,160 --> 00:07:36,960
distributions installer we're going to

00:07:35,120 --> 00:07:39,360
skip over the steps of

00:07:36,960 --> 00:07:41,280
os install and configuration and

00:07:39,360 --> 00:07:44,400
container runtime install

00:07:41,280 --> 00:07:46,240
they are in the documentation i want to

00:07:44,400 --> 00:07:47,520
point out that you do have to disable

00:07:46,240 --> 00:07:51,360
swap in the os

00:07:47,520 --> 00:07:54,080
that's a kubernetes requirement and

00:07:51,360 --> 00:07:56,720
vms hosting your kubernetes cluster

00:07:54,080 --> 00:07:59,039
nodes have a few other

00:07:56,720 --> 00:08:02,080
considerations that we'll get to in the

00:07:59,039 --> 00:08:02,080
next few slides

00:08:02,639 --> 00:08:07,680
the previous slide covered the entry

00:08:05,280 --> 00:08:09,599
cloud provider but the out of tree cloud

00:08:07,680 --> 00:08:11,520
provider is going to need the same sort

00:08:09,599 --> 00:08:14,080
of information

00:08:11,520 --> 00:08:16,240
if you do the hard way install your

00:08:14,080 --> 00:08:17,680
command line option flags are just

00:08:16,240 --> 00:08:19,360
a little bit different but the

00:08:17,680 --> 00:08:22,879
underlying information you need to

00:08:19,360 --> 00:08:22,879
gather in advance is the same

00:08:23,360 --> 00:08:30,319
here are some links to detailed docs for

00:08:27,039 --> 00:08:33,279
cube adm based kubernetes installs now

00:08:30,319 --> 00:08:34,080
cube adm describes itself as a tool to

00:08:33,279 --> 00:08:37,120
bootstrap

00:08:34,080 --> 00:08:38,560
up a minimum viable kubernetes so you

00:08:37,120 --> 00:08:40,719
might need a little more

00:08:38,560 --> 00:08:42,560
but my goal here is to document

00:08:40,719 --> 00:08:43,839
something and this session isn't long

00:08:42,560 --> 00:08:46,240
enough to cover

00:08:43,839 --> 00:08:47,760
every install tool for vsphere that's

00:08:46,240 --> 00:08:49,680
out there there's a lot of them so i

00:08:47,760 --> 00:08:52,560
just picked cube adm

00:08:49,680 --> 00:08:54,880
a cube adm install does conform to

00:08:52,560 --> 00:08:56,800
kubernetes best practices and does

00:08:54,880 --> 00:08:59,200
support later upgrades

00:08:56,800 --> 00:09:00,800
if you're on a commercial distribution

00:08:59,200 --> 00:09:03,279
it likely comes with its own

00:09:00,800 --> 00:09:06,080
documentation and training materials so

00:09:03,279 --> 00:09:06,080
refer to those

00:09:07,120 --> 00:09:12,320
this slide describes the requirement for

00:09:09,760 --> 00:09:13,440
vsphere vms that act as kubernetes

00:09:12,320 --> 00:09:15,440
cluster notes

00:09:13,440 --> 00:09:16,640
i'm not going to read you all the

00:09:15,440 --> 00:09:19,279
details

00:09:16,640 --> 00:09:20,959
but the advice is to set this up one

00:09:19,279 --> 00:09:23,440
time as a vm

00:09:20,959 --> 00:09:26,800
template and then clone that to as many

00:09:23,440 --> 00:09:28,720
vms as you need to form cluster nodes

00:09:26,800 --> 00:09:30,399
uh you could set this up with the

00:09:28,720 --> 00:09:33,279
vsphere gui

00:09:30,399 --> 00:09:34,839
but if you're a command line person in

00:09:33,279 --> 00:09:38,320
the linux camp

00:09:34,839 --> 00:09:39,200
uh govc is recommended if you prefer

00:09:38,320 --> 00:09:42,560
windows

00:09:39,200 --> 00:09:44,640
power cli can do these same settings

00:09:42,560 --> 00:09:46,000
most of you already know that vmware

00:09:44,640 --> 00:09:49,360
tools is a

00:09:46,000 --> 00:09:51,120
guest vm to hypervisor host interface

00:09:49,360 --> 00:09:52,880
you want to have it installed in your

00:09:51,120 --> 00:09:56,000
cluster nodes

00:09:52,880 --> 00:09:58,240
but a warning some cni choices are going

00:09:56,000 --> 00:10:01,279
to need some non-default settings

00:09:58,240 --> 00:10:05,839
if you're using calico or andrea take a

00:10:01,279 --> 00:10:05,839
look at the link in this slide

00:10:06,000 --> 00:10:11,120
zone labeling is really useful when you

00:10:08,240 --> 00:10:14,000
want the kubernetes scheduler to spread

00:10:11,120 --> 00:10:16,640
a multi-part part service across

00:10:14,000 --> 00:10:18,880
potential failure zones

00:10:16,640 --> 00:10:21,279
this topic could be a session all by

00:10:18,880 --> 00:10:25,279
itself and indeed it was a session

00:10:21,279 --> 00:10:28,240
back at kubecon china in 2018.

00:10:25,279 --> 00:10:30,240
now some of the material in that 2018

00:10:28,240 --> 00:10:32,200
session is now a little dated

00:10:30,240 --> 00:10:34,240
so i recommend that you refer to the

00:10:32,200 --> 00:10:35,040
documentation that's linked in this

00:10:34,240 --> 00:10:37,680
slide

00:10:35,040 --> 00:10:39,839
you'll find detailed explanations with

00:10:37,680 --> 00:10:42,399
diagrams and examples there for setting

00:10:39,839 --> 00:10:42,399
up zones

00:10:42,800 --> 00:10:47,760
here's a logic flow that gives you an

00:10:45,440 --> 00:10:48,720
entry versus out of tree recommendation

00:10:47,760 --> 00:10:52,399
for the storage

00:10:48,720 --> 00:10:53,200
plug-in miles is the storage expert so

00:10:52,399 --> 00:10:57,120
at this point

00:10:53,200 --> 00:10:57,120
i'm going to turn this over to him

00:10:58,480 --> 00:11:02,800
all right awesome thanks for that steve

00:11:00,320 --> 00:11:05,360
so like steve said

00:11:02,800 --> 00:11:06,720
i work at vmware i'm a senior technical

00:11:05,360 --> 00:11:09,200
marketing architect

00:11:06,720 --> 00:11:10,959
and my focus is storage and in

00:11:09,200 --> 00:11:12,160
particular over the last two two and a

00:11:10,959 --> 00:11:13,920
half years

00:11:12,160 --> 00:11:15,600
my focus has been container storage

00:11:13,920 --> 00:11:16,800
whether it's with docker or kubernetes

00:11:15,600 --> 00:11:19,200
or what have you

00:11:16,800 --> 00:11:20,560
so uh what we're going to talk about

00:11:19,200 --> 00:11:22,720
here is

00:11:20,560 --> 00:11:25,760
the entry versus out of tree thing but

00:11:22,720 --> 00:11:27,760
how we manifested that ourselves

00:11:25,760 --> 00:11:29,360
so our entry driver was called the

00:11:27,760 --> 00:11:31,360
vsphere cloud provider

00:11:29,360 --> 00:11:32,560
it was a minimum viable product it

00:11:31,360 --> 00:11:33,680
actually came out of an internal

00:11:32,560 --> 00:11:37,040
hackathon project

00:11:33,680 --> 00:11:38,800
and was upstreamed into the kate's core

00:11:37,040 --> 00:11:40,880
repo

00:11:38,800 --> 00:11:42,880
that is a good and a bad thing we all

00:11:40,880 --> 00:11:43,920
know sort of the drawbacks of an entry

00:11:42,880 --> 00:11:45,440
driver at this stage

00:11:43,920 --> 00:11:47,040
pins you to a particular version of

00:11:45,440 --> 00:11:48,959
kubernetes all this

00:11:47,040 --> 00:11:50,560
kind of stuff you know you can't upgrade

00:11:48,959 --> 00:11:53,040
your storage integration if you don't

00:11:50,560 --> 00:11:54,720
upgrade the entire kubernetes distro

00:11:53,040 --> 00:11:56,720
um there's security implications and a

00:11:54,720 --> 00:11:58,480
whole bunch of stuff and it leads to

00:11:56,720 --> 00:12:00,320
bloat of the kubernetes code base which

00:11:58,480 --> 00:12:03,360
is not a good thing

00:12:00,320 --> 00:12:05,120
so the vcp was natively built into

00:12:03,360 --> 00:12:05,839
kubernetes part of the core code like i

00:12:05,120 --> 00:12:09,360
said

00:12:05,839 --> 00:12:11,920
and what it enabled was this policy

00:12:09,360 --> 00:12:13,440
dynamic provisioning of kubernetes

00:12:11,920 --> 00:12:16,160
persistent volumes

00:12:13,440 --> 00:12:17,440
so that allowed you to specify things

00:12:16,160 --> 00:12:20,639
like data services

00:12:17,440 --> 00:12:24,160
at the granularity of an spbm policy

00:12:20,639 --> 00:12:26,320
of a of a container volume but i said

00:12:24,160 --> 00:12:28,079
before you know it had its drawbacks so

00:12:26,320 --> 00:12:31,519
there is reasons why we moved on

00:12:28,079 --> 00:12:32,240
uh moved on from this so um how did it

00:12:31,519 --> 00:12:35,279
actually work

00:12:32,240 --> 00:12:36,399
and truth be told it was quite simple so

00:12:35,279 --> 00:12:38,639
there are two different ways that you

00:12:36,399 --> 00:12:40,959
could use this integration

00:12:38,639 --> 00:12:42,320
number one was you create a storage

00:12:40,959 --> 00:12:45,839
class and you point it

00:12:42,320 --> 00:12:47,600
at an existing sppm policy in vcenter so

00:12:45,839 --> 00:12:49,920
you can see that here

00:12:47,600 --> 00:12:51,760
whenever we create this storage class in

00:12:49,920 --> 00:12:53,600
kubernetes the storage policy name

00:12:51,760 --> 00:12:55,760
parameter

00:12:53,600 --> 00:12:57,279
actually points to the storage policy

00:12:55,760 --> 00:12:59,839
name in vcepter so

00:12:57,279 --> 00:13:01,120
you've pre-created this sppm policy and

00:12:59,839 --> 00:13:03,600
vcenter upfront

00:13:01,120 --> 00:13:05,200
and that gets mapped via the storage

00:13:03,600 --> 00:13:07,760
policy now

00:13:05,200 --> 00:13:09,680
with the vcp there was another option

00:13:07,760 --> 00:13:12,079
and you could actually specify

00:13:09,680 --> 00:13:14,639
storage policy attributes directly in

00:13:12,079 --> 00:13:16,399
the storage class so like you see here

00:13:14,639 --> 00:13:17,839
this is an example for vsan because it

00:13:16,399 --> 00:13:20,320
supports extra

00:13:17,839 --> 00:13:22,000
attributes like this and we can specify

00:13:20,320 --> 00:13:25,120
host failures to tolerate of one

00:13:22,000 --> 00:13:28,639
and disk stripes of two however what we

00:13:25,120 --> 00:13:31,120
realized was that as people used this

00:13:28,639 --> 00:13:33,440
and these policies weren't in vcenter it

00:13:31,120 --> 00:13:34,720
led to spbm sprawl it made it hard to

00:13:33,440 --> 00:13:37,360
track volumes

00:13:34,720 --> 00:13:39,440
so we have since decided to remove that

00:13:37,360 --> 00:13:41,199
functionality because truth be told

00:13:39,440 --> 00:13:43,600
most people just create the policy in

00:13:41,199 --> 00:13:44,880
vcenter and then use a storage class to

00:13:43,600 --> 00:13:48,160
point at it anyway

00:13:44,880 --> 00:13:51,440
so that is what we had with

00:13:48,160 --> 00:13:55,199
the vcp so what do we have now

00:13:51,440 --> 00:13:58,800
and how have things changed so um

00:13:55,199 --> 00:14:01,040
cns was introduced uh just as the

00:13:58,800 --> 00:14:02,720
auditory movement was getting underway

00:14:01,040 --> 00:14:06,000
with with kubernetes

00:14:02,720 --> 00:14:08,639
and going out of tree required us to

00:14:06,000 --> 00:14:09,920
develop a new storage plug-in anyway so

00:14:08,639 --> 00:14:12,160
we decided

00:14:09,920 --> 00:14:14,160
to just build from the ground up against

00:14:12,160 --> 00:14:18,880
the csi standard because that at least

00:14:14,160 --> 00:14:21,600
allowed for code portability to other um

00:14:18,880 --> 00:14:22,480
not other kubernetes distributions but

00:14:21,600 --> 00:14:24,320
other

00:14:22,480 --> 00:14:26,000
container orchestrators if we chose to

00:14:24,320 --> 00:14:29,199
do that in the future

00:14:26,000 --> 00:14:32,639
and it takes advantage of this new cns

00:14:29,199 --> 00:14:34,720
vsphere storage api to provide some new

00:14:32,639 --> 00:14:35,839
features that we didn't have in the vcp

00:14:34,720 --> 00:14:38,160
and cns

00:14:35,839 --> 00:14:39,040
quite simply just stands for cloud

00:14:38,160 --> 00:14:40,800
native storage

00:14:39,040 --> 00:14:43,440
and it's a feature that's just built

00:14:40,800 --> 00:14:45,120
into vsphere these days

00:14:43,440 --> 00:14:46,560
so if we look at this look at the

00:14:45,120 --> 00:14:48,800
architecture it's a little bit different

00:14:46,560 --> 00:14:50,880
to that of the vcp you might note

00:14:48,800 --> 00:14:52,320
so what we've got here is our cloud

00:14:50,880 --> 00:14:53,920
native storage control plane that's

00:14:52,320 --> 00:14:57,199
built into vcenter

00:14:53,920 --> 00:14:58,720
and we deploy a csi pod into kubernetes

00:14:57,199 --> 00:15:00,320
the nice thing about that is because

00:14:58,720 --> 00:15:01,199
it's just another workload running on

00:15:00,320 --> 00:15:03,440
kubernetes

00:15:01,199 --> 00:15:05,040
you can lifecycle your csi pods and

00:15:03,440 --> 00:15:07,199
upgrade your csi driver

00:15:05,040 --> 00:15:08,800
without having to rev your entire

00:15:07,199 --> 00:15:11,279
kubernetes cluster so if you're on

00:15:08,800 --> 00:15:13,680
kubernetes 1.16 or whatever

00:15:11,279 --> 00:15:16,240
you can upgrade your csi there's no need

00:15:13,680 --> 00:15:17,920
to upgrade the entire kubernetes cluster

00:15:16,240 --> 00:15:19,040
just to get new storage features so

00:15:17,920 --> 00:15:21,680
that's actually

00:15:19,040 --> 00:15:23,199
quite a nice life cycle management

00:15:21,680 --> 00:15:25,199
benefit there

00:15:23,199 --> 00:15:26,959
like i said it's built on the csi

00:15:25,199 --> 00:15:28,160
standard for container storage so it

00:15:26,959 --> 00:15:30,639
should be portable across

00:15:28,160 --> 00:15:32,800
other container orchestrators uh if we

00:15:30,639 --> 00:15:34,639
choose to entertain those in the future

00:15:32,800 --> 00:15:36,000
that said we really haven't had a lot of

00:15:34,639 --> 00:15:37,759
requests for other container

00:15:36,000 --> 00:15:38,320
orchestrators other than kubernetes

00:15:37,759 --> 00:15:41,600
anyway

00:15:38,320 --> 00:15:44,399
so it is what it is um

00:15:41,600 --> 00:15:46,000
as far as features it enables the same

00:15:44,399 --> 00:15:47,839
sort of policy driven

00:15:46,000 --> 00:15:49,120
uh dynamic provisioning that we got from

00:15:47,839 --> 00:15:51,279
the vcp

00:15:49,120 --> 00:15:53,680
same methodology for enabling it again

00:15:51,279 --> 00:15:54,560
it's the storage class to sppm policy

00:15:53,680 --> 00:15:56,639
mapping so that

00:15:54,560 --> 00:15:58,160
one-to-one mapping of of those two

00:15:56,639 --> 00:16:01,279
things so

00:15:58,160 --> 00:16:02,160
operationally very very similar um but

00:16:01,279 --> 00:16:04,160
it does have some

00:16:02,160 --> 00:16:05,519
nice little bits and pieces that are

00:16:04,160 --> 00:16:08,480
tied into

00:16:05,519 --> 00:16:10,240
the vsphere ui that you don't get with

00:16:08,480 --> 00:16:13,519
the vsphere cloud provider and

00:16:10,240 --> 00:16:18,160
this is just more reason why you might

00:16:13,519 --> 00:16:18,160
might want to use this above and beyond

00:16:18,240 --> 00:16:23,680
what we had with the vcp simply because

00:16:20,480 --> 00:16:26,959
it makes it much much simpler for the

00:16:23,680 --> 00:16:29,120
platform uh administrator

00:16:26,959 --> 00:16:30,720
to help you troubleshoot what's going on

00:16:29,120 --> 00:16:31,279
at the platform layer because we've got

00:16:30,720 --> 00:16:33,040
this

00:16:31,279 --> 00:16:34,839
traceability through the two layers and

00:16:33,040 --> 00:16:36,959
we'll see that just just in a second

00:16:34,839 --> 00:16:40,480
here

00:16:36,959 --> 00:16:43,120
so if we look at how this is manifested

00:16:40,480 --> 00:16:43,920
in vcenter we've got this new container

00:16:43,120 --> 00:16:45,759
storage

00:16:43,920 --> 00:16:47,360
view under the monitor tab and you can

00:16:45,759 --> 00:16:50,000
see we've got all of our persistent

00:16:47,360 --> 00:16:51,440
volume names here so all the pvc ids are

00:16:50,000 --> 00:16:53,600
imported

00:16:51,440 --> 00:16:55,759
additionally we have a metadata syncer

00:16:53,600 --> 00:16:59,360
that's deployed with the driver as well

00:16:55,759 --> 00:17:01,600
so that will sync all of the volume

00:16:59,360 --> 00:17:03,199
labels that are applied to the pvs and

00:17:01,600 --> 00:17:06,240
pvcs

00:17:03,199 --> 00:17:07,120
into the vsphere ui as well so if you

00:17:06,240 --> 00:17:09,679
need to

00:17:07,120 --> 00:17:11,520
filter by labels from kubernetes you can

00:17:09,679 --> 00:17:13,280
do that direct in the vsphere ui as well

00:17:11,520 --> 00:17:14,559
which is really nice

00:17:13,280 --> 00:17:17,120
and you can view some other bits and

00:17:14,559 --> 00:17:18,959
pieces so what storage policy is being

00:17:17,120 --> 00:17:20,720
used you know is it compliant is it

00:17:18,959 --> 00:17:22,559
accessible what size is it

00:17:20,720 --> 00:17:23,839
and you know what container cluster is

00:17:22,559 --> 00:17:26,240
it being used on so

00:17:23,839 --> 00:17:27,120
there's a whole bunch bunch of really

00:17:26,240 --> 00:17:29,919
really useful

00:17:27,120 --> 00:17:29,919
information here

00:17:31,360 --> 00:17:38,799
so as for should i be using

00:17:35,200 --> 00:17:41,039
entry or csi um when it comes to

00:17:38,799 --> 00:17:45,520
distributions you should probably

00:17:41,039 --> 00:17:48,640
use whatever your distribution

00:17:45,520 --> 00:17:49,360
distributor your vendor packages out of

00:17:48,640 --> 00:17:51,120
the box

00:17:49,360 --> 00:17:53,200
so for most of those that's that's the

00:17:51,120 --> 00:17:55,520
vcp anyway but

00:17:53,200 --> 00:17:58,240
a lot of them are being validated and

00:17:55,520 --> 00:18:01,520
have been validated with the csi driver

00:17:58,240 --> 00:18:03,440
and cns so i can name a couple here uh

00:18:01,520 --> 00:18:05,280
red hat open shift docker enterprise

00:18:03,440 --> 00:18:08,240
edition rancher

00:18:05,280 --> 00:18:10,080
google ansos gke on prem they've all

00:18:08,240 --> 00:18:10,960
been validated with the csi driver in

00:18:10,080 --> 00:18:13,919
cns

00:18:10,960 --> 00:18:15,120
but the long and short of it is if you

00:18:13,919 --> 00:18:17,840
are running

00:18:15,120 --> 00:18:19,840
uh the csi driver on a kubernetes

00:18:17,840 --> 00:18:20,640
distribution that is vanilla kubernetes

00:18:19,840 --> 00:18:23,360
bits

00:18:20,640 --> 00:18:24,080
you will get support from a vsphere as

00:18:23,360 --> 00:18:26,240
long as

00:18:24,080 --> 00:18:28,799
from from vmware as long as you have a

00:18:26,240 --> 00:18:31,360
valid vsphere license

00:18:28,799 --> 00:18:33,200
now there are some caveats as to why you

00:18:31,360 --> 00:18:35,600
might still want to use

00:18:33,200 --> 00:18:36,559
or maybe not want to use but have to use

00:18:35,600 --> 00:18:38,799
the entry

00:18:36,559 --> 00:18:40,000
storage provider and that would be if

00:18:38,799 --> 00:18:42,640
you're on an old

00:18:40,000 --> 00:18:45,440
version of kubernetes so pre 1.14 which

00:18:42,640 --> 00:18:48,160
is whenever the csi feature went ga

00:18:45,440 --> 00:18:49,919
um so if you're on an older version and

00:18:48,160 --> 00:18:52,640
then that and you can't upgrade

00:18:49,919 --> 00:18:54,880
then you're going to have to use the vcp

00:18:52,640 --> 00:18:58,000
if you're on an older vsphere release

00:18:54,880 --> 00:18:58,720
then 6.7 u3 and you can't upgrade as

00:18:58,000 --> 00:19:02,160
well because

00:18:58,720 --> 00:19:05,039
it requires the cns apis to be present

00:19:02,160 --> 00:19:06,240
in vcenter those were introduced in 6.7

00:19:05,039 --> 00:19:07,919
u3 so if you have an

00:19:06,240 --> 00:19:10,559
earlier version of vsphere and you can't

00:19:07,919 --> 00:19:12,240
upgrade for whatever reason

00:19:10,559 --> 00:19:14,080
then you'll have to use the vsphere

00:19:12,240 --> 00:19:16,640
cloud provider as well

00:19:14,080 --> 00:19:18,720
however if you can at all and those two

00:19:16,640 --> 00:19:21,280
cases don't apply to you

00:19:18,720 --> 00:19:23,200
use the csi it's got more features it's

00:19:21,280 --> 00:19:25,120
better supported we support read write

00:19:23,200 --> 00:19:27,760
once rewrite many volumes

00:19:25,120 --> 00:19:29,039
and a whole host of other csi features

00:19:27,760 --> 00:19:30,720
as well so

00:19:29,039 --> 00:19:32,880
it would be our opinion that you should

00:19:30,720 --> 00:19:35,679
be moving towards looking at the csi

00:19:32,880 --> 00:19:35,679
driver anyway

00:19:36,799 --> 00:19:40,880
as for some resources on how you would

00:19:40,080 --> 00:19:43,280
learn

00:19:40,880 --> 00:19:45,679
um how some of this stuff works uh the

00:19:43,280 --> 00:19:47,840
csi driver uses a different concept for

00:19:45,679 --> 00:19:49,840
creating disks called first class disks

00:19:47,840 --> 00:19:52,080
as opposed to just provisioning a vmdk

00:19:49,840 --> 00:19:54,400
with a vm attached

00:19:52,080 --> 00:19:56,080
and two of the best blogs that you can

00:19:54,400 --> 00:19:57,679
find on that are by cormac so you can

00:19:56,080 --> 00:20:00,080
see those here

00:19:57,679 --> 00:20:01,039
he's also got a very very useful blog on

00:20:00,080 --> 00:20:03,840
csi driver

00:20:01,039 --> 00:20:05,039
drive csi driver versions and their

00:20:03,840 --> 00:20:07,280
capabilities

00:20:05,039 --> 00:20:08,480
um i've since taken all that content and

00:20:07,280 --> 00:20:11,039
ported it into

00:20:08,480 --> 00:20:11,919
our github as well so if you look at our

00:20:11,039 --> 00:20:13,440
git book

00:20:11,919 --> 00:20:16,240
you'll get all that information there

00:20:13,440 --> 00:20:17,600
too and then there's some other great

00:20:16,240 --> 00:20:20,480
information out there

00:20:17,600 --> 00:20:22,799
by eric shanks robbie jerome and andrew

00:20:20,480 --> 00:20:24,720
sullivan so make sure to check out

00:20:22,799 --> 00:20:26,000
all of those bits and pieces on how to

00:20:24,720 --> 00:20:28,480
get it up and running

00:20:26,000 --> 00:20:30,799
and not to pick a particular kubernetes

00:20:28,480 --> 00:20:34,400
distribution or anything but

00:20:30,799 --> 00:20:36,000
if you want a rough guy because most

00:20:34,400 --> 00:20:37,360
distributions are exactly the same

00:20:36,000 --> 00:20:39,039
whenever it comes to deploying on

00:20:37,360 --> 00:20:40,640
vsphere anyway

00:20:39,039 --> 00:20:42,320
there is a good blog out there for

00:20:40,640 --> 00:20:44,480
deploying openshift 4.4

00:20:42,320 --> 00:20:48,240
on vmware vsphere 7. so go and check

00:20:44,480 --> 00:20:50,559
that one out as well

00:20:48,240 --> 00:20:51,520
sort of uh the the next question that

00:20:50,559 --> 00:20:54,240
comes up is

00:20:51,520 --> 00:20:55,919
so i've already got the vcp deployed

00:20:54,240 --> 00:20:56,400
i've already got some applications

00:20:55,919 --> 00:20:58,080
running

00:20:56,400 --> 00:20:59,520
and there's data in there and i would

00:20:58,080 --> 00:21:02,880
like to use the csi

00:20:59,520 --> 00:21:07,280
how do i do that so csi

00:21:02,880 --> 00:21:10,559
migration is being introduced as a

00:21:07,280 --> 00:21:13,919
gated feature in 1.19 the

00:21:10,559 --> 00:21:17,360
eventual idea is that all

00:21:13,919 --> 00:21:20,400
entry cloud providers will be deleted

00:21:17,360 --> 00:21:23,679
from the kubernetes code base so

00:21:20,400 --> 00:21:26,320
we are providing a path that will allow

00:21:23,679 --> 00:21:27,200
users to upgrade their volumes from the

00:21:26,320 --> 00:21:29,440
vcp

00:21:27,200 --> 00:21:31,200
and import them into the csi driver and

00:21:29,440 --> 00:21:34,640
we do that by creating a

00:21:31,200 --> 00:21:37,600
lightweight lightweight sort of um

00:21:34,640 --> 00:21:39,280
skeleton of the vsphere cloud provider

00:21:37,600 --> 00:21:41,840
if you want to think about it that way

00:21:39,280 --> 00:21:42,640
and we basically just proxy all of those

00:21:41,840 --> 00:21:46,080
commands

00:21:42,640 --> 00:21:47,919
into the csi driver itself

00:21:46,080 --> 00:21:49,919
and we do some upgrade procedures on the

00:21:47,919 --> 00:21:53,120
back end like we change it from just a

00:21:49,919 --> 00:21:54,880
plain vmdk to a first class disk

00:21:53,120 --> 00:21:57,520
so there's a whole bunch of stuff that

00:21:54,880 --> 00:22:00,559
happens in the background but basically

00:21:57,520 --> 00:22:04,000
we're looking to move this to

00:22:00,559 --> 00:22:05,840
beta in 1.19 but it'll require

00:22:04,000 --> 00:22:07,520
an upgrade of your vsphere environment

00:22:05,840 --> 00:22:08,559
to the next version that's available

00:22:07,520 --> 00:22:11,280
whatever that is

00:22:08,559 --> 00:22:12,000
so um this is something that we're

00:22:11,280 --> 00:22:13,919
working on

00:22:12,000 --> 00:22:15,360
it will be there before the cloud

00:22:13,919 --> 00:22:16,960
provider gets removed from core

00:22:15,360 --> 00:22:17,919
kubernetes because that's a requirement

00:22:16,960 --> 00:22:21,760
anyway

00:22:17,919 --> 00:22:24,240
um but it will require an upgrade of

00:22:21,760 --> 00:22:25,360
vsphere to the next version and it will

00:22:24,240 --> 00:22:28,559
require you to

00:22:25,360 --> 00:22:30,559
install kubernetes 1.19 or above

00:22:28,559 --> 00:22:31,679
and the latest version of the csi driver

00:22:30,559 --> 00:22:34,000
as well

00:22:31,679 --> 00:22:35,440
so the current goal is to be stable in

00:22:34,000 --> 00:22:37,200
1.20 but

00:22:35,440 --> 00:22:40,240
you know this is subject to change it

00:22:37,200 --> 00:22:41,760
was 1.16 you know many moons ago so

00:22:40,240 --> 00:22:43,600
this is something that keeps moving out

00:22:41,760 --> 00:22:44,640
a little bit but it is getting more and

00:22:43,600 --> 00:22:45,919
more

00:22:44,640 --> 00:22:47,760
serious there's a lot more development

00:22:45,919 --> 00:22:49,280
work being done on it now so we are

00:22:47,760 --> 00:22:50,640
approaching something that looks like

00:22:49,280 --> 00:22:52,799
it's going to be

00:22:50,640 --> 00:22:54,880
uh final in the next couple of releases

00:22:52,799 --> 00:22:57,360
of kubernetes

00:22:54,880 --> 00:22:59,360
so if you're using kubernetes on vsphere

00:22:57,360 --> 00:23:01,120
i encourage you to join the user group

00:22:59,360 --> 00:23:03,919
we have a meeting each month where we

00:23:01,120 --> 00:23:06,640
present tutorials and best practices

00:23:03,919 --> 00:23:08,080
the agenda is user driven so members are

00:23:06,640 --> 00:23:10,559
encouraged to nominate

00:23:08,080 --> 00:23:11,200
presentation and discussion topics

00:23:10,559 --> 00:23:14,559
including

00:23:11,200 --> 00:23:17,360
feature requests we have two user tech

00:23:14,559 --> 00:23:18,880
leads bryson shepard and joe cersei

00:23:17,360 --> 00:23:20,799
who couldn't be here today but they

00:23:18,880 --> 00:23:22,640
helped us get this group started

00:23:20,799 --> 00:23:24,480
and we're looking to grow this group

00:23:22,640 --> 00:23:26,320
with a diverse set of additional

00:23:24,480 --> 00:23:28,159
worldwide users

00:23:26,320 --> 00:23:30,080
the group is also running a slack

00:23:28,159 --> 00:23:31,200
channel which is a great place to ask

00:23:30,080 --> 00:23:33,600
questions

00:23:31,200 --> 00:23:34,880
the general kubernetes user channel

00:23:33,600 --> 00:23:37,679
might be better for

00:23:34,880 --> 00:23:41,120
general kubernetes questions but if you

00:23:37,679 --> 00:23:44,480
have a vsphere specific topic to discuss

00:23:41,120 --> 00:23:46,720
please go to the vmware users channel

00:23:44,480 --> 00:23:48,080
it's a great place to find other users

00:23:46,720 --> 00:23:52,159
and to reach

00:23:48,080 --> 00:23:54,400
code and documentation contributors

00:23:52,159 --> 00:23:57,279
so the next user group meeting is august

00:23:54,400 --> 00:23:59,360
6th in the north america time zone

00:23:57,279 --> 00:24:01,440
you can go to the kubernetes community

00:23:59,360 --> 00:24:03,600
calendar to get a conversion to

00:24:01,440 --> 00:24:04,799
your local time zone and to add it to

00:24:03,600 --> 00:24:07,360
your calendar

00:24:04,799 --> 00:24:09,600
use the link in this slide to do that

00:24:07,360 --> 00:24:12,640
you become a group member by joining

00:24:09,600 --> 00:24:16,720
the mailing list linked here and finally

00:24:12,640 --> 00:24:16,720
here's a link to the group slack channel

00:24:17,039 --> 00:24:21,440
miles and i are going to hang around for

00:24:18,960 --> 00:24:23,440
a q a

00:24:21,440 --> 00:24:24,640
and here's a link that will get you this

00:24:23,440 --> 00:24:27,520
deck

00:24:24,640 --> 00:24:28,080
also you'll see here our github ids

00:24:27,520 --> 00:24:30,840
thank you

00:24:28,080 --> 00:24:33,840
and i hope to see you in a future

00:24:30,840 --> 00:24:33,840
meeting

00:24:42,400 --> 00:24:45,520
thank you for your great talk steven and

00:24:44,880 --> 00:24:48,159
miles

00:24:45,520 --> 00:24:50,159
now we are moving to the qa session for

00:24:48,159 --> 00:24:50,640
the audience if you have any questions

00:24:50,159 --> 00:24:53,520
please

00:24:50,640 --> 00:24:54,320
reach them in the qa column and stephen

00:24:53,520 --> 00:24:55,760
and miles

00:24:54,320 --> 00:24:58,159
are here for you to answer your

00:24:55,760 --> 00:24:58,159
questions

00:24:58,960 --> 00:25:05,520
i i see there are already uh two

00:25:02,080 --> 00:25:08,000
questions uh queued up in the chat um

00:25:05,520 --> 00:25:09,600
so i think i'll take a shot at answering

00:25:08,000 --> 00:25:11,600
them in miles why don't you step

00:25:09,600 --> 00:25:13,760
into because i think the two of us put

00:25:11,600 --> 00:25:16,640
together probably can

00:25:13,760 --> 00:25:18,559
put together a bigger better answer so

00:25:16,640 --> 00:25:21,440
the first question i see

00:25:18,559 --> 00:25:23,919
is as an end user of vmware any

00:25:21,440 --> 00:25:27,440
recommendation for us to leverage

00:25:23,919 --> 00:25:31,200
kubernetes uh or going cloud native

00:25:27,440 --> 00:25:33,360
uh i also see that

00:25:31,200 --> 00:25:35,760
alice gin would like to answer this

00:25:33,360 --> 00:25:37,760
question live so alice if

00:25:35,760 --> 00:25:39,039
you're online why don't you go go ahead

00:25:37,760 --> 00:25:43,200
and

00:25:39,039 --> 00:25:43,600
answer if you like oh hi steven uh alice

00:25:43,200 --> 00:25:46,640
jing

00:25:43,600 --> 00:25:48,960
is just there to be monitoring um

00:25:46,640 --> 00:25:50,159
oh okay so you're sorry i must answer

00:25:48,960 --> 00:25:53,840
the question by yourselves

00:25:50,159 --> 00:25:56,559
thank you all right so uh the

00:25:53,840 --> 00:25:58,640
you know for leveraging kubernetes uh

00:25:56,559 --> 00:26:01,039
the first step of course is to

00:25:58,640 --> 00:26:02,000
learn kubernetes learn what it can do

00:26:01,039 --> 00:26:05,360
and what it can't do

00:26:02,000 --> 00:26:08,880
you know it it's become really popular

00:26:05,360 --> 00:26:10,320
but it isn't a tool that does a hundred

00:26:08,880 --> 00:26:12,559
percent of things

00:26:10,320 --> 00:26:14,240
but there are very many use cases for

00:26:12,559 --> 00:26:17,200
which it is a great tool

00:26:14,240 --> 00:26:18,400
and i think the best way to learn it is

00:26:17,200 --> 00:26:21,120
to start in

00:26:18,400 --> 00:26:22,640
and use it because unlike the situation

00:26:21,120 --> 00:26:25,279
of five years ago

00:26:22,640 --> 00:26:26,400
it's no longer difficult to under you

00:26:25,279 --> 00:26:29,440
know to install

00:26:26,400 --> 00:26:30,320
and get going uh if you're already an

00:26:29,440 --> 00:26:32,320
end user

00:26:30,320 --> 00:26:34,559
of vmware presumably you have

00:26:32,320 --> 00:26:36,960
infrastructure to stand it up on

00:26:34,559 --> 00:26:39,520
but there are smaller versions that are

00:26:36,960 --> 00:26:42,159
appropriate for learning only if not

00:26:39,520 --> 00:26:45,360
even if not for production that could be

00:26:42,159 --> 00:26:48,000
run even on a personal laptop

00:26:45,360 --> 00:26:48,720
there are a lot of training materials

00:26:48,000 --> 00:26:51,520
out there

00:26:48,720 --> 00:26:53,520
on the generic kubernetes and i would

00:26:51,520 --> 00:26:54,080
start with the generic kubernetes

00:26:53,520 --> 00:26:57,360
because

00:26:54,080 --> 00:26:59,520
the fact is by design kubernetes is not

00:26:57,360 --> 00:27:02,000
a whole lot different on vsphere than it

00:26:59,520 --> 00:27:04,960
is when running on a public cloud

00:27:02,000 --> 00:27:06,240
uh or other platform the whole purpose

00:27:04,960 --> 00:27:08,559
of kubernetes

00:27:06,240 --> 00:27:09,360
uh and what cloud native means is that

00:27:08,559 --> 00:27:13,360
you can run an

00:27:09,360 --> 00:27:15,039
app anywhere and if things work properly

00:27:13,360 --> 00:27:16,480
that app really shouldn't be able to

00:27:15,039 --> 00:27:18,640
tell where it's running

00:27:16,480 --> 00:27:20,080
and it should be quite portable across

00:27:18,640 --> 00:27:22,080
all the platforms

00:27:20,080 --> 00:27:24,960
it's only when you get to that later

00:27:22,080 --> 00:27:27,520
stage that is approaching operations

00:27:24,960 --> 00:27:28,000
where things start to become a little

00:27:27,520 --> 00:27:30,240
more

00:27:28,000 --> 00:27:31,760
platform specific where you're dealing

00:27:30,240 --> 00:27:33,679
with things like

00:27:31,760 --> 00:27:36,960
deploying kubernetes in a way that's

00:27:33,679 --> 00:27:39,679
very resilient and has high availability

00:27:36,960 --> 00:27:42,000
then it pays to get into the the details

00:27:39,679 --> 00:27:43,360
of best practices for running on your

00:27:42,000 --> 00:27:47,120
platform

00:27:43,360 --> 00:27:47,520
there uh you can go to sessions like

00:27:47,120 --> 00:27:49,520
this

00:27:47,520 --> 00:27:52,080
and there are other ones that got

00:27:49,520 --> 00:27:54,480
pre-recorded in kubernetes go

00:27:52,080 --> 00:27:55,279
in kubecon events going back a couple of

00:27:54,480 --> 00:27:57,440
years

00:27:55,279 --> 00:27:59,600
and the sessions were labeled vsphere

00:27:57,440 --> 00:28:01,600
cloud provider rather than user group

00:27:59,600 --> 00:28:04,320
because this user group didn't exist

00:28:01,600 --> 00:28:06,640
back then and then of course join our

00:28:04,320 --> 00:28:07,440
user group meetings they occur once a

00:28:06,640 --> 00:28:09,520
month

00:28:07,440 --> 00:28:12,240
we're bringing in speakers to give

00:28:09,520 --> 00:28:15,039
presentations ask user questions

00:28:12,240 --> 00:28:16,000
and generally talks on best practices

00:28:15,039 --> 00:28:18,640
plus roadmap

00:28:16,000 --> 00:28:19,760
items uh miles would you like to add

00:28:18,640 --> 00:28:22,960
anything

00:28:19,760 --> 00:28:26,159
yeah um so i think the

00:28:22,960 --> 00:28:26,960
the way that these um questions are sort

00:28:26,159 --> 00:28:28,399
of phrased because

00:28:26,960 --> 00:28:30,159
they're both by the same person here

00:28:28,399 --> 00:28:30,880
i've noticed the next one is what is the

00:28:30,159 --> 00:28:34,399
best path

00:28:30,880 --> 00:28:34,720
to take my itt to make my i.t team ready

00:28:34,399 --> 00:28:37,919
for

00:28:34,720 --> 00:28:40,320
vmware and kate's um it

00:28:37,919 --> 00:28:41,279
it sort of uh alludes to the fact that

00:28:40,320 --> 00:28:43,279
kate's is an

00:28:41,279 --> 00:28:44,799
inevitability and you know maybe that's

00:28:43,279 --> 00:28:46,080
the case and maybe that's not the case

00:28:44,799 --> 00:28:46,799
it depends on your application like

00:28:46,080 --> 00:28:49,039
steve said

00:28:46,799 --> 00:28:50,720
it doesn't do 100 of things but it does

00:28:49,039 --> 00:28:52,399
a lot of things quite well and it is

00:28:50,720 --> 00:28:56,240
very well suited to the things that it

00:28:52,399 --> 00:28:59,520
is suited for um when it comes to

00:28:56,240 --> 00:29:00,559
uh using kubernetes or going cloud

00:28:59,520 --> 00:29:04,720
native

00:29:00,559 --> 00:29:07,039
um cloud native to me is

00:29:04,720 --> 00:29:08,640
the application takes over all of the

00:29:07,039 --> 00:29:12,080
resiliency

00:29:08,640 --> 00:29:13,840
and underlying infrastructure tasks

00:29:12,080 --> 00:29:16,080
from the infrastructure itself and sort

00:29:13,840 --> 00:29:18,960
of abstracts that away

00:29:16,080 --> 00:29:21,360
so where typically you might have a

00:29:18,960 --> 00:29:22,640
microsoft sql server that is replicated

00:29:21,360 --> 00:29:25,679
or something like that

00:29:22,640 --> 00:29:28,000
you would use a database like cassandra

00:29:25,679 --> 00:29:30,000
or something like a key value store or

00:29:28,000 --> 00:29:31,279
kafka that does the data replication at

00:29:30,000 --> 00:29:33,279
a higher level

00:29:31,279 --> 00:29:35,039
rather than relying at the underlying

00:29:33,279 --> 00:29:36,880
relying on the underlying infrastructure

00:29:35,039 --> 00:29:38,320
to do replication so cloud native is

00:29:36,880 --> 00:29:40,799
more about

00:29:38,320 --> 00:29:41,600
making the more the application more

00:29:40,799 --> 00:29:44,159
resilient

00:29:41,600 --> 00:29:46,399
in itself and making it less dependent

00:29:44,159 --> 00:29:48,640
on the platform and like steve said

00:29:46,399 --> 00:29:50,480
kubernetes provides that abstraction

00:29:48,640 --> 00:29:51,760
layer that sort of makes the underlying

00:29:50,480 --> 00:29:53,840
platform almost

00:29:51,760 --> 00:29:55,120
uh generic to most of those applications

00:29:53,840 --> 00:29:56,960
the experience you know

00:29:55,120 --> 00:29:58,159
on vsphere or on a public cloud or

00:29:56,960 --> 00:30:01,440
whatever should be

00:29:58,159 --> 00:30:03,360
largely the same given uh that the

00:30:01,440 --> 00:30:06,000
kubernetes apis are

00:30:03,360 --> 00:30:07,679
identical everywhere but obviously you

00:30:06,000 --> 00:30:09,520
know once you move into production

00:30:07,679 --> 00:30:11,120
and you start to operationalize that

00:30:09,520 --> 00:30:13,279
there are some slight differences from

00:30:11,120 --> 00:30:14,159
cloud to cloud and from vsphere to other

00:30:13,279 --> 00:30:16,480
clouds and

00:30:14,159 --> 00:30:18,640
things like that but uh on the whole

00:30:16,480 --> 00:30:20,240
your your application should be portable

00:30:18,640 --> 00:30:23,520
from cloud to cloud

00:30:20,240 --> 00:30:26,960
now when it comes to making your it

00:30:23,520 --> 00:30:27,840
teams ready for kubernetes and cloud

00:30:26,960 --> 00:30:30,240
native

00:30:27,840 --> 00:30:30,960
um i would say the first thing that you

00:30:30,240 --> 00:30:33,279
should do is

00:30:30,960 --> 00:30:34,240
look at your current applications and

00:30:33,279 --> 00:30:36,240
are you

00:30:34,240 --> 00:30:37,440
interested in taking those current

00:30:36,240 --> 00:30:39,679
applications

00:30:37,440 --> 00:30:41,600
and porting them to a new platform so

00:30:39,679 --> 00:30:42,559
you're going to move them from vms into

00:30:41,600 --> 00:30:43,760
containers

00:30:42,559 --> 00:30:45,440
and once you've moved them into

00:30:43,760 --> 00:30:47,600
containers are you going to rewrite

00:30:45,440 --> 00:30:49,679
parts of those applications to use maybe

00:30:47,600 --> 00:30:52,080
different databases or whatever

00:30:49,679 --> 00:30:53,120
that can run on top of kubernetes and in

00:30:52,080 --> 00:30:57,039
a more sort of

00:30:53,120 --> 00:30:57,919
a generic fashion um so to me really the

00:30:57,039 --> 00:30:59,600
first step is

00:30:57,919 --> 00:31:01,840
engaging with the developers that you

00:30:59,600 --> 00:31:04,720
have in-house or or such

00:31:01,840 --> 00:31:05,360
um or even if you don't develop software

00:31:04,720 --> 00:31:08,640
in-house

00:31:05,360 --> 00:31:09,200
you know um having a kate's platform

00:31:08,640 --> 00:31:12,240
that you can

00:31:09,200 --> 00:31:14,240
easily deploy and use is very

00:31:12,240 --> 00:31:15,279
important because there are applications

00:31:14,240 --> 00:31:16,399
that we're seeing that are being

00:31:15,279 --> 00:31:18,080
deployed now that

00:31:16,399 --> 00:31:19,519
will only run on kubernetes so

00:31:18,080 --> 00:31:20,960
especially if you don't write

00:31:19,519 --> 00:31:22,960
applications in-house

00:31:20,960 --> 00:31:25,200
having some kind of distribution that

00:31:22,960 --> 00:31:27,200
does all the hard kubernetes

00:31:25,200 --> 00:31:29,039
lifecycle management stuff for you and

00:31:27,200 --> 00:31:32,320
configuration for your platform

00:31:29,039 --> 00:31:33,840
would be really advantageous so engage

00:31:32,320 --> 00:31:35,120
with your developers

00:31:33,840 --> 00:31:37,279
figure out what they're doing how

00:31:35,120 --> 00:31:40,399
they're using containers and

00:31:37,279 --> 00:31:43,360
maybe how they could look at including

00:31:40,399 --> 00:31:44,960
kubernetes and continuous integration

00:31:43,360 --> 00:31:48,159
into their workflows

00:31:44,960 --> 00:31:49,919
and how that might

00:31:48,159 --> 00:31:51,600
influence how you're going to deploy

00:31:49,919 --> 00:31:53,120
applications in the future

00:31:51,600 --> 00:31:54,640
and then take a look at your

00:31:53,120 --> 00:31:56,320
infrastructure you know what versions of

00:31:54,640 --> 00:31:59,039
vsphere are you running

00:31:56,320 --> 00:32:00,799
um does it need to be updated to run

00:31:59,039 --> 00:32:02,240
these new versions of kubernetes to get

00:32:00,799 --> 00:32:03,120
the features that you need and that kind

00:32:02,240 --> 00:32:04,960
of thing

00:32:03,120 --> 00:32:07,039
um but there are tons of resources out

00:32:04,960 --> 00:32:09,279
there for generic kubernetes there's the

00:32:07,039 --> 00:32:10,640
um kubernetes dot academy i think it's

00:32:09,279 --> 00:32:14,240
called steve is that correct

00:32:10,640 --> 00:32:17,760
yes it is uh it's cube academy

00:32:14,240 --> 00:32:18,720
cubic actually yeah another thing i want

00:32:17,760 --> 00:32:20,960
to point out is

00:32:18,720 --> 00:32:22,320
it's not an all or nothing so a good way

00:32:20,960 --> 00:32:25,840
to get started

00:32:22,320 --> 00:32:28,240
is to just i cherry pick the uh

00:32:25,840 --> 00:32:30,880
the easy things to move over and it's

00:32:28,240 --> 00:32:34,000
entirely possible to keep a hybrid

00:32:30,880 --> 00:32:35,360
operation going where the bulk of your

00:32:34,000 --> 00:32:37,840
legacy doesn't move

00:32:35,360 --> 00:32:40,000
and it's really the new applications

00:32:37,840 --> 00:32:43,200
that you're moving over to kubernetes

00:32:40,000 --> 00:32:45,760
and to the extent you can the easy

00:32:43,200 --> 00:32:47,039
low-lying fruit is to go after stateless

00:32:45,760 --> 00:32:49,919
applications first

00:32:47,039 --> 00:32:50,960
maybe instead of moving your databases

00:32:49,919 --> 00:32:53,919
to the new

00:32:50,960 --> 00:32:54,559
cluster-aware model that miles alluded

00:32:53,919 --> 00:32:58,000
to

00:32:54,559 --> 00:33:01,120
you could actually keep your state like

00:32:58,000 --> 00:33:02,399
uh traditional transactional sql

00:33:01,120 --> 00:33:06,559
databases

00:33:02,399 --> 00:33:08,559
over on in vms at the beginning

00:33:06,559 --> 00:33:10,880
but move the things the apps that

00:33:08,559 --> 00:33:13,039
consume them over to kubernetes

00:33:10,880 --> 00:33:15,200
and have a hybrid and there are tools

00:33:13,039 --> 00:33:16,720
that might even be available

00:33:15,200 --> 00:33:19,039
they really technically are not

00:33:16,720 --> 00:33:22,000
kubernetes they're in the collateral

00:33:19,039 --> 00:33:22,480
cloud native landscape uh tool chain

00:33:22,000 --> 00:33:25,360
things

00:33:22,480 --> 00:33:26,320
i'm talking about things like service

00:33:25,360 --> 00:33:29,440
meshes

00:33:26,320 --> 00:33:30,880
that are capable at least in some of the

00:33:29,440 --> 00:33:33,519
versions of the meshes

00:33:30,880 --> 00:33:34,559
of integrating legacy vms with new

00:33:33,519 --> 00:33:37,679
kubernetes

00:33:34,559 --> 00:33:41,120
applications and services

00:33:37,679 --> 00:33:41,440
uh don't plan on this being a big switch

00:33:41,120 --> 00:33:44,320
of

00:33:41,440 --> 00:33:46,320
everything moves overnight it doesn't

00:33:44,320 --> 00:33:47,760
have to be that way and it shouldn't for

00:33:46,320 --> 00:33:49,679
most people

00:33:47,760 --> 00:33:51,679
yeah i think it's an evolutionary thing

00:33:49,679 --> 00:33:52,000
you start with the easy stuff like steve

00:33:51,679 --> 00:33:53,760
said

00:33:52,000 --> 00:33:55,600
move over the stateless bits and pieces

00:33:53,760 --> 00:33:57,919
those are the easy things to do so

00:33:55,600 --> 00:33:59,519
stuff like your web servers uh you know

00:33:57,919 --> 00:34:01,760
nginx apache

00:33:59,519 --> 00:34:03,360
app servers like tomcat those are prime

00:34:01,760 --> 00:34:04,240
candidates they're very very easy to

00:34:03,360 --> 00:34:06,960
move over

00:34:04,240 --> 00:34:07,519
and they can still talk to external vms

00:34:06,960 --> 00:34:09,040
you know they

00:34:07,519 --> 00:34:11,280
everything doesn't have to run in

00:34:09,040 --> 00:34:13,359
kubernetes so if you do have existing

00:34:11,280 --> 00:34:16,000
big databases like oracle or

00:34:13,359 --> 00:34:17,599
ms sql or you know whatever you can

00:34:16,000 --> 00:34:19,599
still use those and you can still have

00:34:17,599 --> 00:34:21,679
your applications talk back to them

00:34:19,599 --> 00:34:23,440
and maybe like a good sort of proof of

00:34:21,679 --> 00:34:24,960
concept is if you're building new

00:34:23,440 --> 00:34:27,119
functionality into your existing

00:34:24,960 --> 00:34:29,040
applications

00:34:27,119 --> 00:34:30,159
just build that new functionality as

00:34:29,040 --> 00:34:32,639
like a stateless

00:34:30,159 --> 00:34:34,399
dumb front end deploy that into

00:34:32,639 --> 00:34:36,879
kubernetes and have it talk to your

00:34:34,399 --> 00:34:38,879
existing backend that runs inside vms

00:34:36,879 --> 00:34:40,159
and use that as like the first step so

00:34:38,879 --> 00:34:41,760
that you get your feet wet you

00:34:40,159 --> 00:34:44,079
understand how the operational models

00:34:41,760 --> 00:34:46,079
work you understand how to deploy things

00:34:44,079 --> 00:34:48,159
and then maybe look at refactoring some

00:34:46,079 --> 00:34:50,079
of your other bits and pieces

00:34:48,159 --> 00:34:52,159
into kubernetes over time but i would

00:34:50,079 --> 00:34:53,839
imagine for for most enterprises that

00:34:52,159 --> 00:34:56,560
are running these kinds of things

00:34:53,839 --> 00:34:57,119
it'll be a multi-year transitionary

00:34:56,560 --> 00:34:58,560
project

00:34:57,119 --> 00:35:00,240
to really move everything into

00:34:58,560 --> 00:35:02,160
kubernetes like steve said

00:35:00,240 --> 00:35:04,000
it's not overnight this is a

00:35:02,160 --> 00:35:06,560
transformational thing that will take

00:35:04,000 --> 00:35:09,119
some time

00:35:06,560 --> 00:35:11,119
and there are a lot of training

00:35:09,119 --> 00:35:13,119
materials there are even certifications

00:35:11,119 --> 00:35:15,599
to get your staff trained

00:35:13,119 --> 00:35:17,760
but there are also collateral tools that

00:35:15,599 --> 00:35:20,720
help your staff kind of avoid

00:35:17,760 --> 00:35:22,480
becoming experts from top to bottom in

00:35:20,720 --> 00:35:24,240
kubernetes i'm talking about things

00:35:22,480 --> 00:35:25,440
where they can continue to use the

00:35:24,240 --> 00:35:27,280
existing

00:35:25,440 --> 00:35:29,839
languages and tools they're familiar

00:35:27,280 --> 00:35:31,040
with and have some kind of external

00:35:29,839 --> 00:35:33,520
build tool

00:35:31,040 --> 00:35:34,480
assist them in packaging those things

00:35:33,520 --> 00:35:37,839
into

00:35:34,480 --> 00:35:39,440
uh docker containers uh i think for

00:35:37,839 --> 00:35:42,240
troubleshooting and debug

00:35:39,440 --> 00:35:42,640
they still have to learn what's going on

00:35:42,240 --> 00:35:45,520
at

00:35:42,640 --> 00:35:47,119
from a high level view but you don't

00:35:45,520 --> 00:35:49,359
have the scenario where you have to

00:35:47,119 --> 00:35:50,400
train a hundred percent of the existing

00:35:49,359 --> 00:35:53,520
development staff

00:35:50,400 --> 00:35:57,359
on the new tools from top to bottom

00:35:53,520 --> 00:36:00,079
at a microscopic level um so

00:35:57,359 --> 00:36:01,599
go out there and you'll i think you'll

00:36:00,079 --> 00:36:03,760
it's fair to say that

00:36:01,599 --> 00:36:06,320
in many categories you can pick your

00:36:03,760 --> 00:36:09,280
language and you won't be the first one

00:36:06,320 --> 00:36:10,480
to do that move over to kubernetes uh

00:36:09,280 --> 00:36:13,760
and you'll find that there

00:36:10,480 --> 00:36:14,800
are tools available to assist you in

00:36:13,760 --> 00:36:19,280
doing that

00:36:14,800 --> 00:36:19,280
in a ci cd environment

00:36:22,560 --> 00:36:26,400
so i think that those are the only

00:36:24,800 --> 00:36:29,920
questions in chat if

00:36:26,400 --> 00:36:30,320
anybody has uh any additional questions

00:36:29,920 --> 00:36:33,520
uh

00:36:30,320 --> 00:36:35,200
now's a now's the time uh go type them

00:36:33,520 --> 00:36:36,480
in the zoom chat or

00:36:35,200 --> 00:36:38,320
uh i don't know if there are other

00:36:36,480 --> 00:36:40,560
forums that uh

00:36:38,320 --> 00:36:42,079
people are online not that to submit

00:36:40,560 --> 00:36:44,640
questions

00:36:42,079 --> 00:36:45,680
i would also say if if you haven't got a

00:36:44,640 --> 00:36:48,560
question right now

00:36:45,680 --> 00:36:50,480
go to the kubernetes slack and join the

00:36:48,560 --> 00:36:52,320
user group vmware channel and you can

00:36:50,480 --> 00:36:54,560
always ask questions there and steve

00:36:52,320 --> 00:36:56,079
myself and a bunch of other vmware

00:36:54,560 --> 00:36:59,200
engineers and people will be in there to

00:36:56,079 --> 00:36:59,200
answer your questions too

00:37:00,640 --> 00:37:04,079
yeah thank you for the questions and

00:37:02,480 --> 00:37:09,839
thank you for the great talk

00:37:04,079 --> 00:37:09,839

YouTube URL: https://www.youtube.com/watch?v=q21PDsdR2HA


