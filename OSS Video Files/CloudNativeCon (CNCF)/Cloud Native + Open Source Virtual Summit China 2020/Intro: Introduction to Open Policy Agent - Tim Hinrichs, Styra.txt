Title: Intro: Introduction to Open Policy Agent - Tim Hinrichs, Styra
Publication date: 2020-09-11
Playlist: Cloud Native + Open Source Virtual Summit China 2020
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Intro: Introduction to Open Policy Agent - Tim Hinrichs, Styra 

This session introduces the Open Policy Agent (OPA) project. OPA is a general-purpose policy engine used by hundreds of companies for policy enforcement across the stack. Use cases include compliance & admission control for Kubernetes, configuration validation for CI/CD systems, API authorization for microservices, data filtering for apps, and more. Attendees can expect to learn about OPA’s core features as well as integrations like Gatekeeper and Conftest. This is an excellent session to attend if you are new the cloud native ecosystem or want to get started with OPA. 

https://sched.co/cpAb
Captions: 
	00:00:01,280 --> 00:00:04,960
okay hi all my name's tim henricks

00:00:03,360 --> 00:00:06,879
and in this session we're going to be

00:00:04,960 --> 00:00:08,720
covering an introduction to the open

00:00:06,879 --> 00:00:10,400
policy agent project

00:00:08,720 --> 00:00:11,840
first of all i thought we'd start off a

00:00:10,400 --> 00:00:13,120
little bit with a little bit about me my

00:00:11,840 --> 00:00:16,240
name's tim hendrix like i said

00:00:13,120 --> 00:00:18,080
i am the co-founder and cto at styra

00:00:16,240 --> 00:00:19,680
i'm also one of the co-creators of the

00:00:18,080 --> 00:00:21,760
open policy agent project

00:00:19,680 --> 00:00:23,920
feel free to go ahead and hit me up with

00:00:21,760 --> 00:00:26,880
questions either on slack or twitter

00:00:23,920 --> 00:00:26,880
wherever you can get a hold of me

00:00:27,119 --> 00:00:31,519
so when we started oppa we really

00:00:29,679 --> 00:00:33,520
realized that there was a very clear

00:00:31,519 --> 00:00:35,200
problem out in the in the world and that

00:00:33,520 --> 00:00:36,800
was that there were all kinds of

00:00:35,200 --> 00:00:37,440
different pieces of software that you

00:00:36,800 --> 00:00:39,360
see

00:00:37,440 --> 00:00:40,879
shown on this slide and all those

00:00:39,360 --> 00:00:42,480
different pieces of software and the

00:00:40,879 --> 00:00:44,559
cloud native ecosystem

00:00:42,480 --> 00:00:45,680
had their own way of solving the policy

00:00:44,559 --> 00:00:48,239
problem so

00:00:45,680 --> 00:00:49,840
any time someone tried to deploy a

00:00:48,239 --> 00:00:51,520
resource under kubernetes there's a

00:00:49,840 --> 00:00:52,239
policy or an authorization problem that

00:00:51,520 --> 00:00:55,199
needs to be

00:00:52,239 --> 00:00:56,640
decided on every time an api call gets

00:00:55,199 --> 00:00:58,000
made on a microservice there's an

00:00:56,640 --> 00:00:58,640
authorization problem that needs to be

00:00:58,000 --> 00:01:01,120
solved

00:00:58,640 --> 00:01:03,199
every time a person or a machine runs a

00:01:01,120 --> 00:01:05,680
query on a database or on a

00:01:03,199 --> 00:01:06,799
or on kafka or any other sort of

00:01:05,680 --> 00:01:09,360
messaging

00:01:06,799 --> 00:01:10,720
messaging system there's a policy an

00:01:09,360 --> 00:01:11,360
authorization problem that needs to be

00:01:10,720 --> 00:01:13,280
solved

00:01:11,360 --> 00:01:15,119
every time somebody tries to spin up or

00:01:13,280 --> 00:01:17,280
or update or delete resources on the

00:01:15,119 --> 00:01:18,560
public cloud there's an authorization

00:01:17,280 --> 00:01:21,360
problem that needs to be solved every

00:01:18,560 --> 00:01:21,920
time someone uh tries to ssh to a linux

00:01:21,360 --> 00:01:24,080
server

00:01:21,920 --> 00:01:25,360
or or spin up a docker container there's

00:01:24,080 --> 00:01:27,200
an authorization problem that needs to

00:01:25,360 --> 00:01:29,759
be solved and the same is true of ci cd

00:01:27,200 --> 00:01:31,119
anytime someone's trying to merge code

00:01:29,759 --> 00:01:34,320
or deploy

00:01:31,119 --> 00:01:36,000
resources through a ci cd pipeline

00:01:34,320 --> 00:01:38,159
an authorization policy problem needs to

00:01:36,000 --> 00:01:39,360
be solved the challenge here is that

00:01:38,159 --> 00:01:40,960
each and every one

00:01:39,360 --> 00:01:42,880
of these different pieces of software

00:01:40,960 --> 00:01:45,920
have their own way of solving that

00:01:42,880 --> 00:01:47,840
policy that authorization problem

00:01:45,920 --> 00:01:49,040
and what that means from a user's point

00:01:47,840 --> 00:01:52,320
of view is that even though

00:01:49,040 --> 00:01:53,360
i am perhaps tasked i'm handed an email

00:01:52,320 --> 00:01:56,640
or a wiki

00:01:53,360 --> 00:01:59,280
or a pdf that describes in english

00:01:56,640 --> 00:01:59,840
uh what the authorization policy should

00:01:59,280 --> 00:02:01,280
be

00:01:59,840 --> 00:02:03,600
for one or many of these different

00:02:01,280 --> 00:02:04,640
pieces of software i need to learn a

00:02:03,600 --> 00:02:07,040
different api

00:02:04,640 --> 00:02:08,080
a different gui a different even model

00:02:07,040 --> 00:02:11,520
for thinking about

00:02:08,080 --> 00:02:13,040
how you enforce um authorization

00:02:11,520 --> 00:02:16,640
policies across

00:02:13,040 --> 00:02:18,720
all of these different uh technologies

00:02:16,640 --> 00:02:20,080
and so when we started opal we said well

00:02:18,720 --> 00:02:22,080
that's that's

00:02:20,080 --> 00:02:24,720
not a great state of affairs what would

00:02:22,080 --> 00:02:27,200
be great is if we had a unified way

00:02:24,720 --> 00:02:29,120
of enforcing authorization more

00:02:27,200 --> 00:02:31,440
generally policy across

00:02:29,120 --> 00:02:33,280
all of these different cloud-native

00:02:31,440 --> 00:02:35,599
pieces of software and so that's

00:02:33,280 --> 00:02:36,640
what we designed open to do is provide

00:02:35,599 --> 00:02:39,599
that unified

00:02:36,640 --> 00:02:41,360
policy solution in particular the way we

00:02:39,599 --> 00:02:43,280
talk about opa is that it is a

00:02:41,360 --> 00:02:45,599
general purpose policy engine which

00:02:43,280 --> 00:02:47,440
means that you can use it

00:02:45,599 --> 00:02:48,800
to make policy decisions for all the

00:02:47,440 --> 00:02:50,400
different pieces of software that you

00:02:48,800 --> 00:02:52,720
see here on this slide

00:02:50,400 --> 00:02:54,400
now i'll go into this a little bit in a

00:02:52,720 --> 00:02:57,120
bit more detail later but

00:02:54,400 --> 00:02:59,200
um but for now keep in mind that a

00:02:57,120 --> 00:02:59,680
couple of the most popular use cases for

00:02:59,200 --> 00:03:01,680
opa

00:02:59,680 --> 00:03:03,440
are are shown here on the slide in fact

00:03:01,680 --> 00:03:05,599
all of the use cases here

00:03:03,440 --> 00:03:07,200
for oppa are used by someone in

00:03:05,599 --> 00:03:08,400
production today so this is not a

00:03:07,200 --> 00:03:10,879
theoretical

00:03:08,400 --> 00:03:12,159
exercise in enumerating potential use

00:03:10,879 --> 00:03:14,560
cases for opa rather

00:03:12,159 --> 00:03:15,280
these are production use cases for opa

00:03:14,560 --> 00:03:17,280
today

00:03:15,280 --> 00:03:18,560
so one of the most popular and we'll

00:03:17,280 --> 00:03:20,720
talk more about it later is this

00:03:18,560 --> 00:03:21,519
kubernetes admission control use case so

00:03:20,720 --> 00:03:23,519
every time

00:03:21,519 --> 00:03:26,080
a user whether it's a person or a

00:03:23,519 --> 00:03:27,920
machine tries to

00:03:26,080 --> 00:03:29,840
create update or delete a resource on

00:03:27,920 --> 00:03:32,159
kubernetes

00:03:29,840 --> 00:03:33,040
opa is often used to make a decision as

00:03:32,159 --> 00:03:35,280
to whether or not

00:03:33,040 --> 00:03:37,680
that resource is safe to deploy

00:03:35,280 --> 00:03:39,200
similarly in the microservice category

00:03:37,680 --> 00:03:40,799
every time a microservice receives an

00:03:39,200 --> 00:03:42,560
api call it's got to decide is this

00:03:40,799 --> 00:03:46,400
authorized or not that's another

00:03:42,560 --> 00:03:48,560
very popular use case for opa

00:03:46,400 --> 00:03:49,599
now um one of the things that we'll get

00:03:48,560 --> 00:03:51,840
into a little bit later

00:03:49,599 --> 00:03:53,439
is that architecturally the way that you

00:03:51,840 --> 00:03:55,519
think about opa is that it really is

00:03:53,439 --> 00:03:57,760
designed to run sort of as shown here in

00:03:55,519 --> 00:03:59,920
this picture it's designed to run

00:03:57,760 --> 00:04:02,159
on the same server as whatever software

00:03:59,920 --> 00:04:03,920
needs authorization decisions so

00:04:02,159 --> 00:04:06,480
in the kubernetes use case that would

00:04:03,920 --> 00:04:08,239
mean you'd run a handful of opas on each

00:04:06,480 --> 00:04:10,000
and every kubernetes cluster

00:04:08,239 --> 00:04:11,280
in the microservice use case that would

00:04:10,000 --> 00:04:14,159
mean that you would run

00:04:11,280 --> 00:04:15,599
one opa on the same server as each and

00:04:14,159 --> 00:04:17,919
every micro service

00:04:15,599 --> 00:04:20,079
that you have running so if you have 500

00:04:17,919 --> 00:04:22,479
uh instances of microservices you

00:04:20,079 --> 00:04:23,360
you will likely end up with 500

00:04:22,479 --> 00:04:25,680
instances

00:04:23,360 --> 00:04:27,280
of open the reason that we do that the

00:04:25,680 --> 00:04:28,400
reason opel was designed architecturally

00:04:27,280 --> 00:04:30,560
that way is to provide

00:04:28,400 --> 00:04:32,560
high availability and high performance

00:04:30,560 --> 00:04:34,000
nearly the same availability and

00:04:32,560 --> 00:04:37,759
performance that you would get

00:04:34,000 --> 00:04:39,520
if you left the policy like hard-coded

00:04:37,759 --> 00:04:40,960
into that microservice or into that

00:04:39,520 --> 00:04:43,840
kubernetes cluster

00:04:40,960 --> 00:04:46,479
but obviously oppa's job is to decouple

00:04:43,840 --> 00:04:47,840
policy to pull policy out of

00:04:46,479 --> 00:04:50,080
that microservice or out of that

00:04:47,840 --> 00:04:50,960
kubernetes cluster so that you can

00:04:50,080 --> 00:04:53,360
manage it

00:04:50,960 --> 00:04:54,639
separately you you have a unified tool

00:04:53,360 --> 00:04:57,919
set to

00:04:54,639 --> 00:05:00,720
to manage policy and to write policy

00:04:57,919 --> 00:05:01,840
all right now we do on the opal website

00:05:00,720 --> 00:05:03,840
uh if you're looking for different

00:05:01,840 --> 00:05:05,520
integrations have an integration index

00:05:03,840 --> 00:05:08,000
so definitely check that out

00:05:05,520 --> 00:05:09,039
uh and um and let us know if there are

00:05:08,000 --> 00:05:11,840
things that are missing or things that

00:05:09,039 --> 00:05:11,840
you'd like to see there

00:05:12,000 --> 00:05:15,759
oppa is a completely if you don't know

00:05:14,080 --> 00:05:17,680
this already and a completely open

00:05:15,759 --> 00:05:18,240
source cloud native computing foundation

00:05:17,680 --> 00:05:19,759
project

00:05:18,240 --> 00:05:21,440
every single line of code that's ever

00:05:19,759 --> 00:05:22,840
been written for opa has been done in a

00:05:21,440 --> 00:05:25,360
public github

00:05:22,840 --> 00:05:26,320
repository we found it at styra back in

00:05:25,360 --> 00:05:29,919
00:05:26,320 --> 00:05:32,080
we donated it to the cncf uh in 2018

00:05:29,919 --> 00:05:33,840
about two years later and about a year

00:05:32,080 --> 00:05:35,680
after that in 2019 it became an

00:05:33,840 --> 00:05:37,759
incubating project

00:05:35,680 --> 00:05:39,039
the devstats tool which is really handy

00:05:37,759 --> 00:05:41,600
from the cncf

00:05:39,039 --> 00:05:42,479
uh says that at the time i looked at

00:05:41,600 --> 00:05:44,080
this up last

00:05:42,479 --> 00:05:45,759
week there were 30 plus companies

00:05:44,080 --> 00:05:47,919
contributing and over a hundred

00:05:45,759 --> 00:05:50,000
developers

00:05:47,919 --> 00:05:51,600
if you if you want to check out uh some

00:05:50,000 --> 00:05:54,160
of the contributors

00:05:51,600 --> 00:05:55,840
just like every cncf project oppa does

00:05:54,160 --> 00:05:57,440
have a con

00:05:55,840 --> 00:05:59,440
a contribution guide and i should say an

00:05:57,440 --> 00:06:01,360
adopters list as well

00:05:59,440 --> 00:06:03,199
to get a sense as to some of the other

00:06:01,360 --> 00:06:06,639
users it's always great to hear how

00:06:03,199 --> 00:06:08,720
users are actually using oppa

00:06:06,639 --> 00:06:09,840
i would definitely point you to the

00:06:08,720 --> 00:06:13,360
kubecon us

00:06:09,840 --> 00:06:14,720
back in 2019 there were a bunch of

00:06:13,360 --> 00:06:18,240
sessions in the standard

00:06:14,720 --> 00:06:19,759
kubecon track you see those listed here

00:06:18,240 --> 00:06:22,479
but what i'll also call your attention

00:06:19,759 --> 00:06:24,479
to is uh the opa summit so this was

00:06:22,479 --> 00:06:25,919
about a half day where we had a bunch of

00:06:24,479 --> 00:06:27,360
users from opa

00:06:25,919 --> 00:06:28,479
come and talk about how they were using

00:06:27,360 --> 00:06:30,319
it and this covered a bunch of the

00:06:28,479 --> 00:06:32,840
different use cases the application use

00:06:30,319 --> 00:06:35,120
case kubernetes use case microservices

00:06:32,840 --> 00:06:36,880
kafka

00:06:35,120 --> 00:06:38,479
and i think those are the those are the

00:06:36,880 --> 00:06:40,639
the most of them

00:06:38,479 --> 00:06:42,160
but definitely check those out um there

00:06:40,639 --> 00:06:44,000
are definitely good

00:06:42,160 --> 00:06:46,479
lists of these of these sessions that

00:06:44,000 --> 00:06:46,479
you can find

00:06:46,639 --> 00:06:50,240
now okay what is oppa exactly i

00:06:48,639 --> 00:06:52,479
mentioned it a little bit ago that it's

00:06:50,240 --> 00:06:54,319
a general purpose policy engine but

00:06:52,479 --> 00:06:55,680
and what does that mean really well so

00:06:54,319 --> 00:06:57,919
the way that opel works

00:06:55,680 --> 00:06:59,440
is pretty much the same for all of those

00:06:57,919 --> 00:07:01,199
different use cases for all those

00:06:59,440 --> 00:07:02,720
different software systems we saw in the

00:07:01,199 --> 00:07:04,880
last couple of slides

00:07:02,720 --> 00:07:05,919
in terms of how that software system

00:07:04,880 --> 00:07:07,919
works with opa

00:07:05,919 --> 00:07:09,280
so that what we know is that we start

00:07:07,919 --> 00:07:11,599
with some service that service could be

00:07:09,280 --> 00:07:13,919
the kubernetes api server it could be

00:07:11,599 --> 00:07:15,360
a micro service or a network proxy a

00:07:13,919 --> 00:07:16,160
service mesh a database it doesn't

00:07:15,360 --> 00:07:18,080
really matter

00:07:16,160 --> 00:07:20,080
that service at some point in its life

00:07:18,080 --> 00:07:22,080
cycle decides that it needs

00:07:20,080 --> 00:07:24,160
a policy or an authorization decision

00:07:22,080 --> 00:07:27,360
and so it sends a policy query

00:07:24,160 --> 00:07:29,759
over to opa oppa's job is to return a

00:07:27,360 --> 00:07:32,240
policy decision quickly to that service

00:07:29,759 --> 00:07:34,080
it is the services responsibility to

00:07:32,240 --> 00:07:37,280
enforce that policy

00:07:34,080 --> 00:07:39,440
it is oppa's responsibility to make

00:07:37,280 --> 00:07:41,759
that policy decision and so that's how

00:07:39,440 --> 00:07:43,039
that separation of responsibility really

00:07:41,759 --> 00:07:44,400
lies

00:07:43,039 --> 00:07:46,319
now there are a couple of important

00:07:44,400 --> 00:07:47,440
things about that about that fairly

00:07:46,319 --> 00:07:49,199
simple interaction

00:07:47,440 --> 00:07:51,520
one of which is the policy query that

00:07:49,199 --> 00:07:53,759
the service hands over to oppa

00:07:51,520 --> 00:07:55,039
this policy query as it's noted here can

00:07:53,759 --> 00:07:58,800
really be any

00:07:55,039 --> 00:08:00,720
json value so in an http api

00:07:58,800 --> 00:08:02,960
authorization use case that service

00:08:00,720 --> 00:08:04,400
might send over a user a method and a

00:08:02,960 --> 00:08:07,680
path

00:08:04,400 --> 00:08:09,360
in the kubernetes example the service

00:08:07,680 --> 00:08:09,680
the kubernetes api server might hand

00:08:09,360 --> 00:08:12,960
over

00:08:09,680 --> 00:08:13,759
100 or 200 or 500 lines of yaml or json

00:08:12,960 --> 00:08:16,080
that represents

00:08:13,759 --> 00:08:17,759
whatever pod ingress or whatever other

00:08:16,080 --> 00:08:18,560
resource the user is trying to create on

00:08:17,759 --> 00:08:20,879
the cluster

00:08:18,560 --> 00:08:24,000
so in both those cases what opa sees is

00:08:20,879 --> 00:08:26,160
just some json data that comes across

00:08:24,000 --> 00:08:27,120
and it's oppa's responsibility to make

00:08:26,160 --> 00:08:29,440
the decision

00:08:27,120 --> 00:08:31,199
the fact that the policy queries is

00:08:29,440 --> 00:08:33,760
itself just json data

00:08:31,199 --> 00:08:34,880
it's not something that oppa understands

00:08:33,760 --> 00:08:36,560
what uh what

00:08:34,880 --> 00:08:39,200
in the real world that json data

00:08:36,560 --> 00:08:40,240
represents is why opa can be used so

00:08:39,200 --> 00:08:42,800
easily across

00:08:40,240 --> 00:08:45,040
all of these different use cases so oppa

00:08:42,800 --> 00:08:47,519
has not one line of code about what a

00:08:45,040 --> 00:08:49,360
kubernetes pod or an ingress means or an

00:08:47,519 --> 00:08:51,680
http method

00:08:49,360 --> 00:08:53,519
or a kafka queue not none of those are

00:08:51,680 --> 00:08:54,800
things that opa itself knows about so

00:08:53,519 --> 00:08:57,920
then the question becomes

00:08:54,800 --> 00:08:59,600
how does this all work well when i as a

00:08:57,920 --> 00:09:02,800
person i'm writing a policy

00:08:59,600 --> 00:09:05,279
i know what a http method a

00:09:02,800 --> 00:09:05,839
path and a user represent in the real

00:09:05,279 --> 00:09:07,519
world

00:09:05,839 --> 00:09:09,760
i know what a kubernetes pot or

00:09:07,519 --> 00:09:12,399
kubernetes ingress or a cathode q mean

00:09:09,760 --> 00:09:13,360
in the real world and so i as a policy

00:09:12,399 --> 00:09:15,519
author

00:09:13,360 --> 00:09:17,200
can go ahead and write whatever policies

00:09:15,519 --> 00:09:19,760
is is correct

00:09:17,200 --> 00:09:20,320
for making this decision and so it is

00:09:19,760 --> 00:09:22,160
really a

00:09:20,320 --> 00:09:23,519
contract between the service and the

00:09:22,160 --> 00:09:26,640
policy author that

00:09:23,519 --> 00:09:28,720
at the end of the day uh assigns a

00:09:26,640 --> 00:09:31,040
semantics to that policy query that's

00:09:28,720 --> 00:09:32,480
handed from the service to oppa

00:09:31,040 --> 00:09:33,600
all right so that's one thing that a lot

00:09:32,480 --> 00:09:35,279
of people like about opa is that they

00:09:33,600 --> 00:09:36,959
get to be really creative

00:09:35,279 --> 00:09:39,120
about how they do integrations between

00:09:36,959 --> 00:09:42,000
the service and opa because as long as

00:09:39,120 --> 00:09:43,600
they can take some json data and hand it

00:09:42,000 --> 00:09:46,480
over to oppa then then they can ask

00:09:43,600 --> 00:09:46,959
oppa for a policy decision what that

00:09:46,480 --> 00:09:48,560
means

00:09:46,959 --> 00:09:50,080
though is that there's quite a bit of

00:09:48,560 --> 00:09:52,080
reliance on the policy

00:09:50,080 --> 00:09:53,920
language to be quite flexible and

00:09:52,080 --> 00:09:55,200
powerful in terms of the kinds of

00:09:53,920 --> 00:09:58,160
policies that it can write

00:09:55,200 --> 00:10:00,000
and express so that ray goes what we

00:09:58,160 --> 00:10:02,320
call opus policy language

00:10:00,000 --> 00:10:04,079
rhaego was designed to be good at

00:10:02,320 --> 00:10:06,720
processing and making policy decisions

00:10:04,079 --> 00:10:07,519
about arbitrary json data in particular

00:10:06,720 --> 00:10:09,200
there are

00:10:07,519 --> 00:10:10,959
three things i like to call out about

00:10:09,200 --> 00:10:13,600
what rego allows you to do

00:10:10,959 --> 00:10:14,240
the first of which is or maybe i should

00:10:13,600 --> 00:10:16,880
say

00:10:14,240 --> 00:10:18,000
all of which are are easily exemplified

00:10:16,880 --> 00:10:19,519
if we think about the

00:10:18,000 --> 00:10:20,959
kinds of policies that you need to write

00:10:19,519 --> 00:10:22,720
in the kubernetes use case so in the

00:10:20,959 --> 00:10:25,120
kubernetes use case imagine that

00:10:22,720 --> 00:10:27,760
the api server is handed over to oppa

00:10:25,120 --> 00:10:29,519
100 or 200 lines of json representing

00:10:27,760 --> 00:10:32,079
let's say a new pod that a

00:10:29,519 --> 00:10:33,519
user is trying to create well in order

00:10:32,079 --> 00:10:34,640
to write policy and let's say the

00:10:33,519 --> 00:10:37,279
concrete policy

00:10:34,640 --> 00:10:37,920
we want to write ensures that all images

00:10:37,279 --> 00:10:40,399
in that

00:10:37,920 --> 00:10:42,720
pod come from a trusted registry all

00:10:40,399 --> 00:10:44,560
right now in order to write that policy

00:10:42,720 --> 00:10:46,880
within the rego language you need to be

00:10:44,560 --> 00:10:48,640
able to dig down through that deeply

00:10:46,880 --> 00:10:50,720
nested json data

00:10:48,640 --> 00:10:53,680
that represents a pod you need to be

00:10:50,720 --> 00:10:55,440
able to find that containers array

00:10:53,680 --> 00:10:56,959
you need to be able to iterate over all

00:10:55,440 --> 00:10:57,920
the elements of the container's array

00:10:56,959 --> 00:11:00,399
and for each one

00:10:57,920 --> 00:11:02,320
extract the image field and then for

00:11:00,399 --> 00:11:04,880
that image field you need to be able to

00:11:02,320 --> 00:11:06,720
check whether or not that image name

00:11:04,880 --> 00:11:08,800
comes from a trusted registry or not

00:11:06,720 --> 00:11:10,720
through some kind of string manipulation

00:11:08,800 --> 00:11:12,240
so all of that functionality is

00:11:10,720 --> 00:11:12,720
functionality that's built into radio

00:11:12,240 --> 00:11:15,519
and that

00:11:12,720 --> 00:11:16,880
rego handles pretty easily um and so

00:11:15,519 --> 00:11:17,839
that's another thing that a lot of

00:11:16,880 --> 00:11:19,839
people

00:11:17,839 --> 00:11:22,240
end up using pretty heavily obviously

00:11:19,839 --> 00:11:24,079
with oppa is is that rich flexible

00:11:22,240 --> 00:11:26,880
policy language that allows them to

00:11:24,079 --> 00:11:28,880
write policy of arbitrary json

00:11:26,880 --> 00:11:30,560
the third thing i'll call out about this

00:11:28,880 --> 00:11:32,720
picture is that on the right hand side

00:11:30,560 --> 00:11:35,680
there's that data in that json

00:11:32,720 --> 00:11:37,680
the other input that opa uses in order

00:11:35,680 --> 00:11:39,839
to make a policy decision besides the

00:11:37,680 --> 00:11:42,000
policy the rego itself

00:11:39,839 --> 00:11:43,680
is this what we like to call external

00:11:42,000 --> 00:11:45,279
data so one of the things that opel was

00:11:43,680 --> 00:11:47,519
designed for from the beginning

00:11:45,279 --> 00:11:50,160
was to enable people to write what we

00:11:47,519 --> 00:11:52,000
like to call context aware policies

00:11:50,160 --> 00:11:53,839
so context or policies to us just mean

00:11:52,000 --> 00:11:56,959
policies that are aware of the world in

00:11:53,839 --> 00:11:58,320
which they're being evaluated

00:11:56,959 --> 00:12:00,480
my favorite example here is let's

00:11:58,320 --> 00:12:02,480
imagine that you wanted to

00:12:00,480 --> 00:12:03,920
write a policy that allowed only people

00:12:02,480 --> 00:12:05,440
who are on call to make

00:12:03,920 --> 00:12:07,200
changes to a production kubernetes

00:12:05,440 --> 00:12:09,360
cluster

00:12:07,200 --> 00:12:10,800
to query production databases into ssh

00:12:09,360 --> 00:12:14,160
into production servers

00:12:10,800 --> 00:12:15,360
well who's on call um kubernetes doesn't

00:12:14,160 --> 00:12:17,279
know the servers don't know the

00:12:15,360 --> 00:12:20,000
databases don't know who's on call

00:12:17,279 --> 00:12:22,320
even the the identity store whether it's

00:12:20,000 --> 00:12:24,959
active directory or ldap or your

00:12:22,320 --> 00:12:26,079
whoever your identity provider is they

00:12:24,959 --> 00:12:27,920
don't know either

00:12:26,079 --> 00:12:29,279
so who's on call is usually information

00:12:27,920 --> 00:12:30,240
that's stored in a third party like

00:12:29,279 --> 00:12:32,160
pagerduty

00:12:30,240 --> 00:12:34,480
and so what you can do with opa opal

00:12:32,160 --> 00:12:35,360
allows you to inject arbitrary external

00:12:34,480 --> 00:12:37,519
data

00:12:35,360 --> 00:12:39,120
into it so that you can write policies

00:12:37,519 --> 00:12:40,639
using that data so in this case what you

00:12:39,120 --> 00:12:41,600
could do is you could pull that data out

00:12:40,639 --> 00:12:44,720
of pagerduty

00:12:41,600 --> 00:12:45,760
inject it that list of who is on call

00:12:44,720 --> 00:12:47,600
into opa

00:12:45,760 --> 00:12:50,000
and now it just looks like more json

00:12:47,600 --> 00:12:50,480
data to open so as a policy author now

00:12:50,000 --> 00:12:52,079
you

00:12:50,480 --> 00:12:54,000
can go ahead and write exactly that

00:12:52,079 --> 00:12:55,040
policy that ensures that only on-call

00:12:54,000 --> 00:12:57,920
people have those

00:12:55,040 --> 00:12:58,959
elevated rights all right so that's

00:12:57,920 --> 00:13:00,320
another thing that people really like

00:12:58,959 --> 00:13:02,079
about opa is being able to inject

00:13:00,320 --> 00:13:03,839
arbitrary data to make decisions

00:13:02,079 --> 00:13:05,600
the last thing that i'll call out here

00:13:03,839 --> 00:13:07,279
is this policy decision there's a note

00:13:05,600 --> 00:13:09,680
here that says the policy decision can

00:13:07,279 --> 00:13:11,839
be any arbitrary json value

00:13:09,680 --> 00:13:13,680
and this speaks to the fact that oppa is

00:13:11,839 --> 00:13:15,920
a general purpose policy engine

00:13:13,680 --> 00:13:17,279
meaning that yes you can and many people

00:13:15,920 --> 00:13:19,120
do use opa to make

00:13:17,279 --> 00:13:21,279
authorization decisions meaning allow

00:13:19,120 --> 00:13:23,680
deny boolean true false

00:13:21,279 --> 00:13:25,600
one or zero decisions but you can also

00:13:23,680 --> 00:13:27,279
use opa to make policy decisions

00:13:25,600 --> 00:13:29,600
that are far richer than that you could

00:13:27,279 --> 00:13:31,200
use open to write a policy that makes a

00:13:29,600 --> 00:13:34,240
decision which is a rate limit

00:13:31,200 --> 00:13:35,440
returning a number you could return uh

00:13:34,240 --> 00:13:38,320
you could write a policy that

00:13:35,440 --> 00:13:40,240
ensures that that that says where which

00:13:38,320 --> 00:13:42,240
clusters to deploy an application to

00:13:40,240 --> 00:13:44,320
for that the answer might be an array of

00:13:42,240 --> 00:13:46,160
strings you can even

00:13:44,320 --> 00:13:48,079
have opa make policy decisions that are

00:13:46,160 --> 00:13:50,560
represented by arbitrarily deeply

00:13:48,079 --> 00:13:53,600
structured json objects

00:13:50,560 --> 00:13:54,399
and in fact that kind of of of return

00:13:53,600 --> 00:13:55,920
value is often

00:13:54,399 --> 00:13:57,920
quite useful because in addition to

00:13:55,920 --> 00:13:59,279
maybe even in the authorization setting

00:13:57,920 --> 00:14:01,120
in addition to just returning a lower

00:13:59,279 --> 00:14:03,279
deny you might also want to return let's

00:14:01,120 --> 00:14:05,760
say an array of error messages to

00:14:03,279 --> 00:14:07,680
to send to the user so that hopefully

00:14:05,760 --> 00:14:09,680
gives you a good sense as to

00:14:07,680 --> 00:14:11,519
what opa is capable of doing and how it

00:14:09,680 --> 00:14:12,480
interacts with and how it integrates

00:14:11,519 --> 00:14:14,880
with

00:14:12,480 --> 00:14:15,519
all of these external systems in order

00:14:14,880 --> 00:14:17,040
to make

00:14:15,519 --> 00:14:18,880
policy decisions and at the end of the

00:14:17,040 --> 00:14:19,839
day opa's job is to decouple those

00:14:18,880 --> 00:14:21,199
policies

00:14:19,839 --> 00:14:22,880
from the underlying service so that you

00:14:21,199 --> 00:14:24,560
can manage them all

00:14:22,880 --> 00:14:27,839
in a single language and use a single

00:14:24,560 --> 00:14:27,839
tool set across all of them

00:14:28,000 --> 00:14:31,600
let's look at a couple of concrete

00:14:29,440 --> 00:14:33,839
examples quickly so

00:14:31,600 --> 00:14:35,839
one of which is one of the most popular

00:14:33,839 --> 00:14:37,600
applications of opa and that is micro

00:14:35,839 --> 00:14:39,760
service api authorization

00:14:37,600 --> 00:14:40,639
so the way this works is pictured here

00:14:39,760 --> 00:14:42,240
um

00:14:40,639 --> 00:14:45,199
what we have here on the right hand side

00:14:42,240 --> 00:14:46,720
is really this micro service

00:14:45,199 --> 00:14:49,040
and one of the common questions that we

00:14:46,720 --> 00:14:50,639
get is well do i have to modify my

00:14:49,040 --> 00:14:52,079
microservice to talk to oppa

00:14:50,639 --> 00:14:54,560
and in this picture we show quite

00:14:52,079 --> 00:14:56,480
clearly that the answer to that is no

00:14:54,560 --> 00:14:58,000
the answer to that is no if you use a

00:14:56,480 --> 00:15:00,480
network proxy which is what we

00:14:58,000 --> 00:15:02,880
often see people do when they're using

00:15:00,480 --> 00:15:04,160
opa for microservice api authorization

00:15:02,880 --> 00:15:05,600
the idea behind the network proxy

00:15:04,160 --> 00:15:07,519
integration is that you use a network

00:15:05,600 --> 00:15:08,959
proxy like envoy link or decon

00:15:07,519 --> 00:15:10,720
apogee or any of the others that you

00:15:08,959 --> 00:15:13,199
might care to use

00:15:10,720 --> 00:15:15,199
and you run that uh network proxy on the

00:15:13,199 --> 00:15:17,600
same server as that microservice

00:15:15,199 --> 00:15:18,320
and route all network traffic through

00:15:17,600 --> 00:15:20,639
that

00:15:18,320 --> 00:15:22,720
network proxy then what you do is you

00:15:20,639 --> 00:15:24,800
integrate opa with the network proxy so

00:15:22,720 --> 00:15:27,440
that each and every time a request comes

00:15:24,800 --> 00:15:28,800
in to the network proxy intended to go

00:15:27,440 --> 00:15:31,040
to the microservice

00:15:28,800 --> 00:15:32,480
the network proxy can send that request

00:15:31,040 --> 00:15:35,680
over to opa ask is this

00:15:32,480 --> 00:15:37,440
authorized or not if oppa responds and

00:15:35,680 --> 00:15:38,880
says yes that's authorized in the

00:15:37,440 --> 00:15:40,560
network proxy can go ahead and forward

00:15:38,880 --> 00:15:43,920
it to the microservice as usual

00:15:40,560 --> 00:15:46,079
but if opus says that that api call is

00:15:43,920 --> 00:15:48,320
not authorized the network proxy can

00:15:46,079 --> 00:15:50,959
return a 403 drop it do whatever you've

00:15:48,320 --> 00:15:52,639
configured the proxy to do

00:15:50,959 --> 00:15:54,399
so this is pretty much a network proxy

00:15:52,639 --> 00:15:56,079
integration we see this being used

00:15:54,399 --> 00:15:58,800
pretty often and as you see

00:15:56,079 --> 00:16:00,240
it matches pretty closely with the with

00:15:58,800 --> 00:16:02,480
the description that we had on the last

00:16:00,240 --> 00:16:04,160
slide

00:16:02,480 --> 00:16:05,759
let's look at another example

00:16:04,160 --> 00:16:07,360
integration this time it's with the

00:16:05,759 --> 00:16:09,600
kubernetes api server

00:16:07,360 --> 00:16:12,079
the popular integration here is using

00:16:09,600 --> 00:16:14,480
opa to make policy decisions about

00:16:12,079 --> 00:16:16,079
uh as part of the admission control

00:16:14,480 --> 00:16:16,800
process that kubernetes supports

00:16:16,079 --> 00:16:18,160
natively

00:16:16,800 --> 00:16:20,240
so the way this works is that each and

00:16:18,160 --> 00:16:22,320
every time a user tries to create update

00:16:20,240 --> 00:16:23,279
well each every time the user tries to

00:16:22,320 --> 00:16:24,800
make a change

00:16:23,279 --> 00:16:27,199
to the the resources running on the

00:16:24,800 --> 00:16:28,959
kubernetes cluster that request

00:16:27,199 --> 00:16:30,959
goes through the kube api server and the

00:16:28,959 --> 00:16:32,480
cube api server has a whole pipeline of

00:16:30,959 --> 00:16:34,160
changes of

00:16:32,480 --> 00:16:36,000
checks that it goes through the first of

00:16:34,160 --> 00:16:37,600
which is authentication who are you

00:16:36,000 --> 00:16:39,440
the second of which is authorization

00:16:37,600 --> 00:16:41,920
this would be basically

00:16:39,440 --> 00:16:43,199
arbok so you know if it's me trying to

00:16:41,920 --> 00:16:45,920
make the change then can

00:16:43,199 --> 00:16:47,519
tim is tim authorized to create a pod at

00:16:45,920 --> 00:16:49,759
all

00:16:47,519 --> 00:16:51,680
on this cluster or not once it makes it

00:16:49,759 --> 00:16:53,120
through authorization on rboc then it

00:16:51,680 --> 00:16:54,880
goes to admission control the mission

00:16:53,120 --> 00:16:55,920
control is run on every create update

00:16:54,880 --> 00:16:57,759
and delete

00:16:55,920 --> 00:16:59,839
and what happens is that this admission

00:16:57,759 --> 00:17:02,320
control hands over that entire

00:16:59,839 --> 00:17:04,079
100 200 lines of json or yaml that

00:17:02,320 --> 00:17:06,559
describes that new pod or that new

00:17:04,079 --> 00:17:09,280
ingress or that updated pot or ingress

00:17:06,559 --> 00:17:12,880
and it sends that entire

00:17:09,280 --> 00:17:14,079
chunk of json over to oppa and asks oppa

00:17:12,880 --> 00:17:16,480
for decision is this

00:17:14,079 --> 00:17:18,079
resource safe or not the nice thing

00:17:16,480 --> 00:17:19,280
about this particular integration

00:17:18,079 --> 00:17:21,199
oh and that integration works the same

00:17:19,280 --> 00:17:22,480
way we've gone through the nice thing

00:17:21,199 --> 00:17:23,360
about this integration and the same is

00:17:22,480 --> 00:17:25,360
through the last

00:17:23,360 --> 00:17:26,799
uh integration is that it is a native

00:17:25,360 --> 00:17:28,720
integration so there's no way to

00:17:26,799 --> 00:17:30,240
circumvent the api server with

00:17:28,720 --> 00:17:31,440
kubernetes and therefore there is no way

00:17:30,240 --> 00:17:34,000
to circumvent

00:17:31,440 --> 00:17:34,960
the the oppa checks that are that are

00:17:34,000 --> 00:17:37,520
put in place

00:17:34,960 --> 00:17:39,039
here either so that's pretty powerful

00:17:37,520 --> 00:17:40,720
this use case has become

00:17:39,039 --> 00:17:42,240
so popular in fact that it has a

00:17:40,720 --> 00:17:44,000
dedicated sub project

00:17:42,240 --> 00:17:45,440
called opa gatekeeper i definitely

00:17:44,000 --> 00:17:47,520
recommend you check this out

00:17:45,440 --> 00:17:50,799
if you're looking to put policies in

00:17:47,520 --> 00:17:50,799
place for admission control

00:17:51,679 --> 00:17:56,400
the third use case that we'll go through

00:17:53,360 --> 00:17:57,520
briefly is in the ci cd pipeline

00:17:56,400 --> 00:17:59,600
here the idea is that you've got

00:17:57,520 --> 00:18:01,039
pipelines set up and what you can do is

00:17:59,600 --> 00:18:03,039
use opa to test

00:18:01,039 --> 00:18:04,480
those configuration files those yaml

00:18:03,039 --> 00:18:07,679
files or those

00:18:04,480 --> 00:18:10,559
or those ini files in

00:18:07,679 --> 00:18:11,280
the pipeline before they get merged and

00:18:10,559 --> 00:18:13,280
so

00:18:11,280 --> 00:18:15,600
this is a pretty powerful use case as

00:18:13,280 --> 00:18:16,960
well again the integration with opal

00:18:15,600 --> 00:18:20,640
works just the same

00:18:16,960 --> 00:18:22,480
as all the others and so

00:18:20,640 --> 00:18:24,400
this use case has become so popular as

00:18:22,480 --> 00:18:25,600
well that there is now also a dedicated

00:18:24,400 --> 00:18:27,360
sub project to it

00:18:25,600 --> 00:18:29,280
called opa conf test so if you're

00:18:27,360 --> 00:18:31,440
interested in running

00:18:29,280 --> 00:18:33,200
policies over configuration files either

00:18:31,440 --> 00:18:34,480
in a cicd pipeline or maybe even on

00:18:33,200 --> 00:18:38,640
developer laptops

00:18:34,480 --> 00:18:38,640
i also recommend you check this one out

00:18:39,039 --> 00:18:42,720
all right so we've gone over how you

00:18:40,880 --> 00:18:44,080
integrate opa and kind of what opa is

00:18:42,720 --> 00:18:45,600
well what other features

00:18:44,080 --> 00:18:47,600
does opa have that's what we're going to

00:18:45,600 --> 00:18:48,400
cover here so the first of which we've

00:18:47,600 --> 00:18:50,160
already talked about

00:18:48,400 --> 00:18:51,840
it does have that declarative policy

00:18:50,160 --> 00:18:53,840
language that is quite powerful

00:18:51,840 --> 00:18:55,360
we've already also talked about a couple

00:18:53,840 --> 00:18:57,200
of the language features

00:18:55,360 --> 00:18:58,400
i didn't mention this yet but opa does

00:18:57,200 --> 00:19:00,640
have over

00:18:58,400 --> 00:19:01,840
50 built-ins functions those built-in

00:19:00,640 --> 00:19:03,440
functions allow you to do things like

00:19:01,840 --> 00:19:06,559
string manipulation

00:19:03,440 --> 00:19:08,320
time of day json web

00:19:06,559 --> 00:19:10,799
token manipulation you can verify and

00:19:08,320 --> 00:19:12,480
decode jots right there in the opal

00:19:10,799 --> 00:19:15,600
policies you can do cedar

00:19:12,480 --> 00:19:17,440
arithmetic as well we've already talked

00:19:15,600 --> 00:19:18,559
about context-to-word policies a pager

00:19:17,440 --> 00:19:20,799
duty example

00:19:18,559 --> 00:19:22,400
there's also composition and delegation

00:19:20,799 --> 00:19:23,760
one of the nice things about oppa was

00:19:22,400 --> 00:19:26,000
that the language was designed to allow

00:19:23,760 --> 00:19:28,080
you to break your policies up into

00:19:26,000 --> 00:19:29,679
one or more modules each module just

00:19:28,080 --> 00:19:31,280
think of it as a name space

00:19:29,679 --> 00:19:32,799
like you would in a in a traditional

00:19:31,280 --> 00:19:34,720
programming language

00:19:32,799 --> 00:19:36,799
but what that also allows you to do is

00:19:34,720 --> 00:19:38,799
also delegate decisions to different

00:19:36,799 --> 00:19:39,440
policies based on whatever conditions

00:19:38,799 --> 00:19:41,840
you care

00:19:39,440 --> 00:19:43,600
care about so my the example i always

00:19:41,840 --> 00:19:46,720
use is imagine you had a compute team

00:19:43,600 --> 00:19:47,760
writes a policy for compute resources

00:19:46,720 --> 00:19:49,120
you have a networking team

00:19:47,760 --> 00:19:51,200
writing a policy for networking

00:19:49,120 --> 00:19:54,480
resources then anytime a

00:19:51,200 --> 00:19:56,160
a a request comes in uh you can write a

00:19:54,480 --> 00:19:57,679
third policy that looks at that request

00:19:56,160 --> 00:19:59,280
and says well is this a compute resource

00:19:57,679 --> 00:20:00,080
or a networking resource if it's compute

00:19:59,280 --> 00:20:01,760
resource

00:20:00,080 --> 00:20:03,200
make uh delegate the decision to the

00:20:01,760 --> 00:20:05,039
compute policy if it's a networking

00:20:03,200 --> 00:20:07,280
resource delegate the decision

00:20:05,039 --> 00:20:08,880
to the networking policy if it's

00:20:07,280 --> 00:20:10,640
actually a resource that has a bit of

00:20:08,880 --> 00:20:12,400
both well then maybe you require both

00:20:10,640 --> 00:20:12,960
the compute and the networking policies

00:20:12,400 --> 00:20:15,120
to

00:20:12,960 --> 00:20:16,240
allow the request before you allow it at

00:20:15,120 --> 00:20:18,480
all

00:20:16,240 --> 00:20:19,600
so that's composition delegation another

00:20:18,480 --> 00:20:22,240
important thing about open

00:20:19,600 --> 00:20:24,000
is that it was designed uh to take as

00:20:22,240 --> 00:20:26,480
much of the burden for performance

00:20:24,000 --> 00:20:27,919
away from the policy author as possible

00:20:26,480 --> 00:20:29,760
so what that means is we like

00:20:27,919 --> 00:20:31,120
people to think about to the extent we

00:20:29,760 --> 00:20:33,120
can make this happen

00:20:31,120 --> 00:20:34,960
that we want people as policy authors to

00:20:33,120 --> 00:20:36,799
think about writing correct and

00:20:34,960 --> 00:20:39,120
maintainable policies

00:20:36,799 --> 00:20:40,880
and then as much as we can we want to

00:20:39,120 --> 00:20:43,440
push the burden of performance

00:20:40,880 --> 00:20:44,559
off to oppa to that in there a couple of

00:20:43,440 --> 00:20:45,919
pretty powerful

00:20:44,559 --> 00:20:47,919
optimizations that we have in place one

00:20:45,919 --> 00:20:49,919
of which is rule indexing what this does

00:20:47,919 --> 00:20:50,640
is it statically analyzes all the rules

00:20:49,919 --> 00:20:53,840
you've written

00:20:50,640 --> 00:20:55,679
it constructs a try to organize those

00:20:53,840 --> 00:20:56,400
rules so that when a new request comes

00:20:55,679 --> 00:20:58,480
into opa

00:20:56,400 --> 00:21:00,159
oppa can very quickly walk the try and

00:20:58,480 --> 00:21:01,679
find the fragment of rules that it

00:21:00,159 --> 00:21:05,039
actually needs to

00:21:01,679 --> 00:21:07,840
evaluate in order to answer this the the

00:21:05,039 --> 00:21:09,440
incoming query partial evaluation i like

00:21:07,840 --> 00:21:11,520
to think of this as a compiler technique

00:21:09,440 --> 00:21:13,679
that evaluates as much of the policy at

00:21:11,520 --> 00:21:17,120
compile time as it can

00:21:13,679 --> 00:21:18,000
again leaving the amount of work that it

00:21:17,120 --> 00:21:21,280
needs to do

00:21:18,000 --> 00:21:21,840
for evaluation at run time to the

00:21:21,280 --> 00:21:25,039
minimal

00:21:21,840 --> 00:21:26,240
extent possible in terms of architecture

00:21:25,039 --> 00:21:28,240
i've already mentioned that oppa was

00:21:26,240 --> 00:21:30,400
designed to be effectively host local

00:21:28,240 --> 00:21:32,240
cache of any policy and data that it

00:21:30,400 --> 00:21:33,679
needs in order to make decisions

00:21:32,240 --> 00:21:35,760
so what we see most people doing is

00:21:33,679 --> 00:21:36,880
running opa as a side car or a host

00:21:35,760 --> 00:21:39,039
level daemon

00:21:36,880 --> 00:21:40,400
you can also run opa as a go library if

00:21:39,039 --> 00:21:42,320
you like

00:21:40,400 --> 00:21:44,559
one of the important things though that

00:21:42,320 --> 00:21:46,400
we decided early on was that oppa is not

00:21:44,559 --> 00:21:48,880
intended to be a source of truth for

00:21:46,400 --> 00:21:50,799
policy or for data it is a cache

00:21:48,880 --> 00:21:52,480
all of the policy and memory are kept or

00:21:50,799 --> 00:21:54,159
sorry all the policy and data are kept

00:21:52,480 --> 00:21:56,000
in memory

00:21:54,159 --> 00:21:57,840
um and one of the nice things therefore

00:21:56,000 --> 00:22:00,320
is that there are zero decision time

00:21:57,840 --> 00:22:02,320
dependencies oppa always has whatever

00:22:00,320 --> 00:22:03,440
policy and data it needs in order to

00:22:02,320 --> 00:22:07,200
make decisions

00:22:03,440 --> 00:22:08,559
uh without having to jump off the server

00:22:07,200 --> 00:22:10,080
what that does though is beg the

00:22:08,559 --> 00:22:10,799
question well how do you get policies

00:22:10,080 --> 00:22:13,120
into oppo

00:22:10,799 --> 00:22:15,280
where from the source of truth into into

00:22:13,120 --> 00:22:17,200
opa oppa does provide a number of what

00:22:15,280 --> 00:22:19,360
we call management apis

00:22:17,200 --> 00:22:20,799
for control and observability so the

00:22:19,360 --> 00:22:23,120
bundle api

00:22:20,799 --> 00:22:25,679
allows you to configure opa to download

00:22:23,120 --> 00:22:28,960
policies from some

00:22:25,679 --> 00:22:31,280
source of truth the status api allows

00:22:28,960 --> 00:22:33,600
opa to periodically upload

00:22:31,280 --> 00:22:35,120
uh how it's doing up to some third-party

00:22:33,600 --> 00:22:37,280
service

00:22:35,120 --> 00:22:39,360
the logging service allows oppa to

00:22:37,280 --> 00:22:40,080
record each and every decision that it

00:22:39,360 --> 00:22:43,440
makes

00:22:40,080 --> 00:22:44,640
again to uh to to some centralized

00:22:43,440 --> 00:22:46,240
service

00:22:44,640 --> 00:22:48,000
and there in particular i'll mention

00:22:46,240 --> 00:22:49,280
that the logs that are recorded are not

00:22:48,000 --> 00:22:51,360
just text files

00:22:49,280 --> 00:22:53,280
they are what i like to call high

00:22:51,360 --> 00:22:55,039
fidelity json logs so the inputs that

00:22:53,280 --> 00:22:57,360
open receive the output it received all

00:22:55,039 --> 00:22:59,520
of that is stored in json and so

00:22:57,360 --> 00:23:02,080
you've got quite a bit of information to

00:22:59,520 --> 00:23:03,760
work with there it's great for audit

00:23:02,080 --> 00:23:05,520
and then finally there's a discovery api

00:23:03,760 --> 00:23:07,440
that discovery api allows you to

00:23:05,520 --> 00:23:09,039
dynamically configure to bundle the

00:23:07,440 --> 00:23:12,080
status and the log all

00:23:09,039 --> 00:23:14,880
all um at runtime

00:23:12,080 --> 00:23:16,720
in addition to management apis opa does

00:23:14,880 --> 00:23:17,840
come with a bunch of tooling a lot of

00:23:16,720 --> 00:23:18,480
the same tooling that you would expect

00:23:17,840 --> 00:23:20,799
from a

00:23:18,480 --> 00:23:22,000
traditional programming language so here

00:23:20,799 --> 00:23:24,080
in particular there's a

00:23:22,000 --> 00:23:25,520
unit test framework we highly recommend

00:23:24,080 --> 00:23:27,039
you write unit tests

00:23:25,520 --> 00:23:29,200
and to make sure your policies are

00:23:27,039 --> 00:23:31,520
correct before you deploy them

00:23:29,200 --> 00:23:33,760
dependency analysis a formatter open

00:23:31,520 --> 00:23:34,640
checker there's a vs code plug-in as

00:23:33,760 --> 00:23:36,880
well

00:23:34,640 --> 00:23:38,080
there's a tracer there's a profiler when

00:23:36,880 --> 00:23:40,320
you start looking at

00:23:38,080 --> 00:23:41,760
performance there's also a playground if

00:23:40,320 --> 00:23:43,120
you have not checked out the playground

00:23:41,760 --> 00:23:45,760
it's a great place to

00:23:43,120 --> 00:23:47,039
write some policy evaluate it there are

00:23:45,760 --> 00:23:49,440
a number of

00:23:47,039 --> 00:23:50,799
of well-documented examples there to get

00:23:49,440 --> 00:23:52,720
you started

00:23:50,799 --> 00:23:54,960
and then it also implements the bundle

00:23:52,720 --> 00:23:57,360
service so you can also hook up your opa

00:23:54,960 --> 00:23:58,640
and just to try out what what how how

00:23:57,360 --> 00:24:00,320
everything works together

00:23:58,640 --> 00:24:02,400
you can run your opa on your laptop or

00:24:00,320 --> 00:24:04,559
wherever you want and have it download

00:24:02,400 --> 00:24:06,159
policies from the playground

00:24:04,559 --> 00:24:09,279
that's a great way to get a feel for how

00:24:06,159 --> 00:24:09,279
that would work and to end

00:24:10,240 --> 00:24:13,600
stepping back the way i like to think

00:24:12,400 --> 00:24:16,320
about oppa is that

00:24:13,600 --> 00:24:16,880
what it really is embodies is policy is

00:24:16,320 --> 00:24:19,440
code

00:24:16,880 --> 00:24:20,799
it and just like we have a software

00:24:19,440 --> 00:24:24,080
development life cycle

00:24:20,799 --> 00:24:26,320
uh opa and all of its tooling enables

00:24:24,080 --> 00:24:27,440
a policy development life cycle a whole

00:24:26,320 --> 00:24:29,600
collection

00:24:27,440 --> 00:24:31,039
of activities that need to happen in

00:24:29,600 --> 00:24:34,159
order to

00:24:31,039 --> 00:24:36,640
safely and securely build and

00:24:34,159 --> 00:24:38,320
enforce and monitor the policies that

00:24:36,640 --> 00:24:38,720
are important throughout an organization

00:24:38,320 --> 00:24:40,080
so

00:24:38,720 --> 00:24:41,520
the requirements gathering there on the

00:24:40,080 --> 00:24:42,880
left-hand side that's obviously not

00:24:41,520 --> 00:24:44,240
really something opal can help with but

00:24:42,880 --> 00:24:46,400
it's an important part of the

00:24:44,240 --> 00:24:48,080
policy development life cycle policy

00:24:46,400 --> 00:24:49,120
authoring obviously there how do you

00:24:48,080 --> 00:24:51,360
write policies

00:24:49,120 --> 00:24:53,840
you need diversion control them and so

00:24:51,360 --> 00:24:56,880
on there's a ci step where you want to

00:24:53,840 --> 00:24:59,679
test policies i already mentioned the

00:24:56,880 --> 00:25:00,000
the um the opa test framework there's

00:24:59,679 --> 00:25:02,480
also

00:25:00,000 --> 00:25:03,520
a build step where you can build those

00:25:02,480 --> 00:25:05,679
bundles and

00:25:03,520 --> 00:25:06,799
and you know assemble those policies

00:25:05,679 --> 00:25:08,240
from wherever they

00:25:06,799 --> 00:25:09,840
from wherever their sources of truth

00:25:08,240 --> 00:25:11,440
actually are deployment

00:25:09,840 --> 00:25:13,760
you need to deploy those policies to

00:25:11,440 --> 00:25:15,760
open make sure that it's always got

00:25:13,760 --> 00:25:17,440
whatever policies it needs to make

00:25:15,760 --> 00:25:20,240
decisions monitoring

00:25:17,440 --> 00:25:21,919
all of the oppas logging all the all the

00:25:20,240 --> 00:25:24,559
decisions that open makes so

00:25:21,919 --> 00:25:26,240
all of those headings should sound very

00:25:24,559 --> 00:25:28,080
familiar to anyone

00:25:26,240 --> 00:25:30,240
who's working in software development

00:25:28,080 --> 00:25:31,840
those same kinds of activities are the

00:25:30,240 --> 00:25:34,320
things that the opa

00:25:31,840 --> 00:25:37,200
that oppa and all of its tooling enables

00:25:34,320 --> 00:25:37,200
but for policy

00:25:37,600 --> 00:25:41,120
that is all for today so thank you so

00:25:39,600 --> 00:25:42,320
much for giving me your time hopefully

00:25:41,120 --> 00:25:44,640
you found this

00:25:42,320 --> 00:25:45,360
informative definitely check us out

00:25:44,640 --> 00:25:47,760
online

00:25:45,360 --> 00:25:48,960
and feel free to send us questions

00:25:47,760 --> 00:25:52,640
whenever you have them

00:25:48,960 --> 00:25:52,640

YouTube URL: https://www.youtube.com/watch?v=OxH1CQ431p0


