Title: Policy Management in Kubernetes - Moving to a Centralised Management.. - Olive Power & Rachel Leekin
Publication date: 2020-09-11
Playlist: Cloud Native + Open Source Virtual Summit China 2020
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Policy Management in Kubernetes - Moving to a Centralised Management Model - Olive Power & Rachel Leekin, VMware 

Policy management of enterprise resources is hard. The scope and the vast number of resources to which policy should be applied makes it so.   Current technologies in this area include OPA and OPA Gatekeeper, which bring to table the ability to discreetly define policies around workflows such as access, security, licensing and auditing.  We are seeing more offerings around central policy management that allow creation and management of policies spanning multiple Kubernetes clusters and namespaces    In this talk we will review the current offering in this space, and how these are being applied in production. We will discuss current development and where the future development areas will need to be.  We hope to provide a comprehensive outlook on how to deal with Policy management for your Kubernetes estate, that will satisfy the current policy requirements of current and future workloads. 

https://sched.co/cp9a
Captions: 
	00:00:00,880 --> 00:00:03,040
welcome to the cloud native and open

00:00:02,240 --> 00:00:05,440
source summit

00:00:03,040 --> 00:00:07,359
uh china 2020. um today's session is

00:00:05,440 --> 00:00:08,480
about policy management in kubernetes

00:00:07,359 --> 00:00:10,880
and how it's moving towards a

00:00:08,480 --> 00:00:12,719
centralized management model um my name

00:00:10,880 --> 00:00:14,719
is olive power and i'm joined by my

00:00:12,719 --> 00:00:17,039
colleague rachel leaken and we both work

00:00:14,719 --> 00:00:18,400
at vmware um we're going to talk a

00:00:17,039 --> 00:00:20,320
little bit about myself just really

00:00:18,400 --> 00:00:22,480
quick my name is oliver as i said i work

00:00:20,320 --> 00:00:23,680
with kubernetes at vmware i'm based out

00:00:22,480 --> 00:00:25,439
of singapore

00:00:23,680 --> 00:00:27,359
um i've had previously worked with

00:00:25,439 --> 00:00:29,439
heptio and red hat so i have a bit of

00:00:27,359 --> 00:00:30,880
experience with kubernetes and about

00:00:29,439 --> 00:00:34,160
policy management they're in

00:00:30,880 --> 00:00:36,239
over to you rachel hi i'm rachel leakin

00:00:34,160 --> 00:00:37,520
i'm a kubernetes field engineer here at

00:00:36,239 --> 00:00:40,399
vmware as well

00:00:37,520 --> 00:00:41,200
and i previously was at ibm as a cloud

00:00:40,399 --> 00:00:43,120
architect

00:00:41,200 --> 00:00:44,719
so i have a couple years of experience

00:00:43,120 --> 00:00:46,960
in cloud native development

00:00:44,719 --> 00:00:48,800
applications so i'll pass it over back

00:00:46,960 --> 00:00:50,719
to olive to take us through the

00:00:48,800 --> 00:00:52,079
agenda and the rest of our session

00:00:50,719 --> 00:00:53,760
thanks rachel oh so

00:00:52,079 --> 00:00:55,440
so today we're going to quickly cover

00:00:53,760 --> 00:00:56,960
well you know why do we need policy

00:00:55,440 --> 00:00:58,640
management in kubernetes

00:00:56,960 --> 00:01:00,719
and then we're going to talk about how

00:00:58,640 --> 00:01:02,719
we sort of implement policy management

00:01:00,719 --> 00:01:04,879
within kubernetes and we're going to

00:01:02,719 --> 00:01:06,560
specifically today focus on open policy

00:01:04,879 --> 00:01:08,479
agent which has quickly become

00:01:06,560 --> 00:01:10,840
one of the most adopted strategies for

00:01:08,479 --> 00:01:12,000
implementing security policies within

00:01:10,840 --> 00:01:13,680
kubernetes

00:01:12,000 --> 00:01:16,000
and then rachel's going to cover how we

00:01:13,680 --> 00:01:17,680
centralize this with opa how it works

00:01:16,000 --> 00:01:19,360
and then we hopefully leave time for

00:01:17,680 --> 00:01:21,119
some q a at the end

00:01:19,360 --> 00:01:23,200
so diving straight in you know why do we

00:01:21,119 --> 00:01:25,600
need policy management in kubernetes

00:01:23,200 --> 00:01:27,360
so for any platform you're running and

00:01:25,600 --> 00:01:28,479
kubernetes remember is a platform for

00:01:27,360 --> 00:01:31,119
building platforms

00:01:28,479 --> 00:01:33,680
and whatever platform you're running um

00:01:31,119 --> 00:01:35,119
security is always a concern both from

00:01:33,680 --> 00:01:37,040
the infrastructure side and from the

00:01:35,119 --> 00:01:39,119
application side

00:01:37,040 --> 00:01:42,079
and in kubernetes everything is

00:01:39,119 --> 00:01:45,040
processed through the api so we have a

00:01:42,079 --> 00:01:46,079
an option to start implementing security

00:01:45,040 --> 00:01:49,840
at the api

00:01:46,079 --> 00:01:52,079
level and secure kubernetes already has

00:01:49,840 --> 00:01:54,079
a basic implementation of that where it

00:01:52,079 --> 00:01:56,399
uses admission controllers

00:01:54,079 --> 00:01:58,159
to help you define and customize what is

00:01:56,399 --> 00:01:59,680
allowed on your cluster

00:01:58,159 --> 00:02:01,600
so let's just have a look at that in a

00:01:59,680 --> 00:02:02,159
little bit more detail and this is the

00:02:01,600 --> 00:02:05,280
flow

00:02:02,159 --> 00:02:07,280
of an api request in kubernetes

00:02:05,280 --> 00:02:08,959
and so the request comes in and the

00:02:07,280 --> 00:02:11,360
authorization is checked to whether that

00:02:08,959 --> 00:02:14,560
request is allowed even to be processed

00:02:11,360 --> 00:02:18,000
and then there's two there's a the first

00:02:14,560 --> 00:02:20,239
gatekeeper if you like um to to deciding

00:02:18,000 --> 00:02:21,440
in kubernetes whether that request is

00:02:20,239 --> 00:02:24,080
valid is

00:02:21,440 --> 00:02:25,520
putting it through a mutating admission

00:02:24,080 --> 00:02:28,239
which means that uh

00:02:25,520 --> 00:02:28,959
a controller is is is watching that

00:02:28,239 --> 00:02:30,959
request

00:02:28,959 --> 00:02:32,319
and checking the content of that request

00:02:30,959 --> 00:02:34,239
or the specification

00:02:32,319 --> 00:02:35,440
of that request and seeing if there's

00:02:34,239 --> 00:02:38,480
anything in there

00:02:35,440 --> 00:02:40,560
that's not allowed and if there's

00:02:38,480 --> 00:02:43,120
something in there that's not allowed

00:02:40,560 --> 00:02:44,160
you can implement some logic to change

00:02:43,120 --> 00:02:46,400
that value to

00:02:44,160 --> 00:02:48,560
to what is actually allowed so something

00:02:46,400 --> 00:02:51,120
is specified as

00:02:48,560 --> 00:02:53,200
having a limit let's say for example a

00:02:51,120 --> 00:02:55,519
capacity limit of two gig

00:02:53,200 --> 00:02:57,360
and it only should be specified as one

00:02:55,519 --> 00:02:59,280
gig then that mutating admission

00:02:57,360 --> 00:03:01,360
controller and logic around it can be

00:02:59,280 --> 00:03:01,920
implemented to change the spec of that

00:03:01,360 --> 00:03:04,000
part

00:03:01,920 --> 00:03:06,080
to change it from 2g to one day so

00:03:04,000 --> 00:03:07,680
that's a mutating admission so it checks

00:03:06,080 --> 00:03:08,640
whether it's right and can edit the

00:03:07,680 --> 00:03:11,840
specification

00:03:08,640 --> 00:03:15,440
before it can continue on its sort of uh

00:03:11,840 --> 00:03:17,440
life cycle and then then after that

00:03:15,440 --> 00:03:19,840
the the schema is then validated again

00:03:17,440 --> 00:03:22,000
to make sure that that

00:03:19,840 --> 00:03:23,120
editing of the pod spec or whatever

00:03:22,000 --> 00:03:25,360
specification

00:03:23,120 --> 00:03:28,159
is valid and then it goes through a

00:03:25,360 --> 00:03:30,560
validating admission to make sure that

00:03:28,159 --> 00:03:31,920
that specification is still allowed

00:03:30,560 --> 00:03:33,680
within kubernetes now the difference

00:03:31,920 --> 00:03:36,000
here between mutating admission

00:03:33,680 --> 00:03:37,120
is that it's just a validation is this

00:03:36,000 --> 00:03:39,040
value allowed

00:03:37,120 --> 00:03:41,200
so in our previous example before we've

00:03:39,040 --> 00:03:42,959
mutated it from one two to one

00:03:41,200 --> 00:03:44,640
because that's the implementation that

00:03:42,959 --> 00:03:46,799
we've specified um

00:03:44,640 --> 00:03:48,400
that validation admission would would

00:03:46,799 --> 00:03:50,560
say that it's more gay and allowed

00:03:48,400 --> 00:03:51,519
and so it would allow it through to lcd

00:03:50,560 --> 00:03:54,080
persistence

00:03:51,519 --> 00:03:56,239
however you can you can implement code

00:03:54,080 --> 00:03:57,599
at the validating admission stage and

00:03:56,239 --> 00:03:58,480
just like we did at the mutating

00:03:57,599 --> 00:04:00,319
ambition stage

00:03:58,480 --> 00:04:01,760
we can implement code at the validation

00:04:00,319 --> 00:04:04,239
to see if

00:04:01,760 --> 00:04:05,360
everything that we've specified is

00:04:04,239 --> 00:04:08,000
actually valid

00:04:05,360 --> 00:04:09,680
and as i said kubernetes has some um

00:04:08,000 --> 00:04:11,200
controllers that are implemented out of

00:04:09,680 --> 00:04:14,400
the box

00:04:11,200 --> 00:04:16,720
but we can there's a lot of other use

00:04:14,400 --> 00:04:18,160
cases in terms in and around security

00:04:16,720 --> 00:04:20,479
that are not implemented

00:04:18,160 --> 00:04:22,639
as controllers out of the box and so

00:04:20,479 --> 00:04:23,520
with kubernetes there are no hidden apis

00:04:22,639 --> 00:04:26,160
and so

00:04:23,520 --> 00:04:27,520
that means that any request via the

00:04:26,160 --> 00:04:29,840
kubernetes api

00:04:27,520 --> 00:04:31,759
could be seen as valid if there isn't a

00:04:29,840 --> 00:04:32,479
policy around it that says it's not

00:04:31,759 --> 00:04:35,440
valid

00:04:32,479 --> 00:04:37,520
and so that can lead to several sort of

00:04:35,440 --> 00:04:40,720
bad behaviors so you can construct

00:04:37,520 --> 00:04:41,360
you know specifications in your yaml

00:04:40,720 --> 00:04:43,600
files

00:04:41,360 --> 00:04:45,759
that you know are valid in in their

00:04:43,600 --> 00:04:46,479
format but they may not actually be

00:04:45,759 --> 00:04:48,960
valid

00:04:46,479 --> 00:04:49,680
in in how you want uh you know that

00:04:48,960 --> 00:04:51,440
action to be

00:04:49,680 --> 00:04:53,199
perceived within your environment so

00:04:51,440 --> 00:04:53,759
what i mean by bad behaviors is things

00:04:53,199 --> 00:04:55,520
like

00:04:53,759 --> 00:04:57,440
um you know is the pod requesting too

00:04:55,520 --> 00:04:59,040
many resources so you're checking to

00:04:57,440 --> 00:05:00,240
make sure that all your pods have been

00:04:59,040 --> 00:05:02,560
configured correctly

00:05:00,240 --> 00:05:03,680
and and have got the right reservations

00:05:02,560 --> 00:05:05,120
and limits in place

00:05:03,680 --> 00:05:07,039
to make sure they're conforming to

00:05:05,120 --> 00:05:09,600
standards and so that can be

00:05:07,039 --> 00:05:10,560
validated at the at the validation

00:05:09,600 --> 00:05:12,160
admission stage

00:05:10,560 --> 00:05:14,080
and making sure that all your prospects

00:05:12,160 --> 00:05:17,039
are constructed correctly

00:05:14,080 --> 00:05:17,520
um there's also use cases like uh are

00:05:17,039 --> 00:05:19,520
the

00:05:17,520 --> 00:05:20,880
images that are on your services that

00:05:19,520 --> 00:05:21,600
your containers are pulling are they

00:05:20,880 --> 00:05:23,840
secure

00:05:21,600 --> 00:05:26,000
so you can you can implement things like

00:05:23,840 --> 00:05:28,800
a trusted registry

00:05:26,000 --> 00:05:30,800
that um that is specific to your

00:05:28,800 --> 00:05:32,160
environment and only images from that

00:05:30,800 --> 00:05:34,240
trusted registry can be

00:05:32,160 --> 00:05:36,320
can be used so if there's a case where a

00:05:34,240 --> 00:05:37,280
part specification file has been

00:05:36,320 --> 00:05:39,840
constructed

00:05:37,280 --> 00:05:41,440
incorrectly with the wrong registry um

00:05:39,840 --> 00:05:43,440
you know kubernetes itself doesn't know

00:05:41,440 --> 00:05:45,600
about that but you can you can

00:05:43,440 --> 00:05:47,199
you can start applying extra logic in

00:05:45,600 --> 00:05:49,520
your environment to make sure that only

00:05:47,199 --> 00:05:51,280
specified registries can be implemented

00:05:49,520 --> 00:05:53,120
and there's other things like privileges

00:05:51,280 --> 00:05:55,759
granted to service accounts again

00:05:53,120 --> 00:05:56,800
to kubernetes there's no uh right and

00:05:55,759 --> 00:05:58,319
wrong

00:05:56,800 --> 00:05:59,840
values for this but you can start

00:05:58,319 --> 00:06:02,639
implementing your own code

00:05:59,840 --> 00:06:04,319
to start imposing the correct behavior

00:06:02,639 --> 00:06:04,960
and the correct permissions to service

00:06:04,319 --> 00:06:08,080
accounts

00:06:04,960 --> 00:06:08,960
again very important from security also

00:06:08,080 --> 00:06:10,720
from services

00:06:08,960 --> 00:06:12,400
are they you know created the correct

00:06:10,720 --> 00:06:13,600
type whether it's load balancer

00:06:12,400 --> 00:06:15,520
you know are you allowed to create

00:06:13,600 --> 00:06:17,039
service type of load balancer

00:06:15,520 --> 00:06:18,720
for example or should they all be

00:06:17,039 --> 00:06:20,160
cluster ip for example

00:06:18,720 --> 00:06:22,800
and again other things like pod

00:06:20,160 --> 00:06:25,120
permissions and the correct storage

00:06:22,800 --> 00:06:27,360
um mounts things that can compromise

00:06:25,120 --> 00:06:30,000
your security

00:06:27,360 --> 00:06:30,560
and again so so so by being able to

00:06:30,000 --> 00:06:33,440
implement

00:06:30,560 --> 00:06:34,880
custom code to be able to implement your

00:06:33,440 --> 00:06:37,280
own specific

00:06:34,880 --> 00:06:39,120
security requirements your own specific

00:06:37,280 --> 00:06:39,919
policies that are not available out of

00:06:39,120 --> 00:06:42,319
the box

00:06:39,919 --> 00:06:44,160
um this is available to you through the

00:06:42,319 --> 00:06:46,880
webhook code implementation

00:06:44,160 --> 00:06:49,120
so this is a whereby in the in the flow

00:06:46,880 --> 00:06:51,680
and the life cycle of an api request

00:06:49,120 --> 00:06:52,560
we can hook out to external providers

00:06:51,680 --> 00:06:54,479
that can read

00:06:52,560 --> 00:06:56,000
some external policies that you've

00:06:54,479 --> 00:06:58,479
written and they can be

00:06:56,000 --> 00:06:59,360
validated through the api flow within

00:06:58,479 --> 00:07:01,759
kubernetes

00:06:59,360 --> 00:07:02,400
so this gives the ability to have like a

00:07:01,759 --> 00:07:06,400
really

00:07:02,400 --> 00:07:08,160
um a lot of external

00:07:06,400 --> 00:07:10,000
policies that can be written so it gives

00:07:08,160 --> 00:07:12,479
you a lot of flexibility

00:07:10,000 --> 00:07:14,160
to be able to extend kubernetes to

00:07:12,479 --> 00:07:16,240
implement the policies that are very

00:07:14,160 --> 00:07:17,840
specific to your use cases and your

00:07:16,240 --> 00:07:19,919
security policies

00:07:17,840 --> 00:07:21,840
and one of the players in this field is

00:07:19,919 --> 00:07:24,560
a open source project called

00:07:21,840 --> 00:07:24,880
open policy agent and that allows you to

00:07:24,560 --> 00:07:26,800
start

00:07:24,880 --> 00:07:28,880
implementing your own custom code and

00:07:26,800 --> 00:07:31,520
your own custom policies

00:07:28,880 --> 00:07:32,560
and it allows it to allows you to to to

00:07:31,520 --> 00:07:35,199
be able to run

00:07:32,560 --> 00:07:36,720
um and test these policies before you

00:07:35,199 --> 00:07:37,360
implement them in your kubernetes

00:07:36,720 --> 00:07:38,880
cluster

00:07:37,360 --> 00:07:40,639
and you can start getting reports on

00:07:38,880 --> 00:07:42,400
which policies have been allowed and

00:07:40,639 --> 00:07:45,520
which policies have been denied

00:07:42,400 --> 00:07:47,680
and it's a very interesting uh uh

00:07:45,520 --> 00:07:49,360
open source project and rachel i'm going

00:07:47,680 --> 00:07:50,080
to hand over to you now to discuss a bit

00:07:49,360 --> 00:07:52,400
more in depth

00:07:50,080 --> 00:07:53,440
what exactly open policy agent is and

00:07:52,400 --> 00:07:57,520
how it can be used

00:07:53,440 --> 00:08:00,560
to secure your clusters thank you olive

00:07:57,520 --> 00:08:03,360
so let's go into more detail

00:08:00,560 --> 00:08:05,680
on what open policy agent is or as you

00:08:03,360 --> 00:08:08,080
all see me refer to as oppa

00:08:05,680 --> 00:08:08,960
some people say opa uh officially it's

00:08:08,080 --> 00:08:11,520
called oppa

00:08:08,960 --> 00:08:13,280
by their documentation so most of you

00:08:11,520 --> 00:08:14,800
i'm making assumption that have

00:08:13,280 --> 00:08:17,199
you have gone through some a lot of the

00:08:14,800 --> 00:08:18,800
documentation already on oppa's site

00:08:17,199 --> 00:08:20,319
but let's give you a little background

00:08:18,800 --> 00:08:23,280
on opa once again

00:08:20,319 --> 00:08:24,400
it is an open source general purpose uh

00:08:23,280 --> 00:08:26,400
policy agent

00:08:24,400 --> 00:08:28,319
that unifies like you said the public

00:08:26,400 --> 00:08:30,639
enforcement for the stack

00:08:28,319 --> 00:08:31,840
so that's the kind of gist of the gener

00:08:30,639 --> 00:08:34,959
the definition

00:08:31,840 --> 00:08:36,399
um it's a declarative language uh rego

00:08:34,959 --> 00:08:39,039
or rigo you'll hear

00:08:36,399 --> 00:08:40,399
some either terminology or uh

00:08:39,039 --> 00:08:43,360
pronunciation

00:08:40,399 --> 00:08:45,600
and then also it in certain cases but

00:08:43,360 --> 00:08:48,000
the case that we'll focus on today

00:08:45,600 --> 00:08:49,360
is oppa will be deployed as a validating

00:08:48,000 --> 00:08:51,600
uh mission web uh

00:08:49,360 --> 00:08:54,000
sorry mission controller so that's the

00:08:51,600 --> 00:08:56,320
case that we'll be going through today

00:08:54,000 --> 00:08:58,160
so not just that as well but what we

00:08:56,320 --> 00:09:01,360
want to discuss is

00:08:58,160 --> 00:09:02,800
is that you know with oppa and let me

00:09:01,360 --> 00:09:05,920
actually go back one more slide

00:09:02,800 --> 00:09:09,839
with opa you're not just

00:09:05,920 --> 00:09:11,120
trying to um block people from doing

00:09:09,839 --> 00:09:15,120
things right or

00:09:11,120 --> 00:09:17,040
or just stop the bad behaviors

00:09:15,120 --> 00:09:19,440
you have to look at it as your whole

00:09:17,040 --> 00:09:20,720
strategy behind how do you take that

00:09:19,440 --> 00:09:22,959
approach from

00:09:20,720 --> 00:09:24,240
blocking bad behavior or preventing bad

00:09:22,959 --> 00:09:27,040
behavior it's a it's a

00:09:24,240 --> 00:09:28,000
tactic and a strategy that you have to

00:09:27,040 --> 00:09:30,720
deploy

00:09:28,000 --> 00:09:32,320
so one of our colleagues duffy cooley

00:09:30,720 --> 00:09:33,360
always says what problem are you trying

00:09:32,320 --> 00:09:35,360
to solve

00:09:33,360 --> 00:09:37,279
and that's the way that when i and

00:09:35,360 --> 00:09:39,040
oliver working with customers we always

00:09:37,279 --> 00:09:41,279
take that approach of what problem are

00:09:39,040 --> 00:09:43,600
we trying to solve with the customer

00:09:41,279 --> 00:09:45,519
and as olive said a lot of the times

00:09:43,600 --> 00:09:47,839
they come to us and they say hey we have

00:09:45,519 --> 00:09:49,440
these people who are doing uh bad things

00:09:47,839 --> 00:09:51,839
or have bad behaviors on the

00:09:49,440 --> 00:09:52,959
on the on the team how do we stop them

00:09:51,839 --> 00:09:54,399
from doing that

00:09:52,959 --> 00:09:56,959
and we always kind of look at them and

00:09:54,399 --> 00:09:58,399
say okay well let's not just stop them

00:09:56,959 --> 00:09:59,760
right let's look at the whole approach

00:09:58,399 --> 00:10:01,519
in totality

00:09:59,760 --> 00:10:03,839
so in the case like this these are some

00:10:01,519 --> 00:10:05,200
examples that i've seen in the real

00:10:03,839 --> 00:10:07,600
world right rule case

00:10:05,200 --> 00:10:09,600
uh in customer sites when we get there

00:10:07,600 --> 00:10:10,399
is we'll have platform operators will

00:10:09,600 --> 00:10:13,200
say

00:10:10,399 --> 00:10:15,279
i want a developer to require approval

00:10:13,200 --> 00:10:16,720
before they try to create a service type

00:10:15,279 --> 00:10:18,399
load bouncer right and this could be for

00:10:16,720 --> 00:10:19,279
any multiple reasons this could be

00:10:18,399 --> 00:10:21,440
because

00:10:19,279 --> 00:10:23,279
they don't have access to a cloud

00:10:21,440 --> 00:10:26,320
provider or it just doesn't

00:10:23,279 --> 00:10:26,959
fit that their needs for the application

00:10:26,320 --> 00:10:29,360
type

00:10:26,959 --> 00:10:31,120
or or sometimes they just want to make

00:10:29,360 --> 00:10:33,200
sure they understand what's happening

00:10:31,120 --> 00:10:33,839
before they before a developer can just

00:10:33,200 --> 00:10:36,160
go

00:10:33,839 --> 00:10:37,200
and create this service type that's one

00:10:36,160 --> 00:10:39,519
example

00:10:37,200 --> 00:10:41,680
another example would be having

00:10:39,519 --> 00:10:43,760
developers only pull from certain

00:10:41,680 --> 00:10:45,519
uh registry to approve registry so if

00:10:43,760 --> 00:10:47,519
you know that you want them to only pull

00:10:45,519 --> 00:10:50,560
from your approved github

00:10:47,519 --> 00:10:52,480
or docker hub you can do that as well

00:10:50,560 --> 00:10:54,240
and then the last one another examples

00:10:52,480 --> 00:10:56,320
is just making sure that you have

00:10:54,240 --> 00:10:57,279
uh every resource that's created has a

00:10:56,320 --> 00:10:59,440
label so this

00:10:57,279 --> 00:11:00,720
comes up in a case where sometimes you

00:10:59,440 --> 00:11:03,440
need the label to

00:11:00,720 --> 00:11:06,160
indicate what business unit this uh

00:11:03,440 --> 00:11:08,320
developer is deploying application for

00:11:06,160 --> 00:11:09,200
for maybe cost back or chargeback things

00:11:08,320 --> 00:11:11,120
like that

00:11:09,200 --> 00:11:13,600
so you start off by just using these

00:11:11,120 --> 00:11:14,000
simple reasons and logic right you don't

00:11:13,600 --> 00:11:15,600
really go

00:11:14,000 --> 00:11:17,200
straight to code you just start off what

00:11:15,600 --> 00:11:19,760
are you trying to solve

00:11:17,200 --> 00:11:21,519
and we took this with the customer and

00:11:19,760 --> 00:11:25,200
we started making

00:11:21,519 --> 00:11:26,959
policies right so now you say policies

00:11:25,200 --> 00:11:28,720
but what kind of policies you some the

00:11:26,959 --> 00:11:30,240
customer says hey i think i can do this

00:11:28,720 --> 00:11:32,079
with psps

00:11:30,240 --> 00:11:33,760
or network policies and then the

00:11:32,079 --> 00:11:34,560
customer says well maybe we should use

00:11:33,760 --> 00:11:36,560
opa

00:11:34,560 --> 00:11:38,000
and they weren't really sure so we sat

00:11:36,560 --> 00:11:38,959
down and we said well what can we

00:11:38,000 --> 00:11:40,959
accomplish

00:11:38,959 --> 00:11:42,800
with psps and what can we accomplish

00:11:40,959 --> 00:11:44,240
with oppa and then we came to the

00:11:42,800 --> 00:11:46,720
conclusion that

00:11:44,240 --> 00:11:48,640
you can use both right it's not either

00:11:46,720 --> 00:11:51,279
or they complement each other

00:11:48,640 --> 00:11:52,639
so there will be times that it might be

00:11:51,279 --> 00:11:55,279
simpler for you

00:11:52,639 --> 00:11:56,240
for your team to just develop uh

00:11:55,279 --> 00:11:58,880
policies

00:11:56,240 --> 00:11:59,519
psps it might just be a simpler quicker

00:11:58,880 --> 00:12:01,040
way

00:11:59,519 --> 00:12:02,800
and sometimes you need something that's

00:12:01,040 --> 00:12:05,519
a little bit more robust that can go

00:12:02,800 --> 00:12:08,240
into maybe looking at external data

00:12:05,519 --> 00:12:09,040
or things that pspe very can't do so you

00:12:08,240 --> 00:12:10,480
would look

00:12:09,040 --> 00:12:12,160
at both but they're not either they're

00:12:10,480 --> 00:12:13,040
not mutually exclusive you can use them

00:12:12,160 --> 00:12:15,360
both equally

00:12:13,040 --> 00:12:17,519
both in your cluster without um any

00:12:15,360 --> 00:12:19,440
conflicts right as long as you develop

00:12:17,519 --> 00:12:21,120
it correctly and you look at it from the

00:12:19,440 --> 00:12:24,639
bigger picture right

00:12:21,120 --> 00:12:26,880
so like i said why not both

00:12:24,639 --> 00:12:28,160
so now i want to take you to how we took

00:12:26,880 --> 00:12:29,440
those examples of

00:12:28,160 --> 00:12:32,160
what problems that we were trying to

00:12:29,440 --> 00:12:34,720
solve into how we turned those into code

00:12:32,160 --> 00:12:35,600
so i'm going to make the assumption that

00:12:34,720 --> 00:12:38,000
you've gone through some of the

00:12:35,600 --> 00:12:40,160
documentation right with oppa

00:12:38,000 --> 00:12:41,760
there's different types of opa there's

00:12:40,160 --> 00:12:43,200
different versions so there's the cube

00:12:41,760 --> 00:12:45,120
management version

00:12:43,200 --> 00:12:47,040
there's uh the gatekeeper version in

00:12:45,120 --> 00:12:49,120
this example i'm going to focus more on

00:12:47,040 --> 00:12:50,399
cube management because it is

00:12:49,120 --> 00:12:52,320
i want to say it's a little more

00:12:50,399 --> 00:12:53,839
developed and is being used a little

00:12:52,320 --> 00:12:55,839
more by customers right now than

00:12:53,839 --> 00:12:57,360
gatekeeper because of gatekeepers still

00:12:55,839 --> 00:12:59,760
somewhat in beta

00:12:57,360 --> 00:13:01,279
so it's a little more stable so these

00:12:59,760 --> 00:13:03,200
examples are how we

00:13:01,279 --> 00:13:06,399
it's more focused on cube management

00:13:03,200 --> 00:13:09,920
which is deployed as

00:13:06,399 --> 00:13:12,320
a as a config map right on when you're

00:13:09,920 --> 00:13:13,760
in your cluster versus gatekeepers

00:13:12,320 --> 00:13:17,040
deployed as

00:13:13,760 --> 00:13:18,000
crds and that also changes the way that

00:13:17,040 --> 00:13:20,000
you

00:13:18,000 --> 00:13:21,440
write your policies so it's a little

00:13:20,000 --> 00:13:23,279
different which we'd probably say for

00:13:21,440 --> 00:13:26,079
another time another session

00:13:23,279 --> 00:13:26,639
but uh but uh for right now we'll stick

00:13:26,079 --> 00:13:28,639
with what's

00:13:26,639 --> 00:13:30,320
this the simplest way for you to get

00:13:28,639 --> 00:13:30,800
started right you want to get something

00:13:30,320 --> 00:13:32,959
that you

00:13:30,800 --> 00:13:34,160
you get started get the process flowing

00:13:32,959 --> 00:13:35,760
so as you're ready to

00:13:34,160 --> 00:13:38,160
explore gatekeeper you already have a

00:13:35,760 --> 00:13:40,880
solid foundation on how to build

00:13:38,160 --> 00:13:42,800
uh your policies so we'll take that

00:13:40,880 --> 00:13:45,920
first example of we wanted

00:13:42,800 --> 00:13:49,600
someone to we wanted the developers to

00:13:45,920 --> 00:13:52,959
require approval before they uh try to

00:13:49,600 --> 00:13:55,839
provision a loan bouncer service type so

00:13:52,959 --> 00:13:56,480
as you can see here on the slide this is

00:13:55,839 --> 00:13:58,880
a very

00:13:56,480 --> 00:14:00,560
simple policy and that's one thing you

00:13:58,880 --> 00:14:02,959
should keep in mind is that

00:14:00,560 --> 00:14:03,600
sometimes people leave customers they

00:14:02,959 --> 00:14:08,000
want to

00:14:03,600 --> 00:14:11,279
write these very complex uh complex

00:14:08,000 --> 00:14:12,800
policies and to keep in mind that

00:14:11,279 --> 00:14:15,440
sometimes the simpler

00:14:12,800 --> 00:14:17,519
is just better right it gets their point

00:14:15,440 --> 00:14:19,279
across it does what you wanted to do

00:14:17,519 --> 00:14:22,079
and later on it saves you from trying to

00:14:19,279 --> 00:14:23,680
figure out complications as maybe teams

00:14:22,079 --> 00:14:25,199
switch in and out and someone else wrote

00:14:23,680 --> 00:14:26,880
the policy and then the next person

00:14:25,199 --> 00:14:28,639
comes in and they don't know

00:14:26,880 --> 00:14:30,560
what this person was the rationale

00:14:28,639 --> 00:14:31,920
behind the policy so sometimes just

00:14:30,560 --> 00:14:34,480
keeping it simple

00:14:31,920 --> 00:14:35,600
is the best method for for writing these

00:14:34,480 --> 00:14:39,040
policies

00:14:35,600 --> 00:14:40,480
so in this example uh oppa has a policy

00:14:39,040 --> 00:14:43,440
a package statement

00:14:40,480 --> 00:14:44,240
and um this is just very generic right

00:14:43,440 --> 00:14:45,760
now but

00:14:44,240 --> 00:14:47,600
you can name it based off of your

00:14:45,760 --> 00:14:50,560
strategy so for example

00:14:47,600 --> 00:14:51,760
if you want you have cloud a and team a

00:14:50,560 --> 00:14:54,959
and team b

00:14:51,760 --> 00:14:58,480
you can say this policy belongs to uh

00:14:54,959 --> 00:15:00,160
cloud a team and you know

00:14:58,480 --> 00:15:02,240
they're gonna just write this portion

00:15:00,160 --> 00:15:04,480
and then for example if you have another

00:15:02,240 --> 00:15:05,920
policy that's slightly different that

00:15:04,480 --> 00:15:09,199
might be focused

00:15:05,920 --> 00:15:12,320
on maybe um cluster api oh sorry

00:15:09,199 --> 00:15:15,040
cluster ip you might have team cloud

00:15:12,320 --> 00:15:16,880
sorry cloud team b might have that

00:15:15,040 --> 00:15:19,279
policy so you would change the package

00:15:16,880 --> 00:15:22,000
to that it's based off of your strategy

00:15:19,279 --> 00:15:23,920
uh but you want to keep it for i said

00:15:22,000 --> 00:15:25,519
very simple as possible

00:15:23,920 --> 00:15:27,120
so then you have operations of where

00:15:25,519 --> 00:15:30,480
you're trying to create and

00:15:27,120 --> 00:15:31,040
update a policy so once again very

00:15:30,480 --> 00:15:33,600
simple

00:15:31,040 --> 00:15:34,240
uh the kubernetes resources right you're

00:15:33,600 --> 00:15:36,160
just

00:15:34,240 --> 00:15:37,759
i'm sorry methods you just want to

00:15:36,160 --> 00:15:39,759
either create or update so this is what

00:15:37,759 --> 00:15:42,000
that applies to so if they try to deploy

00:15:39,759 --> 00:15:43,519
it sorry destroy a service

00:15:42,000 --> 00:15:44,959
it's not going to do anything because

00:15:43,519 --> 00:15:45,920
it's only looking if they're trying to

00:15:44,959 --> 00:15:49,199
create or update

00:15:45,920 --> 00:15:51,600
a service and then here's the deny so

00:15:49,199 --> 00:15:53,519
it's going to deny and in this

00:15:51,600 --> 00:15:56,240
parentheses here it gives you the reason

00:15:53,519 --> 00:15:57,920
of why but it's going to deny if it sees

00:15:56,240 --> 00:15:59,920
a service come through

00:15:57,920 --> 00:16:02,399
and if it does one of those operations

00:15:59,920 --> 00:16:04,320
and if the the spec type of that service

00:16:02,399 --> 00:16:06,399
is load balancer

00:16:04,320 --> 00:16:08,000
so the reason why you see this here the

00:16:06,399 --> 00:16:10,639
reason is low bouncer

00:16:08,000 --> 00:16:13,279
and then you see the next reason is the

00:16:10,639 --> 00:16:15,120
same reason but it just says node port

00:16:13,279 --> 00:16:17,279
now the logic behind this when we were

00:16:15,120 --> 00:16:20,480
creating it was sometimes

00:16:17,279 --> 00:16:23,759
um you might want it to block both right

00:16:20,480 --> 00:16:26,639
but if they have the same

00:16:23,759 --> 00:16:27,120
error message they might not understand

00:16:26,639 --> 00:16:28,880
what

00:16:27,120 --> 00:16:30,720
what the actual what they're blocking or

00:16:28,880 --> 00:16:32,160
what's being blocked so we kind of we

00:16:30,720 --> 00:16:33,839
took the same policy

00:16:32,160 --> 00:16:35,360
and just had it customized a little bit

00:16:33,839 --> 00:16:38,000
so this way the user

00:16:35,360 --> 00:16:38,800
inter interaction with oppa is also

00:16:38,000 --> 00:16:40,959
positive

00:16:38,800 --> 00:16:42,639
as well so they can see what's what's

00:16:40,959 --> 00:16:45,600
actually being blocked

00:16:42,639 --> 00:16:46,000
uh so that's a very simple policy then

00:16:45,600 --> 00:16:47,519
now

00:16:46,000 --> 00:16:49,519
what you would do with this is you got

00:16:47,519 --> 00:16:50,959
your policy you want to test it locally

00:16:49,519 --> 00:16:52,399
before you do anything in the cluster

00:16:50,959 --> 00:16:53,600
you want to really test it locally

00:16:52,399 --> 00:16:55,920
because

00:16:53,600 --> 00:16:57,199
it will just save you a lot of headache

00:16:55,920 --> 00:16:58,880
later down the line

00:16:57,199 --> 00:17:00,800
when you know all your policies are

00:16:58,880 --> 00:17:02,560
working locally

00:17:00,800 --> 00:17:04,640
so what you have here on the side here

00:17:02,560 --> 00:17:05,199
is a test case so if you're familiar

00:17:04,640 --> 00:17:06,720
with the

00:17:05,199 --> 00:17:08,319
traditional development where you might

00:17:06,720 --> 00:17:10,400
see they're developing

00:17:08,319 --> 00:17:11,600
junit testing right this is the same

00:17:10,400 --> 00:17:13,839
kind of feel

00:17:11,600 --> 00:17:15,679
you get you have your use case here and

00:17:13,839 --> 00:17:16,319
your test case and it gives you what

00:17:15,679 --> 00:17:18,880
would be a

00:17:16,319 --> 00:17:20,640
kind of like a manifest and yaml right

00:17:18,880 --> 00:17:24,240
in json here format

00:17:20,640 --> 00:17:27,760
and it's testing against to see if this

00:17:24,240 --> 00:17:28,559
this example would uh break the rule or

00:17:27,760 --> 00:17:31,679
be allowed

00:17:28,559 --> 00:17:32,320
in oppa or not allowed in opa so you can

00:17:31,679 --> 00:17:33,760
and

00:17:32,320 --> 00:17:35,760
if you know it's a lot of details here

00:17:33,760 --> 00:17:38,000
but you can see that in this case

00:17:35,760 --> 00:17:39,600
it should deny because it's a little

00:17:38,000 --> 00:17:42,640
bouncer type

00:17:39,600 --> 00:17:42,640
now for the next slide

00:17:42,720 --> 00:17:46,160
uh it's the same policy on this side but

00:17:44,480 --> 00:17:49,280
if the if the user tries

00:17:46,160 --> 00:17:50,960
to deploy a cluster ip service

00:17:49,280 --> 00:17:52,559
it will allow it so this is how you

00:17:50,960 --> 00:17:55,120
build out your test cases you want to

00:17:52,559 --> 00:17:57,840
make sure you have coverage for

00:17:55,120 --> 00:17:59,919
for all the possible scenarios right the

00:17:57,840 --> 00:18:02,000
more scenarios you have the better test

00:17:59,919 --> 00:18:03,280
coverage you have before you get into

00:18:02,000 --> 00:18:06,240
your cluster

00:18:03,280 --> 00:18:08,640
and it really gives you a preventative

00:18:06,240 --> 00:18:12,480
measures

00:18:08,640 --> 00:18:14,799
so now that you've after we've kind of

00:18:12,480 --> 00:18:16,400
tested locally you would see you get a

00:18:14,799 --> 00:18:17,679
pause you make sure all your test case

00:18:16,400 --> 00:18:20,720
pass

00:18:17,679 --> 00:18:21,440
you would to now deploy this same rego

00:18:20,720 --> 00:18:24,400
policy

00:18:21,440 --> 00:18:26,799
into your cluster um like i said that

00:18:24,400 --> 00:18:28,160
will be deployed as a config map

00:18:26,799 --> 00:18:30,320
of course you'll go through all the

00:18:28,160 --> 00:18:32,320
standard setup that you need to do to

00:18:30,320 --> 00:18:33,200
get opa deployed onto your kubernetes

00:18:32,320 --> 00:18:35,120
cluster

00:18:33,200 --> 00:18:36,720
uh so that's making that assumption that

00:18:35,120 --> 00:18:39,039
all that has been done

00:18:36,720 --> 00:18:40,480
and your policy has been accepted by

00:18:39,039 --> 00:18:42,559
kubernetes

00:18:40,480 --> 00:18:44,080
so once all that's done now you would

00:18:42,559 --> 00:18:46,559
start testing it in a

00:18:44,080 --> 00:18:48,240
possible real world scenario so here's

00:18:46,559 --> 00:18:49,360
how we would do that we would have a

00:18:48,240 --> 00:18:52,799
yaml

00:18:49,360 --> 00:18:53,200
similar to what we had previously right

00:18:52,799 --> 00:18:55,679
but

00:18:53,200 --> 00:18:57,440
now it's in yamo format and it's just

00:18:55,679 --> 00:18:59,760
going to test this in this case we

00:18:57,440 --> 00:19:00,880
i like to always test what what opa will

00:18:59,760 --> 00:19:02,880
let through first

00:19:00,880 --> 00:19:05,200
so in this case i know that it's a

00:19:02,880 --> 00:19:08,000
cluster ip example here

00:19:05,200 --> 00:19:08,880
so opus should allow it to go through

00:19:08,000 --> 00:19:10,480
and

00:19:08,880 --> 00:19:12,400
and as you can see from the screenshot

00:19:10,480 --> 00:19:15,360
that's what it does it goes through

00:19:12,400 --> 00:19:18,160
and then if my next one is what happens

00:19:15,360 --> 00:19:19,919
now when i want to do load bouncer type

00:19:18,160 --> 00:19:22,000
and just so you could take a look at it

00:19:19,919 --> 00:19:24,160
i've tried to pass that through

00:19:22,000 --> 00:19:26,480
and it gives me this nice error message

00:19:24,160 --> 00:19:29,360
which was what you saw in the previous

00:19:26,480 --> 00:19:31,600
uh slide of what what my message my

00:19:29,360 --> 00:19:35,520
personalized message was

00:19:31,600 --> 00:19:37,120
so with all that being said i want to

00:19:35,520 --> 00:19:39,440
take also a step back and give some

00:19:37,120 --> 00:19:42,880
pointers on what we've experienced

00:19:39,440 --> 00:19:44,480
with customers when doing this is uh

00:19:42,880 --> 00:19:46,640
once you create the policies you want to

00:19:44,480 --> 00:19:48,559
look at it long term

00:19:46,640 --> 00:19:50,240
so when you create one policy you know

00:19:48,559 --> 00:19:52,000
other problems are going to come up

00:19:50,240 --> 00:19:54,640
so you want your policies to be somewhat

00:19:52,000 --> 00:19:56,799
open-ended that you can

00:19:54,640 --> 00:19:57,679
update them later that you can add to

00:19:56,799 --> 00:19:59,440
them later

00:19:57,679 --> 00:20:01,760
that you can also modify them so you

00:19:59,440 --> 00:20:03,360
want to make sure that your policies are

00:20:01,760 --> 00:20:06,720
not so rigid

00:20:03,360 --> 00:20:08,960
that it makes it difficult to update as

00:20:06,720 --> 00:20:10,720
your circumstances change in the future

00:20:08,960 --> 00:20:13,280
or as your kubernetes cost

00:20:10,720 --> 00:20:15,039
clusters mature and your developers

00:20:13,280 --> 00:20:16,880
mature right with kubernetes

00:20:15,039 --> 00:20:18,320
so that's one thing that we've learned

00:20:16,880 --> 00:20:20,640
also testing

00:20:18,320 --> 00:20:21,840
with the in cluster right something like

00:20:20,640 --> 00:20:22,880
this where you see

00:20:21,840 --> 00:20:24,400
you want to make sure that you're

00:20:22,880 --> 00:20:25,120
testing a cluster that no one else is

00:20:24,400 --> 00:20:26,799
using

00:20:25,120 --> 00:20:28,240
because if you block something that

00:20:26,799 --> 00:20:29,760
we've run into this where

00:20:28,240 --> 00:20:31,360
you know you're you might be testing

00:20:29,760 --> 00:20:32,960
with someone else and they might try to

00:20:31,360 --> 00:20:34,240
run something and it blocks it actually

00:20:32,960 --> 00:20:35,520
open does a great job and actually

00:20:34,240 --> 00:20:36,799
blocks them so

00:20:35,520 --> 00:20:38,559
you want to make sure you're testing in

00:20:36,799 --> 00:20:42,000
a singular cluster

00:20:38,559 --> 00:20:42,960
and um and another another tip that we

00:20:42,000 --> 00:20:46,080
learned

00:20:42,960 --> 00:20:48,400
through this process is that

00:20:46,080 --> 00:20:50,080
that opa is is always changing so you

00:20:48,400 --> 00:20:52,159
want to make sure you're up to date

00:20:50,080 --> 00:20:53,760
with it you might also want to consider

00:20:52,159 --> 00:20:56,799
putting oppa into your

00:20:53,760 --> 00:20:57,840
ci cd cd pipeline we've seen customers

00:20:56,799 --> 00:21:00,159
do that where

00:20:57,840 --> 00:21:02,080
they they have a nice pipeline on how to

00:21:00,159 --> 00:21:04,000
deploy these clusters these policies to

00:21:02,080 --> 00:21:05,760
their cluster through cicd

00:21:04,000 --> 00:21:07,440
so things like that make it a lot easier

00:21:05,760 --> 00:21:10,880
than manually going in

00:21:07,440 --> 00:21:13,200
and deploying each policy as a as a

00:21:10,880 --> 00:21:14,080
config map right for example and then

00:21:13,200 --> 00:21:15,600
lastly uh

00:21:14,080 --> 00:21:17,120
just thinking about the future of

00:21:15,600 --> 00:21:19,200
gatekeeper you want to

00:21:17,120 --> 00:21:20,159
make sure whatever policy you create now

00:21:19,200 --> 00:21:22,400
that you can

00:21:20,159 --> 00:21:24,080
convert them to gatekeeper templates and

00:21:22,400 --> 00:21:25,360
constraints in the future

00:21:24,080 --> 00:21:27,200
so that's something that we've had

00:21:25,360 --> 00:21:31,520
customers think about

00:21:27,200 --> 00:21:35,679
uh let's see last part to this is

00:21:31,520 --> 00:21:39,440
um oops hold on one second there we go

00:21:35,679 --> 00:21:42,840
um i want to also mention that

00:21:39,440 --> 00:21:46,720
oh that uh strata has a

00:21:42,840 --> 00:21:46,720
oh on oliver gotta switch to

00:21:47,679 --> 00:21:50,480
one second here

00:21:52,159 --> 00:21:55,600
there we go so strata is the company

00:21:55,200 --> 00:21:57,760
that

00:21:55,600 --> 00:21:59,840
has the maintainers of opa but they also

00:21:57,760 --> 00:22:00,640
do have a nice ui that they've been

00:21:59,840 --> 00:22:03,200
developing

00:22:00,640 --> 00:22:06,400
over the last couple of months i've seen

00:22:03,200 --> 00:22:09,039
where you can take your centralized

00:22:06,400 --> 00:22:10,640
policies right and get a nice ui to them

00:22:09,039 --> 00:22:11,760
and i think this is something that it's

00:22:10,640 --> 00:22:13,919
worth checking out

00:22:11,760 --> 00:22:15,280
for your team if your team is uh looking

00:22:13,919 --> 00:22:17,760
to have more of a user

00:22:15,280 --> 00:22:19,919
interface experience versus command line

00:22:17,760 --> 00:22:23,679
experience

00:22:19,919 --> 00:22:25,200
and then one other piece is

00:22:23,679 --> 00:22:27,280
how do you get involved what's next

00:22:25,200 --> 00:22:29,600
steps just go straight to github

00:22:27,280 --> 00:22:30,799
go to the slack channel go to the

00:22:29,600 --> 00:22:33,840
documentation

00:22:30,799 --> 00:22:35,600
oppa is a very great community i've had

00:22:33,840 --> 00:22:36,159
a blast working with the people on the

00:22:35,600 --> 00:22:38,080
team

00:22:36,159 --> 00:22:39,919
and they're very responsive and the

00:22:38,080 --> 00:22:42,320
community is growing looking to grow

00:22:39,919 --> 00:22:45,039
looking for help looking for new ideas

00:22:42,320 --> 00:22:47,280
so i definitely suggest if you have time

00:22:45,039 --> 00:22:50,720
to take a look at all of the community

00:22:47,280 --> 00:22:54,080
activities and get involved that way

00:22:50,720 --> 00:22:56,480
so all that being said thank you and

00:22:54,080 --> 00:22:57,840
had a great time presenting today and

00:22:56,480 --> 00:23:01,120
we'll look forward to the q

00:22:57,840 --> 00:23:09,840
a thank you bye

00:23:01,120 --> 00:23:09,840
thank you everyone

00:23:43,520 --> 00:23:51,120
okay thanks uh oliver and

00:23:46,720 --> 00:23:54,159
rachel for the great talk thank you

00:23:51,120 --> 00:23:57,360
thank you no problem

00:23:54,159 --> 00:24:01,039
and uh yeah

00:23:57,360 --> 00:24:03,919
uh do we have the qa session

00:24:01,039 --> 00:24:04,880
yes oh okay let's go ahead let's go

00:24:03,919 --> 00:24:08,320
ahead and check the

00:24:04,880 --> 00:24:11,840
qa zone in zoom uh okay

00:24:08,320 --> 00:24:11,840
yep there are there is one question

00:24:13,279 --> 00:24:19,840
how can i set open best practices in ci

00:24:16,840 --> 00:24:19,840
cd

00:24:22,960 --> 00:24:26,400
i didn't see the q a session there um so

00:24:25,600 --> 00:24:28,799
yeah so

00:24:26,400 --> 00:24:29,520
one way that i've seen the customer use

00:24:28,799 --> 00:24:33,200
it as

00:24:29,520 --> 00:24:37,120
um with with their jenkins city platform

00:24:33,200 --> 00:24:39,600
is that every time a cluster is created

00:24:37,120 --> 00:24:40,720
they have opa a installed right through

00:24:39,600 --> 00:24:43,120
their ci cd

00:24:40,720 --> 00:24:44,240
pla platform through helm charts and

00:24:43,120 --> 00:24:46,480
they also then

00:24:44,240 --> 00:24:47,760
deploy the policies automatically you

00:24:46,480 --> 00:24:49,919
know they deployed the

00:24:47,760 --> 00:24:50,880
big maps right the policies as

00:24:49,919 --> 00:24:52,880
configmaps

00:24:50,880 --> 00:24:55,120
so that was one way that they they chose

00:24:52,880 --> 00:25:01,840
to do it

00:24:55,120 --> 00:25:01,840
does that answer your question

00:25:05,520 --> 00:25:08,960
i would say so and then i guess you can

00:25:07,279 --> 00:25:11,039
um you know you can edit those

00:25:08,960 --> 00:25:12,880
those policies right um and then just

00:25:11,039 --> 00:25:14,000
think they can just like blend into your

00:25:12,880 --> 00:25:16,720
ci cd pipeline

00:25:14,000 --> 00:25:17,440
as those policies change yeah and grow

00:25:16,720 --> 00:25:19,360
because

00:25:17,440 --> 00:25:22,320
i guess a lot of strategies implementing

00:25:19,360 --> 00:25:24,080
sort of a minimum set of policies first

00:25:22,320 --> 00:25:25,279
and and then start building on those

00:25:24,080 --> 00:25:26,559
policies once you kind of get

00:25:25,279 --> 00:25:28,320
comfortable about where you're going to

00:25:26,559 --> 00:25:29,919
implement those whether they're an opa

00:25:28,320 --> 00:25:32,480
policy or whether they're

00:25:29,919 --> 00:25:43,840
you know you know kubernetes sort of the

00:25:32,480 --> 00:25:43,840
mission controller type policy

00:25:44,640 --> 00:25:58,720
any other questions

00:25:56,480 --> 00:26:01,440
last session of the of the conference is

00:25:58,720 --> 00:26:01,440
a little bit quiet

00:26:03,200 --> 00:26:07,600
yeah well um we have we have another

00:26:05,840 --> 00:26:09,919
like uh

00:26:07,600 --> 00:26:11,600
another like a broadcast channel i mean

00:26:09,919 --> 00:26:14,480
outside of this zoom so

00:26:11,600 --> 00:26:15,279
lots of people are outside uh from this

00:26:14,480 --> 00:26:18,640
zoom meeting

00:26:15,279 --> 00:26:20,880
yes yeah yeah so yeah if you have any

00:26:18,640 --> 00:26:21,200
questions you can email to our speakers

00:26:20,880 --> 00:26:23,039
and

00:26:21,200 --> 00:26:26,880
then they can answer any of your

00:26:23,039 --> 00:26:30,480
questions uh and thank you oliver and uh

00:26:26,880 --> 00:26:32,720
and rachel no problem yeah for the

00:26:30,480 --> 00:26:34,080
great partner yeah thank you part of

00:26:32,720 --> 00:26:39,600
this conference thank you

00:26:34,080 --> 00:26:39,600

YouTube URL: https://www.youtube.com/watch?v=s2NY7TLqYLM


