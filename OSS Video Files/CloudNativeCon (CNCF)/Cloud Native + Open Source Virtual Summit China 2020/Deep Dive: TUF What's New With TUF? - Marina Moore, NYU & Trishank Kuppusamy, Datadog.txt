Title: Deep Dive: TUF What's New With TUF? - Marina Moore, NYU & Trishank Kuppusamy, Datadog
Publication date: 2020-09-11
Playlist: Cloud Native + Open Source Virtual Summit China 2020
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Deep Dive: TUF What's New With TUF? - Marina Moore, NYU & Trishank Kuppusamy, Datadog 

This talk will dive into exciting new and upcoming features in The Update Framework (TUF) specification, a framework for secure software updates that has been implemented across the could native space through the Notary project. The talk will discuss features that have been added to make TUF more flexible and usable to support new implementations, including adoption by the Python Packaging Index (PyPI). If you are interested in TUF or cloud native security, join us for some in-depth technical descriptions, security analysis, and to get involved in TUF. 

https://sched.co/cpBE
Captions: 
	00:00:01,680 --> 00:00:05,200
okay hi welcome

00:00:03,439 --> 00:00:07,120
um we're going to talk today about a

00:00:05,200 --> 00:00:07,680
deep dive into tough what's new about

00:00:07,120 --> 00:00:10,639
tough

00:00:07,680 --> 00:00:11,360
i'm marina moore i'm a phd student at

00:00:10,639 --> 00:00:13,040
nyu

00:00:11,360 --> 00:00:14,639
and i'll present to be presenting here

00:00:13,040 --> 00:00:17,680
with treshank

00:00:14,639 --> 00:00:20,640
yeah hi thanks thanks thanks marina

00:00:17,680 --> 00:00:21,359
um so i used to work at nyu on tough uh

00:00:20,640 --> 00:00:24,800
with

00:00:21,359 --> 00:00:26,800
with marina too and uh with our advisor

00:00:24,800 --> 00:00:28,000
justin capos and where particularly i

00:00:26,800 --> 00:00:31,840
did my research on

00:00:28,000 --> 00:00:33,600
a fork of tough call update uh which is

00:00:31,840 --> 00:00:35,280
software securing software updates for

00:00:33,600 --> 00:00:37,200
ground vehicles so that was a lot of fun

00:00:35,280 --> 00:00:38,960
and now i'm a staff security engineer at

00:00:37,200 --> 00:00:41,600
datadog

00:00:38,960 --> 00:00:42,800
please go ahead marina okay so let's get

00:00:41,600 --> 00:00:44,399
started i think we'll get started with a

00:00:42,800 --> 00:00:45,680
bit of background brought tough

00:00:44,399 --> 00:00:48,239
and then go into kind of some of the

00:00:45,680 --> 00:00:53,120
current um evolution of the project

00:00:48,239 --> 00:00:53,120
so here we go go

00:00:53,280 --> 00:00:57,440
so first of all go a bit into the

00:00:55,039 --> 00:00:59,760
problem that tuff is solving

00:00:57,440 --> 00:01:01,039
so software updates are a really key

00:00:59,760 --> 00:01:03,840
feature for

00:01:01,039 --> 00:01:04,960
security of applications experts agree

00:01:03,840 --> 00:01:05,600
that this is like the number one thing

00:01:04,960 --> 00:01:07,840
you can do

00:01:05,600 --> 00:01:08,880
to keep yourself secure on the internet

00:01:07,840 --> 00:01:10,560
because every time

00:01:08,880 --> 00:01:12,560
a vulnerability is found in a piece of

00:01:10,560 --> 00:01:14,640
software in order to get a patch out to

00:01:12,560 --> 00:01:17,600
users they have to update their software

00:01:14,640 --> 00:01:18,159
to get the new version of the software

00:01:17,600 --> 00:01:19,840
however

00:01:18,159 --> 00:01:22,320
the actual software update process

00:01:19,840 --> 00:01:24,240
itself has a few security problems that

00:01:22,320 --> 00:01:26,799
also need to be considered

00:01:24,240 --> 00:01:28,159
um as well and if these are not

00:01:26,799 --> 00:01:30,159
considered you get what's called a

00:01:28,159 --> 00:01:31,520
repository compromise so if

00:01:30,159 --> 00:01:33,439
the repository that's hosting your

00:01:31,520 --> 00:01:35,840
software updates is compromised

00:01:33,439 --> 00:01:37,759
if the images on the repository can be

00:01:35,840 --> 00:01:38,720
replaced with malicious images or

00:01:37,759 --> 00:01:41,920
malware

00:01:38,720 --> 00:01:43,680
or something like that which can lead to

00:01:41,920 --> 00:01:46,640
vulnerabilities in all this all the

00:01:43,680 --> 00:01:48,560
systems that are using your repository

00:01:46,640 --> 00:01:49,759
um this happens actually in practice

00:01:48,560 --> 00:01:51,600
fairly often

00:01:49,759 --> 00:01:53,520
pretty recently docker hub had a

00:01:51,600 --> 00:01:56,719
password db compromise

00:01:53,520 --> 00:01:57,680
in 2019 that luckily they were actually

00:01:56,719 --> 00:02:00,479
using

00:01:57,680 --> 00:02:01,200
tough through docker content trust and

00:02:00,479 --> 00:02:03,920
because of that

00:02:01,200 --> 00:02:05,600
um the impact of this was mitigated but

00:02:03,920 --> 00:02:07,600
this exactly but this spectre has been

00:02:05,600 --> 00:02:09,920
used to spread

00:02:07,600 --> 00:02:11,200
malware to like the flame malware if

00:02:09,920 --> 00:02:11,920
you've heard of that that was spread

00:02:11,200 --> 00:02:13,440
through

00:02:11,920 --> 00:02:17,440
a repository compromise and there are

00:02:13,440 --> 00:02:17,440
other large scale ones

00:02:17,599 --> 00:02:21,120
so the goal of tough is to provide

00:02:19,840 --> 00:02:24,000
compromised resilience

00:02:21,120 --> 00:02:25,760
it's basically impossible to prevent

00:02:24,000 --> 00:02:27,440
every single repository compromise

00:02:25,760 --> 00:02:29,120
every to basically to close every single

00:02:27,440 --> 00:02:31,519
security hole your application

00:02:29,120 --> 00:02:33,040
could ever have so instead what we try

00:02:31,519 --> 00:02:35,120
to do is

00:02:33,040 --> 00:02:36,400
have compromised resilience so that if

00:02:35,120 --> 00:02:38,560
the if and when

00:02:36,400 --> 00:02:40,640
your repository is compromised be able

00:02:38,560 --> 00:02:41,280
to detect that compromise and recover

00:02:40,640 --> 00:02:43,840
from it

00:02:41,280 --> 00:02:46,319
in a secure way to um to minimize the

00:02:43,840 --> 00:02:46,319
impact

00:02:46,879 --> 00:02:51,920
so to do so we um present the update

00:02:50,000 --> 00:02:53,599
framework are tough

00:02:51,920 --> 00:02:55,120
um so a bit of background about the

00:02:53,599 --> 00:02:58,080
terminology we'll be using

00:02:55,120 --> 00:02:59,360
in this talk so first of all we talk

00:02:58,080 --> 00:03:01,120
about this thing called repository and

00:02:59,360 --> 00:03:03,920
repository compromise

00:03:01,120 --> 00:03:04,239
and what what we mean by repository is

00:03:03,920 --> 00:03:06,400
the

00:03:04,239 --> 00:03:07,440
entity that contains your images and

00:03:06,400 --> 00:03:10,319
metadata

00:03:07,440 --> 00:03:11,760
and in the context of oci this is

00:03:10,319 --> 00:03:12,560
actually like the registry the oci

00:03:11,760 --> 00:03:15,599
registry

00:03:12,560 --> 00:03:18,159
rather than a container repository

00:03:15,599 --> 00:03:20,000
in that context but on this repository

00:03:18,159 --> 00:03:21,599
what you have is an image which is kind

00:03:20,000 --> 00:03:23,760
of the smallest unit of an update

00:03:21,599 --> 00:03:24,720
this is the thing that you want clients

00:03:23,760 --> 00:03:28,159
to install

00:03:24,720 --> 00:03:30,560
and um and run on their on their

00:03:28,159 --> 00:03:32,080
program and you also have some metadata

00:03:30,560 --> 00:03:32,640
which is kind of information about these

00:03:32,080 --> 00:03:35,200
images

00:03:32,640 --> 00:03:36,480
or about other metadata files and this

00:03:35,200 --> 00:03:38,799
metadata can contain

00:03:36,480 --> 00:03:41,200
things like cryptographic caches file

00:03:38,799 --> 00:03:44,959
sizes version numbers

00:03:41,200 --> 00:03:44,959
signatures anything like that

00:03:45,360 --> 00:03:49,120
okay so we're going to present the

00:03:46,959 --> 00:03:51,360
update framework and the goal of this

00:03:49,120 --> 00:03:52,319
framework is to provide authenticity and

00:03:51,360 --> 00:03:54,000
integrity

00:03:52,319 --> 00:03:56,959
even in the event of a repository

00:03:54,000 --> 00:03:57,519
compromise and to do so it's based on a

00:03:56,959 --> 00:03:59,360
variety

00:03:57,519 --> 00:04:00,560
it uses a variety of design principles

00:03:59,360 --> 00:04:02,959
that are baked in

00:04:00,560 --> 00:04:04,000
from the ground up in order to achieve

00:04:02,959 --> 00:04:06,319
these goals

00:04:04,000 --> 00:04:08,239
and i'll focus on a few of these in the

00:04:06,319 --> 00:04:10,720
next few slides

00:04:08,239 --> 00:04:12,480
for more information about tough and the

00:04:10,720 --> 00:04:14,879
kind of the problem that it's solving

00:04:12,480 --> 00:04:15,840
this framework was first introduced in

00:04:14,879 --> 00:04:19,280
ccs

00:04:15,840 --> 00:04:22,400
in a paper in 2010 so you can find

00:04:19,280 --> 00:04:23,759
a lot more detail there

00:04:22,400 --> 00:04:26,240
so yeah the first principle i'll talk

00:04:23,759 --> 00:04:28,880
about is the separation of duties

00:04:26,240 --> 00:04:29,840
the idea here is that you don't want any

00:04:28,880 --> 00:04:31,280
single entity

00:04:29,840 --> 00:04:33,360
to be in charge of the security for your

00:04:31,280 --> 00:04:34,400
entire system because then in the event

00:04:33,360 --> 00:04:36,320
of a compromise

00:04:34,400 --> 00:04:38,960
compromise of that one entity means all

00:04:36,320 --> 00:04:40,720
of your security is now gone

00:04:38,960 --> 00:04:42,320
so tuff does this through the use of

00:04:40,720 --> 00:04:44,080
four different key roles

00:04:42,320 --> 00:04:46,960
and each of these roles is responsible

00:04:44,080 --> 00:04:50,400
for signing different pieces of metadata

00:04:46,960 --> 00:04:52,479
on the on the repository

00:04:50,400 --> 00:04:54,000
so i'll go through each of those first

00:04:52,479 --> 00:04:56,240
we have the targets role

00:04:54,000 --> 00:04:57,680
which is if this contains information

00:04:56,240 --> 00:04:59,199
about the images themselves

00:04:57,680 --> 00:05:01,600
so this is what you when you think about

00:04:59,199 --> 00:05:03,199
like cryptographic hashes and file sizes

00:05:01,600 --> 00:05:06,320
and other information about the actual

00:05:03,199 --> 00:05:08,080
images that you want people to install

00:05:06,320 --> 00:05:10,080
and one of the cool features of tough is

00:05:08,080 --> 00:05:11,440
that the um the targets role

00:05:10,080 --> 00:05:13,759
can actually be split into multiple

00:05:11,440 --> 00:05:14,320
different roles each one can delegate

00:05:13,759 --> 00:05:16,880
trust

00:05:14,320 --> 00:05:18,320
to other roles so that there isn't even

00:05:16,880 --> 00:05:20,240
a single entity in charge of signing

00:05:18,320 --> 00:05:24,720
every single image on the repository

00:05:20,240 --> 00:05:26,720
that can also be further separated

00:05:24,720 --> 00:05:28,960
we have the snapshot role which is in

00:05:26,720 --> 00:05:31,680
charge of

00:05:28,960 --> 00:05:32,639
consistency of images on the repository

00:05:31,680 --> 00:05:34,479
to make sure that

00:05:32,639 --> 00:05:35,919
the view of the repository that a user

00:05:34,479 --> 00:05:38,880
is getting includes

00:05:35,919 --> 00:05:41,440
the actual state of the repository at a

00:05:38,880 --> 00:05:41,440
given time

00:05:41,840 --> 00:05:45,280
then we have the timestamp rule which

00:05:43,919 --> 00:05:47,120
contains information about the

00:05:45,280 --> 00:05:47,759
timeliness of updates so it tells you

00:05:47,120 --> 00:05:49,440
that

00:05:47,759 --> 00:05:50,800
these updates are actually current they

00:05:49,440 --> 00:05:51,600
weren't from you know three years ago

00:05:50,800 --> 00:05:53,840
they were from

00:05:51,600 --> 00:05:55,039
today and this is the current state and

00:05:53,840 --> 00:05:56,720
this also can be used

00:05:55,039 --> 00:05:58,479
to tell you to tell clients when there's

00:05:56,720 --> 00:05:59,680
a new update to be installed because if

00:05:58,479 --> 00:06:02,080
this changes

00:05:59,680 --> 00:06:02,960
and if it's signing a new set of images

00:06:02,080 --> 00:06:04,319
that means that

00:06:02,960 --> 00:06:07,759
there's something new new and that

00:06:04,319 --> 00:06:09,600
people should you know do an update

00:06:07,759 --> 00:06:11,440
and finally and kind of most importantly

00:06:09,600 --> 00:06:13,919
we have the root role which is the root

00:06:11,440 --> 00:06:17,120
of trust for the entire system

00:06:13,919 --> 00:06:18,800
um it tells the client

00:06:17,120 --> 00:06:20,639
which keys to trust for all these other

00:06:18,800 --> 00:06:22,080
roles and it's kind of the root of the

00:06:20,639 --> 00:06:23,600
security for the system

00:06:22,080 --> 00:06:25,520
and because of the way this is all

00:06:23,600 --> 00:06:27,759
separated into these different pieces

00:06:25,520 --> 00:06:29,440
the root role can be protected even more

00:06:27,759 --> 00:06:30,880
strongly than the other roles and it can

00:06:29,440 --> 00:06:32,880
be updated less frequently

00:06:30,880 --> 00:06:36,400
which means that you can maintain this

00:06:32,880 --> 00:06:36,400
higher level of security

00:06:36,720 --> 00:06:39,520
yeah that's the those are all the

00:06:38,160 --> 00:06:43,199
different pieces that come together to

00:06:39,520 --> 00:06:43,199
get the separation of duties

00:06:43,280 --> 00:06:47,120
the next principle that we have is

00:06:45,440 --> 00:06:49,919
threshold signatures

00:06:47,120 --> 00:06:51,599
so within each of these roles on the

00:06:49,919 --> 00:06:53,280
repository

00:06:51,599 --> 00:06:55,199
you don't need just a single the single

00:06:53,280 --> 00:06:58,240
signature on it so for example

00:06:55,199 --> 00:06:59,919
if you have a target's role

00:06:58,240 --> 00:07:01,360
you could have four different entities

00:06:59,919 --> 00:07:03,120
that are allowed to sign

00:07:01,360 --> 00:07:05,199
for the targets rule and you can require

00:07:03,120 --> 00:07:06,960
that at least three of them

00:07:05,199 --> 00:07:08,960
have valid signatures on the targets

00:07:06,960 --> 00:07:11,280
file before it's trusted by the client

00:07:08,960 --> 00:07:12,960
so that if any single key is compromised

00:07:11,280 --> 00:07:13,360
that can't lead to a compromise of any

00:07:12,960 --> 00:07:15,919
role

00:07:13,360 --> 00:07:19,039
because you need three people to agree

00:07:15,919 --> 00:07:19,039
on a piece of metadata

00:07:19,199 --> 00:07:22,960
next we have explicit and implicit

00:07:21,039 --> 00:07:24,639
relocation of keys

00:07:22,960 --> 00:07:26,479
so this is also important for in the

00:07:24,639 --> 00:07:27,039
case of a key compromise there's a way

00:07:26,479 --> 00:07:28,800
to

00:07:27,039 --> 00:07:30,400
get rid of these bad bad keys and tell

00:07:28,800 --> 00:07:32,800
people what new key

00:07:30,400 --> 00:07:34,479
to trust instead so there's implicit

00:07:32,800 --> 00:07:37,199
revocation

00:07:34,479 --> 00:07:37,520
by having expiration times on all keys

00:07:37,199 --> 00:07:40,080
so

00:07:37,520 --> 00:07:41,440
after some period of time it can be like

00:07:40,080 --> 00:07:43,440
weeks months years

00:07:41,440 --> 00:07:44,960
a key will expire and then you have a

00:07:43,440 --> 00:07:47,120
new key has to be

00:07:44,960 --> 00:07:48,639
signed by the system and the trust has

00:07:47,120 --> 00:07:50,479
to be established

00:07:48,639 --> 00:07:52,720
and there's also explicit relocation so

00:07:50,479 --> 00:07:54,160
that if a compromise happens or if

00:07:52,720 --> 00:07:56,240
somebody loses a key

00:07:54,160 --> 00:07:58,400
or if anything else goes wrong there are

00:07:56,240 --> 00:08:00,479
ways to

00:07:58,400 --> 00:08:04,000
to explicitly delegate to a new key and

00:08:00,479 --> 00:08:04,000
this is built in from the ground up

00:08:05,280 --> 00:08:10,160
finally we have minimizing risk through

00:08:08,000 --> 00:08:13,759
the use of offline keys

00:08:10,160 --> 00:08:15,680
so because of the separation of duties

00:08:13,759 --> 00:08:17,199
um things like the root world can be um

00:08:15,680 --> 00:08:19,520
updated less often

00:08:17,199 --> 00:08:21,360
which means that um you're able to

00:08:19,520 --> 00:08:22,000
assign them with offline keys and these

00:08:21,360 --> 00:08:23,759
keys

00:08:22,000 --> 00:08:25,039
can never be stored in a way such that

00:08:23,759 --> 00:08:28,400
they can never be excess

00:08:25,039 --> 00:08:30,639
accessed um on the internet so you can

00:08:28,400 --> 00:08:32,320
you know use them offline and then you

00:08:30,639 --> 00:08:33,760
know put them on a in a device and put

00:08:32,320 --> 00:08:35,919
that in a locked safe

00:08:33,760 --> 00:08:37,839
somewhere so it's totally inaccessible

00:08:35,919 --> 00:08:40,959
and then you can use that metadata

00:08:37,839 --> 00:08:43,440
to generate your trust and put it online

00:08:40,959 --> 00:08:44,480
but then um this actual key is stored

00:08:43,440 --> 00:08:46,720
offline

00:08:44,480 --> 00:08:47,600
and this means that if anyone wants to

00:08:46,720 --> 00:08:49,440
compromise

00:08:47,600 --> 00:08:51,360
this offline key they can't actually do

00:08:49,440 --> 00:08:53,440
it online they'd have to go

00:08:51,360 --> 00:08:56,399
go find your lock safe and do some kind

00:08:53,440 --> 00:08:58,399
of oceans 11

00:08:56,399 --> 00:09:01,200
stuff to get your your system

00:08:58,399 --> 00:09:01,200
compromised

00:09:01,680 --> 00:09:04,880
and finally tuff supports the diversity

00:09:03,440 --> 00:09:08,000
of cryptographic algorithms

00:09:04,880 --> 00:09:09,680
which means that you can use

00:09:08,000 --> 00:09:11,360
first of all any algorithm that you

00:09:09,680 --> 00:09:12,959
would like in your system and also

00:09:11,360 --> 00:09:14,800
multiple different algorithms for things

00:09:12,959 --> 00:09:18,000
like signing and hashing

00:09:14,800 --> 00:09:19,279
so that your system is secure as long as

00:09:18,000 --> 00:09:21,600
at least one of these algorithms

00:09:19,279 --> 00:09:22,640
is secure which is very likely to be

00:09:21,600 --> 00:09:24,959
true

00:09:22,640 --> 00:09:26,000
and this even allows you to use things

00:09:24,959 --> 00:09:29,200
like post quantum

00:09:26,000 --> 00:09:30,240
crypto or any other um new crypto

00:09:29,200 --> 00:09:32,000
techniques

00:09:30,240 --> 00:09:33,600
as they are as they come forward and

00:09:32,000 --> 00:09:36,880
those will still be able to work

00:09:33,600 --> 00:09:38,640
within this system

00:09:36,880 --> 00:09:40,240
okay now i'll pass it on to tree shank

00:09:38,640 --> 00:09:41,680
to talk about um the current state of

00:09:40,240 --> 00:09:44,720
the project

00:09:41,680 --> 00:09:46,800
great thanks thanks marina uh

00:09:44,720 --> 00:09:48,560
so yes let's talk about so now that

00:09:46,800 --> 00:09:50,399
marina has presented about how tough

00:09:48,560 --> 00:09:50,720
roughly works especially in the context

00:09:50,399 --> 00:09:52,640
of

00:09:50,720 --> 00:09:54,240
container image registries or even any

00:09:52,640 --> 00:09:56,080
other artifact you like

00:09:54,240 --> 00:09:57,600
let's talk about where we are now where

00:09:56,080 --> 00:10:00,800
we're going next

00:09:57,600 --> 00:10:03,440
uh next slide please

00:10:00,800 --> 00:10:06,000
thank you so the first good news is that

00:10:03,440 --> 00:10:08,480
we graduated on the cncf project we were

00:10:06,000 --> 00:10:10,000
accepted into it in 2017 and i'm very

00:10:08,480 --> 00:10:12,560
very pleased to say

00:10:10,000 --> 00:10:14,640
that we're the ninth project to graduate

00:10:12,560 --> 00:10:17,040
after so many other

00:10:14,640 --> 00:10:19,120
you know preliminary projects we're also

00:10:17,040 --> 00:10:21,839
the first one to get the best practices

00:10:19,120 --> 00:10:23,440
uh cii badge uh for silver badge and

00:10:21,839 --> 00:10:25,120
we're working hard to get the gold batch

00:10:23,440 --> 00:10:26,720
hopefully coming next

00:10:25,120 --> 00:10:28,560
um a huge thanks to all of our

00:10:26,720 --> 00:10:29,440
contributors we could not have done this

00:10:28,560 --> 00:10:32,880
without you

00:10:29,440 --> 00:10:35,360
so thank you

00:10:32,880 --> 00:10:36,640
and so let's talk about let's talk next

00:10:35,360 --> 00:10:39,040
about some deployments

00:10:36,640 --> 00:10:40,959
all and new i think all of you are

00:10:39,040 --> 00:10:43,120
probably most familiar with

00:10:40,959 --> 00:10:44,079
perhaps the most popular incarnation of

00:10:43,120 --> 00:10:46,240
stuff is docker

00:10:44,079 --> 00:10:48,160
content trust which uses a specific tool

00:10:46,240 --> 00:10:50,480
called notary

00:10:48,160 --> 00:10:51,600
which is used to sign container images

00:10:50,480 --> 00:10:53,680
most commonly

00:10:51,600 --> 00:10:54,959
and you might have seen some registries

00:10:53,680 --> 00:10:58,399
supported already

00:10:54,959 --> 00:11:01,360
such as azure quay

00:10:58,399 --> 00:11:03,040
ibm docker hub of course and also harbor

00:11:01,360 --> 00:11:05,200
which is another cncf project that we'll

00:11:03,040 --> 00:11:08,720
talk about shortly

00:11:05,200 --> 00:11:10,320
next slide please um so

00:11:08,720 --> 00:11:11,920
the first interesting development over

00:11:10,320 --> 00:11:13,920
the past year uh is

00:11:11,920 --> 00:11:16,399
something called amazon bottle rocket

00:11:13,920 --> 00:11:18,320
which is a special purpose container os

00:11:16,399 --> 00:11:20,399
that that amazon developed

00:11:18,320 --> 00:11:22,000
uh it was launched just a few months ago

00:11:20,399 --> 00:11:24,160
on march 10th and it's basically

00:11:22,000 --> 00:11:26,240
designed for security consistency

00:11:24,160 --> 00:11:28,399
and operability now the interesting

00:11:26,240 --> 00:11:29,920
thing is that it's one of the few

00:11:28,399 --> 00:11:32,320
operating systems that

00:11:29,920 --> 00:11:33,279
fundamentally uses stuff out of the box

00:11:32,320 --> 00:11:35,040
to uh

00:11:33,279 --> 00:11:36,399
to secure software updates which is

00:11:35,040 --> 00:11:37,920
great which we think

00:11:36,399 --> 00:11:40,079
should be the future of all operating

00:11:37,920 --> 00:11:42,320
systems going forward

00:11:40,079 --> 00:11:44,240
they particularly wrote a rust library

00:11:42,320 --> 00:11:46,320
for tough called tough

00:11:44,240 --> 00:11:47,839
which is a very clever pun and you can

00:11:46,320 --> 00:11:50,399
visit the link below to get more

00:11:47,839 --> 00:11:50,399
information

00:11:50,800 --> 00:11:53,839
uh the next interesting development is

00:11:52,560 --> 00:11:55,360
something called cloud native

00:11:53,839 --> 00:11:57,920
application bundles which

00:11:55,360 --> 00:11:59,040
we believe will interest a lot of you uh

00:11:57,920 --> 00:12:02,800
in particular it's a

00:11:59,040 --> 00:12:05,920
package format to facilitate facilitate

00:12:02,800 --> 00:12:08,079
the bundling installing and and managing

00:12:05,920 --> 00:12:09,920
of container native apps

00:12:08,079 --> 00:12:11,519
right and all the services that support

00:12:09,920 --> 00:12:13,440
them too so for example

00:12:11,519 --> 00:12:15,440
you you could bundle your application as

00:12:13,440 --> 00:12:17,040
a bunch of related images such as your

00:12:15,440 --> 00:12:20,160
web app and your database

00:12:17,040 --> 00:12:23,279
images and so on and talk about how to

00:12:20,160 --> 00:12:25,920
install them on azure google or

00:12:23,279 --> 00:12:27,839
amazon and it's the same application

00:12:25,920 --> 00:12:30,320
that that's installed everywhere despite

00:12:27,839 --> 00:12:32,079
superficial cloud differences underneath

00:12:30,320 --> 00:12:34,240
and so the interesting thing is that

00:12:32,079 --> 00:12:35,360
uses stuff in a system project of ours

00:12:34,240 --> 00:12:37,279
called in dodo

00:12:35,360 --> 00:12:38,560
to secure the distribution of bundles

00:12:37,279 --> 00:12:41,120
end to end

00:12:38,560 --> 00:12:42,000
uh the the cnap securities pack i'm very

00:12:41,120 --> 00:12:45,120
happy to say was

00:12:42,000 --> 00:12:46,240
merged just last month uh many thanks to

00:12:45,120 --> 00:12:48,240
radu made and

00:12:46,240 --> 00:12:49,519
ralph kolache and microsoft for helping

00:12:48,240 --> 00:12:51,680
us to push this along

00:12:49,519 --> 00:12:54,800
so please please visit cnab.io to get

00:12:51,680 --> 00:12:54,800
more information on that

00:12:55,200 --> 00:12:58,240
the next interesting development is that

00:12:57,440 --> 00:13:02,000
so

00:12:58,240 --> 00:13:03,440
um two years ago we presented a kubecon

00:13:02,000 --> 00:13:05,360
north america

00:13:03,440 --> 00:13:07,200
about how datadog so first of all

00:13:05,360 --> 00:13:08,480
datadocs is sas platform that some of

00:13:07,200 --> 00:13:10,160
you may know

00:13:08,480 --> 00:13:12,240
that analyzes your infrastructure

00:13:10,160 --> 00:13:14,959
metrics and your application performance

00:13:12,240 --> 00:13:16,560
and logs for your devops purposes

00:13:14,959 --> 00:13:17,920
and in particular we have something

00:13:16,560 --> 00:13:19,600
called the agent which you install in

00:13:17,920 --> 00:13:20,959
your host and integrations are like

00:13:19,600 --> 00:13:21,360
plug-ins for the agent and let it

00:13:20,959 --> 00:13:23,839
collect

00:13:21,360 --> 00:13:24,800
even more metrics and logs and events

00:13:23,839 --> 00:13:26,639
and so on

00:13:24,800 --> 00:13:28,079
now the key thing that you need to know

00:13:26,639 --> 00:13:30,399
is that we use stuff

00:13:28,079 --> 00:13:31,519
and our system project in doto we

00:13:30,399 --> 00:13:33,200
believe this is the first in the

00:13:31,519 --> 00:13:34,959
industry as far as we can tell there's

00:13:33,200 --> 00:13:36,720
no trusted hardware here along

00:13:34,959 --> 00:13:39,199
well except for something called ub keys

00:13:36,720 --> 00:13:41,360
that the developer use but basically

00:13:39,199 --> 00:13:43,199
uh we can build our agent integrations

00:13:41,360 --> 00:13:44,560
and it is in fact happening today when

00:13:43,199 --> 00:13:45,600
you're using the agent to install or

00:13:44,560 --> 00:13:48,079
upgrade

00:13:45,600 --> 00:13:48,800
we build it and distribute it in such a

00:13:48,079 --> 00:13:51,440
way that

00:13:48,800 --> 00:13:52,959
any attack anywhere between our

00:13:51,440 --> 00:13:55,760
developers and end users

00:13:52,959 --> 00:13:57,600
you will be detected and prevented which

00:13:55,760 --> 00:13:59,920
is the sort of compromised resilient

00:13:57,600 --> 00:14:02,160
resilience that marina was talking about

00:13:59,920 --> 00:14:04,160
and some new features we were able to do

00:14:02,160 --> 00:14:06,959
this year was we basically

00:14:04,160 --> 00:14:08,560
uh using tough very easily uh associate

00:14:06,959 --> 00:14:09,519
different software supply chains with

00:14:08,560 --> 00:14:11,279
different packages

00:14:09,519 --> 00:14:13,839
without breaking backwards compatibility

00:14:11,279 --> 00:14:14,320
for end users and also revoke developer

00:14:13,839 --> 00:14:16,880
keys

00:14:14,320 --> 00:14:18,959
again without breaking uh packages for

00:14:16,880 --> 00:14:20,800
users who want those old packages

00:14:18,959 --> 00:14:24,000
uh so please visit the link below for

00:14:20,800 --> 00:14:24,000
more information on that

00:14:24,480 --> 00:14:29,519
uh next is google fuckshia which is an

00:14:27,519 --> 00:14:30,639
open source capability operating system

00:14:29,519 --> 00:14:32,480
from google

00:14:30,639 --> 00:14:34,240
um so the interesting thing is that just

00:14:32,480 --> 00:14:36,560
like amazon bottle rocket

00:14:34,240 --> 00:14:37,760
its software update system natively uses

00:14:36,560 --> 00:14:39,360
stuff

00:14:37,760 --> 00:14:41,040
which is which is very good which is

00:14:39,360 --> 00:14:42,839
what we believe the future operating

00:14:41,040 --> 00:14:45,760
system should do

00:14:42,839 --> 00:14:46,880
um so your operating system itself is

00:14:45,760 --> 00:14:49,120
compromised resilient

00:14:46,880 --> 00:14:51,040
in terms of updates um it they

00:14:49,120 --> 00:14:52,880
originally forked the gotough but and

00:14:51,040 --> 00:14:54,240
now they contribute and use something

00:14:52,880 --> 00:14:55,760
called rust stuff so if you're

00:14:54,240 --> 00:14:59,839
interested please visit

00:14:55,760 --> 00:14:59,839
the link below for more information

00:15:00,000 --> 00:15:03,839
harbor which is a sibling cncf project

00:15:02,720 --> 00:15:05,600
of ours

00:15:03,839 --> 00:15:08,240
their mission is to be the trusted cloud

00:15:05,600 --> 00:15:10,000
native registry for kubernetes

00:15:08,240 --> 00:15:11,920
and the interesting thing is that

00:15:10,000 --> 00:15:14,079
besides other security features such as

00:15:11,920 --> 00:15:15,120
scanning your images automatically for

00:15:14,079 --> 00:15:16,639
cves

00:15:15,120 --> 00:15:18,959
is that they also support content

00:15:16,639 --> 00:15:22,000
signing with docker content trust

00:15:18,959 --> 00:15:24,240
uh a variant of tough uh out of the box

00:15:22,000 --> 00:15:25,440
um and the good news is they graduated

00:15:24,240 --> 00:15:28,000
from the cncf

00:15:25,440 --> 00:15:31,199
uh just last month so congratulations

00:15:28,000 --> 00:15:31,199
this is fantastic news

00:15:32,399 --> 00:15:37,360
um notary so note 3v1 as we call it

00:15:36,160 --> 00:15:39,600
colloquially

00:15:37,360 --> 00:15:43,040
is the version of the tool that you use

00:15:39,600 --> 00:15:45,360
right now to do docker content trust

00:15:43,040 --> 00:15:47,360
the project itself is now looking to

00:15:45,360 --> 00:15:49,680
improve the usability and security for

00:15:47,360 --> 00:15:51,440
future future use cases that notary v1

00:15:49,680 --> 00:15:53,199
does not support out of the box

00:15:51,440 --> 00:15:54,800
and we have been working with them to

00:15:53,199 --> 00:15:56,480
leverage some new features and stuff

00:15:54,800 --> 00:15:58,800
that marina will be talking about

00:15:56,480 --> 00:16:00,560
shortly actually

00:15:58,800 --> 00:16:03,120
the long story short is please join us

00:16:00,560 --> 00:16:04,880
on the note 3 v2 channel and cncslack

00:16:03,120 --> 00:16:05,759
for more information we would love for

00:16:04,880 --> 00:16:07,360
you to join us

00:16:05,759 --> 00:16:09,360
particularly people from the harbor

00:16:07,360 --> 00:16:11,680
community which we think would be

00:16:09,360 --> 00:16:14,160
interested in this development so please

00:16:11,680 --> 00:16:16,160
visit us there

00:16:14,160 --> 00:16:18,959
last but not least we're very very

00:16:16,160 --> 00:16:22,480
excited to inform that pep 458 which we

00:16:18,959 --> 00:16:23,360
co-wrote marina and myself wrote um has

00:16:22,480 --> 00:16:25,600
been uh

00:16:23,360 --> 00:16:27,440
has been accepted into uh the python

00:16:25,600 --> 00:16:28,720
package index which many many container

00:16:27,440 --> 00:16:31,120
images use

00:16:28,720 --> 00:16:32,880
what this basically means is that we're

00:16:31,120 --> 00:16:36,079
building the first

00:16:32,880 --> 00:16:38,800
uh stepping stone right which is to

00:16:36,079 --> 00:16:40,800
secure the distribution of 246 000

00:16:38,800 --> 00:16:42,320
python packages projects

00:16:40,800 --> 00:16:44,079
um it's the first open source

00:16:42,320 --> 00:16:46,079
programming language we know that does

00:16:44,079 --> 00:16:49,199
this that basically uses stuff

00:16:46,079 --> 00:16:50,720
um to secure so even if you hack by bi

00:16:49,199 --> 00:16:52,160
the damage that attackers can do is

00:16:50,720 --> 00:16:53,839
limited this is fantastic this is

00:16:52,160 --> 00:16:56,079
basically another first

00:16:53,839 --> 00:16:57,199
um thanks to facebook research for

00:16:56,079 --> 00:16:59,519
funding and

00:16:57,199 --> 00:17:00,720
and too many names unfortunately that i

00:16:59,519 --> 00:17:04,079
can list right now in

00:17:00,720 --> 00:17:07,039
iba and vmware that are helping us to to

00:17:04,079 --> 00:17:08,720
implement this as we speak actually we

00:17:07,039 --> 00:17:10,640
hope they'll be ready in a few months

00:17:08,720 --> 00:17:12,720
so please visit the pap for more

00:17:10,640 --> 00:17:14,959
information uh thank you and and please

00:17:12,720 --> 00:17:17,439
take it away from here marina

00:17:14,959 --> 00:17:19,199
okay so yeah i'm gonna talk about a few

00:17:17,439 --> 00:17:20,400
new features in tough that were kind of

00:17:19,199 --> 00:17:21,839
inspired by

00:17:20,400 --> 00:17:24,480
some of those projects that tree shop

00:17:21,839 --> 00:17:24,480
just went through

00:17:24,959 --> 00:17:28,880
so a lot of these new features are

00:17:27,360 --> 00:17:31,440
presented through these things called

00:17:28,880 --> 00:17:33,039
taps or tough augmentation proposals

00:17:31,440 --> 00:17:35,360
so basically what this is is just a

00:17:33,039 --> 00:17:37,520
design document for tough that includes

00:17:35,360 --> 00:17:38,720
a technical specification and a detailed

00:17:37,520 --> 00:17:40,320
rationale

00:17:38,720 --> 00:17:42,320
and so the idea is that you can document

00:17:40,320 --> 00:17:45,200
new features have some

00:17:42,320 --> 00:17:46,000
some new some new documentation and also

00:17:45,200 --> 00:17:48,400
just have some in-depth

00:17:46,000 --> 00:17:49,760
discussion and consensus building before

00:17:48,400 --> 00:17:50,960
something gets implemented in the

00:17:49,760 --> 00:17:54,080
specification

00:17:50,960 --> 00:17:55,280
and all of our implementations

00:17:54,080 --> 00:17:57,760
so the first one of these i'll talk

00:17:55,280 --> 00:17:59,440
about is tap 11 which is using poops for

00:17:57,760 --> 00:18:01,520
interoperability

00:17:59,440 --> 00:18:02,480
so tuff doesn't mandate specific

00:18:01,520 --> 00:18:04,720
implementation

00:18:02,480 --> 00:18:06,400
details such as wireline formats or like

00:18:04,720 --> 00:18:07,280
we talked about before the cryptographic

00:18:06,400 --> 00:18:08,960
algorithms

00:18:07,280 --> 00:18:10,640
we allow people to use whichever ones

00:18:08,960 --> 00:18:12,000
work for their system

00:18:10,640 --> 00:18:13,919
however because there are so many

00:18:12,000 --> 00:18:15,039
different implementations of tough

00:18:13,919 --> 00:18:16,640
sometimes these different

00:18:15,039 --> 00:18:18,000
implementations want to be able to

00:18:16,640 --> 00:18:20,080
interoperate

00:18:18,000 --> 00:18:22,080
and so to allow for that we created

00:18:20,080 --> 00:18:24,640
these things called proofs or protocol

00:18:22,080 --> 00:18:26,240
operation usage and format documents

00:18:24,640 --> 00:18:28,799
which

00:18:26,240 --> 00:18:30,400
which describe all the elements um in

00:18:28,799 --> 00:18:31,679
addition to those elements described in

00:18:30,400 --> 00:18:34,080
the specification

00:18:31,679 --> 00:18:37,120
that are needed for interoperability and

00:18:34,080 --> 00:18:37,120
full use of the system

00:18:37,679 --> 00:18:42,720
and next we have cap 13 which is allows

00:18:40,640 --> 00:18:44,160
for user selection of top level targets

00:18:42,720 --> 00:18:46,799
metadata

00:18:44,160 --> 00:18:49,280
so if you have a large public repository

00:18:46,799 --> 00:18:51,120
that hosts a lot of different images

00:18:49,280 --> 00:18:52,559
specific clients might want to use only

00:18:51,120 --> 00:18:55,120
a subset of those images

00:18:52,559 --> 00:18:56,960
on this public repository so in this

00:18:55,120 --> 00:18:57,919
case what they can do is they can define

00:18:56,960 --> 00:19:00,400
their own

00:18:57,919 --> 00:19:01,120
top level targets metadata that replaces

00:19:00,400 --> 00:19:03,919
the one

00:19:01,120 --> 00:19:05,919
on the repository and use this to decide

00:19:03,919 --> 00:19:07,200
which images they actually trust

00:19:05,919 --> 00:19:09,440
and so this can be used like for

00:19:07,200 --> 00:19:10,799
organization to decide um you know we

00:19:09,440 --> 00:19:12,400
trust these developers and the images

00:19:10,799 --> 00:19:13,440
they make but not necessarily every

00:19:12,400 --> 00:19:16,480
single image

00:19:13,440 --> 00:19:16,480
on this repository

00:19:16,720 --> 00:19:19,919
and then next we have top 14 which

00:19:18,960 --> 00:19:22,880
allows for

00:19:19,919 --> 00:19:24,400
succinct hashed bin delegations so tug

00:19:22,880 --> 00:19:26,559
allows for this

00:19:24,400 --> 00:19:28,559
this technique called succinct hash sort

00:19:26,559 --> 00:19:30,240
not sorry called hash bin delegations

00:19:28,559 --> 00:19:33,039
just without the succinct

00:19:30,240 --> 00:19:34,720
um already and so what this does is if

00:19:33,039 --> 00:19:36,640
you have a single

00:19:34,720 --> 00:19:38,720
um like a single role who wants to

00:19:36,640 --> 00:19:39,840
delegate to a lot of other roles into a

00:19:38,720 --> 00:19:42,880
lot of other

00:19:39,840 --> 00:19:44,480
images what they can do is

00:19:42,880 --> 00:19:46,080
instead of delegating directly to all

00:19:44,480 --> 00:19:47,200
these different images which can create

00:19:46,080 --> 00:19:49,679
kind of a huge

00:19:47,200 --> 00:19:52,400
metadata file to list them all they can

00:19:49,679 --> 00:19:54,400
delegate to these intermediate

00:19:52,400 --> 00:19:55,760
bins which use the hash of the image

00:19:54,400 --> 00:19:58,960
name to

00:19:55,760 --> 00:20:00,480
um to delegate and to delegate and make

00:19:58,960 --> 00:20:03,600
it much more efficient

00:20:00,480 --> 00:20:04,559
and when using this with pet 458 and the

00:20:03,600 --> 00:20:06,559
pi pi

00:20:04,559 --> 00:20:07,679
implementation what we realized is that

00:20:06,559 --> 00:20:09,440
this could be even more

00:20:07,679 --> 00:20:12,000
efficient in the way it describes these

00:20:09,440 --> 00:20:12,880
different bins and so this tap basically

00:20:12,000 --> 00:20:15,520
adds that

00:20:12,880 --> 00:20:17,600
that extra optimization to describe

00:20:15,520 --> 00:20:19,520
these bins in a very succinct way

00:20:17,600 --> 00:20:22,720
to kind of save on metadata overhead and

00:20:19,520 --> 00:20:22,720
make it much easier to use

00:20:23,120 --> 00:20:27,360
and next we have an as yet unnumbered

00:20:25,760 --> 00:20:30,400
tap

00:20:27,360 --> 00:20:31,600
for snapshot merkle trees and so um the

00:20:30,400 --> 00:20:34,240
idea here is also for

00:20:31,600 --> 00:20:35,039
very large repositories which is kind of

00:20:34,240 --> 00:20:37,520
a theme

00:20:35,039 --> 00:20:39,600
in these new features but um when you

00:20:37,520 --> 00:20:41,679
have a very large repository

00:20:39,600 --> 00:20:43,200
the snapshot file which lists the

00:20:41,679 --> 00:20:44,000
version number of all of the different

00:20:43,200 --> 00:20:45,360
images

00:20:44,000 --> 00:20:47,440
can get really large if you have a lot

00:20:45,360 --> 00:20:49,679
of different images that you're

00:20:47,440 --> 00:20:51,120
um that you're listing and so what this

00:20:49,679 --> 00:20:53,280
proposal does is it

00:20:51,120 --> 00:20:54,159
kind of separates that snapshot file out

00:20:53,280 --> 00:20:56,559
into

00:20:54,159 --> 00:20:58,640
a different file for each image and then

00:20:56,559 --> 00:20:59,840
it connects these using a merkle tree

00:20:58,640 --> 00:21:02,320
so that you still get most of the

00:20:59,840 --> 00:21:04,720
security properties of the snapshot role

00:21:02,320 --> 00:21:05,840
which might with much less metadata

00:21:04,720 --> 00:21:06,880
overhead

00:21:05,840 --> 00:21:09,440
and there's more details of this

00:21:06,880 --> 00:21:11,520
available um you know

00:21:09,440 --> 00:21:13,280
this and all the other tabs available in

00:21:11,520 --> 00:21:17,120
the documentation and on

00:21:13,280 --> 00:21:18,799
our website next i'll talk a bit about

00:21:17,120 --> 00:21:20,159
how you can get involved in this project

00:21:18,799 --> 00:21:23,280
and all the different efforts that are

00:21:20,159 --> 00:21:25,440
going on around tuff

00:21:23,280 --> 00:21:27,280
so here are kind of the key ongoing

00:21:25,440 --> 00:21:29,120
discussions that are happening right now

00:21:27,280 --> 00:21:30,720
um there's the maintenance of the tough

00:21:29,120 --> 00:21:31,919
specification and the reference

00:21:30,720 --> 00:21:34,320
implementation

00:21:31,919 --> 00:21:36,320
so what the tarp project is primarily is

00:21:34,320 --> 00:21:37,840
a specification that describes how

00:21:36,320 --> 00:21:39,760
anyone can do

00:21:37,840 --> 00:21:42,000
secure software updates and we also

00:21:39,760 --> 00:21:43,200
maintain a reference implementation

00:21:42,000 --> 00:21:45,200
written in python that kind of

00:21:43,200 --> 00:21:46,799
demonstrates how this can be done

00:21:45,200 --> 00:21:49,120
the reference of notation is used in

00:21:46,799 --> 00:21:51,280
practice as well but we also support

00:21:49,120 --> 00:21:52,799
all the other projects that chuchung was

00:21:51,280 --> 00:21:53,760
talking about they all have their own

00:21:52,799 --> 00:21:55,360
implementation

00:21:53,760 --> 00:21:57,679
of or most of them have their own

00:21:55,360 --> 00:21:59,280
implementation of tests that they use

00:21:57,679 --> 00:22:01,840
and so both of these require maintenance

00:21:59,280 --> 00:22:03,520
and ongoing support so if anyone is

00:22:01,840 --> 00:22:06,799
interested in getting involved there

00:22:03,520 --> 00:22:08,000
we always appreciate help next we have

00:22:06,799 --> 00:22:09,919
the notary v2

00:22:08,000 --> 00:22:11,280
effort um to improve you know

00:22:09,919 --> 00:22:12,720
improvements to notary

00:22:11,280 --> 00:22:14,400
i think this is really relevant to the

00:22:12,720 --> 00:22:16,799
cloud native space so if anyone is

00:22:14,400 --> 00:22:18,240
interested in getting involved here

00:22:16,799 --> 00:22:19,679
there's a lot of discussion happening

00:22:18,240 --> 00:22:20,799
and it's still in the early stage so

00:22:19,679 --> 00:22:22,559
it's a good time

00:22:20,799 --> 00:22:24,400
to get involved and have your ideas be

00:22:22,559 --> 00:22:25,200
heard and so there's a lot of discussion

00:22:24,400 --> 00:22:27,600
happening

00:22:25,200 --> 00:22:28,720
on the nerdy v2 channel on the cncf

00:22:27,600 --> 00:22:32,000
slack so

00:22:28,720 --> 00:22:34,320
feel free to join there and contribute

00:22:32,000 --> 00:22:35,280
and finally on this list there are many

00:22:34,320 --> 00:22:37,120
other options but

00:22:35,280 --> 00:22:38,400
for this list we have the tough

00:22:37,120 --> 00:22:41,600
integration in

00:22:38,400 --> 00:22:42,720
pip and so so these are both

00:22:41,600 --> 00:22:44,960
there are two kind of separate things

00:22:42,720 --> 00:22:48,080
that have to do with the use of

00:22:44,960 --> 00:22:48,880
tough in pipi so with pep 458 what we

00:22:48,080 --> 00:22:52,000
had what

00:22:48,880 --> 00:22:53,039
happened was we got tough into pipea

00:22:52,000 --> 00:22:54,559
itself

00:22:53,039 --> 00:22:56,480
but pod guy is just kind of like the

00:22:54,559 --> 00:22:58,000
server side of the update process it's

00:22:56,480 --> 00:22:59,520
just the repository

00:22:58,000 --> 00:23:01,600
in order for this to actually be useful

00:22:59,520 --> 00:23:03,760
and to provide increased security

00:23:01,600 --> 00:23:06,080
we also need tough integration in pip

00:23:03,760 --> 00:23:08,159
and other downloaders that use pi pi

00:23:06,080 --> 00:23:09,600
so they actually do those verification

00:23:08,159 --> 00:23:10,400
steps that are allowed because of the

00:23:09,600 --> 00:23:13,520
metadata

00:23:10,400 --> 00:23:16,799
provided and also this is other pep

00:23:13,520 --> 00:23:19,120
that um we wrote called pep 480

00:23:16,799 --> 00:23:20,000
which includes what we call the maximum

00:23:19,120 --> 00:23:22,480
security model

00:23:20,000 --> 00:23:24,159
so pep 458 is kind of a minimal

00:23:22,480 --> 00:23:25,760
implementation of tough to kind of get

00:23:24,159 --> 00:23:26,640
started and get some initial security

00:23:25,760 --> 00:23:29,440
features

00:23:26,640 --> 00:23:30,080
and then pep 480 provides even more

00:23:29,440 --> 00:23:31,919
in-depth

00:23:30,080 --> 00:23:33,280
security features including end-to-end

00:23:31,919 --> 00:23:35,520
developer signing

00:23:33,280 --> 00:23:37,120
and some other really cool things so

00:23:35,520 --> 00:23:39,280
that's another place

00:23:37,120 --> 00:23:40,720
where you can get started and those are

00:23:39,280 --> 00:23:44,880
very in the early stages

00:23:40,720 --> 00:23:46,640
so good things to get going on

00:23:44,880 --> 00:23:48,240
and finally we would like to thank a lot

00:23:46,640 --> 00:23:49,919
of different people who have made all of

00:23:48,240 --> 00:23:51,279
these different things possible there

00:23:49,919 --> 00:23:52,400
are of course more people than we could

00:23:51,279 --> 00:23:53,919
list on this slide

00:23:52,400 --> 00:23:55,919
but this is a nice sampling of all the

00:23:53,919 --> 00:23:57,440
people who have helped make

00:23:55,919 --> 00:23:59,600
tough possible and all of the tough

00:23:57,440 --> 00:24:02,240
projects successful so thank you to

00:23:59,600 --> 00:24:02,240
everyone here

00:24:03,440 --> 00:24:06,960
and thank you all for coming and we will

00:24:05,039 --> 00:24:10,640
be available live for questions

00:24:06,960 --> 00:24:19,120
um at the talk

00:24:10,640 --> 00:24:20,730
yes thank you

00:24:19,120 --> 00:24:22,159
okay thanks uh

00:24:20,730 --> 00:24:24,240
[Music]

00:24:22,159 --> 00:24:28,159
thanks for both speakers for the great

00:24:24,240 --> 00:24:30,559
talk now let's start the q a session

00:24:28,159 --> 00:24:32,480
you can take a look at the q a tab in

00:24:30,559 --> 00:24:34,799
zoom and answer any questions

00:24:32,480 --> 00:24:34,799
thanks

00:24:43,440 --> 00:24:49,520
what is the participation status of

00:24:46,640 --> 00:24:50,480
end user is compared with software

00:24:49,520 --> 00:24:56,000
vendors and

00:24:50,480 --> 00:24:56,000
stuff i'm sorry i don't fully

00:24:56,720 --> 00:25:01,760
don't fully understand the question

00:24:58,000 --> 00:25:04,159
marina do you have a guess

00:25:01,760 --> 00:25:05,760
well i guess the so top is mostly

00:25:04,159 --> 00:25:08,240
transparent to

00:25:05,760 --> 00:25:10,559
to the clients and to the end users

00:25:08,240 --> 00:25:13,279
mostly we work with

00:25:10,559 --> 00:25:14,000
with people developing update systems to

00:25:13,279 --> 00:25:16,880
get them to

00:25:14,000 --> 00:25:18,320
implement tough and get it um just kind

00:25:16,880 --> 00:25:19,600
of put it in the pipeline and then once

00:25:18,320 --> 00:25:21,200
it's there

00:25:19,600 --> 00:25:22,960
it kind of automatically provides this

00:25:21,200 --> 00:25:24,400
protection and

00:25:22,960 --> 00:25:26,400
clients are really only aware of it if

00:25:24,400 --> 00:25:29,120
there's a problem and

00:25:26,400 --> 00:25:29,520
um and you know the error messages come

00:25:29,120 --> 00:25:30,960
up

00:25:29,520 --> 00:25:32,720
so i think otherwise it's pretty much

00:25:30,960 --> 00:25:33,919
transparent and so because of that we

00:25:32,720 --> 00:25:36,480
tend to get much more

00:25:33,919 --> 00:25:37,360
participation from kind of developers

00:25:36,480 --> 00:25:40,559
and people

00:25:37,360 --> 00:25:42,159
making the um the software

00:25:40,559 --> 00:25:46,640
um does that answer the question feel

00:25:42,159 --> 00:25:46,640
free to ask again if it doesn't

00:25:47,600 --> 00:25:51,360
oh yeah i suspect you're right yes i

00:25:50,000 --> 00:25:53,200
think that's right yeah

00:25:51,360 --> 00:25:55,679
so end users don't normally notice

00:25:53,200 --> 00:25:58,240
anything unless a security attack is

00:25:55,679 --> 00:25:58,240
detected

00:26:05,279 --> 00:26:08,799
yeah please feel free to write down your

00:26:08,159 --> 00:26:12,159
questions

00:26:08,799 --> 00:26:13,919
on in the in the question tab and at the

00:26:12,159 --> 00:26:16,240
yeah okay here we go we have another

00:26:13,919 --> 00:26:16,240
question

00:26:16,640 --> 00:26:20,320
what's the mechanism or is there any

00:26:18,720 --> 00:26:22,720
road map for tough

00:26:20,320 --> 00:26:24,159
to deal with cloud native zero day

00:26:22,720 --> 00:26:26,640
security breaches

00:26:24,159 --> 00:26:28,720
that's a good question marina would you

00:26:26,640 --> 00:26:31,840
like to start please

00:26:28,720 --> 00:26:32,960
i'm sure so i guess it depends a little

00:26:31,840 --> 00:26:35,600
bit on

00:26:32,960 --> 00:26:36,880
which part of the ecosystem that this

00:26:35,600 --> 00:26:38,559
year day would affect

00:26:36,880 --> 00:26:40,480
i think one thing that tuff is very

00:26:38,559 --> 00:26:42,880
helpful with is providing

00:26:40,480 --> 00:26:44,559
once there's a patch for a zero day you

00:26:42,880 --> 00:26:45,760
can securely provide this patch to all

00:26:44,559 --> 00:26:48,400
your users

00:26:45,760 --> 00:26:49,520
so that um people don't stay vulnerable

00:26:48,400 --> 00:26:52,960
for very long

00:26:49,520 --> 00:26:56,159
and so i think that's a key key thing

00:26:52,960 --> 00:26:57,279
that this offers um i think the system

00:26:56,159 --> 00:27:00,960
is also built with

00:26:57,279 --> 00:27:02,640
a lot of safeguards in place so that

00:27:00,960 --> 00:27:04,000
if any you know one piece of the system

00:27:02,640 --> 00:27:05,520
goes wrong you still have other pieces

00:27:04,000 --> 00:27:09,200
of the system to fall back on

00:27:05,520 --> 00:27:11,200
and recover from any kind of compromise

00:27:09,200 --> 00:27:13,279
yes exactly i think marina did a very

00:27:11,200 --> 00:27:16,240
nice job there in particular you want to

00:27:13,279 --> 00:27:18,320
use something like tough to update uh to

00:27:16,240 --> 00:27:20,240
fix your zero day right you need an

00:27:18,320 --> 00:27:21,360
update just to fix security exploits in

00:27:20,240 --> 00:27:22,640
the first problem

00:27:21,360 --> 00:27:24,640
but what do you want to do is make sure

00:27:22,640 --> 00:27:26,240
you use an update a time tested update

00:27:24,640 --> 00:27:28,880
mechanism like stuff to make sure your

00:27:26,240 --> 00:27:30,159
update mechanism itself doesn't have cve

00:27:28,880 --> 00:27:32,960
you don't want that it's a bad place to

00:27:30,159 --> 00:27:36,000
be yeah so so

00:27:32,960 --> 00:27:38,640
uh next question from brian boo is there

00:27:36,000 --> 00:27:41,440
any visualization tools for user to know

00:27:38,640 --> 00:27:45,600
the current status of kubernetes cluster

00:27:41,440 --> 00:27:47,679
security i don't know i'm not aware of

00:27:45,600 --> 00:27:49,039
the top of my head

00:27:47,679 --> 00:27:50,960
of although you might be able to use

00:27:49,039 --> 00:27:53,600
datadock for for uh

00:27:50,960 --> 00:27:55,600
uh we we're we're slowly rolling out new

00:27:53,600 --> 00:27:57,279
new security monitoring features that

00:27:55,600 --> 00:27:58,720
you might be interested in that you

00:27:57,279 --> 00:28:01,520
might be able to

00:27:58,720 --> 00:28:03,200
visualize things like which software

00:28:01,520 --> 00:28:04,399
updates have been applied or not so i

00:28:03,200 --> 00:28:07,840
don't know if that fully answers your

00:28:04,399 --> 00:28:07,840
question but that's one possible

00:28:14,840 --> 00:28:17,840
method

00:28:20,880 --> 00:28:26,240
okay thanks uh chashank and marina again

00:28:24,399 --> 00:28:31,039
for the great talk today

00:28:26,240 --> 00:28:31,039
and thank you great thank you thank you

00:29:10,440 --> 00:29:13,440

YouTube URL: https://www.youtube.com/watch?v=_EQv9yEAgVE


