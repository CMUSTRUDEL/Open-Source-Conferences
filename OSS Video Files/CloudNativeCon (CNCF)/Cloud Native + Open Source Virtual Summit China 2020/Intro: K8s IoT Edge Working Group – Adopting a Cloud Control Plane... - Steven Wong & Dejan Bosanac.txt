Title: Intro: K8s IoT Edge Working Group – Adopting a Cloud Control Plane... - Steven Wong & Dejan Bosanac
Publication date: 2020-09-11
Playlist: Cloud Native + Open Source Virtual Summit China 2020
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Intro: K8s IoT Edge Working Group – Adopting a Cloud Control Plane to Edge - Steven Wong, VMware & Dejan Bosanac, Red Hat 

Edge refers to geographic distribution of compute, data ingest, and network. A lot of use cases fit under this “umbrella”. Kubernetes was born as a solution for large scale application hosting in a cloud. Edge deployments have much in common with public cloud - large scale, desire for automated remote management - but at the same time there are key differences. This session will be an introduction to challenges of applying Kubernetes for edge and IoT applications. We will survey some solutions for addressing these challenges, and cover how you can interact with the open source community to learn about and help build better solutions for edge. 

https://sched.co/cpAG
Captions: 
	00:00:01,199 --> 00:00:06,319
hi this session is presented by the

00:00:03,520 --> 00:00:08,720
kubernetes iot edge working group

00:00:06,319 --> 00:00:09,920
this is about using kubernetes for edge

00:00:08,720 --> 00:00:12,240
applications

00:00:09,920 --> 00:00:13,040
i'm steve long a tech lead for the

00:00:12,240 --> 00:00:15,200
working group

00:00:13,040 --> 00:00:17,359
i work on kubernetes and a few other

00:00:15,200 --> 00:00:18,480
open source projects as an employee of

00:00:17,359 --> 00:00:21,840
vmware

00:00:18,480 --> 00:00:24,960
today i'm joined by uh

00:00:21,840 --> 00:00:26,560
hi i'm diane basales from red hat

00:00:24,960 --> 00:00:29,519
software engineer and also

00:00:26,560 --> 00:00:30,080
a colleague of this working group also

00:00:29,519 --> 00:00:33,840
interested

00:00:30,080 --> 00:00:37,040
in in a lot of iot and edge

00:00:33,840 --> 00:00:40,719
for the cloud projects yeah

00:00:37,040 --> 00:00:42,320
back to steve okay let's move on uh

00:00:40,719 --> 00:00:44,000
so we're going to give contact

00:00:42,320 --> 00:00:46,239
information and a link to the deck

00:00:44,000 --> 00:00:48,000
at the end but here's the agenda i'm

00:00:46,239 --> 00:00:50,079
going to start with a really quick

00:00:48,000 --> 00:00:52,879
definition of what we're defining as

00:00:50,079 --> 00:00:55,199
kubernetes at the edge within this talk

00:00:52,879 --> 00:00:56,160
kubernetes has obviously been hugely

00:00:55,199 --> 00:00:58,079
successful

00:00:56,160 --> 00:00:59,440
in applications calling for

00:00:58,079 --> 00:01:02,559
orchestration

00:00:59,440 --> 00:01:04,720
of containerized apps in large clouds

00:01:02,559 --> 00:01:07,119
but edge can be a little different we're

00:01:04,720 --> 00:01:09,680
going to cover what kubernetes can do

00:01:07,119 --> 00:01:10,560
and what it can't at edge hopefully you

00:01:09,680 --> 00:01:12,400
like the talk

00:01:10,560 --> 00:01:14,640
and if you do we're going to wrap up

00:01:12,400 --> 00:01:15,439
with details on how you can become a

00:01:14,640 --> 00:01:18,159
member

00:01:15,439 --> 00:01:20,720
of the kubernetes iot edge working group

00:01:18,159 --> 00:01:24,720
where we host ongoing discussions

00:01:20,720 --> 00:01:24,720
on subjects like this talk

00:01:24,880 --> 00:01:28,159
when we say kubernetes at edge what are

00:01:27,040 --> 00:01:31,040
we referring to

00:01:28,159 --> 00:01:31,439
well some examples are listed here at

00:01:31,040 --> 00:01:34,159
past

00:01:31,439 --> 00:01:35,439
kubecon physical events we've taken

00:01:34,159 --> 00:01:39,040
audience polls

00:01:35,439 --> 00:01:41,200
to identify the popular use cases and

00:01:39,040 --> 00:01:42,399
in those polls the leading use cases

00:01:41,200 --> 00:01:46,159
have been retail

00:01:42,399 --> 00:01:49,280
telco industrial iot smart cities

00:01:46,159 --> 00:01:50,960
and video capture with image recognition

00:01:49,280 --> 00:01:53,759
but there's a lot of additional use

00:01:50,960 --> 00:01:55,520
cases that fit underneath the same edge

00:01:53,759 --> 00:01:57,520
umbrella

00:01:55,520 --> 00:01:59,360
there's a lot in common across these

00:01:57,520 --> 00:02:01,920
applications at edge

00:01:59,360 --> 00:02:03,920
but the important question is actually

00:02:01,920 --> 00:02:06,079
what's in common with the original

00:02:03,920 --> 00:02:08,239
kubernetes use case of container

00:02:06,079 --> 00:02:11,759
orchestration for a large

00:02:08,239 --> 00:02:11,759
data center hosted cloud

00:02:12,640 --> 00:02:17,040
let's start by observing that

00:02:14,640 --> 00:02:18,239
containerized packaging of apps can be

00:02:17,040 --> 00:02:20,840
really valuable

00:02:18,239 --> 00:02:22,319
in both a centralized cloud and at edge

00:02:20,840 --> 00:02:24,480
locations

00:02:22,319 --> 00:02:25,520
and with edge just like cloud you might

00:02:24,480 --> 00:02:28,000
have a lot of these

00:02:25,520 --> 00:02:29,840
things to manage so just like a large

00:02:28,000 --> 00:02:31,040
data center hosted cloud you need

00:02:29,840 --> 00:02:35,599
something that offers

00:02:31,040 --> 00:02:37,280
automated management at a huge scale

00:02:35,599 --> 00:02:39,920
it's interesting to observe that

00:02:37,280 --> 00:02:41,920
kubernetes isn't just a solution for

00:02:39,920 --> 00:02:44,080
container orchestration

00:02:41,920 --> 00:02:46,879
if you are an early participant in this

00:02:44,080 --> 00:02:48,400
field you know that back in 2015 there

00:02:46,879 --> 00:02:50,480
used to be

00:02:48,400 --> 00:02:52,160
many other open source container

00:02:50,480 --> 00:02:54,560
orchestrators and that somehow

00:02:52,160 --> 00:02:56,480
kubernetes managed to move

00:02:54,560 --> 00:02:59,680
from the back of the field in the horse

00:02:56,480 --> 00:03:02,640
race up to the lead where it sits today

00:02:59,680 --> 00:03:04,480
many things factored into this into the

00:03:02,640 --> 00:03:06,480
success of kubernetes

00:03:04,480 --> 00:03:08,720
but i'm going to nominate two key

00:03:06,480 --> 00:03:11,840
aspects that i think

00:03:08,720 --> 00:03:14,000
really apply in edge use cases

00:03:11,840 --> 00:03:15,040
first kubernetes has a fantastic

00:03:14,000 --> 00:03:18,800
architecture

00:03:15,040 --> 00:03:21,519
it's based on a declarative api and it's

00:03:18,800 --> 00:03:22,159
readily extensible if you look at

00:03:21,519 --> 00:03:25,519
history

00:03:22,159 --> 00:03:28,480
take border gateway protocol for example

00:03:25,519 --> 00:03:30,799
bgp has been around for decades the

00:03:28,480 --> 00:03:31,680
internet's changed a lot since the 90s

00:03:30,799 --> 00:03:35,760
when it came

00:03:31,680 --> 00:03:38,560
out but bgp is still as popular as ever

00:03:35,760 --> 00:03:40,560
and i suggest that its long life can be

00:03:38,560 --> 00:03:42,080
traced to a clean extensible

00:03:40,560 --> 00:03:44,159
architecture

00:03:42,080 --> 00:03:46,879
together with a community that allowed

00:03:44,159 --> 00:03:48,480
it to evolve in a few minutes

00:03:46,879 --> 00:03:50,720
we'll get into the kubernetes

00:03:48,480 --> 00:03:52,000
architecture and extensibility in

00:03:50,720 --> 00:03:54,000
particular

00:03:52,000 --> 00:03:56,560
but that isn't the only aspect that

00:03:54,000 --> 00:03:58,720
makes kubernetes attractive

00:03:56,560 --> 00:04:01,519
the second factor and perhaps the most

00:03:58,720 --> 00:04:04,239
important is the healthy ecosystem

00:04:01,519 --> 00:04:06,319
which is spinning off collateral tools

00:04:04,239 --> 00:04:09,519
what the cncf calls

00:04:06,319 --> 00:04:11,920
the cloud native landscape you know edge

00:04:09,519 --> 00:04:13,920
applications are going to need far more

00:04:11,920 --> 00:04:16,079
than just containers i'm talking about

00:04:13,920 --> 00:04:18,079
logging network management

00:04:16,079 --> 00:04:19,680
even things like available training

00:04:18,079 --> 00:04:22,639
materials and experienced

00:04:19,680 --> 00:04:24,720
people and vendors writing software on

00:04:22,639 --> 00:04:27,199
island just isn't efficient

00:04:24,720 --> 00:04:28,240
so kubernetes has some great attributes

00:04:27,199 --> 00:04:32,800
for edge

00:04:28,240 --> 00:04:32,800
but are there any offsetting limitations

00:04:33,199 --> 00:04:37,440
we need to observe that edge locations

00:04:35,520 --> 00:04:39,120
are not large data centers

00:04:37,440 --> 00:04:41,919
a public cloud is generally going to

00:04:39,120 --> 00:04:43,280
have a big mix of high and low priority

00:04:41,919 --> 00:04:47,440
maps

00:04:43,280 --> 00:04:50,479
huge amounts of compute storage and

00:04:47,440 --> 00:04:52,720
other resource and this allows high

00:04:50,479 --> 00:04:56,160
priority apps to enjoy

00:04:52,720 --> 00:04:56,880
very elastic scalability a cloud data

00:04:56,160 --> 00:04:59,360
center can

00:04:56,880 --> 00:05:00,160
generally add new capacity in days to

00:04:59,360 --> 00:05:02,560
weeks

00:05:00,160 --> 00:05:03,759
edge locations are really different

00:05:02,560 --> 00:05:06,400
they're going to have

00:05:03,759 --> 00:05:09,440
no trained staff and in some cases have

00:05:06,400 --> 00:05:11,440
hardware life cycles of a decade or more

00:05:09,440 --> 00:05:13,840
the nature of networking at edge can be

00:05:11,440 --> 00:05:15,120
quite different it's not all ip based

00:05:13,840 --> 00:05:17,199
protocols

00:05:15,120 --> 00:05:19,360
load bandwidth and intermittent

00:05:17,199 --> 00:05:21,520
connections are normal

00:05:19,360 --> 00:05:22,720
scheduling of apps to the hosts they run

00:05:21,520 --> 00:05:24,800
on is different

00:05:22,720 --> 00:05:27,440
in a large public cloud the compute

00:05:24,800 --> 00:05:29,680
resource is mostly interchangeable

00:05:27,440 --> 00:05:33,360
sure you might or ask your orchestrator

00:05:29,680 --> 00:05:36,000
to scatter a clustered service across

00:05:33,360 --> 00:05:38,240
different failure domains but within a

00:05:36,000 --> 00:05:40,880
single failure domain you probably don't

00:05:38,240 --> 00:05:43,120
care where your container runs

00:05:40,880 --> 00:05:44,000
edge apps can be tied to particular

00:05:43,120 --> 00:05:47,039
locations

00:05:44,000 --> 00:05:49,039
and particular physical io devices

00:05:47,039 --> 00:05:51,360
so a scheduler might need an awful lot

00:05:49,039 --> 00:05:53,199
of coaching to do the right thing

00:05:51,360 --> 00:05:56,960
then there's the big issue of physical

00:05:53,199 --> 00:05:56,960
security there might not be any

00:05:57,360 --> 00:06:02,400
so to compare central cloud to edge

00:06:00,080 --> 00:06:05,280
they're both managing a lot of things

00:06:02,400 --> 00:06:07,039
both benefit from containerization as a

00:06:05,280 --> 00:06:09,600
road to portability

00:06:07,039 --> 00:06:10,400
and both benefit enormously from a

00:06:09,600 --> 00:06:14,319
community

00:06:10,400 --> 00:06:17,199
driven driven by a standard api

00:06:14,319 --> 00:06:18,479
and collateral tools but some important

00:06:17,199 --> 00:06:20,800
differences to consider

00:06:18,479 --> 00:06:22,720
are resource constraints differing

00:06:20,800 --> 00:06:26,080
network demands and constraints

00:06:22,720 --> 00:06:27,919
and security challenges

00:06:26,080 --> 00:06:29,600
let's consider how we might apply

00:06:27,919 --> 00:06:32,400
kubernetes at edge

00:06:29,600 --> 00:06:33,120
suppose we take one monster-sized

00:06:32,400 --> 00:06:36,160
central

00:06:33,120 --> 00:06:39,680
hosted kubernetes cluster with each

00:06:36,160 --> 00:06:43,120
edge location running as a cluster node

00:06:39,680 --> 00:06:45,280
can that work maybe and i think it's

00:06:43,120 --> 00:06:46,960
fair to say that i know of people who

00:06:45,280 --> 00:06:49,599
are trying it and reporting that it

00:06:46,960 --> 00:06:51,199
works well enough to be useful

00:06:49,599 --> 00:06:53,039
but for others they're going to be

00:06:51,199 --> 00:06:56,000
issues for example

00:06:53,039 --> 00:06:58,400
what if i need more than 5000 nodes the

00:06:56,000 --> 00:07:00,880
current kubernetes upper limit

00:06:58,400 --> 00:07:02,880
yes i could go multi-cluster some use

00:07:00,880 --> 00:07:05,440
cases might have enough resource

00:07:02,880 --> 00:07:08,880
at the edge locations to run a full

00:07:05,440 --> 00:07:12,000
kubernetes cluster at each location

00:07:08,880 --> 00:07:13,919
can you federate over 5000 clusters i'm

00:07:12,000 --> 00:07:15,120
not really sure but i know it would be

00:07:13,919 --> 00:07:17,599
challenging

00:07:15,120 --> 00:07:18,400
and running a full cluster at each edge

00:07:17,599 --> 00:07:20,560
location

00:07:18,400 --> 00:07:23,039
is going to take resource that some of

00:07:20,560 --> 00:07:24,800
you may not have

00:07:23,039 --> 00:07:26,240
and suppose these locations are

00:07:24,800 --> 00:07:28,160
unstaffed

00:07:26,240 --> 00:07:30,639
how do you provision and maintain the

00:07:28,160 --> 00:07:34,319
platform below kubernetes the os

00:07:30,639 --> 00:07:34,880
hypervisor and hardware some edge use

00:07:34,319 --> 00:07:37,120
cases

00:07:34,880 --> 00:07:39,599
clearly don't have enough resource to

00:07:37,120 --> 00:07:42,000
run a full kubernetes cluster

00:07:39,599 --> 00:07:42,960
some can't even run a single cluster

00:07:42,000 --> 00:07:45,520
node

00:07:42,960 --> 00:07:46,080
there are devices that don't even run

00:07:45,520 --> 00:07:49,120
linux

00:07:46,080 --> 00:07:50,720
and thus will never host a containerized

00:07:49,120 --> 00:07:52,720
app

00:07:50,720 --> 00:07:54,400
at least in the form of docker

00:07:52,720 --> 00:07:56,560
containers

00:07:54,400 --> 00:07:57,520
also consider how do you get the apps to

00:07:56,560 --> 00:08:00,319
edge

00:07:57,520 --> 00:08:02,319
to some extent existing tools like an

00:08:00,319 --> 00:08:05,280
image registry could address this

00:08:02,319 --> 00:08:07,039
but taking the aerial view you actually

00:08:05,280 --> 00:08:09,599
want a broader solution that can

00:08:07,039 --> 00:08:11,440
distribute not just docker images but

00:08:09,599 --> 00:08:14,560
other classes of apps

00:08:11,440 --> 00:08:16,400
and even data packages to edge so it's

00:08:14,560 --> 00:08:18,000
clear that plain kubernetes

00:08:16,400 --> 00:08:20,000
isn't going to solve all your edge

00:08:18,000 --> 00:08:22,000
problems so let's ask

00:08:20,000 --> 00:08:24,160
what can we do about this what if we

00:08:22,000 --> 00:08:25,919
could extend kubernetes

00:08:24,160 --> 00:08:29,840
and what if we could help it out with

00:08:25,919 --> 00:08:29,840
some additional open source tools

00:08:30,639 --> 00:08:35,680
let me start by describing the

00:08:33,120 --> 00:08:37,599
kubernetes control plane architecture

00:08:35,680 --> 00:08:40,640
because this is the basis of its

00:08:37,599 --> 00:08:42,959
extensibility the kubernetes api

00:08:40,640 --> 00:08:44,320
has a declarative not an imperative

00:08:42,959 --> 00:08:46,880
philosophy

00:08:44,320 --> 00:08:47,920
this means that you tell kubernetes your

00:08:46,880 --> 00:08:50,399
desired goal

00:08:47,920 --> 00:08:53,440
and it figures out how to get there you

00:08:50,399 --> 00:08:55,680
don't feed it step by step instructions

00:08:53,440 --> 00:08:58,240
so what's a controller well it's just a

00:08:55,680 --> 00:09:01,120
snippet of code that looks at

00:08:58,240 --> 00:09:02,880
this declared desired state it then

00:09:01,120 --> 00:09:06,320
looks at the state of the world

00:09:02,880 --> 00:09:08,240
and compares it tries to reconcile these

00:09:06,320 --> 00:09:10,000
by making the state of the world look

00:09:08,240 --> 00:09:11,680
like it should according to the

00:09:10,000 --> 00:09:13,760
configuration

00:09:11,680 --> 00:09:16,320
if the controller fails or it can't

00:09:13,760 --> 00:09:19,760
fully realize the desired state

00:09:16,320 --> 00:09:22,560
it continuously and relentlessly retries

00:09:19,760 --> 00:09:23,839
if it takes time to make stuff happen

00:09:22,560 --> 00:09:27,040
the controller can be

00:09:23,839 --> 00:09:30,000
patient and diligently work this is a

00:09:27,040 --> 00:09:32,480
very stable distributed system pattern

00:09:30,000 --> 00:09:34,240
actions are item-potent and self-healing

00:09:32,480 --> 00:09:37,279
so if something goes wrong

00:09:34,240 --> 00:09:38,240
the controller will fix it if you change

00:09:37,279 --> 00:09:39,760
the desired

00:09:38,240 --> 00:09:41,519
declaration of state while the

00:09:39,760 --> 00:09:43,600
controller is working

00:09:41,519 --> 00:09:45,279
it can change course and work towards

00:09:43,600 --> 00:09:47,680
the new goal

00:09:45,279 --> 00:09:48,560
picture this like the thermostat in your

00:09:47,680 --> 00:09:51,200
house

00:09:48,560 --> 00:09:53,120
set a desired temperature go to sleep

00:09:51,200 --> 00:09:55,120
everything's going to be fine

00:09:53,120 --> 00:09:57,600
contrast this to a wood burning

00:09:55,120 --> 00:10:01,200
fireplace of a hundred years ago

00:09:57,600 --> 00:10:03,680
that's an imperative api too cold

00:10:01,200 --> 00:10:04,880
you go outside and get a log how well

00:10:03,680 --> 00:10:06,640
does that scale

00:10:04,880 --> 00:10:09,440
what if the person had to manage a

00:10:06,640 --> 00:10:12,399
hundred fireplaces in a huge building

00:10:09,440 --> 00:10:14,560
or many buildings on a college campus

00:10:12,399 --> 00:10:16,480
compare this to the declarative nature

00:10:14,560 --> 00:10:17,279
of thermostats and you can kind of get

00:10:16,480 --> 00:10:21,440
the idea

00:10:17,279 --> 00:10:24,560
of you know the advantages of going with

00:10:21,440 --> 00:10:27,279
a design based on declarative with

00:10:24,560 --> 00:10:27,279
controllers

00:10:28,160 --> 00:10:31,440
internally kubernetes is built on these

00:10:30,640 --> 00:10:33,760
controllers

00:10:31,440 --> 00:10:34,959
a lot of them as a recurring aspect of

00:10:33,760 --> 00:10:37,519
the system

00:10:34,959 --> 00:10:38,880
the placement of containerized apps on

00:10:37,519 --> 00:10:41,839
worker node servers

00:10:38,880 --> 00:10:44,160
is handled by just such a controller but

00:10:41,839 --> 00:10:46,000
the interesting thing for iot and edge

00:10:44,160 --> 00:10:48,880
is that you can write your own custom

00:10:46,000 --> 00:10:51,120
controllers for managing and controlling

00:10:48,880 --> 00:10:54,000
whatever you want or need

00:10:51,120 --> 00:10:55,120
you can extend kubernetes and this is

00:10:54,000 --> 00:10:58,320
called

00:10:55,120 --> 00:10:59,360
a custom resource definition or crd for

00:10:58,320 --> 00:11:01,600
short

00:10:59,360 --> 00:11:02,720
when you install one of these it extends

00:11:01,600 --> 00:11:05,120
the api

00:11:02,720 --> 00:11:06,079
with the xcd database holding the

00:11:05,120 --> 00:11:09,760
settings

00:11:06,079 --> 00:11:09,760
using that declarative model

00:11:09,839 --> 00:11:16,959
the the declarative part of this

00:11:13,360 --> 00:11:18,480
is called a crd and they work

00:11:16,959 --> 00:11:21,040
with a piece of software called a

00:11:18,480 --> 00:11:23,279
controller and by the way the controller

00:11:21,040 --> 00:11:26,240
can be hosted on kubernetes but doesn't

00:11:23,279 --> 00:11:29,200
have to be you could host it externally

00:11:26,240 --> 00:11:30,240
now what if we used kubernetes crds to

00:11:29,200 --> 00:11:32,800
manage

00:11:30,240 --> 00:11:34,079
low-level devices and apps on those

00:11:32,800 --> 00:11:37,040
devices

00:11:34,079 --> 00:11:40,160
even when the constraints don't allow

00:11:37,040 --> 00:11:40,160
docker packaging

00:11:40,240 --> 00:11:44,560
you can run kubernetes orchestrated

00:11:42,480 --> 00:11:47,279
containers where it makes sense

00:11:44,560 --> 00:11:49,279
the upper half of this diagram but if

00:11:47,279 --> 00:11:51,680
you reach a point where the available

00:11:49,279 --> 00:11:54,560
resources can no longer support

00:11:51,680 --> 00:11:57,120
a docker container you can continue to

00:11:54,560 --> 00:11:59,600
use kubernetes as a control plane

00:11:57,120 --> 00:12:00,880
for all aspects of your distributed

00:11:59,600 --> 00:12:02,880
system

00:12:00,880 --> 00:12:04,800
where the dividing line occurs might

00:12:02,880 --> 00:12:07,279
vary depending on your use case you

00:12:04,800 --> 00:12:09,440
could even influence the line

00:12:07,279 --> 00:12:11,440
by using specialized kubernetes

00:12:09,440 --> 00:12:15,519
distributions

00:12:11,440 --> 00:12:17,680
like k3s or microcades that are made

00:12:15,519 --> 00:12:19,519
specifically for low resource

00:12:17,680 --> 00:12:21,680
environments

00:12:19,519 --> 00:12:24,480
or you could go with stretch clusters

00:12:21,680 --> 00:12:27,120
where edge locations run

00:12:24,480 --> 00:12:29,760
individual kubernetes worker nodes

00:12:27,120 --> 00:12:31,680
instead of whole full clusters

00:12:29,760 --> 00:12:32,959
regardless there's always going to be

00:12:31,680 --> 00:12:35,680
some point

00:12:32,959 --> 00:12:36,959
where the standard managed containers

00:12:35,680 --> 00:12:38,880
can't go

00:12:36,959 --> 00:12:41,279
know take the arduino platform for

00:12:38,880 --> 00:12:42,959
example it doesn't even run an os

00:12:41,279 --> 00:12:44,959
so it's never going to run a docker

00:12:42,959 --> 00:12:48,480
image yet

00:12:44,959 --> 00:12:52,800
this is a popular platform for running

00:12:48,480 --> 00:12:55,279
iot this diagram is intended to point

00:12:52,800 --> 00:12:58,399
out that a properly designed crt

00:12:55,279 --> 00:13:00,959
with a properly defined designed crd the

00:12:58,399 --> 00:13:03,519
kubernetes control plane could go

00:13:00,959 --> 00:13:05,760
all the way down to the bottom limited

00:13:03,519 --> 00:13:07,040
only by the need to have some form of

00:13:05,760 --> 00:13:09,200
connectivity

00:13:07,040 --> 00:13:10,720
and that connectivity doesn't have to be

00:13:09,200 --> 00:13:13,200
ip based

00:13:10,720 --> 00:13:14,399
translation could be performed to some

00:13:13,200 --> 00:13:17,600
alternate

00:13:14,399 --> 00:13:19,440
uh protocol by a gateway tier at this

00:13:17,600 --> 00:13:21,360
point i'm going to turn it over to my

00:13:19,440 --> 00:13:24,000
esteemed college

00:13:21,360 --> 00:13:25,200
colleague to dive deeper into crds and

00:13:24,000 --> 00:13:28,480
some collateral

00:13:25,200 --> 00:13:31,279
open source based tools for edge

00:13:28,480 --> 00:13:32,959
thanks steve so steve introduced

00:13:31,279 --> 00:13:35,440
introduced us to the

00:13:32,959 --> 00:13:36,320
to the term of custom resource

00:13:35,440 --> 00:13:37,839
definitions

00:13:36,320 --> 00:13:39,839
and basically with the custom resource

00:13:37,839 --> 00:13:42,240
definitions we can model out

00:13:39,839 --> 00:13:43,279
any resource that that our applications

00:13:42,240 --> 00:13:45,920
iot or edge

00:13:43,279 --> 00:13:47,760
applications need needs to use and that

00:13:45,920 --> 00:13:50,639
it's out of the scope of the

00:13:47,760 --> 00:13:51,440
of of the typical kubernetes resources

00:13:50,639 --> 00:13:53,680
right

00:13:51,440 --> 00:13:55,040
and but one more thing that's missing

00:13:53,680 --> 00:13:57,760
there is is

00:13:55,040 --> 00:13:58,560
is a controller loop that that will uh

00:13:57,760 --> 00:14:00,880
operate

00:13:58,560 --> 00:14:01,600
on on top of these custom resource

00:14:00,880 --> 00:14:05,120
definitions

00:14:01,600 --> 00:14:06,880
and when we have uh when we pair the crd

00:14:05,120 --> 00:14:09,279
with the with the control loop we're

00:14:06,880 --> 00:14:12,160
basically getting operator

00:14:09,279 --> 00:14:13,199
operator that that uh leaves in in its

00:14:12,160 --> 00:14:15,760
own reconcile

00:14:13,199 --> 00:14:17,279
loop and and try to do do the right

00:14:15,760 --> 00:14:19,519
thing for us so the same

00:14:17,279 --> 00:14:21,360
pattern as as we saw that that

00:14:19,519 --> 00:14:25,120
kubernetes itself uses

00:14:21,360 --> 00:14:27,279
is used you use here so so the operator

00:14:25,120 --> 00:14:30,000
uh observe the current state of the

00:14:27,279 --> 00:14:32,160
system and the desired state of the crd

00:14:30,000 --> 00:14:33,199
analyze the differences and then act on

00:14:32,160 --> 00:14:36,320
that trying to get

00:14:33,199 --> 00:14:39,920
the the real world uh

00:14:36,320 --> 00:14:42,800
according to our our uh definition right

00:14:39,920 --> 00:14:44,320
so now we will go to a couple of uh

00:14:42,800 --> 00:14:47,760
demos and projects

00:14:44,320 --> 00:14:50,240
that we found in the communities that

00:14:47,760 --> 00:14:51,360
apply these patterns to different uh iot

00:14:50,240 --> 00:14:53,680
and edge use cases

00:14:51,360 --> 00:14:54,560
just to give you an idea how how this

00:14:53,680 --> 00:14:58,240
can be

00:14:54,560 --> 00:15:01,519
applied to to the iot and edge domain

00:14:58,240 --> 00:15:04,399
so uh the the first one

00:15:01,519 --> 00:15:06,480
is uh the kubernetes of thing session

00:15:04,399 --> 00:15:09,519
that happened at the fosdem

00:15:06,480 --> 00:15:12,639
that that basically just

00:15:09,519 --> 00:15:15,519
demos this kind of architecture uh so

00:15:12,639 --> 00:15:16,000
here i wanted to show you like a simple

00:15:15,519 --> 00:15:19,279
simple

00:15:16,000 --> 00:15:22,399
crd and how it can it can look when it

00:15:19,279 --> 00:15:25,120
when it doesn't apply to a typical

00:15:22,399 --> 00:15:26,079
kubernetes resource like a pod and and

00:15:25,120 --> 00:15:30,079
things like that so

00:15:26,079 --> 00:15:33,519
here we have a device and this device uh

00:15:30,079 --> 00:15:34,320
basically uh have a specification for

00:15:33,519 --> 00:15:37,680
for a couple of

00:15:34,320 --> 00:15:41,600
of uh inputs inputs and then we

00:15:37,680 --> 00:15:44,000
also see here that that each crd

00:15:41,600 --> 00:15:44,800
has current status it's empty here but

00:15:44,000 --> 00:15:46,800
this is where

00:15:44,800 --> 00:15:48,560
where we're getting the the the status

00:15:46,800 --> 00:15:52,959
of the of the current

00:15:48,560 --> 00:15:56,959
current system if we go into the

00:15:52,959 --> 00:15:58,079
cncf uh uh landscape we have a cubepatch

00:15:56,959 --> 00:16:01,279
project which is

00:15:58,079 --> 00:16:02,000
which is a a big part of our uh working

00:16:01,279 --> 00:16:06,560
group

00:16:02,000 --> 00:16:10,560
and and the cubatch uh tries to to to

00:16:06,560 --> 00:16:13,600
provide a way to to run uh uh run iot

00:16:10,560 --> 00:16:15,440
workloads on a constrained devices for

00:16:13,600 --> 00:16:18,000
for that purpose it it

00:16:15,440 --> 00:16:20,079
defines its its own uh custom controller

00:16:18,000 --> 00:16:22,639
and and the core models that

00:16:20,079 --> 00:16:23,519
talk talk to each other and can work in

00:16:22,639 --> 00:16:25,759
in a constraining

00:16:23,519 --> 00:16:28,399
environment uh where you don't have

00:16:25,759 --> 00:16:31,440
enough resources on the edge to to run

00:16:28,399 --> 00:16:32,720
the the full cubelet and and all the

00:16:31,440 --> 00:16:35,360
other things that the

00:16:32,720 --> 00:16:36,800
kubernetes nodes have but also dealing

00:16:35,360 --> 00:16:40,560
with with the network

00:16:36,800 --> 00:16:43,279
uh network restriction between the the

00:16:40,560 --> 00:16:45,920
control plane and the edge but one of

00:16:43,279 --> 00:16:49,600
the interesting things here is that uh

00:16:45,920 --> 00:16:52,160
uh cube badge also defines a lot of uh

00:16:49,600 --> 00:16:52,880
so to say higher level uh obstructions

00:16:52,160 --> 00:16:55,199
for for

00:16:52,880 --> 00:16:56,880
dealing with with the with the iot and

00:16:55,199 --> 00:16:59,839
edge applications

00:16:56,880 --> 00:17:01,600
and they're going uh into the into the

00:16:59,839 --> 00:17:04,160
uh

00:17:01,600 --> 00:17:06,240
into the way of introducing the crds for

00:17:04,160 --> 00:17:09,120
for defining devices

00:17:06,240 --> 00:17:09,839
uh devices and management management for

00:17:09,120 --> 00:17:11,679
the cloud

00:17:09,839 --> 00:17:13,199
if you follow the link that we have on

00:17:11,679 --> 00:17:16,319
this slide you will see

00:17:13,199 --> 00:17:19,439
the examples of these

00:17:16,319 --> 00:17:22,319
these crds and how they can be used to

00:17:19,439 --> 00:17:24,559
properly manage devices by the by the

00:17:22,319 --> 00:17:27,280
cube edge

00:17:24,559 --> 00:17:28,160
one more interesting uh projects in

00:17:27,280 --> 00:17:30,799
these spaces

00:17:28,160 --> 00:17:32,640
is the eclipse io folk uh which doesn't

00:17:30,799 --> 00:17:35,360
work on on the terms of

00:17:32,640 --> 00:17:37,520
devices but more on the applications and

00:17:35,360 --> 00:17:40,640
micro services that you would like to

00:17:37,520 --> 00:17:43,520
to run uh run

00:17:40,640 --> 00:17:44,480
on the on the edge sites and in a

00:17:43,520 --> 00:17:46,640
similar fashion

00:17:44,480 --> 00:17:48,559
uh they're they're going into the

00:17:46,640 --> 00:17:49,520
direction that you can define these

00:17:48,559 --> 00:17:53,039
microservices

00:17:49,520 --> 00:17:56,640
and applications as as crds and and

00:17:53,039 --> 00:17:57,679
apply their uh custom controller

00:17:56,640 --> 00:18:00,640
operator

00:17:57,679 --> 00:18:01,360
logic on these in terms of deploying

00:18:00,640 --> 00:18:03,679
those

00:18:01,360 --> 00:18:04,799
microservices on the appropriate

00:18:03,679 --> 00:18:07,919
appropriate

00:18:04,799 --> 00:18:11,120
edge nodes so

00:18:07,919 --> 00:18:11,520
here we we defined how we can model

00:18:11,120 --> 00:18:14,720
things

00:18:11,520 --> 00:18:16,720
outside of the kubernetes and and and uh

00:18:14,720 --> 00:18:19,280
a new obstructions that that we want to

00:18:16,720 --> 00:18:22,559
apply but for some iot and edge

00:18:19,280 --> 00:18:23,120
edge edge locations maybe we can think

00:18:22,559 --> 00:18:25,840
about

00:18:23,120 --> 00:18:26,880
the other way around so maybe our pod

00:18:25,840 --> 00:18:28,640
specifications

00:18:26,880 --> 00:18:30,320
is all we need so we can define our

00:18:28,640 --> 00:18:33,280
containers that we want to run

00:18:30,320 --> 00:18:34,640
on on our edge node and the edge side

00:18:33,280 --> 00:18:36,400
but we really don't need

00:18:34,640 --> 00:18:38,559
the whole control plane of the

00:18:36,400 --> 00:18:41,760
kubernetes to do that

00:18:38,559 --> 00:18:42,000
so if you want to do something like this

00:18:41,760 --> 00:18:43,919
so

00:18:42,000 --> 00:18:45,200
so maybe you can think about going into

00:18:43,919 --> 00:18:47,200
direction to to use

00:18:45,200 --> 00:18:48,480
something that's called like a static

00:18:47,200 --> 00:18:51,440
cubelet

00:18:48,480 --> 00:18:53,520
and and try to try to install only the

00:18:51,440 --> 00:18:56,640
cubelet on the edge node and and

00:18:53,520 --> 00:19:00,000
deploy manually and and directly

00:18:56,640 --> 00:19:02,400
the your port to the node without any

00:19:00,000 --> 00:19:03,679
any overhead of of the kubernetes

00:19:02,400 --> 00:19:06,960
control plane

00:19:03,679 --> 00:19:10,400
and there's a session that you can

00:19:06,960 --> 00:19:13,039
that you can uh so

00:19:10,400 --> 00:19:14,080
see this link which goes in into the

00:19:13,039 --> 00:19:16,720
detail

00:19:14,080 --> 00:19:17,919
uh about how you can you can achieve

00:19:16,720 --> 00:19:20,960
some something like

00:19:17,919 --> 00:19:22,320
something like like this of course if if

00:19:20,960 --> 00:19:24,799
you go into into

00:19:22,320 --> 00:19:26,160
this direction uh you will need still to

00:19:24,799 --> 00:19:29,039
to do some

00:19:26,160 --> 00:19:30,000
some provisioning on your own so so you

00:19:29,039 --> 00:19:31,919
still

00:19:30,000 --> 00:19:33,120
can't get away from from the control

00:19:31,919 --> 00:19:35,280
plane right

00:19:33,120 --> 00:19:36,400
either you will do it manually so you

00:19:35,280 --> 00:19:38,559
will be the control plane

00:19:36,400 --> 00:19:39,760
that will install things and and take

00:19:38,559 --> 00:19:42,720
care of things

00:19:39,760 --> 00:19:44,400
but in in most most cases you will use

00:19:42,720 --> 00:19:46,480
something as

00:19:44,400 --> 00:19:47,520
something like ansible and or ignition

00:19:46,480 --> 00:19:50,240
to to do

00:19:47,520 --> 00:19:51,039
a basic node provisioning on the lower

00:19:50,240 --> 00:19:53,200
level

00:19:51,039 --> 00:19:54,880
maybe you use some some of the github

00:19:53,200 --> 00:19:57,600
stools from the cncf

00:19:54,880 --> 00:19:58,080
landscape to basically distribute this

00:19:57,600 --> 00:20:01,120
uh

00:19:58,080 --> 00:20:02,320
this port specification uh to a large

00:20:01,120 --> 00:20:05,600
number of

00:20:02,320 --> 00:20:07,840
of edge nodes if if if that is

00:20:05,600 --> 00:20:07,840
needed

00:20:09,200 --> 00:20:13,200
and now we are coming to to to the

00:20:12,000 --> 00:20:16,320
section talking about

00:20:13,200 --> 00:20:19,679
uh how we can go

00:20:16,320 --> 00:20:20,640
uh beyond kubernetes so so as we can see

00:20:19,679 --> 00:20:24,320
kubernetes

00:20:20,640 --> 00:20:25,840
gives us a good uh good framework for

00:20:24,320 --> 00:20:29,360
for resiliently

00:20:25,840 --> 00:20:31,919
managing the the our our infrastructure

00:20:29,360 --> 00:20:32,480
and and and the workloads running on on

00:20:31,919 --> 00:20:34,480
on that

00:20:32,480 --> 00:20:35,919
infrastructure but we still need uh to

00:20:34,480 --> 00:20:39,360
define some of

00:20:35,919 --> 00:20:42,480
these workloads and and how these things

00:20:39,360 --> 00:20:46,080
specifically for some of the use cases

00:20:42,480 --> 00:20:48,480
uh uh iot uh eclipse iot

00:20:46,080 --> 00:20:49,840
and edge native working groups are

00:20:48,480 --> 00:20:52,400
specifically

00:20:49,840 --> 00:20:54,320
uh uh focusing on in these areas and

00:20:52,400 --> 00:20:56,000
defining the the projects that can run

00:20:54,320 --> 00:20:58,880
on kubernetes and

00:20:56,000 --> 00:20:59,520
and try to to solve some some of these

00:20:58,880 --> 00:21:02,000
common

00:20:59,520 --> 00:21:03,679
common issues so i will click quickly

00:21:02,000 --> 00:21:06,159
here go to a couple of these

00:21:03,679 --> 00:21:08,159
these projects and and and uh show you

00:21:06,159 --> 00:21:09,120
what you can do with them and and how

00:21:08,159 --> 00:21:12,240
you can form a

00:21:09,120 --> 00:21:16,400
like a big picture and and create a

00:21:12,240 --> 00:21:17,760
truly iot or or edge clouds on top of

00:21:16,400 --> 00:21:19,600
the kubernetes

00:21:17,760 --> 00:21:21,280
so first one that we'll mention here is

00:21:19,600 --> 00:21:24,720
eclipse honor which

00:21:21,280 --> 00:21:27,200
tries to to define uh a connectivity

00:21:24,720 --> 00:21:30,720
layer for iot devices connecting to the

00:21:27,200 --> 00:21:34,000
to the cloud to the cloud

00:21:30,720 --> 00:21:35,919
it tries to define uh define a commonly

00:21:34,000 --> 00:21:39,200
used communication patterns between

00:21:35,919 --> 00:21:42,799
the the the devices and and uh

00:21:39,200 --> 00:21:44,960
and the cloud workloads in terms of uh

00:21:42,799 --> 00:21:45,919
sending telemetry data from the device

00:21:44,960 --> 00:21:48,240
to the cloud

00:21:45,919 --> 00:21:49,039
and sending commands uh uh and

00:21:48,240 --> 00:21:51,120
controlling

00:21:49,039 --> 00:21:52,240
controlling these these devices from

00:21:51,120 --> 00:21:54,960
from the cloud

00:21:52,240 --> 00:21:57,200
the point here is to define this uh this

00:21:54,960 --> 00:21:58,320
interaction in a uniform way so that it

00:21:57,200 --> 00:22:02,240
can be used over

00:21:58,320 --> 00:22:05,520
over a variety of protocols and also

00:22:02,240 --> 00:22:06,240
to to use everything that you know about

00:22:05,520 --> 00:22:09,679
building

00:22:06,240 --> 00:22:12,480
a scalable uh systems and

00:22:09,679 --> 00:22:13,440
uh in kubernetes and and provide provide

00:22:12,480 --> 00:22:15,440
us with a way to

00:22:13,440 --> 00:22:16,640
to do this for for for millions of

00:22:15,440 --> 00:22:19,840
devices and and

00:22:16,640 --> 00:22:22,080
and uh uh thousands of different kind of

00:22:19,840 --> 00:22:23,760
applications living in on the same on

00:22:22,080 --> 00:22:26,799
the same infrastructure

00:22:23,760 --> 00:22:28,960
but connectivity is just the first part

00:22:26,799 --> 00:22:30,159
we can call it like a cloud gateway into

00:22:28,960 --> 00:22:33,360
into the iot

00:22:30,159 --> 00:22:35,919
platform what we need behind behind

00:22:33,360 --> 00:22:37,840
it is what's usually in the industry

00:22:35,919 --> 00:22:40,720
called the digital twin

00:22:37,840 --> 00:22:41,600
so what we want to do is is to provide a

00:22:40,720 --> 00:22:44,720
developer

00:22:41,600 --> 00:22:45,039
uh a cloud developer with a with a well

00:22:44,720 --> 00:22:48,000
as

00:22:45,039 --> 00:22:49,039
obstructed uh uh well-defined

00:22:48,000 --> 00:22:51,679
obstructions for

00:22:49,039 --> 00:22:52,840
for a different kind of uh devices right

00:22:51,679 --> 00:22:57,120
so we don't want

00:22:52,840 --> 00:22:59,360
a cloud developer to to to

00:22:57,120 --> 00:23:02,159
deal with connectivity at all so so we

00:22:59,360 --> 00:23:04,240
want to deal with the device state

00:23:02,159 --> 00:23:07,280
the current state or the desired state

00:23:04,240 --> 00:23:10,400
and provide provided with the apis that

00:23:07,280 --> 00:23:13,520
it can do it in a similar way uh

00:23:10,400 --> 00:23:13,919
in a similar way of how it it would do

00:23:13,520 --> 00:23:16,240
it

00:23:13,919 --> 00:23:17,520
for any other kind of like a web

00:23:16,240 --> 00:23:20,840
resource right

00:23:17,520 --> 00:23:24,320
so eclipse detail is is a project that

00:23:20,840 --> 00:23:27,840
that defines the digital twin

00:23:24,320 --> 00:23:29,039
in this uh in this context and the final

00:23:27,840 --> 00:23:32,480
piece of puzzle here

00:23:29,039 --> 00:23:35,039
is is how we actually manage

00:23:32,480 --> 00:23:36,080
all these devices uh connected to the

00:23:35,039 --> 00:23:39,520
cloud right

00:23:36,080 --> 00:23:43,039
so uh basically we said that we can

00:23:39,520 --> 00:23:44,799
send commands or using the eclipse honor

00:23:43,039 --> 00:23:46,480
from the cloud to device but what kind

00:23:44,799 --> 00:23:48,400
of commands and what we listen to

00:23:46,480 --> 00:23:49,840
those commands on devices and and how

00:23:48,400 --> 00:23:54,400
we're gonna

00:23:49,840 --> 00:23:54,400
support uh uh like uh

00:23:54,559 --> 00:23:59,039
updates of of software on devices and

00:23:57,360 --> 00:24:01,120
and uh

00:23:59,039 --> 00:24:02,559
doing different different kind of uh

00:24:01,120 --> 00:24:04,720
different kind of updates

00:24:02,559 --> 00:24:05,840
so eclipse hog bit is is a project that

00:24:04,720 --> 00:24:08,799
that defines

00:24:05,840 --> 00:24:09,600
uh all the tools that we need for that

00:24:08,799 --> 00:24:11,679
it can

00:24:09,600 --> 00:24:13,200
again scale to the millions of devices

00:24:11,679 --> 00:24:16,480
and a lot of software

00:24:13,200 --> 00:24:19,279
to do that but also define a more

00:24:16,480 --> 00:24:20,400
complex scenarios uh for that like like

00:24:19,279 --> 00:24:23,840
uh rollout

00:24:20,400 --> 00:24:27,039
strategies and and uh detection

00:24:23,840 --> 00:24:29,360
error detection rates so that you can be

00:24:27,039 --> 00:24:31,039
able to confidently update millions of

00:24:29,360 --> 00:24:34,159
devices

00:24:31,039 --> 00:24:35,600
you know in a in a secure in a secure

00:24:34,159 --> 00:24:38,799
fashion

00:24:35,600 --> 00:24:40,799
and uh one thing to to

00:24:38,799 --> 00:24:42,960
tie all these projects together is

00:24:40,799 --> 00:24:43,760
something what we call the cloud to edge

00:24:42,960 --> 00:24:46,880
package

00:24:43,760 --> 00:24:48,080
so each of these uh projects like horno

00:24:46,880 --> 00:24:50,880
dito and hogbit

00:24:48,080 --> 00:24:53,360
all have have their own helm packages so

00:24:50,880 --> 00:24:55,919
so they're really very easy

00:24:53,360 --> 00:24:57,200
uh to install in in the kubernetes

00:24:55,919 --> 00:25:00,000
environment

00:24:57,200 --> 00:25:01,120
uh but we also defined a cloud to edge

00:25:00,000 --> 00:25:03,360
package which

00:25:01,120 --> 00:25:04,880
with basically fun command as you can

00:25:03,360 --> 00:25:08,480
see uh on this screen

00:25:04,880 --> 00:25:10,880
you can uh install the the whole cloud

00:25:08,480 --> 00:25:11,679
iot platform consists consisting of

00:25:10,880 --> 00:25:14,320
these projects

00:25:11,679 --> 00:25:16,640
all configured to work the work together

00:25:14,320 --> 00:25:19,840
in in the in the coordination

00:25:16,640 --> 00:25:22,080
and we have a lot of a lot of so so

00:25:19,840 --> 00:25:23,360
if you look at it look at it like this

00:25:22,080 --> 00:25:26,480
it's it's positions

00:25:23,360 --> 00:25:26,960
as a as a cloud platform right but more

00:25:26,480 --> 00:25:30,320
and more

00:25:26,960 --> 00:25:32,880
we we're discussing at how we can bring

00:25:30,320 --> 00:25:33,840
some of these functionalities closer to

00:25:32,880 --> 00:25:37,039
the edge and

00:25:33,840 --> 00:25:40,720
make a make a more more uh

00:25:37,039 --> 00:25:42,320
more uh edge edge style deployment of of

00:25:40,720 --> 00:25:45,279
these functionalities

00:25:42,320 --> 00:25:47,520
uh in different environments but this is

00:25:45,279 --> 00:25:50,320
something that that will probably talk

00:25:47,520 --> 00:25:50,880
talk about in the future or talk about

00:25:50,320 --> 00:25:54,000
during

00:25:50,880 --> 00:25:54,720
our uh our regular course so this is

00:25:54,000 --> 00:25:57,760
again

00:25:54,720 --> 00:26:00,000
the call out to to to join our

00:25:57,760 --> 00:26:01,039
regular meetings which are happening

00:26:00,000 --> 00:26:03,840
every other

00:26:01,039 --> 00:26:04,320
wednesday we have two different uh two

00:26:03,840 --> 00:26:07,120
different

00:26:04,320 --> 00:26:07,919
uh time slots one uh more appropriate

00:26:07,120 --> 00:26:11,120
for uh

00:26:07,919 --> 00:26:14,240
for a western world for for us

00:26:11,120 --> 00:26:14,640
and one more up more adjusted for for

00:26:14,240 --> 00:26:16,799
the

00:26:14,640 --> 00:26:18,080
apex so that everybody can can have

00:26:16,799 --> 00:26:21,120
their own

00:26:18,080 --> 00:26:24,960
their own uh uh

00:26:21,120 --> 00:26:26,880
appropriate time slot so

00:26:24,960 --> 00:26:28,880
that's it steve do you have anything

00:26:26,880 --> 00:26:31,360
else to add at the

00:26:28,880 --> 00:26:31,360
at the end

00:26:32,000 --> 00:26:34,559
you're muted

00:26:36,080 --> 00:26:40,960
uh no uh that was great i think we're

00:26:39,520 --> 00:26:44,080
staying online for

00:26:40,960 --> 00:26:47,279
q a so uh feel free if

00:26:44,080 --> 00:26:49,760
anything came up to ask us questions and

00:26:47,279 --> 00:26:50,559
if you're watching this on the recording

00:26:49,760 --> 00:26:52,880
uh

00:26:50,559 --> 00:26:55,120
join the group we've got an active slack

00:26:52,880 --> 00:26:58,480
channel you can ask questions there

00:26:55,120 --> 00:26:59,760
and we also have a member driven agenda

00:26:58,480 --> 00:27:02,480
on our meetings

00:26:59,760 --> 00:27:04,559
so if there are any topics that are of

00:27:02,480 --> 00:27:07,279
interest to you i'd invite you to

00:27:04,559 --> 00:27:09,120
first join the group then go and

00:27:07,279 --> 00:27:13,200
nominate topics for

00:27:09,120 --> 00:27:13,200
an agenda at a future meeting and

00:27:13,440 --> 00:27:16,720
the leadership of this group will engage

00:27:16,159 --> 00:27:20,000
in beth

00:27:16,720 --> 00:27:21,039
best efforts to get speakers on topics

00:27:20,000 --> 00:27:24,159
that are

00:27:21,039 --> 00:27:24,159
driven by membership

00:27:25,279 --> 00:27:32,000
okay yeah thanks for watching watching

00:27:26,880 --> 00:27:32,000

YouTube URL: https://www.youtube.com/watch?v=KssmCcH6JUc


