Title: Intro: OpenTelemetry SDK Design and Implementation Values - Sergey Kanzhelev, Google
Publication date: 2020-09-11
Playlist: Cloud Native + Open Source Virtual Summit China 2020
Description: 
	Don’t miss out! Join us at our upcoming events: EnvoyCon Virtual on October 15 and KubeCon + CloudNativeCon North America 2020 Virtual from November 17-20. Learn more at https://kubecon.io The conferences feature presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects. 

Intro: OpenTelemetry SDK Design and Implementation Values - Sergey Kanzhelev, Google 

OpenTelemetry provides a single set of APIs, libraries, agents, and collector services to capture distributed traces and metrics from your application. You can analyze them using Prometheus, Jaeger, and other observability tools. OpenTelemeetry is now in beta. Different platforms chose different values developing software system. This talk describes the principles OpenTelemetry values the most building the best telemetry solution. It explains how hard it may be to keep it simple, yet performant and expressive. Finally, you will learn how you can contribute. 

https://sched.co/cpAP
Captions: 
	00:00:02,399 --> 00:00:06,799
hello

00:00:04,160 --> 00:00:09,120
you are at the maintenance track open

00:00:06,799 --> 00:00:12,320
telemetry session at cloud native

00:00:09,120 --> 00:00:14,719
and open source virtual assignment china

00:00:12,320 --> 00:00:17,119
00:00:14,719 --> 00:00:18,720
we will talk about software design and

00:00:17,119 --> 00:00:22,720
implementation values

00:00:18,720 --> 00:00:22,720
that will follow in open telemetry

00:00:25,840 --> 00:00:31,920
my name is sergey kangel

00:00:28,880 --> 00:00:33,840
i have more than 15 years experience in

00:00:31,920 --> 00:00:36,160
application monitoring

00:00:33,840 --> 00:00:36,960
i'm a technical and governance committee

00:00:36,160 --> 00:00:39,920
member

00:00:36,960 --> 00:00:40,800
for open telemetry and currently working

00:00:39,920 --> 00:00:44,399
at google

00:00:40,800 --> 00:00:45,120
on google kubernetes engine you can find

00:00:44,399 --> 00:00:48,239
me

00:00:45,120 --> 00:00:51,360
on github twitter and linkedin

00:00:48,239 --> 00:00:51,360
at sergey kanjima

00:00:53,680 --> 00:00:56,879
today we will talk about different

00:00:56,320 --> 00:00:59,039
topics

00:00:56,879 --> 00:01:00,079
but the main goal of this talk is to

00:00:59,039 --> 00:01:03,440
introduce you

00:01:00,079 --> 00:01:06,879
to open telemetry and explain

00:01:03,440 --> 00:01:06,879
how you can get involved

00:01:06,880 --> 00:01:10,799
i also will talk about goals and

00:01:09,439 --> 00:01:13,200
aspirations

00:01:10,799 --> 00:01:14,240
that open telemetry project has started

00:01:13,200 --> 00:01:17,600
with

00:01:14,240 --> 00:01:20,080
its core values that we follow

00:01:17,600 --> 00:01:20,080
thoroughly

00:01:21,600 --> 00:01:26,479
first let me introduce you to open

00:01:24,840 --> 00:01:29,360
telemetry

00:01:26,479 --> 00:01:31,040
i will approach it answering three

00:01:29,360 --> 00:01:34,479
questions

00:01:31,040 --> 00:01:38,240
what what is open telemetry

00:01:34,479 --> 00:01:41,439
why why we need open telemetry at all

00:01:38,240 --> 00:01:43,600
and how how open solemnity

00:01:41,439 --> 00:01:46,000
can solve the problem that i will

00:01:43,600 --> 00:01:46,000
explain

00:01:49,280 --> 00:01:52,880
let's explore the aspirational goal of

00:01:51,759 --> 00:01:56,399
open telemetry

00:01:52,880 --> 00:01:59,920
that you can find on our website

00:01:56,399 --> 00:02:02,159
it is to make robust portable telemetry

00:01:59,920 --> 00:02:04,640
a built-in feature of cloud native

00:02:02,159 --> 00:02:04,640
software

00:02:04,799 --> 00:02:08,720
we believe that every application needs

00:02:07,600 --> 00:02:11,840
to be transparent

00:02:08,720 --> 00:02:14,959
to its owner in terms of troubleshooting

00:02:11,840 --> 00:02:16,800
monitoring and observability

00:02:14,959 --> 00:02:19,120
it shouldn't matter if you developed

00:02:16,800 --> 00:02:22,239
this application yourself

00:02:19,120 --> 00:02:25,040
or simply compiled it

00:02:22,239 --> 00:02:26,000
as a binary from different components

00:02:25,040 --> 00:02:29,360
from numerous

00:02:26,000 --> 00:02:32,080
teams there should be

00:02:29,360 --> 00:02:34,560
a single way to get observability

00:02:32,080 --> 00:02:34,560
signals

00:02:35,200 --> 00:02:39,040
standard output is a good example of

00:02:37,200 --> 00:02:40,959
that approach

00:02:39,040 --> 00:02:42,800
no matter which component you use no

00:02:40,959 --> 00:02:44,000
matter which library your application

00:02:42,800 --> 00:02:45,840
calls

00:02:44,000 --> 00:02:47,440
there is a pretty good chance that this

00:02:45,840 --> 00:02:50,480
library can't uh

00:02:47,440 --> 00:02:51,680
can lock something to send it out and

00:02:50,480 --> 00:02:53,200
you can find

00:02:51,680 --> 00:02:57,440
most of troubleshooting information

00:02:53,200 --> 00:03:00,959
there given the right verbosity

00:02:57,440 --> 00:03:04,480
opencl takes standard output approach

00:03:00,959 --> 00:03:08,640
to the very next level it provides

00:03:04,480 --> 00:03:11,200
a single set of apis and wire protocols

00:03:08,640 --> 00:03:12,159
alongside the collector service to ana

00:03:11,200 --> 00:03:15,519
to collect and

00:03:12,159 --> 00:03:19,840
analyze all the signals that your

00:03:15,519 --> 00:03:19,840
application produces

00:03:21,280 --> 00:03:25,200
it is extremely easy to enable open

00:03:23,920 --> 00:03:27,760
telemetry

00:03:25,200 --> 00:03:30,159
on this slide i show dot net code how to

00:03:27,760 --> 00:03:32,959
do it on dot net

00:03:30,159 --> 00:03:34,799
you know what uh you can notice that in

00:03:32,959 --> 00:03:37,599
dotnet you simply specify

00:03:34,799 --> 00:03:39,280
which signals you want to collect

00:03:37,599 --> 00:03:42,879
signals from isp.net

00:03:39,280 --> 00:03:45,360
framework signals from http library

00:03:42,879 --> 00:03:46,640
and where to send the signals to in this

00:03:45,360 --> 00:03:48,959
case to zipkin

00:03:46,640 --> 00:03:51,519
and you can see results in zika

00:03:48,959 --> 00:03:51,519
dashboard

00:03:53,519 --> 00:03:57,920
note there are seven lines of code to

00:03:55,920 --> 00:04:01,200
enable very rich functionality

00:03:57,920 --> 00:04:03,360
to track your application uh distributed

00:04:01,200 --> 00:04:06,319
tracing

00:04:03,360 --> 00:04:07,280
and we keep simplifying this code and

00:04:06,319 --> 00:04:10,239
hopefully

00:04:07,280 --> 00:04:11,439
very soon like in java in python already

00:04:10,239 --> 00:04:14,720
today

00:04:11,439 --> 00:04:18,320
there'll be no code enablement for open

00:04:14,720 --> 00:04:18,320
telemetry and diagnosis

00:04:19,120 --> 00:04:23,199
with java and python we're releasing

00:04:21,199 --> 00:04:25,600
auto instrumentation packages

00:04:23,199 --> 00:04:26,800
that simply that can enable monitoring

00:04:25,600 --> 00:04:28,400
on any application

00:04:26,800 --> 00:04:30,880
even if it's already running in

00:04:28,400 --> 00:04:30,880
production

00:04:31,120 --> 00:04:35,919
again with open telemetry we are making

00:04:34,560 --> 00:04:37,840
sure that all components are

00:04:35,919 --> 00:04:39,120
instrumented with open telemetry one way

00:04:37,840 --> 00:04:42,160
or another

00:04:39,120 --> 00:04:45,280
and you simply enable it monitoring and

00:04:42,160 --> 00:04:45,280
start collecting the signal

00:04:48,080 --> 00:04:55,120
and it is a true future of monitoring

00:04:51,600 --> 00:04:59,120
according to gartner analytics firm

00:04:55,120 --> 00:05:01,680
pretty soon majority of applications

00:04:59,120 --> 00:05:04,560
will use oss instrumentation not a

00:05:01,680 --> 00:05:07,199
vendor specific one

00:05:04,560 --> 00:05:08,720
you may be skeptical and no trust

00:05:07,199 --> 00:05:12,240
analysts

00:05:08,720 --> 00:05:12,240
you may say it's marketing hype

00:05:12,479 --> 00:05:19,199
in this case i shall explain why

00:05:16,000 --> 00:05:21,520
we need opencl imaging and how it was

00:05:19,199 --> 00:05:21,520
born

00:05:23,600 --> 00:05:29,120
let me tell you a story about checkbox

00:05:26,479 --> 00:05:29,120
competition

00:05:29,280 --> 00:05:33,759
only a few years back there was a

00:05:31,680 --> 00:05:35,520
handful of app development platforms and

00:05:33,759 --> 00:05:38,880
database choices

00:05:35,520 --> 00:05:42,000
only few and every choice

00:05:38,880 --> 00:05:44,160
we had was developed quite slow

00:05:42,000 --> 00:05:47,360
it was typical to have a release cycle

00:05:44,160 --> 00:05:50,639
of one year or more

00:05:47,360 --> 00:05:52,320
and then one software is released once

00:05:50,639 --> 00:05:55,039
next version is released

00:05:52,320 --> 00:05:56,240
you're waiting for service pack maybe

00:05:55,039 --> 00:05:57,680
for second service pack

00:05:56,240 --> 00:06:00,240
and only then you install it into

00:05:57,680 --> 00:06:00,240
production

00:06:00,400 --> 00:06:06,240
so a few companies that were doing my

00:06:03,440 --> 00:06:07,199
working on monitoring tools can easily

00:06:06,240 --> 00:06:10,639
catch up

00:06:07,199 --> 00:06:14,880
with the number of platforms and the

00:06:10,639 --> 00:06:17,199
tools developers were using

00:06:14,880 --> 00:06:18,400
one supported platform for the company

00:06:17,199 --> 00:06:21,840
one checkbox

00:06:18,400 --> 00:06:21,840
in the list of supported platforms

00:06:22,240 --> 00:06:25,520
customers the choosing companies

00:06:24,319 --> 00:06:28,639
monitoring companies

00:06:25,520 --> 00:06:31,360
based on the price for sure but

00:06:28,639 --> 00:06:35,440
also based on the list of check boxes

00:06:31,360 --> 00:06:38,880
checked for this particular company

00:06:35,440 --> 00:06:42,000
now let's go back into the current days

00:06:38,880 --> 00:06:43,759
know the cncf landscape it's only open

00:06:42,000 --> 00:06:48,000
source components that

00:06:43,759 --> 00:06:50,319
people use in day and day out

00:06:48,000 --> 00:06:51,360
doesn't include all the vendor-specific

00:06:50,319 --> 00:06:54,560
uh

00:06:51,360 --> 00:06:57,520
uh platforms it doesn't include some

00:06:54,560 --> 00:06:59,840
proprietary platforms

00:06:57,520 --> 00:07:01,360
and all this software including vendor

00:06:59,840 --> 00:07:04,400
and proprietary platforms

00:07:01,360 --> 00:07:06,720
moving with a high velocity

00:07:04,400 --> 00:07:09,440
you have releases every quarter you have

00:07:06,720 --> 00:07:12,000
releases every month

00:07:09,440 --> 00:07:12,960
and nobody can keep up with the pace of

00:07:12,000 --> 00:07:17,280
development

00:07:12,960 --> 00:07:20,319
that we observe these days

00:07:17,280 --> 00:07:23,680
so this change in landscape

00:07:20,319 --> 00:07:26,400
explain answers the question why

00:07:23,680 --> 00:07:27,039
we need open telemetry why there was a

00:07:26,400 --> 00:07:30,160
need

00:07:27,039 --> 00:07:32,639
to end this checkbox competition

00:07:30,160 --> 00:07:34,080
and work together to build a better

00:07:32,639 --> 00:07:36,319
monitoring can observation

00:07:34,080 --> 00:07:36,319
too

00:07:37,840 --> 00:07:41,520
there is simply too many things to

00:07:40,880 --> 00:07:44,639
support

00:07:41,520 --> 00:07:47,440
for every single company but

00:07:44,639 --> 00:07:50,560
how open telemetry can succeed so let's

00:07:47,440 --> 00:07:50,560
get to the how question

00:07:51,759 --> 00:07:54,960
the answer is you want to build it in

00:07:54,560 --> 00:07:58,000
into

00:07:54,960 --> 00:08:01,280
every single library and platform

00:07:58,000 --> 00:08:04,319
so they all will be pre-instrumented

00:08:01,280 --> 00:08:07,440
and to do that you need two things

00:08:04,319 --> 00:08:08,960
first you need to build a great set of

00:08:07,440 --> 00:08:13,039
apis and sdks

00:08:08,960 --> 00:08:14,400
that everybody love and enjoy

00:08:13,039 --> 00:08:16,800
then people will be ready to take

00:08:14,400 --> 00:08:18,479
dependency on it and build it into their

00:08:16,800 --> 00:08:21,520
software

00:08:18,479 --> 00:08:24,560
and secondly you need to

00:08:21,520 --> 00:08:26,319
build a community of people who

00:08:24,560 --> 00:08:30,400
ready to work on this open telemetry

00:08:26,319 --> 00:08:30,400
project together and spread the word

00:08:31,199 --> 00:08:37,440
and we have truly amazing community

00:08:34,320 --> 00:08:40,640
amongst all cncf projects only in

00:08:37,440 --> 00:08:44,240
single year open telemetry get to the

00:08:40,640 --> 00:08:46,399
second highest amount of github activity

00:08:44,240 --> 00:08:49,760
github activity includes things like

00:08:46,399 --> 00:08:52,080
commenting and discussing issues

00:08:49,760 --> 00:08:52,800
making pull requests commenting on pull

00:08:52,080 --> 00:08:55,839
requests

00:08:52,800 --> 00:08:55,839
writing documentation

00:08:56,720 --> 00:09:00,240
and in less than one year we get to the

00:08:59,120 --> 00:09:03,279
second place

00:09:00,240 --> 00:09:05,040
it explains it tells how many people are

00:09:03,279 --> 00:09:09,839
excited about this project

00:09:05,040 --> 00:09:09,839
and how many people want to collaborate

00:09:10,240 --> 00:09:16,320
you may note also also that

00:09:13,839 --> 00:09:17,600
there is no single company that

00:09:16,320 --> 00:09:21,519
overwhelms

00:09:17,600 --> 00:09:24,959
the space contributions are quite

00:09:21,519 --> 00:09:27,360
spread out across many many companies

00:09:24,959 --> 00:09:28,399
some companies only contributed a little

00:09:27,360 --> 00:09:31,440
some companies

00:09:28,399 --> 00:09:34,399
contributed a lot but there is no

00:09:31,440 --> 00:09:36,000
single company that dominates the space

00:09:34,399 --> 00:09:37,440
and dictates the rules

00:09:36,000 --> 00:09:40,240
and this is very important for the

00:09:37,440 --> 00:09:42,000
project like that

00:09:40,240 --> 00:09:43,680
since there were so many companies from

00:09:42,000 --> 00:09:46,880
a get-go

00:09:43,680 --> 00:09:50,800
we needed to make sure that

00:09:46,880 --> 00:09:55,519
projects has a project has a

00:09:50,800 --> 00:09:55,519
good and fair governance model

00:09:56,240 --> 00:09:59,760
and for governance model we came with

00:09:58,720 --> 00:10:02,399
approach

00:09:59,760 --> 00:10:02,800
the bigger your contributions are the

00:10:02,399 --> 00:10:06,160
more

00:10:02,800 --> 00:10:06,160
influence you have in a project

00:10:06,560 --> 00:10:10,160
beyond the project vision through

00:10:08,560 --> 00:10:12,720
governance

00:10:10,160 --> 00:10:13,519
open telemetry also defines a technical

00:10:12,720 --> 00:10:17,200
committee

00:10:13,519 --> 00:10:21,279
to oversee and direct all the

00:10:17,200 --> 00:10:21,279
development in the project

00:10:21,360 --> 00:10:28,079
so next let's make uh take a look at

00:10:25,200 --> 00:10:29,519
how we make decisions on where to go

00:10:28,079 --> 00:10:33,519
with open telemetry

00:10:29,519 --> 00:10:36,000
and why let's talk about

00:10:33,519 --> 00:10:36,000
values

00:10:37,040 --> 00:10:41,440
in this section i will talk about

00:10:39,519 --> 00:10:45,040
software design values in

00:10:41,440 --> 00:10:47,600
general what people may choose to uh

00:10:45,040 --> 00:10:49,680
as a as their radio we'll talk about

00:10:47,600 --> 00:10:53,279
open telemetry specific

00:10:49,680 --> 00:10:54,079
and think what examples we have in open

00:10:53,279 --> 00:11:01,839
telemetry

00:10:54,079 --> 00:11:01,839
where these values were executed

00:11:02,160 --> 00:11:05,839
this slide was heavily inspired by brian

00:11:05,040 --> 00:11:09,040
cantrell

00:11:05,839 --> 00:11:12,320
a talk where he was talking about

00:11:09,040 --> 00:11:12,320
i think rust development

00:11:12,640 --> 00:11:16,399
this slide lists number of

00:11:15,279 --> 00:11:18,800
characteristics

00:11:16,399 --> 00:11:20,160
your application or piece of software

00:11:18,800 --> 00:11:22,800
may have

00:11:20,160 --> 00:11:25,519
that you may be interested in pursuing

00:11:22,800 --> 00:11:25,519
and develop

00:11:25,680 --> 00:11:28,880
when you develop a piece of software you

00:11:27,680 --> 00:11:31,920
definitely want your

00:11:28,880 --> 00:11:33,440
software to be robust and resilient you

00:11:31,920 --> 00:11:36,240
think about simplicity of and

00:11:33,440 --> 00:11:38,720
transparency of apis

00:11:36,240 --> 00:11:39,680
you pay attention on operability of your

00:11:38,720 --> 00:11:41,519
software

00:11:39,680 --> 00:11:44,399
so everybody can trouble troubleshoot if

00:11:41,519 --> 00:11:44,399
something goes wrong

00:11:44,480 --> 00:11:49,519
this list on the slide outlines

00:11:47,519 --> 00:11:51,760
a small set of characteristics your

00:11:49,519 --> 00:11:53,760
application might have

00:11:51,760 --> 00:11:57,680
and it's not prioritized in any way it's

00:11:53,760 --> 00:12:00,240
just an alphabetical order

00:11:57,680 --> 00:12:02,720
so you develop a piece of software oh

00:12:00,240 --> 00:12:06,320
such a sweet feeling

00:12:02,720 --> 00:12:08,000
you're crafting it you're an artist

00:12:06,320 --> 00:12:11,440
you want it to be the best piece of

00:12:08,000 --> 00:12:14,560
software ever

00:12:11,440 --> 00:12:17,760
know that every artist has its own style

00:12:14,560 --> 00:12:20,000
and you are not an exception

00:12:17,760 --> 00:12:21,839
some engineers want to concentrate on

00:12:20,000 --> 00:12:24,480
performance another engineer

00:12:21,839 --> 00:12:25,600
wants to concentrate on something else

00:12:24,480 --> 00:12:29,200
and many times

00:12:25,600 --> 00:12:32,399
characteristics from this table you pick

00:12:29,200 --> 00:12:36,000
goes into conflict with each other

00:12:32,399 --> 00:12:38,800
let's say you want to create a new api

00:12:36,000 --> 00:12:39,680
and to make it more elegant you want to

00:12:38,800 --> 00:12:43,120
require an

00:12:39,680 --> 00:12:44,240
allocation of an object not a big deal

00:12:43,120 --> 00:12:47,279
you would say

00:12:44,240 --> 00:12:47,839
but allocation on a critical path it

00:12:47,279 --> 00:12:50,160
definitely

00:12:47,839 --> 00:12:52,320
hurts performance and if you set

00:12:50,160 --> 00:12:55,760
performance as a main goal you wouldn't

00:12:52,320 --> 00:12:57,680
probably go with this allocation

00:12:55,760 --> 00:12:59,040
i'm not saying that single allocation is

00:12:57,680 --> 00:13:01,120
compromising performance

00:12:59,040 --> 00:13:02,800
i just saying that making this decision

00:13:01,120 --> 00:13:06,480
towards elegance of

00:13:02,800 --> 00:13:09,680
elegancy of api you declare

00:13:06,480 --> 00:13:10,720
your value you declare that this value

00:13:09,680 --> 00:13:13,760
is a little bit

00:13:10,720 --> 00:13:15,920
more important than that

00:13:13,760 --> 00:13:17,839
sometimes decisions like that are very

00:13:15,920 --> 00:13:19,040
straightforward and not controversial at

00:13:17,839 --> 00:13:21,760
all

00:13:19,040 --> 00:13:22,639
but it escalates rather quickly as

00:13:21,760 --> 00:13:26,399
software piece

00:13:22,639 --> 00:13:29,120
grows and pretty soon

00:13:26,399 --> 00:13:31,680
it's full of trade-offs explicit and

00:13:29,120 --> 00:13:31,680
implicit

00:13:32,320 --> 00:13:35,920
some is the case and software pieces may

00:13:35,440 --> 00:13:38,880
be

00:13:35,920 --> 00:13:41,920
developed for heavy weight back-ends

00:13:38,880 --> 00:13:44,160
let's say you write an sdk for that

00:13:41,920 --> 00:13:45,199
you probably would prefer to your sdk

00:13:44,160 --> 00:13:47,279
and api to be

00:13:45,199 --> 00:13:48,480
as expressive and simple to use as

00:13:47,279 --> 00:13:51,519
possible

00:13:48,480 --> 00:13:53,279
so you always know which

00:13:51,519 --> 00:13:54,560
data you want to extract from this

00:13:53,279 --> 00:13:58,000
heavyweight uh

00:13:54,560 --> 00:14:01,680
backhand you don't want to your back end

00:13:58,000 --> 00:14:04,639
to work for nothing and you want it to

00:14:01,680 --> 00:14:06,480
be as performed as possible

00:14:04,639 --> 00:14:08,320
you also will probably invest into

00:14:06,480 --> 00:14:10,480
operability of your api

00:14:08,320 --> 00:14:13,199
so if anything goes wrong you know about

00:14:10,480 --> 00:14:15,600
it right away

00:14:13,199 --> 00:14:16,720
and you probably want to do it on very

00:14:15,600 --> 00:14:19,920
high velocity

00:14:16,720 --> 00:14:23,440
so any back-end changes are reflected in

00:14:19,920 --> 00:14:23,440
sdk right away

00:14:25,120 --> 00:14:32,720
or you may be developing a different api

00:14:28,720 --> 00:14:35,680
this api may maybe

00:14:32,720 --> 00:14:38,560
library for quick access to some very

00:14:35,680 --> 00:14:39,680
small resources

00:14:38,560 --> 00:14:41,680
you probably will want your

00:14:39,680 --> 00:14:45,279
implementation to be

00:14:41,680 --> 00:14:47,839
no lock on read you may want to make it

00:14:45,279 --> 00:14:50,160
highly available

00:14:47,839 --> 00:14:51,839
and you clearly want to be as secure and

00:14:50,160 --> 00:14:56,079
simple as possible

00:14:51,839 --> 00:14:58,320
so those may be your values you see

00:14:56,079 --> 00:15:00,399
depending on what you develop the values

00:14:58,320 --> 00:15:03,120
will be different

00:15:00,399 --> 00:15:05,519
so let's take a look at open telemetry

00:15:03,120 --> 00:15:05,519
values

00:15:06,079 --> 00:15:12,720
in the previous section about what

00:15:09,360 --> 00:15:16,320
why and how of open telemetry

00:15:12,720 --> 00:15:18,480
we discussed the values of we discussed

00:15:16,320 --> 00:15:19,680
what office element is and why it came

00:15:18,480 --> 00:15:22,720
this way

00:15:19,680 --> 00:15:25,440
so here are some values that inherited

00:15:22,720 --> 00:15:25,440
from that uh

00:15:25,760 --> 00:15:30,639
from those goals open telemetry values

00:15:29,680 --> 00:15:35,680
stability

00:15:30,639 --> 00:15:41,040
resiliency compatibility and performance

00:15:35,680 --> 00:15:43,560
let's explore these values in details

00:15:41,040 --> 00:15:44,639
computability is perhaps the most

00:15:43,560 --> 00:15:47,680
[Music]

00:15:44,639 --> 00:15:49,279
important value of open telemetry

00:15:47,680 --> 00:15:51,440
with a number of stakeholders and

00:15:49,279 --> 00:15:54,079
supported scenarios

00:15:51,440 --> 00:15:55,680
it is clear we require clear

00:15:54,079 --> 00:15:58,720
specifications and follow

00:15:55,680 --> 00:16:00,800
as many standards as possible

00:15:58,720 --> 00:16:02,079
it is very important to embrace like

00:16:00,800 --> 00:16:05,600
standards like we did

00:16:02,079 --> 00:16:06,800
with w3c trace context it's important to

00:16:05,600 --> 00:16:12,000
develop

00:16:06,800 --> 00:16:12,000
via protocols in aliens with everybody

00:16:12,880 --> 00:16:18,160
so open telemetry does support

00:16:16,399 --> 00:16:20,000
all the standards out of the box and

00:16:18,160 --> 00:16:22,560
embrace them

00:16:20,000 --> 00:16:24,800
furthermore we even built open telemetry

00:16:22,560 --> 00:16:26,880
apis inside a.net

00:16:24,800 --> 00:16:28,240
with some compromises on specification

00:16:26,880 --> 00:16:31,600
but nevertheless

00:16:28,240 --> 00:16:32,480
it minimizes dependency people need to

00:16:31,600 --> 00:16:35,040
take

00:16:32,480 --> 00:16:38,320
to be compatible with open intervention

00:16:35,040 --> 00:16:41,600
and increased compatibility

00:16:38,320 --> 00:16:43,520
is valid way more for our project

00:16:41,600 --> 00:16:44,639
than some

00:16:43,520 --> 00:16:48,720
[Music]

00:16:44,639 --> 00:16:48,720
other alternative implementations

00:16:49,519 --> 00:16:53,839
next value is stability

00:16:54,560 --> 00:17:00,079
with the libraries taking dependency on

00:16:58,560 --> 00:17:02,959
open telemetry

00:17:00,079 --> 00:17:04,959
you want your apis and sdk to be as

00:17:02,959 --> 00:17:06,880
stable as possible

00:17:04,959 --> 00:17:08,959
so there will be no questions whether

00:17:06,880 --> 00:17:11,439
library want to take dependency

00:17:08,959 --> 00:17:11,439
or not

00:17:13,039 --> 00:17:18,240
that's why some apis

00:17:16,079 --> 00:17:21,120
prefer name value attributes instead of

00:17:18,240 --> 00:17:23,280
strongly typed objects

00:17:21,120 --> 00:17:25,679
and we don't support many complicated

00:17:23,280 --> 00:17:29,280
cases which are one-offs

00:17:25,679 --> 00:17:31,840
in favor of simple scenarios that

00:17:29,280 --> 00:17:32,559
that can cover those complicated cases

00:17:31,840 --> 00:17:35,280
in more

00:17:32,559 --> 00:17:35,280
elaborate way

00:17:36,640 --> 00:17:44,000
then we value resiliency

00:17:40,799 --> 00:17:48,080
open telemetry have to be robust as any

00:17:44,000 --> 00:17:50,480
system library it is designed to work in

00:17:48,080 --> 00:17:54,480
critical conditions and collect

00:17:50,480 --> 00:17:54,480
telemetry from application distress

00:17:54,880 --> 00:18:00,080
but not only that open telemetry is also

00:17:57,840 --> 00:18:01,600
needs to be developed resilient to

00:18:00,080 --> 00:18:03,280
critical and adapt to critical

00:18:01,600 --> 00:18:06,320
conditions

00:18:03,280 --> 00:18:09,280
so it's okay to drop silencing

00:18:06,320 --> 00:18:10,240
if you don't crash application on high

00:18:09,280 --> 00:18:13,520
memory

00:18:10,240 --> 00:18:15,120
pressure scenario it is okay to send

00:18:13,520 --> 00:18:17,360
only critical events and

00:18:15,120 --> 00:18:20,720
lose some of them if your application is

00:18:17,360 --> 00:18:20,720
about to terminate and crash

00:18:21,679 --> 00:18:25,840
so resiliency is an important feature

00:18:24,559 --> 00:18:29,120
and finally

00:18:25,840 --> 00:18:32,320
performance performance is a fourth

00:18:29,120 --> 00:18:33,760
value that i want to talk about it's

00:18:32,320 --> 00:18:36,080
very critical because up

00:18:33,760 --> 00:18:36,799
the open telemetry will be on critical

00:18:36,080 --> 00:18:39,520
paths

00:18:36,799 --> 00:18:39,520
of libraries

00:18:40,480 --> 00:18:46,480
sometimes we compromise on performance

00:18:43,520 --> 00:18:48,160
in favor of other values that i listed

00:18:46,480 --> 00:18:51,679
before

00:18:48,160 --> 00:18:57,840
but whenever we can get to this

00:18:51,679 --> 00:18:57,840
it's a high high priority

00:18:58,240 --> 00:19:03,840
values are driven by people

00:19:01,520 --> 00:19:04,720
so every single person coming to the

00:19:03,840 --> 00:19:08,000
project

00:19:04,720 --> 00:19:11,520
brings his own uh view

00:19:08,000 --> 00:19:14,240
and open telemetry values

00:19:11,520 --> 00:19:14,799
are held by people maintaining the

00:19:14,240 --> 00:19:18,240
project

00:19:14,799 --> 00:19:18,880
and contributing to it and while it's

00:19:18,240 --> 00:19:20,720
doing that

00:19:18,880 --> 00:19:22,640
it attracts more people with the same

00:19:20,720 --> 00:19:26,799
values creating

00:19:22,640 --> 00:19:29,360
self-reinforcement cycle of values

00:19:26,799 --> 00:19:30,720
if you have opinions of what other

00:19:29,360 --> 00:19:31,919
values you want to bring into open

00:19:30,720 --> 00:19:33,520
telemetry

00:19:31,919 --> 00:19:34,960
and what values may be not that

00:19:33,520 --> 00:19:37,760
important

00:19:34,960 --> 00:19:39,120
join us and this is how you can join our

00:19:37,760 --> 00:19:41,919
community

00:19:39,120 --> 00:19:42,880
it's a very last section and uh i want

00:19:41,919 --> 00:19:44,720
to talk about

00:19:42,880 --> 00:19:46,080
how you can use open telemetry and give

00:19:44,720 --> 00:19:48,480
feedback

00:19:46,080 --> 00:19:49,600
how easy it is to contribute and some

00:19:48,480 --> 00:19:53,840
projects that you run

00:19:49,600 --> 00:19:53,840
around translation of documentation

00:19:54,559 --> 00:19:57,600
open telemetry is a set of libraries so

00:19:56,880 --> 00:19:59,360
we have

00:19:57,600 --> 00:20:01,600
we don't have any way to collect

00:19:59,360 --> 00:20:06,320
telemetry out of our

00:20:01,600 --> 00:20:08,880
users so if you use open telemetry

00:20:06,320 --> 00:20:09,600
you gave it a try you like it you don't

00:20:08,880 --> 00:20:12,480
like

00:20:09,600 --> 00:20:14,159
like it give us a feedback tell which

00:20:12,480 --> 00:20:15,039
environment your application was running

00:20:14,159 --> 00:20:17,200
into

00:20:15,039 --> 00:20:19,200
tell which scenarios you love the most

00:20:17,200 --> 00:20:22,559
and which didn't work for you

00:20:19,200 --> 00:20:23,360
what is missing it's all very valuable

00:20:22,559 --> 00:20:25,520
feedback

00:20:23,360 --> 00:20:26,799
and because we we don't have any other

00:20:25,520 --> 00:20:29,039
means to collect it

00:20:26,799 --> 00:20:29,840
so please come and tell us we are

00:20:29,039 --> 00:20:32,559
friendly

00:20:29,840 --> 00:20:32,559
our community

00:20:33,039 --> 00:20:37,039
if you decided that you want to fix a

00:20:34,480 --> 00:20:40,240
bug yourself or simply contribute

00:20:37,039 --> 00:20:43,520
in most cases it's trivial

00:20:40,240 --> 00:20:45,440
in many cases sdks and apis are very

00:20:43,520 --> 00:20:48,240
scoped projects

00:20:45,440 --> 00:20:49,440
they're very easy unit testable so some

00:20:48,240 --> 00:20:51,360
in many cases you

00:20:49,440 --> 00:20:53,039
only need to download it and run a test

00:20:51,360 --> 00:20:56,320
command you don't need to

00:20:53,039 --> 00:20:58,400
have complicated environment

00:20:56,320 --> 00:21:00,240
and there is always room for improvement

00:20:58,400 --> 00:21:03,440
even for small one

00:21:00,240 --> 00:21:06,480
as performance is our one of our

00:21:03,440 --> 00:21:08,400
core values there is always a piece of

00:21:06,480 --> 00:21:09,840
code that can be improved and made

00:21:08,400 --> 00:21:13,440
faster

00:21:09,840 --> 00:21:16,240
so please come and help us uh

00:21:13,440 --> 00:21:17,919
make open telemetry better if you're not

00:21:16,240 --> 00:21:19,120
interested in making open telemetry

00:21:17,919 --> 00:21:21,200
better there is another way to

00:21:19,120 --> 00:21:23,520
contribute

00:21:21,200 --> 00:21:26,400
you can go to library and instrument

00:21:23,520 --> 00:21:28,960
that library with open telemetry

00:21:26,400 --> 00:21:30,559
this will help community tremendously

00:21:28,960 --> 00:21:34,159
because more libraries

00:21:30,559 --> 00:21:36,320
natively support open telemetry better

00:21:34,159 --> 00:21:39,520
monitoring can observability we can

00:21:36,320 --> 00:21:39,520
provide our users

00:21:40,320 --> 00:21:43,600
there's also non-code participation

00:21:42,159 --> 00:21:45,360
options

00:21:43,600 --> 00:21:46,960
you can share your thoughts via blogs

00:21:45,360 --> 00:21:48,799
and events

00:21:46,960 --> 00:21:51,520
you can reach out to more people and

00:21:48,799 --> 00:21:54,640
tell them about this project

00:21:51,520 --> 00:21:55,679
you can help develop website join our

00:21:54,640 --> 00:21:58,640
website seek

00:21:55,679 --> 00:21:59,919
special interest group you can plan and

00:21:58,640 --> 00:22:02,640
triage work

00:21:59,919 --> 00:22:05,919
you can do reviews you can file issues

00:22:02,640 --> 00:22:08,320
numerous ways to contribute

00:22:05,919 --> 00:22:09,440
and there is even translation projects

00:22:08,320 --> 00:22:10,960
if you don't want to

00:22:09,440 --> 00:22:12,880
change the communication just translate

00:22:10,960 --> 00:22:15,440
it to your native tongue

00:22:12,880 --> 00:22:16,159
you already started two projects one to

00:22:15,440 --> 00:22:18,640
translate the

00:22:16,159 --> 00:22:20,159
uh documentation to chinese and another

00:22:18,640 --> 00:22:22,480
to japanese

00:22:20,159 --> 00:22:23,200
and this project wasn't started by open

00:22:22,480 --> 00:22:27,120
celebrity

00:22:23,200 --> 00:22:28,320
core maintainers it was just started by

00:22:27,120 --> 00:22:30,400
some people who just wanted to

00:22:28,320 --> 00:22:31,760
contribute so if you

00:22:30,400 --> 00:22:34,159
want to contribute to this project

00:22:31,760 --> 00:22:38,240
welcome if you want to start your own

00:22:34,159 --> 00:22:41,039
please do it it's easy

00:22:38,240 --> 00:22:42,880
thank you thank you for your attention

00:22:41,039 --> 00:22:45,040
thank you for coming to this talk

00:22:42,880 --> 00:22:46,320
i really appreciate you um

00:22:45,040 --> 00:22:50,400
[Music]

00:22:46,320 --> 00:22:52,000
seeing this video or attending this talk

00:22:50,400 --> 00:22:53,919
if you have any questions feel free to

00:22:52,000 --> 00:22:56,240
reach out to me or anybody in the open

00:22:53,919 --> 00:23:02,000
telemetry community

00:22:56,240 --> 00:23:02,000

YouTube URL: https://www.youtube.com/watch?v=VJEaqQVyqTA


