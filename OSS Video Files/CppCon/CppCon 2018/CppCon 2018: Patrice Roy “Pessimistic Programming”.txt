Title: CppCon 2018: Patrice Roy “Pessimistic Programming”
Publication date: 2018-10-15
Playlist: CppCon 2018
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018
—
We often write programs in such a way as to make them run fast. We want good average speed, high throughput, and we tend to be happy when benchmarks show that our peak running speed is better than expected. 

However, it's sometimes useful to write programs where we want to make the worst-case scenario faster, or make it run at predictable speed, or even reduce variations in execution speed. Instead of concentrating our efforts on making the best or the average speed better, we sometimes need to make the worst case speed "less bad". 

C++ is a wonderful language for such situations. C++ gives us a lot of control over what's going on, and we can use this control to our advantage. 

The aim of this talk is to discuss techniques to make the execution speed of programs more predictable, and to guide the compiler towards generating code where worst-case execution speed respects some constraints. It will probably most interesting to intermediate audiences who are curious about how to address such issues, or who wonder why it is sometimes important to be pessimistic and worry about those times when program execution takes the slow path. 
— 
Patrice Roy, Université de Sherbrooke
Professeur

Patrice Roy has been playing with C++, either professionally, for pleasure or (most of the time) both for over 20 years. After a few years doing R&D and working on military flight simulators, he moved on to academics and has been teaching computer science since 1998. Since 2005, he’s been involved more specifically in helping graduate students and professionals from the fields of real-time systems and game programming develop the skills they need to face today’s challenges. The rapid evolution of C++ in recent years has made his job even more enjoyable. He’s been a participating member in the ISO C++ Standards Committee since late 2014 and has been involved with the ISO Programming Language Vulnerabilities Committee since late 2015. He has five kids, and his wife ensures their house is home to a continuously changing number of cats, dogs and other animals.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,510 --> 00:00:04,980
good afternoon everyone so my name is as

00:00:03,419 --> 00:00:06,330
you can see Patras square which is

00:00:04,980 --> 00:00:09,000
already pronounced for English people I

00:00:06,330 --> 00:00:14,400
know and I work at both investiture book

00:00:09,000 --> 00:00:16,190
and in Quebec I do a number of things I

00:00:14,400 --> 00:00:21,029
have kids as you can see I have animals

00:00:16,190 --> 00:00:25,019
insignificant amount now I know to be a

00:00:21,029 --> 00:00:26,580
very bad slide organizer know there are

00:00:25,019 --> 00:00:29,070
some artists in this place I'm not one

00:00:26,580 --> 00:00:30,779
of them and talk about more person but I

00:00:29,070 --> 00:00:34,079
decided to something this year I put cat

00:00:30,779 --> 00:00:36,239
pictures sure I put kept pictures

00:00:34,079 --> 00:00:38,370
because my wife has a refuge and she has

00:00:36,239 --> 00:00:40,140
these cats that we these trades that we

00:00:38,370 --> 00:00:42,210
get we sterilize and find family

00:00:40,140 --> 00:00:44,129
families for this is probably not the

00:00:42,210 --> 00:00:46,020
best they knew to to show cats off but

00:00:44,129 --> 00:00:48,090
still I decided to do something useful

00:00:46,020 --> 00:00:50,129
so she exists you will see cat pictures

00:00:48,090 --> 00:00:52,969
for good reasons not just for

00:00:50,129 --> 00:00:54,270
distraction I've been teaching since

00:00:52,969 --> 00:00:56,399
00:00:54,270 --> 00:00:57,930
I've been flight simulators among the

00:00:56,399 --> 00:00:59,760
sea pasta Standards Committee and a

00:00:57,930 --> 00:01:00,120
number of other things and that's about

00:00:59,760 --> 00:01:04,260
it

00:01:00,120 --> 00:01:05,909
I do way too much stuff I put in the

00:01:04,260 --> 00:01:07,500
slides but mostly for your own pleasure

00:01:05,909 --> 00:01:09,780
should you download them a number of

00:01:07,500 --> 00:01:11,250
tools that I often use when I get

00:01:09,780 --> 00:01:13,710
presentations but I won't be using them

00:01:11,250 --> 00:01:16,350
much today I have a few things though

00:01:13,710 --> 00:01:19,350
that I invite you to check them out we

00:01:16,350 --> 00:01:22,560
don't we have a tooling group in C++ is

00:01:19,350 --> 00:01:25,890
they the 315 is working hard at making

00:01:22,560 --> 00:01:29,210
drive everyone easier and make sure that

00:01:25,890 --> 00:01:32,070
what goes in tuning faces TV and what is

00:01:29,210 --> 00:01:34,140
peripheral but useful both find their

00:01:32,070 --> 00:01:35,970
ways to you these are other things these

00:01:34,140 --> 00:01:38,100
are tools are online and can make you

00:01:35,970 --> 00:01:41,040
help you demonstrate things are

00:01:38,100 --> 00:01:42,659
interesting so the number of online

00:01:41,040 --> 00:01:45,689
compilers the online help

00:01:42,659 --> 00:01:47,070
that's almost standard there that

00:01:45,689 --> 00:01:50,700
there's a shell there there's an online

00:01:47,070 --> 00:01:52,229
clang there's got bolt that's absolutely

00:01:50,700 --> 00:01:54,299
awesome that you've probably seen in

00:01:52,229 --> 00:01:56,520
many many in talks if you've been to see

00:01:54,299 --> 00:01:58,469
me come before or this year I wasn't

00:01:56,520 --> 00:01:59,490
using it much today but you saw

00:01:58,469 --> 00:02:01,890
something's gonna be here this week I

00:01:59,490 --> 00:02:03,990
know there's the text of the standard

00:02:01,890 --> 00:02:05,520
that's more than up to date that's

00:02:03,990 --> 00:02:06,719
generated from the current sources all

00:02:05,520 --> 00:02:09,030
the time that you can actually check

00:02:06,719 --> 00:02:11,520
that C++ right there that's awesome

00:02:09,030 --> 00:02:12,989
there's the benchmark tool by Fred tango

00:02:11,520 --> 00:02:13,859
somewhere in the conference I saw him a

00:02:12,989 --> 00:02:16,950
few times this way

00:02:13,859 --> 00:02:17,400
the car guidelines and so forth and so

00:02:16,950 --> 00:02:19,980
on

00:02:17,400 --> 00:02:21,750
I urge you to get acquainted to these

00:02:19,980 --> 00:02:23,549
tools because they're very good none of

00:02:21,750 --> 00:02:25,829
them in by me and under picking anyway

00:02:23,549 --> 00:02:27,299
just they're good tools that they give I

00:02:25,829 --> 00:02:31,680
think that was a well-deserved

00:02:27,299 --> 00:02:33,510
reputation so as I said I have kept

00:02:31,680 --> 00:02:35,849
pictures they're not all for sale be

00:02:33,510 --> 00:02:38,340
careful how to give these to stay at

00:02:35,849 --> 00:02:41,010
home but it was a nice picture anyway so

00:02:38,340 --> 00:02:42,389
you you you some of you might have come

00:02:41,010 --> 00:02:43,909
here because of the title some of you

00:02:42,389 --> 00:02:46,859
have come here because of the abstract

00:02:43,909 --> 00:02:50,129
why am I giving this talk well this is

00:02:46,859 --> 00:02:52,230
sorry I had earlier this year saying

00:02:50,129 --> 00:02:53,400
well normally and I know something about

00:02:52,230 --> 00:02:55,739
that because I work with the games

00:02:53,400 --> 00:02:58,560
people and I mean is reporting for low

00:02:55,739 --> 00:03:00,840
latency people we tend to write programs

00:02:58,560 --> 00:03:04,200
because we want them to go fast and

00:03:00,840 --> 00:03:05,879
people often associate C++ with great

00:03:04,200 --> 00:03:07,950
fast

00:03:05,879 --> 00:03:10,019
Chandler talked about this a few years

00:03:07,950 --> 00:03:11,510
back general Carruth and you reminded us

00:03:10,019 --> 00:03:14,430
I think it was in this very room that

00:03:11,510 --> 00:03:17,040
it's not speed that signals gives us its

00:03:14,430 --> 00:03:19,260
control and through control we tend to

00:03:17,040 --> 00:03:22,409
make things go fast or be small

00:03:19,260 --> 00:03:22,799
why did you but now we tend to be very

00:03:22,409 --> 00:03:24,449
happy

00:03:22,799 --> 00:03:26,909
we should people that we generate less

00:03:24,449 --> 00:03:29,120
machine code we can bolt it we different

00:03:26,909 --> 00:03:33,000
benchmark and say oh my code is fast

00:03:29,120 --> 00:03:36,659
well it's cool but sometimes it's useful

00:03:33,000 --> 00:03:39,359
to make programs in such ways that the

00:03:36,659 --> 00:03:41,849
worst case scenario is fast that you're

00:03:39,359 --> 00:03:44,340
predictable that you have a low average

00:03:41,849 --> 00:03:47,819
deviation and for these things this

00:03:44,340 --> 00:03:49,620
episode is an awesome language - so I'm

00:03:47,819 --> 00:03:51,930
not focusing on the fast side of things

00:03:49,620 --> 00:03:56,639
today I'm focusing on something else so

00:03:51,930 --> 00:03:58,949
if you want to leave so I'm gonna try to

00:03:56,639 --> 00:04:03,689
look into ways of making the worst case

00:03:58,949 --> 00:04:06,959
less than our yeah our which will not be

00:04:03,689 --> 00:04:09,030
good for your code in general unless you

00:04:06,959 --> 00:04:13,829
want that thing to attend so you might

00:04:09,030 --> 00:04:15,359
get lesser performance but you will be

00:04:13,829 --> 00:04:17,609
fast when it counts but that's the point

00:04:15,359 --> 00:04:18,989
here so so by its beautiful language for

00:04:17,609 --> 00:04:22,650
that because it gives you control that

00:04:18,989 --> 00:04:25,090
that's the point so so we're trying to

00:04:22,650 --> 00:04:28,090
do it in such techniques

00:04:25,090 --> 00:04:29,410
come pick up our things and in such a

00:04:28,090 --> 00:04:31,419
way that they got better it does what we

00:04:29,410 --> 00:04:33,100
want but the copper is good so it's not

00:04:31,419 --> 00:04:34,900
a matter of saying the Commodore I know

00:04:33,100 --> 00:04:37,479
better than you out to Matt nice Michael

00:04:34,900 --> 00:04:38,800
just if you have ties you're the code

00:04:37,479 --> 00:04:40,330
the way everybody wants it to be

00:04:38,800 --> 00:04:42,100
optimized you're not going to serve me

00:04:40,330 --> 00:04:44,290
so please listen to me

00:04:42,100 --> 00:04:46,750
we're in that sense because the compiler

00:04:44,290 --> 00:04:49,720
is right it's gotta get a better result

00:04:46,750 --> 00:04:52,419
than you are and I was asked to say that

00:04:49,720 --> 00:04:54,340
this is from the intermediate look to

00:04:52,419 --> 00:04:55,750
advanced but maybe that behavior is also

00:04:54,340 --> 00:04:57,220
if it's beginner stress write to me and

00:04:55,750 --> 00:04:59,470
I'll write back

00:04:57,220 --> 00:05:02,889
yeah and if you're wondering why we

00:04:59,470 --> 00:05:03,970
should do such things or why sometimes

00:05:02,889 --> 00:05:09,790
it's important to worry about the horse

00:05:03,970 --> 00:05:13,660
dates so then why so this one is called

00:05:09,790 --> 00:05:15,729
Peter it would out of our house a few

00:05:13,660 --> 00:05:16,930
times and came back and came up and came

00:05:15,729 --> 00:05:19,960
back because they play I'm trying time

00:05:16,930 --> 00:05:22,810
lyndi there's some issue like it moved

00:05:19,960 --> 00:05:25,949
and we were not sure what to do about it

00:05:22,810 --> 00:05:29,260
or the kids were sick so the cat's fault

00:05:25,949 --> 00:05:31,990
nice cap so I put a link there where

00:05:29,260 --> 00:05:33,490
with all of the examples that I put in

00:05:31,990 --> 00:05:35,410
the slides the examples in the slides

00:05:33,490 --> 00:05:36,850
are incomplete but the code there

00:05:35,410 --> 00:05:38,410
compounds and you should probably be

00:05:36,850 --> 00:05:40,840
able to return you compare it you care

00:05:38,410 --> 00:05:44,789
for these are examples they are to show

00:05:40,840 --> 00:05:47,349
techniques yeah that's it

00:05:44,789 --> 00:05:49,210
so not everyone worries about worst-case

00:05:47,349 --> 00:05:51,849
behavior of course because that's not

00:05:49,210 --> 00:05:53,560
what we talked about morally most of you

00:05:51,849 --> 00:05:55,180
I guess when you're reading benchmarks

00:05:53,560 --> 00:05:56,650
you're looking at throughput you're

00:05:55,180 --> 00:06:00,820
looking at the mets case

00:05:56,650 --> 00:06:03,190
average case maybe or something there

00:06:00,820 --> 00:06:06,820
are people do for whom worst case is

00:06:03,190 --> 00:06:08,370
significantly worrying those that have

00:06:06,820 --> 00:06:11,349
links inning the life-saving devices

00:06:08,370 --> 00:06:13,570
where you normally don't stop that

00:06:11,349 --> 00:06:15,160
seesaw but when you have to stop it it

00:06:13,570 --> 00:06:18,460
has to stop right away because our arms

00:06:15,160 --> 00:06:20,080
along the way where you you have a

00:06:18,460 --> 00:06:21,160
self-driving car and when you press on

00:06:20,080 --> 00:06:22,720
the brake while you don't really don't

00:06:21,160 --> 00:06:26,460
press on the brake with your personal

00:06:22,720 --> 00:06:28,599
brake would be better if it breaks I

00:06:26,460 --> 00:06:30,099
think that you use you steer your

00:06:28,599 --> 00:06:32,260
airplane it would be nice if it then

00:06:30,099 --> 00:06:34,750
certainly and and there are programs

00:06:32,260 --> 00:06:36,969
have to be stable like just minimize as

00:06:34,750 --> 00:06:38,830
I said every deviation to make sure that

00:06:36,969 --> 00:06:41,260
from iteration to iteration you get free

00:06:38,830 --> 00:06:45,100
much the same result the same load and

00:06:41,260 --> 00:06:46,450
you can you're always playing with did

00:06:45,100 --> 00:06:48,520
you get more of this you got a little

00:06:46,450 --> 00:06:51,190
less of that so if you just watch once

00:06:48,520 --> 00:06:53,920
my world optimized for compare might not

00:06:51,190 --> 00:06:56,800
be doing that by default so as an

00:06:53,920 --> 00:07:00,580
example I work with people sometimes who

00:06:56,800 --> 00:07:02,020
were looking to get as many frames per

00:07:00,580 --> 00:07:06,370
second on screen as they can

00:07:02,020 --> 00:07:07,510
Siddalee 3580 awesome but if it's not

00:07:06,370 --> 00:07:12,340
Sables unpleasant

00:07:07,510 --> 00:07:13,930
I never worn those tasks on your head

00:07:12,340 --> 00:07:16,690
well there's a display there for the

00:07:13,930 --> 00:07:18,850
affiliate stuff I used to do military

00:07:16,690 --> 00:07:22,060
flight simulators where you're inside

00:07:18,850 --> 00:07:24,520
the aircraft and if the sound and the

00:07:22,060 --> 00:07:27,480
pictures are not stable and according to

00:07:24,520 --> 00:07:30,940
the expectations or your body you puke

00:07:27,480 --> 00:07:32,650
and within 15 to 20 minutes and someone

00:07:30,940 --> 00:07:35,530
has to clean up and that's a month

00:07:32,650 --> 00:07:36,670
sometime - so motorized programs and

00:07:35,530 --> 00:07:39,580
it's unpleasant

00:07:36,670 --> 00:07:41,470
so sometimes it's better to have less

00:07:39,580 --> 00:07:43,900
pictures per second but have them at a

00:07:41,470 --> 00:07:46,060
very very stable right or to have a very

00:07:43,900 --> 00:07:47,980
fluid audio because your your ears are

00:07:46,060 --> 00:07:52,330
not happy when it's not and your ears

00:07:47,980 --> 00:07:56,500
tend to play havoc in your equilibrium

00:07:52,330 --> 00:07:59,620
or stay with mine so the trick is to use

00:07:56,500 --> 00:08:01,780
the CPU for internal purposes though so

00:07:59,620 --> 00:08:04,330
so yeah exceptions have a bad reputation

00:08:01,780 --> 00:08:07,420
but they're not they're not that bad so

00:08:04,330 --> 00:08:09,880
I had this example that I put on string

00:08:07,420 --> 00:08:12,340
right way I think I don't fits big

00:08:09,880 --> 00:08:22,480
enough oh no you don't see because it's

00:08:12,340 --> 00:08:24,310
on the wrong screen so I I wrote the

00:08:22,480 --> 00:08:27,250
small thing just for fun because it

00:08:24,310 --> 00:08:28,390
there's this exception with a 9/10 it's

00:08:27,250 --> 00:08:30,280
called darn because it's a very

00:08:28,390 --> 00:08:33,100
significant name of course good naming

00:08:30,280 --> 00:08:36,430
and there's two functions there one

00:08:33,100 --> 00:08:38,500
that's called F that if it gets a number

00:08:36,430 --> 00:08:41,110
that's about you overturns a negative

00:08:38,500 --> 00:08:43,060
and otherwise complaints and there's the

00:08:41,110 --> 00:08:44,590
other one called G that if it gets a

00:08:43,060 --> 00:08:47,410
positive number returns a negative one

00:08:44,590 --> 00:08:48,670
like the other hand returns an empty

00:08:47,410 --> 00:08:50,830
optional should there be a problem

00:08:48,670 --> 00:08:51,230
to signal that something went wrong or

00:08:50,830 --> 00:08:53,860
whatever

00:08:51,230 --> 00:08:56,270
because yes it's not expecting that and

00:08:53,860 --> 00:09:00,830
the functions that generate nice data

00:08:56,270 --> 00:09:03,860
like all the negatives and positives and

00:09:00,830 --> 00:09:06,170
NASA data generate all negatives so best

00:09:03,860 --> 00:09:08,060
case for a case something like that and

00:09:06,170 --> 00:09:10,010
a test function that if you have not

00:09:08,060 --> 00:09:12,200
read it just measures the time it takes

00:09:10,010 --> 00:09:13,820
to run something and reports it in some

00:09:12,200 --> 00:09:18,020
measurement to it and you can then

00:09:13,820 --> 00:09:20,960
convert with hardness amazing tools and

00:09:18,020 --> 00:09:22,910
I run this thing million times or so and

00:09:20,960 --> 00:09:26,780
I count number of successes and failures

00:09:22,910 --> 00:09:28,820
in both cases and I have one that checks

00:09:26,780 --> 00:09:34,100
with exception there's something failed

00:09:28,820 --> 00:09:35,810
and the other one that checks with the

00:09:34,100 --> 00:09:38,300
optional if it failed so an if statement

00:09:35,810 --> 00:09:40,400
in an exception like that and they both

00:09:38,300 --> 00:09:42,260
treat both the good case and the bad

00:09:40,400 --> 00:09:45,440
case so one of them never fails my them

00:09:42,260 --> 00:09:46,580
fails all denied this so he seeks I

00:09:45,440 --> 00:09:51,400
shouldn't get a bad rep because people

00:09:46,580 --> 00:09:51,400
say well slow in his bag it's fat well

00:09:52,240 --> 00:09:57,440
in fact four different in best case it's

00:09:54,980 --> 00:09:59,660
not that bad at all in this one sweets a

00:09:57,440 --> 00:10:00,920
bold oh yeah depending on run sometimes

00:09:59,660 --> 00:10:03,530
we get it even faster in that shadow

00:10:00,920 --> 00:10:07,760
depends on the cases whatever in it on

00:10:03,530 --> 00:10:09,560
my computer the first time I there are

00:10:07,760 --> 00:10:11,330
numbers for a best case with exceptions

00:10:09,560 --> 00:10:14,000
then I get with the initial that's in

00:10:11,330 --> 00:10:16,250
that one and seven quite a few times but

00:10:14,000 --> 00:10:16,730
but the worst case is terrible don't you

00:10:16,250 --> 00:10:18,860
see that

00:10:16,730 --> 00:10:21,080
so exceptions are made for the

00:10:18,860 --> 00:10:22,940
exceptional case so when the exceptions

00:10:21,080 --> 00:10:24,410
occur all the time you're into a very

00:10:22,940 --> 00:10:28,850
bad situation you think the wrong way to

00:10:24,410 --> 00:10:32,480
look over but but if it never fails or

00:10:28,850 --> 00:10:34,340
so it's actually pretty good so if

00:10:32,480 --> 00:10:36,710
you're worried about throughput

00:10:34,340 --> 00:10:38,870
about speed you might wanna use

00:10:36,710 --> 00:10:40,340
exceptions in this case the worse I got

00:10:38,870 --> 00:10:43,280
when I ran the thing if you loose two

00:10:40,340 --> 00:10:47,150
times because they're good for you but

00:10:43,280 --> 00:10:48,770
if that time then if that time when you

00:10:47,150 --> 00:10:50,660
don't want it to happen it occurs and

00:10:48,770 --> 00:10:53,540
then you go invade your timings and

00:10:50,660 --> 00:10:55,460
something bad happens really not cool so

00:10:53,540 --> 00:11:00,590
the best choice for performance make the

00:10:55,460 --> 00:11:03,760
diva choice for you in that case yeah

00:11:00,590 --> 00:11:03,760
because they actually faster sometimes

00:11:05,589 --> 00:11:12,740
yeah so this is what I said what do you

00:11:09,680 --> 00:11:19,670
have 3x X let's say you have a container

00:11:12,740 --> 00:11:21,529
something like this this other one which

00:11:19,670 --> 00:11:24,709
is kind of similar testing time again

00:11:21,529 --> 00:11:26,690
I'm going to push backs and inserts at

00:11:24,709 --> 00:11:28,970
the beginning depending on the cases

00:11:26,690 --> 00:11:30,649
with a vector in the deck now everyone

00:11:28,970 --> 00:11:32,750
will say of course vector will lose the

00:11:30,649 --> 00:11:34,730
strikes because you're inserting at the

00:11:32,750 --> 00:11:36,050
beginning sometimes and victor is

00:11:34,730 --> 00:11:37,970
terrible for that that's that than for

00:11:36,050 --> 00:11:41,990
that of course whereas deck has me made

00:11:37,970 --> 00:11:43,579
precisely for this sort of thing no if

00:11:41,990 --> 00:11:45,620
you don't believe me if I try it the

00:11:43,579 --> 00:11:46,699
numbers are of them so if you read

00:11:45,620 --> 00:11:48,920
something like this of course you expect

00:11:46,699 --> 00:11:51,139
victor to fail because of the number of

00:11:48,920 --> 00:11:52,519
push france essentially and inserts at

00:11:51,139 --> 00:11:54,370
the beginning because the push backs the

00:11:52,519 --> 00:11:57,199
victor we've been all the time

00:11:54,370 --> 00:12:00,740
it's true numbers are both vectors if

00:11:57,199 --> 00:12:03,050
you look at it but even with the reserve

00:12:00,740 --> 00:12:04,069
issue is that it's moving stuff all the

00:12:03,050 --> 00:12:05,269
time if you're inserting at the

00:12:04,069 --> 00:12:16,730
beginning you get there both of the

00:12:05,269 --> 00:12:20,000
words still still still I took it with

00:12:16,730 --> 00:12:24,170
just push backs victors of course trash

00:12:20,000 --> 00:12:26,600
deck directly if I did that but then

00:12:24,170 --> 00:12:28,069
what do you think I mean if you pick if

00:12:26,600 --> 00:12:29,959
you think you're always going to insert

00:12:28,069 --> 00:12:32,060
at the end use vector if you're always

00:12:29,959 --> 00:12:34,579
inserting an evening use deck well if

00:12:32,060 --> 00:12:35,839
you're not sure and if and if it's bad

00:12:34,579 --> 00:12:37,519
for you if you take too much time now

00:12:35,839 --> 00:12:39,050
that becomes a bit more annoying because

00:12:37,519 --> 00:12:41,420
you're gonna get more stable

00:12:39,050 --> 00:12:44,360
performances I'll leave with deck that

00:12:41,420 --> 00:12:45,639
with vector if you always well either

00:12:44,360 --> 00:12:47,839
one or the other it's gonna work well

00:12:45,639 --> 00:12:48,380
but the vector at the end is gonna be

00:12:47,839 --> 00:12:50,300
awesome

00:12:48,380 --> 00:12:52,480
and beings are terrible so you gotta get

00:12:50,300 --> 00:12:54,319
a huge variation if you play with both

00:12:52,480 --> 00:12:57,410
your case you're okay

00:12:54,319 --> 00:13:05,029
so yeah so if you're concerned about the

00:12:57,410 --> 00:13:08,000
worst case case on average maker will

00:13:05,029 --> 00:13:09,319
treasure the one so that's nine Stern

00:13:08,000 --> 00:13:12,130
murder being a fascist whenever being

00:13:09,319 --> 00:13:14,890
fast enough or not being too slow just

00:13:12,130 --> 00:13:18,980
kind of the same thing

00:13:14,890 --> 00:13:22,670
so submitted this these are real cats

00:13:18,980 --> 00:13:25,940
that need no now some people say well

00:13:22,670 --> 00:13:28,190
synthetic benchmarks so it's good

00:13:25,940 --> 00:13:29,209
writing the sources are on the shirt the

00:13:28,190 --> 00:13:33,860
shirt right you want to look in them

00:13:29,209 --> 00:13:35,720
it's this is so let's this is ridiculous

00:13:33,860 --> 00:13:39,320
okay I know cars don't write themselves

00:13:35,720 --> 00:13:43,010
in straight lines Shh mind you I have

00:13:39,320 --> 00:13:45,050
kids and I've seen it at my car as marks

00:13:43,010 --> 00:13:46,970
below so there's this exception case of

00:13:45,050 --> 00:13:50,149
they're calling collision risk detective

00:13:46,970 --> 00:13:52,700
and there's this right thing that takes

00:13:50,149 --> 00:13:54,470
the direction and checks if there

00:13:52,700 --> 00:13:57,860
there's nothing along the way and if

00:13:54,470 --> 00:13:59,540
there's otherwise it just keeps on going

00:13:57,860 --> 00:14:01,550
a certain line that's not a self-driving

00:13:59,540 --> 00:14:03,890
car and now I know you won't irony for

00:14:01,550 --> 00:14:05,920
that that's okay but then a bit later

00:14:03,890 --> 00:14:08,360
there's this function Chris this nation

00:14:05,920 --> 00:14:12,110
compute the direction and then while I'm

00:14:08,360 --> 00:14:15,399
going there you know driving towards the

00:14:12,110 --> 00:14:18,079
destination and if something happens

00:14:15,399 --> 00:14:22,940
like this because you breathe when that

00:14:18,079 --> 00:14:25,190
happens so so way if you the driver

00:14:22,940 --> 00:14:28,910
well location risks that night passing

00:14:25,190 --> 00:14:31,699
do not going to crash then you're going

00:14:28,910 --> 00:14:35,449
to be here to be a properly same

00:14:31,699 --> 00:14:37,220
something but but but it if time of the

00:14:35,449 --> 00:14:38,660
is of the essence when you detect a risk

00:14:37,220 --> 00:14:41,029
of collision well this implementation is

00:14:38,660 --> 00:14:43,670
you could see earlier it's maybe because

00:14:41,029 --> 00:14:46,850
you might have a bit of a higher delay

00:14:43,670 --> 00:14:48,740
in reaction probably not that big in

00:14:46,850 --> 00:14:49,910
terms of speed at which a computer run

00:14:48,740 --> 00:14:51,829
which respects to be the speech at which

00:14:49,910 --> 00:14:54,019
a car run but it's just a picture first

00:14:51,829 --> 00:15:04,730
you know that in this case you might

00:14:54,019 --> 00:15:05,899
have worst case behavior good and

00:15:04,730 --> 00:15:07,070
sometimes what you want is something

00:15:05,899 --> 00:15:10,730
more constant you want a throughput

00:15:07,070 --> 00:15:13,100
that's table more than fast or slow so

00:15:10,730 --> 00:15:15,260
something that is almost thing now cases

00:15:13,100 --> 00:15:17,540
so I wrote this thing that you your arm

00:15:15,260 --> 00:15:19,040
you'll return the function cannot exit

00:15:17,540 --> 00:15:21,110
through a return but connects through an

00:15:19,040 --> 00:15:23,120
exception if something bad happens so

00:15:21,110 --> 00:15:26,120
let us loop there that they did have

00:15:23,120 --> 00:15:28,220
some kind tries to read from it it's

00:15:26,120 --> 00:15:30,170
looking out in this case and tries

00:15:28,220 --> 00:15:33,200
process that it does it comes in and in

00:15:30,170 --> 00:15:34,760
the extremely rare case let's say where

00:15:33,200 --> 00:15:38,240
something bad happens you cannot consume

00:15:34,760 --> 00:15:40,720
well you throw something like this which

00:15:38,240 --> 00:15:44,060
is the right weight with the thing here

00:15:40,720 --> 00:15:47,180
well you will be reacting very fast to

00:15:44,060 --> 00:15:48,860
the incoming of data if it comes in and

00:15:47,180 --> 00:15:49,300
you're ready doublet and you react right

00:15:48,860 --> 00:15:51,500
away

00:15:49,300 --> 00:15:52,760
and if it doesn't come well you're

00:15:51,500 --> 00:15:55,100
waiting and you're wasting your time

00:15:52,760 --> 00:15:57,110
you're not doing anything so it's a

00:15:55,100 --> 00:15:58,790
boost it's perfect you want to react

00:15:57,110 --> 00:16:00,770
right away when something happens but if

00:15:58,790 --> 00:16:03,260
you want something that is stable and

00:16:00,770 --> 00:16:05,870
you want to pursue summary tasks while

00:16:03,260 --> 00:16:07,610
you're wasteful what you do over the

00:16:05,870 --> 00:16:09,800
sense that you could be using time for

00:16:07,610 --> 00:16:11,480
something else but yeah you're reacting

00:16:09,800 --> 00:16:15,410
you immediately something happens so

00:16:11,480 --> 00:16:20,270
it's efficient anyway but you can be

00:16:15,410 --> 00:16:22,100
blocked for a long time yeah so if

00:16:20,270 --> 00:16:24,890
you're you're alright or the constant

00:16:22,100 --> 00:16:26,840
rate this could be pretty cool but

00:16:24,890 --> 00:16:30,230
otherwise it might be nasty so if you

00:16:26,840 --> 00:16:33,620
rewrite the thing this way just and if

00:16:30,230 --> 00:16:36,110
you get something blocking you process

00:16:33,620 --> 00:16:38,030
some data or an otherwise you throw

00:16:36,110 --> 00:16:40,190
something well and again it's the same

00:16:38,030 --> 00:16:43,880
loop as before I mean you're expecting

00:16:40,190 --> 00:16:46,010
to fail in very extreme cases you can

00:16:43,880 --> 00:16:48,050
see that you're not processing unit at

00:16:46,010 --> 00:16:50,120
the stable rate in this case if the idea

00:16:48,050 --> 00:16:52,280
was blocking so if you want to do

00:16:50,120 --> 00:16:53,990
something like this trying to read and

00:16:52,280 --> 00:16:55,460
then perform so accessory tasks well

00:16:53,990 --> 00:16:57,920
they wouldn't be performed at this table

00:16:55,460 --> 00:16:59,450
right it will be performed whenever you

00:16:57,920 --> 00:17:00,680
got something and if you think I'm then

00:16:59,450 --> 00:17:03,380
you're gonna wait for a long time in

00:17:00,680 --> 00:17:05,690
these tasks it will wait might not be

00:17:03,380 --> 00:17:08,150
that depends on what you're doing so

00:17:05,690 --> 00:17:09,380
yeah we don't we can't predict the rate

00:17:08,150 --> 00:17:14,870
at which will be built to the thing in

00:17:09,380 --> 00:17:17,120
this case yeah which is annoying it

00:17:14,870 --> 00:17:19,220
might never be caught so if you need to

00:17:17,120 --> 00:17:21,620
do them nothing comes in with God like

00:17:19,220 --> 00:17:23,510
this here you got a stack which is not

00:17:21,620 --> 00:17:25,060
cool now if you write it this way with

00:17:23,510 --> 00:17:27,890
something that does none the King I Oh

00:17:25,060 --> 00:17:29,930
try comes to consumer sorts it would

00:17:27,890 --> 00:17:33,110
let's say we turn up channel data of

00:17:29,930 --> 00:17:34,730
some kind well you can measure it if you

00:17:33,110 --> 00:17:37,820
don't get anything you're selective and

00:17:34,730 --> 00:17:39,440
doing something and presuming that you

00:17:37,820 --> 00:17:41,420
try consume takes a stable amount of

00:17:39,440 --> 00:17:41,970
time you can have pretty cool behavior

00:17:41,420 --> 00:17:44,789
but

00:17:41,970 --> 00:17:46,200
you're going to be using city power so

00:17:44,789 --> 00:17:50,370
useful if you're doing something useful

00:17:46,200 --> 00:17:52,889
course attractive you're always doing

00:17:50,370 --> 00:17:55,559
these three tasks at we can presume a

00:17:52,889 --> 00:17:57,059
stable rate if everything goes fine

00:17:55,559 --> 00:17:58,649
and if something really really bad

00:17:57,059 --> 00:18:01,139
happens you roll yourself throwing and

00:17:58,649 --> 00:18:04,440
leaving but in the meantime no directive

00:18:01,139 --> 00:18:06,779
so should this be watching to do you can

00:18:04,440 --> 00:18:09,870
do it that's maybe not the reflexes

00:18:06,779 --> 00:18:11,159
everyone with that now so you can be

00:18:09,870 --> 00:18:14,909
sure this will be done all the time

00:18:11,159 --> 00:18:17,279
and if there's a bound on the time it

00:18:14,909 --> 00:18:20,009
requires to perform process data what

00:18:17,279 --> 00:18:21,809
care for some guarantees because you

00:18:20,009 --> 00:18:25,919
control the call this is pretty much at

00:18:21,809 --> 00:18:29,909
least this this Wilson occurs also with

00:18:25,919 --> 00:18:32,070
even written code and and polling home I

00:18:29,909 --> 00:18:33,480
think she may be these days and and the

00:18:32,070 --> 00:18:36,929
number of people I've worked with less

00:18:33,480 --> 00:18:39,720
ten years forever are very much even

00:18:36,929 --> 00:18:44,759
written people and say this is good this

00:18:39,720 --> 00:18:47,039
fares bandwidth this is optimal well yes

00:18:44,759 --> 00:18:49,019
it is it means that you're not doing

00:18:47,039 --> 00:18:50,879
anything if you don't need to it also

00:18:49,019 --> 00:18:52,740
means we have no control over the rate

00:18:50,879 --> 00:18:55,200
at which you're doing things and that if

00:18:52,740 --> 00:18:58,950
needles come in as bursts organized

00:18:55,200 --> 00:18:59,750
Peaks fellows these knows we should be

00:18:58,950 --> 00:19:02,159
okay

00:18:59,750 --> 00:19:05,190
if that's not what you want well it's a

00:19:02,159 --> 00:19:07,529
bad model or you can't pilot things into

00:19:05,190 --> 00:19:09,990
something a bit but anyway so I wrote

00:19:07,529 --> 00:19:11,610
this thing there that you might see up

00:19:09,990 --> 00:19:13,529
there above there's something called

00:19:11,610 --> 00:19:15,899
next either that returns a nutshell it

00:19:13,529 --> 00:19:18,960
might be empty maybe there's nothing and

00:19:15,899 --> 00:19:21,450
there's a location where we register

00:19:18,960 --> 00:19:23,639
functions that react to events that took

00:19:21,450 --> 00:19:25,049
off thing up there there's a new text

00:19:23,639 --> 00:19:27,929
because it's a requirements

00:19:25,049 --> 00:19:29,700
synchronized cue and there's something

00:19:27,929 --> 00:19:32,090
to subscribe add something to react to

00:19:29,700 --> 00:19:34,830
the events so think I'll call that which

00:19:32,090 --> 00:19:36,149
reacts and and just goes through the

00:19:34,830 --> 00:19:38,700
loop hey hey

00:19:36,149 --> 00:19:41,129
black students and there's a execute

00:19:38,700 --> 00:19:43,889
thing that waits for event and if

00:19:41,129 --> 00:19:45,960
there's something to do cause back so

00:19:43,889 --> 00:19:48,629
it's active it's things like that and

00:19:45,960 --> 00:19:50,730
when something is good there's a person

00:19:48,629 --> 00:19:52,820
everyone reacts to me if you get many

00:19:50,730 --> 00:19:58,179
events in a short period of time you can

00:19:52,820 --> 00:20:01,759
active otherwise well just idle and then

00:19:58,179 --> 00:20:04,370
can do it this way but so so at this

00:20:01,759 --> 00:20:06,559
shared pointer there okay that's a

00:20:04,370 --> 00:20:08,509
shared history and I can subscribe if

00:20:06,559 --> 00:20:10,669
you events that the functional and

00:20:08,509 --> 00:20:13,580
lastly there are star thread and thread

00:20:10,669 --> 00:20:16,490
runs and if I do go area treatments go

00:20:13,580 --> 00:20:19,070
forth and multiply or something

00:20:16,490 --> 00:20:23,840
so citation because yo you get something

00:20:19,070 --> 00:20:25,879
you react all right you pull you're only

00:20:23,840 --> 00:20:26,929
going back if something useful as happen

00:20:25,879 --> 00:20:28,190
otherwise you're not going back the

00:20:26,929 --> 00:20:29,690
function so if you're going through the

00:20:28,190 --> 00:20:31,820
network they were called Maxwell you're

00:20:29,690 --> 00:20:36,679
not wasting with network resources you

00:20:31,820 --> 00:20:39,049
have to thing to do and then there's

00:20:36,679 --> 00:20:41,000
moments where nothing happens and it's

00:20:39,049 --> 00:20:42,860
moments where you work a lot so as long

00:20:41,000 --> 00:20:43,909
as you not have anything planned for

00:20:42,860 --> 00:20:46,460
those moments because you're going to be

00:20:43,909 --> 00:20:48,139
swamped with work you're okay but if

00:20:46,460 --> 00:20:51,700
you're looking for Lou every division

00:20:48,139 --> 00:20:54,080
this is not doing what you want really

00:20:51,700 --> 00:20:55,370
because when you were doing a lot of

00:20:54,080 --> 00:20:56,269
work while you're good responsive and

00:20:55,370 --> 00:20:59,690
maybe there's something else you should

00:20:56,269 --> 00:21:03,889
be doing at the same time in time that

00:20:59,690 --> 00:21:06,110
case so if you're playing with polling

00:21:03,889 --> 00:21:08,049
polling scene as that because you're

00:21:06,110 --> 00:21:11,169
always checking for things all the time

00:21:08,049 --> 00:21:14,450
maybe for nothing but gives you control

00:21:11,169 --> 00:21:15,769
usually control over the rate so if this

00:21:14,450 --> 00:21:19,490
is what you want of course because of

00:21:15,769 --> 00:21:24,289
the same do reporting actually there are

00:21:19,490 --> 00:21:26,539
reasons sometimes to do it so it's easy

00:21:24,289 --> 00:21:27,950
to confuse like Jerry better I will

00:21:26,539 --> 00:21:30,649
better never do it

00:21:27,950 --> 00:21:33,950
and in confusing these things maybe the

00:21:30,649 --> 00:21:35,990
interest so seen otherwise there is this

00:21:33,950 --> 00:21:38,149
thing there to call Viktor functions

00:21:35,990 --> 00:21:39,350
that will call back again a function

00:21:38,149 --> 00:21:41,690
that reacts you need enter lambda

00:21:39,350 --> 00:21:44,299
whatever so some storage that takes the

00:21:41,690 --> 00:21:47,600
functions and then I used a deck in this

00:21:44,299 --> 00:21:54,529
case and a position in the deck so I'm

00:21:47,600 --> 00:21:56,120
entering through it and again and if

00:21:54,529 --> 00:21:58,100
there's an event is being pushed to the

00:21:56,120 --> 00:22:01,760
things in the list of things to process

00:21:58,100 --> 00:22:03,230
and later on there's a face where well

00:22:01,760 --> 00:22:06,110
where there's still time to something

00:22:03,230 --> 00:22:08,179
and there's something to do well we call

00:22:06,110 --> 00:22:10,270
where the perfection we're up to and

00:22:08,179 --> 00:22:13,280
otherwise and then we when you've

00:22:10,270 --> 00:22:15,260
treated everything with treat well pop

00:22:13,280 --> 00:22:17,390
up the thing and we were start over

00:22:15,260 --> 00:22:19,520
again with the next one so we had

00:22:17,390 --> 00:22:21,200
control over the number of functions

00:22:19,520 --> 00:22:22,010
we're calling in a given time and if

00:22:21,200 --> 00:22:24,890
there's no time left

00:22:22,010 --> 00:22:27,220
good stuff and come again and pursue

00:22:24,890 --> 00:22:30,290
every were before that we get control

00:22:27,220 --> 00:22:31,940
more complex I agree I know that

00:22:30,290 --> 00:22:32,780
blocking for a cycle I can doing on

00:22:31,940 --> 00:22:35,030
there is a bad idea

00:22:32,780 --> 00:22:38,570
I know it's bad form but gives you

00:22:35,030 --> 00:22:41,240
control you can almost you can also

00:22:38,570 --> 00:22:43,450
switch the things like I did in this

00:22:41,240 --> 00:22:46,100
slide and say well I'm gonna first

00:22:43,450 --> 00:22:47,720
ensure that I can do things and if

00:22:46,100 --> 00:22:49,580
there's still time left after that I'm

00:22:47,720 --> 00:22:51,260
going to consume from the network tasks

00:22:49,580 --> 00:22:54,380
to do in and I'm gonna come back yell so

00:22:51,260 --> 00:22:56,480
the moment my cycle when I start to

00:22:54,380 --> 00:22:58,910
processing will always be the same

00:22:56,480 --> 00:23:01,970
essentially instead of being at the

00:22:58,910 --> 00:23:03,830
domestic place in the cycle depending on

00:23:01,970 --> 00:23:04,970
how much for the thing I did before so

00:23:03,830 --> 00:23:06,590
depending on what should you make more

00:23:04,970 --> 00:23:09,350
stable there if you try to display

00:23:06,590 --> 00:23:11,360
pictures on screen say burger is this

00:23:09,350 --> 00:23:13,910
the moment in the cycle instead of at a

00:23:11,360 --> 00:23:18,230
variable random cycle is going to feel

00:23:13,910 --> 00:23:20,120
better to your eyes it's your heart you

00:23:18,230 --> 00:23:24,710
can even do it with two threads if you

00:23:20,120 --> 00:23:27,620
want so there's one there that's

00:23:24,710 --> 00:23:30,350
consuming and I think we need let's hope

00:23:27,620 --> 00:23:32,059
to Christ users everyone is processing

00:23:30,350 --> 00:23:34,190
the thing well forever well there's

00:23:32,059 --> 00:23:36,230
still time to do things if there's

00:23:34,190 --> 00:23:37,940
something to do I do it then I move the

00:23:36,230 --> 00:23:39,620
next one and when I process everyone

00:23:37,940 --> 00:23:40,820
well I think it is one I continued as

00:23:39,620 --> 00:23:43,669
long as I have time for simple things

00:23:40,820 --> 00:23:49,940
and then I stop this thing is perfect

00:23:43,669 --> 00:23:51,650
seems possible so polygons tend to be

00:23:49,940 --> 00:23:53,780
less efficient of course it consumes

00:23:51,650 --> 00:23:55,940
cycles that you don't really need to

00:23:53,780 --> 00:23:58,280
consume sometimes but you control your

00:23:55,940 --> 00:23:59,660
rate so it's not something that you

00:23:58,280 --> 00:24:02,179
should throw away just something it you

00:23:59,660 --> 00:24:03,860
might not consider in general but I

00:24:02,179 --> 00:24:06,530
think you should never consider ever

00:24:03,860 --> 00:24:08,510
something different bursts in processing

00:24:06,530 --> 00:24:11,809
sometimes it was done because what you

00:24:08,510 --> 00:24:14,410
do the you know are things that have to

00:24:11,809 --> 00:24:16,460
be stable like a pacemaker

00:24:14,410 --> 00:24:18,679
preferable that works at a stable right

00:24:16,460 --> 00:24:19,970
I'm already used to things that name

00:24:18,679 --> 00:24:22,850
with audio and

00:24:19,970 --> 00:24:26,450
and video but there are things that

00:24:22,850 --> 00:24:27,470
actually keeps you alive sometimes so we

00:24:26,450 --> 00:24:29,390
have tools and signals supposed to help

00:24:27,470 --> 00:24:31,100
you to do things like that and this this

00:24:29,390 --> 00:24:32,630
one is called hello she was very very

00:24:31,100 --> 00:24:33,050
sweet but I haven't touched her in three

00:24:32,630 --> 00:24:35,390
years

00:24:33,050 --> 00:24:36,680
she doesn't like humans but she's the

00:24:35,390 --> 00:24:39,200
mother of many of the kids that we have

00:24:36,680 --> 00:24:44,420
at some point we're gonna be able to cut

00:24:39,200 --> 00:24:46,670
nails and so the first rule first I was

00:24:44,420 --> 00:24:48,530
talking with Andrew Pardo or your this

00:24:46,670 --> 00:24:50,060
year are things that back that you

00:24:48,530 --> 00:24:51,290
shouldn't show the people because

00:24:50,060 --> 00:24:53,990
they're bad they're trying to tell the

00:24:51,290 --> 00:24:55,880
compiler out to do the job no battery

00:24:53,990 --> 00:24:57,950
does a very good job the compiler

00:24:55,880 --> 00:25:00,920
writers are very good there are some

00:24:57,950 --> 00:25:02,930
people well let them do their job but in

00:25:00,920 --> 00:25:04,070
some cases we want to be more precise as

00:25:02,930 --> 00:25:05,300
to what you want something different

00:25:04,070 --> 00:25:07,970
because the assumption that they make

00:25:05,300 --> 00:25:09,650
that could be the same is that human so

00:25:07,970 --> 00:25:12,350
so so atomization is something that's

00:25:09,650 --> 00:25:14,450
complex nice nice for something he

00:25:12,350 --> 00:25:16,250
measures that word would tell you Jaffna

00:25:14,450 --> 00:25:18,050
sure you're wasting your time literally

00:25:16,250 --> 00:25:21,170
and sometimes you want to optimize for

00:25:18,050 --> 00:25:24,350
none of these reasons like the average

00:25:21,170 --> 00:25:26,300
case is the one that's critical

00:25:24,350 --> 00:25:28,430
sometimes that's what happens and

00:25:26,300 --> 00:25:30,470
sometimes well it's the average case

00:25:28,430 --> 00:25:34,730
that you want to keep within a small

00:25:30,470 --> 00:25:36,050
range so think this we have some people

00:25:34,730 --> 00:25:38,210
do like to programming and things like

00:25:36,050 --> 00:25:41,090
that you can use at onyx give you a lot

00:25:38,210 --> 00:25:42,440
of control but it's dangerous if you're

00:25:41,090 --> 00:25:45,230
doing definitely not what you're doing a

00:25:42,440 --> 00:25:47,750
number of functions of the Tri style I

00:25:45,230 --> 00:25:49,640
was musing a try yet or short try

00:25:47,750 --> 00:25:51,500
consumer or whatever there's frylock and

00:25:49,640 --> 00:25:54,710
in the Texas that lets you do non

00:25:51,500 --> 00:25:56,810
blocking tentative of getting a new text

00:25:54,710 --> 00:25:57,950
and working with it you know that when

00:25:56,810 --> 00:25:59,390
you're doing that so you can control the

00:25:57,950 --> 00:26:02,000
rate the throughput of what you're doing

00:25:59,390 --> 00:26:04,280
those that I know would you use that all

00:26:02,000 --> 00:26:06,530
the time it keeps their Harvard you feel

00:26:04,280 --> 00:26:09,230
alive and their jobs active

00:26:06,530 --> 00:26:10,520
otherwise it would be losing them we

00:26:09,230 --> 00:26:12,080
have products on unique letter

00:26:10,520 --> 00:26:13,370
electronics on things such as unique

00:26:12,080 --> 00:26:14,630
luck we have trial look for for the

00:26:13,370 --> 00:26:16,550
Cottontail yeah a lot control we see

00:26:14,630 --> 00:26:18,740
that stuff for that things like scope

00:26:16,550 --> 00:26:20,480
lock lock lock guard they don't give you

00:26:18,740 --> 00:26:22,190
that kind of control to you just block

00:26:20,480 --> 00:26:24,470
antenna get things so you have to look

00:26:22,190 --> 00:26:26,990
at the right tools there's an example

00:26:24,470 --> 00:26:29,060
there it's very very simple where

00:26:26,990 --> 00:26:30,920
there's a vector of data and some kind

00:26:29,060 --> 00:26:33,330
of big deck a bit up there and there is

00:26:30,920 --> 00:26:37,340
a loop that tries to receive data is it

00:26:33,330 --> 00:26:39,360
in the local buffer that's V so these a

00:26:37,340 --> 00:26:40,740
temporary storage let's say for

00:26:39,360 --> 00:26:45,660
something it will at some point be moved

00:26:40,740 --> 00:26:47,340
to the deck up there it tries to lock

00:26:45,660 --> 00:26:49,200
the meeting but if it doesn't it keeps

00:26:47,340 --> 00:26:50,310
on piling the local variable because

00:26:49,200 --> 00:26:53,010
somebody else might be trying to use the

00:26:50,310 --> 00:26:55,470
data up there and at some point that's

00:26:53,010 --> 00:26:57,480
very well manages to get the lock

00:26:55,470 --> 00:27:00,090
well tries to move whatever data was

00:26:57,480 --> 00:27:03,540
acquired along the way to the deck and

00:27:00,090 --> 00:27:05,730
didn't then clear you like that it

00:27:03,540 --> 00:27:08,040
doesn't have to block until the deck is

00:27:05,730 --> 00:27:15,510
free just try try try it at some point

00:27:08,040 --> 00:27:16,500
when nobody else is bothering so if we

00:27:15,510 --> 00:27:18,150
did just luck

00:27:16,500 --> 00:27:21,990
we have that kind of control over what

00:27:18,150 --> 00:27:23,490
we're doing the thing that don't block I

00:27:21,990 --> 00:27:25,350
know that some people are advocating

00:27:23,490 --> 00:27:26,790
neighbor block for good reasons while

00:27:25,350 --> 00:27:28,500
we're at the point we'll have the done

00:27:26,790 --> 00:27:30,630
in futures which would be pretty nice be

00:27:28,500 --> 00:27:31,770
able to chain things and that's not

00:27:30,630 --> 00:27:33,720
really what we're talking about but

00:27:31,770 --> 00:27:36,420
still we have a number of time weight

00:27:33,720 --> 00:27:39,090
functions in language wait for we don't

00:27:36,420 --> 00:27:41,460
ill so you can control how much time

00:27:39,090 --> 00:27:42,780
you're willing to wait before it becomes

00:27:41,460 --> 00:27:44,790
a problem and then good on doing

00:27:42,780 --> 00:27:47,460
something else you can even just poke do

00:27:44,790 --> 00:27:49,260
myself why not this is my example there

00:27:47,460 --> 00:27:53,220
where you're trying to lock something

00:27:49,260 --> 00:27:56,790
for a little while trying to to wait for

00:27:53,220 --> 00:27:57,870
two trying to to wait for an event if it

00:27:56,790 --> 00:28:01,380
doesn't come when you're doing something

00:27:57,870 --> 00:28:03,990
else and at some point you go back to

00:28:01,380 --> 00:28:06,840
your main task and you again trying then

00:28:03,990 --> 00:28:07,980
you stop waiver and someday someone will

00:28:06,840 --> 00:28:09,480
signal the event and then you do

00:28:07,980 --> 00:28:13,470
something but you're not good

00:28:09,480 --> 00:28:14,520
I used optional for a few examples

00:28:13,470 --> 00:28:16,590
that's pretty nice

00:28:14,520 --> 00:28:18,270
so sometimes instead of having an

00:28:16,590 --> 00:28:20,640
exception which is very good in general

00:28:18,270 --> 00:28:23,190
but sometimes very bad because something

00:28:20,640 --> 00:28:26,310
is stable and when it costs you is if

00:28:23,190 --> 00:28:28,160
statements being a sudden reporters work

00:28:26,310 --> 00:28:31,980
too but information and becomes painful

00:28:28,160 --> 00:28:34,050
school there's one there a very very

00:28:31,980 --> 00:28:36,720
cheap concurrent cube this is

00:28:34,050 --> 00:28:39,990
thank you example with a deck inside new

00:28:36,720 --> 00:28:41,460
tax and someone tries to add well if it

00:28:39,990 --> 00:28:43,800
works to get a truth it doesn't work we

00:28:41,460 --> 00:28:45,600
give the false okay and there there's a

00:28:43,800 --> 00:28:46,690
trial lock in there that tries to get

00:28:45,600 --> 00:28:49,900
their attacks insured it

00:28:46,690 --> 00:28:52,120
George makes it adopt by Ella Garden

00:28:49,900 --> 00:28:54,040
sign with the new syntax it's very nice

00:28:52,120 --> 00:28:56,500
to see dat and then it plays like a

00:28:54,040 --> 00:28:58,120
 true so this thing kind of works

00:28:56,500 --> 00:29:00,160
it doesn't worry it doesn't block if you

00:28:58,120 --> 00:29:02,470
do not manage to insert the thing you

00:29:00,160 --> 00:29:06,970
can just remember that you have to do it

00:29:02,470 --> 00:29:09,910
some later time it's not luck you

00:29:06,970 --> 00:29:12,760
control your time this what is the

00:29:09,910 --> 00:29:15,280
reception safe it's a version of extract

00:29:12,760 --> 00:29:17,800
try extract that is you see why it's an

00:29:15,280 --> 00:29:20,080
exception safe I wouldn't use this one

00:29:17,800 --> 00:29:23,100
because you might be losing some real

00:29:20,080 --> 00:29:26,770
information like credit card data mining

00:29:23,100 --> 00:29:34,090
children do you see myself kitchen say

00:29:26,770 --> 00:29:36,100
this one it's a thing of evil isn't yeah

00:29:34,090 --> 00:29:40,030
no no because there's a lot guard so it

00:29:36,100 --> 00:29:41,740
will be what's the problem if there's a

00:29:40,030 --> 00:29:45,910
guard ski it's gonna get killed at some

00:29:41,740 --> 00:29:48,840
point what's the problem it's a well

00:29:45,910 --> 00:29:53,100
known problem sorry

00:29:48,840 --> 00:29:55,780
yeah if you've ever throw along the way

00:29:53,100 --> 00:29:58,690
if you have a throw when you're

00:29:55,780 --> 00:30:01,570
returning the outside world will never

00:29:58,690 --> 00:30:03,760
still to return in this case so this

00:30:01,570 --> 00:30:05,980
value out should all will not throw well

00:30:03,760 --> 00:30:08,350
yeah he has kept it inside Mike so

00:30:05,980 --> 00:30:10,090
depending on what you're doing this

00:30:08,350 --> 00:30:13,000
would be nice in this situation you pass

00:30:10,090 --> 00:30:15,040
it inside you try to write to this one

00:30:13,000 --> 00:30:17,050
and if the right has worked the rest of

00:30:15,040 --> 00:30:19,060
the code that follows will not throw any

00:30:17,050 --> 00:30:20,500
exceptions and if they say but I always

00:30:19,060 --> 00:30:22,480
write this kind of code see you can do

00:30:20,500 --> 00:30:25,180
this without locking in your steam in a

00:30:22,480 --> 00:30:26,680
leak or something it works so it's a bit

00:30:25,180 --> 00:30:29,950
more complex maybe was so yeah of course

00:30:26,680 --> 00:30:31,390
if you had nothing to do it was not if

00:30:29,950 --> 00:30:36,790
you have things to do which we need the

00:30:31,390 --> 00:30:39,250
time thin stability that they're little

00:30:36,790 --> 00:30:40,930
things these two I saw the author of

00:30:39,250 --> 00:30:43,410
these in the room earlier today you know

00:30:40,930 --> 00:30:46,150
it's either here night right now click

00:30:43,410 --> 00:30:47,980
these are the one that made the mr.

00:30:46,150 --> 00:30:50,950
Pardo react when I was talking to him he

00:30:47,980 --> 00:30:53,500
says this is like register all over

00:30:50,950 --> 00:30:56,110
again know that register keyword

00:30:53,500 --> 00:30:58,210
everyone loves I heard that this morning

00:30:56,110 --> 00:31:01,320
again at the keynote I never adjusters

00:30:58,210 --> 00:31:01,320
in the interface yeah right

00:31:02,000 --> 00:31:06,240
of course better knows better

00:31:04,440 --> 00:31:07,830
people say well you're telling the

00:31:06,240 --> 00:31:09,990
compiler which branch of your if

00:31:07,830 --> 00:31:11,640
statements are going to be taken the

00:31:09,990 --> 00:31:14,060
compiler knows best of course the

00:31:11,640 --> 00:31:16,710
compiler knows best I know that that's

00:31:14,060 --> 00:31:19,230
the point is sometimes the compiler

00:31:16,710 --> 00:31:20,700
knows what's the best case and what's

00:31:19,230 --> 00:31:22,020
the average case and what will get you

00:31:20,700 --> 00:31:25,350
better results but that's not what you

00:31:22,020 --> 00:31:27,540
want sometimes you want the path which

00:31:25,350 --> 00:31:31,320
you'll never take to be optimized

00:31:27,540 --> 00:31:34,020
because when you go there is really very

00:31:31,320 --> 00:31:35,370
fast it's more for that kind of stuff

00:31:34,020 --> 00:31:36,720
you know if you're trying to make sure

00:31:35,370 --> 00:31:39,420
that the thing that will not be

00:31:36,720 --> 00:31:40,710
optimized for good reasons is Septimus

00:31:39,420 --> 00:31:42,360
for because you're willing to think the

00:31:40,710 --> 00:31:45,060
performance it because you have reasons

00:31:42,360 --> 00:31:46,410
for that then it's interesting it's not

00:31:45,060 --> 00:31:48,930
lying to compare of course use them

00:31:46,410 --> 00:31:50,760
nicely if you use them for something

00:31:48,930 --> 00:31:54,180
some sensor just they generate the

00:31:50,760 --> 00:31:55,890
performance if she said well I know that

00:31:54,180 --> 00:31:58,910
the if it's more likely but optimized

00:31:55,890 --> 00:32:02,610
for the else I have my reasons

00:31:58,910 --> 00:32:04,080
so please please don't try to guess the

00:32:02,610 --> 00:32:05,400
compiler this feature is interesting in

00:32:04,080 --> 00:32:07,350
the sense that if you look at a standard

00:32:05,400 --> 00:32:09,450
text it's I think one of the rare ones

00:32:07,350 --> 00:32:11,280
it's not the only one where the warning

00:32:09,450 --> 00:32:13,010
sign saying don't use this is bigger

00:32:11,280 --> 00:32:16,200
than actual description of the future

00:32:13,010 --> 00:32:17,100
and I see couple people moving their

00:32:16,200 --> 00:32:19,320
heads right there

00:32:17,100 --> 00:32:23,100
but yeah don't use it but there are

00:32:19,320 --> 00:32:25,350
reasons for that so it's one gift

00:32:23,100 --> 00:32:27,030
management are unintuitive when only you

00:32:25,350 --> 00:32:28,530
know things that escape from the source

00:32:27,030 --> 00:32:32,240
code is that written in the code but you

00:32:28,530 --> 00:32:37,730
have outside knowledge about things yeah

00:32:32,240 --> 00:32:50,880
we should see that very little yeah

00:32:37,730 --> 00:32:52,950
please yeah yeah see if you try to

00:32:50,880 --> 00:32:55,320
outguess the compiler as Justin was

00:32:52,950 --> 00:32:56,340
saying you're probably losing but I what

00:32:55,320 --> 00:33:00,570
I have in mind here is the case where

00:32:56,340 --> 00:33:03,630
the you know it's bad but still that's

00:33:00,570 --> 00:33:05,040
what you as he's saying assumptions like

00:33:03,630 --> 00:33:06,330
that since they make your coat go slower

00:33:05,040 --> 00:33:08,790
you should check them out from time to

00:33:06,330 --> 00:33:11,430
time because yeah still isn't very good

00:33:08,790 --> 00:33:13,320
so I'm not trying to say people use that

00:33:11,430 --> 00:33:16,540
all the time

00:33:13,320 --> 00:33:18,190
but they are different and probably

00:33:16,540 --> 00:33:20,530
different reason people expect what we

00:33:18,190 --> 00:33:22,540
don't want me I kept myself in there

00:33:20,530 --> 00:33:26,070
it's people saying I'm gonna put this

00:33:22,540 --> 00:33:29,500
everywhere because I'm such a hotshot

00:33:26,070 --> 00:33:31,840
yawns your job so this is a ridiculous

00:33:29,500 --> 00:33:35,110
example where someone's saying well I'm

00:33:31,840 --> 00:33:37,510
using an exception throwing API to my

00:33:35,110 --> 00:33:39,160
car there's a problem and and for some

00:33:37,510 --> 00:33:41,679
weird reason here's the three at the

00:33:39,160 --> 00:33:43,840
best API in this case I know that the

00:33:41,679 --> 00:33:45,370
cache is a bad idea but please optimize

00:33:43,840 --> 00:33:47,290
the catch because I know I've got to get

00:33:45,370 --> 00:33:49,059
into trouble if I go there I'm not fast

00:33:47,290 --> 00:33:51,640
enough this of course you won't be at

00:33:49,059 --> 00:33:53,860
yourself in a car it's an example if

00:33:51,640 --> 00:33:56,080
you're having an exceptional case like

00:33:53,860 --> 00:33:58,000
this mystic move better but it's a

00:33:56,080 --> 00:34:00,100
really great guy you're stuck with it so

00:33:58,000 --> 00:34:02,890
this this would make your performance go

00:34:00,100 --> 00:34:04,450
down it's a very very bad idea but

00:34:02,890 --> 00:34:08,379
should you find yourself in such a

00:34:04,450 --> 00:34:10,510
situation that's a toll free I hope

00:34:08,379 --> 00:34:12,960
nobody move I mean I did this and it

00:34:10,510 --> 00:34:15,280
made your program so work because I know

00:34:12,960 --> 00:34:16,270
okay so so the by definition you

00:34:15,280 --> 00:34:22,690
shouldn't get there in the first place

00:34:16,270 --> 00:34:25,090
but you know when that happens yeah IIIi

00:34:22,690 --> 00:34:27,760
feel like Bloods falling out of my arm

00:34:25,090 --> 00:34:30,310
showing things like that there's a

00:34:27,760 --> 00:34:32,470
Sudeep this is my cap there are so the

00:34:30,310 --> 00:34:34,300
case where you you have too much time to

00:34:32,470 --> 00:34:37,090
watch aberration time to do pretty much

00:34:34,300 --> 00:34:40,570
that you have there's a competition that

00:34:37,090 --> 00:34:43,540
my students try to do sometimes of AI

00:34:40,570 --> 00:34:46,419
for a well-known game where they are

00:34:43,540 --> 00:34:49,240
trying to write a planner for the game

00:34:46,419 --> 00:34:50,919
to throw enemies at one another but they

00:34:49,240 --> 00:34:53,080
have a short amount of time to do so and

00:34:50,919 --> 00:34:54,460
then they get kicked out and they're

00:34:53,080 --> 00:34:56,440
wondering since they have too much

00:34:54,460 --> 00:34:58,930
computation to do in the time that they

00:34:56,440 --> 00:35:01,859
have I can manage so to make decisions

00:34:58,930 --> 00:35:05,200
instead of just watching rolling dice

00:35:01,859 --> 00:35:07,630
that's a typical case so one thing that

00:35:05,200 --> 00:35:09,040
I gave them write small functions then I

00:35:07,630 --> 00:35:12,550
don't catch it like serious mouse

00:35:09,040 --> 00:35:14,080
functions well novel idea because some

00:35:12,550 --> 00:35:15,340
people feel bad about short functions

00:35:14,080 --> 00:35:17,740
they don't get the impression that's

00:35:15,340 --> 00:35:18,220
they're not doing anything because it's

00:35:17,740 --> 00:35:20,560
so small

00:35:18,220 --> 00:35:24,520
please we're in two lines right another

00:35:20,560 --> 00:35:25,780
one things but what you can do is divide

00:35:24,520 --> 00:35:28,210
your competition first

00:35:25,780 --> 00:35:30,280
of course and do the steps at some point

00:35:28,210 --> 00:35:32,650
stuff and we start when you stopped this

00:35:30,280 --> 00:35:35,590
is old school don't do that on modern

00:35:32,650 --> 00:35:37,450
computers okay no well it used to work

00:35:35,590 --> 00:35:39,640
yeah I've done that in the past that way

00:35:37,450 --> 00:35:41,500
in the past in the net next one years if

00:35:39,640 --> 00:35:44,890
as examples there's this function there

00:35:41,500 --> 00:35:47,290
with a static variable yeah the thread

00:35:44,890 --> 00:35:49,270
safe and everything that remembers where

00:35:47,290 --> 00:35:50,980
the code stopped last time so it starts

00:35:49,270 --> 00:35:53,890
at some point the first time and then

00:35:50,980 --> 00:35:55,900
when you call it it remembers that place

00:35:53,890 --> 00:35:58,750
it wins so there's no breaks between the

00:35:55,900 --> 00:36:00,550
cases it's moving along and occasionally

00:35:58,750 --> 00:36:02,890
checks should I stop is my time budget

00:36:00,550 --> 00:36:04,990
exceeded if it says so what you're

00:36:02,890 --> 00:36:06,580
exiting in function of course and when

00:36:04,990 --> 00:36:08,830
you're called again because in switch

00:36:06,580 --> 00:36:10,090
you jump to the beginning of the last

00:36:08,830 --> 00:36:12,880
step you did not complete and you

00:36:10,090 --> 00:36:15,340
pursued now this is not good for modern

00:36:12,880 --> 00:36:18,310
computers and we're gonna go but this

00:36:15,340 --> 00:36:22,630
step thing very see like used to be a

00:36:18,310 --> 00:36:24,430
thing it shows my age and if you're more

00:36:22,630 --> 00:36:25,990
modern and still not perfect this is

00:36:24,430 --> 00:36:27,430
slightly better because the state is

00:36:25,990 --> 00:36:30,520
being passed along by the client codes

00:36:27,430 --> 00:36:32,020
we don't have to realign a local state

00:36:30,520 --> 00:36:34,390
that's shared by every thread that's

00:36:32,020 --> 00:36:36,070
passing by what's the same idea I'm

00:36:34,390 --> 00:36:37,090
using the fall through there to tell the

00:36:36,070 --> 00:36:41,020
compiler to please shut up

00:36:37,090 --> 00:36:44,260
put a great Depot light with Rico powder

00:36:41,020 --> 00:36:45,400
of course but you see what yeah so this

00:36:44,260 --> 00:36:47,830
might be a way to do things

00:36:45,400 --> 00:36:49,420
it's all cool when I showed that the

00:36:47,830 --> 00:36:52,090
last time I give this stuff but he said

00:36:49,420 --> 00:36:53,500
what about this if she's coming if you

00:36:52,090 --> 00:36:55,990
want to tell me about something else is

00:36:53,500 --> 00:36:58,600
gonna move one would use things like

00:36:55,990 --> 00:36:59,890
that is is to take a function like the

00:36:58,600 --> 00:37:02,800
flight sequence for a year that's

00:36:59,890 --> 00:37:04,570
probably not as nice looking as the one

00:37:02,800 --> 00:37:05,950
your current provider is giving you

00:37:04,570 --> 00:37:09,790
because I haven't optimized it at all

00:37:05,950 --> 00:37:12,430
and make it so that it can remember

00:37:09,790 --> 00:37:13,450
where it stopped last time and you can

00:37:12,430 --> 00:37:14,860
restart it from the point where you

00:37:13,450 --> 00:37:17,740
stopped the last and then control the

00:37:14,860 --> 00:37:19,960
weight stops so do a transform or for

00:37:17,740 --> 00:37:22,420
reach or whatever but in short steps

00:37:19,960 --> 00:37:24,340
with a condition to make it stuff at

00:37:22,420 --> 00:37:26,520
some point like this one it's more

00:37:24,340 --> 00:37:28,960
complex so I know if you see this one

00:37:26,520 --> 00:37:31,690
it's returning a pair with the new

00:37:28,960 --> 00:37:33,700
features again the ctd attitude and it

00:37:31,690 --> 00:37:35,440
takes five arguments in this case the

00:37:33,700 --> 00:37:37,029
beginning of the source the end of the

00:37:35,440 --> 00:37:39,400
source the beginning of the

00:37:37,029 --> 00:37:40,989
nation the function to apply in some

00:37:39,400 --> 00:37:44,140
predicate the sure will evaluate as you

00:37:40,989 --> 00:37:45,999
all and it's moving along but chicken

00:37:44,140 --> 00:37:47,349
for the occasion and I'm checking at

00:37:45,999 --> 00:37:50,349
every iteration that's a choice I think

00:37:47,349 --> 00:37:52,539
and if there's still a reason to

00:37:50,349 --> 00:37:54,279
continue in this case that you continue

00:37:52,539 --> 00:37:57,219
otherwise you return where you stopped

00:37:54,279 --> 00:37:58,989
return where you stop reading and we're

00:37:57,219 --> 00:38:00,880
stop writing so that you can continue

00:37:58,989 --> 00:38:04,569
from that point on next time something

00:38:00,880 --> 00:38:05,799
is possible so you had a small budget of

00:38:04,569 --> 00:38:07,509
time you don't have control over what

00:38:05,799 --> 00:38:08,769
you're doing really so you're trying to

00:38:07,509 --> 00:38:10,900
something as a point the time is

00:38:08,769 --> 00:38:14,650
exceeded well just store wherever you

00:38:10,900 --> 00:38:17,319
stopped the color has to remember the

00:38:14,650 --> 00:38:19,869
state of that stopping point but the

00:38:17,319 --> 00:38:21,729
colors to be written accordingly well

00:38:19,869 --> 00:38:24,579
does I come for that so there's this

00:38:21,729 --> 00:38:27,400
very small even pool there where there's

00:38:24,579 --> 00:38:30,400
this process this function f the process

00:38:27,400 --> 00:38:33,269
the time it's processed data there's

00:38:30,400 --> 00:38:35,829
that now function up there that takes

00:38:33,269 --> 00:38:37,539
that returns the current time that

00:38:35,829 --> 00:38:39,219
that's because the slides are not big

00:38:37,539 --> 00:38:42,009
enough to take the whole system flock

00:38:39,219 --> 00:38:43,119
home and now thing if there's only one

00:38:42,009 --> 00:38:45,759
thing that I don't like about you what's

00:38:43,119 --> 00:38:46,179
the length of the names but they make

00:38:45,759 --> 00:38:47,919
sense

00:38:46,179 --> 00:38:50,199
and there's that make bread there that

00:38:47,919 --> 00:38:52,599
tree turns on and dad that takes now and

00:38:50,199 --> 00:38:56,469
then add some moment and returns true if

00:38:52,599 --> 00:38:58,749
you had something like that so little

00:38:56,469 --> 00:39:00,939
row down you're gathering data there's

00:38:58,749 --> 00:39:03,579
some location to put the processed it at

00:39:00,939 --> 00:39:06,909
some point it ranked process as much as

00:39:03,579 --> 00:39:08,349
you can and then until you've done you

00:39:06,909 --> 00:39:09,759
could be doing something else in the

00:39:08,349 --> 00:39:11,619
meantime of course are wise way do it

00:39:09,759 --> 00:39:15,039
that way what you're doing some eggs a

00:39:11,619 --> 00:39:17,349
year exaggerated ciliary tasks and then

00:39:15,039 --> 00:39:18,099
you're starting where you stopped and so

00:39:17,349 --> 00:39:19,419
on and so forth

00:39:18,099 --> 00:39:21,519
so while it would you something like

00:39:19,419 --> 00:39:23,619
that well as I was saying could be

00:39:21,519 --> 00:39:27,759
stopped by some external force you could

00:39:23,619 --> 00:39:29,739
be trying to achieve one picture on

00:39:27,759 --> 00:39:31,779
screen every so often at the very stable

00:39:29,739 --> 00:39:33,279
rates and preparing the view this

00:39:31,779 --> 00:39:35,339
particular picture you prepare the next

00:39:33,279 --> 00:39:37,299
one and there's still some time left

00:39:35,339 --> 00:39:39,819
every wondering what should I do with

00:39:37,299 --> 00:39:42,009
that time well you could make some other

00:39:39,819 --> 00:39:44,229
computation progress so that you have

00:39:42,009 --> 00:39:46,779
less to do later on because you you have

00:39:44,229 --> 00:39:48,249
time so use it well equations want to

00:39:46,779 --> 00:39:50,860
exceed your time budget so you give

00:39:48,249 --> 00:39:52,750
yourself a way to measure a time this

00:39:50,860 --> 00:39:55,480
you leave yourself this little room just

00:39:52,750 --> 00:39:56,620
in case you die because you want your

00:39:55,480 --> 00:39:58,870
pictures to be there it very stable

00:39:56,620 --> 00:40:00,160
right and when you sleep or when you

00:39:58,870 --> 00:40:01,630
suspend whenever wait for the next

00:40:00,160 --> 00:40:03,660
iteration well you'd make less because

00:40:01,630 --> 00:40:06,550
it doesn't mean you sold an income

00:40:03,660 --> 00:40:09,580
nothing to do if there's something to do

00:40:06,550 --> 00:40:11,620
in the middle and then overall you might

00:40:09,580 --> 00:40:13,480
get differ overall performance because

00:40:11,620 --> 00:40:16,210
you prepared things along the way that

00:40:13,480 --> 00:40:20,620
you won't have to prepare as a batch

00:40:16,210 --> 00:40:22,660
they're wrong yeah some of the old games

00:40:20,620 --> 00:40:25,420
that my students and now the

00:40:22,660 --> 00:40:28,090
professional gaming people do we used to

00:40:25,420 --> 00:40:30,700
have long pauses in between levels

00:40:28,090 --> 00:40:32,830
because they were preparing stuff that

00:40:30,700 --> 00:40:34,630
really wouldn't play to you that's awful

00:40:32,830 --> 00:40:38,290
you don't want to get it you don't want

00:40:34,630 --> 00:40:39,880
to wait wait for me for a minute or two

00:40:38,290 --> 00:40:42,520
and then I'll come back we'll play the

00:40:39,880 --> 00:40:45,400
game so if you're preparing stuff in the

00:40:42,520 --> 00:40:46,600
meantime the winnings you have happy

00:40:45,400 --> 00:40:52,330
customers your should buy a

00:40:46,600 --> 00:40:55,060
Ferrari weather or something but but but

00:40:52,330 --> 00:40:58,120
but that's that that's that but bill

00:40:55,060 --> 00:41:00,190
said you're doing more work you're doing

00:40:58,120 --> 00:41:02,500
more work your ways think of Ewing

00:41:00,190 --> 00:41:04,660
cycles or something you could be more

00:41:02,500 --> 00:41:06,640
efficient by doing a sweat transform be

00:41:04,660 --> 00:41:07,990
doing more operations in the same period

00:41:06,640 --> 00:41:08,980
of time because it's not adding you've

00:41:07,990 --> 00:41:12,930
read of shaking the time all the time

00:41:08,980 --> 00:41:15,760
you're right it's a different use case

00:41:12,930 --> 00:41:18,870
you're gonna get better if you're

00:41:15,760 --> 00:41:21,790
compressing data say it's me like that

00:41:18,870 --> 00:41:23,680
you might have better compression rates

00:41:21,790 --> 00:41:27,220
if you're doing it all at once

00:41:23,680 --> 00:41:28,840
but if you want to make things progress

00:41:27,220 --> 00:41:31,360
a bit in the mean time and use your time

00:41:28,840 --> 00:41:36,610
to the first maybe it's something you're

00:41:31,360 --> 00:41:38,110
going to do they can be using many

00:41:36,610 --> 00:41:39,250
things you can be using critical tasks

00:41:38,110 --> 00:41:41,620
of course when you're something like

00:41:39,250 --> 00:41:43,450
this you know you have the critical

00:41:41,620 --> 00:41:45,760
tasks and that's something that's

00:41:43,450 --> 00:41:47,350
accessory well you want the accessory

00:41:45,760 --> 00:41:50,130
thing not to exceed your time budget

00:41:47,350 --> 00:41:54,160
because then it might be the interests

00:41:50,130 --> 00:41:55,570
so though this is the kind of planning

00:41:54,160 --> 00:41:59,470
situation I was talking about about the

00:41:55,570 --> 00:42:00,910
game where you you have your frame rate

00:41:59,470 --> 00:42:03,160
you're just saying you're saying

00:42:00,910 --> 00:42:04,359
preparing the next one this thing has to

00:42:03,160 --> 00:42:06,640
be stable preparing

00:42:04,359 --> 00:42:09,069
elastic and you have some long-term

00:42:06,640 --> 00:42:10,960
planning to do to make sure that you

00:42:09,069 --> 00:42:12,630
will be also more interesting in the

00:42:10,960 --> 00:42:15,670
game after that the monsters will be

00:42:12,630 --> 00:42:18,220
little scary you and things but that

00:42:15,670 --> 00:42:19,900
takes time and if you've seen the games

00:42:18,220 --> 00:42:23,559
people they put all of their time and

00:42:19,900 --> 00:42:25,329
energy on what you see it's not only we

00:42:23,559 --> 00:42:27,430
the creatures will group together to

00:42:25,329 --> 00:42:28,720
make your life more complicated that

00:42:27,430 --> 00:42:30,970
they do in the spare time that they are

00:42:28,720 --> 00:42:35,829
at rest of us so that's an interesting

00:42:30,970 --> 00:42:41,019
way of preparing things now of course

00:42:35,829 --> 00:42:43,119
today if we had them but they're coming

00:42:41,019 --> 00:42:45,190
now if they're coming for 20 out but

00:42:43,119 --> 00:42:48,489
they're coming soon because it's a

00:42:45,190 --> 00:42:50,859
complex issue but still if you are about

00:42:48,489 --> 00:42:53,259
to separate her the things into little

00:42:50,859 --> 00:42:56,789
steps we do a feature in sequels dozens

00:42:53,259 --> 00:42:56,789
coming for that it's called confidence

00:42:56,849 --> 00:43:02,349
so so cool things make for very nice

00:43:00,099 --> 00:43:03,880
line code you can subdivide things stuff

00:43:02,349 --> 00:43:05,499
at some point and when you call it again

00:43:03,880 --> 00:43:07,779
you restart from where your stuff just

00:43:05,499 --> 00:43:10,359
natural and it's supported by the

00:43:07,779 --> 00:43:13,749
language you let the giant called

00:43:10,359 --> 00:43:14,680
control Larry if you want and the state

00:43:13,749 --> 00:43:17,499
is being managed

00:43:14,680 --> 00:43:19,450
Anita covers so so so so nice there

00:43:17,499 --> 00:43:21,160
resumable functions they have implicitly

00:43:19,450 --> 00:43:21,609
managed state in between cars that's

00:43:21,160 --> 00:43:24,190
cool

00:43:21,609 --> 00:43:27,609
and it's a hopeful for c++ winnie will

00:43:24,190 --> 00:43:31,289
know in san diego in one for to be I'm

00:43:27,609 --> 00:43:35,049
gonna be this one so this is very simple

00:43:31,289 --> 00:43:37,180
with number even numbers I remember even

00:43:35,049 --> 00:43:39,430
integers it's a function that would

00:43:37,180 --> 00:43:41,710
return vectors of integers they've been

00:43:39,430 --> 00:43:43,720
generated since last call when you start

00:43:41,710 --> 00:43:45,910
it and you pass it a pretty cat in this

00:43:43,720 --> 00:43:47,259
case I'd like you to stop after a while

00:43:45,910 --> 00:43:48,999
because I have other things to do and I

00:43:47,259 --> 00:43:51,579
will have enough even terrors for a

00:43:48,999 --> 00:43:54,789
while so later is there I'm panning up

00:43:51,579 --> 00:43:56,259
data inside at some point when I decided

00:43:54,789 --> 00:43:58,650
that I'd enough when the if statement

00:43:56,259 --> 00:44:01,059
makes it so the predicate is not met

00:43:58,650 --> 00:44:02,380
then I enter and I yield and yield the

00:44:01,059 --> 00:44:03,999
vector in the state where it was and I

00:44:02,380 --> 00:44:07,269
returned into the client code which will

00:44:03,999 --> 00:44:09,339
consume and when I'm called back again

00:44:07,269 --> 00:44:10,869
I'm clearing the Baker and continuing

00:44:09,339 --> 00:44:12,609
piling stuff in there so I'm doing some

00:44:10,869 --> 00:44:14,759
extra thickness tasks really computation

00:44:12,609 --> 00:44:17,800
that might be more useful than integers

00:44:14,759 --> 00:44:21,790
for whoever whomever is calling me

00:44:17,800 --> 00:44:24,220
truly like conceivable and from the

00:44:21,790 --> 00:44:26,950
colors point of view it's simple to the

00:44:24,220 --> 00:44:29,020
only thing to manage in this case is I

00:44:26,950 --> 00:44:31,330
think it that does the right thing

00:44:29,020 --> 00:44:34,060
meaning it it stops at the right moment

00:44:31,330 --> 00:44:37,330
and in this case I made a fixed amount I

00:44:34,060 --> 00:44:39,610
think it's 500 microseconds or so I put

00:44:37,330 --> 00:44:41,440
a small deadline so I'm consuming we're

00:44:39,610 --> 00:44:46,380
going to Jersey stopping is playing them

00:44:41,440 --> 00:44:49,780
and then making some others generate

00:44:46,380 --> 00:44:52,180
this is nicer and much less manual and

00:44:49,780 --> 00:44:53,710
the other techniques lightweight it's a

00:44:52,180 --> 00:44:58,600
pearl battle English cute

00:44:53,710 --> 00:45:05,710
so coming through C++ compiler you okay

00:44:58,600 --> 00:45:07,290
I already done that okay I have this

00:45:05,710 --> 00:45:10,500
thing that I also have burn of slides

00:45:07,290 --> 00:45:14,620
look look at the path of this yet

00:45:10,500 --> 00:45:16,450
okay so just because IIIi want to make

00:45:14,620 --> 00:45:19,110
it shorter together bit further just

00:45:16,450 --> 00:45:21,490
something that's associated with that

00:45:19,110 --> 00:45:31,120
that's not the same thing but that I

00:45:21,490 --> 00:45:33,820
found myself imagine situation where you

00:45:31,120 --> 00:45:35,620
want to do something like this is simple

00:45:33,820 --> 00:45:37,690
you want to compare to simple C style

00:45:35,620 --> 00:45:39,430
string strings and return truth they're

00:45:37,690 --> 00:45:41,110
identical in the case it will be very

00:45:39,430 --> 00:45:46,150
simple I'm just taking the two strings

00:45:41,110 --> 00:45:47,680
like that and preparing them like in a

00:45:46,150 --> 00:45:48,970
very simplified way what you do with me

00:45:47,680 --> 00:45:51,310
at every pass were in a card somewhere

00:45:48,970 --> 00:45:53,470
in one ring like do I have the right

00:45:51,310 --> 00:45:56,530
password or something you're comparing

00:45:53,470 --> 00:45:59,080
two bits of liver and there's this

00:45:56,530 --> 00:46:02,440
solution there that says well if they're

00:45:59,080 --> 00:46:03,880
not know if where there is no I mean

00:46:02,440 --> 00:46:07,600
something otherwise well going through a

00:46:03,880 --> 00:46:09,700
sequence until the end and as soon as I

00:46:07,600 --> 00:46:12,910
find a characteristic when says that the

00:46:09,700 --> 00:46:14,110
same hey because I'm answered and when

00:46:12,910 --> 00:46:17,620
we're optimizing code that's what we do

00:46:14,110 --> 00:46:19,740
we try to try to leave hey where should

00:46:17,620 --> 00:46:22,660
I stay there I found it

00:46:19,740 --> 00:46:23,110
now from some perspective this is very

00:46:22,660 --> 00:46:25,210
bad

00:46:23,110 --> 00:46:28,960
because you're leaking information

00:46:25,210 --> 00:46:32,300
aren't you if somebody is very mean and

00:46:28,960 --> 00:46:33,950
measuring the time it takes to take two

00:46:32,300 --> 00:46:35,570
hidden bit of Nutella they don't know

00:46:33,950 --> 00:46:37,820
about and some test said that they have

00:46:35,570 --> 00:46:39,620
they might be like playing mastermind

00:46:37,820 --> 00:46:42,560
with you when trying to divine how close

00:46:39,620 --> 00:46:43,970
they are to finding the actual stone and

00:46:42,560 --> 00:46:46,790
and they might be measuring the time so

00:46:43,970 --> 00:46:48,890
you side this one mastered a bit longer

00:46:46,790 --> 00:46:51,470
I did a previous ones so I must be

00:46:48,890 --> 00:46:53,690
getting closer or something so this is

00:46:51,470 --> 00:46:56,180
that is that from that point of view

00:46:53,690 --> 00:46:58,340
because if you're a style that the

00:46:56,180 --> 00:47:00,440
timing of that thing the leaks

00:46:58,340 --> 00:47:03,440
information what you would like it to do

00:47:00,440 --> 00:47:05,240
I think if you're from a security

00:47:03,440 --> 00:47:06,890
standpoint or something you would like

00:47:05,240 --> 00:47:08,750
the time it takes to compute this

00:47:06,890 --> 00:47:17,180
function to be strictly dependent on the

00:47:08,750 --> 00:47:19,490
size of new center so yeah there was a

00:47:17,180 --> 00:47:20,720
paper for that 114 that never regret

00:47:19,490 --> 00:47:22,880
anywhere because I think the problem is

00:47:20,720 --> 00:47:26,180
nobody else's that's the pipe record is

00:47:22,880 --> 00:47:28,040
from someone else and if I may quote it

00:47:26,180 --> 00:47:30,320
says one of the artists challenges when

00:47:28,040 --> 00:47:31,790
implementing cryptographic functionality

00:47:30,320 --> 00:47:33,200
with well-defined mathematical

00:47:31,790 --> 00:47:35,510
properties is to avoid side-channel

00:47:33,200 --> 00:47:37,400
attacks that says there is breaches

00:47:35,510 --> 00:47:40,550
exploiting physical effects dependent on

00:47:37,400 --> 00:47:43,070
secret data such effects include

00:47:40,550 --> 00:47:45,680
variances in timing of execution power

00:47:43,070 --> 00:47:47,270
consumption blah blah blah C++ does not

00:47:45,680 --> 00:47:49,070
consider such effects as part of the

00:47:47,270 --> 00:47:50,720
observable behaviors machine thereby

00:47:49,070 --> 00:47:54,500
allowing implementations to various

00:47:50,720 --> 00:47:55,970
properties in unspecified ways which is

00:47:54,500 --> 00:47:57,710
a reality we don't specify these things

00:47:55,970 --> 00:48:00,650
we talk about timing in the fishing

00:47:57,710 --> 00:48:03,320
that's what we do so wet the paper

00:48:00,650 --> 00:48:05,030
called the data invariant function would

00:48:03,320 --> 00:48:06,950
be one that tells the compiler knew this

00:48:05,030 --> 00:48:08,920
one it's very important that the times

00:48:06,950 --> 00:48:11,360
always the same so don't try to do

00:48:08,920 --> 00:48:14,930
optimizations that will break into

00:48:11,360 --> 00:48:18,380
sheets well very predictable run time

00:48:14,930 --> 00:48:18,920
fever not fast that's not exactly what I

00:48:18,380 --> 00:48:21,320
asked for

00:48:18,920 --> 00:48:26,720
if you optimize you're not helping me

00:48:21,320 --> 00:48:28,070
please don't this is a weird talk so so

00:48:26,720 --> 00:48:28,940
so it's an interesting challenge because

00:48:28,070 --> 00:48:31,490
if you look at this

00:48:28,940 --> 00:48:33,800
this is like the basic one I have of

00:48:31,490 --> 00:48:36,230
course it makes typing information

00:48:33,800 --> 00:48:38,960
because it stops as soon as it can so

00:48:36,230 --> 00:48:41,990
when I am with says okay let's make this

00:48:38,960 --> 00:48:44,240
one they turn variant they try things we

00:48:41,990 --> 00:48:44,869
look at so that all that's coming is

00:48:44,240 --> 00:48:46,640
strong

00:48:44,869 --> 00:48:49,630
people I work with students that are

00:48:46,640 --> 00:48:51,829
very intelligent in trying things so

00:48:49,630 --> 00:48:53,869
first of all you need to change you

00:48:51,829 --> 00:48:55,339
enjoy a bit it's a simple problem

00:48:53,869 --> 00:48:57,109
because otherwise would be according to

00:48:55,339 --> 00:48:59,210
all sorts of details that we don't care

00:48:57,109 --> 00:49:00,890
about so arguments are fixed length

00:48:59,210 --> 00:49:02,839
which could be some kind of

00:49:00,890 --> 00:49:04,390
pre-processing so when you arrive at

00:49:02,839 --> 00:49:06,920
your function that you're okay or are

00:49:04,390 --> 00:49:08,180
you make sure that you always move up to

00:49:06,920 --> 00:49:10,190
a certain length through the length of

00:49:08,180 --> 00:49:11,539
the longest one that's more complex or

00:49:10,190 --> 00:49:12,440
something but we'll make it simple

00:49:11,539 --> 00:49:13,789
something like this

00:49:12,440 --> 00:49:15,099
so either size see there that's the

00:49:13,789 --> 00:49:18,079
number of characters I'm checking and

00:49:15,099 --> 00:49:21,470
both strings are presumed to be the same

00:49:18,079 --> 00:49:23,029
size this one leaks this one makes do

00:49:21,470 --> 00:49:24,920
you see that for the same reason as

00:49:23,029 --> 00:49:25,369
before meaning that as soon as I have

00:49:24,920 --> 00:49:28,490
something

00:49:25,369 --> 00:49:30,650
I get out so that's that it's just the

00:49:28,490 --> 00:49:32,450
reflex that we have I would normally

00:49:30,650 --> 00:49:35,019
leave as soon as I can from the function

00:49:32,450 --> 00:49:37,609
why should I continue in the input why

00:49:35,019 --> 00:49:41,599
no I have my answer but this is the new

00:49:37,609 --> 00:49:44,089
space so this is any return that's not

00:49:41,599 --> 00:49:47,119
for this this is another one some people

00:49:44,089 --> 00:49:50,509
say well then don't return take a

00:49:47,119 --> 00:49:52,720
boolean and assigned to it as soon as

00:49:50,509 --> 00:49:58,460
you have your answer but keep it inside

00:49:52,720 --> 00:50:00,410
Winston links do you see why but Britain

00:49:58,460 --> 00:50:01,970
but then for recreation we would need

00:50:00,410 --> 00:50:05,210
that that feature it says don't do it

00:50:01,970 --> 00:50:07,609
but but it in this case but be sure I

00:50:05,210 --> 00:50:10,460
can't control it but did this one well I

00:50:07,609 --> 00:50:11,720
can do this one thing is you can count

00:50:10,460 --> 00:50:14,599
the number of times you have sickness

00:50:11,720 --> 00:50:16,999
and you know that you know how close in

00:50:14,599 --> 00:50:19,509
terms of quantitative number how many

00:50:16,999 --> 00:50:23,029
times you put files in a variable

00:50:19,509 --> 00:50:25,700
if you have a very dumb optimization

00:50:23,029 --> 00:50:28,130
level so you can see things this is also

00:50:25,700 --> 00:50:31,220
same thing thing well then I don't have

00:50:28,130 --> 00:50:32,470
an if statement but you can I do don't

00:50:31,220 --> 00:50:35,119
you

00:50:32,470 --> 00:50:37,039
we cannot do yeah because depending on

00:50:35,119 --> 00:50:39,799
the value of the first argument of the

00:50:37,039 --> 00:50:41,930
ampersand ampersand thing there well

00:50:39,799 --> 00:50:45,049
you're going to do the second part more

00:50:41,930 --> 00:50:46,759
or less of this so leak something so

00:50:45,049 --> 00:50:50,569
it's not that you don't matter and you

00:50:46,759 --> 00:50:53,960
have to think about it you see that yeah

00:50:50,569 --> 00:50:57,650
so so difficult to be stable how about

00:50:53,960 --> 00:51:00,510
this one is this one nicer

00:50:57,650 --> 00:51:02,130
it probably is from this because it

00:51:00,510 --> 00:51:04,830
probably does always the same time

00:51:02,130 --> 00:51:06,390
confusion if no if the comparisons to

00:51:04,830 --> 00:51:07,650
you it doesn't optimize and if there's

00:51:06,390 --> 00:51:10,350
things there to because there's no

00:51:07,650 --> 00:51:13,140
branching or whatever it's doing some

00:51:10,350 --> 00:51:18,060
equal Co thing you catch that to an end

00:51:13,140 --> 00:51:19,440
yeah 1 or 0 and you do a bitwise and

00:51:18,060 --> 00:51:21,810
there at some point you're gonna get the

00:51:19,440 --> 00:51:22,890
number but you were doing this the exact

00:51:21,810 --> 00:51:25,470
same number of time every time you're

00:51:22,890 --> 00:51:26,880
calling so yeah so so it's a tricky

00:51:25,470 --> 00:51:28,380
problem it's interesting in the

00:51:26,880 --> 00:51:31,110
perspective what we're discussing today

00:51:28,380 --> 00:51:37,590
which is trying to have stable speed

00:51:31,110 --> 00:51:41,060
instead of this making sense maybe you

00:51:37,590 --> 00:51:41,060
have whether I done

00:51:43,550 --> 00:51:47,820
that's totally a typo thank you I will

00:51:46,260 --> 00:51:49,650
fix it thank you

00:51:47,820 --> 00:51:51,180
and then there may be device of cycles

00:51:49,650 --> 00:51:53,280
in the other ones too because I did that

00:51:51,180 --> 00:51:54,660
solutions so there's a typo that it will

00:51:53,280 --> 00:51:57,660
be fixed in the final version should be

00:51:54,660 --> 00:51:59,910
able to pick from this weird Depot where

00:51:57,660 --> 00:52:06,030
with the slides in your questions or

00:51:59,910 --> 00:52:09,450
pendants threats no okay so these

00:52:06,030 --> 00:52:11,910
functions are interesting it's a nice of

00:52:09,450 --> 00:52:13,550
your size and so to do I think that's

00:52:11,910 --> 00:52:20,250
about it for today

00:52:13,550 --> 00:52:22,110
questions comments if not you can have a

00:52:20,250 --> 00:52:25,090
nice eternity

00:52:22,110 --> 00:52:25,090

YouTube URL: https://www.youtube.com/watch?v=pnSvUbE1HHk


