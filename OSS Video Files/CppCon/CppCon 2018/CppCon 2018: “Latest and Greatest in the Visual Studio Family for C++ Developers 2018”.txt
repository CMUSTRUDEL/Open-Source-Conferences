Title: CppCon 2018: “Latest and Greatest in the Visual Studio Family for C++ Developers 2018”
Publication date: 2018-10-13
Playlist: CppCon 2018
Description: 
	http://CppCon.org
—
Steve Carroll & Marian Luparu “Latest and Greatest in the Visual Studio Family for C++ Developers 2018”
--
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018
—
This talk will be modeled on our previously successful talks at CppCon. We'll give the community an update on how we are doing in terms of conformance where we'll be announcing the final conformance state for MSVC for the final 2017 update. We'll be showing many many demos of new features (not in previous versions of this talk) that target cross platform developers in C++. This will include making it easier to bring your code to Visual Studio, significant improvements to ease of use for developers using CMake, improvements to unit testing experiences, a lot of new Linux targeting improvements, an update on our performance work, and new debugger features for C++ developers. Developers will learn new tricks they can apply immediately on leaving the session as well as get a sense of what is coming in future updates. The main message is that Visual Studio and Visual Studio Code will make every C++ developer (not just Windows developers) more productive.
— 
Steve Carroll
Director of Development, Microsoft
Steve Carroll is the dev manager for the Visual C++ team and previously the dev manager for the Visual Studio debuggers and profilers.

Marian Luparu
C++ Program Manager Lead, Microsoft
Ask me about Visual Studio :)
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:05,520
so hello and welcome it's great to have

00:00:03,659 --> 00:00:07,680
you here today for the session the

00:00:05,520 --> 00:00:11,130
latest and greatest and the visual slew

00:00:07,680 --> 00:00:12,840
of family for C++ developers my name is

00:00:11,130 --> 00:00:15,809
Marion Lipari and I'm a program manager

00:00:12,840 --> 00:00:17,820
lead and what's Blas team Microsoft and

00:00:15,809 --> 00:00:20,160
I have here today with me Steve Carroll

00:00:17,820 --> 00:00:25,710
- the developer manager for this plus

00:00:20,160 --> 00:00:29,189
blast team for a while now do follow us

00:00:25,710 --> 00:00:32,309
on twitter and our DMS are open if you

00:00:29,189 --> 00:00:34,440
have any questions so I'm gonna start by

00:00:32,309 --> 00:00:36,930
stating that our mission at Sloss blast

00:00:34,440 --> 00:00:38,760
team is that we want to make the lives

00:00:36,930 --> 00:00:41,700
of every C++ developers on the planet

00:00:38,760 --> 00:00:43,260
better and that is a hefty goal that's

00:00:41,700 --> 00:00:45,750
something that we aspire to and we're

00:00:43,260 --> 00:00:48,539
working day after day towards making

00:00:45,750 --> 00:00:49,920
that happen and there four ways we're

00:00:48,539 --> 00:00:51,390
doing that the first one is by

00:00:49,920 --> 00:00:55,829
participating in the creation of this

00:00:51,390 --> 00:00:57,660
plus plus standard the second is by

00:00:55,829 --> 00:01:01,379
investing in the MSD C compiler tool

00:00:57,660 --> 00:01:04,769
chain by improving the Visual Studio IDE

00:01:01,379 --> 00:01:06,810
and by contributing to enhancing the C++

00:01:04,769 --> 00:01:08,549
extension in Visual Studio code those

00:01:06,810 --> 00:01:10,950
are the four things working on and to

00:01:08,549 --> 00:01:13,500
talk a bit about the the first one when

00:01:10,950 --> 00:01:16,530
it comes to party participation in the

00:01:13,500 --> 00:01:17,729
standards there's a lot of passion in

00:01:16,530 --> 00:01:19,170
our team to make sure that we come up

00:01:17,729 --> 00:01:22,380
with proposals that we feel are

00:01:19,170 --> 00:01:24,180
benefiting our slot class customers but

00:01:22,380 --> 00:01:26,549
that not all of the things we're doing

00:01:24,180 --> 00:01:28,110
back in Redmond we're also working very

00:01:26,549 --> 00:01:31,200
hard to implement some of those

00:01:28,110 --> 00:01:32,520
proposals into the compilers to make

00:01:31,200 --> 00:01:34,740
sure that we can validate the spec let

00:01:32,520 --> 00:01:36,299
make sure we give you access to also try

00:01:34,740 --> 00:01:37,890
it on your own code bases and see how

00:01:36,299 --> 00:01:39,299
that plays out for you and then together

00:01:37,890 --> 00:01:42,119
we can come in and contribute that

00:01:39,299 --> 00:01:44,130
feedback back to the standards body for

00:01:42,119 --> 00:01:46,259
that to be applied and enhance the the

00:01:44,130 --> 00:01:48,509
language for the future so examples of

00:01:46,259 --> 00:01:51,600
that are our work on the MACC compiler

00:01:48,509 --> 00:01:54,930
for modules and gorse contributions to

00:01:51,600 --> 00:01:59,040
both ms b c and the clang LLVM compiler

00:01:54,930 --> 00:02:00,600
for co-routines now most of the talk

00:01:59,040 --> 00:02:02,399
will be standing on talking about them

00:02:00,600 --> 00:02:03,780
as the C compiler in library and the

00:02:02,399 --> 00:02:05,579
visuals to the IDE but I want to take a

00:02:03,780 --> 00:02:07,920
quick moment to talk about Visual Studio

00:02:05,579 --> 00:02:09,479
code can I get a quick show of hands how

00:02:07,920 --> 00:02:12,239
many of you have used Visual Studio code

00:02:09,479 --> 00:02:13,770
and how many of you are familiar with

00:02:12,239 --> 00:02:15,330
this plus last extension and are

00:02:13,770 --> 00:02:17,940
using it keep your hands up thank you

00:02:15,330 --> 00:02:19,560
very much so we're not gonna spend a lot

00:02:17,940 --> 00:02:21,150
of time but for those of you they didn't

00:02:19,560 --> 00:02:22,800
raise their hand Visual Studio code is a

00:02:21,150 --> 00:02:24,830
lightweight editor has built-in git

00:02:22,800 --> 00:02:27,270
integration we have recently announced

00:02:24,830 --> 00:02:30,330
integration with github PR system

00:02:27,270 --> 00:02:31,920
directly in the editor and with the help

00:02:30,330 --> 00:02:34,950
of the visuals of this plus last

00:02:31,920 --> 00:02:37,500
extension you get access to editing and

00:02:34,950 --> 00:02:40,440
debugging experience inside the editor

00:02:37,500 --> 00:02:42,000
for C++ code the reason why we don't

00:02:40,440 --> 00:02:43,890
talk that much in this session about it

00:02:42,000 --> 00:02:44,970
is because right after this right in

00:02:43,890 --> 00:02:47,610
this room

00:02:44,970 --> 00:02:49,950
wrong will be we'll be spending all of

00:02:47,610 --> 00:02:51,630
the session time talking with you about

00:02:49,950 --> 00:02:54,630
Visual Studio code so please attend this

00:02:51,630 --> 00:02:59,130
session as well so we're going to switch

00:02:54,630 --> 00:03:02,340
to talking about video and solution 17

00:02:59,130 --> 00:03:04,230
shipped in March last year and when

00:03:02,340 --> 00:03:08,660
we're here at CTP Khan last year we were

00:03:04,230 --> 00:03:11,880
just getting ready to ship 15.4 update

00:03:08,660 --> 00:03:13,650
now we're at fifteen point eight update

00:03:11,880 --> 00:03:16,500
and we're getting ready to ship fifteen

00:03:13,650 --> 00:03:17,730
point nine and one of the things that I

00:03:16,500 --> 00:03:19,320
want to mention for those of you that

00:03:17,730 --> 00:03:22,740
are not familiar with our release cycle

00:03:19,320 --> 00:03:25,290
is that these are not small bug level

00:03:22,740 --> 00:03:28,260
fixes releases that we're doing they

00:03:25,290 --> 00:03:30,150
start fully fledged feature full

00:03:28,260 --> 00:03:32,640
releases where we bring in whole new

00:03:30,150 --> 00:03:34,500
experiences online in the sub dates and

00:03:32,640 --> 00:03:35,640
this are some of the experiences that

00:03:34,500 --> 00:03:37,290
we're going to talk about today and then

00:03:35,640 --> 00:03:41,100
what's going to Steve is going to demo

00:03:37,290 --> 00:03:43,200
on later but before we go there I want

00:03:41,100 --> 00:03:46,500
to take you down memory lane for a quick

00:03:43,200 --> 00:03:50,630
second and show you that these are all

00:03:46,500 --> 00:03:55,890
of the releases that C++ ever shipped

00:03:50,630 --> 00:04:00,510
and can I get a quick show of hands how

00:03:55,890 --> 00:04:01,770
many of you have used visual C++ 6 okay

00:04:00,510 --> 00:04:07,380
keep your hand up if you use loud

00:04:01,770 --> 00:04:13,200
version 4 keep your hand up if you use

00:04:07,380 --> 00:04:15,060
version 1 heroes thank you for your

00:04:13,200 --> 00:04:17,700
search okay congratulations now yeah I'm

00:04:15,060 --> 00:04:20,640
impressive so the reason I brought this

00:04:17,700 --> 00:04:22,350
up is because this year is a special

00:04:20,640 --> 00:04:24,840
milestone for Visual C++ we are

00:04:22,350 --> 00:04:27,660
celebrating 25 years since Visual C++

00:04:24,840 --> 00:04:30,360
1.0 shipped we're very

00:04:27,660 --> 00:04:35,060
proud of the legacy that the visual c++

00:04:30,360 --> 00:04:36,990
product has in the technical

00:04:35,060 --> 00:04:40,470
breakthroughs that it brought into the

00:04:36,990 --> 00:04:41,400
market throughout the years this is for

00:04:40,470 --> 00:04:42,570
those of you who attended the pre-show

00:04:41,400 --> 00:04:43,590
this would have been the place where the

00:04:42,570 --> 00:04:46,610
Symphony Orchestra would have played

00:04:43,590 --> 00:04:46,610
okay thank you

00:04:46,860 --> 00:04:58,490
so yeah happy Anniversary visual c++ and

00:04:49,800 --> 00:05:01,380
we look forward to the next 25 years but

00:04:58,490 --> 00:05:03,840
and I may be biased maybe towards the

00:05:01,380 --> 00:05:06,360
present but I I think that one of the

00:05:03,840 --> 00:05:08,610
largest transformation that a prod at a

00:05:06,360 --> 00:05:10,830
visual studio version Emma's version has

00:05:08,610 --> 00:05:14,940
seen through all those 25 years is

00:05:10,830 --> 00:05:16,050
actually happening now with 2017 and the

00:05:14,940 --> 00:05:18,330
reason for that transformation is

00:05:16,050 --> 00:05:21,030
because now Visual Studio 2017 actually

00:05:18,330 --> 00:05:23,100
supports allows you as a C++ developer

00:05:21,030 --> 00:05:24,930
to target any platform is not only about

00:05:23,100 --> 00:05:27,690
Windows and this is not a theoretical

00:05:24,930 --> 00:05:29,820
thing that C++ is portable and visual

00:05:27,690 --> 00:05:31,320
studio supports c++ hence you can write

00:05:29,820 --> 00:05:34,470
course Popham code no this is actually

00:05:31,320 --> 00:05:38,220
Visual Studio helping you target all of

00:05:34,470 --> 00:05:39,930
those platforms at the same time and to

00:05:38,220 --> 00:05:42,210
add on that really what it means is that

00:05:39,930 --> 00:05:43,440
when you're done targeting Windows and

00:05:42,210 --> 00:05:45,570
you want to start targeting Linux you

00:05:43,440 --> 00:05:47,700
don't have to you know hop over to the

00:05:45,570 --> 00:05:49,440
Linux machine and work in a completely

00:05:47,700 --> 00:05:52,530
different environment and a completely

00:05:49,440 --> 00:05:54,510
different place to author your code and

00:05:52,530 --> 00:05:55,950
see if it builds for Windows for for

00:05:54,510 --> 00:05:58,580
Linux from the comfort of Visual Studio

00:05:55,950 --> 00:06:01,350
you can target both at the same time and

00:05:58,580 --> 00:06:03,690
we are trying to make it easy as easy as

00:06:01,350 --> 00:06:05,310
possible together so you may say well

00:06:03,690 --> 00:06:06,810
but do I need to create projects and

00:06:05,310 --> 00:06:07,169
solutions for Visual Studio no not

00:06:06,810 --> 00:06:09,180
really

00:06:07,169 --> 00:06:10,590
there's no importer there's no code

00:06:09,180 --> 00:06:11,940
generator that there's no generation of

00:06:10,590 --> 00:06:14,300
projects and solutions anymore you can

00:06:11,940 --> 00:06:16,470
just bring in your C make or any other

00:06:14,300 --> 00:06:18,300
source code with any build system that

00:06:16,470 --> 00:06:20,490
you have inside Visual Studio and we'll

00:06:18,300 --> 00:06:23,610
make it easy and I'm also doing work to

00:06:20,490 --> 00:06:25,560
make C++ library acquisition easier to

00:06:23,610 --> 00:06:28,350
fill in the end-to-end experience and

00:06:25,560 --> 00:06:30,240
once you're inside Visual Studio you're

00:06:28,350 --> 00:06:32,970
gonna get access to all the familiar

00:06:30,240 --> 00:06:34,400
tools that you know windows developers

00:06:32,970 --> 00:06:37,789
keep talking about inside Visual Studio

00:06:34,400 --> 00:06:39,900
code editing intelligence refactoring

00:06:37,789 --> 00:06:40,740
breakpoints debug visualization and so

00:06:39,900 --> 00:06:42,720
on

00:06:40,740 --> 00:06:45,300
and this is not a this is not a

00:06:42,720 --> 00:06:47,190
religious conversion we know that you're

00:06:45,300 --> 00:06:50,430
using a lot of C++ tool that you used to

00:06:47,190 --> 00:06:53,099
in a day to day job and you can just

00:06:50,430 --> 00:06:55,259
bring them to palacio 2017 so for

00:06:53,099 --> 00:06:57,030
example client format or booster start

00:06:55,259 --> 00:06:59,789
things that are directly integrated now

00:06:57,030 --> 00:07:01,830
inside Visual Studio 2017 and there's no

00:06:59,789 --> 00:07:05,940
better way to show this than through a

00:07:01,830 --> 00:07:07,530
demo so I'll turn it on to Steve ok so

00:07:05,940 --> 00:07:09,750
let's take a look at this in practice so

00:07:07,530 --> 00:07:12,030
actually to get started before we jump

00:07:09,750 --> 00:07:15,000
into all of our IDE goodness I'm gonna

00:07:12,030 --> 00:07:16,199
start here in the command prompt and let

00:07:15,000 --> 00:07:17,759
me close these so you're not looking at

00:07:16,199 --> 00:07:18,449
our you're not getting any spoilers all

00:07:17,759 --> 00:07:20,130
right

00:07:18,449 --> 00:07:22,409
so first thing I want to show you guys

00:07:20,130 --> 00:07:23,940
here the the problem that I hate the

00:07:22,409 --> 00:07:26,580
most about doing cross-platform

00:07:23,940 --> 00:07:27,930
development is getting the environment

00:07:26,580 --> 00:07:30,120
set up and trying to get all of your

00:07:27,930 --> 00:07:31,770
libraries building for both who uses VC

00:07:30,120 --> 00:07:34,289
package share I want to get a level set

00:07:31,770 --> 00:07:36,479
ok a few so that's good I hope to

00:07:34,289 --> 00:07:39,599
convert some of you today so VC package

00:07:36,479 --> 00:07:41,130
is a cross-platform package manager

00:07:39,599 --> 00:07:44,400
solution it's an open source project

00:07:41,130 --> 00:07:45,900
from us at Microsoft and what I'm gonna

00:07:44,400 --> 00:07:48,180
do right now is I'm going to set up two

00:07:45,900 --> 00:07:51,360
environments one Windows and one Linux

00:07:48,180 --> 00:07:53,250
to do a simple pong game so what I'm

00:07:51,360 --> 00:07:57,240
gonna do so start here is I know that I

00:07:53,250 --> 00:07:59,909
want to build this off of a library

00:07:57,240 --> 00:08:02,250
called the simple fast multimedia labor

00:07:59,909 --> 00:08:04,380
library so that's SF ml so I'm going to

00:08:02,250 --> 00:08:06,509
do a VC package search as you can see it

00:08:04,380 --> 00:08:08,130
comes back quite quickly and it gives me

00:08:06,509 --> 00:08:10,680
actually four different flavors of that

00:08:08,130 --> 00:08:12,750
thing that I can go and do why because

00:08:10,680 --> 00:08:15,090
there's over 900 libraries available in

00:08:12,750 --> 00:08:17,880
this we've recently also made this

00:08:15,090 --> 00:08:19,259
cross-platform and over I think 350 of

00:08:17,880 --> 00:08:22,319
them are now available in a

00:08:19,259 --> 00:08:25,620
cross-platform way from VC package so

00:08:22,319 --> 00:08:27,750
it's a using VC package it's designed to

00:08:25,620 --> 00:08:30,259
be toolable you clone it off of github

00:08:27,750 --> 00:08:32,940
and then you run a bootstrapping

00:08:30,259 --> 00:08:35,940
bootstrapping script let's say that 10

00:08:32,940 --> 00:08:37,680
times fast and then you have the ability

00:08:35,940 --> 00:08:40,860
to do something as simple as VC package

00:08:37,680 --> 00:08:42,270
install s FML it will pull that down

00:08:40,860 --> 00:08:43,680
I've installed it previously I didn't

00:08:42,270 --> 00:08:46,620
I'd probably figured you didn't want to

00:08:43,680 --> 00:08:48,420
watch me build it and and not only will

00:08:46,620 --> 00:08:51,510
it build that so that you get it from

00:08:48,420 --> 00:08:53,880
source at a sort of consistent State

00:08:51,510 --> 00:08:54,570
across all of your libraries we will

00:08:53,880 --> 00:08:56,610
also give

00:08:54,570 --> 00:08:58,200
you the needed information for including

00:08:56,610 --> 00:09:01,530
that inside your CMake file if you see

00:08:58,200 --> 00:09:02,820
here in our fine package okay so now

00:09:01,530 --> 00:09:04,200
we're Windows we're good to go that's

00:09:02,820 --> 00:09:05,970
the only library I need because this is

00:09:04,200 --> 00:09:08,460
a relatively simple example

00:09:05,970 --> 00:09:11,790
Here I am I'm in Ubuntu this is running

00:09:08,460 --> 00:09:14,130
in a VM so you can go in here and use

00:09:11,790 --> 00:09:16,680
the exact same invocations

00:09:14,130 --> 00:09:19,830
if you to do that and so here you can

00:09:16,680 --> 00:09:21,750
see now I'm getting the x64 Linux

00:09:19,830 --> 00:09:24,330
version of this thing again it's

00:09:21,750 --> 00:09:25,440
installed again I get fine package all

00:09:24,330 --> 00:09:27,750
right I want to draw your attention to

00:09:25,440 --> 00:09:29,520
one more concept which I can do over

00:09:27,750 --> 00:09:32,160
here as well which is called VC package

00:09:29,520 --> 00:09:33,900
integrate install and in some ways this

00:09:32,160 --> 00:09:36,570
is where the magic happens what this

00:09:33,900 --> 00:09:39,090
does is it makes it so that when you are

00:09:36,570 --> 00:09:41,220
in traditional project in solution world

00:09:39,090 --> 00:09:43,620
you just automatically adds all of your

00:09:41,220 --> 00:09:45,840
VC package libraries into your include

00:09:43,620 --> 00:09:47,580
path it adds them to your link line for

00:09:45,840 --> 00:09:49,230
you so that you can just go ahead and

00:09:47,580 --> 00:09:51,390
pound include and start using them if

00:09:49,230 --> 00:09:52,800
you are not using as I'm going to

00:09:51,390 --> 00:09:54,930
demonstrate today if you are AC make

00:09:52,800 --> 00:09:56,580
person it will give you this information

00:09:54,930 --> 00:09:59,700
here that you need which is the name of

00:09:56,580 --> 00:10:01,140
an location of a tool chain file that

00:09:59,700 --> 00:10:03,300
you can include in your C make

00:10:01,140 --> 00:10:04,290
configuration remember this will be back

00:10:03,300 --> 00:10:07,350
to it in a second

00:10:04,290 --> 00:10:09,630
when I did that same step here on Ubuntu

00:10:07,350 --> 00:10:12,180
you can see I got of course the same

00:10:09,630 --> 00:10:14,430
message but with the local route to the

00:10:12,180 --> 00:10:16,410
tool chain file okay so now we got our

00:10:14,430 --> 00:10:18,120
two machine set up we got our libraries

00:10:16,410 --> 00:10:21,420
we need them now I'm going to show you

00:10:18,120 --> 00:10:23,550
how to use Visual Studio to actually

00:10:21,420 --> 00:10:25,740
wire the two pieces up I'm gonna go up

00:10:23,550 --> 00:10:26,400
here in a quick launch because I live

00:10:25,740 --> 00:10:31,350
there

00:10:26,400 --> 00:10:33,420
connection manager and wiring up my sort

00:10:31,350 --> 00:10:35,100
of master visual studio to all of the

00:10:33,420 --> 00:10:38,190
VMs that I want to control is as easy as

00:10:35,100 --> 00:10:40,590
clicking this Add button you come in

00:10:38,190 --> 00:10:42,120
here you type in your hostname you have

00:10:40,590 --> 00:10:43,590
you know you can use passwords if you

00:10:42,120 --> 00:10:46,260
want you can use private key if you want

00:10:43,590 --> 00:10:48,420
we don't care as long as that thing is

00:10:46,260 --> 00:10:51,540
running some sort of sshd and relatively

00:10:48,420 --> 00:10:54,120
up-to-date version of C make we can use

00:10:51,540 --> 00:10:55,350
that and connect to it and get as if you

00:10:54,120 --> 00:10:58,140
were just doing any other form of remote

00:10:55,350 --> 00:10:59,910
debugging from visual studio but for

00:10:58,140 --> 00:11:00,900
those of you who didn't drop by last

00:10:59,910 --> 00:11:02,400
year I want to share something that

00:11:00,900 --> 00:11:05,430
we're pretty excited about that's new

00:11:02,400 --> 00:11:07,889
this year which is we now have remote

00:11:05,430 --> 00:11:09,899
headers intellisense manager what

00:11:07,889 --> 00:11:12,239
this will allow you to do if I come in

00:11:09,899 --> 00:11:15,329
here and I click explore is it's going

00:11:12,239 --> 00:11:18,329
to actually use our sink to mirror your

00:11:15,329 --> 00:11:20,519
headers back and forth from the linux

00:11:18,329 --> 00:11:22,230
box to the windows 1 so that we can

00:11:20,519 --> 00:11:25,230
light up intellisense so what we're

00:11:22,230 --> 00:11:28,139
looking for here is a very exacting

00:11:25,230 --> 00:11:29,699
emulation of exactly your environments

00:11:28,139 --> 00:11:32,549
on the linux side instead of just saying

00:11:29,699 --> 00:11:33,720
oh windows is good enough and so as you

00:11:32,549 --> 00:11:35,009
can see here we pulled down things like

00:11:33,720 --> 00:11:37,679
asar and we brought down your home

00:11:35,009 --> 00:11:39,329
directory okay so now we're set up we

00:11:37,679 --> 00:11:41,009
got our environment we got our machines

00:11:39,329 --> 00:11:42,419
wired up the next thing I'm going to do

00:11:41,009 --> 00:11:44,730
is I'm going to Tricia's it transition

00:11:42,419 --> 00:11:47,069
into the open folder experience so

00:11:44,730 --> 00:11:48,629
unlike the olden times when you would

00:11:47,069 --> 00:11:50,819
have nothing at this point gone and you

00:11:48,629 --> 00:11:53,189
see make to generate a project and then

00:11:50,819 --> 00:11:55,379
open that using open project inside of

00:11:53,189 --> 00:11:56,939
Visual Studio I'm gonna show you an

00:11:55,379 --> 00:11:58,829
experience that's a lot more if you've

00:11:56,939 --> 00:12:00,359
used the s code a more familiar

00:11:58,829 --> 00:12:02,429
environment where you just point us at

00:12:00,359 --> 00:12:04,889
the folder so I have the code for this

00:12:02,429 --> 00:12:06,509
thing sitting inside a folder so this is

00:12:04,889 --> 00:12:08,609
going to be you know if you go up here

00:12:06,509 --> 00:12:11,339
instead of going open project and select

00:12:08,609 --> 00:12:14,759
open folder which is exactly what this

00:12:11,339 --> 00:12:16,709
is going to do okay so here we are I

00:12:14,759 --> 00:12:18,449
have opened it up and now in solution

00:12:16,709 --> 00:12:21,509
explorer where you would usually expect

00:12:18,449 --> 00:12:24,449
to see solutions and projects instead

00:12:21,509 --> 00:12:26,040
what we have is folder view so this is

00:12:24,449 --> 00:12:28,739
just a mapping of what is exactly on

00:12:26,040 --> 00:12:30,660
your disk inside of this when we did

00:12:28,739 --> 00:12:33,720
this we detected that there was a see

00:12:30,660 --> 00:12:35,699
make list text file sitting inside of

00:12:33,720 --> 00:12:37,559
that folder and therefore we went and

00:12:35,699 --> 00:12:39,660
interrogated it for the configuration

00:12:37,559 --> 00:12:42,929
information that we needed in order to

00:12:39,660 --> 00:12:44,429
set Visual Studio up for what you need

00:12:42,929 --> 00:12:45,899
so if you come in here you can see it's

00:12:44,429 --> 00:12:48,449
just a regular old C make file there's

00:12:45,899 --> 00:12:50,429
no visual studio specialness in here any

00:12:48,449 --> 00:12:51,839
kind of configuration that you might

00:12:50,429 --> 00:12:53,699
have done on the command line before

00:12:51,839 --> 00:12:55,499
would C make that stuff moves into this

00:12:53,699 --> 00:12:57,539
JSON file I'm gonna bring it up really

00:12:55,499 --> 00:12:58,860
quick and again this is just a file

00:12:57,539 --> 00:13:00,660
sitting there next to the C make list

00:12:58,860 --> 00:13:03,149
txt file I want to stress that there's

00:13:00,660 --> 00:13:05,069
kind of a lot of text here but this text

00:13:03,149 --> 00:13:07,079
is mostly boilerplate right like the

00:13:05,069 --> 00:13:11,429
only thing that we actually changed here

00:13:07,079 --> 00:13:13,889
is right here as I spoiled earlier this

00:13:11,429 --> 00:13:16,860
is where you basically let us know where

00:13:13,889 --> 00:13:19,049
your VC package toolchain file is and

00:13:16,860 --> 00:13:20,579
now you get that same experience of

00:13:19,049 --> 00:13:21,769
magic that I was describing where your

00:13:20,579 --> 00:13:23,839
include paths are set

00:13:21,769 --> 00:13:26,300
and your link lines are available and it

00:13:23,839 --> 00:13:29,420
can do all the fine package magic of for

00:13:26,300 --> 00:13:31,339
VC package so I have two configurations

00:13:29,420 --> 00:13:33,319
here up on top you can see how x86 debug

00:13:31,339 --> 00:13:35,420
here on the bottom you see I have Linux

00:13:33,319 --> 00:13:37,220
debug and so all I had to do to set this

00:13:35,420 --> 00:13:39,170
one up is to put that different path for

00:13:37,220 --> 00:13:40,279
the tools chain file here and now we're

00:13:39,170 --> 00:13:42,049
set up and everything that you would

00:13:40,279 --> 00:13:43,160
come to expect like hitting up v and

00:13:42,049 --> 00:13:47,509
getting a build and a debugging

00:13:43,160 --> 00:13:49,279
experience as well as Intel it sense so

00:13:47,509 --> 00:13:51,949
the configuration selection is happening

00:13:49,279 --> 00:13:52,999
up here right now I'm in x86 mode so let

00:13:51,949 --> 00:13:55,040
me show you something that I think is

00:13:52,999 --> 00:13:57,889
really an underappreciated feature of

00:13:55,040 --> 00:13:59,839
this so if I come in here and I and I

00:13:57,889 --> 00:14:01,910
see this all the time I I'm a Windows

00:13:59,839 --> 00:14:03,529
developer first and foremost right but

00:14:01,910 --> 00:14:05,389
you know in Microsoft we see more and

00:14:03,529 --> 00:14:07,369
more teams moving to also target Linux

00:14:05,389 --> 00:14:09,139
and so we have lots of people who are

00:14:07,369 --> 00:14:11,179
you know they're still kind of default

00:14:09,139 --> 00:14:12,980
is I'm like a Windows Deb and I'm mostly

00:14:11,179 --> 00:14:15,579
living in that build and Linux is maybe

00:14:12,980 --> 00:14:18,649
off to the side and in that scenario

00:14:15,579 --> 00:14:20,420
what happens is you know you go you make

00:14:18,649 --> 00:14:22,279
some change some windows specific

00:14:20,420 --> 00:14:23,749
changed and you build Windows and then

00:14:22,279 --> 00:14:25,369
you go and you you check in and maybe

00:14:23,749 --> 00:14:27,769
somebody catches it on code review and

00:14:25,369 --> 00:14:29,600
maybe they don't so if I go in here and

00:14:27,769 --> 00:14:31,129
I actually just type the word sleep as I

00:14:29,600 --> 00:14:32,869
like to do because that's how I was

00:14:31,129 --> 00:14:35,269
trained for 10 years on how to actually

00:14:32,869 --> 00:14:36,740
go and pause something what you'll see

00:14:35,269 --> 00:14:39,319
and I don't know if you can see this is

00:14:36,740 --> 00:14:40,490
purple squiggles under here you're gonna

00:14:39,319 --> 00:14:41,689
see lots of different color squiggles

00:14:40,490 --> 00:14:44,029
today so it's gonna be fun for you to

00:14:41,689 --> 00:14:45,410
like find all of them purple and what

00:14:44,029 --> 00:14:47,660
you can see here is I highlight this

00:14:45,410 --> 00:14:50,480
what it tells me before I even touch the

00:14:47,660 --> 00:14:52,549
build button it tells me that that sleep

00:14:50,480 --> 00:14:54,920
is going to be undefined in my Linux

00:14:52,549 --> 00:14:56,959
configuration and indeed if I switch

00:14:54,920 --> 00:14:58,549
over to my Linux configuration you'll

00:14:56,959 --> 00:15:00,649
see purple convert into red because it's

00:14:58,549 --> 00:15:02,049
straight up doesn't work so this is

00:15:00,649 --> 00:15:05,569
allowing you to catch these things as

00:15:02,049 --> 00:15:06,410
quickly as possible okay so when people

00:15:05,569 --> 00:15:08,089
use Visual Studio

00:15:06,410 --> 00:15:09,799
one of our key value you know value

00:15:08,089 --> 00:15:12,139
props things that we think people really

00:15:09,799 --> 00:15:14,269
like about it is the debugger and so

00:15:12,139 --> 00:15:15,889
rather than show you what I've shown in

00:15:14,269 --> 00:15:17,689
the past which is the ability to fight

00:15:15,889 --> 00:15:19,939
yes if I go and I switch to the debug

00:15:17,689 --> 00:15:21,139
configuration and I hit f5 it's going to

00:15:19,939 --> 00:15:23,179
go ahead and is going to launch this on

00:15:21,139 --> 00:15:25,369
the VM but I want one thing that we

00:15:23,179 --> 00:15:27,230
heard over and over again was the fact

00:15:25,369 --> 00:15:29,360
that hey you know we can't really launch

00:15:27,230 --> 00:15:32,209
everything a lot of my applications on

00:15:29,360 --> 00:15:34,129
Linux are services and so I want to be

00:15:32,209 --> 00:15:35,329
able to you know launch an application

00:15:34,129 --> 00:15:36,980
and

00:15:35,329 --> 00:15:39,049
then connect to it attached to it

00:15:36,980 --> 00:15:40,699
remotely and that now works in Visual

00:15:39,049 --> 00:15:44,739
Studio so if they come into the debug

00:15:40,699 --> 00:15:47,869
menu and I go to attach to process and

00:15:44,739 --> 00:15:51,379
and I go and I select up here I select

00:15:47,869 --> 00:15:53,689
the ssh transport instead of the default

00:15:51,379 --> 00:15:55,699
one which and then i can come in here I

00:15:53,689 --> 00:15:57,920
can select which remote machine I want

00:15:55,699 --> 00:15:59,420
and I can come in here this is another

00:15:57,920 --> 00:16:00,769
little mini feature which I've never

00:15:59,420 --> 00:16:02,329
gotten a chance to demonstrate here

00:16:00,769 --> 00:16:05,600
before which is I can actually filter

00:16:02,329 --> 00:16:07,249
this thing and and if I can spell you

00:16:05,600 --> 00:16:09,410
can see I can find my pong in here and

00:16:07,249 --> 00:16:15,649
when I go when I attach I can select

00:16:09,410 --> 00:16:18,470
native because CPP con and and we're

00:16:15,649 --> 00:16:19,790
attached so that's great so now I can

00:16:18,470 --> 00:16:22,220
come in here and when I hit the spacebar

00:16:19,790 --> 00:16:25,790
I'm gonna hit my I'm gonna hit my break

00:16:22,220 --> 00:16:27,410
point and this is a vector if you hadn't

00:16:25,790 --> 00:16:28,819
you know in in most debugging

00:16:27,410 --> 00:16:30,470
environments what you would see now is

00:16:28,819 --> 00:16:32,360
when I hover over this you would see

00:16:30,470 --> 00:16:35,029
something like underscore M underscore

00:16:32,360 --> 00:16:37,249
and pull the inner guts of this but

00:16:35,029 --> 00:16:38,779
because we care deeply about getting to

00:16:37,249 --> 00:16:40,279
bugger visualizations right when I hover

00:16:38,779 --> 00:16:41,779
over here what you'll actually see is

00:16:40,279 --> 00:16:44,869
the three items that have already been

00:16:41,779 --> 00:16:47,660
added to the vector so that's basic oh

00:16:44,869 --> 00:16:50,720
thank you so that's basic debugging this

00:16:47,660 --> 00:16:52,040
is using remote also so I want to show

00:16:50,720 --> 00:16:54,829
you something a little bit more

00:16:52,040 --> 00:16:57,290
complicated for this next thing so we're

00:16:54,829 --> 00:16:59,600
going to use what is called the bullet

00:16:57,290 --> 00:17:01,699
physics thing and I want to show you

00:16:59,600 --> 00:17:03,769
this selector so I've gone ahead again

00:17:01,699 --> 00:17:05,029
it's a see make application we cloned it

00:17:03,769 --> 00:17:06,230
thing that's different about this from

00:17:05,029 --> 00:17:07,549
the other thing is it has more than one

00:17:06,230 --> 00:17:09,049
source file not only does that more the

00:17:07,549 --> 00:17:11,179
one source file it has lots and lots of

00:17:09,049 --> 00:17:13,100
C make targets and so yes you can use

00:17:11,179 --> 00:17:14,659
open folder to navigate it and find all

00:17:13,100 --> 00:17:16,549
the different C make lists text files

00:17:14,659 --> 00:17:17,959
that are in here and you know you can

00:17:16,549 --> 00:17:20,240
you're kind of on your own this thing is

00:17:17,959 --> 00:17:21,980
super complex so we found was that

00:17:20,240 --> 00:17:25,159
people found this confusing and what

00:17:21,980 --> 00:17:26,929
they really wanted was a seem eccentric

00:17:25,159 --> 00:17:28,700
experience inside the solution explorer

00:17:26,929 --> 00:17:31,100
that would help them kind of navigate

00:17:28,700 --> 00:17:35,000
around and so that's what C make targets

00:17:31,100 --> 00:17:37,190
view was so now what we have here is a

00:17:35,000 --> 00:17:38,389
sort of pseudo switches in project C

00:17:37,190 --> 00:17:42,470
view if you want to think about it that

00:17:38,389 --> 00:17:43,820
way where each of the targets that there

00:17:42,470 --> 00:17:44,960
are available you can see a bunch of

00:17:43,820 --> 00:17:46,370
these are executive bowls you can see

00:17:44,960 --> 00:17:48,800
some of these are static libraries and

00:17:46,370 --> 00:17:51,620
so my active target right now is this

00:17:48,800 --> 00:17:53,330
at basic example GUI you can see what

00:17:51,620 --> 00:17:55,040
others see make files you have

00:17:53,330 --> 00:17:57,980
references on and if I come in here and

00:17:55,040 --> 00:18:00,650
I double click on it double click on it

00:17:57,980 --> 00:18:02,150
double double click on it yeah there we

00:18:00,650 --> 00:18:03,890
go it will bring me to the line inside

00:18:02,150 --> 00:18:05,780
the simi Calista txt file that has that

00:18:03,890 --> 00:18:07,040
reference into it so this is a really

00:18:05,780 --> 00:18:07,850
good way you know one of the pieces of

00:18:07,040 --> 00:18:09,170
feedback we hear about people's like

00:18:07,850 --> 00:18:11,210
yeah everybody doesn't see Meg but you

00:18:09,170 --> 00:18:12,710
know I need tools to help me kind of

00:18:11,210 --> 00:18:14,420
navigate around and learn the thing we

00:18:12,710 --> 00:18:16,340
think this is really useful another

00:18:14,420 --> 00:18:19,520
thing I want you to know about that it's

00:18:16,340 --> 00:18:21,470
relatively new is we now even in CMake

00:18:19,520 --> 00:18:23,720
mode when you right-click on a file so

00:18:21,470 --> 00:18:26,060
you now have the very very requested

00:18:23,720 --> 00:18:28,340
feature of being able to compile just a

00:18:26,060 --> 00:18:30,010
single file I see smiles smiles make me

00:18:28,340 --> 00:18:32,480
happy that's all I ask

00:18:30,010 --> 00:18:34,700
likewise we've added the ability to use

00:18:32,480 --> 00:18:36,350
the code analysis experience so that you

00:18:34,700 --> 00:18:38,000
can go and do just a single file and run

00:18:36,350 --> 00:18:40,280
you know like it's you don't want to run

00:18:38,000 --> 00:18:42,080
you know it's static analysis get 10,000

00:18:40,280 --> 00:18:43,220
errors and then start from nowhere it's

00:18:42,080 --> 00:18:45,290
great to be able to just do this loop

00:18:43,220 --> 00:18:46,460
over and over again remember static

00:18:45,290 --> 00:18:48,800
analysis we can get back there in a bit

00:18:46,460 --> 00:18:50,720
also as Marian pointed out we're trying

00:18:48,800 --> 00:18:53,570
to make sure that we are friendly to the

00:18:50,720 --> 00:18:56,030
entire ecosystem of C++ tools so the

00:18:53,570 --> 00:18:58,640
unit tests experience as you can see if

00:18:56,030 --> 00:19:03,620
I come over here I all you have to do is

00:18:58,640 --> 00:19:06,650
build the this thing has a set of Google

00:19:03,620 --> 00:19:08,300
test unit tests associated we support

00:19:06,650 --> 00:19:11,450
Google tests we support of course the

00:19:08,300 --> 00:19:13,670
original MS test test framework as well

00:19:11,450 --> 00:19:15,320
as boost tests all of these when you do

00:19:13,670 --> 00:19:17,480
a build of your project we will

00:19:15,320 --> 00:19:19,580
automatically detect the existence of

00:19:17,480 --> 00:19:21,580
these unit tests and then you can

00:19:19,580 --> 00:19:23,960
control them here in the test Explorer

00:19:21,580 --> 00:19:25,730
you can you know make it you know

00:19:23,960 --> 00:19:28,460
elaborate test lists you can choose

00:19:25,730 --> 00:19:30,020
different different sets to run and you

00:19:28,460 --> 00:19:33,200
can even do something like this and

00:19:30,020 --> 00:19:34,790
actually go in and debug them so you

00:19:33,200 --> 00:19:37,370
know real good real way of figuring out

00:19:34,790 --> 00:19:39,020
why is this unit test failing so we make

00:19:37,370 --> 00:19:40,430
this easy we've added some good

00:19:39,020 --> 00:19:41,900
integration right here so you don't even

00:19:40,430 --> 00:19:44,630
have to use test Explorer if you're

00:19:41,900 --> 00:19:46,940
inside that file you'll see these code

00:19:44,630 --> 00:19:48,680
lens indicators that will tell you where

00:19:46,940 --> 00:19:50,900
the places are where the thing is

00:19:48,680 --> 00:19:52,790
happening so that's really useful all

00:19:50,900 --> 00:19:56,480
right so that is sort of like a

00:19:52,790 --> 00:19:58,190
whirlwind tour of the cross-platform

00:19:56,480 --> 00:20:00,930
development support that we've added

00:19:58,190 --> 00:20:04,980
recently inside a visual studio

00:20:00,930 --> 00:20:08,970
right back all right thank you Steve so

00:20:04,980 --> 00:20:10,950
open folder open folder is a complete

00:20:08,970 --> 00:20:13,230
new experience inside Windows Phone 17

00:20:10,950 --> 00:20:14,670
and Steve showed you how to make works

00:20:13,230 --> 00:20:17,220
inside it but it works with other built

00:20:14,670 --> 00:20:19,800
systems as well with a bit help up from

00:20:17,220 --> 00:20:21,600
configuration you can also target not

00:20:19,800 --> 00:20:23,340
only Windows but other platforms as well

00:20:21,600 --> 00:20:25,800
and once you decided Visual Studio to

00:20:23,340 --> 00:20:29,190
get the familiar experience that you

00:20:25,800 --> 00:20:31,410
used to to learn more about open folder

00:20:29,190 --> 00:20:33,600
and in general how we're thinking about

00:20:31,410 --> 00:20:35,520
cross-platform development in Visual

00:20:33,600 --> 00:20:39,420
Studio please attend marks in we'll talk

00:20:35,520 --> 00:20:41,760
tonight at 6:45 and they're going to go

00:20:39,420 --> 00:20:45,360
into a lot more scenarios specifically

00:20:41,760 --> 00:20:48,660
for C make Steve showed you how we're

00:20:45,360 --> 00:20:51,210
trying to make a C make built-in project

00:20:48,660 --> 00:20:52,860
system inside Visual Studio and not only

00:20:51,210 --> 00:20:54,540
that you get to the familiar experience

00:20:52,860 --> 00:20:58,170
actually demoed but again like you can

00:20:54,540 --> 00:21:00,330
just target Windows and Linux and other

00:20:58,170 --> 00:21:02,340
platforms as well as cygwin means UW or

00:21:00,330 --> 00:21:04,860
embed it just as well and I want to

00:21:02,340 --> 00:21:07,620
double-click a bit on the linux

00:21:04,860 --> 00:21:10,320
experience and you've seen how easy it

00:21:07,620 --> 00:21:12,000
was for Steve to connect to a remote VM

00:21:10,320 --> 00:21:16,200
that's because the restrictions we have

00:21:12,000 --> 00:21:17,910
on a Linux distro are very tiny as long

00:21:16,200 --> 00:21:21,900
as you have the build essentials and you

00:21:17,910 --> 00:21:23,370
have gdb on it and SSH open then Visual

00:21:21,900 --> 00:21:25,590
Studio will be able to connect on it so

00:21:23,370 --> 00:21:28,470
a local VM as Steve has it or remote VM

00:21:25,590 --> 00:21:31,500
in the cloud a container or even those

00:21:28,470 --> 00:21:33,060
tiny devices that have the running IOT

00:21:31,500 --> 00:21:36,270
on them you can connect them using

00:21:33,060 --> 00:21:38,340
Visual Studio and once you're inside

00:21:36,270 --> 00:21:39,330
Visual Studio connected to them we make

00:21:38,340 --> 00:21:41,850
sure that we took the intellisense

00:21:39,330 --> 00:21:44,640
experience we tweak it to remove all the

00:21:41,850 --> 00:21:46,440
MSD sees that intellisense has and allow

00:21:44,640 --> 00:21:49,440
you to focus on a completely vanilla

00:21:46,440 --> 00:21:52,470
Linux environment in addition to that

00:21:49,440 --> 00:21:54,600
when too quickly I was going to mention

00:21:52,470 --> 00:21:57,600
as well that some people are nervous too

00:21:54,600 --> 00:21:59,220
when we talk about Linux targeting about

00:21:57,600 --> 00:22:02,190
cross targeting and this is not what

00:21:59,220 --> 00:22:03,780
Steve demoed this was a native build on

00:22:02,190 --> 00:22:06,660
the Linux machine orchestrated by the

00:22:03,780 --> 00:22:08,070
Visual Studio machine remotely and last

00:22:06,660 --> 00:22:08,610
but not least when you when you're

00:22:08,070 --> 00:22:10,650
debugging

00:22:08,610 --> 00:22:11,930
there might be some tiny devices that

00:22:10,650 --> 00:22:14,840
are mentioning early that don't have

00:22:11,930 --> 00:22:16,160
ability to run gdb so you can

00:22:14,840 --> 00:22:18,170
Connect Visual Studio can connect both

00:22:16,160 --> 00:22:20,960
through gdb and gdb server to those

00:22:18,170 --> 00:22:23,360
devices and too tired the whole

00:22:20,960 --> 00:22:25,070
experience together its VC package which

00:22:23,360 --> 00:22:26,510
gives you a consistent experience of

00:22:25,070 --> 00:22:29,420
acquiring those libraries and we've been

00:22:26,510 --> 00:22:30,620
seeing fantastic growth in the adoption

00:22:29,420 --> 00:22:32,990
of the C package we're very excited

00:22:30,620 --> 00:22:35,330
about the excitement in the community

00:22:32,990 --> 00:22:38,270
and we're barely keeping up with with

00:22:35,330 --> 00:22:39,890
the PRS that we're getting so I know

00:22:38,270 --> 00:22:42,350
there's a lot of library authors in the

00:22:39,890 --> 00:22:45,140
room and I'd like to invite you to the

00:22:42,350 --> 00:22:47,660
session that we're going to have later

00:22:45,140 --> 00:22:49,340
today Robert which is our resident

00:22:47,660 --> 00:22:51,020
expert in a VC package is going to talk

00:22:49,340 --> 00:22:52,220
generically about how to make your

00:22:51,020 --> 00:22:55,970
libraries more package' below

00:22:52,220 --> 00:22:59,270
so please attempt this talk as well so

00:22:55,970 --> 00:23:01,250
to summarize our cross-platform story is

00:22:59,270 --> 00:23:04,100
that Visual Studio is one IDE

00:23:01,250 --> 00:23:07,070
for any C++ developer any app any

00:23:04,100 --> 00:23:08,510
platform and did I mention that all of

00:23:07,070 --> 00:23:13,640
the things you've seen here today I'm

00:23:08,510 --> 00:23:15,170
obligated to say they're free Yoshio

00:23:13,640 --> 00:23:16,610
community is free for individual

00:23:15,170 --> 00:23:19,730
contributors for individual developers

00:23:16,610 --> 00:23:23,210
and for small companies so please

00:23:19,730 --> 00:23:24,640
download it today thank you now we

00:23:23,210 --> 00:23:27,950
talked about cross-platform development

00:23:24,640 --> 00:23:31,070
one of our one important part of our

00:23:27,950 --> 00:23:33,230
mission is also making sure that we're

00:23:31,070 --> 00:23:35,960
delivering an industry-leading mHDC

00:23:33,230 --> 00:23:37,460
compiler tool chain for C++ developer

00:23:35,960 --> 00:23:39,410
targeting windows and that's what we're

00:23:37,460 --> 00:23:41,900
going to be talking about next how are

00:23:39,410 --> 00:23:43,190
we doing that we're making sure that we

00:23:41,900 --> 00:23:44,990
are conforming to the C++ standard

00:23:43,190 --> 00:23:47,480
that's that's really our number one

00:23:44,990 --> 00:23:49,310
priority and in the next slides I'll

00:23:47,480 --> 00:23:52,700
answer the question are you there yet

00:23:49,310 --> 00:23:53,960
hopefully but that not all that we're

00:23:52,700 --> 00:23:55,850
doing in a compiler

00:23:53,960 --> 00:23:57,530
we're making sure that we're improving

00:23:55,850 --> 00:24:00,850
the diagnostics and the code analysis

00:23:57,530 --> 00:24:03,170
that we're making runtime performance

00:24:00,850 --> 00:24:04,940
improvements every release and releasing

00:24:03,170 --> 00:24:07,580
code size and last but not least that

00:24:04,940 --> 00:24:10,430
we're we're building security tools that

00:24:07,580 --> 00:24:12,950
make your code more secure all right so

00:24:10,430 --> 00:24:15,680
let's unpack this a bit earlier this

00:24:12,950 --> 00:24:18,350
year we have announced that Visual

00:24:15,680 --> 00:24:21,500
Studio 2017 has full support for all of

00:24:18,350 --> 00:24:24,670
the C++ 11 14 and 17 language features

00:24:21,500 --> 00:24:26,930
as well as some old Stranglers like

00:24:24,670 --> 00:24:28,879
expressions DNA or two-phase name lookup

00:24:26,930 --> 00:24:31,309
as well as having

00:24:28,879 --> 00:24:41,409
the most complete c++ 17 library

00:24:31,309 --> 00:24:44,539
implementation in the market today now

00:24:41,409 --> 00:24:47,239
going back to the question of are we

00:24:44,539 --> 00:24:48,980
there yet I acknowledge that the

00:24:47,239 --> 00:24:52,340
definition of there may be different for

00:24:48,980 --> 00:24:54,350
different people and we are getting some

00:24:52,340 --> 00:24:55,789
questions after the slide as follow-up

00:24:54,350 --> 00:25:00,200
questions and some of them are captured

00:24:55,789 --> 00:25:04,039
here can MSD see both Hana can M SVC

00:25:00,200 --> 00:25:06,590
build ranges v3 have you done periodic

00:25:04,039 --> 00:25:08,330
macro support in the MACC compiler

00:25:06,590 --> 00:25:10,279
those are the top three questions if you

00:25:08,330 --> 00:25:12,440
have other questions as follow-up to the

00:25:10,279 --> 00:25:14,119
to this slide please check with us after

00:25:12,440 --> 00:25:16,149
this we'd love to talk with you about it

00:25:14,119 --> 00:25:20,539
but in the next slide I'll try to unpack

00:25:16,149 --> 00:25:22,429
this question so I don't have much love

00:25:20,539 --> 00:25:24,470
for evil macros left in my heart but

00:25:22,429 --> 00:25:27,679
I'll start with the the preprocessor and

00:25:24,470 --> 00:25:30,200
let you know that we have improved the

00:25:27,679 --> 00:25:33,409
preprocessor significantly we have lots

00:25:30,200 --> 00:25:37,070
of fixes and they're behind compilers

00:25:33,409 --> 00:25:39,409
switch and 15.8 so now I have most of

00:25:37,070 --> 00:25:41,359
the features that you need for doing all

00:25:39,409 --> 00:25:46,340
the prices or craziness that you

00:25:41,359 --> 00:25:47,570
shouldn't probably doing but it's off by

00:25:46,340 --> 00:25:49,519
default because it is a breaking change

00:25:47,570 --> 00:25:52,759
for our compiler and we'll talk a bit

00:25:49,519 --> 00:25:57,080
more about what that means for us also

00:25:52,759 --> 00:25:59,779
in 15.8 we have worked with the Hana

00:25:57,080 --> 00:26:01,460
author to solve all of the bugs that we

00:25:59,779 --> 00:26:03,799
have in our compiler they were affecting

00:26:01,460 --> 00:26:07,669
building boosts kana with with our

00:26:03,799 --> 00:26:12,940
compiler so 15.8 can build clean I think

00:26:07,669 --> 00:26:16,580
the boost version 1.68 of boost Hana so

00:26:12,940 --> 00:26:19,480
thank you to the Louis and a great job

00:26:16,580 --> 00:26:22,340
on the onyx plus blast team and today

00:26:19,480 --> 00:26:25,369
renouncing that with 15.9 which is

00:26:22,340 --> 00:26:29,450
coming soon the MACC compiler will also

00:26:25,369 --> 00:26:31,929
be able to build ranges between if I can

00:26:29,450 --> 00:26:31,929
use the clicker

00:26:33,250 --> 00:26:37,510
we have a long tail of bugs and we're

00:26:35,350 --> 00:26:40,930
growing very very confident that those

00:26:37,510 --> 00:26:43,160
those bug fixes will make it in and 15.9

00:26:40,930 --> 00:26:45,060
will be that release or heads will roll

00:26:43,160 --> 00:26:50,530
[Laughter]

00:26:45,060 --> 00:26:53,590
note it you can see the the comment over

00:26:50,530 --> 00:26:56,620
there that ranges v3 is only available

00:26:53,590 --> 00:26:57,970
in permissive - and this is a good

00:26:56,620 --> 00:27:00,850
opportunity for me to tell you more of

00:26:57,970 --> 00:27:02,800
what permissive - actually is so in the

00:27:00,850 --> 00:27:05,710
most literal sense permissive - is a

00:27:02,800 --> 00:27:08,350
compiler search what really is is a

00:27:05,710 --> 00:27:11,530
compiler mode in which the MACC compiler

00:27:08,350 --> 00:27:14,110
becomes a lot stricter - conforming to

00:27:11,530 --> 00:27:16,540
the standard so enabling features like

00:27:14,110 --> 00:27:18,880
expressions DNA or two-phase name lookup

00:27:16,540 --> 00:27:22,000
are are being enabled with the switch

00:27:18,880 --> 00:27:24,880
and what this means in practice for you

00:27:22,000 --> 00:27:26,860
is that all of the MSB C extensions are

00:27:24,880 --> 00:27:28,810
out of the way and this is the tool that

00:27:26,860 --> 00:27:30,490
you should be using if you're doing

00:27:28,810 --> 00:27:34,000
cross-platform development let me

00:27:30,490 --> 00:27:35,800
emphasize that with the 15.9 bug fixes

00:27:34,000 --> 00:27:38,080
that are going to go in they were

00:27:35,800 --> 00:27:39,970
working for four ranges v3 we believe

00:27:38,080 --> 00:27:42,610
that permissive - is the best tool in

00:27:39,970 --> 00:27:46,110
the market for you and your team to be

00:27:42,610 --> 00:27:49,690
able to write C++ portable code today so

00:27:46,110 --> 00:27:52,360
now if I say that permissive - is that

00:27:49,690 --> 00:27:54,940
such a good tool why isn't really on by

00:27:52,360 --> 00:27:56,410
default in the in the compiler that's a

00:27:54,940 --> 00:27:58,480
follow-up question that we usually get

00:27:56,410 --> 00:28:02,310
and it's a fair question

00:27:58,480 --> 00:28:05,410
permissive - will be on by default soon

00:28:02,310 --> 00:28:07,390
but the the challenge is that there's a

00:28:05,410 --> 00:28:08,950
lot of code for the past 25 years and

00:28:07,390 --> 00:28:11,110
more has been written with our more

00:28:08,950 --> 00:28:12,790
relaxed MSB C compiler and we're trying

00:28:11,110 --> 00:28:16,510
to make sure that we're we're helping

00:28:12,790 --> 00:28:20,460
the whole ecosystem move - to use

00:28:16,510 --> 00:28:23,230
permissive - but we are very obsessive

00:28:20,460 --> 00:28:24,670
about the fact that we want everybody to

00:28:23,230 --> 00:28:26,560
move to the latest version of Visual

00:28:24,670 --> 00:28:28,750
Studio and the latest version of the

00:28:26,560 --> 00:28:32,440
compiler first and we don't want to

00:28:28,750 --> 00:28:34,270
leave anyone behind when they're if

00:28:32,440 --> 00:28:36,220
they're not confirming with what

00:28:34,270 --> 00:28:37,210
permissive - require them to do them to

00:28:36,220 --> 00:28:42,730
change they're required to be in the

00:28:37,210 --> 00:28:44,140
code so - to highlight how obsessive we

00:28:42,730 --> 00:28:45,730
are about upgrades and making sure that

00:28:44,140 --> 00:28:48,700
everybody is on the latest version of

00:28:45,730 --> 00:28:50,770
17 this is a full slide covering all of

00:28:48,700 --> 00:28:53,050
the improvements that we made in 2017 to

00:28:50,770 --> 00:28:56,980
make sure that everybody is able to

00:28:53,050 --> 00:28:59,260
migrate so we have all of the compiler

00:28:56,980 --> 00:29:01,690
versions shipping in box so that if you

00:28:59,260 --> 00:29:03,130
have to lock in on a version of a

00:29:01,690 --> 00:29:05,170
compiler you can still use the latest ID

00:29:03,130 --> 00:29:06,490
a binary compatibility we have the

00:29:05,170 --> 00:29:08,080
compiler switches that I was mentioning

00:29:06,490 --> 00:29:10,150
earlier permissive - but also the

00:29:08,080 --> 00:29:13,900
language conformance features plus plus

00:29:10,150 --> 00:29:15,850
1417 and and the latest that are opt in

00:29:13,900 --> 00:29:17,710
you only bite as much as you can chew

00:29:15,850 --> 00:29:19,930
but you can still make it make that

00:29:17,710 --> 00:29:22,390
experience inside Visual Studio and last

00:29:19,930 --> 00:29:24,060
but not least be a Steve demoed Missy

00:29:22,390 --> 00:29:26,380
package and that's another way of

00:29:24,060 --> 00:29:27,790
speeding up migrations and by making

00:29:26,380 --> 00:29:29,320
sure that all of the open source library

00:29:27,790 --> 00:29:30,730
that you might have figured out in the

00:29:29,320 --> 00:29:32,830
past how to build it yourself now

00:29:30,730 --> 00:29:36,610
they're very easily accessible in BC

00:29:32,830 --> 00:29:38,680
package we're doing a lot of testing and

00:29:36,610 --> 00:29:40,450
that's that's important to call out we

00:29:38,680 --> 00:29:43,420
have a lot of libraries that we test in

00:29:40,450 --> 00:29:45,220
our daily bits with a compiler and we're

00:29:43,420 --> 00:29:46,810
also doing our part to make sure that as

00:29:45,220 --> 00:29:48,610
part of that process we also clean up

00:29:46,810 --> 00:29:50,950
those code bases and remove all the if

00:29:48,610 --> 00:29:52,750
deaths that were in there for you know

00:29:50,950 --> 00:29:55,330
trying to work around previous behaviors

00:29:52,750 --> 00:29:56,920
of our MSB C compiler and make sure that

00:29:55,330 --> 00:29:58,870
they compile with permissive - so you'll

00:29:56,920 --> 00:30:00,580
see a lot of PRS may be coming well some

00:29:58,870 --> 00:30:02,530
PRS coming from our team we're doing our

00:30:00,580 --> 00:30:04,840
best to help up and the call to action

00:30:02,530 --> 00:30:05,800
really is please try permissive - please

00:30:04,840 --> 00:30:07,180
enabling and all our code ways

00:30:05,800 --> 00:30:08,320
especially if you're doing

00:30:07,180 --> 00:30:10,180
cross-platform development or even

00:30:08,320 --> 00:30:12,280
considering in the future to do

00:30:10,180 --> 00:30:15,220
cross-platform development and going

00:30:12,280 --> 00:30:16,630
back to Visual Studio 2017 we want you

00:30:15,220 --> 00:30:17,920
to be on that version because we're

00:30:16,630 --> 00:30:19,990
constantly constantly making

00:30:17,920 --> 00:30:21,580
improvements to the compiler tool chain

00:30:19,990 --> 00:30:23,460
in that release and every update comes

00:30:21,580 --> 00:30:25,960
in with more and more functionality

00:30:23,460 --> 00:30:29,440
Diagnostics the experimental external is

00:30:25,960 --> 00:30:31,030
a way for you to isolate your code from

00:30:29,440 --> 00:30:32,980
third-party libraries so if you want to

00:30:31,030 --> 00:30:34,570
have you know treat warnings as errors

00:30:32,980 --> 00:30:36,040
in your code base but you cannot because

00:30:34,570 --> 00:30:38,500
of a third-party library using two

00:30:36,040 --> 00:30:40,600
warnings you can now do that and you can

00:30:38,500 --> 00:30:43,570
isolate you can have a w-2 for you thank

00:30:40,600 --> 00:30:44,920
you but I'm gonna stick with my tweet

00:30:43,570 --> 00:30:49,300
warnings as errors in my own code base

00:30:44,920 --> 00:30:50,740
and speaking of code analysis we're

00:30:49,300 --> 00:30:52,600
constantly improving core checkers as

00:30:50,740 --> 00:30:53,950
well can I get a quick show of hands how

00:30:52,600 --> 00:30:58,380
many of you are using code analysis

00:30:53,950 --> 00:30:58,380
monthly and our Visual Studio product

00:30:59,090 --> 00:31:03,500
keep your hand up if you're using it

00:31:00,440 --> 00:31:06,800
weekly and keep your hand up if you're

00:31:03,500 --> 00:31:09,860
using it daily okay look around you you

00:31:06,800 --> 00:31:12,530
should be more like this people we have

00:31:09,860 --> 00:31:14,450
a demo for you coming up soon yes yes

00:31:12,530 --> 00:31:16,010
and and Steve will will show you more of

00:31:14,450 --> 00:31:18,320
how we're trying to make it easier for

00:31:16,010 --> 00:31:20,180
you to actually use the static analysis

00:31:18,320 --> 00:31:22,970
tools we're adding a lot of a lot more

00:31:20,180 --> 00:31:25,040
checkers every release and some of the

00:31:22,970 --> 00:31:26,450
quick updates some of the more recent

00:31:25,040 --> 00:31:29,540
updates we have in the lifetime

00:31:26,450 --> 00:31:30,980
management which ties in with the

00:31:29,540 --> 00:31:33,620
lifetime proposal that recently heard

00:31:30,980 --> 00:31:36,440
made our compiler tool team has support

00:31:33,620 --> 00:31:40,130
for that and if you're doing you know

00:31:36,440 --> 00:31:43,460
single threaded debugging don't attend

00:31:40,130 --> 00:31:47,290
Anna's talk because she's going to talk

00:31:43,460 --> 00:31:50,300
about how static analysis can catch

00:31:47,290 --> 00:31:52,040
racing conditions and deadlocks Anna is

00:31:50,300 --> 00:31:54,320
a resident expert and and the lead of

00:31:52,040 --> 00:31:56,390
the of the analyzer team so I definitely

00:31:54,320 --> 00:31:58,370
recommend that session and as well herb

00:31:56,390 --> 00:32:02,900
solder of course also if you wanna win

00:31:58,370 --> 00:32:04,670
an Xbox all right so we talked about

00:32:02,900 --> 00:32:07,370
performance and we talked about static

00:32:04,670 --> 00:32:10,460
analysis the big the big news in terms

00:32:07,370 --> 00:32:12,410
of runtime performance is that we're

00:32:10,460 --> 00:32:15,560
improving SSA optimizer in a liner

00:32:12,410 --> 00:32:17,210
improvement and that's a good reason for

00:32:15,560 --> 00:32:18,890
you to move to 2017 you're gonna get a

00:32:17,210 --> 00:32:20,690
runtime performance improvement and code

00:32:18,890 --> 00:32:22,760
size and when it comes to security there

00:32:20,690 --> 00:32:24,860
is one thing it could be a whole session

00:32:22,760 --> 00:32:27,550
on one hour what to do with security

00:32:24,860 --> 00:32:29,780
tools inside them is BC compiler but

00:32:27,550 --> 00:32:32,570
there's one thing takeaway is the

00:32:29,780 --> 00:32:34,280
runtime protection that the our compiler

00:32:32,570 --> 00:32:37,610
has so if you don't know what guard CF

00:32:34,280 --> 00:32:40,070
is and if you're not familiar with the

00:32:37,610 --> 00:32:42,230
Spector vulnerabilities and the the Q

00:32:40,070 --> 00:32:44,180
Spector switch that mitigates some of

00:32:42,230 --> 00:32:46,150
those please do go and check out that

00:32:44,180 --> 00:32:49,640
that URL

00:32:46,150 --> 00:32:51,320
alright so now we're gonna switch gears

00:32:49,640 --> 00:32:52,900
to talking about the visual studio inner

00:32:51,320 --> 00:32:55,400
loop and really what I mean by that is

00:32:52,900 --> 00:32:58,640
your developer inner loop by editing

00:32:55,400 --> 00:33:00,800
building writing tests then diagnosing

00:32:58,640 --> 00:33:02,240
them and the day right before leaving

00:33:00,800 --> 00:33:05,030
for vacation checking in everything in a

00:33:02,240 --> 00:33:06,590
source control and we're gonna talk

00:33:05,030 --> 00:33:07,940
about performance we're going to talk

00:33:06,590 --> 00:33:09,620
about bill throughput and then

00:33:07,940 --> 00:33:11,690
productivity when it comes to

00:33:09,620 --> 00:33:12,800
performance the job of Visual Studio the

00:33:11,690 --> 00:33:13,970
most important job

00:33:12,800 --> 00:33:16,370
whistles two days to get out of the way

00:33:13,970 --> 00:33:20,690
and that's what we've been working on in

00:33:16,370 --> 00:33:24,410
2017 we we improved the first time you

00:33:20,690 --> 00:33:26,210
load Visual Studio the bye bye or one

00:33:24,410 --> 00:33:27,890
order of magnitude but really what the

00:33:26,210 --> 00:33:29,150
most important thing that we did is the

00:33:27,890 --> 00:33:31,490
second time you load it so you're

00:33:29,150 --> 00:33:34,430
constantly loading up Visual Studio it

00:33:31,490 --> 00:33:37,100
will be as fast as 15 point 4x

00:33:34,430 --> 00:33:38,930
improvements in performance and this is

00:33:37,100 --> 00:33:41,360
also going to take a lot less memory

00:33:38,930 --> 00:33:43,610
once once the process is done and we

00:33:41,360 --> 00:33:45,470
could have stopped there right I mean 15

00:33:43,610 --> 00:33:48,320
point X is is a significant improvement

00:33:45,470 --> 00:33:51,050
but in 15.7 we want one step even

00:33:48,320 --> 00:33:55,240
further and for the second load

00:33:51,050 --> 00:33:58,640
we're actually 22 percent to 22 X

00:33:55,240 --> 00:33:59,690
improvements in terms of upload and I

00:33:58,640 --> 00:34:02,420
think you know where it is going we

00:33:59,690 --> 00:34:05,120
could have stopped there but we also

00:34:02,420 --> 00:34:07,130
improved in 15.8 the the cold load the

00:34:05,120 --> 00:34:09,470
first time you load it and now compared

00:34:07,130 --> 00:34:12,140
with 2015 we're actually a 2.5 X

00:34:09,470 --> 00:34:14,360
performance improvement and we really

00:34:12,140 --> 00:34:16,130
believe that Visual Studio 2017 is the

00:34:14,360 --> 00:34:19,399
fastest did was to do out there for C++

00:34:16,130 --> 00:34:21,620
development now the memory improvements

00:34:19,399 --> 00:34:23,990
we made they're not only tied to to the

00:34:21,620 --> 00:34:25,399
start of a session but also during

00:34:23,990 --> 00:34:28,040
debugging you get a lot less memory

00:34:25,399 --> 00:34:29,210
usage and there are a lot more areas of

00:34:28,040 --> 00:34:31,790
improvements but I'll call out only

00:34:29,210 --> 00:34:33,740
other two it's the final references and

00:34:31,790 --> 00:34:35,270
open folder intellisense population

00:34:33,740 --> 00:34:39,850
which also have seen major improvements

00:34:35,270 --> 00:34:42,560
and all of them are x-terms improvements

00:34:39,850 --> 00:34:44,230
switching gears and talking about build

00:34:42,560 --> 00:34:48,320
throughput we worked very closely with

00:34:44,230 --> 00:34:49,970
game engines and game authors in the

00:34:48,320 --> 00:34:51,919
industry to understand their build

00:34:49,970 --> 00:34:53,690
requirements and make sure that we can

00:34:51,919 --> 00:34:56,000
make changes to the compiler toolchain

00:34:53,690 --> 00:34:58,760
to improve build throughput for them and

00:34:56,000 --> 00:35:01,490
we're happy to report that we've seen

00:34:58,760 --> 00:35:05,060
between 14 and 16 percent improvement

00:35:01,490 --> 00:35:06,830
and a full build when you're moving from

00:35:05,060 --> 00:35:08,960
an older version to 2017

00:35:06,830 --> 00:35:10,670
but there was not really the focus of

00:35:08,960 --> 00:35:12,200
the work the focus of the work that we

00:35:10,670 --> 00:35:13,700
working with them was to improve the

00:35:12,200 --> 00:35:15,560
incremental build the thing that you do

00:35:13,700 --> 00:35:16,610
every day you change a file you build it

00:35:15,560 --> 00:35:18,590
and you can't wait to get to your

00:35:16,610 --> 00:35:20,930
breakpoint and we're happy to report

00:35:18,590 --> 00:35:23,030
that there we're actually seeing a 2x2

00:35:20,930 --> 00:35:25,020
4x improvement and the time it takes for

00:35:23,030 --> 00:35:27,810
for an incremental bill to finish

00:35:25,020 --> 00:35:30,270
and if you're familiar with our debug

00:35:27,810 --> 00:35:32,820
fast link support that we added in 2015

00:35:30,270 --> 00:35:35,099
compiler where you get a 4x improvement

00:35:32,820 --> 00:35:36,780
in the incremental build just by using

00:35:35,099 --> 00:35:39,330
the bugger fast link both of those

00:35:36,780 --> 00:35:41,520
numbers are with debug fast link on

00:35:39,330 --> 00:35:43,440
so this improvements 2 X - 4 X come on

00:35:41,520 --> 00:35:47,490
top of that 4x that we did the release

00:35:43,440 --> 00:35:48,690
before and now we're gonna do we're

00:35:47,490 --> 00:35:49,859
going to talk about productivity and

00:35:48,690 --> 00:35:52,920
there's no better way than through a

00:35:49,859 --> 00:35:55,050
demo so Steve alright bunch of more

00:35:52,920 --> 00:35:57,740
stuff to share with you folks oh I'm bad

00:35:55,050 --> 00:36:02,580
at this though uh where is it

00:35:57,740 --> 00:36:04,890
do-do-do-do-do ok so for this one we've

00:36:02,580 --> 00:36:06,780
got another one these big code bases

00:36:04,890 --> 00:36:08,010
this is openttd it's like that train

00:36:06,780 --> 00:36:09,930
game you like I can't remember what it's

00:36:08,010 --> 00:36:11,400
called but in any case meet Mary Ann

00:36:09,930 --> 00:36:12,450
I've been working on this bug we're

00:36:11,400 --> 00:36:14,460
trying to figure out there's this

00:36:12,450 --> 00:36:16,800
horrible horrible memory corruption kind

00:36:14,460 --> 00:36:18,150
of bug going on here and we've sort of

00:36:16,800 --> 00:36:19,380
narrowed it down to this function that's

00:36:18,150 --> 00:36:22,320
removing the rail station thing

00:36:19,380 --> 00:36:24,390
something about this function is bad and

00:36:22,320 --> 00:36:26,220
as I promised earlier more squiggles

00:36:24,390 --> 00:36:28,710
okay so we got a new color squiggle here

00:36:26,220 --> 00:36:30,990
that these green ones I hope your eye

00:36:28,710 --> 00:36:32,550
was drawn to that we were talking a

00:36:30,990 --> 00:36:34,980
little bit about how ashamed we are at

00:36:32,550 --> 00:36:37,890
how few if you use static analysis tools

00:36:34,980 --> 00:36:41,400
and so if I hover over this it tells us

00:36:37,890 --> 00:36:44,010
this is using a background code analysis

00:36:41,400 --> 00:36:46,080
run that is telling us if you get guys

00:36:44,010 --> 00:36:49,349
in the back can't read its index 63 is

00:36:46,080 --> 00:36:52,080
out of valid range 0 to 31 for buffer

00:36:49,349 --> 00:36:56,119
stood goods ok so what's going on here

00:36:52,080 --> 00:36:59,300
so if you come into the code analysis

00:36:56,119 --> 00:37:02,339
configuration you can

00:36:59,300 --> 00:37:04,050
oh I'm sorry in doing their own if we

00:37:02,339 --> 00:37:06,930
come in here to the project properties

00:37:04,050 --> 00:37:08,700
basically what happens is if you turn on

00:37:06,930 --> 00:37:11,790
this sweat the background analysis

00:37:08,700 --> 00:37:16,109
feature all of the code analysis rules

00:37:11,790 --> 00:37:18,960
that are set up for the really here in

00:37:16,109 --> 00:37:20,640
in this selector you can it will run

00:37:18,960 --> 00:37:22,170
these in the background so it's not

00:37:20,640 --> 00:37:23,580
going to like you know freeze across the

00:37:22,170 --> 00:37:25,980
UI watch me kick these off in the

00:37:23,580 --> 00:37:28,980
background and then bring those into the

00:37:25,980 --> 00:37:31,410
open files only and so as you see you

00:37:28,980 --> 00:37:33,270
have a lot of selections here if you we

00:37:31,410 --> 00:37:35,280
tried our best to get the defaults right

00:37:33,270 --> 00:37:37,339
of course but you know we've got a

00:37:35,280 --> 00:37:38,430
minimalist set there if you're just

00:37:37,339 --> 00:37:39,809
passionately

00:37:38,430 --> 00:37:42,480
going after one of the particular areas

00:37:39,809 --> 00:37:43,740
of CPP code checking we give you the

00:37:42,480 --> 00:37:44,910
opportunity go after that you can see we

00:37:43,740 --> 00:37:46,740
have our lifetime checkers in there

00:37:44,910 --> 00:37:48,300
again if you want to see herbes thing

00:37:46,740 --> 00:37:50,099
tomorrow that will be a very useful

00:37:48,300 --> 00:37:51,809
thing for you and so that allows us to

00:37:50,099 --> 00:37:53,790
go in there and get this sort of an

00:37:51,809 --> 00:37:59,940
experience so I'm gonna start working on

00:37:53,790 --> 00:38:01,920
trying to fix this so we got 64 so I'm

00:37:59,940 --> 00:38:03,480
guessing that's this loop bound right so

00:38:01,920 --> 00:38:06,329
I want to show it draw your attention to

00:38:03,480 --> 00:38:07,710
something new here so this is a really

00:38:06,329 --> 00:38:09,750
clever audience I'm sure you could have

00:38:07,710 --> 00:38:12,089
figured out what that macro expanded to

00:38:09,750 --> 00:38:13,710
right there you see what says expands to

00:38:12,089 --> 00:38:16,050
this is the new sort of macro expansion

00:38:13,710 --> 00:38:17,609
feature that we have but there's another

00:38:16,050 --> 00:38:18,900
macro a little bit further down where I

00:38:17,609 --> 00:38:21,390
think will really show this even better

00:38:18,900 --> 00:38:22,800
so as you see here on tile area loop is

00:38:21,390 --> 00:38:25,619
also in purple so that means it's a

00:38:22,800 --> 00:38:28,470
macro and as you can see not only do we

00:38:25,619 --> 00:38:30,119
pull in sort of the the the doc comments

00:38:28,470 --> 00:38:31,980
for that matter oh we're actually going

00:38:30,119 --> 00:38:33,750
to go ahead and expand it in line so you

00:38:31,980 --> 00:38:35,730
can see exactly what is going on here

00:38:33,750 --> 00:38:38,069
this is a really useful feature we want

00:38:35,730 --> 00:38:39,930
to make it so that you know the compiler

00:38:38,069 --> 00:38:41,309
knows all this stuff and and you don't

00:38:39,930 --> 00:38:43,470
have to go figure it out yourself we

00:38:41,309 --> 00:38:46,829
want to bring that straight up just like

00:38:43,470 --> 00:38:49,349
hover away okay so that's good so we

00:38:46,829 --> 00:38:52,650
know that the 64 is coming from here but

00:38:49,349 --> 00:38:56,160
I I just have this sort of ideological

00:38:52,650 --> 00:38:58,349
hatred of all things macro we're we're

00:38:56,160 --> 00:39:01,349
you know modules kind of people at

00:38:58,349 --> 00:39:02,640
Microsoft and oh look Visual Studio is

00:39:01,349 --> 00:39:05,069
trying to tell me something there's a

00:39:02,640 --> 00:39:06,900
light bulb here if I click on this light

00:39:05,069 --> 00:39:10,230
bulb you can see I have an option to

00:39:06,900 --> 00:39:11,700
convert this macro to Const exper so me

00:39:10,230 --> 00:39:13,619
go ahead let me do that it's gonna bring

00:39:11,700 --> 00:39:15,240
up preview changes so you can see

00:39:13,619 --> 00:39:17,640
exactly what we're about to you know

00:39:15,240 --> 00:39:20,130
unleash on your codebase you can see

00:39:17,640 --> 00:39:21,059
that of course in for this one here it's

00:39:20,130 --> 00:39:23,160
going to replace it with a constant

00:39:21,059 --> 00:39:24,540
expert of an auto and it's also going to

00:39:23,160 --> 00:39:25,950
show you all of the places that we've

00:39:24,540 --> 00:39:28,920
calculated will be affected by this

00:39:25,950 --> 00:39:30,089
right easy enough and again I'm guessing

00:39:28,920 --> 00:39:31,799
you probably could have figured out how

00:39:30,089 --> 00:39:33,809
to use you know find and replace again

00:39:31,799 --> 00:39:35,460
clever audience this one's a little bit

00:39:33,809 --> 00:39:39,270
more complicated though right here we

00:39:35,460 --> 00:39:41,280
have a function macro and and this one

00:39:39,270 --> 00:39:43,980
when I go on here and do convert macro

00:39:41,280 --> 00:39:45,450
to context per you can see that it's

00:39:43,980 --> 00:39:46,799
going to bring up something a little bit

00:39:45,450 --> 00:39:48,000
more complicated and I'm guessing I

00:39:46,799 --> 00:39:49,589
personally would have gotten this one

00:39:48,000 --> 00:39:52,079
wrong if I tried to convert it by myself

00:39:49,589 --> 00:39:53,940
and again we give you those that preview

00:39:52,079 --> 00:39:56,130
so that you can see all the different

00:39:53,940 --> 00:39:59,519
places where it's going to apply so that

00:39:56,130 --> 00:40:02,880
is that experience so our war on macros

00:39:59,519 --> 00:40:05,039
continues okay so we back to our buck we

00:40:02,880 --> 00:40:08,279
know we got the bounce we know we got 64

00:40:05,039 --> 00:40:10,469
I still don't know why that this this

00:40:08,279 --> 00:40:12,509
goods array is 32 if I come over here

00:40:10,469 --> 00:40:14,849
what does it tell me it tells me oh it's

00:40:12,509 --> 00:40:16,589
all unknown type great but the compiler

00:40:14,849 --> 00:40:17,880
knows something under the covers here so

00:40:16,589 --> 00:40:19,410
let's imagine I go through I do some

00:40:17,880 --> 00:40:21,479
find all referencing and I find out you

00:40:19,410 --> 00:40:23,999
know what's actually is every time this

00:40:21,479 --> 00:40:26,069
thing is used T is really a station so

00:40:23,999 --> 00:40:27,900
let's give intellisense just a little

00:40:26,069 --> 00:40:29,519
bit of a hint I'm gonna come up here I'm

00:40:27,900 --> 00:40:33,209
going to tell it what type I want it to

00:40:29,519 --> 00:40:36,869
instantiate ts and now when I click OK

00:40:33,209 --> 00:40:38,579
in the context of this template all of

00:40:36,869 --> 00:40:40,680
our intellisense will be as if it were

00:40:38,579 --> 00:40:42,809
that type so instant for instance the

00:40:40,680 --> 00:40:45,209
easy one if I hover over st station

00:40:42,809 --> 00:40:47,190
pointer great light right if I come over

00:40:45,209 --> 00:40:48,660
here to auto now instead of telling me

00:40:47,190 --> 00:40:51,239
unknown it will tell me actually the

00:40:48,660 --> 00:40:52,499
type of that type things and just like

00:40:51,239 --> 00:40:54,930
you would expect I can come in here and

00:40:52,499 --> 00:40:56,880
I can do st arrow and I'll get actual

00:40:54,930 --> 00:40:58,559
completion you've never had completion

00:40:56,880 --> 00:41:00,420
for these template functions before and

00:40:58,559 --> 00:41:02,339
think of all of those extra keystrokes

00:41:00,420 --> 00:41:03,359
you had to make so we're all about

00:41:02,339 --> 00:41:06,209
fixing that for you

00:41:03,359 --> 00:41:09,319
oops and and accidentally doing too much

00:41:06,209 --> 00:41:12,329
of it and then having to back it out

00:41:09,319 --> 00:41:18,239
station I'll get better at typing I

00:41:12,329 --> 00:41:21,239
promise okay so back to my buck now I

00:41:18,239 --> 00:41:24,180
can see that goods is goods entry

00:41:21,239 --> 00:41:26,069
station 32 so I'm going to pop down into

00:41:24,180 --> 00:41:28,680
that I'm gonna do a peak definition I'm

00:41:26,069 --> 00:41:31,529
going to see that actually this is of

00:41:28,680 --> 00:41:33,900
tight of size nome cargo so now yeah

00:41:31,529 --> 00:41:36,089
i'll live and let live with this macro

00:41:33,900 --> 00:41:38,910
come up here i'll replace this and in

00:41:36,089 --> 00:41:41,309
the background it will reanalyze that

00:41:38,910 --> 00:41:45,509
and and and eventually it will go away

00:41:41,309 --> 00:41:49,579
while it's working on that I am going to

00:41:45,509 --> 00:41:52,349
show you the next feature here which is

00:41:49,579 --> 00:41:54,809
we work really hard to make sure that

00:41:52,349 --> 00:41:58,469
our intellisense and our compiler are

00:41:54,809 --> 00:42:00,839
both in sync and and so for instance if

00:41:58,469 --> 00:42:03,119
you're a big fan of you know class type

00:42:00,839 --> 00:42:04,920
what argument deduction we still want to

00:42:03,119 --> 00:42:05,640
make sure much like we did with the

00:42:04,920 --> 00:42:07,680
macro stuff

00:42:05,640 --> 00:42:09,210
earlier that this is accurate then that

00:42:07,680 --> 00:42:10,500
we can tell you the answer so you don't

00:42:09,210 --> 00:42:12,510
have to know that it's not typed out

00:42:10,500 --> 00:42:13,799
there you still have access to the

00:42:12,510 --> 00:42:15,299
information about what those types are

00:42:13,799 --> 00:42:17,549
so you can see here it tells you the

00:42:15,299 --> 00:42:20,099
types of the pair's so that is a nice

00:42:17,549 --> 00:42:22,859
little little little gimme in here okay

00:42:20,099 --> 00:42:24,539
here's another one I'm not I don't like

00:42:22,859 --> 00:42:26,190
using namespace all that much so I'm

00:42:24,539 --> 00:42:28,230
gonna go ahead and I'm gonna try to

00:42:26,190 --> 00:42:30,599
improve this code I'm gonna take the

00:42:28,230 --> 00:42:32,250
using namespace out but now I can go in

00:42:30,599 --> 00:42:33,839
here and type stood colon colon a bunch

00:42:32,250 --> 00:42:35,609
of times what I'm gonna show you instead

00:42:33,839 --> 00:42:38,160
is what's new is called multi caret

00:42:35,609 --> 00:42:39,180
editing inside a visual studio so you're

00:42:38,160 --> 00:42:40,680
gonna have to trust me on this because

00:42:39,180 --> 00:42:43,230
you won't be able to see it I go like

00:42:40,680 --> 00:42:47,299
this and my fingers a ctrl alt I'm gonna

00:42:43,230 --> 00:42:54,960
hold down ctrl alt and I'm gonna click 1

00:42:47,299 --> 00:42:59,339
2 3 4 5 6 & 7

00:42:54,960 --> 00:43:02,450
and now when I type STD Cohen Cohen they

00:42:59,339 --> 00:43:05,579
all get fixed and the red goes away I

00:43:02,450 --> 00:43:08,279
never ever guess which ones are gonna be

00:43:05,579 --> 00:43:09,799
the most excited okay thank you I like

00:43:08,279 --> 00:43:13,440
it too it's good

00:43:09,799 --> 00:43:14,910
alright so oh hey look the background

00:43:13,440 --> 00:43:16,470
analysis completed and the bug is gone

00:43:14,910 --> 00:43:20,400
and the corruption is saved hooray

00:43:16,470 --> 00:43:21,960
alright next up I think the debugger is

00:43:20,400 --> 00:43:24,029
a Productivity tool why do I think that

00:43:21,960 --> 00:43:26,400
I think that because I think it is very

00:43:24,029 --> 00:43:27,900
true that you know like we write code in

00:43:26,400 --> 00:43:29,369
the morning we tell people we write code

00:43:27,900 --> 00:43:30,779
but we write code in the morning but

00:43:29,369 --> 00:43:32,099
then we spend the rest of the day trying

00:43:30,779 --> 00:43:35,609
to figure out why it doesn't work right

00:43:32,099 --> 00:43:38,700
all right oh yeah the laughter of

00:43:35,609 --> 00:43:40,259
recognition so let me start let me start

00:43:38,700 --> 00:43:42,420
debugging here first of all I hit f10

00:43:40,259 --> 00:43:44,039
there by the way this is a thing not too

00:43:42,420 --> 00:43:46,470
everyone knows you can start at the at

00:43:44,039 --> 00:43:48,539
the entry point if you hit f10 so I'm

00:43:46,470 --> 00:43:52,339
gonna go I'm gonna do some stepping I'm

00:43:48,539 --> 00:43:55,259
gonna just you know get pip ah

00:43:52,339 --> 00:43:58,470
again I screwed up another demo so I

00:43:55,259 --> 00:44:00,750
step too far folks so that this feature

00:43:58,470 --> 00:44:03,569
that I'm about to show you is really

00:44:00,750 --> 00:44:05,700
after my heart here so you may have

00:44:03,569 --> 00:44:08,190
noticed up here in the toolbar that

00:44:05,700 --> 00:44:10,470
there is a funny-looking arrow in there

00:44:08,190 --> 00:44:14,190
that didn't used to be there this is the

00:44:10,470 --> 00:44:15,329
step backwards button and so I will draw

00:44:14,190 --> 00:44:18,900
your attention to the fact that when I

00:44:15,329 --> 00:44:20,190
push it I am now in historical debugging

00:44:18,900 --> 00:44:23,070
mode

00:44:20,190 --> 00:44:24,540
so what just happened so that's great

00:44:23,070 --> 00:44:26,490
Steve you guys like recorded everything

00:44:24,540 --> 00:44:27,900
going on in the UI so when I push that

00:44:26,490 --> 00:44:30,420
button I can replay what happened in the

00:44:27,900 --> 00:44:32,970
UI right now no no no this is way cooler

00:44:30,420 --> 00:44:34,380
than this this is using a facility

00:44:32,970 --> 00:44:36,930
inside the operating system called

00:44:34,380 --> 00:44:37,860
process snapshots and so what it's doing

00:44:36,930 --> 00:44:40,860
is it's taking these like lightweight

00:44:37,860 --> 00:44:43,140
copy-on-write page kind of fancy way of

00:44:40,860 --> 00:44:44,940
doing super high performance snapshots

00:44:43,140 --> 00:44:46,080
of these processes so there's like if

00:44:44,940 --> 00:44:47,160
you go into the task manager right now

00:44:46,080 --> 00:44:48,630
you'll see there's actually a bunch of

00:44:47,160 --> 00:44:50,460
them sitting around there and we'll

00:44:48,630 --> 00:44:52,080
manage many of these like you can store

00:44:50,460 --> 00:44:54,870
like I think a hundred steps if I

00:44:52,080 --> 00:44:57,990
remember correctly and you can do things

00:44:54,870 --> 00:45:00,840
like and come back here get that set up

00:44:57,990 --> 00:45:02,880
better and so you know you can do stuff

00:45:00,840 --> 00:45:05,730
like I've got dust dirt in there right

00:45:02,880 --> 00:45:07,410
in the watch window and now I can if I

00:45:05,730 --> 00:45:09,630
learn how to type back yeah I can't use

00:45:07,410 --> 00:45:11,010
a mouse either man all right and now you

00:45:09,630 --> 00:45:12,720
can see that I you can kind of go back

00:45:11,010 --> 00:45:16,260
and forth through the steps to see when

00:45:12,720 --> 00:45:17,550
its value changes so just to make sure

00:45:16,260 --> 00:45:19,770
that you really want to land this

00:45:17,550 --> 00:45:21,480
process snapshots thing so I'm gonna go

00:45:19,770 --> 00:45:23,910
back here I'm gonna set this thing I'm

00:45:21,480 --> 00:45:27,360
gonna hover over MgO here right so I

00:45:23,910 --> 00:45:29,730
have the whole heap I can see exactly I

00:45:27,360 --> 00:45:32,040
can go you know n layers down inside of

00:45:29,730 --> 00:45:34,050
this data structure you can go into the

00:45:32,040 --> 00:45:36,240
memory window and see what's going on at

00:45:34,050 --> 00:45:37,440
that point in your thing and then you

00:45:36,240 --> 00:45:40,260
know run it forward again and and

00:45:37,440 --> 00:45:41,430
continue on with your day so this is

00:45:40,260 --> 00:45:43,050
step back we're really excited about

00:45:41,430 --> 00:45:44,880
this there's a long blog post that was

00:45:43,050 --> 00:45:47,130
published today it goes into a little

00:45:44,880 --> 00:45:48,360
bit more detail on this but we've been

00:45:47,130 --> 00:45:49,890
asked for this feature for years and I'm

00:45:48,360 --> 00:45:52,290
really excited to be able to finally

00:45:49,890 --> 00:45:53,190
demonstrate it for you folks I'm gonna

00:45:52,290 --> 00:45:58,110
show you another way to solve that

00:45:53,190 --> 00:46:01,020
problem this one is is also one of these

00:45:58,110 --> 00:46:03,990
less less known features of the visual

00:46:01,020 --> 00:46:05,550
studio debugger is we've actually

00:46:03,990 --> 00:46:08,490
supported native data breakpoints for

00:46:05,550 --> 00:46:09,240
for a while but no uses them even though

00:46:08,490 --> 00:46:11,100
they're amazing

00:46:09,240 --> 00:46:13,200
so again the problem I'm looking at

00:46:11,100 --> 00:46:16,320
right now is what changed that value of

00:46:13,200 --> 00:46:18,300
that dester thing and so I showed you

00:46:16,320 --> 00:46:19,290
you could kind of do it with with the

00:46:18,300 --> 00:46:21,450
step backwards thing which is pretty

00:46:19,290 --> 00:46:22,920
awesome but you can also do this you can

00:46:21,450 --> 00:46:25,440
do dester you can right click on here

00:46:22,920 --> 00:46:29,940
and you can select break when this value

00:46:25,440 --> 00:46:31,530
changes oh yeah all right and now and

00:46:29,940 --> 00:46:32,859
this by the way I should said this a

00:46:31,530 --> 00:46:35,799
long time ago this is

00:46:32,859 --> 00:46:37,569
18.9 right this isn't like some far

00:46:35,799 --> 00:46:40,450
future version of Visual Studio this one

00:46:37,569 --> 00:46:42,670
will ship soon so now when I go when I

00:46:40,450 --> 00:46:44,499
hit f5 it jumps to the first place which

00:46:42,670 --> 00:46:46,900
is where dust dirt gets set to null and

00:46:44,499 --> 00:46:48,549
now if I hit up five again it's going to

00:46:46,900 --> 00:46:50,079
take me to the last the next line where

00:46:48,549 --> 00:46:52,210
that value dot change which is right

00:46:50,079 --> 00:46:53,650
here where it gets set the sorcerer so

00:46:52,210 --> 00:46:58,299
that's data break points they are

00:46:53,650 --> 00:47:01,269
awesome alright and I have one more as I

00:46:58,299 --> 00:47:03,190
mentioned before I can never quite know

00:47:01,269 --> 00:47:06,700
which of these demos is the one that's

00:47:03,190 --> 00:47:08,440
gonna that's going to land and I hope I

00:47:06,700 --> 00:47:12,999
actually reset this properly because it

00:47:08,440 --> 00:47:14,980
would be a shame so last year for those

00:47:12,999 --> 00:47:17,319
of you who are here I I don't know what

00:47:14,980 --> 00:47:18,359
your opinion is but I felt like Hello

00:47:17,319 --> 00:47:23,890
mhm

00:47:18,359 --> 00:47:27,999
mr. debug let me set a breakpoint there

00:47:23,890 --> 00:47:29,380
we go I did this demo where we showed

00:47:27,999 --> 00:47:30,640
off this feature that people been asking

00:47:29,380 --> 00:47:32,890
us for all this sounds like man what I'm

00:47:30,640 --> 00:47:35,470
using stood function and I have to like

00:47:32,890 --> 00:47:37,749
step through it you know like you have

00:47:35,470 --> 00:47:39,009
to go like 21 steps deep before you

00:47:37,749 --> 00:47:42,910
actually reach the thing that stood

00:47:39,009 --> 00:47:44,920
function is rapping and so Stefan in his

00:47:42,910 --> 00:47:47,079
and the rest of our libraries guys went

00:47:44,920 --> 00:47:48,069
through and they added these like I'll

00:47:47,079 --> 00:47:49,450
be honest with you man it was like it

00:47:48,069 --> 00:47:51,039
was like I agree just hacked but it

00:47:49,450 --> 00:47:53,109
worked it made it so that we can come up

00:47:51,039 --> 00:47:54,670
on stage and show you stepping one thing

00:47:53,109 --> 00:47:56,529
through stood function and it was like

00:47:54,670 --> 00:47:58,089
every cycle ah that's amazing and then

00:47:56,529 --> 00:47:59,200
you know I stood in the booth afterwards

00:47:58,089 --> 00:48:00,400
as I'll encourage you to come do that

00:47:59,200 --> 00:48:02,019
this year and tell me the same sort of

00:48:00,400 --> 00:48:04,029
stuff about these demos ugh you know

00:48:02,019 --> 00:48:05,499
like yeah but but but but what about

00:48:04,029 --> 00:48:07,119
this function I want to step through

00:48:05,499 --> 00:48:08,829
this function and and Steve what about

00:48:07,119 --> 00:48:10,829
my own code I want to be able to do that

00:48:08,829 --> 00:48:17,019
and so you know we listen to you people

00:48:10,829 --> 00:48:18,670
and and so oops hold on second push the

00:48:17,019 --> 00:48:21,190
wrong button again something wrong with

00:48:18,670 --> 00:48:24,460
my keyboard that's gonna be a problem so

00:48:21,190 --> 00:48:26,289
let's do step into what happens oh all

00:48:24,460 --> 00:48:28,809
right yeah so Stefan hasn't a light

00:48:26,289 --> 00:48:31,029
enlightened this one with the stuff but

00:48:28,809 --> 00:48:32,049
if you come in here and I'm cheating a

00:48:31,029 --> 00:48:33,549
little bit because I wanted to show you

00:48:32,049 --> 00:48:38,230
the before of having to step through

00:48:33,549 --> 00:48:40,869
horribleness by default in 15.9 we now

00:48:38,230 --> 00:48:43,420
have the just my code experience ready

00:48:40,869 --> 00:48:46,089
for C++ so if I go back here I'm gonna

00:48:43,420 --> 00:48:46,780
do that demo one more time oh the

00:48:46,089 --> 00:48:49,840
function key came

00:48:46,780 --> 00:48:53,640
there we go I figured it out uh alright

00:48:49,840 --> 00:48:57,430
here we are you know I'm gonna f11 Tata

00:48:53,640 --> 00:49:02,560
right into the lambda you didn't have to

00:48:57,430 --> 00:49:03,880
set a breakpoint yeah oh yeah I love ya

00:49:02,560 --> 00:49:06,310
and then you can step back and stuff

00:49:03,880 --> 00:49:07,599
it's amazing alright alright so so

00:49:06,310 --> 00:49:10,810
that's our productivity demos for this

00:49:07,599 --> 00:49:12,430
now this is CPP con though CPP con my

00:49:10,810 --> 00:49:15,930
favorite conference this is the best

00:49:12,430 --> 00:49:18,730
people and so we're gonna do something

00:49:15,930 --> 00:49:21,880
outside of the 15.9 zone I want to show

00:49:18,730 --> 00:49:23,349
you some like very early demo bits

00:49:21,880 --> 00:49:26,080
please forgive me if this doesn't work

00:49:23,349 --> 00:49:27,490
of what the next version of Visual

00:49:26,080 --> 00:49:30,640
Studio is what are we supposed to call

00:49:27,490 --> 00:49:31,869
it 20,000 19 2019 so see if you can

00:49:30,640 --> 00:49:33,690
figure out when it will ship it'll be a

00:49:31,869 --> 00:49:38,890
fun game for ya but I now stated ditch

00:49:33,690 --> 00:49:40,150
alright alright so this is a this very

00:49:38,890 --> 00:49:41,500
early preview but I really want to talk

00:49:40,150 --> 00:49:44,530
about this I think it's cool

00:49:41,500 --> 00:49:48,820
intel code is this extension that ships

00:49:44,530 --> 00:49:49,930
for Visual Studio 2017 in some of the

00:49:48,820 --> 00:49:52,780
other languages that we won't mention

00:49:49,930 --> 00:49:55,420
here and what the idea behind this is is

00:49:52,780 --> 00:49:58,599
AI assistance to your developer

00:49:55,420 --> 00:50:01,480
experience right so like for instance if

00:49:58,599 --> 00:50:02,890
I come in here and you know I you guys

00:50:01,480 --> 00:50:05,170
would know it like if I try to use the

00:50:02,890 --> 00:50:06,430
stir list right it's gonna give me a

00:50:05,170 --> 00:50:07,690
long long list of all the possible

00:50:06,430 --> 00:50:10,450
things that I could call against that

00:50:07,690 --> 00:50:13,119
and as I type more you'll get there but

00:50:10,450 --> 00:50:14,740
what the insight that the team had was

00:50:13,119 --> 00:50:16,630
that you know like there are patterns

00:50:14,740 --> 00:50:18,910
right and we could probably go find

00:50:16,630 --> 00:50:22,270
those patterns by doing a bunch of

00:50:18,910 --> 00:50:24,550
training on on code and so we have you

00:50:22,270 --> 00:50:26,410
know you know github crawlers and stuff

00:50:24,550 --> 00:50:27,880
like that large code bases that we've

00:50:26,410 --> 00:50:30,490
been going and trying to train our

00:50:27,880 --> 00:50:33,040
intellisense suggestions based on so by

00:50:30,490 --> 00:50:34,420
the time we ship this thing we'll be

00:50:33,040 --> 00:50:38,200
able to do things like come in here and

00:50:34,420 --> 00:50:40,780
say if dot and and see these stars right

00:50:38,200 --> 00:50:42,670
like if I once I wanted size here right

00:50:40,780 --> 00:50:44,230
if I wanted size that you know yeah

00:50:42,670 --> 00:50:46,240
obviously I could have typed it fast

00:50:44,230 --> 00:50:47,980
but it's not even just about getting

00:50:46,240 --> 00:50:52,300
those those those number of clicks down

00:50:47,980 --> 00:50:53,800
or typings down teeth what it is is

00:50:52,300 --> 00:50:56,200
about helping you kind of understand Oh

00:50:53,800 --> 00:50:57,849
next this this API usually gets called

00:50:56,200 --> 00:50:59,320
next and this API gets called next door

00:50:57,849 --> 00:51:00,520
you know this one gets called an if

00:50:59,320 --> 00:51:01,090
statement but this one gets called in

00:51:00,520 --> 00:51:02,470
there

00:51:01,090 --> 00:51:03,490
but you know it actually works out

00:51:02,470 --> 00:51:05,410
really nice so we're really excited

00:51:03,490 --> 00:51:06,790
about this approach and and look forward

00:51:05,410 --> 00:51:09,670
to bringing you the completed version in

00:51:06,790 --> 00:51:11,440
the future thing but I want to stick

00:51:09,670 --> 00:51:14,620
with this idea of collaboration because

00:51:11,440 --> 00:51:17,980
I you know development isn't as solitary

00:51:14,620 --> 00:51:19,810
of an activity as it once was so I want

00:51:17,980 --> 00:51:23,050
to share some collaboration stuff with

00:51:19,810 --> 00:51:26,680
ya folks today so here I am again and I

00:51:23,050 --> 00:51:28,510
got another bug I want to solve and in

00:51:26,680 --> 00:51:30,730
this particular case we're all gonna

00:51:28,510 --> 00:51:32,590
have to use our imagination I only have

00:51:30,730 --> 00:51:33,640
this one machine so you guys are gonna

00:51:32,590 --> 00:51:34,990
have to bear with me and we're gonna

00:51:33,640 --> 00:51:36,250
have to use our imagination a little bit

00:51:34,990 --> 00:51:38,350
because I'm gonna be two different

00:51:36,250 --> 00:51:39,670
people in there I'm gonna spare you like

00:51:38,350 --> 00:51:42,160
an acting thing where I do like an

00:51:39,670 --> 00:51:43,810
accent for one of them so as long as you

00:51:42,160 --> 00:51:47,740
promise you use your imagination all

00:51:43,810 --> 00:51:49,720
right so I need hello I need help so I'm

00:51:47,740 --> 00:51:52,210
going to click this share button and

00:51:49,720 --> 00:51:54,850
this is going to be a demonstration of

00:51:52,210 --> 00:51:57,280
Visual Studio Live cher working with C++

00:51:54,850 --> 00:51:59,110
so as you can see I now have an

00:51:57,280 --> 00:52:01,150
invitation link that has been copied to

00:51:59,110 --> 00:52:02,710
my clipboard I can send it to anyone you

00:52:01,150 --> 00:52:04,510
trust right so it's sitting in my

00:52:02,710 --> 00:52:07,330
clipboard I can go in the you know

00:52:04,510 --> 00:52:09,760
company slack channel I can I am you can

00:52:07,330 --> 00:52:11,920
print it out you know attach it to a

00:52:09,760 --> 00:52:14,200
passenger pigeon and send it out like

00:52:11,920 --> 00:52:16,150
whatever you want to do and so now what

00:52:14,200 --> 00:52:18,340
I'm going to do and I hinted that BS

00:52:16,150 --> 00:52:21,460
code might make an appearance later is

00:52:18,340 --> 00:52:24,510
bring v/s code up here so now hat off

00:52:21,460 --> 00:52:27,610
hat on I am going to go and help myself

00:52:24,510 --> 00:52:29,740
as the vs code person the beauty of live

00:52:27,610 --> 00:52:31,660
cher is it actually doesn't care like

00:52:29,740 --> 00:52:33,430
you can use two vs a--'s if the people

00:52:31,660 --> 00:52:35,680
are there but this BS code that I have

00:52:33,430 --> 00:52:37,150
installed it doesn't even have the C++

00:52:35,680 --> 00:52:39,160
extension installed don't get me wrong

00:52:37,150 --> 00:52:41,290
you should install the C++ extension but

00:52:39,160 --> 00:52:43,210
it doesn't require it it's not a

00:52:41,290 --> 00:52:44,800
prerequisite so IV all it has is the

00:52:43,210 --> 00:52:46,420
live share extension installed so I'm

00:52:44,800 --> 00:52:48,730
going to come into BS code I'm going to

00:52:46,420 --> 00:52:50,530
select this I'm gonna join collaboration

00:52:48,730 --> 00:52:52,300
session this is that link that we were

00:52:50,530 --> 00:52:53,860
talking about earlier it really is

00:52:52,300 --> 00:52:56,110
actually going up and around so if it's

00:52:53,860 --> 00:52:57,940
slow please forgive me and now I'm

00:52:56,110 --> 00:52:59,140
joining a collaboration session let me

00:52:57,940 --> 00:53:01,630
tell you a little bit about what it's

00:52:59,140 --> 00:53:03,910
doing right now is it sort of kit nine

00:53:01,630 --> 00:53:05,800
thousands back and forth up there what

00:53:03,910 --> 00:53:09,280
what's happening here is not a large

00:53:05,800 --> 00:53:10,600
sink of this very large source base it's

00:53:09,280 --> 00:53:12,190
just pulling down enough of a workspace

00:53:10,600 --> 00:53:14,050
that it can do its magic what's

00:53:12,190 --> 00:53:15,050
happening here is me the helper is

00:53:14,050 --> 00:53:17,030
getting a

00:53:15,050 --> 00:53:19,520
we don't like a no not a read-only view

00:53:17,030 --> 00:53:21,350
a view of what's going on inside the IDE

00:53:19,520 --> 00:53:23,990
but if they actually fully enlightened

00:53:21,350 --> 00:53:27,230
one so the first thing I want to do is

00:53:23,990 --> 00:53:31,400
so I am going to go and try to help the

00:53:27,230 --> 00:53:35,840
poor person using vs improve the the the

00:53:31,400 --> 00:53:37,070
this is the map to the gravity of the

00:53:35,840 --> 00:53:43,010
blocks that are falling in this I guess

00:53:37,070 --> 00:53:45,230
I should have shown that so like when

00:53:43,010 --> 00:53:46,850
this runs what we'll see and also just

00:53:45,230 --> 00:53:47,960
to just to spoil alert a little bit here

00:53:46,850 --> 00:53:50,620
you can see that the build is actually

00:53:47,960 --> 00:53:54,050
being mirrored over unto the other side

00:53:50,620 --> 00:53:56,240
right so so I got basically a viewer so

00:53:54,050 --> 00:53:58,970
this is way better than just you know

00:53:56,240 --> 00:54:01,010
type try this try that right you you can

00:53:58,970 --> 00:54:04,340
actually see what's going on inside

00:54:01,010 --> 00:54:06,440
and so these blocks are gonna fall and

00:54:04,340 --> 00:54:08,690
the the thing I'm gonna try to help the

00:54:06,440 --> 00:54:10,700
person with is to make the blocks fall

00:54:08,690 --> 00:54:12,800
more like they fall on the moon so we're

00:54:10,700 --> 00:54:14,480
gonna change the gravity of this so I'm

00:54:12,800 --> 00:54:18,020
more of an expert than this person and

00:54:14,480 --> 00:54:20,510
so I know that this is a pretty well

00:54:18,020 --> 00:54:22,100
used area of the code it's all of these

00:54:20,510 --> 00:54:23,990
things go through here it's where the

00:54:22,100 --> 00:54:25,610
dynamic world gets set up so I'm gonna

00:54:23,990 --> 00:54:29,000
come in here and I'm gonna do a little

00:54:25,610 --> 00:54:32,300
typing and as you can see I get full

00:54:29,000 --> 00:54:36,920
intellisense just as a fat if you watch

00:54:32,300 --> 00:54:39,080
over here inside the other side when I

00:54:36,920 --> 00:54:40,550
go over here I can if I wanted like what

00:54:39,080 --> 00:54:42,740
is this guy doing to my source code I

00:54:40,550 --> 00:54:45,380
can click this and I can actually follow

00:54:42,740 --> 00:54:48,860
along like as as the person makes

00:54:45,380 --> 00:54:51,100
modification so you can see me again not

00:54:48,860 --> 00:54:53,690
the best resolution for this problem but

00:54:51,100 --> 00:54:55,400
you can see I'm getting all of this

00:54:53,690 --> 00:54:58,160
intellisense data is being piped through

00:54:55,400 --> 00:55:00,340
the internet over to my even though I

00:54:58,160 --> 00:55:02,300
don't have any of these files locally

00:55:00,340 --> 00:55:05,660
I'm gonna go in here I'm gonna do

00:55:02,300 --> 00:55:07,370
negative 1.62 because I am an expert in

00:55:05,660 --> 00:55:08,930
knowing exactly how many meters per

00:55:07,370 --> 00:55:11,420
second per second gravity is on the moon

00:55:08,930 --> 00:55:13,640
you see I get I get squiggles

00:55:11,420 --> 00:55:16,130
everything's about squiggles here when I

00:55:13,640 --> 00:55:18,320
hover over this it will pull over and

00:55:16,130 --> 00:55:22,310
remind me that actually no that takes a

00:55:18,320 --> 00:55:28,480
vector so I can come in here I can do BT

00:55:22,310 --> 00:55:28,480
vector 3 and spell it right

00:55:28,490 --> 00:55:32,030
zero I think gravity should go down are

00:55:31,250 --> 00:55:35,440
we okay

00:55:32,030 --> 00:55:38,270
yeah now one point six two comma zero

00:55:35,440 --> 00:55:41,090
okay now I can kick off that build again

00:55:38,270 --> 00:55:44,090
and now when this person runs that I get

00:55:41,090 --> 00:55:45,800
I get that I get the build information

00:55:44,090 --> 00:55:50,030
over there hopefully to relatively

00:55:45,800 --> 00:55:52,550
quickly and so these are the benefits of

00:55:50,030 --> 00:55:54,020
collaborative editing but actually

00:55:52,550 --> 00:55:56,990
editing isn't the only thing that you

00:55:54,020 --> 00:56:00,130
can do with this come on finish the bill

00:55:56,990 --> 00:56:00,130
finish the bill finish the bill

00:56:00,160 --> 00:56:04,810
that's good you can you can you can

00:56:02,240 --> 00:56:12,020
watch it slowly slowly scroll across

00:56:04,810 --> 00:56:14,000
we're almost there yeah yeah well I'm

00:56:12,020 --> 00:56:15,710
running like 17 instances of Visual

00:56:14,000 --> 00:56:17,300
Studio we have significantly improved

00:56:15,710 --> 00:56:23,300
the performance on it but you know you

00:56:17,300 --> 00:56:26,690
got to have yeah be reasonable how many

00:56:23,300 --> 00:56:29,540
of what are available the only thing I

00:56:26,690 --> 00:56:31,310
showed that is not in everything is step

00:56:29,540 --> 00:56:33,200
back so we got our nice little moon

00:56:31,310 --> 00:56:35,590
gravity going on so I just want to show

00:56:33,200 --> 00:56:42,050
one more thing really quickly which is

00:56:35,590 --> 00:56:49,100
also the ability to do to do to do to do

00:56:42,050 --> 00:56:52,130
debugging and you can see that even over

00:56:49,100 --> 00:56:57,020
here in BS code when I hit the debugger

00:56:52,130 --> 00:56:58,550
I can also keep up with what this person

00:56:57,020 --> 00:57:00,650
is doing I can actually go in here and

00:56:58,550 --> 00:57:04,070
see where they are and that will bring

00:57:00,650 --> 00:57:06,020
me to that and I have full mirroring of

00:57:04,070 --> 00:57:07,700
the debugger experience so I can go in

00:57:06,020 --> 00:57:09,470
here and I can even inspect all of the

00:57:07,700 --> 00:57:11,359
variables so it's collaborative editing

00:57:09,470 --> 00:57:13,220
it's collaborative debugging all of it

00:57:11,359 --> 00:57:14,359
together is what live share is all about

00:57:13,220 --> 00:57:15,500
and we're excited to bring this to you

00:57:14,359 --> 00:57:17,960
in the next version of Visual Studio

00:57:15,500 --> 00:57:23,750
back to Marion thank you Steve

00:57:17,960 --> 00:57:26,340
[Applause]

00:57:23,750 --> 00:57:28,410
all right so talking really briefly

00:57:26,340 --> 00:57:29,820
about Psalm 19 I don't think there's any

00:57:28,410 --> 00:57:31,650
surprise that we're gonna be focusing on

00:57:29,820 --> 00:57:34,590
productivity for individuals and for

00:57:31,650 --> 00:57:38,670
teams but also we're gonna apply all the

00:57:34,590 --> 00:57:40,890
lessons we learned from 2017 for helping

00:57:38,670 --> 00:57:43,200
upgrades so we're gonna make it even

00:57:40,890 --> 00:57:46,410
better in 2019 for you to move to the

00:57:43,200 --> 00:57:47,850
latest version but none of it it's

00:57:46,410 --> 00:57:50,370
really possible without your feedback so

00:57:47,850 --> 00:57:52,110
we're still working on 2019 we just

00:57:50,370 --> 00:57:54,180
started you've seen some amazing demos

00:57:52,110 --> 00:57:55,980
but the planning process is ongoing so

00:57:54,180 --> 00:57:57,900
we need your feedback to incorporate and

00:57:55,980 --> 00:58:00,570
make sure that 2019 becomes the visual

00:57:57,900 --> 00:58:02,310
studio that you need and if you're

00:58:00,570 --> 00:58:04,680
curious where you should be providing

00:58:02,310 --> 00:58:06,300
that feedback we have user voice

00:58:04,680 --> 00:58:09,090
channels where you can provide your

00:58:06,300 --> 00:58:11,010
suggestions and directly inside the IDE

00:58:09,090 --> 00:58:13,230
you can report problems or go to

00:58:11,010 --> 00:58:15,210
developers community to report it we do

00:58:13,230 --> 00:58:17,670
spend a lot of time looking at this and

00:58:15,210 --> 00:58:21,270
and incorporating in our planning so

00:58:17,670 --> 00:58:23,910
just to show you kind of the statistics

00:58:21,270 --> 00:58:28,440
the numbers since we started 2017 we

00:58:23,910 --> 00:58:31,620
have 3,800 votes on completed user

00:58:28,440 --> 00:58:33,240
voices and 3,000 fixed bugs and only

00:58:31,620 --> 00:58:35,940
since last year that number has grown a

00:58:33,240 --> 00:58:39,240
lot so thank you very much for making

00:58:35,940 --> 00:58:41,010
visuals 2017 be what it is with it with

00:58:39,240 --> 00:58:45,570
the issues that you reported and we look

00:58:41,010 --> 00:58:47,190
forward to your feedback for 2019 so

00:58:45,570 --> 00:58:48,690
these are the things we cover today and

00:58:47,190 --> 00:58:50,520
again the most important thing that we

00:58:48,690 --> 00:58:51,630
keep listening and we keep incorporating

00:58:50,520 --> 00:58:54,930
your feedback so please keep that

00:58:51,630 --> 00:58:58,710
feedback coming yes stretch now again

00:58:54,930 --> 00:59:00,480
foresight oh oh oh thank you nailed it

00:58:58,710 --> 00:59:02,560
yes flashing

00:59:00,480 --> 00:59:03,580
[Applause]

00:59:02,560 --> 00:59:07,010
[Laughter]

00:59:03,580 --> 00:59:07,010
[Applause]

00:59:07,589 --> 00:59:11,769
this is the full list of the of the

00:59:09,940 --> 00:59:14,319
session I kind of showed throughout the

00:59:11,769 --> 00:59:16,299
deck you want to take a picture and we

00:59:14,319 --> 00:59:17,950
want to be respectful of whoever's next

00:59:16,299 --> 00:59:21,749
because it's wrong but do you guys want

00:59:17,950 --> 00:59:29,079
to ask questions I will take him yep

00:59:21,749 --> 00:59:32,049
microphones from do you want to get off

00:59:29,079 --> 00:59:35,979
them yeah so is the life helper

00:59:32,049 --> 00:59:38,799
available in 59 or no so of everything I

00:59:35,979 --> 00:59:42,880
showed those last two demos those are

00:59:38,799 --> 00:59:45,789
all dub next okay and every other thing

00:59:42,880 --> 00:59:49,259
was 15.9 okay which is in preview right

00:59:45,789 --> 00:59:49,259

YouTube URL: https://www.youtube.com/watch?v=6NAAuxWNhk4


