Title: CppCon 2018: Kate Gregory “Simplicity: Not Just For Beginners”
Publication date: 2018-09-27
Playlist: CppCon 2018
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018
—
Many people say that simple code is better code, but fewer put it into practice. In this talk I’ll spend a little time on why simpler is better, and why we resist simplicity. Then I’ll provide some specific approaches that are likely to make your code simpler, and discuss what you need to know and do in order to consistently write simpler code and reap the benefits of that simplicity.
— 
Kate Gregory
Gregory Consulting, Partner

Kate Gregory has been using C++ since before Microsoft had a C++ compiler. She writes, mentors, codes, and leads projects, in both C++ and .NET, especially for Windows. Kate is a Microsoft Regional Director, a Visual C++ MVP, has written over a dozen books, and speaks at conferences and user groups around the world. Kate develops courses on C++, Visual Studio, and Windows programming for Pluralsight.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:03,870 --> 00:00:14,730
[Music]

00:00:13,880 --> 00:00:21,329
[Applause]

00:00:14,730 --> 00:00:21,329
[Music]

00:00:22,020 --> 00:00:32,340
I don't need to introduce you to Kate

00:00:30,690 --> 00:00:35,010
technical and professional

00:00:32,340 --> 00:00:37,650
accomplishments however what some of you

00:00:35,010 --> 00:00:41,040
might not know is that Kate has helped

00:00:37,650 --> 00:00:43,379
start organization which helped myself

00:00:41,040 --> 00:00:46,140
and three other women attend this

00:00:43,379 --> 00:00:56,550
conference was that said it's my honor

00:00:46,140 --> 00:00:59,060
to introduce Kate Gregory good morning

00:00:56,550 --> 00:00:59,060
thank you Annie

00:01:00,120 --> 00:01:04,949
yeah thank you for the include plug also

00:01:02,220 --> 00:01:07,200
and it's I'm so excited seeing all the

00:01:04,949 --> 00:01:08,490
include shirts wandering around the

00:01:07,200 --> 00:01:10,020
halls yesterday and today

00:01:08,490 --> 00:01:13,110
thank you all for stopping by and

00:01:10,020 --> 00:01:16,320
talking to us what I wanted to talk to

00:01:13,110 --> 00:01:19,649
you about this morning is what I've been

00:01:16,320 --> 00:01:21,930
doing for the last few years about how

00:01:19,649 --> 00:01:23,970
do you write simple code how do you

00:01:21,930 --> 00:01:26,970
design things to be simple it's it's a

00:01:23,970 --> 00:01:28,770
word that I've been using but I realized

00:01:26,970 --> 00:01:32,520
that I needed to back up a bit and

00:01:28,770 --> 00:01:35,060
actually explain what I mean by simple

00:01:32,520 --> 00:01:36,810
because it's a deceptive word and

00:01:35,060 --> 00:01:38,310
different people think it means

00:01:36,810 --> 00:01:42,410
different things so there's more than

00:01:38,310 --> 00:01:47,220
one way to keep things simple I teach

00:01:42,410 --> 00:01:50,190
C++ as a thing like intro to C++ C++

00:01:47,220 --> 00:01:52,890
fundamentals but I also teach in groups

00:01:50,190 --> 00:01:54,720
and one on one individual pieces right

00:01:52,890 --> 00:01:56,190
here's a new thing that we just got

00:01:54,720 --> 00:01:58,319
here's how it works and why I want you

00:01:56,190 --> 00:01:59,910
to use it from now on and no matter what

00:01:58,319 --> 00:02:03,319
you're teaching when you are teaching

00:01:59,910 --> 00:02:08,099
something you tend to start very simple

00:02:03,319 --> 00:02:10,220
you deliberately leave things out we

00:02:08,099 --> 00:02:13,590
should be making sure that this number

00:02:10,220 --> 00:02:15,360
you know is even or positive or a number

00:02:13,590 --> 00:02:16,800
in the first place but we're not going

00:02:15,360 --> 00:02:17,849
to do that because I want to focus on

00:02:16,800 --> 00:02:20,340
something so if I'm trying to teach

00:02:17,849 --> 00:02:23,700
someone what the modulo operator is in

00:02:20,340 --> 00:02:26,280
C++ a whole pile of stuff about how you

00:02:23,700 --> 00:02:28,200
can't take it of a string it's not

00:02:26,280 --> 00:02:31,920
helping anyone right we're focusing on

00:02:28,200 --> 00:02:35,410
that one thing and so we tend to assume

00:02:31,920 --> 00:02:38,370
our inputs are reasonable and work we

00:02:35,410 --> 00:02:41,530
certainly assumed they're not malicious

00:02:38,370 --> 00:02:43,900
talks about buffer overflow attacks and

00:02:41,530 --> 00:02:46,060
those sorts of things are wonderful but

00:02:43,900 --> 00:02:48,430
they don't really belong in how do I

00:02:46,060 --> 00:02:53,170
call a standard function to parse a

00:02:48,430 --> 00:02:54,490
string into an integer very often an

00:02:53,170 --> 00:02:56,950
algorithm for getting something done

00:02:54,490 --> 00:02:58,450
will work in two directions here's what

00:02:56,950 --> 00:02:59,680
you do if the two elements you want to

00:02:58,450 --> 00:03:02,260
move around in the collection one is

00:02:59,680 --> 00:03:05,470
before the other and here's how you do

00:03:02,260 --> 00:03:10,360
it if one is after the other and we will

00:03:05,470 --> 00:03:13,720
often only show half the work and that I

00:03:10,360 --> 00:03:16,720
guess we are doing to keep it simple

00:03:13,720 --> 00:03:19,780
that is not the simple I'm here to talk

00:03:16,720 --> 00:03:21,340
to you about today we don't do those

00:03:19,780 --> 00:03:24,400
things by the way because we're stupid

00:03:21,340 --> 00:03:27,370
or bad or lazy we do them for very good

00:03:24,400 --> 00:03:29,590
reasons we are not trying to teach the

00:03:27,370 --> 00:03:31,930
universe we're trying to teach this one

00:03:29,590 --> 00:03:35,110
little grain of sand and so we show this

00:03:31,930 --> 00:03:37,960
one little grain of sand and we let the

00:03:35,110 --> 00:03:40,120
learner concentrate on that one thing if

00:03:37,960 --> 00:03:41,770
every time we taught anything we

00:03:40,120 --> 00:03:46,209
surrounded it with all of the error

00:03:41,770 --> 00:03:48,880
checking and malice checking and unit

00:03:46,209 --> 00:03:50,290
testing and best practices there would

00:03:48,880 --> 00:03:54,310
be no room for the thing the person

00:03:50,290 --> 00:03:56,440
supposed to be trying to learn I'm a

00:03:54,310 --> 00:04:00,730
Canadian Marshall McLuhan was a Canadian

00:03:56,440 --> 00:04:03,250
he said the medium is the message this

00:04:00,730 --> 00:04:06,280
is a true thing we write samples that

00:04:03,250 --> 00:04:08,050
will fit on a slide we write samples

00:04:06,280 --> 00:04:10,030
that will fit on a single page of the

00:04:08,050 --> 00:04:11,670
IDE using whatever screen you're likely

00:04:10,030 --> 00:04:14,020
using when you're teaching the person

00:04:11,670 --> 00:04:15,700
that's what the whole we're only gonna

00:04:14,020 --> 00:04:18,520
do one Direction thing tends to come

00:04:15,700 --> 00:04:19,989
from and it's not wrong that's what I

00:04:18,520 --> 00:04:21,280
really want you to understand all of

00:04:19,989 --> 00:04:23,590
these things come from a good place

00:04:21,280 --> 00:04:25,030
we're trying to lower the cognitive

00:04:23,590 --> 00:04:26,970
burden on the person who's trying to

00:04:25,030 --> 00:04:30,340
learn what we're teaching them even

00:04:26,970 --> 00:04:32,230
scrolling can be a cognitive burden so

00:04:30,340 --> 00:04:33,760
when you're talking to a beginner when

00:04:32,230 --> 00:04:36,130
you're talking to a newbie you do a

00:04:33,760 --> 00:04:38,950
certain kind of simplification to ease

00:04:36,130 --> 00:04:41,980
their learning process and I'm not here

00:04:38,950 --> 00:04:43,960
to say that that's bad okay the other

00:04:41,980 --> 00:04:45,820
reason that we do some of these things

00:04:43,960 --> 00:04:48,820
in samples like this is because they are

00:04:45,820 --> 00:04:49,240
completely imaginary it's also why the

00:04:48,820 --> 00:04:51,220
very

00:04:49,240 --> 00:04:54,069
names are so terrible you have a vector

00:04:51,220 --> 00:04:56,319
of integers called V because it's only a

00:04:54,069 --> 00:04:58,960
vector it's it's not the unfulfilled

00:04:56,319 --> 00:05:00,430
purchase orders right because that's not

00:04:58,960 --> 00:05:02,050
what you're doing you're not writing an

00:05:00,430 --> 00:05:03,819
order management system you're showing

00:05:02,050 --> 00:05:07,440
people how to sort a vector and so

00:05:03,819 --> 00:05:07,440
you're a vector ends it ends up called V

00:05:07,860 --> 00:05:14,680
but in real life after someone has

00:05:10,990 --> 00:05:17,789
received that kind of training life is

00:05:14,680 --> 00:05:21,430
more complicated than that in real life

00:05:17,789 --> 00:05:23,979
you have to check you have to make sure

00:05:21,430 --> 00:05:26,470
that you got the sort of input you

00:05:23,979 --> 00:05:28,300
expected you have to do the calculations

00:05:26,470 --> 00:05:31,750
forwards and backwards up and back

00:05:28,300 --> 00:05:35,289
before and after so of course the code

00:05:31,750 --> 00:05:39,120
gets bigger it gets more complicated it

00:05:35,289 --> 00:05:43,659
has to be more complicated but

00:05:39,120 --> 00:05:45,819
unfortunately some developers maybe even

00:05:43,659 --> 00:05:48,729
almost all developers they start to

00:05:45,819 --> 00:05:52,539
internalize something we're not

00:05:48,729 --> 00:05:56,979
beginners so we don't want simple real

00:05:52,539 --> 00:06:00,310
life is complicated and look at me look

00:05:56,979 --> 00:06:03,639
what I can do right like this wooden

00:06:00,310 --> 00:06:07,539
carving I don't know how long that took

00:06:03,639 --> 00:06:09,969
but that's amazing right I will point

00:06:07,539 --> 00:06:11,409
out to you it's behind glass because

00:06:09,969 --> 00:06:16,180
it's so brittle that if someone were to

00:06:11,409 --> 00:06:18,370
touch it it would break have you not

00:06:16,180 --> 00:06:19,990
ever once said half and joke

00:06:18,370 --> 00:06:22,270
as my mother would say and whole in

00:06:19,990 --> 00:06:26,039
earnest if it was hard to write it

00:06:22,270 --> 00:06:30,099
should be hard to read if it was easy

00:06:26,039 --> 00:06:32,530
anyone could do it we have a little of

00:06:30,099 --> 00:06:36,460
that in our hearts and that's what I

00:06:32,530 --> 00:06:41,590
want to address when I talk about

00:06:36,460 --> 00:06:44,650
simplicity this is a word cloud from a

00:06:41,590 --> 00:06:46,690
survey that the foundation did of C++

00:06:44,650 --> 00:06:49,780
developers now to be fair the questions

00:06:46,690 --> 00:06:50,860
specifically asked about difficulties so

00:06:49,780 --> 00:06:53,349
the fact that you see the word

00:06:50,860 --> 00:06:54,699
difficulty in big letters it wasn't like

00:06:53,349 --> 00:06:56,440
they said what do you think about C++

00:06:54,699 --> 00:06:59,380
they said tell us about your

00:06:56,440 --> 00:07:02,680
difficulties and so we got these words

00:06:59,380 --> 00:07:03,510
but hard to understand difficult to

00:07:02,680 --> 00:07:13,530
understand

00:07:03,510 --> 00:07:14,510
impossible and my favorite nope look for

00:07:13,530 --> 00:07:18,570
keywords

00:07:14,510 --> 00:07:20,580
there's context / there's references

00:07:18,570 --> 00:07:22,470
which might mean the ampersand thing or

00:07:20,580 --> 00:07:24,960
r-value references but couldn't mean

00:07:22,470 --> 00:07:26,370
books and tutorials right we don't know

00:07:24,960 --> 00:07:31,070
what that word means without the context

00:07:26,370 --> 00:07:33,330
I don't see Otto I don't see no except

00:07:31,070 --> 00:07:34,950
all right people didn't say key words

00:07:33,330 --> 00:07:36,750
when they said what they didn't what

00:07:34,950 --> 00:07:40,860
they found difficult but they sure did

00:07:36,750 --> 00:07:44,940
find things difficult so what I want to

00:07:40,860 --> 00:07:49,440
advocate for today is simple code as

00:07:44,940 --> 00:07:52,980
defined by this list of adjectives not

00:07:49,440 --> 00:07:58,800
short code not using small words code

00:07:52,980 --> 00:08:01,430
right Nazi Jane run code what I call

00:07:58,800 --> 00:08:05,330
simple code is code that explains itself

00:08:01,430 --> 00:08:09,960
when you read it you know what it does

00:08:05,330 --> 00:08:13,590
you understand it it says find

00:08:09,960 --> 00:08:18,350
unfulfilled orders ship ready orders

00:08:13,590 --> 00:08:21,810
update order lists it's got words in it

00:08:18,350 --> 00:08:24,000
it's almost like reading a story you

00:08:21,810 --> 00:08:28,050
understand it and you understand it on

00:08:24,000 --> 00:08:32,610
the first try code that surprises you

00:08:28,050 --> 00:08:35,820
where you go wait what oh oh that's a

00:08:32,610 --> 00:08:39,090
bitwise or okay fine I don't want that

00:08:35,820 --> 00:08:40,860
that's not simple code that fools you

00:08:39,090 --> 00:08:42,570
the first time through called code that

00:08:40,860 --> 00:08:44,070
needs a comment to explain what it

00:08:42,570 --> 00:08:49,140
really does as opposed to what it looks

00:08:44,070 --> 00:08:51,930
like it does is not simple transparent

00:08:49,140 --> 00:08:53,640
code you know has nothing to hide I'm

00:08:51,930 --> 00:08:55,200
not against encapsulation in fact

00:08:53,640 --> 00:08:59,220
encapsulation is one of the best ways to

00:08:55,200 --> 00:09:04,050
achieve simplicity but obscuration is a

00:08:59,220 --> 00:09:07,020
different game I've had pushback from my

00:09:04,050 --> 00:09:09,180
last bullet on this slide that code that

00:09:07,020 --> 00:09:10,530
meets all these things that lays itself

00:09:09,180 --> 00:09:12,630
out in front of you tells you what it

00:09:10,530 --> 00:09:15,810
does hides nothing does what you think

00:09:12,630 --> 00:09:19,080
it does becomes pleasant

00:09:15,810 --> 00:09:21,720
that you could actually enjoy working in

00:09:19,080 --> 00:09:24,600
that codebase and people have said

00:09:21,720 --> 00:09:28,200
things like if it was fun they wouldn't

00:09:24,600 --> 00:09:28,770
pay you to do it so let me tell you a

00:09:28,200 --> 00:09:30,570
secret

00:09:28,770 --> 00:09:32,700
it can be fun and they will still pay

00:09:30,570 --> 00:09:36,089
you to do it because they need it done

00:09:32,700 --> 00:09:42,480
and if you're doing it well it really is

00:09:36,089 --> 00:09:42,930
fun okay I'm going to say that simpler

00:09:42,480 --> 00:09:47,460
is better

00:09:42,930 --> 00:09:50,010
it's like spoiler alert yes but you know

00:09:47,460 --> 00:09:52,310
I'm pretty active on Stack Overflow and

00:09:50,010 --> 00:09:54,990
all the other Stack Exchange sites and

00:09:52,310 --> 00:09:57,330
they have a hate on for subjective

00:09:54,990 --> 00:10:00,180
questions so if you go to the travel

00:09:57,330 --> 00:10:02,220
site you're not allowed to ask which is

00:10:00,180 --> 00:10:04,620
better to go on vacation Italy or

00:10:02,220 --> 00:10:06,150
Switzerland because that's not a

00:10:04,620 --> 00:10:08,310
question with an answer that can be

00:10:06,150 --> 00:10:09,960
correct or incorrect and that's the

00:10:08,310 --> 00:10:12,360
problem with is simpler better

00:10:09,960 --> 00:10:16,410
first of all better than what but also

00:10:12,360 --> 00:10:19,740
define better so let me ask some

00:10:16,410 --> 00:10:21,780
slightly more detailed questions might

00:10:19,740 --> 00:10:24,030
be better because you can write it

00:10:21,780 --> 00:10:25,890
faster it might be better because it has

00:10:24,030 --> 00:10:28,080
less bucks it might be better because

00:10:25,890 --> 00:10:30,480
it's more performance it might be better

00:10:28,080 --> 00:10:33,780
because it's easier to read or easier to

00:10:30,480 --> 00:10:37,980
change or as I mentioned more fun so

00:10:33,780 --> 00:10:42,380
let's take a look at those is it faster

00:10:37,980 --> 00:10:45,210
to write simple code no no no no no

00:10:42,380 --> 00:10:47,490
here's another wooden sculpture very

00:10:45,210 --> 00:10:48,870
different from the previous one but was

00:10:47,490 --> 00:10:52,890
that like an afternoon's work for

00:10:48,870 --> 00:10:55,140
someone no right making things smooth

00:10:52,890 --> 00:10:57,630
and even making things match up can be

00:10:55,140 --> 00:11:03,140
just as hard as making things ornate and

00:10:57,630 --> 00:11:06,600
complicated it takes work in fact

00:11:03,140 --> 00:11:09,150
there's that famous quote I'm sorry this

00:11:06,600 --> 00:11:12,360
letter is so long but I didn't have time

00:11:09,150 --> 00:11:14,480
to write you a short one the first time

00:11:12,360 --> 00:11:17,070
I wanted to use this quote in a talk I

00:11:14,480 --> 00:11:20,180
went to the Internet to confirm who

00:11:17,070 --> 00:11:23,550
wrote this talk this quote

00:11:20,180 --> 00:11:25,350
opinions vary Mark Twain

00:11:23,550 --> 00:11:28,380
if you're an American you probably think

00:11:25,350 --> 00:11:29,130
Mark Twain wrote this Blaise Pascal gets

00:11:28,380 --> 00:11:31,170
a lot of credit

00:11:29,130 --> 00:11:32,490
Samuel Johnson gets a lot of credit so

00:11:31,170 --> 00:11:34,050
apparently you just pick an off there

00:11:32,490 --> 00:11:39,840
I'm gonna pick Margaret Atwood as

00:11:34,050 --> 00:11:41,100
Margaret I would famously said but the

00:11:39,840 --> 00:11:42,870
thing is it is more work to write a

00:11:41,100 --> 00:11:44,670
shorter letter it is more work to write

00:11:42,870 --> 00:11:47,970
simpler code you need to build new

00:11:44,670 --> 00:11:50,760
habits you need to look at code that

00:11:47,970 --> 00:11:52,470
works right you ran the tests it's good

00:11:50,760 --> 00:11:55,530
it said seven you're like yes I was

00:11:52,470 --> 00:11:57,690
going for seven but you're not done

00:11:55,530 --> 00:11:59,460
because you're going to review it you're

00:11:57,690 --> 00:12:01,800
going to revisit it you're maybe going

00:11:59,460 --> 00:12:04,020
to refactor it so that it goes from

00:12:01,800 --> 00:12:08,840
being code that works to code that works

00:12:04,020 --> 00:12:11,940
and everybody can see why that's effort

00:12:08,840 --> 00:12:14,550
but maybe it's effort for a purpose

00:12:11,940 --> 00:12:16,560
because it turns out that usually when

00:12:14,550 --> 00:12:20,430
you make this code simpler it is also

00:12:16,560 --> 00:12:23,070
more correct someone writes something

00:12:20,430 --> 00:12:26,520
that is complicated across many axes

00:12:23,070 --> 00:12:28,470
it's very long it's maybe spaghetti code

00:12:26,520 --> 00:12:30,990
the variable names are horrible there's

00:12:28,470 --> 00:12:32,790
no functions there's no classes nothing

00:12:30,990 --> 00:12:34,260
is explained it's riddled with comments

00:12:32,790 --> 00:12:35,010
in the first couple of comments you read

00:12:34,260 --> 00:12:37,380
aren't correct

00:12:35,010 --> 00:12:40,650
they say sorts but there's no sign of

00:12:37,380 --> 00:12:44,010
any sorting that kind of thing that code

00:12:40,650 --> 00:12:48,450
often has bugs in it really simple

00:12:44,010 --> 00:12:51,060
example ra íí- it's wednesday so we've

00:12:48,450 --> 00:12:53,100
got two full days behind us and two and

00:12:51,060 --> 00:12:56,460
a bit days in front of us and I have

00:12:53,100 --> 00:12:58,410
heard someone say embrace ra íí- at

00:12:56,460 --> 00:13:00,180
least five times and I will hear it

00:12:58,410 --> 00:13:02,720
another five right and it's not a new

00:13:00,180 --> 00:13:05,370
concept there's still people who aren't

00:13:02,720 --> 00:13:08,700
when your cleanup is in the destructor

00:13:05,370 --> 00:13:11,340
you can't forget to clean up that means

00:13:08,700 --> 00:13:15,680
using our AI makes your programs more

00:13:11,340 --> 00:13:18,900
correct is that why most of us do it I

00:13:15,680 --> 00:13:22,440
see no hands is it because it's way

00:13:18,900 --> 00:13:25,020
easier to write that way yeah right it's

00:13:22,440 --> 00:13:26,610
simpler for us put the cleanup in the

00:13:25,020 --> 00:13:28,380
destructor and carry on about our

00:13:26,610 --> 00:13:30,570
business the destructor will be called

00:13:28,380 --> 00:13:31,860
when the magical close race occurs or

00:13:30,570 --> 00:13:34,950
the exceptions thrown or the return

00:13:31,860 --> 00:13:36,990
statement or whatever so that's simpler

00:13:34,950 --> 00:13:38,670
code no one has to read through the six

00:13:36,990 --> 00:13:40,860
different clean up blocks scattered

00:13:38,670 --> 00:13:42,240
throughout your long function but

00:13:40,860 --> 00:13:44,249
there's no

00:13:42,240 --> 00:13:46,920
of that sometimes we don't flush the

00:13:44,249 --> 00:13:48,809
file thing that happens when you're

00:13:46,920 --> 00:13:51,179
doing all your cleanup by hand and

00:13:48,809 --> 00:13:54,300
that's not just a one off against our

00:13:51,179 --> 00:13:56,309
AII this way of writing code this way of

00:13:54,300 --> 00:13:57,860
saying yeah it works but now I need to

00:13:56,309 --> 00:14:00,389
make sure that it shows that it works

00:13:57,860 --> 00:14:02,189
actually some bugs disappear as you're

00:14:00,389 --> 00:14:07,980
doing that because you thought it worked

00:14:02,189 --> 00:14:10,649
but maybe it didn't quite I really

00:14:07,980 --> 00:14:12,119
advocate and I will have more tips about

00:14:10,649 --> 00:14:13,410
how to be simple but you can see I'm

00:14:12,119 --> 00:14:16,199
mushing them in with the benefits I

00:14:13,410 --> 00:14:17,839
really really advocate look for places

00:14:16,199 --> 00:14:22,079
where you're setting up future

00:14:17,839 --> 00:14:25,110
inconsistencies so if you have two

00:14:22,079 --> 00:14:26,279
functions that are very similar they

00:14:25,110 --> 00:14:28,769
perhaps take a different number of

00:14:26,279 --> 00:14:30,209
parameters in the future every time

00:14:28,769 --> 00:14:32,069
there's a change we have to change both

00:14:30,209 --> 00:14:35,790
of those functions and they can become

00:14:32,069 --> 00:14:37,980
inconsistent if you write one function

00:14:35,790 --> 00:14:39,839
this doesn't always work but if you can

00:14:37,980 --> 00:14:41,490
write one function and give a default

00:14:39,839 --> 00:14:42,149
value to one of the parameters of that

00:14:41,490 --> 00:14:46,079
function

00:14:42,149 --> 00:14:48,029
well now tautologically there's only one

00:14:46,079 --> 00:14:49,410
function which means there's only one

00:14:48,029 --> 00:14:52,199
place you have to make the future change

00:14:49,410 --> 00:14:54,360
which means you can't get out of sync so

00:14:52,199 --> 00:14:57,480
you stay correct going forward into the

00:14:54,360 --> 00:14:59,189
future and also it's simpler for

00:14:57,480 --> 00:15:01,290
everyone I've been on those projects I

00:14:59,189 --> 00:15:03,749
remember once we were in a language that

00:15:01,290 --> 00:15:05,160
didn't have a mechanism for us to do the

00:15:03,749 --> 00:15:06,689
kind of overloading we needed to do so

00:15:05,160 --> 00:15:09,829
we were doing copy and paste inheritance

00:15:06,689 --> 00:15:11,939
and they wanted a super simple change

00:15:09,829 --> 00:15:13,709
let's say it was a wording change it

00:15:11,939 --> 00:15:14,790
wasn't that it could have been and I

00:15:13,709 --> 00:15:17,040
said I have to make the change in

00:15:14,790 --> 00:15:18,959
eighteen places this is how many

00:15:17,040 --> 00:15:21,569
developer hours it's going to cost you

00:15:18,959 --> 00:15:23,040
to make the change in eighteen places

00:15:21,569 --> 00:15:24,899
make the eighteen commits do the

00:15:23,040 --> 00:15:26,549
eighteen tests and I like it's not worth

00:15:24,899 --> 00:15:29,610
it if we could have changed it in one

00:15:26,549 --> 00:15:31,679
place they would have done it so any

00:15:29,610 --> 00:15:35,339
time you're taking advantage of you know

00:15:31,679 --> 00:15:37,049
it being the 21st century you're going

00:15:35,339 --> 00:15:37,920
to take away those efforts to keep

00:15:37,049 --> 00:15:40,350
things in sync

00:15:37,920 --> 00:15:42,660
later on the problem with copy and paste

00:15:40,350 --> 00:15:44,339
inheritance or even just copy and

00:15:42,660 --> 00:15:46,350
pasting the same 50 lines of code

00:15:44,339 --> 00:15:49,199
everywhere is those 50 lines of code

00:15:46,350 --> 00:15:50,339
should stay the same and they don't so

00:15:49,199 --> 00:15:52,259
you make a function that gets called

00:15:50,339 --> 00:15:53,770
then you only have to change the

00:15:52,259 --> 00:15:57,250
function you can't get in

00:15:53,770 --> 00:15:58,750
and the I'll say embrace templates if no

00:15:57,250 --> 00:16:01,090
one else does but I think a few other

00:15:58,750 --> 00:16:02,650
people have if you've got a bunch of

00:16:01,090 --> 00:16:03,850
functions that are very similar but take

00:16:02,650 --> 00:16:06,430
different types there's no inheritance

00:16:03,850 --> 00:16:08,380
involved you can still write a templated

00:16:06,430 --> 00:16:10,270
function and again now you just have to

00:16:08,380 --> 00:16:13,570
change the template add function instead

00:16:10,270 --> 00:16:16,150
of all the similar functions it's more

00:16:13,570 --> 00:16:18,220
work right you're writing the shorter

00:16:16,150 --> 00:16:19,570
letter you copy and pasted your way to a

00:16:18,220 --> 00:16:21,580
bunch of functions that look a lot of

00:16:19,570 --> 00:16:23,740
like each other but they're great but if

00:16:21,580 --> 00:16:25,150
you close the door and move on what are

00:16:23,740 --> 00:16:31,570
you setting up for when there's a change

00:16:25,150 --> 00:16:33,460
in the future and here's a weirdness and

00:16:31,570 --> 00:16:35,260
I noticed it first with REI but it

00:16:33,460 --> 00:16:36,790
happens elsewhere when you have all

00:16:35,260 --> 00:16:38,890
kinds of complexity all over the page

00:16:36,790 --> 00:16:40,480
and you decide to do some encapsulation

00:16:38,890 --> 00:16:44,080
you invent some kind of an abstraction

00:16:40,480 --> 00:16:46,270
and you move this five lines and these

00:16:44,080 --> 00:16:46,780
eleven lines and these 27 lines into

00:16:46,270 --> 00:16:48,520
functions

00:16:46,780 --> 00:16:51,790
maybe destructors but it works for

00:16:48,520 --> 00:16:55,180
anything obviously the calling code gets

00:16:51,790 --> 00:16:56,380
shorter it also gets simpler in the

00:16:55,180 --> 00:16:57,850
sense of being expressive and

00:16:56,380 --> 00:17:00,580
transparent because the functions have

00:16:57,850 --> 00:17:02,050
names which is amazing so you can read

00:17:00,580 --> 00:17:04,540
now in the calling code instead of

00:17:02,050 --> 00:17:07,120
reading 400 lines of code you're reading

00:17:04,540 --> 00:17:09,370
words from your business domain that

00:17:07,120 --> 00:17:10,930
talk about orders or employees and that

00:17:09,370 --> 00:17:14,260
talk about shipping and updating and

00:17:10,930 --> 00:17:16,600
pricing and refunding that's great but

00:17:14,260 --> 00:17:19,390
you know we've only swept it under the

00:17:16,600 --> 00:17:21,850
carpet right well no weirdly when you go

00:17:19,390 --> 00:17:24,790
into the class the class ends up pretty

00:17:21,850 --> 00:17:26,320
simple it's got five member functions

00:17:24,790 --> 00:17:27,640
some are five lines long some are thirty

00:17:26,320 --> 00:17:29,620
lines long they've got good names

00:17:27,640 --> 00:17:31,570
they've got parameters with names it all

00:17:29,620 --> 00:17:34,360
makes sense and you're left kind of

00:17:31,570 --> 00:17:37,150
looking around where did all the

00:17:34,360 --> 00:17:42,150
complication go and I have to tell you I

00:17:37,150 --> 00:17:47,350
see it evaporate that's a gift

00:17:42,150 --> 00:17:51,070
what the heck we'll take it I'm also

00:17:47,350 --> 00:17:53,890
going to plug other people's code who

00:17:51,070 --> 00:17:55,180
likes other people's code it's very

00:17:53,890 --> 00:17:57,400
early in the morning but I'm not getting

00:17:55,180 --> 00:17:59,020
many hands at all maybe a fifth and some

00:17:57,400 --> 00:18:01,110
of them were slow like wait maybe I

00:17:59,020 --> 00:18:05,940
should say I like other people's code

00:18:01,110 --> 00:18:08,330
I love other people's coat we'll start

00:18:05,940 --> 00:18:10,410
with this reason they already tested it

00:18:08,330 --> 00:18:12,870
okay especially if it's a standard

00:18:10,410 --> 00:18:15,900
library I probably have at least one

00:18:12,870 --> 00:18:17,610
maintainer in the room they tested it

00:18:15,900 --> 00:18:19,110
they've thought about what if you're

00:18:17,610 --> 00:18:21,900
assigning to yourself and all that stuff

00:18:19,110 --> 00:18:25,470
did you forget to check for and they

00:18:21,900 --> 00:18:26,910
have more correctness than you simply

00:18:25,470 --> 00:18:32,160
because they've started it before you

00:18:26,910 --> 00:18:35,400
did what about faster wouldn't it be

00:18:32,160 --> 00:18:37,200
great if it was fun and maintainable and

00:18:35,400 --> 00:18:42,419
readable and you were proud of it and it

00:18:37,200 --> 00:18:46,740
was also magically faster probably not

00:18:42,419 --> 00:18:49,320
compare these two lines the simpler one

00:18:46,740 --> 00:18:51,179
is like hey let's just use Auto right

00:18:49,320 --> 00:18:55,020
Auto is great thank you love it embrace

00:18:51,179 --> 00:18:57,150
Auto almost always Auto but whatever

00:18:55,020 --> 00:18:58,730
Appy is presumably some kind of person

00:18:57,150 --> 00:19:02,700
object if it's in a collection of people

00:18:58,730 --> 00:19:04,080
maybe it's expensive to copy maybe not

00:19:02,700 --> 00:19:07,049
this might be a dinky little loop this

00:19:04,080 --> 00:19:09,780
might not matter but it's not faster to

00:19:07,049 --> 00:19:12,690
do it by value right it's close enough

00:19:09,780 --> 00:19:16,410
to the same or it's slower so in order

00:19:12,690 --> 00:19:18,330
to get the benefit you have to know

00:19:16,410 --> 00:19:19,620
something and you also have to be able

00:19:18,330 --> 00:19:21,030
to retrieve something right at that

00:19:19,620 --> 00:19:22,200
moment so right while you're writing the

00:19:21,030 --> 00:19:25,679
loop you have to you say to yourself hmm

00:19:22,200 --> 00:19:28,590
maybe a reference and that level of

00:19:25,679 --> 00:19:30,630
knowledge it's not just knowing it but

00:19:28,590 --> 00:19:32,330
having it pump up and tell you at the

00:19:30,630 --> 00:19:34,950
exact right moment to use it is

00:19:32,330 --> 00:19:37,290
non-trivial to achieve so the absolutely

00:19:34,950 --> 00:19:39,000
naive aspersion of most code is not as

00:19:37,290 --> 00:19:41,280
fast as the version where you come back

00:19:39,000 --> 00:19:42,870
and make it perform in the same way as

00:19:41,280 --> 00:19:44,880
the naive aspersion of most code is not

00:19:42,870 --> 00:19:46,799
as simple as when you come back and make

00:19:44,880 --> 00:19:52,169
it more readable more expressive more

00:19:46,799 --> 00:19:54,240
transparent I am never going to advocate

00:19:52,169 --> 00:19:56,580
that you choose simplicity over

00:19:54,240 --> 00:20:00,960
performance but you will notice that the

00:19:56,580 --> 00:20:04,169
word if is in bold if a real choice

00:20:00,960 --> 00:20:06,890
exists go with performance but that's a

00:20:04,169 --> 00:20:06,890
big if

00:20:06,950 --> 00:20:13,639
compilers are amazing optimizers are

00:20:11,900 --> 00:20:15,259
amazing

00:20:13,639 --> 00:20:17,149
if you get the brilliant idea that like

00:20:15,259 --> 00:20:19,099
oh this variable in the side this loop

00:20:17,149 --> 00:20:21,499
never changes I should move it out of

00:20:19,099 --> 00:20:26,359
the loop yeah you are like little baby

00:20:21,499 --> 00:20:27,799
says the optimizer and guaranteed

00:20:26,359 --> 00:20:31,429
they're better than you if you haven't

00:20:27,799 --> 00:20:33,409
measured yet guaranteed okay

00:20:31,429 --> 00:20:35,539
don't measure your debug build come on

00:20:33,409 --> 00:20:38,119
measure your release build see if you

00:20:35,539 --> 00:20:40,999
even have an issue and if you do have an

00:20:38,119 --> 00:20:45,409
issue then go for performance in that

00:20:40,999 --> 00:20:47,269
case but not before and hey let's

00:20:45,409 --> 00:20:50,329
mention libraries again guess who might

00:20:47,269 --> 00:20:51,619
be faster than you right again because

00:20:50,329 --> 00:20:53,419
it's their job and it's because what

00:20:51,619 --> 00:20:54,739
they do but also because they know a

00:20:53,419 --> 00:20:57,259
little bit about how the rest of the

00:20:54,739 --> 00:20:58,700
library is implemented so in any given

00:20:57,259 --> 00:21:04,399
situation they may be able to write

00:20:58,700 --> 00:21:07,070
something that you could not I don't

00:21:04,399 --> 00:21:09,709
want you to think that writing the way I

00:21:07,070 --> 00:21:12,139
want you to write is nothing but a gift

00:21:09,709 --> 00:21:13,519
to the Future yesterday I've got a lot

00:21:12,139 --> 00:21:15,259
of Twitter traction by asking you to

00:21:13,519 --> 00:21:18,499
imagine that your code will be

00:21:15,259 --> 00:21:19,070
maintained by your own child when

00:21:18,499 --> 00:21:22,459
they're a grown up

00:21:19,070 --> 00:21:25,759
how would you write differently then but

00:21:22,459 --> 00:21:29,809
it's not just that you're going to be in

00:21:25,759 --> 00:21:31,700
this code again this afternoon right you

00:21:29,809 --> 00:21:33,349
as soon as you finish typing it you read

00:21:31,700 --> 00:21:36,229
it over to see if it's correct or not

00:21:33,349 --> 00:21:37,549
and then you test it and if you get a

00:21:36,229 --> 00:21:40,129
surprise you're going through in the

00:21:37,549 --> 00:21:43,849
debugger so from the moment the code has

00:21:40,129 --> 00:21:47,179
left your fingertips you benefit from it

00:21:43,849 --> 00:21:51,529
being this kind of code I did some work

00:21:47,179 --> 00:21:53,570
once in Perl and I once watched other

00:21:51,529 --> 00:21:55,849
people working APL which uses a lot of

00:21:53,570 --> 00:21:59,509
Greek letters and we used to joke that

00:21:55,849 --> 00:22:02,299
these were right only languages and some

00:21:59,509 --> 00:22:04,789
C++ kind of has that right only feel to

00:22:02,299 --> 00:22:06,979
it as well but you are the very first

00:22:04,789 --> 00:22:08,929
reader of your own code and you do it

00:22:06,979 --> 00:22:12,919
like microseconds after you've finished

00:22:08,929 --> 00:22:16,249
writing it so be good to you as well as

00:22:12,919 --> 00:22:17,809
to your imaginary successor and of

00:22:16,249 --> 00:22:19,339
course there's there's you in ten

00:22:17,809 --> 00:22:20,499
seconds and there's you tomorrow and

00:22:19,339 --> 00:22:23,719
there's you in six months

00:22:20,499 --> 00:22:27,260
that super clever trick that you pulled

00:22:23,719 --> 00:22:30,410
you may really regret it in January

00:22:27,260 --> 00:22:33,170
you may really really regret it in 2020

00:22:30,410 --> 00:22:34,790
and when you've changed laptops and you

00:22:33,170 --> 00:22:36,650
don't have the document anymore that you

00:22:34,790 --> 00:22:41,270
wrote about how the trick worked then

00:22:36,650 --> 00:22:44,420
you're really really sorry I come back

00:22:41,270 --> 00:22:48,350
to this because I get argued about it

00:22:44,420 --> 00:22:50,510
you can really enjoy reading things you

00:22:48,350 --> 00:22:53,000
can read over code and going to make a

00:22:50,510 --> 00:22:56,030
change and say oh this is wonderful I

00:22:53,000 --> 00:22:58,550
just go into the sales tax section and I

00:22:56,030 --> 00:23:00,650
make this change and I think that's all

00:22:58,550 --> 00:23:02,810
I need to do is there any better feeling

00:23:00,650 --> 00:23:04,520
than I think that's all I need to do

00:23:02,810 --> 00:23:06,650
because we don't really believe it

00:23:04,520 --> 00:23:09,640
whatever we've been tasked with we up we

00:23:06,650 --> 00:23:12,620
are like I'm going into the dragon now

00:23:09,640 --> 00:23:15,170
the government changed the rules I may

00:23:12,620 --> 00:23:18,820
be some time and then you know oh I just

00:23:15,170 --> 00:23:22,100
have to change the ANU okay

00:23:18,820 --> 00:23:24,140
that's fun embrace that try to write

00:23:22,100 --> 00:23:28,820
code that gives you that because it's

00:23:24,140 --> 00:23:30,290
probably you do it for yourself and I've

00:23:28,820 --> 00:23:32,450
mentioned other people's code a couple

00:23:30,290 --> 00:23:36,740
times now I've told you reasons to like

00:23:32,450 --> 00:23:39,140
it it's tested it's well designed they

00:23:36,740 --> 00:23:41,450
thought of the edge cases it's faster

00:23:39,140 --> 00:23:43,640
it's already done you don't have to do

00:23:41,450 --> 00:23:46,510
it but I got to tell you something that

00:23:43,640 --> 00:23:52,760
you're probably not going to like other

00:23:46,510 --> 00:23:55,330
people's code can be beautiful hands up

00:23:52,760 --> 00:24:00,350
if you've ever written beautiful code

00:23:55,330 --> 00:24:05,000
lots of his but you're not me only

00:24:00,350 --> 00:24:08,930
beautiful code maybe more than one

00:24:05,000 --> 00:24:10,580
person can write beautiful code why is

00:24:08,930 --> 00:24:12,410
the canoe here it's one of the few

00:24:10,580 --> 00:24:14,330
pictures is my photo credit instead of

00:24:12,410 --> 00:24:17,270
something Creative Commons II it's my

00:24:14,330 --> 00:24:18,860
picture of my canoe and this canoe is

00:24:17,270 --> 00:24:21,109
famously slightly older than James

00:24:18,860 --> 00:24:24,059
McNellis

00:24:21,109 --> 00:24:27,569
it's beautiful right it's insanely

00:24:24,059 --> 00:24:28,889
simple it has no moving parts we say

00:24:27,569 --> 00:24:31,319
that a lot metaphorically that's true

00:24:28,889 --> 00:24:33,119
literally and if you know anything about

00:24:31,319 --> 00:24:34,739
boats when you look at it you see where

00:24:33,119 --> 00:24:37,409
it can go and where it can't go and what

00:24:34,739 --> 00:24:38,849
it can do I can carry a lot of stuff you

00:24:37,409 --> 00:24:42,359
wouldn't take it down Rapids and it can

00:24:38,849 --> 00:24:45,029
float in very shallow water as C++

00:24:42,359 --> 00:24:47,729
programmer famously asked me you made

00:24:45,029 --> 00:24:50,999
this canoe well yes with my partner we

00:24:47,729 --> 00:24:54,749
made this can did you cut the wood into

00:24:50,999 --> 00:24:56,819
the little thin strips no I did not I

00:24:54,749 --> 00:24:59,189
went to the wood store like a heathen

00:24:56,819 --> 00:25:01,349
and I just bought wood and I made a

00:24:59,189 --> 00:25:04,699
canoe and you can go to the library

00:25:01,349 --> 00:25:08,099
store like a heathen and buy a vector or

00:25:04,699 --> 00:25:10,949
find if okay and you can make a

00:25:08,099 --> 00:25:12,899
beautiful program because other people's

00:25:10,949 --> 00:25:14,189
code is not just some ugly junk that you

00:25:12,899 --> 00:25:17,059
have to put up with because it has

00:25:14,189 --> 00:25:19,409
benefits it can actually be beautiful

00:25:17,059 --> 00:25:20,729
and when you embrace that and don't

00:25:19,409 --> 00:25:23,159
think that you're the only one who can

00:25:20,729 --> 00:25:25,019
write anything good you are making

00:25:23,159 --> 00:25:30,239
better code you're getting all those

00:25:25,019 --> 00:25:34,079
other benefits too so I come into

00:25:30,239 --> 00:25:36,569
businesses these days they very often

00:25:34,079 --> 00:25:39,149
have a legacy that they are not thinking

00:25:36,569 --> 00:25:40,469
of as a gift from the past it's not like

00:25:39,149 --> 00:25:42,029
they just inherited a diamond necklace

00:25:40,469 --> 00:25:45,299
from a great aunt they didn't know they

00:25:42,029 --> 00:25:48,299
have they have legacy code I hear

00:25:45,299 --> 00:25:50,189
albatross and usually the only person

00:25:48,299 --> 00:25:53,219
who understands it is long gone and they

00:25:50,189 --> 00:25:55,739
need to do something and it's not clear

00:25:53,219 --> 00:25:58,519
what that something is and I say what

00:25:55,739 --> 00:26:01,139
the something is is we need to take your

00:25:58,519 --> 00:26:02,549
giant wooden statue that has to be

00:26:01,139 --> 00:26:04,469
behind glass because no one can touch it

00:26:02,549 --> 00:26:07,529
and turn it into something that's very

00:26:04,469 --> 00:26:09,059
smooth very polished and very strong

00:26:07,529 --> 00:26:11,719
that doesn't have a lot of scraps and

00:26:09,059 --> 00:26:15,599
scratches and pits in the surface and

00:26:11,719 --> 00:26:22,049
that you can work with from now on it's

00:26:15,599 --> 00:26:26,479
not fragile and that is heart this is

00:26:22,049 --> 00:26:31,349
not play-doh right this is hard work

00:26:26,479 --> 00:26:34,240
you have to know an awful lot to make

00:26:31,349 --> 00:26:36,220
code simpler or even to evaluate this

00:26:34,240 --> 00:26:38,920
félicité the readability and the extra

00:26:36,220 --> 00:26:40,480
civet e of code whether you wrote it or

00:26:38,920 --> 00:26:44,380
whether somebody 20 years wrote it and

00:26:40,480 --> 00:26:46,960
you're picking it up now you have to

00:26:44,380 --> 00:26:50,740
know this language have to know what's

00:26:46,960 --> 00:26:53,200
changed recently or 25 years ago you

00:26:50,740 --> 00:26:54,970
have to know the libraries if you don't

00:26:53,200 --> 00:26:57,280
know that there's a function in

00:26:54,970 --> 00:26:58,780
algorithm called any of which returns

00:26:57,280 --> 00:27:00,130
true or false depending on whether any

00:26:58,780 --> 00:27:01,960
of the elements in a collection meet

00:27:00,130 --> 00:27:04,360
some predicate then you're going to

00:27:01,960 --> 00:27:07,420
write the loop to do that instead of

00:27:04,360 --> 00:27:12,670
calling any of and you have to know our

00:27:07,420 --> 00:27:14,230
idioms whether that's if P equals single

00:27:12,670 --> 00:27:16,630
equals some function that returns a

00:27:14,230 --> 00:27:18,370
pointer it's not a mistake right

00:27:16,630 --> 00:27:20,380
we're simultaneously calling the

00:27:18,370 --> 00:27:22,929
function and testing if we got a none L

00:27:20,380 --> 00:27:24,130
pointer back you know some people come

00:27:22,929 --> 00:27:26,610
in from other languages and they don't

00:27:24,130 --> 00:27:29,440
understand that line of code at all

00:27:26,610 --> 00:27:32,130
should you take it away should you say

00:27:29,440 --> 00:27:34,450
first we'll get P and then we'll test P

00:27:32,130 --> 00:27:36,760
you have to know the idioms that

00:27:34,450 --> 00:27:41,290
everyone around you is using which is

00:27:36,760 --> 00:27:43,590
tricky if you're a team of one the kind

00:27:41,290 --> 00:27:48,010
of simplicity that is complete and

00:27:43,590 --> 00:27:50,559
elegant and readable is nothing at all

00:27:48,010 --> 00:27:53,470
like I left that out to keep it simple

00:27:50,559 --> 00:27:55,780
right we're using the same word but it's

00:27:53,470 --> 00:27:58,090
a whole different concept so we're going

00:27:55,780 --> 00:28:03,550
for this polished piece of metal simple

00:27:58,090 --> 00:28:06,370
which is hard to do so perhaps I've

00:28:03,550 --> 00:28:13,030
convinced you you know my speaker notes

00:28:06,370 --> 00:28:14,559
for this slide say wah-ha-ha-ha I'll

00:28:13,030 --> 00:28:17,890
give you some things you can do there

00:28:14,559 --> 00:28:22,240
they're actually a lot harder than they

00:28:17,890 --> 00:28:24,130
sound simple but not easy the first

00:28:22,240 --> 00:28:29,320
thing to do is to gain an appreciation

00:28:24,130 --> 00:28:32,250
for this metric of evaluating code this

00:28:29,320 --> 00:28:36,429
code looks simple this code does not

00:28:32,250 --> 00:28:38,740
that's an actual step in the process and

00:28:36,429 --> 00:28:41,710
if you begin to know what simple code

00:28:38,740 --> 00:28:44,020
looks like then you will move towards

00:28:41,710 --> 00:28:45,640
writing simple code from the get-go but

00:28:44,020 --> 00:28:46,820
you will also notice when you have

00:28:45,640 --> 00:28:49,549
somehow accidentally

00:28:46,820 --> 00:28:51,320
created that trees and doors and people

00:28:49,549 --> 00:28:54,019
and whatnot wooden statue behind the

00:28:51,320 --> 00:28:56,389
glass and think about how can I make

00:28:54,019 --> 00:28:58,519
this simpler how can I take a moment and

00:28:56,389 --> 00:29:00,470
shorten up our letter here do some

00:28:58,519 --> 00:29:03,559
refactoring do some renaming do some

00:29:00,470 --> 00:29:04,850
encapsulating and make it back into

00:29:03,559 --> 00:29:09,889
something that's expressive and

00:29:04,850 --> 00:29:11,720
transparent and fun and as I mentioned

00:29:09,889 --> 00:29:13,490
earlier one important way to do that is

00:29:11,720 --> 00:29:17,600
by taking away opportunities to be

00:29:13,490 --> 00:29:20,899
inconsistent this is not lego do you see

00:29:17,600 --> 00:29:21,379
this is LEGO DUPLO Interop that's a

00:29:20,899 --> 00:29:24,679
thing

00:29:21,379 --> 00:29:27,230
and how is LEGO DUPLO Interop achieved

00:29:24,679 --> 00:29:29,240
right even Lego Lego Interop how is that

00:29:27,230 --> 00:29:32,720
achieved how can you take a 4 and a 2

00:29:29,240 --> 00:29:35,090
and use them together because of total

00:29:32,720 --> 00:29:37,070
and utter consistency right they're all

00:29:35,090 --> 00:29:38,659
consistent on the tops and on the

00:29:37,070 --> 00:29:41,450
bottoms and even between the different

00:29:38,659 --> 00:29:43,340
sizes so they will work together and if

00:29:41,450 --> 00:29:44,960
someone's just like ah for simplicity I

00:29:43,340 --> 00:29:49,190
felt like making bigger holes on this

00:29:44,960 --> 00:29:52,309
one that would not be okay so valuing

00:29:49,190 --> 00:29:57,740
consistency is a big part of what I want

00:29:52,309 --> 00:30:02,210
you to start doing one really entry

00:29:57,740 --> 00:30:07,009
level behavior names and I find names in

00:30:02,210 --> 00:30:09,279
comments here's a comment here's some

00:30:07,009 --> 00:30:09,279
code

00:30:09,399 --> 00:30:14,000
you're not beginners they say a

00:30:12,379 --> 00:30:16,269
consultant is someone who will borrow

00:30:14,000 --> 00:30:20,320
your watch to tell you what time it is

00:30:16,269 --> 00:30:23,090
here's what the consultant does right

00:30:20,320 --> 00:30:25,850
you said right there I'm going to make a

00:30:23,090 --> 00:30:30,289
total then you called it I what's wrong

00:30:25,850 --> 00:30:31,700
with you now what may be wrong with you

00:30:30,289 --> 00:30:34,909
not this person because they used

00:30:31,700 --> 00:30:37,669
arranged for but you know we used to

00:30:34,909 --> 00:30:40,879
have to type our variables like every

00:30:37,669 --> 00:30:43,309
letter of them ourselves it's true

00:30:40,879 --> 00:30:45,740
I'll set to walk to school uphill both

00:30:43,309 --> 00:30:47,929
ways in the snow and I had to type my

00:30:45,740 --> 00:30:49,429
whole variable name instead of typing a

00:30:47,929 --> 00:30:51,490
couple of letters in my variable name

00:30:49,429 --> 00:30:56,029
and having the autocomplete help me out

00:30:51,490 --> 00:30:59,310
so names help here's another thing that

00:30:56,029 --> 00:31:04,350
helps this is solved problem

00:30:59,310 --> 00:31:05,580
right good news boss I solved the adding

00:31:04,350 --> 00:31:07,620
up that the numbers in the victor

00:31:05,580 --> 00:31:11,660
problem Wow

00:31:07,620 --> 00:31:11,660
that's been intractable for decades

00:31:14,240 --> 00:31:20,880
functions have names that's why we say

00:31:18,180 --> 00:31:23,130
don't write raw loops it's not for per

00:31:20,880 --> 00:31:26,220
for security is because the loop doesn't

00:31:23,130 --> 00:31:29,010
have a name it gets a comment sort the

00:31:26,220 --> 00:31:33,110
collection or we could call sort just

00:31:29,010 --> 00:31:35,670
saying but there's more to it than this

00:31:33,110 --> 00:31:36,990
when you replace a bunch of magic

00:31:35,670 --> 00:31:40,950
numbers within an uma

00:31:36,990 --> 00:31:46,020
they all get needs a new classes if you

00:31:40,950 --> 00:31:47,940
can please when you make a constant that

00:31:46,020 --> 00:31:50,550
constant expert whatever just please not

00:31:47,940 --> 00:31:53,960
a macro again you gave the number and

00:31:50,550 --> 00:31:57,860
name and now people are reading it if

00:31:53,960 --> 00:31:59,730
price is greater than approval limits

00:31:57,860 --> 00:32:01,350
stuff that happens when you need

00:31:59,730 --> 00:32:06,540
approval like it's obvious whereas if

00:32:01,350 --> 00:32:10,290
price is greater than 472 or x3 I don't

00:32:06,540 --> 00:32:13,410
know it's amazing because it's so easy

00:32:10,290 --> 00:32:18,060
to do it's amazing what it does to your

00:32:13,410 --> 00:32:20,550
code variable names single letter

00:32:18,060 --> 00:32:22,590
variable names here's the prom with

00:32:20,550 --> 00:32:25,530
single letter variable names we put a

00:32:22,590 --> 00:32:29,400
two in our terms you build a lookup

00:32:25,530 --> 00:32:32,130
table you say to yourself a means this I

00:32:29,400 --> 00:32:34,980
means that d2 means this d7 means that

00:32:32,130 --> 00:32:37,440
and for pages later you are looking up

00:32:34,980 --> 00:32:40,140
in your lookup table let us save an

00:32:37,440 --> 00:32:42,060
indirection okay we're all in favor of

00:32:40,140 --> 00:32:46,580
saving in directions let's eliminate

00:32:42,060 --> 00:32:48,900
that take a look here there's a comment

00:32:46,580 --> 00:32:50,119
you can all be consultants after this

00:32:48,900 --> 00:32:53,479
top

00:32:50,119 --> 00:32:55,639
a couple thousand lines later the

00:32:53,479 --> 00:32:59,269
variable gets a value that's a different

00:32:55,639 --> 00:33:01,969
peeve right wall of variables at the top

00:32:59,269 --> 00:33:03,559
like literally 50 lines of variables

00:33:01,969 --> 00:33:06,619
being declared and then we'll start

00:33:03,559 --> 00:33:08,239
using them why didn't we go double D 3

00:33:06,619 --> 00:33:10,759
equals get gross receipts because we

00:33:08,239 --> 00:33:13,089
didn't another couple thousand lines

00:33:10,759 --> 00:33:15,169
later if I don't know whatever

00:33:13,089 --> 00:33:18,649
apparently we're gonna take five percent

00:33:15,169 --> 00:33:20,419
off D three do you still remember what D

00:33:18,649 --> 00:33:23,749
three is in real life if you're not on a

00:33:20,419 --> 00:33:26,479
slide if you are wandering around in a

00:33:23,749 --> 00:33:28,759
multi tens of thousands of lines file or

00:33:26,479 --> 00:33:30,109
if d three is greater than D seven now

00:33:28,759 --> 00:33:35,629
you have to look two things up in your

00:33:30,109 --> 00:33:37,879
little mental lookup table tools do this

00:33:35,629 --> 00:33:40,009
okay I don't even have to do this the

00:33:37,879 --> 00:33:42,319
tool will do this double total revenue

00:33:40,009 --> 00:33:43,969
notice I can now drop the comment and

00:33:42,319 --> 00:33:45,709
now a thousand lines later when it says

00:33:43,969 --> 00:33:47,629
total revenue equals get gross receipts

00:33:45,709 --> 00:33:50,209
it's telling me a story I'm agreeing

00:33:47,629 --> 00:33:52,789
with it it's open it's obvious there's

00:33:50,209 --> 00:33:56,089
no lookup table I move right along later

00:33:52,789 --> 00:33:59,539
if whatever total revenue is you know

00:33:56,089 --> 00:34:01,339
top x 0.95 if total revenue is greater

00:33:59,539 --> 00:34:04,129
than old revenue I mean there's now a

00:34:01,339 --> 00:34:06,169
story that was not there even if you

00:34:04,129 --> 00:34:09,409
could remember that d3 was total revenue

00:34:06,169 --> 00:34:11,569
it didn't lay out as a story now it does

00:34:09,409 --> 00:34:16,669
and no this seems like it couldn't

00:34:11,569 --> 00:34:20,109
possibly really help it really helps and

00:34:16,669 --> 00:34:20,109
you can charge a lot of money for it I

00:34:20,589 --> 00:34:27,529
want your functions to be short oh yes

00:34:24,259 --> 00:34:29,059
15,000 line file oh yes actual chat

00:34:27,529 --> 00:34:32,539
conversation with someone else on the

00:34:29,059 --> 00:34:35,059
team if you go to line 8750 to you see

00:34:32,539 --> 00:34:37,279
what it does there it's a real thing in

00:34:35,059 --> 00:34:39,230
visual studio by the way ctrl G to go to

00:34:37,279 --> 00:34:43,339
a particular line number important

00:34:39,230 --> 00:34:45,559
information in my life but I don't want

00:34:43,339 --> 00:34:51,289
your function short so you can print

00:34:45,559 --> 00:34:55,460
them who printed a page this decade very

00:34:51,289 --> 00:34:56,799
small number of hands this year pretty

00:34:55,460 --> 00:34:59,630
much the same hands we got some

00:34:56,799 --> 00:35:01,789
recalcitrant printers

00:34:59,630 --> 00:35:02,960
I don't print things anymore I used to

00:35:01,789 --> 00:35:05,180
print things when they were seven pages

00:35:02,960 --> 00:35:07,069
long when they're half a page long I

00:35:05,180 --> 00:35:08,450
don't need to print them the only reason

00:35:07,069 --> 00:35:12,019
I'm printing them is to not to scroll

00:35:08,450 --> 00:35:15,380
but this isn't about printing I want

00:35:12,019 --> 00:35:19,309
your functions to be short so they can

00:35:15,380 --> 00:35:20,990
have a name you cannot give a good name

00:35:19,309 --> 00:35:23,359
to five thousand lines of code unless

00:35:20,990 --> 00:35:29,539
it's called do all the work or process

00:35:23,359 --> 00:35:30,619
everything or run the business if you

00:35:29,539 --> 00:35:34,910
can't name it

00:35:30,619 --> 00:35:36,200
maybe it isn't it okay I'm not saying

00:35:34,910 --> 00:35:38,269
you can't have and in your function

00:35:36,200 --> 00:35:40,789
names cuz sometimes you do but I'm

00:35:38,269 --> 00:35:47,720
saying if you don't have a name for it

00:35:40,789 --> 00:35:50,029
maybe it is two functions or seven and

00:35:47,720 --> 00:35:52,930
this is a good place to mention what I

00:35:50,029 --> 00:35:55,039
call emotionally short functions and

00:35:52,930 --> 00:35:56,269
I've mentioned emotionally short

00:35:55,039 --> 00:35:58,160
functions in a couple of different

00:35:56,269 --> 00:35:59,809
contexts and I have said I don't know

00:35:58,160 --> 00:36:02,000
how long standard accumulate is and

00:35:59,809 --> 00:36:03,470
every time I do that someone's in the

00:36:02,000 --> 00:36:06,259
room who wrote standard accumulate and

00:36:03,470 --> 00:36:08,119
who tells me but I don't know how long

00:36:06,259 --> 00:36:11,210
Center accumulate is I don't know how

00:36:08,119 --> 00:36:14,180
long find if is I don't care

00:36:11,210 --> 00:36:18,289
I never step into it God do you ever

00:36:14,180 --> 00:36:22,210
step into it it's zero lines as far as

00:36:18,289 --> 00:36:24,710
we're concerned so we're not responsible

00:36:22,210 --> 00:36:26,720
that's fantastic that's the shortest

00:36:24,710 --> 00:36:28,549
possible function the magic function

00:36:26,720 --> 00:36:29,839
that you don't need to know about and it

00:36:28,549 --> 00:36:32,079
doesn't have to be something from the

00:36:29,839 --> 00:36:34,910
standard library I work on a project

00:36:32,079 --> 00:36:36,769
where they load stuff from disk up into

00:36:34,910 --> 00:36:39,890
a ridiculous data structure that I'm not

00:36:36,769 --> 00:36:42,019
going to describe to you and then they

00:36:39,890 --> 00:36:44,329
work in the data structure but there are

00:36:42,019 --> 00:36:46,190
certain things that happen that require

00:36:44,329 --> 00:36:47,660
you the easiest thing to do is to just

00:36:46,190 --> 00:36:48,680
flush that data structure and reload

00:36:47,660 --> 00:36:50,720
from disk because it's gonna be

00:36:48,680 --> 00:36:53,299
calculated differently and this function

00:36:50,720 --> 00:36:55,369
is called update database and there are

00:36:53,299 --> 00:36:57,529
these places in the code where people

00:36:55,369 --> 00:36:59,809
and it's almost like an invocation wait

00:36:57,529 --> 00:37:02,180
before I do this we'll just call update

00:36:59,809 --> 00:37:03,799
database that may or may not be right

00:37:02,180 --> 00:37:06,470
but here's the point I've never stepped

00:37:03,799 --> 00:37:09,470
in to update database it was literally

00:37:06,470 --> 00:37:11,180
written in the last century and I don't

00:37:09,470 --> 00:37:12,829
know how it works I know what it does

00:37:11,180 --> 00:37:15,680
I've never stepped through it

00:37:12,829 --> 00:37:18,319
as far as I'm concerned it is zero lines

00:37:15,680 --> 00:37:20,539
long it might really be 10,000 lines

00:37:18,319 --> 00:37:22,219
long it's a good chance that it is but

00:37:20,539 --> 00:37:22,999
it hasn't changed it doesn't need to be

00:37:22,219 --> 00:37:26,209
maintained

00:37:22,999 --> 00:37:29,239
it just is if you have stuff like that

00:37:26,209 --> 00:37:32,089
in your universe and I bet you do those

00:37:29,239 --> 00:37:33,920
are also short functions and leave them

00:37:32,089 --> 00:37:35,690
alone don't get in there and simplify

00:37:33,920 --> 00:37:37,819
them they're already simple by being

00:37:35,690 --> 00:37:40,700
invisible that's that's as simple as you

00:37:37,819 --> 00:37:42,170
can get okay so don't assume that I want

00:37:40,700 --> 00:37:44,180
everything ten lines long

00:37:42,170 --> 00:37:45,920
only the things that we all have to read

00:37:44,180 --> 00:37:48,640
and step through and understand and

00:37:45,920 --> 00:37:50,749
modify and maintain and the new stuff

00:37:48,640 --> 00:37:59,599
please do not write a 10,000 line

00:37:50,749 --> 00:38:00,609
function this week this is real code are

00:37:59,599 --> 00:38:03,859
you having fun

00:38:00,609 --> 00:38:04,969
mr. pleasant is this Pleasant I don't

00:38:03,859 --> 00:38:07,430
think this is pleasant is it

00:38:04,969 --> 00:38:13,339
unsurprising oh no it is not

00:38:07,430 --> 00:38:17,479
unsurprising it is trying if you can't

00:38:13,339 --> 00:38:18,859
tell to parse a command line okay

00:38:17,479 --> 00:38:25,430
there's something there called LP

00:38:18,859 --> 00:38:29,900
command line Hungarian notation other

00:38:25,430 --> 00:38:32,599
people's code string stream now we'll

00:38:29,900 --> 00:38:36,440
parse it out you know what this does

00:38:32,599 --> 00:38:39,199
right I'm taking that command line and I

00:38:36,440 --> 00:38:40,699
am getting driver name and pipe name out

00:38:39,199 --> 00:38:42,349
of it I threw Hungarian under the walk

00:38:40,699 --> 00:38:45,799
under the bus and I also switched two

00:38:42,349 --> 00:38:47,479
strings and I say if the driver name is

00:38:45,799 --> 00:38:49,609
still blank or the pipe name is still

00:38:47,479 --> 00:38:52,279
Mike that's when we do not have a happy

00:38:49,609 --> 00:38:53,420
path otherwise I do some decorating to

00:38:52,279 --> 00:38:54,979
the pipe name which if you haven't had

00:38:53,420 --> 00:38:58,459
to do named pipes on Windows pay no

00:38:54,979 --> 00:39:02,140
attention to that then I return to these

00:38:58,459 --> 00:39:04,969
aren't quite identical code this version

00:39:02,140 --> 00:39:07,279
writes a space into the middle of the

00:39:04,969 --> 00:39:08,959
input string sorry writes a null into

00:39:07,279 --> 00:39:11,749
the middle of the input string so that

00:39:08,959 --> 00:39:13,699
it can use stir copy which will stop

00:39:11,749 --> 00:39:15,529
when it gets to the null and then it

00:39:13,699 --> 00:39:17,749
puts the space back which means you

00:39:15,529 --> 00:39:20,180
can't give it a Const string because

00:39:17,749 --> 00:39:23,180
you're changing it which means it's very

00:39:20,180 --> 00:39:23,490
hard to mock and test that's how I came

00:39:23,180 --> 00:39:26,369
to

00:39:23,490 --> 00:39:28,440
change this code this is not simple code

00:39:26,369 --> 00:39:30,780
you puzzle your wait why are you

00:39:28,440 --> 00:39:32,550
suddenly writing a null into the middle

00:39:30,780 --> 00:39:35,280
of the string well it's a hack so that

00:39:32,550 --> 00:39:39,450
you can use copy this fails on a lot of

00:39:35,280 --> 00:39:41,190
a lot of points this code is simpler it

00:39:39,450 --> 00:39:44,160
is shorter but that's really not the

00:39:41,190 --> 00:39:46,590
deal right requires you to know what a

00:39:44,160 --> 00:39:48,780
string stream is also requires you to

00:39:46,590 --> 00:39:51,180
deal with the person in the coffee-room

00:39:48,780 --> 00:39:52,290
who gets on the streams are slow

00:39:51,180 --> 00:39:55,800
hobbyhorse

00:39:52,290 --> 00:39:57,900
I am parsing two strings out of a

00:39:55,800 --> 00:40:00,140
command line for a server that runs for

00:39:57,900 --> 00:40:00,140
weeks

00:40:00,470 --> 00:40:07,880
remember don't choose simplicity over

00:40:03,060 --> 00:40:07,880
performance if that's really the issue

00:40:08,990 --> 00:40:15,240
it's more simple things you can do long

00:40:13,230 --> 00:40:17,670
long lists of parameters 10 parameters

00:40:15,240 --> 00:40:22,220
20 parameters especially when they're

00:40:17,670 --> 00:40:22,220
all the same type that's fun isn't it

00:40:22,430 --> 00:40:28,530
here I really feel it's about

00:40:24,810 --> 00:40:30,660
abstraction if this thing takes seven

00:40:28,530 --> 00:40:32,880
bowls make a struct with seven bulls in

00:40:30,660 --> 00:40:35,280
it that have names and pass an instance

00:40:32,880 --> 00:40:37,740
of that struct and you can set the

00:40:35,280 --> 00:40:39,540
struct up before the call everybody can

00:40:37,740 --> 00:40:42,119
see what's happening you're setting

00:40:39,540 --> 00:40:45,000
verbose to true you're setting auto

00:40:42,119 --> 00:40:47,130
print to false and so on rather than oh

00:40:45,000 --> 00:40:48,390
look they called false false false true

00:40:47,130 --> 00:40:52,830
but they should have called false false

00:40:48,390 --> 00:40:54,660
false false that's an easy bug spot it's

00:40:52,830 --> 00:40:56,850
all the more so if your abstraction

00:40:54,660 --> 00:40:58,980
actually has meaning the number of

00:40:56,850 --> 00:41:01,560
rectangle Y oriented functions that take

00:40:58,980 --> 00:41:03,540
four integers that I have seen is well

00:41:01,560 --> 00:41:06,990
about a hundred more than anyone should

00:41:03,540 --> 00:41:12,270
be asked to see and what do the integers

00:41:06,990 --> 00:41:15,570
mean right are they x1 y1 x2 y2 or are

00:41:12,270 --> 00:41:17,460
they x1 y1 width height or height width

00:41:15,570 --> 00:41:20,250
or whatever they're lots of possible X

00:41:17,460 --> 00:41:23,190
x1 x2 y1 y2 like you you do not know

00:41:20,250 --> 00:41:25,560
right and you have to pray for good

00:41:23,190 --> 00:41:28,320
parameter names if there are any at all

00:41:25,560 --> 00:41:31,440
or go and read the code those are both

00:41:28,320 --> 00:41:33,240
awful but if I change this function now

00:41:31,440 --> 00:41:34,440
so that it takes a rectangle and that's

00:41:33,240 --> 00:41:35,940
I know it's kicking the can down the

00:41:34,440 --> 00:41:36,160
road but someone's defined rectangle for

00:41:35,940 --> 00:41:40,810
me

00:41:36,160 --> 00:41:42,760
or so that it takes two points now this

00:41:40,810 --> 00:41:45,190
function is easier to call almost

00:41:42,760 --> 00:41:49,900
impossible to call wrong for the rest of

00:41:45,190 --> 00:41:53,440
time three strings and afloat what is

00:41:49,900 --> 00:41:55,540
that in your world is that a person is

00:41:53,440 --> 00:41:59,800
that some business object like an order

00:41:55,540 --> 00:42:02,770
or an invoice or a policy make that and

00:41:59,800 --> 00:42:04,570
I literally advocate if you're

00:42:02,770 --> 00:42:05,950
maintaining old code if you're writing

00:42:04,570 --> 00:42:07,570
it you should be writing it right from

00:42:05,950 --> 00:42:10,380
you shouldn't be what are you doing

00:42:07,570 --> 00:42:13,840
typing bull bull bull bull bull stop it

00:42:10,380 --> 00:42:15,790
these things tend to grow the function

00:42:13,840 --> 00:42:19,270
doesn't take any parameters then it gets

00:42:15,790 --> 00:42:21,580
one bull and gets another one 20 years

00:42:19,270 --> 00:42:27,730
is a long time it gets seven rules the

00:42:21,580 --> 00:42:30,580
first three aren't used anymore but when

00:42:27,730 --> 00:42:32,380
you go into this code for the first time

00:42:30,580 --> 00:42:34,420
in 15 years and you gain the

00:42:32,380 --> 00:42:37,660
understanding say of what these four

00:42:34,420 --> 00:42:39,640
integers are I actually advocate for

00:42:37,660 --> 00:42:42,040
recording that understanding immediately

00:42:39,640 --> 00:42:43,630
by refactoring and just right then and

00:42:42,040 --> 00:42:46,930
there as soon as you get oh it's two

00:42:43,630 --> 00:42:48,610
points make it be two points because you

00:42:46,930 --> 00:42:51,190
have put in ninety ninety-five percent

00:42:48,610 --> 00:42:54,010
of the effort by figuring out it was two

00:42:51,190 --> 00:42:56,710
points the actual changing the signature

00:42:54,010 --> 00:42:58,630
we have tools right the actual changing

00:42:56,710 --> 00:43:00,820
the signature is almost nothing almost

00:42:58,630 --> 00:43:06,280
as quick as typing the comment and then

00:43:00,820 --> 00:43:08,110
it's done forever sometimes the reason

00:43:06,280 --> 00:43:09,730
you have so many parameters is because

00:43:08,110 --> 00:43:11,860
like the function that couldn't come up

00:43:09,730 --> 00:43:14,470
with a good name it isn't really one

00:43:11,860 --> 00:43:16,450
function the top third of the function

00:43:14,470 --> 00:43:18,310
uses three of the parameters the bottom

00:43:16,450 --> 00:43:21,570
third uses the other you know like it's

00:43:18,310 --> 00:43:24,550
really independent of each other and

00:43:21,570 --> 00:43:26,500
sometimes I will advocate for breaking

00:43:24,550 --> 00:43:28,930
it up and I don't mean that you have the

00:43:26,500 --> 00:43:30,760
big ten per M function calling the three

00:43:28,930 --> 00:43:32,470
smaller functions I mean you actually

00:43:30,760 --> 00:43:34,720
have the three smaller functions and the

00:43:32,470 --> 00:43:37,180
call site calls all three of them now I

00:43:34,720 --> 00:43:38,350
know if there are multiple call sites

00:43:37,180 --> 00:43:40,900
and they all have to remember to phone

00:43:38,350 --> 00:43:42,730
to call all three maybe I'm setting you

00:43:40,900 --> 00:43:44,020
up to being consistent someone could

00:43:42,730 --> 00:43:47,040
drop one of the three calls

00:43:44,020 --> 00:43:49,630
hey these rules contradict themselves

00:43:47,040 --> 00:43:49,870
judgment and experience still count for

00:43:49,630 --> 00:43:51,430
some

00:43:49,870 --> 00:43:53,170
thing there are times when you do it

00:43:51,430 --> 00:43:55,150
this way there are times when you do it

00:43:53,170 --> 00:43:59,410
that way I didn't say this was going to

00:43:55,150 --> 00:44:02,050
be easy the other way to get rid of

00:43:59,410 --> 00:44:04,630
parameters I know all the cool kids are

00:44:02,050 --> 00:44:06,580
all free functions these days but member

00:44:04,630 --> 00:44:12,130
functions and encapsulation do serve a

00:44:06,580 --> 00:44:14,230
purpose if this is taking especially

00:44:12,130 --> 00:44:15,880
multiple properties of some individual

00:44:14,230 --> 00:44:18,070
object maybe it should be a member

00:44:15,880 --> 00:44:19,720
function of that object and this may be

00:44:18,070 --> 00:44:22,630
a multi-step thing it may start by

00:44:19,720 --> 00:44:24,100
taking you know six strings and then you

00:44:22,630 --> 00:44:25,270
may decide to do some encapsulation

00:44:24,100 --> 00:44:27,340
elsewhere and so then when you get to

00:44:25,270 --> 00:44:29,260
this function it's like a dot first name

00:44:27,340 --> 00:44:31,720
a dot last name need a department name

00:44:29,260 --> 00:44:34,540
and you're like wait if this was a

00:44:31,720 --> 00:44:36,490
member function of the e object we would

00:44:34,540 --> 00:44:39,130
have a lot less junk to pass back and

00:44:36,490 --> 00:44:44,950
forth it doesn't always happen but look

00:44:39,130 --> 00:44:47,740
for it be open to it this is arrow code

00:44:44,950 --> 00:44:50,290
and I know some of you are going to try

00:44:47,740 --> 00:44:55,660
to read it and I can't make it smaller

00:44:50,290 --> 00:44:56,590
so please stop trying to read it I will

00:44:55,660 --> 00:44:59,020
read it to you okay

00:44:56,590 --> 00:45:02,290
it's called calculate and it has three

00:44:59,020 --> 00:45:04,510
tests in it it says is X less than the

00:45:02,290 --> 00:45:06,460
limit okay good we can keep going down

00:45:04,510 --> 00:45:09,550
at the bottom there's an else where we

00:45:06,460 --> 00:45:12,130
set an error code in return bull turn

00:45:09,550 --> 00:45:13,570
false because it was bad assuming X was

00:45:12,130 --> 00:45:15,100
less than the limit we say well is Y

00:45:13,570 --> 00:45:19,000
positive is it greater than or equal to

00:45:15,100 --> 00:45:21,670
zero actually non-negative good we'll

00:45:19,000 --> 00:45:24,130
keep going are we shipping excellent and

00:45:21,670 --> 00:45:25,660
here's where the actual magic happens

00:45:24,130 --> 00:45:27,880
you notice in order to fit this on the

00:45:25,660 --> 00:45:30,100
screen I couldn't have any magic but

00:45:27,880 --> 00:45:33,160
there's magic and we return true and

00:45:30,100 --> 00:45:35,800
then everything else is else's this code

00:45:33,160 --> 00:45:37,300
is not simple imagine that you are a

00:45:35,800 --> 00:45:39,070
junior developer you are new to the

00:45:37,300 --> 00:45:40,570
project and we have a fourth rule and it

00:45:39,070 --> 00:45:43,900
is your job to put the fourth rule into

00:45:40,570 --> 00:45:45,280
this code I'm pretty sure you're going

00:45:43,900 --> 00:45:47,830
to put your else in the wrong place on

00:45:45,280 --> 00:45:49,270
your first try it's also hard to read

00:45:47,830 --> 00:45:51,430
it's hard to understand you can very

00:45:49,270 --> 00:45:53,230
clearly see that we only do the magic if

00:45:51,430 --> 00:45:55,900
X is under the limit if Y is

00:45:53,230 --> 00:45:57,010
non-negative and if we are shipping but

00:45:55,900 --> 00:46:02,560
the rest of it can be a little hard to

00:45:57,010 --> 00:46:04,150
follow this is the exact same logic

00:46:02,560 --> 00:46:05,470
I did not change the signature I always

00:46:04,150 --> 00:46:07,120
get someone is like well you shouldn't

00:46:05,470 --> 00:46:07,630
return bull what about expected blah

00:46:07,120 --> 00:46:09,580
blah blah

00:46:07,630 --> 00:46:10,930
in the most simple refactorings you

00:46:09,580 --> 00:46:12,550
don't you're not changing the signature

00:46:10,930 --> 00:46:14,350
so the behavior is unchanged

00:46:12,550 --> 00:46:18,730
we still return a bool we still set this

00:46:14,350 --> 00:46:21,310
member variable error but now you notice

00:46:18,730 --> 00:46:22,990
the font got bigger you notice there's a

00:46:21,310 --> 00:46:27,760
lot less lines of code on the screen and

00:46:22,990 --> 00:46:31,950
the magic is here at the margin rather

00:46:27,760 --> 00:46:36,510
than before way over to the side and

00:46:31,950 --> 00:46:40,840
that's important finding the good stuff

00:46:36,510 --> 00:46:44,680
easily but also if you were the person

00:46:40,840 --> 00:46:47,440
to add the fourth test right nothing to

00:46:44,680 --> 00:46:48,550
that put it anywhere because that's part

00:46:47,440 --> 00:46:50,950
of the problem it's like well I want to

00:46:48,550 --> 00:46:54,370
test after X but before why because

00:46:50,950 --> 00:46:56,890
optimization and you can do that here

00:46:54,370 --> 00:46:59,170
anywhere you want the errors are exactly

00:46:56,890 --> 00:47:01,840
with the conditions the conditions by

00:46:59,170 --> 00:47:03,520
the way are flipped right so I was

00:47:01,840 --> 00:47:06,040
before I was like if X is less than the

00:47:03,520 --> 00:47:08,170
limit now I'm saying the badness if X is

00:47:06,040 --> 00:47:09,550
greater than or equal to the limit so

00:47:08,170 --> 00:47:12,670
you do have to do that and it is a

00:47:09,550 --> 00:47:16,030
possible bug so tests will help you but

00:47:12,670 --> 00:47:16,870
now your code is more readable and it's

00:47:16,030 --> 00:47:18,160
telling a story

00:47:16,870 --> 00:47:20,400
you're clearly checking all your

00:47:18,160 --> 00:47:23,110
preconditions and if we're still here

00:47:20,400 --> 00:47:25,510
now we're gonna do it and that's why it

00:47:23,110 --> 00:47:28,060
got shorter yeah I don't need an elf's

00:47:25,510 --> 00:47:29,590
when you return the if and that's the

00:47:28,060 --> 00:47:31,000
only thing that took away lines of code

00:47:29,590 --> 00:47:32,620
I made the font bigger is not having to

00:47:31,000 --> 00:47:36,330
have else's but it's also what

00:47:32,620 --> 00:47:36,330
eliminated all that sideways scrolling

00:47:39,090 --> 00:47:46,210
I'm a big fan of XS constant as an

00:47:43,780 --> 00:47:48,670
exploration technique so I don't mean

00:47:46,210 --> 00:47:50,740
concept Ness I really I consider that to

00:47:48,670 --> 00:47:52,780
be the price of admission okay if your

00:47:50,740 --> 00:47:54,790
code is not constant correct make a code

00:47:52,780 --> 00:47:58,000
cost correct but this is going beyond

00:47:54,790 --> 00:48:00,070
that so you just literally you get

00:47:58,000 --> 00:48:02,320
constant your clipboard buffer and you

00:48:00,070 --> 00:48:03,760
go punk punk punk punk punk boom all the

00:48:02,320 --> 00:48:04,780
local variables all the parameters the

00:48:03,760 --> 00:48:07,210
ends of all the member functions

00:48:04,780 --> 00:48:10,480
everything and then you build no

00:48:07,210 --> 00:48:11,740
thinking just build and of course it's

00:48:10,480 --> 00:48:14,140
going to fail right some of those things

00:48:11,740 --> 00:48:15,600
are not caused and you're like that's

00:48:14,140 --> 00:48:19,440
fine I'll take those off

00:48:15,600 --> 00:48:22,800
but some will stay especially in a long

00:48:19,440 --> 00:48:25,560
calculation that came from a paper

00:48:22,800 --> 00:48:28,140
process or a spreadsheet process there's

00:48:25,560 --> 00:48:30,630
all these like intermediate things so

00:48:28,140 --> 00:48:32,880
they say here's the total revenue and

00:48:30,630 --> 00:48:35,070
there's a big long expression and here's

00:48:32,880 --> 00:48:36,900
the total population there's another big

00:48:35,070 --> 00:48:38,820
long expression and then they're like so

00:48:36,900 --> 00:48:41,750
the ratio is and they divide them and

00:48:38,820 --> 00:48:44,250
they never change those variables again

00:48:41,750 --> 00:48:46,260
they're got names to lead someone

00:48:44,250 --> 00:48:49,620
through the calculation so marking them

00:48:46,260 --> 00:48:51,510
Const like it's not preventing a bug or

00:48:49,620 --> 00:48:54,270
enabling optimization or all the reasons

00:48:51,510 --> 00:48:56,790
we tell you to Const but when I come

00:48:54,270 --> 00:49:00,360
into this code 15 years from now I'm

00:48:56,790 --> 00:49:02,880
gonna say ah you have ten variables but

00:49:00,360 --> 00:49:04,890
you don't really only two of them

00:49:02,880 --> 00:49:07,200
continue to change after their first

00:49:04,890 --> 00:49:10,380
value and so as I read through the next

00:49:07,200 --> 00:49:13,110
thousand lines I only have to have my

00:49:10,380 --> 00:49:15,330
little alert table keeping track of just

00:49:13,110 --> 00:49:17,850
those two the others are just numbers

00:49:15,330 --> 00:49:19,710
with names they're not constants in the

00:49:17,850 --> 00:49:22,260
sense of Anna knew more a compile time

00:49:19,710 --> 00:49:24,240
expression but they don't change once

00:49:22,260 --> 00:49:26,460
they get a value I have less to keep

00:49:24,240 --> 00:49:29,370
track of my cognitive burden goes down

00:49:26,460 --> 00:49:31,920
and it's not a hard thing to do because

00:49:29,370 --> 00:49:33,570
I don't think just paste paste paste

00:49:31,920 --> 00:49:34,860
paste paste build and then delete delete

00:49:33,570 --> 00:49:41,670
delete tilaka pilers happy it's like

00:49:34,860 --> 00:49:44,700
you're back in first year again this

00:49:41,670 --> 00:49:47,340
hurts hard when you have out params and

00:49:44,700 --> 00:49:48,360
in out prints right in fact some people

00:49:47,340 --> 00:49:50,310
may have been mumbling that to

00:49:48,360 --> 00:49:52,260
themselves like a reasonable point until

00:49:50,310 --> 00:49:54,720
you have an out print you know what I'm

00:49:52,260 --> 00:49:57,510
going to say yeah don't have a no

00:49:54,720 --> 00:49:59,940
parameter what I'm going to say it I've

00:49:57,510 --> 00:50:01,740
considered a feature that this makes it

00:49:59,940 --> 00:50:03,210
painful to have out params because you

00:50:01,740 --> 00:50:05,550
slam the Constanta everything and then

00:50:03,210 --> 00:50:06,630
suddenly it's not concentrated and all

00:50:05,550 --> 00:50:08,850
you're doing is passing that's what

00:50:06,630 --> 00:50:10,710
that's also why I say don't think okay

00:50:08,850 --> 00:50:12,270
because you see it being passed to a

00:50:10,710 --> 00:50:13,530
function don't stop and figure out if

00:50:12,270 --> 00:50:16,380
the function changes that the compiler

00:50:13,530 --> 00:50:19,410
will tell you this is a good opportunity

00:50:16,380 --> 00:50:21,660
to discover in out params and out params

00:50:19,410 --> 00:50:23,310
and to perhaps replace them if you're

00:50:21,660 --> 00:50:25,170
out if you're able to change this to

00:50:23,310 --> 00:50:27,030
signature of the function that's being

00:50:25,170 --> 00:50:30,420
called so that it returns something

00:50:27,030 --> 00:50:32,820
useful and you can return

00:50:30,420 --> 00:50:35,550
some encapsulation of your own devising

00:50:32,820 --> 00:50:38,070
a structure a class you can return stood

00:50:35,550 --> 00:50:40,589
optional and yes you can even return a

00:50:38,070 --> 00:50:40,920
tuple here's how I tend to return to

00:50:40,589 --> 00:50:43,020
pols

00:50:40,920 --> 00:50:44,670
first the function returns nothing at

00:50:43,020 --> 00:50:47,160
all just does something then it returns

00:50:44,670 --> 00:50:49,320
an int then it needs to return to intz

00:50:47,160 --> 00:50:51,210
then it needs to return to instant a

00:50:49,320 --> 00:50:53,099
string so I use a tuple and eventually I

00:50:51,210 --> 00:50:55,320
give up and I encapsulate something

00:50:53,099 --> 00:50:56,640
sensible and that if you get all of that

00:50:55,320 --> 00:50:59,460
all at once you'll probably just go

00:50:56,640 --> 00:51:01,530
straight to the struct and again maybe

00:50:59,460 --> 00:51:03,750
this should be a member function of that

00:51:01,530 --> 00:51:05,670
in out thing so if you have an update

00:51:03,750 --> 00:51:09,150
employee info that takes an employee by

00:51:05,670 --> 00:51:12,030
reference what's why isn't that the

00:51:09,150 --> 00:51:13,950
employees update info member function

00:51:12,030 --> 00:51:16,050
which can be non constant not objecting

00:51:13,950 --> 00:51:17,849
to non constant functions so you know a

00:51:16,050 --> 00:51:19,200
lot of times out params are kind of a

00:51:17,849 --> 00:51:25,109
sign that maybe we're not as

00:51:19,200 --> 00:51:29,550
encapsulated as we should be you're all

00:51:25,109 --> 00:51:32,580
here so you already want to keep up with

00:51:29,550 --> 00:51:35,070
what's happening in our world you need

00:51:32,580 --> 00:51:39,530
to spread the word to everyone that

00:51:35,070 --> 00:51:43,980
there is no substitute for keeping up I

00:51:39,530 --> 00:51:46,200
did a talk here last year about the core

00:51:43,980 --> 00:51:48,869
guidelines one of them is like don't use

00:51:46,200 --> 00:51:51,060
Const cast alternative to cons cast the

00:51:48,869 --> 00:51:53,190
mutable keyword a bunch of people

00:51:51,060 --> 00:51:55,200
afterwards on Twitter that mutable thing

00:51:53,190 --> 00:51:57,089
looks kind of interesting I should try

00:51:55,200 --> 00:52:00,240
that I wonder when that came into the

00:51:57,089 --> 00:52:05,460
language it was a difficult question to

00:52:00,240 --> 00:52:07,430
ask it turns out I had a 24 year old at

00:52:05,460 --> 00:52:13,460
the time and mutable is older than him

00:52:07,430 --> 00:52:13,460
okay not a new concept sorry idea

00:52:16,589 --> 00:52:23,200
if you're gonna use loops can you use

00:52:20,140 --> 00:52:25,150
arranged for I know your fingers do the

00:52:23,200 --> 00:52:28,119
other four like without you thinking

00:52:25,150 --> 00:52:30,790
right you go loop and it comes out but

00:52:28,119 --> 00:52:34,390
can you use arranged for can you

00:52:30,790 --> 00:52:38,200
reprogram your fingers I still meet

00:52:34,390 --> 00:52:40,119
private constructors and there's some

00:52:38,200 --> 00:52:41,500
times correct right you guys I've got a

00:52:40,119 --> 00:52:44,320
factory thing

00:52:41,500 --> 00:52:46,060
singleton boo hiss where there is

00:52:44,320 --> 00:52:47,890
actually a friend or a member function

00:52:46,060 --> 00:52:51,640
that's calling the constructor that

00:52:47,890 --> 00:52:53,830
constructor should be private but when I

00:52:51,640 --> 00:52:57,030
go looking and I can't find any code

00:52:53,830 --> 00:52:59,440
that calls the constructor I'm puzzled

00:52:57,030 --> 00:53:02,140
why is why did they write this

00:52:59,440 --> 00:53:04,210
constructor then you're oh of course

00:53:02,140 --> 00:53:07,720
they're suppressing this constructor

00:53:04,210 --> 00:53:09,190
right but we have delete for that when

00:53:07,720 --> 00:53:11,170
you don't say delete when you make it

00:53:09,190 --> 00:53:15,400
private I go looking to see who calls it

00:53:11,170 --> 00:53:17,589
when you say delete mystery over so it's

00:53:15,400 --> 00:53:20,109
a simple little change but it's

00:53:17,589 --> 00:53:21,310
communicating to me compiler probably

00:53:20,109 --> 00:53:23,260
couldn't care less which of the two you

00:53:21,310 --> 00:53:26,589
do but I would prefer you make them

00:53:23,260 --> 00:53:29,170
delete it non-static member initializers

00:53:26,589 --> 00:53:32,020
not particularly new yet still not being

00:53:29,170 --> 00:53:35,530
used I don't know why they are easier

00:53:32,020 --> 00:53:37,750
and faster and you can't forget when you

00:53:35,530 --> 00:53:39,160
add another constructor and you probably

00:53:37,750 --> 00:53:42,280
won't forget when you add another member

00:53:39,160 --> 00:53:45,130
variable so for default values of member

00:53:42,280 --> 00:53:47,770
variables used on static member

00:53:45,130 --> 00:53:51,970
initializers can you you'd be grateful

00:53:47,770 --> 00:53:54,160
that you have them oops the library I

00:53:51,970 --> 00:53:57,130
didn't say keep up with the language I

00:53:54,160 --> 00:54:01,270
said keep up with the library stood

00:53:57,130 --> 00:54:04,900
optional straight stood expected is

00:54:01,270 --> 00:54:06,609
great things are happening people are

00:54:04,900 --> 00:54:08,890
writing things so that you don't have to

00:54:06,609 --> 00:54:12,250
if you think you should write a simple

00:54:08,890 --> 00:54:14,859
wrapper that please stop and use the

00:54:12,250 --> 00:54:16,900
library if it's not in the library and

00:54:14,859 --> 00:54:18,400
you and you know it's also not on its

00:54:16,900 --> 00:54:20,349
way and you can't get it in some sort of

00:54:18,400 --> 00:54:22,119
experimental version then maybe you will

00:54:20,349 --> 00:54:24,490
but honestly anything you can think of

00:54:22,119 --> 00:54:27,010
in 15 seconds is probably not that

00:54:24,490 --> 00:54:27,980
unique and original so the library keeps

00:54:27,010 --> 00:54:31,930
changing

00:54:27,980 --> 00:54:31,930
knowing that the library is changing

00:54:32,950 --> 00:54:39,980
when I was very young I've been paid to

00:54:37,100 --> 00:54:41,600
program since 1979 and I didn't learn to

00:54:39,980 --> 00:54:44,090
program on that in that job I already

00:54:41,600 --> 00:54:45,230
knew I had a great uncle who I didn't

00:54:44,090 --> 00:54:49,130
see very often is the way of great

00:54:45,230 --> 00:54:50,600
uncles and he said oh look at you you've

00:54:49,130 --> 00:54:55,330
grown up you're an adult what are you

00:54:50,600 --> 00:54:55,330
doing I'm like oh I'm a programmer oh

00:54:55,450 --> 00:55:00,100
you were such a creative little girl

00:55:00,410 --> 00:55:07,050
what I think he thought it was like

00:55:04,200 --> 00:55:08,640
being maybe an operator you know that

00:55:07,050 --> 00:55:11,640
was mounting tapes and putting card

00:55:08,640 --> 00:55:13,620
decks into card readers and things huh

00:55:11,640 --> 00:55:15,090
as creative as is possible to be because

00:55:13,620 --> 00:55:18,120
I'd make worlds out of the skin of my

00:55:15,090 --> 00:55:19,860
fingertips right and we all do and I

00:55:18,120 --> 00:55:22,260
think we all have learned that

00:55:19,860 --> 00:55:24,150
programming is a creative activity now I

00:55:22,260 --> 00:55:28,500
want to convince you that programming is

00:55:24,150 --> 00:55:31,590
a social activity it's asynchronous but

00:55:28,500 --> 00:55:34,800
you are communicating you are making

00:55:31,590 --> 00:55:39,150
code and leaving behind code and it

00:55:34,800 --> 00:55:41,070
speaks it's not the immediacy of yelling

00:55:39,150 --> 00:55:44,520
at someone in slack but it is

00:55:41,070 --> 00:55:46,800
communication and I'd like you to

00:55:44,520 --> 00:55:48,840
consider a constant fellow and from

00:55:46,800 --> 00:55:52,860
other people who quoted to me Rico

00:55:48,840 --> 00:55:56,100
Mariani called the pit of success you

00:55:52,860 --> 00:55:59,310
want your people to fall into the pit of

00:55:56,100 --> 00:56:00,750
success what I mean by that what he

00:55:59,310 --> 00:56:04,290
means by that it's a wonderful analogy

00:56:00,750 --> 00:56:09,050
the most obvious thing the no-brainer

00:56:04,290 --> 00:56:11,750
choice the zero effort behavior they win

00:56:09,050 --> 00:56:14,220
for whatever definition of win you want

00:56:11,750 --> 00:56:18,060
so if you have people working for you

00:56:14,220 --> 00:56:20,430
and you would like them all to start

00:56:18,060 --> 00:56:22,080
coming to conferences you make it so

00:56:20,430 --> 00:56:23,280
they all go to conferences and they have

00:56:22,080 --> 00:56:25,320
to go to a lot of trouble not to go to

00:56:23,280 --> 00:56:26,610
conferences if you have people working

00:56:25,320 --> 00:56:28,950
for you and you would like them to show

00:56:26,610 --> 00:56:31,950
leadership abilities and lead things and

00:56:28,950 --> 00:56:33,420
make decisions you set things up so

00:56:31,950 --> 00:56:36,840
that's what they're doing and they have

00:56:33,420 --> 00:56:40,410
to go to some trouble not to when you

00:56:36,840 --> 00:56:42,810
leave code behind you can leave behind a

00:56:40,410 --> 00:56:46,260
pit of success for the person after you

00:56:42,810 --> 00:56:48,090
to fall into you set up defaults and if

00:56:46,260 --> 00:56:51,210
they follow right along and don't think

00:56:48,090 --> 00:56:53,640
the goodness will happen all right

00:56:51,210 --> 00:56:56,580
that's what you're setting up and not

00:56:53,640 --> 00:57:00,870
just next chronologically it can also be

00:56:56,580 --> 00:57:02,520
next sitting at the next chair think

00:57:00,870 --> 00:57:03,540
about what you're saying to people with

00:57:02,520 --> 00:57:06,630
what you write

00:57:03,540 --> 00:57:08,070
I've railed a couple times about being

00:57:06,630 --> 00:57:10,920
inconsistent about setting up

00:57:08,070 --> 00:57:12,420
opportunities to be inconsistent when

00:57:10,920 --> 00:57:13,410
you leave that behind you're not leaving

00:57:12,420 --> 00:57:15,420
behind a pit of success

00:57:13,410 --> 00:57:17,010
they have to climb like a mountain of

00:57:15,420 --> 00:57:19,680
success by changing it in all the places

00:57:17,010 --> 00:57:22,140
it needs to be changed if there's only

00:57:19,680 --> 00:57:23,790
one thing they can't be inconsistent

00:57:22,140 --> 00:57:25,680
when they do the obvious thing which has

00:57:23,790 --> 00:57:27,990
changed the single function they're done

00:57:25,680 --> 00:57:31,740
they win they succeed it you set that up

00:57:27,990 --> 00:57:33,600
for them same with non-static member

00:57:31,740 --> 00:57:35,160
initializers right when they add another

00:57:33,600 --> 00:57:37,470
constructor they're not going to add an

00:57:35,160 --> 00:57:40,980
inconsistent default value all of these

00:57:37,470 --> 00:57:42,780
things set them up to succeed if you've

00:57:40,980 --> 00:57:45,000
got good encapsulation and you've put

00:57:42,780 --> 00:57:47,760
your clean up in the destructor they

00:57:45,000 --> 00:57:49,590
don't have to remember to clean up when

00:57:47,760 --> 00:57:52,470
someone later adds a throw that didn't

00:57:49,590 --> 00:57:54,600
use to be there the bug of like oh yeah

00:57:52,470 --> 00:57:56,570
so I need to clean up in the catch is

00:57:54,600 --> 00:58:02,070
never going to happen

00:57:56,570 --> 00:58:06,600
you set that up who's played chase the

00:58:02,070 --> 00:58:07,890
Const these are not happy hands you know

00:58:06,600 --> 00:58:10,770
sometimes you ask people questions are

00:58:07,890 --> 00:58:14,100
like yeah I do that I love that and that

00:58:10,770 --> 00:58:17,640
was not what those hands said if you

00:58:14,100 --> 00:58:19,680
start Const correct nobody will ever

00:58:17,640 --> 00:58:21,720
have to play chase the Const and swear

00:58:19,680 --> 00:58:24,600
at you but also they'll probably follow

00:58:21,720 --> 00:58:26,370
along right when they see member

00:58:24,600 --> 00:58:27,990
variable member functions marked cost

00:58:26,370 --> 00:58:29,190
when they write a new class they're

00:58:27,990 --> 00:58:30,510
going to stop and think about whether

00:58:29,190 --> 00:58:32,580
they should mark their member functions

00:58:30,510 --> 00:58:34,530
cost and they see parameters being taken

00:58:32,580 --> 00:58:35,730
by Const ref they're going to almost

00:58:34,530 --> 00:58:37,140
think that that's the boilerplate that

00:58:35,730 --> 00:58:41,310
they should be following so you're

00:58:37,140 --> 00:58:43,620
setting them up to be right you write

00:58:41,310 --> 00:58:47,370
good names you write short functions

00:58:43,620 --> 00:58:51,090
that's what we do here you write a to be

00:58:47,370 --> 00:58:58,260
7 X 3 they'll be right behind you with a

00:58:51,090 --> 00:59:01,230
3 and B 8 and X 4 now I do sometimes get

00:58:58,260 --> 00:59:03,360
pushed back because I'm telling you how

00:59:01,230 --> 00:59:04,800
to write tell you how to write for

00:59:03,360 --> 00:59:06,840
yourself I'm telling you how to write

00:59:04,800 --> 00:59:09,240
for the people after you telling you to

00:59:06,840 --> 00:59:12,210
set things up like they were babies who

00:59:09,240 --> 00:59:15,300
need to be led and people say we don't

00:59:12,210 --> 00:59:17,430
need guidelines we don't need advice we

00:59:15,300 --> 00:59:20,100
can read 50 lines of code we're big boys

00:59:17,430 --> 00:59:23,010
and girls so I want to show you this

00:59:20,100 --> 00:59:25,720
picture I bet you think this is a

00:59:23,010 --> 00:59:27,940
picture of a river it's not

00:59:25,720 --> 00:59:29,890
I mean the rivers in the picture most um

00:59:27,940 --> 00:59:31,990
I took it to blocks of Lots pictures of

00:59:29,890 --> 00:59:37,119
this river I took a picture of this

00:59:31,990 --> 00:59:40,180
guide rail this guardrail astonished me

00:59:37,119 --> 00:59:42,540
by existing you see the day before I

00:59:40,180 --> 00:59:48,340
took this picture I took this picture

00:59:42,540 --> 00:59:55,180
it's a volcano down where you can't see

00:59:48,340 --> 00:59:57,340
is lava every 15 or 20 seconds it starts

00:59:55,180 --> 00:59:58,810
to make a noise and then always gets

00:59:57,340 --> 01:00:00,130
louder and louder and it reeks you

00:59:58,810 --> 01:00:02,950
wouldn't believe how it reeks and then

01:00:00,130 --> 01:00:04,540
lava comes out there's blobs they look

01:00:02,950 --> 01:00:08,650
like rocks between me and the man I

01:00:04,540 --> 01:00:10,359
don't know their drops of lava in fact

01:00:08,650 --> 01:00:11,619
surely left it took this picture a lady

01:00:10,359 --> 01:00:13,150
and flip-flops came by and told me that

01:00:11,619 --> 01:00:15,130
I needed to move a little further up the

01:00:13,150 --> 01:00:16,510
mountain because some lava had landed

01:00:15,130 --> 01:00:18,010
where I was standing two weeks before

01:00:16,510 --> 01:00:21,660
and she wouldn't want me to hit me hit

01:00:18,010 --> 01:00:21,660
by lava there's a very nice of her

01:00:22,380 --> 01:00:29,440
there's no fence right you stand as

01:00:26,710 --> 01:00:31,750
close to the lava as you feel like and

01:00:29,440 --> 01:00:33,190
if mr. raincoat wanted to jump over the

01:00:31,750 --> 01:00:35,680
edge none of us could have stopped him

01:00:33,190 --> 01:00:37,330
but he's a big adult and he didn't jump

01:00:35,680 --> 01:00:39,640
over the edge nobody jumped over you see

01:00:37,330 --> 01:00:42,339
people gone higher so after this

01:00:39,640 --> 01:00:44,109
experience when I was walking up this

01:00:42,339 --> 01:00:45,490
river I'm like this is the only

01:00:44,109 --> 01:00:49,030
guardrail in the entire country I'm

01:00:45,490 --> 01:00:50,650
taking a picture of it if you look

01:00:49,030 --> 01:00:53,740
really closely there's a woman in the

01:00:50,650 --> 01:00:56,380
river okay this doesn't keep you out of

01:00:53,740 --> 01:00:58,270
the river it keeps you from falling into

01:00:56,380 --> 01:00:59,530
the river I would have thought maybe

01:00:58,270 --> 01:01:01,150
keeping you from falling into the

01:00:59,530 --> 01:01:03,010
volcano would have been higher up the

01:01:01,150 --> 01:01:04,330
priority list but whatever it keeps you

01:01:03,010 --> 01:01:06,790
from falling into the river later you

01:01:04,330 --> 01:01:10,560
end up in the river anyway if you want

01:01:06,790 --> 01:01:12,070
to walk in the river walk in the river

01:01:10,560 --> 01:01:13,420
Johnston on the edge of the volcano

01:01:12,070 --> 01:01:15,280
stand on the edge of the volcano but I

01:01:13,420 --> 01:01:17,260
kind of liked having the fence because

01:01:15,280 --> 01:01:20,490
it kept me from falling accidentally

01:01:17,260 --> 01:01:23,349
right that's the deal when you're saying

01:01:20,490 --> 01:01:26,170
follow this rule follow that rule have

01:01:23,349 --> 01:01:29,050
short functions give good names this

01:01:26,170 --> 01:01:33,010
isn't a wall this isn't a 10-foot higher

01:01:29,050 --> 01:01:34,990
barbed wire thing it's just some wood it

01:01:33,010 --> 01:01:38,080
just keeps me from falling accidentally

01:01:34,990 --> 01:01:38,930
and I welcomed it I wanted it I took a

01:01:38,080 --> 01:01:41,359
picture of

01:01:38,930 --> 01:01:43,549
and when I'm in some of your code bases

01:01:41,359 --> 01:01:46,039
I'm begging for something I can hold on

01:01:43,549 --> 01:01:47,869
to like a little wooden rickety fence so

01:01:46,039 --> 01:01:50,210
when you go in and you refactor and you

01:01:47,869 --> 01:01:52,010
encapsulate you're not trying to lock

01:01:50,210 --> 01:01:54,020
people out of things that aren't good

01:01:52,010 --> 01:01:56,839
you're just trying to make it the

01:01:54,020 --> 01:02:02,329
natural easy thing to do things that are

01:01:56,839 --> 01:02:04,460
good just a little bit of a guide in

01:02:02,329 --> 01:02:08,900
which spirit I'd like to plead with you

01:02:04,460 --> 01:02:10,549
not to do this I will confess that I

01:02:08,900 --> 01:02:13,609
don't really know what this does I found

01:02:10,549 --> 01:02:15,980
it on the Internet but you can tell an

01:02:13,609 --> 01:02:19,730
architect made it it says in an abstract

01:02:15,980 --> 01:02:23,960
and concrete and there's dotted lines

01:02:19,730 --> 01:02:29,630
and inheritance it's probably a lot of

01:02:23,960 --> 01:02:34,460
work whatever it is is it simple can you

01:02:29,630 --> 01:02:37,940
see what it does you cannot I found a

01:02:34,460 --> 01:02:42,319
blog post about abusing design patterns

01:02:37,940 --> 01:02:45,109
and my slides are going to be available

01:02:42,319 --> 01:02:46,849
and there's a link in the slides and I

01:02:45,109 --> 01:02:50,029
took it and I converted it all to C++

01:02:46,849 --> 01:02:52,700
and it works okay here's what it does

01:02:50,029 --> 01:02:54,710
first you you need a factory pointer

01:02:52,700 --> 01:02:56,869
which of course you call about getting

01:02:54,710 --> 01:02:59,839
factory after calling get instance on

01:02:56,869 --> 01:03:02,029
the factory maker and then you can

01:02:59,839 --> 01:03:04,279
create a subject and then you can create

01:03:02,029 --> 01:03:06,170
an observer and attach the observer to

01:03:04,279 --> 01:03:07,700
the subject then you can set up a

01:03:06,170 --> 01:03:09,650
command because the factory will also

01:03:07,700 --> 01:03:12,470
create you a command and then you can

01:03:09,650 --> 01:03:14,690
finally execute the command whereupon

01:03:12,470 --> 01:03:19,480
the program prints out hello world and

01:03:14,690 --> 01:03:23,119
exits and what's wrong with this code is

01:03:19,480 --> 01:03:25,160
there's only one kind of factory not

01:03:23,119 --> 01:03:27,799
passing any parameters to get factory

01:03:25,160 --> 01:03:29,569
there's only one kind of subject there's

01:03:27,799 --> 01:03:33,609
only one kind of observer and there's

01:03:29,569 --> 01:03:38,750
only one command all this flexibility

01:03:33,609 --> 01:03:41,450
not being used and we can laugh but we

01:03:38,750 --> 01:03:43,069
have all lived this we have all been in

01:03:41,450 --> 01:03:44,630
systems that could work for four

01:03:43,069 --> 01:03:47,990
different database vendors two of whom

01:03:44,630 --> 01:03:50,580
are out of business and no one's ever

01:03:47,990 --> 01:03:54,030
ever changed database vendors

01:03:50,580 --> 01:03:55,320
I worked for a while with a client that

01:03:54,030 --> 01:03:58,740
had written something using all

01:03:55,320 --> 01:04:01,290
Microsoft stuff so it's dotnet sequel

01:03:58,740 --> 01:04:03,690
server everything was done that I is you

01:04:01,290 --> 01:04:06,180
name it and their sales people got some

01:04:03,690 --> 01:04:08,940
pushback and said we would never buy

01:04:06,180 --> 01:04:10,110
this unless I supported Oracle so the

01:04:08,940 --> 01:04:12,000
developers have to go back to change

01:04:10,110 --> 01:04:14,940
every spec of that program so that it

01:04:12,000 --> 01:04:18,180
worked with Oracle or sequel spoiler

01:04:14,940 --> 01:04:21,960
that deal didn't close anyway and nobody

01:04:18,180 --> 01:04:26,840
ever wanted Oracle again ever and that's

01:04:21,960 --> 01:04:29,580
not unusual that's our life if you write

01:04:26,840 --> 01:04:31,290
flexibility before you need it you

01:04:29,580 --> 01:04:34,320
maintain that flexibility for the rest

01:04:31,290 --> 01:04:35,820
of time and nobody really knows what

01:04:34,320 --> 01:04:39,480
anything does you can't tell that this

01:04:35,820 --> 01:04:42,180
prints hello world for what if you need

01:04:39,480 --> 01:04:43,470
it you need it you get a benefit but if

01:04:42,180 --> 01:04:47,100
you don't need it you don't get the

01:04:43,470 --> 01:04:48,450
benefit you just saw this cool diagram

01:04:47,100 --> 01:04:50,180
on the internet and wanted to be an

01:04:48,450 --> 01:04:54,180
architect

01:04:50,180 --> 01:04:56,850
please don't but that leads me to a

01:04:54,180 --> 01:05:00,300
paradox because I told you that

01:04:56,850 --> 01:05:02,970
abstraction was good told you that short

01:05:00,300 --> 01:05:06,140
functions were good splitting things up

01:05:02,970 --> 01:05:08,460
was good giving things names was good

01:05:06,140 --> 01:05:09,630
but then I'm like oh this has too many

01:05:08,460 --> 01:05:12,870
layers of indirection

01:05:09,630 --> 01:05:15,450
well again experience and judgment count

01:05:12,870 --> 01:05:18,120
this isn't a mechanical process that

01:05:15,450 --> 01:05:21,510
will do all of your thinking for you and

01:05:18,120 --> 01:05:23,280
the paradox is that every single thing

01:05:21,510 --> 01:05:25,590
that you can do to make code simpler

01:05:23,280 --> 01:05:31,140
that same behavior can make the code

01:05:25,590 --> 01:05:34,590
more complicated if you want to run a

01:05:31,140 --> 01:05:36,450
loop from zero to number of items in the

01:05:34,590 --> 01:05:38,430
collection or if you want to say if

01:05:36,450 --> 01:05:41,490
outstanding blahblah is greater than

01:05:38,430 --> 01:05:44,490
zero should zero perhaps be in some sort

01:05:41,490 --> 01:05:46,530
of Anna Neumann so we have some context

01:05:44,490 --> 01:05:49,050
per Zed ero so that we all know it's

01:05:46,530 --> 01:05:51,000
zero not have a magic number like that's

01:05:49,050 --> 01:05:52,800
not making our code simpler it was great

01:05:51,000 --> 01:05:55,440
when it was 472 it's not so great when

01:05:52,800 --> 01:05:57,150
at zero so every single thing that can

01:05:55,440 --> 01:06:02,250
make code simpler can also make it more

01:05:57,150 --> 01:06:03,960
complicated and I cannot give you the

01:06:02,250 --> 01:06:07,320
simple rules

01:06:03,960 --> 01:06:10,230
for writing simple code all the rules

01:06:07,320 --> 01:06:14,250
will say usually maybe a lot not many

01:06:10,230 --> 01:06:17,700
unless you have a good reason and that's

01:06:14,250 --> 01:06:20,640
not a flaw in C++ it's not a flaw in

01:06:17,700 --> 01:06:23,670
software development it's a law of the

01:06:20,640 --> 01:06:28,380
universe have you taught someone to

01:06:23,670 --> 01:06:28,920
drive how fast should you go by the

01:06:28,380 --> 01:06:31,080
speed limit

01:06:28,920 --> 01:06:33,390
you just ran into someone going less

01:06:31,080 --> 01:06:34,710
than the speed limit oh the speed limit

01:06:33,390 --> 01:06:35,850
or whatever the person in front of you

01:06:34,710 --> 01:06:37,980
is going whichever is less

01:06:35,850 --> 01:06:39,270
that's good a dog right out on the road

01:06:37,980 --> 01:06:41,400
okay

01:06:39,270 --> 01:06:43,500
the speed limit speed of the person in

01:06:41,400 --> 01:06:45,600
front of you whichever is less or slow

01:06:43,500 --> 01:06:46,380
down if you see obstacles okay we're

01:06:45,600 --> 01:06:47,880
going the speed limit

01:06:46,380 --> 01:06:50,220
and it's a very sharp corner and the

01:06:47,880 --> 01:06:51,540
road went that way but you did not okay

01:06:50,220 --> 01:06:53,340
you also sometimes have to slow down for

01:06:51,540 --> 01:06:56,120
corners I haven't done the weather yet

01:06:53,340 --> 01:06:58,290
right and that's just the first question

01:06:56,120 --> 01:07:03,300
have you played what lane should you be

01:06:58,290 --> 01:07:05,220
in with a nervous driver I'm a new

01:07:03,300 --> 01:07:07,530
grandparent very proud of being a

01:07:05,220 --> 01:07:10,320
grandparent but if my daughter would say

01:07:07,530 --> 01:07:11,790
to me the baby is crying what is my

01:07:10,320 --> 01:07:14,720
simple answer for what to do about that

01:07:11,790 --> 01:07:14,720
huh

01:07:17,539 --> 01:07:23,160
questions can be simple but they don't

01:07:20,489 --> 01:07:25,109
have simple answers it's true about what

01:07:23,160 --> 01:07:27,359
Lane you should be in it's true about

01:07:25,109 --> 01:07:29,579
the crying baby the answer to the crying

01:07:27,359 --> 01:07:31,739
baby by the way step 0 anyway has picked

01:07:29,579 --> 01:07:35,189
them up okay it's after that that it

01:07:31,739 --> 01:07:37,259
diverges should you use exceptions how

01:07:35,189 --> 01:07:39,239
long should a function be is this a good

01:07:37,259 --> 01:07:41,749
variable name tell me how I would know

01:07:39,239 --> 01:07:44,429
if a variable name was good or not

01:07:41,749 --> 01:07:47,219
there's simple questions they don't have

01:07:44,429 --> 01:07:49,199
simple answers they can't have simple

01:07:47,219 --> 01:07:51,029
answers it's not like well if we keep

01:07:49,199 --> 01:07:52,709
working at this we'll be able to prove

01:07:51,029 --> 01:07:56,569
that no function should be more than 43

01:07:52,709 --> 01:08:01,919
lines long we will never have that rule

01:07:56,569 --> 01:08:04,799
but if you have the value if you want

01:08:01,919 --> 01:08:08,339
your code to be expressive transparent

01:08:04,799 --> 01:08:11,009
understandable reassuring then you will

01:08:08,339 --> 01:08:13,890
answer not the general question how long

01:08:11,009 --> 01:08:16,319
should a function be but the specific

01:08:13,890 --> 01:08:21,059
question how long should this function

01:08:16,319 --> 01:08:23,130
be is answerable so let's do something

01:08:21,059 --> 01:08:24,900
harder because giving things good names

01:08:23,130 --> 01:08:26,819
and keeping things short and all of that

01:08:24,900 --> 01:08:28,710
you get some judgment and you get

01:08:26,819 --> 01:08:31,440
judgment from using bad judgment because

01:08:28,710 --> 01:08:32,819
that's what gives you experience I hope

01:08:31,440 --> 01:08:35,250
you write like that from the get-go but

01:08:32,819 --> 01:08:40,559
you can bring it in that's not the whole

01:08:35,250 --> 01:08:48,020
thing you want big gains you change your

01:08:40,559 --> 01:08:50,009
team here's an example someone gave me

01:08:48,020 --> 01:08:52,020
obviously written by a very smart person

01:08:50,009 --> 01:08:54,319
because it's using a special integer

01:08:52,020 --> 01:08:56,279
type so they must be very clever

01:08:54,319 --> 01:08:58,049
unfortunately getsize returns a

01:08:56,279 --> 01:09:02,250
different special integer type that's 16

01:08:58,049 --> 01:09:06,000
bits long so some people when they see

01:09:02,250 --> 01:09:08,609
this say Wow C++ it's so complicated you

01:09:06,000 --> 01:09:10,409
have all these different integer types I

01:09:08,609 --> 01:09:11,880
have to keep track of which ones are 8

01:09:10,409 --> 01:09:13,139
bits and which ones are 16 bits and

01:09:11,880 --> 01:09:15,540
which ones are signed and which ones are

01:09:13,139 --> 01:09:18,029
unsigned I want some play-doh now I

01:09:15,540 --> 01:09:19,489
don't want all this complexity and I'm

01:09:18,029 --> 01:09:22,710
like that's not the problem

01:09:19,489 --> 01:09:25,409
the problem in this code was that I and

01:09:22,710 --> 01:09:27,469
getsize have nothing to do with each

01:09:25,409 --> 01:09:30,620
other

01:09:27,469 --> 01:09:32,509
right they have no relationship getsize

01:09:30,620 --> 01:09:34,670
is a free function I don't know what it

01:09:32,509 --> 01:09:37,759
looks at to figure out the sizes of

01:09:34,670 --> 01:09:41,870
things and I is just a local variable if

01:09:37,759 --> 01:09:44,150
we had a real collection we could

01:09:41,870 --> 01:09:46,580
iterate over the collection in a variety

01:09:44,150 --> 01:09:50,060
of ways and we wouldn't need to memorize

01:09:46,580 --> 01:09:52,430
integer types so when you meet a little

01:09:50,060 --> 01:09:54,049
complexity sometimes you're tempted to

01:09:52,430 --> 01:09:55,430
haul a bunch more complexity out

01:09:54,049 --> 01:09:57,860
especially because you're smart and

01:09:55,430 --> 01:09:59,390
you're creating that wooden thing with

01:09:57,860 --> 01:10:02,750
the sculptures and the doors and then

01:09:59,390 --> 01:10:05,900
has to be behind glass you step back and

01:10:02,750 --> 01:10:08,320
say actually what's really going on is a

01:10:05,900 --> 01:10:11,030
different thing those two are different

01:10:08,320 --> 01:10:12,080
because they're unrelated fixing them to

01:10:11,030 --> 01:10:13,969
be the same but it's still

01:10:12,080 --> 01:10:16,610
coincidentally the same that's not

01:10:13,969 --> 01:10:18,350
really fixing it to really fix it your

01:10:16,610 --> 01:10:26,060
code reflects the relationship they

01:10:18,350 --> 01:10:29,150
truly have well that comes up to a real

01:10:26,060 --> 01:10:33,140
hard thing you can learn to recognize

01:10:29,150 --> 01:10:34,370
things arranged for I'm touching every

01:10:33,140 --> 01:10:38,540
element in the collection I should use

01:10:34,370 --> 01:10:40,340
arranged for Shaun's famous line from

01:10:38,540 --> 01:10:43,340
five years ago that I love to quote this

01:10:40,340 --> 01:10:46,460
is obviously a rotate to pages of code

01:10:43,340 --> 01:10:49,219
that we're not obviously anything but

01:10:46,460 --> 01:10:51,050
you can learn and you can recognize

01:10:49,219 --> 01:10:52,730
things from the standard library you can

01:10:51,050 --> 01:10:55,100
recognize arranged for you can recognize

01:10:52,730 --> 01:10:58,310
all kinds of things and plunk them in

01:10:55,100 --> 01:11:00,350
instead you know standard library has a

01:10:58,310 --> 01:11:02,300
stack do not need you to write a stack

01:11:00,350 --> 01:11:07,610
do not need you to write a jsonparser

01:11:02,300 --> 01:11:10,310
this weekend come on hands up yeah got

01:11:07,610 --> 01:11:12,620
some confessions or a logger write or

01:11:10,310 --> 01:11:17,330
something to go get over HTTP

01:11:12,620 --> 01:11:20,600
these are solved problems my friends but

01:11:17,330 --> 01:11:22,160
then can we go too far who's heard of

01:11:20,600 --> 01:11:24,770
and immediately initialized no

01:11:22,160 --> 01:11:27,790
immediately invoked initializing lambda

01:11:24,770 --> 01:11:30,080
expression yeah you see this is a crowd

01:11:27,790 --> 01:11:32,750
third a third of you have heard which is

01:11:30,080 --> 01:11:34,670
a ton right if I went anywhere else I

01:11:32,750 --> 01:11:36,770
would not get one third of you having

01:11:34,670 --> 01:11:38,870
heard of it it's a way cool thing though

01:11:36,770 --> 01:11:40,280
right you have some variable you'd like

01:11:38,870 --> 01:11:40,700
it to be cause but initializing it is

01:11:40,280 --> 01:11:42,890
super

01:11:40,700 --> 01:11:46,580
applicated so you can initialize it by

01:11:42,890 --> 01:11:48,920
calling a function that's obvious but

01:11:46,580 --> 01:11:50,330
that refactoring is hard you have to

01:11:48,920 --> 01:11:53,000
figure out what the parameters are to

01:11:50,330 --> 01:11:55,580
the function if you just slap a lambda

01:11:53,000 --> 01:11:57,230
in there with a reference capture you

01:11:55,580 --> 01:11:58,580
can just you literally just put the

01:11:57,230 --> 01:12:01,130
braces and stuff around the code that's

01:11:58,580 --> 01:12:02,840
already there and then you stick a pair

01:12:01,130 --> 01:12:06,470
of parenthesis out the end of the lambda

01:12:02,840 --> 01:12:09,020
to invoke it and it's magic and the

01:12:06,470 --> 01:12:11,780
variable can be constant and people who

01:12:09,020 --> 01:12:15,800
don't see those parentheses do not know

01:12:11,780 --> 01:12:19,150
what you did and and I love this idiom

01:12:15,800 --> 01:12:21,470
for this reason it's right on the border

01:12:19,150 --> 01:12:24,290
it's not arranged for we all know what

01:12:21,470 --> 01:12:26,570
arranged for us but a lot of people

01:12:24,290 --> 01:12:29,300
don't necessarily know what this is so

01:12:26,570 --> 01:12:32,180
if you use it are you making your code

01:12:29,300 --> 01:12:33,380
simpler or are you surprising people

01:12:32,180 --> 01:12:35,150
which I said not to do because that's

01:12:33,380 --> 01:12:39,860
totally a surprise like wait it's being

01:12:35,150 --> 01:12:46,190
invoked oh cool but Wow

01:12:39,860 --> 01:12:49,550
can I have my last half hour back you

01:12:46,190 --> 01:12:55,340
need to know where the things you want

01:12:49,550 --> 01:12:57,710
to use exist it's not simple to surprise

01:12:55,340 --> 01:13:00,500
people so it's not enough that you know

01:12:57,710 --> 01:13:02,510
it I want you to replace your

01:13:00,500 --> 01:13:06,290
complicated things not just with idioms

01:13:02,510 --> 01:13:08,830
but with familiar idioms right that

01:13:06,290 --> 01:13:11,150
express your intent with well-known

01:13:08,830 --> 01:13:13,580
library classes that others will

01:13:11,150 --> 01:13:15,650
recognize hopefully everyone's going to

01:13:13,580 --> 01:13:17,870
recognize all of algorithm and all of

01:13:15,650 --> 01:13:19,730
numeric and if they don't we have CPP

01:13:17,870 --> 01:13:23,840
reference but there are other things

01:13:19,730 --> 01:13:25,700
that are maybe less well-known you want

01:13:23,840 --> 01:13:27,170
to introduce appropriate abstractions in

01:13:25,700 --> 01:13:28,400
your code so that people say oh that's a

01:13:27,170 --> 01:13:31,220
rectangle I know what a rectangle is

01:13:28,400 --> 01:13:35,560
that's a purchase order cool right but

01:13:31,220 --> 01:13:37,960
not something that hides what's going on

01:13:35,560 --> 01:13:40,100
because while you're doing all this

01:13:37,960 --> 01:13:41,570
obviously we're not omitting we're not

01:13:40,100 --> 01:13:43,790
going back to Plato we're not like oh we

01:13:41,570 --> 01:13:45,970
only do forward to keep it simple we all

01:13:43,790 --> 01:13:49,250
are needed capabilities are still there

01:13:45,970 --> 01:13:52,100
the core information the guts of what

01:13:49,250 --> 01:13:53,780
this thing does is on display that's the

01:13:52,100 --> 01:13:55,909
point is expressive and transpose

01:13:53,780 --> 01:13:57,619
so you don't hide everything behind a

01:13:55,909 --> 01:14:00,530
wall of injectors and adapters and

01:13:57,619 --> 01:14:05,269
factories and whatnots and you don't

01:14:00,530 --> 01:14:07,809
prevent future changes and I really want

01:14:05,269 --> 01:14:10,309
to talk about that as its own thing

01:14:07,809 --> 01:14:11,780
everyone says that Einstein says that

01:14:10,309 --> 01:14:13,880
things should be as simple as possible

01:14:11,780 --> 01:14:15,590
but no simpler and then I learned from

01:14:13,880 --> 01:14:17,690
Phil Nash that he actually said

01:14:15,590 --> 01:14:20,809
something more complicated and someone

01:14:17,690 --> 01:14:26,780
else paraphrased it down to this which

01:14:20,809 --> 01:14:29,150
could not be more perfect your

01:14:26,780 --> 01:14:32,510
simplicity needs to live in this larger

01:14:29,150 --> 01:14:35,869
context which is time' where it's

01:14:32,510 --> 01:14:39,769
simpler now to just type 472 isn't it

01:14:35,869 --> 01:14:44,090
then to go set up some kind of constants

01:14:39,769 --> 01:14:47,269
or some in neumes or something but later

01:14:44,090 --> 01:14:51,619
it will be much simpler to have the

01:14:47,269 --> 01:14:54,440
constant so what are you gonna do you're

01:14:51,619 --> 01:14:56,329
gonna do the right thing when you get

01:14:54,440 --> 01:14:57,800
down to the end of a long chain of

01:14:56,329 --> 01:14:59,239
function calls and realize you need

01:14:57,800 --> 01:15:01,909
something that the top of the chain

01:14:59,239 --> 01:15:04,070
knows but which is not in the parameters

01:15:01,909 --> 01:15:06,260
don't you just say like I could have a

01:15:04,070 --> 01:15:07,909
global right and you might even tell

01:15:06,260 --> 01:15:10,940
yourself well it's not global mutable

01:15:07,909 --> 01:15:13,699
state today it's not it will be that's

01:15:10,940 --> 01:15:17,599
the problem with Global's the right

01:15:13,699 --> 01:15:19,729
thing to do you already know it's not

01:15:17,599 --> 01:15:21,469
always the faster thing to do it's not

01:15:19,729 --> 01:15:23,630
always the easier thing to do

01:15:21,469 --> 01:15:28,519
I'm asking you to take the time to write

01:15:23,630 --> 01:15:33,829
the shorter letter the really the

01:15:28,519 --> 01:15:35,179
hardest of all you have crafted some

01:15:33,829 --> 01:15:38,749
gorgeous code

01:15:35,179 --> 01:15:41,059
I was once part of a team that took a

01:15:38,749 --> 01:15:45,979
main loop the big engine of the whole

01:15:41,059 --> 01:15:48,650
app it was pages and pages long it had

01:15:45,979 --> 01:15:50,269
go twos had multiple caches it was

01:15:48,650 --> 01:15:51,979
almost impossible to see what it did

01:15:50,269 --> 01:15:54,530
like you literally needed to print it

01:15:51,979 --> 01:15:56,389
and take a highlighter to it and we made

01:15:54,530 --> 01:15:59,619
it fit on a page and it read like

01:15:56,389 --> 01:16:01,840
English you know while not cancelled

01:15:59,619 --> 01:16:05,210
that kind of thing

01:16:01,840 --> 01:16:06,300
it was gorgeous we were so pleased for

01:16:05,210 --> 01:16:09,630
ourselves

01:16:06,300 --> 01:16:13,200
and someone said I thought this was a

01:16:09,630 --> 01:16:17,940
hard problem is that is that what you

01:16:13,200 --> 01:16:21,600
got that was tough and I have to tell

01:16:17,940 --> 01:16:24,810
you when you make something look easy

01:16:21,600 --> 01:16:28,440
and obvious and transparent and

01:16:24,810 --> 01:16:32,900
expressive someone can say why did that

01:16:28,440 --> 01:16:36,990
take you a week and that's hard I

01:16:32,900 --> 01:16:39,150
thought you were an architect right but

01:16:36,990 --> 01:16:44,190
you don't have a impenetrable UML

01:16:39,150 --> 01:16:46,740
diagram for me you have to know you're

01:16:44,190 --> 01:16:49,470
doing it right and you have to know

01:16:46,740 --> 01:16:51,930
you're not leaving anything out you have

01:16:49,470 --> 01:16:55,310
to know you've achieved elegant valuable

01:16:51,930 --> 01:17:00,090
beautiful simplicity but you worried

01:16:55,310 --> 01:17:00,810
you're nervous is this simple didn't

01:17:00,090 --> 01:17:04,080
think it through

01:17:00,810 --> 01:17:04,590
I don't know it looks like simple didn't

01:17:04,080 --> 01:17:06,780
think it through

01:17:04,590 --> 01:17:08,910
I'm pretty sure I made simple brilliant

01:17:06,780 --> 01:17:10,620
I was totally going for simple brilliant

01:17:08,910 --> 01:17:12,660
but now I have to stand up in front of

01:17:10,620 --> 01:17:15,240
everyone and say this is simple

01:17:12,660 --> 01:17:19,560
brilliance and someone's gonna say is

01:17:15,240 --> 01:17:21,870
that all you got you know your language

01:17:19,560 --> 01:17:24,300
in your library but are the people

01:17:21,870 --> 01:17:26,580
around you going to say that's not

01:17:24,300 --> 01:17:29,970
simple at all I have no idea what any of

01:17:26,580 --> 01:17:35,330
that is you just architected it up with

01:17:29,970 --> 01:17:38,460
your stood optional and your no accept

01:17:35,330 --> 01:17:42,090
but here's another one people ask me if

01:17:38,460 --> 01:17:46,730
I write code that anyone can read anyone

01:17:42,090 --> 01:17:46,730
can maintain what happens to my job

01:17:46,869 --> 01:17:53,199
oh you gonna be on a lot of projects

01:17:50,559 --> 01:17:54,519
you're not going anywhere you know

01:17:53,199 --> 01:17:57,159
you're gonna save the company a ton of

01:17:54,519 --> 01:17:59,919
money because juniors can maintain your

01:17:57,159 --> 01:18:02,409
beautiful simple wonderful coat and

01:17:59,919 --> 01:18:06,070
juniors will be led into the right ways

01:18:02,409 --> 01:18:08,439
by using your code as an example you're

01:18:06,070 --> 01:18:11,019
not going anywhere except to this other

01:18:08,439 --> 01:18:12,489
project that really needs you right you

01:18:11,019 --> 01:18:14,499
will have job security and if there's

01:18:12,489 --> 01:18:16,300
not enough projects where you are anyone

01:18:14,499 --> 01:18:18,129
else will be happy to have you please

01:18:16,300 --> 01:18:22,659
don't ever write gross codes so they

01:18:18,129 --> 01:18:25,469
can't fire you write code that stands up

01:18:22,659 --> 01:18:28,449
for you because you are leaving behind

01:18:25,469 --> 01:18:31,059
communications to the future and does

01:18:28,449 --> 01:18:34,179
that reflect you does that show who you

01:18:31,059 --> 01:18:39,219
are does that show what you know that's

01:18:34,179 --> 01:18:44,199
what I want you to do how far have you

01:18:39,219 --> 01:18:46,719
come from a beginner so what do you need

01:18:44,199 --> 01:18:48,010
to do you need to learn you need to

01:18:46,719 --> 01:18:49,239
learn our language you need to learn the

01:18:48,010 --> 01:18:50,889
library you need to learn what other

01:18:49,239 --> 01:18:52,599
people know you need to know what's

01:18:50,889 --> 01:18:54,280
faster you need to know how to measure

01:18:52,599 --> 01:18:56,709
what's faster you need to know what your

01:18:54,280 --> 01:18:59,469
optimizers do you need to know so much

01:18:56,709 --> 01:19:00,999
you need to read other people's code

01:18:59,469 --> 01:19:03,610
because that's how you find out what

01:19:00,999 --> 01:19:06,939
kind of code is readable you need to

01:19:03,610 --> 01:19:09,039
care to care about yourself tomorrow

01:19:06,939 --> 01:19:10,539
don't just slam it in to get it done so

01:19:09,039 --> 01:19:11,860
you can go home care about yourself

01:19:10,539 --> 01:19:14,369
tomorrow and yes

01:19:11,860 --> 01:19:18,129
the mythical future maintainer as well

01:19:14,369 --> 01:19:20,499
you need to test things is this faster

01:19:18,129 --> 01:19:23,079
than that do all the people in my

01:19:20,499 --> 01:19:25,149
department know what an immediately

01:19:23,079 --> 01:19:27,820
invoked initializing lambda is don't

01:19:25,149 --> 01:19:29,439
just guess test it's easy for me I asked

01:19:27,820 --> 01:19:31,840
for a show of hands somewhat harder for

01:19:29,439 --> 01:19:34,119
you but do it and you need to

01:19:31,840 --> 01:19:36,340
communicate you need to communicate with

01:19:34,119 --> 01:19:40,809
your code you also need to communicate

01:19:36,340 --> 01:19:42,999
about your code at code review time why

01:19:40,809 --> 01:19:45,010
did I do it this way or to someone else

01:19:42,999 --> 01:19:47,469
why did you do it that way did you

01:19:45,010 --> 01:19:50,409
consider this other way do you think it

01:19:47,469 --> 01:19:51,610
would be more expressive if it could be

01:19:50,409 --> 01:19:54,219
as simple as does this loop touch

01:19:51,610 --> 01:19:57,099
everything in the collection perhaps we

01:19:54,219 --> 01:19:59,349
could consider arranged for and that

01:19:57,099 --> 01:20:00,289
kind of communication brings everyone's

01:19:59,349 --> 01:20:02,929
code

01:20:00,289 --> 01:20:05,359
to the simple brilliant side of the line

01:20:02,929 --> 01:20:06,919
and when you are consistently doing that

01:20:05,359 --> 01:20:09,649
for yourself and for everyone around you

01:20:06,919 --> 01:20:11,420
you have very definitely not a beginner

01:20:09,649 --> 01:20:14,659
thank you

01:20:11,420 --> 01:20:14,659
[Applause]

01:20:21,100 --> 01:20:28,000
I have six minutes for questions if you

01:20:26,500 --> 01:20:33,520
can go to the mic so that I don't have

01:20:28,000 --> 01:20:35,740
to repeat I would appreciate it your

01:20:33,520 --> 01:20:39,100
question yes one of the important

01:20:35,740 --> 01:20:42,700
attributes of simple Mouse a clean code

01:20:39,100 --> 01:20:45,790
is the stability I feel that you avoided

01:20:42,700 --> 01:20:48,460
that topic could you tell if there is a

01:20:45,790 --> 01:20:50,140
reason so when you say stable do you

01:20:48,460 --> 01:20:53,200
mean that it doesn't blow up now or that

01:20:50,140 --> 01:20:56,620
it stays good over time I mean testable

01:20:53,200 --> 01:20:59,110
oh testing testability yes absolutely I

01:20:56,620 --> 01:21:01,810
think that that fits into the expressive

01:20:59,110 --> 01:21:04,030
part if this code does six things you're

01:21:01,810 --> 01:21:06,100
going to need six tests and if this code

01:21:04,030 --> 01:21:07,960
hides that it does six things you don't

01:21:06,100 --> 01:21:09,640
know how many tests you need so as you

01:21:07,960 --> 01:21:11,800
make it more expressive and transparent

01:21:09,640 --> 01:21:13,690
you make it more testable obviously the

01:21:11,800 --> 01:21:16,150
mechanics of hooking tests into it is a

01:21:13,690 --> 01:21:18,670
different one but for example if you

01:21:16,150 --> 01:21:20,140
take that command-line parser the reason

01:21:18,670 --> 01:21:23,220
I didn't like the old one was I couldn't

01:21:20,140 --> 01:21:26,080
test it by passing a literal string so

01:21:23,220 --> 01:21:27,820
it does all connect this kind of simpler

01:21:26,080 --> 01:21:30,070
code will also be more testable code I

01:21:27,820 --> 01:21:32,050
would say it's actually like looking at

01:21:30,070 --> 01:21:34,500
making it more testable would make it

01:21:32,050 --> 01:21:36,790
much simpler yes they work together yes

01:21:34,500 --> 01:21:40,060
plus the tests are expressing your

01:21:36,790 --> 01:21:43,360
intent we'll go to this side hey there I

01:21:40,060 --> 01:21:45,520
really enjoyed your talk there was a

01:21:43,360 --> 01:21:47,500
little bit of a tension I think you kind

01:21:45,520 --> 01:21:50,020
of touched on a bit but I'd like to ask

01:21:47,500 --> 01:21:53,080
about so in one hand you talk about

01:21:50,020 --> 01:21:54,700
using idioms which are familiar so that

01:21:53,080 --> 01:21:57,400
they're more readable but on the other

01:21:54,700 --> 01:21:59,200
hand you talk about how creating a

01:21:57,400 --> 01:22:01,570
simple code base is a team effort and

01:21:59,200 --> 01:22:02,290
requires collective like a collective

01:22:01,570 --> 01:22:06,100
idioms

01:22:02,290 --> 01:22:08,350
so then what advice would you give for

01:22:06,100 --> 01:22:10,450
moving the bar of where your team's

01:22:08,350 --> 01:22:12,040
idioms so that better idioms that your

01:22:10,450 --> 01:22:13,500
team aren't using eventually become

01:22:12,040 --> 01:22:15,700
familiar

01:22:13,500 --> 01:22:17,290
absolutely it's about moving moving your

01:22:15,700 --> 01:22:18,640
team so you can't just start writing

01:22:17,290 --> 01:22:19,720
things a certain way in your piece of

01:22:18,640 --> 01:22:20,500
the code because the chances are they're

01:22:19,720 --> 01:22:22,570
going to undo it

01:22:20,500 --> 01:22:25,000
or argue about it a lot so it's more

01:22:22,570 --> 01:22:26,770
like speaking or or typing at each other

01:22:25,000 --> 01:22:28,870
if you're all remote and saying I just

01:22:26,770 --> 01:22:30,430
learned this thing that I think would be

01:22:28,870 --> 01:22:33,010
highly appropriate in the new section

01:22:30,430 --> 01:22:34,449
we're working on discussing it and then

01:22:33,010 --> 01:22:36,489
starting to use it

01:22:34,449 --> 01:22:38,170
maybe later someone who's got some time

01:22:36,489 --> 01:22:39,579
says I actually think that ATM would

01:22:38,170 --> 01:22:41,320
apply in this older code I think I'm

01:22:39,579 --> 01:22:44,019
going to update it and it spreads in

01:22:41,320 --> 01:22:45,909
that way but the group has to know it

01:22:44,019 --> 01:22:47,349
first otherwise there's the corner of

01:22:45,909 --> 01:22:48,940
the code that only one person knows how

01:22:47,349 --> 01:22:51,519
to work and the others never go in and

01:22:48,940 --> 01:22:55,979
that is the opposite of transparent

01:22:51,519 --> 01:22:58,360
right yeah thank you thank you over here

01:22:55,979 --> 01:23:00,639
it's funny I was asking a very similar

01:22:58,360 --> 01:23:03,099
question I think these are wonderful

01:23:00,639 --> 01:23:06,309
values and I think they're the right

01:23:03,099 --> 01:23:09,190
aspirational values and I'm very excited

01:23:06,309 --> 01:23:10,989
by the stuff I'm wondering when you're a

01:23:09,190 --> 01:23:13,420
consultant and you're in a position of

01:23:10,989 --> 01:23:16,030
leadership it's very easy to set an

01:23:13,420 --> 01:23:17,650
example for your environment but I've

01:23:16,030 --> 01:23:20,559
been in many situations and I've seen

01:23:17,650 --> 01:23:22,989
many situations where somebody on the

01:23:20,559 --> 01:23:24,969
team wants to go in this direction and

01:23:22,989 --> 01:23:27,789
the leadership or their colleagues are

01:23:24,969 --> 01:23:30,369
opposed to it yes how you deal with the

01:23:27,789 --> 01:23:33,130
social problem the social problem is

01:23:30,369 --> 01:23:35,650
very real if you own the codebase life

01:23:33,130 --> 01:23:37,389
is good and if you're in from outside

01:23:35,650 --> 01:23:39,789
with a with a sign on your head that

01:23:37,389 --> 01:23:42,369
says how much you cost today people

01:23:39,789 --> 01:23:45,219
listen to you if you're just one of the

01:23:42,369 --> 01:23:49,420
team trying to lead people forward is

01:23:45,219 --> 01:23:51,150
hard if you can if making a change

01:23:49,420 --> 01:23:54,340
doesn't require them to learn new things

01:23:51,150 --> 01:23:56,949
you simply write for example inverting

01:23:54,340 --> 01:23:59,499
the arrow code right they don't have to

01:23:56,949 --> 01:24:01,360
learn an idiom to get that they can just

01:23:59,499 --> 01:24:03,429
see that gee your functions are shorter

01:24:01,360 --> 01:24:05,800
and I kind of understand them better and

01:24:03,429 --> 01:24:07,479
slowly it'll spread that'll be a slower

01:24:05,800 --> 01:24:09,269
process but that's how you would do it

01:24:07,479 --> 01:24:11,769
so there are things you can do that

01:24:09,269 --> 01:24:14,769
encapsulating instead of passing 27

01:24:11,769 --> 01:24:16,300
parameters over time people will say why

01:24:14,769 --> 01:24:19,360
is it that I enjoy working in this

01:24:16,300 --> 01:24:21,249
corner of the code more and then it's

01:24:19,360 --> 01:24:23,050
not a secret you can be super open about

01:24:21,249 --> 01:24:24,789
it this is not your magical weapon that

01:24:23,050 --> 01:24:27,969
enables you to be better than them you

01:24:24,789 --> 01:24:31,079
share it with them and you've proven it

01:24:27,969 --> 01:24:33,729
by doing it yourself a little bit

01:24:31,079 --> 01:24:35,999
process it seems like oh it's not a week

01:24:33,729 --> 01:24:39,940
that's for sure

01:24:35,999 --> 01:24:42,550
oh thanks again for what a wonderful

01:24:39,940 --> 01:24:44,889
presentation that only took you you know

01:24:42,550 --> 01:24:46,889
what an hour and a quarter and so you

01:24:44,889 --> 01:24:50,440
know is that all you're here for yeah

01:24:46,889 --> 01:24:51,940
just echo one of your points but I'd

01:24:50,440 --> 01:24:54,310
like to ask a more serious question

01:24:51,940 --> 01:24:58,060
which is a kind of a cultural

01:24:54,310 --> 01:24:59,920
educational problem I've been active in

01:24:58,060 --> 01:25:01,659
my own organization to try to promote

01:24:59,920 --> 01:25:03,310
some of these same values and by the way

01:25:01,659 --> 01:25:05,380
a book that I found very helpful for

01:25:03,310 --> 01:25:07,540
doing that is clean code by Robert

01:25:05,380 --> 01:25:11,320
Martin it doesn't touch on all of this

01:25:07,540 --> 01:25:13,690
but it touches on a lot of it and but

01:25:11,320 --> 01:25:16,270
one of the implications of a lot of this

01:25:13,690 --> 01:25:19,239
of some of this is that writing software

01:25:16,270 --> 01:25:23,199
is a literary activity at certain points

01:25:19,239 --> 01:25:25,360
I would agree completely yeah and I like

01:25:23,199 --> 01:25:26,860
you I joined this field back when most

01:25:25,360 --> 01:25:28,540
of us didn't have a degree in computer

01:25:26,860 --> 01:25:33,610
science we had degrees and other things

01:25:28,540 --> 01:25:34,989
and I'm a little worried sometimes about

01:25:33,610 --> 01:25:37,449
the fact that there seems to be a kind

01:25:34,989 --> 01:25:39,639
of cultural resistance to the idea that

01:25:37,449 --> 01:25:43,179
the ability to write good names is

01:25:39,639 --> 01:25:47,440
itself a very important ability for our

01:25:43,179 --> 01:25:50,380
success as a community what can we do

01:25:47,440 --> 01:25:52,900
about that to to try to help people to

01:25:50,380 --> 01:25:55,239
understand that there is sometimes that

01:25:52,900 --> 01:25:56,980
you know it started as a joke that I

01:25:55,239 --> 01:25:58,060
received on purple mimeograph to paper

01:25:56,980 --> 01:25:59,739
and if you don't know what purple

01:25:58,060 --> 01:26:01,719
mimeograph refers to go find an older

01:25:59,739 --> 01:26:02,920
person and which literally said if it

01:26:01,719 --> 01:26:04,389
was hard to write it should be hard to

01:26:02,920 --> 01:26:06,550
read and it was one of those things

01:26:04,389 --> 01:26:09,969
that's a joke but it's not a joke and so

01:26:06,550 --> 01:26:14,290
there will be people who resist being

01:26:09,969 --> 01:26:15,699
empathetic and resist expressing

01:26:14,290 --> 01:26:17,860
everything they know they want to hold

01:26:15,699 --> 01:26:19,630
something back I knew someone who once

01:26:17,860 --> 01:26:23,650
built a circuit board and scraped all

01:26:19,630 --> 01:26:25,060
the numbers off the chips that's you

01:26:23,650 --> 01:26:29,980
know if everyone understands it where's

01:26:25,060 --> 01:26:33,040
my job when you are good your job is

01:26:29,980 --> 01:26:35,770
safe ok you only hide information

01:26:33,040 --> 01:26:37,090
because you don't think you're good so

01:26:35,770 --> 01:26:39,520
if I can tell you that you're good

01:26:37,090 --> 01:26:41,349
you're going to start to share so if

01:26:39,520 --> 01:26:43,330
it's the person next to you tell that

01:26:41,349 --> 01:26:44,770
person that they're good if it's you

01:26:43,330 --> 01:26:47,619
you're good

01:26:44,770 --> 01:26:49,150
ok start acting it because good people

01:26:47,619 --> 01:26:49,570
are generous people they have nothing to

01:26:49,150 --> 01:26:54,550
lose

01:26:49,570 --> 01:26:55,750
be generous it's my advice so I'm

01:26:54,550 --> 01:26:59,040
wondering a little bit more about

01:26:55,750 --> 01:27:01,980
teaching you had the example with

01:26:59,040 --> 01:27:04,350
textured astronaut HelloWorld these are

01:27:01,980 --> 01:27:07,230
very useful concepts like abstractions

01:27:04,350 --> 01:27:08,910
are good exceptions are good and usually

01:27:07,230 --> 01:27:11,430
in a teaching environment it's hard to

01:27:08,910 --> 01:27:12,870
actually motivate that like these

01:27:11,430 --> 01:27:16,770
abstractions because the problems are

01:27:12,870 --> 01:27:19,200
never big enough I feel to actually be

01:27:16,770 --> 01:27:21,090
useful and so you learn these things and

01:27:19,200 --> 01:27:23,340
as a student you would either think

01:27:21,090 --> 01:27:26,550
what's the point why am I doing this or

01:27:23,340 --> 01:27:27,900
otherwise you're thinking oh this is the

01:27:26,550 --> 01:27:30,030
way I'm supposed to write these things

01:27:27,900 --> 01:27:32,400
and then you abuse the system when it's

01:27:30,030 --> 01:27:35,400
wrong is there kind of something we can

01:27:32,400 --> 01:27:37,200
do about this when in at least an

01:27:35,400 --> 01:27:38,730
educational context it's very

01:27:37,200 --> 01:27:41,340
challenging in an educational context

01:27:38,730 --> 01:27:43,920
because you have the 15 line example and

01:27:41,340 --> 01:27:44,970
and then you you have add flexibility

01:27:43,920 --> 01:27:46,800
that it doesn't need because there's

01:27:44,970 --> 01:27:48,630
only 15 lines long but you can't give

01:27:46,800 --> 01:27:52,110
them a 15 thousand line example because

01:27:48,630 --> 01:27:55,140
you have 15 minutes and there's there's

01:27:52,110 --> 01:27:56,730
no long nor easy thing to do you can

01:27:55,140 --> 01:27:58,350
tell them only do this when it's big but

01:27:56,730 --> 01:28:01,260
they don't know what biggest yet right

01:27:58,350 --> 01:28:02,940
so other than trying to delay those

01:28:01,260 --> 01:28:04,530
things till later in the program when

01:28:02,940 --> 01:28:05,970
they have a little more judgement as

01:28:04,530 --> 01:28:07,830
maybe as part of a culminating project

01:28:05,970 --> 01:28:10,500
where they're working on larger base but

01:28:07,830 --> 01:28:12,810
the same is true with everything we we

01:28:10,500 --> 01:28:14,250
all work 90% of us maintaining code and

01:28:12,810 --> 01:28:15,420
undergrads are never asked to maintain

01:28:14,250 --> 01:28:18,720
code they're always asked to write new

01:28:15,420 --> 01:28:21,150
code so the education problem I do not

01:28:18,720 --> 01:28:22,410
have time to go into will talk more when

01:28:21,150 --> 01:28:24,180
I want to feel like though it is a big

01:28:22,410 --> 01:28:28,290
deal I thank you for raising it thank

01:28:24,180 --> 01:28:29,370
you I'm sorry but I'm over time so I

01:28:28,290 --> 01:28:30,930
can't take another question

01:28:29,370 --> 01:28:33,200
thank you all please enjoy the rest of

01:28:30,930 --> 01:28:33,200

YouTube URL: https://www.youtube.com/watch?v=n0Ak6xtVXno


