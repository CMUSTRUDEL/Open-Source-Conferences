Title: CppCon 2018: “Closing Panel: Spectre”
Publication date: 2018-10-08
Playlist: CppCon 2018
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018
—
This panel will consist of three experts from across the industry who have been working on and responding to Spectre, a new class of information leak vulnerability in modern CPUs and software. It will cover any and all questions the audience has about this new class of vulnerabilities, how they work, what it means for you, and what you can do about them.
— 
Matt Godbolt, Coinbase
Senior Software Engineer
Matt Godbolt is the creator of the Compiler Explorer website. He is passionate about writing efficient code. He has previously worked at a trading firm, on mobile apps at Google, run his own C++ tools company and spent more than a decade making console games. When he's not hacking on Compiler Explorer, Matt enjoys writing emulators for old 8-bit computer hardware.

Chandler Carruth, Google
Software Engineer
Chandler Carruth leads the Clang team at Google, building better diagnostics, tools, and more. Previously, he worked on several pieces of Google’s distributed build system. He makes guest appearances helping to maintain a few core C++ libraries across Google’s codebase, and is active in the LLVM and Clang open source communities. He received his M.S. and B.S. in Computer Science from Wake Forest University, but disavows all knowledge of the contents of his Master’s thesis. He is regularly found drinking Cherry Coke Zero in the daytime and pontificating over a single malt scotch in the evening.

Jon Masters, Red Hat
Computer Architect
Jon Masters is Chief ARM Architect at Red Hat. Masters has been a Linux developer for more than 18 years, since beginning university at the age of 13. He is the author of a number of books on the Linux operating system, including "Building Embedded Linux Systems," and the upcoming "Porting Linux." An accomplished musician and hiker, he also enjoys unicycling among his many other hobbies.

Matt Miller
Microsoft
Matt Miller is a Partner Security Software Engineer working as part of the Microsoft Security Response Center (MSRC). In this role, Matt drives strategy and engineering related to proactive vulnerability defense across Microsoft's products and services. Prior to joining Microsoft ten years ago, Matt was a core contributor to the Metasploit framework and an editor for the Uninformed journal.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:04,410
so this is a panel where we're going to

00:00:02,700 --> 00:00:06,540
be talking about the specter

00:00:04,410 --> 00:00:07,980
vulnerability that Chandler has just

00:00:06,540 --> 00:00:11,010
been sort of informing us all about for

00:00:07,980 --> 00:00:12,330
the last hour and a half he did a

00:00:11,010 --> 00:00:14,880
fantastic job I think you'll all agree

00:00:12,330 --> 00:00:16,980
and so hopefully this will be an

00:00:14,880 --> 00:00:18,600
opportunity for us to fill in any of the

00:00:16,980 --> 00:00:19,890
details that were missing not that I

00:00:18,600 --> 00:00:21,630
think that it was much that could have

00:00:19,890 --> 00:00:22,890
been missing and we also have some other

00:00:21,630 --> 00:00:27,269
members here or give different different

00:00:22,890 --> 00:00:29,609
perspectives on the the issue and how we

00:00:27,269 --> 00:00:31,320
might go about solving it so I'm going

00:00:29,609 --> 00:00:33,690
to reiterate Charla's ground rules which

00:00:31,320 --> 00:00:36,030
is that there is a lot of things here

00:00:33,690 --> 00:00:37,920
that are sensitive we don't need to be

00:00:36,030 --> 00:00:40,379
afraid to ask any question but do be

00:00:37,920 --> 00:00:42,090
aware that there are certain reasons why

00:00:40,379 --> 00:00:44,219
things may not be able to be answered

00:00:42,090 --> 00:00:45,809
there may be like legal or just general

00:00:44,219 --> 00:00:47,219
security good practices that we can say

00:00:45,809 --> 00:00:49,190
sorry we'll have to take it offline or

00:00:47,219 --> 00:00:51,989
not at all

00:00:49,190 --> 00:00:54,870
we would also ask that you don't try and

00:00:51,989 --> 00:00:57,660
invent a new speculation attack while

00:00:54,870 --> 00:00:58,770
you're here on the spoke stage while

00:00:57,660 --> 00:00:59,820
you're in a microphone in this public

00:00:58,770 --> 00:01:02,250
area if you think you've thought of a

00:00:59,820 --> 00:01:04,140
I've got a great crack for this keep it

00:01:02,250 --> 00:01:06,630
to yourself for now and then speak to

00:01:04,140 --> 00:01:08,490
somebody in a responsible way but first

00:01:06,630 --> 00:01:11,310
of all listen it's ER meet our panel so

00:01:08,490 --> 00:01:12,750
I'm gonna hand over to Matt and Ella

00:01:11,310 --> 00:01:13,979
here who will introduce himself and

00:01:12,750 --> 00:01:16,020
number walk down and then we'll start

00:01:13,979 --> 00:01:18,030
taking questions all right thank you

00:01:16,020 --> 00:01:20,610
very much Matt so as you said my name is

00:01:18,030 --> 00:01:22,290
Matt Miller I work for Microsoft I'm

00:01:20,610 --> 00:01:24,450
actually in the Microsoft Security

00:01:22,290 --> 00:01:26,820
Response Center so if you're familiar

00:01:24,450 --> 00:01:28,710
with or you run Windows for those of you

00:01:26,820 --> 00:01:30,750
do on your computer reboots you know

00:01:28,710 --> 00:01:32,549
second Tuesday of every month that's our

00:01:30,750 --> 00:01:34,530
team you know we're making sure that

00:01:32,549 --> 00:01:37,140
vulnerability is getting fixed and that

00:01:34,530 --> 00:01:38,729
things are getting patched so I have one

00:01:37,140 --> 00:01:40,020
of the distinguished jobs of actually

00:01:38,729 --> 00:01:41,130
being able to see all the

00:01:40,020 --> 00:01:43,590
vulnerabilities to come in through our

00:01:41,130 --> 00:01:44,759
door and try to look for the trends and

00:01:43,590 --> 00:01:46,409
the types of vulnerabilities that we're

00:01:44,759 --> 00:01:48,240
seeing so that we can go and try to

00:01:46,409 --> 00:01:50,100
systematically deal with those versus

00:01:48,240 --> 00:01:52,680
doing the hand-to-hand combat type of

00:01:50,100 --> 00:01:54,689
thing so when Spectre and melt down

00:01:52,680 --> 00:01:56,820
these other things came in our door I

00:01:54,689 --> 00:01:59,430
was one of the security engineers that

00:01:56,820 --> 00:02:01,860
took point on a response to architect

00:01:59,430 --> 00:02:03,270
our mitigation strategy work with my

00:02:01,860 --> 00:02:05,700
distinguished peers on the right over

00:02:03,270 --> 00:02:07,110
here and try to actually design the

00:02:05,700 --> 00:02:09,989
mitigations for these types of issues

00:02:07,110 --> 00:02:12,160
and ship them again once again update

00:02:09,989 --> 00:02:15,520
Tuesday so that's a little about me

00:02:12,160 --> 00:02:17,920
so I'm gentler Carruth is as may have

00:02:15,520 --> 00:02:18,910
guessed so while they worked at Google I

00:02:17,920 --> 00:02:21,160
was just gonna give you a little bit

00:02:18,910 --> 00:02:23,140
more understanding of how I got involved

00:02:21,160 --> 00:02:25,000
at all because a lot of people here know

00:02:23,140 --> 00:02:26,650
me from working on sequels Plus and a

00:02:25,000 --> 00:02:28,750
little young and compilers and

00:02:26,650 --> 00:02:29,740
performance and oddly enough that had

00:02:28,750 --> 00:02:31,870
very little to do with what I just

00:02:29,740 --> 00:02:32,290
presented so I got roped into all of

00:02:31,870 --> 00:02:33,940
this

00:02:32,290 --> 00:02:35,980
last year when they realized that they

00:02:33,940 --> 00:02:37,360
might need to change the compiler for

00:02:35,980 --> 00:02:40,360
some of the things that they were

00:02:37,360 --> 00:02:41,830
working on to mitigate Spectre I had no

00:02:40,360 --> 00:02:44,170
idea what they were talking about but I

00:02:41,830 --> 00:02:45,550
was game and as I got more and more

00:02:44,170 --> 00:02:47,560
involved I started to end up like

00:02:45,550 --> 00:02:49,150
tripping a little bit more we started to

00:02:47,560 --> 00:02:51,160
find kind of interesting new ways of

00:02:49,150 --> 00:02:53,140
using compilers to to help the security

00:02:51,160 --> 00:02:57,250
things and so that that's gonna help I

00:02:53,140 --> 00:03:01,180
got roped into all of this stuff hi

00:02:57,250 --> 00:03:03,310
everyone I'm John masters and I have a

00:03:01,180 --> 00:03:05,560
role inside Red Hat as the chief

00:03:03,310 --> 00:03:08,890
microarchitecture lead guy I guess these

00:03:05,560 --> 00:03:11,050
days I started out running various

00:03:08,890 --> 00:03:13,480
alternative architecture efforts that we

00:03:11,050 --> 00:03:14,830
have and we needed someone who knew a

00:03:13,480 --> 00:03:17,710
little bit about the internals of

00:03:14,830 --> 00:03:20,860
processors so that was how I got dragged

00:03:17,710 --> 00:03:22,170
into spec II and melty and it's been the

00:03:20,860 --> 00:03:24,700
gift that keeps on giving

00:03:22,170 --> 00:03:26,260
I'm gonna give a shout out to my my

00:03:24,700 --> 00:03:27,850
girlfriend who got me the most awesome

00:03:26,260 --> 00:03:29,830
Valentine's Day present ever

00:03:27,850 --> 00:03:32,320
she got me a spectrum meltdown

00:03:29,830 --> 00:03:34,210
vulnerability fighting cake which is

00:03:32,320 --> 00:03:37,360
awesome why aren't you wearing it right

00:03:34,210 --> 00:03:43,330
now I know I forgot to pack it I'm kind

00:03:37,360 --> 00:03:44,890
of disappointed I am so I guess if

00:03:43,330 --> 00:03:45,910
you've got questions are you starting to

00:03:44,890 --> 00:03:47,350
think about things you might want to ask

00:03:45,910 --> 00:03:49,810
the panel please start queuing up at the

00:03:47,350 --> 00:03:52,360
two microphones um I get first dibs

00:03:49,810 --> 00:03:55,660
though as I'm up here

00:03:52,360 --> 00:03:59,410
so I write performance C++ code for a

00:03:55,660 --> 00:04:00,670
living and I would like to know how is

00:03:59,410 --> 00:04:03,160
this going to affect me down the line

00:04:00,670 --> 00:04:06,850
what what might I expect down the line

00:04:03,160 --> 00:04:10,330
as maybe I am in a deluxe URI situation

00:04:06,850 --> 00:04:11,980
I believe from Chandler sort of threat

00:04:10,330 --> 00:04:14,080
vector thing I'm not having to worry

00:04:11,980 --> 00:04:15,880
much about it but I'm worried that maybe

00:04:14,080 --> 00:04:18,790
my CPU is gonna go really slowly just

00:04:15,880 --> 00:04:20,799
for other people's problems you'll want

00:04:18,790 --> 00:04:23,330
to take that

00:04:20,799 --> 00:04:25,639
move okay well I'll give you some

00:04:23,330 --> 00:04:29,419
thoughts I have on this right so it

00:04:25,639 --> 00:04:32,449
depends on your threat model we have

00:04:29,419 --> 00:04:34,009
some folks who run in HPC lab

00:04:32,449 --> 00:04:37,550
environments they build their own code

00:04:34,009 --> 00:04:39,770
and they don't want some off the

00:04:37,550 --> 00:04:43,069
mitigations because they have a

00:04:39,770 --> 00:04:45,319
different security environment we have

00:04:43,069 --> 00:04:48,500
guys with guns outside the network is

00:04:45,319 --> 00:04:50,030
unplugged from the household so you know

00:04:48,500 --> 00:04:51,949
there are some times where you say well

00:04:50,030 --> 00:04:54,139
I've got a fixed meltdown because that's

00:04:51,949 --> 00:04:56,150
awful and very easily exploitable but

00:04:54,139 --> 00:04:57,860
you know some contrived branch predictor

00:04:56,150 --> 00:04:59,569
attack or something like this maybe I

00:04:57,860 --> 00:05:01,940
don't need everything to end on all the

00:04:59,569 --> 00:05:04,130
time so one of the concerns has been

00:05:01,940 --> 00:05:07,099
making sure for those who want to turn

00:05:04,130 --> 00:05:08,780
these things off that that's possible if

00:05:07,099 --> 00:05:12,949
it's appropriate to their environment

00:05:08,780 --> 00:05:15,590
and you know I would say that that

00:05:12,949 --> 00:05:17,030
ability is getting better but there's

00:05:15,590 --> 00:05:19,159
some folks who are seeing performance

00:05:17,030 --> 00:05:21,169
hits who don't want mitigations where

00:05:19,159 --> 00:05:22,639
you need to go in you know assess what

00:05:21,169 --> 00:05:25,039
makes sense for your environment but you

00:05:22,639 --> 00:05:27,020
can do that and then beyond that I would

00:05:25,039 --> 00:05:29,690
say there's really two different tracks

00:05:27,020 --> 00:05:30,830
it's it's some things that are painful

00:05:29,690 --> 00:05:33,440
in the short-term

00:05:30,830 --> 00:05:35,120
and things that are painful in the

00:05:33,440 --> 00:05:38,419
longer term so things that are painful

00:05:35,120 --> 00:05:40,580
in the short term include things like OS

00:05:38,419 --> 00:05:43,490
level fixes a Chandler talked about fur

00:05:40,580 --> 00:05:44,860
or didn't talk about but alluded to for

00:05:43,490 --> 00:05:48,229
for meltdown

00:05:44,860 --> 00:05:50,479
you know variant 3 where you know

00:05:48,229 --> 00:05:52,699
they're there there is a cost there but

00:05:50,479 --> 00:05:55,669
over time you're gonna get new they're

00:05:52,699 --> 00:05:57,590
all fixed now processors right in future

00:05:55,669 --> 00:05:58,669
machines and your existing code you

00:05:57,590 --> 00:06:01,279
won't have to change it it will just

00:05:58,669 --> 00:06:03,080
magically be ok there are some things

00:06:01,279 --> 00:06:04,639
like expected variant one that will live

00:06:03,080 --> 00:06:06,289
with us very very long time

00:06:04,639 --> 00:06:09,409
and that will have a performance hit

00:06:06,289 --> 00:06:10,669
over a longer period the other thing I

00:06:09,409 --> 00:06:12,860
want to say is I think I think the

00:06:10,669 --> 00:06:14,270
performance impact of this is something

00:06:12,860 --> 00:06:17,449
that people have a lot of control over

00:06:14,270 --> 00:06:18,500
so you can really customize the degree

00:06:17,449 --> 00:06:19,849
to what you take a performance hit

00:06:18,500 --> 00:06:20,930
there's a certain baseline of

00:06:19,849 --> 00:06:23,029
performance hit before the operating

00:06:20,930 --> 00:06:25,279
system to remain kind of secure in a

00:06:23,029 --> 00:06:27,440
basic sense but past that your

00:06:25,279 --> 00:06:28,969
application can opt out of almost all of

00:06:27,440 --> 00:06:30,529
these kinds of things and I think they

00:06:28,969 --> 00:06:33,650
think that's going to give people who

00:06:30,529 --> 00:06:36,080
are not super subject to this kind

00:06:33,650 --> 00:06:37,340
with a lot of freedom yeah just a

00:06:36,080 --> 00:06:39,169
dovetail with the ditch said it

00:06:37,340 --> 00:06:41,090
basically ends up being at the security

00:06:39,169 --> 00:06:42,710
performance trade-off right so

00:06:41,090 --> 00:06:44,270
evaluating your threat model trying to

00:06:42,710 --> 00:06:46,550
understand what risks you're willing to

00:06:44,270 --> 00:06:48,080
accept or what you can tolerate and

00:06:46,550 --> 00:06:49,490
that's gonna control and dictate how

00:06:48,080 --> 00:06:52,340
much of a performance trade-off you're

00:06:49,490 --> 00:06:54,169
willing to accept today that's cool so

00:06:52,340 --> 00:06:55,580
I'm it's no time soon am I gonna see an

00:06:54,169 --> 00:06:57,050
announcement from Intel and I'm saying

00:06:55,580 --> 00:06:58,850
we're turning off speculation we

00:06:57,050 --> 00:07:01,070
couldn't solve it you're on your own

00:06:58,850 --> 00:07:03,949
twenty times slower if you never branch

00:07:01,070 --> 00:07:05,210
then you won't have any problems good

00:07:03,949 --> 00:07:06,350
plan it's a good poison

00:07:05,210 --> 00:07:07,310
all right we'll start taking some

00:07:06,350 --> 00:07:09,070
questions from the audience now we're

00:07:07,310 --> 00:07:11,840
gonna start on the left hand side there

00:07:09,070 --> 00:07:15,650
any stock Chandler mentioned that

00:07:11,840 --> 00:07:17,660
browsers are especially vulnerable and I

00:07:15,650 --> 00:07:21,490
do realize their own JavaScript and web

00:07:17,660 --> 00:07:26,510
assembly and but they do it in different

00:07:21,490 --> 00:07:28,940
pages with different tabs and even with

00:07:26,510 --> 00:07:32,120
different processes which don't have the

00:07:28,940 --> 00:07:34,160
same address space so how does this make

00:07:32,120 --> 00:07:37,820
browsers especially vulnerable they're

00:07:34,160 --> 00:07:40,639
like operating fees right so this is an

00:07:37,820 --> 00:07:42,169
interesting question I it might seem

00:07:40,639 --> 00:07:43,970
like from looking at some of the

00:07:42,169 --> 00:07:45,860
discussions around a chrome and

00:07:43,970 --> 00:07:47,840
historically Firefox of security model

00:07:45,860 --> 00:07:49,220
disease process level isolation that

00:07:47,840 --> 00:07:50,900
they're not going to be vulnerable to

00:07:49,220 --> 00:07:53,930
this but there's actually a lot of

00:07:50,900 --> 00:07:56,870
shared work and shared processes in even

00:07:53,930 --> 00:07:58,220
Chrome and Firefox unless you enable a

00:07:56,870 --> 00:08:00,500
special feature of chrome called site

00:07:58,220 --> 00:08:04,580
isolation okay and that shared state

00:08:00,500 --> 00:08:06,620
typically involves the JavaScript VM

00:08:04,580 --> 00:08:09,560
okay so you actually have different

00:08:06,620 --> 00:08:11,120
sites running JavaScript in your DM and

00:08:09,560 --> 00:08:12,710
you can imagine how this happens so you

00:08:11,120 --> 00:08:14,240
have a tab right it's got a web page up

00:08:12,710 --> 00:08:16,310
there but the author of that web page

00:08:14,240 --> 00:08:18,020
isn't the only author of JavaScript

00:08:16,310 --> 00:08:20,210
running in that tab you also have

00:08:18,020 --> 00:08:21,860
advertisements in that tab you have lots

00:08:20,210 --> 00:08:23,419
of other code running in that tab and

00:08:21,860 --> 00:08:25,070
code that you may never know the author

00:08:23,419 --> 00:08:27,380
of right you didn't pick the

00:08:25,070 --> 00:08:29,090
advertisements all right some ad vinden

00:08:27,380 --> 00:08:30,949
system did and it picked a random set of

00:08:29,090 --> 00:08:33,620
advertisements I want you to you know

00:08:30,949 --> 00:08:34,849
have a lot of people that like get a lot

00:08:33,620 --> 00:08:36,560
of information from a lot of people I

00:08:34,849 --> 00:08:39,860
can just buy ad space

00:08:36,560 --> 00:08:41,540
Spector rats don't come yeah right and

00:08:39,860 --> 00:08:44,270
and I just put JavaScript into that tab

00:08:41,540 --> 00:08:46,970
right and if that tab happens to be your

00:08:44,270 --> 00:08:48,970
your email tab right or it happens to

00:08:46,970 --> 00:08:51,110
share a process with your email tab

00:08:48,970 --> 00:08:53,720
which for example you might share it

00:08:51,110 --> 00:08:57,620
between a search and an email tab if

00:08:53,720 --> 00:08:59,180
they're vended by similar company then

00:08:57,620 --> 00:09:03,530
then you're going to have some a little

00:08:59,180 --> 00:09:05,540
risk there well no I'm just gonna add so

00:09:03,530 --> 00:09:07,130
ultimately the browser is an example of

00:09:05,540 --> 00:09:09,200
multi-tenancy right where you have

00:09:07,130 --> 00:09:11,270
multiple tenants in this case site for

00:09:09,200 --> 00:09:12,740
gence in the same process and one of the

00:09:11,270 --> 00:09:15,850
reasons that I think Chandler touched on

00:09:12,740 --> 00:09:18,200
in his talk is that these in essence are

00:09:15,850 --> 00:09:19,760
more of a challenge because you're

00:09:18,200 --> 00:09:21,560
allowing attackers to provide your

00:09:19,760 --> 00:09:23,810
JavaScript that we are then going to

00:09:21,560 --> 00:09:25,550
turn around and just in time compile so

00:09:23,810 --> 00:09:27,980
you can just in time compile your

00:09:25,550 --> 00:09:30,080
gadgets that can create these sequences

00:09:27,980 --> 00:09:32,120
that give you the ability to specula the

00:09:30,080 --> 00:09:33,770
access portions of memory the otherwise

00:09:32,120 --> 00:09:35,960
shouldn't be able to access and that's

00:09:33,770 --> 00:09:38,090
why ultimately most sign isolation you

00:09:35,960 --> 00:09:39,830
actually start to partition your tenancy

00:09:38,090 --> 00:09:41,570
into different address spaces so that

00:09:39,830 --> 00:09:43,790
even if you do get one of those gadgets

00:09:41,570 --> 00:09:47,180
you're not able to read sensitive

00:09:43,790 --> 00:09:50,480
content that's the notion these get

00:09:47,180 --> 00:09:52,760
compiled I have no way of knowing which

00:09:50,480 --> 00:09:59,390
address with the instructions you'll get

00:09:52,760 --> 00:10:01,430
like I I know which branch prediction I

00:09:59,390 --> 00:10:03,080
totally understand it I really did not

00:10:01,430 --> 00:10:04,460
understand this when I first heard about

00:10:03,080 --> 00:10:05,660
it from people like Matt they were

00:10:04,460 --> 00:10:08,780
trying to explain how the browser

00:10:05,660 --> 00:10:09,950
exploits work I actually had the the

00:10:08,780 --> 00:10:11,660
browser people that I work with had to

00:10:09,950 --> 00:10:13,430
kind of you know really work to get me

00:10:11,660 --> 00:10:14,870
to understand this part of the problem

00:10:13,430 --> 00:10:16,670
is you can do more than you think you

00:10:14,870 --> 00:10:18,350
can for example you don't have to know

00:10:16,670 --> 00:10:20,570
the address at which your branch needs

00:10:18,350 --> 00:10:22,880
to be in order to collide in that in

00:10:20,570 --> 00:10:24,740
that hash table right instead you can

00:10:22,880 --> 00:10:27,140
just put branches in a lot of places and

00:10:24,740 --> 00:10:28,910
see which one causes the branch that's

00:10:27,140 --> 00:10:31,340
supposed to be using that slot to get

00:10:28,910 --> 00:10:33,590
slower right you can just kind of find

00:10:31,340 --> 00:10:35,120
collisions and then they ended up going

00:10:33,590 --> 00:10:37,250
after gadgets that are even easier to

00:10:35,120 --> 00:10:39,560
build out of kind of JIT compiled code

00:10:37,250 --> 00:10:42,260
and for example variant for it turns out

00:10:39,560 --> 00:10:44,120
it's just incredibly easy to hit if

00:10:42,260 --> 00:10:45,710
you're doing JIT compiled code they

00:10:44,120 --> 00:10:47,870
tried a bunch of things actually change

00:10:45,710 --> 00:10:49,620
it to mitigate this and I mean a bunch

00:10:47,870 --> 00:10:51,060
of things that people on the

00:10:49,620 --> 00:10:53,580
eighteen dead people in the JavaScript

00:10:51,060 --> 00:10:55,020
core team did a WebKit but Microsoft did

00:10:53,580 --> 00:10:57,150
like tons of the browser vendors work

00:10:55,020 --> 00:10:58,200
from trying to just change the JIT so

00:10:57,150 --> 00:11:01,050
that you didn't have enough information

00:10:58,200 --> 00:11:03,690
and ultimately nothing worked everything

00:11:01,050 --> 00:11:05,820
would end up failing on some interesting

00:11:03,690 --> 00:11:07,680
exciting code pattern and so that's why

00:11:05,820 --> 00:11:11,880
they're moving towards an isolation

00:11:07,680 --> 00:11:15,050
model and Linux has you take the the

00:11:11,880 --> 00:11:17,220
browser example but not a browser but

00:11:15,050 --> 00:11:19,020
anything involving gist right you have

00:11:17,220 --> 00:11:20,070
similar kind of abuse so there's

00:11:19,020 --> 00:11:24,930
something in Linux I like to call a

00:11:20,070 --> 00:11:27,000
specter accelerator BPF OPP yeah so you

00:11:24,930 --> 00:11:28,500
know people like I'll put PPF programs

00:11:27,000 --> 00:11:31,020
everywhere these are little you know

00:11:28,500 --> 00:11:33,540
code that I give you that you run inside

00:11:31,020 --> 00:11:36,300
the kernel very handily for me that's

00:11:33,540 --> 00:11:37,890
that's safe because it's by compilers

00:11:36,300 --> 00:11:39,060
it's definitely safe it's all fine

00:11:37,890 --> 00:11:40,140
because we checked it when make sure it

00:11:39,060 --> 00:11:42,839
didn't do anything bad

00:11:40,140 --> 00:11:44,670
right but anyway I call BPF for specter

00:11:42,839 --> 00:11:47,040
accelerator because it's just wonderful

00:11:44,670 --> 00:11:50,660
you give you hand me that I run it and I

00:11:47,040 --> 00:11:52,910
leak results that's great thanks

00:11:50,660 --> 00:11:57,870
we'll take a question I've run the

00:11:52,910 --> 00:12:01,410
outside day I would like to know what is

00:11:57,870 --> 00:12:05,640
the butt of Spectre family of problems

00:12:01,410 --> 00:12:07,680
on the cloud providers should we expect

00:12:05,640 --> 00:12:09,870
like some continuous VM reboots

00:12:07,680 --> 00:12:12,660
happening from now on forever and Phil

00:12:09,870 --> 00:12:15,600
define mitigation and another thing is

00:12:12,660 --> 00:12:17,610
should we expect some more legalese in

00:12:15,600 --> 00:12:20,250
the agreements saying oh you're dead I

00:12:17,610 --> 00:12:21,180
can be breached so sorry I I don't

00:12:20,250 --> 00:12:23,850
really think you should expect this

00:12:21,180 --> 00:12:25,290
stuff um here's the thing right the

00:12:23,850 --> 00:12:27,060
cloud vendors they're they're

00:12:25,290 --> 00:12:28,980
fundamental business model is protecting

00:12:27,060 --> 00:12:30,900
your data they're going to go to the mat

00:12:28,980 --> 00:12:32,430
to try and beat these kinds of

00:12:30,900 --> 00:12:34,110
vulnerabilities and find ways to protect

00:12:32,430 --> 00:12:36,060
your data and all the cloud vendors are

00:12:34,110 --> 00:12:38,100
doing a phenomenal job right I do mean

00:12:36,060 --> 00:12:40,140
literally every single cloud vendor has

00:12:38,100 --> 00:12:42,600
been the most impressive response I've

00:12:40,140 --> 00:12:44,550
seen these kinds of issues the one which

00:12:42,600 --> 00:12:46,200
has the most impact has been l1 tia and

00:12:44,550 --> 00:12:48,029
if you look at any of the cloud vendors

00:12:46,200 --> 00:12:49,650
they have documentation about what

00:12:48,029 --> 00:12:51,720
they're changing in order to mitigate l1

00:12:49,650 --> 00:12:53,010
yeah that's the most visible change that

00:12:51,720 --> 00:12:53,910
we've seen I don't want to try and

00:12:53,010 --> 00:12:55,950
repeat it here I don't have it in front

00:12:53,910 --> 00:12:57,450
of me but all the cloud vendors you can

00:12:55,950 --> 00:12:59,010
go and find their documentation about it

00:12:57,450 --> 00:13:00,100
but it's not going to be constant

00:12:59,010 --> 00:13:01,839
reboots

00:13:00,100 --> 00:13:03,190
gonna be something like that the only

00:13:01,839 --> 00:13:05,170
thing you do want to realize is are

00:13:03,190 --> 00:13:06,910
seeing a stream of vulnerabilities I

00:13:05,170 --> 00:13:09,220
mean related to operating systems in

00:13:06,910 --> 00:13:11,350
cloud but related to all of Spectre you

00:13:09,220 --> 00:13:13,959
need to have a good policy for updating

00:13:11,350 --> 00:13:15,730
your kernel in your cloud VM right which

00:13:13,959 --> 00:13:18,040
is going to require a reboot on a

00:13:15,730 --> 00:13:19,750
regular basis okay if you don't have a

00:13:18,040 --> 00:13:22,300
plan in place that's going to be a

00:13:19,750 --> 00:13:24,339
problem there's a whole talk about in

00:13:22,300 --> 00:13:26,230
earlier talk from one of the security

00:13:24,339 --> 00:13:26,680
people Patricia I think she might still

00:13:26,230 --> 00:13:28,540
be here

00:13:26,680 --> 00:13:30,579
about how you have to have a plan to

00:13:28,540 --> 00:13:32,709
roll these fixes out so all the

00:13:30,579 --> 00:13:34,750
operating system and cloud vendors are

00:13:32,709 --> 00:13:35,860
going to have the Pyxis in place that

00:13:34,750 --> 00:13:37,990
doesn't help if you can't roll them out

00:13:35,860 --> 00:13:39,839
that's what I would really focus on yeah

00:13:37,990 --> 00:13:42,519
I agree with that I mean ultimately

00:13:39,839 --> 00:13:44,139
vulnerabilities are not a new issue that

00:13:42,519 --> 00:13:45,519
cloud providers have to deal with and so

00:13:44,139 --> 00:13:47,560
it's already been the case that we have

00:13:45,519 --> 00:13:49,300
to response these vulnerabilities may be

00:13:47,560 --> 00:13:50,680
different in nature from the other types

00:13:49,300 --> 00:13:52,240
of all nations we had to deal with but

00:13:50,680 --> 00:13:53,440
that doesn't really change the fact

00:13:52,240 --> 00:13:55,930
you've gotta have your response plan

00:13:53,440 --> 00:13:57,459
your capabilities and your the ability

00:13:55,930 --> 00:14:00,250
to actually go and control and mitigate

00:13:57,459 --> 00:14:03,490
for your customers and I I don't run a

00:14:00,250 --> 00:14:05,319
cloud so I'll let up at one I have a bit

00:14:03,490 --> 00:14:08,769
of buyer's remorse I kind of wish we did

00:14:05,319 --> 00:14:11,139
but you know in over the last year

00:14:08,769 --> 00:14:14,259
working with these teams the thing that

00:14:11,139 --> 00:14:16,000
I've become convinced of is if I'm

00:14:14,259 --> 00:14:17,560
running an environment in many ways I'm

00:14:16,000 --> 00:14:19,180
gonna trust my data more in a cloud

00:14:17,560 --> 00:14:21,670
environment because I've seen some very

00:14:19,180 --> 00:14:23,199
professional people who you know these

00:14:21,670 --> 00:14:24,519
companies employ some of the brightest

00:14:23,199 --> 00:14:27,189
folks in the industry these guys

00:14:24,519 --> 00:14:28,779
included and you know I would trust my

00:14:27,189 --> 00:14:32,680
data more they're frankly than I would

00:14:28,779 --> 00:14:34,089
in some cases in an environment with you

00:14:32,680 --> 00:14:36,670
know a system with firmware that hasn't

00:14:34,089 --> 00:14:39,519
been updated in 10 years and and you

00:14:36,670 --> 00:14:41,110
know there's just because it's in the

00:14:39,519 --> 00:14:43,420
cloud doesn't mean it's bad in fact it

00:14:41,110 --> 00:14:49,209
could be very good well thank you the

00:14:43,420 --> 00:14:56,250
question over here on stage left so I I

00:14:49,209 --> 00:14:59,279
asked this question in the previous talk

00:14:56,250 --> 00:15:02,199
so it to me looks like this is a

00:14:59,279 --> 00:15:10,420
architecture failure on the processors

00:15:02,199 --> 00:15:12,089
the hole the hole I will try to figure

00:15:10,420 --> 00:15:14,100
out what's going to happen

00:15:12,089 --> 00:15:18,499
in the future but I don't have enough

00:15:14,100 --> 00:15:22,769
information seems like a profit think so

00:15:18,499 --> 00:15:25,920
is there a way of fixing the

00:15:22,769 --> 00:15:30,540
architecture instead of trying to put

00:15:25,920 --> 00:15:31,829
band-aids on it or can I start this way

00:15:30,540 --> 00:15:34,470
yeah please start one of my favorite

00:15:31,829 --> 00:15:36,749
topics anything evolving architecturally

00:15:34,470 --> 00:15:38,730
that's why I hadn't yeah yeah yeah yeah

00:15:36,749 --> 00:15:40,439
so what you say that someone asked

00:15:38,730 --> 00:15:41,910
before about you know how big how many

00:15:40,439 --> 00:15:44,249
instructions can you have in flight as

00:15:41,910 --> 00:15:48,209
well and that really depends it varies

00:15:44,249 --> 00:15:50,939
heavily but but look hands up here if a

00:15:48,209 --> 00:15:52,889
year ago someone had come to you and

00:15:50,939 --> 00:15:54,600
said I'd like to make your computer much

00:15:52,889 --> 00:15:56,189
slower but I'm gonna promise you it's

00:15:54,600 --> 00:15:59,220
gonna be more secure would anyone have

00:15:56,189 --> 00:16:01,290
done that and they won't tell you how

00:15:59,220 --> 00:16:03,209
much more secure but somewhat more

00:16:01,290 --> 00:16:06,110
secure you know more secure but it's

00:16:03,209 --> 00:16:08,939
gonna get you know 30 50 percent

00:16:06,110 --> 00:16:09,990
hundreds of percent slower right you

00:16:08,939 --> 00:16:13,529
would none of you would have taken it

00:16:09,990 --> 00:16:16,920
right every year we buy processors or

00:16:13,529 --> 00:16:18,779
every couple of years whatever and the

00:16:16,920 --> 00:16:20,490
processor companies have been beating

00:16:18,779 --> 00:16:23,519
each other over the head but for the

00:16:20,490 --> 00:16:25,620
past few decades around spec numbers now

00:16:23,519 --> 00:16:28,290
I hate spec I think spec is a stupid

00:16:25,620 --> 00:16:32,040
thing and I wanted to get what spec spec

00:16:28,290 --> 00:16:36,269
in sorry and what's spec and I'm making

00:16:32,040 --> 00:16:38,879
you explain things ah okay doing my job

00:16:36,269 --> 00:16:40,110
in industry industry standard benchmarks

00:16:38,879 --> 00:16:41,910
I'll just leave it at that there there

00:16:40,110 --> 00:16:43,679
are some quote unquote industry standard

00:16:41,910 --> 00:16:45,839
benchmarks that people use they very

00:16:43,679 --> 00:16:47,249
contrived but process of vendors will

00:16:45,839 --> 00:16:49,829
beat each other over the head using them

00:16:47,249 --> 00:16:52,800
and every year you have to get you know

00:16:49,829 --> 00:16:55,740
X % faster at running these contrived

00:16:52,800 --> 00:16:57,660
benchmarks right and in order to do that

00:16:55,740 --> 00:17:00,779
you got to do something right you can't

00:16:57,660 --> 00:17:03,029
just get faster right so speculation has

00:17:00,779 --> 00:17:05,789
been the magic wand that they've used

00:17:03,029 --> 00:17:07,380
for a very long time in order to make

00:17:05,789 --> 00:17:09,179
these machines faster and faster and

00:17:07,380 --> 00:17:11,970
faster and no consumer until fairly

00:17:09,179 --> 00:17:15,600
recently has said how did you do that

00:17:11,970 --> 00:17:18,120
right it's really been this world of us

00:17:15,600 --> 00:17:20,010
guys in the software space traditionally

00:17:18,120 --> 00:17:21,720
kind of ignoring everything that's been

00:17:20,010 --> 00:17:23,730
going on in the hardware space and

00:17:21,720 --> 00:17:25,260
except we just told them we hate you

00:17:23,730 --> 00:17:25,920
guys we don't want to ever talk to you

00:17:25,260 --> 00:17:27,360
and we need our

00:17:25,920 --> 00:17:30,960
you need to get faster what's wrong with

00:17:27,360 --> 00:17:32,550
you right so so this has been a fabulous

00:17:30,960 --> 00:17:34,470
opportunity for us to have these

00:17:32,550 --> 00:17:37,380
conversations finally and start

00:17:34,470 --> 00:17:39,120
communicating more and also saying I'd

00:17:37,380 --> 00:17:41,310
like my machine to be faster but I'd

00:17:39,120 --> 00:17:44,370
also like to prioritize security and now

00:17:41,310 --> 00:17:46,590
that now that we tell them that now they

00:17:44,370 --> 00:17:48,330
can legitimately prioritize that

00:17:46,590 --> 00:17:51,630
trade-off I think you will see

00:17:48,330 --> 00:17:53,160
interesting results but I don't think we

00:17:51,630 --> 00:17:54,390
know what they're gonna be yet I think I

00:17:53,160 --> 00:17:55,950
think we're really still trying to

00:17:54,390 --> 00:17:59,040
figure out how to make processors more

00:17:55,950 --> 00:18:00,750
secure my call to action was to lobby

00:17:59,040 --> 00:18:02,130
with the processor vendors to invest in

00:18:00,750 --> 00:18:03,060
this space but right now that's

00:18:02,130 --> 00:18:04,950
essentially research

00:18:03,060 --> 00:18:09,510
it's not even development right that's

00:18:04,950 --> 00:18:11,760
where we have to start Thanks okay thank

00:18:09,510 --> 00:18:15,390
you very much over here please all right

00:18:11,760 --> 00:18:18,660
so so far we've learned that if we've

00:18:15,390 --> 00:18:20,940
got software that handles confidential

00:18:18,660 --> 00:18:23,700
valuable data we should run it in the

00:18:20,940 --> 00:18:25,680
cloud rather on in the Wild West I get

00:18:23,700 --> 00:18:28,070
that but I want to take that one step

00:18:25,680 --> 00:18:32,520
further and see how you respond to this

00:18:28,070 --> 00:18:34,980
so imagine here's the CTO of a

00:18:32,520 --> 00:18:38,340
medium-sized software company he's

00:18:34,980 --> 00:18:40,200
learning about this stuff and he asks

00:18:38,340 --> 00:18:41,490
about this application they say well

00:18:40,200 --> 00:18:44,310
that one's alright because it's written

00:18:41,490 --> 00:18:47,070
in Java and the java virtual machine has

00:18:44,310 --> 00:18:49,380
been updated to to have mitigations in

00:18:47,070 --> 00:18:50,670
it and then he asked us about this other

00:18:49,380 --> 00:18:51,840
application and they say well that's

00:18:50,670 --> 00:18:52,500
okay cuz it runs in a doubt in that

00:18:51,840 --> 00:18:56,490
environment

00:18:52,500 --> 00:18:58,410
it's a c-sharp application and it's fine

00:18:56,490 --> 00:19:00,450
because microsoft has got stuff in the

00:18:58,410 --> 00:19:03,210
dotnet execution whatever it's called

00:19:00,450 --> 00:19:04,650
and and what about this one over here

00:19:03,210 --> 00:19:08,010
well we got the big problems there why

00:19:04,650 --> 00:19:10,290
is that it's written in C++ there's no

00:19:08,010 --> 00:19:13,650
virtual machine sitting between our code

00:19:10,290 --> 00:19:15,330
and the machine which means that instead

00:19:13,650 --> 00:19:18,270
of relying on all the experts at

00:19:15,330 --> 00:19:21,420
Microsoft and other places to fix this

00:19:18,270 --> 00:19:26,670
for us we're kind of on our own here

00:19:21,420 --> 00:19:29,760
why would the CTO or president or

00:19:26,670 --> 00:19:34,350
whatever executive of any software

00:19:29,760 --> 00:19:36,270
company ever want to have a an

00:19:34,350 --> 00:19:39,020
application that handles sensitive data

00:19:36,270 --> 00:19:41,900
written in C++ or any other native

00:19:39,020 --> 00:19:45,230
language ever again Rickett that's a

00:19:41,900 --> 00:19:46,520
great question um fortunately I do think

00:19:45,230 --> 00:19:48,650
there's a good answer to it as well

00:19:46,520 --> 00:19:50,090
um you talk about the the virtual

00:19:48,650 --> 00:19:51,290
machine and how you have experts working

00:19:50,090 --> 00:19:53,330
on this virtual machine or this

00:19:51,290 --> 00:19:55,280
environment helped make it secure I

00:19:53,330 --> 00:19:58,190
think it's a mistake to think you don't

00:19:55,280 --> 00:20:00,830
have an analogous situation in C++

00:19:58,190 --> 00:20:02,900
how many folks here have written their

00:20:00,830 --> 00:20:08,420
own C++ compiler that they use for all

00:20:02,900 --> 00:20:11,180
of their software right no we want to

00:20:08,420 --> 00:20:14,180
have a job to me I have to do a binary

00:20:11,180 --> 00:20:15,950
release but like no one else right

00:20:14,180 --> 00:20:18,650
everyone's relying on their compilers

00:20:15,950 --> 00:20:22,190
their tool chains to essentially provide

00:20:18,650 --> 00:20:23,900
that same kind of expertise now there is

00:20:22,190 --> 00:20:25,310
still an update problem right you're

00:20:23,900 --> 00:20:27,020
going to have to do an update you but

00:20:25,310 --> 00:20:29,540
again you have to have a plan for

00:20:27,020 --> 00:20:31,100
updating for security generally you also

00:20:29,540 --> 00:20:32,570
going to have security bugs in your code

00:20:31,100 --> 00:20:34,370
that you're going to have to update with

00:20:32,570 --> 00:20:35,840
you're also going to have bugs in your

00:20:34,370 --> 00:20:38,030
VM that you're going to have to update

00:20:35,840 --> 00:20:39,860
the VM with okay it's not clear that

00:20:38,030 --> 00:20:41,480
updating the VM versus updating the

00:20:39,860 --> 00:20:43,430
application is going to be a

00:20:41,480 --> 00:20:45,260
dramatically different experience what

00:20:43,430 --> 00:20:47,270
we found at least at Google where we use

00:20:45,260 --> 00:20:49,430
a lot of Java code we also use a lot of

00:20:47,270 --> 00:20:51,320
C++ code is that the difference in

00:20:49,430 --> 00:20:53,000
complexity of updating these things that

00:20:51,320 --> 00:20:55,010
is updating a compiler and doing a

00:20:53,000 --> 00:20:57,440
binary lease versus updating the VM

00:20:55,010 --> 00:21:00,290
that's running all of our Java services

00:20:57,440 --> 00:21:02,840
is very comparable in many cases we

00:21:00,290 --> 00:21:04,520
can't do the VM update globally we

00:21:02,840 --> 00:21:06,410
actually have to let applications pick

00:21:04,520 --> 00:21:08,030
the update when they're ready and that's

00:21:06,410 --> 00:21:10,340
essentially the same as a binary update

00:21:08,030 --> 00:21:12,650
yeah but there's a huge important thing

00:21:10,340 --> 00:21:15,260
that I believe that answer misses you

00:21:12,650 --> 00:21:17,720
work for Google which is a essentially

00:21:15,260 --> 00:21:21,050
form of SAS provider I happen to program

00:21:17,720 --> 00:21:23,270
on a SAS application as well other parts

00:21:21,050 --> 00:21:25,820
of my company's products are delivered

00:21:23,270 --> 00:21:28,040
to our clients those parts of those

00:21:25,820 --> 00:21:30,620
companies are supporting releases that

00:21:28,040 --> 00:21:32,210
were done five to ten years ago because

00:21:30,620 --> 00:21:36,500
the clients have not up taken the

00:21:32,210 --> 00:21:38,870
upgrades absolutely and and and I I I

00:21:36,500 --> 00:21:40,550
think maybe we're your answer is going

00:21:38,870 --> 00:21:42,470
and I would I would tend to agree with

00:21:40,550 --> 00:21:44,360
this is that if you're a software

00:21:42,470 --> 00:21:46,400
company you better start delivering your

00:21:44,360 --> 00:21:47,630
software on the cloud or you're never

00:21:46,400 --> 00:21:49,100
gonna be able to solve these problem

00:21:47,630 --> 00:21:50,060
they make a different comment it's not

00:21:49,100 --> 00:21:50,630
about delivering the software on the

00:21:50,060 --> 00:21:53,120
cloud

00:21:50,630 --> 00:21:54,770
about delivering updates the specter is

00:21:53,120 --> 00:21:56,830
not interesting here if you have

00:21:54,770 --> 00:21:59,570
five-year-old software it has

00:21:56,830 --> 00:22:01,520
vulnerabilities in it it has five years

00:21:59,570 --> 00:22:02,960
of vulnerabilities in it you need an

00:22:01,520 --> 00:22:05,570
update planet that's not gonna change

00:22:02,960 --> 00:22:07,730
but cause of speculative execution now

00:22:05,570 --> 00:22:09,350
it is like there is some challenges here

00:22:07,730 --> 00:22:11,360
the interesting thing is we have more

00:22:09,350 --> 00:22:14,750
tools in our tool chains right now

00:22:11,360 --> 00:22:15,560
mitigate spectre then we do in the JVM

00:22:14,750 --> 00:22:17,660
that I'm aware of

00:22:15,560 --> 00:22:19,430
I don't know about net but I think

00:22:17,660 --> 00:22:20,960
actually if anything C++ is at the

00:22:19,430 --> 00:22:23,150
leading edge here and some of that's

00:22:20,960 --> 00:22:24,680
because of the risk the risk is in some

00:22:23,150 --> 00:22:26,840
ways greatest when you have native code

00:22:24,680 --> 00:22:28,640
but it's also just because the experts

00:22:26,840 --> 00:22:30,110
are working to make sure that the

00:22:28,640 --> 00:22:32,420
environment is prepared and

00:22:30,110 --> 00:22:34,070
unfortunately so on it's on you to then

00:22:32,420 --> 00:22:36,560
make sure that your update strategy is

00:22:34,070 --> 00:22:38,000
in place and follow one way is to move

00:22:36,560 --> 00:22:40,070
it to the cloud but there are other ways

00:22:38,000 --> 00:22:44,120
that are just as fine the key is to

00:22:40,070 --> 00:22:44,870
update so to build on your point there

00:22:44,120 --> 00:22:47,570
and I agree with everything you just

00:22:44,870 --> 00:22:50,540
said Chameli the point about the

00:22:47,570 --> 00:22:54,430
deployed binary is out there right so I

00:22:50,540 --> 00:22:57,530
work primarily in traditional enterprise

00:22:54,430 --> 00:22:59,000
and matt has a lot of experience with us

00:22:57,530 --> 00:23:01,580
as well hump right so that you speak in

00:22:59,000 --> 00:23:03,040
a moment to that but you know when when

00:23:01,580 --> 00:23:05,600
things technologies like replica liens

00:23:03,040 --> 00:23:07,160
came along we looked at them and said

00:23:05,600 --> 00:23:09,290
well that's great if you can rebuild the

00:23:07,160 --> 00:23:11,810
whole world I mean I I love Google so

00:23:09,290 --> 00:23:14,000
much I wish I had some of the fun toys

00:23:11,810 --> 00:23:16,760
they have and so on and I said how do we

00:23:14,000 --> 00:23:19,100
make that work for us because we've got

00:23:16,760 --> 00:23:20,780
all these existing binary zout there and

00:23:19,100 --> 00:23:22,700
so sometimes the answer is a little bit

00:23:20,780 --> 00:23:24,980
different and we have to take more steps

00:23:22,700 --> 00:23:28,670
to get there if we don't control our

00:23:24,980 --> 00:23:30,410
entire destiny ourselves but we can take

00:23:28,670 --> 00:23:33,530
steps you know why do you want to run

00:23:30,410 --> 00:23:35,270
native code as opposed to Java very

00:23:33,530 --> 00:23:36,740
simply for performance for the same

00:23:35,270 --> 00:23:38,780
reason that everyone has always wanted

00:23:36,740 --> 00:23:40,100
to running if it'll be very sad if the

00:23:38,780 --> 00:23:43,010
industry said we're gonna use more of

00:23:40,100 --> 00:23:44,900
these runtimes as an answer to you know

00:23:43,010 --> 00:23:47,120
deal with security issues this is one

00:23:44,900 --> 00:23:48,740
set of security problems where we have

00:23:47,120 --> 00:23:50,750
some unique challenges that might

00:23:48,740 --> 00:23:53,390
require some people to ship new binaries

00:23:50,750 --> 00:23:55,340
but there are tons of vulnerabilities

00:23:53,390 --> 00:23:57,620
out there every day that require people

00:23:55,340 --> 00:23:59,270
to ship you software or make tweaks to

00:23:57,620 --> 00:24:01,520
their environment or update their CPU

00:23:59,270 --> 00:24:04,230
micro code or you know whatever right I

00:24:01,520 --> 00:24:06,179
mean it's only gonna be a couple of

00:24:04,230 --> 00:24:08,580
cific cases where you might have to

00:24:06,179 --> 00:24:11,610
release a software update I don't see

00:24:08,580 --> 00:24:13,770
this fundamentally changing the you know

00:24:11,610 --> 00:24:15,360
the way the entire industry operates

00:24:13,770 --> 00:24:17,610
other than hopefully we all get better

00:24:15,360 --> 00:24:19,350
at releasing updates yeah and I'm the

00:24:17,610 --> 00:24:21,780
element that I would add to this is that

00:24:19,350 --> 00:24:23,880
calculates the calculus of evaluating

00:24:21,780 --> 00:24:25,669
which like the language in which the

00:24:23,880 --> 00:24:28,679
application that you're picking uses

00:24:25,669 --> 00:24:30,270
Specter and the other issues don't it's

00:24:28,679 --> 00:24:31,650
just a new wrinkle and that already

00:24:30,270 --> 00:24:33,360
existing equation that we already had

00:24:31,650 --> 00:24:35,460
out there to evaluate which is the most

00:24:33,360 --> 00:24:37,620
suitable language for the scenario on

00:24:35,460 --> 00:24:39,419
what you're using and so if a big part

00:24:37,620 --> 00:24:41,400
of your calculus was safety in the

00:24:39,419 --> 00:24:43,200
application you were looking for you

00:24:41,400 --> 00:24:44,299
might not want to use C++ right you

00:24:43,200 --> 00:24:47,010
might not want to go that route and

00:24:44,299 --> 00:24:49,140
Specter adds a new dimension to that and

00:24:47,010 --> 00:24:51,240
it applies kind of you know horizontally

00:24:49,140 --> 00:24:52,380
across all of those so that would be one

00:24:51,240 --> 00:24:54,270
way I'd look at it too but the update

00:24:52,380 --> 00:24:55,500
story is another huge thing what what

00:24:54,270 --> 00:24:58,049
what's the l a-- or how do you actually

00:24:55,500 --> 00:24:59,700
control for updates let me just add and

00:24:58,049 --> 00:25:02,820
I appreciate those answers and they're

00:24:59,700 --> 00:25:05,370
very helpful however let me just cite

00:25:02,820 --> 00:25:07,410
one interesting kind of historical

00:25:05,370 --> 00:25:09,990
counter example for many years

00:25:07,410 --> 00:25:12,360
large numbers of corporations in the

00:25:09,990 --> 00:25:14,970
business world preferred to use

00:25:12,360 --> 00:25:17,610
Microsoft Windows than Linux because

00:25:14,970 --> 00:25:19,230
they were afraid of safety issues now

00:25:17,610 --> 00:25:21,150
that was a period during which the

00:25:19,230 --> 00:25:23,760
number of vulnerabilities that were

00:25:21,150 --> 00:25:25,350
affecting Microsoft Windows was probably

00:25:23,760 --> 00:25:28,830
two orders of magnitude greater than

00:25:25,350 --> 00:25:30,809
those that were affecting Linux in other

00:25:28,830 --> 00:25:35,580
words this isn't always about reality

00:25:30,809 --> 00:25:38,400
sometimes it's about perceptions and I I

00:25:35,580 --> 00:25:41,010
just hope that we can publicize the fact

00:25:38,400 --> 00:25:42,720
that C++ is in the forefront and that'll

00:25:41,010 --> 00:25:44,070
stay there absolutely I mean that's why

00:25:42,720 --> 00:25:46,350
I wanted to come here give the talk I

00:25:44,070 --> 00:25:50,309
think thank you for the question I will

00:25:46,350 --> 00:25:54,179
go over to the left please so I have a

00:25:50,309 --> 00:25:56,280
pretty good handle on on x86 mitigations

00:25:54,179 --> 00:25:59,040
but but arm has similar problems they

00:25:56,280 --> 00:26:02,100
also do speculative execution so I see

00:25:59,040 --> 00:26:04,919
that we're having micro code changes and

00:26:02,100 --> 00:26:07,440
hardware changes for like Intel CPUs but

00:26:04,919 --> 00:26:11,370
what's arm story right now do you want

00:26:07,440 --> 00:26:15,510
me to so so I had the distinct pleasure

00:26:11,370 --> 00:26:16,620
of dealing with this for I think seven

00:26:15,510 --> 00:26:18,930
different

00:26:16,620 --> 00:26:20,970
No nine different microarchitectures

00:26:18,930 --> 00:26:22,980
across a number of different product

00:26:20,970 --> 00:26:24,690
families so the total set that we dealt

00:26:22,980 --> 00:26:28,740
with on the Red Hat side was very small

00:26:24,690 --> 00:26:31,980
it was x86 Intel and AMD it was all of

00:26:28,740 --> 00:26:34,350
the arm servers was IBM power and IBM Z

00:26:31,980 --> 00:26:36,600
so it was a very small set and I

00:26:34,350 --> 00:26:39,750
certainly enjoy it over the holidays

00:26:36,600 --> 00:26:42,510
last year testing mainframe assembly

00:26:39,750 --> 00:26:44,460
code that was something I was looking

00:26:42,510 --> 00:26:46,260
forward to all year long or electricity

00:26:44,460 --> 00:26:47,490
yeah we got or whatever and I'm like oh

00:26:46,260 --> 00:26:50,670
man this is great that's all I ever

00:26:47,490 --> 00:26:53,929
wanted to do so so I'll walk you through

00:26:50,670 --> 00:26:56,070
just a very quick summary of those so

00:26:53,929 --> 00:26:58,920
different architectures have different

00:26:56,070 --> 00:27:03,570
knobs and dials I'll try to explain the

00:26:58,920 --> 00:27:05,610
terms right so x86 has has a fundamental

00:27:03,570 --> 00:27:06,840
design choice where we're a number of

00:27:05,610 --> 00:27:09,600
years ago they had they had some

00:27:06,840 --> 00:27:11,429
problems and as a result they introduced

00:27:09,600 --> 00:27:13,650
this concept called micro code which

00:27:11,429 --> 00:27:16,710
basically means you can get this blob

00:27:13,650 --> 00:27:18,420
that you load assigned blob

00:27:16,710 --> 00:27:20,610
you can't see inside it but it will

00:27:18,420 --> 00:27:22,559
change the CPUs configuration and it

00:27:20,610 --> 00:27:25,770
will change how how certain operations

00:27:22,559 --> 00:27:27,390
execute and also change what I called

00:27:25,770 --> 00:27:29,760
chicken bits inside the processor to

00:27:27,390 --> 00:27:32,940
turn things off so when you build an x86

00:27:29,760 --> 00:27:35,940
processor today there's about 10,000

00:27:32,940 --> 00:27:38,760
chicken bits in there and that's because

00:27:35,940 --> 00:27:41,730
the engineers say man we're the best

00:27:38,760 --> 00:27:44,490
we never screw up but just in case we

00:27:41,730 --> 00:27:46,679
did this little thing I've been working

00:27:44,490 --> 00:27:48,660
on for last year I'm no imperfect but I

00:27:46,679 --> 00:27:50,910
might have gotten it wrong and my jobs

00:27:48,660 --> 00:27:52,290
not worth it so I'm gonna put all these

00:27:50,910 --> 00:27:54,120
knobs and dials that let you turn these

00:27:52,290 --> 00:27:56,130
things off so there's about 10,000 of

00:27:54,120 --> 00:27:57,750
them in the average you know x86

00:27:56,130 --> 00:28:00,150
processor alone where you can turn all

00:27:57,750 --> 00:28:02,660
kinds of very specific things off so

00:28:00,150 --> 00:28:04,860
microcode can do that in addition to

00:28:02,660 --> 00:28:08,250
changing exactly how certain

00:28:04,860 --> 00:28:09,960
instructions work not everything but

00:28:08,250 --> 00:28:12,360
that's what x86 can do that's best how

00:28:09,960 --> 00:28:16,530
you implement things like IVRS and IB PB

00:28:12,360 --> 00:28:19,710
and so on when it comes to arm

00:28:16,530 --> 00:28:21,090
they have trusted firmware so they have

00:28:19,710 --> 00:28:23,280
something that runs at a lower level

00:28:21,090 --> 00:28:25,440
than the operating system and they can

00:28:23,280 --> 00:28:28,080
provide new interfaces that the OS can

00:28:25,440 --> 00:28:30,450
call into and secure firmware so it's

00:28:28,080 --> 00:28:33,690
very similar to having say we have IBRS

00:28:30,450 --> 00:28:35,490
I on x86 to affect branch predictor

00:28:33,690 --> 00:28:37,320
behavior we have similar interfaces on

00:28:35,490 --> 00:28:40,530
arm that we can call into and trusted

00:28:37,320 --> 00:28:43,800
firmware to do similar stuff on power

00:28:40,530 --> 00:28:47,490
and Z we have something called milli

00:28:43,800 --> 00:28:51,120
code because IBM invented it because IBM

00:28:47,490 --> 00:28:53,660
write and it does very similar things to

00:28:51,120 --> 00:28:56,040
micro code so if you're running an IBM

00:28:53,660 --> 00:28:57,870
mainframe system you probably already

00:28:56,040 --> 00:29:00,270
got a call from IBM in fact it probably

00:28:57,870 --> 00:29:01,440
is his true story apparently mainframes

00:29:00,270 --> 00:29:03,200
when they have a problem they actually

00:29:01,440 --> 00:29:06,570
automatically put service pools in

00:29:03,200 --> 00:29:08,250
because why not right so it probably

00:29:06,570 --> 00:29:09,510
already called home and they probably

00:29:08,250 --> 00:29:14,310
already sent you an engineer to figure

00:29:09,510 --> 00:29:16,080
this yeah when you get one when you get

00:29:14,310 --> 00:29:19,290
one this is this is why I'm convinced

00:29:16,080 --> 00:29:21,060
the Skynet will be a you know a zero

00:29:19,290 --> 00:29:22,620
right because when you get one they put

00:29:21,060 --> 00:29:24,090
a phone line in as well so it literally

00:29:22,620 --> 00:29:26,040
can call and say I've got a problem I

00:29:24,090 --> 00:29:28,290
need you to fix me right so I'm pretty

00:29:26,040 --> 00:29:29,940
sure that they already they already

00:29:28,290 --> 00:29:31,470
called or their customers and said hey

00:29:29,940 --> 00:29:33,120
we'd like you to deploy these updates so

00:29:31,470 --> 00:29:36,060
I mean they've been fabulous with that I

00:29:33,120 --> 00:29:37,560
know we sneakily deployed a mainframe

00:29:36,060 --> 00:29:39,330
update over the holidays that none of

00:29:37,560 --> 00:29:41,700
our engineers were aware of to to

00:29:39,330 --> 00:29:43,140
address this so and then for power it's

00:29:41,700 --> 00:29:46,440
very similar they have million code so

00:29:43,140 --> 00:29:48,390
you will find it's a bit different but

00:29:46,440 --> 00:29:50,580
it's very similar across the

00:29:48,390 --> 00:29:52,650
architectures are there any hardware

00:29:50,580 --> 00:29:55,110
mitigation yet because Intel starting

00:29:52,650 --> 00:29:58,680
you're starting to see if you a few

00:29:55,110 --> 00:30:01,500
patches in hardware with Intel I would

00:29:58,680 --> 00:30:03,630
say very similar it's the start I know

00:30:01,500 --> 00:30:05,430
the arm has has some initial firmware

00:30:03,630 --> 00:30:08,010
updates that expose similar interfaces

00:30:05,430 --> 00:30:10,470
the ones that Intel's exposing AMD is

00:30:08,010 --> 00:30:12,210
exposing I do think that it's early days

00:30:10,470 --> 00:30:13,680
on hardware you have to realize that the

00:30:12,210 --> 00:30:15,480
fixing this in Hardware one of the

00:30:13,680 --> 00:30:16,770
reasons we did so much in software is

00:30:15,480 --> 00:30:19,020
because fixing this and hardware has

00:30:16,770 --> 00:30:21,300
very high latency and it's very

00:30:19,020 --> 00:30:22,470
challenging to do especially things like

00:30:21,300 --> 00:30:24,120
some of the things are easy when it was

00:30:22,470 --> 00:30:25,890
a CPU bug and there's a there's a

00:30:24,120 --> 00:30:27,840
chicken bit or something like that it's

00:30:25,890 --> 00:30:29,460
much easier but when it's something much

00:30:27,840 --> 00:30:32,220
more fundamental it's just really hard

00:30:29,460 --> 00:30:33,480
to crap the the hardware updates and so

00:30:32,220 --> 00:30:34,800
I don't think you should expect this

00:30:33,480 --> 00:30:36,540
hardware updates roll out really fast

00:30:34,800 --> 00:30:38,970
but they're definitely working on and

00:30:36,540 --> 00:30:40,590
similarly like the guidance from arm for

00:30:38,970 --> 00:30:42,030
conditional branch misprediction which

00:30:40,590 --> 00:30:42,809
is I think what Chandler mostly talked

00:30:42,030 --> 00:30:45,809
about in his talk

00:30:42,809 --> 00:30:47,940
is still around the concept of please

00:30:45,809 --> 00:30:49,799
add data dependencies and serializing

00:30:47,940 --> 00:30:51,440
instructions to the code paths that are

00:30:49,799 --> 00:30:55,590
susceptible to this right it's not a

00:30:51,440 --> 00:30:57,779
categorical thing thank you thank you

00:30:55,590 --> 00:30:59,490
for the question and I've seen the

00:30:57,779 --> 00:31:00,690
documentary film wargames I'm not

00:30:59,490 --> 00:31:04,169
surprised at all that there is a phone

00:31:00,690 --> 00:31:05,850
line into the IBM I think maybe after

00:31:04,169 --> 00:31:08,730
watching that they would have taken it

00:31:05,850 --> 00:31:10,139
out to be clear I love IBM and I'm

00:31:08,730 --> 00:31:11,909
having a bit of fun there but I actually

00:31:10,139 --> 00:31:13,169
think the way they handled this was

00:31:11,909 --> 00:31:15,210
amazing that it really is impressive

00:31:13,169 --> 00:31:16,740
yeah look I make over the phone line but

00:31:15,210 --> 00:31:18,389
it is really impressive we had a really

00:31:16,740 --> 00:31:21,509
good experience just just for the

00:31:18,389 --> 00:31:22,529
recording we hit a really good okay

00:31:21,509 --> 00:31:25,769
let's take the question on the right

00:31:22,529 --> 00:31:29,429
please so the impression that got was

00:31:25,769 --> 00:31:31,740
that the the mitigation in software for

00:31:29,429 --> 00:31:34,259
the most part is about isolating as much

00:31:31,740 --> 00:31:37,379
as possible isolating code that has

00:31:34,259 --> 00:31:40,320
passwords code that handles confidential

00:31:37,379 --> 00:31:43,980
information code that runs untrusted

00:31:40,320 --> 00:31:46,529
other code but I'm not actually sure how

00:31:43,980 --> 00:31:48,480
you do that so suppose I have an

00:31:46,529 --> 00:31:50,789
application that needs to create an SSH

00:31:48,480 --> 00:31:53,190
link there's something else somewhere

00:31:50,789 --> 00:31:55,200
along the way the the programmers meant

00:31:53,190 --> 00:31:57,659
to type in there the password to get

00:31:55,200 --> 00:32:00,980
their SSH key and SAT will be read into

00:31:57,659 --> 00:32:04,139
memory decrypted and sent over the wire

00:32:00,980 --> 00:32:06,840
re-encrypted and sent over the wire what

00:32:04,139 --> 00:32:08,399
would need to be done in that program

00:32:06,840 --> 00:32:11,369
that you know it's all running in one

00:32:08,399 --> 00:32:14,879
memory space to prevent that password

00:32:11,369 --> 00:32:15,899
from being leaked so there are a couple

00:32:14,879 --> 00:32:17,669
of different things here that are kind

00:32:15,899 --> 00:32:19,409
of getting tied up together I want to

00:32:17,669 --> 00:32:21,629
try and separate them out first thing is

00:32:19,409 --> 00:32:23,460
passwords passwords aren't that scary

00:32:21,629 --> 00:32:25,440
this passwords didn't to be very

00:32:23,460 --> 00:32:27,450
ephemeral they don't stay in memory for

00:32:25,440 --> 00:32:28,980
a long time using these kinds of attacks

00:32:27,450 --> 00:32:32,100
would be really challenging you'd have

00:32:28,980 --> 00:32:34,049
to time it so carefully we maybe I know

00:32:32,100 --> 00:32:35,940
that ln TF was able to be used for that

00:32:34,049 --> 00:32:37,529
but most of these have much lower

00:32:35,940 --> 00:32:40,590
bandwidth SAR much harder to use in that

00:32:37,529 --> 00:32:42,539
way I think the key data is the

00:32:40,590 --> 00:32:43,710
interesting case here but it's important

00:32:42,539 --> 00:32:45,600
to think about how the cryptography

00:32:43,710 --> 00:32:48,720
works it's not sending the private key

00:32:45,600 --> 00:32:50,220
anywhere okay and it doesn't need for

00:32:48,720 --> 00:32:52,230
the user interaction with the private

00:32:50,220 --> 00:32:53,700
key to actually be exposed you can have

00:32:52,230 --> 00:32:56,440
a separate system that handles all the

00:32:53,700 --> 00:32:58,450
private key operations right all the

00:32:56,440 --> 00:33:00,730
that really involve private key and has

00:32:58,450 --> 00:33:02,440
a very controlled very rigorously

00:33:00,730 --> 00:33:04,390
enforced interface there's some other

00:33:02,440 --> 00:33:06,670
trusted component right and then only

00:33:04,390 --> 00:33:08,950
that only that component gets actually

00:33:06,670 --> 00:33:10,840
exposed user interactions and that

00:33:08,950 --> 00:33:13,630
component can kind of isolate damage

00:33:10,840 --> 00:33:15,190
away from the private key material okay

00:33:13,630 --> 00:33:16,960
so that that's the kind of cryptographic

00:33:15,190 --> 00:33:20,260
system that I'm suggesting if you look

00:33:16,960 --> 00:33:22,960
at something like a TLS 1.3 I'm not a

00:33:20,260 --> 00:33:25,150
super expert on you may have to like

00:33:22,960 --> 00:33:27,640
take over at some point but the the idea

00:33:25,150 --> 00:33:29,830
here is that you can use ephemeral keys

00:33:27,640 --> 00:33:31,990
that are only used for symmetric

00:33:29,830 --> 00:33:34,210
encryption of a single session right

00:33:31,990 --> 00:33:35,710
they don't keep getting used and you

00:33:34,210 --> 00:33:38,440
have to create them with a long-lived

00:33:35,710 --> 00:33:40,540
key but you can offload that creation if

00:33:38,440 --> 00:33:43,480
you want right you can separate the

00:33:40,540 --> 00:33:45,520
active process of encrypting data from

00:33:43,480 --> 00:33:48,160
the thing that creates a one-time use

00:33:45,520 --> 00:33:50,530
key now the thing that's exposed to

00:33:48,160 --> 00:33:52,450
attacks has a very short shelf life has

00:33:50,530 --> 00:33:54,850
very low value the thing that has high

00:33:52,450 --> 00:33:56,500
value never got to interact with the the

00:33:54,850 --> 00:33:57,760
actual attacker and I think that kind of

00:33:56,500 --> 00:33:59,800
separation is what you're looking for

00:33:57,760 --> 00:34:01,510
but I also want to emphasize there may

00:33:59,800 --> 00:34:04,210
there are going to be places where you

00:34:01,510 --> 00:34:05,740
cannot build that level of separation

00:34:04,210 --> 00:34:07,450
and that's where you see people working

00:34:05,740 --> 00:34:09,610
for deploy kind of manual mitigation

00:34:07,450 --> 00:34:11,950
variant one because they need at least

00:34:09,610 --> 00:34:13,900
one piece of their infrastructure to be

00:34:11,950 --> 00:34:17,620
hardened because it has to both have a

00:34:13,900 --> 00:34:19,630
secret and interact with untrusted yeah

00:34:17,620 --> 00:34:21,070
so I'm by no means a cryptography expert

00:34:19,630 --> 00:34:23,470
but I'll give you a concrete example of

00:34:21,070 --> 00:34:25,750
how address base isolation can work

00:34:23,470 --> 00:34:27,490
concretely in practice so Windows has a

00:34:25,750 --> 00:34:29,440
technology called virtualization based

00:34:27,490 --> 00:34:31,120
security and we're basically it's

00:34:29,440 --> 00:34:33,160
leveraging hardware virtualization to

00:34:31,120 --> 00:34:35,650
allow you to create a separate trusted

00:34:33,160 --> 00:34:37,270
execution context in which you know your

00:34:35,650 --> 00:34:39,070
normal operating system can't read or

00:34:37,270 --> 00:34:40,750
write memory that executes in this other

00:34:39,070 --> 00:34:42,550
separate virtualized context that's the

00:34:40,750 --> 00:34:43,390
easiest way to think about it and one of

00:34:42,550 --> 00:34:45,400
the ways that we've actually applied

00:34:43,390 --> 00:34:47,680
that is a technology called credential

00:34:45,400 --> 00:34:50,020
guard it used to be the case on windows

00:34:47,680 --> 00:34:52,270
that we have a trusted process called LS

00:34:50,020 --> 00:34:54,040
a SS it's the local security authority

00:34:52,270 --> 00:34:55,660
it is what contains the thing that

00:34:54,040 --> 00:34:57,160
implements challenge-response for

00:34:55,660 --> 00:34:59,800
communicating with other machines on the

00:34:57,160 --> 00:35:00,850
network for ntlm and whatnot and it used

00:34:59,800 --> 00:35:02,800
to be the case that people would try to

00:35:00,850 --> 00:35:05,080
poke in there to actually go extract

00:35:02,800 --> 00:35:06,220
your hashes so they could have personate

00:35:05,080 --> 00:35:08,350
you on the network and the things of

00:35:06,220 --> 00:35:08,850
that sort so instead what we've done is

00:35:08,350 --> 00:35:11,070
we've moved

00:35:08,850 --> 00:35:12,900
that challenge you know the challenge

00:35:11,070 --> 00:35:15,600
response protocol into that one of these

00:35:12,900 --> 00:35:17,250
isolated context such that the secrets

00:35:15,600 --> 00:35:18,750
that are used in there to complete that

00:35:17,250 --> 00:35:21,180
challenge response aren't actually

00:35:18,750 --> 00:35:23,190
available to the normal world and so if

00:35:21,180 --> 00:35:25,590
you extend that concept to other types

00:35:23,190 --> 00:35:27,630
of key exchange protocols you can it's a

00:35:25,590 --> 00:35:29,010
it's an example of applying address base

00:35:27,630 --> 00:35:30,930
isolation where you're keeping your

00:35:29,010 --> 00:35:32,880
secrets in a separate place that isn't

00:35:30,930 --> 00:35:34,620
normally available to everything else so

00:35:32,880 --> 00:35:36,330
that's just one concrete example of how

00:35:34,620 --> 00:35:39,390
you could do it that actually answer a

00:35:36,330 --> 00:35:41,700
question yeah I think you did and the

00:35:39,390 --> 00:35:43,680
impression that get also is that this is

00:35:41,700 --> 00:35:48,530
something that if there's a silver

00:35:43,680 --> 00:35:50,970
lining to this the technology to and the

00:35:48,530 --> 00:35:52,710
interfaces to do this kind of isolation

00:35:50,970 --> 00:35:55,980
they're going to get easier to use and

00:35:52,710 --> 00:35:57,540
more more taut you know they're gonna be

00:35:55,980 --> 00:35:58,680
taught more more commonly because like

00:35:57,540 --> 00:36:00,300
you're gonna have to write your software

00:35:58,680 --> 00:36:01,800
this way correct and it's gonna help

00:36:00,300 --> 00:36:03,060
with all kinds of vulnerabilities not

00:36:01,800 --> 00:36:05,040
just the Spector family of

00:36:03,060 --> 00:36:07,050
vulnerabilities that's right if anything

00:36:05,040 --> 00:36:08,520
insecurity outside of even specter and

00:36:07,050 --> 00:36:09,930
all the other issues we've already been

00:36:08,520 --> 00:36:12,600
moving into this world of pervasive

00:36:09,930 --> 00:36:14,250
isolation right where we have more

00:36:12,600 --> 00:36:16,320
granular compartmentalization and

00:36:14,250 --> 00:36:18,000
isolation of components and this is yet

00:36:16,320 --> 00:36:20,460
another good reason to move to that

00:36:18,000 --> 00:36:23,130
model and to Chandlers point earlier in

00:36:20,460 --> 00:36:24,960
his talk about we didn't say yeah yeah

00:36:23,130 --> 00:36:27,720
but rekeying right so if you have a long

00:36:24,960 --> 00:36:30,270
live session most of these protocols

00:36:27,720 --> 00:36:32,640
support reaching very few people use

00:36:30,270 --> 00:36:33,720
that yeah it's really rare right now but

00:36:32,640 --> 00:36:35,040
like this is essentially we've got to

00:36:33,720 --> 00:36:36,660
push on the cryptographic community to

00:36:35,040 --> 00:36:38,130
really embrace these kinds of techniques

00:36:36,660 --> 00:36:40,590
and to prioritize that when they're

00:36:38,130 --> 00:36:42,240
building systems thank you me to

00:36:40,590 --> 00:36:44,550
question so we're starting to run out of

00:36:42,240 --> 00:36:46,170
time unfortunately so we can try and get

00:36:44,550 --> 00:36:47,310
this done I would like everyone to have

00:36:46,170 --> 00:36:48,750
a chance to answer their question okay

00:36:47,310 --> 00:36:51,030
so so the three of us have to actually

00:36:48,750 --> 00:36:52,560
be like briefed now you're saying I'm

00:36:51,030 --> 00:36:57,450
afraid so yeah I should have probably

00:36:52,560 --> 00:37:00,540
told you this a different animal so over

00:36:57,450 --> 00:37:02,160
on this side quick question and let's

00:37:00,540 --> 00:37:14,760
see if we can do a turbo three minutes

00:37:02,160 --> 00:37:16,380
sounds good if they're fast they'll be

00:37:14,760 --> 00:37:19,619
defaulted if they're not they'll be

00:37:16,380 --> 00:37:22,950
opted in cool excellent

00:37:19,619 --> 00:37:24,630
anyways that right this side okay so one

00:37:22,950 --> 00:37:26,160
of the things that I've been noticing is

00:37:24,630 --> 00:37:29,930
that some of the medications that you

00:37:26,160 --> 00:37:32,910
are shown we're almost as contrived as

00:37:29,930 --> 00:37:36,420
like the red for me that is pretty crazy

00:37:32,910 --> 00:37:38,400
price and even the elephants right the

00:37:36,420 --> 00:37:40,079
the fact that the elephants blocks the

00:37:38,400 --> 00:37:42,799
branch prediction is just a side effect

00:37:40,079 --> 00:37:46,380
that is not the original intent

00:37:42,799 --> 00:37:49,619
it's a let's render actively documented

00:37:46,380 --> 00:37:51,989
as doing that right it's also course in

00:37:49,619 --> 00:37:53,700
suspect now so they've added with

00:37:51,989 --> 00:37:55,499
respect it's also more fundamental tell

00:37:53,700 --> 00:37:56,670
elephants works on Intel processors

00:37:55,499 --> 00:37:58,739
elephants has always been what they

00:37:56,670 --> 00:38:00,719
called dispatch serializing right and so

00:37:58,739 --> 00:38:02,729
it actually does have strict semantics

00:38:00,719 --> 00:38:05,369
they didn't document it now they do

00:38:02,729 --> 00:38:08,880
AMD is following suit so much my

00:38:05,369 --> 00:38:10,559
question is actually like at the moment

00:38:08,880 --> 00:38:12,089
if the hardware vendors are to fix all

00:38:10,559 --> 00:38:15,150
of this on their own this is going to be

00:38:12,089 --> 00:38:17,670
very hard on the hardware vendors um or

00:38:15,150 --> 00:38:20,640
it will have immense performance penalty

00:38:17,670 --> 00:38:22,229
Oh what I could imagine happening is

00:38:20,640 --> 00:38:24,630
that either hardware vendors say okay

00:38:22,229 --> 00:38:27,829
like we will give you a special contract

00:38:24,630 --> 00:38:30,509
right like if you if you want the

00:38:27,829 --> 00:38:32,460
speculative execution I'm gonna get like

00:38:30,509 --> 00:38:34,049
these special codes to put in your code

00:38:32,460 --> 00:38:36,450
and then it's similar to our memory

00:38:34,049 --> 00:38:38,190
model watch the multi-threading um it'll

00:38:36,450 --> 00:38:40,140
keep with the contract then we still can

00:38:38,190 --> 00:38:42,479
guarantee that nothing bad happens is

00:38:40,140 --> 00:38:47,069
that something direction that anybody is

00:38:42,479 --> 00:38:48,749
going to be working go down so please we

00:38:47,069 --> 00:38:50,430
won't go into the details here today but

00:38:48,749 --> 00:38:53,460
certainly people have thought about it I

00:38:50,430 --> 00:38:56,430
would say one one slightly longer answer

00:38:53,460 --> 00:38:59,700
other architectures in the past tried

00:38:56,430 --> 00:39:01,200
having speculative instructions so I'll

00:38:59,700 --> 00:39:03,539
say one word and I don't want anyone to

00:39:01,200 --> 00:39:05,309
take anything bad because it was a good

00:39:03,539 --> 00:39:08,339
architecture it didn't work out but

00:39:05,309 --> 00:39:09,989
Itanium did implement speculative

00:39:08,339 --> 00:39:11,670
instructions and that required you to

00:39:09,989 --> 00:39:13,140
modify a lot of software if you tell

00:39:11,670 --> 00:39:15,150
people you have to modify your code to

00:39:13,140 --> 00:39:17,549
do speculation then they won't do it so

00:39:15,150 --> 00:39:29,190
go thank you all right over on this side

00:39:17,549 --> 00:39:32,530
please it's so hard so I'll give you an

00:39:29,190 --> 00:39:34,900
analogy for this one go back 20 years 20

00:39:32,530 --> 00:39:36,520
ago some people knew about buffer

00:39:34,900 --> 00:39:38,170
overruns but not very many people and

00:39:36,520 --> 00:39:40,090
then more and more people started to

00:39:38,170 --> 00:39:42,430
learn about them and understand them and

00:39:40,090 --> 00:39:44,710
get better at thinking about how you can

00:39:42,430 --> 00:39:46,720
actually leverage a buffer overrun - oh

00:39:44,710 --> 00:39:48,550
I can hijack the instruction pointer and

00:39:46,720 --> 00:39:50,290
oh I can go and do this and that and the

00:39:48,550 --> 00:39:51,850
same sort of evolution happened for

00:39:50,290 --> 00:39:53,470
other types of memory corruption issues

00:39:51,850 --> 00:39:54,610
such that now we're at a place where you

00:39:53,470 --> 00:39:56,380
look at a modern memory corruption

00:39:54,610 --> 00:39:58,240
exploit and they're phenomenal they're

00:39:56,380 --> 00:40:00,790
works of art in terms of how people do

00:39:58,240 --> 00:40:02,260
this so think of spective execution as

00:40:00,790 --> 00:40:04,810
being we're about four overruns were

00:40:02,260 --> 00:40:07,060
twenty years ago right people just don't

00:40:04,810 --> 00:40:08,560
understand it yet and it's gonna take

00:40:07,060 --> 00:40:10,360
time but the people are smart and

00:40:08,560 --> 00:40:12,310
they'll work out the way they will and

00:40:10,360 --> 00:40:14,170
there's also lower hanging fruit right

00:40:12,310 --> 00:40:18,280
now all right lots of working fruit

00:40:14,170 --> 00:40:19,810
thank you I promise I please thank you

00:40:18,280 --> 00:40:21,370
for all the hard work and the money

00:40:19,810 --> 00:40:26,140
you're actually singing those is crazy

00:40:21,370 --> 00:40:28,630
problem because that's actually and the

00:40:26,140 --> 00:40:30,250
question itself from the presentation

00:40:28,630 --> 00:40:31,630
and understood that the specter is kind

00:40:30,250 --> 00:40:33,460
of a combination of the speculative

00:40:31,630 --> 00:40:35,020
execution and the site randomly I can

00:40:33,460 --> 00:40:37,150
leverage to actually get information

00:40:35,020 --> 00:40:38,860
isn't possible to better this issue from

00:40:37,150 --> 00:40:42,280
the other science while it's on the side

00:40:38,860 --> 00:40:43,750
channels yeah so this is this is a very

00:40:42,280 --> 00:40:45,400
long you'd have to have very long answer

00:40:43,750 --> 00:40:46,810
this but you can break down these

00:40:45,400 --> 00:40:48,910
speculative issues into the speculation

00:40:46,810 --> 00:40:51,160
primitive the thing that allows you to

00:40:48,910 --> 00:40:52,420
speculate and the disclosure primitive

00:40:51,160 --> 00:40:53,950
and the channel through which you

00:40:52,420 --> 00:40:55,840
disclose information and there are

00:40:53,950 --> 00:40:58,000
mitigations on either side of that

00:40:55,840 --> 00:40:59,560
equation that you can pursue and I would

00:40:58,000 --> 00:41:00,940
just add again this is very long answer

00:40:59,560 --> 00:41:03,940
this and great videos out there

00:41:00,940 --> 00:41:06,430
explaining the you know but yeah we

00:41:03,940 --> 00:41:08,440
focused a lot not necessarily channela

00:41:06,430 --> 00:41:10,720
but the industry's focus a lot on one

00:41:08,440 --> 00:41:13,720
side Channel right cash base side

00:41:10,720 --> 00:41:16,630
channels let's not make the mistake of

00:41:13,720 --> 00:41:19,660
focusing only on the ones that we see

00:41:16,630 --> 00:41:21,520
new ones will be found and you know it's

00:41:19,660 --> 00:41:23,140
a general class of problem to think

00:41:21,520 --> 00:41:25,450
about so that the brief thing I want to

00:41:23,140 --> 00:41:27,310
say is I've taken a particular stance in

00:41:25,450 --> 00:41:29,170
in the response here to not focus on

00:41:27,310 --> 00:41:31,240
side channels and the reason is we don't

00:41:29,170 --> 00:41:32,680
think we will ever finish finding any

00:41:31,240 --> 00:41:34,600
ones where as we think we can actually

00:41:32,680 --> 00:41:36,820
attack the speculative execution problem

00:41:34,600 --> 00:41:40,030
in a much more tractable way there are

00:41:36,820 --> 00:41:42,180
so many micro architectural states that

00:41:40,030 --> 00:41:45,840
are available to store information in

00:41:42,180 --> 00:41:48,220
look at the risk of one one more thing

00:41:45,840 --> 00:41:49,660
it's another way to think about this

00:41:48,220 --> 00:41:51,400
just adding on to what Chandler said is

00:41:49,660 --> 00:41:52,750
with any type of vulnerability you

00:41:51,400 --> 00:41:55,000
ideally want to mitigate it at the root

00:41:52,750 --> 00:41:56,350
cause not further down the chain and if

00:41:55,000 --> 00:41:57,580
you go to the side channels the

00:41:56,350 --> 00:41:59,140
communication channels that's further

00:41:57,580 --> 00:42:01,630
down the chain and you might get

00:41:59,140 --> 00:42:03,340
yourself in trouble you know gonna turn

00:42:01,630 --> 00:42:06,490
my cache off and my branch predictor up

00:42:03,340 --> 00:42:09,520
then yeah at least again excellent ok

00:42:06,490 --> 00:42:11,350
very quickly very very quickly quickly

00:42:09,520 --> 00:42:19,780
so most computers in the world are

00:42:11,350 --> 00:42:23,080
phones you never talk with phones haiku

00:42:19,780 --> 00:42:29,590
houses the home vendors are looking at

00:42:23,080 --> 00:42:31,720
this yes last one is the any sense how

00:42:29,590 --> 00:42:35,650
widely this is actually exploited in

00:42:31,720 --> 00:42:38,710
video nope even better than a haiku

00:42:35,650 --> 00:42:40,720
answer okay well thank you very much to

00:42:38,710 --> 00:42:42,550
the panel here for that thank you for

00:42:40,720 --> 00:42:43,980
for participating and

00:42:42,550 --> 00:42:46,490
[Applause]

00:42:43,980 --> 00:42:53,179
[Music]

00:42:46,490 --> 00:42:53,179

YouTube URL: https://www.youtube.com/watch?v=mt_ULMnQ4_A


