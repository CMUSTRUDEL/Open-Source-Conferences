Title: CppCon 2018: “Secure Coding Best Practices: Your First Line Is The Last Line Of Defense (2 of 2)”
Publication date: 2018-10-19
Playlist: CppCon 2018
Description: 
	http://CppCon.org

Matthew Butler “Secure Coding Best Practices: Your First Line Is The Last Line Of Defense (part 2 of 2)”
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018
—
Computer systems are under siege 24 hours a day, day in and day out. The critical security infrastructure designed to protect those systems, won't: 

* Perimeter security won't protect you. 
* Network analytics won't protect you. 
* Virus scanners won't protect you. 
* Even the users who should know better than to click on that too-good-to-be-true offer won't protect you. 

The other side has the best security hardware and software systems other people's money can buy and they have all the time in the world to find creative ways to defeat them. Meltdown and Spectre are prime examples of security vulnerabilities that have lurked dormant for decades. Or have they? If your systems are in any way connected to the outside world, the other side will get inside the wire on you. Know that going in. 

Whether you write applications, libraries or work in kernel code, the line of code you write today may very well be the vulnerability someone else finds tomorrow. By nature every code base contains hundreds of attack surfaces and it only takes one serious vulnerability to compromise your system. 

While Modern C++ is designed to be secure, the ways we use it often aren't. 


In part one of this talk we'll see: 

* How hackers think and how they identify weaknesses in our systems. 
* How to identify hidden attack surfaces, attack vectors and vulnerabilities in critical systems. 
* Where the most common vulnerabilities in Modern and classic C++ are and how to avoid them. 
* Why avoiding parts of the language doesn't help. 
* Where we can trade off security for performance. 

At the end of part one, we'll do a walkthrough of a classic buffer overflow exploit to see how it works and what we've added to the operating systems and compilers to protect against them. Then we'll use it live to run a privilege escalation exploit and gain admin access on a system. 


In part two, we'll see: 

* Why common guidelines and static analysis tools often fail to find vulnerabilities. 
* How to use Threat Modeling to analyze complex systems and built security into our systems at design time. 
* How to use Trust Boundaries to protect critical infrastructure. 
* Why open source and third-party libraries are fast becoming hidden liabilities in our software and how to protect ourselves against their vulnerabilities. 
* What the best practices for protecting our code from attack are. 

At the end of part two, we'll do a walkthrough of an exploit that can be successful today in spite of the safe guards built into our operating systems and compilers. Then, as before, we'll use it live to penetrate a system. 


The critical security infrastructure designed to protect your systems is largely out of your control. The one thing you can control is the next line of code you write. This talk is for anyone that uses C++ or Modern C++ for kernel, applications or libraries that run in the real-world and that face real-world attacks. 

In today's world, that's all of us.
— 
Matthew Butler

Matthew Butler has spent the last three decades as a systems architect and software engineer developing systems for network security, law enforcement and the military. He primarily works in signals intelligence using C, C++ and Modern C++ to build systems running on hardware platforms ranging from embedded micro-controllers to FPGAs to large-scale airborne platforms. Much of his experience has come in either building systems that defend against attackers or building highly sensitive systems that are targets. He is actively involved in the C++ community and is on various planning committees for C++Now and CppCon as well as being a speaker at both.

Over the past thirty years, he has learned the harsh lessons on how we often write systems that fail, not because they don't scale, but because they aren't designed to be secure.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,240 --> 00:00:08,069
welcome back to part 2 somebody brought

00:00:03,959 --> 00:00:12,530
up this picture this picture is in no

00:00:08,069 --> 00:00:14,820
way representative hackers it just isn't

00:00:12,530 --> 00:00:17,039
hackers with people who look just like

00:00:14,820 --> 00:00:18,690
all of you if they were walking down the

00:00:17,039 --> 00:00:20,760
street you'd have no idea who they were

00:00:18,690 --> 00:00:22,230
they don't wear hoodies they don't sit

00:00:20,760 --> 00:00:24,960
in front of green screens

00:00:22,230 --> 00:00:27,510
that's the media that's and that's why I

00:00:24,960 --> 00:00:28,949
use this picture so that we can have a

00:00:27,510 --> 00:00:30,390
conversation because at the end we're

00:00:28,949 --> 00:00:32,189
gonna have a much deeper conversation

00:00:30,390 --> 00:00:33,950
about what hacking really is and about

00:00:32,189 --> 00:00:36,270
our response to it

00:00:33,950 --> 00:00:38,790
that's just somebody's artist conception

00:00:36,270 --> 00:00:40,350
because it looks dramatic but it is in

00:00:38,790 --> 00:00:43,860
no way representative for what hackers

00:00:40,350 --> 00:00:47,870
are so part two for those of you who

00:00:43,860 --> 00:00:50,039
missed part one shame on you

00:00:47,870 --> 00:00:51,360
these are the things we cover you can go

00:00:50,039 --> 00:00:56,039
back and look at the video and you can

00:00:51,360 --> 00:01:00,000
and get the context behind them now the

00:00:56,039 --> 00:01:03,239
last one generates a lot of controversy

00:01:00,000 --> 00:01:12,150
and let me just go ahead and tell you

00:01:03,239 --> 00:01:14,330
this is not bug bounty hunting this is

00:01:12,150 --> 00:01:17,250
gaming the system

00:01:14,330 --> 00:01:24,560
riding a minivan by putting Filner

00:01:17,250 --> 00:01:24,560
police into your code it is not that bug

00:01:24,890 --> 00:01:30,000
so the art of work Sun Tzu's said that

00:01:28,619 --> 00:01:31,200
all battles are won or lost before

00:01:30,000 --> 00:01:32,729
they're ever fought that's absolutely

00:01:31,200 --> 00:01:33,990
true it's in the planning it's than the

00:01:32,729 --> 00:01:34,590
intentions one of the things that drives

00:01:33,990 --> 00:01:37,890
me nuts

00:01:34,590 --> 00:01:39,840
is every time I hear a CEO and I heard a

00:01:37,890 --> 00:01:41,400
podcast CEO day with the CEO of a

00:01:39,840 --> 00:01:43,770
company called Talk Talk which got

00:01:41,400 --> 00:01:46,549
penetrated multiple times it's in

00:01:43,770 --> 00:01:50,159
England saying you know the bad guys

00:01:46,549 --> 00:01:52,619
only have to get lucky once we have to

00:01:50,159 --> 00:01:54,630
get lucky every time what sounds really

00:01:52,619 --> 00:01:57,210
good sounds really intellectual but it's

00:01:54,630 --> 00:01:59,640
a total garbage it's not about luck if

00:01:57,210 --> 00:02:01,979
you are depending on luck to protect

00:01:59,640 --> 00:02:04,290
your systems you are going to be sadly

00:02:01,979 --> 00:02:05,969
disappointed when you find out you don't

00:02:04,290 --> 00:02:08,310
have any luck in fact any luck you have

00:02:05,969 --> 00:02:10,950
just as bad if anybody's got good luck

00:02:08,310 --> 00:02:11,879
it's them what this is about it's about

00:02:10,950 --> 00:02:13,780
intention

00:02:11,879 --> 00:02:14,920
it's about our planning

00:02:13,780 --> 00:02:16,450
it's about the way we go about

00:02:14,920 --> 00:02:19,150
constructing software in a way that

00:02:16,450 --> 00:02:22,390
makes it more resistant to people

00:02:19,150 --> 00:02:24,430
attacking it so let's start with static

00:02:22,390 --> 00:02:28,050
analysis tools let me say from the

00:02:24,430 --> 00:02:31,080
outset I love core guidelines CPP check

00:02:28,050 --> 00:02:34,600
clang tidy I use them all the time

00:02:31,080 --> 00:02:36,459
probably every day but I tried just as a

00:02:34,600 --> 00:02:38,350
test to go through and see which one's

00:02:36,459 --> 00:02:41,950
the the pieces of code that we saw in

00:02:38,350 --> 00:02:44,230
the first half with a catch and with the

00:02:41,950 --> 00:02:45,430
exception of one which is the very attic

00:02:44,230 --> 00:02:47,530
function which is probably the least

00:02:45,430 --> 00:02:49,570
offensive that I have in there I had

00:02:47,530 --> 00:02:51,760
actually go turn that on that's actually

00:02:49,570 --> 00:02:54,220
a specific rule inclining static

00:02:51,760 --> 00:02:57,430
analyzer so the reason why bees don't

00:02:54,220 --> 00:02:58,989
work very well for securities they're

00:02:57,430 --> 00:03:00,340
not security focused these are the kinds

00:02:58,989 --> 00:03:02,830
of things it's for correctness of your

00:03:00,340 --> 00:03:04,690
code which correctness for your code is

00:03:02,830 --> 00:03:07,769
the foundation of writing vulnerability

00:03:04,690 --> 00:03:10,870
free code but it's not the end of it so

00:03:07,769 --> 00:03:13,380
if you're relying just on these to

00:03:10,870 --> 00:03:16,060
protect you they're not going to work so

00:03:13,380 --> 00:03:20,440
there is a series of static analyzers

00:03:16,060 --> 00:03:22,540
that are specific to security so there

00:03:20,440 --> 00:03:23,650
it's it's a lot like mekt I've just had

00:03:22,540 --> 00:03:24,940
a conversation with a gentleman during

00:03:23,650 --> 00:03:26,769
the break where we were talking about

00:03:24,940 --> 00:03:28,750
the internals of this these are much

00:03:26,769 --> 00:03:32,820
more sophisticated they're they are

00:03:28,750 --> 00:03:35,410
going and looking for again patterns but

00:03:32,820 --> 00:03:37,299
the problem is is that one they can

00:03:35,410 --> 00:03:39,790
produce a lot of false positives because

00:03:37,299 --> 00:03:42,190
these are the bugs that we tend to write

00:03:39,790 --> 00:03:45,130
are not exactly easy for a static

00:03:42,190 --> 00:03:48,010
analysis tool to find so what happens

00:03:45,130 --> 00:03:52,299
when we get a lot of false positives we

00:03:48,010 --> 00:03:53,950
turn it off there are tools out there

00:03:52,299 --> 00:03:57,250
one is called Coverity so these are

00:03:53,950 --> 00:03:59,200
commercial tools Coverity sonar pds

00:03:57,250 --> 00:04:00,549
studio is upstairs so you might want to

00:03:59,200 --> 00:04:03,519
stop by and talk to them about what they

00:04:00,549 --> 00:04:05,140
offer they do not catch everything they

00:04:03,519 --> 00:04:06,850
won't catch and in fact some of a lot of

00:04:05,140 --> 00:04:11,230
the issues that we went through in the

00:04:06,850 --> 00:04:13,660
first half they won't catch cert also

00:04:11,230 --> 00:04:15,910
has a third thread safety analysis piece

00:04:13,660 --> 00:04:19,209
that's part of playing which is very

00:04:15,910 --> 00:04:20,620
good there's also some experimental rows

00:04:19,209 --> 00:04:23,500
checkers is kind of hard to use you have

00:04:20,620 --> 00:04:25,240
to use their VM and it only works with

00:04:23,500 --> 00:04:26,200
their compiler some of these other ones

00:04:25,240 --> 00:04:30,820
are really

00:04:26,200 --> 00:04:32,200
really really experimental so part of

00:04:30,820 --> 00:04:34,660
the problem with standing can't live

00:04:32,200 --> 00:04:36,250
either only good as their rule set so

00:04:34,660 --> 00:04:37,780
they're specific and then they have

00:04:36,250 --> 00:04:39,250
heuristics built on top of it's kind of

00:04:37,780 --> 00:04:40,630
like virus scans fire scanners look for

00:04:39,250 --> 00:04:44,020
patterns and then they've got heuristics

00:04:40,630 --> 00:04:47,800
but in this case they're not going to

00:04:44,020 --> 00:04:50,500
catch everything because a lot of that

00:04:47,800 --> 00:04:52,750
behavior that that makes our code

00:04:50,500 --> 00:04:54,340
insecure is beyond their ability to so

00:04:52,750 --> 00:04:56,290
for example environmental settings

00:04:54,340 --> 00:04:59,940
third-party libraries things that I

00:04:56,290 --> 00:05:03,940
really can't see into so these work for

00:04:59,940 --> 00:05:06,640
our using string copy that's a pretty

00:05:03,940 --> 00:05:09,730
easy one for a nail or a static analyzer

00:05:06,640 --> 00:05:11,740
yet so now we have and somebody brought

00:05:09,730 --> 00:05:12,910
up dynamic analysis tools so there are

00:05:11,740 --> 00:05:17,020
some very good ones out there what these

00:05:12,910 --> 00:05:19,480
do is these find vulnerabilities in

00:05:17,020 --> 00:05:23,050
running code so what you're looking for

00:05:19,480 --> 00:05:25,330
is you're you're going to run these when

00:05:23,050 --> 00:05:28,180
your code is fairly well along it's

00:05:25,330 --> 00:05:30,910
going to go out it's going to find out

00:05:28,180 --> 00:05:32,380
whether you are overriding memory it's

00:05:30,910 --> 00:05:34,090
gonna find out whether or not you hit

00:05:32,380 --> 00:05:35,680
undefined behavior whether or not you

00:05:34,090 --> 00:05:37,840
know there's there's threading models

00:05:35,680 --> 00:05:39,550
built into it so these are the kinds of

00:05:37,840 --> 00:05:41,680
things that you need to have running

00:05:39,550 --> 00:05:45,490
code for them to work on and they're

00:05:41,680 --> 00:05:46,990
quite good so the place though where

00:05:45,490 --> 00:05:49,030
they really shine at least the places

00:05:46,990 --> 00:05:50,260
where I've seen them really shine is in

00:05:49,030 --> 00:05:51,400
your performance choice of scalability

00:05:50,260 --> 00:05:52,450
so you're gonna get to a point where

00:05:51,400 --> 00:05:55,870
you've got a pretty good code base

00:05:52,450 --> 00:05:58,930
you're now doing some deep testing you

00:05:55,870 --> 00:06:01,150
are pressuring the system up to it to to

00:05:58,930 --> 00:06:02,320
its limits to see how it behaves to see

00:06:01,150 --> 00:06:03,910
whether you can break it and that's

00:06:02,320 --> 00:06:07,390
where you're gonna find things like

00:06:03,910 --> 00:06:09,250
threading issues we can all get past in

00:06:07,390 --> 00:06:10,750
fact we will deal with with some of

00:06:09,250 --> 00:06:12,430
these later you can get past threading

00:06:10,750 --> 00:06:13,870
issues just in your functionality test

00:06:12,430 --> 00:06:15,130
or even your regression testing but it's

00:06:13,870 --> 00:06:18,010
only when you pressure that system up

00:06:15,130 --> 00:06:19,650
that you find it so fuzz testing

00:06:18,010 --> 00:06:23,350
somebody else asked about fuzz testing

00:06:19,650 --> 00:06:25,240
fuzz testing is I haven't we talked

00:06:23,350 --> 00:06:27,820
about interfaces so I have an interface

00:06:25,240 --> 00:06:29,230
and I'm taking a certain amount of data

00:06:27,820 --> 00:06:33,580
into that during the face certain types

00:06:29,230 --> 00:06:35,910
I want to then go and see what happens

00:06:33,580 --> 00:06:39,520
when I put nonsensical data into it and

00:06:35,910 --> 00:06:41,020
then I want to in go and put

00:06:39,520 --> 00:06:43,090
different type of nonsensical data so

00:06:41,020 --> 00:06:45,310
I'm constantly rotating that that data

00:06:43,090 --> 00:06:47,139
changing the data to see if I can trip

00:06:45,310 --> 00:06:50,259
over things like buffer overflows things

00:06:47,139 --> 00:06:53,080
where you have just simply taken a value

00:06:50,259 --> 00:06:54,370
slammed it right into an enumeration and

00:06:53,080 --> 00:06:58,800
then you wind up having a failure

00:06:54,370 --> 00:07:01,599
so the the best ones that I found our

00:06:58,800 --> 00:07:04,330
USS fuzz with buzzer and American fuzzy

00:07:01,599 --> 00:07:08,099
a lot now one of these found the

00:07:04,330 --> 00:07:11,349
heartbleed our vulnerability and I I

00:07:08,099 --> 00:07:13,810
think I watched Chandler do this one

00:07:11,349 --> 00:07:16,289
time on a video where he actually used

00:07:13,810 --> 00:07:17,889
fuzz testing to expose the heartbleed

00:07:16,289 --> 00:07:21,130
evolving so the heartbleed vulnerability

00:07:17,889 --> 00:07:23,349
was just in the it was a men copy over

00:07:21,130 --> 00:07:29,620
floats an unrestrained and copy inside

00:07:23,349 --> 00:07:31,090
the TLS heartbeat inside of OpenSSL most

00:07:29,620 --> 00:07:34,180
of these though if you want to use them

00:07:31,090 --> 00:07:37,360
more party to be open source so it's a

00:07:34,180 --> 00:07:40,030
you know the the best ones want to help

00:07:37,360 --> 00:07:41,440
the open source community so I don't

00:07:40,030 --> 00:07:43,240
have price ranges on things like that

00:07:41,440 --> 00:07:44,830
but they are very good one of the

00:07:43,240 --> 00:07:48,130
problems with fuzz testing is it can be

00:07:44,830 --> 00:07:50,229
rather a challenge to deploy it it's not

00:07:48,130 --> 00:07:52,050
simply a matter of okay here's my IPC

00:07:50,229 --> 00:07:54,280
interface please go and do your work

00:07:52,050 --> 00:07:55,509
what you have to do is do it almost it's

00:07:54,280 --> 00:07:57,159
a class level if you want to see

00:07:55,509 --> 00:07:58,779
somebody who did a very good

00:07:57,159 --> 00:08:03,610
presentation go back to c-plus us now

00:07:58,779 --> 00:08:08,020
early this year and there is a Marshall

00:08:03,610 --> 00:08:10,300
did a whole series on how fuzz testing

00:08:08,020 --> 00:08:13,270
work and you'll see the complexity it's

00:08:10,300 --> 00:08:14,979
almost like TDD where you don't really

00:08:13,270 --> 00:08:17,139
just get to give it an interface and it

00:08:14,979 --> 00:08:18,880
figures it out it has to you have to

00:08:17,139 --> 00:08:20,289
program it to do this one of the things

00:08:18,880 --> 00:08:22,509
that's nice about these they use a lot

00:08:20,289 --> 00:08:24,009
of genetic algorithms and heuristics to

00:08:22,509 --> 00:08:26,020
be able to learn as they go on your

00:08:24,009 --> 00:08:27,279
interface so it's very good for going

00:08:26,020 --> 00:08:29,650
back and doing this over and over again

00:08:27,279 --> 00:08:32,469
as you've got code that is getting more

00:08:29,650 --> 00:08:33,789
and more mature so this is where the

00:08:32,469 --> 00:08:37,870
situational awareness from the other

00:08:33,789 --> 00:08:39,399
from this the last talk comes in if the

00:08:37,870 --> 00:08:41,020
one of the parts of the situation learns

00:08:39,399 --> 00:08:42,789
is I'm not testing for bounds checking

00:08:41,020 --> 00:08:44,800
I'm not testing to see if I fit within a

00:08:42,789 --> 00:08:46,720
range and this is a place a good place

00:08:44,800 --> 00:08:48,790
to go and test for those kinds of

00:08:46,720 --> 00:08:52,510
situations in an automated future in

00:08:48,790 --> 00:08:54,550
fashion so penetration testing

00:08:52,510 --> 00:08:57,760
a lot of companies have penetration

00:08:54,550 --> 00:08:59,500
testers come in what this really is is

00:08:57,760 --> 00:09:02,500
this is where you're actively looking

00:08:59,500 --> 00:09:04,570
for vulnerabilities if you go and you

00:09:02,500 --> 00:09:06,160
watch a penetration tester work they

00:09:04,570 --> 00:09:07,930
know the patterns and they'll just walk

00:09:06,160 --> 00:09:09,940
those patterns they're gonna look at

00:09:07,930 --> 00:09:11,530
security they're gonna look at can I

00:09:09,940 --> 00:09:13,060
send stuff to you and you're gonna

00:09:11,530 --> 00:09:14,620
process it when you really shouldn't

00:09:13,060 --> 00:09:16,540
have you got everything patch so

00:09:14,620 --> 00:09:17,560
penetration testing he's a way of

00:09:16,540 --> 00:09:19,960
looking at your system from the outside

00:09:17,560 --> 00:09:21,940
and seeing can I get into that system

00:09:19,960 --> 00:09:23,410
the problem with penetration system is

00:09:21,940 --> 00:09:25,000
testing is that it requires a

00:09:23,410 --> 00:09:26,650
significant level of security experience

00:09:25,000 --> 00:09:28,360
you have to know what to look for you

00:09:26,650 --> 00:09:29,860
need to know the patterns because those

00:09:28,360 --> 00:09:32,590
are the first things you go after and

00:09:29,860 --> 00:09:34,480
some of the some of the tools we use are

00:09:32,590 --> 00:09:36,130
the the Metasploit framework which is a

00:09:34,480 --> 00:09:39,310
very good it's an open-source framework

00:09:36,130 --> 00:09:40,600
which we go out and they every time

00:09:39,310 --> 00:09:42,340
there's a new exploit great let's go

00:09:40,600 --> 00:09:43,570
plug it into the system so we can go

00:09:42,340 --> 00:09:46,510
test for that in our environment and

00:09:43,570 --> 00:09:47,800
then nmap is also very good because one

00:09:46,510 --> 00:09:49,570
of the things that I want to do when I

00:09:47,800 --> 00:09:50,950
say if you set up a network one of the

00:09:49,570 --> 00:09:52,420
first things they'll do is turn off ping

00:09:50,950 --> 00:09:53,530
from the outside and the reason why is

00:09:52,420 --> 00:09:56,770
you don't want people mapping your

00:09:53,530 --> 00:09:59,050
network from from outside your firewall

00:09:56,770 --> 00:10:00,700
nmap allows you to go in and look for

00:09:59,050 --> 00:10:02,170
attack surfaces look for things that

00:10:00,700 --> 00:10:05,350
they go after so these are very good

00:10:02,170 --> 00:10:10,330
penetration testing tools so a couple of

00:10:05,350 --> 00:10:11,770
other options if you don't want to don't

00:10:10,330 --> 00:10:13,090
want to get into penetration testing

00:10:11,770 --> 00:10:14,170
yourself one is you can go to blackhat

00:10:13,090 --> 00:10:15,820
and you can find a company to do it

00:10:14,170 --> 00:10:19,440
which is what I which is a pretty good

00:10:15,820 --> 00:10:22,060
suggestion DEFCON and not quite so much

00:10:19,440 --> 00:10:23,530
the other thing is let's you let the

00:10:22,060 --> 00:10:26,890
hackers help and I water

00:10:23,530 --> 00:10:28,840
I want to qualify this in that what I

00:10:26,890 --> 00:10:31,750
what I'm suggesting that you do is you

00:10:28,840 --> 00:10:34,330
set up your system so that it can be

00:10:31,750 --> 00:10:37,080
attacked so when you watch people attack

00:10:34,330 --> 00:10:40,000
your system when you have to go and do a

00:10:37,080 --> 00:10:41,620
response investigation to find out so

00:10:40,000 --> 00:10:43,570
you haven't you do you do your incident

00:10:41,620 --> 00:10:46,120
response you'll find out how they got in

00:10:43,570 --> 00:10:48,760
so here's the thing is don't put it

00:10:46,120 --> 00:10:51,130
inside your firewalls or on any network

00:10:48,760 --> 00:10:52,570
segment that you do don't that that

00:10:51,130 --> 00:10:54,130
would be bad because if they get in

00:10:52,570 --> 00:10:57,700
there then they're near in your network

00:10:54,130 --> 00:10:59,020
don't use real data that's happened

00:10:57,700 --> 00:11:00,340
before where people went and we call

00:10:59,020 --> 00:11:01,600
them honey pots they set up the honeypot

00:11:00,340 --> 00:11:03,100
except the problem was is they used

00:11:01,600 --> 00:11:03,950
actual data and then somebody breached

00:11:03,100 --> 00:11:07,790
it

00:11:03,950 --> 00:11:10,190
imagine that and then they had the data

00:11:07,790 --> 00:11:11,839
so what you're looking for here is I

00:11:10,190 --> 00:11:13,820
want to go take my system put it in a

00:11:11,839 --> 00:11:15,410
vulnerable state outside of my firewalls

00:11:13,820 --> 00:11:17,060
I want to let people hack it and you

00:11:15,410 --> 00:11:18,560
will be stunned at how quickly people

00:11:17,060 --> 00:11:20,899
will attack your system it is

00:11:18,560 --> 00:11:23,810
breathtaking the speed that people will

00:11:20,899 --> 00:11:25,610
go after it and the really creative ways

00:11:23,810 --> 00:11:27,079
they'll figure out ways in and where

00:11:25,610 --> 00:11:28,430
they're coming from you know we all tend

00:11:27,079 --> 00:11:29,990
to think that it's somehow foreign

00:11:28,430 --> 00:11:31,370
nationals that are wanting to come after

00:11:29,990 --> 00:11:33,199
systems it's not I mean you're gonna

00:11:31,370 --> 00:11:35,600
find lots of us IP addresses you're

00:11:33,199 --> 00:11:38,420
coming from an American hackers so this

00:11:35,600 --> 00:11:40,070
works penetration is for something the

00:11:38,420 --> 00:11:42,170
tendency is something you do sort of

00:11:40,070 --> 00:11:45,079
late in the cycle when you have a full

00:11:42,170 --> 00:11:47,060
system so the best practice here all

00:11:45,079 --> 00:11:49,339
testing is asymmetrical there is no

00:11:47,060 --> 00:11:51,709
silver bullet there's not one single

00:11:49,339 --> 00:11:53,630
thing that if you do this thing I can

00:11:51,709 --> 00:11:55,399
say okay we're good we've taken care of

00:11:53,630 --> 00:11:56,389
it takes all of these things and some of

00:11:55,399 --> 00:11:59,240
the things that we're gonna be talking

00:11:56,389 --> 00:12:02,449
about here in just a minute so is

00:11:59,240 --> 00:12:04,790
anybody ever done threat hunting or we

00:12:02,449 --> 00:12:08,120
call it threat modeling to anybody so a

00:12:04,790 --> 00:12:11,899
couple of people okay so the answer is

00:12:08,120 --> 00:12:13,730
you all do it every one of us we do

00:12:11,899 --> 00:12:15,350
threat modeling every time more threat

00:12:13,730 --> 00:12:16,550
hunting every time we drive down the

00:12:15,350 --> 00:12:18,680
road there's a car approaching an

00:12:16,550 --> 00:12:20,480
intersection you're you're looking at

00:12:18,680 --> 00:12:21,740
that car is that a threat is that person

00:12:20,480 --> 00:12:25,480
going to come through the intersection

00:12:21,740 --> 00:12:28,339
and crash into me if you've ever gone to

00:12:25,480 --> 00:12:30,649
a city you've never been in a large

00:12:28,339 --> 00:12:32,839
metro like New York it's after dark

00:12:30,649 --> 00:12:34,640
you're walking around downtown you are

00:12:32,839 --> 00:12:36,890
then somebody's coming towards you you

00:12:34,640 --> 00:12:39,500
are threat modeling that person is that

00:12:36,890 --> 00:12:41,089
a good guy or bad guy so we do this

00:12:39,500 --> 00:12:42,949
instinctively we just don't think about

00:12:41,089 --> 00:12:44,990
it and things like darkness isolation

00:12:42,949 --> 00:12:46,430
and security vulnerability anytime

00:12:44,990 --> 00:12:48,319
you're operating in a you know a

00:12:46,430 --> 00:12:50,779
situation where it's unknown and you

00:12:48,319 --> 00:12:54,709
have these kinds of things going on you

00:12:50,779 --> 00:12:56,600
are threat model so the reason why we do

00:12:54,709 --> 00:12:58,430
threat hunting is because it's no longer

00:12:56,600 --> 00:12:59,120
enough to just let the automated tools

00:12:58,430 --> 00:13:00,949
take care of it

00:12:59,120 --> 00:13:02,690
and we'll go through a little bit of an

00:13:00,949 --> 00:13:05,209
exercise here and I'll show you why it's

00:13:02,690 --> 00:13:06,560
no longer the Builder but we need to

00:13:05,209 --> 00:13:09,769
understand the nature of those

00:13:06,560 --> 00:13:12,980
particular threats so in order to

00:13:09,769 --> 00:13:14,889
understand this I want to talk about

00:13:12,980 --> 00:13:16,149
intrusion kill change for a minute

00:13:14,889 --> 00:13:21,549
so these come from the military the

00:13:16,149 --> 00:13:24,609
military has basically a way they go

00:13:21,549 --> 00:13:26,199
about prosecuting a war you find fix and

00:13:24,609 --> 00:13:27,459
follow your enemy so I'm gonna find him

00:13:26,199 --> 00:13:28,899
I'm gonna keep an eye on them I'm gonna

00:13:27,459 --> 00:13:30,790
follow them where they go try and keep

00:13:28,899 --> 00:13:32,169
them in a defined position then I'm

00:13:30,790 --> 00:13:33,519
gonna come up with how am I going to

00:13:32,169 --> 00:13:36,489
attack my enemy and then I'm going to

00:13:33,519 --> 00:13:39,459
actually do the attack go back assess it

00:13:36,489 --> 00:13:41,889
and lather rinse repeat that if you were

00:13:39,459 --> 00:13:43,629
to take the prosecution of a military

00:13:41,889 --> 00:13:44,980
campaign that's basically what those

00:13:43,629 --> 00:13:51,790
steps come down to and the same thing

00:13:44,980 --> 00:13:55,660
happens with with hackers so you have a

00:13:51,790 --> 00:13:56,649
a threat actor the first thing they're

00:13:55,660 --> 00:13:57,759
going to do is they're going to do

00:13:56,649 --> 00:13:59,859
reconnaissance now that could be

00:13:57,759 --> 00:14:02,319
reconnaissance where I'm probing your

00:13:59,859 --> 00:14:03,999
external interfaces I'm looking at your

00:14:02,319 --> 00:14:05,559
firewalls I'm trying to see what the

00:14:03,999 --> 00:14:07,419
reflexes I've been but I will tell you

00:14:05,559 --> 00:14:10,119
right now that's actually really

00:14:07,419 --> 00:14:13,269
old-school because the problem is is you

00:14:10,119 --> 00:14:14,679
will get alerted to that there is

00:14:13,269 --> 00:14:17,709
actually a better way to do this and

00:14:14,679 --> 00:14:20,649
that is doing reconnaissance on all of

00:14:17,709 --> 00:14:22,179
you so let's say I want to go and I

00:14:20,649 --> 00:14:24,339
penetrate and these these group of

00:14:22,179 --> 00:14:25,720
people here are people who work for the

00:14:24,339 --> 00:14:28,929
same company and I want to penetrate

00:14:25,720 --> 00:14:30,160
that company one of the easiest ways for

00:14:28,929 --> 00:14:31,509
me to do it is get somebody click on a

00:14:30,160 --> 00:14:32,799
link but in order to get them to click

00:14:31,509 --> 00:14:35,709
on a link I need to send them a link in

00:14:32,799 --> 00:14:39,279
a way that they'll click on so I go out

00:14:35,709 --> 00:14:42,040
and I go to LinkedIn and I find that you

00:14:39,279 --> 00:14:43,209
all work for the same company so there's

00:14:42,040 --> 00:14:45,100
a couple things I'm looking for what are

00:14:43,209 --> 00:14:47,230
the relationships I don't want one

00:14:45,100 --> 00:14:48,699
degree of separation I don't want the

00:14:47,230 --> 00:14:49,959
guy I don't want to send an email from

00:14:48,699 --> 00:14:52,029
the person you're sitting next to

00:14:49,959 --> 00:14:53,259
because I know the person I sit next to

00:14:52,029 --> 00:14:56,079
and I know how they sign off their

00:14:53,259 --> 00:14:58,959
emails but the person down in another

00:14:56,079 --> 00:15:00,309
group which is a couple of degrees of

00:14:58,959 --> 00:15:02,439
separation away I don't really know him

00:15:00,309 --> 00:15:04,089
I may know of them but I don't know how

00:15:02,439 --> 00:15:06,639
they sign off their emails so when I

00:15:04,089 --> 00:15:07,959
sign when I want to sign that email from

00:15:06,639 --> 00:15:11,069
them I don't want you to know that it's

00:15:07,959 --> 00:15:15,249
not them so if your name is David and

00:15:11,069 --> 00:15:17,679
you always sign your name David whatever

00:15:15,249 --> 00:15:20,829
when somebody you don't know that makes

00:15:17,679 --> 00:15:23,889
sense but when it's your friends maybe

00:15:20,829 --> 00:15:26,439
Dave so if one of your colleagues that

00:15:23,889 --> 00:15:28,750
you work really closely with winds up

00:15:26,439 --> 00:15:32,139
getting an email from David whatever

00:15:28,750 --> 00:15:35,589
go on why is he giving me his full name

00:15:32,139 --> 00:15:36,850
so this is the thing where when you do

00:15:35,589 --> 00:15:38,230
reconnaissance you have to understand

00:15:36,850 --> 00:15:40,290
the people and we'll see a case study

00:15:38,230 --> 00:15:43,689
where this happened so I want to know

00:15:40,290 --> 00:15:44,649
who you work with who you work with it's

00:15:43,689 --> 00:15:46,029
sort of a couple of degrees of

00:15:44,649 --> 00:15:48,160
separation I want to know your email

00:15:46,029 --> 00:15:49,540
addresses a lot of companies have email

00:15:48,160 --> 00:15:52,870
addresses that follow some standard

00:15:49,540 --> 00:15:54,339
first initial first name last name so if

00:15:52,870 --> 00:15:56,769
I know three of those email addresses I

00:15:54,339 --> 00:16:00,160
can figure the rest out and then if I

00:15:56,769 --> 00:16:01,509
want to test that I just run it send an

00:16:00,160 --> 00:16:03,879
email to their server and if it's wrong

00:16:01,509 --> 00:16:06,970
it'll bounce back in error so now I can

00:16:03,879 --> 00:16:08,560
reconnaissance the people but the other

00:16:06,970 --> 00:16:13,329
thing I want to look for is I want to

00:16:08,560 --> 00:16:17,709
look for keywords if you're using a

00:16:13,329 --> 00:16:20,019
Windows ADC and you're using exchange

00:16:17,709 --> 00:16:21,310
and you're using Outlook I'd like to

00:16:20,019 --> 00:16:22,720
know that because there's entire classes

00:16:21,310 --> 00:16:24,730
of vulnerabilities I don't want to use

00:16:22,720 --> 00:16:27,430
against you I know that exactly the ones

00:16:24,730 --> 00:16:29,110
and so in your when you do for example

00:16:27,430 --> 00:16:31,269
in the profile that you put on to

00:16:29,110 --> 00:16:33,069
LinkedIn he'll give me some keywords

00:16:31,269 --> 00:16:34,750
he'll give me some keywords she'll give

00:16:33,069 --> 00:16:36,850
me some keywords and I put them all

00:16:34,750 --> 00:16:39,220
together so if I know you're using

00:16:36,850 --> 00:16:41,079
Apache Apache struts and I see somebody

00:16:39,220 --> 00:16:43,149
mentioning Linux a turn it's probably

00:16:41,079 --> 00:16:44,709
that your web server is old the next web

00:16:43,149 --> 00:16:47,680
server why because ninety-three percent

00:16:44,709 --> 00:16:51,490
of all the Apache installs are on Linux

00:16:47,680 --> 00:16:53,649
web servers so now I can focus on the

00:16:51,490 --> 00:16:54,819
kinds of exploits that I'm going to use

00:16:53,649 --> 00:16:55,689
it and that's the second step

00:16:54,819 --> 00:16:58,990
weaponization

00:16:55,689 --> 00:17:00,519
what's the zero what's the zero day

00:16:58,990 --> 00:17:03,220
vulnerability that I can use against

00:17:00,519 --> 00:17:04,839
your system by just knowing something

00:17:03,220 --> 00:17:06,309
about it so when you go look at your

00:17:04,839 --> 00:17:08,230
LinkedIn profiles and you look at the

00:17:06,309 --> 00:17:10,270
LinkedIn profiles of your colleagues how

00:17:08,230 --> 00:17:12,490
much data are you giving me as an

00:17:10,270 --> 00:17:14,650
outsider wanting to attack you so that

00:17:12,490 --> 00:17:16,780
it not only helps me do a better job of

00:17:14,650 --> 00:17:20,350
reconnaissance but it also allows me to

00:17:16,780 --> 00:17:23,589
pick the right weaponization delivery

00:17:20,350 --> 00:17:25,510
delivery can be anything from I send you

00:17:23,589 --> 00:17:29,280
a USB stick hey here's this great USB

00:17:25,510 --> 00:17:31,360
stick we're sending out free trials

00:17:29,280 --> 00:17:33,640
Vladimir Putin did that one time

00:17:31,360 --> 00:17:35,980
so they had a g20 summit and they sent

00:17:33,640 --> 00:17:37,630
he sent swag bags with all you think

00:17:35,980 --> 00:17:38,919
we're don't want to get swag bags and he

00:17:37,630 --> 00:17:40,809
sent swag bags with all the other

00:17:38,919 --> 00:17:42,250
leaders except there was a USB stick in

00:17:40,809 --> 00:17:43,540
there and the USB stick was loaded

00:17:42,250 --> 00:17:47,520
with malware it was wonderful he was

00:17:43,540 --> 00:17:49,810
really brazen I thought it was awful but

00:17:47,520 --> 00:17:51,010
that's what happens they've run study

00:17:49,810 --> 00:17:53,230
after study to go on a college campus

00:17:51,010 --> 00:17:54,880
they drop a bunch of USB sticks somebody

00:17:53,230 --> 00:17:57,130
picks it up what is the first thing they

00:17:54,880 --> 00:17:58,210
do you know plug it in the piece why I'm

00:17:57,130 --> 00:17:59,550
just trying to figure out who it belong

00:17:58,210 --> 00:18:01,900
to

00:17:59,550 --> 00:18:05,440
okay it doesn't matter you just infected

00:18:01,900 --> 00:18:07,810
your computer so that can be web it can

00:18:05,440 --> 00:18:09,850
be you know I give you some great deal I

00:18:07,810 --> 00:18:11,740
give you an email anything that allows

00:18:09,850 --> 00:18:13,630
me to get you to click on a link you

00:18:11,740 --> 00:18:15,550
shouldn't or put something into your

00:18:13,630 --> 00:18:18,310
system so exploitation that's when the

00:18:15,550 --> 00:18:23,110
actual vulnerability goes into your

00:18:18,310 --> 00:18:24,910
system installation is where now that

00:18:23,110 --> 00:18:26,410
I'm on that box I want to move laterally

00:18:24,910 --> 00:18:27,820
within the system so I'm going to begin

00:18:26,410 --> 00:18:29,860
installing a bunch of other software

00:18:27,820 --> 00:18:31,540
that you don't know about that you don't

00:18:29,860 --> 00:18:33,550
want on your system then command and

00:18:31,540 --> 00:18:35,350
control that's the point at which I now

00:18:33,550 --> 00:18:39,010
have full control of your system so I've

00:18:35,350 --> 00:18:40,660
got some sort of conduit back to my my

00:18:39,010 --> 00:18:43,000
command and control server now I'm in

00:18:40,660 --> 00:18:45,250
full control of your your your systems

00:18:43,000 --> 00:18:48,010
and if you get to step seven which is

00:18:45,250 --> 00:18:49,690
action objectives you're owned there in

00:18:48,010 --> 00:18:52,120
the system you're done they're going to

00:18:49,690 --> 00:18:53,950
be running the things against your

00:18:52,120 --> 00:18:55,690
system that they want to and there's

00:18:53,950 --> 00:18:57,670
very little Jurgen you probably will not

00:18:55,690 --> 00:19:00,970
even know that they're there so project

00:18:57,670 --> 00:19:03,670
Aurora that was in December in January

00:19:00,970 --> 00:19:05,860
of 2009 in 2010 so they picked that time

00:19:03,670 --> 00:19:07,930
because there's minimal staffs to defend

00:19:05,860 --> 00:19:10,660
the networks they ran exactly the

00:19:07,930 --> 00:19:13,630
exploit I outlined they went they looked

00:19:10,660 --> 00:19:15,130
at the staff they crafted an email that

00:19:13,630 --> 00:19:17,170
even if you're an InfoSec would have

00:19:15,130 --> 00:19:18,640
looked perfectly legitimate they sent

00:19:17,170 --> 00:19:20,500
that email out somebody clicks on the

00:19:18,640 --> 00:19:21,940
link the first thing that happened is it

00:19:20,500 --> 00:19:23,230
had a zero day exploit for internet

00:19:21,940 --> 00:19:25,270
explorer got outside the sandbox

00:19:23,230 --> 00:19:27,100
installed itself into their environment

00:19:25,270 --> 00:19:28,360
then it opened up an ssl connection back

00:19:27,100 --> 00:19:30,100
to a command and control server

00:19:28,360 --> 00:19:31,900
downloaded another dozen pieces of

00:19:30,100 --> 00:19:33,940
malware install that and then began

00:19:31,900 --> 00:19:34,930
moving laterally within their systems

00:19:33,940 --> 00:19:37,720
and what they were going for

00:19:34,930 --> 00:19:39,700
specifically Google was a little more

00:19:37,720 --> 00:19:41,560
than just source code but they were

00:19:39,700 --> 00:19:43,720
primarily interested in source code

00:19:41,560 --> 00:19:45,250
which was if I can get google source

00:19:43,720 --> 00:19:47,470
code if I can get it the source code for

00:19:45,250 --> 00:19:49,990
Adobe Flash it would reader any of these

00:19:47,470 --> 00:19:51,910
products now I can have got the source

00:19:49,990 --> 00:19:53,650
code and I can go find zero to exploits

00:19:51,910 --> 00:19:54,590
in the source code which is what I

00:19:53,650 --> 00:19:55,999
prefer

00:19:54,590 --> 00:19:58,519
and that's exactly what happened we

00:19:55,999 --> 00:20:01,340
found a lot of zero day exploits

00:19:58,519 --> 00:20:02,870
cropping up right after that what's

00:20:01,340 --> 00:20:04,700
interesting and this is why we think

00:20:02,870 --> 00:20:06,259
it's a nation state an attribution is

00:20:04,700 --> 00:20:08,629
where we go and we attribute it to a

00:20:06,259 --> 00:20:11,749
company or a country or even a company

00:20:08,629 --> 00:20:13,340
we want to is they burned a lot of zero

00:20:11,749 --> 00:20:15,110
day exploits doing this this was a

00:20:13,340 --> 00:20:18,980
massive attack it's the kind of attack

00:20:15,110 --> 00:20:20,570
you typically see in the military which

00:20:18,980 --> 00:20:22,399
is why this was so stunning as these

00:20:20,570 --> 00:20:23,690
were all civilian companies they were

00:20:22,399 --> 00:20:28,600
getting hit along with defense

00:20:23,690 --> 00:20:32,779
contractors and we had not seen that so

00:20:28,600 --> 00:20:35,149
threat modeling is a response to kill

00:20:32,779 --> 00:20:40,190
chains the first we have to talk about

00:20:35,149 --> 00:20:42,740
is the scope if you make the scope too

00:20:40,190 --> 00:20:44,240
wide you're gonna get buried in

00:20:42,740 --> 00:20:46,220
information if you make it too narrow

00:20:44,240 --> 00:20:47,960
you're in amiss things so one of the

00:20:46,220 --> 00:20:49,879
things I suggested people as you do it

00:20:47,960 --> 00:20:53,179
as an iterative iterative process you

00:20:49,879 --> 00:20:55,159
start small and work your way out or go

00:20:53,179 --> 00:20:57,289
deeper into your systems because what

00:20:55,159 --> 00:20:59,299
you want to do is you want to catch the

00:20:57,289 --> 00:21:00,889
the easy stuff first and then you want

00:20:59,299 --> 00:21:02,779
to begin moving out and catch the harder

00:21:00,889 --> 00:21:07,580
stuff that hackers will probably find

00:21:02,779 --> 00:21:09,679
for you model creation what we care

00:21:07,580 --> 00:21:10,879
about is where data moves and where it

00:21:09,679 --> 00:21:11,929
pulls you'd be surprised the number of

00:21:10,879 --> 00:21:13,519
times when people go whew threat

00:21:11,929 --> 00:21:14,840
modeling sessions and they find out it's

00:21:13,519 --> 00:21:18,679
like I didn't realize we were keeping

00:21:14,840 --> 00:21:22,519
that data you want to know where the

00:21:18,679 --> 00:21:24,379
data starts where it's consumed it

00:21:22,519 --> 00:21:27,259
should not just appear out of the ether

00:21:24,379 --> 00:21:28,610
you want to have you want to know where

00:21:27,259 --> 00:21:31,279
all that data goes and you're gonna

00:21:28,610 --> 00:21:33,049
focus on the data flow then threat

00:21:31,279 --> 00:21:34,279
identification is we're going to talk

00:21:33,049 --> 00:21:36,200
about trust boundaries here in a minute

00:21:34,279 --> 00:21:37,730
but what you want to do is you want to

00:21:36,200 --> 00:21:39,830
know where the threats and there's

00:21:37,730 --> 00:21:41,529
there's a several good models will talk

00:21:39,830 --> 00:21:44,149
about stride here in just a minute of

00:21:41,529 --> 00:21:45,919
and go through a short exercise with

00:21:44,149 --> 00:21:47,240
that but what you want to know is you

00:21:45,919 --> 00:21:49,249
want to know where we're holding data

00:21:47,240 --> 00:21:51,289
you don't need who's got access to it so

00:21:49,249 --> 00:21:52,940
this is information in your threat

00:21:51,289 --> 00:21:54,710
modeling that you want to go and think

00:21:52,940 --> 00:21:57,259
about and that's probably the strength

00:21:54,710 --> 00:21:58,970
of threat modeling is when I have two

00:21:57,259 --> 00:22:00,320
threat model my system you'd be

00:21:58,970 --> 00:22:02,119
surprised the number of people where

00:22:00,320 --> 00:22:04,519
you've got very large groups of

00:22:02,119 --> 00:22:06,440
developers these this group work on this

00:22:04,519 --> 00:22:07,680
area that group to work on they're now

00:22:06,440 --> 00:22:09,900
that they're all coming together

00:22:07,680 --> 00:22:10,950
you're having these moments oh I didn't

00:22:09,900 --> 00:22:12,270
realize the system worked that way

00:22:10,950 --> 00:22:15,510
because that's not a part of the system

00:22:12,270 --> 00:22:18,180
or they are nuisance II threat fight

00:22:15,510 --> 00:22:21,660
classification how easy is to exploit

00:22:18,180 --> 00:22:24,870
how much damage can I do what can I get

00:22:21,660 --> 00:22:28,050
to from this and the mitigation planning

00:22:24,870 --> 00:22:29,880
is it already mitigated in some other

00:22:28,050 --> 00:22:32,340
way is there an inexpensive way to do

00:22:29,880 --> 00:22:34,170
this so you're asking what basically

00:22:32,340 --> 00:22:35,610
you're prioritizing at that point does

00:22:34,170 --> 00:22:39,240
this go into our backlog if you're an

00:22:35,610 --> 00:22:41,040
agile or does it go into for the next PI

00:22:39,240 --> 00:22:43,440
or is this something that becomes our

00:22:41,040 --> 00:22:45,450
technical debt if it's low enough and

00:22:43,440 --> 00:22:46,830
then finally validation you want to go

00:22:45,450 --> 00:22:48,780
through and follow up and make sure that

00:22:46,830 --> 00:22:52,050
you actually fix the problem and that

00:22:48,780 --> 00:22:55,800
usually with some sort of testing so

00:22:52,050 --> 00:22:57,180
stride is just an acronym these are not

00:22:55,800 --> 00:22:59,820
all the things but it's probably the

00:22:57,180 --> 00:23:01,830
best place to start so spoofing which is

00:22:59,820 --> 00:23:04,590
can I masquerade as another person can I

00:23:01,830 --> 00:23:06,470
get you to give me data because you

00:23:04,590 --> 00:23:09,090
think I'm one person when I'm not

00:23:06,470 --> 00:23:11,820
tampering is just sabotage pretty

00:23:09,090 --> 00:23:13,320
straightforward repudiation is can I act

00:23:11,820 --> 00:23:15,150
without evidence of action that's where

00:23:13,320 --> 00:23:18,900
you're logging comes in can I go and do

00:23:15,150 --> 00:23:20,880
something on your system that you will

00:23:18,900 --> 00:23:22,110
then not know is going to happen and the

00:23:20,880 --> 00:23:25,110
exploit that we're gonna run here in a

00:23:22,110 --> 00:23:26,430
little bit that's exactly the problem is

00:23:25,110 --> 00:23:28,530
that you can run that exploit and you're

00:23:26,430 --> 00:23:30,240
not gonna see it information of

00:23:28,530 --> 00:23:32,340
disclosure is just the exfiltration of

00:23:30,240 --> 00:23:34,350
the data can I get to your data and get

00:23:32,340 --> 00:23:36,120
it off the box denial service can I

00:23:34,350 --> 00:23:37,620
render it inoperable in elevation

00:23:36,120 --> 00:23:40,010
privilege is just gaining elevated

00:23:37,620 --> 00:23:40,010
access

00:23:41,900 --> 00:23:47,790
so trust boundaries trust boundaries are

00:23:45,780 --> 00:23:49,920
how we define remember at the very

00:23:47,790 --> 00:23:51,120
beginning I said okay I have a trust

00:23:49,920 --> 00:23:53,040
boundaries my perimeter security

00:23:51,120 --> 00:23:55,740
everything outside is untrusted

00:23:53,040 --> 00:23:57,780
everything inside is trusted and that's

00:23:55,740 --> 00:24:01,230
how we assign risk we want to know

00:23:57,780 --> 00:24:06,090
whether or not I'm going from one trust

00:24:01,230 --> 00:24:08,690
level to another and we have the concept

00:24:06,090 --> 00:24:11,550
I mentioned earlier of zero trust

00:24:08,690 --> 00:24:13,170
environments and we'll see how that

00:24:11,550 --> 00:24:15,570
affects the way we think about this so

00:24:13,170 --> 00:24:17,310
trust boundaries occur when I cross the

00:24:15,570 --> 00:24:19,620
level of trust I go from the outside to

00:24:17,310 --> 00:24:21,220
the inside I go from operating as a

00:24:19,620 --> 00:24:23,049
non-provisional to now

00:24:21,220 --> 00:24:26,799
reading as a privileged account that's a

00:24:23,049 --> 00:24:30,460
truss bound so here we have just sort of

00:24:26,799 --> 00:24:34,000
a remote security system let's say it's

00:24:30,460 --> 00:24:37,179
a remote DVR this could be anything it

00:24:34,000 --> 00:24:39,610
could be on a drone could be in a car

00:24:37,179 --> 00:24:42,789
could be in a factory could be in a

00:24:39,610 --> 00:24:44,710
secure environment in the center here we

00:24:42,789 --> 00:24:47,950
have sort of the working parts you've

00:24:44,710 --> 00:24:50,140
got the a/v processes then you've got

00:24:47,950 --> 00:24:52,600
some data and configuration and you can

00:24:50,140 --> 00:24:53,830
upload it that information to something

00:24:52,600 --> 00:24:58,570
down here on the bottom which would be

00:24:53,830 --> 00:24:59,980
like then on-premises server or you can

00:24:58,570 --> 00:25:01,659
come over here to the right you're

00:24:59,980 --> 00:25:03,549
uploading it into the cloud and then you

00:25:01,659 --> 00:25:05,890
can access what's on the cloud through a

00:25:03,549 --> 00:25:08,370
web server you would probably also want

00:25:05,890 --> 00:25:10,299
some sort of command and control for the

00:25:08,370 --> 00:25:12,360
on-premises so you'll need some way to

00:25:10,299 --> 00:25:14,770
view data some way to interact with it

00:25:12,360 --> 00:25:16,630
and then you would want some command and

00:25:14,770 --> 00:25:19,030
control here on the device itself how do

00:25:16,630 --> 00:25:22,350
I configure it how do I go and look at

00:25:19,030 --> 00:25:24,880
data maybe in the real time so we have a

00:25:22,350 --> 00:25:26,380
reasonably complex system and this is a

00:25:24,880 --> 00:25:27,880
good place to start without getting too

00:25:26,380 --> 00:25:30,070
deeply into it so now the question is

00:25:27,880 --> 00:25:46,659
where are the trust boundaries in this

00:25:30,070 --> 00:25:48,940
system yeah web servers where else so

00:25:46,659 --> 00:25:52,320
minimally our trust banders are anywhere

00:25:48,940 --> 00:25:55,450
we cross a physical boundary so our

00:25:52,320 --> 00:25:58,770
mobile down here could be a cell phone

00:25:55,450 --> 00:26:00,909
in one case it also could be a UHF VHF

00:25:58,770 --> 00:26:02,470
transceiver you know the case so I've

00:26:00,909 --> 00:26:05,740
got a drone flying I want to be able to

00:26:02,470 --> 00:26:08,080
configure that from a distance you have

00:26:05,740 --> 00:26:10,960
web browsers that can run command and

00:26:08,080 --> 00:26:13,630
control against the to actually turn it

00:26:10,960 --> 00:26:16,030
off turn it on those kinds of things you

00:26:13,630 --> 00:26:21,280
have a web browser that can connect into

00:26:16,030 --> 00:26:24,760
what you have in the what you have on

00:26:21,280 --> 00:26:27,450
the up here in the cloud you've got data

00:26:24,760 --> 00:26:30,010
moving to another server somewhere

00:26:27,450 --> 00:26:32,350
on-premises so this could be something

00:26:30,010 --> 00:26:34,919
as simple as the drone lands and uploads

00:26:32,350 --> 00:26:34,919
all of its data

00:26:36,050 --> 00:26:44,850
any others yeah great

00:26:41,640 --> 00:26:49,170
so around those data stores do I

00:26:44,850 --> 00:26:51,630
implicitly trust the ad processes no

00:26:49,170 --> 00:26:54,330
because these were talking about zero

00:26:51,630 --> 00:26:56,040
trust at this point we don't implicitly

00:26:54,330 --> 00:26:57,780
trust the AV process we may be doing

00:26:56,040 --> 00:26:59,900
encryption at rest and that's enough to

00:26:57,780 --> 00:27:03,059
trust the process because if the process

00:26:59,900 --> 00:27:06,330
can't cannot authenticate in order to do

00:27:03,059 --> 00:27:09,030
the encryption at rest that's where I've

00:27:06,330 --> 00:27:10,770
tested to make sure I have verified the

00:27:09,030 --> 00:27:14,190
data and I've validated who is sending

00:27:10,770 --> 00:27:15,210
to the same thing with the data being

00:27:14,190 --> 00:27:16,950
flowed out we're talking about

00:27:15,210 --> 00:27:20,880
exfiltration the data being flowed out

00:27:16,950 --> 00:27:22,740
of that server so we we need to make

00:27:20,880 --> 00:27:25,110
sure that the data is talking to the

00:27:22,740 --> 00:27:27,030
right server so as you go through

00:27:25,110 --> 00:27:28,290
examples like this and you say okay

00:27:27,030 --> 00:27:29,790
where are the trust banners that you

00:27:28,290 --> 00:27:34,350
have to ask is where am i moving data

00:27:29,790 --> 00:27:37,500
and then there's one at the top that's

00:27:34,350 --> 00:27:39,210
the command and control so if I'm

00:27:37,500 --> 00:27:40,350
somebody who wants to penetrate the

00:27:39,210 --> 00:27:43,470
system one of the things I might want to

00:27:40,350 --> 00:27:44,940
do is just turn the system off and keep

00:27:43,470 --> 00:27:46,710
turning it off so that it is an operate

00:27:44,940 --> 00:27:49,679
maybe I'm trying to sneak into a plant

00:27:46,710 --> 00:27:51,920
so I can now go turn that system off now

00:27:49,679 --> 00:27:54,270
there's no record your your-your-your

00:27:51,920 --> 00:27:56,100
repudiation is now done there is a way

00:27:54,270 --> 00:28:02,040
for me to get in and you have no way of

00:27:56,100 --> 00:28:03,450
proving that I was in so let's look at

00:28:02,040 --> 00:28:05,910
information disclosure we're gonna be

00:28:03,450 --> 00:28:07,140
one of these four today normally what

00:28:05,910 --> 00:28:08,700
you do is you go through all of these

00:28:07,140 --> 00:28:12,900
you'd also come up with what creative

00:28:08,700 --> 00:28:14,910
ways you can go and you can look at ways

00:28:12,900 --> 00:28:16,590
to penetrate the system get data out of

00:28:14,910 --> 00:28:19,230
those things so information disclosure

00:28:16,590 --> 00:28:24,900
where am I worried about information

00:28:19,230 --> 00:28:27,200
disclosure it's easy just call it out

00:28:24,900 --> 00:28:31,770
hmm

00:28:27,200 --> 00:28:35,010
well the where's the information the

00:28:31,770 --> 00:28:36,660
data source so I need to make sure that

00:28:35,010 --> 00:28:40,050
when I'm when data is being accessed

00:28:36,660 --> 00:28:42,000
from those data stores that I'm

00:28:40,050 --> 00:28:43,890
authenticating the person trying to get

00:28:42,000 --> 00:28:45,780
that information so in this case you've

00:28:43,890 --> 00:28:47,180
got data stores that are being accessed

00:28:45,780 --> 00:28:48,920
by a web

00:28:47,180 --> 00:28:51,350
server here it's being accessed by a

00:28:48,920 --> 00:28:54,290
download program there and this is being

00:28:51,350 --> 00:29:00,740
accessed by but what about the static

00:28:54,290 --> 00:29:02,990
content mean static content is data too

00:29:00,740 --> 00:29:05,510
when static content is used to interact

00:29:02,990 --> 00:29:07,370
with the data stores at almost every

00:29:05,510 --> 00:29:15,380
level through the browser and then

00:29:07,370 --> 00:29:16,490
through the website well it's more

00:29:15,380 --> 00:29:18,350
attend so the question is are you

00:29:16,490 --> 00:29:20,000
partitioning your data stores or are

00:29:18,350 --> 00:29:22,910
they just big blobs the question more is

00:29:20,000 --> 00:29:25,160
mi securing them am i making it so that

00:29:22,910 --> 00:29:26,750
somebody cannot come in and replace my

00:29:25,160 --> 00:29:28,250
static content with somebody else's

00:29:26,750 --> 00:29:29,330
static with their static content

00:29:28,250 --> 00:29:33,500
basically which would give them access

00:29:29,330 --> 00:29:35,150
to my system and then there's the web

00:29:33,500 --> 00:29:38,750
servers themselves these are the things

00:29:35,150 --> 00:29:41,750
in in three instances they have direct

00:29:38,750 --> 00:29:42,380
connections to the data so what have I

00:29:41,750 --> 00:29:44,510
done

00:29:42,380 --> 00:29:47,320
we've managed we mentioned okay I know

00:29:44,510 --> 00:29:50,390
you're using Apache Apache struts and

00:29:47,320 --> 00:29:54,260
you've got a Linux environment so now I

00:29:50,390 --> 00:29:56,510
have an entire set of vulnerabilities

00:29:54,260 --> 00:29:58,070
that I may possibly be able to use

00:29:56,510 --> 00:29:59,930
against them and I would use it against

00:29:58,070 --> 00:30:03,230
these if I know there are windows versus

00:29:59,930 --> 00:30:04,430
Linux so those become the keys so when

00:30:03,230 --> 00:30:06,140
you're going through information use

00:30:04,430 --> 00:30:08,210
those you have to think about every link

00:30:06,140 --> 00:30:10,700
in the chain detects talks of that data

00:30:08,210 --> 00:30:13,160
that is the data itself and how its

00:30:10,700 --> 00:30:15,230
accessed the web servers which are

00:30:13,160 --> 00:30:17,270
accessing that data in most cases it's

00:30:15,230 --> 00:30:18,950
the three cases it's web servers and

00:30:17,270 --> 00:30:22,310
then the static content itself because

00:30:18,950 --> 00:30:24,080
if I can get in and put in a different

00:30:22,310 --> 00:30:25,550
static content now all of a sudden I get

00:30:24,080 --> 00:30:31,700
a different reflex out of that web

00:30:25,550 --> 00:30:33,580
server so the takeaways zero trust

00:30:31,700 --> 00:30:35,690
environments are becoming the norm

00:30:33,580 --> 00:30:37,700
because if they can get into your

00:30:35,690 --> 00:30:38,060
environment you have no trust levels

00:30:37,700 --> 00:30:40,070
anymore

00:30:38,060 --> 00:30:42,320
whether it's trust levels that are going

00:30:40,070 --> 00:30:44,030
across somebody being able to get into

00:30:42,320 --> 00:30:45,770
your system versus somebody being able

00:30:44,030 --> 00:30:49,790
to do it run a privilege escalation

00:30:45,770 --> 00:30:52,280
attack there is we now have no we now

00:30:49,790 --> 00:30:54,020
are sort of resigned to the fact that we

00:30:52,280 --> 00:30:55,150
we don't have any trust environments

00:30:54,020 --> 00:30:58,640
left

00:30:55,150 --> 00:31:00,290
exfiltration is now becoming as

00:30:58,640 --> 00:31:01,160
important as infiltration so it used to

00:31:00,290 --> 00:31:03,440
be that we

00:31:01,160 --> 00:31:07,040
our entire emphasis was keeping him out

00:31:03,440 --> 00:31:08,870
and we figured out yeah we lost all it

00:31:07,040 --> 00:31:11,360
takes is and goes back to the story I

00:31:08,870 --> 00:31:13,190
started the first talk with one human

00:31:11,360 --> 00:31:15,590
being went someplace they weren't

00:31:13,190 --> 00:31:19,070
supposed to and someone was able to get

00:31:15,590 --> 00:31:21,140
into the environment so we are now

00:31:19,070 --> 00:31:22,940
focusing on okay let's assume they're in

00:31:21,140 --> 00:31:25,400
the environment how do we keep them from

00:31:22,940 --> 00:31:26,690
getting out of getting our data out of

00:31:25,400 --> 00:31:30,740
there and out of the environment and

00:31:26,690 --> 00:31:32,240
into their hands again it goes back then

00:31:30,740 --> 00:31:32,900
complexity I talk about this all the

00:31:32,240 --> 00:31:36,080
time

00:31:32,900 --> 00:31:39,170
in the same way that metal under fatigue

00:31:36,080 --> 00:31:41,330
all the energy will translate to the

00:31:39,170 --> 00:31:44,120
part of greatest weakness complexity is

00:31:41,330 --> 00:31:45,020
the weakness you will find well you may

00:31:44,120 --> 00:31:46,970
get rid of all the vulnerabilities

00:31:45,020 --> 00:31:50,060
around it but when you get to clean clot

00:31:46,970 --> 00:31:53,240
complex pieces of the of the product and

00:31:50,060 --> 00:31:54,680
you begin to discover emergent behavior

00:31:53,240 --> 00:31:55,880
that is the time of which you say okay

00:31:54,680 --> 00:31:58,040
we've got something that's too complex

00:31:55,880 --> 00:32:00,770
we need to simplify it and it's easy

00:31:58,040 --> 00:32:02,900
with sequel for us to get into a bath of

00:32:00,770 --> 00:32:05,240
complexity there's just so many ways you

00:32:02,900 --> 00:32:07,780
can do it and then you don't realize

00:32:05,240 --> 00:32:10,460
that you've done it until it's too it

00:32:07,780 --> 00:32:12,050
threat modeling again it exposes the

00:32:10,460 --> 00:32:13,610
emergent behavior but it also allows

00:32:12,050 --> 00:32:15,410
everybody to know the system from end to

00:32:13,610 --> 00:32:19,040
end in many environments that I work in

00:32:15,410 --> 00:32:21,980
I just worked on this piece but there

00:32:19,040 --> 00:32:23,660
was a whole nother piece of the product

00:32:21,980 --> 00:32:25,370
that I had no visibility into when you

00:32:23,660 --> 00:32:27,950
do threat modeling include your entire

00:32:25,370 --> 00:32:29,990
team get everybody involved because what

00:32:27,950 --> 00:32:31,850
you want is you want everybody thinking

00:32:29,990 --> 00:32:38,930
about it and especially you want new

00:32:31,850 --> 00:32:41,690
eyes so here's where we we use what not

00:32:38,930 --> 00:32:43,760
all these get used immediately so threat

00:32:41,690 --> 00:32:45,880
modeling gets started really about the

00:32:43,760 --> 00:32:49,220
time when you start hardening your

00:32:45,880 --> 00:32:51,770
architecture and you've got a pretty

00:32:49,220 --> 00:32:54,800
good handle that okay we we know what we

00:32:51,770 --> 00:32:56,930
have and I broke this actually up into I

00:32:54,800 --> 00:32:58,160
made the comment the other day that the

00:32:56,930 --> 00:33:00,200
threat modeling really doesn't sort of

00:32:58,160 --> 00:33:02,450
fit into an agile paradigm because agile

00:33:00,200 --> 00:33:05,180
paradigms will favor working systems

00:33:02,450 --> 00:33:09,410
over documentation well the problem is

00:33:05,180 --> 00:33:11,300
is that threat modeling is an inherently

00:33:09,410 --> 00:33:13,070
documentation intensive process so

00:33:11,300 --> 00:33:14,800
people tend not to want to put it in

00:33:13,070 --> 00:33:16,660
there but you can break it up and sir

00:33:14,800 --> 00:33:19,030
way so you get to the beginning of your

00:33:16,660 --> 00:33:21,520
pie you your first few iterations are

00:33:19,030 --> 00:33:23,260
gonna be Harper textured that's the time

00:33:21,520 --> 00:33:25,030
when you want to begin thinking about

00:33:23,260 --> 00:33:26,440
doing threat modeling because now you're

00:33:25,030 --> 00:33:28,000
looking at okay how wells are architects

00:33:26,440 --> 00:33:29,200
are gonna be able to stand up it also

00:33:28,000 --> 00:33:31,090
gives you the ability to go back and

00:33:29,200 --> 00:33:33,550
refresh your architecture you may have

00:33:31,090 --> 00:33:35,560
made changes at the end of your last

00:33:33,550 --> 00:33:37,000
iteration that affected the architects

00:33:35,560 --> 00:33:38,530
you need to true up the documents make

00:33:37,000 --> 00:33:40,000
sure that they're actually accurate and

00:33:38,530 --> 00:33:43,660
valid for the product that you're

00:33:40,000 --> 00:33:45,070
releasing so static analysis starts

00:33:43,660 --> 00:33:47,290
really from the first line of code

00:33:45,070 --> 00:33:51,160
dynamic analysis starts when you have

00:33:47,290 --> 00:33:52,420
code that is pretty well along the

00:33:51,160 --> 00:33:54,400
problem with running dynamic analysis

00:33:52,420 --> 00:33:56,290
when you have a wildly changing codebase

00:33:54,400 --> 00:33:57,880
in you're making lots of changes to it

00:33:56,290 --> 00:34:00,340
is you invalidate what you ran before

00:33:57,880 --> 00:34:02,200
now you you don't know anything that

00:34:00,340 --> 00:34:07,770
that prior data doesn't really tell you

00:34:02,200 --> 00:34:11,830
anything and then starting with your

00:34:07,770 --> 00:34:13,630
fuzz testing begins when you have enough

00:34:11,830 --> 00:34:14,920
interfaces that you feel are fairly

00:34:13,630 --> 00:34:16,840
stable and you're going to begin

00:34:14,920 --> 00:34:20,110
actually testing the code behind it

00:34:16,840 --> 00:34:21,910
fuzz testing its best in the same way as

00:34:20,110 --> 00:34:22,870
TDD it's best to start fuzz testing at

00:34:21,910 --> 00:34:24,340
the time when you're developing the

00:34:22,870 --> 00:34:26,320
interfaces you're doing them along at

00:34:24,340 --> 00:34:28,390
the same time and that way you've you

00:34:26,320 --> 00:34:30,160
don't have to take this massive amount

00:34:28,390 --> 00:34:31,690
of interfaces that you have or classes

00:34:30,160 --> 00:34:33,040
you've got and now you're going to go

00:34:31,690 --> 00:34:34,380
and you're going to test it you've got

00:34:33,040 --> 00:34:36,400
to write all of this other

00:34:34,380 --> 00:34:37,929
infrastructure to be able to do fuzz

00:34:36,400 --> 00:34:40,990
testing it makes more sense to do them

00:34:37,929 --> 00:34:43,870
together and then penetration testing

00:34:40,990 --> 00:34:45,880
that starts when you've you complete a

00:34:43,870 --> 00:34:47,140
story or you complete a feature you've

00:34:45,880 --> 00:34:48,940
gotten something where you can actually

00:34:47,140 --> 00:34:50,710
go start doing some penetration testing

00:34:48,940 --> 00:34:52,600
on again if you're changing it a lot you

00:34:50,710 --> 00:34:54,100
invalidate the testing so you want to

00:34:52,600 --> 00:34:55,990
get to the point where you feel like

00:34:54,100 --> 00:34:57,160
you've got a pretty good handle on a

00:34:55,990 --> 00:35:01,330
product and the product it's pretty

00:34:57,160 --> 00:35:02,710
solid so a couple other things one of

00:35:01,330 --> 00:35:04,540
the things we always talk about is we

00:35:02,710 --> 00:35:09,700
want to build in layers so we have the

00:35:04,540 --> 00:35:11,260
principle of least permissions and this

00:35:09,700 --> 00:35:14,740
actually is a pretty good source of lots

00:35:11,260 --> 00:35:18,030
of bugs I I'm running in a minimal

00:35:14,740 --> 00:35:20,050
position or permissions I need to go and

00:35:18,030 --> 00:35:21,310
escalate my permissions because I need

00:35:20,050 --> 00:35:24,760
to do something I'm not roaming without

00:35:21,310 --> 00:35:28,570
allowed to do but in that code I have an

00:35:24,760 --> 00:35:30,580
error or I throw an exception

00:35:28,570 --> 00:35:32,230
and because I'm bailing out of that I'm

00:35:30,580 --> 00:35:34,420
not resetting those permissions so now

00:35:32,230 --> 00:35:36,100
I'm running at a much higher level of

00:35:34,420 --> 00:35:38,440
permissions than I should which allows

00:35:36,100 --> 00:35:41,260
people to exploit the fact that you're

00:35:38,440 --> 00:35:44,760
running in an escalator level of

00:35:41,260 --> 00:35:47,170
permissions and again back to complexity

00:35:44,760 --> 00:35:49,210
bob was talking about this in one of his

00:35:47,170 --> 00:35:51,100
talks it affects understandability it is

00:35:49,210 --> 00:35:54,040
really hard to reason about complex code

00:35:51,100 --> 00:35:57,400
so the simpler you can write your code

00:35:54,040 --> 00:35:59,140
the more likely you're going to put code

00:35:57,400 --> 00:36:00,370
out on the street that does not have

00:35:59,140 --> 00:36:03,180
these kinds of vulnerabilities in it

00:36:00,370 --> 00:36:06,880
because they're obvious at that point

00:36:03,180 --> 00:36:08,560
another place is logging when I want to

00:36:06,880 --> 00:36:09,940
penetrate the system the first thing I'm

00:36:08,560 --> 00:36:12,430
gonna do is I'm gonna go grab all the

00:36:09,940 --> 00:36:15,130
logs I can get because you would be

00:36:12,430 --> 00:36:16,660
surprised how much we put in the logs

00:36:15,130 --> 00:36:18,790
we're like Chatty Cathy dolls sometimes

00:36:16,660 --> 00:36:19,930
we when we do our logging especially in

00:36:18,790 --> 00:36:21,370
the embedded world is the first thing

00:36:19,930 --> 00:36:22,690
that we do in the embedded role is well

00:36:21,370 --> 00:36:24,820
we're gonna go give alt where all the

00:36:22,690 --> 00:36:27,160
registers where's all the memory how and

00:36:24,820 --> 00:36:28,750
I'm like great to me that's wonderful I

00:36:27,160 --> 00:36:31,840
need all of that so now I know where to

00:36:28,750 --> 00:36:34,180
go after your system so one of the

00:36:31,840 --> 00:36:36,550
things that and when we did this in the

00:36:34,180 --> 00:36:38,140
first talk where we went and looked at

00:36:36,550 --> 00:36:40,300
the memory just because your seg

00:36:38,140 --> 00:36:41,830
faulting does not mean that you should

00:36:40,300 --> 00:36:43,450
just bail out and say oh well the memory

00:36:41,830 --> 00:36:44,530
is corrupted if the memory is corrupt in

00:36:43,450 --> 00:36:48,250
this specific way that tells you

00:36:44,530 --> 00:36:49,660
something so capture that and I don't

00:36:48,250 --> 00:36:51,640
know about anybody else who digs through

00:36:49,660 --> 00:36:53,890
poor files but that is not my favorite

00:36:51,640 --> 00:36:57,820
thing to do core files are really hard

00:36:53,890 --> 00:36:59,800
to get through log security we don't

00:36:57,820 --> 00:37:01,690
really secure our logs although we

00:36:59,800 --> 00:37:03,100
really should secure along as we don't

00:37:01,690 --> 00:37:04,540
encrypt them because we can't there

00:37:03,100 --> 00:37:06,970
there's no way you can encrypt you along

00:37:04,540 --> 00:37:08,380
you're gonna wind up paying a huge

00:37:06,970 --> 00:37:10,030
performance penalty for the fact that

00:37:08,380 --> 00:37:11,470
you're encrypting logs but what you have

00:37:10,030 --> 00:37:14,290
to do is be careful that what you put

00:37:11,470 --> 00:37:15,850
into it don't put usernames it may be

00:37:14,290 --> 00:37:17,470
convenient but it tells me something

00:37:15,850 --> 00:37:19,840
about the system it tells me about what

00:37:17,470 --> 00:37:21,790
permissions I might need and our logs

00:37:19,840 --> 00:37:24,100
wind up being a treasure trove of

00:37:21,790 --> 00:37:29,950
information for people who are looking

00:37:24,100 --> 00:37:31,930
to go after system audit trails when

00:37:29,950 --> 00:37:33,640
you're logging ok so when we write a

00:37:31,930 --> 00:37:36,420
piece of code what is the first thing we

00:37:33,640 --> 00:37:38,279
do well we're writing out

00:37:36,420 --> 00:37:40,799
and tons of information maybe we have

00:37:38,279 --> 00:37:42,359
six or seven levels but we ever we don't

00:37:40,799 --> 00:37:44,069
ever really think about okay what if

00:37:42,359 --> 00:37:45,299
somebody has penetrated this system what

00:37:44,069 --> 00:37:46,859
are the markers what are the things I

00:37:45,299 --> 00:37:48,569
need to write to the log to tell me that

00:37:46,859 --> 00:37:51,029
somebody has done something in the

00:37:48,569 --> 00:37:55,049
system that they shouldn't our logs tend

00:37:51,029 --> 00:37:58,349
to face to to focus solely on bugs

00:37:55,049 --> 00:38:00,119
solely on this process ran that process

00:37:58,349 --> 00:38:03,109
ran this function ran followed by that

00:38:00,119 --> 00:38:06,779
function instead we can use them as

00:38:03,109 --> 00:38:09,359
audit trails so if you treat logging as

00:38:06,779 --> 00:38:12,210
a way of knowing who's doing what and

00:38:09,359 --> 00:38:15,000
when and you can obviate the user that's

00:38:12,210 --> 00:38:16,349
doing it so that you can go you can go

00:38:15,000 --> 00:38:18,299
back and do it but it makes it harder

00:38:16,349 --> 00:38:20,760
for somebody else to use your audit and

00:38:18,299 --> 00:38:23,190
use your you're logging as audit trails

00:38:20,760 --> 00:38:24,990
or have a separate log if you have to so

00:38:23,190 --> 00:38:26,990
if you're dealing with for example

00:38:24,990 --> 00:38:29,579
you're dealing with evidence

00:38:26,990 --> 00:38:31,769
there's the logs that I capture that

00:38:29,579 --> 00:38:33,230
tell me how my system is running and

00:38:31,769 --> 00:38:35,369
then there's the logs that I put out

00:38:33,230 --> 00:38:37,710
that are the audit trail for that

00:38:35,369 --> 00:38:39,990
evidence to prove that that evidence was

00:38:37,710 --> 00:38:41,549
not made a palatal along the way so

00:38:39,990 --> 00:38:45,990
audit trails are a really good way of

00:38:41,549 --> 00:38:48,599
dealing with repudiation so the next

00:38:45,990 --> 00:38:51,180
best practice is secure codes secure

00:38:48,599 --> 00:38:53,069
systems begin with secure designs if you

00:38:51,180 --> 00:38:54,569
aren't designing a secure system for me

00:38:53,069 --> 00:38:56,250
you can make all the right choices as

00:38:54,569 --> 00:38:58,410
far as your software is concerned and

00:38:56,250 --> 00:39:00,809
the code you're using but if you're not

00:38:58,410 --> 00:39:05,190
starting with a secure design you've

00:39:00,809 --> 00:39:07,349
defeated all of that so it takes both we

00:39:05,190 --> 00:39:10,799
talked about a little bit about code

00:39:07,349 --> 00:39:12,299
views here before I don't know about you

00:39:10,799 --> 00:39:15,539
but most the code reviews I've been it's

00:39:12,299 --> 00:39:17,069
you know correctness your your line

00:39:15,539 --> 00:39:18,480
links are too long I don't like your

00:39:17,069 --> 00:39:20,670
variable names this is hard to

00:39:18,480 --> 00:39:22,170
understand can you but we rarely go and

00:39:20,670 --> 00:39:23,369
look at it as oh you've got a security

00:39:22,170 --> 00:39:27,089
vulnerability maybe because we don't

00:39:23,369 --> 00:39:28,980
think that way but one of the things we

00:39:27,089 --> 00:39:31,950
do because we don't want to irritate and

00:39:28,980 --> 00:39:36,150
alienate our colleagues is we're not

00:39:31,950 --> 00:39:37,859
willing to be ruthless I mean it is what

00:39:36,150 --> 00:39:39,240
it is you you're either going to find

00:39:37,859 --> 00:39:41,279
the bug in a code review or they're

00:39:39,240 --> 00:39:42,690
gonna find it for you so if you're

00:39:41,279 --> 00:39:43,829
looking at people who are irregular

00:39:42,690 --> 00:39:45,569
hacker will find it for you if you're

00:39:43,829 --> 00:39:46,640
looking at code that is overly complex

00:39:45,569 --> 00:39:48,859
if you're looking

00:39:46,640 --> 00:39:51,079
that you don't really understand it

00:39:48,859 --> 00:39:53,299
don't just do a plus one on the review

00:39:51,079 --> 00:39:54,890
and send it on go back and ask for

00:39:53,299 --> 00:39:56,239
clarification go back and make sure that

00:39:54,890 --> 00:39:57,920
that's actually the code you want to do

00:39:56,239 --> 00:39:59,359
and the other thing I got into is don't

00:39:57,920 --> 00:40:01,579
be Plus Ones if you're using Garrett

00:39:59,359 --> 00:40:02,660
don't be plus ones on incremental and

00:40:01,579 --> 00:40:04,630
we'll talk about that here in just a

00:40:02,660 --> 00:40:07,009
minute why that's a bad thing because

00:40:04,630 --> 00:40:10,009
I've had cases where somebody actually

00:40:07,009 --> 00:40:11,569
introduced a bug or a volatile US one

00:40:10,009 --> 00:40:12,650
because I was just looking at the change

00:40:11,569 --> 00:40:15,950
they made here I wasn't looking at the

00:40:12,650 --> 00:40:18,289
totality of the changes and then legacy

00:40:15,950 --> 00:40:19,910
code legacy code though I mean we'll be

00:40:18,289 --> 00:40:25,039
honest does anybody here love digging

00:40:19,910 --> 00:40:26,779
through legacy code yeah me neither I'm

00:40:25,039 --> 00:40:29,119
not gonna go so far as to say I'd rather

00:40:26,779 --> 00:40:31,400
have a root canal but I'm pretty close

00:40:29,119 --> 00:40:32,660
to not wanting that the problem is is

00:40:31,400 --> 00:40:34,759
that they often have our worst

00:40:32,660 --> 00:40:37,609
vulnerabilities they're the code that

00:40:34,759 --> 00:40:39,950
has gone back into antiquity nobody's

00:40:37,609 --> 00:40:42,079
looked at the code nobody's looked at it

00:40:39,950 --> 00:40:43,759
for a security review it is simply a

00:40:42,079 --> 00:40:44,960
matter that that out becomes your

00:40:43,759 --> 00:40:49,609
vulnerability that you don't know is

00:40:44,960 --> 00:40:55,039
there so ruthlessness really is a virtue

00:40:49,609 --> 00:40:56,210
when it comes to doing a code review we

00:40:55,039 --> 00:40:58,549
talked a little bit about open source

00:40:56,210 --> 00:41:03,670
libraries in the first half

00:40:58,549 --> 00:41:06,410
I prefer libraries that have a continual

00:41:03,670 --> 00:41:09,170
security check because if somebody adds

00:41:06,410 --> 00:41:11,989
a breaking change or something that adds

00:41:09,170 --> 00:41:14,239
a vulnerability it I he doesn't matter

00:41:11,989 --> 00:41:15,920
that it was code reviewed by a security

00:41:14,239 --> 00:41:19,519
company six months before they just put

00:41:15,920 --> 00:41:21,019
it in today it's in my code so you have

00:41:19,519 --> 00:41:22,849
to be very careful about the code that

00:41:21,019 --> 00:41:24,799
you're using one of one of the

00:41:22,849 --> 00:41:26,480
mitigation ways you can mitigate that as

00:41:24,799 --> 00:41:27,799
security wrappers so if you have

00:41:26,480 --> 00:41:28,759
something's misbehaving and it's going

00:41:27,799 --> 00:41:31,400
to throw an exception catch the

00:41:28,759 --> 00:41:33,619
exception dealer don't let it bubble up

00:41:31,400 --> 00:41:35,989
to the top of a call stack if you have a

00:41:33,619 --> 00:41:37,579
library that you suspect isn't really

00:41:35,989 --> 00:41:38,809
maybe you fuzz test the library and find

00:41:37,579 --> 00:41:39,650
out oh yeah it doesn't handle all these

00:41:38,809 --> 00:41:41,809
things you're gonna have to build a

00:41:39,650 --> 00:41:45,730
wrapper around that that library that

00:41:41,809 --> 00:41:48,589
handles the date of sanitization for it

00:41:45,730 --> 00:41:49,819
because it really is true you're only as

00:41:48,589 --> 00:41:51,859
strong as your weakest third-party

00:41:49,819 --> 00:41:56,119
library their vulnerabilities become

00:41:51,859 --> 00:41:58,009
yours that's just the way of it so let's

00:41:56,119 --> 00:41:59,420
talk about is any have any questions

00:41:58,009 --> 00:41:59,840
before I go because I think I didn't

00:41:59,420 --> 00:42:13,010
wait

00:41:59,840 --> 00:42:13,790
a bit so let's do couple she's going the

00:42:13,010 --> 00:42:16,370
number one

00:42:13,790 --> 00:42:19,880
period is you didn't validate you didn't

00:42:16,370 --> 00:42:22,040
verify and I find that all the time and

00:42:19,880 --> 00:42:23,240
legacy code I'm just taking the data

00:42:22,040 --> 00:42:24,710
that you give me and I'm operating

00:42:23,240 --> 00:42:26,180
against it so the question was what is

00:42:24,710 --> 00:42:32,630
the most common vulnerability I find the

00:42:26,180 --> 00:42:33,680
legacy code and that's it okay so the

00:42:32,630 --> 00:42:36,280
question is what do I mean beyond the

00:42:33,680 --> 00:42:39,110
incremental commit so you can garrett

00:42:36,280 --> 00:42:40,250
you can do a commit and you look at it

00:42:39,110 --> 00:42:41,660
and you come back and there's some

00:42:40,250 --> 00:42:43,580
comments by it and someone comes and

00:42:41,660 --> 00:42:45,860
does the fix for it and they check in a

00:42:43,580 --> 00:42:47,180
patch well in Gerrits you can go and you

00:42:45,860 --> 00:42:49,070
can look at just the patch do they

00:42:47,180 --> 00:42:50,810
really fix the problem that i said they

00:42:49,070 --> 00:42:53,780
had the problem is if i don't look at it

00:42:50,810 --> 00:42:55,730
in the context of the whole commit i've

00:42:53,780 --> 00:42:58,580
now just +1 something just because they

00:42:55,730 --> 00:43:00,170
answered my complaint about their code

00:42:58,580 --> 00:43:03,440
but maybe they broke something else and

00:43:00,170 --> 00:43:23,240
i didn't work so that's it that's what i

00:43:03,440 --> 00:43:24,590
mean yeah okay so the question is has to

00:43:23,240 --> 00:43:27,710
do with a library that might be reading

00:43:24,590 --> 00:43:29,390
a PNG file and how do you sanitize that

00:43:27,710 --> 00:43:32,120
figure two garbage PNG file and see what

00:43:29,390 --> 00:43:33,500
happens if it's if it's gonna choke on

00:43:32,120 --> 00:43:35,270
it you're gonna to verify that that's a

00:43:33,500 --> 00:43:36,440
legitimate PNG file before you send it

00:43:35,270 --> 00:43:38,090
on to the library if you don't have the

00:43:36,440 --> 00:43:41,920
source code you have the source code you

00:43:38,090 --> 00:43:43,070
can go fix it that gets your question

00:43:41,920 --> 00:43:53,060
okay

00:43:43,070 --> 00:43:54,290
oh you didn't get my answer so the

00:43:53,060 --> 00:43:57,080
question is do you have to write your

00:43:54,290 --> 00:43:59,750
own parser if you're using a library

00:43:57,080 --> 00:44:02,270
that you think is suspect and is going

00:43:59,750 --> 00:44:03,560
to choke on a PNG file the easiest thing

00:44:02,270 --> 00:44:05,180
in the world for me to do as a hacker is

00:44:03,560 --> 00:44:07,370
just feed you garbage and watch your

00:44:05,180 --> 00:44:08,810
system go down so yes you may very well

00:44:07,370 --> 00:44:11,150
be at that point or find a better

00:44:08,810 --> 00:44:12,380
library that's actually been tested for

00:44:11,150 --> 00:44:13,270
security and actually does its job

00:44:12,380 --> 00:44:15,550
correctly

00:44:13,270 --> 00:44:16,840
and that's not always and I know that's

00:44:15,550 --> 00:44:18,400
not a very satisfying answer because

00:44:16,840 --> 00:44:20,710
sometimes that's the only library you've

00:44:18,400 --> 00:44:22,420
got it's something very specific you

00:44:20,710 --> 00:44:23,710
can't really do it then you have to go

00:44:22,420 --> 00:44:24,910
back to the code authors you have to

00:44:23,710 --> 00:44:26,740
make a tough decision about whether or

00:44:24,910 --> 00:44:28,240
not I want to use it or then yes you

00:44:26,740 --> 00:44:44,740
have to do a front end that is going to

00:44:28,240 --> 00:44:45,910
protect yourself from that library okay

00:44:44,740 --> 00:44:48,910
so Chandler says he disagrees about

00:44:45,910 --> 00:44:51,700
being ruthless which I understand the

00:44:48,910 --> 00:44:52,960
about in code reviews which I completely

00:44:51,700 --> 00:44:53,920
understand because you have to work with

00:44:52,960 --> 00:44:55,720
these people I'm not talking about

00:44:53,920 --> 00:44:57,610
ruthlessness is and then I found a bug

00:44:55,720 --> 00:45:00,040
and I'm gonna make you look like a total

00:44:57,610 --> 00:45:04,240
idiot that is not ruthlessness that's

00:45:00,040 --> 00:45:06,430
being a jerk ruthlessness is I'm going

00:45:04,240 --> 00:45:08,290
to look at this from the standpoint of

00:45:06,430 --> 00:45:10,450
somebody who wants to do you harm

00:45:08,290 --> 00:45:11,380
that's ruthlessness so I'm glad you

00:45:10,450 --> 00:45:13,030
brought that up because it's not

00:45:11,380 --> 00:45:15,550
demeaning I'm not talking about making

00:45:13,030 --> 00:45:16,600
your colleagues look bad because then

00:45:15,550 --> 00:45:19,060
they'll turn around make you look bad

00:45:16,600 --> 00:45:21,580
and you are gonna wreck your team this

00:45:19,060 --> 00:45:23,980
is about the people who will come after

00:45:21,580 --> 00:45:27,609
your code do not care about you or your

00:45:23,980 --> 00:45:30,420
feelings so you have to look at the code

00:45:27,609 --> 00:45:32,650
as I don't care about my feelings either

00:45:30,420 --> 00:45:34,390
because you need to find the things out

00:45:32,650 --> 00:45:36,369
there I'm gonna I got about ten minutes

00:45:34,390 --> 00:45:38,710
left on the pitcher because I want to

00:45:36,369 --> 00:45:41,460
get through this this particular exploit

00:45:38,710 --> 00:45:44,200
you want to make sure that you are not

00:45:41,460 --> 00:45:45,940
just leaving it at I don't like your

00:45:44,200 --> 00:45:47,619
line lengths I don't understand your

00:45:45,940 --> 00:45:50,950
variable naming the kinds of things we

00:45:47,619 --> 00:45:54,220
tend to see a lot in code review dirty

00:45:50,950 --> 00:45:58,260
count anybody ever heard of it okay a

00:45:54,220 --> 00:46:00,730
few people so dirty Cal was a

00:45:58,260 --> 00:46:04,119
vulnerability in the Linux memory

00:46:00,730 --> 00:46:06,940
management system every system out there

00:46:04,119 --> 00:46:10,720
so we it was introduced in 2007 they

00:46:06,940 --> 00:46:12,580
didn't find it again until 2016 and get

00:46:10,720 --> 00:46:14,290
rid of it it was one of those things

00:46:12,580 --> 00:46:16,090
where they fixed it one time it was

00:46:14,290 --> 00:46:17,260
broken by another fix and this goes back

00:46:16,090 --> 00:46:19,540
to the whole thing of looking

00:46:17,260 --> 00:46:23,230
holistically you know as you're checking

00:46:19,540 --> 00:46:25,270
in code does it break other things so it

00:46:23,230 --> 00:46:26,890
was fixed it was broken and then it was

00:46:25,270 --> 00:46:27,099
fixed again but it stayed out there for

00:46:26,890 --> 00:46:29,140
now

00:46:27,099 --> 00:46:31,119
years until somebody caught it we do

00:46:29,140 --> 00:46:32,739
know that it was actively exploited by

00:46:31,119 --> 00:46:34,959
pretty much all the evidence that's out

00:46:32,739 --> 00:46:37,779
there so this is a vulnerability in the

00:46:34,959 --> 00:46:39,430
copy-on-write which is where the name

00:46:37,779 --> 00:46:43,209
comes from but every operating system

00:46:39,430 --> 00:46:46,119
has a copy-on-write system in it in this

00:46:43,209 --> 00:46:48,459
case by exploiting this you can write to

00:46:46,119 --> 00:46:51,729
protected files and it is actually

00:46:48,459 --> 00:46:54,219
fairly simple to do it so this is the

00:46:51,729 --> 00:46:57,459
copy-on-write system for linux I have my

00:46:54,219 --> 00:46:59,619
file over here in the middle I when I

00:46:57,459 --> 00:47:01,569
read for it read from it I don't read

00:46:59,619 --> 00:47:03,670
the whole file into memory I just read

00:47:01,569 --> 00:47:05,859
the segment that I the chunk that I want

00:47:03,670 --> 00:47:08,319
to read so the program is gonna read it

00:47:05,859 --> 00:47:10,329
when I write it because this is a write

00:47:08,319 --> 00:47:12,430
a read-only file that I can't write to

00:47:10,329 --> 00:47:14,289
this protected system file it's going to

00:47:12,430 --> 00:47:19,059
do a copy on write and that's the

00:47:14,289 --> 00:47:23,469
vulnerability so we use a function

00:47:19,059 --> 00:47:25,119
called mend map which makes it read-only

00:47:23,469 --> 00:47:26,259
so we open in read-only we can't read it

00:47:25,119 --> 00:47:27,160
and reading it open and rewrite

00:47:26,259 --> 00:47:30,449
something because we don't have

00:47:27,160 --> 00:47:33,400
permissions to do that we give this this

00:47:30,449 --> 00:47:37,150
private setting which is what enables

00:47:33,400 --> 00:47:45,910
the copy on right and then you have a

00:47:37,150 --> 00:47:47,799
file description so here is on the far

00:47:45,910 --> 00:47:48,999
left is a piece of code we're gonna open

00:47:47,799 --> 00:47:53,469
it for those of you or not

00:47:48,999 --> 00:47:54,940
Linux developers process self men that's

00:47:53,469 --> 00:47:58,180
just your memory file that's accessing

00:47:54,940 --> 00:47:59,229
your memory for your process we have a

00:47:58,180 --> 00:48:00,969
seat because we're gonna go to a

00:47:59,229 --> 00:48:02,619
specific place and then we have a right

00:48:00,969 --> 00:48:04,209
so we're gonna write this out but

00:48:02,619 --> 00:48:08,229
there's also another function called M

00:48:04,209 --> 00:48:09,940
advise and M advise takes the file and

00:48:08,229 --> 00:48:12,640
basically tells the operating system I

00:48:09,940 --> 00:48:14,559
don't need you might you can dump my

00:48:12,640 --> 00:48:18,670
changes so if you look over here on the

00:48:14,559 --> 00:48:20,709
right I will write to the file which

00:48:18,670 --> 00:48:23,079
sets the dirty bit then I can come in

00:48:20,709 --> 00:48:24,839
and hit and issue the M advise in which

00:48:23,079 --> 00:48:29,709
case the operating system throws it away

00:48:24,839 --> 00:48:31,390
and then when I go to write to it again

00:48:29,709 --> 00:48:33,009
the system first has to reread it like

00:48:31,390 --> 00:48:34,809
as I threw it away so it has to go

00:48:33,009 --> 00:48:36,849
reread the file back in or at least that

00:48:34,809 --> 00:48:39,160
section of file what does that sound

00:48:36,849 --> 00:48:41,040
like the vulnerable is going to wind up

00:48:39,160 --> 00:48:42,910
being

00:48:41,040 --> 00:48:48,640
exactly it's race condition its

00:48:42,910 --> 00:48:51,070
threading so I have two threads I do go

00:48:48,640 --> 00:48:52,660
right I do I'm advised I do a right I do

00:48:51,070 --> 00:48:55,210
mm advise that do it very slowly

00:48:52,660 --> 00:48:57,250
everybody's happy with each other we we

00:48:55,210 --> 00:48:58,690
do it but then what happens when I just

00:48:57,250 --> 00:49:00,910
start slamming him and vice in there and

00:48:58,690 --> 00:49:04,510
I'm just doing it over and over and over

00:49:00,910 --> 00:49:07,570
again in the case of this vulnerability

00:49:04,510 --> 00:49:09,070
I can trick the system into writing to

00:49:07,570 --> 00:49:10,450
the actual file the one that I'm not

00:49:09,070 --> 00:49:13,660
supposed to remember the system is

00:49:10,450 --> 00:49:17,710
running as root so it can write to it

00:49:13,660 --> 00:49:19,720
it's just I'm not supposed to so a

00:49:17,710 --> 00:49:23,800
couple the files targets we'd like to go

00:49:19,720 --> 00:49:25,000
after etc' password so for strangely

00:49:23,800 --> 00:49:26,800
enough they eat each password file

00:49:25,000 --> 00:49:28,480
doesn't have any passwords it's just a

00:49:26,800 --> 00:49:30,940
list of the people who are on the system

00:49:28,480 --> 00:49:34,150
so I create a little account called mad

00:49:30,940 --> 00:49:38,530
cow in the first the 1001 is just the

00:49:34,150 --> 00:49:40,240
user ID the 1002 is the group so if I

00:49:38,530 --> 00:49:41,650
could go in because I can't write that

00:49:40,240 --> 00:49:44,820
if I could go in and just replace that

00:49:41,650 --> 00:49:47,200
1001 with all zeros and make myself root

00:49:44,820 --> 00:49:48,700
suddenly I can log in as root the other

00:49:47,200 --> 00:49:50,050
thing we can do is if you notice these

00:49:48,700 --> 00:49:53,260
we talked about this a little bit

00:49:50,050 --> 00:49:55,740
earlier these this ping ping 6 and Su

00:49:53,260 --> 00:49:58,180
these are all where the set you would

00:49:55,740 --> 00:50:02,830
flag is set which means that I when I

00:49:58,180 --> 00:50:05,650
run these I'm running as root so if I

00:50:02,830 --> 00:50:08,740
can go in and just simply rewrite ping

00:50:05,650 --> 00:50:09,820
to handle the same interface but it does

00:50:08,740 --> 00:50:12,220
something different the next time

00:50:09,820 --> 00:50:13,390
somebody runs it all of a sudden they're

00:50:12,220 --> 00:50:16,060
doing something that they shouldn't have

00:50:13,390 --> 00:50:17,530
an assistant in the context of root so

00:50:16,060 --> 00:50:20,830
here's our code it's actually fairly

00:50:17,530 --> 00:50:22,690
simple we're going to basically just

00:50:20,830 --> 00:50:24,400
open the password file we're going to

00:50:22,690 --> 00:50:26,680
map to it so that we can map to a

00:50:24,400 --> 00:50:28,150
particular section we're going to find a

00:50:26,680 --> 00:50:31,060
position which I want to replace that

00:50:28,150 --> 00:50:33,910
1001 so I'm gonna figure out where that

00:50:31,060 --> 00:50:35,530
begins then I'm gonna spin up two

00:50:33,910 --> 00:50:37,900
threads one is the EM advising the read

00:50:35,530 --> 00:50:40,810
the code for EM advise and read is on

00:50:37,900 --> 00:50:42,280
the right hand side so we have just

00:50:40,810 --> 00:50:43,990
opens and then it just sits there and it

00:50:42,280 --> 00:50:45,270
runs forever just goes and seeks and

00:50:43,990 --> 00:50:47,470
writes goes and seeks and writes and

00:50:45,270 --> 00:50:49,330
then the EM advice just keeps hammering

00:50:47,470 --> 00:50:50,550
that telling this if nut throw it away

00:50:49,330 --> 00:50:53,250
nope throat

00:50:50,550 --> 00:50:54,780
and that's where the vulnerability ones

00:50:53,250 --> 00:50:57,080
of things let's go look at how this

00:50:54,780 --> 00:50:57,080
works

00:51:05,880 --> 00:51:11,860
so on the right hand yes you're right

00:51:08,920 --> 00:51:13,930
inside if you look down here at the

00:51:11,860 --> 00:51:16,180
bottom you'll see my Mad Cow account

00:51:13,930 --> 00:51:18,700
it's got a thousand and one thousand one

00:51:16,180 --> 00:51:23,740
thousand two so that means I'm just a

00:51:18,700 --> 00:51:25,390
regular user the and we'll run this out

00:51:23,740 --> 00:51:28,380
of the pane on the left so let me I can

00:51:25,390 --> 00:51:28,380
log in as dirty cow

00:51:37,620 --> 00:51:47,640
do i pellets right smack down underneath

00:51:39,420 --> 00:51:54,180
it and I'm just a regular user so I'm I

00:51:47,640 --> 00:51:56,490
should not be able to get to the shadow

00:51:54,180 --> 00:51:59,790
file because I'm just a regular user

00:51:56,490 --> 00:52:05,640
access tonight as it should be so if I

00:51:59,790 --> 00:52:11,190
run and this is just gonna sit there and

00:52:05,640 --> 00:52:14,130
run and run and run or not now all of a

00:52:11,190 --> 00:52:24,420
sudden that 1001 has been replaced by

00:52:14,130 --> 00:52:28,710
all zeros so we're done here and now I'm

00:52:24,420 --> 00:52:37,440
route so this is a from an operating

00:52:28,710 --> 00:52:41,940
system it's a horrifying bug and now I

00:52:37,440 --> 00:52:43,530
can access this you had a phone so this

00:52:41,940 --> 00:52:48,540
is one of those bugs you're not going to

00:52:43,530 --> 00:52:49,680
find in it'll be hard to find it in a

00:52:48,540 --> 00:52:53,480
code review but you're not going to find

00:52:49,680 --> 00:52:55,530
it with static analyzers so as far as

00:52:53,480 --> 00:52:57,480
countermeasures it's pretty much all

00:52:55,530 --> 00:52:59,070
just bad news this code had been

00:52:57,480 --> 00:53:02,400
reviewed and reviewed and reviewed from

00:52:59,070 --> 00:53:04,440
changes it still made it in again

00:53:02,400 --> 00:53:05,970
there's no logging so repudiation is

00:53:04,440 --> 00:53:07,830
still intact I didn't do that because

00:53:05,970 --> 00:53:09,780
you have no logging the crews that I did

00:53:07,830 --> 00:53:11,250
and then other than a code change

00:53:09,780 --> 00:53:12,960
there's nothing in the operating system

00:53:11,250 --> 00:53:14,550
this is the operating system so there's

00:53:12,960 --> 00:53:16,200
nothing there watching it to protect not

00:53:14,550 --> 00:53:19,950
like we can rely on a SLR to give us

00:53:16,200 --> 00:53:21,300
some protection you might find this in

00:53:19,950 --> 00:53:23,670
the dynamic analysis the problems you

00:53:21,300 --> 00:53:25,800
have to know what to look for the way I

00:53:23,670 --> 00:53:27,420
think this probably was discovered by

00:53:25,800 --> 00:53:28,820
something outside is I've got the code

00:53:27,420 --> 00:53:31,920
I'm gonna go like I say wait a minute

00:53:28,820 --> 00:53:33,630
this doesn't look exactly right I wonder

00:53:31,920 --> 00:53:35,760
if I can exploit that and then I come up

00:53:33,630 --> 00:53:37,380
with a way of doing it test it and

00:53:35,760 --> 00:53:40,500
suddenly I've got it so this is where

00:53:37,380 --> 00:53:46,370
having the source code becomes very very

00:53:40,500 --> 00:53:46,370
important so the last

00:53:48,480 --> 00:53:53,680
Velasquez practice you keep it like I

00:53:52,119 --> 00:53:57,849
said in the first talk it drives me nuts

00:53:53,680 --> 00:53:59,349
when I hear CEOs talk about how well we

00:53:57,849 --> 00:54:01,470
have to get lucky every time the hackers

00:53:59,349 --> 00:54:04,269
only have to get lucky once if you are

00:54:01,470 --> 00:54:06,279
trusting that luck is going to fix it

00:54:04,269 --> 00:54:08,349
for you it is not because the luck will

00:54:06,279 --> 00:54:08,950
run against you it's always going to run

00:54:08,349 --> 00:54:10,749
against you

00:54:08,950 --> 00:54:13,869
there's hundreds of companies out there

00:54:10,749 --> 00:54:14,259
with a luck ran against them but here's

00:54:13,869 --> 00:54:17,859
the thing

00:54:14,259 --> 00:54:20,170
I own the software that's why I picked

00:54:17,859 --> 00:54:21,309
the title your lat your first line is

00:54:20,170 --> 00:54:24,700
the last line of defense

00:54:21,309 --> 00:54:27,039
I own the software I own the network I

00:54:24,700 --> 00:54:29,109
own the infrastructure I own everything

00:54:27,039 --> 00:54:32,289
that goes the only thing that the

00:54:29,109 --> 00:54:33,249
hackers have that I don't have is they

00:54:32,289 --> 00:54:36,609
get to choose the time of engagement

00:54:33,249 --> 00:54:39,130
that's it I have everything else and

00:54:36,609 --> 00:54:40,749
that's why did this picture it's a

00:54:39,130 --> 00:54:42,460
completely ridiculous caricature these

00:54:40,749 --> 00:54:44,319
people are not demigods they're not

00:54:42,460 --> 00:54:46,450
geniuses like we we need to I'll do a

00:54:44,319 --> 00:54:48,759
whole talk based on all the times when

00:54:46,450 --> 00:54:50,259
they've messed up and put things out in

00:54:48,759 --> 00:54:52,839
the wild to make it easy for us to stop

00:54:50,259 --> 00:54:56,739
what they were doing but the bottom line

00:54:52,839 --> 00:54:59,619
is is that when it comes to my software

00:54:56,739 --> 00:55:01,089
and comes to my systems I'm gonna choose

00:54:59,619 --> 00:55:04,569
to either be the predator or the prey

00:55:01,089 --> 00:55:05,680
and I choose to be the predator because

00:55:04,569 --> 00:55:07,509
they're in my backyard

00:55:05,680 --> 00:55:09,369
and I have no intentions just letting

00:55:07,509 --> 00:55:11,079
them walk in and waltz all over the

00:55:09,369 --> 00:55:13,450
things that I've created and we let them

00:55:11,079 --> 00:55:16,049
get away with it and that's one thing I

00:55:13,450 --> 00:55:18,609
want us as a community to begin doing is

00:55:16,049 --> 00:55:21,099
stop thinking of this in terms of the

00:55:18,609 --> 00:55:23,710
problem we can't solve it's solvable

00:55:21,099 --> 00:55:27,309
it just takes training it takes a

00:55:23,710 --> 00:55:29,619
different mindset so it may not be a

00:55:27,309 --> 00:55:30,819
fair exchange but you're either going to

00:55:29,619 --> 00:55:32,049
be the creditor the Kreg they're either

00:55:30,819 --> 00:55:34,450
the hunter of the hunted it's that

00:55:32,049 --> 00:55:39,789
simple in this environment but the good

00:55:34,450 --> 00:55:42,130
news is you have all the controls and so

00:55:39,789 --> 00:55:47,049
this is where it starts so if you're

00:55:42,130 --> 00:55:48,369
interested in security we have a lot of

00:55:47,049 --> 00:55:50,950
scary types but you have more security

00:55:48,369 --> 00:55:53,109
talks here than we've ever had so we

00:55:50,950 --> 00:55:54,279
have a panel coming up Thursday so if I

00:55:53,109 --> 00:55:58,660
don't get to all your questions I'll be

00:55:54,279 --> 00:56:01,700
happy to answer them after or come to

00:55:58,660 --> 00:56:04,970
security panel besides myself we have

00:56:01,700 --> 00:56:06,559
Tricia oz which I found out this week

00:56:04,970 --> 00:56:09,650
you pronounce her name that way because

00:56:06,559 --> 00:56:11,869
it rhymed to the awesome Matt Miller

00:56:09,650 --> 00:56:13,430
from Microsoft actually does this for

00:56:11,869 --> 00:56:15,200
Windows he actually goes in and runs

00:56:13,430 --> 00:56:16,970
penetrations against windows to see if

00:56:15,200 --> 00:56:18,529
he can break the system and get into

00:56:16,970 --> 00:56:20,059
places he shouldn't and then we have

00:56:18,529 --> 00:56:23,690
Michael Wong from code play who's been a

00:56:20,059 --> 00:56:24,950
part of the Standards Committee as part

00:56:23,690 --> 00:56:28,339
of several standards committees for a

00:56:24,950 --> 00:56:29,900
long time which gives him a an insider's

00:56:28,339 --> 00:56:32,599
view and so a vacati who's sitting in

00:56:29,900 --> 00:56:34,760
the back would be our moderator but

00:56:32,599 --> 00:56:36,619
there's other talks so you've had two

00:56:34,760 --> 00:56:38,839
from me today Patricia will be doing two

00:56:36,619 --> 00:56:39,440
this week so she has Tuesday and

00:56:38,839 --> 00:56:41,569
Wednesday

00:56:39,440 --> 00:56:43,579
you have Chandler Carruth over here who

00:56:41,569 --> 00:56:46,490
is going to do what I think is gonna be

00:56:43,579 --> 00:56:48,980
an outstanding talk on Friday on Spector

00:56:46,490 --> 00:56:50,510
and meltdown and then there will be a

00:56:48,980 --> 00:56:52,549
panel after that so you have plenty of

00:56:50,510 --> 00:56:54,829
opportunities here to engage people who

00:56:52,549 --> 00:56:56,539
are in this industry who work in this to

00:56:54,829 --> 00:56:59,119
find out okay what are the things we can

00:56:56,539 --> 00:57:03,710
do in order to make our code very safe

00:56:59,119 --> 00:57:06,410
and with that I will take two and a half

00:57:03,710 --> 00:57:25,700
minutes for the Russians there was some

00:57:06,410 --> 00:57:27,680
of you ever getting a good person since

00:57:25,700 --> 00:57:30,740
I do the math the vast majority of my

00:57:27,680 --> 00:57:33,440
software in C++ I think saw I think C++

00:57:30,740 --> 00:57:35,920
is an outstanding language just in

00:57:33,440 --> 00:57:40,279
general as far as security is concerned

00:57:35,920 --> 00:57:42,799
C++ I think is a very secure language

00:57:40,279 --> 00:57:45,529
and let me qualify that statement if you

00:57:42,799 --> 00:57:47,900
know what you're doing if you know where

00:57:45,529 --> 00:57:50,480
the sharp edges are if you're testing

00:57:47,900 --> 00:57:53,180
one of the things that we love about C++

00:57:50,480 --> 00:57:55,069
is the c++ gives this incredible power

00:57:53,180 --> 00:57:56,750
well but with that incredible power lets

00:57:55,069 --> 00:57:58,940
you do a lot of things that you probably

00:57:56,750 --> 00:58:01,519
shouldn't do we have a Standards

00:57:58,940 --> 00:58:03,109
Committee that is not just changing the

00:58:01,519 --> 00:58:04,250
language overnight they're taking their

00:58:03,109 --> 00:58:06,349
time they're going through those things

00:58:04,250 --> 00:58:07,609
we have sg-12 which is constantly

00:58:06,349 --> 00:58:10,730
looking at can we make the language

00:58:07,609 --> 00:58:14,200
sought and safer so I don't really have

00:58:10,730 --> 00:58:15,620
a problem with C++ as a safe language

00:58:14,200 --> 00:58:18,170
the problem

00:58:15,620 --> 00:58:19,940
comes with how we wind up using the

00:58:18,170 --> 00:58:21,350
language eaten string copy if you use it

00:58:19,940 --> 00:58:25,700
correctly there's nothing unsafe about

00:58:21,350 --> 00:58:27,590
it it's just that we don't so rather

00:58:25,700 --> 00:58:28,880
than bringing rather than looking at the

00:58:27,590 --> 00:58:30,800
language the saying well is the language

00:58:28,880 --> 00:58:35,630
safe and we were to strip out all the

00:58:30,800 --> 00:58:36,740
sharp edges on C++ we get Java and you

00:58:35,630 --> 00:58:37,730
still wouldn't be done with all the

00:58:36,740 --> 00:58:40,850
vulnerability because there's lots of

00:58:37,730 --> 00:58:43,640
vulnerabilities even in Java so I would

00:58:40,850 --> 00:58:45,320
not look at C++ and say we don't want to

00:58:43,640 --> 00:58:47,270
use the language because it's got sharp

00:58:45,320 --> 00:59:01,580
edges every language has them you just

00:58:47,270 --> 00:59:02,930
have to be careful okay so what's my

00:59:01,580 --> 00:59:05,270
comment about security through obscurity

00:59:02,930 --> 00:59:07,850
is a valid mechanism if security through

00:59:05,270 --> 00:59:11,600
obscurity was a valid mechanism it

00:59:07,850 --> 00:59:15,950
wouldn't be so easy to get past it most

00:59:11,600 --> 00:59:19,910
of what we do was with obscurity is I

00:59:15,950 --> 00:59:22,430
hide a file well that's fine but if I'm

00:59:19,910 --> 00:59:23,870
if I know you've hidden it or if I find

00:59:22,430 --> 00:59:28,060
out you've hidden it your obscurity is

00:59:23,870 --> 00:59:30,740
gone security obscurity has it's its

00:59:28,060 --> 00:59:33,740
place but it is a weak form of security

00:59:30,740 --> 00:59:35,060
a better form of security is validating

00:59:33,740 --> 00:59:38,510
and verifying the data that you're using

00:59:35,060 --> 00:59:41,150
the people that you're talking to so I

00:59:38,510 --> 00:59:43,160
don't spend a lot of time doing security

00:59:41,150 --> 00:59:48,100
through obscurity simply because I think

00:59:43,160 --> 00:59:48,100
it's a weak model first curtain Oh

01:00:07,950 --> 01:00:14,890
the place I would start would be threat

01:00:10,720 --> 01:00:16,690
modeling if you start you you say so the

01:00:14,890 --> 01:00:18,190
question is where would you start and

01:00:16,690 --> 01:00:19,780
I've mentioned a lot of tools which ones

01:00:18,190 --> 01:00:20,950
would you start with Coverity is not

01:00:19,780 --> 01:00:25,650
cheap

01:00:20,950 --> 01:00:29,680
most of these the static analyzers are

01:00:25,650 --> 01:00:31,720
fairly expensive so I would start with

01:00:29,680 --> 01:00:34,480
the places where you get the most

01:00:31,720 --> 01:00:37,210
knowledge static analyzers are an

01:00:34,480 --> 01:00:41,410
automated tool that do you run it you're

01:00:37,210 --> 01:00:42,760
going to wind up getting some result

01:00:41,410 --> 01:00:44,080
maybe not the results you expect but

01:00:42,760 --> 01:00:46,330
you're not going to really learn a lot

01:00:44,080 --> 01:00:49,420
so I would start with the places where

01:00:46,330 --> 01:00:51,070
you as a team will learn threat modeling

01:00:49,420 --> 01:00:52,540
code reviews go figure out what the

01:00:51,070 --> 01:00:54,100
patterns are there's tons of information

01:00:52,540 --> 01:00:56,380
out there you can have people into

01:00:54,100 --> 01:00:57,760
training what are the patterns talk to

01:00:56,380 --> 01:00:59,260
pen testers they'll tell you where the

01:00:57,760 --> 01:01:01,300
where all the patterns of the mistakes

01:00:59,260 --> 01:01:02,950
you are so what you want to do is

01:01:01,300 --> 01:01:05,470
especially if you're not talking about

01:01:02,950 --> 01:01:07,270
going and starting a system out the ones

01:01:05,470 --> 01:01:08,920
that give you the most value are things

01:01:07,270 --> 01:01:10,720
like code reviews when you understand

01:01:08,920 --> 01:01:13,930
the kinds of patterns that you're seeing

01:01:10,720 --> 01:01:16,000
things that you basically get for you I

01:01:13,930 --> 01:01:17,710
love dynamic testing tools because

01:01:16,000 --> 01:01:21,150
they're inexpensive I can implement them

01:01:17,710 --> 01:01:23,260
almost immediately fuzz testing has it's

01:01:21,150 --> 01:01:25,510
reasonably inexpensive but it has a

01:01:23,260 --> 01:01:27,070
really high startup cost so I would

01:01:25,510 --> 01:01:28,930
start with the pieces that you see on

01:01:27,070 --> 01:01:30,880
this list that are the pieces that are

01:01:28,930 --> 01:01:32,560
either free or things that gigging and

01:01:30,880 --> 01:01:34,210
for me it's gonna be threat modeling

01:01:32,560 --> 01:01:36,490
it's going to be code reviews it's

01:01:34,210 --> 01:01:56,650
getting my head wrapped around a problem

01:01:36,490 --> 01:01:58,660
that I'm not used to dealing with yeah

01:01:56,650 --> 01:02:01,740
so the in fact we're out of time so if

01:01:58,660 --> 01:02:03,520
people need to leave we can go ahead and

01:02:01,740 --> 01:02:05,170
please feel free because I know

01:02:03,520 --> 01:02:07,180
everybody has a place to go so the

01:02:05,170 --> 01:02:08,740
comment was is that a lot of static

01:02:07,180 --> 01:02:09,790
analyzers were going back to cert and

01:02:08,740 --> 01:02:11,080
getting the checks that's actually a

01:02:09,790 --> 01:02:13,810
great place to look if you want to learn

01:02:11,080 --> 01:02:17,630
the patterns of the mistakes we make

01:02:13,810 --> 01:02:21,680
cert Maite are very good places to go go

01:02:17,630 --> 01:02:23,119
to Patricia's talk tomorrow I think

01:02:21,680 --> 01:02:24,710
that's the one where she's doing CNC

01:02:23,119 --> 01:02:25,070
postponed mobility okay thank you all

01:02:24,710 --> 01:02:26,610
very much

01:02:25,070 --> 01:02:32,199
I'm

01:02:26,610 --> 01:02:32,199

YouTube URL: https://www.youtube.com/watch?v=i0m0FBD-McY


