Title: Effective Remote C++ Development with Codespaces - Nick Uhlenhuth - CppCon 2020
Publication date: 2020-09-28
Playlist: CppCon 2020 Day 3
Description: 
	https://cppcon.org/
https://github.com/CppCon/CppCon2020
---
The rise of remote work and the growth of team sizes present a challenge for C++ developers. Many C++ projects have complex hardware and software requirements, making onboarding of new team members and productive coding from home harder than they need to be. We need tools to ease configuration of your team's development environments and grant them access to the processing power they need from wherever they are in the world.

This presentation will show how Codespaces can use the power and flexibility of the cloud to address these issues. Codespaces give you the ability to quickly create a managed online development environment specific to your project that you can access from anywhere. We'll look at the problems which hit C++ developers particularly hard, like long build times and dependency management. Finally, we'll show the tool in action to give you a feel for how your teams could leverage it, and more broadly get you to think about what parts of your team's development process can be streamlined.

---
Nick Uhlenhuth
Program Manager, Microsoft

---
Streamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:09,200 --> 00:00:14,160
hey everyone welcome to cppcon 2020.

00:00:12,080 --> 00:00:16,480
i hope the conference has been going

00:00:14,160 --> 00:00:17,520
really well for you so far before i dive

00:00:16,480 --> 00:00:18,800
into my talk

00:00:17,520 --> 00:00:20,800
i do want to just cover a couple

00:00:18,800 --> 00:00:21,199
announcements so one i have a link to

00:00:20,800 --> 00:00:23,359
our

00:00:21,199 --> 00:00:24,800
expo hall where you can meet the

00:00:23,359 --> 00:00:26,320
microsoft sequels plus team

00:00:24,800 --> 00:00:27,680
and we're going to be there to answer

00:00:26,320 --> 00:00:28,880
any questions you have about any

00:00:27,680 --> 00:00:30,320
announcements you've heard

00:00:28,880 --> 00:00:31,920
throughout the week or if there's

00:00:30,320 --> 00:00:33,920
anything from my talk that maybe you

00:00:31,920 --> 00:00:35,920
didn't get a chance to ask at the end

00:00:33,920 --> 00:00:37,520
this is a great spot to follow up on

00:00:35,920 --> 00:00:39,040
that lastly

00:00:37,520 --> 00:00:40,559
down at the bottom you can take our

00:00:39,040 --> 00:00:42,079
survey and if you do

00:00:40,559 --> 00:00:44,480
you'll get a chance to win a copy of

00:00:42,079 --> 00:00:45,200
microsoft flight simulator which looks

00:00:44,480 --> 00:00:47,920
awesome

00:00:45,200 --> 00:00:49,280
so i highly recommend filling that out

00:00:47,920 --> 00:00:51,039
and

00:00:49,280 --> 00:00:52,640
that way we can also learn more about

00:00:51,039 --> 00:00:55,039
your development experience and

00:00:52,640 --> 00:00:56,960
keep creating awesome products for you

00:00:55,039 --> 00:00:59,760
so with the announcements out of the way

00:00:56,960 --> 00:01:00,800
let's dive into the talk this is a talk

00:00:59,760 --> 00:01:03,840
about

00:01:00,800 --> 00:01:06,240
code spaces and specifically

00:01:03,840 --> 00:01:07,200
it's looking at code spaces as a way to

00:01:06,240 --> 00:01:09,680
address

00:01:07,200 --> 00:01:11,280
remote work because obviously in the

00:01:09,680 --> 00:01:13,040
times that we're in right now

00:01:11,280 --> 00:01:15,119
a lot of people who used to work in an

00:01:13,040 --> 00:01:17,680
office are now working remotely

00:01:15,119 --> 00:01:19,040
and there's obviously a bunch of

00:01:17,680 --> 00:01:21,119
challenges that arise

00:01:19,040 --> 00:01:22,880
because of that now i'm going to be

00:01:21,119 --> 00:01:23,280
covering ways code spaces can alleviate

00:01:22,880 --> 00:01:25,280
that

00:01:23,280 --> 00:01:27,520
but then also just in general even

00:01:25,280 --> 00:01:28,640
without this remote work context how

00:01:27,520 --> 00:01:30,640
code spaces can

00:01:28,640 --> 00:01:31,680
be really helpful with your development

00:01:30,640 --> 00:01:34,079
so

00:01:31,680 --> 00:01:34,799
let's first take a look at a couple

00:01:34,079 --> 00:01:38,079
problems

00:01:34,799 --> 00:01:39,520
so when you first start working remotely

00:01:38,079 --> 00:01:41,280
i've sort of separated these problems

00:01:39,520 --> 00:01:42,720
into short term and long term short term

00:01:41,280 --> 00:01:44,399
you're working remotely

00:01:42,720 --> 00:01:46,240
one of the first things you may notice

00:01:44,399 --> 00:01:48,079
is that you could have

00:01:46,240 --> 00:01:50,320
underpowered hardware maybe you had a

00:01:48,079 --> 00:01:52,079
really beefy desktop machine at work

00:01:50,320 --> 00:01:53,520
and you no longer have it now that

00:01:52,079 --> 00:01:55,040
you're working from home perhaps you're

00:01:53,520 --> 00:01:58,399
on a laptop or a less

00:01:55,040 --> 00:01:58,640
beefy desktop machine and especially for

00:01:58,399 --> 00:02:02,240
c

00:01:58,640 --> 00:02:05,520
plus plus we have very large build times

00:02:02,240 --> 00:02:07,280
and so if you're operating on even

00:02:05,520 --> 00:02:08,720
lesser hardware than you're used to

00:02:07,280 --> 00:02:10,000
those build times are going to be even

00:02:08,720 --> 00:02:11,599
more exaggerated

00:02:10,000 --> 00:02:13,440
so we're going to see how code spaces

00:02:11,599 --> 00:02:16,640
can alleviate some of that

00:02:13,440 --> 00:02:17,680
and then also i think that the trend of

00:02:16,640 --> 00:02:19,680
working from home

00:02:17,680 --> 00:02:22,080
is actually going to continue for quite

00:02:19,680 --> 00:02:24,959
some time and so

00:02:22,080 --> 00:02:26,239
in this new world where remote work is a

00:02:24,959 --> 00:02:27,920
possibility

00:02:26,239 --> 00:02:29,280
there are some longer term challenges

00:02:27,920 --> 00:02:31,040
that could arise so

00:02:29,280 --> 00:02:32,959
one onboarding new team members a great

00:02:31,040 --> 00:02:33,760
thing about having a team that can have

00:02:32,959 --> 00:02:35,680
remote work

00:02:33,760 --> 00:02:36,800
is that you have a vast pool of people

00:02:35,680 --> 00:02:38,000
you can pull from now

00:02:36,800 --> 00:02:40,000
and they can be in all sorts of

00:02:38,000 --> 00:02:41,680
different locations but that can make

00:02:40,000 --> 00:02:43,200
onboarding them to your code base a bit

00:02:41,680 --> 00:02:45,920
more challenging

00:02:43,200 --> 00:02:46,480
and then lastly as you work from home

00:02:45,920 --> 00:02:49,440
for

00:02:46,480 --> 00:02:51,280
longer and longer periods of time you

00:02:49,440 --> 00:02:53,200
may want to

00:02:51,280 --> 00:02:54,319
use that flexibility to jump around a

00:02:53,200 --> 00:02:55,840
bit and so

00:02:54,319 --> 00:02:58,000
as you're moving around maybe you can't

00:02:55,840 --> 00:03:00,879
bring your desktop with you

00:02:58,000 --> 00:03:01,120
and so you need this you have this issue

00:03:00,879 --> 00:03:03,200
of

00:03:01,120 --> 00:03:05,200
access you want to be able to access

00:03:03,200 --> 00:03:05,599
your code from whatever device you may

00:03:05,200 --> 00:03:07,120
be

00:03:05,599 --> 00:03:09,040
even if it's not the most powerful so

00:03:07,120 --> 00:03:10,319
we're going to see how code spaces can

00:03:09,040 --> 00:03:12,080
help with that as well

00:03:10,319 --> 00:03:14,239
and to do that we're going to jump into

00:03:12,080 --> 00:03:15,200
a demo i'm going to demo github code

00:03:14,239 --> 00:03:19,920
spaces

00:03:15,200 --> 00:03:22,879
and this is probably the coolest thing

00:03:19,920 --> 00:03:23,519
i've ever demoed i'm super excited about

00:03:22,879 --> 00:03:26,159
this it

00:03:23,519 --> 00:03:26,959
when i first was testing it out it blew

00:03:26,159 --> 00:03:29,360
my mind

00:03:26,959 --> 00:03:30,560
so i hope you really appreciate it and

00:03:29,360 --> 00:03:33,599
with that let's just

00:03:30,560 --> 00:03:35,920
dive right into this demo

00:03:33,599 --> 00:03:37,599
all right so i'm on github.com and i'm

00:03:35,920 --> 00:03:40,480
looking at one of my repositories this

00:03:37,599 --> 00:03:43,040
is a fork that i have of the game 2048

00:03:40,480 --> 00:03:43,840
it's a console implementation of the

00:03:43,040 --> 00:03:46,640
game

00:03:43,840 --> 00:03:48,080
and i've added a file to it which i'll

00:03:46,640 --> 00:03:50,720
talk about a little bit later

00:03:48,080 --> 00:03:52,400
but before i jump into github code

00:03:50,720 --> 00:03:54,239
spaces i do just want to give a little

00:03:52,400 --> 00:03:54,720
bit of context on where i'm coming from

00:03:54,239 --> 00:03:56,879
so

00:03:54,720 --> 00:03:58,640
i've actually demoed this game before

00:03:56,879 --> 00:03:59,360
and i do most of my demos on my laptop

00:03:58,640 --> 00:04:03,360
which i'm on

00:03:59,360 --> 00:04:05,840
right now and to demo anything i usually

00:04:03,360 --> 00:04:07,840
end up having to make some changes to my

00:04:05,840 --> 00:04:09,680
laptop to my local environment i have to

00:04:07,840 --> 00:04:11,360
install certain dependencies

00:04:09,680 --> 00:04:13,040
and then if someone watches one of my

00:04:11,360 --> 00:04:15,439
demos and they want to maybe recreate

00:04:13,040 --> 00:04:17,359
what i did or test out certain features

00:04:15,439 --> 00:04:18,959
or use that code base they have to

00:04:17,359 --> 00:04:20,959
make all those same changes to their

00:04:18,959 --> 00:04:24,320
environment on their end

00:04:20,959 --> 00:04:26,960
but github code spaces really alleviates

00:04:24,320 --> 00:04:28,000
this issue and it's just a matter of

00:04:26,960 --> 00:04:30,080
clicking

00:04:28,000 --> 00:04:31,520
new code space in order for you someone

00:04:30,080 --> 00:04:33,280
to start contributing so let's actually

00:04:31,520 --> 00:04:35,840
take a look if i click code

00:04:33,280 --> 00:04:37,520
open with code spaces i don't have any

00:04:35,840 --> 00:04:39,440
current code space

00:04:37,520 --> 00:04:41,120
all i have to do is click new code space

00:04:39,440 --> 00:04:41,520
and now it's going to initialize it for

00:04:41,120 --> 00:04:44,479
me

00:04:41,520 --> 00:04:46,400
it's going to set up the environment get

00:04:44,479 --> 00:04:49,120
everything i need all the dependencies i

00:04:46,400 --> 00:04:51,280
don't have to worry about a thing

00:04:49,120 --> 00:04:52,560
and i once this loads up and connects

00:04:51,280 --> 00:04:53,280
i'll be able to start contributing and

00:04:52,560 --> 00:04:55,440
anyone

00:04:53,280 --> 00:04:56,639
who has access to that repository could

00:04:55,440 --> 00:04:58,320
do this exact same thing

00:04:56,639 --> 00:04:59,919
you don't need any of the code locally

00:04:58,320 --> 00:05:02,080
even and

00:04:59,919 --> 00:05:05,360
if you'll notice i haven't even left the

00:05:02,080 --> 00:05:08,000
browser yet i'm still in microsoft edge

00:05:05,360 --> 00:05:09,120
and vs code has now loaded in the

00:05:08,000 --> 00:05:12,880
browser

00:05:09,120 --> 00:05:15,199
i don't even need vs code locally so

00:05:12,880 --> 00:05:17,039
anyone who has a browser even can

00:05:15,199 --> 00:05:18,479
connect to your code spade or can create

00:05:17,039 --> 00:05:22,160
a code space and connect to it

00:05:18,479 --> 00:05:24,240
and start contributing which greatly

00:05:22,160 --> 00:05:25,520
increases the flexibility and the ease

00:05:24,240 --> 00:05:27,680
of access and

00:05:25,520 --> 00:05:29,600
the devices that you can use and connect

00:05:27,680 --> 00:05:31,280
from so i'm getting a couple pop-ups on

00:05:29,600 --> 00:05:32,160
the side about wanting to configure my

00:05:31,280 --> 00:05:35,759
project

00:05:32,160 --> 00:05:38,400
yes i do now choose a compiler okay

00:05:35,759 --> 00:05:40,080
and so yes i always want to configure i

00:05:38,400 --> 00:05:43,280
just clicked yes a couple times

00:05:40,080 --> 00:05:45,199
and you can see that i don't want the

00:05:43,280 --> 00:05:47,280
insider stuff right now

00:05:45,199 --> 00:05:49,360
yes i'll allow intellisense to complete

00:05:47,280 --> 00:05:50,720
all right but anyways in the meantime

00:05:49,360 --> 00:05:52,720
i just clicked okay a couple times

00:05:50,720 --> 00:05:55,280
dismissed a few pop-ups but

00:05:52,720 --> 00:05:56,880
you can see that cmake generation is now

00:05:55,280 --> 00:05:58,639
done

00:05:56,880 --> 00:06:01,360
i didn't have to do anything down at the

00:05:58,639 --> 00:06:04,720
bottom i have this cmake tools extension

00:06:01,360 --> 00:06:06,400
which i didn't have that before it just

00:06:04,720 --> 00:06:09,199
got installed for me because

00:06:06,400 --> 00:06:11,360
the repository if we look in this dot

00:06:09,199 --> 00:06:12,720
dot container

00:06:11,360 --> 00:06:15,280
folder right here the step container

00:06:12,720 --> 00:06:16,960
json we can see in this repo it says

00:06:15,280 --> 00:06:18,560
hey i want people to get the cmg tools

00:06:16,960 --> 00:06:19,919
extension

00:06:18,560 --> 00:06:21,840
and the c plus plus intellisense

00:06:19,919 --> 00:06:23,440
extension and

00:06:21,840 --> 00:06:25,520
i want their environment to have a few

00:06:23,440 --> 00:06:28,080
things that i think everybody needs to

00:06:25,520 --> 00:06:31,120
be able to play and contribute with my

00:06:28,080 --> 00:06:32,720
project so like g plus plus gcc rsync

00:06:31,120 --> 00:06:36,000
cmake et cetera

00:06:32,720 --> 00:06:38,000
so with all of that stuff let's just go

00:06:36,000 --> 00:06:41,600
ahead and click build

00:06:38,000 --> 00:06:43,360
build starting everything's happening in

00:06:41,600 --> 00:06:45,759
the cloud

00:06:43,360 --> 00:06:47,360
my i don't even need vs code locally and

00:06:45,759 --> 00:06:49,520
it's done just like that

00:06:47,360 --> 00:06:51,039
i just clicked okay a couple times so i

00:06:49,520 --> 00:06:54,479
literally went

00:06:51,039 --> 00:06:57,919
from clicking create codespace

00:06:54,479 --> 00:07:01,280
on github.com to

00:06:57,919 --> 00:07:04,400
building this project in like 20 seconds

00:07:01,280 --> 00:07:05,840
and i'll even one-up that if i can just

00:07:04,400 --> 00:07:08,240
start debugging boom

00:07:05,840 --> 00:07:10,080
so now within like one minute of

00:07:08,240 --> 00:07:13,120
clicking create code space i'm already

00:07:10,080 --> 00:07:16,160
now debugging this game so let's click

00:07:13,120 --> 00:07:18,960
one and then four to get a board size

00:07:16,160 --> 00:07:19,440
and i can start playing the game so now

00:07:18,960 --> 00:07:22,560
i'm

00:07:19,440 --> 00:07:25,599
debugging the 2048 game

00:07:22,560 --> 00:07:26,479
in the browser with just a couple clicks

00:07:25,599 --> 00:07:27,919
of okay

00:07:26,479 --> 00:07:29,599
and i don't have to do any configuration

00:07:27,919 --> 00:07:30,160
so anyone who has access to that

00:07:29,599 --> 00:07:32,960
repository

00:07:30,160 --> 00:07:34,080
can do the same thing so i just think

00:07:32,960 --> 00:07:36,319
that that's

00:07:34,080 --> 00:07:38,080
this still blows my mind i hope you all

00:07:36,319 --> 00:07:40,080
are super excited about it

00:07:38,080 --> 00:07:41,840
and i'm going to go ahead and switch

00:07:40,080 --> 00:07:43,360
over to the slide where we can where i'm

00:07:41,840 --> 00:07:44,960
going to show you a link of where you

00:07:43,360 --> 00:07:48,240
can sign up to get into this

00:07:44,960 --> 00:07:49,759
public data all right so in blue text

00:07:48,240 --> 00:07:51,440
here i've highlighted

00:07:49,759 --> 00:07:53,440
some of the ways that codespaces

00:07:51,440 --> 00:07:54,319
alleviates these problems that i had

00:07:53,440 --> 00:07:56,720
listed earlier

00:07:54,319 --> 00:07:58,000
so for underpowered hardware well with

00:07:56,720 --> 00:08:00,080
codespaces your development

00:07:58,000 --> 00:08:01,039
environment is in the cloud and the

00:08:00,080 --> 00:08:02,960
compute runs

00:08:01,039 --> 00:08:04,080
in the cloud and it's all offloaded from

00:08:02,960 --> 00:08:06,560
your local machine

00:08:04,080 --> 00:08:07,919
so your local hardware isn't nearly as

00:08:06,560 --> 00:08:11,039
important anymore

00:08:07,919 --> 00:08:12,319
then when we look at access well all you

00:08:11,039 --> 00:08:14,319
need is a browser

00:08:12,319 --> 00:08:15,599
you don't even need visual studio code

00:08:14,319 --> 00:08:17,520
locally you can just

00:08:15,599 --> 00:08:19,039
open up your browser and connect to your

00:08:17,520 --> 00:08:21,039
code space from there

00:08:19,039 --> 00:08:22,720
and then if we combine the fact that

00:08:21,039 --> 00:08:24,400
we're offloading compute

00:08:22,720 --> 00:08:27,120
and we only need to support a browser

00:08:24,400 --> 00:08:30,639
locally that means we can connect

00:08:27,120 --> 00:08:33,519
to our code base and our code space from

00:08:30,639 --> 00:08:35,519
a huge variety of devices now a tablet

00:08:33,519 --> 00:08:37,839
becomes a feasible device to

00:08:35,519 --> 00:08:38,560
contribute to a code base you could even

00:08:37,839 --> 00:08:41,680
in a pitch

00:08:38,560 --> 00:08:42,320
connect from your phone lastly we looked

00:08:41,680 --> 00:08:44,399
at

00:08:42,320 --> 00:08:46,240
the value prop of being able to

00:08:44,399 --> 00:08:47,920
automatically configure your environment

00:08:46,240 --> 00:08:49,760
so if you have new team members or maybe

00:08:47,920 --> 00:08:50,320
you're you've got an open source project

00:08:49,760 --> 00:08:52,160
and you want

00:08:50,320 --> 00:08:54,240
contributors to be able to very quickly

00:08:52,160 --> 00:08:56,160
onboard well with code spaces

00:08:54,240 --> 00:08:57,839
all they click is new code space and all

00:08:56,160 --> 00:08:58,880
the environment configuration is done

00:08:57,839 --> 00:09:00,880
automatically

00:08:58,880 --> 00:09:02,080
and they can create their own code space

00:09:00,880 --> 00:09:04,880
from your repository

00:09:02,080 --> 00:09:05,839
in just a matter of minutes so i showed

00:09:04,880 --> 00:09:08,080
connecting to

00:09:05,839 --> 00:09:08,959
the github code space with vs code in

00:09:08,080 --> 00:09:10,959
the browser

00:09:08,959 --> 00:09:12,160
you can also connect to it from vs code

00:09:10,959 --> 00:09:14,080
in the public beta

00:09:12,160 --> 00:09:15,680
and like i said here's the link to that

00:09:14,080 --> 00:09:18,959
you can just go there

00:09:15,680 --> 00:09:19,440
maybe take a screen grab or whatever of

00:09:18,959 --> 00:09:21,600
this

00:09:19,440 --> 00:09:22,800
slide here and go to that link and get

00:09:21,600 --> 00:09:26,000
yourself signed up

00:09:22,800 --> 00:09:28,959
and you can check it out but

00:09:26,000 --> 00:09:30,720
some of you might be thinking what if i

00:09:28,959 --> 00:09:32,399
don't use vs code

00:09:30,720 --> 00:09:35,200
what if i'm more of a visual studio

00:09:32,399 --> 00:09:38,080
person well i'm glad you asked

00:09:35,200 --> 00:09:38,720
because we now have an exciting new

00:09:38,080 --> 00:09:40,640
announcement

00:09:38,720 --> 00:09:42,959
of visual studio support for github code

00:09:40,640 --> 00:09:43,760
spaces i'm going to show you a demo of

00:09:42,959 --> 00:09:46,000
it

00:09:43,760 --> 00:09:48,160
you can sign up at that same link that i

00:09:46,000 --> 00:09:50,160
have on the previous slide

00:09:48,160 --> 00:09:52,160
and that will put you in a wait list to

00:09:50,160 --> 00:09:54,800
get into this visual studio support

00:09:52,160 --> 00:09:56,480
um but for now let's dive into a demo of

00:09:54,800 --> 00:09:58,880
visual studio support for github code

00:09:56,480 --> 00:09:58,880
spaces

00:09:59,040 --> 00:10:02,160
all right so i've opened up visual

00:10:00,480 --> 00:10:04,240
studio 2019

00:10:02,160 --> 00:10:06,000
and you'll notice that there's a new tab

00:10:04,240 --> 00:10:07,040
in the top here called connect to a code

00:10:06,000 --> 00:10:09,600
space

00:10:07,040 --> 00:10:10,640
and if i go ahead and click on that it's

00:10:09,600 --> 00:10:12,640
going to

00:10:10,640 --> 00:10:13,760
load up my github account here which

00:10:12,640 --> 00:10:15,519
i've specified

00:10:13,760 --> 00:10:17,279
and it's going to list out any code

00:10:15,519 --> 00:10:19,040
spaces that i currently have

00:10:17,279 --> 00:10:20,720
i don't have any right now so it's

00:10:19,040 --> 00:10:22,720
prompting me to create a new one

00:10:20,720 --> 00:10:24,640
and all you have to do is just paste in

00:10:22,720 --> 00:10:26,640
the link to a github repository

00:10:24,640 --> 00:10:27,680
in this case i'm going to use the game

00:10:26,640 --> 00:10:29,600
00:10:27,680 --> 00:10:31,600
this is a fork that i have of that

00:10:29,600 --> 00:10:33,680
project and you can also choose

00:10:31,600 --> 00:10:34,959
your instance type here so in this case

00:10:33,680 --> 00:10:37,519
i'm using an eight core

00:10:34,959 --> 00:10:38,560
16 gigabyte ram machine to power my code

00:10:37,519 --> 00:10:40,560
space

00:10:38,560 --> 00:10:42,880
but you could select whatever power you

00:10:40,560 --> 00:10:44,880
feel is necessary for that online

00:10:42,880 --> 00:10:46,240
development environment hosted in the

00:10:44,880 --> 00:10:48,959
cloud

00:10:46,240 --> 00:10:50,160
lastly you can specify a suspension time

00:10:48,959 --> 00:10:52,000
so

00:10:50,160 --> 00:10:54,000
if i want my code base to suspend after

00:10:52,000 --> 00:10:55,519
two hours i can do that but

00:10:54,000 --> 00:10:57,920
choose whatever time best fits your

00:10:55,519 --> 00:11:00,000
needs and that plays more into a

00:10:57,920 --> 00:11:01,360
pay for what you use kind of a model pay

00:11:00,000 --> 00:11:03,440
for what you need

00:11:01,360 --> 00:11:06,320
so with that let's go ahead and just

00:11:03,440 --> 00:11:06,320
create our code space

00:11:08,160 --> 00:11:11,279
all right so this has opened up visual

00:11:09,920 --> 00:11:13,120
studio 2019

00:11:11,279 --> 00:11:15,040
and you can see that the code space is

00:11:13,120 --> 00:11:17,680
being initialized right now so

00:11:15,040 --> 00:11:19,200
what that means is that the repository

00:11:17,680 --> 00:11:22,000
is getting cloned

00:11:19,200 --> 00:11:23,839
and that online development environment

00:11:22,000 --> 00:11:25,440
is being configured for me

00:11:23,839 --> 00:11:27,440
based on some specifications in the

00:11:25,440 --> 00:11:29,519
repository

00:11:27,440 --> 00:11:31,200
right now i'm connecting to the code

00:11:29,519 --> 00:11:32,640
space but while that's happening

00:11:31,200 --> 00:11:34,560
i want to explain a little bit about

00:11:32,640 --> 00:11:37,279
what we're seeing so this is the

00:11:34,560 --> 00:11:40,079
familiar visual studio 2019 ui

00:11:37,279 --> 00:11:42,000
and my laptop here is responsible for

00:11:40,079 --> 00:11:44,160
powering that ui

00:11:42,000 --> 00:11:46,720
but everything else all the other

00:11:44,160 --> 00:11:49,600
compute heavy tasks are offloaded

00:11:46,720 --> 00:11:50,240
from my machine to my code space so

00:11:49,600 --> 00:11:51,839
whatever

00:11:50,240 --> 00:11:53,279
cloud cores i have are going to be

00:11:51,839 --> 00:11:55,279
responsible for doing the bulk of the

00:11:53,279 --> 00:11:58,480
heavy lifting here which is really nice

00:11:55,279 --> 00:12:00,079
because that frees up my local machine

00:11:58,480 --> 00:12:01,519
and so you can see now the solution

00:12:00,079 --> 00:12:04,079
explorer is populated

00:12:01,519 --> 00:12:05,440
and this is a cmake project you can see

00:12:04,079 --> 00:12:08,399
that there's a cmakelist

00:12:05,440 --> 00:12:10,720
txt right there and so if we swing over

00:12:08,399 --> 00:12:13,120
to the cmg output we can see that

00:12:10,720 --> 00:12:14,160
cmake generation automatically ran and

00:12:13,120 --> 00:12:17,279
has finished

00:12:14,160 --> 00:12:17,680
successfully so before i do anything

00:12:17,279 --> 00:12:20,959
else

00:12:17,680 --> 00:12:24,079
let's just go ahead and build again

00:12:20,959 --> 00:12:26,079
i haven't done anything yet i haven't

00:12:24,079 --> 00:12:28,399
configured anything at all this was all

00:12:26,079 --> 00:12:29,200
done for me by code spaces and the build

00:12:28,399 --> 00:12:31,279
has succeeded

00:12:29,200 --> 00:12:33,120
so i've already built targeting windows

00:12:31,279 --> 00:12:34,800
didn't have to do anything except for

00:12:33,120 --> 00:12:37,200
paste a github repository into

00:12:34,800 --> 00:12:38,399
codespaces and i was already ready to go

00:12:37,200 --> 00:12:41,920
i've already built and i can

00:12:38,399 --> 00:12:46,160
start contributing but

00:12:41,920 --> 00:12:47,920
this is a cross-platform code base so

00:12:46,160 --> 00:12:50,959
what about linux how can codespaces help

00:12:47,920 --> 00:12:53,279
me there well we recently added this

00:12:50,959 --> 00:12:54,720
awesome new feature here so if i go to

00:12:53,279 --> 00:12:57,200
the output

00:12:54,720 --> 00:12:59,440
and click the code spaces wsl

00:12:57,200 --> 00:13:01,279
provisioning log we can actually see

00:12:59,440 --> 00:13:04,839
it's successfully provisioned wsl and

00:13:01,279 --> 00:13:08,959
it's got this version of ubuntu 20.04

00:13:04,839 --> 00:13:12,079
whoops 2004 and so in this configuration

00:13:08,959 --> 00:13:14,800
drop down i also have a wsl

00:13:12,079 --> 00:13:16,079
linux debug configuration ready to go

00:13:14,800 --> 00:13:19,440
ready to be targeted

00:13:16,079 --> 00:13:22,560
and if i look at the cmake output now

00:13:19,440 --> 00:13:24,480
you can see cma generation is

00:13:22,560 --> 00:13:26,560
now starting for targeting this

00:13:24,480 --> 00:13:30,480
configuration i didn't do anything

00:13:26,560 --> 00:13:32,720
my wsl linux environment is configured

00:13:30,480 --> 00:13:34,079
ready for me to build on it uh once this

00:13:32,720 --> 00:13:35,680
finishes so here we go the scenic

00:13:34,079 --> 00:13:38,720
generation has finished

00:13:35,680 --> 00:13:41,120
and we should be good to go to build so

00:13:38,720 --> 00:13:42,000
once again i've just clicked build a

00:13:41,120 --> 00:13:44,480
couple times

00:13:42,000 --> 00:13:45,040
didn't have to do anything else and this

00:13:44,480 --> 00:13:48,480
should

00:13:45,040 --> 00:13:51,920
hopefully work if all goes smoothly so

00:13:48,480 --> 00:13:55,600
here it goes building very fast built

00:13:51,920 --> 00:13:58,000
so in just a matter of a couple minutes

00:13:55,600 --> 00:13:59,040
i went from pasting in a github

00:13:58,000 --> 00:14:00,800
repository

00:13:59,040 --> 00:14:02,160
to building that code base targeting

00:14:00,800 --> 00:14:06,000
windows and building it

00:14:02,160 --> 00:14:08,720
targeting linux that's pretty awesome

00:14:06,000 --> 00:14:09,360
and so how did i get this environment

00:14:08,720 --> 00:14:13,199
configured

00:14:09,360 --> 00:14:15,120
well if i go into this devnet json file

00:14:13,199 --> 00:14:16,639
this is where i specify some of the

00:14:15,120 --> 00:14:18,959
configurations that i want

00:14:16,639 --> 00:14:20,160
so you can see i told it to use a wsl

00:14:18,959 --> 00:14:23,519
install tool

00:14:20,160 --> 00:14:25,519
and i said hey anyone who creates a code

00:14:23,519 --> 00:14:26,480
space based on this repository

00:14:25,519 --> 00:14:29,600
they should get these things

00:14:26,480 --> 00:14:31,600
automatically installed on wsl

00:14:29,600 --> 00:14:33,279
so for example rsync is getting

00:14:31,600 --> 00:14:35,199
installed and so when we looked at

00:14:33,279 --> 00:14:36,560
the cmake output we could see rsync is

00:14:35,199 --> 00:14:39,519
being used to copy files

00:14:36,560 --> 00:14:40,639
so me as the new user onboarding to this

00:14:39,519 --> 00:14:42,240
code base

00:14:40,639 --> 00:14:43,920
i didn't have to worry about any of that

00:14:42,240 --> 00:14:46,160
it all just happened

00:14:43,920 --> 00:14:49,199
because of the way code spaces works and

00:14:46,160 --> 00:14:51,199
this particular devnet json file

00:14:49,199 --> 00:14:52,639
so that's super nice and i could

00:14:51,199 --> 00:14:55,360
obviously go

00:14:52,639 --> 00:14:57,199
jump into one of these files by just

00:14:55,360 --> 00:14:58,959
clicking it in the solution explorer

00:14:57,199 --> 00:15:00,959
but well first of all let me switch back

00:14:58,959 --> 00:15:03,120
to windows but

00:15:00,959 --> 00:15:05,199
i want to show you that your normal

00:15:03,120 --> 00:15:07,519
navigation feature still exists in code

00:15:05,199 --> 00:15:10,160
spaces as you would expect so

00:15:07,519 --> 00:15:11,839
i like to show control t in pretty much

00:15:10,160 --> 00:15:13,440
every demo that i do because i found

00:15:11,839 --> 00:15:16,320
that a lot of people don't know about it

00:15:13,440 --> 00:15:17,199
and when they do it's like a huge

00:15:16,320 --> 00:15:19,680
revelation

00:15:17,199 --> 00:15:21,760
so i love showing it up in the top here

00:15:19,680 --> 00:15:23,760
so again you get to this by doing ctrl t

00:15:21,760 --> 00:15:25,199
or control comma and up in the top

00:15:23,760 --> 00:15:27,360
there's various different buttons that

00:15:25,199 --> 00:15:30,560
you can click to filter your search

00:15:27,360 --> 00:15:32,000
but an even faster way is if i just

00:15:30,560 --> 00:15:33,680
prepend my search with one of these

00:15:32,000 --> 00:15:34,959
letters so if i'm looking for just files

00:15:33,680 --> 00:15:36,560
i can just type an f

00:15:34,959 --> 00:15:38,079
so in this case i'm looking for a file

00:15:36,560 --> 00:15:40,399
that has the word

00:15:38,079 --> 00:15:41,680
input in it and so we can see the

00:15:40,399 --> 00:15:43,519
results and i'll just

00:15:41,680 --> 00:15:45,360
jump into the game input cpp file just

00:15:43,519 --> 00:15:46,320
like that and that the search results

00:15:45,360 --> 00:15:50,240
only showed me

00:15:46,320 --> 00:15:52,560
files so it's super handy okay

00:15:50,240 --> 00:15:54,320
in this file we can see that we now have

00:15:52,560 --> 00:15:56,240
semantic colorization when i had

00:15:54,320 --> 00:15:58,480
previously shown code spaces with

00:15:56,240 --> 00:16:00,399
visual studio we didn't have that yet

00:15:58,480 --> 00:16:03,519
but now we do so that's awesome

00:16:00,399 --> 00:16:06,959
and if i use control g i can actually go

00:16:03,519 --> 00:16:10,160
jump down to a line line 52 and

00:16:06,959 --> 00:16:13,040
uh oops accidentally scrolled up

00:16:10,160 --> 00:16:15,440
sorry uh we'll go to line 52 and we can

00:16:13,040 --> 00:16:16,800
just put a break point here

00:16:15,440 --> 00:16:18,800
and i'm putting a break point in this

00:16:16,800 --> 00:16:21,040
part of the code because this is where

00:16:18,800 --> 00:16:22,000
the decision process happens in 2048

00:16:21,040 --> 00:16:25,120
when i'm typing

00:16:22,000 --> 00:16:27,279
w a s or d which are essentially like

00:16:25,120 --> 00:16:28,959
the arrow keys up down left right

00:16:27,279 --> 00:16:30,959
and based on what i type it should put

00:16:28,959 --> 00:16:32,480
me into one of these different cases

00:16:30,959 --> 00:16:34,320
so we should hopefully hit this break

00:16:32,480 --> 00:16:37,519
point let's

00:16:34,320 --> 00:16:39,759
go ahead and pick our target and debug

00:16:37,519 --> 00:16:39,759
this

00:16:40,320 --> 00:16:43,839
obviously the build succeeded because i

00:16:42,320 --> 00:16:44,880
just built it so it'll just throw us

00:16:43,839 --> 00:16:47,680
right into this

00:16:44,880 --> 00:16:47,680
debug session

00:16:48,839 --> 00:16:53,279
and boom

00:16:51,279 --> 00:16:55,519
here's our console it's a console

00:16:53,279 --> 00:16:57,199
implementation of 2048

00:16:55,519 --> 00:16:58,880
and what i want to point out here though

00:16:57,199 --> 00:16:59,759
is see this cursor that's sort of

00:16:58,880 --> 00:17:02,000
following mine

00:16:59,759 --> 00:17:03,040
that's because this console is actually

00:17:02,000 --> 00:17:06,640
being

00:17:03,040 --> 00:17:07,839
app cast from my code space to my local

00:17:06,640 --> 00:17:09,360
machine so that i'm able to actually

00:17:07,839 --> 00:17:11,280
interact with it here

00:17:09,360 --> 00:17:13,600
so for example we can click one to start

00:17:11,280 --> 00:17:16,640
the game and then choose a board size

00:17:13,600 --> 00:17:18,240
and now we're in the game 2048 and again

00:17:16,640 --> 00:17:19,039
this is all just being cast to my local

00:17:18,240 --> 00:17:21,360
machine

00:17:19,039 --> 00:17:22,160
the debugging compute and everything is

00:17:21,360 --> 00:17:24,559
happening

00:17:22,160 --> 00:17:25,280
in my code space freeing up my local

00:17:24,559 --> 00:17:28,079
cores so

00:17:25,280 --> 00:17:28,880
let's type a d lowercase d right here

00:17:28,079 --> 00:17:30,240
click enter

00:17:28,880 --> 00:17:32,000
that should move all the numbers to the

00:17:30,240 --> 00:17:33,120
right but obviously first we're going to

00:17:32,000 --> 00:17:35,840
hit this break point

00:17:33,120 --> 00:17:37,440
where this decision process is happening

00:17:35,840 --> 00:17:39,280
if i look in my locals window which is

00:17:37,440 --> 00:17:41,280
available here in codespaces

00:17:39,280 --> 00:17:43,200
just as you would expect we can see that

00:17:41,280 --> 00:17:46,960
the value of c which is my input

00:17:43,200 --> 00:17:49,600
is this d but i do also want to show

00:17:46,960 --> 00:17:50,080
that i can hover over c and i can

00:17:49,600 --> 00:17:52,880
actually

00:17:50,080 --> 00:17:53,760
pin this data tooltip it's a pretty nice

00:17:52,880 --> 00:17:55,679
feature and

00:17:53,760 --> 00:17:57,520
if you want to move it you can move it

00:17:55,679 --> 00:17:59,440
so get it out of the way your code and

00:17:57,520 --> 00:18:01,840
it'll stay there

00:17:59,440 --> 00:18:03,440
and so i've actually pinned this value

00:18:01,840 --> 00:18:04,559
and

00:18:03,440 --> 00:18:07,039
i said i should move to the right

00:18:04,559 --> 00:18:08,880
because that's a d and so let's

00:18:07,039 --> 00:18:11,039
go ahead and continue and see what

00:18:08,880 --> 00:18:14,799
happens let me

00:18:11,039 --> 00:18:17,840
open our app back up uh invalid input

00:18:14,799 --> 00:18:19,600
please try again okay so

00:18:17,840 --> 00:18:21,039
we're having some sort of issue here and

00:18:19,600 --> 00:18:21,919
what's actually pretty nifty about these

00:18:21,039 --> 00:18:23,520
tooltips is

00:18:21,919 --> 00:18:25,440
if i want i can type a comment in here

00:18:23,520 --> 00:18:28,080
too i can say like oops

00:18:25,440 --> 00:18:29,600
invalid input and

00:18:28,080 --> 00:18:31,520
[Music]

00:18:29,600 --> 00:18:33,200
you know i'm thinking maybe it's because

00:18:31,520 --> 00:18:34,480
it needs to be uppercase so

00:18:33,200 --> 00:18:36,559
go ahead and put that in my comment as

00:18:34,480 --> 00:18:38,400
well but let's

00:18:36,559 --> 00:18:40,880
stop the debugging session and see if we

00:18:38,400 --> 00:18:43,440
can actually fix this problem

00:18:40,880 --> 00:18:44,880
d should not be an invalid input so i

00:18:43,440 --> 00:18:46,320
said it should move right so let's

00:18:44,880 --> 00:18:48,240
take a look at this we can pick the

00:18:46,320 --> 00:18:51,600
definition

00:18:48,240 --> 00:18:54,080
and looks like oh the value

00:18:51,600 --> 00:18:55,520
oops i'm sorry the value of that is

00:18:54,080 --> 00:18:59,440
capital d

00:18:55,520 --> 00:18:59,440
and what did i type

00:18:59,520 --> 00:19:05,120
so super nifty feature i forgot what

00:19:03,039 --> 00:19:07,120
what value i had in my debugging session

00:19:05,120 --> 00:19:08,240
but i pinned it and if you look in the

00:19:07,120 --> 00:19:10,720
margin here

00:19:08,240 --> 00:19:12,000
if i hover over that pin it actually

00:19:10,720 --> 00:19:14,080
shows me

00:19:12,000 --> 00:19:15,360
the value from my debugging session and

00:19:14,080 --> 00:19:16,080
it even shows that comment that i had

00:19:15,360 --> 00:19:18,799
written there

00:19:16,080 --> 00:19:20,400
so i can see oh i typed a lowercase d

00:19:18,799 --> 00:19:21,760
let's address that so instead of just

00:19:20,400 --> 00:19:23,360
switching on the user's input

00:19:21,760 --> 00:19:25,840
let's make it so they are allowed to

00:19:23,360 --> 00:19:29,360
type uppercase or lowercase unless just

00:19:25,840 --> 00:19:30,400
two upper that save it and we should be

00:19:29,360 --> 00:19:32,480
good to go now

00:19:30,400 --> 00:19:35,039
so now when i run this game i should be

00:19:32,480 --> 00:19:39,120
able to use lowercase wasd keys

00:19:35,039 --> 00:19:40,720
without it causing any sort of an issue

00:19:39,120 --> 00:19:42,160
so once again this is being cast and

00:19:40,720 --> 00:19:45,600
i'll just quickly get us

00:19:42,160 --> 00:19:47,280
back into the game board state and now

00:19:45,600 --> 00:19:50,960
if i type like a

00:19:47,280 --> 00:19:52,640
lowercase d it'll oh

00:19:50,960 --> 00:19:54,080
whoops it'll hit the break point because

00:19:52,640 --> 00:19:55,840
i've got to get rid of that let's

00:19:54,080 --> 00:19:58,240
continue

00:19:55,840 --> 00:20:00,559
so move everything to the right and i

00:19:58,240 --> 00:20:02,080
can just keep using the wasd keys and

00:20:00,559 --> 00:20:04,840
everything's working as expected

00:20:02,080 --> 00:20:07,039
and we're playing the game 2048 in

00:20:04,840 --> 00:20:10,640
codespaces and it's all working

00:20:07,039 --> 00:20:12,880
very nicely sweet so let's

00:20:10,640 --> 00:20:15,200
exit that debug session for now and now

00:20:12,880 --> 00:20:17,520
that we've addressed that error

00:20:15,200 --> 00:20:19,360
let's suppose i want to keep coding you

00:20:17,520 --> 00:20:20,240
can see i'm in my windows configuration

00:20:19,360 --> 00:20:23,120
right now

00:20:20,240 --> 00:20:25,600
and maybe i want to jump into like

00:20:23,120 --> 00:20:27,120
gamecpd

00:20:25,600 --> 00:20:28,799
in this file we see that there is a lot

00:20:27,120 --> 00:20:29,520
of different pound includes up at the

00:20:28,799 --> 00:20:31,919
top here

00:20:29,520 --> 00:20:32,960
and i'm in my windows configuration

00:20:31,919 --> 00:20:35,039
maybe i'm

00:20:32,960 --> 00:20:36,159
in a windows mindset right now even

00:20:35,039 --> 00:20:37,520
though this is a cross-platform

00:20:36,159 --> 00:20:40,640
repository

00:20:37,520 --> 00:20:44,559
i'm perhaps not thinking about it

00:20:40,640 --> 00:20:47,600
so i do something like windows.h

00:20:44,559 --> 00:20:50,640
windows.h and what you'll notice

00:20:47,600 --> 00:20:52,000
is i now have a purple squiggle under

00:20:50,640 --> 00:20:55,120
this pound included and it's

00:20:52,000 --> 00:20:55,919
it's saying hey you're writing a cross

00:20:55,120 --> 00:20:58,720
platform

00:20:55,919 --> 00:21:00,480
application like pay attention wsl

00:20:58,720 --> 00:21:01,919
doesn't know about windows.h this linux

00:21:00,480 --> 00:21:02,240
debug configuration doesn't know about

00:21:01,919 --> 00:21:04,480
that

00:21:02,240 --> 00:21:05,440
so this would be a build error for that

00:21:04,480 --> 00:21:07,919
and

00:21:05,440 --> 00:21:09,600
to get this i didn't even have to build

00:21:07,919 --> 00:21:11,600
all i had was this

00:21:09,600 --> 00:21:13,520
wsl configuration here that visual

00:21:11,600 --> 00:21:14,000
studio knows about and so it's reminding

00:21:13,520 --> 00:21:15,520
me

00:21:14,000 --> 00:21:17,200
to remember that i'm doing this

00:21:15,520 --> 00:21:19,360
cross-platform work

00:21:17,200 --> 00:21:21,200
and so in real time as i'm editing my

00:21:19,360 --> 00:21:22,480
code like this i can be conscious of

00:21:21,200 --> 00:21:23,280
that and make sure that i'm doing the

00:21:22,480 --> 00:21:27,200
right things

00:21:23,280 --> 00:21:29,679
and in code spaces i don't even have to

00:21:27,200 --> 00:21:30,720
do any of that provisioning myself right

00:21:29,679 --> 00:21:32,799
like wsl got

00:21:30,720 --> 00:21:34,080
automatically provisioned for me so i'm

00:21:32,799 --> 00:21:35,840
getting this platform-specific

00:21:34,080 --> 00:21:37,840
intellisense essentially for free

00:21:35,840 --> 00:21:39,360
i'd have to do any extra manual steps

00:21:37,840 --> 00:21:42,480
i've shown this before

00:21:39,360 --> 00:21:44,960
on local visual studio and i had to

00:21:42,480 --> 00:21:46,720
set up the connection to wsl or to a

00:21:44,960 --> 00:21:48,640
remote linux environment

00:21:46,720 --> 00:21:50,320
on my own but codespaces handles all of

00:21:48,640 --> 00:21:52,720
that for you it already

00:21:50,320 --> 00:21:53,919
creates that connection that wsl

00:21:52,720 --> 00:21:55,679
configuration for you

00:21:53,919 --> 00:21:57,360
and so if i were to switch to that then

00:21:55,679 --> 00:21:58,320
as you would expect that squiggle turns

00:21:57,360 --> 00:22:00,400
to red because

00:21:58,320 --> 00:22:02,159
now with my active configuration which

00:22:00,400 --> 00:22:04,880
is the linux debug

00:22:02,159 --> 00:22:05,760
this would actually be an error so it

00:22:04,880 --> 00:22:08,799
turns red

00:22:05,760 --> 00:22:11,200
awesome so that's how code spaces

00:22:08,799 --> 00:22:12,799
can get you ramped up to cross-platform

00:22:11,200 --> 00:22:15,280
development super quickly

00:22:12,799 --> 00:22:16,960
and people joining your code base can

00:22:15,280 --> 00:22:19,360
really quickly start contributing

00:22:16,960 --> 00:22:21,200
but this is a relatively small code base

00:22:19,360 --> 00:22:23,600
so i want to continue to show

00:22:21,200 --> 00:22:25,200
even more benefits of code spaces and to

00:22:23,600 --> 00:22:27,120
do that let's switch on over to one of

00:22:25,200 --> 00:22:28,640
my other code spaces and that's of the

00:22:27,120 --> 00:22:32,080
opencv repository

00:22:28,640 --> 00:22:33,919
which is a very large c plus project

00:22:32,080 --> 00:22:35,840
and the awesome thing about codespaces

00:22:33,919 --> 00:22:38,159
is that i can actually have

00:22:35,840 --> 00:22:39,280
multiple connections to code spaces open

00:22:38,159 --> 00:22:41,200
at the same time

00:22:39,280 --> 00:22:42,640
because my local cores are all freed up

00:22:41,200 --> 00:22:43,360
because everything's running in the

00:22:42,640 --> 00:22:45,120
cloud

00:22:43,360 --> 00:22:46,640
and so my local machine doesn't get

00:22:45,120 --> 00:22:49,679
bogged down by having multiple

00:22:46,640 --> 00:22:50,559
instances open so here's opencv and this

00:22:49,679 --> 00:22:53,919
is a

00:22:50,559 --> 00:22:55,280
very large c plus project you can see

00:22:53,919 --> 00:22:57,840
there's a bunch of different c

00:22:55,280 --> 00:22:58,320
plus files here and what i want to show

00:22:57,840 --> 00:23:01,679
is

00:22:58,320 --> 00:23:03,520
build acceleration but this first build

00:23:01,679 --> 00:23:04,960
that i'm doing is not accelerated but i

00:23:03,520 --> 00:23:06,799
am targeting linux

00:23:04,960 --> 00:23:08,480
and in a previous talk i showed build

00:23:06,799 --> 00:23:09,360
acceleration targeting windows so at

00:23:08,480 --> 00:23:12,159
cppcon

00:23:09,360 --> 00:23:13,440
i want to show targeting linux and you

00:23:12,159 --> 00:23:16,400
can see the build is running

00:23:13,440 --> 00:23:17,600
this is not accelerated but this build

00:23:16,400 --> 00:23:21,039
above

00:23:17,600 --> 00:23:22,480
is getting accelerated now this build

00:23:21,039 --> 00:23:24,320
is being accelerated because our

00:23:22,480 --> 00:23:25,760
development environment is in the cloud

00:23:24,320 --> 00:23:27,039
so we're just taking advantage of these

00:23:25,760 --> 00:23:29,120
extra cloud cores

00:23:27,039 --> 00:23:31,360
to distribute that build and also take

00:23:29,120 --> 00:23:33,919
advantage of build output caching

00:23:31,360 --> 00:23:34,880
in order to get build acceleration here

00:23:33,919 --> 00:23:36,240
now

00:23:34,880 --> 00:23:37,919
this is not going to be a part of the

00:23:36,240 --> 00:23:39,120
preview i did just want to show it here

00:23:37,919 --> 00:23:40,720
to show you a direction that we

00:23:39,120 --> 00:23:42,240
could go a direction that could make

00:23:40,720 --> 00:23:44,080
sense because of the fact that the

00:23:42,240 --> 00:23:45,520
development environments in the cloud

00:23:44,080 --> 00:23:47,520
but again it won't be available in the

00:23:45,520 --> 00:23:49,279
preview but with that being said let's

00:23:47,520 --> 00:23:51,279
go ahead and swing back on over

00:23:49,279 --> 00:23:54,240
into the slides and do a recap of

00:23:51,279 --> 00:23:54,240
everything that we just saw

00:23:55,440 --> 00:23:58,799
all right so we saw how we can connect

00:23:57,279 --> 00:23:59,600
to a github code space with visual

00:23:58,799 --> 00:24:02,240
studio

00:23:59,600 --> 00:24:04,400
and how the code space automatically can

00:24:02,240 --> 00:24:05,919
provision wsl wsl-2 for you which makes

00:24:04,400 --> 00:24:07,120
onboarding to cross-platform

00:24:05,919 --> 00:24:08,640
repositories

00:24:07,120 --> 00:24:10,320
super simple there's no manual

00:24:08,640 --> 00:24:10,799
configuration needed for windows or

00:24:10,320 --> 00:24:12,960
linux

00:24:10,799 --> 00:24:15,039
all that was done for me i was able to

00:24:12,960 --> 00:24:17,440
build targeting both of those

00:24:15,039 --> 00:24:19,520
right out the gate and we also saw

00:24:17,440 --> 00:24:21,919
platform-specific intellisense which

00:24:19,520 --> 00:24:23,919
exists outside of code spaces as well

00:24:21,919 --> 00:24:26,559
but in code spaces since

00:24:23,919 --> 00:24:27,679
all the wsl provisioning is done for you

00:24:26,559 --> 00:24:29,600
you also just

00:24:27,679 --> 00:24:30,799
get platform-specific intellisense as a

00:24:29,600 --> 00:24:32,640
benefit of that

00:24:30,799 --> 00:24:35,039
and lastly we have a forward-looking

00:24:32,640 --> 00:24:37,279
section where i show build acceleration

00:24:35,039 --> 00:24:39,200
targeting linux and again here's the

00:24:37,279 --> 00:24:41,039
link that you can go to if you want to

00:24:39,200 --> 00:24:42,400
get on the wait list to this visual

00:24:41,039 --> 00:24:44,720
studio support

00:24:42,400 --> 00:24:46,640
with that that wraps up my talk i just

00:24:44,720 --> 00:24:48,159
want to

00:24:46,640 --> 00:24:49,840
once again remind you all about these

00:24:48,159 --> 00:24:51,520
links in case you didn't

00:24:49,840 --> 00:24:52,960
see them before or you didn't have a

00:24:51,520 --> 00:24:55,840
chance to screen grab it

00:24:52,960 --> 00:24:57,360
take a screenshot now and there's a

00:24:55,840 --> 00:24:58,640
couple other slides that i want to rush

00:24:57,360 --> 00:25:00,080
through real quick

00:24:58,640 --> 00:25:01,520
here are the talks that we already had

00:25:00,080 --> 00:25:03,520
hopefully you got a chance to see some

00:25:01,520 --> 00:25:06,400
of those earlier in the week

00:25:03,520 --> 00:25:06,960
if not uh recommend checking these out

00:25:06,400 --> 00:25:09,840
for sure

00:25:06,960 --> 00:25:10,159
and then today we had a few more talks

00:25:09,840 --> 00:25:12,559
and

00:25:10,159 --> 00:25:14,720
on friday our team is also giving a talk

00:25:12,559 --> 00:25:16,720
which you should definitely check out

00:25:14,720 --> 00:25:19,360
all right thank you all so much i think

00:25:16,720 --> 00:25:20,320
now we can transition to a little q a i

00:25:19,360 --> 00:25:22,559
think we have

00:25:20,320 --> 00:25:24,640
a couple minutes um if not definitely go

00:25:22,559 --> 00:25:26,080
to our expo hall and i will be there to

00:25:24,640 --> 00:25:28,159
answer any follow-up questions

00:25:26,080 --> 00:25:29,600
thank you all so much all right i think

00:25:28,159 --> 00:25:31,039
that's working hopefully

00:25:29,600 --> 00:25:34,159
uh thanks for watching it looks like

00:25:31,039 --> 00:25:36,799
there's a couple questions in the q a

00:25:34,159 --> 00:25:37,440
all right is code spaces and hosting

00:25:36,799 --> 00:25:39,200
available

00:25:37,440 --> 00:25:40,799
or planned to be available locally with

00:25:39,200 --> 00:25:42,559
no offsite hosting required for

00:25:40,799 --> 00:25:44,080
enterprise solutions

00:25:42,559 --> 00:25:45,679
it's a really good question it's not

00:25:44,080 --> 00:25:46,400
currently available for the github

00:25:45,679 --> 00:25:48,640
service

00:25:46,400 --> 00:25:50,240
but we are constantly listening to

00:25:48,640 --> 00:25:51,760
y'all's feedback so if this comes up a

00:25:50,240 --> 00:25:53,200
lot then we will

00:25:51,760 --> 00:25:55,440
obviously consider that in the roadmap

00:25:53,200 --> 00:25:58,480
but no it's not currently uh

00:25:55,440 --> 00:26:00,240
available as the in the github service

00:25:58,480 --> 00:26:01,760
is there a rough timeline for code space

00:26:00,240 --> 00:26:05,200
becoming available

00:26:01,760 --> 00:26:09,200
in github enterprise um

00:26:05,200 --> 00:26:12,080
so we don't have a an exact date

00:26:09,200 --> 00:26:15,200
but roughly it is expected to ga

00:26:12,080 --> 00:26:15,200
sometime later this year

00:26:15,279 --> 00:26:20,320
can we switch compilers so i showed in

00:26:18,559 --> 00:26:21,279
the devnet json file that you can

00:26:20,320 --> 00:26:23,120
specify what

00:26:21,279 --> 00:26:25,039
compiler to get installed but also if

00:26:23,120 --> 00:26:26,559
you're talking about just switching

00:26:25,039 --> 00:26:28,400
compilers in your project you can do

00:26:26,559 --> 00:26:30,000
that in the configuration manager

00:26:28,400 --> 00:26:32,000
there's a drop down in the top where i

00:26:30,000 --> 00:26:35,120
was showing the wsl

00:26:32,000 --> 00:26:36,159
configuration and the x64 debug also in

00:26:35,120 --> 00:26:38,000
that drop down there's a manage

00:26:36,159 --> 00:26:39,039
configurations button where you can go

00:26:38,000 --> 00:26:40,400
into there and you're able to choose

00:26:39,039 --> 00:26:42,640
what tool set to use and things like

00:26:40,400 --> 00:26:42,640
that

00:26:43,360 --> 00:26:48,000
have you ever tried running or debugging

00:26:45,520 --> 00:26:50,799
an app that uses opengl

00:26:48,000 --> 00:26:52,000
so i think that's a graphics library

00:26:50,799 --> 00:26:55,279
great question right now

00:26:52,000 --> 00:26:58,080
code spaces we aren't focused on um

00:26:55,279 --> 00:26:59,840
like graphical applications we our main

00:26:58,080 --> 00:27:01,279
focus for wave one is around

00:26:59,840 --> 00:27:04,240
console applications and library

00:27:01,279 --> 00:27:08,240
development but uh like i said this is

00:27:04,240 --> 00:27:09,760
just the first wave so yes we are

00:27:08,240 --> 00:27:11,440
trying to support more graphical

00:27:09,760 --> 00:27:15,039
applications and things like that

00:27:11,440 --> 00:27:16,799
in future waves of support is codespaces

00:27:15,039 --> 00:27:19,520
and azure going to go away

00:27:16,799 --> 00:27:21,600
so another great question right now you

00:27:19,520 --> 00:27:24,799
can sign into codespaces

00:27:21,600 --> 00:27:27,520
with your like azure account

00:27:24,799 --> 00:27:28,399
and yes that's transitioning over to

00:27:27,520 --> 00:27:30,399
github

00:27:28,399 --> 00:27:31,520
now through github code spaces and

00:27:30,399 --> 00:27:34,320
that's going to be the

00:27:31,520 --> 00:27:35,520
the new front door for that there is a

00:27:34,320 --> 00:27:38,159
transition

00:27:35,520 --> 00:27:39,279
process where you can take your existing

00:27:38,159 --> 00:27:40,960
code space and

00:27:39,279 --> 00:27:43,279
do some tricks with like mirroring and

00:27:40,960 --> 00:27:46,480
things like that to get it to work

00:27:43,279 --> 00:27:49,440
with the new github code spaces but yeah

00:27:46,480 --> 00:27:52,320
right now yeah we are transitioning over

00:27:49,440 --> 00:27:52,320
so that would go away

00:27:56,080 --> 00:28:00,080
cool let me just go to the chat just in

00:27:58,080 --> 00:28:01,919
case there's anything in there

00:28:00,080 --> 00:28:03,360
nope all right sweet i guess that's all

00:28:01,919 --> 00:28:05,679
the questions

00:28:03,360 --> 00:28:07,120
pretty good timing so if there's nothing

00:28:05,679 --> 00:28:17,840
else then i guess that's

00:28:07,120 --> 00:28:17,840
the session thank you

00:28:28,240 --> 00:28:30,320

YouTube URL: https://www.youtube.com/watch?v=HrOEyJVU5As


