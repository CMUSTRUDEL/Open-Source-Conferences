Title: CppCon 2016: Miodrag Milanović “The MAME story: From C to Modern C++"
Publication date: 2016-09-29
Playlist: CppCon 2016
Description: 
	http://www.Cppcon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016
—
In 1997, the MAME project was started as a DOS application written in C. Initially it could emulate a single arcade game, but today we have over 30,000 games. During the years, the code base grew but until 2009, there were no big steps. Then we started using C++.  

This case study will show how moving from C and plain C++ to modern C++ benefited both developers and end users, how we got better compatibility and portability, and better code. We will also discuss libraries that we feel are missing from the standard and the libraries that we are sharing with the community. 
— 
Miodrag Milanović
Software Architect, Levi9
Born in 1978. Bachelor of Computer Science, work as wide-range developer in local company, for some years as C++ development for various international customers. From 2012 coordinator of MAME emulation project, pushing hard in modernization of two decade old code.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,319 --> 00:00:08,280
welcome everyone I'm glad to have you

00:00:03,210 --> 00:00:13,500
here in this big number I would like to

00:00:08,280 --> 00:00:15,450
start presenting my talk okay first I

00:00:13,500 --> 00:00:18,960
would like to introduce myself because

00:00:15,450 --> 00:00:22,170
I'm not a regular speaker on the

00:00:18,960 --> 00:00:25,410
conference's so I'm working as a

00:00:22,170 --> 00:00:29,789
software developer from October 2000 I

00:00:25,410 --> 00:00:32,730
have various experience in C C++ Java

00:00:29,789 --> 00:00:35,640
and the reason for that is that I was

00:00:32,730 --> 00:00:39,469
working in outsourcing company and that

00:00:35,640 --> 00:00:43,980
company is only by 9:00 Serbia and from

00:00:39,469 --> 00:00:48,420
April 2012 I'm the coordinator of main

00:00:43,980 --> 00:00:52,020
project meanwhile I was you know trying

00:00:48,420 --> 00:00:55,620
to do some changes in how the leadership

00:00:52,020 --> 00:00:58,649
of the project functions so we are now

00:00:55,620 --> 00:01:01,289
having the technical board which I am

00:00:58,649 --> 00:01:05,489
member of and there are five of us which

00:01:01,289 --> 00:01:09,270
are actually leading the project so who

00:01:05,489 --> 00:01:12,390
we are there are about 50 active

00:01:09,270 --> 00:01:16,140
developers working on this project and

00:01:12,390 --> 00:01:20,180
we have additionally over 200

00:01:16,140 --> 00:01:25,650
contributors that are also helping us to

00:01:20,180 --> 00:01:30,090
gain the in emulation so team contains

00:01:25,650 --> 00:01:32,400
of experienced developers we have some

00:01:30,090 --> 00:01:35,430
people from gaming industry but we also

00:01:32,400 --> 00:01:40,670
have people that are from other

00:01:35,430 --> 00:01:46,399
industries or just emulation enthusiasts

00:01:40,670 --> 00:01:50,399
community community is rather big it's

00:01:46,399 --> 00:01:53,280
you know assists of the developers from

00:01:50,399 --> 00:01:56,490
the different experiences and we have a

00:01:53,280 --> 00:02:00,509
lot of contributors coming from

00:01:56,490 --> 00:02:03,030
different backgrounds mostly they're you

00:02:00,509 --> 00:02:06,570
know interested in gaming development

00:02:03,030 --> 00:02:09,300
but not all also we have the great help

00:02:06,570 --> 00:02:11,820
from software dumpers

00:02:09,300 --> 00:02:15,990
and they're helping us preserving the

00:02:11,820 --> 00:02:19,620
software in general so those people are

00:02:15,990 --> 00:02:22,590
you know mostly enthusiasts trying to

00:02:19,620 --> 00:02:25,620
find some old software or that they find

00:02:22,590 --> 00:02:28,350
some board that they are not aware but

00:02:25,620 --> 00:02:30,660
is about they just dump the ROM on sent

00:02:28,350 --> 00:02:35,190
it to us try to find some documentation

00:02:30,660 --> 00:02:38,220
and thus images and try to help in any

00:02:35,190 --> 00:02:41,070
way so they also have documentation of

00:02:38,220 --> 00:02:44,010
errors and they are really of great help

00:02:41,070 --> 00:02:46,800
and they've helped us in a way that they

00:02:44,010 --> 00:02:49,560
provide us with the documentation for

00:02:46,800 --> 00:02:53,870
specific parts that are used in the

00:02:49,560 --> 00:02:56,100
hardware or some software documentation

00:02:53,870 --> 00:02:59,760
anything that could actually help us

00:02:56,100 --> 00:03:07,830
also we have a lot of testers all the

00:02:59,760 --> 00:03:10,830
users of our software we think that four

00:03:07,830 --> 00:03:14,640
of them as a testers and there is a

00:03:10,830 --> 00:03:18,360
great side main testers which enables

00:03:14,640 --> 00:03:22,290
you to enter your bug reports and we

00:03:18,360 --> 00:03:28,050
loop that all the time and try to fix

00:03:22,290 --> 00:03:34,350
and help people so what is the main when

00:03:28,050 --> 00:03:38,550
I supply this talk I didn't put the what

00:03:34,350 --> 00:03:42,300
is all about so I mean the reason for it

00:03:38,550 --> 00:03:45,650
was that I was planning for talk to be

00:03:42,300 --> 00:03:48,270
more about general ideas of

00:03:45,650 --> 00:03:50,520
modernization and keeping with the

00:03:48,270 --> 00:03:53,730
legacy code alive

00:03:50,520 --> 00:03:56,610
but at the end I came to make sure off

00:03:53,730 --> 00:04:00,870
of things and ideas that I would like to

00:03:56,610 --> 00:04:03,940
present here so name is aberration for

00:04:00,870 --> 00:04:07,960
multiple arcade machine emulator

00:04:03,940 --> 00:04:10,210
it's a project that was started by our

00:04:07,960 --> 00:04:12,550
friend from Italy

00:04:10,210 --> 00:04:18,269
Nicola so Maria and he started that

00:04:12,550 --> 00:04:25,960
project in 1997 project was initially

00:04:18,269 --> 00:04:29,430
for a dose and it uses Allegro library

00:04:25,960 --> 00:04:34,150
for graphics output had a lot of

00:04:29,430 --> 00:04:39,210
assembly language in it and also had it

00:04:34,150 --> 00:04:43,360
was written in C so in parallel to that

00:04:39,210 --> 00:04:46,570
about a few months later mass project

00:04:43,360 --> 00:04:54,940
started as a sister project messages

00:04:46,570 --> 00:04:59,770
operation for multiple the emulation I

00:04:54,940 --> 00:05:12,700
mean it's it's never actually Hector who

00:04:59,770 --> 00:05:15,160
had you know but it was really a mess to

00:05:12,700 --> 00:05:17,680
keep it running go ahead you know so

00:05:15,160 --> 00:05:20,560
that's one of the reasons we have to

00:05:17,680 --> 00:05:26,470
join decided to leave the name of Maine

00:05:20,560 --> 00:05:30,630
and me you know both for for us is

00:05:26,470 --> 00:05:36,190
preservation of software of any kind and

00:05:30,630 --> 00:05:40,510
that's why we afterwards acquired mass

00:05:36,190 --> 00:05:43,690
and we try to put all devices up to

00:05:40,510 --> 00:05:50,410
emulate all devices that have CP on them

00:05:43,690 --> 00:05:54,280
and not just that and we placed goal to

00:05:50,410 --> 00:05:58,120
be accuracy over performance so that's

00:05:54,280 --> 00:06:01,930
one of the things that people don't like

00:05:58,120 --> 00:06:06,370
about our project I'm very that we're

00:06:01,930 --> 00:06:10,390
all aware of that but the issue is that

00:06:06,370 --> 00:06:13,280
we as we have a main goal preservation

00:06:10,390 --> 00:06:17,730
of software we need to preserve it in

00:06:13,280 --> 00:06:20,660
so that everything is looking as

00:06:17,730 --> 00:06:24,090
authentic as possible

00:06:20,660 --> 00:06:27,780
only way to do that is to put accuracy

00:06:24,090 --> 00:06:29,820
over everything else it's not that we

00:06:27,780 --> 00:06:33,420
don't care about performance we care a

00:06:29,820 --> 00:06:38,820
lot and we try to improve that and one

00:06:33,420 --> 00:06:42,180
of the reasons why we moved to C++ was

00:06:38,820 --> 00:06:45,990
mainly to make things clearer for us and

00:06:42,180 --> 00:06:48,810
to enable us to produce you know more

00:06:45,990 --> 00:06:53,160
performant code since we will you know

00:06:48,810 --> 00:06:55,830
just remove all the things that are not

00:06:53,160 --> 00:06:58,520
you know it's so important and we will

00:06:55,830 --> 00:07:01,920
see the problem itself so we can be

00:06:58,520 --> 00:07:06,060
strictly see where the performance

00:07:01,920 --> 00:07:08,100
problems are so there are of course a

00:07:06,060 --> 00:07:12,000
lot of misconceptions about our project

00:07:08,100 --> 00:07:14,730
so it's not made for you to play the

00:07:12,000 --> 00:07:21,120
games for free that's definitely bad

00:07:14,730 --> 00:07:26,370
it's what most fortunately main is not

00:07:21,120 --> 00:07:29,940
game itself I mean we sometimes have bug

00:07:26,370 --> 00:07:32,760
reports I think that would be nice you

00:07:29,940 --> 00:07:34,830
know just to have this one this part

00:07:32,760 --> 00:07:37,230
here in this game and we said we did

00:07:34,830 --> 00:07:41,070
that game I mean it just emulate that

00:07:37,230 --> 00:07:44,190
it's nothing we can do about it it was

00:07:41,070 --> 00:07:47,160
seen for a long time as a way to sell

00:07:44,190 --> 00:07:49,110
new arcade cabinets and a fortunately

00:07:47,160 --> 00:07:53,850
that was one of the reasons why we

00:07:49,110 --> 00:07:57,200
started with the license that prohibited

00:07:53,850 --> 00:08:00,300
commercial use for our software because

00:07:57,200 --> 00:08:04,470
most of the commercial uses was the

00:08:00,300 --> 00:08:08,400
people who made a cabinet put name on it

00:08:04,470 --> 00:08:11,550
put illegally acquired roms on it and

00:08:08,400 --> 00:08:14,970
solve that and so that under our name

00:08:11,550 --> 00:08:19,200
and without anything giving back to the

00:08:14,970 --> 00:08:21,810
community so it's it is the thing that

00:08:19,200 --> 00:08:23,330
we actually needed to so we have the

00:08:21,810 --> 00:08:27,230
trademark

00:08:23,330 --> 00:08:30,650
the name name so essentially you should

00:08:27,230 --> 00:08:32,860
you could not you know sell something

00:08:30,650 --> 00:08:38,450
under that name without first consulting

00:08:32,860 --> 00:08:41,930
owners or but you know people basically

00:08:38,450 --> 00:08:46,160
by selling the hurt are breaking so much

00:08:41,930 --> 00:08:51,560
other Louis so this one is is really not

00:08:46,160 --> 00:08:58,580
applicable that way so for enhancing

00:08:51,560 --> 00:09:01,460
games but you're changing in a way that

00:08:58,580 --> 00:09:04,900
we help you to preserve the look and

00:09:01,460 --> 00:09:10,190
feel of the games so recently we start

00:09:04,900 --> 00:09:13,280
adding support for you to be able to see

00:09:10,190 --> 00:09:17,360
how actually screen looked like on the

00:09:13,280 --> 00:09:21,040
CRT monitor why preservation of software

00:09:17,360 --> 00:09:25,190
is that important well companies

00:09:21,040 --> 00:09:27,770
software I mean they release some things

00:09:25,190 --> 00:09:31,220
and then they release a new version and

00:09:27,770 --> 00:09:34,520
you can find a new version and they just

00:09:31,220 --> 00:09:37,880
delete the old and they have their you

00:09:34,520 --> 00:09:40,100
know our tips but they don't I mean it's

00:09:37,880 --> 00:09:43,220
it's really hard even for them to find

00:09:40,100 --> 00:09:45,650
some things there and things get lost of

00:09:43,220 --> 00:09:49,900
course I mean it's just that popular

00:09:45,650 --> 00:09:53,720
software is all over the place and when

00:09:49,900 --> 00:09:54,910
5-10 years comes you know things get

00:09:53,720 --> 00:09:58,070
lost

00:09:54,910 --> 00:10:03,320
storage mediums are reliable

00:09:58,070 --> 00:10:07,220
you know the software for 70s and 80s it

00:10:03,320 --> 00:10:10,460
was mostly on cassettes these kids so

00:10:07,220 --> 00:10:15,580
it's it's a bit unreliable medium

00:10:10,460 --> 00:10:21,640
especially for Porter inch discs are

00:10:15,580 --> 00:10:24,320
quite easy to break so yeah it was

00:10:21,640 --> 00:10:27,020
unreliable in any way even the current

00:10:24,320 --> 00:10:30,320
CD ROMs you know you right you you can't

00:10:27,020 --> 00:10:33,770
read them for after a year or two

00:10:30,320 --> 00:10:37,370
and it's for us it was just that it was

00:10:33,770 --> 00:10:40,850
just easy to find software is good well

00:10:37,370 --> 00:10:44,750
known but what about things that are you

00:10:40,850 --> 00:10:48,500
know also good but you know not were not

00:10:44,750 --> 00:10:51,530
popular in that time it's also not

00:10:48,500 --> 00:10:53,470
possible to buy software I don't know

00:10:51,530 --> 00:10:57,260
there are a lot of Microsoft guys fear

00:10:53,470 --> 00:11:03,460
could I buy ms-dos right now I don't

00:10:57,260 --> 00:11:06,650
think so and I mean the problem about

00:11:03,460 --> 00:11:09,740
legal things is that you can't buy

00:11:06,650 --> 00:11:13,820
something but you also there is no other

00:11:09,740 --> 00:11:17,840
way for you to acquire it and we try to

00:11:13,820 --> 00:11:21,880
keep this on a legal grounds we do not

00:11:17,840 --> 00:11:23,930
distribute any of these we just you know

00:11:21,880 --> 00:11:28,880
trying to find it

00:11:23,930 --> 00:11:32,360
in texts all the software if it's wrong

00:11:28,880 --> 00:11:39,680
down it's much easier you know it's we

00:11:32,360 --> 00:11:42,890
put the crc32 and sha-1 off off roms

00:11:39,680 --> 00:11:46,570
also the size so you can you know have

00:11:42,890 --> 00:11:50,300
one-to-one to the real hardware but

00:11:46,570 --> 00:11:52,010
about the floppies and cassettes it's a

00:11:50,300 --> 00:11:55,430
bit trickier because there is no

00:11:52,010 --> 00:12:01,790
universal format how to store them so

00:11:55,430 --> 00:12:05,930
that becomes a problem but people like

00:12:01,790 --> 00:12:08,660
me to be used for well we would like to

00:12:05,930 --> 00:12:10,700
you to use it for to learn about the old

00:12:08,660 --> 00:12:13,339
hardware you know to understand to

00:12:10,700 --> 00:12:17,630
understand things from the past to be

00:12:13,339 --> 00:12:21,260
able to to develop new software for that

00:12:17,630 --> 00:12:23,960
old hardware because the thing that you

00:12:21,260 --> 00:12:26,990
can do now is that you can have a really

00:12:23,960 --> 00:12:31,910
good development tools even for the

00:12:26,990 --> 00:12:35,420
those old CPUs and you now have a you

00:12:31,910 --> 00:12:37,580
can use meme as debugger you can create

00:12:35,420 --> 00:12:40,790
your even your virtual machine you know

00:12:37,580 --> 00:12:42,910
different one so you know you have the

00:12:40,790 --> 00:12:46,640
parts you would like to make your

00:12:42,910 --> 00:12:49,100
the way to do it is just to play inside

00:12:46,640 --> 00:12:52,070
the source and to create your own

00:12:49,100 --> 00:12:54,769
emulation of of your imagined machine

00:12:52,070 --> 00:12:58,209
and I think it's it's really good

00:12:54,769 --> 00:13:03,769
practice ground for the new C++ features

00:12:58,209 --> 00:13:06,860
because call this rather big what we

00:13:03,769 --> 00:13:09,860
don't do we don't emulate recent

00:13:06,860 --> 00:13:13,390
hardware if it's not of course permitted

00:13:09,860 --> 00:13:17,600
by others thing is that we also do not

00:13:13,390 --> 00:13:21,170
support recent software also less

00:13:17,600 --> 00:13:23,300
permitted but think about software and

00:13:21,170 --> 00:13:29,019
hardware we try to keep that three or

00:13:23,300 --> 00:13:33,950
three year old rule so if something is

00:13:29,019 --> 00:13:35,360
out of and I mean end of production was

00:13:33,950 --> 00:13:38,450
three years ago

00:13:35,360 --> 00:13:43,760
then we can you know be sure that there

00:13:38,450 --> 00:13:46,370
is no financial impact to the other

00:13:43,760 --> 00:13:49,370
software developers because we are also

00:13:46,370 --> 00:13:52,100
software developers we care about other

00:13:49,370 --> 00:13:55,070
companies I mean we don't wish to make

00:13:52,100 --> 00:14:00,470
them trouble we wish to for arcades to

00:13:55,070 --> 00:14:05,000
live we had some issues I mean in the

00:14:00,470 --> 00:14:09,260
past for example we gave company from

00:14:05,000 --> 00:14:13,990
Japan and that produced arcades and the

00:14:09,260 --> 00:14:18,079
emulated board it was about 10 years old

00:14:13,990 --> 00:14:20,570
we show no problem and we put on our

00:14:18,079 --> 00:14:24,230
site there is a line that which said if

00:14:20,570 --> 00:14:26,120
you think that our job is in conflict

00:14:24,230 --> 00:14:28,490
with your job and we do remove the

00:14:26,120 --> 00:14:31,810
emulation for that it's not a problem at

00:14:28,490 --> 00:14:35,240
all and it contacted us and we will be

00:14:31,810 --> 00:14:37,760
removed everything from posit or ease

00:14:35,240 --> 00:14:40,310
and there was really not a problem but

00:14:37,760 --> 00:14:44,690
thing was that they were still using the

00:14:40,310 --> 00:14:47,089
same hardware from 10 years I mean it's

00:14:44,690 --> 00:14:49,730
not they were also selling rights of it

00:14:47,089 --> 00:14:51,829
that that's the other thing but they

00:14:49,730 --> 00:14:55,130
were selling rights for the same game on

00:14:51,829 --> 00:14:56,570
Xbox 360 but that's different platform

00:14:55,130 --> 00:15:03,050
it's not that software

00:14:56,570 --> 00:15:05,390
in general but after a few years they

00:15:03,050 --> 00:15:09,470
just disappeared from that part of job

00:15:05,390 --> 00:15:13,640
so basically it was there was no problem

00:15:09,470 --> 00:15:15,680
for us to put that back so if there is

00:15:13,640 --> 00:15:19,670
anyone having a problem with healthy I

00:15:15,680 --> 00:15:21,800
mean we are always ready to talk and to

00:15:19,670 --> 00:15:24,700
remove any part of the emulation that's

00:15:21,800 --> 00:15:28,540
problematic you also and also we don't

00:15:24,700 --> 00:15:32,630
try to improve how things can work so

00:15:28,540 --> 00:15:39,520
that's already described so what we

00:15:32,630 --> 00:15:46,510
actually do we put this into this and

00:15:39,520 --> 00:15:51,500
yeah that's the die shot from 6502 and

00:15:46,510 --> 00:15:54,650
that was made by a visual c50 two guys

00:15:51,500 --> 00:15:59,690
and there is also other side silicone

00:15:54,650 --> 00:16:03,410
prong they make a lot of dye shots from

00:15:59,690 --> 00:16:08,420
all CPUs and not just CPUs they made it

00:16:03,410 --> 00:16:12,460
for the sound chips video chips floppy

00:16:08,420 --> 00:16:15,200
disk controllers you name it process is

00:16:12,460 --> 00:16:18,470
not that complicated

00:16:15,200 --> 00:16:22,340
but it's you know

00:16:18,470 --> 00:16:24,410
Ausmus I mean you need to remove the

00:16:22,340 --> 00:16:27,110
plastics and you need to deal with the

00:16:24,410 --> 00:16:30,350
chemicals in order to remove the first

00:16:27,110 --> 00:16:36,440
parts and to be able to get to the die

00:16:30,350 --> 00:16:40,850
shot so what this helped is that we did

00:16:36,440 --> 00:16:46,520
a pretend help us to build the cycler

00:16:40,850 --> 00:16:49,430
accurate emulation for the 6502 so that

00:16:46,520 --> 00:16:54,020
sighting is the only way you can

00:16:49,430 --> 00:16:56,600
actually emulate undefined behavior so

00:16:54,020 --> 00:16:59,750
just to look at the die shot to see how

00:16:56,600 --> 00:17:01,610
it really worked to see internal

00:16:59,750 --> 00:17:05,420
registers because those are not

00:17:01,610 --> 00:17:10,270
documented to see the microcode you can

00:17:05,420 --> 00:17:10,270
plainly see that if you know how to look

00:17:11,030 --> 00:17:19,470
okay let's look at some of the current

00:17:14,370 --> 00:17:23,190
statistics here is statistics for our

00:17:19,470 --> 00:17:27,300
code so we have over 150 megabytes of

00:17:23,190 --> 00:17:33,360
source and you can see that basically

00:17:27,300 --> 00:17:37,890
most of the things are C C++ and C++

00:17:33,360 --> 00:17:40,830
headers as well B also you can see that

00:17:37,890 --> 00:17:46,770
there are comments a lot of comments in

00:17:40,830 --> 00:17:51,500
code but it's we try to keep the source

00:17:46,770 --> 00:17:51,500
code as a documentation for a specific

00:17:52,640 --> 00:18:00,590
driver that we are emulating so it's

00:17:56,130 --> 00:18:03,350
comments are really important for us and

00:18:00,590 --> 00:18:07,710
I'll give you one more

00:18:03,350 --> 00:18:14,100
it's a bit uptrending you can see this

00:18:07,710 --> 00:18:24,750
is from 2008 problem is that Bieber I

00:18:14,100 --> 00:18:30,270
mean we're on from 14 and 15 sorry and

00:18:24,750 --> 00:18:35,420
before that we were at closed as when we

00:18:30,270 --> 00:18:39,420
put our code publicly but only banned

00:18:35,420 --> 00:18:45,270
your release time comes and you can see

00:18:39,420 --> 00:18:47,220
I started to work as coordinator 2012

00:18:45,270 --> 00:18:54,120
and you can see those erratic clients

00:18:47,220 --> 00:18:57,090
start to hang up so I a bit as a people

00:18:54,120 --> 00:19:01,200
pusher you know I like to you know put

00:18:57,090 --> 00:19:05,790
some ideas I try to also lead by example

00:19:01,200 --> 00:19:08,700
so I do a lot of things but then when

00:19:05,790 --> 00:19:10,920
people start seeing you know you do a

00:19:08,700 --> 00:19:13,740
lot of changes on that and that then

00:19:10,920 --> 00:19:15,780
they start also doing that and it's kind

00:19:13,740 --> 00:19:18,780
of fun especially for the open source

00:19:15,780 --> 00:19:21,610
projects and you can see here how we

00:19:18,780 --> 00:19:25,780
grow during the time

00:19:21,610 --> 00:19:29,250
we started I mean just for the naming

00:19:25,780 --> 00:19:33,490
convention I'm not sure can be seen

00:19:29,250 --> 00:19:37,870
there but you can see just dates it's

00:19:33,490 --> 00:19:40,480
still February of this year so you can

00:19:37,870 --> 00:19:43,390
see how we actually grow through the

00:19:40,480 --> 00:19:46,690
time so we start just four five

00:19:43,390 --> 00:19:51,090
different emulators and then it's just

00:19:46,690 --> 00:19:54,930
steady and we are now over 35,000 so

00:19:51,090 --> 00:19:58,720
it's it's a big number

00:19:54,930 --> 00:20:02,170
those are I mean you have to see it as a

00:19:58,720 --> 00:20:04,360
different machines those are not all

00:20:02,170 --> 00:20:06,490
different machines those are sometimes

00:20:04,360 --> 00:20:10,830
same machine running different software

00:20:06,490 --> 00:20:17,410
and maybe the best thing to take a look

00:20:10,830 --> 00:20:26,800
would be those parent drivers that can

00:20:17,410 --> 00:20:29,500
be seen here but go back here you can

00:20:26,800 --> 00:20:34,750
see that there are 10,000 of files and

00:20:29,500 --> 00:20:38,470
there is about 2000 of driver files

00:20:34,750 --> 00:20:41,370
so you're basically emulating 2,000

00:20:38,470 --> 00:20:44,890
different hardware configurations

00:20:41,370 --> 00:20:48,190
different hardware configurations we can

00:20:44,890 --> 00:20:52,600
say it like that but after that there is

00:20:48,190 --> 00:20:55,960
a specific specific things that are just

00:20:52,600 --> 00:20:58,600
for some machines and they're running

00:20:55,960 --> 00:21:01,590
for arcades you have the fixed software

00:20:58,600 --> 00:21:04,380
per machine so you can't change it and

00:21:01,590 --> 00:21:08,980
that's the reason why we have over

00:21:04,380 --> 00:21:10,720
35,000 okay let's move back so what are

00:21:08,980 --> 00:21:14,890
the development tools we are using we

00:21:10,720 --> 00:21:18,760
were using on Windows we have mgs2 with

00:21:14,890 --> 00:21:20,310
min GB and also the support flag and

00:21:18,760 --> 00:21:24,990
Visual Studio 2015

00:21:20,310 --> 00:21:30,370
Linux is GCC and planned and on our six

00:21:24,990 --> 00:21:32,899
support xcode and clank commercial tools

00:21:30,370 --> 00:21:36,200
that we are using is

00:21:32,899 --> 00:21:39,919
one of the things that you're using is

00:21:36,200 --> 00:21:42,860
resharper C++ and it's really good in

00:21:39,919 --> 00:21:46,850
combination with Visual Studio help us

00:21:42,860 --> 00:21:49,299
to do a lot of stuff and since be able

00:21:46,850 --> 00:21:52,759
to do new licensed which is open source

00:21:49,299 --> 00:21:55,700
it was really easy for us to acquire the

00:21:52,759 --> 00:22:00,019
licenses and thanks to the JetBrains

00:21:55,700 --> 00:22:01,970
for that we also used PBS studio and the

00:22:00,019 --> 00:22:06,799
reason for that is that they did the

00:22:01,970 --> 00:22:09,740
analysis in 2012 about our code and as

00:22:06,799 --> 00:22:12,409
you say you can see the link here but

00:22:09,740 --> 00:22:15,139
it's software diseases about using map

00:22:12,409 --> 00:22:18,860
sets and it was really really a big

00:22:15,139 --> 00:22:24,440
problem for us and that's the thing that

00:22:18,860 --> 00:22:26,419
was left over from the CD days that

00:22:24,440 --> 00:22:28,309
produced a lot of things a lot of

00:22:26,419 --> 00:22:31,070
problems for us and we use the

00:22:28,309 --> 00:22:35,419
evaluation version of areas to do to fix

00:22:31,070 --> 00:22:40,639
some of those but meeting we can use it

00:22:35,419 --> 00:22:42,980
more why we do it well Jeff cases we do

00:22:40,639 --> 00:22:46,190
things not because they are easy but

00:22:42,980 --> 00:22:48,440
because they are hard and that's not one

00:22:46,190 --> 00:22:51,289
of the I mean that's one of the reasons

00:22:48,440 --> 00:22:54,769
why we are doing it but we are mostly

00:22:51,289 --> 00:22:59,749
doing it for fun to be honest ok let's

00:22:54,769 --> 00:23:07,100
see how MAME looks now this would be

00:22:59,749 --> 00:23:11,090
some initial screenshot not that user

00:23:07,100 --> 00:23:14,299
centric yes there's you can see that by

00:23:11,090 --> 00:23:18,019
design and this one is new improve the

00:23:14,299 --> 00:23:20,450
design so you can imagine the old one we

00:23:18,019 --> 00:23:24,369
didn't have that picker at all so

00:23:20,450 --> 00:23:24,369
everything was basically command line

00:23:25,090 --> 00:23:38,119
okay this is me running 1942 game 92 to

00:23:34,480 --> 00:23:43,009
1941 sorry and you can see the bugger

00:23:38,119 --> 00:23:45,110
here so while running game you can

00:23:43,009 --> 00:23:45,840
always see the debugger you can put

00:23:45,110 --> 00:23:48,750
break

00:23:45,840 --> 00:23:52,200
points inside emulation you can check

00:23:48,750 --> 00:23:56,070
the memory you can see the log lines for

00:23:52,200 --> 00:23:58,770
it so it's quite useful especially if

00:23:56,070 --> 00:24:02,039
you are for example developing a new

00:23:58,770 --> 00:24:04,830
software for that old hardware and we

00:24:02,039 --> 00:24:07,830
are really proud to our debugger there

00:24:04,830 --> 00:24:10,320
and it's quite my thing we are also

00:24:07,830 --> 00:24:12,990
planning to do some things because we

00:24:10,320 --> 00:24:16,289
used Lua internally for plugins right

00:24:12,990 --> 00:24:19,260
now and I hope we will use it also in

00:24:16,289 --> 00:24:23,010
debugger to expand it and to add new

00:24:19,260 --> 00:24:28,350
capabilities you can see a computer

00:24:23,010 --> 00:24:33,059
running here it's Sam - and you can see

00:24:28,350 --> 00:24:35,990
the since it's still in work-in-progress

00:24:33,059 --> 00:24:41,250
space you can see a lot of things

00:24:35,990 --> 00:24:46,110
displayed on for debugging you can check

00:24:41,250 --> 00:24:49,140
their what are the unmapped memory reads

00:24:46,110 --> 00:24:51,960
writes so so it's easy for you basically

00:24:49,140 --> 00:24:57,000
how you start you start by just putting

00:24:51,960 --> 00:25:00,710
the roms for the machine and you specify

00:24:57,000 --> 00:25:03,960
CPU and that's it you put the empty

00:25:00,710 --> 00:25:06,270
address map that's about it and then you

00:25:03,960 --> 00:25:08,640
see your log and you see what's going on

00:25:06,270 --> 00:25:10,470
and then you recognize the patterns you

00:25:08,640 --> 00:25:14,220
know you can recognize for example

00:25:10,470 --> 00:25:15,960
initialization of various devices and if

00:25:14,220 --> 00:25:18,570
you're not sure you know which one I

00:25:15,960 --> 00:25:20,039
mean documentation always help but

00:25:18,570 --> 00:25:21,840
sometimes you don't have a documentation

00:25:20,039 --> 00:25:25,260
you have to find it yourself

00:25:21,840 --> 00:25:27,480
so you just recognize patterns you see

00:25:25,260 --> 00:25:31,200
how things work and then you try to

00:25:27,480 --> 00:25:35,299
reverse engineer everything this is one

00:25:31,200 --> 00:25:41,899
of the new things we do if you can see

00:25:35,299 --> 00:25:45,630
one image the spot for me is displaying

00:25:41,899 --> 00:25:48,659
how we actually you know display things

00:25:45,630 --> 00:25:53,190
in the display memory so there are no

00:25:48,659 --> 00:25:57,539
effects deaths default view for us but

00:25:53,190 --> 00:25:59,250
here you have effect of these paintings

00:25:57,539 --> 00:26:01,530
on CRT

00:25:59,250 --> 00:26:03,750
so you can see a scanlines you can see

00:26:01,530 --> 00:26:04,950
everything you're using shaders for it

00:26:03,750 --> 00:26:08,940
right now

00:26:04,950 --> 00:26:11,730
and starting to get cool you can put you

00:26:08,940 --> 00:26:15,179
know burnout effect put a lot of things

00:26:11,730 --> 00:26:18,150
and it's really looks nice and I will

00:26:15,179 --> 00:26:21,720
see to demo it to you so just you can

00:26:18,150 --> 00:26:24,780
see how it really works okay let's move

00:26:21,720 --> 00:26:27,929
on to the topic why here he heard it so

00:26:24,780 --> 00:26:30,510
how the modernization started well it

00:26:27,929 --> 00:26:35,039
was you know Main Street project till

00:26:30,510 --> 00:26:38,250
2009 and as you know the in that time

00:26:35,039 --> 00:26:40,710
there was suppose was 11 of course so we

00:26:38,250 --> 00:26:47,429
have to start with iron I'll start

00:26:40,710 --> 00:26:50,640
moving into C++ it was C++ 98 well it

00:26:47,429 --> 00:26:53,549
was afterwards converted to all three

00:26:50,640 --> 00:26:56,850
version which was supported by the

00:26:53,549 --> 00:26:59,250
compilers event at that time and since

00:26:56,850 --> 00:27:02,669
last year we are trying to move to the

00:26:59,250 --> 00:27:06,419
moderns it was possible and what are the

00:27:02,669 --> 00:27:09,480
reasons for doing that well it was our

00:27:06,419 --> 00:27:12,510
biggest problem was that it was really

00:27:09,480 --> 00:27:14,909
bad better learning curve for all of us

00:27:12,510 --> 00:27:16,950
even the developers who worked on the

00:27:14,909 --> 00:27:19,860
project so we couldn't you know

00:27:16,950 --> 00:27:23,070
understand how everything is connected

00:27:19,860 --> 00:27:25,740
so if someone left the team and it's

00:27:23,070 --> 00:27:30,179
quite usual when you have an open source

00:27:25,740 --> 00:27:33,090
project that big running for 20 years it

00:27:30,179 --> 00:27:36,059
was hard to maintain that also we didn't

00:27:33,090 --> 00:27:38,610
find interest in new people because it

00:27:36,059 --> 00:27:41,640
was too hard for them to tread our code

00:27:38,610 --> 00:27:45,950
so one of the reasons was just like

00:27:41,640 --> 00:27:49,020
let's move to something that is more

00:27:45,950 --> 00:27:53,090
people that they can understand they can

00:27:49,020 --> 00:27:56,240
use they can see how it's working and

00:27:53,090 --> 00:28:01,490
also we had a problem you know that

00:27:56,240 --> 00:28:07,049
there are a lot of mobile things in code

00:28:01,490 --> 00:28:09,840
usages of some parts of colburn you know

00:28:07,049 --> 00:28:12,240
you were not sure that it will run if

00:28:09,840 --> 00:28:15,630
you have two instances of that

00:28:12,240 --> 00:28:20,150
that was quite bad and we ditch the

00:28:15,630 --> 00:28:24,920
habitus kotas documentation that's our

00:28:20,150 --> 00:28:24,920
we our documentation project after all

00:28:25,040 --> 00:28:32,880
these are just first steps so we first

00:28:29,010 --> 00:28:35,400
compiled our C code as C++ and let's see

00:28:32,880 --> 00:28:40,110
what happened she post passes more

00:28:35,400 --> 00:28:45,150
strict and we got a lot of errors and

00:28:40,110 --> 00:28:48,030
warnings in our code just due to that so

00:28:45,150 --> 00:28:53,040
we also put the treat warning is error

00:28:48,030 --> 00:28:55,950
so that's the rule that sometime I mean

00:28:53,040 --> 00:28:57,000
it's hard to apply but you need to do it

00:28:55,950 --> 00:29:01,650
anyway

00:28:57,000 --> 00:29:06,470
and there are things that are just you

00:29:01,650 --> 00:29:09,480
know very hard to make compiled on

00:29:06,470 --> 00:29:12,690
multiple compilers same code without any

00:29:09,480 --> 00:29:15,980
warnings so due to some I mean

00:29:12,690 --> 00:29:19,650
differences just how the things work and

00:29:15,980 --> 00:29:22,590
we made some exceptions for that so we

00:29:19,650 --> 00:29:26,430
disabled fill all the warnings but it's

00:29:22,590 --> 00:29:28,440
not that large list and also do you try

00:29:26,430 --> 00:29:30,510
to use multiple compilers on multiple

00:29:28,440 --> 00:29:33,440
platforms just to prove ourselves that

00:29:30,510 --> 00:29:35,520
we are moving in the right direction

00:29:33,440 --> 00:29:41,610
object-oriented programming

00:29:35,520 --> 00:29:47,190
well reason for using it was 12 we want

00:29:41,610 --> 00:29:48,720
people to think in a ways to see the

00:29:47,190 --> 00:29:51,150
code in the base how it's easier for

00:29:48,720 --> 00:29:54,090
them to understand not for machine to

00:29:51,150 --> 00:29:58,380
understand and that's why one of the

00:29:54,090 --> 00:30:01,320
reasons why we moved to C++ so you have

00:29:58,380 --> 00:30:05,820
various devices so if I have CPU it's

00:30:01,320 --> 00:30:09,450
clearly a device and if I have video

00:30:05,820 --> 00:30:12,480
chip it's a device so I can you know see

00:30:09,450 --> 00:30:15,030
some patterns there and also I can group

00:30:12,480 --> 00:30:18,510
them I can create interfaces so I can

00:30:15,030 --> 00:30:20,790
see ok all sound chips have some

00:30:18,510 --> 00:30:23,820
similarities so I don't put that in

00:30:20,790 --> 00:30:24,380
interface and that's how we started you

00:30:23,820 --> 00:30:26,779
know

00:30:24,380 --> 00:30:28,399
and you know it's it's a way how you

00:30:26,779 --> 00:30:32,000
express your thoughts

00:30:28,399 --> 00:30:36,710
yeah it's object-oriented I think it's

00:30:32,000 --> 00:30:40,190
it's it's it's a good way to just how to

00:30:36,710 --> 00:30:45,799
you can document your thoughts and how

00:30:40,190 --> 00:30:48,340
can you create what they're our first

00:30:45,799 --> 00:30:51,830
problems that we that occurred to us

00:30:48,340 --> 00:30:54,740
were that we had a lot of global

00:30:51,830 --> 00:30:58,159
variables large number of macros we

00:30:54,740 --> 00:31:02,809
still have macros and we had no tools to

00:30:58,159 --> 00:31:09,649
help us from this so it was all manual

00:31:02,809 --> 00:31:14,080
labor yes it's a team effort but we kept

00:31:09,649 --> 00:31:18,769
it close just few people worked on

00:31:14,080 --> 00:31:23,149
moving to the c plus plus and the reason

00:31:18,769 --> 00:31:29,539
for that is that we didn't wish for the

00:31:23,149 --> 00:31:31,279
project to stop during this period so in

00:31:29,539 --> 00:31:33,379
that time then this modernization

00:31:31,279 --> 00:31:37,009
started that was the part of the mass

00:31:33,379 --> 00:31:40,759
project not the main project and error

00:31:37,009 --> 00:31:44,570
Giles was reading the name so after each

00:31:40,759 --> 00:31:47,809
release he did a lot of changes he sent

00:31:44,570 --> 00:31:53,269
me some rag acts he used in his code and

00:31:47,809 --> 00:31:57,259
then I do that thing on the math side

00:31:53,269 --> 00:32:01,129
and we tried to keep that you know

00:31:57,259 --> 00:32:05,690
aligned and just to be easier for us all

00:32:01,129 --> 00:32:09,700
to maintain but what we have learned

00:32:05,690 --> 00:32:13,070
there is that when you have some

00:32:09,700 --> 00:32:15,950
deprecated part of code you just need to

00:32:13,070 --> 00:32:19,009
remove it right away you know after you

00:32:15,950 --> 00:32:21,950
remove last usage of it because

00:32:19,009 --> 00:32:24,799
otherwise people will keep using it in

00:32:21,950 --> 00:32:27,440
the future and thing is that you can't

00:32:24,799 --> 00:32:29,990
sink you know more than 50 people that

00:32:27,440 --> 00:32:32,960
easy especially because they're on the

00:32:29,990 --> 00:32:36,980
different parts of world we also try to

00:32:32,960 --> 00:32:37,789
keep our track or our changes just so we

00:32:36,980 --> 00:32:41,929
can communicate

00:32:37,789 --> 00:32:45,859
to each other and also you know it's

00:32:41,929 --> 00:32:48,499
it's a you see it's 150 megabytes so if

00:32:45,859 --> 00:32:51,679
you just change one thing that is

00:32:48,499 --> 00:32:55,190
commonly use it will take you hours just

00:32:51,679 --> 00:32:57,350
to do that and we try to afterwards

00:32:55,190 --> 00:33:00,259
after all changes between our code

00:32:57,350 --> 00:33:06,259
reformat it so it's easier to maintain

00:33:00,259 --> 00:33:10,369
other words to them you know we used as

00:33:06,259 --> 00:33:13,729
I said radix mostly and I created a lot

00:33:10,369 --> 00:33:16,789
of custom made tools just to recognize

00:33:13,729 --> 00:33:19,399
some patterns for me and to replace text

00:33:16,789 --> 00:33:22,399
that was basically it

00:33:19,399 --> 00:33:23,299
but after last year we tried you know

00:33:22,399 --> 00:33:27,139
gonna be moved

00:33:23,299 --> 00:33:32,149
modern C++ we had really great helper

00:33:27,139 --> 00:33:35,809
client ID and we use this to help us you

00:33:32,149 --> 00:33:39,669
know just do some automatic work for us

00:33:35,809 --> 00:33:43,309
and it really helps I mean you need to

00:33:39,669 --> 00:33:48,099
recheck everything afterwards but it

00:33:43,309 --> 00:33:52,460
helps a lot it catch most of the uses so

00:33:48,099 --> 00:33:54,979
during that work what we have found that

00:33:52,460 --> 00:33:58,009
we are missing something so they created

00:33:54,979 --> 00:33:59,989
some things for us we created make unit

00:33:58,009 --> 00:34:04,099
clear and why is that

00:33:59,989 --> 00:34:07,759
it's thing is that people forget to

00:34:04,099 --> 00:34:11,349
initialize variables and that was the

00:34:07,759 --> 00:34:14,119
most common thing on all devices or

00:34:11,349 --> 00:34:18,409
driver implementations and what we did

00:34:14,119 --> 00:34:21,319
is that we added this one so it's quite

00:34:18,409 --> 00:34:24,079
you know simple and you are actually

00:34:21,319 --> 00:34:28,099
just mem setting everything to zero

00:34:24,079 --> 00:34:30,470
before you after you allocate and then

00:34:28,099 --> 00:34:32,899
you create object on that part of memory

00:34:30,470 --> 00:34:36,909
so you have everything initialized to

00:34:32,899 --> 00:34:41,149
zero and that really helped us you know

00:34:36,909 --> 00:34:42,950
to get us some time so we have enough

00:34:41,149 --> 00:34:46,549
time afterwards to clean up our

00:34:42,950 --> 00:34:50,540
implementation also Varick templates

00:34:46,549 --> 00:34:51,110
helped us a lot because they just you

00:34:50,540 --> 00:34:56,240
know we

00:34:51,110 --> 00:34:59,780
moved a lot of boiler port and there are

00:34:56,240 --> 00:35:01,880
few examples here I mean this is for our

00:34:59,780 --> 00:35:06,050
delegate implementation I'll talk about

00:35:01,880 --> 00:35:10,400
it later but we needed to have this

00:35:06,050 --> 00:35:14,090
delegate traits for each and I mean we

00:35:10,400 --> 00:35:18,290
had for example up to eight parameters

00:35:14,090 --> 00:35:22,460
allowed so we need to have this kind of

00:35:18,290 --> 00:35:27,140
code for each number of types so and the

00:35:22,460 --> 00:35:30,910
same one for second con stacks per that

00:35:27,140 --> 00:35:36,130
was the great one to remove a lot of

00:35:30,910 --> 00:35:40,400
defines in our code and here you can see

00:35:36,130 --> 00:35:43,670
how it works you know it's it's a bit

00:35:40,400 --> 00:35:49,640
specific for our usage because we we

00:35:43,670 --> 00:35:53,630
need to execute our code and for example

00:35:49,640 --> 00:35:56,180
different engines of CPU that we are

00:35:53,630 --> 00:35:58,760
running but also we have antennas of

00:35:56,180 --> 00:36:01,250
view that we are emulating and then you

00:35:58,760 --> 00:36:06,350
need to convert the proper one during

00:36:01,250 --> 00:36:09,890
that time also we have those custom

00:36:06,350 --> 00:36:12,080
operations we use it you know just to to

00:36:09,890 --> 00:36:14,300
recalculate everything during the

00:36:12,080 --> 00:36:18,680
compile time and it really helped to

00:36:14,300 --> 00:36:21,320
improve there are also new features in

00:36:18,680 --> 00:36:25,850
added in C++ 11 that really helped us

00:36:21,320 --> 00:36:31,330
and what they have removed for us a lot

00:36:25,850 --> 00:36:35,870
of assembly and code space that is

00:36:31,330 --> 00:36:39,320
specific for a specific operating system

00:36:35,870 --> 00:36:44,020
and but there are a few things that we

00:36:39,320 --> 00:36:47,600
couldn't be able to remove and those are

00:36:44,020 --> 00:36:52,420
allocation of memory for execution I'm

00:36:47,600 --> 00:36:55,370
not sure you know this is the

00:36:52,420 --> 00:36:59,390
implementation for Linux and windows we

00:36:55,370 --> 00:37:00,369
have the directory compiler in our code

00:36:59,390 --> 00:37:03,220
and

00:37:00,369 --> 00:37:06,759
need to allocate memory in order to

00:37:03,220 --> 00:37:11,740
generate code so we can execute it you

00:37:06,759 --> 00:37:13,809
know we do it on run time so that's what

00:37:11,740 --> 00:37:17,200
we are using right now in order to do

00:37:13,809 --> 00:37:20,170
that there are things that we wish to

00:37:17,200 --> 00:37:25,380
use there are qualities of course and

00:37:20,170 --> 00:37:30,069
one of the reasons is the wait States

00:37:25,380 --> 00:37:34,509
CPUs Peters are actually working that

00:37:30,069 --> 00:37:37,089
way you just block yourself until you

00:37:34,509 --> 00:37:40,119
get the data and that's exactly what is

00:37:37,089 --> 00:37:44,589
does and we have experimented with one

00:37:40,119 --> 00:37:46,390
library time ago but we get bad results

00:37:44,589 --> 00:37:50,769
just because it was tactful in

00:37:46,390 --> 00:37:53,920
implementation he was crashing however

00:37:50,769 --> 00:37:59,009
you know because we have during the

00:37:53,920 --> 00:38:03,130
execution we have a large all devices

00:37:59,009 --> 00:38:07,630
can you have a large stack allocation so

00:38:03,130 --> 00:38:12,039
that makes things harder for us also we

00:38:07,630 --> 00:38:18,880
would like to use modules right now we

00:38:12,039 --> 00:38:23,460
have really long compile time its latest

00:38:18,880 --> 00:38:27,190
harder and that's slow for us I mean

00:38:23,460 --> 00:38:29,710
thing is that we used some things to

00:38:27,190 --> 00:38:34,869
provide to make that faster but you know

00:38:29,710 --> 00:38:36,869
it's still still very slow and also they

00:38:34,869 --> 00:38:40,960
would like to do it yourself

00:38:36,869 --> 00:38:43,720
I'd have tried some tools for static

00:38:40,960 --> 00:38:46,660
analyzers but probably we will just

00:38:43,720 --> 00:38:50,920
start using GSL as a header file and

00:38:46,660 --> 00:38:54,519
latias and from the taps idea we would

00:38:50,920 --> 00:38:58,690
like to make our Android build fully

00:38:54,519 --> 00:38:59,190
working right now it's working but not

00:38:58,690 --> 00:39:03,609
that good

00:38:59,190 --> 00:39:05,739
we don't have iOS support we don't have

00:39:03,609 --> 00:39:09,789
a console builds and the reason for that

00:39:05,739 --> 00:39:11,220
is mostly a legal thing because we can't

00:39:09,789 --> 00:39:14,820
acquire that

00:39:11,220 --> 00:39:18,810
licences for the development because we

00:39:14,820 --> 00:39:21,030
are not the company we would like to do

00:39:18,810 --> 00:39:23,220
to run it on the VR system hollow lines

00:39:21,030 --> 00:39:26,370
and things like that I mean it's not

00:39:23,220 --> 00:39:28,110
just that we are going to do that we

00:39:26,370 --> 00:39:32,160
would like to others to do that as well

00:39:28,110 --> 00:39:34,980
you know and the reason is why wouldn't

00:39:32,160 --> 00:39:37,740
you like you know to put your set and

00:39:34,980 --> 00:39:40,830
just go through our kids and play game

00:39:37,740 --> 00:39:43,500
select the innovations top it it's it's

00:39:40,830 --> 00:39:46,860
it's cool I mean it's how it you know

00:39:43,500 --> 00:39:50,040
you will remember your childhood and

00:39:46,860 --> 00:39:52,500
also what we wish is to try to make it

00:39:50,040 --> 00:39:55,410
more interaction with real Hardware so

00:39:52,500 --> 00:39:57,990
if we emulate something we wanted to be

00:39:55,410 --> 00:40:00,530
able to connect to the outside world and

00:39:57,990 --> 00:40:03,230
to work we have the networking support

00:40:00,530 --> 00:40:08,640
it's working I mean you can you know

00:40:03,230 --> 00:40:11,880
start them always Mac OS emulation for

00:40:08,640 --> 00:40:14,480
the Motorola era or you can start a PC

00:40:11,880 --> 00:40:17,460
computer with Windows and you can browse

00:40:14,480 --> 00:40:19,290
on the internet it will not show you

00:40:17,460 --> 00:40:23,010
much because we don't have the

00:40:19,290 --> 00:40:27,260
JavaScript support but it will work we

00:40:23,010 --> 00:40:31,440
to prevent to help us with we used GE

00:40:27,260 --> 00:40:32,940
project generator and joonie project

00:40:31,440 --> 00:40:35,130
generator Abba we have a lightning talk

00:40:32,940 --> 00:40:42,740
on this tonight so I would be really

00:40:35,130 --> 00:40:47,520
quick we use it because it was you know

00:40:42,740 --> 00:40:49,650
it could generate all for all compilers

00:40:47,520 --> 00:40:51,950
that we are targeting it was based on

00:40:49,650 --> 00:40:56,450
you old one and it was really easy

00:40:51,950 --> 00:41:00,510
extensible and it enables us to create

00:40:56,450 --> 00:41:03,480
smaller custom builds so for example I

00:41:00,510 --> 00:41:06,870
could make I could say okay create me a

00:41:03,480 --> 00:41:10,230
built just for Commodore 64 and I don't

00:41:06,870 --> 00:41:12,180
get just Commodore 64 and all related

00:41:10,230 --> 00:41:16,010
you know devices that are needed for

00:41:12,180 --> 00:41:19,560
compilation so we have some magic there

00:41:16,010 --> 00:41:23,430
and this is how it actually looks like I

00:41:19,560 --> 00:41:27,510
mean it's quite simple it's easy to

00:41:23,430 --> 00:41:31,980
to fall you know what it's doing so that

00:41:27,510 --> 00:41:34,470
was the main reason why we use it okay

00:41:31,980 --> 00:41:38,339
let's see you on a small example how

00:41:34,470 --> 00:41:41,640
many actually works you have I used a

00:41:38,339 --> 00:41:45,240
really small example you have you're

00:41:41,640 --> 00:41:48,809
just a state class to represent your

00:41:45,240 --> 00:41:51,329
emulator there was a dummy output okay

00:41:48,809 --> 00:41:54,750
you have the address map here and you

00:41:51,329 --> 00:41:57,450
can see in address map that it's a bit

00:41:54,750 --> 00:41:59,970
adders map and you have the wrong at the

00:41:57,450 --> 00:42:04,250
beginning and you have a small amount of

00:41:59,970 --> 00:42:09,329
the front here you have IO ports

00:42:04,250 --> 00:42:15,300
connected you have that a B right which

00:42:09,329 --> 00:42:17,819
will lead you to the to the other it's

00:42:15,300 --> 00:42:21,780
using delegates here I will explain what

00:42:17,819 --> 00:42:25,460
delegates are and since this machine

00:42:21,780 --> 00:42:29,579
doesn't support input here there is

00:42:25,460 --> 00:42:32,329
empty input definition and you have just

00:42:29,579 --> 00:42:37,829
the definition of parameters needed to

00:42:32,329 --> 00:42:41,849
make good default configuration for

00:42:37,829 --> 00:42:44,309
errors two three to configuration and

00:42:41,849 --> 00:42:48,349
you have here machine configuration

00:42:44,309 --> 00:42:53,040
which will define which CPU is used and

00:42:48,349 --> 00:42:57,059
you connect here the memory map IO map

00:42:53,040 --> 00:42:59,549
you put some callbacks here and at the

00:42:57,059 --> 00:43:03,950
end you have the ROM start this is the

00:42:59,549 --> 00:43:09,000
place in which you put the what are the

00:43:03,950 --> 00:43:11,010
crc32 and sha-1 of your roms and you

00:43:09,000 --> 00:43:13,859
have just the definition which will help

00:43:11,010 --> 00:43:18,390
you find it and that's about it I mean

00:43:13,859 --> 00:43:21,390
it's it's quite simple and you see that

00:43:18,390 --> 00:43:26,089
it's mostly backroads and the reason is

00:43:21,390 --> 00:43:27,839
we try to to make it more look like

00:43:26,089 --> 00:43:31,589
documentation which describes the

00:43:27,839 --> 00:43:35,819
machine and not C++ code

00:43:31,589 --> 00:43:38,249
and that was I mean if you take a look

00:43:35,819 --> 00:43:40,289
at the device implementation that's

00:43:38,249 --> 00:43:43,349
between suppose what's code there is no

00:43:40,289 --> 00:43:47,549
things like this but if you look the the

00:43:43,349 --> 00:43:50,130
emulator called it's about this and I

00:43:47,549 --> 00:43:52,380
mentioned delegates what are the

00:43:50,130 --> 00:43:55,079
delegates if you have been on the

00:43:52,380 --> 00:43:59,670
include OS a presentation you have seen

00:43:55,079 --> 00:44:02,279
they're using them also and I didn't

00:43:59,670 --> 00:44:06,569
know that so they're using totally

00:44:02,279 --> 00:44:10,709
different start point but basically idea

00:44:06,569 --> 00:44:13,609
is same you have some class here you

00:44:10,709 --> 00:44:17,039
have the type definition here just to

00:44:13,609 --> 00:44:20,689
the player for the callback delegate and

00:44:17,039 --> 00:44:25,199
you create we use some macro to help us

00:44:20,689 --> 00:44:28,650
for the code to just to look nicer so

00:44:25,199 --> 00:44:31,469
you just have this funk which will take

00:44:28,650 --> 00:44:33,689
you the class and you can split the

00:44:31,469 --> 00:44:35,640
class and what method you are calling

00:44:33,689 --> 00:44:38,999
and you could be lookin connected it to

00:44:35,640 --> 00:44:41,819
the instance of class you are calling

00:44:38,999 --> 00:44:43,349
and what we need delegate we need

00:44:41,819 --> 00:44:47,849
delegate because we need to provide

00:44:43,349 --> 00:44:52,229
callbacks and we need to do it after

00:44:47,849 --> 00:44:57,150
sometimes after initialization so it's

00:44:52,229 --> 00:45:00,569
it's a it's a bit difficult sometimes

00:44:57,150 --> 00:45:02,789
because you actually are not sure what

00:45:00,569 --> 00:45:05,069
is connected where until everything is

00:45:02,789 --> 00:45:08,609
initialized so you need to have that

00:45:05,069 --> 00:45:11,699
laid laid by and it's really a minimal

00:45:08,609 --> 00:45:15,089
cost because it's using method function

00:45:11,699 --> 00:45:18,859
pointers and since this was implemented

00:45:15,089 --> 00:45:21,630
the period of suppose was 98 it had some

00:45:18,859 --> 00:45:25,859
strange things in it so we cleared it up

00:45:21,630 --> 00:45:28,319
and we moved it to show you the example

00:45:25,859 --> 00:45:31,049
with templates we use now variadic

00:45:28,319 --> 00:45:34,769
templates we cleaned up things and also

00:45:31,049 --> 00:45:39,349
we have moved moved it so it can work on

00:45:34,769 --> 00:45:41,750
the arm 64 it can work on nips in

00:45:39,349 --> 00:45:43,900
various platforms

00:45:41,750 --> 00:45:47,810
and you can see here that you have

00:45:43,900 --> 00:45:53,410
basically mostly about two times speed

00:45:47,810 --> 00:45:53,410
then using the sed functional fine and

00:45:53,830 --> 00:45:59,840
yeah that's that's about it I mean I

00:45:56,690 --> 00:46:04,520
would not go into much details about it

00:45:59,840 --> 00:46:08,270
if you're interested there is you have a

00:46:04,520 --> 00:46:13,849
link here it's public you can use it you

00:46:08,270 --> 00:46:16,490
can try it we have also a lot of

00:46:13,849 --> 00:46:20,510
third-party libraries I will just

00:46:16,490 --> 00:46:24,260
mention four of them one I will start

00:46:20,510 --> 00:46:28,790
from bottom up geomod I think it's

00:46:24,260 --> 00:46:33,200
really interesting and it helps a lot

00:46:28,790 --> 00:46:36,260
with adding support for the 3d hardware

00:46:33,200 --> 00:46:39,560
and they are actually doing the

00:46:36,260 --> 00:46:43,190
calculations ourself when we are

00:46:39,560 --> 00:46:47,030
emulating for example voodoo card and we

00:46:43,190 --> 00:46:50,630
are working on emulation of model to

00:46:47,030 --> 00:46:54,410
machine then we need to do calculations

00:46:50,630 --> 00:46:57,830
ourselves and to do that we right now

00:46:54,410 --> 00:47:01,280
using geo map we start using it just a

00:46:57,830 --> 00:47:06,650
few places but I think we will move on

00:47:01,280 --> 00:47:08,450
we use for plugins and the reason for it

00:47:06,650 --> 00:47:11,089
is that people would like to have some

00:47:08,450 --> 00:47:14,660
things that we considered harmful like

00:47:11,089 --> 00:47:19,010
support for the things like high scores

00:47:14,660 --> 00:47:21,830
which can affect the emulation itself so

00:47:19,010 --> 00:47:24,290
we can't officially support it but you

00:47:21,830 --> 00:47:27,200
can use it use a plugin for it and you

00:47:24,290 --> 00:47:30,010
can have a high score support on

00:47:27,200 --> 00:47:35,200
machines that didn't say there states

00:47:30,010 --> 00:47:38,390
also we are using rapid Jason in

00:47:35,200 --> 00:47:44,150
correlation with VGA fix that is a

00:47:38,390 --> 00:47:47,210
graphics library and media fix is app

00:47:44,150 --> 00:47:50,000
agnostic so and support a lot of

00:47:47,210 --> 00:47:52,700
rendering backends and reason for using

00:47:50,000 --> 00:47:54,900
it is that we would like to see for you

00:47:52,700 --> 00:47:57,300
to see that those effects

00:47:54,900 --> 00:48:01,770
you know on each and every platform but

00:47:57,300 --> 00:48:03,990
we also do not wish to create a large

00:48:01,770 --> 00:48:06,570
boiler plate of our code you know to

00:48:03,990 --> 00:48:08,520
have support for OpenGL to have direct

00:48:06,570 --> 00:48:12,260
export because we are not graphics

00:48:08,520 --> 00:48:14,880
programmers we are emulator guys and

00:48:12,260 --> 00:48:18,630
thing is that it also support a lot of

00:48:14,880 --> 00:48:20,880
you know platforms so everything that we

00:48:18,630 --> 00:48:24,300
actually need to support is there even

00:48:20,880 --> 00:48:28,050
more and this is how it looks like and

00:48:24,300 --> 00:48:31,290
if you have worked with the shaders for

00:48:28,050 --> 00:48:36,470
the OpenGL it's almost like that

00:48:31,290 --> 00:48:40,230
and it can transpile into metal support

00:48:36,470 --> 00:48:43,310
you can spot directives so you did that

00:48:40,230 --> 00:48:46,440
before you know it is the part of

00:48:43,310 --> 00:48:49,950
compile in the compile time and you have

00:48:46,440 --> 00:48:52,590
that up and running okay what we have

00:48:49,950 --> 00:48:56,880
also learned this make your own code

00:48:52,590 --> 00:49:01,050
public you will get better feedback from

00:48:56,880 --> 00:49:05,150
users you will be able to do a lot of

00:49:01,050 --> 00:49:07,770
cool stuff and we moved to the github

00:49:05,150 --> 00:49:14,070
just because of that so we can better

00:49:07,770 --> 00:49:18,360
communicate and also it really moved our

00:49:14,070 --> 00:49:22,560
pull requests a lot we're really

00:49:18,360 --> 00:49:25,620
grateful that we have done that why

00:49:22,560 --> 00:49:28,590
should you join the open-source project

00:49:25,620 --> 00:49:31,770
well I think everyone should you know

00:49:28,590 --> 00:49:33,900
join at least one just to share your

00:49:31,770 --> 00:49:36,630
ideas you know you all have different

00:49:33,900 --> 00:49:38,340
ideas how things should be done you

00:49:36,630 --> 00:49:40,730
would like to I mean you can experiment

00:49:38,340 --> 00:49:44,580
there and you can improve your knowledge

00:49:40,730 --> 00:49:46,830
you can learn from others that's you

00:49:44,580 --> 00:49:49,350
know most important thing and also you

00:49:46,830 --> 00:49:52,800
can meet a lot of people learn from them

00:49:49,350 --> 00:49:56,820
go to conferences and things like that

00:49:52,800 --> 00:49:59,850
yeah so it's it's really cool stuff what

00:49:56,820 --> 00:50:02,870
we dish to offer to C++ from our side

00:49:59,850 --> 00:50:05,680
well we gained a lot of experience

00:50:02,870 --> 00:50:11,180
especially with

00:50:05,680 --> 00:50:14,120
using these delegates callbacks so I

00:50:11,180 --> 00:50:18,080
think we can create a proposal for such

00:50:14,120 --> 00:50:23,150
thing I think I did it already but I was

00:50:18,080 --> 00:50:25,700
not presented when Cole was there I

00:50:23,150 --> 00:50:27,470
didn't know about it but never mind I

00:50:25,700 --> 00:50:32,980
mean I didn't mean it made an official

00:50:27,470 --> 00:50:37,550
one so well we would also like to help

00:50:32,980 --> 00:50:40,400
input chandran based on these delegates

00:50:37,550 --> 00:50:45,710
so for that is mostly for the other

00:50:40,400 --> 00:50:47,960
study group that's now not just about 2d

00:50:45,710 --> 00:50:52,190
graphics but also about the inputs and

00:50:47,960 --> 00:50:55,430
also I think we will be good playground

00:50:52,190 --> 00:50:57,380
to test this mat for 2d and 3d graphics

00:50:55,430 --> 00:51:01,480
because there are a lot of things going

00:50:57,380 --> 00:51:04,490
on and I think is that you know also

00:51:01,480 --> 00:51:07,370
runtime shader transpiling it could be

00:51:04,490 --> 00:51:11,720
interesting to join in and let us be

00:51:07,370 --> 00:51:15,740
your playground you can all join and we

00:51:11,720 --> 00:51:18,470
can all play together it's a sandbox ok

00:51:15,740 --> 00:51:20,960
I would like to make a small demo for

00:51:18,470 --> 00:51:29,900
you I know you will be waiting for this

00:51:20,960 --> 00:51:33,350
but yeah I mean for the timings question

00:51:29,900 --> 00:51:39,050
was if is RAM emulation was that

00:51:33,350 --> 00:51:42,710
accurate and well this thing is that we

00:51:39,050 --> 00:51:44,900
are now basically it's not that accurate

00:51:42,710 --> 00:51:48,020
you know because that part is not

00:51:44,900 --> 00:51:51,790
implemented like that but CPU emulation

00:51:48,020 --> 00:51:56,270
speed is real it's really want one so

00:51:51,790 --> 00:51:59,210
other things than that you would for

00:51:56,270 --> 00:52:01,430
this we would need to work on it to make

00:51:59,210 --> 00:52:05,420
it you know just want one with the

00:52:01,430 --> 00:52:08,570
reality but thing is that for example

00:52:05,420 --> 00:52:10,940
for the sound it's really important is

00:52:08,570 --> 00:52:15,080
are really important and otherwise you

00:52:10,940 --> 00:52:18,200
will get wrong results same go I mean if

00:52:15,080 --> 00:52:18,990
you're emulating latest hardware it's

00:52:18,200 --> 00:52:22,050
it's

00:52:18,990 --> 00:52:24,720
easy I mean they're using you know a lot

00:52:22,050 --> 00:52:26,640
of chips which are well-documented it's

00:52:24,720 --> 00:52:30,390
not that hard but if you're emulating

00:52:26,640 --> 00:52:35,280
some old hardware that was cheap they

00:52:30,390 --> 00:52:37,770
probably use some tricks to get things

00:52:35,280 --> 00:52:40,500
on screen so actually what you need to

00:52:37,770 --> 00:52:42,840
do is you need to emulate all the tricks

00:52:40,500 --> 00:52:45,350
that they have used in the back and

00:52:42,840 --> 00:52:51,300
that's that could be really have a job

00:52:45,350 --> 00:52:52,580
so let me just do one I always do the

00:52:51,300 --> 00:52:57,840
wrong one

00:52:52,580 --> 00:53:00,720
okay well let's see well because it was

00:52:57,840 --> 00:53:08,910
a Commodore 64 I would like this show

00:53:00,720 --> 00:53:14,420
you the other machine it's a spectrum

00:53:08,910 --> 00:53:14,420
and if we can do something like this

00:53:23,240 --> 00:53:34,470
just a second and you can see if this is

00:53:29,400 --> 00:53:39,630
not the really good P because the

00:53:34,470 --> 00:53:45,290
emulation of the CRT gives it but it's

00:53:39,630 --> 00:53:51,930
how it would look like and if I through

00:53:45,290 --> 00:53:57,060
and if I go and do this this is our

00:53:51,930 --> 00:54:04,950
internal menu so you can go and change

00:53:57,060 --> 00:54:08,460
some parameters which we are using 2d so

00:54:04,950 --> 00:54:15,330
if I play a bit with some parameters let

00:54:08,460 --> 00:54:23,250
me see this one change some colors

00:54:15,330 --> 00:54:27,000
fact here see and you can get a really

00:54:23,250 --> 00:54:30,520
bad TV connected to your machine so that

00:54:27,000 --> 00:54:33,580
was basically intention

00:54:30,520 --> 00:54:39,610
and you're probably looking for the real

00:54:33,580 --> 00:54:42,640
gamers I will I will wait without the

00:54:39,610 --> 00:54:50,560
effects just to to get a little time

00:54:42,640 --> 00:54:55,720
speeding don't tell them please okay put

00:54:50,560 --> 00:54:59,500
this one and if you can insert coins and

00:54:55,720 --> 00:55:02,800
we can start playing games so anyway I

00:54:59,500 --> 00:55:05,980
am really bad at games I don't play them

00:55:02,800 --> 00:55:08,590
much and I just would like to know how

00:55:05,980 --> 00:55:14,200
they work and to make them work you know

00:55:08,590 --> 00:55:17,560
and it's a oh sorry wrong but ah excuse

00:55:14,200 --> 00:55:21,060
me it was the wrong button while we are

00:55:17,560 --> 00:55:33,300
here I would like I will probably need

00:55:21,060 --> 00:55:33,300
assistance from Jason it was right

00:55:39,600 --> 00:55:46,570
okay here you have a debugger running so

00:55:43,060 --> 00:55:49,570
I will show you like with that so that's

00:55:46,570 --> 00:55:55,830
more so please Jason it's sis which

00:55:49,570 --> 00:55:55,830
number 14 96

00:56:02,250 --> 00:56:08,070
so you can use that and you can play

00:56:04,560 --> 00:56:11,220
your games and the good stuff is here if

00:56:08,070 --> 00:56:20,430
you wish to do debug things you know you

00:56:11,220 --> 00:56:24,990
can go to the memory and might I mean we

00:56:20,430 --> 00:56:28,650
can large that but it's a it's a bit

00:56:24,990 --> 00:56:32,310
hard and on this keyboard but anyway you

00:56:28,650 --> 00:56:35,250
can go through the memory and watch for

00:56:32,310 --> 00:56:39,450
the states of each devices you have here

00:56:35,250 --> 00:56:43,950
and it's really it's really helping you

00:56:39,450 --> 00:56:51,270
to get into into in to be able to

00:56:43,950 --> 00:56:53,460
develop for such an old machine okay

00:56:51,270 --> 00:57:14,280
let's then move to the questions if you

00:56:53,460 --> 00:57:17,460
have some well we have regression tests

00:57:14,280 --> 00:57:21,840
but regression tests are done on a

00:57:17,460 --> 00:57:26,910
specific way I mean we we we don't have

00:57:21,840 --> 00:57:30,420
the the testitude for the just doing the

00:57:26,910 --> 00:57:33,420
code jacks you know because it's a it's

00:57:30,420 --> 00:57:36,390
a thing that people do not like to do I

00:57:33,420 --> 00:57:41,700
mean that's sometimes it's hard because

00:57:36,390 --> 00:57:43,770
you need to test something that you know

00:57:41,700 --> 00:57:46,440
you don't know how it's working so how

00:57:43,770 --> 00:57:48,420
would you test it it's it's it's a bit

00:57:46,440 --> 00:57:50,910
tricky you know you you you need to I

00:57:48,420 --> 00:57:56,400
mean if you have good documentation then

00:57:50,910 --> 00:57:59,130
it's easy but we have integration tests

00:57:56,400 --> 00:58:01,220
basically and what we test is just

00:57:59,130 --> 00:58:04,440
looping through the usual test cases

00:58:01,220 --> 00:58:06,810
going around and checking if there were

00:58:04,440 --> 00:58:09,960
differences in execution of those if

00:58:06,810 --> 00:58:13,590
there were crashes especially so we say

00:58:09,960 --> 00:58:15,299
the back traces and also we do if there

00:58:13,590 --> 00:58:18,359
are differences in school

00:58:15,299 --> 00:58:21,269
for example after 20 seconds it must be

00:58:18,359 --> 00:58:23,279
perfectly same you know and if there is

00:58:21,269 --> 00:58:26,279
a difference then there is probably some

00:58:23,279 --> 00:58:28,169
graphics issue and sometimes is expected

00:58:26,279 --> 00:58:42,089
because you've changed something but we

00:58:28,169 --> 00:58:45,929
need to confirm that the question was

00:58:42,089 --> 00:58:50,999
can be play also 3d games or is it just

00:58:45,929 --> 00:58:53,579
for the shaders we have emulation of 3d

00:58:50,999 --> 00:58:57,509
games but we don't use the great

00:58:53,579 --> 00:59:01,799
graphics capabilities of your GPU right

00:58:57,509 --> 00:59:03,779
now thing is that there is a great

00:59:01,799 --> 00:59:06,269
difference between hardware and pasta

00:59:03,779 --> 00:59:09,569
now and we would actually need to do the

00:59:06,269 --> 00:59:12,869
mapping between those to make it work

00:59:09,569 --> 00:59:16,589
the same and one of the things that we

00:59:12,869 --> 00:59:21,419
are waiting for the VGA fix outer to

00:59:16,589 --> 00:59:25,259
work a runtime transport transpiling of

00:59:21,419 --> 00:59:28,799
the shaders so we can actually do that

00:59:25,259 --> 00:59:32,880
so that's right now we are only using it

00:59:28,799 --> 00:59:41,609
to to improve your you know to improve

00:59:32,880 --> 00:59:43,649
the display yeah the question was what's

00:59:41,609 --> 00:59:48,959
the most you current Hardware be

00:59:43,649 --> 00:59:53,639
emulating today well we can say it's

00:59:48,959 --> 00:59:59,459
it's it's easier to texture from this

00:59:53,639 --> 01:00:02,489
pentamirror we do not like to get the

00:59:59,459 --> 01:00:05,069
legal issues you know and that's I mean

01:00:02,489 --> 01:00:07,859
there are a lot of big players there and

01:00:05,069 --> 01:00:12,630
we do not wish to I mean there are still

01:00:07,859 --> 01:00:16,889
games sold for the ps2 and we do I mean

01:00:12,630 --> 01:00:20,990
they're made by sometime and we do not

01:00:16,889 --> 01:00:24,440
wish to break that and we do not wish to

01:00:20,990 --> 01:00:28,940
to have a problems with big companies we

01:00:24,440 --> 01:00:32,900
would rather like them to take this part

01:00:28,940 --> 01:00:37,220
of codes and use it internally if they

01:00:32,900 --> 01:00:40,750
wish and we will be sure to help them if

01:00:37,220 --> 01:00:45,410
they wish to but thing is that yeah

01:00:40,750 --> 01:00:49,280
we also emulate you know mostly from the

01:00:45,410 --> 01:00:52,720
mid 90s let's say there are some from

01:00:49,280 --> 01:00:56,780
the 2000s beginning of the 2000s with

01:00:52,720 --> 01:01:09,020
let's say the last period of time which

01:00:56,780 --> 01:01:11,090
we emulate gudiya the question was how

01:01:09,020 --> 01:01:14,050
does the switch from the C to C post was

01:01:11,090 --> 01:01:18,380
help us develop for the new harder well

01:01:14,050 --> 01:01:21,710
it helped us in a way that we were able

01:01:18,380 --> 01:01:24,590
easier to develop new emulation that's

01:01:21,710 --> 01:01:29,060
for sure because we were we were able to

01:01:24,590 --> 01:01:31,730
see patterns and to extend some things

01:01:29,060 --> 01:01:34,160
and it was easier for us for example to

01:01:31,730 --> 01:01:38,210
to emulate some video chips which had

01:01:34,160 --> 01:01:39,859
slightly smaller differences and you can

01:01:38,210 --> 01:01:43,250
actually see that in code so it's easy

01:01:39,859 --> 01:01:46,490
to follow and also it helped us to

01:01:43,250 --> 01:01:48,530
develop for the latest hardware in a

01:01:46,490 --> 01:01:51,380
sense that hardware that we are running

01:01:48,530 --> 01:01:51,710
at because we gain some speed because of

01:01:51,380 --> 01:01:54,920
the

01:01:51,710 --> 01:01:58,030
optimizers are good at optimizing code

01:01:54,920 --> 01:02:01,869
that is made for the c++ you know it's

01:01:58,030 --> 01:02:04,490
after all if you are using C code and

01:02:01,869 --> 01:02:07,369
C++ compiler it probably will not be

01:02:04,490 --> 01:02:13,330
that good optimized as because this is

01:02:07,369 --> 01:02:13,330
their major you know any more questions

01:02:22,990 --> 01:02:28,250
the question was for the PC emulation

01:02:26,480 --> 01:02:31,340
there was temperature sensors saying

01:02:28,250 --> 01:02:32,880
that it's zero and is it emulated or not

01:02:31,340 --> 01:02:36,589
no it's not family

01:02:32,880 --> 01:02:40,619
and think that I'm working right now is

01:02:36,589 --> 01:02:46,890
gathering all the board information and

01:02:40,619 --> 01:02:50,880
biases for PCI era of PC computers so

01:02:46,890 --> 01:02:57,150
I'm trying to get that get it running so

01:02:50,880 --> 01:03:00,749
probably we will have about 5,000 more

01:02:57,150 --> 01:03:02,609
machines anyway quite soon yeah but it

01:03:00,749 --> 01:03:06,269
will it will take a lot of effort I

01:03:02,609 --> 01:03:07,859
start to build one machine for myself so

01:03:06,269 --> 01:03:09,869
I can experiment I mean that that's the

01:03:07,859 --> 01:03:13,680
only way you could actually see how it

01:03:09,869 --> 01:03:15,900
works well if there is no more questions

01:03:13,680 --> 01:03:20,359
I would like to thank you all for your

01:03:15,900 --> 01:03:20,359

YouTube URL: https://www.youtube.com/watch?v=wAUnUWYaA5s


