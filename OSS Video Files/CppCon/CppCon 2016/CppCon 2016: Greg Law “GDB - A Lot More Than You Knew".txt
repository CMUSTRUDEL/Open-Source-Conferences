Title: CppCon 2016: Greg Law “GDB - A Lot More Than You Knew"
Publication date: 2016-10-02
Playlist: CppCon 2016
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016
—
If you’re writing C++ for anything other than Windows, chances are that you occasionally break out GDB. This session presents some of the lesser known features of GDB that can change the way you debug. GDB has come a long way in the last few years and now does so much more than break, print, step and continue. Reversible debugging; Non-Stop Mode; Multi-process Debugging; and Dynamic Printf are but some of its best features, and its built-in Python scripting is particularly powerful. Join Undo co-founder and CEO, Greg Law, as he takes you through a series of demos to show some amazing tricks with GDB and some of its powerful new (and not-so-new) features that you may not have heard of.
— 
Greg Law
CEO, Undo Ltd
Greg is a software geek at heart, but likes to keep one foot in the software world and one foot in the business world. He finds it particularly rewarding to turn innovative software technology into “real” business development. Greg has over 20 years of experience in both academia and innovative start-up software companies. In 2005 he co-founded Undo Software, which he now runs.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,290 --> 00:00:10,950
okay I guess we'll we'll get going so we

00:00:03,510 --> 00:00:12,960
don't run out of time so I'm going to

00:00:10,950 --> 00:00:16,920
kick off just with a bit of context

00:00:12,960 --> 00:00:20,160
because just because it's kind of fun so

00:00:16,920 --> 00:00:21,920
this guy hope you can see him washed out

00:00:20,160 --> 00:00:25,260
there but chap called Maurice Wilkes and

00:00:21,920 --> 00:00:27,990
I think has as good a claim as anybody

00:00:25,260 --> 00:00:30,090
to having been the world's first

00:00:27,990 --> 00:00:32,910
programmer because he was the first

00:00:30,090 --> 00:00:35,280
person to write code on a

00:00:32,910 --> 00:00:37,350
general-purpose machine to do something

00:00:35,280 --> 00:00:39,120
other than just prove the experimental

00:00:37,350 --> 00:00:41,010
machine they were building worked right

00:00:39,120 --> 00:00:44,340
in first person to write what we think

00:00:41,010 --> 00:00:46,620
of as a program to do real work and in

00:00:44,340 --> 00:00:48,690
his memoirs he says he remembers this

00:00:46,620 --> 00:00:50,610
moment which I think everybody in the

00:00:48,690 --> 00:00:53,100
room will probably be familiar with

00:00:50,610 --> 00:00:54,660
which is that that realization that is

00:00:53,100 --> 00:00:56,489
going to spend a lot of his the rest of

00:00:54,660 --> 00:00:58,710
his life finding and fixing bugs and his

00:00:56,489 --> 00:01:00,870
own programs because the term bugs and

00:00:58,710 --> 00:01:03,750
debugging hadn't been invented then and

00:01:00,870 --> 00:01:06,020
I mean I see a few sort of smiles around

00:01:03,750 --> 00:01:08,820
the room and I certainly remember that

00:01:06,020 --> 00:01:10,460
myself and a little while ago my

00:01:08,820 --> 00:01:13,020
daughter started programming in scratch

00:01:10,460 --> 00:01:14,610
and she said you know it's a lot of fun

00:01:13,020 --> 00:01:17,880
but I have to do an awful lot of times

00:01:14,610 --> 00:01:19,530
to get into work which was kind of cool

00:01:17,880 --> 00:01:20,939
because now like she could understand a

00:01:19,530 --> 00:01:23,189
little bit about what this company with

00:01:20,939 --> 00:01:26,250
a funny name that dad started actually

00:01:23,189 --> 00:01:28,290
does so could you know that was then

00:01:26,250 --> 00:01:30,270
back in the 40s now nothing has changed

00:01:28,290 --> 00:01:33,479
you know if anything the problems have

00:01:30,270 --> 00:01:35,189
just got much greater right so you know

00:01:33,479 --> 00:01:36,630
we yes the tools and everything of

00:01:35,189 --> 00:01:38,460
advanced and the you know we write in

00:01:36,630 --> 00:01:40,110
high-level languages rather than the

00:01:38,460 --> 00:01:44,040
ones and zeros that I'm sure Morris

00:01:40,110 --> 00:01:45,689
Wilkes was doing back then but the order

00:01:44,040 --> 00:01:47,360
of the problem is just like exploding

00:01:45,689 --> 00:01:50,000
right and the modern machine is running

00:01:47,360 --> 00:01:52,920
billions of instructions every second

00:01:50,000 --> 00:01:54,509
it's almost certainly talking to lots of

00:01:52,920 --> 00:01:56,729
other machines and lots of other

00:01:54,509 --> 00:01:58,380
processes and if you kind of think about

00:01:56,729 --> 00:01:59,729
it and those in those sensors I mean it

00:01:58,380 --> 00:02:02,130
really is the ultimate needle in a

00:01:59,729 --> 00:02:05,149
haystack problem right and it's kind of

00:02:02,130 --> 00:02:07,469
surprising that we can ever fix anything

00:02:05,149 --> 00:02:08,970
right all that anything ever works that

00:02:07,469 --> 00:02:10,379
people get frustrated with how sort of

00:02:08,970 --> 00:02:12,480
broken things are but actually I think

00:02:10,379 --> 00:02:13,530
we do remarkably well considering the

00:02:12,480 --> 00:02:15,510
degree of the complexity

00:02:13,530 --> 00:02:17,100
but the way that we one of the ways that

00:02:15,510 --> 00:02:18,300
we do that and we handle that obviously

00:02:17,100 --> 00:02:19,950
prevention is always better than cure

00:02:18,300 --> 00:02:21,390
and lots of things we can do to prevent

00:02:19,950 --> 00:02:23,959
bugs in the first place and that's like

00:02:21,390 --> 00:02:26,520
you know just to prevent that obvious

00:02:23,959 --> 00:02:29,160
criticism that's always the preference

00:02:26,520 --> 00:02:31,590
but whatever you do happens right

00:02:29,160 --> 00:02:32,850
and you will need some cure so what do

00:02:31,590 --> 00:02:34,560
we do when things don't work in I mean

00:02:32,850 --> 00:02:35,819
it as Morris found and there's my

00:02:34,560 --> 00:02:38,850
daughter found and as we all know it

00:02:35,819 --> 00:02:40,290
never works first time right and and and

00:02:38,850 --> 00:02:42,270
more often than not it doesn't work when

00:02:40,290 --> 00:02:43,620
you ship it so what do we do to find

00:02:42,270 --> 00:02:46,010
that needle in a haystack we have

00:02:43,620 --> 00:02:49,019
various tools and techniques that we use

00:02:46,010 --> 00:02:50,880
from printf to you know

00:02:49,019 --> 00:02:52,739
defensive programming so it's stuff like

00:02:50,880 --> 00:02:55,350
Coverity and all these things I'm only

00:02:52,739 --> 00:02:56,700
going to talk about gdb today because we

00:02:55,350 --> 00:02:58,260
only have an hour and it's like it's a

00:02:56,700 --> 00:03:01,920
you know it's a huge con you could do a

00:02:58,260 --> 00:03:03,239
whole conference on just this stuff and

00:03:01,920 --> 00:03:11,160
in fact I'm only going to talk about

00:03:03,239 --> 00:03:12,569
sort of gdv itself right so I'm not

00:03:11,160 --> 00:03:15,420
going to do this like a whole bunch of

00:03:12,569 --> 00:03:17,329
front ends and and things that are cool

00:03:15,420 --> 00:03:19,739
you can see the stuff that we make

00:03:17,329 --> 00:03:21,390
downstairs we're here you come and get a

00:03:19,739 --> 00:03:22,590
demo of our stuff I'm not going to do

00:03:21,390 --> 00:03:24,900
much of it here today you can also get

00:03:22,590 --> 00:03:28,470
very funky t-shirt like this if you want

00:03:24,900 --> 00:03:30,750
to see lime people are here JetBrains

00:03:28,470 --> 00:03:32,010
they have a nice front end onto gdb that

00:03:30,750 --> 00:03:33,450
works with our stuff as well I can also

00:03:32,010 --> 00:03:35,280
show you that so there's a whole bunch

00:03:33,450 --> 00:03:37,019
different front ends Eclipse and people

00:03:35,280 --> 00:03:38,130
use it within Emacs people I'm not going

00:03:37,019 --> 00:03:39,630
to talk about any of that stuff beyond

00:03:38,130 --> 00:03:41,670
what I've just said we're just going to

00:03:39,630 --> 00:03:43,739
talk about gdb itself right and just

00:03:41,670 --> 00:03:46,739
look at the features that it has in

00:03:43,739 --> 00:03:49,799
itself rather than funky ways to drive

00:03:46,739 --> 00:03:51,900
it this is basically a kind of mishmash

00:03:49,799 --> 00:03:54,269
of stuff that I've thought I've

00:03:51,900 --> 00:03:56,340
collected over the years right so I'll

00:03:54,269 --> 00:03:58,019
undo you know there's a whole bunch of

00:03:56,340 --> 00:03:59,489
interface is actually on to undo gdb is

00:03:58,019 --> 00:04:01,530
just one but it's it's what probably

00:03:59,489 --> 00:04:03,030
setting the most commonly using the

00:04:01,530 --> 00:04:06,750
default one and over the years I've

00:04:03,030 --> 00:04:08,430
picked up like with customers and you

00:04:06,750 --> 00:04:10,370
know are just on my own different kind

00:04:08,430 --> 00:04:14,220
of tips and tricks and things that work

00:04:10,370 --> 00:04:16,380
I'm not I'm no gdb guru right I'm sort

00:04:14,220 --> 00:04:19,560
of some way I suppose between newbie and

00:04:16,380 --> 00:04:21,000
guru there almost certainly be things

00:04:19,560 --> 00:04:23,340
that people in the audience know that I

00:04:21,000 --> 00:04:25,229
don't know I'm happy for this to be so

00:04:23,340 --> 00:04:26,850
slightly interactive so you know just

00:04:25,229 --> 00:04:28,890
like shout if you

00:04:26,850 --> 00:04:30,690
you've got something to add I've missed

00:04:28,890 --> 00:04:34,020
a bit or misled or or you've got a

00:04:30,690 --> 00:04:37,280
question no guarantees I can answer any

00:04:34,020 --> 00:04:40,620
questions but I'm happy to take them

00:04:37,280 --> 00:04:43,680
gdb has come a long way in the last few

00:04:40,620 --> 00:04:49,580
years I think probably I mean 10 years

00:04:43,680 --> 00:04:52,320
ago certainly it was pretty basic and

00:04:49,580 --> 00:04:54,420
pretty flaky like it might work for you

00:04:52,320 --> 00:04:56,730
if you were lucky long as you weren't

00:04:54,420 --> 00:04:58,710
doing anything super funky like when

00:04:56,730 --> 00:05:00,300
those threads or trying to attach to a

00:04:58,710 --> 00:05:00,690
program or whatever but it's come a long

00:05:00,300 --> 00:05:03,630
way

00:05:00,690 --> 00:05:04,950
that's changes both in 50 on Linux so in

00:05:03,630 --> 00:05:06,450
the Linux kernel lots of changes have

00:05:04,950 --> 00:05:07,620
been made that made things better and

00:05:06,450 --> 00:05:09,690
then there's been lots of contributions

00:05:07,620 --> 00:05:11,250
to gdb itself it's come a long way in

00:05:09,690 --> 00:05:13,080
terms of stability I think and

00:05:11,250 --> 00:05:15,870
robustness and just kind of working

00:05:13,080 --> 00:05:17,190
properly it's also come a long way in

00:05:15,870 --> 00:05:18,960
terms of features a lot of stuff has

00:05:17,190 --> 00:05:21,030
been added over the last decade or so

00:05:18,960 --> 00:05:23,490
and that's kind of what this talk is

00:05:21,030 --> 00:05:25,470
about one other thing that where it's

00:05:23,490 --> 00:05:27,300
come West progressed quite well over the

00:05:25,470 --> 00:05:30,660
years is the documentation is pretty

00:05:27,300 --> 00:05:33,720
good it's pretty complete fairly well

00:05:30,660 --> 00:05:37,440
written and if you just type info gdb or

00:05:33,720 --> 00:05:38,940
you just Google for gdb info you'll get

00:05:37,440 --> 00:05:42,360
kind of fairly complete list of all the

00:05:38,940 --> 00:05:44,280
stuff right but as always with these

00:05:42,360 --> 00:05:46,950
kinds of things it's about knowing

00:05:44,280 --> 00:05:48,300
what's there right so the purpose of

00:05:46,950 --> 00:05:50,160
this talk I'm going to do a whole bunch

00:05:48,300 --> 00:05:51,270
of demos and we'll see things in

00:05:50,160 --> 00:05:54,410
practice that's always more fun than

00:05:51,270 --> 00:05:55,950
slight but I don't really expect

00:05:54,410 --> 00:05:57,900
realistically that people are going to

00:05:55,950 --> 00:05:59,040
remember all of the weird keystrokes and

00:05:57,900 --> 00:06:02,280
machine notions and things that I've

00:05:59,040 --> 00:06:03,990
typed but hopefully you'll remember that

00:06:02,280 --> 00:06:06,600
these things exist so that when you need

00:06:03,990 --> 00:06:08,970
this in like a month a year whatever's

00:06:06,600 --> 00:06:10,410
time you can go yeah I think I remember

00:06:08,970 --> 00:06:12,780
that and go and look at the man page and

00:06:10,410 --> 00:06:15,960
figure out how it is that it works right

00:06:12,780 --> 00:06:18,350
so it's just knowing knowing this stuff

00:06:15,960 --> 00:06:18,350
exists

00:06:22,580 --> 00:06:28,159
so I did give this talk here last year

00:06:26,719 --> 00:06:29,389
but it wasn't a proper talk it was just

00:06:28,159 --> 00:06:31,339
a kind of lunchtime session hence we're

00:06:29,389 --> 00:06:32,419
doing again if you did see it last time

00:06:31,339 --> 00:06:33,379
I've got some new stuff so hopefully

00:06:32,419 --> 00:06:36,289
there'll be a bit of a refresher and

00:06:33,379 --> 00:06:39,469
some new stuff as well and some of it

00:06:36,289 --> 00:06:40,849
will be familiar so I think just

00:06:39,469 --> 00:06:45,619
following on from that point on that on

00:06:40,849 --> 00:06:48,559
the documentation gdb s is very powerful

00:06:45,619 --> 00:06:50,929
actually but it's certainly not

00:06:48,559 --> 00:06:52,129
intuitive right and a lot of the kind of

00:06:50,929 --> 00:06:53,599
interface is built up over time

00:06:52,129 --> 00:06:55,939
especially if you're used to a kind of

00:06:53,599 --> 00:06:59,569
gooey kind of visual studio kind of

00:06:55,939 --> 00:07:02,899
world can be pretty painful and I think

00:06:59,569 --> 00:07:04,759
it's it's it full I first heard this

00:07:02,899 --> 00:07:06,199
phrase said about VI actually is one of

00:07:04,759 --> 00:07:07,519
those things I'm talking about UNIX

00:07:06,199 --> 00:07:10,369
actually one of those things that's not

00:07:07,519 --> 00:07:13,009
ease of use is a misnomer gdb is easy to

00:07:10,369 --> 00:07:16,269
use but it's hard to learn right ease of

00:07:13,009 --> 00:07:16,269
use is not the same as ease of learning

00:07:16,569 --> 00:07:25,489
okay now this is probably where life

00:07:22,009 --> 00:07:27,229
gets a bit tricky because I spent half

00:07:25,489 --> 00:07:28,699
an hour of panic earlier on because

00:07:27,229 --> 00:07:30,819
whenever I try to mirror my screen

00:07:28,699 --> 00:07:32,779
between here and there my computer hacks

00:07:30,819 --> 00:07:34,300
which is less than ideal so there's

00:07:32,779 --> 00:07:37,249
going to be a certain amount of

00:07:34,300 --> 00:07:40,159
non-slick moving between between slides

00:07:37,249 --> 00:07:41,050
and and demos but just bear with me on

00:07:40,159 --> 00:07:44,959
that

00:07:41,050 --> 00:07:49,989
so the thing that I think like gets the

00:07:44,959 --> 00:07:53,989
both of the scores highest on both

00:07:49,989 --> 00:07:56,989
fronts together of least well-known but

00:07:53,989 --> 00:08:00,529
most useful is this thing called tui

00:07:56,989 --> 00:08:04,219
text user interface very useful very

00:08:00,529 --> 00:08:05,569
badly named because gdb is always a text

00:08:04,219 --> 00:08:07,869
user interface right I mean that's like

00:08:05,569 --> 00:08:09,979
one of the main reasons that it sucks

00:08:07,869 --> 00:08:12,499
but let's just just just have a look

00:08:09,979 --> 00:08:13,939
what we mean by that so um I'm just

00:08:12,499 --> 00:08:15,819
assuming by the way I should have

00:08:13,939 --> 00:08:19,369
checked lots of check before I started

00:08:15,819 --> 00:08:21,829
is anybody not used gdb at all we're all

00:08:19,369 --> 00:08:23,089
kind of okay cool

00:08:21,829 --> 00:08:24,319
at least no one's no one's admitting to

00:08:23,089 --> 00:08:28,159
that usually people don't admit to using

00:08:24,319 --> 00:08:32,829
it but so let me try and see if I can

00:08:28,159 --> 00:08:32,829
get my shell up

00:08:34,090 --> 00:08:42,890
all right so I've had to do some magic

00:08:40,790 --> 00:08:45,440
the mirroring of the shell but we should

00:08:42,890 --> 00:08:48,680
be good all right so here is a program

00:08:45,440 --> 00:08:51,320
that is just a tiny bit more than hello

00:08:48,680 --> 00:08:53,570
world so we compile it in the normal way

00:08:51,320 --> 00:08:56,750
right you compile it - gee - put the

00:08:53,570 --> 00:08:57,980
debug info in and then we have a hello

00:08:56,750 --> 00:09:01,150
world program we're going to run that in

00:08:57,980 --> 00:09:02,990
gdb in the normal way so gdb a dot out

00:09:01,150 --> 00:09:05,420
my program starts

00:09:02,990 --> 00:09:07,220
I can type start just saves a tiny bit

00:09:05,420 --> 00:09:09,140
of typing rather than doing break main

00:09:07,220 --> 00:09:11,960
run you can do start which kind of puts

00:09:09,140 --> 00:09:15,020
a temporary breakpoint on main and runs

00:09:11,960 --> 00:09:16,760
it so there we go and like this is not

00:09:15,020 --> 00:09:18,860
the good old gdb interface that we all

00:09:16,760 --> 00:09:20,240
know right and and like the main problem

00:09:18,860 --> 00:09:23,630
I think with this is that you just lack

00:09:20,240 --> 00:09:25,400
context we have a single line where we

00:09:23,630 --> 00:09:27,170
are but you know especially if you're

00:09:25,400 --> 00:09:28,910
navigating code that you're not super

00:09:27,170 --> 00:09:30,260
familiar with which often when we break

00:09:28,910 --> 00:09:32,510
out the debugger by the way that's type

00:09:30,260 --> 00:09:33,920
one of its main jobs race is to help us

00:09:32,510 --> 00:09:36,260
understand code and it might be to help

00:09:33,920 --> 00:09:38,360
us understand code that we wrote that's

00:09:36,260 --> 00:09:40,730
not dude not behaving as we expected it

00:09:38,360 --> 00:09:42,050
to but more often than not it's actually

00:09:40,730 --> 00:09:43,670
code that somebody else has written and

00:09:42,050 --> 00:09:44,990
we're trying to just understand what the

00:09:43,670 --> 00:09:47,210
whole thing does and if you can only see

00:09:44,990 --> 00:09:49,310
one line at a time then you know it's

00:09:47,210 --> 00:09:50,870
kind of lame yeah we can type next to go

00:09:49,310 --> 00:09:52,040
to the next line and so I kind of see

00:09:50,870 --> 00:09:54,190
what line six and seven does but it's

00:09:52,040 --> 00:09:57,950
still kind of lame you can type lists

00:09:54,190 --> 00:09:59,270
list gives you bit of context yeah but

00:09:57,950 --> 00:10:00,710
you know I still need to look um at line

00:09:59,270 --> 00:10:02,450
seven and I need to look at where line

00:10:00,710 --> 00:10:05,930
seven is on there and it's just it's

00:10:02,450 --> 00:10:06,710
it's not so good it's not so good so

00:10:05,930 --> 00:10:09,710
here we are

00:10:06,710 --> 00:10:10,880
very kind of you know certainly a text

00:10:09,710 --> 00:10:12,710
user interface but this is called the

00:10:10,880 --> 00:10:15,280
CLI writing the command line interface

00:10:12,710 --> 00:10:16,880
not the text user interface not Tooey

00:10:15,280 --> 00:10:20,810
Tooey

00:10:16,880 --> 00:10:24,890
drags gdb forward screaming from the

00:10:20,810 --> 00:10:26,450
1970s to the 1980s and I'm going to do

00:10:24,890 --> 00:10:28,090
and I can switch between the two you can

00:10:26,450 --> 00:10:31,330
do can do it at startup or you can do it

00:10:28,090 --> 00:10:34,760
interactively so if I go control X a I

00:10:31,330 --> 00:10:37,730
can to the cursors interface right now I

00:10:34,760 --> 00:10:42,320
can see that context and now pretty it's

00:10:37,730 --> 00:10:44,780
not it's also not very reliable

00:10:42,320 --> 00:10:45,960
just like completely contradicts the

00:10:44,780 --> 00:10:48,750
earlier point I made

00:10:45,960 --> 00:10:50,880
- II just I don't know I mean maybe it's

00:10:48,750 --> 00:10:53,399
just me but it does break a lot

00:10:50,880 --> 00:10:55,260
sometimes you can recover sometimes you

00:10:53,399 --> 00:10:57,600
can toggle so you can toggle between the

00:10:55,260 --> 00:10:59,640
two right so control XA again and I

00:10:57,600 --> 00:11:01,320
toggle back right and sometimes you can

00:10:59,640 --> 00:11:03,839
toggle in and out to e and it fixes

00:11:01,320 --> 00:11:05,250
itself sometimes you can do control L to

00:11:03,839 --> 00:11:07,050
get it just to repaint the screen and

00:11:05,250 --> 00:11:08,580
things get better sometimes it's just

00:11:07,050 --> 00:11:10,800
like it's just broken and you have to

00:11:08,580 --> 00:11:11,040
stop gdb and start again I've not put it

00:11:10,800 --> 00:11:13,080
that way

00:11:11,040 --> 00:11:14,640
but I still like it despite all those

00:11:13,080 --> 00:11:17,120
caveats because it just gives you that

00:11:14,640 --> 00:11:20,910
context and yes you know you can use

00:11:17,120 --> 00:11:23,070
better front ends right like Eclipse or

00:11:20,910 --> 00:11:24,810
sea lion or you can use it from Emacs or

00:11:23,070 --> 00:11:26,370
whatever and get that context but it's

00:11:24,810 --> 00:11:27,690
not always so convenient I you I

00:11:26,370 --> 00:11:30,149
wouldn't have to kind of a whole bunch

00:11:27,690 --> 00:11:31,970
of stuff around you to do that whereas

00:11:30,149 --> 00:11:34,230
you know you could be SSH din somewhere

00:11:31,970 --> 00:11:36,330
to some server somewhere that's like a

00:11:34,230 --> 00:11:39,180
minimal server and you can still do this

00:11:36,330 --> 00:11:41,010
stuff right so it's still useful and and

00:11:39,180 --> 00:11:44,550
so when I type in my normal kind of

00:11:41,010 --> 00:11:48,390
command so when I type next it goes next

00:11:44,550 --> 00:11:50,209
now I said that can't be a bit flaky and

00:11:48,390 --> 00:11:52,410
unfortunately one of those things that's

00:11:50,209 --> 00:11:55,110
unreliably unreliable so I haven't found

00:11:52,410 --> 00:11:57,450
a demo yet that causes reliably causes

00:11:55,110 --> 00:11:58,770
to e mode to mess up but you can see

00:11:57,450 --> 00:11:59,940
beginning of kind of what's happening

00:11:58,770 --> 00:12:01,800
here right isn't really messing up this

00:11:59,940 --> 00:12:03,959
is just fair enough my programmers

00:12:01,800 --> 00:12:05,910
printed hello world and and hello world

00:12:03,959 --> 00:12:10,380
has appeared kind of slightly messing up

00:12:05,910 --> 00:12:11,910
I might my tui right and now okay that's

00:12:10,380 --> 00:12:13,740
only hello world we can live with that

00:12:11,910 --> 00:12:15,510
wasn't pretty in the first place it kind

00:12:13,740 --> 00:12:17,010
of parable but obviously if your

00:12:15,510 --> 00:12:18,209
programs doing more stuff but printing

00:12:17,010 --> 00:12:23,550
more stuff at the screen it can get

00:12:18,209 --> 00:12:24,930
pretty trashed and so often not

00:12:23,550 --> 00:12:28,050
necessarily always but often I can just

00:12:24,930 --> 00:12:32,970
type ctrl L and it repaints the screen

00:12:28,050 --> 00:12:34,380
right and that can be helped and what

00:12:32,970 --> 00:12:35,670
else can we do we can actually it's good

00:12:34,380 --> 00:12:41,850
you can actually split it into two

00:12:35,670 --> 00:12:43,709
windows so if I go ctrl X 2 now I can't

00:12:41,850 --> 00:12:46,020
because I tell you well I think this is

00:12:43,709 --> 00:12:47,660
probably because I'm I've got this weird

00:12:46,020 --> 00:12:51,480
split screen thing

00:12:47,660 --> 00:12:53,520
no okay alright so ctrl X 2 gives me two

00:12:51,480 --> 00:12:55,950
windows okay so I've got the sauce top

00:12:53,520 --> 00:12:59,400
and I've got the disassembly there if I

00:12:55,950 --> 00:13:01,500
do ctrl X 2 again

00:12:59,400 --> 00:13:03,960
and cycle through them now this is quite

00:13:01,500 --> 00:13:06,150
a useful view if you're ever unfortunate

00:13:03,960 --> 00:13:08,670
enough to be debugging something that

00:13:06,150 --> 00:13:11,010
you don't have the source for right so

00:13:08,670 --> 00:13:15,630
now I can see the registers and and the

00:13:11,010 --> 00:13:17,279
disassembly at the same time and I can

00:13:15,630 --> 00:13:21,260
kind of cycle through them I go control

00:13:17,279 --> 00:13:24,600
X to back control X 1 get back to screen

00:13:21,260 --> 00:13:27,540
one thing I find in in too emo just took

00:13:24,600 --> 00:13:31,770
me a little while to figure out is I

00:13:27,540 --> 00:13:33,540
think we all use the up and down arrows

00:13:31,770 --> 00:13:35,790
to go through the command history right

00:13:33,540 --> 00:13:37,800
because there's typing and we wants to

00:13:35,790 --> 00:13:42,540
type the same thing again but when you

00:13:37,800 --> 00:13:44,670
do that in to e I hit up arrow just

00:13:42,540 --> 00:13:49,080
moves my source around which is like

00:13:44,670 --> 00:13:51,839
really tedious but I then discovered

00:13:49,080 --> 00:13:54,060
that you can do ctrl P for previous I

00:13:51,839 --> 00:13:56,610
can get my previous command so ctrl P

00:13:54,060 --> 00:13:59,640
and ctrl n which kind of works anywhere

00:13:56,610 --> 00:14:00,810
normal gdb CLI but I never didn't it

00:13:59,640 --> 00:14:03,810
that I was just doing up and down arrow

00:14:00,810 --> 00:14:06,410
if you're in tui mode you need control P

00:14:03,810 --> 00:14:08,510
ctrl n to get your previous commands and

00:14:06,410 --> 00:14:16,490
that's handy

00:14:08,510 --> 00:14:16,490
so try unlit ly to get back to my slides

00:14:20,000 --> 00:14:26,820
alright so I'm going to just do this

00:14:25,320 --> 00:14:28,500
messily I think this isn't going to be

00:14:26,820 --> 00:14:30,209
pretty but so think we've covered

00:14:28,500 --> 00:14:31,980
everything there so control X a is

00:14:30,209 --> 00:14:34,410
probably the main one go to and from you

00:14:31,980 --> 00:14:36,570
can do gdb - GUI when you start gdb in

00:14:34,410 --> 00:14:39,390
it will just jump into UI mode - e mode

00:14:36,570 --> 00:14:41,459
but you can always do that control 8xa

00:14:39,390 --> 00:14:52,470
switch between them and I went to the

00:14:41,459 --> 00:14:54,089
other things there all right next up and

00:14:52,470 --> 00:14:56,459
this is few years old now but very

00:14:54,089 --> 00:14:59,790
useful very powerful actually gdb has a

00:14:56,459 --> 00:15:05,600
Python interpreter in it and it's it's

00:14:59,790 --> 00:15:09,720
pretty complete so if I come back here

00:15:05,600 --> 00:15:12,150
so and this is since like version 7 I

00:15:09,720 --> 00:15:13,230
think and she's a few years old now so I

00:15:12,150 --> 00:15:15,540
can do price

00:15:13,230 --> 00:15:20,810
I can just type a line of Python here so

00:15:15,540 --> 00:15:23,520
I could type and I print hello world

00:15:20,810 --> 00:15:26,820
print lol right there's quite complete

00:15:23,520 --> 00:15:30,800
as I say you can do most things so I can

00:15:26,820 --> 00:15:32,580
actually type a small Python script and

00:15:30,800 --> 00:15:33,810
write I'm going to come out to you I

00:15:32,580 --> 00:15:39,360
made because it makes it clear what's

00:15:33,810 --> 00:15:41,400
going on hang on minute that was my

00:15:39,360 --> 00:15:43,890
photos finger problem anyway so so

00:15:41,400 --> 00:15:46,080
Python I can type a few lines of Python

00:15:43,890 --> 00:15:49,500
here and you can like import all the

00:15:46,080 --> 00:16:01,790
standard libraries and I can go and they

00:15:49,500 --> 00:16:03,900
I am running on appeared that yeah and

00:16:01,790 --> 00:16:06,270
the reason I'm showing you this is two

00:16:03,900 --> 00:16:09,030
things one getting the pit of jeebies

00:16:06,270 --> 00:16:10,350
not often that you saw can be handy but

00:16:09,030 --> 00:16:12,840
just to kind of demonstrate that this is

00:16:10,350 --> 00:16:14,850
look this is not you could there's also

00:16:12,840 --> 00:16:18,630
the shell command from from from from

00:16:14,850 --> 00:16:20,160
gdb right so I can do shell and then I

00:16:18,630 --> 00:16:23,910
can run anything from from my shell

00:16:20,160 --> 00:16:26,910
right and and so if I say run shell PS

00:16:23,910 --> 00:16:30,150
what that does is Forks sub-process

00:16:26,910 --> 00:16:31,620
runs this runs fashion it runs PS does

00:16:30,150 --> 00:16:34,050
the output now returns that you can be

00:16:31,620 --> 00:16:36,030
prompt when I'm doing Python it's not

00:16:34,050 --> 00:16:37,920
like forking a Python process and going

00:16:36,030 --> 00:16:40,560
running that stuff it's running it from

00:16:37,920 --> 00:16:41,790
within the gdb process itself and that's

00:16:40,560 --> 00:16:43,590
quite useful for reasonable seen in a

00:16:41,790 --> 00:16:45,960
bit so you can see that here right so if

00:16:43,590 --> 00:16:48,360
you see a gun shell PS I've lips I've

00:16:45,960 --> 00:16:50,580
got my gdb process there six two four

00:16:48,360 --> 00:16:52,560
three if I look at the output I am

00:16:50,580 --> 00:16:55,920
running on pit six two four three just

00:16:52,560 --> 00:16:58,080
within this within the process the

00:16:55,920 --> 00:17:00,750
second reason I wanted to show that

00:16:58,080 --> 00:17:03,060
import OS thing other than just to show

00:17:00,750 --> 00:17:06,840
that you can do it is in my experience

00:17:03,060 --> 00:17:07,680
this is the most common way I've seen

00:17:06,840 --> 00:17:12,380
screwed up

00:17:07,680 --> 00:17:12,380
gdb installations out in the wild

00:17:12,830 --> 00:17:19,950
because it's it's like that worst that

00:17:15,870 --> 00:17:23,120
worst thing of mostly working right so

00:17:19,950 --> 00:17:25,530
so when when you compile gdb from source

00:17:23,120 --> 00:17:27,190
it's fairly straightforward to compile

00:17:25,530 --> 00:17:28,420
as you'd

00:17:27,190 --> 00:17:30,070
it needs a bunch of packages that you

00:17:28,420 --> 00:17:31,960
need to install but once you've done

00:17:30,070 --> 00:17:35,130
that you know configure make does the

00:17:31,960 --> 00:17:37,420
usual thing and it makes a gdb

00:17:35,130 --> 00:17:40,360
executable that's mostly pretty

00:17:37,420 --> 00:17:43,450
self-contained so you can copy that gdb

00:17:40,360 --> 00:17:46,180
executable from your workstation onto

00:17:43,450 --> 00:17:48,490
your server or your target or wherever

00:17:46,180 --> 00:17:51,990
it is and just use it right and mostly

00:17:48,490 --> 00:17:55,090
works and that's good except the Python

00:17:51,990 --> 00:17:59,170
modules stuff will almost certainly all

00:17:55,090 --> 00:18:03,730
be broken either subtly or catastrophic

00:17:59,170 --> 00:18:06,190
ly if you're unlucky Suckley and and so

00:18:03,730 --> 00:18:09,250
because what happens is it you when I go

00:18:06,190 --> 00:18:12,940
import OS is importing the OS python

00:18:09,250 --> 00:18:15,730
module from my computer right and if

00:18:12,940 --> 00:18:17,140
that doesn't version match with the GD

00:18:15,730 --> 00:18:19,480
p-- with the python that's built into

00:18:17,140 --> 00:18:21,370
your gdb will get weird problems and it

00:18:19,480 --> 00:18:23,890
doesn't like happily tell you are no

00:18:21,370 --> 00:18:27,430
version mismatch it just kind of like

00:18:23,890 --> 00:18:28,780
depending on how different the instant

00:18:27,430 --> 00:18:30,760
that the distro you're running on is

00:18:28,780 --> 00:18:33,310
from where you compiled it it'll work

00:18:30,760 --> 00:18:34,660
somewhere between you know just a few

00:18:33,310 --> 00:18:35,170
things being broken to nothing working

00:18:34,660 --> 00:18:37,530
at all

00:18:35,170 --> 00:18:40,420
so that I think is the most common

00:18:37,530 --> 00:18:41,680
example I've seen of broken gdb installs

00:18:40,420 --> 00:18:44,950
out there so if you start to use the

00:18:41,680 --> 00:18:46,240
Python stuff be aware if someone's

00:18:44,950 --> 00:18:48,730
compiled duty be on a different machine

00:18:46,240 --> 00:18:51,100
it probably won't work for them now

00:18:48,730 --> 00:18:54,250
there is a way you can jump through some

00:18:51,100 --> 00:18:56,230
hoops to build a version of gdb that's

00:18:54,250 --> 00:18:58,510
like self-contained and has a directory

00:18:56,230 --> 00:19:00,160
that has all the Python stuff in it and

00:18:58,510 --> 00:19:02,350
that's actually what we ended up being

00:19:00,160 --> 00:19:21,580
forced to do it undo to get around this

00:19:02,350 --> 00:19:26,160
problem ok what's next so sorry about

00:19:21,580 --> 00:19:29,860
this alright so uh where are we so yes

00:19:26,160 --> 00:19:34,330
oh that's right sorry yes right so so it

00:19:29,860 --> 00:19:36,340
has a the GD p-- iceland built into gdb

00:19:34,330 --> 00:19:38,710
is more than just a Python because it

00:19:36,340 --> 00:19:40,160
has this really useful module that you

00:19:38,710 --> 00:19:43,440
can import called gdb

00:19:40,160 --> 00:19:46,500
which gives you pretty tight binding

00:19:43,440 --> 00:19:48,660
between the Python and the gdb now this

00:19:46,500 --> 00:19:52,020
is something that it was released in

00:19:48,660 --> 00:19:55,110
version 7 of gdb but that was kind of

00:19:52,020 --> 00:19:56,610
like version 1 if you like of the Python

00:19:55,110 --> 00:19:58,950
integration of gdb and it got better

00:19:56,610 --> 00:20:02,340
over the subsequent versions I think by

00:19:58,950 --> 00:20:04,890
about version 7.6 gdb I think the kind

00:20:02,340 --> 00:20:06,960
of pace has slowed quite a lot because

00:20:04,890 --> 00:20:09,750
most of it's done right so early

00:20:06,960 --> 00:20:12,780
versions of we've got G to be 7.0 it'll

00:20:09,750 --> 00:20:14,430
have Python some of the integration with

00:20:12,780 --> 00:20:15,810
gdb is quite limited you know although

00:20:14,430 --> 00:20:17,550
there's no or not all the features are

00:20:15,810 --> 00:20:19,710
there if you have seven point six seven

00:20:17,550 --> 00:20:23,750
point seven it's pretty complete anyway

00:20:19,710 --> 00:20:23,750
let me show you what I mean by that so

00:20:25,490 --> 00:20:29,460
so I'm going to go back into to you I

00:20:28,290 --> 00:20:33,000
made use to make this little bit clearer

00:20:29,460 --> 00:20:34,820
so if I go python so now if you just

00:20:33,000 --> 00:20:38,190
type some python at it right gdb

00:20:34,820 --> 00:20:41,100
executes and what that does that takes a

00:20:38,190 --> 00:20:45,230
string and that string is just a gdb

00:20:41,100 --> 00:20:49,470
command to run so when I hit enter here

00:20:45,230 --> 00:20:51,210
Dada goes next right pretty cool so you

00:20:49,470 --> 00:20:55,890
can now start to imagine how you can

00:20:51,210 --> 00:20:57,600
script pretty powerfully you know debug

00:20:55,890 --> 00:20:58,740
whether it's been something inside of

00:20:57,600 --> 00:21:00,570
test suite and whether you've got some

00:20:58,740 --> 00:21:02,070
intermittent failure that happens only

00:21:00,570 --> 00:21:05,280
very rarely I'll talk more about that in

00:21:02,070 --> 00:21:08,460
a minute and you can script it quite

00:21:05,280 --> 00:21:12,830
quite nicely um but it's more than just

00:21:08,460 --> 00:21:16,410
having that that like CLI interface onto

00:21:12,830 --> 00:21:18,960
onto gdb you can actually interact with

00:21:16,410 --> 00:21:26,310
gdb through the Python right so for

00:21:18,960 --> 00:21:29,360
example if I go - VP equals so I'm going

00:21:26,310 --> 00:21:32,610
to create an instance of the breakpoint

00:21:29,360 --> 00:21:36,050
you'd be breakpoint class and you give

00:21:32,610 --> 00:21:39,450
it the noodle kind of line spec so if I

00:21:36,050 --> 00:21:41,670
file name : line number let's put it on

00:21:39,450 --> 00:21:43,290
line nine so if I do that I'm going to

00:21:41,670 --> 00:21:45,930
create an instance of the gdb breakpoint

00:21:43,290 --> 00:21:49,260
class it's going to be bounded of the

00:21:45,930 --> 00:21:51,390
value the identified VP and if you watch

00:21:49,260 --> 00:21:53,460
on the on the top here is up and I hit

00:21:51,390 --> 00:21:54,990
enter

00:21:53,460 --> 00:21:58,230
pointless appeared all right so now her

00:21:54,990 --> 00:22:01,500
breakpoint I can now control that

00:21:58,230 --> 00:22:02,789
breakpoint right so I can go now another

00:22:01,500 --> 00:22:04,860
thing to notice is by the way when you

00:22:02,789 --> 00:22:06,690
create a variable and the pison it's

00:22:04,860 --> 00:22:09,000
kind of long lived this of global so

00:22:06,690 --> 00:22:10,200
that's that BP variable there it is

00:22:09,000 --> 00:22:14,130
still there so I can do another Python

00:22:10,200 --> 00:22:17,429
script and I can see it and I don't know

00:22:14,130 --> 00:22:19,529
we can go enable equals false all right

00:22:17,429 --> 00:22:26,130
if you watch that breakpoint is hit

00:22:19,529 --> 00:22:28,200
enter now disabled you can pretty

00:22:26,130 --> 00:22:29,340
complete you can like attach commands to

00:22:28,200 --> 00:22:30,270
it you can do all the kind of pretty

00:22:29,340 --> 00:22:31,770
much I think everything I think you

00:22:30,270 --> 00:22:33,600
would normally do conditions all the

00:22:31,770 --> 00:22:36,980
rest of it on the breakpoint there and I

00:22:33,600 --> 00:22:46,559
can I can look at the breakpoints with

00:22:36,980 --> 00:22:51,419
just I think I go I remember this all

00:22:46,559 --> 00:22:57,230
right and I can we go back out to you I

00:22:51,419 --> 00:22:57,230
may just forget the clearer so print

00:23:00,559 --> 00:23:06,750
yeah so I've got VP's is actually a list

00:23:04,919 --> 00:23:09,029
of all the breakpoints and you have one

00:23:06,750 --> 00:23:11,429
there so there's a list of one what's

00:23:09,029 --> 00:23:21,470
tupple anyway one thing but but then I

00:23:11,429 --> 00:23:26,340
can so I go a Tyson print vp0 dot

00:23:21,470 --> 00:23:29,760
location okay so I can interact my

00:23:26,340 --> 00:23:32,580
breakpoints and I can also interact and

00:23:29,760 --> 00:23:34,529
you know obviously watch points and all

00:23:32,580 --> 00:23:38,549
the other kind of cool things in gdb I

00:23:34,529 --> 00:23:41,610
can also interact with the program that

00:23:38,549 --> 00:23:48,919
I'm debugging and it's state by what gdb

00:23:41,610 --> 00:23:53,130
calls the inferior and so I do that

00:23:48,919 --> 00:23:54,390
using this parson eval thing so let's go

00:23:53,130 --> 00:23:57,690
back to um as you can see where we are

00:23:54,390 --> 00:24:00,149
so alright so I have a local variable

00:23:57,690 --> 00:24:01,500
here I which I can tell from code

00:24:00,149 --> 00:24:03,480
inspection is going to have a zero value

00:24:01,500 --> 00:24:05,250
zero but let's pretend it's not so

00:24:03,480 --> 00:24:07,350
obvious I can do the usual gdb thing

00:24:05,250 --> 00:24:11,640
print I

00:24:07,350 --> 00:24:15,080
there it is and in the Python I can just

00:24:11,640 --> 00:24:17,640
write some Python now and I can say I

00:24:15,080 --> 00:24:18,990
don't know I call it something different

00:24:17,640 --> 00:24:24,600
just to make it clear what's going on

00:24:18,990 --> 00:24:27,930
but I equals gdb pars and a vowel right

00:24:24,600 --> 00:24:30,000
to positive a lie now give it a string

00:24:27,930 --> 00:24:31,380
which is a bunch C code

00:24:30,000 --> 00:24:33,480
well actually I think technically

00:24:31,380 --> 00:24:36,450
whatever language my program is written

00:24:33,480 --> 00:24:40,530
in and gdb will pass it and evaluate

00:24:36,450 --> 00:24:41,760
that expression so I'm just going to do

00:24:40,530 --> 00:24:42,990
that right so the expression is very

00:24:41,760 --> 00:24:44,910
simple just going to get the value of I

00:24:42,990 --> 00:24:54,140
that's going to bind it to that Python

00:24:44,910 --> 00:24:54,140
variable so now if I go Python print is

00:24:57,050 --> 00:25:03,230
that okay and and clearly I could you

00:25:01,140 --> 00:25:05,370
know do the bucket follow pointers and

00:25:03,230 --> 00:25:10,410
operator overloading and all the usual

00:25:05,370 --> 00:25:14,190
stuff there if I am do next a couple of

00:25:10,410 --> 00:25:16,650
times now an eye net when I hit next

00:25:14,190 --> 00:25:24,300
again now of course I is going to

00:25:16,650 --> 00:25:30,420
increment fine if I control P to get

00:25:24,300 --> 00:25:34,320
that line again it's going to bar eyes

00:25:30,420 --> 00:25:36,360
not bound like dynamically to that

00:25:34,320 --> 00:25:39,810
variable I right I did I called positive

00:25:36,360 --> 00:25:41,730
owl some time ago when I was zero so if

00:25:39,810 --> 00:25:42,270
I look at bar eye it's still it's still

00:25:41,730 --> 00:25:45,030
zero

00:25:42,270 --> 00:25:46,410
it doesn't change when my debug least

00:25:45,030 --> 00:25:49,260
thing changes so just be aware of that

00:25:46,410 --> 00:25:55,590
but you know obviously I can just parse

00:25:49,260 --> 00:25:59,550
any vowel it's more and that was up

00:25:55,590 --> 00:26:02,580
later there's lots to that read demand

00:25:59,550 --> 00:26:04,890
pages with the info pages rather and and

00:26:02,580 --> 00:26:06,150
you can see there's lots of there's lots

00:26:04,890 --> 00:26:08,820
of Python is one other thing I'm going

00:26:06,150 --> 00:26:14,900
to show in a minute but we'll come back

00:26:08,820 --> 00:26:17,960
to that okay so

00:26:14,900 --> 00:26:23,059
oh yeah no the other thing the inbuilt

00:26:17,960 --> 00:26:29,780
help is quite useful so I find it useful

00:26:23,059 --> 00:26:31,100
anyway so I often do Python let's come

00:26:29,780 --> 00:26:34,340
out to you I Motors it can get a bit

00:26:31,100 --> 00:26:35,059
messy Python you know you can do that

00:26:34,340 --> 00:26:37,150
online

00:26:35,059 --> 00:26:39,100
built in health with heightened right

00:26:37,150 --> 00:26:41,480
and it will give you the doc

00:26:39,100 --> 00:26:44,270
documentation for the objects so if I go

00:26:41,480 --> 00:26:47,960
place and help gdb it gives me all of

00:26:44,270 --> 00:26:49,250
the documentation for the Python modules

00:26:47,960 --> 00:26:50,360
that you can see everything's there you

00:26:49,250 --> 00:26:55,059
see it's actually quite a lot of stuff

00:26:50,360 --> 00:26:57,470
right and then there's all these classes

00:26:55,059 --> 00:26:59,900
so and obviously we can do the usual

00:26:57,470 --> 00:27:03,140
thing like I couldn't just want to find

00:26:59,900 --> 00:27:04,970
y out but break point then there's all

00:27:03,140 --> 00:27:06,710
the stuff in the break podcast so I find

00:27:04,970 --> 00:27:08,720
that quite useful it is all in the info

00:27:06,710 --> 00:27:13,720
pages as well but it's always nicer just

00:27:08,720 --> 00:27:13,720
to get it from where you are okay

00:27:19,790 --> 00:27:23,600
okay so the other thing I'm going to

00:27:21,200 --> 00:27:28,700
show on Python is the pretty printers

00:27:23,600 --> 00:27:30,140
which is definitely falls into that not

00:27:28,700 --> 00:27:34,690
easy to learn I'm not sure they're that

00:27:30,140 --> 00:27:34,690
easy to use but they're quite useful so

00:27:40,900 --> 00:27:48,140
so you know we often have data

00:27:43,550 --> 00:27:50,360
structures that are complicated right

00:27:48,140 --> 00:27:53,230
and and we have ways to visualize them

00:27:50,360 --> 00:27:57,200
that are kind of make life easier and

00:27:53,230 --> 00:28:00,590
often what people do is you might have a

00:27:57,200 --> 00:28:03,050
pretty printer function that you call

00:28:00,590 --> 00:28:05,900
from the gdb command line right and that

00:28:03,050 --> 00:28:10,130
kind of works so let's let's let's show

00:28:05,900 --> 00:28:15,659
that so what I mean so I'm going to a

00:28:10,130 --> 00:28:17,740
new program here now I'm going to do

00:28:15,659 --> 00:28:20,740
this one so I have a pretty simple

00:28:17,740 --> 00:28:23,169
program oh I should have given this

00:28:20,740 --> 00:28:25,960
apology at the beginning on a terrible

00:28:23,169 --> 00:28:28,720
confession I'm not really a you know a

00:28:25,960 --> 00:28:30,700
huge user of C++ I tend to do more kind

00:28:28,720 --> 00:28:34,570
of kernel e lower level stuff so most of

00:28:30,700 --> 00:28:40,750
my examples are in plain old C but

00:28:34,570 --> 00:28:42,309
anyway whatever so um I've got the

00:28:40,750 --> 00:28:43,899
structure right it's not very

00:28:42,309 --> 00:28:45,299
complicated but you know it's

00:28:43,899 --> 00:28:48,309
complicated enough to check the demo so

00:28:45,299 --> 00:28:54,279
I'm going to compile that I'm going to

00:28:48,309 --> 00:28:57,220
run it in gdb let's go forward a few

00:28:54,279 --> 00:29:01,299
lines nice the now st has been

00:28:57,220 --> 00:29:02,440
initialized so if I print ster student

00:29:01,299 --> 00:29:04,750
there's my structure all right

00:29:02,440 --> 00:29:06,700
everything's there this is not so

00:29:04,750 --> 00:29:08,440
complicated that you can kind of deal

00:29:06,700 --> 00:29:10,690
with it but obviously you know the more

00:29:08,440 --> 00:29:13,809
complicated your classes and your script

00:29:10,690 --> 00:29:16,690
and data structures get of the more that

00:29:13,809 --> 00:29:18,940
the less readable that becomes I quite

00:29:16,690 --> 00:29:22,090
like and I usually do this with my GTP

00:29:18,940 --> 00:29:27,460
init file I quite like a set print

00:29:22,090 --> 00:29:31,630
pretty on I just find that slightly

00:29:27,460 --> 00:29:34,330
easier to read but you know it's still

00:29:31,630 --> 00:29:36,399
not like super easy to read right I need

00:29:34,330 --> 00:29:47,889
to figure out what that time spec is

00:29:36,399 --> 00:29:49,840
telling me now my program has in it a do

00:29:47,889 --> 00:29:52,240
have a pretty printer thing dump

00:29:49,840 --> 00:29:55,000
students which is printed in a better

00:29:52,240 --> 00:29:57,929
way so I can just call that right so I'm

00:29:55,000 --> 00:30:04,779
gonna minute very so I can call dump

00:29:57,929 --> 00:30:07,139
student right that's okay

00:30:04,779 --> 00:30:07,139
good

00:30:11,260 --> 00:30:15,510
I can I think I've just realized as a

00:30:13,840 --> 00:30:19,510
problem or pretty printer but anyway you

00:30:15,510 --> 00:30:21,340
that's fine we'll overlook that right so

00:30:19,510 --> 00:30:23,080
that's that's fine okay but the problem

00:30:21,340 --> 00:30:25,690
is I'm calling a function inside the

00:30:23,080 --> 00:30:26,860
inferior which you may or may not want

00:30:25,690 --> 00:30:28,780
to do right if you're debugging

00:30:26,860 --> 00:30:29,500
something where your data structures are

00:30:28,780 --> 00:30:31,270
all screwed up

00:30:29,500 --> 00:30:33,100
calling functions in the inferior that

00:30:31,270 --> 00:30:34,150
walk over your data structures is very

00:30:33,100 --> 00:30:36,970
probably a bad idea

00:30:34,150 --> 00:30:38,850
you know you did your debugging so

00:30:36,970 --> 00:30:43,920
probably all bets are off

00:30:38,850 --> 00:30:43,920
so calling functions in the inferior you

00:30:44,370 --> 00:30:52,780
know it's kind of it's a bit dodgy

00:30:48,750 --> 00:30:55,300
probably don't to be doing it so I can

00:30:52,780 --> 00:31:03,250
do with these Python pretty printers I

00:30:55,300 --> 00:31:06,550
can do a bit better so I've made a price

00:31:03,250 --> 00:31:10,210
and pretty printer for my student

00:31:06,550 --> 00:31:14,310
structure now it is a bit fiddly there's

00:31:10,210 --> 00:31:14,310
quite a lot of boilerplate code to write

00:31:14,640 --> 00:31:18,880
but you know it's pretty useful right

00:31:17,140 --> 00:31:20,320
and it's flexible it's powerful you can

00:31:18,880 --> 00:31:21,820
do what you need to do so we've got a

00:31:20,320 --> 00:31:25,270
bunch Python here you kind of create the

00:31:21,820 --> 00:31:28,960
class to bind that class to a type given

00:31:25,270 --> 00:31:33,070
a regular expression so this is my this

00:31:28,960 --> 00:31:34,210
is my my my pretty printer class of

00:31:33,070 --> 00:31:36,790
course I've just got a two string

00:31:34,210 --> 00:31:40,210
function usual kind of Python stuff and

00:31:36,790 --> 00:31:42,100
it walks over this this this value that

00:31:40,210 --> 00:31:44,260
I've given it in a constructor and it's

00:31:42,100 --> 00:31:46,750
like a dictionary and I can look up all

00:31:44,260 --> 00:31:51,220
of the the members of the structure in

00:31:46,750 --> 00:31:53,080
the dictionary like that and and then I

00:31:51,220 --> 00:31:55,150
need to do this to boil up late stuff is

00:31:53,080 --> 00:31:58,060
pretty painful but easy enough to

00:31:55,150 --> 00:31:59,680
copy-paste and and this is the bit here

00:31:58,060 --> 00:32:01,810
that binds it to a regular expressions

00:31:59,680 --> 00:32:03,520
I've just at any type that is called

00:32:01,810 --> 00:32:04,810
exactly student I'm going to bind it to

00:32:03,520 --> 00:32:06,340
that but also you could be a bit more

00:32:04,810 --> 00:32:09,900
flexible particularly with you know

00:32:06,340 --> 00:32:11,680
we've got C++ classes you know class

00:32:09,900 --> 00:32:15,940
hierarchies and things that could be

00:32:11,680 --> 00:32:17,890
quite useful and and so now I can source

00:32:15,940 --> 00:32:20,350
that right so if you remember when I go

00:32:17,890 --> 00:32:23,200
print stuff I've said print pretty on so

00:32:20,350 --> 00:32:25,149
it's kind of bit clearer but still not

00:32:23,200 --> 00:32:30,099
great if my source

00:32:25,149 --> 00:32:39,149
pretty high now I print it right in

00:32:30,099 --> 00:32:39,149
pictionary so that's kind of useful oh

00:32:42,599 --> 00:32:52,330
one other thing on them here's so and

00:32:45,789 --> 00:32:54,549
what they've done with the with the STL

00:32:52,330 --> 00:32:56,289
and other libraries there's a bunch of

00:32:54,549 --> 00:32:59,080
pretty printers like installed by

00:32:56,289 --> 00:33:00,969
default so if you print iterators and

00:32:59,080 --> 00:33:03,940
stuff like that then you can get kind of

00:33:00,969 --> 00:33:06,489
nice output and it's kind of the way you

00:33:03,940 --> 00:33:08,279
know rather than hacking into gdb itself

00:33:06,489 --> 00:33:09,999
all of this kind of knowledge of

00:33:08,279 --> 00:33:11,200
libraries and everything else they've

00:33:09,999 --> 00:33:21,940
just got they're pretty printers in the

00:33:11,200 --> 00:33:26,889
distro yeah I just yeah okay a minute

00:33:21,940 --> 00:33:30,389
let me get that back so be nice to show

00:33:26,889 --> 00:33:30,389
this again and sorry yeah question is

00:33:40,379 --> 00:33:45,309
all right that's that's what Python

00:33:42,999 --> 00:33:47,559
pretty printers do right so the Python

00:33:45,309 --> 00:33:48,940
pretty printer is kind of that's so

00:33:47,559 --> 00:33:53,080
sorry I should repeat the question so

00:33:48,940 --> 00:33:54,580
how come the Python stuff gets invoked

00:33:53,080 --> 00:33:56,649
when I just type print at the gdb

00:33:54,580 --> 00:33:58,299
command line right and that's that's

00:33:56,649 --> 00:34:00,639
that's kind of that's what it is that's

00:33:58,299 --> 00:34:03,399
what the inbuilt gdb Python pretty

00:34:00,639 --> 00:34:06,429
printers do so they kind of override the

00:34:03,399 --> 00:34:10,299
Python print command it's a way to hook

00:34:06,429 --> 00:34:11,980
that Python print sorry let me say that

00:34:10,299 --> 00:34:14,889
again cuz I said the wrong word which is

00:34:11,980 --> 00:34:17,700
doubly confusing it hooks the gdb print

00:34:14,889 --> 00:34:20,679
command so when you type print in gdb

00:34:17,700 --> 00:34:22,690
the command is hooked because of that

00:34:20,679 --> 00:34:24,730
because I've added that pretty printer

00:34:22,690 --> 00:34:26,470
so now gdb instead of doing what it

00:34:24,730 --> 00:34:28,359
would normally do to print something it

00:34:26,470 --> 00:34:30,730
goes and calls my Python so I have

00:34:28,359 --> 00:34:32,770
defined and it returns a string in that

00:34:30,730 --> 00:34:35,760
nice way that I define the printer that

00:34:32,770 --> 00:34:35,760
the Python to do

00:34:40,960 --> 00:34:45,919
yes yeah I'll be honest you can probably

00:34:43,970 --> 00:34:48,889
tell I just copy pasted this until it

00:34:45,919 --> 00:34:52,819
worked so it may be may be possible to

00:34:48,889 --> 00:34:56,869
do it more simply but yeah so this is

00:34:52,819 --> 00:34:58,400
just so that the those those so

00:34:56,869 --> 00:35:00,980
essentially what you're doing is you

00:34:58,400 --> 00:35:04,730
have to create one of these pretty

00:35:00,980 --> 00:35:07,400
printer objects which was so I first had

00:35:04,730 --> 00:35:09,920
to find a class and then I've created

00:35:07,400 --> 00:35:13,250
that an object of the pretty printer and

00:35:09,920 --> 00:35:15,769
bound it to that class and then I've

00:35:13,250 --> 00:35:23,930
bound it to every type that matches that

00:35:15,769 --> 00:35:25,400
regular expression a student so yeah

00:35:23,930 --> 00:35:31,400
I'll be honest my copy pasted it from

00:35:25,400 --> 00:35:47,059
the interwebs and it works does it work

00:35:31,400 --> 00:35:48,859
with templates I don't know yes yeah I

00:35:47,059 --> 00:35:50,420
would have thought so so so question is

00:35:48,859 --> 00:35:53,509
could we could we like invoke other

00:35:50,420 --> 00:35:56,779
logic and things and and and in order to

00:35:53,509 --> 00:35:58,970
kind of yeah I mean I think it's pretty

00:35:56,779 --> 00:36:00,319
just-just-just Python right so you can

00:35:58,970 --> 00:36:03,529
do what you do in the Python and you can

00:36:00,319 --> 00:36:05,900
bind back in to the gdb you know Python

00:36:03,529 --> 00:36:07,910
binding stuff so I mean I've not done

00:36:05,900 --> 00:36:09,380
exactly what you asked I've not caused

00:36:07,910 --> 00:36:11,480
it to do an X when unto a print I know

00:36:09,380 --> 00:36:14,299
and I'd advise against it I'd advise

00:36:11,480 --> 00:36:18,410
against making it so that print causes

00:36:14,299 --> 00:36:19,519
side effects but you know I think you

00:36:18,410 --> 00:36:21,049
have got enough rope to shoot yourself

00:36:19,519 --> 00:36:30,230
in the foot with there if that's what

00:36:21,049 --> 00:36:33,109
you want to do yeah you you get no you I

00:36:30,230 --> 00:36:36,380
think I think you could do it like I say

00:36:33,109 --> 00:36:38,150
I would I think I'll come to actually

00:36:36,380 --> 00:36:42,170
you can you say the other thing you can

00:36:38,150 --> 00:36:43,759
do it you can it's not just print

00:36:42,170 --> 00:36:46,039
actually you can hook you can create

00:36:43,759 --> 00:36:47,720
your own commands in Python and that you

00:36:46,039 --> 00:36:49,160
can then just hyper gdb and it will just

00:36:47,720 --> 00:36:50,720
go off and execute your

00:36:49,160 --> 00:36:54,920
Tyson you can either hook existing

00:36:50,720 --> 00:36:56,420
commands or you can create your own and

00:36:54,920 --> 00:36:57,650
I would probably recommend doing that

00:36:56,420 --> 00:37:00,079
rather than if you're going to do more

00:36:57,650 --> 00:37:01,700
than just print values out if it's going

00:37:00,079 --> 00:37:03,859
to actually move around and change the

00:37:01,700 --> 00:37:05,599
state in the debugger I would advise you

00:37:03,859 --> 00:37:07,490
create a new command to do that because

00:37:05,599 --> 00:37:08,960
if it doesn't confuse you or probably

00:37:07,490 --> 00:37:13,640
confuse somebody else later on if you're

00:37:08,960 --> 00:37:22,089
doing that but I mean you know I sir

00:37:13,640 --> 00:37:22,089
that's Who am I to say right and okay

00:37:26,619 --> 00:37:39,589
all right okay as we're going to do some

00:37:37,640 --> 00:37:41,390
different stuff now which is reversible

00:37:39,589 --> 00:37:46,789
debugging which is kind of a subject

00:37:41,390 --> 00:37:48,020
that's close close to my heart and but

00:37:46,789 --> 00:37:49,819
I'm just going to show him bill gdb

00:37:48,020 --> 00:37:52,460
reversible debugging because it's pretty

00:37:49,819 --> 00:37:54,470
good what it does and really what it's

00:37:52,460 --> 00:37:57,880
just you know sure why why it's useful

00:37:54,470 --> 00:37:59,960
so if you as I mentioned before

00:37:57,880 --> 00:38:02,950
debugging is really all about thinking

00:37:59,960 --> 00:38:05,329
how did that happen

00:38:02,950 --> 00:38:07,220
Brian Kernighan and Rob pike in their

00:38:05,329 --> 00:38:08,660
book practice of programming I talked

00:38:07,220 --> 00:38:10,700
about debugging great totally in terms

00:38:08,660 --> 00:38:12,619
of backwards reasoning right and

00:38:10,700 --> 00:38:14,380
thinking back from the failed state to

00:38:12,619 --> 00:38:17,180
kind of figure out how you got there and

00:38:14,380 --> 00:38:21,589
most debuggers just let you step

00:38:17,180 --> 00:38:22,910
forwards which is like you know if it

00:38:21,589 --> 00:38:24,410
would be really useful to step backwards

00:38:22,910 --> 00:38:27,020
is stepping forward to the opposite of

00:38:24,410 --> 00:38:29,650
useful probably bit harsh but but it you

00:38:27,020 --> 00:38:31,789
know it's not necessarily what you want

00:38:29,650 --> 00:38:33,710
so we want to be able to go back and see

00:38:31,789 --> 00:38:34,880
what happened rather than like guess

00:38:33,710 --> 00:38:38,059
what happened which is what we normally

00:38:34,880 --> 00:38:39,619
do when we're debugging and this is

00:38:38,059 --> 00:38:42,230
particularly useful with intermittent

00:38:39,619 --> 00:38:47,720
bugs so let me show another little demo

00:38:42,230 --> 00:38:52,700
here I could just do that right so here

00:38:47,720 --> 00:38:57,500
is my and my program will start as this

00:38:52,700 --> 00:39:02,650
one yeah right and so it's a bubble sort

00:38:57,500 --> 00:39:05,650
right does what you'd

00:39:02,650 --> 00:39:07,570
what you'd expect so you know it's

00:39:05,650 --> 00:39:09,340
pretty pretty minimalists just got an

00:39:07,570 --> 00:39:12,640
implementation of a bubble saw and I get

00:39:09,340 --> 00:39:14,980
some random data when I sort it and I've

00:39:12,640 --> 00:39:16,060
precompiled it in here actually let me

00:39:14,980 --> 00:39:22,390
just make sure I got the right one there

00:39:16,060 --> 00:39:23,860
so to do now I'm going to see my house

00:39:22,390 --> 00:39:26,500
so if I run it it doesn't actually do

00:39:23,860 --> 00:39:28,000
anything but I happened all it's doing

00:39:26,500 --> 00:39:29,920
is sorting the random date getting

00:39:28,000 --> 00:39:33,270
random data and sorting it but I happen

00:39:29,920 --> 00:39:36,340
to know that there is a an intermittent

00:39:33,270 --> 00:39:39,730
bug in this and if I run it a bunch of

00:39:36,340 --> 00:39:48,840
times from the shell Joe Giusti was just

00:39:39,730 --> 00:39:51,430
a little bit shell I could remember yeah

00:39:48,840 --> 00:40:00,010
so long as this is the one I think it is

00:39:51,430 --> 00:40:03,250
oh all right so we run a bunch times and

00:40:00,010 --> 00:40:05,350
every so often that happens we've all

00:40:03,250 --> 00:40:06,700
been here right so it's dumped a core

00:40:05,350 --> 00:40:10,420
file so that's something that's good

00:40:06,700 --> 00:40:13,240
let's have a look at the core file I've

00:40:10,420 --> 00:40:16,510
got a bunch of Ulthar let's get them

00:40:13,240 --> 00:40:23,080
this one so it's this one here two six

00:40:16,510 --> 00:40:24,910
five two nine so I can go gdb - see this

00:40:23,080 --> 00:40:27,840
is like one of the most common things I

00:40:24,910 --> 00:40:30,640
think tw2 stores to look at core files

00:40:27,840 --> 00:40:33,220
if you so you can see the back-trace

00:40:30,640 --> 00:40:34,630
guys just behind us here who have better

00:40:33,220 --> 00:40:40,180
ways to do this kind of thing but we're

00:40:34,630 --> 00:40:44,920
just using regular gdb here so so so I'd

00:40:40,180 --> 00:40:46,330
load up the core file just with - see in

00:40:44,920 --> 00:40:47,950
older versions gdb you need you to give

00:40:46,330 --> 00:40:49,660
the executable name but the ex-people

00:40:47,950 --> 00:40:51,940
name is stored inside the core file so

00:40:49,660 --> 00:40:54,640
it will just find that for me and and

00:40:51,940 --> 00:40:56,800
all right I've got a seg v and there

00:40:54,640 --> 00:40:59,020
doesn't seem to be any code there so

00:40:56,800 --> 00:41:02,470
well let's have a look where where are

00:40:59,020 --> 00:41:04,990
we so print I could print a program

00:41:02,470 --> 00:41:06,460
counter like that you can see on that

00:41:04,990 --> 00:41:09,280
address we're actually just hoping that

00:41:06,460 --> 00:41:12,220
a bit of wait time at the X command in

00:41:09,280 --> 00:41:15,010
gdb lets me examine memory by dig dollar

00:41:12,220 --> 00:41:16,260
one that's going to refer back to this

00:41:15,010 --> 00:41:18,930
value here right

00:41:16,260 --> 00:41:21,480
sorry you can't see like I do dollar one

00:41:18,930 --> 00:41:23,730
is going to refer back to the value

00:41:21,480 --> 00:41:25,740
there so so X dollar one is going to

00:41:23,730 --> 00:41:30,060
examine memory at that address

00:41:25,740 --> 00:41:33,930
Oh x5 a four blah blah only that address

00:41:30,060 --> 00:41:39,960
does not exist so my program has

00:41:33,930 --> 00:41:41,760
branched into hyperspace let's see what

00:41:39,960 --> 00:41:43,650
else the most common thing you do in

00:41:41,760 --> 00:41:46,850
when loading a core file is get a

00:41:43,650 --> 00:41:49,440
batteries right because back trace is

00:41:46,850 --> 00:41:51,840
either closest really that most you

00:41:49,440 --> 00:41:54,210
buggers get to directly answering that

00:41:51,840 --> 00:41:58,710
question of how did I get here how did

00:41:54,210 --> 00:42:00,630
that happen and and you know it's just

00:41:58,710 --> 00:42:02,070
based on what's in registers and what's

00:42:00,630 --> 00:42:04,320
in memory and it can kind of walk the

00:42:02,070 --> 00:42:06,390
stack and give you a bit of a guess

00:42:04,320 --> 00:42:08,310
basically of how you got to that guess

00:42:06,390 --> 00:42:10,980
is usually either correct or obviously

00:42:08,310 --> 00:42:12,450
wrong and in this case it's obviously

00:42:10,980 --> 00:42:15,180
wrong so there's garbage on my stack

00:42:12,450 --> 00:42:18,330
I've smashed my stack it looks like and

00:42:15,180 --> 00:42:21,000
so like how do I get right I've got I

00:42:18,330 --> 00:42:22,470
just got nothing to go on and in in real

00:42:21,000 --> 00:42:24,240
world you know to cut me this is a

00:42:22,470 --> 00:42:25,470
simple small program so you can just

00:42:24,240 --> 00:42:27,360
come pretty stare at it for long enough

00:42:25,470 --> 00:42:29,130
and you'll and you'll see the bug but

00:42:27,360 --> 00:42:30,930
you know you're working on real-world

00:42:29,130 --> 00:42:35,340
code base of millions of lines of code

00:42:30,930 --> 00:42:36,690
and you get this occasional problem what

00:42:35,340 --> 00:42:40,860
what do you get you've got you've got

00:42:36,690 --> 00:42:42,180
nothing right you might have some log

00:42:40,860 --> 00:42:45,360
information somewhere but that's

00:42:42,180 --> 00:42:49,860
probably a long time ago and very hard

00:42:45,360 --> 00:42:53,240
to debug so what I'm going to do is use

00:42:49,860 --> 00:42:56,190
a little bit of funky scripting

00:42:53,240 --> 00:42:58,770
and-and-and gdb is reversible debugging

00:42:56,190 --> 00:43:03,480
to do a bit better so I'm going to load

00:42:58,770 --> 00:43:04,920
it into into GDP and so G to be reverse

00:43:03,480 --> 00:43:06,330
debugging so since version 7 it's had

00:43:04,920 --> 00:43:09,330
this feature reverse debugging if I

00:43:06,330 --> 00:43:12,740
start to program I can enter this

00:43:09,330 --> 00:43:15,000
command record and now when I continue

00:43:12,740 --> 00:43:16,560
everything that the inferior does is

00:43:15,000 --> 00:43:18,120
that this isn't recording my interaction

00:43:16,560 --> 00:43:20,640
with gdb this is recording what the

00:43:18,120 --> 00:43:22,080
inferior does right when I continue

00:43:20,640 --> 00:43:25,920
everything period does is going to be

00:43:22,080 --> 00:43:28,380
recorded right programs run and it

00:43:25,920 --> 00:43:30,040
stopped that's not a surprise it we know

00:43:28,380 --> 00:43:33,010
it works most of the time and this was

00:43:30,040 --> 00:43:34,450
those occasions when it worked so that's

00:43:33,010 --> 00:43:36,130
not really helped me so what I need to

00:43:34,450 --> 00:43:38,080
do is script this so that I run it a

00:43:36,130 --> 00:43:41,020
bunch of times with the recording on

00:43:38,080 --> 00:43:42,820
until it fails and then I can see what

00:43:41,020 --> 00:43:44,740
happened right so the way I'm going to

00:43:42,820 --> 00:43:48,070
do that I'm going to add I'm going to

00:43:44,740 --> 00:43:49,750
put a breakpoint at Main I'm going to

00:43:48,070 --> 00:43:51,700
put a breakpoint at underscore exit

00:43:49,750 --> 00:43:54,730
which is that where it goes through when

00:43:51,700 --> 00:43:57,370
everything finishes normally I'm going

00:43:54,730 --> 00:43:59,470
to hook some commands off of that so you

00:43:57,370 --> 00:44:01,870
can hook a series sequence of commands

00:43:59,470 --> 00:44:04,870
to execute every time a breakpoint is

00:44:01,870 --> 00:44:06,580
hit breakpoints all have these these low

00:44:04,870 --> 00:44:07,870
typically small numbers that you can

00:44:06,580 --> 00:44:09,070
reference them by so I created a

00:44:07,870 --> 00:44:10,840
breakpoint at Main which is great point

00:44:09,070 --> 00:44:12,250
too and I created a breakpoint to

00:44:10,840 --> 00:44:16,240
underscore exit which is breakpoint

00:44:12,250 --> 00:44:18,010
number three so if I go command two that

00:44:16,240 --> 00:44:19,720
gives me a list of commands that will

00:44:18,010 --> 00:44:22,090
automatically executes when breakpoint

00:44:19,720 --> 00:44:23,680
two is hit so the first command I'm

00:44:22,090 --> 00:44:26,890
going to tell it to do is to enable the

00:44:23,680 --> 00:44:31,620
recording and the second command is just

00:44:26,890 --> 00:44:33,700
to continue and now I'm going to add

00:44:31,620 --> 00:44:35,410
commands to break point three which is

00:44:33,700 --> 00:44:38,230
the exit point which is actually just to

00:44:35,410 --> 00:44:39,400
rerun the program right so so it's going

00:44:38,230 --> 00:44:41,110
to ping pong between these breakpoints

00:44:39,400 --> 00:44:44,350
get spray point three which is normal

00:44:41,110 --> 00:44:46,270
exit run it again get to start enable

00:44:44,350 --> 00:44:50,620
recording continue I get to the clean

00:44:46,270 --> 00:44:52,960
exit repeat I've also hacks this to turn

00:44:50,620 --> 00:44:55,330
off pagination and confirmations and

00:44:52,960 --> 00:44:57,580
things so makes it a bit easier same

00:44:55,330 --> 00:44:59,320
point just run here we go

00:44:57,580 --> 00:45:00,280
I didn't take radon that was lucky open

00:44:59,320 --> 00:45:02,380
you have to wait quite a long time for

00:45:00,280 --> 00:45:04,570
this it ran out but a few times and now

00:45:02,380 --> 00:45:11,500
it's stopped it didn't get to the end

00:45:04,570 --> 00:45:14,710
point so back trace looks much like

00:45:11,500 --> 00:45:17,040
before my stack is messed up so I have

00:45:14,710 --> 00:45:19,180
limited information on how I got here

00:45:17,040 --> 00:45:24,580
but now I can do something a bit better

00:45:19,180 --> 00:45:26,770
right now I can go reverse step I to

00:45:24,580 --> 00:45:29,440
step high in gdb will step you forwards

00:45:26,770 --> 00:45:31,630
one machine instruction so reverse step

00:45:29,440 --> 00:45:34,590
I will step you backwards one machine

00:45:31,630 --> 00:45:39,010
instruction which if I do that now that

00:45:34,590 --> 00:45:41,980
I've gone back into sensible land right

00:45:39,010 --> 00:45:43,500
I'm back into my into my code here let's

00:45:41,980 --> 00:45:46,740
go into

00:45:43,500 --> 00:45:49,710
tewi okay so I'm at the return statement

00:45:46,740 --> 00:45:52,320
from Maine so you know all signs point

00:45:49,710 --> 00:45:54,900
to spat stack smashing now I still need

00:45:52,320 --> 00:45:58,620
to figure out how did that happen right

00:45:54,900 --> 00:45:59,640
how did my stack get smashed well let's

00:45:58,620 --> 00:46:01,770
have a look I mean first of all let's

00:45:59,640 --> 00:46:06,210
just just make sure that I'm I'm correct

00:46:01,770 --> 00:46:07,590
and so just to sum dis a sort of

00:46:06,210 --> 00:46:09,660
disassembly gives me disassembly the

00:46:07,590 --> 00:46:11,730
current function I can see in that

00:46:09,660 --> 00:46:13,650
little arrow the bottom tells me the a

00:46:11,730 --> 00:46:15,630
machine instruction I'm on and sure

00:46:13,650 --> 00:46:17,280
enough I'm I'm on a return instruction

00:46:15,630 --> 00:46:18,780
right so I've gone reverse one

00:46:17,280 --> 00:46:23,040
instruction it's gone back to a route

00:46:18,780 --> 00:46:26,460
machine return instruction now one x86

00:46:23,040 --> 00:46:28,920
does when it returns is it fetches that

00:46:26,460 --> 00:46:30,780
the stack pointer points at the actual

00:46:28,920 --> 00:46:35,370
return address right so I can look at

00:46:30,780 --> 00:46:39,420
the stack pointer like that and then I

00:46:35,370 --> 00:46:45,390
should be able to look at what's there

00:46:39,420 --> 00:46:47,280
so examine that and actually that's so

00:46:45,390 --> 00:46:50,880
and I think I need to get it time I

00:46:47,280 --> 00:46:53,070
actually know that it would wanna do all

00:46:50,880 --> 00:46:55,230
right I'm gonna do this T I'm about to

00:46:53,070 --> 00:46:59,840
do that and it just cast it to a long

00:46:55,230 --> 00:47:06,290
star star and and we'll look at there

00:46:59,840 --> 00:47:10,260
look at it here so is that valid memory

00:47:06,290 --> 00:47:11,370
no right so the cop of the different

00:47:10,260 --> 00:47:13,230
address since last time because it's

00:47:11,370 --> 00:47:15,320
kind of non-deterministic bug at the top

00:47:13,230 --> 00:47:17,520
of the stack contains a pointer to

00:47:15,320 --> 00:47:20,360
invalid memory hence when I execute that

00:47:17,520 --> 00:47:23,250
return instruction it's going to blow up

00:47:20,360 --> 00:47:26,460
right but once again how did that happen

00:47:23,250 --> 00:47:28,740
alright how did I get here how did my

00:47:26,460 --> 00:47:31,320
top of my stack contain get to contain

00:47:28,740 --> 00:47:33,300
bad data well you know I could do a few

00:47:31,320 --> 00:47:35,100
things like maybe do binary search and

00:47:33,300 --> 00:47:36,330
time jump back and forth try and find

00:47:35,100 --> 00:47:38,610
what's gone wrong but we can do a bit

00:47:36,330 --> 00:47:41,520
better we can use a watch point right so

00:47:38,610 --> 00:47:44,370
watch points typically used when you go

00:47:41,520 --> 00:47:47,130
forwards and it hooks into the hardware

00:47:44,370 --> 00:47:51,750
usually to run forward until a

00:47:47,130 --> 00:47:53,460
particular variable changes value but I

00:47:51,750 --> 00:47:56,120
can do those in Reverse as well which is

00:47:53,460 --> 00:47:56,120
super cool

00:47:56,700 --> 00:48:07,140
so to do like this so so I want to watch

00:48:03,490 --> 00:48:14,410
the top of the stack top of the stack is

00:48:07,140 --> 00:48:18,490
that dollar one so if I go watch for the

00:48:14,410 --> 00:48:20,080
simplest way to do it is that all right

00:48:18,490 --> 00:48:21,730
and that's going to watch that location

00:48:20,080 --> 00:48:27,690
in memory actually what I could have

00:48:21,730 --> 00:48:30,850
done is watch - L and probably done that

00:48:27,690 --> 00:48:33,370
and that probably would have done so -

00:48:30,850 --> 00:48:35,350
knock - P - L the location that were

00:48:33,370 --> 00:48:36,640
done the same thing so just beware with

00:48:35,350 --> 00:48:40,300
watch points you're watching an

00:48:36,640 --> 00:48:41,830
expression not a value of memory which

00:48:40,300 --> 00:48:43,480
if you're debugging memory corruption

00:48:41,830 --> 00:48:45,040
bug stop it often you're just looking at

00:48:43,480 --> 00:48:47,080
that value of memory because like it's

00:48:45,040 --> 00:48:50,190
some aliased pointer or something else

00:48:47,080 --> 00:48:53,170
that's the buffer overrun or something

00:48:50,190 --> 00:48:54,910
so the watch - L actually just watches

00:48:53,170 --> 00:48:56,800
the address if you watch the expression

00:48:54,910 --> 00:48:59,790
it kind of tries to be clever and when

00:48:56,800 --> 00:49:01,600
you go out of scope ill disable the

00:48:59,790 --> 00:49:03,340
expression and if you if you're watching

00:49:01,600 --> 00:49:04,990
something that might change like a

00:49:03,340 --> 00:49:06,070
register if your expression is based on

00:49:04,990 --> 00:49:07,450
a register we'll have to do a software

00:49:06,070 --> 00:49:11,590
watch when don't have time to get into

00:49:07,450 --> 00:49:14,080
that but it's in the slides anyway I've

00:49:11,590 --> 00:49:16,360
put a watch point on the top of my snack

00:49:14,080 --> 00:49:17,980
so now when I reverse continue if I

00:49:16,360 --> 00:49:20,110
didn't have stack smashing what I would

00:49:17,980 --> 00:49:22,630
expect to happen is I would go back to

00:49:20,110 --> 00:49:24,370
the call site or the very beginning of

00:49:22,630 --> 00:49:26,380
main because that's when the return

00:49:24,370 --> 00:49:29,790
address should get pushed right just

00:49:26,380 --> 00:49:33,130
before just by main is called but as I

00:49:29,790 --> 00:49:34,150
think I've got stack smashing here it's

00:49:33,130 --> 00:49:37,960
probably gonna happen sooner than that

00:49:34,150 --> 00:49:40,930
so reverse continue and sure enough what

00:49:37,960 --> 00:49:44,770
are the chances it's in my array

00:49:40,930 --> 00:49:48,070
assignment so I'm assigning to the array

00:49:44,770 --> 00:49:54,630
and I seem to be overwriting the return

00:49:48,070 --> 00:49:58,660
address of my stack print I or is 33 I

00:49:54,630 --> 00:50:03,130
can go what is array and it tells me

00:49:58,660 --> 00:50:05,170
that an array array is an array of 32

00:50:03,130 --> 00:50:08,280
Long's and I've just indexed the

00:50:05,170 --> 00:50:08,280
thirty-third entry

00:50:08,910 --> 00:50:12,840
why have I done that or I can see here

00:50:10,920 --> 00:50:16,080
I've got percent signs of of course

00:50:12,840 --> 00:50:18,900
here's the problem right so size of

00:50:16,080 --> 00:50:24,090
array is the size in bytes sizing

00:50:18,900 --> 00:50:27,000
elements so you know schoolboy error but

00:50:24,090 --> 00:50:30,060
you know the point is clear enough right

00:50:27,000 --> 00:50:32,340
so by by by using that little bit of

00:50:30,060 --> 00:50:34,530
scripting and the gdb inbuilt recording

00:50:32,340 --> 00:50:35,970
we were able to go back and see what

00:50:34,530 --> 00:50:37,250
happened rather than have to try and

00:50:35,970 --> 00:50:39,840
guess and particularly with

00:50:37,250 --> 00:50:41,730
non-deterministic intermittent failures

00:50:39,840 --> 00:50:43,650
like that that's that's a really

00:50:41,730 --> 00:50:48,720
powerful thing to be able to do yes

00:50:43,650 --> 00:50:50,730
couple of questions here could I look at

00:50:48,720 --> 00:50:53,210
the core phone and go back no because

00:50:50,730 --> 00:50:55,530
the core file has like the information

00:50:53,210 --> 00:50:57,060
when the reason this is hard when the

00:50:55,530 --> 00:50:58,860
program is running the computer is

00:50:57,060 --> 00:51:00,390
running it's destroying information all

00:50:58,860 --> 00:51:02,490
the time every time it writes to a

00:51:00,390 --> 00:51:04,530
memory location or to a register what

00:51:02,490 --> 00:51:06,690
was there before it's gone so in the

00:51:04,530 --> 00:51:07,740
core file that information physically

00:51:06,690 --> 00:51:11,880
has been destroyed it doesn't exist

00:51:07,740 --> 00:51:14,190
anywhere in the universe so so yeah now

00:51:11,880 --> 00:51:16,380
you can there are things you can do you

00:51:14,190 --> 00:51:17,940
could use our live recorder product

00:51:16,380 --> 00:51:20,460
which gives you kind of a cool file but

00:51:17,940 --> 00:51:22,110
with that historical information right

00:51:20,460 --> 00:51:25,470
so that then enables you to do what you

00:51:22,110 --> 00:51:27,420
want to do and and another plug for the

00:51:25,470 --> 00:51:29,910
back-trace guys who are just behind who

00:51:27,420 --> 00:51:32,550
who do stuff this kind of core file

00:51:29,910 --> 00:51:35,460
debugging but extra stuff in it

00:51:32,550 --> 00:51:39,860
basically um but yeah you can't do

00:51:35,460 --> 00:51:39,860
reverse continue off the core file yeah

00:51:40,010 --> 00:51:52,920
yeah whoa you say that let's just do

00:51:46,290 --> 00:51:55,980
that again and enable record continue

00:51:52,920 --> 00:51:59,250
this is a very very small program right

00:51:55,980 --> 00:52:02,390
and you're but watch I've got my watch

00:51:59,250 --> 00:52:05,820
point set let me remove the watch point

00:52:02,390 --> 00:52:08,910
continue I took like half a second to

00:52:05,820 --> 00:52:11,750
run right because what it's doing

00:52:08,910 --> 00:52:17,940
underneath is it's single stepping

00:52:11,750 --> 00:52:19,470
instruction by instruction so it runs I

00:52:17,940 --> 00:52:20,880
mean it depends on the test case but

00:52:19,470 --> 00:52:22,760
typical kind of measurements for that

00:52:20,880 --> 00:52:25,150
are the slow down when you've got

00:52:22,760 --> 00:52:29,270
holding compared to native it's about

00:52:25,150 --> 00:52:30,650
50,000 times slower so you kind of need

00:52:29,270 --> 00:52:32,690
problem with inbuilt do to be reverse

00:52:30,650 --> 00:52:34,490
debugging is you kind of need to be able

00:52:32,690 --> 00:52:36,470
to put a breakpoint quite close to where

00:52:34,490 --> 00:52:38,570
it's going wrong and then enable the

00:52:36,470 --> 00:52:40,490
recording if you know how to do that

00:52:38,570 --> 00:52:43,100
you're kind of you know 90% of the way

00:52:40,490 --> 00:52:44,330
there already but that's said no it does

00:52:43,100 --> 00:52:46,160
get used right and do know people who

00:52:44,330 --> 00:52:48,170
use it particularly when trying to

00:52:46,160 --> 00:52:51,020
understand someone else's very clever

00:52:48,170 --> 00:52:52,460
code you know someone's been very smart

00:52:51,020 --> 00:52:54,410
and tried to optimize something it's

00:52:52,460 --> 00:52:58,400
quite good it's also very actually it

00:52:54,410 --> 00:53:01,670
does make debugging machine code like

00:52:58,400 --> 00:53:03,290
almost doable because you kind of get

00:53:01,670 --> 00:53:04,550
trouble debugging machine codes you get

00:53:03,290 --> 00:53:06,530
very lost very easily and you can go

00:53:04,550 --> 00:53:08,780
back to where you where and and and so

00:53:06,530 --> 00:53:12,550
it you know it definitely has has use

00:53:08,780 --> 00:53:17,660
cases but there are other alternatives

00:53:12,550 --> 00:53:23,570
and other alternatives no just are

00:53:17,660 --> 00:53:24,440
alternatives on it anyway um at least it

00:53:23,570 --> 00:53:30,860
would be there we go

00:53:24,440 --> 00:53:33,950
so show you some of these these so there

00:53:30,860 --> 00:53:35,450
is there's a number of things right and

00:53:33,950 --> 00:53:36,710
this list probably isn't it but

00:53:35,450 --> 00:53:38,240
certainly is an exhaustive list this

00:53:36,710 --> 00:53:39,350
this is evolving all the time there's

00:53:38,240 --> 00:53:41,390
quite a lot of these technologies coming

00:53:39,350 --> 00:53:45,710
around now to these inbuilt reverse

00:53:41,390 --> 00:53:48,740
debugging which we just saw inbuilt 2gd

00:53:45,710 --> 00:53:51,860
build in built to gdb it's on if you're

00:53:48,740 --> 00:53:56,810
running on a newer Intel CPU you can go

00:53:51,860 --> 00:53:57,410
record was it record record be trace

00:53:56,810 --> 00:54:00,290
yeah

00:53:57,410 --> 00:54:03,680
and that uses there's hot there silicon

00:54:00,290 --> 00:54:06,770
in the newer Intel CPUs that will like

00:54:03,680 --> 00:54:08,630
cause it to store the targets of all the

00:54:06,770 --> 00:54:11,660
branches as it's running in memory and

00:54:08,630 --> 00:54:13,100
gdb knows how to drive that stuff and so

00:54:11,660 --> 00:54:14,960
that's kind of cool

00:54:13,100 --> 00:54:17,980
it runs much faster than inbuilt gdb

00:54:14,960 --> 00:54:19,790
record still surprisingly slow

00:54:17,980 --> 00:54:21,980
measurements that I've done it's about

00:54:19,790 --> 00:54:23,570
100 times slow down which is surprising

00:54:21,980 --> 00:54:31,640
I think the newer CPUs are much better

00:54:23,570 --> 00:54:33,530
and and but it you know it and it's come

00:54:31,640 --> 00:54:35,750
back more usable in that sense however

00:54:33,530 --> 00:54:36,830
it only gives you a history or by the

00:54:35,750 --> 00:54:40,160
program counter

00:54:36,830 --> 00:54:43,190
so you can do reverse next but you can't

00:54:40,160 --> 00:54:45,710
look at the program state so I mean you

00:54:43,190 --> 00:54:47,210
know that's useful but it's not as

00:54:45,710 --> 00:54:48,680
useful as being absolutely program state

00:54:47,210 --> 00:54:50,660
and you certainly can't do things like

00:54:48,680 --> 00:54:52,609
watch points and go back and stuff right

00:54:50,660 --> 00:54:54,230
so it's not really reversible debugging

00:54:52,609 --> 00:54:56,930
in a sense but it is a kind of log of

00:54:54,230 --> 00:54:59,119
where you've been you do need a new

00:54:56,930 --> 00:55:02,800
enough Intel CPU although goes back a

00:54:59,119 --> 00:55:02,800
few years now and a new enough colonel

00:55:03,940 --> 00:55:08,660
there's another thing called RR which

00:55:06,109 --> 00:55:10,940
stands for record and replay which is

00:55:08,660 --> 00:55:13,609
much faster that's the fastest option

00:55:10,940 --> 00:55:15,530
actually that you have depends on the

00:55:13,609 --> 00:55:20,840
benchmark but typically around like less

00:55:15,530 --> 00:55:24,349
than 2x slow down and that gives you

00:55:20,840 --> 00:55:27,290
full data visibility all of the things

00:55:24,349 --> 00:55:30,950
you can do in gdb reverse debugging and

00:55:27,290 --> 00:55:32,599
so is quite is pretty powerful it is a

00:55:30,950 --> 00:55:37,550
little bit limited though in terms of

00:55:32,599 --> 00:55:40,550
both platform support and and also kind

00:55:37,550 --> 00:55:43,400
of features so so it's kind of separate

00:55:40,550 --> 00:55:45,740
record replay step only works on newer

00:55:43,400 --> 00:55:49,750
Intel CPUs doesn't work on AMD doesn't

00:55:45,740 --> 00:55:51,770
work on arm new cut a new kernel as well

00:55:49,750 --> 00:55:53,960
but you know if you've got all of those

00:55:51,770 --> 00:55:55,609
things and it works it works very well

00:55:53,960 --> 00:55:56,690
doesn't support programs that do share

00:55:55,609 --> 00:56:00,619
memories probably the biggest limitation

00:55:56,690 --> 00:56:03,619
and but yeah if it works it works well

00:56:00,619 --> 00:56:05,540
we've got undo TB for us which is

00:56:03,619 --> 00:56:06,170
perfect all of the above works with very

00:56:05,540 --> 00:56:08,030
good performance

00:56:06,170 --> 00:56:09,680
that's cross the platform you don't need

00:56:08,030 --> 00:56:12,260
special kernels you could work with arm

00:56:09,680 --> 00:56:17,450
does all those things so our new DB is

00:56:12,260 --> 00:56:23,300
wonderful but it is expensive but you

00:56:17,450 --> 00:56:24,320
know get what you pay for and how are we

00:56:23,300 --> 00:56:25,790
doing for time I think we're getting

00:56:24,320 --> 00:56:27,890
towards the end now which is a shame I

00:56:25,790 --> 00:56:29,180
could go on for ages but just just want

00:56:27,890 --> 00:56:32,750
maybe time for a couple more quick

00:56:29,180 --> 00:56:34,849
things GDP in it files this is my GDP in

00:56:32,750 --> 00:56:36,680
it I find this quite useful one word of

00:56:34,849 --> 00:56:38,359
caution don't be too clever in your GDP

00:56:36,680 --> 00:56:40,940
in it the second most common problem we

00:56:38,359 --> 00:56:42,980
find with customers GDP installations is

00:56:40,940 --> 00:56:45,230
somebody somewhere put like a run

00:56:42,980 --> 00:56:46,880
command in their GDP init file because

00:56:45,230 --> 00:56:49,460
they were too lazy to type our enter

00:56:46,880 --> 00:56:49,970
each time and that just caught it like

00:56:49,460 --> 00:56:51,230
you know just

00:56:49,970 --> 00:56:54,140
fuses people at some point it will

00:56:51,230 --> 00:56:56,060
confuse you or somebody else to keep the

00:56:54,140 --> 00:56:56,660
gbpn it's simple that's that's all I do

00:56:56,060 --> 00:57:03,230
in mine

00:56:56,660 --> 00:57:06,650
and yeah I run out of time we could

00:57:03,230 --> 00:57:09,349
definitely do a part two to this but you

00:57:06,650 --> 00:57:12,109
know I think we've seen I've kind of put

00:57:09,349 --> 00:57:13,940
this in order but let me just better if

00:57:12,109 --> 00:57:15,650
I didn't have to do this might debugging

00:57:13,940 --> 00:57:17,240
multi-process yeah if you can debug

00:57:15,650 --> 00:57:22,820
multiple processes same time that's very

00:57:17,240 --> 00:57:24,200
cool non stop mode you can debug a lot

00:57:22,820 --> 00:57:25,880
of threads run although that's the most

00:57:24,200 --> 00:57:28,070
reliable way to make gdb Ceglie in my

00:57:25,880 --> 00:57:29,750
experience breakpoints and watch points

00:57:28,070 --> 00:57:31,490
do more than you might think so you can

00:57:29,750 --> 00:57:33,080
watch like thread specific breakpoints

00:57:31,490 --> 00:57:34,490
and watch points you can put conditions

00:57:33,080 --> 00:57:36,020
on them which is kind of useful you can

00:57:34,490 --> 00:57:39,290
have read watch point if the hardware

00:57:36,020 --> 00:57:44,840
supports it one last word of warning or

00:57:39,290 --> 00:57:47,420
and then I run out of time and gdb

00:57:44,840 --> 00:57:48,530
sometimes sets this is the third most

00:57:47,420 --> 00:57:48,890
common problem that I've seen in

00:57:48,530 --> 00:57:52,340
practice

00:57:48,890 --> 00:57:54,050
gdb sometimes sets software watch points

00:57:52,340 --> 00:57:55,040
and doesn't tell you that it's what does

00:57:54,050 --> 00:57:59,230
tell you that it's done it but it's not

00:57:55,040 --> 00:58:02,119
obvious so if I start that program again

00:57:59,230 --> 00:58:05,150
you can watch like more than you might

00:58:02,119 --> 00:58:07,520
imagine I can watch all of array like

00:58:05,150 --> 00:58:09,680
that but watch point on array it's

00:58:07,520 --> 00:58:10,940
created the watch point right however

00:58:09,680 --> 00:58:13,339
there's a subtle difference it says

00:58:10,940 --> 00:58:18,320
watch point to array what it normally

00:58:13,339 --> 00:58:19,940
says like if I watch I oh no open done

00:58:18,320 --> 00:58:23,390
that that's surprising if I go watch a

00:58:19,940 --> 00:58:25,250
really zero Hardware watch plays right

00:58:23,390 --> 00:58:27,589
so I've created two software watch

00:58:25,250 --> 00:58:29,180
points and one Hardware watch point it's

00:58:27,589 --> 00:58:30,859
a harder watch point is almost certainly

00:58:29,180 --> 00:58:34,310
what you want because that uses the

00:58:30,859 --> 00:58:38,410
silicon and line silicon feature to run

00:58:34,310 --> 00:58:41,510
at full speed and stop out subtle ah

00:58:38,410 --> 00:58:43,890
when it when it needs to

00:58:41,510 --> 00:58:47,099
that amount of time or is that like a

00:58:43,890 --> 00:58:48,720
fire alarm anyway so I'm going to do one

00:58:47,099 --> 00:58:50,280
more command so continue I've got some

00:58:48,720 --> 00:58:55,109
software watchpoints and look how slow

00:58:50,280 --> 00:58:57,420
this is that's really really slow so you

00:58:55,109 --> 00:58:58,859
almost just beware of those if GDP being

00:58:57,420 --> 00:59:01,579
clever and putting watch put software

00:58:58,859 --> 00:59:04,910
watch points in there not what you want

00:59:01,579 --> 00:59:04,910

YouTube URL: https://www.youtube.com/watch?v=-n9Fkq1e6sg


