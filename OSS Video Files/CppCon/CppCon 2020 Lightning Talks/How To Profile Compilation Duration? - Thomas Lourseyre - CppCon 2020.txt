Title: How To Profile Compilation Duration? - Thomas Lourseyre - CppCon 2020
Publication date: 2020-10-15
Playlist: CppCon 2020 Lightning Talks
Description: 
	https://cppcon.org/
https://github.com/CppCon/CppCon2020
---
Yes, runtime performance might be an issue... but compilation duration might be too!

---
Thomas Lourseyre
Thales Sevices
Software developer
Nanterre, France

---
Streamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:09,679 --> 00:00:14,240
so how to profile compilation

00:00:11,679 --> 00:00:14,240
duration

00:00:14,799 --> 00:00:18,000
performance optimization runtime

00:00:16,560 --> 00:00:21,279
performance optimization

00:00:18,000 --> 00:00:22,560
is all fun and games as long as you care

00:00:21,279 --> 00:00:25,760
about it

00:00:22,560 --> 00:00:27,840
and you all brag about meta programming

00:00:25,760 --> 00:00:29,679
and c plus plus that aims to perform

00:00:27,840 --> 00:00:30,560
more and more operation at compile time

00:00:29,679 --> 00:00:32,480
but

00:00:30,560 --> 00:00:34,480
who thinks of the developers that have

00:00:32,480 --> 00:00:38,879
to compile all these time-consuming

00:00:34,480 --> 00:00:39,520
features well as a relevant example i'll

00:00:38,879 --> 00:00:42,840
talk about

00:00:39,520 --> 00:00:44,719
my project at work which is an embedded

00:00:42,840 --> 00:00:47,440
project uh

00:00:44,719 --> 00:00:49,520
that works with modules we have three

00:00:47,440 --> 00:00:50,719
kinds of modules algorithmic modules

00:00:49,520 --> 00:00:54,320
that

00:00:50,719 --> 00:00:57,760
do that are activated

00:00:54,320 --> 00:00:58,160
100 times per seconds but this just

00:00:57,760 --> 00:01:00,399
calls

00:00:58,160 --> 00:01:02,079
algorithms that we do not maintain so

00:01:00,399 --> 00:01:04,239
it's not our problem

00:01:02,079 --> 00:01:05,119
we have the computation modules that is

00:01:04,239 --> 00:01:08,560
the core of

00:01:05,119 --> 00:01:09,600
our software that are activated 10 times

00:01:08,560 --> 00:01:12,720
per second

00:01:09,600 --> 00:01:16,479
and of often uh

00:01:12,720 --> 00:01:19,520
100 milliseconds is widely enough

00:01:16,479 --> 00:01:21,520
for the operations we have to do so

00:01:19,520 --> 00:01:23,840
performance is not a problem unless

00:01:21,520 --> 00:01:24,720
there's a goofus that puts news inside

00:01:23,840 --> 00:01:26,799
of loop and

00:01:24,720 --> 00:01:28,560
that sort of things but doesn't quite

00:01:26,799 --> 00:01:32,320
open happens

00:01:28,560 --> 00:01:34,240
and finally metering modules that are

00:01:32,320 --> 00:01:36,400
that have a frequency of one pair

00:01:34,240 --> 00:01:40,159
seconds and we don't really care about

00:01:36,400 --> 00:01:42,799
performance in that case however

00:01:40,159 --> 00:01:43,600
at the start of the project um two years

00:01:42,799 --> 00:01:46,159
ago

00:01:43,600 --> 00:01:46,880
a full comprehension including unit

00:01:46,159 --> 00:01:50,000
tests

00:01:46,880 --> 00:01:52,320
took 15 minutes stops and

00:01:50,000 --> 00:01:55,439
today just a full compilation with a

00:01:52,320 --> 00:01:58,399
test takes at least a full hour

00:01:55,439 --> 00:01:59,280
and we are all like at work all day at

00:01:58,399 --> 00:02:03,280
waiting for

00:01:59,280 --> 00:02:05,200
program to compile so

00:02:03,280 --> 00:02:07,040
the goal of this talk is to answer the

00:02:05,200 --> 00:02:08,640
question how can i know

00:02:07,040 --> 00:02:10,160
where to look to speed up the

00:02:08,640 --> 00:02:13,680
compilation duration when

00:02:10,160 --> 00:02:15,680
performance is not that relevant and i

00:02:13,680 --> 00:02:18,000
pulled out a few tools to help you

00:02:15,680 --> 00:02:21,120
profile compilation time

00:02:18,000 --> 00:02:23,440
first there are compiler options

00:02:21,120 --> 00:02:24,560
f time report for g plus plus and f time

00:02:23,440 --> 00:02:26,800
tries for

00:02:24,560 --> 00:02:28,400
for clang which is pretty nice because

00:02:26,800 --> 00:02:31,680
you can put it in the true

00:02:28,400 --> 00:02:32,959
chrome pressing but it mainly works in

00:02:31,680 --> 00:02:36,080
debug mode

00:02:32,959 --> 00:02:39,360
as i know so it's not

00:02:36,080 --> 00:02:40,080
always that relevant there are profile

00:02:39,360 --> 00:02:43,599
templates

00:02:40,080 --> 00:02:47,120
from boost with the link

00:02:43,599 --> 00:02:49,920
and the project i did not

00:02:47,120 --> 00:02:51,840
have the time to to watch too but it

00:02:49,920 --> 00:02:54,959
sounds promising with its

00:02:51,840 --> 00:02:57,440
michael person template project and i

00:02:54,959 --> 00:03:01,440
think there are many more

00:02:57,440 --> 00:03:03,360
so to bring up an example

00:03:01,440 --> 00:03:05,040
write a little code here you have a

00:03:03,360 --> 00:03:05,840
function that is completed with two

00:03:05,040 --> 00:03:09,280
types

00:03:05,840 --> 00:03:12,000
which is nice and here i call it

00:03:09,280 --> 00:03:13,599
the function several times with every

00:03:12,000 --> 00:03:17,360
combination of these

00:03:13,599 --> 00:03:20,560
six types so i have 36 codes

00:03:17,360 --> 00:03:21,920
that each call a different signature of

00:03:20,560 --> 00:03:25,040
princeton

00:03:21,920 --> 00:03:26,159
i run it into g plus plus with the with

00:03:25,040 --> 00:03:29,360
the option

00:03:26,159 --> 00:03:30,080
and i have a result then i do the same

00:03:29,360 --> 00:03:32,640
with

00:03:30,080 --> 00:03:34,239
just this simple signature which

00:03:32,640 --> 00:03:37,360
implicitly converts

00:03:34,239 --> 00:03:37,840
these types well this is not very nice

00:03:37,360 --> 00:03:40,239
to

00:03:37,840 --> 00:03:42,560
cast inside longing to insert yes it's

00:03:40,239 --> 00:03:46,000
just five so we can do it

00:03:42,560 --> 00:03:49,040
and i have another result and when i

00:03:46,000 --> 00:03:52,319
compare this result i can see here

00:03:49,040 --> 00:03:56,640
we gain a bit more time the

00:03:52,319 --> 00:03:59,760
binary is a little is a little smaller

00:03:56,640 --> 00:04:04,560
and we can see what takes 20

00:03:59,760 --> 00:04:07,840
of the compilation time which is nice

00:04:04,560 --> 00:04:11,120
so here all these tools work

00:04:07,840 --> 00:04:13,120
and as a conclusion now i

00:04:11,120 --> 00:04:14,879
i really want to say that this is not a

00:04:13,120 --> 00:04:15,439
talk to convince you that templates are

00:04:14,879 --> 00:04:17,680
evil

00:04:15,439 --> 00:04:18,959
really i really like templates they are

00:04:17,680 --> 00:04:20,959
cool but

00:04:18,959 --> 00:04:22,240
i just want to tell you that you can

00:04:20,959 --> 00:04:24,320
reduce

00:04:22,240 --> 00:04:27,040
your compilation duration if you put a

00:04:24,320 --> 00:04:43,840
little effort into it

00:04:27,040 --> 00:04:43,840
and that'd be all for me thank you

00:04:48,560 --> 00:04:50,639

YouTube URL: https://www.youtube.com/watch?v=msSECd8vbPo


