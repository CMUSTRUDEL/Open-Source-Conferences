Title: How We Used To Be - Ben Deane - CppCon 2020
Publication date: 2020-10-15
Playlist: CppCon 2020 Lightning Talks
Description: 
	https://cppcon.org/
https://github.com/CppCon/CppCon2020
---
A peek into the problems of programming, 50 years ago.

---
Ben was in the game industry for 23 years, at companies like EA and Blizzard. For the last couple of years he's been working in the finance industry at Quantlab. He's always looking for useful new techniques in C++, and he geeks out on algorithms, APIs, types and functional programming.

---
Streamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:08,960 --> 00:00:12,880
all right

00:00:09,599 --> 00:00:14,880
thanks so this is a lightning talk about

00:00:12,880 --> 00:00:19,359
a 50 year old book

00:00:14,880 --> 00:00:22,960
and the book is this one

00:00:19,359 --> 00:00:26,320
this one and it's by

00:00:22,960 --> 00:00:27,119
jean samet now jean samet is a name you

00:00:26,320 --> 00:00:29,840
may not know

00:00:27,119 --> 00:00:30,960
but she is an important name in the

00:00:29,840 --> 00:00:32,559
history of programming

00:00:30,960 --> 00:00:34,239
she had a bachelor's and a master's

00:00:32,559 --> 00:00:35,120
degree in mathematics and an honorary

00:00:34,239 --> 00:00:37,680
doctorate

00:00:35,120 --> 00:00:38,239
from her alma mater she developed the

00:00:37,680 --> 00:00:41,520
formac

00:00:38,239 --> 00:00:43,680
language for mac and she was one of the

00:00:41,520 --> 00:00:46,320
developers of cobol

00:00:43,680 --> 00:00:48,079
but beyond that she maybe she is best

00:00:46,320 --> 00:00:48,879
known today as being the author of this

00:00:48,079 --> 00:00:50,640
book which

00:00:48,879 --> 00:00:52,399
in the words of walter brown was her

00:00:50,640 --> 00:00:55,440
life's work

00:00:52,399 --> 00:00:58,320
and this book came out in 1969

00:00:55,440 --> 00:01:01,199
and it covers about 120 languages there

00:00:58,320 --> 00:01:04,479
are over 800 bibliographic references

00:01:01,199 --> 00:01:06,320
in this book and there are examples for

00:01:04,479 --> 00:01:07,360
all of the major languages that were

00:01:06,320 --> 00:01:09,360
excellent at the time it's an

00:01:07,360 --> 00:01:12,159
astonishing reference work

00:01:09,360 --> 00:01:13,600
and it's a useful insight into you know

00:01:12,159 --> 00:01:15,600
many of the things we think today are

00:01:13,600 --> 00:01:17,280
new concerns new ideas new aspects of

00:01:15,600 --> 00:01:22,479
the programmer's condition

00:01:17,280 --> 00:01:22,479
were in fact well-known uh by 1970.

00:01:22,640 --> 00:01:26,240
so she starts out with definitions and

00:01:24,720 --> 00:01:27,920
the definition of a programming language

00:01:26,240 --> 00:01:30,799
which

00:01:27,920 --> 00:01:31,759
seems a bit amazing sort of but but

00:01:30,799 --> 00:01:33,600
actually

00:01:31,759 --> 00:01:34,880
you know at the time they certainly

00:01:33,600 --> 00:01:37,119
needed it

00:01:34,880 --> 00:01:39,040
and she said this interesting thing the

00:01:37,119 --> 00:01:40,079
user can write a program without knowing

00:01:39,040 --> 00:01:42,000
much if anything

00:01:40,079 --> 00:01:43,600
about the physical characteristics of

00:01:42,000 --> 00:01:45,040
the machine on which the program is to

00:01:43,600 --> 00:01:47,119
be run

00:01:45,040 --> 00:01:49,119
and then perhaps even more telling me

00:01:47,119 --> 00:01:51,200
this same comment does not apply if

00:01:49,119 --> 00:01:52,720
if he nowadays we would use gender

00:01:51,200 --> 00:01:54,560
gender neutral pronouns

00:01:52,720 --> 00:01:57,840
but this same comment does not apply if

00:01:54,560 --> 00:01:59,439
he wishes to obtain maximum efficiency

00:01:57,840 --> 00:02:01,600
so this stuff was new at the time but

00:01:59,439 --> 00:02:03,280
the concerns of a of a

00:02:01,600 --> 00:02:04,640
we might say a high level language

00:02:03,280 --> 00:02:07,840
laughingly

00:02:04,640 --> 00:02:09,599
um are the same the ability to fit the

00:02:07,840 --> 00:02:11,920
language to its problem domain

00:02:09,599 --> 00:02:13,520
portability desires and the abstraction

00:02:11,920 --> 00:02:16,879
afforded by the language

00:02:13,520 --> 00:02:18,720
distinct from the hardware

00:02:16,879 --> 00:02:20,480
so she goes on to list several

00:02:18,720 --> 00:02:22,160
advantages and disadvantages of

00:02:20,480 --> 00:02:23,440
so-called high-level languages bearing

00:02:22,160 --> 00:02:24,160
in mind the high-level language at the

00:02:23,440 --> 00:02:26,480
time

00:02:24,160 --> 00:02:28,160
we would probably now consider to be

00:02:26,480 --> 00:02:31,440
pretty low level

00:02:28,160 --> 00:02:32,640
and just like compilation time being a

00:02:31,440 --> 00:02:34,319
concern today

00:02:32,640 --> 00:02:37,120
it was perhaps even more of a concern

00:02:34,319 --> 00:02:38,319
then because

00:02:37,120 --> 00:02:40,080
almost no matter how long the

00:02:38,319 --> 00:02:41,519
computation time the compilation time is

00:02:40,080 --> 00:02:43,440
today we can be pretty sure that the

00:02:41,519 --> 00:02:47,120
runtime will outweigh it

00:02:43,440 --> 00:02:48,640
this was not the case in the late 60s

00:02:47,120 --> 00:02:50,879
you'll notice debugging is in both

00:02:48,640 --> 00:02:52,480
columns she noted that

00:02:50,879 --> 00:02:54,959
high level languages are often easier to

00:02:52,480 --> 00:02:58,239
debug on the other hand when you need to

00:02:54,959 --> 00:03:00,480
drop into the assembly as it were a

00:02:58,239 --> 00:03:02,080
using a lower level language ie and

00:03:00,480 --> 00:03:03,360
assembly to start with will usually

00:03:02,080 --> 00:03:05,680
result in the easier time

00:03:03,360 --> 00:03:07,840
debugging and high-level languages could

00:03:05,680 --> 00:03:10,319
obfuscate assembly

00:03:07,840 --> 00:03:11,440
and at the time there were many

00:03:10,319 --> 00:03:13,920
languages

00:03:11,440 --> 00:03:15,280
you know the late 60s was an amazing

00:03:13,920 --> 00:03:17,120
time for programming language

00:03:15,280 --> 00:03:19,440
experimentation and all these

00:03:17,120 --> 00:03:21,040
new languages coming out many of them

00:03:19,440 --> 00:03:22,879
were not general purpose many of them

00:03:21,040 --> 00:03:24,720
were special purpose and so

00:03:22,879 --> 00:03:26,239
there was the concern that well you

00:03:24,720 --> 00:03:28,080
don't use a string

00:03:26,239 --> 00:03:29,680
oriented language to do numerical

00:03:28,080 --> 00:03:30,720
calculations they're designed for two

00:03:29,680 --> 00:03:32,000
different things

00:03:30,720 --> 00:03:34,720
and it's sort of an interesting thing to

00:03:32,000 --> 00:03:34,720
think about today

00:03:34,879 --> 00:03:42,080
many of the other concerns were uh

00:03:38,560 --> 00:03:43,920
the same concerns we have now in c plus

00:03:42,080 --> 00:03:45,680
uh in the case of a language designed

00:03:43,920 --> 00:03:48,159
for use by a professional programmer

00:03:45,680 --> 00:03:49,680
as opposed to a scientist just working

00:03:48,159 --> 00:03:51,200
in a domain using programming to solve

00:03:49,680 --> 00:03:52,640
their problem

00:03:51,200 --> 00:03:54,560
major characteristic is to provide

00:03:52,640 --> 00:03:56,080
maximum capability and we as

00:03:54,560 --> 00:03:57,760
professional programmers

00:03:56,080 --> 00:03:59,439
almost always want to be able to get at

00:03:57,760 --> 00:04:01,519
the machine code and this is

00:03:59,439 --> 00:04:03,360
this is our life today we always want

00:04:01,519 --> 00:04:03,920
proof we have compiler explorer to help

00:04:03,360 --> 00:04:08,480
us out

00:04:03,920 --> 00:04:11,200
trust but verify she also said

00:04:08,480 --> 00:04:12,560
uh it should be kept in mind that the

00:04:11,200 --> 00:04:14,640
language and the means of defining the

00:04:12,560 --> 00:04:16,400
language are not the same thing

00:04:14,640 --> 00:04:17,919
and somehow the standardization process

00:04:16,400 --> 00:04:20,400
must avoid eliminating

00:04:17,919 --> 00:04:21,600
or preventing technical progress and

00:04:20,400 --> 00:04:23,919
again

00:04:21,600 --> 00:04:25,440
just from 50 years ago we lived this in

00:04:23,919 --> 00:04:28,479
c plus plus

00:04:25,440 --> 00:04:31,919
we do not define an implementation

00:04:28,479 --> 00:04:33,520
we define a standard we define a spec

00:04:31,919 --> 00:04:35,840
and somehow we have to move forward with

00:04:33,520 --> 00:04:38,320
that spec while allowing

00:04:35,840 --> 00:04:38,960
technical progress the same concerns we

00:04:38,320 --> 00:04:42,880
have today

00:04:38,960 --> 00:04:46,320
they had 50 years ago

00:04:42,880 --> 00:04:47,680
she also warned us not to judge our stl

00:04:46,320 --> 00:04:49,040
implementers based on what they

00:04:47,680 --> 00:04:50,479
implement because

00:04:49,040 --> 00:04:52,400
they were bound to implement that by the

00:04:50,479 --> 00:04:53,919
standard um

00:04:52,400 --> 00:04:55,600
the usefulness of the language must be

00:04:53,919 --> 00:04:57,520
judged independently of the compilers

00:04:55,600 --> 00:04:58,880
which implement it

00:04:57,520 --> 00:05:01,280
and you know something we should

00:04:58,880 --> 00:05:02,880
remember about cpl plus 20 perhaps is

00:05:01,280 --> 00:05:04,720
only after a language has been in use

00:05:02,880 --> 00:05:05,919
for a while can its advantages be

00:05:04,720 --> 00:05:08,960
ascertained

00:05:05,919 --> 00:05:11,840
we're not going to see all of the

00:05:08,960 --> 00:05:14,479
things we can do with 20 for another

00:05:11,840 --> 00:05:16,320
five years maybe

00:05:14,479 --> 00:05:18,400
and in the end the problems we have

00:05:16,320 --> 00:05:19,680
today are the same problems they had

00:05:18,400 --> 00:05:21,360
then

00:05:19,680 --> 00:05:23,199
the complexities of today's large

00:05:21,360 --> 00:05:24,880
computers make it very difficult to

00:05:23,199 --> 00:05:39,840
learn to program them at all

00:05:24,880 --> 00:05:39,840
let alone effectively

00:05:46,160 --> 00:05:48,240

YouTube URL: https://www.youtube.com/watch?v=ip_SR9CQrxk


