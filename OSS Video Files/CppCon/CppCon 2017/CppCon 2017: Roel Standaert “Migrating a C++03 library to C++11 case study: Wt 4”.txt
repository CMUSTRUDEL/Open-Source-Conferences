Title: CppCon 2017: Roel Standaert “Migrating a C++03 library to C++11 case study: Wt 4”
Publication date: 2017-10-09
Playlist: CppCon 2017
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
In this talk, we will describe the effort of migrating the API of a reasonably large open source library to C++11. During the migration we wanted to benefit from as many new C++ features as possible, while preserving the semantics and features of the library. We will present various trade-offs in choosing a smart pointer strategy that was compatible with the existing object ownership model. The signal/slot mechanism, formerly based on boost.signals, was simplified and replaced by an implementation relying on lambdas, std::function and std::bind. Many smaller helper classes such as Boost.Any, Boost.Date_Time, and others were replaced by their standard counterparts. 

The minimum requirements of Wt 4 are C++11, but we will describe how C++14/17 are used if the compiler supports them. 

The main benefit of this transition is that the Wt API became more self-explaining, compilation times have been reduced, run-time performance improved, and the library's user requires less knowledge of boost. We will also discuss secondary consequences of the transition, such as simpler stack traces and the impact on compiler errors. 

Wt is an open source widget-based web GUI library, first released in 2006. Before C++11 came around, Wt could be considered to be written in a modern style C++, relying as much as possible on the standard library and using boost libraries for missing C++ features. Wt 4 is the next major release of the library, fully embracing C++11. 

Visit https://www.webtoolkit.eu for more information.

— 
Roel Standaert: Emweb

Roel is a software developer at Emweb, the company that markets Wt, the C++ web toolkit. Roel holds a Master's degree in computer science from the University of Leuven.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,060 --> 00:00:06,450
good afternoon i'm gulstan dart and I

00:00:03,120 --> 00:00:09,599
work at M web mostly on wheaty I'm going

00:00:06,450 --> 00:00:13,559
to talk about how we dropped C++ of

00:00:09,599 --> 00:00:16,710
three supports in we t4 and migrated C++

00:00:13,559 --> 00:00:20,340
11 and modernized it a bit of course

00:00:16,710 --> 00:00:25,320
this is the decisions are we made and

00:00:20,340 --> 00:00:27,000
the considerations though we made so I'm

00:00:25,320 --> 00:00:32,059
not telling you that this is the

00:00:27,000 --> 00:00:35,969
definite way that you should ports every

00:00:32,059 --> 00:00:43,170
widget based web framework in C++ to C++

00:00:35,969 --> 00:00:45,390
11 but here goes so first of all to

00:00:43,170 --> 00:00:48,510
introduce we Tia bits it was first

00:00:45,390 --> 00:00:51,989
released in 2006 so it's been around for

00:00:48,510 --> 00:00:55,559
a while it was created by kunda for sure

00:00:51,989 --> 00:00:57,360
when he decided that he needed a web

00:00:55,559 --> 00:00:59,940
interface for this thing he was making

00:00:57,360 --> 00:01:01,890
and he didn't like web technologies

00:00:59,940 --> 00:01:06,360
because for most part web technologies

00:01:01,890 --> 00:01:08,250
are well they started out as something

00:01:06,360 --> 00:01:10,439
made to display pages of information

00:01:08,250 --> 00:01:12,090
with links in between them distributed

00:01:10,439 --> 00:01:14,159
over a network but not really for any

00:01:12,090 --> 00:01:17,070
single page very interactive of other

00:01:14,159 --> 00:01:19,530
applications so he developed a framework

00:01:17,070 --> 00:01:26,150
that was more like desktop GUI framework

00:01:19,530 --> 00:01:31,590
in particular a lot more like cutes so

00:01:26,150 --> 00:01:34,380
and as a results we can actually apply

00:01:31,590 --> 00:01:37,350
graceful degradation to our framework so

00:01:34,380 --> 00:01:40,860
when you're you can actually use a

00:01:37,350 --> 00:01:43,740
text-based browser to browse witty sites

00:01:40,860 --> 00:01:47,869
or you can use modern browsers and what

00:01:43,740 --> 00:01:51,299
use whatever technology is available and

00:01:47,869 --> 00:01:56,570
like yoots we D as an equally cutesy

00:01:51,299 --> 00:01:56,570
name WT is definitely pronounced witty

00:01:57,229 --> 00:02:02,549
so it's used as mostly as embedded in

00:02:00,180 --> 00:02:04,710
embedded applications or the front-end

00:02:02,549 --> 00:02:08,569
for just any C++ based application

00:02:04,710 --> 00:02:10,979
usually the kind of applications that

00:02:08,569 --> 00:02:13,080
have to do a lot of computation in the

00:02:10,979 --> 00:02:15,450
background you need a from zone for that

00:02:13,080 --> 00:02:20,520
and which is very convenient for that

00:02:15,450 --> 00:02:22,710
and it's mostly appealing to people who

00:02:20,520 --> 00:02:24,780
already know cute and won support that

00:02:22,710 --> 00:02:26,490
to the web because there are benefits to

00:02:24,780 --> 00:02:30,270
deploying things on the web rather than

00:02:26,490 --> 00:02:32,280
having it as a desktop application so to

00:02:30,270 --> 00:02:36,390
give you an example of what a typical we

00:02:32,280 --> 00:02:39,300
t3 application would look like you would

00:02:36,390 --> 00:02:41,900
in your main function you would call W

00:02:39,300 --> 00:02:44,850
wrong which is utility function which

00:02:41,900 --> 00:02:49,380
spawns off a server based on the

00:02:44,850 --> 00:02:52,050
arguments that you pass in and then you

00:02:49,380 --> 00:02:55,260
pass in this callback create application

00:02:52,050 --> 00:02:59,000
for example and that one gets calls

00:02:55,260 --> 00:03:05,190
every time there's a new user serve who

00:02:59,000 --> 00:03:07,680
surfs to this web page so every new user

00:03:05,190 --> 00:03:08,460
session is one instance of a W

00:03:07,680 --> 00:03:11,160
application

00:03:08,460 --> 00:03:15,120
so this W application this create

00:03:11,160 --> 00:03:19,560
application gets environments which

00:03:15,120 --> 00:03:23,160
tells us something about the user that's

00:03:19,560 --> 00:03:26,459
accessing it's the stuff like user

00:03:23,160 --> 00:03:29,850
agents IP address that kind of stuff and

00:03:26,459 --> 00:03:34,200
then you make a new W application this

00:03:29,850 --> 00:03:38,430
is boot III so you use new still and

00:03:34,200 --> 00:03:41,640
then you get like the roots of this

00:03:38,430 --> 00:03:43,260
application which is like and we T

00:03:41,640 --> 00:03:45,900
everything is organized in this widget

00:03:43,260 --> 00:03:48,410
tree so you start from the roots and you

00:03:45,900 --> 00:03:51,690
add everything to this root to edge it

00:03:48,410 --> 00:03:53,400
so this dot dot dot that's where you

00:03:51,690 --> 00:03:55,110
would add a whole bunch of stuff to just

00:03:53,400 --> 00:03:57,900
root widget and connect your singles or

00:03:55,110 --> 00:04:00,209
the slots and then eventually you return

00:03:57,900 --> 00:04:02,000
this application to we TM we T will take

00:04:00,209 --> 00:04:05,520
it from there

00:04:02,000 --> 00:04:08,430
so for example what you could do in this

00:04:05,520 --> 00:04:10,769
dot dot dot is you could get this

00:04:08,430 --> 00:04:16,799
container this roots in HTML that would

00:04:10,769 --> 00:04:19,200
be a div and then you can use add

00:04:16,799 --> 00:04:21,690
widgets add stuff to it so you treat

00:04:19,200 --> 00:04:24,479
like a button with new W push button you

00:04:21,690 --> 00:04:25,510
would give it a name and then call add

00:04:24,479 --> 00:04:27,730
widgets add its

00:04:25,510 --> 00:04:29,710
and you do the same thing for some text

00:04:27,730 --> 00:04:33,040
if you know HTML that's kind of like a

00:04:29,710 --> 00:04:35,140
spam and you could have it's a button

00:04:33,040 --> 00:04:37,720
not clicked yet for example and then you

00:04:35,140 --> 00:04:40,210
can take some signals for example

00:04:37,720 --> 00:04:42,910
there's a click signal defined on the

00:04:40,210 --> 00:04:46,420
button and you can connect that to for

00:04:42,910 --> 00:04:48,790
example a lambda and so you can update

00:04:46,420 --> 00:04:52,360
the text when you click on the button

00:04:48,790 --> 00:04:54,850
and as a result it's exactly what you

00:04:52,360 --> 00:04:56,650
would expect you see a button with some

00:04:54,850 --> 00:04:59,020
text button or clicked yet and you click

00:04:56,650 --> 00:05:04,330
the button and it turns into a button

00:04:59,020 --> 00:05:06,910
clicks so which would be for what we

00:05:04,330 --> 00:05:10,150
wanted to do was make using witty a lot

00:05:06,910 --> 00:05:12,880
more fun and for us that meant making it

00:05:10,150 --> 00:05:17,680
more clear and more safe especially the

00:05:12,880 --> 00:05:19,720
way that we have memory and witty and we

00:05:17,680 --> 00:05:21,730
wanted to improve our compilation speeds

00:05:19,720 --> 00:05:26,350
because well see both was as notoriously

00:05:21,730 --> 00:05:30,490
slow to compile and we wanted to make it

00:05:26,350 --> 00:05:35,400
a bit more familiar to people who are

00:05:30,490 --> 00:05:39,580
already familiar with modern C++ 11

00:05:35,400 --> 00:05:43,390
practices so they'd expects to see stuff

00:05:39,580 --> 00:05:45,100
like well a unique pointer owns

00:05:43,390 --> 00:05:47,290
something in a row pointer doesn't know

00:05:45,100 --> 00:05:49,690
knits that's not something in it which

00:05:47,290 --> 00:05:54,160
III and we wanted to move towards that

00:05:49,690 --> 00:05:58,260
and we also wanted to fix a bunch of

00:05:54,160 --> 00:06:02,380
problems in the API that's major version

00:05:58,260 --> 00:06:03,850
increments allow us to do that and but

00:06:02,380 --> 00:06:05,950
overall we wanted to keep it consistent

00:06:03,850 --> 00:06:07,300
with how it already wasn't with the

00:06:05,950 --> 00:06:09,490
three we don't want to annoy our

00:06:07,300 --> 00:06:11,320
existing users by just changing

00:06:09,490 --> 00:06:14,290
everything and making it completely

00:06:11,320 --> 00:06:17,710
unfamiliar and whenever we broke

00:06:14,290 --> 00:06:19,660
something we will make sure that if it

00:06:17,710 --> 00:06:24,550
was a major thing we would break it at a

00:06:19,660 --> 00:06:26,470
compile time so that users wouldn't well

00:06:24,550 --> 00:06:28,030
be able to just recompile their wits

00:06:26,470 --> 00:06:31,870
your three code and just have a whole

00:06:28,030 --> 00:06:35,650
bunch of runtime errors because that

00:06:31,870 --> 00:06:38,569
would also just be really annoying

00:06:35,650 --> 00:06:40,419
so the first problem that we really

00:06:38,569 --> 00:06:43,400
wanted to tackle is this non-obvious

00:06:40,419 --> 00:06:46,699
memory management and this question

00:06:43,400 --> 00:06:50,599
showed up on Stack Overflow like a week

00:06:46,699 --> 00:06:52,969
ago and someone asking the same thing I

00:06:50,599 --> 00:06:55,879
asked when I started working at M web

00:06:52,969 --> 00:06:58,520
three and a half years ago I didn't know

00:06:55,879 --> 00:07:01,340
that much of C++ yet and I actually

00:06:58,520 --> 00:07:05,870
started out with C++ 11 and then had to

00:07:01,340 --> 00:07:07,819
learn C+ also three stuff and for me it

00:07:05,870 --> 00:07:10,580
was also weird that I was seeing all

00:07:07,819 --> 00:07:13,789
these new calls and then no deletes and

00:07:10,580 --> 00:07:16,550
I was like oh I was really paranoid

00:07:13,789 --> 00:07:19,030
about well where was all this memory

00:07:16,550 --> 00:07:24,080
going is it just leaking everywhere well

00:07:19,030 --> 00:07:26,389
not really but the way that we did it in

00:07:24,080 --> 00:07:30,800
with d3 is just whenever you'd call add

00:07:26,389 --> 00:07:34,849
widgets that would that would transfer

00:07:30,800 --> 00:07:36,590
the ownership to that container but so

00:07:34,849 --> 00:07:39,949
the problem with the typical witty three

00:07:36,590 --> 00:07:42,169
code is one whatever happens between the

00:07:39,949 --> 00:07:46,159
creation of this new button and adding

00:07:42,169 --> 00:07:48,889
it to this container then well something

00:07:46,159 --> 00:07:51,469
could throw there and then you'd have a

00:07:48,889 --> 00:07:53,240
leak and then afterwards when you move

00:07:51,469 --> 00:07:58,370
it well it's not obvious that the

00:07:53,240 --> 00:08:00,169
ownership is transferred and there was

00:07:58,370 --> 00:08:02,750
actually also a second way to do it and

00:08:00,169 --> 00:08:05,629
that's to create to call this

00:08:02,750 --> 00:08:09,740
constructor directly with the container

00:08:05,629 --> 00:08:13,219
as a parameter but the problem with that

00:08:09,740 --> 00:08:16,490
is we'd have to be really careful in the

00:08:13,219 --> 00:08:18,349
implementation of this add widget code

00:08:16,490 --> 00:08:20,930
because we couldn't assume that it was

00:08:18,349 --> 00:08:23,810
like a fully instantiated widget yet so

00:08:20,930 --> 00:08:26,419
we actually definitely had a few bugs

00:08:23,810 --> 00:08:28,279
related to that so yeah it's also

00:08:26,419 --> 00:08:29,750
mentioned ineffective C++ that you

00:08:28,279 --> 00:08:31,460
shouldn't call virtual functions you're

00:08:29,750 --> 00:08:34,039
in construction or destruction in other

00:08:31,460 --> 00:08:38,229
places where we were where we were doing

00:08:34,039 --> 00:08:40,760
at that and we had to eliminate that so

00:08:38,229 --> 00:08:42,409
it was already very clear what we have

00:08:40,760 --> 00:08:47,029
to do with method number two we had to

00:08:42,409 --> 00:08:48,500
just scratch it so now the question was

00:08:47,029 --> 00:08:51,650
what do we do with this for

00:08:48,500 --> 00:08:53,630
first way of doing things first we

00:08:51,650 --> 00:08:55,640
thought maybe well we could just not

00:08:53,630 --> 00:08:57,110
transfer when you ship for example you

00:08:55,640 --> 00:09:00,590
could use make unique to make this

00:08:57,110 --> 00:09:05,090
button and then an on owning pointer to

00:09:00,590 --> 00:09:06,890
this container but then you'd also have

00:09:05,090 --> 00:09:08,920
to make sure that this button stays

00:09:06,890 --> 00:09:11,300
around as long as you need it

00:09:08,920 --> 00:09:14,240
there are pros to this because well

00:09:11,300 --> 00:09:16,790
there's no longer this potential leak

00:09:14,240 --> 00:09:18,950
when you have an exception and it's

00:09:16,790 --> 00:09:20,830
clear who owns it you just made it and

00:09:18,950 --> 00:09:23,480
you didn't move it so you still own it

00:09:20,830 --> 00:09:26,360
but the cons are well what if this

00:09:23,480 --> 00:09:27,890
button gets deleted what do we do do we

00:09:26,360 --> 00:09:29,540
remove it from the widget tree and then

00:09:27,890 --> 00:09:32,600
the button just disappears and it's

00:09:29,540 --> 00:09:34,490
completely valid and it will compile and

00:09:32,600 --> 00:09:38,150
there's no undefined behavior and it's

00:09:34,490 --> 00:09:40,100
really annoying to debug so if you let

00:09:38,150 --> 00:09:41,930
the pointer dangle that would be

00:09:40,100 --> 00:09:43,970
undefined behavior but at least there

00:09:41,930 --> 00:09:47,510
will be tools that allow us to check

00:09:43,970 --> 00:09:48,890
that it's also a bit cumbersome because

00:09:47,510 --> 00:09:51,380
you have to make sure that this button

00:09:48,890 --> 00:09:53,540
has to stay around for long enough and

00:09:51,380 --> 00:09:56,060
then yeah and you just end up making

00:09:53,540 --> 00:09:58,130
this whole shadow hierarchy or something

00:09:56,060 --> 00:10:01,520
like that to make sure that it stays

00:09:58,130 --> 00:10:04,220
around for long enough and even worse

00:10:01,520 --> 00:10:06,770
well in this particular case we could of

00:10:04,220 --> 00:10:10,160
course make it so that it doesn't

00:10:06,770 --> 00:10:11,990
compile anymore in several ways but if

00:10:10,160 --> 00:10:13,730
you had existing with the three code we

00:10:11,990 --> 00:10:16,130
just called new instead of make unique

00:10:13,730 --> 00:10:17,839
and then pass that in then which just

00:10:16,130 --> 00:10:22,480
leaked everywhere

00:10:17,839 --> 00:10:25,460
so from this we concluded that well this

00:10:22,480 --> 00:10:29,960
Chah a parent owns child relationship

00:10:25,460 --> 00:10:31,430
that is still a good way of doing it but

00:10:29,960 --> 00:10:33,320
we should make it clear some other way

00:10:31,430 --> 00:10:37,810
and we also thought well maybe we should

00:10:33,320 --> 00:10:40,190
could use SharePoint errs for that so

00:10:37,810 --> 00:10:42,440
for example you could just call make

00:10:40,190 --> 00:10:44,240
shared and then add it's this shared

00:10:42,440 --> 00:10:46,690
pointer and then you have a shared

00:10:44,240 --> 00:10:50,530
pointer in the container widget and

00:10:46,690 --> 00:10:50,530
where you just created it

00:10:51,610 --> 00:10:58,459
of course this again doesn't leak when

00:10:55,130 --> 00:11:00,740
there's an exception that throws but the

00:10:58,459 --> 00:11:01,860
ownership relationship is less clear

00:11:00,740 --> 00:11:03,860
here

00:11:01,860 --> 00:11:06,149
and you have to watch out for

00:11:03,860 --> 00:11:08,160
accidentally creating member leaks and

00:11:06,149 --> 00:11:12,570
one of the ways that you could do that

00:11:08,160 --> 00:11:14,790
is is that if you would define a lambda

00:11:12,570 --> 00:11:18,200
and I accidentally captured this share

00:11:14,790 --> 00:11:23,430
corner then you would just create a loop

00:11:18,200 --> 00:11:24,959
and it's also its strut safe but we

00:11:23,430 --> 00:11:28,550
don't actually need it to be thread safe

00:11:24,959 --> 00:11:31,620
because in in a W application we only

00:11:28,550 --> 00:11:34,579
modified a widget tree in one thread at

00:11:31,620 --> 00:11:42,149
a time so it's like an event-driven

00:11:34,579 --> 00:11:44,700
system that guarantees that so well in

00:11:42,149 --> 00:11:46,709
order to say the equivalent of share

00:11:44,700 --> 00:11:48,240
pointers to preg these loops would be to

00:11:46,709 --> 00:11:50,670
reuse weak pointers but then you'd

00:11:48,240 --> 00:11:54,260
actually it's actually remember some to

00:11:50,670 --> 00:11:56,790
use because it has to be thread safe

00:11:54,260 --> 00:11:59,279
because it also of course use raw

00:11:56,790 --> 00:12:02,550
pointers but then it's or references but

00:11:59,279 --> 00:12:04,230
then it gets a bit weird because you're

00:12:02,550 --> 00:12:07,890
using on the one side a shared pointer

00:12:04,230 --> 00:12:13,110
and then on the other side so we just

00:12:07,890 --> 00:12:15,209
decided to just keep it the same and but

00:12:13,110 --> 00:12:18,630
make it more explicit so we would just

00:12:15,209 --> 00:12:20,550
use make you need to make the widgets

00:12:18,630 --> 00:12:25,769
and then move them over to the container

00:12:20,550 --> 00:12:29,940
and this works but there's an error on

00:12:25,769 --> 00:12:34,100
the slides I hope you can spot it but I

00:12:29,940 --> 00:12:36,240
will get back to that later and so again

00:12:34,100 --> 00:12:38,370
when there is an exception that doesn't

00:12:36,240 --> 00:12:42,839
leak anymore it's clear who owns it now

00:12:38,370 --> 00:12:44,699
because there's moves happening but the

00:12:42,839 --> 00:12:48,690
cons are well this is a little bit more

00:12:44,699 --> 00:12:51,029
Provost and even worse well the widget

00:12:48,690 --> 00:12:54,480
is null after you move it so when you're

00:12:51,029 --> 00:12:57,180
actually connecting this singing slots

00:12:54,480 --> 00:12:58,980
to that single then while button is null

00:12:57,180 --> 00:13:01,829
and text is null so that's actually

00:12:58,980 --> 00:13:04,410
going to blow up so a straightforward

00:13:01,829 --> 00:13:07,350
way to fix that would just be to move

00:13:04,410 --> 00:13:11,730
the add widget calls to the back and

00:13:07,350 --> 00:13:13,380
then it would be fine again so this was

00:13:11,730 --> 00:13:16,810
the most common problem we encountered

00:13:13,380 --> 00:13:23,649
when porting our example so

00:13:16,810 --> 00:13:25,870
so we actually I actually only found

00:13:23,649 --> 00:13:28,959
this well actually once someone told me

00:13:25,870 --> 00:13:32,589
about this a few weeks ago that this

00:13:28,959 --> 00:13:36,160
existed but I was looking for some

00:13:32,589 --> 00:13:38,829
checker for it but it was actually too

00:13:36,160 --> 00:13:42,279
late but this is one of the ways that we

00:13:38,829 --> 00:13:45,700
could check use after move problems like

00:13:42,279 --> 00:13:49,570
that you use client ID and then if you

00:13:45,700 --> 00:13:51,490
use a run clang sadi pi you can run it

00:13:49,570 --> 00:13:54,790
on your entire projects and we actually

00:13:51,490 --> 00:13:57,790
before release of 44 still found two of

00:13:54,790 --> 00:14:03,160
those problems so luckily that was

00:13:57,790 --> 00:14:05,170
before release not after but because it

00:14:03,160 --> 00:14:06,910
was a quite common pattern now that we

00:14:05,170 --> 00:14:08,680
were adding these widgets to the widget

00:14:06,910 --> 00:14:12,220
tree but then we still kind of needed

00:14:08,680 --> 00:14:13,149
them we end up creating these template

00:14:12,220 --> 00:14:18,130
at overloads

00:14:13,149 --> 00:14:20,770
where we could pass in a specific kind

00:14:18,130 --> 00:14:24,070
of widget and then it would move that

00:14:20,770 --> 00:14:27,370
widget but it would also keep a raw

00:14:24,070 --> 00:14:29,529
pointer and return that so that you can

00:14:27,370 --> 00:14:34,770
still use that and then the example

00:14:29,529 --> 00:14:34,770
becomes a bit simpler so instead of

00:14:35,100 --> 00:14:39,430
having these moves or having to save it

00:14:37,810 --> 00:14:43,060
with a dot cat or something you could

00:14:39,430 --> 00:14:45,550
just call add widgets and as argument

00:14:43,060 --> 00:14:49,270
you just construct it in place and then

00:14:45,550 --> 00:14:52,149
you get a raw pointer out of that and

00:14:49,270 --> 00:14:55,800
you can later use that raw pointer to

00:14:52,149 --> 00:15:01,350
just still connect some signals to slots

00:14:55,800 --> 00:15:04,570
for example and then there was just one

00:15:01,350 --> 00:15:09,940
problem that we still have to tackle and

00:15:04,570 --> 00:15:11,740
that's well we were a bit paranoid about

00:15:09,940 --> 00:15:14,320
what if this widget that emits the

00:15:11,740 --> 00:15:18,100
signal outlives widgets that are used in

00:15:14,320 --> 00:15:20,470
this slot and that's how we came up with

00:15:18,100 --> 00:15:22,779
observing partners we thought well we

00:15:20,470 --> 00:15:26,829
need some kind of weak corner but then

00:15:22,779 --> 00:15:28,300
for things that are not in a shared

00:15:26,829 --> 00:15:28,920
pointer and we didn't need it to be

00:15:28,300 --> 00:15:30,420
tread safe

00:15:28,920 --> 00:15:33,899
so this is an extremely simple

00:15:30,420 --> 00:15:35,760
implementation now so we just made every

00:15:33,899 --> 00:15:38,820
widgets' inherit from Whitaker

00:15:35,760 --> 00:15:40,889
observable and then these with observing

00:15:38,820 --> 00:15:43,680
and it would just keep a vector of these

00:15:40,889 --> 00:15:48,029
observing pointers and whenever it was

00:15:43,680 --> 00:15:49,769
deleted then it would just invalidate

00:15:48,029 --> 00:15:51,300
all those observing pointers and the

00:15:49,769 --> 00:15:54,029
expectation there is that we'll have

00:15:51,300 --> 00:15:59,070
zero or very few observing pointers

00:15:54,029 --> 00:16:02,519
pointing to one observable we notice

00:15:59,070 --> 00:16:05,070
actually that for the most part this

00:16:02,519 --> 00:16:06,120
ended up being unnecessary because for

00:16:05,070 --> 00:16:09,480
the most part the way that our

00:16:06,120 --> 00:16:12,420
applications works this was an uncommon

00:16:09,480 --> 00:16:16,440
edge case and because we don't want to

00:16:12,420 --> 00:16:18,750
really force a new concepts on to our

00:16:16,440 --> 00:16:21,060
users you know and if they're sure

00:16:18,750 --> 00:16:24,690
that's yeah we're definitely not going

00:16:21,060 --> 00:16:27,360
to have these dangling pointers then we

00:16:24,690 --> 00:16:29,250
didn't want to necessarily say you have

00:16:27,360 --> 00:16:31,110
to use it so nowhere in our API we

00:16:29,250 --> 00:16:35,160
returned it nowhere in our API we

00:16:31,110 --> 00:16:40,199
request it so but you can use it if you

00:16:35,160 --> 00:16:43,380
want to but it's usually unnecessary so

00:16:40,199 --> 00:16:46,620
that's like the whole way that we

00:16:43,380 --> 00:16:49,980
changed our ownership model and how we

00:16:46,620 --> 00:16:54,029
made it more clear and so another thing

00:16:49,980 --> 00:16:56,910
that we could do now is well because C++

00:16:54,029 --> 00:16:59,399
11 and beyond incorporates a lot of

00:16:56,910 --> 00:17:01,680
features that were first in boost we

00:16:59,399 --> 00:17:03,799
could scratch a lot of that and replace

00:17:01,680 --> 00:17:06,179
it with stuff that's in now in the STL

00:17:03,799 --> 00:17:08,809
because we knew that these boost headers

00:17:06,179 --> 00:17:11,030
slowed compilation times a lot

00:17:08,809 --> 00:17:14,429
especially because you have a lot of

00:17:11,030 --> 00:17:17,339
headers that are just made to support

00:17:14,429 --> 00:17:22,470
older compilers and stuff and we didn't

00:17:17,339 --> 00:17:25,610
need that we just targeted C++ 11 now so

00:17:22,470 --> 00:17:28,590
and on Windows we actually have to

00:17:25,610 --> 00:17:31,080
distribute a binary version of boost

00:17:28,590 --> 00:17:34,530
with our binary build on Windows because

00:17:31,080 --> 00:17:36,900
it has to be binary compatible so we

00:17:34,530 --> 00:17:40,440
wanted to kind of eliminate it from our

00:17:36,900 --> 00:17:42,830
header files so these are some of the

00:17:40,440 --> 00:17:45,710
substitutions that we made

00:17:42,830 --> 00:17:48,290
so we replaced boost signals - which was

00:17:45,710 --> 00:17:53,120
previously our signal slot system works

00:17:48,290 --> 00:17:55,550
with our own implementation and now our

00:17:53,120 --> 00:17:57,410
implementation actually also because of

00:17:55,550 --> 00:18:00,700
ferry otic templates you don't need SED

00:17:57,410 --> 00:18:06,590
bind anymore to bind away a lot of extra

00:18:00,700 --> 00:18:09,260
rubbish and we also for example well

00:18:06,590 --> 00:18:12,610
instead of boost SEO we can now switch

00:18:09,260 --> 00:18:16,190
between boost SEO or standalone Accio so

00:18:12,610 --> 00:18:18,110
that one was the final one that enabled

00:18:16,190 --> 00:18:23,030
us to completely remove boost from the

00:18:18,110 --> 00:18:25,790
headers and boosts a time we were placed

00:18:23,030 --> 00:18:28,820
with chrono and Howard Henin's new date

00:18:25,790 --> 00:18:30,680
library which is excellent and is like

00:18:28,820 --> 00:18:33,110
proposed for inclusion in the standard

00:18:30,680 --> 00:18:35,660
at some point and I hope that it will

00:18:33,110 --> 00:18:40,700
get in at some point because well that's

00:18:35,660 --> 00:18:42,890
one dependency fewer them and the

00:18:40,700 --> 00:18:46,130
results of doing this were actually

00:18:42,890 --> 00:18:50,240
quite nice one of them was well boost

00:18:46,130 --> 00:18:54,140
signals to have quite long stack traces

00:18:50,240 --> 00:18:56,390
like if you wanted to see like in a

00:18:54,140 --> 00:18:59,390
lambda function like wire is this really

00:18:56,390 --> 00:19:01,640
being emitted the signal and yet have to

00:18:59,390 --> 00:19:03,560
go all the way down to frame 12 to find

00:19:01,640 --> 00:19:06,610
where it was being emitted and actually

00:19:03,560 --> 00:19:11,030
I'm not showing all of the code here yet

00:19:06,610 --> 00:19:13,730
because like there's so many templates

00:19:11,030 --> 00:19:18,320
substitutions going on there I shortened

00:19:13,730 --> 00:19:20,900
all the lines now so I'm witty for it's

00:19:18,320 --> 00:19:23,480
a little bit shorter it's still on frame

00:19:20,900 --> 00:19:29,480
6 but these lines are shorter and more

00:19:23,480 --> 00:19:31,340
understandable now and also one of the

00:19:29,480 --> 00:19:33,410
effects is well now that we eliminated

00:19:31,340 --> 00:19:36,050
the boost includes we could really speed

00:19:33,410 --> 00:19:38,270
up our compilation times so this is on

00:19:36,050 --> 00:19:41,020
this example that I showed you so it's

00:19:38,270 --> 00:19:44,090
mostly really showing this overhead and

00:19:41,020 --> 00:19:46,300
now the pre processed file size is just

00:19:44,090 --> 00:19:50,330
a fifth of what it was before and

00:19:46,300 --> 00:19:56,120
compilation time has also gone down with

00:19:50,330 --> 00:19:58,669
a fifth and also our windows builds now

00:19:56,120 --> 00:20:00,980
have a much smaller installer because we

00:19:58,669 --> 00:20:04,039
don't have to include boost it's also a

00:20:00,980 --> 00:20:06,799
lot faster to install because well boost

00:20:04,039 --> 00:20:08,809
has a lot of tiny header files and for

00:20:06,799 --> 00:20:12,500
some reason that's really slow to unpack

00:20:08,809 --> 00:20:16,850
on windows and our installed size went

00:20:12,500 --> 00:20:22,159
down by it's now three times small or

00:20:16,850 --> 00:20:25,820
less than three times smaller so and now

00:20:22,159 --> 00:20:29,240
so we T is now basically on Windows BYOB

00:20:25,820 --> 00:20:31,220
bring your own boosts if you want to you

00:20:29,240 --> 00:20:34,549
don't actually need but you can use any

00:20:31,220 --> 00:20:38,809
version of boost that you want so to

00:20:34,549 --> 00:20:42,020
conclude so this explicit ownership now

00:20:38,809 --> 00:20:43,940
is nice it's not straight forwards

00:20:42,020 --> 00:20:46,520
really to adapt to our ownership model

00:20:43,940 --> 00:20:48,679
to it I think we did an alright job but

00:20:46,520 --> 00:20:50,960
if someone else has some other ideas on

00:20:48,679 --> 00:20:52,399
how that could be done then I would love

00:20:50,960 --> 00:20:55,010
to hear it

00:20:52,399 --> 00:20:56,779
the auditions 2d STL are now a great

00:20:55,010 --> 00:20:59,510
opportunity which remove a lot of

00:20:56,779 --> 00:21:02,570
weights especially where we were using

00:20:59,510 --> 00:21:06,649
boost in our headers and really speed up

00:21:02,570 --> 00:21:08,809
compilation times and well we t4 was

00:21:06,649 --> 00:21:11,179
released last week and sadly we haven't

00:21:08,809 --> 00:21:13,130
heard much yet we've heard people say

00:21:11,179 --> 00:21:17,779
that our compilation time has improved

00:21:13,130 --> 00:21:21,440
and that was good but we really still

00:21:17,779 --> 00:21:26,690
have to hear from our users to really

00:21:21,440 --> 00:21:28,850
know if it was successful and you can

00:21:26,690 --> 00:21:32,149
get witty for now that's web toolkit

00:21:28,850 --> 00:21:35,260
dotty you if you want and I still have a

00:21:32,149 --> 00:21:35,260
little bit of time for questions

00:21:37,040 --> 00:21:43,339
[Applause]

00:21:46,460 --> 00:21:49,549
[Music]

00:21:52,710 --> 00:22:31,450
this one oh that one yeah yeah I was I

00:22:29,430 --> 00:22:33,900
was thinking about that I'm really

00:22:31,450 --> 00:22:38,410
actually I floated that idea one of the

00:22:33,900 --> 00:22:40,360
like if you don't know necessarily that

00:22:38,410 --> 00:22:44,770
we're really following these rules of

00:22:40,360 --> 00:22:47,350
raw pointer is always non owning then it

00:22:44,770 --> 00:22:49,240
would be less obvious that you're moving

00:22:47,350 --> 00:23:00,310
it but yeah it's it's something that we

00:22:49,240 --> 00:23:30,580
might still add now yeah so 401 will

00:23:00,310 --> 00:23:33,340
have that so you're saying that we

00:23:30,580 --> 00:23:37,800
should return a reference instead of a

00:23:33,340 --> 00:23:40,900
pointer here yeah well yeah that's I

00:23:37,800 --> 00:23:42,670
wanted to also ask boon about that about

00:23:40,900 --> 00:23:44,920
Hawaii chose a pointer instead of a

00:23:42,670 --> 00:23:47,400
reference in this case so I'm actually

00:23:44,920 --> 00:23:47,400
not sure

00:23:52,810 --> 00:24:05,049
so no more questions okay thank you

00:23:59,000 --> 00:24:05,049

YouTube URL: https://www.youtube.com/watch?v=G0OcaAAdl1o


