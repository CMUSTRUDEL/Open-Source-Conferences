Title: CppCon 2017: Rong Lu “C++ Development with Visual Studio Code”
Publication date: 2017-10-04
Playlist: CppCon 2017
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
If you’re looking for a fast and lightweight code editor, Visual Studio Code has you covered. Come get an overview of Visual Studio Code along with the C++ extension that enables editing, building, and debugging your C++ code across Windows, Mac, and Linux.
— 
Rong Lu: Microsoft, Senior Program Manager

Rong Lu is a Program Manager in the Visual C++ team at Microsoft. She has been working on the Visual Studio team for the past 10 years since she graduated with her master degree in computer science. She is currently working on Visual Studio tools for game development, Visual C++ tools for mobile development, and the C++ experience in Visual Studio Code. She has been a frequent speaker at many conferences since 2007.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,000 --> 00:00:04,620
all right um thank you so much for

00:00:02,070 --> 00:00:06,810
coming to this session I appreciate you

00:00:04,620 --> 00:00:09,809
spending one hour with me in this room

00:00:06,810 --> 00:00:11,940
talking about video studio code so my

00:00:09,809 --> 00:00:19,650
name is Ron Liu and I am a program

00:00:11,940 --> 00:00:22,080
manager among the visual C++ team that's

00:00:19,650 --> 00:00:24,300
good my name is Ron Liu and I am a

00:00:22,080 --> 00:00:27,539
program manager on the visual C++ team

00:00:24,300 --> 00:00:29,789
at Microsoft I be at Microsoft for over

00:00:27,539 --> 00:00:32,399
ten years the last six years on the

00:00:29,789 --> 00:00:34,079
sequence first team and most recently I

00:00:32,399 --> 00:00:37,140
started working on video studio code

00:00:34,079 --> 00:00:39,690
experience for C++ for the past six

00:00:37,140 --> 00:00:41,940
months or so so today we're really

00:00:39,690 --> 00:00:44,460
excited to be here to share with you

00:00:41,940 --> 00:00:50,309
what we have got a new video studio code

00:00:44,460 --> 00:00:53,010
for C++ developers Oh before we get

00:00:50,309 --> 00:00:55,559
started if you haven't already take our

00:00:53,010 --> 00:00:58,320
developer survey and you have a chance

00:00:55,559 --> 00:01:00,570
to win an Xbox one by end of the

00:00:58,320 --> 00:01:03,120
conference so we're gonna reveal to you

00:01:00,570 --> 00:01:08,310
who the winner is on Friday so make sure

00:01:03,120 --> 00:01:10,650
you get that URL akms /cp become so we

00:01:08,310 --> 00:01:13,200
do that every year we like you developer

00:01:10,650 --> 00:01:16,680
feedback that really helps us shape the

00:01:13,200 --> 00:01:18,270
future of the product so definitely take

00:01:16,680 --> 00:01:23,430
that survey even if you don't care about

00:01:18,270 --> 00:01:25,680
the Xbox one but and before we are going

00:01:23,430 --> 00:01:28,909
to start talking about what this talk is

00:01:25,680 --> 00:01:34,439
going to be about this is not the talk

00:01:28,909 --> 00:01:36,000
MSV cnvs 2017 so because we have another

00:01:34,439 --> 00:01:40,380
talk that's going on right now at the

00:01:36,000 --> 00:01:43,079
same time that is about em SVC microsoft

00:01:40,380 --> 00:01:46,049
visual c++ compiler libraries and Visual

00:01:43,079 --> 00:01:48,899
Studio 2017 so that if that is the

00:01:46,049 --> 00:01:51,509
content you're looking for should

00:01:48,899 --> 00:01:54,479
definitely either check out that room or

00:01:51,509 --> 00:01:56,070
watch the video online afterwards but I

00:01:54,479 --> 00:01:59,759
just want to make sure you are in the

00:01:56,070 --> 00:02:02,939
right room and looking forward to talk

00:01:59,759 --> 00:02:04,740
about vs code so this is what we are

00:02:02,939 --> 00:02:06,540
going to talk about in this session so

00:02:04,740 --> 00:02:08,550
we're gonna start off with a quick

00:02:06,540 --> 00:02:11,009
introduction in to Visual Studio code

00:02:08,550 --> 00:02:14,280
what the product is about

00:02:11,009 --> 00:02:17,760
I'm gonna spend most of the time doing

00:02:14,280 --> 00:02:20,489
demos actually ended in the tool and

00:02:17,760 --> 00:02:24,120
then we will have some a few some

00:02:20,489 --> 00:02:26,010
summary sites so for the demo part

00:02:24,120 --> 00:02:29,129
actually before I get into that

00:02:26,010 --> 00:02:31,530
can I get a quick show hands how many

00:02:29,129 --> 00:02:34,709
people have heard of vs cold product

00:02:31,530 --> 00:02:41,430
everyone wonderful how many of you have

00:02:34,709 --> 00:02:44,099
used it almost everyone maybe 85% how

00:02:41,430 --> 00:02:49,409
many of you have been using it on a

00:02:44,099 --> 00:02:53,220
daily basis a couple six seven eight

00:02:49,409 --> 00:02:57,329
okay thank you great so since most of

00:02:53,220 --> 00:03:00,180
you have heard of the product and the

00:02:57,329 --> 00:03:01,379
majority have used it I'm gonna go over

00:03:00,180 --> 00:03:03,060
the the easy part

00:03:01,379 --> 00:03:06,150
fairly quickly so we're gonna start off

00:03:03,060 --> 00:03:09,180
with something really simple so I want

00:03:06,150 --> 00:03:11,970
to do a 20 minute challenge to myself on

00:03:09,180 --> 00:03:14,940
stage and my team members think I'm

00:03:11,970 --> 00:03:17,579
crazy that wanna do that on stage but I

00:03:14,940 --> 00:03:20,099
actually want to build something from

00:03:17,579 --> 00:03:21,870
scratch like with zero code to start

00:03:20,099 --> 00:03:23,760
with and then we're gonna get into how

00:03:21,870 --> 00:03:26,250
we view the code and debug the code on

00:03:23,760 --> 00:03:27,810
stage or within 20 minutes so hopefully

00:03:26,250 --> 00:03:30,209
I'll be successful

00:03:27,810 --> 00:03:33,120
but then we're gonna move into trying

00:03:30,209 --> 00:03:35,069
out a more complex if hospice program in

00:03:33,120 --> 00:03:37,079
vs code we're gonna talk more about

00:03:35,069 --> 00:03:39,900
intellisense features and how you view

00:03:37,079 --> 00:03:42,750
then debug with more advanced features

00:03:39,900 --> 00:03:46,349
and then last but not least I'm gonna

00:03:42,750 --> 00:03:48,810
show a few vs code features so how you

00:03:46,349 --> 00:03:50,879
can make vs called your editor there are

00:03:48,810 --> 00:03:52,739
tons of things you can customize new

00:03:50,879 --> 00:03:55,049
video studio code to make that your

00:03:52,739 --> 00:03:58,019
editor

00:03:55,049 --> 00:03:58,859
this sounds good to everyone what we're

00:03:58,019 --> 00:04:02,879
going to cover today

00:03:58,859 --> 00:04:04,319
all right cool all right oh so quick

00:04:02,879 --> 00:04:07,650
introduction because you guys already

00:04:04,319 --> 00:04:11,040
heard or abused it so this is view

00:04:07,650 --> 00:04:15,180
studio which is really great

00:04:11,040 --> 00:04:17,849
IDE windows it is meant to be a fully

00:04:15,180 --> 00:04:19,829
featured IDE which has got lots of lots

00:04:17,849 --> 00:04:22,710
of features in it it really helps you to

00:04:19,829 --> 00:04:24,280
target multiple platforms it's got rich

00:04:22,710 --> 00:04:27,240
editing experience

00:04:24,280 --> 00:04:31,780
debugging it's also got like testing

00:04:27,240 --> 00:04:33,550
advanced diagnostics packaging tons of

00:04:31,780 --> 00:04:35,919
stuff in there and that's what your

00:04:33,550 --> 00:04:39,820
studio is meant to be video scene your

00:04:35,919 --> 00:04:42,010
code on the other hand was invented with

00:04:39,820 --> 00:04:45,430
a different going mind it's meant to be

00:04:42,010 --> 00:04:49,540
a lightweight code editor that's why we

00:04:45,430 --> 00:04:51,970
added code into his name and we complete

00:04:49,540 --> 00:04:55,389
change the color of the logo it's just

00:04:51,970 --> 00:04:56,830
not to be confused with video studio so

00:04:55,389 --> 00:04:59,470
it's meant to be a lightweight but

00:04:56,830 --> 00:05:01,510
powerful code editor more good news it's

00:04:59,470 --> 00:05:03,820
completely free it's open source on

00:05:01,510 --> 00:05:06,340
github and it runs everywhere by

00:05:03,820 --> 00:05:10,240
everywhere really mean it it runs on

00:05:06,340 --> 00:05:12,070
Windows Linux and Mac it has got buting

00:05:10,240 --> 00:05:15,610
support for javascript typescript and

00:05:12,070 --> 00:05:18,250
nodejs but it does support more many

00:05:15,610 --> 00:05:21,640
more languages via extensions so we at

00:05:18,250 --> 00:05:24,250
Microsoft that we provide the C++ and C

00:05:21,640 --> 00:05:26,650
sharp extensions and there are there's

00:05:24,250 --> 00:05:29,640
the community out there that's providing

00:05:26,650 --> 00:05:32,820
much more language support as well

00:05:29,640 --> 00:05:36,130
yes code is completely extensible and

00:05:32,820 --> 00:05:39,910
customizable what you'll see in some of

00:05:36,130 --> 00:05:42,220
the demos later on last but not least it

00:05:39,910 --> 00:05:45,220
also get get integration so you can

00:05:42,220 --> 00:05:49,780
pretty much do everything with it from

00:05:45,220 --> 00:05:51,490
within the visual studio code IDE so

00:05:49,780 --> 00:05:54,720
let's talk a little bit about the vs

00:05:51,490 --> 00:05:58,900
code C++ extension that we provide

00:05:54,720 --> 00:06:01,150
basically enable C++ in Tennyson's Co

00:05:58,900 --> 00:06:03,910
browsing code formatting and debugging

00:06:01,150 --> 00:06:06,669
functionalities and things it was

00:06:03,910 --> 00:06:10,570
shipped a year and a half ago we have

00:06:06,669 --> 00:06:12,490
got over three million downloads so

00:06:10,570 --> 00:06:15,220
we're really proud of that and we keep

00:06:12,490 --> 00:06:17,320
keeping updating this extension on

00:06:15,220 --> 00:06:19,690
monthly basis so you're gonna see a lot

00:06:17,320 --> 00:06:22,539
of updates and today actually I'm gonna

00:06:19,690 --> 00:06:25,330
show the absolute latest features that I

00:06:22,539 --> 00:06:27,190
have installed on my machine that's

00:06:25,330 --> 00:06:28,630
going out this week so there's

00:06:27,190 --> 00:06:29,410
definitely something you haven't seen

00:06:28,630 --> 00:06:32,770
before

00:06:29,410 --> 00:06:34,300
that I'm gonna show you today and of

00:06:32,770 --> 00:06:35,979
course it runs cross-platform

00:06:34,300 --> 00:06:37,180
we do support all the three platforms

00:06:35,979 --> 00:06:40,660
that vs code

00:06:37,180 --> 00:06:42,070
ports that's why I have brought you two

00:06:40,660 --> 00:06:44,229
different machines today here's Mack

00:06:42,070 --> 00:06:46,389
canceling Windows machine I'm gonna do

00:06:44,229 --> 00:06:48,250
demos on both machines just so you know

00:06:46,389 --> 00:06:49,930
when I'm not lying to you that we

00:06:48,250 --> 00:06:52,000
support cross-platform so you're gonna

00:06:49,930 --> 00:06:57,400
see the experience there's not different

00:06:52,000 --> 00:07:02,289
machines alright let's get into my 20

00:06:57,400 --> 00:07:03,639
minute challenge you switch over to my

00:07:02,289 --> 00:07:06,610
Mac machine awesome

00:07:03,639 --> 00:07:09,820
alright this does not count let me just

00:07:06,610 --> 00:07:12,820
show you real quick for people who

00:07:09,820 --> 00:07:16,090
haven't used this tool before real quick

00:07:12,820 --> 00:07:21,009
how the simple layout in the vs code you

00:07:16,090 --> 00:07:23,259
I really that you're working with cup of

00:07:21,009 --> 00:07:24,910
tabs on the left side this is where you

00:07:23,259 --> 00:07:27,009
see all your files

00:07:24,910 --> 00:07:31,120
it's like Explorer and then this is your

00:07:27,009 --> 00:07:33,639
search get source code control

00:07:31,120 --> 00:07:35,949
integration right here this is the debug

00:07:33,639 --> 00:07:37,960
menu which we're gonna use later on when

00:07:35,949 --> 00:07:41,409
we debug this is where you see

00:07:37,960 --> 00:07:44,530
extensions I don't have it this machine

00:07:41,409 --> 00:07:46,270
connected so I don't see this list but

00:07:44,530 --> 00:07:48,340
otherwise you're gonna see a full list

00:07:46,270 --> 00:07:50,349
of extensions on the marketplace that

00:07:48,340 --> 00:07:52,510
you can download and install right here

00:07:50,349 --> 00:07:55,690
and on this especially I only have the

00:07:52,510 --> 00:07:57,520
C++ extension installed and that's

00:07:55,690 --> 00:08:00,130
that's everything I'm gonna show you it

00:07:57,520 --> 00:08:02,949
is either either features in vs code

00:08:00,130 --> 00:08:04,449
itself or comes with the C++ extension

00:08:02,949 --> 00:08:09,070
so that's the only extension you're

00:08:04,449 --> 00:08:11,470
gonna need and up here a few quick menus

00:08:09,070 --> 00:08:14,050
over here so you have file edit

00:08:11,470 --> 00:08:15,970
selection view go that's all for

00:08:14,050 --> 00:08:18,880
navigation and then you got debug that's

00:08:15,970 --> 00:08:20,830
for debugging stuff tasks is where

00:08:18,880 --> 00:08:23,380
you're gonna run your build tasks we're

00:08:20,830 --> 00:08:25,960
gonna see that later and then got window

00:08:23,380 --> 00:08:27,759
and help and that's all it's really

00:08:25,960 --> 00:08:30,360
really simple layout for you to get

00:08:27,759 --> 00:08:34,270
started so it's not too overwhelming

00:08:30,360 --> 00:08:38,399
alright now if anyone want to count the

00:08:34,270 --> 00:08:41,219
time I'm gonna start my 20 minutes

00:08:38,399 --> 00:08:45,640
alright do this here

00:08:41,219 --> 00:08:46,900
okay um first of all it is gonna be your

00:08:45,640 --> 00:08:48,490
from scratch for sure

00:08:46,900 --> 00:08:54,220
so what I'm gonna do

00:08:48,490 --> 00:08:56,500
new folder here and CPP calm I want to

00:08:54,220 --> 00:08:58,569
open a folder as opposed to open a

00:08:56,500 --> 00:09:01,389
single file and there's a reason who I

00:08:58,569 --> 00:09:02,649
am doing that if you open a folder

00:09:01,389 --> 00:09:05,230
you're gonna get better

00:09:02,649 --> 00:09:08,500
intellisense experience for single file

00:09:05,230 --> 00:09:10,509
we have zero knowledge of your code

00:09:08,500 --> 00:09:13,480
therefore when they are able to provide

00:09:10,509 --> 00:09:16,420
anything but if you have a folder which

00:09:13,480 --> 00:09:19,149
I'm going to open here we are gonna do

00:09:16,420 --> 00:09:21,250
some magic behind the scenes I'm gonna

00:09:19,149 --> 00:09:23,079
show you what the magic is the B after

00:09:21,250 --> 00:09:23,769
I'm done with the challenge so that does

00:09:23,079 --> 00:09:29,139
not count

00:09:23,769 --> 00:09:32,889
I'm gonna do a new CPP file I'm gonna do

00:09:29,139 --> 00:09:35,139
a simple calculator so I'm gonna do it

00:09:32,889 --> 00:09:38,649
like a console based app so and I know

00:09:35,139 --> 00:09:41,579
I'm gonna need CLC e so right away I'm

00:09:38,649 --> 00:09:44,889
gonna type in include you see you'll get

00:09:41,579 --> 00:09:49,329
something tells us help right here and

00:09:44,889 --> 00:09:52,449
I'm gonna do main and start writing on

00:09:49,329 --> 00:09:55,120
my code so I'm gonna do STD : : you see

00:09:52,449 --> 00:09:59,050
I get autocomplete list right here if I

00:09:55,120 --> 00:10:00,910
type in C out you see the quick info to

00:09:59,050 --> 00:10:03,509
tip right there so there's definitely

00:10:00,910 --> 00:10:12,430
some magic we're doing behind the scene

00:10:03,509 --> 00:10:16,089
for supporting that it is really

00:10:12,430 --> 00:10:18,670
intellisense it is really intelligent so

00:10:16,089 --> 00:10:22,290
I'm gonna show you how we do that later

00:10:18,670 --> 00:10:24,880
well this is done hold on the thoughts

00:10:22,290 --> 00:10:28,870
okay so since I'm gonna do this a couple

00:10:24,880 --> 00:10:38,139
of times so I'm just gonna do it using

00:10:28,870 --> 00:10:41,610
namespace and here you'll see once I do

00:10:38,139 --> 00:10:41,610
that I still get intelligence

00:10:46,360 --> 00:11:01,160
okay save and I'm gonna do my calculator

00:10:52,520 --> 00:11:02,959
and I will have one method one function

00:11:01,160 --> 00:11:07,970
here is public and I'm gonna have it

00:11:02,959 --> 00:11:12,410
return integer and passing to integers

00:11:07,970 --> 00:11:18,459
and HR as the operator now I'm going to

00:11:12,410 --> 00:11:21,770
increment the speed oh this function I

00:11:18,459 --> 00:11:31,370
get intellisense here as well as a type

00:11:21,770 --> 00:11:33,770
I get function see how hard it is to

00:11:31,370 --> 00:11:34,750
type on stage that's why it's a

00:11:33,770 --> 00:11:37,070
challenge

00:11:34,750 --> 00:11:39,160
okay so I'm gonna cheat a little bit

00:11:37,070 --> 00:11:39,160
here

00:11:41,560 --> 00:11:49,329
well don't ask there's a reason I'm

00:11:44,870 --> 00:11:52,370
doing this okay okay pasting the code

00:11:49,329 --> 00:11:55,310
looks fine but the formatting is kind of

00:11:52,370 --> 00:11:59,649
weird so I'm gonna do right click and

00:11:55,310 --> 00:12:04,990
say format selection and it's formatted

00:11:59,649 --> 00:12:04,990
we do support the Klan format in BS code

00:12:05,950 --> 00:12:14,560
so laughs okay good all right now I'm

00:12:11,029 --> 00:12:21,589
gonna just call this function in my main

00:12:14,560 --> 00:12:29,089
method please enter and operator number

00:12:21,589 --> 00:12:33,339
two I'm gonna take user input if I do

00:12:29,089 --> 00:12:33,339
that I'm gonna need a few verbals

00:12:35,620 --> 00:12:39,809
operator

00:12:36,670 --> 00:12:39,809
[Music]

00:12:46,079 --> 00:12:53,829
luckily the class that value to result

00:12:51,489 --> 00:12:56,949
and you see I got intellisense again

00:12:53,829 --> 00:12:59,379
here and they can as you can see as I

00:12:56,949 --> 00:13:02,639
type I get the parameter hints as well

00:12:59,379 --> 00:13:05,889
so it tells me what we put there it's X

00:13:02,639 --> 00:13:07,239
as I move on to the next argument it's

00:13:05,889 --> 00:13:09,699
going to highlight the different

00:13:07,239 --> 00:13:15,839
argument in the argument list so it's

00:13:09,699 --> 00:13:34,509
really handy here and I'm gonna put my

00:13:15,839 --> 00:13:36,970
result all right okay it's format

00:13:34,509 --> 00:13:40,569
document so everything I type thing is

00:13:36,970 --> 00:13:42,579
although format it nice alright I think

00:13:40,569 --> 00:13:45,009
I'm done did I miss anything

00:13:42,579 --> 00:13:48,549
let's try how about let's try so I did a

00:13:45,009 --> 00:13:51,220
bunch of typing now if I'm good with the

00:13:48,549 --> 00:13:54,579
code let's try how about let's try Butte

00:13:51,220 --> 00:13:58,839
this code so video city code does not

00:13:54,579 --> 00:14:00,489
come with a compiler which means you

00:13:58,839 --> 00:14:03,699
have the freedom to choose whatever

00:14:00,489 --> 00:14:05,829
compiler you want to compile with so in

00:14:03,699 --> 00:14:08,319
this particular case I have a mom a Mac

00:14:05,829 --> 00:14:10,649
machine so I'm gonna use GCC to compile

00:14:08,319 --> 00:14:14,379
this code I already have that installed

00:14:10,649 --> 00:14:16,839
but how are we gonna tell me as code how

00:14:14,379 --> 00:14:18,009
to come how this code using GCC now

00:14:16,839 --> 00:14:20,199
let's do that

00:14:18,009 --> 00:14:21,699
I'm coming from a video studio

00:14:20,199 --> 00:14:23,559
background so what are the first

00:14:21,699 --> 00:14:26,529
direction for me will be I want to do

00:14:23,559 --> 00:14:28,419
ctrl shift B that's hard field right so

00:14:26,529 --> 00:14:31,689
it's actually going to be the same

00:14:28,419 --> 00:14:34,869
shortcut key in the S code so our Mac

00:14:31,689 --> 00:14:37,119
it's gonna be command shift B or if you

00:14:34,869 --> 00:14:40,179
want to go there to tasks there's gonna

00:14:37,119 --> 00:14:42,389
be a run view task menu there so if I

00:14:40,179 --> 00:14:47,199
click on there now it's gonna tell me

00:14:42,389 --> 00:14:49,660
that no beaut test found press config

00:14:47,199 --> 00:14:53,769
you test to define one so basically I

00:14:49,660 --> 00:14:55,340
need to come config that first so vs

00:14:53,769 --> 00:14:59,180
cold chips with a few

00:14:55,340 --> 00:15:01,400
runners this dispute and couple of other

00:14:59,180 --> 00:15:04,730
things but really for what we need now

00:15:01,400 --> 00:15:07,550
is to run any arbitrary external command

00:15:04,730 --> 00:15:11,570
so I'm going to hit click on others so

00:15:07,550 --> 00:15:14,660
vehicle creates a task JSON file this is

00:15:11,570 --> 00:15:17,270
the default things really there's only a

00:15:14,660 --> 00:15:19,730
few things you need to change here for

00:15:17,270 --> 00:15:22,130
obvious code to be able to to know how

00:15:19,730 --> 00:15:27,110
to boot so first of all I'm gonna give

00:15:22,130 --> 00:15:29,540
task name to just name it Butte and this

00:15:27,110 --> 00:15:32,630
is the key here which is a command

00:15:29,540 --> 00:15:35,260
prompt T this is where you tell vs code

00:15:32,630 --> 00:15:38,870
what external commands you want to run

00:15:35,260 --> 00:15:41,900
in this case I'm just gonna do GCC I'm

00:15:38,870 --> 00:15:43,640
gonna do - G this is really important if

00:15:41,900 --> 00:15:47,270
you wanna do debugging later on this

00:15:43,640 --> 00:15:52,520
gives you the singles and I'm gonna do

00:15:47,270 --> 00:15:56,270
calculator CPP file and outputs are you

00:15:52,520 --> 00:16:00,590
just given name that's why I need to do

00:15:56,270 --> 00:16:04,040
really to config the view task but I

00:16:00,590 --> 00:16:07,520
could do one more thing cuz this so far

00:16:04,040 --> 00:16:09,410
vs Mexico knows this is a task they said

00:16:07,520 --> 00:16:12,170
the command I'm gonna run but it doesn't

00:16:09,410 --> 00:16:15,560
know this is a beaut ask so what we

00:16:12,170 --> 00:16:18,770
could do is to say give it group and let

00:16:15,560 --> 00:16:22,760
me just know this is a butte ask and

00:16:18,770 --> 00:16:24,440
this is my default view task the reason

00:16:22,760 --> 00:16:26,810
will not set up this just so i can use

00:16:24,440 --> 00:16:30,140
command shift B to Butte as actual

00:16:26,810 --> 00:16:32,810
cookie much easier so if I want to do

00:16:30,140 --> 00:16:38,110
that oh I can come here to say we're on

00:16:32,810 --> 00:16:38,110
my bill task that's the same thing Butte

00:16:41,290 --> 00:16:48,610
okay it's running it's kind of a little

00:16:43,730 --> 00:16:49,790
small but this is actually my command

00:16:48,610 --> 00:16:53,000
rent

00:16:49,790 --> 00:16:55,190
India's cold and this is the result I'm

00:16:53,000 --> 00:16:59,000
getting back from the compiler that says

00:16:55,190 --> 00:17:02,450
there's a warning because the s code

00:16:59,000 --> 00:17:04,400
doesn't know this compiler so it doesn't

00:17:02,450 --> 00:17:05,959
know what to do with this output so it's

00:17:04,400 --> 00:17:10,159
it comes back as

00:17:05,959 --> 00:17:12,439
texts you know output window if you

00:17:10,159 --> 00:17:14,629
switch back to the problems window you

00:17:12,439 --> 00:17:17,829
got nothing here problems window is like

00:17:14,629 --> 00:17:20,449
equivalent of ever list in Visual Studio

00:17:17,829 --> 00:17:23,269
wouldn't be nice if we could just go

00:17:20,449 --> 00:17:25,100
click an error here which would take us

00:17:23,269 --> 00:17:28,850
to the code

00:17:25,100 --> 00:17:31,389
so actually BS code support is by this

00:17:28,850 --> 00:17:35,179
property here called the problem matter

00:17:31,389 --> 00:17:38,059
what this is is basically you have to

00:17:35,179 --> 00:17:40,669
you have add a few definitions that's

00:17:38,059 --> 00:17:42,950
defined via regular expressions just so

00:17:40,669 --> 00:17:45,350
BS code knows what to do with the output

00:17:42,950 --> 00:17:48,639
of your command so we aren't

00:17:45,350 --> 00:17:51,230
relationship at the fourth one for GCC

00:17:48,639 --> 00:17:52,940
so you don't actually have to go define

00:17:51,230 --> 00:17:55,309
the regex

00:17:52,940 --> 00:17:59,059
yourself but you can just use this

00:17:55,309 --> 00:18:00,769
default one so now if we do run again

00:17:59,059 --> 00:18:03,350
of course I'm getting the same warning

00:18:00,769 --> 00:18:05,690
but now if I switch back I'm actually

00:18:03,350 --> 00:18:07,940
getting the warnings and could be errors

00:18:05,690 --> 00:18:11,389
in the list if I double click it

00:18:07,940 --> 00:18:14,059
actually takes me to the code of course

00:18:11,389 --> 00:18:16,850
this is about what the problem was

00:18:14,059 --> 00:18:19,070
because it's because I have the switch

00:18:16,850 --> 00:18:21,919
branch which may not be returning

00:18:19,070 --> 00:18:26,690
anything so for now I'm just gonna make

00:18:21,919 --> 00:18:30,230
it on my compiler happy by doing this if

00:18:26,690 --> 00:18:31,639
I do this again it's gonna compile just

00:18:30,230 --> 00:18:36,159
fine and my problem goes away

00:18:31,639 --> 00:18:39,740
all right we're good now we have our

00:18:36,159 --> 00:18:44,539
file compiled and I have a program I can

00:18:39,740 --> 00:19:04,249
actually run let's try that in uh in the

00:18:44,539 --> 00:19:05,659
command window so keep forgetting when I

00:19:04,249 --> 00:19:09,679
switch back and forth between of

00:19:05,659 --> 00:19:11,960
machines alright so now we got our app

00:19:09,679 --> 00:19:16,399
running and says I should put in number

00:19:11,960 --> 00:19:19,160
so I do this to two plus three who would

00:19:16,399 --> 00:19:21,850
expect my code would just work that

00:19:19,160 --> 00:19:26,740
the code I typed on stage will just work

00:19:21,850 --> 00:19:26,740
you guys anyone bad I'm just working oh

00:19:32,350 --> 00:19:40,370
you guys are better than a debugger

00:19:35,200 --> 00:19:41,810
really really cuz I was gonna set up at

00:19:40,370 --> 00:19:45,110
the boneyard to figure out the problem

00:19:41,810 --> 00:19:49,640
well the problem was all right pretend

00:19:45,110 --> 00:19:51,920
you didn't know okay but but really I

00:19:49,640 --> 00:19:55,700
want to show how you can set up debugger

00:19:51,920 --> 00:19:57,740
really really fast in vs code so now if

00:19:55,700 --> 00:19:59,990
I want to come back to start debugging

00:19:57,740 --> 00:20:02,630
so either I can go to the menu or I can

00:19:59,990 --> 00:20:05,390
switch over to this tab here so you have

00:20:02,630 --> 00:20:07,820
the arrow that will go to debugger but

00:20:05,390 --> 00:20:09,820
before I do that I need to config setup

00:20:07,820 --> 00:20:13,990
configurations surely there's nothing

00:20:09,820 --> 00:20:17,330
click on that which is asking me which

00:20:13,990 --> 00:20:21,290
environment I want to choose so in vs

00:20:17,330 --> 00:20:24,560
code we support our Mac Linux we support

00:20:21,290 --> 00:20:28,700
gdb and LDV esra debugger windows you

00:20:24,560 --> 00:20:31,160
actually have a choice of MS

00:20:28,700 --> 00:20:33,530
video studio debugger or the tdv

00:20:31,160 --> 00:20:38,000
debugger so in here I'm just gonna pick

00:20:33,530 --> 00:20:39,860
C++ gdb ODB and similar to the tests the

00:20:38,000 --> 00:20:43,280
JSON file there's another JSON file

00:20:39,860 --> 00:20:45,140
that's Credit called lunch the JSON

00:20:43,280 --> 00:20:48,140
that's what you need to define for the

00:20:45,140 --> 00:20:50,060
debugger to work so again it comes with

00:20:48,140 --> 00:20:52,340
the template and there are very few

00:20:50,060 --> 00:20:54,470
things I need to configure really the

00:20:52,340 --> 00:20:57,380
only thing that matters for lunch is the

00:20:54,470 --> 00:21:00,530
program you wanna launch so the ESCO

00:20:57,380 --> 00:21:02,780
need to know the name of your program so

00:21:00,530 --> 00:21:06,020
just gonna do

00:21:02,780 --> 00:21:09,350
workspace slash calculator that's all I

00:21:06,020 --> 00:21:15,820
need to config now I can come back to my

00:21:09,350 --> 00:21:15,820
code set a breakpoint right here and if

00:21:17,800 --> 00:21:22,590
did I save you need to save this

00:21:25,320 --> 00:21:31,930
okay now breakpoint is hit but we

00:21:28,660 --> 00:21:37,120
haven't put our input there yet do that

00:21:31,930 --> 00:21:39,400
okay that's right here it's not gonna

00:21:37,120 --> 00:21:42,280
hit because I'm missing a carrot okay

00:21:39,400 --> 00:21:44,680
now it's backing up in the debugger so

00:21:42,280 --> 00:21:47,500
even though it's a pretty basic debugger

00:21:44,680 --> 00:21:50,950
compared with advanced features in vs

00:21:47,500 --> 00:21:53,590
it's got the basic stuff going okay as

00:21:50,950 --> 00:21:57,040
you can tell you can hit break point you

00:21:53,590 --> 00:22:01,120
can step over step into the code I can

00:21:57,040 --> 00:22:04,840
run into the actual code that does the

00:22:01,120 --> 00:22:07,630
calculation and go through and realize

00:22:04,840 --> 00:22:10,540
I'm not getting the result I'm expecting

00:22:07,630 --> 00:22:15,850
because my operator and apparently

00:22:10,540 --> 00:22:21,420
wasn't getting the classifying I was

00:22:15,850 --> 00:22:25,710
giving it so now if I go back to my code

00:22:21,420 --> 00:22:29,230
no see the result is wrong and my

00:22:25,710 --> 00:22:31,710
y-value seems to be right X right but

00:22:29,230 --> 00:22:39,790
operator it was the problem and then

00:22:31,710 --> 00:22:42,550
realized getting this wrong so now since

00:22:39,790 --> 00:22:46,330
I've made it changed my code what I need

00:22:42,550 --> 00:22:48,430
to do which I often forget is I need to

00:22:46,330 --> 00:22:51,340
review my code first before I launch it

00:22:48,430 --> 00:22:53,190
right and have been many times where I

00:22:51,340 --> 00:22:55,960
just forgot to review it and they're

00:22:53,190 --> 00:22:58,690
wondering why I 5 didn't give me the

00:22:55,960 --> 00:23:01,030
right result so to prevent me from

00:22:58,690 --> 00:23:03,400
making that mistake I'm gonna come back

00:23:01,030 --> 00:23:06,550
here in the lobster JSON file and I'm

00:23:03,400 --> 00:23:13,480
gonna tell there's code that before you

00:23:06,550 --> 00:23:17,350
do launch free do a pre-launch task

00:23:13,480 --> 00:23:23,770
first and in my case I'm just gonna have

00:23:17,350 --> 00:23:29,050
it run my bill task so now if I save now

00:23:23,770 --> 00:23:30,290
we got h2 f5 experience as you would

00:23:29,050 --> 00:23:35,960
have

00:23:30,290 --> 00:23:37,760
hey any other tools all right now here's

00:23:35,960 --> 00:23:44,360
number all right

00:23:37,760 --> 00:23:47,770
yes what time is it 15 minutes yes I did

00:23:44,360 --> 00:23:52,150
it thank you guys

00:23:47,770 --> 00:23:55,910
to set up with the program State okay

00:23:52,150 --> 00:23:59,450
all right before I move off this machine

00:23:55,910 --> 00:24:03,770
let me show you how we do the magic how

00:23:59,450 --> 00:24:05,240
we did the intellisense now by default

00:24:03,770 --> 00:24:06,830
you don't have to worry about this

00:24:05,240 --> 00:24:09,200
because everything is done by harnessing

00:24:06,830 --> 00:24:12,740
but if you want to customize or if

00:24:09,200 --> 00:24:15,910
you're curious this is you could do do

00:24:12,740 --> 00:24:19,700
command P which is gonna bring up the

00:24:15,910 --> 00:24:21,950
command palette in vs code this is where

00:24:19,700 --> 00:24:26,570
you can type in any command so what I

00:24:21,950 --> 00:24:28,760
want to do is to type in CCPP edit

00:24:26,570 --> 00:24:31,490
configurations this is the one you want

00:24:28,760 --> 00:24:34,640
to look at this actually generates

00:24:31,490 --> 00:24:36,710
another JSON file managers and tear some

00:24:34,640 --> 00:24:38,660
files but I promise this is the last one

00:24:36,710 --> 00:24:40,970
so we only have three that's the three

00:24:38,660 --> 00:24:44,830
you need to remember that's what this

00:24:40,970 --> 00:24:48,110
one is for intelligence so as you know

00:24:44,830 --> 00:24:49,790
the intellisense engine which is the one

00:24:48,110 --> 00:24:52,580
we're using right now is a compiler

00:24:49,790 --> 00:24:54,559
based engine so it needs to know where

00:24:52,580 --> 00:24:56,900
we could find your headers we need to

00:24:54,559 --> 00:24:59,150
know you're in group half and this is

00:24:56,900 --> 00:25:02,780
where we do the magic is we have the

00:24:59,150 --> 00:25:07,790
default for each OS so for this one

00:25:02,780 --> 00:25:11,240
which is Mac this is number these six

00:25:07,790 --> 00:25:13,610
numbers of include half is what we where

00:25:11,240 --> 00:25:15,799
we look for in this particular case it's

00:25:13,610 --> 00:25:18,410
iostream which happened to be here and

00:25:15,799 --> 00:25:21,049
the reason I got these three paths is

00:25:18,410 --> 00:25:23,390
because I have Xcode installed on this

00:25:21,049 --> 00:25:26,179
machine so we do a detection if you have

00:25:23,390 --> 00:25:28,610
Xcode we have additional places where we

00:25:26,179 --> 00:25:33,350
look for those files but if not it's

00:25:28,610 --> 00:25:34,700
just going to be local and include so we

00:25:33,350 --> 00:25:36,679
also are by default include the

00:25:34,700 --> 00:25:40,580
workspace root so anything you put in

00:25:36,679 --> 00:25:42,530
there we will find so in this particular

00:25:40,580 --> 00:25:43,370
case it's a really simple app so I

00:25:42,530 --> 00:25:45,200
didn't need to

00:25:43,370 --> 00:25:47,150
customize these settings but we're gonna

00:25:45,200 --> 00:25:50,770
see how we can customize these in the

00:25:47,150 --> 00:25:54,680
next demo when I switch back to Windows

00:25:50,770 --> 00:25:56,390
okay so that's that and one more thing I

00:25:54,680 --> 00:25:58,430
want to show you before I move off this

00:25:56,390 --> 00:26:02,240
machine is the source code control

00:25:58,430 --> 00:26:04,130
integration so we have our app running

00:26:02,240 --> 00:26:05,990
on the mound of snow cone machine

00:26:04,130 --> 00:26:08,180
everything is good

00:26:05,990 --> 00:26:10,550
and now I wanted to put this under

00:26:08,180 --> 00:26:13,400
source control system so the s code

00:26:10,550 --> 00:26:15,350
actually has git integration are they

00:26:13,400 --> 00:26:16,090
building you don't have to do anything

00:26:15,350 --> 00:26:18,559
here

00:26:16,090 --> 00:26:21,800
coming here you can do initialize

00:26:18,559 --> 00:26:24,610
repository which is gonna ask me for the

00:26:21,800 --> 00:26:26,780
past which is the current path I mean

00:26:24,610 --> 00:26:29,450
automatically it finds all the changes

00:26:26,780 --> 00:26:31,640
I've made in this folder and then I can

00:26:29,450 --> 00:26:34,220
decide which what files I want to enter

00:26:31,640 --> 00:26:37,100
the source code control I can say stage

00:26:34,220 --> 00:26:41,900
or changers and then maybe remove the

00:26:37,100 --> 00:26:44,840
ones I don't need back here you type a

00:26:41,900 --> 00:26:47,990
checking message I don't have the

00:26:44,840 --> 00:26:50,600
machine connected but if you had just do

00:26:47,990 --> 00:26:52,429
this click you're gonna have everything

00:26:50,600 --> 00:26:56,720
checking to your get and then look at

00:26:52,429 --> 00:26:59,630
control you can also have vias code

00:26:56,720 --> 00:27:01,910
connect to your repo on github directly

00:26:59,630 --> 00:27:04,700
and then you can publish all your

00:27:01,910 --> 00:27:07,429
changes directly to to the remotely repo

00:27:04,700 --> 00:27:09,380
as well now the good thing about under

00:27:07,429 --> 00:27:11,870
having the code underpin under the

00:27:09,380 --> 00:27:17,030
source code control is now if I make

00:27:11,870 --> 00:27:20,059
more changes to it simple you're gonna

00:27:17,030 --> 00:27:22,880
start seeing these changes reflected in

00:27:20,059 --> 00:27:25,580
here in the vs code UI now I made some

00:27:22,880 --> 00:27:28,370
changes on this CPP file now I can

00:27:25,580 --> 00:27:30,800
right-click and say open changes this is

00:27:28,370 --> 00:27:33,860
gonna open a side-by-side view to give

00:27:30,800 --> 00:27:35,420
the changes really simple but you can

00:27:33,860 --> 00:27:39,230
pretty much just do everything complete

00:27:35,420 --> 00:27:41,870
your code do debug checking according to

00:27:39,230 --> 00:27:48,400
source code control control system all

00:27:41,870 --> 00:27:48,400
from within vs code okay so let's go

00:27:49,490 --> 00:27:54,990
okay so that was the first demo and I

00:27:52,650 --> 00:27:56,520
show you there's one more thing just to

00:27:54,990 --> 00:28:01,470
remind myself I don't forget about

00:27:56,520 --> 00:28:04,740
integration okay now now let's try a

00:28:01,470 --> 00:28:06,990
different machine windows here and we're

00:28:04,740 --> 00:28:09,240
gonna look at a more complex program

00:28:06,990 --> 00:28:14,010
because you might say the calculator is

00:28:09,240 --> 00:28:15,860
too simple too easy and what how are we

00:28:14,010 --> 00:28:18,690
gonna deal with a much larger project

00:28:15,860 --> 00:28:22,020
and a lot of times you might be dealing

00:28:18,690 --> 00:28:25,140
with code base that that you didn't

00:28:22,020 --> 00:28:26,880
write that's some some other other

00:28:25,140 --> 00:28:29,670
people's code base and you might be

00:28:26,880 --> 00:28:32,360
getting stuff of github and just want to

00:28:29,670 --> 00:28:35,130
read the code or make some changes and

00:28:32,360 --> 00:28:38,220
you can actually do all that in Visual

00:28:35,130 --> 00:28:40,980
Studio code with the help of persons and

00:28:38,220 --> 00:28:43,350
code browsing features so what I have

00:28:40,980 --> 00:28:50,970
here is I already have a folder open

00:28:43,350 --> 00:28:53,400
this is a project github it's called the

00:28:50,970 --> 00:28:53,970
base form builder it's a pretty sizable

00:28:53,400 --> 00:28:56,460
project

00:28:53,970 --> 00:28:58,800
it basically is a designer based tool

00:28:56,460 --> 00:29:01,020
for you to help you design widgets or

00:28:58,800 --> 00:29:05,430
forms and then it can automatically

00:29:01,020 --> 00:29:07,350
generate all kinds of codes C++ PHP so

00:29:05,430 --> 00:29:09,000
it's a pretty compact complex copies so

00:29:07,350 --> 00:29:12,930
if you look at all these source code

00:29:09,000 --> 00:29:16,860
it's called multiple folders lots of cpp

00:29:12,930 --> 00:29:18,720
and header files in here and here this

00:29:16,860 --> 00:29:22,430
deals with all the designer stuff so

00:29:18,720 --> 00:29:30,990
there's a lot more stuff in here

00:29:22,430 --> 00:29:33,120
utilities here's a main without really

00:29:30,990 --> 00:29:38,430
knowing much about this code base I'm

00:29:33,120 --> 00:29:42,870
just gonna go and open a CPP file right

00:29:38,430 --> 00:29:45,570
here okay so here's what you usually get

00:29:42,870 --> 00:29:47,910
my open a project that you really don't

00:29:45,570 --> 00:29:53,220
know yes hey I'm getting all these

00:29:47,910 --> 00:29:54,990
squiggles what I'm gonna do because as I

00:29:53,220 --> 00:29:56,970
said we really need the intelligence

00:29:54,990 --> 00:30:00,870
engine really to need to know where to

00:29:56,970 --> 00:30:02,130
find these headers and by the fault we

00:30:00,870 --> 00:30:04,590
show you an urban

00:30:02,130 --> 00:30:07,350
of course widows has anyone seen this

00:30:04,590 --> 00:30:09,570
green squiggles yoko days somewhere in

00:30:07,350 --> 00:30:11,100
BS code so what do you guys do what

00:30:09,570 --> 00:30:16,800
would you do when you see these great

00:30:11,100 --> 00:30:18,990
schools that's why you open you with

00:30:16,800 --> 00:30:22,560
your studio we have the option but if

00:30:18,990 --> 00:30:25,380
you are Mac and Linux you don't so let

00:30:22,560 --> 00:30:27,300
me show you some techniques actually

00:30:25,380 --> 00:30:30,300
some of the new latest features that we

00:30:27,300 --> 00:30:31,860
developed that could hopefully help to

00:30:30,300 --> 00:30:34,680
make that easy because we know it's a

00:30:31,860 --> 00:30:36,630
pain to have to go through each header

00:30:34,680 --> 00:30:39,330
file and then find out where they are

00:30:36,630 --> 00:30:50,130
and add them manually each one to the

00:30:39,330 --> 00:30:52,320
include path so we also show these

00:30:50,130 --> 00:30:56,070
problems in the problems window where

00:30:52,320 --> 00:30:58,170
you can see what files were missing in

00:30:56,070 --> 00:31:03,360
this particular case the first file

00:30:58,170 --> 00:31:06,780
missing is model slash types H which is

00:31:03,360 --> 00:31:10,500
directly reference from this file so if

00:31:06,780 --> 00:31:12,870
you hover over this destroy this

00:31:10,500 --> 00:31:15,240
squiggle it's gonna say there are

00:31:12,870 --> 00:31:17,100
include errors detected please update

00:31:15,240 --> 00:31:18,660
your include path that's when you need

00:31:17,100 --> 00:31:21,030
to manually add all the include path

00:31:18,660 --> 00:31:24,330
remember that JSON file I showed you

00:31:21,030 --> 00:31:25,950
that's where you add a new path but the

00:31:24,330 --> 00:31:28,140
second half of the message basically

00:31:25,950 --> 00:31:31,260
says the intelligence features for this

00:31:28,140 --> 00:31:34,740
translation unit will be provided by the

00:31:31,260 --> 00:31:37,260
tag parser so what is a tag parser tech

00:31:34,740 --> 00:31:39,780
parser is basically a fuzzy parser that

00:31:37,260 --> 00:31:45,200
we use to assist with intellisense

00:31:39,780 --> 00:31:49,320
features so so it does not validate or

00:31:45,200 --> 00:31:53,130
recognize the full c++ syntax it it

00:31:49,320 --> 00:31:55,020
basically simply matches an output and

00:31:53,130 --> 00:31:57,450
input stream of tokens with some

00:31:55,020 --> 00:32:00,390
patterns it does not know about types

00:31:57,450 --> 00:32:03,540
other than the butene types it does not

00:32:00,390 --> 00:32:07,170
have the food Hong contacts of macros it

00:32:03,540 --> 00:32:09,930
does it's its scope its translation unit

00:32:07,170 --> 00:32:11,820
is strictly within single files meaning

00:32:09,930 --> 00:32:13,950
it does not follow through your pound

00:32:11,820 --> 00:32:14,220
includes it does not have knowledge of

00:32:13,950 --> 00:32:15,960
that

00:32:14,220 --> 00:32:19,289
but regardless

00:32:15,960 --> 00:32:21,990
of all those restrictions it is super

00:32:19,289 --> 00:32:25,200
fast so it can run pretty fast our large

00:32:21,990 --> 00:32:28,259
code bases that's why we use that assist

00:32:25,200 --> 00:32:30,269
our intelligence experience but right

00:32:28,259 --> 00:32:32,070
now this is saying the true compound

00:32:30,269 --> 00:32:34,950
based intelligence engine is getting

00:32:32,070 --> 00:32:35,549
arrows so everything here or the

00:32:34,950 --> 00:32:36,840
intellisense

00:32:35,549 --> 00:32:38,759
experience you're getting here is

00:32:36,840 --> 00:32:41,399
provided by that person because the tag

00:32:38,759 --> 00:32:43,740
parser has more knowledge even though

00:32:41,399 --> 00:32:46,289
it's not it's fuzzy it's not super

00:32:43,740 --> 00:32:48,809
accurate but X actually runs fast and

00:32:46,289 --> 00:32:51,240
has some knowledge of your code

00:32:48,809 --> 00:32:56,929
so here's c'mere I would give you an

00:32:51,240 --> 00:33:00,350
example of what I meant by fuzzy results

00:32:56,929 --> 00:33:06,210
so if I hover over here on this method

00:33:00,350 --> 00:33:09,690
you see lots of possible matches and in

00:33:06,210 --> 00:33:13,200
fact this one here has really really

00:33:09,690 --> 00:33:17,869
longest because a race could be a member

00:33:13,200 --> 00:33:20,340
of factor tree could be a string list

00:33:17,869 --> 00:33:22,169
the tag Carter doesn't know where it

00:33:20,340 --> 00:33:25,820
comes from because it is not known of

00:33:22,169 --> 00:33:29,009
many types if I type in here to get my

00:33:25,820 --> 00:33:33,139
parameter hints it's gonna circle

00:33:29,009 --> 00:33:33,139
through all these different signatures

00:33:35,029 --> 00:33:41,039
but in some cases the tag parser would

00:33:38,669 --> 00:33:47,100
be doing a good job when there's no

00:33:41,039 --> 00:33:49,679
ambiguity in the singles so in some

00:33:47,100 --> 00:33:53,429
cases you can actually get pretty good

00:33:49,679 --> 00:33:56,070
result I hover over so that's that's how

00:33:53,429 --> 00:33:58,950
the tag parser works in the current

00:33:56,070 --> 00:34:01,850
experience you're getting by the fault

00:33:58,950 --> 00:34:04,470
is what these green squiggles indicate

00:34:01,850 --> 00:34:06,269
but we really really want to get the

00:34:04,470 --> 00:34:08,819
compiler base intestines working because

00:34:06,269 --> 00:34:10,740
now it then we can get more much more

00:34:08,819 --> 00:34:12,419
accurate results when you type code when

00:34:10,740 --> 00:34:16,020
you hover over you know exactly which

00:34:12,419 --> 00:34:19,349
method you're looking at so here's the

00:34:16,020 --> 00:34:24,210
new thing we added the bits might not be

00:34:19,349 --> 00:34:27,419
out now but you will be today so if you

00:34:24,210 --> 00:34:29,100
click on those cream squiggles you

00:34:27,419 --> 00:34:31,800
should see a light bulb on the left side

00:34:29,100 --> 00:34:35,100
it and that gives you a number of

00:34:31,800 --> 00:34:38,250
options so if you guys are using delays

00:34:35,100 --> 00:34:40,920
did the latest C++ extension before this

00:34:38,250 --> 00:34:44,550
one you should already have seen these

00:34:40,920 --> 00:34:46,920
two options but this is the new thing is

00:34:44,550 --> 00:34:49,500
we are giving you suggestions where you

00:34:46,920 --> 00:34:53,490
might be able to find those headers so

00:34:49,500 --> 00:35:02,010
if I click on that what happens is if I

00:34:53,490 --> 00:35:04,620
go over to be as cold JSON file is my

00:35:02,010 --> 00:35:07,590
include path so what just happened was

00:35:04,620 --> 00:35:09,990
we automatically added the suggested

00:35:07,590 --> 00:35:12,540
path to include half so you don't have

00:35:09,990 --> 00:35:15,330
to go through that manually so that's

00:35:12,540 --> 00:35:17,550
great now let's come back to this file

00:35:15,330 --> 00:35:20,820
of course I'm still getting squiggles

00:35:17,550 --> 00:35:23,070
because you know multiple headers I need

00:35:20,820 --> 00:35:30,570
and this time it's actually not types

00:35:23,070 --> 00:35:33,540
dot header the edge they're saying we

00:35:30,570 --> 00:35:36,990
cannot open this w extra dot H file

00:35:33,540 --> 00:35:40,050
which is not a direct include but it is

00:35:36,990 --> 00:35:41,520
a dependency of my direct include so we

00:35:40,050 --> 00:35:44,100
are giving you more information about

00:35:41,520 --> 00:35:46,140
which file we're looking at we're

00:35:44,100 --> 00:35:49,650
looking for so you need to basically

00:35:46,140 --> 00:35:52,200
give us the this string and just string

00:35:49,650 --> 00:35:54,720
dot H where that file is right now what

00:35:52,200 --> 00:35:57,210
I'm gonna do is I have to probably go

00:35:54,720 --> 00:35:59,220
back to my file explorer and start

00:35:57,210 --> 00:36:01,830
searching here right to find where they

00:35:59,220 --> 00:36:03,990
include where the header is that could

00:36:01,830 --> 00:36:05,070
be a really tedious task and I really

00:36:03,990 --> 00:36:08,400
don't want to do that on stage

00:36:05,070 --> 00:36:10,580
especially so what I'm going to is a new

00:36:08,400 --> 00:36:14,190
thing we added because of the these

00:36:10,580 --> 00:36:16,770
suggestions that we populate the way we

00:36:14,190 --> 00:36:18,330
populate that let me do that first and

00:36:16,770 --> 00:36:22,260
then we'll explain to you what we're

00:36:18,330 --> 00:36:25,800
doing so I'm gonna copy over these three

00:36:22,260 --> 00:36:28,320
includes which has the basic means it

00:36:25,800 --> 00:36:30,990
ability include and some special things

00:36:28,320 --> 00:36:33,510
this is also mean gwm but some special

00:36:30,990 --> 00:36:35,820
things that this project is using but I

00:36:33,510 --> 00:36:38,550
don't know all the subdirectories all I

00:36:35,820 --> 00:36:40,800
know is all these root folders seem to

00:36:38,550 --> 00:36:42,840
have lots of stuff in there but they're

00:36:40,800 --> 00:36:45,600
because of so many deep

00:36:42,840 --> 00:36:48,710
subdirectories inside I'm just not going

00:36:45,600 --> 00:36:52,170
to go through that but I'm gonna have my

00:36:48,710 --> 00:36:55,890
lovely tag parser to the work because

00:36:52,170 --> 00:36:57,660
the tapper says it is a tireless hard

00:36:55,890 --> 00:37:01,290
worker that's gonna go through

00:36:57,660 --> 00:37:03,540
everything in this folder so addition in

00:37:01,290 --> 00:37:06,750
addition to the in crew path what we

00:37:03,540 --> 00:37:10,910
have here in a JSON file is a broth

00:37:06,750 --> 00:37:14,040
that's just gonna do that first

00:37:10,910 --> 00:37:17,400
save it and let it do the work you can

00:37:14,040 --> 00:37:19,410
see it's on fire it's on fire so we need

00:37:17,400 --> 00:37:22,680
to wait for that to finish but

00:37:19,410 --> 00:37:24,450
essentially what we do is tag parser is

00:37:22,680 --> 00:37:28,950
going to search through everything in

00:37:24,450 --> 00:37:29,970
those folders it does it recursively so

00:37:28,950 --> 00:37:32,700
it's going to search through all

00:37:29,970 --> 00:37:35,490
subfolders so the difference between the

00:37:32,700 --> 00:37:37,590
compiler based engine and tag parser is

00:37:35,490 --> 00:37:40,050
tag culture doesn't recursively but the

00:37:37,590 --> 00:37:41,670
intestines engine does not the

00:37:40,050 --> 00:37:44,640
intestines basically takes whatever

00:37:41,670 --> 00:37:47,790
include path you would have passed to

00:37:44,640 --> 00:37:49,920
the real compiler so it has to be exact

00:37:47,790 --> 00:37:51,840
path where you can find those headers

00:37:49,920 --> 00:37:54,210
but tag parts it doesn't care it's going

00:37:51,840 --> 00:37:57,300
to just go and look for those everything

00:37:54,210 --> 00:37:59,550
in the in those whole folder it's gonna

00:37:57,300 --> 00:38:01,560
store all those information in a

00:37:59,550 --> 00:38:05,940
database so it can look up really really

00:38:01,560 --> 00:38:08,880
fast that's how we use these what we are

00:38:05,940 --> 00:38:12,480
able to use information that that's

00:38:08,880 --> 00:38:14,520
searched by the temperature to populate

00:38:12,480 --> 00:38:17,520
these suggestions so now we if we come

00:38:14,520 --> 00:38:20,310
back here we get more suggestions yeah

00:38:17,520 --> 00:38:24,000
this is a subfolder under the include

00:38:20,310 --> 00:38:25,320
path that I just pointed to right now

00:38:24,000 --> 00:38:27,690
instead of us having to search through

00:38:25,320 --> 00:38:30,030
tag cards that doesn't work say hey we

00:38:27,690 --> 00:38:33,480
find some possibilities now in this case

00:38:30,030 --> 00:38:35,730
I was actually able to solve all those

00:38:33,480 --> 00:38:37,020
the food run green squiggles now we only

00:38:35,730 --> 00:38:41,610
have to have two left

00:38:37,020 --> 00:38:44,970
yay big programs now once you do the

00:38:41,610 --> 00:38:47,760
change do an update to the if you have

00:38:44,970 --> 00:38:50,760
the tag parser is going to keep working

00:38:47,760 --> 00:38:52,670
it's really really hard worker

00:38:50,760 --> 00:38:54,910
now if

00:38:52,670 --> 00:38:58,880
back here now we're getting some other

00:38:54,910 --> 00:38:59,809
intelligence results add that one so

00:38:58,880 --> 00:39:01,970
that goes away

00:38:59,809 --> 00:39:05,660
oh there's one when I one coming back

00:39:01,970 --> 00:39:08,960
getting so close this one is getting

00:39:05,660 --> 00:39:11,299
something oh okay

00:39:08,960 --> 00:39:13,700
more suggestions for this particular one

00:39:11,299 --> 00:39:17,540
missing which is the backslash set up

00:39:13,700 --> 00:39:20,119
dot H file so this is where the fuzzy

00:39:17,540 --> 00:39:22,069
result matters is because tag parser

00:39:20,119 --> 00:39:24,290
doesn't really know it has multiple

00:39:22,069 --> 00:39:27,079
choices that's why we don't do

00:39:24,290 --> 00:39:29,240
everything for you automatically but we

00:39:27,079 --> 00:39:31,819
instead we provide these options to you

00:39:29,240 --> 00:39:36,200
so you can tell us which one is the one

00:39:31,819 --> 00:39:38,299
you want to pick so pick this one and of

00:39:36,200 --> 00:39:40,099
course even if you pick the wrong one

00:39:38,299 --> 00:39:43,819
you can always come back to the JSON

00:39:40,099 --> 00:39:47,359
file to modify manually but the idea is

00:39:43,819 --> 00:39:48,920
really about hey let's help out here let

00:39:47,359 --> 00:39:51,380
the attack parser do the work instead

00:39:48,920 --> 00:39:53,270
and you or you have to use to do

00:39:51,380 --> 00:40:02,329
multiple clicks on these light bulbs

00:39:53,270 --> 00:40:03,859
some more does it go away some more time

00:40:02,329 --> 00:40:05,569
oh that's another challenge to do on

00:40:03,859 --> 00:40:08,299
stage is to get rid of the screw lows

00:40:05,569 --> 00:40:11,540
see how hard that is it keeps coming

00:40:08,299 --> 00:40:15,170
back okay how many people bet this time

00:40:11,540 --> 00:40:19,819
will work yes

00:40:15,170 --> 00:40:21,890
no Wasp ago so I'm but I'm done I'm done

00:40:19,819 --> 00:40:25,010
I'm not gonna try to resolve this on

00:40:21,890 --> 00:40:28,490
stage that's too hard oh but what I'm

00:40:25,010 --> 00:40:30,890
gonna do is to show you another thing so

00:40:28,490 --> 00:40:34,190
there might be cases where you just

00:40:30,890 --> 00:40:35,780
can't locate the headers like either the

00:40:34,190 --> 00:40:37,940
ones that you currently don't care about

00:40:35,780 --> 00:40:40,670
or you just can't locate them at the

00:40:37,940 --> 00:40:42,829
moment so the question is at this stage

00:40:40,670 --> 00:40:44,990
I'm try really hard to get rid of the

00:40:42,829 --> 00:40:47,119
screen squiggles but if I really want to

00:40:44,990 --> 00:40:53,000
come use the compiler based intelligence

00:40:47,119 --> 00:40:56,030
can I do that so yes you can here's the

00:40:53,000 --> 00:40:56,660
option you want to use yes you go back

00:40:56,030 --> 00:40:59,720
to lighbulb

00:40:56,660 --> 00:41:03,740
and say for semantic intelligence what

00:40:59,720 --> 00:41:04,240
this does is it forces our intelligence

00:41:03,740 --> 00:41:07,360
to you

00:41:04,240 --> 00:41:08,650
the compiler basing houses and not using

00:41:07,360 --> 00:41:11,080
the tag parser to provide the

00:41:08,650 --> 00:41:13,780
intercessory results so of course we are

00:41:11,080 --> 00:41:15,370
getting the rest we go instead that's

00:41:13,780 --> 00:41:18,220
indication that you're using the

00:41:15,370 --> 00:41:19,690
compiler based intelligence engine of

00:41:18,220 --> 00:41:22,660
course that might be something you want

00:41:19,690 --> 00:41:25,060
to solve eventually because that's gonna

00:41:22,660 --> 00:41:27,330
be a build error but the good thing

00:41:25,060 --> 00:41:29,620
about enabling the compiler based

00:41:27,330 --> 00:41:33,490
intelligence is now actually you're

00:41:29,620 --> 00:41:36,850
getting real squiggles that reviews real

00:41:33,490 --> 00:41:39,460
problems in a code just to be clear this

00:41:36,850 --> 00:41:42,520
is not a bug in this product that's just

00:41:39,460 --> 00:41:44,710
a bug that I inserted here just so I can

00:41:42,520 --> 00:41:48,520
show you the squiggle but it's not a

00:41:44,710 --> 00:41:50,620
problem with the project so first of all

00:41:48,520 --> 00:41:52,930
we'd get this swill oh that's telling us

00:41:50,620 --> 00:41:54,880
I'm not using this not calling this

00:41:52,930 --> 00:41:59,220
function right because I'm not matching

00:41:54,880 --> 00:42:02,080
any of the argument lists now if I

00:41:59,220 --> 00:42:06,580
remember we're getting lots of results

00:42:02,080 --> 00:42:08,680
before like 10 or so when we still go

00:42:06,580 --> 00:42:11,800
through the permanent hints now I'm only

00:42:08,680 --> 00:42:13,990
getting one I'm sorry we are I'm getting

00:42:11,800 --> 00:42:16,060
two because our intelligence engine the

00:42:13,990 --> 00:42:20,050
compiler based one is really accurate

00:42:16,060 --> 00:42:23,020
it knows exactly what matter which

00:42:20,050 --> 00:42:29,670
function this this comes from so now I

00:42:23,020 --> 00:42:32,710
can type in as a type actually get

00:42:29,670 --> 00:42:39,870
autocomplete as well as I move over it

00:42:32,710 --> 00:42:44,770
moves over to the second parameter okay

00:42:39,870 --> 00:42:48,670
fix that switching back from Mac

00:42:44,770 --> 00:42:51,040
clicking on the wrong keys okay so

00:42:48,670 --> 00:42:53,590
that's greater goes away that's awesome

00:42:51,040 --> 00:42:57,640
so we can actually leverage the red

00:42:53,590 --> 00:43:02,050
squiggles to fix real issues in the code

00:42:57,640 --> 00:43:05,160
and basically what we do so the default

00:43:02,050 --> 00:43:07,090
experience coming with the C++ extension

00:43:05,160 --> 00:43:09,100
eventually we are still experimenting

00:43:07,090 --> 00:43:10,930
these features but eventually the idea

00:43:09,100 --> 00:43:15,010
is we're going to turn on the compiler

00:43:10,930 --> 00:43:16,820
based in engine as the default if it

00:43:15,010 --> 00:43:19,130
runs into any issues

00:43:16,820 --> 00:43:21,320
and include errors that you see earlier

00:43:19,130 --> 00:43:23,840
we're gonna automatically fall back to

00:43:21,320 --> 00:43:26,990
tech person to provide the results so

00:43:23,840 --> 00:43:30,140
you still get fuzzy results but you are

00:43:26,990 --> 00:43:31,220
not buried in like tons of red squiggles

00:43:30,140 --> 00:43:33,530
over the place

00:43:31,220 --> 00:43:36,560
that is why we had this automatic

00:43:33,530 --> 00:43:40,160
fallback mechanism in place so I would

00:43:36,560 --> 00:43:43,310
definitely recommend everyone to use the

00:43:40,160 --> 00:43:44,990
engine the compiler based one as the

00:43:43,310 --> 00:43:47,270
default because you don't have to worry

00:43:44,990 --> 00:43:50,510
about squiggles of the place because we

00:43:47,270 --> 00:43:53,450
always fall back so but as soon as you

00:43:50,510 --> 00:43:55,370
fix you tell us or the include path as

00:43:53,450 --> 00:43:57,290
long as soon as it's config correctly

00:43:55,370 --> 00:43:59,180
we're gonna automatically switch back to

00:43:57,290 --> 00:44:01,310
the compiler based one so you get the

00:43:59,180 --> 00:44:03,680
better results so you don't ever have to

00:44:01,310 --> 00:44:05,810
worry about that setting really other

00:44:03,680 --> 00:44:07,720
things I want to show you is if you're

00:44:05,810 --> 00:44:10,190
reading a logical base you wanna

00:44:07,720 --> 00:44:11,900
navigate through different files we

00:44:10,190 --> 00:44:15,740
actually have built in code browsing

00:44:11,900 --> 00:44:18,290
features right now all these Co browsing

00:44:15,740 --> 00:44:21,770
features are provided by the tag parser

00:44:18,290 --> 00:44:24,590
so we are working on getting them to use

00:44:21,770 --> 00:44:27,650
the new intellisense compiler based

00:44:24,590 --> 00:44:31,490
engine as well in the process of doing

00:44:27,650 --> 00:44:33,980
that just to show your real quick right

00:44:31,490 --> 00:44:36,830
now as of now this is experience you can

00:44:33,980 --> 00:44:39,950
get see if I click on a function I can

00:44:36,830 --> 00:44:43,610
do go to definition of course or I can

00:44:39,950 --> 00:44:46,730
hold the ctrl key to click that takes me

00:44:43,610 --> 00:44:48,560
to the CPP file from here we can do a

00:44:46,730 --> 00:44:50,960
switch header source that's going to

00:44:48,560 --> 00:44:53,120
take me to the header file of course I

00:44:50,960 --> 00:44:55,820
can always just go through the different

00:44:53,120 --> 00:44:58,010
declaration directly I can do it go to

00:44:55,820 --> 00:45:00,170
which takes me to a different file or I

00:44:58,010 --> 00:45:03,710
can do a peak where it's bringing the

00:45:00,170 --> 00:45:06,050
definition Internet embedded window so I

00:45:03,710 --> 00:45:11,150
don't lose the context of my current

00:45:06,050 --> 00:45:13,370
file so those are couple features other

00:45:11,150 --> 00:45:16,070
things we can do is to search for

00:45:13,370 --> 00:45:20,300
singles really fast so I showed you this

00:45:16,070 --> 00:45:23,660
command palette earlier so if you go

00:45:20,300 --> 00:45:25,040
here and type being at it's gonna give

00:45:23,660 --> 00:45:27,920
me populate and less of the other

00:45:25,040 --> 00:45:30,170
symbols I can I can type in I can do

00:45:27,920 --> 00:45:36,650
set list it's just gonna take me right

00:45:30,170 --> 00:45:38,690
here and we could also navigate through

00:45:36,650 --> 00:45:40,940
two different files that's really easy

00:45:38,690 --> 00:45:44,510
to do as well so you do ctrl P and you

00:45:40,940 --> 00:45:46,400
just I start typing the name of the file

00:45:44,510 --> 00:45:49,850
so in this case I know there's a main GI

00:45:46,400 --> 00:45:52,310
CPP file and just goes over there so at

00:45:49,850 --> 00:45:54,740
this point you can pretty much just use

00:45:52,310 --> 00:45:58,880
a keyboard for these quick navigations

00:45:54,740 --> 00:46:00,560
and in here I can do ctrl P and if I do

00:45:58,880 --> 00:46:02,990
:

00:46:00,560 --> 00:46:06,830
this allows me to typing a line number

00:46:02,990 --> 00:46:11,720
so I can do to Force one which takes me

00:46:06,830 --> 00:46:14,510
to this line directly now in here if you

00:46:11,720 --> 00:46:17,330
want to do some more editing here one of

00:46:14,510 --> 00:46:19,520
the things you might want to do is you

00:46:17,330 --> 00:46:22,700
if you have similar things with multiple

00:46:19,520 --> 00:46:24,410
lines and you want to do edit your

00:46:22,700 --> 00:46:25,700
multiple lines at the same time you can

00:46:24,410 --> 00:46:28,130
actually do that you may scold real

00:46:25,700 --> 00:46:31,490
quick with just keyboard you want to

00:46:28,130 --> 00:46:33,710
hold ctrl + alt and move your up and

00:46:31,490 --> 00:46:36,050
down arrow now I have multiple line

00:46:33,710 --> 00:46:39,380
selected I can select them all together

00:46:36,050 --> 00:46:41,930
okay start type I get the intellisense

00:46:39,380 --> 00:46:45,470
as I type but that's really really

00:46:41,930 --> 00:46:49,730
convenient as you if you want to do my

00:46:45,470 --> 00:46:51,980
editing okay lots of the editing and

00:46:49,730 --> 00:46:54,650
carousing features now let's talk about

00:46:51,980 --> 00:46:57,920
butyl bit so earlier we build a

00:46:54,650 --> 00:47:01,460
releasing Posse PP file with just GCC

00:46:57,920 --> 00:47:04,550
commit this project is a lot more

00:47:01,460 --> 00:47:12,050
complicated so it is actually set up to

00:47:04,550 --> 00:47:14,750
deal with make if I go in here it's got

00:47:12,050 --> 00:47:18,290
a lot of the make files already

00:47:14,750 --> 00:47:20,120
generated so what we want to do with

00:47:18,290 --> 00:47:23,090
this project is we want to build with

00:47:20,120 --> 00:47:26,210
make you can't have to do that in this

00:47:23,090 --> 00:47:29,000
code because we can run any external

00:47:26,210 --> 00:47:31,670
commands you can do whatever you want so

00:47:29,000 --> 00:47:34,520
we're gonna come over here this is my

00:47:31,670 --> 00:47:38,180
cast know JSON file we're familiar with

00:47:34,520 --> 00:47:41,230
this there's a command last time we just

00:47:38,180 --> 00:47:43,420
passing simply passing GG + +

00:47:41,230 --> 00:47:47,290
this time I'm using coding a bat file

00:47:43,420 --> 00:47:50,320
that I created you can do anything there

00:47:47,290 --> 00:47:54,040
so the vampire I have just basically

00:47:50,320 --> 00:47:56,770
goes into the built folder and say make

00:47:54,040 --> 00:48:00,600
me a debug build and that's all I need

00:47:56,770 --> 00:48:04,780
to do and of course I can still do

00:48:00,600 --> 00:48:08,020
Joseph B to be my project that's gonna

00:48:04,780 --> 00:48:14,160
pick up the change I made in the CPP

00:48:08,020 --> 00:48:14,160
file when I fix the argument list link

00:48:19,140 --> 00:48:25,060
alright it's done so that's that's

00:48:22,840 --> 00:48:27,310
building in vs code with a more complex

00:48:25,060 --> 00:48:31,720
project system and the last but not

00:48:27,310 --> 00:48:39,160
least we can study bug this app this is

00:48:31,720 --> 00:48:42,040
an ACCI file so if we go to and show you

00:48:39,160 --> 00:48:44,530
real quick so in the last time I showed

00:48:42,040 --> 00:48:48,700
you how to do launch basically just new

00:48:44,530 --> 00:48:50,590
tree passing this parameter the program

00:48:48,700 --> 00:48:53,920
name basically that's all you need to do

00:48:50,590 --> 00:48:56,290
as well so last time we build we debug

00:48:53,920 --> 00:48:59,170
with LD B and that's one I'm debugging

00:48:56,290 --> 00:49:01,630
with gdb I'm very very similar or it

00:48:59,170 --> 00:49:04,650
needs is where we can find this program

00:49:01,630 --> 00:49:08,700
which is that this XE file right there

00:49:04,650 --> 00:49:14,680
now let me switch back to our to my code

00:49:08,700 --> 00:49:16,900
let me show you something so I know

00:49:14,680 --> 00:49:19,300
there's something interesting here so in

00:49:16,900 --> 00:49:21,880
the CPP CG file it's actually doing

00:49:19,300 --> 00:49:24,940
cogeneration as I mentioned this is a

00:49:21,880 --> 00:49:28,420
form builder which then generates CPP

00:49:24,940 --> 00:49:31,710
file or lots of other languages oh this

00:49:28,420 --> 00:49:34,150
is where that happens I know there are

00:49:31,710 --> 00:49:37,180
there's a functioning here that actually

00:49:34,150 --> 00:49:39,369
takes the property of those controls in

00:49:37,180 --> 00:49:42,820
on the designer and turn those values

00:49:39,369 --> 00:49:45,820
into the code let's say I really wanted

00:49:42,820 --> 00:49:49,080
about this but I'm so lazy that I don't

00:49:45,820 --> 00:49:49,080
even want to set every point

00:49:49,690 --> 00:49:54,430
come back here to the break point last

00:49:52,870 --> 00:49:57,340
time we simply just click to get a

00:49:54,430 --> 00:50:01,510
breakpoint set but here I can actually

00:49:57,340 --> 00:50:03,700
type in the function name to that vs

00:50:01,510 --> 00:50:09,880
code to find our break point right there

00:50:03,700 --> 00:50:12,490
by looking at the function I should be

00:50:09,880 --> 00:50:20,020
able to launch the X see that I just

00:50:12,490 --> 00:50:23,520
build there's our designer okay let me

00:50:20,020 --> 00:50:26,920
add a form real quick switch over to

00:50:23,520 --> 00:50:30,850
generate some cpp code yay that's our

00:50:26,920 --> 00:50:34,060
breakpoint by function name of course I

00:50:30,850 --> 00:50:35,800
can do the normal things and other

00:50:34,060 --> 00:50:39,040
things I want to mention real quick here

00:50:35,800 --> 00:50:40,780
is this what we know of course you can

00:50:39,040 --> 00:50:43,080
look at the local variables but the

00:50:40,780 --> 00:50:45,490
watch window lets you to do expression

00:50:43,080 --> 00:50:47,740
expressions as well we've evaluate those

00:50:45,490 --> 00:50:51,630
so in here

00:50:47,740 --> 00:50:53,590
the type is PT text so when I have this

00:50:51,630 --> 00:50:56,200
expression here it's gonna tell me it's

00:50:53,590 --> 00:51:00,790
false other thing I wanna mention is all

00:50:56,200 --> 00:51:02,710
these threads not only you can see how

00:51:00,790 --> 00:51:05,380
many threads are there but also you can

00:51:02,710 --> 00:51:07,150
click on each frame to look at it for

00:51:05,380 --> 00:51:09,490
anything here so it's gonna be really

00:51:07,150 --> 00:51:12,550
useful when you do multi-threading

00:51:09,490 --> 00:51:15,360
debugging you get the feature I'm gonna

00:51:12,550 --> 00:51:17,950
show you real quick in the debugger yes

00:51:15,360 --> 00:51:23,020
if I want to say oh this is a long

00:51:17,950 --> 00:51:27,520
switch statement so if I want to just

00:51:23,020 --> 00:51:29,260
skip all that and say hey debugger just

00:51:27,520 --> 00:51:31,630
run here because I don't want to look at

00:51:29,260 --> 00:51:34,090
everything in between I can say run to

00:51:31,630 --> 00:51:36,610
cursor and they're just gonna go wrong

00:51:34,090 --> 00:51:39,370
of course in this particular case it so

00:51:36,610 --> 00:51:42,570
goes back but you can basically have the

00:51:39,370 --> 00:51:42,570
debugger run anywhere you want

00:51:42,810 --> 00:51:50,620
okay so last but not least when the

00:51:48,370 --> 00:51:52,060
debugging when when we are in the middle

00:51:50,620 --> 00:51:55,060
of debugging you can actually interact

00:51:52,060 --> 00:51:57,700
with the debugger using the debug

00:51:55,060 --> 00:52:00,460
console window one of the things we

00:51:57,700 --> 00:52:02,020
could ask quit pretty often is hey does

00:52:00,460 --> 00:52:05,650
vs code debugger sub 4

00:52:02,020 --> 00:52:07,900
viewing what's in the registers and we

00:52:05,650 --> 00:52:09,220
don't actually have a window for that we

00:52:07,900 --> 00:52:11,410
don't have at assembly window for that

00:52:09,220 --> 00:52:13,900
but you can't really get a similar the

00:52:11,410 --> 00:52:17,890
seeming from information I just come

00:52:13,900 --> 00:52:20,530
here and do this command dash X seeing

00:52:17,890 --> 00:52:22,360
four registers it's going to show you

00:52:20,530 --> 00:52:25,360
what's in the registers registers are

00:52:22,360 --> 00:52:28,060
being used basically you can you can

00:52:25,360 --> 00:52:29,620
talking any gdb or LDV commands in the

00:52:28,060 --> 00:52:31,060
in the debug console if you want more

00:52:29,620 --> 00:52:32,770
information of course you want to be

00:52:31,060 --> 00:52:35,950
careful because interacting with the

00:52:32,770 --> 00:52:38,140
debugger the same time as it's breaking

00:52:35,950 --> 00:52:41,350
so it might cause some problems with

00:52:38,140 --> 00:52:44,620
that but viewing registers is definitely

00:52:41,350 --> 00:52:47,260
doable no problem with that okay so

00:52:44,620 --> 00:52:49,720
we're running short on time let me just

00:52:47,260 --> 00:52:51,850
move quickly over on these things so

00:52:49,720 --> 00:52:53,980
pretty much just summary of what I just

00:52:51,850 --> 00:52:56,650
showed you earlier in the demo

00:52:53,980 --> 00:53:00,910
lots of editing features intelligence

00:52:56,650 --> 00:53:03,430
scope browsing code formatting we have

00:53:00,910 --> 00:53:06,370
two intelligence engines one is compiler

00:53:03,430 --> 00:53:10,120
based it's definitely recommended with a

00:53:06,370 --> 00:53:12,370
red heart and there's a tag parser based

00:53:10,120 --> 00:53:14,860
one which gives you fuzzy but quick

00:53:12,370 --> 00:53:18,460
results and how you can switch between

00:53:14,860 --> 00:53:20,220
them we can always switch tell us which

00:53:18,460 --> 00:53:23,560
one to use

00:53:20,220 --> 00:53:26,470
there's debugging where you can by

00:53:23,560 --> 00:53:28,780
defining a test JSON file we came from a

00:53:26,470 --> 00:53:30,670
to run any external tasks which means

00:53:28,780 --> 00:53:32,890
you can build your project with with any

00:53:30,670 --> 00:53:34,990
few systems we have built-in support for

00:53:32,890 --> 00:53:37,210
MS Bute you can of course build with

00:53:34,990 --> 00:53:39,340
make which I showed you if you have C

00:53:37,210 --> 00:53:41,500
make projects we actually have a an

00:53:39,340 --> 00:53:44,260
extension in the marketplace

00:53:41,500 --> 00:53:46,390
this is consuming tools extension

00:53:44,260 --> 00:53:49,710
formulas code this is created by a

00:53:46,390 --> 00:53:52,980
vector puh he did a really good job of

00:53:49,710 --> 00:53:56,050
getting the same experience in vs code

00:53:52,980 --> 00:53:58,450
in there so you can build with C make

00:53:56,050 --> 00:54:02,320
projects with very minimal efforts in vs

00:53:58,450 --> 00:54:04,420
code external tasks which means you can

00:54:02,320 --> 00:54:06,490
do anything else beyond debugging as

00:54:04,420 --> 00:54:07,690
well you can do maybe two part packaging

00:54:06,490 --> 00:54:10,750
interesting deploying

00:54:07,690 --> 00:54:15,070
there's pro matcher and enjoy a terminal

00:54:10,750 --> 00:54:15,850
I showed you and debugging features now

00:54:15,070 --> 00:54:19,360
let me to

00:54:15,850 --> 00:54:21,370
the last demo real quick that how you

00:54:19,360 --> 00:54:23,770
can customize vs code to be your editor

00:54:21,370 --> 00:54:26,350
because I showed you how easily you can

00:54:23,770 --> 00:54:28,450
get things up running I showed you the

00:54:26,350 --> 00:54:30,940
richness of the features across editing

00:54:28,450 --> 00:54:32,710
beauty in debugging now you have but you

00:54:30,940 --> 00:54:37,030
might still have one concerning in the

00:54:32,710 --> 00:54:39,480
back of your mind which is if I'm coming

00:54:37,030 --> 00:54:42,700
from another tool I'm already used to

00:54:39,480 --> 00:54:45,370
the colors so whatever setting or the

00:54:42,700 --> 00:54:47,710
key bindings over there it's gonna be a

00:54:45,370 --> 00:54:48,460
deep learning color for me to pick up a

00:54:47,710 --> 00:54:53,080
new tool

00:54:48,460 --> 00:54:56,140
now here's good news is the yes code is

00:54:53,080 --> 00:55:00,250
fully customizable so firstly I will

00:54:56,140 --> 00:55:03,430
show you is go to preferences these are

00:55:00,250 --> 00:55:05,860
the settings kinds of settings in here

00:55:03,430 --> 00:55:10,240
that you can customize for me all I did

00:55:05,860 --> 00:55:11,440
was I changed font size for the demo but

00:55:10,240 --> 00:55:15,190
that's how you found it

00:55:11,440 --> 00:55:17,010
font this is a default the way it works

00:55:15,190 --> 00:55:19,870
is you have to click on edit and

00:55:17,010 --> 00:55:22,300
replacing settings it's gonna copy over

00:55:19,870 --> 00:55:23,860
this setting to your side of the setting

00:55:22,300 --> 00:55:25,960
this is everything you are customizing

00:55:23,860 --> 00:55:28,150
and you change the value to whatever you

00:55:25,960 --> 00:55:30,670
want and you can do that Pro workspace

00:55:28,150 --> 00:55:33,700
or per user so it applies to all of your

00:55:30,670 --> 00:55:38,410
projects lots of colors you can

00:55:33,700 --> 00:55:42,550
customize there are different color

00:55:38,410 --> 00:55:44,650
themes in here that you can use Oh

00:55:42,550 --> 00:55:50,950
actually there's a quick way to get

00:55:44,650 --> 00:55:53,680
today to the colors this is the default

00:55:50,950 --> 00:55:56,020
but if you want to do height contrast I

00:55:53,680 --> 00:55:58,120
feel like this one this is the views

00:55:56,020 --> 00:56:04,530
delight actually like this one looks

00:55:58,120 --> 00:56:08,410
pretty nice this might be too much but

00:56:04,530 --> 00:56:10,300
the idea is hey we have Beauty lots of

00:56:08,410 --> 00:56:13,540
themes and you can install additional

00:56:10,300 --> 00:56:15,790
themes but if that's not good enough you

00:56:13,540 --> 00:56:18,280
can come here and say I will not totally

00:56:15,790 --> 00:56:27,430
customize all the colors to what I want

00:56:18,280 --> 00:56:28,990
and do the work tons of stuff in there

00:56:27,430 --> 00:56:31,090
you can customize

00:56:28,990 --> 00:56:32,830
everything to what you want and anything

00:56:31,090 --> 00:56:36,270
you customize here is going to overwrite

00:56:32,830 --> 00:56:39,940
the default see what's in the default

00:56:36,270 --> 00:56:44,680
okay so that's the look and feel but if

00:56:39,940 --> 00:56:46,150
you ask about the key bindings here is

00:56:44,680 --> 00:56:49,450
how you can customize all the keyboard

00:56:46,150 --> 00:56:52,680
shortcuts every single one of them if

00:56:49,450 --> 00:56:55,630
that's too much work there's good news

00:56:52,680 --> 00:56:58,840
if you're coming from other popular

00:56:55,630 --> 00:57:01,960
tools and come here to find extension

00:56:58,840 --> 00:57:02,710
that is designed to do the key mapping

00:57:01,960 --> 00:57:04,510
for you

00:57:02,710 --> 00:57:07,000
between the other tool and the vs code

00:57:04,510 --> 00:57:09,790
so I don't have the network connected

00:57:07,000 --> 00:57:13,720
but if you do here's what you're gonna

00:57:09,790 --> 00:57:17,590
have you have key mappings built-in for

00:57:13,720 --> 00:57:20,590
all these tools but if you see anything

00:57:17,590 --> 00:57:24,610
missing that you would like to have let

00:57:20,590 --> 00:57:28,260
us know last thing I will show you I

00:57:24,610 --> 00:57:28,260
thought it was a pretty cool thing

00:57:28,860 --> 00:57:35,070
there's a Zen mode uvs code if I do that

00:57:33,130 --> 00:57:41,380
everything else goes away

00:57:35,070 --> 00:57:43,869
I'm just coding right here okay so there

00:57:41,380 --> 00:57:49,240
we go that's all you have is a mode

00:57:43,869 --> 00:57:51,190
everything is peaceful okay so a few

00:57:49,240 --> 00:57:54,100
quick things as I said you can fully

00:57:51,190 --> 00:57:55,960
customize vehicle to be your editor just

00:57:54,100 --> 00:58:00,100
to summarize what we covered today but a

00:57:55,960 --> 00:58:04,960
lot of stuff for being with video studio

00:58:00,100 --> 00:58:06,700
code and the C++ extension vs code could

00:58:04,960 --> 00:58:09,670
be a really powerful C and C++

00:58:06,700 --> 00:58:12,840
development environment and it runs

00:58:09,670 --> 00:58:16,119
everywhere across platform so you got

00:58:12,840 --> 00:58:18,910
fast lightweight tool it's free

00:58:16,119 --> 00:58:21,970
open-source runs everywhere customizable

00:58:18,910 --> 00:58:24,520
extensible there's lots of extensions in

00:58:21,970 --> 00:58:26,320
the marketplace today already but if you

00:58:24,520 --> 00:58:30,220
find anything anything that's missing

00:58:26,320 --> 00:58:32,980
it's it's really really convenient to

00:58:30,220 --> 00:58:36,010
just write your own next extension as

00:58:32,980 --> 00:58:38,320
well and get integration I showed you it

00:58:36,010 --> 00:58:40,900
a bit and on the Supersmile side what we

00:58:38,320 --> 00:58:42,850
are adding to it experience is in

00:58:40,900 --> 00:58:44,590
telescope browsing for

00:58:42,850 --> 00:58:47,320
and of course you can view their run

00:58:44,590 --> 00:58:49,840
with external tasks and we got debugging

00:58:47,320 --> 00:58:53,760
functionality or beautiness as well so

00:58:49,840 --> 00:58:57,490
everything can be done in that one UI

00:58:53,760 --> 00:58:59,890
alright I think that's my oh one last

00:58:57,490 --> 00:59:02,530
minute perfect on time okay call to

00:58:59,890 --> 00:59:05,050
action after the session if you haven't

00:59:02,530 --> 00:59:06,760
already go download via city code from

00:59:05,050 --> 00:59:11,770
here this is where you can get a stable

00:59:06,760 --> 00:59:14,830
build or get vs code inside a build

00:59:11,770 --> 00:59:17,650
this is f3 the cutting-edge latest

00:59:14,830 --> 00:59:19,660
editor this is basically the daily

00:59:17,650 --> 00:59:22,270
beauty that we use internally for

00:59:19,660 --> 00:59:24,450
developing vs code so you're getting the

00:59:22,270 --> 00:59:30,070
exact same view our developers are using

00:59:24,450 --> 00:59:33,430
and we as extension we sometimes would

00:59:30,070 --> 00:59:35,620
in experiment new features with inside

00:59:33,430 --> 00:59:38,350
of you first so you're not only getting

00:59:35,620 --> 00:59:40,690
the latest from vs code itself you're

00:59:38,350 --> 00:59:43,060
also getting the latest from the C++

00:59:40,690 --> 00:59:45,400
extension you don't have to install both

00:59:43,060 --> 00:59:47,080
you just need to warn each one but of

00:59:45,400 --> 00:59:49,660
course if you want to the run side by

00:59:47,080 --> 00:59:52,660
side just fine just get either one of

00:59:49,660 --> 00:59:54,460
those get the super specific extension

00:59:52,660 --> 00:59:57,580
this is where you can get them to

00:59:54,460 --> 01:00:00,040
install from marketplace or you can just

00:59:57,580 --> 01:00:01,960
install from within vs code like I

01:00:00,040 --> 01:00:05,920
showed you click on the extension tab

01:00:01,960 --> 01:00:08,700
typing C++ find the one that comes from

01:00:05,920 --> 01:00:11,350
Microsoft and clicking stop that's all

01:00:08,700 --> 01:00:14,260
more links down there to give us

01:00:11,350 --> 01:00:16,420
feedback and suggestions last but not

01:00:14,260 --> 01:00:20,710
least follow us to get the latest news

01:00:16,420 --> 01:00:22,060
we publish video C++ team blog every

01:00:20,710 --> 01:00:24,520
time we ship something new we're gonna

01:00:22,060 --> 01:00:27,370
talk about it there and the follow us on

01:00:24,520 --> 01:00:31,060
Twitter we are all also publish tweets

01:00:27,370 --> 01:00:32,950
there whenever we have news and that's

01:00:31,060 --> 01:00:38,200
all I have

01:00:32,950 --> 01:00:40,600
I think I'm running right on time but

01:00:38,200 --> 01:00:41,860
I'm happy to take any questions after

01:00:40,600 --> 01:00:44,290
the session but I want to thank you so

01:00:41,860 --> 01:00:47,850
much for spending the time here really

01:00:44,290 --> 01:00:49,990
wonderful audience thank you so much and

01:00:47,850 --> 01:00:51,190
let me know if you have any questions

01:00:49,990 --> 01:00:57,809
thank you

01:00:51,190 --> 01:00:57,809

YouTube URL: https://www.youtube.com/watch?v=rFdJ68WbkdQ


