Title: CppCon 2017: Lars Knoll “Qt as a C++ Framework: History, Present State and Future”
Publication date: 2017-09-29
Playlist: CppCon 2017
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Qt is one of the largest and most widely used C++ frameworks. It is fully cross-platform, covering all functionality required to develop advanced graphical applications. The talk will go through important parts of Qt's history from it's roots to what it is today. We will have a look into the relation between Qt and C++, some of the design philosophies driving the evolution of Qt. I'll go through the current state of the frameworks, latest releases, ongoing development focus, and give an outlook into the future.
— 
Lars Knoll - The Qt Company, CTO

Lars is The Qt Company CTO and Qt Project Chief Maintainer.

He has been working on Qt for more than 17 years starting as a software engineer to later leading the global Qt engineering team in Nokia before the Digia acquisition in October 2012. Lars has been an active member of the KDE community and the architect behind KDE’s HTML rendering library that formed the basis for the WebKit open source project.

Lars holds a PhD in physics from the University of Heidelberg. He is a German national and lives with his family in Oslo.)
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,319 --> 00:00:07,020
thanks and good morning everybody

00:00:04,040 --> 00:00:09,269
yeah thanks for having me here and

00:00:07,020 --> 00:00:11,880
taking giving me the opportunity to

00:00:09,269 --> 00:00:14,160
speak a little bit about cute as a C++

00:00:11,880 --> 00:00:16,850
framework and I'll talk a little bit

00:00:14,160 --> 00:00:19,050
about you know where we're coming from

00:00:16,850 --> 00:00:20,760
where we are today some of the

00:00:19,050 --> 00:00:23,010
philosophies design principles behind

00:00:20,760 --> 00:00:25,380
cute because they to some extent also

00:00:23,010 --> 00:00:27,560
differ a bit from you know what you know

00:00:25,380 --> 00:00:30,779
from maybe from the standard libraries

00:00:27,560 --> 00:00:32,820
and also have a little bit of an outlook

00:00:30,779 --> 00:00:34,700
you know where we're going let's see how

00:00:32,820 --> 00:00:38,040
this goes

00:00:34,700 --> 00:00:40,469
just to for quick information

00:00:38,040 --> 00:00:43,110
quick to get a quick idea I mean how

00:00:40,469 --> 00:00:46,739
many of you do know cute and have used

00:00:43,110 --> 00:00:48,600
it before Wow thanks that's that's great

00:00:46,739 --> 00:00:49,890
and fantastic so I'll probably be

00:00:48,600 --> 00:00:52,680
telling you a little bit of stuff you

00:00:49,890 --> 00:00:54,989
also already know but let's see we'll

00:00:52,680 --> 00:00:56,789
keep the the thing short but I'll still

00:00:54,989 --> 00:00:59,760
have a little bit of an intro about what

00:00:56,789 --> 00:01:01,770
cute really is what we have and let's

00:00:59,760 --> 00:01:04,979
keep that one short everything else you

00:01:01,770 --> 00:01:06,900
can see out look bad it's probably the

00:01:04,979 --> 00:01:12,090
most comprehensive C++ framework

00:01:06,900 --> 00:01:14,189
available today but you know it's not

00:01:12,090 --> 00:01:15,509
only that it's not only a C++ framework

00:01:14,189 --> 00:01:17,250
we also have other things in there we

00:01:15,509 --> 00:01:19,680
have a lot of you know tooling around it

00:01:17,250 --> 00:01:24,630
we have things to help you create

00:01:19,680 --> 00:01:27,960
embedded devices we have a UI technology

00:01:24,630 --> 00:01:29,939
called cute quick which is not C++ but

00:01:27,960 --> 00:01:32,939
integrates very well with C++ and I'll

00:01:29,939 --> 00:01:35,430
come to that a bit later so there's a

00:01:32,939 --> 00:01:36,990
lot of stuff in there and in the end it

00:01:35,430 --> 00:01:39,750
has pretty much everything you need to

00:01:36,990 --> 00:01:42,990
do and to create your applications for

00:01:39,750 --> 00:01:44,399
whatever use case it is it's dual

00:01:42,990 --> 00:01:47,880
licensed we have a commercial version

00:01:44,399 --> 00:01:50,159
available and there's also commercial

00:01:47,880 --> 00:01:53,090
company called the cute company behind a

00:01:50,159 --> 00:01:55,320
lot of the development efforts around

00:01:53,090 --> 00:01:57,930
around cute but it's also available

00:01:55,320 --> 00:02:01,409
under a combination of LGPL version 3

00:01:57,930 --> 00:02:03,329
and GPL version 3 we're developing it

00:02:01,409 --> 00:02:06,360
fully out in the open it's an open

00:02:03,329 --> 00:02:08,069
source project the development as said

00:02:06,360 --> 00:02:09,660
most of the a lot of the development is

00:02:08,069 --> 00:02:11,370
done by the Qt company but we do have a

00:02:09,660 --> 00:02:12,960
lot of external contributors as well

00:02:11,370 --> 00:02:15,320
that help us

00:02:12,960 --> 00:02:17,760
you know develop cute further and

00:02:15,320 --> 00:02:22,170
contribute whatever is important to them

00:02:17,760 --> 00:02:24,120
to cute we currently have two products

00:02:22,170 --> 00:02:26,190
basically that you know come out of that

00:02:24,120 --> 00:02:28,710
one one of them is called cute for

00:02:26,190 --> 00:02:30,540
application development which covers

00:02:28,710 --> 00:02:33,980
pretty much all desktop and mobile

00:02:30,540 --> 00:02:37,890
platforms that are in use today we have

00:02:33,980 --> 00:02:41,130
Linux Windows Mac OS and on the mobile

00:02:37,890 --> 00:02:47,040
side iOS Android and also Windows Phone

00:02:41,130 --> 00:02:48,690
if you're still using it in addition to

00:02:47,040 --> 00:02:50,730
that we had over the last years an

00:02:48,690 --> 00:02:53,190
increasing focus also on the embedded

00:02:50,730 --> 00:02:55,350
sites where we're seeing a lot of usage

00:02:53,190 --> 00:02:58,260
coming up we're seeing many many more

00:02:55,350 --> 00:03:00,270
people that want to create applications

00:02:58,260 --> 00:03:01,790
you know complete devices that have a

00:03:00,270 --> 00:03:05,120
user interface that have a touch screen

00:03:01,790 --> 00:03:07,470
where cute is a very natural fit and

00:03:05,120 --> 00:03:09,210
we're supporting pretty most of the

00:03:07,470 --> 00:03:11,640
embedded operating systems that are you

00:03:09,210 --> 00:03:13,530
know in use out there let's say for

00:03:11,640 --> 00:03:15,990
anything above the microcontroller level

00:03:13,530 --> 00:03:22,010
so embedded Linux QNX

00:03:15,990 --> 00:03:22,010
vxworks Windows IOT core integrity

00:03:23,600 --> 00:03:27,480
Vsevolod look at you know what's in the

00:03:25,890 --> 00:03:32,940
end and that's that's what i meant by

00:03:27,480 --> 00:03:35,250
comprehensive framework the application

00:03:32,940 --> 00:03:36,720
development side is based on top you

00:03:35,250 --> 00:03:38,340
know of a platform abstraction layer

00:03:36,720 --> 00:03:40,370
that abstracts the way the different

00:03:38,340 --> 00:03:42,650
operating systems and their differences

00:03:40,370 --> 00:03:45,150
that's what you see on the bottom here

00:03:42,650 --> 00:03:47,460
on top of that we have a set of

00:03:45,150 --> 00:03:49,470
essential libraries and frameworks as

00:03:47,460 --> 00:03:51,840
we're calling it starts with cute core

00:03:49,470 --> 00:03:56,700
which has the foundations not ruling

00:03:51,840 --> 00:03:59,220
classes reading fileio you name it

00:03:56,700 --> 00:04:01,440
everything non-graphical a GUI library

00:03:59,220 --> 00:04:05,840
which are the foundations of graphical

00:04:01,440 --> 00:04:08,460
things painting text font handling

00:04:05,840 --> 00:04:10,200
anything related to to these kind of

00:04:08,460 --> 00:04:14,250
things PDF generation lots of other

00:04:10,200 --> 00:04:16,109
stuff stuff in there and then on top of

00:04:14,250 --> 00:04:19,350
that we build up different things

00:04:16,109 --> 00:04:21,780
widgets for classical desktop widgets we

00:04:19,350 --> 00:04:24,140
have a sequel module with other things

00:04:21,780 --> 00:04:25,990
we have a cute quick UI technology

00:04:24,140 --> 00:04:28,930
multimedia

00:04:25,990 --> 00:04:31,720
sensors integration on them on mobile

00:04:28,930 --> 00:04:33,460
devices for example and lots and lots of

00:04:31,720 --> 00:04:36,220
other things as you see the list is

00:04:33,460 --> 00:04:38,800
comprehensive and then complementing

00:04:36,220 --> 00:04:41,590
that on the right hand side development

00:04:38,800 --> 00:04:44,259
tools are mainly centered around our

00:04:41,590 --> 00:04:45,610
cute creator IDE but we also have an

00:04:44,259 --> 00:04:48,610
integration for example into visual

00:04:45,610 --> 00:04:51,639
studio and where we provide things like

00:04:48,610 --> 00:04:54,490
graphical designers development helpful

00:04:51,639 --> 00:04:57,870
C++ developer you know like stat Clank

00:04:54,490 --> 00:05:00,220
static analyzer integrations profiling

00:04:57,870 --> 00:05:02,770
debugging remote debugging on embedded

00:05:00,220 --> 00:05:03,940
devices all those kind of things so

00:05:02,770 --> 00:05:08,800
that's the application development

00:05:03,940 --> 00:05:11,830
product at a quick glance the the other

00:05:08,800 --> 00:05:13,720
product device creation is something

00:05:11,830 --> 00:05:17,650
that is there for the embedded device

00:05:13,720 --> 00:05:19,599
where we basically add on top of cute

00:05:17,650 --> 00:05:21,639
for application development it's it's it

00:05:19,599 --> 00:05:23,139
extends application develop so what you

00:05:21,639 --> 00:05:25,569
see on the bottom is basically what you

00:05:23,139 --> 00:05:28,090
just saw before in the application

00:05:25,569 --> 00:05:30,580
development slide for the embedded

00:05:28,090 --> 00:05:32,590
platforms and then we extend that with

00:05:30,580 --> 00:05:35,710
embedded specific solutions like a

00:05:32,590 --> 00:05:37,360
virtual keyboard support for you know

00:05:35,710 --> 00:05:41,590
different serial buses like canvas

00:05:37,360 --> 00:05:43,930
Modbus software stack good to cute where

00:05:41,590 --> 00:05:46,570
we make it easier to integrate on on a

00:05:43,930 --> 00:05:49,030
on an embedded Linux device and then

00:05:46,570 --> 00:05:51,699
better tooling you like you know running

00:05:49,030 --> 00:05:53,400
a device emulator locally building for

00:05:51,699 --> 00:05:56,380
that one and debugging on that one

00:05:53,400 --> 00:05:59,860
remote debugging on the device and these

00:05:56,380 --> 00:06:03,009
kind of things so that's how that at a

00:05:59,860 --> 00:06:05,800
glance the product has said one of the

00:06:03,009 --> 00:06:12,849
main Poona parts of what we're doing

00:06:05,800 --> 00:06:15,639
there is the Qt creator IDE this is

00:06:12,849 --> 00:06:17,710
really the center part of of our

00:06:15,639 --> 00:06:19,120
offering you know with which many of our

00:06:17,710 --> 00:06:22,630
people use it's a full cross-platform

00:06:19,120 --> 00:06:25,270
IDE works the same way on all desktop

00:06:22,630 --> 00:06:26,710
platforms and has support for cute

00:06:25,270 --> 00:06:28,389
projects that we don't also know a lot

00:06:26,710 --> 00:06:30,550
of people who are using it purely for

00:06:28,389 --> 00:06:32,830
C++ parties are not even using huge but

00:06:30,550 --> 00:06:35,919
using huge Creator as their IDE because

00:06:32,830 --> 00:06:37,060
it gives them the cross-platform aspect

00:06:35,919 --> 00:06:41,139
of things

00:06:37,060 --> 00:06:44,650
I said lots of things in there

00:06:41,139 --> 00:06:46,630
code editing and I'm compiling you know

00:06:44,650 --> 00:06:48,700
now with the latest releases we have

00:06:46,630 --> 00:06:50,680
added support so that you know we're

00:06:48,700 --> 00:06:52,780
running we're basically giving you

00:06:50,680 --> 00:06:55,930
immediately inside the source code

00:06:52,780 --> 00:06:59,139
compiler warnings and errors so you see

00:06:55,930 --> 00:07:00,820
that and you can see maybe you can see

00:06:59,139 --> 00:07:03,850
that for example here there's a few

00:07:00,820 --> 00:07:06,220
creator the current version running to

00:07:03,850 --> 00:07:09,370
forego here for example and then all we

00:07:06,220 --> 00:07:12,900
think hope you don't see that I need to

00:07:09,370 --> 00:07:12,900
get out of the presentation for a second

00:07:13,080 --> 00:07:18,270
here we go it's not working no it's not

00:07:19,139 --> 00:07:27,400
was a second screen sorry doesn't seem

00:07:22,720 --> 00:07:29,650
to work let's stay with this one but you

00:07:27,400 --> 00:07:36,370
have inline code editing there and

00:07:29,650 --> 00:07:38,680
inline warnings and error messages so so

00:07:36,370 --> 00:07:40,210
that's a little bit it I I can at least

00:07:38,680 --> 00:07:42,789
show you a screenshot of cute crater

00:07:40,210 --> 00:07:44,830
little bit older version we see the code

00:07:42,789 --> 00:07:48,130
editor you know project management you

00:07:44,830 --> 00:07:52,450
see see see the debugging panes all of

00:07:48,130 --> 00:07:55,300
that and everything you need okay so

00:07:52,450 --> 00:07:58,360
much for a very quick and and rough

00:07:55,300 --> 00:07:59,890
overview over what hewed is but let's go

00:07:58,360 --> 00:08:01,000
a little bit back into history actually

00:07:59,890 --> 00:08:05,560
to be exactly

00:08:01,000 --> 00:08:08,919
let's go 26 years back let's go back to

00:08:05,560 --> 00:08:11,950
a park bench in front I'm Norway that's

00:08:08,919 --> 00:08:15,370
where it all started actually there were

00:08:11,950 --> 00:08:17,380
two you know students at the University

00:08:15,370 --> 00:08:21,400
at one time called erection bang and

00:08:17,380 --> 00:08:26,220
Hooven WA and they were actually working

00:08:21,400 --> 00:08:29,020
there on the Caesars in 1991 1990 and

00:08:26,220 --> 00:08:33,400
had to develop a graphical application

00:08:29,020 --> 00:08:36,130
at that point for UNIX and for for the

00:08:33,400 --> 00:08:39,250
Macintosh the early versions and they

00:08:36,130 --> 00:08:41,169
got extremely frustrated with what they

00:08:39,250 --> 00:08:44,169
could find there in terms of tooling and

00:08:41,169 --> 00:08:47,680
help you know neck on UNIX was x11 they

00:08:44,169 --> 00:08:50,830
were thena widgets motif and they tried

00:08:47,680 --> 00:08:53,680
using doesn't felt like you know the sky

00:08:50,830 --> 00:08:56,380
be really the solution this is hard to

00:08:53,680 --> 00:09:00,930
use it's very hard to debug work with

00:08:56,380 --> 00:09:00,930
and if just it doesn't feel right

00:09:01,110 --> 00:09:05,380
so you know they sat down on that park

00:09:04,030 --> 00:09:06,850
bench at some point and said okay you

00:09:05,380 --> 00:09:08,590
know what this is not working what we

00:09:06,850 --> 00:09:09,670
really need is we need an you know not

00:09:08,590 --> 00:09:12,310
some see it guys we need an

00:09:09,670 --> 00:09:14,820
object-oriented presentation system at

00:09:12,310 --> 00:09:17,470
this place system something that we can

00:09:14,820 --> 00:09:20,350
that makes our lives easier that gives

00:09:17,470 --> 00:09:24,820
brings helps us bring these applications

00:09:20,350 --> 00:09:26,530
onto the screen and that also a little

00:09:24,820 --> 00:09:29,620
bit defines what what the real goal

00:09:26,530 --> 00:09:31,450
there was in the end what it was about

00:09:29,620 --> 00:09:36,580
you know making software development

00:09:31,450 --> 00:09:38,140
fund and easy that's something you know

00:09:36,580 --> 00:09:40,090
that was missing at that time for them

00:09:38,140 --> 00:09:41,500
and they felt like you know software

00:09:40,090 --> 00:09:44,110
development is really hard

00:09:41,500 --> 00:09:46,990
it's no fun you know and you get home it

00:09:44,110 --> 00:09:49,420
doesn't fulfill you so how can we change

00:09:46,990 --> 00:09:52,260
that how can we make it actually fun and

00:09:49,420 --> 00:09:54,430
easy for developers to to work with

00:09:52,260 --> 00:09:57,280
software to work with graphical

00:09:54,430 --> 00:10:01,840
applications and get those out and get

00:09:57,280 --> 00:10:03,250
those developed and you know after that

00:10:01,840 --> 00:10:05,050
talk you know it took a little while

00:10:03,250 --> 00:10:07,090
they were talking bit around and and

00:10:05,050 --> 00:10:11,020
sending that and you see a diagram here

00:10:07,090 --> 00:10:13,060
that was from 1993 when they started you

00:10:11,020 --> 00:10:16,780
know you know developing the ideas a

00:10:13,060 --> 00:10:18,610
little bit more we see a lot of you know

00:10:16,780 --> 00:10:20,560
what made up you know the first version

00:10:18,610 --> 00:10:22,900
of cute and what they was thinking also

00:10:20,560 --> 00:10:25,600
you know a little bit of interesting you

00:10:22,900 --> 00:10:27,340
see now where the hue comes from the

00:10:25,600 --> 00:10:29,170
earliest versions there was actually

00:10:27,340 --> 00:10:31,480
called quasar that was the idea they had

00:10:29,170 --> 00:10:32,980
for the name in addition there was the

00:10:31,480 --> 00:10:34,900
thing that the queue was nice and it

00:10:32,980 --> 00:10:37,600
wasn't taking as a prefix letter because

00:10:34,900 --> 00:10:42,340
you know there was X 4 for the X specs t

00:10:37,600 --> 00:10:43,870
widgets motif had its own prefix so you

00:10:42,340 --> 00:10:46,780
know namespaces didn't exist at that

00:10:43,870 --> 00:10:49,510
time so what do you do you you you pick

00:10:46,780 --> 00:10:51,210
a letter and you use that one and you

00:10:49,510 --> 00:10:54,430
know occupy that as your namespace

00:10:51,210 --> 00:10:55,930
that's what happened and it's

00:10:54,430 --> 00:10:58,090
interesting to see that if you look at

00:10:55,930 --> 00:10:59,800
the design a lot of things are still

00:10:58,090 --> 00:11:01,660
available as they are in queue today you

00:10:59,800 --> 00:11:04,170
have the queue object as the central

00:11:01,660 --> 00:11:07,019
piece really smack in the middle

00:11:04,170 --> 00:11:09,300
on top a metal object that's that's

00:11:07,019 --> 00:11:10,709
helping you manage you know the signal

00:11:09,300 --> 00:11:14,610
slot mechanism which is something that

00:11:10,709 --> 00:11:16,350
actually I began Hoover invented in the

00:11:14,610 --> 00:11:19,410
times and has been picked up by many

00:11:16,350 --> 00:11:22,079
others afterwards seeing event handling

00:11:19,410 --> 00:11:27,000
at the bottom and on the right-hand side

00:11:22,079 --> 00:11:29,070
you see a font painter colors so these

00:11:27,000 --> 00:11:33,529
the basic things you need to build up

00:11:29,070 --> 00:11:33,529
you know a graphical user interfaces and

00:11:33,560 --> 00:11:42,410
they took that forward and in the 1994

00:11:39,930 --> 00:11:45,360
they managed to convince their wives to

00:11:42,410 --> 00:11:50,839
sponsor them for a couple of for awhile

00:11:45,360 --> 00:11:50,839
and founded a company called trolltech

00:11:51,829 --> 00:11:58,589
you see one of the earliest versions of

00:11:54,240 --> 00:11:59,970
the website so they were starting off

00:11:58,589 --> 00:12:02,279
from the very beginning which was

00:11:59,970 --> 00:12:04,230
actually unusual death by you know

00:12:02,279 --> 00:12:07,889
basically marketing everything through

00:12:04,230 --> 00:12:10,800
the internet you know the world wide web

00:12:07,889 --> 00:12:13,769
was very new at that time so it was

00:12:10,800 --> 00:12:16,320
actually something that was wasn't quite

00:12:13,769 --> 00:12:19,140
used usual they never really sold

00:12:16,320 --> 00:12:21,480
physical copies which was the standard

00:12:19,140 --> 00:12:23,279
distribution model at that time you know

00:12:21,480 --> 00:12:24,690
when if a customer asked for that and

00:12:23,279 --> 00:12:27,720
then they went into you know boons

00:12:24,690 --> 00:12:29,760
during the cd-rom and shipped it off but

00:12:27,720 --> 00:12:31,709
by default you know you download the

00:12:29,760 --> 00:12:35,430
thing from the internet and that's how

00:12:31,709 --> 00:12:39,300
how this works so was very interesting

00:12:35,430 --> 00:12:42,540
and in April 96 they then actually made

00:12:39,300 --> 00:12:44,940
the first sale of acute license was the

00:12:42,540 --> 00:12:46,649
European Space Agency that purchased ten

00:12:44,940 --> 00:12:48,870
licenses to make some satellite

00:12:46,649 --> 00:12:51,949
simulation software I was pretty

00:12:48,870 --> 00:12:54,420
interesting and then actually you know

00:12:51,949 --> 00:12:56,040
an interesting decision and the gutsy

00:12:54,420 --> 00:12:58,850
decision by them because cute wasn't

00:12:56,040 --> 00:13:02,550
even at version 1.0 when they did it and

00:12:58,850 --> 00:13:05,610
erotic had four employees then you know

00:13:02,550 --> 00:13:07,649
eirick sat down and had to make an

00:13:05,610 --> 00:13:09,029
invoice and he didn't know even though

00:13:07,649 --> 00:13:10,620
how to do that so he took an invoice

00:13:09,029 --> 00:13:14,250
from somewhere else that he had gotten

00:13:10,620 --> 00:13:17,160
copied it basically made it look

00:13:14,250 --> 00:13:19,230
approximately the same and then you know

00:13:17,160 --> 00:13:21,089
then said oh but you know I can't write

00:13:19,230 --> 00:13:24,569
invoice number one that that just looks

00:13:21,089 --> 00:13:27,259
long so he went over to Hoover and asked

00:13:24,569 --> 00:13:30,750
him Oh what should we do hmm

00:13:27,259 --> 00:13:33,029
let's let's let's put it in verse 211 in

00:13:30,750 --> 00:13:37,589
there sounds like so decent-sized and

00:13:33,029 --> 00:13:41,129
it's a prime number that's cool so

00:13:37,589 --> 00:13:43,250
that's what they did and so the first

00:13:41,129 --> 00:13:46,319
invoice started actually at number 211

00:13:43,250 --> 00:13:47,759
and then they had a couple more but by

00:13:46,319 --> 00:13:49,769
the end of the year they they felt like

00:13:47,759 --> 00:13:51,959
the numbers look too small so they are

00:13:49,769 --> 00:13:56,149
the food you know a thousand four

00:13:51,959 --> 00:13:56,149
hundred to them to make it a bit bigger

00:13:57,079 --> 00:14:01,920
tonic sold internationally from the very

00:13:59,699 --> 00:14:03,750
very beginning you know the eighth first

00:14:01,920 --> 00:14:06,029
eight customs that the COS company had

00:14:03,750 --> 00:14:09,240
came from eight different countries and

00:14:06,029 --> 00:14:10,620
not one of them was from Norway I was

00:14:09,240 --> 00:14:13,220
saying it's you pretty amazing it was a

00:14:10,620 --> 00:14:13,220
good start

00:14:13,579 --> 00:14:21,810
cute 1.0 was unreleased also nine point

00:14:16,620 --> 00:14:24,269
1996 at that point in time you know C++

00:14:21,810 --> 00:14:27,329
was still pretty early so kid 1.0 worked

00:14:24,269 --> 00:14:32,810
completely without templates nothing in

00:14:27,329 --> 00:14:35,399
there they had you know specialized hew

00:14:32,810 --> 00:14:38,850
specialized lists for pointers for

00:14:35,399 --> 00:14:43,680
integers for three or four types that

00:14:38,850 --> 00:14:45,269
they needed and that was it also

00:14:43,680 --> 00:14:48,689
interestingly enough they started from

00:14:45,269 --> 00:14:50,639
the very beginning and released work

00:14:48,689 --> 00:14:55,069
cross-platform the version was working

00:14:50,639 --> 00:14:58,019
on Windows Windows 95 and on UNIX and

00:14:55,069 --> 00:15:00,720
they released the UNIX version with the

00:14:58,019 --> 00:15:03,720
source code out there under you know

00:15:00,720 --> 00:15:05,309
nowadays view you would say an open

00:15:03,720 --> 00:15:07,920
source license it wouldn't be open

00:15:05,309 --> 00:15:09,600
source approved license nowadays but it

00:15:07,920 --> 00:15:11,399
was there and it was free for everybody

00:15:09,600 --> 00:15:14,309
to download and use for non-commercial

00:15:11,399 --> 00:15:17,459
purposes which was also in a way of

00:15:14,309 --> 00:15:19,019
marketing instrument to you know because

00:15:17,459 --> 00:15:21,290
there was more company no marketing

00:15:19,019 --> 00:15:24,089
budget how do you spread the word right

00:15:21,290 --> 00:15:26,250
well give out the source code and let's

00:15:24,089 --> 00:15:27,870
see what the currently building and up

00:15:26,250 --> 00:15:29,850
and emerging open-source community

00:15:27,870 --> 00:15:31,860
around Linux will do with it

00:15:29,850 --> 00:15:36,780
and actually you know something that

00:15:31,860 --> 00:15:40,740
magically happened in 97

00:15:36,780 --> 00:15:42,900
a guy called Mateus at wish actually you

00:15:40,740 --> 00:15:45,570
know got fed up with the state of user

00:15:42,900 --> 00:15:48,450
interfaces on Linux you know at that

00:15:45,570 --> 00:15:54,150
point in time you had I don't know who

00:15:48,450 --> 00:15:57,450
of you remembers that FW VM and you know

00:15:54,150 --> 00:15:59,130
very old it's just window managers you

00:15:57,450 --> 00:16:01,520
could move some windows around on x11

00:15:59,130 --> 00:16:04,920
but you know you didn't really have a

00:16:01,520 --> 00:16:08,550
windowing or a desktop like Windows 95

00:16:04,920 --> 00:16:09,960
had and he wanted to change that and he

00:16:08,550 --> 00:16:13,410
said you know I want to change that I

00:16:09,960 --> 00:16:15,930
want to do a a dead project and he

00:16:13,410 --> 00:16:20,370
announced it as you know I'm on a

00:16:15,930 --> 00:16:22,170
newsgroup Crump OS Linux misc at that

00:16:20,370 --> 00:16:23,910
point in time I don't know many of you

00:16:22,170 --> 00:16:25,800
probably have never you know the young

00:16:23,910 --> 00:16:28,620
ones had never seen one worked with or

00:16:25,800 --> 00:16:30,900
seen youth groups but they were one way

00:16:28,620 --> 00:16:33,390
of communicating out things out there at

00:16:30,900 --> 00:16:36,030
that time and he basically announced

00:16:33,390 --> 00:16:37,740
that you know the that that he wanted to

00:16:36,030 --> 00:16:40,080
start that project and you know some

00:16:37,740 --> 00:16:43,020
quotes from there you know where he said

00:16:40,080 --> 00:16:45,180
that I want to use that QT framework I

00:16:43,020 --> 00:16:45,540
want to use cute for it since a few

00:16:45,180 --> 00:16:47,250
weeks

00:16:45,540 --> 00:16:49,260
a really great new widget like we it's

00:16:47,250 --> 00:16:50,910
available free installs and price for

00:16:49,260 --> 00:17:03,000
free software development check it out

00:16:50,910 --> 00:17:06,060
at www.ge.com completely complete fully

00:17:03,000 --> 00:17:08,180
c++ widget library and it implements a

00:17:06,060 --> 00:17:11,240
slightly improved motif look and feel or

00:17:08,180 --> 00:17:15,240
switchable during startup Windows 95

00:17:11,240 --> 00:17:16,920
good stuff and you know he started that

00:17:15,240 --> 00:17:18,720
he managed to attract quite a lot of

00:17:16,920 --> 00:17:21,689
people especially in Germany at that

00:17:18,720 --> 00:17:24,079
point in time and they started working

00:17:21,689 --> 00:17:26,790
on it and you know half a year later

00:17:24,079 --> 00:17:29,610
they had the first version of KDE up and

00:17:26,790 --> 00:17:31,470
running a desktop for Linux fantastic

00:17:29,610 --> 00:17:34,590
and it was a actually a revolution in it

00:17:31,470 --> 00:17:36,540
in some aspects actually you know it

00:17:34,590 --> 00:17:38,580
wasn't a lot more rough on the edges and

00:17:36,540 --> 00:17:40,710
it's not as complete as maybe Windows 95

00:17:38,580 --> 00:17:42,530
was but it took started providing

00:17:40,710 --> 00:17:45,320
something you know it had a panel down

00:17:42,530 --> 00:17:48,680
they're something to launch graphical

00:17:45,320 --> 00:17:55,220
tasks control control center help

00:17:48,680 --> 00:17:57,860
browser it had a had had a browser file

00:17:55,220 --> 00:17:59,810
manager so the basics were there and it

00:17:57,860 --> 00:18:01,850
started picking up greatly and lots of

00:17:59,810 --> 00:18:05,540
lots of people started you know using it

00:18:01,850 --> 00:18:08,360
and extending it it's an open source

00:18:05,540 --> 00:18:10,760
community formed around it and if you

00:18:08,360 --> 00:18:13,340
look at it in hindsight you know this is

00:18:10,760 --> 00:18:15,050
probably why cute we really became took

00:18:13,340 --> 00:18:18,790
off became successful and why we're

00:18:15,050 --> 00:18:18,790
still here today using the framework

00:18:21,910 --> 00:18:27,830
1999 then you know that was a little bit

00:18:25,160 --> 00:18:30,710
after I became a user of cute which was

00:18:27,830 --> 00:18:33,650
in 98 approximately taught equally

00:18:30,710 --> 00:18:35,870
skewed version 2.0 and they found out

00:18:33,650 --> 00:18:37,820
who you know we did some larger changes

00:18:35,870 --> 00:18:42,800
their biggest one was we move over to

00:18:37,820 --> 00:18:44,390
Unicode we are 16-bit strings and that

00:18:42,800 --> 00:18:46,970
was all that we was required for Unicode

00:18:44,390 --> 00:18:50,660
at that point in time and they changed

00:18:46,970 --> 00:18:52,310
the license to open to GPL had a first

00:18:50,660 --> 00:18:54,470
version on embedded Linux running on the

00:18:52,310 --> 00:18:56,270
frame buffer and on the business side

00:18:54,470 --> 00:18:57,560
then you know Tata green you know

00:18:56,270 --> 00:19:00,200
received the first round of venture

00:18:57,560 --> 00:19:03,710
capital founding so within a year from

00:19:00,200 --> 00:19:05,600
99 you know end of 99 to end of 2000 the

00:19:03,710 --> 00:19:08,900
number of employees grew from around you

00:19:05,600 --> 00:19:10,850
know a handful to 150 so the large

00:19:08,900 --> 00:19:13,670
growth that's also when I started

00:19:10,850 --> 00:19:16,610
working for for tech at that point in

00:19:13,670 --> 00:19:19,820
time as a software engineer working

00:19:16,610 --> 00:19:22,580
mainly on internationalization Unicode

00:19:19,820 --> 00:19:24,620
support you know bi-directional text

00:19:22,580 --> 00:19:28,610
complex text layout that was my initial

00:19:24,620 --> 00:19:31,160
stuff where I worked a lot on and then

00:19:28,610 --> 00:19:33,470
God started ah you know actually moved

00:19:31,160 --> 00:19:40,850
to Norway for that job and got stuck

00:19:33,470 --> 00:19:43,310
there we sue soon also saw the need that

00:19:40,850 --> 00:19:46,370
damn yeah you could you know easily

00:19:43,310 --> 00:19:48,500
create user interfaces with C++ but you

00:19:46,370 --> 00:19:51,620
had to all stuck it together you know in

00:19:48,500 --> 00:19:54,440
and define in C++ how the look should be

00:19:51,620 --> 00:19:56,029
how how you arrange your widgets it you

00:19:54,440 --> 00:19:58,190
know whether that line is it isn't

00:19:56,029 --> 00:20:00,919
of the button on below to the left to

00:19:58,190 --> 00:20:02,419
the right using a mechanism that held in

00:20:00,919 --> 00:20:04,879
there that was flexible called layouts

00:20:02,419 --> 00:20:06,590
but you know many people said you know

00:20:04,879 --> 00:20:08,059
this is a tedious work I want to see it

00:20:06,590 --> 00:20:10,460
graphically and I don't want to have to

00:20:08,059 --> 00:20:12,950
be compiled before I can see it again so

00:20:10,460 --> 00:20:15,099
we worked on a first version of what we

00:20:12,950 --> 00:20:19,009
call the acute design of the UI designer

00:20:15,099 --> 00:20:20,929
to help you there and that's that's a

00:20:19,009 --> 00:20:22,399
probably slightly later screenshot of it

00:20:20,929 --> 00:20:23,719
but it's something where you can

00:20:22,399 --> 00:20:25,849
graphically put your users face

00:20:23,719 --> 00:20:31,059
interface together and then you know

00:20:25,849 --> 00:20:31,059
later on use that in your C++ projects

00:20:31,269 --> 00:20:39,379
moving forward in history kids we came

00:20:34,369 --> 00:20:42,710
out in 2001 did a bit of changes

00:20:39,379 --> 00:20:45,859
there in q1 and q2 our string class was

00:20:42,710 --> 00:20:47,539
explicitly shared found figured out that

00:20:45,859 --> 00:20:49,279
was a problem for many users with many

00:20:47,539 --> 00:20:51,589
subtle bugs came in because people

00:20:49,279 --> 00:20:53,509
started modifying that string and then

00:20:51,589 --> 00:20:55,940
you know it got modified in a completely

00:20:53,509 --> 00:20:58,070
different part of the part of the

00:20:55,940 --> 00:20:59,659
application as well so we moved over and

00:20:58,070 --> 00:21:02,029
said okay let's let's move to implicit

00:20:59,659 --> 00:21:05,089
sharing where we basically detached

00:21:02,029 --> 00:21:06,889
whenever the string gets modified we

00:21:05,089 --> 00:21:09,229
started using templates more you know

00:21:06,889 --> 00:21:11,179
the compilers were catching up to C++ 98

00:21:09,229 --> 00:21:13,909
we still had to deal with Visual Studio

00:21:11,179 --> 00:21:18,499
6 some of them you might remember that

00:21:13,909 --> 00:21:20,659
one which wasn't very good but we

00:21:18,499 --> 00:21:24,019
started introducing templates value

00:21:20,659 --> 00:21:26,450
based containers we moved and started

00:21:24,019 --> 00:21:29,119
having a system where we could up cast

00:21:26,450 --> 00:21:31,700
our object hierarchy to the concrete

00:21:29,119 --> 00:21:34,279
instance using key object cast because

00:21:31,700 --> 00:21:37,609
dinah our TTY was still in its infancy

00:21:34,279 --> 00:21:39,710
there and it wasn't wasn't working with

00:21:37,609 --> 00:21:42,649
I lived across for example shared

00:21:39,710 --> 00:21:43,879
library boundaries and we started

00:21:42,649 --> 00:21:46,779
working on the Mac and open-source

00:21:43,879 --> 00:21:46,779
titude for the Mac

00:21:51,049 --> 00:21:57,049
then you know let's fast forward a

00:21:54,289 --> 00:21:59,509
little bit in 2005 we moved over to cute

00:21:57,049 --> 00:22:02,119
for where we did a major overhaul of

00:21:59,509 --> 00:22:04,190
those template and tool classes many of

00:22:02,119 --> 00:22:06,980
them in q3 was still you know based on

00:22:04,190 --> 00:22:08,860
pointer so you had to anew every every

00:22:06,980 --> 00:22:12,350
object that you wanted to stuck stick in

00:22:08,860 --> 00:22:14,119
into a container leading to larger

00:22:12,350 --> 00:22:15,379
issues with memory management other

00:22:14,119 --> 00:22:20,419
things so we moved them to be

00:22:15,379 --> 00:22:24,440
value-based and we made them made the

00:22:20,419 --> 00:22:26,179
implicitly classes we added atomic

00:22:24,440 --> 00:22:27,769
ref counting to that I'll come back to

00:22:26,179 --> 00:22:30,320
that a little bit later and talk a bit

00:22:27,769 --> 00:22:31,850
about that one and as the final thing we

00:22:30,320 --> 00:22:33,619
open source then also the Windows

00:22:31,850 --> 00:22:35,659
version I was the last version we

00:22:33,619 --> 00:22:37,659
actually open sourced since then you

00:22:35,659 --> 00:22:40,369
know everything has been out in the open

00:22:37,659 --> 00:22:43,759
but you know we were for a long time as

00:22:40,369 --> 00:22:47,539
a small business you know growing we

00:22:43,759 --> 00:22:49,730
need to need to get revenue and not open

00:22:47,539 --> 00:22:52,070
sourcing Windows was for scene for us as

00:22:49,730 --> 00:22:55,009
a as an insurance that we would get you

00:22:52,070 --> 00:22:58,549
know the customers that we needed to

00:22:55,009 --> 00:23:00,859
survive yep

00:22:58,549 --> 00:23:02,059
things grew further you know we were had

00:23:00,859 --> 00:23:04,039
a lot of things going on in the

00:23:02,059 --> 00:23:07,129
open-source community with KD and others

00:23:04,039 --> 00:23:09,049
also you know some competing projects -

00:23:07,129 --> 00:23:12,669
hey the epoch popping up with genome and

00:23:09,049 --> 00:23:15,080
lots of things going back and forth but

00:23:12,669 --> 00:23:17,539
you know for us things move forward and

00:23:15,080 --> 00:23:19,309
then at some point you know we actually

00:23:17,539 --> 00:23:22,369
got to one of these tech giants

00:23:19,309 --> 00:23:26,230
interested in us Nokia I was looking at

00:23:22,369 --> 00:23:30,529
at us they needed a technology to unify

00:23:26,230 --> 00:23:32,749
I'm sorry to unify the different

00:23:30,529 --> 00:23:34,100
platforms and have a unified API for

00:23:32,749 --> 00:23:35,659
their developers they were thinking

00:23:34,100 --> 00:23:37,279
about okay we need to have an developer

00:23:35,659 --> 00:23:39,619
offering I mean this was still you know

00:23:37,279 --> 00:23:41,570
a little bit before the iPhone and those

00:23:39,619 --> 00:23:43,070
decisions were made but they saw that

00:23:41,570 --> 00:23:44,929
they needed a developer offering and

00:23:43,070 --> 00:23:46,850
then a unified API so that they couldn't

00:23:44,929 --> 00:23:48,950
you know move from where they were was

00:23:46,850 --> 00:23:50,869
say I was 40 and Symbian over to what

00:23:48,950 --> 00:23:53,029
was at that point in time the long-term

00:23:50,869 --> 00:23:56,749
strategy a Linux based stack called my

00:23:53,029 --> 00:23:58,190
mo amigo they did a huge investment that

00:23:56,749 --> 00:24:01,519
was something that really helped and

00:23:58,190 --> 00:24:03,139
pushed cute forward you know we were

00:24:01,519 --> 00:24:04,429
doing you know the cute quick UI

00:24:03,139 --> 00:24:07,610
technology for

00:24:04,429 --> 00:24:09,409
example as the first versions we had for

00:24:07,610 --> 00:24:10,820
the longest time you know they're all of

00:24:09,409 --> 00:24:12,830
you know they aren't the include we had

00:24:10,820 --> 00:24:16,009
wanted to do an IDE we said this is cool

00:24:12,830 --> 00:24:18,679
we want to do it you know management and

00:24:16,009 --> 00:24:20,600
politic always said ah maybe not you

00:24:18,679 --> 00:24:23,509
know there are other ideas out there why

00:24:20,600 --> 00:24:26,960
don't we use Eclipse that's Visual

00:24:23,509 --> 00:24:28,279
Studio but we were itching for it and we

00:24:26,960 --> 00:24:30,169
thought that this is bad because we

00:24:28,279 --> 00:24:32,330
don't have a good cross-platform IDE and

00:24:30,169 --> 00:24:36,409
the Eclipse was really not very usable

00:24:32,330 --> 00:24:38,210
for C++ so we wanted to do it but you

00:24:36,409 --> 00:24:41,119
know never really have the funding with

00:24:38,210 --> 00:24:43,490
Nokia we finally had that and we went in

00:24:41,119 --> 00:24:45,950
and you know pushed forward with QT

00:24:43,490 --> 00:24:49,580
creator we worked on a WebKit

00:24:45,950 --> 00:24:51,499
integration where we you know basically

00:24:49,580 --> 00:24:56,149
integrated the browser engine as one of

00:24:51,499 --> 00:24:57,619
the frameworks that we offer to people

00:24:56,149 --> 00:24:59,779
so people could you know basically

00:24:57,619 --> 00:25:05,029
instantiate the browser engine and use

00:24:59,779 --> 00:25:06,470
that within the application and Nokia

00:25:05,029 --> 00:25:09,379
did another thing they changed the

00:25:06,470 --> 00:25:12,820
open-source license from GPL to LGPL

00:25:09,379 --> 00:25:16,369
making it a much freer and also you know

00:25:12,820 --> 00:25:19,399
with that you know increasing its use

00:25:16,369 --> 00:25:23,320
probably tenfold so we've got a lot more

00:25:19,399 --> 00:25:26,960
people to use cute through those changes

00:25:23,320 --> 00:25:33,259
but unfortunately odd everything went as

00:25:26,960 --> 00:25:35,779
it was supposed to go you know 2011 we

00:25:33,259 --> 00:25:38,119
had a burning platform at least that's

00:25:35,779 --> 00:25:40,759
what I would CEO told us at that point

00:25:38,119 --> 00:25:42,559
in time you know we were just about

00:25:40,759 --> 00:25:45,230
getting ready you know it was a hard

00:25:42,559 --> 00:25:47,090
fight inside Nokia you know big you know

00:25:45,230 --> 00:25:48,950
you have a big ship a big huge company

00:25:47,090 --> 00:25:51,559
and you we were trying to you know bring

00:25:48,950 --> 00:25:53,509
cute in there as the framework for

00:25:51,559 --> 00:25:55,519
development in post in-house but also

00:25:53,509 --> 00:25:57,889
for third-party users we had things

00:25:55,519 --> 00:26:00,649
ready you know the Symbian was there

00:25:57,889 --> 00:26:05,149
using it we have apps going into into

00:26:00,649 --> 00:26:09,230
the Nokia App Store using using cute the

00:26:05,149 --> 00:26:11,360
n9 Mego device was almost out but you

00:26:09,230 --> 00:26:13,290
know management didn't didn't believe

00:26:11,360 --> 00:26:15,840
this could work out

00:26:13,290 --> 00:26:18,770
said we had a burning platform we needed

00:26:15,840 --> 00:26:22,170
to hop off it we did we hopped over to

00:26:18,770 --> 00:26:24,420
Windows Phone which means meant that

00:26:22,170 --> 00:26:26,460
you'd actually have no role in inside

00:26:24,420 --> 00:26:29,280
not here anymore at least you know not a

00:26:26,460 --> 00:26:33,000
big one a minor one so for us this was

00:26:29,280 --> 00:26:34,440
you know clearly a large setback and

00:26:33,000 --> 00:26:37,230
something that it took took a while to

00:26:34,440 --> 00:26:40,920
recover from but it led ultimately to

00:26:37,230 --> 00:26:44,130
the fact that then you know a year later

00:26:40,920 --> 00:26:46,980
in 2012 we actually separated ways with

00:26:44,130 --> 00:26:51,150
from Nokia and you know got bought up by

00:26:46,980 --> 00:26:52,740
a small Finnish company called DG at the

00:26:51,150 --> 00:26:54,900
same time we were then also working

00:26:52,740 --> 00:26:58,080
towards the current version of cute-cute

00:26:54,900 --> 00:27:01,620
5 we did larger changes again you know

00:26:58,080 --> 00:27:04,410
we we looked at you know how have we so

00:27:01,620 --> 00:27:06,540
far been doing platform int equations

00:27:04,410 --> 00:27:08,730
and our what we the one thing we learned

00:27:06,540 --> 00:27:10,470
in Nokia is doing that porting huge to a

00:27:08,730 --> 00:27:12,360
new operating system was extremely

00:27:10,470 --> 00:27:17,280
difficult we didn't have the right

00:27:12,360 --> 00:27:19,920
abstractions in place and you know that

00:27:17,280 --> 00:27:23,430
Symbian port used up a lot and a lot of

00:27:19,920 --> 00:27:25,620
manpower so we wanted to change that and

00:27:23,430 --> 00:27:27,690
we did a new abstraction underneath that

00:27:25,620 --> 00:27:31,290
makes it very easy to port cute actually

00:27:27,690 --> 00:27:33,840
to new to new architectures called the

00:27:31,290 --> 00:27:35,250
cute platform abstraction and that's the

00:27:33,840 --> 00:27:37,230
one that actually also then later on

00:27:35,250 --> 00:27:39,380
allowed it for us and made it relatively

00:27:37,230 --> 00:27:42,930
easy for us to then move over to and

00:27:39,380 --> 00:27:45,030
implement Android and iOS support or you

00:27:42,930 --> 00:27:50,640
know support for many different embedded

00:27:45,030 --> 00:27:52,380
operating systems we also had a lot of

00:27:50,640 --> 00:27:54,120
work on touch based user interfaces that

00:27:52,380 --> 00:27:55,920
started already during the Nokia times

00:27:54,120 --> 00:27:58,920
and we saw that you know we had a first

00:27:55,920 --> 00:28:00,770
version of our technologies there the

00:27:58,920 --> 00:28:03,150
need for that one came also in two

00:28:00,770 --> 00:28:06,270
different things where we said where we

00:28:03,150 --> 00:28:08,970
saw that you know widgets as what we had

00:28:06,270 --> 00:28:11,340
as UI technology so far we're very good

00:28:08,970 --> 00:28:13,470
but there were mostly limited to static

00:28:11,340 --> 00:28:15,090
user interfaces we try to put animations

00:28:13,470 --> 00:28:16,680
in there for example we had a main

00:28:15,090 --> 00:28:18,030
window framework where you have talked

00:28:16,680 --> 00:28:20,070
with us and these kind of things and we

00:28:18,030 --> 00:28:22,650
start try to make it animated so when

00:28:20,070 --> 00:28:23,970
you move a dock window to over and hover

00:28:22,650 --> 00:28:24,760
it over a certain place where you might

00:28:23,970 --> 00:28:27,130
want to drop it

00:28:24,760 --> 00:28:28,960
to dock into it would make space there

00:28:27,130 --> 00:28:32,920
and it would animate so the sea weight

00:28:28,960 --> 00:28:34,570
would drop it took a developer a year to

00:28:32,920 --> 00:28:36,040
get that implemented and was really

00:28:34,570 --> 00:28:37,930
really hard to encode to maintain

00:28:36,040 --> 00:28:39,430
afterwards so we thought about how can

00:28:37,930 --> 00:28:41,710
we do that differently because how users

00:28:39,430 --> 00:28:44,350
have the same need that led us to cute

00:28:41,710 --> 00:28:46,870
quick so we will move there we brought

00:28:44,350 --> 00:28:48,250
that forward we saw that we needed also

00:28:46,870 --> 00:28:50,590
here with cute five that we needed to

00:28:48,250 --> 00:28:52,120
bring that on top of an a GL scene graph

00:28:50,590 --> 00:28:53,380
to really get the best performance out

00:28:52,120 --> 00:28:55,180
of the hardware because you're doing

00:28:53,380 --> 00:28:58,630
animations you're doing lots of graphics

00:28:55,180 --> 00:29:00,250
it needs to perform people expect it to

00:28:58,630 --> 00:29:01,660
be fluid like on you know fluid

00:29:00,250 --> 00:29:04,900
animations like they were seeing on the

00:29:01,660 --> 00:29:07,870
iPhone and that's something we need to

00:29:04,900 --> 00:29:09,430
map do there and we started having a

00:29:07,870 --> 00:29:10,750
larger focus also on the embedded

00:29:09,430 --> 00:29:12,070
systems because that's where we were

00:29:10,750 --> 00:29:15,820
seeing that you know there was a lot of

00:29:12,070 --> 00:29:19,270
demand for solutions people want to do

00:29:15,820 --> 00:29:21,040
use you know C++ on embedded systems but

00:29:19,270 --> 00:29:22,720
there's no so there wasn't really any

00:29:21,040 --> 00:29:26,050
good solution to do you know user

00:29:22,720 --> 00:29:27,490
interfaces and during that time we also

00:29:26,050 --> 00:29:30,130
started you know opening up or

00:29:27,490 --> 00:29:32,740
development under open governance now

00:29:30,130 --> 00:29:34,140
from that time onwards you'd was being

00:29:32,740 --> 00:29:36,790
developed as an open source project

00:29:34,140 --> 00:29:38,860
before you know we were working in Thor

00:29:36,790 --> 00:29:40,720
tech we will we developed everything

00:29:38,860 --> 00:29:45,550
in-house and then we basically released

00:29:40,720 --> 00:29:47,380
the final versions as open source but I

00:29:45,550 --> 00:29:49,450
said I mean we moved out of from Nokia

00:29:47,380 --> 00:29:52,420
got acquired by a small company Finnish

00:29:49,450 --> 00:29:54,610
company called didya and were there for

00:29:52,420 --> 00:29:56,680
a couple of years until we last year

00:29:54,610 --> 00:29:58,690
split ways with didja

00:29:56,680 --> 00:30:00,820
and since then the kid company is a

00:29:58,690 --> 00:30:04,780
fully independent company listed listed

00:30:00,820 --> 00:30:08,730
on the Helsinki Stock Exchange and we're

00:30:04,780 --> 00:30:08,730
focusing fully now on cute as a product

00:30:10,020 --> 00:30:16,120
just now final slide on business just to

00:30:14,320 --> 00:30:20,560
give you an idea the kid company today

00:30:16,120 --> 00:30:23,500
is we have around 250 employees 150 of

00:30:20,560 --> 00:30:25,390
those technical have revenue of 32

00:30:23,500 --> 00:30:26,980
million euros and a long map you know

00:30:25,390 --> 00:30:30,550
cute has currently around 1 million

00:30:26,980 --> 00:30:36,400
active users so it's it's big it's quite

00:30:30,550 --> 00:30:37,690
a lot ok so so much for history so much

00:30:36,400 --> 00:30:38,590
for companies let's move over to

00:30:37,690 --> 00:30:41,320
something else

00:30:38,590 --> 00:30:44,350
and a little bit on the philosophy and

00:30:41,320 --> 00:30:46,240
and what how we are developing huge what

00:30:44,350 --> 00:30:50,830
with what we're doing there what's

00:30:46,240 --> 00:30:53,470
important to us first thing is we want

00:30:50,830 --> 00:30:55,120
to empower users with the technology we

00:30:53,470 --> 00:30:57,160
have and that goes back to the origin

00:30:55,120 --> 00:30:59,110
thing that I said you know what iris and

00:30:57,160 --> 00:31:02,080
who was vision was software development

00:30:59,110 --> 00:31:04,059
should be fun should be easy make a

00:31:02,080 --> 00:31:06,789
product that's as versatile and flexible

00:31:04,059 --> 00:31:09,580
as possible give developers the tools

00:31:06,789 --> 00:31:11,650
they need let them be in control make it

00:31:09,580 --> 00:31:13,570
easy to use cute you know have for

00:31:11,650 --> 00:31:16,210
example world class documentation so

00:31:13,570 --> 00:31:18,039
they can find everything but awesome

00:31:16,210 --> 00:31:19,450
try to make it so easy that they don't

00:31:18,039 --> 00:31:24,100
really need the documentation in the

00:31:19,450 --> 00:31:25,750
first place give people freedom you know

00:31:24,100 --> 00:31:28,480
with cute freedom to innovate you know

00:31:25,750 --> 00:31:30,010
extend cute do things on top of it you

00:31:28,480 --> 00:31:31,480
know integrate with other frameworks

00:31:30,010 --> 00:31:33,190
from the side you know we don't want to

00:31:31,480 --> 00:31:34,720
limit anybody how they do do the

00:31:33,190 --> 00:31:37,090
application how they do what they need

00:31:34,720 --> 00:31:38,590
to do you know when you if you want to

00:31:37,090 --> 00:31:41,500
pull in a third party like we you know

00:31:38,590 --> 00:31:44,320
do that so make it easy to integrate

00:31:41,500 --> 00:31:46,720
with other technology and also you know

00:31:44,320 --> 00:31:50,710
as a freedom don't attach any strings to

00:31:46,720 --> 00:31:51,940
our product use it as you like and from

00:31:50,710 --> 00:31:53,169
our point of view also the freedom

00:31:51,940 --> 00:31:55,750
nowadays it's also that we are

00:31:53,169 --> 00:31:57,130
independent listen you know most of the

00:31:55,750 --> 00:31:58,780
development is done through the cute

00:31:57,130 --> 00:32:00,730
company a small company we're

00:31:58,780 --> 00:32:04,840
independent we have no affiliation with

00:32:00,730 --> 00:32:07,539
any of the major tech giants meaning you

00:32:04,840 --> 00:32:12,580
know we our agenda is really helping our

00:32:07,539 --> 00:32:14,440
users and nothing else there continue

00:32:12,580 --> 00:32:16,059
with open source has said we have always

00:32:14,440 --> 00:32:19,030
been open source and we'll continue

00:32:16,059 --> 00:32:23,140
doing that all our development is in the

00:32:19,030 --> 00:32:25,480
open and you know the development is

00:32:23,140 --> 00:32:27,909
done and on a cute on cute project it's

00:32:25,480 --> 00:32:29,650
a meritocracy so anybody who has an

00:32:27,909 --> 00:32:31,210
interest and who wants to can gain

00:32:29,650 --> 00:32:34,059
influence there he can become evolve

00:32:31,210 --> 00:32:36,610
involved you know gain influence maybe

00:32:34,059 --> 00:32:38,409
also become a you know an approver for

00:32:36,610 --> 00:32:39,909
changes can we start reviewing other

00:32:38,409 --> 00:32:44,169
people's changes we can become a

00:32:39,909 --> 00:32:46,750
maintainer for a certain area so that's

00:32:44,169 --> 00:32:48,309
very good it also allows our users and

00:32:46,750 --> 00:32:50,470
their customs to see exactly what we're

00:32:48,309 --> 00:32:51,549
developing you know we're not hiding

00:32:50,470 --> 00:32:53,860
anything it's you

00:32:51,549 --> 00:32:55,749
see you can follow every change you can

00:32:53,860 --> 00:32:57,279
you know get blame on it you know what's

00:32:55,749 --> 00:32:59,200
happened you know who's responsible you

00:32:57,279 --> 00:33:00,970
can ask contact the developer and see

00:32:59,200 --> 00:33:02,409
you know why did you do that I'm having

00:33:00,970 --> 00:33:07,989
a bad problem with this piece of code

00:33:02,409 --> 00:33:10,710
all of that is possible yeah you can

00:33:07,989 --> 00:33:13,480
feel a little bit of a statistics on

00:33:10,710 --> 00:33:15,700
uncute project and the contributions so

00:33:13,480 --> 00:33:17,830
you see that you know the percentage of

00:33:15,700 --> 00:33:20,080
conti commits and where they come from

00:33:17,830 --> 00:33:21,789
from which comments so you see that the

00:33:20,080 --> 00:33:23,980
majority is still coming from the cute

00:33:21,789 --> 00:33:27,129
company but then there's other companies

00:33:23,980 --> 00:33:29,049
and and you have a large set going up

00:33:27,129 --> 00:33:33,369
then of smaller people individuals

00:33:29,049 --> 00:33:35,859
contributing this also has changed over

00:33:33,369 --> 00:33:37,450
time you know in some some years ago we

00:33:35,859 --> 00:33:39,669
had you know a lot of contributions from

00:33:37,450 --> 00:33:41,470
blackberry that those have a little bit

00:33:39,669 --> 00:33:44,739
died down because they don't have a

00:33:41,470 --> 00:33:47,980
mobile phone anymore on a mobile OS of

00:33:44,739 --> 00:33:49,929
their own so things are changing they're

00:33:47,980 --> 00:33:52,239
not new people are coming in but it's

00:33:49,929 --> 00:33:53,590
going forward and it allows people to

00:33:52,239 --> 00:33:58,239
really you know contribute their own

00:33:53,590 --> 00:33:59,769
things cross-platform as I said is also

00:33:58,239 --> 00:34:02,019
extremely important and it'll stay that

00:33:59,769 --> 00:34:04,119
we want to be available on all major

00:34:02,019 --> 00:34:06,580
voices and we want to make sure that

00:34:04,119 --> 00:34:08,919
when the old operating systems change

00:34:06,580 --> 00:34:11,079
that you know our users don't have to

00:34:08,919 --> 00:34:13,690
worry too much about that we're taking

00:34:11,079 --> 00:34:19,059
we are taking that work of porting cute

00:34:13,690 --> 00:34:21,399
to a new operating system for you all so

00:34:19,059 --> 00:34:22,929
cute is a horizontal framework and

00:34:21,399 --> 00:34:24,159
offering and that works you know across

00:34:22,929 --> 00:34:26,049
different things I said we have an

00:34:24,159 --> 00:34:27,849
embedded version so working from very

00:34:26,049 --> 00:34:30,879
small embedded devices like you know

00:34:27,849 --> 00:34:36,369
this car instrument cluster and

00:34:30,879 --> 00:34:38,049
implemented on imx6 you know to large

00:34:36,369 --> 00:34:42,700
desktop systems what you see here is

00:34:38,049 --> 00:34:44,290
autodesk maya they're using cute 4 for

00:34:42,700 --> 00:34:45,909
the tooling they actually even have a

00:34:44,290 --> 00:34:47,409
developer community of their own around

00:34:45,909 --> 00:34:49,270
that that also uses cute so they

00:34:47,409 --> 00:34:51,250
exposing plug-in interfaces where people

00:34:49,270 --> 00:34:53,889
can go in queue to write their own

00:34:51,250 --> 00:34:57,129
plugins to Maya and and plug them into

00:34:53,889 --> 00:34:59,440
into their framework and you know we

00:34:57,129 --> 00:35:00,730
have also large distributed systems like

00:34:59,440 --> 00:35:02,260
you know some of the European air

00:35:00,730 --> 00:35:04,350
traffic control systems that are also

00:35:02,260 --> 00:35:07,350
using heute

00:35:04,350 --> 00:35:10,650
so whenever you fly fly to Europe think

00:35:07,350 --> 00:35:15,960
about that I hope you're not getting

00:35:10,650 --> 00:35:18,390
scared about with API design concepts

00:35:15,960 --> 00:35:20,100
what are we doing you know what's

00:35:18,390 --> 00:35:23,070
important for us when we design our API

00:35:20,100 --> 00:35:24,120
is the things that's most important for

00:35:23,070 --> 00:35:28,020
us and we have a slightly different

00:35:24,120 --> 00:35:29,370
focus probably than than what you see in

00:35:28,020 --> 00:35:32,370
the standards committee and with a

00:35:29,370 --> 00:35:34,110
standard like C++ standard library you

00:35:32,370 --> 00:35:35,940
know for us we see that code is written

00:35:34,110 --> 00:35:37,710
once but it's red and then it modified

00:35:35,940 --> 00:35:39,690
many times it goes back a little bit to

00:35:37,710 --> 00:35:41,160
the you know programming versus

00:35:39,690 --> 00:35:44,520
engineering that you got from titles on

00:35:41,160 --> 00:35:45,990
on Tuesday you know people are not most

00:35:44,520 --> 00:35:47,550
of our users are not doing throwaway

00:35:45,990 --> 00:35:50,910
code they have a code they need to

00:35:47,550 --> 00:35:52,950
maintain that over many years and read

00:35:50,910 --> 00:35:54,950
it again and again and modify it again

00:35:52,950 --> 00:35:57,330
and again how can we make that easy

00:35:54,950 --> 00:35:59,070
because the maintenance is the larger

00:35:57,330 --> 00:36:01,980
part of work it's more work than the

00:35:59,070 --> 00:36:02,520
initial development and we all know that

00:36:01,980 --> 00:36:06,210
we're lazy

00:36:02,520 --> 00:36:12,060
we rarely comment our code so how can we

00:36:06,210 --> 00:36:13,470
make code self-documenting so what we

00:36:12,060 --> 00:36:15,960
want really is api's that lead to

00:36:13,470 --> 00:36:19,890
readable and maintainable code it should

00:36:15,960 --> 00:36:21,800
be intuitive and self documenting that

00:36:19,890 --> 00:36:24,690
means we need to have descriptive naming

00:36:21,800 --> 00:36:27,540
we are going and if we can for

00:36:24,690 --> 00:36:29,880
property-based api's we want to hide as

00:36:27,540 --> 00:36:31,410
much complexity as possible in the cute

00:36:29,880 --> 00:36:34,500
implementation don't expose it to our

00:36:31,410 --> 00:36:40,890
users and we want to remove the need for

00:36:34,500 --> 00:36:42,780
boilerplate code as much as possible the

00:36:40,890 --> 00:36:46,140
API should also be easy to learn and to

00:36:42,780 --> 00:36:48,510
use you know we want to we're doing

00:36:46,140 --> 00:36:51,390
trying to implement or always one

00:36:48,510 --> 00:36:52,980
concept per class or per method that API

00:36:51,390 --> 00:36:55,200
should do one thing and should do that

00:36:52,980 --> 00:36:56,820
well I can tell you we're not you know

00:36:55,200 --> 00:36:58,200
perfect with that we have our own dark

00:36:56,820 --> 00:37:00,000
coolness where you know we're violating

00:36:58,200 --> 00:37:02,850
and every one of these principles I'm

00:37:00,000 --> 00:37:06,570
naming here but at least were trying and

00:37:02,850 --> 00:37:08,190
and and I think for most for the most

00:37:06,570 --> 00:37:09,410
used parts of cute we're actually pretty

00:37:08,190 --> 00:37:12,090
good at that

00:37:09,410 --> 00:37:13,530
going with consistent naming you know

00:37:12,090 --> 00:37:17,010
same name for the same concept

00:37:13,530 --> 00:37:17,519
throughout all of our all of cute like a

00:37:17,010 --> 00:37:19,619
static

00:37:17,519 --> 00:37:21,529
we have for example classic the cue

00:37:19,619 --> 00:37:24,029
string class and the qubit away class

00:37:21,529 --> 00:37:26,159
they're doing similar things one is an 8

00:37:24,029 --> 00:37:28,919
byte 8-bit byte away Hugh's doing is a

00:37:26,159 --> 00:37:30,479
Unicode string but still I mean you know

00:37:28,919 --> 00:37:32,669
you still have things where you want to

00:37:30,479 --> 00:37:34,289
find sub strings in there do other

00:37:32,669 --> 00:37:35,699
things you want to maybe upper case

00:37:34,289 --> 00:37:37,289
lower case things and these kind of

00:37:35,699 --> 00:37:39,329
things so we name those methods the same

00:37:37,289 --> 00:37:41,459
way and we do that throughout all of

00:37:39,329 --> 00:37:45,119
cute and try to be as consistent as we

00:37:41,459 --> 00:37:46,799
can with that aiming and striving for

00:37:45,119 --> 00:37:50,130
clears and simple semantics that don't

00:37:46,799 --> 00:37:51,419
surprise anybody and you know trying to

00:37:50,130 --> 00:37:53,039
make it so that you can do a lot with

00:37:51,419 --> 00:37:55,469
the class without having to learn a lot

00:37:53,039 --> 00:37:57,779
ideally you really have to look up the

00:37:55,469 --> 00:37:59,069
documentation or learn things there you

00:37:57,779 --> 00:38:00,689
can just look at you know the code

00:37:59,069 --> 00:38:05,369
completion okay these are the methods I

00:38:00,689 --> 00:38:08,399
can use go with that how to make them

00:38:05,369 --> 00:38:10,079
hard to misuse you know our defaults

00:38:08,399 --> 00:38:12,569
should match the intuitively expected

00:38:10,079 --> 00:38:15,689
behavior from our users don't surprise

00:38:12,569 --> 00:38:18,049
them so that makes it an easy to write

00:38:15,689 --> 00:38:20,459
nach and natural to write correct code

00:38:18,049 --> 00:38:23,849
and it does encourage good good

00:38:20,459 --> 00:38:26,189
programming practices we also don't want

00:38:23,849 --> 00:38:27,869
to fail if methods like that are should

00:38:26,189 --> 00:38:30,089
be independent of each other are called

00:38:27,869 --> 00:38:33,539
in different order they shouldn't have

00:38:30,089 --> 00:38:35,249
subtle or hidden side effects we want to

00:38:33,539 --> 00:38:39,179
avoid implicit conversions we've seen

00:38:35,249 --> 00:38:42,359
that as a big problem so you know and we

00:38:39,179 --> 00:38:46,229
try to not do any magic stuff we've been

00:38:42,359 --> 00:38:47,999
doing in the past ourselves and of

00:38:46,229 --> 00:38:51,439
course not don't fail three chords later

00:38:47,999 --> 00:38:51,439
when when you do something that's wrong

00:38:52,009 --> 00:38:57,899
cute api's are supposed to be flexible

00:38:54,869 --> 00:39:00,630
and cover the common use case we have a

00:38:57,899 --> 00:39:02,849
90/10 rule that we say well you know the

00:39:00,630 --> 00:39:04,439
90% use case is what you know 90% of the

00:39:02,849 --> 00:39:07,259
users want to do with that class and

00:39:04,439 --> 00:39:09,809
that should be as easy to implement as

00:39:07,259 --> 00:39:11,959
possible using the using the class or

00:39:09,809 --> 00:39:14,249
the set of classes that we provide and

00:39:11,959 --> 00:39:16,289
then should be extensible so the

00:39:14,249 --> 00:39:18,630
remaining 10% of the use cases which go

00:39:16,289 --> 00:39:21,029
beyond that they have to be possible

00:39:18,630 --> 00:39:27,810
still but maybe you know they require a

00:39:21,029 --> 00:39:30,190
little bit more work performance

00:39:27,810 --> 00:39:34,300
this is one thing where we deviate also

00:39:30,190 --> 00:39:35,950
from from what what you know from from

00:39:34,300 --> 00:39:38,500
the standard driveways I mean you know

00:39:35,950 --> 00:39:41,020
one thing you know the comity and then

00:39:38,500 --> 00:39:43,270
the C++ standards are very agreeing is

00:39:41,020 --> 00:39:46,630
you don't pay for what you don't use

00:39:43,270 --> 00:39:49,420
right we're deviating a little bit from

00:39:46,630 --> 00:39:50,710
that we say we want of course we want to

00:39:49,420 --> 00:39:52,200
ensure as good at performance as

00:39:50,710 --> 00:39:55,210
possible on all parts of the framework

00:39:52,200 --> 00:39:58,030
but we also say we don't want to

00:39:55,210 --> 00:39:59,370
complicate that if default API is for

00:39:58,030 --> 00:40:01,960
performance reasons

00:39:59,370 --> 00:40:04,150
let's readable code implicit leads to

00:40:01,960 --> 00:40:07,420
more bugs it leads to longer development

00:40:04,150 --> 00:40:09,250
cycles longer you know it takes longer

00:40:07,420 --> 00:40:10,720
to get your product to market and most

00:40:09,250 --> 00:40:12,010
of our customers actually have time

00:40:10,720 --> 00:40:14,440
pressure they need to get that product

00:40:12,010 --> 00:40:17,100
out they have limited resources so they

00:40:14,440 --> 00:40:22,660
want to get the product to market fast

00:40:17,100 --> 00:40:24,640
and as you all know 95% of your codebase

00:40:22,660 --> 00:40:27,490
is not not necessarily performance

00:40:24,640 --> 00:40:29,470
sensitive so if it's you know a couple

00:40:27,490 --> 00:40:32,500
of percent slower it doesn't really

00:40:29,470 --> 00:40:34,900
matter at all and we're seeing that

00:40:32,500 --> 00:40:37,240
users will use a complex API often the

00:40:34,900 --> 00:40:39,370
wrong way so a simpler API that's

00:40:37,240 --> 00:40:41,890
actually on the user side often lead to

00:40:39,370 --> 00:40:43,570
a more performant code even though they

00:40:41,890 --> 00:40:45,790
could do it even better if they have

00:40:43,570 --> 00:40:47,380
become more complex API but then they

00:40:45,790 --> 00:40:50,440
would probably use it wrong and it

00:40:47,380 --> 00:40:52,330
wouldn't work anyway but we do as much

00:40:50,440 --> 00:40:55,180
as possible of course go the extra mile

00:40:52,330 --> 00:40:58,180
to create api's that both as fast and as

00:40:55,180 --> 00:41:00,670
simple as possible and where we require

00:40:58,180 --> 00:41:04,870
you know offer low level in excess to

00:41:00,670 --> 00:41:06,730
optimize critical paths but we want to

00:41:04,870 --> 00:41:08,590
really keep it simple as I said you know

00:41:06,730 --> 00:41:12,730
and make it easy for us so for new and

00:41:08,590 --> 00:41:16,630
intermediate developers C++ has a very

00:41:12,730 --> 00:41:18,880
steep learning curve and makes that

00:41:16,630 --> 00:41:21,730
makes it often a little bit hard to get

00:41:18,880 --> 00:41:23,260
started for new people we know

00:41:21,730 --> 00:41:24,940
especially you know if you have a

00:41:23,260 --> 00:41:27,550
student coming from university he's

00:41:24,940 --> 00:41:29,770
worked with Java you can bet on that

00:41:27,550 --> 00:41:31,990
they will for example pass objects by

00:41:29,770 --> 00:41:36,160
values to functions because that's what

00:41:31,990 --> 00:41:38,680
you do and we're seeing that a lot of

00:41:36,160 --> 00:41:40,540
the projects really on don't only have

00:41:38,680 --> 00:41:41,260
to prosper schools if they're lucky they

00:41:40,540 --> 00:41:43,839
have one

00:41:41,260 --> 00:41:46,000
who really knows C++ inside-out and can

00:41:43,839 --> 00:41:46,770
help with these things often they don't

00:41:46,000 --> 00:41:50,589
have anybody

00:41:46,770 --> 00:41:52,119
so C++ is complex but you know most of

00:41:50,589 --> 00:41:55,630
the complexity is actually not required

00:41:52,119 --> 00:41:57,010
it's only rarely required for people you

00:41:55,630 --> 00:41:59,410
know you would rarely see an application

00:41:57,010 --> 00:42:02,230
developer fiddling with template

00:41:59,410 --> 00:42:06,070
metaprogramming usually doesn't happen

00:42:02,230 --> 00:42:08,200
they will shy away from that and with

00:42:06,070 --> 00:42:15,070
that you can make 99% of the code

00:42:08,200 --> 00:42:16,570
self-explaining and easy to write the

00:42:15,070 --> 00:42:18,339
other thing is that code as I said also

00:42:16,570 --> 00:42:20,380
lives often lives a lot longer than

00:42:18,339 --> 00:42:21,400
originally planned let's code that was

00:42:20,380 --> 00:42:22,900
written for these kind of machines

00:42:21,400 --> 00:42:25,170
that's still running you know in

00:42:22,900 --> 00:42:27,700
business critical parts of systems today

00:42:25,170 --> 00:42:29,770
usually using an emulator of the old

00:42:27,700 --> 00:42:32,230
machines but it's still running and I've

00:42:29,770 --> 00:42:35,140
seen that myself when I was doing my PhD

00:42:32,230 --> 00:42:37,540
thesis you know I was working action

00:42:35,140 --> 00:42:40,270
physics at an at a facility in

00:42:37,540 --> 00:42:41,710
Heidelberg was an accelerator and the

00:42:40,270 --> 00:42:45,700
controlling software was written for

00:42:41,710 --> 00:42:50,800
pdp-11 you know 1970s type of computer

00:42:45,700 --> 00:42:53,170
and yeah in 99 when I did my did that

00:42:50,800 --> 00:42:55,240
one you know it was that was 25 years

00:42:53,170 --> 00:42:58,420
later it was still running that and they

00:42:55,240 --> 00:43:00,430
had they had problems because that

00:42:58,420 --> 00:43:02,710
machine broke down so they needed to put

00:43:00,430 --> 00:43:04,300
it onto an emulator I was running way

00:43:02,710 --> 00:43:05,829
too fast because it was depending on

00:43:04,300 --> 00:43:07,329
timing loops and they had to do lots all

00:43:05,829 --> 00:43:10,000
sorts of crazy things to get that

00:43:07,329 --> 00:43:12,130
working so the software is often running

00:43:10,000 --> 00:43:14,260
very long and we need to make sure that

00:43:12,130 --> 00:43:16,960
people you know can live with that they

00:43:14,260 --> 00:43:20,589
can bring the software to the next you

00:43:16,960 --> 00:43:22,900
know into the next decade and we know

00:43:20,589 --> 00:43:26,230
that computers are changing you know 95

00:43:22,900 --> 00:43:29,380
5 you had desktop computers that was the

00:43:26,230 --> 00:43:31,510
main thing you had some workstations and

00:43:29,380 --> 00:43:34,300
you had high-end things nowadays you

00:43:31,510 --> 00:43:36,310
know all of us we have a we have a you

00:43:34,300 --> 00:43:41,170
know much more powerful computer just in

00:43:36,310 --> 00:43:43,300
a pocket and people are want to you know

00:43:41,170 --> 00:43:45,250
develop for those computers for mobile

00:43:43,300 --> 00:43:49,030
devices and for lots of the embedded

00:43:45,250 --> 00:43:51,310
devices so for us it's important that we

00:43:49,030 --> 00:43:54,910
isolate our users from those platform

00:43:51,310 --> 00:43:55,340
changes and we do that by bringing you

00:43:54,910 --> 00:43:57,050
to new

00:43:55,340 --> 00:44:01,130
but also provide by providing you know

00:43:57,050 --> 00:44:02,330
stable api's you know we are striving to

00:44:01,130 --> 00:44:05,330
have you know source and binary

00:44:02,330 --> 00:44:08,060
compatibility you know within major

00:44:05,330 --> 00:44:10,880
versions and from one major version to

00:44:08,060 --> 00:44:12,410
the next we do need that from time to

00:44:10,880 --> 00:44:14,210
time every five to seven years we've

00:44:12,410 --> 00:44:19,130
been moving from one major version to

00:44:14,210 --> 00:44:21,260
the next one we need to do that to keep

00:44:19,130 --> 00:44:24,410
you the life to take new concepts and to

00:44:21,260 --> 00:44:25,940
use and to clean up old things that

00:44:24,410 --> 00:44:28,250
actually don't make sense anymore

00:44:25,940 --> 00:44:30,230
so but we still always need to make sure

00:44:28,250 --> 00:44:32,330
that we have a good path for users to

00:44:30,230 --> 00:44:35,360
move with us forward and minimize the

00:44:32,330 --> 00:44:37,610
API breakage is there a lot of that can

00:44:35,360 --> 00:44:39,860
also be avoided if we'd from the get-go

00:44:37,610 --> 00:44:43,990
to do a lot of work to make the api's as

00:44:39,860 --> 00:44:46,040
good as we possibly can okay

00:44:43,990 --> 00:44:48,140
let's have a look at the implementation

00:44:46,040 --> 00:44:50,480
what are we doing there well clear

00:44:48,140 --> 00:44:53,930
naming is once we don't know don't use

00:44:50,480 --> 00:44:56,270
any abbreviations for function names we

00:44:53,930 --> 00:44:58,160
prefer typing them out you know your

00:44:56,270 --> 00:44:59,660
code editor can help you and then offer

00:44:58,160 --> 00:45:02,870
you the completion so you don't have to

00:44:59,660 --> 00:45:04,610
type at all and it leads to much more

00:45:02,870 --> 00:45:05,720
readable code afterwards which makes it

00:45:04,610 --> 00:45:08,000
easier to maintain

00:45:05,720 --> 00:45:10,850
no boolean arguments for example if we

00:45:08,000 --> 00:45:12,380
use enums instead wherever we can and we

00:45:10,850 --> 00:45:14,210
make sure that each method method does

00:45:12,380 --> 00:45:17,030
one thing but does that one well well

00:45:14,210 --> 00:45:19,960
and so so Ginola actually an example of

00:45:17,030 --> 00:45:22,520
one thing that we had wrong in in cute 3

00:45:19,960 --> 00:45:27,560
we had a fine method in in our cue

00:45:22,520 --> 00:45:29,420
string class now it's you know who of

00:45:27,560 --> 00:45:31,840
you has an idea what the false faults

00:45:29,420 --> 00:45:31,840
there means

00:45:32,680 --> 00:45:38,630
okay sensitivity is but it's not obvious

00:45:35,710 --> 00:45:40,880
who of you you know and is it obvious

00:45:38,630 --> 00:45:42,830
what the method returns not quite nice

00:45:40,880 --> 00:45:44,870
it doesn't between an iterator doesn't

00:45:42,830 --> 00:45:46,910
return an index into the string doesn't

00:45:44,870 --> 00:45:50,240
return actually the found string you

00:45:46,910 --> 00:45:52,130
don't know have to look up the if you

00:45:50,240 --> 00:45:54,320
look it up and you look up that the

00:45:52,130 --> 00:45:55,880
declaration you'll find out that you'll

00:45:54,320 --> 00:45:58,700
find it returns an integer so probably

00:45:55,880 --> 00:46:01,400
an index and the bool is the case

00:45:58,700 --> 00:46:05,380
sensitivity in cute four we change that

00:46:01,400 --> 00:46:08,180
we said no this is not a good idea we

00:46:05,380 --> 00:46:08,990
want an API that's intuitively readable

00:46:08,180 --> 00:46:10,820
when everybody

00:46:08,990 --> 00:46:13,520
we'd start for the first time even if he

00:46:10,820 --> 00:46:15,500
doesn't know acute knows what it does so

00:46:13,520 --> 00:46:17,600
we changed the API to index off so you

00:46:15,500 --> 00:46:20,660
know it returns an index or inside the

00:46:17,600 --> 00:46:22,670
string and we change the boolean fact to

00:46:20,660 --> 00:46:26,360
be an enum case insensitive or case

00:46:22,670 --> 00:46:28,310
sensitive much easier and suddenly the

00:46:26,360 --> 00:46:30,560
code becomes readable and you don't need

00:46:28,310 --> 00:46:34,310
to look this one up anymore to know what

00:46:30,560 --> 00:46:37,280
exactly is going on we also moved over

00:46:34,310 --> 00:46:38,810
to more property based API and we're

00:46:37,280 --> 00:46:41,170
doing that especially for our high-level

00:46:38,810 --> 00:46:43,700
graphical objects wherever possible

00:46:41,170 --> 00:46:46,369
because it's a very intuitive model and

00:46:43,700 --> 00:46:48,950
you know you don't enforce any specific

00:46:46,369 --> 00:46:50,810
initialization order you have defined

00:46:48,950 --> 00:46:52,460
default values you can preview those

00:46:50,810 --> 00:46:55,100
properties and they're orthogonal to

00:46:52,460 --> 00:46:59,210
each other usually I'll see another

00:46:55,100 --> 00:47:01,820
example a bad one from q3 instantiate

00:46:59,210 --> 00:47:04,400
excuse slider basically a GUI control to

00:47:01,820 --> 00:47:06,650
slide you know between two values now

00:47:04,400 --> 00:47:08,360
now I'd be surprised if anybody really

00:47:06,650 --> 00:47:10,940
news out of their head what all of those

00:47:08,360 --> 00:47:16,250
values all of those parameters mean I

00:47:10,940 --> 00:47:19,210
don't it's also that we changed in and

00:47:16,250 --> 00:47:22,400
in q4 and q5 this is how it looks like

00:47:19,210 --> 00:47:24,020
we say we create a new slider okay but

00:47:22,400 --> 00:47:25,310
cute vertical we can put that into the

00:47:24,020 --> 00:47:27,560
constructor because it's easy to

00:47:25,310 --> 00:47:28,940
understand we setting the range we're

00:47:27,560 --> 00:47:30,230
setting about the current value and

00:47:28,940 --> 00:47:32,570
we're setting an object name and

00:47:30,230 --> 00:47:35,240
suddenly the code becomes readable and

00:47:32,570 --> 00:47:37,130
anybody who comes in and you know has to

00:47:35,240 --> 00:47:39,830
go in to fix something in that code base

00:47:37,130 --> 00:47:43,640
season sees it for the first time can

00:47:39,830 --> 00:47:46,480
actually work with that one and knows

00:47:43,640 --> 00:47:48,950
what it does without having to look up

00:47:46,480 --> 00:47:51,020
documentation or even if you look up the

00:47:48,950 --> 00:47:52,820
documentation of that slider constructor

00:47:51,020 --> 00:47:58,160
with five six arguments you still have

00:47:52,820 --> 00:48:01,190
to count to see which one does what your

00:47:58,160 --> 00:48:02,840
object the base for most of our more

00:48:01,190 --> 00:48:04,760
complex acute classes I mean this one's

00:48:02,840 --> 00:48:08,080
actually also interesting it's pointer

00:48:04,760 --> 00:48:12,770
based so you create them on the heap

00:48:08,080 --> 00:48:13,590
they're designed for subclassing you

00:48:12,770 --> 00:48:15,460
can't copy them

00:48:13,590 --> 00:48:17,680
[Music]

00:48:15,460 --> 00:48:18,790
and we have a and that was something

00:48:17,680 --> 00:48:20,559
that was introduced in the very

00:48:18,790 --> 00:48:22,359
beginning already with cute we have a

00:48:20,559 --> 00:48:24,040
memory management where we use a

00:48:22,359 --> 00:48:26,829
parent-child relationship and that Maps

00:48:24,040 --> 00:48:29,109
very well to graphical stuff now you

00:48:26,829 --> 00:48:30,760
have a widget on the screen and inside

00:48:29,109 --> 00:48:33,160
that you place other widgets like you

00:48:30,760 --> 00:48:35,920
know a button and line at it and other

00:48:33,160 --> 00:48:37,660
things and usually you know when you

00:48:35,920 --> 00:48:39,760
when you want to get rid of that whole

00:48:37,660 --> 00:48:41,650
you know widget again you do you just

00:48:39,760 --> 00:48:43,540
want to delete the outermost outermost

00:48:41,650 --> 00:48:45,849
one and everything else is supposed to

00:48:43,540 --> 00:48:48,520
go away with it and that's something

00:48:45,849 --> 00:48:50,260
that we did there you can't have

00:48:48,520 --> 00:48:52,059
circular references so it makes it for a

00:48:50,260 --> 00:48:54,430
very simple memory management model and

00:48:52,059 --> 00:48:56,140
that was even before you know we had

00:48:54,430 --> 00:48:59,619
things like smart pointers or anything

00:48:56,140 --> 00:49:02,710
like that in C++ we have signals and

00:48:59,619 --> 00:49:07,240
slots in there really important for

00:49:02,710 --> 00:49:08,950
encapsulating those objects make them

00:49:07,240 --> 00:49:10,809
more independent and loosely coupled so

00:49:08,950 --> 00:49:12,819
you can connect you know a signal from

00:49:10,809 --> 00:49:15,520
one object to any slot from another

00:49:12,819 --> 00:49:16,990
object and you you know the slot will

00:49:15,520 --> 00:49:22,119
get called whenever that signal gets

00:49:16,990 --> 00:49:24,010
triggered properties and support for

00:49:22,119 --> 00:49:25,599
runtime introspections are other things

00:49:24,010 --> 00:49:26,980
that we added there and we because we

00:49:25,599 --> 00:49:29,380
needed them for many different things

00:49:26,980 --> 00:49:31,359
and they follow fell out like from

00:49:29,380 --> 00:49:35,920
themselves out of the the Archaea

00:49:31,359 --> 00:49:38,920
support for signals and slots asset

00:49:35,920 --> 00:49:40,630
signals of slots facilitate coupling you

00:49:38,920 --> 00:49:42,369
don't it's one of those places which

00:49:40,630 --> 00:49:45,880
removes a lot of glue code that you used

00:49:42,369 --> 00:49:48,089
to have otherwise the types a you know

00:49:45,880 --> 00:49:50,589
the you know if one object gets deleted

00:49:48,089 --> 00:49:52,420
connections get disconnected so it's

00:49:50,589 --> 00:49:54,339
really safe and and something that we

00:49:52,420 --> 00:49:56,589
you know was really first deployed in

00:49:54,339 --> 00:49:58,240
cute and know that there are quite a few

00:49:56,589 --> 00:50:00,780
other frameworks now to do the same

00:49:58,240 --> 00:50:03,670
thing that's boost signals for example

00:50:00,780 --> 00:50:07,059
mmm but one of the things that we still

00:50:03,670 --> 00:50:10,390
have and is that they're also sled safe

00:50:07,059 --> 00:50:12,430
and they work across threads so what you

00:50:10,390 --> 00:50:13,780
can do is you can connect objects from

00:50:12,430 --> 00:50:16,720
different threads which is that with

00:50:13,780 --> 00:50:18,160
each other and you know be inside

00:50:16,720 --> 00:50:20,680
threads you'll have a direct connection

00:50:18,160 --> 00:50:23,170
usually meaning a direct function call

00:50:20,680 --> 00:50:25,059
between threads you know will just post

00:50:23,170 --> 00:50:27,190
the thing over you over to the other

00:50:25,059 --> 00:50:28,210
thread and it's more like a message

00:50:27,190 --> 00:50:30,160
passing but it makes it

00:50:28,210 --> 00:50:33,150
it makes it for a very easy interstate

00:50:30,160 --> 00:50:36,430
communication mechanism and the safe one

00:50:33,150 --> 00:50:37,780
here's an example you might have seen

00:50:36,430 --> 00:50:39,460
that one year you know we have the Q

00:50:37,780 --> 00:50:42,160
object macro that's the one thing we

00:50:39,460 --> 00:50:44,710
need in there to implement our magic

00:50:42,160 --> 00:50:48,040
it's also what you know identifies that

00:50:44,710 --> 00:50:49,480
Q object for the meta object compiler

00:50:48,040 --> 00:50:51,700
I'll come to that one in a minute

00:50:49,480 --> 00:50:55,330
we have properties we have signals and

00:50:51,700 --> 00:50:56,619
slots very simple and and also very

00:50:55,330 --> 00:50:58,690
readable and you think that we are

00:50:56,619 --> 00:51:00,070
extending C++ to some extent and that's

00:50:58,690 --> 00:51:02,800
one of those things that people have

00:51:00,070 --> 00:51:04,869
been in the past criticized I mean we

00:51:02,800 --> 00:51:09,160
have signals and we have slots as ASCII

00:51:04,869 --> 00:51:10,570
in words here nowadays you know usually

00:51:09,160 --> 00:51:13,210
we you have to write our header files

00:51:10,570 --> 00:51:15,880
using using ugly Q underscore signals

00:51:13,210 --> 00:51:17,980
and Q underscore slots macros but you

00:51:15,880 --> 00:51:20,260
can still write them this way if you so

00:51:17,980 --> 00:51:22,930
choose right and it makes for more

00:51:20,260 --> 00:51:25,530
readable code it's also one of as said

00:51:22,930 --> 00:51:28,119
one of our goals keep the code readable

00:51:25,530 --> 00:51:31,240
it can connect we've had you know in the

00:51:28,119 --> 00:51:33,910
old times connect system system where

00:51:31,240 --> 00:51:35,710
basically things were done sig string

00:51:33,910 --> 00:51:37,510
based so signal and slot with just

00:51:35,710 --> 00:51:41,080
markers that basically converted the

00:51:37,510 --> 00:51:42,520
argument to a string and you know then

00:51:41,080 --> 00:51:43,869
they were passed into the into the

00:51:42,520 --> 00:51:46,320
connect function which looked those up

00:51:43,869 --> 00:51:48,400
as said you know we were generating

00:51:46,320 --> 00:51:51,250
introspection information so we knew

00:51:48,400 --> 00:51:52,780
which you know we could resolve from and

00:51:51,250 --> 00:51:54,880
named we could resolve the function

00:51:52,780 --> 00:51:58,270
pointer that we needed to call or

00:51:54,880 --> 00:52:01,270
connect with in cute five now we also

00:51:58,270 --> 00:52:04,450
have typesafe connects using using

00:52:01,270 --> 00:52:06,010
modern syntax you know like that or you

00:52:04,450 --> 00:52:09,089
can also connect of course two lambdas

00:52:06,010 --> 00:52:11,170
these days and I said there's different

00:52:09,089 --> 00:52:13,119
types of connections you can make them

00:52:11,170 --> 00:52:17,349
direct you can make them cute so they

00:52:13,119 --> 00:52:19,210
come so that you control returns to the

00:52:17,349 --> 00:52:22,780
event loop and the event loop then at

00:52:19,210 --> 00:52:24,550
some point notifies the slot and you can

00:52:22,780 --> 00:52:25,900
make them automatic which means direct

00:52:24,550 --> 00:52:29,520
you know if you're in the same so that's

00:52:25,900 --> 00:52:29,520
cute if it's between threads

00:52:31,290 --> 00:52:35,040
one of the questions I'm always getting

00:52:33,000 --> 00:52:37,349
is why are we using the mock you know

00:52:35,040 --> 00:52:39,359
Marcus the cute metal objects compiler

00:52:37,349 --> 00:52:42,869
which actually you know parses our

00:52:39,359 --> 00:52:44,700
header files and generates the data we

00:52:42,869 --> 00:52:48,650
need you know to be able to do implement

00:52:44,700 --> 00:52:48,650
the signal slot and the property system

00:52:49,250 --> 00:52:56,520
it you know amidst that metadata it

00:52:53,250 --> 00:52:58,349
emits introspection information and the

00:52:56,520 --> 00:53:01,290
big advantage we're having using it as

00:52:58,349 --> 00:53:02,550
opposed to for example a mechanism that

00:53:01,290 --> 00:53:05,579
doesn't use that is that we do have

00:53:02,550 --> 00:53:07,770
dynamic introspection information at one

00:53:05,579 --> 00:53:11,369
time available we can call up look up a

00:53:07,770 --> 00:53:13,619
method by name we can look up properties

00:53:11,369 --> 00:53:15,570
and enums by name we can we can convert

00:53:13,619 --> 00:53:18,780
between a string representation of an

00:53:15,570 --> 00:53:22,829
element and its value back and forth we

00:53:18,780 --> 00:53:24,680
can invoke methods and you know if

00:53:22,829 --> 00:53:26,880
you're using at least if you're using a

00:53:24,680 --> 00:53:28,800
decent build system if you're using C

00:53:26,880 --> 00:53:30,630
make if you're using Q make mark is

00:53:28,800 --> 00:53:33,300
completely invisible to the developer

00:53:30,630 --> 00:53:35,400
you don't ever see it actually know the

00:53:33,300 --> 00:53:36,990
build system will take care of mocking

00:53:35,400 --> 00:53:39,900
the files it needs to mark it will take

00:53:36,990 --> 00:53:41,550
care of compiling the generated C++

00:53:39,900 --> 00:53:46,109
files and linking them into the final

00:53:41,550 --> 00:53:47,730
binary so that's fine I you know it

00:53:46,109 --> 00:53:49,619
doesn't really cost us a whole lot to

00:53:47,730 --> 00:53:52,079
have that available and it really

00:53:49,619 --> 00:53:54,000
simplifies usage and makes a lot of

00:53:52,079 --> 00:53:55,980
things like you know what I'll come

00:53:54,000 --> 00:54:01,380
later to the the cute quick technology

00:53:55,980 --> 00:54:04,500
for user interface as possible value

00:54:01,380 --> 00:54:06,240
classes is the second set of classes

00:54:04,500 --> 00:54:08,010
that we have you know most of cutes

00:54:06,240 --> 00:54:10,170
low-level classes are value classes like

00:54:08,010 --> 00:54:14,609
we have directs font use doing you

00:54:10,170 --> 00:54:16,410
vector mainly data structures whose

00:54:14,609 --> 00:54:17,609
methods there's no virtual methods and

00:54:16,410 --> 00:54:20,220
you know ideally they should have been

00:54:17,609 --> 00:54:22,530
marked final well when we implemented

00:54:20,220 --> 00:54:24,750
them we didn't have a final keyword

00:54:22,530 --> 00:54:26,430
available unfortunately and adding it

00:54:24,750 --> 00:54:27,630
afterward afterwards is difficult

00:54:26,430 --> 00:54:31,500
because some people will actually

00:54:27,630 --> 00:54:35,160
inheriting from them for good or for bad

00:54:31,500 --> 00:54:37,650
reasons but they're doing it they're

00:54:35,160 --> 00:54:39,240
primitive or implicitly shared and our

00:54:37,650 --> 00:54:41,099
implicit sharing uses atomic ref

00:54:39,240 --> 00:54:44,609
counting I'll get to that so primitive

00:54:41,099 --> 00:54:45,240
you know that one a point they have an X

00:54:44,609 --> 00:54:47,490
and the y

00:54:45,240 --> 00:54:50,400
you have setters and getters nothing

00:54:47,490 --> 00:54:53,130
nothing spectacular here to see I mean

00:54:50,400 --> 00:54:55,410
those are some of our classes then we

00:54:53,130 --> 00:54:58,230
have implicitly shared classes like for

00:54:55,410 --> 00:55:00,120
example our font and the way we

00:54:58,230 --> 00:55:03,060
implement those is that we have you know

00:55:00,120 --> 00:55:06,930
put all our data into a into what we

00:55:03,060 --> 00:55:08,610
call a deep pointer they're hidden you

00:55:06,930 --> 00:55:10,260
know in a private header file giving us

00:55:08,610 --> 00:55:14,370
a much more freedom to add and remove

00:55:10,260 --> 00:55:15,930
data where members and whenever you said

00:55:14,370 --> 00:55:18,840
something the implicit sharing looks at

00:55:15,930 --> 00:55:20,670
the ref count does a detach I copies the

00:55:18,840 --> 00:55:25,500
data if the ref count is not one and

00:55:20,670 --> 00:55:28,020
then sets it simple mechanism note we'll

00:55:25,500 --> 00:55:30,360
see you know people have been asking us

00:55:28,020 --> 00:55:32,910
all but isn't that expensive you know

00:55:30,360 --> 00:55:39,060
we're using atomic ref counted thing and

00:55:32,910 --> 00:55:40,680
these kind of things yes there is a

00:55:39,060 --> 00:55:42,690
little bit of an overhead we pay but we

00:55:40,680 --> 00:55:44,820
see that in most cases doesn't matter

00:55:42,690 --> 00:55:47,150
and in this usually not a contention on

00:55:44,820 --> 00:55:49,290
that cash line

00:55:47,150 --> 00:55:50,640
checking whether the ref count is not

00:55:49,290 --> 00:55:53,820
equal to one is something we can do non

00:55:50,640 --> 00:55:55,410
atomically because if it is what we want

00:55:53,820 --> 00:55:57,390
to know if the ref count is 1 if it's 1

00:55:55,410 --> 00:55:59,850
we are the only copy with the only user

00:55:57,390 --> 00:56:02,340
so we can do that load non atomically so

00:55:59,850 --> 00:56:04,640
so the only atomic operations we need to

00:56:02,340 --> 00:56:11,610
do is the increment and the decrement on

00:56:04,640 --> 00:56:12,900
copy or destruction the advantage that

00:56:11,610 --> 00:56:15,480
we're having is that they behave really

00:56:12,900 --> 00:56:18,180
almost exactly like primitive types they

00:56:15,480 --> 00:56:21,180
have copy semantics the easy and fast to

00:56:18,180 --> 00:56:24,570
copy so you know the mistake that many

00:56:21,180 --> 00:56:26,430
of our you know users to is or many

00:56:24,570 --> 00:56:28,230
users to is pass you know these kind of

00:56:26,430 --> 00:56:31,620
objects by value especially when they

00:56:28,230 --> 00:56:34,410
come from and on C++ world and not by

00:56:31,620 --> 00:56:36,930
constants and with that I mean the

00:56:34,410 --> 00:56:38,820
things get actually a lot cheaper and

00:56:36,930 --> 00:56:40,890
the thread safe even if the data behind

00:56:38,820 --> 00:56:44,310
the sheet so you can I can create a copy

00:56:40,890 --> 00:56:47,820
of a vector hand that copy over to to

00:56:44,310 --> 00:56:49,920
the to another thread and as long as the

00:56:47,820 --> 00:56:54,660
data is shared you know we can still use

00:56:49,920 --> 00:56:56,250
them together so that's great as a

00:56:54,660 --> 00:56:57,750
little bit of problems also of course

00:56:56,250 --> 00:56:58,830
you know there's a bit of a performance

00:56:57,750 --> 00:57:00,240
overhead

00:56:58,830 --> 00:57:02,340
we have slightly different iterations

00:57:00,240 --> 00:57:04,950
semantics because they could detach when

00:57:02,340 --> 00:57:06,720
you use non constitutive aters and range

00:57:04,950 --> 00:57:08,910
for can also be problematic because it

00:57:06,720 --> 00:57:11,040
can detach something that got added in

00:57:08,910 --> 00:57:13,610
C++ and in eleven after we had all of

00:57:11,040 --> 00:57:13,610
those available

00:57:13,820 --> 00:57:18,600
another large part of what we have been

00:57:16,290 --> 00:57:21,360
doing in cutest filling gaps in the

00:57:18,600 --> 00:57:22,980
standard libraries and you know for

00:57:21,360 --> 00:57:23,970
largest time that was also needed

00:57:22,980 --> 00:57:27,540
because there was nothing happening

00:57:23,970 --> 00:57:30,060
under standard evolvement hue swinging

00:57:27,540 --> 00:57:33,420
you see plaster still doesn't have any

00:57:30,060 --> 00:57:36,780
real unicode support i think that's a

00:57:33,420 --> 00:57:38,070
huge gap and and it's it's actually you

00:57:36,780 --> 00:57:43,170
know something that we're we're lacking

00:57:38,070 --> 00:57:44,670
out to many many other frameworks or

00:57:43,170 --> 00:57:47,790
many other programming languages that

00:57:44,670 --> 00:57:52,200
have that built-in locale handling date

00:57:47,790 --> 00:57:55,100
time timezone handling was the largest

00:57:52,200 --> 00:57:58,380
time before c++ 11 we were using atomic

00:57:55,100 --> 00:58:00,360
instructions c++ didn't really have

00:57:58,380 --> 00:58:03,150
anything swearing was also just POSIX

00:58:00,360 --> 00:58:05,070
threading so we had we were doing our

00:58:03,150 --> 00:58:07,200
own stuff they even though nowadays we

00:58:05,070 --> 00:58:09,540
could move over and and use the C++

00:58:07,200 --> 00:58:11,760
classes but the classes are there

00:58:09,540 --> 00:58:14,760
they're widely used so you know removing

00:58:11,760 --> 00:58:16,680
them is also not that easy we're fine

00:58:14,760 --> 00:58:19,590
handling I know networking I know that's

00:58:16,680 --> 00:58:21,660
also coming now now and of course

00:58:19,590 --> 00:58:23,150
graphics where you know the C++

00:58:21,660 --> 00:58:25,410
otherwise doesn't really offer anything

00:58:23,150 --> 00:58:28,830
let's move over to that one creating

00:58:25,410 --> 00:58:30,570
user interfaces to offerings we have a

00:58:28,830 --> 00:58:33,090
talked about at a bit before we have the

00:58:30,570 --> 00:58:35,430
widgets which are C++ controls that you

00:58:33,090 --> 00:58:37,800
can use and create and we have the cute

00:58:35,430 --> 00:58:40,050
quick UI technology to create you know

00:58:37,800 --> 00:58:45,300
more animated touch based user

00:58:40,050 --> 00:58:47,550
interfaces widgets here's the simple

00:58:45,300 --> 00:58:49,860
hello world example there nothing

00:58:47,550 --> 00:58:51,420
special many of you have been using huge

00:58:49,860 --> 00:58:53,720
data so you've been probably biting

00:58:51,420 --> 00:58:56,520
those those lines in one way or another

00:58:53,720 --> 00:58:58,560
now we create an application we create a

00:58:56,520 --> 00:59:03,810
label with hello world we show it and

00:58:58,560 --> 00:59:05,400
you know that the event loop on we have

00:59:03,810 --> 00:59:09,990
the graphical designer I showed that one

00:59:05,400 --> 00:59:11,890
before for cue widgets so making it easy

00:59:09,990 --> 00:59:14,529
to put those together

00:59:11,890 --> 00:59:15,730
and then of course we have cute quick as

00:59:14,529 --> 00:59:17,259
a technology which we have been

00:59:15,730 --> 00:59:19,960
developing over the last years and that

00:59:17,259 --> 00:59:23,460
is something where we you know do user

00:59:19,960 --> 00:59:25,839
interface design and declarative way

00:59:23,460 --> 00:59:29,589
it's written in a language that we call

00:59:25,839 --> 00:59:31,390
qml it's not C++ we get to that but you

00:59:29,589 --> 00:59:34,239
know you still avoid most of your

00:59:31,390 --> 00:59:37,269
programming large application logic in

00:59:34,239 --> 00:59:39,849
C++ include natively and you just hook

00:59:37,269 --> 00:59:41,499
the UI up to that so the UI is actually

00:59:39,849 --> 00:59:43,599
supposed to be a very thin layer on top

00:59:41,499 --> 00:59:45,069
of that and we've seen people doing it

00:59:43,599 --> 00:59:47,650
wrong and doing everything up there in

00:59:45,069 --> 00:59:49,739
the human level level because you do

00:59:47,650 --> 00:59:52,390
have some JavaScript support in there

00:59:49,739 --> 00:59:55,799
it's often you know it doesn't lead to

00:59:52,390 --> 00:59:58,569
the best designs or the best performance

00:59:55,799 --> 01:00:02,109
so it's a declarative language to define

00:59:58,569 --> 01:00:04,119
user interfaces actually objects and qml

01:00:02,109 --> 01:00:10,630
our cue objects underneath in the C++

01:00:04,119 --> 01:00:12,759
world it's very easy therein to create

01:00:10,630 --> 01:00:14,619
bindings to properties and we haven't

01:00:12,759 --> 01:00:16,420
some automatic dependency tracking in

01:00:14,619 --> 01:00:18,819
there so that bindings always stay up to

01:00:16,420 --> 01:00:21,400
date I'll get I'll show you that in a

01:00:18,819 --> 01:00:23,650
second states and transitions and

01:00:21,400 --> 01:00:25,539
animations are supported and built-in so

01:00:23,650 --> 01:00:27,940
it's very easy to create animated user

01:00:25,539 --> 01:00:30,180
interfaces and animations and you can

01:00:27,940 --> 01:00:33,700
easily bind it to C++ JavaScript and

01:00:30,180 --> 01:00:34,989
integrate custom C++ types of course and

01:00:33,700 --> 01:00:37,119
on the right hand side here you see a

01:00:34,989 --> 01:00:39,220
simple example of a hello world in cute

01:00:37,119 --> 01:00:41,890
quick of course you need to see tossed

01:00:39,220 --> 01:00:45,039
aside to instantiate the that cute quick

01:00:41,890 --> 01:00:46,390
object still but other than that I mean

01:00:45,039 --> 01:00:48,999
you know you you have a text element

01:00:46,390 --> 01:00:51,190
showing hello world and I put a mouse

01:00:48,999 --> 01:00:52,779
area in there that you can actually you

01:00:51,190 --> 01:00:53,980
know allows you to click that text and

01:00:52,779 --> 01:00:58,289
we would then you know quit the

01:00:53,980 --> 01:00:58,289
application very simple straightforward

01:01:00,390 --> 01:01:09,759
why are we doing and using humor and you

01:01:03,369 --> 01:01:11,529
see we have said I mean it has a you

01:01:09,759 --> 01:01:13,269
know built-in and the visible and

01:01:11,529 --> 01:01:14,619
represents the visible structure of the

01:01:13,269 --> 01:01:18,900
user interface in a good way because

01:01:14,619 --> 01:01:21,430
it's it's a it's a visual two years well

01:01:18,900 --> 01:01:24,249
and you can do that and show that with a

01:01:21,430 --> 01:01:25,730
minimal syntax we have property bindings

01:01:24,249 --> 01:01:28,040
in there so you know

01:01:25,730 --> 01:01:30,619
can write Fuu you know some property

01:01:28,040 --> 01:01:33,140
like the width callin some some

01:01:30,619 --> 01:01:35,090
expression and we'll make sure that you

01:01:33,140 --> 01:01:36,619
know this expect the relationship

01:01:35,090 --> 01:01:38,420
between the property and the expression

01:01:36,619 --> 01:01:41,840
always stays up-to-date so if anything

01:01:38,420 --> 01:01:43,910
on the right hand side changes the the

01:01:41,840 --> 01:01:46,310
property value will always get updated

01:01:43,910 --> 01:01:48,440
so automatic dependency tracking and we

01:01:46,310 --> 01:01:51,470
evaluation of of those properties that's

01:01:48,440 --> 01:01:52,940
very important because it makes makes it

01:01:51,470 --> 01:01:54,770
easy to write something without glue

01:01:52,940 --> 01:01:56,210
code it's very easy to write you don't

01:01:54,770 --> 01:01:57,740
need glue code and it's actually also

01:01:56,210 --> 01:02:01,400
that's another thing it's friendly for

01:01:57,740 --> 01:02:02,780
it for UX designers here you also see a

01:02:01,400 --> 01:02:04,430
little bit of a screen shot that's some

01:02:02,780 --> 01:02:06,950
controls that are also available so you

01:02:04,430 --> 01:02:08,720
have ready-made buttons and sliders and

01:02:06,950 --> 01:02:10,730
whatever you need also available at your

01:02:08,720 --> 01:02:15,619
fingertips therefore for creating user

01:02:10,730 --> 01:02:19,520
interfaces can easily integrate 3 + % uq

01:02:15,619 --> 01:02:21,650
ml so you know you create a queue object

01:02:19,520 --> 01:02:23,410
basically you have some property you can

01:02:21,650 --> 01:02:27,490
create properties on that object

01:02:23,410 --> 01:02:29,600
important is is here that I forgot that

01:02:27,490 --> 01:02:32,630
actually you also have a notification

01:02:29,600 --> 01:02:34,280
when the property changes and the size

01:02:32,630 --> 01:02:36,140
change signal so whenever the size

01:02:34,280 --> 01:02:39,050
changes you should emit that signal as

01:02:36,140 --> 01:02:42,590
well and then you can have a slot like

01:02:39,050 --> 01:02:45,020
you know a rectangle clicked and you can

01:02:42,590 --> 01:02:48,470
basically instantiate that instantiate

01:02:45,020 --> 01:02:50,300
cute quick view instantiate that object

01:02:48,470 --> 01:02:52,520
and set that object as a context

01:02:50,300 --> 01:02:57,680
property what we call it with an giving

01:02:52,520 --> 01:03:00,260
it a name on the view and with that you

01:02:57,680 --> 01:03:03,020
can then use that on the human side so

01:03:00,260 --> 01:03:06,020
we have that vectored qml and we bind

01:03:03,020 --> 01:03:08,480
there the width of the rectangle - to

01:03:06,020 --> 01:03:10,640
what we had on the c++ side the my

01:03:08,480 --> 01:03:13,280
object and the size property of that one

01:03:10,640 --> 01:03:15,410
so whenever that one changes on the c++

01:03:13,280 --> 01:03:18,590
side the width on the qml side will get

01:03:15,410 --> 01:03:21,380
updated automatically and we have you

01:03:18,590 --> 01:03:24,440
know again a mouse area and if that one

01:03:21,380 --> 01:03:26,990
gets clicked we call back into c++ the

01:03:24,440 --> 01:03:28,760
slot in c++ so you get the callback in

01:03:26,990 --> 01:03:30,890
c++ and can work work your way from

01:03:28,760 --> 01:03:34,430
there that's how we can very easily

01:03:30,890 --> 01:03:36,320
integrate the two sides also on cute

01:03:34,430 --> 01:03:38,300
quick we have one a designer similar to

01:03:36,320 --> 01:03:39,000
the one that we had for for widgets and

01:03:38,300 --> 01:03:41,430
it's

01:03:39,000 --> 01:03:44,670
we can put together your user interface

01:03:41,430 --> 01:03:49,230
in the graphical fashion let's integrate

01:03:44,670 --> 01:03:51,510
and easy to use and you have also their

01:03:49,230 --> 01:03:54,260
separation between the presentation and

01:03:51,510 --> 01:03:56,580
the in the logic of the user interface

01:03:54,260 --> 01:03:58,850
okay let's move over a little bit into

01:03:56,580 --> 01:04:00,930
into the outlook and the future future

01:03:58,850 --> 01:04:02,880
currently five point nine is the current

01:04:00,930 --> 01:04:04,920
release and I haven't gone into you know

01:04:02,880 --> 01:04:06,990
what's in there really you know if

01:04:04,920 --> 01:04:09,660
you're interested look it up

01:04:06,990 --> 01:04:11,130
currently we're up and have 592 the

01:04:09,660 --> 01:04:12,840
interesting pieces that five nine is

01:04:11,130 --> 01:04:14,490
what we call a long-term supported

01:04:12,840 --> 01:04:16,860
release will we support it for three

01:04:14,490 --> 01:04:19,170
years to come so that's probably

01:04:16,860 --> 01:04:21,090
interesting for you guys if you start

01:04:19,170 --> 01:04:25,650
anything new that's the one you want to

01:04:21,090 --> 01:04:28,140
use we're having a half six months

01:04:25,650 --> 01:04:30,660
release cycle where every six months we

01:04:28,140 --> 01:04:32,310
have a new feature release we have of

01:04:30,660 --> 01:04:34,950
course patch level releases in between

01:04:32,310 --> 01:04:36,630
510 is currently in feature freeze we

01:04:34,950 --> 01:04:39,870
haven't we'll have a beta soon and the

01:04:36,630 --> 01:04:42,240
final in hopefully in November when 511

01:04:39,870 --> 01:04:44,100
may 512 probably in November next year

01:04:42,240 --> 01:04:45,810
and that's probably going to be the next

01:04:44,100 --> 01:04:47,160
candidate for long-term supported

01:04:45,810 --> 01:04:49,710
release and that's as far as sort of you

01:04:47,160 --> 01:04:52,260
know the release train goes I'm not

01:04:49,710 --> 01:04:54,600
going to go into too much into what kind

01:04:52,260 --> 01:04:56,550
of features we have in there just a

01:04:54,600 --> 01:04:59,670
little bit of what our focus areas are

01:04:56,550 --> 01:05:01,920
one of them is graphics mm what we've

01:04:59,670 --> 01:05:04,170
seen in in the past oh I mean a couple

01:05:01,920 --> 01:05:07,110
of years ago when we went to cute 5 we

01:05:04,170 --> 01:05:08,760
thought okay OpenGL is the thing you

01:05:07,110 --> 01:05:12,390
know we were having that pretty much

01:05:08,760 --> 01:05:15,990
everywhere yeah well it turns out things

01:05:12,390 --> 01:05:18,180
change changed and you know suddenly you

01:05:15,990 --> 01:05:20,010
know the Cronus group came up with an or

01:05:18,180 --> 01:05:22,920
actually first AMD came up with

01:05:20,010 --> 01:05:25,290
something it was mental then you know

01:05:22,920 --> 01:05:27,540
apples started pushing for for their own

01:05:25,290 --> 01:05:29,870
graphics API called metal then the

01:05:27,540 --> 01:05:32,940
Cronus group came up with what Balkan

01:05:29,870 --> 01:05:35,940
Windows Microsoft's you know DirectX 3d

01:05:32,940 --> 01:05:38,100
12 and we also still have to support

01:05:35,940 --> 01:05:41,880
software as a tester ization some some

01:05:38,100 --> 01:05:43,500
places so we have a big amount of

01:05:41,880 --> 01:05:47,610
different graphics API so that people

01:05:43,500 --> 01:05:49,950
might be using and you know how do we

01:05:47,610 --> 01:05:52,140
abstract those is a big research project

01:05:49,950 --> 01:05:52,710
that we currently have and you know the

01:05:52,140 --> 01:05:54,750
solution

01:05:52,710 --> 01:05:56,940
really you know to provide a scene graph

01:05:54,750 --> 01:05:58,230
that you can use together and abstract

01:05:56,940 --> 01:06:01,819
it on a higher level so you talked about

01:05:58,230 --> 01:06:04,950
materials you talked about measures

01:06:01,819 --> 01:06:07,260
these kind of things and put that and

01:06:04,950 --> 01:06:08,819
have support for that we already have

01:06:07,260 --> 01:06:10,530
some support for different back end

01:06:08,819 --> 01:06:14,010
graphics back ends and cute quick and

01:06:10,530 --> 01:06:15,480
for the for 3d API skewed 3d we have a

01:06:14,010 --> 01:06:18,030
lot of research ongoing how we can

01:06:15,480 --> 01:06:19,829
integrate that with one problem don't

01:06:18,030 --> 01:06:21,809
that you know because we thought OpenGL

01:06:19,829 --> 01:06:23,910
is the thing and it and we can use it

01:06:21,809 --> 01:06:26,040
everywhere we've exposed a couple of

01:06:23,910 --> 01:06:28,160
those directly and cute five and we need

01:06:26,040 --> 01:06:31,740
to figure out what how to deal with that

01:06:28,160 --> 01:06:36,180
our problem fortunately and we'll we'll

01:06:31,740 --> 01:06:39,000
find a solution we have a lot of general

01:06:36,180 --> 01:06:40,410
work that were ongoing you know we

01:06:39,000 --> 01:06:42,329
improve performance we use memory

01:06:40,410 --> 01:06:45,480
consumption all over Q's is always in

01:06:42,329 --> 01:06:47,010
there an ongoing process looking into

01:06:45,480 --> 01:06:48,630
you know speech support we're seeing

01:06:47,010 --> 01:06:50,339
that this is requested a lot but

01:06:48,630 --> 01:06:52,260
customers are mean they want to control

01:06:50,339 --> 01:06:54,990
also their graphical applications with

01:06:52,260 --> 01:06:56,400
speech how do we integrate with digital

01:06:54,990 --> 01:06:59,309
assistants that are currently coming

01:06:56,400 --> 01:07:01,230
everywhere what do we do you know on the

01:06:59,309 --> 01:07:03,750
on the graphic side on the 3d side with

01:07:01,230 --> 01:07:06,869
augmented reality virtual reality how do

01:07:03,750 --> 01:07:08,099
we integrate things there there's a lot

01:07:06,869 --> 01:07:11,520
happening so that's going to be

01:07:08,099 --> 01:07:13,319
important for us and of course also you

01:07:11,520 --> 01:07:15,839
know a lot of things happening on the

01:07:13,319 --> 01:07:17,430
IDE side you know graphical tuning we

01:07:15,839 --> 01:07:19,829
are we're doing more and more work on

01:07:17,430 --> 01:07:21,329
code refactoring making that easier but

01:07:19,829 --> 01:07:23,099
then we have a big project also where

01:07:21,329 --> 01:07:26,010
you know we see that there are more and

01:07:23,099 --> 01:07:27,390
more companies that you know do the

01:07:26,010 --> 01:07:29,160
software and C++ but they need a

01:07:27,390 --> 01:07:30,900
solution for the graphics designers to

01:07:29,160 --> 01:07:34,829
work with the software engineers in a

01:07:30,900 --> 01:07:36,720
good way and easy way this default

01:07:34,829 --> 01:07:38,579
workflow is that the graphics designer

01:07:36,720 --> 01:07:42,599
works in Photoshop creates lots of

01:07:38,579 --> 01:07:44,220
things creates some sketches sends that

01:07:42,599 --> 01:07:46,230
over to a developer the developer tries

01:07:44,220 --> 01:07:49,109
to implement it doesn't get it quite

01:07:46,230 --> 01:07:50,790
right it doesn't perform because on the

01:07:49,109 --> 01:07:52,740
embedded device for example because of

01:07:50,790 --> 01:07:55,200
party hardware is not powerful enough to

01:07:52,740 --> 01:07:58,200
do actually implement or support what

01:07:55,200 --> 01:07:59,579
the debug designer thought of then goes

01:07:58,200 --> 01:08:01,790
back to the designer you have very long

01:07:59,579 --> 01:08:05,519
development cycles because of that so

01:08:01,790 --> 01:08:08,999
helping integrating designers in that

01:08:05,519 --> 01:08:10,769
workflow and making them enabling them

01:08:08,999 --> 01:08:13,319
to work directly on for example the

01:08:10,769 --> 01:08:14,939
target hardware with the real product is

01:08:13,319 --> 01:08:16,739
something that's important and that will

01:08:14,939 --> 01:08:20,489
be doing putting a lot quite a bit of

01:08:16,739 --> 01:08:22,559
effort into it and you know things like

01:08:20,489 --> 01:08:24,480
graphical asset conditioning and other

01:08:22,559 --> 01:08:28,859
things that are important in in that

01:08:24,480 --> 01:08:32,369
space as well okay on the C++ side we're

01:08:28,859 --> 01:08:37,170
using since 5/7 we're using in C++ 11

01:08:32,369 --> 01:08:38,519
fully inside cute not not quite fully I

01:08:37,170 --> 01:08:41,489
have to say because we still have to

01:08:38,519 --> 01:08:42,989
support Visual Studio 2013 and that one

01:08:41,489 --> 01:08:48,659
has problems with for example Const

01:08:42,989 --> 01:08:51,239
expressions but as much as we can and we

01:08:48,659 --> 01:08:53,039
want to start using 14 and 17 features

01:08:51,239 --> 01:08:55,469
as much as we can as well because it

01:08:53,039 --> 01:08:57,750
would simplified coding inside inside

01:08:55,469 --> 01:09:00,299
cute make our maintenance easier our

01:08:57,750 --> 01:09:02,969
currently still limited by many of our

01:09:00,299 --> 01:09:06,269
users using older compilers so that'll

01:09:02,969 --> 01:09:07,829
come but you know will usually living a

01:09:06,269 --> 01:09:11,849
little bit behind you know the bleeding

01:09:07,829 --> 01:09:13,529
edge there but we're already doing in

01:09:11,849 --> 01:09:15,089
certain things we're using has include

01:09:13,529 --> 01:09:17,239
for example we're using the the

01:09:15,089 --> 01:09:21,659
duplicated force we attribute

01:09:17,239 --> 01:09:23,639
annotations hiding them behind macros

01:09:21,659 --> 01:09:25,440
which expand to nothing in case the

01:09:23,639 --> 01:09:27,269
compiler doesn't support it we've added

01:09:25,440 --> 01:09:29,940
a spring view class similar to standard

01:09:27,269 --> 01:09:33,179
spring view but working on a cue string

01:09:29,940 --> 01:09:35,190
and and make other things that that help

01:09:33,179 --> 01:09:37,230
that we integrate better as good as we

01:09:35,190 --> 01:09:41,250
can with with the upcoming cast

01:09:37,230 --> 01:09:45,960
standards I think the one that's going

01:09:41,250 --> 01:09:48,779
to be really important for us is than

01:09:45,960 --> 01:09:50,759
C++ 20 that's could become really

01:09:48,779 --> 01:09:52,440
interesting you know concepts for better

01:09:50,759 --> 01:09:54,210
diagnostics and error messages I know

01:09:52,440 --> 01:09:59,309
that a lot of our users are struggling

01:09:54,210 --> 01:10:02,340
with those having modules you know we

01:09:59,309 --> 01:10:04,320
will be we would really need those 4 4

01:10:02,340 --> 01:10:07,500
code models in the IDE for compiled

01:10:04,320 --> 01:10:09,659
times but we do need so you know that's

01:10:07,500 --> 01:10:11,400
something you know to remember we do

01:10:09,659 --> 01:10:13,949
need some sort of macros support in

01:10:11,400 --> 01:10:15,989
there and I know that some some people

01:10:13,949 --> 01:10:18,160
don't don't want that and modules will

01:10:15,989 --> 01:10:20,090
need it otherwise we can't use them

01:10:18,160 --> 01:10:21,650
now - which level is a different

01:10:20,090 --> 01:10:23,690
discussion and that's something we can

01:10:21,650 --> 01:10:25,760
have and I'm really looking forward to

01:10:23,690 --> 01:10:28,820
having a reflection and also the hoops

01:10:25,760 --> 01:10:30,080
metaprogramming things come somewhere

01:10:28,820 --> 01:10:32,240
closer to a standard it would be

01:10:30,080 --> 01:10:34,190
fantastic if we could get at least some

01:10:32,240 --> 01:10:36,350
sort of subsets and first start of that

01:10:34,190 --> 01:10:39,830
one into the next version of the

01:10:36,350 --> 01:10:42,440
standard because I mean honestly you

01:10:39,830 --> 01:10:45,170
know I would love to get rid of of our

01:10:42,440 --> 01:10:48,620
of our metal object compiler of Maki in

01:10:45,170 --> 01:10:52,310
the long term if we can do it and I

01:10:48,620 --> 01:10:54,350
would really love us to see a to reduce

01:10:52,310 --> 01:11:04,460
the need for template metaprogramming a

01:10:54,350 --> 01:11:08,090
lot so with that here's the cute Louis

01:11:04,460 --> 01:11:11,480
that we had over the history we've

01:11:08,090 --> 01:11:14,360
evolved a little bit flat and that's the

01:11:11,480 --> 01:11:16,070
one we have currently and with that I'd

01:11:14,360 --> 01:11:18,500
like to conclude my talk thank you very

01:11:16,070 --> 01:11:19,430
much for your attention and I think we

01:11:18,500 --> 01:11:21,690
have a couple of minutes for questions

01:11:19,430 --> 01:11:31,679
at least I hope so thank you very much

01:11:21,690 --> 01:11:31,679
[Applause]

01:11:43,050 --> 01:11:48,240
thank you for the talk Lars I have a

01:11:46,260 --> 01:11:51,000
question about the subject that he

01:11:48,240 --> 01:11:58,560
probably didn't cover what about the

01:11:51,000 --> 01:12:01,440
security of UT security yes I have a

01:11:58,560 --> 01:12:05,700
focus on that of course but trying to

01:12:01,440 --> 01:12:08,160
make sure you know we have code reviews

01:12:05,700 --> 01:12:10,440
we do you know a lot of work trying to

01:12:08,160 --> 01:12:13,080
make sure that we find any issues we do

01:12:10,440 --> 01:12:14,700
we've had some had actually good chat

01:12:13,080 --> 01:12:16,020
here with was was a person from Google

01:12:14,700 --> 01:12:16,530
about you know passing that was you

01:12:16,020 --> 01:12:20,790
right

01:12:16,530 --> 01:12:22,920
and and these are things we have we have

01:12:20,790 --> 01:12:25,110
a we have a security mailing list we do

01:12:22,920 --> 01:12:27,330
get relatively few issues I have to say

01:12:25,110 --> 01:12:28,560
that but we do get done from time to

01:12:27,330 --> 01:12:30,900
time and we handle them of course with

01:12:28,560 --> 01:12:32,610
you know quickly so we have a policy

01:12:30,900 --> 01:12:34,920
there you know close mailing list for

01:12:32,610 --> 01:12:36,630
for security issues trying to handle

01:12:34,920 --> 01:12:38,280
them and we then also you know disclose

01:12:36,630 --> 01:12:45,900
them with security advisories and that

01:12:38,280 --> 01:12:49,440
and you know patches and updates is it

01:12:45,900 --> 01:12:56,760
pronounced cutie or cute that's a good

01:12:49,440 --> 01:12:58,140
question okay so everybody insights you

01:12:56,760 --> 01:13:00,930
know you're obsessed cute

01:12:58,140 --> 01:13:03,810
at least from from our side I know that

01:13:00,930 --> 01:13:07,530
in the u.s. this cutie is externally the

01:13:03,810 --> 01:13:10,020
more prevalent pronunciation but I mean

01:13:07,530 --> 01:13:12,270
you know we're saying you usually from

01:13:10,020 --> 01:13:14,430
from from everybody who works in the

01:13:12,270 --> 01:13:17,220
company and everybody who works with it

01:13:14,430 --> 01:13:19,080
closest or all the contributors I think

01:13:17,220 --> 01:13:21,810
that's the that's the going name that

01:13:19,080 --> 01:13:24,480
we're going for thank you first of all

01:13:21,810 --> 01:13:27,720
I'd like to give credit to cute for qml

01:13:24,480 --> 01:13:30,510
which works really sleek also I like to

01:13:27,720 --> 01:13:32,760
give credit to you for telling being

01:13:30,510 --> 01:13:34,890
brave enough to tell C++ community that

01:13:32,760 --> 01:13:38,400
2/3 percent may not differ in

01:13:34,890 --> 01:13:41,880
performance may be brain but I have a

01:13:38,400 --> 01:13:45,690
question am i programming cute daily and

01:13:41,880 --> 01:13:48,060
sometimes I feel like and the cute and

01:13:45,690 --> 01:13:51,780
C++ the different that I works in

01:13:48,060 --> 01:13:55,200
somehow and being a C++ programmer feels

01:13:51,780 --> 01:13:56,460
different being a QT programmer and what

01:13:55,200 --> 01:13:59,160
our thoughts on this for

01:13:56,460 --> 01:14:02,880
future like you have Q vector yeah a lot

01:13:59,160 --> 01:14:06,270
of duplicates yes like these to merge or

01:14:02,880 --> 01:14:09,210
somehow ideally yes now the problem is

01:14:06,270 --> 01:14:11,610
of course I mean that's a lot of issues

01:14:09,210 --> 01:14:14,190
that that I'm seeing first of all I mean

01:14:11,610 --> 01:14:15,300
you know the obvious one there's lots of

01:14:14,190 --> 01:14:17,340
people out there using the existing

01:14:15,300 --> 01:14:19,800
classes you know you can't just you know

01:14:17,340 --> 01:14:22,440
so those away and tell everybody to port

01:14:19,800 --> 01:14:25,050
over there's a lot of work involved and

01:14:22,440 --> 01:14:27,510
almost most of the most people don't

01:14:25,050 --> 01:14:29,989
want to you know invest at work unless

01:14:27,510 --> 01:14:33,030
we offer a very good migration path

01:14:29,989 --> 01:14:35,040
secondly there's a couple of classes

01:14:33,030 --> 01:14:36,870
where we do believe that you know we

01:14:35,040 --> 01:14:39,239
have we offer an better and easier to

01:14:36,870 --> 01:14:44,040
use API and and yes it does feel

01:14:39,239 --> 01:14:45,719
different sometimes a bit but I mean C++

01:14:44,040 --> 01:14:47,340
still doesn't have any you know I mean

01:14:45,719 --> 01:14:49,530
we've been asked to give up cue string

01:14:47,340 --> 01:14:52,190
because why why why not use standard

01:14:49,530 --> 01:14:54,930
string first of all that one's 8-bit

01:14:52,190 --> 01:14:56,100
okay we could use utf-8 in there but it

01:14:54,930 --> 01:14:58,200
doesn't have any of the Unicode

01:14:56,100 --> 01:15:00,420
functionality upper casing lower casing

01:14:58,200 --> 01:15:02,489
anything you need so we can't really

01:15:00,420 --> 01:15:04,290
give that one up now the main question

01:15:02,489 --> 01:15:09,890
comes around some of our container

01:15:04,290 --> 01:15:14,460
classes vector this hashes and others

01:15:09,890 --> 01:15:16,230
and there it is a valid question I mean

01:15:14,460 --> 01:15:17,820
from my point of view you can I'm always

01:15:16,230 --> 01:15:18,420
saying you know use the ones that suit

01:15:17,820 --> 01:15:21,000
you best

01:15:18,420 --> 01:15:23,640
there's some advantages with using for

01:15:21,000 --> 01:15:25,670
example a cue vector because of the

01:15:23,640 --> 01:15:28,830
implicit sharing it's very cheap to

01:15:25,670 --> 01:15:31,950
basically you know take a copy move it

01:15:28,830 --> 01:15:35,550
to a secondary thread that copy you take

01:15:31,950 --> 01:15:37,140
a copy with a vector even though that

01:15:35,550 --> 01:15:38,960
other copy only needs read-only access

01:15:37,140 --> 01:15:41,400
you still copying all the data so

01:15:38,960 --> 01:15:43,440
depending on your use case I mean one or

01:15:41,400 --> 01:15:46,110
the other might make more sense I think

01:15:43,440 --> 01:15:48,560
it's it's fair to just use both or and

01:15:46,110 --> 01:15:53,040
use whatever suits you best

01:15:48,560 --> 01:15:56,100
thank you sure my question goes in the

01:15:53,040 --> 01:15:58,200
same direction when we get rid of the

01:15:56,100 --> 01:16:01,710
owning raw pounders that we have right

01:15:58,200 --> 01:16:04,140
now in an queued in the API and that

01:16:01,710 --> 01:16:07,020
should frankly be replaced by smart

01:16:04,140 --> 01:16:09,630
pointers or something else the problem

01:16:07,020 --> 01:16:12,120
is as again I mean the problem is

01:16:09,630 --> 01:16:14,610
it's a problem of compatibility how much

01:16:12,120 --> 01:16:16,080
you know do you break off your users

01:16:14,610 --> 01:16:17,820
coats I mean there's a you know probably

01:16:16,080 --> 01:16:21,390
billions of lines of code out there

01:16:17,820 --> 01:16:24,090
written with cute how much of those

01:16:21,390 --> 01:16:26,010
lines do we want to break so ideally you

01:16:24,090 --> 01:16:28,740
know we need to find strategies to offer

01:16:26,010 --> 01:16:30,660
transitions and and you know methods for

01:16:28,740 --> 01:16:33,000
people to transition to tune on more

01:16:30,660 --> 01:16:34,710
points that said I mean even if we you

01:16:33,000 --> 01:16:39,000
know sometimes we return more pointers

01:16:34,710 --> 01:16:41,670
you can always put them into into some

01:16:39,000 --> 01:16:45,180
into a smart pointer or something like

01:16:41,670 --> 01:16:49,020
that on your side right or unique point

01:16:45,180 --> 01:16:50,910
on yes no but usually like you create an

01:16:49,020 --> 01:16:52,920
object you do that directly in the smart

01:16:50,910 --> 01:16:57,300
pointer then you hand it to some cute

01:16:52,920 --> 01:17:00,000
API that we parents it and then like

01:16:57,300 --> 01:17:03,120
between the line where I called the the

01:17:00,000 --> 01:17:05,610
cute API and where I can like reset my

01:17:03,120 --> 01:17:09,450
smart pointer there is a an area where

01:17:05,610 --> 01:17:12,330
basically two objects on the same thing

01:17:09,450 --> 01:17:14,880
and that should not happen yeah and and

01:17:12,330 --> 01:17:16,800
there's no way around that problem right

01:17:14,880 --> 01:17:18,720
now unless you you take it out of the

01:17:16,800 --> 01:17:20,880
spot pointer before hands yes yeah but

01:17:18,720 --> 01:17:25,650
then you have it the the area where

01:17:20,880 --> 01:17:28,380
nothing owns it before it so that's yeah

01:17:25,650 --> 01:17:31,440
I I see the problem as sediment comes

01:17:28,380 --> 01:17:34,050
from the history and it's not an easy

01:17:31,440 --> 01:17:35,700
one to solve but you know we'll have

01:17:34,050 --> 01:17:38,040
discussions over that but you know don't

01:17:35,700 --> 01:17:39,990
expect any any very quick fix for that

01:17:38,040 --> 01:17:42,990
because it probably also would involve

01:17:39,990 --> 01:17:43,620
breaking certain api's that we're

01:17:42,990 --> 01:17:45,660
currently having

01:17:43,620 --> 01:17:50,280
that's something something we have to be

01:17:45,660 --> 01:17:53,310
cautious about at least thank you so if

01:17:50,280 --> 01:17:55,740
your code is open source where does the

01:17:53,310 --> 01:17:59,100
company's income come from as I said we

01:17:55,740 --> 01:18:01,410
have a dual licensing model and we offer

01:17:59,100 --> 01:18:05,400
cute both under open source licensing

01:18:01,410 --> 01:18:08,160
terms you know LGPL and GPL and under

01:18:05,400 --> 01:18:10,530
commercial license that people can can

01:18:08,160 --> 01:18:12,960
come to us they can buy that one from us

01:18:10,530 --> 01:18:14,700
get they get commercial support there's

01:18:12,960 --> 01:18:15,930
no there's a lot less strings attached

01:18:14,700 --> 01:18:18,780
to it and then with the open-source

01:18:15,930 --> 01:18:20,340
version I mean because oh LGPL and GPL

01:18:18,780 --> 01:18:21,840
also still give you some obligations

01:18:20,340 --> 01:18:23,050
that you have to follow and not

01:18:21,840 --> 01:18:25,150
everybody might do that much

01:18:23,050 --> 01:18:27,190
might like those obligations so we're

01:18:25,150 --> 01:18:28,570
saying you know the model behind that

01:18:27,190 --> 01:18:31,300
one is saying that basically with the

01:18:28,570 --> 01:18:34,570
open source version you know you're

01:18:31,300 --> 01:18:36,430
helping us expand the ecosystem with if

01:18:34,570 --> 01:18:39,040
you don't want to do that you know you

01:18:36,430 --> 01:18:40,420
can buy a commercial version and with

01:18:39,040 --> 01:18:43,270
that one you know fund the further

01:18:40,420 --> 01:18:45,840
development of the product okay thank

01:18:43,270 --> 01:18:45,840
you you're welcome

01:18:46,590 --> 01:18:53,710
okay over there okay go ahead

01:18:50,710 --> 01:18:57,130
okay so it's basically a follow up on

01:18:53,710 --> 01:18:58,720
the question before the main reason I

01:18:57,130 --> 01:19:01,630
think that there's a lot of pointers

01:18:58,720 --> 01:19:04,570
involved in cute is that the cue object

01:19:01,630 --> 01:19:07,660
inherited stuff doesn't have move

01:19:04,570 --> 01:19:11,560
operations I mean oh yeah and C++ 17 the

01:19:07,660 --> 01:19:15,160
problem a little bit goes away but but

01:19:11,560 --> 01:19:18,430
right now you can't really return cue

01:19:15,160 --> 01:19:20,110
objects or the real type of them bye-bye

01:19:18,430 --> 01:19:22,210
value from function so you have to

01:19:20,110 --> 01:19:24,970
allocate them on the heap pass around

01:19:22,210 --> 01:19:26,800
pointers everywhere starik plans to

01:19:24,970 --> 01:19:28,570
change that like at least move semantics

01:19:26,800 --> 01:19:29,260
because it makes sense to move objects

01:19:28,570 --> 01:19:30,790
around

01:19:29,260 --> 01:19:33,040
I can understand it doesn't make sense

01:19:30,790 --> 01:19:34,480
to copy objects that have connections to

01:19:33,040 --> 01:19:36,400
some other stuff because no one knows

01:19:34,480 --> 01:19:39,570
what should happen to the connections

01:19:36,400 --> 01:19:43,300
but if you move it around but problem

01:19:39,570 --> 01:19:45,130
well it might actually thing is I mean

01:19:43,300 --> 01:19:47,230
that in if we look at the implementation

01:19:45,130 --> 01:19:49,660
where anyway hiding all the data behind

01:19:47,230 --> 01:19:51,730
the D pointer in principle if I was to

01:19:49,660 --> 01:19:53,740
design the sinuhe's nowadays I mean you

01:19:51,730 --> 01:19:56,200
know all of those would would actually

01:19:53,740 --> 01:19:59,980
you know probably get you know some more

01:19:56,200 --> 01:20:02,290
of value semantics but you know we've

01:19:59,980 --> 01:20:04,870
designed this 20 years ago or twenty

01:20:02,290 --> 01:20:06,340
five more than twenty years ago and so

01:20:04,870 --> 01:20:08,950
we'll have to somehow deal with the

01:20:06,340 --> 01:20:10,540
Heritage it could be a possibility to

01:20:08,950 --> 01:20:14,200
see whether we can provide move

01:20:10,540 --> 01:20:16,810
semantics that might that might be

01:20:14,200 --> 01:20:18,100
possible I need to look into it it's

01:20:16,810 --> 01:20:20,440
definitely possible because I've

01:20:18,100 --> 01:20:23,830
implemented several wrappers around Q

01:20:20,440 --> 01:20:25,990
objects that do the moving but for now I

01:20:23,830 --> 01:20:27,460
can only do it non generically because

01:20:25,990 --> 01:20:29,470
I'm not in part of the meta object

01:20:27,460 --> 01:20:31,870
compiler so I have to know the signals

01:20:29,470 --> 01:20:34,570
and slots that the object has to do the

01:20:31,870 --> 01:20:35,890
remapping of the signals as that's a

01:20:34,570 --> 01:20:36,849
little bit a problem with you if you

01:20:35,890 --> 01:20:38,829
move it

01:20:36,849 --> 01:20:41,199
we need to change a lot some of the

01:20:38,829 --> 01:20:42,909
interns to work you know to basically

01:20:41,199 --> 01:20:45,130
hold the private point of data pointer

01:20:42,909 --> 01:20:46,929
that one is never moved anyway so so

01:20:45,130 --> 01:20:50,139
that would then then the things could be

01:20:46,929 --> 01:20:53,320
easier but yeah but other plans to do

01:20:50,139 --> 01:20:54,969
that not not nothing concrete but I mean

01:20:53,320 --> 01:20:56,380
it's an open source project if you have

01:20:54,969 --> 01:20:59,139
good ideas how to do it

01:20:56,380 --> 01:21:03,730
you know more than welcome to get

01:20:59,139 --> 01:21:07,000
yourself involved yeah thanks sure I I

01:21:03,730 --> 01:21:09,130
have sort of a two-part question comment

01:21:07,000 --> 01:21:11,530
on that question about where you

01:21:09,130 --> 01:21:13,690
answered with Q string do you actually

01:21:11,530 --> 01:21:16,090
have benchmarks that show that the

01:21:13,690 --> 01:21:18,130
copy-on-write model is better especially

01:21:16,090 --> 01:21:20,199
in the context of gooeys where strings

01:21:18,130 --> 01:21:22,329
are super short and cheap to copy

01:21:20,199 --> 01:21:24,400
because it's like Jim to me that the

01:21:22,329 --> 01:21:25,840
lock would be way more expensive than

01:21:24,400 --> 01:21:30,310
there's no lock

01:21:25,840 --> 01:21:31,900
I mean it's copy and write you know it's

01:21:30,310 --> 01:21:34,750
an atomic operation I mean that we're

01:21:31,900 --> 01:21:36,340
doing and in most cases I mean the yeah

01:21:34,750 --> 01:21:40,750
it's an atomic increment for the copy

01:21:36,340 --> 01:21:42,520
yeah we have done some benchmarks I mean

01:21:40,750 --> 01:21:43,860
and for very short strings I agree with

01:21:42,520 --> 01:21:46,389
you

01:21:43,860 --> 01:21:48,969
you know copying them would be faster

01:21:46,389 --> 01:21:50,530
the problem is we didn't know with those

01:21:48,969 --> 01:21:52,420
and but we have some work-in-progress

01:21:50,530 --> 01:21:55,090
patches I know that one of our

01:21:52,420 --> 01:21:57,219
developers Iago he has a patch for us

01:21:55,090 --> 01:21:58,630
which for shorts doing optimizations

01:21:57,219 --> 01:22:01,389
where we put basically put them directly

01:21:58,630 --> 01:22:03,909
you know don't even allocate a deep

01:22:01,389 --> 01:22:06,460
pointer and and basically just copy them

01:22:03,909 --> 01:22:09,900
all the time for short strings so we

01:22:06,460 --> 01:22:12,040
have that somewhere it would break

01:22:09,900 --> 01:22:15,219
binary compatibility that's why the

01:22:12,040 --> 01:22:19,000
stuff hasn't landed yet yeah and this

01:22:15,219 --> 01:22:20,949
you know the the argument for the cute

01:22:19,000 --> 01:22:24,659
containers that keeps coming up is the

01:22:20,949 --> 01:22:27,190
units of code support in queue string I

01:22:24,659 --> 01:22:30,880
believe there is a standard string

01:22:27,190 --> 01:22:32,260
compatible working Unicode support in CS

01:22:30,880 --> 01:22:34,360
string which is probably going to be

01:22:32,260 --> 01:22:36,579
standardized at some point is that

01:22:34,360 --> 01:22:38,650
something you guys would get behind CS

01:22:36,579 --> 01:22:40,630
doing is queues to a I mean Coppa spies

01:22:38,650 --> 01:22:42,790
hooked from cute and then basically yeah

01:22:40,630 --> 01:22:45,280
looking at the CS doing I mean what's

01:22:42,790 --> 01:22:47,079
you know it's got the standard string

01:22:45,280 --> 01:22:50,030
interface right so you don't have the

01:22:47,079 --> 01:22:51,560
divergence of communities over it

01:22:50,030 --> 01:22:52,970
have just the standards doing interface

01:22:51,560 --> 01:22:54,830
because standards doing doesn't offer

01:22:52,970 --> 01:22:58,280
you many of the other things and and and

01:22:54,830 --> 01:22:59,990
many of the at least the most important

01:22:58,280 --> 01:23:02,030
methods from standards to I think we do

01:22:59,990 --> 01:23:03,410
have and you know if they're not if

01:23:02,030 --> 01:23:06,460
they're still not there let's let's fit

01:23:03,410 --> 01:23:09,380
we can we can discuss filling them in

01:23:06,460 --> 01:23:12,530
but when you do need more than that

01:23:09,380 --> 01:23:15,470
right you do need you know a lot casing

01:23:12,530 --> 01:23:17,240
case conversions you do need many other

01:23:15,470 --> 01:23:22,400
things that you know you want to have

01:23:17,240 --> 01:23:24,620
from Unicode yeah but I mean okay you

01:23:22,400 --> 01:23:27,650
could you could patch in a locale mech

01:23:24,620 --> 01:23:30,290
you know like the case conversions and

01:23:27,650 --> 01:23:32,870
the at least in my opinion even things

01:23:30,290 --> 01:23:34,040
like finding within a string shouldn't

01:23:32,870 --> 01:23:35,390
be part of the public integration of the

01:23:34,040 --> 01:23:36,860
string that you be free functions anyway

01:23:35,390 --> 01:23:38,300
so I don't really see them missing in

01:23:36,860 --> 01:23:42,940
the public interface of that object to

01:23:38,300 --> 01:23:45,380
be an argument against it once again

01:23:42,940 --> 01:23:47,690
well you're you're you're arguing that

01:23:45,380 --> 01:23:49,490
the the public interface of standard

01:23:47,690 --> 01:23:53,810
string isn't rich enough to express

01:23:49,490 --> 01:23:56,570
everything in cue string right or what

01:23:53,810 --> 01:23:58,460
is the argument against well this this

01:23:56,570 --> 01:24:00,170
that I'm saying you know we can keep it

01:23:58,460 --> 01:24:01,610
in two compat we can probably make it

01:24:00,170 --> 01:24:04,720
compatible yeah

01:24:01,610 --> 01:24:07,700
but we will need some extensions on top

01:24:04,720 --> 01:24:09,380
yeah on top of it and of what the

01:24:07,700 --> 01:24:10,730
interface of standard string is but the

01:24:09,380 --> 01:24:13,370
way they do that's free functions

01:24:10,730 --> 01:24:15,700
anyways so I don't yeah it might not be

01:24:13,370 --> 01:24:19,610
a problem I'm just saying that you know

01:24:15,700 --> 01:24:24,170
just the standards doing interface yeah

01:24:19,610 --> 01:24:26,270
but but the point is it seems like it's

01:24:24,170 --> 01:24:29,240
it's it's a conscious divergence between

01:24:26,270 --> 01:24:32,150
the cue community and the the standard

01:24:29,240 --> 01:24:34,130
the rest of us it's a convert

01:24:32,150 --> 01:24:36,470
it's a divergence that has evolved over

01:24:34,130 --> 01:24:38,450
the years right over many years some of

01:24:36,470 --> 01:24:42,410
them has been in the past conscious

01:24:38,450 --> 01:24:44,120
because we we were looking at when we

01:24:42,410 --> 01:24:46,250
did for example kid forward api's and

01:24:44,120 --> 01:24:48,320
trying to really find you know good and

01:24:46,250 --> 01:24:50,720
intuitive API so as I discussed earlier

01:24:48,320 --> 01:24:52,910
we have been then also adding a lot of

01:24:50,720 --> 01:24:55,670
you know things that are compatible with

01:24:52,910 --> 01:24:57,020
the standard classes to make that to

01:24:55,670 --> 01:24:58,520
make them more compatible with each

01:24:57,020 --> 01:25:01,040
other

01:24:58,520 --> 01:25:03,380
but you know it's also difficult to now

01:25:01,040 --> 01:25:05,270
go in and say you know we we just you

01:25:03,380 --> 01:25:06,680
know move over to to whatever you know

01:25:05,270 --> 01:25:08,810
the stunt has and we move everything

01:25:06,680 --> 01:25:10,730
with us we happy we've had so far

01:25:08,810 --> 01:25:13,430
because we make so much code out there

01:25:10,730 --> 01:25:15,140
so it's it's not an easy thing to solve

01:25:13,430 --> 01:25:16,460
I mean you can just say you know why

01:25:15,140 --> 01:25:19,160
don't you just move over and then I

01:25:16,460 --> 01:25:20,810
would start using cute but forget you

01:25:19,160 --> 01:25:22,880
shouldn't forget that there's as I said

01:25:20,810 --> 01:25:24,470
there's a huge amount of users out there

01:25:22,880 --> 01:25:26,780
that which whom whose code we would

01:25:24,470 --> 01:25:28,160
break if we remove those methods yeah

01:25:26,780 --> 01:25:31,220
well you've broken a lot of stuff and a

01:25:28,160 --> 01:25:32,930
lot of versions I mean very from cute

01:25:31,220 --> 01:25:35,090
four to five very very little with the

01:25:32,930 --> 01:25:36,530
one place where we broke a lot of things

01:25:35,090 --> 01:25:39,050
was from cute three too cute for that

01:25:36,530 --> 01:25:42,680
was in 2005 because we're getting rid of

01:25:39,050 --> 01:25:46,720
singleton so it's okay so you know the

01:25:42,680 --> 01:25:47,930
usage has you know multiplied since then

01:25:46,720 --> 01:25:51,110
okay

01:25:47,930 --> 01:25:53,630
hi good great talk I just had a quick

01:25:51,110 --> 01:25:56,300
question are you alluded or kind of gave

01:25:53,630 --> 01:26:00,080
us a brief overview that the cute team

01:25:56,300 --> 01:26:03,980
is looking into using other graphical I

01:26:00,080 --> 01:26:05,330
guess languages or frameworks I was

01:26:03,980 --> 01:26:06,770
hoping you can tell us a little bit more

01:26:05,330 --> 01:26:09,710
about the research you guys have been

01:26:06,770 --> 01:26:11,840
doing um and just you know maybe if

01:26:09,710 --> 01:26:13,960
there's if one of the frameworks kind of

01:26:11,840 --> 01:26:18,560
lends itself easier to be used

01:26:13,960 --> 01:26:20,810
underneath cute or just any yeah well I

01:26:18,560 --> 01:26:22,250
mean if we talk about the 3d API is that

01:26:20,810 --> 01:26:22,640
are now being pushed by different

01:26:22,250 --> 01:26:24,590
vendors

01:26:22,640 --> 01:26:27,500
I mean Apple pushing metal you know

01:26:24,590 --> 01:26:31,520
Acronis pushing woken up Microsoft

01:26:27,500 --> 01:26:34,640
direct3d 12 the problem with all of

01:26:31,520 --> 01:26:38,300
those is that they're targeted mainly

01:26:34,640 --> 01:26:42,020
you know at game developers to a large

01:26:38,300 --> 01:26:43,370
degree the very low-level API is which

01:26:42,020 --> 01:26:45,350
means you have to build up a lot of

01:26:43,370 --> 01:26:47,120
stuff on top of them and and that that

01:26:45,350 --> 01:26:48,560
is it's quite a bit of work I mean

01:26:47,120 --> 01:26:50,600
there's nothing fundamental that's

01:26:48,560 --> 01:26:51,770
that's you know keeping us from

01:26:50,600 --> 01:26:54,050
supporting them we have for example

01:26:51,770 --> 01:26:57,110
don't folder cute quick scene graph we

01:26:54,050 --> 01:26:59,260
have a back-end for direct3d nowadays

01:26:57,110 --> 01:27:01,210
it's mostly

01:26:59,260 --> 01:27:03,160
it's not hundred-percent functionally

01:27:01,210 --> 01:27:08,260
equivalent to the OpenGL one but it's

01:27:03,160 --> 01:27:10,120
very close and that we're doing more

01:27:08,260 --> 01:27:11,770
research that's it's a question to some

01:27:10,120 --> 01:27:13,960
extent of finding the right abstractions

01:27:11,770 --> 01:27:16,840
and defining those and then the other

01:27:13,960 --> 01:27:18,070
other part is just work to implement

01:27:16,840 --> 01:27:20,470
that and you know they have been

01:27:18,070 --> 01:27:23,170
spreading so far so many different API

01:27:20,470 --> 01:27:24,940
so you know it's a lot of work to

01:27:23,170 --> 01:27:26,740
support them all so we'll do that we're

01:27:24,940 --> 01:27:30,010
doing things in stages as we see you

01:27:26,740 --> 01:27:34,150
know the needs from our users Thanks

01:27:30,010 --> 01:27:40,850
sure okay thank you everybody

01:27:34,150 --> 01:27:43,170
[Applause]

01:27:40,850 --> 01:27:45,270
bosch films can shoot your event with

01:27:43,170 --> 01:27:47,460
multiple cameras linked to presentation

01:27:45,270 --> 01:27:49,890
slides add titles and edit your event

01:27:47,460 --> 01:27:51,900
live for a full broadcast experience how

01:27:49,890 --> 01:27:54,410
is this even working so this is actually

01:27:51,900 --> 01:27:58,110
a more interesting program to you know

01:27:54,410 --> 01:28:00,300
look at it a lot of ways so let's

01:27:58,110 --> 01:28:02,820
profile it give a little bit of time to

01:28:00,300 --> 01:28:05,670
do a profile for it I'll see exactly

01:28:02,820 --> 01:28:07,080
what it is that's making this faster or

01:28:05,670 --> 01:28:08,580
slower based on the different inputs

01:28:07,080 --> 01:28:09,840
when you could really gain a lot of

01:28:08,580 --> 01:28:12,570
insight by actually looking at the

01:28:09,840 --> 01:28:14,790
profile like this I worked at Sesame

01:28:12,570 --> 01:28:16,710
Street I got brought on to be a writers

01:28:14,790 --> 01:28:19,050
assistant on a show called Sesame Street

01:28:16,710 --> 01:28:21,690
English which was to teach English to

01:28:19,050 --> 01:28:23,130
kids in China and Japan it seems very

01:28:21,690 --> 01:28:25,800
simple the shows that they put together

01:28:23,130 --> 01:28:28,320
but it's it's actually really hard to

01:28:25,800 --> 01:28:31,890
design a show that is not only for young

01:28:28,320 --> 01:28:33,690
kids but also the parents confession

01:28:31,890 --> 01:28:35,100
like this is therapeutic I hope you all

01:28:33,690 --> 01:28:36,390
get something out of this but if you

01:28:35,100 --> 01:28:40,020
don't the therapy will have been good

01:28:36,390 --> 01:28:42,510
for me so thank you seven years ago I

01:28:40,020 --> 01:28:44,670
was working I wasn't working through

01:28:42,510 --> 01:28:46,590
those when my previous employer which

01:28:44,670 --> 01:28:48,660
was large multinational investment bank

01:28:46,590 --> 01:28:52,200
I had what was up to that point

01:28:48,660 --> 01:28:55,170
the worst day of my career and then came

01:28:52,200 --> 01:28:57,750
the anger anger at ourselves because we

01:28:55,170 --> 01:29:01,050
knew we were responsible for America's

01:28:57,750 --> 01:29:03,150
first space disaster we wrote two more

01:29:01,050 --> 01:29:05,310
words into our vocabularies mission

01:29:03,150 --> 01:29:06,870
controllers tough and competent tough

01:29:05,310 --> 01:29:08,670
meeting we will never again shirk from

01:29:06,870 --> 01:29:10,410
our responsibilities because we are

01:29:08,670 --> 01:29:12,330
forever accountable for what we do

01:29:10,410 --> 01:29:14,520
competent we'll never again take

01:29:12,330 --> 01:29:16,410
anything for granted we will never stop

01:29:14,520 --> 01:29:18,810
learning from now and the team's and

01:29:16,410 --> 01:29:22,290
Mission Control will be perfect because

01:29:18,810 --> 01:29:26,850
as a team they must never fail one other

01:29:22,290 --> 01:29:29,430
thing we're all in a very fortunate

01:29:26,850 --> 01:29:30,510
position we've been very lucky in our

01:29:29,430 --> 01:29:33,510
lives

01:29:30,510 --> 01:29:36,660
and I think is part of the mission it's

01:29:33,510 --> 01:29:44,340
also good sometimes take that fortune

01:29:36,660 --> 01:29:46,770
and give back to make sure you take the

01:29:44,340 --> 01:29:47,520
pipe one and use it towards worthy

01:29:46,770 --> 01:29:50,640
causes

01:29:47,520 --> 01:29:52,440
that's good karma that's good stuff in

01:29:50,640 --> 01:29:54,030
the universe we understand that your

01:29:52,440 --> 01:29:56,670
event will have needs that are specific

01:29:54,030 --> 01:29:58,140
to your organization please email or

01:29:56,670 --> 01:30:00,150
call us directly to discuss your

01:29:58,140 --> 01:30:02,010
particular event we look forward to

01:30:00,150 --> 01:30:05,150
discussing your goals and helping make

01:30:02,010 --> 01:30:05,150

YouTube URL: https://www.youtube.com/watch?v=YWiAUUblD34


