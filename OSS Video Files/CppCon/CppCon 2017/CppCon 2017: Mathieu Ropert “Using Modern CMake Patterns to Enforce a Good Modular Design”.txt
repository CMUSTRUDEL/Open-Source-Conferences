Title: CppCon 2017: Mathieu Ropert “Using Modern CMake Patterns to Enforce a Good Modular Design”
Publication date: 2017-10-13
Playlist: CppCon 2017
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
CMake is the build system chosen by most open-source C++ projects. While it is fully capable of helping you enforce a good modular design, those features are usually not well known or understood. 

In this talk I will present modern CMake practices that will simplify your project build and help you design better C++ components with clear dependencies and build interfaces (the sum of compile flags required to use a given library). 

We will first do a quick recap of the theory behind modular design, most of it coming from John Lakos' work on Large Scale C++ Software Development. Then we will see a few of the legacy CMake patterns that can be found in a lot of open source projects and explain their shortcomings. We will learn how to create a clean C++ library using modern CMake practices and depend on it in others modules. Finally, we will explore the options available to export the build interfaces for use by external projects. In this last part a few external tools will be discussed such as pkg-config and Conan.
— 
Mathieu Ropert: Senior Developer, Murex

Mathieu is a Senior Developer at Murex where he works as a C++ expert and animates internal workshops & events. A long term open-source enthusiast, he tries to make C++ more portable across platforms. He is also co-host of the Paris C++ Meetup.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:05,759
hey guys well I hope you didn't have too

00:00:03,990 --> 00:00:11,130
much of a big lunch cuz I'm gonna talk

00:00:05,759 --> 00:00:13,110
for one hour about bill Feist just so I

00:00:11,130 --> 00:00:16,260
know I like to get a better feel of my

00:00:13,110 --> 00:00:21,539
audience who here likes to write bill

00:00:16,260 --> 00:00:24,990
files okay keep your hands up and

00:00:21,539 --> 00:00:29,220
then we like to write especially similes

00:00:24,990 --> 00:00:33,570
five okay for those watching on YouTube

00:00:29,220 --> 00:00:37,320
that was almost everybody all right yeah

00:00:33,570 --> 00:00:40,559
yeah I know I know it's it's it's a pain

00:00:37,320 --> 00:00:43,739
we usually think that it could be

00:00:40,559 --> 00:00:45,870
delegated to somebody else I mean for

00:00:43,739 --> 00:00:49,110
some of my time maybe not me because I'm

00:00:45,870 --> 00:00:50,879
like very super into make files and bill

00:00:49,110 --> 00:00:52,559
system maybe too much but for most

00:00:50,879 --> 00:00:55,469
people I guess if your manager came to

00:00:52,559 --> 00:00:57,120
you and told you I have a way that I

00:00:55,469 --> 00:00:58,559
don't know this external company or this

00:00:57,120 --> 00:00:59,879
guy down the hall is gonna write all

00:00:58,559 --> 00:01:03,059
your bill five for the rest of your life

00:00:59,879 --> 00:01:07,020
or say okay great great great

00:01:03,059 --> 00:01:09,510
so yeah for most of us it's a problem

00:01:07,020 --> 00:01:13,229
it's like it's like a hassles something

00:01:09,510 --> 00:01:15,810
that we would like to not do but well I

00:01:13,229 --> 00:01:17,460
start working with that for for some

00:01:15,810 --> 00:01:21,270
years and I discovered that actually it

00:01:17,460 --> 00:01:23,159
can have some purpose for example do you

00:01:21,270 --> 00:01:26,130
ever start with like a small application

00:01:23,159 --> 00:01:29,430
you built where the dependency graph

00:01:26,130 --> 00:01:32,520
looked like this it's very simple you

00:01:29,430 --> 00:01:33,000
have four lips and a simple diamond

00:01:32,520 --> 00:01:35,670
pattern

00:01:33,000 --> 00:01:39,180
you let that live and after I don't know

00:01:35,670 --> 00:01:43,369
a few norms years you get something like

00:01:39,180 --> 00:01:48,149
that sounds familiar so far all right

00:01:43,369 --> 00:01:50,880
yeah that happens to me too so what are

00:01:48,149 --> 00:01:53,880
we gonna talk about today we are going

00:01:50,880 --> 00:01:57,030
to see what's what's the idea between

00:01:53,880 --> 00:01:59,610
the theory behind modular design the

00:01:57,030 --> 00:02:02,009
idea that you should keep a clean graph

00:01:59,610 --> 00:02:06,590
dependency and a clear code architecture

00:02:02,009 --> 00:02:08,910
and how we can integrate Simek into that

00:02:06,590 --> 00:02:11,910
technically speaking any build system

00:02:08,910 --> 00:02:13,230
Worf its salt should be able to allow

00:02:11,910 --> 00:02:16,230
you to use some patterns

00:02:13,230 --> 00:02:18,090
that will give you the same results I'm

00:02:16,230 --> 00:02:22,200
just Jonah you see Meg because that's

00:02:18,090 --> 00:02:25,040
what everybody else uses if I chose

00:02:22,200 --> 00:02:28,709
github or any open source project really

00:02:25,040 --> 00:02:30,660
but really think of that as just an

00:02:28,709 --> 00:02:32,670
illustration any build system should be

00:02:30,660 --> 00:02:36,030
able to to provide you with the same

00:02:32,670 --> 00:02:38,430
thing and in fact most of what I will

00:02:36,030 --> 00:02:40,560
tell you today is taken from available

00:02:38,430 --> 00:02:43,230
systems some that are usually consider

00:02:40,560 --> 00:02:46,829
considered more modern that you also can

00:02:43,230 --> 00:02:48,959
have simply we see make without the well

00:02:46,829 --> 00:02:51,959
the big pain of changing entirely you

00:02:48,959 --> 00:02:55,170
are your build system a few words about

00:02:51,959 --> 00:02:57,810
me I'm a mature I'm from France you

00:02:55,170 --> 00:03:00,930
might have heard it already I work at

00:02:57,810 --> 00:03:03,030
murex and since one year I've been a

00:03:00,930 --> 00:03:07,349
contributor to Conan and all I got for

00:03:03,030 --> 00:03:09,030
my pain was this lousy t-shirt and well

00:03:07,349 --> 00:03:12,269
along the way I discovered a few things

00:03:09,030 --> 00:03:15,299
about cineq about packaging and about

00:03:12,269 --> 00:03:19,910
how do we use all that to make better

00:03:15,299 --> 00:03:22,410
code so let's talk a bit about cineq

00:03:19,910 --> 00:03:25,049
first thing that most people think is

00:03:22,410 --> 00:03:28,470
that Simek is a build system well it's

00:03:25,049 --> 00:03:31,680
not technically speaking it's a build

00:03:28,470 --> 00:03:35,250
system generator you tell him that you

00:03:31,680 --> 00:03:37,769
want to build a project and hole it does

00:03:35,250 --> 00:03:42,900
generate the build file for somebody

00:03:37,769 --> 00:03:46,019
else make ninja on on UNIX visual studio

00:03:42,900 --> 00:03:47,970
or something else on Windows it just

00:03:46,019 --> 00:03:51,209
does that it does not build by itself it

00:03:47,970 --> 00:03:57,269
just a meteor a description for the

00:03:51,209 --> 00:04:00,510
generator you use it's well almost 20

00:03:57,269 --> 00:04:03,720
years older now and it's used in lots of

00:04:00,510 --> 00:04:05,849
open source projects you might recognize

00:04:03,720 --> 00:04:09,180
a few and that's not limited to open

00:04:05,849 --> 00:04:13,980
source private company also use Simek

00:04:09,180 --> 00:04:17,549
internally and so what's the big the big

00:04:13,980 --> 00:04:21,539
deal with CMAC well basically it's maybe

00:04:17,549 --> 00:04:24,390
not the best but it's the less painful

00:04:21,539 --> 00:04:26,440
solution we have to handle portability

00:04:24,390 --> 00:04:28,570
in C++ because the

00:04:26,440 --> 00:04:30,670
which can be portable your libraries can

00:04:28,570 --> 00:04:33,040
be possible if your bill system is not

00:04:30,670 --> 00:04:34,660
if you have to write like again your

00:04:33,040 --> 00:04:37,360
bill fight for every system your not

00:04:34,660 --> 00:04:40,150
portable and what Simic does is that you

00:04:37,360 --> 00:04:43,330
can finally write the thing once and

00:04:40,150 --> 00:04:46,210
have it work everywhere and as we all

00:04:43,330 --> 00:04:49,870
know it was a big success for example if

00:04:46,210 --> 00:04:52,630
you want to invoke it on on a Windows

00:04:49,870 --> 00:04:54,970
machine that's how you do it and on a

00:04:52,630 --> 00:04:55,180
UNIX machine that's how you do it all

00:04:54,970 --> 00:04:58,360
right

00:04:55,180 --> 00:05:01,900
I almost portable I would say but well

00:04:58,360 --> 00:05:04,510
not so far so what what do I call modern

00:05:01,900 --> 00:05:06,040
Simic Yuma you might have seen that that

00:05:04,510 --> 00:05:08,230
was the title of my talk I'm not

00:05:06,040 --> 00:05:10,720
entirely found of the title myself but

00:05:08,230 --> 00:05:13,540
you know there's modern C++ why not

00:05:10,720 --> 00:05:16,240
modern cynic it's something that's been

00:05:13,540 --> 00:05:18,760
available for some time the first I

00:05:16,240 --> 00:05:22,840
would say first compatible release would

00:05:18,760 --> 00:05:24,730
be 2.8 or 12 but in practice a few

00:05:22,840 --> 00:05:28,630
months after that we moved to the new

00:05:24,730 --> 00:05:30,520
3.0 release which has a few more

00:05:28,630 --> 00:05:32,919
features but exactly the same philosophy

00:05:30,520 --> 00:05:36,040
and it's very important to note that

00:05:32,919 --> 00:05:38,050
it's 2.8 dot 12 because it's not a batch

00:05:36,040 --> 00:05:41,290
release if I change that in the new free

00:05:38,050 --> 00:05:43,930
branch but in the branch to the last one

00:05:41,290 --> 00:05:46,150
was also a feature release it's not

00:05:43,930 --> 00:05:49,270
semantic versioning so when I say 2 dot

00:05:46,150 --> 00:05:51,390
8.0 and 2.8 dot 12 there is like a huge

00:05:49,270 --> 00:05:53,860
array of feature that you're missing

00:05:51,390 --> 00:05:57,340
between the first and the last revision

00:05:53,860 --> 00:06:00,070
so how do I know that any project I open

00:05:57,340 --> 00:06:02,169
on github is not using modern Simek well

00:06:00,070 --> 00:06:04,510
that's easy I just have to look at the

00:06:02,169 --> 00:06:08,110
top line of your project and I see we

00:06:04,510 --> 00:06:10,480
pour 2.8 none of the feature or warranty

00:06:08,110 --> 00:06:12,190
to be available even more than that if

00:06:10,480 --> 00:06:14,580
you can have them because you have more

00:06:12,190 --> 00:06:17,230
recency makes you make make disable them

00:06:14,580 --> 00:06:20,460
because it wants to be compatible that's

00:06:17,230 --> 00:06:23,800
what you are telling him and that's how

00:06:20,460 --> 00:06:26,980
well yeah that makes me sad because

00:06:23,800 --> 00:06:28,720
you're missing out let me explain

00:06:26,980 --> 00:06:31,720
exactly what you're missing what you're

00:06:28,720 --> 00:06:35,190
missing is the opportunity to have your

00:06:31,720 --> 00:06:37,720
build system help you do a better design

00:06:35,190 --> 00:06:40,150
but before I explain that let me go back

00:06:37,720 --> 00:06:45,259
to what I call modules

00:06:40,150 --> 00:06:47,060
the ID was taken from John Laker stock

00:06:45,259 --> 00:06:49,969
that I had a privilege to watch last

00:06:47,060 --> 00:06:53,349
year free path talk very interesting

00:06:49,969 --> 00:06:56,840
like 1 million slide in three hours

00:06:53,349 --> 00:07:00,340
it comes from his book which is about

00:06:56,840 --> 00:07:05,240
the same length I think like 1,000 pages

00:07:00,340 --> 00:07:07,460
and I would try to summarize what I what

00:07:05,240 --> 00:07:09,650
I've taken from that for for this

00:07:07,460 --> 00:07:11,539
purpose so obviously it will not be

00:07:09,650 --> 00:07:13,669
everything because that's like a huge

00:07:11,539 --> 00:07:14,240
topic and John if you're watching this

00:07:13,669 --> 00:07:15,740
I'm sorry

00:07:14,240 --> 00:07:17,960
I'm gonna make mistakes I'm gonna forget

00:07:15,740 --> 00:07:18,849
something but the idea is there I hope

00:07:17,960 --> 00:07:21,680
so

00:07:18,849 --> 00:07:23,680
so to explain modular design I think the

00:07:21,680 --> 00:07:27,529
best light is to take a simple example

00:07:23,680 --> 00:07:30,139
imagine for a second that you join a

00:07:27,529 --> 00:07:32,449
small startup there's like maybe two or

00:07:30,139 --> 00:07:35,270
three developers and you have this big

00:07:32,449 --> 00:07:37,729
idea that you are gonna provide a

00:07:35,270 --> 00:07:42,229
service to compare and find the best

00:07:37,729 --> 00:07:44,240
taxi ride in your in your region so you

00:07:42,229 --> 00:07:45,949
you have this first first this direction

00:07:44,240 --> 00:07:48,620
you have to deliver a minimal project

00:07:45,949 --> 00:07:50,449
product just to demonstrate your your

00:07:48,620 --> 00:07:52,250
nice algorithm to your investors and

00:07:50,449 --> 00:07:55,210
obviously get some money and get funded

00:07:52,250 --> 00:07:57,889
for the rest so if you try to apply some

00:07:55,210 --> 00:08:00,740
some kind of model or design rules you

00:07:57,889 --> 00:08:03,319
try to keep concerns separated so we

00:08:00,740 --> 00:08:06,439
don't have a first first library that

00:08:03,319 --> 00:08:08,389
will end all the taxi prices the the

00:08:06,439 --> 00:08:10,009
description of your objects and a few

00:08:08,389 --> 00:08:12,889
Pareto's to manipulate them maybe mix

00:08:10,009 --> 00:08:14,810
terms or comparison whatever you will

00:08:12,889 --> 00:08:17,659
have a second one that we'll use to

00:08:14,810 --> 00:08:20,060
describe a client order like where

00:08:17,659 --> 00:08:21,860
what's his name what's his profile where

00:08:20,060 --> 00:08:24,259
does it come from

00:08:21,860 --> 00:08:26,810
where does you want to go that kind of

00:08:24,259 --> 00:08:29,539
stuff and the fine or is affair which is

00:08:26,810 --> 00:08:31,580
the result that's just a very schematic

00:08:29,539 --> 00:08:33,919
example but the idea is that to build

00:08:31,580 --> 00:08:35,750
your your calculator you actually depend

00:08:33,919 --> 00:08:37,849
on three modules which are completely

00:08:35,750 --> 00:08:40,789
independent and that you can test even

00:08:37,849 --> 00:08:43,099
without your super your super nice

00:08:40,789 --> 00:08:45,860
algorithm that's that's the point

00:08:43,099 --> 00:08:48,980
so that part usually we get it right

00:08:45,860 --> 00:08:52,550
because it's like for libraries and we

00:08:48,980 --> 00:08:55,459
are like to developers some time passes

00:08:52,550 --> 00:08:57,560
you you see you are investors we are

00:08:55,459 --> 00:08:58,130
very happy and say alright go go go for

00:08:57,560 --> 00:09:00,079
it go for it

00:08:58,130 --> 00:09:01,610
they developed me a full-service now the

00:09:00,079 --> 00:09:04,370
proof of concept was ok here is your

00:09:01,610 --> 00:09:06,019
funding okay so you have to take to the

00:09:04,370 --> 00:09:08,240
rest to talk to the rest of the world so

00:09:06,019 --> 00:09:11,060
first you write some kind of a JSON

00:09:08,240 --> 00:09:13,040
parser that's able to retrieve the

00:09:11,060 --> 00:09:15,620
prices from all the companies in your

00:09:13,040 --> 00:09:19,519
area ok then you want to serialize your

00:09:15,620 --> 00:09:22,880
clients your clients orders so you had

00:09:19,519 --> 00:09:25,279
some sequel database and you had a

00:09:22,880 --> 00:09:28,610
library to do this realizing note that

00:09:25,279 --> 00:09:30,620
at each time we decouple the problem

00:09:28,610 --> 00:09:33,470
first we have to depart with technical

00:09:30,620 --> 00:09:35,870
dependency on the JSON on the sequel

00:09:33,470 --> 00:09:39,800
library I still have the class that we

00:09:35,870 --> 00:09:41,630
present my my object and then I have one

00:09:39,800 --> 00:09:43,610
library that combines both the IDS that

00:09:41,630 --> 00:09:46,100
I can still work with them in isolation

00:09:43,610 --> 00:09:48,140
if tomorrow I decide that sequel is not

00:09:46,100 --> 00:09:51,290
the future that it's no sequel or that

00:09:48,140 --> 00:09:54,440
is whatever I can change that with no

00:09:51,290 --> 00:09:58,100
impact on the algorithm on what it's

00:09:54,440 --> 00:10:00,350
making my company money and of course we

00:09:58,100 --> 00:10:02,690
find we finish with anniversary Eliezer

00:10:00,350 --> 00:10:05,060
for the outputs of our algorithm in JSON

00:10:02,690 --> 00:10:07,100
okay we west of file we have followed

00:10:05,060 --> 00:10:09,949
the practices again we're still a small

00:10:07,100 --> 00:10:12,920
startup that that's fine ok we scale up

00:10:09,949 --> 00:10:15,649
even more our clients are very satisfied

00:10:12,920 --> 00:10:18,620
we can finally put all that in one night

00:10:15,649 --> 00:10:21,829
service so we add a dependency on the

00:10:18,620 --> 00:10:25,220
rest of a library which itself is using

00:10:21,829 --> 00:10:27,920
some HTTP library and we create at the

00:10:25,220 --> 00:10:31,190
top the simple route that takes a

00:10:27,920 --> 00:10:32,959
request check the prices and gives you a

00:10:31,190 --> 00:10:35,769
JSON response with the best price you

00:10:32,959 --> 00:10:38,739
can get for what you ask with

00:10:35,769 --> 00:10:40,449
so far okay that's a pretty cool example

00:10:38,739 --> 00:10:43,119
that's maybe what you want might have

00:10:40,449 --> 00:10:45,730
seen you know in some classes but then

00:10:43,119 --> 00:10:48,519
there's practice and in practice well

00:10:45,730 --> 00:10:51,489
it might look more like this you had

00:10:48,519 --> 00:10:54,759
some dependency that all kind of double

00:10:51,489 --> 00:10:57,399
use because you had to maybe run a rush

00:10:54,759 --> 00:11:00,220
or maybe you just didn't notice it it

00:10:57,399 --> 00:11:02,949
just went through a code review or you

00:11:00,220 --> 00:11:04,869
were tired well we have lots of excuses

00:11:02,949 --> 00:11:09,189
or I guess we give ourself lots of

00:11:04,869 --> 00:11:11,649
excuses anyway in practice your your

00:11:09,189 --> 00:11:14,379
code is not like this because you have

00:11:11,649 --> 00:11:16,929
circular dependencies so in practice

00:11:14,379 --> 00:11:21,429
your your two modules only one here and

00:11:16,929 --> 00:11:22,959
one there so directly if you start

00:11:21,429 --> 00:11:25,869
looking at your graph it's not that good

00:11:22,959 --> 00:11:28,540
you start to have a mix of concerns

00:11:25,869 --> 00:11:29,649
things that are not really in the same

00:11:28,540 --> 00:11:31,059
domain

00:11:29,649 --> 00:11:33,549
that's all bundled in the same library

00:11:31,059 --> 00:11:34,119
and you cannot already test one without

00:11:33,549 --> 00:11:36,999
the other

00:11:34,119 --> 00:11:42,040
so wow it's starting to get messy but

00:11:36,999 --> 00:11:44,410
you can still test most of it but in

00:11:42,040 --> 00:11:46,959
practice if you let that pattern go and

00:11:44,410 --> 00:11:48,759
go and go you up you end up with

00:11:46,959 --> 00:11:51,100
something like this which is one big

00:11:48,759 --> 00:11:53,529
blob which is your service and then

00:11:51,100 --> 00:11:54,879
maybe a few external libraries and if

00:11:53,529 --> 00:11:56,529
you're unlucky you may have even

00:11:54,879 --> 00:11:58,629
circular dependencies between your

00:11:56,529 --> 00:12:01,480
third-party libraries or the things that

00:11:58,629 --> 00:12:04,509
you consider really technical does that

00:12:01,480 --> 00:12:06,639
seem familiar to anyone okay all right

00:12:04,509 --> 00:12:08,019
you were silent I had a doubt for a

00:12:06,639 --> 00:12:11,949
moment like that but is that only me

00:12:08,019 --> 00:12:12,970
right now I'm convinced all right so

00:12:11,949 --> 00:12:15,040
what's the idea

00:12:12,970 --> 00:12:17,259
the basic idea between behind modular

00:12:15,040 --> 00:12:19,629
design is just that you you keep control

00:12:17,259 --> 00:12:21,759
of your dependency graph you make sure

00:12:19,629 --> 00:12:24,699
that when a library needs another

00:12:21,759 --> 00:12:26,559
library it's explicit and it can be

00:12:24,699 --> 00:12:28,959
checked but some kind of tool or

00:12:26,559 --> 00:12:31,559
reviewer to ensure that you are not

00:12:28,959 --> 00:12:34,449
creating a monster that you are not

00:12:31,559 --> 00:12:36,639
going through a huge mana left with

00:12:34,449 --> 00:12:40,540
circular dependency with nothing you can

00:12:36,639 --> 00:12:45,279
reuse or tests in an isolated

00:12:40,540 --> 00:12:47,779
wait and of course without so much ghost

00:12:45,279 --> 00:12:49,970
in this example you cannot reduce

00:12:47,779 --> 00:12:52,400
anything of your nice algorithm without

00:12:49,970 --> 00:12:54,680
the whole stack in this one it's still

00:12:52,400 --> 00:13:00,589
possible and the furthest we go the

00:12:54,680 --> 00:13:04,460
better and then there are modern dual

00:13:00,589 --> 00:13:06,500
systems they came back but I'm not sure

00:13:04,460 --> 00:13:10,820
which one I would I would call the first

00:13:06,500 --> 00:13:13,640
one what we might have heard about base

00:13:10,820 --> 00:13:15,710
all at Google or the Java clones that

00:13:13,640 --> 00:13:17,660
came up afterwards like Burke or pants

00:13:15,710 --> 00:13:19,339
whatever they all have the same

00:13:17,660 --> 00:13:22,760
philosophy behind them is that we are

00:13:19,339 --> 00:13:27,290
very explicit in what you say you are

00:13:22,760 --> 00:13:30,740
really explicit about what you ask to in

00:13:27,290 --> 00:13:32,870
terms of build you you only you only ask

00:13:30,740 --> 00:13:35,510
for what you use and the system will

00:13:32,870 --> 00:13:39,020
forbid you to use something that you did

00:13:35,510 --> 00:13:40,520
not declare and that's the key if you do

00:13:39,020 --> 00:13:43,339
not declare something that you can use

00:13:40,520 --> 00:13:47,410
it you will have a problem because it

00:13:43,339 --> 00:13:49,910
will slip through at some point and

00:13:47,410 --> 00:13:52,610
that's exactly the idea of a modern dual

00:13:49,910 --> 00:13:55,520
system is that it protects you against

00:13:52,610 --> 00:13:57,530
bad patterns and it helps you leverage

00:13:55,520 --> 00:14:02,600
on that to make sure that you keep a

00:13:57,530 --> 00:14:05,900
clean architecture so if you come back

00:14:02,600 --> 00:14:08,450
to see Meg what what would happen what

00:14:05,900 --> 00:14:11,870
happens today in most projects in what I

00:14:08,450 --> 00:14:14,000
call well not so modern image if I try

00:14:11,870 --> 00:14:16,250
to to build like I don't know a small

00:14:14,000 --> 00:14:20,120
project with just a TCP client and its

00:14:16,250 --> 00:14:23,000
own TCP library very simple - truly -

00:14:20,120 --> 00:14:24,760
like no reason why every one executable

00:14:23,000 --> 00:14:31,430
that's it

00:14:24,760 --> 00:14:33,410
well what do you think of that does this

00:14:31,430 --> 00:14:39,170
sound like something you might have seen

00:14:33,410 --> 00:14:41,680
or or even written seems ok well first

00:14:39,170 --> 00:14:45,800
thing I I had a subdirectory which is my

00:14:41,680 --> 00:14:48,680
library I declare an executable I add

00:14:45,800 --> 00:14:50,810
the necessary include directory possibly

00:14:48,680 --> 00:14:53,990
some flags if I need like

00:14:50,810 --> 00:14:57,430
ipv6 in that case and then I told C make

00:14:53,990 --> 00:15:01,009
that my binary depends on the library

00:14:57,430 --> 00:15:04,339
and the problem with that sorry

00:15:01,009 --> 00:15:06,740
the problem with that is that I'm not

00:15:04,339 --> 00:15:09,910
I'm not expressing myself in some of

00:15:06,740 --> 00:15:13,430
modules here I am NOT saying C Meg I

00:15:09,910 --> 00:15:16,459
have this I have this binary it needs

00:15:13,430 --> 00:15:19,759
this library I'm selling C Meg I have

00:15:16,459 --> 00:15:22,579
this binary it needs those headers it

00:15:19,759 --> 00:15:24,920
need those flags and then it needs to

00:15:22,579 --> 00:15:26,689
links to that I'm not talking about

00:15:24,920 --> 00:15:30,230
modules I'm talking about build flags

00:15:26,689 --> 00:15:33,889
and there is there is a world behind

00:15:30,230 --> 00:15:37,519
beyond those two you can you can miss a

00:15:33,889 --> 00:15:39,230
lot of things and it doesn't scale if I

00:15:37,519 --> 00:15:41,810
build up on my TCP library for another

00:15:39,230 --> 00:15:43,910
project and I want that I don't know an

00:15:41,810 --> 00:15:46,040
HTTP library and then the rest library

00:15:43,910 --> 00:15:49,009
what will happen to my build flags

00:15:46,040 --> 00:15:53,149
well TCP is quite clean I just have my

00:15:49,009 --> 00:15:54,889
new site ECP and - d ipv6 then I do the

00:15:53,149 --> 00:15:57,920
Lib HTTP I have to copy paste those

00:15:54,889 --> 00:16:00,879
flags plus the flags for the photo

00:15:57,920 --> 00:16:05,000
library itself and then again same thing

00:16:00,879 --> 00:16:08,870
for the the library just up ahead and it

00:16:05,000 --> 00:16:10,850
doesn't scale every time you have a

00:16:08,870 --> 00:16:12,559
public dependency that means that you

00:16:10,850 --> 00:16:14,149
would have to take all the public flags

00:16:12,559 --> 00:16:17,269
from the library you're using and copy

00:16:14,149 --> 00:16:20,089
them in your cemeteries and if you go to

00:16:17,269 --> 00:16:22,970
like three four five iteration you end

00:16:20,089 --> 00:16:25,129
up with like I don't know three lines of

00:16:22,970 --> 00:16:26,990
flags that you have to add to your

00:16:25,129 --> 00:16:30,290
library or to your program to be able to

00:16:26,990 --> 00:16:33,559
compile that's what I am afraid that's

00:16:30,290 --> 00:16:35,300
what I see in some projects and what do

00:16:33,559 --> 00:16:37,309
you do usually you just give up because

00:16:35,300 --> 00:16:38,990
it's just a nightmare to maintain if you

00:16:37,309 --> 00:16:40,970
have to change the library that's at the

00:16:38,990 --> 00:16:43,129
root you have to modify everything in

00:16:40,970 --> 00:16:44,600
your system so what do you do you go to

00:16:43,129 --> 00:16:46,189
the top see make file and you say all

00:16:44,600 --> 00:16:46,879
right everybody can include that

00:16:46,189 --> 00:16:49,639
directory

00:16:46,879 --> 00:16:53,120
everybody can link to that done and

00:16:49,639 --> 00:16:55,100
that's the only sane way you can well

00:16:53,120 --> 00:16:57,170
that's the only sane way you you might

00:16:55,100 --> 00:16:59,809
think you can do it and I won't blame

00:16:57,170 --> 00:17:02,389
you for that I did the same thing and

00:16:59,809 --> 00:17:03,769
the idea is that see make as another way

00:17:02,389 --> 00:17:07,850
and must build system

00:17:03,769 --> 00:17:10,579
have another way because if you're

00:17:07,850 --> 00:17:12,169
thinking about flags you're not thinking

00:17:10,579 --> 00:17:13,939
about modules you're not thinking about

00:17:12,169 --> 00:17:18,709
architecture you're just thinking in

00:17:13,939 --> 00:17:21,140
terms of - E - D it's a mess it has no

00:17:18,709 --> 00:17:23,569
sense there is no way for you to try to

00:17:21,140 --> 00:17:26,630
reason about it and think about alright

00:17:23,569 --> 00:17:29,270
am I including this stuff is there like

00:17:26,630 --> 00:17:31,429
a good reason for it or am I just I

00:17:29,270 --> 00:17:34,460
don't know grabbing things that I should

00:17:31,429 --> 00:17:37,250
not think that maybe depend on me while

00:17:34,460 --> 00:17:38,440
I'm depending on them how can you know

00:17:37,250 --> 00:17:43,190
how can you tell

00:17:38,440 --> 00:17:44,899
personally I can't the other way around

00:17:43,190 --> 00:17:47,899
if you just declare modules if you just

00:17:44,899 --> 00:17:51,140
say I have like like B and it depends on

00:17:47,899 --> 00:17:54,649
leave a even if you scale that like 100

00:17:51,140 --> 00:17:57,409
or 1000 module I mean every intern at

00:17:54,649 --> 00:18:00,020
your company can take that do a graph

00:17:57,409 --> 00:18:02,600
I'll put that to the dot file and just

00:18:00,020 --> 00:18:05,120
draw you the graph and I'm pretty sure

00:18:02,600 --> 00:18:08,029
it's easy to write some kind of

00:18:05,120 --> 00:18:10,190
sanitizer or check tool that you can run

00:18:08,029 --> 00:18:12,110
on your on your git commit on your pull

00:18:10,190 --> 00:18:13,580
request to tell you all right you have

00:18:12,110 --> 00:18:15,830
introduced a circular dependency you

00:18:13,580 --> 00:18:17,990
cannot do that if you reason and some of

00:18:15,830 --> 00:18:21,250
modules it just become a graph if you

00:18:17,990 --> 00:18:26,210
reason in terms of huge list of flags

00:18:21,250 --> 00:18:29,419
while you can't do anything just AK so

00:18:26,210 --> 00:18:34,250
the idea behind a modular module system

00:18:29,419 --> 00:18:35,750
is simply to protect you from 4 4 4 4

00:18:34,250 --> 00:18:37,580
circular dependencies or at least tell

00:18:35,750 --> 00:18:39,200
you when you're doing it you might I

00:18:37,580 --> 00:18:41,600
don't think you could have a good reason

00:18:39,200 --> 00:18:45,139
but some of them will let you override

00:18:41,600 --> 00:18:47,299
that if you really need to of course

00:18:45,139 --> 00:18:50,600
like I said the idea is that you can

00:18:47,299 --> 00:18:53,029
resume at module level really not talk

00:18:50,600 --> 00:18:54,679
about flags and basically it means that

00:18:53,029 --> 00:18:57,279
the build system is doing more that when

00:18:54,679 --> 00:19:00,110
you're telling him it's not just a

00:18:57,279 --> 00:19:01,870
script file that's doing blindly what

00:19:00,110 --> 00:19:05,720
you're telling him like a German robot

00:19:01,870 --> 00:19:07,950
he is trying to make meaning on what

00:19:05,720 --> 00:19:10,110
you're building and say aaaa

00:19:07,950 --> 00:19:12,419
I'm not in your place but if I were you

00:19:10,110 --> 00:19:14,940
I will not do that I'm pretty sure

00:19:12,419 --> 00:19:17,279
you're not doing what you should be

00:19:14,940 --> 00:19:20,130
doing the same way your compiler can

00:19:17,279 --> 00:19:22,350
tell you when we even if it doesn't stop

00:19:20,130 --> 00:19:23,970
you that you are returning I don't know

00:19:22,350 --> 00:19:26,760
the address of a local viable or

00:19:23,970 --> 00:19:28,350
something else that in 99% of the case

00:19:26,760 --> 00:19:33,299
is a bad pattern and that you should

00:19:28,350 --> 00:19:35,940
avoid so in practice how does it work

00:19:33,299 --> 00:19:37,590
it's simple each module will define of

00:19:35,940 --> 00:19:39,029
course to build flags it needs because

00:19:37,590 --> 00:19:40,710
well you have to define them somewhere

00:19:39,029 --> 00:19:43,950
around that kind of I'm not gonna go in

00:19:40,710 --> 00:19:46,350
a way now just localized you just tell

00:19:43,950 --> 00:19:48,899
all right this is my my module this is

00:19:46,350 --> 00:19:50,730
what it needs to build then you say

00:19:48,899 --> 00:19:54,360
alright this is what I require this is

00:19:50,730 --> 00:19:55,799
the dependencies I use but you talk

00:19:54,360 --> 00:19:59,909
about dependency you don't talk about

00:19:55,799 --> 00:20:02,159
flags you do not look at the other

00:19:59,909 --> 00:20:05,190
modules internal that's not your concern

00:20:02,159 --> 00:20:07,440
you just say I won't be give me the

00:20:05,190 --> 00:20:10,710
flags I need to compile and Link with

00:20:07,440 --> 00:20:13,260
leaf will it be I will do not look at

00:20:10,710 --> 00:20:15,690
the at the build file and say ok in that

00:20:13,260 --> 00:20:17,669
case I may need to put that flag because

00:20:15,690 --> 00:20:23,250
I'm using that feature that's that's not

00:20:17,669 --> 00:20:27,659
maintainable of course you need to split

00:20:23,250 --> 00:20:29,130
your own bill flags in two sets private

00:20:27,659 --> 00:20:31,919
and public that's exactly like the

00:20:29,130 --> 00:20:35,039
object concern of of implementation

00:20:31,919 --> 00:20:36,809
versus interface your private flag is

00:20:35,039 --> 00:20:39,510
your implementation the flag that you

00:20:36,809 --> 00:20:40,440
need to build but once you're built you

00:20:39,510 --> 00:20:44,279
can't throw that away

00:20:40,440 --> 00:20:46,889
nobody cares you just needed that to to

00:20:44,279 --> 00:20:49,049
get a binary the second set is the

00:20:46,889 --> 00:20:51,720
public ones it's like your public

00:20:49,049 --> 00:20:55,139
includes the define that will affect

00:20:51,720 --> 00:20:57,720
your your compilation all that stuff and

00:20:55,139 --> 00:21:01,679
that your clients will also need to be

00:20:57,720 --> 00:21:04,350
able to compile and of course the

00:21:01,679 --> 00:21:07,049
interfaces of transitive that means that

00:21:04,350 --> 00:21:09,570
if you have a private dependency you

00:21:07,049 --> 00:21:11,820
take their modules but then it stops if

00:21:09,570 --> 00:21:16,230
you have a public dependency it adds to

00:21:11,820 --> 00:21:18,210
your public interface for example if we

00:21:16,230 --> 00:21:21,690
look at what we we had a previous

00:21:18,210 --> 00:21:23,550
example with TCP HTTP and right

00:21:21,690 --> 00:21:25,200
it's all public dependencies so the

00:21:23,550 --> 00:21:28,530
flags have to be repeated at each step

00:21:25,200 --> 00:21:31,380
if that was a private dependency it

00:21:28,530 --> 00:21:33,750
would stop at the first consumer because

00:21:31,380 --> 00:21:35,400
he needs them to build but then since

00:21:33,750 --> 00:21:37,620
it's five ads it's not seen by the rest

00:21:35,400 --> 00:21:39,450
of the world the rest of the world does

00:21:37,620 --> 00:21:47,460
not need to have the strikes to build

00:21:39,450 --> 00:21:50,760
successfully and of course you still

00:21:47,460 --> 00:21:52,530
have flags I mean you have a restricted

00:21:50,760 --> 00:21:55,320
set of flags you only care about the

00:21:52,530 --> 00:21:58,770
flags you will use in your module but

00:21:55,320 --> 00:22:00,300
you can still put them all the ones you

00:21:58,770 --> 00:22:01,680
you still use in the past you can still

00:22:00,300 --> 00:22:03,360
have them and I'm not telling you to

00:22:01,680 --> 00:22:07,980
stop using flags at all you still with

00:22:03,360 --> 00:22:10,320
them I mean this - a deuce - mine use W

00:22:07,980 --> 00:22:12,330
whatever you still need them but you

00:22:10,320 --> 00:22:14,480
need to localize that you need to make

00:22:12,330 --> 00:22:24,210
sure that it does not escape

00:22:14,480 --> 00:22:29,010
Yosi makefile so all that is nice but

00:22:24,210 --> 00:22:30,780
how about seaming right that that's nice

00:22:29,010 --> 00:22:33,750
I show you something that's taken from

00:22:30,780 --> 00:22:35,760
like fury like maybe some some nice

00:22:33,750 --> 00:22:38,070
system that's that that's going on at

00:22:35,760 --> 00:22:40,110
another company but you you are you you

00:22:38,070 --> 00:22:42,390
are using C Mac I am using C Mac and

00:22:40,110 --> 00:22:44,910
publishing stuff on github can I use

00:22:42,390 --> 00:22:46,590
that with Simek and I would not be here

00:22:44,910 --> 00:22:50,730
if their answer was not yes you can

00:22:46,590 --> 00:22:55,020
there is actually an answer what's the

00:22:50,730 --> 00:22:58,080
idea there it is simple really well you

00:22:55,020 --> 00:23:00,720
still use the old add library add

00:22:58,080 --> 00:23:03,600
executable that part is still the same -

00:23:00,720 --> 00:23:06,540
I didn't have your familiarity with

00:23:03,600 --> 00:23:08,180
CMake but I hope that everybody is clear

00:23:06,540 --> 00:23:12,750
on that so far

00:23:08,180 --> 00:23:14,720
okay great and then every time you have

00:23:12,750 --> 00:23:19,740
to put some flag you use the target

00:23:14,720 --> 00:23:20,280
variant of whatever you you need to set

00:23:19,740 --> 00:23:23,280
some Flags

00:23:20,280 --> 00:23:25,380
I will give some details after that then

00:23:23,280 --> 00:23:27,900
if you want to declare dependencies you

00:23:25,380 --> 00:23:31,170
use target link libraries its hopefully

00:23:27,900 --> 00:23:33,610
named because if you want to link with

00:23:31,170 --> 00:23:36,640
like the direct library with a

00:23:33,610 --> 00:23:39,010
and if you want to link with a module

00:23:36,640 --> 00:23:43,090
with a project and take its its

00:23:39,010 --> 00:23:45,100
interface it's the same syntax it it's

00:23:43,090 --> 00:23:47,410
it's really a limitation of cm8 I would

00:23:45,100 --> 00:23:49,030
I wish there was another keyword so that

00:23:47,410 --> 00:23:51,970
you can distinguish between those two

00:23:49,030 --> 00:23:53,440
there's not so yeah it's called target

00:23:51,970 --> 00:23:55,179
link libraries but in practice you're

00:23:53,440 --> 00:23:57,130
not just telling me seem like that you

00:23:55,179 --> 00:23:59,890
want to link to a library you're telling

00:23:57,130 --> 00:24:02,710
Simic I'm using that dependency please

00:23:59,890 --> 00:24:06,940
give me all the Flyers I need to build

00:24:02,710 --> 00:24:08,440
successfully and of course every time

00:24:06,940 --> 00:24:10,510
you have to specify property for your

00:24:08,440 --> 00:24:14,970
face or your build files you say if it's

00:24:10,510 --> 00:24:18,010
public or private let's see an example

00:24:14,970 --> 00:24:21,460
okay first part is easy you start by

00:24:18,010 --> 00:24:25,720
requiring at least well technically you

00:24:21,460 --> 00:24:29,380
could put 2.8 dot 12 but I think 3.0 is

00:24:25,720 --> 00:24:33,160
not something to make to ask for most of

00:24:29,380 --> 00:24:35,590
the world it's it's five or years old

00:24:33,160 --> 00:24:37,030
now you should be fine with that of

00:24:35,590 --> 00:24:38,950
course you can go crazy and you can have

00:24:37,030 --> 00:24:40,540
food outline if you want I won't stop

00:24:38,950 --> 00:24:42,730
you on the contrary there are lots of

00:24:40,540 --> 00:24:48,669
interesting feature in that but at least

00:24:42,730 --> 00:24:53,080
3.0 then well first counter example you

00:24:48,669 --> 00:24:56,740
might still declare some flags at at the

00:24:53,080 --> 00:24:59,230
top level why well that comes from my

00:24:56,740 --> 00:25:01,299
experience and in my experience there

00:24:59,230 --> 00:25:04,299
are some kind of compilation flags that

00:25:01,299 --> 00:25:06,700
you do not want to localize for some

00:25:04,299 --> 00:25:09,429
particular module you want to put them

00:25:06,700 --> 00:25:12,429
everywhere and the most important is

00:25:09,429 --> 00:25:15,910
anything that's a combination of w0 and

00:25:12,429 --> 00:25:18,820
W something because there is nothing

00:25:15,910 --> 00:25:20,650
worse than changing your code and a

00:25:18,820 --> 00:25:22,630
vineet break because in your header

00:25:20,650 --> 00:25:24,880
there is something that will not compile

00:25:22,630 --> 00:25:27,970
in one of your clients because he has is

00:25:24,880 --> 00:25:29,590
more strict than you I don't know if it

00:25:27,970 --> 00:25:31,990
happened to you guys but it happened to

00:25:29,590 --> 00:25:35,919
me a lot of time and that's very painful

00:25:31,990 --> 00:25:38,710
so I said that some flags might still be

00:25:35,919 --> 00:25:41,130
better off at the top level to make sure

00:25:38,710 --> 00:25:44,530
that all the project is on the same page

00:25:41,130 --> 00:25:47,049
and I would ask the same thing for

00:25:44,530 --> 00:25:50,769
anything that affects the ABI

00:25:47,049 --> 00:25:52,840
standard level or that kind of thing

00:25:50,769 --> 00:25:57,269
because if not you will get some

00:25:52,840 --> 00:26:00,249
incompatibilities alright then you still

00:25:57,269 --> 00:26:02,049
do your art library nothing fancy here

00:26:00,249 --> 00:26:03,610
Oh same thing you've been doing for I

00:26:02,049 --> 00:26:07,629
don't know how much you'll be using see

00:26:03,610 --> 00:26:08,049
Meg but that part doesn't change all

00:26:07,629 --> 00:26:09,970
right

00:26:08,049 --> 00:26:13,239
and now we come to the the meat of the

00:26:09,970 --> 00:26:16,090
thing first you want to declare some

00:26:13,239 --> 00:26:19,330
public headers so you say all right

00:26:16,090 --> 00:26:21,879
target include directories you say it's

00:26:19,330 --> 00:26:22,539
public and you get the path that tells

00:26:21,879 --> 00:26:24,999
Simic

00:26:22,539 --> 00:26:27,580
all right in the build and face of my of

00:26:24,999 --> 00:26:29,409
my project anybody who wants to use my

00:26:27,580 --> 00:26:32,619
project will need this include directory

00:26:29,409 --> 00:26:35,889
to find my headers if you have some

00:26:32,619 --> 00:26:38,559
public headers for example in your SRC

00:26:35,889 --> 00:26:42,190
directory you just add the same thing

00:26:38,559 --> 00:26:43,899
with private you'll be able to include

00:26:42,190 --> 00:26:48,480
them in your project anybody else won't

00:26:43,899 --> 00:26:50,559
see them if you have some settings

00:26:48,480 --> 00:26:53,259
something that depends on the config of

00:26:50,559 --> 00:26:55,299
Simek whatever you can also put them

00:26:53,259 --> 00:26:57,700
with the compile definition or whatever

00:26:55,299 --> 00:27:00,009
in this case it's a public setting but

00:26:57,700 --> 00:27:01,600
if it would have been a private setting

00:27:00,009 --> 00:27:05,109
you would just have set private instead

00:27:01,600 --> 00:27:08,200
that's the same idea if you want if the

00:27:05,109 --> 00:27:10,359
if the setting will have an impact on

00:27:08,200 --> 00:27:11,919
your public headers like change the size

00:27:10,359 --> 00:27:13,809
of the structure or maybe hide some

00:27:11,919 --> 00:27:16,389
declarations you need to make that

00:27:13,809 --> 00:27:18,850
public if it's only internal detail like

00:27:16,389 --> 00:27:20,799
I'm gonna use this algorithm internally

00:27:18,850 --> 00:27:23,200
or that algorithm and that don't change

00:27:20,799 --> 00:27:25,450
your API or your implementation or

00:27:23,200 --> 00:27:30,009
public implementation you can put it

00:27:25,450 --> 00:27:32,109
private it's fine and of course then you

00:27:30,009 --> 00:27:34,450
have to declare your dependency and

00:27:32,109 --> 00:27:37,419
again I'm sad that there is not a

00:27:34,450 --> 00:27:40,600
special keyword that's different from

00:27:37,419 --> 00:27:43,649
the old one to express that but trust me

00:27:40,600 --> 00:27:47,559
in that if I say target link library

00:27:43,649 --> 00:27:51,039
something ABC and ABC is a project I

00:27:47,559 --> 00:27:52,989
will get all the public flags that are

00:27:51,039 --> 00:27:56,909
declared I will get the link flags I

00:27:52,989 --> 00:27:59,750
need and that's recursive if I need

00:27:56,909 --> 00:28:03,080
transitively some some income flags

00:27:59,750 --> 00:28:05,390
or some lien flags I will get them it

00:28:03,080 --> 00:28:07,720
will even go across static libraries

00:28:05,390 --> 00:28:11,090
because as you already know I think

00:28:07,720 --> 00:28:12,740
static libraries are not linked so if

00:28:11,090 --> 00:28:15,590
you have a dependency inside the static

00:28:12,740 --> 00:28:18,740
library Simek will remember that and the

00:28:15,590 --> 00:28:22,250
first shared library or executable that

00:28:18,740 --> 00:28:25,429
it encounters will link to it it's taken

00:28:22,250 --> 00:28:28,100
care of for you and of course if you

00:28:25,429 --> 00:28:29,960
have a private dependency like something

00:28:28,100 --> 00:28:32,270
that your implementation relies on but

00:28:29,960 --> 00:28:35,090
it's not visible for your headers you

00:28:32,270 --> 00:28:37,190
can put it private it would work too and

00:28:35,090 --> 00:28:38,809
it will not be seen by your consumers

00:28:37,190 --> 00:28:41,179
meaning that for example if you use

00:28:38,809 --> 00:28:42,830
boost but if you do not want the rest of

00:28:41,179 --> 00:28:44,000
the world to see boost or if you want to

00:28:42,830 --> 00:28:45,679
make sure that the rest of the world

00:28:44,000 --> 00:28:49,820
will not use boost unless this declare

00:28:45,679 --> 00:28:52,970
you make it private and only people with

00:28:49,820 --> 00:28:55,940
explicit reference to it will see it and

00:28:52,970 --> 00:28:58,809
and that's a huge point because what

00:28:55,940 --> 00:29:01,100
happened a lot my experience is that

00:28:58,809 --> 00:29:03,530
everything that can be found through

00:29:01,100 --> 00:29:06,320
auto completion inside your IDE will get

00:29:03,530 --> 00:29:07,940
used by people even if it's not publicly

00:29:06,320 --> 00:29:10,970
declared but it's available for

00:29:07,940 --> 00:29:12,770
transitive dependencies so the less you

00:29:10,970 --> 00:29:13,820
have in your public API in your public

00:29:12,770 --> 00:29:16,520
interface that there are the more

00:29:13,820 --> 00:29:18,860
private you got you're sure that people

00:29:16,520 --> 00:29:20,690
will have to be explicit about them and

00:29:18,860 --> 00:29:22,700
you reduce the risk that your

00:29:20,690 --> 00:29:27,890
architecture will start to go bad like I

00:29:22,700 --> 00:29:30,320
said in the first slide if you got a

00:29:27,890 --> 00:29:33,919
header or any libraries which is kind of

00:29:30,320 --> 00:29:37,240
the fashion today you can simply declare

00:29:33,919 --> 00:29:41,539
an interface library interface is a

00:29:37,240 --> 00:29:43,640
peculiar keyword in a it's image that

00:29:41,539 --> 00:29:45,990
tells it that something belongs to you

00:29:43,640 --> 00:29:48,660
to your public

00:29:45,990 --> 00:29:50,970
to your public interface but should not

00:29:48,660 --> 00:29:52,770
be used to build your library of course

00:29:50,970 --> 00:29:55,200
because it's it's a header only you have

00:29:52,770 --> 00:29:57,000
nothing to build so if you have nothing

00:29:55,200 --> 00:30:00,750
to build but you want your clients to

00:29:57,000 --> 00:30:03,750
see it you make it interface and you can

00:30:00,750 --> 00:30:08,429
even link to something you can say for

00:30:03,750 --> 00:30:10,500
example my my header on e libraries will

00:30:08,429 --> 00:30:13,559
need this client to be linked to that

00:30:10,500 --> 00:30:15,059
you can you can add a link dependency it

00:30:13,559 --> 00:30:17,220
will work Simic will take care of

00:30:15,059 --> 00:30:19,890
everything because that may happen you

00:30:17,220 --> 00:30:22,170
may have a header on a libraries that

00:30:19,890 --> 00:30:27,990
needs something that's not header only

00:30:22,170 --> 00:30:34,890
it would work like I said nothing to

00:30:27,990 --> 00:30:37,740
build think interface now that we we've

00:30:34,890 --> 00:30:40,170
seen most of the good patterns I want to

00:30:37,740 --> 00:30:41,970
take just a few seconds to recognize the

00:30:40,170 --> 00:30:43,860
fancy patterns that the bad things

00:30:41,970 --> 00:30:45,360
that's the kind of thing when you open

00:30:43,860 --> 00:30:49,170
the see make list that tells you that

00:30:45,360 --> 00:30:50,940
you probably need to rewrite it a bit so

00:30:49,170 --> 00:30:53,880
of course everything that affects all

00:30:50,940 --> 00:30:56,610
targets like include directories at

00:30:53,880 --> 00:30:58,950
definition link libraries this kind of

00:30:56,610 --> 00:31:01,290
thing or evil if you put them on your

00:30:58,950 --> 00:31:02,910
top level everybody in the world will be

00:31:01,290 --> 00:31:05,090
able to use them everybody in the world

00:31:02,910 --> 00:31:08,070
will be able to include that headers and

00:31:05,090 --> 00:31:09,780
if for some reason the code does not

00:31:08,070 --> 00:31:11,670
require your link like for example

00:31:09,780 --> 00:31:14,490
header on the libraries or inline

00:31:11,670 --> 00:31:15,240
templates whatever you will not even get

00:31:14,490 --> 00:31:18,120
a compiler

00:31:15,240 --> 00:31:20,820
people will start creating hidden

00:31:18,120 --> 00:31:26,760
dependencies through other modules and

00:31:20,820 --> 00:31:29,490
they will not even see them of course

00:31:26,760 --> 00:31:31,080
link libraries I think she may have told

00:31:29,490 --> 00:31:33,059
people like for 10 years now to stop

00:31:31,080 --> 00:31:34,559
using it because it just means every

00:31:33,059 --> 00:31:36,780
project in the world should link that

00:31:34,559 --> 00:31:39,390
well I'm not Admiral shrub anybody in

00:31:36,780 --> 00:31:50,450
this room will be using this but just in

00:31:39,390 --> 00:31:50,450
case don't okay then yeah

00:31:59,020 --> 00:32:04,250
yeah yeah yeah I know the only the

00:32:01,970 --> 00:32:06,880
targets and you declare in this file and

00:32:04,250 --> 00:32:09,230
all the sub directories you include

00:32:06,880 --> 00:32:18,770
unless you start a new project

00:32:09,230 --> 00:32:21,169
I will not Wow I will not say it's okay

00:32:18,770 --> 00:32:23,659
to using any at any points because they

00:32:21,169 --> 00:32:25,760
will not affect your interface at all so

00:32:23,659 --> 00:32:28,070
if you declare any include directory for

00:32:25,760 --> 00:32:30,200
example that's that your clients will

00:32:28,070 --> 00:32:31,880
also need because for example happy on

00:32:30,200 --> 00:32:34,280
your headers you ever have to copy paste

00:32:31,880 --> 00:32:39,559
that also to be able to work I will not

00:32:34,280 --> 00:32:41,240
recommend using that at all well I will

00:32:39,559 --> 00:32:44,960
be happy to discuss that with you

00:32:41,240 --> 00:32:47,390
afterwards because frankly I not seen

00:32:44,960 --> 00:32:49,909
them in my career maybe for very small

00:32:47,390 --> 00:32:51,860
project but just like you know the tests

00:32:49,909 --> 00:32:54,980
or something like for that yeah but for

00:32:51,860 --> 00:32:58,580
a huge application that's coming to bite

00:32:54,980 --> 00:33:01,460
me in at some point and I will get

00:32:58,580 --> 00:33:03,620
exactly the same the same warning

00:33:01,460 --> 00:33:06,370
against using target include directories

00:33:03,620 --> 00:33:08,720
to include anything outside your project

00:33:06,370 --> 00:33:11,210
because if you include something outside

00:33:08,720 --> 00:33:13,039
your library well you're working the

00:33:11,210 --> 00:33:14,870
walls again you're not trying to use a

00:33:13,039 --> 00:33:16,610
dependency you're trying to use headers

00:33:14,870 --> 00:33:19,789
from somebody you're trying to pull

00:33:16,610 --> 00:33:22,669
something that's not yours to use it

00:33:19,789 --> 00:33:24,380
without declaring explicitly I have a

00:33:22,669 --> 00:33:25,730
dependency to that module and then

00:33:24,380 --> 00:33:27,830
you're breaking the rules of talking

00:33:25,730 --> 00:33:29,860
about modules instead of talking about

00:33:27,830 --> 00:33:33,490
implementation and that's the thing here

00:33:29,860 --> 00:33:36,740
what I encourage you to do is to declare

00:33:33,490 --> 00:33:39,980
dependencies two modules not build flags

00:33:36,740 --> 00:33:45,320
because it's awful to reason about at

00:33:39,980 --> 00:33:47,059
scale since target link libraries is an

00:33:45,320 --> 00:33:50,299
or macros and since you make did not

00:33:47,059 --> 00:33:52,970
make a new one you can forget to put

00:33:50,299 --> 00:33:56,210
public private or interface and it will

00:33:52,970 --> 00:33:58,309
work which one of the fruit will do if

00:33:56,210 --> 00:34:00,860
you do not put public private or

00:33:58,309 --> 00:34:03,260
interface to be honest I can't tell you

00:34:00,860 --> 00:34:05,929
without looking at the dock so my

00:34:03,260 --> 00:34:09,230
recommendation is do not use it just

00:34:05,929 --> 00:34:11,770
always tell if it's public private or

00:34:09,230 --> 00:34:11,770
interface

00:34:12,100 --> 00:34:17,630
and of course target compiled option I

00:34:15,770 --> 00:34:20,720
would recommend you to use caution

00:34:17,630 --> 00:34:23,060
because if you put like I said some W

00:34:20,720 --> 00:34:25,070
error you might have surprises because

00:34:23,060 --> 00:34:29,360
your dependency change and they do not

00:34:25,070 --> 00:34:31,520
have the same level of pedantic as you

00:34:29,360 --> 00:34:33,320
do or maybe simply you do not use the

00:34:31,520 --> 00:34:35,570
same ABI like I don't know you asked for

00:34:33,320 --> 00:34:37,970
C++ 11 and for some reason another

00:34:35,570 --> 00:34:39,680
library has for C++ for free you do not

00:34:37,970 --> 00:34:43,310
use the same runtime you're gonna get

00:34:39,680 --> 00:34:48,310
into trouble so I would keep that at top

00:34:43,310 --> 00:34:52,340
level alright if you remember this I

00:34:48,310 --> 00:34:54,740
think you get like maybe 90% of what I

00:34:52,340 --> 00:34:57,530
call modern Simek because you started

00:34:54,740 --> 00:34:59,720
working with you you you you get away

00:34:57,530 --> 00:35:01,970
from the flag you got away from the

00:34:59,720 --> 00:35:04,610
front from looking at the bits and the

00:35:01,970 --> 00:35:07,220
implementation of other modules and you

00:35:04,610 --> 00:35:09,410
move to another layer of abstraction

00:35:07,220 --> 00:35:11,900
you're really thinking in terms of

00:35:09,410 --> 00:35:14,450
modules in terms of what is my

00:35:11,900 --> 00:35:16,850
implementation what are the interfaces I

00:35:14,450 --> 00:35:20,690
use you do not care about how people

00:35:16,850 --> 00:35:22,520
implement very modules because another

00:35:20,690 --> 00:35:25,010
problem is that if they change you have

00:35:22,520 --> 00:35:26,360
to change too and unless you declare

00:35:25,010 --> 00:35:28,550
dependency and then the build system

00:35:26,360 --> 00:35:34,060
does that for you and that's the whole

00:35:28,550 --> 00:35:36,020
point and since we have some time I

00:35:34,060 --> 00:35:39,320
guess we could talk about the rest

00:35:36,020 --> 00:35:42,200
because of course the 10 last percent or

00:35:39,320 --> 00:35:47,090
least use but might still come handy to

00:35:42,200 --> 00:35:48,830
you the first example and I think the

00:35:47,090 --> 00:35:52,790
most common case that I did not address

00:35:48,830 --> 00:35:55,820
yet is external dependencies because we

00:35:52,790 --> 00:35:58,970
all use for parties I think most of us

00:35:55,820 --> 00:36:01,250
use for parties and well they are not

00:35:58,970 --> 00:36:03,200
always built with CMake or not always

00:36:01,250 --> 00:36:05,840
build with that instance of Simek you're

00:36:03,200 --> 00:36:09,230
running at the at some point so you have

00:36:05,840 --> 00:36:10,250
to grab some packages for example here I

00:36:09,230 --> 00:36:14,480
needed G tests

00:36:10,250 --> 00:36:17,450
I read the doc about fine package of GTS

00:36:14,480 --> 00:36:20,030
which said that G tests should be built

00:36:17,450 --> 00:36:22,490
with threads because on some platforms

00:36:20,030 --> 00:36:23,600
on some compilers you need to link with

00:36:22,490 --> 00:36:26,930
threads to so I

00:36:23,600 --> 00:36:30,470
require also the threat packages then I

00:36:26,930 --> 00:36:34,070
create my executable and since she test

00:36:30,470 --> 00:36:36,170
provide me some nice macro I can add the

00:36:34,070 --> 00:36:40,310
G tests include here to my directories

00:36:36,170 --> 00:36:40,810
and I can link to G test and that's

00:36:40,310 --> 00:36:44,420
wrong

00:36:40,810 --> 00:36:46,160
yeah that was a trap yeah the problem is

00:36:44,420 --> 00:36:48,140
that you are falling back to the old

00:36:46,160 --> 00:36:50,090
flags approach you are not selling

00:36:48,140 --> 00:36:50,600
telling Simic that you are depending on

00:36:50,090 --> 00:36:52,610
G test

00:36:50,600 --> 00:36:54,740
you are telling CMAC that you want to

00:36:52,610 --> 00:36:56,510
include G test headers that you want to

00:36:54,740 --> 00:36:58,790
link to G test and that you want to link

00:36:56,510 --> 00:37:04,660
to G test dependencies and should that

00:36:58,790 --> 00:37:08,510
change you have to rewrite your code and

00:37:04,660 --> 00:37:11,840
fortunately for you see make how'd that

00:37:08,510 --> 00:37:14,480
C make so that and in their most recent

00:37:11,840 --> 00:37:17,570
in the recent versions they add they

00:37:14,480 --> 00:37:20,720
change their finders to be able to

00:37:17,570 --> 00:37:23,600
export targets too so now if you take at

00:37:20,720 --> 00:37:26,450
least 3.5 for example with G test you

00:37:23,600 --> 00:37:28,520
can just say alright I'm required retest

00:37:26,450 --> 00:37:31,400
G test which is the the name of the of

00:37:28,520 --> 00:37:32,660
the ng test main if you want to to G

00:37:31,400 --> 00:37:35,390
test to generate the main function for

00:37:32,660 --> 00:37:36,920
you and that's what that's done it will

00:37:35,390 --> 00:37:39,530
require your threads for you if you need

00:37:36,920 --> 00:37:41,210
them if G test implementation completely

00:37:39,530 --> 00:37:43,610
change tomorrow and require something

00:37:41,210 --> 00:37:46,780
else it will also take care of it you

00:37:43,610 --> 00:37:46,780
will not have to change anything

00:37:51,130 --> 00:37:56,570
there has been some effort like I said

00:37:53,420 --> 00:37:59,240
in a ensimag to to add some new finders

00:37:56,570 --> 00:38:01,490
the first one was open SSL in 3.4 yeah

00:37:59,240 --> 00:38:03,470
that took 4 win is to to think that

00:38:01,490 --> 00:38:06,350
third parties with one issue but we are

00:38:03,470 --> 00:38:08,270
getting their fill of 5 was big we got

00:38:06,350 --> 00:38:10,250
boost we got jitters so already I guess

00:38:08,270 --> 00:38:14,030
like half the dependency I require a new

00:38:10,250 --> 00:38:17,780
project or there you got some graphical

00:38:14,030 --> 00:38:20,390
libraries freed up seats bring us pkj

00:38:17,780 --> 00:38:23,390
config which is pretty nice because it's

00:38:20,390 --> 00:38:27,260
not just fine pkj config is like if you

00:38:23,390 --> 00:38:29,480
use C mag to to find a PC file it will

00:38:27,260 --> 00:38:29,990
automatically translate that into a C

00:38:29,480 --> 00:38:32,990
make

00:38:29,990 --> 00:38:35,990
project definition for you so you can

00:38:32,990 --> 00:38:41,020
just say ok I require that so that PC

00:38:35,990 --> 00:38:44,330
dependency you're all set any PKG config

00:38:41,020 --> 00:38:46,070
package installed on your system you can

00:38:44,330 --> 00:38:47,780
require it with modern c make just with

00:38:46,070 --> 00:38:49,640
that patch which is I think pretty cool

00:38:47,780 --> 00:38:51,740
at least on UNIX turn the only problem

00:38:49,640 --> 00:38:54,050
is that I never seen anybody using PC on

00:38:51,740 --> 00:38:56,390
Windows so that's not exactly portable

00:38:54,050 --> 00:38:59,600
but well on some environment that might

00:38:56,390 --> 00:39:03,020
really be handy and more recent version

00:38:59,600 --> 00:39:05,960
we are the Pangaea OpenCL B zip and all

00:39:03,020 --> 00:39:10,370
that kind of stuff so yeah if your

00:39:05,960 --> 00:39:11,960
manager is a bit old on see Meg if you

00:39:10,370 --> 00:39:14,240
want faster choice of it all all the

00:39:11,960 --> 00:39:16,310
more reason to you to ask him to to move

00:39:14,240 --> 00:39:18,710
to a more recent version you have all

00:39:16,310 --> 00:39:24,530
the finders set up for you and that will

00:39:18,710 --> 00:39:26,560
simplify your code but what happens if

00:39:24,530 --> 00:39:30,890
there is none because as you have seen

00:39:26,560 --> 00:39:33,410
they are some of them but I don't think

00:39:30,890 --> 00:39:37,190
that's the whole C++ package community

00:39:33,410 --> 00:39:41,120
here Wow I think some some of them may

00:39:37,190 --> 00:39:42,920
be missing so what do you do well first

00:39:41,120 --> 00:39:44,780
option obviously you can just contact

00:39:42,920 --> 00:39:49,010
the maintainer and has Kim nicely to

00:39:44,780 --> 00:39:50,090
provide one you may or may not have some

00:39:49,010 --> 00:39:51,860
results you may also have some

00:39:50,090 --> 00:39:53,990
agreements for example you can tell him

00:39:51,860 --> 00:39:56,270
as I can tell you today that if he

00:39:53,990 --> 00:39:58,160
builds his package which see Meg he just

00:39:56,270 --> 00:40:01,010
has to had a few instruction at the end

00:39:58,160 --> 00:40:03,410
to a see Meg to generate that finder for

00:40:01,010 --> 00:40:05,270
him because when you do make in store

00:40:03,410 --> 00:40:07,700
with see Meg you can also tell see Meg

00:40:05,270 --> 00:40:10,430
to generate a dot see Meg file that will

00:40:07,700 --> 00:40:13,400
act as a finder I think Daniel Pfeifer

00:40:10,430 --> 00:40:17,150
did a nice talk on this and a lot of

00:40:13,400 --> 00:40:23,360
everything's on see my cat at C++ now I

00:40:17,150 --> 00:40:29,480
back in in spring and it explains all of

00:40:23,360 --> 00:40:32,150
that of course if you are publishing a

00:40:29,480 --> 00:40:33,800
library I encourage you to do one even

00:40:32,150 --> 00:40:34,640
if it's not with see Meg if it will see

00:40:33,800 --> 00:40:36,530
make it simple

00:40:34,640 --> 00:40:38,600
really you just have two instruction and

00:40:36,530 --> 00:40:43,010
it generates that for them for you if

00:40:38,600 --> 00:40:44,020
it's not see Meg well let's it's not

00:40:43,010 --> 00:40:47,000
that hard

00:40:44,020 --> 00:40:48,800
what do I have to do well first of all

00:40:47,000 --> 00:40:49,900
of course I have to do fine library to

00:40:48,800 --> 00:40:52,089
find

00:40:49,900 --> 00:40:54,640
to just make sure that it's installed on

00:40:52,089 --> 00:40:57,490
the system and Simek will take care of

00:40:54,640 --> 00:41:00,579
the of the question that is it Windows

00:40:57,490 --> 00:41:03,089
or UNIX do I have to have a DLL or dot

00:41:00,579 --> 00:41:06,790
soo dot leap depending on the platform

00:41:03,089 --> 00:41:10,660
you can tell Simic that you add the

00:41:06,790 --> 00:41:13,150
library as an important target and then

00:41:10,660 --> 00:41:16,240
you say all right I want to include

00:41:13,150 --> 00:41:18,430
those directories and this these

00:41:16,240 --> 00:41:22,180
dependencies and I have a nice build

00:41:18,430 --> 00:41:28,900
interface with an external project easy

00:41:22,180 --> 00:41:31,630
Wow almost too easy yeah yeah I hoped

00:41:28,900 --> 00:41:35,050
that that by writing that that would

00:41:31,630 --> 00:41:37,540
have worked but but it did it turns out

00:41:35,050 --> 00:41:39,940
that she make maintainer left me a

00:41:37,540 --> 00:41:43,900
little surprising that and that it's a

00:41:39,940 --> 00:41:47,619
bit more complex for interval reasons

00:41:43,900 --> 00:41:50,290
you cannot use target whatever on an

00:41:47,619 --> 00:41:53,200
imported target does it work the Simek

00:41:50,290 --> 00:41:56,740
will throw you out unfortunate

00:41:53,200 --> 00:41:58,810
fortunately it's only a wrapper the

00:41:56,740 --> 00:42:01,480
target whatever is just a wrapper it's

00:41:58,810 --> 00:42:04,329
just telling see make go through the

00:42:01,480 --> 00:42:08,410
list of variables that's or define in my

00:42:04,329 --> 00:42:10,180
package and set some values so you can

00:42:08,410 --> 00:42:15,869
do it by hand I won't say it's pretty

00:42:10,180 --> 00:42:15,869
like you can see but it does the job

00:42:19,440 --> 00:42:24,160
simply you well you still add your

00:42:22,000 --> 00:42:26,619
library you have to set a property for

00:42:24,160 --> 00:42:27,819
the location you cannot directly tell

00:42:26,619 --> 00:42:30,400
that when you add the library but you

00:42:27,819 --> 00:42:35,410
can you can just set property and same

00:42:30,400 --> 00:42:37,660
thing all the things you set like public

00:42:35,410 --> 00:42:39,640
or private or whatever it's just a set

00:42:37,660 --> 00:42:41,319
of variables that's that's added to your

00:42:39,640 --> 00:42:43,030
project that's how it works we see Meg

00:42:41,319 --> 00:42:45,099
behind the scenes that's not even

00:42:43,030 --> 00:42:46,270
relying on implementation details that

00:42:45,099 --> 00:42:48,550
that's something you can find in the

00:42:46,270 --> 00:42:50,950
civic dock that's not something I

00:42:48,550 --> 00:42:51,849
recommend you to use but in this case

00:42:50,950 --> 00:42:53,890
you don't have a choice

00:42:51,849 --> 00:42:58,540
unfortunately until maybe see Meg

00:42:53,890 --> 00:43:02,260
patches that right what okay it's not

00:42:58,540 --> 00:43:03,010
ready but it fits on one slide so well

00:43:02,260 --> 00:43:08,020
that's not

00:43:03,010 --> 00:43:10,990
that's terrible can we have Israel

00:43:08,020 --> 00:43:14,530
alternative well yeah yeah there also

00:43:10,990 --> 00:43:16,960
there are some but as some French famous

00:43:14,530 --> 00:43:19,420
mathematician said it doesn't fit on the

00:43:16,960 --> 00:43:22,930
margin of this talk so I won't be able

00:43:19,420 --> 00:43:25,840
to to give you all the details still

00:43:22,930 --> 00:43:28,240
like I said before Daniel Pfeiffer did a

00:43:25,840 --> 00:43:30,670
very nice talk about cineq which is

00:43:28,240 --> 00:43:31,690
called effective see Mike I think yeah

00:43:30,670 --> 00:43:35,440
effective see Mike

00:43:31,690 --> 00:43:37,890
it wasn't a span C++ now

00:43:35,440 --> 00:43:43,750
it explains lots of thing about Simic

00:43:37,890 --> 00:43:46,570
from generating finders to using C Meg

00:43:43,750 --> 00:43:48,760
to set some compatibility flag for you

00:43:46,570 --> 00:43:51,580
checking the standard suppose whatever

00:43:48,760 --> 00:43:54,010
you name it it's got it I think it was

00:43:51,580 --> 00:43:57,910
body voted like most helpful talk of the

00:43:54,010 --> 00:44:00,220
of the of the whole the whole convention

00:43:57,910 --> 00:44:02,170
so I really encourage you if you if you

00:44:00,220 --> 00:44:03,970
in to see Meg what do you see Meg just

00:44:02,170 --> 00:44:08,770
go look at it you will see lots of

00:44:03,970 --> 00:44:10,810
interesting things all right so to

00:44:08,770 --> 00:44:15,220
summarize a bit what we've seen today

00:44:10,810 --> 00:44:18,970
together first things what's modern

00:44:15,220 --> 00:44:24,550
build modern build is about keeping your

00:44:18,970 --> 00:44:27,430
flags to yourself do not try to expose

00:44:24,550 --> 00:44:29,500
your flags in the code of the others do

00:44:27,430 --> 00:44:32,200
not look at the code of the others to

00:44:29,500 --> 00:44:34,390
try to get the flag just keep that to

00:44:32,200 --> 00:44:37,109
yourself it's your private bit it's your

00:44:34,390 --> 00:44:40,180
problem seem a queer and all the rest

00:44:37,109 --> 00:44:42,280
you think in terms of modules really you

00:44:40,180 --> 00:44:44,380
you think about a graph you know it's

00:44:42,280 --> 00:44:46,750
easier when you think about it it's just

00:44:44,380 --> 00:44:49,150
like take a whiteboard and do some

00:44:46,750 --> 00:44:51,280
architecture like we all like to do when

00:44:49,150 --> 00:44:52,900
we start a project and then we fall back

00:44:51,280 --> 00:44:54,940
into flags because we are out of time

00:44:52,900 --> 00:44:58,030
but the idea is that with that you can

00:44:54,940 --> 00:45:01,030
still do that the whole time the whole

00:44:58,030 --> 00:45:03,310
life of your project you can always go

00:45:01,030 --> 00:45:06,130
back to alright let's put that on a

00:45:03,310 --> 00:45:08,350
whiteboard let's make a nice dot file or

00:45:06,130 --> 00:45:11,260
whatever and see okay it does that

00:45:08,350 --> 00:45:14,650
architecture makes sense or am I trying

00:45:11,260 --> 00:45:16,810
to to do two inserts inside circular

00:45:14,650 --> 00:45:20,770
dependencies are hidden dependencies

00:45:16,810 --> 00:45:24,190
and all the rest all the transitivity

00:45:20,770 --> 00:45:26,650
all the eden inter flags that you need

00:45:24,190 --> 00:45:29,290
to pull you let the build system do that

00:45:26,650 --> 00:45:31,710
again I'm talking about similar but I

00:45:29,290 --> 00:45:34,780
don't know what you use at home anything

00:45:31,710 --> 00:45:40,090
should be able to end all that if not I

00:45:34,780 --> 00:45:43,630
guess it's time for a feature request so

00:45:40,090 --> 00:45:46,660
force image first of all take three dot

00:45:43,630 --> 00:45:48,550
something the most recent the better as

00:45:46,660 --> 00:45:52,870
you might see as you have seen there are

00:45:48,550 --> 00:45:59,380
some nice finders to this use the target

00:45:52,870 --> 00:46:00,760
something alternative for macros unless

00:45:59,380 --> 00:46:02,920
we are talking maybe about compile

00:46:00,760 --> 00:46:07,690
option but other than that use the

00:46:02,920 --> 00:46:10,270
targets alternative always specify if a

00:46:07,690 --> 00:46:12,850
property is public private pointer face

00:46:10,270 --> 00:46:16,030
you are trying to expose something to

00:46:12,850 --> 00:46:18,010
see make it needs to know the level of a

00:46:16,030 --> 00:46:20,050
visibility the same way that when you

00:46:18,010 --> 00:46:22,680
put something in a class you have to

00:46:20,050 --> 00:46:25,000
wonder about is it public private or

00:46:22,680 --> 00:46:29,820
opera but let's not protected in that

00:46:25,000 --> 00:46:33,460
case but is it public private above and

00:46:29,820 --> 00:46:36,010
of course you have to link against the

00:46:33,460 --> 00:46:38,830
target to get all these properties it's

00:46:36,010 --> 00:46:41,920
still not ready I would gladly like to

00:46:38,830 --> 00:46:44,050
have like I don't know target require

00:46:41,920 --> 00:46:47,640
module or something that sounds more

00:46:44,050 --> 00:46:50,140
like effectively what we are doing but

00:46:47,640 --> 00:46:53,110
it's what it will do behind the scenes

00:46:50,140 --> 00:46:55,210
it's not just I want to do - l that

00:46:53,110 --> 00:46:59,920
library it's more than that and it's

00:46:55,210 --> 00:47:04,110
what you should do for external packages

00:46:59,920 --> 00:47:07,630
well your first option is simply to use

00:47:04,110 --> 00:47:11,290
modern finders because some of some of

00:47:07,630 --> 00:47:14,970
them are provided if not write them as

00:47:11,290 --> 00:47:14,970
the manager to write them

00:47:15,410 --> 00:47:20,660
if you cannot well there are some

00:47:18,650 --> 00:47:22,970
options like like I said CMAC can

00:47:20,660 --> 00:47:24,590
generate one from you just by the build

00:47:22,970 --> 00:47:26,360
definition of your project when you run

00:47:24,590 --> 00:47:28,760
the configure and the make install it

00:47:26,360 --> 00:47:31,430
can do that for you if it's an external

00:47:28,760 --> 00:47:32,600
system you can ask the maintainer please

00:47:31,430 --> 00:47:35,000
please please please please could you

00:47:32,600 --> 00:47:37,850
use could you write a finder for seeming

00:47:35,000 --> 00:47:40,820
for me if it's a PC file it's automatic

00:47:37,850 --> 00:47:46,850
and if none of that is possible well I

00:47:40,820 --> 00:47:50,570
guess you can try a package manager all

00:47:46,850 --> 00:47:53,210
right thank you all for for coming and I

00:47:50,570 --> 00:48:05,030
think we have like a bit less than 15

00:47:53,210 --> 00:48:07,370
minutes for questions so we have to mix

00:48:05,030 --> 00:48:17,870
I think it would be better for your use

00:48:07,370 --> 00:48:21,140
you can come down and so one pain point

00:48:17,870 --> 00:48:24,620
for us has been some of the fine

00:48:21,140 --> 00:48:28,100
packages that return hard paths for the

00:48:24,620 --> 00:48:29,450
library and then if it gets built

00:48:28,100 --> 00:48:31,820
somewhere else as part of a different

00:48:29,450 --> 00:48:35,870
build closure that path is now wrong due

00:48:31,820 --> 00:48:38,750
to things like sim link farms so like

00:48:35,870 --> 00:48:40,010
open SSL is at some point been an

00:48:38,750 --> 00:48:42,680
offender in this so how would you

00:48:40,010 --> 00:48:45,050
recommend us be able to take advantage

00:48:42,680 --> 00:48:49,370
of dynamic libraries like that without

00:48:45,050 --> 00:48:50,930
breaking though further down well I'm

00:48:49,370 --> 00:48:52,970
not sure I get that because when you run

00:48:50,930 --> 00:48:57,560
fine now Barry it tries to look for

00:48:52,970 --> 00:48:59,090
fights so it should not return if it's

00:48:57,560 --> 00:49:01,490
not found you know you can have the

00:48:59,090 --> 00:49:03,200
required when you do fine package you

00:49:01,490 --> 00:49:05,600
can tell required and need to find the

00:49:03,200 --> 00:49:08,030
fails because the library isn't there it

00:49:05,600 --> 00:49:12,710
will stop I know if it's that's your

00:49:08,030 --> 00:49:14,600
problem so say you had two libraries the

00:49:12,710 --> 00:49:18,260
first one got built against open SSL

00:49:14,600 --> 00:49:21,680
yeah and it had the hardened that had

00:49:18,260 --> 00:49:23,810
the actual link on the hope path to the

00:49:21,680 --> 00:49:26,480
host for open SSL that you linked

00:49:23,810 --> 00:49:27,980
against and then it goes off to another

00:49:26,480 --> 00:49:28,610
section in your build fleet there's

00:49:27,980 --> 00:49:30,740
another

00:49:28,610 --> 00:49:33,470
large section of simile forms that are

00:49:30,740 --> 00:49:37,430
built that path is no longer the same so

00:49:33,470 --> 00:49:39,950
when you go to link against project a

00:49:37,430 --> 00:49:42,200
the path no longer works and you have

00:49:39,950 --> 00:49:43,910
linker errors you're talking about two

00:49:42,200 --> 00:49:46,280
different instance of C making right

00:49:43,910 --> 00:49:47,690
like you do first one of C makes you

00:49:46,280 --> 00:49:49,250
produce some libraries that have some

00:49:47,690 --> 00:49:51,940
dependencies and then you will Pond

00:49:49,250 --> 00:49:54,890
import them into another Simek instance

00:49:51,940 --> 00:49:57,380
well I would tell you that's what

00:49:54,890 --> 00:50:01,070
package manager are for really

00:49:57,380 --> 00:50:03,740
III I would suggest you to look at what

00:50:01,070 --> 00:50:06,590
what what exists and check with that

00:50:03,740 --> 00:50:08,090
because doing that by hand on the same

00:50:06,590 --> 00:50:10,130
machine it's possible because you can

00:50:08,090 --> 00:50:12,170
you know you can use sub modules in C

00:50:10,130 --> 00:50:13,730
major and have everything on the same

00:50:12,170 --> 00:50:15,770
place but if you build in different

00:50:13,730 --> 00:50:19,580
stages I really encourage you to look at

00:50:15,770 --> 00:50:21,530
package managers because if it's just

00:50:19,580 --> 00:50:23,870
one step it's possible but has you

00:50:21,530 --> 00:50:27,020
getyou can you illustrate if it's a few

00:50:23,870 --> 00:50:29,690
steps it gets a nightmare to two to end

00:50:27,020 --> 00:50:30,770
all recursively and D is your way if you

00:50:29,690 --> 00:50:32,150
want to make sure that you keep

00:50:30,770 --> 00:50:34,490
everything and that the packets are

00:50:32,150 --> 00:50:39,160
really cuttable it's much easier to do

00:50:34,490 --> 00:50:42,020
with a package manager okay thank you

00:50:39,160 --> 00:50:44,380
you said something about keep your

00:50:42,020 --> 00:50:47,360
compiler flags to yourself I cannot

00:50:44,380 --> 00:50:51,380
appreciate that I mean that is that's

00:50:47,360 --> 00:50:53,210
complete and such truth because a couple

00:50:51,380 --> 00:50:56,570
of weeks ago we have a we have a whole

00:50:53,210 --> 00:50:59,740
bunch of external libraries and a couple

00:50:56,570 --> 00:51:01,550
of weeks ago we upgraded one of them and

00:50:59,740 --> 00:51:04,430
unfortunately in one of their latest

00:51:01,550 --> 00:51:07,550
their most recent version they have a

00:51:04,430 --> 00:51:09,770
compiler settings file in which they

00:51:07,550 --> 00:51:14,630
have declared their compiler flags as

00:51:09,770 --> 00:51:16,820
public so now that what so I built the

00:51:14,630 --> 00:51:18,950
externals and tried to build our code

00:51:16,820 --> 00:51:22,460
base and they had F no exceptions in

00:51:18,950 --> 00:51:24,950
there yeah and so our solution I mean I

00:51:22,460 --> 00:51:27,680
my quick and dirty solution was go to

00:51:24,950 --> 00:51:31,220
the compiler settings are txt and do a C

00:51:27,680 --> 00:51:32,450
make string replace all over except no

00:51:31,220 --> 00:51:34,850
exceptions and replace them with any

00:51:32,450 --> 00:51:36,890
yeah that was oddly I know but is there

00:51:34,850 --> 00:51:38,780
a better way to do that well my

00:51:36,890 --> 00:51:42,290
suggestion would be that first if

00:51:38,780 --> 00:51:45,320
possible do not set inside the simulator

00:51:42,290 --> 00:51:47,810
do not set compiler flags I mean do not

00:51:45,320 --> 00:51:51,050
set like - STD you can require you can

00:51:47,810 --> 00:51:52,760
like as c meg is this compiler with the

00:51:51,050 --> 00:51:55,190
flags you will I've been supplied able

00:51:52,760 --> 00:51:57,530
to use C++ 14 or whatever that's okay

00:51:55,190 --> 00:52:00,170
can make checks but I think you should

00:51:57,530 --> 00:52:02,180
not try to set things it should be

00:52:00,170 --> 00:52:04,280
delegated to the invocation of C make

00:52:02,180 --> 00:52:06,380
when you can do minus D or C makes the

00:52:04,280 --> 00:52:09,560
excess flags there and then you can have

00:52:06,380 --> 00:52:12,020
a profile that you use to invoke see

00:52:09,560 --> 00:52:13,580
make but that should be external I don't

00:52:12,020 --> 00:52:15,770
think you should store inside your C

00:52:13,580 --> 00:52:19,580
make lists flags that define the ABI the

00:52:15,770 --> 00:52:21,410
binary compatibility because of course

00:52:19,580 --> 00:52:23,510
two libraries will have their own set of

00:52:21,410 --> 00:52:26,570
flags and they will disagree and it

00:52:23,510 --> 00:52:28,970
won't work it should be possible it

00:52:26,570 --> 00:52:31,370
should take something external some

00:52:28,970 --> 00:52:34,940
external input to know what kind of

00:52:31,370 --> 00:52:36,500
runtime or what kind of - - STD it

00:52:34,940 --> 00:52:37,820
should be compiled with it should just

00:52:36,500 --> 00:52:40,100
make checks okay

00:52:37,820 --> 00:52:42,230
is it possible with the environment you

00:52:40,100 --> 00:52:44,210
supply me to build or not and and fail

00:52:42,230 --> 00:52:46,880
if you cannot but not try to I Jack the

00:52:44,210 --> 00:52:50,030
process and decide that you will change

00:52:46,880 --> 00:52:52,430
the way it was supposed to be built so

00:52:50,030 --> 00:52:54,860
the it's external library itself builds

00:52:52,430 --> 00:52:57,950
fine so and we built that with their own

00:52:54,860 --> 00:53:00,710
flags but since we did find package on

00:52:57,950 --> 00:53:03,260
that I think the flags leaked into into

00:53:00,710 --> 00:53:06,920
an air builds that could be that could

00:53:03,260 --> 00:53:09,560
be this if some public flags are like I

00:53:06,920 --> 00:53:11,420
don't know some - D that's what I said

00:53:09,560 --> 00:53:14,060
when I said do not use Kampai flags

00:53:11,420 --> 00:53:16,310
inside do not set compile fighting

00:53:14,060 --> 00:53:19,310
targets for me compile flags that are

00:53:16,310 --> 00:53:21,830
very platform and infrastructure it

00:53:19,310 --> 00:53:23,900
belongs to a profile that should be

00:53:21,830 --> 00:53:26,150
shared by every Simek project you build

00:53:23,900 --> 00:53:28,520
in the same environment you should not

00:53:26,150 --> 00:53:31,370
keep that inside Simek I think it's a

00:53:28,520 --> 00:53:35,150
bad idea you just just second setting up

00:53:31,370 --> 00:53:37,940
yourself for disaster okay thank you hi

00:53:35,150 --> 00:53:40,100
so could you go back to your demo your

00:53:37,940 --> 00:53:45,980
example of using boost through the

00:53:40,100 --> 00:53:47,780
target yep so you know I own it I think

00:53:45,980 --> 00:53:49,640
I can yeah daddy's wondering yeah right

00:53:47,780 --> 00:53:52,640
so I don't own an open-source library

00:53:49,640 --> 00:53:55,650
and I recently wanted to upgrade to use

00:53:52,640 --> 00:53:57,770
modern CMake and so I switch to using

00:53:55,650 --> 00:54:00,060
the targets created by the fine boost

00:53:57,770 --> 00:54:00,960
script that comes in the box with C make

00:54:00,060 --> 00:54:04,200
yeah

00:54:00,960 --> 00:54:05,580
then I updated my boost version to the

00:54:04,200 --> 00:54:08,910
latest boost version the day after it

00:54:05,580 --> 00:54:10,410
came out and then my library didn't work

00:54:08,910 --> 00:54:12,960
anymore because Simek refused to

00:54:10,410 --> 00:54:16,050
generate targets for the latest boost

00:54:12,960 --> 00:54:17,070
because it does not know - my belief is

00:54:16,050 --> 00:54:18,240
that it's because it doesn't know the

00:54:17,070 --> 00:54:19,380
dependency information between the boost

00:54:18,240 --> 00:54:22,470
libraries and so it doesn't feel

00:54:19,380 --> 00:54:23,760
confident in creating all of the targets

00:54:22,470 --> 00:54:25,890
because it doesn't know the relationship

00:54:23,760 --> 00:54:27,420
between ok yeah right yeah invent it and

00:54:25,890 --> 00:54:28,890
I have to wait until another update for

00:54:27,420 --> 00:54:30,030
C mate to come out to order to correct

00:54:28,890 --> 00:54:31,980
that but of course that means that I

00:54:30,030 --> 00:54:35,370
have a two-week delay where no one in

00:54:31,980 --> 00:54:38,610
times my library however if I simply

00:54:35,370 --> 00:54:40,860
directly use the old variables again it

00:54:38,610 --> 00:54:42,660
works fine huh well are you aware of

00:54:40,860 --> 00:54:44,520
anything that they are doing it what I

00:54:42,660 --> 00:54:48,300
mean that's that's something that's

00:54:44,520 --> 00:54:50,220
completely tied to the fact that the

00:54:48,300 --> 00:54:52,410
Simic provides the finder for you and

00:54:50,220 --> 00:54:54,810
that it's decoupled from the version of

00:54:52,410 --> 00:54:58,020
boost we provide that as a convenience

00:54:54,810 --> 00:55:00,540
because at the time or where the over

00:54:58,020 --> 00:55:02,460
packages did not so I think it's it's

00:55:00,540 --> 00:55:04,470
more like a convenience thing but that's

00:55:02,460 --> 00:55:07,410
what that comes with the risk that's

00:55:04,470 --> 00:55:09,450
anything any convenient finder that's

00:55:07,410 --> 00:55:12,150
given by C mag will not be in line with

00:55:09,450 --> 00:55:14,780
the latest version of the package so you

00:55:12,150 --> 00:55:18,960
would not recommend me do this then well

00:55:14,780 --> 00:55:21,870
that depends if boost could provide the

00:55:18,960 --> 00:55:23,820
finder I would say use that I'm not sure

00:55:21,870 --> 00:55:27,000
we do today because they use their own

00:55:23,820 --> 00:55:29,880
build system but not so that that's

00:55:27,000 --> 00:55:31,980
that's a tough choice I would agree

00:55:29,880 --> 00:55:33,420
then again I've started working with the

00:55:31,980 --> 00:55:35,130
guy at Conan because I really believe

00:55:33,420 --> 00:55:40,200
that package management it's the way to

00:55:35,130 --> 00:55:41,610
solve all that mess ok thank you I'm

00:55:40,200 --> 00:55:45,420
pretty I need to see mix that this might

00:55:41,610 --> 00:55:47,610
be really dumb question but um if you

00:55:45,420 --> 00:55:49,320
are you're writing simple application

00:55:47,610 --> 00:55:52,080
you depend on like you depend on lib a

00:55:49,320 --> 00:55:55,200
you depend on Libby and both of them

00:55:52,080 --> 00:55:57,720
depend privately on boost and like boost

00:55:55,200 --> 00:56:00,540
has like three different ways you can

00:55:57,720 --> 00:56:02,940
build it into your project which

00:56:00,540 --> 00:56:04,710
component there my a poorly Bay or Libby

00:56:02,940 --> 00:56:06,390
is responsible for kind of who owns that

00:56:04,710 --> 00:56:09,570
decision of how are you compiling the

00:56:06,390 --> 00:56:13,200
library in like or there's that depend

00:56:09,570 --> 00:56:16,860
on how your finder is implemented okay

00:56:13,200 --> 00:56:19,710
well technically speaking I would

00:56:16,860 --> 00:56:22,320
recommend you to do your find to under

00:56:19,710 --> 00:56:23,700
find at the top level of your symmetries

00:56:22,320 --> 00:56:26,160
to make sure that you find only one

00:56:23,700 --> 00:56:28,440
version of every third parties if you

00:56:26,160 --> 00:56:30,390
start splitting the finders you will

00:56:28,440 --> 00:56:32,250
have two problems first you might not

00:56:30,390 --> 00:56:34,230
require the same version and you might

00:56:32,250 --> 00:56:36,510
have like a diamond issue with two

00:56:34,230 --> 00:56:38,160
different version like like it was just

00:56:36,510 --> 00:56:39,750
shown in this morning a talk

00:56:38,160 --> 00:56:41,700
the second problem you will have is

00:56:39,750 --> 00:56:44,220
performance you will not see it with

00:56:41,700 --> 00:56:46,080
like two libraries but when I come from

00:56:44,220 --> 00:56:48,630
we had at some point a huge cut days

00:56:46,080 --> 00:56:51,840
with CMake and if everybody in is

00:56:48,630 --> 00:56:54,840
library like three or four level down is

00:56:51,840 --> 00:56:57,600
doing fine you're wasting a lot of of

00:56:54,840 --> 00:57:00,090
effort especially because if you use

00:56:57,600 --> 00:57:02,310
some macros like project C Mac will not

00:57:00,090 --> 00:57:04,620
cache the results so it will scan the

00:57:02,310 --> 00:57:07,500
file system like a million times just to

00:57:04,620 --> 00:57:09,990
find the same library so yeah my

00:57:07,500 --> 00:57:11,250
recommendation is find a top level all

00:57:09,990 --> 00:57:12,690
the third parties to make sure that

00:57:11,250 --> 00:57:16,380
everybody agrees on what you use

00:57:12,690 --> 00:57:18,690
okay so ideally the libs that you depend

00:57:16,380 --> 00:57:21,330
on others saying is fine package boost

00:57:18,690 --> 00:57:23,100
and the responsibility of how you find

00:57:21,330 --> 00:57:25,200
it in which one you yeah you can you can

00:57:23,100 --> 00:57:27,240
tell cynic when you do a fine to require

00:57:25,200 --> 00:57:33,330
minimum version it's possible and then

00:57:27,240 --> 00:57:35,900
it will fail if it's not fun okay great

00:57:33,330 --> 00:57:41,820
thanks everyone

00:57:35,900 --> 00:57:41,820

YouTube URL: https://www.youtube.com/watch?v=eC9-iRN2b04


