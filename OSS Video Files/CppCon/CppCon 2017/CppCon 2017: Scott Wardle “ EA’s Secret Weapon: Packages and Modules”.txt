Title: CppCon 2017: Scott Wardle “ EA’s Secret Weapon: Packages and Modules”
Publication date: 2017-10-06
Playlist: CppCon 2017
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
A lot of people hate build systems. What if using a library was just as easy as header-only libraries? 

EA has had a Secret Weapon called “packages” for over 14 years. EA's Packages are like Ruby’s Gems or Perl’s CPAN or Rust’s cargo. If you build a package from the package server it will download all of its dependencies. 

This talk will be about what we have learned about packages and versioning while building our large AAA games over the last 10+ years. Finally, what do we see for the future, like how will C++ modules fit in?

In detail I will talk about: 
-Package layout 
-Package server 
-Versioning control and packages 
-Libraries teams and platform fragmentation 
-Packages' effect on large scale architecture 
-C++ Modules TS prototypes
— 
Scott Wardle: Senior Software Engineer, Electronic Arts

Hi Everyone, | | I am Scott Wardle, I have been in games over 20 years, mostly at EA Vancouver. I like to solve hard problems. I am known for Systems Programming, C++ and turning my problems into solutions for everyone.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:06,299
ah I'm Scott Wordle and I'm gonna talk

00:00:02,340 --> 00:00:10,769
to you about EA's secret weapon packages

00:00:06,299 --> 00:00:14,820
and modules but before I do I have some

00:00:10,769 --> 00:00:19,130
kind of bad news Yegor masloff was a

00:00:14,820 --> 00:00:22,830
co-worker of mine he ended up dying

00:00:19,130 --> 00:00:26,099
recently he was kind of the go-to guy at

00:00:22,830 --> 00:00:31,050
a for packages for for quite some time

00:00:26,099 --> 00:00:33,300
he was you know we're viewing this

00:00:31,050 --> 00:00:36,149
presentation that's the last time I saw

00:00:33,300 --> 00:00:42,629
him and so hopefully I live up to his

00:00:36,149 --> 00:00:44,550
expectations but well Mike um as I said

00:00:42,629 --> 00:00:48,719
I'm Wordle I'm a senior software

00:00:44,550 --> 00:00:52,320
engineer with yay I've been working on

00:00:48,719 --> 00:00:53,699
FIFA for a long long time and in over 20

00:00:52,320 --> 00:00:55,860
years in games

00:00:53,699 --> 00:00:58,500
mostly I'm known for systems programming

00:00:55,860 --> 00:01:02,370
and what I mean by systems programming

00:00:58,500 --> 00:01:05,700
is making things technically better you

00:01:02,370 --> 00:01:08,280
know the best type of better so

00:01:05,700 --> 00:01:10,890
something measurable you know changing

00:01:08,280 --> 00:01:14,909
frame rates or affecting build times or

00:01:10,890 --> 00:01:16,950
less memory less space on disk some kind

00:01:14,909 --> 00:01:20,009
of measurable you know technical

00:01:16,950 --> 00:01:21,869
achievement obviously then we have to

00:01:20,009 --> 00:01:23,640
discuss with the team itself and figure

00:01:21,869 --> 00:01:25,500
out what does technically better mean

00:01:23,640 --> 00:01:29,100
and I rate metrics for that type of

00:01:25,500 --> 00:01:31,380
thing as well so memory monitoring that

00:01:29,100 --> 00:01:33,960
sort of stuff but that's not really what

00:01:31,380 --> 00:01:37,650
this talk is about this talk is about

00:01:33,960 --> 00:01:39,750
the other questions I get which is okay

00:01:37,650 --> 00:01:41,430
I want to make things technically better

00:01:39,750 --> 00:01:43,560
but I don't know how to measure it you

00:01:41,430 --> 00:01:46,799
know things like you know I want to

00:01:43,560 --> 00:01:48,750
share more or engineering I want them to

00:01:46,799 --> 00:01:50,430
be faster and more productive these

00:01:48,750 --> 00:01:53,759
things I don't really know how to

00:01:50,430 --> 00:01:57,869
measure and if I talked about those

00:01:53,759 --> 00:02:01,560
things that C++ con then everybody seems

00:01:57,869 --> 00:02:03,990
to talk about modules here

00:02:01,560 --> 00:02:06,479
they sound like magic and they're going

00:02:03,990 --> 00:02:08,420
to fix all of the things everywhere and

00:02:06,479 --> 00:02:10,160
so I wanted to look into

00:02:08,420 --> 00:02:12,260
and try to understand what they were

00:02:10,160 --> 00:02:15,890
because I didn't really understand them

00:02:12,260 --> 00:02:17,600
so you know yeah one thing I didn't

00:02:15,890 --> 00:02:19,819
understand is they were attempting to

00:02:17,600 --> 00:02:21,830
fix build times and also this is nice

00:02:19,819 --> 00:02:23,510
it's easy to measure stuff you can you

00:02:21,830 --> 00:02:26,240
know just run it and if it goes faster

00:02:23,510 --> 00:02:27,470
great as I said I'm not gonna talk about

00:02:26,240 --> 00:02:30,140
that kind of thing too much other people

00:02:27,470 --> 00:02:31,970
have talked about it what was more

00:02:30,140 --> 00:02:34,640
interesting to me as things like bad

00:02:31,970 --> 00:02:37,100
interfaces and things that are hard to

00:02:34,640 --> 00:02:40,880
share can this and improve that and how

00:02:37,100 --> 00:02:44,300
is that going to work I don't know the

00:02:40,880 --> 00:02:45,830
other thing was that everybody seems to

00:02:44,300 --> 00:02:49,010
really want this stuff as soon as

00:02:45,830 --> 00:02:53,410
possible from beyond buzzard this is

00:02:49,010 --> 00:02:56,660
obviously a very very popular but we

00:02:53,410 --> 00:02:58,340
sort of already had some technology da

00:02:56,660 --> 00:03:00,560
that really helped us with a lot of

00:02:58,340 --> 00:03:02,780
these things it's kind of the secret

00:03:00,560 --> 00:03:05,690
weapon I have always sort of relied on

00:03:02,780 --> 00:03:07,400
da I can take a package from anywhere in

00:03:05,690 --> 00:03:10,489
our company and I can build it and it

00:03:07,400 --> 00:03:12,380
just works get this get this this is the

00:03:10,489 --> 00:03:16,340
technology we have we take a bunch of

00:03:12,380 --> 00:03:21,680
C++ code and we turn it into a library I

00:03:16,340 --> 00:03:23,959
know you know it's it's a build system

00:03:21,680 --> 00:03:26,810
and everybody hates build systems and

00:03:23,959 --> 00:03:30,739
yeah most people with EA even hate ours

00:03:26,810 --> 00:03:34,690
so you know it's what it is but I really

00:03:30,739 --> 00:03:37,280
do think it gives us an unmeasurable

00:03:34,690 --> 00:03:39,200
advantage being able to take source code

00:03:37,280 --> 00:03:44,120
quickly from any team and actually get

00:03:39,200 --> 00:03:47,810
it to work you know but modules aren't

00:03:44,120 --> 00:03:50,720
that so modules are about add the new

00:03:47,810 --> 00:03:52,820
way of interfacing into maybe a package

00:03:50,720 --> 00:03:56,209
or a library of technology there are

00:03:52,820 --> 00:03:58,400
sort of a if an interface bit there

00:03:56,209 --> 00:04:00,680
they're smaller unit and so they're not

00:03:58,400 --> 00:04:05,900
quite the same thing but at first I was

00:04:00,680 --> 00:04:07,220
not really so sure anyways this takes a

00:04:05,900 --> 00:04:11,750
little bit for me to get through this

00:04:07,220 --> 00:04:13,910
whole tuck it kind of goes like this you

00:04:11,750 --> 00:04:16,190
guys don't know packages so I need to

00:04:13,910 --> 00:04:17,829
tell you well what was problem we were

00:04:16,190 --> 00:04:19,599
having and why did we invent them

00:04:17,829 --> 00:04:24,490
and then I'll talk about packages

00:04:19,599 --> 00:04:26,259
themselves like you know how did the

00:04:24,490 --> 00:04:29,050
solution go what problems did we have

00:04:26,259 --> 00:04:30,819
that sort of thing they don't talk about

00:04:29,050 --> 00:04:32,500
modules since I don't know how many

00:04:30,819 --> 00:04:34,930
people know about modules but and

00:04:32,500 --> 00:04:36,699
probably not all of you do and then I

00:04:34,930 --> 00:04:38,979
think finally finally near the end

00:04:36,699 --> 00:04:41,800
sometime talk about packages and modules

00:04:38,979 --> 00:04:44,069
together and maybe how they would fit if

00:04:41,800 --> 00:04:48,909
they would at all

00:04:44,069 --> 00:04:50,740
so packages the problem of packages

00:04:48,909 --> 00:04:53,650
starts a really long time ago it's about

00:04:50,740 --> 00:04:56,710
15 years ago PlayStation 2 is our

00:04:53,650 --> 00:05:00,370
default platform with 32 Meg's of RAM

00:04:56,710 --> 00:05:04,569
was a lot of memory and even back then

00:05:00,370 --> 00:05:06,400
we had a lot of trouble sharing code we

00:05:04,569 --> 00:05:09,129
had a lot of code to share and everybody

00:05:06,400 --> 00:05:11,020
was duplicating and everywhere it's

00:05:09,129 --> 00:05:12,969
easier to see and measure today so I

00:05:11,020 --> 00:05:16,270
took a look at some current games we

00:05:12,969 --> 00:05:18,759
have and 10 million lines of code yeah

00:05:16,270 --> 00:05:21,340
that's kind of about an average size of

00:05:18,759 --> 00:05:25,000
the game that he ate now and we have

00:05:21,340 --> 00:05:28,270
maybe 20 games or so 200 million lines

00:05:25,000 --> 00:05:29,500
of code that would be hard we don't want

00:05:28,270 --> 00:05:31,240
to be doing that we don't want to be

00:05:29,500 --> 00:05:34,259
updating it so we need to be sharing as

00:05:31,240 --> 00:05:37,300
much as possible this is kind of obvious

00:05:34,259 --> 00:05:40,419
even if it's a little tricky to measure

00:05:37,300 --> 00:05:42,340
all these things so games may be

00:05:40,419 --> 00:05:43,599
different than a lot of other industries

00:05:42,340 --> 00:05:46,419
and the fact that we don't really

00:05:43,599 --> 00:05:49,479
control our platform so you know iPhone

00:05:46,419 --> 00:05:52,750
comes out and great you're gonna have to

00:05:49,479 --> 00:05:55,000
work on Macs and you know actually

00:05:52,750 --> 00:05:57,190
that's kind of wrong ps2 came out and

00:05:55,000 --> 00:05:59,379
you know we had to work on Linux for

00:05:57,190 --> 00:06:02,529
quite some time anyways think maybe ps3

00:05:59,379 --> 00:06:04,180
we had to for a little bit too because

00:06:02,529 --> 00:06:05,650
of that kind of thing we don't really

00:06:04,180 --> 00:06:08,199
have control of an environment we're

00:06:05,650 --> 00:06:10,270
going to be on we made a build system

00:06:08,199 --> 00:06:12,819
that sort of works way see make does

00:06:10,270 --> 00:06:15,000
it's kind of like a generator and so you

00:06:12,819 --> 00:06:16,270
know you can make another build system

00:06:15,000 --> 00:06:19,120
from it

00:06:16,270 --> 00:06:21,069
so how fast it runs and how fast it

00:06:19,120 --> 00:06:22,210
built it really depends on what build

00:06:21,069 --> 00:06:25,640
systems Ben

00:06:22,210 --> 00:06:28,550
most of the time we build visual studio

00:06:25,640 --> 00:06:30,440
projects and for better or for worse um

00:06:28,550 --> 00:06:32,960
and so the seeps into our vocabulary

00:06:30,440 --> 00:06:35,690
most of these platforms support visual

00:06:32,960 --> 00:06:41,000
studio and so we call this depth SL

00:06:35,690 --> 00:06:43,730
engine for example yeah so we also

00:06:41,000 --> 00:06:46,310
support a lot of compilers we you know

00:06:43,730 --> 00:06:48,320
whatever the manufacturer of the console

00:06:46,310 --> 00:06:50,960
the newest place to write your games on

00:06:48,320 --> 00:06:52,760
you know Greenhills will come up for Wii

00:06:50,960 --> 00:06:55,880
U or something and you'll just have to

00:06:52,760 --> 00:06:59,060
deal with that to that end we wrote

00:06:55,880 --> 00:07:02,030
little configuration packages as well

00:06:59,060 --> 00:07:06,500
and so we could share these across with

00:07:02,030 --> 00:07:09,170
everybody and try and come up with a way

00:07:06,500 --> 00:07:13,120
of getting out as fast as we could our

00:07:09,170 --> 00:07:16,010
games on any particular platform and

00:07:13,120 --> 00:07:18,650
making all of these compilers as much as

00:07:16,010 --> 00:07:20,510
we can on the command line look kind of

00:07:18,650 --> 00:07:25,060
the same so you know precompiled headers

00:07:20,510 --> 00:07:29,150
can work the same way in all of them so

00:07:25,060 --> 00:07:30,760
when you're building games generally

00:07:29,150 --> 00:07:32,990
speaking it kind of works like this you

00:07:30,760 --> 00:07:35,120
download everything off of source

00:07:32,990 --> 00:07:37,010
control somehow or another usually all

00:07:35,120 --> 00:07:39,320
the data the tools and everything comes

00:07:37,010 --> 00:07:41,540
here and then you have to build the game

00:07:39,320 --> 00:07:43,970
and by building the game what I mean is

00:07:41,540 --> 00:07:46,250
you generate a visual studio solution

00:07:43,970 --> 00:07:48,650
like you know the solution files plus

00:07:46,250 --> 00:07:51,560
all the vc projects and everything to do

00:07:48,650 --> 00:07:53,870
with the package and then you you know

00:07:51,560 --> 00:07:55,460
just call Visual Studio - to build it

00:07:53,870 --> 00:07:57,350
and then you make some you know very

00:07:55,460 --> 00:07:59,990
large executable usually only one

00:07:57,350 --> 00:08:02,570
sometimes we have some D levels but and

00:07:59,990 --> 00:08:04,400
then after that we cook and we make all

00:08:02,570 --> 00:08:06,920
of our data and the data is actually

00:08:04,400 --> 00:08:08,000
much bigger than all the rest I'm not

00:08:06,920 --> 00:08:10,160
really going to talk too much about

00:08:08,000 --> 00:08:12,380
cooking today it's quite an interesting

00:08:10,160 --> 00:08:14,540
problem sometimes it does have to do

00:08:12,380 --> 00:08:16,540
with packages on some teams and mostly

00:08:14,540 --> 00:08:19,670
the time it doesn't these days though

00:08:16,540 --> 00:08:21,770
but it is necessary for this to be done

00:08:19,670 --> 00:08:23,270
and that every time you think you're

00:08:21,770 --> 00:08:24,710
gonna have all of these things change

00:08:23,270 --> 00:08:26,630
and so you're gonna have to check

00:08:24,710 --> 00:08:28,200
dependencies on on all of these things

00:08:26,630 --> 00:08:30,390
and

00:08:28,200 --> 00:08:32,040
it just shows you sort of this the scale

00:08:30,390 --> 00:08:35,130
of things and how much we're gonna care

00:08:32,040 --> 00:08:36,870
about timing on each one maybe you know

00:08:35,130 --> 00:08:39,300
you're gonna have to build more than

00:08:36,870 --> 00:08:45,180
you're gonna have to generate solution

00:08:39,300 --> 00:08:47,430
for example so yes 15 years ago large

00:08:45,180 --> 00:08:49,710
amounts of code being duplicated we

00:08:47,430 --> 00:08:51,240
actually had multiple build systems even

00:08:49,710 --> 00:08:53,670
on a single game teams you could have

00:08:51,240 --> 00:08:57,060
like wanting to build library a or

00:08:53,670 --> 00:08:59,160
library B or for pre-built you know we

00:08:57,060 --> 00:09:00,870
want to build all your libraries and

00:08:59,160 --> 00:09:02,640
then check them into source control so

00:09:00,870 --> 00:09:03,750
that not everybody had to build them for

00:09:02,640 --> 00:09:05,310
example you had have different systems

00:09:03,750 --> 00:09:09,690
for this and each one would have its own

00:09:05,310 --> 00:09:13,440
build system that was enough trouble on

00:09:09,690 --> 00:09:16,530
its own but even 15 years ago yeah it

00:09:13,440 --> 00:09:18,600
was a large company we had you know

00:09:16,530 --> 00:09:21,450
development going on and Madden down in

00:09:18,600 --> 00:09:25,170
Florida we had you know our headquarters

00:09:21,450 --> 00:09:29,370
is in California up in Vancouver we were

00:09:25,170 --> 00:09:32,070
on FIFA and lots of other games and the

00:09:29,370 --> 00:09:36,030
dye studios were in Sweden and he had

00:09:32,070 --> 00:09:37,620
the UK studios in Guildford so all

00:09:36,030 --> 00:09:39,900
around the world we had all this

00:09:37,620 --> 00:09:41,640
development going on and not everybody

00:09:39,900 --> 00:09:44,160
knew what was going on in all of the

00:09:41,640 --> 00:09:45,900
different studios and we could see this

00:09:44,160 --> 00:09:49,050
and so we wanted people to start to

00:09:45,900 --> 00:09:51,570
share so at the time the sort of new

00:09:49,050 --> 00:09:53,580
hotness was things like rubygem using

00:09:51,570 --> 00:09:55,620
c-span and those kind of things and and

00:09:53,580 --> 00:09:57,620
having a package server and so we really

00:09:55,620 --> 00:10:01,170
thought this was going to be important

00:09:57,620 --> 00:10:04,260
and so we wrote a system like that and

00:10:01,170 --> 00:10:05,910
it was actually wildly successful soon

00:10:04,260 --> 00:10:08,100
games remain out of hundreds of these

00:10:05,910 --> 00:10:11,910
packages we have thousands of supported

00:10:08,100 --> 00:10:14,400
packages on our servers and of course we

00:10:11,910 --> 00:10:16,950
run into another problem how to deal

00:10:14,400 --> 00:10:23,550
with many many packages and so this was

00:10:16,950 --> 00:10:25,110
kind of where we are today basically I'm

00:10:23,550 --> 00:10:27,390
gonna talk about the solution of

00:10:25,110 --> 00:10:30,000
packages over a couple of questions here

00:10:27,390 --> 00:10:32,790
like you know do build systems really

00:10:30,000 --> 00:10:34,740
help I'm gonna tell you about something

00:10:32,790 --> 00:10:37,950
called master config which I think was a

00:10:34,740 --> 00:10:39,750
stroke of genius that we had and if

00:10:37,950 --> 00:10:42,610
there's any idea that maybe you could

00:10:39,750 --> 00:10:44,500
copy this is probably the one

00:10:42,610 --> 00:10:48,910
and then I'll talk about package servers

00:10:44,500 --> 00:10:50,740
and code divergence and then I'll

00:10:48,910 --> 00:10:56,980
finally start talking about modules and

00:10:50,740 --> 00:11:00,280
things again so everybody here is a C++

00:10:56,980 --> 00:11:02,380
programmer so you kind of know what you

00:11:00,280 --> 00:11:06,550
need to do to an interface in order to

00:11:02,380 --> 00:11:10,690
make shown better if you make things

00:11:06,550 --> 00:11:13,930
private and high data then it's gonna be

00:11:10,690 --> 00:11:16,150
easier to share you know if your library

00:11:13,930 --> 00:11:17,710
is just a you know everything all

00:11:16,150 --> 00:11:19,420
inlined all the time it's gonna take

00:11:17,710 --> 00:11:23,650
longer to build and be a little harder

00:11:19,420 --> 00:11:25,960
to grab between various teams so our

00:11:23,650 --> 00:11:28,440
build system kind of makes us think

00:11:25,960 --> 00:11:30,910
about this and we have a concept for

00:11:28,440 --> 00:11:33,580
most packages by default we'll have a

00:11:30,910 --> 00:11:35,590
private directory for their headers and

00:11:33,580 --> 00:11:37,360
a public one and so you only have to

00:11:35,590 --> 00:11:42,760
read the public one two or understand

00:11:37,360 --> 00:11:45,520
its API and the build system itself does

00:11:42,760 --> 00:11:47,680
the same thing there's two main files to

00:11:45,520 --> 00:11:49,690
our build system one is a global scope

00:11:47,680 --> 00:11:53,350
one and one is a local scope and they're

00:11:49,690 --> 00:11:55,600
effectively public and private so what

00:11:53,350 --> 00:11:58,900
did one of these you know packages look

00:11:55,600 --> 00:12:00,970
like they're quite simple they're not

00:11:58,900 --> 00:12:04,930
really that complicated good example

00:12:00,970 --> 00:12:07,390
yours is TL it's our STL library the

00:12:04,930 --> 00:12:09,310
it's just a directory full of files so

00:12:07,390 --> 00:12:11,530
we start off with a directory which is

00:12:09,310 --> 00:12:13,660
the name of the package and then inside

00:12:11,530 --> 00:12:15,640
that we'll have a version and inside

00:12:13,660 --> 00:12:17,680
that we'll have some public include

00:12:15,640 --> 00:12:19,270
erector ease and in that we usually

00:12:17,680 --> 00:12:21,160
specify the name of the package again

00:12:19,270 --> 00:12:22,600
which is a bit odd but if you think

00:12:21,160 --> 00:12:24,160
about it a bit you want to make sure

00:12:22,600 --> 00:12:27,250
that your headers don't collide with one

00:12:24,160 --> 00:12:28,720
another so at least naming it after the

00:12:27,250 --> 00:12:31,410
package means that vector doesn't

00:12:28,720 --> 00:12:34,750
collide with vector that's a good idea

00:12:31,410 --> 00:12:37,180
and then you'll have your source code

00:12:34,750 --> 00:12:39,760
and your private includes and they will

00:12:37,180 --> 00:12:44,140
all go into a different directory and

00:12:39,760 --> 00:12:46,930
that's pretty much it now the version in

00:12:44,140 --> 00:12:49,900
the path is sometimes controversial why

00:12:46,930 --> 00:12:51,670
we do that is because on a team you have

00:12:49,900 --> 00:12:53,260
many executables and you want some

00:12:51,670 --> 00:12:55,690
decoupling to

00:12:53,260 --> 00:12:57,370
allow yourself to have a different each

00:12:55,690 --> 00:12:58,870
executable to be maybe on a slightly

00:12:57,370 --> 00:13:00,130
different version of the library so you

00:12:58,870 --> 00:13:04,300
don't have to upgrade everything all at

00:13:00,130 --> 00:13:07,270
once now we don't necessarily need the

00:13:04,300 --> 00:13:08,680
version information in the path there is

00:13:07,270 --> 00:13:10,720
ways of flattening it and there's good

00:13:08,680 --> 00:13:13,080
reasons to flatten it as well like if

00:13:10,720 --> 00:13:15,160
you're wanting to use perforce to

00:13:13,080 --> 00:13:18,660
integrate in a whole bunch of packages

00:13:15,160 --> 00:13:21,520
all at once maybe you need to do that

00:13:18,660 --> 00:13:25,480
but yes this is why you have that

00:13:21,520 --> 00:13:27,820
virtual path um so a little

00:13:25,480 --> 00:13:30,070
domain-specific language that goes along

00:13:27,820 --> 00:13:32,950
with this local scope and global scope

00:13:30,070 --> 00:13:35,380
are the two main files for it and each

00:13:32,950 --> 00:13:38,350
scope has its own file and this is an

00:13:35,380 --> 00:13:40,360
example of one you used to have to

00:13:38,350 --> 00:13:43,300
specify all the headers and all the

00:13:40,360 --> 00:13:45,340
CPP's and and for us we usually just put

00:13:43,300 --> 00:13:47,650
star star in there and just recur sup

00:13:45,340 --> 00:13:49,300
the subdirectories so it's kind of

00:13:47,650 --> 00:13:51,790
different than say like C make or

00:13:49,300 --> 00:13:53,710
something we don't really care about

00:13:51,790 --> 00:13:56,500
maybe how long our solution Jenna takes

00:13:53,710 --> 00:13:58,240
I guess and we're cursing up the tree

00:13:56,500 --> 00:14:01,270
means we can just cut and paste these

00:13:58,240 --> 00:14:04,600
things into another directory and making

00:14:01,270 --> 00:14:06,880
a package it's quite quick to do you

00:14:04,600 --> 00:14:09,720
have your private headers are also

00:14:06,880 --> 00:14:13,660
specified and then dependencies and

00:14:09,720 --> 00:14:16,570
dependencies are the things that you

00:14:13,660 --> 00:14:19,630
mean to use right so I want the includes

00:14:16,570 --> 00:14:22,330
or I want linkage from here I want the

00:14:19,630 --> 00:14:24,400
libraries from here and linkages

00:14:22,330 --> 00:14:26,830
transitive if you understand what I'm

00:14:24,400 --> 00:14:29,650
talking about there and we don't do that

00:14:26,830 --> 00:14:33,550
with headers you have to specify which

00:14:29,650 --> 00:14:35,290
ones you want so now what do you get

00:14:33,550 --> 00:14:37,060
when you depend on something is

00:14:35,290 --> 00:14:40,450
basically depends on what's in its

00:14:37,060 --> 00:14:42,760
global scope and say if you're dependent

00:14:40,450 --> 00:14:45,460
on lzma the compression library you

00:14:42,760 --> 00:14:48,610
would get its includes and its lips and

00:14:45,460 --> 00:14:50,560
that's it it's quite simple it's not

00:14:48,610 --> 00:14:52,330
really needing to specify much more now

00:14:50,560 --> 00:14:54,130
if you had some plug-in system or

00:14:52,330 --> 00:14:56,050
various other things sometimes you need

00:14:54,130 --> 00:14:59,620
more information for this but generally

00:14:56,050 --> 00:15:01,210
speaking that's all you need so you can

00:14:59,620 --> 00:15:04,000
see that writing one of these things

00:15:01,210 --> 00:15:05,020
doesn't take you that long soon we had

00:15:04,000 --> 00:15:08,050
hundreds of them

00:15:05,020 --> 00:15:09,400
and it was a pain to update them all we

00:15:08,050 --> 00:15:11,890
ran into all sorts of interesting

00:15:09,400 --> 00:15:17,520
problems it didn't really turn out as

00:15:11,890 --> 00:15:20,620
clean as my examples here for example

00:15:17,520 --> 00:15:22,630
when I talk about the names of packages

00:15:20,620 --> 00:15:25,210
and depending on things we we started

00:15:22,630 --> 00:15:27,670
with syntax like this one where you had

00:15:25,210 --> 00:15:30,250
to depend on a package and then specify

00:15:27,670 --> 00:15:31,960
a whole version of it right in line and

00:15:30,250 --> 00:15:34,810
of course that didn't work very well

00:15:31,960 --> 00:15:37,360
because you know you off great physical

00:15:34,810 --> 00:15:39,310
studio you know once a year so then we

00:15:37,360 --> 00:15:41,920
started going how maybe we need ranges

00:15:39,310 --> 00:15:45,760
oh that didn't work very well either it

00:15:41,920 --> 00:15:48,010
was all really repetitive this is just

00:15:45,760 --> 00:15:50,020
this section here right where right now

00:15:48,010 --> 00:15:51,850
I just listed a list of packages but

00:15:50,020 --> 00:15:57,160
previously I would have to specify

00:15:51,850 --> 00:15:59,020
information like that so is why is it

00:15:57,160 --> 00:16:02,800
bad for it to have version information

00:15:59,020 --> 00:16:06,070
in the path well everybody's gonna have

00:16:02,800 --> 00:16:06,790
a package like this one maybe this is a

00:16:06,070 --> 00:16:09,040
library

00:16:06,790 --> 00:16:12,160
it's a header only library which detects

00:16:09,040 --> 00:16:13,660
the compiler features we take a look at

00:16:12,160 --> 00:16:15,910
the version of the compiler and then

00:16:13,660 --> 00:16:17,770
we'll know what level and what support

00:16:15,910 --> 00:16:20,680
of what features we are allowed it's

00:16:17,770 --> 00:16:23,620
called EA base and so nearly every

00:16:20,680 --> 00:16:27,820
package in ent depends on the a base so

00:16:23,620 --> 00:16:30,970
it's really highly used so if you put

00:16:27,820 --> 00:16:33,520
the versioning information inside each

00:16:30,970 --> 00:16:35,350
package you're gonna have a problem

00:16:33,520 --> 00:16:38,200
you're not gonna want to update this

00:16:35,350 --> 00:16:39,640
thing it goes on for quite some time for

00:16:38,200 --> 00:16:41,440
this it's just crazy

00:16:39,640 --> 00:16:42,760
if you're finding and replacing across

00:16:41,440 --> 00:16:44,620
the whole thing and then have to check

00:16:42,760 --> 00:16:46,960
in all these files you're asking for

00:16:44,620 --> 00:16:50,440
trouble even for a simple upgrade let

00:16:46,960 --> 00:16:53,800
alone a complicated one so we remove

00:16:50,440 --> 00:16:56,020
that information and we did what anybody

00:16:53,800 --> 00:16:58,570
would have done we put it in a separate

00:16:56,020 --> 00:17:00,970
file we put it in one global file that

00:16:58,570 --> 00:17:03,880
is shared across a whole team and we

00:17:00,970 --> 00:17:07,000
call this the master config all this

00:17:03,880 --> 00:17:09,550
file it has is very simple it's just the

00:17:07,000 --> 00:17:11,770
name of the package and a version number

00:17:09,550 --> 00:17:14,470
name of package version number and one

00:17:11,770 --> 00:17:16,030
one-to-one you're not allowed to have

00:17:14,470 --> 00:17:17,560
more than one version of the same

00:17:16,030 --> 00:17:17,800
package that's just not allowed you try

00:17:17,560 --> 00:17:20,260
and

00:17:17,800 --> 00:17:23,890
gentleman doesn't work and that meant at

00:17:20,260 --> 00:17:25,750
this point all we had to do now is open

00:17:23,890 --> 00:17:28,600
up our master configure change the

00:17:25,750 --> 00:17:30,940
version number as long as it built check

00:17:28,600 --> 00:17:33,460
it in and you were done that was really

00:17:30,940 --> 00:17:37,180
easy now to do simple version and

00:17:33,460 --> 00:17:40,510
version changes but package upgrades are

00:17:37,180 --> 00:17:42,910
rarely simple they often take time and

00:17:40,510 --> 00:17:45,940
if everybody's changing them you had

00:17:42,910 --> 00:17:47,080
hundreds of packages if you just sort of

00:17:45,940 --> 00:17:49,630
think about it for a bit you're maybe

00:17:47,080 --> 00:17:52,090
doing one or two a day this file ended

00:17:49,630 --> 00:17:53,920
up being like it you know every time you

00:17:52,090 --> 00:17:54,760
sync it you'd have to resolve conflicts

00:17:53,920 --> 00:17:58,600
with it all the time

00:17:54,760 --> 00:18:01,230
and and that was problematic so one

00:17:58,600 --> 00:18:04,960
thing we did to help solve this problem

00:18:01,230 --> 00:18:07,840
was we added some variables so that when

00:18:04,960 --> 00:18:11,350
you were generating solution you could

00:18:07,840 --> 00:18:14,110
go okay if I want to switch to the new

00:18:11,350 --> 00:18:17,110
Visual Studio 2017 you just pass in

00:18:14,110 --> 00:18:19,870
another parameter Visual Studio 2017 is

00:18:17,110 --> 00:18:21,700
enabled everybody else in the project

00:18:19,870 --> 00:18:23,830
would still use the old default one the

00:18:21,700 --> 00:18:25,840
default one would be there 2015 if you

00:18:23,830 --> 00:18:27,580
didn't pass anything in get that one so

00:18:25,840 --> 00:18:30,070
you don't have to affect anybody but you

00:18:27,580 --> 00:18:31,600
could check in your changes that you're

00:18:30,070 --> 00:18:33,640
going to do roughly speaking I'm gonna

00:18:31,600 --> 00:18:36,400
need these packages it could even be

00:18:33,640 --> 00:18:38,200
broken for you but I'm gonna need a

00:18:36,400 --> 00:18:39,640
change like this in this file and check

00:18:38,200 --> 00:18:42,610
it in so you could get rid of the

00:18:39,640 --> 00:18:46,660
conflicts as quickly as you can

00:18:42,610 --> 00:18:48,850
I think now it's kind of interesting to

00:18:46,660 --> 00:18:51,850
sort of take a step back and see what we

00:18:48,850 --> 00:18:53,380
had now um you know if we compared

00:18:51,850 --> 00:18:55,480
ourselves to you know Python or Ruby

00:18:53,380 --> 00:18:59,410
yeah I'm not much of a Python or Ruby

00:18:55,480 --> 00:19:00,970
expert actually but I think this helps a

00:18:59,410 --> 00:19:03,840
little bit just in case people in the

00:19:00,970 --> 00:19:07,210
audience know this a little better

00:19:03,840 --> 00:19:09,970
we had a package server now we could put

00:19:07,210 --> 00:19:12,460
all of our content up on that it was

00:19:09,970 --> 00:19:14,200
private ta which is unfortunate but you

00:19:12,460 --> 00:19:16,000
know it's kind of work similar to like

00:19:14,200 --> 00:19:19,630
ruby gems or pie pie or something like

00:19:16,000 --> 00:19:21,250
that if you install the package you

00:19:19,630 --> 00:19:24,250
would install that in all of its

00:19:21,250 --> 00:19:25,640
children and then you could use it in

00:19:24,250 --> 00:19:29,630
the environment in

00:19:25,640 --> 00:19:31,880
- or in Ruby and that's really cool the

00:19:29,630 --> 00:19:35,090
one that we had is a little bit

00:19:31,880 --> 00:19:36,950
different we can you have to have a

00:19:35,090 --> 00:19:39,020
master config somehow or another and

00:19:36,950 --> 00:19:40,549
then you would generate solution and if

00:19:39,020 --> 00:19:41,960
it was the right type of master config

00:19:40,549 --> 00:19:44,480
then it would download all of the

00:19:41,960 --> 00:19:45,920
package necessary so if you generate

00:19:44,480 --> 00:19:49,130
solution for a movie player let's say

00:19:45,920 --> 00:19:50,900
then the movie player the file IO

00:19:49,130 --> 00:19:52,700
library the rendering library in the

00:19:50,900 --> 00:19:54,559
audio library would all come down and it

00:19:52,700 --> 00:19:57,380
would build you saying an example movie

00:19:54,559 --> 00:19:57,919
player there and and that was really

00:19:57,380 --> 00:20:02,000
good

00:19:57,919 --> 00:20:03,830
this is kind of similar um the other

00:20:02,000 --> 00:20:06,140
thing that we could do in a similar way

00:20:03,830 --> 00:20:08,120
is you know let's say the movie player

00:20:06,140 --> 00:20:09,650
you know mostly what you use it for is

00:20:08,120 --> 00:20:11,179
just playing movies back in and that

00:20:09,650 --> 00:20:13,250
kind of content so maybe it doesn't

00:20:11,179 --> 00:20:15,770
matter that it's on a really old version

00:20:13,250 --> 00:20:18,200
of DirectX so running DirectX 9 that's

00:20:15,770 --> 00:20:20,600
fine it doesn't matter you can just in

00:20:18,200 --> 00:20:22,820
your master config then say okay if I'm

00:20:20,600 --> 00:20:24,620
building the movie player direct x

00:20:22,820 --> 00:20:27,260
equals version 9 but if I'm building the

00:20:24,620 --> 00:20:31,730
game I want to run on a DirectX 11 or a

00:20:27,260 --> 00:20:33,910
vertex 12 so I can specify that so

00:20:31,730 --> 00:20:36,919
that's like environments and gem sets

00:20:33,910 --> 00:20:38,990
now like I was even explaining in the

00:20:36,919 --> 00:20:42,049
previous example you can kind of

00:20:38,990 --> 00:20:43,580
implement like virtual environments with

00:20:42,049 --> 00:20:45,620
the same thing you have this master

00:20:43,580 --> 00:20:47,690
config there and you can just have a

00:20:45,620 --> 00:20:49,040
switch there that goes okay I want to

00:20:47,690 --> 00:20:51,350
use the latest version of Visual Studio

00:20:49,040 --> 00:20:52,990
and you can switch between platforms and

00:20:51,350 --> 00:20:56,960
things in a similar way

00:20:52,990 --> 00:20:58,010
so now that I look at it and I

00:20:56,960 --> 00:21:00,200
understand this stuff a little bit

00:20:58,010 --> 00:21:01,760
better I think what we've done is we've

00:21:00,200 --> 00:21:03,710
implemented something pretty close to

00:21:01,760 --> 00:21:05,620
lock files lock files are usually a

00:21:03,710 --> 00:21:08,720
generate thing and ours are hard-coded

00:21:05,620 --> 00:21:10,730
but it's maybe a bit simpler as well but

00:21:08,720 --> 00:21:15,020
they're quite similar in feature set

00:21:10,730 --> 00:21:16,850
really I want to talk to you a little

00:21:15,020 --> 00:21:19,669
bit about an example of how this ends up

00:21:16,850 --> 00:21:25,490
working the large-scale and what we were

00:21:19,669 --> 00:21:27,530
able to do here um what happens a lot is

00:21:25,490 --> 00:21:29,450
you need to upgrade some large piece of

00:21:27,530 --> 00:21:32,900
technology say for example a new

00:21:29,450 --> 00:21:34,370
rendering engine so of course you can do

00:21:32,900 --> 00:21:36,380
right away is you can just change the

00:21:34,370 --> 00:21:37,270
master configure add some new variable

00:21:36,380 --> 00:21:38,740
in

00:21:37,270 --> 00:21:40,660
goes okay well I'm gonna need these

00:21:38,740 --> 00:21:44,290
packages it doesn't really even build

00:21:40,660 --> 00:21:45,520
much yet but that you you can set it up

00:21:44,290 --> 00:21:47,980
so you can have a small team of people

00:21:45,520 --> 00:21:49,900
working on this for six months or a year

00:21:47,980 --> 00:21:51,370
or something because it's gonna take you

00:21:49,900 --> 00:21:53,650
quite a while obviously to put together

00:21:51,370 --> 00:21:54,940
a whole rendering engine you're gonna

00:21:53,650 --> 00:21:56,740
want to make sure that you have all the

00:21:54,940 --> 00:21:58,360
full features that a previous one and

00:21:56,740 --> 00:22:01,810
you're gonna want to meet api's and

00:21:58,360 --> 00:22:03,370
stuff and have it be the same way the

00:22:01,810 --> 00:22:05,470
people that use the old rendering

00:22:03,370 --> 00:22:06,820
library they're all fine they're all

00:22:05,470 --> 00:22:09,520
still using the old rendering library

00:22:06,820 --> 00:22:12,490
they haven't had to change at all but

00:22:09,520 --> 00:22:13,840
you can stay in the same branch here you

00:22:12,490 --> 00:22:15,670
could stay all working in the same

00:22:13,840 --> 00:22:17,710
branch if you wanted to it's kind of

00:22:15,670 --> 00:22:20,020
like branching on individual packages

00:22:17,710 --> 00:22:23,440
you're like some modules and git or

00:22:20,020 --> 00:22:26,350
something this is a really powerful way

00:22:23,440 --> 00:22:30,070
of thinking of things and you can look

00:22:26,350 --> 00:22:31,450
at it at a you know a high level and see

00:22:30,070 --> 00:22:32,740
what's going on just by taking a look at

00:22:31,450 --> 00:22:36,070
this master config and see what's

00:22:32,740 --> 00:22:37,720
changing in the whole game and you can

00:22:36,070 --> 00:22:39,400
do this in Reverse as well so it's not

00:22:37,720 --> 00:22:40,900
just for like new technology when you're

00:22:39,400 --> 00:22:43,030
inventing new technology and you've got

00:22:40,900 --> 00:22:45,130
this smart group of engineers working on

00:22:43,030 --> 00:22:47,320
that you can use it for older technology

00:22:45,130 --> 00:22:48,370
or like oh well hmm you know the

00:22:47,320 --> 00:22:50,200
rendering guys they haven't quite

00:22:48,370 --> 00:22:51,790
finished writing their new particle

00:22:50,200 --> 00:22:52,960
system GUI or something like that but I

00:22:51,790 --> 00:22:55,630
need content for it

00:22:52,960 --> 00:22:57,370
well maybe we can just keep that old

00:22:55,630 --> 00:23:00,670
renderer running for a little bit and

00:22:57,370 --> 00:23:02,140
use that GUI from there and it'll all be

00:23:00,670 --> 00:23:04,180
good we can make the content and then

00:23:02,140 --> 00:23:05,320
write an exporter to the new one and the

00:23:04,180 --> 00:23:07,780
new ones what we're gonna ship to the

00:23:05,320 --> 00:23:10,780
customer but we can use the you know old

00:23:07,780 --> 00:23:13,780
tools to make the the new data and

00:23:10,780 --> 00:23:16,060
that's okay and it takes us a little

00:23:13,780 --> 00:23:17,950
while but you know after that point you

00:23:16,060 --> 00:23:22,840
can finally remove these old old

00:23:17,950 --> 00:23:24,670
libraries away now I think this really

00:23:22,840 --> 00:23:27,730
only works when the teams are kind of

00:23:24,670 --> 00:23:30,430
lopsided you know you've got 150 people

00:23:27,730 --> 00:23:33,370
on the the default version and you've

00:23:30,430 --> 00:23:35,500
got ten people on the the new version of

00:23:33,370 --> 00:23:38,290
the code or something like that then it

00:23:35,500 --> 00:23:39,730
works pretty well because you know you

00:23:38,290 --> 00:23:41,590
you don't want everybody you have to

00:23:39,730 --> 00:23:43,210
change the way they work and the test

00:23:41,590 --> 00:23:45,010
both environments all the time that's

00:23:43,210 --> 00:23:49,480
that's really difficult and takes more

00:23:45,010 --> 00:23:50,290
time really what you want for save the

00:23:49,480 --> 00:23:53,530
new rendering

00:23:50,290 --> 00:23:55,780
library is to communicate you know oh we

00:23:53,530 --> 00:23:58,510
need this new feature so you know if

00:23:55,780 --> 00:23:59,260
they they get broken a little bit it's

00:23:58,510 --> 00:24:00,790
okay

00:23:59,260 --> 00:24:02,980
there are probably the experts in

00:24:00,790 --> 00:24:05,110
writing this API anyways they need to

00:24:02,980 --> 00:24:07,330
have that conversation and they need to

00:24:05,110 --> 00:24:09,880
know about the fact that the the team

00:24:07,330 --> 00:24:12,220
the main team needs to write this new

00:24:09,880 --> 00:24:14,140
feature and as far as they know they

00:24:12,220 --> 00:24:15,370
need to break the API here and maybe

00:24:14,140 --> 00:24:16,680
they'll have a conversation they'll be

00:24:15,370 --> 00:24:20,200
able to get around it I don't know

00:24:16,680 --> 00:24:22,450
that's the idea if the teams were

00:24:20,200 --> 00:24:27,730
exactly equal size probably I would

00:24:22,450 --> 00:24:32,080
branch but it is a nice in-between lend

00:24:27,730 --> 00:24:36,700
so can packages actually help or do they

00:24:32,080 --> 00:24:38,520
just get in your way if you have you

00:24:36,700 --> 00:24:40,540
know if your build system helps you

00:24:38,520 --> 00:24:42,850
specify what is public and what is

00:24:40,540 --> 00:24:45,550
private I think it can help you also

00:24:42,850 --> 00:24:47,740
standardizing the way you work across a

00:24:45,550 --> 00:24:51,130
company the size of VA is really

00:24:47,740 --> 00:24:54,130
valuable stuff master config I think was

00:24:51,130 --> 00:24:56,860
kind of a stroke of genius for us and it

00:24:54,130 --> 00:24:58,270
really helped us you know deal with the

00:24:56,860 --> 00:25:01,600
problem of libraries at a higher level

00:24:58,270 --> 00:25:02,800
and this was quite useful so now I'm

00:25:01,600 --> 00:25:06,370
gonna talk a little bit about PAC

00:25:02,800 --> 00:25:10,750
servers and encode versions so package

00:25:06,370 --> 00:25:12,460
servers were really invented to try and

00:25:10,750 --> 00:25:15,730
tell everybody about a new package of

00:25:12,460 --> 00:25:17,440
what was going on here and automatically

00:25:15,730 --> 00:25:19,180
download all these things we could see

00:25:17,440 --> 00:25:22,930
it in Ruby in these other languages that

00:25:19,180 --> 00:25:24,910
this was a really cool idea but it's

00:25:22,930 --> 00:25:26,770
kind of a bit odd when it comes to doing

00:25:24,910 --> 00:25:28,300
it on a whole game this doesn't really

00:25:26,770 --> 00:25:30,220
make any sense right

00:25:28,300 --> 00:25:31,630
you're not gonna Jenna Selene FIFA and

00:25:30,220 --> 00:25:34,000
have it download all of the packages

00:25:31,630 --> 00:25:36,190
from FIFA at some point you have to stop

00:25:34,000 --> 00:25:38,830
it's not a you know a version control

00:25:36,190 --> 00:25:40,660
system it's kind of an advertising

00:25:38,830 --> 00:25:44,930
system for like low-level packages that

00:25:40,660 --> 00:25:46,530
you think are curated and good to share

00:25:44,930 --> 00:25:49,120
[Music]

00:25:46,530 --> 00:25:50,620
so you know if you only have one of

00:25:49,120 --> 00:25:54,430
these across your whole company you

00:25:50,620 --> 00:25:58,990
probably don't need to put it there you

00:25:54,430 --> 00:26:02,229
know it's a place to find and try out

00:25:58,990 --> 00:26:03,789
low level packages and and test them

00:26:02,229 --> 00:26:05,470
you know all we do to put things up on

00:26:03,789 --> 00:26:08,019
our package servers we just take that

00:26:05,470 --> 00:26:09,549
directory structure zip it up and put it

00:26:08,019 --> 00:26:11,320
on the server there's nothing else like

00:26:09,549 --> 00:26:16,629
that's the whole the whole steps there

00:26:11,320 --> 00:26:18,460
um you know you obviously you need a

00:26:16,629 --> 00:26:22,679
master config to go along with your

00:26:18,460 --> 00:26:25,600
tests and so one thing we had to do is

00:26:22,679 --> 00:26:29,049
duplicate the this burning information

00:26:25,600 --> 00:26:31,419
again but we didn't really want to do

00:26:29,049 --> 00:26:34,989
that so what we did to handle that

00:26:31,419 --> 00:26:37,179
particular problem was we just all the

00:26:34,989 --> 00:26:39,190
library teams roughly worked on one set

00:26:37,179 --> 00:26:41,320
of packages and they just cut and paste

00:26:39,190 --> 00:26:42,849
it across them all so they over

00:26:41,320 --> 00:26:45,039
specified how many packages and

00:26:42,849 --> 00:26:48,489
dependencies they had but that seemed to

00:26:45,039 --> 00:26:51,070
work pretty well this didn't scale very

00:26:48,489 --> 00:26:53,349
well for the the game teams though they

00:26:51,070 --> 00:26:55,059
didn't post everything to the system and

00:26:53,349 --> 00:26:57,909
there's other interesting problems

00:26:55,059 --> 00:26:59,259
around outsourcers and things but I'm

00:26:57,909 --> 00:27:02,739
not gonna talk about them too much today

00:26:59,259 --> 00:27:04,119
but you can just think of don't put your

00:27:02,739 --> 00:27:05,799
latest version of Star Wars on its

00:27:04,119 --> 00:27:07,409
public server with ten thousand people

00:27:05,799 --> 00:27:12,340
or something before a movie comes out

00:27:07,409 --> 00:27:16,899
that would be a bad idea version control

00:27:12,340 --> 00:27:19,509
systems this is really what we do is we

00:27:16,899 --> 00:27:22,840
post everything we can to our version

00:27:19,509 --> 00:27:25,629
control tools data libraries everything

00:27:22,840 --> 00:27:27,549
we can and sometimes we're not allowed

00:27:25,629 --> 00:27:29,289
to put some things there you can't you

00:27:27,549 --> 00:27:31,299
know export controls across country

00:27:29,289 --> 00:27:32,320
boundaries and things but and in those

00:27:31,299 --> 00:27:36,179
cases we'll make something called a

00:27:32,320 --> 00:27:38,320
proxy package but there is ways but

00:27:36,179 --> 00:27:41,169
generally speaking as much as we can

00:27:38,320 --> 00:27:43,629
we'll post everything on to our servers

00:27:41,169 --> 00:27:46,419
and we'll sink and we'll build and this

00:27:43,629 --> 00:27:48,580
work great for game games our library

00:27:46,419 --> 00:27:51,249
teams though have a really big problem

00:27:48,580 --> 00:27:52,979
here a problem is is every single game

00:27:51,249 --> 00:27:55,929
team will just upgrade willy-nilly

00:27:52,979 --> 00:27:57,190
they'll you know they have their own

00:27:55,929 --> 00:27:58,659
reasons to operate they need a new

00:27:57,190 --> 00:28:00,220
rendering engine they need a new audio

00:27:58,659 --> 00:28:02,229
thing they need new file annual

00:28:00,220 --> 00:28:04,090
performance but if you're writing a

00:28:02,229 --> 00:28:07,210
movie player what are you going to do

00:28:04,090 --> 00:28:09,549
you need to write to a standard API you

00:28:07,210 --> 00:28:11,349
need to know what's going on the only

00:28:09,549 --> 00:28:13,340
thing we could figure out what to do is

00:28:11,349 --> 00:28:15,560
to force everybody onto some version

00:28:13,340 --> 00:28:17,990
and then track them make sure that you

00:28:15,560 --> 00:28:20,390
know we knew how many lines of code they

00:28:17,990 --> 00:28:24,080
were divergent and this worked pretty

00:28:20,390 --> 00:28:26,480
well that we'd also didn't find out

00:28:24,080 --> 00:28:28,400
about you know bug fixes and cool ideas

00:28:26,480 --> 00:28:30,140
like that and this change is actually

00:28:28,400 --> 00:28:31,310
really necessary or have the

00:28:30,140 --> 00:28:33,920
conversation with them that

00:28:31,310 --> 00:28:35,230
oh yeah no you don't want to be doing it

00:28:33,920 --> 00:28:37,490
that way you can fix it this way instead

00:28:35,230 --> 00:28:40,580
because the game teams understand the

00:28:37,490 --> 00:28:42,140
problem but the library teams understand

00:28:40,580 --> 00:28:44,450
where the solution goes and how to write

00:28:42,140 --> 00:28:47,930
the solution but this was only actually

00:28:44,450 --> 00:28:50,630
in sports you know Dragon Age and Mass

00:28:47,930 --> 00:28:51,860
Effect Need for Speed battlefield all of

00:28:50,630 --> 00:28:53,810
these kind of people were solving this

00:28:51,860 --> 00:28:56,750
similar kind of issue with frostbite

00:28:53,810 --> 00:28:58,370
they built up a huge stack of technology

00:28:56,750 --> 00:29:00,920
and then they just integrated that

00:28:58,370 --> 00:29:02,630
across all the various Studios and

00:29:00,920 --> 00:29:04,970
that's how they would solve this problem

00:29:02,630 --> 00:29:06,560
today we've mixing the two together and

00:29:04,970 --> 00:29:09,800
this is actually one thing that Igor

00:29:06,560 --> 00:29:12,890
worked quite a bit on is moving

00:29:09,800 --> 00:29:15,530
frostbite to packages and we're trying

00:29:12,890 --> 00:29:20,450
to improve all this technology as we go

00:29:15,530 --> 00:29:23,090
along now no package servers really

00:29:20,450 --> 00:29:26,270
useful for low-level leaf packages not

00:29:23,090 --> 00:29:29,420
really used for home games divergence is

00:29:26,270 --> 00:29:31,190
a really hard problem the best that we

00:29:29,420 --> 00:29:33,140
know how to do is just have a stack of

00:29:31,190 --> 00:29:35,420
Technology and you can see this in all

00:29:33,140 --> 00:29:36,920
the game companies now and that nearly

00:29:35,420 --> 00:29:38,930
all of them are basically based on an

00:29:36,920 --> 00:29:41,440
engine and they all have like one

00:29:38,930 --> 00:29:44,570
version to write all their code against

00:29:41,440 --> 00:29:47,150
okay finally we're starting to talk

00:29:44,570 --> 00:29:49,160
about modules all right

00:29:47,150 --> 00:29:50,660
so packages you can see that there are

00:29:49,160 --> 00:29:54,620
these kind of those library things

00:29:50,660 --> 00:29:56,480
modules on the other hand they're really

00:29:54,620 --> 00:30:00,440
they're trying to improve build times

00:29:56,480 --> 00:30:03,620
right there a better separation between

00:30:00,440 --> 00:30:05,870
interface and implementation and really

00:30:03,620 --> 00:30:08,540
hopefully there's some viable way of

00:30:05,870 --> 00:30:10,910
moving forward with these and for

00:30:08,540 --> 00:30:13,190
existing libraries and that's kind of

00:30:10,910 --> 00:30:15,050
why I wanted to take a look at it is to

00:30:13,190 --> 00:30:20,090
see how viable is it gonna be for us to

00:30:15,050 --> 00:30:22,400
move forward so of course everybody here

00:30:20,090 --> 00:30:25,250
is a C++ programmer you guys all know

00:30:22,400 --> 00:30:26,990
CPP files make object files you probably

00:30:25,250 --> 00:30:30,050
know that dot H files me PC

00:30:26,990 --> 00:30:32,360
H files this is the kind of difference

00:30:30,050 --> 00:30:34,790
though is this idea of modules anyways

00:30:32,360 --> 00:30:37,940
is there's kind of a one-to-one

00:30:34,790 --> 00:30:40,700
relationship here for the modules and

00:30:37,940 --> 00:30:44,540
modules are gonna be called dot IX X's

00:30:40,700 --> 00:30:46,160
and they're gonna spit out an IFC in an

00:30:44,540 --> 00:30:49,160
object file in the case of Visual Studio

00:30:46,160 --> 00:30:50,929
anyways the names of these things are

00:30:49,160 --> 00:30:53,330
changing all the time clang has its own

00:30:50,929 --> 00:30:54,890
naming convention it's kind of

00:30:53,330 --> 00:30:56,929
interesting le the kleine one's actually

00:30:54,890 --> 00:30:58,460
a good naming convention friend but

00:30:56,929 --> 00:31:00,110
anyways I'm gonna talk about it for

00:30:58,460 --> 00:31:02,330
viewable studios point of view since

00:31:00,110 --> 00:31:07,220
that was the further ahead thing for the

00:31:02,330 --> 00:31:09,500
modules TS so to give an example of how

00:31:07,220 --> 00:31:11,360
modules are supposed to work I had to

00:31:09,500 --> 00:31:14,059
write a little tiny example and that's

00:31:11,360 --> 00:31:18,530
what I'm gonna do here I have three

00:31:14,059 --> 00:31:22,100
files I have main dot CPP mm pool and a

00:31:18,530 --> 00:31:23,840
module so I just have a simple class

00:31:22,100 --> 00:31:25,820
called wine interface and and I

00:31:23,840 --> 00:31:29,690
implement it and I have the interface

00:31:25,820 --> 00:31:33,290
defined in in module the thing is though

00:31:29,690 --> 00:31:35,660
is the command lines are not necessarily

00:31:33,290 --> 00:31:39,740
stable yet and there's a few different

00:31:35,660 --> 00:31:41,059
ways of working and so I decided to

00:31:39,740 --> 00:31:42,230
implement them both because I thought it

00:31:41,059 --> 00:31:46,220
was quite interesting both of them

00:31:42,230 --> 00:31:48,050
really um if you use these things called

00:31:46,220 --> 00:31:51,170
references you have to refer to

00:31:48,050 --> 00:31:54,860
individual packages individual files and

00:31:51,170 --> 00:31:57,170
if you use search paths then the name of

00:31:54,860 --> 00:32:01,460
your file needs to be the same as the

00:31:57,170 --> 00:32:03,860
content insight and it'll be easier if I

00:32:01,460 --> 00:32:06,500
just go along I think so this is what a

00:32:03,860 --> 00:32:08,360
module looks like and this module can

00:32:06,500 --> 00:32:12,340
have one of two memes it can be mi dot

00:32:08,360 --> 00:32:14,630
by X X or can be just capital n I xx and

00:32:12,340 --> 00:32:16,429
you can write a bunch of stuff at the

00:32:14,630 --> 00:32:17,750
top and include things and this is a

00:32:16,429 --> 00:32:19,520
little private to the module one won't

00:32:17,750 --> 00:32:21,920
be expanded to other things and then you

00:32:19,520 --> 00:32:24,530
can it say that you've got a module and

00:32:21,920 --> 00:32:26,090
then you can export some stuff and so I

00:32:24,530 --> 00:32:28,429
think these modules will be useful

00:32:26,090 --> 00:32:30,350
because they can make things private and

00:32:28,429 --> 00:32:37,929
public and that's a good idea we know

00:32:30,350 --> 00:32:37,929
this but you know yeah

00:32:39,320 --> 00:32:42,809
so this is what the command-line

00:32:41,280 --> 00:32:44,280
differences look like don't worry about

00:32:42,809 --> 00:32:46,260
all the stuff in gray I mean that's just

00:32:44,280 --> 00:32:49,950
make sure you guys know how to get it

00:32:46,260 --> 00:32:51,780
actually work the main thing that I had

00:32:49,950 --> 00:32:55,350
to specify that's different between the

00:32:51,780 --> 00:32:59,580
two ways of working between search paths

00:32:55,350 --> 00:33:01,530
and references is just different you

00:32:59,580 --> 00:33:05,220
know output names so that's all I'm

00:33:01,530 --> 00:33:06,630
talking about here when you use one of

00:33:05,220 --> 00:33:08,850
these modules if this is what are the

00:33:06,630 --> 00:33:11,909
interesting stuff happens on the command

00:33:08,850 --> 00:33:13,679
line is you just import it and then you

00:33:11,909 --> 00:33:15,120
have all of the public interface there

00:33:13,679 --> 00:33:19,500
and that's simple it's just like

00:33:15,120 --> 00:33:21,270
including a library and then you can

00:33:19,500 --> 00:33:22,679
write your functions they've had to do

00:33:21,270 --> 00:33:27,179
with that namespace and then you're done

00:33:22,679 --> 00:33:29,460
that's pretty simple so here's how you

00:33:27,179 --> 00:33:31,530
use that is on the command line you will

00:33:29,460 --> 00:33:35,220
need to either specify the reference to

00:33:31,530 --> 00:33:37,260
your IFC file this is the output that

00:33:35,220 --> 00:33:39,419
you built out knowing you need a

00:33:37,260 --> 00:33:42,090
reference to that and when the export

00:33:39,419 --> 00:33:44,070
happens it'll then find out that inside

00:33:42,090 --> 00:33:46,110
this file there's an EM so when you

00:33:44,070 --> 00:33:47,039
import in M it goes okay check all my

00:33:46,110 --> 00:33:49,020
references ah

00:33:47,039 --> 00:33:50,549
there's there's my M excellent and

00:33:49,020 --> 00:33:53,039
import that and if it doesn't find one

00:33:50,549 --> 00:33:55,289
it gives you an error in the search path

00:33:53,039 --> 00:33:56,760
it's kind of the same thing except you

00:33:55,289 --> 00:33:59,250
just give a directory of stuff and it

00:33:56,760 --> 00:34:01,559
goes and okay is there a file named M

00:33:59,250 --> 00:34:03,630
okay yes there is now I look inside it

00:34:01,559 --> 00:34:06,179
and yes there's a thing called M inside

00:34:03,630 --> 00:34:12,000
excellent then if that all works out you

00:34:06,179 --> 00:34:14,700
don't get an error so main.cpp it's

00:34:12,000 --> 00:34:16,919
using it as well so the command line is

00:34:14,700 --> 00:34:19,200
the same there's no changes here you

00:34:16,919 --> 00:34:20,419
either have to reference your module or

00:34:19,200 --> 00:34:24,540
you have to search for your module

00:34:20,419 --> 00:34:26,849
excellent linking doesn't change at all

00:34:24,540 --> 00:34:28,889
you have object files yet object files

00:34:26,849 --> 00:34:32,520
before you have object files now there's

00:34:28,889 --> 00:34:35,480
nothing changed okay probably 45 minutes

00:34:32,520 --> 00:34:37,470
in or something like that and well

00:34:35,480 --> 00:34:40,409
finally talking about packages and

00:34:37,470 --> 00:34:47,129
modules excellent so what I would

00:34:40,409 --> 00:34:48,960
actually think we would do here is if we

00:34:47,129 --> 00:34:50,710
were using search paths and we had our

00:34:48,960 --> 00:34:53,500
package technology

00:34:50,710 --> 00:34:55,240
we would probably just have these search

00:34:53,500 --> 00:34:59,380
paths as being just like our include

00:34:55,240 --> 00:35:01,450
paths so in our global scopes are public

00:34:59,380 --> 00:35:05,710
interfaces of our packages we just list

00:35:01,450 --> 00:35:07,510
okay these are the new search paths for

00:35:05,710 --> 00:35:08,710
modules that I would want to use well

00:35:07,510 --> 00:35:11,200
that would work out pretty well it's

00:35:08,710 --> 00:35:13,720
similar limitations to header files

00:35:11,200 --> 00:35:15,910
today references are a bit more

00:35:13,720 --> 00:35:18,460
interesting because we don't really have

00:35:15,910 --> 00:35:23,440
the equivalent of them so I could list

00:35:18,460 --> 00:35:26,440
out all of the I guess modules for this

00:35:23,440 --> 00:35:30,280
package since there could be more than

00:35:26,440 --> 00:35:31,990
one module per package but I think this

00:35:30,280 --> 00:35:35,140
might lead to an interesting problem

00:35:31,990 --> 00:35:40,360
so you see modules can't have circular

00:35:35,140 --> 00:35:43,480
references and EA packages can at least

00:35:40,360 --> 00:35:45,040
at link headers themselves you know

00:35:43,480 --> 00:35:46,630
don't have circular dependencies we

00:35:45,040 --> 00:35:49,690
already had to disconnect all of these

00:35:46,630 --> 00:35:54,780
games right what what I'm worried about

00:35:49,690 --> 00:35:58,450
is if one package equals one module or

00:35:54,780 --> 00:36:01,540
basically the same meaning would be one

00:35:58,450 --> 00:36:03,250
package equals all the modules which is

00:36:01,540 --> 00:36:05,530
probably what I would have to specify in

00:36:03,250 --> 00:36:08,200
my build system mmm

00:36:05,530 --> 00:36:10,540
this might be difficult and would lead

00:36:08,200 --> 00:36:12,850
me into an interesting problem that's

00:36:10,540 --> 00:36:14,860
problem just to give you a feel of it it

00:36:12,850 --> 00:36:16,300
is the problem you run into every once

00:36:14,860 --> 00:36:18,790
in a while when you're using a single

00:36:16,300 --> 00:36:21,580
pass linker like you know gccu you're

00:36:18,790 --> 00:36:23,410
like oh yeah why do I need to specify

00:36:21,580 --> 00:36:25,180
this library again to fix this error um

00:36:23,410 --> 00:36:27,610
you know it's just because you know the

00:36:25,180 --> 00:36:29,830
linker only links one direction and it's

00:36:27,610 --> 00:36:31,390
single pass and stuff like that and

00:36:29,830 --> 00:36:34,060
maybe you've solved it like that or

00:36:31,390 --> 00:36:37,180
maybe you did what we did which was yeah

00:36:34,060 --> 00:36:38,920
we just put all of our libraries in one

00:36:37,180 --> 00:36:41,910
big start group end group and keep

00:36:38,920 --> 00:36:46,000
looping around until you're done lovely

00:36:41,910 --> 00:36:52,020
works great I guess it's the default and

00:36:46,000 --> 00:36:54,040
Visual Studio how could it be wrong yeah

00:36:52,020 --> 00:36:55,870
anyway so the next points if you

00:36:54,040 --> 00:36:59,320
understand make files will be clear and

00:36:55,870 --> 00:37:01,360
if not you're gonna be a bit confused

00:36:59,320 --> 00:37:04,450
basically it'll make file you have

00:37:01,360 --> 00:37:05,800
output : input and if you change one of

00:37:04,450 --> 00:37:08,470
the input files and you're supposed to

00:37:05,800 --> 00:37:10,990
build the outputs and the line that you

00:37:08,470 --> 00:37:13,920
will use is the line below so that's

00:37:10,990 --> 00:37:17,650
kind of what I'm trying to explain here

00:37:13,920 --> 00:37:19,750
so there's command-line options for the

00:37:17,650 --> 00:37:21,190
compiler to generate dependencies they

00:37:19,750 --> 00:37:22,690
can generate little files for you and

00:37:21,190 --> 00:37:24,400
stuff and they don't have the

00:37:22,690 --> 00:37:26,710
equivalents of these right now for

00:37:24,400 --> 00:37:27,910
modules and therefore I don't really

00:37:26,710 --> 00:37:32,890
know how maybe you're supposed to make

00:37:27,910 --> 00:37:35,260
this work so the thing here is say I had

00:37:32,890 --> 00:37:39,250
an application and I X X here and then

00:37:35,260 --> 00:37:42,400
it imports RM now how do you know that

00:37:39,250 --> 00:37:44,770
are in equals rendering not IX I don't

00:37:42,400 --> 00:37:47,800
really understand how I'm supposed to

00:37:44,770 --> 00:37:49,180
figure that out um guess I can make some

00:37:47,800 --> 00:37:51,520
kind of global table or something out of

00:37:49,180 --> 00:37:53,530
it I don't really quite understand I'm

00:37:51,520 --> 00:37:55,120
sure there's some good thoughts involved

00:37:53,530 --> 00:37:58,300
in here but I didn't know what they were

00:37:55,120 --> 00:38:00,600
so I thought they were a bit odd but if

00:37:58,300 --> 00:38:03,550
I use search paths on the other hand I

00:38:00,600 --> 00:38:06,070
can tell I would be you know import in

00:38:03,550 --> 00:38:07,330
RM and there would be an RM dot IX X

00:38:06,070 --> 00:38:08,920
somewhere I could figure out what

00:38:07,330 --> 00:38:10,780
directory it was from and therefore I

00:38:08,920 --> 00:38:13,840
could figure out ok probably the output

00:38:10,780 --> 00:38:15,550
would go here and I couldn't figure out

00:38:13,840 --> 00:38:19,750
how everything was gonna work together

00:38:15,550 --> 00:38:24,520
and that dependency so anyways that's

00:38:19,750 --> 00:38:29,680
that's kind of interesting modules at

00:38:24,520 --> 00:38:32,410
scale they have modules have different

00:38:29,680 --> 00:38:34,450
rules than dot H files or object files

00:38:32,410 --> 00:38:36,910
for naming I mean object files are kind

00:38:34,450 --> 00:38:38,800
of private to a module anywhere private

00:38:36,910 --> 00:38:40,480
to a package anyway so they're kind of

00:38:38,800 --> 00:38:42,160
just a different beast but thought H

00:38:40,480 --> 00:38:46,300
files are a little simple there is

00:38:42,160 --> 00:38:48,400
similar dot H files have paths though

00:38:46,300 --> 00:38:49,750
and modules don't so that's a bit

00:38:48,400 --> 00:38:53,590
interesting I'm not sure why they made

00:38:49,750 --> 00:38:55,870
that choice yeah has had trouble with

00:38:53,590 --> 00:38:57,100
you know package naming in the past and

00:38:55,870 --> 00:39:00,160
trying to get their headers not to

00:38:57,100 --> 00:39:03,280
collide so if you have FIFA vector and

00:39:00,160 --> 00:39:04,720
you know yes DL vector and you depend on

00:39:03,280 --> 00:39:07,870
both of them you're in trouble if they

00:39:04,720 --> 00:39:11,200
just be called vector right so probably

00:39:07,870 --> 00:39:12,160
if we were to use modules I would look

00:39:11,200 --> 00:39:14,109
at it and I

00:39:12,160 --> 00:39:18,329
you know we just built package name dot

00:39:14,109 --> 00:39:21,760
module named on IFC under dependencies

00:39:18,329 --> 00:39:25,450
you can kind of clear this out as much

00:39:21,760 --> 00:39:28,839
as you can by making sure that your

00:39:25,450 --> 00:39:31,900
packages don't want it you know just

00:39:28,839 --> 00:39:34,000
don't have like one global list of all

00:39:31,900 --> 00:39:37,410
of the headers that they need for all

00:39:34,000 --> 00:39:40,960
packages or all your libraries right

00:39:37,410 --> 00:39:42,700
if this library only uses FIFA vector

00:39:40,960 --> 00:39:45,039
then it only depends on that only gets

00:39:42,700 --> 00:39:46,960
those headers and if this package that

00:39:45,039 --> 00:39:49,569
only is the STL vectors well agreed it

00:39:46,960 --> 00:39:51,359
only uses that but that only fix 80% of

00:39:49,569 --> 00:39:53,289
the problem you're still gonna have like

00:39:51,359 --> 00:39:54,849
high-level modules that try to

00:39:53,289 --> 00:39:58,030
initialize everything and they're gonna

00:39:54,849 --> 00:40:00,880
depend on nearly everything so that's

00:39:58,030 --> 00:40:02,250
kind of a bit of a problem well why

00:40:00,880 --> 00:40:06,700
don't thing I noticed in Visual Studio

00:40:02,250 --> 00:40:09,849
2017 is if I had like an inline function

00:40:06,700 --> 00:40:12,520
in a module and then I had another

00:40:09,849 --> 00:40:14,230
version of it in a CPP file exactly the

00:40:12,520 --> 00:40:16,900
same content or different content either

00:40:14,230 --> 00:40:19,359
way just the same same function though

00:40:16,900 --> 00:40:23,589
same specification it wouldn't give me

00:40:19,359 --> 00:40:25,329
an error clang did but you know Visual

00:40:23,589 --> 00:40:27,369
Studio would not and so that was kind of

00:40:25,329 --> 00:40:28,779
interesting the inline one would always

00:40:27,369 --> 00:40:32,710
have priority so the one in the module

00:40:28,779 --> 00:40:35,109
would always win I don't know why so

00:40:32,710 --> 00:40:40,809
clang has trouble with legacy headers

00:40:35,109 --> 00:40:42,430
and macros and things but I don't know

00:40:40,809 --> 00:40:43,630
really too much about it I think there's

00:40:42,430 --> 00:40:44,920
other people didn't been talking about

00:40:43,630 --> 00:40:49,839
it and I'm probably running out of time

00:40:44,920 --> 00:40:52,359
anyways so let me just summarize this

00:40:49,839 --> 00:40:55,390
whole talk up one more last time here so

00:40:52,359 --> 00:40:56,380
what modules there are a better version

00:40:55,390 --> 00:41:02,819
of a dot H file

00:40:56,380 --> 00:41:05,980
they're called dot light X or dot CPP M

00:41:02,819 --> 00:41:08,770
they could use you know some way if the

00:41:05,980 --> 00:41:10,059
you know creating dependencies so we

00:41:08,770 --> 00:41:11,770
could see maybe how you're supposed to

00:41:10,059 --> 00:41:14,410
write a build system for them that would

00:41:11,770 --> 00:41:18,039
be a bit interesting just to prove that

00:41:14,410 --> 00:41:20,079
we can so an EA I think if we started

00:41:18,039 --> 00:41:21,760
using this at scale we might run into a

00:41:20,079 --> 00:41:23,850
problem round circular linkage I'm not

00:41:21,760 --> 00:41:26,310
really sure what

00:41:23,850 --> 00:41:29,280
possibly a name collision certainly

00:41:26,310 --> 00:41:31,670
would be a small hindrance anyways but

00:41:29,280 --> 00:41:33,990
if we're careful it wouldn't be too bad

00:41:31,670 --> 00:41:35,880
would I use modules in production

00:41:33,990 --> 00:41:37,260
probably not we have too many

00:41:35,880 --> 00:41:39,660
platformers that just don't support this

00:41:37,260 --> 00:41:40,950
today it's kind of a toy project that we

00:41:39,660 --> 00:41:43,290
should be looking at and just make sure

00:41:40,950 --> 00:41:46,740
that it's going the right way for us and

00:41:43,290 --> 00:41:49,920
so summarizing things up build systems

00:41:46,740 --> 00:41:52,920
are they useful well they get you to

00:41:49,920 --> 00:41:54,690
hide the appropriate things and yes if

00:41:52,920 --> 00:41:57,780
they standardize the way you work

00:41:54,690 --> 00:42:01,560
yes master config it was a really good

00:41:57,780 --> 00:42:04,200
idea having one versioning file across a

00:42:01,560 --> 00:42:09,440
bunch of executables one versioning for

00:42:04,200 --> 00:42:09,440
the whole team was really valuable

00:42:10,070 --> 00:42:16,650
package servers they are a really good

00:42:13,620 --> 00:42:18,720
idea but they're really only about low

00:42:16,650 --> 00:42:20,610
level packages you know if I was working

00:42:18,720 --> 00:42:23,760
in a small company or something like

00:42:20,610 --> 00:42:25,200
that I don't think I would you know

00:42:23,760 --> 00:42:27,060
think it's the first thing I would write

00:42:25,200 --> 00:42:28,830
but in a big company like EA it's quite

00:42:27,060 --> 00:42:30,390
useful because you can find out you know

00:42:28,830 --> 00:42:36,930
the latest version of each of the

00:42:30,390 --> 00:42:40,260
packages in those countries finally you

00:42:36,930 --> 00:42:44,090
know mitigating the versions is between

00:42:40,260 --> 00:42:47,460
teams this is a very hard problem I

00:42:44,090 --> 00:42:48,720
guess you can just force it top-down and

00:42:47,460 --> 00:42:50,670
to say you're going to use those

00:42:48,720 --> 00:42:53,850
versions I don't know it's quite

00:42:50,670 --> 00:42:55,590
difficult uh and one last time through

00:42:53,850 --> 00:42:58,110
modules better version of headers

00:42:55,590 --> 00:42:59,370
there's two ways of using the command

00:42:58,110 --> 00:43:02,130
lines at the moment in Visual Studio

00:42:59,370 --> 00:43:03,270
2017 by search path and by reference I

00:43:02,130 --> 00:43:06,950
don't know which one's going to be

00:43:03,270 --> 00:43:10,170
standard so should both no way to do

00:43:06,950 --> 00:43:11,310
generate dependencies yet and maybe we

00:43:10,170 --> 00:43:16,870
have some problems with circular

00:43:11,310 --> 00:43:23,239
dependencies thank you

00:43:16,870 --> 00:43:25,789
[Applause]

00:43:23,239 --> 00:43:29,209
yes there's a microphone over there if

00:43:25,789 --> 00:43:31,989
anyone's got any questions or any trying

00:43:29,209 --> 00:43:31,989
repeat them or something

00:43:32,829 --> 00:43:40,459
yeah probably better I mean I try to

00:43:36,140 --> 00:43:43,999
repeat them as well but I guess that's a

00:43:40,459 --> 00:43:46,849
professional thing for me to be doing so

00:43:43,999 --> 00:43:48,979
I have one well I have two part question

00:43:46,849 --> 00:43:50,869
I suppose have you have you shared this

00:43:48,979 --> 00:43:52,160
with the mod the modules TS authors and

00:43:50,869 --> 00:43:53,779
so forth like your opinions on all this

00:43:52,160 --> 00:43:56,359
oh no not really

00:43:53,779 --> 00:43:57,680
this is kind of you know a surprise so

00:43:56,359 --> 00:44:00,529
I've been somewhat involved in this

00:43:57,680 --> 00:44:02,150
process and the circular linkage one I

00:44:00,529 --> 00:44:03,380
think that one is not super

00:44:02,150 --> 00:44:04,999
controversial in the committee like I

00:44:03,380 --> 00:44:07,130
think you're gonna lose that fight okay

00:44:04,999 --> 00:44:08,509
but it's something we should bring up

00:44:07,130 --> 00:44:10,489
the other one that was more interesting

00:44:08,509 --> 00:44:12,019
it's actually a source of some amount of

00:44:10,489 --> 00:44:13,640
controversy at least historically which

00:44:12,019 --> 00:44:15,019
is this whole idea of like how do I name

00:44:13,640 --> 00:44:18,499
these things how to deal with name

00:44:15,019 --> 00:44:20,119
collisions what's the identifier yeah so

00:44:18,499 --> 00:44:21,499
you're like large-scale deployment

00:44:20,119 --> 00:44:23,449
experience might actually be useful in

00:44:21,499 --> 00:44:24,349
like helping settle some of this cool so

00:44:23,449 --> 00:44:26,209
I'm not asking you to write a paper

00:44:24,349 --> 00:44:27,469
that's a lot of work but at least that

00:44:26,209 --> 00:44:29,119
would be good if you could do that but

00:44:27,469 --> 00:44:31,640
at least like at least sharing it with

00:44:29,119 --> 00:44:33,829
the people it yeah I was hoping that

00:44:31,640 --> 00:44:35,630
this would cause me some discussion here

00:44:33,829 --> 00:44:37,009
and I was hoping to talk to some of the

00:44:35,630 --> 00:44:39,140
experts I don't know if they showed up

00:44:37,009 --> 00:44:40,819
do you know Gabby dos Reyes said I do

00:44:39,140 --> 00:44:42,949
know him a little bit I messaged him and

00:44:40,819 --> 00:44:44,269
you should corner him he's here someone

00:44:42,949 --> 00:44:47,269
earn him again I quoted him last time

00:44:44,269 --> 00:44:55,459
and so you know so we'll be good to try

00:44:47,269 --> 00:44:58,069
and talk to them again so yeah thanks so

00:44:55,459 --> 00:45:03,890
I'm kind of coming from other languages

00:44:58,069 --> 00:45:06,199
like rust and m/l yeah and I don't

00:45:03,890 --> 00:45:08,329
really get the point of these modules

00:45:06,199 --> 00:45:12,140
like they feel kind of like precompiled

00:45:08,329 --> 00:45:14,239
headers they are so they're just about

00:45:12,140 --> 00:45:16,069
making things build faster I mean like

00:45:14,239 --> 00:45:18,549
why not just use precompiled headers

00:45:16,069 --> 00:45:20,299
these kind of my ideas so at least the

00:45:18,549 --> 00:45:21,829
relationship between them is a bit

00:45:20,299 --> 00:45:23,390
different right like there's a many to

00:45:21,829 --> 00:45:25,729
one relationship there and so you only

00:45:23,390 --> 00:45:27,739
have one precompiled header package in

00:45:25,729 --> 00:45:30,090
our case right so this would be able to

00:45:27,739 --> 00:45:31,920
divide it up in a slightly smaller unit

00:45:30,090 --> 00:45:33,660
I guess I mean whether that's enough

00:45:31,920 --> 00:45:36,780
performance game to make it worthwhile I

00:45:33,660 --> 00:45:38,880
don't know I just like I look at like

00:45:36,780 --> 00:45:41,940
languages like rust and rust doesn't

00:45:38,880 --> 00:45:46,110
have the best module system ever but

00:45:41,940 --> 00:45:48,450
it's just like it feels a lot more like

00:45:46,110 --> 00:45:53,720
actually in the language as opposed to

00:45:48,450 --> 00:45:57,180
this which feels very much like well a

00:45:53,720 --> 00:45:58,560
preprocessor thing basically and I just

00:45:57,180 --> 00:46:03,360
wanted to think like what's your opinion

00:45:58,560 --> 00:46:08,820
on that I mean it is is modules just a

00:46:03,360 --> 00:46:10,680
preprocessor thing it maybe it is I mean

00:46:08,820 --> 00:46:13,740
to me this is one reason why I kind of

00:46:10,680 --> 00:46:16,200
did this talk is because I felt like we

00:46:13,740 --> 00:46:18,060
weren't quite taking it far enough we

00:46:16,200 --> 00:46:20,910
want something more like packages it EA

00:46:18,060 --> 00:46:23,190
I think yeah we're you know I've had

00:46:20,910 --> 00:46:25,410
this for 15 years I don't see this as

00:46:23,190 --> 00:46:27,900
being not technically difficult what's

00:46:25,410 --> 00:46:30,000
harder to get everybody to agree yeah

00:46:27,900 --> 00:46:31,380
and if you look at Google or something

00:46:30,000 --> 00:46:33,300
like that they have more than one build

00:46:31,380 --> 00:46:35,790
system I think they're really good

00:46:33,300 --> 00:46:36,870
engineers like they're they're not you

00:46:35,790 --> 00:46:38,820
know there's a reason why they're

00:46:36,870 --> 00:46:40,860
probably doing that I don't know what it

00:46:38,820 --> 00:46:44,310
is but I'm sure internally they have

00:46:40,860 --> 00:46:46,530
this discussion all the time um but yeah

00:46:44,310 --> 00:46:47,820
getting us all to agree on one it seems

00:46:46,530 --> 00:46:54,270
to be quite difficult and I don't know

00:46:47,820 --> 00:46:56,100
why all right how do you use this

00:46:54,270 --> 00:46:58,500
package system only for source bias

00:46:56,100 --> 00:47:01,350
packages or you can distribute binary

00:46:58,500 --> 00:47:04,710
pre-built packages across teams for

00:47:01,350 --> 00:47:07,430
instance a EST l maybe it would have

00:47:04,710 --> 00:47:10,380
already leap and dll files pre-built and

00:47:07,430 --> 00:47:12,960
user will have it linked only without

00:47:10,380 --> 00:47:16,380
need to recompile everything so what

00:47:12,960 --> 00:47:20,400
you're asking for is do we just use

00:47:16,380 --> 00:47:23,160
these for source level libraries and the

00:47:20,400 --> 00:47:24,960
quick answer to that is basically we

00:47:23,160 --> 00:47:28,760
only use them for source level libraries

00:47:24,960 --> 00:47:32,160
we can use them for binary information

00:47:28,760 --> 00:47:34,050
but the complicated answer is we

00:47:32,160 --> 00:47:36,450
actually use them for crazy amount of

00:47:34,050 --> 00:47:40,530
things we can use them for tools we use

00:47:36,450 --> 00:47:41,730
them for data as are some themes we can

00:47:40,530 --> 00:47:42,690
use them for all sorts of stuff so

00:47:41,730 --> 00:47:45,060
anything that you

00:47:42,690 --> 00:47:46,829
version in theory you could put into one

00:47:45,060 --> 00:47:50,130
it's kind of like asking the question

00:47:46,829 --> 00:47:56,819
what could use get sub-modules for a lot

00:47:50,130 --> 00:47:58,170
of stuff actually thank you for what so

00:47:56,819 --> 00:48:00,420
my question actually builds on top of

00:47:58,170 --> 00:48:04,050
that as well if you're using it for

00:48:00,420 --> 00:48:07,050
binary packages then how do you get

00:48:04,050 --> 00:48:09,810
around the same look the linkage and the

00:48:07,050 --> 00:48:19,829
same using the same flag so otherwise it

00:48:09,810 --> 00:48:22,800
would not link options mm-hm every team

00:48:19,829 --> 00:48:24,390
NEA has their own build options and this

00:48:22,800 --> 00:48:27,890
is one reason why we're basically source

00:48:24,390 --> 00:48:31,290
level compatible for the most part so

00:48:27,890 --> 00:48:33,900
there are some libraries that we have to

00:48:31,290 --> 00:48:35,190
distribute like this and the city of the

00:48:33,900 --> 00:48:36,150
third-party libraries or something like

00:48:35,190 --> 00:48:38,010
that and then we will actually have

00:48:36,150 --> 00:48:40,500
libraries in internally in them and

00:48:38,010 --> 00:48:42,599
they're a pain in the ass they were

00:48:40,500 --> 00:48:44,430
they're hard and you know somebody has

00:48:42,599 --> 00:48:46,290
to oh my gosh we've upgraded compilers

00:48:44,430 --> 00:48:48,319
rebuild it and then distribute it for

00:48:46,290 --> 00:48:50,940
everybody in it this is kind of a pain

00:48:48,319 --> 00:48:54,630
source level compatibility is is much

00:48:50,940 --> 00:48:56,790
easier for that sort of thing I guess

00:48:54,630 --> 00:48:58,710
that's where we are and in with with the

00:48:56,790 --> 00:49:00,630
current source level of compatibility do

00:48:58,710 --> 00:49:02,430
you specify the linkage flags or the

00:49:00,630 --> 00:49:04,290
compiler flags on the very top kind of

00:49:02,430 --> 00:49:07,050
like on the master config and then it

00:49:04,290 --> 00:49:09,060
kind of transients into the all of the

00:49:07,050 --> 00:49:10,589
packages yeah it's a little more

00:49:09,060 --> 00:49:13,440
complicated than that we have a thing

00:49:10,589 --> 00:49:17,130
called a configuration package and the

00:49:13,440 --> 00:49:18,750
configuration packages specifies this

00:49:17,130 --> 00:49:20,339
so each compiler kind of has their own

00:49:18,750 --> 00:49:22,010
one and then on top of that we'll

00:49:20,339 --> 00:49:25,200
actually have something only a config

00:49:22,010 --> 00:49:28,760
and then each team configures their own

00:49:25,200 --> 00:49:31,829
on top of that but generally that's us

00:49:28,760 --> 00:49:33,450
like it's one version of all of that

00:49:31,829 --> 00:49:35,550
information so there's only one way to

00:49:33,450 --> 00:49:38,490
link usually across a bunch of things

00:49:35,550 --> 00:49:41,310
and we will specify options on the

00:49:38,490 --> 00:49:43,579
command line to change how we build okay

00:49:41,310 --> 00:49:43,579
thank you

00:49:45,720 --> 00:49:51,210
do you feel like that this is something

00:49:48,720 --> 00:49:54,089
only valuable for like the scale that EA

00:49:51,210 --> 00:49:55,140
works at or like a smaller studio that's

00:49:54,089 --> 00:49:57,690
only working on one or two

00:49:55,140 --> 00:50:01,560
James is there any value to doing

00:49:57,690 --> 00:50:03,390
package management there if I was in a

00:50:01,560 --> 00:50:06,870
smaller studio would I do something like

00:50:03,390 --> 00:50:09,510
this I don't know if I would have a

00:50:06,870 --> 00:50:12,300
package server right away I might avoid

00:50:09,510 --> 00:50:15,030
that but having a standardized build

00:50:12,300 --> 00:50:18,990
system certainly I would look at if I

00:50:15,030 --> 00:50:21,270
could force the concept of public and

00:50:18,990 --> 00:50:23,070
private headers I would try there is

00:50:21,270 --> 00:50:25,410
disadvantages to doing that though and I

00:50:23,070 --> 00:50:27,080
and I would like to see if we could

00:50:25,410 --> 00:50:28,830
figure out our numbers for them like

00:50:27,080 --> 00:50:31,020
think about it we have a hundred

00:50:28,830 --> 00:50:32,400
packages you have one dependency 100

00:50:31,020 --> 00:50:34,200
packages now you have a hundred search

00:50:32,400 --> 00:50:36,270
paths for these things how expensive is

00:50:34,200 --> 00:50:39,270
that how good is the OS at caching it's

00:50:36,270 --> 00:50:42,270
kind of an interesting question seem

00:50:39,270 --> 00:50:46,800
like it's not so bad but oh I bet you

00:50:42,270 --> 00:50:48,270
there is some costume also your master

00:50:46,800 --> 00:50:50,550
config once you start adding parameters

00:50:48,270 --> 00:50:56,370
it sounds a lot like a make file at a

00:50:50,550 --> 00:50:58,770
certain point no it doesn't end up like

00:50:56,370 --> 00:51:01,890
a make file at all it doesn't have any

00:50:58,770 --> 00:51:06,110
dependency information or anything like

00:51:01,890 --> 00:51:08,460
that it's just if statements and

00:51:06,110 --> 00:51:13,680
packages and versions that's pretty much

00:51:08,460 --> 00:51:15,330
it hey two questions so you mentioned

00:51:13,680 --> 00:51:17,850
you have very large number of packages

00:51:15,330 --> 00:51:22,580
right so just out of curiosity how many

00:51:17,850 --> 00:51:25,530
packages you here which can parse XML ah

00:51:22,580 --> 00:51:28,470
how many packages can parse XML

00:51:25,530 --> 00:51:30,920
excellent questions I have no idea it's

00:51:28,470 --> 00:51:34,290
got to be at least seven maybe ten

00:51:30,920 --> 00:51:36,930
probably more I don't know like a lot

00:51:34,290 --> 00:51:39,470
all right not everybody uses thrown in

00:51:36,930 --> 00:51:42,750
in just FIFA I'm sure I must have five

00:51:39,470 --> 00:51:44,490
that's good yeah so a second question to

00:51:42,750 --> 00:51:46,110
follow up on this is massive

00:51:44,490 --> 00:51:48,990
organization right so say I'm developing

00:51:46,110 --> 00:51:51,540
a package how do I broadcast new release

00:51:48,990 --> 00:51:53,460
you say I can't just email to everyone

00:51:51,540 --> 00:51:55,890
that's it's true I could just put it on

00:51:53,460 --> 00:51:59,310
a server I said you could you could any

00:51:55,890 --> 00:52:01,860
individual se at yeah you can just take

00:51:59,310 --> 00:52:04,020
a directory zip it up and post it to the

00:52:01,860 --> 00:52:05,370
server and there's no I don't think

00:52:04,020 --> 00:52:05,700
there's any security on this thing at

00:52:05,370 --> 00:52:06,430
all

00:52:05,700 --> 00:52:08,680
like you just

00:52:06,430 --> 00:52:10,660
both there that's how you post a package

00:52:08,680 --> 00:52:13,720
really yeah well so it's all about

00:52:10,660 --> 00:52:15,609
security it's a developed new package so

00:52:13,720 --> 00:52:17,829
I again do I send an email to everyone

00:52:15,609 --> 00:52:20,829
saying look that's a great package it is

00:52:17,829 --> 00:52:23,200
what it does so it's so how do you

00:52:20,829 --> 00:52:29,010
promote it and how EA deals with like

00:52:23,200 --> 00:52:32,619
duplication I think it's kind of like

00:52:29,010 --> 00:52:34,390
how do you market a new product you know

00:52:32,619 --> 00:52:36,190
if you have a good product and you you

00:52:34,390 --> 00:52:37,599
think it's worth selling then you would

00:52:36,190 --> 00:52:39,010
have to find the right channels to

00:52:37,599 --> 00:52:41,859
market it depending on who you want to

00:52:39,010 --> 00:52:43,569
talk to you could send it to all the

00:52:41,859 --> 00:52:46,630
programmers ata there's kind of a

00:52:43,569 --> 00:52:48,220
mailing list for that but I think if I

00:52:46,630 --> 00:52:49,660
could target it towards the people that

00:52:48,220 --> 00:52:53,140
might actually care that would probably

00:52:49,660 --> 00:52:55,690
get you more hits that's probably how I

00:52:53,140 --> 00:52:57,130
would do it in an organization like FIFA

00:52:55,690 --> 00:52:58,900
we have lots of channels for

00:52:57,130 --> 00:53:02,230
communication like slack and we have

00:52:58,900 --> 00:53:05,380
channels mid various mailing lists and

00:53:02,230 --> 00:53:11,170
things like that and significant in like

00:53:05,380 --> 00:53:12,819
sake groups groups yeah you talked on

00:53:11,170 --> 00:53:14,440
those channels that's what you so do you

00:53:12,819 --> 00:53:16,980
reward people internally when they

00:53:14,440 --> 00:53:22,150
contribute some module to packages ah

00:53:16,980 --> 00:53:27,040
yes do we reward people for doing

00:53:22,150 --> 00:53:30,819
packages yes we do it's an interesting

00:53:27,040 --> 00:53:32,500
problem of whether you should it's it's

00:53:30,819 --> 00:53:34,359
like one of those questions how do you

00:53:32,500 --> 00:53:36,609
tell if a programmer is a really good

00:53:34,359 --> 00:53:39,640
programmer how efficient are they

00:53:36,609 --> 00:53:41,319
if you tell every engineer that they're

00:53:39,640 --> 00:53:43,750
supposed to support some major piece of

00:53:41,319 --> 00:53:45,730
technology they will try very hard to

00:53:43,750 --> 00:53:48,010
support a major piece of technology

00:53:45,730 --> 00:53:49,510
whether they should or not it might be

00:53:48,010 --> 00:53:52,480
better that there is only one of them

00:53:49,510 --> 00:53:57,640
but if you were working for it they will

00:53:52,480 --> 00:54:02,740
do it so it's a mixed problem there yeah

00:53:57,640 --> 00:54:05,260
all right thank you hi I have a question

00:54:02,740 --> 00:54:07,630
about how you are going to support multi

00:54:05,260 --> 00:54:09,670
platform because like you know every

00:54:07,630 --> 00:54:11,980
game you have different platforms need

00:54:09,670 --> 00:54:13,700
to support and each provide independent

00:54:11,980 --> 00:54:16,849
code for example

00:54:13,700 --> 00:54:18,920
yes so if you're put in all package it

00:54:16,849 --> 00:54:20,690
might be like mess up but if you're

00:54:18,920 --> 00:54:22,220
putting separate factors we would like

00:54:20,690 --> 00:54:25,940
increase the amount of package we have

00:54:22,220 --> 00:54:30,529
so how you treat treat this kind of

00:54:25,940 --> 00:54:35,470
situation generally speaking how do we

00:54:30,529 --> 00:54:37,579
treat packages our package is sort of

00:54:35,470 --> 00:54:39,019
platform independent or platform

00:54:37,579 --> 00:54:41,660
independent and it depends on the

00:54:39,019 --> 00:54:43,460
package most packages handle this

00:54:41,660 --> 00:54:46,220
themselves and so you'll have a

00:54:43,460 --> 00:54:47,569
rendering engine and it will hide the

00:54:46,220 --> 00:54:49,519
fact that it's dealing with multiple

00:54:47,569 --> 00:54:51,650
platforms or the code underneath it so I

00:54:49,519 --> 00:54:56,180
showed an example there that just had

00:54:51,650 --> 00:54:57,349
like source code star star cpp in there

00:54:56,180 --> 00:54:59,599
you can actually put a bunch of if

00:54:57,349 --> 00:55:03,739
statements and then you would go ah if

00:54:59,599 --> 00:55:06,319
it is ps4 grab these files if it's you

00:55:03,739 --> 00:55:08,839
know Xbox grab those files kind of thing

00:55:06,319 --> 00:55:12,019
and then the package itself would change

00:55:08,839 --> 00:55:13,460
based on that and and they'll be like if

00:55:12,019 --> 00:55:15,549
you need to do it within a file they'll

00:55:13,460 --> 00:55:20,049
be if Def's that you could use across

00:55:15,549 --> 00:55:20,049
things as well thank you

00:55:29,890 --> 00:55:34,080

YouTube URL: https://www.youtube.com/watch?v=NlyDUQS8OcQ


