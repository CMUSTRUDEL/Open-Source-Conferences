Title: CppCon 2017: Robert Ramey “How to Write Effective Documentation for C++ Libraries...”
Publication date: 2017-10-12
Playlist: CppCon 2017
Description: 
	How to Write Effective Documentation for C++ Libraries with Minimal Effort

http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
With the success of GitHub, everybody and his brother is a library developer. Programmers love to create code, upload it to GitHub and hope for immortality. Most projects get only the most cursory examination before being passed over by users. Why is that? GitHub considered the problem. 

GitHub just published its 2017 Open Source Survey. The popular social coding service surveyed over 5,500 members of its community, from over 3,800 projects on github.com. It also spoke to 500 coders working on projects from outside the GitHub ecosystem. The Open Source Survey asked a broad array of questions. One that caught my eye was about problems people encounter when working with, or contributing to, open source projects. An incredible 93 percent of people reported being frustrated with “incomplete or confusing documentation”. see https://thenextweb.com/dd/2017/06/02/free-software-is-suffering-because-coders-dont-know-how-to-write-documentation/#.tnw_SYGx5ozW 

Even the most experienced and dedicated software developers can't do it. This can be confirmed by looking over recent reviews of Boost libraries. The most common complaint is that the documentation isn't useable. 

Programmers love their stuff and hope to get people to use it, why don't they fix their documentation? The reason is simple: They don't know how. 

Problems 

a) It's tedious and boring to write 
b) Developers don't know what to include and what to exclude 
c) Tools make things harder 
d) Regardless of the amount of effort invested, the end result is usually of little or no value. 

This presentation will present a "Cookbook" and demonstration for creating documentation. Using this method will 

a) Much diminish the tedium of the task. 
b) Help improve to the quality of library design and implementation 
c) Create something that is useful to the library user. 

We will touch upon tools like Doxygen, etc. But this is only a small portion of the presentation. We use them so they deserve mention. But they don't cause the problem, and they don't solve it either. 
— 
Robert Ramey: Robert Ramey Software Development, Proprietor

Robert Ramey is a freelance Software Developer living in Santa Barbara, California. (See www.rrsd.com.)  His long and varied career spans various aspects of software development including business data processing, product, embedded systems, custom software, and C++ library development. Lately, he has been mostly interested in C++ library design and implementation related to Boost.  He is the author and maintainer of the Boost Serialization library and a frequent contributor to the Boost developers list.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,060 --> 00:00:09,750
okay my name is Robert Ramey

00:00:03,570 --> 00:00:12,450
I am a booth library author and the

00:00:09,750 --> 00:00:15,269
title of my talk today is writing

00:00:12,450 --> 00:00:18,180
effective documentation for CC C++

00:00:15,269 --> 00:00:20,220
libraries I'm pleased to see as many

00:00:18,180 --> 00:00:23,220
people here as I see it's a topic that

00:00:20,220 --> 00:00:28,529
nobody really wants to address there's a

00:00:23,220 --> 00:00:32,040
good reason for that it's let's see it's

00:00:28,529 --> 00:00:34,110
it's a pain to write it's unpleasant to

00:00:32,040 --> 00:00:37,710
write it's a task that nobody wants to

00:00:34,110 --> 00:00:39,719
do it takes a lot of time it's kind of

00:00:37,710 --> 00:00:44,399
kind of time-consuming it's not

00:00:39,719 --> 00:00:46,950
appreciated and the worst part is that's

00:00:44,399 --> 00:00:47,190
the worst part that nobody's happy with

00:00:46,950 --> 00:00:55,489
it

00:00:47,190 --> 00:00:59,070
a recent survey on github concluded that

00:00:55,489 --> 00:01:01,739
93% of people reported being frustrated

00:00:59,070 --> 00:01:04,830
with quote incomplete or confusing

00:01:01,739 --> 00:01:09,780
documentation to me that's an incredible

00:01:04,830 --> 00:01:11,460
number it means that a huge number of

00:01:09,780 --> 00:01:13,830
people are investing a huge amount of

00:01:11,460 --> 00:01:16,290
work that a lot of people don't think is

00:01:13,830 --> 00:01:18,420
very helpful now the upside of this is

00:01:16,290 --> 00:01:21,799
you can do a really bad job at it you

00:01:18,420 --> 00:01:26,700
won't get fired I mean that's the proof

00:01:21,799 --> 00:01:29,400
so but the main thing in the thrust of

00:01:26,700 --> 00:01:31,799
my talk today is that I think that this

00:01:29,400 --> 00:01:35,400
problem holds back our development it

00:01:31,799 --> 00:01:38,369
keeps us from making better stuff and so

00:01:35,400 --> 00:01:44,030
not only is it in pleasant it's it's

00:01:38,369 --> 00:01:46,799
counterproductive and what we want is

00:01:44,030 --> 00:01:49,079
documentation which is easier to write

00:01:46,799 --> 00:01:51,899
it's less tedious less time-consuming

00:01:49,079 --> 00:01:54,810
all the stuff that it actually is we

00:01:51,899 --> 00:01:57,090
want the the 180 degrees different from

00:01:54,810 --> 00:01:59,310
that we want to help her to you to users

00:01:57,090 --> 00:02:01,200
and helpful to other developers I think

00:01:59,310 --> 00:02:05,490
that's I don't think there's any

00:02:01,200 --> 00:02:07,229
disagreement about that so the question

00:02:05,490 --> 00:02:11,160
is how do we how do we fix this is

00:02:07,229 --> 00:02:13,470
programmers to a man with a hammer his

00:02:11,160 --> 00:02:16,980
hand the whole world looks like a nail

00:02:13,470 --> 00:02:20,790
to us immediately we'd say you know we

00:02:16,980 --> 00:02:25,380
really need is a better tool that writes

00:02:20,790 --> 00:02:28,140
the documentation for us and we have

00:02:25,380 --> 00:02:31,290
tools and there's always disputes about

00:02:28,140 --> 00:02:32,940
the tool and there's always in the tool

00:02:31,290 --> 00:02:36,390
thing there's always more hype than all

00:02:32,940 --> 00:02:38,310
this the fact is we still got the 93% of

00:02:36,390 --> 00:02:40,350
people who are saying that documentation

00:02:38,310 --> 00:02:43,500
isn't working for them in spite of the

00:02:40,350 --> 00:02:45,690
tools we have better tools are not going

00:02:43,500 --> 00:02:49,140
to help us we have to step back and

00:02:45,690 --> 00:02:51,480
think wait a minute it's it's not it's

00:02:49,140 --> 00:02:53,070
not the tools it's something else the

00:02:51,480 --> 00:02:55,070
tools do have a think something going

00:02:53,070 --> 00:02:56,870
for us they do create

00:02:55,070 --> 00:03:00,600
oftentimes very nice-looking

00:02:56,870 --> 00:03:03,480
documentation and a lot of times it's

00:03:00,600 --> 00:03:06,570
really it saves a lot of work because

00:03:03,480 --> 00:03:09,240
one particular favorite tool and

00:03:06,570 --> 00:03:11,580
probably others glean information from

00:03:09,240 --> 00:03:14,310
looking at the header files or the

00:03:11,580 --> 00:03:16,530
function prototypes or whatever and then

00:03:14,310 --> 00:03:19,769
take that information and present it in

00:03:16,530 --> 00:03:22,739
a way that looks like documentation it's

00:03:19,769 --> 00:03:25,380
seductive it's attractive users don't

00:03:22,739 --> 00:03:27,480
find it particularly helpful and why not

00:03:25,380 --> 00:03:29,070
well it doesn't really add any

00:03:27,480 --> 00:03:32,610
information which is not in the headers

00:03:29,070 --> 00:03:35,100
already so if we do it that if we go

00:03:32,610 --> 00:03:36,269
down that route we're gonna find that

00:03:35,100 --> 00:03:38,280
we're going to be proofs and

00:03:36,269 --> 00:03:41,190
good-looking documentation which still

00:03:38,280 --> 00:03:44,600
suffers from all the the the problems

00:03:41,190 --> 00:03:44,600
and disappointments that we already have

00:03:45,350 --> 00:03:52,950
so here's how we go about doing some we

00:03:50,489 --> 00:03:54,810
get we we get a task from somebody their

00:03:52,950 --> 00:03:56,970
boss or team later or we make it up

00:03:54,810 --> 00:03:58,799
ourselves or whatever and we start to

00:03:56,970 --> 00:04:01,470
code because that's what we like to do

00:03:58,799 --> 00:04:03,390
and we'll go through a couple prototypes

00:04:01,470 --> 00:04:07,500
and try this it will look for libraries

00:04:03,390 --> 00:04:09,209
and it will do what we do if we when we

00:04:07,500 --> 00:04:11,790
got something that we think looks like

00:04:09,209 --> 00:04:16,580
it might work then we'll write a test

00:04:11,790 --> 00:04:19,200
well maybe we'll write a test because a

00:04:16,580 --> 00:04:22,849
lot of times we don't because that's

00:04:19,200 --> 00:04:25,950
another tedious job and but often times

00:04:22,849 --> 00:04:26,940
well we might write a small example just

00:04:25,950 --> 00:04:29,190
for one

00:04:26,940 --> 00:04:31,440
at least on the IDE I use I can't

00:04:29,190 --> 00:04:34,710
compile a header time a header file

00:04:31,440 --> 00:04:38,100
without a CPP file so it actually forces

00:04:34,710 --> 00:04:40,590
me to make a little CPP file if with at

00:04:38,100 --> 00:04:45,900
least with an include and a main in it

00:04:40,590 --> 00:04:47,760
but oftentimes even even before you know

00:04:45,900 --> 00:04:50,850
drinking the kool-aid here I would be

00:04:47,760 --> 00:04:52,890
inclined to make a small test to see if

00:04:50,850 --> 00:04:54,750
the thing does what I think it does it

00:04:52,890 --> 00:04:57,270
never works the first time or it rarely

00:04:54,750 --> 00:05:01,350
works the first time so this little test

00:04:57,270 --> 00:05:04,740
or a little example really ratifies what

00:05:01,350 --> 00:05:07,970
I'm trying to do and so and after we go

00:05:04,740 --> 00:05:11,550
back and forth on this for quite a while

00:05:07,970 --> 00:05:13,770
then then we'll start in treading rock a

00:05:11,550 --> 00:05:16,740
write of documentation and when we do

00:05:13,770 --> 00:05:18,210
that we're kind of amazed and

00:05:16,740 --> 00:05:20,190
disappointed of course now we've already

00:05:18,210 --> 00:05:21,540
told the boss wherever it's done all I

00:05:20,190 --> 00:05:24,150
got to do is just write up a little

00:05:21,540 --> 00:05:26,280
document and he says great here's the

00:05:24,150 --> 00:05:29,670
next job start tomorrow because you can

00:05:26,280 --> 00:05:32,040
do the doc today and then we discover

00:05:29,670 --> 00:05:36,090
when we try and write the documentation

00:05:32,040 --> 00:05:39,720
it's it's really hard because we can't

00:05:36,090 --> 00:05:43,530
really describe exactly the way what we

00:05:39,720 --> 00:05:45,750
did and or we start it starts out well

00:05:43,530 --> 00:05:48,150
and then we get to a spot and then wait

00:05:45,750 --> 00:05:50,190
a minute uh you call this function but

00:05:48,150 --> 00:05:53,160
the output depends on something else

00:05:50,190 --> 00:05:55,470
over here which is set by another

00:05:53,160 --> 00:05:58,710
function or depends on that this type oh

00:05:55,470 --> 00:06:01,560
actually I have to include those that

00:05:58,710 --> 00:06:03,000
information too otherwise the the person

00:06:01,560 --> 00:06:05,220
who uses this thing won't be able to

00:06:03,000 --> 00:06:07,560
know under what circumstances this call

00:06:05,220 --> 00:06:09,510
is going to give one answer and of

00:06:07,560 --> 00:06:11,580
course if you step back just a hat

00:06:09,510 --> 00:06:14,090
second you're thinking you know actually

00:06:11,580 --> 00:06:16,620
we should make some changes in the code

00:06:14,090 --> 00:06:19,350
how many people have have come across

00:06:16,620 --> 00:06:21,630
that situation okay okay that's fine

00:06:19,350 --> 00:06:24,419
we've all done it because it's

00:06:21,630 --> 00:06:26,760
impossible to avoid when you're writing

00:06:24,419 --> 00:06:29,520
code you're not really thinking about if

00:06:26,760 --> 00:06:31,470
you've already you've you've you've gone

00:06:29,520 --> 00:06:33,660
below the original abstraction now

00:06:31,470 --> 00:06:35,280
you're into the code at that point when

00:06:33,660 --> 00:06:38,160
you break the abstraction where the

00:06:35,280 --> 00:06:39,900
original abstraction isn't correct now

00:06:38,160 --> 00:06:43,590
you don't see it

00:06:39,900 --> 00:06:45,419
until your coat is done so it's too late

00:06:43,590 --> 00:06:47,250
to fix the stuff you already told people

00:06:45,419 --> 00:06:50,580
it's done you already put it out there

00:06:47,250 --> 00:06:53,310
for people to try and now you're in it

00:06:50,580 --> 00:06:55,530
you're you're in a box you can't eat it

00:06:53,310 --> 00:06:59,550
have to take on more work or just sign

00:06:55,530 --> 00:07:01,410
it off and what are we gonna do we know

00:06:59,550 --> 00:07:03,960
what we're gonna do we're gonna sign it

00:07:01,410 --> 00:07:06,180
off because we got other stuff to do and

00:07:03,960 --> 00:07:10,380
then of course we end up in that ninety

00:07:06,180 --> 00:07:13,800
seven percent because that's but as I

00:07:10,380 --> 00:07:14,460
say good part is we keep our job and we

00:07:13,800 --> 00:07:17,580
get a raise

00:07:14,460 --> 00:07:19,830
cuz we got we got it done and because

00:07:17,580 --> 00:07:23,190
nobody really actually verifies whether

00:07:19,830 --> 00:07:26,150
the users really happy with if I sound

00:07:23,190 --> 00:07:29,820
cynical well it's actually true anyway

00:07:26,150 --> 00:07:31,680
so I'm going to now I'm going to give

00:07:29,820 --> 00:07:36,690
some positive constructive and useful

00:07:31,680 --> 00:07:38,430
advice we I I think I put my finger on

00:07:36,690 --> 00:07:42,840
what the problem is now how do we get

00:07:38,430 --> 00:07:46,139
around that what we the the thrust of

00:07:42,840 --> 00:07:48,240
this idea is we write the documentation

00:07:46,139 --> 00:07:51,479
in parallel to when we're writing the

00:07:48,240 --> 00:07:54,060
code this has a couple great benefits

00:07:51,479 --> 00:07:57,060
one is it stretches out the job and

00:07:54,060 --> 00:08:00,960
little pieces so it's not faced with a

00:07:57,060 --> 00:08:03,210
job we got a a week to sit down and look

00:08:00,960 --> 00:08:05,669
out the window and stare at this stuff

00:08:03,210 --> 00:08:08,130
and then type some more and then become

00:08:05,669 --> 00:08:11,430
frustrated no we just do it in little

00:08:08,130 --> 00:08:13,650
bits it's much more than that but if it

00:08:11,430 --> 00:08:18,599
were only that it would still be quite

00:08:13,650 --> 00:08:20,820
helpful so we're gonna we're gonna write

00:08:18,599 --> 00:08:22,590
the first sentence of this talk it's

00:08:20,820 --> 00:08:25,139
just one sentence sure we if we've been

00:08:22,590 --> 00:08:27,840
given a task we can sit down and write

00:08:25,139 --> 00:08:31,020
one sentence what this module or what

00:08:27,840 --> 00:08:34,909
this function or what this type or is

00:08:31,020 --> 00:08:39,120
going to do that should be pretty simple

00:08:34,909 --> 00:08:41,580
so that's what I recommend doing writing

00:08:39,120 --> 00:08:43,169
one sentence maybe two I think most of

00:08:41,580 --> 00:08:44,580
the time it can be done within you go

00:08:43,169 --> 00:08:46,110
back and take through the boss okay

00:08:44,580 --> 00:08:48,270
you're signing off on this is what we

00:08:46,110 --> 00:08:49,770
want or your team leader or all other

00:08:48,270 --> 00:08:53,410
people that are gonna use this thing and

00:08:49,770 --> 00:08:55,870
they'll say yeah sure well this

00:08:53,410 --> 00:08:57,820
you'd be surprised how many times they

00:08:55,870 --> 00:08:59,710
don't say that you'd be surprised how

00:08:57,820 --> 00:09:01,720
many times I'm talking with somebody

00:08:59,710 --> 00:09:04,090
else and we have a totally different

00:09:01,720 --> 00:09:06,790
idea of what this thing is supposed to

00:09:04,090 --> 00:09:11,400
do just writing this one sentence and

00:09:06,790 --> 00:09:13,960
coming to agreement on it is a huge step

00:09:11,400 --> 00:09:16,360
now here's a couple examples this is

00:09:13,960 --> 00:09:18,940
just fun here here's an example from a

00:09:16,360 --> 00:09:20,980
library that was proposed for busto a

00:09:18,940 --> 00:09:23,170
year ago or whatever I'm gonna read a

00:09:20,980 --> 00:09:27,460
little bit of it just so you can just so

00:09:23,170 --> 00:09:29,530
you can cringe xxx is a C++ library

00:09:27,460 --> 00:09:32,410
which lets you schedule an order

00:09:29,530 --> 00:09:35,680
dependency graph of file input/output

00:09:32,410 --> 00:09:37,780
operations to be X it executed

00:09:35,680 --> 00:09:40,290
asynchronously to the maximum capacity

00:09:37,780 --> 00:09:43,410
of your hardware if you want to do

00:09:40,290 --> 00:09:45,460
portable asynchronous IO and C++

00:09:43,410 --> 00:09:48,130
especially if you need to easily

00:09:45,460 --> 00:09:50,800
consider or order issues of reads and

00:09:48,130 --> 00:09:51,850
writes this is the correct library using

00:09:50,800 --> 00:09:54,970
yeah a Yatta Yatta

00:09:51,850 --> 00:09:58,660
okay I mean right away I'm reading that

00:09:54,970 --> 00:09:59,920
I'm done that's that's afraid if I'm

00:09:58,660 --> 00:10:06,040
looking that I have to go through 20

00:09:59,920 --> 00:10:07,930
pages of this I'm finished and so that's

00:10:06,040 --> 00:10:13,840
an easy one because as I say I'm done

00:10:07,930 --> 00:10:15,640
and I'm gonna give an example of I read

00:10:13,840 --> 00:10:17,260
I did take the time to read this it was

00:10:15,640 --> 00:10:18,910
kind of painful and it was kind of

00:10:17,260 --> 00:10:22,180
time-consuming and I said if this

00:10:18,910 --> 00:10:25,000
gentleman had written the following I

00:10:22,180 --> 00:10:27,790
think that we would have been off on him

00:10:25,000 --> 00:10:30,430
in a much better place now it turned out

00:10:27,790 --> 00:10:32,380
that that library wasn't region wasn't

00:10:30,430 --> 00:10:34,870
accepted into boost in large part I

00:10:32,380 --> 00:10:36,910
think because of the the previous page

00:10:34,870 --> 00:10:39,820
was symptomatic of the whole thing

00:10:36,910 --> 00:10:43,780
nobody could really feel confident they

00:10:39,820 --> 00:10:46,510
knew what it was supposed to do so

00:10:43,780 --> 00:10:48,910
that's a pretty easy one but now let's

00:10:46,510 --> 00:10:50,110
look at some libraries that have been

00:10:48,910 --> 00:10:52,030
accepted into this now we're gonna

00:10:50,110 --> 00:10:54,430
switch the thing around and this is just

00:10:52,030 --> 00:10:56,950
for fun I could skip this part but it's

00:10:54,430 --> 00:10:59,950
it's it's too much fun to skip so I

00:10:56,950 --> 00:11:02,470
picked a number of libraries from the

00:10:59,950 --> 00:11:05,320
boost library set and I just picked the

00:11:02,470 --> 00:11:07,199
first sentence or first paragraph from

00:11:05,320 --> 00:11:09,089
the library documentation

00:11:07,199 --> 00:11:10,739
and I'm gonna state it here and I'm

00:11:09,089 --> 00:11:13,350
gonna ask you guys to guess which

00:11:10,739 --> 00:11:15,989
library you think it might be so this

00:11:13,350 --> 00:11:17,489
this library provides yeah what is this

00:11:15,989 --> 00:11:19,970
jeopardy I guess this would be library

00:11:17,489 --> 00:11:24,720
jeopardy wouldn't it

00:11:19,970 --> 00:11:28,139
so the C++ library provides functions

00:11:24,720 --> 00:11:30,959
classes templates traits and macros for

00:11:28,139 --> 00:11:34,859
the control inspection and diagnostic of

00:11:30,959 --> 00:11:38,209
memory alignment who has a guess this is

00:11:34,859 --> 00:11:40,499
the easiest one come come come

00:11:38,209 --> 00:11:44,449
this gentleman you haven't have to have

00:11:40,499 --> 00:11:44,449
a guess here you have no idea okay

00:11:44,819 --> 00:11:49,109
I'm disappointed I'm disappointed but

00:11:47,879 --> 00:11:54,869
I'm going to help you out at least for

00:11:49,109 --> 00:11:59,339
the first one booster line it seems

00:11:54,869 --> 00:12:05,279
obvious in retrospect uh and actually we

00:11:59,339 --> 00:12:08,309
the this particular sentence I think is

00:12:05,279 --> 00:12:12,149
actually an exception to my case I think

00:12:08,309 --> 00:12:14,869
this is actually a very good summary in

00:12:12,149 --> 00:12:19,069
description of what boost the line does

00:12:14,869 --> 00:12:21,059
so this guy who's the who's the author

00:12:19,069 --> 00:12:23,759
normally I'm not gonna name names

00:12:21,059 --> 00:12:25,350
Glenn Fernandez he's in VIN and booths

00:12:23,759 --> 00:12:27,720
for quite long I think he did a great

00:12:25,350 --> 00:12:30,029
job with that and though I don't know

00:12:27,720 --> 00:12:32,970
for a fact but just reading that

00:12:30,029 --> 00:12:34,860
suggests to me that it's going to be

00:12:32,970 --> 00:12:48,839
smooth sailing if I start to use this

00:12:34,860 --> 00:12:50,129
library yes wow that's an interesting

00:12:48,839 --> 00:12:52,769
question you could in what you're

00:12:50,129 --> 00:12:54,289
telling me is this is understandable but

00:12:52,769 --> 00:12:57,539
actually could have made it shorter

00:12:54,289 --> 00:12:59,730
right I could have said this c-plus

00:12:57,539 --> 00:13:01,589
Fletch library provides facilities for

00:12:59,730 --> 00:13:02,939
the control inspection and diagnostic

00:13:01,589 --> 00:13:05,429
memory line would have been an

00:13:02,939 --> 00:13:08,039
improvement even a good one get improved

00:13:05,429 --> 00:13:11,369
this is actually better than like 98%

00:13:08,039 --> 00:13:13,230
but it's but even then you could still

00:13:11,369 --> 00:13:14,339
do it better and in you're right it

00:13:13,230 --> 00:13:15,779
would have made an improvement it's good

00:13:14,339 --> 00:13:19,199
enough as it is but you're right it

00:13:15,779 --> 00:13:20,790
would have made an improvement okay now

00:13:19,199 --> 00:13:22,680
now you got never warming

00:13:20,790 --> 00:13:27,960
let's see if we can get somebody to

00:13:22,680 --> 00:13:30,360
stick out your hand up this time there

00:13:27,960 --> 00:13:33,510
are times when a generic in the sense of

00:13:30,360 --> 00:13:36,210
general opposed to template based

00:13:33,510 --> 00:13:38,400
programming type is needed variables

00:13:36,210 --> 00:13:40,830
which are truly variable accommodating

00:13:38,400 --> 00:13:44,160
values of many other more specific types

00:13:40,830 --> 00:13:46,830
rather than C pluses buses normal strict

00:13:44,160 --> 00:13:50,510
and Static types we can distinguish

00:13:46,830 --> 00:13:52,590
these basic types of a generic type well

00:13:50,510 --> 00:14:00,060
the only thing that's missing here is I

00:13:52,590 --> 00:14:04,920
am big pentameter so let's have a look

00:14:00,060 --> 00:14:09,870
this gentleman suggests boosts any boost

00:14:04,920 --> 00:14:11,130
any is one any man Hana variant okay how

00:14:09,870 --> 00:14:21,440
many how many you're going to vote for

00:14:11,130 --> 00:14:25,380
boost any oh I ruined it oh I ruined it

00:14:21,440 --> 00:14:28,650
boost any okay this frankly you're very

00:14:25,380 --> 00:14:31,320
astute if you use boost boost any okay

00:14:28,650 --> 00:14:34,950
well I'm very impressed because that

00:14:31,320 --> 00:14:37,950
particular introduction was totally

00:14:34,950 --> 00:14:40,410
opaque to me I have to say but now

00:14:37,950 --> 00:14:42,540
listen to this this is the gentleman who

00:14:40,410 --> 00:14:45,270
wrote disk Evelyn Heaney is very

00:14:42,540 --> 00:14:47,610
well-known author and for whatever

00:14:45,270 --> 00:14:50,700
reason when he got into in and very

00:14:47,610 --> 00:14:53,010
successful and a great speaker so it

00:14:50,700 --> 00:14:54,270
when your own stuff looks like this you

00:14:53,010 --> 00:14:57,480
don't have to feel that bad

00:14:54,270 --> 00:15:04,740
because it's apparently it's barely hard

00:14:57,480 --> 00:15:06,840
to avoid okay all right I just had two

00:15:04,740 --> 00:15:09,030
of these to go just in I would have done

00:15:06,840 --> 00:15:11,220
less but it's so much fun the standard

00:15:09,030 --> 00:15:13,320
template library the C++ standard

00:15:11,220 --> 00:15:14,790
provides a framework for processing

00:15:13,320 --> 00:15:15,480
algorithms on a different kind of

00:15:14,790 --> 00:15:18,270
containers

00:15:15,480 --> 00:15:20,520
however ordinary arrays don't provide

00:15:18,270 --> 00:15:22,680
the interface of STL containers although

00:15:20,520 --> 00:15:24,960
they provide iterator interface to STL

00:15:22,680 --> 00:15:28,890
containers as a replacement for ordinary

00:15:24,960 --> 00:15:31,080
arrays STL provides STD vector however

00:15:28,890 --> 00:15:33,240
STD vector provides semantics for

00:15:31,080 --> 00:15:34,589
dynamic arrays thus it manages day

00:15:33,240 --> 00:15:37,140
to be able to change the number of

00:15:34,589 --> 00:15:42,120
elements etc etc okay

00:15:37,140 --> 00:15:45,779
this gentleman array how many people

00:15:42,120 --> 00:15:51,180
agree with array okay anybody have any

00:15:45,779 --> 00:15:54,690
other bids container anybody could any

00:15:51,180 --> 00:15:57,660
anybody buy onto container okay array is

00:15:54,690 --> 00:16:03,540
carrying the day and let's see what it

00:15:57,660 --> 00:16:06,930
is it's the rate okay yeah well you know

00:16:03,540 --> 00:16:08,399
I said you know wait a minute wait a

00:16:06,930 --> 00:16:10,230
minute here that's a very interesting

00:16:08,399 --> 00:16:12,420
question I said I'm just gonna pick off

00:16:10,230 --> 00:16:14,339
some random booths libraries and what

00:16:12,420 --> 00:16:18,959
did I did I just looked at the list and

00:16:14,339 --> 00:16:20,700
picked the top X number so I think I you

00:16:18,959 --> 00:16:22,770
know I was I don't know I was in the

00:16:20,700 --> 00:16:25,560
hurry and I just said well let's just

00:16:22,770 --> 00:16:27,330
start looking oh and and that's just the

00:16:25,560 --> 00:16:30,000
first group turned out to be a good

00:16:27,330 --> 00:16:32,550
sample so I ruined it at that and I'm

00:16:30,000 --> 00:16:36,620
you know I just can't get anything over

00:16:32,550 --> 00:16:39,480
on this audience it's very stressful

00:16:36,620 --> 00:16:43,800
giving a talk in a environment like this

00:16:39,480 --> 00:16:48,420
I have to say okay I think this is the

00:16:43,800 --> 00:16:49,980
last one is a crash okay is it

00:16:48,420 --> 00:16:51,810
do I have to even read it this is

00:16:49,980 --> 00:16:53,880
actually so short I'm this give me a

00:16:51,810 --> 00:16:54,209
chance to read this short one this is

00:16:53,880 --> 00:16:57,149
easy

00:16:54,209 --> 00:16:59,250
it's a cross-platform c++ library for

00:16:57,149 --> 00:17:00,930
network and low-level io programming

00:16:59,250 --> 00:17:03,540
that provides developers with a

00:17:00,930 --> 00:17:07,620
consistent asynchronous model using a

00:17:03,540 --> 00:17:09,679
modern c++ approach any everybody feels

00:17:07,620 --> 00:17:13,550
they got this raise their hand

00:17:09,679 --> 00:17:17,520
okay you probably got it okay what is it

00:17:13,550 --> 00:17:20,189
yes I write exactly this is a beautiful

00:17:17,520 --> 00:17:22,679
job and by the way I don't think it's a

00:17:20,189 --> 00:17:25,650
Quinn if this is a sample of the whole

00:17:22,679 --> 00:17:27,870
library and its documentation it's no

00:17:25,650 --> 00:17:33,120
it's no surprise that it's very

00:17:27,870 --> 00:17:35,640
successful so I think that I can get a

00:17:33,120 --> 00:17:38,190
sense oftentimes of the quality of a

00:17:35,640 --> 00:17:42,000
library from the very first sentence of

00:17:38,190 --> 00:17:46,070
the of the documentation okay so I'm

00:17:42,000 --> 00:17:50,330
going to conjure up a new library

00:17:46,070 --> 00:17:53,059
and I'm gonna call it ring view there's

00:17:50,330 --> 00:17:54,919
a proposal for I think that just the

00:17:53,059 --> 00:17:57,770
name ring view I think most of you

00:17:54,919 --> 00:18:00,830
should have in mind what it is or at

00:17:57,770 --> 00:18:05,000
least what it is in in your own mind

00:18:00,830 --> 00:18:06,799
what a ring view class would be I'm

00:18:05,000 --> 00:18:09,260
going to presume that I don't see too

00:18:06,799 --> 00:18:11,870
many people looking with puzzled looks

00:18:09,260 --> 00:18:17,140
but in any case there is such a

00:18:11,870 --> 00:18:22,250
component being proposed for the

00:18:17,140 --> 00:18:26,299
standard library they call it well they

00:18:22,250 --> 00:18:28,549
they call it ring span but in any case

00:18:26,299 --> 00:18:31,520
the first sentence from that proposal is

00:18:28,549 --> 00:18:33,710
this proposal introduces a ring to the

00:18:31,520 --> 00:18:37,220
standard library operating on a span

00:18:33,710 --> 00:18:40,340
named ring span the ring span offers

00:18:37,220 --> 00:18:43,850
similar facilities to st DQ with an

00:18:40,340 --> 00:18:46,250
additional feature of sorting the

00:18:43,850 --> 00:18:48,710
elements in a continuous memory of being

00:18:46,250 --> 00:18:50,500
of a fixed size well I have a couple

00:18:48,710 --> 00:18:52,970
problems with this first it's

00:18:50,500 --> 00:18:55,520
tautological it defines ring span in

00:18:52,970 --> 00:18:57,350
terms of the noun ring and that's very

00:18:55,520 --> 00:18:59,000
odd to me I'm not sure where there it

00:18:57,350 --> 00:19:02,990
doesn't it could be a mathematical ring

00:18:59,000 --> 00:19:05,000
it could be like a wedding ring so I

00:19:02,990 --> 00:19:07,610
don't think that adds much it also

00:19:05,000 --> 00:19:09,980
presumes an underlying continuous memory

00:19:07,610 --> 00:19:12,409
container which is not what I expect to

00:19:09,980 --> 00:19:14,240
see at all now I'm already criticizing

00:19:12,409 --> 00:19:17,299
the proposal I've only read the first

00:19:14,240 --> 00:19:21,500
sentence it goes on in this vein for 14

00:19:17,299 --> 00:19:23,419
pages that's another thing that I'm not

00:19:21,500 --> 00:19:25,640
crazy about I'm not gonna I'm not going

00:19:23,419 --> 00:19:27,669
to display it here I don't think it's

00:19:25,640 --> 00:19:32,059
necessary unless you guys like to write

00:19:27,669 --> 00:19:35,750
enjoy reading standards proposal but I

00:19:32,059 --> 00:19:38,360
just use that for reference because this

00:19:35,750 --> 00:19:45,529
ring view class that we're going to make

00:19:38,360 --> 00:19:47,659
and described here is does the same

00:19:45,529 --> 00:19:49,370
thing or does a similar function so

00:19:47,659 --> 00:19:51,860
here's the sentence that I made up a

00:19:49,370 --> 00:19:54,529
ring view is an adapter which provides

00:19:51,860 --> 00:19:58,389
functions for first-in first-out

00:19:54,529 --> 00:19:58,389
access to existing storage

00:19:59,260 --> 00:20:08,059
everybody okay with that or somebody

00:20:01,760 --> 00:20:09,260
want to do a better job oh come on I had

00:20:08,059 --> 00:20:17,720
to do it like five times

00:20:09,260 --> 00:20:22,570
go ahead well it's yeah I'm referring to

00:20:17,720 --> 00:20:39,170
C++ functions in it yeah in in excuse me

00:20:22,570 --> 00:20:41,150
okay eliminate what provides yeah that

00:20:39,170 --> 00:20:44,470
would fly that would be okay I'll

00:20:41,150 --> 00:20:47,870
probably be a minor improvement as I say

00:20:44,470 --> 00:20:49,850
it I actually this is the fifth attempt

00:20:47,870 --> 00:20:52,100
did I did I actually did this in the

00:20:49,850 --> 00:20:54,350
first one is twice as long this is very

00:20:52,100 --> 00:20:56,390
this is extremely common but it's very

00:20:54,350 --> 00:21:01,580
it's very helpful to clarify your own

00:20:56,390 --> 00:21:03,770
thoughts okay and so once I got that

00:21:01,580 --> 00:21:07,429
point next thing I do is I start I'd

00:21:03,770 --> 00:21:10,040
start to write some code I don't I'm not

00:21:07,429 --> 00:21:12,200
really going big on specifications and

00:21:10,040 --> 00:21:14,510
all this yada yada I mean if you have to

00:21:12,200 --> 00:21:16,250
do it maybe it's useful and maybe in

00:21:14,510 --> 00:21:18,110
something really complicated it's useful

00:21:16,250 --> 00:21:20,059
but the very first sentence to me it

00:21:18,110 --> 00:21:21,679
gives at least in my mind and I think in

00:21:20,059 --> 00:21:25,010
the audience that I'm referring to a

00:21:21,679 --> 00:21:27,590
fairly fairly good idea what we're

00:21:25,010 --> 00:21:31,040
talking about so I I make a little demo

00:21:27,590 --> 00:21:35,870
here I make a little example I include

00:21:31,040 --> 00:21:38,780
my header and I define some storage yeah

00:21:35,870 --> 00:21:41,270
which is 42 characters long and then I

00:21:38,780 --> 00:21:43,040
construct a ring view which has an

00:21:41,270 --> 00:21:45,470
iterator to the beginning of the storage

00:21:43,040 --> 00:21:48,380
an iterator to the end of the storage

00:21:45,470 --> 00:21:51,740
and I'm already thinking or it should be

00:21:48,380 --> 00:21:54,290
fairly obvious to I I defined a function

00:21:51,740 --> 00:21:56,600
called push which depends characters I

00:21:54,290 --> 00:21:59,840
defined a function called pop which

00:21:56,600 --> 00:22:01,340
retrieves characters and I have some

00:21:59,840 --> 00:22:04,880
checking in there to make sure that I

00:22:01,340 --> 00:22:07,490
don't push more than 42 characters in in

00:22:04,880 --> 00:22:09,770
this case and I don't retrieve more

00:22:07,490 --> 00:22:12,350
characters than have been pushed in so I

00:22:09,770 --> 00:22:12,890
think that just about anybody in this

00:22:12,350 --> 00:22:16,000
room

00:22:12,890 --> 00:22:19,970
would consider this a pretty trivial and

00:22:16,000 --> 00:22:22,100
self-explanatory example and I did

00:22:19,970 --> 00:22:23,510
include comments in here because I know

00:22:22,100 --> 00:22:26,270
I'm going to be including in the

00:22:23,510 --> 00:22:28,040
documentation and rather than and it's

00:22:26,270 --> 00:22:29,720
frankly just easier to put the comments

00:22:28,040 --> 00:22:31,730
right here next to the code than it is

00:22:29,720 --> 00:22:34,640
to put it in some narrative apart and

00:22:31,730 --> 00:22:36,290
refer to it so I'm already I'm already

00:22:34,640 --> 00:22:39,340
thinking about how this thing's gonna be

00:22:36,290 --> 00:22:41,390
document everybody anybody have any

00:22:39,340 --> 00:22:48,530
corrections to this particular piece of

00:22:41,390 --> 00:22:50,570
code yeah this is the code and the

00:22:48,530 --> 00:22:53,780
documentation will show the output we're

00:22:50,570 --> 00:22:54,980
not there yet right I'm just showing you

00:22:53,780 --> 00:22:57,049
what I wrote so far I haven't written

00:22:54,980 --> 00:23:09,169
any documentation yet you're already

00:22:57,049 --> 00:23:12,169
ahead of me yes Peter yeah you would and

00:23:09,169 --> 00:23:14,390
I haven't written a test but if I get

00:23:12,169 --> 00:23:17,660
around to writing a test I'll keep that

00:23:14,390 --> 00:23:22,340
in life well that's an interesting

00:23:17,660 --> 00:23:26,600
question you know this is an example

00:23:22,340 --> 00:23:28,760
it's really meant to expose and it's

00:23:26,600 --> 00:23:31,280
added act it has a didactic purpose it

00:23:28,760 --> 00:23:34,250
does test the code but it's really not

00:23:31,280 --> 00:23:37,640
the purpose of this little module here

00:23:34,250 --> 00:23:39,950
so I think I think I do make a

00:23:37,640 --> 00:23:43,610
distinction between writing the tests to

00:23:39,950 --> 00:23:45,830
test things and writing these little

00:23:43,610 --> 00:23:48,559
examples to illustrate your code they do

00:23:45,830 --> 00:23:52,360
there is some overlap but I think trying

00:23:48,559 --> 00:23:54,559
to include the facility a test in

00:23:52,360 --> 00:23:58,610
explanatory example overloads the

00:23:54,559 --> 00:24:00,379
example with too much okay your

00:23:58,610 --> 00:24:03,539
objection is noted

00:24:00,379 --> 00:24:05,609
we we like people who object and are

00:24:03,539 --> 00:24:13,649
willing to accept the fact that it's

00:24:05,609 --> 00:24:15,959
noted so we can move on okay and so now

00:24:13,649 --> 00:24:18,239
since I'm really hot to write my code

00:24:15,959 --> 00:24:21,179
and you know I've been I woke up last

00:24:18,239 --> 00:24:23,849
night thinking about it and here's the

00:24:21,179 --> 00:24:27,089
code that I wrote for this I'm gonna

00:24:23,849 --> 00:24:29,309
confess this was not the first shot I

00:24:27,089 --> 00:24:36,209
did have to run it a few times to make

00:24:29,309 --> 00:24:39,450
it work so I I import the iterator

00:24:36,209 --> 00:24:41,789
headers I import the standard exception

00:24:39,450 --> 00:24:44,190
header we know in our example it did

00:24:41,789 --> 00:24:47,039
throw an exception if if there was a

00:24:44,190 --> 00:24:52,409
problem I included assert which I see

00:24:47,039 --> 00:24:55,169
now I don't use and I include a header

00:24:52,409 --> 00:25:06,629
utility which includes the description

00:24:55,169 --> 00:25:09,119
of forward iterator type yes I am I'm

00:25:06,629 --> 00:25:10,769
going to talk to okay well I'm going to

00:25:09,119 --> 00:25:14,039
explain it to you now you're probably

00:25:10,769 --> 00:25:16,109
correct well how should I say actually

00:25:14,039 --> 00:25:18,479
not because if I'm including this that

00:25:16,109 --> 00:25:20,429
would be some other documentation would

00:25:18,479 --> 00:25:22,200
explain what that is but maybe it would

00:25:20,429 --> 00:25:23,639
be helpful but I'm gonna I'm gonna give

00:25:22,200 --> 00:25:27,179
it I'm gonna include it here the

00:25:23,639 --> 00:25:29,459
explanation verbally and it just except

00:25:27,179 --> 00:25:32,489
that somebody might think that they

00:25:29,459 --> 00:25:36,089
would like to see the writing so the

00:25:32,489 --> 00:25:39,209
first line I have here is the the class

00:25:36,089 --> 00:25:41,789
name and it takes a parameter of which

00:25:39,209 --> 00:25:45,299
I've denoted by an eye that parameter is

00:25:41,789 --> 00:25:48,839
an iterator and we see a little bit

00:25:45,299 --> 00:25:51,299
farther down we're constructing a ring

00:25:48,839 --> 00:25:53,969
view with a pair of iterators clearly at

00:25:51,299 --> 00:25:55,169
the beginning in the end of the storage

00:25:53,969 --> 00:25:57,599
which we've been at which we've already

00:25:55,169 --> 00:26:00,299
allocated now it's at the very top of

00:25:57,599 --> 00:26:01,320
this I have this thing that you might

00:26:00,299 --> 00:26:04,079
not be familiar with

00:26:01,320 --> 00:26:07,469
it's called it says tick crate check and

00:26:04,079 --> 00:26:10,950
then it says is forward iterator this is

00:26:07,469 --> 00:26:13,210
a type trait which will stop the

00:26:10,950 --> 00:26:16,659
compiler Jethro a

00:26:13,210 --> 00:26:19,779
a witch will invoke a compiler error if

00:26:16,659 --> 00:26:23,110
the parameter we pay past to this ring

00:26:19,779 --> 00:26:25,929
view is not a forward iterator it's very

00:26:23,110 --> 00:26:28,480
one could easily one of your users would

00:26:25,929 --> 00:26:30,720
easily say oh I I just passed the

00:26:28,480 --> 00:26:34,779
storage right it's a ring view vector

00:26:30,720 --> 00:26:39,370
that's not what this accepts C++ as

00:26:34,779 --> 00:26:45,929
things stand today does not have the

00:26:39,370 --> 00:26:57,190
ability to check the the features of a

00:26:45,929 --> 00:26:58,960
template parameter and what well I'll

00:26:57,190 --> 00:27:01,360
see now while we're getting into the

00:26:58,960 --> 00:27:05,169
weeds for the sake of the argument right

00:27:01,360 --> 00:27:07,210
now if it depends which compiler your

00:27:05,169 --> 00:27:09,940
version which compiler version which

00:27:07,210 --> 00:27:12,820
c-plus Burford etc up until this point

00:27:09,940 --> 00:27:18,250
up until very recently I can put it that

00:27:12,820 --> 00:27:20,590
way there's really was no natural way of

00:27:18,250 --> 00:27:22,840
checking these parameters there was the

00:27:20,590 --> 00:27:26,440
boost concept checking library which

00:27:22,840 --> 00:27:29,919
even though it's been around for Oh 15

00:27:26,440 --> 00:27:32,740
years or maybe less was hardly ever used

00:27:29,919 --> 00:27:37,590
I don't think I ever saw it used and

00:27:32,740 --> 00:27:40,360
with C++ 11 we now have the ability to

00:27:37,590 --> 00:27:43,270
implement the checking of type

00:27:40,360 --> 00:27:45,419
parameters and this library which has

00:27:43,270 --> 00:27:47,679
been submitted to the boost librarian

00:27:45,419 --> 00:27:53,230
incubator it's written by Paul folds

00:27:47,679 --> 00:27:57,100
basically permits one to include this

00:27:53,230 --> 00:28:00,190
macro or macros like it and verify that

00:27:57,100 --> 00:28:02,799
a type parameter fulfills the

00:28:00,190 --> 00:28:06,039
requirements that we need to make this

00:28:02,799 --> 00:28:08,710
ring view work so what this is is

00:28:06,039 --> 00:28:11,049
basically it checks this parameter I to

00:28:08,710 --> 00:28:14,770
make sure that it's a valid iterator

00:28:11,049 --> 00:28:16,929
that's what it does now coming down the

00:28:14,770 --> 00:28:19,570
pike and everybody's got a lot to say

00:28:16,929 --> 00:28:22,590
about this as a practical matter I have

00:28:19,570 --> 00:28:27,380
never seen anybody's code but my own

00:28:22,590 --> 00:28:30,620
actually check the parameter type

00:28:27,380 --> 00:28:32,930
I'm sure there's some out there beyond

00:28:30,620 --> 00:28:34,940
has made a big deal in whole talks about

00:28:32,930 --> 00:28:35,960
how you should be using concepts which

00:28:34,940 --> 00:28:38,900
is what this is about

00:28:35,960 --> 00:28:41,110
but currently at least when he made that

00:28:38,900 --> 00:28:44,630
talk the only way to do that was to use

00:28:41,110 --> 00:28:57,530
GCC compiler version such and such with

00:28:44,630 --> 00:29:00,110
the requires Clause right and in this

00:28:57,530 --> 00:29:02,780
library uses this tick library uses

00:29:00,110 --> 00:29:09,890
those facility to provide to provide an

00:29:02,780 --> 00:29:11,930
easy way of specifying the this this

00:29:09,890 --> 00:29:17,420
would this particular library would

00:29:11,930 --> 00:29:19,880
require C++ 11 or or later and if you if

00:29:17,420 --> 00:29:21,440
you wanted to run this on C++ earlier

00:29:19,880 --> 00:29:26,830
than that you just have to comment out

00:29:21,440 --> 00:29:31,730
that statement and hold your breath

00:29:26,830 --> 00:29:35,780
because typically speaking libraries did

00:29:31,730 --> 00:29:38,780
not check parameters now they can still

00:29:35,780 --> 00:29:40,910
the syntax is not real natural the

00:29:38,780 --> 00:29:42,890
people that made the syntax think it's

00:29:40,910 --> 00:29:45,920
natural I don't think it's particularly

00:29:42,890 --> 00:29:48,380
natural this gentleman's made a library

00:29:45,920 --> 00:29:50,570
which makes it pretty natural and I

00:29:48,380 --> 00:29:52,970
found it to be useful for this context

00:29:50,570 --> 00:29:55,010
but what we're talking about here is the

00:29:52,970 --> 00:29:56,930
documentation and this tells me right

00:29:55,010 --> 00:29:59,690
away if I want to put this in to make

00:29:56,930 --> 00:30:01,220
sure this is used properly then the

00:29:59,690 --> 00:30:04,340
documentation is also going to have to

00:30:01,220 --> 00:30:07,520
specify that the parameter for this ring

00:30:04,340 --> 00:30:09,440
view better be a forward interrater so

00:30:07,520 --> 00:30:14,630
in this sense we're keeping the two in

00:30:09,440 --> 00:30:17,090
sync and that's kind of the the rest of

00:30:14,630 --> 00:30:20,150
this is pretty straightforward

00:30:17,090 --> 00:30:23,480
as you'd expect it's it's got the the

00:30:20,150 --> 00:30:25,670
functions listed there's only a few for

00:30:23,480 --> 00:30:28,640
purposes of illustration and it's

00:30:25,670 --> 00:30:32,720
actually kind of convenient I put the

00:30:28,640 --> 00:30:36,170
public interface to this type at the top

00:30:32,720 --> 00:30:37,790
and all the private stuff below I didn't

00:30:36,170 --> 00:30:40,130
include any of the implementation stuff

00:30:37,790 --> 00:30:43,010
I want to emphasize it

00:30:40,130 --> 00:30:45,320
it's my belief that it's helpful if we

00:30:43,010 --> 00:30:47,380
make a clear distinction between the

00:30:45,320 --> 00:30:52,160
user interface and the implementation

00:30:47,380 --> 00:30:54,410
and by separating the the public API

00:30:52,160 --> 00:30:58,460
from the implementation in this

00:30:54,410 --> 00:31:00,830
particular example it's my way of what's

00:30:58,460 --> 00:31:03,190
the word of emphasizing that point I

00:31:00,830 --> 00:31:05,840
think that when we create documentation

00:31:03,190 --> 00:31:08,030
one of the problems is we put too much

00:31:05,840 --> 00:31:10,730
in there I think that we should make a

00:31:08,030 --> 00:31:13,280
clear distinction between the user of

00:31:10,730 --> 00:31:14,870
this class and the person who's going to

00:31:13,280 --> 00:31:17,390
maintain it or whatever the person is

00:31:14,870 --> 00:31:19,760
going to maintain it or make it faster

00:31:17,390 --> 00:31:20,929
or find a bug he's going to be looking

00:31:19,760 --> 00:31:23,570
at the code anyway

00:31:20,929 --> 00:31:26,299
the all the information that that really

00:31:23,570 --> 00:31:28,960
specifies the details of how it's

00:31:26,299 --> 00:31:32,450
implemented can be easily found there

00:31:28,960 --> 00:31:34,760
they can be commented there the person

00:31:32,450 --> 00:31:37,400
who's using a class doesn't need and

00:31:34,760 --> 00:31:39,470
frankly doesn't care at his level about

00:31:37,400 --> 00:31:45,110
those aspects so I've tried to structure

00:31:39,470 --> 00:31:49,429
this in such a way that it it it

00:31:45,110 --> 00:31:56,260
emphasizes that distinction between the

00:31:49,429 --> 00:31:58,309
user interface and and and the other so

00:31:56,260 --> 00:31:59,840
it now so good to anybody have any

00:31:58,309 --> 00:32:03,500
questions I'm hoping that this this

00:31:59,840 --> 00:32:07,520
shrimpie looked pretty familiar okay oh

00:32:03,500 --> 00:32:09,710
and by the way the class is a pretty

00:32:07,520 --> 00:32:13,220
cool little class if I may say so myself

00:32:09,710 --> 00:32:15,679
I used I needed this facility a bunch of

00:32:13,220 --> 00:32:17,690
times there's a ton of them on github

00:32:15,679 --> 00:32:19,179
there's the standards proposal they all

00:32:17,690 --> 00:32:23,809
look more complicated to me than this

00:32:19,179 --> 00:32:25,460
but anyway that's an aside so here's

00:32:23,809 --> 00:32:27,230
what the documentation for this thing

00:32:25,460 --> 00:32:29,659
should look like you should have an

00:32:27,230 --> 00:32:31,460
introduction of purpose library and we

00:32:29,659 --> 00:32:34,030
boil it down to a sentence and even

00:32:31,460 --> 00:32:36,590
shorter sentence than I proposed a

00:32:34,030 --> 00:32:39,080
couple modem one or two or whatever

00:32:36,590 --> 00:32:41,960
motivating examples this is a very

00:32:39,080 --> 00:32:46,520
simple component we're making one

00:32:41,960 --> 00:32:50,030
example is plenty to take to illustrate

00:32:46,520 --> 00:32:52,640
how to use it and then nor then we'll

00:32:50,030 --> 00:32:56,240
have some notes and they'll have kind of

00:32:52,640 --> 00:32:58,040
weird stuff like I'm not sure you know

00:32:56,240 --> 00:33:01,880
stuff that doesn't fit anywhere else

00:32:58,040 --> 00:33:03,350
and sometimes you have well I don't know

00:33:01,880 --> 00:33:06,110
now you might refer to the standards

00:33:03,350 --> 00:33:08,480
proposal in there or whatever but is it

00:33:06,110 --> 00:33:09,890
is things go on as a practical matter

00:33:08,480 --> 00:33:11,330
you'll end up with something that

00:33:09,890 --> 00:33:14,030
doesn't fit anywhere well that's where

00:33:11,330 --> 00:33:17,870
it fits then there's a section that

00:33:14,030 --> 00:33:19,700
rationale I'm not sure I first saw this

00:33:17,870 --> 00:33:23,330
in boost libraries I had never seen it

00:33:19,700 --> 00:33:26,900
before and this actually is a I find it

00:33:23,330 --> 00:33:29,150
to be very useful as I'm coding I little

00:33:26,900 --> 00:33:31,760
quirks that I decide to do something in

00:33:29,150 --> 00:33:34,160
a particular way because I discovered

00:33:31,760 --> 00:33:37,700
something like this doesn't work on that

00:33:34,160 --> 00:33:40,850
machine or whoa if I do that it creates

00:33:37,700 --> 00:33:43,790
another problem and then I just put

00:33:40,850 --> 00:33:45,620
those that that list of gotchas I just

00:33:43,790 --> 00:33:49,640
put in this section called rationale and

00:33:45,620 --> 00:33:55,250
I just number them this thing you know

00:33:49,640 --> 00:33:57,740
returns a an R value well actually

00:33:55,250 --> 00:34:00,140
that's too obvious to even put there but

00:33:57,740 --> 00:34:02,600
it turns out you have some miscellaneous

00:34:00,140 --> 00:34:04,850
stuff some reasons that you did

00:34:02,600 --> 00:34:06,410
something so that five months later some

00:34:04,850 --> 00:34:08,570
guy comes and tells you oh you should

00:34:06,410 --> 00:34:11,990
have done that of course he's he that's

00:34:08,570 --> 00:34:14,210
a that's a that's a drive-by review he's

00:34:11,990 --> 00:34:16,429
just spitballing you because he hasn't

00:34:14,210 --> 00:34:18,649
even looked at it but now you have a

00:34:16,429 --> 00:34:20,450
reason why you did it that way it's very

00:34:18,649 --> 00:34:22,370
helpful and it keeps you for me doing

00:34:20,450 --> 00:34:25,580
the thing again and get it's also simple

00:34:22,370 --> 00:34:27,350
to do and then we have at this point we

00:34:25,580 --> 00:34:28,610
have the reference section reference

00:34:27,350 --> 00:34:30,740
section is going to be pretty simple

00:34:28,610 --> 00:34:35,720
because it's almost like a form-filling

00:34:30,740 --> 00:34:39,530
exercise at this point so let's see it

00:34:35,720 --> 00:34:41,720
consists of four parts most documents

00:34:39,530 --> 00:34:46,070
probably most types and whatever won't

00:34:41,720 --> 00:34:49,850
have all four but one type is is a

00:34:46,070 --> 00:34:51,370
concept I call it type requirements I

00:34:49,850 --> 00:34:55,790
believe the word concepts has been

00:34:51,370 --> 00:34:57,440
unfortunately very misleading and we've

00:34:55,790 --> 00:34:58,460
been suffering it from it for twenty

00:34:57,440 --> 00:35:01,670
years

00:34:58,460 --> 00:35:04,610
basically it's every type that we use

00:35:01,670 --> 00:35:09,350
every parameter type that we use

00:35:04,610 --> 00:35:12,440
needs a description of what what that

00:35:09,350 --> 00:35:14,620
parameter type has to do in order to be

00:35:12,440 --> 00:35:17,000
useful in the context of our ring view

00:35:14,620 --> 00:35:20,060
it turns out we almost never have to

00:35:17,000 --> 00:35:22,040
write such a page because those type

00:35:20,060 --> 00:35:25,600
requirements are all grouped into names

00:35:22,040 --> 00:35:28,910
in the standards documentation we've got

00:35:25,600 --> 00:35:32,030
default construct this constructible we

00:35:28,910 --> 00:35:36,770
have move assignable we have forward

00:35:32,030 --> 00:35:40,100
iterator we have a sequence we have etc

00:35:36,770 --> 00:35:42,980
etc so most of the time those pages

00:35:40,100 --> 00:35:45,350
don't even have to be written but it is

00:35:42,980 --> 00:35:47,830
useful to refute refer to them and in

00:35:45,350 --> 00:35:51,020
the documentation I will often find a

00:35:47,830 --> 00:35:53,060
say this the ring buffer requires a

00:35:51,020 --> 00:35:54,710
forward iterator I won't include the

00:35:53,060 --> 00:35:57,950
concept page there but I will have a

00:35:54,710 --> 00:35:59,930
linked to the to the SGA I document or

00:35:57,950 --> 00:36:03,560
something like that that that includes

00:35:59,930 --> 00:36:04,310
it so from at this point we've only got

00:36:03,560 --> 00:36:06,650
one type

00:36:04,310 --> 00:36:08,240
we've got no concept we're defining we

00:36:06,650 --> 00:36:09,890
don't have any free functions being

00:36:08,240 --> 00:36:12,290
defined and we're not having any meta

00:36:09,890 --> 00:36:14,390
functions so our case is going to be my

00:36:12,290 --> 00:36:16,960
example case isn't really rich enough to

00:36:14,390 --> 00:36:19,880
describe all the problems we could have

00:36:16,960 --> 00:36:23,480
but it doesn't matter I'm going to keep

00:36:19,880 --> 00:36:28,190
going here the standards document kind

00:36:23,480 --> 00:36:29,500
of to my surprise actually describes how

00:36:28,190 --> 00:36:32,570
to describe stuff

00:36:29,500 --> 00:36:38,350
unfortunately it it's not well it very

00:36:32,570 --> 00:36:41,000
well described so so you can look at it

00:36:38,350 --> 00:36:44,240
one thing that is interesting about it

00:36:41,000 --> 00:36:48,910
is it makes a special point of saying

00:36:44,240 --> 00:36:52,550
that when we're talking about a class

00:36:48,910 --> 00:36:55,430
that we should describe things in terms

00:36:52,550 --> 00:36:57,590
of valid expressions as opposed to class

00:36:55,430 --> 00:36:59,260
members and they say that specifically

00:36:57,590 --> 00:37:02,750
here

00:36:59,260 --> 00:37:04,730
that's that strikes me always struck me

00:37:02,750 --> 00:37:08,150
as kind of odd and actually with I

00:37:04,730 --> 00:37:10,640
became used to it and I see the merit in

00:37:08,150 --> 00:37:13,070
it I see the necessity of it and I think

00:37:10,640 --> 00:37:15,920
that actually what the custom is today

00:37:13,070 --> 00:37:18,410
is that if we describe a concept we

00:37:15,920 --> 00:37:20,540
describe valid expressions

00:37:18,410 --> 00:37:22,490
and if we describe a class we describe

00:37:20,540 --> 00:37:26,270
class members I think we would be better

00:37:22,490 --> 00:37:29,930
off today if we used the valid

00:37:26,270 --> 00:37:33,530
expression method for describing class

00:37:29,930 --> 00:37:44,210
behavior as well as concepts later in

00:37:33,530 --> 00:38:03,350
and what can I do for you Peter it's a

00:37:44,210 --> 00:38:06,530
good thing too they were successful well

00:38:03,350 --> 00:38:10,250
that the standard it touched upon

00:38:06,530 --> 00:38:12,830
I forget the they talk talk about method

00:38:10,250 --> 00:38:14,750
of exposition I would probably argue

00:38:12,830 --> 00:38:17,840
that that's outside the scope of the

00:38:14,750 --> 00:38:19,220
standard but anyway they they did have

00:38:17,840 --> 00:38:23,270
that little paragraph in there that I

00:38:19,220 --> 00:38:26,660
thought that was interesting and the

00:38:23,270 --> 00:38:30,560
other another document which is to me

00:38:26,660 --> 00:38:32,570
I'm gonna call it the to me it's the

00:38:30,560 --> 00:38:37,850
Bible of how to do this I think this is

00:38:32,570 --> 00:38:39,290
written in the late 90s and it's got SGI

00:38:37,850 --> 00:38:41,840
Silicon Graphics

00:38:39,290 --> 00:38:44,900
logo on it I'm guessing it was written

00:38:41,840 --> 00:38:47,060
by Alexander stepping off but I could be

00:38:44,900 --> 00:38:50,060
wrong it's unfortunate they don't have

00:38:47,060 --> 00:38:55,360
an author and they describe here that

00:38:50,060 --> 00:38:55,360
this is the the best most succinctly

00:39:01,810 --> 00:39:06,260
conclude he describes I'm not going to

00:39:04,280 --> 00:39:08,360
go through it in detail here but because

00:39:06,260 --> 00:39:10,190
you can look it up yourself but when you

00:39:08,360 --> 00:39:13,010
after this next time you have this

00:39:10,190 --> 00:39:16,310
problem go here and this is where you'll

00:39:13,010 --> 00:39:19,340
find the real explanation it talks about

00:39:16,310 --> 00:39:21,080
how to use well it talks about first

00:39:19,340 --> 00:39:25,670
concepts and how they're used how to

00:39:21,080 --> 00:39:27,740
describe valid expressions then he

00:39:25,670 --> 00:39:30,950
describes another page which is a tight

00:39:27,740 --> 00:39:32,120
page it gives examples for that it has

00:39:30,950 --> 00:39:36,350
all the sections

00:39:32,120 --> 00:39:38,740
and then a function page this is really

00:39:36,350 --> 00:39:38,740
in a nuts

00:39:38,810 --> 00:39:47,090
this this is the thing you have to you

00:39:44,780 --> 00:39:49,310
have to get to know when you're lost and

00:39:47,090 --> 00:39:52,160
here and the SGI documentation here's

00:39:49,310 --> 00:39:55,130
some sample pages this is what a quarter

00:39:52,160 --> 00:39:57,640
forward iterator looks like it has a

00:39:55,130 --> 00:39:59,240
short description it's pretty good

00:39:57,640 --> 00:40:00,860
excuse me

00:39:59,240 --> 00:40:04,460
it has another interesting thing which

00:40:00,860 --> 00:40:07,970
is a refinement of a a forward iterator

00:40:04,460 --> 00:40:10,190
is everything an input iterator is plus

00:40:07,970 --> 00:40:11,570
a couple of other things so there's a

00:40:10,190 --> 00:40:14,900
there's an inheritance relationship

00:40:11,570 --> 00:40:17,990
going on here so in the forward iterator

00:40:14,900 --> 00:40:20,180
they don't describe all the stuff that

00:40:17,990 --> 00:40:23,180
it does they just described that the

00:40:20,180 --> 00:40:25,520
what the forward iterator adds to the

00:40:23,180 --> 00:40:29,870
input innovator so you'll find that

00:40:25,520 --> 00:40:32,450
these things are incredibly short they

00:40:29,870 --> 00:40:35,330
have a little thing with notation valid

00:40:32,450 --> 00:40:37,730
expressions these two tables

00:40:35,330 --> 00:40:41,960
I just consolidate them into one because

00:40:37,730 --> 00:40:44,510
it saves space and that's pretty much it

00:40:41,960 --> 00:40:47,090
and they describe as examples a couple a

00:40:44,510 --> 00:40:49,330
couple of real classes that model this

00:40:47,090 --> 00:40:51,500
concept has described

00:40:49,330 --> 00:40:53,510
we're going to actually use this forward

00:40:51,500 --> 00:40:56,120
iterator our documentation is going to

00:40:53,510 --> 00:40:58,670
just point to this so that when a person

00:40:56,120 --> 00:41:00,440
needs to know what kind of parameter he

00:40:58,670 --> 00:41:01,940
can put into a ring view ah he's got it

00:41:00,440 --> 00:41:09,100
right here I didn't have to write a word

00:41:01,940 --> 00:41:09,100
I just had to put in a link sure

00:41:33,309 --> 00:41:39,920
well why let me let me ask question back

00:41:37,579 --> 00:41:41,300
see if I got it right and what part are

00:41:39,920 --> 00:41:43,520
we looking at it assumes a general

00:41:41,300 --> 00:41:45,619
familiarity of C++ especially with C++

00:41:43,520 --> 00:41:46,819
templates okay

00:41:45,619 --> 00:41:48,200
additionally you should read

00:41:46,819 --> 00:41:51,740
introduction to the standard template

00:41:48,200 --> 00:41:54,380
library before proceeding I think that's

00:41:51,740 --> 00:41:56,480
actually I don't know if it belongs in

00:41:54,380 --> 00:41:59,900
this part but I think it's an I think

00:41:56,480 --> 00:42:04,550
it's an accurate rendition I think to to

00:41:59,900 --> 00:42:07,220
use C++ templates the ring view is a

00:42:04,550 --> 00:42:09,890
template I think you should have general

00:42:07,220 --> 00:42:12,200
familiarity with C++ and templates at

00:42:09,890 --> 00:42:15,109
this point at the time he wrote this I

00:42:12,200 --> 00:42:18,470
think it was a very arcane and unusual

00:42:15,109 --> 00:42:20,930
skill but I think today I think most

00:42:18,470 --> 00:42:23,630
programmers should be using the standard

00:42:20,930 --> 00:42:25,369
template library it's all templates so

00:42:23,630 --> 00:42:28,430
they should have some familiar with

00:42:25,369 --> 00:42:30,349
templates they should have familiar with

00:42:28,430 --> 00:42:31,819
template parameters and kind of a

00:42:30,349 --> 00:42:33,589
general idea what happens when you put

00:42:31,819 --> 00:42:36,829
the wrong kind of parameter into

00:42:33,589 --> 00:42:38,240
something so I would say I disagree with

00:42:36,829 --> 00:42:41,210
you on that one I think that this is

00:42:38,240 --> 00:42:43,369
this is appropriate and I don't know if

00:42:41,210 --> 00:42:44,809
it belongs in this document but I think

00:42:43,369 --> 00:42:59,990
that it's true as it applies to this guy

00:42:44,809 --> 00:43:01,460
right you know I I have to say I don't

00:42:59,990 --> 00:43:03,859
have but I hadn't thought about that to

00:43:01,460 --> 00:43:06,049
tell you the truth I do believe that

00:43:03,859 --> 00:43:07,970
it's extremely useful when you write any

00:43:06,049 --> 00:43:09,950
document that you have a clear idea who

00:43:07,970 --> 00:43:11,990
the audience is that's no question

00:43:09,950 --> 00:43:14,510
whether you X have to explicitly state

00:43:11,990 --> 00:43:15,740
it or not you know I think when we're

00:43:14,510 --> 00:43:18,140
talking about something like this I

00:43:15,740 --> 00:43:19,849
think there's people pretty much gonna

00:43:18,140 --> 00:43:22,430
generally agree it wouldn't hurt to put

00:43:19,849 --> 00:43:25,549
it in maybe it's just a little verbosity

00:43:22,430 --> 00:43:28,069
don't need but they in I think the more

00:43:25,549 --> 00:43:31,759
interesting point that you raise is

00:43:28,069 --> 00:43:34,039
that it you have to at least when we're

00:43:31,759 --> 00:43:37,489
doing this and I'm talking about a ring

00:43:34,039 --> 00:43:40,039
view data type that takes an input

00:43:37,489 --> 00:43:43,430
iterator or Sydney on a forward iterator

00:43:40,039 --> 00:43:46,099
is a parameter I think that very clearly

00:43:43,430 --> 00:43:48,650
defines the audience that audience

00:43:46,099 --> 00:43:50,630
requirements and I and I can write to

00:43:48,650 --> 00:43:52,609
that audience so I feel okay about that

00:43:50,630 --> 00:43:55,099
but if I were going to write a user

00:43:52,609 --> 00:43:57,440
manual I would have a whole different

00:43:55,099 --> 00:43:59,569
way of looking at it so I don't know if

00:43:57,440 --> 00:44:01,309
that that's your question really wasn't

00:43:59,569 --> 00:44:03,589
a question and my answer really wasn't

00:44:01,309 --> 00:44:11,809
an answer but anyway we had an

00:44:03,589 --> 00:44:16,309
interesting exchange okay there's a for

00:44:11,809 --> 00:44:18,940
iterator here's a class that has two

00:44:16,309 --> 00:44:20,869
template parameters I'm not good I

00:44:18,940 --> 00:44:24,229
picked this one because it's actually

00:44:20,869 --> 00:44:27,049
very similar to the ring view it has a

00:44:24,229 --> 00:44:28,819
similar set of functions I'm not going

00:44:27,049 --> 00:44:30,170
to I'm not going to go into this because

00:44:28,819 --> 00:44:31,160
I don't want to run out of time it's

00:44:30,170 --> 00:44:34,309
pretty straightforward

00:44:31,160 --> 00:44:35,690
here's a function documentation of

00:44:34,309 --> 00:44:37,609
function I'm hardly going to touch that

00:44:35,690 --> 00:44:41,259
because I don't think there's much

00:44:37,609 --> 00:44:41,259
disagreement about that yet

00:44:50,110 --> 00:44:55,370
it does and I have actually have a

00:44:53,240 --> 00:45:00,830
pointer to that I'm not gonna do that

00:44:55,370 --> 00:45:06,500
because it it it takes more time but I

00:45:00,830 --> 00:45:08,900
find the the old SGI documentation a

00:45:06,500 --> 00:45:11,480
better explanation of how to do it i

00:45:08,900 --> 00:45:14,870
think that the the CP reference is very

00:45:11,480 --> 00:45:15,590
very good it's quite good and i use it

00:45:14,870 --> 00:45:17,870
all the time

00:45:15,590 --> 00:45:20,810
but for purposes of the exposition today

00:45:17,870 --> 00:45:23,360
and I also believe if one wants a model

00:45:20,810 --> 00:45:25,790
to help you right there this this C++

00:45:23,360 --> 00:45:29,900
reference documentation is not quite so

00:45:25,790 --> 00:45:30,950
regular as the old SGI and the SGI one

00:45:29,900 --> 00:45:33,140
if you want to

00:45:30,950 --> 00:45:35,120
I think learn how they did it I think I

00:45:33,140 --> 00:45:38,000
think it's a good place to start you'll

00:45:35,120 --> 00:45:39,650
be looking at cpp reference anyway but I

00:45:38,000 --> 00:45:43,010
think that the fact that something is

00:45:39,650 --> 00:45:45,500
old it doesn't really in this case

00:45:43,010 --> 00:45:48,050
diminish its value and there's other

00:45:45,500 --> 00:45:49,220
situations for that I'm 69 years old so

00:45:48,050 --> 00:45:55,850
you're not gonna you're not going to

00:45:49,220 --> 00:45:58,970
convince me that it so uh I'm not I'm

00:45:55,850 --> 00:46:02,660
not convinced on that so let's suppose

00:45:58,970 --> 00:46:04,820
so now applying this principles I've got

00:46:02,660 --> 00:46:07,370
my let's start building the

00:46:04,820 --> 00:46:10,150
documentation for my ring view well I

00:46:07,370 --> 00:46:12,320
got my name their copyright introduction

00:46:10,150 --> 00:46:15,350
here's the sentence the first sentence

00:46:12,320 --> 00:46:17,300
we we wrote down ring view is an adapter

00:46:15,350 --> 00:46:19,460
which provides functions for the first

00:46:17,300 --> 00:46:22,640
in first out access to existing storage

00:46:19,460 --> 00:46:23,450
it doesn't need anything else a matter

00:46:22,640 --> 00:46:26,390
of fact it is

00:46:23,450 --> 00:46:29,720
as you guys reminded me could actually

00:46:26,390 --> 00:46:32,000
use a little less I'm sort of tempted to

00:46:29,720 --> 00:46:34,660
add something but every time I do I'm

00:46:32,000 --> 00:46:39,740
thinking it's not really adding anything

00:46:34,660 --> 00:46:41,990
then I have a tutorial which basically

00:46:39,740 --> 00:46:44,060
is just my example and there's one

00:46:41,990 --> 00:46:48,070
sentence there that says produces the

00:46:44,060 --> 00:46:48,070
following output and there's the output

00:46:48,580 --> 00:46:52,790
this is okay granted this is a little

00:46:51,590 --> 00:46:56,840
simpler than what you're going to run

00:46:52,790 --> 00:46:59,030
into but it illustrates the value of

00:46:56,840 --> 00:47:00,860
restraining yourself from adding

00:46:59,030 --> 00:47:03,200
something just because you think you're

00:47:00,860 --> 00:47:05,810
expected to in this particular

00:47:03,200 --> 00:47:07,510
case I don't think adding thing anything

00:47:05,810 --> 00:47:10,280
would add anything

00:47:07,510 --> 00:47:13,160
so we've already making a lot of

00:47:10,280 --> 00:47:17,089
progress here we're like almost to lunch

00:47:13,160 --> 00:47:18,920
yeah notes here I put the stuff that

00:47:17,089 --> 00:47:23,240
didn't fit anywhere else like it's

00:47:18,920 --> 00:47:25,369
similar to an STD q and how its differs

00:47:23,240 --> 00:47:27,230
from that at yada-yada

00:47:25,369 --> 00:47:32,450
maybe I probably put in more than I

00:47:27,230 --> 00:47:34,310
should have here so and if you've worked

00:47:32,450 --> 00:47:36,440
with cube before basically tells you the

00:47:34,310 --> 00:47:38,390
API is going to be very similar if you

00:47:36,440 --> 00:47:40,550
think this way and a lot of us do you're

00:47:38,390 --> 00:47:43,130
gonna say oh it's just like the STD q

00:47:40,550 --> 00:47:45,200
except instead of allocating elements we

00:47:43,130 --> 00:47:46,970
have all the elements pre-allocated so

00:47:45,200 --> 00:47:49,190
we don't need an alligator we can have

00:47:46,970 --> 00:47:50,720
it on the stack Oh voila

00:47:49,190 --> 00:47:53,329
it's gonna be the same thing it's just

00:47:50,720 --> 00:47:56,390
gonna be a lot faster with no overhead

00:47:53,329 --> 00:47:58,040
or I can use it in embedded system that

00:47:56,390 --> 00:47:59,869
kind of information might be useful to

00:47:58,040 --> 00:48:01,970
put in there some embedded systems don't

00:47:59,869 --> 00:48:05,390
like using the heat and on the other

00:48:01,970 --> 00:48:08,480
hand if I if I've got a queue like I

00:48:05,390 --> 00:48:10,579
would be done I'd be fine here and so or

00:48:08,480 --> 00:48:14,720
if I had a program that used the STD

00:48:10,579 --> 00:48:16,550
queue and and then then we want to port

00:48:14,720 --> 00:48:18,349
it to an embedded system oh well maybe

00:48:16,550 --> 00:48:20,240
just with we can see right here with

00:48:18,349 --> 00:48:22,280
just a little tweak we could get we

00:48:20,240 --> 00:48:25,609
could get the effect without having to

00:48:22,280 --> 00:48:27,650
turn our whole system inside out here I

00:48:25,609 --> 00:48:29,690
and I put in the rationale the comments

00:48:27,650 --> 00:48:33,140
that I had about the fact that that this

00:48:29,690 --> 00:48:35,450
is part of the proposal for or similar

00:48:33,140 --> 00:48:37,910
to this similar to a proposal for the

00:48:35,450 --> 00:48:40,520
Standards Committee so there's not much

00:48:37,910 --> 00:48:44,810
to that and here I have the type this is

00:48:40,520 --> 00:48:48,440
pretty much taken from the SGI example

00:48:44,810 --> 00:48:52,390
for a type it starts out with the

00:48:48,440 --> 00:48:56,030
function signature and describes the

00:48:52,390 --> 00:48:58,369
type requirements or the concepts that

00:48:56,030 --> 00:49:01,520
that type requirement is required to

00:48:58,369 --> 00:49:05,589
permit to to support the forward

00:49:01,520 --> 00:49:10,520
interrater and that matches up with this

00:49:05,589 --> 00:49:14,950
construct inside our code which is from

00:49:10,520 --> 00:49:16,760
the TIC library which says is forward

00:49:14,950 --> 00:49:20,270
iterator

00:49:16,760 --> 00:49:22,370
which will fail to compile if I in fact

00:49:20,270 --> 00:49:25,460
does not meet that requirement it's kind

00:49:22,370 --> 00:49:28,550
of a subtle point but it saves gobs a

00:49:25,460 --> 00:49:30,200
time we don't even have to add any thing

00:49:28,550 --> 00:49:32,000
to our documentation here because since

00:49:30,200 --> 00:49:34,820
the forward iterator is already defined

00:49:32,000 --> 00:49:36,890
by the standard we can just suck it into

00:49:34,820 --> 00:49:39,080
our own document somebody can look it up

00:49:36,890 --> 00:49:40,700
somewhere else we're done that's that

00:49:39,080 --> 00:49:43,730
much we don't have to write we don't

00:49:40,700 --> 00:49:45,770
have to describe what I is because it's

00:49:43,730 --> 00:49:58,580
done for weeks we leveraged on the free

00:49:45,770 --> 00:50:01,370
stuff so also I wrote the the ring view

00:49:58,580 --> 00:50:06,680
I was careful not to define a disruptor

00:50:01,370 --> 00:50:10,130
or a my own version of copy or whatever

00:50:06,680 --> 00:50:11,780
because following the rule of zero if I

00:50:10,130 --> 00:50:13,780
don't define any of those they're

00:50:11,780 --> 00:50:17,720
automatically defined by the compiler

00:50:13,780 --> 00:50:20,030
so more free stuff the minute I were to

00:50:17,720 --> 00:50:22,670
put in my own destructor there whew now

00:50:20,030 --> 00:50:29,000
I have to do more work more work doesn't

00:50:22,670 --> 00:50:31,310
pay and furthermore I get a significant

00:50:29,000 --> 00:50:35,750
part of my documentation done because

00:50:31,310 --> 00:50:40,340
once I know that the default copy

00:50:35,750 --> 00:50:43,670
assignment and move assignment and all

00:50:40,340 --> 00:50:46,070
of that stuff is implemented

00:50:43,670 --> 00:50:47,900
automatically by C++ that's another

00:50:46,070 --> 00:50:49,820
thing I don't have to document all I

00:50:47,900 --> 00:50:52,640
have to do is refer to the concepts as

00:50:49,820 --> 00:50:55,310
described in the standards manual so I

00:50:52,640 --> 00:50:56,810
cut my work a huge amount by now

00:50:55,310 --> 00:50:58,490
somebody's going to come along it make

00:50:56,810 --> 00:51:00,890
us think make my thing a little fancier

00:50:58,490 --> 00:51:04,730
by putting in a destructor which keeps

00:51:00,890 --> 00:51:06,500
count of something oh no now he created

00:51:04,730 --> 00:51:11,540
a lot more workforce and more

00:51:06,500 --> 00:51:13,490
opportunities for mistakes so I'm I'm I

00:51:11,540 --> 00:51:16,820
have the documentation on when I'm

00:51:13,490 --> 00:51:19,130
writing the code so and here's the the

00:51:16,820 --> 00:51:22,190
SGI way of describing something with

00:51:19,130 --> 00:51:23,960
notation associated types one type that

00:51:22,190 --> 00:51:26,840
we have in here is the value type we

00:51:23,960 --> 00:51:29,480
just forward that to the value type of

00:51:26,840 --> 00:51:30,060
the iterator I believe that other cases

00:51:29,480 --> 00:51:32,580
they have

00:51:30,060 --> 00:51:35,460
a type for the for the value type I

00:51:32,580 --> 00:51:37,950
don't know I did it this way every

00:51:35,460 --> 00:51:39,000
iterator has a value type I said we're

00:51:37,950 --> 00:51:42,120
going to use that we're going to make

00:51:39,000 --> 00:51:43,890
the value type of this of this construct

00:51:42,120 --> 00:51:46,800
the same so we get that for free and

00:51:43,890 --> 00:51:49,470
then all we do then need to do is really

00:51:46,800 --> 00:51:51,510
describe the operations that are

00:51:49,470 --> 00:51:53,580
supported hearing and this is all they

00:51:51,510 --> 00:51:57,000
are now I had to horse around with this

00:51:53,580 --> 00:52:01,320
a little bit to get the R value thing

00:51:57,000 --> 00:52:03,630
right in whatever and then I also

00:52:01,320 --> 00:52:05,510
include the link here into my source

00:52:03,630 --> 00:52:10,970
code let's see if that still works no

00:52:05,510 --> 00:52:13,080
that would be too much to expect so

00:52:10,970 --> 00:52:16,020
before I started mucking with it that

00:52:13,080 --> 00:52:18,300
worked but normally it does work and

00:52:16,020 --> 00:52:20,880
then here's here's all the little extra

00:52:18,300 --> 00:52:23,790
stuff this that doesn't fit anywhere

00:52:20,880 --> 00:52:26,430
else for functions I have no free

00:52:23,790 --> 00:52:28,860
functions in this library so there's

00:52:26,430 --> 00:52:31,110
nothing to describe in references so

00:52:28,860 --> 00:52:35,370
that's that's the document for our ring

00:52:31,110 --> 00:52:37,620
view it's been sort of mechanical to

00:52:35,370 --> 00:52:39,810
actually produce it but let me tell you

00:52:37,620 --> 00:52:41,880
mechanical is much better than getting

00:52:39,810 --> 00:52:43,380
stuck and having to try you use your

00:52:41,880 --> 00:52:47,220
brain on something that is really

00:52:43,380 --> 00:52:49,650
uninteresting so we can keep moving

00:52:47,220 --> 00:52:53,040
forward on this if we had more types

00:52:49,650 --> 00:52:55,650
we'd be doing the same thing be kind of

00:52:53,040 --> 00:52:57,600
straightforward if the only thing that

00:52:55,650 --> 00:53:00,150
might be different if we had more types

00:52:57,600 --> 00:53:01,800
is our motivating example might use a

00:53:00,150 --> 00:53:04,290
couple of types to see how they would

00:53:01,800 --> 00:53:07,620
work in combination but other than that

00:53:04,290 --> 00:53:12,120
it wouldn't change all that much so I

00:53:07,620 --> 00:53:14,310
think how much time if I got eight

00:53:12,120 --> 00:53:21,690
minutes were you falling asleep or you

00:53:14,310 --> 00:53:23,880
were just engrossed in it okay so my my

00:53:21,690 --> 00:53:27,090
documentation system also produces the

00:53:23,880 --> 00:53:29,490
same thing in PDF which is kind of nice

00:53:27,090 --> 00:53:36,240
but it's just a strictly speaking itself

00:53:29,490 --> 00:53:38,040
it's a freebie okay well I'm gonna recap

00:53:36,240 --> 00:53:40,560
here

00:53:38,040 --> 00:53:43,260
the purpose the documentation is to help

00:53:40,560 --> 00:53:46,140
the users that maintain errs

00:53:43,260 --> 00:53:49,830
they'll use a little bit but they're

00:53:46,140 --> 00:53:51,780
real help is inside the code itself the

00:53:49,830 --> 00:53:56,700
code and documentation should reflect

00:53:51,780 --> 00:53:59,670
the same intention and the we're trying

00:53:56,700 --> 00:54:01,680
to address the public API if you use a

00:53:59,670 --> 00:54:03,690
tool which generates for every single

00:54:01,680 --> 00:54:06,090
function a little bit of documentation I

00:54:03,690 --> 00:54:08,700
think it's a bad idea most functions

00:54:06,090 --> 00:54:10,620
they're just listed in the type and and

00:54:08,700 --> 00:54:12,960
most of them are fairly simple that that

00:54:10,620 --> 00:54:14,760
just uh that the table is sufficient if

00:54:12,960 --> 00:54:16,770
a little bits necessary or there's some

00:54:14,760 --> 00:54:18,510
extra information you can put it there I

00:54:16,770 --> 00:54:21,600
don't think you need pages and pages

00:54:18,510 --> 00:54:23,670
with one function header per page it

00:54:21,600 --> 00:54:26,040
just takes up a lot of time it's tedious

00:54:23,670 --> 00:54:27,570
and it doesn't add any matte effect it

00:54:26,040 --> 00:54:29,610
detracts anything because it's

00:54:27,570 --> 00:54:31,500
intimidating it keeps people from one

00:54:29,610 --> 00:54:41,030
from from winding what they finding what

00:54:31,500 --> 00:54:43,800
they need okay

00:54:41,030 --> 00:54:46,440
how do we build this we do it in

00:54:43,800 --> 00:54:48,360
conjunction with a code we do it to keep

00:54:46,440 --> 00:54:50,550
the program from turning into a

00:54:48,360 --> 00:54:52,080
miscellaneous bag of tricks and a

00:54:50,550 --> 00:54:54,480
miscellaneous bag of tricks is something

00:54:52,080 --> 00:54:57,240
that's hard to document and if when we

00:54:54,480 --> 00:54:59,790
do that because people drive by and they

00:54:57,240 --> 00:55:01,470
drop a suggestion into your box or

00:54:59,790 --> 00:55:03,750
somebody comes up with a great idea it

00:55:01,470 --> 00:55:05,010
sounds great and somebody codes it and

00:55:03,750 --> 00:55:06,750
then when you come back and try and

00:55:05,010 --> 00:55:08,520
document it you find it wasn't a bad

00:55:06,750 --> 00:55:10,950
idea but it's now it's too late to take

00:55:08,520 --> 00:55:12,990
it out I know this is better somebody

00:55:10,950 --> 00:55:14,970
comes in with a little thing we update

00:55:12,990 --> 00:55:16,740
the document and whoa wait a minute this

00:55:14,970 --> 00:55:19,950
doesn't work we see it right away so

00:55:16,740 --> 00:55:22,290
this this helps vote fight scope creep

00:55:19,950 --> 00:55:25,230
this helps keep you from being everybody

00:55:22,290 --> 00:55:28,740
slave it helps you to keep moving

00:55:25,230 --> 00:55:30,450
forward well everybody is actually

00:55:28,740 --> 00:55:34,260
trying to quote help you out by giving

00:55:30,450 --> 00:55:36,810
you more dumb ideas so if you have to do

00:55:34,260 --> 00:55:38,460
this documentation part and it's not

00:55:36,810 --> 00:55:39,810
that very hard when you do it this way

00:55:38,460 --> 00:55:42,270
you'll find out right away

00:55:39,810 --> 00:55:44,730
that something is a bad idea and you'll

00:55:42,270 --> 00:55:49,560
save tons of time and not waste so much

00:55:44,730 --> 00:55:50,370
time on bad ideas so here's the general

00:55:49,560 --> 00:55:53,760
way it looks

00:55:50,370 --> 00:55:56,130
introduction examples notes rationale

00:55:53,760 --> 00:55:57,010
and then a reference references separate

00:55:56,130 --> 00:55:58,870
part

00:55:57,010 --> 00:56:01,390
and that describes each one of the

00:55:58,870 --> 00:56:04,140
following I don't have to beat this to

00:56:01,390 --> 00:56:06,550
death we already did what do we gain

00:56:04,140 --> 00:56:08,890
agreement on it's purses it's better

00:56:06,550 --> 00:56:10,840
conceptual integrity we have a type or a

00:56:08,890 --> 00:56:13,060
document which describes something that

00:56:10,840 --> 00:56:16,360
hangs together and not the miscellaneous

00:56:13,060 --> 00:56:18,220
bag of tricks it's just my slides that

00:56:16,360 --> 00:56:21,670
make me repeat that but maybe it's a

00:56:18,220 --> 00:56:24,420
good thing to repeat tools tools don't

00:56:21,670 --> 00:56:26,470
create the document we do tools can help

00:56:24,420 --> 00:56:29,560
or they can't know that they can make

00:56:26,470 --> 00:56:31,780
things worse I'm going to pick out three

00:56:29,560 --> 00:56:33,550
tools which I think are the most the

00:56:31,780 --> 00:56:38,050
only ones I'm familiar with let me put

00:56:33,550 --> 00:56:39,970
it that way the oxygen the good part is

00:56:38,050 --> 00:56:41,830
that it keeps the reference

00:56:39,970 --> 00:56:44,080
documentation in sync with the comments

00:56:41,830 --> 00:56:46,150
this is actually a huge feature it's

00:56:44,080 --> 00:56:48,790
very helpful people love it and for a

00:56:46,150 --> 00:56:52,240
good reason it is a good thing the bad

00:56:48,790 --> 00:56:55,120
thing is there's no obvious way to

00:56:52,240 --> 00:56:58,480
create concept pages with it

00:56:55,120 --> 00:57:00,310
or actually other pages I've seen people

00:56:58,480 --> 00:57:03,160
do it with macros or adding their own

00:57:00,310 --> 00:57:05,980
stuff or whatever it becomes so much

00:57:03,160 --> 00:57:08,830
work to try and make doxygen do what I

00:57:05,980 --> 00:57:10,240
wanted to do it just seemed more work

00:57:08,830 --> 00:57:13,330
than it was worth the whole purpose for

00:57:10,240 --> 00:57:15,940
me was to do less work and here I am I

00:57:13,330 --> 00:57:18,730
felt I was arm wrestling with oxygen all

00:57:15,940 --> 00:57:20,290
the time including narrative and

00:57:18,730 --> 00:57:23,920
examples a lot of work generating

00:57:20,290 --> 00:57:26,650
alternative output formats like PDF or

00:57:23,920 --> 00:57:38,650
ebook or whatever also doesn't come free

00:57:26,650 --> 00:57:41,320
with it yes yet I don't think it's worth

00:57:38,650 --> 00:57:45,160
the trade but you know I'm not I don't

00:57:41,320 --> 00:57:47,980
really want to denigrate oxygen so much

00:57:45,160 --> 00:57:49,900
because it is actually a masterwork but

00:57:47,980 --> 00:57:52,120
I think it what it really boils down to

00:57:49,900 --> 00:57:53,770
is paraphrasing the header files and

00:57:52,120 --> 00:57:55,540
that's not really adding information

00:57:53,770 --> 00:57:56,890
that's not adding a part that I'm

00:57:55,540 --> 00:58:00,550
missing here

00:57:56,890 --> 00:58:02,500
it kind of gives me what I'm not needing

00:58:00,550 --> 00:58:05,710
and not get it doesn't give me what I am

00:58:02,500 --> 00:58:10,540
needed that's the way I see them doc

00:58:05,710 --> 00:58:12,790
book doc book is this XML thing

00:58:10,540 --> 00:58:16,360
it's a boost book as a variation of

00:58:12,790 --> 00:58:19,600
docbook one great thing about in a doc

00:58:16,360 --> 00:58:21,670
book is that it decouples the content

00:58:19,600 --> 00:58:25,420
from the formatting so you really

00:58:21,670 --> 00:58:28,930
describe all the all your your code and

00:58:25,420 --> 00:58:31,810
whatever using these XML tags and then

00:58:28,930 --> 00:58:35,260
you can generate the output in the

00:58:31,810 --> 00:58:39,700
format that you want a book PDF HTML

00:58:35,260 --> 00:58:42,370
single page HTML it's it's I really love

00:58:39,700 --> 00:58:46,270
it it's really great the pet part is

00:58:42,370 --> 00:58:48,850
editing XML is like a huge huge it's

00:58:46,270 --> 00:58:50,500
like torture it's terrible so some

00:58:48,850 --> 00:58:55,420
people have come up with ways to do it

00:58:50,500 --> 00:58:58,810
Emacs and whatever in boost Eric niba

00:58:55,420 --> 00:59:02,440
wrote a a component called quick book

00:58:58,810 --> 00:59:04,660
which lets one take a text file and

00:59:02,440 --> 00:59:07,180
prepare it and it will generate the XML

00:59:04,660 --> 00:59:09,220
for you and that's been very popular

00:59:07,180 --> 00:59:11,800
within boost I'm guessing half or more

00:59:09,220 --> 00:59:18,550
of the documentation and boost uses that

00:59:11,800 --> 00:59:21,550
component my personal favorite is XML

00:59:18,550 --> 00:59:24,430
mine I've been trying to convince people

00:59:21,550 --> 00:59:28,480
to use this in boost I've had zero

00:59:24,430 --> 00:59:31,450
success oh well but basically it's an

00:59:28,480 --> 00:59:35,530
editor for XML and they have a free

00:59:31,450 --> 00:59:38,440
version and there's an add-on which you

00:59:35,530 --> 00:59:41,200
know is for C++ documents like the SGI

00:59:38,440 --> 00:59:44,800
baton derived from the SGI scheme so

00:59:41,200 --> 00:59:46,930
basically it lets me just create a type

00:59:44,800 --> 00:59:49,600
page create a concept page and then just

00:59:46,930 --> 00:59:52,540
fill that out almost as if it were a

00:59:49,600 --> 00:59:55,420
form and then get and then from then i

00:59:52,540 --> 00:59:57,880
can generate PDF or whatever setting up

00:59:55,420 --> 01:00:00,700
the the tool processing is kind of a

00:59:57,880 --> 01:00:03,670
pain but even so that's that's the one

01:00:00,700 --> 01:00:04,720
that that i'm i like so i know if we

01:00:03,670 --> 01:00:08,560
have any time left

01:00:04,720 --> 01:00:09,600
since this session is over 45 seconds

01:00:08,560 --> 01:00:13,590
one question

01:00:09,600 --> 01:00:13,590
one who's yes

01:00:22,150 --> 01:00:28,850
- first is document less don't document

01:00:26,270 --> 01:00:32,300
document implementation features in the

01:00:28,850 --> 01:00:33,860
user document right and I've said that

01:00:32,300 --> 01:00:37,310
you should have the inflammation stuff

01:00:33,860 --> 01:00:39,380
in the code and if you do that then when

01:00:37,310 --> 01:00:41,570
you you get a better implementation well

01:00:39,380 --> 01:00:44,240
the interface is the same right so

01:00:41,570 --> 01:00:47,180
there's less opportunity for for

01:00:44,240 --> 01:00:49,900
discrepancy so that's the that's the

01:00:47,180 --> 01:00:52,280
overall piece of view I have on that

01:00:49,900 --> 01:00:53,360
document lists don't generate something

01:00:52,280 --> 01:00:55,610
with everything in it

01:00:53,360 --> 01:00:59,330
generate something with just what they

01:00:55,610 --> 01:01:01,250
just describes the API and if you make

01:00:59,330 --> 01:01:03,230
changes in your code it won't matter

01:01:01,250 --> 01:01:15,980
unless you really change the API that

01:01:03,230 --> 01:01:17,990
will help a lot well and I had made that

01:01:15,980 --> 01:01:19,670
distinction and I think I've made an

01:01:17,990 --> 01:01:21,620
effort to make it a very obvious one

01:01:19,670 --> 01:01:24,380
that this is for users of the library

01:01:21,620 --> 01:01:27,530
for people maintaining a library they

01:01:24,380 --> 01:01:28,670
just look at the code that's my they

01:01:27,530 --> 01:01:30,950
don't need documentation documentation

01:01:28,670 --> 01:01:32,750
is not this documentation I'm talking

01:01:30,950 --> 01:01:35,030
about here is not that helpful to them

01:01:32,750 --> 01:01:38,120
can I ask a question to the audience

01:01:35,030 --> 01:01:42,050
before everybody leaves how many of us

01:01:38,120 --> 01:01:44,600
here share the view that user doc can be

01:01:42,050 --> 01:01:48,050
used as an effective tool for quality

01:01:44,600 --> 01:01:49,550
control for ensuring test coverage for

01:01:48,050 --> 01:01:55,250
the code that we write maybe just a show

01:01:49,550 --> 01:01:57,590
of hands very few all right thanks

01:01:55,250 --> 01:01:59,120
interesting question it's been very

01:01:57,590 --> 01:02:00,950
useful for myself but I wonder how to

01:01:59,120 --> 01:02:02,720
get this idea across to my team members

01:02:00,950 --> 01:02:04,790
to my company and maybe we can have a

01:02:02,720 --> 01:02:06,800
talk well I think it one you know in the

01:02:04,790 --> 01:02:07,940
context of what I said I think that it's

01:02:06,800 --> 01:02:12,290
kind of interesting where that would fit

01:02:07,940 --> 01:02:13,100
in yes it didn't occur to me yes thank

01:02:12,290 --> 01:02:13,540
you for showing up

01:02:13,100 --> 01:02:14,530
[Applause]

01:02:13,540 --> 01:02:19,840
[Music]

01:02:14,530 --> 01:02:19,840

YouTube URL: https://www.youtube.com/watch?v=YxmdCxX9dMk


