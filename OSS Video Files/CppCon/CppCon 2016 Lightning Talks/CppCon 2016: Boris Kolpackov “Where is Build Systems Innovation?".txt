Title: CppCon 2016: Boris Kolpackov “Where is Build Systems Innovation?"
Publication date: 2016-10-07
Playlist: CppCon 2016 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,020 --> 00:00:05,609
so I don't know how many of you seen

00:00:02,669 --> 00:00:08,490
talks by Bryan can tell if you haven't

00:00:05,609 --> 00:00:10,400
highly come in very entertaining so the

00:00:08,490 --> 00:00:14,219
other day I was watching one about

00:00:10,400 --> 00:00:15,839
freebsd jails and Solaris zones and you

00:00:14,219 --> 00:00:18,449
know you get a whole new perspective on

00:00:15,839 --> 00:00:21,449
incarceration but the thing that stood

00:00:18,449 --> 00:00:22,949
out to me is when he was talking about

00:00:21,449 --> 00:00:25,140
the state of salaries in the late

00:00:22,949 --> 00:00:27,300
eighties and it was apparently in a maze

00:00:25,140 --> 00:00:30,210
so they spent many years cleaning it up

00:00:27,300 --> 00:00:33,149
and then finally they had this nice

00:00:30,210 --> 00:00:34,680
operating system but they realized that

00:00:33,149 --> 00:00:36,630
in the past ten years there was no

00:00:34,680 --> 00:00:39,180
operating system innovation there was

00:00:36,630 --> 00:00:40,829
nothing interesting happening so then

00:00:39,180 --> 00:00:46,739
they went ahead and start working on

00:00:40,829 --> 00:00:49,200
DTrace and gfs and salaries zones and it

00:00:46,739 --> 00:00:52,469
start to me that we is in a same

00:00:49,200 --> 00:00:55,410
situation we have this nice new clean

00:00:52,469 --> 00:00:58,230
language but we still stuck with C++ 98

00:00:55,410 --> 00:01:00,510
there are build systems and the problem

00:00:58,230 --> 00:01:02,489
when you with being stuck with something

00:01:00,510 --> 00:01:05,640
primitive is that you cannot even

00:01:02,489 --> 00:01:07,890
imagine that they can be a radically

00:01:05,640 --> 00:01:10,110
different way to do things so a good

00:01:07,890 --> 00:01:12,119
example a CVS engi right when i was

00:01:10,110 --> 00:01:15,270
using CVS or now many of you had the

00:01:12,119 --> 00:01:19,290
pleasure I never even thought that about

00:01:15,270 --> 00:01:21,090
something like git rebase so i'm working

00:01:19,290 --> 00:01:25,320
on build 2 which is the new build system

00:01:21,090 --> 00:01:26,970
c++ build tool chain and what we decided

00:01:25,320 --> 00:01:29,640
to do we decided to just throw away all

00:01:26,970 --> 00:01:31,979
the baggage let's start from scratch in

00:01:29,640 --> 00:01:34,350
more than C++ and once you get the

00:01:31,979 --> 00:01:36,240
basics right all of a sudden all this

00:01:34,350 --> 00:01:37,799
young women need to to look for

00:01:36,240 --> 00:01:40,140
innovation you know I just stays that

00:01:37,799 --> 00:01:42,720
you just jumps at you so I only have

00:01:40,140 --> 00:01:45,180
time to show you one hopefully Michael

00:01:42,720 --> 00:01:48,990
won't cut me off so one thing that we

00:01:45,180 --> 00:01:50,670
drill it took a great care of inbuilt to

00:01:48,990 --> 00:01:53,549
ease cross-compilation so now it's

00:01:50,670 --> 00:01:55,590
actually a pleasure to use and once you

00:01:53,549 --> 00:01:57,329
get that it's like git rebase you know

00:01:55,590 --> 00:01:59,670
you want to rebase I mean cross compile

00:01:57,329 --> 00:02:01,200
everything and why is that well because

00:01:59,670 --> 00:02:02,670
it's more convenient right you can do it

00:02:01,200 --> 00:02:04,950
from the comfort of your development

00:02:02,670 --> 00:02:09,599
environment from max of being whatever

00:02:04,950 --> 00:02:13,380
you want so when you work on an open

00:02:09,599 --> 00:02:15,060
source cross compiler project

00:02:13,380 --> 00:02:16,560
you really only need to worry about

00:02:15,060 --> 00:02:19,470
their income polish these days right

00:02:16,560 --> 00:02:22,230
client GCC and visuals to claim GCC are

00:02:19,470 --> 00:02:24,240
easy available everywhere visual studies

00:02:22,230 --> 00:02:26,160
a bit of a plane so apparently these

00:02:24,240 --> 00:02:28,350
days you can even use visual studio to

00:02:26,160 --> 00:02:29,970
build linux binaries not exactly sure

00:02:28,350 --> 00:02:33,000
how it works or why someone would want

00:02:29,970 --> 00:02:36,060
to do that but what I want to do is to

00:02:33,000 --> 00:02:37,860
cross-compile what visual studio from

00:02:36,060 --> 00:02:39,780
linux to windows so i don't need one

00:02:37,860 --> 00:02:43,110
need to leave my in a preferred

00:02:39,780 --> 00:02:45,120
development environment and well even

00:02:43,110 --> 00:02:48,270
really think about running a visual

00:02:45,120 --> 00:02:49,860
studio ID right in on linux i think

00:02:48,270 --> 00:02:52,350
everyone realizes it's probably never

00:02:49,860 --> 00:02:54,060
going to happen but running the

00:02:52,350 --> 00:02:57,750
toolchain the compiler itself is

00:02:54,060 --> 00:03:01,530
actually possible so i have a couple of

00:02:57,750 --> 00:03:03,630
virgins here now this mrs. up whether

00:03:01,530 --> 00:03:05,970
you hear a little bit at c++ now someone

00:03:03,630 --> 00:03:08,460
asked me hey are you running ubuntu use

00:03:05,970 --> 00:03:10,680
the land on windows like no i'm running

00:03:08,460 --> 00:03:12,690
ubuntu use the land on ubuntu so this is

00:03:10,680 --> 00:03:15,210
actually linux machine that is running a

00:03:12,690 --> 00:03:17,460
little wrapper that we want let me rot

00:03:15,210 --> 00:03:21,810
and it's actually fairly simple just

00:03:17,460 --> 00:03:23,910
translate some parts using wine so you

00:03:21,810 --> 00:03:25,980
can see it's visual studio 14 compiler

00:03:23,910 --> 00:03:28,800
here so i want to show you a concrete

00:03:25,980 --> 00:03:31,320
example how it's helpful so i have a

00:03:28,800 --> 00:03:32,760
build utility library that we use in our

00:03:31,320 --> 00:03:35,310
build system and i have a couple of

00:03:32,760 --> 00:03:37,890
configurations for tasting going and you

00:03:35,310 --> 00:03:39,840
can see the last one is visual studio so

00:03:37,890 --> 00:03:42,720
what I did that I broke it a little bit

00:03:39,840 --> 00:03:45,000
I'm gonna break up then introduced a

00:03:42,720 --> 00:03:47,250
syntax error so remember this is all

00:03:45,000 --> 00:03:50,760
running on on linux and i'm going to

00:03:47,250 --> 00:03:52,470
compile this configuration so those of

00:03:50,760 --> 00:03:54,209
you familiar with visual studio years

00:03:52,470 --> 00:03:57,690
will immediately recognize it right this

00:03:54,209 --> 00:04:01,140
c 2 144 carnegie is a giveaway the cool

00:03:57,690 --> 00:04:02,850
thing is Emacs actually cognizes this

00:04:01,140 --> 00:04:04,290
error format so we didn't have to do

00:04:02,850 --> 00:04:06,240
anything so i can say go to the next

00:04:04,290 --> 00:04:09,150
error and it just jumps the right line

00:04:06,240 --> 00:04:10,800
for me so this was a very speculative

00:04:09,150 --> 00:04:12,810
project we kind of thought hey can we

00:04:10,800 --> 00:04:16,049
make it work if we can if we can just

00:04:12,810 --> 00:04:17,850
compile it will be already huge win and

00:04:16,049 --> 00:04:20,370
once you get that in the next thing you

00:04:17,850 --> 00:04:22,590
think hey can I run tests it turns out

00:04:20,370 --> 00:04:24,570
you can actually run a lot of tests we

00:04:22,590 --> 00:04:27,330
can run all our build system tests on

00:04:24,570 --> 00:04:30,960
the wine on linux so i also broke

00:04:27,330 --> 00:04:38,219
test so I'm going to run that so I'm a

00:04:30,960 --> 00:04:40,680
messed up an assertion test in in my

00:04:38,219 --> 00:04:42,479
test for this sha256 so this is an

00:04:40,680 --> 00:04:45,030
assertion failed equivalent for wine

00:04:42,479 --> 00:04:46,919
while the output is not as nice you

00:04:45,030 --> 00:04:51,509
still get all the information so you get

00:04:46,919 --> 00:04:53,810
the line and source filing so thank you

00:04:51,509 --> 00:04:53,810

YouTube URL: https://www.youtube.com/watch?v=OzuwGGc_ty8


