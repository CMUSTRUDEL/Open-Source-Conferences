Title: Improving Windows debuggers from the inside out - Ken Sykes [ CppCon 2016 ]
Publication date: 2016-10-08
Playlist: CppCon 2016 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
—
Optimized And Managed by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
—
Captions: 
	00:00:00,390 --> 00:00:05,220
hi everybody my name is Ken Sykes and I

00:00:03,060 --> 00:00:06,720
want to talk a few minutes about Windows

00:00:05,220 --> 00:00:08,490
debuggers and some of the recent changes

00:00:06,720 --> 00:00:09,769
that we've been making to them to make

00:00:08,490 --> 00:00:13,290
them more useful

00:00:09,769 --> 00:00:17,279
so traditionally Windows debugging has

00:00:13,290 --> 00:00:19,680
been a tribal tribulation you either

00:00:17,279 --> 00:00:22,920
have to you dump structures manually

00:00:19,680 --> 00:00:27,740
like this dumping the peb and you have

00:00:22,920 --> 00:00:29,730
to go through and know the structure

00:00:27,740 --> 00:00:32,189
intimately in order to find the

00:00:29,730 --> 00:00:33,989
information that you want and you even

00:00:32,189 --> 00:00:39,570
have to do this for very common types

00:00:33,989 --> 00:00:42,000
like stood straying or stood map so what

00:00:39,570 --> 00:00:44,610
did we do about it well the next idea

00:00:42,000 --> 00:00:46,829
was let's write debugger extensions so

00:00:44,610 --> 00:00:49,590
then you have something like Bank peb

00:00:46,829 --> 00:00:50,850
and that thing will dump out information

00:00:49,590 --> 00:00:54,120
that they think you might be interested

00:00:50,850 --> 00:00:55,530
in and in some ways it is better you

00:00:54,120 --> 00:00:59,489
don't have to know about the structure

00:00:55,530 --> 00:01:02,460
names and their format but you know you

00:00:59,489 --> 00:01:04,830
don't get things like composability it's

00:01:02,460 --> 00:01:07,049
not easy to take the peb output and feed

00:01:04,830 --> 00:01:09,119
it into the input for something else and

00:01:07,049 --> 00:01:10,500
if the you if there was a field that

00:01:09,119 --> 00:01:15,270
you're interested in but they don't dump

00:01:10,500 --> 00:01:18,360
you're out of luck so then that led to

00:01:15,270 --> 00:01:22,759
an explosion of one-off extension so you

00:01:18,360 --> 00:01:26,100
know bang process or dot process end

00:01:22,759 --> 00:01:29,640
blog handle heap object you had to know

00:01:26,100 --> 00:01:32,000
all of these special commands and how to

00:01:29,640 --> 00:01:35,850
put them together to get your job done

00:01:32,000 --> 00:01:36,360
it was really crazy fact it makes your

00:01:35,850 --> 00:01:40,650
head spin

00:01:36,360 --> 00:01:44,880
all these extensions here so many

00:01:40,650 --> 00:01:48,930
extensions ah so there's got to be a

00:01:44,880 --> 00:01:50,659
better way to do this so one of the

00:01:48,930 --> 00:01:53,790
things that we did is we introduced

00:01:50,659 --> 00:01:57,119
something called nathas which is shared

00:01:53,790 --> 00:01:58,829
with Visual Studio and through an XML

00:01:57,119 --> 00:02:01,259
file you describe your format and

00:01:58,829 --> 00:02:04,619
instead of seeing a dump on the left

00:02:01,259 --> 00:02:06,240
with all the hard template expansion

00:02:04,619 --> 00:02:08,849
there you see something on the right

00:02:06,240 --> 00:02:11,819
which at the bottom this is a map of

00:02:08,849 --> 00:02:13,710
string and in and in the green box you

00:02:11,819 --> 00:02:19,560
can see it actually is something in

00:02:13,710 --> 00:02:21,870
eligible and this gives you an idea what

00:02:19,560 --> 00:02:25,860
the Matt vis might look like for

00:02:21,870 --> 00:02:30,150
decoding a tree of items all of this is

00:02:25,860 --> 00:02:32,880
documented on MSDN the data model is

00:02:30,150 --> 00:02:36,150
another area that we are innovating in

00:02:32,880 --> 00:02:39,090
which is instead of having all this data

00:02:36,150 --> 00:02:41,760
inside the extensions and not composable

00:02:39,090 --> 00:02:44,400
and usable by others we have a central

00:02:41,760 --> 00:02:46,470
data model where information be

00:02:44,400 --> 00:02:49,890
collected together it can be sorted you

00:02:46,470 --> 00:02:52,860
can do linked queries things like that

00:02:49,890 --> 00:02:54,870
so this is just an example of taking the

00:02:52,860 --> 00:02:58,920
current process dumping all the modules

00:02:54,870 --> 00:03:00,690
to the debugger you get a nice table you

00:02:58,920 --> 00:03:04,380
can click on the columns it'll sort by

00:03:00,690 --> 00:03:06,410
using a link order by command and we

00:03:04,380 --> 00:03:07,950
think this is a much better way of

00:03:06,410 --> 00:03:12,780
interacting with the debugger

00:03:07,950 --> 00:03:14,820
information and this is not just

00:03:12,780 --> 00:03:16,590
something that works in windbg it works

00:03:14,820 --> 00:03:18,870
in all of our debuggers because it's

00:03:16,590 --> 00:03:21,140
part of our shared engine it works

00:03:18,870 --> 00:03:23,700
whether your user mode or kernel mode

00:03:21,140 --> 00:03:25,860
you want to see your stack traces you

00:03:23,700 --> 00:03:29,490
don't have to taste no-till to starcade

00:03:25,860 --> 00:03:31,770
for user mode or bag process for kernel

00:03:29,490 --> 00:03:34,590
mode it works with your debugging a dump

00:03:31,770 --> 00:03:36,300
file or a live file and this is really

00:03:34,590 --> 00:03:38,370
the direction that Microsoft's going to

00:03:36,300 --> 00:03:40,590
take putting more information into the

00:03:38,370 --> 00:03:45,180
data model making it easier for people

00:03:40,590 --> 00:03:46,980
to interact with it and if you're

00:03:45,180 --> 00:03:49,770
looking for more information on any of

00:03:46,980 --> 00:03:53,760
this you can look up the DX command or

00:03:49,770 --> 00:03:56,640
the nat vis on msdn and it gives

00:03:53,760 --> 00:03:58,020
extensive documentation on that also if

00:03:56,640 --> 00:04:02,160
you go to channel 9 and you look at

00:03:58,020 --> 00:04:05,460
defrag tools episodes 138 139 you give a

00:04:02,160 --> 00:04:07,320
good feel for how this comes together by

00:04:05,460 --> 00:04:08,040
the person that wrote it himself which

00:04:07,320 --> 00:04:12,150
is not me

00:04:08,040 --> 00:04:15,780
I'm just messenger and a little bonus

00:04:12,150 --> 00:04:18,260
tip is that tab-completion works in a

00:04:15,780 --> 00:04:21,950
lot of places in the debugger now so

00:04:18,260 --> 00:04:25,100
completing bang extensions completing

00:04:21,950 --> 00:04:27,500
fields in the data model etc

00:04:25,100 --> 00:04:30,230
and I'd encourage everyone who has to

00:04:27,500 --> 00:04:32,320
work on windows to give it a try thank

00:04:30,230 --> 00:04:32,320

YouTube URL: https://www.youtube.com/watch?v=1q79ij0uEZ0


