Title: CppCon 2016: Isabella Muerte “No Concepts Beyond This Point: The Detection Idiom"
Publication date: 2016-10-08
Playlist: CppCon 2016 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:06,120
okay so this is originally I pitched

00:00:02,970 --> 00:00:08,719
this as no concepts beyond this point I

00:00:06,120 --> 00:00:14,759
found this image by searching a sad dog

00:00:08,719 --> 00:00:19,260
so but really what this talk is is 6m

00:00:14,759 --> 00:00:22,470
Pristina so who the good gosh darn heck

00:00:19,260 --> 00:00:24,449
am i I'm Isabel more time with C++ bruja

00:00:22,470 --> 00:00:26,939
which means I write dark template

00:00:24,449 --> 00:00:29,400
metaprogramming magic my twitter is

00:00:26,939 --> 00:00:33,329
slurps mad rips my github is slurps -

00:00:29,400 --> 00:00:35,399
mad - rips so really when you talk about

00:00:33,329 --> 00:00:37,110
real quick is the detection idiom it's

00:00:35,399 --> 00:00:40,950
part of the library fundamentals beat V

00:00:37,110 --> 00:00:43,260
- TS which you can find on cpp reference

00:00:40,950 --> 00:00:45,539
comm if you need more information it's

00:00:43,260 --> 00:00:47,670
extremely powerful it's way to implement

00:00:45,539 --> 00:00:50,520
built-in type traits with the compiler

00:00:47,670 --> 00:00:52,289
and it's also a way to poorly implement

00:00:50,520 --> 00:00:56,370
concepts lights so basically just the

00:00:52,289 --> 00:00:58,859
type constraint stuff so concepts data

00:00:56,370 --> 00:01:01,170
spoke about them we want a real bad

00:00:58,859 --> 00:01:05,820
right well you know this is what we want

00:01:01,170 --> 00:01:08,659
and this is what we have and this is

00:01:05,820 --> 00:01:13,470
what we want and this is what we have

00:01:08,659 --> 00:01:16,710
and this is what we want and this is

00:01:13,470 --> 00:01:19,409
what we have laser raves are kind of

00:01:16,710 --> 00:01:21,119
okay so what does the API look like for

00:01:19,409 --> 00:01:23,880
the detection idiom well you have an is

00:01:21,119 --> 00:01:24,900
detected type which inherits from some

00:01:23,880 --> 00:01:27,960
form of a bull constant you have

00:01:24,900 --> 00:01:31,320
detected T which is basically just a an

00:01:27,960 --> 00:01:32,970
identity detected or which is kind of

00:01:31,320 --> 00:01:34,950
you know if I can't find the type that

00:01:32,970 --> 00:01:37,409
you're trying to detect it returns the

00:01:34,950 --> 00:01:40,049
type that you pass in there's is

00:01:37,409 --> 00:01:41,340
detected exact which is you want it to

00:01:40,049 --> 00:01:44,159
be the exact same type and this is

00:01:41,340 --> 00:01:45,600
detected convertible which is the type

00:01:44,159 --> 00:01:48,350
is to be implicitly convertible to the

00:01:45,600 --> 00:01:53,369
comparable to the type - there's also

00:01:48,350 --> 00:01:54,810
Nonesuch which is a special type is

00:01:53,369 --> 00:01:56,250
basically everything inside of is

00:01:54,810 --> 00:01:59,250
deleted you can't instantiate it you can

00:01:56,250 --> 00:02:01,740
know what passed in his tempo type I did

00:01:59,250 --> 00:02:05,430
want to find an image of spinal tap

00:02:01,740 --> 00:02:07,740
saying none such templates but couldn't

00:02:05,430 --> 00:02:10,310
get that in in time so how does it work

00:02:07,740 --> 00:02:12,629
it uses stood void t under the covers

00:02:10,310 --> 00:02:13,680
it's really easy to implement boy T you

00:02:12,629 --> 00:02:18,319
can go back and watch

00:02:13,680 --> 00:02:20,969
20:14 walter ii brown's talk you can do

00:02:18,319 --> 00:02:22,650
like a whole bunch of stuff with YT but

00:02:20,969 --> 00:02:24,299
it's better if you use detection idiom

00:02:22,650 --> 00:02:27,239
because you can do even more things with

00:02:24,299 --> 00:02:28,230
it so it's time to flee to C++ 7 feature

00:02:27,239 --> 00:02:30,719
but you can do it and see what's most 11

00:02:28,230 --> 00:02:33,239
10 C++ 14 I've done it multiple times

00:02:30,719 --> 00:02:40,319
but running code is easier than writing

00:02:33,239 --> 00:02:43,859
slides so nope that's the so this is the

00:02:40,319 --> 00:02:45,870
pearly header I'd have here basically

00:02:43,859 --> 00:02:47,669
just a bunch of usings and the types

00:02:45,870 --> 00:02:50,189
that we need just to get everything that

00:02:47,669 --> 00:02:54,439
we have you'll notice I have conjunction

00:02:50,189 --> 00:02:58,980
disjunction and negation from the stid

00:02:54,439 --> 00:03:00,870
library for C++ 17 and so here's what we

00:02:58,980 --> 00:03:03,689
have so we have a require we have an

00:03:00,870 --> 00:03:06,659
either we have a disallow which is the

00:03:03,689 --> 00:03:08,489
opposite of require we have changed

00:03:06,659 --> 00:03:10,139
these names and also made them concepts

00:03:08,489 --> 00:03:15,000
or pools because the concept is actually

00:03:10,139 --> 00:03:17,310
just a context for bool and we have a

00:03:15,000 --> 00:03:19,500
quick check here to do swap with so we

00:03:17,310 --> 00:03:22,319
can detect swap just so I can prove a

00:03:19,500 --> 00:03:23,669
point and then we have some operators

00:03:22,319 --> 00:03:25,620
here you'll notice that these are just

00:03:23,669 --> 00:03:27,510
deckle types with tickle Val's inside of

00:03:25,620 --> 00:03:32,250
them because detected lets you just

00:03:27,510 --> 00:03:36,329
check expressions so we have also type

00:03:32,250 --> 00:03:38,579
deaths that are dependent so we have a

00:03:36,329 --> 00:03:40,769
swappable width and we say if you know

00:03:38,579 --> 00:03:43,409
this is an expression that we can do if

00:03:40,769 --> 00:03:45,900
he previously showed you know swaps with

00:03:43,409 --> 00:03:49,109
then this will be true otherwise it will

00:03:45,900 --> 00:03:51,840
be false same with some of these are

00:03:49,109 --> 00:03:53,129
already standard values so we can just

00:03:51,840 --> 00:03:54,479
assign them let the compiler take care

00:03:53,129 --> 00:03:58,459
of it but if I wanted to do copy

00:03:54,479 --> 00:04:00,629
assignable I could just make a template

00:03:58,459 --> 00:04:02,729
metta function that works with this

00:04:00,629 --> 00:04:05,340
detected so the quality compare

00:04:02,729 --> 00:04:06,810
everybody knows that one you know you

00:04:05,340 --> 00:04:08,489
want that type to be convertible to bool

00:04:06,810 --> 00:04:10,769
it has to use the equals operator it

00:04:08,489 --> 00:04:12,840
takes a team that you simple we're gonna

00:04:10,769 --> 00:04:16,139
have it so that U is also T by default

00:04:12,840 --> 00:04:18,870
saves us some time an iterator according

00:04:16,139 --> 00:04:20,789
to the CPP references it has a cop

00:04:18,870 --> 00:04:22,740
constructible type copy sign about

00:04:20,789 --> 00:04:24,240
stretchable swappable it has a postfix

00:04:22,740 --> 00:04:27,090
increment prefix increment and a

00:04:24,240 --> 00:04:29,790
dereference an input iterator can be a

00:04:27,090 --> 00:04:31,919
Poynter or it can be any type that is

00:04:29,790 --> 00:04:35,370
equality comparable an iterator has a

00:04:31,919 --> 00:04:38,250
value type alias a reference alias and

00:04:35,370 --> 00:04:40,620
either when dereference returns the type

00:04:38,250 --> 00:04:43,350
that is the reference or converts to

00:04:40,620 --> 00:04:44,610
value type and all this other stuff and

00:04:43,350 --> 00:04:48,960
so you'll see here that I have these

00:04:44,610 --> 00:04:57,000
certs in and this compiles and so you'll

00:04:48,960 --> 00:05:03,120
see here I have this so if I so that

00:04:57,000 --> 00:05:04,919
runs but if I do you'll notice this is

00:05:03,120 --> 00:05:10,050
not how you would ever want to use for

00:05:04,919 --> 00:05:14,639
each and so we get a nice little stack

00:05:10,050 --> 00:05:17,700
insert but if you use it with enabled if

00:05:14,639 --> 00:05:19,020
you'll basically just get very simple we

00:05:17,700 --> 00:05:21,300
couldn't deduce the type you don't get a

00:05:19,020 --> 00:05:22,350
whole bunch of garbage stream and uh

00:05:21,300 --> 00:05:27,150
because I know that I was gonna have

00:05:22,350 --> 00:05:30,510
enough time I did all right there we go

00:05:27,150 --> 00:05:33,210
so if you now go to github.com / - man -

00:05:30,510 --> 00:05:34,470
rip / c XX - comp sets you can actually

00:05:33,210 --> 00:05:36,479
see all the code that I'm showing you

00:05:34,470 --> 00:05:37,500
and you can uncomment this stuff and

00:05:36,479 --> 00:05:44,820
play around with it and basically see

00:05:37,500 --> 00:05:49,370
everything I just did so and then yeah

00:05:44,820 --> 00:05:49,370

YouTube URL: https://www.youtube.com/watch?v=VctviQl-SR4


