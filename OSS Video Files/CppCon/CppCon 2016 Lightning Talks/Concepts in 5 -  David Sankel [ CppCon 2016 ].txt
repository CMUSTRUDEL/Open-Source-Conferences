Title: Concepts in 5 -  David Sankel [ CppCon 2016 ]
Publication date: 2016-10-07
Playlist: CppCon 2016 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
—
Optimized And Managed by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:00,030 --> 00:00:02,490
okay my name is David sang Cole I'm from

00:00:01,589 --> 00:00:03,689
Bloomberg and I'm gonna do an

00:00:02,490 --> 00:00:05,370
introduction the concept of five minutes

00:00:03,689 --> 00:00:06,270
running over very fast so if you want to

00:00:05,370 --> 00:00:09,120
get you got to pay attention cuz you

00:00:06,270 --> 00:00:11,219
gonna fall the bus if you don't crud

00:00:09,120 --> 00:00:12,870
boom okay first thing I remember what

00:00:11,219 --> 00:00:14,670
concepts is that they're fun that means

00:00:12,870 --> 00:00:16,320
- F concepts if you want to use it just

00:00:14,670 --> 00:00:17,910
- F concepts just think fun concepts is

00:00:16,320 --> 00:00:19,590
how you deal with GCC F concepts

00:00:17,910 --> 00:00:20,789
download lease version of GCC you can do

00:00:19,590 --> 00:00:22,800
it and play with it it's pretty easy to

00:00:20,789 --> 00:00:23,910
do alright the first thing the thing we

00:00:22,800 --> 00:00:25,920
want to sell with concepts is that you

00:00:23,910 --> 00:00:27,390
have a template not all template

00:00:25,920 --> 00:00:29,340
parameters work with that you try to put

00:00:27,390 --> 00:00:30,359
with an in my not compiler whatever get

00:00:29,340 --> 00:00:32,040
this crazy error message would be nice

00:00:30,359 --> 00:00:33,809
be able to specify without getting a

00:00:32,040 --> 00:00:35,070
crazy error message exactly what it is

00:00:33,809 --> 00:00:37,469
you want to constrain your template with

00:00:35,070 --> 00:00:38,640
that's what concepts are for so requires

00:00:37,469 --> 00:00:40,590
requires that's how you do it

00:00:38,640 --> 00:00:41,850
use - requires I know this syntax is

00:00:40,590 --> 00:00:43,950
absolutely insane but that's what it is

00:00:41,850 --> 00:00:45,149
so you say after your template you say

00:00:43,950 --> 00:00:46,230
requires of course what you put in the

00:00:45,149 --> 00:00:47,520
parentheses over there and that looks

00:00:46,230 --> 00:00:49,710
like a function declaration at the top

00:00:47,520 --> 00:00:51,840
that's saying given an affable type func

00:00:49,710 --> 00:00:53,370
given an eye that's of type int this

00:00:51,840 --> 00:00:55,289
expression F of AI needs to be valid

00:00:53,370 --> 00:00:56,370
that's it so this is an example of like

00:00:55,289 --> 00:00:59,070
some kind of function that needs to have

00:00:56,370 --> 00:01:00,180
a callable type so another thing you can

00:00:59,070 --> 00:01:01,140
do is because a lot of times you care

00:01:00,180 --> 00:01:02,820
about what the return value of that

00:01:01,140 --> 00:01:04,769
expression is they introduce a special

00:01:02,820 --> 00:01:06,510
syntax you just take your expression put

00:01:04,769 --> 00:01:08,250
it in curly brackets put an arrow and

00:01:06,510 --> 00:01:09,330
that's the expected return type so like

00:01:08,250 --> 00:01:11,220
if you have an iterator you want to make

00:01:09,330 --> 00:01:12,450
sure the I plus plus is also returns an

00:01:11,220 --> 00:01:14,790
iterator you use something like this

00:01:12,450 --> 00:01:16,140
it's really convenient syntax another

00:01:14,790 --> 00:01:17,700
really convenient thing is if you want

00:01:16,140 --> 00:01:18,960
the return type to be like a vector of

00:01:17,700 --> 00:01:20,580
something you don't want it to be

00:01:18,960 --> 00:01:22,740
necessarily vector of int or a vector of

00:01:20,580 --> 00:01:24,540
char just a vector of anything you just

00:01:22,740 --> 00:01:25,920
put auto in there and it just uses that

00:01:24,540 --> 00:01:27,960
as a placeholder for the return value of

00:01:25,920 --> 00:01:28,979
whatever that expression is so you can

00:01:27,960 --> 00:01:31,680
use that all over the place it's kind of

00:01:28,979 --> 00:01:34,799
cool next thing about it so here we use

00:01:31,680 --> 00:01:36,780
requires require so user to do your your

00:01:34,799 --> 00:01:39,630
what are we talking about again concepts

00:01:36,780 --> 00:01:40,740
yeah you put your concept in line if you

00:01:39,630 --> 00:01:41,970
want to take it out line and give it a

00:01:40,740 --> 00:01:43,500
name this the way you do that you just

00:01:41,970 --> 00:01:46,170
do like template type name func

00:01:43,500 --> 00:01:48,240
concept bool who knows why but concept

00:01:46,170 --> 00:01:48,960
bool in function equals requires and

00:01:48,240 --> 00:01:50,399
everything's the same

00:01:48,960 --> 00:01:52,140
now remember this is case we do where

00:01:50,399 --> 00:01:53,340
one requires okay the other one was

00:01:52,140 --> 00:01:54,780
requires record as a person lands is

00:01:53,340 --> 00:01:56,939
just one requires okay that's how it

00:01:54,780 --> 00:01:59,219
works if you want to use this thing now

00:01:56,939 --> 00:02:00,930
now you have a named concept you just

00:01:59,219 --> 00:02:04,170
use one requires and then you put the

00:02:00,930 --> 00:02:05,369
concept okay because if two requires is

00:02:04,170 --> 00:02:06,570
it enough you want to have one require

00:02:05,369 --> 00:02:07,680
but that wasn't enough either because

00:02:06,570 --> 00:02:09,899
it's kind of our most so you have

00:02:07,680 --> 00:02:11,400
connect 0 requires as well if you want

00:02:09,899 --> 00:02:12,290
zero requires instead of putting type

00:02:11,400 --> 00:02:13,700
name in your

00:02:12,290 --> 00:02:16,069
plate parameter you put the name of the

00:02:13,700 --> 00:02:18,109
concept that you want to constrain with

00:02:16,069 --> 00:02:19,430
so template in function func

00:02:18,109 --> 00:02:21,709
that's the equivalent of what we saw on

00:02:19,430 --> 00:02:23,359
the previous slide but some people

00:02:21,709 --> 00:02:24,560
thought that this was way too verbose so

00:02:23,359 --> 00:02:26,450
there's another way that you can make it

00:02:24,560 --> 00:02:29,420
less verbose I call this negative one

00:02:26,450 --> 00:02:30,680
requires you just take it and put it in

00:02:29,420 --> 00:02:32,000
the function declaration itself like

00:02:30,680 --> 00:02:33,230
where you'd normally put the type you

00:02:32,000 --> 00:02:35,000
put the concept there they're

00:02:33,230 --> 00:02:37,040
automatically recognize this thing as a

00:02:35,000 --> 00:02:39,500
template and constrained with this

00:02:37,040 --> 00:02:41,180
particular thing so that's concepts of

00:02:39,500 --> 00:02:43,280
five minutes but actually I've only been

00:02:41,180 --> 00:02:43,790
2 minutes and 18 seconds you know what

00:02:43,280 --> 00:02:48,920
that means

00:02:43,790 --> 00:02:52,849
bonus slide so bonus slide this is

00:02:48,920 --> 00:02:54,169
something that's kind of weird so if you

00:02:52,849 --> 00:02:55,250
have a requires requires clause and what

00:02:54,169 --> 00:02:56,780
you want to do is you want to constrain

00:02:55,250 --> 00:02:57,950
this particular concept with another

00:02:56,780 --> 00:03:00,470
concept like here we're using in

00:02:57,950 --> 00:03:02,359
function like we did had before like for

00:03:00,470 --> 00:03:03,919
example if you have a concept what you

00:03:02,359 --> 00:03:05,780
want to be a callable object which takes

00:03:03,919 --> 00:03:07,370
a callable object as a parameter this

00:03:05,780 --> 00:03:08,659
actually you cannot do it this is

00:03:07,370 --> 00:03:10,730
completely impossible with the current

00:03:08,659 --> 00:03:11,870
concepts yes which is extremely annoying

00:03:10,730 --> 00:03:13,819
because this was the first concept that

00:03:11,870 --> 00:03:16,879
I tried to write and apparently it was

00:03:13,819 --> 00:03:18,500
impossible so yeah there's no plans to

00:03:16,879 --> 00:03:20,120
actually do this and make this work

00:03:18,500 --> 00:03:21,919
although would be extremely useful so

00:03:20,120 --> 00:03:24,109
I'm not too I'm not too sad about

00:03:21,919 --> 00:03:26,209
concepts not making sepals 17 seems like

00:03:24,109 --> 00:03:27,319
it needs some more work and there's a

00:03:26,209 --> 00:03:30,099
lot of requirements as you can see

00:03:27,319 --> 00:03:30,099

YouTube URL: https://www.youtube.com/watch?v=H8HplZtVGT0


