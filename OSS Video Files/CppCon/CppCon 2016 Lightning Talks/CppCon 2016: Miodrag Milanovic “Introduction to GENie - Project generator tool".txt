Title: CppCon 2016: Miodrag Milanovic “Introduction to GENie - Project generator tool"
Publication date: 2016-10-08
Playlist: CppCon 2016 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:05,700
thank you everyone for coming I will

00:00:02,280 --> 00:00:09,090
give you a brief introduction to geni

00:00:05,700 --> 00:00:14,250
project generator tool that we are using

00:00:09,090 --> 00:00:17,970
on a main project first what is project

00:00:14,250 --> 00:00:21,359
generator it's a tool that creates

00:00:17,970 --> 00:00:24,570
projects for you essentially so it

00:00:21,359 --> 00:00:28,230
should be it should be a lightweight and

00:00:24,570 --> 00:00:31,529
fast and it should support portable

00:00:28,230 --> 00:00:36,600
features of various targets it should be

00:00:31,529 --> 00:00:40,320
easy to learn and extensible and what is

00:00:36,600 --> 00:00:43,770
Jenny Jenny is a project generator tool

00:00:40,320 --> 00:00:48,899
it automatically generates projects from

00:00:43,770 --> 00:00:51,750
Lua scripts and you can make it apply

00:00:48,899 --> 00:00:55,379
some settings on the multiple projects

00:00:51,750 --> 00:00:59,730
easily so initial version of Jenny

00:00:55,379 --> 00:01:03,300
projects is a fork of a premake 4.4 beta

00:00:59,730 --> 00:01:07,740
5 and there is no intention to keep

00:01:03,300 --> 00:01:12,869
compatibility with and reason for making

00:01:07,740 --> 00:01:16,259
a fork is that main distribution was not

00:01:12,869 --> 00:01:19,350
maintained and there was a need to add

00:01:16,259 --> 00:01:21,570
new support for new compilers and it is

00:01:19,350 --> 00:01:26,939
made by a group of people me included

00:01:21,570 --> 00:01:31,380
here and that's about it fourth why not

00:01:26,939 --> 00:01:34,409
see make you probably all some of you

00:01:31,380 --> 00:01:39,990
probably like see make but you do not

00:01:34,409 --> 00:01:42,390
like complex syntaxes and also to

00:01:39,990 --> 00:01:46,799
support some custom actions you need to

00:01:42,390 --> 00:01:52,350
be an expert to get it running and also

00:01:46,799 --> 00:01:57,590
it is easy to maintain but a hell to

00:01:52,350 --> 00:02:01,460
create initial configuration why Jenny

00:01:57,590 --> 00:02:04,290
it's simple to use and simple to learn

00:02:01,460 --> 00:02:07,290
it's easy extensible because it's

00:02:04,290 --> 00:02:10,640
created in Bua so you can basically add

00:02:07,290 --> 00:02:13,270
things you need inside the scripts and

00:02:10,640 --> 00:02:17,590
it's also support very

00:02:13,270 --> 00:02:21,030
project projects like fast build new

00:02:17,590 --> 00:02:25,050
make files ninja files Visual Studio

00:02:21,030 --> 00:02:29,500
almost all versions that are currently

00:02:25,050 --> 00:02:34,290
valid and also Xcode and who should you

00:02:29,500 --> 00:02:36,820
use Jenny it's targeted to the projects

00:02:34,290 --> 00:02:39,030
needing multiple types of project

00:02:36,820 --> 00:02:42,330
generated so for example if you are

00:02:39,030 --> 00:02:46,480
developing for the multiple platforms

00:02:42,330 --> 00:02:50,620
it's much easier for you to to get it

00:02:46,480 --> 00:02:52,690
running and it's targeted for people you

00:02:50,620 --> 00:02:57,580
having trouble to learn see make or

00:02:52,690 --> 00:02:59,410
similar tools it's also because there

00:02:57,580 --> 00:03:00,940
are some people that needs some

00:02:59,410 --> 00:03:04,560
additional things that are not available

00:03:00,940 --> 00:03:07,960
in C make or a hard hardly to be done

00:03:04,560 --> 00:03:12,040
where can you get it you can get it from

00:03:07,960 --> 00:03:15,180
this github link and also there is a

00:03:12,040 --> 00:03:18,520
documentation quite good one there and

00:03:15,180 --> 00:03:21,790
there are also binaries in a different

00:03:18,520 --> 00:03:24,550
wrapper but you have it all there for

00:03:21,790 --> 00:03:28,990
the three big platforms but you can

00:03:24,550 --> 00:03:33,280
always build it from the source and how

00:03:28,990 --> 00:03:36,550
do we start well initially it's loading

00:03:33,280 --> 00:03:39,400
it's checking for the existence of file

00:03:36,550 --> 00:03:42,790
called genic Lua in the scripts folder

00:03:39,400 --> 00:03:46,300
or in the same folder is the very you

00:03:42,790 --> 00:03:49,630
run the project and you then just open

00:03:46,300 --> 00:03:53,140
your favorite editor and type this this

00:03:49,630 --> 00:03:56,140
would be the initial code that you will

00:03:53,140 --> 00:03:58,690
mostly use in most project so you have a

00:03:56,140 --> 00:04:00,520
solution in which you will define the

00:03:58,690 --> 00:04:02,860
name of the solution that you wish to

00:04:00,520 --> 00:04:05,440
create it will be the corresponding to

00:04:02,860 --> 00:04:07,720
the visual studio solution you can

00:04:05,440 --> 00:04:10,450
define the configurations so for example

00:04:07,720 --> 00:04:12,970
debug and release and you can define the

00:04:10,450 --> 00:04:15,820
platforms on which you're running also

00:04:12,970 --> 00:04:20,260
the language because it supports c-sharp

00:04:15,820 --> 00:04:23,590
as well here is the example of a simple

00:04:20,260 --> 00:04:27,340
project which is a console application

00:04:23,590 --> 00:04:31,240
and you can see here project directory

00:04:27,340 --> 00:04:33,430
as as a variable this is all Lewis oh so

00:04:31,240 --> 00:04:37,960
you can easily extend what I really need

00:04:33,430 --> 00:04:40,449
and you have definition of include yours

00:04:37,960 --> 00:04:42,760
which you will like to use you have a

00:04:40,449 --> 00:04:46,690
files there and you have a specific rule

00:04:42,760 --> 00:04:49,120
for the configuration of the prodigy

00:04:46,690 --> 00:04:53,560
make which gives you for example here

00:04:49,120 --> 00:04:56,740
C++ 14 only if you wish to add the

00:04:53,560 --> 00:04:58,990
libraries it's easiest as well so you

00:04:56,740 --> 00:05:02,650
can just put the static clip there and

00:04:58,990 --> 00:05:06,160
it will be generating static lips also

00:05:02,650 --> 00:05:10,419
you have the predefined toolchains Lua

00:05:06,160 --> 00:05:14,380
file and which contains a lot of already

00:05:10,419 --> 00:05:17,400
defined targets so for example just to

00:05:14,380 --> 00:05:21,610
to create those files you will have this

00:05:17,400 --> 00:05:25,479
Genie and just add additional parameters

00:05:21,610 --> 00:05:28,210
to run it and who is using it and here

00:05:25,479 --> 00:05:31,600
is the list of the few projects that we

00:05:28,210 --> 00:05:33,550
have found using this so yeah that's

00:05:31,600 --> 00:05:35,320
about it and there are some questions

00:05:33,550 --> 00:05:37,919
you can find here after all

00:05:35,320 --> 00:05:37,919

YouTube URL: https://www.youtube.com/watch?v=_vArtdDTrTM


