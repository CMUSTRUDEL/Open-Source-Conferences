Title: Orbits - Sandeep Gupta [ CppCon 2016 ]
Publication date: 2016-10-08
Playlist: CppCon 2016 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
—
Optimized And Managed by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:01,520 --> 00:00:06,029
hi everyone so I'm going to be

00:00:03,929 --> 00:00:07,049
presenting on Orbitz they are

00:00:06,029 --> 00:00:08,880
essentially the second part of

00:00:07,049 --> 00:00:12,120
transformations and objects or we'll

00:00:08,880 --> 00:00:13,349
discuss them what they are and just a

00:00:12,120 --> 00:00:16,260
quick disclaimer I started preparing

00:00:13,349 --> 00:00:17,490
this at 11:00 in the night when Michael

00:00:16,260 --> 00:00:20,490
said that there are still open slots

00:00:17,490 --> 00:00:21,869
available all right so one of the things

00:00:20,490 --> 00:00:26,070
that I think someone mentioned yesterday

00:00:21,869 --> 00:00:28,800
was that if you are if yeah if if you

00:00:26,070 --> 00:00:30,029
are under 40 and you're still doing C++

00:00:28,800 --> 00:00:31,619
maybe you should reconsider your

00:00:30,029 --> 00:00:34,620
software cause you kind of thing and

00:00:31,619 --> 00:00:38,399
that was slightly unsettling because I'm

00:00:34,620 --> 00:00:39,899
27 that that implies that I have 13

00:00:38,399 --> 00:00:44,390
years in which every day I go through

00:00:39,899 --> 00:00:47,039
this and remember this code every time

00:00:44,390 --> 00:00:48,450
so that so the so the idea behind is

00:00:47,039 --> 00:00:50,010
basically you have to learn programming

00:00:48,450 --> 00:00:55,559
but you have to learn programming from a

00:00:50,010 --> 00:00:57,180
language oblivious point of view so this

00:00:55,559 --> 00:01:00,600
is my second disclaimer if you have read

00:00:57,180 --> 00:01:10,080
this book properly then your next four

00:01:00,600 --> 00:01:12,479
minutes are going to be but so so the

00:01:10,080 --> 00:01:15,210
the point of this lightning talk is that

00:01:12,479 --> 00:01:17,580
we have some common programming problems

00:01:15,210 --> 00:01:20,520
and we we should really drill down into

00:01:17,580 --> 00:01:21,869
what what makes those problems and what

00:01:20,520 --> 00:01:23,790
makes those problems interesting and

00:01:21,869 --> 00:01:26,130
maybe we can have final solutions an

00:01:23,790 --> 00:01:28,140
easier solution to towards things so

00:01:26,130 --> 00:01:30,150
yeah what's the most common programming

00:01:28,140 --> 00:01:31,530
interview question like ever like if you

00:01:30,150 --> 00:01:32,850
start preparing for programming

00:01:31,530 --> 00:01:35,400
interview what's the first thing that

00:01:32,850 --> 00:01:38,159
you see I think to me I think it's this

00:01:35,400 --> 00:01:39,720
thing and I'm sure that people who work

00:01:38,159 --> 00:01:44,070
at Microsoft they know that they have

00:01:39,720 --> 00:01:49,439
solved this all right so consider this

00:01:44,070 --> 00:01:51,329
as a linked list for people who are in

00:01:49,439 --> 00:01:53,250
southern hemisphere and do not know this

00:01:51,329 --> 00:01:55,140
this is actually also minor but I

00:01:53,250 --> 00:01:59,070
conveniently reused is that a linked

00:01:55,140 --> 00:02:00,920
list so one of the most common ways of

00:01:59,070 --> 00:02:03,119
solving this problem is that you have

00:02:00,920 --> 00:02:04,560
used to start with do pointers one of

00:02:03,119 --> 00:02:07,320
them is here one of them is total here

00:02:04,560 --> 00:02:08,970
moves faster than the total and this

00:02:07,320 --> 00:02:11,489
this works fine and the idea is that

00:02:08,970 --> 00:02:13,800
whenever they move if they meet at one

00:02:11,489 --> 00:02:16,380
point that means that the linked list

00:02:13,800 --> 00:02:18,450
which is we just fair enough but the

00:02:16,380 --> 00:02:19,620
idea is that this approach is like once

00:02:18,450 --> 00:02:21,810
you've solved this problem then it

00:02:19,620 --> 00:02:24,810
cannot be generalized further now think

00:02:21,810 --> 00:02:27,450
about this so you you you compose your

00:02:24,810 --> 00:02:29,220
linked list into this small into this

00:02:27,450 --> 00:02:30,989
mathematical construct so you have this

00:02:29,220 --> 00:02:34,500
handle size which is defined by edge and

00:02:30,989 --> 00:02:36,569
then you have the circle thing and you

00:02:34,500 --> 00:02:38,220
measure the length of that SC and you

00:02:36,569 --> 00:02:39,750
define these two points one of them is

00:02:38,220 --> 00:02:41,220
the point at where your head and total

00:02:39,750 --> 00:02:43,640
are going to meet and one of them is a

00:02:41,220 --> 00:02:46,680
connection point at which you actually

00:02:43,640 --> 00:02:48,390
will wear your circle starts so once you

00:02:46,680 --> 00:02:53,750
once you decompose your problem into

00:02:48,390 --> 00:02:56,550
this then it essentially becomes simple

00:02:53,750 --> 00:02:58,560
but the good thing about this is this is

00:02:56,550 --> 00:03:00,180
all high school algebra which everyone

00:02:58,560 --> 00:03:01,530
knows and it's completely language

00:03:00,180 --> 00:03:07,290
oblivious you do not have to learn

00:03:01,530 --> 00:03:09,420
anything of C++ or any other language so

00:03:07,290 --> 00:03:11,450
this is all of these concepts are

00:03:09,420 --> 00:03:14,370
formalized in elements of programming or

00:03:11,450 --> 00:03:16,260
so transformation is so so when you move

00:03:14,370 --> 00:03:17,610
from one step to another link one step

00:03:16,260 --> 00:03:20,070
one node in the linked list to another

00:03:17,610 --> 00:03:22,620
node you essentially transfer a pang of

00:03:20,070 --> 00:03:24,030
transformation to that node and for the

00:03:22,620 --> 00:03:30,650
linked list it is super easy you are

00:03:24,030 --> 00:03:33,900
just getting the next value and so I

00:03:30,650 --> 00:03:36,000
like a dilemma in the night then I I

00:03:33,900 --> 00:03:37,650
coded this like I I wrote all the

00:03:36,000 --> 00:03:41,459
equation and saw this so basically this

00:03:37,650 --> 00:03:43,590
is like can everyone see this so the

00:03:41,459 --> 00:03:47,370
essential idea is that you allocate a

00:03:43,590 --> 00:03:49,049
linked list and I'll just run this

00:03:47,370 --> 00:03:51,359
program and it will print the linked

00:03:49,049 --> 00:03:53,609
list first so this is a same simple

00:03:51,359 --> 00:03:55,920
linked list it does not have a loop I'll

00:03:53,609 --> 00:03:57,989
check whether it terminates and then I

00:03:55,920 --> 00:03:59,519
manually create the loop so basically

00:03:57,989 --> 00:04:03,859
what I did was I took the eightieth node

00:03:59,519 --> 00:04:07,400
and then assign that to 22nd node and

00:04:03,859 --> 00:04:10,290
then I check the loop again and then

00:04:07,400 --> 00:04:11,790
once I find the collision point and if I

00:04:10,290 --> 00:04:13,320
try to find the connection point

00:04:11,790 --> 00:04:14,820
connection point was the point where the

00:04:13,320 --> 00:04:18,060
loop where the circle actually starts

00:04:14,820 --> 00:04:19,919
and then once I have that then I try to

00:04:18,060 --> 00:04:23,820
find the handle size and I've tried to

00:04:19,919 --> 00:04:26,850
find the circle circle size so if I run

00:04:23,820 --> 00:04:28,680
this it runs

00:04:26,850 --> 00:04:30,920
very good actually so the it prints the

00:04:28,680 --> 00:04:34,410
list first which is like 1 2 98 and then

00:04:30,920 --> 00:04:36,690
it says list does not have a look

00:04:34,410 --> 00:04:39,210
obviously and then once we create the

00:04:36,690 --> 00:04:41,160
loop it says the loop is detected and it

00:04:39,210 --> 00:04:43,620
actually prints loop started at 22 and

00:04:41,160 --> 00:04:46,590
actually gives you all the decomposable

00:04:43,620 --> 00:04:49,410
parts that we had like 20 21 21 is like

00:04:46,590 --> 00:04:52,650
if you if your notice poignant 22 that

00:04:49,410 --> 00:04:54,660
means 2ne1 is the from 1 to 21 is your

00:04:52,650 --> 00:04:56,850
handle size and the loop or the circle

00:04:54,660 --> 00:05:00,360
size is 50:58 so it works pretty well

00:04:56,850 --> 00:05:02,160
and the the the the good thing is that I

00:05:00,360 --> 00:05:03,990
only had to implement one collision

00:05:02,160 --> 00:05:05,940
point and everything else is actually

00:05:03,990 --> 00:05:12,540
based on that so checks super super

00:05:05,940 --> 00:05:14,820
composable that is a that is because

00:05:12,540 --> 00:05:17,130
once you create a loop then you have

00:05:14,820 --> 00:05:19,490
essentially do not have any pointer

00:05:17,130 --> 00:05:22,680
towards the nodes that you have lost

00:05:19,490 --> 00:05:24,690
yeah so so that's basically the idea

00:05:22,680 --> 00:05:27,150
that you you understand the basic

00:05:24,690 --> 00:05:28,740
principles of doing things and do not

00:05:27,150 --> 00:05:30,720
rely on the language so I've started

00:05:28,740 --> 00:05:32,880
doing this in pub in practice as well

00:05:30,720 --> 00:05:36,260
this is actually a hello world program

00:05:32,880 --> 00:05:36,260

YouTube URL: https://www.youtube.com/watch?v=oJtSYKZWzx0


