Title: Combine Lambdas and weak_ptrs to make concurrency easy - Dan Higgins [ CppCon 2016 ]
Publication date: 2016-10-08
Playlist: CppCon 2016 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
—
Optimized And Managed by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:00,000 --> 00:00:04,710
first this is a quick topic on using

00:00:03,540 --> 00:00:06,420
lambdas and share pointers I'm gonna go

00:00:04,710 --> 00:00:08,280
pretty fast because I think most people

00:00:06,420 --> 00:00:10,230
understand kind of shared pointers and

00:00:08,280 --> 00:00:12,900
I'm just gonna new and there they

00:00:10,230 --> 00:00:16,049
actually change the way you design so

00:00:12,900 --> 00:00:17,550
it's a really big feature to the

00:00:16,049 --> 00:00:18,300
language so first I thought lambdas

00:00:17,550 --> 00:00:19,859
really ugly

00:00:18,300 --> 00:00:22,470
look it's like oh my god I don't want

00:00:19,859 --> 00:00:24,539
these like these code turds all over my

00:00:22,470 --> 00:00:26,070
codebase and it's just you know what's

00:00:24,539 --> 00:00:27,750
weird as arrow at the end like what's

00:00:26,070 --> 00:00:30,029
going on here but in the end it turns

00:00:27,750 --> 00:00:32,669
out to be super super powerful

00:00:30,029 --> 00:00:34,050
especially when you know some of the

00:00:32,669 --> 00:00:37,680
things I used to do by hand with like

00:00:34,050 --> 00:00:39,059
making a template struck that would take

00:00:37,680 --> 00:00:40,530
a pointer to a function that you could

00:00:39,059 --> 00:00:42,629
then call and all the stuffs went to

00:00:40,530 --> 00:00:45,149
like do what scope guard does which is

00:00:42,629 --> 00:00:46,920
basically putting code that you want to

00:00:45,149 --> 00:00:48,480
run when it goes out of scope to do

00:00:46,920 --> 00:00:50,160
things like cleaning up an exceptional

00:00:48,480 --> 00:00:51,710
safety and batch processing like right

00:00:50,160 --> 00:00:54,000
here like maybe I did something and I

00:00:51,710 --> 00:00:56,010
determine if I need to do a game engine

00:00:54,000 --> 00:00:57,719
update or something like that so I use

00:00:56,010 --> 00:00:59,730
scope card a lot watch it I didn't write

00:00:57,719 --> 00:01:02,670
it's out there Alexander Jessica who did

00:00:59,730 --> 00:01:05,250
a big PowerPoint thing on it and wrote

00:01:02,670 --> 00:01:07,920
it so go find it if you don't use it yet

00:01:05,250 --> 00:01:10,590
share pointers I think probably most

00:01:07,920 --> 00:01:12,510
people are familiar with its boost I'm a

00:01:10,590 --> 00:01:15,810
big fan of boost and so therefore it's

00:01:12,510 --> 00:01:17,850
C++ 11 I use them a lot of in fact I

00:01:15,810 --> 00:01:21,479
barely ever do new anymore

00:01:17,850 --> 00:01:22,799
and but you know it's using games it's

00:01:21,479 --> 00:01:24,900
using real-time products so don't be

00:01:22,799 --> 00:01:26,130
nervous about them but one tip is to

00:01:24,900 --> 00:01:28,080
make sure you use them make share

00:01:26,130 --> 00:01:31,950
because it makes it a more efficient use

00:01:28,080 --> 00:01:33,930
for a shared corner now where I really

00:01:31,950 --> 00:01:37,680
gets its fun is when I combine that the

00:01:33,930 --> 00:01:38,670
pointers and lambdas so if I would say

00:01:37,680 --> 00:01:40,500
want to do something and I wanted

00:01:38,670 --> 00:01:42,960
something in the future a little bit of

00:01:40,500 --> 00:01:44,369
work so normally you could take a lambda

00:01:42,960 --> 00:01:46,290
and it could run you can cue that

00:01:44,369 --> 00:01:47,939
function somewhere but you really need

00:01:46,290 --> 00:01:50,040
to validate code to make sure it can

00:01:47,939 --> 00:01:52,530
work so imagine like I have an object

00:01:50,040 --> 00:01:54,479
and I want to render it next frame

00:01:52,530 --> 00:01:55,979
I want that code to execute sometime a

00:01:54,479 --> 00:01:58,770
future without having to like keep track

00:01:55,979 --> 00:02:00,299
of it right so maybe I make a an object

00:01:58,770 --> 00:02:02,340
that takes a pointer to a function and

00:02:00,299 --> 00:02:03,689
then I I can you know right here on the

00:02:02,340 --> 00:02:06,000
X Q you can see I can just run the

00:02:03,689 --> 00:02:09,090
function right now this gets pretty cool

00:02:06,000 --> 00:02:11,849
when you apply it to when I can invoke

00:02:09,090 --> 00:02:13,900
it on a thread so for example I can take

00:02:11,849 --> 00:02:16,060
a piece of code I can say I want

00:02:13,900 --> 00:02:17,950
execute at you know ten millisecond the

00:02:16,060 --> 00:02:21,790
future 100 milliseconds future whenever

00:02:17,950 --> 00:02:23,290
I want to an or if I say execute right

00:02:21,790 --> 00:02:24,250
now I can do a check to make sure you in

00:02:23,290 --> 00:02:26,200
the right thread and if you're not

00:02:24,250 --> 00:02:28,329
dispatch it to the right thread so it

00:02:26,200 --> 00:02:31,000
can be executed an order so it's a

00:02:28,329 --> 00:02:32,290
really handy way for me to do

00:02:31,000 --> 00:02:34,060
concurrency without having to do a whole

00:02:32,290 --> 00:02:35,470
bunch of like all over the COBE like

00:02:34,060 --> 00:02:36,519
what thread my am i doing this and that

00:02:35,470 --> 00:02:38,319
and things like that I can just say you

00:02:36,519 --> 00:02:40,090
know what I know I have a bit of work I

00:02:38,319 --> 00:02:41,680
need them VOC it on that thread I'm in

00:02:40,090 --> 00:02:43,659
the networking thread and I need to like

00:02:41,680 --> 00:02:45,940
dispatch it over to the simulation

00:02:43,659 --> 00:02:48,159
thread or whatever it is this is really

00:02:45,940 --> 00:02:49,599
handy so the actual use of it looks more

00:02:48,159 --> 00:02:53,799
like this so with the weak pointer a

00:02:49,599 --> 00:02:56,139
weak pointer is does not hold on to an

00:02:53,799 --> 00:02:58,060
object to keep it in memory so basically

00:02:56,139 --> 00:02:59,950
you do something where you say like you

00:02:58,060 --> 00:03:02,590
check it and you say if this object is

00:02:59,950 --> 00:03:05,079
still alive and then I can use it so

00:03:02,590 --> 00:03:07,209
that's where you see the game object we

00:03:05,079 --> 00:03:09,040
call I get a share pointer of myself

00:03:07,209 --> 00:03:11,109
I'll invoke something on thread and the

00:03:09,040 --> 00:03:12,760
one here says like you know just make

00:03:11,109 --> 00:03:15,220
sure it doesn't occur right now even if

00:03:12,760 --> 00:03:16,870
you're on the same thread when this

00:03:15,220 --> 00:03:18,669
executes it will lock and make sure the

00:03:16,870 --> 00:03:21,579
object still exists and then it will do

00:03:18,669 --> 00:03:25,060
the rendering so super useful pattern to

00:03:21,579 --> 00:03:27,760
do all over the place in fact I turned

00:03:25,060 --> 00:03:30,370
my single-player game into a multiplayer

00:03:27,760 --> 00:03:33,040
game by using this type of this this

00:03:30,370 --> 00:03:34,870
methodology by simulating latency and

00:03:33,040 --> 00:03:36,699
lag by saying oh everything I'm gonna do

00:03:34,870 --> 00:03:39,190
I'm gonna take all us work and dispatch

00:03:36,699 --> 00:03:42,190
it as if it was to do in the future

00:03:39,190 --> 00:03:43,720
so another handy piece of the we're said

00:03:42,190 --> 00:03:45,459
one there and I did you know one

00:03:43,720 --> 00:03:47,620
millisecond you put random ranges so you

00:03:45,459 --> 00:03:50,729
can simulate problems so that's pretty

00:03:47,620 --> 00:03:50,729

YouTube URL: https://www.youtube.com/watch?v=fEnnmpdZllQ


