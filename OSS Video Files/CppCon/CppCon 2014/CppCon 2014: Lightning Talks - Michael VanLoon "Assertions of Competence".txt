Title: CppCon 2014: Lightning Talks - Michael VanLoon "Assertions of Competence"
Publication date: 2014-10-22
Playlist: CppCon 2014
Description: 
	http://www.cppcon.org
â€”
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014
--
I have been developing software for roughly 30 years. Yes, I started before I was born. I have been doing C++ for roughly 20 years, not very well at first, and slightly better now.

I work at F5 Networks, and have worked at Disney, VMware, Yahoo!, and Microsoft, among many others. I have benefited from a wide range of experience and personalities.

I have a personal grudge against code that does not strive to reach a high standard. I am dismayed at code that does not reach its potential. And I firmly believe that writing code well creates a better, more stable, more maintainable product.
--
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:05,330
next up we have Michael Van Loon who's

00:00:01,890 --> 00:00:05,330
been programming for over 30 years

00:00:05,870 --> 00:00:11,509
C++ for over 20 years which I like means

00:00:08,970 --> 00:00:13,980
he started before he was born

00:00:11,509 --> 00:00:16,109
currently he works for f5 networks and

00:00:13,980 --> 00:00:27,779
wants to show how you can be moderately

00:00:16,109 --> 00:00:32,040
confident when making assertions so I

00:00:27,779 --> 00:00:33,870
apologize this presentation was

00:00:32,040 --> 00:00:36,960
originally intended for a much more

00:00:33,870 --> 00:00:42,270
basic audience but I figured that Kate

00:00:36,960 --> 00:00:46,039
had a strategy here where she accepted a

00:00:42,270 --> 00:00:48,180
whole wide variety of presentations and

00:00:46,039 --> 00:00:53,039
somebody's got to bring up the other end

00:00:48,180 --> 00:00:55,309
right all right let's see if this shows

00:00:53,039 --> 00:00:55,309
up

00:01:00,129 --> 00:01:11,590
all right so what is an assert it's just

00:01:07,540 --> 00:01:15,460
to see something positively forcefully

00:01:11,590 --> 00:01:17,729
aggressively demonstrate existence when

00:01:15,460 --> 00:01:20,350
I can't talk about manhood

00:01:17,729 --> 00:01:22,479
the purpose of an asserts to validate

00:01:20,350 --> 00:01:25,810
input check for something happens every

00:01:22,479 --> 00:01:31,409
now and then I make dialogue box no

00:01:25,810 --> 00:01:36,270
maybe not asserts are to declare

00:01:31,409 --> 00:01:39,759
invariance or facts things that should

00:01:36,270 --> 00:01:43,659
really never actually happen

00:01:39,759 --> 00:01:46,119
the purpose of an assert is to say give

00:01:43,659 --> 00:01:49,420
an expectation that variable will never

00:01:46,119 --> 00:01:51,100
be a certain value or or a state will

00:01:49,420 --> 00:01:54,970
never happen

00:01:51,100 --> 00:01:56,530
and I see an expectation because we're

00:01:54,970 --> 00:01:58,630
writing complex code and you know

00:01:56,530 --> 00:02:01,149
sometimes you throw an assert in there

00:01:58,630 --> 00:02:05,259
just to see if my assumption really is

00:02:01,149 --> 00:02:08,229
true that that's okay you know if it's

00:02:05,259 --> 00:02:10,390
if it's there for a little while but but

00:02:08,229 --> 00:02:12,370
if an assert remains in your code really

00:02:10,390 --> 00:02:14,400
the the expectation is that it's

00:02:12,370 --> 00:02:16,870
something that should never ever happen

00:02:14,400 --> 00:02:20,739
the the cool thing about that of course

00:02:16,870 --> 00:02:23,170
is if we've achieved that state the

00:02:20,739 --> 00:02:26,859
assert can can stay there to help us

00:02:23,170 --> 00:02:31,870
reinforce that that assumption continues

00:02:26,859 --> 00:02:33,370
to be true in the future so great what

00:02:31,870 --> 00:02:36,940
are you know who cares what are they for

00:02:33,370 --> 00:02:42,609
who are they for they're there for you

00:02:36,940 --> 00:02:45,820
no no hold on the certs are for you guys

00:02:42,609 --> 00:02:50,019
they're for us the user never sees them

00:02:45,820 --> 00:02:52,359
or they shouldn't you know they're for

00:02:50,019 --> 00:02:53,739
and and they're not supposed to show up

00:02:52,359 --> 00:02:58,989
in the release builds if you're doing

00:02:53,739 --> 00:03:01,690
that properly so are they good for error

00:02:58,989 --> 00:03:04,180
checking well no the users never going

00:03:01,690 --> 00:03:07,690
to see them no they're not in the

00:03:04,180 --> 00:03:10,359
release code and no an error is

00:03:07,690 --> 00:03:13,040
something that you expect to happen an

00:03:10,359 --> 00:03:16,130
error is something that you handle

00:03:13,040 --> 00:03:19,040
an assert as is saying that something

00:03:16,130 --> 00:03:21,890
should never happen it's saying I don't

00:03:19,040 --> 00:03:24,850
expect this assert to ever be useful in

00:03:21,890 --> 00:03:27,320
a way so what happens when you assert

00:03:24,850 --> 00:03:29,810
I'm Unix your default behavior as you

00:03:27,320 --> 00:03:31,910
get a cig abort which makes your process

00:03:29,810 --> 00:03:33,860
and die and go away somewhat in

00:03:31,910 --> 00:03:37,280
gracefully and on Windows you get a

00:03:33,860 --> 00:03:39,680
little pop-up dialog box asking if you

00:03:37,280 --> 00:03:45,200
know you want to do something like debug

00:03:39,680 --> 00:03:48,310
it or you know make it go away so you

00:03:45,200 --> 00:03:51,470
know we know what's the use of that

00:03:48,310 --> 00:03:53,810
obviously it's something that you as a

00:03:51,470 --> 00:03:55,400
programmer can use but you know your end

00:03:53,810 --> 00:03:57,580
users aren't really gonna want to see

00:03:55,400 --> 00:04:01,970
that so much

00:03:57,580 --> 00:04:03,680
what about servers well ok that that's

00:04:01,970 --> 00:04:05,990
even a case that's a little bit further

00:04:03,680 --> 00:04:07,490
removed because on a server you might be

00:04:05,990 --> 00:04:10,400
sitting in a data center somewhere with

00:04:07,490 --> 00:04:12,410
a thousand virtual machines and and your

00:04:10,400 --> 00:04:13,760
system mins are all listening to how you

00:04:12,410 --> 00:04:15,590
know a service that goes away

00:04:13,760 --> 00:04:17,450
for no for no reason you got to go find

00:04:15,590 --> 00:04:19,310
the core dump you got to send it off to

00:04:17,450 --> 00:04:22,970
support and they got to figure out

00:04:19,310 --> 00:04:25,510
what's going on or on Windows you're on

00:04:22,970 --> 00:04:29,510
a headless server it has no monitor and

00:04:25,510 --> 00:04:31,100
in fact it has no desktop or at least

00:04:29,510 --> 00:04:32,750
not one that you can get to and there's

00:04:31,100 --> 00:04:34,040
a little dialog box they're sitting

00:04:32,750 --> 00:04:36,020
there waiting for you to click it to

00:04:34,040 --> 00:04:37,940
tell it what you want to do so your

00:04:36,020 --> 00:04:43,100
process doesn't even actually die it

00:04:37,940 --> 00:04:47,090
just kind of hangs alright so then if

00:04:43,100 --> 00:04:50,630
that's true how do we use them well

00:04:47,090 --> 00:04:53,150
let's see first one you know seems cool

00:04:50,630 --> 00:04:57,370
we're asserting that at this point in

00:04:53,150 --> 00:05:01,250
the code a certain state is always true

00:04:57,370 --> 00:05:02,870
sure what about number two we're certain

00:05:01,250 --> 00:05:05,540
that you know a certain point of the

00:05:02,870 --> 00:05:07,820
code and object is always valid

00:05:05,540 --> 00:05:11,060
it should never ever be invalid at this

00:05:07,820 --> 00:05:13,610
point in the code third one is not input

00:05:11,060 --> 00:05:15,530
it's say we have an algorithm and the

00:05:13,610 --> 00:05:18,290
output of that algorithm should always

00:05:15,530 --> 00:05:21,910
be within a certain range okay that

00:05:18,290 --> 00:05:21,910
seems like a safe a safe thing

00:05:22,940 --> 00:05:28,290
maybe maybe not the fourth one because

00:05:25,470 --> 00:05:31,490
we have no control over what our input

00:05:28,290 --> 00:05:34,170
stream might be you know it it's it's

00:05:31,490 --> 00:05:37,760
expected that we might get something

00:05:34,170 --> 00:05:39,720
that is invalid so we have to handle it

00:05:37,760 --> 00:05:43,910
number five

00:05:39,720 --> 00:05:43,910
that's not cool for multiple reasons

00:05:44,660 --> 00:05:48,120
obviously if we we have memory

00:05:47,010 --> 00:05:49,950
allocation problems it's going to throw

00:05:48,120 --> 00:05:53,390
an exception but even if somehow we

00:05:49,950 --> 00:05:55,500
disable that and we get a null pointer

00:05:53,390 --> 00:06:00,450
that's something you really need to

00:05:55,500 --> 00:06:01,740
handle not just you know assert and the

00:06:00,450 --> 00:06:03,540
bigger problem of course is that that

00:06:01,740 --> 00:06:05,070
assert goes away in release code and you

00:06:03,540 --> 00:06:09,270
don't have any app you know allocate an

00:06:05,070 --> 00:06:11,280
object so not cool at compile time

00:06:09,270 --> 00:06:12,870
there's static asserts I'm not going to

00:06:11,280 --> 00:06:16,320
really talk about those too much because

00:06:12,870 --> 00:06:18,030
I'm already over my five minutes and the

00:06:16,320 --> 00:06:23,010
cool thing on the windows thing is is

00:06:18,030 --> 00:06:24,630
the dialog box thing isn't necessary

00:06:23,010 --> 00:06:27,270
it's just the default behavior you can

00:06:24,630 --> 00:06:31,080
actually tell windows to assert to a

00:06:27,270 --> 00:06:34,020
file instead of your console or on linux

00:06:31,080 --> 00:06:36,990
write a little wrapper that can do that

00:06:34,020 --> 00:06:38,550
for you if there's so limited why do we

00:06:36,990 --> 00:06:42,330
use them because they're great they're

00:06:38,550 --> 00:06:44,310
self debugging code they help us say

00:06:42,330 --> 00:06:47,790
things that should never happen and find

00:06:44,310 --> 00:06:51,150
when they do other methodologies unit

00:06:47,790 --> 00:06:54,080
tests things like that

00:06:51,150 --> 00:06:56,550
I'm concluding because I'm over time but

00:06:54,080 --> 00:06:58,740
the things that I want to stress as well

00:06:56,550 --> 00:07:00,240
as is they're not your only tool use

00:06:58,740 --> 00:07:02,310
your unit tests and use your debug

00:07:00,240 --> 00:07:06,120
testing and use your brain think about

00:07:02,310 --> 00:07:11,150
your code add the asserts as an extra

00:07:06,120 --> 00:07:11,150
tool but use them and there we go

00:07:14,569 --> 00:07:16,629

YouTube URL: https://www.youtube.com/watch?v=kvlaUHHAsAc


