Title: CppCon 2014: Lightning Talks - Julian Smith "Introduction to Undodb"
Publication date: 2014-10-22
Playlist: CppCon 2014
Description: 
	http://www.cppcon.org
â€”
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014
--
Julian Smith is co-founder and Software Architect at Undo Software. He holds a physics degree from Oxford University and a Ph.D. in cognitive psychology from the University of Edinburgh. Along with co-founder and CEO Greg Law, Julian designed and developed Undo's patented record-and-rewind functionality. Julian is also an accomplished violin, viola and baroque violin player and a keen cyclist.
--
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:05,580
so tonight we have our first eight

00:00:02,360 --> 00:00:07,109
lightning talkers and it's kind of a

00:00:05,580 --> 00:00:09,000
surprise you'll find out as each person

00:00:07,109 --> 00:00:11,519
comes up what they want to talk about so

00:00:09,000 --> 00:00:13,889
stick around because there's all kinds

00:00:11,519 --> 00:00:15,540
of different diverse best thing about

00:00:13,889 --> 00:00:18,869
this whole week is everything's so

00:00:15,540 --> 00:00:21,990
different so first we have Julian Smith

00:00:18,869 --> 00:00:25,320
or are you Julian what's here

00:00:21,990 --> 00:00:27,750
there you go come on up Julian I like

00:00:25,320 --> 00:00:30,179
this author of an unsuccessful proposal

00:00:27,750 --> 00:00:32,189
to add multi methods to C++ ten years

00:00:30,179 --> 00:00:35,040
ago and still carries the scars from

00:00:32,189 --> 00:00:37,260
writing a crude C++ parser for the

00:00:35,040 --> 00:00:39,090
example implementation but now he's

00:00:37,260 --> 00:00:41,579
co-founded undo software and he works on

00:00:39,090 --> 00:00:45,690
record and replay debugging technology

00:00:41,579 --> 00:00:47,640
so you have 15 minutes on this clock all

00:00:45,690 --> 00:00:50,960
right knock them out that looks that

00:00:47,640 --> 00:00:50,960
Mike is live for you thank you

00:01:01,190 --> 00:01:08,540
yeah great I can't see it on that screen

00:01:08,720 --> 00:01:14,460
okay

00:01:09,950 --> 00:01:18,180
odd isn't it great thank you everybody

00:01:14,460 --> 00:01:20,940
so yes I work for undie software as well

00:01:18,180 --> 00:01:23,970
as making lanyards we write a reversible

00:01:20,940 --> 00:01:25,649
debugger so I'll just give you a quick

00:01:23,970 --> 00:01:30,950
demo of what a reversible debugger looks

00:01:25,649 --> 00:01:33,020
like so here's a very simple program

00:01:30,950 --> 00:01:36,570
thank you

00:01:33,020 --> 00:01:39,030
so we're gonna run it and we'll stop at

00:01:36,570 --> 00:01:41,729
beginning a mane here we are thinking of

00:01:39,030 --> 00:01:42,960
mind how we could step forwards in the

00:01:41,729 --> 00:01:48,050
normal way and you can see these values

00:01:42,960 --> 00:01:50,429
here changing as we as we step forward

00:01:48,050 --> 00:01:52,440
and because it's a reversible debugger

00:01:50,429 --> 00:01:54,360
we can go backwards so I can click this

00:01:52,440 --> 00:01:56,580
button here and we come back and you'll

00:01:54,360 --> 00:01:59,190
notice these values taking restoring

00:01:56,580 --> 00:02:01,049
back to their original values and in

00:01:59,190 --> 00:02:03,030
particular if you look at said that

00:02:01,049 --> 00:02:04,320
contains a sort of a random value when

00:02:03,030 --> 00:02:07,229
the program started off and that's being

00:02:04,320 --> 00:02:10,679
restored so you can go back as forwards

00:02:07,229 --> 00:02:14,549
as much as you like and that's a

00:02:10,679 --> 00:02:18,180
reversal debugger so we've been going

00:02:14,549 --> 00:02:22,410
sort of maybe 9 or 10 years it was

00:02:18,180 --> 00:02:23,790
founded I mean Greg law and we thought

00:02:22,410 --> 00:02:29,070
about what you've got 10 people now in

00:02:23,790 --> 00:02:31,920
Cambridge and me in Oxford in the UK and

00:02:29,070 --> 00:02:39,060
various customers as you can see on that

00:02:31,920 --> 00:02:40,320
slide so the first will you buggers well

00:02:39,060 --> 00:02:41,070
I'll see you they let you step backwards

00:02:40,320 --> 00:02:44,940
as well as forwards

00:02:41,070 --> 00:02:46,500
I guess anybody's programmed a compiled

00:02:44,940 --> 00:02:48,720
language will have used a debugger at

00:02:46,500 --> 00:02:50,370
some point and you've had the problem

00:02:48,720 --> 00:02:52,950
way something goes wrong you putting the

00:02:50,370 --> 00:02:55,470
debugger you stop somewhere you single

00:02:52,950 --> 00:02:56,700
set forward and ah you single step too

00:02:55,470 --> 00:02:59,609
far you want to go back again and go

00:02:56,700 --> 00:03:01,980
back into a function call debugging is

00:02:59,609 --> 00:03:03,530
really frustrating so with the reversal

00:03:01,980 --> 00:03:06,209
debugger all those problems go away

00:03:03,530 --> 00:03:07,950
because you got a bit more do you want

00:03:06,209 --> 00:03:09,420
you just go back and you can go back as

00:03:07,950 --> 00:03:12,140
far as many times as you like and home

00:03:09,420 --> 00:03:15,599
in homing

00:03:12,140 --> 00:03:17,280
so I'm going to give a couple of very

00:03:15,599 --> 00:03:19,590
very simple examples today but actually

00:03:17,280 --> 00:03:21,420
our software is used on very compute

00:03:19,590 --> 00:03:23,849
complicated software projects with

00:03:21,420 --> 00:03:26,060
massive programs with loads of memory

00:03:23,849 --> 00:03:30,209
lots of shared memory all sorts of

00:03:26,060 --> 00:03:32,340
heavyweight sort of programming and one

00:03:30,209 --> 00:03:36,510
thing should be clear it's for compiled

00:03:32,340 --> 00:03:42,739
code on Linux doesn't work on Mac OS or

00:03:36,510 --> 00:03:44,639
Windows there's an interesting quote

00:03:42,739 --> 00:03:47,159
which we particularly like from

00:03:44,639 --> 00:03:50,159
Kernighan and pike which is about

00:03:47,159 --> 00:03:53,099
niversity bugging which is - it's all

00:03:50,159 --> 00:03:54,359
about solving a bug is like solving a

00:03:53,099 --> 00:03:56,400
murder mystery you've got the end state

00:03:54,359 --> 00:03:58,290
you've got the dead body you don't know

00:03:56,400 --> 00:04:00,510
what happened before before before the

00:03:58,290 --> 00:04:01,560
body was killed with debugging it's the

00:04:00,510 --> 00:04:03,120
same thing you've got the end state you

00:04:01,560 --> 00:04:04,230
got a core file or perhaps you in the

00:04:03,120 --> 00:04:05,730
debugger you've got the stage of the

00:04:04,230 --> 00:04:09,480
program right now you don't know what

00:04:05,730 --> 00:04:10,859
happened in the past so under DP gives

00:04:09,480 --> 00:04:16,979
you a rewind button and we think it's

00:04:10,859 --> 00:04:18,510
like CCTV for your code so I'm just

00:04:16,979 --> 00:04:22,380
going to give you a slightly more

00:04:18,510 --> 00:04:24,710
complicated example just to give you an

00:04:22,380 --> 00:04:28,349
idea of how reverse debugging can

00:04:24,710 --> 00:04:30,599
simplify life so we've got a base toy

00:04:28,349 --> 00:04:32,310
program got a cache

00:04:30,599 --> 00:04:35,340
it's the cache of the square roots of

00:04:32,310 --> 00:04:36,419
8-bit values and there's a hundred

00:04:35,340 --> 00:04:38,490
entries in the cache we've got a

00:04:36,419 --> 00:04:39,870
function but enough to forgive me for

00:04:38,490 --> 00:04:43,110
going a bit quickly here cos only got 15

00:04:39,870 --> 00:04:45,180
minutes a cache calculate function which

00:04:43,110 --> 00:04:46,530
given a value he looks in the look seed

00:04:45,180 --> 00:04:48,659
up in the cache if it's there it turns

00:04:46,530 --> 00:04:51,150
it otherwise it populates a couple of

00:04:48,659 --> 00:04:54,690
adjacent entries in the cache and return

00:04:51,150 --> 00:04:57,020
and then returns a square root so that's

00:04:54,690 --> 00:04:59,520
a obvious simple toy example but it's

00:04:57,020 --> 00:05:01,169
sort of character that we all use in

00:04:59,520 --> 00:05:04,130
programs that would cash values in some

00:05:01,169 --> 00:05:06,630
sort of data structure in memory and

00:05:04,130 --> 00:05:08,130
this is not deliberate error obviously

00:05:06,630 --> 00:05:09,840
normally we don't have deliberate errors

00:05:08,130 --> 00:05:12,050
but it but errors and this sort of cache

00:05:09,840 --> 00:05:15,659
sort of data structure are not uncommon

00:05:12,050 --> 00:05:17,909
and indeed with this program we'll be

00:05:15,659 --> 00:05:20,610
running a test on one for everyone today

00:05:17,909 --> 00:05:21,510
until until it either assert fails or

00:05:20,610 --> 00:05:25,010
carries on forever

00:05:21,510 --> 00:05:25,010
and if I run it

00:05:27,389 --> 00:05:33,610
here we go we've hit that cert so

00:05:31,180 --> 00:05:37,979
basically we've called Kat calculate is

00:05:33,610 --> 00:05:40,689
returning value of square root of zero

00:05:37,979 --> 00:05:42,699
but actually you should have been

00:05:40,689 --> 00:05:44,050
fifteen we're trying to cut the Catholic

00:05:42,699 --> 00:05:46,990
square root of two by five in integer

00:05:44,050 --> 00:05:49,599
arithmetic so calculated on the wrong

00:05:46,990 --> 00:05:51,610
thing so what we can do with reverse

00:05:49,599 --> 00:05:54,669
debugger we set a breakpoint there we're

00:05:51,610 --> 00:05:57,750
deep inside a certain moment we can go

00:05:54,669 --> 00:06:03,789
back to that break point and then go

00:05:57,750 --> 00:06:05,650
reverse step upwards and at this point

00:06:03,789 --> 00:06:08,469
we're going to reverse step into cached

00:06:05,650 --> 00:06:11,949
calculator here we go

00:06:08,469 --> 00:06:13,539
at the end of cache calculate we're

00:06:11,949 --> 00:06:19,560
going to go back and see where see

00:06:13,539 --> 00:06:22,060
what's happened okay so it looks like

00:06:19,560 --> 00:06:24,460
cash calculators found the value in the

00:06:22,060 --> 00:06:29,620
cash next we're turning from the cash so

00:06:24,460 --> 00:06:32,469
what's the value 255 an eye is ninety

00:06:29,620 --> 00:06:36,279
and because I've run east demo before I

00:06:32,469 --> 00:06:37,900
already have it preset up so cash

00:06:36,279 --> 00:06:39,909
element ninety says if that the square

00:06:37,900 --> 00:06:44,110
root of 255 is zero well that's clearly

00:06:39,909 --> 00:06:45,849
wrong so what do we do well normally

00:06:44,110 --> 00:06:48,339
uribe stock because that happened in the

00:06:45,849 --> 00:06:49,960
past that cash that element in the cash

00:06:48,339 --> 00:06:52,569
was corrupted we don't know when we

00:06:49,960 --> 00:06:54,399
don't know what code did it but with the

00:06:52,569 --> 00:06:57,580
reverse debugger we got a rather neat

00:06:54,399 --> 00:07:06,339
little trick we're going to set a watch

00:06:57,580 --> 00:07:09,370
point on cash element ninety value and

00:07:06,339 --> 00:07:11,300
add that and then we're going to run

00:07:09,370 --> 00:07:13,910
backwards

00:07:11,300 --> 00:07:16,700
I'm gonna run backwards to the most the

00:07:13,910 --> 00:07:19,100
time when that cash mo was modified so

00:07:16,700 --> 00:07:22,070
reverse continue there you go and here

00:07:19,100 --> 00:07:27,580
we are back in cash calculate in the

00:07:22,070 --> 00:07:30,950
past and well let's see what's going on

00:07:27,580 --> 00:07:35,000
aha well value 2 is minus 1 so we know

00:07:30,950 --> 00:07:37,010
something's gone wrong one thing you can

00:07:35,000 --> 00:07:38,720
do if you want to you can actually look

00:07:37,010 --> 00:07:40,760
at cash out of an 19 getting corrupted

00:07:38,720 --> 00:07:43,040
at the moment it has 40 + 6 which is in

00:07:40,760 --> 00:07:45,590
an intuitive mythity keys okay if we

00:07:43,040 --> 00:07:48,950
step forwards you can see it getting

00:07:45,590 --> 00:07:50,990
corrupted it now contains 255 and 0 okay

00:07:48,950 --> 00:07:53,600
so well you some of you might have

00:07:50,990 --> 00:07:55,520
spotted what's gone wrong but just for

00:07:53,600 --> 00:08:00,290
fun we're gonna try and find out why is

00:07:55,520 --> 00:08:02,980
about you two got value minus one so

00:08:00,290 --> 00:08:06,650
we'll set another watch point on value 2

00:08:02,980 --> 00:08:09,820
and we'll run backwards and not

00:08:06,650 --> 00:08:12,950
surprisingly it's in this loop here so

00:08:09,820 --> 00:08:16,550
what's happened is Valley value itself

00:08:12,950 --> 00:08:19,910
is 0 we're looping from value minus 1 so

00:08:16,550 --> 00:08:20,960
this bug is the loop he's trying to find

00:08:19,910 --> 00:08:23,330
the negative square root of a negative

00:08:20,960 --> 00:08:25,880
number so square root has returned some

00:08:23,330 --> 00:08:29,270
ridiculous value and it's corrupting the

00:08:25,880 --> 00:08:31,130
cash so hopefully you'll be able to see

00:08:29,270 --> 00:08:33,020
that you know this sort of technology is

00:08:31,130 --> 00:08:34,690
kind of useful in this sort of problem

00:08:33,020 --> 00:08:37,010
but more generally this sort of

00:08:34,690 --> 00:08:39,520
especially back as watch points are just

00:08:37,010 --> 00:08:39,520
so powerful

00:08:42,489 --> 00:08:49,059
so I guess one of the key things about

00:08:45,910 --> 00:08:51,670
undo TV is that we've worked very hard

00:08:49,059 --> 00:08:53,290
on performance obviously in the toy

00:08:51,670 --> 00:08:55,779
programs I've just been showing it

00:08:53,290 --> 00:08:57,489
doesn't really mean much but actually

00:08:55,779 --> 00:09:02,829
even with big programs we're pretty good

00:08:57,489 --> 00:09:04,569
at speed so we don't store the result of

00:09:02,829 --> 00:09:06,730
every single instruction because that

00:09:04,569 --> 00:09:09,040
would be gigabytes of data per second so

00:09:06,730 --> 00:09:09,999
instead we do is we we know the

00:09:09,040 --> 00:09:11,949
computers generally run

00:09:09,999 --> 00:09:13,989
deterministically forwards so we make

00:09:11,949 --> 00:09:15,819
snapshots and then to go backwards we

00:09:13,989 --> 00:09:18,790
actually go back to snapshot and run

00:09:15,819 --> 00:09:20,649
forwards replaying any non-deterministic

00:09:18,790 --> 00:09:22,569
input so if your program when it ran the

00:09:20,649 --> 00:09:26,470
first time read some data from a socket

00:09:22,569 --> 00:09:28,839
we store that data so that when we

00:09:26,470 --> 00:09:30,850
replay we can replicate what the

00:09:28,839 --> 00:09:33,730
original read did and we do that for all

00:09:30,850 --> 00:09:35,049
system calls because the system calls

00:09:33,730 --> 00:09:36,759
can modify memory in all sorts of

00:09:35,049 --> 00:09:37,989
different ways and we basically we we

00:09:36,759 --> 00:09:41,019
know about every single system called in

00:09:37,989 --> 00:09:44,110
Linux and we store and replay what they

00:09:41,019 --> 00:09:46,480
all do we also have to deal with threats

00:09:44,110 --> 00:09:49,439
which is and signals and shared memory

00:09:46,480 --> 00:09:51,429
all those things like that

00:09:49,439 --> 00:09:54,309
and as an indication of the speed

00:09:51,429 --> 00:09:55,509
there's a GDP has a sort of thing called

00:09:54,309 --> 00:09:59,980
process record which is a very simple

00:09:55,509 --> 00:10:01,540
reverse debugging system but it isn't

00:09:59,980 --> 00:10:06,040
really comparable as you can see from

00:10:01,540 --> 00:10:08,170
these timings so this is running gzip on

00:10:06,040 --> 00:10:11,230
a 16 megabyte file as you can see with

00:10:08,170 --> 00:10:14,549
undo DB it's about half the speed and it

00:10:11,230 --> 00:10:16,929
uses some extra memory and with gdb

00:10:14,549 --> 00:10:18,459
you've got it run takes all day and it

00:10:16,929 --> 00:10:21,699
takes gigabytes tens of gigabytes of

00:10:18,459 --> 00:10:22,959
memory so if you have to plug in G Z T

00:10:21,699 --> 00:10:25,059
to be processed record unfortunately

00:10:22,959 --> 00:10:26,799
it's just not helpful with on GDP you

00:10:25,059 --> 00:10:28,389
can actually run it in the debugger

00:10:26,799 --> 00:10:31,889
running backwards and figure out what's

00:10:28,389 --> 00:10:31,889
gone wrong really easily

00:10:34,089 --> 00:10:36,760
I won't bore you with this I what I see

00:10:36,010 --> 00:10:40,210
you maybe I will

00:10:36,760 --> 00:10:43,120
uh-huh the thing about debugging is we

00:10:40,210 --> 00:10:44,740
all think we don't need to do it and we

00:10:43,120 --> 00:10:46,650
all tell ourselves with pretty good at

00:10:44,740 --> 00:10:49,050
writing code that does mouth bugs I

00:10:46,650 --> 00:10:52,390
certainly know I write code lots of bugs

00:10:49,050 --> 00:10:55,480
the demo I gave earlier along earlier on

00:10:52,390 --> 00:10:56,770
Greg asked me to write the code because

00:10:55,480 --> 00:11:00,070
he thought I was good at lighting bugs I

00:10:56,770 --> 00:11:02,650
think so yeah we all like bugs and it

00:11:00,070 --> 00:11:04,839
takes enormous much at that time it

00:11:02,650 --> 00:11:07,720
takes enormous amounts of money in our

00:11:04,839 --> 00:11:10,510
wages it affects the reputation of the

00:11:07,720 --> 00:11:11,950
companies we work for in in ways we

00:11:10,510 --> 00:11:14,260
don't really want to think about so any

00:11:11,950 --> 00:11:18,460
any improvement in how you can fix bugs

00:11:14,260 --> 00:11:20,680
and address the problems is is really

00:11:18,460 --> 00:11:22,690
really important so to that end a

00:11:20,680 --> 00:11:26,160
personal debug I think could make quite

00:11:22,690 --> 00:11:26,160
a difference to many many people

00:11:26,730 --> 00:11:32,560
so I'll just sort of finish up now so we

00:11:29,920 --> 00:11:36,339
work on unmodified Linux we don't need

00:11:32,560 --> 00:11:39,580
any fentanyl patches we don't need any

00:11:36,339 --> 00:11:43,450
recompilation we only do the reverse and

00:11:39,580 --> 00:11:45,400
the reverse of the cauldron be play

00:11:43,450 --> 00:11:46,660
engine we don't do the simple lookup and

00:11:45,400 --> 00:11:48,880
things we leave that to another debugger

00:11:46,660 --> 00:11:53,380
in the example you were seeing that was

00:11:48,880 --> 00:11:55,060
um as gdb with a k' gdb front end but we

00:11:53,380 --> 00:11:56,860
work with the total of you debug goes

00:11:55,060 --> 00:12:01,450
where the way the replay engine in total

00:11:56,860 --> 00:12:06,279
view and in armes ds5 debugging suite so

00:12:01,450 --> 00:12:08,140
we don't get involved in the symbols so

00:12:06,279 --> 00:12:10,120
you don't need to recompile anything and

00:12:08,140 --> 00:12:11,410
as a slide says we work on thread the

00:12:10,120 --> 00:12:17,760
signal shared memory all that sort of

00:12:11,410 --> 00:12:19,779
thing so as well as effect the first

00:12:17,760 --> 00:12:21,310
example of what we're we good at is

00:12:19,779 --> 00:12:22,690
effects manifesting themselves a long

00:12:21,310 --> 00:12:25,750
time after above that's that's sort of

00:12:22,690 --> 00:12:26,890
the cash example it's also a useful when

00:12:25,750 --> 00:12:29,020
you get a problem that only occurs very

00:12:26,890 --> 00:12:30,760
occasionally if a problem that occurs

00:12:29,020 --> 00:12:32,860
every say 1,000 times you run the

00:12:30,760 --> 00:12:34,209
program it's very difficult debug to

00:12:32,860 --> 00:12:35,620
debug using a normal debugger because

00:12:34,209 --> 00:12:37,420
you've done it a thousand times you

00:12:35,620 --> 00:12:39,130
eventually catch with me debugger then

00:12:37,420 --> 00:12:40,480
you run it you think oh I meant to set a

00:12:39,130 --> 00:12:41,950
breakpoint at that function and they go

00:12:40,480 --> 00:12:44,320
to run it another thousand times to kind

00:12:41,950 --> 00:12:45,670
of catch the bug again with a reversible

00:12:44,320 --> 00:12:46,579
debugger you catch it once and you're

00:12:45,670 --> 00:12:48,889
done you can go

00:12:46,579 --> 00:12:50,980
for as much as you like also you can

00:12:48,889 --> 00:12:53,269
investigate unfamiliar code bases

00:12:50,980 --> 00:12:54,259
figuring out who called this why do they

00:12:53,269 --> 00:12:58,009
call it and go backwards and forwards

00:12:54,259 --> 00:13:00,019
really really really useful and aside

00:12:58,009 --> 00:13:01,910
from that as you saw we had watch points

00:13:00,019 --> 00:13:04,160
you can attach to existing processes and

00:13:01,910 --> 00:13:05,749
it's a it's a basically replace from the

00:13:04,160 --> 00:13:07,970
command-line replacement for TTP so you

00:13:05,749 --> 00:13:10,100
can use it in Eclipse or Emacs or

00:13:07,970 --> 00:13:13,970
whatever other debugging environment you

00:13:10,100 --> 00:13:15,850
would like to use and then this finally

00:13:13,970 --> 00:13:18,079
we have a new product which we're

00:13:15,850 --> 00:13:21,319
getting close to releasing now called

00:13:18,079 --> 00:13:23,389
the flight recorder where you link our

00:13:21,319 --> 00:13:26,059
engine into your code ship it to a

00:13:23,389 --> 00:13:28,790
customer it runs on the customer site

00:13:26,059 --> 00:13:32,600
and at the customers control they can

00:13:28,790 --> 00:13:34,790
tell it to start recording then if it

00:13:32,600 --> 00:13:36,439
goes wrong they can save the recording

00:13:34,790 --> 00:13:39,529
to a file they ship the file back to you

00:13:36,439 --> 00:13:41,929
I'm quite big you might need a few DVDs

00:13:39,529 --> 00:13:43,610
and then you can use reversible

00:13:41,929 --> 00:13:45,709
debugging on that file to figure out

00:13:43,610 --> 00:13:47,209
what happened at the customer site so

00:13:45,709 --> 00:13:48,619
you don't have to be you don't have to

00:13:47,209 --> 00:13:51,699
reproduce bugs you don't have to depend

00:13:48,619 --> 00:13:54,049
on customers giving you a detailed but

00:13:51,699 --> 00:13:56,449
example of how to reproduce what they

00:13:54,049 --> 00:14:00,079
did to cause a problem

00:13:56,449 --> 00:14:01,999
so that's our technology and it's it's

00:14:00,079 --> 00:14:02,449
quite exciting I hope you found it

00:14:01,999 --> 00:14:04,929
interesting

00:14:02,449 --> 00:14:04,929

YouTube URL: https://www.youtube.com/watch?v=j-wT3DdSvIw


