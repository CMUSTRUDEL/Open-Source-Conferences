Title: Organizational Leadership with Modern C++ -  Kevin Kostrzewa & Johm Wyman [ CppCon 2015 ]
Publication date: 2015-10-12
Playlist: CppCon 2015
Description: 
	http://www.Cppcon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015
—
With the "C++ Renaissance" it is imperative that the technical leadership prove their mettle to lead a large organization into adopting modern practices and idioms. 

In this talk, John and Kevin will discuss various techniques that they have employed to help drive their large development organization (~ 75 software engineers) towards a culture of modernization - some techniques that have worked well, and some that have not. 

This will not be a discussion on specifics and nuances of the language. This is more a "fuzzy" discussion on what it means to be both at the forefront of the language and a leader / champion for your peers.
— 
Kevin Kostrzewa:  My first piece of published software was in 1983, on a Commodore 64, published in Commodore Power/Play magazine. I have been a professional programmer since 1992 working for Thomson Reuters (originally Creative Solutions) working initially in C/DOS and now primarily in C++/Windows.

John Wyman: I have been working at Thomson Reuters (then Creative Solutions) since 1999. There I develop a US Tax application that contains modules for most conceivable forms of US Tax. US Tax makes for a dynamic code base and a strong desire for efficiency, making C++ our tool of choice.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
—
Optimized And Managed by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:00,000 --> 00:00:04,920
good morning thanks very much for

00:00:02,669 --> 00:00:07,109
attending my name is Kevin cast Reva and

00:00:04,920 --> 00:00:09,330
I'm a software engineer with Thomson

00:00:07,109 --> 00:00:12,960
Reuters along with my colleague John

00:00:09,330 --> 00:00:15,750
Wyman we both have an affinity for C++

00:00:12,960 --> 00:00:20,390
and especially modern C++ having

00:00:15,750 --> 00:00:24,060
programmed in C++ since the early 1990s

00:00:20,390 --> 00:00:26,310
there is a necessity for any multi

00:00:24,060 --> 00:00:28,349
developer project to have technical

00:00:26,310 --> 00:00:30,390
leadership SAT a development culture

00:00:28,349 --> 00:00:32,809
it's tough to find metrics on this

00:00:30,390 --> 00:00:35,100
static analysis can't be done on culture

00:00:32,809 --> 00:00:36,960
what we try to do is find things that

00:00:35,100 --> 00:00:38,730
work for our group in our situation if

00:00:36,960 --> 00:00:41,070
they work we keep doing them if they

00:00:38,730 --> 00:00:42,750
don't we don't in some ways it's as

00:00:41,070 --> 00:00:44,460
simple as that some of the things that

00:00:42,750 --> 00:00:47,399
we talked about today may work for your

00:00:44,460 --> 00:00:48,989
situation some may not we'd like to take

00:00:47,399 --> 00:00:51,390
our energy and provide leadership back

00:00:48,989 --> 00:00:53,190
to our organization around C++ which

00:00:51,390 --> 00:00:55,469
we'll talk a little bit about today I

00:00:53,190 --> 00:00:57,660
should note that there really won't be

00:00:55,469 --> 00:01:00,270
much around code examples this is not

00:00:57,660 --> 00:01:03,120
about nuances in language and specific

00:01:00,270 --> 00:01:05,519
advances in modern C++ it's more about

00:01:03,120 --> 00:01:07,409
ways that we communicate modern C++ to

00:01:05,519 --> 00:01:09,479
our developers in the interest of

00:01:07,409 --> 00:01:12,000
keeping them current engaged and

00:01:09,479 --> 00:01:14,280
generating quality code the standards

00:01:12,000 --> 00:01:16,350
committee has modernized C++ every

00:01:14,280 --> 00:01:18,600
iteration increases the languages

00:01:16,350 --> 00:01:20,250
capabilities but it also increases the

00:01:18,600 --> 00:01:22,590
overhead of keeping a development staff

00:01:20,250 --> 00:01:24,689
current it out dates prior approaches to

00:01:22,590 --> 00:01:26,880
problems for example old idioms around

00:01:24,689 --> 00:01:28,710
not returning large objects compared

00:01:26,880 --> 00:01:31,350
with move semantics allowing greater

00:01:28,710 --> 00:01:33,689
penalty-free compositions of expressions

00:01:31,350 --> 00:01:35,040
the good news is changes from the

00:01:33,689 --> 00:01:37,770
standards committee are improvements

00:01:35,040 --> 00:01:39,869
they either help to produce more durable

00:01:37,770 --> 00:01:41,340
efficient or easier written code also

00:01:39,869 --> 00:01:43,079
the standards committee is kind enough

00:01:41,340 --> 00:01:45,420
to not break our code with these changes

00:01:43,079 --> 00:01:47,369
the challenges is that technical

00:01:45,420 --> 00:01:49,229
leadership responsibility to help

00:01:47,369 --> 00:01:51,090
modernize our development organizations

00:01:49,229 --> 00:01:53,310
so we can reap the performance

00:01:51,090 --> 00:01:55,290
readability and resilience benefits that

00:01:53,310 --> 00:01:57,030
come with for us no matter how good of

00:01:55,290 --> 00:01:59,340
developers we try to be we represent

00:01:57,030 --> 00:02:01,560
less than four percent of our code churn

00:01:59,340 --> 00:02:04,560
and we like that other 96% to be

00:02:01,560 --> 00:02:06,360
high-quality we're presenting this as a

00:02:04,560 --> 00:02:08,879
case study this is our development

00:02:06,360 --> 00:02:10,890
organization in our culture there are

00:02:08,879 --> 00:02:12,750
two important pieces to understand in

00:02:10,890 --> 00:02:13,890
the context of where we're at the

00:02:12,750 --> 00:02:16,410
history of our

00:02:13,890 --> 00:02:18,750
a shin combined with the history of C++

00:02:16,410 --> 00:02:20,340
the former may or may not overlap with

00:02:18,750 --> 00:02:23,640
your development situation but obviously

00:02:20,340 --> 00:02:25,860
the latter is is shared now some

00:02:23,640 --> 00:02:27,540
background on us are our context we

00:02:25,860 --> 00:02:30,630
currently develop a business application

00:02:27,540 --> 00:02:35,130
in C++ for microsoft windows which was

00:02:30,630 --> 00:02:37,560
started in C on ms-dos currently

00:02:35,130 --> 00:02:40,830
developed on a Microsoft stack the whole

00:02:37,560 --> 00:02:44,580
thing we're using a visual studio TFS we

00:02:40,830 --> 00:02:48,209
run on Windows desktop we have about 75

00:02:44,580 --> 00:02:49,530
developers and a hundred and about a

00:02:48,209 --> 00:02:52,320
hundred seventy-five total development

00:02:49,530 --> 00:02:55,050
staff with about 11 million lines of

00:02:52,320 --> 00:02:56,940
code and were developed out of Ann Arbor

00:02:55,050 --> 00:02:59,640
Michigan which is a great developer

00:02:56,940 --> 00:03:03,450
community but not quite not quite

00:02:59,640 --> 00:03:05,310
coastal combine that with the

00:03:03,450 --> 00:03:08,190
information that most of you already

00:03:05,310 --> 00:03:11,130
know where C++ keeps changing on a more

00:03:08,190 --> 00:03:15,360
and more accelerated timeline from 1983

00:03:11,130 --> 00:03:19,140
to 1998 with few changes to 2003 also

00:03:15,360 --> 00:03:23,090
with few changes to 2007 now we get reg

00:03:19,140 --> 00:03:27,590
ex smart pointers hash tables 2 2011

00:03:23,090 --> 00:03:33,000
lambdas lambdas everywhere to 2014

00:03:27,590 --> 00:03:35,850
eventually 2017 and beyond combining

00:03:33,000 --> 00:03:38,459
those two contexts we get more features

00:03:35,850 --> 00:03:40,170
but more problems we're back to the

00:03:38,459 --> 00:03:42,299
original problem how are we going to

00:03:40,170 --> 00:03:44,280
lead our staff to effectively use the

00:03:42,299 --> 00:03:47,430
new features that are available we're

00:03:44,280 --> 00:03:50,430
making modernizations on 11 million line

00:03:47,430 --> 00:03:54,000
of code code base B come with a

00:03:50,430 --> 00:03:55,530
technical debt and legacy Coast legacy

00:03:54,000 --> 00:03:58,530
code that we've amassed over the years

00:03:55,530 --> 00:04:01,440
that very much becomes turning the oil

00:03:58,530 --> 00:04:03,329
tanker for us now obviously we're

00:04:01,440 --> 00:04:05,910
speaking to our own applications into

00:04:03,329 --> 00:04:08,310
our own context but and we're sure that

00:04:05,910 --> 00:04:11,400
you face other challenges this is a

00:04:08,310 --> 00:04:13,680
fuzzy subject few right answers but we

00:04:11,400 --> 00:04:17,100
sincerely hope you get value out of our

00:04:13,680 --> 00:04:18,840
own personal case study in putting

00:04:17,100 --> 00:04:20,190
together this talk we try to group our

00:04:18,840 --> 00:04:22,440
experiences into different

00:04:20,190 --> 00:04:25,080
classifications of how we try to provide

00:04:22,440 --> 00:04:26,729
leadership for many of you none of this

00:04:25,080 --> 00:04:27,190
will be surprising information and

00:04:26,729 --> 00:04:29,050
honestly

00:04:27,190 --> 00:04:30,280
none of this is earth-shattering it's

00:04:29,050 --> 00:04:32,650
likely you're going to hear a lot of

00:04:30,280 --> 00:04:35,950
this a lot of what we say and say you

00:04:32,650 --> 00:04:37,960
know of course but creating a taxonomy

00:04:35,950 --> 00:04:40,930
here serves as a useful exercise in

00:04:37,960 --> 00:04:44,590
thinking about how we go back in to our

00:04:40,930 --> 00:04:45,880
organizations and leave with C++ we've

00:04:44,590 --> 00:04:47,440
grouped our experience into five

00:04:45,880 --> 00:04:49,480
different classifications and we'd like

00:04:47,440 --> 00:04:51,550
to present them in the abstract around

00:04:49,480 --> 00:04:53,830
value along with tangible examples of

00:04:51,550 --> 00:04:56,140
how we've tried to address them we hope

00:04:53,830 --> 00:04:58,810
those tangible examples raise ideas for

00:04:56,140 --> 00:05:01,630
your own development context John yeah

00:04:58,810 --> 00:05:03,880
thank you thank you Kevin the first

00:05:01,630 --> 00:05:05,970
section that we chose to break out our

00:05:03,880 --> 00:05:07,990
presentation is to educate yourself

00:05:05,970 --> 00:05:09,130
educate yourself is probably the most

00:05:07,990 --> 00:05:11,500
straightforward and the most obvious

00:05:09,130 --> 00:05:14,290
thing obviously everybody who's here

00:05:11,500 --> 00:05:15,820
puts in an effort to do this you've

00:05:14,290 --> 00:05:18,280
taken the effort that come to cpp can

00:05:15,820 --> 00:05:21,610
you try to stay current and you're aware

00:05:18,280 --> 00:05:25,630
of the movement and the committee in New

00:05:21,610 --> 00:05:27,360
I so what they do with the ISO but so

00:05:25,630 --> 00:05:29,560
this is a bit of preaching to the choir

00:05:27,360 --> 00:05:31,090
keep it personal knowledge current stay

00:05:29,560 --> 00:05:33,340
current we're on the Microsoft stack

00:05:31,090 --> 00:05:36,340
Microsoft has a wonderful video magazine

00:05:33,340 --> 00:05:38,290
on their channel 9 that we frequent to

00:05:36,340 --> 00:05:41,950
get information on the tool chain that

00:05:38,290 --> 00:05:43,390
we use also attending attending

00:05:41,950 --> 00:05:46,180
convention if you can't attend

00:05:43,390 --> 00:05:49,960
convention the the YouTube CPP can't

00:05:46,180 --> 00:05:52,030
videos have proved to be a great a great

00:05:49,960 --> 00:05:54,120
reference and a great source of

00:05:52,030 --> 00:05:58,030
information for our development staff

00:05:54,120 --> 00:06:00,040
and right at our CPP is also a fabulous

00:05:58,030 --> 00:06:02,440
source of information you don't have to

00:06:00,040 --> 00:06:05,169
be a key contributor to to to frequent

00:06:02,440 --> 00:06:07,120
reddit our CBP Kevin and I are more of

00:06:05,169 --> 00:06:10,600
lurkers but there is a tremendous amount

00:06:07,120 --> 00:06:13,500
of information there that that we find

00:06:10,600 --> 00:06:15,850
valuable keeping yourself yourself

00:06:13,500 --> 00:06:17,710
current is the first step in keeping

00:06:15,850 --> 00:06:20,440
your development organization current

00:06:17,710 --> 00:06:21,520
that seems very obvious but current

00:06:20,440 --> 00:06:24,190
leadership makes for a corner

00:06:21,520 --> 00:06:27,040
organization and having current or

00:06:24,190 --> 00:06:29,740
heaven current leadership is the first

00:06:27,040 --> 00:06:31,810
step to making good design decisions for

00:06:29,740 --> 00:06:36,700
the short term as well as for the long

00:06:31,810 --> 00:06:40,030
term but your education cannot be in a

00:06:36,700 --> 00:06:40,990
vacuum what we learn means much more if

00:06:40,030 --> 00:06:44,230
the information is

00:06:40,990 --> 00:06:45,430
across our development staff how do we

00:06:44,230 --> 00:06:47,650
accomplish that what are the what are

00:06:45,430 --> 00:06:49,300
the steps that we take to ensure that

00:06:47,650 --> 00:06:51,610
information that we gather is

00:06:49,300 --> 00:06:55,180
disseminated amongst our amongst our

00:06:51,610 --> 00:06:59,790
staff our tangible example is going to

00:06:55,180 --> 00:07:02,860
be our attendance of this conference

00:06:59,790 --> 00:07:06,160
this conference provides access to the

00:07:02,860 --> 00:07:07,510
luminaries of the C++ community what do

00:07:06,160 --> 00:07:08,950
we do with that access what do we do

00:07:07,510 --> 00:07:12,040
with that information how do we gather

00:07:08,950 --> 00:07:14,140
that and bring it back to our people how

00:07:12,040 --> 00:07:17,170
do we use this to our organizations

00:07:14,140 --> 00:07:21,070
advantage the first thing that we did is

00:07:17,170 --> 00:07:22,840
we we have we spread word to senior in

00:07:21,070 --> 00:07:27,310
leadership amongst our amongst our

00:07:22,840 --> 00:07:28,690
developers about about attendance we use

00:07:27,310 --> 00:07:32,770
that and we ask for input regarding

00:07:28,690 --> 00:07:34,750
session attendance we circulate the list

00:07:32,770 --> 00:07:36,130
of sessions perhaps or something that

00:07:34,750 --> 00:07:39,100
they've seen something about something

00:07:36,130 --> 00:07:40,690
that they think could be of a valued or

00:07:39,100 --> 00:07:44,020
development organization down the line

00:07:40,690 --> 00:07:46,840
and even if there is no input from the

00:07:44,020 --> 00:07:49,300
senior and leads developers you still

00:07:46,840 --> 00:07:52,060
raise topic awareness they've still read

00:07:49,300 --> 00:07:54,970
session descriptions they've still seen

00:07:52,060 --> 00:07:56,260
what's going on awareness is a very very

00:07:54,970 --> 00:07:59,650
valuable thing in the development

00:07:56,260 --> 00:08:01,990
organization then how do we bring this

00:07:59,650 --> 00:08:03,670
home when we were at cpp con last year

00:08:01,990 --> 00:08:06,070
Kevin I this is a question that we asked

00:08:03,670 --> 00:08:07,420
each other how are we going to use this

00:08:06,070 --> 00:08:09,130
to the advantage not to our advantage

00:08:07,420 --> 00:08:11,830
but to the advantage of our of our

00:08:09,130 --> 00:08:15,070
development organization and we came up

00:08:11,830 --> 00:08:19,210
with a semi in formal semi-formal trip

00:08:15,070 --> 00:08:20,680
report trip report as parameters we need

00:08:19,210 --> 00:08:24,790
to have section and included information

00:08:20,680 --> 00:08:26,560
for each topic that we attend we have to

00:08:24,790 --> 00:08:28,600
look at the topic in the short term in

00:08:26,560 --> 00:08:30,700
the long term is this something that we

00:08:28,600 --> 00:08:33,280
should allocate resources for

00:08:30,700 --> 00:08:35,020
immediately honor on our staff is this

00:08:33,280 --> 00:08:39,000
something that will never map to our

00:08:35,020 --> 00:08:42,070
space but it's just cool and we also

00:08:39,000 --> 00:08:43,570
when we're giving up sessions we put in

00:08:42,070 --> 00:08:45,730
a concerted effort to not attend the

00:08:43,570 --> 00:08:47,620
same sessions there's going to be about

00:08:45,730 --> 00:08:49,750
20 blocks when we're here for us to see

00:08:47,620 --> 00:08:51,640
sessions and if we go to the same

00:08:49,750 --> 00:08:54,160
sessions will see 20 things and if we go

00:08:51,640 --> 00:08:54,529
to different sessions will see a 40

00:08:54,160 --> 00:08:56,749
thing

00:08:54,529 --> 00:09:00,019
keynotes withstanding it's going to be a

00:08:56,749 --> 00:09:02,660
little less than that and then when we

00:09:00,019 --> 00:09:04,850
return the trip report is presented to

00:09:02,660 --> 00:09:07,850
lead programmers in our in our regularly

00:09:04,850 --> 00:09:09,470
programmer meeting we talk about each

00:09:07,850 --> 00:09:12,199
session we talk about things that we

00:09:09,470 --> 00:09:13,959
find valuable and things that might be

00:09:12,199 --> 00:09:16,519
more of a long term interest to our

00:09:13,959 --> 00:09:19,959
organization it also serves a second

00:09:16,519 --> 00:09:22,189
purpose and that our leads meeting is

00:09:19,959 --> 00:09:24,110
recorded it has notes and it's made

00:09:22,189 --> 00:09:25,999
publicly available are not publicly

00:09:24,110 --> 00:09:29,629
available but it's available internally

00:09:25,999 --> 00:09:34,100
to our entire development staff for the

00:09:29,629 --> 00:09:35,990
spreading of information thanks in

00:09:34,100 --> 00:09:37,100
addition to technical leaders carrying

00:09:35,990 --> 00:09:38,899
this information back to the

00:09:37,100 --> 00:09:40,879
organization is also a need for all

00:09:38,899 --> 00:09:42,800
developers to feel responsible for their

00:09:40,879 --> 00:09:46,129
own education and creating a development

00:09:42,800 --> 00:09:48,559
culture and support of that we live in a

00:09:46,129 --> 00:09:50,720
world where access to computing

00:09:48,559 --> 00:09:52,610
educational resources is available to

00:09:50,720 --> 00:09:53,870
anyone with an internet connection the

00:09:52,610 --> 00:09:55,579
biggest challenge can be awareness

00:09:53,870 --> 00:09:57,920
across a group particularly around

00:09:55,579 --> 00:09:59,750
junior tenured staff we also have

00:09:57,920 --> 00:10:00,889
challenges on applying the knowledge how

00:09:59,750 --> 00:10:03,139
to map the knowledge gained around

00:10:00,889 --> 00:10:05,180
modern C++ into our application domain

00:10:03,139 --> 00:10:06,949
it's easy enough for all of our

00:10:05,180 --> 00:10:09,259
developers to see immediate value in

00:10:06,949 --> 00:10:12,769
range based for loops but for a lot of

00:10:09,259 --> 00:10:16,790
developers techniques like snae not so

00:10:12,769 --> 00:10:18,439
much creating a culture around self

00:10:16,790 --> 00:10:20,120
education has an appeal to our

00:10:18,439 --> 00:10:21,949
management as well as it's a low cost

00:10:20,120 --> 00:10:23,839
solution that allows self-motivated

00:10:21,949 --> 00:10:26,149
people to get individual specialties as

00:10:23,839 --> 00:10:27,920
they are interested it also helps keep

00:10:26,149 --> 00:10:30,769
our developers engaged more engaged

00:10:27,920 --> 00:10:33,199
developers equals increased staff

00:10:30,769 --> 00:10:35,540
retention equals higher quality product

00:10:33,199 --> 00:10:37,639
so what have we implemented to create a

00:10:35,540 --> 00:10:40,910
culture around self education and how

00:10:37,639 --> 00:10:43,009
does it relate to modern C++ first off

00:10:40,910 --> 00:10:44,839
what we whatever we do we have to be

00:10:43,009 --> 00:10:47,839
respectful of our business and release

00:10:44,839 --> 00:10:49,309
cycle which for us is is yearly we're in

00:10:47,839 --> 00:10:51,350
an industry we're missing our shipping

00:10:49,309 --> 00:10:53,959
deadlines means that we're out of

00:10:51,350 --> 00:10:55,459
business well that's tough what's nice

00:10:53,959 --> 00:10:57,709
about that is we have a good

00:10:55,459 --> 00:11:00,370
understanding of when we're going to be

00:10:57,709 --> 00:11:03,410
in crunch time and when we're not

00:11:00,370 --> 00:11:05,179
because it can all be crunch time so a

00:11:03,410 --> 00:11:08,060
few ways that we've been effective at

00:11:05,179 --> 00:11:11,540
using that cycle around our culture

00:11:08,060 --> 00:11:15,380
has been taking a weekly meeting of the

00:11:11,540 --> 00:11:17,330
technical leads which is mostly around

00:11:15,380 --> 00:11:18,850
discussion of the business needs for the

00:11:17,330 --> 00:11:21,380
release cycle and things like that

00:11:18,850 --> 00:11:22,820
during our natural yearly downtime we

00:11:21,380 --> 00:11:24,590
have the ability to repurpose that

00:11:22,820 --> 00:11:27,320
meeting as a place to educate each other

00:11:24,590 --> 00:11:29,780
or bring in staff to present any work on

00:11:27,320 --> 00:11:31,370
interesting side projects this has

00:11:29,780 --> 00:11:33,350
worked well for us because everybody's

00:11:31,370 --> 00:11:35,060
are you got a time commitment for it and

00:11:33,350 --> 00:11:37,730
it doesn't require extra coordination

00:11:35,060 --> 00:11:40,940
around scheduling it is a essentially we

00:11:37,730 --> 00:11:43,520
have this this meeting held in an open

00:11:40,940 --> 00:11:47,750
and transparent manner of we very much

00:11:43,520 --> 00:11:50,180
like transparency one thing we did to

00:11:47,750 --> 00:11:52,700
some good effect was dole out micro

00:11:50,180 --> 00:11:55,340
assignments during this downtime we

00:11:52,700 --> 00:11:57,920
assign pairs of developers leads and

00:11:55,340 --> 00:11:59,720
juniors of video reviews this is a small

00:11:57,920 --> 00:12:02,060
time commitment for the developers to

00:11:59,720 --> 00:12:05,420
watch an hour hour-and-a-half lecture

00:12:02,060 --> 00:12:06,830
and present a report at our weekly leads

00:12:05,420 --> 00:12:08,750
meeting on their findings and what they

00:12:06,830 --> 00:12:12,040
feel is relevant to our day-to-day work

00:12:08,750 --> 00:12:13,940
if any CPP cons YouTube channel

00:12:12,040 --> 00:12:16,460
Microsoft's build conference were

00:12:13,940 --> 00:12:18,380
excellent resources here we've reaped a

00:12:16,460 --> 00:12:21,190
benefit from this in the self education

00:12:18,380 --> 00:12:23,420
culture like promoting the use of auto

00:12:21,190 --> 00:12:25,190
readability through range based for

00:12:23,420 --> 00:12:27,440
loops better and more consistent

00:12:25,190 --> 00:12:30,200
container usage like preferring stood

00:12:27,440 --> 00:12:34,070
vector in almost all cases and solving

00:12:30,200 --> 00:12:36,380
more problems with our AI I more of a

00:12:34,070 --> 00:12:38,960
macro assignment during this downtime is

00:12:36,380 --> 00:12:41,570
review of our tooling compiler versions

00:12:38,960 --> 00:12:44,210
and library versions especially around

00:12:41,570 --> 00:12:46,220
compiler versions as new C++ features

00:12:44,210 --> 00:12:48,050
are available we've tried to coordinate

00:12:46,220 --> 00:12:49,850
the migration efforts with some pushes

00:12:48,050 --> 00:12:52,910
of the developers working on this to do

00:12:49,850 --> 00:12:55,580
exploration and self-education for

00:12:52,910 --> 00:12:57,950
example as stood in is a list became

00:12:55,580 --> 00:12:59,930
supported by our compiler the developers

00:12:57,950 --> 00:13:02,080
doing the compiler migration refactor

00:12:59,930 --> 00:13:04,820
some old mutable containers that used

00:13:02,080 --> 00:13:07,160
individual element insert into Const

00:13:04,820 --> 00:13:09,590
containers with a construction stood

00:13:07,160 --> 00:13:10,970
initializer list parameter in places

00:13:09,590 --> 00:13:15,110
where we really could use a Const

00:13:10,970 --> 00:13:17,720
container for better code quality we

00:13:15,110 --> 00:13:20,000
have found that self-education does

00:13:17,720 --> 00:13:21,360
break down sometimes in that advanced

00:13:20,000 --> 00:13:23,910
concepts aren't always

00:13:21,360 --> 00:13:25,829
easily map to your problem space even

00:13:23,910 --> 00:13:27,959
when they can be effective we've had a

00:13:25,829 --> 00:13:30,209
few occasions to try to spread the

00:13:27,959 --> 00:13:32,660
knowledge around more virally by

00:13:30,209 --> 00:13:36,120
starting developers off on a

00:13:32,660 --> 00:13:39,209
implementation as an example s fen AE or

00:13:36,120 --> 00:13:41,220
enable if compile time techniques can be

00:13:39,209 --> 00:13:43,019
seen as interesting mental exercises but

00:13:41,220 --> 00:13:46,560
not necessarily part of our application

00:13:43,019 --> 00:13:49,620
domain over the past year we had a need

00:13:46,560 --> 00:13:51,959
to Jason serialized deep collections of

00:13:49,620 --> 00:13:54,450
arbitrary data types all known at

00:13:51,959 --> 00:13:56,940
compile time rather than solve that

00:13:54,450 --> 00:13:59,040
using a brittle custom solution or rtti

00:13:56,940 --> 00:14:01,649
we let the compiler do the heavy lifting

00:13:59,040 --> 00:14:05,339
and figure out the JSON structure for us

00:14:01,649 --> 00:14:07,950
at compile time via sve enable if

00:14:05,339 --> 00:14:10,320
template functions that were enabled

00:14:07,950 --> 00:14:11,579
against container type we found that

00:14:10,320 --> 00:14:13,500
this was not only an effective way to

00:14:11,579 --> 00:14:15,180
solve the problem but it served as a way

00:14:13,500 --> 00:14:17,100
to drive the utility of this technique

00:14:15,180 --> 00:14:19,589
home showing that it is actually

00:14:17,100 --> 00:14:21,029
relevant to us junior developers

00:14:19,589 --> 00:14:22,940
involved in this project now have

00:14:21,029 --> 00:14:25,320
another tool for approaching problems

00:14:22,940 --> 00:14:26,699
but just like the first section this is

00:14:25,320 --> 00:14:31,410
not complete until knowledge is shared

00:14:26,699 --> 00:14:35,220
with the rest of the staff John thank

00:14:31,410 --> 00:14:36,180
you Kevin the next next one is going to

00:14:35,220 --> 00:14:38,130
be another one that sounds very

00:14:36,180 --> 00:14:40,980
straightforward encourage you some best

00:14:38,130 --> 00:14:44,790
practices you sub X practices as we're

00:14:40,980 --> 00:14:46,740
talking about it here extends from more

00:14:44,790 --> 00:14:49,170
more code based things to talk about as

00:14:46,740 --> 00:14:53,279
much just as much as process based

00:14:49,170 --> 00:14:56,760
things things that help to align the

00:14:53,279 --> 00:14:58,019
solution space with problem space make

00:14:56,760 --> 00:15:00,060
sure that the developers know the

00:14:58,019 --> 00:15:02,010
correct tools for solving for solving

00:15:00,060 --> 00:15:04,589
recurring problems inside of our inside

00:15:02,010 --> 00:15:05,940
of our domain space and make sure that

00:15:04,589 --> 00:15:07,920
they understand them so that they can

00:15:05,940 --> 00:15:11,040
map the next set of solutions to the

00:15:07,920 --> 00:15:12,899
problems it also creates a staff that is

00:15:11,040 --> 00:15:14,670
self-sufficient people who are capable

00:15:12,899 --> 00:15:16,860
of answering their own problems and it

00:15:14,670 --> 00:15:21,360
helps to produce staff that is self

00:15:16,860 --> 00:15:23,370
starters having similar problems having

00:15:21,360 --> 00:15:26,519
similar problems solved in similar way

00:15:23,370 --> 00:15:29,220
by all developers makes for easier

00:15:26,519 --> 00:15:32,130
development easy it makes it easier for

00:15:29,220 --> 00:15:35,760
developers to switch tasks it makes it

00:15:32,130 --> 00:15:38,130
easier for developers to get spun up on

00:15:35,760 --> 00:15:42,690
buddy else's work it also lowers the

00:15:38,130 --> 00:15:44,370
cost of onboarding new developers the

00:15:42,690 --> 00:15:46,800
next section that we've placed here is

00:15:44,370 --> 00:15:48,840
your style guide if you want to watch a

00:15:46,800 --> 00:15:51,060
wonderful video on style guide you can

00:15:48,840 --> 00:15:53,730
watch the CPP con 14 video I'm not going

00:15:51,060 --> 00:15:56,430
to go too in depth on it sufficient to

00:15:53,730 --> 00:15:59,190
say that we find the style guide to be a

00:15:56,430 --> 00:16:02,610
very valuable resource of ours our first

00:15:59,190 --> 00:16:04,230
step was to adopt style guide we started

00:16:02,610 --> 00:16:07,170
with the Google style guide it's

00:16:04,230 --> 00:16:08,640
probably the everybody's favorite place

00:16:07,170 --> 00:16:10,830
to start but it doesn't always map

00:16:08,640 --> 00:16:12,300
directly to what what you try to do

00:16:10,830 --> 00:16:14,490
inside of your organization so our

00:16:12,300 --> 00:16:17,220
second step was to make the style guide

00:16:14,490 --> 00:16:20,670
your own that required a lot of pruning

00:16:17,220 --> 00:16:23,310
it required a lot of adding things but

00:16:20,670 --> 00:16:26,700
we felt like we streamlined it and made

00:16:23,310 --> 00:16:28,710
it map to our specific problem space our

00:16:26,700 --> 00:16:31,710
API and our approach to our industry

00:16:28,710 --> 00:16:33,510
problems and the third is to make your

00:16:31,710 --> 00:16:35,700
style guide a continuing conversation

00:16:33,510 --> 00:16:38,220
when our style guide was released we

00:16:35,700 --> 00:16:39,720
released it in a way that made it very

00:16:38,220 --> 00:16:42,060
clear that it was not a voice on a hill

00:16:39,720 --> 00:16:44,160
coming down to the people it is not

00:16:42,060 --> 00:16:46,740
written in stone it is written in beat

00:16:44,160 --> 00:16:48,420
it's written in bits and that makes it a

00:16:46,740 --> 00:16:50,010
continuing conversation amongst our

00:16:48,420 --> 00:16:53,130
whole development staff everybody has

00:16:50,010 --> 00:16:55,050
access everybody has access to new

00:16:53,130 --> 00:16:57,180
suggestions for things to remove for

00:16:55,050 --> 00:17:00,000
things to add for modifications to

00:16:57,180 --> 00:17:01,890
specific items inside of it this is done

00:17:00,000 --> 00:17:05,060
in a public way and it is a conversation

00:17:01,890 --> 00:17:08,220
that involves all of development and

00:17:05,060 --> 00:17:09,930
lastly refactoring across our 11 million

00:17:08,220 --> 00:17:13,170
lines of code was difficult it was very

00:17:09,930 --> 00:17:14,940
difficult most developers don't have the

00:17:13,170 --> 00:17:17,339
entire code base local to their machine

00:17:14,940 --> 00:17:20,370
it doesn't make sense most people work

00:17:17,339 --> 00:17:22,680
in very specific areas so if you want to

00:17:20,370 --> 00:17:25,890
search across the whole code base what

00:17:22,680 --> 00:17:27,959
was our solution our solution was a

00:17:25,890 --> 00:17:30,330
network share of the entire code base on

00:17:27,959 --> 00:17:34,470
it and brute force searches against it

00:17:30,330 --> 00:17:36,720
that was a deterrent to doing due

00:17:34,470 --> 00:17:39,480
diligence on large code changes and it

00:17:36,720 --> 00:17:42,900
led to problems across our development

00:17:39,480 --> 00:17:46,950
groups we did it with brute force until

00:17:42,900 --> 00:17:48,960
we got on the open grok got on the Open

00:17:46,950 --> 00:17:49,620
Graph train now the same searches that

00:17:48,960 --> 00:17:51,600
were taking

00:17:49,620 --> 00:17:53,970
minutes with the brute force are handled

00:17:51,600 --> 00:17:56,610
on a vm that's supplied to us by our

00:17:53,970 --> 00:18:01,620
DevOps team and are in the order of a

00:17:56,610 --> 00:18:04,520
second our last section is email where

00:18:01,620 --> 00:18:07,610
good information goes today there's

00:18:04,520 --> 00:18:10,380
plenty of plenty of stories about people

00:18:07,610 --> 00:18:12,450
either either your outlook groups

00:18:10,380 --> 00:18:14,460
retention policy removing something that

00:18:12,450 --> 00:18:16,500
you wanted to use having to maintain a

00:18:14,460 --> 00:18:19,290
local set of PST's of information not

00:18:16,500 --> 00:18:21,690
CC'ing the right people on an email and

00:18:19,290 --> 00:18:23,700
it also makes it difficult it's a

00:18:21,690 --> 00:18:26,520
counterproductive to the transparency

00:18:23,700 --> 00:18:28,440
that we seek so explore email

00:18:26,520 --> 00:18:30,590
alternatives we use an internal social

00:18:28,440 --> 00:18:34,140
media site for critical conversations

00:18:30,590 --> 00:18:36,540
place where everybody is implicitly

00:18:34,140 --> 00:18:42,240
included and has a voice to contribute

00:18:36,540 --> 00:18:44,970
to a solution we also have wiki for for

00:18:42,240 --> 00:18:47,460
for documenting end points and things

00:18:44,970 --> 00:18:49,590
that we use usually very technical

00:18:47,460 --> 00:18:52,080
things that don't shift critical

00:18:49,590 --> 00:18:54,840
decisions in our in our group must be

00:18:52,080 --> 00:18:57,090
transparent and publicly documented this

00:18:54,840 --> 00:19:00,440
raises awareness and spurs conversation

00:18:57,090 --> 00:19:02,730
in our development group thanks as a

00:19:00,440 --> 00:19:05,309
doppelgänger to the previous section we

00:19:02,730 --> 00:19:08,040
also try to prevent the creation of

00:19:05,309 --> 00:19:09,690
fragile solutions fragile code can be a

00:19:08,040 --> 00:19:11,490
maintenance or debugging nightmare and

00:19:09,690 --> 00:19:13,920
frequently not just for the author but

00:19:11,490 --> 00:19:16,110
for others working around that code code

00:19:13,920 --> 00:19:17,790
that utilizes bad libraries or aspects

00:19:16,110 --> 00:19:20,250
of libraries that proved to be buggy can

00:19:17,790 --> 00:19:21,240
be just as much of a nightmare a goal is

00:19:20,250 --> 00:19:23,040
to create a development environment

00:19:21,240 --> 00:19:25,380
where there are less wrong options for

00:19:23,040 --> 00:19:27,630
developers but things are not done after

00:19:25,380 --> 00:19:29,250
the failure cases reached we like to

00:19:27,630 --> 00:19:32,880
provide direction at the time and place

00:19:29,250 --> 00:19:34,740
of failure to improve efficiency we'd

00:19:32,880 --> 00:19:36,090
like to go over a few examples of where

00:19:34,740 --> 00:19:38,550
we've tried to limit these worst

00:19:36,090 --> 00:19:40,110
practices the language has advanced

00:19:38,550 --> 00:19:42,090
significantly around the lifetime of our

00:19:40,110 --> 00:19:44,190
application stood Otto putter was

00:19:42,090 --> 00:19:45,929
awesome in 1998 but that shouldn't be

00:19:44,190 --> 00:19:48,960
used now because of subtle ownership

00:19:45,929 --> 00:19:51,000
issues so how can we prevent the use of

00:19:48,960 --> 00:19:53,760
stood auto pointer some of our code is

00:19:51,000 --> 00:19:57,890
over 20 years old how can we prevent

00:19:53,760 --> 00:20:01,380
namespace pollution from dot H files

00:19:57,890 --> 00:20:02,909
boost is is wonderful Microsoft stood

00:20:01,380 --> 00:20:04,889
implementation is wonderful

00:20:02,909 --> 00:20:06,809
we've had issues with individual parts

00:20:04,889 --> 00:20:09,749
of those libraries how do we protect our

00:20:06,809 --> 00:20:11,399
staff against using those parts we found

00:20:09,749 --> 00:20:13,379
it effective to stop this with our style

00:20:11,399 --> 00:20:15,509
guide requiring a set of header files to

00:20:13,379 --> 00:20:17,909
be used universally in all of our cpp @h

00:20:15,509 --> 00:20:19,710
files at specific relative positions and

00:20:17,909 --> 00:20:21,509
providing some enforcement in those

00:20:19,710 --> 00:20:23,970
headers with that those standards are

00:20:21,509 --> 00:20:25,979
followed admittedly this is not perfect

00:20:23,970 --> 00:20:27,960
but works with our build process to

00:20:25,979 --> 00:20:29,940
allow us to inject our code around the

00:20:27,960 --> 00:20:32,159
library level and either deprecated

00:20:29,940 --> 00:20:34,970
static assert or completely disabled

00:20:32,159 --> 00:20:37,739
components that are problematic for us

00:20:34,970 --> 00:20:39,599
static assert has also been particularly

00:20:37,739 --> 00:20:41,580
useful for us when combined with type

00:20:39,599 --> 00:20:43,590
traits to make sure some template

00:20:41,580 --> 00:20:45,029
libraries that we've used that we've

00:20:43,590 --> 00:20:48,570
developed are getting the right kind of

00:20:45,029 --> 00:20:50,999
tea when the template libraries are

00:20:48,570 --> 00:20:52,769
passed incorrect T parameters instead of

00:20:50,999 --> 00:20:54,840
kind of sort of working or generating

00:20:52,769 --> 00:20:56,220
incomprehensible error messages will

00:20:54,840 --> 00:20:57,869
catch it early at Build time with a

00:20:56,220 --> 00:20:59,399
decent error message that shows the

00:20:57,869 --> 00:21:01,710
developer exactly what they've done

00:20:59,399 --> 00:21:04,379
that's wrong this really requires a good

00:21:01,710 --> 00:21:05,820
feedback loop across our organization so

00:21:04,379 --> 00:21:07,320
that as consumers of the library

00:21:05,820 --> 00:21:08,879
experience problems they'll be able to

00:21:07,320 --> 00:21:12,720
assist in getting those problems caught

00:21:08,879 --> 00:21:15,059
with new compile time guards we want our

00:21:12,720 --> 00:21:16,919
developers to be alerted quickly when

00:21:15,059 --> 00:21:18,539
going down the wrong path when possible

00:21:16,919 --> 00:21:20,789
we like to catch those worst practices

00:21:18,539 --> 00:21:22,379
at Build time fail fast is a term that

00:21:20,789 --> 00:21:24,330
you hear a lot working in development

00:21:22,379 --> 00:21:26,399
effective static asserts make it

00:21:24,330 --> 00:21:28,229
possible to fail really fast we like

00:21:26,399 --> 00:21:30,749
catching problems before code leaves a

00:21:28,229 --> 00:21:32,849
developer's machine when combined with a

00:21:30,749 --> 00:21:36,059
good CI build process it also keeps your

00:21:32,849 --> 00:21:37,769
source tree good for other developers we

00:21:36,059 --> 00:21:39,419
we personally get a lot of added benefit

00:21:37,769 --> 00:21:41,609
out of Microsoft's team build gated

00:21:39,419 --> 00:21:43,440
builds and the enforcement policies when

00:21:41,609 --> 00:21:45,570
a gated build fails the check-in is not

00:21:43,440 --> 00:21:47,820
allowed into the source branch this

00:21:45,570 --> 00:21:50,159
failure also includes failing any of the

00:21:47,820 --> 00:21:52,080
unit tests there are places that have

00:21:50,159 --> 00:21:55,289
traditions of shunning a developer that

00:21:52,080 --> 00:21:57,389
breaks the building of the tip and while

00:21:55,289 --> 00:21:59,009
this sounds fun I'd rather have a

00:21:57,389 --> 00:22:02,359
guarantee that the tip builds and

00:21:59,009 --> 00:22:04,559
development can can stay productive

00:22:02,359 --> 00:22:06,389
sometimes unfortunately we do have to

00:22:04,559 --> 00:22:08,700
amass some technical debt in our code

00:22:06,389 --> 00:22:10,259
like we said before some libraries may

00:22:08,700 --> 00:22:12,570
have aspects that are less than desired

00:22:10,259 --> 00:22:14,639
sometimes compiler language features are

00:22:12,570 --> 00:22:16,259
incomplete we may want to use the

00:22:14,639 --> 00:22:16,710
library or the compiler feature as the

00:22:16,259 --> 00:22:18,360
real sub

00:22:16,710 --> 00:22:20,970
solution but when we can't they force

00:22:18,360 --> 00:22:23,340
homebrew solutions we recognize that as

00:22:20,970 --> 00:22:25,980
being a short or medium-term technical

00:22:23,340 --> 00:22:27,539
debt maybe on the year-to-year level we

00:22:25,980 --> 00:22:29,220
choose to own a lot of that technical

00:22:27,539 --> 00:22:31,260
debt through static asserts against

00:22:29,220 --> 00:22:33,390
external attributes like library and

00:22:31,260 --> 00:22:34,950
compiler versions we do this with a lot

00:22:33,390 --> 00:22:37,710
of caution because this can be pretty

00:22:34,950 --> 00:22:39,390
dangerous are admittedly maybe not best

00:22:37,710 --> 00:22:42,179
practice is to make sure that we have a

00:22:39,390 --> 00:22:43,919
reasonably tested solution using a newer

00:22:42,179 --> 00:22:45,840
compiler or alternate standards

00:22:43,919 --> 00:22:47,789
conforming compiler where we can test

00:22:45,840 --> 00:22:49,529
the preferred solution and then include

00:22:47,789 --> 00:22:51,570
that as comments around the static

00:22:49,529 --> 00:22:52,980
assert we're very cautious when writing

00:22:51,570 --> 00:22:54,990
code like that because it requires a

00:22:52,980 --> 00:23:00,090
drop-in replacement when the external

00:22:54,990 --> 00:23:01,830
attributes change thank you and our

00:23:00,090 --> 00:23:04,590
final section is a leadership through

00:23:01,830 --> 00:23:07,529
API this is a about as direct as it gets

00:23:04,590 --> 00:23:09,299
for raising awareness of different

00:23:07,529 --> 00:23:12,990
techniques and approaches how do we lead

00:23:09,299 --> 00:23:15,330
through API why use API like I mentioned

00:23:12,990 --> 00:23:16,860
it's incredibly direct and I'm going to

00:23:15,330 --> 00:23:19,350
tell you that this is for internal

00:23:16,860 --> 00:23:20,490
consumers this is for people inside of

00:23:19,350 --> 00:23:22,320
our inside of our development

00:23:20,490 --> 00:23:25,320
organization these are not published or

00:23:22,320 --> 00:23:28,350
third-party api's these are ones that

00:23:25,320 --> 00:23:31,020
affect only our staff the consumers are

00:23:28,350 --> 00:23:32,940
forced to deal with or understand new

00:23:31,020 --> 00:23:35,520
approaches new parameter types and new

00:23:32,940 --> 00:23:38,669
return types directly inside their code

00:23:35,520 --> 00:23:42,750
it is directly pushing knowledge to

00:23:38,669 --> 00:23:44,730
their to their to their workspace the

00:23:42,750 --> 00:23:47,309
downside of it is that any responsible

00:23:44,730 --> 00:23:49,950
API owner is on the hook for

00:23:47,309 --> 00:23:53,929
documentation and no self-respecting

00:23:49,950 --> 00:23:53,929
programmer likes writing documentation

00:23:54,679 --> 00:24:00,149
changes have varying varying degrees of

00:23:57,870 --> 00:24:03,029
how they affect the developer it can go

00:24:00,149 --> 00:24:05,640
from here we have this is directly from

00:24:03,029 --> 00:24:08,220
our code base foo and bar the old

00:24:05,640 --> 00:24:09,870
pattern of passing a foo foo pointer or

00:24:08,220 --> 00:24:12,169
food reference and getting the reference

00:24:09,870 --> 00:24:15,600
back for a populated and large object

00:24:12,169 --> 00:24:19,260
that's still functional it's not always

00:24:15,600 --> 00:24:23,340
best practice now with move operators it

00:24:19,260 --> 00:24:26,190
makes a lot more sense to use the the

00:24:23,340 --> 00:24:28,850
fubar that's listed below for passing

00:24:26,190 --> 00:24:30,060
information of move semantics and

00:24:28,850 --> 00:24:32,460
getting

00:24:30,060 --> 00:24:36,120
developers are comfortable with using

00:24:32,460 --> 00:24:37,620
them and aware of them and the second

00:24:36,120 --> 00:24:39,900
the second selection that we chose from

00:24:37,620 --> 00:24:44,780
our code base of the second example of

00:24:39,900 --> 00:24:46,860
this is we have old code that takes a

00:24:44,780 --> 00:24:50,160
function pointers as a parameter as a

00:24:46,860 --> 00:24:53,070
callback that has a number of problems

00:24:50,160 --> 00:24:54,720
that any any programmer can any seasoned

00:24:53,070 --> 00:24:57,930
programmer can identify we have to pass

00:24:54,720 --> 00:25:00,360
information in via a global state that

00:24:57,930 --> 00:25:05,760
is those are all know knows in modern

00:25:00,360 --> 00:25:09,300
C++ we have refactored those those API

00:25:05,760 --> 00:25:11,610
calls from taking punk from taking a

00:25:09,300 --> 00:25:14,610
function pointer to use instead function

00:25:11,610 --> 00:25:16,620
initialized with lambda functions by

00:25:14,610 --> 00:25:19,770
doing this you are increasing awareness

00:25:16,620 --> 00:25:22,140
across your development staff not only

00:25:19,770 --> 00:25:24,510
of lambda and capture but of the

00:25:22,140 --> 00:25:28,500
importance of avoiding manipulated and

00:25:24,510 --> 00:25:30,930
using global state Kevin and things

00:25:28,500 --> 00:25:33,360
staying current is an increasing need

00:25:30,930 --> 00:25:35,850
and modern development as modern C++

00:25:33,360 --> 00:25:37,980
continues its a aggressive velocity it

00:25:35,850 --> 00:25:39,510
will only become a bigger need there's

00:25:37,980 --> 00:25:41,640
no single correct approach for this

00:25:39,510 --> 00:25:43,500
every development organization will have

00:25:41,640 --> 00:25:45,840
its own needs to respond to when its own

00:25:43,500 --> 00:25:49,650
culture to create our goal here today

00:25:45,840 --> 00:25:51,090
was to increase awareness and present

00:25:49,650 --> 00:25:55,370
our own way of thinking about these

00:25:51,090 --> 00:25:55,370
problems thanks thanks very much

00:26:00,100 --> 00:26:15,110
Kevin questions because we had to go

00:26:11,900 --> 00:26:17,030
across the API bone yeah we had to go

00:26:15,110 --> 00:26:18,590
across API boundary oh I'm sorry

00:26:17,030 --> 00:26:20,540
repeated the question he asked why we

00:26:18,590 --> 00:26:22,400
are taking stead function in that last

00:26:20,540 --> 00:26:24,860
example and not taking a universal

00:26:22,400 --> 00:26:26,960
reference and the answer was that we had

00:26:24,860 --> 00:26:32,380
to go across a way to grow it go across

00:26:26,960 --> 00:26:34,700
a dll boundary so yes they really oh

00:26:32,380 --> 00:26:36,290
this is a really narrow question and I

00:26:34,700 --> 00:26:38,150
don't mind if you just say like come

00:26:36,290 --> 00:26:40,130
talk to me afterward but you mentioned

00:26:38,150 --> 00:26:44,090
something about using spin a in a

00:26:40,130 --> 00:26:45,110
context of parsing JSON ed that's dear

00:26:44,090 --> 00:26:47,620
to my heart I want to know what you're

00:26:45,110 --> 00:26:53,120
talking about oh it was a it was a as

00:26:47,620 --> 00:26:56,960
Finn a in generating JSON from a C++

00:26:53,120 --> 00:27:03,860
object model and I can I can talk to you

00:26:56,960 --> 00:27:05,120
about that so yes can you talk a little

00:27:03,860 --> 00:27:09,170
bit more about how you use static

00:27:05,120 --> 00:27:10,250
asserts to help keep your code base you

00:27:09,170 --> 00:27:11,600
mentioned a little bit on the slides but

00:27:10,250 --> 00:27:15,440
it's a little abstract I'm not sure what

00:27:11,600 --> 00:27:18,740
you were describing well we have for

00:27:15,440 --> 00:27:25,760
static asserts to help keep our code

00:27:18,740 --> 00:27:29,180
base code base maintained well was we

00:27:25,760 --> 00:27:32,630
have some libraries that that were pie

00:27:29,180 --> 00:27:36,740
that that were based on 80 parameter of

00:27:32,630 --> 00:27:40,520
being a pod that could be a mem copy

00:27:36,740 --> 00:27:43,310
structure or also there's versions of

00:27:40,520 --> 00:27:45,350
that that that actually have support

00:27:43,310 --> 00:27:47,570
their own serialization that where mem

00:27:45,350 --> 00:27:52,370
copy couldn't work and so we were using

00:27:47,570 --> 00:27:56,630
static assert around the various T that

00:27:52,370 --> 00:27:58,220
was coming in to be able to and checking

00:27:56,630 --> 00:28:00,920
that at the point in time of

00:27:58,220 --> 00:28:02,570
instantiation of the template to allow

00:28:00,920 --> 00:28:06,970
the programmer to better know that there

00:28:02,570 --> 00:28:09,100
in case they're using the wrong kind

00:28:06,970 --> 00:28:11,390
yeah

00:28:09,100 --> 00:28:13,820
just one follow-up question was there

00:28:11,390 --> 00:28:15,890
something about particular T values that

00:28:13,820 --> 00:28:18,500
would be relevant to modern c++

00:28:15,890 --> 00:28:21,350
something that is only work with c++ 11

00:28:18,500 --> 00:28:23,540
or 14 uh there I don't think that there

00:28:21,350 --> 00:28:26,740
was anything I I think that the the

00:28:23,540 --> 00:28:31,610
static assert would be more of the

00:28:26,740 --> 00:28:34,760
example right there okay I think that

00:28:31,610 --> 00:28:36,260
we've gotta get out for are you next all

00:28:34,760 --> 00:28:38,800
right all right thank you very much time

00:28:36,260 --> 00:28:38,800

YouTube URL: https://www.youtube.com/watch?v=NMUAzL6WUEY


