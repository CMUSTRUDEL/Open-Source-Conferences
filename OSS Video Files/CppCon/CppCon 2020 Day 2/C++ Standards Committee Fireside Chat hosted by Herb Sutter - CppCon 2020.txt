Title: C++ Standards Committee Fireside Chat hosted by Herb Sutter - CppCon 2020
Publication date: 2020-09-26
Playlist: CppCon 2020 Day 2
Description: 
	https://cppcon.org/
https://github.com/CppCon/CppCon2020
---
This panel of representative members of the C++ standards committee is ready to discuss everything from the just-completed C++20, to how the committee is working online as we start the C++23 cycle, and what to look forward to in Standard C++ in the coming years.

Besides C++’s creator, the panelists include the current leaders of key subgroups. These leaders are responsible for language and library evolution, and topics like compile-time programming, real-time/embedded systems, AI, and teaching as the community starts to absorb all the new features in C++20.

The panel also includes representation of fresh forward-looking thinking with the heads of some of the newest national bodies to join in and participate in ISO C++.

---
Herb Sutter
Microsoft

Bryce Adelstein Lelbach
CUDA C++ Core Libraries Lead, NVIDIA

Michael Wong
DE, Codeplay

Bjarne Stroustrup
Technical fellow, morgan stanley

Inbal Levi
Software Engineer, SolarEdge

JF Bastien
Software Architect, Toyota Research Institute-Advanced Development

Hana Dusíková
Staff Scientist, AVAST

JC Van Winkel
SRE EDU lead educator, Google Switzerland

Tony Van Eerd
Stunt-double for C++ Expert, Christie Digital

---
Streamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:09,599 --> 00:00:13,679
welcome everybody to

00:00:11,040 --> 00:00:16,080
day two of cppcon we have a great

00:00:13,679 --> 00:00:17,600
fireside chat panel again this year with

00:00:16,080 --> 00:00:18,880
folks from the committee

00:00:17,600 --> 00:00:21,119
some of you have seen on these panels

00:00:18,880 --> 00:00:22,880
before and some new faces as well

00:00:21,119 --> 00:00:24,240
and many of the questions that we're

00:00:22,880 --> 00:00:24,720
going to talk about actually i've

00:00:24,240 --> 00:00:26,800
already

00:00:24,720 --> 00:00:29,039
had pointers to this panel from

00:00:26,800 --> 00:00:31,039
yesterday in the q a sessions that we've

00:00:29,039 --> 00:00:33,120
had so we look forward to spending the

00:00:31,039 --> 00:00:35,440
next hour or so with our panelists

00:00:33,120 --> 00:00:36,719
who are participants and often leaders

00:00:35,440 --> 00:00:38,879
in different parts of our standards

00:00:36,719 --> 00:00:41,840
committee and international process

00:00:38,879 --> 00:00:43,440
as we talk for with panelists live from

00:00:41,840 --> 00:00:44,320
many time zones in three different

00:00:43,440 --> 00:00:46,000
continents

00:00:44,320 --> 00:00:47,360
so thank you all for making yourselves

00:00:46,000 --> 00:00:48,960
available

00:00:47,360 --> 00:00:50,559
as we go through and introduce each of

00:00:48,960 --> 00:00:52,239
you perhaps you can say something

00:00:50,559 --> 00:00:54,719
brief about what you're currently doing

00:00:52,239 --> 00:00:56,640
in c plus plus uh certainly bjarna

00:00:54,719 --> 00:00:58,320
you need no introduction everybody knows

00:00:56,640 --> 00:00:59,520
who you are and thank you you're the

00:00:58,320 --> 00:01:01,840
reason that we're here

00:00:59,520 --> 00:01:03,520
and having this conference and i know

00:01:01,840 --> 00:01:06,000
that working at morgan stanley you

00:01:03,520 --> 00:01:06,960
also work at columbia and doing teaching

00:01:06,000 --> 00:01:08,960
as well as using

00:01:06,960 --> 00:01:10,240
c plus and demanding environments at the

00:01:08,960 --> 00:01:12,240
bank

00:01:10,240 --> 00:01:13,200
and so we also appreciate that you're

00:01:12,240 --> 00:01:14,479
still part of seafossault

00:01:13,200 --> 00:01:16,240
standardization so i don't know where

00:01:14,479 --> 00:01:18,720
you find the hours of the day but

00:01:16,240 --> 00:01:20,960
thank you for that let's now introduce

00:01:18,720 --> 00:01:23,200
also some of our other panelists

00:01:20,960 --> 00:01:24,720
jc van winkle you chair the tooling

00:01:23,200 --> 00:01:26,960
group tell us a little bit about what

00:01:24,720 --> 00:01:28,080
you do at google uh the study group

00:01:26,960 --> 00:01:30,240
actually

00:01:28,080 --> 00:01:31,280
uh the study group about education

00:01:30,240 --> 00:01:34,479
actually

00:01:31,280 --> 00:01:37,920
um i

00:01:34,479 --> 00:01:41,040
am i am the

00:01:37,920 --> 00:01:41,920
co-founder and lead educator of a group

00:01:41,040 --> 00:01:44,960
of people called

00:01:41,920 --> 00:01:47,680
sre edu we

00:01:44,960 --> 00:01:49,840
educate our new hires who are going to

00:01:47,680 --> 00:01:53,040
be site reliability engineers

00:01:49,840 --> 00:01:54,799
and also we try to organize continuous

00:01:53,040 --> 00:01:55,840
education for all the people who have

00:01:54,799 --> 00:01:59,600
been at google

00:01:55,840 --> 00:02:02,719
longer excellent

00:01:59,600 --> 00:02:03,759
and hannah duzakova who was our host of

00:02:02,719 --> 00:02:05,680
our most recent

00:02:03,759 --> 00:02:07,680
and hopefully not last face-to-face

00:02:05,680 --> 00:02:09,840
meeting in the czech republic

00:02:07,680 --> 00:02:11,039
you chair the compile time programming

00:02:09,840 --> 00:02:13,440
group tell us a little bit about what

00:02:11,039 --> 00:02:13,440
you do

00:02:13,520 --> 00:02:17,840
i'm doing mostly sharing so it's making

00:02:16,080 --> 00:02:21,520
sure people will

00:02:17,840 --> 00:02:23,920
finish their papers and i push them to

00:02:21,520 --> 00:02:27,599
forward to do something more and

00:02:23,920 --> 00:02:27,599
hopefully get reflection in 23.

00:02:28,319 --> 00:02:34,239
very nice bryce you are now the chair of

00:02:31,680 --> 00:02:36,319
the library evolution working group

00:02:34,239 --> 00:02:37,920
and at nvidia tell us a bit about your

00:02:36,319 --> 00:02:39,760
work in c plus plus and how it relates

00:02:37,920 --> 00:02:43,519
to standardization

00:02:39,760 --> 00:02:46,720
so i i at nvidia um i lead our c

00:02:43,519 --> 00:02:48,319
plus standard library team and i work on

00:02:46,720 --> 00:02:50,560
uh programming languages and

00:02:48,319 --> 00:02:54,560
standardization so not just

00:02:50,560 --> 00:02:56,480
c plus but also fortran and c

00:02:54,560 --> 00:02:58,319
and in addition to being the chair of

00:02:56,480 --> 00:03:01,200
library evolution i

00:02:58,319 --> 00:03:03,920
serve as the chair of the u.s national

00:03:01,200 --> 00:03:04,800
standard body for programming languages

00:03:03,920 --> 00:03:09,760
um

00:03:04,800 --> 00:03:12,000
yeah definitely a busy person

00:03:09,760 --> 00:03:12,879
so thanks for making time for us uh

00:03:12,000 --> 00:03:14,239
michael

00:03:12,879 --> 00:03:15,920
and sorry if i could get these out of

00:03:14,239 --> 00:03:18,720
order that the names are jumping around

00:03:15,920 --> 00:03:21,200
michael wong you are running several sgs

00:03:18,720 --> 00:03:24,319
including the real time and low latency

00:03:21,200 --> 00:03:25,760
gaming sg as well as the new ai one

00:03:24,319 --> 00:03:28,799
uh tell us a bit about what you do and

00:03:25,760 --> 00:03:31,519
how it relates to standardization

00:03:28,799 --> 00:03:32,799
um well thank you thanks herb um so i'm

00:03:31,519 --> 00:03:35,519
a distinguished engineer

00:03:32,799 --> 00:03:37,440
at coldplay and what i want what i'm

00:03:35,519 --> 00:03:39,120
doing is mostly doing research in the

00:03:37,440 --> 00:03:40,879
area of programming models especially

00:03:39,120 --> 00:03:42,799
relating to heterogeneous programming

00:03:40,879 --> 00:03:44,480
ai and machine learning which is related

00:03:42,799 --> 00:03:47,200
to my sg

00:03:44,480 --> 00:03:49,040
as well as safety critical um models

00:03:47,200 --> 00:03:50,720
which is related to my other sg

00:03:49,040 --> 00:03:52,640
so it all leverages it let all leverage

00:03:50,720 --> 00:03:55,519
very nicely

00:03:52,640 --> 00:03:57,280
very nice now in ball levy you're the

00:03:55,519 --> 00:03:57,680
head of delegation you're the chair of

00:03:57,280 --> 00:03:59,920
the

00:03:57,680 --> 00:04:01,519
one of our newest national bodies the

00:03:59,920 --> 00:04:04,319
israel c-plus plus

00:04:01,519 --> 00:04:06,159
national standards body and so you've

00:04:04,319 --> 00:04:07,680
been attending for a few meetings now

00:04:06,159 --> 00:04:08,799
tell us a bit about what you do in c

00:04:07,680 --> 00:04:11,599
plus plus and your interest and

00:04:08,799 --> 00:04:11,599
standardization

00:04:11,760 --> 00:04:17,120
thank you so first of all i want to say

00:04:14,799 --> 00:04:19,359
that i'm very excited to be here today

00:04:17,120 --> 00:04:22,160
and yes we're the i think we're the

00:04:19,359 --> 00:04:25,919
newest national body uh we joined uh

00:04:22,160 --> 00:04:29,840
around almost a year ago i think and

00:04:25,919 --> 00:04:32,880
i'm i am an embedded developer

00:04:29,840 --> 00:04:34,560
but i have to say that i'm really

00:04:32,880 --> 00:04:36,479
i'm really enthusiastic about what

00:04:34,560 --> 00:04:39,360
happens in the community

00:04:36,479 --> 00:04:42,080
and i think that's a lot of issues are

00:04:39,360 --> 00:04:44,000
being addressed and this is very um

00:04:42,080 --> 00:04:45,360
very interesting to see sql space

00:04:44,000 --> 00:04:48,560
getting involved

00:04:45,360 --> 00:04:51,840
so thank you very nice

00:04:48,560 --> 00:04:54,160
and jf bastian who's now our evolution

00:04:51,840 --> 00:04:55,600
language evolution working group chair

00:04:54,160 --> 00:04:58,080
tell us a bit about yourself and your

00:04:55,600 --> 00:05:00,720
work yes so i'm jeff

00:04:58,080 --> 00:05:02,240
uh so i newly chaired the evolution

00:05:00,720 --> 00:05:04,479
working group so you know trying to

00:05:02,240 --> 00:05:05,680
advance the language forward uh in a

00:05:04,479 --> 00:05:07,120
responsible manner

00:05:05,680 --> 00:05:08,720
uh adding interesting features and

00:05:07,120 --> 00:05:10,560
things like that um and

00:05:08,720 --> 00:05:12,479
fixing old bugs so that's the main thing

00:05:10,560 --> 00:05:14,000
that the the group ends up doing right

00:05:12,479 --> 00:05:16,160
looking at kind of big features and

00:05:14,000 --> 00:05:20,000
things like that um

00:05:16,160 --> 00:05:21,919
so so you know work wise i focused on

00:05:20,000 --> 00:05:24,000
security quite a bit in the

00:05:21,919 --> 00:05:25,600
the last few years i've done a lot of

00:05:24,000 --> 00:05:28,560
you know compiler related stuff

00:05:25,600 --> 00:05:29,280
like that uh and i'm starting a new role

00:05:28,560 --> 00:05:32,240
soon at

00:05:29,280 --> 00:05:32,720
uh toyota uh toyota research institute

00:05:32,240 --> 00:05:35,360
advanced

00:05:32,720 --> 00:05:38,320
development uh working mostly on

00:05:35,360 --> 00:05:38,720
automotive and mobility vehicles so yeah

00:05:38,320 --> 00:05:41,120
so

00:05:38,720 --> 00:05:42,160
doing stuff related to standards and

00:05:41,120 --> 00:05:45,440
safety as well

00:05:42,160 --> 00:05:46,080
as reliability thank you it's nice to

00:05:45,440 --> 00:05:48,479
see that

00:05:46,080 --> 00:05:49,440
to help everybody see our panel it

00:05:48,479 --> 00:05:51,600
involves everybody

00:05:49,440 --> 00:05:52,880
doing working from ai to automotive

00:05:51,600 --> 00:05:55,440
safety critical

00:05:52,880 --> 00:05:57,520
to teaching that's important and finally

00:05:55,440 --> 00:05:59,840
last but not least tony vanair

00:05:57,520 --> 00:06:00,560
who has been a long time expert in c

00:05:59,840 --> 00:06:03,199
plus plus

00:06:00,560 --> 00:06:04,800
uh what's your your one sentence what

00:06:03,199 --> 00:06:07,759
you're doing these days now

00:06:04,800 --> 00:06:09,199
relates to standardization um yeah i

00:06:07,759 --> 00:06:10,160
work at kersey digital we make

00:06:09,199 --> 00:06:12,319
projectors

00:06:10,160 --> 00:06:14,880
um i do what's called projection mapping

00:06:12,319 --> 00:06:16,880
where you take a bunch of projectors and

00:06:14,880 --> 00:06:18,720
uh seamlessly put it turn it into one

00:06:16,880 --> 00:06:19,680
giant image on on the side of a building

00:06:18,720 --> 00:06:22,720
or

00:06:19,680 --> 00:06:24,479
3d object whatever um on the committee

00:06:22,720 --> 00:06:25,440
i'm i'm the person here who's not a

00:06:24,479 --> 00:06:28,319
chair of a committee

00:06:25,440 --> 00:06:29,280
of a subgroup uh but i'm the unofficial

00:06:28,319 --> 00:06:30,880
chair of the

00:06:29,280 --> 00:06:32,479
naming subgroup that we just don't know

00:06:30,880 --> 00:06:33,520
what to name the subgroup that's the

00:06:32,479 --> 00:06:36,560
joke

00:06:33,520 --> 00:06:38,400
um and yeah i just need c plus in my

00:06:36,560 --> 00:06:40,000
work and i uh i've always loved the

00:06:38,400 --> 00:06:42,610
language since

00:06:40,000 --> 00:06:44,720
uh way too long 90s

00:06:42,610 --> 00:06:46,800
[Laughter]

00:06:44,720 --> 00:06:48,319
thank you and welcome everyone now

00:06:46,800 --> 00:06:50,000
because you will be answering the

00:06:48,319 --> 00:06:50,479
questions and i'm just feeding them to

00:06:50,000 --> 00:06:52,960
you

00:06:50,479 --> 00:06:55,840
you actually don't need to see me so let

00:06:52,960 --> 00:06:59,599
me put us in the mood of a fireside chat

00:06:55,840 --> 00:07:02,639
and our first question why didn't c

00:06:59,599 --> 00:07:03,440
plus die around the year 2000 and and

00:07:02,639 --> 00:07:05,360
why does this you

00:07:03,440 --> 00:07:08,240
still seem to be growing who would like

00:07:05,360 --> 00:07:08,240
to take that one

00:07:10,560 --> 00:07:16,160
well i wrote about it in my history of

00:07:13,759 --> 00:07:16,639
programming languages paper so it would

00:07:16,160 --> 00:07:19,759
be

00:07:16,639 --> 00:07:22,479
obvious for me to start out i actually

00:07:19,759 --> 00:07:26,400
worried more about 2005

00:07:22,479 --> 00:07:29,280
which was the lady i think and

00:07:26,400 --> 00:07:30,160
there was a lot of competition

00:07:29,280 --> 00:07:33,199
throughout the

00:07:30,160 --> 00:07:37,039
history of c plus plus um it used to be

00:07:33,199 --> 00:07:40,240
that everybody had to write data and

00:07:37,039 --> 00:07:43,680
at around the middle of the

00:07:40,240 --> 00:07:46,720
early 2000s there was java and there was

00:07:43,680 --> 00:07:49,759
c sharp and such and uh

00:07:46,720 --> 00:07:52,240
i think the reason c plot plus survived

00:07:49,759 --> 00:07:53,039
is that everybody wanted to go higher

00:07:52,240 --> 00:07:55,280
level and

00:07:53,039 --> 00:07:55,280
more

00:07:56,319 --> 00:08:01,759
sort of elegant and they lost

00:07:59,599 --> 00:08:03,520
the hardware they couldn't touch the

00:08:01,759 --> 00:08:05,120
hardware directly

00:08:03,520 --> 00:08:06,560
and the other thing was that the

00:08:05,120 --> 00:08:10,879
competing languages

00:08:06,560 --> 00:08:14,479
were corporates pushed by corporations

00:08:10,879 --> 00:08:16,560
you forced people to use java if you

00:08:14,479 --> 00:08:19,919
want android to use

00:08:16,560 --> 00:08:23,120
um objective c if you were on

00:08:19,919 --> 00:08:26,400
in on apple uh c

00:08:23,120 --> 00:08:28,560
sharp if you were on microsoft

00:08:26,400 --> 00:08:30,400
and the net effect was that the only

00:08:28,560 --> 00:08:32,159
thing that worked everywhere and worked

00:08:30,400 --> 00:08:34,560
well with c plus plus

00:08:32,159 --> 00:08:36,479
and so you put a sheen over your c plus

00:08:34,560 --> 00:08:40,240
plus applications

00:08:36,479 --> 00:08:41,200
um and then the hardware stopped getting

00:08:40,240 --> 00:08:45,279
faster

00:08:41,200 --> 00:08:48,399
so performance started mattering more

00:08:45,279 --> 00:08:50,640
you could again have a good programmer

00:08:48,399 --> 00:08:52,000
deliver something that was significantly

00:08:50,640 --> 00:08:55,680
better than 10

00:08:52,000 --> 00:08:58,480
so-so programmers because the hardware

00:08:55,680 --> 00:08:58,480
didn't save them

00:08:58,880 --> 00:09:02,560
very nice now our first question that we

00:09:00,800 --> 00:09:04,959
just got on the floor

00:09:02,560 --> 00:09:07,279
was what are the biggest challenges in c

00:09:04,959 --> 00:09:08,880
plus education at the moment

00:09:07,279 --> 00:09:10,720
and what can we do to help other than

00:09:08,880 --> 00:09:13,760
training our own people

00:09:10,720 --> 00:09:17,040
jc you have a study group about that

00:09:13,760 --> 00:09:20,320
yes we do i think that

00:09:17,040 --> 00:09:23,440
c plus can look daunting

00:09:20,320 --> 00:09:26,880
at first when you start learning about c

00:09:23,440 --> 00:09:29,200
plus plus um i am dutch

00:09:26,880 --> 00:09:30,399
and there is a dutch word which i

00:09:29,200 --> 00:09:33,920
translated to english

00:09:30,399 --> 00:09:35,680
is called choice stress there are too

00:09:33,920 --> 00:09:38,399
many ways to do

00:09:35,680 --> 00:09:39,120
things separate ways so that is

00:09:38,399 --> 00:09:42,720
difficult

00:09:39,120 --> 00:09:45,920
what we try to do in the education group

00:09:42,720 --> 00:09:49,279
is not so much create curricula

00:09:45,920 --> 00:09:51,680
for learning c plus but actually give

00:09:49,279 --> 00:09:53,120
guidelines to people who want to create

00:09:51,680 --> 00:09:56,880
a curriculum for example

00:09:53,120 --> 00:09:57,440
at a university so you should not start

00:09:56,880 --> 00:09:59,360
with

00:09:57,440 --> 00:10:01,600
template meta programming as your first

00:09:59,360 --> 00:10:05,760
subject which is obvious but

00:10:01,600 --> 00:10:09,200
we like we try to lay out a

00:10:05,760 --> 00:10:12,240
roadmap of what order subjects

00:10:09,200 --> 00:10:14,720
could be discussed in and also

00:10:12,240 --> 00:10:16,079
when you take one of these specific

00:10:14,720 --> 00:10:18,000
topics

00:10:16,079 --> 00:10:20,399
what the student outcomes should be so

00:10:18,000 --> 00:10:24,880
what should a student be able to do

00:10:20,399 --> 00:10:29,519
after having attended that specific

00:10:24,880 --> 00:10:32,800
topic in in the series of topics

00:10:29,519 --> 00:10:35,279
we also try to influence

00:10:32,800 --> 00:10:37,200
the committee a bit actually the

00:10:35,279 --> 00:10:37,839
committee is doing a pretty good job

00:10:37,200 --> 00:10:40,959
here

00:10:37,839 --> 00:10:43,839
by itself but for example the appearance

00:10:40,959 --> 00:10:46,640
of tony tables that we saw

00:10:43,839 --> 00:10:48,000
after tony introduced them is really

00:10:46,640 --> 00:10:51,519
helpful

00:10:48,000 --> 00:10:54,720
and gore nisha alanov

00:10:51,519 --> 00:10:59,200
also introduced a series of table

00:10:54,720 --> 00:11:02,560
a set of tables that are audience tables

00:10:59,200 --> 00:11:03,760
in which it says this new feature that

00:11:02,560 --> 00:11:07,120
i'm proposing

00:11:03,760 --> 00:11:10,720
will be used by the millions of people

00:11:07,120 --> 00:11:10,720
who will use this specific part

00:11:13,680 --> 00:11:18,160
great anyone else would like to weigh in

00:11:16,000 --> 00:11:21,519
yeah i have a comment

00:11:18,160 --> 00:11:24,240
um i think too many people are trying to

00:11:21,519 --> 00:11:27,680
show too advanced stuff to people

00:11:24,240 --> 00:11:30,720
and we need to have a higher emphasis

00:11:27,680 --> 00:11:33,440
on sort of the hello world level of

00:11:30,720 --> 00:11:34,720
code so that people see that they can

00:11:33,440 --> 00:11:38,000
get started

00:11:34,720 --> 00:11:39,760
they go to a conference like ours

00:11:38,000 --> 00:11:42,160
and people show them how to do the

00:11:39,760 --> 00:11:43,600
absolute latest and fancy is using the

00:11:42,160 --> 00:11:45,360
latest features

00:11:43,600 --> 00:11:48,480
and they're sitting in their job or

00:11:45,360 --> 00:11:50,480
studying they can't use that compiler or

00:11:48,480 --> 00:11:53,600
they don't understand it and they just

00:11:50,480 --> 00:11:54,639
try to do a simple program so i would

00:11:53,600 --> 00:11:57,839
like to see

00:11:54,639 --> 00:11:59,760
more hello world style programs short

00:11:57,839 --> 00:12:03,360
articles that get people

00:11:59,760 --> 00:12:06,560
up and running with different features

00:12:03,360 --> 00:12:08,560
i suggest people look at knr

00:12:06,560 --> 00:12:10,800
the most successful book in the history

00:12:08,560 --> 00:12:13,680
of programming and guess why

00:12:10,800 --> 00:12:16,720
it is successful it's not trying to tell

00:12:13,680 --> 00:12:16,720
everybody everything

00:12:17,440 --> 00:12:21,839
yeah and sorry my my connection broke

00:12:19,920 --> 00:12:24,240
off

00:12:21,839 --> 00:12:24,959
but what you see is that a lot of people

00:12:24,240 --> 00:12:28,000
these days

00:12:24,959 --> 00:12:28,560
are learning python because it's so easy

00:12:28,000 --> 00:12:31,040
to learn

00:12:28,560 --> 00:12:31,920
even my son and my daughter who do

00:12:31,040 --> 00:12:34,880
something completely

00:12:31,920 --> 00:12:35,839
outside of computer science they learn

00:12:34,880 --> 00:12:39,120
python

00:12:35,839 --> 00:12:40,720
at the university and it's very

00:12:39,120 --> 00:12:43,440
intuitive but i think that

00:12:40,720 --> 00:12:45,120
modern c plus and especially c plus plus

00:12:43,440 --> 00:12:48,800
00:12:45,120 --> 00:12:51,360
allows you to code in a pythonesque

00:12:48,800 --> 00:12:53,360
style without having to know all the

00:12:51,360 --> 00:12:55,120
nitty bitty details and i think we

00:12:53,360 --> 00:12:57,600
should teach more

00:12:55,120 --> 00:12:57,600
of that

00:12:58,480 --> 00:13:03,360
thank you so

00:13:01,519 --> 00:13:05,519
a related question is currently the top

00:13:03,360 --> 00:13:07,519
up voted what parts of the c

00:13:05,519 --> 00:13:09,440
plus plus standard do you think are the

00:13:07,519 --> 00:13:12,000
most misunderstood

00:13:09,440 --> 00:13:14,320
and where education should focus uh

00:13:12,000 --> 00:13:18,000
perhaps someone who hasn't commented yet

00:13:14,320 --> 00:13:20,160
i would start yes hannah

00:13:18,000 --> 00:13:21,680
okay i from my perspective it's a

00:13:20,160 --> 00:13:23,360
different behavior

00:13:21,680 --> 00:13:25,360
it's something scary in background

00:13:23,360 --> 00:13:28,639
people don't understand what's going on

00:13:25,360 --> 00:13:31,360
they get angry and they want because

00:13:28,639 --> 00:13:32,959
they say it's work my computer it's my

00:13:31,360 --> 00:13:35,920
processor it should work and i don't

00:13:32,959 --> 00:13:36,880
this advice for not working so does the

00:13:35,920 --> 00:13:40,000
problem with

00:13:36,880 --> 00:13:42,160
misunderstood undefined behavior

00:13:40,000 --> 00:13:43,680
i would say thank you and michael you

00:13:42,160 --> 00:13:47,279
have a thought

00:13:43,680 --> 00:13:49,279
uh yeah um i think referring back to

00:13:47,279 --> 00:13:50,720
just to cover the last two questions uh

00:13:49,279 --> 00:13:52,160
referring back to the issue about

00:13:50,720 --> 00:13:54,160
teaching class plus

00:13:52,160 --> 00:13:55,440
i do find that having too many

00:13:54,160 --> 00:13:57,680
complicated examples

00:13:55,440 --> 00:13:59,199
being thrown out there is problematic in

00:13:57,680 --> 00:14:01,040
the games community we actually had this

00:13:59,199 --> 00:14:03,920
huge problem huge debate

00:14:01,040 --> 00:14:04,720
where um rangers were shown to the games

00:14:03,920 --> 00:14:07,920
people

00:14:04,720 --> 00:14:09,839
to uh in a form that they did not think

00:14:07,920 --> 00:14:11,279
was useful to them they could already do

00:14:09,839 --> 00:14:13,360
the same thing

00:14:11,279 --> 00:14:15,199
uh using the given the example that was

00:14:13,360 --> 00:14:16,000
shown and they started questioning well

00:14:15,199 --> 00:14:19,120
why would we even

00:14:16,000 --> 00:14:20,320
go that go that far and it and it really

00:14:19,120 --> 00:14:22,000
was just like a

00:14:20,320 --> 00:14:24,000
just a choice of example there that

00:14:22,000 --> 00:14:26,560
wasn't appropriate and i thought that

00:14:24,000 --> 00:14:28,480
that's that that really illustrates why

00:14:26,560 --> 00:14:31,760
we need simple examples

00:14:28,480 --> 00:14:33,519
um that really help people um

00:14:31,760 --> 00:14:35,839
so on this on this particular question i

00:14:33,519 --> 00:14:37,360
should turn um yeah sure the the many

00:14:35,839 --> 00:14:38,240
different parts of c-plus plus that

00:14:37,360 --> 00:14:41,519
could be

00:14:38,240 --> 00:14:43,760
um better improved for understanding for

00:14:41,519 --> 00:14:45,040
education definitely i think um

00:14:43,760 --> 00:14:47,519
you know what hannah talked about i

00:14:45,040 --> 00:14:50,240
think a lifetime could be improved

00:14:47,519 --> 00:14:50,800
um that seems to be constantly coming

00:14:50,240 --> 00:14:53,519
into

00:14:50,800 --> 00:14:55,199
into into a question and the other thing

00:14:53,519 --> 00:14:57,839
is certainly the area that i cover

00:14:55,199 --> 00:14:58,560
things like concurrency and parallelism

00:14:57,839 --> 00:15:00,079
um

00:14:58,560 --> 00:15:02,480
you know we're still trying to we're

00:15:00,079 --> 00:15:04,079
still exploring and understanding the

00:15:02,480 --> 00:15:05,760
the way people read this to understand

00:15:04,079 --> 00:15:07,440
how it's being used and it's not the

00:15:05,760 --> 00:15:09,120
easiest to reach for many people

00:15:07,440 --> 00:15:10,880
so definitely i think there's place to

00:15:09,120 --> 00:15:12,959
to help them maybe that's an area

00:15:10,880 --> 00:15:14,800
for education focus as well too because

00:15:12,959 --> 00:15:16,240
in many education curriculum they might

00:15:14,800 --> 00:15:17,600
not focus specifically on the

00:15:16,240 --> 00:15:19,279
concurrency aspects

00:15:17,600 --> 00:15:21,120
and that's an important area that can be

00:15:19,279 --> 00:15:23,120
built up both from the bottom up and

00:15:21,120 --> 00:15:26,800
from the top-down point of view

00:15:23,120 --> 00:15:26,800
yeah i will agree with you i see the

00:15:27,440 --> 00:15:31,759
and then i'll just point out that we are

00:15:29,759 --> 00:15:32,320
getting a huge number of people who

00:15:31,759 --> 00:15:34,720
think

00:15:32,320 --> 00:15:37,120
that unless they build class hierarchies

00:15:34,720 --> 00:15:37,759
and uses the operator new all over the

00:15:37,120 --> 00:15:40,480
place

00:15:37,759 --> 00:15:41,279
the new operator i mean then it's not c

00:15:40,480 --> 00:15:43,759
plus plus

00:15:41,279 --> 00:15:45,440
and that is a very serious mistakes

00:15:43,759 --> 00:15:46,639
because in that direction lies

00:15:45,440 --> 00:15:50,320
complexity

00:15:46,639 --> 00:15:50,320
slow code and leaks

00:15:50,720 --> 00:15:54,959
to jump in go ahead and i just wanted to

00:15:54,480 --> 00:15:58,639
add

00:15:54,959 --> 00:16:00,800
uh regarding this topic that i had a

00:15:58,639 --> 00:16:02,160
short experience of teaching an

00:16:00,800 --> 00:16:05,519
undergraduate

00:16:02,160 --> 00:16:08,800
uh class for for a kid and for students

00:16:05,519 --> 00:16:11,839
and i think the the main

00:16:08,800 --> 00:16:14,000
power of sql space which is also

00:16:11,839 --> 00:16:15,360
uh something that we need to to regard

00:16:14,000 --> 00:16:19,279
is the fact that

00:16:15,360 --> 00:16:21,360
uh it's a system um language and

00:16:19,279 --> 00:16:23,040
before when you learn c plus plus you

00:16:21,360 --> 00:16:25,199
need to be aware

00:16:23,040 --> 00:16:26,320
of the system and think that might be

00:16:25,199 --> 00:16:29,759
something

00:16:26,320 --> 00:16:33,120
that is um lacking and

00:16:29,759 --> 00:16:36,320
by i think that by having a

00:16:33,120 --> 00:16:37,440
solid ground of system design for

00:16:36,320 --> 00:16:40,240
students that will

00:16:37,440 --> 00:16:41,920
also help understanding the the great

00:16:40,240 --> 00:16:43,440
benefits of sibles class

00:16:41,920 --> 00:16:44,880
because if you don't understand the

00:16:43,440 --> 00:16:45,759
difference between compile-time and

00:16:44,880 --> 00:16:48,720
runtime you

00:16:45,759 --> 00:16:49,680
you will not be able to evaluate it

00:16:48,720 --> 00:16:53,360
properly

00:16:49,680 --> 00:16:55,600
so yes thank you

00:16:53,360 --> 00:16:57,199
sorry and then one i'm gonna try to add

00:16:55,600 --> 00:16:59,199
a push here for embedded because

00:16:57,199 --> 00:17:00,240
the embedded coverage in c plus plus

00:16:59,199 --> 00:17:03,199
standard right now

00:17:00,240 --> 00:17:04,400
desperately needs to be um that is more

00:17:03,199 --> 00:17:06,959
better specified and there's

00:17:04,400 --> 00:17:08,480
there's effort going on in that space um

00:17:06,959 --> 00:17:09,120
given how many people are in that

00:17:08,480 --> 00:17:10,640
embedded

00:17:09,120 --> 00:17:12,480
and we have a new embedded track this

00:17:10,640 --> 00:17:13,039
year um that is definitely something we

00:17:12,480 --> 00:17:16,559
should

00:17:13,039 --> 00:17:18,959
we should help along thank you

00:17:16,559 --> 00:17:20,720
now this next one perhaps tony or bryce

00:17:18,959 --> 00:17:23,360
might have a thought about this one

00:17:20,720 --> 00:17:24,240
c plus does not have a standard or even

00:17:23,360 --> 00:17:27,760
de facto

00:17:24,240 --> 00:17:29,200
logging api do we need to do something

00:17:27,760 --> 00:17:31,600
in the standard to catch up with other

00:17:29,200 --> 00:17:34,480
frameworks

00:17:31,600 --> 00:17:35,840
um i can take this one herb um i think

00:17:34,480 --> 00:17:38,960
that there are a lot

00:17:35,840 --> 00:17:40,559
of things that we could add to the

00:17:38,960 --> 00:17:43,200
standard library

00:17:40,559 --> 00:17:44,559
um uh and a lot of things that exist in

00:17:43,200 --> 00:17:47,600
other

00:17:44,559 --> 00:17:50,080
languages standard libraries but in the

00:17:47,600 --> 00:17:52,720
c plus plus standard library

00:17:50,080 --> 00:17:53,919
um our our priorities and the things

00:17:52,720 --> 00:17:57,919
that belong there

00:17:53,919 --> 00:18:01,039
is is limited to um

00:17:57,919 --> 00:18:03,120
a specific set of like high value things

00:18:01,039 --> 00:18:04,799
so essentially the the things that i

00:18:03,120 --> 00:18:06,080
think belong in the standard library are

00:18:04,799 --> 00:18:09,520
the things that

00:18:06,080 --> 00:18:11,200
cannot go anywhere else so there's a few

00:18:09,520 --> 00:18:11,840
different categories of these things for

00:18:11,200 --> 00:18:15,039
example

00:18:11,840 --> 00:18:16,960
vocabulary types you can't really have

00:18:15,039 --> 00:18:18,720
vocabulary types anywhere other than the

00:18:16,960 --> 00:18:20,320
standard library because the whole idea

00:18:18,720 --> 00:18:22,400
of vocabulary types

00:18:20,320 --> 00:18:24,080
is that it's a common type that

00:18:22,400 --> 00:18:27,360
everybody agrees upon

00:18:24,080 --> 00:18:29,039
you know that that that instead of your

00:18:27,360 --> 00:18:30,960
library having a string type in my

00:18:29,039 --> 00:18:32,640
library having a string type

00:18:30,960 --> 00:18:34,400
and the third person's library having a

00:18:32,640 --> 00:18:36,160
string type and then some user who's

00:18:34,400 --> 00:18:37,679
trying to use all those libraries having

00:18:36,160 --> 00:18:38,240
the traffic in multiple different string

00:18:37,679 --> 00:18:41,120
types

00:18:38,240 --> 00:18:43,679
you have one string type or as it is now

00:18:41,120 --> 00:18:46,480
you have one string interface type

00:18:43,679 --> 00:18:47,440
string view um the next category of

00:18:46,480 --> 00:18:50,640
things

00:18:47,440 --> 00:18:54,240
are uh things that that uh

00:18:50,640 --> 00:18:57,280
uh are abstractions around

00:18:54,240 --> 00:19:00,320
the platform so something like the

00:18:57,280 --> 00:19:02,240
concurrency library or file system

00:19:00,320 --> 00:19:04,240
you could get a third-party library that

00:19:02,240 --> 00:19:05,919
could provide an implementation of those

00:19:04,240 --> 00:19:09,280
facilities for you

00:19:05,919 --> 00:19:11,120
but oftentimes you want those facilities

00:19:09,280 --> 00:19:14,160
that are specific to your platform

00:19:11,120 --> 00:19:16,400
to be provided by the vendor

00:19:14,160 --> 00:19:18,240
um for your platform so the person who's

00:19:16,400 --> 00:19:20,400
providing you with your c plus plus

00:19:18,240 --> 00:19:23,679
implementation on your platform

00:19:20,400 --> 00:19:26,720
is probably going to be best equipped to

00:19:23,679 --> 00:19:28,799
give you an abstraction of the

00:19:26,720 --> 00:19:32,160
implementation of the abstractions

00:19:28,799 --> 00:19:35,679
um for their platform so if i'm on

00:19:32,160 --> 00:19:37,440
you know microsoft i want the

00:19:35,679 --> 00:19:38,960
the concurrency facilities that have

00:19:37,440 --> 00:19:41,440
been designed

00:19:38,960 --> 00:19:42,480
by the microsoft engineers and designed

00:19:41,440 --> 00:19:45,760
to work well

00:19:42,480 --> 00:19:46,640
with msvc and the next category of

00:19:45,760 --> 00:19:50,840
things

00:19:46,640 --> 00:19:54,400
is things that require

00:19:50,840 --> 00:19:56,080
um language support so standard library

00:19:54,400 --> 00:19:57,840
facilities that aren't actually really

00:19:56,080 --> 00:19:59,600
standard library facilities

00:19:57,840 --> 00:20:01,679
but are really just extensions of the

00:19:59,600 --> 00:20:03,919
language for example type traits is

00:20:01,679 --> 00:20:05,520
something that falls into this category

00:20:03,919 --> 00:20:07,200
so those three categories of things i

00:20:05,520 --> 00:20:10,720
think are the primary

00:20:07,200 --> 00:20:12,240
um uh priorities that we have because

00:20:10,720 --> 00:20:14,480
those are things that cannot be

00:20:12,240 --> 00:20:16,400
satisfied by any other

00:20:14,480 --> 00:20:18,799
um library other than the standard

00:20:16,400 --> 00:20:20,559
library and so we have to focus on those

00:20:18,799 --> 00:20:22,799
first is our priorities

00:20:20,559 --> 00:20:24,159
um and and there's there's so much that

00:20:22,799 --> 00:20:26,880
we could do

00:20:24,159 --> 00:20:28,559
um and we we still have a lot to do to

00:20:26,880 --> 00:20:29,039
even satisfy all the things that fall

00:20:28,559 --> 00:20:32,320
into

00:20:29,039 --> 00:20:34,960
those categories um now

00:20:32,320 --> 00:20:36,320
something like a login library that that

00:20:34,960 --> 00:20:39,120
might be nice to have

00:20:36,320 --> 00:20:39,760
but the question is is it essential can

00:20:39,120 --> 00:20:41,679
we add

00:20:39,760 --> 00:20:44,000
greater value in having a standard

00:20:41,679 --> 00:20:47,760
library login facility instead of

00:20:44,000 --> 00:20:49,679
say working to make it easier for people

00:20:47,760 --> 00:20:50,480
to use third-party libraries so that you

00:20:49,679 --> 00:20:53,600
can use some

00:20:50,480 --> 00:20:55,600
awesome third-party logging facility so

00:20:53,600 --> 00:20:58,159
i i think that unlike in other languages

00:20:55,600 --> 00:21:01,200
and cpos plus our focus should be on

00:20:58,159 --> 00:21:04,080
on a really high quality but

00:21:01,200 --> 00:21:04,640
but focused uh standard library but then

00:21:04,080 --> 00:21:08,080
we should

00:21:04,640 --> 00:21:11,120
we should be spending more effort on uh

00:21:08,080 --> 00:21:13,120
making it easier to use third-party

00:21:11,120 --> 00:21:13,520
libraries which means enabling things

00:21:13,120 --> 00:21:16,799
like

00:21:13,520 --> 00:21:18,640
packaging et cetera

00:21:16,799 --> 00:21:20,559
package managers come in there and let

00:21:18,640 --> 00:21:22,400
me just actually generalize the question

00:21:20,559 --> 00:21:23,440
a little bit and throw it also to tony

00:21:22,400 --> 00:21:26,000
and jf

00:21:23,440 --> 00:21:26,480
but besides just logging what libraries

00:21:26,000 --> 00:21:28,799
do you think

00:21:26,480 --> 00:21:30,480
are missing from the standard library

00:21:28,799 --> 00:21:33,919
tony you had a comment

00:21:30,480 --> 00:21:35,520
yeah um i i i agree with what

00:21:33,919 --> 00:21:38,720
i have to agree with bryce he's like you

00:21:35,520 --> 00:21:41,840
know chair of my one of my subgroups

00:21:38,720 --> 00:21:41,840
um no um

00:21:42,720 --> 00:21:46,000
the there's a couple thoughts on on

00:21:44,480 --> 00:21:50,080
logging specifically

00:21:46,000 --> 00:21:50,880
um on one hand i've rarely seen i've

00:21:50,080 --> 00:21:53,600
only seen

00:21:50,880 --> 00:21:54,799
one excellent logger so if we were to

00:21:53,600 --> 00:21:56,880
pick a logger

00:21:54,799 --> 00:21:58,559
i bet we wouldn't pick the best one

00:21:56,880 --> 00:22:00,559
because the best one actually i ever saw

00:21:58,559 --> 00:22:03,919
was was buried inside a blackberry

00:22:00,559 --> 00:22:07,120
surprisingly um

00:22:03,919 --> 00:22:09,360
and uh but a good logger

00:22:07,120 --> 00:22:11,280
actually could use support from the

00:22:09,360 --> 00:22:13,520
compiler because you can

00:22:11,280 --> 00:22:15,120
all some of the log lines so it actually

00:22:13,520 --> 00:22:18,080
might be something where

00:22:15,120 --> 00:22:19,679
uh you could do better if it was built

00:22:18,080 --> 00:22:20,880
into the library or built into the

00:22:19,679 --> 00:22:22,880
language somewhat

00:22:20,880 --> 00:22:24,480
so that the because you can pre-process

00:22:22,880 --> 00:22:25,200
some of the log lines and then do less

00:22:24,480 --> 00:22:28,080
work

00:22:25,200 --> 00:22:30,720
at runtime and the other way you might

00:22:28,080 --> 00:22:34,400
want to do a logger is

00:22:30,720 --> 00:22:34,400
along the road of

00:22:34,640 --> 00:22:39,360
contracts the contract mechanism that

00:22:38,080 --> 00:22:41,200
we've been talking about has

00:22:39,360 --> 00:22:42,799
you know hooks in to like call somebody

00:22:41,200 --> 00:22:44,960
when a contract fails

00:22:42,799 --> 00:22:46,480
you could do logging in the sense of

00:22:44,960 --> 00:22:48,960
there's they're just hooks

00:22:46,480 --> 00:22:50,720
into uh you know you make a call to the

00:22:48,960 --> 00:22:53,039
logger but it's not

00:22:50,720 --> 00:22:54,480
a particular logger it's the logging

00:22:53,039 --> 00:22:56,240
interface and you've

00:22:54,480 --> 00:22:58,000
installed the logger you know at the

00:22:56,240 --> 00:22:58,720
start of your program because it would

00:22:58,000 --> 00:23:01,440
be nice

00:22:58,720 --> 00:23:02,000
um logging is almost like a vocabulary

00:23:01,440 --> 00:23:03,039
type

00:23:02,000 --> 00:23:05,280
in the fact that if i write a

00:23:03,039 --> 00:23:08,080
third-party library

00:23:05,280 --> 00:23:09,280
how do i log right i don't i i want to

00:23:08,080 --> 00:23:11,360
log in a way that's

00:23:09,280 --> 00:23:13,280
compatible with whoever's using my

00:23:11,360 --> 00:23:16,400
third-party library

00:23:13,280 --> 00:23:17,679
um me being the third-party library that

00:23:16,400 --> 00:23:19,679
sounds confusing but if i'm writing a

00:23:17,679 --> 00:23:22,320
library it's a third party for you

00:23:19,679 --> 00:23:23,120
um and right now i can't do that i can't

00:23:22,320 --> 00:23:25,760
have my

00:23:23,120 --> 00:23:27,200
my uh library log in any sensible way

00:23:25,760 --> 00:23:29,120
such that you can find it

00:23:27,200 --> 00:23:31,039
so it would be nice to be able to call a

00:23:29,120 --> 00:23:31,600
standard function that's like hey log

00:23:31,039 --> 00:23:33,919
this

00:23:31,600 --> 00:23:36,159
it turns around and calls the installed

00:23:33,919 --> 00:23:38,000
blogger or something like that so are

00:23:36,159 --> 00:23:39,440
you making the case for a logger being a

00:23:38,000 --> 00:23:41,840
vocabulary type

00:23:39,440 --> 00:23:43,200
yeah i you know and it didn't occur

00:23:41,840 --> 00:23:43,840
occurred to me until i was listening to

00:23:43,200 --> 00:23:47,200
bryce

00:23:43,840 --> 00:23:49,520
so uh you know i think he was

00:23:47,200 --> 00:23:51,039
arguing against that idea but it

00:23:49,520 --> 00:23:51,840
suddenly made me think well maybe it is

00:23:51,039 --> 00:23:53,679
a good idea

00:23:51,840 --> 00:23:55,440
i don't know if it's the most important

00:23:53,679 --> 00:23:57,760
idea right now um

00:23:55,440 --> 00:23:59,039
and i did want to add also what bryce

00:23:57,760 --> 00:24:01,120
was talking about is having a package

00:23:59,039 --> 00:24:03,440
manager would go a long way

00:24:01,120 --> 00:24:05,120
uh towards or something like a package

00:24:03,440 --> 00:24:08,159
manager somehow

00:24:05,120 --> 00:24:09,760
helping to solve the problem of uh

00:24:08,159 --> 00:24:11,440
making it easier to use third-party

00:24:09,760 --> 00:24:13,840
libraries but it

00:24:11,440 --> 00:24:15,600
does occur to me that a logging thing is

00:24:13,840 --> 00:24:17,200
yeah it is a vocabulary type

00:24:15,600 --> 00:24:18,640
you need to log from everywhere in your

00:24:17,200 --> 00:24:19,919
program and it's actually

00:24:18,640 --> 00:24:21,679
it's one of those things that's hard to

00:24:19,919 --> 00:24:22,799
get uh it's hard to write a logger in

00:24:21,679 --> 00:24:25,200
the sense of

00:24:22,799 --> 00:24:26,240
it you want a logger that works even

00:24:25,200 --> 00:24:27,760
during startup

00:24:26,240 --> 00:24:29,760
and you know works in all these strange

00:24:27,760 --> 00:24:32,080
cases it's not an easy thing to do

00:24:29,760 --> 00:24:33,120
so maybe maybe it is something that we

00:24:32,080 --> 00:24:35,279
should consider

00:24:33,120 --> 00:24:36,880
it's interesting that you said it's

00:24:35,279 --> 00:24:38,559
maybe not one of the important things

00:24:36,880 --> 00:24:40,240
because that relates to another question

00:24:38,559 --> 00:24:41,520
which relates to language evolution so

00:24:40,240 --> 00:24:43,440
let me throw it in the

00:24:41,520 --> 00:24:44,720
language and library but let me throw it

00:24:43,440 --> 00:24:48,480
to jf

00:24:44,720 --> 00:24:50,480
it's of the bold plan for c plus 23

00:24:48,480 --> 00:24:51,840
reflection pattern matching contracts

00:24:50,480 --> 00:24:53,600
executors

00:24:51,840 --> 00:24:56,159
what should we expect especially now

00:24:53,600 --> 00:24:58,559
with covid slowing down the rate at

00:24:56,159 --> 00:25:02,400
which we can do work

00:24:58,559 --> 00:25:04,960
i think um the the way we view things

00:25:02,400 --> 00:25:06,080
uh uh uh you know as we schedule them as

00:25:04,960 --> 00:25:07,679
we discuss them is

00:25:06,080 --> 00:25:09,520
is you know we're trying to advance the

00:25:07,679 --> 00:25:11,760
big items right so that bold plan is

00:25:09,520 --> 00:25:13,360
really useful because it tells us well

00:25:11,760 --> 00:25:15,440
here's the priorities right and in the

00:25:13,360 --> 00:25:16,799
bold plan the top priority is actually

00:25:15,440 --> 00:25:20,320
fixing bugs right now

00:25:16,799 --> 00:25:22,080
and so as we've transitioned to this new

00:25:20,320 --> 00:25:23,760
virtual reality here

00:25:22,080 --> 00:25:25,840
of working remotely we you know we have

00:25:23,760 --> 00:25:27,600
weekly meetings but what we do is we try

00:25:25,840 --> 00:25:30,320
to focus on things that are

00:25:27,600 --> 00:25:32,559
fixing bugs because we as a group

00:25:30,320 --> 00:25:34,480
haven't really learned how to

00:25:32,559 --> 00:25:36,320
how to work remotely as well right it's

00:25:34,480 --> 00:25:38,960
a bit difficult and big features

00:25:36,320 --> 00:25:40,480
are hard to to do remotely right like

00:25:38,960 --> 00:25:42,880
there's

00:25:40,480 --> 00:25:44,000
there's institutional knowledge for us

00:25:42,880 --> 00:25:45,840
of how to work

00:25:44,000 --> 00:25:47,039
uh in person it's much easier higher

00:25:45,840 --> 00:25:48,000
bandwidth and things like that you can

00:25:47,039 --> 00:25:51,200
focus

00:25:48,000 --> 00:25:51,760
on on the big features now it happened

00:25:51,200 --> 00:25:54,000
that the

00:25:51,760 --> 00:25:55,600
the bold plan was written in the proof

00:25:54,000 --> 00:25:57,440
before this whole pandemic and we had

00:25:55,600 --> 00:25:59,360
already decided to try to

00:25:57,440 --> 00:26:00,559
improve the pain points in c plus plus

00:25:59,360 --> 00:26:02,320
go and look at

00:26:00,559 --> 00:26:04,080
where where there's defects that we

00:26:02,320 --> 00:26:06,640
wanted to fix and things like that

00:26:04,080 --> 00:26:07,120
while at the same time also looking at

00:26:06,640 --> 00:26:08,640
those

00:26:07,120 --> 00:26:10,320
top priority items that you outlined

00:26:08,640 --> 00:26:11,919
right um so so you know

00:26:10,320 --> 00:26:14,080
there's things like reflection and

00:26:11,919 --> 00:26:16,960
pattern matching on the language side

00:26:14,080 --> 00:26:18,960
um the way we see it is we'll prioritize

00:26:16,960 --> 00:26:20,720
it we'll look at it pretty frequently

00:26:18,960 --> 00:26:22,400
uh make sure that we follow up with the

00:26:20,720 --> 00:26:23,840
authors so we have special working

00:26:22,400 --> 00:26:25,200
groups that work for example on pattern

00:26:23,840 --> 00:26:26,480
matching and they come back to the

00:26:25,200 --> 00:26:27,919
language group and tell us where they

00:26:26,480 --> 00:26:30,240
are what they're thinking

00:26:27,919 --> 00:26:32,000
uh what it looks like because they're

00:26:30,240 --> 00:26:32,799
working on a sample implementation as

00:26:32,000 --> 00:26:36,320
well

00:26:32,799 --> 00:26:37,600
and i i think we're not approaching it

00:26:36,320 --> 00:26:40,159
in the sense of

00:26:37,600 --> 00:26:41,440
we must ship this in 23. it'd be nice

00:26:40,159 --> 00:26:43,360
we're putting everything we can

00:26:41,440 --> 00:26:44,640
towards shipping in 23 right but

00:26:43,360 --> 00:26:46,720
realistically

00:26:44,640 --> 00:26:49,120
might not happen right like we got to

00:26:46,720 --> 00:26:50,480
have actual usage experience and that

00:26:49,120 --> 00:26:51,440
requires an actual implementation that

00:26:50,480 --> 00:26:53,840
works well

00:26:51,440 --> 00:26:55,120
uh in the next year if we want that to

00:26:53,840 --> 00:26:57,039
happen right so

00:26:55,120 --> 00:26:58,640
so unless we agree on all the design

00:26:57,039 --> 00:27:00,240
criteria and we're sure that this is the

00:26:58,640 --> 00:27:03,200
right thing i would count on

00:27:00,240 --> 00:27:04,159
none of these being in in 23 at least on

00:27:03,200 --> 00:27:05,600
the language side

00:27:04,159 --> 00:27:07,360
and on the library side there might be

00:27:05,600 --> 00:27:08,880
other things but bryce can chime in on

00:27:07,360 --> 00:27:10,640
that but on the language side

00:27:08,880 --> 00:27:12,559
i would cautiously say we're not going

00:27:10,640 --> 00:27:13,919
to get anything but we're trying to get

00:27:12,559 --> 00:27:15,840
those things in

00:27:13,919 --> 00:27:17,200
cautiously right like if we can make it

00:27:15,840 --> 00:27:20,159
we'll make it but we're

00:27:17,200 --> 00:27:20,799
not going to rush to that yeah i think

00:27:20,159 --> 00:27:23,520
you both were

00:27:20,799 --> 00:27:24,000
starting to say something too yes i had

00:27:23,520 --> 00:27:27,039
some

00:27:24,000 --> 00:27:29,360
um opinions and blogging

00:27:27,039 --> 00:27:30,399
logging would be very nice to have for

00:27:29,360 --> 00:27:33,679
the reason

00:27:30,399 --> 00:27:35,760
especially tony said and um

00:27:33,679 --> 00:27:37,679
we have to remember that other languages

00:27:35,760 --> 00:27:41,440
in the former sense

00:27:37,679 --> 00:27:44,480
tend not to have standards i mean

00:27:41,440 --> 00:27:45,520
java python etc they they they don't go

00:27:44,480 --> 00:27:47,760
through an iso

00:27:45,520 --> 00:27:49,200
process and have a formal specification

00:27:47,760 --> 00:27:51,279
or all that stuff

00:27:49,200 --> 00:27:53,600
instead they have good distribution

00:27:51,279 --> 00:27:54,399
mechanisms like bryce pointed out we

00:27:53,600 --> 00:27:57,520
need

00:27:54,399 --> 00:28:00,880
packaging distribution central uh

00:27:57,520 --> 00:28:02,480
places for storing things and that way

00:28:00,880 --> 00:28:03,919
you can have sort of a basically

00:28:02,480 --> 00:28:06,640
shootout before

00:28:03,919 --> 00:28:08,000
something wins and becomes a de facto

00:28:06,640 --> 00:28:10,159
standard

00:28:08,000 --> 00:28:12,320
now i don't actually think we need

00:28:10,159 --> 00:28:15,200
compiler support for logging

00:28:12,320 --> 00:28:17,200
we have very good facilities for compile

00:28:15,200 --> 00:28:20,320
time programming that

00:28:17,200 --> 00:28:22,240
is getting us there i have some

00:28:20,320 --> 00:28:22,960
practical experience with the logger so

00:28:22,240 --> 00:28:26,000
this is not

00:28:22,960 --> 00:28:28,080
total random opinion so

00:28:26,000 --> 00:28:30,799
if we could get a decent package manager

00:28:28,080 --> 00:28:32,880
and distribution system i predict we

00:28:30,799 --> 00:28:35,360
would have a logger within a year

00:28:32,880 --> 00:28:36,799
because there are several good ones they

00:28:35,360 --> 00:28:39,440
tend to be

00:28:36,799 --> 00:28:41,120
corporate or or not that widely

00:28:39,440 --> 00:28:43,600
available

00:28:41,120 --> 00:28:45,360
garner while we have you there the next

00:28:43,600 --> 00:28:47,440
question is about something that you and

00:28:45,360 --> 00:28:47,679
i do and since i'm not on the panel and

00:28:47,440 --> 00:28:50,080
you

00:28:47,679 --> 00:28:51,520
are this is yours how can we the

00:28:50,080 --> 00:28:53,840
audience help with the c

00:28:51,520 --> 00:28:56,320
plus plus core guidelines do you need

00:28:53,840 --> 00:28:59,039
editors blog posts people to jump in and

00:28:56,320 --> 00:29:02,240
debate stuff

00:28:59,039 --> 00:29:04,799
that's a hard question i

00:29:02,240 --> 00:29:06,799
feel we are being held back by our day

00:29:04,799 --> 00:29:11,600
jobs

00:29:06,799 --> 00:29:11,600
whenever i look at what i'm doing

00:29:11,760 --> 00:29:15,200
the core guidelines work comes up very

00:29:14,640 --> 00:29:17,440
high

00:29:15,200 --> 00:29:19,760
uh near the top it's the one that

00:29:17,440 --> 00:29:21,360
presses the complexity it's the one that

00:29:19,760 --> 00:29:23,440
addresses learning

00:29:21,360 --> 00:29:26,000
it's the one that addresses where the

00:29:23,440 --> 00:29:28,640
weak points are for future things

00:29:26,000 --> 00:29:30,880
and then i find in a normal working week

00:29:28,640 --> 00:29:33,840
i don't have time to do all the work

00:29:30,880 --> 00:29:36,159
if you look at my list of items i should

00:29:33,840 --> 00:29:39,120
deal with that's enormously long and i'm

00:29:36,159 --> 00:29:39,120
not making progress

00:29:39,440 --> 00:29:45,840
how can people help um they

00:29:42,799 --> 00:29:49,200
can uh try using

00:29:45,840 --> 00:29:52,720
the um core guidelines so that

00:29:49,200 --> 00:29:53,760
they get um so so that we can get solid

00:29:52,720 --> 00:29:56,559
feedback

00:29:53,760 --> 00:29:57,679
rather than random ideas it's fairly

00:29:56,559 --> 00:29:59,760
easy to look at the

00:29:57,679 --> 00:30:01,520
core guidelines and says i don't like

00:29:59,760 --> 00:30:02,399
that or i like that but we should do

00:30:01,520 --> 00:30:05,520
that

00:30:02,399 --> 00:30:07,200
but experience matters we don't want

00:30:05,520 --> 00:30:10,799
everybody's bright idea

00:30:07,200 --> 00:30:12,399
not even our own uh for for

00:30:10,799 --> 00:30:14,559
you haven't been on these phone calls

00:30:12,399 --> 00:30:18,720
but we quite often

00:30:14,559 --> 00:30:21,039
um says no this is just our bright idea

00:30:18,720 --> 00:30:24,399
we are not going to do that

00:30:21,039 --> 00:30:28,320
and so uh discuss things in public

00:30:24,399 --> 00:30:31,840
uh present experience work um

00:30:28,320 --> 00:30:34,799
carefully write a note about it uh

00:30:31,840 --> 00:30:36,080
not just these little two or three line

00:30:34,799 --> 00:30:39,279
things or

00:30:36,080 --> 00:30:43,039
or 10-line things that you put on the

00:30:39,279 --> 00:30:46,080
github things

00:30:43,039 --> 00:30:50,000
actually multi-page arguments with

00:30:46,080 --> 00:30:52,640
good rationale good experience feedback

00:30:50,000 --> 00:30:53,039
so before i ask michael a question about

00:30:52,640 --> 00:30:55,200
he's

00:30:53,039 --> 00:30:56,880
had his hand up and so bryce uh let me

00:30:55,200 --> 00:30:59,679
just direct a follow-up to a leading

00:30:56,880 --> 00:31:01,600
question to you bjarna as a follow-up

00:30:59,679 --> 00:31:03,519
can people help the core guidelines by

00:31:01,600 --> 00:31:05,600
encouraging their companies to adopt

00:31:03,519 --> 00:31:07,919
them

00:31:05,600 --> 00:31:07,919
yes

00:31:08,799 --> 00:31:12,640
should they can you give just a tip or

00:31:10,480 --> 00:31:15,840
two on how they can accomplish this

00:31:12,640 --> 00:31:19,039
okay uh you you can't just

00:31:15,840 --> 00:31:23,120
absorb the whole core guideline

00:31:19,039 --> 00:31:23,519
at once what we need for easier support

00:31:23,120 --> 00:31:27,120
of the

00:31:23,519 --> 00:31:30,640
core guidelines is wider availability of

00:31:27,120 --> 00:31:34,000
static analyzers that support them

00:31:30,640 --> 00:31:36,480
microsoft is slogging along in that area

00:31:34,000 --> 00:31:37,200
i really would like to say that on every

00:31:36,480 --> 00:31:38,880
system

00:31:37,200 --> 00:31:40,799
you can guarantee that there's no

00:31:38,880 --> 00:31:43,679
dangling pointers

00:31:40,799 --> 00:31:45,039
if you follow just the key core

00:31:43,679 --> 00:31:47,840
guidelines things

00:31:45,039 --> 00:31:48,320
that's what you get but you can't really

00:31:47,840 --> 00:31:51,679
do it

00:31:48,320 --> 00:31:55,360
if your compiler is is in a different

00:31:51,679 --> 00:31:56,240
tool infrastructure than what microsoft

00:31:55,360 --> 00:31:59,360
supports

00:31:56,240 --> 00:32:02,640
i would like to see it in clang and in

00:31:59,360 --> 00:32:04,559
gcc so i'll encourage people to help

00:32:02,640 --> 00:32:07,679
those open source projects

00:32:04,559 --> 00:32:10,799
to get static analyzers that support

00:32:07,679 --> 00:32:11,360
the core guidelines until that high

00:32:10,799 --> 00:32:13,440
quality

00:32:11,360 --> 00:32:15,279
patients are not surprised we are going

00:32:13,440 --> 00:32:17,600
to um

00:32:15,279 --> 00:32:18,720
we are going to do less than we should

00:32:17,600 --> 00:32:22,399
apart from that

00:32:18,720 --> 00:32:25,760
grab the core guidelines look at them

00:32:22,399 --> 00:32:27,519
adopt a few see how it works adopt some

00:32:25,760 --> 00:32:32,000
more based on that experience

00:32:27,519 --> 00:32:34,080
gradual introduction thank you michael

00:32:32,000 --> 00:32:35,600
um although bryce has his hand up for

00:32:34,080 --> 00:32:38,159
longer um

00:32:35,600 --> 00:32:39,760
but i will so i'll say my part quickly i

00:32:38,159 --> 00:32:42,080
i think it's important for us to

00:32:39,760 --> 00:32:43,919
to uh for the core guideline i i think

00:32:42,080 --> 00:32:45,919
there's certainly some parts of it that

00:32:43,919 --> 00:32:48,159
that if you're an expert in a particular

00:32:45,919 --> 00:32:49,600
area that's the area to focus on so in

00:32:48,159 --> 00:32:53,039
my talk yesterday

00:32:49,600 --> 00:32:55,360
on safe concurrency c plus um parallel

00:32:53,039 --> 00:32:57,600
guidelines i compare core guidelines and

00:32:55,360 --> 00:32:59,519
contributions from various other sources

00:32:57,600 --> 00:33:01,200
and i notice that that particular area

00:32:59,519 --> 00:33:02,960
is particularly thin

00:33:01,200 --> 00:33:04,320
and that's not the fault of the editors

00:33:02,960 --> 00:33:05,600
it's because there are not that many

00:33:04,320 --> 00:33:06,880
concurrency experts so

00:33:05,600 --> 00:33:08,640
i've been working on a project for the

00:33:06,880 --> 00:33:11,039
last two years to try to strengthen and

00:33:08,640 --> 00:33:13,440
improve that area through mizra

00:33:11,039 --> 00:33:15,279
and then as and coming out of that also

00:33:13,440 --> 00:33:17,679
feeding back to the core guidelines

00:33:15,279 --> 00:33:19,120
um so that's one point second point is i

00:33:17,679 --> 00:33:20,399
totally agree with beyond in terms of

00:33:19,120 --> 00:33:22,240
the static analyzers

00:33:20,399 --> 00:33:23,919
if you can get more static if you can

00:33:22,240 --> 00:33:25,279
get more specific rules in the core guys

00:33:23,919 --> 00:33:27,360
so right now core guidelines have

00:33:25,279 --> 00:33:29,440
but some of their meta rules which are

00:33:27,360 --> 00:33:31,519
hard which are not decidable easily

00:33:29,440 --> 00:33:32,799
and some rules that are decidable which

00:33:31,519 --> 00:33:33,440
means that you can actually statically

00:33:32,799 --> 00:33:35,120
check them

00:33:33,440 --> 00:33:36,960
the more statically checkable rules they

00:33:35,120 --> 00:33:38,399
are not to say that metal rules are not

00:33:36,960 --> 00:33:40,880
useful they are

00:33:38,399 --> 00:33:42,720
um the more you'll be able to involve

00:33:40,880 --> 00:33:45,840
people like coverity synopsis

00:33:42,720 --> 00:33:48,720
ldia per force to be able to generate

00:33:45,840 --> 00:33:50,080
um tools for the couple guidelines in

00:33:48,720 --> 00:33:53,440
addition to well-known ones

00:33:50,080 --> 00:33:54,480
like microsoft red hat um as well as uh

00:33:53,440 --> 00:33:57,679
clients thanks

00:33:54,480 --> 00:33:59,440
so much for christ now thanks

00:33:57,679 --> 00:34:00,960
yeah we have quite a few questions but

00:33:59,440 --> 00:34:02,880
bryce you've been in the queue go

00:34:00,960 --> 00:34:04,320
go we'll take you and then we'll take

00:34:02,880 --> 00:34:07,519
more questions

00:34:04,320 --> 00:34:10,560
so um i think a lot of what what

00:34:07,519 --> 00:34:13,440
we've we've just said about um uh

00:34:10,560 --> 00:34:15,200
not only the logging question but um the

00:34:13,440 --> 00:34:17,200
core guidelines touches on

00:34:15,200 --> 00:34:19,520
what i think is the most important

00:34:17,200 --> 00:34:20,079
innovation in our process that we've had

00:34:19,520 --> 00:34:22,960
in recent

00:34:20,079 --> 00:34:23,520
years which is we have in the past few

00:34:22,960 --> 00:34:25,599
years

00:34:23,520 --> 00:34:26,560
the past one or two years really gotten

00:34:25,599 --> 00:34:29,359
a lot better

00:34:26,560 --> 00:34:31,359
about having priorities and explicit

00:34:29,359 --> 00:34:32,560
plans for what the committee is going to

00:34:31,359 --> 00:34:35,679
be doing

00:34:32,560 --> 00:34:38,320
we didn't always have that um uh

00:34:35,679 --> 00:34:39,760
and in in the the earlier days i think

00:34:38,320 --> 00:34:41,679
that was perfectly fine

00:34:39,760 --> 00:34:43,040
but as the committee grew in size that

00:34:41,679 --> 00:34:45,119
meant that we also

00:34:43,040 --> 00:34:46,639
um had a lot more stakeholders present

00:34:45,119 --> 00:34:48,879
and we had a lot more people with

00:34:46,639 --> 00:34:50,480
with we had a lot more ideas about what

00:34:48,879 --> 00:34:53,040
we should be focusing on

00:34:50,480 --> 00:34:53,520
and it reached a point where we we had a

00:34:53,040 --> 00:34:56,879
lack

00:34:53,520 --> 00:35:00,560
of um focus and fortunately um

00:34:56,879 --> 00:35:02,320
bjarna and a few others

00:35:00,560 --> 00:35:03,760
pointed out this problem and we took

00:35:02,320 --> 00:35:04,400
some steps to address it and i think

00:35:03,760 --> 00:35:06,880
that the

00:35:04,400 --> 00:35:08,000
the greatest of those was that for c

00:35:06,880 --> 00:35:11,119
plus plus

00:35:08,000 --> 00:35:14,160
17 and or sorry for sebas was 20

00:35:11,119 --> 00:35:14,960
and forceps was 23 we had an explicitly

00:35:14,160 --> 00:35:17,599
written up

00:35:14,960 --> 00:35:19,280
plan of what our our main objectives

00:35:17,599 --> 00:35:20,720
were going to be what main features we

00:35:19,280 --> 00:35:24,320
were going to pursue

00:35:20,720 --> 00:35:26,400
um and uh we

00:35:24,320 --> 00:35:28,160
um are doing and i think that having

00:35:26,400 --> 00:35:29,680
that plan makes it a lot easier for us

00:35:28,160 --> 00:35:32,640
to execute on it

00:35:29,680 --> 00:35:34,640
so i i consider myself very lucky as a

00:35:32,640 --> 00:35:35,760
chair to have very clear guidance from

00:35:34,640 --> 00:35:38,240
the committee

00:35:35,760 --> 00:35:39,040
um about what our priorities should be

00:35:38,240 --> 00:35:41,839
for c

00:35:39,040 --> 00:35:42,480
plus 23. um because that helps me

00:35:41,839 --> 00:35:45,839
express

00:35:42,480 --> 00:35:47,359
to to my my working group what we should

00:35:45,839 --> 00:35:49,760
be focusing on

00:35:47,359 --> 00:35:51,920
yeah and we should definitely shout out

00:35:49,760 --> 00:35:54,880
give a shout out to villa votelinen

00:35:51,920 --> 00:35:56,240
who drove creating that document and and

00:35:54,880 --> 00:35:57,200
getting consensus on it through the

00:35:56,240 --> 00:36:00,240
committee so

00:35:57,200 --> 00:36:02,240
it's been very helpful now this next

00:36:00,240 --> 00:36:03,359
question is that the core language is

00:36:02,240 --> 00:36:06,079
becoming bigger

00:36:03,359 --> 00:36:12,240
and more complicated with each release

00:36:06,079 --> 00:36:14,160
how do you plan to simplify the language

00:36:12,240 --> 00:36:16,000
perhaps that includes the question do

00:36:14,160 --> 00:36:17,440
you plan to simplify the language but

00:36:16,000 --> 00:36:20,800
there is a how there

00:36:17,440 --> 00:36:23,440
you are you can't uh

00:36:20,800 --> 00:36:26,720
there's so much code out there that

00:36:23,440 --> 00:36:29,280
whatever we change whatever we stop

00:36:26,720 --> 00:36:32,000
from working we have a hundred thousand

00:36:29,280 --> 00:36:34,480
or million people screaming at us

00:36:32,000 --> 00:36:35,440
people always want three things they

00:36:34,480 --> 00:36:38,480
want

00:36:35,440 --> 00:36:41,200
a smaller language they want a couple of

00:36:38,480 --> 00:36:43,200
extra features and they want us not to

00:36:41,200 --> 00:36:45,839
break their code

00:36:43,200 --> 00:36:46,560
we cannot simplify the language what we

00:36:45,839 --> 00:36:49,599
can do

00:36:46,560 --> 00:36:53,359
is simplify the use of the language

00:36:49,599 --> 00:36:56,400
we can modify educate modernize

00:36:53,359 --> 00:36:59,200
education focusing on

00:36:56,400 --> 00:36:59,680
what is is easy to get started with and

00:36:59,200 --> 00:37:02,560
what is

00:36:59,680 --> 00:37:03,839
genuinely useful today and then we can

00:37:02,560 --> 00:37:07,280
use

00:37:03,839 --> 00:37:08,400
core guidelines backed by static

00:37:07,280 --> 00:37:13,040
analysis

00:37:08,400 --> 00:37:15,119
to enforce uh a simpler usage pattern

00:37:13,040 --> 00:37:17,599
i mean and the core guidelines are not

00:37:15,119 --> 00:37:19,680
random separated from my ideas of

00:37:17,599 --> 00:37:21,520
language evolution

00:37:19,680 --> 00:37:22,960
and i noticed a number of you nodding

00:37:21,520 --> 00:37:25,359
there uh in ball

00:37:22,960 --> 00:37:25,359
michael

00:37:26,560 --> 00:37:31,520
yeah is that you don't need to learn all

00:37:28,720 --> 00:37:34,320
of c plus to do something useful

00:37:31,520 --> 00:37:35,839
and and indeed i'm hoping that jf is in

00:37:34,320 --> 00:37:36,400
the education group is going to go

00:37:35,839 --> 00:37:38,720
through certain

00:37:36,400 --> 00:37:40,160
certain ways of of showing how certain

00:37:38,720 --> 00:37:43,040
sets of c plus plus

00:37:40,160 --> 00:37:44,560
can be useful enough for for for doing

00:37:43,040 --> 00:37:46,720
reasonable tasks

00:37:44,560 --> 00:37:48,480
um we're not saying we need to subset

00:37:46,720 --> 00:37:50,160
the language but from an education point

00:37:48,480 --> 00:37:50,800
of view you can develop a reasonable

00:37:50,160 --> 00:37:52,320
road map

00:37:50,800 --> 00:37:55,839
that allows you to do something

00:37:52,320 --> 00:37:55,839
something useful thank you

00:37:56,000 --> 00:38:03,280
i would love to to end just my view

00:37:59,200 --> 00:38:03,599
that i think that simplicity shouldn't

00:38:03,280 --> 00:38:06,720
be

00:38:03,599 --> 00:38:09,680
a goal for the sake of education but

00:38:06,720 --> 00:38:11,280
it should be um explicit it should be a

00:38:09,680 --> 00:38:13,760
language that

00:38:11,280 --> 00:38:14,480
allows you to to explicitly express what

00:38:13,760 --> 00:38:18,720
you want

00:38:14,480 --> 00:38:21,280
and and that would be useful both for um

00:38:18,720 --> 00:38:22,800
for developers that work 20 years and

00:38:21,280 --> 00:38:25,599
and for new ones

00:38:22,800 --> 00:38:27,599
and besides from that i agree that some

00:38:25,599 --> 00:38:31,680
kind of a guideline would be great

00:38:27,599 --> 00:38:35,359
for for making this

00:38:31,680 --> 00:38:46,800
clear for educators so

00:38:35,359 --> 00:38:49,200
thank you

00:38:46,800 --> 00:38:50,800
um sorry would it make sense to delay c

00:38:49,200 --> 00:38:53,440
plus plus 23

00:38:50,800 --> 00:38:55,520
into c plus plus 24 due to the whole

00:38:53,440 --> 00:39:01,839
calamity of this year perhaps someone

00:38:55,520 --> 00:39:01,839
who hasn't commented lately

00:39:03,200 --> 00:39:08,720
i'll just comment quickly i think

00:39:06,240 --> 00:39:10,720
no we absolutely shouldn't do that the

00:39:08,720 --> 00:39:13,119
thing that i believe has the strongest

00:39:10,720 --> 00:39:15,200
consensus on the committee is that the

00:39:13,119 --> 00:39:18,320
schedule is a good thing

00:39:15,200 --> 00:39:19,200
um that we ship we ship on time we we

00:39:18,320 --> 00:39:21,359
have a model

00:39:19,200 --> 00:39:23,040
where we don't have feature-centric

00:39:21,359 --> 00:39:25,680
releases we ship on a schedule

00:39:23,040 --> 00:39:29,839
so we'll ship a standard c plus 23 with

00:39:25,680 --> 00:39:29,839
the things that are ready

00:39:30,640 --> 00:39:34,560
i actually think too that um we just did

00:39:33,359 --> 00:39:37,920
a giant release

00:39:34,560 --> 00:39:41,200
like c post plus 20 is too big to

00:39:37,920 --> 00:39:43,680
fit in my my brain right now um

00:39:41,200 --> 00:39:44,880
it's it's kind of nice that we uh maybe

00:39:43,680 --> 00:39:48,640
do some little things and

00:39:44,880 --> 00:39:50,160
and fix up some stuff and um

00:39:48,640 --> 00:39:52,240
and overall i just want to mention like

00:39:50,160 --> 00:39:54,800
we're we're kind of lucky we're

00:39:52,240 --> 00:39:56,160
we're lucky people on on the call people

00:39:54,800 --> 00:39:59,359
are that are at the

00:39:56,160 --> 00:40:01,599
conference we're in an industry that for

00:39:59,359 --> 00:40:04,480
the most part we can work from home

00:40:01,599 --> 00:40:05,599
uh more stable than a lot of other jobs

00:40:04,480 --> 00:40:08,000
um

00:40:05,599 --> 00:40:10,720
and uh it's still it's still yet it's

00:40:08,000 --> 00:40:12,319
affecting us even like you know

00:40:10,720 --> 00:40:13,920
i'm depressed i don't know everyone else

00:40:12,319 --> 00:40:17,200
you know like it's it's not

00:40:13,920 --> 00:40:19,280
it's not simple um so it is gonna

00:40:17,200 --> 00:40:20,480
affect the committee um i've been to

00:40:19,280 --> 00:40:23,200
hardly any committee

00:40:20,480 --> 00:40:24,400
online meetings because this is you know

00:40:23,200 --> 00:40:25,599
trying to trying to live through the

00:40:24,400 --> 00:40:28,640
next day

00:40:25,599 --> 00:40:30,240
um so you know maybe

00:40:28,640 --> 00:40:31,520
c plus plus 23 will be slightly

00:40:30,240 --> 00:40:32,960
different than what we expected but i

00:40:31,520 --> 00:40:36,000
still expect there will be good things

00:40:32,960 --> 00:40:37,040
and i think uh i think it'll be a good

00:40:36,000 --> 00:40:40,400
chance to

00:40:37,040 --> 00:40:43,440
to uh take some time

00:40:40,400 --> 00:40:44,720
and do things right so it might it might

00:40:43,440 --> 00:40:46,400
work out well

00:40:44,720 --> 00:40:48,640
i don't i don't think that we should let

00:40:46,400 --> 00:40:50,640
it change our plans it might change how

00:40:48,640 --> 00:40:52,160
we execute on those plans because we

00:40:50,640 --> 00:40:53,680
have to be mindful of

00:40:52,160 --> 00:40:55,280
not only the the change of the

00:40:53,680 --> 00:40:57,200
environment but also

00:40:55,280 --> 00:40:59,599
you know we have to put the both

00:40:57,200 --> 00:41:02,800
physical and mental health of our

00:40:59,599 --> 00:41:04,240
of our participants first yeah go to

00:41:02,800 --> 00:41:06,160
tony

00:41:04,240 --> 00:41:07,359
um i heard a beautiful quote from a

00:41:06,160 --> 00:41:09,280
friend of mine he says so

00:41:07,359 --> 00:41:10,960
um computer scientists are naturally

00:41:09,280 --> 00:41:14,240
socially distant anyway

00:41:10,960 --> 00:41:18,319
so i don't know if seaports was that

00:41:14,240 --> 00:41:21,680
it's gonna affect our plans a great deal

00:41:18,319 --> 00:41:22,560
um i would um i i need to see people

00:41:21,680 --> 00:41:24,640
face to face

00:41:22,560 --> 00:41:26,640
with a white board otherwise i become

00:41:24,640 --> 00:41:30,079
very ineffective and i

00:41:26,640 --> 00:41:32,560
risk being in a bubble apart from that

00:41:30,079 --> 00:41:33,359
we should stick to schedule we have a

00:41:32,560 --> 00:41:35,920
plan

00:41:33,359 --> 00:41:37,520
we can execute on the plan given the

00:41:35,920 --> 00:41:39,760
search we can't do as much

00:41:37,520 --> 00:41:40,560
uh in my opinion as we could have done

00:41:39,760 --> 00:41:42,880
before

00:41:40,560 --> 00:41:44,640
we should be very happy if we got one of

00:41:42,880 --> 00:41:48,079
the major issues

00:41:44,640 --> 00:41:52,319
and after c plus 11 which was a major

00:41:48,079 --> 00:41:55,280
move we got 14 that handles the things

00:41:52,319 --> 00:41:57,920
we couldn't get into 11 and things we

00:41:55,280 --> 00:42:00,800
only learned after 11 was out

00:41:57,920 --> 00:42:02,319
i think the 23 could be something very

00:42:00,800 --> 00:42:04,400
similar than 14

00:42:02,319 --> 00:42:05,440
in that sense and we should be very

00:42:04,400 --> 00:42:08,960
happy

00:42:05,440 --> 00:42:12,079
14 polish the corners and completed 11.

00:42:08,960 --> 00:42:15,599
maybe 23 will do that for

00:42:12,079 --> 00:42:17,359
for 20. yes now

00:42:15,599 --> 00:42:19,680
let me just jump in with an observation

00:42:17,359 --> 00:42:20,240
that you made bjorn that c plus was 20

00:42:19,680 --> 00:42:22,960
it's the

00:42:20,240 --> 00:42:25,040
the the third time that we've shipped a

00:42:22,960 --> 00:42:29,280
major standard upgrade major standard

00:42:25,040 --> 00:42:32,480
in our history and it's the first time

00:42:29,280 --> 00:42:33,839
i heard you say in prague that c plus

00:42:32,480 --> 00:42:36,640
has with the exception of

00:42:33,839 --> 00:42:38,480
uniform function call has every single

00:42:36,640 --> 00:42:40,400
feature that you described

00:42:38,480 --> 00:42:41,599
in the design and evolution of c plus

00:42:40,400 --> 00:42:44,000
plots back

00:42:41,599 --> 00:42:46,800
in 1994 design an evolution of c plus i

00:42:44,000 --> 00:42:50,000
don't know if anybody has seen that book

00:42:46,800 --> 00:42:53,440
anybody have oh that that's it

00:42:50,000 --> 00:42:55,839
and i think uh i have it as well

00:42:53,440 --> 00:42:56,960
tony did that's your copy though that

00:42:55,839 --> 00:43:00,160
you loaned me

00:42:56,960 --> 00:43:03,280
so i could give it to you yeah yeah

00:43:00,160 --> 00:43:03,280
all right thanks thanks

00:43:04,160 --> 00:43:06,960
you could share that

00:43:08,720 --> 00:43:13,839
did anyone else need it

00:43:14,560 --> 00:43:22,240
such a smooth handle was a bit difficult

00:43:17,920 --> 00:43:25,920
yeah involved you wanna continue

00:43:22,240 --> 00:43:26,960
and by the way uh the follow-up to

00:43:25,920 --> 00:43:30,480
c-plus

00:43:26,960 --> 00:43:33,760
to the dne the late history paper

00:43:30,480 --> 00:43:36,880
uh is just roughly the second volume

00:43:33,760 --> 00:43:36,880
that people have asked for

00:43:37,359 --> 00:43:41,839
don't send it to me please

00:43:46,960 --> 00:43:50,640
we're having fun with dne after all

00:43:48,720 --> 00:43:53,520
these years beard

00:43:50,640 --> 00:43:54,319
wow and i don't have that coffee handy

00:43:53,520 --> 00:43:56,720
so here

00:43:54,319 --> 00:43:58,640
here is another question that sounds a

00:43:56,720 --> 00:44:00,480
lot like one we just had but this is a

00:43:58,640 --> 00:44:02,480
brand new question

00:44:00,480 --> 00:44:03,760
that is the currently highest upvoted

00:44:02,480 --> 00:44:06,640
question which means i think that

00:44:03,760 --> 00:44:07,520
they weren't satisfied with your answers

00:44:06,640 --> 00:44:09,119
um so let's

00:44:07,520 --> 00:44:11,599
it's those who didn't comment on the

00:44:09,119 --> 00:44:14,480
first one perhaps you can weigh in

00:44:11,599 --> 00:44:17,359
the follow-up is at some point is

00:44:14,480 --> 00:44:19,839
breaking backward compatibility the only

00:44:17,359 --> 00:44:23,920
way to truly simplify the language

00:44:19,839 --> 00:44:25,520
or change some of the wrong defaults

00:44:23,920 --> 00:44:27,359
that's the current upvoted question

00:44:25,520 --> 00:44:29,520
which has come in since the last

00:44:27,359 --> 00:44:31,760
discussion on simplification it seems

00:44:29,520 --> 00:44:34,800
people aren't satisfied yet tony

00:44:31,760 --> 00:44:36,319
um i i don't know if this quite answers

00:44:34,800 --> 00:44:38,400
the question but i've had this

00:44:36,319 --> 00:44:39,599
um there's been a few things in the

00:44:38,400 --> 00:44:41,040
language

00:44:39,599 --> 00:44:44,640
that people are like oh we can never

00:44:41,040 --> 00:44:46,880
change that like we can never change

00:44:44,640 --> 00:44:49,040
how we initialize or don't initialize

00:44:46,880 --> 00:44:51,280
integers or we can never change that

00:44:49,040 --> 00:44:52,800
functions are mutable by default instead

00:44:51,280 --> 00:44:56,160
of being const by default or

00:44:52,800 --> 00:44:57,760
explicit you know uh constructors are

00:44:56,160 --> 00:44:59,440
implicit instead of explicit by a

00:44:57,760 --> 00:45:01,520
default um

00:44:59,440 --> 00:45:02,480
you can change we can change all these

00:45:01,520 --> 00:45:05,040
things

00:45:02,480 --> 00:45:06,560
but i think for any change like that

00:45:05,040 --> 00:45:07,599
especially something where we want to go

00:45:06,560 --> 00:45:10,000
from

00:45:07,599 --> 00:45:11,040
from a to not a to go to the exact

00:45:10,000 --> 00:45:12,560
opposite it's it's

00:45:11,040 --> 00:45:14,319
slightly easier if we just want to stop

00:45:12,560 --> 00:45:15,920
doing something if we want to stop doing

00:45:14,319 --> 00:45:17,359
auto pointer we you know that that can

00:45:15,920 --> 00:45:19,599
take five or ten years

00:45:17,359 --> 00:45:21,680
if we want to actually switch uh make

00:45:19,599 --> 00:45:22,079
all constructors explicit unless you

00:45:21,680 --> 00:45:25,040
said

00:45:22,079 --> 00:45:26,640
implicit um there's a path for that it's

00:45:25,040 --> 00:45:28,880
just a 20-year path

00:45:26,640 --> 00:45:30,480
like first you would have to introduce

00:45:28,880 --> 00:45:32,960
the implicit keyword

00:45:30,480 --> 00:45:34,480
you say yeah there's explicit and and

00:45:32,960 --> 00:45:35,839
there's also the implicit keyword

00:45:34,480 --> 00:45:38,160
and that's all you do that's just one

00:45:35,839 --> 00:45:41,440
release then the next release

00:45:38,160 --> 00:45:44,880
or maybe even two releases you say um

00:45:41,440 --> 00:45:46,079
you say uh you have to use one of these

00:45:44,880 --> 00:45:47,920
one of these words and you don't you

00:45:46,079 --> 00:45:50,000
don't have to but the compiler starts

00:45:47,920 --> 00:45:51,680
warning that hey you didn't say explicit

00:45:50,000 --> 00:45:53,920
or implicit you should really

00:45:51,680 --> 00:45:55,280
specify and maybe it's a it's a core

00:45:53,920 --> 00:45:57,839
guideline at first

00:45:55,280 --> 00:46:00,160
and then eventually you turn on the at

00:45:57,839 --> 00:46:02,079
some point we say you know you must

00:46:00,160 --> 00:46:03,760
say implicit or explicit but this has

00:46:02,079 --> 00:46:05,760
been like 10 or 15 years

00:46:03,760 --> 00:46:07,839
because if we turn that on too early

00:46:05,760 --> 00:46:08,720
everyone be screaming at us that nothing

00:46:07,839 --> 00:46:10,720
compiles

00:46:08,720 --> 00:46:11,839
give people lots of time to do it and

00:46:10,720 --> 00:46:13,839
then eventually

00:46:11,839 --> 00:46:16,400
you say you don't need to say explicit

00:46:13,839 --> 00:46:18,400
anymore it switches to the default

00:46:16,400 --> 00:46:20,240
but there was a path and that path took

00:46:18,400 --> 00:46:23,200
at least 20 years to get to

00:46:20,240 --> 00:46:24,000
like 20 years i might not be programming

00:46:23,200 --> 00:46:27,359
anymore

00:46:24,000 --> 00:46:29,760
um but i would gladly work towards

00:46:27,359 --> 00:46:31,040
on on things that take 20 years to do in

00:46:29,760 --> 00:46:33,520
the committee

00:46:31,040 --> 00:46:36,079
if that helps the the next generation of

00:46:33,520 --> 00:46:36,079
developers

00:46:37,359 --> 00:46:46,400
it took 20 years for some

00:46:42,000 --> 00:46:50,000
to not have to support arm compatibility

00:46:46,400 --> 00:46:53,920
that's not even a standard this was

00:46:50,000 --> 00:46:56,079
what what i did in 88

00:46:53,920 --> 00:46:57,920
this is very very hard people

00:46:56,079 --> 00:47:00,560
underestimate what it takes

00:46:57,920 --> 00:47:01,440
they say i can do it for my code i can

00:47:00,560 --> 00:47:04,640
do it for

00:47:01,440 --> 00:47:06,480
for my company but you know it it

00:47:04,640 --> 00:47:07,839
doesn't really matter if you can do it

00:47:06,480 --> 00:47:09,920
for your company

00:47:07,839 --> 00:47:10,960
there will be a million people are doing

00:47:09,920 --> 00:47:13,440
something else

00:47:10,960 --> 00:47:14,160
and furthermore we can't get agreement

00:47:13,440 --> 00:47:19,280
on what

00:47:14,160 --> 00:47:21,599
it is that needs to go if it's major

00:47:19,280 --> 00:47:23,440
if it's minor it doesn't matter then

00:47:21,599 --> 00:47:26,079
we're just fiddling with details

00:47:23,440 --> 00:47:28,319
but take a major issue and change it

00:47:26,079 --> 00:47:31,440
from x to non x

00:47:28,319 --> 00:47:33,200
i i don't see it happening this is what

00:47:31,440 --> 00:47:35,520
you have to live with with a successful

00:47:33,200 --> 00:47:38,800
language

00:47:35,520 --> 00:47:40,160
they are for hana um yeah

00:47:38,800 --> 00:47:42,000
i think there are certain types of

00:47:40,160 --> 00:47:43,040
issues that are easier than others and

00:47:42,000 --> 00:47:45,359
as biannual was saying

00:47:43,040 --> 00:47:47,280
like the the smaller ones and often

00:47:45,359 --> 00:47:50,400
cases are easier because

00:47:47,280 --> 00:47:52,000
um what we can do is use tooling to help

00:47:50,400 --> 00:47:55,359
us in a lot of cases right and

00:47:52,000 --> 00:47:56,319
and have developers opt in to to what

00:47:55,359 --> 00:47:59,440
they want to change

00:47:56,319 --> 00:48:01,920
right so for example uh um in the last

00:47:59,440 --> 00:48:03,599
years a bit more i've i've worked on

00:48:01,920 --> 00:48:04,160
improving security of particular code

00:48:03,599 --> 00:48:06,720
bases

00:48:04,160 --> 00:48:08,160
and that's a fully opt-in thing and we

00:48:06,720 --> 00:48:10,000
modified the compiler

00:48:08,160 --> 00:48:11,839
you know static analysis using better

00:48:10,000 --> 00:48:14,400
guidelines as well as using better

00:48:11,839 --> 00:48:17,280
diagnostics and then having the compiler

00:48:14,400 --> 00:48:18,800
do more things that you you you want to

00:48:17,280 --> 00:48:20,480
improve the security of your code base

00:48:18,800 --> 00:48:21,440
and but that's purely opt-in right like

00:48:20,480 --> 00:48:23,839
the difficulty

00:48:21,440 --> 00:48:25,280
really comes in when the standard says

00:48:23,839 --> 00:48:27,760
this is what you must do

00:48:25,280 --> 00:48:29,680
right that's why having guidelines is

00:48:27,760 --> 00:48:31,359
such a powerful thing if we all agree on

00:48:29,680 --> 00:48:33,520
what those guidelines are because

00:48:31,359 --> 00:48:35,280
that's pretty opt-in if you decide i

00:48:33,520 --> 00:48:37,200
want better security therefore i'm going

00:48:35,280 --> 00:48:38,640
to follow these guidelines or i want you

00:48:37,200 --> 00:48:40,000
know fewer gotchas in my code i'll

00:48:38,640 --> 00:48:41,599
follow these guidelines

00:48:40,000 --> 00:48:43,119
you do it at your own pace right there

00:48:41,599 --> 00:48:45,760
there are certain code bases that people

00:48:43,119 --> 00:48:47,119
like cannot touch for reasons for

00:48:45,760 --> 00:48:48,160
particular reasons right like if you're

00:48:47,119 --> 00:48:49,520
certifying your code

00:48:48,160 --> 00:48:51,040
you can't touch it right like there's a

00:48:49,520 --> 00:48:52,559
typo who cares you're not going to

00:48:51,040 --> 00:48:53,599
change the code and re-certify it for a

00:48:52,559 --> 00:48:56,240
typo

00:48:53,599 --> 00:48:57,760
or because it's hard to read right like

00:48:56,240 --> 00:48:59,680
it's already been certified it works

00:48:57,760 --> 00:49:02,079
well for the last 20 years and so

00:48:59,680 --> 00:49:03,440
um i think we have to be really careful

00:49:02,079 --> 00:49:04,079
on how we change things i think it's

00:49:03,440 --> 00:49:06,079
important

00:49:04,079 --> 00:49:07,680
to change things for the better and

00:49:06,079 --> 00:49:10,160
tooling is really the key here and

00:49:07,680 --> 00:49:12,319
we have to do it really mindfully of of

00:49:10,160 --> 00:49:14,400
what developers want as well right

00:49:12,319 --> 00:49:16,319
um i think it's useful to do these big

00:49:14,400 --> 00:49:18,079
experiments as kind of

00:49:16,319 --> 00:49:19,359
side parts of c plus plus we have

00:49:18,079 --> 00:49:20,960
tooling helping us see

00:49:19,359 --> 00:49:22,559
if i do this does it work it worked in

00:49:20,960 --> 00:49:24,160
this code base is it going to work in

00:49:22,559 --> 00:49:25,760
other code basis i think that's really

00:49:24,160 --> 00:49:28,000
key really understanding what that looks

00:49:25,760 --> 00:49:28,000
like

00:49:28,839 --> 00:49:33,040
uh

00:49:30,079 --> 00:49:33,359
okay um i i just i just wanted to add

00:49:33,040 --> 00:49:36,400
two

00:49:33,359 --> 00:49:38,960
to jazz um like um

00:49:36,400 --> 00:49:39,760
line of thought and say that i think

00:49:38,960 --> 00:49:42,800
it's

00:49:39,760 --> 00:49:45,440
uh it needs to to be understood that

00:49:42,800 --> 00:49:46,319
uh programming language is a way to

00:49:45,440 --> 00:49:48,800
express

00:49:46,319 --> 00:49:49,760
for develop for the developer to express

00:49:48,800 --> 00:49:52,319
uh will

00:49:49,760 --> 00:49:54,160
for the for the compiler and eventually

00:49:52,319 --> 00:49:57,599
to get to the machine so

00:49:54,160 --> 00:49:59,760
i think it's also important to

00:49:57,599 --> 00:50:01,200
to identify which features we would like

00:49:59,760 --> 00:50:04,559
the tooling to

00:50:01,200 --> 00:50:06,880
to have the decision of and which ones

00:50:04,559 --> 00:50:09,359
we think that it's the something that

00:50:06,880 --> 00:50:12,720
the developer needs to

00:50:09,359 --> 00:50:15,599
to express in in the code

00:50:12,720 --> 00:50:16,160
so so that's that's a and like doing

00:50:15,599 --> 00:50:19,280
everything

00:50:16,160 --> 00:50:22,000
automatically is is very good for

00:50:19,280 --> 00:50:24,839
for certain things but we just need to

00:50:22,000 --> 00:50:26,240
make sure that we under identify the

00:50:24,839 --> 00:50:30,079
rights

00:50:26,240 --> 00:50:31,280
that's that's i don't have an exact

00:50:30,079 --> 00:50:34,720
answer for like

00:50:31,280 --> 00:50:37,200
how to fix uh to be able to break

00:50:34,720 --> 00:50:38,720
things but there are things we uh which

00:50:37,200 --> 00:50:40,480
can be

00:50:38,720 --> 00:50:42,319
which cannot be break because and you

00:50:40,480 --> 00:50:43,280
can be uh in committee we cannot change

00:50:42,319 --> 00:50:44,720
them because they are on the

00:50:43,280 --> 00:50:48,240
implementation or decision

00:50:44,720 --> 00:50:52,319
of implementers you can uh

00:50:48,240 --> 00:50:55,839
you can see uh on strategics obviously

00:50:52,319 --> 00:50:59,520
my favorite topic uh design

00:50:55,839 --> 00:51:01,680
is sound but uh the implementation is

00:50:59,520 --> 00:51:03,119
implemented in some way and uh if we

00:51:01,680 --> 00:51:05,119
change it it will break api

00:51:03,119 --> 00:51:07,359
compatibility

00:51:05,119 --> 00:51:08,880
and we can we cannot do it and we cannot

00:51:07,359 --> 00:51:11,440
do it with

00:51:08,880 --> 00:51:13,280
most of the things and it's up to

00:51:11,440 --> 00:51:13,920
implementers to decide but uh do you

00:51:13,280 --> 00:51:17,119
remember

00:51:13,920 --> 00:51:23,839
string with gcc api fiasco

00:51:17,119 --> 00:51:26,800
i would say it still haunts me

00:51:23,839 --> 00:51:28,000
thank you all now our next question

00:51:26,800 --> 00:51:30,319
there's actually two

00:51:28,000 --> 00:51:32,079
questions side by side which are almost

00:51:30,319 --> 00:51:33,599
identical and combined they have the

00:51:32,079 --> 00:51:36,319
highest up votes

00:51:33,599 --> 00:51:36,880
how do i get involved in the iso c plus

00:51:36,319 --> 00:51:38,400
committee

00:51:36,880 --> 00:51:41,920
as someone who's never participated

00:51:38,400 --> 00:51:45,119
before how do i begin getting involved

00:51:41,920 --> 00:51:46,160
so so that is currently a little bit

00:51:45,119 --> 00:51:47,680
tricky because

00:51:46,160 --> 00:51:50,720
normally the guidance that we give

00:51:47,680 --> 00:51:52,640
people is to um

00:51:50,720 --> 00:51:54,079
uh you know you can come to one of the

00:51:52,640 --> 00:51:55,200
face-to-face meetings

00:51:54,079 --> 00:51:56,720
um and that's a good way to get

00:51:55,200 --> 00:51:57,760
initiated but those aren't happening

00:51:56,720 --> 00:52:00,160
right now so uh

00:51:57,760 --> 00:52:01,839
i think the best way to get involved is

00:52:00,160 --> 00:52:02,720
the way that i originally got involved

00:52:01,839 --> 00:52:05,359
which is

00:52:02,720 --> 00:52:07,280
when i before i was on the committee um

00:52:05,359 --> 00:52:09,520
i was aware of the committee

00:52:07,280 --> 00:52:11,520
and i was aware of the committee papers

00:52:09,520 --> 00:52:15,200
and there was one particular paper

00:52:11,520 --> 00:52:17,920
um on multi-dimensional arrays that was

00:52:15,200 --> 00:52:18,960
of interest to me it was in the domain

00:52:17,920 --> 00:52:22,160
that i worked in

00:52:18,960 --> 00:52:24,480
so i contacted the paper author and um

00:52:22,160 --> 00:52:26,160
i gave him some of my thoughts about and

00:52:24,480 --> 00:52:28,319
feedback on his paper

00:52:26,160 --> 00:52:30,880
suggestions for how he might improve it

00:52:28,319 --> 00:52:34,000
you know some typo fixes stuff like that

00:52:30,880 --> 00:52:36,800
and out of that interaction with him um

00:52:34,000 --> 00:52:38,480
uh i got you know involved in in the

00:52:36,800 --> 00:52:39,440
committee and then eventually he said

00:52:38,480 --> 00:52:40,880
hey you should go to one of the

00:52:39,440 --> 00:52:42,880
face-to-face meetings

00:52:40,880 --> 00:52:44,559
so i think i think that's probably the

00:52:42,880 --> 00:52:47,760
best way for you to get involved

00:52:44,559 --> 00:52:48,079
is not um to get involved in general but

00:52:47,760 --> 00:52:51,119
to

00:52:48,079 --> 00:52:52,559
just to find a particular thing that the

00:52:51,119 --> 00:52:55,200
committee's working on

00:52:52,559 --> 00:52:56,400
that you believe is important or that

00:52:55,200 --> 00:53:00,400
you have feedback

00:52:56,400 --> 00:53:03,760
or comments on and all of the papers um

00:53:00,400 --> 00:53:05,359
have um the authors listed and contact

00:53:03,760 --> 00:53:06,960
information for those authors so you can

00:53:05,359 --> 00:53:10,160
reach out to those authors

00:53:06,960 --> 00:53:11,760
um and uh give them your your input and

00:53:10,160 --> 00:53:14,160
i i think you'll find

00:53:11,760 --> 00:53:15,760
that the majority of paper of proposal

00:53:14,160 --> 00:53:18,640
authors

00:53:15,760 --> 00:53:19,280
are going to be very excited to get

00:53:18,640 --> 00:53:22,800
feedback

00:53:19,280 --> 00:53:23,760
from people that's that's often the one

00:53:22,800 --> 00:53:29,839
thing that

00:53:23,760 --> 00:53:29,839
can be hard to get

00:53:31,599 --> 00:53:36,160
sg14 and by extension sg19 is one of the

00:53:34,640 --> 00:53:38,960
prototypical um

00:53:36,160 --> 00:53:40,720
outreach groups and we often get um

00:53:38,960 --> 00:53:42,640
people who are not normally officially

00:53:40,720 --> 00:53:44,960
represented and in the committee through

00:53:42,640 --> 00:53:46,400
the national body or whatever so that

00:53:44,960 --> 00:53:49,280
they can participate and

00:53:46,400 --> 00:53:51,200
in so doing they can join with joint

00:53:49,280 --> 00:53:54,559
after papers as bryce said

00:53:51,200 --> 00:53:56,319
and if they can't attend committee

00:53:54,559 --> 00:53:58,400
meetings or call in

00:53:56,319 --> 00:54:00,480
um they are being proxied by some of the

00:53:58,400 --> 00:54:02,400
uh more experienced members of those

00:54:00,480 --> 00:54:03,760
of those groups now they're not the only

00:54:02,400 --> 00:54:05,200
outreach groups anymore there are other

00:54:03,760 --> 00:54:08,400
groups that are just as outreached

00:54:05,200 --> 00:54:10,160
um so that is a way to get in uh even if

00:54:08,400 --> 00:54:11,119
you're not registered as a natural body

00:54:10,160 --> 00:54:13,200
but otherwise

00:54:11,119 --> 00:54:14,400
the the way because it's an iso you have

00:54:13,200 --> 00:54:17,280
you kind of have to be

00:54:14,400 --> 00:54:19,359
you know a natural body or whatever but

00:54:17,280 --> 00:54:21,280
but i think that herb has made it fairly

00:54:19,359 --> 00:54:23,520
relaxing that almost anybody

00:54:21,280 --> 00:54:25,440
in in in the spirit of openness to allow

00:54:23,520 --> 00:54:28,480
almost anybody to participate

00:54:25,440 --> 00:54:29,839
um with very with just some notice so in

00:54:28,480 --> 00:54:30,960
that way i think we're trying to be as

00:54:29,839 --> 00:54:31,760
open as possible and there are many

00:54:30,960 --> 00:54:35,040
different avenues

00:54:31,760 --> 00:54:37,280
to allow us to do that yes

00:54:35,040 --> 00:54:40,000
i would like to add to that uh michael

00:54:37,280 --> 00:54:42,960
that the same is true for sg20

00:54:40,000 --> 00:54:44,640
and especially in sg20 it is fairly easy

00:54:42,960 --> 00:54:46,960
to do that because we

00:54:44,640 --> 00:54:47,839
want to write these small descriptions

00:54:46,960 --> 00:54:49,599
of

00:54:47,839 --> 00:54:51,280
what are guidelines for teaching this

00:54:49,599 --> 00:54:54,240
specific topic

00:54:51,280 --> 00:54:54,960
and people who have experience in

00:54:54,240 --> 00:54:56,400
teaching that

00:54:54,960 --> 00:54:58,720
they could write those guidelines you

00:54:56,400 --> 00:55:01,920
don't have to know all about

00:54:58,720 --> 00:55:03,280
all of these things all of c just how do

00:55:01,920 --> 00:55:05,680
i teach this so yes

00:55:03,280 --> 00:55:06,480
please participate and it's uh we have a

00:55:05,680 --> 00:55:09,359
mailing list

00:55:06,480 --> 00:55:11,599
that you can just join and the decoder

00:55:09,359 --> 00:55:14,960
ring for sg20

00:55:11,599 --> 00:55:14,960
is that that's for teaching

00:55:15,200 --> 00:55:19,920
sg20 is for teaching yes yes because if

00:55:18,400 --> 00:55:20,720
some of the sgs were mentioned real

00:55:19,920 --> 00:55:22,559
quick

00:55:20,720 --> 00:55:24,160
and you know related to that the current

00:55:22,559 --> 00:55:25,040
top voted question and perhaps we can

00:55:24,160 --> 00:55:27,760
finish on that

00:55:25,040 --> 00:55:30,000
you mentioned having examples it asks is

00:55:27,760 --> 00:55:30,960
there a site that shows examples of each

00:55:30,000 --> 00:55:36,000
new c

00:55:30,960 --> 00:55:36,000
feature using a compiler explorer link

00:55:37,680 --> 00:55:42,559
and should there be so i think cpp

00:55:40,799 --> 00:55:44,000
reference does a really good job of

00:55:42,559 --> 00:55:46,000
outlining some of the features and has

00:55:44,000 --> 00:55:48,480
really good examples

00:55:46,000 --> 00:55:49,280
and it's so wiki so i wouldn't go and

00:55:48,480 --> 00:55:51,920
just edit

00:55:49,280 --> 00:55:53,920
all of it to have links to to godbolt

00:55:51,920 --> 00:55:59,119
right but like suggesting in the

00:55:53,920 --> 00:55:59,119
cpp uh reference kind of um

00:55:59,440 --> 00:56:03,040
like hey could we do this i think would

00:56:00,880 --> 00:56:05,119
be really cool

00:56:03,040 --> 00:56:06,960
and they also have like uh meaning

00:56:05,119 --> 00:56:07,839
snippets that you can run and i think

00:56:06,960 --> 00:56:10,559
that's

00:56:07,839 --> 00:56:10,559
very expressive

00:56:10,960 --> 00:56:17,839
or um for c plus plus 17 i did a

00:56:14,480 --> 00:56:19,760
on my github page there is a uh

00:56:17,839 --> 00:56:21,119
c plus plus 17 every feature in a tony

00:56:19,760 --> 00:56:24,480
table

00:56:21,119 --> 00:56:26,640
that's why they're called tony tables um

00:56:24,480 --> 00:56:29,119
i started to do it for 20 and you know

00:56:26,640 --> 00:56:30,079
20 is just gigantic so if anybody wants

00:56:29,119 --> 00:56:33,440
to add

00:56:30,079 --> 00:56:34,079
uh the list for 20 but um i i actually

00:56:33,440 --> 00:56:35,599
agree with

00:56:34,079 --> 00:56:37,280
let's let's just do it all in cpp

00:56:35,599 --> 00:56:38,160
reference they already have some of

00:56:37,280 --> 00:56:41,760
their examples

00:56:38,160 --> 00:56:45,839
can already link to um to godbolt

00:56:41,760 --> 00:56:48,880
so let's go for it let's do it

00:56:45,839 --> 00:56:50,000
examples are great but it too many

00:56:48,880 --> 00:56:52,559
people get hooked

00:56:50,000 --> 00:56:55,599
on trying to learn all the features and

00:56:52,559 --> 00:56:58,240
all the aspects of the features

00:56:55,599 --> 00:56:59,040
really try not to do that look at the

00:56:58,240 --> 00:57:01,280
concepts

00:56:59,040 --> 00:57:02,720
look at how the language as a whole

00:57:01,280 --> 00:57:05,119
addresses things

00:57:02,720 --> 00:57:07,280
this is one of the things where books

00:57:05,119 --> 00:57:11,760
and longer articles

00:57:07,280 --> 00:57:14,720
beats the simple answer from

00:57:11,760 --> 00:57:16,240
cpp reference or somewhere else i use

00:57:14,720 --> 00:57:18,720
cpp reference

00:57:16,240 --> 00:57:20,880
all the time because i have to look over

00:57:18,720 --> 00:57:24,000
all of all of these little details

00:57:20,880 --> 00:57:25,359
i've forgotten but try and learn the

00:57:24,000 --> 00:57:28,319
language as a whole

00:57:25,359 --> 00:57:29,440
try and learn it as a modern language

00:57:28,319 --> 00:57:32,720
not as

00:57:29,440 --> 00:57:40,559
c with a few weird extensions as some

00:57:32,720 --> 00:57:45,040
people are still taught

00:57:40,559 --> 00:57:47,760
thank you jf or inbol i see you nodding

00:57:45,040 --> 00:57:49,680
i just i just uh i i'll just add that

00:57:47,760 --> 00:57:50,880
this is really relates to what i said

00:57:49,680 --> 00:57:54,559
earlier and i think

00:57:50,880 --> 00:57:57,839
it's important uh to have a broad

00:57:54,559 --> 00:58:01,760
uh understanding of of the environment

00:57:57,839 --> 00:58:04,720
and because because especially

00:58:01,760 --> 00:58:05,680
with people that start uh that are new

00:58:04,720 --> 00:58:08,799
to the language

00:58:05,680 --> 00:58:09,280
and so i think it's really important to

00:58:08,799 --> 00:58:13,680
have

00:58:09,280 --> 00:58:17,599
a strong base

00:58:13,680 --> 00:58:17,599
to to comprehend the language

00:58:19,680 --> 00:58:23,119
thank you now we have about two minutes

00:58:22,720 --> 00:58:25,760
left

00:58:23,119 --> 00:58:26,960
let's have one quick round and let me

00:58:25,760 --> 00:58:28,880
throw in a question

00:58:26,960 --> 00:58:31,359
the touches on some of the ones said but

00:58:28,880 --> 00:58:34,559
this is a nice closer

00:58:31,359 --> 00:58:35,520
what are you most excited about why are

00:58:34,559 --> 00:58:38,400
you excited

00:58:35,520 --> 00:58:40,000
about c plus plus over the next few

00:58:38,400 --> 00:58:43,200
years

00:58:40,000 --> 00:58:43,200
what do you look forward to

00:58:43,520 --> 00:58:47,680
for me it's mostly uh better contact

00:58:46,480 --> 00:58:50,240
expert

00:58:47,680 --> 00:58:52,480
having containers it comes explorer and

00:58:50,240 --> 00:58:54,799
ability

00:58:52,480 --> 00:58:57,200
ability to do anything impossible almost

00:58:54,799 --> 00:58:57,200
anything

00:58:58,720 --> 00:59:02,640
i'll say for me for me it's going to be

00:59:01,440 --> 00:59:05,839
hoping to improve c

00:59:02,640 --> 00:59:09,440
plus for more embedded support safety

00:59:05,839 --> 00:59:10,319
and machine learning for me it will be

00:59:09,440 --> 00:59:13,359
cleaning up

00:59:10,319 --> 00:59:13,839
things with modules and concepts and

00:59:13,359 --> 00:59:16,319
then

00:59:13,839 --> 00:59:17,200
i i've been missing core routines

00:59:16,319 --> 00:59:19,280
forever

00:59:17,200 --> 00:59:23,040
so it'll take me a few years to really

00:59:19,280 --> 00:59:23,040
digest c plus plus 20.

00:59:23,520 --> 00:59:28,559
i look forward to easier c plus plus

00:59:26,559 --> 00:59:31,760
through higher level abstractions

00:59:28,559 --> 00:59:34,640
without getting away from the low level

00:59:31,760 --> 00:59:34,640
hardware access

00:59:35,119 --> 00:59:41,040
write what you what you mean not how you

00:59:38,400 --> 00:59:41,040
want it done

00:59:42,480 --> 00:59:48,559
i think that i think a lot of the work

00:59:46,000 --> 00:59:50,000
that we're doing on executors and

00:59:48,559 --> 00:59:52,720
asynchronous

00:59:50,000 --> 00:59:54,400
io is really going to revolutionize the

00:59:52,720 --> 00:59:57,200
standard library and let us

00:59:54,400 --> 00:59:58,559
modernize it over the next 10 years and

00:59:57,200 --> 01:00:01,280
likewise i think

00:59:58,559 --> 01:00:02,960
a lot of our efforts on tooling and and

01:00:01,280 --> 01:00:06,720
modules

01:00:02,960 --> 01:00:10,160
are going to enable uh sort of diverse

01:00:06,720 --> 01:00:11,920
package ecosystems that we need

01:00:10,160 --> 01:00:13,359
to make third library third-party

01:00:11,920 --> 01:00:16,960
libraries

01:00:13,359 --> 01:00:19,680
much more accessible to users

01:00:16,960 --> 01:00:22,079
i would love to to jump in uh i think

01:00:19,680 --> 01:00:25,200
that c plus plus 20

01:00:22,079 --> 01:00:25,839
by itself is a very powerful toolbox and

01:00:25,200 --> 01:00:28,400
i think

01:00:25,839 --> 01:00:30,079
i mean i'm really looking forward to see

01:00:28,400 --> 01:00:32,720
how people would use that

01:00:30,079 --> 01:00:33,920
and especially again since i'm coming

01:00:32,720 --> 01:00:37,119
from embedded

01:00:33,920 --> 01:00:38,799
i think that it's a very we're going to

01:00:37,119 --> 01:00:41,280
see a lot of

01:00:38,799 --> 01:00:43,200
almost a paradigm shift when using

01:00:41,280 --> 01:00:46,400
concepts

01:00:43,200 --> 01:00:46,400
and i'm looking forward to it

01:00:46,640 --> 01:00:50,240
i'm looking forward to making the

01:00:48,400 --> 01:00:52,480
language easier to use and

01:00:50,240 --> 01:00:54,160
harder to misuse and especially trying

01:00:52,480 --> 01:00:57,839
to improve things in the area of your

01:00:54,160 --> 01:01:01,040
area of security uh reliably safety

01:00:57,839 --> 01:01:01,440
and and doing that without compromising

01:01:01,040 --> 01:01:03,359
on

01:01:01,440 --> 01:01:05,200
the performance aspect of stuff right so

01:01:03,359 --> 01:01:06,240
when you want to dive deep and have high

01:01:05,200 --> 01:01:07,760
performance

01:01:06,240 --> 01:01:09,359
i want you to be able to do that right

01:01:07,760 --> 01:01:10,960
like have that section that's really

01:01:09,359 --> 01:01:12,640
well tuned but the rest like i don't

01:01:10,960 --> 01:01:13,760
want sharp edges everywhere right i want

01:01:12,640 --> 01:01:17,200
it to be easy to use

01:01:13,760 --> 01:01:19,119
well that's what i'm excited about

01:01:17,200 --> 01:01:21,119
everyone said such smart things so i'm

01:01:19,119 --> 01:01:22,960
just going to say i'm looking forward to

01:01:21,119 --> 01:01:25,599
everyone finding the new rhymes

01:01:22,960 --> 01:01:28,079
in c plus 20. please please go read the

01:01:25,599 --> 01:01:28,079
standard

01:01:28,960 --> 01:01:33,040
thank you and thank you all for taking

01:01:31,599 --> 01:01:36,000
time i know that we

01:01:33,040 --> 01:01:37,280
today had panelists from three different

01:01:36,000 --> 01:01:40,000
continents

01:01:37,280 --> 01:01:41,040
live so whatever time zone you're in as

01:01:40,000 --> 01:01:42,960
panelists

01:01:41,040 --> 01:01:44,400
and the hundreds of you who are online

01:01:42,960 --> 01:01:47,119
live right now

01:01:44,400 --> 01:01:48,799
whatever time zone that you're in i hope

01:01:47,119 --> 01:01:50,880
you enjoyed this hour

01:01:48,799 --> 01:01:52,000
we have had some more questions than we

01:01:50,880 --> 01:01:54,480
could get to but we got

01:01:52,000 --> 01:01:56,400
to quite a few and i really appreciate

01:01:54,480 --> 01:01:57,839
the insightful answers and the different

01:01:56,400 --> 01:01:58,799
perspectives that we got from our

01:01:57,839 --> 01:02:00,799
panelists

01:01:58,799 --> 01:02:02,640
now as we head into the regular program

01:02:00,799 --> 01:02:04,640
for day two of cppcon

01:02:02,640 --> 01:02:06,319
i hope you enjoy the rest of the day as

01:02:04,640 --> 01:02:07,839
we continue our week together

01:02:06,319 --> 01:02:21,839
thank you for attending and enjoy the

01:02:07,839 --> 01:02:21,839
rest of your day

01:02:28,960 --> 01:02:31,039

YouTube URL: https://www.youtube.com/watch?v=lil4xfpmnF4


