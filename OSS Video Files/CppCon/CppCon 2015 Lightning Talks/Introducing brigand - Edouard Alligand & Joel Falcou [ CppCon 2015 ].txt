Title: Introducing brigand - Edouard Alligand & Joel Falcou [ CppCon 2015 ]
Publication date: 2015-10-21
Playlist: CppCon 2015 Lightning Talks
Description: 
	http://www.Cppcon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
—
Optimized And Managed by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:00,000 --> 00:00:08,240
thank you you can you can it doesn't

00:00:05,549 --> 00:00:10,500
don't forget to oppose at the end to

00:00:08,240 --> 00:00:13,769
legalize the meta programming library we

00:00:10,500 --> 00:00:16,859
started with the oil it started out of

00:00:13,769 --> 00:00:18,660
own need because in our software and the

00:00:16,859 --> 00:00:21,270
software joy will make heavy use of

00:00:18,660 --> 00:00:25,109
template metaprogramming and its birth

00:00:21,270 --> 00:00:28,230
clay the pitch ists boost MPL for c++

00:00:25,109 --> 00:00:33,540
1114 and it works on visual studio 2013

00:00:28,230 --> 00:00:38,190
clan GCC any compiler you want so it's

00:00:33,540 --> 00:00:40,649
one of the two obviously someone the

00:00:38,190 --> 00:00:42,660
idea comes that I was just started to

00:00:40,649 --> 00:00:46,140
write open source the library we had

00:00:42,660 --> 00:00:48,539
internally at the company and then oil

00:00:46,140 --> 00:00:50,670
said is it what is the brigham thing

00:00:48,539 --> 00:00:52,559
you're doing right now and say ok now

00:00:50,670 --> 00:00:57,030
we're going to call the library go

00:00:52,559 --> 00:01:00,059
regarding the thief or yeah and source

00:00:57,030 --> 00:01:02,850
of inspiration whenever we had an idea

00:01:00,059 --> 00:01:04,769
how about how we should do it water

00:01:02,850 --> 00:01:06,479
interface we should have what we did is

00:01:04,769 --> 00:01:09,150
simple we said how is it done in to

00:01:06,479 --> 00:01:11,340
stamp here so if you already use ghost

00:01:09,150 --> 00:01:15,600
MPL getting it to goose egg on is going

00:01:11,340 --> 00:01:18,030
suppose we go let's it's going to be

00:01:15,600 --> 00:01:19,799
very easy and actually when I started it

00:01:18,030 --> 00:01:21,450
was the article written by Peter dimov

00:01:19,799 --> 00:01:23,040
which gave me the idea to write the

00:01:21,450 --> 00:01:27,659
library because I realized would be

00:01:23,040 --> 00:01:32,970
actually very easy and also of course it

00:01:27,659 --> 00:01:35,970
IDs from Eric nebula three very

00:01:32,970 --> 00:01:37,860
important talk goes it must be instant

00:01:35,970 --> 00:01:40,170
compile time and when I say instant

00:01:37,860 --> 00:01:41,820
compile time it takes 10 seconds to

00:01:40,170 --> 00:01:44,509
build the whole library with all every

00:01:41,820 --> 00:01:48,960
test and we have like how many tests

00:01:44,509 --> 00:01:51,930
1100 almost 200 okay so two hundred to

00:01:48,960 --> 00:01:54,360
two hundred two thousand we have many

00:01:51,930 --> 00:01:56,280
many tests it's instant compile time

00:01:54,360 --> 00:01:58,920
whatever the complexity because we make

00:01:56,280 --> 00:02:01,700
heavy use of C++ 11 features biotic

00:01:58,920 --> 00:02:03,789
templates there is not a single macro

00:02:01,700 --> 00:02:08,539
the library it's purely see plasmas

00:02:03,789 --> 00:02:10,099
sister never copies yeah like you want

00:02:08,539 --> 00:02:13,340
to do metaprogramming but you don't want

00:02:10,099 --> 00:02:16,819
to kill yourself in two years and white

00:02:13,340 --> 00:02:19,280
support the software we use is also has

00:02:16,819 --> 00:02:22,880
to run on windows so it has to compile

00:02:19,280 --> 00:02:28,400
on business to do 2013 and so so welcome

00:02:22,880 --> 00:02:30,799
visitors due 2015 it's Clank 3.5 3.6 we

00:02:28,400 --> 00:02:38,900
exploit on the default length from micro

00:02:30,799 --> 00:02:43,160
s GCC 478 ok 48 49 50 alright another

00:02:38,900 --> 00:02:45,829
point and go back when the other point

00:02:43,160 --> 00:02:48,349
which is all about the sustainability of

00:02:45,829 --> 00:02:50,480
the library is that just be simple to

00:02:48,349 --> 00:02:52,459
use but that's basically what the

00:02:50,480 --> 00:02:55,910
interfacing inner 8-8 from the NPI gave

00:02:52,459 --> 00:02:58,459
us but we also wanted it to be easy to

00:02:55,910 --> 00:03:01,010
look into because we don't want our

00:02:58,459 --> 00:03:02,450
co-worker to be lagging behind what's

00:03:01,010 --> 00:03:05,500
going wrong into this piece of software

00:03:02,450 --> 00:03:10,510
so we try to keep the implementation as

00:03:05,500 --> 00:03:10,510
straightforward or trivial as possible

00:03:14,060 --> 00:03:21,590
the cliq you rock everything my

00:03:17,120 --> 00:03:24,140
assistant please check this right yes so

00:03:21,590 --> 00:03:28,550
why do we use bringin four instead of

00:03:24,140 --> 00:03:31,069
just playing around with C++ compile

00:03:28,550 --> 00:03:35,030
time checks obviously constant

00:03:31,069 --> 00:03:37,640
computations increase ODB we use we even

00:03:35,030 --> 00:03:40,340
I we don't really why the gender

00:03:37,640 --> 00:03:42,830
protocol we generated civilization and

00:03:40,340 --> 00:03:44,900
what do you use it for real exactly so

00:03:42,830 --> 00:03:46,819
we use it to end all different kind of

00:03:44,900 --> 00:03:50,720
problem related to memory like the

00:03:46,819 --> 00:03:55,100
layout layout sorry so we have some kind

00:03:50,720 --> 00:03:57,200
of automatic structure of array to array

00:03:55,100 --> 00:03:58,970
of structures converter so you can

00:03:57,200 --> 00:04:00,920
actually write an array of structures

00:03:58,970 --> 00:04:04,849
and regenerates a properly designed

00:04:00,920 --> 00:04:07,250
early memory layout on the fly we do

00:04:04,849 --> 00:04:09,830
that we have something that compute

00:04:07,250 --> 00:04:12,590
complex functions than time so you try

00:04:09,830 --> 00:04:14,420
to build large data flow that combine

00:04:12,590 --> 00:04:17,150
multiple multiple tables and stuff like

00:04:14,420 --> 00:04:19,310
that and it's available with the boost

00:04:17,150 --> 00:04:23,390
software license so you can just use it

00:04:19,310 --> 00:04:27,020
and just just go just use it ok so in

00:04:23,390 --> 00:04:29,510
demo features what okay just so Intel

00:04:27,020 --> 00:04:32,780
features what we try to do was to be a

00:04:29,510 --> 00:04:36,260
sport as MPL as possible because even if

00:04:32,780 --> 00:04:39,169
MPs thought to be aging a bit the basic

00:04:36,260 --> 00:04:41,720
API is basically what you need we

00:04:39,169 --> 00:04:44,800
basically have everything in term of

00:04:41,720 --> 00:04:48,950
algorithms we have all the classical

00:04:44,800 --> 00:04:51,260
sequences but in fact this is the main

00:04:48,950 --> 00:04:53,330
main point that everything is a tight

00:04:51,260 --> 00:04:56,000
list actually so if you want to use a

00:04:53,330 --> 00:04:57,289
boost valiant as a type list and you

00:04:56,000 --> 00:04:58,789
want to turn the booze variant of

00:04:57,289 --> 00:05:00,710
integral to booze variant of the

00:04:58,789 --> 00:05:02,930
equivalent floating-point types you just

00:05:00,710 --> 00:05:05,150
can't pass whose variant of something to

00:05:02,930 --> 00:05:08,960
two brilliant and it will just walk you

00:05:05,150 --> 00:05:13,160
don't need to adapt that and we get rid

00:05:08,960 --> 00:05:15,800
to of also of all the iterative based

00:05:13,160 --> 00:05:17,270
API because that was a bit cumbersome so

00:05:15,800 --> 00:05:20,600
everything works like it's a range

00:05:17,270 --> 00:05:23,840
actually and everything else is

00:05:20,600 --> 00:05:29,570
classical we also added a bit of red

00:05:23,840 --> 00:05:31,699
oh okay we also have a bit of a runtime

00:05:29,570 --> 00:05:34,250
support so we have a proper

00:05:31,699 --> 00:05:36,169
implementation of for which chart we

00:05:34,250 --> 00:05:38,810
have something that kind to a static if

00:05:36,169 --> 00:05:41,780
let you select different branches in

00:05:38,810 --> 00:05:44,030
different lambdas stuff exists we show

00:05:41,780 --> 00:05:46,100
it inside the curls benefit is useful

00:05:44,030 --> 00:05:48,020
because you you start comforting types

00:05:46,100 --> 00:05:51,580
and you end up wanting to take the

00:05:48,020 --> 00:05:55,130
decisions to make something at runtime

00:05:51,580 --> 00:05:58,070
and all the other active stuff we

00:05:55,130 --> 00:06:00,200
support which also support prasad just

00:05:58,070 --> 00:06:03,740
based lambdas so you can actually build

00:06:00,200 --> 00:06:07,400
large complex lambda expressions and as

00:06:03,740 --> 00:06:10,430
you say we wanted to work with visual

00:06:07,400 --> 00:06:12,470
studio 2013 and everything is macro free

00:06:10,430 --> 00:06:14,150
actually so it's it straight forward to

00:06:12,470 --> 00:06:15,919
read if you really want to look into the

00:06:14,150 --> 00:06:17,419
implementation what the heck is night it

00:06:15,919 --> 00:06:20,090
doesn't function yeah you rock

00:06:17,419 --> 00:06:21,770
everything again so this is a kind of

00:06:20,090 --> 00:06:24,919
stuff we can actually write a very very

00:06:21,770 --> 00:06:29,289
rough and simplified example or so you

00:06:24,919 --> 00:06:31,970
you can buy you can build list of types

00:06:29,289 --> 00:06:34,280
including with void inside that some

00:06:31,970 --> 00:06:36,110
sort of the library doesn't report and

00:06:34,280 --> 00:06:38,870
you can just transform it to add the

00:06:36,110 --> 00:06:42,740
pointer on everything okay and you turns

00:06:38,870 --> 00:06:44,120
out into a STD total done and as I say

00:06:42,740 --> 00:06:46,430
everything is likely so you can do

00:06:44,120 --> 00:06:49,010
exactly the same but but using directly

00:06:46,430 --> 00:06:51,830
a variant should be booze violent

00:06:49,010 --> 00:06:53,570
actually yes the STD value is not there

00:06:51,830 --> 00:06:56,030
so anyway so well we have this variant

00:06:53,570 --> 00:06:57,950
of some stuff you just take it pass it

00:06:56,030 --> 00:07:00,440
to the same time to transform and you

00:06:57,950 --> 00:07:01,700
turn it into a top or afterwards okay so

00:07:00,440 --> 00:07:03,470
as long as you have a type which is

00:07:01,700 --> 00:07:06,500
basically looking like sometimes

00:07:03,470 --> 00:07:08,810
brackets type type type sites types it's

00:07:06,500 --> 00:07:11,300
a friggin cyclist okay and we we don't

00:07:08,810 --> 00:07:14,500
ask you anything about that so that's

00:07:11,300 --> 00:07:14,500
the main zooming go

00:07:17,190 --> 00:07:24,100
and as I say we have this French based

00:07:19,690 --> 00:07:26,889
interface we shamelessly take from what

00:07:24,100 --> 00:07:28,690
andrean red X on the school say about d

00:07:26,889 --> 00:07:31,030
so let's tell you what this brigand list

00:07:28,690 --> 00:07:35,949
of stuff okay and you want to try to

00:07:31,030 --> 00:07:38,740
first int inside that okay so you

00:07:35,949 --> 00:07:41,590
basically get that so you also you can

00:07:38,740 --> 00:07:45,130
also do find elements to get directly to

00:07:41,590 --> 00:07:47,020
the types and the result is is not an

00:07:45,130 --> 00:07:48,880
iterator or whatever is basically we

00:07:47,020 --> 00:07:50,800
consume the type least until we found

00:07:48,880 --> 00:07:52,780
whatever we need to found and we retain

00:07:50,800 --> 00:07:54,550
user type list with the first element

00:07:52,780 --> 00:07:57,250
being the first step that verifies the

00:07:54,550 --> 00:07:58,990
predicate so I so you can take that and

00:07:57,250 --> 00:08:01,300
you know that the front of this is what

00:07:58,990 --> 00:08:03,160
you want and you can actually push it

00:08:01,300 --> 00:08:04,570
back to another call to find if you want

00:08:03,160 --> 00:08:07,870
to find the second one and so on and so

00:08:04,570 --> 00:08:10,570
on so so you doesn't have to deal with

00:08:07,870 --> 00:08:15,280
me Terry Raider like like m pierre de

00:08:10,570 --> 00:08:20,260
Graaff and stuff like this and okay so

00:08:15,280 --> 00:08:21,400
it's it's on github we work with our to

00:08:20,260 --> 00:08:23,680
try to have something that actually

00:08:21,400 --> 00:08:29,110
combines tonight so you can actually try

00:08:23,680 --> 00:08:32,310
to actual for 3ds okay and say tell us

00:08:29,110 --> 00:08:34,330
if it doesn't work where why when and we

00:08:32,310 --> 00:08:37,830
greatly appreciate it to get any

00:08:34,330 --> 00:08:37,830

YouTube URL: https://www.youtube.com/watch?v=cXaZXzeAhEg


