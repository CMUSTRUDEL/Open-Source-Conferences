Title: Kiss Templates - Roland Bock [ CppCon 2015 ]
Publication date: 2015-10-21
Playlist: CppCon 2015 Lightning Talks
Description: 
	http://www.Cppcon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
—
Optimized And Managed by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:00,000 --> 00:00:04,170
yeah I claim it so easy that I can teach

00:00:02,610 --> 00:00:06,990
you how to use it in five minutes

00:00:04,170 --> 00:00:10,469
alright so what is it about I need to

00:00:06,990 --> 00:00:13,860
generate text on for instance HTML or

00:00:10,469 --> 00:00:17,670
logic or emails or a C++ code what have

00:00:13,860 --> 00:00:20,760
you and for that I would like to have a

00:00:17,670 --> 00:00:23,220
text template system that has a simple

00:00:20,760 --> 00:00:25,109
yet powerful language that works for all

00:00:23,220 --> 00:00:27,990
kinds of texts or at least for the kinds

00:00:25,109 --> 00:00:30,420
that I showed and is statically compiled

00:00:27,990 --> 00:00:32,969
because I want to get my template errors

00:00:30,420 --> 00:00:35,219
at compile time not at runtime so I

00:00:32,969 --> 00:00:38,510
don't want to have a 500 internal server

00:00:35,219 --> 00:00:42,059
error for instance and for this I

00:00:38,510 --> 00:00:45,649
invented kiss templates as Kate guessed

00:00:42,059 --> 00:00:50,100
it's short for keep it simple stupid and

00:00:45,649 --> 00:00:54,059
this is what it looks like so the red

00:00:50,100 --> 00:00:56,699
thing is is a is a marker for it for the

00:00:54,059 --> 00:01:00,030
template so a template called sample in

00:00:56,699 --> 00:01:03,960
this case inside the temple that's

00:01:00,030 --> 00:01:05,700
template you can have C++ code for

00:01:03,960 --> 00:01:08,670
instance functions functions or the most

00:01:05,700 --> 00:01:12,060
useful thing anything that starts with a

00:01:08,670 --> 00:01:15,390
percent is a function is sorry the C++

00:01:12,060 --> 00:01:17,460
code and inside of functions you can

00:01:15,390 --> 00:01:20,909
have more C++ code or you can have a

00:01:17,460 --> 00:01:24,479
mixture of text and expressions that are

00:01:20,909 --> 00:01:28,430
sent to a serializer these expressions

00:01:24,479 --> 00:01:31,950
are enclosed in here with a dollar and

00:01:28,430 --> 00:01:33,479
curly braces and they the serialize is

00:01:31,950 --> 00:01:35,970
also responsible for any kind of

00:01:33,479 --> 00:01:39,229
escaping so if if the target format is

00:01:35,970 --> 00:01:43,860
HTML then for instance the less than

00:01:39,229 --> 00:01:48,119
sign would be escaped right so when I

00:01:43,860 --> 00:01:53,250
say any kind of C++ after % really any

00:01:48,119 --> 00:01:56,520
kind so we can include stuff we can have

00:01:53,250 --> 00:02:00,090
namespaces we can have loops whatever

00:01:56,520 --> 00:02:02,009
you want and then the expressions and

00:02:00,090 --> 00:02:04,229
these things that are going to send to

00:02:02,009 --> 00:02:08,310
the serializer can be just any kind of

00:02:04,229 --> 00:02:11,400
C++ expressions okay so clearly that

00:02:08,310 --> 00:02:16,110
this is not C++ so

00:02:11,400 --> 00:02:18,750
we have to generate C++ from it so this

00:02:16,110 --> 00:02:22,829
kind of command turns our template into

00:02:18,750 --> 00:02:26,360
a header file and then we can use this

00:02:22,829 --> 00:02:29,700
header file in our own simplifies code

00:02:26,360 --> 00:02:31,739
you have some data structure that has to

00:02:29,700 --> 00:02:37,340
match the stuff that we do in the

00:02:31,739 --> 00:02:40,349
template then we initialize the data we

00:02:37,340 --> 00:02:44,750
initialize a serializer some co laser

00:02:40,349 --> 00:02:44,750
depending on format that we want to

00:02:45,560 --> 00:02:48,940
it's not part of the talk

00:02:52,200 --> 00:02:54,260
you

00:02:56,140 --> 00:02:59,490
fire alarm is different

00:03:15,920 --> 00:03:20,040
let everybody know we're looking into it

00:03:18,480 --> 00:03:21,140
checking into fire systems we don't know

00:03:20,040 --> 00:03:25,010
what

00:03:21,140 --> 00:03:29,290
okay okay they are checking into this

00:03:25,010 --> 00:03:29,290
fire system and they don't know yet so

00:03:35,799 --> 00:03:40,670
during our break as well so just know

00:03:39,170 --> 00:03:42,980
that there's been some weird or I'm

00:03:40,670 --> 00:03:58,849
going on but as far as we know nothing's

00:03:42,980 --> 00:04:05,829
on fire all right well okay so yes yes

00:03:58,849 --> 00:04:10,040
no sergeant seconds left all right so

00:04:05,829 --> 00:04:12,560
yeah we so we included we generated add

00:04:10,040 --> 00:04:14,659
a file from from the template we

00:04:12,560 --> 00:04:17,449
included that a header file now in our

00:04:14,659 --> 00:04:20,570
own code have some data structure that

00:04:17,449 --> 00:04:23,750
we want to serialize or that we want to

00:04:20,570 --> 00:04:27,590
use in this template then we initialize

00:04:23,750 --> 00:04:31,550
the data with whatever initialize a

00:04:27,590 --> 00:04:33,199
serializer again the serializer should

00:04:31,550 --> 00:04:37,570
be chosen according to the format that

00:04:33,199 --> 00:04:39,919
we want to produce then initialize the

00:04:37,570 --> 00:04:42,710
template with the data and the

00:04:39,919 --> 00:04:44,240
serializer and then call one of those

00:04:42,710 --> 00:04:46,340
functions that we have in the template

00:04:44,240 --> 00:04:51,919
in this call in this case is called

00:04:46,340 --> 00:04:55,310
render and we call that and that will

00:04:51,919 --> 00:04:57,020
feed the the text and the data into the

00:04:55,310 --> 00:05:00,380
serializer which also does the escaping

00:04:57,020 --> 00:05:01,940
and it will do the reasonable thing in

00:05:00,380 --> 00:05:07,490
this case we'll just print hello world

00:05:01,940 --> 00:05:16,220
AKA this hash value for road so that was

00:05:07,490 --> 00:05:18,260
simple what else morfael um um so the

00:05:16,220 --> 00:05:21,530
the whole sentence of this template

00:05:18,260 --> 00:05:24,110
library fits on one slide so we have c++

00:05:21,530 --> 00:05:26,389
code we have these classes which

00:05:24,110 --> 00:05:28,280
basically represent the the templates we

00:05:26,389 --> 00:05:31,159
have classes with inheritance if you

00:05:28,280 --> 00:05:33,889
want that you can compose them so you

00:05:31,159 --> 00:05:36,889
can add other templates as members we

00:05:33,889 --> 00:05:39,860
have the end class to do to mark the e

00:05:36,889 --> 00:05:43,370
at the end of the template we have

00:05:39,860 --> 00:05:45,680
expressions that are escaped which is

00:05:43,370 --> 00:05:46,580
mostly the thing that you want to have

00:05:45,680 --> 00:05:49,140
you

00:05:46,580 --> 00:05:55,020
can have more fire alarms but you can

00:05:49,140 --> 00:05:56,880
also send data in a raw format to to the

00:05:55,020 --> 00:06:01,200
serializer that's what this whole thing

00:05:56,880 --> 00:06:03,930
is and you can call other functions of

00:06:01,200 --> 00:06:08,400
your template which typically are void

00:06:03,930 --> 00:06:10,380
expressions then you have markers for

00:06:08,400 --> 00:06:12,750
trimming left or right depending on

00:06:10,380 --> 00:06:14,280
where you position it you have escape

00:06:12,750 --> 00:06:16,950
sequences for the special characters and

00:06:14,280 --> 00:06:19,950
anything else which is inside a function

00:06:16,950 --> 00:06:22,400
is text which is very useful because

00:06:19,950 --> 00:06:25,140
then makes it more readable of course

00:06:22,400 --> 00:06:29,220
all right um what's left is the

00:06:25,140 --> 00:06:32,160
stimulator for some formats there are

00:06:29,220 --> 00:06:33,570
serializes already existing in case you

00:06:32,160 --> 00:06:36,450
have to write your own it's also very

00:06:33,570 --> 00:06:39,630
simple you have to have at least two

00:06:36,450 --> 00:06:42,450
functions one takes text and does

00:06:39,630 --> 00:06:45,270
something with it you have one function

00:06:42,450 --> 00:06:48,780
called escape which takes whatever you

00:06:45,270 --> 00:06:51,810
want it to take and just something

00:06:48,780 --> 00:06:55,110
useful with our mix serializing and

00:06:51,810 --> 00:06:56,970
escaping you might want to have a raw

00:06:55,110 --> 00:06:59,010
function depending on whether you need

00:06:56,970 --> 00:07:03,600
it or not and you might also add a

00:06:59,010 --> 00:07:05,460
function for reporting exceptions if you

00:07:03,600 --> 00:07:06,860
think that one of your expressions could

00:07:05,460 --> 00:07:09,570
actually throw something in that case

00:07:06,860 --> 00:07:10,830
the template would give you the

00:07:09,570 --> 00:07:13,320
information of the line number the

00:07:10,830 --> 00:07:16,140
expression that through the exception

00:07:13,320 --> 00:07:18,080
and the exception pointer all right and

00:07:16,140 --> 00:07:21,330
if I make a mistake and the whole thing

00:07:18,080 --> 00:07:23,400
then there is a good chance that because

00:07:21,330 --> 00:07:26,160
all this is statically compiled that you

00:07:23,400 --> 00:07:29,460
will get your your errors at compile

00:07:26,160 --> 00:07:32,310
time not in runtime so no 500 internal

00:07:29,460 --> 00:07:36,210
server or stuff like that okay so in

00:07:32,310 --> 00:07:39,030
summary it's just a dozen syntax

00:07:36,210 --> 00:07:42,420
elements so very easy to learn we have

00:07:39,030 --> 00:07:46,940
the full power of C++ is fit for all

00:07:42,420 --> 00:07:49,530
text formats via specific serializers it

00:07:46,940 --> 00:07:53,160
statically compiled templates so I think

00:07:49,530 --> 00:07:56,100
I kept it simple but not stupid looking

00:07:53,160 --> 00:07:58,220
forward for feedback and thank you very

00:07:56,100 --> 00:07:58,220

YouTube URL: https://www.youtube.com/watch?v=c_OaKjGUAnA


