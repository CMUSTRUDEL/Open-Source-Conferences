Title: CppCon 2015: Huu Nguyen "C++ Requests - Curl for People"
Publication date: 2015-10-21
Playlist: CppCon 2015 Lightning Talks
Description: 
	http://www.Cppcon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,000 --> 00:00:04,859
my name is Hugh this is my first CPP con

00:00:02,970 --> 00:00:06,569
this is also my first time speaking

00:00:04,859 --> 00:00:08,550
professionally any kind of conference so

00:00:06,569 --> 00:00:11,780
it's a bit rough I apologize beforehand

00:00:08,550 --> 00:00:14,250
I wrote a library called C++ requests

00:00:11,780 --> 00:00:17,340
how many of you in the audience have

00:00:14,250 --> 00:00:18,539
used Python before just chopin's and of

00:00:17,340 --> 00:00:20,550
those people who are raising their hands

00:00:18,539 --> 00:00:23,550
how many have used the requests module

00:00:20,550 --> 00:00:26,039
by Kenneth reads okay awesome

00:00:23,550 --> 00:00:28,080
this is a spiritual board of that module

00:00:26,039 --> 00:00:30,570
which is another way of saying I stole

00:00:28,080 --> 00:00:33,180
it you can find the you can find the

00:00:30,570 --> 00:00:34,620
depository here please star it for kit

00:00:33,180 --> 00:00:37,079
and contribute to it it's very young

00:00:34,620 --> 00:00:39,180
it's only a few months old but I think I

00:00:37,079 --> 00:00:43,290
believe that I have a core API that is

00:00:39,180 --> 00:00:45,809
both elegant and practical C++ requests

00:00:43,290 --> 00:00:48,329
is a high-level client-side HTTP library

00:00:45,809 --> 00:00:52,350
and that requires us to understand what

00:00:48,329 --> 00:00:54,780
HTTP is at a high level my opinion HTTP

00:00:52,350 --> 00:00:58,649
at a high level is about verbs you know

00:00:54,780 --> 00:01:02,520
you do things like get me this page put

00:00:58,649 --> 00:01:06,510
this data here delete this user that's

00:01:02,520 --> 00:01:10,350
it if that seems naive that's because it

00:01:06,510 --> 00:01:11,820
is of course any kind of hindsight HTTP

00:01:10,350 --> 00:01:15,420
library should have support for

00:01:11,820 --> 00:01:18,090
authentication headers proxies cookies

00:01:15,420 --> 00:01:19,950
and sessions but if you allow me to be

00:01:18,090 --> 00:01:20,549
aspirational and really ambitious here

00:01:19,950 --> 00:01:23,520
and reach

00:01:20,549 --> 00:01:26,549
I believe that HTTP should be as simple

00:01:23,520 --> 00:01:29,040
as a print statement I believe that and

00:01:26,549 --> 00:01:31,979
so does Kenneth reach the person who

00:01:29,040 --> 00:01:34,740
said that first so let's try to imagine

00:01:31,979 --> 00:01:37,170
what HTTP as a print statement would

00:01:34,740 --> 00:01:40,380
look like if we can imagine the core of

00:01:37,170 --> 00:01:42,869
HTTP HTTP with an example such as making

00:01:40,380 --> 00:01:45,180
a simple get request and printing the

00:01:42,869 --> 00:01:48,450
response text what should that kind of

00:01:45,180 --> 00:01:51,689
API look like and so I've developed an

00:01:48,450 --> 00:01:55,229
API that hopefully can encapsulate that

00:01:51,689 --> 00:01:58,290
sort of essence you have a URL I'm using

00:01:55,229 --> 00:02:02,850
a service called HTTP bin it's written

00:01:58,290 --> 00:02:05,369
by kind of greets again we call a we use

00:02:02,850 --> 00:02:07,680
a get request a get function and that

00:02:05,369 --> 00:02:08,970
just pings the URL and gets you the

00:02:07,680 --> 00:02:12,900
response and you can print it

00:02:08,970 --> 00:02:13,400
immediately compare this to the

00:02:12,900 --> 00:02:18,110
equivalent

00:02:13,400 --> 00:02:20,090
call in lip curl so if you programmed in

00:02:18,110 --> 00:02:22,040
C before and you've had to do networking

00:02:20,090 --> 00:02:24,140
there's a good chance you've used lip

00:02:22,040 --> 00:02:26,510
curl and as you can see at the very top

00:02:24,140 --> 00:02:29,000
there's a void star pointer that's

00:02:26,510 --> 00:02:31,370
required for doing any kind of capturing

00:02:29,000 --> 00:02:34,370
of the response and that's the easy

00:02:31,370 --> 00:02:37,040
interface this is apparently what you're

00:02:34,370 --> 00:02:39,799
supposed to do in C the comparison is a

00:02:37,040 --> 00:02:41,599
little bit unfair because lip curl is a

00:02:39,799 --> 00:02:45,440
scene library so let's actually look at

00:02:41,599 --> 00:02:47,420
a C++ library has anyone heard of the

00:02:45,440 --> 00:02:50,269
library the framework called poco it

00:02:47,420 --> 00:02:52,239
stands for portable components is there

00:02:50,269 --> 00:02:54,950
a maintainer of poco in this audience

00:02:52,239 --> 00:02:59,900
anyone who works on would be offended if

00:02:54,950 --> 00:03:01,579
I said anything about it so poco is not

00:02:59,900 --> 00:03:04,099
a bad library it's very well written and

00:03:01,579 --> 00:03:06,170
thoroughly tested but the API is not

00:03:04,099 --> 00:03:08,389
written for people when I use poco I

00:03:06,170 --> 00:03:11,299
feel like I'm talking to a computer I'm

00:03:08,389 --> 00:03:13,040
a client there's a server I send this

00:03:11,299 --> 00:03:15,769
request object and I get a response

00:03:13,040 --> 00:03:17,930
object back so let's look at the same

00:03:15,769 --> 00:03:20,720
example for the simple get requests

00:03:17,930 --> 00:03:24,260
using poco and remember this is a C++

00:03:20,720 --> 00:03:25,730
library ignore the verbosity for a bit

00:03:24,260 --> 00:03:28,549
and let's just kind of examine the

00:03:25,730 --> 00:03:30,799
semantics of what's going on here at the

00:03:28,549 --> 00:03:32,870
very start you have a URI object which

00:03:30,799 --> 00:03:35,750
is sort of a generalization of the URL

00:03:32,870 --> 00:03:38,810
and you pass it the string seems pretty

00:03:35,750 --> 00:03:40,970
reasonable to me then you have a session

00:03:38,810 --> 00:03:44,090
which you need to pass the host and the

00:03:40,970 --> 00:03:47,479
port from the URI you create a request

00:03:44,090 --> 00:03:49,519
object using the the HTTP method you

00:03:47,479 --> 00:03:52,099
want to use which is get you have a

00:03:49,519 --> 00:03:55,280
string path you pass in the HTTP version

00:03:52,099 --> 00:03:58,879
and then at that point you can send the

00:03:55,280 --> 00:04:01,090
request that's one half of using poco

00:03:58,879 --> 00:04:04,280
getting the response requires you to

00:04:01,090 --> 00:04:06,620
instantiate a response object to receive

00:04:04,280 --> 00:04:09,229
it from the session as an input string

00:04:06,620 --> 00:04:11,299
or as an input stream to instantiate an

00:04:09,229 --> 00:04:13,430
output stream and then copy the input

00:04:11,299 --> 00:04:15,290
stream to the output stream and then

00:04:13,430 --> 00:04:17,900
call the string method on the output

00:04:15,290 --> 00:04:19,519
stream and print it out that's the same

00:04:17,900 --> 00:04:24,169
that's the same request that we did

00:04:19,519 --> 00:04:24,770
earlier in our imaginary API there are

00:04:24,169 --> 00:04:27,270
seven

00:04:24,770 --> 00:04:29,580
participating in several different api's

00:04:27,270 --> 00:04:32,250
and when I told you that I think the

00:04:29,580 --> 00:04:33,600
HTTP is a verb centric language the

00:04:32,250 --> 00:04:35,640
issue you were thinking about in terms

00:04:33,600 --> 00:04:37,800
of nouns interacting is that the mental

00:04:35,640 --> 00:04:41,130
model required to actually keep track of

00:04:37,800 --> 00:04:42,720
thing is very high these are all the

00:04:41,130 --> 00:04:44,550
methods we would methods we use to

00:04:42,720 --> 00:04:46,290
actually do all of these things these

00:04:44,550 --> 00:04:48,450
are several different api's and

00:04:46,290 --> 00:04:50,550
individually they make sense like a URI

00:04:48,450 --> 00:04:52,590
you should be able to get a port from it

00:04:50,550 --> 00:04:53,850
or a host from it you know a session

00:04:52,590 --> 00:04:56,070
should be able to send a request and

00:04:53,850 --> 00:04:58,140
receive a response but the issue is that

00:04:56,070 --> 00:05:00,690
the context requirement is so high that

00:04:58,140 --> 00:05:02,610
if for instance you call send response

00:05:00,690 --> 00:05:04,320
twice you're not sure what's going to

00:05:02,610 --> 00:05:06,300
happen if you call receive response

00:05:04,320 --> 00:05:08,370
twice are you copying data are you

00:05:06,300 --> 00:05:10,950
duplicating data you're not sure what's

00:05:08,370 --> 00:05:13,830
going to happen and so what I want and

00:05:10,950 --> 00:05:16,500
what I built is an eighteen HTTP API for

00:05:13,830 --> 00:05:19,050
people it's client-side and I want the

00:05:16,500 --> 00:05:22,170
objects in this API to participate in a

00:05:19,050 --> 00:05:24,480
single request verb that means that the

00:05:22,170 --> 00:05:26,940
way you map your programmer intent is

00:05:24,480 --> 00:05:29,250
through a single API a single function

00:05:26,940 --> 00:05:32,760
call and use the objects to kind of

00:05:29,250 --> 00:05:35,910
modular modulate what happens inside the

00:05:32,760 --> 00:05:37,560
internals of that call I also want the

00:05:35,910 --> 00:05:39,360
steps to get the response to be minimal

00:05:37,560 --> 00:05:42,030
so it's you shouldn't have to jump into

00:05:39,360 --> 00:05:43,470
any hoops or do stream copying to

00:05:42,030 --> 00:05:44,910
actually get the response that's

00:05:43,470 --> 00:05:48,090
ultimately what we care about the most

00:05:44,910 --> 00:05:50,820
and finally I want it to be useful in

00:05:48,090 --> 00:05:52,710
95% of use cases the example I gave

00:05:50,820 --> 00:05:54,990
earlier of the of the get request is a

00:05:52,710 --> 00:05:57,000
little bit academic you're gonna need a

00:05:54,990 --> 00:05:59,880
little more power and you need to flesh

00:05:57,000 --> 00:06:02,190
out the API a bit more so I'm going to

00:05:59,880 --> 00:06:05,280
go through a few examples of actual uses

00:06:02,190 --> 00:06:07,980
of the API and how we handle them using

00:06:05,280 --> 00:06:10,140
objects and parameters so if you want to

00:06:07,980 --> 00:06:12,510
make a query parameter you simply pass

00:06:10,140 --> 00:06:14,490
in this object called parameters it's a

00:06:12,510 --> 00:06:16,740
dictionary like object so you just

00:06:14,490 --> 00:06:19,140
instantiate it with these double braces

00:06:16,740 --> 00:06:21,600
you give it a key in a value it handles

00:06:19,140 --> 00:06:23,669
all of the URL encoding and and the

00:06:21,600 --> 00:06:26,370
appending to the URL that you need to do

00:06:23,669 --> 00:06:27,870
and it doesn't transparent it does it

00:06:26,370 --> 00:06:30,480
automatically for you so you'll have to

00:06:27,870 --> 00:06:32,400
worry about it potato authentication is

00:06:30,480 --> 00:06:34,410
easy as well you just pass in a user and

00:06:32,400 --> 00:06:36,840
a password if you want to change the

00:06:34,410 --> 00:06:37,770
scheme you just say I want to use digest

00:06:36,840 --> 00:06:39,360
authentication

00:06:37,770 --> 00:06:43,740
and it doesn't train it does it for you

00:06:39,360 --> 00:06:45,690
behind the scenes here we're seeing the

00:06:43,740 --> 00:06:47,460
same kind of dictionary like constructor

00:06:45,690 --> 00:06:49,080
again for headers and that's that makes

00:06:47,460 --> 00:06:52,650
sense because a header is just a mapping

00:06:49,080 --> 00:06:54,930
from some key to a number of values we

00:06:52,650 --> 00:06:57,300
can do the same thing with posts so

00:06:54,930 --> 00:06:59,130
these are URL encoded posts so these

00:06:57,300 --> 00:07:02,130
will get attached to the end of the URL

00:06:59,130 --> 00:07:04,620
if you have a longer post you just call

00:07:02,130 --> 00:07:06,030
it a multi-part post and so this is not

00:07:04,620 --> 00:07:07,740
a long string but if it were a long

00:07:06,030 --> 00:07:09,720
string you wouldn't use a different it

00:07:07,740 --> 00:07:12,330
would use a URL it will use a multi-part

00:07:09,720 --> 00:07:15,270
form post to actually send the request

00:07:12,330 --> 00:07:17,550
and adding a file should be easy as well

00:07:15,270 --> 00:07:19,830
so you just instantiate this file object

00:07:17,550 --> 00:07:21,569
you give it a path you give it a name it

00:07:19,830 --> 00:07:24,599
reads it behind the scenes and sends it

00:07:21,569 --> 00:07:26,430
up for you of course you can send more

00:07:24,599 --> 00:07:28,740
complex requests by mixing and matching

00:07:26,430 --> 00:07:31,199
these parameters you just throw them

00:07:28,740 --> 00:07:32,909
into the request verb and the objects

00:07:31,199 --> 00:07:36,449
kind of settle themselves and handle

00:07:32,909 --> 00:07:39,360
themselves and with some template magic

00:07:36,449 --> 00:07:41,190
we get borderless arguments basically

00:07:39,360 --> 00:07:42,990
for free so all the things make the same

00:07:41,190 --> 00:07:44,849
exact request you don't have to worry

00:07:42,990 --> 00:07:46,590
about the order in which you're passing

00:07:44,849 --> 00:07:47,729
these arguments in as long as all the

00:07:46,590 --> 00:07:52,080
arguments are there when you're making

00:07:47,729 --> 00:07:55,169
the actual request so we started with a

00:07:52,080 --> 00:07:57,539
very simple premise that HTTP is at a

00:07:55,169 --> 00:07:59,639
high level about verbs the objects that

00:07:57,539 --> 00:08:01,110
participate in that verb help

00:07:59,639 --> 00:08:03,000
communicate the intent of the programmer

00:08:01,110 --> 00:08:04,860
and the language that emerges from this

00:08:03,000 --> 00:08:07,469
interaction of these objects and verbs

00:08:04,860 --> 00:08:09,599
is the API if you can imagine that an

00:08:07,469 --> 00:08:11,639
API is a rung on an abstraction ladder

00:08:09,599 --> 00:08:14,580
and at the very bottom you have

00:08:11,639 --> 00:08:16,650
electrons and neutrons and signals and

00:08:14,580 --> 00:08:18,120
you're basically physics you step a

00:08:16,650 --> 00:08:20,310
little bit higher you'll start to see

00:08:18,120 --> 00:08:22,949
bits and sockets and then you get to

00:08:20,310 --> 00:08:26,190
http which is by definition the client

00:08:22,949 --> 00:08:27,240
client-server networking protocol you go

00:08:26,190 --> 00:08:30,300
a little bit higher than that and you

00:08:27,240 --> 00:08:31,740
get the core API of C++ requests but

00:08:30,300 --> 00:08:33,870
that's not the only thing my library

00:08:31,740 --> 00:08:36,240
does we can step a bit lower and get

00:08:33,870 --> 00:08:38,250
sessions basically for free because this

00:08:36,240 --> 00:08:41,190
is what the core API uses to actually

00:08:38,250 --> 00:08:43,260
implement all of these requests and if

00:08:41,190 --> 00:08:45,720
you step higher than that and kind of go

00:08:43,260 --> 00:08:48,420
above the abstraction because HTTP is a

00:08:45,720 --> 00:08:50,430
verb we can do it asynchronously so we

00:08:48,420 --> 00:08:52,050
can handle in response at some later

00:08:50,430 --> 00:08:54,630
time when it's convenient

00:08:52,050 --> 00:08:56,130
we can also pass a callback so that when

00:08:54,630 --> 00:08:58,709
we actually get the response we're

00:08:56,130 --> 00:09:00,270
calling some custom function here it's

00:08:58,709 --> 00:09:04,500
just a lambda that takes a response but

00:09:00,270 --> 00:09:06,240
it can be any kind of function object we

00:09:04,500 --> 00:09:09,209
can do all of this because the core API

00:09:06,240 --> 00:09:12,240
is encapsulating a single powerful

00:09:09,209 --> 00:09:14,910
concept that HTTP can be considered as a

00:09:12,240 --> 00:09:17,610
verb centric language and we need an API

00:09:14,910 --> 00:09:19,620
that speaks our language because after

00:09:17,610 --> 00:09:21,240
all developers are people too you should

00:09:19,620 --> 00:09:23,580
be using API so to speak your language

00:09:21,240 --> 00:09:26,480
it makes it easier to communicate your

00:09:23,580 --> 00:09:28,980
intent and this is an API for people

00:09:26,480 --> 00:09:32,360
this is my library it's called C++

00:09:28,980 --> 00:09:35,460
requests find it here thank you

00:09:32,360 --> 00:09:35,460
[Applause]

00:09:35,670 --> 00:09:40,799
[Music]

00:09:36,290 --> 00:09:40,799

YouTube URL: https://www.youtube.com/watch?v=f_D-wD1EmWk


