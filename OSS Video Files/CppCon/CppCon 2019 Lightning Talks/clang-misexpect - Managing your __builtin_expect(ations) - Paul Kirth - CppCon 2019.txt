Title: clang-misexpect - Managing your __builtin_expect(ations) - Paul Kirth - CppCon 2019
Publication date: 2019-10-23
Playlist: CppCon 2019 Lightning Talks
Description: 
	http://CppCon.org
—
Discussion & Comments: https://www.reddit.com/r/cpp/
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:08,299 --> 00:00:13,089
all right so playing miss expect so

00:00:10,969 --> 00:00:16,490
first but about me

00:00:13,089 --> 00:00:19,099
sorry so first a bit about me I'm a PhD

00:00:16,490 --> 00:00:20,750
student at UC Irvine my research

00:00:19,099 --> 00:00:22,970
normally focuses on system security and

00:00:20,750 --> 00:00:25,160
compilers but for this last summer I've

00:00:22,970 --> 00:00:28,219
been working at Google as an intern with

00:00:25,160 --> 00:00:29,540
the fuchsia toolchain team so just so

00:00:28,219 --> 00:00:33,170
we're all on the same page built in

00:00:29,540 --> 00:00:35,960
expect is a compiler intrinsic used for

00:00:33,170 --> 00:00:38,449
performance optimization most of us are

00:00:35,960 --> 00:00:42,140
probably more familiar with its use in

00:00:38,449 --> 00:00:44,780
the likely and unlikely macros so if I

00:00:42,140 --> 00:00:47,090
have some kind of conditional branch and

00:00:44,780 --> 00:00:48,440
I think one of the brain one part of the

00:00:47,090 --> 00:00:52,070
branch is gonna be hotter than the other

00:00:48,440 --> 00:00:53,750
I can let the compiler know how I expect

00:00:52,070 --> 00:00:56,840
this to behave at runtime by adding an

00:00:53,750 --> 00:00:59,120
annotation like this so if I think about

00:00:56,840 --> 00:01:00,860
what I've what I've told the compiler in

00:00:59,120 --> 00:01:02,510
the control flow graph I've said that

00:01:00,860 --> 00:01:04,100
there's a particular path that's going

00:01:02,510 --> 00:01:07,250
to be really hot and the compiler is

00:01:04,100 --> 00:01:08,420
happy to take that information and and

00:01:07,250 --> 00:01:10,280
remember it in the form of branch

00:01:08,420 --> 00:01:11,570
weights and they're just going to use

00:01:10,280 --> 00:01:14,659
those branch weights later in the

00:01:11,570 --> 00:01:17,899
optimization pipeline to optimize the

00:01:14,659 --> 00:01:18,789
hot part of the my code path and that's

00:01:17,899 --> 00:01:21,079
kind of where the problems start

00:01:18,789 --> 00:01:22,880
developers are notoriously bad at

00:01:21,079 --> 00:01:24,829
predicting the runtime behavior of their

00:01:22,880 --> 00:01:28,039
programs and so when these annotations

00:01:24,829 --> 00:01:30,319
are right they get really good small but

00:01:28,039 --> 00:01:32,719
important performance improvements but

00:01:30,319 --> 00:01:36,499
when they're wrong they can often pesum

00:01:32,719 --> 00:01:39,499
i's performance and this is something we

00:01:36,499 --> 00:01:40,759
can't stick check statically so we'd

00:01:39,499 --> 00:01:42,380
like to kind of know like when they're

00:01:40,759 --> 00:01:44,779
wrong so we need some kind of dynamic

00:01:42,380 --> 00:01:47,209
information and it'd be really great if

00:01:44,779 --> 00:01:50,479
there's some kind of way to profile our

00:01:47,209 --> 00:01:52,939
application and find out thankfully

00:01:50,479 --> 00:01:55,759
clang and LLVM have a close relationship

00:01:52,939 --> 00:01:58,429
with their pgo pipeline and we can use

00:01:55,759 --> 00:02:01,159
this to collect a representative profile

00:01:58,429 --> 00:02:05,359
of how our program should behave and we

00:02:01,159 --> 00:02:07,459
can use this information to kind of find

00:02:05,359 --> 00:02:09,410
where these problems are so if you're

00:02:07,459 --> 00:02:12,650
not familiar with PG oh here's a 10,000

00:02:09,410 --> 00:02:15,020
foot view if I'm instrumenting my binary

00:02:12,650 --> 00:02:16,400
the compiler will instrument each basic

00:02:15,020 --> 00:02:18,650
block then increments some kind of

00:02:16,400 --> 00:02:20,030
counter it doesn't have to add a counter

00:02:18,650 --> 00:02:21,240
to every basic block it can reconstruct

00:02:20,030 --> 00:02:23,400
ones

00:02:21,240 --> 00:02:26,310
from its context in the control flow

00:02:23,400 --> 00:02:28,620
graph but if I have some kind of

00:02:26,310 --> 00:02:30,630
annotation on this block when I'm

00:02:28,620 --> 00:02:33,720
consuming the pgo data from the profile

00:02:30,630 --> 00:02:36,200
I can just go grab this counter and make

00:02:33,720 --> 00:02:39,180
sure that it's correct

00:02:36,200 --> 00:02:42,480
so we added some new Diagnostics to

00:02:39,180 --> 00:02:45,930
clang in LLVM to do this these are

00:02:42,480 --> 00:02:47,940
available now at chip of tree so you can

00:02:45,930 --> 00:02:50,610
get warnings for this if you pass W miss

00:02:47,940 --> 00:02:53,250
expect you can get optimization remarks

00:02:50,610 --> 00:02:55,350
if you ask for - our paths equals miss

00:02:53,250 --> 00:02:57,870
expect from clang you can also get these

00:02:55,350 --> 00:03:00,420
warnings and diagnostics directly from

00:02:57,870 --> 00:03:03,390
the LLVM backend I don't have time to go

00:03:00,420 --> 00:03:05,310
into much more of the pgo pipeline but

00:03:03,390 --> 00:03:06,630
if you follow the link to the LLVM

00:03:05,310 --> 00:03:09,690
documentation you can find out a lot

00:03:06,630 --> 00:03:12,570
more there are some caveats with this so

00:03:09,690 --> 00:03:16,160
this is a dynamic analysis so if you

00:03:12,570 --> 00:03:18,420
feed a non representative profile into

00:03:16,160 --> 00:03:20,760
into the compiler you're not going to

00:03:18,420 --> 00:03:21,870
get really good warnings it's not going

00:03:20,760 --> 00:03:25,020
to give you a really good feedback so

00:03:21,870 --> 00:03:27,000
you do need to use some care when you're

00:03:25,020 --> 00:03:29,820
deciding what the right inputs for your

00:03:27,000 --> 00:03:31,230
profile collection are but basically if

00:03:29,820 --> 00:03:32,370
you give us a bad profile you're going

00:03:31,230 --> 00:03:35,130
to get bad diagnostics back

00:03:32,370 --> 00:03:36,480
unfortunately the usage is very

00:03:35,130 --> 00:03:39,180
straightforward so if I'm compiling

00:03:36,480 --> 00:03:41,910
something using the pgo pipeline I can

00:03:39,180 --> 00:03:43,170
just add - W miss expect and get these

00:03:41,910 --> 00:03:44,340
and get Diagnostics so it looks

00:03:43,170 --> 00:03:48,180
something like this

00:03:44,340 --> 00:03:50,240
we also recommend adding debug flag so

00:03:48,180 --> 00:03:53,760
that you get better diagnostic output

00:03:50,240 --> 00:03:55,800
the because our checks happen in the lob

00:03:53,760 --> 00:03:57,720
and back end there's no way to tie it to

00:03:55,800 --> 00:04:01,140
your source code you're gonna get sort

00:03:57,720 --> 00:04:02,490
of a fuzzy diagnostic it'll have the

00:04:01,140 --> 00:04:05,940
right line number but it won't give you

00:04:02,490 --> 00:04:07,920
the nice pretty carrot you can also ask

00:04:05,940 --> 00:04:10,160
for optimization remarks and this is

00:04:07,920 --> 00:04:13,440
useful because you can dump these as a

00:04:10,160 --> 00:04:15,390
file output and process them separately

00:04:13,440 --> 00:04:17,940
from your compilation and you can query

00:04:15,390 --> 00:04:20,160
the compiler about a variety of it's

00:04:17,940 --> 00:04:24,500
optimization decisions to find out what

00:04:20,160 --> 00:04:26,430
more you could do we also have a

00:04:24,500 --> 00:04:29,460
standalone tool that's out per review

00:04:26,430 --> 00:04:30,690
right now on fabricator it's very

00:04:29,460 --> 00:04:34,190
similar to clean tidy and that it

00:04:30,690 --> 00:04:36,020
consumes the compiled commands JSON

00:04:34,190 --> 00:04:37,520
the pgo profile and you can rent it over

00:04:36,020 --> 00:04:39,410
your whole project and get feedback on

00:04:37,520 --> 00:04:43,280
all of these places where your

00:04:39,410 --> 00:04:47,120
annotations may or may not be correct i

00:04:43,280 --> 00:04:48,410
think i'm basically at a time so i don't

00:04:47,120 --> 00:04:49,850
have time for questions but thank you

00:04:48,410 --> 00:04:53,529
very much

00:04:49,850 --> 00:04:53,529

YouTube URL: https://www.youtube.com/watch?v=M9fQyTBz2wQ


