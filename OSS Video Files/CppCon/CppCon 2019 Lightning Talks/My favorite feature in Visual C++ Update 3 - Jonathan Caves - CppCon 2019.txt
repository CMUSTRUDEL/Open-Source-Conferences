Title: My favorite feature in Visual C++ Update 3 - Jonathan Caves - CppCon 2019
Publication date: 2019-10-23
Playlist: CppCon 2019 Lightning Talks
Description: 
	http://CppCon.org
—
Discussion & Comments: https://www.reddit.com/r/cpp/
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:08,460 --> 00:00:13,900
if you're at the talk on Monday I think

00:00:12,850 --> 00:00:18,970
with

00:00:13,900 --> 00:00:20,920
Marian and sy they at the very end they

00:00:18,970 --> 00:00:25,180
put up a slide of a list of other

00:00:20,920 --> 00:00:28,930
features in visual C C++ it was there

00:00:25,180 --> 00:00:31,080
for bite us a second and if you're very

00:00:28,930 --> 00:00:35,589
fast you would read one line there and

00:00:31,080 --> 00:00:38,260
you have no clue what it was and I felt

00:00:35,589 --> 00:00:40,210
that this fee Fe feature which I'll give

00:00:38,260 --> 00:00:42,750
you the name later this feature I think

00:00:40,210 --> 00:00:47,440
deserves a bit more time that worse

00:00:42,750 --> 00:00:52,479
exposure mostly because I was a person

00:00:47,440 --> 00:00:55,000
who ranted about the issue and got it

00:00:52,479 --> 00:00:59,850
fixed in the eye the eye IDE

00:00:55,000 --> 00:00:59,850
oh I'm not I'm not just playing here oh

00:01:05,340 --> 00:01:14,200
yes so I wasn't enough this is the code

00:01:10,229 --> 00:01:17,290
C++ 28th got the familiar templates and

00:01:14,200 --> 00:01:19,630
simillar parameter temperature parameter

00:01:17,290 --> 00:01:25,170
since in syntax fill out the free

00:01:19,630 --> 00:01:29,860
lambdas just a quick validation I'm not

00:01:25,170 --> 00:01:31,030
cheating here it does compile some of

00:01:29,860 --> 00:01:32,700
you be paying attention you may have

00:01:31,030 --> 00:01:36,340
heard and some talks have given that

00:01:32,700 --> 00:01:38,740
visual C++ after many many years is

00:01:36,340 --> 00:01:41,470
moving away from what bjorna calls to

00:01:38,740 --> 00:01:46,330
token soup and we actually now have a

00:01:41,470 --> 00:01:48,300
proper a a AST and the lamb what I've

00:01:46,330 --> 00:01:51,120
been doing in the last couple years is

00:01:48,300 --> 00:01:53,950
slowly but you're a bunch but surely

00:01:51,120 --> 00:01:59,290
migrating areas of the compiler to use

00:01:53,950 --> 00:02:01,990
the the ast pack expansions was the

00:01:59,290 --> 00:02:06,070
first one I tried folk fold expressions

00:02:01,990 --> 00:02:09,580
are only done with a new parser and the

00:02:06,070 --> 00:02:11,849
last winter I spent time moving over to

00:02:09,580 --> 00:02:14,200
the lambdas over the use a new power

00:02:11,849 --> 00:02:16,360
powers or so I was able to do this in

00:02:14,200 --> 00:02:20,230
about a day because you have the right

00:02:16,360 --> 00:02:24,279
tools it's really easy so you have an

00:02:20,230 --> 00:02:26,999
eight ast the first thing you do is you

00:02:24,279 --> 00:02:26,999
start to add

00:02:27,069 --> 00:02:34,480
a visitor and the first one you add is a

00:02:30,099 --> 00:02:38,920
dumper that takes the trait the est in

00:02:34,480 --> 00:02:42,819
prints out a textual representation you

00:02:38,920 --> 00:02:45,670
add another visitor and another one and

00:02:42,819 --> 00:02:47,799
then another one and then if you're

00:02:45,670 --> 00:02:49,510
lucky have a really smart guy in your

00:02:47,799 --> 00:02:53,230
team who says stop

00:02:49,510 --> 00:02:57,430
we don't need ten the visitors we need

00:02:53,230 --> 00:03:00,849
one generic visitor so in our case we

00:02:57,430 --> 00:03:04,200
did have a very clever guy Gian fan who

00:03:00,849 --> 00:03:06,370
went off and produced a generic the

00:03:04,200 --> 00:03:10,000
visitor we don't do it for this class

00:03:06,370 --> 00:03:15,480
because it's very special case but we do

00:03:10,000 --> 00:03:20,049
it for other classes so you're doing

00:03:15,480 --> 00:03:22,060
debugging and I had a bug and code very

00:03:20,049 --> 00:03:26,139
similar to what to up to what what I

00:03:22,060 --> 00:03:29,439
showed and you go through and you

00:03:26,139 --> 00:03:33,579
include the Hackney headers and you hit

00:03:29,439 --> 00:03:38,049
here if you have is this case where you

00:03:33,579 --> 00:03:40,419
have a lambda nested and lambda which

00:03:38,049 --> 00:03:43,870
could capture something generic from the

00:03:40,419 --> 00:03:47,440
enclosing that lambda you need to defer

00:03:43,870 --> 00:03:50,470
that until you create two instance

00:03:47,440 --> 00:03:53,769
that's get the function call operated

00:03:50,470 --> 00:03:57,879
from this ticks the parts parse tree for

00:03:53,769 --> 00:04:00,459
the nested and lambda and extends it out

00:03:57,879 --> 00:04:02,909
to a longer life life life life spine

00:04:00,459 --> 00:04:08,849
because it needs to live a lot long

00:04:02,909 --> 00:04:13,150
longer fine soup I hit at this point

00:04:08,849 --> 00:04:16,030
went on and got to here and I was

00:04:13,150 --> 00:04:18,789
looking at the code and saying why are

00:04:16,030 --> 00:04:19,900
we here I don't think we should be here

00:04:18,789 --> 00:04:23,460
something's gone wrong

00:04:19,900 --> 00:04:27,479
further up the stack so a minute about

00:04:23,460 --> 00:04:34,360
debugger you do what everybody says

00:04:27,479 --> 00:04:38,010
you've been up the call call start and I

00:04:34,360 --> 00:04:40,600
forgot the cleared and you get this I

00:04:38,010 --> 00:04:45,970
think oh sorry I just pull it

00:04:40,600 --> 00:04:49,120
here I'll try extending it a bit nope

00:04:45,970 --> 00:04:53,500
doesn't help in my office

00:04:49,120 --> 00:04:54,970
I have three ma-mutt monitors I had this

00:04:53,500 --> 00:04:56,680
Wendell stretched the whole way across

00:04:54,970 --> 00:04:58,930
all three and I still couldn't see what

00:04:56,680 --> 00:05:00,490
what I wanted so went to the IDE team

00:04:58,930 --> 00:05:02,800
and I'm really running out of time here

00:05:00,490 --> 00:05:05,110
I said can you do anything they said yes

00:05:02,800 --> 00:05:07,840
you're right click on this go down to

00:05:05,110 --> 00:05:09,970
the new show you write tickers unclick

00:05:07,840 --> 00:05:12,520
show campus our arguments it removes

00:05:09,970 --> 00:05:16,150
them and now you can see the structure

00:05:12,520 --> 00:05:20,230
of your call call stack if you want the

00:05:16,150 --> 00:05:22,600
back again you put them back so that's a

00:05:20,230 --> 00:05:25,210
small feature it really worked worked

00:05:22,600 --> 00:05:26,060
for me it helped me and so I think

00:05:25,210 --> 00:05:31,949
deserves

00:05:26,060 --> 00:05:31,949

YouTube URL: https://www.youtube.com/watch?v=SLbdDyLGOgY


