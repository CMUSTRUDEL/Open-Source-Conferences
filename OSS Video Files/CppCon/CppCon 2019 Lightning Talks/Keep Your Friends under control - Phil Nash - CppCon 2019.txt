Title: Keep Your Friends under control - Phil Nash - CppCon 2019
Publication date: 2019-10-23
Playlist: CppCon 2019 Lightning Talks
Description: 
	http://CppCon.org
—
Discussion & Comments: https://www.reddit.com/r/cpp/
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:13,280 --> 00:00:17,730
right okay

00:00:15,150 --> 00:00:20,310
so ever that so keeping your friends

00:00:17,730 --> 00:00:22,400
under control some of you may guess

00:00:20,310 --> 00:00:26,189
where this is already going but so

00:00:22,400 --> 00:00:29,160
imagine you have a class here class

00:00:26,189 --> 00:00:31,800
Badger of course why not and pass the

00:00:29,160 --> 00:00:33,090
members you create an instance of this

00:00:31,800 --> 00:00:36,600
class badger notice it's in this

00:00:33,090 --> 00:00:37,829
namespace animals of course you can you

00:00:36,600 --> 00:00:41,370
can call this free function that

00:00:37,829 --> 00:00:43,830
operates on on badger just as it is

00:00:41,370 --> 00:00:48,630
because we have a D our argument

00:00:43,830 --> 00:00:50,760
depended lookup so there's a the pieces

00:00:48,630 --> 00:00:53,160
and so I haven't looked at this for a

00:00:50,760 --> 00:00:55,560
little while of course you can also

00:00:53,160 --> 00:00:57,780
qualify that free function with the

00:00:55,560 --> 00:01:01,620
namespace that it's in I'd now works as

00:00:57,780 --> 00:01:03,090
well and we're not using ADL but

00:01:01,620 --> 00:01:06,450
interesting if you put that free

00:01:03,090 --> 00:01:10,619
function inside the class as a friend

00:01:06,450 --> 00:01:13,950
and also make it in line this is now no

00:01:10,619 --> 00:01:15,510
longer find a while using ADL because

00:01:13,950 --> 00:01:18,420
it's technically not in that enclosing

00:01:15,510 --> 00:01:20,400
namespace which means the only way sorry

00:01:18,420 --> 00:01:23,880
the only way to find it is with ADL it's

00:01:20,400 --> 00:01:25,560
good that the wrong way around so if you

00:01:23,880 --> 00:01:29,190
try to call it qualified with a

00:01:25,560 --> 00:01:34,800
namespace that's an error but if you

00:01:29,190 --> 00:01:36,780
call it unqualified ideal picks it up so

00:01:34,800 --> 00:01:41,120
I can't remember why I put this slide in

00:01:36,780 --> 00:01:46,049
I know this is a bad idea but anyway

00:01:41,120 --> 00:01:49,260
what's the what's the benefit of this is

00:01:46,049 --> 00:01:51,810
it just a curiosity well it mention were

00:01:49,260 --> 00:01:55,440
talking about operators the Austrian

00:01:51,810 --> 00:01:58,590
operator overload here now we introduce

00:01:55,440 --> 00:02:04,140
another class that's not in that

00:01:58,590 --> 00:02:05,280
namespace if we introduce an error this

00:02:04,140 --> 00:02:07,470
is a sort of error message we're gonna

00:02:05,280 --> 00:02:09,299
see and I'm sure all familiar with this

00:02:07,470 --> 00:02:12,750
in fact this is just an extract and

00:02:09,299 --> 00:02:14,580
hopefully you can read all but in case

00:02:12,750 --> 00:02:16,590
you can't just assume in there's a bit

00:02:14,580 --> 00:02:18,990
that actually reflects the area that we

00:02:16,590 --> 00:02:21,930
introduced the rest of it's just noise

00:02:18,990 --> 00:02:23,810
coming from all the additional overloads

00:02:21,930 --> 00:02:26,909
that where we're finding because of ADR

00:02:23,810 --> 00:02:29,519
so if we can hide all of these overloads

00:02:26,909 --> 00:02:36,319
from EDL then we can drastically reduce

00:02:29,519 --> 00:02:39,239
the number of errors we do we get and

00:02:36,319 --> 00:02:44,519
that sort of reflects the what we cut

00:02:39,239 --> 00:02:48,329
out the term I'll zoom straight on to

00:02:44,519 --> 00:02:50,340
this this proposal from Walter e Brown

00:02:48,329 --> 00:02:52,290
and others recommendations for

00:02:50,340 --> 00:02:56,069
specifying hidden friends so this was

00:02:52,290 --> 00:02:57,540
actually raised as a standards proposal

00:02:56,069 --> 00:02:59,579
for the benefit of other standards

00:02:57,540 --> 00:03:01,230
proposals so that they can consider

00:02:59,579 --> 00:03:04,470
using this technique to reduce the

00:03:01,230 --> 00:03:06,750
number of overloads that we briefly

00:03:04,470 --> 00:03:09,359
exposed to not just error messages but

00:03:06,750 --> 00:03:10,769
also compile times as well having to

00:03:09,359 --> 00:03:13,650
consider all those additional overloads

00:03:10,769 --> 00:03:14,609
has a bit of a drag so I think really

00:03:13,650 --> 00:03:16,379
good that we're going its direction

00:03:14,609 --> 00:03:19,650
whether you actually use this technique

00:03:16,379 --> 00:03:21,569
yourself is up to you because there is a

00:03:19,650 --> 00:03:22,920
trade-off in that you do have to make

00:03:21,569 --> 00:03:26,069
them in line

00:03:22,920 --> 00:03:27,260
friends of the class which may not have

00:03:26,069 --> 00:03:30,930
been what you wanted to do otherwise

00:03:27,260 --> 00:03:33,449
there is another proposal the

00:03:30,930 --> 00:03:36,989
independence of declaration which

00:03:33,449 --> 00:03:37,889
proposes a new keyword to actually allow

00:03:36,989 --> 00:03:40,409
you to do the same thing without

00:03:37,889 --> 00:03:44,190
changing how you design the code but do

00:03:40,409 --> 00:03:48,239
note the date of this proposal April the

00:03:44,190 --> 00:03:50,040
first this year I'm not saying that

00:03:48,239 --> 00:03:51,599
means anything but if you want to go and

00:03:50,040 --> 00:03:54,410
have a look at that there's the github

00:03:51,599 --> 00:03:58,490
link so that was it thank you

00:03:54,410 --> 00:03:58,490

YouTube URL: https://www.youtube.com/watch?v=vPXZxQm-2-0


