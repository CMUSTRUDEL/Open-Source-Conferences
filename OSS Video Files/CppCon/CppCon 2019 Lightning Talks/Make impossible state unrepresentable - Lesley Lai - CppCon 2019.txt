Title: Make impossible state unrepresentable - Lesley Lai - CppCon 2019
Publication date: 2019-10-23
Playlist: CppCon 2019 Lightning Talks
Description: 
	http://CppCon.org
—
Discussion & Comments: https://www.reddit.com/r/cpp/
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:08,840 --> 00:00:14,219
hi I am Leslie and today I'm here to

00:00:12,299 --> 00:00:17,310
talk about making possible state of

00:00:14,219 --> 00:00:20,490
representable so considering a scenario

00:00:17,310 --> 00:00:24,000
where you're trying to track a pack your

00:00:20,490 --> 00:00:26,220
codebase and your faulty bugger and then

00:00:24,000 --> 00:00:28,170
you'll inspect the states of the program

00:00:26,220 --> 00:00:31,289
and then you're paying your head which

00:00:28,170 --> 00:00:35,850
is how is that even possible and some

00:00:31,289 --> 00:00:39,180
familiar so if that is case then you may

00:00:35,850 --> 00:00:42,989
say a unit has can help our gray unit

00:00:39,180 --> 00:00:46,610
has is great but I will assert that test

00:00:42,989 --> 00:00:50,670
is great but how representable is better

00:00:46,610 --> 00:00:52,920
so my motivation come from the following

00:00:50,670 --> 00:00:55,860
snippet of code that a copy the file to

00:00:52,920 --> 00:00:57,329
your website and clearly a lot of people

00:00:55,860 --> 00:01:00,000
are copying this particular piece of

00:00:57,329 --> 00:01:04,739
code without modification into the code

00:01:00,000 --> 00:01:07,710
base and here we have a bunch of Q

00:01:04,739 --> 00:01:11,880
indices and we need to create them and

00:01:07,710 --> 00:01:14,130
then use them later and we carry the

00:01:11,880 --> 00:01:17,400
indices by loops through all the Q's if

00:01:14,130 --> 00:01:20,070
they satisfy certain criteria then we

00:01:17,400 --> 00:01:24,210
just store them this function is the

00:01:20,070 --> 00:01:27,570
only place we ever have initialized Q

00:01:24,210 --> 00:01:32,970
indices so why not just model our

00:01:27,570 --> 00:01:35,970
structure like this and then we can only

00:01:32,970 --> 00:01:40,890
use that optional of Q in the CSS

00:01:35,970 --> 00:01:43,110
implementation details note the memory

00:01:40,890 --> 00:01:45,900
footprint get reduced in the first

00:01:43,110 --> 00:01:48,720
implementation we have 24 bytes for the

00:01:45,900 --> 00:01:50,970
structure of the Q family indices

00:01:48,720 --> 00:01:53,430
partially because of the efficient

00:01:50,970 --> 00:01:55,619
alignment of mod posted optionals

00:01:53,430 --> 00:01:59,970
and the second implement if you only

00:01:55,619 --> 00:02:03,630
have 12 they are also less assertion and

00:01:59,970 --> 00:02:05,310
runtime checks because you just think

00:02:03,630 --> 00:02:07,200
about the first example we have is

00:02:05,310 --> 00:02:09,810
complete function and in the second

00:02:07,200 --> 00:02:13,650
example itself it goes away because we

00:02:09,810 --> 00:02:16,200
never need to call this logic twice if

00:02:13,650 --> 00:02:19,349
you I also become cleaner if we utilize

00:02:16,200 --> 00:02:21,709
the type system better for example

00:02:19,349 --> 00:02:24,319
here's another exam how you

00:02:21,709 --> 00:02:27,049
so using star variant is a compiler

00:02:24,319 --> 00:02:28,790
graphics example four people are

00:02:27,049 --> 00:02:32,870
familiar with graphics programming this

00:02:28,790 --> 00:02:35,870
example is rarely contrived but it kind

00:02:32,870 --> 00:02:37,519
of have the point we have multiple

00:02:35,870 --> 00:02:39,859
comments that's where you need to send

00:02:37,519 --> 00:02:42,889
into GPU and first we catch them in a

00:02:39,859 --> 00:02:47,030
buffer and later submit them the problem

00:02:42,889 --> 00:02:50,030
here is that the perfect pipeline object

00:02:47,030 --> 00:02:52,519
is what encapsulates all the logic of

00:02:50,030 --> 00:02:54,620
how to job object on the screen however

00:02:52,519 --> 00:02:58,459
we can happily start a job without

00:02:54,620 --> 00:03:01,400
finding any graphics pipeline so an easy

00:02:58,459 --> 00:03:04,579
fix is to put graphics pipeline into the

00:03:01,400 --> 00:03:08,239
chalk command however we do pay overhead

00:03:04,579 --> 00:03:11,000
here because rebind graphics pipeline is

00:03:08,239 --> 00:03:14,030
costly operations on GPU so we don't

00:03:11,000 --> 00:03:15,439
want to do that instead we may have some

00:03:14,030 --> 00:03:18,459
logic to check the graphics pipeline

00:03:15,439 --> 00:03:22,310
still the same when we do push command

00:03:18,459 --> 00:03:23,540
so going a bit further we introduce we

00:03:22,310 --> 00:03:25,400
can introduce the second structure

00:03:23,540 --> 00:03:29,959
called secondary comment buffers that

00:03:25,400 --> 00:03:32,479
has when pipeline and a vector of

00:03:29,959 --> 00:03:35,060
comment this way we don't have overheads

00:03:32,479 --> 00:03:37,159
we don't need to sort against usage of

00:03:35,060 --> 00:03:37,849
perfect pipelines and it's really easy

00:03:37,159 --> 00:03:40,540
to build

00:03:37,849 --> 00:03:42,769
second we command buffering in parallel

00:03:40,540 --> 00:03:45,199
before the end I want to talk the

00:03:42,769 --> 00:03:47,389
pitfall of moves man takes we all have

00:03:45,199 --> 00:03:52,150
move semantics at least I love them but

00:03:47,389 --> 00:03:54,500
you get to open a whole type system so

00:03:52,150 --> 00:03:57,290
you say hello stream we can have a

00:03:54,500 --> 00:04:02,810
perfect rei class to represent resource

00:03:57,290 --> 00:04:05,599
handle but we cannot move them so in

00:04:02,810 --> 00:04:09,079
service 11 we introduce moves matrix now

00:04:05,599 --> 00:04:11,169
we can move them but then our resource

00:04:09,079 --> 00:04:14,599
handle become a pointer like object

00:04:11,169 --> 00:04:17,000
because an after move object must be

00:04:14,599 --> 00:04:18,739
worried and unspecified unspecified and

00:04:17,000 --> 00:04:21,620
matter because we specify what's the

00:04:18,739 --> 00:04:23,780
class to is doing but to be a worried

00:04:21,620 --> 00:04:25,820
after move states the only thing that we

00:04:23,780 --> 00:04:30,440
really can do for research handle is

00:04:25,820 --> 00:04:35,330
nothing so we are forced to represent

00:04:30,440 --> 00:04:37,759
the empty state and so my suggestion

00:04:35,330 --> 00:04:40,550
is move semantics is nice but if you can

00:04:37,759 --> 00:04:44,419
get away with it then just do this move

00:04:40,550 --> 00:04:46,759
move operations and instead of seventeen

00:04:44,419 --> 00:04:50,630
you can even rely on the mandatory

00:04:46,759 --> 00:04:54,040
copulation thank you

00:04:50,630 --> 00:04:54,040

YouTube URL: https://www.youtube.com/watch?v=hYyRrYwfy3k


