Title: Leaving No Input Unsanitized - Gabriel Aubut-Lussier - CppCon 2019
Publication date: 2019-10-23
Playlist: CppCon 2019 Lightning Talks
Description: 
	http://CppCon.org
—
Discussion & Comments: https://www.reddit.com/r/cpp/
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:08,410 --> 00:00:15,309
hello everyone so processing untrusted

00:00:12,250 --> 00:00:17,170
inputs is something that every

00:00:15,309 --> 00:00:20,920
application has to do at some point and

00:00:17,170 --> 00:00:22,990
so it is something that is very hard to

00:00:20,920 --> 00:00:25,960
get right if not perfect

00:00:22,990 --> 00:00:28,480
any failure to do it right may need to

00:00:25,960 --> 00:00:32,980
may lead to security vulnerabilities and

00:00:28,480 --> 00:00:35,410
so when I got tasked with writing a C++

00:00:32,980 --> 00:00:38,920
back-end that has to serve an HTTP REST

00:00:35,410 --> 00:00:41,290
API I figured I'm gonna screw up at some

00:00:38,920 --> 00:00:43,330
point or some time and so I decided to

00:00:41,290 --> 00:00:45,520
equip myself with the right tools in

00:00:43,330 --> 00:00:48,790
order to be able to solve this problem

00:00:45,520 --> 00:00:51,430
without having as many pitfalls so those

00:00:48,790 --> 00:00:53,950
tools I decided to design them this way

00:00:51,430 --> 00:00:56,320
first I want to deny myself direct

00:00:53,950 --> 00:00:58,360
access to the input this way I'm gonna

00:00:56,320 --> 00:01:00,430
have to enumerate all the inputs that

00:00:58,360 --> 00:01:04,329
I'm interested in with a declarative

00:01:00,430 --> 00:01:06,549
style this way I'm disclosing both the

00:01:04,329 --> 00:01:08,049
source of every input that I want to

00:01:06,549 --> 00:01:10,479
extract and the way I want to validate

00:01:08,049 --> 00:01:13,060
it it becomes impossible to forget to

00:01:10,479 --> 00:01:15,130
validate so the last step is

00:01:13,060 --> 00:01:18,310
implementing a generic solution that

00:01:15,130 --> 00:01:20,979
does the heavy lifting before a request

00:01:18,310 --> 00:01:24,280
can be handled so here's how it can look

00:01:20,979 --> 00:01:26,109
like from the use the client side so

00:01:24,280 --> 00:01:28,299
here we have two different types that

00:01:26,109 --> 00:01:31,149
are used to describe two different

00:01:28,299 --> 00:01:33,280
inputs those two inputs happen to be of

00:01:31,149 --> 00:01:36,340
a user-defined type called customer

00:01:33,280 --> 00:01:38,590
information so the first input is gonna

00:01:36,340 --> 00:01:41,380
be extracted from the header of the HTTP

00:01:38,590 --> 00:01:44,259
request called client and so we expect

00:01:41,380 --> 00:01:47,950
this input to be formatted or structured

00:01:44,259 --> 00:01:49,780
as JSON our second input is actually

00:01:47,950 --> 00:01:51,850
going to be extracted from the body of

00:01:49,780 --> 00:01:54,609
the HTTP request and we expect this one

00:01:51,850 --> 00:01:57,189
to be structured as a query string so

00:01:54,609 --> 00:01:59,409
now that we have those two type tests we

00:01:57,189 --> 00:02:02,939
can supply them to a generator request

00:01:59,409 --> 00:02:05,469
handler so that we also supply it our

00:02:02,939 --> 00:02:08,590
lambda that is going to be implementing

00:02:05,469 --> 00:02:11,020
our business domain load logic and so

00:02:08,590 --> 00:02:13,150
this lambda is only ever going to get

00:02:11,020 --> 00:02:15,849
invoked if every single one of the

00:02:13,150 --> 00:02:19,120
inputs is successfully validated now in

00:02:15,849 --> 00:02:21,370
this example we received the inputs as

00:02:19,120 --> 00:02:23,260
parameters to that lambda and

00:02:21,370 --> 00:02:25,000
nation is actually really simple we're

00:02:23,260 --> 00:02:28,959
just simply logging the inputs we

00:02:25,000 --> 00:02:30,549
receive so in order to be instantiating

00:02:28,959 --> 00:02:33,159
that generate request handler we're

00:02:30,549 --> 00:02:35,170
gonna look like how it may look like so

00:02:33,159 --> 00:02:36,849
this version is a bit simplified

00:02:35,170 --> 00:02:39,069
compared to the real proof of concept

00:02:36,849 --> 00:02:41,860
but it's gonna help us walk through the

00:02:39,069 --> 00:02:43,750
steps so first step is actually using

00:02:41,860 --> 00:02:46,060
the input descriptions we have provided

00:02:43,750 --> 00:02:49,510
earlier in order to extract raw data

00:02:46,060 --> 00:02:51,790
from our HTTP request object then once

00:02:49,510 --> 00:02:53,920
every single input has been successfully

00:02:51,790 --> 00:02:57,640
extracted and no one of them is missing

00:02:53,920 --> 00:02:59,650
we can proceed on to validation every

00:02:57,640 --> 00:03:03,280
single input is now validated according

00:02:59,650 --> 00:03:05,319
to the types for every input so we want

00:03:03,280 --> 00:03:08,470
to validate customer info user-defined

00:03:05,319 --> 00:03:10,510
types here once every single validation

00:03:08,470 --> 00:03:13,060
step is working then we can proceed to

00:03:10,510 --> 00:03:14,859
invoking the lambda with the inputs we

00:03:13,060 --> 00:03:17,590
receive because we now know that we can

00:03:14,859 --> 00:03:20,560
safely execute our business logic if

00:03:17,590 --> 00:03:23,109
anything in that chain of events is

00:03:20,560 --> 00:03:27,370
failing then we need to respond with a

00:03:23,109 --> 00:03:29,349
bad request so in order for this generic

00:03:27,370 --> 00:03:31,329
request handler to work successfully we

00:03:29,349 --> 00:03:33,790
have to build on another blog which is

00:03:31,329 --> 00:03:36,609
generic validation so for generic

00:03:33,790 --> 00:03:38,410
validation to work here is a function

00:03:36,609 --> 00:03:41,470
template that is going to serve as our

00:03:38,410 --> 00:03:44,459
generic validator we assume a strong

00:03:41,470 --> 00:03:47,769
semantic type so that we can actually

00:03:44,459 --> 00:03:50,980
take raw input and validate it with a

00:03:47,769 --> 00:03:51,579
single validation implementation for

00:03:50,980 --> 00:03:53,799
that type

00:03:51,579 --> 00:03:56,620
if validation is successful we can

00:03:53,799 --> 00:03:58,780
return an instance of the object and the

00:03:56,620 --> 00:04:02,560
end up in the other event we simply get

00:03:58,780 --> 00:04:04,660
a return at this engage optional so this

00:04:02,560 --> 00:04:06,609
serves as an extension point so that we

00:04:04,660 --> 00:04:09,430
can specialize that template for any

00:04:06,609 --> 00:04:12,129
user-defined type this way our customer

00:04:09,430 --> 00:04:14,560
info information can be validated the

00:04:12,129 --> 00:04:17,739
right way now the steps here are the

00:04:14,560 --> 00:04:20,349
same we simply test if the validation

00:04:17,739 --> 00:04:24,550
logic is successful and once that's the

00:04:20,349 --> 00:04:26,289
case we return in an instance so while

00:04:24,550 --> 00:04:28,510
preparing this presentation I realized

00:04:26,289 --> 00:04:30,789
well I did a proof of concept that works

00:04:28,510 --> 00:04:32,710
for HTTP requests but there's no reason

00:04:30,789 --> 00:04:35,020
we could have generalize a bit more for

00:04:32,710 --> 00:04:37,600
any tainted inputs we

00:04:35,020 --> 00:04:39,510
so you could imagine validating inputs

00:04:37,600 --> 00:04:43,600
to the main function this way or even

00:04:39,510 --> 00:04:45,940
stuff you're reading from a Cisco so my

00:04:43,600 --> 00:04:47,680
name is Gabrielle Lucia and if you're

00:04:45,940 --> 00:04:50,290
interested in discussing those those

00:04:47,680 --> 00:04:53,670
ideas in the hallways feel free to talk

00:04:50,290 --> 00:04:56,260
to me you can also test the

00:04:53,670 --> 00:04:58,540
implementation from my github repo with

00:04:56,260 --> 00:04:59,700
the link over here so thank you for your

00:04:58,540 --> 00:05:05,000
time everyone

00:04:59,700 --> 00:05:05,000

YouTube URL: https://www.youtube.com/watch?v=IDiLUhdUPPI


