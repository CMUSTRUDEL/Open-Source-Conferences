Title: 650 line C++ unit test library (easy to use) - Wahid Tanner - CppCon 2019
Publication date: 2019-10-23
Playlist: CppCon 2019 Lightning Talks
Description: 
	http://CppCon.org
—
Discussion & Comments: https://www.reddit.com/r/cpp/
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:09,320 --> 00:00:14,190
all right thank you for the delay while

00:00:12,270 --> 00:00:16,590
we move things around okay

00:00:14,190 --> 00:00:19,320
I'm Wahid dinner and I wanted to show

00:00:16,590 --> 00:00:21,800
you a unit test library that I wrote to

00:00:19,320 --> 00:00:24,630
help absolute beginners learn how to

00:00:21,800 --> 00:00:27,150
program unit tests from the very

00:00:24,630 --> 00:00:31,189
beginning so you can find everything I'm

00:00:27,150 --> 00:00:35,930
going to show you here on the github and

00:00:31,189 --> 00:00:38,400
the demo code as well as on github

00:00:35,930 --> 00:00:41,310
before I begin I want to just say that a

00:00:38,400 --> 00:00:43,770
really cool part about being here at CPP

00:00:41,310 --> 00:00:46,230
con is right before this presentation I

00:00:43,770 --> 00:00:49,620
was talking to some other developers

00:00:46,230 --> 00:00:51,120
about this unit test library and we

00:00:49,620 --> 00:00:53,820
found out some ways that I can make it

00:00:51,120 --> 00:00:55,920
better so that's just awesome ok so

00:00:53,820 --> 00:01:02,220
let's go ahead and begin

00:00:55,920 --> 00:01:04,920
so let's come down here ok so we have a

00:01:02,220 --> 00:01:10,590
very simple program here that is just

00:01:04,920 --> 00:01:13,140
going to break up a string into some

00:01:10,590 --> 00:01:15,780
individual words and I'm calling this

00:01:13,140 --> 00:01:22,979
method here called split string that's

00:01:15,780 --> 00:01:25,079
what I think I can oh yeah ok it

00:01:22,979 --> 00:01:28,249
actually takes ok I have to go through

00:01:25,079 --> 00:01:30,479
the menu each time to zoom like that the

00:01:28,249 --> 00:01:32,399
the library is very simple it just

00:01:30,479 --> 00:01:36,539
splits it up but there's a bug in it now

00:01:32,399 --> 00:01:40,770
if we run it here you can see that it

00:01:36,539 --> 00:01:45,840
all appears to run just fine now this

00:01:40,770 --> 00:01:48,179
one I can zoom so it splits up the the

00:01:45,840 --> 00:01:50,639
words line by line and everything

00:01:48,179 --> 00:01:52,439
appears to be fine now the next step

00:01:50,639 --> 00:01:54,299
that you'd want to do is try to put this

00:01:52,439 --> 00:01:57,899
in a unit test so I created another

00:01:54,299 --> 00:02:01,439
project here called split tests and we

00:01:57,899 --> 00:02:04,649
will make this one the active project

00:02:01,439 --> 00:02:07,409
here and this is using a single header

00:02:04,649 --> 00:02:09,149
file unit test library the interesting

00:02:07,409 --> 00:02:12,630
thing about it it's very easy to use you

00:02:09,149 --> 00:02:14,850
have a main dot CPP that I have over

00:02:12,630 --> 00:02:16,409
here and the maintenance CPP you don't

00:02:14,850 --> 00:02:19,860
actually put a main or anything in it

00:02:16,409 --> 00:02:21,360
you just define the the symbols that

00:02:19,860 --> 00:02:22,080
tells it that you wanted to generate a

00:02:21,360 --> 00:02:24,260
main

00:02:22,080 --> 00:02:26,700
you just include the test study h-file

00:02:24,260 --> 00:02:30,270
everything that you want to actually do

00:02:26,700 --> 00:02:33,210
you put in these scenarios and you would

00:02:30,270 --> 00:02:35,070
write it as if it was just a method just

00:02:33,210 --> 00:02:37,230
a function I'm calling them scenarios

00:02:35,070 --> 00:02:39,570
here all you have to do is include the

00:02:37,230 --> 00:02:42,570
unit test file and I'm including the

00:02:39,570 --> 00:02:48,030
header file of the string util and if we

00:02:42,570 --> 00:02:52,320
build and run this you can see what the

00:02:48,030 --> 00:02:55,800
output of this looks like and let's zoom

00:02:52,320 --> 00:02:57,950
in a little bit on that and you can see

00:02:55,800 --> 00:03:01,440
that it actually passed one test

00:02:57,950 --> 00:03:04,800
everything ran no failures and we're

00:03:01,440 --> 00:03:06,570
ready to go now this is using the happy

00:03:04,800 --> 00:03:09,800
case here of you know we've got a string

00:03:06,570 --> 00:03:13,020
with one two three what if we wanted to

00:03:09,800 --> 00:03:15,240
create a unit test that tested an empty

00:03:13,020 --> 00:03:17,400
string so I've got that down here

00:03:15,240 --> 00:03:19,700
and this is the benefit of unit tests it

00:03:17,400 --> 00:03:21,630
gets you in the mindset of thinking

00:03:19,700 --> 00:03:23,880
slightly different about how you're

00:03:21,630 --> 00:03:26,400
using your routines and this would come

00:03:23,880 --> 00:03:29,570
up so now if we test this with an empty

00:03:26,400 --> 00:03:29,570
string for the input

00:03:29,810 --> 00:03:37,790
let's build and run that we can see here

00:03:37,940 --> 00:03:48,930
then let me zoom in a bit we can see

00:03:43,700 --> 00:03:51,900
that we had a failure and we see the

00:03:48,930 --> 00:03:55,350
expected value was one on line 34 and

00:03:51,900 --> 00:03:58,200
the actual was zero so if we come down

00:03:55,350 --> 00:04:01,470
here to line 34 we can see that we

00:03:58,200 --> 00:04:03,239
expected to actually get something and

00:04:01,470 --> 00:04:06,989
we didn't get anything if we come over

00:04:03,239 --> 00:04:10,920
here to string util dot cpp and the bug

00:04:06,989 --> 00:04:14,400
is that if we had no input in the source

00:04:10,920 --> 00:04:18,030
we were just skipping it so I want to

00:04:14,400 --> 00:04:19,709
add that condition in so now we will

00:04:18,030 --> 00:04:21,239
actually check if we have an empty

00:04:19,709 --> 00:04:28,620
source we'll go ahead and add that

00:04:21,239 --> 00:04:31,080
anyway and if we build and run it now we

00:04:28,620 --> 00:04:34,260
will see that both tests are going to

00:04:31,080 --> 00:04:37,620
pass let me zoom in a bit

00:04:34,260 --> 00:04:40,230
yeah so we see that everything passed

00:04:37,620 --> 00:04:42,570
the nice thing about this unit test

00:04:40,230 --> 00:04:45,180
library is it will divide your unit

00:04:42,570 --> 00:04:47,160
tests up into a hierarchy as you

00:04:45,180 --> 00:04:50,040
determine so you can see that I've got a

00:04:47,160 --> 00:04:53,790
unit test here in an operation slash

00:04:50,040 --> 00:04:57,330
normal and an operation edge so you can

00:04:53,790 --> 00:05:00,300
group your unit tests more at a higher

00:04:57,330 --> 00:05:02,730
overt order level not just by which CPP

00:05:00,300 --> 00:05:07,560
file your unit tests appeared in so it's

00:05:02,730 --> 00:05:09,280
a nice a nice way to do that that is you

00:05:07,560 --> 00:05:13,640
know that's all I have thank you

00:05:09,280 --> 00:05:13,640

YouTube URL: https://www.youtube.com/watch?v=nnlEQwQlHQg


