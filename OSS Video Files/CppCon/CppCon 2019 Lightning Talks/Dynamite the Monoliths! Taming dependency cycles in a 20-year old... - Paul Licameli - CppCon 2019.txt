Title: Dynamite the Monoliths! Taming dependency cycles in a 20-year old... - Paul Licameli - CppCon 2019
Publication date: 2019-10-23
Playlist: CppCon 2019 Lightning Talks
Description: 
	http://CppCon.org
—
Discussion & Comments: https://www.reddit.com/r/cpp/
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:09,650 --> 00:00:16,680
hello CBP Khan I'm Paula Kelly and for

00:00:14,580 --> 00:00:18,990
the last five years I have been one of

00:00:16,680 --> 00:00:22,200
many contributors around the world to

00:00:18,990 --> 00:00:25,939
this free open-source audio recording

00:00:22,200 --> 00:00:25,939
and editing application called audacity

00:00:29,540 --> 00:00:35,460
which began 20 years ago at carnegie

00:00:32,730 --> 00:00:37,739
mellon university and since then has

00:00:35,460 --> 00:00:39,480
attracted many users and is now

00:00:37,739 --> 00:00:41,699
downloaded over tens of millions of

00:00:39,480 --> 00:00:44,489
times annually that figure is cumulative

00:00:41,699 --> 00:00:47,879
only since March of 2015 when it moved

00:00:44,489 --> 00:00:49,890
to a new hosting site so I'm a bit of a

00:00:47,879 --> 00:00:51,929
late comer to the project it was popular

00:00:49,890 --> 00:00:53,640
already without me but I've had some fun

00:00:51,929 --> 00:00:54,690
doing various things and here are just

00:00:53,640 --> 00:00:56,579
some of them

00:00:54,690 --> 00:00:58,589
the first two of those earned me a place

00:00:56,579 --> 00:01:00,749
on the development team with full commit

00:00:58,589 --> 00:01:02,609
rights and since then I mean I have even

00:01:00,749 --> 00:01:03,929
been elected to take a turn as a release

00:01:02,609 --> 00:01:06,300
manager although I'm not in that

00:01:03,929 --> 00:01:08,760
capacity now and as you see at the upper

00:01:06,300 --> 00:01:11,400
right my projects have included not only

00:01:08,760 --> 00:01:13,079
new features but also modernization

00:01:11,400 --> 00:01:15,060
initiatives and code cleanups I

00:01:13,079 --> 00:01:17,610
persuaded the team to take the leap up

00:01:15,060 --> 00:01:19,530
to C++ 11 and then I went through the

00:01:17,610 --> 00:01:21,090
code and comprehensively eliminated

00:01:19,530 --> 00:01:23,460
Naked News and deletes among other

00:01:21,090 --> 00:01:26,340
things in favor of smart pointers how

00:01:23,460 --> 00:01:27,810
much code about 280 thousand lines at a

00:01:26,340 --> 00:01:30,450
recent count and that's with all the

00:01:27,810 --> 00:01:33,750
blanks in the comments not gigantic not

00:01:30,450 --> 00:01:36,479
tiny either but I do not want to talk

00:01:33,750 --> 00:01:37,950
about modern C++ idioms for the

00:01:36,479 --> 00:01:39,420
remainder you know where to learn about

00:01:37,950 --> 00:01:42,270
them then you know why they are

00:01:39,420 --> 00:01:45,630
important but they are small-scale

00:01:42,270 --> 00:01:47,759
matters of code quality large scale

00:01:45,630 --> 00:01:50,189
matters of code quality are really an

00:01:47,759 --> 00:01:52,770
independent dimension the principles

00:01:50,189 --> 00:01:54,630
here are not modern their classical

00:01:52,770 --> 00:01:56,880
their perennial and not really tied to

00:01:54,630 --> 00:02:00,270
any particular language and they were

00:01:56,880 --> 00:02:03,030
all excellently stated in 1996 in this

00:02:00,270 --> 00:02:08,030
book by John Lagos one of the speakers

00:02:03,030 --> 00:02:08,030
at CPP Khan and he's here and

00:02:09,310 --> 00:02:15,350
John emphasizes good physical design as

00:02:13,040 --> 00:02:17,570
well as logical logical design is all

00:02:15,350 --> 00:02:18,830
about functions and classes plenty of

00:02:17,570 --> 00:02:20,750
books tell you about that physical

00:02:18,830 --> 00:02:22,610
design is about components roughly

00:02:20,750 --> 00:02:25,130
speaking compilation units that should

00:02:22,610 --> 00:02:27,650
be of reasonable size and have non

00:02:25,130 --> 00:02:29,240
cyclic dependencies among them keeping

00:02:27,650 --> 00:02:31,070
their dependencies noncyclic is

00:02:29,240 --> 00:02:33,770
important for several reasons such as

00:02:31,070 --> 00:02:36,020
these John emphasizes the bottom-up

00:02:33,770 --> 00:02:37,370
incremental unit testing strategy of

00:02:36,020 --> 00:02:39,710
course it makes the hole more

00:02:37,370 --> 00:02:41,780
comprehensible for your own team and for

00:02:39,710 --> 00:02:45,470
also any new recruits who are trying to

00:02:41,780 --> 00:02:47,720
understand it anyone and also I would

00:02:45,470 --> 00:02:49,520
say would make possible non monolithic

00:02:47,720 --> 00:02:52,850
deployments breaking up the program into

00:02:49,520 --> 00:02:54,740
a core and also drop in libraries

00:02:52,850 --> 00:02:59,450
implementing features so that you might

00:02:54,740 --> 00:03:01,610
have a you you might reassemble binary

00:02:59,450 --> 00:03:03,290
libraries in a folder and have a reduced

00:03:01,610 --> 00:03:05,540
or an enhanced version of the product

00:03:03,290 --> 00:03:07,520
just by restarting it not rebuilding and

00:03:05,540 --> 00:03:10,970
maybe even independent release cycles

00:03:07,520 --> 00:03:12,860
but to get there first I have to

00:03:10,970 --> 00:03:14,630
understand the accumulated dependencies

00:03:12,860 --> 00:03:17,150
we've got after 20 years and do

00:03:14,630 --> 00:03:19,459
something about it and to do that I

00:03:17,150 --> 00:03:21,320
wrote a little tool to assist me and I

00:03:19,459 --> 00:03:23,540
want to share that tool with you the

00:03:21,320 --> 00:03:26,000
tool uses graphviz on the back end which

00:03:23,540 --> 00:03:28,370
you may know is a free software program

00:03:26,000 --> 00:03:30,830
that compiles descriptions in a language

00:03:28,370 --> 00:03:33,470
called dots such as on the left into

00:03:30,830 --> 00:03:35,060
pictures such as on the right so it

00:03:33,470 --> 00:03:36,500
ought to be a cinch to write a Perl

00:03:35,060 --> 00:03:37,850
script that would find my include

00:03:36,500 --> 00:03:42,950
directives and generate a dot

00:03:37,850 --> 00:03:44,630
intermediate right well this is an

00:03:42,950 --> 00:03:46,430
unhelpful picture I don't know if this

00:03:44,630 --> 00:03:48,040
is well-structured stuff or not there's

00:03:46,430 --> 00:03:50,269
overwhelming detail you see a

00:03:48,040 --> 00:03:52,280
magnification there so I had to do a

00:03:50,269 --> 00:03:54,080
little more work to simplify the picture

00:03:52,280 --> 00:03:56,900
which took a couple hundred lines of

00:03:54,080 --> 00:03:59,180
Perl and a couple of afternoons have fun

00:03:56,900 --> 00:04:00,980
first I find strongly connected

00:03:59,180 --> 00:04:03,230
components of that graph by a lovely

00:04:00,980 --> 00:04:04,970
textbook algorithm squashed them down to

00:04:03,230 --> 00:04:07,310
a quotient graph which is necessarily

00:04:04,970 --> 00:04:09,739
free of cycles and furthermore remove

00:04:07,310 --> 00:04:12,049
redundant edges shortcuts like from A to

00:04:09,739 --> 00:04:14,030
C what's on the right retains complete

00:04:12,049 --> 00:04:15,739
and correct information about all

00:04:14,030 --> 00:04:17,810
transitive dependencies implied on the

00:04:15,739 --> 00:04:21,459
left but only that information which

00:04:17,810 --> 00:04:29,889
gives me this clear as mud picture

00:04:21,459 --> 00:04:32,110
I say clear as mud because it is a clear

00:04:29,889 --> 00:04:36,070
picture of what's known as a big ball of

00:04:32,110 --> 00:04:40,060
mud or monolith or tangle choose your

00:04:36,070 --> 00:04:41,680
metaphors so my task is to break that up

00:04:40,060 --> 00:04:43,570
but it looks overwhelming where do I

00:04:41,680 --> 00:04:45,729
start well there's more to the script

00:04:43,570 --> 00:04:47,710
though because it also writes a trace to

00:04:45,729 --> 00:04:49,600
standard error of that algorithm which

00:04:47,710 --> 00:04:51,910
retains the complete information about

00:04:49,600 --> 00:04:53,620
direct dependencies which the picture

00:04:51,910 --> 00:04:56,169
doesn't show you so if I want to know

00:04:53,620 --> 00:04:58,210
why component a is in a cycle with

00:04:56,169 --> 00:05:00,280
component B when they shouldn't I can

00:04:58,210 --> 00:05:02,110
study that output I can figure out what

00:05:00,280 --> 00:05:04,270
the links in the chain are I can figure

00:05:02,110 --> 00:05:08,020
out where the surprising one is and then

00:05:04,270 --> 00:05:10,120
I can find some some code transformation

00:05:08,020 --> 00:05:10,990
to apply those transformations weren't

00:05:10,120 --> 00:05:13,090
always easy

00:05:10,990 --> 00:05:15,430
there were many techniques and I could

00:05:13,090 --> 00:05:17,860
fill up many talks with that I'm showing

00:05:15,430 --> 00:05:19,840
you every 50 commits or so during the

00:05:17,860 --> 00:05:21,789
release in progress I got this far

00:05:19,840 --> 00:05:23,940
before code freeze thank you for

00:05:21,789 --> 00:05:23,940
listening

00:05:28,610 --> 00:05:35,400
find the script there at github apply it

00:05:32,910 --> 00:05:37,760
to your project - and let me know if it

00:05:35,400 --> 00:05:41,829
helps you - thank you

00:05:37,760 --> 00:05:41,829

YouTube URL: https://www.youtube.com/watch?v=E7sXU9cT3RE


