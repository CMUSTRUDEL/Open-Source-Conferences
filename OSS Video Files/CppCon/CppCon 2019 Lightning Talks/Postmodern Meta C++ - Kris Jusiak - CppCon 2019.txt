Title: Postmodern Meta C++ - Kris Jusiak - CppCon 2019
Publication date: 2019-10-23
Playlist: CppCon 2019 Lightning Talks
Description: 
	http://CppCon.org
—
Discussion & Comments: https://www.reddit.com/r/cpp/
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:09,730 --> 00:00:20,529
so this talk is just a quick overview of

00:00:14,170 --> 00:00:23,290
some modern C++ features in a practical

00:00:20,529 --> 00:00:28,989
applications in order to generalize and

00:00:23,290 --> 00:00:30,450
improve the design okay so just a

00:00:28,989 --> 00:00:36,430
disclaimer

00:00:30,450 --> 00:00:38,380
although we stock just have code on the

00:00:36,430 --> 00:00:40,270
under examples everything is actually

00:00:38,380 --> 00:00:41,130
compiled in and it might be found on the

00:00:40,270 --> 00:00:44,650
got bolt

00:00:41,130 --> 00:00:47,950
moving on so let's begin in some

00:00:44,650 --> 00:00:51,130
features which I really like about C++

00:00:47,950 --> 00:00:55,900
17 so we can actually do C++ reflection

00:00:51,130 --> 00:01:01,450
it's plus plus 17 and as I put an out

00:00:55,900 --> 00:01:02,890
there is examples here I have the use

00:01:01,450 --> 00:01:04,119
cases but the implementation might be

00:01:02,890 --> 00:01:07,990
found out Godfather links will be

00:01:04,119 --> 00:01:10,600
provided so with the similar spot cement

00:01:07,990 --> 00:01:13,899
in structure bindings we can do two

00:01:10,600 --> 00:01:18,639
tuple which will allow us to get the

00:01:13,899 --> 00:01:24,130
types and use them in a really generic

00:01:18,639 --> 00:01:26,200
fashion on top of that we can use nicer

00:01:24,130 --> 00:01:29,079
interfaces with the tuples so for

00:01:26,200 --> 00:01:33,719
example instead of STD gate we can use a

00:01:29,079 --> 00:01:37,299
more like a map interface with UDL or

00:01:33,719 --> 00:01:39,789
even like with the types as well so that

00:01:37,299 --> 00:01:46,179
improves our use cases for the how to

00:01:39,789 --> 00:01:48,850
use it on top of that is anyone using

00:01:46,179 --> 00:01:55,359
boost mp11 for the temporary

00:01:48,850 --> 00:01:57,789
metaprogramming some hands with c++ 17

00:01:55,359 --> 00:02:00,159
we can make it with variable templates

00:01:57,789 --> 00:02:03,939
we can make it much nicer than by

00:02:00,159 --> 00:02:05,740
default as you can see here we use at

00:02:03,939 --> 00:02:08,830
least which is a variable template and

00:02:05,740 --> 00:02:13,660
after that we pass it to a filter which

00:02:08,830 --> 00:02:17,849
just takes unique food pointers so it's

00:02:13,660 --> 00:02:17,849
same foo and after that we transform it

00:02:19,630 --> 00:02:27,920
sorry brother so as you can see right

00:02:23,960 --> 00:02:29,600
now if you want to have a union unique

00:02:27,920 --> 00:02:31,910
foot pointers we have at least which is

00:02:29,600 --> 00:02:36,530
a variable template we pipe it with

00:02:31,910 --> 00:02:38,480
render range style interface we

00:02:36,530 --> 00:02:42,710
transform and we unique

00:02:38,480 --> 00:02:45,170
so let's angle brackets much nicer

00:02:42,710 --> 00:02:48,680
we can easily static answer this with

00:02:45,170 --> 00:02:53,870
operator equal and you can find a link

00:02:48,680 --> 00:03:00,560
on garbled yet another feature which

00:02:53,870 --> 00:03:02,780
allow us to do more TMP nicer is c++

00:03:00,560 --> 00:03:06,680
concept designed by introspection part

00:03:02,780 --> 00:03:09,590
of it not fully yet but you can see that

00:03:06,680 --> 00:03:13,430
we can have unnamed concepts with the

00:03:09,590 --> 00:03:16,700
requires class expression here and in

00:03:13,430 --> 00:03:19,660
the in our case here if you have a full

00:03:16,700 --> 00:03:21,710
which has an eye that will return 42

00:03:19,660 --> 00:03:24,760
otherwise if you have a bar which

00:03:21,710 --> 00:03:28,190
doesn't have the eye it will return 0

00:03:24,760 --> 00:03:29,840
but it won't be a you know compilation

00:03:28,190 --> 00:03:33,320
error a hard compilation error so that's

00:03:29,840 --> 00:03:35,540
that's nice and the main thing to notice

00:03:33,320 --> 00:03:38,690
key is that we don't have to actually

00:03:35,540 --> 00:03:42,860
name the concept you can find it on that

00:03:38,690 --> 00:03:47,090
bull as well one more thing which we can

00:03:42,860 --> 00:03:50,810
do is to implement testing frameworks in

00:03:47,090 --> 00:03:55,989
c++ 20 with no macros so we don't have

00:03:50,810 --> 00:03:59,510
to you know dig in I have to actually

00:03:55,989 --> 00:04:01,600
try to find bugs and arrows in it and

00:03:59,510 --> 00:04:04,280
with the certification

00:04:01,600 --> 00:04:07,520
we'll get the error which will show us

00:04:04,280 --> 00:04:13,370
all the information which we pass

00:04:07,520 --> 00:04:15,350
through to our test case and finally

00:04:13,370 --> 00:04:20,690
we've immediately invoked function

00:04:15,350 --> 00:04:23,030
expressions we can we can combine all

00:04:20,690 --> 00:04:25,669
those features together in order to to

00:04:23,030 --> 00:04:30,080
do some crazy stuff so assuming you have

00:04:25,669 --> 00:04:31,639
a lambda with just some some stuff using

00:04:30,080 --> 00:04:35,659
the full expressions

00:04:31,639 --> 00:04:38,689
we can get we can use suitable with a

00:04:35,659 --> 00:04:42,319
reflection to filter using the requires

00:04:38,689 --> 00:04:46,189
expression and range the interface and

00:04:42,319 --> 00:04:48,250
unique them and pass them to you know

00:04:46,189 --> 00:04:52,789
lambda which has been familiar template

00:04:48,250 --> 00:04:55,400
kind of lack of syntax get the and some

00:04:52,789 --> 00:04:58,310
of the problems it's so it's like as to

00:04:55,400 --> 00:05:03,650
the apply basically so when we do that

00:04:58,310 --> 00:05:06,939
where we have full and we run it when we

00:05:03,650 --> 00:05:10,699
will get the result as expected

00:05:06,939 --> 00:05:11,930
so let's embrace postmodern matter C++

00:05:10,699 --> 00:05:16,009
thank you

00:05:11,930 --> 00:05:16,009

YouTube URL: https://www.youtube.com/watch?v=uAc42iOAZLI


