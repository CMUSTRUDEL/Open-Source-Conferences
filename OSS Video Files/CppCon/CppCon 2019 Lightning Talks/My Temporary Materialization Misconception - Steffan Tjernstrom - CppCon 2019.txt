Title: My Temporary Materialization Misconception - Steffan Tjernstrom - CppCon 2019
Publication date: 2019-10-23
Playlist: CppCon 2019 Lightning Talks
Description: 
	http://CppCon.org
—
Discussion & Comments: https://www.reddit.com/r/cpp/
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:08,120 --> 00:00:17,180
good evening friends I stand before you

00:00:11,990 --> 00:00:22,610
with a confession to make in my vanity I

00:00:17,180 --> 00:00:24,189
thought I understood C++ 17 reality

00:00:22,610 --> 00:00:28,730
proved me wrong

00:00:24,189 --> 00:00:31,640
and this is that story but first just a

00:00:28,730 --> 00:00:33,680
quick little bit of disclosures since

00:00:31,640 --> 00:00:36,110
this is a story about my mistakes I'm

00:00:33,680 --> 00:00:40,490
sure there are more and this is slide

00:00:36,110 --> 00:00:42,680
code beware so temporary materialization

00:00:40,490 --> 00:00:44,660
for those watching on YouTube since I'm

00:00:42,680 --> 00:00:47,810
sure that everybody here in the room

00:00:44,660 --> 00:00:52,970
knows exactly what it is it's fairly

00:00:47,810 --> 00:00:56,090
simple in C++ 17 if you have a function

00:00:52,970 --> 00:01:00,650
that returns an expression by value so a

00:00:56,090 --> 00:01:04,580
factory and you assign that return into

00:01:00,650 --> 00:01:07,130
a variable of that type then it's

00:01:04,580 --> 00:01:09,470
exactly the same as though you just

00:01:07,130 --> 00:01:11,990
assign the result of the expression into

00:01:09,470 --> 00:01:17,539
that variable the return path just

00:01:11,990 --> 00:01:20,390
doesn't exist now this is magic that

00:01:17,539 --> 00:01:25,749
occurs by the discovery of yet another

00:01:20,390 --> 00:01:29,539
value category in this case the x value

00:01:25,749 --> 00:01:33,979
and if we look at what all these are we

00:01:29,539 --> 00:01:37,639
find that there is a global l value

00:01:33,979 --> 00:01:41,210
which is basically the identity of

00:01:37,639 --> 00:01:46,549
something more or less real we have a

00:01:41,210 --> 00:01:49,549
pure R value which is a pure platonic

00:01:46,549 --> 00:01:51,679
ephemeral thing that doesn't actually

00:01:49,549 --> 00:01:55,850
exist but can be used to create other

00:01:51,679 --> 00:02:00,499
things and we have this X value thing

00:01:55,850 --> 00:02:03,999
that is an expired value where you can

00:02:00,499 --> 00:02:07,520
reuse the resources of that value so

00:02:03,999 --> 00:02:10,160
think of a mood from object as a typical

00:02:07,520 --> 00:02:13,400
example and that leaves us with the

00:02:10,160 --> 00:02:15,430
traditional L value being a deal value

00:02:13,400 --> 00:02:20,780
that isn't an X value and an R value

00:02:15,430 --> 00:02:21,560
well that's a PR value or an X value so

00:02:20,780 --> 00:02:26,090
it's been

00:02:21,560 --> 00:02:30,620
a fairly simple now my problem was this

00:02:26,090 --> 00:02:33,349
I had a dispatcher or a group of

00:02:30,620 --> 00:02:37,640
dispatcher types they're basically

00:02:33,349 --> 00:02:39,769
handles to various forms of memory so

00:02:37,640 --> 00:02:42,890
they can't be copied but they have

00:02:39,769 --> 00:02:45,349
fairly complicated move semantics and I

00:02:42,890 --> 00:02:47,750
was storing a number of these things in

00:02:45,349 --> 00:02:53,650
a vector of unique pointers of them just

00:02:47,750 --> 00:02:56,350
to keep lifetime not the problem however

00:02:53,650 --> 00:02:59,690
what I found was that when I was

00:02:56,350 --> 00:03:01,489
constructing that vector I was getting

00:02:59,690 --> 00:03:04,430
an awful lot of dispatcher move

00:03:01,489 --> 00:03:10,360
constructors getting called which I

00:03:04,430 --> 00:03:14,750
wasn't expecting specifically if I

00:03:10,360 --> 00:03:16,400
simplified it even if I just created a

00:03:14,750 --> 00:03:19,010
unique point it would make unique I

00:03:16,400 --> 00:03:21,250
would get the move constructor running

00:03:19,010 --> 00:03:23,330
I'm thinking we'll hang on temporary

00:03:21,250 --> 00:03:29,810
materialization shouldn't all that just

00:03:23,330 --> 00:03:32,239
collapse maybe not so let's simplify if

00:03:29,810 --> 00:03:34,100
we look at make unique in this

00:03:32,239 --> 00:03:36,500
particular implementation there's two

00:03:34,100 --> 00:03:38,810
areas where things might go wrong to my

00:03:36,500 --> 00:03:40,069
mind there's the call to new and there's

00:03:38,810 --> 00:03:45,380
the perfect forwarding of

00:03:40,069 --> 00:03:47,090
our thing so new that's probably going

00:03:45,380 --> 00:03:49,880
to be it right now

00:03:47,090 --> 00:03:52,519
perfect no problem as if it's never

00:03:49,880 --> 00:03:56,239
called temporary materialization really

00:03:52,519 --> 00:03:58,670
does work however as soon as I throw the

00:03:56,239 --> 00:04:02,569
perfect forwarding in as in the make

00:03:58,670 --> 00:04:04,940
function suddenly in this case copy

00:04:02,569 --> 00:04:09,730
constructors get called and of course

00:04:04,940 --> 00:04:12,350
the reason for that is how I Hinnant now

00:04:09,730 --> 00:04:14,989
what's really going on here well it

00:04:12,350 --> 00:04:16,820
turns out the materialization or the

00:04:14,989 --> 00:04:19,280
creation of the temporary that was

00:04:16,820 --> 00:04:21,620
getting moved from a copied from in this

00:04:19,280 --> 00:04:23,990
case occurs on the binding of a

00:04:21,620 --> 00:04:27,080
reference to a PR value because we're

00:04:23,990 --> 00:04:30,440
returning a reference oops sorry

00:04:27,080 --> 00:04:32,690
game over fortunately there's always

00:04:30,440 --> 00:04:34,320
more papers in new standards

00:04:32,690 --> 00:04:40,260
so the

00:04:34,320 --> 00:04:42,920
his hope P 527 specifically may well fix

00:04:40,260 --> 00:04:45,330
this but there is some uncertainty

00:04:42,920 --> 00:04:49,260
depending on whom I've asked I've gotten

00:04:45,330 --> 00:04:51,350
yes no and maybe so I'm just gonna wait

00:04:49,260 --> 00:04:54,570
and see what the implementers do and

00:04:51,350 --> 00:04:57,150
please don't do what I did do as I say

00:04:54,570 --> 00:04:58,740
read the blogs watch the videos thank

00:04:57,150 --> 00:05:01,339
you

00:04:58,740 --> 00:05:01,339

YouTube URL: https://www.youtube.com/watch?v=5v8Iyix0kAU


