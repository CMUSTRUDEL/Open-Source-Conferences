Title: CppCon 2018: Jens Weller “Generating UI with C++, boost & Qt”
Publication date: 2018-11-11
Playlist: CppCon 2018 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:05,040
yes hi so I want to talk about a little

00:00:03,240 --> 00:00:09,559
experiment that is the spring about

00:00:05,040 --> 00:00:13,200
generating UI with C++ boost impute and

00:00:09,559 --> 00:00:16,199
so yeah so I I still try to combine

00:00:13,200 --> 00:00:23,220
modern C++ that's cute but if you use

00:00:16,199 --> 00:00:24,930
cute it's usually well you know so one

00:00:23,220 --> 00:00:27,300
of the reasons that is you cannot

00:00:24,930 --> 00:00:29,340
combine templates with few object if you

00:00:27,300 --> 00:00:32,210
drive from queue object temperature out

00:00:29,340 --> 00:00:34,680
of the door and generic programming is

00:00:32,210 --> 00:00:38,399
basically getting useless and and that's

00:00:34,680 --> 00:00:39,960
really not what we want so what what if

00:00:38,399 --> 00:00:42,450
you know I know there's copper spice but

00:00:39,960 --> 00:00:44,370
also there's no a library which is

00:00:42,450 --> 00:00:45,899
called Metagross which just does what

00:00:44,370 --> 00:00:49,590
the mock does and suppose was fought in

00:00:45,899 --> 00:00:51,149
very via the constant expression things

00:00:49,590 --> 00:00:53,219
which are available through superclass

00:00:51,149 --> 00:00:54,989
14 and it's just a simple drop-in

00:00:53,219 --> 00:00:56,699
replacement was a few macros and a

00:00:54,989 --> 00:00:58,920
little bit other things it's certainly

00:00:56,699 --> 00:01:00,539
not nice and beautiful but it doesn't

00:00:58,920 --> 00:01:02,820
stop and you get rid of the mark and you

00:01:00,539 --> 00:01:07,470
actually have templated cute classes

00:01:02,820 --> 00:01:10,200
like templated models so now my my

00:01:07,470 --> 00:01:13,950
current idea is like i was a generate UI

00:01:10,200 --> 00:01:16,619
based on boost fusion at obstruct i also

00:01:13,950 --> 00:01:20,400
use this to play around with boost MP 11

00:01:16,619 --> 00:01:22,200
which was released spring and I'm kind

00:01:20,400 --> 00:01:25,049
of working on a library which then

00:01:22,200 --> 00:01:27,509
generically provides cute models simple

00:01:25,049 --> 00:01:32,400
helper classes and you I've used four

00:01:27,509 --> 00:01:34,470
types and nested types so simple thing

00:01:32,400 --> 00:01:41,520
with fusion if you play around a little

00:01:34,470 --> 00:01:43,860
bit you get to have nice things like you

00:01:41,520 --> 00:01:47,460
can this this is just extracting the

00:01:43,860 --> 00:01:52,079
names of all members and you nicely

00:01:47,460 --> 00:01:55,350
factors into the area and just call for

00:01:52,079 --> 00:01:57,270
each vaio boost in 311 and just ask

00:01:55,350 --> 00:02:02,369
fusion for every member name and you

00:01:57,270 --> 00:02:05,909
return that easy but then if I want to

00:02:02,369 --> 00:02:09,959
generate UI I have to kind of have a

00:02:05,909 --> 00:02:12,450
connection between what the data member

00:02:09,959 --> 00:02:15,970
is and what

00:02:12,450 --> 00:02:18,460
controllers and for that I currently use

00:02:15,970 --> 00:02:21,160
text because the string just can be so

00:02:18,460 --> 00:02:23,650
much out of things or an INT and so I

00:02:21,160 --> 00:02:25,240
applied text tech dispatching and this

00:02:23,650 --> 00:02:27,190
is like for it's simply this is like how

00:02:25,240 --> 00:02:29,110
this looks like when the actual class

00:02:27,190 --> 00:02:31,990
then is threatened there's an edit

00:02:29,110 --> 00:02:35,680
dialog which can edit any boost fusion

00:02:31,990 --> 00:02:41,230
adapted type and then just displace them

00:02:35,680 --> 00:02:44,560
an analyst and then you'd simply have a

00:02:41,230 --> 00:02:49,240
make dialog function which just gets the

00:02:44,560 --> 00:02:51,190
type and returns the generated value of

00:02:49,240 --> 00:02:53,830
that dialogue so any type which is the

00:02:51,190 --> 00:02:55,720
depth it can just happen the Edit dialog

00:02:53,830 --> 00:02:57,610
now and it's like very very useful if

00:02:55,720 --> 00:03:01,450
you have like an option type or

00:02:57,610 --> 00:03:03,910
something yeah and it tech dispatchers

00:03:01,450 --> 00:03:05,560
then just simply every you know check

00:03:03,910 --> 00:03:08,260
the special overload and then return

00:03:05,560 --> 00:03:09,760
returns the cute type I'm currently

00:03:08,260 --> 00:03:11,890
using cutest could be very easily

00:03:09,760 --> 00:03:13,810
adapted to any other URL library so you

00:03:11,890 --> 00:03:15,040
could auto generate your code was

00:03:13,810 --> 00:03:17,019
actually something which is like more

00:03:15,040 --> 00:03:18,549
modern than acute went acute is the

00:03:17,019 --> 00:03:23,170
default in many industries and that's

00:03:18,549 --> 00:03:25,780
also what I use and yeah this is

00:03:23,170 --> 00:03:32,530
currently a prototype the cute models

00:03:25,780 --> 00:03:34,390
were creating UI views works and yes so

00:03:32,530 --> 00:03:36,010
why I do this is like I want to write

00:03:34,390 --> 00:03:38,170
less boilerplate I would just want to

00:03:36,010 --> 00:03:40,930
have like a type which is a depth and

00:03:38,170 --> 00:03:42,730
some template things which do the work

00:03:40,930 --> 00:03:45,940
in the background for me instead of me

00:03:42,730 --> 00:03:48,160
just adding a new data member then

00:03:45,940 --> 00:03:51,430
adding a new control and so I kind of

00:03:48,160 --> 00:03:54,340
having to name this thing again and in

00:03:51,430 --> 00:03:56,320
the dialog and then have maybe a view to

00:03:54,340 --> 00:03:59,530
display this is Sarah Sarah I just want

00:03:56,320 --> 00:04:01,600
to be able to you know kind of see what

00:03:59,530 --> 00:04:03,130
I can do as a reflect that type without

00:04:01,600 --> 00:04:05,049
waiting for a reflection and used

00:04:03,130 --> 00:04:07,780
already hasn't reflected very minimal

00:04:05,049 --> 00:04:10,120
bit and just have to do it by hand but I

00:04:07,780 --> 00:04:11,980
actually can have some nice code which

00:04:10,120 --> 00:04:13,630
it's ready for a fraction when we have

00:04:11,980 --> 00:04:18,010
that and super first ninety three I

00:04:13,630 --> 00:04:20,169
heard and yeah this is going to be

00:04:18,010 --> 00:04:22,330
continued I'm working on that hope that

00:04:20,169 --> 00:04:24,490
I might have like more than a prototype

00:04:22,330 --> 00:04:25,190
soon definitely definitely show some

00:04:24,490 --> 00:04:29,210
more coat and

00:04:25,190 --> 00:04:33,350
my conference and is that I have 30

00:04:29,210 --> 00:04:37,280
seconds left so one of the big problems

00:04:33,350 --> 00:04:40,400
I see for my uncle basis is that the

00:04:37,280 --> 00:04:43,520
code which which which I now am able to

00:04:40,400 --> 00:04:47,930
write is so alien to the cute code I

00:04:43,520 --> 00:04:50,180
wrote prior to - that is very simple

00:04:47,930 --> 00:04:50,930
pretty hard to to combine it with

00:04:50,180 --> 00:04:53,330
everything

00:04:50,930 --> 00:04:54,800
so I basically often have to know the

00:04:53,330 --> 00:04:56,510
choice - to rewrite my whole application

00:04:54,800 --> 00:04:59,450
was that or just don't use it

00:04:56,510 --> 00:05:02,650
so as I'm currently figuring out how to

00:04:59,450 --> 00:05:02,650
combine that with old code

00:05:03,030 --> 00:05:08,300

YouTube URL: https://www.youtube.com/watch?v=L0ipwl5uXCE


