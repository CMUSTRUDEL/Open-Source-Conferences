Title: CppCon 2018: Howard Hinnant “＜chrono＞ Then and Now”
Publication date: 2018-11-10
Playlist: CppCon 2018 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,000 --> 00:00:03,449
all right so I'm gonna be talking about

00:00:01,319 --> 00:00:04,980
chrono big surprise I'm gonna talk a

00:00:03,449 --> 00:00:08,760
little bit about where it's been and

00:00:04,980 --> 00:00:10,469
where it's going so in C++ 11 chrono was

00:00:08,760 --> 00:00:12,170
introduced in the heart of chrono is

00:00:10,469 --> 00:00:15,379
these durations hours minutes

00:00:12,170 --> 00:00:18,690
milliseconds SIG's cetera et cetera and

00:00:15,379 --> 00:00:21,180
chrono also added time points in C++ 11

00:00:18,690 --> 00:00:23,519
and time points are exactly if you

00:00:21,180 --> 00:00:25,170
subtract if she's subtract two time

00:00:23,519 --> 00:00:27,359
points you get a duration or if you add

00:00:25,170 --> 00:00:29,189
a duration to a time point you get

00:00:27,359 --> 00:00:31,679
another time point it's a great little

00:00:29,189 --> 00:00:33,329
algebra that's built into the language

00:00:31,679 --> 00:00:35,250
and if you get the algebra wrong the

00:00:33,329 --> 00:00:37,890
great thing is the compiler will tell

00:00:35,250 --> 00:00:40,200
you it's not a runtime error so clients

00:00:37,890 --> 00:00:42,899
can access both time points and

00:00:40,200 --> 00:00:44,640
durations and there's clocks which is

00:00:42,899 --> 00:00:46,020
just a collection of time points and

00:00:44,640 --> 00:00:48,329
durations in some function that tells

00:00:46,020 --> 00:00:51,239
you the current time so if you want to

00:00:48,329 --> 00:00:53,940
know more about chrono see my talk from

00:00:51,239 --> 00:00:56,010
two years ago titled a chrono tutorial

00:00:53,940 --> 00:01:00,570
at cpp con so you can find that on

00:00:56,010 --> 00:01:04,199
youtube coming in c++ 20 we're gonna add

00:01:00,570 --> 00:01:05,820
several new durations days weeks months

00:01:04,199 --> 00:01:10,080
and years this will help us deal with

00:01:05,820 --> 00:01:12,450
calendars and then we're also going to

00:01:10,080 --> 00:01:14,490
add some time point aliases one called

00:01:12,450 --> 00:01:16,890
sis time which is just a fancy way of

00:01:14,490 --> 00:01:21,210
saying system o'clock time point but for

00:01:16,890 --> 00:01:22,560
an app for arbitrary precision and one

00:01:21,210 --> 00:01:24,390
of those Precision's is going to be

00:01:22,560 --> 00:01:26,700
called sis days which is nothing but a

00:01:24,390 --> 00:01:29,490
system clock time point with a precision

00:01:26,700 --> 00:01:31,470
of days and it turns out this is key to

00:01:29,490 --> 00:01:34,259
having this time point it it turns out

00:01:31,470 --> 00:01:37,290
this is Etta stone for interoperating

00:01:34,259 --> 00:01:40,560
with different calendars and one

00:01:37,290 --> 00:01:42,840
calendar will come with c++ 20 and

00:01:40,560 --> 00:01:44,790
that'll be the civil calendar and you

00:01:42,840 --> 00:01:48,360
can write your own calendars if you want

00:01:44,790 --> 00:01:50,610
a hebrew calendar or iso week based

00:01:48,360 --> 00:01:52,290
calendar or what have you and if you

00:01:50,610 --> 00:01:55,009
want to see more about how that's gonna

00:01:52,290 --> 00:01:58,530
work see my talk from three years ago

00:01:55,009 --> 00:02:00,090
c++ 14 approach to dates and times at

00:01:58,530 --> 00:02:01,920
that time we weren't sure whether this

00:02:00,090 --> 00:02:04,890
was going to be standardized or not but

00:02:01,920 --> 00:02:06,869
the library turned out pretty well a lot

00:02:04,890 --> 00:02:08,759
of people liked it and so it was

00:02:06,869 --> 00:02:12,300
proposed for standardization and voted

00:02:08,759 --> 00:02:16,680
into the working draft earlier this year

00:02:12,300 --> 00:02:18,990
and also coming in C++ 20 there will be

00:02:16,680 --> 00:02:21,450
time zones and that'll allow you to

00:02:18,990 --> 00:02:23,370
convert between UTC and any other time

00:02:21,450 --> 00:02:25,380
zone or really between any two time

00:02:23,370 --> 00:02:27,390
zones on the planet and that's more than

00:02:25,380 --> 00:02:30,720
just between your computers local time

00:02:27,390 --> 00:02:33,990
zone and UTC it's literally any time

00:02:30,720 --> 00:02:35,970
zone and there'll be a new type called

00:02:33,990 --> 00:02:39,480
zone time which represents a time zone

00:02:35,970 --> 00:02:42,360
and a time point pair and there'll be a

00:02:39,480 --> 00:02:44,130
bunch more clocks at UTC o'clock that

00:02:42,360 --> 00:02:48,060
will deal with leap seconds there's also

00:02:44,130 --> 00:02:51,960
a TI tii clock for the dealing with the

00:02:48,060 --> 00:02:55,890
TA I time standard GPS clock and a five

00:02:51,960 --> 00:02:57,780
o'clock for new file system so you'll be

00:02:55,890 --> 00:03:00,630
able to model all these different time

00:02:57,780 --> 00:03:03,060
systems and deal with leap seconds and

00:03:00,630 --> 00:03:04,920
to top it all off they'll be parsing and

00:03:03,060 --> 00:03:06,540
formatting for everything from durations

00:03:04,920 --> 00:03:09,750
time points different time zones

00:03:06,540 --> 00:03:12,360
calendars you name it and if you want to

00:03:09,750 --> 00:03:12,990
hear more about that see my talk from

00:03:12,360 --> 00:03:16,110
two years ago

00:03:12,990 --> 00:03:17,910
welcome to the time zone and that

00:03:16,110 --> 00:03:19,090
concludes my lightning talk and thank

00:03:17,910 --> 00:03:25,809
you very much for your time

00:03:19,090 --> 00:03:25,809

YouTube URL: https://www.youtube.com/watch?v=Q-4fzrhgBTg


