Title: CppCon 2018: Martin Šmarda “Especially nasty bug in our network scanner”
Publication date: 2018-11-12
Playlist: CppCon 2018 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,089 --> 00:00:04,470
I want to start with saying that I

00:00:02,190 --> 00:00:06,299
understand that someone would make their

00:00:04,470 --> 00:00:08,580
slide since you make because I use

00:00:06,299 --> 00:00:10,950
PowerPoint and try to insert code from

00:00:08,580 --> 00:00:12,809
Visual Studio inside anyway

00:00:10,950 --> 00:00:15,509
before I begin I need to comply with

00:00:12,809 --> 00:00:18,090
intellectual property rules and laws and

00:00:15,509 --> 00:00:21,029
this buck is creation of my friend and

00:00:18,090 --> 00:00:22,830
colleague and here you actually threaten

00:00:21,029 --> 00:00:25,710
me to return the favor with my own buck

00:00:22,830 --> 00:00:27,570
but fortunately for me I think I have a

00:00:25,710 --> 00:00:30,900
hard time doing that in five minutes

00:00:27,570 --> 00:00:35,010
because I think I put a lot of effort in

00:00:30,900 --> 00:00:37,790
my box so this is about a network

00:00:35,010 --> 00:00:41,250
scanner in Avast one of its job is to

00:00:37,790 --> 00:00:44,670
discover services on a network devices

00:00:41,250 --> 00:00:46,110
and if the port scanner discovers the

00:00:44,670 --> 00:00:50,219
service you need to verify the home

00:00:46,110 --> 00:00:52,710
somehow because it's not reliable so if

00:00:50,219 --> 00:00:56,090
we have a MQTT service on typical work

00:00:52,710 --> 00:01:00,690
we need to talk to it before we plug it

00:00:56,090 --> 00:01:03,390
for sure so you write something like

00:01:00,690 --> 00:01:05,420
that create a TCP connection open it to

00:01:03,390 --> 00:01:09,030
the service and some whole message

00:01:05,420 --> 00:01:12,630
letter or a PI and verify it don't see

00:01:09,030 --> 00:01:15,960
don't see the right all you need is the

00:01:12,630 --> 00:01:18,659
whole message if you look at the mqtt

00:01:15,960 --> 00:01:22,320
specification it sounds a little less

00:01:18,659 --> 00:01:26,700
easy quite complex so I will introduce

00:01:22,320 --> 00:01:28,890
my own and pewt TV we have some boring

00:01:26,700 --> 00:01:32,549
headers some magic letters of the

00:01:28,890 --> 00:01:38,820
protocol payload size and the actual

00:01:32,549 --> 00:01:41,670
payload so luckily for us the message

00:01:38,820 --> 00:01:43,590
can be encoded into a binary string

00:01:41,670 --> 00:01:47,430
being Kleist programmer I don't want to

00:01:43,590 --> 00:01:50,520
assemble it in the runtime and if we

00:01:47,430 --> 00:01:53,579
look at the documentation we can see we

00:01:50,520 --> 00:01:57,950
can do that so we write something like

00:01:53,579 --> 00:02:02,159
this amputee T string and we send it

00:01:57,950 --> 00:02:03,869
actually it doesn't work so you spend a

00:02:02,159 --> 00:02:07,110
lot of time checking your control flow

00:02:03,869 --> 00:02:10,179
find nothing wrong and result interrupt

00:02:07,110 --> 00:02:12,909
resort which is bar shark and

00:02:10,179 --> 00:02:17,159
you find that you sending some garbage

00:02:12,909 --> 00:02:20,230
so we encoded in URL and this does work

00:02:17,159 --> 00:02:23,859
but what these two messages are supposed

00:02:20,230 --> 00:02:27,670
to be identical all day it turns out

00:02:23,859 --> 00:02:32,459
that they are not really identical the

00:02:27,670 --> 00:02:35,739
first one is a little bit shorter so

00:02:32,459 --> 00:02:38,829
what happening here have you ever

00:02:35,739 --> 00:02:41,920
performed manual binary search comparing

00:02:38,829 --> 00:02:46,150
two strings to find to trying to find

00:02:41,920 --> 00:02:51,430
the difference well I have it's not it's

00:02:46,150 --> 00:02:55,389
not fun and it turns out that the first

00:02:51,430 --> 00:02:59,379
byte the first section x a1 n is

00:02:55,389 --> 00:03:02,950
actually two by two on + trailing zero Y

00:02:59,379 --> 00:03:09,180
the second string magic string we have

00:03:02,950 --> 00:03:12,340
is actually one byte so this string is

00:03:09,180 --> 00:03:15,909
actually 1 byte post trailing zero

00:03:12,340 --> 00:03:21,909
nice catch C++ how many of you knew that

00:03:15,909 --> 00:03:24,459
I didn't so if you carefully read the

00:03:21,909 --> 00:03:28,829
documentation you find a small paragraph

00:03:24,459 --> 00:03:32,109
saying this it's quite below the table

00:03:28,829 --> 00:03:36,430
so I don't think many people have read

00:03:32,109 --> 00:03:38,739
this so to conclude this I want to

00:03:36,430 --> 00:03:41,949
suggest that we all should be careful

00:03:38,739 --> 00:03:45,459
about our binary data in string letters

00:03:41,949 --> 00:03:49,299
and to fix this issue we should separate

00:03:45,459 --> 00:03:53,049
those binary and on binary parts of the

00:03:49,299 --> 00:03:55,930
string and this is fine second thing I

00:03:53,049 --> 00:03:58,780
want to conclude from this is please use

00:03:55,930 --> 00:04:02,400
Intel assembly this is quote from slack

00:03:58,780 --> 00:04:02,400
I quite agree

00:04:02,850 --> 00:04:09,810
and the last thing you know what this

00:04:06,990 --> 00:04:12,060
photograph is it is a quite famous

00:04:09,810 --> 00:04:16,160
photograph of a German soldier soldier

00:04:12,060 --> 00:04:20,070
in Berlin for fleeing from east to west

00:04:16,160 --> 00:04:21,810
so to take history lesson if there is

00:04:20,070 --> 00:04:26,170
too much competition between East and

00:04:21,810 --> 00:04:30,260
West saying we'll go south actually but

00:04:26,170 --> 00:04:34,350
[Applause]

00:04:30,260 --> 00:04:37,930
but even if they do the West eventually

00:04:34,350 --> 00:04:41,360
wins thank you

00:04:37,930 --> 00:04:41,360

YouTube URL: https://www.youtube.com/watch?v=FiOkJN1UUQY


