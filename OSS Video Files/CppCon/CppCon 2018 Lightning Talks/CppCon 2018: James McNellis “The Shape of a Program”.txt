Title: CppCon 2018: James McNellis “The Shape of a Program”
Publication date: 2018-11-10
Playlist: CppCon 2018 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:05,279
so earlier this year at ACC U and C++

00:00:02,970 --> 00:00:06,810
now the estimable Lisa Lippincott gave a

00:00:05,279 --> 00:00:09,360
deeply insightful and thought-provoking

00:00:06,810 --> 00:00:11,040
keynote the shape of a program in which

00:00:09,360 --> 00:00:12,630
he applied ideas from the study of

00:00:11,040 --> 00:00:14,940
topology as a way of looking at a

00:00:12,630 --> 00:00:16,830
program I was so excited when John

00:00:14,940 --> 00:00:19,020
invited me to speak to you here today

00:00:16,830 --> 00:00:21,420
and I felt inspired to be similarly

00:00:19,020 --> 00:00:23,910
deeply insightful but then Michael was

00:00:21,420 --> 00:00:25,050
like James you have five minutes so then

00:00:23,910 --> 00:00:27,060
I didn't know what to do and I decided

00:00:25,050 --> 00:00:28,320
to watch some TV where I stumbled upon

00:00:27,060 --> 00:00:30,390
masterpiece theater

00:00:28,320 --> 00:00:32,130
so masterpiece theater is known for

00:00:30,390 --> 00:00:34,260
producing television adaptations of

00:00:32,130 --> 00:00:36,120
novels and biographies and other such

00:00:34,260 --> 00:00:37,110
things that's actually not important

00:00:36,120 --> 00:00:39,750
except that it reminded me of

00:00:37,110 --> 00:00:41,550
monsterpiece theatre which is a Sesame

00:00:39,750 --> 00:00:43,440
Street skit in which Alastair cookie

00:00:41,550 --> 00:00:46,969
presents adaptations based on just the

00:00:43,440 --> 00:00:50,969
titles of things the Old Man and the sea

00:00:46,969 --> 00:00:54,480
doctor no one Flew Over the Cuckoo's

00:00:50,969 --> 00:00:57,750
Nest so in that vein I present to you my

00:00:54,480 --> 00:01:00,989
lightning talk the shape of a program so

00:00:57,750 --> 00:01:03,420
programs programs come in different

00:01:00,989 --> 00:01:08,549
shapes for example this program is

00:01:03,420 --> 00:01:10,530
rather square shaped and here we have a

00:01:08,549 --> 00:01:13,530
program in the shape of the cpp Khan

00:01:10,530 --> 00:01:15,119
logo a great place to find programs that

00:01:13,530 --> 00:01:17,460
are in interesting shapes is the

00:01:15,119 --> 00:01:21,360
International obfuscated C code contest

00:01:17,460 --> 00:01:23,490
my my personal favorite is this program

00:01:21,360 --> 00:01:25,470
which is a maze game in the shape of a

00:01:23,490 --> 00:01:31,079
maze that consumes itself is its own

00:01:25,470 --> 00:01:32,549
input so as I was looking at different

00:01:31,079 --> 00:01:34,229
shapes of programs to share with you I

00:01:32,549 --> 00:01:36,630
thought maybe I could still share

00:01:34,229 --> 00:01:38,970
something useful so let's talk about

00:01:36,630 --> 00:01:40,740
program complexity some programs are

00:01:38,970 --> 00:01:41,790
more complex than others and there are

00:01:40,740 --> 00:01:43,799
different ways to measure that

00:01:41,790 --> 00:01:45,869
complexity for example you can use

00:01:43,799 --> 00:01:47,610
cyclomatic complexity with this metric

00:01:45,869 --> 00:01:49,890
you build a graph representing your

00:01:47,610 --> 00:01:51,810
program then you do some graph stuff and

00:01:49,890 --> 00:01:53,549
then there's some more of this and then

00:01:51,810 --> 00:01:55,130
at the end you learn hey this program is

00:01:53,549 --> 00:01:58,430
a three

00:01:55,130 --> 00:02:01,180
three is the number of the program and

00:01:58,430 --> 00:02:03,799
the number of the program shall be three

00:02:01,180 --> 00:02:05,689
but cyclomatic complexity is not the

00:02:03,799 --> 00:02:07,520
only option there's also this halstead

00:02:05,689 --> 00:02:09,410
complexity metric where you do some math

00:02:07,520 --> 00:02:11,239
and then I mean you do some more math

00:02:09,410 --> 00:02:12,440
and I don't actually know what's going

00:02:11,239 --> 00:02:14,989
on here this is all too much for me to

00:02:12,440 --> 00:02:17,959
think about during code review so I went

00:02:14,989 --> 00:02:20,209
to Wikipedia page for programming

00:02:17,959 --> 00:02:21,709
complexity and it says many measures of

00:02:20,209 --> 00:02:23,930
software complexity have been proposed

00:02:21,709 --> 00:02:25,970
many of these although yielding a good

00:02:23,930 --> 00:02:27,950
representation of complexity do not lend

00:02:25,970 --> 00:02:32,299
themselves to easy measurement well

00:02:27,950 --> 00:02:33,860
that's for sure so a few years ago on

00:02:32,299 --> 00:02:35,420
Twitter I saw this tweet or something

00:02:33,860 --> 00:02:37,250
like this I can't find the original

00:02:35,420 --> 00:02:38,900
tweet and honestly I can't remember who

00:02:37,250 --> 00:02:40,549
wrote it so if you wrote something like

00:02:38,900 --> 00:02:42,620
this please let me know so that I can

00:02:40,549 --> 00:02:44,690
give you credit but this tweet suggested

00:02:42,620 --> 00:02:46,190
for a simple complexity metric what if

00:02:44,690 --> 00:02:48,380
we just used the area under the

00:02:46,190 --> 00:02:50,840
indentation and this suggestion has

00:02:48,380 --> 00:02:52,730
really stuck with me right this squarish

00:02:50,840 --> 00:02:54,380
program from before for example has a

00:02:52,730 --> 00:02:56,900
relatively small area under the

00:02:54,380 --> 00:02:58,190
indentation and it's also not

00:02:56,900 --> 00:03:00,380
particularly complex

00:02:58,190 --> 00:03:02,269
similarly this program has somewhat

00:03:00,380 --> 00:03:04,670
deeper nesting but it's still very short

00:03:02,269 --> 00:03:06,650
so again it has relatively a relatively

00:03:04,670 --> 00:03:08,989
small area under the indentation it's

00:03:06,650 --> 00:03:12,470
also not very complex this program

00:03:08,989 --> 00:03:14,239
though is absolutely up nope this

00:03:12,470 --> 00:03:16,100
program though has an absolutely

00:03:14,239 --> 00:03:18,230
humongous area under its indentation

00:03:16,100 --> 00:03:22,670
like literally it's the Mount Rainier of

00:03:18,230 --> 00:03:25,160
indentation it is by this measure more

00:03:22,670 --> 00:03:27,650
complex so how would we go about making

00:03:25,160 --> 00:03:29,180
this program less complex well if we're

00:03:27,650 --> 00:03:31,730
measuring complexity by the area under

00:03:29,180 --> 00:03:33,650
the indentation then we can just unand

00:03:31,730 --> 00:03:36,989
en't the program

00:03:33,650 --> 00:03:39,760
[Applause]

00:03:36,989 --> 00:03:44,080
voila we've made our program less

00:03:39,760 --> 00:03:45,700
complex ok No so let's say that in order

00:03:44,080 --> 00:03:47,680
to use this metric the program has to be

00:03:45,700 --> 00:03:49,540
properly indented so our goal is going

00:03:47,680 --> 00:03:50,950
to be to apply transformations to our

00:03:49,540 --> 00:03:52,690
program that let us reduce the

00:03:50,950 --> 00:03:54,489
indentation while keeping it properly

00:03:52,690 --> 00:03:55,840
indented there are many refactorings

00:03:54,489 --> 00:03:57,879
that can help us do this but I do want

00:03:55,840 --> 00:03:59,230
to call out two in particular so here is

00:03:57,879 --> 00:04:00,940
a program with a bunch of nested if

00:03:59,230 --> 00:04:03,099
statements we can refactor these into

00:04:00,940 --> 00:04:04,870
guard clauses so first we take one of

00:04:03,099 --> 00:04:06,459
the if statements and we're going to

00:04:04,870 --> 00:04:09,220
invert it by adding an exclamation point

00:04:06,459 --> 00:04:11,109
as one does in C++ we then change this

00:04:09,220 --> 00:04:13,060
if statement to just return early and

00:04:11,109 --> 00:04:14,500
then we can uninvent the rest of the

00:04:13,060 --> 00:04:17,019
function reducing the area of the

00:04:14,500 --> 00:04:18,579
indentation if we apply this refactoring

00:04:17,019 --> 00:04:20,380
to all of these if statements we get

00:04:18,579 --> 00:04:22,060
this result which is much simpler than

00:04:20,380 --> 00:04:24,100
the original it's actually more than

00:04:22,060 --> 00:04:26,169
halved or yes more than half the

00:04:24,100 --> 00:04:27,850
complexity the other refactoring that we

00:04:26,169 --> 00:04:29,289
can do here is to extract functionality

00:04:27,850 --> 00:04:30,669
into a separate function here for

00:04:29,289 --> 00:04:34,030
example this switch statement is

00:04:30,669 --> 00:04:35,800
trivially extractable we just take it we

00:04:34,030 --> 00:04:37,270
move it over here we put it in its own

00:04:35,800 --> 00:04:39,789
function we add a call to the function

00:04:37,270 --> 00:04:42,310
and now our function is simpler than the

00:04:39,789 --> 00:04:45,820
original just to clarify this is the

00:04:42,310 --> 00:04:47,830
better one over here so anyway I just

00:04:45,820 --> 00:04:49,270
want to conclude by suggesting that this

00:04:47,830 --> 00:04:50,889
like this metric is actually quite

00:04:49,270 --> 00:04:52,930
helpful that you know the area under the

00:04:50,889 --> 00:04:54,910
indentation like it's it's very easy way

00:04:52,930 --> 00:04:57,160
to eyeball the complexity of a function

00:04:54,910 --> 00:04:58,750
and then that reducing the area under

00:04:57,160 --> 00:05:03,040
the indentation generally leads to far

00:04:58,750 --> 00:05:08,249
simpler code and with that east const

00:05:03,040 --> 00:05:08,249

YouTube URL: https://www.youtube.com/watch?v=P2lxGnbDkDI


