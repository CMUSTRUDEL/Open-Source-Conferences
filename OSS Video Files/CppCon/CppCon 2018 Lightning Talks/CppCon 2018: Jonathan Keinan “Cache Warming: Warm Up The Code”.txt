Title: CppCon 2018: Jonathan Keinan “Cache Warming: Warm Up The Code”
Publication date: 2018-11-11
Playlist: CppCon 2018 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,000 --> 00:00:04,620
hi everybody my name's Jonathan I'm you

00:00:03,000 --> 00:00:08,040
spark as well

00:00:04,620 --> 00:00:10,110
you sparked deals as you heard a hide

00:00:08,040 --> 00:00:13,049
frequency trading today I want to talk

00:00:10,110 --> 00:00:14,490
to you without cash warming in general

00:00:13,049 --> 00:00:22,740
and some rule of thumb when you try to

00:00:14,490 --> 00:00:25,109
implement in your program one of the

00:00:22,740 --> 00:00:27,930
issues we encounter is critical code

00:00:25,109 --> 00:00:30,630
which is executed rarely we have this

00:00:27,930 --> 00:00:33,600
example to illustrate the problem here

00:00:30,630 --> 00:00:36,300
frequently executed code is marked in

00:00:33,600 --> 00:00:38,610
red frequently executed code this

00:00:36,300 --> 00:00:42,600
genuine general closer to the CPU cache

00:00:38,610 --> 00:00:48,000
and it therefore executed faster when

00:00:42,600 --> 00:00:50,879
byfox is called there's will be an added

00:00:48,000 --> 00:00:54,090
delay in loading the code to the CPU

00:00:50,879 --> 00:00:56,789
cache and as a result when we want to

00:00:54,090 --> 00:01:00,239
perform that critical code it will take

00:00:56,789 --> 00:01:02,910
longer to execute to change that we need

00:01:00,239 --> 00:01:06,000
to somehow execute buy stocks in an

00:01:02,910 --> 00:01:11,460
artificial way without actually buying

00:01:06,000 --> 00:01:13,590
stocks well in a more formal way cache

00:01:11,460 --> 00:01:15,990
warming means trying to keep code and

00:01:13,590 --> 00:01:18,920
data near the cache by accessing the

00:01:15,990 --> 00:01:21,840
memory it is stored in an artificial way

00:01:18,920 --> 00:01:24,450
so let's try and warm the code from the

00:01:21,840 --> 00:01:27,600
previous example and try to warm buy

00:01:24,450 --> 00:01:30,600
stocks the cold that was added is marked

00:01:27,600 --> 00:01:32,640
as as bald we added a boolean to

00:01:30,600 --> 00:01:36,390
indicate if we are warming the buy code

00:01:32,640 --> 00:01:38,369
an additional cult buy oil to buy stocks

00:01:36,390 --> 00:01:41,640
was added which will initiate the

00:01:38,369 --> 00:01:44,640
warming process at first look it looks

00:01:41,640 --> 00:01:47,040
like we seem to have accomplished part

00:01:44,640 --> 00:01:50,130
of our goal the code to buy oil stocks

00:01:47,040 --> 00:01:52,409
is to buy stocks is well cycling the CPU

00:01:50,130 --> 00:01:55,950
cache at the time of real vial buy

00:01:52,409 --> 00:01:58,079
stocks is called on the other hand we

00:01:55,950 --> 00:02:01,950
are interfering with the other parts of

00:01:58,079 --> 00:02:05,280
the program from using the CPU cache in

00:02:01,950 --> 00:02:08,700
real life we would probably not call buy

00:02:05,280 --> 00:02:12,120
stocks constantly but use a frequency of

00:02:08,700 --> 00:02:13,540
some sort maybe came times a second not

00:02:12,120 --> 00:02:16,900
to hog

00:02:13,540 --> 00:02:20,680
CPU so now let's take a look at the

00:02:16,900 --> 00:02:23,109
buying stocks code here is the possible

00:02:20,680 --> 00:02:25,900
implementation for buy stocks with the

00:02:23,109 --> 00:02:28,719
newly added boolean parameter the

00:02:25,900 --> 00:02:31,480
question we encounter is how to best use

00:02:28,719 --> 00:02:35,109
the boolean to avoid modifying the

00:02:31,480 --> 00:02:40,569
program state let's try a naive approach

00:02:35,109 --> 00:02:43,150
first here we have the boolean and we

00:02:40,569 --> 00:02:46,379
are forwarding it to all the function

00:02:43,150 --> 00:02:51,099
calls which may alter the program States

00:02:46,379 --> 00:02:56,889
we also added an F to avoid incrementing

00:02:51,099 --> 00:02:58,859
the counter at the end the problem we

00:02:56,889 --> 00:03:01,840
introduced with the additive is

00:02:58,859 --> 00:03:03,819
misprediction most of the calls to the

00:03:01,840 --> 00:03:07,030
function now originate from the cash

00:03:03,819 --> 00:03:09,519
warming calls the branch prediction will

00:03:07,030 --> 00:03:12,129
therefore predict we never increment the

00:03:09,519 --> 00:03:13,810
counter this actually slows the

00:03:12,129 --> 00:03:14,620
execution of the function when we need

00:03:13,810 --> 00:03:18,190
it the most

00:03:14,620 --> 00:03:20,440
so when we actually buy want to buy

00:03:18,190 --> 00:03:23,699
stocks we will have a misprediction in

00:03:20,440 --> 00:03:26,409
the additive the conclusion from this is

00:03:23,699 --> 00:03:29,579
the code that knows it is vulnerable

00:03:26,409 --> 00:03:32,560
that is being warmed is not Worr mobile

00:03:29,579 --> 00:03:41,379
okay so how what can we do to change

00:03:32,560 --> 00:03:44,079
that we use we first we remove this now

00:03:41,379 --> 00:03:47,799
the counter was also changed into array

00:03:44,079 --> 00:03:51,879
of two counters index zero in the array

00:03:47,799 --> 00:03:54,370
will provide us the real state and index

00:03:51,879 --> 00:03:56,979
1 in the array will provide us the cash

00:03:54,370 --> 00:03:59,139
warming state we use the boolean as an

00:03:56,979 --> 00:04:01,989
index into the array to avoid branch

00:03:59,139 --> 00:04:04,810
prediction the added bonus is we get to

00:04:01,989 --> 00:04:08,190
warm the data as well most likely the

00:04:04,810 --> 00:04:09,419
counter will be in the same memory page

00:04:08,190 --> 00:04:14,530
[Music]

00:04:09,419 --> 00:04:16,900
well if if the state could not have been

00:04:14,530 --> 00:04:19,959
if you couldn't have used that technique

00:04:16,900 --> 00:04:21,549
and we had to use an F then we would

00:04:19,959 --> 00:04:24,770
probably need to use a compiler

00:04:21,549 --> 00:04:27,720
directive likely or unlikely

00:04:24,770 --> 00:04:33,339
that's it thank you very much

00:04:27,720 --> 00:04:33,339

YouTube URL: https://www.youtube.com/watch?v=XzRxikGgaHI


