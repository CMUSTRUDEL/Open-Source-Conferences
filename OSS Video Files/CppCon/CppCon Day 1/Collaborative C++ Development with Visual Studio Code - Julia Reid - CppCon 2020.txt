Title: Collaborative C++ Development with Visual Studio Code - Julia Reid - CppCon 2020
Publication date: 2020-09-22
Playlist: CppCon Day 1
Description: 
	https://cppcon.org/
https://github.com/CppCon/CppCon2020
---
Do you contribute to open-source projects or share projects with coworkers and classmates? In this talk, you’ll learn how optimize Visual Studio Code for collaborative, cross-platform C++ development. This talk will cover recommended tools and extensions for collaborative, cross-platform development, diving deep into the C++ extension, the CMake Tools extension, the GitHub Pull Requests and Issues extension, and the Live Share extension.

During this session, we’ll build and submit a PR to an open-source CMake project in Visual Studio Code, interacting with GitHub pull requests and issues directly in the editor. You’ll also learn how to create Live Share sessions for an nontraditional pair programming experience, where you can work together while retaining personal editor preferences as well as having your own cursor. Throughout the demo, we’ll showcase Visual Studio Code’s rich, productive editing and debugging features for C++ development.

---
Julia Reid
Julia is a program manager on the Visual C++ team at Microsoft, focusing specifically on Visual Studio Code. Because Julia comes from a background of C++ development, she has a passion for enhancing and simplifying C++ development experiences for programmers of all levels. Within Visual Studio Code, Julia focuses specifically on the C++ extension.

---
Streamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:08,960 --> 00:00:13,280
all right

00:00:10,080 --> 00:00:14,880
hello everyone good morning afternoon

00:00:13,280 --> 00:00:16,320
evening depending on the time zone

00:00:14,880 --> 00:00:19,840
you're in

00:00:16,320 --> 00:00:21,840
welcome to cppcon 2020. um before i get

00:00:19,840 --> 00:00:24,240
started just want to say

00:00:21,840 --> 00:00:26,640
feel free to visit our table at the expo

00:00:24,240 --> 00:00:30,080
hall to meet the rest of the microsoft c

00:00:26,640 --> 00:00:32,160
plus team at the table you can ask us

00:00:30,080 --> 00:00:33,760
any questions and we can discuss latest

00:00:32,160 --> 00:00:35,520
announcement announcements

00:00:33,760 --> 00:00:37,040
uh we have some exciting announcements

00:00:35,520 --> 00:00:40,160
this week

00:00:37,040 --> 00:00:41,120
also please take our survey and if you

00:00:40,160 --> 00:00:43,200
take our survey

00:00:41,120 --> 00:00:45,760
you are entered in a raffle and have the

00:00:43,200 --> 00:00:47,600
chance to win one of five copies

00:00:45,760 --> 00:00:49,440
of microsoft flight simulator so we'll

00:00:47,600 --> 00:00:52,320
be giving out a copy each day that the

00:00:49,440 --> 00:00:52,320
conference is running

00:00:55,440 --> 00:01:00,719
all right so let's get started my name

00:00:58,320 --> 00:01:01,359
is julia i'm a program manager on the

00:01:00,719 --> 00:01:03,520
visual c

00:01:01,359 --> 00:01:05,040
plus plus team at microsoft and i'm

00:01:03,520 --> 00:01:07,040
really excited to talk about

00:01:05,040 --> 00:01:10,240
collaborative c plus development with

00:01:07,040 --> 00:01:10,240
visual studio code today

00:01:11,040 --> 00:01:14,080
collaborative development has always

00:01:13,040 --> 00:01:15,920
been a real

00:01:14,080 --> 00:01:17,119
important scenario whether you're

00:01:15,920 --> 00:01:19,680
working with a

00:01:17,119 --> 00:01:22,240
partner on a school project contributing

00:01:19,680 --> 00:01:23,759
to the same code base as a co-worker

00:01:22,240 --> 00:01:25,280
or contributing to an open source

00:01:23,759 --> 00:01:27,920
project

00:01:25,280 --> 00:01:29,920
but in today's remote world pair

00:01:27,920 --> 00:01:32,000
programming has a whole new meaning

00:01:29,920 --> 00:01:33,920
you can't just pull a chair up next to

00:01:32,000 --> 00:01:34,720
your co-worker's desk and watch them

00:01:33,920 --> 00:01:36,560
reproduce an

00:01:34,720 --> 00:01:37,920
issue on their own machine right in

00:01:36,560 --> 00:01:40,159
front of you

00:01:37,920 --> 00:01:41,759
now more than ever collaborative

00:01:40,159 --> 00:01:43,920
development relies on

00:01:41,759 --> 00:01:45,840
being able to easily reproduce issues

00:01:43,920 --> 00:01:47,840
from one machine to another

00:01:45,840 --> 00:01:49,280
making the common problem that your

00:01:47,840 --> 00:01:50,479
development environment is different

00:01:49,280 --> 00:01:51,200
from someone else's development

00:01:50,479 --> 00:01:54,880
environment

00:01:51,200 --> 00:01:57,840
especially critical

00:01:54,880 --> 00:01:58,479
so reproducing issues from one machine

00:01:57,840 --> 00:02:00,880
to another

00:01:58,479 --> 00:02:01,759
can be pretty tough uh for a number of

00:02:00,880 --> 00:02:03,439
reasons

00:02:01,759 --> 00:02:05,119
to name a few you could be using

00:02:03,439 --> 00:02:06,840
different platforms which involves

00:02:05,119 --> 00:02:08,879
different operating systems and

00:02:06,840 --> 00:02:10,640
architectures

00:02:08,879 --> 00:02:12,160
you could be using different compilers

00:02:10,640 --> 00:02:14,640
and debuggers

00:02:12,160 --> 00:02:16,720
different build systems different system

00:02:14,640 --> 00:02:18,879
libraries and package managers

00:02:16,720 --> 00:02:20,560
and some projects have platform specific

00:02:18,879 --> 00:02:22,319
dependencies

00:02:20,560 --> 00:02:24,720
so i'm going to give you three

00:02:22,319 --> 00:02:26,560
recommendations today to navigate these

00:02:24,720 --> 00:02:27,440
problems and make remote collaborative

00:02:26,560 --> 00:02:29,840
development

00:02:27,440 --> 00:02:31,200
a little bit easier so the first

00:02:29,840 --> 00:02:32,879
recommendation

00:02:31,200 --> 00:02:34,480
is to set your project up for

00:02:32,879 --> 00:02:37,920
cross-platform development

00:02:34,480 --> 00:02:40,400
from the start the second recommendation

00:02:37,920 --> 00:02:41,120
is remote development containers which

00:02:40,400 --> 00:02:43,200
will ensure

00:02:41,120 --> 00:02:44,640
a consistent development environment

00:02:43,200 --> 00:02:47,440
from one person to the next

00:02:44,640 --> 00:02:48,959
and eliminate all the time you spend um

00:02:47,440 --> 00:02:50,720
configuring your project for a specific

00:02:48,959 --> 00:02:52,879
platform

00:02:50,720 --> 00:02:54,720
the third recommendation is to use live

00:02:52,879 --> 00:02:57,280
share which enables remote pair

00:02:54,720 --> 00:02:57,280
programming

00:02:57,519 --> 00:03:01,040
all right let's dive into these so the

00:02:59,360 --> 00:03:03,440
first recommendation is to set your

00:03:01,040 --> 00:03:04,560
project up for cross-platform success

00:03:03,440 --> 00:03:06,480
from the start

00:03:04,560 --> 00:03:08,159
it'll be easier for someone to reproduce

00:03:06,480 --> 00:03:09,200
your issue and build your project on

00:03:08,159 --> 00:03:11,280
their machine

00:03:09,200 --> 00:03:13,599
if you set it up so that it works across

00:03:11,280 --> 00:03:15,280
platforms from the get-go

00:03:13,599 --> 00:03:16,879
there are a few tools that we recommend

00:03:15,280 --> 00:03:19,599
for cross-platform development

00:03:16,879 --> 00:03:22,560
the first that i'll talk about is cmake

00:03:19,599 --> 00:03:25,120
cmake is a cross-platform build system

00:03:22,560 --> 00:03:26,239
generator what do i mean by build system

00:03:25,120 --> 00:03:28,720
generator

00:03:26,239 --> 00:03:29,519
a build system generator has platform

00:03:28,720 --> 00:03:32,159
and compiler

00:03:29,519 --> 00:03:34,720
independent configuration files and then

00:03:32,159 --> 00:03:35,920
it invokes your platform's native build

00:03:34,720 --> 00:03:37,680
tool under the hood

00:03:35,920 --> 00:03:39,519
so you could have the same configuration

00:03:37,680 --> 00:03:41,760
file across linux

00:03:39,519 --> 00:03:43,120
mac and windows and then depending on

00:03:41,760 --> 00:03:45,519
the platform you're using

00:03:43,120 --> 00:03:47,040
cmake will invoke ninja or make file

00:03:45,519 --> 00:03:49,280
under the hood

00:03:47,040 --> 00:03:50,319
cmake is open source and there's a great

00:03:49,280 --> 00:03:51,760
community around it

00:03:50,319 --> 00:03:53,599
and because of its cross-platform

00:03:51,760 --> 00:03:56,799
functionality it's a super popular

00:03:53,599 --> 00:03:58,879
choice for open source projects

00:03:56,799 --> 00:04:02,000
the next tool i'll talk about is vc

00:03:58,879 --> 00:04:04,159
package vc package is a cross-platform

00:04:02,000 --> 00:04:04,720
command line package manager for c-plus

00:04:04,159 --> 00:04:06,879
plus

00:04:04,720 --> 00:04:08,319
so we recommend using a language package

00:04:06,879 --> 00:04:10,319
manager like vc package

00:04:08,319 --> 00:04:11,439
as opposed to a system package manager

00:04:10,319 --> 00:04:14,879
like brew

00:04:11,439 --> 00:04:15,599
or apt-install this way you can set your

00:04:14,879 --> 00:04:18,720
project up

00:04:15,599 --> 00:04:20,400
to automatically install dependencies

00:04:18,720 --> 00:04:22,560
using vc package

00:04:20,400 --> 00:04:23,840
and it'll do that across platforms you

00:04:22,560 --> 00:04:25,440
don't need to

00:04:23,840 --> 00:04:27,120
use a different mechanism to install

00:04:25,440 --> 00:04:28,400
dependencies depending on what machine

00:04:27,120 --> 00:04:30,639
you're using

00:04:28,400 --> 00:04:32,960
there are over 1300 libraries in the vc

00:04:30,639 --> 00:04:35,040
package catalog across windows linux

00:04:32,960 --> 00:04:36,960
and mac and they are all routinely

00:04:35,040 --> 00:04:39,600
tested against each other to ensure a

00:04:36,960 --> 00:04:42,080
high quality compatible catalog

00:04:39,600 --> 00:04:44,080
you can integrate vc package with cmake

00:04:42,080 --> 00:04:45,520
so that cma can find the libraries that

00:04:44,080 --> 00:04:46,800
you've installed on your machine using

00:04:45,520 --> 00:04:48,880
vc package

00:04:46,800 --> 00:04:51,280
and if you add a vc package manifest

00:04:48,880 --> 00:04:51,759
file to your project repository that

00:04:51,280 --> 00:04:54,240
lists

00:04:51,759 --> 00:04:55,360
its dependencies cmake and vc package

00:04:54,240 --> 00:04:56,880
will work together

00:04:55,360 --> 00:04:58,639
to automatically install those

00:04:56,880 --> 00:05:00,160
dependencies when you configure your

00:04:58,639 --> 00:05:01,680
project for the first time

00:05:00,160 --> 00:05:03,360
you don't need to install those

00:05:01,680 --> 00:05:05,039
dependencies beforehand

00:05:03,360 --> 00:05:07,919
all you need to do is have vc package

00:05:05,039 --> 00:05:07,919
installed on your machine

00:05:08,160 --> 00:05:12,800
both cmake and vc package have great

00:05:10,639 --> 00:05:14,320
integration with visual studio code

00:05:12,800 --> 00:05:16,720
which is what i'm going to demo for you

00:05:14,320 --> 00:05:19,600
today for those of you who don't know

00:05:16,720 --> 00:05:21,680
vs code is a free cross-platform editor

00:05:19,600 --> 00:05:23,520
and it's built on open source

00:05:21,680 --> 00:05:25,199
it's customizable from lightweight

00:05:23,520 --> 00:05:26,479
editor if you want to just open it for

00:05:25,199 --> 00:05:29,520
quick edits

00:05:26,479 --> 00:05:33,440
to a full ide like experience with build

00:05:29,520 --> 00:05:33,440
debug and remote development support

00:05:33,919 --> 00:05:38,639
okay let's do the first demo which will

00:05:36,560 --> 00:05:40,320
be using cmake tools which is a cmake

00:05:38,639 --> 00:05:43,360
extension in vs code

00:05:40,320 --> 00:05:45,919
nvc package and i will be

00:05:43,360 --> 00:05:48,240
configuring building and debugging open

00:05:45,919 --> 00:05:50,639
rct2 which is an open source

00:05:48,240 --> 00:05:51,360
cmake project i'll do it on my mac

00:05:50,639 --> 00:05:53,840
laptop

00:05:51,360 --> 00:05:54,639
and then i will quickly ssh into my

00:05:53,840 --> 00:05:56,319
linux vm

00:05:54,639 --> 00:05:58,080
and show you how we can configure and

00:05:56,319 --> 00:06:01,280
build the same project

00:05:58,080 --> 00:06:06,400
using vc package using cmake um just do

00:06:01,280 --> 00:06:08,080
it the same exact way on my linux vm

00:06:06,400 --> 00:06:09,520
a couple of things that i did before

00:06:08,080 --> 00:06:11,680
this demo are

00:06:09,520 --> 00:06:13,919
install visual studio code which you can

00:06:11,680 --> 00:06:16,720
do by following the link on the slide

00:06:13,919 --> 00:06:19,759
install a c plus plus compiler so gcc

00:06:16,720 --> 00:06:21,440
clang and msvc are popular choices

00:06:19,759 --> 00:06:23,280
in the demo that i'm doing today i'll be

00:06:21,440 --> 00:06:26,319
using clang because i am

00:06:23,280 --> 00:06:28,639
building on my mac os laptop

00:06:26,319 --> 00:06:30,639
i installed the c plus extension pack

00:06:28,639 --> 00:06:32,800
which is a new extension pack

00:06:30,639 --> 00:06:35,120
that bundles together popular extensions

00:06:32,800 --> 00:06:37,440
that we believe are most helpful for c

00:06:35,120 --> 00:06:38,960
plus development and visual studio code

00:06:37,440 --> 00:06:40,240
all of these extensions that i'll be

00:06:38,960 --> 00:06:43,280
demoing for you today

00:06:40,240 --> 00:06:48,080
are included in this extension pack

00:06:43,280 --> 00:06:51,120
and lastly i installed vc package

00:06:48,080 --> 00:06:53,440
all right so on my machine i will

00:06:51,120 --> 00:06:54,160
navigate to my open rct2 project

00:06:53,440 --> 00:06:57,440
directory

00:06:54,160 --> 00:07:00,319
and open vs code

00:06:57,440 --> 00:07:02,720
and i have this is a cmake project which

00:07:00,319 --> 00:07:06,160
means it has a cmakelist script

00:07:02,720 --> 00:07:07,440
and it has a vc package.json manifest

00:07:06,160 --> 00:07:10,479
file

00:07:07,440 --> 00:07:13,199
so let's go ahead and take a look at

00:07:10,479 --> 00:07:15,520
that vc package.json manifest file

00:07:13,199 --> 00:07:17,199
where i list out the vc package

00:07:15,520 --> 00:07:18,319
libraries that i want to install when i

00:07:17,199 --> 00:07:23,120
configure this project

00:07:18,319 --> 00:07:25,919
such as jansen stl2 etc

00:07:23,120 --> 00:07:27,759
so as i mentioned before this demo i had

00:07:25,919 --> 00:07:29,919
installed vc package

00:07:27,759 --> 00:07:31,440
and run the command vc package integrate

00:07:29,919 --> 00:07:33,039
install so let me just go ahead and show

00:07:31,440 --> 00:07:35,360
you what that looks like

00:07:33,039 --> 00:07:37,280
running that command vc package will

00:07:35,360 --> 00:07:39,120
tell you what you need to set your cmake

00:07:37,280 --> 00:07:41,039
tool chain file path to be

00:07:39,120 --> 00:07:42,960
such that cma can find this instance of

00:07:41,039 --> 00:07:46,160
vc package and the library is

00:07:42,960 --> 00:07:48,879
installed so there you see the

00:07:46,160 --> 00:07:50,160
cmake toolchain file path and if you're

00:07:48,879 --> 00:07:51,680
just

00:07:50,160 --> 00:07:53,199
you know building with cmake from the

00:07:51,680 --> 00:07:54,319
command line you would pass this in as a

00:07:53,199 --> 00:07:56,240
command line argument

00:07:54,319 --> 00:07:58,080
but if you're using cmic tools in vs

00:07:56,240 --> 00:08:01,120
code you just have to set this

00:07:58,080 --> 00:08:03,360
once in the settings.json file in the

00:08:01,120 --> 00:08:04,639
vs code folder for your project um so

00:08:03,360 --> 00:08:06,639
you can see here i've set cmake

00:08:04,639 --> 00:08:09,360
toolchain filepath to be what

00:08:06,639 --> 00:08:09,680
vc package told me to set it to when i

00:08:09,360 --> 00:08:13,280
ran

00:08:09,680 --> 00:08:14,080
vc package integrate install so now we

00:08:13,280 --> 00:08:17,919
have

00:08:14,080 --> 00:08:20,560
cmaketools set up to work with vc

00:08:17,919 --> 00:08:22,240
package to install these dependencies

00:08:20,560 --> 00:08:23,919
and use them when generating

00:08:22,240 --> 00:08:25,440
intellisense for our source files and to

00:08:23,919 --> 00:08:28,400
build our project

00:08:25,440 --> 00:08:29,599
so here's my cmakelist script so this is

00:08:28,400 --> 00:08:32,959
a script that tells

00:08:29,599 --> 00:08:34,000
cmake how to build the project and with

00:08:32,959 --> 00:08:36,240
the cma

00:08:34,000 --> 00:08:37,360
tools extension you can either create a

00:08:36,240 --> 00:08:40,080
new cma project

00:08:37,360 --> 00:08:41,440
from scratch turn an existing project

00:08:40,080 --> 00:08:43,760
into a cmake project

00:08:41,440 --> 00:08:45,120
or configure an existing cma project

00:08:43,760 --> 00:08:47,279
because this project

00:08:45,120 --> 00:08:48,480
already has a cmic list script in its

00:08:47,279 --> 00:08:49,760
root directory

00:08:48,480 --> 00:08:52,160
we're ready to start configuring our

00:08:49,760 --> 00:08:52,160
project

00:08:52,240 --> 00:08:56,480
so there are two things that you need to

00:08:54,399 --> 00:08:56,959
do to configure your project and also

00:08:56,480 --> 00:08:58,480
you can

00:08:56,959 --> 00:09:00,080
you can interact with cma tools from the

00:08:58,480 --> 00:09:01,120
status bar with this commands in the

00:09:00,080 --> 00:09:02,800
blue bar at the bottom

00:09:01,120 --> 00:09:05,120
or from the command palette if you type

00:09:02,800 --> 00:09:06,800
cmake all of the commands provided by

00:09:05,120 --> 00:09:08,320
the cma tools extension will appear in

00:09:06,800 --> 00:09:09,519
this drop down

00:09:08,320 --> 00:09:11,360
so there are two things you need to do

00:09:09,519 --> 00:09:12,640
to configure your project the first is

00:09:11,360 --> 00:09:14,560
select a kit

00:09:12,640 --> 00:09:16,000
which contains the project agnostic

00:09:14,560 --> 00:09:17,519
configuration agnostic build

00:09:16,000 --> 00:09:18,880
instructions for your program like the

00:09:17,519 --> 00:09:21,440
compiler you're using

00:09:18,880 --> 00:09:22,160
and that list of compilers was compilers

00:09:21,440 --> 00:09:23,600
found

00:09:22,160 --> 00:09:26,399
on my computer from the cmaktools

00:09:23,600 --> 00:09:29,040
extension so the selected kit

00:09:26,399 --> 00:09:30,880
appears in the status bar and you can

00:09:29,040 --> 00:09:32,080
click that button to switch the kit if

00:09:30,880 --> 00:09:34,080
you'd like you don't need to open it

00:09:32,080 --> 00:09:36,320
from the command palette

00:09:34,080 --> 00:09:38,560
so the second thing you need to do is

00:09:36,320 --> 00:09:40,959
select a build variant

00:09:38,560 --> 00:09:41,760
by default the cmaketools extension

00:09:40,959 --> 00:09:43,440
provides

00:09:41,760 --> 00:09:45,040
four build variants each corresponding

00:09:43,440 --> 00:09:46,720
to a different build type

00:09:45,040 --> 00:09:50,080
um so the one that we're going to use

00:09:46,720 --> 00:09:52,080
today is debug

00:09:50,080 --> 00:09:53,519
so once we select the variant after

00:09:52,080 --> 00:09:55,040
we've selected the kit

00:09:53,519 --> 00:09:57,680
the project will automatically start

00:09:55,040 --> 00:09:57,680
configuring

00:09:58,000 --> 00:10:01,440
there we go we've had a successful

00:09:59,519 --> 00:10:02,720
configure and our build files have been

00:10:01,440 --> 00:10:04,320
written to our build folder

00:10:02,720 --> 00:10:06,640
and you can see in the output that it

00:10:04,320 --> 00:10:07,360
ran this command running vc package

00:10:06,640 --> 00:10:09,680
install

00:10:07,360 --> 00:10:11,360
so that means that it picked up the vc

00:10:09,680 --> 00:10:12,320
package manifest file in the root

00:10:11,360 --> 00:10:14,079
directory

00:10:12,320 --> 00:10:15,680
and checked to make sure those were

00:10:14,079 --> 00:10:16,959
installed and if they weren't installed

00:10:15,680 --> 00:10:20,399
then it would have gone ahead

00:10:16,959 --> 00:10:20,399
and then reinstalled those for us

00:10:20,720 --> 00:10:24,399
all right so now we can select our build

00:10:22,480 --> 00:10:25,200
target by default the cma tools

00:10:24,399 --> 00:10:27,120
extension

00:10:25,200 --> 00:10:30,079
will build all targets which is what

00:10:27,120 --> 00:10:33,839
we're going to do today

00:10:30,079 --> 00:10:33,839
then we can click build

00:10:35,279 --> 00:10:39,680
all right so we have a successful build

00:10:37,680 --> 00:10:41,360
so we've used vc package and

00:10:39,680 --> 00:10:43,040
cmake to configure and build this

00:10:41,360 --> 00:10:45,519
project in vs code

00:10:43,040 --> 00:10:46,079
so now let's select a target to debug

00:10:45,519 --> 00:10:49,600
we'll select

00:10:46,079 --> 00:10:49,600
open rct2

00:10:50,480 --> 00:10:54,240
and i actually don't have any

00:10:52,240 --> 00:10:56,959
breakpoints set at the moment

00:10:54,240 --> 00:10:58,320
so this should just launch the game open

00:10:56,959 --> 00:11:01,839
rct2

00:10:58,320 --> 00:11:01,839
on my computer

00:11:03,839 --> 00:11:09,040
yep there it is so

00:11:07,040 --> 00:11:10,959
we've successfully built and run the

00:11:09,040 --> 00:11:14,079
game we can go in and

00:11:10,959 --> 00:11:17,519
select a park and

00:11:14,079 --> 00:11:18,320
play the game a bit um but the reason i

00:11:17,519 --> 00:11:21,360
recommended

00:11:18,320 --> 00:11:23,040
using vc package and cmake is because of

00:11:21,360 --> 00:11:26,160
their cross-platform

00:11:23,040 --> 00:11:29,040
capabilities so now

00:11:26,160 --> 00:11:30,079
i want to go ahead and show you how we

00:11:29,040 --> 00:11:32,720
can

00:11:30,079 --> 00:11:33,440
connect to a linux vm and do the same

00:11:32,720 --> 00:11:35,920
thing

00:11:33,440 --> 00:11:37,040
like using vc package using cmake and

00:11:35,920 --> 00:11:39,600
build and debug the same

00:11:37,040 --> 00:11:40,240
project on the linux vm so if you open

00:11:39,600 --> 00:11:43,360
the

00:11:40,240 --> 00:11:44,399
remote explorer and then select ssh

00:11:43,360 --> 00:11:46,160
targets

00:11:44,399 --> 00:11:48,320
you'll see these are targets that i've

00:11:46,160 --> 00:11:49,440
previously connected to using the remote

00:11:48,320 --> 00:11:51,279
ssh extension

00:11:49,440 --> 00:11:53,200
and visual studio code you can add a new

00:11:51,279 --> 00:11:54,639
target by clicking the plus sign

00:11:53,200 --> 00:11:56,240
i'm going to connect to the last one in

00:11:54,639 --> 00:11:57,040
the list because that's where my open

00:11:56,240 --> 00:12:00,639
rct

00:11:57,040 --> 00:12:03,120
rct2 project files live

00:12:00,639 --> 00:12:05,600
so it's worth calling out that how the

00:12:03,120 --> 00:12:08,160
remote ssh extension works is that

00:12:05,600 --> 00:12:10,399
all of these source files actually live

00:12:08,160 --> 00:12:12,160
on my linux vm

00:12:10,399 --> 00:12:14,880
they are unrelated to files that i have

00:12:12,160 --> 00:12:17,600
installed on my local machine

00:12:14,880 --> 00:12:20,320
so we'll open my project folder on my

00:12:17,600 --> 00:12:20,320
linux vm

00:12:23,440 --> 00:12:28,959
and here we have our vc package.json

00:12:26,240 --> 00:12:32,000
manifest file

00:12:28,959 --> 00:12:32,399
listing our project dependencies um we

00:12:32,000 --> 00:12:36,000
have

00:12:32,399 --> 00:12:36,000
our cmakelist script

00:12:36,079 --> 00:12:40,000
so we should be good to go to start

00:12:39,040 --> 00:12:43,680
configuring

00:12:40,000 --> 00:12:43,680
and building our project

00:12:44,720 --> 00:12:48,399
and now if i select a kit these are

00:12:47,120 --> 00:12:51,120
compilers that are found

00:12:48,399 --> 00:12:54,480
on the linux vm itself so we'll select

00:12:51,120 --> 00:12:54,480
the compiler we want to use

00:12:54,560 --> 00:12:59,279
then we can select our variant we'll do

00:12:57,120 --> 00:13:00,880
debug again

00:12:59,279 --> 00:13:02,639
and now it's automatically configuring

00:13:00,880 --> 00:13:04,959
our project it's running

00:13:02,639 --> 00:13:07,839
the vc package install command again on

00:13:04,959 --> 00:13:07,839
the linux vm

00:13:10,880 --> 00:13:14,959
and our build files have been generated

00:13:13,680 --> 00:13:20,000
so we can

00:13:14,959 --> 00:13:23,760
go ahead and build all targets

00:13:20,000 --> 00:13:26,000
we have a successful build um so now

00:13:23,760 --> 00:13:27,279
let's set a breakpoint and start a

00:13:26,000 --> 00:13:30,720
debugging session

00:13:27,279 --> 00:13:34,480
i'm going to set a breakpoint in

00:13:30,720 --> 00:13:38,399
the openrct2 cli folder

00:13:34,480 --> 00:13:38,399
we'll set one in cli.cpp

00:13:43,199 --> 00:13:50,160
cool and now

00:13:46,880 --> 00:13:52,880
let's debug the open rct2

00:13:50,160 --> 00:13:54,480
cli target so i'm debugging this target

00:13:52,880 --> 00:14:02,240
because i'm running this headless

00:13:54,480 --> 00:14:04,320
on my linux vm

00:14:02,240 --> 00:14:06,160
and now cmake tools is launching the

00:14:04,320 --> 00:14:08,160
debugger nvs code

00:14:06,160 --> 00:14:10,480
and if we look at the debug console

00:14:08,160 --> 00:14:17,839
output you'll see that it's using gdb

00:14:10,480 --> 00:14:17,839
on my ubuntu linux vm

00:14:18,000 --> 00:14:24,320
so you can step through the program just

00:14:20,800 --> 00:14:24,320
as you would on mac os

00:14:27,360 --> 00:14:31,519
and you basically the remote ssh

00:14:29,680 --> 00:14:32,240
extension allows you to have the full

00:14:31,519 --> 00:14:35,839
feature set

00:14:32,240 --> 00:14:39,600
of vs code including the debugger

00:14:35,839 --> 00:14:39,600
on your remote linux which is really

00:14:42,839 --> 00:14:47,519
cool

00:14:44,320 --> 00:14:50,720
all right so now if we

00:14:47,519 --> 00:14:52,079
um continue running the program we can

00:14:50,720 --> 00:14:59,839
disable our breakpoints

00:14:52,079 --> 00:14:59,839
continue running

00:15:00,480 --> 00:15:04,720
and we can open terminal to make sure

00:15:02,399 --> 00:15:07,440
that the open rct2 cli

00:15:04,720 --> 00:15:08,560
program is running which it is another

00:15:07,440 --> 00:15:10,240
really cool feature

00:15:08,560 --> 00:15:12,160
of the remote ssh extension is that you

00:15:10,240 --> 00:15:15,680
can set up port forwarding

00:15:12,160 --> 00:15:16,800
so to make sure that this works like the

00:15:15,680 --> 00:15:19,440
server is up and running

00:15:16,800 --> 00:15:20,320
we can actually play the game i set up

00:15:19,440 --> 00:15:23,440
port forwarding

00:15:20,320 --> 00:15:25,040
and i'm going to run openrct2 headless

00:15:23,440 --> 00:15:28,079
on my linux vm

00:15:25,040 --> 00:15:29,680
and then connect that game server on my

00:15:28,079 --> 00:15:31,199
mac os

00:15:29,680 --> 00:15:34,079
so in our build folder we see the

00:15:31,199 --> 00:15:37,040
executable we'll run that we'll pass

00:15:34,079 --> 00:15:39,120
in um this the scenario files that are

00:15:37,040 --> 00:15:43,360
on my local vm

00:15:39,120 --> 00:15:43,360
and then the headless flag

00:15:50,959 --> 00:15:54,000
and you can see it says ready for

00:15:52,399 --> 00:15:57,120
clients so now

00:15:54,000 --> 00:16:00,320
if i go to my mac

00:15:57,120 --> 00:16:02,480
laptop again or my mac window of vs code

00:16:00,320 --> 00:16:04,560
and we can run the target that we've

00:16:02,480 --> 00:16:06,839
already built the open rct2 target and

00:16:04,560 --> 00:16:09,839
this should launch the game as it did

00:16:06,839 --> 00:16:09,839
before

00:16:11,920 --> 00:16:16,000
and now i can go to the third option and

00:16:14,480 --> 00:16:18,720
connect to a server so

00:16:16,000 --> 00:16:20,560
i'm connecting to the server i have

00:16:18,720 --> 00:16:23,360
running on my linux vm

00:16:20,560 --> 00:16:25,040
and there you have it so um the point of

00:16:23,360 --> 00:16:26,160
connecting to this from the mac is just

00:16:25,040 --> 00:16:28,720
to show you that

00:16:26,160 --> 00:16:29,680
you can successfully build this project

00:16:28,720 --> 00:16:32,480
on linux

00:16:29,680 --> 00:16:33,279
um the same way you would on mac os

00:16:32,480 --> 00:16:34,800
without

00:16:33,279 --> 00:16:36,560
you know changing anything about the

00:16:34,800 --> 00:16:37,199
configuration you're using the manifest

00:16:36,560 --> 00:16:40,480
file

00:16:37,199 --> 00:16:42,399
you're using cmake you're using vs code

00:16:40,480 --> 00:16:44,720
and if you set your project up with

00:16:42,399 --> 00:16:46,800
cmake and vc package from the start

00:16:44,720 --> 00:16:48,240
um it's just it's very easy for people

00:16:46,800 --> 00:16:50,000
to develop

00:16:48,240 --> 00:16:53,199
to that like for that project on their

00:16:50,000 --> 00:16:54,720
machine uh vs code has cmake and vc

00:16:53,199 --> 00:16:56,720
package integration

00:16:54,720 --> 00:16:58,079
creating an intuitive user experience

00:16:56,720 --> 00:16:59,839
for configuring

00:16:58,079 --> 00:17:02,000
building and debugging your c plus plus

00:16:59,839 --> 00:17:03,600
projects

00:17:02,000 --> 00:17:05,199
okay so that was the first

00:17:03,600 --> 00:17:06,319
recommendation which was

00:17:05,199 --> 00:17:08,400
setting up your project for

00:17:06,319 --> 00:17:09,679
cross-platform development

00:17:08,400 --> 00:17:11,280
now let's go into the second

00:17:09,679 --> 00:17:12,880
recommendation which is using remote

00:17:11,280 --> 00:17:15,120
development containers

00:17:12,880 --> 00:17:17,439
so for the first project you still had

00:17:15,120 --> 00:17:18,959
to do some kind of configuration right

00:17:17,439 --> 00:17:21,360
you had to

00:17:18,959 --> 00:17:22,880
install vc package or have cmake

00:17:21,360 --> 00:17:25,199
installed on your machine

00:17:22,880 --> 00:17:26,079
but what if i told you that if you add

00:17:25,199 --> 00:17:28,640
just two

00:17:26,079 --> 00:17:29,520
files to your project repository that it

00:17:28,640 --> 00:17:32,240
could be run

00:17:29,520 --> 00:17:32,799
from any machine regardless of the build

00:17:32,240 --> 00:17:34,320
tools

00:17:32,799 --> 00:17:35,919
or dependencies that are installed on

00:17:34,320 --> 00:17:37,679
that machine

00:17:35,919 --> 00:17:39,440
so that's when a remote container comes

00:17:37,679 --> 00:17:42,000
in

00:17:39,440 --> 00:17:43,919
so what is development container a

00:17:42,000 --> 00:17:45,039
remote development container is a piece

00:17:43,919 --> 00:17:47,520
of software

00:17:45,039 --> 00:17:49,280
that packages code and any dependencies

00:17:47,520 --> 00:17:52,160
that code needs to run

00:17:49,280 --> 00:17:53,760
like runtime operating system tools et

00:17:52,160 --> 00:17:55,919
cetera

00:17:53,760 --> 00:17:57,760
and it packages all of that and runs

00:17:55,919 --> 00:18:00,400
your code and it's completely

00:17:57,760 --> 00:18:01,440
separate from your host machine so if

00:18:00,400 --> 00:18:03,600
you have

00:18:01,440 --> 00:18:04,720
like a version of a package installed in

00:18:03,600 --> 00:18:08,320
your container

00:18:04,720 --> 00:18:10,559
it is unique to that container

00:18:08,320 --> 00:18:12,640
a container is made from an image and

00:18:10,559 --> 00:18:14,320
you use a docker file to describe the

00:18:12,640 --> 00:18:17,520
contents of this image

00:18:14,320 --> 00:18:19,200
such as the operating system any build

00:18:17,520 --> 00:18:21,120
tools that you want to have installed

00:18:19,200 --> 00:18:23,039
and then once that image is run it

00:18:21,120 --> 00:18:25,919
becomes a container

00:18:23,039 --> 00:18:26,320
so def containers are especially helpful

00:18:25,919 --> 00:18:28,640
for

00:18:26,320 --> 00:18:30,240
instructors and students let's say

00:18:28,640 --> 00:18:32,640
because if you're an instructor

00:18:30,240 --> 00:18:34,480
and you have your starter code you can

00:18:32,640 --> 00:18:35,039
add some dev container configuration

00:18:34,480 --> 00:18:38,080
files

00:18:35,039 --> 00:18:39,600
to this project repo on github share

00:18:38,080 --> 00:18:41,760
that with your students

00:18:39,600 --> 00:18:43,440
then they can clone that github repo

00:18:41,760 --> 00:18:46,400
inside of a dev container

00:18:43,440 --> 00:18:46,960
so it just sets up let's say like ubuntu

00:18:46,400 --> 00:18:49,440
with

00:18:46,960 --> 00:18:50,720
cmake installed ninja insult gdb

00:18:49,440 --> 00:18:53,360
installed etc

00:18:50,720 --> 00:18:53,760
and then it will like your students can

00:18:53,360 --> 00:18:56,080
just

00:18:53,760 --> 00:18:57,280
run the program inside of that container

00:18:56,080 --> 00:18:59,360
regardless of

00:18:57,280 --> 00:19:01,120
the machine that they're using and

00:18:59,360 --> 00:19:03,280
especially in today's remote world

00:19:01,120 --> 00:19:04,320
you can't control what machines everyone

00:19:03,280 --> 00:19:06,160
has access to

00:19:04,320 --> 00:19:07,840
so containers are a great option to

00:19:06,160 --> 00:19:09,840
create that consistent

00:19:07,840 --> 00:19:11,120
functional development environment for

00:19:09,840 --> 00:19:14,480
everyone regardless of

00:19:11,120 --> 00:19:14,480
what resources they have at home

00:19:15,520 --> 00:19:19,039
so in this demo i'm going to create and

00:19:18,640 --> 00:19:21,440
share

00:19:19,039 --> 00:19:25,679
a container for c plus development in

00:19:21,440 --> 00:19:28,559
visual studio code

00:19:25,679 --> 00:19:29,520
i'm just going to use a sample fibonacci

00:19:28,559 --> 00:19:32,080
program for this

00:19:29,520 --> 00:19:33,120
portion of the demo so i'm this is just

00:19:32,080 --> 00:19:36,840
a personal

00:19:33,120 --> 00:19:39,679
github repo that i've cloned onto my mac

00:19:36,840 --> 00:19:42,720
laptop

00:19:39,679 --> 00:19:43,360
so i've set this project up to use vc

00:19:42,720 --> 00:19:45,039
package

00:19:43,360 --> 00:19:46,720
and cmake and use that vc package

00:19:45,039 --> 00:19:48,000
manifest file i've also added some

00:19:46,720 --> 00:19:49,600
docston comments

00:19:48,000 --> 00:19:51,760
which you can see the c plus plus

00:19:49,600 --> 00:19:53,600
extension displays those comments

00:19:51,760 --> 00:19:56,320
you'll notice that there are error

00:19:53,600 --> 00:19:58,240
squiggles underneath the include paths

00:19:56,320 --> 00:20:00,400
this is because i'm using the manifest

00:19:58,240 --> 00:20:01,039
file to install those dependencies and i

00:20:00,400 --> 00:20:03,679
have not

00:20:01,039 --> 00:20:06,640
yet configured my project so the vc

00:20:03,679 --> 00:20:09,520
package install command has not been run

00:20:06,640 --> 00:20:10,480
but once i successfully configure my

00:20:09,520 --> 00:20:12,240
project

00:20:10,480 --> 00:20:14,000
these dependencies listed in the json

00:20:12,240 --> 00:20:17,120
file will be installed and those error

00:20:14,000 --> 00:20:17,120
squiggles should go away

00:20:19,120 --> 00:20:22,320
all right so now let's just let's

00:20:21,600 --> 00:20:25,039
configure

00:20:22,320 --> 00:20:26,480
and build and run the program locally to

00:20:25,039 --> 00:20:29,679
make sure everything works before

00:20:26,480 --> 00:20:29,679
setting it up in a container

00:20:30,400 --> 00:20:36,880
so let's run cmake configure

00:20:35,039 --> 00:20:39,360
you see it says running vc package

00:20:36,880 --> 00:20:39,360
install

00:20:40,559 --> 00:20:45,760
so we've successfully configured and the

00:20:43,600 --> 00:20:49,840
error squiggles under the include paths

00:20:45,760 --> 00:20:49,840
have gone away

00:20:50,480 --> 00:20:55,360
so now let's build our project

00:20:57,039 --> 00:21:01,280
all right successful build now we can

00:20:59,280 --> 00:21:03,360
run it and i'll just run the project

00:21:01,280 --> 00:21:05,919
so we can see what the successful output

00:21:03,360 --> 00:21:09,280
would look like

00:21:05,919 --> 00:21:10,720
cool so now

00:21:09,280 --> 00:21:12,799
if i'm let's say i'm an instructor i

00:21:10,720 --> 00:21:13,760
want to share this starter code with my

00:21:12,799 --> 00:21:15,520
students

00:21:13,760 --> 00:21:17,679
with the dev container files that they

00:21:15,520 --> 00:21:19,120
need to run this code inside of a

00:21:17,679 --> 00:21:21,280
container so they don't have to do any

00:21:19,120 --> 00:21:23,039
of that configuration themselves

00:21:21,280 --> 00:21:25,280
i can use the remote containers

00:21:23,039 --> 00:21:28,400
extension to add development container

00:21:25,280 --> 00:21:31,760
configuration files to my project

00:21:28,400 --> 00:21:34,640
and then let's select c plus plus so

00:21:31,760 --> 00:21:35,520
the remote containers extension will

00:21:34,640 --> 00:21:37,840
generate

00:21:35,520 --> 00:21:39,840
the dev container files that you need

00:21:37,840 --> 00:21:43,440
for c plus plus development

00:21:39,840 --> 00:21:46,480
um so the devcontainer.json file

00:21:43,440 --> 00:21:47,360
describes how to connect to your

00:21:46,480 --> 00:21:50,799
container

00:21:47,360 --> 00:21:53,360
and then what to do after you connect so

00:21:50,799 --> 00:21:54,640
you can choose which vs code extensions

00:21:53,360 --> 00:21:55,679
you want to have installed in that

00:21:54,640 --> 00:21:57,760
container

00:21:55,679 --> 00:21:58,799
i'm going to add the cmaketools

00:21:57,760 --> 00:22:00,400
extension

00:21:58,799 --> 00:22:03,200
because we'll be using cmaketools to

00:22:00,400 --> 00:22:03,200
build this project

00:22:08,640 --> 00:22:15,919
cool and now the docker file

00:22:12,480 --> 00:22:18,240
um that describes what goes into this

00:22:15,919 --> 00:22:20,080
image and the remote containers

00:22:18,240 --> 00:22:20,880
extension has provided a sample docker

00:22:20,080 --> 00:22:23,360
file

00:22:20,880 --> 00:22:24,880
uh that installs useful things for c

00:22:23,360 --> 00:22:25,520
plus plus development because we had

00:22:24,880 --> 00:22:27,919
selected c

00:22:25,520 --> 00:22:30,000
plus development language um but i'm

00:22:27,919 --> 00:22:32,080
going to customize this docker file

00:22:30,000 --> 00:22:33,440
so that it installs all of the

00:22:32,080 --> 00:22:34,720
dependencies that we need for our

00:22:33,440 --> 00:22:36,400
project

00:22:34,720 --> 00:22:38,159
and when i say dependencies for our

00:22:36,400 --> 00:22:41,679
project i don't mean

00:22:38,159 --> 00:22:44,159
project specific libraries for example

00:22:41,679 --> 00:22:46,480
i mean we are installing some build

00:22:44,159 --> 00:22:50,000
tools like cmake ninja

00:22:46,480 --> 00:22:53,200
gdb and that first run statement

00:22:50,000 --> 00:22:55,280
and then in the second run statement

00:22:53,200 --> 00:22:57,600
we're installing vc package because

00:22:55,280 --> 00:22:59,679
we're going to use vc package to install

00:22:57,600 --> 00:23:02,159
project specific dependencies

00:22:59,679 --> 00:23:03,600
this way if project dependencies change

00:23:02,159 --> 00:23:04,880
the project changes

00:23:03,600 --> 00:23:07,280
you don't actually need to update the

00:23:04,880 --> 00:23:09,760
docker file as long as vc package

00:23:07,280 --> 00:23:11,120
is installed in the container um

00:23:09,760 --> 00:23:13,919
installing vc package

00:23:11,120 --> 00:23:14,720
is simple three steps clone the github

00:23:13,919 --> 00:23:17,120
repo

00:23:14,720 --> 00:23:19,039
run the bootstrapper and then run vc

00:23:17,120 --> 00:23:20,799
package integrate install

00:23:19,039 --> 00:23:23,840
uh so that you know what to set the cma

00:23:20,799 --> 00:23:23,840
toolchain file path to

00:23:24,159 --> 00:23:30,960
so now that we have our container files

00:23:28,559 --> 00:23:36,159
let's open this project inside of a c

00:23:30,960 --> 00:23:38,960
plus development container

00:23:36,159 --> 00:23:39,679
we can do so by opening the command

00:23:38,960 --> 00:23:41,600
palette

00:23:39,679 --> 00:23:42,880
and then using the remote containers

00:23:41,600 --> 00:23:50,640
extension

00:23:42,880 --> 00:23:52,880
to open folder in container

00:23:50,640 --> 00:23:54,480
so this is now setting up the container

00:23:52,880 --> 00:23:55,760
and creating the container based off of

00:23:54,480 --> 00:23:58,480
the contents

00:23:55,760 --> 00:24:01,360
that we defined in the devcontainer.json

00:23:58,480 --> 00:24:01,360
and the dockerfile

00:24:02,880 --> 00:24:05,919
and you can see like the cmaktools

00:24:04,240 --> 00:24:08,559
extension was successfully installed we

00:24:05,919 --> 00:24:10,159
see all those commands in the status bar

00:24:08,559 --> 00:24:12,000
and then in the bottom left corner you

00:24:10,159 --> 00:24:12,720
can see that we're developing inside of

00:24:12,000 --> 00:24:15,200
this dev

00:24:12,720 --> 00:24:15,200
container

00:24:16,559 --> 00:24:19,919
so there's one more thing actually that

00:24:18,559 --> 00:24:23,039
we need to do to get this

00:24:19,919 --> 00:24:25,039
working inside of the dev container

00:24:23,039 --> 00:24:26,480
um we need to change the cmake tool

00:24:25,039 --> 00:24:27,440
chain file path because this was the

00:24:26,480 --> 00:24:29,440
file path

00:24:27,440 --> 00:24:31,200
that i used on my mac um when i

00:24:29,440 --> 00:24:34,240
initially created this repo

00:24:31,200 --> 00:24:36,159
but we installed vc package in

00:24:34,240 --> 00:24:37,520
the root file system in the top level

00:24:36,159 --> 00:24:40,559
directory of

00:24:37,520 --> 00:24:42,320
our container so we know what the

00:24:40,559 --> 00:24:43,760
toolchain file path will be and we can

00:24:42,320 --> 00:24:46,720
confirm this

00:24:43,760 --> 00:24:48,240
by looking for vc package on this in the

00:24:46,720 --> 00:24:48,960
step container and yep there it is in

00:24:48,240 --> 00:24:51,919
the

00:24:48,960 --> 00:24:51,919
top level directory

00:24:54,159 --> 00:24:58,159
all right so at this point we should be

00:24:57,760 --> 00:25:01,279
good

00:24:58,159 --> 00:25:02,720
to start configuring and building our

00:25:01,279 --> 00:25:05,520
project and

00:25:02,720 --> 00:25:06,320
make sure it runs successfully in this

00:25:05,520 --> 00:25:07,919
container

00:25:06,320 --> 00:25:15,840
we'll remove our build folder so we can

00:25:07,919 --> 00:25:15,840
do a clean configure

00:25:17,120 --> 00:25:21,360
yeah we have our c make list we have our

00:25:19,120 --> 00:25:23,440
main

00:25:21,360 --> 00:25:25,200
and again you see the include error

00:25:23,440 --> 00:25:29,760
squiggles because we haven't configured

00:25:25,200 --> 00:25:33,760
our project yet

00:25:29,760 --> 00:25:33,760
so let's run cma configure

00:25:35,360 --> 00:25:39,120
and there you can see it's installing

00:25:38,000 --> 00:25:41,679
the packages

00:25:39,120 --> 00:25:42,240
using vc package that we need for this

00:25:41,679 --> 00:25:44,880
project

00:25:42,240 --> 00:25:56,960
and it's using binary caching to

00:25:44,880 --> 00:25:59,919
optimize the speed of installation

00:25:56,960 --> 00:26:02,799
cool so we've configured our project

00:25:59,919 --> 00:26:10,480
build files have been generated

00:26:02,799 --> 00:26:14,240
so now we can build our project

00:26:10,480 --> 00:26:14,240
successful build let's run it

00:26:17,200 --> 00:26:24,320
all right cool so now i have this

00:26:20,640 --> 00:26:25,360
program and dev container files so that

00:26:24,320 --> 00:26:27,760
people can

00:26:25,360 --> 00:26:29,200
run this program inside the container oh

00:26:27,760 --> 00:26:30,400
it's also worth pointing out that the

00:26:29,200 --> 00:26:33,200
kits that we scan

00:26:30,400 --> 00:26:34,880
for um are the kits that are found

00:26:33,200 --> 00:26:35,840
inside of that dev container based off

00:26:34,880 --> 00:26:39,279
of

00:26:35,840 --> 00:26:41,279
the contents of the docker file

00:26:39,279 --> 00:26:43,440
but so now i have this working program

00:26:41,279 --> 00:26:46,480
with these dev container files

00:26:43,440 --> 00:26:48,559
and i want to add these files to my

00:26:46,480 --> 00:26:50,840
github repositories that i can share it

00:26:48,559 --> 00:26:52,880
with students let's say if i'm the

00:26:50,840 --> 00:26:56,480
instructor so we will

00:26:52,880 --> 00:26:56,480
close our remote connection

00:27:01,919 --> 00:27:06,240
and now i'm going to open this file

00:27:04,400 --> 00:27:08,960
again on my mac and

00:27:06,240 --> 00:27:11,279
i'm going to submit a pull request to

00:27:08,960 --> 00:27:14,080
github from vs code with these new dev

00:27:11,279 --> 00:27:14,080
container files

00:27:14,159 --> 00:27:20,080
so first let's create a new branch

00:27:17,279 --> 00:27:21,360
and in the bottom left we can switch to

00:27:20,080 --> 00:27:27,600
a new branch

00:27:21,360 --> 00:27:27,600
we'll type add dev container files

00:27:29,600 --> 00:27:35,840
and then you can see again in the bottom

00:27:31,360 --> 00:27:35,840
left that we're now on this new branch

00:27:37,279 --> 00:27:44,559
and then to see what changes i've made

00:27:41,520 --> 00:27:46,720
to this repository i can open the source

00:27:44,559 --> 00:27:50,080
control tab on the left

00:27:46,720 --> 00:27:51,840
and then add any changes

00:27:50,080 --> 00:27:54,000
i can stage them to be committed so

00:27:51,840 --> 00:27:56,159
let's go ahead and add

00:27:54,000 --> 00:27:58,000
any of the files that i changed let's

00:27:56,159 --> 00:28:01,039
add our docker file

00:27:58,000 --> 00:28:02,880
and our dev container

00:28:01,039 --> 00:28:04,720
and our settings.json where we updated

00:28:02,880 --> 00:28:07,039
the cmake toolchain file path

00:28:04,720 --> 00:28:08,480
you can see my um change log is

00:28:07,039 --> 00:28:10,399
cluttered with changes to my build

00:28:08,480 --> 00:28:13,840
folder you can prevent that by adding a

00:28:10,399 --> 00:28:17,039
ignore file so let's add a message now

00:28:13,840 --> 00:28:19,440
to stage these changes to commit these

00:28:17,039 --> 00:28:21,919
changes

00:28:19,440 --> 00:28:23,679
and then by clicking that check mark

00:28:21,919 --> 00:28:26,559
you've committed them

00:28:23,679 --> 00:28:27,360
and now we can push these changes if we

00:28:26,559 --> 00:28:30,640
click on the

00:28:27,360 --> 00:28:34,000
ellipses and then select

00:28:30,640 --> 00:28:38,640
pull push and then we'll do push

00:28:34,000 --> 00:28:38,640
2 origin

00:28:42,080 --> 00:28:45,120
all right so we've now we've pushed

00:28:43,840 --> 00:28:47,360
these changes

00:28:45,120 --> 00:28:49,679
and now i can use the github pull

00:28:47,360 --> 00:28:52,480
requests and issues extension

00:28:49,679 --> 00:28:54,159
to create a pull request and merge these

00:28:52,480 --> 00:28:57,039
changes into master

00:28:54,159 --> 00:28:58,159
so we click the plus sign we select the

00:28:57,039 --> 00:29:03,039
branch

00:28:58,159 --> 00:29:03,039
that we want to merge these changes into

00:29:05,440 --> 00:29:12,799
and then select commit and it's creating

00:29:08,559 --> 00:29:15,600
the pull request

00:29:12,799 --> 00:29:17,279
all right so it opens the pull request

00:29:15,600 --> 00:29:18,960
inside of vs code

00:29:17,279 --> 00:29:20,559
and you can interact with this pull

00:29:18,960 --> 00:29:22,799
request directly

00:29:20,559 --> 00:29:25,679
inside of vs code the same way you would

00:29:22,799 --> 00:29:28,000
um in the web browser on github

00:29:25,679 --> 00:29:30,720
and we see a list of pull requests we

00:29:28,000 --> 00:29:33,120
see the ones that are created by me

00:29:30,720 --> 00:29:34,799
you can actually change the pull

00:29:33,120 --> 00:29:36,080
requests that show up here by editing

00:29:34,799 --> 00:29:38,880
the queries yourself

00:29:36,080 --> 00:29:40,080
in your in the settings and then you can

00:29:38,880 --> 00:29:41,679
look at the side by side

00:29:40,080 --> 00:29:43,120
comparison of the changes you've made

00:29:41,679 --> 00:29:46,080
for each file

00:29:43,120 --> 00:29:46,080
in this pull request

00:29:46,880 --> 00:29:50,000
you can also look at the specific

00:29:49,279 --> 00:29:55,840
commits

00:29:50,000 --> 00:29:55,840
within a pull request down in the bottom

00:29:56,000 --> 00:30:00,399
so going back to reviewing this pr you

00:29:58,640 --> 00:30:03,919
can do things like

00:30:00,399 --> 00:30:06,960
leave a comment if you wanted to do that

00:30:03,919 --> 00:30:08,320
you can add reviewers to this pull

00:30:06,960 --> 00:30:11,360
request so

00:30:08,320 --> 00:30:12,399
if you click on that plus sign next to

00:30:11,360 --> 00:30:15,200
reviewers

00:30:12,399 --> 00:30:17,120
and then add the github username of the

00:30:15,200 --> 00:30:22,080
person you want to add as a reviewer

00:30:17,120 --> 00:30:25,200
you can add labels

00:30:22,080 --> 00:30:29,360
and then you can merge the pull request

00:30:25,200 --> 00:30:37,840
so i'm going to merge this pull request

00:30:29,360 --> 00:30:37,840
into master

00:30:42,399 --> 00:30:45,039
there we go

00:30:46,320 --> 00:30:53,840
great and now i'm going to

00:30:50,000 --> 00:30:56,320
copy the url of my github repo

00:30:53,840 --> 00:30:57,519
so i can show you how if you were on the

00:30:56,320 --> 00:30:58,640
other end of this let's say like you

00:30:57,519 --> 00:31:01,600
were the student

00:30:58,640 --> 00:31:03,360
and you wanted to run this project

00:31:01,600 --> 00:31:05,440
inside of a container

00:31:03,360 --> 00:31:06,640
you could use the remote containers

00:31:05,440 --> 00:31:09,840
extension to

00:31:06,640 --> 00:31:12,080
add a new container and select clone

00:31:09,840 --> 00:31:16,000
repository in container

00:31:12,080 --> 00:31:16,000
add the github url

00:31:17,360 --> 00:31:20,720
and then this lets you use this

00:31:20,000 --> 00:31:23,200
container

00:31:20,720 --> 00:31:23,919
as your development environment in vs

00:31:23,200 --> 00:31:26,000
code

00:31:23,919 --> 00:31:27,360
um so like if you were the student in

00:31:26,000 --> 00:31:30,480
that scenario

00:31:27,360 --> 00:31:34,000
all you have to do is paste that url

00:31:30,480 --> 00:31:35,600
and open it in a container and it will

00:31:34,000 --> 00:31:37,200
like you'll be able to just build the

00:31:35,600 --> 00:31:39,039
program successfully and

00:31:37,200 --> 00:31:41,120
develop inside of this container you

00:31:39,039 --> 00:31:43,519
don't need to do any other

00:31:41,120 --> 00:31:45,120
configuration because the container

00:31:43,519 --> 00:31:46,640
automatically installs any of those

00:31:45,120 --> 00:31:49,760
dependencies that you need

00:31:46,640 --> 00:31:49,760
and like you can see here

00:31:49,919 --> 00:31:54,880
in the output that it installed the

00:31:51,519 --> 00:31:54,880
extensions that we wanted it to

00:31:57,039 --> 00:32:01,360
so some takeaways from that demo is that

00:31:59,600 --> 00:32:03,919
it's very easy to create containers in

00:32:01,360 --> 00:32:05,600
vs code you just add two files

00:32:03,919 --> 00:32:07,519
and the remote containers extension will

00:32:05,600 --> 00:32:09,840
add these files for you

00:32:07,519 --> 00:32:11,279
um knowing like what based off the

00:32:09,840 --> 00:32:14,720
programming language that you

00:32:11,279 --> 00:32:17,279
say you are developing in you can

00:32:14,720 --> 00:32:18,640
develop inside a container using vs code

00:32:17,279 --> 00:32:20,559
so you still have

00:32:18,640 --> 00:32:23,039
access to the full feature set of vs

00:32:20,559 --> 00:32:25,200
code like editing and debugging

00:32:23,039 --> 00:32:26,240
and it's easy to clone github

00:32:25,200 --> 00:32:28,960
repositories

00:32:26,240 --> 00:32:30,399
inside of containers eliminating all

00:32:28,960 --> 00:32:31,519
configuration

00:32:30,399 --> 00:32:34,000
you don't even have to create the dev

00:32:31,519 --> 00:32:34,559
container files and because of that it's

00:32:34,000 --> 00:32:36,399
a great

00:32:34,559 --> 00:32:38,559
option for instructors and students

00:32:36,399 --> 00:32:40,320
great option for collaborative and

00:32:38,559 --> 00:32:41,679
collaborative development to ensure you

00:32:40,320 --> 00:32:45,279
have a consistent

00:32:41,679 --> 00:32:45,279
environments across different machines

00:32:45,679 --> 00:32:50,080
okay so we've talked about the first two

00:32:48,559 --> 00:32:52,240
recommendations

00:32:50,080 --> 00:32:53,840
and at this point you might be thinking

00:32:52,240 --> 00:32:55,840
like sure i can

00:32:53,840 --> 00:32:58,480
set my project up for cross-platform

00:32:55,840 --> 00:33:01,440
development using cmake and vc package

00:32:58,480 --> 00:33:02,960
or i can add dev container configuration

00:33:01,440 --> 00:33:04,080
files to it and get it set up to run in

00:33:02,960 --> 00:33:06,799
a container

00:33:04,080 --> 00:33:07,840
but what if i didn't do either of those

00:33:06,799 --> 00:33:10,880
two things

00:33:07,840 --> 00:33:11,840
i have a problem i need help asap i

00:33:10,880 --> 00:33:15,279
don't have time

00:33:11,840 --> 00:33:16,880
to make my project configurable on

00:33:15,279 --> 00:33:19,440
someone else's machine and help someone

00:33:16,880 --> 00:33:23,039
reproduce my issue on their machine

00:33:19,440 --> 00:33:26,399
that's where live share comes in so

00:33:23,039 --> 00:33:27,039
what's live share live share enables you

00:33:26,399 --> 00:33:30,240
to view

00:33:27,039 --> 00:33:32,159
someone else's workspace in the context

00:33:30,240 --> 00:33:34,240
of your own editor like your own

00:33:32,159 --> 00:33:37,919
instance of vs code

00:33:34,240 --> 00:33:38,559
so as a host you could start a live

00:33:37,919 --> 00:33:41,039
share

00:33:38,559 --> 00:33:43,039
session which will generate a url that

00:33:41,039 --> 00:33:45,840
you send to whoever you want

00:33:43,039 --> 00:33:47,360
and then anyone can join your session

00:33:45,840 --> 00:33:49,760
using that url

00:33:47,360 --> 00:33:50,559
and see everything that you're seeing in

00:33:49,760 --> 00:33:51,919
vs code

00:33:50,559 --> 00:33:54,080
they can see that in their instance of

00:33:51,919 --> 00:33:54,799
vs code as well and not only can they

00:33:54,080 --> 00:33:56,960
see it

00:33:54,799 --> 00:33:59,600
they can interact with it they can

00:33:56,960 --> 00:34:01,679
navigate through your code base

00:33:59,600 --> 00:34:02,799
use editing features code navigation

00:34:01,679 --> 00:34:05,760
features like

00:34:02,799 --> 00:34:06,000
final references go to definition you

00:34:05,760 --> 00:34:07,600
can

00:34:06,000 --> 00:34:09,119
even do a collaborative debugging

00:34:07,600 --> 00:34:11,599
session and

00:34:09,119 --> 00:34:12,480
the guest doesn't even need to have the

00:34:11,599 --> 00:34:14,079
source code

00:34:12,480 --> 00:34:16,639
on their computer at all they don't need

00:34:14,079 --> 00:34:20,960
to have the compiler the debugger

00:34:16,639 --> 00:34:21,839
they are able to co-edit and code debug

00:34:20,960 --> 00:34:24,399
with you

00:34:21,839 --> 00:34:27,679
without having anything related to that

00:34:24,399 --> 00:34:27,679
project installed on their machine

00:34:28,159 --> 00:34:34,560
so in this demo i will start a

00:34:31,359 --> 00:34:37,679
live share collaboration session on my

00:34:34,560 --> 00:34:40,320
windows laptop and then join it from my

00:34:37,679 --> 00:34:42,560
mac laptop and we'll do some editing a

00:34:40,320 --> 00:34:45,760
collaborative debugging session

00:34:42,560 --> 00:34:46,800
and for this demo i'll be using supertux

00:34:45,760 --> 00:34:51,040
which is another

00:34:46,800 --> 00:34:51,040
open source cmake project

00:34:52,800 --> 00:34:57,119
okay so this screen right here this is

00:34:55,359 --> 00:35:00,000
my windows laptop

00:34:57,119 --> 00:35:02,000
and if i open the live share pane on the

00:35:00,000 --> 00:35:05,280
left that arrow icon

00:35:02,000 --> 00:35:09,440
and select start collaboration session

00:35:05,280 --> 00:35:09,440
this generates a url

00:35:10,079 --> 00:35:13,520
and automatically copies it to my

00:35:11,839 --> 00:35:16,960
clipboard

00:35:13,520 --> 00:35:19,680
so now if i send that url out

00:35:16,960 --> 00:35:21,520
anyone can join so now this is my mac

00:35:19,680 --> 00:35:22,240
laptop where i'm going to join this

00:35:21,520 --> 00:35:24,560
session

00:35:22,240 --> 00:35:28,839
so i'll select join instead of start and

00:35:24,560 --> 00:35:30,720
then paste the url that i was just sent

00:35:28,839 --> 00:35:33,119
here

00:35:30,720 --> 00:35:35,359
and then it's starting to load super

00:35:33,119 --> 00:35:37,760
tucks on the mac laptop

00:35:35,359 --> 00:35:39,680
so now we have a side by side view of

00:35:37,760 --> 00:35:42,000
what the hosts and what the guests are

00:35:39,680 --> 00:35:42,000
seeing

00:35:43,359 --> 00:35:46,480
and so you can see the other person's

00:35:45,520 --> 00:35:49,599
cursor

00:35:46,480 --> 00:35:53,359
and to start the guests will navigate

00:35:49,599 --> 00:35:56,000
with the host so if the host

00:35:53,359 --> 00:35:59,440
goes to a different source file the

00:35:56,000 --> 00:36:01,920
guests will go with them until the guest

00:35:59,440 --> 00:36:03,280
starts navigating independently and so

00:36:01,920 --> 00:36:03,920
here you see if i'm highlighting

00:36:03,280 --> 00:36:06,240
something

00:36:03,920 --> 00:36:08,240
on my windows computer i can see that on

00:36:06,240 --> 00:36:11,040
my mac

00:36:08,240 --> 00:36:12,000
and then vice versa is true if i

00:36:11,040 --> 00:36:14,880
highlight something from

00:36:12,000 --> 00:36:16,400
mac that shows up on windows as well so

00:36:14,880 --> 00:36:19,520
you can see how the other person is

00:36:16,400 --> 00:36:19,520
interacting with the code

00:36:20,640 --> 00:36:23,760
okay so now i've navigated to another

00:36:23,200 --> 00:36:26,400
file

00:36:23,760 --> 00:36:28,240
as the guest on my mac laptop and at

00:36:26,400 --> 00:36:30,880
this point

00:36:28,240 --> 00:36:33,440
the host and the guest are navigating

00:36:30,880 --> 00:36:34,880
independently

00:36:33,440 --> 00:36:37,040
you can see on windows we've switched to

00:36:34,880 --> 00:36:41,839
a new file and on mac they stayed where

00:36:37,040 --> 00:36:41,839
they are

00:36:42,480 --> 00:36:46,880
okay so let's check out some of the

00:36:44,880 --> 00:36:51,280
editing features that are available

00:36:46,880 --> 00:36:54,000
to the guest such as find all references

00:36:51,280 --> 00:36:54,560
so if i want to find all references of

00:36:54,000 --> 00:36:57,599
this

00:36:54,560 --> 00:37:01,119
m state variable

00:36:57,599 --> 00:37:02,640
i can select final references and

00:37:01,119 --> 00:37:04,480
when the c plus plus extension does a

00:37:02,640 --> 00:37:07,520
final reference it

00:37:04,480 --> 00:37:08,400
finds both confirmed and unconfirmed

00:37:07,520 --> 00:37:11,599
references

00:37:08,400 --> 00:37:13,760
for this variable so here we see

00:37:11,599 --> 00:37:15,359
all the confirmed references if there

00:37:13,760 --> 00:37:16,960
were unconfirmed references they would

00:37:15,359 --> 00:37:18,720
appear beneath that

00:37:16,960 --> 00:37:20,400
and an unconfirmed reference basically

00:37:18,720 --> 00:37:22,000
means it's a text match but not

00:37:20,400 --> 00:37:23,680
necessarily a semantic match

00:37:22,000 --> 00:37:25,520
it could be like in an inactive code

00:37:23,680 --> 00:37:27,359
block or in a comment

00:37:25,520 --> 00:37:28,960
so now as the guest i can also rename

00:37:27,359 --> 00:37:31,839
the symbol

00:37:28,960 --> 00:37:32,160
so let's say i want to rename this to

00:37:31,839 --> 00:37:35,520
end

00:37:32,160 --> 00:37:39,359
state then i can do a shift

00:37:35,520 --> 00:37:39,359
enter to preview the results

00:37:39,599 --> 00:37:44,720
so this refactor preview pops up and by

00:37:42,480 --> 00:37:45,040
default all of the confirmed references

00:37:44,720 --> 00:37:48,640
are

00:37:45,040 --> 00:37:50,720
selected and then you can unselect

00:37:48,640 --> 00:37:52,320
versus you don't want to include them in

00:37:50,720 --> 00:37:54,480
your rename

00:37:52,320 --> 00:37:55,760
so you can control what goes into this

00:37:54,480 --> 00:37:57,359
rename when you're

00:37:55,760 --> 00:37:59,280
ready then you can just click a check

00:37:57,359 --> 00:38:02,000
mark on the right or exit out which is

00:37:59,280 --> 00:38:02,000
what i just did

00:38:02,400 --> 00:38:06,560
so now we've seen how you can co-edit

00:38:04,880 --> 00:38:08,800
and navigate through the code

00:38:06,560 --> 00:38:10,480
let's start a collaborative debugging

00:38:08,800 --> 00:38:14,640
session

00:38:10,480 --> 00:38:18,240
so going back to my windows laptop

00:38:14,640 --> 00:38:21,680
i'm going to go to my main.cpp file

00:38:18,240 --> 00:38:21,680
where i have a breakpoint set

00:38:23,520 --> 00:38:29,440
and use the cma tools extension to start

00:38:26,480 --> 00:38:32,480
a debugging session

00:38:29,440 --> 00:38:35,680
so this will launch the debugger ui

00:38:32,480 --> 00:38:36,720
on both the windows laptop and the mac

00:38:35,680 --> 00:38:38,640
laptop it's just

00:38:36,720 --> 00:38:41,680
it's building the project first so it's

00:38:38,640 --> 00:38:41,680
taking a second to build

00:38:44,400 --> 00:38:48,320
and now we see it's launched on windows

00:38:46,800 --> 00:38:50,560
it'll be second before it launches on

00:38:48,320 --> 00:38:50,560
mac

00:38:52,079 --> 00:38:58,800
there we have it so

00:38:55,440 --> 00:39:01,920
as the guest you can

00:38:58,800 --> 00:39:04,800
interact with the debugger yourself

00:39:01,920 --> 00:39:08,000
like step through the code or set

00:39:04,800 --> 00:39:11,440
variable values

00:39:08,000 --> 00:39:13,040
so let's say i wanted to either like set

00:39:11,440 --> 00:39:14,000
the variable value for this one i could

00:39:13,040 --> 00:39:16,800
do that from the context

00:39:14,000 --> 00:39:20,160
menu or you can add it to watch and add

00:39:16,800 --> 00:39:20,160
your own watch variables

00:39:22,240 --> 00:39:28,400
and you can add breakpoints disable

00:39:26,000 --> 00:39:30,480
breakpoints you can

00:39:28,400 --> 00:39:33,280
really do everything with the debugger

00:39:30,480 --> 00:39:35,839
as the guest that you would as the host

00:39:33,280 --> 00:39:36,800
so let's uh continue running the program

00:39:35,839 --> 00:39:40,240
and then this should

00:39:36,800 --> 00:39:43,839
launch supertux the game on the

00:39:40,240 --> 00:39:43,839
windows laptop

00:39:45,040 --> 00:39:50,240
yep there it is so

00:39:50,400 --> 00:39:54,960
um some takeaways about liveshare it

00:39:53,040 --> 00:39:57,520
enables remote pair

00:39:54,960 --> 00:39:59,359
programming so that you can still

00:39:57,520 --> 00:40:00,240
navigate independently through a code

00:39:59,359 --> 00:40:02,400
base

00:40:00,240 --> 00:40:04,240
you can experience the host workspace in

00:40:02,400 --> 00:40:05,760
the context of your own editor so you

00:40:04,240 --> 00:40:07,520
still have all of

00:40:05,760 --> 00:40:09,680
the preferences and settings that you've

00:40:07,520 --> 00:40:12,480
customized for your editor

00:40:09,680 --> 00:40:13,760
you can use intellisense and refactoring

00:40:12,480 --> 00:40:15,839
and code navigation

00:40:13,760 --> 00:40:17,760
as the guest even though you don't have

00:40:15,839 --> 00:40:20,880
any of the source files installed

00:40:17,760 --> 00:40:24,000
or copied on your machine and

00:40:20,880 --> 00:40:26,319
you can debug together so it

00:40:24,000 --> 00:40:27,839
really navigates around a lot of the

00:40:26,319 --> 00:40:29,920
limitations that you have when you're

00:40:27,839 --> 00:40:32,000
just screen sharing for example

00:40:29,920 --> 00:40:33,520
when you're screen sharing only one

00:40:32,000 --> 00:40:34,319
person the person who's sharing their

00:40:33,520 --> 00:40:36,160
screen

00:40:34,319 --> 00:40:37,200
can navigate through the code and if

00:40:36,160 --> 00:40:38,000
you're watching someone share their

00:40:37,200 --> 00:40:39,359
screen you're kind of just

00:40:38,000 --> 00:40:41,440
following along with actions they're

00:40:39,359 --> 00:40:41,920
taking but with live share you can

00:40:41,440 --> 00:40:45,040
really

00:40:41,920 --> 00:40:48,240
co-edit and co-debug from your own

00:40:45,040 --> 00:40:48,240
machine from your own house

00:40:49,040 --> 00:40:52,079
so some conclusions from all of these

00:40:51,520 --> 00:40:55,280
demos

00:40:52,079 --> 00:40:57,520
are that cmake and vc package

00:40:55,280 --> 00:40:59,200
set your project up for cross-platform

00:40:57,520 --> 00:41:01,839
development success

00:40:59,200 --> 00:41:03,599
and dev containers they eliminate the

00:41:01,839 --> 00:41:06,400
time spent setting up the environment so

00:41:03,599 --> 00:41:09,119
that people can quickly reproduce issues

00:41:06,400 --> 00:41:10,880
no matter what machine they're using

00:41:09,119 --> 00:41:13,920
live share is a great option

00:41:10,880 --> 00:41:15,440
for pair programming

00:41:13,920 --> 00:41:17,920
and all of these extensions that i

00:41:15,440 --> 00:41:18,800
demoed for you today are included in the

00:41:17,920 --> 00:41:22,480
new c

00:41:18,800 --> 00:41:22,880
plus extension pack so check that out if

00:41:22,480 --> 00:41:24,480
you

00:41:22,880 --> 00:41:26,960
want to play around with the extensions

00:41:24,480 --> 00:41:29,200
that i demoed today

00:41:26,960 --> 00:41:31,760
and now to get into some exciting

00:41:29,200 --> 00:41:34,240
announcements

00:41:31,760 --> 00:41:36,400
c plus plus in visual studio code has

00:41:34,240 --> 00:41:38,720
reached version 1.0

00:41:36,400 --> 00:41:39,599
today um during the time that you've

00:41:38,720 --> 00:41:42,560
been watching this

00:41:39,599 --> 00:41:44,480
talk version 1.0 has been released what

00:41:42,560 --> 00:41:46,079
does version 1.0 mean

00:41:44,480 --> 00:41:48,400
basically the extension has been in

00:41:46,079 --> 00:41:50,560
preview for four years

00:41:48,400 --> 00:41:51,839
and throughout these four years we've

00:41:50,560 --> 00:41:54,240
worked with customers

00:41:51,839 --> 00:41:54,880
and our customers have helped shape the

00:41:54,240 --> 00:41:57,040
direction

00:41:54,880 --> 00:41:58,960
of c plus development in visual studio

00:41:57,040 --> 00:42:01,920
code by reporting bugs

00:41:58,960 --> 00:42:02,319
reporting feature asks and now that we

00:42:01,920 --> 00:42:05,599
have

00:42:02,319 --> 00:42:06,640
version 1.0 um 1.0 delivers the top

00:42:05,599 --> 00:42:08,960
feature asks

00:42:06,640 --> 00:42:10,400
in high quality um so if you haven't

00:42:08,960 --> 00:42:12,319
tried the c plus plus

00:42:10,400 --> 00:42:13,920
extension in a while now is the time to

00:42:12,319 --> 00:42:16,880
give it another shot

00:42:13,920 --> 00:42:18,000
and while we're really excited about 1.0

00:42:16,880 --> 00:42:19,760
it doesn't stop there

00:42:18,000 --> 00:42:21,520
we're even more excited about what the

00:42:19,760 --> 00:42:24,720
future of c plus plus development and

00:42:21,520 --> 00:42:27,680
visual studio code will bring

00:42:24,720 --> 00:42:31,040
some brand new features in 1.0 are

00:42:27,680 --> 00:42:33,599
support for linux on arm and arm 64.

00:42:31,040 --> 00:42:35,520
so you now have a first class

00:42:33,599 --> 00:42:37,119
development experience for arm and arm

00:42:35,520 --> 00:42:40,480
64 and vs code

00:42:37,119 --> 00:42:43,520
complete with editing intellisense

00:42:40,480 --> 00:42:46,560
and remote build and debug so you can

00:42:43,520 --> 00:42:48,720
develop for raspberry pi um your c plus

00:42:46,560 --> 00:42:51,520
plus applications for raspberry pi

00:42:48,720 --> 00:42:52,880
from visual studio code another new

00:42:51,520 --> 00:42:55,920
feature in 1.0

00:42:52,880 --> 00:42:58,720
is visual c plus plus code formatting

00:42:55,920 --> 00:43:00,319
which basically means all of the c plus

00:42:58,720 --> 00:43:02,720
code formatting features that are

00:43:00,319 --> 00:43:05,599
available today in visual studio

00:43:02,720 --> 00:43:06,319
are now supported in vs code and what's

00:43:05,599 --> 00:43:09,200
more

00:43:06,319 --> 00:43:10,400
is that vs code has built-in editor

00:43:09,200 --> 00:43:13,760
config support

00:43:10,400 --> 00:43:17,200
for all of these new settings so you can

00:43:13,760 --> 00:43:20,240
use an editor config file between vs

00:43:17,200 --> 00:43:22,960
and vs code it just allows for more

00:43:20,240 --> 00:43:24,880
customization with your code formatting

00:43:22,960 --> 00:43:26,800
and then the third new thing that i have

00:43:24,880 --> 00:43:28,880
talked about throughout the demos today

00:43:26,800 --> 00:43:31,280
is the c plus extension pack

00:43:28,880 --> 00:43:32,560
check it out using that aka dot ms link

00:43:31,280 --> 00:43:34,960
on the slide

00:43:32,560 --> 00:43:36,400
um it just contains a bunch of popular

00:43:34,960 --> 00:43:38,160
extensions that we believe

00:43:36,400 --> 00:43:40,000
will optimize your c plus plus

00:43:38,160 --> 00:43:43,599
development experience and visual studio

00:43:40,000 --> 00:43:46,000
code so

00:43:43,599 --> 00:43:47,200
give it a try install the c plus plus

00:43:46,000 --> 00:43:49,280
extension pack

00:43:47,200 --> 00:43:51,040
you can also check out our new configure

00:43:49,280 --> 00:43:53,839
c plus plus intellisense

00:43:51,040 --> 00:43:55,440
nvs code video tutorial we know that

00:43:53,839 --> 00:43:56,880
configuring intellisense

00:43:55,440 --> 00:43:58,800
has not always been easy so we've

00:43:56,880 --> 00:44:00,960
created this uh like three minute video

00:43:58,800 --> 00:44:03,440
tutorial to help you out

00:44:00,960 --> 00:44:05,119
we also have hello world build and debug

00:44:03,440 --> 00:44:06,079
tutorials for different compilers and

00:44:05,119 --> 00:44:08,880
platforms

00:44:06,079 --> 00:44:09,680
on our docs um you can use that ak dot

00:44:08,880 --> 00:44:13,520
ms

00:44:09,680 --> 00:44:15,760
cpp hello world link to get there um so

00:44:13,520 --> 00:44:17,040
try it out let us know what you think if

00:44:15,760 --> 00:44:19,599
you run into

00:44:17,040 --> 00:44:20,960
any issues or have any suggestions

00:44:19,599 --> 00:44:22,800
please report them on our github

00:44:20,960 --> 00:44:26,000
repository

00:44:22,800 --> 00:44:28,720
and we're happy to work with you

00:44:26,000 --> 00:44:31,839
and help shape the future of c plus plus

00:44:28,720 --> 00:44:31,839
development in vs code

00:44:32,240 --> 00:44:36,400
some other announcements that we have

00:44:34,640 --> 00:44:39,760
and some things to look forward to

00:44:36,400 --> 00:44:42,079
our vc package you i will be shipping in

00:44:39,760 --> 00:44:44,480
vs code so you'll be able to

00:44:42,079 --> 00:44:45,200
manage your libraries your vc package

00:44:44,480 --> 00:44:47,520
libraries

00:44:45,200 --> 00:44:48,800
from the editor from vs code itself

00:44:47,520 --> 00:44:51,359
rather than just

00:44:48,800 --> 00:44:53,040
from the command line and we have a make

00:44:51,359 --> 00:44:55,520
file tools extension coming

00:44:53,040 --> 00:44:57,680
which will be very similar in nature to

00:44:55,520 --> 00:45:01,200
the cmaketools extension

00:44:57,680 --> 00:45:04,800
where you can configure build and debug

00:45:01,200 --> 00:45:07,280
make file projects in visual studio code

00:45:04,800 --> 00:45:09,440
so i'm going to give you a sneak peek of

00:45:07,280 --> 00:45:11,520
what the vc package ui and vs code will

00:45:09,440 --> 00:45:13,520
look like

00:45:11,520 --> 00:45:14,800
this demo was recorded by one of our

00:45:13,520 --> 00:45:18,400
developers daniel shaw

00:45:14,800 --> 00:45:20,400
on the vc package team and it's not

00:45:18,400 --> 00:45:21,760
yet in production it's not even an

00:45:20,400 --> 00:45:23,680
insider's build so

00:45:21,760 --> 00:45:25,920
things are subject to change before this

00:45:23,680 --> 00:45:27,680
is shipped to production

00:45:25,920 --> 00:45:29,200
um but just wanted to give you a sneak

00:45:27,680 --> 00:45:32,560
peek and get you excited about this

00:45:29,200 --> 00:45:34,560
because i'm certainly excited um so

00:45:32,560 --> 00:45:36,720
basically we'll add some vc package

00:45:34,560 --> 00:45:38,240
settings to the c plus extension

00:45:36,720 --> 00:45:40,880
where you can set your vc package

00:45:38,240 --> 00:45:42,640
preferred triplet and specify the path

00:45:40,880 --> 00:45:45,520
to the instance of vc package that you

00:45:42,640 --> 00:45:48,640
have on your machine

00:45:45,520 --> 00:45:50,240
and then in this ui on the left you can

00:45:48,640 --> 00:45:52,800
see the libraries that

00:45:50,240 --> 00:45:54,400
you have installed with that instance of

00:45:52,800 --> 00:45:55,119
vc package that you specified in

00:45:54,400 --> 00:45:57,040
settings

00:45:55,119 --> 00:45:59,040
and you can install a new package just

00:45:57,040 --> 00:46:02,640
by clicking that plus sign

00:45:59,040 --> 00:46:04,319
and searching for it and it'll install

00:46:02,640 --> 00:46:07,760
that package for the preferred triplet

00:46:04,319 --> 00:46:07,760
that you specified in the settings

00:46:12,079 --> 00:46:15,760
so now if we refresh this view we should

00:46:15,359 --> 00:46:19,200
see

00:46:15,760 --> 00:46:22,119
the fmt formatting library installed

00:46:19,200 --> 00:46:23,680
and you notice that it created a vc

00:46:22,119 --> 00:46:26,000
package.json

00:46:23,680 --> 00:46:27,520
manifest file for our project with those

00:46:26,000 --> 00:46:30,160
dependencies

00:46:27,520 --> 00:46:32,720
now if you remove a dependency and then

00:46:30,160 --> 00:46:35,680
refresh the view

00:46:32,720 --> 00:46:36,800
you can see um specifically like which

00:46:35,680 --> 00:46:39,280
dependencies are

00:46:36,800 --> 00:46:41,119
installed and in the manifest file so

00:46:39,280 --> 00:46:44,319
that's why fmt has that little

00:46:41,119 --> 00:46:44,319
check mark next to it

00:46:44,480 --> 00:46:53,520
and now let's include

00:46:47,680 --> 00:46:57,040
this library in our main.cpp program

00:46:53,520 --> 00:46:59,520
and use one of the functions from this

00:46:57,040 --> 00:46:59,520
library

00:47:02,880 --> 00:47:11,839
of results 42

00:47:07,920 --> 00:47:11,839
and then output that string

00:47:12,560 --> 00:47:21,040
okay so now we can

00:47:17,440 --> 00:47:24,240
build and run this program in vs code

00:47:21,040 --> 00:47:26,880
and we will use a build

00:47:24,240 --> 00:47:28,800
task so this is not a cmake project

00:47:26,880 --> 00:47:31,920
we're not using the cma tools extension

00:47:28,800 --> 00:47:34,559
we're using vs code build tasks which is

00:47:31,920 --> 00:47:36,079
which is a task.json file and this new

00:47:34,559 --> 00:47:39,200
command that was just selected

00:47:36,079 --> 00:47:42,720
is vc package setup task.json

00:47:39,200 --> 00:47:43,839
which adds the include and linker flags

00:47:42,720 --> 00:47:44,800
that you need to be passed on the

00:47:43,839 --> 00:47:46,640
command line for

00:47:44,800 --> 00:47:50,000
vc package integration so it'll

00:47:46,640 --> 00:47:50,000
automatically do that for you

00:47:50,480 --> 00:47:56,400
and then we'll run the build task

00:47:53,760 --> 00:47:56,960
everything seems to be working you can

00:47:56,400 --> 00:47:59,359
see the

00:47:56,960 --> 00:48:02,960
executables that were created appear in

00:47:59,359 --> 00:48:02,960
the project view on the left

00:48:05,200 --> 00:48:09,760
and now we can start a debugging session

00:48:12,240 --> 00:48:18,400
we'll just change the program name to be

00:48:16,079 --> 00:48:21,839
main because that's executable that we

00:48:18,400 --> 00:48:21,839
just created

00:48:28,559 --> 00:48:35,839
and now we'll set a breakpoint

00:48:32,079 --> 00:48:35,839
start debugging

00:48:36,000 --> 00:48:40,800
so essentially you'll be able to manage

00:48:39,040 --> 00:48:43,839
your vc package libraries

00:48:40,800 --> 00:48:46,800
and set up your build tasks

00:48:43,839 --> 00:48:48,400
um so that it'll build using those vc

00:48:46,800 --> 00:48:52,079
package libraries

00:48:48,400 --> 00:48:53,520
automatically in visual studio code and

00:48:52,079 --> 00:48:57,520
one of the things that i showed you at

00:48:53,520 --> 00:48:57,520
the beginning of this demo is that

00:48:57,599 --> 00:49:02,240
we had to add the add the path to the vc

00:49:00,480 --> 00:49:04,480
package root in the settings

00:49:02,240 --> 00:49:05,680
down the road um we won't even have to

00:49:04,480 --> 00:49:07,119
do that

00:49:05,680 --> 00:49:10,400
the c plus plus extension will be able

00:49:07,119 --> 00:49:12,640
to just find the vc package instance

00:49:10,400 --> 00:49:14,079
but you could specify the route if you

00:49:12,640 --> 00:49:16,800
wanted to if you want to choose

00:49:14,079 --> 00:49:18,720
a different instance of vc package

00:49:16,800 --> 00:49:21,599
instead

00:49:18,720 --> 00:49:23,520
so thank you so much for listening to my

00:49:21,599 --> 00:49:24,880
talk i hope you enjoy the rest of the

00:49:23,520 --> 00:49:26,480
conference

00:49:24,880 --> 00:49:28,319
once again i'll say please visit our

00:49:26,480 --> 00:49:30,720
table at the expo hall

00:49:28,319 --> 00:49:31,760
to meet with rest of the team ask us any

00:49:30,720 --> 00:49:34,240
questions

00:49:31,760 --> 00:49:35,760
discuss the latest announcements like

00:49:34,240 --> 00:49:38,880
the v1 announcement for the c

00:49:35,760 --> 00:49:39,520
plus extension um and please take our

00:49:38,880 --> 00:49:41,680
survey

00:49:39,520 --> 00:49:45,839
if you want to be entered in a chance to

00:49:41,680 --> 00:49:45,839
win the microsoft flight simulator

00:49:46,079 --> 00:49:50,480
we have a bunch of other sessions

00:49:48,559 --> 00:49:55,440
throughout the week

00:49:50,480 --> 00:49:58,559
so we have a few tomorrow on tuesday

00:49:55,440 --> 00:50:00,240
wednesday and friday so all throughout

00:49:58,559 --> 00:50:04,079
the week you'll be able to

00:50:00,240 --> 00:50:07,280
attend sessions from the visual c team

00:50:04,079 --> 00:50:09,040
and looks like we have about 10 minutes

00:50:07,280 --> 00:50:12,160
left so we can open up the floor

00:50:09,040 --> 00:50:15,359
to q a

00:50:12,160 --> 00:50:15,359
go over to remo

00:50:16,240 --> 00:50:24,240
all right so i am opening up the q a

00:50:20,880 --> 00:50:26,800
take a look at some of these questions

00:50:24,240 --> 00:50:27,599
uh so the first one i see has the most

00:50:26,800 --> 00:50:30,160
upvotes

00:50:27,599 --> 00:50:31,280
is how is the live share session

00:50:30,160 --> 00:50:33,839
encrypted

00:50:31,280 --> 00:50:35,520
it's a great question i actually don't

00:50:33,839 --> 00:50:36,880
have the context to answer that question

00:50:35,520 --> 00:50:40,000
for you right now

00:50:36,880 --> 00:50:43,440
but if you ping me on slack i

00:50:40,000 --> 00:50:46,240
can get an answer for you

00:50:43,440 --> 00:50:47,200
hopefully today and just ask the live

00:50:46,240 --> 00:50:50,880
share team

00:50:47,200 --> 00:50:50,880
how the session is encrypted

00:50:50,960 --> 00:50:55,280
what other extensions in vs code would

00:50:52,880 --> 00:50:57,680
you recommend for c plus plus developers

00:50:55,280 --> 00:51:00,000
a great question because we just put

00:50:57,680 --> 00:51:03,119
together this extension pack

00:51:00,000 --> 00:51:03,839
but one other extension that i'd

00:51:03,119 --> 00:51:06,880
recommend

00:51:03,839 --> 00:51:07,760
is the doxygen documentation generator

00:51:06,880 --> 00:51:10,319
extension

00:51:07,760 --> 00:51:11,839
so the c plus plus extension has support

00:51:10,319 --> 00:51:14,079
for displaying

00:51:11,839 --> 00:51:16,400
uh the documentation if you have the

00:51:14,079 --> 00:51:18,640
doxgen comments in your code

00:51:16,400 --> 00:51:19,599
and the docstion documentation generator

00:51:18,640 --> 00:51:21,920
extension

00:51:19,599 --> 00:51:22,880
generates the stubs for those comments

00:51:21,920 --> 00:51:25,920
automatically

00:51:22,880 --> 00:51:28,400
so that's a useful one

00:51:25,920 --> 00:51:30,319
we covered c plus extension and c make

00:51:28,400 --> 00:51:32,720
tools extension today

00:51:30,319 --> 00:51:33,839
github pull requests and issues the

00:51:32,720 --> 00:51:35,680
remote development

00:51:33,839 --> 00:51:37,119
extent or the remote development

00:51:35,680 --> 00:51:40,480
extension pack

00:51:37,119 --> 00:51:42,079
is really useful that contains the ssh

00:51:40,480 --> 00:51:43,520
extension that i showed you today

00:51:42,079 --> 00:51:47,200
the containers extension that i showed

00:51:43,520 --> 00:51:50,559
you today plus the wsl extension

00:51:47,200 --> 00:51:52,160
there's also remote code spaces which is

00:51:50,559 --> 00:51:54,319
really cool you should definitely check

00:51:52,160 --> 00:51:55,839
out the talk that my

00:51:54,319 --> 00:51:58,160
colleague nick will be giving on

00:51:55,839 --> 00:52:01,680
wednesday about code spaces

00:51:58,160 --> 00:52:05,280
and another extension i recommend

00:52:01,680 --> 00:52:06,880
is cmake extension so what i showed you

00:52:05,280 --> 00:52:09,359
today is cmake tools which has

00:52:06,880 --> 00:52:10,079
all the configure build and debug

00:52:09,359 --> 00:52:13,359
support

00:52:10,079 --> 00:52:16,480
for cmake projects the cmake extension

00:52:13,359 --> 00:52:19,280
has language support for

00:52:16,480 --> 00:52:20,480
c make files themselves which just makes

00:52:19,280 --> 00:52:23,760
it a little bit easier to

00:52:20,480 --> 00:52:23,760
read and edit those files

00:52:28,319 --> 00:52:32,079
i see one question from samantha what

00:52:30,960 --> 00:52:34,720
common pitfalls

00:52:32,079 --> 00:52:35,599
pitfalls do you see beginner c plus

00:52:34,720 --> 00:52:38,880
developers run

00:52:35,599 --> 00:52:40,079
into when using vs code specifically for

00:52:38,880 --> 00:52:43,760
collaborative development

00:52:40,079 --> 00:52:47,119
any advice on how to avoid those

00:52:43,760 --> 00:52:48,559
sure so visual studio code

00:52:47,119 --> 00:52:50,960
like one of the great things about it is

00:52:48,559 --> 00:52:52,400
that it's super lightweight and

00:52:50,960 --> 00:52:54,960
customizable so

00:52:52,400 --> 00:52:55,760
when you install visual studio code out

00:52:54,960 --> 00:52:58,400
of the box

00:52:55,760 --> 00:53:00,000
um you know it doesn't have like the c

00:52:58,400 --> 00:53:02,720
plus plus extension doesn't come with

00:53:00,000 --> 00:53:03,680
a compiler installed like a full ide

00:53:02,720 --> 00:53:05,920
would

00:53:03,680 --> 00:53:07,839
and that's the beauty of it you can

00:53:05,920 --> 00:53:10,000
customize it to use the compiler

00:53:07,839 --> 00:53:11,599
the debugger that you want but it does

00:53:10,000 --> 00:53:13,520
require that you

00:53:11,599 --> 00:53:15,119
know how to install a compiler and how

00:53:13,520 --> 00:53:17,440
to install a debugger

00:53:15,119 --> 00:53:18,800
and make decisions about which ones you

00:53:17,440 --> 00:53:22,559
want to use

00:53:18,800 --> 00:53:24,400
and our documentation has some great

00:53:22,559 --> 00:53:26,160
hello world tutorials that walk you

00:53:24,400 --> 00:53:28,160
through everything from

00:53:26,160 --> 00:53:29,520
installing the extension installing a

00:53:28,160 --> 00:53:31,839
compiler

00:53:29,520 --> 00:53:33,200
setting up your build tasks so that vs

00:53:31,839 --> 00:53:34,880
code will

00:53:33,200 --> 00:53:36,720
use that compiler to generate an

00:53:34,880 --> 00:53:40,000
executable um

00:53:36,720 --> 00:53:41,680
and things like that so i think as a

00:53:40,000 --> 00:53:42,559
beginner you might not realize all of

00:53:41,680 --> 00:53:44,720
the things that go

00:53:42,559 --> 00:53:46,319
into building a c project like

00:53:44,720 --> 00:53:50,000
installing a compiler

00:53:46,319 --> 00:53:51,760
setting up your build task to build it

00:53:50,000 --> 00:53:53,760
setting up the debugger launching the

00:53:51,760 --> 00:53:56,559
debugger

00:53:53,760 --> 00:53:57,280
and things like that it's not really

00:53:56,559 --> 00:53:59,760
just like

00:53:57,280 --> 00:54:00,400
you press a button and everything works

00:53:59,760 --> 00:54:03,440
um

00:54:00,400 --> 00:54:05,040
and i think that can

00:54:03,440 --> 00:54:06,960
you know be difficult for beginners but

00:54:05,040 --> 00:54:09,280
then once you get used to it

00:54:06,960 --> 00:54:10,319
it's actually a great thing because it

00:54:09,280 --> 00:54:13,520
gives you all this

00:54:10,319 --> 00:54:17,200
flexibility and and customization um

00:54:13,520 --> 00:54:19,280
but i i think avoiding those

00:54:17,200 --> 00:54:20,240
one suggestion would be to check out our

00:54:19,280 --> 00:54:22,240
docs

00:54:20,240 --> 00:54:24,640
another suggestion would be to use cmake

00:54:22,240 --> 00:54:26,480
because the cma tools extension

00:54:24,640 --> 00:54:28,079
abstracts you from a lot of that by

00:54:26,480 --> 00:54:28,559
finding the compilers on your computer

00:54:28,079 --> 00:54:31,760
yourself

00:54:28,559 --> 00:54:32,800
itself and um you don't need to like

00:54:31,760 --> 00:54:34,079
edit the debug

00:54:32,800 --> 00:54:36,800
configuration in order to get the

00:54:34,079 --> 00:54:36,800
debugger to work

00:54:37,440 --> 00:54:41,359
just reading some of the other questions

00:54:48,480 --> 00:54:52,799
are you aware of intentions to group get

00:54:50,559 --> 00:54:54,000
changes by directory to minimize such

00:54:52,799 --> 00:54:58,640
clutter a bit

00:54:54,000 --> 00:54:58,640
when there is no dot get ignore

00:54:59,520 --> 00:55:04,960
so by directory do you mean if you mean

00:55:02,160 --> 00:55:07,040
like sub directories within the project

00:55:04,960 --> 00:55:08,799
um that's a good question i'm not sure

00:55:07,040 --> 00:55:12,240
if there are intentions but that

00:55:08,799 --> 00:55:15,280
is definitely a good feature request

00:55:12,240 --> 00:55:18,799
so i i don't work on that extension but

00:55:15,280 --> 00:55:20,400
if you find that extension on github and

00:55:18,799 --> 00:55:22,000
report an issue then

00:55:20,400 --> 00:55:24,799
that would be a good way to track that

00:55:22,000 --> 00:55:24,799
feature request

00:55:27,040 --> 00:55:30,960
since we're talking about cross-platform

00:55:28,960 --> 00:55:33,880
development what about automatically

00:55:30,960 --> 00:55:35,359
filling system include path in

00:55:33,880 --> 00:55:38,400
cppproperties.json

00:55:35,359 --> 00:55:39,799
so that's a great question

00:55:38,400 --> 00:55:41,680
i didn't really go into

00:55:39,799 --> 00:55:42,640
cppproperties.json in the session today

00:55:41,680 --> 00:55:45,680
because

00:55:42,640 --> 00:55:47,040
we were using cmaketools and the cma

00:55:45,680 --> 00:55:50,000
tools extension

00:55:47,040 --> 00:55:50,480
actually um provides intellisense you

00:55:50,000 --> 00:55:52,640
can

00:55:50,480 --> 00:55:53,520
set your intellisense configuration

00:55:52,640 --> 00:55:57,200
provider to be

00:55:53,520 --> 00:55:57,920
cmaketools but if you are using cpp

00:55:57,200 --> 00:56:02,240
properties

00:55:57,920 --> 00:56:05,359
define intellisense configuration um

00:56:02,240 --> 00:56:06,799
you can like define multiple

00:56:05,359 --> 00:56:10,000
intellisense configuration

00:56:06,799 --> 00:56:11,680
for different platforms um so that it

00:56:10,000 --> 00:56:13,920
makes it really easy to switch between

00:56:11,680 --> 00:56:16,000
those configurations when you are

00:56:13,920 --> 00:56:17,520
um switching the platform you're

00:56:16,000 --> 00:56:20,799
developing for

00:56:17,520 --> 00:56:22,160
and you can um configure intellisense

00:56:20,799 --> 00:56:25,200
for cross compiling

00:56:22,160 --> 00:56:27,520
by changing the intellisense mode and

00:56:25,200 --> 00:56:30,000
the compiler path um it gives the

00:56:27,520 --> 00:56:33,599
extension enough information to

00:56:30,000 --> 00:56:35,040
emulate like that target architecture

00:56:33,599 --> 00:56:37,280
and give you the right intellisense for

00:56:35,040 --> 00:56:39,280
that target architecture

00:56:37,280 --> 00:56:41,520
for include paths as long as the

00:56:39,280 --> 00:56:44,960
compiler path property is automatically

00:56:41,520 --> 00:56:45,599
set you should not need to change that

00:56:44,960 --> 00:56:49,040
setting at

00:56:45,599 --> 00:56:51,200
all unless your project um

00:56:49,040 --> 00:56:52,480
needs to include header files that are

00:56:51,200 --> 00:56:54,400
not in

00:56:52,480 --> 00:56:55,920
your project directory or in the

00:56:54,400 --> 00:56:58,480
standard library header files for that

00:56:55,920 --> 00:56:58,480
compiler

00:57:00,160 --> 00:57:04,640
so it automatically does fill the

00:57:03,280 --> 00:57:08,160
include path with things that you need

00:57:04,640 --> 00:57:08,160
as long as the compiler path property is

00:57:10,839 --> 00:57:13,839
set

00:57:15,599 --> 00:57:19,440
how does using live share with a partner

00:57:18,000 --> 00:57:24,480
affect the state of our

00:57:19,440 --> 00:57:26,720
get repos um

00:57:24,480 --> 00:57:28,240
so i'm not sure i understand this

00:57:26,720 --> 00:57:31,760
question fully but

00:57:28,240 --> 00:57:34,960
if you're asking if um

00:57:31,760 --> 00:57:38,000
like if you are

00:57:34,960 --> 00:57:40,079
on a live show session and editing

00:57:38,000 --> 00:57:42,400
someone else's

00:57:40,079 --> 00:57:43,760
repository like all of the changes that

00:57:42,400 --> 00:57:46,640
are being made are

00:57:43,760 --> 00:57:47,839
like for that person's repo on on their

00:57:46,640 --> 00:57:50,880
machine

00:57:47,839 --> 00:57:52,640
it doesn't affect anything that you have

00:57:50,880 --> 00:57:55,200
on your machine

00:57:52,640 --> 00:57:56,720
if that answers the question um if that

00:57:55,200 --> 00:58:00,160
wasn't the question you were asking feel

00:57:56,720 --> 00:58:00,160
free to post it again in the chat

00:58:03,920 --> 00:58:12,319
is there a plan to support select

00:58:07,280 --> 00:58:14,319
and set default cmake target

00:58:12,319 --> 00:58:16,240
oh so when you're selecting your cmake

00:58:14,319 --> 00:58:18,480
target is there a way to

00:58:16,240 --> 00:58:19,920
set that as the default target that you

00:58:18,480 --> 00:58:23,760
want to

00:58:19,920 --> 00:58:26,480
build or debug um that's a good question

00:58:23,760 --> 00:58:27,760
i thought that the extension like once

00:58:26,480 --> 00:58:30,319
you select

00:58:27,760 --> 00:58:32,319
that target it'll just it'll use the

00:58:30,319 --> 00:58:36,640
most recently selected target

00:58:32,319 --> 00:58:39,520
um but i i will confirm that

00:58:36,640 --> 00:58:39,920
if you ping me on slack i can uh confirm

00:58:39,520 --> 00:58:42,079
that

00:58:39,920 --> 00:58:43,599
response with you in terms of setting it

00:58:42,079 --> 00:58:45,359
as the default i'm not

00:58:43,599 --> 00:58:47,200
sure if there's a way to do that

00:58:45,359 --> 00:58:51,359
currently um

00:58:47,200 --> 00:58:53,680
but i will look into that and

00:58:51,359 --> 00:58:54,880
um i can if you ping me outside i can

00:58:53,680 --> 00:58:56,400
get you the answer or

00:58:54,880 --> 00:58:57,760
if you follow me on twitter i can post

00:58:56,400 --> 00:59:05,839
the answer to some of these questions on

00:58:57,760 --> 00:59:05,839
my twitter as well

00:59:07,040 --> 00:59:10,240
so some of the other questions are about

00:59:08,880 --> 00:59:13,359
live share

00:59:10,240 --> 00:59:13,920
and i so i personally don't work on the

00:59:13,359 --> 00:59:17,040
live share

00:59:13,920 --> 00:59:20,640
extension i don't have all the answers

00:59:17,040 --> 00:59:22,960
for you but what i can do is

00:59:20,640 --> 00:59:23,680
we can download these questions from the

00:59:22,960 --> 00:59:26,480
q a

00:59:23,680 --> 00:59:27,839
and then i can look into the answers to

00:59:26,480 --> 00:59:30,000
these questions and

00:59:27,839 --> 00:59:31,760
either post them on twitter or if you

00:59:30,000 --> 00:59:34,160
ping me on slack i'll post them on sock

00:59:31,760 --> 00:59:34,160
as well

00:59:41,280 --> 00:59:46,960
all right so i think we're just at about

00:59:44,960 --> 00:59:48,160
time

00:59:46,960 --> 00:59:50,160
i hope you enjoy the rest of the

00:59:48,160 --> 00:59:53,200
conference and are able to

00:59:50,160 --> 00:59:54,720
come to our table and check out some of

00:59:53,200 --> 01:00:01,839
the other sessions from the visual c

00:59:54,720 --> 01:00:01,839
plus plus team

01:00:15,440 --> 01:00:17,520

YouTube URL: https://www.youtube.com/watch?v=qCn6zT76zTs


