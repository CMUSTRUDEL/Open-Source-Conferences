Title: CppCon 2019: Jussi Pakkanen “Behind the Scenes of a C++ Build System”
Publication date: 2019-09-27
Playlist: CppCon 2019
Description: 
	http://CppCon.org
—
Discussion & Comments: https://www.reddit.com/r/cpp/
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019
—
Everyone has an opinion on what build systems should do but there are surprisingly few who have an understanding of how they do it. In this talk we shall look behind the curtain and examine what does it actually take to create a modern build system and how they go about their business of turning source code into either compiler errors or executables.

On this journey we shall learn about the wonders of supporting 10+ different platforms and toolchains, dependency management, the awesomeness (both ironically and not) of shared libraries, compiler bugs and the interesting requirements on tools used at the lowest layers of a modern operating system. Using the increasingly popular Meson build system we shall examine real world design choices and tradeoffs and how they affect the final end user development experience. Performance optimization is also examined by looking at how you can efficiently scale program compilation both up to a compilation cluster and down to something like a Raspberry Pi.

Armed with all this knowledge we should finally be able to answer the question of why almost all build systems have suffered from poor usability and maybe, just maybe, find a proper solution for the build and dependency problem.
— 
Jussi Pakkanen
Consultant

Jussi Pakkanen is the creator and project lead of the Meson build system. He is currently working as a consultant. He has experience in many different fields of computing ranging from slot machines to mail sorting, computer security, Linux desktop development and gaming. His free time has been equally colorful, including things such as comics and illustration, directing movies, music and electronics. When not working on projects he might be found watching bad movies, especially sci-fi and the finest of trash from the 80s.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:08,380 --> 00:00:13,000
good afternoon new one and welcome to

00:00:11,320 --> 00:00:17,700
this presentation where we're gonna look

00:00:13,000 --> 00:00:21,189
behind the scenes of a c++ build system

00:00:17,700 --> 00:00:23,320
my name is Joseph akka and the lead

00:00:21,189 --> 00:00:25,899
developer or project lead of the amazing

00:00:23,320 --> 00:00:27,970
build system has a quick show of hands

00:00:25,899 --> 00:00:30,579
who here has used it already at some

00:00:27,970 --> 00:00:35,320
point ok so there's still room for

00:00:30,579 --> 00:00:38,050
growth for us good so this talk is a bit

00:00:35,320 --> 00:00:39,790
special usually talks or mana lists

00:00:38,050 --> 00:00:42,970
there like one thing they go through

00:00:39,790 --> 00:00:47,500
that this is not it's more of a set of

00:00:42,970 --> 00:00:49,450
independent micro talks about different

00:00:47,500 --> 00:00:51,790
parts of build system other things that

00:00:49,450 --> 00:00:55,690
you need to do to make make ongoing a

00:00:51,790 --> 00:00:57,579
look at optimization design dependency

00:00:55,690 --> 00:01:01,180
management multi platform issues all

00:00:57,579 --> 00:01:04,119
that good stuff now as a Protestant when

00:01:01,180 --> 00:01:05,470
I was writing this presentation there

00:01:04,119 --> 00:01:07,590
were things in that actually surprised

00:01:05,470 --> 00:01:10,420
me it went to places that I didn't

00:01:07,590 --> 00:01:13,990
particularly anyway so I hope you will

00:01:10,420 --> 00:01:15,520
be personally surprised as well so this

00:01:13,990 --> 00:01:18,159
is the story number one and this is a

00:01:15,520 --> 00:01:19,810
screenshot and very typical looks guest

00:01:18,159 --> 00:01:22,540
topsis is the one you might be using and

00:01:19,810 --> 00:01:25,390
we're specific talked about this thing

00:01:22,540 --> 00:01:26,950
here which is the network network

00:01:25,390 --> 00:01:28,690
indicator which shows you what network

00:01:26,950 --> 00:01:29,979
you're running if you click on that it

00:01:28,690 --> 00:01:31,570
will show you all of the Wi-Fi

00:01:29,979 --> 00:01:34,990
connections that you could be happy

00:01:31,570 --> 00:01:37,420
using some years ago I was in charge of

00:01:34,990 --> 00:01:41,140
maintaining one of these things for a

00:01:37,420 --> 00:01:42,670
certain Linux distribution and it was an

00:01:41,140 --> 00:01:44,590
interesting experience so what happened

00:01:42,670 --> 00:01:47,590
was that people would start filing box

00:01:44,590 --> 00:01:49,390
and they would find that the network is

00:01:47,590 --> 00:01:51,610
broken and is showing things in the

00:01:49,390 --> 00:01:53,140
Wi-Fi list that are not there so you

00:01:51,610 --> 00:01:55,060
need to fix this this is your problem

00:01:53,140 --> 00:01:56,830
and then I said well this is not really

00:01:55,060 --> 00:01:59,049
our problem it's just show what's

00:01:56,830 --> 00:02:01,299
happening and the kernel people and the

00:01:59,049 --> 00:02:03,040
people running the network stack you

00:02:01,299 --> 00:02:05,320
should be talking with them and then it

00:02:03,040 --> 00:02:08,259
was it no no this is your responsibility

00:02:05,320 --> 00:02:10,869
you have to fix this ok fine so then I

00:02:08,259 --> 00:02:14,140
filed a bug I transferred it to the

00:02:10,869 --> 00:02:16,510
network people and their response was if

00:02:14,140 --> 00:02:17,919
your application is showing some

00:02:16,510 --> 00:02:20,079
networks that the users don't want to

00:02:17,919 --> 00:02:22,010
see it's your responsibility to get rid

00:02:20,079 --> 00:02:23,690
of it won't fix

00:02:22,010 --> 00:02:26,209
and then there was a third thing which

00:02:23,690 --> 00:02:28,310
was that we add managers and they would

00:02:26,209 --> 00:02:28,910
start telling me why are you refusing to

00:02:28,310 --> 00:02:31,450
fix this

00:02:28,910 --> 00:02:33,769
this cannot patent your performance be

00:02:31,450 --> 00:02:36,590
and this not an interesting thing is

00:02:33,769 --> 00:02:38,510
that but whenever you make a problem

00:02:36,590 --> 00:02:41,450
visible you get playing for its

00:02:38,510 --> 00:02:43,160
existence you say we heard the saying

00:02:41,450 --> 00:02:44,690
don't shoot the messenger but in reality

00:02:43,160 --> 00:02:47,300
the messenger is the first person who

00:02:44,690 --> 00:02:50,540
will always get shot ok so but how is

00:02:47,300 --> 00:02:54,110
this time to anything build systems make

00:02:50,540 --> 00:02:55,610
a lot of things visible all the things

00:02:54,110 --> 00:02:56,090
that people might not even know that are

00:02:55,610 --> 00:03:00,980
there

00:02:56,090 --> 00:03:02,989
so let's take an example hey invoking a

00:03:00,980 --> 00:03:05,680
process this is build systems do this

00:03:02,989 --> 00:03:10,849
quite a lot it seems a simple thing like

00:03:05,680 --> 00:03:12,470
how hard can it be well a basic approach

00:03:10,849 --> 00:03:15,140
for an application that you might want

00:03:12,470 --> 00:03:16,790
to take is that you have your command

00:03:15,140 --> 00:03:18,470
that you want to run you store it in a

00:03:16,790 --> 00:03:19,970
string right you have the command you

00:03:18,470 --> 00:03:22,220
have the arguments you can pass them

00:03:19,970 --> 00:03:23,900
around you can go between applications

00:03:22,220 --> 00:03:26,290
have a lock of JSON string where you

00:03:23,900 --> 00:03:29,750
have an array and and move around and

00:03:26,290 --> 00:03:32,359
eventually you call exit ve which takes

00:03:29,750 --> 00:03:35,630
a an array of strings and then you have

00:03:32,359 --> 00:03:37,519
your new executable and so what's so

00:03:35,630 --> 00:03:39,230
difficult about it well there's an

00:03:37,519 --> 00:03:41,480
interesting limitation instance on

00:03:39,230 --> 00:03:43,760
Windows there is not a process

00:03:41,480 --> 00:03:46,910
invocation function that takes a race

00:03:43,760 --> 00:03:48,889
that actually works so if you go through

00:03:46,910 --> 00:03:51,410
MSDN you will find about 5 different

00:03:48,889 --> 00:03:53,150
functions for this and they all have the

00:03:51,410 --> 00:03:55,310
wonderful documentation and the bottom

00:03:53,150 --> 00:03:57,680
it says this function might not do what

00:03:55,310 --> 00:04:01,250
you expect it to do but it lists

00:03:57,680 --> 00:04:03,620
documenting what this means is that if

00:04:01,250 --> 00:04:06,799
you create a tool that in some way deals

00:04:03,620 --> 00:04:08,660
with process invocation you have to deal

00:04:06,799 --> 00:04:09,889
with the fact that commands can be

00:04:08,660 --> 00:04:11,750
string so you have to put them in the

00:04:09,889 --> 00:04:13,970
strings at some point and this is the

00:04:11,750 --> 00:04:16,400
wrong abstraction this take you really

00:04:13,970 --> 00:04:17,989
want to have the array all the time if

00:04:16,400 --> 00:04:20,030
all the way through the system because

00:04:17,989 --> 00:04:22,430
that's what the reliable thing is but

00:04:20,030 --> 00:04:24,550
it's not and instead you get to play the

00:04:22,430 --> 00:04:27,289
fun game of called the quoting game

00:04:24,550 --> 00:04:30,289
which is that first you have your file

00:04:27,289 --> 00:04:32,419
where you your user types in the command

00:04:30,289 --> 00:04:34,970
that they run and to do some coding to

00:04:32,419 --> 00:04:35,690
make it actually work then you need to

00:04:34,970 --> 00:04:38,590
quote that

00:04:35,690 --> 00:04:41,480
swing eventually into a command top exe

00:04:38,590 --> 00:04:43,280
command stream because that's what

00:04:41,480 --> 00:04:45,500
Windows actually uses underneath the

00:04:43,280 --> 00:04:47,000
hood and then include all the magical

00:04:45,500 --> 00:04:50,540
coding which is more difficult than you

00:04:47,000 --> 00:04:52,160
would think they if you're using a ninja

00:04:50,540 --> 00:04:55,250
to invoke your processes you need to

00:04:52,160 --> 00:04:57,230
ninja quote the coded text and then if

00:04:55,250 --> 00:04:58,880
you are on non Windows platforms you get

00:04:57,230 --> 00:05:01,340
to do shell quoting of the same thing

00:04:58,880 --> 00:05:03,860
which is also an interesting challenge

00:05:01,340 --> 00:05:07,930
and then you get the ninja quotes that

00:05:03,860 --> 00:05:10,910
shell quote but this is in addition

00:05:07,930 --> 00:05:13,010
because on Windows the command line

00:05:10,910 --> 00:05:15,080
argument length is quite small you often

00:05:13,010 --> 00:05:17,900
need to use response files so you need

00:05:15,080 --> 00:05:20,210
to quote the response file that you want

00:05:17,900 --> 00:05:22,190
and you need the content response file

00:05:20,210 --> 00:05:24,980
first needs to go in the ninja file send

00:05:22,190 --> 00:05:27,050
it deport that and then the question is

00:05:24,980 --> 00:05:29,030
how do you quote the contents of the

00:05:27,050 --> 00:05:31,190
response part what should you use well

00:05:29,030 --> 00:05:32,780
the answer is that you can't tell there

00:05:31,190 --> 00:05:35,360
is no standard for that it's just the

00:05:32,780 --> 00:05:36,920
file some tools take their command-line

00:05:35,360 --> 00:05:39,470
arguments a command quoted on the

00:05:36,920 --> 00:05:41,630
command line some takes them shell quote

00:05:39,470 --> 00:05:43,670
it when they have a response file some

00:05:41,630 --> 00:05:45,770
have box in their response file parses

00:05:43,670 --> 00:05:48,830
because there is no standard for this

00:05:45,770 --> 00:05:51,710
and it's like is it working or not well

00:05:48,830 --> 00:05:53,600
you can't tell what you're thinking okay

00:05:51,710 --> 00:05:56,180
so this this is an Academical exercise

00:05:53,600 --> 00:05:58,940
like who would really do these sorts of

00:05:56,180 --> 00:06:01,220
things and lots of people surprisingly

00:05:58,940 --> 00:06:04,460
so here's an example from the old make

00:06:01,220 --> 00:06:05,720
file from gstreamer and has all of the

00:06:04,460 --> 00:06:07,880
wonderful things that you need to pass

00:06:05,720 --> 00:06:10,100
through the shell so there's backslash n

00:06:07,880 --> 00:06:11,780
the perennial favorite and you will also

00:06:10,100 --> 00:06:15,200
note that there is a thing that looks

00:06:11,780 --> 00:06:17,600
like a command response file things

00:06:15,200 --> 00:06:19,669
because that the ATS enum it could be

00:06:17,600 --> 00:06:21,680
interpreted as a response file in the

00:06:19,669 --> 00:06:24,140
middle of your command and their quotes

00:06:21,680 --> 00:06:26,360
that are quoted and all the wonderful

00:06:24,140 --> 00:06:28,010
things that you get from there and these

00:06:26,360 --> 00:06:31,400
are those things then then you get to

00:06:28,010 --> 00:06:33,820
deal with now it could be said that this

00:06:31,400 --> 00:06:36,740
is not fair towards Microsoft because

00:06:33,820 --> 00:06:38,990
it's just peeking on them and this would

00:06:36,740 --> 00:06:40,820
be a completely quite correct criticism

00:06:38,990 --> 00:06:43,700
but this decline this is an example

00:06:40,820 --> 00:06:45,800
every single platform has issues like

00:06:43,700 --> 00:06:48,350
this every single tool set has things

00:06:45,800 --> 00:06:49,380
like this Apple has it Linux has them

00:06:48,350 --> 00:06:52,410
BSD has

00:06:49,380 --> 00:06:54,270
Android has them I assassin and Linux

00:06:52,410 --> 00:06:55,710
even has many of them because every

00:06:54,270 --> 00:06:58,890
single distribution have their own very

00:06:55,710 --> 00:07:00,570
special thing that they do and and so

00:06:58,890 --> 00:07:02,070
these are the kinds of things that you

00:07:00,570 --> 00:07:04,980
need to deal with on a daily basis and

00:07:02,070 --> 00:07:06,390
most people don't have to do this so

00:07:04,980 --> 00:07:09,450
it's it's really difficult like they

00:07:06,390 --> 00:07:11,430
have no usually a concept of how just

00:07:09,450 --> 00:07:16,560
how difficult things that seem simple

00:07:11,430 --> 00:07:17,220
actually are but let's take a little

00:07:16,560 --> 00:07:20,130
different story

00:07:17,220 --> 00:07:22,860
so I think this was in the bingo list

00:07:20,130 --> 00:07:25,350
that was in postal at some points like

00:07:22,860 --> 00:07:28,350
and language s has thing why don't we

00:07:25,350 --> 00:07:30,870
have that and this is a thing that's

00:07:28,350 --> 00:07:33,420
common read it and it could be said that

00:07:30,870 --> 00:07:35,490
our KC boss boss has slow legacy is lots

00:07:33,420 --> 00:07:37,890
of thing that and we can't chase and so

00:07:35,490 --> 00:07:40,710
on um but there's actually something a

00:07:37,890 --> 00:07:43,230
bit deeper than that because if you look

00:07:40,710 --> 00:07:45,870
at C secret sauce and especially see

00:07:43,230 --> 00:07:47,970
that they're very special because

00:07:45,870 --> 00:07:51,030
they're used to implement the very

00:07:47,970 --> 00:07:53,100
lowest levels of all stacks and if you

00:07:51,030 --> 00:07:55,050
have a build system where you want to

00:07:53,100 --> 00:07:56,760
support that and you need to be able to

00:07:55,050 --> 00:07:59,540
support all the special things that

00:07:56,760 --> 00:08:03,210
happen when you go really really deep

00:07:59,540 --> 00:08:06,180
and all this is actually divided into

00:08:03,210 --> 00:08:08,730
categories so there's the so called app

00:08:06,180 --> 00:08:11,280
build systems and there's core build

00:08:08,730 --> 00:08:13,740
systems and the for building end user

00:08:11,280 --> 00:08:15,870
software you have the Apple system and

00:08:13,740 --> 00:08:18,060
these are the almost everything so all

00:08:15,870 --> 00:08:20,430
of the build systems people say yeah

00:08:18,060 --> 00:08:22,350
that's really great they're usually our

00:08:20,430 --> 00:08:24,120
almost without exception they are app

00:08:22,350 --> 00:08:28,250
build systems and they care about

00:08:24,120 --> 00:08:31,620
producing end-user runnable programs and

00:08:28,250 --> 00:08:33,690
and for core build system there are

00:08:31,620 --> 00:08:36,080
really only four systems that are used

00:08:33,690 --> 00:08:39,840
there so there's hundreds and make files

00:08:36,080 --> 00:08:41,310
good new Auto tools and then see Megan

00:08:39,840 --> 00:08:44,150
Mason are also used there but they're

00:08:41,310 --> 00:08:47,340
rip they're like very small minority and

00:08:44,150 --> 00:08:49,110
they're very interesting limitations and

00:08:47,340 --> 00:08:52,560
things that you have to do when you go

00:08:49,110 --> 00:08:54,600
down there the most extreme of them to

00:08:52,560 --> 00:08:57,740
pick an example is when you need to

00:08:54,600 --> 00:09:00,270
bootstrap a new platform so new CPU a

00:08:57,740 --> 00:09:02,430
new thing that hasn't had any sort of

00:09:00,270 --> 00:09:03,120
operating system before then you want to

00:09:02,430 --> 00:09:05,580
do that or

00:09:03,120 --> 00:09:07,920
you want to build your entire operating

00:09:05,580 --> 00:09:11,040
system from scratch for various reasons

00:09:07,920 --> 00:09:14,190
which we'll go into later so the way

00:09:11,040 --> 00:09:16,589
this works for Debian and for most other

00:09:14,190 --> 00:09:18,210
things is that first you cross compile a

00:09:16,589 --> 00:09:20,339
very minimal set of tools you get a

00:09:18,210 --> 00:09:22,770
minimal install so you have the shell

00:09:20,339 --> 00:09:26,300
you have two compiler the support

00:09:22,770 --> 00:09:29,100
libraries make maybe something else and

00:09:26,300 --> 00:09:31,680
then and this is the the important one

00:09:29,100 --> 00:09:34,589
become self hosting as soon as possible

00:09:31,680 --> 00:09:37,380
and then you compile everything else

00:09:34,589 --> 00:09:38,550
from there using that build the the core

00:09:37,380 --> 00:09:40,710
system that you have

00:09:38,550 --> 00:09:42,720
now the other approach that you could

00:09:40,710 --> 00:09:44,820
use in this case is that you just cross

00:09:42,720 --> 00:09:46,080
compile everything and you don't have to

00:09:44,820 --> 00:09:49,740
deal with this and then everything works

00:09:46,080 --> 00:09:51,660
but there are actually it's very

00:09:49,740 --> 00:09:54,060
important for philosophical reasons like

00:09:51,660 --> 00:09:56,400
being able to build your entire thing

00:09:54,060 --> 00:09:58,260
from scratch is important and there are

00:09:56,400 --> 00:10:01,380
actually legal reasons for this and and

00:09:58,260 --> 00:10:02,970
if you if you read the try the trusting

00:10:01,380 --> 00:10:04,380
trust paper you will know that there are

00:10:02,970 --> 00:10:06,210
reasons why you would want to build

00:10:04,380 --> 00:10:08,310
everything from scratch using the tools

00:10:06,210 --> 00:10:11,760
you control from one CPU architecture to

00:10:08,310 --> 00:10:13,589
another the most recently this has

00:10:11,760 --> 00:10:17,779
happened with the RISC 5 processor and

00:10:13,589 --> 00:10:20,880
this work is actually still ongoing and

00:10:17,779 --> 00:10:23,160
the extra limitation that they get from

00:10:20,880 --> 00:10:25,260
this then is that if you are a piece

00:10:23,160 --> 00:10:27,839
foundational code or very close to the

00:10:25,260 --> 00:10:30,839
bottom layers you cannot use a build

00:10:27,839 --> 00:10:34,020
system that requires java plus haskell

00:10:30,839 --> 00:10:35,550
or even 7c4 4:17 that's too new maybe in

00:10:34,020 --> 00:10:37,980
a few years people Constantine would be

00:10:35,550 --> 00:10:40,860
accepted there Mezen is implemented in

00:10:37,980 --> 00:10:42,959
Python this was already a bit stretching

00:10:40,860 --> 00:10:44,580
it the the people who did the porting

00:10:42,959 --> 00:10:47,790
we're a bit grumpy about it but like

00:10:44,580 --> 00:10:49,500
they accepted it it was fine and the

00:10:47,790 --> 00:10:51,420
important thing to note here is that it

00:10:49,500 --> 00:10:52,620
doesn't matter how good your build

00:10:51,420 --> 00:10:54,900
system is it doesn't matter how

00:10:52,620 --> 00:10:57,150
wonderful is on what things that does is

00:10:54,900 --> 00:10:59,370
that if it doesn't support this sort of

00:10:57,150 --> 00:11:00,810
thing then the lowest layers of the

00:10:59,370 --> 00:11:02,790
stack the people running those things

00:11:00,810 --> 00:11:05,010
and maintaining them they will not

00:11:02,790 --> 00:11:06,750
accept it they know we cannot use this

00:11:05,010 --> 00:11:10,890
because this plays too big of a burden

00:11:06,750 --> 00:11:13,650
for boot serving purposes and also this

00:11:10,890 --> 00:11:16,000
is the the lenient version of lesson so

00:11:13,650 --> 00:11:17,949
you can accept Python

00:11:16,000 --> 00:11:20,529
I heard this comment from a bsd

00:11:17,949 --> 00:11:22,449
developer and he told me that we can't

00:11:20,529 --> 00:11:25,060
use they thought they'd had used mason

00:11:22,449 --> 00:11:29,079
in their core until its reimplemented in

00:11:25,060 --> 00:11:30,819
either C or Perl and at this point I

00:11:29,079 --> 00:11:32,920
would like to quote meatloaf and say

00:11:30,819 --> 00:11:37,480
that I would do everything for the users

00:11:32,920 --> 00:11:40,209
of my software but I won't do that so

00:11:37,480 --> 00:11:45,370
this is a thing which is it's quite

00:11:40,209 --> 00:11:47,110
important and onwards so so guess this

00:11:45,370 --> 00:11:49,839
is what most of you came here to see so

00:11:47,110 --> 00:11:52,480
how do you optimize build space and this

00:11:49,839 --> 00:11:54,610
is an important thing and it's there's

00:11:52,480 --> 00:11:57,550
been surprisingly little research going

00:11:54,610 --> 00:11:59,410
on on how this should be done but there

00:11:57,550 --> 00:12:01,300
are things that we can do and one of the

00:11:59,410 --> 00:12:03,189
main things is that you can use shared

00:12:01,300 --> 00:12:05,199
libraries and shared libraries are

00:12:03,189 --> 00:12:07,209
totally awesome and and before people

00:12:05,199 --> 00:12:09,639
come at me with with pitchforks and

00:12:07,209 --> 00:12:12,129
things even if you eventually ship your

00:12:09,639 --> 00:12:14,079
application in a study place single

00:12:12,129 --> 00:12:15,550
statically linked blob shared libraries

00:12:14,079 --> 00:12:18,970
are still totally awesome for the

00:12:15,550 --> 00:12:21,250
development cycle and and the reason for

00:12:18,970 --> 00:12:22,660
this is that shared linking is faster

00:12:21,250 --> 00:12:24,910
than static linking because there's less

00:12:22,660 --> 00:12:28,420
work to do and it's done is in sequences

00:12:24,910 --> 00:12:32,199
but also it can make sound linking steps

00:12:28,420 --> 00:12:36,699
completely disappear and how does that

00:12:32,199 --> 00:12:39,040
work well to understand for this

00:12:36,699 --> 00:12:41,230
purposes the shared library is for

00:12:39,040 --> 00:12:43,449
specified by the list of symbols that we

00:12:41,230 --> 00:12:44,860
exports the contents don't matter but

00:12:43,449 --> 00:12:47,199
for the purpose of linking this is what

00:12:44,860 --> 00:12:49,449
matters so what you can do and this

00:12:47,199 --> 00:12:53,500
algorithm is originally from chromium

00:12:49,449 --> 00:12:55,990
observe and as far as I can tell if

00:12:53,500 --> 00:12:58,540
someone knows an earlier case please let

00:12:55,990 --> 00:13:02,050
me know so what you do is that you first

00:12:58,540 --> 00:13:04,149
you build your entire project and then

00:13:02,050 --> 00:13:05,740
you extract from each library the list

00:13:04,149 --> 00:13:07,990
of symbols that it exports you put in

00:13:05,740 --> 00:13:10,870
the file somewhere and then when you do

00:13:07,990 --> 00:13:14,290
an incremental build you extract the

00:13:10,870 --> 00:13:16,420
list of symbols again and if it doesn't

00:13:14,290 --> 00:13:19,120
change if the list of symbols is the

00:13:16,420 --> 00:13:21,519
same you don't have to go any further if

00:13:19,120 --> 00:13:23,559
all things that link against this thing

00:13:21,519 --> 00:13:25,120
continue working you don't have to do

00:13:23,559 --> 00:13:26,620
any sort of real linking and then just

00:13:25,120 --> 00:13:29,770
go define and if you have something like

00:13:26,620 --> 00:13:34,960
you have a library and then you have

00:13:29,770 --> 00:13:36,580
fifteen test executables sorry then you

00:13:34,960 --> 00:13:38,500
just build the library and you don't

00:13:36,580 --> 00:13:40,320
have to relink all of the executables

00:13:38,500 --> 00:13:42,970
and this is kind of nice

00:13:40,320 --> 00:13:44,830
there are some practical problems but

00:13:42,970 --> 00:13:49,840
but pretty much this is how it goes and

00:13:44,830 --> 00:13:52,390
and and is that if you do implementation

00:13:49,840 --> 00:13:54,790
only changes in your libraries it's an O

00:13:52,390 --> 00:13:56,980
one operation one compile one link as

00:13:54,790 --> 00:14:05,290
opposed to o n where you relink the

00:13:56,980 --> 00:14:07,360
world right and so some people might say

00:14:05,290 --> 00:14:09,520
okay but we have build clusters we have

00:14:07,360 --> 00:14:10,930
infinite amount of compute power then we

00:14:09,520 --> 00:14:12,880
don't need to do this we can just do

00:14:10,930 --> 00:14:15,760
that well this is not actually true

00:14:12,880 --> 00:14:17,800
because a build cluster is a throughput

00:14:15,760 --> 00:14:19,900
optimization this is a latency

00:14:17,800 --> 00:14:22,360
optimization and you can't optimize

00:14:19,900 --> 00:14:24,310
latency by adding more computers to it

00:14:22,360 --> 00:14:30,010
so it's kind of nice it's useful usable

00:14:24,310 --> 00:14:32,200
even in indeed these kind of contexts so

00:14:30,010 --> 00:14:35,020
as a third kind of thing which we can

00:14:32,200 --> 00:14:38,140
talk about is a design so how do you

00:14:35,020 --> 00:14:41,350
design a build system and perhaps the

00:14:38,140 --> 00:14:43,510
biggest thing okay so in my mind a build

00:14:41,350 --> 00:14:45,190
system is how you describe your build

00:14:43,510 --> 00:14:47,560
everything below that is an

00:14:45,190 --> 00:14:50,380
implementation detail and the most

00:14:47,560 --> 00:14:52,930
important design goal in this kind of

00:14:50,380 --> 00:14:55,570
thing is that do you do a Turing

00:14:52,930 --> 00:14:57,520
complete language or don't you and lots

00:14:55,570 --> 00:15:00,100
of people say oh I have special needs I

00:14:57,520 --> 00:15:02,350
must have this so let's look at some

00:15:00,100 --> 00:15:03,880
requirements before that there's a lot

00:15:02,350 --> 00:15:05,500
of programmers says that the problem of

00:15:03,880 --> 00:15:07,360
programmers is that if you give them a

00:15:05,500 --> 00:15:10,390
chance they will start programming and

00:15:07,360 --> 00:15:12,190
there's a color to that which is that

00:15:10,390 --> 00:15:13,840
there's no limit to the amount of work a

00:15:12,190 --> 00:15:17,440
program is willing to do to not read

00:15:13,840 --> 00:15:19,450
documentation so programmers are there

00:15:17,440 --> 00:15:22,870
like problem solving machines Oh problem

00:15:19,450 --> 00:15:24,850
algorithm cause all that and even though

00:15:22,870 --> 00:15:27,220
it's it wouldn't be necessary to

00:15:24,850 --> 00:15:29,280
actually solve this and so what does

00:15:27,220 --> 00:15:31,330
this lead into so if you have a

00:15:29,280 --> 00:15:34,120
something like a turing-complete thing

00:15:31,330 --> 00:15:36,400
you have something like this which is

00:15:34,120 --> 00:15:38,800
just say exceedingly scientific thing

00:15:36,400 --> 00:15:41,080
which is a graph whose axis don't have

00:15:38,800 --> 00:15:43,139
unis so you can tell it's scientific but

00:15:41,080 --> 00:15:45,569
oh and the bottom said how much work

00:15:43,139 --> 00:15:48,600
have you put in on improving your thing

00:15:45,569 --> 00:15:51,470
and then of y-axis you have how good the

00:15:48,600 --> 00:15:53,609
thing is and if you have a

00:15:51,470 --> 00:15:55,889
turing-complete thing it's it's very

00:15:53,609 --> 00:15:57,509
easy to get started if you have anything

00:15:55,889 --> 00:15:59,399
you don't need you can you don't have

00:15:57,509 --> 00:16:00,899
you could just type it yourself and you

00:15:59,399 --> 00:16:02,609
get your things going but think what

00:16:00,899 --> 00:16:04,980
happens is that then it slows down and

00:16:02,609 --> 00:16:07,589
you get into this area here which is

00:16:04,980 --> 00:16:09,449
called the Turing tarpit which is a

00:16:07,589 --> 00:16:13,139
place where everything is possible but

00:16:09,449 --> 00:16:16,559
nothing is easy I seen nothing yet yeah

00:16:13,139 --> 00:16:19,350
you've been there an alternative

00:16:16,559 --> 00:16:20,970
approach for this is that if you have a

00:16:19,350 --> 00:16:22,699
non Turing complete thing where you have

00:16:20,970 --> 00:16:25,709
you can only do certain specific things

00:16:22,699 --> 00:16:27,689
then it's it's a slow start you have to

00:16:25,709 --> 00:16:29,579
learn the thing maybe it doesn't do what

00:16:27,689 --> 00:16:30,869
you need to do you need to do like suit

00:16:29,579 --> 00:16:33,949
me change this upstream and all that

00:16:30,869 --> 00:16:36,720
sort of stuff but once you get going

00:16:33,949 --> 00:16:38,040
then you can take different pieces and

00:16:36,720 --> 00:16:41,999
put them together and they work really

00:16:38,040 --> 00:16:45,179
well and and the place where the the

00:16:41,999 --> 00:16:46,829
lines meet it could be called place

00:16:45,179 --> 00:16:48,749
where you need to start cooperating with

00:16:46,829 --> 00:16:50,730
other people it's like if you do your

00:16:48,749 --> 00:16:53,100
own thing and you write your own bespoke

00:16:50,730 --> 00:16:55,379
thing it works and you not understand it

00:16:53,100 --> 00:16:57,119
and everything is fine but software

00:16:55,379 --> 00:16:58,529
development is a team effort you need to

00:16:57,119 --> 00:17:01,230
be able to work with other people and

00:16:58,529 --> 00:17:04,220
this is where the benefits of having a

00:17:01,230 --> 00:17:07,740
unified system really start to kick in

00:17:04,220 --> 00:17:08,760
but some people say well ok maybe you

00:17:07,740 --> 00:17:10,380
could do it but couldn't you add just

00:17:08,760 --> 00:17:12,870
like a little bit of functions there so

00:17:10,380 --> 00:17:14,850
you could do this sort of thing and the

00:17:12,870 --> 00:17:17,669
answer we always give to this is no and

00:17:14,850 --> 00:17:19,649
the reason is that you can't be just a

00:17:17,669 --> 00:17:21,990
little bit pregnant and you can't be

00:17:19,649 --> 00:17:24,449
just a little bit cheering complete if

00:17:21,990 --> 00:17:26,399
it's possible to do something even if it

00:17:24,449 --> 00:17:29,399
is three complete the summer someone

00:17:26,399 --> 00:17:31,590
will do it no matter how difficult it is

00:17:29,399 --> 00:17:33,299
people will go ahead and do it and there

00:17:31,590 --> 00:17:38,580
are some people who will view this as a

00:17:33,299 --> 00:17:42,210
badge of merit ok so the last story I

00:17:38,580 --> 00:17:44,399
would like to talk about is a dependency

00:17:42,210 --> 00:17:48,649
management and this is a really second

00:17:44,399 --> 00:17:48,649
most important thing probably what see

00:17:48,830 --> 00:17:53,940
so how do you make dependency management

00:17:51,690 --> 00:17:55,830
smooth and scalable for big things

00:17:53,940 --> 00:17:56,880
because if you have on a few few

00:17:55,830 --> 00:18:00,450
libraries then some

00:17:56,880 --> 00:18:01,830
such a problem well let's look at what

00:18:00,450 --> 00:18:04,140
what are the things that have worked

00:18:01,830 --> 00:18:06,780
thus far what are the things that have

00:18:04,140 --> 00:18:08,700
been used and have proven that with this

00:18:06,780 --> 00:18:10,800
sort of mechanism you can build

00:18:08,700 --> 00:18:13,620
something huge like a Chrome or

00:18:10,800 --> 00:18:17,670
something even bigger than that and now

00:18:13,620 --> 00:18:19,380
really only two two things so the pest

00:18:17,670 --> 00:18:21,630
is the classical UNIX model you install

00:18:19,380 --> 00:18:23,370
everything into a common prefix and you

00:18:21,630 --> 00:18:24,900
have package config or something similar

00:18:23,370 --> 00:18:27,060
which provides all the dependency

00:18:24,900 --> 00:18:29,370
information and then you use the system

00:18:27,060 --> 00:18:33,720
dependencies to build your thing and and

00:18:29,370 --> 00:18:35,610
this works amazingly well the second

00:18:33,720 --> 00:18:38,040
approach is that you have a single build

00:18:35,610 --> 00:18:40,260
system a single repository all of them

00:18:38,040 --> 00:18:43,500
in one one place in one go and then you

00:18:40,260 --> 00:18:45,180
build from there and this is what what

00:18:43,500 --> 00:18:49,650
the firefox and chrome and all these

00:18:45,180 --> 00:18:52,500
developers are using nothing else has

00:18:49,650 --> 00:18:53,790
been proven to work as far as I can tell

00:18:52,500 --> 00:18:56,310
if there's an any sort of mixture of

00:18:53,790 --> 00:18:58,620
these things it really doesn't work and

00:18:56,310 --> 00:19:02,070
easily the burliest is not very pleasant

00:18:58,620 --> 00:19:04,320
to use this very specific case is that

00:19:02,070 --> 00:19:06,060
using two different build systems in a

00:19:04,320 --> 00:19:08,670
single directory where one calls the

00:19:06,060 --> 00:19:10,680
other does not work and it cannot be

00:19:08,670 --> 00:19:12,290
made to Work and but there are people

00:19:10,680 --> 00:19:14,850
who really want this to be possible

00:19:12,290 --> 00:19:16,940
sadly it's not this is an entire hour's

00:19:14,850 --> 00:19:19,200
talk so you'll just have to believe me

00:19:16,940 --> 00:19:22,470
or maybe come next year if I'll get

00:19:19,200 --> 00:19:25,860
accepted to have that talk but these

00:19:22,470 --> 00:19:27,390
things have also other problems for the

00:19:25,860 --> 00:19:29,220
approach number one is that if you have

00:19:27,390 --> 00:19:31,140
he won't have multiple versions of any

00:19:29,220 --> 00:19:32,460
dependency then this is a problem

00:19:31,140 --> 00:19:34,380
because they're in the same file system

00:19:32,460 --> 00:19:38,970
and eventually you will get them mixed

00:19:34,380 --> 00:19:42,000
up and for approach number two instantly

00:19:38,970 --> 00:19:43,470
in order to have that globally the

00:19:42,000 --> 00:19:45,300
entire world would need to standardize

00:19:43,470 --> 00:19:48,240
on a single build system now we all know

00:19:45,300 --> 00:19:49,470
what this will be right but there are

00:19:48,240 --> 00:19:52,710
some stragglers out there who want to

00:19:49,470 --> 00:19:53,970
use something else so there so in

00:19:52,710 --> 00:19:58,040
reality what will happen is that

00:19:53,970 --> 00:20:01,020
everything will be awful forever right

00:19:58,040 --> 00:20:03,570
so let's think about this a bit further

00:20:01,020 --> 00:20:05,820
let's go back so the problem with the

00:20:03,570 --> 00:20:07,200
approach number one was that if you have

00:20:05,820 --> 00:20:09,809
multiple versions on the same file

00:20:07,200 --> 00:20:12,229
system then you get problems

00:20:09,809 --> 00:20:14,820
the obvious follow-up question then is

00:20:12,229 --> 00:20:18,929
what if they weren't on the same file

00:20:14,820 --> 00:20:21,330
system so is there mechanism that we can

00:20:18,929 --> 00:20:24,269
use to isolate file system parts from

00:20:21,330 --> 00:20:25,889
one another and turns out this is not

00:20:24,269 --> 00:20:28,739
possible this is thing called file

00:20:25,889 --> 00:20:32,219
system namespaces which is available on

00:20:28,739 --> 00:20:33,989
Linux for several years now I'm sure

00:20:32,219 --> 00:20:36,749
about a lot of the kernels of of of

00:20:33,989 --> 00:20:39,269
other operating systems are using Linux

00:20:36,749 --> 00:20:41,190
at least this works pretty well and so

00:20:39,269 --> 00:20:42,989
okay we could separate these different

00:20:41,190 --> 00:20:45,799
parts of the thing from one another and

00:20:42,989 --> 00:20:48,029
run things from different places and

00:20:45,799 --> 00:20:49,859
again some people would probably say hey

00:20:48,029 --> 00:20:52,669
ah this is docker is talking about

00:20:49,859 --> 00:20:56,999
docker yes docker will saw everything

00:20:52,669 --> 00:20:59,940
No so the elementary operations that

00:20:56,999 --> 00:21:02,070
docker is using they're very good and we

00:20:59,940 --> 00:21:04,830
can use those things to do some things

00:21:02,070 --> 00:21:07,830
like the different and one of the things

00:21:04,830 --> 00:21:09,899
that we can do and people have been

00:21:07,830 --> 00:21:13,169
doing is it's a thing called flat pack

00:21:09,899 --> 00:21:15,179
and there's a very simple and slightly

00:21:13,169 --> 00:21:18,299
incorrect description of what flat pack

00:21:15,179 --> 00:21:20,429
dance is that you it gives you a root

00:21:18,299 --> 00:21:22,710
filesystem where you install all of your

00:21:20,429 --> 00:21:25,259
dependencies and when you run the

00:21:22,710 --> 00:21:27,690
application it looks to the application

00:21:25,259 --> 00:21:30,349
as if it's given an entire operating

00:21:27,690 --> 00:21:33,330
system file system image just for itself

00:21:30,349 --> 00:21:35,429
but you can make the user's home

00:21:33,330 --> 00:21:37,320
directory appear inside of this thing

00:21:35,429 --> 00:21:39,359
and then you can run it and it will is

00:21:37,320 --> 00:21:42,179
transparent and you can access all same

00:21:39,359 --> 00:21:44,009
files that you could otherwise and you

00:21:42,179 --> 00:21:46,229
can't tell the difference between

00:21:44,009 --> 00:21:49,589
running or a native application and the

00:21:46,229 --> 00:21:52,649
flat fact application and then if you do

00:21:49,589 --> 00:21:54,989
some tooling so there's no builder it's

00:21:52,649 --> 00:21:59,099
the first container native IDE

00:21:54,989 --> 00:22:01,649
that's there no Makassar and the idea is

00:21:59,099 --> 00:22:04,320
that instead of having containers

00:22:01,649 --> 00:22:05,309
something that you can use during

00:22:04,320 --> 00:22:07,409
deployment or something

00:22:05,309 --> 00:22:09,719
let's take them and exploit them to the

00:22:07,409 --> 00:22:13,080
max and this allows you to do things

00:22:09,719 --> 00:22:16,109
like this so here we have an normal

00:22:13,080 --> 00:22:19,409
Linux operating system install and there

00:22:16,109 --> 00:22:21,960
at the top I've installed flat pack and

00:22:19,409 --> 00:22:23,090
no builder a release version from hot

00:22:21,960 --> 00:22:25,850
pack and then

00:22:23,090 --> 00:22:29,120
used flat-packed no builder to check out

00:22:25,850 --> 00:22:31,430
its own source from repeat master build

00:22:29,120 --> 00:22:35,330
that and then launch that in a debugger

00:22:31,430 --> 00:22:37,640
so we have the release version and the

00:22:35,330 --> 00:22:41,300
git version running at the same time on

00:22:37,640 --> 00:22:43,280
the same user session and there they

00:22:41,300 --> 00:22:45,410
have different dependency versions and

00:22:43,280 --> 00:22:47,300
they're separated by the kernel and

00:22:45,410 --> 00:22:49,100
things just work and if you wanted to

00:22:47,300 --> 00:22:51,230
you could do a third one and then fourth

00:22:49,100 --> 00:22:54,110
one and the fifth one if you it's that

00:22:51,230 --> 00:22:56,270
sort of things appeals to you so you can

00:22:54,110 --> 00:22:58,370
do all sorts of cool things and the best

00:22:56,270 --> 00:23:00,710
part about this is that you can do all

00:22:58,370 --> 00:23:02,230
of this without using the command line

00:23:00,710 --> 00:23:08,180
even once

00:23:02,230 --> 00:23:09,370
on Linux I kid you not and it gets

00:23:08,180 --> 00:23:11,360
better

00:23:09,370 --> 00:23:13,400
Manifest well this is roughly what it

00:23:11,360 --> 00:23:15,410
looks like you say that okay I have a

00:23:13,400 --> 00:23:17,270
basic one time and then extra

00:23:15,410 --> 00:23:19,760
dependencies that you need and they is

00:23:17,270 --> 00:23:23,600
there installed in the standard UNIX

00:23:19,760 --> 00:23:25,250
build way and then you get this thing

00:23:23,600 --> 00:23:27,920
and then you install your own software

00:23:25,250 --> 00:23:30,290
on top of that so is your computer

00:23:27,920 --> 00:23:33,230
science sense tingling now because it

00:23:30,290 --> 00:23:35,270
should this is fully deterministic and

00:23:33,230 --> 00:23:38,360
this is fully cashable just just this

00:23:35,270 --> 00:23:40,850
file completely uniquely identifies the

00:23:38,360 --> 00:23:42,980
image so if you have a cloud build

00:23:40,850 --> 00:23:44,840
environment you can pre build this image

00:23:42,980 --> 00:23:47,270
with all of your dependencies that you

00:23:44,840 --> 00:23:49,310
would ever need put it there and then

00:23:47,270 --> 00:23:54,770
have people to develop on that and they

00:23:49,310 --> 00:23:57,860
only have to compile their own code and

00:23:54,770 --> 00:24:00,320
it works just as if you had installed

00:23:57,860 --> 00:24:01,850
all the things in their system except

00:24:00,320 --> 00:24:05,840
that it's fully isolated for everything

00:24:01,850 --> 00:24:08,330
else and there's other good news so if

00:24:05,840 --> 00:24:11,450
you have a reliable distributed file

00:24:08,330 --> 00:24:14,690
system for the record not NFS I try that

00:24:11,450 --> 00:24:17,240
in test work then it's it's trivial to

00:24:14,690 --> 00:24:19,280
paralyze your build because in a

00:24:17,240 --> 00:24:21,110
traditional way you can't just send your

00:24:19,280 --> 00:24:23,330
executables out to be run somewhere else

00:24:21,110 --> 00:24:24,500
because the the things that are

00:24:23,330 --> 00:24:26,750
installed on that machine will be

00:24:24,500 --> 00:24:29,240
completely different but if you have a

00:24:26,750 --> 00:24:31,100
standardized image and you have the same

00:24:29,240 --> 00:24:34,880
file system which is visible on all of

00:24:31,100 --> 00:24:36,890
them then it's tribute you can run all

00:24:34,880 --> 00:24:39,500
of your compiles on any

00:24:36,890 --> 00:24:41,090
if you want you can run your links you

00:24:39,500 --> 00:24:44,050
can run your tests you can run any

00:24:41,090 --> 00:24:46,160
executable that you want assuming that

00:24:44,050 --> 00:24:49,010
the build system takes care that you

00:24:46,160 --> 00:24:50,360
don't want things so that's the things

00:24:49,010 --> 00:24:55,130
that depend on each other are running at

00:24:50,360 --> 00:24:57,680
the same time this is the fourth story

00:24:55,130 --> 00:25:03,170
that I have so let's see if you can

00:24:57,680 --> 00:25:05,930
bring all this together and answer the

00:25:03,170 --> 00:25:08,090
question which is is the perennial

00:25:05,930 --> 00:25:14,900
question is why have build systems being

00:25:08,090 --> 00:25:18,880
so terrible um yeah so let's let's let's

00:25:14,900 --> 00:25:21,500
good for different things so they

00:25:18,880 --> 00:25:26,060
service a lot of problems that are there

00:25:21,500 --> 00:25:27,950
in the underlying systems they have to

00:25:26,060 --> 00:25:29,960
solve problems so they specifically

00:25:27,950 --> 00:25:33,620
build systems for sasebo's plus and

00:25:29,960 --> 00:25:36,080
other low level Primus is that they have

00:25:33,620 --> 00:25:38,600
to solve problems that other languages

00:25:36,080 --> 00:25:41,540
don't have and that and other languages

00:25:38,600 --> 00:25:45,080
are not solving and in order to make a

00:25:41,540 --> 00:25:47,600
C++ build system that is generally

00:25:45,080 --> 00:25:49,100
accepted it has to do this but for other

00:25:47,600 --> 00:25:53,450
languages they don't really have to do

00:25:49,100 --> 00:25:55,670
that they can't use functionality that

00:25:53,450 --> 00:25:57,680
other languages other languages have you

00:25:55,670 --> 00:25:59,210
have to be very constrained if you want

00:25:57,680 --> 00:26:01,960
to be able to support things like boost

00:25:59,210 --> 00:26:01,960
typing and so on

00:26:02,930 --> 00:26:05,870
there have been they have not

00:26:04,670 --> 00:26:08,390
traditionally been subject to

00:26:05,870 --> 00:26:11,300
optimization and and I suspect this

00:26:08,390 --> 00:26:14,240
still some performance on the floor

00:26:11,300 --> 00:26:16,820
which you could use to to make those

00:26:14,240 --> 00:26:20,770
faster but traditionally this is not an

00:26:16,820 --> 00:26:24,500
area where people have worked and

00:26:20,770 --> 00:26:26,060
there's a short term thinking driving

00:26:24,500 --> 00:26:28,730
people to cheering topics because

00:26:26,060 --> 00:26:31,510
usually people what they want to do is

00:26:28,730 --> 00:26:34,220
to get stuff done quickly and this

00:26:31,510 --> 00:26:38,330
selection pressure is towards selecting

00:26:34,220 --> 00:26:40,940
things where you can change things at

00:26:38,330 --> 00:26:42,920
whim rather than those ways where you

00:26:40,940 --> 00:26:46,280
have to do some extra work upfront to

00:26:42,920 --> 00:26:47,750
make things work because build system

00:26:46,280 --> 00:26:49,610
selection is usually not something where

00:26:47,750 --> 00:26:49,860
you spend weeks on it so five I need to

00:26:49,610 --> 00:26:53,600
make

00:26:49,860 --> 00:26:58,790
something happened it's good this and

00:26:53,600 --> 00:27:03,480
perhaps most importantly we found that

00:26:58,790 --> 00:27:05,700
we have like as as a whole we've been

00:27:03,480 --> 00:27:09,450
trying to implement a kernel space

00:27:05,700 --> 00:27:11,309
construct entirely new user space so the

00:27:09,450 --> 00:27:13,140
separation of applications and

00:27:11,309 --> 00:27:16,080
dependencies from each other has been

00:27:13,140 --> 00:27:18,030
done entirely in user space static

00:27:16,080 --> 00:27:20,160
linking is one way that you can do this

00:27:18,030 --> 00:27:21,720
is like let's put all the things here so

00:27:20,160 --> 00:27:25,650
it's separate for everything else

00:27:21,720 --> 00:27:28,500
and as just like you can't implement a

00:27:25,650 --> 00:27:32,730
mutex in user space you can't really do

00:27:28,500 --> 00:27:34,770
a proper dependency separation in user

00:27:32,730 --> 00:27:37,410
space you need to use the kernel flex

00:27:34,770 --> 00:27:39,240
but now we have all the tooling and all

00:27:37,410 --> 00:27:41,660
the pieces to the killer parts and I

00:27:39,240 --> 00:27:43,950
know I think we can solve this

00:27:41,660 --> 00:27:46,440
underlying problem properly and then

00:27:43,950 --> 00:27:48,030
build system will actually become they

00:27:46,440 --> 00:27:51,179
have to do best and it becomes simpler

00:27:48,030 --> 00:27:53,429
and they become usable and as they say

00:27:51,179 --> 00:28:00,750
the rest is implementation thank you

00:27:53,429 --> 00:28:03,120
very much so if you have questions

00:28:00,750 --> 00:28:04,590
please line up at the mic three first

00:28:03,120 --> 00:28:09,140
three people to ask a question will

00:28:04,590 --> 00:28:09,140
receive one of these so we'll be quick

00:28:27,720 --> 00:28:32,070
I have first of all thanks very much for

00:28:30,120 --> 00:28:35,990
the time it was I learned learned really

00:28:32,070 --> 00:28:40,230
a lot I have a question regarding this

00:28:35,990 --> 00:28:41,909
was very interested in this optimizing

00:28:40,230 --> 00:28:43,799
the link step that Mike mentioned that

00:28:41,909 --> 00:28:45,629
was done in chromium right so the

00:28:43,799 --> 00:28:48,570
question is how much of that is possible

00:28:45,629 --> 00:28:51,480
to do in the build system and compare em

00:28:48,570 --> 00:28:53,519
and not in the build system generator so

00:28:51,480 --> 00:28:55,230
is that something that is supported by a

00:28:53,519 --> 00:28:57,139
ninja or is it something that support

00:28:55,230 --> 00:28:59,789
where support comes from Mason

00:28:57,139 --> 00:29:03,059
so ninja it by itself doesn't support

00:28:59,789 --> 00:29:05,700
that so in Metin what we do is that we

00:29:03,059 --> 00:29:07,500
have a rapper script which runs after

00:29:05,700 --> 00:29:09,509
the link and if they extracts the list

00:29:07,500 --> 00:29:11,340
and puts it in a file and then we do

00:29:09,509 --> 00:29:13,500
something ninja magic to have the

00:29:11,340 --> 00:29:23,279
dependency on the actual file and not

00:29:13,500 --> 00:29:25,669
the Esso file that gets cheering you

00:29:23,279 --> 00:29:28,350
elaborate on the issues you had with NFS

00:29:25,669 --> 00:29:33,779
okay so the problem in the past that I

00:29:28,350 --> 00:29:37,080
had was that if you run a compile step

00:29:33,779 --> 00:29:41,009
on one machine and generates an a dog of

00:29:37,080 --> 00:29:42,840
object file and then the it would say we

00:29:41,009 --> 00:29:44,429
do turns there I wrote a blog post about

00:29:42,840 --> 00:29:45,990
it so you can find out details there but

00:29:44,429 --> 00:29:48,389
the point is that when it it comes back

00:29:45,990 --> 00:29:51,179
and then you invoke a linker on

00:29:48,389 --> 00:29:54,450
different machine and even if even if

00:29:51,179 --> 00:29:56,429
you run f sync on the one file on the

00:29:54,450 --> 00:29:58,649
object file is generated when you start

00:29:56,429 --> 00:30:03,230
the link sometimes will say this file

00:29:58,649 --> 00:30:03,230
doesn't exist thanks

00:30:08,400 --> 00:30:15,860
so what was the driving decision behind

00:30:12,570 --> 00:30:18,930
using Python to implement that's on when

00:30:15,860 --> 00:30:20,360
bootstrapping in you know that kind of

00:30:18,930 --> 00:30:24,540
cross compatibility was a huge concern

00:30:20,360 --> 00:30:27,300
but so python is extremely exceed

00:30:24,540 --> 00:30:28,980
extremely cross-platform it makes what

00:30:27,300 --> 00:30:31,500
are things which are really difficult go

00:30:28,980 --> 00:30:33,270
away and python is also a very

00:30:31,500 --> 00:30:39,360
productive language especially for these

00:30:33,270 --> 00:30:41,160
in the first beginning stages it was

00:30:39,360 --> 00:30:44,970
mostly because that's what I knew the

00:30:41,160 --> 00:30:49,800
best I knew from the beginning that this

00:30:44,970 --> 00:30:52,950
might be like a it might an issue but

00:30:49,800 --> 00:30:55,110
what I'm hoping for instant Perl will

00:30:52,950 --> 00:30:57,540
eventually die and and people will

00:30:55,110 --> 00:31:03,080
accept that Python it one and then this

00:30:57,540 --> 00:31:03,080
will stop being in a ship Thanks

00:31:07,220 --> 00:31:12,570
okay I kind of noticed that you

00:31:09,950 --> 00:31:14,610
advertise the Kanaan builder don't use

00:31:12,570 --> 00:31:17,430
it yourself as first time someone it's

00:31:14,610 --> 00:31:20,220
actually locating that oh so I've only

00:31:17,430 --> 00:31:24,300
used it so I'm I'm a bit eccentric I use

00:31:20,220 --> 00:31:26,850
Eclipse and I like using eclipse so and

00:31:24,300 --> 00:31:29,400
the reason I use Eclipse is because it

00:31:26,850 --> 00:31:30,570
has all the languages at once and it's

00:31:29,400 --> 00:31:32,670
like if you need to swap between

00:31:30,570 --> 00:31:34,830
languages it works really nicely for

00:31:32,670 --> 00:31:36,870
that but I've been looking into using

00:31:34,830 --> 00:31:38,970
all these different sorts of IDs every

00:31:36,870 --> 00:31:42,390
now and then I'll probably have a better

00:31:38,970 --> 00:31:44,490
look at no builder soon okay so I was

00:31:42,390 --> 00:31:47,610
told that we can go into a few over time

00:31:44,490 --> 00:31:49,200
so go ahead can you give example for

00:31:47,610 --> 00:31:51,050
features that are turing-complete there

00:31:49,200 --> 00:31:55,590
and non turing-complete

00:31:51,050 --> 00:31:59,310
system so in methane or in something

00:31:55,590 --> 00:32:01,800
else so in in general if you can express

00:31:59,310 --> 00:32:04,400
an arbitrary calculation it's too

00:32:01,800 --> 00:32:07,320
incomplete if it's possible to write an

00:32:04,400 --> 00:32:09,720
infinite loop then it's to incomplete

00:32:07,320 --> 00:32:12,050
and in messin neither of these are

00:32:09,720 --> 00:32:12,050
possible

00:32:15,409 --> 00:32:22,500
so the slide with the flat-pack

00:32:18,440 --> 00:32:24,779
specification I saw that and I was

00:32:22,500 --> 00:32:29,429
thinking myself this is starting to look

00:32:24,779 --> 00:32:32,340
like a pom.xml from Apache maven are

00:32:29,429 --> 00:32:36,059
there lessons learned from other built

00:32:32,340 --> 00:32:38,399
systems okay so what I recommend that

00:32:36,059 --> 00:32:40,470
you do is that you look up the actual

00:32:38,399 --> 00:32:42,450
manifest file and what the format of

00:32:40,470 --> 00:32:46,289
that is this is just thing that I've

00:32:42,450 --> 00:32:48,830
condensed so it fits in the slide but

00:32:46,289 --> 00:32:52,309
you can do things like you can specify

00:32:48,830 --> 00:32:55,529
compiler flags and you can specify

00:32:52,309 --> 00:32:58,789
patches and so on so I like it so it's a

00:32:55,529 --> 00:33:01,860
very it's a good format for it does and

00:32:58,789 --> 00:33:03,750
one of the nice things is that you don't

00:33:01,860 --> 00:33:05,669
have to rewrite the build system of

00:33:03,750 --> 00:33:07,710
everything that you have just to use it

00:33:05,669 --> 00:33:09,630
you can just use its own thing and it

00:33:07,710 --> 00:33:13,320
will install and then you don't have to

00:33:09,630 --> 00:33:16,320
care about that anymore okay thanks

00:33:13,320 --> 00:33:18,830
okay so if there are no more questions I

00:33:16,320 --> 00:33:24,119
think it's break time

00:33:18,830 --> 00:33:24,119

YouTube URL: https://www.youtube.com/watch?v=34KzT2yvQuM


