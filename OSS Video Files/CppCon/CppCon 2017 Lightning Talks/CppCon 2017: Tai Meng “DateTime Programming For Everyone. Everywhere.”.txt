Title: CppCon 2017: Tai Meng “DateTime Programming For Everyone. Everywhere.”
Publication date: 2017-10-28
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,000 --> 00:00:05,430
all right hi everyone they say that our

00:00:02,850 --> 00:00:10,440
names often dictate the projects we work

00:00:05,430 --> 00:00:14,009
on my name is Tai Ming short for daytime

00:00:10,440 --> 00:00:16,350
programming when we do daytime

00:00:14,009 --> 00:00:18,029
programming we must decide on the

00:00:16,350 --> 00:00:20,150
precision with which to process our

00:00:18,029 --> 00:00:22,380
daytime values for some applications

00:00:20,150 --> 00:00:25,230
second precision is sufficient for

00:00:22,380 --> 00:00:30,210
others milliseconds for our product we

00:00:25,230 --> 00:00:31,410
chose nanoseconds now why is that we

00:00:30,210 --> 00:00:33,480
don't in the business of helping our

00:00:31,410 --> 00:00:36,800
users move their data from point A to

00:00:33,480 --> 00:00:40,040
point B point a often is a database

00:00:36,800 --> 00:00:42,149
sequel server and oracle both support

00:00:40,040 --> 00:00:44,910
daytime precision that's beyond

00:00:42,149 --> 00:00:48,510
microseconds oracle supports nanoseconds

00:00:44,910 --> 00:00:51,199
we aligned with oracle but who has dated

00:00:48,510 --> 00:00:53,460
that precise I give two examples here

00:00:51,199 --> 00:00:55,230
high-volume transactions which we've

00:00:53,460 --> 00:00:58,980
heard a lot about at this conference and

00:00:55,230 --> 00:01:01,770
scientific data time zone conversions

00:00:58,980 --> 00:01:05,939
are becoming a lot more commonplace

00:01:01,770 --> 00:01:09,180
these days and here I give two popular

00:01:05,939 --> 00:01:10,740
examples in the first one we see a

00:01:09,180 --> 00:01:13,950
conversion between UTC offset so only

00:01:10,740 --> 00:01:16,530
this is popular because of ISO 8601 the

00:01:13,950 --> 00:01:19,009
second example goes from UTC time to

00:01:16,530 --> 00:01:21,540
local time and the local keyword here

00:01:19,009 --> 00:01:24,600
invokes the low client a time zone and

00:01:21,540 --> 00:01:25,799
all of its daylight savings rules and if

00:01:24,600 --> 00:01:28,229
you were to look at this slide and say

00:01:25,799 --> 00:01:30,450
to yourself gee this looks easy

00:01:28,229 --> 00:01:34,049
I can't wait to implement times will

00:01:30,450 --> 00:01:36,869
support myself well then I might say

00:01:34,049 --> 00:01:41,159
come on YouTube and search for the words

00:01:36,869 --> 00:01:44,430
time zone madness this really is a

00:01:41,159 --> 00:01:46,280
lovely video by Tom Scott we were sure

00:01:44,430 --> 00:01:49,049
we wanted to use somebody else's library

00:01:46,280 --> 00:01:51,149
we looked at a bunch of them strengths

00:01:49,049 --> 00:01:53,759
weaknesses we had significant

00:01:51,149 --> 00:01:56,219
reservations towards all of them until I

00:01:53,759 --> 00:01:57,930
came to CB peak on last year as Michael

00:01:56,219 --> 00:02:01,380
mentioned and met a gentleman named

00:01:57,930 --> 00:02:03,719
Howard Hinnant when I saw his date and T

00:02:01,380 --> 00:02:04,320
Z libraries I knew that a winner had

00:02:03,719 --> 00:02:06,060
emerged

00:02:04,320 --> 00:02:08,220
I took his libraries back to my company

00:02:06,060 --> 00:02:10,349
into production in just a year's time we

00:02:08,220 --> 00:02:12,420
solved more than 10 years of user

00:02:10,349 --> 00:02:13,390
requests for improved data manipulations

00:02:12,420 --> 00:02:14,830
and he

00:02:13,390 --> 00:02:17,050
are some of the reasons why Howard's

00:02:14,830 --> 00:02:19,030
libraries were so great they've got

00:02:17,050 --> 00:02:22,209
nanosecond support I in a time zone

00:02:19,030 --> 00:02:24,970
support world-class support often Howard

00:02:22,209 --> 00:02:26,380
will respond within just hours and most

00:02:24,970 --> 00:02:29,709
importantly his libraries have been

00:02:26,380 --> 00:02:32,950
proposed for the standard here's how we

00:02:29,709 --> 00:02:35,770
used Howard's libraries we plugged in

00:02:32,950 --> 00:02:38,830
boost int 128 underscore T as the

00:02:35,770 --> 00:02:41,320
template type for chronal duration and a

00:02:38,830 --> 00:02:45,390
couple of lines later we had nanosecond

00:02:41,320 --> 00:02:47,709
precision and iana time zone support

00:02:45,390 --> 00:02:49,330
there was a little something missing in

00:02:47,709 --> 00:02:52,870
Howard's libraries though if you are

00:02:49,330 --> 00:02:56,620
into calendar math whether for dates or

00:02:52,870 --> 00:02:57,940
date times you might want to rewind the

00:02:56,620 --> 00:03:00,220
YouTube video back to the slide and

00:02:57,940 --> 00:03:03,489
understand the invariant that's in the

00:03:00,220 --> 00:03:08,230
blue box it will help you disambiguate

00:03:03,489 --> 00:03:10,780
cases involving the end of month an on

00:03:08,230 --> 00:03:14,590
top of hearts libraries we built support

00:03:10,780 --> 00:03:16,989
for five common data types and so if

00:03:14,590 --> 00:03:19,329
your training this way I have captured

00:03:16,989 --> 00:03:23,500
all of the type conversion rules that we

00:03:19,329 --> 00:03:26,680
came up with on this slide howard's

00:03:23,500 --> 00:03:29,709
libraries provide POSIX compatible parts

00:03:26,680 --> 00:03:33,640
and formats flags but what do you do

00:03:29,709 --> 00:03:36,570
when you have a complex piece of day

00:03:33,640 --> 00:03:41,500
time string like on Saturday June 31st

00:03:36,570 --> 00:03:43,200
2017 at 8:30 p.m. takes a lot of time

00:03:41,500 --> 00:03:46,630
and pain to come up with the right

00:03:43,200 --> 00:03:48,430
format string and so our solution was to

00:03:46,630 --> 00:03:50,500
introduce a live preview tool to our

00:03:48,430 --> 00:03:52,299
users so they can see in real time

00:03:50,500 --> 00:03:55,660
whether their attempt has succeeded or

00:03:52,299 --> 00:03:59,489
failed and I'm gonna skip over this

00:03:55,660 --> 00:03:59,489
slide because it's about leap seconds

00:04:01,290 --> 00:04:05,370
and we've come to my impact slide

00:04:03,420 --> 00:04:08,640
Howard's libraries are real time saver

00:04:05,370 --> 00:04:11,159
he authored chrono so if he cannot get a

00:04:08,640 --> 00:04:16,019
date or time zone live we're into the

00:04:11,159 --> 00:04:17,850
standard who can here's where you can

00:04:16,019 --> 00:04:21,030
download his libraries and start

00:04:17,850 --> 00:04:22,970
experiencing world-class support Thank

00:04:21,030 --> 00:04:25,919
You CB pecan Thank You Howard and if you

00:04:22,970 --> 00:04:28,889
enjoyed this talk come vote for my

00:04:25,919 --> 00:04:29,350
poster on the same subject thank you for

00:04:28,889 --> 00:04:32,419
your time

00:04:29,350 --> 00:04:32,419

YouTube URL: https://www.youtube.com/watch?v=9cEMWAUfBns


