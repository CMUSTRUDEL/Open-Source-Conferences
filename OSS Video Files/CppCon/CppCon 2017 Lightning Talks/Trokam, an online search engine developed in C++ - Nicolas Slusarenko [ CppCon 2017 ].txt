Title: Trokam, an online search engine developed in C++ - Nicolas Slusarenko [ CppCon 2017 ]
Publication date: 2017-10-28
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
—
Optimized And Managed by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:00,800 --> 00:00:07,319
in the morning from a boggart movie I

00:00:03,830 --> 00:00:10,889
wanted if I could develop online search

00:00:07,319 --> 00:00:14,429
engine so I made up this working

00:00:10,889 --> 00:00:23,039
prototype let's see if we search for it

00:00:14,429 --> 00:00:25,470
for instance for lean well these are the

00:00:23,039 --> 00:00:29,099
results you see there is no there are no

00:00:25,470 --> 00:00:37,260
advertisement all the results are out LD

00:00:29,099 --> 00:00:42,450
double let's check out well this is the

00:00:37,260 --> 00:00:45,719
result of the ranking algorithm that

00:00:42,450 --> 00:00:48,840
means that you might you could know why

00:00:45,719 --> 00:00:54,860
the results are order in in that

00:00:48,840 --> 00:00:58,140
particular order the page ranking

00:00:54,860 --> 00:01:00,600
algorithm using is fairly simple but no

00:00:58,140 --> 00:01:03,750
matter how basic or complex this

00:01:00,600 --> 00:01:06,780
algorithm becomes on time it's my

00:01:03,750 --> 00:01:11,909
commitment that the results will be out

00:01:06,780 --> 00:01:19,009
at about this prototype I call the step

00:01:11,909 --> 00:01:22,490
one in is almost entirely on in C++ okay

00:01:19,009 --> 00:01:26,369
working on this prototype I I learned

00:01:22,490 --> 00:01:28,610
the design challenges and the

00:01:26,369 --> 00:01:32,119
bottlenecks I have to solve okay I

00:01:28,610 --> 00:01:38,610
already start working on the step two

00:01:32,119 --> 00:01:41,460
which is completely fully C++ you may

00:01:38,610 --> 00:01:44,640
check out in in the footer links there

00:01:41,460 --> 00:01:48,229
is a link to the step two so you might

00:01:44,640 --> 00:01:51,600
get a flavor of what is going on in this

00:01:48,229 --> 00:01:56,399
everything is running on the cloud okay

00:01:51,600 --> 00:01:59,490
this step one is running digital ocean

00:01:56,399 --> 00:02:03,090
and step two is already installed in

00:01:59,490 --> 00:02:07,879
Amazon Web Services the new database

00:02:03,090 --> 00:02:11,680
model the new database model is already

00:02:07,879 --> 00:02:15,099
implemented in AWS our order

00:02:11,680 --> 00:02:20,230
I would say that a stop a step two will

00:02:15,099 --> 00:02:23,860
be completed once the system recurrently

00:02:20,230 --> 00:02:28,840
index 100 million pages with the new

00:02:23,860 --> 00:02:32,829
ranking algorithm all the code is free

00:02:28,840 --> 00:02:35,859
it's GPL so it's already available in

00:02:32,829 --> 00:02:39,340
github you may find that the link on the

00:02:35,859 --> 00:02:43,739
in the footer everyone of you are

00:02:39,340 --> 00:02:47,500
invited to contribute in this project

00:02:43,739 --> 00:02:50,560
this is not my full-time job I've been

00:02:47,500 --> 00:02:56,980
developing this as Michael said in my

00:02:50,560 --> 00:03:00,159
spare time I wish somehow I could devote

00:02:56,980 --> 00:03:01,580
more time to this project thank you very

00:03:00,159 --> 00:03:08,219
much for your attention

00:03:01,580 --> 00:03:08,219

YouTube URL: https://www.youtube.com/watch?v=wA_MkFKHkrA


