Title: CppCon 2017: John McFarlane “Signed Integers: Faster and Corrector”
Publication date: 2017-10-27
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:05,670 --> 00:00:11,060
all right so it's called signed integers

00:00:10,080 --> 00:00:16,460
faster

00:00:11,060 --> 00:00:18,590
and corrector it's about well I came to

00:00:16,460 --> 00:00:21,529
see lightning talks here last year John

00:00:18,590 --> 00:00:23,690
Cobb give a great talk about one sign he

00:00:21,529 --> 00:00:26,750
was mostly talking about the the

00:00:23,690 --> 00:00:29,029
correctness and safety of sticking with

00:00:26,750 --> 00:00:30,950
signed integers

00:00:29,029 --> 00:00:36,140
Chandler truth also gave a great talk

00:00:30,950 --> 00:00:39,650
and it touched upon how and of unsigned

00:00:36,140 --> 00:00:42,590
integers aren't always the fastest but

00:00:39,650 --> 00:00:46,460
also there's this guy Christo Wolfensohn

00:00:42,590 --> 00:00:52,450
he was on CPP cast a few months ago he

00:00:46,460 --> 00:00:55,430
writes a great blog talking about GCC

00:00:52,450 --> 00:00:57,920
optimization it's it's a great read and

00:00:55,430 --> 00:01:01,280
in particular there's this one article

00:00:57,920 --> 00:01:05,380
that just goes through a bunch of ways

00:01:01,280 --> 00:01:09,799
in which signed integers can exploit

00:01:05,380 --> 00:01:13,580
undefined behavior to write faster more

00:01:09,799 --> 00:01:19,009
optimized simpler waters and it kind of

00:01:13,580 --> 00:01:20,899
blew my mind so I thought I'd share it

00:01:19,009 --> 00:01:23,689
with you I also have been trying to

00:01:20,899 --> 00:01:27,140
persuade other people colleagues people

00:01:23,689 --> 00:01:28,999
on on the slack channel that you know

00:01:27,140 --> 00:01:31,249
signed is faster and it's difficult to

00:01:28,999 --> 00:01:34,490
persuade people it's generally difficult

00:01:31,249 --> 00:01:35,810
to persuade people of things and so I'm

00:01:34,490 --> 00:01:37,520
not gonna try I'm just I just want to

00:01:35,810 --> 00:01:39,950
share these cool optimizations but I

00:01:37,520 --> 00:01:42,380
will have a quick rant about you know

00:01:39,950 --> 00:01:46,130
undefined behavior contracts that kind

00:01:42,380 --> 00:01:48,829
of thing because it is fundamentally

00:01:46,130 --> 00:01:51,109
difficult thing to explain to people

00:01:48,829 --> 00:01:52,990
contracts because they have more than

00:01:51,109 --> 00:01:57,649
one human in them unnecessarily

00:01:52,990 --> 00:02:00,229
complicated thing and when you can talk

00:01:57,649 --> 00:02:02,020
about contracts which bit of this line

00:02:00,229 --> 00:02:07,520
do you think I'm going to bring up here

00:02:02,020 --> 00:02:10,009
really the Const keyword I've got a

00:02:07,520 --> 00:02:12,630
question for you is Const liberating or

00:02:10,009 --> 00:02:17,670
is it restrictive which is it

00:02:12,630 --> 00:02:19,320
both right well it depends if you are

00:02:17,670 --> 00:02:21,930
implementing this function it's

00:02:19,320 --> 00:02:25,530
restrictive and if you're the user of

00:02:21,930 --> 00:02:27,630
this function it's liberating and so

00:02:25,530 --> 00:02:30,360
what happens if we turn the tables on

00:02:27,630 --> 00:02:33,390
the user and force them to be the ones

00:02:30,360 --> 00:02:36,510
that observe Const well suddenly when

00:02:33,390 --> 00:02:39,300
they do you know bad things nobody feels

00:02:36,510 --> 00:02:41,370
like well I don't think anybody would

00:02:39,300 --> 00:02:43,500
feel too sorry for the right the author

00:02:41,370 --> 00:02:45,450
of this code if something bad happened

00:02:43,500 --> 00:02:49,080
as a result of them doing this Const

00:02:45,450 --> 00:02:53,120
cast it's there really any difference

00:02:49,080 --> 00:02:55,380
when you cause undefined behavior

00:02:53,120 --> 00:02:58,800
because you used a signed integer rather

00:02:55,380 --> 00:03:01,320
than an unsigned integer well I don't

00:02:58,800 --> 00:03:05,310
know I've tried arguing with people in

00:03:01,320 --> 00:03:07,380
the course there's there's a certain

00:03:05,310 --> 00:03:08,760
point in which you just figure you try

00:03:07,380 --> 00:03:11,430
and plant a seed in somebody's head and

00:03:08,760 --> 00:03:13,830
walk away because it sometimes it takes

00:03:11,430 --> 00:03:16,230
a long time to get people to come around

00:03:13,830 --> 00:03:17,970
to your way of thinking maybe if if

00:03:16,230 --> 00:03:20,310
they're about to buy a car and it has

00:03:17,970 --> 00:03:22,770
zero miles on the clock perhaps you

00:03:20,310 --> 00:03:25,710
could persuade them the unsigned it's

00:03:22,770 --> 00:03:28,190
not there you know wraparound is not the

00:03:25,710 --> 00:03:31,730
best way to go about things and here

00:03:28,190 --> 00:03:35,070
there's there's reasons why unsigned

00:03:31,730 --> 00:03:37,950
having defined behavior perhaps isn't

00:03:35,070 --> 00:03:43,530
such a great thing after all anyway if

00:03:37,950 --> 00:03:46,740
you're arguing you're losing so so let

00:03:43,530 --> 00:03:50,730
me just show you some compiler explorer

00:03:46,740 --> 00:03:54,600
stuff so these are some of the examples

00:03:50,730 --> 00:03:56,940
that that were that I found on this blog

00:03:54,600 --> 00:03:59,250
and this one's probably not that

00:03:56,940 --> 00:04:02,600
surprising well you know if you if you

00:03:59,250 --> 00:04:06,300
increase a signed integer

00:04:02,600 --> 00:04:09,020
it's bigger that's not the case with

00:04:06,300 --> 00:04:11,850
unsigned here I'm on the Left we have

00:04:09,020 --> 00:04:13,610
what the code looks like if T is signed

00:04:11,850 --> 00:04:17,630
integer and on the right we have what

00:04:13,610 --> 00:04:20,900
the code looks like if T is unsigned and

00:04:17,630 --> 00:04:24,120
here it's a little bit simpler because

00:04:20,900 --> 00:04:25,870
we know that you know if you add a

00:04:24,120 --> 00:04:28,000
positive number to

00:04:25,870 --> 00:04:29,770
another positive number you get a bigger

00:04:28,000 --> 00:04:32,080
number right

00:04:29,770 --> 00:04:33,610
well not the case with unsigned so you

00:04:32,080 --> 00:04:38,410
have to do extra checks to make sure

00:04:33,610 --> 00:04:39,720
that number isn't how very very low okay

00:04:38,410 --> 00:04:42,580
this one this one's pretty good

00:04:39,720 --> 00:04:45,250
this is pretty extreme actually I mean I

00:04:42,580 --> 00:04:48,669
am cherry-picking some some of these

00:04:45,250 --> 00:04:52,150
examples for sure but here again if you

00:04:48,669 --> 00:04:55,090
multiply X by you know a number and then

00:04:52,150 --> 00:04:56,560
you divide it by a smaller number well

00:04:55,090 --> 00:05:00,340
you're gonna end up with something that

00:04:56,560 --> 00:05:03,520
was bigger than X to begin with and in

00:05:00,340 --> 00:05:07,810
this case fourteen divided by seven is

00:05:03,520 --> 00:05:10,510
is two and and so there's basically

00:05:07,810 --> 00:05:14,200
something that a hacky way to double a

00:05:10,510 --> 00:05:17,289
value so just wow five minutes really

00:05:14,200 --> 00:05:19,750
isn't very long so there are just more

00:05:17,289 --> 00:05:23,039
examples like this and I recommend you

00:05:19,750 --> 00:05:23,039

YouTube URL: https://www.youtube.com/watch?v=equbUrX-ZWQ


