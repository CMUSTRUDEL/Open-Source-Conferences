Title: CppCon 2017: David Sankel “Choosing an Abstraction”
Publication date: 2017-10-28
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:04,899 --> 00:00:08,090
alright this is about choosing

00:00:06,559 --> 00:00:09,410
abstractions so we've got a really

00:00:08,090 --> 00:00:10,879
simple problem here you get a string

00:00:09,410 --> 00:00:12,410
like this you want to snip the beginning

00:00:10,879 --> 00:00:13,549
you want to snip the end you want to

00:00:12,410 --> 00:00:14,870
take the little the spaces in between

00:00:13,549 --> 00:00:17,570
compress them in a single space

00:00:14,870 --> 00:00:18,980
something like this right what you solve

00:00:17,570 --> 00:00:20,810
this is with a state machine you guys

00:00:18,980 --> 00:00:22,430
all know this right this is just a fine

00:00:20,810 --> 00:00:23,779
state of time with time if you're in

00:00:22,430 --> 00:00:25,160
state 1 and you get a space you stay in

00:00:23,779 --> 00:00:26,179
state 1 if you go to state 1 state 2 you

00:00:25,160 --> 00:00:27,470
take in their character that is in a

00:00:26,179 --> 00:00:29,210
space and you put it out to the output

00:00:27,470 --> 00:00:32,419
and so on and so forth state 2 state 3

00:00:29,210 --> 00:00:33,920
anyway this works I don't really care is

00:00:32,419 --> 00:00:37,879
what the code looks like it's very basic

00:00:33,920 --> 00:00:39,170
you have an enum that you define and you

00:00:37,879 --> 00:00:40,850
have the state transitions within this

00:00:39,170 --> 00:00:46,309
twist statement what's so funny about

00:00:40,850 --> 00:00:50,269
this this is not funny all right tell me

00:00:46,309 --> 00:00:53,059
later all right what I really care about

00:00:50,269 --> 00:00:55,369
is like how do we what we want our

00:00:53,059 --> 00:00:58,070
interface to be and C++ ninety-eight

00:00:55,369 --> 00:00:59,629
style you take in a string reference and

00:00:58,070 --> 00:01:00,830
you know how you use this thing right if

00:00:59,629 --> 00:01:01,970
you have a string you want to modify a

00:01:00,830 --> 00:01:03,290
call clean white space on your string

00:01:01,970 --> 00:01:04,400
and then it goes ahead and modifies the

00:01:03,290 --> 00:01:07,790
reference that you've passed as the

00:01:04,400 --> 00:01:09,049
argument fine if you want to take a

00:01:07,790 --> 00:01:11,179
second string that's equivalent to the

00:01:09,049 --> 00:01:13,219
first but this clean whitespace thing is

00:01:11,179 --> 00:01:14,479
applied to it you make a copy of the

00:01:13,219 --> 00:01:17,659
original string and you'll clean white

00:01:14,479 --> 00:01:22,549
space on that that's not really nice but

00:01:17,659 --> 00:01:25,429
it worse you can do C++ 11 style you can

00:01:22,549 --> 00:01:26,600
take in the string by value and I'm not

00:01:25,429 --> 00:01:28,579
going to show you how to do this right

00:01:26,600 --> 00:01:29,960
you basically take that in by belly you

00:01:28,579 --> 00:01:31,429
move the result into the strengths this

00:01:29,960 --> 00:01:33,319
modifies a string in place and whatever

00:01:31,429 --> 00:01:35,719
returns a result so if you want to

00:01:33,319 --> 00:01:38,179
modify string in place you call stood

00:01:35,719 --> 00:01:40,249
move on your argument and then set the

00:01:38,179 --> 00:01:42,740
result equal to s and then it doesn't do

00:01:40,249 --> 00:01:44,119
any extra memory allocations right it's

00:01:42,740 --> 00:01:47,299
kind of weird though you're putting in

00:01:44,119 --> 00:01:49,460
this strange stood move thing and I

00:01:47,299 --> 00:01:51,740
guess you're sprinkling performance

00:01:49,460 --> 00:01:52,999
annotations I don't know but if you do

00:01:51,740 --> 00:01:54,829
want to take an S 2 and make it

00:01:52,999 --> 00:01:56,569
equivalent to s 1 that has the clean

00:01:54,829 --> 00:02:01,579
white space applied to it you can do

00:01:56,569 --> 00:02:04,880
that so yeah that works that looks nice

00:02:01,579 --> 00:02:10,069
or you can be STL style

00:02:04,880 --> 00:02:11,630
I hear grows like this is this is cool

00:02:10,069 --> 00:02:13,610
wait wait till you get to where I tell

00:02:11,630 --> 00:02:16,280
you what the best thing is all right so

00:02:13,610 --> 00:02:18,530
here you take an input iterators and you

00:02:16,280 --> 00:02:20,180
return and output iterator you also get

00:02:18,530 --> 00:02:22,970
an output Raider as an argument

00:02:20,180 --> 00:02:25,220
basically the idea is it sets the output

00:02:22,970 --> 00:02:27,080
to the results and returns one pass the

00:02:25,220 --> 00:02:28,580
last output iterator so if you have a

00:02:27,080 --> 00:02:30,890
string and you want to take a second

00:02:28,580 --> 00:02:32,300
string and apply this operation to the

00:02:30,890 --> 00:02:34,790
first string to result in a second

00:02:32,300 --> 00:02:36,590
string you do this you call a stop again

00:02:34,790 --> 00:02:39,680
s10 is your first two arguments and you

00:02:36,590 --> 00:02:41,390
send in a back in server s2 that bad

00:02:39,680 --> 00:02:46,310
well compared to the other ones it's

00:02:41,390 --> 00:02:49,130
really bad but it's it does the thing so

00:02:46,310 --> 00:02:51,230
if you have a single string and you want

00:02:49,130 --> 00:02:54,019
to apply it this operation in place you

00:02:51,230 --> 00:02:56,239
can do that too with the STL style you

00:02:54,019 --> 00:02:59,180
pass s that begin as your results as

00:02:56,239 --> 00:03:01,000
well as your argument of the thing of

00:02:59,180 --> 00:03:03,110
course though this does it in place and

00:03:01,000 --> 00:03:04,340
there's a little bit left over in the

00:03:03,110 --> 00:03:07,850
end of the string so you got to do that

00:03:04,340 --> 00:03:11,090
s not a race to it so you can do that

00:03:07,850 --> 00:03:14,060
that's really cool you can also take

00:03:11,090 --> 00:03:16,160
your in stream your your standard input

00:03:14,060 --> 00:03:19,579
convert these into ice-cream iterators

00:03:16,160 --> 00:03:21,500
and use a no stream iterator with sddc

00:03:19,579 --> 00:03:23,690
out and you can basically design a

00:03:21,500 --> 00:03:25,700
function or design a program which takes

00:03:23,690 --> 00:03:29,660
the input and applies this operation to

00:03:25,700 --> 00:03:32,799
the output with just one thing so it's

00:03:29,660 --> 00:03:37,760
extremely flexible but this codes insane

00:03:32,799 --> 00:03:39,470
but it is really flexible so there's

00:03:37,760 --> 00:03:41,299
also you can have native style because

00:03:39,470 --> 00:03:43,670
this we saw in the in the finite state

00:03:41,299 --> 00:03:45,799
automaton where you take in we're just

00:03:43,670 --> 00:03:48,320
basically how's it get you can define

00:03:45,799 --> 00:03:50,420
your function in terms of abstract types

00:03:48,320 --> 00:03:55,220
that just have act like function calls

00:03:50,420 --> 00:04:03,440
will get input and the question is which

00:03:55,220 --> 00:04:09,760
is the right interface so they all have

00:04:03,440 --> 00:04:09,760
benefits and drawbacks what do you think

00:04:10,450 --> 00:04:14,709
all of them like seriously you're gonna

00:04:13,190 --> 00:04:17,979
write this function and provide for

00:04:14,709 --> 00:04:17,979
interfaces to it

00:04:26,530 --> 00:04:34,180
bench market these are all gonna be

00:04:28,550 --> 00:04:38,840
about the same the last one ranges v3

00:04:34,180 --> 00:04:42,860
what we're gonna use ranges v3 over

00:04:38,840 --> 00:04:50,120
pulled a hold of crazy dependency vector

00:04:42,860 --> 00:04:51,349
of string views no funny crowd cuz do we

00:04:50,120 --> 00:04:53,000
really not know the answer to this

00:04:51,349 --> 00:04:57,529
question which was superior I mean if

00:04:53,000 --> 00:04:59,270
you do the STL style you can implement

00:04:57,529 --> 00:05:00,620
the other ones on top of it actually if

00:04:59,270 --> 00:05:02,060
you want to implement that last one on

00:05:00,620 --> 00:05:04,009
top of the STL style think about how

00:05:02,060 --> 00:05:06,800
nasty that would be right you'd have to

00:05:04,009 --> 00:05:10,129
make iterators out of like put and get

00:05:06,800 --> 00:05:12,300
things oh alright well I'm gonna give

00:05:10,129 --> 00:05:18,799
you the answer but I'm out of time so

00:05:12,300 --> 00:05:18,799

YouTube URL: https://www.youtube.com/watch?v=KYa_LaYKw3w


