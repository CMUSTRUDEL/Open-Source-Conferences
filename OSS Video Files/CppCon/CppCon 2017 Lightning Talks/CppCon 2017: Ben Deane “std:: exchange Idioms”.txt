Title: CppCon 2017: Ben Deane “std:: exchange Idioms”
Publication date: 2017-10-28
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,080 --> 00:00:04,500
All right, how many people in here know about std::exchange?

00:00:04,980 --> 00:00:09,440
Many of you; you're C++ experts. How many people have used std::exchange?

00:00:09,880 --> 00:00:11,590
Recently?

00:00:11,590 --> 00:00:15,900
All right. std::exchange is a little thing that got added in C++14.

00:00:16,440 --> 00:00:21,520
But if you're still on C++11 you can easily drop it in your own code base. It looks like this.

00:00:21,960 --> 00:00:24,980
Of course, I added the constexpr and the noexcept stuff.

00:00:25,360 --> 00:00:28,240
You probably can't use constexpr if you're on C++11.

00:00:29,040 --> 00:00:33,860
It's very simple. It does something very similar to swap, as you can see, except

00:00:33,860 --> 00:00:37,140
it does less work than swap, for when you actually need exchange, and

00:00:37,780 --> 00:00:42,880
you don't need swap; you don't need all the power of swap. So how many of you have code that

00:00:43,260 --> 00:00:46,420
roughly looks something like this? You've got some asynchronous subsystem,

00:00:46,900 --> 00:00:54,180
it periodically ticks, and maybe you've registered some callbacks, and it wants to go through those callbacks and call them.

00:00:54,940 --> 00:01:00,509
But because there's some reentrancy stuff, and you don't want to impose things on your clients,

00:01:00,940 --> 00:01:04,380
you want to use a swap-and-iterate idiom. Right?

00:01:04,420 --> 00:01:08,540
So, your code might look something like this. If your code bases look like mine,

00:01:08,540 --> 00:01:11,600
I'm guessing some of you have seen code like this. Yes?

00:01:13,880 --> 00:01:16,700
And by the way, Tony [van Eerd] has a whole talk about this.

00:01:17,180 --> 00:01:21,900
Well, we don't need swap here. There's a simple substitution we can make.

00:01:22,420 --> 00:01:26,920
We just use std::exchange. We exchange callbacks with the

00:01:27,120 --> 00:01:31,680
empty vector and we just iterate it. We saved a move; we saved a variable.

00:01:31,980 --> 00:01:36,620
So that's pattern one. You might have something of that pattern. Another thing you might do is

00:01:36,760 --> 00:01:39,740
post something to another thread in a lambda.

00:01:40,180 --> 00:01:42,400
It starts out looking like this.

00:01:42,640 --> 00:01:46,520
You can see the swap, and then the move into the lambda.

00:01:46,640 --> 00:01:49,260
Again, it just becomes

00:01:49,420 --> 00:01:52,520
a std::exchange in the init capture of the lambda.

00:01:52,520 --> 00:01:57,020
Again, you save a move and a variable, the result of exchange RVO's into the lambda capture.

00:01:57,340 --> 00:01:59,500
"Well, that's great Ben," you say,

00:01:59,600 --> 00:02:03,420
"But what about thread safety? My code looks like this."

00:02:03,660 --> 00:02:09,600
I have to take stuff out of the callbacks underneath a lock, because anyone can add stuff to it.

00:02:10,060 --> 00:02:16,260
And so how are you going to do that? Well I say, no problem. We do this.

00:02:17,000 --> 00:02:25,080
Take a look at what's happening here. There's a lock_guard; it lives until the semicolon. There's a comma operator,

00:02:26,720 --> 00:02:33,520
exchange RVO's into your vector -- or whatever. I think this is very nice.

00:02:36,500 --> 00:02:44,720
However, what are the rules of C++? Number one: don't pay for you don't use. Number two?

00:02:47,660 --> 00:02:49,860
Vector is always the right choice, right?

00:02:50,240 --> 00:02:53,400
Except in this case, as I discovered, because

00:02:53,840 --> 00:02:58,380
what does vector imply? It implies iteration.

00:02:58,880 --> 00:03:03,000
Therefore it was the wrong choice for this example as Tony pointed out.

00:03:05,320 --> 00:03:11,040
Because you don't actually want a lock in a loop. But as a pattern, as a refactoring, as a whole,

00:03:11,320 --> 00:03:13,720
this thread safe swap-and-iterate idiom:

00:03:14,180 --> 00:03:18,480
I think you should start using it. It's more efficient: exchange is better than swap. You save a move,

00:03:18,480 --> 00:03:22,920
you don't get the declaration-initialization split, it's less code.

00:03:23,720 --> 00:03:27,580

YouTube URL: https://www.youtube.com/watch?v=OqJUBIJOojI


