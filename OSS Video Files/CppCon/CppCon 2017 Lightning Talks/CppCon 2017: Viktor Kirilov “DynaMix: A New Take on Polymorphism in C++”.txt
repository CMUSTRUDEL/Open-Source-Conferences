Title: CppCon 2017: Viktor Kirilov “DynaMix: A New Take on Polymorphism in C++”
Publication date: 2017-10-22
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:03,540
hello my name is Victor I'm I'm gonna

00:00:01,620 --> 00:00:08,790
present a library written by a friend of

00:00:03,540 --> 00:00:11,010
mine and let's go let's go so dynamics

00:00:08,790 --> 00:00:13,170
is hosted on github and it's about

00:00:11,010 --> 00:00:15,179
composing modifying objects at runtime

00:00:13,170 --> 00:00:17,550
it's also very hard to explain in five

00:00:15,179 --> 00:00:19,199
minutes but I'm gonna try so suppose we

00:00:17,550 --> 00:00:21,270
have a coastal air component which has

00:00:19,199 --> 00:00:23,490
an act method in which we find the good

00:00:21,270 --> 00:00:26,039
guys we move to them and then we attack

00:00:23,490 --> 00:00:28,529
them we also have a clear controller

00:00:26,039 --> 00:00:31,920
component which also has an act method

00:00:28,529 --> 00:00:34,469
and we read some keyboard input and what

00:00:31,920 --> 00:00:36,480
may be removed to the left we also have

00:00:34,469 --> 00:00:38,730
a flying creature component which has a

00:00:36,480 --> 00:00:41,899
move tool method in which we flap our

00:00:38,730 --> 00:00:44,730
wings and possibly update our position

00:00:41,899 --> 00:00:46,649
so we might move to inherit from this

00:00:44,730 --> 00:00:49,680
but then how they communicate with each

00:00:46,649 --> 00:00:52,469
other so we might we use GDB refer

00:00:49,680 --> 00:00:55,680
compile time mixing but then everything

00:00:52,469 --> 00:00:58,320
ends up in here files and also we can't

00:00:55,680 --> 00:01:00,809
have an array of the compositive objects

00:00:58,320 --> 00:01:03,570
unless each of the components inherits

00:01:00,809 --> 00:01:06,780
virtually for a common base class but

00:01:03,570 --> 00:01:08,189
even then we have problems like we if we

00:01:06,780 --> 00:01:11,340
have an array of pointers to such

00:01:08,189 --> 00:01:12,840
objects they don't have anything in

00:01:11,340 --> 00:01:15,600
common that there's no common interface

00:01:12,840 --> 00:01:18,930
so if we use multiple inheritance with

00:01:15,600 --> 00:01:21,840
virtual base classes and no CHP and all

00:01:18,930 --> 00:01:24,869
possible methods us are in the base

00:01:21,840 --> 00:01:27,390
class is virtual then there's a

00:01:24,869 --> 00:01:29,430
combinatorial explosion of manually

00:01:27,390 --> 00:01:31,140
added types the base class is the

00:01:29,430 --> 00:01:33,600
coupling focal point with the huge

00:01:31,140 --> 00:01:36,210
interface and also we can't modify

00:01:33,600 --> 00:01:40,950
objects at one time we can't remove and

00:01:36,210 --> 00:01:43,380
add components so there is the interface

00:01:40,950 --> 00:01:45,810
to component pattern in which there's an

00:01:43,380 --> 00:01:48,149
object class which has a bunch of

00:01:45,810 --> 00:01:51,030
pointers which are pointers to different

00:01:48,149 --> 00:01:53,070
interfaces and the hostel AI component

00:01:51,030 --> 00:01:57,180
can be implemented by inheriting from

00:01:53,070 --> 00:02:00,090
the control interface and in its act

00:01:57,180 --> 00:02:02,700
method it can access the self which is a

00:02:00,090 --> 00:02:04,920
pointer to the object it's in and get

00:02:02,700 --> 00:02:08,970
the mobility component and call move

00:02:04,920 --> 00:02:11,580
tool from it and here we can make a

00:02:08,970 --> 00:02:14,069
dragon object we can assign them build

00:02:11,580 --> 00:02:15,569
interface flying creature in

00:02:14,069 --> 00:02:17,340
station we can sign the control

00:02:15,569 --> 00:02:19,709
interface a coastal air implementation

00:02:17,340 --> 00:02:21,749
we can make it act and then we can swap

00:02:19,709 --> 00:02:24,749
runtime the implementation of the

00:02:21,749 --> 00:02:26,579
control interface but here each minted

00:02:24,749 --> 00:02:31,379
face has to be at its pointer to the

00:02:26,579 --> 00:02:32,519
object class appears who what happens if

00:02:31,379 --> 00:02:36,030
you want to implement an interface

00:02:32,519 --> 00:02:38,819
partially so with dynamics we make a

00:02:36,030 --> 00:02:40,739
dragon object and we mutated by adding

00:02:38,819 --> 00:02:44,489
the hostile AI and the flying creature

00:02:40,739 --> 00:02:46,439
components then we call act on it then

00:02:44,489 --> 00:02:48,659
we can mutates again by removing the

00:02:46,439 --> 00:02:50,579
hostile air component and adding the

00:02:48,659 --> 00:02:53,609
player control component when we call

00:02:50,579 --> 00:02:55,139
act on the dragon we actually get we

00:02:53,609 --> 00:02:58,109
actually Co act from the player

00:02:55,139 --> 00:02:59,870
component class and the hostile air

00:02:58,109 --> 00:03:05,909
component will look like the following

00:02:59,870 --> 00:03:08,099
it has an act medal which the class

00:03:05,909 --> 00:03:10,620
doesn't inherit from anything and to

00:03:08,099 --> 00:03:12,269
call move tool we use the end this which

00:03:10,620 --> 00:03:14,159
is something like itself it's a way to

00:03:12,269 --> 00:03:17,449
refer to the object we're currently in

00:03:14,159 --> 00:03:21,209
tow dynamics has three building blocks

00:03:17,449 --> 00:03:23,639
objects messages and mixes so message is

00:03:21,209 --> 00:03:27,650
a global function life pieces interface

00:03:23,639 --> 00:03:29,909
which objects might implement mixings or

00:03:27,650 --> 00:03:32,669
component classes you write that

00:03:29,909 --> 00:03:34,349
implement different messages this is not

00:03:32,669 --> 00:03:37,620
to be confused with dirty mixings

00:03:34,349 --> 00:03:41,159
dynamic stands for dynamic mixing also

00:03:37,620 --> 00:03:43,769
we use the library by mutating objects

00:03:41,159 --> 00:03:45,870
by adding and removing machines at

00:03:43,769 --> 00:03:48,870
runtime and we also call messages in

00:03:45,870 --> 00:03:52,019
these objects which like methods also

00:03:48,870 --> 00:03:53,870
the object saw is first of I need

00:03:52,019 --> 00:04:00,870
some world whoa

00:03:53,870 --> 00:04:04,439
sorceress first time taking so object is

00:04:00,870 --> 00:04:05,909
always first with parameter and that is

00:04:04,439 --> 00:04:10,650
unfortunate that there is no uniform

00:04:05,909 --> 00:04:12,269
code syntax in C++ yet messages in the

00:04:10,650 --> 00:04:18,030
unicast and multicast

00:04:12,269 --> 00:04:21,079
quickcast messages are only one mixing

00:04:18,030 --> 00:04:23,760
the object can implement unicast message

00:04:21,079 --> 00:04:25,949
if we won't have more

00:04:23,760 --> 00:04:26,900
implemented to unicast message they have

00:04:25,949 --> 00:04:29,690
to have different

00:04:26,900 --> 00:04:31,910
Proteas along the one with the highest

00:04:29,690 --> 00:04:34,550
authority get cold that's why we can

00:04:31,910 --> 00:04:36,080
implement shelving and overriding also

00:04:34,550 --> 00:04:38,120
we can have mood cast messages and in

00:04:36,080 --> 00:04:42,620
that case move to missions within the

00:04:38,120 --> 00:04:45,229
object will implement same the same

00:04:42,620 --> 00:04:47,690
message and when we call it it gets

00:04:45,229 --> 00:04:50,120
called for all the mixes and that way we

00:04:47,690 --> 00:04:55,370
can implement the realization for all

00:04:50,120 --> 00:04:58,150
missions within the object also dynamics

00:04:55,370 --> 00:05:01,010
is it enforces the good use of

00:04:58,150 --> 00:05:02,840
object-oriented practices and it's also

00:05:01,010 --> 00:05:04,580
perfect when we're dealing with complex

00:05:02,840 --> 00:05:09,760
polymorphic objects which are commonly

00:05:04,580 --> 00:05:12,289
found in games or big software and also

00:05:09,760 --> 00:05:14,389
it's very useful for plugins which

00:05:12,289 --> 00:05:20,280
enrich the business logic of our program

00:05:14,389 --> 00:05:25,270
by yep which mixings that's it

00:05:20,280 --> 00:05:25,270

YouTube URL: https://www.youtube.com/watch?v=NhYY9pnUdwo


