Title: CppCon 2017: Charles L. Wilcox “The Three Layers of Headers A Curious Discovery”
Publication date: 2017-10-28
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:02,840 --> 00:00:07,550
so today I'm here to share with you a

00:00:04,970 --> 00:00:08,960
story about an interesting curious

00:00:07,550 --> 00:00:12,969
discovery or pattern

00:00:08,960 --> 00:00:15,469
I found laws work on some code so

00:00:12,969 --> 00:00:17,470
imagine we have the code above we have

00:00:15,469 --> 00:00:21,290
two classes one on the left and right

00:00:17,470 --> 00:00:26,600
we'll just call them a and B a refers to

00:00:21,290 --> 00:00:29,030
a b and b refers to an a a tries to use

00:00:26,600 --> 00:00:32,270
a member function of a b and b tries to

00:00:29,030 --> 00:00:37,820
use a member function of an a what could

00:00:32,270 --> 00:00:41,540
be possibly wrong with this so it fails

00:00:37,820 --> 00:00:44,450
to compile so I've highlighted kind of

00:00:41,540 --> 00:00:47,180
important parts so my main included the

00:00:44,450 --> 00:00:52,190
a which then included the B which had

00:00:47,180 --> 00:00:56,350
the air of the a not being a type so can

00:00:52,190 --> 00:00:56,350
anyone tell me what is wrong with us I

00:00:57,610 --> 00:01:01,850
heard something about a forward

00:00:59,420 --> 00:01:03,860
declaration and we'll go with that so

00:01:01,850 --> 00:01:06,590
you can go on Wikipedia and read the

00:01:03,860 --> 00:01:08,510
definition but all means is a

00:01:06,590 --> 00:01:11,450
declaration without his definition of

00:01:08,510 --> 00:01:14,570
the same point so let's try to add that

00:01:11,450 --> 00:01:17,720
so I've added the four declarations for

00:01:14,570 --> 00:01:22,460
each type up here does that fix the

00:01:17,720 --> 00:01:26,479
problem no we get a different kind of

00:01:22,460 --> 00:01:29,210
error so maining called Z includes di

00:01:26,479 --> 00:01:31,310
includes the B which says invalid use

00:01:29,210 --> 00:01:33,170
have been incomplete type and then

00:01:31,310 --> 00:01:35,060
towards the bottom it on thing please

00:01:33,170 --> 00:01:41,740
reminds us hey you four were declared

00:01:35,060 --> 00:01:41,740
that thing so what's wrong with this one

00:01:42,970 --> 00:01:50,750
well it's a little more complicated but

00:01:47,890 --> 00:01:53,270
so I decided to step back I didn't fully

00:01:50,750 --> 00:01:56,570
understand the problem and I just wanted

00:01:53,270 --> 00:01:58,729
to share some of that with you so it's

00:01:56,570 --> 00:02:00,560
not too important but if we declare a

00:01:58,729 --> 00:02:01,850
whole bunch of symbols to represent all

00:02:00,560 --> 00:02:04,430
the things that can go into a header

00:02:01,850 --> 00:02:07,250
file so Oliver types all of our

00:02:04,430 --> 00:02:08,959
variables all of the the functions that

00:02:07,250 --> 00:02:11,989
we declare and we define the

00:02:08,959 --> 00:02:14,580
relationships between them

00:02:11,989 --> 00:02:17,129
we end up with a graph and it's a

00:02:14,580 --> 00:02:20,190
dependency graph and thankfully it's an

00:02:17,129 --> 00:02:22,739
async dependency graph which means that

00:02:20,190 --> 00:02:25,620
we should be able to do this there

00:02:22,739 --> 00:02:27,030
should be a way

00:02:25,620 --> 00:02:29,130
and after you stare at this for a little

00:02:27,030 --> 00:02:31,920
bit you realize that there's kind of

00:02:29,130 --> 00:02:33,420
three layers here one is kind of the

00:02:31,920 --> 00:02:35,550
four declaration that we tried to add

00:02:33,420 --> 00:02:37,019
manually before and then there's kind of

00:02:35,550 --> 00:02:38,430
the stuff in the middle and then the

00:02:37,019 --> 00:02:40,380
stuff at the bottom and the stuff at the

00:02:38,430 --> 00:02:42,030
bottom is your function implementations

00:02:40,380 --> 00:02:47,510
and perhaps you have a few global

00:02:42,030 --> 00:02:47,510
variables or static variables around so

00:02:50,599 --> 00:02:55,799
okay so if you think about this enough

00:02:53,970 --> 00:02:59,370
you can actually decompose any header

00:02:55,799 --> 00:03:01,349
file into this general scheme so if you

00:02:59,370 --> 00:03:04,560
put your type of creations in one file

00:03:01,349 --> 00:03:06,090
you put your type definitions your free

00:03:04,560 --> 00:03:09,269
function declarations and your variable

00:03:06,090 --> 00:03:12,360
declarations in an interface file out

00:03:09,269 --> 00:03:16,549
let's call it and you put your function

00:03:12,360 --> 00:03:19,079
your inline functions in an impulse I'll

00:03:16,549 --> 00:03:20,450
you can get around this problem which is

00:03:19,079 --> 00:03:24,090
kind of cool

00:03:20,450 --> 00:03:25,739
so let's go back to this one and it's

00:03:24,090 --> 00:03:28,079
important to note I'll draw the arrows

00:03:25,739 --> 00:03:30,060
there's a cyclic dependency here if you

00:03:28,079 --> 00:03:33,540
include what calls what it keeps going

00:03:30,060 --> 00:03:36,450
around so first of all I'll use the

00:03:33,540 --> 00:03:37,799
labels that I introduced before we'll

00:03:36,450 --> 00:03:43,019
actually have everything included each

00:03:37,799 --> 00:03:45,239
other and it's kind of a mess but let's

00:03:43,019 --> 00:03:47,400
put some arrows and if you try to go

00:03:45,239 --> 00:03:49,410
from any point in this and go up you

00:03:47,400 --> 00:03:55,769
will uniquely get to the top and you

00:03:49,410 --> 00:03:57,810
won't end up in a cycle so this was the

00:03:55,769 --> 00:03:59,849
pattern I discovered I wasn't expecting

00:03:57,810 --> 00:04:01,799
it but I thought I'd share it with you

00:03:59,849 --> 00:04:03,510
because I think it has some general

00:04:01,799 --> 00:04:06,480
applicability to all of our code

00:04:03,510 --> 00:04:08,000
actually so it was anyone at Victor's

00:04:06,480 --> 00:04:12,870
top earlier this afternoon

00:04:08,000 --> 00:04:15,780
where's Victor here well anyway he was

00:04:12,870 --> 00:04:17,070
building doc tests which is a unit test

00:04:15,780 --> 00:04:19,229
framework and he was comparing the

00:04:17,070 --> 00:04:21,780
timing against catch catches the red

00:04:19,229 --> 00:04:25,530
bars his the blue bars that you can't

00:04:21,780 --> 00:04:29,430
see so it really matters

00:04:25,530 --> 00:04:31,169
so if you're a library author if you

00:04:29,430 --> 00:04:32,550
have type with a couple of header files

00:04:31,169 --> 00:04:34,740
you should definitely try this approach

00:04:32,550 --> 00:04:36,210
and if not maybe you should just think

00:04:34,740 --> 00:04:37,919
about applying it's your code sake

00:04:36,210 --> 00:04:39,410
because it makes you more strongly think

00:04:37,919 --> 00:04:43,139
about how your header files are laid out

00:04:39,410 --> 00:04:44,690
if you're a user you should look for

00:04:43,139 --> 00:04:47,550
four declarations out there in the wild

00:04:44,690 --> 00:04:49,800
if you use a library

00:04:47,550 --> 00:04:51,980
maybe you should not the maintainer zuv

00:04:49,800 --> 00:04:54,210
it to add something like this for you

00:04:51,980 --> 00:04:56,639
and if you don't know about it io

00:04:54,210 --> 00:04:58,830
streams actually provides us today if

00:04:56,639 --> 00:05:02,160
you include the i/o streams insertion

00:04:58,830 --> 00:05:04,350
operator you can include iOS FWD and you

00:05:02,160 --> 00:05:06,419
can get the type making you move o

00:05:04,350 --> 00:05:06,910
stream from your header file thank you

00:05:06,419 --> 00:05:08,730
very much

00:05:06,910 --> 00:05:11,859
[Applause]

00:05:08,730 --> 00:05:11,859

YouTube URL: https://www.youtube.com/watch?v=su9ittf-ozk


