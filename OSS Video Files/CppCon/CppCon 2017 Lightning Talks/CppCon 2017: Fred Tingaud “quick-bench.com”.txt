Title: CppCon 2017: Fred Tingaud “quick-bench.com”
Publication date: 2017-10-27
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:08,160
hi so I'm Fred I'm CEO of quit bench

00:00:05,310 --> 00:00:12,509
Letran it's a website where you can run

00:00:08,160 --> 00:00:16,410
micro benchmarks online the website hook

00:00:12,509 --> 00:00:19,710
sizes you have this sorry this editor on

00:00:16,410 --> 00:00:21,539
the left side of the page where you can

00:00:19,710 --> 00:00:23,490
write some crude benchmark benchmarks

00:00:21,539 --> 00:00:27,539
and on the right you have blue buttons

00:00:23,490 --> 00:00:29,789
if you press one of the buttons you will

00:00:27,539 --> 00:00:31,560
run some benchmarks and have bars with

00:00:29,789 --> 00:00:35,340
loans into time it took to run each

00:00:31,560 --> 00:00:39,629
benchmark so beta mean that the

00:00:35,340 --> 00:00:42,890
benchmark was through a greenish mask

00:00:39,629 --> 00:00:45,930
looks like that so you have a function

00:00:42,890 --> 00:00:48,000
it takes a state and you have this while

00:00:45,930 --> 00:00:51,390
loop inside which will run as many time

00:00:48,000 --> 00:00:53,370
as it has to in order to have a stable

00:00:51,390 --> 00:00:56,219
value for the time it takes to run

00:00:53,370 --> 00:00:58,890
inside everything outside will be run

00:00:56,219 --> 00:01:03,979
once so that's where you want to put

00:00:58,890 --> 00:01:07,170
your initializations and we are going to

00:01:03,979 --> 00:01:11,850
try a little experiment with a few

00:01:07,170 --> 00:01:13,740
algorithms from the stn first I made a

00:01:11,850 --> 00:01:17,009
function which generates 1 million

00:01:13,740 --> 00:01:20,869
random numbers using Mersenne twister i

00:01:17,009 --> 00:01:20,869
crope you pasted it from psychograph you

00:01:22,460 --> 00:01:29,759
first saw that benchmark we would say

00:01:25,799 --> 00:01:31,350
that I get my random vector and inside

00:01:29,759 --> 00:01:33,509
the while loop I'm going to repeat and

00:01:31,350 --> 00:01:35,280
sort it I'm dropping it each time

00:01:33,509 --> 00:01:38,570
because I don't want to run multiple

00:01:35,280 --> 00:01:42,090
times on the already sorted vector and

00:01:38,570 --> 00:01:45,210
as I'm copying and sorting while I want

00:01:42,090 --> 00:01:46,740
only to benchmark the soft part I'm

00:01:45,210 --> 00:01:50,520
going to make a reference with just a

00:01:46,740 --> 00:01:54,630
thought we is just copy 3 and see if it

00:01:50,520 --> 00:01:56,430
makes any difference and yeah it does so

00:01:54,630 --> 00:02:00,240
we can completely know the crappy part

00:01:56,430 --> 00:02:03,810
of the benchmark great we're going to

00:02:00,240 --> 00:02:05,610
start with short and stable sort I don't

00:02:03,810 --> 00:02:08,509
know about you is pets stables ought to

00:02:05,610 --> 00:02:12,480
be a little bit slower slowest and sort

00:02:08,509 --> 00:02:13,610
it is great and it's not that much

00:02:12,480 --> 00:02:16,550
slower in fact so

00:02:13,610 --> 00:02:19,670
enjoy dating you can probably use table

00:02:16,550 --> 00:02:22,730
salt when you need another interesting

00:02:19,670 --> 00:02:24,560
algorithm is an element for example if

00:02:22,730 --> 00:02:27,560
you're looking for the median of a

00:02:24,560 --> 00:02:31,340
vector it you give it a position inside

00:02:27,560 --> 00:02:34,250
the vector it will partitions of it is a

00:02:31,340 --> 00:02:36,980
vector around this position and put in

00:02:34,250 --> 00:02:41,209
the position the right element as if it

00:02:36,980 --> 00:02:43,070
was sorted and it's way faster than a

00:02:41,209 --> 00:02:45,880
sort if you were written for a median so

00:02:43,070 --> 00:02:48,530
great it's a great good algorithm

00:02:45,880 --> 00:02:51,739
another interesting algorithm is partial

00:02:48,530 --> 00:02:54,290
sort it does quite the same thing as an

00:02:51,739 --> 00:02:56,420
element except it sort everything before

00:02:54,290 --> 00:02:59,480
the ends element instead of just

00:02:56,420 --> 00:03:01,700
partitioning it it's Betty to be slower

00:02:59,480 --> 00:03:05,360
than an element and probably faster than

00:03:01,700 --> 00:03:10,520
thought and it's totally not is way

00:03:05,360 --> 00:03:12,590
slower than a complete sort so probably

00:03:10,520 --> 00:03:17,270
we can do better ourselves by including

00:03:12,590 --> 00:03:19,880
sort on the result of ends element yes

00:03:17,270 --> 00:03:23,840
so true in thought on the result is way

00:03:19,880 --> 00:03:25,970
faster than doing the full sort it does

00:03:23,840 --> 00:03:27,680
not mean that partition thought partial

00:03:25,970 --> 00:03:30,799
sort is useless it means that you should

00:03:27,680 --> 00:03:32,870
it you use it only if you're liking for

00:03:30,799 --> 00:03:34,910
example to the three best result of your

00:03:32,870 --> 00:03:37,280
vector or so she doesn't if you have to

00:03:34,910 --> 00:03:41,510
divide the size by something probably

00:03:37,280 --> 00:03:43,220
uses last algorithm instead so I

00:03:41,510 --> 00:03:45,680
encourage you to test with bench

00:03:43,220 --> 00:03:48,630
yourself and you can also follow me on

00:03:45,680 --> 00:03:51,430
Twitter at 400 F

00:03:48,630 --> 00:03:51,430

YouTube URL: https://www.youtube.com/watch?v=mDkuJvxlF4I


