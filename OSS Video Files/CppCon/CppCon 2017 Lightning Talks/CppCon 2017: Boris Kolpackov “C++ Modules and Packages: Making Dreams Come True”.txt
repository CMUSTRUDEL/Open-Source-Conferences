Title: CppCon 2017: Boris Kolpackov “C++ Modules and Packages: Making Dreams Come True”
Publication date: 2017-10-27
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:05,560 --> 00:00:11,500
all right so you've had some time to

00:00:08,320 --> 00:00:16,390
steer this slide who can tell me where

00:00:11,500 --> 00:00:19,360
it's from anyone recognizes it well it's

00:00:16,390 --> 00:00:20,790
taken from a yarnís keynote so he said

00:00:19,360 --> 00:00:23,650
he wants to do just that

00:00:20,790 --> 00:00:25,840
download some graphics to the package

00:00:23,650 --> 00:00:29,740
install it and then write import in his

00:00:25,840 --> 00:00:34,239
call so we have four minutes 30 seconds

00:00:29,740 --> 00:00:36,910
let's see if we can do that he skipped a

00:00:34,239 --> 00:00:39,489
couple of the steps so the first one is

00:00:36,910 --> 00:00:40,960
way actually find the package read it

00:00:39,489 --> 00:00:43,960
should be nice to have some kind of

00:00:40,960 --> 00:00:46,929
repose day perhaps we can search for

00:00:43,960 --> 00:00:49,239
some things but we're not going to do

00:00:46,929 --> 00:00:52,179
graphics 2d we are near four minutes

00:00:49,239 --> 00:00:54,550
left I will do a hello example right so

00:00:52,179 --> 00:00:59,409
we're looking for modularized a law

00:00:54,550 --> 00:01:03,489
library search for hey look someone

00:00:59,409 --> 00:01:06,640
actually wrote one and if you scroll

00:01:03,489 --> 00:01:09,070
down the two versions one is in testing

00:01:06,640 --> 00:01:10,930
the other one is in stable no we're kind

00:01:09,070 --> 00:01:13,420
of conservative so let's go with stable

00:01:10,930 --> 00:01:15,520
there's a bunch of more information but

00:01:13,420 --> 00:01:18,250
one interesting or one important part is

00:01:15,520 --> 00:01:21,219
where this package leaks a URL for the

00:01:18,250 --> 00:01:24,789
request okay let's keep it in our

00:01:21,219 --> 00:01:28,270
keyboard the other part that Vianney

00:01:24,789 --> 00:01:31,149
has skipped over is we actually the

00:01:28,270 --> 00:01:34,329
place for our packages to leave that

00:01:31,149 --> 00:01:37,000
where we store our configuration for

00:01:34,329 --> 00:01:43,180
example which compiler we use which

00:01:37,000 --> 00:01:45,640
options we use so let's create that this

00:01:43,180 --> 00:01:49,119
looks a little bit cryptic so we'll call

00:01:45,640 --> 00:01:51,219
it a clang directly well clang it's

00:01:49,119 --> 00:01:54,759
configured to build C++ and we'll use

00:01:51,219 --> 00:01:58,210
Kwang as a compiler all right so create

00:01:54,759 --> 00:02:01,749
our directory so next thing we do we are

00:01:58,210 --> 00:02:05,590
gonna add that repository our modular I

00:02:01,749 --> 00:02:08,050
still alive he lives right okay next we

00:02:05,590 --> 00:02:09,729
do we fetch the list of packages

00:02:08,050 --> 00:02:12,490
available this repository

00:02:09,729 --> 00:02:18,269
today some authentication that's good

00:02:12,490 --> 00:02:18,269
superb five packages and we're gonna

00:02:18,409 --> 00:02:25,739
build it okay so it depends on another

00:02:22,739 --> 00:02:31,739
library it looks like a standard library

00:02:25,739 --> 00:02:33,530
modules well building standard library

00:02:31,739 --> 00:02:38,129
modules takes a little bit of time

00:02:33,530 --> 00:02:43,260
chunky but once that is done then should

00:02:38,129 --> 00:02:47,609
be okay all right so if we look there's

00:02:43,260 --> 00:02:57,389
our library let's not go to our editor

00:02:47,609 --> 00:03:00,739
and write a little program you can see

00:02:57,389 --> 00:03:03,150
at that very fast so here's the import

00:03:00,739 --> 00:03:05,269
Claire Asians we also import that stood

00:03:03,150 --> 00:03:16,379
core for good measure

00:03:05,269 --> 00:03:18,810
so right this simple build file pretty

00:03:16,379 --> 00:03:20,819
straightforward import the two libraries

00:03:18,810 --> 00:03:22,949
we just installed then we have simple

00:03:20,819 --> 00:03:27,449
rule build us an executable from the

00:03:22,949 --> 00:03:29,970
aloe source file and Link the slices all

00:03:27,449 --> 00:03:33,209
right so let's see how we can so now

00:03:29,970 --> 00:03:34,739
we're gonna build this library this

00:03:33,209 --> 00:03:37,709
little program in this configuration

00:03:34,739 --> 00:03:41,879
hopefully magically everything will work

00:03:37,709 --> 00:03:43,620
so this is where our source sleeps so

00:03:41,879 --> 00:03:46,489
building it in this configuration is

00:03:43,620 --> 00:03:54,000
building the hollow subdirectory

00:03:46,489 --> 00:03:56,099
okay and there is our executable and it

00:03:54,000 --> 00:03:58,349
even works all right we are one minute

00:03:56,099 --> 00:04:00,510
left so let's try to build this do the

00:03:58,349 --> 00:04:03,979
same for that visual studio compiler do

00:04:00,510 --> 00:04:06,150
you think we can do that so I have this

00:04:03,979 --> 00:04:09,629
what looks like a new rose to your

00:04:06,150 --> 00:04:15,199
compiler so I'm gonna just repeat all

00:04:09,629 --> 00:04:15,199
the steps go back to TMP

00:04:16,340 --> 00:04:21,190
clang so we call the directory mess we

00:04:19,979 --> 00:04:23,980
see

00:04:21,190 --> 00:04:39,900
adding the repository teaching the

00:04:23,980 --> 00:04:45,090
package building the library and

00:04:39,900 --> 00:04:49,840
building application okay

00:04:45,090 --> 00:04:52,660
hey look there's an executable we can

00:04:49,840 --> 00:04:55,090
even run it all right eight seconds to

00:04:52,660 --> 00:05:02,330
spare thank you very much

00:04:55,090 --> 00:05:02,330

YouTube URL: https://www.youtube.com/watch?v=PxFrhYAYF3M


