Title: CppCon 2017: Sean Bollin “Reactor vs. Proactor”
Publication date: 2017-11-02
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:09,450
all right hi everyone my name is Shawn

00:00:03,750 --> 00:00:12,750
Bolin and at work we use twisted which

00:00:09,450 --> 00:00:14,820
is a python library and it's a reactor

00:00:12,750 --> 00:00:17,160
and I got interested in like you know

00:00:14,820 --> 00:00:18,869
what does this reactor and pro actor

00:00:17,160 --> 00:00:21,990
design patterns so I started to dig in

00:00:18,869 --> 00:00:27,769
to it and I'm gonna show you what I came

00:00:21,990 --> 00:00:30,599
up with what I learned along the way so

00:00:27,769 --> 00:00:33,140
the reactor and proactive patterns are

00:00:30,599 --> 00:00:36,469
you've done driven programming models

00:00:33,140 --> 00:00:40,350
patterns that you'll find in boost SEO

00:00:36,469 --> 00:00:42,480
and twisted Python library you can do

00:00:40,350 --> 00:00:46,590
them on the server side or the client

00:00:42,480 --> 00:00:48,149
side there's not too many resources

00:00:46,590 --> 00:00:51,180
online about what the difference between

00:00:48,149 --> 00:00:54,030
the two are the one book where it's

00:00:51,180 --> 00:01:07,229
pretty well codified we had an oriented

00:00:54,030 --> 00:01:09,479
star architecture so the reactor it can

00:01:07,229 --> 00:01:13,320
wait for multiple requests concurrently

00:01:09,479 --> 00:01:15,990
and once it has some requests available

00:01:13,320 --> 00:01:19,020
the process it'll dispatch them to

00:01:15,990 --> 00:01:21,570
handlers both the reactor and the pro

00:01:19,020 --> 00:01:24,869
actor are primarily single threaded

00:01:21,570 --> 00:01:26,700
models you can use threads to kind of

00:01:24,869 --> 00:01:28,770
help you facilitate different things but

00:01:26,700 --> 00:01:31,770
the idea is getting out of the thread

00:01:28,770 --> 00:01:38,070
per connection paradigm and focusing

00:01:31,770 --> 00:01:40,170
more on asynchronous actions so a super

00:01:38,070 --> 00:01:42,659
you know simplified approach would be

00:01:40,170 --> 00:01:48,149
you have this reactor and you can add

00:01:42,659 --> 00:01:50,880
and if anybody can figure out how to get

00:01:48,149 --> 00:01:56,520
get pitch to stop converting my lambdas

00:01:50,880 --> 00:01:57,780
into HTML links let me know I spent a

00:01:56,520 --> 00:02:00,390
little bit too much time on that one

00:01:57,780 --> 00:02:03,210
so though one success handler to success

00:02:00,390 --> 00:02:05,520
handler those are just callbacks that

00:02:03,210 --> 00:02:09,020
you'd get after like a one event was

00:02:05,520 --> 00:02:09,020
received or two about those receive

00:02:09,630 --> 00:02:16,240
so the reactor is based off an event

00:02:12,130 --> 00:02:19,090
loop and typically reactors are

00:02:16,240 --> 00:02:24,220
implemented using system calls with

00:02:19,090 --> 00:02:28,630
select or a pole so what this move does

00:02:24,220 --> 00:02:31,830
is it's just gonna move and it's going

00:02:28,630 --> 00:02:34,510
to wait for the system call a pole to

00:02:31,830 --> 00:02:37,420
let you know that some events have

00:02:34,510 --> 00:02:44,740
occurred so those events could be like a

00:02:37,420 --> 00:02:46,780
couple clients are trying to connect so

00:02:44,740 --> 00:02:51,220
you know the e pole and selected calls

00:02:46,780 --> 00:02:54,730
are c-level calls but some it can be

00:02:51,220 --> 00:02:59,280
nice to you know create like some basic

00:02:54,730 --> 00:02:59,280
abstractions and C++ for these things

00:03:02,340 --> 00:03:11,470
one of the limitations of a reactor is

00:03:06,810 --> 00:03:13,800
let's say you have these handlers and a

00:03:11,470 --> 00:03:16,720
few different clients connect

00:03:13,800 --> 00:03:21,190
simultaneously well if one of your

00:03:16,720 --> 00:03:22,570
handlers is a long locking operation an

00:03:21,190 --> 00:03:26,130
operation that takes a long time to

00:03:22,570 --> 00:03:28,870
compute your clients could definitely

00:03:26,130 --> 00:03:30,010
have some performance issues with that

00:03:28,870 --> 00:03:33,610
because they're going to be sitting

00:03:30,010 --> 00:03:36,459
around waiting for this operation to

00:03:33,610 --> 00:03:38,350
complete so typically when you use the

00:03:36,459 --> 00:03:41,110
reactor you really need to be cautious

00:03:38,350 --> 00:03:44,739
that your code executes quickly enough

00:03:41,110 --> 00:03:50,890
to return back to the other events

00:03:44,739 --> 00:03:53,140
waiting for it the pro actor comes in

00:03:50,890 --> 00:03:57,580
and tries to solve some of the issues

00:03:53,140 --> 00:04:01,239
with the reactor it's a bit more

00:03:57,580 --> 00:04:05,459
complicated than the reactor it's fully

00:04:01,239 --> 00:04:07,900
asynchronous and they can rely heavily

00:04:05,459 --> 00:04:11,739
operating system functionality like

00:04:07,900 --> 00:04:15,250
mimics asynchronous i/o and windows IO

00:04:11,739 --> 00:04:18,700
completion reports another aspect of the

00:04:15,250 --> 00:04:21,220
pro actor you know so the two words

00:04:18,700 --> 00:04:23,830
there's you know react or reactive and

00:04:21,220 --> 00:04:25,330
proactive proactive the reactor is just

00:04:23,830 --> 00:04:29,470
waiting for things to happen and it

00:04:25,330 --> 00:04:33,520
reacts to them whereas the pro actor you

00:04:29,470 --> 00:04:38,169
can kind of eagerly fire off some of

00:04:33,520 --> 00:04:40,570
these a synchronous calls before a

00:04:38,169 --> 00:04:46,419
client even requests so that are more

00:04:40,570 --> 00:04:48,280
readily available to serve so using the

00:04:46,419 --> 00:04:51,880
pro actor you can make use of

00:04:48,280 --> 00:04:55,000
asynchronous IO calls with the MINIX you

00:04:51,880 --> 00:05:03,470
can link to the RT real time libraries

00:04:55,000 --> 00:05:06,820
and the the asynchronous IO reads

00:05:03,470 --> 00:05:07,240
[Applause]

00:05:06,820 --> 00:05:10,059
[Music]

00:05:07,240 --> 00:05:10,059

YouTube URL: https://www.youtube.com/watch?v=iMRbm32O0ws


