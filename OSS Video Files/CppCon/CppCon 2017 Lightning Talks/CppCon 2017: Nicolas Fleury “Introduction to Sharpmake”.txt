Title: CppCon 2017: Nicolas Fleury “Introduction to Sharpmake”
Publication date: 2017-10-27
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:06,462 --> 00:00:07,878
So hi everyone.

00:00:07,878 --> 00:00:09,209
So yeah, I'm Nicolas Fleury.

00:00:09,209 --> 00:00:11,036
I work at at Ubisoft

00:00:11,036 --> 00:00:12,402
Montreal on Rainbow Six Siege

00:00:12,402 --> 00:00:15,154
and a few years ago in a CppCon talk

00:00:15,154 --> 00:00:16,771
I introduced FastBuild

00:00:16,771 --> 00:00:18,655
but I didn't mention a tech really important to us,

00:00:18,655 --> 00:00:20,143
which is Sharpmake.

00:00:20,143 --> 00:00:23,766
And we're finally making it open-source at Ubisoft.

00:00:23,766 --> 00:00:25,258
So if you know Premake and Cmake

00:00:25,258 --> 00:00:26,784
well, it's pretty similar

00:00:26,784 --> 00:00:27,896
in what it does,

00:00:27,896 --> 00:00:28,818
and in my opinion

00:00:28,818 --> 00:00:32,666
and a lot of others' it is actually a lot more fun to work with.

00:00:32,666 --> 00:00:35,416
So Sharpmake is using C# as its scripting language

00:00:35,416 --> 00:00:37,231
and its implementation language as well.

00:00:37,231 --> 00:00:38,452
And it's really designed

00:00:38,452 --> 00:00:39,955
for big C++ projects.

00:00:39,955 --> 00:00:42,858
This is really where Sharpmake is shining.

00:00:42,858 --> 00:00:44,727
And what we've seen is that C++ programmers

00:00:44,727 --> 00:00:48,252
are also really comfortable to edit the Sharpmake files.

00:00:48,252 --> 00:00:50,626
And Sharpmake is fast to generate projects

00:00:50,626 --> 00:00:51,939
and this is really important for us

00:00:51,939 --> 00:00:53,307
because we generate projects

00:00:53,307 --> 00:00:54,893
each time we sync code.

00:00:54,893 --> 00:00:56,128
And today, we even generate

00:00:56,128 --> 00:00:58,740
our C# projects with it as well.

00:00:58,740 --> 00:01:01,177
It has built-in support for FastBuild makefiles,

00:01:01,177 --> 00:01:03,851
which is great if you want to give FastBuild a try.

00:01:03,851 --> 00:01:06,087
And since it's in C#, with Visual Studio

00:01:06,087 --> 00:01:08,799
we get IntelliSense and debugging support as well,

00:01:08,799 --> 00:01:10,218
which is appreciated.

00:01:10,218 --> 00:01:11,462
So this talk is really giving you

00:01:11,462 --> 00:01:15,650
a very quick glimpse of the concepts of Sharpmake.

00:01:15,650 --> 00:01:16,483
The first one,

00:01:16,483 --> 00:01:19,077
the fragments, they are defined with enums like this one.

00:01:19,077 --> 00:01:22,034
We can see the values are using different bits.

00:01:22,034 --> 00:01:24,009
The fragments are used to define targets

00:01:24,009 --> 00:01:25,370
which are basically classes

00:01:25,370 --> 00:01:26,662
with a bunch of properties,

00:01:26,662 --> 00:01:29,315
each one with a different fragment type.

00:01:29,315 --> 00:01:30,180
And the fragments

00:01:30,180 --> 00:01:33,025
are letting you multiply a number of targets easily.

00:01:33,025 --> 00:01:34,243
So here through a single call

00:01:34,243 --> 00:01:35,273
through the target constructor

00:01:35,273 --> 00:01:36,885
I'm actually building an instance

00:01:36,885 --> 00:01:39,200
representing a target list.

00:01:39,200 --> 00:01:40,507
A project in Sharpmake

00:01:40,507 --> 00:01:41,785
is implemented with a class,

00:01:41,785 --> 00:01:43,041
and by project I mean

00:01:43,041 --> 00:01:44,982
a library or executable.

00:01:44,982 --> 00:01:46,414
The constructor of that class will be

00:01:46,414 --> 00:01:47,470
called a single time

00:01:47,470 --> 00:01:51,023
unless it's a base class for another project as well.

00:01:51,023 --> 00:01:52,459
In the constructor,

00:01:52,459 --> 00:01:53,899
one of the main things you will do

00:01:53,899 --> 00:01:55,786
is add the targets to the project.

00:01:55,786 --> 00:01:57,320
Sharpmake is made that way

00:01:57,320 --> 00:01:58,496
to be able to parallelize

00:01:58,496 --> 00:02:00,392
the processing of all the projects

00:02:00,392 --> 00:02:01,955
as soon as possible.

00:02:01,955 --> 00:02:03,011
It's not that big of a deal

00:02:03,011 --> 00:02:04,198
because typically what you will do

00:02:04,198 --> 00:02:06,587
is define a class hierarchy for your projects

00:02:06,587 --> 00:02:08,673
and move that line to a base class

00:02:08,673 --> 00:02:10,740
to not repeat yourself.

00:02:10,740 --> 00:02:12,073
In a project you can add

00:02:12,073 --> 00:02:13,722
one or more Configure functions

00:02:13,722 --> 00:02:15,065
and they take two arguments.

00:02:15,065 --> 00:02:16,387
The first one is the configuration

00:02:16,387 --> 00:02:17,568
which is the output.

00:02:17,568 --> 00:02:18,844
And the second one is the target,

00:02:18,844 --> 00:02:20,148
which is the input.

00:02:20,148 --> 00:02:21,447
The configure function is called for

00:02:21,447 --> 00:02:23,399
every target in the project.

00:02:23,399 --> 00:02:24,905
Which means that inside that function

00:02:24,905 --> 00:02:27,800
you can use code very intuitive for C++ programmers.

00:02:27,800 --> 00:02:29,560
You can use if-else, switch-cases,

00:02:29,560 --> 00:02:32,453
virtual functions, public static functions in other classes,

00:02:32,453 --> 00:02:33,286
whatever you want;

00:02:33,286 --> 00:02:35,782
this is normal C# code.

00:02:35,782 --> 00:02:36,626
When it comes to dependencies

00:02:36,626 --> 00:02:38,438
you add them inside Configure functions

00:02:38,438 --> 00:02:40,901
since dependencies can be specific to targets.

00:02:40,901 --> 00:02:42,874
So you specify the project type to depend on

00:02:42,874 --> 00:02:44,265
and the target.

00:02:44,265 --> 00:02:45,473
The target is typically the same

00:02:45,473 --> 00:02:46,306
but it's possible

00:02:46,306 --> 00:02:47,601
for different project types

00:02:47,601 --> 00:02:49,270
to use different target types.

00:02:49,270 --> 00:02:50,862
If that the case, it won't compile.

00:02:50,862 --> 00:02:52,554
So we'll need to write some conversion code

00:02:52,554 --> 00:02:53,821
between the two types.

00:02:53,821 --> 00:02:55,412
Which you can write the way you want.

00:02:55,412 --> 00:02:58,923
Here it's done inside a public method.

00:02:58,923 --> 00:03:00,176
Dependencies are important for programmers.

00:03:00,176 --> 00:03:01,656
Meaning for C++ programmers,

00:03:01,656 --> 00:03:03,688
we want to define everything about our library

00:03:03,688 --> 00:03:05,194
in a single place.

00:03:05,194 --> 00:03:06,270
And Sharpmake is giving you

00:03:06,270 --> 00:03:07,598
all the tools to do that.

00:03:07,598 --> 00:03:08,431
So for example,

00:03:08,431 --> 00:03:09,264
for processor definitions

00:03:09,264 --> 00:03:10,097
there's a difference between

00:03:10,097 --> 00:03:12,396
the one that should be for the dependent

00:03:12,396 --> 00:03:14,694
and the one for to compile the library itself.

00:03:14,694 --> 00:03:15,927
Same thing for include paths

00:03:15,927 --> 00:03:19,035
and there's even stuff if you want to have, for example,

00:03:19,035 --> 00:03:23,203
specific files in the final executable folder.

00:03:23,203 --> 00:03:25,220
When I say that the project is a class,

00:03:25,220 --> 00:03:26,481
I don't mean the project file.

00:03:26,481 --> 00:03:27,632
So project files in Sharpmake

00:03:27,632 --> 00:03:28,525
is like any output

00:03:28,525 --> 00:03:30,855
and it's all handled automatically.

00:03:30,855 --> 00:03:33,595
So suppose here I'm setting the project file name.

00:03:33,595 --> 00:03:35,576
Here we can see another feature of Sharpmake

00:03:35,576 --> 00:03:37,120
which is a reflection based system that

00:03:37,120 --> 00:03:38,745
we can use in strings.

00:03:38,745 --> 00:03:40,941
We use this one sometimes instead of C#

00:03:40,941 --> 00:03:42,970
normal string features,

00:03:42,970 --> 00:03:45,649
because it's actually evaluated much later by Sharpmake.

00:03:45,649 --> 00:03:47,407
But anyways, suppose I change this line to this one?

00:03:47,407 --> 00:03:48,797
Now I'm saying that my project file

00:03:48,797 --> 00:03:50,195
should be platform specific.

00:03:50,195 --> 00:03:52,579
So I want to generate more project files.

00:03:52,579 --> 00:03:53,486
Well that's it.

00:03:53,486 --> 00:03:54,531
You only change that line

00:03:54,531 --> 00:03:57,054
and Sharpmake will generate solutions, all of that

00:03:57,054 --> 00:03:57,913
according to that.

00:03:57,913 --> 00:04:00,489
and it will say if anything doesn't make sense.

00:04:00,489 --> 00:04:01,402
So that's pretty much it.

00:04:01,402 --> 00:04:04,180
We've been using Sharpmake in production since 2011.

00:04:04,180 --> 00:04:07,213
So even if we release it only today, it's actually a major tech.

00:04:07,213 --> 00:04:09,689
There's a bunch of features I'm not mentioning.

00:04:09,689 --> 00:04:11,885
This is all the platforms it is supporting

00:04:11,885 --> 00:04:14,860
and for any platform you don't see the code public on github

00:04:14,860 --> 00:04:16,708
it's actually because the platform holders,

00:04:16,708 --> 00:04:18,968
for NDA reasons, prefer you go through them

00:04:18,968 --> 00:04:20,423
to get the code.

00:04:20,423 --> 00:04:21,256
So please do.

00:04:21,256 --> 00:04:22,665
Don't re-implement.

00:04:22,665 --> 00:04:23,967
And with the remaining time,

00:04:23,967 --> 00:04:25,042
I want to mention another tool

00:04:25,042 --> 00:04:26,986
that was made open-source last week

00:04:26,986 --> 00:04:29,195
by someone who could not be here today.

00:04:29,195 --> 00:04:30,405
It's the Orbit profiler.

00:04:30,405 --> 00:04:31,836
It's a profiler that is basically

00:04:31,836 --> 00:04:33,551
instrumenting your code live.

00:04:33,551 --> 00:04:36,279
Inserting hooks at the beginning and end of your functions

00:04:36,279 --> 00:04:38,910
live in your application.

00:04:38,910 --> 00:04:39,743
And in the end,

00:04:39,743 --> 00:04:41,538
you get something like the best of both worlds.

00:04:41,538 --> 00:04:43,455
between a sampling profiler

00:04:43,455 --> 00:04:45,218
and an instrumenting profiler.

00:04:45,218 --> 00:04:46,953
So I suggest to check it out as well.

00:04:46,953 --> 00:04:47,947

YouTube URL: https://www.youtube.com/watch?v=h9imGlRtJpg


