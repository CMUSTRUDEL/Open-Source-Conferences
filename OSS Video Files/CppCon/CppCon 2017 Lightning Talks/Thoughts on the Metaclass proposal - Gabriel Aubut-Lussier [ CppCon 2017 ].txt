Title: Thoughts on the Metaclass proposal - Gabriel Aubut-Lussier [ CppCon 2017 ]
Publication date: 2017-10-22
Playlist: CppCon 2017 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
—
Optimized And Managed by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:00,030 --> 00:00:06,720
so hello everyone it's great that we

00:00:03,720 --> 00:00:08,880
just had herbs that metaclass talked

00:00:06,720 --> 00:00:10,769
earlier because right now I will be able

00:00:08,880 --> 00:00:13,469
to skip a few slides so I just wanted to

00:00:10,769 --> 00:00:16,710
give a few thoughts about this awesome

00:00:13,469 --> 00:00:19,410
proposal disclaimer I'm not involved in

00:00:16,710 --> 00:00:22,619
preparing it or in any way I'm just very

00:00:19,410 --> 00:00:25,289
enthusiastic about it so well let's get

00:00:22,619 --> 00:00:27,570
started basically if I go even more in a

00:00:25,289 --> 00:00:29,849
nutshell des needed what really stuck

00:00:27,570 --> 00:00:32,820
with me the properties I really enjoy

00:00:29,849 --> 00:00:35,940
about metaclasses are that it allows you

00:00:32,820 --> 00:00:38,780
to enforce constraints to generate

00:00:35,940 --> 00:00:42,360
members and transform existing members

00:00:38,780 --> 00:00:44,640
such as by applying defaults so those

00:00:42,360 --> 00:00:46,559
really are the three most interesting

00:00:44,640 --> 00:00:50,850
properties I think that you can enable

00:00:46,559 --> 00:00:53,039
using meta classes and overall you also

00:00:50,850 --> 00:00:55,620
have this wonderful opt-in mechanism

00:00:53,039 --> 00:00:59,340
which allow you to name a subset of the

00:00:55,620 --> 00:01:01,559
set of classes so of course you've seen

00:00:59,340 --> 00:01:04,650
this example except like for the private

00:01:01,559 --> 00:01:08,040
part which doesn't compile fortunately

00:01:04,650 --> 00:01:10,830
and so if we shorten it we can also get

00:01:08,040 --> 00:01:12,720
the generated class like this so you can

00:01:10,830 --> 00:01:14,310
see that after applying the constraints

00:01:12,720 --> 00:01:17,310
preventing you from having a private

00:01:14,310 --> 00:01:19,830
member function it's actually generating

00:01:17,310 --> 00:01:21,990
a virtual destructor on your behalf and

00:01:19,830 --> 00:01:23,939
it's also transforming your member

00:01:21,990 --> 00:01:26,850
function to make them pure virtual by

00:01:23,939 --> 00:01:28,770
default so enough of examples already

00:01:26,850 --> 00:01:30,810
some of the TAS I add about that was

00:01:28,770 --> 00:01:34,280
that this can be a very great tool in

00:01:30,810 --> 00:01:38,100
order to enforce some of the constraints

00:01:34,280 --> 00:01:40,140
concerning design patterns you can also

00:01:38,100 --> 00:01:42,030
enable those design patterns by

00:01:40,140 --> 00:01:46,200
generating members and reducing the

00:01:42,030 --> 00:01:48,990
boilerplate and reducing like at some

00:01:46,200 --> 00:01:51,810
point there was a design for Singleton's

00:01:48,990 --> 00:01:54,840
and then new language features made it

00:01:51,810 --> 00:01:57,060
evolve if everybody was at like using a

00:01:54,840 --> 00:01:59,549
singleton metaclass it would be very

00:01:57,060 --> 00:02:01,320
simple to adopt the new stuff everywhere

00:01:59,549 --> 00:02:04,770
in your program assuming you're using a

00:02:01,320 --> 00:02:06,930
medic list so that's one another I

00:02:04,770 --> 00:02:09,509
really like is that using the compile

00:02:06,930 --> 00:02:11,819
time static reflection stuff well you

00:02:09,509 --> 00:02:13,130
can actually reflect on your whole

00:02:11,819 --> 00:02:15,230
translation unit we

00:02:13,130 --> 00:02:17,240
means you can iterate over all the

00:02:15,230 --> 00:02:19,820
members of a translation unit and maybe

00:02:17,240 --> 00:02:22,130
even discover some conforming types

00:02:19,820 --> 00:02:24,830
which conform to the constraints of one

00:02:22,130 --> 00:02:26,510
of your metaclass and you could just use

00:02:24,830 --> 00:02:29,000
the compiler in order to discover it was

00:02:26,510 --> 00:02:30,680
in a huge codebase and you if you flip

00:02:29,000 --> 00:02:34,430
things around well you could actually

00:02:30,680 --> 00:02:37,010
use your meta class in order to expose

00:02:34,430 --> 00:02:39,740
recurring bug patterns you notice in

00:02:37,010 --> 00:02:41,990
your code base another thing which I

00:02:39,740 --> 00:02:44,960
think was very interesting is that we

00:02:41,990 --> 00:02:46,520
get to think outside of the bounds of

00:02:44,960 --> 00:02:50,630
the language because of the Upton

00:02:46,520 --> 00:02:53,150
mechanism so we have a language where if

00:02:50,630 --> 00:02:55,640
I want to write a container I will have

00:02:53,150 --> 00:02:58,400
to write some of my memory functions and

00:02:55,640 --> 00:03:01,190
at a typed welfare saying that they

00:02:58,400 --> 00:03:03,350
won't modify any of the members and when

00:03:01,190 --> 00:03:06,320
I want to modify members then yeah I

00:03:03,350 --> 00:03:07,940
don't have any overhead but are using

00:03:06,320 --> 00:03:10,340
meta classes we could maybe start

00:03:07,940 --> 00:03:13,610
thinking about having a construct meta

00:03:10,340 --> 00:03:16,490
class which flips things around members

00:03:13,610 --> 00:03:19,160
are caused by default and you could even

00:03:16,490 --> 00:03:21,860
think about modifying the syntax so that

00:03:19,160 --> 00:03:25,310
it's now allowed to put the mutable type

00:03:21,860 --> 00:03:29,660
qualifier on some members to make them

00:03:25,310 --> 00:03:33,800
mutable so maybe we can push this even

00:03:29,660 --> 00:03:36,710
further and go within the code blocks

00:03:33,800 --> 00:03:40,070
and here you have an integer variable

00:03:36,710 --> 00:03:43,400
and we assigned to it later on during

00:03:40,070 --> 00:03:46,370
this method so what if this could be a

00:03:43,400 --> 00:03:48,830
compiler error because an in variable is

00:03:46,370 --> 00:03:52,190
now assumed to be constant this kind of

00:03:48,830 --> 00:03:54,800
medic less and of course you just have

00:03:52,190 --> 00:03:57,740
to qualify it with a mutable keyword in

00:03:54,800 --> 00:04:00,080
order to get the different behavior this

00:03:57,740 --> 00:04:02,000
could be very interesting so I encourage

00:04:00,080 --> 00:04:04,990
you all to read the proposal it's very

00:04:02,000 --> 00:04:07,459
thrilling to read it it's not like

00:04:04,990 --> 00:04:09,890
verbose or anything there's a lot of

00:04:07,459 --> 00:04:12,680
examples of how this can be applied and

00:04:09,890 --> 00:04:14,660
it's great also you can compile Andrew

00:04:12,680 --> 00:04:17,150
Sutton's clang fork which you can find

00:04:14,660 --> 00:04:19,609
on github with the link on the slide

00:04:17,150 --> 00:04:22,190
and you can also got both some meta

00:04:19,609 --> 00:04:25,190
classes online right now at CPP X double

00:04:22,190 --> 00:04:26,810
dot org and if you're even into that I

00:04:25,190 --> 00:04:28,400
encourage you to host a neck

00:04:26,810 --> 00:04:31,880
her mental workshop at your local

00:04:28,400 --> 00:04:36,020
meetups using those tools we've given it

00:04:31,880 --> 00:04:38,960
a try at C++ Montreal and we've at last

00:04:36,020 --> 00:04:41,120
we spent a lot of time just presenting

00:04:38,960 --> 00:04:43,570
what metaclasses can do and help people

00:04:41,120 --> 00:04:46,220
figure out what they could do with the

00:04:43,570 --> 00:04:51,020
example Mehta classes that come with the

00:04:46,220 --> 00:04:52,970
fork and it really was a success so I

00:04:51,020 --> 00:04:54,670
wish you all the best of luck with that

00:04:52,970 --> 00:05:01,279
thank you

00:04:54,670 --> 00:05:01,279

YouTube URL: https://www.youtube.com/watch?v=BUaEsoKRCcM


