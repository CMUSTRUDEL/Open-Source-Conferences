Title: Lesser known data structures by Tim McNamara
Publication date: 2014-08-05
Playlist: PyCon Australia 2014
Description: 
	Python is graced with flexible, easy to use data structures that are at your fingertips every time you start a command prompt. Lists, dictionaries and tuples are our friends. However, sometimes you want more than what they can give.

While subclassing is a great approach, often what you want has already been written. Most often, it’ll be waiting for you within the standard library. This talk will be a tour of some of what awaits you. Don’t be the next person to recreate an ordered dictionary.

Within the collections module, as well as other places within the standard library, you’ll find lots of functionality. Using these data structures can lead to simpler, more robust code.

As well as explaining how to use some of the data structures that we encounter, we’ll also be checking through open source code to see how they are used in the real world. This will give us insight into how other programmers are using them. Hopefully

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:08,520 --> 00:00:13,000
thanks very much for the introduction

00:00:10,210 --> 00:00:14,740
and just before we begin I thought it

00:00:13,000 --> 00:00:15,940
was almost sort of I always feel like

00:00:14,740 --> 00:00:18,280
you need to kind of dampen the

00:00:15,940 --> 00:00:20,530
enthusiasm some people may be expecting

00:00:18,280 --> 00:00:22,150
a really heavy computer science talk

00:00:20,530 --> 00:00:24,009
talking about these really interesting

00:00:22,150 --> 00:00:25,480
and complex data structures this is

00:00:24,009 --> 00:00:27,789
going to be more of a sort of a medley

00:00:25,480 --> 00:00:29,949
of what's available to you in Python

00:00:27,789 --> 00:00:32,890
right now rather than how to sort of

00:00:29,949 --> 00:00:35,140
implement the newest generation of the

00:00:32,890 --> 00:00:37,150
next algorithm you just saw in the

00:00:35,140 --> 00:00:39,070
latest computer science paper I hope

00:00:37,150 --> 00:00:41,110
that's still going to be appropriate for

00:00:39,070 --> 00:00:47,040
everyone and I thought a good place to

00:00:41,110 --> 00:00:49,600
start with python is probably object so

00:00:47,040 --> 00:00:52,330
he call object and any and you get out

00:00:49,600 --> 00:00:56,200
an object object is the base of all

00:00:52,330 --> 00:00:58,570
objects within Python programming and if

00:00:56,200 --> 00:01:01,210
you subclass and then go of everything

00:00:58,570 --> 00:01:02,590
subclass eventually gets there and you

00:01:01,210 --> 00:01:04,869
want to sort of why would I ever use

00:01:02,590 --> 00:01:06,939
this in my own code well if you wanted

00:01:04,869 --> 00:01:10,600
to compare two things and they could

00:01:06,939 --> 00:01:13,330
possibly be Singleton's you do get

00:01:10,600 --> 00:01:15,990
unique objects when you call it and this

00:01:13,330 --> 00:01:21,840
is actually used in the standard library

00:01:15,990 --> 00:01:25,450
in this module email dot feed passer so

00:01:21,840 --> 00:01:27,370
then we have this need more data thing

00:01:25,450 --> 00:01:32,350
as created as a single turn right at the

00:01:27,370 --> 00:01:36,820
start of a sort of a at line 40 and it's

00:01:32,350 --> 00:01:40,510
used later on in the book I used to use

00:01:36,820 --> 00:01:44,229
the mouse here so in hit this self dot

00:01:40,510 --> 00:01:46,750
input thing sucks out a line and then

00:01:44,229 --> 00:01:53,130
chicks you know is it this need more

00:01:46,750 --> 00:01:56,320
data yeah and buffered sub file returns

00:01:53,130 --> 00:01:58,330
need more data if it itself needs more

00:01:56,320 --> 00:02:00,970
data because it's only read part of the

00:01:58,330 --> 00:02:04,119
stream because buffered sub for excuse

00:02:00,970 --> 00:02:07,590
me buffered subfile is is pulling in

00:02:04,119 --> 00:02:07,590
data from from from the wire

00:02:11,160 --> 00:02:18,819
sip is a built-in but not everyone kind

00:02:16,750 --> 00:02:20,709
of knows about it and you do see

00:02:18,819 --> 00:02:23,950
instances of people kind of creating

00:02:20,709 --> 00:02:25,959
their own deduplication processes if

00:02:23,950 --> 00:02:28,180
you've got a list and you want to sort

00:02:25,959 --> 00:02:31,360
of just have unique values just you can

00:02:28,180 --> 00:02:33,430
turn them into a set there's also a set

00:02:31,360 --> 00:02:37,720
literal it's been recently introduced

00:02:33,430 --> 00:02:40,900
into the language and set has overridden

00:02:37,720 --> 00:02:44,080
a couple of the Pythons operators to be

00:02:40,900 --> 00:02:46,230
able to make sure that you can do

00:02:44,080 --> 00:02:48,370
interesting things like find the

00:02:46,230 --> 00:02:50,610
subtract one set from another and so

00:02:48,370 --> 00:02:50,610
forth

00:02:54,810 --> 00:03:01,860
if you create something using sort of a

00:02:58,410 --> 00:03:03,420
functional you've got this iterable just

00:03:01,860 --> 00:03:04,830
just just pointing out there just

00:03:03,420 --> 00:03:08,510
remember to use generator expressions

00:03:04,830 --> 00:03:11,910
rather than constructing things inside a

00:03:08,510 --> 00:03:14,910
holistic less comprehension because this

00:03:11,910 --> 00:03:17,940
will actually construct everything in

00:03:14,910 --> 00:03:20,280
RAM and then send it to see whereas up

00:03:17,940 --> 00:03:21,959
here we're only sending it out every

00:03:20,280 --> 00:03:26,340
element will sort of go into into the

00:03:21,959 --> 00:03:28,769
constructor function flying through into

00:03:26,340 --> 00:03:30,959
the collections module I was really

00:03:28,769 --> 00:03:31,950
interested in I find the collections

00:03:30,959 --> 00:03:35,549
module one of the most interesting

00:03:31,950 --> 00:03:38,100
places for useful tools in the standard

00:03:35,549 --> 00:03:39,900
library and I was quite interested in

00:03:38,100 --> 00:03:43,709
figuring out how they're actually used

00:03:39,900 --> 00:03:46,910
in real life if you use github search

00:03:43,709 --> 00:03:49,530
from collections and put dick in file

00:03:46,910 --> 00:03:51,780
using Python so for the language

00:03:49,530 --> 00:03:55,739
specifier you kind of get these counters

00:03:51,780 --> 00:03:58,290
of how each of these data structures

00:03:55,739 --> 00:04:00,329
that actually used so counter here is

00:03:58,290 --> 00:04:02,040
used about a thousand times throughout

00:04:00,329 --> 00:04:03,900
all of the open source projects will

00:04:02,040 --> 00:04:09,750
then github that are tagged sort of as

00:04:03,900 --> 00:04:17,310
Python well start with sort of name

00:04:09,750 --> 00:04:20,100
tuple if you you can construct a sort of

00:04:17,310 --> 00:04:22,890
like baby classes that are very very

00:04:20,100 --> 00:04:24,270
memory efficient using this contract we

00:04:22,890 --> 00:04:27,530
have something that's quite attractive

00:04:24,270 --> 00:04:32,520
we can create points with x and y

00:04:27,530 --> 00:04:34,620
attributes and we get really nice error

00:04:32,520 --> 00:04:40,500
messages if we use attributes that don't

00:04:34,620 --> 00:04:42,300
exist but and even though we've only

00:04:40,500 --> 00:04:44,130
called one function if we add sort of

00:04:42,300 --> 00:04:47,610
the verbose flag is that we're actually

00:04:44,130 --> 00:04:52,789
constructing a class here with a whole

00:04:47,610 --> 00:04:55,260
bunch of stuff in it already excuse me

00:04:52,789 --> 00:04:56,610
and I think the thing to this is this is

00:04:55,260 --> 00:04:59,760
a quote from the from the standard

00:04:56,610 --> 00:05:01,560
library documentation it doesn't matter

00:04:59,760 --> 00:05:04,349
how many instances of point that you

00:05:01,560 --> 00:05:08,070
create they're just going to have the

00:05:04,349 --> 00:05:08,610
memory overhead of just creating regular

00:05:08,070 --> 00:05:10,919
tuples

00:05:08,610 --> 00:05:13,139
and so if you were to read something off

00:05:10,919 --> 00:05:15,300
the wire or out of a database or out of

00:05:13,139 --> 00:05:17,159
a CSV file and you want really nice

00:05:15,300 --> 00:05:20,120
attribute access but you don't want the

00:05:17,159 --> 00:05:23,819
memory overhead of creating dictionaries

00:05:20,120 --> 00:05:26,250
you can use this name known tuple

00:05:23,819 --> 00:05:29,039
construct to be very memory efficient

00:05:26,250 --> 00:05:38,310
and also create really readable code for

00:05:29,039 --> 00:05:40,560
yourself the deck construct is also in

00:05:38,310 --> 00:05:46,169
collections it takes sort of an iterable

00:05:40,560 --> 00:05:48,240
and it has a max length and the good

00:05:46,169 --> 00:05:51,210
thing about it is that it supports a

00:05:48,240 --> 00:05:53,580
pins and access from both the left and

00:05:51,210 --> 00:05:58,830
the right side of whatever you're built

00:05:53,580 --> 00:06:01,319
using and so the trade-off though is

00:05:58,830 --> 00:06:05,969
that if you try to access or change

00:06:01,319 --> 00:06:07,439
anything in the middle of the collection

00:06:05,969 --> 00:06:09,270
that you're dealing with it's actually

00:06:07,439 --> 00:06:13,409
much much slower than using using a

00:06:09,270 --> 00:06:18,210
regular list so these are used quite

00:06:13,409 --> 00:06:21,629
extensively as as in memory in memory

00:06:18,210 --> 00:06:23,279
buffers so here's a project that I

00:06:21,629 --> 00:06:27,330
happen to found this thing called me

00:06:23,279 --> 00:06:29,699
reverse exchange protocol and they will

00:06:27,330 --> 00:06:32,759
append me inbound messages and outbound

00:06:29,699 --> 00:06:36,800
messages and as things change this state

00:06:32,759 --> 00:06:36,800
they'll pop things up from either side

00:06:37,009 --> 00:06:44,580
here someone's created their own kind of

00:06:39,960 --> 00:06:48,960
logging object that will pin things to

00:06:44,580 --> 00:06:50,939
it to a dick as they come in and they

00:06:48,960 --> 00:06:56,430
generally use sort of us as stacks and

00:06:50,939 --> 00:06:58,319
queues so this is an implementation of a

00:06:56,430 --> 00:06:59,879
shortest path algorithm don't worry so

00:06:58,319 --> 00:07:02,189
much about it the main the main point is

00:06:59,879 --> 00:07:05,580
just here we start with this paths thing

00:07:02,189 --> 00:07:07,529
we append the specific path that we're

00:07:05,580 --> 00:07:11,610
dealing with right now which cut which

00:07:07,529 --> 00:07:13,289
is kind of horribly initialized as an

00:07:11,610 --> 00:07:20,009
empty list which is if you know anything

00:07:13,289 --> 00:07:22,560
about mutable default attributes well

00:07:20,009 --> 00:07:26,639
default arguments is not really the best

00:07:22,560 --> 00:07:28,860
thing to do but we append this paths and

00:07:26,639 --> 00:07:35,490
then we kind of can pop from the left

00:07:28,860 --> 00:07:37,290
and also add to the right good thing

00:07:35,490 --> 00:07:42,120
about HTML slides us you know things

00:07:37,290 --> 00:07:44,700
kind of fly around on you again we've

00:07:42,120 --> 00:07:46,080
got it we've got another stack as this

00:07:44,700 --> 00:07:47,630
this dictionary here has it has a

00:07:46,080 --> 00:07:55,889
maximum size that we might want to use

00:07:47,630 --> 00:07:57,300
somewhere else and this is a sort of a

00:07:55,889 --> 00:07:59,370
threading mechanism someone who's

00:07:57,300 --> 00:08:02,490
created their own busy loop sort of a

00:07:59,370 --> 00:08:03,780
busy polling system where they're going

00:08:02,490 --> 00:08:06,479
and they're finding an empty thread

00:08:03,780 --> 00:08:11,370
that's available trying to find a job to

00:08:06,479 --> 00:08:13,800
get done then they will apply some

00:08:11,370 --> 00:08:16,169
process frame function which is which is

00:08:13,800 --> 00:08:19,650
sort of defined up here and then a pin

00:08:16,169 --> 00:08:23,330
that task just so that everyone is aware

00:08:19,650 --> 00:08:28,039
there's actually a better way to do that

00:08:23,330 --> 00:08:31,169
and that's this queue thing if you

00:08:28,039 --> 00:08:34,919
import from Q you'll find in the in

00:08:31,169 --> 00:08:38,940
Python standard dictionary a really good

00:08:34,919 --> 00:08:41,370
implementation of a thread-safe q that

00:08:38,940 --> 00:08:44,700
supports being able to have jobs marked

00:08:41,370 --> 00:08:46,680
as done and you're not going to get

00:08:44,700 --> 00:08:51,230
yourself into into big tangles like

00:08:46,680 --> 00:08:53,610
creating this kind of Miss in the future

00:08:51,230 --> 00:08:56,310
just that the naming conventions are

00:08:53,610 --> 00:09:00,240
through Python 3 the capitalization the

00:08:56,310 --> 00:09:03,330
module name was it was changed so

00:09:00,240 --> 00:09:06,570
nearing the end of of the collections

00:09:03,330 --> 00:09:08,160
module we've got this counter thing is

00:09:06,570 --> 00:09:10,950
anyone sort of trying to implement a

00:09:08,160 --> 00:09:15,830
counter using a dictionary before

00:09:10,950 --> 00:09:19,470
themselves so that's been done for you

00:09:15,830 --> 00:09:21,450
you know I've been really struck by by

00:09:19,470 --> 00:09:27,120
the bird life here in Brisbane as I've

00:09:21,450 --> 00:09:31,010
moved and sort of visited and we don't

00:09:27,120 --> 00:09:31,010
really have many crows in Auckland and

00:09:31,700 --> 00:09:36,329
we've got this counter object that you

00:09:34,890 --> 00:09:39,149
can see from the way that it's ripped

00:09:36,329 --> 00:09:41,249
entered that you can also actually

00:09:39,149 --> 00:09:42,749
initialize it using a dictionary as well

00:09:41,249 --> 00:09:48,139
but I've just gone and been quite

00:09:42,749 --> 00:09:50,579
explicit here if you try to access a a

00:09:48,139 --> 00:09:51,899
field that doesn't currently exist so

00:09:50,579 --> 00:09:57,360
there are no kookaburras in our sort of

00:09:51,899 --> 00:09:58,860
sample set we get zero and we can we've

00:09:57,360 --> 00:10:01,529
got a number of really convenient

00:09:58,860 --> 00:10:03,779
methods in the counter we know we can

00:10:01,529 --> 00:10:07,410
pull out the most common things that

00:10:03,779 --> 00:10:10,139
we've counter up and there are a whole

00:10:07,410 --> 00:10:15,269
bunch more in the Pythons to pythons

00:10:10,139 --> 00:10:18,989
standard documentation generalizing more

00:10:15,269 --> 00:10:23,009
about when we want to do something with

00:10:18,989 --> 00:10:24,540
the dictionary when is an empty field or

00:10:23,009 --> 00:10:30,290
an empty value there's this default

00:10:24,540 --> 00:10:32,369
decked object what we do here is

00:10:30,290 --> 00:10:36,029
initialize it with sort of this this

00:10:32,369 --> 00:10:38,040
factory object when there is a so when

00:10:36,029 --> 00:10:40,019
we something is accessed which doesn't

00:10:38,040 --> 00:10:41,910
currently exist please initialize or

00:10:40,019 --> 00:10:45,660
call this function which in this case

00:10:41,910 --> 00:10:48,049
will return an empty list so here's my

00:10:45,660 --> 00:10:50,429
log of of sightings that you know

00:10:48,049 --> 00:10:55,619
informally from from New Zealand is this

00:10:50,429 --> 00:11:03,419
New Zealand native birds here and i can

00:10:55,619 --> 00:11:05,160
so down here the i can create a oh this

00:11:03,419 --> 00:11:06,989
one here should be prefixed with NZ

00:11:05,160 --> 00:11:11,069
because i'm trying to am reference

00:11:06,989 --> 00:11:13,470
indeed burn settings but effectively i

00:11:11,069 --> 00:11:17,189
pull out a list with with all the cities

00:11:13,470 --> 00:11:20,279
that I've been able to to see this this

00:11:17,189 --> 00:11:21,899
to you but if I you know would look for

00:11:20,279 --> 00:11:25,649
crow I haven't seen that at all in New

00:11:21,899 --> 00:11:26,610
Zealand that's quite conveniently can be

00:11:25,649 --> 00:11:31,410
converted into sort of a regular

00:11:26,610 --> 00:11:33,899
dictionary and I wanted to pause here

00:11:31,410 --> 00:11:36,749
just by mentioning with we've explored a

00:11:33,899 --> 00:11:43,199
lot of space within the standard library

00:11:36,749 --> 00:11:45,179
already and a lot of these things

00:11:43,199 --> 00:11:49,649
especially in the collections module

00:11:45,179 --> 00:11:51,240
started as recipes

00:11:49,649 --> 00:11:56,069
that were thrown around and put out in

00:11:51,240 --> 00:11:59,939
public and not all of the recipes that

00:11:56,069 --> 00:12:01,499
Ray created and put up online have

00:11:59,939 --> 00:12:03,509
actually been included within the

00:12:01,499 --> 00:12:06,360
standard library so one of them that

00:12:03,509 --> 00:12:10,790
didn't is this thing called a bag if you

00:12:06,360 --> 00:12:15,059
were to put a if we had a counter that

00:12:10,790 --> 00:12:17,779
heads if we had those 23 crows and we

00:12:15,059 --> 00:12:25,259
wanted to be able to pull out one by one

00:12:17,779 --> 00:12:26,990
if three or four of those crows we can't

00:12:25,259 --> 00:12:31,470
do that using the tools that we've got

00:12:26,990 --> 00:12:33,929
and so he actually went and and just

00:12:31,470 --> 00:12:35,429
asked the community to see if that's

00:12:33,929 --> 00:12:39,720
good enough for inclusion and they said

00:12:35,429 --> 00:12:43,079
no not really and so it's not there and

00:12:39,720 --> 00:12:46,050
if you read the developer guide you'll

00:12:43,079 --> 00:12:50,279
see that this is exactly the kind of

00:12:46,050 --> 00:12:52,860
practice that is encouraged within

00:12:50,279 --> 00:12:55,709
contributions to python so if you have

00:12:52,860 --> 00:12:59,779
found something that's useful that would

00:12:55,709 --> 00:13:02,809
extend a module in the standard library

00:12:59,779 --> 00:13:05,339
please gauge the usefulness of the code

00:13:02,809 --> 00:13:07,470
typically this is done by sharing the

00:13:05,339 --> 00:13:09,509
code publicly you'll have a couple of

00:13:07,470 --> 00:13:13,230
options and one of them is to post it

00:13:09,509 --> 00:13:16,350
online in the Python cookbook and that's

00:13:13,230 --> 00:13:17,579
exactly what what happened and I just

00:13:16,350 --> 00:13:19,350
wanted to sort of put it out that you

00:13:17,579 --> 00:13:20,689
might have these gods in the Python

00:13:19,350 --> 00:13:22,709
universe but they're still actually

00:13:20,689 --> 00:13:25,999
quite human and they're still following

00:13:22,709 --> 00:13:25,999
standard practice

00:13:34,030 --> 00:13:38,020
so there are these tools that are

00:13:36,010 --> 00:13:42,490
available to you as someone who writes

00:13:38,020 --> 00:13:45,640
code for others and abstract base

00:13:42,490 --> 00:13:48,910
classes are things that enable you to be

00:13:45,640 --> 00:13:54,070
able to create patterns that you would

00:13:48,910 --> 00:13:56,380
like to be enforced and it's probably

00:13:54,070 --> 00:13:58,300
worthwhile if you are a professional

00:13:56,380 --> 00:14:01,180
programmer to take the time to learn

00:13:58,300 --> 00:14:03,840
about these tools because I expect that

00:14:01,180 --> 00:14:06,580
their use is going to increase and you

00:14:03,840 --> 00:14:08,680
can see it with the implementation of

00:14:06,580 --> 00:14:11,770
the selectors module which makes for

00:14:08,680 --> 00:14:13,810
very very fast io access using the

00:14:11,770 --> 00:14:16,710
select or cake your pole or a pole

00:14:13,810 --> 00:14:19,240
depending on the operating system

00:14:16,710 --> 00:14:21,660
because of this statement that exists

00:14:19,240 --> 00:14:23,740
within the Python developers guide

00:14:21,660 --> 00:14:25,480
typically you get two modules in the

00:14:23,740 --> 00:14:26,740
standard verb 1 is a module which

00:14:25,480 --> 00:14:29,140
implement something that's difficult to

00:14:26,740 --> 00:14:31,030
you right and if I go to the second

00:14:29,140 --> 00:14:32,260
paragraph the second type of module is

00:14:31,030 --> 00:14:33,880
one that implements something that

00:14:32,260 --> 00:14:37,780
people reimplement themselves

00:14:33,880 --> 00:14:39,760
consistently or constantly and so you

00:14:37,780 --> 00:14:41,740
can see that abstract base classes are

00:14:39,760 --> 00:14:44,380
an attempt to be able to make that

00:14:41,740 --> 00:14:50,920
second type of addition to the standard

00:14:44,380 --> 00:14:54,130
library much much easier so this is a

00:14:50,920 --> 00:14:55,990
sort of a quote supporting the use cases

00:14:54,130 --> 00:14:58,030
they're useful if you want to create

00:14:55,990 --> 00:15:06,480
plugins or you'd like to enable 3rd

00:14:58,030 --> 00:15:10,630
parties to exchange your own code but

00:15:06,480 --> 00:15:14,770
let's move on to middle classes just for

00:15:10,630 --> 00:15:16,410
a moment middle classes with another

00:15:14,770 --> 00:15:19,990
kind of danger zone within Python

00:15:16,410 --> 00:15:22,420
there's this kind of famous paragraph

00:15:19,990 --> 00:15:25,480
from Tim Tim Peters that was introduced

00:15:22,420 --> 00:15:28,570
into this book learning python which is

00:15:25,480 --> 00:15:30,160
now a little bit dated but metaclass is

00:15:28,570 --> 00:15:32,800
a deeper magic the ninety-nine percent

00:15:30,160 --> 00:15:35,230
of users should ever worry about if you

00:15:32,800 --> 00:15:36,580
wither if you know if sorry if you

00:15:35,230 --> 00:15:39,040
wonder whether or not you need them you

00:15:36,580 --> 00:15:41,620
probably don't the people that actually

00:15:39,040 --> 00:15:43,390
need them know where certainty why they

00:15:41,620 --> 00:15:48,370
need them and they won't need an

00:15:43,390 --> 00:15:51,750
explanation to be fair though that quote

00:15:48,370 --> 00:15:54,460
actually as one paragraph in a in fact

00:15:51,750 --> 00:15:57,670
only a few sentences from a paragraph

00:15:54,460 --> 00:16:00,130
within a very very long Fred where Tim

00:15:57,670 --> 00:16:01,810
is actually trying to express a couple

00:16:00,130 --> 00:16:07,440
of other attributes about the

00:16:01,810 --> 00:16:10,210
programming language itself and that is

00:16:07,440 --> 00:16:12,010
sort of this deep magic to be able to go

00:16:10,210 --> 00:16:14,380
and manipulate objects has always been

00:16:12,010 --> 00:16:16,750
popular so it has always been possible

00:16:14,380 --> 00:16:20,230
and it's always been relatively obscure

00:16:16,750 --> 00:16:21,910
and difficult and so I think from there

00:16:20,230 --> 00:16:25,930
you can kind of pull out free

00:16:21,910 --> 00:16:28,839
implications one of them is that meta

00:16:25,930 --> 00:16:31,779
classes are therefore when you might

00:16:28,839 --> 00:16:33,400
need them so if you are wanting to some

00:16:31,779 --> 00:16:38,170
sort of plug-in infrastructure for

00:16:33,400 --> 00:16:39,640
yourself and that as humans the fact

00:16:38,170 --> 00:16:41,050
that you might not understand quite

00:16:39,640 --> 00:16:45,730
what's going right now when you sort of

00:16:41,050 --> 00:16:49,029
see these tombs is probably ok but it is

00:16:45,730 --> 00:16:50,890
complex and the third thing that I would

00:16:49,029 --> 00:16:53,680
like that I've kind of drawn from it is

00:16:50,890 --> 00:16:55,630
that thinking about meta classes can

00:16:53,680 --> 00:17:00,070
sort of deepen our understanding of

00:16:55,630 --> 00:17:05,140
Python and so now against the quiz

00:17:00,070 --> 00:17:09,100
answer was and meet a class all the

00:17:05,140 --> 00:17:16,569
media classes is a class that returns a

00:17:09,100 --> 00:17:20,110
class and if you call my class you'll

00:17:16,569 --> 00:17:22,179
then get out an instance and so you can

00:17:20,110 --> 00:17:25,410
think that these my middle class objects

00:17:22,179 --> 00:17:27,760
as things that are going to provide

00:17:25,410 --> 00:17:31,210
provide interfaces to the rest of your

00:17:27,760 --> 00:17:34,030
system without needing to provide all of

00:17:31,210 --> 00:17:36,640
the internals another one thing to think

00:17:34,030 --> 00:17:38,590
about meta classes if you're kind of

00:17:36,640 --> 00:17:42,730
terrified by them is that you already

00:17:38,590 --> 00:17:45,760
use them the type function although this

00:17:42,730 --> 00:17:48,730
has changed in Python 3 the type

00:17:45,760 --> 00:17:51,340
function already returns classes every

00:17:48,730 --> 00:17:53,020
single time that you instance yet an

00:17:51,340 --> 00:17:57,520
object at least that's my understanding

00:17:53,020 --> 00:18:01,230
as it is currently and and so therefore

00:17:57,520 --> 00:18:01,230
it's not that scary

00:18:03,010 --> 00:18:08,600
so we've gone through things really

00:18:05,120 --> 00:18:12,740
quite quickly and I just thought I would

00:18:08,600 --> 00:18:14,720
finish with three quick statement the

00:18:12,740 --> 00:18:17,000
first thing is I really think that all

00:18:14,720 --> 00:18:20,150
of the people within the Python

00:18:17,000 --> 00:18:21,890
community should enjoy the flexibility

00:18:20,150 --> 00:18:24,320
that the data structures provided in the

00:18:21,890 --> 00:18:27,530
standard library give you you've got

00:18:24,320 --> 00:18:29,990
huge amounts of flexible and adaptable

00:18:27,530 --> 00:18:33,200
data structures which are really

00:18:29,990 --> 00:18:35,990
interesting to explore but in order to

00:18:33,200 --> 00:18:38,809
explore them I do recommend actually

00:18:35,990 --> 00:18:41,020
taking the time to inspect the standard

00:18:38,809 --> 00:18:43,910
library and that in fact not just

00:18:41,020 --> 00:18:46,580
exceeding the documentation but do dig

00:18:43,910 --> 00:18:48,559
through into the source code to see how

00:18:46,580 --> 00:18:51,470
things are implemented because it's

00:18:48,559 --> 00:18:52,970
often the case or at least in my

00:18:51,470 --> 00:18:57,049
experience as I was researching this

00:18:52,970 --> 00:18:59,470
talk that you'll see some really fun and

00:18:57,049 --> 00:19:01,730
creative ways to use the language and

00:18:59,470 --> 00:19:04,280
just just for your reference when you go

00:19:01,730 --> 00:19:06,470
into the source directory you want to

00:19:04,280 --> 00:19:08,240
find the C Python project and then the

00:19:06,470 --> 00:19:09,950
lib folder within there that's the

00:19:08,240 --> 00:19:11,480
standard library when it's implemented

00:19:09,950 --> 00:19:15,309
in Python it's kind of where you want to

00:19:11,480 --> 00:19:20,419
go and where I wanted to finish was that

00:19:15,309 --> 00:19:23,450
if you are curious about contributing go

00:19:20,419 --> 00:19:28,010
to this website Python mentors org it's

00:19:23,450 --> 00:19:29,750
a no danger no threat space for people

00:19:28,010 --> 00:19:32,900
who are interested to computing are

00:19:29,750 --> 00:19:34,280
interested in contributing and who are

00:19:32,900 --> 00:19:38,059
really interested in interacting with

00:19:34,280 --> 00:19:39,860
the core dev team and I'm sure that the

00:19:38,059 --> 00:19:40,970
members of the core dev team who are

00:19:39,860 --> 00:19:44,140
actually at the conference here would

00:19:40,970 --> 00:19:48,130
love to chat about about helping you out

00:19:44,140 --> 00:19:50,750
so then actually wraps up the talk and

00:19:48,130 --> 00:19:57,309
I'm happy to answer any questions about

00:19:50,750 --> 00:19:57,309
what we've chatted about so far thanks

00:20:02,710 --> 00:20:04,770

YouTube URL: https://www.youtube.com/watch?v=QQkbiGIQi4g


