Title: PyPy.js: What? How? Why? by Ryan Kelly
Publication date: 2014-08-17
Playlist: PyCon Australia 2014
Description: 
	PyPy.js is an experiment in building a fast, compliant, in-browser python interpreter.  By compiling the PyPy interpreter into javascript, and retargeting its JIT compiler to emit asmjs code at runtime, it is possible to run python code in the browser at speeds competitive with a native python environment.  This talk will demonstrate the combination of technologies that make such a thing possible, the results that have been achieved so far, and the challenges that still remain when trying to take python onto javascript's home turf.

We'll cover: an overview of PyPy and why it's a good fit for this type of project; an introduction to asmjs and the rise of javascript as a compile target; what it looks like when you smoosh these two technologies together; a comparison with other approaches such as brython; and some concrete suggestions for how the result might be useful in practice.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:06,680 --> 00:00:14,340
thanks for coming up this is me Ryan and

00:00:10,080 --> 00:00:17,430
as adjusted by day I build cloud servers

00:00:14,340 --> 00:00:21,510
and backends for Mozilla in a 50/50 mix

00:00:17,430 --> 00:00:23,640
of ottoman Nijs by night I find myself

00:00:21,510 --> 00:00:26,279
grappling with something of an

00:00:23,640 --> 00:00:28,380
existential dilemma so if you've known

00:00:26,279 --> 00:00:34,590
Elizabeth it's probably because we make

00:00:28,380 --> 00:00:36,660
this thing called fire box thank you but

00:00:34,590 --> 00:00:39,540
Mozilla as an organization and as a

00:00:36,660 --> 00:00:41,370
community its mission is a lot bigger

00:00:39,540 --> 00:00:44,969
than just making Firefox a really

00:00:41,370 --> 00:00:47,969
awesome web browser the stated mission

00:00:44,969 --> 00:00:51,690
of Mozilla is basically to protect and

00:00:47,969 --> 00:00:54,570
promote the open web as a shared global

00:00:51,690 --> 00:00:57,090
technical resource as a platform for

00:00:54,570 --> 00:00:59,250
individual empowerment for innovation

00:00:57,090 --> 00:01:00,960
and opportunity and when we talk about

00:00:59,250 --> 00:01:02,969
the where we're really talking about two

00:01:00,960 --> 00:01:05,160
different but interrelated things right

00:01:02,969 --> 00:01:07,229
on the one hand we have the technology

00:01:05,160 --> 00:01:10,200
stack of the web which I think like HTTP

00:01:07,229 --> 00:01:12,890
HTML the local data language and

00:01:10,200 --> 00:01:15,509
JavaScript that was invented in ten days

00:01:12,890 --> 00:01:18,390
we also have these kind of more squishy

00:01:15,509 --> 00:01:20,759
nebulous sociological cultural features

00:01:18,390 --> 00:01:22,170
of the web as we know it today and a

00:01:20,759 --> 00:01:23,580
really important one is is openness

00:01:22,170 --> 00:01:25,500
right if you want to publish something

00:01:23,580 --> 00:01:28,110
on a web you don't submit it to the

00:01:25,500 --> 00:01:29,490
webstore and wait six months for web to

00:01:28,110 --> 00:01:31,470
give you a rejection letter based on a

00:01:29,490 --> 00:01:32,880
technicality right you just put it up on

00:01:31,470 --> 00:01:36,209
the web and people can come and get to

00:01:32,880 --> 00:01:37,740
it likewise if you want to access stuff

00:01:36,209 --> 00:01:39,330
on the web you don't need to buy a

00:01:37,740 --> 00:01:41,090
particular device you don't need to

00:01:39,330 --> 00:01:43,259
install particular software

00:01:41,090 --> 00:01:45,840
pretty much everyone who's doing

00:01:43,259 --> 00:01:47,670
computing these days can get out stuff

00:01:45,840 --> 00:01:49,289
that's on the web so it's got some

00:01:47,670 --> 00:01:51,360
really interesting characteristics as a

00:01:49,289 --> 00:01:52,920
computing platform some people might

00:01:51,360 --> 00:01:54,149
think the last two there are jokes like

00:01:52,920 --> 00:01:55,920
people usually don't think of the

00:01:54,149 --> 00:01:58,440
Internet as being particularly secure or

00:01:55,920 --> 00:02:00,090
trustworthy but really the whole job of

00:01:58,440 --> 00:02:02,280
a browser when it's interacting with the

00:02:00,090 --> 00:02:03,420
web is to go on fetch code from a site

00:02:02,280 --> 00:02:05,550
that has probably never seen before

00:02:03,420 --> 00:02:07,679
right and execute it locally on your

00:02:05,550 --> 00:02:09,959
machine in a way that doesn't let them

00:02:07,679 --> 00:02:11,520
hack you right and also doesn't violate

00:02:09,959 --> 00:02:12,840
your privacy or your trust like it

00:02:11,520 --> 00:02:14,640
doesn't accidentally leak your browsing

00:02:12,840 --> 00:02:16,980
history to two random sites that you

00:02:14,640 --> 00:02:18,940
visit so there's this interesting kind

00:02:16,980 --> 00:02:20,710
of mix of

00:02:18,940 --> 00:02:24,430
of properties that are pretty unique to

00:02:20,710 --> 00:02:26,050
the web the dilemma is this I'm not

00:02:24,430 --> 00:02:29,290
really interested in any of the stuff in

00:02:26,050 --> 00:02:31,210
the column on the left run it but I'm

00:02:29,290 --> 00:02:33,520
really super interested in all the stuff

00:02:31,210 --> 00:02:35,440
on the right and I know a lot of people

00:02:33,520 --> 00:02:37,330
who look at the technology stack of the

00:02:35,440 --> 00:02:39,250
web and just go oh my god will the web

00:02:37,330 --> 00:02:41,770
please hurry up and die so that we can

00:02:39,250 --> 00:02:43,120
replace it with something better perhaps

00:02:41,770 --> 00:02:45,730
some of you in this room feel this way

00:02:43,120 --> 00:02:47,380
and that's fine the thing is that

00:02:45,730 --> 00:02:48,850
although these two things are very

00:02:47,380 --> 00:02:50,590
different they're also very intertwined

00:02:48,850 --> 00:02:52,300
so you can't just kind of throw one out

00:02:50,590 --> 00:02:53,860
and keep the other and if you give up

00:02:52,300 --> 00:02:55,450
sort of the technology stack of the web

00:02:53,860 --> 00:02:56,770
well maybe we're giving up all of this

00:02:55,450 --> 00:02:59,800
other good stuff that we may not get

00:02:56,770 --> 00:03:01,690
back so error when I look at that

00:02:59,800 --> 00:03:03,340
picture I think you know for all its

00:03:01,690 --> 00:03:04,720
flaws the web is worth keeping and if

00:03:03,340 --> 00:03:07,090
we're going to keep it we might as well

00:03:04,720 --> 00:03:08,830
try and improve it right and our CTO

00:03:07,090 --> 00:03:11,710
andreas puts it this way so basically

00:03:08,830 --> 00:03:13,180
anything that the web can't do or isn't

00:03:11,710 --> 00:03:14,950
faster and better at their native

00:03:13,180 --> 00:03:16,450
technologies any time someone would

00:03:14,950 --> 00:03:18,550
reach for a native technology we should

00:03:16,450 --> 00:03:20,620
consider that a bug in the web my

00:03:18,550 --> 00:03:22,330
response to that is actually you andreas

00:03:20,620 --> 00:03:23,020
I did find a bug in the web thanks for

00:03:22,330 --> 00:03:26,920
bringing that up

00:03:23,020 --> 00:03:29,410
I want to write in Python Yeah right so

00:03:26,920 --> 00:03:30,700
it was about this time last year I could

00:03:29,410 --> 00:03:33,310
no you last year I started hacking on

00:03:30,700 --> 00:03:36,040
one possible fix for this problem by

00:03:33,310 --> 00:03:38,680
play Jas and I want to cover three broad

00:03:36,040 --> 00:03:40,870
topic so basically what how and why so

00:03:38,680 --> 00:03:42,670
the first question is what and in a

00:03:40,870 --> 00:03:44,740
sense that's really simple right it's

00:03:42,670 --> 00:03:47,920
the pipe ipython interpreter compiled

00:03:44,740 --> 00:03:50,440
for the web so today I can print you

00:03:47,920 --> 00:03:52,120
know hello world or whatever and do pipe

00:03:50,440 --> 00:03:55,600
any kind of things which is kind of cool

00:03:52,120 --> 00:03:57,010
but I'm certainly not the first to tread

00:03:55,600 --> 00:03:57,850
this ground and I certainly won't be the

00:03:57,010 --> 00:03:59,500
last so

00:03:57,850 --> 00:04:01,420
probably worth a little bit more of a

00:03:59,500 --> 00:04:04,360
detailed look at exactly what is on

00:04:01,420 --> 00:04:05,950
offer here so the first thing to note is

00:04:04,360 --> 00:04:07,630
that this is very much an experiment I

00:04:05,950 --> 00:04:09,040
mean a little bit better position than

00:04:07,630 --> 00:04:11,680
this dog I know enough about what I'm

00:04:09,040 --> 00:04:12,880
doing to be dangerous but you know this

00:04:11,680 --> 00:04:14,080
is not something I want to encourage you

00:04:12,880 --> 00:04:15,790
to go home and rewrite all of your

00:04:14,080 --> 00:04:17,890
production stacks in it's just an

00:04:15,790 --> 00:04:20,530
experiment in what's possible with the

00:04:17,890 --> 00:04:22,030
technologies of the modern web so the

00:04:20,530 --> 00:04:24,220
first thing that I focused on is pipe

00:04:22,030 --> 00:04:26,860
ijs is a really compliance path in

00:04:24,220 --> 00:04:28,270
environment so as a simple example we

00:04:26,860 --> 00:04:30,070
actually have big gnomes by default

00:04:28,270 --> 00:04:32,439
right and some of these other projects

00:04:30,070 --> 00:04:34,959
to try to get Python like stuff into the

00:04:32,439 --> 00:04:37,509
basically compiled down to JavaScript's

00:04:34,959 --> 00:04:38,499
number model which is doubles which is

00:04:37,509 --> 00:04:40,149
fine though that's a perfectly valid

00:04:38,499 --> 00:04:42,429
choice it runs fast and all this sort of

00:04:40,149 --> 00:04:44,499
stuff but it's not Python in a very real

00:04:42,429 --> 00:04:46,949
sense we also have lots of other fun

00:04:44,499 --> 00:04:50,289
stuff like you know mutable Global's

00:04:46,949 --> 00:04:54,219
that work properly we have even funner

00:04:50,289 --> 00:04:56,739
stuff like Cisco get frame which is one

00:04:54,219 --> 00:04:58,569
of my favorites so basically this is

00:04:56,739 --> 00:05:00,279
designed to look as much like a Python

00:04:58,569 --> 00:05:02,769
environment you would get natively as

00:05:00,279 --> 00:05:05,289
possible on the web the other thing that

00:05:02,769 --> 00:05:07,509
it tries to do is be fast now not

00:05:05,289 --> 00:05:08,889
necessarily like Fortran number

00:05:07,509 --> 00:05:11,110
crunching fast although that would be

00:05:08,889 --> 00:05:13,239
pretty okay if we could achieve that but

00:05:11,110 --> 00:05:14,739
the question is can we make Python in

00:05:13,239 --> 00:05:16,389
the browser fast enough to take

00:05:14,739 --> 00:05:18,189
performance off the table as a

00:05:16,389 --> 00:05:20,229
consideration there all of the other

00:05:18,189 --> 00:05:21,909
nice properties of the web and of Python

00:05:20,229 --> 00:05:23,349
kind of come into play and it's soso

00:05:21,909 --> 00:05:25,619
maybe a better word would be not slow

00:05:23,349 --> 00:05:27,909
but we'll see how we go I've been

00:05:25,619 --> 00:05:30,819
experimenting with this delightful

00:05:27,909 --> 00:05:32,709
little benchmark called Python which

00:05:30,819 --> 00:05:34,449
ships by default with Python I don't

00:05:32,709 --> 00:05:36,579
want to make any grand claims again

00:05:34,449 --> 00:05:38,139
that's you know the validity of this as

00:05:36,579 --> 00:05:39,939
a macro benchmark it's a thing that you

00:05:38,139 --> 00:05:42,519
can run and it sort of measures how fast

00:05:39,939 --> 00:05:44,619
it goes right so this is the native C

00:05:42,519 --> 00:05:47,559
Python on my machine it gets about 70 to

00:05:44,619 --> 00:05:50,019
80 thousand PI students per second this

00:05:47,559 --> 00:05:56,079
is PI play on the web I'll do the same

00:05:50,019 --> 00:05:58,389
thing there and it gets approximately

00:05:56,079 --> 00:05:59,919
half that right 30 to 40,000 which for a

00:05:58,389 --> 00:06:01,599
thing running inside a web browser is

00:05:59,919 --> 00:06:04,599
pretty good half the speed of the native

00:06:01,599 --> 00:06:06,999
Python what I'm very sneakily done here

00:06:04,599 --> 00:06:08,800
though is primed up the widget and it's

00:06:06,999 --> 00:06:10,269
generated some specialized code for me

00:06:08,800 --> 00:06:12,360
at runtime so if I run this a second

00:06:10,269 --> 00:06:15,009
time it'll actually come in at nearly

00:06:12,360 --> 00:06:17,079
140,000 Firestone's per second which is

00:06:15,009 --> 00:06:19,349
faster than the native C Python on my

00:06:17,079 --> 00:06:21,789
machine which is pretty cool

00:06:19,349 --> 00:06:23,949
it's actually really interesting to have

00:06:21,789 --> 00:06:25,659
a look at the way this develops so I

00:06:23,949 --> 00:06:27,159
showed you that in Firefox and it came

00:06:25,659 --> 00:06:28,779
out like so if you were in the same

00:06:27,159 --> 00:06:31,119
experiment under chrome it would start

00:06:28,779 --> 00:06:33,579
off a lot slower because Firefox has

00:06:31,119 --> 00:06:35,349
some special case handling of the kind

00:06:33,579 --> 00:06:36,969
of JavaScript they're using here but the

00:06:35,349 --> 00:06:39,909
steady state behavior in chrome is much

00:06:36,969 --> 00:06:41,559
faster because Firefox has some special

00:06:39,909 --> 00:06:43,269
case handling of the JavaScript that

00:06:41,559 --> 00:06:44,539
doesn't work particularly well for I'm

00:06:43,269 --> 00:06:46,069
doing here

00:06:44,539 --> 00:06:47,479
and of course if you throw a native

00:06:46,069 --> 00:06:49,400
Python interpreter into the mix

00:06:47,479 --> 00:06:52,400
obviously it's going to be the fastest

00:06:49,400 --> 00:06:55,189
but I think you know the gap there is

00:06:52,400 --> 00:06:56,539
not embarrassingly large for kind of an

00:06:55,189 --> 00:06:58,039
experiment in technologies on the web

00:06:56,539 --> 00:07:00,740
and I think there's a lot of scope to

00:06:58,039 --> 00:07:03,080
close that in a lot of places so I'm

00:07:00,740 --> 00:07:05,300
saying well we're probably approaching

00:07:03,080 --> 00:07:08,689
fast enough for our purposes doing

00:07:05,300 --> 00:07:10,249
interesting things on the web and the

00:07:08,689 --> 00:07:13,039
third thing I really want to focus on is

00:07:10,249 --> 00:07:15,439
is being a proper in browser path and

00:07:13,039 --> 00:07:17,240
environment so this isn't just a Python

00:07:15,439 --> 00:07:18,770
console on the web but you can go and

00:07:17,240 --> 00:07:23,150
type I think commands into write this is

00:07:18,770 --> 00:07:25,099
a thing that's really of the web as much

00:07:23,150 --> 00:07:26,389
as it's just on the web so on the one

00:07:25,099 --> 00:07:27,919
hand that means having a proper

00:07:26,389 --> 00:07:31,189
JavaScript API so it's like you can

00:07:27,919 --> 00:07:32,629
create a new pipe IVM right and then it

00:07:31,189 --> 00:07:34,279
gives you back these promises all the

00:07:32,629 --> 00:07:36,979
JavaScript kids using promises these

00:07:34,279 --> 00:07:39,770
days so you can you know do a callback

00:07:36,979 --> 00:07:42,219
for when for when it's initialized the

00:07:39,770 --> 00:07:44,360
JavaScript API basically gives you three

00:07:42,219 --> 00:07:46,069
pieces of functionality you can set

00:07:44,360 --> 00:07:48,169
global variables in the interpreter you

00:07:46,069 --> 00:07:49,699
can evaluate code to change the values

00:07:48,169 --> 00:07:51,520
of those variables and you can read code

00:07:49,699 --> 00:07:56,180
back that read those variables back out

00:07:51,520 --> 00:07:58,099
which is a pretty coarse API right the

00:07:56,180 --> 00:07:59,330
reason for that is basically why would

00:07:58,099 --> 00:08:01,129
you want to spend your time in

00:07:59,330 --> 00:08:03,199
JavaScript when you can spend your time

00:08:01,129 --> 00:08:04,430
in Python so this is like this is enough

00:08:03,199 --> 00:08:06,979
to bootstrap you into a Python

00:08:04,430 --> 00:08:09,009
environment now go over to Python and do

00:08:06,979 --> 00:08:11,569
all your interesting stuff over there so

00:08:09,009 --> 00:08:14,419
my in browser Python has this cool

00:08:11,569 --> 00:08:17,270
little module called j/s which i can use

00:08:14,419 --> 00:08:19,249
to do the equivalent of what the

00:08:17,270 --> 00:08:20,479
javascript environment was doing all

00:08:19,249 --> 00:08:22,339
right and you see it gives me back a

00:08:20,479 --> 00:08:23,839
handle to a JavaScript number because

00:08:22,339 --> 00:08:26,029
JavaScript numbers are not the same as

00:08:23,839 --> 00:08:28,099
Python numbers they're doubles as it's

00:08:26,029 --> 00:08:30,229
kind of showing up here but they do know

00:08:28,099 --> 00:08:32,449
how to kind of cooperate with Python

00:08:30,229 --> 00:08:33,769
numbers transparently right because we

00:08:32,449 --> 00:08:37,909
have magic methods and all the sort of

00:08:33,769 --> 00:08:39,860
fun stuff I also have access to the

00:08:37,909 --> 00:08:42,669
JavaScript global namespace so I can do

00:08:39,860 --> 00:08:42,669
fun stuff like this

00:08:44,319 --> 00:08:50,230
yeah that is you know that's the latest

00:08:47,240 --> 00:08:52,730
in modern web tech no no no I also have

00:08:50,230 --> 00:08:54,680
jQuery in the page here because I'm

00:08:52,730 --> 00:08:56,600
using it for some of my slides so I can

00:08:54,680 --> 00:08:57,329
do cool stuff like find this console

00:08:56,600 --> 00:09:02,189
window

00:08:57,329 --> 00:09:03,779
and change its background color to

00:09:02,189 --> 00:09:09,959
automate purple purple is pretty cool

00:09:03,779 --> 00:09:13,769
right get rid of that monstrosity I can

00:09:09,959 --> 00:09:15,689
also make a little callback function

00:09:13,769 --> 00:09:21,049
like this and I'll just print out a nice

00:09:15,689 --> 00:09:24,420
wrapper of the elements you know HTML

00:09:21,049 --> 00:09:25,920
all of it because they're huge so then I

00:09:24,420 --> 00:09:29,579
could do like well find all of the

00:09:25,920 --> 00:09:30,839
slides in this presentation and call

00:09:29,579 --> 00:09:32,730
this callback function on them and

00:09:30,839 --> 00:09:36,989
that's you get all the you know HTML

00:09:32,730 --> 00:09:38,189
right so I'm working on trying to really

00:09:36,989 --> 00:09:39,329
say what would it look like if I write

00:09:38,189 --> 00:09:40,889
you've got Python it's in the browser

00:09:39,329 --> 00:09:42,809
and how does it how does it get into the

00:09:40,889 --> 00:09:44,999
browser environment so there are a lot

00:09:42,809 --> 00:09:46,559
of rough edges here like here's garbage

00:09:44,999 --> 00:09:48,089
collection and a whole bunch of crazy

00:09:46,559 --> 00:09:49,980
stuff that's not gonna work quite right

00:09:48,089 --> 00:09:51,629
but I'm actually pretty happy with how

00:09:49,980 --> 00:09:53,429
that's that's come together I was like I

00:09:51,629 --> 00:09:56,759
think I started that about three weeks

00:09:53,429 --> 00:10:00,689
ago and it kind of fell into place quite

00:09:56,759 --> 00:10:03,329
nicely so to kind of tie all of that

00:10:00,689 --> 00:10:06,649
together basically what I'm trying to do

00:10:03,329 --> 00:10:08,910
here is experiment with building fast

00:10:06,649 --> 00:10:11,879
compliant and in browser path and

00:10:08,910 --> 00:10:13,499
environment and I haven't seen a lot of

00:10:11,879 --> 00:10:15,929
other projects that kind of hit all

00:10:13,499 --> 00:10:17,129
three of those you know there are

00:10:15,929 --> 00:10:19,799
projects that will take Python and

00:10:17,129 --> 00:10:21,449
translate it into JavaScript and it run

00:10:19,799 --> 00:10:24,029
really fast but you kind of give up a

00:10:21,449 --> 00:10:26,249
lot of the edge cases and cool tricks

00:10:24,029 --> 00:10:27,799
that make Python Python there are

00:10:26,249 --> 00:10:29,970
projects that put a lot of work into

00:10:27,799 --> 00:10:32,220
simulating a full Python environment in

00:10:29,970 --> 00:10:34,739
JavaScript but you know they pay for it

00:10:32,220 --> 00:10:36,600
in terms of performance so I'm hoping

00:10:34,739 --> 00:10:38,009
that we can you know with with some of

00:10:36,600 --> 00:10:39,509
the new technologies that are coming out

00:10:38,009 --> 00:10:41,970
both in the Python world and in the

00:10:39,509 --> 00:10:43,499
JavaScript world maybe we can you know

00:10:41,970 --> 00:10:47,850
come up with something that really ticks

00:10:43,499 --> 00:10:50,759
all of these boxes there is a bus on

00:10:47,850 --> 00:10:52,589
this slide but this is as I said in

00:10:50,759 --> 00:10:54,239
experiment and I don't want to I just

00:10:52,589 --> 00:10:55,860
come out here and like put on a show

00:10:54,239 --> 00:10:57,899
this is the best thing ever everyone

00:10:55,860 --> 00:10:59,160
needs to load this up so there are a

00:10:57,899 --> 00:11:00,569
couple of things that are pretty rough

00:10:59,160 --> 00:11:02,249
and a couple of things that'll probably

00:11:00,569 --> 00:11:04,829
be a deal-breaker for you taking this

00:11:02,249 --> 00:11:06,539
home and running it right now but it's

00:11:04,829 --> 00:11:08,399
working enough that you know maybe we

00:11:06,539 --> 00:11:10,139
can start doing interesting things the

00:11:08,399 --> 00:11:11,160
first is that sometimes it's not so fast

00:11:10,139 --> 00:11:13,410
so I want to show

00:11:11,160 --> 00:11:15,240
another benchmark which may be more

00:11:13,410 --> 00:11:18,720
indicative of real-life performance who

00:11:15,240 --> 00:11:19,920
knows with these things summing up a

00:11:18,720 --> 00:11:21,180
bunch of numbers right that's pretty

00:11:19,920 --> 00:11:28,259
fast we should be able to do that pretty

00:11:21,180 --> 00:11:34,680
fast should be I would do that pretty

00:11:28,259 --> 00:11:36,899
fast if I put one more zero on area to

00:11:34,680 --> 00:11:39,269
give me a this script is not responding

00:11:36,899 --> 00:11:42,839
warning but then like this the wait for

00:11:39,269 --> 00:11:45,449
ten minutes for this isuh gone what's

00:11:42,839 --> 00:11:47,790
ironic is that if I had done pie pie

00:11:45,449 --> 00:11:50,069
without its JIT it would run faster than

00:11:47,790 --> 00:11:52,139
this example so remember I mentioned

00:11:50,069 --> 00:11:54,300
there was a bug in Firefox they had

00:11:52,139 --> 00:11:56,490
performance problems it turns out that

00:11:54,300 --> 00:11:58,769
this code is so like the the inner loop

00:11:56,490 --> 00:12:00,959
of this is like so small and it's you

00:11:58,769 --> 00:12:04,019
know it's really dominated by by

00:12:00,959 --> 00:12:05,339
infrastructure stuff that basically all

00:12:04,019 --> 00:12:07,470
you're seeing is this huge performance

00:12:05,339 --> 00:12:10,050
segregation in this edge case of Firefox

00:12:07,470 --> 00:12:11,550
is JavaScript so you know I'm fairly

00:12:10,050 --> 00:12:14,180
confident that we can get away from

00:12:11,550 --> 00:12:16,139
pathological bad behavior like this

00:12:14,180 --> 00:12:17,790
where we're not there yet so I don't

00:12:16,139 --> 00:12:19,860
want to give you any false notions what

00:12:17,790 --> 00:12:21,779
I really like to see is like pi PI speed

00:12:19,860 --> 00:12:23,519
Center with lots of more realistic

00:12:21,779 --> 00:12:25,709
benchmarks we'll see how we go the other

00:12:23,519 --> 00:12:26,880
thing is it is humongous and I mean this

00:12:25,709 --> 00:12:28,800
is the files that you need to download

00:12:26,880 --> 00:12:30,060
to run this thing and let me tell you

00:12:28,800 --> 00:12:32,550
when you're measuring the size of your

00:12:30,060 --> 00:12:36,569
javascript files in megabytes you're

00:12:32,550 --> 00:12:39,209
gonna have a bad time on the internet a

00:12:36,569 --> 00:12:40,439
lot of this is is just stuff it needs to

00:12:39,209 --> 00:12:42,149
be chipped away like there's sixteen

00:12:40,439 --> 00:12:43,620
thousand function definitions in there

00:12:42,149 --> 00:12:45,839
right now almost all of which will never

00:12:43,620 --> 00:12:47,910
be called but you know it's a long slow

00:12:45,839 --> 00:12:51,420
road of figuring out how to get this

00:12:47,910 --> 00:12:53,370
down is that acceptable for you almost

00:12:51,420 --> 00:12:55,649
certainly not could it be acceptable to

00:12:53,370 --> 00:12:57,689
you if it was a little smaller maybe I

00:12:55,649 --> 00:12:59,399
want you know as it gets smaller the the

00:12:57,689 --> 00:13:02,730
potential applications will grow so

00:12:59,399 --> 00:13:03,839
that's that's a work in progress oh yeah

00:13:02,730 --> 00:13:06,769
it's going to do this this is how long

00:13:03,839 --> 00:13:09,209
it takes to load up from my local disk

00:13:06,769 --> 00:13:11,610
when you're parsing 16,000 JavaScript

00:13:09,209 --> 00:13:14,790
functions like which is not a lifetime

00:13:11,610 --> 00:13:17,189
but it's not quick so anyway what I'm

00:13:14,790 --> 00:13:19,319
really interested in with this is is the

00:13:17,189 --> 00:13:21,329
hell because it sort of came about from

00:13:19,319 --> 00:13:22,649
my interest in two independent projects

00:13:21,329 --> 00:13:24,689
one in the JavaScript world and one in

00:13:22,649 --> 00:13:25,380
the Python world that when you say them

00:13:24,689 --> 00:13:28,860
out

00:13:25,380 --> 00:13:31,950
sounds stupid but actually work really

00:13:28,860 --> 00:13:33,780
well so the first is Popeye and who's

00:13:31,950 --> 00:13:34,320
familiar with Popeye almost every hand

00:13:33,780 --> 00:13:36,180
goes up

00:13:34,320 --> 00:13:38,580
Popeye is a Python interpreter written

00:13:36,180 --> 00:13:40,860
in Python hence the name as well what

00:13:38,580 --> 00:13:43,770
like how on earth could that possibly be

00:13:40,860 --> 00:13:46,110
fast and I have two tricks to it one is

00:13:43,770 --> 00:13:48,540
that they write it in this restricted

00:13:46,110 --> 00:13:50,790
subset of Python called our Python which

00:13:48,540 --> 00:13:53,400
if you squint and if you exert a

00:13:50,790 --> 00:13:55,380
incredible force of will in your tool

00:13:53,400 --> 00:13:57,000
chain you can take this restricted

00:13:55,380 --> 00:14:00,450
subset of Python and compile it down

00:13:57,000 --> 00:14:02,400
into C and then you can compile that

00:14:00,450 --> 00:14:03,780
with GCC and you get like a native

00:14:02,400 --> 00:14:05,970
executable rather than something that

00:14:03,780 --> 00:14:07,380
runs in Python the other trick that they

00:14:05,970 --> 00:14:10,740
have is that they built a just in time

00:14:07,380 --> 00:14:12,120
compiler generator because building just

00:14:10,740 --> 00:14:14,190
the just-in-time compiler would have

00:14:12,120 --> 00:14:15,720
been too boring I don't know but you you

00:14:14,190 --> 00:14:17,520
have this thing written in Python and

00:14:15,720 --> 00:14:20,430
during the process of translating it

00:14:17,520 --> 00:14:21,960
into c this magic JIT compiler generator

00:14:20,430 --> 00:14:24,210
like examines the structure of your

00:14:21,960 --> 00:14:26,130
interpreter loops and figures out how to

00:14:24,210 --> 00:14:28,350
generate a just-in-time compiler for the

00:14:26,130 --> 00:14:30,240
thing that you're compiling so in

00:14:28,350 --> 00:14:31,410
practice this is what the pipe eye tool

00:14:30,240 --> 00:14:32,790
chain looks like right you start with

00:14:31,410 --> 00:14:35,610
this interpreter written in Python you

00:14:32,790 --> 00:14:38,130
run it through our Python to get a bunch

00:14:35,610 --> 00:14:40,050
of C files you can pylos with GCC to get

00:14:38,130 --> 00:14:42,510
a native interpreter that you can then

00:14:40,050 --> 00:14:44,430
stuff your path encoding to it will

00:14:42,510 --> 00:14:46,050
execute your path in code and go along

00:14:44,430 --> 00:14:47,610
and figure out oh actually these paths

00:14:46,050 --> 00:14:50,160
through the code are really hot I'll

00:14:47,610 --> 00:14:52,650
generate at runtime like specialized

00:14:50,160 --> 00:14:54,630
native code so in a sense you wind up

00:14:52,650 --> 00:14:57,900
sort of running an approximation of your

00:14:54,630 --> 00:15:00,450
Python code natively and that's why pipe

00:14:57,900 --> 00:15:02,580
I sort of manages to be so fast which is

00:15:00,450 --> 00:15:04,860
from where they start is an astonishing

00:15:02,580 --> 00:15:07,710
feat of engineering my interest in it is

00:15:04,860 --> 00:15:09,990
it's explicitly designed as a platform

00:15:07,710 --> 00:15:11,310
for hacking and experimentation all

00:15:09,990 --> 00:15:13,230
right so there's you know really nice

00:15:11,310 --> 00:15:15,450
layering and separation of concerns you

00:15:13,230 --> 00:15:16,530
can plug bits in and out they want to

00:15:15,450 --> 00:15:18,330
try like different dictionary

00:15:16,530 --> 00:15:20,790
implementations or a different back-end

00:15:18,330 --> 00:15:22,800
and things like that it's really really

00:15:20,790 --> 00:15:26,280
suited for that and kind of the the

00:15:22,800 --> 00:15:27,360
speed thing is a nice little bonus the

00:15:26,280 --> 00:15:28,620
other project that's really interesting

00:15:27,360 --> 00:15:31,560
at the moment is a thing called in

00:15:28,620 --> 00:15:33,180
scripting but in scripting does is it's

00:15:31,560 --> 00:15:35,580
basically a back-end for the LLVM

00:15:33,180 --> 00:15:37,860
compiler tool chain that instead of

00:15:35,580 --> 00:15:39,030
generating like I don't know x86 or a RM

00:15:37,860 --> 00:15:41,100
assembly

00:15:39,030 --> 00:15:43,860
it's a compiler back-end that generates

00:15:41,100 --> 00:15:45,090
JavaScript which again is just like how

00:15:43,860 --> 00:15:48,270
could that ever possibly be a useful

00:15:45,090 --> 00:15:51,060
thing but it turns out it can be which

00:15:48,270 --> 00:15:52,680
says a lot about modern JavaScript it's

00:15:51,060 --> 00:15:54,120
also like a bunch of supporting

00:15:52,680 --> 00:15:56,400
infrastructure for this stuff so it's

00:15:54,120 --> 00:15:58,230
basically a whole simulated POSIX

00:15:56,400 --> 00:16:00,480
environment like a file system and

00:15:58,230 --> 00:16:02,660
stubbed out process management functions

00:16:00,480 --> 00:16:04,980
that don't do anything and I you know

00:16:02,660 --> 00:16:07,650
get time and all of these POSIX C

00:16:04,980 --> 00:16:10,470
functions the guy who built it

00:16:07,650 --> 00:16:12,960
originally reporting games to the web so

00:16:10,470 --> 00:16:13,980
I met him in the US and it's like how on

00:16:12,960 --> 00:16:16,500
earth did you have this this

00:16:13,980 --> 00:16:18,540
terrifically awful awesome crazy idea

00:16:16,500 --> 00:16:22,920
he's like I was writing this game in C++

00:16:18,540 --> 00:16:24,090
and I wanted to put it on the web but

00:16:22,920 --> 00:16:29,220
that wasn't the entirety of his

00:16:24,090 --> 00:16:30,870
explanation I'm cool I saw it you say so

00:16:29,220 --> 00:16:32,550
the way it works is is astonishingly

00:16:30,870 --> 00:16:34,110
simple for what it does it's like a

00:16:32,550 --> 00:16:35,820
standard cross compiler you start with

00:16:34,110 --> 00:16:38,400
some C code you run it through this

00:16:35,820 --> 00:16:40,620
wrapper around your LLVM compiler tool

00:16:38,400 --> 00:16:43,280
chain it spits out some JavaScript when

00:16:40,620 --> 00:16:45,270
you give that JavaScript to web browser

00:16:43,280 --> 00:16:47,400
modern JavaScript engines themselves

00:16:45,270 --> 00:16:50,340
have these just-in-time compilers inside

00:16:47,400 --> 00:16:52,500
them so it will take that JavaScript

00:16:50,340 --> 00:16:54,570
start executing it figure out what parts

00:16:52,500 --> 00:16:56,340
are hot and trying to generate a native

00:16:54,570 --> 00:16:58,200
equivalent of the hot parts of your code

00:16:56,340 --> 00:17:00,330
of your code so you kind of eventually

00:16:58,200 --> 00:17:01,710
get to the same point you would get to

00:17:00,330 --> 00:17:04,140
with a native compiler but going through

00:17:01,710 --> 00:17:05,670
javascript in the browser the reason

00:17:04,140 --> 00:17:09,030
this can work in any kind of sensible

00:17:05,670 --> 00:17:10,890
fashion is that the guy who is building

00:17:09,030 --> 00:17:13,439
this basically discovered this tiny

00:17:10,890 --> 00:17:16,680
subset of JavaScript which if you squint

00:17:13,439 --> 00:17:19,589
is like a little tiny virtual 32-bit CPU

00:17:16,680 --> 00:17:22,520
buried in this horrible mess of an

00:17:19,589 --> 00:17:24,959
object system of JavaScript right and

00:17:22,520 --> 00:17:26,880
basically the code looks like this and

00:17:24,959 --> 00:17:29,460
there's a bunch of trickery going on in

00:17:26,880 --> 00:17:31,200
this in this code so the first thing

00:17:29,460 --> 00:17:33,600
that notices we're taking a closure so

00:17:31,200 --> 00:17:35,400
we're making a function that creates

00:17:33,600 --> 00:17:37,800
other functions inside of itself and

00:17:35,400 --> 00:17:40,170
inside that closure we're taking a local

00:17:37,800 --> 00:17:42,750
reference to math dot square root in

00:17:40,170 --> 00:17:44,870
JavaScript what this does is means that

00:17:42,750 --> 00:17:47,220
that reference will now immutable

00:17:44,870 --> 00:17:48,870
there's no way any code in the whole

00:17:47,220 --> 00:17:52,050
system can make square root be some

00:17:48,870 --> 00:17:53,460
other function than math dot square root

00:17:52,050 --> 00:17:56,400
when we get down to working with

00:17:53,460 --> 00:17:58,470
variables like where we're casting them

00:17:56,400 --> 00:18:00,450
explicitly to in this case doubles with

00:17:58,470 --> 00:18:02,370
a little plus sign in front of them and

00:18:00,450 --> 00:18:04,230
because of the way JavaScript works like

00:18:02,370 --> 00:18:05,400
once you've done that cast it now knows

00:18:04,230 --> 00:18:08,490
that the thing you're dealing with is a

00:18:05,400 --> 00:18:10,110
double so as in J s which I think I have

00:18:08,490 --> 00:18:12,390
the name yes as in J s is like this

00:18:10,110 --> 00:18:14,730
collection of odd hacks and tricks that

00:18:12,390 --> 00:18:16,620
you can do to make your JavaScript to be

00:18:14,730 --> 00:18:18,300
really friendly to a JIT compiler and it

00:18:16,620 --> 00:18:19,470
turns out that modern JavaScript engines

00:18:18,300 --> 00:18:21,809
run this stuff really fast

00:18:19,470 --> 00:18:25,020
so by omitting this kind of crazy

00:18:21,809 --> 00:18:26,520
low-level subset of JavaScript it can

00:18:25,020 --> 00:18:28,920
actually be really efficient which is

00:18:26,520 --> 00:18:30,120
amazing so I have this brilliant idea I

00:18:28,920 --> 00:18:31,290
said let's squish the two of these

00:18:30,120 --> 00:18:33,270
together it's going to come out

00:18:31,290 --> 00:18:35,220
beautiful we'll start with a Python

00:18:33,270 --> 00:18:36,630
interpreter written in Python we'll run

00:18:35,220 --> 00:18:38,610
it through this translation tool train

00:18:36,630 --> 00:18:40,200
to get a bunch of C files well compile

00:18:38,610 --> 00:18:41,460
the C files to JavaScript using in

00:18:40,200 --> 00:18:43,200
script and we'll put them in the browser

00:18:41,460 --> 00:18:45,150
which will get them into native code I

00:18:43,200 --> 00:18:47,309
will take my Python script and feed it

00:18:45,150 --> 00:18:48,720
into this native code and it will start

00:18:47,309 --> 00:18:50,429
executing it and it will figure out what

00:18:48,720 --> 00:18:51,990
the hut parties are and then it will

00:18:50,429 --> 00:18:54,450
generate at runtime specialized

00:18:51,990 --> 00:18:56,010
JavaScript based on you know the

00:18:54,450 --> 00:18:57,420
behavior of the code it's running which

00:18:56,010 --> 00:18:59,940
the browser will happily convert back

00:18:57,420 --> 00:19:05,580
into native code so I've got to the same

00:18:59,940 --> 00:19:07,500
place I wanted originally where I'm

00:19:05,580 --> 00:19:09,510
running this kind of nativist version of

00:19:07,500 --> 00:19:10,980
my code be honest whose first thought

00:19:09,510 --> 00:19:13,470
when they saw this going on was

00:19:10,980 --> 00:19:15,090
approximately that is awful that is a

00:19:13,470 --> 00:19:16,350
horrific collection of backwards

00:19:15,090 --> 00:19:20,250
compatibility hacks and laying

00:19:16,350 --> 00:19:22,380
violations true but consider this this

00:19:20,250 --> 00:19:24,330
quote unquote assembly code that is

00:19:22,380 --> 00:19:27,030
being generated by the JIT when it hits

00:19:24,330 --> 00:19:29,280
the CPU gets translated into the CPUs

00:19:27,030 --> 00:19:32,610
own like internal language of micro

00:19:29,280 --> 00:19:34,170
operations because like x86 is 30 odd

00:19:32,610 --> 00:19:37,020
years of backwards compatibility hacks

00:19:34,170 --> 00:19:38,820
on a thing designed in 1978 and the CPU

00:19:37,020 --> 00:19:40,170
will try and like predict what branches

00:19:38,820 --> 00:19:42,390
it's going to take and speculatively

00:19:40,170 --> 00:19:43,530
execute them rearrange your instructions

00:19:42,390 --> 00:19:45,929
so that it can do them in a more

00:19:43,530 --> 00:19:47,730
efficient way so I submit to you that

00:19:45,929 --> 00:19:49,530
this is indeed an awful collection of

00:19:47,730 --> 00:19:51,440
backwards compatibility hacks but the

00:19:49,530 --> 00:19:54,270
entire edifice of modern computing is

00:19:51,440 --> 00:19:56,540
exactly this kind of awful all the way

00:19:54,270 --> 00:19:56,540
down

00:19:58,010 --> 00:20:03,930
so perhaps the question that you have

00:20:00,120 --> 00:20:05,130
right now is why I think my feelings on

00:20:03,930 --> 00:20:06,930
the matter were best summed up by this

00:20:05,130 --> 00:20:08,970
Saturday morning breakfast cereal

00:20:06,930 --> 00:20:10,230
cartoon and when people say why they

00:20:08,970 --> 00:20:12,150
kind of expect you to go into this

00:20:10,230 --> 00:20:14,190
advocacy mode so this guy is a science

00:20:12,150 --> 00:20:15,780
advocate but the same applies for for

00:20:14,190 --> 00:20:17,430
engineering so why is this thing

00:20:15,780 --> 00:20:19,620
important oh it has lots of really

00:20:17,430 --> 00:20:21,390
practical applications in blah blah blah

00:20:19,620 --> 00:20:23,970
I am unashamedly a lot more like this

00:20:21,390 --> 00:20:25,500
guy except without the swearing oh hey

00:20:23,970 --> 00:20:27,170
why are you doing this because it's

00:20:25,500 --> 00:20:29,309
awesome

00:20:27,170 --> 00:20:31,170
but seriously this is this is

00:20:29,309 --> 00:20:32,640
unapologetically a playground for me

00:20:31,170 --> 00:20:34,620
first and foremost like this is some

00:20:32,640 --> 00:20:35,850
really awesome technologies that seem

00:20:34,620 --> 00:20:37,440
like they could have this fantastic

00:20:35,850 --> 00:20:38,790
synergy if you put them together in the

00:20:37,440 --> 00:20:41,850
right way let's see what the

00:20:38,790 --> 00:20:44,640
possibilities are that said I think you

00:20:41,850 --> 00:20:45,990
know maybe not right now but going

00:20:44,640 --> 00:20:47,580
forward there will be more and more

00:20:45,990 --> 00:20:49,080
potential practical applications for

00:20:47,580 --> 00:20:51,270
this so people's first thought obviously

00:20:49,080 --> 00:20:53,250
is a Python in the browser I want to do

00:20:51,270 --> 00:20:55,620
this I want to write like script tags

00:20:53,250 --> 00:20:57,750
text equals Python and I just want to

00:20:55,620 --> 00:21:00,000
say you could totally do this with pi PI

00:20:57,750 --> 00:21:03,600
J's right now let me reiterate something

00:21:00,000 --> 00:21:05,400
I said earlier in the talk if your users

00:21:03,600 --> 00:21:07,050
need to download and parse 15 mega

00:21:05,400 --> 00:21:08,760
JavaScript to see like the scrolling

00:21:07,050 --> 00:21:12,150
text on your website or whatever they're

00:21:08,760 --> 00:21:13,559
going to have a bad time you probably

00:21:12,150 --> 00:21:16,230
consider some of the alternative

00:21:13,559 --> 00:21:17,880
projects which sort of make a different

00:21:16,230 --> 00:21:20,070
set of trade-offs in terms of

00:21:17,880 --> 00:21:21,390
compatibility or speed but one of the

00:21:20,070 --> 00:21:23,550
things that they both get writers are a

00:21:21,390 --> 00:21:25,710
lot smaller I hope to be useful for that

00:21:23,550 --> 00:21:28,410
someday but hey 15 mega javascript is

00:21:25,710 --> 00:21:30,150
not there right now that said you're not

00:21:28,410 --> 00:21:33,330
always you use as load time is not

00:21:30,150 --> 00:21:34,530
always in the hot path right so none of

00:21:33,330 --> 00:21:38,460
you had to sit around waiting for me to

00:21:34,530 --> 00:21:39,600
load these slides so I went ahead and I

00:21:38,460 --> 00:21:41,460
don't know if you noticed my little

00:21:39,600 --> 00:21:45,030
timer ticking but anyway I went ahead

00:21:41,460 --> 00:21:47,070
and implemented my slides logic as a

00:21:45,030 --> 00:21:48,690
script x equals plot attacks so totally

00:21:47,070 --> 00:21:50,580
doable but it just takes a really long

00:21:48,690 --> 00:21:52,800
time to start up and you know this is

00:21:50,580 --> 00:21:55,429
using jQuery us using time duck time and

00:21:52,800 --> 00:21:55,429
stuff Thanks

00:21:57,950 --> 00:22:02,159
that's it maybe there's more fun stuff

00:22:00,179 --> 00:22:03,899
we can do like think people really like

00:22:02,159 --> 00:22:06,090
things like PI to exe where you take an

00:22:03,899 --> 00:22:07,500
existing Python application you bundle

00:22:06,090 --> 00:22:08,789
it up with all of its dependencies and

00:22:07,500 --> 00:22:10,710
you spit out a thing that runs on

00:22:08,789 --> 00:22:12,539
Windows or Mac or whatever platform

00:22:10,710 --> 00:22:14,159
you're on like maybe we could use this

00:22:12,539 --> 00:22:15,720
to build the PI to wear bright you take

00:22:14,159 --> 00:22:17,130
up the existing Python app I'd love to

00:22:15,720 --> 00:22:18,720
try this with a game or something just

00:22:17,130 --> 00:22:21,120
like bundle it up and here you go here

00:22:18,720 --> 00:22:23,789
it is on the web and then stick an

00:22:21,120 --> 00:22:26,010
application manifest on that and run it

00:22:23,789 --> 00:22:27,960
on the Firefox OS device and get access

00:22:26,010 --> 00:22:32,760
to some non-zero percentage of the

00:22:27,960 --> 00:22:34,740
worldwide smartphone market take that

00:22:32,760 --> 00:22:36,990
take that Firefox OS app and run it

00:22:34,740 --> 00:22:39,120
through the mozilla APK factory and get

00:22:36,990 --> 00:22:40,740
android app a native android app out of

00:22:39,120 --> 00:22:44,700
it and then get you know a few more

00:22:40,740 --> 00:22:46,740
percent another interesting application

00:22:44,700 --> 00:22:48,179
someone suggested to me was like maybe

00:22:46,740 --> 00:22:50,279
there's interesting things we can do

00:22:48,179 --> 00:22:51,690
here with the scientific community now

00:22:50,279 --> 00:22:53,130
they've got the ipython notebook and all

00:22:51,690 --> 00:22:55,350
of this awesome stuff that's kind of

00:22:53,130 --> 00:22:57,450
happening on the web can we plug into

00:22:55,350 --> 00:22:59,309
that and provide like maybe we'd get

00:22:57,450 --> 00:23:01,710
numpy pi working and we can do

00:22:59,309 --> 00:23:04,140
interesting things in a fully native web

00:23:01,710 --> 00:23:06,480
platform rather than having to depend on

00:23:04,140 --> 00:23:08,549
kind of a mix of servers and clients so

00:23:06,480 --> 00:23:09,630
really what I want to do oh no I have

00:23:08,549 --> 00:23:12,299
one more point before I really want to

00:23:09,630 --> 00:23:13,470
do that what's interesting about this

00:23:12,299 --> 00:23:14,640
approach is that you get a lot of free

00:23:13,470 --> 00:23:16,169
stuff right I didn't have to write a

00:23:14,640 --> 00:23:16,950
Python environment and I didn't have to

00:23:16,169 --> 00:23:18,899
write a bunch of JavaScript

00:23:16,950 --> 00:23:21,120
optimizations you may have noticed that

00:23:18,899 --> 00:23:22,620
I'm currently in Python 2 so if you want

00:23:21,120 --> 00:23:24,330
to Python 3 version of this you check

00:23:22,620 --> 00:23:25,770
out the Python 3 branch of pi PI and

00:23:24,330 --> 00:23:27,929
compile it and you have past and 3 on

00:23:25,770 --> 00:23:29,850
the web if you want to run PHP on the

00:23:27,929 --> 00:23:32,909
web consult a professional psychiatrist

00:23:29,850 --> 00:23:34,830
now if you want to run PHP on the web

00:23:32,909 --> 00:23:35,909
you check out the PHP VM that the pipe

00:23:34,830 --> 00:23:37,260
our guys have been working on you

00:23:35,909 --> 00:23:39,179
compile that and you run it in the web

00:23:37,260 --> 00:23:42,149
so I'm a huge fan of getting free stuff

00:23:39,179 --> 00:23:43,620
and I like the the possibility of lots

00:23:42,149 --> 00:23:46,350
of free stuff kind of flowing out of

00:23:43,620 --> 00:23:48,179
this but what I really want to encourage

00:23:46,350 --> 00:23:50,190
people to do is is adopt this approach

00:23:48,179 --> 00:23:51,419
of filing bugs against the web like I

00:23:50,190 --> 00:23:54,090
want to do this thing on the web why

00:23:51,419 --> 00:23:55,710
can't I do that you know there are there

00:23:54,090 --> 00:23:57,270
are people who will take that as a

00:23:55,710 --> 00:23:59,760
serious bug you can feel free to email

00:23:57,270 --> 00:24:01,230
me and I'll see what I can do I might

00:23:59,760 --> 00:24:03,210
even get it filed in Bugzilla doc

00:24:01,230 --> 00:24:04,200
mozilla.org it might languish for 10

00:24:03,210 --> 00:24:06,179
years but you know we'll get it on the

00:24:04,200 --> 00:24:08,050
record and see what we can do about

00:24:06,179 --> 00:24:10,690
really improving this

00:24:08,050 --> 00:24:13,480
platform how am I going for time water

00:24:10,690 --> 00:24:15,430
by five minutes awesome so I had one

00:24:13,480 --> 00:24:18,970
more question I wanted to throw in here

00:24:15,430 --> 00:24:20,620
segwaying in from that which is who so

00:24:18,970 --> 00:24:22,210
basically this project has been me

00:24:20,620 --> 00:24:26,830
hacking around for a year trying to see

00:24:22,210 --> 00:24:28,330
what's what's possible right maybe you'd

00:24:26,830 --> 00:24:29,770
like to get involved you know there's

00:24:28,330 --> 00:24:32,260
there's a huge amount of work that will

00:24:29,770 --> 00:24:34,480
be required to take this from a kind of

00:24:32,260 --> 00:24:35,740
fun fun demo through the thing that

00:24:34,480 --> 00:24:37,870
people are actually using in the real

00:24:35,740 --> 00:24:40,450
world so you know if you're interested

00:24:37,870 --> 00:24:44,170
in compilers if you're interested in

00:24:40,450 --> 00:24:45,670
compilers or optimizations or if you

00:24:44,170 --> 00:24:47,290
know some awesome tricks for reducing

00:24:45,670 --> 00:24:50,800
the size of the compiled JavaScript file

00:24:47,290 --> 00:24:52,540
by a couple hundred times I'm gonna be

00:24:50,800 --> 00:24:54,700
hanging around for the sprints get in

00:24:52,540 --> 00:24:55,630
touch with me if you feel this is

00:24:54,700 --> 00:24:58,270
something you'd like to come along and

00:24:55,630 --> 00:25:00,070
hack on the build environment that you

00:24:58,270 --> 00:25:01,570
need takes about three hours to set up

00:25:00,070 --> 00:25:03,310
so you might want to let me know

00:25:01,570 --> 00:25:04,690
beforehand well you got to compile LLVM

00:25:03,310 --> 00:25:05,920
you've got to compile fire fire go to

00:25:04,690 --> 00:25:06,810
compile a bunch of stuff before you can

00:25:05,920 --> 00:25:09,400
even get started

00:25:06,810 --> 00:25:11,110
other than that yeah thank you very much

00:25:09,400 --> 00:25:13,240
this has been a lot of fun for me to

00:25:11,110 --> 00:25:14,890
work on a lot of fun to present so I'm

00:25:13,240 --> 00:25:17,500
kind of hoping other people will be able

00:25:14,890 --> 00:25:18,970
to have fun with it too and if you want

00:25:17,500 --> 00:25:21,760
to read more you can go here here that

00:25:18,970 --> 00:25:23,200
took materials online and I'll be happy

00:25:21,760 --> 00:25:25,470
to take any questions so thanks very

00:25:23,200 --> 00:25:25,470
much

00:25:35,130 --> 00:25:37,190

YouTube URL: https://www.youtube.com/watch?v=8C9q94F6Uqo


