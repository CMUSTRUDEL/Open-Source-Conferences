Title: Python Micro-service Architecture by Rory Hart
Publication date: 2014-08-18
Playlist: PyCon Australia 2014
Description: 
	Micro or single-purpose service architecture is an server application design that utilises numerous lightweight service processes communicating with a simple API, often RESTful. This style of architecture has started being used in the past few years with the aim of increasing development velocity through flexibility.

This talk will examine the development workflows, tooling and libraries available in Python to make developing these services practical. Emphasis will be on technically addressing the weaknesses of this style of development in areas such as testing, deployment and communication.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:05,860 --> 00:00:09,010
next talk is microservices in Python by

00:00:08,230 --> 00:00:12,250
Rory Hut

00:00:09,010 --> 00:00:14,350
Rory is employed by bre where he helps

00:00:12,250 --> 00:00:16,660
deliver mathematical optimization tools

00:00:14,350 --> 00:00:19,119
over the web to businesses in a wide

00:00:16,660 --> 00:00:20,800
range of industries his focus is on

00:00:19,119 --> 00:00:22,840
ensuring he and his colleagues used the

00:00:20,800 --> 00:00:24,880
best engineering and technology to

00:00:22,840 --> 00:00:34,270
deliver tools clients need ladies and

00:00:24,880 --> 00:00:36,430
gentleman Roy Hudd hi I'm Rory it just

00:00:34,270 --> 00:00:40,360
mentioned and I'm a software engineer so

00:00:36,430 --> 00:00:42,820
I worked for BRE optimisation I'm here

00:00:40,360 --> 00:00:44,860
to talk about micro services in Python

00:00:42,820 --> 00:00:47,890
and micro service architecture I'm not

00:00:44,860 --> 00:00:49,030
going to go too deep into the ins and

00:00:47,890 --> 00:00:51,700
outs of micro service architecture

00:00:49,030 --> 00:00:53,739
there's a lot of people a lot of talks

00:00:51,700 --> 00:00:55,840
out there already talking about micro

00:00:53,739 --> 00:00:57,850
service architecture and why it's good

00:00:55,840 --> 00:01:00,309
and what the drawbacks are but I want to

00:00:57,850 --> 00:01:02,530
talk about why we chose micro service

00:01:00,309 --> 00:01:05,259
architecture or is a smallish Python

00:01:02,530 --> 00:01:10,900
shop and what potentials tools we've

00:01:05,259 --> 00:01:12,820
chosen to use to do this so I thought

00:01:10,900 --> 00:01:15,190
I'd better lead with some definition

00:01:12,820 --> 00:01:16,270
show of hands who's heard of micro

00:01:15,190 --> 00:01:20,350
service architecture before

00:01:16,270 --> 00:01:25,619
oh dear I'm going home now who's

00:01:20,350 --> 00:01:29,650
actually using them there's a few cool

00:01:25,619 --> 00:01:32,680
so I like to think of micro services as

00:01:29,650 --> 00:01:35,500
single purpose services oriented around

00:01:32,680 --> 00:01:38,320
a domain concept rather than a

00:01:35,500 --> 00:01:40,720
technological concept so what I mean by

00:01:38,320 --> 00:01:43,720
a domain concept is a user is a domain

00:01:40,720 --> 00:01:45,490
concept a message is a domain concept

00:01:43,720 --> 00:01:47,979
and opre

00:01:45,490 --> 00:01:50,530
we deal with a lot of trains so for us

00:01:47,979 --> 00:01:52,270
trains are often a domain context and

00:01:50,530 --> 00:01:55,479
micro services are used by some quite

00:01:52,270 --> 00:02:00,119
large organizations such as Netflix and

00:01:55,479 --> 00:02:02,560
real estate comdata you here locally and

00:02:00,119 --> 00:02:04,299
that was really interesting and they've

00:02:02,560 --> 00:02:06,070
been talking about them fair bit but all

00:02:04,299 --> 00:02:08,220
the examples are really big and so I

00:02:06,070 --> 00:02:12,989
thought I'd give a talk about you know

00:02:08,220 --> 00:02:12,989
what a small shop is using them

00:02:13,200 --> 00:02:17,170
now this is a definition from someone

00:02:15,760 --> 00:02:19,450
else just in case you don't believe me

00:02:17,170 --> 00:02:21,970
this is a Martin Fowler and James Lewis

00:02:19,450 --> 00:02:28,450
from they're fairly seminal article ina

00:02:21,970 --> 00:02:29,890
micro-services so I thought I'd

00:02:28,450 --> 00:02:34,810
highlight the end of that the

00:02:29,890 --> 00:02:37,150
lightweight mechanisms because we're

00:02:34,810 --> 00:02:40,690
using rest and it's nice and small in my

00:02:37,150 --> 00:02:43,510
way and often that's kind of lost in the

00:02:40,690 --> 00:02:44,730
crush of the how big or how small anyway

00:02:43,510 --> 00:02:48,760
moving on

00:02:44,730 --> 00:02:51,310
so at BRE we build software service

00:02:48,760 --> 00:02:52,959
tools they deploy it on the web and they

00:02:51,310 --> 00:02:54,870
all mostly have mass at the core of them

00:02:52,959 --> 00:02:58,299
so we solve supply chain logistics

00:02:54,870 --> 00:03:00,700
screwing and scheduling problems for

00:02:58,299 --> 00:03:02,980
example we help swept plan all of their

00:03:00,700 --> 00:03:04,359
daily truck deliveries to all of their

00:03:02,980 --> 00:03:07,900
stores and milk bars throughout all of

00:03:04,359 --> 00:03:09,549
the major metropolitan areas and we

00:03:07,900 --> 00:03:12,849
deploy all these applications through a

00:03:09,549 --> 00:03:14,170
single web portal clients really like

00:03:12,849 --> 00:03:16,269
this you know they have a single login

00:03:14,170 --> 00:03:17,560
to all of their tools and it's really

00:03:16,269 --> 00:03:19,389
easy with the sales guys to kind of

00:03:17,560 --> 00:03:21,459
convey how it's going to look and feel

00:03:19,389 --> 00:03:29,380
we've pulled the client even you know

00:03:21,459 --> 00:03:31,150
signs up but we had a problem we started

00:03:29,380 --> 00:03:33,310
with a single code base and I think this

00:03:31,150 --> 00:03:35,290
is true with most companies it's a

00:03:33,310 --> 00:03:36,819
natural pattern to follow and you

00:03:35,290 --> 00:03:38,290
initially get a lot of velocity out of

00:03:36,819 --> 00:03:39,519
that and you're a small team you're

00:03:38,290 --> 00:03:41,620
working together and you collaborate

00:03:39,519 --> 00:03:45,790
really well everyone knows what everyone

00:03:41,620 --> 00:03:48,370
else is doing but five years later and

00:03:45,790 --> 00:03:51,819
we've got a monolith it's a it's a big

00:03:48,370 --> 00:03:54,940
blob of code it's grown with us over

00:03:51,819 --> 00:03:57,849
time and it's still growing and we're

00:03:54,940 --> 00:04:00,790
growing and some of the assumptions that

00:03:57,849 --> 00:04:03,190
were made in this monolith of code and

00:04:00,790 --> 00:04:04,750
no longer true some of the mistakes that

00:04:03,190 --> 00:04:07,840
we made in the beginning is still

00:04:04,750 --> 00:04:10,299
haunting us and it's really difficult to

00:04:07,840 --> 00:04:12,190
change this monolith of code while still

00:04:10,299 --> 00:04:14,699
making a profit still going out

00:04:12,190 --> 00:04:19,570
satisfying customers needs and you know

00:04:14,699 --> 00:04:21,849
doing what we want to do it's really

00:04:19,570 --> 00:04:23,530
hard to adopt new technology we want to

00:04:21,849 --> 00:04:24,880
try this new cool thing or you know

00:04:23,530 --> 00:04:26,590
they've got this really great idea

00:04:24,880 --> 00:04:28,330
but you know this monolith sits

00:04:26,590 --> 00:04:31,419
they're going well you have to make sure

00:04:28,330 --> 00:04:33,389
you interface with me properly and their

00:04:31,419 --> 00:04:35,500
deployments are taking more time and

00:04:33,389 --> 00:04:39,340
frustrations generally growing within

00:04:35,500 --> 00:04:42,000
the company not just software engineers

00:04:39,340 --> 00:04:44,530
but you know the business guys as well

00:04:42,000 --> 00:04:46,810
so this is something of what it looked

00:04:44,530 --> 00:04:49,270
like this was a diagram and all the

00:04:46,810 --> 00:04:51,760
diagrams I drew were to kind of

00:04:49,270 --> 00:04:54,100
communicate the micro-services idea

00:04:51,760 --> 00:04:57,729
internally when we first started toying

00:04:54,100 --> 00:04:59,770
with it the big box is the monolith that

00:04:57,729 --> 00:05:01,630
little box off to the side there was an

00:04:59,770 --> 00:05:03,490
experiment in in running something

00:05:01,630 --> 00:05:04,990
slightly separately and then the big

00:05:03,490 --> 00:05:10,570
blob down the bottom of the database and

00:05:04,990 --> 00:05:13,690
all the rest is the web so we've been

00:05:10,570 --> 00:05:16,330
just discussing solutions for long as

00:05:13,690 --> 00:05:18,430
I've been at the company this has always

00:05:16,330 --> 00:05:23,020
been a kind of a frustration and some

00:05:18,430 --> 00:05:25,030
desire to fix and the first and most

00:05:23,020 --> 00:05:28,240
obvious answer was do nothing like you

00:05:25,030 --> 00:05:29,800
build monoliths right we're still

00:05:28,240 --> 00:05:33,280
delivering projects to clients we're

00:05:29,800 --> 00:05:35,440
still making a profit and we could go

00:05:33,280 --> 00:05:38,530
refactor this monolith and automate it

00:05:35,440 --> 00:05:41,800
more and one or two Big Bone projects

00:05:38,530 --> 00:05:43,060
and we would you know make it better or

00:05:41,800 --> 00:05:45,760
anybody would be happy

00:05:43,060 --> 00:05:47,860
but those projects those reef actors

00:05:45,760 --> 00:05:49,960
would be quite disruptive and we'd find

00:05:47,860 --> 00:05:51,550
that we'd put at risk our client

00:05:49,960 --> 00:05:54,070
projects that bring the money in the

00:05:51,550 --> 00:05:55,000
door and we really felt like it was only

00:05:54,070 --> 00:05:57,190
going to stave off me in their

00:05:55,000 --> 00:05:59,940
inevitable hoping and continue growing

00:05:57,190 --> 00:06:02,260
at the base that we have been going and

00:05:59,940 --> 00:06:03,550
at some point this monolith is just

00:06:02,260 --> 00:06:05,830
going to ground to a halt again and

00:06:03,550 --> 00:06:10,000
we'll deal with have to deal with it

00:06:05,830 --> 00:06:13,900
again so we looked further afield than

00:06:10,000 --> 00:06:15,130
just kind of refactoring second option

00:06:13,900 --> 00:06:16,240
and that was that kind of little guy

00:06:15,130 --> 00:06:18,599
sitting off the side in the first

00:06:16,240 --> 00:06:24,370
diagram was integrating on the database

00:06:18,599 --> 00:06:27,010
and what we do is we deploy each tool

00:06:24,370 --> 00:06:29,110
separately pull some common library code

00:06:27,010 --> 00:06:30,789
into each one of them and and then

00:06:29,110 --> 00:06:33,490
deploy them and then they'd all look at

00:06:30,789 --> 00:06:35,680
the same data base and shared it on it

00:06:33,490 --> 00:06:39,130
that way we could do this incrementally

00:06:35,680 --> 00:06:40,690
we did it once we pulled it out and ran

00:06:39,130 --> 00:06:44,470
it separately

00:06:40,690 --> 00:06:46,420
and it's marginally better but as soon

00:06:44,470 --> 00:06:49,090
as we want to change library code or

00:06:46,420 --> 00:06:50,680
change the database all of those tools

00:06:49,090 --> 00:06:52,300
you know we need to go through them all

00:06:50,680 --> 00:06:53,590
go okay how are we going to break it how

00:06:52,300 --> 00:06:57,360
we're going to fix it how are we going

00:06:53,590 --> 00:06:57,360
to deploy all those things at once so

00:06:57,930 --> 00:07:03,940
not much more flexible and on the

00:07:01,540 --> 00:07:06,520
technology side of things we're still

00:07:03,940 --> 00:07:08,610
left in a position where we really can't

00:07:06,520 --> 00:07:11,530
experiment too much with technology like

00:07:08,610 --> 00:07:13,300
can't go in you know rewrite all our

00:07:11,530 --> 00:07:15,910
libraries in another language and then

00:07:13,300 --> 00:07:21,480
you know deploy that tool just for one

00:07:15,910 --> 00:07:22,660
project now when you talk about

00:07:21,480 --> 00:07:24,670
service-oriented

00:07:22,660 --> 00:07:28,020
micro services the elephant in the room

00:07:24,670 --> 00:07:30,010
is often service our own to architecture

00:07:28,020 --> 00:07:32,770
it's often one of the first things that

00:07:30,010 --> 00:07:34,660
comes up and service-oriented

00:07:32,770 --> 00:07:36,580
architecture for those that aren't

00:07:34,660 --> 00:07:40,420
familiar with it and please excuse my

00:07:36,580 --> 00:07:41,850
definition because I struggled with my

00:07:40,420 --> 00:07:45,910
understanding of it for quite some time

00:07:41,850 --> 00:07:49,050
was would you divide it your codebase

00:07:45,910 --> 00:07:53,920
somehow and you run some services of

00:07:49,050 --> 00:07:55,720
some description but and this is what I

00:07:53,920 --> 00:07:57,430
struggled with this way D divided up

00:07:55,720 --> 00:07:59,740
where do you delimit de-limb innate your

00:07:57,430 --> 00:08:02,440
code where do you decide okay this this

00:07:59,740 --> 00:08:07,240
is a service here and this is a library

00:08:02,440 --> 00:08:08,950
here and this is yeah so it it wasn't

00:08:07,240 --> 00:08:10,720
clear and the standard documents and

00:08:08,950 --> 00:08:13,780
there are standard documents so really

00:08:10,720 --> 00:08:17,230
scary and big and enterprising in for

00:08:13,780 --> 00:08:19,900
personal Python shop but didn't seem

00:08:17,230 --> 00:08:21,370
like a good fit and it seemed like it'd

00:08:19,900 --> 00:08:22,810
still be a really big project like it

00:08:21,370 --> 00:08:24,550
would be a big bang kind of okay we

00:08:22,810 --> 00:08:26,590
ripped this all out and we put it here

00:08:24,550 --> 00:08:29,850
and then bang we kind of we were a

00:08:26,590 --> 00:08:31,570
service-oriented architecture it did and

00:08:29,850 --> 00:08:41,320
service-oriented architecture is really

00:08:31,570 --> 00:08:45,180
not cool like IBM sells it and then of

00:08:41,320 --> 00:08:48,100
course there's micro services yeah

00:08:45,180 --> 00:08:50,380
they're quite well defined in their

00:08:48,100 --> 00:08:52,150
their own little way there's lots of

00:08:50,380 --> 00:08:53,400
articles talking about especially

00:08:52,150 --> 00:08:57,480
breaking up a monolith

00:08:53,400 --> 00:08:59,970
and kind of the standards to adopt and

00:08:57,480 --> 00:09:02,100
how to approach the problem and those

00:08:59,970 --> 00:09:04,020
articles really fit well with what we

00:09:02,100 --> 00:09:07,410
were looking at with this minor lift and

00:09:04,020 --> 00:09:09,390
these kind of this these lots of

00:09:07,410 --> 00:09:10,830
decentralized projects but they're kind

00:09:09,390 --> 00:09:13,050
of all being having to be governed by

00:09:10,830 --> 00:09:16,740
this central monolith of thing

00:09:13,050 --> 00:09:18,510
so what monoliths offered to us was we

00:09:16,740 --> 00:09:20,550
were able to go okay your your your

00:09:18,510 --> 00:09:22,650
project your delivering to your clients

00:09:20,550 --> 00:09:24,780
you can go and make the best decisions

00:09:22,650 --> 00:09:26,970
that you want for your client and that

00:09:24,780 --> 00:09:29,760
might be you know using a completely

00:09:26,970 --> 00:09:31,710
different language to what we've done

00:09:29,760 --> 00:09:33,270
before or using a completely different

00:09:31,710 --> 00:09:38,100
set of libraries or a different web

00:09:33,270 --> 00:09:40,200
framework whatever but it also says that

00:09:38,100 --> 00:09:42,450
you standardize on the edges that you

00:09:40,200 --> 00:09:43,950
that where you where you talk to someone

00:09:42,450 --> 00:09:47,850
else where you integrate with somebody

00:09:43,950 --> 00:09:49,500
else you make an agreement I will always

00:09:47,850 --> 00:09:52,080
talk to you this way and you will always

00:09:49,500 --> 00:09:55,590
talk to me that way and in theory it all

00:09:52,080 --> 00:10:00,350
works out really nicely and we've got a

00:09:55,590 --> 00:10:05,910
few deployed now this is the second of

00:10:00,350 --> 00:10:07,470
the internal diagrams so I apologize so

00:10:05,910 --> 00:10:08,700
we're still at the monolith and that

00:10:07,470 --> 00:10:12,060
still exists and we've still got that

00:10:08,700 --> 00:10:14,100
big blog of that of database there but

00:10:12,060 --> 00:10:16,770
we now have some micro services and some

00:10:14,100 --> 00:10:18,030
tools deployed using those monic micro

00:10:16,770 --> 00:10:18,960
services so we've got the tools at the

00:10:18,030 --> 00:10:21,240
top there and they've got their own

00:10:18,960 --> 00:10:22,800
little data bases and they're doing

00:10:21,240 --> 00:10:24,270
their own thing and they're even using

00:10:22,800 --> 00:10:26,340
some new technologies that we've we've

00:10:24,270 --> 00:10:28,620
wanted to use for a while but haven't

00:10:26,340 --> 00:10:30,270
been able to and then we're going to

00:10:28,620 --> 00:10:32,430
micro servers running down there but

00:10:30,270 --> 00:10:34,830
they're very integrated with the

00:10:32,430 --> 00:10:37,050
existing monolith database and then

00:10:34,830 --> 00:10:39,900
we've got some math solvers and engines

00:10:37,050 --> 00:10:41,640
that do big crazy calculations that I

00:10:39,900 --> 00:10:46,530
don't understand and we employ some very

00:10:41,640 --> 00:10:47,640
smart people to build over there so this

00:10:46,530 --> 00:10:50,490
is this is what it looks like now and

00:10:47,640 --> 00:10:52,500
and we're already better off like those

00:10:50,490 --> 00:10:57,750
tools up the top there those two tools

00:10:52,500 --> 00:11:00,450
that we've got they now they now use a

00:10:57,750 --> 00:11:03,990
very forward-looking API when we don't

00:11:00,450 --> 00:11:07,110
anticipate having to change those in the

00:11:03,990 --> 00:11:09,480
near future and they use

00:11:07,110 --> 00:11:18,450
they use themes that are best suited for

00:11:09,480 --> 00:11:24,510
them for them and this is where we we

00:11:18,450 --> 00:11:26,430
anticipate being next month so now the

00:11:24,510 --> 00:11:28,769
difference is is is the micro services

00:11:26,430 --> 00:11:32,250
are in their own data and the monolith

00:11:28,769 --> 00:11:34,410
now talks to the micro services to

00:11:32,250 --> 00:11:39,269
perform those tasks and we're able to

00:11:34,410 --> 00:11:41,100
reflect those that monolith because

00:11:39,269 --> 00:11:44,130
there's no large amounts of active

00:11:41,100 --> 00:11:46,380
development trying to get get work out

00:11:44,130 --> 00:11:49,140
to clients going on in that monolith

00:11:46,380 --> 00:11:52,110
anymore that if we go and change an API

00:11:49,140 --> 00:11:53,550
we know that we're not trying to we

00:11:52,110 --> 00:11:55,260
don't have a project that's trying to

00:11:53,550 --> 00:11:57,959
hit a moving target they're not coming

00:11:55,260 --> 00:11:59,190
over to our desk guy I want to use this

00:11:57,959 --> 00:12:00,300
thing but I know you're going to change

00:11:59,190 --> 00:12:02,370
it at some point when is there going to

00:12:00,300 --> 00:12:03,510
be ready and you know that kind of back

00:12:02,370 --> 00:12:05,040
and forth that really makes it really

00:12:03,510 --> 00:12:10,680
difficult for us to go and change things

00:12:05,040 --> 00:12:13,380
is is minimized and this is where we

00:12:10,680 --> 00:12:15,510
hope to be in six months there's no more

00:12:13,380 --> 00:12:17,699
model if that's gone we've refactored it

00:12:15,510 --> 00:12:20,820
away by spiking it up and turning it

00:12:17,699 --> 00:12:22,470
it's code into libraries and or you know

00:12:20,820 --> 00:12:25,680
just completely deleted and turned it

00:12:22,470 --> 00:12:28,079
into to turn them into micro services so

00:12:25,680 --> 00:12:30,269
we've got a few micro services within

00:12:28,079 --> 00:12:32,519
our users and our authorization system

00:12:30,269 --> 00:12:35,279
and you know a little workflow stuff

00:12:32,519 --> 00:12:38,640
which is a domain concept it's generally

00:12:35,279 --> 00:12:40,140
valid within most of our tools and we

00:12:38,640 --> 00:12:41,699
anticipate there'll be other micro

00:12:40,140 --> 00:12:44,519
services if some has already come up and

00:12:41,699 --> 00:12:46,620
said hey I need emailing you know how

00:12:44,519 --> 00:12:54,240
should we do this and I said go and

00:12:46,620 --> 00:12:55,829
write a micro service so so we have a

00:12:54,240 --> 00:13:00,890
path forward now and it's a path we're

00:12:55,829 --> 00:13:03,899
really comfortable with and I anticipate

00:13:00,890 --> 00:13:06,390
being able to wax more lyrical about

00:13:03,899 --> 00:13:11,190
where we've come where we've gotten to

00:13:06,390 --> 00:13:13,410
next PyCon but I thought I'd share with

00:13:11,190 --> 00:13:18,420
you some of the Python tools and

00:13:13,410 --> 00:13:20,280
libraries that we're using because we

00:13:18,420 --> 00:13:21,300
found that Python

00:13:20,280 --> 00:13:24,000
because of some of the technical

00:13:21,300 --> 00:13:27,420
decisions that microservices espouses is

00:13:24,000 --> 00:13:32,550
really well suited to to the micro

00:13:27,420 --> 00:13:35,490
service architecture so I mentioned all

00:13:32,550 --> 00:13:39,300
about micro services talk rest and web

00:13:35,490 --> 00:13:43,160
stuff so the first one that was obvious

00:13:39,300 --> 00:13:45,690
to us was lightweight web frameworks

00:13:43,160 --> 00:13:48,680
something like flask or bottle work - oh

00:13:45,690 --> 00:13:51,630
good cherry pie we're using pyramid and

00:13:48,680 --> 00:13:54,680
there really is easy to just build a you

00:13:51,630 --> 00:13:56,940
know a single pay a single file

00:13:54,680 --> 00:14:00,830
application is very very minimal

00:13:56,940 --> 00:14:03,870
bootstrapping in start-up involved and

00:14:00,830 --> 00:14:06,030
they're very simple little beasts these

00:14:03,870 --> 00:14:09,470
micro services you know I think the

00:14:06,030 --> 00:14:12,300
biggest one is about 350 lines of code

00:14:09,470 --> 00:14:14,850
so you don't want much overhead in it

00:14:12,300 --> 00:14:19,770
they don't really need much so something

00:14:14,850 --> 00:14:21,480
like Django or yeah it didn't seem like

00:14:19,770 --> 00:14:25,200
a good fit to us because it because of

00:14:21,480 --> 00:14:29,490
the large overhead and assumptions that

00:14:25,200 --> 00:14:33,660
Django makes so to talk to these api's

00:14:29,490 --> 00:14:37,590
we chose requests it's got a fantastic

00:14:33,660 --> 00:14:41,550
API talks rest really well and it has

00:14:37,590 --> 00:14:47,310
some really nice advanced features it

00:14:41,550 --> 00:14:49,080
talks it it has some sessions where it

00:14:47,310 --> 00:14:51,480
can keep hold of things like your

00:14:49,080 --> 00:14:53,730
headers and your authentication through

00:14:51,480 --> 00:14:55,650
throughout many requests and it also

00:14:53,730 --> 00:14:57,690
will do things like connection pooling

00:14:55,650 --> 00:14:59,100
so if you've already got a connection to

00:14:57,690 --> 00:15:01,110
our HTTP server open and that's

00:14:59,100 --> 00:15:04,650
available it'll just go and reuse that

00:15:01,110 --> 00:15:07,470
which you know reduces your your your

00:15:04,650 --> 00:15:11,880
connection speed your connection time to

00:15:07,470 --> 00:15:16,710
a micro service so this is what a euro

00:15:11,880 --> 00:15:22,920
Lib - restful request to github looks

00:15:16,710 --> 00:15:27,960
like very nice and for boys and this is

00:15:22,920 --> 00:15:30,420
what it looks like for with requests

00:15:27,960 --> 00:15:33,840
it's the difference is astounding I

00:15:30,420 --> 00:15:36,510
think so

00:15:33,840 --> 00:15:38,190
so it's talk when you're going to go and

00:15:36,510 --> 00:15:40,770
set up these microservices and talk to

00:15:38,190 --> 00:15:42,540
them you don't want this big overhead of

00:15:40,770 --> 00:15:45,570
going and setting it up you just want to

00:15:42,540 --> 00:15:47,640
go up I just need this thing it's done

00:15:45,570 --> 00:15:49,800
you don't want that kind of big barrier

00:15:47,640 --> 00:15:51,450
and then the extra advanced features of

00:15:49,800 --> 00:15:54,150
just as nice looking there

00:15:51,450 --> 00:15:56,279
you know bam you've got you've got some

00:15:54,150 --> 00:15:58,260
auth stored there and you can just keep

00:15:56,279 --> 00:16:00,210
reusing those connections and you know

00:15:58,260 --> 00:16:02,210
has some more advanced features beyond

00:16:00,210 --> 00:16:09,000
that that you can tailor around with but

00:16:02,210 --> 00:16:12,920
basically all it is so with micro

00:16:09,000 --> 00:16:15,870
services there are drawbacks obviously

00:16:12,920 --> 00:16:18,779
and one of them is you gotta have a lot

00:16:15,870 --> 00:16:23,279
of good things going on throughout your

00:16:18,779 --> 00:16:26,070
your operations I request at the front

00:16:23,279 --> 00:16:28,350
end from from a user in a monolith it

00:16:26,070 --> 00:16:28,710
all happens in the monolith and you're

00:16:28,350 --> 00:16:31,620
done

00:16:28,710 --> 00:16:33,120
whereas coming in on a on a micro

00:16:31,620 --> 00:16:35,370
service architecture it'll hit one of

00:16:33,120 --> 00:16:37,200
your front ends and then fire off ten

00:16:35,370 --> 00:16:38,460
requests into your micro services and

00:16:37,200 --> 00:16:41,490
that'll generate a whole cascade of

00:16:38,460 --> 00:16:43,470
behavior and being able to debug that

00:16:41,490 --> 00:16:46,020
and follow that is really important

00:16:43,470 --> 00:16:48,060
because when it breaks and when it

00:16:46,020 --> 00:16:50,160
breaks you want to be able to follow

00:16:48,060 --> 00:16:53,339
what's going on so I wanted to highlight

00:16:50,160 --> 00:16:56,160
the Python logging package because it's

00:16:53,339 --> 00:16:59,790
really fantastic all of the libraries

00:16:56,160 --> 00:17:01,140
that we use use it already so all we

00:16:59,790 --> 00:17:03,360
need to do is go and turn it on and

00:17:01,140 --> 00:17:06,150
point it at a file and set up our

00:17:03,360 --> 00:17:09,480
formatting so that it obeys the kind of

00:17:06,150 --> 00:17:12,689
things that we expect you now in our in

00:17:09,480 --> 00:17:15,689
our logs and then we can write logs in

00:17:12,689 --> 00:17:17,490
write logging in our applications and

00:17:15,689 --> 00:17:20,850
pull it all together aggregate it

00:17:17,490 --> 00:17:22,709
together and keep track of what's going

00:17:20,850 --> 00:17:24,929
on be able to go back and perform some

00:17:22,709 --> 00:17:28,610
foreign forensic analysis and see what

00:17:24,929 --> 00:17:28,610
happened if something's going wrong

00:17:29,300 --> 00:17:36,450
we're using tox for minimizing our

00:17:34,410 --> 00:17:39,720
continuous integration build

00:17:36,450 --> 00:17:41,910
configuration it it's a building test

00:17:39,720 --> 00:17:44,790
tool that kind of sits kind of on a

00:17:41,910 --> 00:17:47,370
layer above your your testing tool nose

00:17:44,790 --> 00:17:49,650
or PI test for example

00:17:47,370 --> 00:17:52,559
run all your tests for you and it'll

00:17:49,650 --> 00:17:55,740
manage your install ability for packages

00:17:52,559 --> 00:18:00,270
that you know what's going on the yeah

00:17:55,740 --> 00:18:03,600
you know that it will install and yeah

00:18:00,270 --> 00:18:05,760
as I said it minimizes the amount of

00:18:03,600 --> 00:18:08,190
boilerplate that you're doing to set it

00:18:05,760 --> 00:18:09,809
up you could see I which is fantastic

00:18:08,190 --> 00:18:12,210
because we've got lots and lots of these

00:18:09,809 --> 00:18:15,809
projects now you know every single micro

00:18:12,210 --> 00:18:19,770
service has its own build and multiple

00:18:15,809 --> 00:18:22,320
builds in fact now we're doing lots of

00:18:19,770 --> 00:18:26,700
installing of things and we're building

00:18:22,320 --> 00:18:30,900
lots of packages so dev PI provides us

00:18:26,700 --> 00:18:33,420
with a Python packaging index proxy and

00:18:30,900 --> 00:18:36,059
repository so you can run that locally

00:18:33,420 --> 00:18:37,950
or you can run that on your server or

00:18:36,059 --> 00:18:40,380
you can run that both locally and on the

00:18:37,950 --> 00:18:45,290
server you can ship your own packages to

00:18:40,380 --> 00:18:49,410
it and you can also ship compiled wheels

00:18:45,290 --> 00:18:51,450
C++ or a C package that you're using and

00:18:49,410 --> 00:18:52,830
you have to sit there we use numpy for

00:18:51,450 --> 00:18:55,380
example and that's it's they're doing a

00:18:52,830 --> 00:18:57,990
long build and every time you set up set

00:18:55,380 --> 00:18:59,250
up your virtual environments you have to

00:18:57,990 --> 00:19:01,860
go and build this thing it's really

00:18:59,250 --> 00:19:04,650
frustrating and Richard Jones is doing a

00:19:01,860 --> 00:19:05,700
talk all about def pie later and it's

00:19:04,650 --> 00:19:07,620
funny because I actually found it

00:19:05,700 --> 00:19:09,720
through a deprecated project of his that

00:19:07,620 --> 00:19:11,280
kind of trying to try to do the same

00:19:09,720 --> 00:19:12,630
thing and then he just put a banner

00:19:11,280 --> 00:19:18,750
across the top saying don't use this

00:19:12,630 --> 00:19:21,870
anymore so I think we've all heard a

00:19:18,750 --> 00:19:25,620
virtual lamp I hope you install packages

00:19:21,870 --> 00:19:27,870
into a walled garden packages but I am

00:19:25,620 --> 00:19:31,160
is a little bit newer I think it was

00:19:27,870 --> 00:19:35,429
stolen from the Ruby guys originally

00:19:31,160 --> 00:19:37,050
mention that and what it does is it

00:19:35,429 --> 00:19:39,860
allows you to control the version of

00:19:37,050 --> 00:19:43,320
Python that you're using in your project

00:19:39,860 --> 00:19:44,880
and with micro services we suddenly now

00:19:43,320 --> 00:19:47,040
have a very clear path on how we're

00:19:44,880 --> 00:19:50,670
going to move to Python 3 we can just

00:19:47,040 --> 00:19:53,610
start a project using Python 3 and it

00:19:50,670 --> 00:19:55,770
just uses Python 3 so to manage

00:19:53,610 --> 00:19:56,790
switching between all of those projects

00:19:55,770 --> 00:19:59,990
because we're going to end up with some

00:19:56,790 --> 00:20:01,380
legacy stuff that uses Python 2 7

00:19:59,990 --> 00:20:03,240
Pineville

00:20:01,380 --> 00:20:05,340
we'll be a great help I say will because

00:20:03,240 --> 00:20:09,150
we haven't actually started using that

00:20:05,340 --> 00:20:12,210
fully yet though one of those tools is

00:20:09,150 --> 00:20:14,610
about to start using pi pi so it'll

00:20:12,210 --> 00:20:19,110
handle your pi pi or your ironpython or

00:20:14,610 --> 00:20:20,090
your what's the java one again jonathan

00:20:19,110 --> 00:20:27,500
yes

00:20:20,090 --> 00:20:30,540
so yeah god forbid you using jonathan so

00:20:27,500 --> 00:20:34,170
another disadvantage of micro-services

00:20:30,540 --> 00:20:37,920
is you've got a lot going on in europe

00:20:34,170 --> 00:20:39,480
in your operations there's a lot of

00:20:37,920 --> 00:20:41,970
things to configure a lot of things to

00:20:39,480 --> 00:20:42,960
play around with a lot of changes to

00:20:41,970 --> 00:20:44,790
make

00:20:42,960 --> 00:20:46,530
so saltstack is a configuration

00:20:44,790 --> 00:20:50,010
management tool similar to chef and

00:20:46,530 --> 00:20:52,800
puppet we one of the reasons one of the

00:20:50,010 --> 00:20:57,360
reasons that we chose it was because it

00:20:52,800 --> 00:20:59,550
speaks Python in Yama and we couldn't do

00:20:57,360 --> 00:21:02,150
micro services without a tool like

00:20:59,550 --> 00:21:05,130
saltstack it's just beyond comprehension

00:21:02,150 --> 00:21:08,670
there's too much twiddling and fiddling

00:21:05,130 --> 00:21:10,860
and we couldn't reliably be able to

00:21:08,670 --> 00:21:14,930
deploy and maintain what we've got

00:21:10,860 --> 00:21:14,930
without configuration management tool

00:21:15,470 --> 00:21:24,870
this is an aspirational slide there's a

00:21:21,870 --> 00:21:28,110
library that realestate.com data you

00:21:24,870 --> 00:21:33,060
have written called Pat and what pact

00:21:28,110 --> 00:21:36,540
provides is a mock server that your

00:21:33,060 --> 00:21:40,110
consumer of a micro service talks to in

00:21:36,540 --> 00:21:42,720
its tests and what this what this

00:21:40,110 --> 00:21:45,660
service does this mock server does is

00:21:42,720 --> 00:21:48,270
instead of instead of proxying or

00:21:45,660 --> 00:21:51,720
passing it on to the real service what

00:21:48,270 --> 00:21:54,240
it does is is it remembers what's been

00:21:51,720 --> 00:21:55,980
asked of it so the consumer says I'm

00:21:54,240 --> 00:21:58,320
going to request this and you should

00:21:55,980 --> 00:22:00,450
give me this back and it goes and does

00:21:58,320 --> 00:22:03,180
all of its tests and make sure that make

00:22:00,450 --> 00:22:06,690
sure that its code passes in the manner

00:22:03,180 --> 00:22:09,720
that its writer expects but the mock

00:22:06,690 --> 00:22:12,630
server remembers all of these expection

00:22:09,720 --> 00:22:14,630
expected responses and expected requests

00:22:12,630 --> 00:22:17,410
and it'll turn around and

00:22:14,630 --> 00:22:22,490
it'll talk to the service and say hey I

00:22:17,410 --> 00:22:27,530
have this request for you and it'll get

00:22:22,490 --> 00:22:29,570
a response back and if the response

00:22:27,530 --> 00:22:32,210
doesn't match waves a red flag breaks

00:22:29,570 --> 00:22:33,680
the build those two guys have to get

00:22:32,210 --> 00:22:35,270
together and have a chat and say look

00:22:33,680 --> 00:22:37,010
you know you've broken my build or I

00:22:35,270 --> 00:22:42,680
broken your build and you know we need

00:22:37,010 --> 00:22:44,150
to we need to fix this so this package

00:22:42,680 --> 00:22:48,890
unfortunately was written in Ruby on

00:22:44,150 --> 00:22:52,040
Python so we're writing our own version

00:22:48,890 --> 00:23:01,640
in in Python and we're we're hoping to

00:22:52,040 --> 00:23:04,250
release it in the next few months so as

00:23:01,640 --> 00:23:09,260
a small Python shop we've chosen a

00:23:04,250 --> 00:23:10,940
pretty radical architecture I think but

00:23:09,260 --> 00:23:14,510
well the architecture is quite radical

00:23:10,940 --> 00:23:16,520
the HTTP in the rest and the the general

00:23:14,510 --> 00:23:19,520
web tech that we chosen to implement

00:23:16,520 --> 00:23:21,260
this isn't it you know we know how to

00:23:19,520 --> 00:23:24,340
build servers web servers and web

00:23:21,260 --> 00:23:29,660
applications so because of this

00:23:24,340 --> 00:23:31,820
technology or technological choice the

00:23:29,660 --> 00:23:34,550
Python ecosystem has supported this

00:23:31,820 --> 00:23:35,780
decision really well it it has all of

00:23:34,550 --> 00:23:39,740
these libraries that has all of these

00:23:35,780 --> 00:23:42,830
services at all sorry that we that we

00:23:39,740 --> 00:23:44,840
can leverage so we're really happy with

00:23:42,830 --> 00:23:47,570
the decision so far it's been it's been

00:23:44,840 --> 00:23:49,640
very straightforward and when when I

00:23:47,570 --> 00:23:50,780
first proposed this talk I was expecting

00:23:49,640 --> 00:23:53,900
to get into some more technical

00:23:50,780 --> 00:23:55,250
nitty-gritty for you but over the period

00:23:53,900 --> 00:23:56,840
of time that we've been building them

00:23:55,250 --> 00:23:59,300
it's turned out that really that's not

00:23:56,840 --> 00:24:02,090
been that's not been the problem that's

00:23:59,300 --> 00:24:06,980
not been the issue that we've had rather

00:24:02,090 --> 00:24:12,170
it's been the communication and the the

00:24:06,980 --> 00:24:15,770
understanding of the situation that we

00:24:12,170 --> 00:24:17,690
needed to develop over time so I'd like

00:24:15,770 --> 00:24:22,670
to leave you with some suggested reading

00:24:17,690 --> 00:24:25,430
if if I've left you wanting more so the

00:24:22,670 --> 00:24:28,250
first one is the article that I quoted

00:24:25,430 --> 00:24:35,030
earlier by Martin Fowler and

00:24:28,250 --> 00:24:37,730
James Lewis and it's pretty long piece

00:24:35,030 --> 00:24:39,260
of writing it's more than a blog post

00:24:37,730 --> 00:24:41,150
it's really it's quite a number of

00:24:39,260 --> 00:24:43,640
essays and it really covers everything

00:24:41,150 --> 00:24:45,440
that that you really need to know to

00:24:43,640 --> 00:24:47,900
first kind of understand what's going on

00:24:45,440 --> 00:24:49,280
with micro services and and what the

00:24:47,900 --> 00:24:52,720
disadvantages are and what the

00:24:49,280 --> 00:24:55,010
advantages are the second one

00:24:52,720 --> 00:24:58,370
microservice is not a free lunch really

00:24:55,010 --> 00:25:00,470
talks about the disadvantages of micro

00:24:58,370 --> 00:25:03,710
services they're quite bullish about

00:25:00,470 --> 00:25:04,970
micro services but talking about the

00:25:03,710 --> 00:25:06,530
trade-offs that are made and how to

00:25:04,970 --> 00:25:09,620
minimize the problems that that will

00:25:06,530 --> 00:25:12,800
create so it's very it's quite upsetting

00:25:09,620 --> 00:25:16,160
and quieter quite interesting and the

00:25:12,800 --> 00:25:18,200
last one if you're interested in a bit

00:25:16,160 --> 00:25:23,990
more about pact in this contract testing

00:25:18,200 --> 00:25:29,630
idea guys at DS wrote a quite a good

00:25:23,990 --> 00:25:31,960
article on on packs and and I suggest

00:25:29,630 --> 00:25:35,450
that be a good place to start

00:25:31,960 --> 00:25:36,530
all right I'll take some questions and

00:25:35,450 --> 00:25:38,740
hopefully I'll be able to answer them

00:25:36,530 --> 00:25:38,740
for you

00:25:43,290 --> 00:25:52,770
I good speech Thanks

00:25:49,620 --> 00:25:54,270
can you maybe talk about any scaling or

00:25:52,770 --> 00:25:56,070
scalability issues that you might have

00:25:54,270 --> 00:25:59,250
faced cuz you're talking about you have

00:25:56,070 --> 00:26:01,320
a very light front-end but you know I'm

00:25:59,250 --> 00:26:04,410
gonna assume if something gets really

00:26:01,320 --> 00:26:09,330
busy or computing resources required do

00:26:04,410 --> 00:26:11,370
you then start you know saying how do

00:26:09,330 --> 00:26:13,260
you see how do you scale this this thing

00:26:11,370 --> 00:26:18,360
and then still keep it micro not macro

00:26:13,260 --> 00:26:20,160
you know so I can't speak directly to

00:26:18,360 --> 00:26:22,530
that because one of the problems I

00:26:20,160 --> 00:26:26,190
always jokingly say is is we don't have

00:26:22,530 --> 00:26:28,650
load we don't have user load we we

00:26:26,190 --> 00:26:33,740
generally have tools that have a very

00:26:28,650 --> 00:26:36,930
small number of users but on the backend

00:26:33,740 --> 00:26:39,390
it'll do a big mass job with ten gig of

00:26:36,930 --> 00:26:41,580
memory and CPU for a couple of hours and

00:26:39,390 --> 00:26:43,620
so so we have that sort of load whereas

00:26:41,580 --> 00:26:45,870
we don't have a web load where where

00:26:43,620 --> 00:26:47,760
we're having to worry about that more

00:26:45,870 --> 00:26:51,210
generally and some of my friends who are

00:26:47,760 --> 00:26:53,760
doing micro services they just say well

00:26:51,210 --> 00:26:55,110
it's a web server you just you just do

00:26:53,760 --> 00:26:58,350
what you would normally do for a web

00:26:55,110 --> 00:27:00,360
server you you replicate you you load

00:26:58,350 --> 00:27:02,760
balance but you're doing on your

00:27:00,360 --> 00:27:08,460
internal systems rather than your public

00:27:02,760 --> 00:27:11,280
facing systems I if you go back to your

00:27:08,460 --> 00:27:16,860
diagram you can see that you have quite

00:27:11,280 --> 00:27:19,410
a complicated dependency graph all like

00:27:16,860 --> 00:27:26,790
this one's yeah you think just like T

00:27:19,410 --> 00:27:30,060
goes to P which goes do you how do you

00:27:26,790 --> 00:27:32,940
deal with dependency management like if

00:27:30,060 --> 00:27:34,800
you need to deploy a new version of

00:27:32,940 --> 00:27:38,160
something that depends on new version of

00:27:34,800 --> 00:27:42,690
something else and you know that type of

00:27:38,160 --> 00:27:46,160
thing well there's two sides to the

00:27:42,690 --> 00:27:50,010
answer one one is it's very important

00:27:46,160 --> 00:27:52,380
for micro services not to hang around in

00:27:50,010 --> 00:27:54,420
development for too long if you end up

00:27:52,380 --> 00:27:55,900
in a situation where you've got a micro

00:27:54,420 --> 00:27:57,490
services sitting there and it's

00:27:55,900 --> 00:27:59,020
it hasn't been updated it hasn't been

00:27:57,490 --> 00:28:00,700
pushed to the server and then someone's

00:27:59,020 --> 00:28:01,960
trying to trying to build against that

00:28:00,700 --> 00:28:03,340
what are they building against their

00:28:01,960 --> 00:28:07,060
building it's the development 1 are they

00:28:03,340 --> 00:28:19,780
building gets the new one another

00:28:07,060 --> 00:28:22,090
another side to that is yes so the other

00:28:19,780 --> 00:28:24,640
side is because it's a market service

00:28:22,090 --> 00:28:26,440
because it's not because it's a restful

00:28:24,640 --> 00:28:29,920
service or a web service or network

00:28:26,440 --> 00:28:32,620
service because you're not linked

00:28:29,920 --> 00:28:34,870
together in a common process in a common

00:28:32,620 --> 00:28:37,360
set of code you're less likely to end up

00:28:34,870 --> 00:28:39,400
in a situation where someone's going and

00:28:37,360 --> 00:28:40,990
using undocumented behavior they're

00:28:39,400 --> 00:28:42,970
going into that library and saying I'm

00:28:40,990 --> 00:28:45,760
gonna just grab that thing that you

00:28:42,970 --> 00:28:48,850
haven't given me but I need you've got

00:28:45,760 --> 00:28:53,200
that strong delima to limit delineation

00:28:48,850 --> 00:28:54,640
between between services and so if you

00:28:53,200 --> 00:28:56,050
want to go and change something say for

00:28:54,640 --> 00:28:58,630
example and this is the this is an

00:28:56,050 --> 00:29:02,170
example always use you you've got three

00:28:58,630 --> 00:29:04,300
sets of bits of data for your user table

00:29:02,170 --> 00:29:07,780
you've got your username your email in

00:29:04,300 --> 00:29:10,090
your password you decide ok we've this

00:29:07,780 --> 00:29:11,500
holy username thing it's useless it

00:29:10,090 --> 00:29:15,880
doesn't work for us we don't need it

00:29:11,500 --> 00:29:17,590
anymore what do you do well you a micro

00:29:15,880 --> 00:29:19,360
service you can just go okay well we've

00:29:17,590 --> 00:29:21,160
get rid of that username column just

00:29:19,360 --> 00:29:23,560
keep the email column and then those

00:29:21,160 --> 00:29:26,950
those things that rely on that username

00:29:23,560 --> 00:29:30,460
column to exist we'll just copy the

00:29:26,950 --> 00:29:33,070
email into a fake user column provide

00:29:30,460 --> 00:29:35,170
that version one of that API and then

00:29:33,070 --> 00:29:37,270
move to a version 2 of the API and then

00:29:35,170 --> 00:29:39,970
run both of them side-by-side they both

00:29:37,270 --> 00:29:43,150
use the same back-end and they make the

00:29:39,970 --> 00:29:45,190
tricks the same tricks and the other

00:29:43,150 --> 00:29:46,540
thing you're talking about dependency

00:29:45,190 --> 00:29:50,350
graph and this is this is one of the

00:29:46,540 --> 00:29:54,100
problems that pact tries to address is

00:29:50,350 --> 00:29:56,080
this who is using my API in your

00:29:54,100 --> 00:29:58,150
continuous integration builds for your

00:29:56,080 --> 00:29:59,770
service you have this big long list of

00:29:58,150 --> 00:30:03,340
of contracts with all you've your

00:29:59,770 --> 00:30:05,530
consumers and when when you want to go

00:30:03,340 --> 00:30:07,360
and change something you know these

00:30:05,530 --> 00:30:09,570
people are using this and if I want to

00:30:07,360 --> 00:30:12,310
make a breaking change something that

00:30:09,570 --> 00:30:14,950
that I know I need and you know we need

00:30:12,310 --> 00:30:16,210
to push through I know that all of these

00:30:14,950 --> 00:30:17,800
things are going to breaks I need to go

00:30:16,210 --> 00:30:19,840
and talk to those people and we need to

00:30:17,800 --> 00:30:21,490
work it out or I need to continue

00:30:19,840 --> 00:30:22,990
supporting that API for the next ten

00:30:21,490 --> 00:30:26,040
years because we really just can't touch

00:30:22,990 --> 00:30:27,910
that thing no one wants to see it oh

00:30:26,040 --> 00:30:29,410
yeah I think we're in a similar

00:30:27,910 --> 00:30:31,750
situation or maybe where you were a few

00:30:29,410 --> 00:30:33,790
months ago we've got only half a dozen

00:30:31,750 --> 00:30:37,480
different sort of Micra services the way

00:30:33,790 --> 00:30:39,670
using we're using some of the components

00:30:37,480 --> 00:30:41,470
where you're using virtual ins and like

00:30:39,670 --> 00:30:42,790
dev play and that kind of stuff we

00:30:41,470 --> 00:30:44,860
haven't really found a good solution

00:30:42,790 --> 00:30:46,600
that's better than just building on the

00:30:44,860 --> 00:30:48,100
same architecture packing it all to a

00:30:46,600 --> 00:30:49,480
Deb and just deploying that in the

00:30:48,100 --> 00:30:50,890
server's so I wonder if you could talk a

00:30:49,480 --> 00:30:52,780
bit more about your deployment hey

00:30:50,890 --> 00:30:54,070
manage that because we're sort of find

00:30:52,780 --> 00:30:55,720
it's a bit piecemeal using sort of

00:30:54,070 --> 00:30:57,910
puppet to manage environments and that's

00:30:55,720 --> 00:31:01,920
sort of yeah so unfortunately I don't

00:30:57,910 --> 00:31:04,150
have a very good answer for you yet we

00:31:01,920 --> 00:31:04,690
we're not happy with how we're doing at

00:31:04,150 --> 00:31:07,720
at the moment

00:31:04,690 --> 00:31:12,640
we're we're packaging vacuuming up and

00:31:07,720 --> 00:31:14,590
pushing it to the server in a similar

00:31:12,640 --> 00:31:21,190
manner we're using Python rather than

00:31:14,590 --> 00:31:25,510
Deb's what we hope to do is one of a

00:31:21,190 --> 00:31:27,480
number of things one is a very great

00:31:25,510 --> 00:31:31,720
kind of fluffy answer and that's docker

00:31:27,480 --> 00:31:34,390
but we don't know we don't know what yet

00:31:31,720 --> 00:31:36,820
I see one of the guys in the audience

00:31:34,390 --> 00:31:42,460
and I mean we need to grab them at some

00:31:36,820 --> 00:31:43,990
point the yeah so there's definitely

00:31:42,460 --> 00:31:45,730
there's definitely some strong need

00:31:43,990 --> 00:31:47,920
there and we've identified that and

00:31:45,730 --> 00:31:50,950
we've actually the the next major

00:31:47,920 --> 00:31:53,260
project after this push of micro

00:31:50,950 --> 00:31:55,000
services work is actually to to come

00:31:53,260 --> 00:31:57,340
along and go okay well we've created

00:31:55,000 --> 00:31:58,570
this problem now how do we how do we get

00:31:57,340 --> 00:32:01,480
it to the point where we're really happy

00:31:58,570 --> 00:32:04,060
with it and it's nice and smooth so you

00:32:01,480 --> 00:32:06,360
have the best answer I know that other

00:32:04,060 --> 00:32:09,310
people have you know some very big

00:32:06,360 --> 00:32:11,020
strongly architected continuous

00:32:09,310 --> 00:32:12,910
integration builds that continually

00:32:11,020 --> 00:32:17,280
deploy to their to their stack via

00:32:12,910 --> 00:32:20,490
various things but not yet

00:32:17,280 --> 00:32:21,810
ah thanks for the talk do you have any

00:32:20,490 --> 00:32:24,690
advice for people that have quite a

00:32:21,810 --> 00:32:27,870
coupled project that are trying to start

00:32:24,690 --> 00:32:32,130
splitting things out yeah definitely

00:32:27,870 --> 00:32:36,030
definitely so we we chose we chose some

00:32:32,130 --> 00:32:38,010
obvious common patterns between between

00:32:36,030 --> 00:32:40,650
most of our tools and said okay well you

00:32:38,010 --> 00:32:42,390
know the users users was a was an

00:32:40,650 --> 00:32:45,840
obvious one a North was an obvious one

00:32:42,390 --> 00:32:50,640
where it's it's you know all the tools

00:32:45,840 --> 00:32:52,320
use it and we know that that we're that

00:32:50,640 --> 00:32:53,790
we're we're going to need to address

00:32:52,320 --> 00:32:56,570
this so you know we grabbed that and

00:32:53,790 --> 00:33:00,360
chunked it off we did it in quite a

00:32:56,570 --> 00:33:03,330
almost a less microservice way some of

00:33:00,360 --> 00:33:05,430
some of the marker services for example

00:33:03,330 --> 00:33:07,680
a workflow one which is a basically a

00:33:05,430 --> 00:33:09,030
wizard tool that remembers steps and

00:33:07,680 --> 00:33:15,120
it's a it's a very common pattern

00:33:09,030 --> 00:33:16,710
throughout of our tools it it has quite

00:33:15,120 --> 00:33:18,450
a lot going on in it and we could split

00:33:16,710 --> 00:33:20,070
that split that up more but we made a

00:33:18,450 --> 00:33:22,140
different decision to kind of go okay

00:33:20,070 --> 00:33:24,300
well we'll make it a bit larger at the

00:33:22,140 --> 00:33:27,510
moment because you know we don't have

00:33:24,300 --> 00:33:28,830
necessarily the best deployment systems

00:33:27,510 --> 00:33:30,300
and the best way of managing this and

00:33:28,830 --> 00:33:33,450
you know we're dipping our toe into the

00:33:30,300 --> 00:33:35,730
water and seeing how it feels so we kind

00:33:33,450 --> 00:33:37,890
of chunked it a bit larger than we

00:33:35,730 --> 00:33:40,020
thought was necessary but you know to

00:33:37,890 --> 00:33:43,580
begin with makes a lot of sense because

00:33:40,020 --> 00:33:43,580
you're a bit less risky

00:34:03,260 --> 00:34:05,320

YouTube URL: https://www.youtube.com/watch?v=lEq-8pKAulA


