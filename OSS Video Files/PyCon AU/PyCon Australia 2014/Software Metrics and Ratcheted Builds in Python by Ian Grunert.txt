Title: Software Metrics and Ratcheted Builds in Python by Ian Grunert
Publication date: 2014-08-19
Playlist: PyCon Australia 2014
Description: 
	The JIRA team automates it's Java build system across development and build systems.

To help scale a small Engineering Health team across a team of 60+ full time developers and growing, we built a engineering metrics system in Python. This consists of a source code scanner, custom metrics generator, as well as a ratcheted build system written in Python using git-notes as a storage mechanism.

By storing the data in git-notes, the data follows the repository which makes it extremely simple and flexible.

In this talk we'll cover how we've used core python features to build these command line tools, the overall architecture of the system, and some tips around introducing Python into your build process.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:09,790 --> 00:00:15,049
thanks for coming out guys my name is

00:00:13,400 --> 00:00:15,980
Ian grunert i worked for it last year

00:00:15,049 --> 00:00:18,050
and i've been working there for about

00:00:15,980 --> 00:00:19,630
three and a half years in that time I've

00:00:18,050 --> 00:00:22,369
worked on a number of different products

00:00:19,630 --> 00:00:25,279
including juror juror add Jogia capture

00:00:22,369 --> 00:00:26,989
and stash I've also done some small

00:00:25,279 --> 00:00:28,910
stuff around confluence and I've also

00:00:26,989 --> 00:00:31,430
done a little bit on bitbucket which is

00:00:28,910 --> 00:00:33,590
actually a Django application in terms

00:00:31,430 --> 00:00:36,530
of why I'm here Python I've actually

00:00:33,590 --> 00:00:38,239
used to write a Python full-time for a

00:00:36,530 --> 00:00:40,640
company called rising some pictures in

00:00:38,239 --> 00:00:42,260
Australia doing command-line tools for

00:00:40,640 --> 00:00:45,170
that stringing together their visual

00:00:42,260 --> 00:00:47,030
effects pipeline and I really enjoyed

00:00:45,170 --> 00:00:48,470
playing board games so that's me playing

00:00:47,030 --> 00:00:50,090
dominion in that particular picture was

00:00:48,470 --> 00:00:51,680
used twice in the same day by the Sydney

00:00:50,090 --> 00:00:54,829
Morning Herald for different articles

00:00:51,680 --> 00:00:58,700
which I thought was pretty funny so what

00:00:54,829 --> 00:01:01,460
this talk is about is a partly about a

00:00:58,700 --> 00:01:03,519
tool called a mate and the addition we

00:01:01,460 --> 00:01:05,570
added around engineering Health metrics

00:01:03,519 --> 00:01:07,820
which allowed us to measure certain

00:01:05,570 --> 00:01:10,070
things about our code base doing some

00:01:07,820 --> 00:01:11,630
static analysis as well as how we use

00:01:10,070 --> 00:01:13,729
get notes to be able to do some

00:01:11,630 --> 00:01:16,280
interesting storage and introspection

00:01:13,729 --> 00:01:18,650
over those values over time so I'll

00:01:16,280 --> 00:01:21,530
start out with some history I work on a

00:01:18,650 --> 00:01:24,710
12 year old code base so I have to be a

00:01:21,530 --> 00:01:27,979
little bit of a historian at times so we

00:01:24,710 --> 00:01:31,159
started out using jurors that Adria is

00:01:27,979 --> 00:01:34,130
using maven so hands up if you've used

00:01:31,159 --> 00:01:36,080
may even before ok there's a few people

00:01:34,130 --> 00:01:39,350
in this room now keep your hands up if

00:01:36,080 --> 00:01:44,060
you actually like maven 0 hands one hand

00:01:39,350 --> 00:01:48,260
ok you probably haven't used it as much

00:01:44,060 --> 00:01:50,210
as us so maven maven has a number of

00:01:48,260 --> 00:01:51,830
folks and will be an entire talk of it

00:01:50,210 --> 00:01:54,710
in of itself with me ranting about how

00:01:51,830 --> 00:01:58,460
much i really dislike made them but one

00:01:54,710 --> 00:02:00,619
of its key folks is just how arcane the

00:01:58,460 --> 00:02:02,119
command-line interfaces as well as how

00:02:00,619 --> 00:02:03,950
difficult it is to kind of add

00:02:02,119 --> 00:02:05,659
additional functionality over the top of

00:02:03,950 --> 00:02:07,850
the command line interface so we often

00:02:05,659 --> 00:02:09,950
have new starters started a lesson

00:02:07,850 --> 00:02:12,319
you've never used maven as a build

00:02:09,950 --> 00:02:14,959
system before and they come in to work

00:02:12,319 --> 00:02:16,640
on on juror and they go ok i know that

00:02:14,959 --> 00:02:18,079
juror users may even to build ok i'll

00:02:16,640 --> 00:02:19,879
try and use the maven command line to

00:02:18,079 --> 00:02:21,919
get some help about how i can deal with

00:02:19,879 --> 00:02:23,180
the project and now we're going maven

00:02:21,919 --> 00:02:24,319
minus myself and they'll get

00:02:23,180 --> 00:02:26,810
this kind of stuff which is pretty

00:02:24,319 --> 00:02:29,239
useless right it's talking about strict

00:02:26,810 --> 00:02:31,609
checks arms and lacks check sums and

00:02:29,239 --> 00:02:35,150
nowhere in here in this first page is to

00:02:31,609 --> 00:02:36,829
say how to build which seems like a

00:02:35,150 --> 00:02:39,500
pretty key thing for a build tool to

00:02:36,829 --> 00:02:42,980
tell you so what ended up happening was

00:02:39,500 --> 00:02:44,780
a lot of developers kind of started

00:02:42,980 --> 00:02:46,159
fighting these little snippets of maven

00:02:44,780 --> 00:02:48,859
and various other bits and pieces that

00:02:46,159 --> 00:02:51,170
allow them to get their stuff done doing

00:02:48,859 --> 00:02:52,969
you know setting versions and releasing

00:02:51,170 --> 00:02:55,099
stuff and all sorts of that kind of kind

00:02:52,969 --> 00:02:57,500
of little bits and pieces and they wrote

00:02:55,099 --> 00:03:00,319
it in bash because they're hacking stuff

00:02:57,500 --> 00:03:02,450
together so we had this extremely this

00:03:00,319 --> 00:03:04,480
drawing bin directory in this growing

00:03:02,450 --> 00:03:07,459
tool called a mate which allowed us to

00:03:04,480 --> 00:03:09,349
wrap maven with a set of shell scripts

00:03:07,459 --> 00:03:10,700
to be able to make it easier to

00:03:09,349 --> 00:03:12,950
understand how to build your own how to

00:03:10,700 --> 00:03:17,359
get stuff done but it was written in

00:03:12,950 --> 00:03:19,389
bash and as you know hopefully any bash

00:03:17,359 --> 00:03:22,519
group that's over about 10 lines becomes

00:03:19,389 --> 00:03:26,510
increasingly will unwieldy and painful

00:03:22,519 --> 00:03:28,970
to modify and extend and test so a

00:03:26,510 --> 00:03:32,030
project began to rewrite Jay make in

00:03:28,970 --> 00:03:34,819
Python and by doing so we we gained a

00:03:32,030 --> 00:03:37,069
huge number of benefits we've got you

00:03:34,819 --> 00:03:39,769
know testability maintainability easy to

00:03:37,069 --> 00:03:43,970
extend code reuse we got excellent

00:03:39,769 --> 00:03:45,349
command line tools ability to do these

00:03:43,970 --> 00:03:48,319
great help strings all that kind of

00:03:45,349 --> 00:03:51,280
stuff so that's kind of the history of

00:03:48,319 --> 00:03:57,680
how a buoy system kind of grew over time

00:03:51,280 --> 00:03:59,870
then about a year ago now we we were

00:03:57,680 --> 00:04:01,699
looking at where during what code wants

00:03:59,870 --> 00:04:03,590
to be in the future right so we we

00:04:01,699 --> 00:04:06,769
started to truly document a lot of the

00:04:03,590 --> 00:04:09,680
kind of layers in the Earth's crust of

00:04:06,769 --> 00:04:11,780
JIRA so what what ends up happening in a

00:04:09,680 --> 00:04:15,590
large java project like your is that

00:04:11,780 --> 00:04:16,940
people will over time discover new and

00:04:15,590 --> 00:04:18,320
better ways of doing things so for

00:04:16,940 --> 00:04:20,269
example with a start out using and what

00:04:18,320 --> 00:04:22,039
you framework like EG mock and then

00:04:20,269 --> 00:04:22,970
somebody goes I've makito is actually

00:04:22,039 --> 00:04:25,400
kind of nice so that will add a

00:04:22,970 --> 00:04:27,349
dependency in the poem by pulling makito

00:04:25,400 --> 00:04:28,820
and start to use it in a certain little

00:04:27,349 --> 00:04:30,919
bit of the code base and test it out and

00:04:28,820 --> 00:04:32,930
go oh that's great and then they kind of

00:04:30,919 --> 00:04:34,909
get bored and you know go on with some

00:04:32,930 --> 00:04:36,460
other stuff right and as a result you

00:04:34,909 --> 00:04:38,620
end up with these multiple layers

00:04:36,460 --> 00:04:40,780
of like mocking frameworks being built

00:04:38,620 --> 00:04:42,460
up and multiple like layers of technical

00:04:40,780 --> 00:04:44,350
debt where people haven't gone through

00:04:42,460 --> 00:04:46,090
and converted from the old wed the new

00:04:44,350 --> 00:04:48,039
way and this is a particularly large

00:04:46,090 --> 00:04:50,590
problem for something like zero because

00:04:48,039 --> 00:04:52,599
we have you know 60 plus developers

00:04:50,590 --> 00:04:57,610
working the product and is growing every

00:04:52,599 --> 00:04:59,919
day and trying to like get that tribal

00:04:57,610 --> 00:05:02,229
knowledge of what the right way of doing

00:04:59,919 --> 00:05:03,460
things right now is and expand that

00:05:02,229 --> 00:05:06,340
across the team is actually quite

00:05:03,460 --> 00:05:08,139
difficult because people will see some

00:05:06,340 --> 00:05:10,060
existing code that does it one way is

00:05:08,139 --> 00:05:11,919
they using easy milk and then copied

00:05:10,060 --> 00:05:13,570
that to a new file and write a new test

00:05:11,919 --> 00:05:17,349
and easy mark and suddenly you now have

00:05:13,570 --> 00:05:19,389
additional work being added to to the

00:05:17,349 --> 00:05:20,710
team who eventually wants to get rid of

00:05:19,389 --> 00:05:24,190
easy more they just happen at the chance

00:05:20,710 --> 00:05:27,160
yet so we documented it but we don't

00:05:24,190 --> 00:05:28,930
really like like this document means

00:05:27,160 --> 00:05:31,210
that somebody has to come along read it

00:05:28,930 --> 00:05:34,090
and internalize all these little bits

00:05:31,210 --> 00:05:37,300
and pieces so ideally we want something

00:05:34,090 --> 00:05:40,659
that can encode all these things that

00:05:37,300 --> 00:05:43,199
we're trying to pay off and run it in

00:05:40,659 --> 00:05:45,340
our build system and let us know hey

00:05:43,199 --> 00:05:47,979
you're actually making our lives harder

00:05:45,340 --> 00:05:51,310
right now so there's a couple of tools

00:05:47,979 --> 00:05:54,070
in the Java world to do similar sorts of

00:05:51,310 --> 00:05:57,430
things so there's find bugs and check

00:05:54,070 --> 00:06:00,789
style which have some hilariously dated

00:05:57,430 --> 00:06:03,789
home pages that you can see but they're

00:06:00,789 --> 00:06:06,460
both extremely powerful tools but

00:06:03,789 --> 00:06:07,659
they're kind of a very heavy weight for

00:06:06,460 --> 00:06:09,940
the kinds of things that we're trying to

00:06:07,659 --> 00:06:11,349
measure right so for the easy more

00:06:09,940 --> 00:06:13,990
example for example if we could just

00:06:11,349 --> 00:06:15,430
count how many imports that easy amok

00:06:13,990 --> 00:06:16,900
there are in the code base and measure

00:06:15,430 --> 00:06:18,820
that over time and make sure it's not

00:06:16,900 --> 00:06:22,630
going up we'll get the benefit that we

00:06:18,820 --> 00:06:25,300
want but trying to encode that in find

00:06:22,630 --> 00:06:27,789
bugs in check styles.xml files and you

00:06:25,300 --> 00:06:31,449
know build out a set of large set of

00:06:27,789 --> 00:06:34,060
metrics like this set here in in such a

00:06:31,449 --> 00:06:37,659
tool is extremely time-consuming so it's

00:06:34,060 --> 00:06:39,070
not really worth it so we look to build

00:06:37,659 --> 00:06:40,900
our own system to be able to do these

00:06:39,070 --> 00:06:43,360
simple kind of metrics that we wanted to

00:06:40,900 --> 00:06:45,610
measure and allow us to run them both on

00:06:43,360 --> 00:06:49,810
our development development machines as

00:06:45,610 --> 00:06:50,980
well as NCAA and NCI is a particularly

00:06:49,810 --> 00:06:53,410
important because we need to make sure

00:06:50,980 --> 00:06:55,600
that if the number stays the same over

00:06:53,410 --> 00:06:57,010
time let's say okay the guild stayed

00:06:55,600 --> 00:06:59,200
green people aren't making things harder

00:06:57,010 --> 00:07:01,570
benefit goes up we need to be able to go

00:06:59,200 --> 00:07:02,710
red so that people know hey you're doing

00:07:01,570 --> 00:07:12,010
something wrong here and they need to go

00:07:02,710 --> 00:07:13,960
in and fix things so I kind of split

00:07:12,010 --> 00:07:15,340
this talk up into two separate sections

00:07:13,960 --> 00:07:17,320
the first is about how we measure those

00:07:15,340 --> 00:07:21,669
metrics and how we use parts to build

00:07:17,320 --> 00:07:23,470
this metric pipeline and then the second

00:07:21,669 --> 00:07:25,330
part is about the storage and how we

00:07:23,470 --> 00:07:27,160
store those metrics the values of those

00:07:25,330 --> 00:07:28,270
matrix over time and measure whether

00:07:27,160 --> 00:07:31,210
they go up and down and do some

00:07:28,270 --> 00:07:32,950
interesting things so on the measurement

00:07:31,210 --> 00:07:36,160
front we have a pretty large code base

00:07:32,950 --> 00:07:39,790
so this is in the main juror repository

00:07:36,160 --> 00:07:41,770
got over 11,000 java files and you know

00:07:39,790 --> 00:07:43,330
hundreds of thousands of lines of code

00:07:41,770 --> 00:07:45,520
and of course that's just in the main

00:07:43,330 --> 00:07:47,919
repository we have all these libraries

00:07:45,520 --> 00:07:49,600
and plugins and stuff that contribute

00:07:47,919 --> 00:07:51,700
code into this this code base so it's

00:07:49,600 --> 00:07:54,280
extremely large and we're trying to

00:07:51,700 --> 00:07:55,150
measure over 50 individual metrics

00:07:54,280 --> 00:07:57,990
that's how much we've got at the moment

00:07:55,150 --> 00:08:00,130
ideally we could expand that to further

00:07:57,990 --> 00:08:01,660
numbers of metrics we need this to be

00:08:00,130 --> 00:08:04,150
really fast because we would like

00:08:01,660 --> 00:08:06,220
developers to have the ability to run

00:08:04,150 --> 00:08:09,850
this locally before pushing the changes

00:08:06,220 --> 00:08:12,580
up so here's an example of a run that I

00:08:09,850 --> 00:08:14,440
did on master this weekend and you can

00:08:12,580 --> 00:08:17,380
see it's finished the the fast set of

00:08:14,440 --> 00:08:20,229
metrics in about 18 seconds which we

00:08:17,380 --> 00:08:22,030
consider to be pretty good usually it

00:08:20,229 --> 00:08:25,210
takes about 18 seconds for maven to get

00:08:22,030 --> 00:08:29,770
out of bed so in comparison is quite

00:08:25,210 --> 00:08:31,539
good so how can we do this so we want to

00:08:29,770 --> 00:08:35,610
be able to scan these large numbers of

00:08:31,539 --> 00:08:38,860
files for a large number of metrics and

00:08:35,610 --> 00:08:40,780
collect these values in a in a decent

00:08:38,860 --> 00:08:42,669
amount of time so annoying approach

00:08:40,780 --> 00:08:43,900
would be something like this I don't

00:08:42,669 --> 00:08:47,170
know if you can see it at the back but

00:08:43,900 --> 00:08:49,209
it's just a grep for imports or an easy

00:08:47,170 --> 00:08:52,209
mark across the Java files in the code

00:08:49,209 --> 00:08:54,670
base and we recount them but this takes

00:08:52,209 --> 00:08:57,610
you know about two and a half seconds on

00:08:54,670 --> 00:09:00,370
my machine and you can imagine if we did

00:08:57,610 --> 00:09:02,620
each of these metrics separately as a

00:09:00,370 --> 00:09:03,470
line like this is going to start to blow

00:09:02,620 --> 00:09:06,050
out into

00:09:03,470 --> 00:09:08,630
and that's not idea so we would like

00:09:06,050 --> 00:09:10,850
that we would like to be able to do a

00:09:08,630 --> 00:09:15,530
single pass over the repository and for

00:09:10,850 --> 00:09:18,020
each file execute multiple metrics so we

00:09:15,530 --> 00:09:20,360
return to python and we turn to j mate

00:09:18,020 --> 00:09:23,600
to be able to build this system in so

00:09:20,360 --> 00:09:27,920
here's an example of the shape of a

00:09:23,600 --> 00:09:30,020
matrix collector so we have two main

00:09:27,920 --> 00:09:33,260
things of note the first is this once

00:09:30,020 --> 00:09:35,450
file which basically allows a metric to

00:09:33,260 --> 00:09:37,280
opt-in to measuring a particular file in

00:09:35,450 --> 00:09:39,950
this case we're only interested in Java

00:09:37,280 --> 00:09:42,560
files so we don't end up measuring jsps

00:09:39,950 --> 00:09:44,960
or saw your velocity files or XML files

00:09:42,560 --> 00:09:47,750
and whatever whatever whatever else we

00:09:44,960 --> 00:09:49,820
have in the code repository and the

00:09:47,750 --> 00:09:52,340
second bit is this on red line which

00:09:49,820 --> 00:09:55,100
gets called back for each line in the

00:09:52,340 --> 00:09:56,810
file right inside there we're looking

00:09:55,100 --> 00:09:59,420
this is actually the java package

00:09:56,810 --> 00:10:00,800
enforce one that are the example that I

00:09:59,420 --> 00:10:03,970
showed you on the previous slide around

00:10:00,800 --> 00:10:06,290
trying to check for easy mark imports

00:10:03,970 --> 00:10:09,200
we're just looking to see if the line

00:10:06,290 --> 00:10:11,060
starts with import and the import class

00:10:09,200 --> 00:10:14,900
that we're looking for is inside the

00:10:11,060 --> 00:10:16,660
line and if it is we record ahead and at

00:10:14,900 --> 00:10:18,650
the end here you can see we're doing

00:10:16,660 --> 00:10:22,190
something a little bit interesting here

00:10:18,650 --> 00:10:26,710
we're saying return not a open curly

00:10:22,190 --> 00:10:29,720
brace in line and for those people who

00:10:26,710 --> 00:10:32,240
don't program java in the in the

00:10:29,720 --> 00:10:33,980
audience java starts out with a package

00:10:32,240 --> 00:10:36,830
statement a series of impulsiveness and

00:10:33,980 --> 00:10:40,880
then it's the starting line of the class

00:10:36,830 --> 00:10:42,560
or the interface and at the end of that

00:10:40,880 --> 00:10:45,560
is got a curly brace so we can look at

00:10:42,560 --> 00:10:48,560
this and be able to bail out or reading

00:10:45,560 --> 00:10:50,570
this particular file earlier because we

00:10:48,560 --> 00:10:54,110
know that after this first curly brace

00:10:50,570 --> 00:10:56,480
there's no more import statements so we

00:10:54,110 --> 00:10:59,180
can exploit exploit our knowledge of the

00:10:56,480 --> 00:11:02,330
problem domain by using a tool like this

00:10:59,180 --> 00:11:05,960
because we have a little bit more

00:11:02,330 --> 00:11:08,570
flexibility than you do in bash so we

00:11:05,960 --> 00:11:10,190
can then reuse that java package imports

00:11:08,570 --> 00:11:12,320
matrix collector multiple times and here

00:11:10,190 --> 00:11:13,940
i've ever used it twice to be able to

00:11:12,320 --> 00:11:16,910
look for easy mark and mock objects

00:11:13,940 --> 00:11:19,520
which are two ancient more

00:11:16,910 --> 00:11:22,160
frameworks to be able to make sure that

00:11:19,520 --> 00:11:25,820
over time we're measuring imports into

00:11:22,160 --> 00:11:27,110
easy malkin into mock objects so that we

00:11:25,820 --> 00:11:30,500
can make sure that people get nudge

00:11:27,110 --> 00:11:32,750
towards using makito and this this kind

00:11:30,500 --> 00:11:35,060
of reuse is is pretty prevalent within

00:11:32,750 --> 00:11:38,090
the the metrics collector so I think we

00:11:35,060 --> 00:11:40,130
use the Java package import sauce for 10

00:11:38,090 --> 00:11:41,620
or 15 of the metrics right so we're

00:11:40,130 --> 00:11:43,790
getting some great code reuse here

00:11:41,620 --> 00:11:45,470
across all sorts of different things

00:11:43,790 --> 00:11:47,480
between you know mocking frameworks but

00:11:45,470 --> 00:11:49,520
also keishon frameworks and all sorts of

00:11:47,480 --> 00:11:51,860
like it's a craft that have accumulated

00:11:49,520 --> 00:11:55,850
over time but we haven't had the time to

00:11:51,860 --> 00:11:57,500
go through and pay back that debt so

00:11:55,850 --> 00:12:01,340
here's an example of something a little

00:11:57,500 --> 00:12:04,610
bit more esoteric and very focused

00:12:01,340 --> 00:12:09,490
towards our code base so we have a

00:12:04,610 --> 00:12:12,050
plug-in system which builds jars which

00:12:09,490 --> 00:12:13,670
nominally look like a regular job but it

00:12:12,050 --> 00:12:16,640
contains this manifest and inside the

00:12:13,670 --> 00:12:19,400
manifest this is an osgi manifest it's

00:12:16,640 --> 00:12:21,230
got a particular line in that manifest

00:12:19,400 --> 00:12:23,450
that we need to look for because with

00:12:21,230 --> 00:12:25,220
that line the plug-in is significantly

00:12:23,450 --> 00:12:28,190
faster to start up and without it it

00:12:25,220 --> 00:12:30,260
isn't so we're trying to make sure that

00:12:28,190 --> 00:12:34,040
we're getting more people opting into

00:12:30,260 --> 00:12:36,650
the fast way of starting up over time so

00:12:34,040 --> 00:12:39,920
whipping up a simple metric like this

00:12:36,650 --> 00:12:43,430
for a plug-in tool you know an hour

00:12:39,920 --> 00:12:45,560
maybe two with tests whereas in

00:12:43,430 --> 00:12:47,840
something like find bugs or check style

00:12:45,560 --> 00:12:51,230
will be going for a long period of time

00:12:47,840 --> 00:12:53,660
trying to get the system to understand

00:12:51,230 --> 00:12:55,010
how jars work and extracting them and

00:12:53,660 --> 00:12:57,320
finding this file and looking for the

00:12:55,010 --> 00:13:00,650
line so we found it extremely productive

00:12:57,320 --> 00:13:04,970
for us to be able to measure the matrix

00:13:00,650 --> 00:13:07,610
using platinum so the end of that we end

00:13:04,970 --> 00:13:10,730
up with a JSON blob that look something

00:13:07,610 --> 00:13:12,980
like this you've got a series of metrics

00:13:10,730 --> 00:13:15,110
inside each metric is that the key for

00:13:12,980 --> 00:13:16,310
the metric we have a bit of a

00:13:15,110 --> 00:13:18,970
description so that we can tell

00:13:16,310 --> 00:13:21,320
developers when they fail the metric hey

00:13:18,970 --> 00:13:22,670
this is what you failed and this is

00:13:21,320 --> 00:13:24,290
where you can go to get some additional

00:13:22,670 --> 00:13:29,090
help about how you can make your code

00:13:24,290 --> 00:13:30,590
better we've got the current value we've

00:13:29,090 --> 00:13:32,540
got the direction that we expect

00:13:30,590 --> 00:13:34,490
to be going in so we can see that for

00:13:32,540 --> 00:13:36,140
some matrix we actually want to track

00:13:34,490 --> 00:13:37,460
them going up over time because we're

00:13:36,140 --> 00:13:40,880
trying to attract adoption of something

00:13:37,460 --> 00:13:42,410
new and the other last piece of the

00:13:40,880 --> 00:13:46,430
puzzle is this check thing which

00:13:42,410 --> 00:13:49,660
basically hints to the CI system if it's

00:13:46,430 --> 00:13:52,460
unchecked then we don't care for it

00:13:49,660 --> 00:13:53,840
violates the metric right if it goes up

00:13:52,460 --> 00:13:55,160
and we weren't expecting it don't fail

00:13:53,840 --> 00:13:57,260
the build first and the reason why we

00:13:55,160 --> 00:13:58,730
added that is just because for some of

00:13:57,260 --> 00:14:03,410
the things that we want to track over

00:13:58,730 --> 00:14:05,780
time is in crib extremely noisy the bill

00:14:03,410 --> 00:14:08,870
becomes very noisy because very simple

00:14:05,780 --> 00:14:11,720
bug fixes it's often a lot easier to be

00:14:08,870 --> 00:14:14,300
able to do things using some of our

00:14:11,720 --> 00:14:17,090
older systems than it is to migrate an

00:14:14,300 --> 00:14:20,570
entire file across to a new templating

00:14:17,090 --> 00:14:23,960
language for example so that's the

00:14:20,570 --> 00:14:26,050
metrics I'll move into the storage up to

00:14:23,960 --> 00:14:26,050
this

00:14:30,189 --> 00:14:35,509
so as I was saying is we have some

00:14:33,459 --> 00:14:36,980
interesting requirements you need to be

00:14:35,509 --> 00:14:39,499
able to run on local developer machines

00:14:36,980 --> 00:14:42,649
we also need to run in CI and we also we

00:14:39,499 --> 00:14:46,249
need to know whether or not this value

00:14:42,649 --> 00:14:50,300
is gone up above our previous expected

00:14:46,249 --> 00:14:51,920
value so we we kind of vessel with this

00:14:50,300 --> 00:14:54,319
for a little bit because we didn't

00:14:51,920 --> 00:14:57,529
really want to add another dependency

00:14:54,319 --> 00:15:01,790
into our already kind of complicated CI

00:14:57,529 --> 00:15:03,470
system one approach would be to have an

00:15:01,790 --> 00:15:05,779
external web app or something where you

00:15:03,470 --> 00:15:08,079
can store these numbers and then pull

00:15:05,779 --> 00:15:10,939
that data down from that external

00:15:08,079 --> 00:15:12,589
application but then we've added another

00:15:10,939 --> 00:15:14,869
thing that you need to maintain over

00:15:12,589 --> 00:15:16,999
time and make sure that that services

00:15:14,869 --> 00:15:20,290
stays up over time and that somebody

00:15:16,999 --> 00:15:23,689
knows how to maintain it and that when

00:15:20,290 --> 00:15:25,100
Fred leaves the company he passes across

00:15:23,689 --> 00:15:26,389
the root rice and all that kind of stuff

00:15:25,100 --> 00:15:28,399
right and there's a there's a huge

00:15:26,389 --> 00:15:29,990
amount of additional stuff that you have

00:15:28,399 --> 00:15:32,509
to do to get one of those services going

00:15:29,990 --> 00:15:35,660
and maintained by IT team or I build

00:15:32,509 --> 00:15:38,869
engineering king so instead we look to

00:15:35,660 --> 00:15:42,769
using get notes so who saw my lightning

00:15:38,869 --> 00:15:44,449
talk yesterday a few people so not

00:15:42,769 --> 00:15:46,610
everyone so I'm just going to quickly

00:15:44,449 --> 00:15:49,579
door about what get notes is so get

00:15:46,610 --> 00:15:51,889
notes allows you to add remove all the

00:15:49,579 --> 00:15:53,809
notes attached to objects inside you get

00:15:51,889 --> 00:15:54,829
repository without touching the objects

00:15:53,809 --> 00:15:56,869
themselves which is pretty interesting

00:15:54,829 --> 00:15:58,639
right because get is a content

00:15:56,869 --> 00:16:00,829
addressable database and if you change

00:15:58,639 --> 00:16:03,049
the content then the house changes and

00:16:00,829 --> 00:16:04,759
everything changes right this is why

00:16:03,049 --> 00:16:06,439
it's kind of difficult to be able to

00:16:04,759 --> 00:16:08,149
change a commit message after you pushed

00:16:06,439 --> 00:16:11,540
up to another repository inside what

00:16:08,149 --> 00:16:13,759
else is pulled it down so this allows us

00:16:11,540 --> 00:16:15,350
to get around that and that's kind of

00:16:13,759 --> 00:16:18,220
interesting this is this is how it

00:16:15,350 --> 00:16:21,889
actually works under the hood so

00:16:18,220 --> 00:16:24,679
separate to the your regular commit

00:16:21,889 --> 00:16:26,569
graph we have this second rep pointing

00:16:24,679 --> 00:16:28,999
at the second commit graph inside our

00:16:26,569 --> 00:16:33,049
repository and our very simple similar

00:16:28,999 --> 00:16:38,089
to the unpacked format for objects we

00:16:33,049 --> 00:16:40,249
have inside this juris JIRA stats ref

00:16:38,089 --> 00:16:42,350
inside this commander points at a tree

00:16:40,249 --> 00:16:44,660
in the tree the

00:16:42,350 --> 00:16:48,440
bio name concatenated with the directory

00:16:44,660 --> 00:16:53,290
name ends up actually pointing at one of

00:16:48,440 --> 00:16:55,940
these commit objects so it knows that

00:16:53,290 --> 00:16:58,910
this particular note is to do with this

00:16:55,940 --> 00:17:01,820
commit inside the other dag and inside

00:16:58,910 --> 00:17:04,520
there inside that blob it stores the the

00:17:01,820 --> 00:17:06,290
note and it in our case and metrics this

00:17:04,520 --> 00:17:10,190
is kind of cool right we can actually

00:17:06,290 --> 00:17:12,950
store metric data over time we then I

00:17:10,190 --> 00:17:17,330
get repository and we get that data

00:17:12,950 --> 00:17:19,210
copied across from as our repo moves

00:17:17,330 --> 00:17:21,560
throughout the system right so on

00:17:19,210 --> 00:17:23,210
developer machines the data is present

00:17:21,560 --> 00:17:25,220
we don't have to pull it from somewhere

00:17:23,210 --> 00:17:28,880
else we don't have another dependency in

00:17:25,220 --> 00:17:30,530
our in our system and then in the in the

00:17:28,880 --> 00:17:34,010
continuous integration environment is

00:17:30,530 --> 00:17:36,290
there too so how do how does this work

00:17:34,010 --> 00:17:42,050
in practice how do we hang this together

00:17:36,290 --> 00:17:44,990
so in our CI environment on bamboo we

00:17:42,050 --> 00:17:47,240
calculate our metrics using the system

00:17:44,990 --> 00:17:49,580
that i was talking earlier we check the

00:17:47,240 --> 00:17:52,250
baseline by looking at the the note

00:17:49,580 --> 00:17:55,520
looking up diag to find a note for the

00:17:52,250 --> 00:17:57,770
previous values of the the stats if it's

00:17:55,520 --> 00:18:00,140
ink if any of the metrics any of the

00:17:57,770 --> 00:18:02,300
individual metrics have increased based

00:18:00,140 --> 00:18:04,460
on the value that we pulled out of one

00:18:02,300 --> 00:18:08,150
of the previous commits then we fail the

00:18:04,460 --> 00:18:09,740
bill otherwise if everything is ok we

00:18:08,150 --> 00:18:12,080
store a new baseline so this is where

00:18:09,740 --> 00:18:14,810
the storage occurs we actually only do

00:18:12,080 --> 00:18:19,790
the storage of metrics into the the the

00:18:14,810 --> 00:18:22,700
notes on the CI system and then locally

00:18:19,790 --> 00:18:24,080
we have this kind of workflow so i can

00:18:22,700 --> 00:18:26,360
calculate the metrics locally i can

00:18:24,080 --> 00:18:30,050
check the baseline just like in CI but

00:18:26,360 --> 00:18:33,470
the difference is if it's increased then

00:18:30,050 --> 00:18:35,660
i can ask for a reason to be able to add

00:18:33,470 --> 00:18:37,370
an exception to the rule and then

00:18:35,660 --> 00:18:39,170
otherwise we Pat them on the back as I

00:18:37,370 --> 00:18:41,960
hey good job make sure you push your

00:18:39,170 --> 00:18:45,110
stuff so what does that look like we've

00:18:41,960 --> 00:18:46,460
got this year's a output from the eh

00:18:45,110 --> 00:18:48,020
metric system locally and you can see

00:18:46,460 --> 00:18:50,030
right down the bottom here I don't know

00:18:48,020 --> 00:18:51,650
if people with the back and see it it

00:18:50,030 --> 00:18:54,620
asks do you want to accept the

00:18:51,650 --> 00:18:55,559
violations to you know this metric up

00:18:54,620 --> 00:18:58,769
the top here and we're

00:18:55,559 --> 00:19:00,929
being increased and you can say yes or

00:18:58,769 --> 00:19:05,789
no and provide a message a reason for

00:19:00,929 --> 00:19:09,690
the increase so how we store that is a

00:19:05,789 --> 00:19:12,870
second set of get notes so a long sight

00:19:09,690 --> 00:19:14,850
we have the Jura stats that say that it

00:19:12,870 --> 00:19:17,009
gets pushed in by a CEO I to be able to

00:19:14,850 --> 00:19:18,749
say this is the value of the metrics of

00:19:17,009 --> 00:19:20,909
this particular commitment and then

00:19:18,749 --> 00:19:24,210
we've got the g assessment exclusions to

00:19:20,909 --> 00:19:28,789
be able to say okay I know that this

00:19:24,210 --> 00:19:32,399
number went up but that's ok because

00:19:28,789 --> 00:19:34,289
reason right because I don't know it's

00:19:32,399 --> 00:19:40,320
late and I want to get a bit might be a

00:19:34,289 --> 00:19:41,399
reason that a developer pushes in so how

00:19:40,320 --> 00:19:43,049
does this work in practice do you

00:19:41,399 --> 00:19:44,970
actually have to know all these these

00:19:43,049 --> 00:19:48,240
are cain't git commands to be able to

00:19:44,970 --> 00:19:49,649
get it to work nor get actually allows

00:19:48,240 --> 00:19:51,779
you to get the notes out through a

00:19:49,649 --> 00:19:54,480
simple Lord command so you can do get

00:19:51,779 --> 00:19:57,649
more show notes and say the the note

00:19:54,480 --> 00:19:59,940
namespace that you're interested in and

00:19:57,649 --> 00:20:01,619
we actually pull out the noise for the

00:19:59,940 --> 00:20:03,929
GSS pull out for the notes of the jury

00:20:01,619 --> 00:20:05,700
exclusion and do this this calculation

00:20:03,929 --> 00:20:07,679
to be able to say okay have the metrics

00:20:05,700 --> 00:20:10,230
gone up ok have the metrics going up and

00:20:07,679 --> 00:20:16,129
it was excluded by one of the exclusions

00:20:10,230 --> 00:20:18,539
ok now you know yes good job or no fail

00:20:16,129 --> 00:20:20,879
see that's kind of how we do our storage

00:20:18,539 --> 00:20:22,830
and by storing it in get notes and

00:20:20,879 --> 00:20:25,019
across the entire commit graph we end up

00:20:22,830 --> 00:20:28,320
with lots of additional benefits right

00:20:25,019 --> 00:20:29,730
so one example is we have a series of

00:20:28,320 --> 00:20:31,470
war boards within atlassian which is

00:20:29,730 --> 00:20:34,350
powered by an open source project called

00:20:31,470 --> 00:20:36,269
atlas board you can go online and

00:20:34,350 --> 00:20:38,580
download that Atlas board for yourself

00:20:36,269 --> 00:20:40,460
and write it get it get a war board

00:20:38,580 --> 00:20:44,029
going that looks like this if you want

00:20:40,460 --> 00:20:46,320
but we we could write we wrote our own a

00:20:44,029 --> 00:20:48,119
gadget for that war board to be at a

00:20:46,320 --> 00:20:50,070
keep track of some of the metrics that

00:20:48,119 --> 00:20:51,600
we're interested in overtime and be able

00:20:50,070 --> 00:20:53,970
to visually represent whether or not

00:20:51,600 --> 00:20:56,759
they've gone up or down so the only time

00:20:53,970 --> 00:21:00,570
that you get one of these red ones is if

00:20:56,759 --> 00:21:03,059
it's if the the metric has increased and

00:21:00,570 --> 00:21:04,679
somebody put in an exclusion right so

00:21:03,059 --> 00:21:06,090
that's how you end up with increases

00:21:04,679 --> 00:21:08,970
happening and then we can do this these

00:21:06,090 --> 00:21:11,640
kind of drafts over time of war

00:21:08,970 --> 00:21:13,950
the metric values are so here's another

00:21:11,640 --> 00:21:17,640
example we actually have separate from

00:21:13,950 --> 00:21:20,820
from Atlas forward but over set of grass

00:21:17,640 --> 00:21:22,620
over time of a set of metrics so we were

00:21:20,820 --> 00:21:24,690
in this case we're using d3 to be able

00:21:22,620 --> 00:21:26,130
to manage your metrics but because it's

00:21:24,690 --> 00:21:28,950
all and get notes you've got this full

00:21:26,130 --> 00:21:31,080
historical data of what the values are

00:21:28,950 --> 00:21:32,789
over time which I found to be extremely

00:21:31,080 --> 00:21:35,419
powerful to be able to deal with this

00:21:32,789 --> 00:21:37,679
kind of additional tooling over the top

00:21:35,419 --> 00:21:39,990
whereas other approaches where you would

00:21:37,679 --> 00:21:43,230
only store say the last one you don't

00:21:39,990 --> 00:21:44,850
get this kind of benefit all right I

00:21:43,230 --> 00:21:46,919
think that's about all I've got to say

00:21:44,850 --> 00:21:49,530
about the engineer Health metrics up

00:21:46,919 --> 00:21:52,620
just before we stop for questions I just

00:21:49,530 --> 00:21:55,289
want to do a quick plug so atlassian is

00:21:52,620 --> 00:21:59,460
hiring in Sydney San Francisco Austin

00:21:55,289 --> 00:22:03,299
Manila Poland guitars polym so if you're

00:21:59,460 --> 00:22:06,000
interested in working for it last seen

00:22:03,299 --> 00:22:07,620
on developer tools in all sorts of

00:22:06,000 --> 00:22:09,539
different languages or working on our

00:22:07,620 --> 00:22:10,860
SAS platform or infrastructure or

00:22:09,539 --> 00:22:12,270
working on a build engineering team

00:22:10,860 --> 00:22:14,190
we've got lots of different

00:22:12,270 --> 00:22:17,309
opportunities of various different skill

00:22:14,190 --> 00:22:19,169
levels so if you're interested either

00:22:17,309 --> 00:22:22,230
come and talk to me or Roger who's here

00:22:19,169 --> 00:22:24,419
in the front row or have a look on our

00:22:22,230 --> 00:22:28,490
website atlassian calm / company /

00:22:24,419 --> 00:22:28,490
careers all right thanks guys

00:22:39,470 --> 00:22:41,530

YouTube URL: https://www.youtube.com/watch?v=VeLcicj3GrA


