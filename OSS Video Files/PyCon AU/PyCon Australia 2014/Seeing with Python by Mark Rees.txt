Title: Seeing with Python by Mark Rees
Publication date: 2014-08-11
Playlist: PyCon Australia 2014
Description: 
	In 2013 I purchased a Ninja Block (http://ninjablocks.com/) and wanted to add a camera based sensor to it. So began my adventures in computer vision using python. The talk will discuss the various libraries (including PyOpenCV & SimpleCV ) available for python to perform CV tasks like motion detection, object tracking & facial recognition. As my goals for the camera sensor underwent "feature creep" the project required it's own dedicated processing power, so a BeagleBone Black & later a Raspberry Pi were purchased and the project became a IoT device. I will also share my experiences with developing python CV solutions ARM based computers. If the demo gods are willing, code examples will be demonstrated.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:12,680 --> 00:00:19,109
good afternoon so our next speaker is

00:00:16,199 --> 00:00:21,929
Mark Rees has been programming for over

00:00:19,109 --> 00:00:23,640
30 years and start using Python at 1.4

00:00:21,929 --> 00:00:27,980
so here's some talk today is called

00:00:23,640 --> 00:00:27,980
seeing with Python please welcome buck

00:00:31,310 --> 00:00:37,200
thank you yeah I'm up from the same

00:00:34,079 --> 00:00:39,120
vintages Peter I don't have a punch card

00:00:37,200 --> 00:00:40,440
story my punch cards were the ones where

00:00:39,120 --> 00:00:46,650
you put the pencil I'm went to high

00:00:40,440 --> 00:00:48,830
school and I've got the glorious title

00:00:46,650 --> 00:00:52,650
of CTO so I don't program much anymore

00:00:48,830 --> 00:00:56,240
so my Python now is what I do in my

00:00:52,650 --> 00:00:59,310
spare time so i can keep my handed and

00:00:56,240 --> 00:01:02,130
this does talk is more about a problem i

00:00:59,310 --> 00:01:04,259
wanted to solve at home but

00:01:02,130 --> 00:01:07,799
interestingly a couple of things have

00:01:04,259 --> 00:01:14,820
come out of it that mean i'll be able to

00:01:07,799 --> 00:01:18,060
actually use it for work okay so okay

00:01:14,820 --> 00:01:19,620
when when I started putting this talk

00:01:18,060 --> 00:01:21,030
together I started to think about what

00:01:19,620 --> 00:01:25,590
did I know about computer vision and I'd

00:01:21,030 --> 00:01:26,970
forgotten that a long time ago and it's

00:01:25,590 --> 00:01:30,180
condensed that because the resolution of

00:01:26,970 --> 00:01:32,490
the screen a long time ago i did some

00:01:30,180 --> 00:01:34,350
computer vision and another job and back

00:01:32,490 --> 00:01:36,799
then it was called machine vision so

00:01:34,350 --> 00:01:39,659
this was nineteen eighty-four and

00:01:36,799 --> 00:01:42,420
cameras were things that cost five or

00:01:39,659 --> 00:01:44,850
six thousand dollars and they had

00:01:42,420 --> 00:01:51,540
parallel cables and you talked directly

00:01:44,850 --> 00:01:53,369
to the charge coupled device and you had

00:01:51,540 --> 00:01:55,830
to write everything in a simpler and you

00:01:53,369 --> 00:02:00,690
basically move the image from the camera

00:01:55,830 --> 00:02:02,159
to memory and another microprocessor

00:02:00,690 --> 00:02:07,260
took over and handle that image why you

00:02:02,159 --> 00:02:10,500
took the next shot and all your

00:02:07,260 --> 00:02:12,450
development was done on computers like

00:02:10,500 --> 00:02:14,790
faxes and things like that and then you

00:02:12,450 --> 00:02:16,260
get all your algorithms done and then

00:02:14,790 --> 00:02:19,640
you would put it down onto a

00:02:16,260 --> 00:02:23,250
microprocessor and debug Madeley

00:02:19,640 --> 00:02:26,459
and why did I do this I work for a

00:02:23,250 --> 00:02:29,340
company that graded fruit ok so we

00:02:26,459 --> 00:02:31,920
weighed fruit normally but the big trend

00:02:29,340 --> 00:02:35,750
was we needed to size for it using a

00:02:31,920 --> 00:02:40,380
camera and this fruit would go past at a

00:02:35,750 --> 00:02:41,520
hundred cups per minute and then that's

00:02:40,380 --> 00:02:43,110
what you did when you weighed it when

00:02:41,520 --> 00:02:47,069
you wanted to go optical you basically

00:02:43,110 --> 00:02:48,270
flick these q fruit down the lanes at a

00:02:47,069 --> 00:02:50,430
speed that if you stood at the end of it

00:02:48,270 --> 00:02:52,500
you probably died and so you have to

00:02:50,430 --> 00:02:54,750
take all these pictures so I had six

00:02:52,500 --> 00:03:00,269
months of that then never did anything

00:02:54,750 --> 00:03:01,440
else we compute a vision and then comes

00:03:00,269 --> 00:03:03,120
along there and I thought I'd better

00:03:01,440 --> 00:03:06,510
look at what computer vision is now and

00:03:03,120 --> 00:03:11,040
it's a lot more complex but in the end

00:03:06,510 --> 00:03:14,519
all we're talking about is we are taking

00:03:11,040 --> 00:03:16,170
an image ok but what we tend to do with

00:03:14,519 --> 00:03:20,100
computer vision now what you think of

00:03:16,170 --> 00:03:21,959
computer vision especially with NSA

00:03:20,100 --> 00:03:24,510
surveillance and things like that is all

00:03:21,959 --> 00:03:26,900
about this real-time identifying who you

00:03:24,510 --> 00:03:29,430
are are you a terrorist things like that

00:03:26,900 --> 00:03:32,090
there's cameras everywhere I mean

00:03:29,430 --> 00:03:34,260
supposedly London is the most

00:03:32,090 --> 00:03:35,610
photographed city in the world they

00:03:34,260 --> 00:03:36,750
don't have police on the beat anymore

00:03:35,610 --> 00:03:38,940
they have them all looking at the

00:03:36,750 --> 00:03:43,049
cameras and then you've got people like

00:03:38,940 --> 00:03:44,459
Google trying to have automated driving

00:03:43,049 --> 00:03:47,310
so they've got cameras and stuff on like

00:03:44,459 --> 00:03:49,290
that but in the end as I say all it is

00:03:47,310 --> 00:03:54,120
is we are taking an image and we have to

00:03:49,290 --> 00:03:57,150
process the image so my reality in

00:03:54,120 --> 00:04:01,049
computer vision is last year I bought a

00:03:57,150 --> 00:04:05,430
ninja bot thanks so Kickstarter project

00:04:01,049 --> 00:04:07,560
out of Sydney Australia it's a ARM

00:04:05,430 --> 00:04:09,480
processor board with Adreno on it and

00:04:07,560 --> 00:04:12,959
you get all these cool senses I was

00:04:09,480 --> 00:04:15,299
going to build a burglar alarm only

00:04:12,959 --> 00:04:17,340
problem that turned out was I put my

00:04:15,299 --> 00:04:18,959
sensor where I wanted it by the door and

00:04:17,340 --> 00:04:20,820
we're at the time we're living in a

00:04:18,959 --> 00:04:23,190
federation house that was very close to

00:04:20,820 --> 00:04:24,870
the footpath and every shadow and sun

00:04:23,190 --> 00:04:27,840
and everything triggered off my sensor

00:04:24,870 --> 00:04:29,130
and my phone was going off and stuff

00:04:27,840 --> 00:04:31,610
like that and it's like what can I do

00:04:29,130 --> 00:04:34,550
and I thought oh I'll

00:04:31,610 --> 00:04:36,379
as only nerd would do I'll make it more

00:04:34,550 --> 00:04:38,840
complex and I'll put a camera there and

00:04:36,379 --> 00:04:41,620
when their sense of fires I work out if

00:04:38,840 --> 00:04:45,189
it's a real reason for me to be worried

00:04:41,620 --> 00:04:47,479
so plugged in a USB camera and

00:04:45,189 --> 00:04:50,629
immediately discovered the problems of

00:04:47,479 --> 00:04:53,300
USB cameras is the slope take a lot of

00:04:50,629 --> 00:04:55,550
processing power and my poor little

00:04:53,300 --> 00:05:02,360
ninja bot could not actually handle the

00:04:55,550 --> 00:05:03,289
camera and the other senses so all of a

00:05:02,360 --> 00:05:05,779
sudden I'm starting going back to

00:05:03,289 --> 00:05:07,219
nineteen eighty four I need a processor

00:05:05,779 --> 00:05:10,330
for my camera so i bought this really

00:05:07,219 --> 00:05:12,620
cool board called a beagle board and

00:05:10,330 --> 00:05:15,529
programmed it up work quite well with

00:05:12,620 --> 00:05:17,180
USB it's got a 1 gigahertz processor in

00:05:15,529 --> 00:05:21,129
it and reasonable memory and things like

00:05:17,180 --> 00:05:23,180
that and sort of solved my problem and

00:05:21,129 --> 00:05:26,240
did all this in Python which is what

00:05:23,180 --> 00:05:27,710
this talks about and then decided our

00:05:26,240 --> 00:05:30,050
but what about if I put a sensor at the

00:05:27,710 --> 00:05:32,060
back and stuff and these are very hard

00:05:30,050 --> 00:05:33,800
boards to get hold of quite reasonably

00:05:32,060 --> 00:05:36,199
priced not not as cheap as the Raspberry

00:05:33,800 --> 00:05:37,909
Pi but very hard to get hold of you sort

00:05:36,199 --> 00:05:39,620
of put your name and then you get

00:05:37,909 --> 00:05:42,800
surprised of when it ends up coming to

00:05:39,620 --> 00:05:45,110
you in the mail so I decided well I'll

00:05:42,800 --> 00:05:47,719
go for a commodity computer and so I

00:05:45,110 --> 00:05:49,879
bought a Raspberry Pi and the really

00:05:47,719 --> 00:05:52,009
cool thing about a raspberry pi it has a

00:05:49,879 --> 00:05:55,159
camera module and guess what it's

00:05:52,009 --> 00:05:57,500
parallel and you move the bits and so

00:05:55,159 --> 00:06:01,370
here I am 2014 back in nineteen

00:05:57,500 --> 00:06:03,610
eighty-four and it's quite cool my

00:06:01,370 --> 00:06:08,210
ten-year-old son built me the camera man

00:06:03,610 --> 00:06:09,830
and you know it basically if I want to

00:06:08,210 --> 00:06:13,069
expand this it's relatively cheap to do

00:06:09,830 --> 00:06:16,279
it so anyway I'll go through my my

00:06:13,069 --> 00:06:18,289
journey using Python now this is based

00:06:16,279 --> 00:06:23,300
on a talk I gave them at PyCon Singapore

00:06:18,289 --> 00:06:25,279
which had a lot more time so I'm I've

00:06:23,300 --> 00:06:27,819
got on my slides but I may go racing

00:06:25,279 --> 00:06:29,810
past I am also doing live demos and

00:06:27,819 --> 00:06:33,650
based on what everybody else has been

00:06:29,810 --> 00:06:36,949
doing live demos I am really silly but

00:06:33,650 --> 00:06:38,629
we'll give it a go okay so the the most

00:06:36,949 --> 00:06:41,149
important thing to understand about

00:06:38,629 --> 00:06:45,110
computer vision it's more about more

00:06:41,149 --> 00:06:45,529
than just taking the image there's lots

00:06:45,110 --> 00:06:47,899
and lot

00:06:45,529 --> 00:06:49,549
the things and the biggest one is

00:06:47,899 --> 00:06:55,129
lighting which is probably why all my

00:06:49,549 --> 00:06:56,899
demos will fail but it's doing things

00:06:55,129 --> 00:06:59,269
about picking the right algorithm for

00:06:56,899 --> 00:07:01,039
the tasks that you want to do having the

00:06:59,269 --> 00:07:02,389
right sensor there's a whole lot of

00:07:01,039 --> 00:07:05,269
different cameras do you have a camera

00:07:02,389 --> 00:07:06,409
that has the infrared filter on dear the

00:07:05,269 --> 00:07:10,999
camera it doesn't have the infrared

00:07:06,409 --> 00:07:12,379
filter on you know how am i how am I

00:07:10,999 --> 00:07:14,869
going to handle the image when I get it

00:07:12,379 --> 00:07:16,579
do I want to do things in real time all

00:07:14,869 --> 00:07:18,739
the things like that so it's it's more

00:07:16,579 --> 00:07:21,649
than going I've got this camera oh look

00:07:18,739 --> 00:07:24,079
it displays on my screen computer vision

00:07:21,649 --> 00:07:27,259
is going to be easy if you look at it as

00:07:24,079 --> 00:07:29,599
I have to take an image at a time and do

00:07:27,259 --> 00:07:31,999
something to the image you make it a lot

00:07:29,599 --> 00:07:34,669
easier for yourself as soon as you start

00:07:31,999 --> 00:07:37,759
talking about real time stuff it becomes

00:07:34,669 --> 00:07:42,259
very hard so if you're here to design

00:07:37,759 --> 00:07:45,529
the latest wrote autonomous robot you're

00:07:42,259 --> 00:07:48,769
in the wrong our talk ok i'm i'm here

00:07:45,529 --> 00:07:49,969
about processing images but if you want

00:07:48,769 --> 00:07:54,199
to know about the tools that you might

00:07:49,969 --> 00:07:57,199
be able to use us i might have a few ok

00:07:54,199 --> 00:07:59,959
so we'll start with the original Python

00:07:57,199 --> 00:08:03,519
image processing ok so the Python

00:07:59,959 --> 00:08:07,509
imaging library it's been there forever

00:08:03,519 --> 00:08:10,699
for ever since i've been using python

00:08:07,509 --> 00:08:13,999
developed by person who did a lot of

00:08:10,699 --> 00:08:17,149
image processing for weather and things

00:08:13,999 --> 00:08:18,709
like that so for a long time it wasn't

00:08:17,149 --> 00:08:20,839
if you didn't even get the sauce you

00:08:18,709 --> 00:08:22,189
just the binaries came if you paid the

00:08:20,839 --> 00:08:24,259
money to him you've got the latest

00:08:22,189 --> 00:08:25,459
version i think you've got the source if

00:08:24,259 --> 00:08:27,229
you didn't pay the money there was this

00:08:25,459 --> 00:08:30,439
little installer and it installed and

00:08:27,229 --> 00:08:32,539
it's happened lee followed Python along

00:08:30,439 --> 00:08:35,929
until I believe you went to work for

00:08:32,539 --> 00:08:39,019
Google and then it stopped you could

00:08:35,929 --> 00:08:41,860
never install it with pip or set up

00:08:39,019 --> 00:08:43,870
tools and so what actually happened is

00:08:41,860 --> 00:08:46,069
some people have picked it up and

00:08:43,870 --> 00:08:49,459
there's the fork of it which is called

00:08:46,069 --> 00:08:52,040
Palou and that has continued to be

00:08:49,459 --> 00:08:54,350
developed and it runs all the latest

00:08:52,040 --> 00:08:55,850
versions of Python but it doesn't really

00:08:54,350 --> 00:08:57,769
matter it depends on your distribution

00:08:55,850 --> 00:09:01,369
sometimes you'll have

00:08:57,769 --> 00:09:04,160
pills sometimes your head pillow but it

00:09:01,369 --> 00:09:06,339
just works so this is where it gets

00:09:04,160 --> 00:09:06,339
interesting

00:09:20,780 --> 00:09:26,690
ok so I'm one of these I will say when

00:09:25,160 --> 00:09:27,980
you're doing things like where you've

00:09:26,690 --> 00:09:31,970
got to use all these libraries and stuff

00:09:27,980 --> 00:09:33,710
you get a lot of dependency hell so I i

00:09:31,970 --> 00:09:35,630
would recommend getting one of the

00:09:33,710 --> 00:09:37,760
scientific distributions so i'm using

00:09:35,630 --> 00:09:41,290
anaconda and it was the first 1i

00:09:37,760 --> 00:09:44,500
downloaded it began with a so it worked

00:09:41,290 --> 00:09:49,540
so you can see i'm running actually a

00:09:44,500 --> 00:09:52,100
slightly out of date version of of pill

00:09:49,540 --> 00:09:53,300
but as i said in the end but it doesn't

00:09:52,100 --> 00:09:55,580
matter whether you've got your

00:09:53,300 --> 00:09:58,400
photographs you've been taking on your

00:09:55,580 --> 00:10:00,260
handphone or its things you are taking

00:09:58,400 --> 00:10:02,600
with a with a video camera in the end

00:10:00,260 --> 00:10:08,180
it's a frame it's an image so you can

00:10:02,600 --> 00:10:12,290
use this to do it and so will do the

00:10:08,180 --> 00:10:16,850
selfie and so we can manipulate the

00:10:12,290 --> 00:10:18,260
image and the quite a nice thing here

00:10:16,850 --> 00:10:19,910
you can invert so if you ever need to do

00:10:18,260 --> 00:10:23,540
some conversion you can you can do it

00:10:19,910 --> 00:10:26,030
with Python the other other thing is in

00:10:23,540 --> 00:10:28,610
a lot of computer vision you don't need

00:10:26,030 --> 00:10:30,140
to worry about color so if you think

00:10:28,610 --> 00:10:33,170
about it an image with color is quite a

00:10:30,140 --> 00:10:34,460
large hunk of memory that you've got to

00:10:33,170 --> 00:10:35,900
process so one of the first things

00:10:34,460 --> 00:10:39,320
you'll do is you'll convert at a great

00:10:35,900 --> 00:10:41,090
scale and again this is where you can

00:10:39,320 --> 00:10:42,470
use the other libraries to do it all the

00:10:41,090 --> 00:10:44,150
other ones I talked about some of them

00:10:42,470 --> 00:10:46,640
have it some don't so you can sort of

00:10:44,150 --> 00:10:50,240
link the libraries together you can do

00:10:46,640 --> 00:10:56,510
some nice things with it we can copy and

00:10:50,240 --> 00:10:59,180
paste regions you can do your sizing and

00:10:56,510 --> 00:11:01,610
rotating and things like that so even if

00:10:59,180 --> 00:11:04,340
you don't ever see yourself doing things

00:11:01,610 --> 00:11:06,020
with video feeds and stuff like that in

00:11:04,340 --> 00:11:09,170
your python toolbox we've got some

00:11:06,020 --> 00:11:10,640
really cool image processing stuff and i

00:11:09,170 --> 00:11:14,150
don't think you'll quite get auto

00:11:10,640 --> 00:11:15,440
awesome but you know you you can do

00:11:14,150 --> 00:11:17,270
stuff and sometimes these things you

00:11:15,440 --> 00:11:19,760
want to do which the tool that your

00:11:17,270 --> 00:11:27,320
heads not not going to quite do it the

00:11:19,760 --> 00:11:32,810
way where you hope another one is in the

00:11:27,320 --> 00:11:34,640
side pay package they've got a a module

00:11:32,810 --> 00:11:36,860
which basically is for handing in

00:11:34,640 --> 00:11:40,190
dimensional arrays okay and this is

00:11:36,860 --> 00:11:42,800
where we go from pill which is basically

00:11:40,190 --> 00:11:44,900
giving it has its own representation of

00:11:42,800 --> 00:11:47,210
an image and it manipulates it to when

00:11:44,900 --> 00:11:49,130
you are starting to use numpy ok so

00:11:47,210 --> 00:11:51,410
again because you need to do a lot of

00:11:49,130 --> 00:11:58,250
mess basically be able to use an array

00:11:51,410 --> 00:12:00,260
as a is a good thing now because I know

00:11:58,250 --> 00:12:01,910
as I said this was based on a bigger

00:12:00,260 --> 00:12:04,370
talk I'm going to run out of time so

00:12:01,910 --> 00:12:09,800
I'll just cruise through a lot of these

00:12:04,370 --> 00:12:11,870
things but what on the last slide on

00:12:09,800 --> 00:12:13,550
this there's a link to a mercurial

00:12:11,870 --> 00:12:15,470
repository with all these notebooks ah

00:12:13,550 --> 00:12:17,210
so even though it says play con

00:12:15,470 --> 00:12:20,720
singapore it is exactly the same thing i

00:12:17,210 --> 00:12:22,340
was showing for bike when I you yes so

00:12:20,720 --> 00:12:25,210
in some respects is a little bit like

00:12:22,340 --> 00:12:28,310
bill you lo de l'image you can save it

00:12:25,210 --> 00:12:32,330
because it's an umpire array you can

00:12:28,310 --> 00:12:35,330
modify it with none by you can get some

00:12:32,330 --> 00:12:37,670
nice statistical information you can do

00:12:35,330 --> 00:12:42,350
all your transform the only thing i will

00:12:37,670 --> 00:12:45,740
say cuz im using ipython here is when

00:12:42,350 --> 00:12:50,390
you display the images in the ipython

00:12:45,740 --> 00:12:52,970
notebook it's expecting in a different

00:12:50,390 --> 00:12:58,130
format than what most of the things when

00:12:52,970 --> 00:12:59,570
they're dealing an umpire so further

00:12:58,130 --> 00:13:01,460
down here you'll see a little function

00:12:59,570 --> 00:13:04,130
which will convert it to more natural

00:13:01,460 --> 00:13:05,210
color still works but it gets quite

00:13:04,130 --> 00:13:06,470
weird when you start seeing these

00:13:05,210 --> 00:13:13,490
oranges where you thought it was green

00:13:06,470 --> 00:13:15,080
and things like that so as I said and

00:13:13,490 --> 00:13:16,490
sighed pie there's a lot of stuff you

00:13:15,080 --> 00:13:17,960
can do you could probably do a lot of

00:13:16,490 --> 00:13:23,300
what's until it's really what you're

00:13:17,960 --> 00:13:26,150
more comfortable with and this is one

00:13:23,300 --> 00:13:29,720
that I am only just discovered and so I

00:13:26,150 --> 00:13:31,910
have no demos but basically what this

00:13:29,720 --> 00:13:33,680
guy has done is a lot of the things he

00:13:31,910 --> 00:13:39,470
he wrote this around about the same time

00:13:33,680 --> 00:13:44,390
as sigh pies in dimensional library was

00:13:39,470 --> 00:13:46,340
being written it's all written in C++ he

00:13:44,390 --> 00:13:48,529
has quite a good if you go to his

00:13:46,340 --> 00:13:50,720
website a paragraph that explains why

00:13:48,529 --> 00:13:53,660
he feels that's better than what some of

00:13:50,720 --> 00:13:55,730
the other ones are offering but the

00:13:53,660 --> 00:13:57,939
quite cool thing about most of the

00:13:55,730 --> 00:14:01,160
Python modules for doing computer vision

00:13:57,939 --> 00:14:03,019
they implement lots of algorithms all

00:14:01,160 --> 00:14:06,860
right and so he has quite a way wide

00:14:03,019 --> 00:14:07,699
range there's over 150 of them and again

00:14:06,860 --> 00:14:09,529
this is one of the things you'll

00:14:07,699 --> 00:14:11,209
discover as I found myself reading lots

00:14:09,529 --> 00:14:12,829
of academic papers just trying to work

00:14:11,209 --> 00:14:15,079
out how these algorithms work because as

00:14:12,829 --> 00:14:17,029
I said computer vision is more than

00:14:15,079 --> 00:14:19,569
taking the photograph it's about

00:14:17,029 --> 00:14:22,699
identifying the algorithm and then

00:14:19,569 --> 00:14:24,470
working out why it doesn't work so you

00:14:22,699 --> 00:14:26,389
have to learn about it but the nice

00:14:24,470 --> 00:14:27,980
thing is a lot of these algorithms and

00:14:26,389 --> 00:14:30,379
the Python rap because there python

00:14:27,980 --> 00:14:32,329
wrappers on C or C++ code are actually

00:14:30,379 --> 00:14:34,639
quite fast so quite that you're not

00:14:32,329 --> 00:14:36,470
suffering the you know the dreaded

00:14:34,639 --> 00:14:44,629
stigma of we're using a scripting

00:14:36,470 --> 00:14:48,829
language this is a book that i bought

00:14:44,629 --> 00:14:53,720
early in my study what what's quite nice

00:14:48,829 --> 00:14:55,519
about this it goes through a whole lot

00:14:53,720 --> 00:14:57,620
of scenarios about doing images doing

00:14:55,519 --> 00:14:58,730
Pam around as I was as Graham will tell

00:14:57,620 --> 00:15:00,410
you I mean battling we're trying to get

00:14:58,730 --> 00:15:03,980
a panorama of the Brisbane River Front

00:15:00,410 --> 00:15:07,939
working I should have stuck with my

00:15:03,980 --> 00:15:09,589
slides with ones from Singapore but it's

00:15:07,939 --> 00:15:11,870
all about feature detection he explains

00:15:09,589 --> 00:15:14,629
feature detection really well and goes

00:15:11,870 --> 00:15:17,389
through whether in pure python code so

00:15:14,629 --> 00:15:18,500
if in the end with what I wanted to

00:15:17,389 --> 00:15:20,360
achieve it was all about feature

00:15:18,500 --> 00:15:22,579
detection so for me it was a good way of

00:15:20,360 --> 00:15:24,290
learning and a good way of playing with

00:15:22,579 --> 00:15:26,120
things the interesting thing is

00:15:24,290 --> 00:15:30,139
everything he has in this book which you

00:15:26,120 --> 00:15:33,410
sort of read as him building up the set

00:15:30,139 --> 00:15:35,629
of tools he's basically created a

00:15:33,410 --> 00:15:37,910
library called PCV and so in it there

00:15:35,629 --> 00:15:40,370
are various feature detectors and things

00:15:37,910 --> 00:15:42,800
as necessary who will hook down into

00:15:40,370 --> 00:15:44,300
rappers of other things or he'll call a

00:15:42,800 --> 00:15:46,220
command-line tool or something like that

00:15:44,300 --> 00:15:48,559
to do it but the good thing is most of

00:15:46,220 --> 00:15:49,910
the computation from a learning

00:15:48,559 --> 00:15:52,509
perspective isn't Python so you can

00:15:49,910 --> 00:15:52,509
actually tweak it

00:15:53,960 --> 00:15:59,480
okay so this is probably most of you

00:15:55,790 --> 00:16:00,830
thought I was going to talk about so

00:15:59,480 --> 00:16:04,220
we've gone from the things that are

00:16:00,830 --> 00:16:07,430
handling the the simple images and this

00:16:04,220 --> 00:16:11,900
still handles simple images but it also

00:16:07,430 --> 00:16:13,460
can handle a camera out of the box okay

00:16:11,900 --> 00:16:15,410
because that's one of the interesting

00:16:13,460 --> 00:16:20,720
issues you have cross-platform

00:16:15,410 --> 00:16:25,670
portabellas portability of cameras so it

00:16:20,720 --> 00:16:28,160
uses the pie game camera interface and a

00:16:25,670 --> 00:16:31,150
lot of people have had lots of good luck

00:16:28,160 --> 00:16:33,680
with us I had a lot of problems with us

00:16:31,150 --> 00:16:36,740
it was a dependency nightmare for me and

00:16:33,680 --> 00:16:42,910
that's not simple CVS fault that's why

00:16:36,740 --> 00:16:46,940
games fault sorry but it was so

00:16:42,910 --> 00:16:48,470
basically I when I tried to do things in

00:16:46,940 --> 00:16:49,760
ipython even though they said that it

00:16:48,470 --> 00:16:53,000
could it didn't work very well but they

00:16:49,760 --> 00:16:56,930
they have a shell and it does actually

00:16:53,000 --> 00:16:58,520
work relatively okay and pretty well

00:16:56,930 --> 00:16:59,810
anything you'll see when they say they

00:16:58,520 --> 00:17:01,100
can do it if you do it in the shell it

00:16:59,810 --> 00:17:03,770
will work if you're try and do an I

00:17:01,100 --> 00:17:05,390
Python which is it's sort of at this

00:17:03,770 --> 00:17:07,400
point in time had become my IDE for

00:17:05,390 --> 00:17:08,930
doing computer vision because the

00:17:07,400 --> 00:17:10,420
feedback is really good when you see the

00:17:08,930 --> 00:17:16,280
images display and things like that I

00:17:10,420 --> 00:17:20,900
found it a little bit hard to work so

00:17:16,280 --> 00:17:25,280
then I moved on to open CV ok so the

00:17:20,900 --> 00:17:26,450
opencv has been round four is almost as

00:17:25,280 --> 00:17:28,520
long as I'm being programming from what

00:17:26,450 --> 00:17:33,170
i can see originally it was an Intel

00:17:28,520 --> 00:17:34,780
project and pretty well all languages

00:17:33,170 --> 00:17:38,180
out there have some sort of wrap around

00:17:34,780 --> 00:17:43,160
opencv again it's just a whole lot of

00:17:38,180 --> 00:17:44,720
algorithms that had that academia has

00:17:43,160 --> 00:17:48,650
identified as good things for doing

00:17:44,720 --> 00:17:50,270
computer vision and symbol V V users

00:17:48,650 --> 00:17:53,590
part of it and has some of his own own

00:17:50,270 --> 00:17:57,350
things and there are a lot of opencv

00:17:53,590 --> 00:17:59,660
wrappers so the one that I'm using is is

00:17:57,350 --> 00:18:01,520
the official one that comes with it

00:17:59,660 --> 00:18:02,840
there's also thing to watch out for

00:18:01,520 --> 00:18:06,560
especially when you're searching on

00:18:02,840 --> 00:18:07,730
Google there are two namespaces CV and

00:18:06,560 --> 00:18:11,240
cb2

00:18:07,730 --> 00:18:13,340
cv2 is the one that is closest to the

00:18:11,240 --> 00:18:15,410
current version of the opencv that's

00:18:13,340 --> 00:18:17,600
being developed it's got to api's in it

00:18:15,410 --> 00:18:18,830
one that they sort of saying will exist

00:18:17,600 --> 00:18:22,190
but they're not really doing any more

00:18:18,830 --> 00:18:27,950
work on it and the new one which is what

00:18:22,190 --> 00:18:31,760
the cb2 one is cv is more pythonic cv2

00:18:27,950 --> 00:18:33,980
is much closer to the c api which

00:18:31,760 --> 00:18:35,510
actually makes it easier when you're

00:18:33,980 --> 00:18:38,620
reading some of the c code to actually

00:18:35,510 --> 00:18:38,620
convert it to your python code

00:18:49,460 --> 00:18:58,850
so again because it's dealing with

00:18:51,620 --> 00:19:04,640
images we can read and write images do

00:18:58,850 --> 00:19:05,870
that we can capture a video file save it

00:19:04,640 --> 00:19:10,460
to another file so you can do later

00:19:05,870 --> 00:19:13,100
processing on it we have complete

00:19:10,460 --> 00:19:16,549
control of the camera okay so it

00:19:13,100 --> 00:19:18,140
basically knows about us be cameras if

00:19:16,549 --> 00:19:21,320
you've got to plug vanilla no that is

00:19:18,140 --> 00:19:28,700
too so you can basically control the

00:19:21,320 --> 00:19:29,659
camera former than Python and again but

00:19:28,700 --> 00:19:32,630
in the end what you're doing is you're

00:19:29,659 --> 00:19:35,720
taking that frame you process that frame

00:19:32,630 --> 00:19:40,120
you decide to skip 29 you take the next

00:19:35,720 --> 00:19:40,120
frame and you do things like that okay

00:19:49,730 --> 00:19:55,610
so basically what I've got because in

00:19:52,460 --> 00:19:59,720
the end what my problem was as I needed

00:19:55,610 --> 00:20:01,250
to identify human being and so I started

00:19:59,720 --> 00:20:03,830
with the face detection stuff because it

00:20:01,250 --> 00:20:05,240
just seemed easy and of course it falls

00:20:03,830 --> 00:20:10,160
over because mouth doesn't push the

00:20:05,240 --> 00:20:15,170
right thing so don't what's really nice

00:20:10,160 --> 00:20:17,510
about opencv is there's a thing called

00:20:15,170 --> 00:20:21,260
highest classifier which is what what

00:20:17,510 --> 00:20:24,080
the standard sort of first time you ever

00:20:21,260 --> 00:20:25,370
go to do face recognition that's what

00:20:24,080 --> 00:20:27,080
you do and there's all this training

00:20:25,370 --> 00:20:28,370
material and you have to train it's

00:20:27,080 --> 00:20:31,340
tough for the really nice thing is they

00:20:28,370 --> 00:20:33,110
have these nice little training files

00:20:31,340 --> 00:20:38,030
and you get them for different things

00:20:33,110 --> 00:20:39,200
faces profiles the human body top part

00:20:38,030 --> 00:20:46,070
of the body bottom part of the body

00:20:39,200 --> 00:20:47,690
identify nose identifying air and again

00:20:46,070 --> 00:20:49,340
I'm because I'm running out of time I

00:20:47,690 --> 00:20:50,810
won't won't demo the thing but basically

00:20:49,340 --> 00:20:53,600
what we can see with this image here is

00:20:50,810 --> 00:20:55,540
because I was running the facial

00:20:53,600 --> 00:20:58,520
recognizer then i can get my region I

00:20:55,540 --> 00:21:01,640
then take that region I asked for it to

00:20:58,520 --> 00:21:04,280
identify eyes and so this is where you

00:21:01,640 --> 00:21:06,890
can start seeing the feature detection

00:21:04,280 --> 00:21:11,680
failing so basically both my son and I

00:21:06,890 --> 00:21:13,910
are three ID but again it's all about

00:21:11,680 --> 00:21:15,590
looking at image intensity and how the

00:21:13,910 --> 00:21:17,900
training is but what you can do is you

00:21:15,590 --> 00:21:20,900
can then sit and do your own training

00:21:17,900 --> 00:21:23,330
for your particular issue that you want

00:21:20,900 --> 00:21:24,590
to do but it's quite neat when you start

00:21:23,330 --> 00:21:27,470
mucking around with these things and

00:21:24,590 --> 00:21:28,760
then you start manipulating intensities

00:21:27,470 --> 00:21:30,800
and doing stuff like that and then

00:21:28,760 --> 00:21:32,750
Python it's really easy to sit there do

00:21:30,800 --> 00:21:34,400
that little change see what the impact

00:21:32,750 --> 00:21:37,310
is maybe change the lighting a little

00:21:34,400 --> 00:21:39,500
bit see what the impact is and we're

00:21:37,310 --> 00:21:44,810
doing it a lot faster than the poor I go

00:21:39,500 --> 00:21:47,420
who's programming and see and the other

00:21:44,810 --> 00:21:49,750
thing that I looked at doing which

00:21:47,420 --> 00:21:52,040
there's another notebook for is actually

00:21:49,750 --> 00:21:56,690
movement detection so I thought about

00:21:52,040 --> 00:21:57,830
replacing the I are completely and so

00:21:56,690 --> 00:21:58,970
again what you can do because you're

00:21:57,830 --> 00:22:01,580
grabbing these frames you can basically

00:21:58,970 --> 00:22:02,930
do delvis on the frames you can decide

00:22:01,580 --> 00:22:04,760
how much the movement is we

00:22:02,930 --> 00:22:07,670
whether it was actually somebody who was

00:22:04,760 --> 00:22:10,370
walking past or whether it was just an

00:22:07,670 --> 00:22:12,560
aberration because of somebody will pass

00:22:10,370 --> 00:22:14,830
the footpath from them the shadow ran

00:22:12,560 --> 00:22:14,830
through

00:22:22,710 --> 00:22:27,779
okay so we'll we'll get on to the

00:22:25,380 --> 00:22:30,840
Raspberry Pi so the secret one of it one

00:22:27,779 --> 00:22:33,000
of them you know the first thing I

00:22:30,840 --> 00:22:36,059
discovered that when i got the Raspberry

00:22:33,000 --> 00:22:38,159
Pi was great it's got Python on it even

00:22:36,059 --> 00:22:39,659
better its girl open CV I didn't have to

00:22:38,159 --> 00:22:41,789
work hard at all to get it to work

00:22:39,659 --> 00:22:45,330
plugged did exactly the same thing that

00:22:41,789 --> 00:22:49,380
I did with the BeagleBoard plugged in

00:22:45,330 --> 00:22:52,559
the USB thing raspberry pi is only 700

00:22:49,380 --> 00:22:54,840
megahertz and when you plug in the USB

00:22:52,559 --> 00:22:56,820
camera it doesn't use the beautiful GPU

00:22:54,840 --> 00:22:59,610
that the Raspberry Pi has on it so it's

00:22:56,820 --> 00:23:01,740
pretty slow and a lot of the stuff that

00:22:59,610 --> 00:23:07,140
I had running well on my big or board

00:23:01,740 --> 00:23:13,289
just was pathetic on my raspberry pi so

00:23:07,140 --> 00:23:15,690
i bought the raspberry pi camera and it

00:23:13,289 --> 00:23:20,340
uses the GPU pretty cool but it doesn't

00:23:15,690 --> 00:23:22,350
work with opencv the reason for that is

00:23:20,340 --> 00:23:24,510
open CVS optimized on the basis that is

00:23:22,350 --> 00:23:26,940
going to identify the cameras exactly

00:23:24,510 --> 00:23:30,390
how linux would identify camera and of

00:23:26,940 --> 00:23:34,500
course it's not USB and it doesn't it's

00:23:30,390 --> 00:23:36,720
not plug-and-play now there are a number

00:23:34,500 --> 00:23:40,679
of ways of doing this all right so there

00:23:36,720 --> 00:23:44,700
are this some user space drivers that

00:23:40,679 --> 00:23:46,470
you can get for it there is C code

00:23:44,700 --> 00:23:49,320
drivers you can compile and try to get

00:23:46,470 --> 00:23:50,460
working when i was at singapore I've had

00:23:49,320 --> 00:23:52,110
a lot of problems of getting a working

00:23:50,460 --> 00:23:56,299
to userspace one never seem to get the

00:23:52,110 --> 00:23:59,190
resolution right things like that but

00:23:56,299 --> 00:24:02,340
what I found is is a guy who's written a

00:23:59,190 --> 00:24:04,740
Python wrapper for the camera and he

00:24:02,340 --> 00:24:06,299
uses a GPU for resizing images and

00:24:04,740 --> 00:24:08,070
things like that and I found that for me

00:24:06,299 --> 00:24:09,960
that just worked beautifully and again

00:24:08,070 --> 00:24:12,120
because my whole mindset was get a frame

00:24:09,960 --> 00:24:14,279
do something with the frame I just

00:24:12,120 --> 00:24:16,950
created a class wrapped it up and then

00:24:14,279 --> 00:24:19,529
that's then I call my opencv around that

00:24:16,950 --> 00:24:22,799
so I don't use the opencv commands for

00:24:19,529 --> 00:24:25,590
handling the cameras I used the the pi

00:24:22,799 --> 00:24:27,330
camera but for me it was a good foot but

00:24:25,590 --> 00:24:28,770
again as I said a lot of people had

00:24:27,330 --> 00:24:31,350
raspberry PI's said they'd had no

00:24:28,770 --> 00:24:36,690
problems with the user space 1 or with

00:24:31,350 --> 00:24:37,950
the compile one um the guys put a lot

00:24:36,690 --> 00:24:42,060
the effort into it because he actually

00:24:37,950 --> 00:24:44,640
wrote it for his wife who used it on a

00:24:42,060 --> 00:24:47,640
industrial microscope to take pictures

00:24:44,640 --> 00:24:48,990
of bacteria so you can do some pretty

00:24:47,640 --> 00:24:55,500
amazing things with it he keeps

00:24:48,990 --> 00:24:57,840
upgrading it so as I said is my this is

00:24:55,500 --> 00:24:59,910
what I do do outside my day job and I

00:24:57,840 --> 00:25:02,160
spend a lot of time traveling around

00:24:59,910 --> 00:25:05,310
Asia so I spent a lot of time do my

00:25:02,160 --> 00:25:10,230
development on hotel televisions in my

00:25:05,310 --> 00:25:14,780
room so I know every trick to get an

00:25:10,230 --> 00:25:17,760
hdmi cable in the back of it I think but

00:25:14,780 --> 00:25:19,500
the main thing to understand is it does

00:25:17,760 --> 00:25:22,140
actually work quite well and because of

00:25:19,500 --> 00:25:24,300
the raspberry pi camera and because it

00:25:22,140 --> 00:25:25,920
is quite fast i compensate for the fact

00:25:24,300 --> 00:25:28,920
that i only have a 700 megahertz

00:25:25,920 --> 00:25:31,530
processor that i'm doing all my

00:25:28,920 --> 00:25:33,840
programming in python and i can do the

00:25:31,530 --> 00:25:34,920
various things that i want to do and so

00:25:33,840 --> 00:25:36,780
in the end even though this picture

00:25:34,920 --> 00:25:42,290
doesn't show it i did solve my problem

00:25:36,780 --> 00:25:46,110
and then my landlord sold the house and

00:25:42,290 --> 00:25:49,650
we had to move and I didn't have the

00:25:46,110 --> 00:25:53,670
problem anymore but I'm really been

00:25:49,650 --> 00:25:57,960
hooked into doing things of the

00:25:53,670 --> 00:26:02,460
Raspberry Pi and with computer vision so

00:25:57,960 --> 00:26:04,230
some resources both those books are

00:26:02,460 --> 00:26:05,610
really good okay you've got to be a

00:26:04,230 --> 00:26:09,060
little bit careful as I said a lot of

00:26:05,610 --> 00:26:10,830
the opencv is about the sea interface if

00:26:09,060 --> 00:26:12,990
you use the CV to you can pretty well

00:26:10,830 --> 00:26:14,670
translate line for line but that's not

00:26:12,990 --> 00:26:17,010
always the best way of doing it where

00:26:14,670 --> 00:26:20,700
the opencv computer vision with Python

00:26:17,010 --> 00:26:22,740
was was quite good there is one for so

00:26:20,700 --> 00:26:24,030
for the Raspberry Pi out of computer

00:26:22,740 --> 00:26:25,830
vision book as I said was good because

00:26:24,030 --> 00:26:28,860
it allowed me to play with the algorithm

00:26:25,830 --> 00:26:29,790
of pure python and will forgive the guy

00:26:28,860 --> 00:26:32,010
at the bottom because he works for

00:26:29,790 --> 00:26:35,480
Microsoft but that is an excellent book

00:26:32,010 --> 00:26:38,610
if you want to know more about the

00:26:35,480 --> 00:26:40,170
computer vision and algorithms is so

00:26:38,610 --> 00:26:43,920
much more I could talk for hours about

00:26:40,170 --> 00:26:45,810
it and it's good fun if you go to

00:26:43,920 --> 00:26:48,659
SlideShare look for hex done 42 you'll

00:26:45,810 --> 00:26:50,789
be able to find the slides and

00:26:48,659 --> 00:26:52,470
the bit bucket repositories there if you

00:26:50,789 --> 00:27:03,450
want to play with the eye place on

00:26:52,470 --> 00:27:15,840
mopeds thank you do you have any

00:27:03,450 --> 00:27:19,529
questions on the Raspberry Pi what sort

00:27:15,840 --> 00:27:24,570
of frame rates can you process I I can

00:27:19,529 --> 00:27:28,049
get 30 per second and and what's quite

00:27:24,570 --> 00:27:31,139
good as the GPU has been closed source

00:27:28,049 --> 00:27:33,359
up until about three months ago and it

00:27:31,139 --> 00:27:36,809
started to be open up a lot more and so

00:27:33,359 --> 00:27:39,450
in the end the hoping that we'll get

00:27:36,809 --> 00:27:40,859
full access to the GPU and when once

00:27:39,450 --> 00:27:42,419
that happens then we'll be able to do

00:27:40,859 --> 00:27:44,159
some really amazing things with what's

00:27:42,419 --> 00:27:45,779
coming out of the camera so the

00:27:44,159 --> 00:27:47,309
raspberry pi foundation has just started

00:27:45,779 --> 00:27:50,460
to do things so that's why the guy can

00:27:47,309 --> 00:27:51,960
do the image resize in the GPU so

00:27:50,460 --> 00:27:55,109
they're hoping that there's going to be

00:27:51,960 --> 00:27:56,309
a Python record for that suit I think

00:27:55,109 --> 00:27:59,369
you kind of answered my question but um

00:27:56,309 --> 00:28:04,109
yeah I was wondering so pi camera is

00:27:59,369 --> 00:28:06,749
obviously wrapping the the everything's

00:28:04,109 --> 00:28:09,479
pie isn't it um the PI cameras wrapping

00:28:06,749 --> 00:28:12,570
the pi camera python library is trapping

00:28:09,479 --> 00:28:13,979
the c api for the pi camera yeah yeah

00:28:12,570 --> 00:28:15,779
because the problem is with the

00:28:13,979 --> 00:28:17,820
Raspberry Pi out of the box all you get

00:28:15,779 --> 00:28:19,739
is these two command line routines one

00:28:17,820 --> 00:28:22,409
to take a camera shot and one to cut

00:28:19,739 --> 00:28:25,229
create a video the thing that I didn't

00:28:22,409 --> 00:28:27,720
mention is all cameras take a time to

00:28:25,229 --> 00:28:30,090
warm up and the problem is when you're

00:28:27,720 --> 00:28:31,229
making an OS system call you never get

00:28:30,090 --> 00:28:32,700
anything when you want the photograph

00:28:31,229 --> 00:28:33,929
because it's three seconds before it

00:28:32,700 --> 00:28:35,669
actually takes a photograph so one of

00:28:33,929 --> 00:28:37,979
the nice things about having this

00:28:35,669 --> 00:28:39,389
wrapper you turn the camera on and then

00:28:37,979 --> 00:28:41,220
you can basically say when I want to

00:28:39,389 --> 00:28:43,409
grab the image so because it's a

00:28:41,220 --> 00:28:46,729
charge-coupled array it has to basically

00:28:43,409 --> 00:28:46,729
warm up so you don't get the noise

00:28:51,390 --> 00:28:55,410
all right thank you very much

00:29:08,870 --> 00:29:10,930

YouTube URL: https://www.youtube.com/watch?v=WlgMwSHyXcg


