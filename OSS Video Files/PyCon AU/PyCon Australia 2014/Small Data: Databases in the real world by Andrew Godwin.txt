Title: Small Data: Databases in the real world by Andrew Godwin
Publication date: 2014-08-18
Playlist: PyCon Australia 2014
Description: 
	We hear a lot about how various different databases and storage methods work at massive scale, but that always comes at a massive engineering and ops cost - and for most companies, that's not what they need anyway.

We'll take a look at databases with the perspective of a smaller engineering team - from 1 to 100 people - and see how databases not only perform at scale, but also how they perform with rapid development, continuous deployment & smaller hardware requirements, and take a look at what Big Data really means anyway.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:05,240 --> 00:00:10,820
the world by Andrew Godwin andrew is a

00:00:08,510 --> 00:00:13,280
django core developer in the primary

00:00:10,820 --> 00:00:15,620
author of both south and the new Django

00:00:13,280 --> 00:00:17,270
migrations framework he's employed as a

00:00:15,620 --> 00:00:19,430
senior software engineer on eventbrite

00:00:17,270 --> 00:00:21,320
architecture team and has spent much of

00:00:19,430 --> 00:00:23,000
the past decade making databases do

00:00:21,320 --> 00:00:25,250
things they were never designed for in

00:00:23,000 --> 00:00:27,439
his spare time he also enjoys archery

00:00:25,250 --> 00:00:34,489
and flies private planes ladies and

00:00:27,439 --> 00:00:36,949
gentleman Andrew gaaban hello everyone

00:00:34,489 --> 00:00:38,600
and welcome to my talk this is sort of

00:00:36,949 --> 00:00:40,790
an interesting sort of bridging the gap

00:00:38,600 --> 00:00:43,010
between small and large companies the

00:00:40,790 --> 00:00:44,780
idea is that you know scaling is a

00:00:43,010 --> 00:00:45,920
fantastic idea but it's not for people

00:00:44,780 --> 00:00:47,809
who are sort of starting out like this

00:00:45,920 --> 00:00:50,030
is how you sort of approach that topic

00:00:47,809 --> 00:00:52,220
to start with as I was introduced very

00:00:50,030 --> 00:00:54,019
nicely i am andrew i am a senior

00:00:52,220 --> 00:00:55,610
engineer at eventbrite where i do our

00:00:54,019 --> 00:00:57,830
architecture team among other things

00:00:55,610 --> 00:00:59,900
this means making sure that we can work

00:00:57,830 --> 00:01:01,879
for next ten years that can scale to the

00:00:59,900 --> 00:01:04,100
next ten billion dollars of tickets and

00:01:01,879 --> 00:01:06,170
so on and all to django cool developer

00:01:04,100 --> 00:01:07,909
in a particular the upcoming django 1.7

00:01:06,170 --> 00:01:09,829
release is kind of my baby in some

00:01:07,909 --> 00:01:12,590
senses it's finally where we've landed

00:01:09,829 --> 00:01:14,780
the 1.7 migration stuff in Django is

00:01:12,590 --> 00:01:17,570
kind of a port of South for those of you

00:01:14,780 --> 00:01:19,520
familiar obvious blows wrong basically

00:01:17,570 --> 00:01:21,109
Django migrations our way of changing

00:01:19,520 --> 00:01:23,030
your database tables to match your

00:01:21,109 --> 00:01:25,039
current models in the Django it's a very

00:01:23,030 --> 00:01:26,659
complex topic I have many many other

00:01:25,039 --> 00:01:28,670
talks went i speaking career as did

00:01:26,659 --> 00:01:30,950
about my grey shins and many points my

00:01:28,670 --> 00:01:33,590
first one was at 2008 at DragonCon us so

00:01:30,950 --> 00:01:34,759
there's a lot of data on that but this

00:01:33,590 --> 00:01:37,069
is different this is about sort of like

00:01:34,759 --> 00:01:39,560
big data what is big data is it a

00:01:37,069 --> 00:01:41,359
thousand rows is it a million is it a

00:01:39,560 --> 00:01:44,119
billion trillion like this differs

00:01:41,359 --> 00:01:45,679
everybody like I have run sites with all

00:01:44,119 --> 00:01:47,359
four of these numbers as number of rows

00:01:45,679 --> 00:01:49,009
they all have their own challenges

00:01:47,359 --> 00:01:50,539
sometimes a thousand rows is the most

00:01:49,009 --> 00:01:52,069
difficult one to do look in the

00:01:50,539 --> 00:01:53,780
acquisition of data it can be very

00:01:52,069 --> 00:01:56,600
important data it can be reliability

00:01:53,780 --> 00:01:58,189
sometimes a billion rows is like it is a

00:01:56,600 --> 00:01:59,659
billion numbers that's trivial to store

00:01:58,189 --> 00:02:01,999
you've got to think of a different sort

00:01:59,659 --> 00:02:03,859
of styles of stuff here and scalable

00:02:01,999 --> 00:02:05,899
designs are always a trade-off when you

00:02:03,859 --> 00:02:07,490
sit down and go we're starting a brand

00:02:05,899 --> 00:02:09,560
new site or a brand new company or a

00:02:07,490 --> 00:02:11,300
brand new project and we want to make

00:02:09,560 --> 00:02:13,069
this scalable you're trading off your

00:02:11,300 --> 00:02:14,810
time now for your time later it's

00:02:13,069 --> 00:02:16,580
settled that pure and simple

00:02:14,810 --> 00:02:18,200
and at some point if you're very sure

00:02:16,580 --> 00:02:19,520
and you've got a guaranteed user base

00:02:18,200 --> 00:02:23,120
which I'm if you have I'm very happy for

00:02:19,520 --> 00:02:24,709
you because nobody else does then yes

00:02:23,120 --> 00:02:26,270
perhaps you can make that call but there

00:02:24,709 --> 00:02:28,160
is a nice middle ground here or saying

00:02:26,270 --> 00:02:29,750
well we'll make the site not scalable

00:02:28,160 --> 00:02:31,880
for now and put some features on

00:02:29,750 --> 00:02:33,920
iteration on in making our development

00:02:31,880 --> 00:02:35,840
process much more flexible and having

00:02:33,920 --> 00:02:37,580
more iterations but leaving the right

00:02:35,840 --> 00:02:39,500
great points in there so that when we do

00:02:37,580 --> 00:02:41,000
get big we're not backed into a corner

00:02:39,500 --> 00:02:43,069
there's a sort of middle ground here

00:02:41,000 --> 00:02:45,560
saying well these couple of key points

00:02:43,069 --> 00:02:47,120
as long as we recognize these exist and

00:02:45,560 --> 00:02:48,920
we plan for their existence it's kinda

00:02:47,120 --> 00:02:50,480
like a reverse technical debt you're

00:02:48,920 --> 00:02:52,280
getting technical credit for the future

00:02:50,480 --> 00:02:53,720
you've already put some work in you've

00:02:52,280 --> 00:02:54,920
already planned that basically idea of

00:02:53,720 --> 00:02:56,510
well we'll know we'll have these

00:02:54,920 --> 00:02:58,489
problems and then we can have them as

00:02:56,510 --> 00:03:00,620
the famously said premature optimization

00:02:58,489 --> 00:03:03,200
is the root of all evil but there's a

00:03:00,620 --> 00:03:05,720
middle ground there if you're a small

00:03:03,200 --> 00:03:08,840
company or agency your lifeblood is

00:03:05,720 --> 00:03:10,190
change like I have never seen a project

00:03:08,840 --> 00:03:12,319
where the spec was correct at the start

00:03:10,190 --> 00:03:13,819
even the government contents rightly

00:03:12,319 --> 00:03:16,790
have billions of dollars so we have no

00:03:13,819 --> 00:03:18,260
hope and so you have to focus especially

00:03:16,790 --> 00:03:20,269
to start up as well where you have a

00:03:18,260 --> 00:03:21,709
limited runway unlimited funding as an

00:03:20,269 --> 00:03:23,840
agency where you're working with clients

00:03:21,709 --> 00:03:26,390
money and often very thrifty of course

00:03:23,840 --> 00:03:27,350
because people are within money you have

00:03:26,390 --> 00:03:30,530
to focus on the ability to change

00:03:27,350 --> 00:03:32,780
quickly you've got you to skeleton from

00:03:30,530 --> 00:03:34,970
day one and a big part of this is

00:03:32,780 --> 00:03:37,060
illogical these four main points here

00:03:34,970 --> 00:03:39,650
rapid development continuous deployment

00:03:37,060 --> 00:03:41,090
correct hardware choice and scaling

00:03:39,650 --> 00:03:42,829
breakpoints now I'll cover all four of

00:03:41,090 --> 00:03:44,870
these in the presentation but these are

00:03:42,829 --> 00:03:46,310
sort of my key things like point out to

00:03:44,870 --> 00:03:48,200
companies is saying like these is what

00:03:46,310 --> 00:03:49,639
you should be focusing on these are the

00:03:48,200 --> 00:03:50,569
key things you to be looking at and

00:03:49,639 --> 00:03:53,120
making sure they all ready for the

00:03:50,569 --> 00:03:55,400
future rapid development is number one

00:03:53,120 --> 00:03:57,380
thing this is my gracious a lot of

00:03:55,400 --> 00:03:59,239
applications day to day changes are

00:03:57,380 --> 00:04:01,250
changes in schema they are making sure

00:03:59,239 --> 00:04:03,470
that as you're changing your site there

00:04:01,250 --> 00:04:06,230
is no overhead it's about making the

00:04:03,470 --> 00:04:08,120
right call if you're faced with well we

00:04:06,230 --> 00:04:09,889
could model this correctly when it means

00:04:08,120 --> 00:04:11,359
two hours of downtime to apply the new

00:04:09,889 --> 00:04:12,620
column change you're going to make the

00:04:11,359 --> 00:04:14,840
wrong choice you're giving the wrong

00:04:12,620 --> 00:04:16,340
incentives to lovers and so a very big

00:04:14,840 --> 00:04:17,900
part of this is making sure that you

00:04:16,340 --> 00:04:19,459
have all the things in place to make

00:04:17,900 --> 00:04:21,919
sure that you can change the schema

00:04:19,459 --> 00:04:23,450
rapidly and another part of this is this

00:04:21,919 --> 00:04:26,010
sort of trend towards schema this which

00:04:23,450 --> 00:04:27,720
is incredible no sequel that's a very

00:04:26,010 --> 00:04:29,880
because you can have synchronous cumulus

00:04:27,720 --> 00:04:32,040
stuff but when you choose to have an

00:04:29,880 --> 00:04:33,390
explicit schema you specify columns you

00:04:32,040 --> 00:04:35,160
specified types if it's for malaysian

00:04:33,390 --> 00:04:36,690
ships it's very simple you have these 10

00:04:35,160 --> 00:04:39,330
things okay where we have names and

00:04:36,690 --> 00:04:41,310
weights and stuff it's fantastic when

00:04:39,330 --> 00:04:42,570
you specify schemin of stuff it's not

00:04:41,310 --> 00:04:44,700
skiing willis there's an implicit

00:04:42,570 --> 00:04:46,380
schemer in there when i have a document

00:04:44,700 --> 00:04:48,420
so like new MongoDB or post your

00:04:46,380 --> 00:04:51,090
straight on fields i have a document in

00:04:48,420 --> 00:04:53,070
there like this now sure it is a blob

00:04:51,090 --> 00:04:54,990
it's just like a random dictionary of

00:04:53,070 --> 00:04:56,490
stuff but there isn't it there is

00:04:54,990 --> 00:04:58,170
implicit scheme mill your application is

00:04:56,490 --> 00:05:00,510
expecting to see a name key it's

00:04:58,170 --> 00:05:02,430
expecting to see an ID key and so even

00:05:00,510 --> 00:05:04,590
though it's not codified in a file or in

00:05:02,430 --> 00:05:06,600
a sort of sequel spec your applications

00:05:04,590 --> 00:05:09,270
logic is codifying an implicit schema

00:05:06,600 --> 00:05:11,670
and one of the problems of this is that

00:05:09,270 --> 00:05:14,610
it turns out that databases are better

00:05:11,670 --> 00:05:16,500
than you at store and data shopper if

00:05:14,610 --> 00:05:17,970
you're doing all your checking logic in

00:05:16,500 --> 00:05:19,560
application you have to cope with all

00:05:17,970 --> 00:05:21,690
the same things your database does with

00:05:19,560 --> 00:05:23,910
missing fields with incorrect types of

00:05:21,690 --> 00:05:26,130
these four examples of this slide only

00:05:23,910 --> 00:05:28,290
one of them is correct only this top

00:05:26,130 --> 00:05:30,210
left one here is the correct it's a

00:05:28,290 --> 00:05:32,100
correct format this one has a string

00:05:30,210 --> 00:05:33,570
there rather than integer value good

00:05:32,100 --> 00:05:35,940
luck catching that this one has

00:05:33,570 --> 00:05:37,590
correctly it has a string here but I'll

00:05:35,940 --> 00:05:39,360
look the name field has actually been

00:05:37,590 --> 00:05:40,770
put in French damn it must have left a

00:05:39,360 --> 00:05:42,600
translation string somewhere in there

00:05:40,770 --> 00:05:43,950
and this one is actually correct but it

00:05:42,600 --> 00:05:45,390
isn't but it's a negative integer so

00:05:43,950 --> 00:05:46,560
there's a you know as a raincheck on

00:05:45,390 --> 00:05:48,090
that like you can't have negative weight

00:05:46,560 --> 00:05:51,330
less sure because I'm crazy science

00:05:48,090 --> 00:05:53,100
fiction movie it all this kind of comes

00:05:51,330 --> 00:05:54,630
up like because we're doing all this

00:05:53,100 --> 00:05:56,130
work because was sitting there and

00:05:54,630 --> 00:05:58,380
giving yourself all these different

00:05:56,130 --> 00:06:00,060
constraints at the end of the day you're

00:05:58,380 --> 00:06:01,770
codifying all this problems in your

00:06:00,060 --> 00:06:03,420
logic and as you change the schema

00:06:01,770 --> 00:06:04,800
you're adding more if statements if I

00:06:03,420 --> 00:06:06,540
have different things if I rename the

00:06:04,800 --> 00:06:08,340
fields if I change all the way things

00:06:06,540 --> 00:06:10,200
appear writing more and more

00:06:08,340 --> 00:06:11,610
conditionals more and more if statements

00:06:10,200 --> 00:06:12,690
more and more different logics try and

00:06:11,610 --> 00:06:15,330
get around this and you're not the

00:06:12,690 --> 00:06:17,010
clutter unless you go through every time

00:06:15,330 --> 00:06:18,330
you do a change and rewrite every single

00:06:17,010 --> 00:06:20,580
record and your to scheme the database

00:06:18,330 --> 00:06:22,230
which by the way is the point you're not

00:06:20,580 --> 00:06:24,420
doing because otherwise it's really slow

00:06:22,230 --> 00:06:26,460
and expensive much like column changes

00:06:24,420 --> 00:06:28,380
in databases are then you've got this

00:06:26,460 --> 00:06:31,020
problem and it's a problem in to work on

00:06:28,380 --> 00:06:32,050
Sofia where that just going ah dude

00:06:31,020 --> 00:06:33,699
seamless is not

00:06:32,050 --> 00:06:35,650
solution if you for some things it's

00:06:33,699 --> 00:06:36,810
perfect for things like CMS's where you

00:06:35,650 --> 00:06:39,280
have ram and stuff and pages

00:06:36,810 --> 00:06:40,479
displacement I sense the things where

00:06:39,280 --> 00:06:41,470
you have a very fixed schema that you

00:06:40,479 --> 00:06:44,680
know up front and that might change

00:06:41,470 --> 00:06:47,319
while you x you know don't don't derbies

00:06:44,680 --> 00:06:49,990
issue continuous deployment kind of

00:06:47,319 --> 00:06:53,409
rolls into this now a big part of a site

00:06:49,990 --> 00:06:55,360
being I hattiesburg agile quite far

00:06:53,409 --> 00:06:57,610
situations and hang easy to sort of

00:06:55,360 --> 00:06:59,440
development cycles is deploying all the

00:06:57,610 --> 00:07:02,680
time if you deploy once every three

00:06:59,440 --> 00:07:03,940
months you have no idea what your sites

00:07:02,680 --> 00:07:04,900
like what you're currently doing you

00:07:03,940 --> 00:07:06,940
need to make sure they've anything like

00:07:04,900 --> 00:07:08,770
at least once a week if not once a day I

00:07:06,940 --> 00:07:10,479
once every few hours and lanyard I think

00:07:08,770 --> 00:07:11,830
you've deployed roughly four to five

00:07:10,479 --> 00:07:13,930
hundred day because like that's just

00:07:11,830 --> 00:07:16,240
happens work we did a change pushed it

00:07:13,930 --> 00:07:18,129
out it was all do it and part of this is

00:07:16,240 --> 00:07:19,900
having feature flies which there's a

00:07:18,129 --> 00:07:21,460
talk yesterday that's I'm elated about

00:07:19,900 --> 00:07:24,129
feature flags that if you're interested

00:07:21,460 --> 00:07:25,509
in sort of helps this process but you

00:07:24,129 --> 00:07:27,310
need sort of make sure that you are

00:07:25,509 --> 00:07:29,259
deploying all the time and part of this

00:07:27,310 --> 00:07:31,870
is changing your fever now this slide

00:07:29,259 --> 00:07:34,479
assumes are using a standard relational

00:07:31,870 --> 00:07:36,969
database presley post grades because my

00:07:34,479 --> 00:07:37,990
sequels not the best as people who see

00:07:36,969 --> 00:07:40,690
my previous talk to me ever and it

00:07:37,990 --> 00:07:42,120
notice meet up saying well but specs of

00:07:40,690 --> 00:07:45,370
the basic things you want to do here are

00:07:42,120 --> 00:07:47,440
things that don't block database a lot

00:07:45,370 --> 00:07:49,479
of things in actually my see for all you

00:07:47,440 --> 00:07:51,340
change a column they will rewrite every

00:07:49,479 --> 00:07:53,740
single storage row so example if you add

00:07:51,340 --> 00:07:55,930
a default attic one with a default it

00:07:53,740 --> 00:07:57,639
will make space for it and then write

00:07:55,930 --> 00:07:59,110
the default into every single slot in

00:07:57,639 --> 00:08:01,360
every single one of our data files it

00:07:59,110 --> 00:08:03,310
will take forever so the key things are

00:08:01,360 --> 00:08:05,620
that from post grades you can add a

00:08:03,310 --> 00:08:07,120
nullable column for free it's basically

00:08:05,620 --> 00:08:09,400
loculus it's almost in the same uses

00:08:07,120 --> 00:08:11,620
almost instantaneous and even if it's

00:08:09,400 --> 00:08:12,490
not a noble column technically even if

00:08:11,620 --> 00:08:14,680
you're supposed to have a call for

00:08:12,490 --> 00:08:16,750
valium in there in every single row and

00:08:14,680 --> 00:08:19,330
it is nullable then backfill the values

00:08:16,750 --> 00:08:21,069
in slowly over time parallels your

00:08:19,330 --> 00:08:22,210
application running and finally when

00:08:21,069 --> 00:08:23,770
they're all done you can remove the

00:08:22,210 --> 00:08:25,240
constraint and that's a that's still a

00:08:23,770 --> 00:08:27,940
check but it's a little bit shorter but

00:08:25,240 --> 00:08:30,009
you can do this in a multi-phase process

00:08:27,940 --> 00:08:31,509
like you're having to trade off

00:08:30,009 --> 00:08:33,399
simplicity but you're gaining that

00:08:31,509 --> 00:08:35,620
flexibility that speed and that sort of

00:08:33,399 --> 00:08:36,849
availability at the same time another

00:08:35,620 --> 00:08:39,370
one thing here is that if you are

00:08:36,849 --> 00:08:41,229
without a database that can do not

00:08:39,370 --> 00:08:42,909
adding straightaway but you can do is

00:08:41,229 --> 00:08:44,450
you can add a new table with one to run

00:08:42,909 --> 00:08:46,130
one to one relationship

00:08:44,450 --> 00:08:47,780
and backfill the values that way you

00:08:46,130 --> 00:08:50,390
kind of increase the number of queries

00:08:47,780 --> 00:08:52,100
you're trading off initial time here for

00:08:50,390 --> 00:08:54,200
later query timing application which

00:08:52,100 --> 00:08:56,120
could be valuable could be terrible but

00:08:54,200 --> 00:08:57,620
it's an interesting way of like hanging

00:08:56,120 --> 00:09:00,050
off a sort of a lot of you data off a

00:08:57,620 --> 00:09:01,400
very very popular solvable if everybody

00:09:00,050 --> 00:09:03,620
has a couple of these because we have a

00:09:01,400 --> 00:09:06,230
big my single database we're adding a

00:09:03,620 --> 00:09:07,640
column would take around two days and so

00:09:06,230 --> 00:09:09,500
we have a few sort of one-to-one tables

00:09:07,640 --> 00:09:11,420
that were like well for now we can do

00:09:09,500 --> 00:09:12,650
this and because there are about ten

00:09:11,420 --> 00:09:16,820
percent of events it's not that thing

00:09:12,650 --> 00:09:18,950
the database it finally work out what

00:09:16,820 --> 00:09:21,230
type changes your database can do

00:09:18,950 --> 00:09:22,880
without any touching at all in

00:09:21,230 --> 00:09:24,920
particular if I believe if you shrink

00:09:22,880 --> 00:09:26,570
the length of the char field that

00:09:24,920 --> 00:09:28,370
doesn't require your item puker it does

00:09:26,570 --> 00:09:29,750
because it has to have a new space if

00:09:28,370 --> 00:09:31,850
you shrink the length of it that's fine

00:09:29,750 --> 00:09:33,440
similarly you can convert certain times

00:09:31,850 --> 00:09:35,900
two other ones depending on the back end

00:09:33,440 --> 00:09:37,880
for a relatively low cost because they

00:09:35,900 --> 00:09:40,220
are representing the same or in less

00:09:37,880 --> 00:09:41,690
bites on the disk but that's kind of a

00:09:40,220 --> 00:09:43,430
trick you want to do in some cases it's

00:09:41,690 --> 00:09:46,130
impossible the things like you know like

00:09:43,430 --> 00:09:47,660
compost grows them take changing text to

00:09:46,130 --> 00:09:50,390
string at some point animals is almost

00:09:47,660 --> 00:09:53,600
interchangeable to and hardware choice

00:09:50,390 --> 00:09:55,790
it's a big Bulgarian mine the cloud it's

00:09:53,600 --> 00:09:59,030
wonderful it's mystical it's kind of a

00:09:55,790 --> 00:10:01,880
lie the cloud is wonderful if you

00:09:59,030 --> 00:10:05,930
depress the sermons for about three or

00:10:01,880 --> 00:10:07,670
four months I mean so daily wrong I love

00:10:05,930 --> 00:10:09,380
not having to go down today Center at

00:10:07,670 --> 00:10:11,330
four in the morning or swap discs that's

00:10:09,380 --> 00:10:13,220
fantastic but I get that with colocation

00:10:11,330 --> 00:10:15,500
with no hands I get that the dedicated

00:10:13,220 --> 00:10:19,280
servers with a lot of us done and the

00:10:15,500 --> 00:10:21,460
problem that is VMs so Amazon ec2 or

00:10:19,280 --> 00:10:23,720
even your own stuff a terrible fiscal

00:10:21,460 --> 00:10:25,910
databases really suffer on virtual

00:10:23,720 --> 00:10:28,280
machines they all still work obviously

00:10:25,910 --> 00:10:30,530
and things are improving we have single

00:10:28,280 --> 00:10:32,930
DTD now which helps I owe a little bit

00:10:30,530 --> 00:10:35,720
but there's still a lot worse than likes

00:10:32,930 --> 00:10:37,760
a memory or CPU usage and related base

00:10:35,720 --> 00:10:40,790
is obviously going to be doing a lot of

00:10:37,760 --> 00:10:43,670
i/o and so one of the things you can do

00:10:40,790 --> 00:10:46,820
is stick your database on this nice big

00:10:43,670 --> 00:10:48,740
box with disks ssds if you want to

00:10:46,820 --> 00:10:50,930
because I quite cheap these days and you

00:10:48,740 --> 00:10:53,800
will see a very decent increase in speed

00:10:50,930 --> 00:10:57,650
over another part of eyes memory is king

00:10:53,800 --> 00:10:58,250
don't run your database with anything

00:10:57,650 --> 00:11:01,070
else

00:10:58,250 --> 00:11:03,380
time like the database is kind of rely

00:11:01,070 --> 00:11:05,540
on having cash and memory lying around

00:11:03,380 --> 00:11:07,550
they can use like they're optimized

00:11:05,540 --> 00:11:10,400
themselves as patterns if you once a

00:11:07,550 --> 00:11:11,600
poster airs and like solar and Redis and

00:11:10,400 --> 00:11:13,190
I feel things in the same box they're

00:11:11,600 --> 00:11:14,990
all going to be clashing and sort of

00:11:13,190 --> 00:11:16,010
having the wrong stuff and overriding

00:11:14,990 --> 00:11:17,750
it's a memory and I'll just get was

00:11:16,010 --> 00:11:19,610
performance like make sure they're nice

00:11:17,750 --> 00:11:21,590
and buy them sell and ice little bubble

00:11:19,610 --> 00:11:23,090
and sort of have the right idea what

00:11:21,590 --> 00:11:26,660
they're doing and you'll be a lot better

00:11:23,090 --> 00:11:30,230
off another sort of cheap trick that I

00:11:26,660 --> 00:11:32,270
learned running so I used to run a site

00:11:30,230 --> 00:11:35,960
called minecraft forums you may only not

00:11:32,270 --> 00:11:37,760
heard of at one point got 350 million

00:11:35,960 --> 00:11:40,760
views and months that were that it was a

00:11:37,760 --> 00:11:43,700
lot of traffic but that all ran up a

00:11:40,760 --> 00:11:47,990
single box the power of adding more

00:11:43,700 --> 00:11:49,850
power is amazing at many points that's

00:11:47,990 --> 00:11:52,040
in the box admittedly had 32 gigabytes

00:11:49,850 --> 00:11:53,630
of ram more calls and I checked stick

00:11:52,040 --> 00:11:55,640
out and other things but it was amazing

00:11:53,630 --> 00:11:57,050
like we just added more power and at

00:11:55,640 --> 00:11:58,550
some point that was enough to keep up it

00:11:57,050 --> 00:12:00,770
was a city is very read heavy traffic it

00:11:58,550 --> 00:12:03,260
was fine but if you're a small company

00:12:00,770 --> 00:12:04,460
and you've got a lot of a lot of

00:12:03,260 --> 00:12:07,130
problems with your sort of throughput in

00:12:04,460 --> 00:12:09,080
a database don't think you have to go on

00:12:07,130 --> 00:12:11,030
OMG shardul we need to have like this

00:12:09,080 --> 00:12:12,500
complex web pages and you can find by

00:12:11,030 --> 00:12:13,880
yourselves a lot of time but it's upping

00:12:12,500 --> 00:12:16,490
the size your server for a good number

00:12:13,880 --> 00:12:18,530
of years the point you hit the top end

00:12:16,490 --> 00:12:21,230
server you've probably got a decent pops

00:12:18,530 --> 00:12:22,580
and architecting face anyway another

00:12:21,230 --> 00:12:24,890
cheap thing you can do is add a

00:12:22,580 --> 00:12:28,220
read-only replica so if you've got a lot

00:12:24,890 --> 00:12:30,020
of read traffic just have a replica of

00:12:28,220 --> 00:12:31,940
your database that sort of streams from

00:12:30,020 --> 00:12:33,500
it and then put all your reads on that

00:12:31,940 --> 00:12:35,060
replica it's a very simple pattern it's

00:12:33,500 --> 00:12:37,070
worked for many companies for many years

00:12:35,060 --> 00:12:39,890
the only catch is that there's

00:12:37,070 --> 00:12:42,560
replication lag so if you write on a

00:12:39,890 --> 00:12:45,530
page just sticky that page to the master

00:12:42,560 --> 00:12:47,300
and sort of that can occur for that page

00:12:45,530 --> 00:12:49,010
load if you're doing web applications

00:12:47,300 --> 00:12:51,320
example and then on the next one you can

00:12:49,010 --> 00:12:54,380
use you can use the repertory oh but

00:12:51,320 --> 00:12:55,339
just make sure that you're sticking when

00:12:54,380 --> 00:12:58,700
you're doing rights and things aren't

00:12:55,339 --> 00:12:59,870
consistent and you're fine but the key

00:12:58,700 --> 00:13:01,610
thing here is are saying the beginning

00:12:59,870 --> 00:13:03,680
is scaling breakpoints like there are a

00:13:01,610 --> 00:13:06,050
lot of nice little things you can

00:13:03,680 --> 00:13:07,520
consider now the well things that go

00:13:06,050 --> 00:13:08,910
into companies are going to companies

00:13:07,520 --> 00:13:11,040
and see like well

00:13:08,910 --> 00:13:14,610
once and we'll change this one this one

00:13:11,040 --> 00:13:15,840
big trick would fix this thing in three

00:13:14,610 --> 00:13:17,670
years time it's one of the things that

00:13:15,840 --> 00:13:19,410
you sort of grows you become a sort of

00:13:17,670 --> 00:13:22,020
architecting hops person you see you've

00:13:19,410 --> 00:13:24,600
seen as like a fool come on max is not

00:13:22,020 --> 00:13:26,010
as hard as it sounds but the sort of the

00:13:24,600 --> 00:13:27,300
three things i like to look at I've

00:13:26,010 --> 00:13:29,550
given them sort of arbitrary names here

00:13:27,300 --> 00:13:31,230
shouting point a vertical split and

00:13:29,550 --> 00:13:33,240
consistency anyway I will explain them

00:13:31,230 --> 00:13:35,550
they're pointless words shouting point

00:13:33,240 --> 00:13:37,710
this is where you have a data set that's

00:13:35,550 --> 00:13:38,940
obviously petition of all the shards if

00:13:37,710 --> 00:13:41,850
everybody has one of these it's called

00:13:38,940 --> 00:13:43,650
events events have tickets they have

00:13:41,850 --> 00:13:45,540
users orders they're all separated into

00:13:43,650 --> 00:13:47,820
a nice world by each event there's not

00:13:45,540 --> 00:13:49,320
much into pollination and so if you see

00:13:47,820 --> 00:13:51,420
that pattern of what well you know we

00:13:49,320 --> 00:13:53,460
have many tables here but this these

00:13:51,420 --> 00:13:55,860
sets of data are all grouped by these

00:13:53,460 --> 00:13:59,100
sort of overarching ideas for example on

00:13:55,860 --> 00:14:00,330
a forum you know forum different form of

00:13:59,100 --> 00:14:02,580
sub-forums could be a good bit of char

00:14:00,330 --> 00:14:04,950
does not met many of them but things

00:14:02,580 --> 00:14:06,570
like say flickr you've got user accounts

00:14:04,950 --> 00:14:08,790
focus on you can show by user there's

00:14:06,570 --> 00:14:10,050
always different things and making sure

00:14:08,790 --> 00:14:11,610
the key thing here is to make sure that

00:14:10,050 --> 00:14:14,310
you don't break out about attraction

00:14:11,610 --> 00:14:16,110
back to them Hugh suddenly interlink

00:14:14,310 --> 00:14:17,910
between things so for example if we

00:14:16,110 --> 00:14:19,530
certainly have like an int'l inc event

00:14:17,910 --> 00:14:20,940
right between different events that was

00:14:19,530 --> 00:14:22,290
quite strongly done with the website we

00:14:20,940 --> 00:14:23,610
would great someone's abstraction we

00:14:22,290 --> 00:14:25,680
would suddenly have thrown away all that

00:14:23,610 --> 00:14:27,900
work we've been gaining over the last

00:14:25,680 --> 00:14:29,940
five seven years by having that in place

00:14:27,900 --> 00:14:32,010
and so just be aware if you have these

00:14:29,940 --> 00:14:33,630
nice all sort of isolated set it's

00:14:32,010 --> 00:14:35,580
really good try and keep the middle bit

00:14:33,630 --> 00:14:38,940
sort of Isis try get the models nice and

00:14:35,580 --> 00:14:40,680
rounded and pure and then the nice thing

00:14:38,940 --> 00:14:42,870
here there's an easy migration plan if

00:14:40,680 --> 00:14:44,270
you want a shard there are sort of a

00:14:42,870 --> 00:14:46,830
couple of steps here that's pretty easy

00:14:44,270 --> 00:14:48,240
first of all there are three there are

00:14:46,830 --> 00:14:50,490
more there's more than one way to shard

00:14:48,240 --> 00:14:53,520
this is my third way it is not the only

00:14:50,490 --> 00:14:55,800
way there is at least another major way

00:14:53,520 --> 00:14:58,440
of doing it but what you want to do take

00:14:55,800 --> 00:15:00,210
your primary key implement consistent

00:14:58,440 --> 00:15:01,710
hashing so it's randomized if you just

00:15:00,210 --> 00:15:03,690
showered why it like incrementing

00:15:01,710 --> 00:15:05,220
integer it won't be sort of crunch your

00:15:03,690 --> 00:15:07,290
buddy Valerie's tributed or uniformly

00:15:05,220 --> 00:15:08,550
anyway so when I can good hash the good

00:15:07,290 --> 00:15:10,650
uniform distributions that's alright

00:15:08,550 --> 00:15:12,810
sort of probably separated then you

00:15:10,650 --> 00:15:14,680
invent a large number of logical shards

00:15:12,810 --> 00:15:17,140
let's say 2048

00:15:14,680 --> 00:15:19,600
powers of two and then what you do is

00:15:17,140 --> 00:15:21,460
you map each of those different primary

00:15:19,600 --> 00:15:23,320
key hashes into different buckets often

00:15:21,460 --> 00:15:25,570
by prefix or vital the first number of

00:15:23,320 --> 00:15:28,180
bytes and then what you do is you have a

00:15:25,570 --> 00:15:29,589
mapping of logical shards to physical

00:15:28,180 --> 00:15:32,890
shots is having like react work for

00:15:29,589 --> 00:15:34,779
example so you know you say that okay at

00:15:32,890 --> 00:15:37,540
the moment when we first when we first

00:15:34,779 --> 00:15:38,740
do this all of our logic mashhad at from

00:15:37,540 --> 00:15:41,110
this one database and actually it's one

00:15:38,740 --> 00:15:42,279
you're using a lot same database so all

00:15:41,110 --> 00:15:44,230
you're doing is writing application

00:15:42,279 --> 00:15:46,630
logic code nothing has changed the

00:15:44,230 --> 00:15:48,880
database is unchanged entirely and then

00:15:46,630 --> 00:15:51,070
it thinks it's sharding then with

00:15:48,880 --> 00:15:53,110
limited my greater shard you tell on a

00:15:51,070 --> 00:15:55,149
replica let it replicate later across

00:15:53,110 --> 00:15:59,050
and suddenly you split down say okay

00:15:55,149 --> 00:16:02,110
shards one 2023 or on this server shards

00:15:59,050 --> 00:16:03,250
15 24 2048 or this server and then you

00:16:02,110 --> 00:16:04,779
can cut the replication off and then you

00:16:03,250 --> 00:16:06,399
have two copies and then just delete the

00:16:04,779 --> 00:16:08,350
old ones that shouldn't be there and you

00:16:06,399 --> 00:16:09,730
have a shot in system and you can keep

00:16:08,350 --> 00:16:12,850
doing this it's not perfect but it's a

00:16:09,730 --> 00:16:13,990
good way of starting out vertical split

00:16:12,850 --> 00:16:15,520
is a different cognitive approach the

00:16:13,990 --> 00:16:18,130
same problem this is where you don't

00:16:15,520 --> 00:16:20,230
have groups of things across table you

00:16:18,130 --> 00:16:22,150
have entirely separate tables for

00:16:20,230 --> 00:16:24,100
example if you have you know a ticketing

00:16:22,150 --> 00:16:24,940
system as well as your main website they

00:16:24,100 --> 00:16:28,440
set for it though so many different

00:16:24,940 --> 00:16:30,790
databases and the key thing here is that

00:16:28,440 --> 00:16:33,339
having different right loads on the

00:16:30,790 --> 00:16:35,320
database server is bad you've got a very

00:16:33,339 --> 00:16:36,910
very right heavy load on database and

00:16:35,320 --> 00:16:38,110
the very read heavy load of the database

00:16:36,910 --> 00:16:39,880
so like say right heavy could be like

00:16:38,110 --> 00:16:42,520
our tracking read Harry could be like

00:16:39,880 --> 00:16:43,959
really forum posts those are conflicting

00:16:42,520 --> 00:16:45,610
they're sort of hitting the wrong parts

00:16:43,959 --> 00:16:47,080
the server if you separate them out they

00:16:45,610 --> 00:16:48,640
can be a lot happier by themselves like

00:16:47,080 --> 00:16:50,650
database is letting one kind of thing

00:16:48,640 --> 00:16:53,230
generally example you have a database

00:16:50,650 --> 00:16:54,550
row with like one field updated a lot

00:16:53,230 --> 00:16:56,500
but the rest of fields are very static

00:16:54,550 --> 00:16:58,410
you probably pull that out of new table

00:16:56,500 --> 00:17:00,459
so it's a different kind of later load

00:16:58,410 --> 00:17:02,410
all we can do here it's very simple you

00:17:00,459 --> 00:17:03,670
can move the tables to a new server and

00:17:02,410 --> 00:17:05,679
similarly their application trick works

00:17:03,670 --> 00:17:07,990
here as well replicators you replicate

00:17:05,679 --> 00:17:09,069
the servers and then cut down the

00:17:07,990 --> 00:17:11,380
replication when it's when it's up to

00:17:09,069 --> 00:17:13,630
date and then point the new table new

00:17:11,380 --> 00:17:15,850
server in Django we have Reuters for

00:17:13,630 --> 00:17:17,290
this it's pretty simple ly promax have

00:17:15,850 --> 00:17:19,900
other methods to you can even do it

00:17:17,290 --> 00:17:21,339
yourself is not difficult but you can

00:17:19,900 --> 00:17:24,760
sort of do that if you don't do that you

00:17:21,339 --> 00:17:26,760
can make the new bat so if you come with

00:17:24,760 --> 00:17:29,190
a changing kind of database

00:17:26,760 --> 00:17:30,960
own okay i got these things they should

00:17:29,190 --> 00:17:33,690
be stored probably in a key value store

00:17:30,960 --> 00:17:35,910
rather than our dms then you miss a

00:17:33,690 --> 00:17:37,590
backfill the new datastore and you have

00:17:35,910 --> 00:17:39,810
sort of a proxy service thing obviously

00:17:37,590 --> 00:17:41,430
hey look for this thing you first go and

00:17:39,810 --> 00:17:43,020
check the new data store and then the

00:17:41,430 --> 00:17:45,660
old one and backfill and then you come

00:17:43,020 --> 00:17:47,640
back again and then you sort of set that

00:17:45,660 --> 00:17:49,560
going set the backfield rolling slowly

00:17:47,640 --> 00:17:51,120
and right always wipe the new database

00:17:49,560 --> 00:17:52,950
and eventually you can you fully

00:17:51,120 --> 00:17:54,480
backfield and cut the old one off and

00:17:52,950 --> 00:17:56,010
you'll moved over so it's kind of all

00:17:54,480 --> 00:17:57,810
these different things like sort of two

00:17:56,010 --> 00:17:59,400
or three step processes that as long as

00:17:57,810 --> 00:18:01,650
you understand them and your top of any

00:17:59,400 --> 00:18:03,930
practice them practice makes perfect you

00:18:01,650 --> 00:18:05,760
can do this pretty easily de

00:18:03,930 --> 00:18:07,920
normalisation is kind of a little bit

00:18:05,760 --> 00:18:10,260
just before consistency here so the

00:18:07,920 --> 00:18:12,660
nomination is not free it's very close

00:18:10,260 --> 00:18:15,120
to free it is not free like graphic it's

00:18:12,660 --> 00:18:16,500
very close to finger not so

00:18:15,120 --> 00:18:19,230
generalization is one of those things

00:18:16,500 --> 00:18:21,480
where you know it's an obvious thing you

00:18:19,230 --> 00:18:22,980
have this wonderfully normalized thing

00:18:21,480 --> 00:18:24,000
like your tutor taught you at university

00:18:22,980 --> 00:18:26,760
or what the book you've been reading

00:18:24,000 --> 00:18:28,950
said but everything is in one place as a

00:18:26,760 --> 00:18:31,920
wonderful perfect record everything it's

00:18:28,950 --> 00:18:33,360
great unfortunately it's not fast after

00:18:31,920 --> 00:18:36,240
you like four or five joints to find all

00:18:33,360 --> 00:18:38,220
these results it's awful and so you want

00:18:36,240 --> 00:18:40,140
to pull things like pull the user name

00:18:38,220 --> 00:18:41,640
into the forum post record so i'm going

00:18:40,140 --> 00:18:43,890
to show you the forum post you rather

00:18:41,640 --> 00:18:45,360
than saying join forum posts with users

00:18:43,890 --> 00:18:46,980
use read the forum post and you all

00:18:45,360 --> 00:18:50,760
later want is that you can render the

00:18:46,980 --> 00:18:54,270
entire sort of give with one query way

00:18:50,760 --> 00:18:56,340
to do this is basically you just add the

00:18:54,270 --> 00:18:59,160
placeholder fields again with no never i

00:18:56,340 --> 00:19:02,040
with defaults a but null and then you

00:18:59,160 --> 00:19:04,080
have the app code looks that stuff look

00:19:02,040 --> 00:19:05,820
for the field if it's empty go and fetch

00:19:04,080 --> 00:19:07,410
it with the join then fill in the field

00:19:05,820 --> 00:19:09,450
then come back and return it might put

00:19:07,410 --> 00:19:10,920
us all on a previous pattern and then

00:19:09,450 --> 00:19:12,690
you can backfill all or background and

00:19:10,920 --> 00:19:14,400
then slowly over time as you say new

00:19:12,690 --> 00:19:15,660
start and if you run the back field will

00:19:14,400 --> 00:19:17,430
get out today and then you can send me

00:19:15,660 --> 00:19:20,190
happy normalization and the best thing

00:19:17,430 --> 00:19:22,560
is you can leave this code in place in

00:19:20,190 --> 00:19:24,210
this case because if you suddenly find

00:19:22,560 --> 00:19:25,530
any consistency or above as been going

00:19:24,210 --> 00:19:27,150
for several months you can wipe the

00:19:25,530 --> 00:19:29,490
dinner was callin clean and you'll

00:19:27,150 --> 00:19:31,020
suffer a like a day or two stoners a day

00:19:29,490 --> 00:19:32,580
or two as slowness as it back deals but

00:19:31,020 --> 00:19:36,269
you'll get there i'll do a lot

00:19:32,580 --> 00:19:39,120
yet finally consistency now this is the

00:19:36,269 --> 00:19:42,059
be-all and end-all of scaling at some

00:19:39,120 --> 00:19:44,159
point you end up going well we need to

00:19:42,059 --> 00:19:46,350
be distributed and distributed means you

00:19:44,159 --> 00:19:48,600
basically runs a hunk of the cep theorem

00:19:46,350 --> 00:19:50,340
and the caap theorem isn't really a

00:19:48,600 --> 00:19:51,779
proper fit but it's probably proven

00:19:50,340 --> 00:19:53,669
theorem it's not technically apply to

00:19:51,779 --> 00:19:55,500
everything but it says that you have

00:19:53,669 --> 00:19:56,909
three things consistency that you can

00:19:55,500 --> 00:19:58,919
read the same data member everywhere at

00:19:56,909 --> 00:20:01,019
once availability that you can always

00:19:58,919 --> 00:20:02,190
read data without blocking and petition

00:20:01,019 --> 00:20:03,690
tolerance that if you split the network

00:20:02,190 --> 00:20:05,669
and rejoin it things will survive and

00:20:03,690 --> 00:20:07,139
the general consensus is that you don't

00:20:05,669 --> 00:20:10,470
have two of these at once so you can be

00:20:07,139 --> 00:20:12,029
ca ap or CP things that claim to be all

00:20:10,470 --> 00:20:13,590
three by the way take with a very large

00:20:12,029 --> 00:20:15,809
pinch of salt they're probably not

00:20:13,590 --> 00:20:17,940
helping they don't realize this yet they

00:20:15,809 --> 00:20:19,710
just think they're fine until generally

00:20:17,940 --> 00:20:21,299
and there's a great series called call

00:20:19,710 --> 00:20:23,970
me maybe currently moment where this guy

00:20:21,299 --> 00:20:26,309
proves using wonderful proof mechanisms

00:20:23,970 --> 00:20:27,809
that all these things that claim claim

00:20:26,309 --> 00:20:29,730
to be wonderful actually massive

00:20:27,809 --> 00:20:32,039
available it's really quite picky to go

00:20:29,730 --> 00:20:33,720
read it but one of these things here is

00:20:32,039 --> 00:20:36,000
that you probably on strong consistency

00:20:33,720 --> 00:20:37,860
most applications can lose a bit of

00:20:36,000 --> 00:20:40,380
consistency much more than I canoes

00:20:37,860 --> 00:20:42,840
availability of attention tolerance and

00:20:40,380 --> 00:20:44,399
so there's no real migration plan here

00:20:42,840 --> 00:20:47,100
this is a much more Pacific thing based

00:20:44,399 --> 00:20:49,110
on you your application how things work

00:20:47,100 --> 00:20:50,669
but you need to work out what in your

00:20:49,110 --> 00:20:53,789
site you can take being inconsistent

00:20:50,669 --> 00:20:55,950
what things don't matter affair say ten

00:20:53,789 --> 00:20:57,809
seconds or a minute Monday and for

00:20:55,950 --> 00:21:00,000
example on lanyard our search index is

00:20:57,809 --> 00:21:01,950
roughly two minutes out of date people

00:21:00,000 --> 00:21:03,480
don't care right they don't update a

00:21:01,950 --> 00:21:04,529
thing go it must be inserted it and jump

00:21:03,480 --> 00:21:06,510
over the surgeon dish for the way that's

00:21:04,529 --> 00:21:08,159
not what happens but if you know you

00:21:06,510 --> 00:21:09,960
edited just event and then you came back

00:21:08,159 --> 00:21:12,659
the same page again and we showed you

00:21:09,960 --> 00:21:13,620
the wrong name in the page like huh so

00:21:12,659 --> 00:21:14,730
like there's different things here like

00:21:13,620 --> 00:21:17,159
you have to work out walking being

00:21:14,730 --> 00:21:19,289
consistent and what can't be and not

00:21:17,159 --> 00:21:20,880
only that you should be talking to your

00:21:19,289 --> 00:21:22,740
product people your designers like this

00:21:20,880 --> 00:21:26,130
is not a engineering problem at some

00:21:22,740 --> 00:21:27,450
point your entire site must be ready to

00:21:26,130 --> 00:21:29,820
deal with the fact that this data could

00:21:27,450 --> 00:21:31,200
be a little old look at google number of

00:21:29,820 --> 00:21:33,240
results people shows you as a massive

00:21:31,200 --> 00:21:34,799
line i'm sure i'm sure some of you seen

00:21:33,240 --> 00:21:36,510
this like it says oh there's about three

00:21:34,799 --> 00:21:37,740
million results if you ever got to the

00:21:36,510 --> 00:21:39,690
end of that list when they wouldn't be

00:21:37,740 --> 00:21:41,159
but it turns out that counting of the

00:21:39,690 --> 00:21:42,960
results takes way longer than showing

00:21:41,159 --> 00:21:43,830
you the first page and so they say oh

00:21:42,960 --> 00:21:45,480
well have an ink

00:21:43,830 --> 00:21:47,789
and count they didn't know you don't

00:21:45,480 --> 00:21:48,630
mind up you're not calling out like you

00:21:47,789 --> 00:21:49,799
said there were three and a half a

00:21:48,630 --> 00:21:51,330
million the only three millionaires is

00:21:49,799 --> 00:21:53,970
wrong I want my money back you're not

00:21:51,330 --> 00:21:55,470
paying me but usable doubt and sort of

00:21:53,970 --> 00:21:57,750
work through and work out what you can

00:21:55,470 --> 00:21:59,940
drop and so example like you know in

00:21:57,750 --> 00:22:01,769
eventbrite we cannot drop consistency on

00:21:59,940 --> 00:22:03,299
ticketing if you bought two hits and

00:22:01,769 --> 00:22:06,360
they suddenly weren't there that would

00:22:03,299 --> 00:22:08,340
be awful we just can't do that but at

00:22:06,360 --> 00:22:11,010
the same time you know like if an

00:22:08,340 --> 00:22:12,960
organizer place an event description and

00:22:11,010 --> 00:22:14,970
you and you don't see it two minutes

00:22:12,960 --> 00:22:16,799
that's probably fine like there's a

00:22:14,970 --> 00:22:18,960
small delay but I think what they want

00:22:16,799 --> 00:22:20,070
forcing you to see it's ready so you

00:22:18,960 --> 00:22:22,169
could pick and choose and see what it

00:22:20,070 --> 00:22:25,380
meant to be doing but the key thing is

00:22:22,169 --> 00:22:26,820
that big data isn't one thing if you've

00:22:25,380 --> 00:22:29,399
got giant rock like if you're storing

00:22:26,820 --> 00:22:31,409
like giant multi terabyte scientific

00:22:29,399 --> 00:22:32,760
research files big data is probably

00:22:31,409 --> 00:22:35,460
hanging ten of them like tryna get them

00:22:32,760 --> 00:22:37,440
all one like even in one theme memory if

00:22:35,460 --> 00:22:39,210
you've got really complex queries trying

00:22:37,440 --> 00:22:40,889
to query like trying to find friend

00:22:39,210 --> 00:22:42,690
relationships to grass or like three

00:22:40,889 --> 00:22:44,990
degrees separation then it's not even

00:22:42,690 --> 00:22:46,919
the number of nodes is like this the the

00:22:44,990 --> 00:22:48,750
exponential increase in trying to find

00:22:46,919 --> 00:22:50,010
those graph traversals if you've got a

00:22:48,750 --> 00:22:51,240
lot of throughput is no matter what you

00:22:50,010 --> 00:22:52,830
have like if you're trying to get like

00:22:51,240 --> 00:22:55,320
20 thousand requests a second through

00:22:52,830 --> 00:22:56,460
anything's new be difficult I even then

00:22:55,320 --> 00:22:58,139
like a lot of things are latency like

00:22:56,460 --> 00:23:00,600
you know I can store anything you like

00:22:58,139 --> 00:23:01,950
in a perfectly distributed system if you

00:23:00,600 --> 00:23:04,049
want to deal with the day of latency to

00:23:01,950 --> 00:23:06,179
do all the queries like we can just like

00:23:04,049 --> 00:23:08,100
no latency souls all problems that you

00:23:06,179 --> 00:23:09,450
probably want it's not returned in a day

00:23:08,100 --> 00:23:12,510
that seems unusable for most web

00:23:09,450 --> 00:23:13,620
browsers pattern of movement fine so

00:23:12,510 --> 00:23:15,690
that you could have sort of work through

00:23:13,620 --> 00:23:17,789
these kind of things and focus on your

00:23:15,690 --> 00:23:19,200
current problems a lot of companies sit

00:23:17,789 --> 00:23:21,000
there and try and work through a goat a

00:23:19,200 --> 00:23:22,950
week we can we think we can be the

00:23:21,000 --> 00:23:25,320
biggest thing since sliced bread and

00:23:22,950 --> 00:23:26,760
Facebook so what we need to do is scale

00:23:25,320 --> 00:23:28,649
so we have this perfect of potential

00:23:26,760 --> 00:23:30,269
work for four billion users and of

00:23:28,649 --> 00:23:31,200
course all they do is they spend all

00:23:30,269 --> 00:23:33,750
their time writing this one of the

00:23:31,200 --> 00:23:34,860
system no time writing features no time

00:23:33,750 --> 00:23:36,840
writing actual thing people who want

00:23:34,860 --> 00:23:37,830
that happening user testing and then

00:23:36,840 --> 00:23:39,480
they die because they've got wonderful

00:23:37,830 --> 00:23:42,389
architecture and no one to use it I've

00:23:39,480 --> 00:23:43,769
been guilty there sometimes and so you

00:23:42,389 --> 00:23:46,470
know this is more of business thing but

00:23:43,769 --> 00:23:47,549
like focus on problems you have now even

00:23:46,470 --> 00:23:50,279
databases of all the ones

00:23:47,549 --> 00:23:52,289
in the future like don't go but what if

00:23:50,279 --> 00:23:53,940
we get all this stuff like so lacking in

00:23:52,289 --> 00:23:55,619
lanyons organization stuff has it has ER

00:23:53,940 --> 00:23:57,450
we know have a problem like if you have

00:23:55,619 --> 00:23:59,549
more than say a thousand people gets

00:23:57,450 --> 00:24:00,809
quite slow but we know none of our

00:23:59,549 --> 00:24:03,239
organizations who only have more than

00:24:00,809 --> 00:24:05,220
thousand people so it's fine and we have

00:24:03,239 --> 00:24:06,690
that debt we know that debt like the

00:24:05,220 --> 00:24:08,429
technol that you know about as fine as

00:24:06,690 --> 00:24:09,720
long as you're ready to pay it back when

00:24:08,429 --> 00:24:12,330
you get it up front is the hidden

00:24:09,720 --> 00:24:13,379
technical debt as a father and as long

00:24:12,330 --> 00:24:16,320
as you have hidden stuff you'll

00:24:13,379 --> 00:24:19,549
generally all right beer it efficiency

00:24:16,320 --> 00:24:22,350
its rating fast matters small you are

00:24:19,549 --> 00:24:25,200
vers les funding you have that as time

00:24:22,350 --> 00:24:26,489
you have the more that that time you get

00:24:25,200 --> 00:24:28,889
back from doing this quick stuff worked

00:24:26,489 --> 00:24:30,570
really well and I think the final thing

00:24:28,889 --> 00:24:31,950
heal up there's a big booger mine is

00:24:30,570 --> 00:24:33,960
good architecture affects your product

00:24:31,950 --> 00:24:36,379
if your product people if your designers

00:24:33,960 --> 00:24:38,220
say no what is a non engineering thing I

00:24:36,379 --> 00:24:40,980
personally would say they are wrong I

00:24:38,220 --> 00:24:43,230
think that part of a good product is

00:24:40,980 --> 00:24:46,350
speed and part of speed is engineering

00:24:43,230 --> 00:24:47,789
architecture if you can say we can make

00:24:46,350 --> 00:24:49,470
this number it's like lesser accurate

00:24:47,789 --> 00:24:50,999
and we can move this thing over here or

00:24:49,470 --> 00:24:52,859
we can show this one second later we've

00:24:50,999 --> 00:24:55,440
make the holes like 10 times faster you

00:24:52,859 --> 00:24:57,330
can put up people say yes often you not

00:24:55,440 --> 00:24:59,249
humanism things and so like try and have

00:24:57,330 --> 00:25:02,070
those conversations were you know like

00:24:59,249 --> 00:25:03,210
that lanyard but down zeiner we say open

00:25:02,070 --> 00:25:05,070
a bit can we do this thing a little bit

00:25:03,210 --> 00:25:06,600
like yeah sure like he doesn't care that

00:25:05,070 --> 00:25:08,159
much like he cares it looks good but

00:25:06,600 --> 00:25:10,830
he's not the design he's giving you

00:25:08,159 --> 00:25:12,659
isn't like his perfect final design it's

00:25:10,830 --> 00:25:14,820
not how it worked like they are willing

00:25:12,659 --> 00:25:18,539
to iterate make changes to you talk to

00:25:14,820 --> 00:25:19,950
them so please just remember that

00:25:18,539 --> 00:25:21,359
architecture is not just about

00:25:19,950 --> 00:25:23,850
engineering it's about product design

00:25:21,359 --> 00:25:26,600
it's about the two of them together yes

00:25:23,850 --> 00:25:26,600
thank you very much

00:25:32,409 --> 00:25:50,210
any questions I just just for the last

00:25:48,679 --> 00:25:53,749
thing you say you you know you have a

00:25:50,210 --> 00:25:56,929
problem with the organization structure

00:25:53,749 --> 00:25:58,399
with the thousand users whatever if you

00:25:56,929 --> 00:25:59,840
don't have any customers that have a

00:25:58,399 --> 00:26:01,580
thousand users how did you find that

00:25:59,840 --> 00:26:03,259
problem or what tools what did you use

00:26:01,580 --> 00:26:05,210
to find that problem before it's

00:26:03,259 --> 00:26:06,619
happened it's none of that is that like

00:26:05,210 --> 00:26:08,090
when you're writing it you you're doing

00:26:06,619 --> 00:26:10,039
in a way where you like in Reno's

00:26:08,090 --> 00:26:11,330
queries like N squared and we know that

00:26:10,039 --> 00:26:12,830
when N squared hits the boundaries

00:26:11,330 --> 00:26:14,809
around a path like we tested it

00:26:12,830 --> 00:26:15,859
obviously when you're writing but

00:26:14,809 --> 00:26:18,440
because you've been into right up front

00:26:15,859 --> 00:26:20,359
because you're white keep like I'm good

00:26:18,440 --> 00:26:21,349
enough at this point hopefully I'm not

00:26:20,359 --> 00:26:22,700
that good but I'm good enough to know

00:26:21,349 --> 00:26:24,229
that I'm running an N squared and cubed

00:26:22,700 --> 00:26:26,720
galleries and go this is not greatly

00:26:24,229 --> 00:26:27,859
like over certain amounts but the brute

00:26:26,720 --> 00:26:29,539
force computers means that you can

00:26:27,859 --> 00:26:31,249
generally get around that initially so

00:26:29,539 --> 00:26:33,710
we just saw previously know it's there

00:26:31,249 --> 00:26:35,539
because we identified the likely food

00:26:33,710 --> 00:26:36,859
out this is about patently but the

00:26:35,539 --> 00:26:39,590
option is on the softer so much worse

00:26:36,859 --> 00:26:48,559
they're like time saves over runtime

00:26:39,590 --> 00:26:54,259
exploit no more questions all right oh

00:26:48,559 --> 00:26:57,619
here we go is there a good paradigm in

00:26:54,259 --> 00:27:03,649
code where you can account for slight

00:26:57,619 --> 00:27:05,299
lag no like so the the master-slave

00:27:03,649 --> 00:27:06,830
application things is just a small

00:27:05,299 --> 00:27:08,149
version of consistency in the air like

00:27:06,830 --> 00:27:10,669
you're doing a much more controlled

00:27:08,149 --> 00:27:11,779
version of an inconsistent system but

00:27:10,669 --> 00:27:15,529
the nice thing that you can pin to the

00:27:11,779 --> 00:27:16,970
master you have to the best like with

00:27:15,529 --> 00:27:19,549
websites you've got this gets of cadet

00:27:16,970 --> 00:27:22,070
of jail free card where you can pin that

00:27:19,549 --> 00:27:23,059
one request to the master and then the

00:27:22,070 --> 00:27:25,190
Sun the next request comes around it's

00:27:23,059 --> 00:27:27,240
probably fine and rent bobby pin for 10

00:27:25,190 --> 00:27:29,910
seconds rather than one page

00:27:27,240 --> 00:27:31,559
other but yeah you have to get to watch

00:27:29,910 --> 00:27:34,110
your slave lag and make sure that it is

00:27:31,559 --> 00:27:36,059
below what you expect like an event

00:27:34,110 --> 00:27:37,679
right our ops team utility what for

00:27:36,059 --> 00:27:38,940
application like um fab things like

00:27:37,679 --> 00:27:40,410
three or four seconds they get very

00:27:38,940 --> 00:27:41,580
panicky because because we're ten

00:27:40,410 --> 00:27:44,040
seconds of sight starts working properly

00:27:41,580 --> 00:27:45,450
so you will to make sure you're you're

00:27:44,040 --> 00:27:47,640
cognizant of that difference in what

00:27:45,450 --> 00:27:50,429
happens if to go the rolling around but

00:27:47,640 --> 00:27:51,960
as long as you're aware of that and you

00:27:50,429 --> 00:27:55,460
have sort of the basic painting stuff

00:27:51,960 --> 00:27:55,460
you can get a long way with vitamin code

00:27:57,260 --> 00:28:01,700
alright a big thank you to Andrew Godwin

00:28:09,830 --> 00:28:11,890

YouTube URL: https://www.youtube.com/watch?v=UrZyNj9q2iA


