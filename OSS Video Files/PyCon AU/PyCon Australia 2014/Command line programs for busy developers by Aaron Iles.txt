Title: Command line programs for busy developers by Aaron Iles
Publication date: 2014-08-07
Playlist: PyCon Australia 2014
Description: 
	Command line interface tools are the new web framework. In addition to the
Python standard library's getopt, optparse and argparse there is a bewildering
array of packages available on the Python Packaging Index. Packages like Click,
Cliff, Docopt, Invoke all provide different mechanics for creating command line
applications. When all you want to do is expose a command line and get back to
creating functionality, itâ€™s hard to know which alternative to reach for.

This presentation will have two parts, the first half will be a brief survey
of popular modules. Strengths, weaknesses and design philosophies will be
compared by creating command line processing for the same example program.

The second half will go into more depth on a specific package, Begins. This
package was authored by the presenter to minimise the disruption developers
experience when breaking flow to implement command line processing. The
audience will be shown how a single line of code can create a complex command
line interface. It will also be shown how a handful of decorators from the
Begins API can eliminate boilerplate code and create powerful, complex
applications.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:05,290 --> 00:00:10,840
we have command-line programs for busy

00:00:07,930 --> 00:00:12,700
developers with Aran Isles Aaron is a

00:00:10,840 --> 00:00:14,830
senior software developer with 10 years

00:00:12,700 --> 00:00:16,990
of experience who on any given day

00:00:14,830 --> 00:00:22,060
develops or maintains software using

00:00:16,990 --> 00:00:25,570
Python C C++ Java Script PHP bash CSS

00:00:22,060 --> 00:00:27,789
XML or XSLT Python however is his

00:00:25,570 --> 00:00:29,499
preferred environment as a senior

00:00:27,789 --> 00:00:31,240
developer with the Australian government

00:00:29,499 --> 00:00:33,070
Aaron is responsible for the delivery of

00:00:31,240 --> 00:00:35,290
Quick Reaction capabilities to support

00:00:33,070 --> 00:00:37,719
new business initiatives and technical

00:00:35,290 --> 00:00:40,079
leadership and mentoring for staff Thank

00:00:37,719 --> 00:00:40,079
You Aaron

00:00:43,199 --> 00:00:48,190
hello well this is going to be a very

00:00:46,270 --> 00:00:49,510
busy presentation and it's not just

00:00:48,190 --> 00:00:52,120
because I have a lot of content and I'm

00:00:49,510 --> 00:00:53,469
quite nervous but also because somewhere

00:00:52,120 --> 00:00:55,359
in this room there'll be at least one

00:00:53,469 --> 00:00:56,920
person on Wednesday who's going to sit

00:00:55,359 --> 00:00:58,660
down and be writing a data analytic

00:00:56,920 --> 00:01:00,550
there'll be someone else in this room

00:00:58,660 --> 00:01:03,399
will be writing a simple little script

00:01:00,550 --> 00:01:04,540
to unmess the database because the

00:01:03,399 --> 00:01:05,950
person sitting next to them wrote a

00:01:04,540 --> 00:01:08,590
simple little script that messed up the

00:01:05,950 --> 00:01:10,930
database these people all have something

00:01:08,590 --> 00:01:12,280
in common they're all very very busy and

00:01:10,930 --> 00:01:14,440
the fortunately they're probably too

00:01:12,280 --> 00:01:16,000
busy to take those very useful scripts

00:01:14,440 --> 00:01:18,250
and convert them into command-line

00:01:16,000 --> 00:01:20,320
programs for them future selves or for

00:01:18,250 --> 00:01:22,600
their colleague sitting next to them so

00:01:20,320 --> 00:01:24,880
my name's Erin and I had just this

00:01:22,600 --> 00:01:26,800
problem I'd write a little useful little

00:01:24,880 --> 00:01:28,540
tools but they would have hard-coded

00:01:26,800 --> 00:01:30,100
values and I would be the only one that

00:01:28,540 --> 00:01:31,810
we had to go in there and reuse them

00:01:30,100 --> 00:01:34,780
assuming that I could figure out what I

00:01:31,810 --> 00:01:36,130
was doing some time later on so today's

00:01:34,780 --> 00:01:38,830
presentation is going to come in two

00:01:36,130 --> 00:01:41,380
parts and the objective is to help you

00:01:38,830 --> 00:01:43,630
solve this problem as well part one I'm

00:01:41,380 --> 00:01:46,210
going to do a quick survey of a bunch of

00:01:43,630 --> 00:01:48,310
available tools that I found that can

00:01:46,210 --> 00:01:50,020
help you solve this problem to easily

00:01:48,310 --> 00:01:51,040
and quickly take your scripts and

00:01:50,020 --> 00:01:53,200
converts them into command line

00:01:51,040 --> 00:01:54,430
applications in the second part I'm

00:01:53,200 --> 00:01:56,470
going to do a bit of a deep dive into

00:01:54,430 --> 00:01:58,030
the tool that I wrote myself and some of

00:01:56,470 --> 00:02:00,910
my friends use to help solve this

00:01:58,030 --> 00:02:03,460
problem as well so let's launch it apart

00:02:00,910 --> 00:02:04,690
one a survey now if you're going to do a

00:02:03,460 --> 00:02:06,820
goal by doing this you should have a bit

00:02:04,690 --> 00:02:08,560
of a methodological process and this is

00:02:06,820 --> 00:02:11,140
the process I use when evaluating the

00:02:08,560 --> 00:02:12,160
tools that I could come across I decide

00:02:11,140 --> 00:02:14,469
it's going to write a small little

00:02:12,160 --> 00:02:16,299
Twitter client application it was going

00:02:14,469 --> 00:02:19,870
to have three sub commands to display

00:02:16,299 --> 00:02:22,300
various lists retweets men

00:02:19,870 --> 00:02:24,580
it would take API tokens either on the

00:02:22,300 --> 00:02:26,140
command line for the Twitter API or I

00:02:24,580 --> 00:02:29,470
can set those API tokens by the

00:02:26,140 --> 00:02:31,090
environment variables and this is the

00:02:29,470 --> 00:02:33,130
career boot criteria that was important

00:02:31,090 --> 00:02:35,380
to me I really was looking for something

00:02:33,130 --> 00:02:37,210
with a small API something that I could

00:02:35,380 --> 00:02:38,680
quickly easier easily remember so I

00:02:37,210 --> 00:02:40,240
wouldn't have to go off and check

00:02:38,680 --> 00:02:42,610
documentation how to use it again I'm

00:02:40,240 --> 00:02:44,260
looking for something that was minimal

00:02:42,610 --> 00:02:45,790
disruption to my workflow if I'm working

00:02:44,260 --> 00:02:46,840
on something and I suddenly decided that

00:02:45,790 --> 00:02:48,490
I really should make this into a

00:02:46,840 --> 00:02:49,630
command-line application I really didn't

00:02:48,490 --> 00:02:51,880
want to have to start work for 30

00:02:49,630 --> 00:02:53,770
minutes while I figure that out didn't

00:02:51,880 --> 00:02:55,690
want much boilerplate code a lot of

00:02:53,770 --> 00:02:57,640
these useful scripts are only 10 20 30

00:02:55,690 --> 00:02:59,290
lines of code it doesn't make a lot of

00:02:57,640 --> 00:03:00,550
sense to me if I've got to move past 60

00:02:59,290 --> 00:03:03,550
lines of command-line for our gaming

00:03:00,550 --> 00:03:05,470
code the last part is I'd really like a

00:03:03,550 --> 00:03:08,830
rich and powerful command line or a rich

00:03:05,470 --> 00:03:10,390
and powerful as I could get now to help

00:03:08,830 --> 00:03:13,240
you go through and review these as well

00:03:10,390 --> 00:03:15,850
all the applications that are written or

00:03:13,240 --> 00:03:17,290
was backed to help look at the command

00:03:15,850 --> 00:03:18,880
line tool kits that are here are sitting

00:03:17,290 --> 00:03:21,100
up on my github account under the

00:03:18,880 --> 00:03:23,290
command line examples code the slides

00:03:21,100 --> 00:03:24,820
for this particular presentation are

00:03:23,290 --> 00:03:28,510
also up on speaker deck if you can't

00:03:24,820 --> 00:03:29,770
remember that URL so let's begin one of

00:03:28,510 --> 00:03:31,840
the thing about Python is has a

00:03:29,770 --> 00:03:33,760
fantastic standard library batteries

00:03:31,840 --> 00:03:35,770
included and we're blessed with not one

00:03:33,760 --> 00:03:37,540
not two but three different ways to

00:03:35,770 --> 00:03:39,150
process the command line depending on

00:03:37,540 --> 00:03:42,250
what version of partnering the

00:03:39,150 --> 00:03:44,590
granddaddy of these is get opt and get

00:03:42,250 --> 00:03:45,820
opt is the oldest of the command line

00:03:44,590 --> 00:03:47,650
parsing tools inside the standard

00:03:45,820 --> 00:03:50,800
library it's a very thin wrapper over

00:03:47,650 --> 00:03:53,410
the C standard library it's a very

00:03:50,800 --> 00:03:55,990
simple API and - based upon function

00:03:53,410 --> 00:03:58,390
course get up has a debt problem though

00:03:55,990 --> 00:03:59,770
it doesn't have a lot of functionality

00:03:58,390 --> 00:04:02,080
in fact there's almost nothing there at

00:03:59,770 --> 00:04:05,050
all this is the example of how to use

00:04:02,080 --> 00:04:06,730
get opt you call the function you pass

00:04:05,050 --> 00:04:08,350
in the arguments you want passed you put

00:04:06,730 --> 00:04:10,150
in a very simple format string there's

00:04:08,350 --> 00:04:12,130
no ability to say they should have

00:04:10,150 --> 00:04:13,840
default base there's no ability to say

00:04:12,130 --> 00:04:15,459
this should be a boolean and this should

00:04:13,840 --> 00:04:16,720
be in it there's no ability to

00:04:15,459 --> 00:04:19,270
automatically generate help output

00:04:16,720 --> 00:04:20,680
there's a very minimal amount of control

00:04:19,270 --> 00:04:23,560
in here you have to build a lot around

00:04:20,680 --> 00:04:28,419
this to get a good command line so later

00:04:23,560 --> 00:04:30,580
on Python and incorporated opt pass op

00:04:28,419 --> 00:04:32,320
pass is a much higher level command line

00:04:30,580 --> 00:04:32,889
parser it supports common option

00:04:32,320 --> 00:04:34,900
behaviors

00:04:32,889 --> 00:04:37,599
this is a boolean flag this should

00:04:34,900 --> 00:04:40,270
convert to a specific type this should

00:04:37,599 --> 00:04:41,860
set a flag it's an object based API

00:04:40,270 --> 00:04:43,479
meaning that you instantiate an object

00:04:41,860 --> 00:04:44,529
and make a bunch of method calls onto it

00:04:43,479 --> 00:04:47,080
to describe what your command line

00:04:44,529 --> 00:04:48,939
should look like again unfortunately op

00:04:47,080 --> 00:04:50,770
pass has some limitations it's a pretty

00:04:48,939 --> 00:04:52,539
verbose API and if anyone's going to

00:04:50,770 --> 00:04:54,550
looked at the standard library docs for

00:04:52,539 --> 00:04:56,740
this they're quite long it's very

00:04:54,550 --> 00:04:58,870
feature full it's a very large API it

00:04:56,740 --> 00:05:00,939
doesn't support any sub commands now my

00:04:58,870 --> 00:05:03,849
sub commands if anyone's used a version

00:05:00,939 --> 00:05:06,069
control system SVN git mercurial or any

00:05:03,849 --> 00:05:08,020
tool where you call the application then

00:05:06,069 --> 00:05:11,860
you pass the sub command like check out

00:05:08,020 --> 00:05:13,840
check in stash pull fetch any of those

00:05:11,860 --> 00:05:15,879
that come and refer to as a subcommittee

00:05:13,840 --> 00:05:17,710
and the last one is that there's no

00:05:15,879 --> 00:05:19,330
really there's no support for positional

00:05:17,710 --> 00:05:21,909
arguments I mean something that's passed

00:05:19,330 --> 00:05:25,659
in without a particular flag it's just a

00:05:21,909 --> 00:05:28,000
B or C list along the command line so

00:05:25,659 --> 00:05:29,650
this is an example of using opt pass to

00:05:28,000 --> 00:05:31,300
pass the command line as you can see

00:05:29,650 --> 00:05:32,979
there's a lot of code down here very

00:05:31,300 --> 00:05:34,389
powerful but a lot of code that needs to

00:05:32,979 --> 00:05:38,080
be write need to remember what all those

00:05:34,389 --> 00:05:41,050
keyword arguments are later on

00:05:38,080 --> 00:05:43,180
aaaggghhh pass was incorporated into the

00:05:41,050 --> 00:05:44,800
standard library again another high

00:05:43,180 --> 00:05:47,080
level command line passer so a lot of

00:05:44,800 --> 00:05:48,849
great features in here support for

00:05:47,080 --> 00:05:50,889
common option behaviors supports

00:05:48,849 --> 00:05:52,360
subcommands this time so we can actually

00:05:50,889 --> 00:05:55,169
incorporate it in sub-command parsing

00:05:52,360 --> 00:05:57,069
and another object based API

00:05:55,169 --> 00:05:59,919
fortunately our paths have some issues

00:05:57,069 --> 00:06:01,509
as well it's only available in 2.7

00:05:59,919 --> 00:06:03,789
although there is a back port on pi pi

00:06:01,509 --> 00:06:05,740
that you can download for python 2.6 but

00:06:03,789 --> 00:06:07,810
it's still a very verbose ap I'm very

00:06:05,740 --> 00:06:10,800
large API was an enormous amount of docs

00:06:07,810 --> 00:06:14,229
on standard library Doc's for this as

00:06:10,800 --> 00:06:16,029
this is and for an example very similar

00:06:14,229 --> 00:06:17,620
to our part a very large amount of code

00:06:16,029 --> 00:06:20,830
needing to be written to get the command

00:06:17,620 --> 00:06:22,240
line party so we also have the Python

00:06:20,830 --> 00:06:23,529
package index for a lot of wonderful

00:06:22,240 --> 00:06:26,169
developers go and make their code

00:06:23,529 --> 00:06:28,659
available for use and package index has

00:06:26,169 --> 00:06:29,770
a write array of command line PI's so

00:06:28,659 --> 00:06:30,819
I've pulled that some of the ones that I

00:06:29,770 --> 00:06:33,789
think of the most common

00:06:30,819 --> 00:06:36,099
we'll start with cliff this is a command

00:06:33,789 --> 00:06:37,839
line interplay interface framework it's

00:06:36,099 --> 00:06:40,509
a framework over the top of our past

00:06:37,839 --> 00:06:42,699
it's really intended to be used with

00:06:40,509 --> 00:06:44,860
setup tools as entry points if anyone's

00:06:42,699 --> 00:06:47,020
created their own package setup tools as

00:06:44,860 --> 00:06:49,330
a package system has a plugin

00:06:47,020 --> 00:06:50,890
mechanism where you can declare this is

00:06:49,330 --> 00:06:52,630
the entry point and this is class of the

00:06:50,890 --> 00:06:55,030
function that plugs in at that specific

00:06:52,630 --> 00:06:58,360
name and it's a class based API unlike

00:06:55,030 --> 00:07:00,220
the previous ones unfortunately well

00:06:58,360 --> 00:07:01,810
fortunately for cliff it has many hooks

00:07:00,220 --> 00:07:03,550
during the application lifecycle it's

00:07:01,810 --> 00:07:05,740
it's available as part of OpenStack and

00:07:03,550 --> 00:07:07,570
have a great array where developers can

00:07:05,740 --> 00:07:09,010
plug in and run their own code at

00:07:07,570 --> 00:07:10,470
different stages of the application

00:07:09,010 --> 00:07:13,750
starting up and shutting down

00:07:10,470 --> 00:07:15,190
unfortunately for my purposes it really

00:07:13,750 --> 00:07:17,290
doesn't provide any abstraction over I

00:07:15,190 --> 00:07:18,370
pass so it requires me to directly use O

00:07:17,290 --> 00:07:19,840
class and comes in with all the

00:07:18,370 --> 00:07:21,490
limitations that I found for our class

00:07:19,840 --> 00:07:24,130
personally I've being very very large

00:07:21,490 --> 00:07:25,990
and verbose essentially requires the use

00:07:24,130 --> 00:07:27,340
of sub commands Rudy isn't designed to

00:07:25,990 --> 00:07:29,070
support anything outside of that and

00:07:27,340 --> 00:07:31,780
really expects the use of entry points

00:07:29,070 --> 00:07:36,100
so much so that here's a very simple

00:07:31,780 --> 00:07:38,080
example of abusing cliff class space so

00:07:36,100 --> 00:07:40,150
it requires to inherit from the

00:07:38,080 --> 00:07:40,419
application from the command and you run

00:07:40,150 --> 00:07:43,210
it

00:07:40,419 --> 00:07:45,010
this sample won't actually run in order

00:07:43,210 --> 00:07:47,470
to get this to run from a single command

00:07:45,010 --> 00:07:48,970
I had to dig into the privates of the

00:07:47,470 --> 00:07:50,290
code base itself and use an undocumented

00:07:48,970 --> 00:07:52,540
feature to make it run for within a

00:07:50,290 --> 00:07:52,900
single script not really what I was

00:07:52,540 --> 00:07:57,550
after

00:07:52,900 --> 00:07:59,200
oh god this is very interesting to a lot

00:07:57,550 --> 00:08:02,050
of very well-respected and very capable

00:07:59,200 --> 00:08:04,030
developers loved opt it's unusual in

00:08:02,050 --> 00:08:06,100
that it doesn't actually require code to

00:08:04,030 --> 00:08:08,710
wire up your command line you describe

00:08:06,100 --> 00:08:10,210
it in text you essentially write the

00:08:08,710 --> 00:08:11,350
help documentation and Doc Ock will

00:08:10,210 --> 00:08:13,900
figure out what your command line is

00:08:11,350 --> 00:08:16,240
supposed to be like from there so it's

00:08:13,900 --> 00:08:17,800
very easy to make quite complex command

00:08:16,240 --> 00:08:19,600
line logic in fact there's command line

00:08:17,800 --> 00:08:20,950
logic you can get other doc op that you

00:08:19,600 --> 00:08:22,900
can't get out of any of the other

00:08:20,950 --> 00:08:25,360
command line interface toolkits we'll

00:08:22,900 --> 00:08:27,370
look at today unfortunately when I went

00:08:25,360 --> 00:08:29,020
through things that I found didn't work

00:08:27,370 --> 00:08:29,440
to meet my needs multiple points of

00:08:29,020 --> 00:08:32,469
control

00:08:29,440 --> 00:08:34,839
so you passed the command line it

00:08:32,469 --> 00:08:36,370
produces arguments out that needs to

00:08:34,839 --> 00:08:38,289
pair up with how you've defined your

00:08:36,370 --> 00:08:39,610
functions if you want to change the

00:08:38,289 --> 00:08:40,120
arguments you need to change it in two

00:08:39,610 --> 00:08:43,240
places

00:08:40,120 --> 00:08:44,530
something that personally oked me not to

00:08:43,240 --> 00:08:45,780
so the doc op tutorial which is

00:08:44,530 --> 00:08:48,910
something that I didn't particularly

00:08:45,780 --> 00:08:50,500
feel worked for me I need to understand

00:08:48,910 --> 00:08:52,120
a new syntax which meant that I would

00:08:50,500 --> 00:08:53,770
constantly forget it would need to go

00:08:52,120 --> 00:08:55,660
back to the documentation to look it up

00:08:53,770 --> 00:08:58,000
and actually has fewer option behaviors

00:08:55,660 --> 00:08:59,920
the nature of it is that why you get

00:08:58,000 --> 00:09:00,220
convert complex logic you can't do think

00:08:59,920 --> 00:09:03,190
some

00:09:00,220 --> 00:09:04,810
things as easily this is a bit look like

00:09:03,190 --> 00:09:06,910
a bit of like how it works with dark ops

00:09:04,810 --> 00:09:08,770
at the top is what looks very much like

00:09:06,910 --> 00:09:11,010
help usage and at the bottom is the

00:09:08,770 --> 00:09:13,690
passing government you get the ads out

00:09:11,010 --> 00:09:16,240
the last pie pie package will look at is

00:09:13,690 --> 00:09:17,950
click which is a very recent entry comes

00:09:16,240 --> 00:09:19,840
from the same developer behind the flask

00:09:17,950 --> 00:09:21,460
web framework it's a very capable

00:09:19,840 --> 00:09:23,110
developer very nice to look at this one

00:09:21,460 --> 00:09:25,240
it's another high level abstraction

00:09:23,110 --> 00:09:29,530
wrapping over up past this time as a

00:09:25,240 --> 00:09:32,320
decorator based API it's very simple and

00:09:29,530 --> 00:09:34,960
powerful API has excellent Unicode

00:09:32,320 --> 00:09:37,660
support it's very unlikely to explode on

00:09:34,960 --> 00:09:38,890
you if you're using unicode strings the

00:09:37,660 --> 00:09:40,120
developer arm and it's put a great deal

00:09:38,890 --> 00:09:43,240
of effort in and understands this

00:09:40,120 --> 00:09:44,560
problem very very well has multiple

00:09:43,240 --> 00:09:46,660
points of control but you'll see in the

00:09:44,560 --> 00:09:48,790
next slide that that model point brings

00:09:46,660 --> 00:09:50,350
them a lot closer together so this is

00:09:48,790 --> 00:09:52,690
what it looks like to use click and what

00:09:50,350 --> 00:09:54,280
I mean by direct decorator based API at

00:09:52,690 --> 00:09:56,200
the top we're declaring that we've got a

00:09:54,280 --> 00:09:58,510
command here below that we're declaring

00:09:56,200 --> 00:10:00,340
the options and lastly we find the

00:09:58,510 --> 00:10:03,400
function definition you'll see that

00:10:00,340 --> 00:10:05,560
count and name are defined not once but

00:10:03,400 --> 00:10:09,220
twice once at the decorator level and

00:10:05,560 --> 00:10:11,140
again at your function so this leads on

00:10:09,220 --> 00:10:14,140
to the second part begins so it begins

00:10:11,140 --> 00:10:16,350
is my project it actually falls in the

00:10:14,140 --> 00:10:19,210
middle there it's about a year old now

00:10:16,350 --> 00:10:21,430
begins for me was an effort to deal with

00:10:19,210 --> 00:10:22,780
the fact that I really didn't like being

00:10:21,430 --> 00:10:25,830
disrupting workflows I wanted to write

00:10:22,780 --> 00:10:28,150
this command lines much much quicker so

00:10:25,830 --> 00:10:29,800
it's a high level abstraction this time

00:10:28,150 --> 00:10:31,660
for odd paths so it doesn't do it I'm

00:10:29,800 --> 00:10:33,430
command-line pausing what it does do it

00:10:31,660 --> 00:10:34,840
makes it makes it more convenient to

00:10:33,430 --> 00:10:36,010
effectively build up that option

00:10:34,840 --> 00:10:37,720
positive without you having to worry

00:10:36,010 --> 00:10:41,350
about it and again it's a decorator

00:10:37,720 --> 00:10:43,900
based API it's a small API or it's small

00:10:41,350 --> 00:10:46,000
as I can find it uses reflection the

00:10:43,900 --> 00:10:47,380
function signature so you don't need to

00:10:46,000 --> 00:10:48,640
declare your arguments it will figure

00:10:47,380 --> 00:10:50,410
them out for you by looking at the

00:10:48,640 --> 00:10:52,810
function you're decorating it uses the

00:10:50,410 --> 00:10:55,840
inspect module from Python 3 which I've

00:10:52,810 --> 00:10:56,830
back ported to Python 2.7 and 2.6 that's

00:10:55,840 --> 00:10:59,740
available in pi PI

00:10:56,830 --> 00:11:02,170
it replaces the use of double underscore

00:10:59,740 --> 00:11:04,300
now I will come back to that in a second

00:11:02,170 --> 00:11:06,670
the biggest limitation for begins for me

00:11:04,300 --> 00:11:08,470
is that it's still in beta so I use it

00:11:06,670 --> 00:11:10,540
in production so my friends use it in

00:11:08,470 --> 00:11:13,270
production but there are still areas of

00:11:10,540 --> 00:11:13,660
the interface that we wish to improve it

00:11:13,270 --> 00:11:15,400
needs

00:11:13,660 --> 00:11:17,770
enhancements the documentation still

00:11:15,400 --> 00:11:18,700
needs a little bit of what it's still in

00:11:17,770 --> 00:11:23,640
better and there still might be breaking

00:11:18,700 --> 00:11:26,170
changes this is a minimal begins program

00:11:23,640 --> 00:11:28,780
we decorate a function it doesn't do

00:11:26,170 --> 00:11:34,390
anything and this is the command line

00:11:28,780 --> 00:11:37,210
help output that's nothing what you

00:11:34,390 --> 00:11:38,950
don't need to do is this begins will

00:11:37,210 --> 00:11:40,900
take care of this for you it will

00:11:38,950 --> 00:11:42,100
inspect the stack when run and will

00:11:40,900 --> 00:11:43,600
determine whether you're running from

00:11:42,100 --> 00:11:45,520
the main module or from an entry point

00:11:43,600 --> 00:11:48,520
and will execute your function for you

00:11:45,520 --> 00:11:50,560
now we don't call double underscore Len

00:11:48,520 --> 00:11:52,210
and we don't call double underscore get

00:11:50,560 --> 00:11:54,250
and we don't you any of the other magic

00:11:52,210 --> 00:11:55,990
methods when we're using protocols I

00:11:54,250 --> 00:11:57,490
find this a bit of a weird walk that we

00:11:55,990 --> 00:11:58,900
still need to do this and the rare

00:11:57,490 --> 00:12:00,790
occasion I need to introduce someone

00:11:58,900 --> 00:12:02,400
will teach someone new to Python how to

00:12:00,790 --> 00:12:04,690
create scripts and how to do this well

00:12:02,400 --> 00:12:06,190
this always becomes a sort of talking

00:12:04,690 --> 00:12:07,960
point for them is the first time they

00:12:06,190 --> 00:12:10,480
have exposed to internal magics so

00:12:07,960 --> 00:12:13,210
begins provides a protocol for making

00:12:10,480 --> 00:12:15,330
this disappear so what are some of the

00:12:13,210 --> 00:12:19,600
other things that we can do with begins

00:12:15,330 --> 00:12:22,060
start with default values so this time

00:12:19,600 --> 00:12:23,980
our run function takes name quest in

00:12:22,060 --> 00:12:25,750
color three command-line arguments and

00:12:23,980 --> 00:12:28,810
they tell me they felt values and

00:12:25,750 --> 00:12:32,260
contact accepts a series of positional

00:12:28,810 --> 00:12:34,360
eyes called nights and now here's the

00:12:32,260 --> 00:12:37,240
command-line output you can now pass in

00:12:34,360 --> 00:12:39,370
a name a quest and a color as options

00:12:37,240 --> 00:12:43,120
and you can pass any number of nights

00:12:39,370 --> 00:12:45,460
things on the command line name quest in

00:12:43,120 --> 00:12:46,870
color all come with their flat base so

00:12:45,460 --> 00:12:47,980
you can override them if you want but

00:12:46,870 --> 00:12:51,760
you don't have to provide them if you

00:12:47,980 --> 00:12:53,710
don't need to if you're running on

00:12:51,760 --> 00:12:55,690
Python three Python 3 introduced the

00:12:53,710 --> 00:12:58,960
idea of annotations into function

00:12:55,690 --> 00:13:00,640
signatures I objects that describe in

00:12:58,960 --> 00:13:02,650
some way the function that you're

00:13:00,640 --> 00:13:04,390
operating on so in this instance which

00:13:02,650 --> 00:13:06,220
is a Python 3 only is two instance

00:13:04,390 --> 00:13:08,440
there's string based annotations on the

00:13:06,220 --> 00:13:11,620
name quests and color I'll give it a

00:13:08,440 --> 00:13:14,890
arguments of the function these will be

00:13:11,620 --> 00:13:17,710
used to enhance the help output so here

00:13:14,890 --> 00:13:18,850
named Christian color have more detailed

00:13:17,710 --> 00:13:22,750
descriptions based upon those

00:13:18,850 --> 00:13:23,780
annotations boolean flags are special

00:13:22,750 --> 00:13:25,580
cast

00:13:23,780 --> 00:13:27,830
so when begins is expecting your

00:13:25,580 --> 00:13:30,230
function signature and it discovers that

00:13:27,830 --> 00:13:33,620
enable and disable have default values

00:13:30,230 --> 00:13:35,510
at ebullience the command line output

00:13:33,620 --> 00:13:39,020
rather than accepting a true or false

00:13:35,510 --> 00:13:45,740
string will give you - - enable and - -

00:13:39,020 --> 00:13:49,070
no - enable and likewise sub commands so

00:13:45,740 --> 00:13:50,150
sub commands is as you mentioned still

00:13:49,070 --> 00:13:53,560
earlier with something that click like

00:13:50,150 --> 00:13:55,490
to do sub commands are described or

00:13:53,560 --> 00:13:56,990
documented through the use of the sub

00:13:55,490 --> 00:13:58,700
command decorator these will

00:13:56,990 --> 00:14:00,860
automatically be gathered across the

00:13:58,700 --> 00:14:02,930
application as the func as your modules

00:14:00,860 --> 00:14:04,460
are imported and will automatically be

00:14:02,930 --> 00:14:06,830
populated into command lines so here

00:14:04,460 --> 00:14:09,050
we've declared two sub commands ones for

00:14:06,830 --> 00:14:13,670
name and wonderful quest they take an

00:14:09,050 --> 00:14:15,020
answer each we're just the output

00:14:13,670 --> 00:14:16,670
there'll be two available sub commands

00:14:15,020 --> 00:14:18,170
listed in the output name and quests

00:14:16,670 --> 00:14:20,150
that we gathered because I decorated by

00:14:18,170 --> 00:14:22,100
sub command and now each will have their

00:14:20,150 --> 00:14:24,410
own help output and will each take their

00:14:22,100 --> 00:14:26,690
own separate set of our arguments the

00:14:24,410 --> 00:14:28,339
idea here is that you can very quickly

00:14:26,690 --> 00:14:31,010
and rapidly build up a very powerful

00:14:28,339 --> 00:14:32,720
very complex toolkit by by using a

00:14:31,010 --> 00:14:36,230
series of function D compositions and

00:14:32,720 --> 00:14:39,230
decorators its move on to some more

00:14:36,230 --> 00:14:41,390
advanced begins so we just saw sub

00:14:39,230 --> 00:14:42,410
commands sometimes it's convenient to

00:14:41,390 --> 00:14:44,540
allow people to extend their

00:14:42,410 --> 00:14:46,430
applications from external locations we

00:14:44,540 --> 00:14:48,800
mentioned entry tours earlier that cliff

00:14:46,430 --> 00:14:50,990
uses all begins can go look for these

00:14:48,800 --> 00:14:51,800
entry points as well and load in sub

00:14:50,990 --> 00:14:54,350
commands from them

00:14:51,800 --> 00:14:56,330
so here I've asked entry points of us

00:14:54,350 --> 00:14:58,520
begin sorry - add sub commands from the

00:14:56,330 --> 00:14:59,839
begins plug-in demo entry point and that

00:14:58,520 --> 00:15:01,430
will go look for that entry point to see

00:14:59,839 --> 00:15:03,620
what packages have been installed into

00:15:01,430 --> 00:15:08,000
your Python environment and load any sub

00:15:03,620 --> 00:15:09,440
commands that are listed sometimes when

00:15:08,000 --> 00:15:11,180
you've built a very very powerful tool

00:15:09,440 --> 00:15:12,950
kit you might want to pause pass

00:15:11,180 --> 00:15:14,900
multiple sub commands in as a sequence

00:15:12,950 --> 00:15:17,210
and so you can optionally declare that

00:15:14,900 --> 00:15:19,990
there's a delimiter between sub commands

00:15:17,210 --> 00:15:22,280
in this case very common - tactic a

00:15:19,990 --> 00:15:23,960
scenario where this is used a bit more

00:15:22,280 --> 00:15:26,330
frequently these days is in term in

00:15:23,960 --> 00:15:28,490
position of an analysis researching so

00:15:26,330 --> 00:15:31,670
we start up we run sub command a which

00:15:28,490 --> 00:15:33,589
does some form of operation and then

00:15:31,670 --> 00:15:36,140
runs sub command B which does some other

00:15:33,589 --> 00:15:38,150
form of operation possibly passing state

00:15:36,140 --> 00:15:39,860
between the two of them you bring to you

00:15:38,150 --> 00:15:42,350
build together a sequence of these as

00:15:39,860 --> 00:15:43,700
you which you described a new command

00:15:42,350 --> 00:15:47,210
line a series of actions need to be

00:15:43,700 --> 00:15:48,860
performed environment variables if you

00:15:47,210 --> 00:15:50,420
work in the UNIX environment it's fairly

00:15:48,860 --> 00:15:52,280
common that you might want to pass in

00:15:50,420 --> 00:15:53,990
rather than on the command line you want

00:15:52,280 --> 00:15:56,540
to pass in options through the UNIX

00:15:53,990 --> 00:15:59,210
environment so we can declare a prefix

00:15:56,540 --> 00:16:00,410
in our decorator that says I want to be

00:15:59,210 --> 00:16:03,560
able to set all the options using this

00:16:00,410 --> 00:16:05,210
prefix so in this scenario here I could

00:16:03,560 --> 00:16:08,110
pass in name in quest

00:16:05,210 --> 00:16:09,980
we have tactic name that tactic quest or

00:16:08,110 --> 00:16:12,680
alternatively I could use the

00:16:09,980 --> 00:16:15,530
environment and pass MPI underscore name

00:16:12,680 --> 00:16:17,390
all in cases out and alpha goes and that

00:16:15,530 --> 00:16:19,970
would go through and set the invited the

00:16:17,390 --> 00:16:21,020
option from from the environment you can

00:16:19,970 --> 00:16:23,030
still use the command line it will

00:16:21,020 --> 00:16:24,320
overwrite but in this case if you're

00:16:23,030 --> 00:16:27,440
working with a platform of the service

00:16:24,320 --> 00:16:29,090
or another environment you can

00:16:27,440 --> 00:16:30,340
optionally serve to come in from your

00:16:29,090 --> 00:16:32,330
env instead

00:16:30,340 --> 00:16:34,820
similarly there a configuration file

00:16:32,330 --> 00:16:35,960
support so we can declare I want to you

00:16:34,820 --> 00:16:37,640
I want to go and look for that

00:16:35,960 --> 00:16:39,500
configuration file it looks in a number

00:16:37,640 --> 00:16:41,270
of default locations and will attempt to

00:16:39,500 --> 00:16:43,160
load options out of the configuration

00:16:41,270 --> 00:16:45,440
file instead if you would prefer not to

00:16:43,160 --> 00:16:49,250
use environment variables or command

00:16:45,440 --> 00:16:50,720
monarchs now a big one typecasting not

00:16:49,250 --> 00:16:55,460
every argument you're going to receive

00:16:50,720 --> 00:16:57,980
is a string if you don't tell begins

00:16:55,460 --> 00:16:59,510
what types both to be it will simply

00:16:57,980 --> 00:17:01,820
pass in the string from the command line

00:16:59,510 --> 00:17:04,550
so we need to have a way mechanisms of

00:17:01,820 --> 00:17:05,510
saying this is an integer okay this you

00:17:04,550 --> 00:17:06,860
should pass this through an intern you

00:17:05,510 --> 00:17:07,790
want to I want you to make this an

00:17:06,860 --> 00:17:09,530
interview before we give it to me

00:17:07,790 --> 00:17:10,910
otherwise my code will blow up or my

00:17:09,530 --> 00:17:13,940
code has to handle it in a special case

00:17:10,910 --> 00:17:16,490
so there's a common one for starting the

00:17:13,940 --> 00:17:19,370
development version of a web application

00:17:16,490 --> 00:17:23,180
and I've used begin convert to

00:17:19,370 --> 00:17:25,400
explicitly say I want the port argument

00:17:23,180 --> 00:17:27,290
to be converted using theme and I want

00:17:25,400 --> 00:17:29,690
the debug argument to be converted using

00:17:27,290 --> 00:17:31,580
a utility function called cabal begins

00:17:29,690 --> 00:17:33,860
comes with a small collection of utility

00:17:31,580 --> 00:17:37,760
classes to do conversions such as to

00:17:33,860 --> 00:17:39,620
lift to file to bull there's the other

00:17:37,760 --> 00:17:41,240
one there's a couple more as well that's

00:17:39,620 --> 00:17:43,340
kind of annoying because then you have

00:17:41,240 --> 00:17:46,160
to start explicitly declaring what the

00:17:43,340 --> 00:17:47,650
casts are going to be quite often though

00:17:46,160 --> 00:17:51,500
we're just working with basic types

00:17:47,650 --> 00:17:54,470
strings integers floating points so

00:17:51,500 --> 00:17:56,000
that comes with an automatic so plea it

00:17:54,470 --> 00:17:57,260
uses the underscore because I don't want

00:17:56,000 --> 00:17:58,820
if they want to limit the chance that

00:17:57,260 --> 00:18:00,680
I'm going to conflict with someone's

00:17:58,820 --> 00:18:02,240
actual argument now and here convert

00:18:00,680 --> 00:18:03,950
will attempt to automatically figure out

00:18:02,240 --> 00:18:05,900
what the conversions would be for the

00:18:03,950 --> 00:18:07,310
basic types you can always you can

00:18:05,900 --> 00:18:09,110
always combine these so you can use

00:18:07,310 --> 00:18:10,940
automatic and then explicitly declare a

00:18:09,110 --> 00:18:13,700
few more just as overrides if that if

00:18:10,940 --> 00:18:16,940
the case may be all right we'll keep

00:18:13,700 --> 00:18:18,050
forging forward yet more one of the

00:18:16,940 --> 00:18:20,900
things I found I was commonly doing the

00:18:18,050 --> 00:18:23,360
command line is constantly doing a semi

00:18:20,900 --> 00:18:25,010
boilerplate logging logging is something

00:18:23,360 --> 00:18:27,140
else frequently having to set up and it

00:18:25,010 --> 00:18:29,240
almost always be the same I need to set

00:18:27,140 --> 00:18:33,140
a log level I need to set a log output

00:18:29,240 --> 00:18:36,400
file it's much nicer if I could just

00:18:33,140 --> 00:18:38,570
drop a decorator on top begin logging

00:18:36,400 --> 00:18:40,580
this has got an extension decorator

00:18:38,570 --> 00:18:42,950
there's a couple already implemented one

00:18:40,580 --> 00:18:44,930
for logging in one for the CGI TV or

00:18:42,950 --> 00:18:46,580
trace backs module and this is the

00:18:44,930 --> 00:18:48,290
command line output so what it's done is

00:18:46,580 --> 00:18:50,450
it's taken the parser and automatically

00:18:48,290 --> 00:18:52,760
added on their command line flags for

00:18:50,450 --> 00:18:54,080
control of the log of the standard

00:18:52,760 --> 00:18:57,410
library logging module

00:18:54,080 --> 00:18:58,790
it'll also when you execute it intercept

00:18:57,410 --> 00:19:00,680
the call on the way through before it

00:18:58,790 --> 00:19:02,960
gets to your function and pre configure

00:19:00,680 --> 00:19:04,640
the logging module for you the idea here

00:19:02,960 --> 00:19:05,630
is rather than me putting in print

00:19:04,640 --> 00:19:07,400
statements everywhere and then

00:19:05,630 --> 00:19:08,690
commenting them out and then having to

00:19:07,400 --> 00:19:11,450
remember to go back in and turn them on

00:19:08,690 --> 00:19:14,120
later on I can use logging debug level

00:19:11,450 --> 00:19:16,190
during development and then simply let

00:19:14,120 --> 00:19:19,160
it run at a standard info level later on

00:19:16,190 --> 00:19:20,420
if my Pro application or command line

00:19:19,160 --> 00:19:22,430
application starts crashing or

00:19:20,420 --> 00:19:23,750
exhibiting weird behavior all I need to

00:19:22,430 --> 00:19:25,280
do is change the logging functions later

00:19:23,750 --> 00:19:28,220
on to suddenly get all that debugging

00:19:25,280 --> 00:19:30,740
output back so that's probably enough

00:19:28,220 --> 00:19:32,510
you've probably had a overwhelm with

00:19:30,740 --> 00:19:35,360
functionality and features inside of

00:19:32,510 --> 00:19:37,010
begins so going to stop for some closing

00:19:35,360 --> 00:19:40,760
thoughts now on command line

00:19:37,010 --> 00:19:42,410
applications you've probably already

00:19:40,760 --> 00:19:44,420
figured out that's command line

00:19:42,410 --> 00:19:46,490
frameworks essentially the new web

00:19:44,420 --> 00:19:48,110
framework yeah everyone's got their own

00:19:46,490 --> 00:19:51,080
and they're arriving at a rate of one a

00:19:48,110 --> 00:19:52,400
month of the moment possibly not but I'd

00:19:51,080 --> 00:19:56,780
like to encourage us a bit of pragmatism

00:19:52,400 --> 00:19:58,820
over ideology your application is not

00:19:56,780 --> 00:20:01,010
it's command line toolkit and I'm not

00:19:58,820 --> 00:20:02,780
advocating anyone changes a toolkit that

00:20:01,010 --> 00:20:04,000
they're using right now if they found

00:20:02,780 --> 00:20:06,070
something successful

00:20:04,000 --> 00:20:08,050
what I'd like to advocate is for people

00:20:06,070 --> 00:20:09,790
to go and find a toolkit that works for

00:20:08,050 --> 00:20:12,040
them find something that they find

00:20:09,790 --> 00:20:13,450
convenient find something that doesn't

00:20:12,040 --> 00:20:14,920
disrupt their flow find something that

00:20:13,450 --> 00:20:17,080
they feel comfortable and happy to use

00:20:14,920 --> 00:20:19,330
because it's much more important that we

00:20:17,080 --> 00:20:20,800
take those scripts and little tools that

00:20:19,330 --> 00:20:22,210
we write and convert them into those

00:20:20,800 --> 00:20:23,860
command line applications for our

00:20:22,210 --> 00:20:25,210
colleagues to use and for ourselves to

00:20:23,860 --> 00:20:27,930
use further down the track was a much

00:20:25,210 --> 00:20:31,450
lot more likely to use it that way

00:20:27,930 --> 00:20:32,950
so in closing good luck I hope everyone

00:20:31,450 --> 00:20:34,060
does go forward and finds and starts

00:20:32,950 --> 00:20:35,650
creating more of these command line

00:20:34,060 --> 00:20:37,150
applications I know it's been a definite

00:20:35,650 --> 00:20:38,860
improvement in our workflow and a

00:20:37,150 --> 00:20:41,260
definitely improvement from some of my

00:20:38,860 --> 00:20:43,090
colleagues and I'd like to thank you for

00:20:41,260 --> 00:20:45,930
coming it's late on a Sunday and I do

00:20:43,090 --> 00:20:45,930
appreciate your attendance

00:20:51,330 --> 00:20:54,820
we do have time for questions if any

00:20:53,530 --> 00:20:58,290
would like to come down to the

00:20:54,820 --> 00:20:58,290
microphones on the other side

00:21:05,710 --> 00:21:10,330
thanks for that one defect that I found

00:21:09,070 --> 00:21:12,730
with some of the other command-line

00:21:10,330 --> 00:21:14,830
puzzle modules is that they don't handle

00:21:12,730 --> 00:21:16,740
negative number values very well they

00:21:14,830 --> 00:21:19,330
hit the minus sign and treated as a

00:21:16,740 --> 00:21:20,440
trigger for an option does begins

00:21:19,330 --> 00:21:23,020
aggressor

00:21:20,440 --> 00:21:25,030
I believe begins will blow up because

00:21:23,020 --> 00:21:27,370
our past doesn't handle that terribly

00:21:25,030 --> 00:21:31,360
well you may find that click will

00:21:27,370 --> 00:21:34,000
support that better I believe I saw

00:21:31,360 --> 00:21:36,550
Arman complaining about that I haven't

00:21:34,000 --> 00:21:38,440
tested as a test case and if I do

00:21:36,550 --> 00:21:40,870
remember or you would like to poke an

00:21:38,440 --> 00:21:42,460
issue at me on begins as github project

00:21:40,870 --> 00:21:43,510
I will investigate support for that

00:21:42,460 --> 00:21:44,770
because it definitely is a bit of an

00:21:43,510 --> 00:21:48,370
issue and it's but it's not something

00:21:44,770 --> 00:21:55,200
has come up for me yet any other

00:21:48,370 --> 00:21:55,200
questions don't be shy

00:22:08,630 --> 00:22:13,180
if you want to actually tell the other

00:22:14,500 --> 00:22:19,730
how about that never go looks like a

00:22:17,360 --> 00:22:22,550
fantastic library um one question though

00:22:19,730 --> 00:22:24,560
is there any scope for automatically

00:22:22,550 --> 00:22:26,990
creating entry points for setup tools

00:22:24,560 --> 00:22:28,940
from you know the decorators that you've

00:22:26,990 --> 00:22:32,990
got is there anything like that there so

00:22:28,940 --> 00:22:34,730
far it's never been raised I'm not sure

00:22:32,990 --> 00:22:36,350
how I would hook back into normally with

00:22:34,730 --> 00:22:39,140
an entry point you'd need to declare

00:22:36,350 --> 00:22:40,670
that on the setup function and I'm not

00:22:39,140 --> 00:22:42,890
sure whether I how you would go about

00:22:40,670 --> 00:22:44,480
pushing that back out if it's something

00:22:42,890 --> 00:22:46,850
that's of interest to you it sounds

00:22:44,480 --> 00:22:48,170
pretty cool is there a specific use case

00:22:46,850 --> 00:22:52,280
for that that you can think of just

00:22:48,170 --> 00:22:54,680
because I'm lazy that's as good as any

00:22:52,280 --> 00:22:56,660
you know normally what I have is might

00:22:54,680 --> 00:22:58,640
be a whole collection of scripts and

00:22:56,660 --> 00:23:01,070
stuff like that and being able to not

00:22:58,640 --> 00:23:02,990
have to specify those again in setup

00:23:01,070 --> 00:23:06,110
tools and specify the exact method and

00:23:02,990 --> 00:23:07,610
stuff like that reduces the you know my

00:23:06,110 --> 00:23:10,100
typos and stuff although there might

00:23:07,610 --> 00:23:11,570
happen different sounds like an

00:23:10,100 --> 00:23:12,710
interesting idea I'd love to chat to you

00:23:11,570 --> 00:23:13,970
it morning - if we could have bit

00:23:12,710 --> 00:23:18,740
further about that but that sounds very

00:23:13,970 --> 00:23:21,020
interesting thank you hey really

00:23:18,740 --> 00:23:23,510
interesting it looks good I just want to

00:23:21,020 --> 00:23:25,190
check is it fully compatible with all of

00:23:23,510 --> 00:23:30,620
the major operating systems unix and

00:23:25,190 --> 00:23:34,910
windows possibly it definitely works

00:23:30,620 --> 00:23:35,960
pretty well on unix mostly Linux and OS

00:23:34,910 --> 00:23:36,740
X which is where I do all that

00:23:35,960 --> 00:23:39,080
development work

00:23:36,740 --> 00:23:41,720
I don't own a Windows machine these days

00:23:39,080 --> 00:23:44,000
so it probably works for a large part it

00:23:41,720 --> 00:23:45,620
mostly relies on opacity so if you have

00:23:44,000 --> 00:23:47,540
issues with aaaggghhh pass on any

00:23:45,620 --> 00:23:50,090
particular platform that's going to

00:23:47,540 --> 00:23:52,880
affect begins as well but if you've bit

00:23:50,090 --> 00:23:56,180
if you've ever know that arc pass works

00:23:52,880 --> 00:23:58,130
on Windows or another platform VMs or

00:23:56,180 --> 00:23:59,810
you HP apps or wherever else you're

00:23:58,130 --> 00:24:03,520
running then the beginning should work

00:23:59,810 --> 00:24:03,520
fine okay thanks

00:24:04,890 --> 00:24:10,980
so I'm not wearing my hat Frank

00:24:07,890 --> 00:24:12,179
Sainsbury sort of fell asleep halfway

00:24:10,980 --> 00:24:14,490
through that so I probably missed

00:24:12,179 --> 00:24:15,750
something I'm always a bit concerned

00:24:14,490 --> 00:24:18,809
when we're splitting off and having

00:24:15,750 --> 00:24:20,850
another tool and the other thing that's

00:24:18,809 --> 00:24:23,250
striking me that particularly the kind

00:24:20,850 --> 00:24:24,870
of man line tool years ago we had

00:24:23,250 --> 00:24:26,340
something called choose which someone

00:24:24,870 --> 00:24:28,890
down in Tasmania right which was allowed

00:24:26,340 --> 00:24:31,230
you to put in a directory and then just

00:24:28,890 --> 00:24:37,740
pick things from it would that be

00:24:31,230 --> 00:24:39,330
something that you could use so you have

00:24:37,740 --> 00:24:41,429
the directory full of scripts and you

00:24:39,330 --> 00:24:44,130
have a choosing device and just click on

00:24:41,429 --> 00:24:45,450
one and it used to let you fill in the

00:24:44,130 --> 00:24:48,990
options on the fly and that's something

00:24:45,450 --> 00:24:52,160
yes I have a one of my colleagues has

00:24:48,990 --> 00:24:54,419
written a a nasty piece of code that

00:24:52,160 --> 00:24:56,760
will do something very similar to that

00:24:54,419 --> 00:24:59,340
we'll find a directory I go and add it

00:24:56,760 --> 00:25:01,350
to the system path ensure that they all

00:24:59,340 --> 00:25:03,120
get imported and so any sub commands

00:25:01,350 --> 00:25:05,370
that are defined dynamically in this

00:25:03,120 --> 00:25:07,730
location will get added to your command

00:25:05,370 --> 00:25:10,110
they use it in their environment to

00:25:07,730 --> 00:25:13,919
enable developers they use begins to

00:25:10,110 --> 00:25:15,210
build a large tool kit for build and so

00:25:13,919 --> 00:25:17,750
they'll enable their developers to

00:25:15,210 --> 00:25:19,830
extend that tool kit to add new commands

00:25:17,750 --> 00:25:21,510
that's probably the closest thing I've

00:25:19,830 --> 00:25:22,799
been looking at bringing that in and

00:25:21,510 --> 00:25:26,010
that sounds the closest thing to choose

00:25:22,799 --> 00:25:27,299
by the sounds of it so there are people

00:25:26,010 --> 00:25:28,549
that are starting to have that that

00:25:27,299 --> 00:25:31,700
difficulty where they've got a

00:25:28,549 --> 00:25:33,809
corporately supported or

00:25:31,700 --> 00:25:35,610
organizationally level supported work

00:25:33,809 --> 00:25:37,770
but it still enabled individual

00:25:35,610 --> 00:25:39,480
developers to extend it not necessarily

00:25:37,770 --> 00:25:43,700
through setup tools which is count that

00:25:39,480 --> 00:25:43,700
the only mechanism that begin supports I

00:25:44,299 --> 00:25:57,870
just have one question can it also rip

00:25:49,520 --> 00:26:01,260
configuration file so first of all you

00:25:57,870 --> 00:26:03,559
specify minus F and then a configuration

00:26:01,260 --> 00:26:06,840
file and then it can you pass that

00:26:03,559 --> 00:26:08,400
configuration file right now no the

00:26:06,840 --> 00:26:10,860
configuration files are limited to

00:26:08,400 --> 00:26:12,900
declaring the name and begins we go

00:26:10,860 --> 00:26:15,470
hunting in the current location and I

00:26:12,900 --> 00:26:17,600
chop up the others platform dependent

00:26:15,470 --> 00:26:19,370
but right now there's no

00:26:17,600 --> 00:26:21,559
mechanism for explicitly saying this is

00:26:19,370 --> 00:26:23,210
the conflict father what you do is good

00:26:21,559 --> 00:26:29,020
point though probably so something it

00:26:23,210 --> 00:26:31,549
should do did I mention beta thank you

00:26:29,020 --> 00:26:34,880
okay one more question does to work with

00:26:31,549 --> 00:26:37,610
CX freeze by two XE those tools if he's

00:26:34,880 --> 00:26:38,840
never tried I don't know if someone

00:26:37,610 --> 00:26:40,630
would like to try that for me because

00:26:38,840 --> 00:26:42,590
it's not something I do on my workflows

00:26:40,630 --> 00:26:45,460
it's something like to try that and get

00:26:42,590 --> 00:26:45,460
back to me that'd be fantastic

00:27:04,250 --> 00:27:06,310

YouTube URL: https://www.youtube.com/watch?v=D5l4JNt2ozI


