Title: Grug make fire! Grug make wheel! by Russell Keith-Magee
Publication date: 2014-08-11
Playlist: PyCon Australia 2014
Description: 
	In prehistoric times, Python developers were faced with a confusing landscape of tools and conflicting advice when they wanted to package their Python modules for public release. As a result of all the distutils/distribute/setuptools changes over the last 5 years, there's lots of confusion about what you should do when preparing a package for distribution - and even some confusion about what the purpose of packaging is in the first place.

After a mammoth effort from a number of volunteers in the community, over several years, this situation is changing. It's taken a while, but the Python community has invented the wheel!

In this talk, we'll look at the process that has led to the development of the wheel format. But more importantly, we'll look at the steps you need to take when packaging a module of Python code for others to use, and get it on the Python Package Index (PyPI).

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:05,340 --> 00:00:09,330
Oh Keith McGee his um spent eight years

00:00:07,590 --> 00:00:10,889
as pod the Django core team and his

00:00:09,330 --> 00:00:12,780
present of the Django Software

00:00:10,889 --> 00:00:14,760
Foundation and the talk today is Grug

00:00:12,780 --> 00:00:17,330
make fire Grogg make wheel please

00:00:14,760 --> 00:00:17,330
welcome him

00:00:21,660 --> 00:00:26,590
all right well thank you very much for

00:00:24,760 --> 00:00:28,960
those who don't know me my name is

00:00:26,590 --> 00:00:30,250
Russell Keith McGee my day job is as the

00:00:28,960 --> 00:00:32,439
chief technical officer and co-founder

00:00:30,250 --> 00:00:33,820
of treitz cloud we're an Australian

00:00:32,439 --> 00:00:35,110
software as a service provider for

00:00:33,820 --> 00:00:38,470
trades people plumbers electricians

00:00:35,110 --> 00:00:40,480
people like that my claim to fame such

00:00:38,470 --> 00:00:42,160
that it is is largely as a result of my

00:00:40,480 --> 00:00:43,540
involvement with the Django project I've

00:00:42,160 --> 00:00:45,400
been a core developer in Django since

00:00:43,540 --> 00:00:48,699
2006 I've been president for the Django

00:00:45,400 --> 00:00:49,930
Software Foundation since 2010 the DSF

00:00:48,699 --> 00:00:51,760
for those who don't know is the IPE

00:00:49,930 --> 00:00:54,280
legal and fundraising arm of the Django

00:00:51,760 --> 00:00:56,200
project and because I've been involved

00:00:54,280 --> 00:00:58,480
in a big project I've been involved in

00:00:56,200 --> 00:00:59,950
packaging not as someone who developed

00:00:58,480 --> 00:01:02,050
the standard or develop the tools but as

00:00:59,950 --> 00:01:04,570
someone who's had to use them and buy as

00:01:02,050 --> 00:01:06,670
someone who by proxy was responsible for

00:01:04,570 --> 00:01:08,410
teaching newcomers to Python how

00:01:06,670 --> 00:01:09,520
packaging was supposed to work because

00:01:08,410 --> 00:01:12,520
they were coming to jail or coming to

00:01:09,520 --> 00:01:13,930
python by way of Django now over the

00:01:12,520 --> 00:01:15,910
last nine years there's been a lot of

00:01:13,930 --> 00:01:17,800
change in Python packaging lots of

00:01:15,910 --> 00:01:20,380
confusion over what constituted best

00:01:17,800 --> 00:01:21,940
practice and the mess was sufficiently

00:01:20,380 --> 00:01:23,530
bad that for many years the Django

00:01:21,940 --> 00:01:26,170
project in an attempt to make life

00:01:23,530 --> 00:01:27,820
easier for newcomers actively avoided

00:01:26,170 --> 00:01:29,350
using Python packaging in many respects

00:01:27,820 --> 00:01:31,090
and inadvertently ended up encouraging

00:01:29,350 --> 00:01:33,100
some really less than best practice

00:01:31,090 --> 00:01:35,830
amongst newcomers to Python by way of

00:01:33,100 --> 00:01:37,540
Django the good news is that the dust

00:01:35,830 --> 00:01:38,619
has now mostly settled and it's possible

00:01:37,540 --> 00:01:42,400
for us to make good recommendations

00:01:38,619 --> 00:01:43,479
again it's also I've also been exposed

00:01:42,400 --> 00:01:45,850
to packaging through my other side

00:01:43,479 --> 00:01:47,770
project beware beware is project

00:01:45,850 --> 00:01:49,630
exploring the tools that we use as

00:01:47,770 --> 00:01:51,820
developers to write software in Python

00:01:49,630 --> 00:01:53,590
beware is comprised of lots of smaller

00:01:51,820 --> 00:01:55,930
tools and libraries including toga which

00:01:53,590 --> 00:01:58,560
I announce last night so along the way

00:01:55,930 --> 00:01:58,560
I've had to build

00:02:03,970 --> 00:02:07,420
here we go all right so along the way

00:02:06,100 --> 00:02:11,410
I've had to build a whole bunch of

00:02:07,420 --> 00:02:13,090
packages okay so when I say Python

00:02:11,410 --> 00:02:14,890
packaging has been a bit of a mess over

00:02:13,090 --> 00:02:19,540
the last nine years what exactly do I

00:02:14,890 --> 00:02:21,430
mean this is what I mean until quite

00:02:19,540 --> 00:02:22,780
recently one of the best resources for

00:02:21,430 --> 00:02:25,420
information on Python packaging

00:02:22,780 --> 00:02:27,100
contained this diagram it had to have

00:02:25,420 --> 00:02:28,360
this diagram and this diagram was a

00:02:27,100 --> 00:02:29,950
significant improvement on the previous

00:02:28,360 --> 00:02:31,540
state of affairs where there was no

00:02:29,950 --> 00:02:34,600
diagram and no it had any idea what was

00:02:31,540 --> 00:02:36,459
going on but this is how complicated the

00:02:34,600 --> 00:02:38,470
situation was getting this lists all of

00:02:36,459 --> 00:02:39,850
the packages replacements superseded

00:02:38,470 --> 00:02:41,640
insan' decedent's and so on they were

00:02:39,850 --> 00:02:45,040
part of the Python packaging ecosystem

00:02:41,640 --> 00:02:46,390
so if you've been on the interwebs and

00:02:45,040 --> 00:02:48,010
you've heard people talking about dis

00:02:46,390 --> 00:02:49,540
new tools and setup tools and distribute

00:02:48,010 --> 00:02:50,740
and dis new tools to an easy install and

00:02:49,540 --> 00:02:52,510
packaging and pipe and eggs and wheels

00:02:50,740 --> 00:02:56,350
and wonder what the hell was going on

00:02:52,510 --> 00:02:58,450
you are not alone the good news is all

00:02:56,350 --> 00:03:00,400
that's behind us the good documentation

00:02:58,450 --> 00:03:02,290
no longer has that diagram because it

00:03:00,400 --> 00:03:04,030
doesn't need to really anymore the dust

00:03:02,290 --> 00:03:05,500
is settled and for the first time in a

00:03:04,030 --> 00:03:07,870
very long time the Python community is

00:03:05,500 --> 00:03:11,200
in a position to give a good clear set

00:03:07,870 --> 00:03:14,459
of instructions if you get nothing else

00:03:11,200 --> 00:03:17,019
out of this talk this is the money slide

00:03:14,459 --> 00:03:19,060
you set up tools to define your setup

00:03:17,019 --> 00:03:20,830
top pi build wheels for distributions if

00:03:19,060 --> 00:03:22,239
you can but also provide source

00:03:20,830 --> 00:03:24,220
distributions as well because not

00:03:22,239 --> 00:03:25,690
everyone can use a wheel and if you've

00:03:24,220 --> 00:03:27,370
got any other questions go to packaging

00:03:25,690 --> 00:03:30,040
dot python.org because it's quite a good

00:03:27,370 --> 00:03:31,930
documentation resource then on the other

00:03:30,040 --> 00:03:33,850
end unless local conditions require

00:03:31,930 --> 00:03:37,000
otherwise create a virtual environment

00:03:33,850 --> 00:03:39,100
or if you using Python 3.4 a PI VM and

00:03:37,000 --> 00:03:40,510
install yourself we're using pip I say

00:03:39,100 --> 00:03:42,519
unless local conditions are quite

00:03:40,510 --> 00:03:44,320
otherwise depending upon exactly what

00:03:42,519 --> 00:03:45,820
your ops person is using you may want to

00:03:44,320 --> 00:03:48,040
use a different different set of tools

00:03:45,820 --> 00:03:49,780
there but broadly speaking that works

00:03:48,040 --> 00:03:51,030
and that's gonna be a good way to get

00:03:49,780 --> 00:03:54,910
that good experience out of the Python

00:03:51,030 --> 00:03:56,680
ecosystem so the two point important

00:03:54,910 --> 00:03:59,530
pieces we're going to look at today give

00:03:56,680 --> 00:04:02,080
me our setup tools and wheels setup

00:03:59,530 --> 00:04:07,600
tools is one of the pieces that was on

00:04:02,080 --> 00:04:09,430
that original diagram excuse me it isn't

00:04:07,600 --> 00:04:11,410
a package it's a package that isn't in

00:04:09,430 --> 00:04:13,330
the Python standard library but it

00:04:11,410 --> 00:04:15,730
extends functionality that is contained

00:04:13,330 --> 00:04:17,769
in the standard library it provides the

00:04:15,730 --> 00:04:19,720
tools for writing the definition for

00:04:17,769 --> 00:04:21,789
package is most importantly what it

00:04:19,720 --> 00:04:23,379
contains and other useful pieces of

00:04:21,789 --> 00:04:24,970
metadata like version numbers and

00:04:23,379 --> 00:04:26,979
contact addresses and classification

00:04:24,970 --> 00:04:29,229
keywords and things like that it's also

00:04:26,979 --> 00:04:32,050
instead of an interesting double double

00:04:29,229 --> 00:04:34,300
role it's also the tool you run to

00:04:32,050 --> 00:04:35,740
convert a package full of or a directory

00:04:34,300 --> 00:04:38,919
full of source code into an installable

00:04:35,740 --> 00:04:40,389
and distributable unit the other

00:04:38,919 --> 00:04:42,490
important piece of the puzzle is a wheel

00:04:40,389 --> 00:04:44,729
what's a wheel well a wheel is a

00:04:42,490 --> 00:04:47,860
distributable unit of Python code

00:04:44,729 --> 00:04:49,569
consider something like pill they pack

00:04:47,860 --> 00:04:52,000
up Python and imaging library now a

00:04:49,569 --> 00:04:54,159
pillow or a database binding it's not

00:04:52,000 --> 00:04:55,300
just Python code there is a binary

00:04:54,159 --> 00:04:57,340
component as well there are other

00:04:55,300 --> 00:05:00,880
resources that need to go along if you

00:04:57,340 --> 00:05:03,669
don't have a way to compile that binary

00:05:00,880 --> 00:05:06,150
artifact in a platform specific manner

00:05:03,669 --> 00:05:08,889
you haven't really solved the problem of

00:05:06,150 --> 00:05:11,199
distributing Python code and its

00:05:08,889 --> 00:05:12,940
entirety you still require every user at

00:05:11,199 --> 00:05:14,949
the end of the day to have a full

00:05:12,940 --> 00:05:17,080
compiler chain on the system where

00:05:14,949 --> 00:05:18,669
they're installing that code and any ops

00:05:17,080 --> 00:05:20,139
person will tell you that's a really bad

00:05:18,669 --> 00:05:21,550
idea because you don't want to have

00:05:20,139 --> 00:05:22,930
things at a bit of the ability to

00:05:21,550 --> 00:05:24,190
compile new code where you're

00:05:22,930 --> 00:05:25,719
distributing code where the public's

00:05:24,190 --> 00:05:27,969
going to see it because that gives

00:05:25,719 --> 00:05:30,909
attackers an immensely powerful toolkit

00:05:27,969 --> 00:05:32,349
to start attacking your system with to a

00:05:30,909 --> 00:05:33,550
lesser extent this is even true if

00:05:32,349 --> 00:05:36,069
you're not if you haven't got those

00:05:33,550 --> 00:05:38,349
binary components if you are if you are

00:05:36,069 --> 00:05:39,849
if there is code that needs to be run at

00:05:38,349 --> 00:05:42,130
the point at which a point pure Python

00:05:39,849 --> 00:05:43,779
package is installed that's less than

00:05:42,130 --> 00:05:46,389
ideal as well because again code might

00:05:43,779 --> 00:05:49,240
execute wrong it's more reliable and

00:05:46,389 --> 00:05:53,800
also much faster to ship ready to use

00:05:49,240 --> 00:05:56,620
code here use this I know it works under

00:05:53,800 --> 00:05:58,810
the hood a wheel is just a zip file with

00:05:56,620 --> 00:06:00,279
a very well-known internal structure and

00:05:58,810 --> 00:06:02,469
a couple of pieces of metadata to

00:06:00,279 --> 00:06:04,419
describe exactly what it contains the

00:06:02,469 --> 00:06:06,219
metadata is a description of what it is

00:06:04,419 --> 00:06:09,250
what parts it contains where they have

00:06:06,219 --> 00:06:10,389
to go and why by inference what how to

00:06:09,250 --> 00:06:12,759
get them out again once you need to

00:06:10,389 --> 00:06:14,680
remove them there versioned

00:06:12,759 --> 00:06:16,090
by the operating system they support or

00:06:14,680 --> 00:06:19,630
all operating systems if they are

00:06:16,090 --> 00:06:21,130
genuinely a universal product so you can

00:06:19,630 --> 00:06:24,039
produce a Windows wheel and your

00:06:21,130 --> 00:06:25,630
computer OSX wheel UNIX support is a

00:06:24,039 --> 00:06:27,759
little bit of a thorny one it isn't

00:06:25,630 --> 00:06:29,409
quite there yet for all of the ABI

00:06:27,759 --> 00:06:30,470
compatibility reasons that binary

00:06:29,409 --> 00:06:33,110
support on the onion

00:06:30,470 --> 00:06:35,870
she's always a problem I believe the pie

00:06:33,110 --> 00:06:36,890
PA team is working on it I don't know

00:06:35,870 --> 00:06:40,610
when that's likely to have you there

00:06:36,890 --> 00:06:44,030
it's a complex problem and there is

00:06:40,610 --> 00:06:45,290
thinking for those of you who have been

00:06:44,030 --> 00:06:52,550
around Python packaging for a little

00:06:45,290 --> 00:07:01,820
while what I just escaped Willy yes this

00:06:52,550 --> 00:07:03,110
I like a good pun for those for those

00:07:01,820 --> 00:07:04,790
who have been around the Python

00:07:03,110 --> 00:07:06,440
community for a while what I just

00:07:04,790 --> 00:07:08,600
described there is it packaged as if

00:07:06,440 --> 00:07:12,170
file that contains metadata and code may

00:07:08,600 --> 00:07:13,220
sound quite familiar if if because you

00:07:12,170 --> 00:07:15,020
haven't I just really described what an

00:07:13,220 --> 00:07:16,880
egg was for those who are newer to

00:07:15,020 --> 00:07:18,380
Python eggs were another one of those

00:07:16,880 --> 00:07:19,670
magic keywords that was mentioned in

00:07:18,380 --> 00:07:21,380
that original diagram

00:07:19,670 --> 00:07:23,030
they were the distribution format that

00:07:21,380 --> 00:07:25,130
was introduced when setup tools was

00:07:23,030 --> 00:07:27,050
originally introduced the catch is that

00:07:25,130 --> 00:07:28,730
wills are very similar to eggs in many

00:07:27,050 --> 00:07:31,190
respects they both zip files and

00:07:28,730 --> 00:07:32,990
metadata but wheels differ from eggs in

00:07:31,190 --> 00:07:34,669
one very important respect eggs were

00:07:32,990 --> 00:07:36,950
intended to be an execution format as

00:07:34,669 --> 00:07:38,540
well you ran your code inside the egg

00:07:36,950 --> 00:07:40,430
you distributed the egg and you and it

00:07:38,540 --> 00:07:42,080
ran in there you don't execute code

00:07:40,430 --> 00:07:44,240
inside a wheel a wheel is just a

00:07:42,080 --> 00:07:46,820
distribution format that has a bunch of

00:07:44,240 --> 00:07:48,950
important changes in terms of the way

00:07:46,820 --> 00:07:50,000
the code runs code running inside eggs

00:07:48,950 --> 00:07:51,710
can sometimes be a little bit

00:07:50,000 --> 00:07:53,390
unpredictable because being inside an

00:07:51,710 --> 00:07:57,440
egg changed the way you had to interact

00:07:53,390 --> 00:08:00,979
with the code sometimes so how do you

00:07:57,440 --> 00:08:02,660
make a wheel well meat Grug growth has

00:08:00,979 --> 00:08:04,729
just written some Python codes he's very

00:08:02,660 --> 00:08:06,320
very proud of it it can ward off enemies

00:08:04,729 --> 00:08:09,620
it can cook meat

00:08:06,320 --> 00:08:10,340
she calls it fire she wants to share it

00:08:09,620 --> 00:08:13,130
with the world

00:08:10,340 --> 00:08:14,300
so here's what groves come up with at

00:08:13,130 --> 00:08:15,890
the moment she's got that courage

00:08:14,300 --> 00:08:18,890
sitting somewhere in a Python path and

00:08:15,890 --> 00:08:20,479
so she can import fire but no one else

00:08:18,890 --> 00:08:22,760
can because it's just her code there's

00:08:20,479 --> 00:08:24,470
also an image file it's an important

00:08:22,760 --> 00:08:25,610
part of how fire works that needs to be

00:08:24,470 --> 00:08:28,460
distributed along with the package as

00:08:25,610 --> 00:08:30,710
well now in this example drugs code is a

00:08:28,460 --> 00:08:32,390
module with an init dot PI file in it so

00:08:30,710 --> 00:08:34,729
she's importing importing fire and

00:08:32,390 --> 00:08:35,810
getting that packet that module but it's

00:08:34,729 --> 00:08:37,190
not this isn't this is just for the

00:08:35,810 --> 00:08:38,810
purpose of it an example it could just

00:08:37,190 --> 00:08:41,380
be a single Python file if you want it

00:08:38,810 --> 00:08:43,960
you can package either for distribution

00:08:41,380 --> 00:08:45,430
first step take that code put it into a

00:08:43,960 --> 00:08:49,360
directory that we can use for as a

00:08:45,430 --> 00:08:50,470
packaging Basecamp essentially we take

00:08:49,360 --> 00:08:52,960
that directory the top-level directory

00:08:50,470 --> 00:08:55,690
itself is not important you can name it

00:08:52,960 --> 00:08:57,580
whatever you want a good convention is

00:08:55,690 --> 00:08:59,590
to use whatever you want people to pip

00:08:57,580 --> 00:09:00,670
install later on and probably also

00:08:59,590 --> 00:09:02,320
matches the name that you've got

00:09:00,670 --> 00:09:04,030
registered in your version control

00:09:02,320 --> 00:09:06,880
repository so your github project name

00:09:04,030 --> 00:09:08,980
for example in order to distribute this

00:09:06,880 --> 00:09:09,850
code for other people to use it there

00:09:08,980 --> 00:09:11,980
are some other things that have to be

00:09:09,850 --> 00:09:13,810
added at that top level you have to add

00:09:11,980 --> 00:09:17,080
a license file as the previous speaker

00:09:13,810 --> 00:09:19,900
pointed out this is not optional if you

00:09:17,080 --> 00:09:22,300
don't put a license file in there no one

00:09:19,900 --> 00:09:23,950
else is allowed to use your code

00:09:22,300 --> 00:09:26,560
the default license is all rights

00:09:23,950 --> 00:09:28,660
reserved so you must put a license file

00:09:26,560 --> 00:09:30,700
in there

00:09:28,660 --> 00:09:32,620
Grug in this case has also added

00:09:30,700 --> 00:09:34,660
documentation and tests these aren't

00:09:32,620 --> 00:09:35,890
legal requirements but people are going

00:09:34,660 --> 00:09:37,930
to come and beat you if you don't put

00:09:35,890 --> 00:09:40,270
them in Doc's documentation is how you

00:09:37,930 --> 00:09:42,030
tell people how to use your code tests

00:09:40,270 --> 00:09:44,560
are how you prove that your code works

00:09:42,030 --> 00:09:45,940
without without those you're not really

00:09:44,560 --> 00:09:47,170
sharing anything useful you're just

00:09:45,940 --> 00:09:51,730
saying here's a bunch of headaches I'd

00:09:47,170 --> 00:09:53,350
like you to have the only file in that

00:09:51,730 --> 00:09:56,590
that we've added here that is really

00:09:53,350 --> 00:09:58,780
optional is the readme and that is

00:09:56,590 --> 00:10:00,610
really sort of semi optional you can get

00:09:58,780 --> 00:10:01,720
away without having it but if you're

00:10:00,610 --> 00:10:03,760
going to put your code on github and

00:10:01,720 --> 00:10:05,710
bitbucket or anything anything like that

00:10:03,760 --> 00:10:07,180
it's worth having because those projects

00:10:05,710 --> 00:10:08,980
use your readme file as part of the

00:10:07,180 --> 00:10:10,450
profile for how they display they know

00:10:08,980 --> 00:10:11,320
the landing page for your project so

00:10:10,450 --> 00:10:14,350
it's probably worth sticking one in

00:10:11,320 --> 00:10:16,750
there some other tools that you might

00:10:14,350 --> 00:10:18,640
find useful tox is a meta testing tool

00:10:16,750 --> 00:10:20,230
if you are in the modern Python

00:10:18,640 --> 00:10:21,700
ecosystem you're running your tests for

00:10:20,230 --> 00:10:22,720
Python two point six to two point seven

00:10:21,700 --> 00:10:24,640
and three point three and three point

00:10:22,720 --> 00:10:26,590
four and if you've got some external

00:10:24,640 --> 00:10:29,080
dependencies like a binary binary

00:10:26,590 --> 00:10:30,760
library for interacting with database

00:10:29,080 --> 00:10:33,880
for example you might have your bindings

00:10:30,760 --> 00:10:37,000
against like a PG 2.4 2.5 you've got a

00:10:33,880 --> 00:10:38,680
great panoply of dependencies that you

00:10:37,000 --> 00:10:40,510
need to all check combination to check

00:10:38,680 --> 00:10:43,390
all the possible combinations tox is a

00:10:40,510 --> 00:10:45,130
way to emit a test to say here is my is

00:10:43,390 --> 00:10:46,870
my sweet this is the test suite how it

00:10:45,130 --> 00:10:48,910
runs I want you to run in that test

00:10:46,870 --> 00:10:50,560
suite in these combinations run Python 2

00:10:48,910 --> 00:10:51,610
and the s-plane 3 in this button to

00:10:50,560 --> 00:10:53,830
point forward

00:10:51,610 --> 00:10:55,269
and you just run the test suite once it

00:10:53,830 --> 00:10:57,130
goes off and uses a bunch of virtual

00:10:55,269 --> 00:10:58,360
environment tricks and whatnot to

00:10:57,130 --> 00:11:00,339
construct a whole bunch of virtual

00:10:58,360 --> 00:11:02,290
environments each of which is a testable

00:11:00,339 --> 00:11:03,880
configuration and then report back at

00:11:02,290 --> 00:11:05,529
the end of day all your test Suites pass

00:11:03,880 --> 00:11:07,720
in all of the configurations you want to

00:11:05,529 --> 00:11:09,339
release it in makes release testing a

00:11:07,720 --> 00:11:11,709
very easy proposition instead of an

00:11:09,339 --> 00:11:13,060
absolute nightmare Fink's is the de

00:11:11,709 --> 00:11:15,399
facto tool for writing Python

00:11:13,060 --> 00:11:17,140
documentation you specify your Docs in a

00:11:15,399 --> 00:11:18,459
restructured text format and sphynx

00:11:17,140 --> 00:11:21,220
provides the tools that publish them as

00:11:18,459 --> 00:11:21,640
HTML and it Publius and as epubs and so

00:11:21,220 --> 00:11:23,980
on and so on

00:11:21,640 --> 00:11:26,050
lots of syntax that's really useful for

00:11:23,980 --> 00:11:27,850
defining api's and glossaries and cross

00:11:26,050 --> 00:11:29,079
references in complex documentation and

00:11:27,850 --> 00:11:31,060
all the things that good Doc's should

00:11:29,079 --> 00:11:32,680
have particularly good technical

00:11:31,060 --> 00:11:33,760
documentation should have so it's well

00:11:32,680 --> 00:11:35,230
worth the time to go and spend some time

00:11:33,760 --> 00:11:37,089
and work out how it works

00:11:35,230 --> 00:11:39,100
read the docs isn't something you need

00:11:37,089 --> 00:11:40,540
to configure in your code but if you've

00:11:39,100 --> 00:11:42,070
gone to the trouble of using Sphinx to

00:11:40,540 --> 00:11:43,720
build up your documentation read the

00:11:42,070 --> 00:11:45,640
docs will very nicely host it for you in

00:11:43,720 --> 00:11:47,649
a very very pretty online format and do

00:11:45,640 --> 00:11:49,380
it for free as well so well worth

00:11:47,649 --> 00:11:51,850
jumping on and playing around with that

00:11:49,380 --> 00:11:53,350
so at this point you've got all the bits

00:11:51,850 --> 00:11:54,700
that you need to distribute and they're

00:11:53,350 --> 00:11:57,160
all documented and tested what we need

00:11:54,700 --> 00:11:58,420
now to do need to do now is tell Python

00:11:57,160 --> 00:12:01,959
how to package this up in a way that

00:11:58,420 --> 00:12:03,880
allows other people to use it so to

00:12:01,959 --> 00:12:05,860
package we need to add a few more files

00:12:03,880 --> 00:12:08,110
we need to add a set up py file I set up

00:12:05,860 --> 00:12:11,050
dot CFG file and a manifest a tie-in

00:12:08,110 --> 00:12:12,850
file once we define those we can

00:12:11,050 --> 00:12:14,800
actually perform the packaging how do we

00:12:12,850 --> 00:12:16,209
step forward here how do we actually do

00:12:14,800 --> 00:12:18,610
the packaging well the set up not py

00:12:16,209 --> 00:12:21,220
file that we we create is what we're

00:12:18,610 --> 00:12:22,450
going to run to create the package ok it

00:12:21,220 --> 00:12:23,980
serves a double purpose it's both the

00:12:22,450 --> 00:12:25,750
definition for what we're going to

00:12:23,980 --> 00:12:29,050
package and the tool that we use to do

00:12:25,750 --> 00:12:30,910
the packaging when you invoke setup dot

00:12:29,050 --> 00:12:32,529
pi you pass in a command or multiple

00:12:30,910 --> 00:12:34,029
commands to execute it like in this case

00:12:32,529 --> 00:12:35,680
be this tuile we're saying we want to

00:12:34,029 --> 00:12:37,240
binary build a binary distribution of a

00:12:35,680 --> 00:12:39,670
weal s test we want to build a source

00:12:37,240 --> 00:12:42,000
distribution these requests the

00:12:39,670 --> 00:12:45,430
packaging system to do particular things

00:12:42,000 --> 00:12:47,649
ok so what do we put into our set up top

00:12:45,430 --> 00:12:49,510
py file well I've set up that py file

00:12:47,649 --> 00:12:51,339
has the extension suggest is actual

00:12:49,510 --> 00:12:53,440
Python code so it starts with imports

00:12:51,339 --> 00:12:56,079
most notably importing the setup method

00:12:53,440 --> 00:12:58,149
out of setup tools which is providing

00:12:56,079 --> 00:13:00,220
the resources to define what's in our

00:12:58,149 --> 00:13:02,230
package the keyword arguments

00:13:00,220 --> 00:13:04,600
essentially the money the money bit of

00:13:02,230 --> 00:13:05,670
your setup WI file is a function call to

00:13:04,600 --> 00:13:07,960
setup

00:13:05,670 --> 00:13:09,460
that then the keyword arguments to that

00:13:07,960 --> 00:13:12,700
function called to find what it is

00:13:09,460 --> 00:13:14,590
that's going to be packaged now I could

00:13:12,700 --> 00:13:16,810
easily give a whole talk just about set

00:13:14,590 --> 00:13:18,940
up top P Y so I haven't got any anywhere

00:13:16,810 --> 00:13:20,080
near enough time to go into all the

00:13:18,940 --> 00:13:21,520
configuration options that could

00:13:20,080 --> 00:13:24,760
potentially go into a set up to a py

00:13:21,520 --> 00:13:26,560
file the good news is that as this this

00:13:24,760 --> 00:13:29,320
part of the process is pretty well

00:13:26,560 --> 00:13:31,300
documented and the old documentation is

00:13:29,320 --> 00:13:33,100
still relatively accurate so even if you

00:13:31,300 --> 00:13:34,960
do find a two or three year old tutorial

00:13:33,100 --> 00:13:37,450
you're not going to go too far wrong

00:13:34,960 --> 00:13:40,420
using that documentation on a modern

00:13:37,450 --> 00:13:41,770
modern Python packaging as a starting

00:13:40,420 --> 00:13:43,420
point there is really good documentation

00:13:41,770 --> 00:13:45,160
as part of packaging got Python at all

00:13:43,420 --> 00:13:47,200
which walks through a full example of a

00:13:45,160 --> 00:13:48,610
test project of how we can walk us

00:13:47,200 --> 00:13:52,120
through so in the interest of time I

00:13:48,610 --> 00:13:53,350
will defer to that resource okay so what

00:13:52,120 --> 00:13:56,140
about the other two config files you can

00:13:53,350 --> 00:13:58,000
even set up dot CFG file setup but CFG

00:13:56,140 --> 00:14:01,660
is the configuration file for house

00:13:58,000 --> 00:14:04,180
setup I will run it's a classic you know

00:14:01,660 --> 00:14:07,390
windows configuration CFG file file

00:14:04,180 --> 00:14:08,470
format config file the headings are the

00:14:07,390 --> 00:14:10,750
commands that you're going to be

00:14:08,470 --> 00:14:12,640
executing and underneath are then the

00:14:10,750 --> 00:14:13,750
values for the key value pairs

00:14:12,640 --> 00:14:15,490
describing the options going to get

00:14:13,750 --> 00:14:17,230
passed in so they're the heading is

00:14:15,490 --> 00:14:19,210
something like s test or B disturb' de

00:14:17,230 --> 00:14:22,510
suite and then the options that you want

00:14:19,210 --> 00:14:24,970
to pass in so for example if you find

00:14:22,510 --> 00:14:27,100
yourself every time you run B dist wheel

00:14:24,970 --> 00:14:28,690
you need to pass in the - - Universal

00:14:27,100 --> 00:14:31,480
option you can put that in your setup

00:14:28,690 --> 00:14:32,920
dot CFG file so first line is what you

00:14:31,480 --> 00:14:34,270
what if you manually type that every

00:14:32,920 --> 00:14:36,910
time it will perform it the way you

00:14:34,270 --> 00:14:39,010
expect but if you have a set up dot CFG

00:14:36,910 --> 00:14:41,110
file that says beatest wheel universal

00:14:39,010 --> 00:14:44,260
equals one every time you run setup

00:14:41,110 --> 00:14:48,030
diabeetus wheel the the - - universal is

00:14:44,260 --> 00:14:49,630
implied you don't have to have this file

00:14:48,030 --> 00:14:51,250
especially essentially all you're really

00:14:49,630 --> 00:14:52,930
doing is defining the default settings

00:14:51,250 --> 00:14:54,850
when you actually run the python

00:14:52,930 --> 00:14:57,190
packaging tools but obviously if you

00:14:54,850 --> 00:14:58,900
specify the setup that CFG file there's

00:14:57,190 --> 00:15:00,910
zero chance that you'll forget to

00:14:58,900 --> 00:15:02,290
include an option later on so for

00:15:00,910 --> 00:15:03,430
example if you leave off the - -

00:15:02,290 --> 00:15:05,350
universal you're going to be building

00:15:03,430 --> 00:15:08,500
platform-specific wheels even though

00:15:05,350 --> 00:15:10,060
your code you know is universal so it's

00:15:08,500 --> 00:15:11,650
a good idea to have a set up that CFG

00:15:10,060 --> 00:15:14,890
file to make sure you don't forget those

00:15:11,650 --> 00:15:17,050
options the last file you have to add is

00:15:14,890 --> 00:15:18,400
a manifest die in file this defines

00:15:17,050 --> 00:15:19,089
everything else that needs to be

00:15:18,400 --> 00:15:21,550
included in your

00:15:19,089 --> 00:15:25,920
source distribution that isn't actually

00:15:21,550 --> 00:15:28,839
necessary for the the code to run itself

00:15:25,920 --> 00:15:30,160
so set up the pipe defines the code

00:15:28,839 --> 00:15:31,959
that's going to be going to be gonna be

00:15:30,160 --> 00:15:33,220
executed which code do I need to include

00:15:31,959 --> 00:15:34,809
and so what are some of the resources

00:15:33,220 --> 00:15:37,120
that need to right be there in order for

00:15:34,809 --> 00:15:39,100
that code to execute but that's purely

00:15:37,120 --> 00:15:40,449
for functional purposes the code and the

00:15:39,100 --> 00:15:42,459
data you need to be able to run the

00:15:40,449 --> 00:15:44,259
package you may also want to be

00:15:42,459 --> 00:15:46,720
distributed as part of your source

00:15:44,259 --> 00:15:49,569
distribution documentation tests

00:15:46,720 --> 00:15:51,759
examples other resources so the manifest

00:15:49,569 --> 00:15:54,189
iron file contains a series of commands

00:15:51,759 --> 00:15:55,779
one per line saying by the way when you

00:15:54,189 --> 00:15:57,279
build my source distribution also

00:15:55,779 --> 00:15:59,319
include this stuff so in this case

00:15:57,279 --> 00:16:01,600
recursively go down the docks directory

00:15:59,319 --> 00:16:02,949
and find all the Python to start up py

00:16:01,600 --> 00:16:04,600
files recursively include everything the

00:16:02,949 --> 00:16:07,389
docs file and include all the start on

00:16:04,600 --> 00:16:09,220
rst files going to the include just the

00:16:07,389 --> 00:16:11,589
test directory or just the Python files

00:16:09,220 --> 00:16:12,639
in the test directory there's a whole

00:16:11,589 --> 00:16:14,379
bunch of commands you can do in that

00:16:12,639 --> 00:16:16,209
sort of selectively piece pulled

00:16:14,379 --> 00:16:17,649
together and exclude and add and modify

00:16:16,209 --> 00:16:20,529
the things there in your manifest a tie

00:16:17,649 --> 00:16:21,490
in again some other tools you might find

00:16:20,529 --> 00:16:23,769
useful in this space

00:16:21,490 --> 00:16:25,569
check manifest is a command you can use

00:16:23,769 --> 00:16:26,379
to validate that your manifest a tie in

00:16:25,569 --> 00:16:28,569
is correct

00:16:26,379 --> 00:16:30,189
essentially you pip install check

00:16:28,569 --> 00:16:32,259
manifest and what you get is a command

00:16:30,189 --> 00:16:33,490
line tools the check manifest what it

00:16:32,259 --> 00:16:35,139
will do is go and check your version

00:16:33,490 --> 00:16:36,610
control system see all the files that

00:16:35,139 --> 00:16:38,499
you have checked into version control

00:16:36,610 --> 00:16:40,420
and see that they're actually going to

00:16:38,499 --> 00:16:42,129
get caught by your manifest that I in so

00:16:40,420 --> 00:16:43,899
you don't accidentally distribute some

00:16:42,129 --> 00:16:45,100
code that's missing an incredibly vital

00:16:43,899 --> 00:16:47,649
file in part of your source distribution

00:16:45,100 --> 00:16:51,519
like say for example toga when I

00:16:47,649 --> 00:16:53,259
realized it yesterday accidentally

00:16:51,519 --> 00:16:54,459
forgot to include a line that said oh by

00:16:53,259 --> 00:16:56,589
the way you're going to need this icon

00:16:54,459 --> 00:16:58,179
file so if you get the wheel the wheels

00:16:56,589 --> 00:17:01,689
fine but you get the source distribution

00:16:58,179 --> 00:17:04,179
that's missing the file ok bump version

00:17:01,689 --> 00:17:05,860
is one of many solutions that exists to

00:17:04,179 --> 00:17:07,839
solve a common common practical problem

00:17:05,860 --> 00:17:09,100
when you release a new version of your

00:17:07,839 --> 00:17:12,399
software you obviously need to say ok

00:17:09,100 --> 00:17:13,899
this is version 1 point what there is

00:17:12,399 --> 00:17:15,399
probably however multiple places where

00:17:13,899 --> 00:17:17,350
you need to update that file you need it

00:17:15,399 --> 00:17:19,870
in setup dot pi you need to have you've

00:17:17,350 --> 00:17:21,880
got you know a symbol in your running

00:17:19,870 --> 00:17:23,289
code that says ok this is version 1.0

00:17:21,880 --> 00:17:25,689
you might have your documentation

00:17:23,289 --> 00:17:27,760
references this is version 1.0 there are

00:17:25,689 --> 00:17:30,220
multiple places you need to update the

00:17:27,760 --> 00:17:31,809
version number there are a couple of

00:17:30,220 --> 00:17:32,770
strategies you can go through to make

00:17:31,809 --> 00:17:33,820
sure you only have to

00:17:32,770 --> 00:17:35,200
this once and it gets propagated

00:17:33,820 --> 00:17:37,540
everywhere because if you do it manually

00:17:35,200 --> 00:17:38,890
you will forget one of them bump version

00:17:37,540 --> 00:17:40,630
is a tool that will go through and find

00:17:38,890 --> 00:17:42,490
all the places you've referenced your

00:17:40,630 --> 00:17:44,470
version number and update it there are

00:17:42,490 --> 00:17:46,000
some places where I can't misfire those

00:17:44,470 --> 00:17:47,020
so there are other tools and other

00:17:46,000 --> 00:17:48,630
approaches you can use that don't

00:17:47,020 --> 00:17:51,340
involve using an external package and

00:17:48,630 --> 00:17:54,400
packaging Department a tour guide covers

00:17:51,340 --> 00:17:58,360
some of them yep punt version which may

00:17:54,400 --> 00:18:00,340
be worth having a look at okay so we've

00:17:58,360 --> 00:18:01,810
got our code we've put our code into a

00:18:00,340 --> 00:18:04,090
layout that's distributable and we've

00:18:01,810 --> 00:18:05,380
defined set up top py another packaging

00:18:04,090 --> 00:18:06,940
metadata that we need to have we're

00:18:05,380 --> 00:18:08,500
ready now to actually build our package

00:18:06,940 --> 00:18:10,960
to do this we're going to need some

00:18:08,500 --> 00:18:12,520
tools setup tools is what actually

00:18:10,960 --> 00:18:13,870
provides the setup to apply method so

00:18:12,520 --> 00:18:14,830
obviously we can define the code but

00:18:13,870 --> 00:18:17,080
until we've actually got it in our

00:18:14,830 --> 00:18:18,940
environment we can't call it so we need

00:18:17,080 --> 00:18:20,530
to pip install setup tools we need to

00:18:18,940 --> 00:18:22,590
pip install wheel so we need to go and

00:18:20,530 --> 00:18:25,450
get the tools that let us build wheels

00:18:22,590 --> 00:18:27,040
so the the biggest wheel command that

00:18:25,450 --> 00:18:28,840
we're going to pass in to set up to set

00:18:27,040 --> 00:18:31,720
up top py is provided by the wheel

00:18:28,840 --> 00:18:33,460
package and you should also get twine

00:18:31,720 --> 00:18:35,820
twine is what you use to wrap up the

00:18:33,460 --> 00:18:38,650
packages that you send to people by pi

00:18:35,820 --> 00:18:42,280
so we've now got those tools we can

00:18:38,650 --> 00:18:43,870
build our package exactly what type of

00:18:42,280 --> 00:18:45,460
package you build will tend depend a

00:18:43,870 --> 00:18:47,260
little bit upon the package that you're

00:18:45,460 --> 00:18:49,090
the the properties of the code that

00:18:47,260 --> 00:18:51,580
you're going to run if your code is pure

00:18:49,090 --> 00:18:52,810
Python works on Python 2 and python 3

00:18:51,580 --> 00:18:54,490
without having to run it through two to

00:18:52,810 --> 00:18:55,990
three or any sort of post-processing or

00:18:54,490 --> 00:18:58,300
something like that you can build what's

00:18:55,990 --> 00:19:00,520
called a universal wheel if you run

00:18:58,300 --> 00:19:02,380
Python setup top I'd be deist wheel - -

00:19:00,520 --> 00:19:04,660
Universal or you've got to set up a CFG

00:19:02,380 --> 00:19:07,570
file to automatically assume the - -

00:19:04,660 --> 00:19:09,070
universal you run that command

00:19:07,570 --> 00:19:10,450
it'll spew out a whole lot of content

00:19:09,070 --> 00:19:12,190
and one of the things that we'll do is

00:19:10,450 --> 00:19:13,960
produce this directory called dist and

00:19:12,190 --> 00:19:17,800
in that disk directory will be a file

00:19:13,960 --> 00:19:21,480
named in this case Python fire 0 1 0 -

00:19:17,800 --> 00:19:23,440
PI to 2 pi 3 - none or any dot wheel

00:19:21,480 --> 00:19:25,360
that essentially is telling you it's a

00:19:23,440 --> 00:19:27,970
Python file pair fire package version

00:19:25,360 --> 00:19:32,380
0.1 it's a Python 2 and Python 3

00:19:27,970 --> 00:19:34,060
compatible the nun is describing the ABI

00:19:32,380 --> 00:19:35,320
compatibility that in this particular

00:19:34,060 --> 00:19:38,140
instance we don't have one and it's

00:19:35,320 --> 00:19:39,640
available for any platform but yes you

00:19:38,140 --> 00:19:42,940
can only use that if it runs on Python 2

00:19:39,640 --> 00:19:44,530
and Python 3 and has no C extensions or

00:19:42,940 --> 00:19:46,150
its own or a binary component that goes

00:19:44,530 --> 00:19:46,600
along with that if your project does

00:19:46,150 --> 00:19:48,190
have C

00:19:46,600 --> 00:19:49,690
extensions you'll need to build one for

00:19:48,190 --> 00:19:51,039
every platform on which you wish to

00:19:49,690 --> 00:19:52,450
distribute so you need to get onto your

00:19:51,039 --> 00:19:53,919
windows box and build a Windows bill you

00:19:52,450 --> 00:19:58,419
need to get onto an iOS Xbox and build

00:19:53,919 --> 00:20:00,910
an OSX wheel you obviously the wind ones

00:19:58,419 --> 00:20:02,530
you build are as a at your discretion

00:20:00,910 --> 00:20:04,660
and the build resources you have at your

00:20:02,530 --> 00:20:05,980
disposal there's nothing preventing you

00:20:04,660 --> 00:20:07,539
from just building in our six wheel and

00:20:05,980 --> 00:20:11,410
not building a Windows wheel other than

00:20:07,539 --> 00:20:12,880
Windows people will get annoyed sorry to

00:20:11,410 --> 00:20:14,559
do that you don't have to have pass in

00:20:12,880 --> 00:20:16,630
the - - Universal Python set up the pipe

00:20:14,559 --> 00:20:19,059
beatest wheel it'll go through and turn

00:20:16,630 --> 00:20:21,490
again and spit out Python five and five

00:20:19,059 --> 00:20:24,789
zero one zero in this case it'll say CP

00:20:21,490 --> 00:20:27,400
- seven none Mac OS X 1080 x86 64 wheel

00:20:24,789 --> 00:20:30,520
which says this is a wheel that has been

00:20:27,400 --> 00:20:32,950
built for C Python 2.7 no ABI

00:20:30,520 --> 00:20:36,130
compatibility layer here for Mac OS X

00:20:32,950 --> 00:20:37,750
10.8 on an x86 64 platform okay so

00:20:36,130 --> 00:20:41,710
that's this is a wheel that will be able

00:20:37,750 --> 00:20:42,909
to be installed on Mac OS X now if

00:20:41,710 --> 00:20:45,250
you've got C extensions you need to do

00:20:42,909 --> 00:20:46,419
this only works for OS X and Windows it

00:20:45,250 --> 00:20:48,039
doesn't want reliable doesn't work on

00:20:46,419 --> 00:20:49,480
Linux because again for the api

00:20:48,039 --> 00:20:53,409
compatibility reasons I expect that

00:20:49,480 --> 00:20:54,789
earlier lastly you need to build a

00:20:53,409 --> 00:20:56,770
source distribution this is effectively

00:20:54,789 --> 00:20:58,330
the capture or worst-case everyone can

00:20:56,770 --> 00:21:01,120
install from source you just like people

00:20:58,330 --> 00:21:02,770
to not have to install from source the

00:21:01,120 --> 00:21:03,850
previous two you do the compilation for

00:21:02,770 --> 00:21:05,110
your users you're basically going to do

00:21:03,850 --> 00:21:06,370
all the compilation that needs to happen

00:21:05,110 --> 00:21:08,320
and give them something they can just

00:21:06,370 --> 00:21:10,120
drop in to their site packages and it

00:21:08,320 --> 00:21:12,039
will work or Python will drop in to

00:21:10,120 --> 00:21:14,409
their site packages and will work in

00:21:12,039 --> 00:21:16,600
this case you're letting the user do the

00:21:14,409 --> 00:21:18,100
compilation okay so even if it's pure

00:21:16,600 --> 00:21:19,240
Python because they set up top height is

00:21:18,100 --> 00:21:21,780
something that needs to be executed

00:21:19,240 --> 00:21:24,280
they're going to be doing the execution

00:21:21,780 --> 00:21:26,140
having done that you run to a place and

00:21:24,280 --> 00:21:28,299
set up the point s test turn turn churn

00:21:26,140 --> 00:21:30,730
into the district Origo python five zero

00:21:28,299 --> 00:21:33,820
one zero ecology said there you go it is

00:21:30,730 --> 00:21:35,650
a source distribution then you need to

00:21:33,820 --> 00:21:36,940
upload both your s tests and wheels to

00:21:35,650 --> 00:21:38,289
the violent package index and

00:21:36,940 --> 00:21:39,640
congratulations you've just packaged

00:21:38,289 --> 00:21:42,730
your first wheel first package your

00:21:39,640 --> 00:21:43,929
first Python package of course if this

00:21:42,730 --> 00:21:45,429
is your first time releasing your

00:21:43,929 --> 00:21:47,020
package you'll need to create a an

00:21:45,429 --> 00:21:49,510
account on the Python package index

00:21:47,020 --> 00:21:52,330
first okay so log on to pi to pi pi/2

00:21:49,510 --> 00:21:54,580
pathan org and upload the package info

00:21:52,330 --> 00:21:56,230
so you can do it manually upload the

00:21:54,580 --> 00:21:58,299
package info file

00:21:56,230 --> 00:21:59,270
sorry you need log on and create a user

00:21:58,299 --> 00:22:00,500
account for the

00:21:59,270 --> 00:22:02,990
and packaged index then you need to

00:22:00,500 --> 00:22:04,310
register your package with the Python

00:22:02,990 --> 00:22:06,860
package index effectively the parts in

00:22:04,310 --> 00:22:08,330
package index is a unique namespace

00:22:06,860 --> 00:22:10,010
there is only ever going to be one

00:22:08,330 --> 00:22:13,340
Django package on PI pi

00:22:10,010 --> 00:22:14,960
for obvious reasons so you need to go in

00:22:13,340 --> 00:22:16,610
there and claim your bit of your bit of

00:22:14,960 --> 00:22:18,380
territory you can do this manually by

00:22:16,610 --> 00:22:20,780
logging on and creating a record

00:22:18,380 --> 00:22:22,460
manually on the website upload a package

00:22:20,780 --> 00:22:25,760
info file or manually fill in all the

00:22:22,460 --> 00:22:28,460
details the other approach is to say set

00:22:25,760 --> 00:22:31,550
up top PI register now the problem is

00:22:28,460 --> 00:22:32,750
that this isn't 100% secure credentials

00:22:31,550 --> 00:22:33,890
are sent in plain text so you are

00:22:32,750 --> 00:22:35,390
potentially vulnerable to

00:22:33,890 --> 00:22:38,270
man-in-the-middle attacks whilst you do

00:22:35,390 --> 00:22:40,010
that this is a ticket that has been

00:22:38,270 --> 00:22:41,660
logged and with the tool as relevant

00:22:40,010 --> 00:22:43,670
I'll come up to this in a moment

00:22:41,660 --> 00:22:45,830
however you choose to do it whether you

00:22:43,670 --> 00:22:47,360
if you do decide to just use setup the

00:22:45,830 --> 00:22:49,280
PI register or if you manually log on

00:22:47,360 --> 00:22:51,140
either way you now have that name that

00:22:49,280 --> 00:22:52,310
name is yours and you can pass it around

00:22:51,140 --> 00:22:53,630
other people and other people share that

00:22:52,310 --> 00:22:56,960
share the namespace if you trust them

00:22:53,630 --> 00:22:58,640
but know it's up to you to do that you

00:22:56,960 --> 00:23:00,470
then need to upload your package

00:22:58,640 --> 00:23:02,570
so this is where twine comes in you say

00:23:00,470 --> 00:23:04,610
twine upload discuss did this left star

00:23:02,570 --> 00:23:06,320
that uploads everything that is in the

00:23:04,610 --> 00:23:09,050
twine der as it is in the district tree

00:23:06,320 --> 00:23:10,580
up to the Python package index so all

00:23:09,050 --> 00:23:12,110
the biggest wheel and SD stuff is stuck

00:23:10,580 --> 00:23:15,170
it in the district tree ship it ship

00:23:12,110 --> 00:23:17,510
that off twine is the replacement for

00:23:15,170 --> 00:23:19,700
Python set up the pipe upload Python set

00:23:17,510 --> 00:23:21,230
up top I upload has two problems one

00:23:19,700 --> 00:23:22,460
it's the same security problem in that

00:23:21,230 --> 00:23:24,560
it you know the credentials go over

00:23:22,460 --> 00:23:25,730
plain text whereas twine uses TLS

00:23:24,560 --> 00:23:28,220
connections end-to-end so your

00:23:25,730 --> 00:23:29,720
credentials are safe but okay even if

00:23:28,220 --> 00:23:31,340
you're not security paranoid you may not

00:23:29,720 --> 00:23:32,750
care about that what you do care about

00:23:31,340 --> 00:23:35,300
is that twine lets you do pre upload

00:23:32,750 --> 00:23:38,570
testing if you're using the setup to PI

00:23:35,300 --> 00:23:40,340
upload approach which is you don't just

00:23:38,570 --> 00:23:42,680
say platform setup the play upload you

00:23:40,340 --> 00:23:45,590
say Python setup to play upload a s test

00:23:42,680 --> 00:23:46,790
upload you have to build the package and

00:23:45,590 --> 00:23:49,460
upload it is one step

00:23:46,790 --> 00:23:51,650
you can't build the package check that

00:23:49,460 --> 00:23:53,900
it works and upload one that you know

00:23:51,650 --> 00:23:56,000
that works you have to go and do it all

00:23:53,900 --> 00:23:57,650
in one hit so you okay you can build the

00:23:56,000 --> 00:24:01,190
SDS and check that it works but then you

00:23:57,650 --> 00:24:04,100
build it again to upload it so twine is

00:24:01,190 --> 00:24:05,330
a much better option for that and that's

00:24:04,100 --> 00:24:06,910
it all that's left now is for the end

00:24:05,330 --> 00:24:09,230
user to actually install the package

00:24:06,910 --> 00:24:11,000
that's really all you really got to it

00:24:09,230 --> 00:24:11,470
is pip install python file that's at

00:24:11,000 --> 00:24:12,549
this point you

00:24:11,470 --> 00:24:14,230
done everything you need to do for an

00:24:12,549 --> 00:24:16,630
end-user to suck that down as long as

00:24:14,230 --> 00:24:18,760
you've got PIP 1.5 in you as them as the

00:24:16,630 --> 00:24:20,590
most recent tool or warmer reason as the

00:24:18,760 --> 00:24:21,789
tool it will prefer wheels over source

00:24:20,590 --> 00:24:23,080
distributions it will look for an

00:24:21,789 --> 00:24:24,370
appropriate wheel if it can find one

00:24:23,080 --> 00:24:26,380
it'll use it and new installs really

00:24:24,370 --> 00:24:28,659
quick or it'll get an SDS to run the SDS

00:24:26,380 --> 00:24:30,850
turn and install it locally how do you

00:24:28,659 --> 00:24:34,030
get PIP well if you're before Python Pro

00:24:30,850 --> 00:24:35,350
Prix Python 3.4 there is a tool called

00:24:34,030 --> 00:24:37,929
get pip which you can get off of

00:24:35,350 --> 00:24:40,539
packaging dot python.org if you're in

00:24:37,929 --> 00:24:41,950
Python 3.4 or later that's now part of

00:24:40,539 --> 00:24:44,110
the standard library you can say Python

00:24:41,950 --> 00:24:45,909
- mmm ensure pip and it will make sure

00:24:44,110 --> 00:24:47,350
that you've got a version of pip that's

00:24:45,909 --> 00:24:48,520
there and if you call it with - -

00:24:47,350 --> 00:24:49,809
upgrade it'll make sure you've got the

00:24:48,520 --> 00:24:53,350
most recent version that you need to

00:24:49,809 --> 00:24:54,340
have I've also been assuming that all

00:24:53,350 --> 00:24:55,419
this was done inside a virtual

00:24:54,340 --> 00:24:56,650
environment so if you haven't come

00:24:55,419 --> 00:24:58,570
across the virtual environments before

00:24:56,650 --> 00:25:00,159
this is a virtual environment is a way

00:24:58,570 --> 00:25:02,260
of keeping the packages of installed for

00:25:00,159 --> 00:25:03,669
one project isolated from another

00:25:02,260 --> 00:25:04,990
project so for example you've got two

00:25:03,669 --> 00:25:07,120
websites you're currently working on for

00:25:04,990 --> 00:25:09,309
customers this one's using Django 1.6

00:25:07,120 --> 00:25:11,409
this one's using Django 1.4 you can't

00:25:09,309 --> 00:25:13,330
install both at the same time into like

00:25:11,409 --> 00:25:15,400
a system packages virtual environment

00:25:13,330 --> 00:25:17,890
that you say ok project a installed

00:25:15,400 --> 00:25:19,780
Django 1.4 project be installed project

00:25:17,890 --> 00:25:21,880
install Django 1.6 keep the two

00:25:19,780 --> 00:25:23,260
environments completely separated it's a

00:25:21,880 --> 00:25:24,789
good practice to get into because those

00:25:23,260 --> 00:25:26,559
virtual environments you know maintain

00:25:24,789 --> 00:25:29,230
your sanity over what I'm actually using

00:25:26,559 --> 00:25:30,730
in any given time to get virtual

00:25:29,230 --> 00:25:33,669
environment again just pip install it

00:25:30,730 --> 00:25:34,870
and apply to three point four now ships

00:25:33,669 --> 00:25:36,490
with this out of the box as a packaged

00:25:34,870 --> 00:25:38,080
version of virtual and called PI VN

00:25:36,490 --> 00:25:40,990
which is almost identical to virtually

00:25:38,080 --> 00:25:42,340
in every respect so everything that I've

00:25:40,990 --> 00:25:43,900
been talking about here has been

00:25:42,340 --> 00:25:47,409
documented in much more detail than I

00:25:43,900 --> 00:25:48,549
can present in 20 minutes um but as I

00:25:47,409 --> 00:25:49,780
said at the beginning I'm not involved

00:25:48,549 --> 00:25:50,890
with a standards process I'm just

00:25:49,780 --> 00:25:53,530
someone who uses what the good people

00:25:50,890 --> 00:25:55,390
and the PI Pai told me to Python

00:25:53,530 --> 00:25:57,100
packaging was in the doldrums for a very

00:25:55,390 --> 00:25:59,169
long time and we all as a community our

00:25:57,100 --> 00:26:00,490
debt of gratitude to the people who have

00:25:59,169 --> 00:26:02,620
stepped up over the last couple of years

00:26:00,490 --> 00:26:04,030
to fix things in particular I want to

00:26:02,620 --> 00:26:06,700
shout out to one person who is here Nick

00:26:04,030 --> 00:26:08,710
Coughlin who holds the benevolent

00:26:06,700 --> 00:26:11,350
dictator for life of Python packaging

00:26:08,710 --> 00:26:12,580
and someone who isn't here and I have

00:26:11,350 --> 00:26:15,460
reason to believe is fictional because

00:26:12,580 --> 00:26:16,750
he never comes to conferences Donald

00:26:15,460 --> 00:26:18,340
stuff who has been doing extraordinary

00:26:16,750 --> 00:26:19,360
work behind the scenes building twine

00:26:18,340 --> 00:26:21,580
and building all the other bits and

00:26:19,360 --> 00:26:22,780
pieces a lot of the bits of pieces there

00:26:21,580 --> 00:26:24,010
are other people involved as well so

00:26:22,780 --> 00:26:24,700
it's not purely these guys there are

00:26:24,010 --> 00:26:26,170
there are

00:26:24,700 --> 00:26:27,790
other contributors as well with these

00:26:26,170 --> 00:26:29,980
guys have been doing some huge work and

00:26:27,790 --> 00:26:32,800
as a community we owe them a huge debt

00:26:29,980 --> 00:26:33,730
of gratitude so if and and and the worst

00:26:32,800 --> 00:26:35,380
thing is is that a lot of what they've

00:26:33,730 --> 00:26:36,760
been doing has been greeted with a

00:26:35,380 --> 00:26:40,120
highly productive internet shouting

00:26:36,760 --> 00:26:43,180
matches so if you get a chance buy them

00:26:40,120 --> 00:26:47,610
beer or a car because they've earned it

00:26:43,180 --> 00:26:47,610
so that's it thank you very much

00:27:02,530 --> 00:27:04,590

YouTube URL: https://www.youtube.com/watch?v=UtFHIpNPMPA


