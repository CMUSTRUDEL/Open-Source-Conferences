Title: Running Django on Docker: a workflow and code by Danielle Madeley
Publication date: 2014-08-05
Playlist: PyCon Australia 2014
Description: 
	Docker (http://docker.io) is the hot-new-thing out there for running your application in development and in production. Here at Infoxchange, we are extremely excited about how Docker allows a build-once, run-anywhere approach to moving applications from testing through to production. We are one of the first organisations to be using Docker in production on high-SLA applications.

In this talk we will present:

- a quick intro to Docker and how it solves our problems at Infoxchange;
- our interface for hosting applications on Docker ("pallet");
- how to build and develop a Python app on Docker;
- Infoxchange's Django settings module for the pallet interface;
- Forklift (https://github.com/infoxchange/docker-forklift), a tool we've developed for running and developing apps that use the pallet interface, in and out of a Docker container; and
- Extending forklift for your services.

If time permits we will try and cover the additional bonus topics:

- How to host your legacy mod_python application on Apache inside Docker with minimal changes; and
- Using Forklift to do automated full-stack integration testing of apps by spinning up containers of other apps (which we do in a container that is testing the built app that is running in a container that is our CI server... inception is possible).

The talk will be presented by Danielle Madeley and Alexey Kotlyarov.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:05,240 --> 00:00:10,730
um if we could find everyone can find

00:00:07,550 --> 00:00:12,530
their seats are we great so our next

00:00:10,730 --> 00:00:14,929
speaker so Danielle medley and Alexei

00:00:12,530 --> 00:00:16,670
cut Lea off and they're both senior web

00:00:14,929 --> 00:00:18,170
developers at info exchange and the talk

00:00:16,670 --> 00:00:22,330
today will be running Jango on a docker

00:00:18,170 --> 00:00:22,330
a workflow and code please welcome them

00:00:25,669 --> 00:00:34,489
thank you mrs. songs everyone hear me

00:00:27,579 --> 00:00:37,850
cool um yeah so today we're gonna be

00:00:34,489 --> 00:00:41,480
talking about running Jango or really

00:00:37,850 --> 00:00:43,879
any Python application running on your

00:00:41,480 --> 00:00:46,339
choice of app server and then by

00:00:43,879 --> 00:00:50,449
extension any application running on any

00:00:46,339 --> 00:00:54,410
app server on docker and why that's

00:00:50,449 --> 00:00:57,260
actually really cool so to give you a

00:00:54,410 --> 00:01:00,920
bit of a kind of set the scene for the

00:00:57,260 --> 00:01:04,489
problem we have a typical web

00:01:00,920 --> 00:01:07,159
architecture which looks something like

00:01:04,489 --> 00:01:08,630
this you have an app server you have a

00:01:07,159 --> 00:01:10,939
bunch of services around it

00:01:08,630 --> 00:01:14,270
you usually have an ssl terminated in

00:01:10,939 --> 00:01:17,420
front of it and so knowing all that

00:01:14,270 --> 00:01:20,469
we're just going to focus on the app

00:01:17,420 --> 00:01:24,020
server which if you're anything like us

00:01:20,469 --> 00:01:25,790
kind of looks like this um and so you

00:01:24,020 --> 00:01:28,640
have two separate versions of Python you

00:01:25,790 --> 00:01:30,380
have a celery service you have some PHP

00:01:28,640 --> 00:01:33,850
you probably have a ruby app server on

00:01:30,380 --> 00:01:38,110
there running a bit of everything and

00:01:33,850 --> 00:01:40,280
it's a bit of a mess

00:01:38,110 --> 00:01:43,340
different applications have different

00:01:40,280 --> 00:01:46,210
dependencies different versions of

00:01:43,340 --> 00:01:49,689
dependencies different app servers

00:01:46,210 --> 00:01:53,210
different paths and versions as I said

00:01:49,689 --> 00:01:56,240
you have multiple languages specific

00:01:53,210 --> 00:01:57,979
dependencies you can't control at your

00:01:56,240 --> 00:02:00,799
level because you're using virtual ends

00:01:57,979 --> 00:02:06,799
and those are coming from like from C

00:02:00,799 --> 00:02:12,290
for instance and so Virgil and doesn't

00:02:06,799 --> 00:02:17,230
solve the problem you also want to have

00:02:12,290 --> 00:02:19,269
this idea of a reproducible deployment

00:02:17,230 --> 00:02:21,549
you want to make sure that what you

00:02:19,269 --> 00:02:23,769
deployed on tests is what is deployed on

00:02:21,549 --> 00:02:26,650
staging is what is deployed in

00:02:23,769 --> 00:02:28,540
production and it is the same like is

00:02:26,650 --> 00:02:31,510
what you actually tested and what got

00:02:28,540 --> 00:02:35,530
signed off on and that you can still

00:02:31,510 --> 00:02:39,670
deploy it while pie-pie is down you can

00:02:35,530 --> 00:02:42,069
deploy it very quickly after you fail

00:02:39,670 --> 00:02:44,680
after you lose an app server you don't

00:02:42,069 --> 00:02:46,989
want to have to make large snapshot

00:02:44,680 --> 00:02:48,909
backups of the app server constantly for

00:02:46,989 --> 00:02:51,180
every release you do in the case that

00:02:48,909 --> 00:02:53,440
you may be doing multiple releases a day

00:02:51,180 --> 00:02:56,349
and you also want to be able have rapid

00:02:53,440 --> 00:02:59,849
scale out where you can just move the

00:02:56,349 --> 00:03:03,599
application to additional app servers as

00:02:59,849 --> 00:03:07,239
the load increases without having

00:03:03,599 --> 00:03:10,840
without having to wait for it to check

00:03:07,239 --> 00:03:12,909
out from you know from get and build all

00:03:10,840 --> 00:03:13,439
your assets and deploy them to the CDN

00:03:12,909 --> 00:03:21,000
and

00:03:13,439 --> 00:03:23,799
so on and so forth um so docker is um

00:03:21,000 --> 00:03:28,030
docker is this exciting new technology

00:03:23,799 --> 00:03:31,230
that everyone's heard a lot about docker

00:03:28,030 --> 00:03:36,129
is effectively a framework for providing

00:03:31,230 --> 00:03:38,409
isolation of containers using a

00:03:36,129 --> 00:03:41,290
technology such as i'm alexi or Linux

00:03:38,409 --> 00:03:43,329
containers you can do the kind of things

00:03:41,290 --> 00:03:48,849
that you could do with VMs which make

00:03:43,329 --> 00:03:51,909
them effectively vm's light they use C

00:03:48,849 --> 00:03:53,769
groups and other Linux technologies to

00:03:51,909 --> 00:03:57,760
constrain resources such as memory and

00:03:53,769 --> 00:04:03,159
CPU runtime they are isolated in memory

00:03:57,760 --> 00:04:04,900
spaces but can share common libraries

00:04:03,159 --> 00:04:07,090
like if you are loading the same copy of

00:04:04,900 --> 00:04:09,280
the same library off the disk you only

00:04:07,090 --> 00:04:12,040
need one copy of the code so they are

00:04:09,280 --> 00:04:14,400
more memory efficient than a VM in that

00:04:12,040 --> 00:04:14,400
regard

00:04:15,449 --> 00:04:22,030
so that's already an advantage docker

00:04:19,120 --> 00:04:25,419
then provides a lot of utility on top of

00:04:22,030 --> 00:04:27,279
lxc in that it allows you to have a

00:04:25,419 --> 00:04:28,200
repository of containers they can be

00:04:27,279 --> 00:04:31,740
versioned with

00:04:28,200 --> 00:04:35,340
names like revision control you can push

00:04:31,740 --> 00:04:42,990
and pull them and provides things like

00:04:35,340 --> 00:04:45,300
standardized entry points and I once had

00:04:42,990 --> 00:04:48,720
a lecturer who just insisted someone get

00:04:45,300 --> 00:04:53,730
out and if they didn't he just left we

00:04:48,720 --> 00:04:57,030
won't do that um so you have separate

00:04:53,730 --> 00:04:59,460
IPS seperately routable it's effectively

00:04:57,030 --> 00:05:02,070
a VM without all the overhead of being a

00:04:59,460 --> 00:05:03,630
VM which allows our architecture to go

00:05:02,070 --> 00:05:05,610
from our previous app server with

00:05:03,630 --> 00:05:07,980
everything kind of just running to

00:05:05,610 --> 00:05:11,190
something a little more isolated and

00:05:07,980 --> 00:05:13,470
looks like this um so you can see we

00:05:11,190 --> 00:05:16,010
have a bunch of containers and we can

00:05:13,470 --> 00:05:21,000
separate them each one can have its own

00:05:16,010 --> 00:05:25,050
OS base image its own dependency layer

00:05:21,000 --> 00:05:26,490
and finally the application on top the

00:05:25,050 --> 00:05:27,480
layering that I talked about there is

00:05:26,490 --> 00:05:29,400
quite interesting

00:05:27,480 --> 00:05:32,460
because the containers themselves are

00:05:29,400 --> 00:05:36,180
layered they're built up using a

00:05:32,460 --> 00:05:39,690
unionized file system on your choice of

00:05:36,180 --> 00:05:43,170
technologies almost where you start with

00:05:39,690 --> 00:05:46,440
a base image for instance Debian you can

00:05:43,170 --> 00:05:49,140
then install on your layer with your

00:05:46,440 --> 00:05:51,680
Python and your Python dependencies in

00:05:49,140 --> 00:05:53,610
NEC dependencies you might have and

00:05:51,680 --> 00:05:55,290
anything else you happen to need to get

00:05:53,610 --> 00:05:57,990
it running you can add your application

00:05:55,290 --> 00:06:01,140
on top of that and the layers below you

00:05:57,990 --> 00:06:03,720
can be shared which means you have one

00:06:01,140 --> 00:06:05,370
copy of the application on disk or one

00:06:03,720 --> 00:06:08,220
copy of that layer on disk shared

00:06:05,370 --> 00:06:10,260
amongst multiple users and because you

00:06:08,220 --> 00:06:12,660
have one copy on disk means when you

00:06:10,260 --> 00:06:17,790
load the code you only need one copy and

00:06:12,660 --> 00:06:21,180
memory so your cash and your disk case

00:06:17,790 --> 00:06:23,670
actually station really hot and if

00:06:21,180 --> 00:06:26,610
you're running four or five six Python

00:06:23,670 --> 00:06:29,880
applications all of that common code is

00:06:26,610 --> 00:06:31,860
there one copy nice and hot and memory

00:06:29,880 --> 00:06:32,940
but if you need to run a completely

00:06:31,860 --> 00:06:35,730
different thing if you need to find a

00:06:32,940 --> 00:06:37,970
thing on debian sarge because that's the

00:06:35,730 --> 00:06:41,990
last version you can get it running on

00:06:37,970 --> 00:06:41,990
that's also a thing you can do

00:06:42,120 --> 00:06:48,580
so the other nice thing about layers is

00:06:45,240 --> 00:06:51,670
all about containers is that the layers

00:06:48,580 --> 00:06:55,930
of a container are immutable so you can

00:06:51,670 --> 00:06:58,120
see here the layers that we compiled or

00:06:55,930 --> 00:07:01,180
built our guests compilers from where

00:06:58,120 --> 00:07:03,790
the layers that we built can't be

00:07:01,180 --> 00:07:05,440
changed changes you make to them are

00:07:03,790 --> 00:07:07,150
applied in the top layer as a difference

00:07:05,440 --> 00:07:10,960
every layer is a difference of the

00:07:07,150 --> 00:07:14,500
layers below it so the top layer is only

00:07:10,960 --> 00:07:15,970
a difference and thus is transient we

00:07:14,500 --> 00:07:19,510
can just throw it away

00:07:15,970 --> 00:07:23,800
restart the container and we will have a

00:07:19,510 --> 00:07:26,710
completely clean image again without it

00:07:23,800 --> 00:07:28,660
having been compromised

00:07:26,710 --> 00:07:30,070
which means then obviously need external

00:07:28,660 --> 00:07:31,690
storage for any stuff you do want to

00:07:30,070 --> 00:07:34,260
keep like your database or your

00:07:31,690 --> 00:07:36,490
attachments or any of that magic stuff

00:07:34,260 --> 00:07:38,950
but it also means then you can take the

00:07:36,490 --> 00:07:43,450
same image share it across multiple

00:07:38,950 --> 00:07:45,430
servers bring up the same container on

00:07:43,450 --> 00:07:47,230
multiple machines and not worry about

00:07:45,430 --> 00:07:50,890
them actually definitely blatting over

00:07:47,230 --> 00:07:54,940
each other which is another advantage

00:07:50,890 --> 00:07:57,610
over say trying to share VMs over NFS or

00:07:54,940 --> 00:08:01,930
there's other crazy things that I once

00:07:57,610 --> 00:08:06,030
upon tried to do the only problem is of

00:08:01,930 --> 00:08:12,640
course is that there's no standards

00:08:06,030 --> 00:08:14,230
docker is the X of off like server

00:08:12,640 --> 00:08:17,290
technologies by which I mean is they

00:08:14,230 --> 00:08:20,230
provide all the framework and none of

00:08:17,290 --> 00:08:22,330
the theming so you've got all this great

00:08:20,230 --> 00:08:25,420
technology but you can do whatever you

00:08:22,330 --> 00:08:26,890
want with it you can't I can't just give

00:08:25,420 --> 00:08:28,390
you a docker container there oh yeah

00:08:26,890 --> 00:08:30,670
here's the thing just booted up on your

00:08:28,390 --> 00:08:32,470
App servers was yoghurt or great where

00:08:30,670 --> 00:08:35,410
is everything

00:08:32,470 --> 00:08:39,130
how do I store my data how do I run

00:08:35,410 --> 00:08:43,930
maintenance tasks how do I configure my

00:08:39,130 --> 00:08:47,290
database however we can borrow a lot of

00:08:43,930 --> 00:08:48,960
ideas here from people like Heroku and

00:08:47,290 --> 00:08:52,410
Red Hat openshift

00:08:48,960 --> 00:08:55,290
and the s8 or factor

00:08:52,410 --> 00:08:58,019
um which has a lot of opinions about how

00:08:55,290 --> 00:09:02,699
to do this config and so we have um

00:08:58,019 --> 00:09:08,370
written a technology or a standard that

00:09:02,699 --> 00:09:11,069
we amusingly call pallet okay so what I

00:09:08,370 --> 00:09:14,819
want to do is containers is we want to

00:09:11,069 --> 00:09:18,810
run a web applications item so what

00:09:14,819 --> 00:09:21,180
better defines is standard ports for how

00:09:18,810 --> 00:09:25,470
to connect to the container tenant mount

00:09:21,180 --> 00:09:29,850
points for external storage and in what

00:09:25,470 --> 00:09:33,209
and how do the containers find where

00:09:29,850 --> 00:09:36,000
where the services are so for example

00:09:33,209 --> 00:09:38,300
the app set there's a database server

00:09:36,000 --> 00:09:42,540
memcache like Postgres what-have-you and

00:09:38,300 --> 00:09:44,550
also how to run the actual server and

00:09:42,540 --> 00:09:46,170
the entry points of how to run the

00:09:44,550 --> 00:09:49,019
actual server and the maintenance tasks

00:09:46,170 --> 00:09:52,470
what we do have - like we have deploy

00:09:49,019 --> 00:09:54,600
and so how to deploy the application to

00:09:52,470 --> 00:09:57,569
somewhere and how to actually run the

00:09:54,600 --> 00:10:03,209
web requests so let's talk about deploy

00:09:57,569 --> 00:10:05,699
and so when you start Jango any other

00:10:03,209 --> 00:10:07,350
application really you go to migrate

00:10:05,699 --> 00:10:09,600
your database the latest version of the

00:10:07,350 --> 00:10:11,550
fixtures install static content to a

00:10:09,600 --> 00:10:15,029
static web server copy static think of

00:10:11,550 --> 00:10:17,810
it think yeah copying it to whatever

00:10:15,029 --> 00:10:21,480
your load balance does or a CDN or

00:10:17,810 --> 00:10:24,720
whatever you have and when you actually

00:10:21,480 --> 00:10:28,439
want to serve then you want to run your

00:10:24,720 --> 00:10:31,800
web server on on on your already good

00:10:28,439 --> 00:10:34,139
database and everything and start maybe

00:10:31,800 --> 00:10:36,569
what what you have like celery or

00:10:34,139 --> 00:10:40,110
whatever other supporting cells you have

00:10:36,569 --> 00:10:43,769
you might have a cron job for example so

00:10:40,110 --> 00:10:48,120
you want to actually do as little as

00:10:43,769 --> 00:10:52,889
possible here and as much as possible

00:10:48,120 --> 00:10:58,050
when you build a container because the

00:10:52,889 --> 00:11:01,910
less that you can do here is that it

00:10:58,050 --> 00:11:05,830
means that you have as much as possible

00:11:01,910 --> 00:11:07,420
already done and the same for tears

00:11:05,830 --> 00:11:09,460
production environment develop an

00:11:07,420 --> 00:11:10,900
environment everywhere you got less less

00:11:09,460 --> 00:11:13,060
moving parts ice in dressings to go

00:11:10,900 --> 00:11:15,550
wrong whatever you already build with

00:11:13,060 --> 00:11:18,880
doctor build you had your you already

00:11:15,550 --> 00:11:20,350
have it's immutable and you can you can

00:11:18,880 --> 00:11:20,740
guarantee that if you are the same every

00:11:20,350 --> 00:11:23,020
time

00:11:20,740 --> 00:11:25,690
from then on you still want to make sure

00:11:23,020 --> 00:11:29,770
that deployed cell actually work but the

00:11:25,690 --> 00:11:32,290
less it can do is editor so docker has

00:11:29,770 --> 00:11:34,000
this idea of a docker file which is how

00:11:32,290 --> 00:11:37,870
to run a series of commands which is all

00:11:34,000 --> 00:11:42,130
hand docker image actually how many of

00:11:37,870 --> 00:11:44,260
you familiar or heard of docker and this

00:11:42,130 --> 00:11:49,660
actually nice how many of you know what

00:11:44,260 --> 00:11:54,130
the docker file is nice so what I want

00:11:49,660 --> 00:11:55,750
to do is choose our base based container

00:11:54,130 --> 00:11:58,090
for example stock Debian Ubuntu and

00:11:55,750 --> 00:11:59,260
fedora images awful already provided you

00:11:58,090 --> 00:12:02,080
can just download them as docker

00:11:59,260 --> 00:12:04,480
containers docker images sorry Ron

00:12:02,080 --> 00:12:06,580
install some packages for yourself you

00:12:04,480 --> 00:12:08,110
can you can choose your own source

00:12:06,580 --> 00:12:09,640
control you can choose what how you

00:12:08,110 --> 00:12:11,380
still fight and you can still partner

00:12:09,640 --> 00:12:13,120
three if you want you can install

00:12:11,380 --> 00:12:18,930
pattern from sources and you compile

00:12:13,120 --> 00:12:22,990
some crazy extensions of yours ah then

00:12:18,930 --> 00:12:24,370
what you do is just prepare somewhere to

00:12:22,990 --> 00:12:25,930
put your application in and someone to

00:12:24,370 --> 00:12:28,210
run it is because this is a really basic

00:12:25,930 --> 00:12:30,840
mission I think not not even install

00:12:28,210 --> 00:12:33,190
like the bootstrap if you know that and

00:12:30,840 --> 00:12:34,450
why you want a separate user is of

00:12:33,190 --> 00:12:36,460
course you don't want to run everything

00:12:34,450 --> 00:12:38,110
a zero because although doctor does

00:12:36,460 --> 00:12:39,910
oscillate every since they don't make it

00:12:38,110 --> 00:12:43,120
a guarantee that a root can break out

00:12:39,910 --> 00:12:45,310
and even if you it can break out it's

00:12:43,120 --> 00:12:50,100
still not good just having someone take

00:12:45,310 --> 00:12:53,340
over your server even even inside doc

00:12:50,100 --> 00:12:59,550
okay so now let's add our application in

00:12:53,340 --> 00:13:03,610
and every command in the docker file as

00:12:59,550 --> 00:13:06,520
long as the arguments are the same is

00:13:03,610 --> 00:13:09,220
cached that means if you run the doctor

00:13:06,520 --> 00:13:12,010
build to build the whole thing again and

00:13:09,220 --> 00:13:15,070
none of the files changed think like

00:13:12,010 --> 00:13:16,960
make make file that means that the

00:13:15,070 --> 00:13:19,420
command will not run as we'll just use

00:13:16,960 --> 00:13:23,100
the cached image because your dependency

00:13:19,420 --> 00:13:27,310
change change well don't change it often

00:13:23,100 --> 00:13:29,560
it means that that command to install

00:13:27,310 --> 00:13:33,460
them which typically takes well quite a

00:13:29,560 --> 00:13:38,370
bit of time the first time it runs it

00:13:33,460 --> 00:13:40,660
catch the result and then after that

00:13:38,370 --> 00:13:44,140
because the requirements text is the

00:13:40,660 --> 00:13:46,390
same you get it immediately you just

00:13:44,140 --> 00:13:51,760
need to upload the last is last time

00:13:46,390 --> 00:13:56,290
your new code some more housekeeping we

00:13:51,760 --> 00:13:59,320
want some persistent storage gibbeted

00:13:56,290 --> 00:14:01,690
and we want somewhere to put our static

00:13:59,320 --> 00:14:04,450
files to know to go through our app

00:14:01,690 --> 00:14:06,850
server nginx or whatever you have as

00:14:04,450 --> 00:14:11,710
your load balancer is better serving

00:14:06,850 --> 00:14:15,960
them why do we shown because every time

00:14:11,710 --> 00:14:18,760
we run a container somewhere we want to

00:14:15,960 --> 00:14:23,850
ensure that the app user can access

00:14:18,760 --> 00:14:25,900
those things and we don't know like if

00:14:23,850 --> 00:14:27,520
this container is put in the new

00:14:25,900 --> 00:14:29,140
environment like from testing to

00:14:27,520 --> 00:14:32,050
production and I don't know ten new

00:14:29,140 --> 00:14:33,970
seven we don't know what's in storage so

00:14:32,050 --> 00:14:40,060
we want to ensure that it's still there

00:14:33,970 --> 00:14:43,900
and owned by us that's the end really of

00:14:40,060 --> 00:14:46,540
the dockerfile version is just something

00:14:43,900 --> 00:14:48,430
that we want to keep we want to know

00:14:46,540 --> 00:14:52,120
what version are we running it's just a

00:14:48,430 --> 00:14:57,340
really convenient thing and entry point

00:14:52,120 --> 00:15:00,790
defines a command which runs when you

00:14:57,340 --> 00:15:05,260
actually do dr. Ron you can take your

00:15:00,790 --> 00:15:07,180
image that means that you can have

00:15:05,260 --> 00:15:09,760
different containers respond definitely

00:15:07,180 --> 00:15:11,830
to dr. Ron serve example a party

00:15:09,760 --> 00:15:13,840
container will start unicorn some of the

00:15:11,830 --> 00:15:17,130
Ruby container will start what it really

00:15:13,840 --> 00:15:20,890
people start after that I don't know and

00:15:17,130 --> 00:15:24,040
whatever so what does that do oh sorry

00:15:20,890 --> 00:15:26,830
one other thing is we make sure that our

00:15:24,040 --> 00:15:30,880
port 8000 is exposed to the outside

00:15:26,830 --> 00:15:32,570
world it's a choice of the system that's

00:15:30,880 --> 00:15:34,519
run into all the images

00:15:32,570 --> 00:15:38,329
- how to map that and makes it available

00:15:34,519 --> 00:15:42,079
to the load balancer but what this means

00:15:38,329 --> 00:15:48,980
is that when you're on a container by

00:15:42,079 --> 00:15:50,870
default it will just net the port of the

00:15:48,980 --> 00:15:52,370
owner or host machine to a thousand into

00:15:50,870 --> 00:15:57,459
a dock the container so you can connect

00:15:52,370 --> 00:16:01,040
it from outside ok so what do we do here

00:15:57,459 --> 00:16:05,750
we set some default parameters for

00:16:01,040 --> 00:16:08,990
example how how many processes do how

00:16:05,750 --> 00:16:13,730
many processes of the absolute you want

00:16:08,990 --> 00:16:15,199
to start we can pass arbitrary

00:16:13,730 --> 00:16:18,649
environment variables to the docker

00:16:15,199 --> 00:16:21,260
containers so if we decide that this new

00:16:18,649 --> 00:16:21,740
observer force is like 10 times more

00:16:21,260 --> 00:16:24,589
powerful

00:16:21,740 --> 00:16:28,970
we pass 10 on web concurrency and it

00:16:24,589 --> 00:16:30,620
will no just hard can processes or

00:16:28,970 --> 00:16:34,449
threads or what have you

00:16:30,620 --> 00:16:38,060
you're really not restricted in this and

00:16:34,449 --> 00:16:40,130
you want to again make sure that your

00:16:38,060 --> 00:16:43,519
own the static and storage directories

00:16:40,130 --> 00:16:46,370
and then switch to the app user that

00:16:43,519 --> 00:16:52,630
incarnation the last client is executing

00:16:46,370 --> 00:16:55,040
yourself with the app user and now

00:16:52,630 --> 00:16:57,560
complete freedom what do you want to do

00:16:55,040 --> 00:17:00,260
and deploy you want typically want to

00:16:57,560 --> 00:17:03,079
migrate your database if you are using

00:17:00,260 --> 00:17:07,780
flask you'll have a different command

00:17:03,079 --> 00:17:07,780
not manage py you'll have something else

00:17:07,809 --> 00:17:15,020
dd obtain DB update if and when you want

00:17:12,470 --> 00:17:18,230
to actually serve the web request you

00:17:15,020 --> 00:17:20,689
want to run gene unicorn against their

00:17:18,230 --> 00:17:22,669
mind it's cut off but again it's up to

00:17:20,689 --> 00:17:24,650
you to figure out if you if you if your

00:17:22,669 --> 00:17:26,660
gene you can run gene your corn if you

00:17:24,650 --> 00:17:28,910
want to run more WSGI as proposed

00:17:26,660 --> 00:17:31,309
yesterday the year round more WG are

00:17:28,910 --> 00:17:33,860
here if you test it to one application

00:17:31,309 --> 00:17:36,620
version and you think for the next one

00:17:33,860 --> 00:17:39,950
I'm gonna try something else like for

00:17:36,620 --> 00:17:43,220
example run with G event you can just

00:17:39,950 --> 00:17:45,530
deploy that by changing this file

00:17:43,220 --> 00:17:46,940
without any other

00:17:45,530 --> 00:17:48,500
changes in any other infrastructure

00:17:46,940 --> 00:17:51,890
there you just got to install it in

00:17:48,500 --> 00:17:53,870
requirements text and that's it and if

00:17:51,890 --> 00:17:55,340
you really want some tax just run a

00:17:53,870 --> 00:17:57,200
management command on your I have so

00:17:55,340 --> 00:18:02,050
everything else which is not deployed

00:17:57,200 --> 00:18:03,860
serve is passed through to manage brine

00:18:02,050 --> 00:18:06,080
it's good to have that entry point

00:18:03,860 --> 00:18:11,330
because well sometimes you just need to

00:18:06,080 --> 00:18:20,630
solve okay how do we make this fork on

00:18:11,330 --> 00:18:24,680
the Jenga side yes so obviously / 12

00:18:20,630 --> 00:18:26,630
factor and Heroku we are exposing most

00:18:24,680 --> 00:18:29,230
of our configuration that's being

00:18:26,630 --> 00:18:31,970
provided to us by the operations team as

00:18:29,230 --> 00:18:34,610
environment we can pass arbitrary

00:18:31,970 --> 00:18:37,400
environment into a docker container they

00:18:34,610 --> 00:18:41,090
have a puppet system which unfortunately

00:18:37,400 --> 00:18:42,920
isn't fully published yet which can

00:18:41,090 --> 00:18:45,770
bring up a docker container with all

00:18:42,920 --> 00:18:50,260
your environment out of Yama file that

00:18:45,770 --> 00:18:53,870
comes from their other infrastructure so

00:18:50,260 --> 00:18:58,670
database is pretty easy they have names

00:18:53,870 --> 00:19:01,160
like DB default URL these are names they

00:18:58,670 --> 00:19:03,830
give us that typically we would just map

00:19:01,160 --> 00:19:07,730
directly so that our database default is

00:19:03,830 --> 00:19:10,120
DV default URL our database users is DB

00:19:07,730 --> 00:19:12,020
users URL you can actually just

00:19:10,120 --> 00:19:15,980
basically apply regex to your

00:19:12,020 --> 00:19:21,500
environment and iterate them logging is

00:19:15,980 --> 00:19:24,530
a bit more tricky we get fed parameters

00:19:21,500 --> 00:19:27,010
for how to throw stuff at a syslog

00:19:24,530 --> 00:19:31,340
server that's actually really log stash

00:19:27,010 --> 00:19:35,270
and we have to configure that into our

00:19:31,340 --> 00:19:38,060
Python logging handling if you're using

00:19:35,270 --> 00:19:38,600
something supervisor as your servant

00:19:38,060 --> 00:19:41,480
repoint

00:19:38,600 --> 00:19:42,590
it gets a bit more tricky again we're

00:19:41,480 --> 00:19:47,090
going to gloss over that if someone

00:19:42,590 --> 00:19:49,130
wants to know about it come and ask you

00:19:47,090 --> 00:19:54,160
could extend this to talk to log stash

00:19:49,130 --> 00:19:54,160
directly as of yet we haven't done that

00:19:54,580 --> 00:19:59,250
talking to nginx or another

00:19:57,360 --> 00:20:03,990
a cell concentrator you need a bit of

00:19:59,250 --> 00:20:06,090
stuff that explains to trust the

00:20:03,990 --> 00:20:07,559
upstream this is pretty common stuff I

00:20:06,090 --> 00:20:10,830
just include it here because it's the

00:20:07,559 --> 00:20:13,980
three lines I always forget and go why

00:20:10,830 --> 00:20:17,940
doesn't my signing work correctly for my

00:20:13,980 --> 00:20:20,490
openness or alternatively because

00:20:17,940 --> 00:20:24,030
ultimately this comes down to the order

00:20:20,490 --> 00:20:27,210
of about 20 environment variables we

00:20:24,030 --> 00:20:28,950
just provide it all in a module for you

00:20:27,210 --> 00:20:32,040
if you want to use the pallet standard

00:20:28,950 --> 00:20:35,700
and you can just go from docker settings

00:20:32,040 --> 00:20:37,410
import star and you'll get everything

00:20:35,700 --> 00:20:40,620
the pallet standard defines a standard

00:20:37,410 --> 00:20:44,880
environment exposed anything it

00:20:40,620 --> 00:20:46,710
discovers it will expose for you it also

00:20:44,880 --> 00:20:50,220
provides a command called our managed PI

00:20:46,710 --> 00:20:53,309
deploy which is actually with the entry

00:20:50,220 --> 00:20:55,530
point views of deployment we wouldn't

00:20:53,309 --> 00:21:01,950
need to do that nowadays but it predates

00:20:55,530 --> 00:21:07,440
our darker system so this is an example

00:21:01,950 --> 00:21:09,030
that we put together in flask but is

00:21:07,440 --> 00:21:12,150
very much relying on me being able to

00:21:09,030 --> 00:21:13,980
connect to my computer at work and I may

00:21:12,150 --> 00:21:22,940
have made the classic mistake if you

00:21:13,980 --> 00:21:22,940
never do live demos come on thank you

00:21:31,440 --> 00:21:34,760
why doesn't that come up

00:21:44,490 --> 00:21:47,210
damn it

00:21:48,290 --> 00:21:52,750
um okay so he's just my computer at work

00:21:59,809 --> 00:22:05,610
okay so this is actually my um tutorial

00:22:03,870 --> 00:22:09,660
from Linux compare you if anyone saw

00:22:05,610 --> 00:22:11,690
that it's the same code so what I did

00:22:09,660 --> 00:22:14,880
was quickly docker eyes this command

00:22:11,690 --> 00:22:18,240
also this application so everything the

00:22:14,880 --> 00:22:24,360
docker file to make it work on top of

00:22:18,240 --> 00:22:28,980
Debian wheezy so that's pretty much as

00:22:24,360 --> 00:22:34,650
we showed you just before I've been

00:22:28,980 --> 00:22:39,299
revoked shell that uses Alembic to do

00:22:34,650 --> 00:22:43,950
your deployment and you unicorn to serve

00:22:39,299 --> 00:22:47,250
the application managed PI here is just

00:22:43,950 --> 00:22:52,860
um flask script and for anyone who's

00:22:47,250 --> 00:22:58,770
familiar with flask otherwise we have a

00:22:52,860 --> 00:23:02,750
list of requirements and finally we can

00:22:58,770 --> 00:23:05,190
just build it they're going to build dot

00:23:02,750 --> 00:23:08,120
so you can see here actually built this

00:23:05,190 --> 00:23:11,850
last night so it's quite happily um

00:23:08,120 --> 00:23:16,409
using cached versions and so my build is

00:23:11,850 --> 00:23:17,429
only taking 15 seconds I think it's

00:23:16,409 --> 00:23:19,799
actually fast in this I think our

00:23:17,429 --> 00:23:22,559
connections just a bit slow so you can

00:23:19,799 --> 00:23:25,530
see now it's built me that container

00:23:22,559 --> 00:23:29,309
successfully built has this little hash

00:23:25,530 --> 00:23:31,230
we can tag up with a name if we want so

00:23:29,309 --> 00:23:34,380
we could call it you know flask app

00:23:31,230 --> 00:23:36,480
later store flask app dev or something

00:23:34,380 --> 00:23:41,340
there's a flag to capacitor da to build

00:23:36,480 --> 00:23:43,710
dot if you don't like flags I have a

00:23:41,340 --> 00:23:46,140
make file that I gonna make build and

00:23:43,710 --> 00:23:49,770
that sets it all for me by using my get

00:23:46,140 --> 00:23:54,480
history to describe her I think it's

00:23:49,770 --> 00:23:56,070
important stylistically for docker avoid

00:23:54,480 --> 00:24:01,559
the temptation to make you a docker

00:23:56,070 --> 00:24:04,289
build file call a make file and instead

00:24:01,559 --> 00:24:06,179
use your make file to call docker build

00:24:04,289 --> 00:24:08,100
but make sure you can still use docker

00:24:06,179 --> 00:24:11,130
build directly because it'll become much

00:24:08,100 --> 00:24:14,580
easier to later upload

00:24:11,130 --> 00:24:16,080
your application to say and do a trusted

00:24:14,580 --> 00:24:18,900
docker build which is where you just sit

00:24:16,080 --> 00:24:22,080
give them the docker file and they build

00:24:18,900 --> 00:24:25,290
it themselves so that you know what's in

00:24:22,080 --> 00:24:26,880
the image maybe we aren't important in

00:24:25,290 --> 00:24:31,140
your production environment where you

00:24:26,880 --> 00:24:33,120
trust everyone but it opens options up

00:24:31,140 --> 00:24:34,650
to you the reason I say don't use a mag

00:24:33,120 --> 00:24:37,050
file for your build is you've then

00:24:34,650 --> 00:24:38,850
scrapped your cache ability every one of

00:24:37,050 --> 00:24:44,670
those lines in the docker file becomes a

00:24:38,850 --> 00:24:47,670
layer in the in the image so when I had

00:24:44,670 --> 00:24:49,440
the base OS as a layer I'm kind of

00:24:47,670 --> 00:24:52,740
glossing over this actually maybe three

00:24:49,440 --> 00:24:55,440
or four layers one for each line of the

00:24:52,740 --> 00:24:58,560
docker file and it means then we can

00:24:55,440 --> 00:25:03,750
share as much memory in common with

00:24:58,560 --> 00:25:05,460
other darker apps as we possibly can so

00:25:03,750 --> 00:25:11,300
anyway we have this so if we go docker

00:25:05,460 --> 00:25:14,270
run the image it's gonna tell me that I

00:25:11,300 --> 00:25:21,980
don't have a key called DB default URL

00:25:14,270 --> 00:25:26,040
so if I go docker run - e DB default URL

00:25:21,980 --> 00:25:31,910
Postgres dot slash slash standby for my

00:25:26,040 --> 00:25:31,910
super secret development password

00:25:38,980 --> 00:25:43,330
equals equals

00:25:52,530 --> 00:25:57,570
the other reason why you don't do lock

00:25:53,970 --> 00:26:00,630
dimmers surprise extra Hey okay so

00:25:57,570 --> 00:26:02,100
that's gonna say that um that's not one

00:26:00,630 --> 00:26:03,740
of the possible commands of my thing

00:26:02,100 --> 00:26:06,840
that's just floss script telling me that

00:26:03,740 --> 00:26:13,410
so let's give the actual entry point my

00:26:06,840 --> 00:26:17,730
great oh sorry deploy don't do live

00:26:13,410 --> 00:26:23,640
demos are embarrassing um well that's

00:26:17,730 --> 00:26:30,720
fun my database is down definitely don't

00:26:23,640 --> 00:26:35,570
do live demos um anyway so that would be

00:26:30,720 --> 00:26:35,570
cool except that it's not

00:26:40,780 --> 00:26:49,000
so that's how we run the container

00:26:43,890 --> 00:26:51,970
obviously you saw that I had to start

00:26:49,000 --> 00:26:53,290
exposing environment for my database for

00:26:51,970 --> 00:26:57,090
any other services they might have to

00:26:53,290 --> 00:26:59,950
find and it rapidly becomes a nightmare

00:26:57,090 --> 00:27:02,620
particularly if you are not in an

00:26:59,950 --> 00:27:05,950
Operations context where puppet or share

00:27:02,620 --> 00:27:08,440
for something is doing this for you

00:27:05,950 --> 00:27:11,440
you're going to start having database

00:27:08,440 --> 00:27:17,410
elasticsearch memcache it's a lot of

00:27:11,440 --> 00:27:21,370
things so what we've done it in fair

00:27:17,410 --> 00:27:25,840
exchange is we've written a new tool to

00:27:21,370 --> 00:27:27,190
help you it's called forklift because

00:27:25,840 --> 00:27:27,790
we're keeping the container team or what

00:27:27,190 --> 00:27:31,540
have you

00:27:27,790 --> 00:27:34,330
and it's actually nothing specific to

00:27:31,540 --> 00:27:37,210
dock huh is just for running that those

00:27:34,330 --> 00:27:40,840
commands which take our environment for

00:27:37,210 --> 00:27:42,760
others what it does is you just define

00:27:40,840 --> 00:27:44,230
what services you want for example you

00:27:42,760 --> 00:27:46,960
want paws dress maybe anyone that

00:27:44,230 --> 00:27:48,850
forgives just now you want memcache

00:27:46,960 --> 00:27:53,410
what else do you want elastic search

00:27:48,850 --> 00:27:54,880
something and then you then then folks

00:27:53,410 --> 00:27:56,670
if you'll find them for you for example

00:27:54,880 --> 00:27:59,980
if you're running force gets locally and

00:27:56,670 --> 00:28:01,750
you actually running it then focus will

00:27:59,980 --> 00:28:04,360
just fine we'll just provide it to your

00:28:01,750 --> 00:28:05,410
application without missing out like you

00:28:04,360 --> 00:28:06,870
don't have to remember what for the

00:28:05,410 --> 00:28:10,540
sport is what's the database name is

00:28:06,870 --> 00:28:13,990
everything or if you don't want to run

00:28:10,540 --> 00:28:17,440
Postgres on your laptop for example you

00:28:13,990 --> 00:28:20,430
can also download a docker image for

00:28:17,440 --> 00:28:24,250
pause-press forklift will find it and

00:28:20,430 --> 00:28:26,130
provide that to your application this

00:28:24,250 --> 00:28:28,900
how it looks

00:28:26,130 --> 00:28:32,230
you put a file called Foldit or Tiamo

00:28:28,900 --> 00:28:34,260
in integer or obligation directory you

00:28:32,230 --> 00:28:38,350
say you want possibly send last search

00:28:34,260 --> 00:28:40,090
and you do this all the other

00:28:38,350 --> 00:28:41,650
environment alright although another

00:28:40,090 --> 00:28:45,130
environment drivers I just DV default

00:28:41,650 --> 00:28:50,020
URL everything that you saw on that

00:28:45,130 --> 00:28:52,120
horrible slide are provided for you the

00:28:50,020 --> 00:28:53,630
catch with this is that you can still

00:28:52,120 --> 00:28:57,320
have to build a container and

00:28:53,630 --> 00:28:59,900
in this case name it my app but when he

00:28:57,320 --> 00:29:02,480
develop him even that 10 second delay

00:28:59,900 --> 00:29:03,980
like you don't really want to wait for

00:29:02,480 --> 00:29:05,300
your container to be especially if you

00:29:03,980 --> 00:29:08,180
reveal something or if you added

00:29:05,300 --> 00:29:13,520
something or anything you just want to

00:29:08,180 --> 00:29:16,610
run a quick test maybe so how do we do

00:29:13,520 --> 00:29:21,470
our development actually day to day with

00:29:16,610 --> 00:29:25,010
folks it well since we already have

00:29:21,470 --> 00:29:27,380
managed py or invoke data sage or again

00:29:25,010 --> 00:29:30,890
whatever whatever command it has a write

00:29:27,380 --> 00:29:32,210
in your app directory and all you want

00:29:30,890 --> 00:29:35,450
to do is to provide environment

00:29:32,210 --> 00:29:41,750
variables we just made for cliff do that

00:29:35,450 --> 00:29:44,600
and it will run the same way as we a

00:29:41,750 --> 00:29:46,760
docker except for the acceleration part

00:29:44,600 --> 00:29:48,080
if you use your host libraries your

00:29:46,760 --> 00:29:49,250
false dependencies everything your

00:29:48,080 --> 00:29:53,960
virtual environment you have to be in

00:29:49,250 --> 00:29:56,480
English environment run this so this is

00:29:53,960 --> 00:30:00,130
how we actually do our development do

00:29:56,480 --> 00:30:04,310
you want to show that or not not sure so

00:30:00,130 --> 00:30:05,600
if we pull back up our own thing this is

00:30:04,310 --> 00:30:10,190
why I don't know the names of the

00:30:05,600 --> 00:30:12,890
commands because I don't ever type them

00:30:10,190 --> 00:30:15,650
anymore I'm so far out the name of this

00:30:12,890 --> 00:30:19,810
container and I go forklift container

00:30:15,650 --> 00:30:19,810
name deploy

00:30:21,260 --> 00:30:28,910
that's um so yeah my um Postgres is

00:30:26,419 --> 00:30:29,540
running I just don't know the URL to

00:30:28,910 --> 00:30:36,740
talk to it

00:30:29,540 --> 00:30:38,270
so besides then thank you so you can see

00:30:36,740 --> 00:30:40,429
you have asked for Postgres service I

00:30:38,270 --> 00:30:42,890
can also hear past arbitrary

00:30:40,429 --> 00:30:45,530
configuration like extra environment

00:30:42,890 --> 00:30:49,760
that I need forklift doesn't know about

00:30:45,530 --> 00:30:53,809
or specific configuration like usernames

00:30:49,760 --> 00:30:58,870
and passwords any of the configuration

00:30:53,809 --> 00:30:58,870
for quit can expose as well as

00:31:07,440 --> 00:31:13,450
things for apps so in this case because

00:31:11,620 --> 00:31:16,180
forklift llamo is para Mary regional

00:31:13,450 --> 00:31:20,650
control all of my credentials to talk to

00:31:16,180 --> 00:31:24,430
an application either defaults because

00:31:20,650 --> 00:31:26,140
their database credentials and it will

00:31:24,430 --> 00:31:30,000
pick a default database name for me

00:31:26,140 --> 00:31:32,260
based on the app name or they are

00:31:30,000 --> 00:31:35,770
specific to an application for instance

00:31:32,260 --> 00:31:37,630
my application is s3 so specific

00:31:35,770 --> 00:31:41,020
credential so that app that belong just

00:31:37,630 --> 00:31:46,110
to me are in there and don't become part

00:31:41,020 --> 00:31:49,120
of a visual control so you can see

00:31:46,110 --> 00:31:55,660
there's my super secure post-grad

00:31:49,120 --> 00:31:59,380
password and from there what we can

00:31:55,660 --> 00:32:01,390
actually do if with this app is we can

00:31:59,380 --> 00:32:05,560
prove that it does do what it says it

00:32:01,390 --> 00:32:08,550
does go serve I have the logging turned

00:32:05,560 --> 00:32:08,550
off as I realized

00:32:15,390 --> 00:32:20,760
so G unicorn is running here it's just

00:32:18,780 --> 00:32:23,730
not logging anywhere because he doesn't

00:32:20,760 --> 00:32:28,799
think he has a log thing and now it's

00:32:23,730 --> 00:32:30,150
not gonna give me another the other one

00:32:28,799 --> 00:32:33,510
is docker does break some of your

00:32:30,150 --> 00:32:36,920
standard things like control Zed and

00:32:33,510 --> 00:32:36,920
that they get eaten by the terminal

00:32:38,540 --> 00:32:43,920
never do live demos there it goes thank

00:32:43,290 --> 00:32:48,240
you

00:32:43,920 --> 00:32:51,890
umm so if I go docker PS I'll be able to

00:32:48,240 --> 00:32:55,710
see my container running so I can see

00:32:51,890 --> 00:32:59,220
that it's mapped this port on my host

00:32:55,710 --> 00:33:01,580
machine to 8,000 in my container my

00:32:59,220 --> 00:33:03,960
container is panic old drunk our media

00:33:01,580 --> 00:33:07,830
so this is the name you can use to refer

00:33:03,960 --> 00:33:09,450
to it you can also specify this name if

00:33:07,830 --> 00:33:12,870
you don't want to have to use the name

00:33:09,450 --> 00:33:15,780
it assigned and you can also use the the

00:33:12,870 --> 00:33:18,030
container ID which is different to the

00:33:15,780 --> 00:33:20,130
image ID the image is the thing that

00:33:18,030 --> 00:33:33,840
loaded from the disk the container is

00:33:20,130 --> 00:33:37,309
the executing image so if I what I was

00:33:33,840 --> 00:33:37,309
having bit time and there please stop

00:33:48,650 --> 00:33:58,130
um yeah so that's clearly my LCA demo um

00:33:55,990 --> 00:34:00,260
there are a few other neat dock

00:33:58,130 --> 00:34:05,140
utilities if you do want to program the

00:34:00,260 --> 00:34:10,280
containers so for instance I can also

00:34:05,140 --> 00:34:13,250
curl this is not part of forklift this

00:34:10,280 --> 00:34:15,800
is um actually provided by another thing

00:34:13,250 --> 00:34:18,370
we developed which was a Lib NSS plug in

00:34:15,800 --> 00:34:18,370
a docker

00:34:19,120 --> 00:34:22,909
so that way you can touch the container

00:34:21,500 --> 00:34:27,700
directly without needing to worry about

00:34:22,909 --> 00:34:34,370
how it maps doing your whole system um

00:34:27,700 --> 00:34:36,320
so now we will keep talking about how

00:34:34,370 --> 00:34:40,700
are you I'm developing debug containers

00:34:36,320 --> 00:34:42,440
yeah so it's all nice and good when

00:34:40,700 --> 00:34:45,350
you're doing this but then you realize

00:34:42,440 --> 00:34:50,990
that on your host machine everything

00:34:45,350 --> 00:34:54,320
works perfectly and okay so what you

00:34:50,990 --> 00:34:57,530
want to do is you want to get into the

00:34:54,320 --> 00:35:00,290
container that as we've seen is really

00:34:57,530 --> 00:35:02,450
basic it just has your app server that

00:35:00,290 --> 00:35:08,060
means it doesn't have for example one of

00:35:02,450 --> 00:35:13,840
the basic which is SSH what we came up

00:35:08,060 --> 00:35:19,130
with is project early on is sshd it

00:35:13,840 --> 00:35:20,960
makes a few nasty things happen in your

00:35:19,130 --> 00:35:25,280
container in a new energy a new

00:35:20,960 --> 00:35:27,620
container for example it installs SSH

00:35:25,280 --> 00:35:31,930
inside in

00:35:27,620 --> 00:35:37,250
give gives you access via public keys

00:35:31,930 --> 00:35:40,330
mount the container the container root

00:35:37,250 --> 00:35:42,860
filesystem to your hosts file system and

00:35:40,330 --> 00:35:49,780
does some more magic which I want to

00:35:42,860 --> 00:35:49,780
invoke it here and yeah we can show that

00:35:50,290 --> 00:35:59,530
so we go back yeah one of the nice

00:35:56,560 --> 00:36:02,080
things about docker is the process is

00:35:59,530 --> 00:36:04,930
still up here in your arm

00:36:02,080 --> 00:36:09,070
top tier namespace so if I kill all GG

00:36:04,930 --> 00:36:12,850
look on there my container ends because

00:36:09,070 --> 00:36:15,250
my namespace includes all of the child

00:36:12,850 --> 00:36:17,800
process namespaces there's all these

00:36:15,250 --> 00:36:23,100
cool stuff you can do with cgroups serve

00:36:17,800 --> 00:36:23,100
agro forklifts that one

00:36:42,510 --> 00:36:45,440
what's it actually called

00:36:46,580 --> 00:36:53,630
that's right isn't it I could be running

00:36:51,260 --> 00:36:57,520
a development version of forklift and I

00:36:53,630 --> 00:37:03,290
could have broken again no live demos

00:36:57,520 --> 00:37:06,590
okay so the other way the other way this

00:37:03,290 --> 00:37:08,330
can be useful is if you've created such

00:37:06,590 --> 00:37:11,500
a horrible monster in your container

00:37:08,330 --> 00:37:12,980
did you just control it on your fault I

00:37:11,500 --> 00:37:16,550
don't know

00:37:12,980 --> 00:37:23,300
ah yeah okay I wasn't going to say it

00:37:16,550 --> 00:37:25,490
okay so you will just run it HD you are

00:37:23,300 --> 00:37:27,020
on all the things you want in the

00:37:25,490 --> 00:37:29,210
container and you still have access you

00:37:27,020 --> 00:37:35,450
have you can modify your code inside and

00:37:29,210 --> 00:37:39,770
you can do this okay so what can L scan

00:37:35,450 --> 00:37:42,410
we do with folk saved we can add some

00:37:39,770 --> 00:37:44,830
more services to it for example if you

00:37:42,410 --> 00:37:51,050
use I don't know - kale something else

00:37:44,830 --> 00:37:52,790
then you can quite easily ah add them to

00:37:51,050 --> 00:37:56,870
focus or did I mention it is written

00:37:52,790 --> 00:37:59,090
button so what do you think what a doll

00:37:56,870 --> 00:38:02,060
under the hood is just take some

00:37:59,090 --> 00:38:03,980
configuration for example how to find

00:38:02,060 --> 00:38:09,280
how to connect it in this game the

00:38:03,980 --> 00:38:11,980
memcache server and how to provide that

00:38:09,280 --> 00:38:14,330
configuration to the running container

00:38:11,980 --> 00:38:17,510
we can have more than one make cash

00:38:14,330 --> 00:38:19,730
costs in a cluster so we just pipe

00:38:17,510 --> 00:38:21,200
separate them and put it in the other

00:38:19,730 --> 00:38:23,390
mom incredible and the perfect is just

00:38:21,200 --> 00:38:27,200
if you want if you have multiple

00:38:23,390 --> 00:38:30,820
applications using the same page you you

00:38:27,200 --> 00:38:34,280
want them to use a different different

00:38:30,820 --> 00:38:36,170
databases and you have you have to check

00:38:34,280 --> 00:38:38,930
where it's available so if the local one

00:38:36,170 --> 00:38:41,450
isn't available this is how you do the

00:38:38,930 --> 00:38:46,130
local one you just try to see if it's

00:38:41,450 --> 00:38:49,400
there if it's not you can just go and

00:38:46,130 --> 00:38:50,840
download the container and run it again

00:38:49,400 --> 00:38:52,600
a different local container for just

00:38:50,840 --> 00:38:55,250
variety of memcache

00:38:52,600 --> 00:38:57,100
there are a few things here well notice

00:38:55,250 --> 00:38:59,260
that there is a transit provider here

00:38:57,100 --> 00:39:04,440
which we added

00:38:59,260 --> 00:39:08,880
to make possible an integration we yeah

00:39:04,440 --> 00:39:11,800
um so with continuous integration

00:39:08,880 --> 00:39:14,080
obviously you saw we extended the base

00:39:11,800 --> 00:39:17,500
pallet spec to have an entry point code

00:39:14,080 --> 00:39:21,130
test so if you call test on a container

00:39:17,500 --> 00:39:23,530
it will run all of its testing output

00:39:21,130 --> 00:39:26,460
the results to stand it out and return

00:39:23,530 --> 00:39:31,420
an exit code it's basically Travis

00:39:26,460 --> 00:39:35,260
powered by docker where it got kind of

00:39:31,420 --> 00:39:38,740
annoying was you had to spin you have to

00:39:35,260 --> 00:39:41,410
spin up all these test services to do

00:39:38,740 --> 00:39:43,030
your full stack integration test you

00:39:41,410 --> 00:39:46,180
might need a database which certainly a

00:39:43,030 --> 00:39:49,380
database elasticsearch probably need

00:39:46,180 --> 00:39:53,260
memcache you might need to read us

00:39:49,380 --> 00:39:54,520
it gets pretty tricky too and pretty

00:39:53,260 --> 00:39:56,680
annoying to constantly have to maintain

00:39:54,520 --> 00:39:59,230
your CI servers with all of these

00:39:56,680 --> 00:40:00,370
services that are made available and

00:39:59,230 --> 00:40:04,270
exposed through the forklift

00:40:00,370 --> 00:40:05,980
configuration also because we don't

00:40:04,270 --> 00:40:10,210
control the CI servers they're

00:40:05,980 --> 00:40:11,980
controlled by the operations team they

00:40:10,210 --> 00:40:16,090
get kind of annoyed every time you're

00:40:11,980 --> 00:40:17,470
going to ask for more services so using

00:40:16,090 --> 00:40:19,540
the ability to download and run

00:40:17,470 --> 00:40:21,640
containers and the fact that containers

00:40:19,540 --> 00:40:27,670
can be transient and guaranteed to be

00:40:21,640 --> 00:40:32,160
fresh is this beautiful idea of a

00:40:27,670 --> 00:40:33,940
cleanroom test which will download or

00:40:32,160 --> 00:40:38,020
instantiate a brand-new set of

00:40:33,940 --> 00:40:41,200
containers configure your app to run

00:40:38,020 --> 00:40:45,460
those containers and then delete them at

00:40:41,200 --> 00:40:47,430
the end so that you will always have a

00:40:45,460 --> 00:40:51,730
brand new database a brand new

00:40:47,430 --> 00:40:55,600
elasticsearch etc so that transient

00:40:51,730 --> 00:40:58,390
container decorator says that this is

00:40:55,600 --> 00:41:02,100
the way to provide the cleanroom

00:40:58,390 --> 00:41:02,100
implementation for forklifts

00:41:04,560 --> 00:41:12,990
I don't know what that means

00:41:08,430 --> 00:41:16,560
oh yeah we have tried to make the our CI

00:41:12,990 --> 00:41:18,120
server to run the same as our other

00:41:16,560 --> 00:41:20,640
application service so to run the

00:41:18,120 --> 00:41:23,310
container and that would have been a CI

00:41:20,640 --> 00:41:25,320
server running in dhaka spinning docker

00:41:23,310 --> 00:41:32,610
container inside docker to test their

00:41:25,320 --> 00:41:34,290
applications in docker but it failed the

00:41:32,610 --> 00:41:35,790
other nice trick you can do with this

00:41:34,290 --> 00:41:37,380
because we are spinning separate

00:41:35,790 --> 00:41:42,320
containers and they are all nicely

00:41:37,380 --> 00:41:44,370
isolated is we can divide the test load

00:41:42,320 --> 00:41:47,220
we don't have a working implementation

00:41:44,370 --> 00:41:49,430
in this today but the basic premise is

00:41:47,220 --> 00:41:53,490
you say ok divide the test load in for

00:41:49,430 --> 00:41:55,980
give you give you a running forklift a

00:41:53,490 --> 00:41:57,480
parameter between 1 and 4 it spins up a

00:41:55,980 --> 00:42:00,000
full set of containers and runs that

00:41:57,480 --> 00:42:02,250
chunk of the test load and now we have

00:42:00,000 --> 00:42:04,410
paralyzed our test suite by 4 without

00:42:02,250 --> 00:42:06,170
having to worry about them smacking over

00:42:04,410 --> 00:42:08,520
each other loading fixtures and

00:42:06,170 --> 00:42:10,830
manipulating services in weird wonderful

00:42:08,520 --> 00:42:13,020
ways which is particularly useful when

00:42:10,830 --> 00:42:16,380
you're testing all the failure cases and

00:42:13,020 --> 00:42:20,340
you intentionally D configure services

00:42:16,380 --> 00:42:25,230
and turn them off and the last thing

00:42:20,340 --> 00:42:27,900
that we wanted to talk about and that

00:42:25,230 --> 00:42:30,570
was ability that we can do with this

00:42:27,900 --> 00:42:34,800
platform as well as all this Greenfields

00:42:30,570 --> 00:42:40,470
code and modern web apps it is possible

00:42:34,800 --> 00:42:43,380
to run your legacy web apps inside the

00:42:40,470 --> 00:42:44,850
pallet specification I was going to put

00:42:43,380 --> 00:42:47,220
an example side of this up but it's

00:42:44,850 --> 00:42:49,710
actually kind of hard to explain so

00:42:47,220 --> 00:42:52,650
again come and talk to us afterwards and

00:42:49,710 --> 00:42:54,540
we will show you how to do it the sort

00:42:52,650 --> 00:42:57,630
of thing I'm talking about these

00:42:54,540 --> 00:43:01,170
applications written in want Python but

00:42:57,630 --> 00:43:04,790
that only run Apache 1.3 and the dirt

00:43:01,170 --> 00:43:07,440
run on Apache 2 don't run on modern

00:43:04,790 --> 00:43:11,700
Linux so you have to run them on Debian

00:43:07,440 --> 00:43:13,380
Sarge on Apache 1-3 and currently they'd

00:43:11,700 --> 00:43:15,500
be running on a failing server and it's

00:43:13,380 --> 00:43:19,790
kind of off collecting dust in a corner

00:43:15,500 --> 00:43:21,440
and crashes all the time and so you want

00:43:19,790 --> 00:43:23,270
to move it to your modern app server

00:43:21,440 --> 00:43:25,700
architecture you wanted to be isolated

00:43:23,270 --> 00:43:30,800
because it's running antique Linux you

00:43:25,700 --> 00:43:34,580
want to minimize your exploit surface to

00:43:30,800 --> 00:43:36,200
the minimum thing possible so it is

00:43:34,580 --> 00:43:40,430
possible to boot up a docker container

00:43:36,200 --> 00:43:42,590
running old Apache make the deploy

00:43:40,430 --> 00:43:45,710
command write out the config for the

00:43:42,590 --> 00:43:48,290
application so the application can boot

00:43:45,710 --> 00:43:50,510
using the environment launch the

00:43:48,290 --> 00:43:54,490
application by starting the Apache

00:43:50,510 --> 00:43:56,270
process on serve and have it all work

00:43:54,490 --> 00:43:57,619
which means you still get all those

00:43:56,270 --> 00:43:59,840
lovely advantages of immutable

00:43:57,619 --> 00:44:02,420
containers which is great for your

00:43:59,840 --> 00:44:04,280
legacy in secure application you don't

00:44:02,420 --> 00:44:09,590
have to run old SSH you don't have to an

00:44:04,280 --> 00:44:11,660
old SSL because you've got it fitted all

00:44:09,590 --> 00:44:16,270
intervening with the modern services in

00:44:11,660 --> 00:44:19,070
front of it so this was a nice way to

00:44:16,270 --> 00:44:20,960
kind of without reducing our technical

00:44:19,070 --> 00:44:23,589
debt kind of save ourselves from

00:44:20,960 --> 00:44:28,070
catastrophic failure

00:44:23,589 --> 00:44:32,619
um and that's all we have for out of

00:44:28,070 --> 00:44:32,619
time so I'm have any quick questions

00:44:46,099 --> 00:44:48,160

YouTube URL: https://www.youtube.com/watch?v=SgL8r--p97s


