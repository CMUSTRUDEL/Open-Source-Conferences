Title: How do debug tool bars for web applications work? by Graham Dumpleton
Publication date: 2014-08-11
Playlist: PyCon Australia 2014
Description: 
	When your production web application breaks, working out what went wrong can be hard. Information from log messages and details of any Python exceptions which occurred, along with other application performance data can help to identify the issue, but not always. Often you will need to fall back to a development or test environment and hope you can replicate the problem and then debug the issue from there.

The purpose of this talk is to dive in and look at one class of tools that can be used in helping debug web applications. Specifically, it will look at web application tools such as the Django debug tool bar.

Rather than simply look at how you might use such a tool though, this talk will look at how these debug tool bars are actually implemented, how they hook into your web application, how they capture the information that they do, as well as how they can be extended to add new functionality.

The limitations on these tools as far as performance overhead, security of data etc, which nearly aways lead to them only being recommended for development environments, will also be discussed.

At the same time though, this notion that they are only suitable for development environments will also be challenged by looking at how a tool such as the New Relic Python agent, which implements application performance monitoring, overcomes such limitations to provide a production grade solution.

Are there lessons to be learnt from how the New Relic Python agent works which could drive improvements to existing web application debug tool bars? Could the New Relic Python agent itself be used as a base for a new generation of debug tool bars which combine an ability to debug a web application, even in a production environment, with the ability to monitor the performance of the web application over time?

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:05,410 --> 00:00:10,209
good afternoon everyone so our next

00:00:07,960 --> 00:00:12,549
speaker Graham dumbleton is the author

00:00:10,209 --> 00:00:14,110
of the Apache module mod whiskey and is

00:00:12,549 --> 00:00:16,090
currently the lead software engineer at

00:00:14,110 --> 00:00:18,759
New Relic incorporated his talk today is

00:00:16,090 --> 00:00:23,070
called how do debug tool bars for web

00:00:18,759 --> 00:00:23,070
applications work please welcome him

00:00:25,980 --> 00:00:31,570
thank you for coming I I don't see Simon

00:00:28,750 --> 00:00:33,100
Wilson here are you I appear i was going

00:00:31,570 --> 00:00:35,140
to invite you up here to do my talk

00:00:33,100 --> 00:00:39,550
since you've sort of now stolen my

00:00:35,140 --> 00:00:42,640
limelight okay let's get going because I

00:00:39,550 --> 00:00:44,079
got a lot here so web application debug

00:00:42,640 --> 00:00:46,450
tool bars exist for various web

00:00:44,079 --> 00:00:49,030
frameworks solutions exist for flaming

00:00:46,450 --> 00:00:51,280
written in Python and Ruby PHP and perl

00:00:49,030 --> 00:00:53,140
I don't really have an idea exactly

00:00:51,280 --> 00:00:55,870
where they first originated but if

00:00:53,140 --> 00:00:58,059
hyphen I believe the first one is the

00:00:55,870 --> 00:01:00,550
Django debug tool bar but I'm sure that

00:00:58,059 --> 00:01:02,320
if Dylan was here this year who is not

00:01:00,550 --> 00:01:05,080
he would jump up and say no no zope had

00:01:02,320 --> 00:01:06,460
one years before but my research I could

00:01:05,080 --> 00:01:10,229
only find one for plone which was

00:01:06,460 --> 00:01:12,490
employed and done much more recent times

00:01:10,229 --> 00:01:14,140
as to what they are they're the

00:01:12,490 --> 00:01:16,119
application the actual web application

00:01:14,140 --> 00:01:17,490
toolbar is a piece of code which it gets

00:01:16,119 --> 00:01:21,340
embedded within your web application

00:01:17,490 --> 00:01:23,500
once enabled when you access any web web

00:01:21,340 --> 00:01:25,899
page from your application than from a

00:01:23,500 --> 00:01:27,580
browser a toolbar or sidebar will be

00:01:25,899 --> 00:01:29,860
presented along with the normal page

00:01:27,580 --> 00:01:32,590
response from your web occasion for the

00:01:29,860 --> 00:01:34,599
Euro which was just visited through this

00:01:32,590 --> 00:01:36,610
toolbar you can then access information

00:01:34,599 --> 00:01:40,090
about the specific web request which was

00:01:36,610 --> 00:01:42,220
just made a range of information about

00:01:40,090 --> 00:01:44,080
the request may be presented generally

00:01:42,220 --> 00:01:46,149
with separate panels selectable from the

00:01:44,080 --> 00:01:48,190
toolbar this can include performance

00:01:46,149 --> 00:01:50,950
data such as hell on the request talk to

00:01:48,190 --> 00:01:54,759
execute the CPU resources consumed or

00:01:50,950 --> 00:01:56,200
other operating system parameters the

00:01:54,759 --> 00:01:58,030
request head is received by the web

00:01:56,200 --> 00:01:59,590
application from the browser as well as

00:01:58,030 --> 00:02:04,090
the response headers that a return are

00:01:59,590 --> 00:02:06,310
also generally available as wood details

00:02:04,090 --> 00:02:09,340
of any request parameters and cookies

00:02:06,310 --> 00:02:11,140
plus a range of web framework specific

00:02:09,340 --> 00:02:12,910
information could also be available such

00:02:11,140 --> 00:02:15,340
as for Django you might have templates

00:02:12,910 --> 00:02:17,800
that are rendered signals that are core

00:02:15,340 --> 00:02:18,880
of your signals and so on which might

00:02:17,800 --> 00:02:21,310
get trigger than that

00:02:18,880 --> 00:02:23,620
and so on so this may include session

00:02:21,310 --> 00:02:25,600
information derived also from cookies as

00:02:23,620 --> 00:02:27,460
a URL or outmatched in the name of the

00:02:25,600 --> 00:02:30,400
actual hand functional view handler

00:02:27,460 --> 00:02:32,260
which is process the request even more

00:02:30,400 --> 00:02:33,910
detailed information about the work done

00:02:32,260 --> 00:02:35,860
within the context of a request for

00:02:33,910 --> 00:02:38,860
database queries template rendering

00:02:35,860 --> 00:02:41,500
might also be available for the case of

00:02:38,860 --> 00:02:43,330
Jenga debug toolbar which option been

00:02:41,500 --> 00:02:45,700
showing you in the pictures it provides

00:02:43,330 --> 00:02:47,500
a set of quick setup instructions first

00:02:45,700 --> 00:02:49,780
you need to get the Django static files

00:02:47,500 --> 00:02:52,240
feature working for Django after having

00:02:49,780 --> 00:02:54,880
done that you add the Django toolbar

00:02:52,240 --> 00:02:56,260
itself but this by yourself by listing

00:02:54,880 --> 00:02:58,270
adding it to the list of installed

00:02:56,260 --> 00:03:00,880
applications in Django settings module

00:02:58,270 --> 00:03:03,670
is any also need to ensure that Django

00:03:00,880 --> 00:03:05,230
is running in debug mode it is now just

00:03:03,670 --> 00:03:06,700
a simple matter of running the Django

00:03:05,230 --> 00:03:09,360
development server and you're all ready

00:03:06,700 --> 00:03:11,830
to go or at least you hope you are in

00:03:09,360 --> 00:03:13,300
the quick setup instructions for Django

00:03:11,830 --> 00:03:15,280
debug tool bar you will find this nice

00:03:13,300 --> 00:03:18,010
cheerier message warning you a possible

00:03:15,280 --> 00:03:19,690
impending doom so your luck may vary but

00:03:18,010 --> 00:03:21,730
this obviously raises the question of

00:03:19,690 --> 00:03:24,280
what is Django debug tool bar actually

00:03:21,730 --> 00:03:26,800
doing on startup that could cause such a

00:03:24,280 --> 00:03:29,170
mess including the possibility of

00:03:26,800 --> 00:03:31,830
circular imports and errors telling easy

00:03:29,170 --> 00:03:34,150
of configured things correct incorrectly

00:03:31,830 --> 00:03:36,190
the answer this lies in the note and

00:03:34,150 --> 00:03:38,410
documentation preceding this warning and

00:03:36,190 --> 00:03:40,360
that is that the Django debug tool bar

00:03:38,410 --> 00:03:43,420
is using an evil little hat to bootstrap

00:03:40,360 --> 00:03:45,400
itself specifically Django debug tool

00:03:43,420 --> 00:03:47,410
bar wants to monkey patch additional

00:03:45,400 --> 00:03:50,620
configuration into the Django settings

00:03:47,410 --> 00:03:52,870
module and URLs views to do this it is

00:03:50,620 --> 00:03:54,880
hijacking the validating of database

00:03:52,870 --> 00:03:56,920
models done when using the development

00:03:54,880 --> 00:04:00,640
server to run code which has nothing to

00:03:56,920 --> 00:04:02,440
do with the actual database now I have

00:04:00,640 --> 00:04:04,209
got wind of some changes in Django one

00:04:02,440 --> 00:04:06,040
dot seven related to application

00:04:04,209 --> 00:04:08,320
initialization so it's possible this may

00:04:06,040 --> 00:04:10,030
no longer apply but what do you do if

00:04:08,320 --> 00:04:13,030
the server does blow up on you because

00:04:10,030 --> 00:04:14,380
of this also since the evil workaround

00:04:13,030 --> 00:04:16,030
is depending on using the Django

00:04:14,380 --> 00:04:18,280
development server how can you use the

00:04:16,030 --> 00:04:22,840
Django debug tool bar with an alternate

00:04:18,280 --> 00:04:24,670
web service such as mod whiskey for this

00:04:22,840 --> 00:04:26,500
eventualities ango debug toolbar

00:04:24,670 --> 00:04:29,320
provides you of an additional explicit

00:04:26,500 --> 00:04:31,450
setup path the first step in that is

00:04:29,320 --> 00:04:32,139
that you need to tell it in the Django

00:04:31,450 --> 00:04:33,669
settings module

00:04:32,139 --> 00:04:37,060
to not actually do that evil monkey

00:04:33,669 --> 00:04:38,560
patching now we already added the Django

00:04:37,060 --> 00:04:40,150
debug tool bar to the list of installed

00:04:38,560 --> 00:04:42,069
applications this is still required

00:04:40,150 --> 00:04:44,199
otherwise Django will not know where to

00:04:42,069 --> 00:04:46,270
find the static file assets and template

00:04:44,199 --> 00:04:48,789
files the Django debug tool bar view

00:04:46,270 --> 00:04:50,560
handlers require leave it out and you'll

00:04:48,789 --> 00:04:52,749
immediately get a template does not

00:04:50,560 --> 00:04:56,469
exist exception from your web web

00:04:52,749 --> 00:04:58,779
application went accessed next we need

00:04:56,469 --> 00:05:01,779
to change the Django URLs configuration

00:04:58,779 --> 00:05:04,150
this is to insert special Django debug

00:05:01,779 --> 00:05:06,310
tool bar view handlers to process any

00:05:04,150 --> 00:05:08,680
requests which received under the dunder

00:05:06,310 --> 00:05:11,650
score debug sub URL of the Django

00:05:08,680 --> 00:05:13,000
application wisdom is that Django debug

00:05:11,650 --> 00:05:15,370
tool bar should never be used on a

00:05:13,000 --> 00:05:17,830
production system so this is gated by

00:05:15,370 --> 00:05:19,810
checking the Django debug flag this of

00:05:17,830 --> 00:05:21,879
course assumes you know why you should

00:05:19,810 --> 00:05:23,490
not be renewing Django in in production

00:05:21,879 --> 00:05:25,779
with the debug flag enabled and and

00:05:23,490 --> 00:05:30,729
Simon gave some nice warnings about that

00:05:25,779 --> 00:05:32,589
one yesterday or today so after adding

00:05:30,729 --> 00:05:34,379
in the URLs for the Django debug tool

00:05:32,589 --> 00:05:36,789
bar we need to add in a middleware class

00:05:34,379 --> 00:05:38,949
this is quite important part of the

00:05:36,789 --> 00:05:40,360
Django debug tool bar code and it's

00:05:38,949 --> 00:05:43,150
placement in the middle where classes

00:05:40,360 --> 00:05:44,830
this is also very important it must be

00:05:43,150 --> 00:05:47,139
placed as close to the start of the

00:05:44,830 --> 00:05:49,479
middleware class list as possible but

00:05:47,139 --> 00:05:53,729
after any middleware that encodes the

00:05:49,479 --> 00:05:55,779
response content such as gzip middleware

00:05:53,729 --> 00:05:57,789
finally although you should only be

00:05:55,779 --> 00:05:59,800
running the Django debug tool bar in a

00:05:57,789 --> 00:06:02,110
development environment you still need

00:05:59,800 --> 00:06:03,939
to protect you can access it the last

00:06:02,110 --> 00:06:05,649
thing you want is someone being able to

00:06:03,939 --> 00:06:07,839
access it over the conference network

00:06:05,649 --> 00:06:09,669
while watching my talk now the

00:06:07,839 --> 00:06:13,180
documentation does say that if you don't

00:06:09,669 --> 00:06:17,259
set this it will default to 127 001 and

00:06:13,180 --> 00:06:19,149
the IP 6 cold cold one on mac OS x at

00:06:17,259 --> 00:06:23,259
least I found that also sometimes need

00:06:19,149 --> 00:06:25,419
to add the f80 class of ipv6 dress to

00:06:23,259 --> 00:06:28,899
get it working I don't quite know why

00:06:25,419 --> 00:06:29,919
but that's what I found anyway I think I

00:06:28,899 --> 00:06:32,490
might be something to do when I'm

00:06:29,919 --> 00:06:34,839
running my VPN of course the problem

00:06:32,490 --> 00:06:37,479
back to the Django development server

00:06:34,839 --> 00:06:39,550
and and we should be all good again the

00:06:37,479 --> 00:06:42,219
evil heck of bootstrapping via Django

00:06:39,550 --> 00:06:43,810
Davis models verifications gone as

00:06:42,219 --> 00:06:45,850
should those risks warned

00:06:43,810 --> 00:06:49,990
out of module import cycles and strange

00:06:45,850 --> 00:06:51,610
exceptions what though if you want to

00:06:49,990 --> 00:06:54,400
use a real production braid whiskey

00:06:51,610 --> 00:06:56,320
service such as mod wsgi in this example

00:06:54,400 --> 00:06:58,870
I'm going to run through how to set this

00:06:56,320 --> 00:07:00,340
up using what wsgi Express and I know

00:06:58,870 --> 00:07:02,620
I've done this twice already in the last

00:07:00,340 --> 00:07:06,310
couple days at least its own way to make

00:07:02,620 --> 00:07:08,440
any mistakes because it's in slides so

00:07:06,310 --> 00:07:10,120
if using so the first thing we do that

00:07:08,440 --> 00:07:13,960
is we are going to run pip install mod

00:07:10,120 --> 00:07:15,250
wsgi this is alternate now that which

00:07:13,960 --> 00:07:16,660
you can do instead of the old paths

00:07:15,250 --> 00:07:19,630
which had to run configure and make

00:07:16,660 --> 00:07:21,430
separately now if you're using Mac OS

00:07:19,630 --> 00:07:23,530
that should install no problems if

00:07:21,430 --> 00:07:25,450
you're on Linux tanned you may first

00:07:23,530 --> 00:07:26,979
need to install the Apache development

00:07:25,450 --> 00:07:30,669
package for the specific variant of

00:07:26,979 --> 00:07:32,229
Linux you're running once installed we

00:07:30,669 --> 00:07:34,210
can now test that package was installed

00:07:32,229 --> 00:07:36,460
correctly and that Apache can start that

00:07:34,210 --> 00:07:38,470
patchy will start up properly for this

00:07:36,460 --> 00:07:39,700
we run the mud whiskey Express command

00:07:38,470 --> 00:07:41,470
and give it the starts of a command

00:07:39,700 --> 00:07:43,930
normally we would provide an additional

00:07:41,470 --> 00:07:45,639
argument of the whiskey script file to

00:07:43,930 --> 00:07:47,050
use but because we only want to do a

00:07:45,639 --> 00:07:48,910
test the installation this point we're

00:07:47,050 --> 00:07:50,440
just going to leave that off so in a

00:07:48,910 --> 00:07:52,150
separate window we can now open up the

00:07:50,440 --> 00:07:55,240
browser on the UL for the instance of

00:07:52,150 --> 00:07:56,440
Apache we just started and with that we

00:07:55,240 --> 00:07:58,120
now get this helped a little splash

00:07:56,440 --> 00:08:00,220
splash screen and you know it's all

00:07:58,120 --> 00:08:02,320
working fine now as I already mentioned

00:08:00,220 --> 00:08:03,789
to run it with an actual whiskey

00:08:02,320 --> 00:08:05,890
application at this point you can supply

00:08:03,789 --> 00:08:07,930
the path to the whiskey script file you

00:08:05,890 --> 00:08:09,850
can also use a minus minus help option

00:08:07,930 --> 00:08:11,410
to get information on all the command

00:08:09,850 --> 00:08:13,180
line options in case you want to change

00:08:11,410 --> 00:08:15,880
the list and poor specified directory

00:08:13,180 --> 00:08:17,710
full of static assets and so on you'll

00:08:15,880 --> 00:08:20,410
find documentation for it or on

00:08:17,710 --> 00:08:22,180
pipelayers the only place pi pi is the

00:08:20,410 --> 00:08:23,800
only place you'll find for mod wsgi

00:08:22,180 --> 00:08:28,180
expressed at this point so you can also

00:08:23,800 --> 00:08:30,430
look there now because we are using

00:08:28,180 --> 00:08:33,459
django though rather than pointing mod

00:08:30,430 --> 00:08:35,469
whiskey express direct at a wsgi script

00:08:33,459 --> 00:08:38,469
file is better to integrate it into mod

00:08:35,469 --> 00:08:40,870
wsgi of django itself that way women run

00:08:38,469 --> 00:08:42,669
mod wsgi express it will also know about

00:08:40,870 --> 00:08:45,310
the django specific requirements for

00:08:42,669 --> 00:08:47,170
static files what we therefore do is add

00:08:45,310 --> 00:08:48,790
mod whiskey server into the Django

00:08:47,170 --> 00:08:52,420
installed applications list as a jenga

00:08:48,790 --> 00:08:54,730
settings for Django does these days have

00:08:52,420 --> 00:08:56,470
the static files application how if

00:08:54,730 --> 00:08:56,950
using a whiskey server integrative of

00:08:56,470 --> 00:08:58,300
real

00:08:56,950 --> 00:09:00,460
service such as the case with mod

00:08:58,300 --> 00:09:02,650
whiskey is bit really much better to use

00:09:00,460 --> 00:09:06,040
that real web server we're there for

00:09:02,650 --> 00:09:08,200
setup a location for the static files to

00:09:06,040 --> 00:09:09,730
reside and run the Django collect static

00:09:08,200 --> 00:09:11,260
management command to collect together

00:09:09,730 --> 00:09:12,580
all those static files from the

00:09:11,260 --> 00:09:15,310
different installed applications

00:09:12,580 --> 00:09:20,200
including Django debug tool bar and

00:09:15,310 --> 00:09:22,600
we'll get that whatever you do they do

00:09:20,200 --> 00:09:24,730
not remove Django contrib static files

00:09:22,600 --> 00:09:27,850
from installed apps this is because the

00:09:24,730 --> 00:09:29,740
Django debug tool bar code doesn't want

00:09:27,850 --> 00:09:32,140
to trust and I know what I'm doing and

00:09:29,740 --> 00:09:33,730
of course everything to fail if it does

00:09:32,140 --> 00:09:35,620
think doesn't think that the static

00:09:33,730 --> 00:09:37,900
files will actually be served by jingo

00:09:35,620 --> 00:09:41,380
contrib static files I can't say like

00:09:37,900 --> 00:09:43,120
that now finally here's cool part to

00:09:41,380 --> 00:09:44,980
actually run mod whiskey with Django we

00:09:43,120 --> 00:09:46,630
simply run the run mod whiskey

00:09:44,980 --> 00:09:48,040
management command this will

00:09:46,630 --> 00:09:50,230
automatically generate an Apache

00:09:48,040 --> 00:09:52,300
configuration for you for this instance

00:09:50,230 --> 00:09:54,490
this will include mounting the Django

00:09:52,300 --> 00:09:56,530
application setting up static files and

00:09:54,490 --> 00:09:58,420
so on because we're in development

00:09:56,530 --> 00:10:00,220
environment here we can even enable

00:09:58,420 --> 00:10:02,200
automatic code relating for good measure

00:10:00,220 --> 00:10:04,330
and mod whiskey Express will worry about

00:10:02,200 --> 00:10:08,140
all those details all the Apache

00:10:04,330 --> 00:10:10,330
configuration for you the applicant

00:10:08,140 --> 00:10:12,670
voting the run mod whiskey command will

00:10:10,330 --> 00:10:14,080
give the URL to then access the site as

00:10:12,670 --> 00:10:16,240
well as the location of the Apache

00:10:14,080 --> 00:10:17,830
configuration which was generated in

00:10:16,240 --> 00:10:19,300
case you want to poke around and learn

00:10:17,830 --> 00:10:21,580
from what I'm doing there was this

00:10:19,300 --> 00:10:23,380
automatically generated configuration it

00:10:21,580 --> 00:10:25,510
also gives you the Apache error log in

00:10:23,380 --> 00:10:26,950
case anything goes wrong when using your

00:10:25,510 --> 00:10:30,490
application you need to track down the

00:10:26,950 --> 00:10:31,750
details of any exceptions log their most

00:10:30,490 --> 00:10:34,870
important for what this talk is about

00:10:31,750 --> 00:10:36,730
the django team django debug tool bar

00:10:34,870 --> 00:10:38,920
will also now work because we followed

00:10:36,730 --> 00:10:40,810
those explicit configuration steps that

00:10:38,920 --> 00:10:43,540
for django debug to where we went

00:10:40,810 --> 00:10:45,460
through so what we learn from the

00:10:43,540 --> 00:10:47,500
explicit configuration steps required is

00:10:45,460 --> 00:10:49,270
that django debug tool bar is dependent

00:10:47,500 --> 00:10:52,330
on a number of key things in order to

00:10:49,270 --> 00:10:54,370
work these are a series of view hand

00:10:52,330 --> 00:10:57,520
this these are a bunch of static file

00:10:54,370 --> 00:10:59,950
assets CS HTML CSS javascript and images

00:10:57,520 --> 00:11:01,990
it registers a series of view handlers

00:10:59,950 --> 00:11:04,390
which are used to produce data for each

00:11:01,990 --> 00:11:06,580
tool bar panel which in turn potentially

00:11:04,390 --> 00:11:09,040
require page templates to render

00:11:06,580 --> 00:11:10,279
response final it requires a jangle

00:11:09,040 --> 00:11:14,449
middleware to be installed

00:11:10,279 --> 00:11:16,759
is this lasting the Django middleware

00:11:14,449 --> 00:11:18,800
which is the key to the Django debug

00:11:16,759 --> 00:11:20,089
tool by working it is the middle way

00:11:18,800 --> 00:11:21,949
which allows it to hook into the

00:11:20,089 --> 00:11:25,430
different phases of handling or requests

00:11:21,949 --> 00:11:27,110
in Django for the Django debug tool bar

00:11:25,430 --> 00:11:29,720
it hooks into the process request

00:11:27,110 --> 00:11:32,209
process view and process response phases

00:11:29,720 --> 00:11:33,980
for Django request handling this allows

00:11:32,209 --> 00:11:36,439
it to perform actions at the start of

00:11:33,980 --> 00:11:38,389
the request prior to the target view

00:11:36,439 --> 00:11:41,120
handler being invoked to handle requests

00:11:38,389 --> 00:11:43,339
and finally allows it to perform actions

00:11:41,120 --> 00:11:45,259
at the end of the request as well as

00:11:43,339 --> 00:11:47,870
actually manipulate the response return

00:11:45,259 --> 00:11:49,879
for a request note that this is for any

00:11:47,870 --> 00:11:51,800
requests not just the requests made

00:11:49,879 --> 00:11:55,129
against the Django debug toolbars own

00:11:51,800 --> 00:11:56,569
view handlers the part which is

00:11:55,129 --> 00:11:57,949
initially of most interest in the

00:11:56,569 --> 00:12:00,769
middleware occurs in the process

00:11:57,949 --> 00:12:03,050
response face it is in this phase where

00:12:00,769 --> 00:12:05,620
the toolbar itself is injected into the

00:12:03,050 --> 00:12:07,819
response that comes back for a request

00:12:05,620 --> 00:12:09,740
before that can be done though is

00:12:07,819 --> 00:12:12,319
necessary to first determine whether the

00:12:09,740 --> 00:12:14,600
pages in fact HTML and that it makes

00:12:12,319 --> 00:12:16,939
sense to actually insert anything there

00:12:14,600 --> 00:12:20,000
is no point trying to insert the toolbar

00:12:16,939 --> 00:12:22,160
into images or plain text file we also

00:12:20,000 --> 00:12:27,800
want to avoid compressed data or strange

00:12:22,160 --> 00:12:29,649
responses if it is ok to be modifying

00:12:27,800 --> 00:12:31,970
the response then the rendered HTML

00:12:29,649 --> 00:12:33,860
corresponding to the toolbar itself will

00:12:31,970 --> 00:12:38,420
be injected into the original HTML

00:12:33,860 --> 00:12:40,819
response for the request this injection

00:12:38,420 --> 00:12:43,639
of the toolbar HTML is done just prior

00:12:40,819 --> 00:12:45,769
to the existing closing body tag the

00:12:43,639 --> 00:12:47,899
combination of the HTML as well as the

00:12:45,769 --> 00:12:50,990
style sheets and Java code which in turn

00:12:47,899 --> 00:12:52,519
which it in turn loads when rendered in

00:12:50,990 --> 00:12:54,379
the browser results in the sidebar

00:12:52,519 --> 00:12:57,589
appearing alongside the content to the

00:12:54,379 --> 00:12:59,329
original request as shown before the

00:12:57,589 --> 00:13:00,800
sidebar under the time category will

00:12:59,329 --> 00:13:02,870
show how long the request took to be

00:13:00,800 --> 00:13:05,389
handled or at least up until the time

00:13:02,870 --> 00:13:07,910
that the toolbar HTML was inserted into

00:13:05,389 --> 00:13:10,339
the response when we click on the time

00:13:07,910 --> 00:13:12,019
category in the sidebar though only then

00:13:10,339 --> 00:13:14,300
will the debug tool bar panel be

00:13:12,019 --> 00:13:16,329
displayed with more detailed timing

00:13:14,300 --> 00:13:19,100
information related to the request

00:13:16,329 --> 00:13:21,259
although the sidebar itself came back

00:13:19,100 --> 00:13:22,759
with the original request the panel

00:13:21,259 --> 00:13:24,140
displayed as a result of the separate

00:13:22,759 --> 00:13:25,610
Ajax request

00:13:24,140 --> 00:13:29,270
made as a result of clicking in that

00:13:25,610 --> 00:13:30,470
category in the toolbar given it is a

00:13:29,270 --> 00:13:32,360
separate requests to get the additional

00:13:30,470 --> 00:13:34,580
data whereas the data stored and how is

00:13:32,360 --> 00:13:36,350
it identified the answer is that any

00:13:34,580 --> 00:13:38,780
data generated from request is saved

00:13:36,350 --> 00:13:40,490
away at the time of the request in the

00:13:38,780 --> 00:13:43,640
toolbar HTML that comes back with a

00:13:40,490 --> 00:13:45,590
response it has a storage ID field which

00:13:43,640 --> 00:13:48,050
identifies the item in the case for the

00:13:45,590 --> 00:13:49,940
original request when drilling down a

00:13:48,050 --> 00:13:52,010
request is made with that storage ID

00:13:49,940 --> 00:13:53,870
along with the idea of the panel

00:13:52,010 --> 00:13:56,120
corresponding to the category selected

00:13:53,870 --> 00:13:59,810
on the sidebar which should then display

00:13:56,120 --> 00:14:01,250
the data from the original request now

00:13:59,810 --> 00:14:03,290
we can't say the way the full details

00:14:01,250 --> 00:14:04,730
and every request made so any data

00:14:03,290 --> 00:14:06,950
stored in the case must have a finite

00:14:04,730 --> 00:14:08,570
lifetime by default the number of

00:14:06,950 --> 00:14:10,490
requests for which data is retained as

00:14:08,570 --> 00:14:12,620
10 this is actually quite a big

00:14:10,490 --> 00:14:14,750
limitation as what it means the debug

00:14:12,620 --> 00:14:16,880
tool bar is not very useful when trying

00:14:14,750 --> 00:14:18,410
to use on an application which is any

00:14:16,880 --> 00:14:20,660
traffic beyond that which you are

00:14:18,410 --> 00:14:22,850
manually creating with your browser this

00:14:20,660 --> 00:14:24,140
is because any data on the request you

00:14:22,850 --> 00:14:27,200
interested in would have been thrown

00:14:24,140 --> 00:14:28,880
away by the time you drill down to it as

00:14:27,200 --> 00:14:30,680
well as potentially losing data if there

00:14:28,880 --> 00:14:32,870
are other users can currently using the

00:14:30,680 --> 00:14:34,490
same web application the data can be

00:14:32,870 --> 00:14:36,260
purged if you are working on a page

00:14:34,490 --> 00:14:38,390
which is a heavy JavaScript component

00:14:36,260 --> 00:14:41,080
which makes additional Ajax requests

00:14:38,390 --> 00:14:44,720
after the initial page response has been

00:14:41,080 --> 00:14:47,000
returned these Ajax requests are also a

00:14:44,720 --> 00:14:49,070
problem in themselves this is because

00:14:47,000 --> 00:14:51,080
the Django debug tool bar only provides

00:14:49,070 --> 00:14:53,930
you the ability to debug the primary

00:14:51,080 --> 00:14:56,270
HTML request there is no ability to get

00:14:53,930 --> 00:14:59,630
details on any of those subsequent Ajax

00:14:56,270 --> 00:15:02,090
requests made from that page the

00:14:59,630 --> 00:15:03,620
limitation on AJAX request is that the

00:15:02,090 --> 00:15:05,690
toolbar is displayed in line with a

00:15:03,620 --> 00:15:07,130
current request only to better

00:15:05,690 --> 00:15:08,840
understand what I mean by this it

00:15:07,130 --> 00:15:10,790
actually helps to look at how the debug

00:15:08,840 --> 00:15:13,520
tool bar for pyramid web framework works

00:15:10,790 --> 00:15:15,710
in comparison to that of Django in the

00:15:13,520 --> 00:15:18,170
pyramid debug tool bar you do not get a

00:15:15,710 --> 00:15:20,510
sidebar for the current request instead

00:15:18,170 --> 00:15:23,510
you only get an icon indicating that the

00:15:20,510 --> 00:15:25,670
debug tool bar is operating when that

00:15:23,510 --> 00:15:29,480
icon is clicked on it then goes off to a

00:15:25,670 --> 00:15:31,610
completely separate window so what the

00:15:29,480 --> 00:15:33,410
pyramid debug tool bag does is not show

00:15:31,610 --> 00:15:36,290
any details in line to the current

00:15:33,410 --> 00:15:37,910
request instead you always access

00:15:36,290 --> 00:15:39,980
details a request from a separate

00:15:37,910 --> 00:15:42,440
window which shows a list of the last 20

00:15:39,980 --> 00:15:44,930
requests when clicking on the inline

00:15:42,440 --> 00:15:46,760
icon within the initial page response it

00:15:44,930 --> 00:15:48,590
will push you across to the details of

00:15:46,760 --> 00:15:51,200
that specific request in the separate

00:15:48,590 --> 00:15:53,840
window important is that since you now

00:15:51,200 --> 00:15:56,360
see all recent requests you can also see

00:15:53,840 --> 00:15:58,130
any separate Ajax requests or requests

00:15:56,360 --> 00:16:01,880
served by the web application for other

00:15:58,130 --> 00:16:03,350
assets associated with the page so

00:16:01,880 --> 00:16:04,970
having jumped to look at pyramid let's

00:16:03,350 --> 00:16:07,790
look at the history of debug tool bars

00:16:04,970 --> 00:16:09,500
for Python as already said as far as I

00:16:07,790 --> 00:16:12,200
know it started out with a Django debug

00:16:09,500 --> 00:16:14,050
tool bar this was summarily copied in

00:16:12,200 --> 00:16:17,090
creating the flask debug tool bar and

00:16:14,050 --> 00:16:19,250
from the flask debug tool bar we then

00:16:17,090 --> 00:16:22,910
had separate implementations occur for

00:16:19,250 --> 00:16:24,770
bottle web pie and pyramid as far as I

00:16:22,910 --> 00:16:27,080
know with the exception of pyramid they

00:16:24,770 --> 00:16:30,080
all simply copied the inline style to

00:16:27,080 --> 00:16:31,640
django debug tool as only pyramid

00:16:30,080 --> 00:16:35,210
branched out and tried to address the

00:16:31,640 --> 00:16:36,440
tracking of ajax requests the pyramid

00:16:35,210 --> 00:16:38,630
debug tool by was therefore an

00:16:36,440 --> 00:16:41,270
improvement but in my mind they all have

00:16:38,630 --> 00:16:43,820
one big failing that is that they all

00:16:41,270 --> 00:16:46,070
they are all distinct implementations

00:16:43,820 --> 00:16:48,350
that is Django implantation is

00:16:46,070 --> 00:16:50,330
intrinsically went to django middleware

00:16:48,350 --> 00:16:52,010
infrastructure with implementations of

00:16:50,330 --> 00:16:54,470
panels implemented as Django view

00:16:52,010 --> 00:16:56,570
heather's using Django templates flask

00:16:54,470 --> 00:16:58,790
uses its own middleware and ginger 2 and

00:16:56,570 --> 00:17:01,910
so on for the others with each Porter to

00:16:58,790 --> 00:17:03,440
their specific way of doing things the

00:17:01,910 --> 00:17:05,420
opportunity missed here as far as I'm

00:17:03,440 --> 00:17:07,220
concerned is that there these are all

00:17:05,420 --> 00:17:08,750
these different web frameworks that

00:17:07,220 --> 00:17:11,150
their lowest levels implement the

00:17:08,750 --> 00:17:12,770
whiskey specification yes the debug

00:17:11,150 --> 00:17:14,810
toolbars do offer some panels which a

00:17:12,770 --> 00:17:16,550
framework specific but the core

00:17:14,810 --> 00:17:18,130
functionality they implement can be

00:17:16,550 --> 00:17:21,380
implemented as a whiskey middle where

00:17:18,130 --> 00:17:23,330
there are therefore being therefore be

00:17:21,380 --> 00:17:25,430
quite a lot of effort wasted to creating

00:17:23,330 --> 00:17:26,810
these separate implementations whereas

00:17:25,430 --> 00:17:28,400
it's done at the whiskey level there

00:17:26,810 --> 00:17:31,460
could be one debug talk about to rule

00:17:28,400 --> 00:17:33,110
them all so imagine it for a moment one

00:17:31,460 --> 00:17:35,270
debug tool bar that was best-of-breed

00:17:33,110 --> 00:17:36,770
when someone enhanced it due to what

00:17:35,270 --> 00:17:39,170
they found when using a specific way of

00:17:36,770 --> 00:17:40,940
framing all other web frameworks could

00:17:39,170 --> 00:17:43,130
benefit as well now wouldn't that be

00:17:40,940 --> 00:17:44,570
wonderful unfortunately python web

00:17:43,130 --> 00:17:46,580
communities have a tendency not to

00:17:44,570 --> 00:17:48,890
cooperate with each other they all fit

00:17:46,580 --> 00:17:50,600
the way that they do things is the best

00:17:48,890 --> 00:17:51,260
and only way and they won't talk to each

00:17:50,600 --> 00:17:53,840
other

00:17:51,260 --> 00:17:55,799
so since I thing is such a great idea

00:17:53,840 --> 00:17:57,899
let's have a look at implementing the

00:17:55,799 --> 00:17:59,340
basic mechanism of debug tool bar code

00:17:57,899 --> 00:18:01,289
at the whiskey level using a whiskey

00:17:59,340 --> 00:18:02,970
middleware in particular let's look at

00:18:01,289 --> 00:18:04,679
how we can manage to inject the toolbar

00:18:02,970 --> 00:18:06,809
HTML code in the response for a request

00:18:04,679 --> 00:18:08,429
if we work out how to do that then when

00:18:06,809 --> 00:18:11,669
well on our way is coming up a whiskey

00:18:08,429 --> 00:18:12,779
level implementation of all this this is

00:18:11,669 --> 00:18:14,279
where we can learn from the Django

00:18:12,779 --> 00:18:15,690
middleware code I showed earlier and now

00:18:14,279 --> 00:18:18,240
may not be obvious but there's a couple

00:18:15,690 --> 00:18:19,919
of key things going on here the first is

00:18:18,240 --> 00:18:21,779
that the HTML code is being inserted

00:18:19,919 --> 00:18:23,700
just prior to the closing body tag and

00:18:21,779 --> 00:18:25,890
the second is the content length for the

00:18:23,700 --> 00:18:27,779
response is being updated in other words

00:18:25,890 --> 00:18:31,020
we eventually need to operate on the

00:18:27,779 --> 00:18:32,520
complete response in one go this

00:18:31,020 --> 00:18:34,710
presents us with a bit of a problem and

00:18:32,520 --> 00:18:36,480
that is it in whiskey application the

00:18:34,710 --> 00:18:38,520
whisk the response doesn't need to come

00:18:36,480 --> 00:18:40,590
back as one byte string but a sequence

00:18:38,520 --> 00:18:42,539
of bytes drinks as far as inserting

00:18:40,590 --> 00:18:43,770
something at the end of the body we

00:18:42,539 --> 00:18:45,899
could just look at each separate

00:18:43,770 --> 00:18:47,789
bytestring until we find that closing

00:18:45,899 --> 00:18:49,529
body tag and then insert it but the

00:18:47,789 --> 00:18:51,450
issue is that we also need to update the

00:18:49,529 --> 00:18:54,419
content links and if we can't know the

00:18:51,450 --> 00:18:56,039
length of what is being inserted until

00:18:54,419 --> 00:18:58,080
it is inserted we can't adjust the

00:18:56,039 --> 00:18:59,730
content links at that point at the point

00:18:58,080 --> 00:19:02,580
that the head is a percent and still

00:18:59,730 --> 00:19:04,140
stream the response now we could buffer

00:19:02,580 --> 00:19:05,520
all the response content in the middle

00:19:04,140 --> 00:19:07,830
with and then operate on the complete

00:19:05,520 --> 00:19:09,270
response contents and then send it on

00:19:07,830 --> 00:19:10,799
after adjusting the content link

00:19:09,270 --> 00:19:13,110
technically though you're not meant to

00:19:10,799 --> 00:19:14,490
do this in whiskey middle with plus it

00:19:13,110 --> 00:19:16,260
would cause applications which slowly

00:19:14,490 --> 00:19:17,640
stream data over time to break as

00:19:16,260 --> 00:19:19,980
nothing would be set until all the

00:19:17,640 --> 00:19:21,600
content was generated the actual size of

00:19:19,980 --> 00:19:23,399
the response content could also be a

00:19:21,600 --> 00:19:24,960
problem if for example one was trimming

00:19:23,399 --> 00:19:28,200
a very large file that you couldn't fit

00:19:24,960 --> 00:19:29,820
in memory if having to insert at the end

00:19:28,200 --> 00:19:31,649
of party is such a problem why are we

00:19:29,820 --> 00:19:33,179
inserting at that point anyway the

00:19:31,649 --> 00:19:35,039
reason is that part of what is being

00:19:33,179 --> 00:19:36,779
asserted consists of JavaScript code and

00:19:35,039 --> 00:19:38,700
the wisdom is that this should always be

00:19:36,779 --> 00:19:41,039
inserted at the ended body so as not to

00:19:38,700 --> 00:19:43,110
delay page loading by doing it earlier

00:19:41,039 --> 00:19:45,029
in the page that may well have been the

00:19:43,110 --> 00:19:46,350
case once upon a time but are they now

00:19:45,029 --> 00:19:48,990
better ways of doing it which would

00:19:46,350 --> 00:19:52,380
allow us to insert instead earlier in

00:19:48,990 --> 00:19:54,539
the response with modern browsers we can

00:19:52,380 --> 00:19:55,950
use today rather what we can do is

00:19:54,539 --> 00:19:57,270
rather than needing to defer things to

00:19:55,950 --> 00:19:58,500
the end of the body we can instead know

00:19:57,270 --> 00:20:00,960
that javascript from the head earlier

00:19:58,500 --> 00:20:02,880
one of the page marking that it would

00:20:00,960 --> 00:20:05,130
should be loaded asynchronously rather

00:20:02,880 --> 00:20:06,810
than in line to the request by being a

00:20:05,130 --> 00:20:09,390
synchronous we do not delay the loading

00:20:06,810 --> 00:20:11,010
of the remainder of the page when the

00:20:09,390 --> 00:20:12,450
javascript is loaded we then need to

00:20:11,010 --> 00:20:14,490
trigger an action to go back and modify

00:20:12,450 --> 00:20:16,140
the Dom for the loaded page to insert

00:20:14,490 --> 00:20:18,300
what we wanted there in the first place

00:20:16,140 --> 00:20:20,520
at the end of the body we have to be

00:20:18,300 --> 00:20:22,230
careful in doing this so as we likely

00:20:20,520 --> 00:20:24,360
need to ensure the page has actually

00:20:22,230 --> 00:20:25,830
been completely alerted what we can do

00:20:24,360 --> 00:20:27,720
therefore is trigger any action to

00:20:25,830 --> 00:20:30,060
modify the Dom off the document being

00:20:27,720 --> 00:20:33,360
ready in the JavaScript code we're

00:20:30,060 --> 00:20:34,500
loading how does this help though the

00:20:33,360 --> 00:20:36,150
reason is that we no longer have to

00:20:34,500 --> 00:20:37,860
buffer up the complete response in order

00:20:36,150 --> 00:20:40,020
to be able to insert into the end of the

00:20:37,860 --> 00:20:41,970
body at worse we have to buffer up to

00:20:40,020 --> 00:20:43,560
the start of the body but the amount we

00:20:41,970 --> 00:20:44,790
have to buffer is a lot less and so it

00:20:43,560 --> 00:20:47,280
doesn't present an issue of memory

00:20:44,790 --> 00:20:48,630
there's also highly unlikely even with a

00:20:47,280 --> 00:20:51,090
string response if the head element

00:20:48,630 --> 00:20:52,770
would be sent slowly in parts instead

00:20:51,090 --> 00:20:55,260
any head would be sent in one go up

00:20:52,770 --> 00:20:58,530
front and we would only wear to be the

00:20:55,260 --> 00:20:59,850
body which is set out slowly so we can

00:20:58,530 --> 00:21:01,710
handle insertion what about the UI

00:20:59,850 --> 00:21:03,870
itself the problem with existing

00:21:01,710 --> 00:21:06,270
toolbars is the UI is intrinsically tied

00:21:03,870 --> 00:21:09,300
to the euro routing request handler and

00:21:06,270 --> 00:21:11,220
page template systems of those specific

00:21:09,300 --> 00:21:14,340
frameworks my suggested solution for

00:21:11,220 --> 00:21:16,170
this is only to have a rest api served

00:21:14,340 --> 00:21:18,060
up by the whiskey middleware for

00:21:16,170 --> 00:21:20,130
accessing any data stored about requests

00:21:18,060 --> 00:21:22,530
the you i would then be a JavaScript

00:21:20,130 --> 00:21:23,970
interface rendered in the client by

00:21:22,530 --> 00:21:25,800
using a REST API and the whiskey

00:21:23,970 --> 00:21:27,270
middleware to get access to data we then

00:21:25,800 --> 00:21:30,570
separated from the specifics of a

00:21:27,270 --> 00:21:31,770
particular web framework so your fortin

00:21:30,570 --> 00:21:33,450
coming to this talk that you would learn

00:21:31,770 --> 00:21:35,790
about how they debug tools work

00:21:33,450 --> 00:21:37,230
hopefully in part you have but what I

00:21:35,790 --> 00:21:38,700
really wonder pitch was the idea that

00:21:37,230 --> 00:21:40,770
our current debug tool bar

00:21:38,700 --> 00:21:42,510
implementations could do a big overhaul

00:21:40,770 --> 00:21:44,220
in particular there is a great

00:21:42,510 --> 00:21:45,990
opportunity to come up with a debug tool

00:21:44,220 --> 00:21:47,940
back package which would work with any

00:21:45,990 --> 00:21:49,860
whiskey framework so I think we can

00:21:47,940 --> 00:21:51,750
build a better ecosystem and make our

00:21:49,860 --> 00:21:54,540
job of debugging Python replications a

00:21:51,750 --> 00:21:56,040
lot easier so one thing I personally

00:21:54,540 --> 00:21:57,450
like to do is integrate into the debug

00:21:56,040 --> 00:21:59,010
tool bar features to allow to view

00:21:57,450 --> 00:22:01,410
additional performance monitoring data

00:21:59,010 --> 00:22:04,260
as an example and I've tried to show

00:22:01,410 --> 00:22:06,840
this yesterday I ever made X traditional

00:22:04,260 --> 00:22:08,190
monitoring from the mod whiskey and but

00:22:06,840 --> 00:22:10,680
this was dependent on the new relic

00:22:08,190 --> 00:22:12,180
platform plug-in system now all that is

00:22:10,680 --> 00:22:14,400
free although there's free to use when I

00:22:12,180 --> 00:22:16,440
now stood on the mod WSU mailings I got

00:22:14,400 --> 00:22:17,940
0 people interested and I know because I

00:22:16,440 --> 00:22:20,830
get statistics from when it's you

00:22:17,940 --> 00:22:22,900
so people object to it not being able to

00:22:20,830 --> 00:22:24,700
self host these sorts of things what I

00:22:22,900 --> 00:22:27,070
don't want to have to do though if I'm

00:22:24,700 --> 00:22:29,530
going to provide us a UI is to provide a

00:22:27,070 --> 00:22:30,970
different UI for every different debug

00:22:29,530 --> 00:22:34,300
tool bar out there if I'm going to go

00:22:30,970 --> 00:22:35,950
that path now I've also been working on

00:22:34,300 --> 00:22:38,170
a side project related to the new Elliot

00:22:35,950 --> 00:22:40,330
Python agent which I work on is my day

00:22:38,170 --> 00:22:41,830
job a new relic is a wonderful tool for

00:22:40,330 --> 00:22:43,560
web application performance monitoring

00:22:41,830 --> 00:22:46,150
and you should really all be using it

00:22:43,560 --> 00:22:48,820
what I would like to do is bring some

00:22:46,150 --> 00:22:50,980
aspects of what we do in that Python

00:22:48,820 --> 00:22:53,530
agent into a what a call local developer

00:22:50,980 --> 00:22:56,050
mode integrated into a debug to lower

00:22:53,530 --> 00:22:58,090
environment so the society is that we

00:22:56,050 --> 00:22:59,890
wouldn't actually need to contact back

00:22:58,090 --> 00:23:01,420
to New Relic so it's just going to keep

00:22:59,890 --> 00:23:04,960
some data locally and give you some of

00:23:01,420 --> 00:23:06,640
what we were able to track so basically

00:23:04,960 --> 00:23:08,590
we have a production capable way of

00:23:06,640 --> 00:23:09,880
monitoring data here so let's make it so

00:23:08,590 --> 00:23:12,850
you can use it in development vironment

00:23:09,880 --> 00:23:14,830
as well so in considering this ideas oh

00:23:12,850 --> 00:23:17,200
that's actually a bit of a twist and the

00:23:14,830 --> 00:23:19,120
problem how to insert insert HTML into

00:23:17,200 --> 00:23:20,710
responses as I've described there's

00:23:19,120 --> 00:23:23,260
something that we've already solved in

00:23:20,710 --> 00:23:25,810
our Python agent because we need to use

00:23:23,260 --> 00:23:28,300
that exact same technique for injecting

00:23:25,810 --> 00:23:30,460
JavaScript into pages in order to do

00:23:28,300 --> 00:23:31,780
end-user monitoring which is monitoring

00:23:30,460 --> 00:23:34,390
it from this protective of the user's

00:23:31,780 --> 00:23:36,670
browser so the fort is why not try and

00:23:34,390 --> 00:23:39,250
based a debug tool bar on what we've

00:23:36,670 --> 00:23:41,650
managed to do the insertion of HTML in

00:23:39,250 --> 00:23:43,480
our own agent we could even have a

00:23:41,650 --> 00:23:45,250
variant of the debug tool bar which you

00:23:43,480 --> 00:23:46,690
could use when using new relic and

00:23:45,250 --> 00:23:47,920
production so it's a bit of both force

00:23:46,690 --> 00:23:49,720
you get it in your production you can

00:23:47,920 --> 00:23:51,640
also get it in development as well now

00:23:49,720 --> 00:23:53,230
there are no doubt other third-party

00:23:51,640 --> 00:23:56,130
tools which can brought under the same

00:23:53,230 --> 00:24:00,160
umbrella and Simon yesterday and today

00:23:56,130 --> 00:24:02,050
has demonstrated the what eventbrite has

00:24:00,160 --> 00:24:04,000
been doing with tiki bar this actually

00:24:02,050 --> 00:24:05,470
embodies many of the same qualities I

00:24:04,000 --> 00:24:08,230
want to achieve in pursuing this whole

00:24:05,470 --> 00:24:10,300
idea this includes the idea I have that

00:24:08,230 --> 00:24:12,010
one could come up with a limited toolbar

00:24:10,300 --> 00:24:13,900
which works for production systems as

00:24:12,010 --> 00:24:16,270
well as something you can use in

00:24:13,900 --> 00:24:19,690
development tiki bar is though again

00:24:16,270 --> 00:24:21,880
bound specifically to django and also at

00:24:19,690 --> 00:24:23,590
the moment event for its own application

00:24:21,880 --> 00:24:27,010
infrastructure and that is exactly what

00:24:23,590 --> 00:24:28,000
I don't want to see so I don't know if

00:24:27,010 --> 00:24:30,050
I'll be allowed to make it available

00:24:28,000 --> 00:24:32,270
because obviously we are trying to build

00:24:30,050 --> 00:24:33,590
product where I work as well and they

00:24:32,270 --> 00:24:35,480
might say no you can't do that because

00:24:33,590 --> 00:24:36,710
you're giving stuff away but what I

00:24:35,480 --> 00:24:38,780
really want to do is build it on this

00:24:36,710 --> 00:24:40,490
idea of a local developer mood for New

00:24:38,780 --> 00:24:42,440
Relic spy for nation it would give you

00:24:40,490 --> 00:24:44,420
the subset of its functionality for use

00:24:42,440 --> 00:24:46,190
in development environment using our

00:24:44,420 --> 00:24:48,290
mechanism for HTML injection to

00:24:46,190 --> 00:24:50,480
implement that debug tool night toolbar

00:24:48,290 --> 00:24:52,220
mechanism panels for this debug tool

00:24:50,480 --> 00:24:53,960
boxes could then be used to access the

00:24:52,220 --> 00:24:56,030
new relics own data as well as any other

00:24:53,960 --> 00:24:58,730
data debug toolbars present which a

00:24:56,030 --> 00:25:00,410
framework specific on top of that i want

00:24:58,730 --> 00:25:01,640
that mini toolbar which we deliver up

00:25:00,410 --> 00:25:04,400
safe information in a production

00:25:01,640 --> 00:25:06,470
environment as well so my reasons for

00:25:04,400 --> 00:25:08,120
doing this is all because i hate to see

00:25:06,470 --> 00:25:09,500
all that wasted effort being done by

00:25:08,120 --> 00:25:12,350
different developers to each different

00:25:09,500 --> 00:25:13,940
web framework or in-house systems this

00:25:12,350 --> 00:25:16,400
doesn't make a great deal of sense to me

00:25:13,940 --> 00:25:17,690
so all very altruistic but I will have

00:25:16,400 --> 00:25:19,970
to admit that there is to be a selfish

00:25:17,690 --> 00:25:21,590
aspect of this as well and that is I do

00:25:19,970 --> 00:25:24,440
think that what we do it in yer alec is

00:25:21,590 --> 00:25:25,880
awesome and the debug toolbar provides a

00:25:24,440 --> 00:25:28,130
way of putting your relic in front of

00:25:25,880 --> 00:25:30,170
all you people in a local environment to

00:25:28,130 --> 00:25:31,910
get an idea what it is we do so you

00:25:30,170 --> 00:25:34,940
might actually consider us for using a

00:25:31,910 --> 00:25:36,170
new production system as well so

00:25:34,940 --> 00:25:37,700
certainly I would love it if you go and

00:25:36,170 --> 00:25:40,160
try new relic but if you are aren't

00:25:37,700 --> 00:25:42,050
interested in that at least if you but

00:25:40,160 --> 00:25:43,730
if you are interested in improving on

00:25:42,050 --> 00:25:45,290
the existing web application debug tool

00:25:43,730 --> 00:25:46,580
wealth and do get in touch and meet with

00:25:45,290 --> 00:25:49,240
your own thoughts ideas and features

00:25:46,580 --> 00:25:49,240
thank you

00:25:52,080 --> 00:25:54,140
you

00:26:05,389 --> 00:26:07,450

YouTube URL: https://www.youtube.com/watch?v=Yk5EE0Us0DE


