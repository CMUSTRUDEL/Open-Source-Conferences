Title: Building Better Web APIs by HawkOwl
Publication date: 2014-08-11
Playlist: PyCon Australia 2014
Description: 
	Web APIs are how much of the modern web speaks - services speaking HTTP and JSON are ubiquitous, and nearly everything from your phone to your TV interacts with one of them. We'll go over how APIs are structured and versioned, why you should validate your data, and why you should have them in the first place -- and what other best practices are when creating them.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:05,140 --> 00:00:12,049
our next talk is building better web

00:00:08,299 --> 00:00:13,759
api's by hawk owl hawk owl is best known

00:00:12,049 --> 00:00:16,160
for releasing the past two versions of

00:00:13,759 --> 00:00:18,020
twisted writing random software and

00:00:16,160 --> 00:00:20,390
living in the absolute middle of nowhere

00:00:18,020 --> 00:00:22,910
for most of their lives their goal is to

00:00:20,390 --> 00:00:24,500
make developers lives easier and by

00:00:22,910 --> 00:00:28,239
extension help them create better

00:00:24,500 --> 00:00:28,239
products ladies and gentlemen walk out

00:00:30,849 --> 00:00:36,320
however illness is quite a crowd um

00:00:33,290 --> 00:00:40,989
hello I'm I'm hawk owl this is my email

00:00:36,320 --> 00:00:43,820
and my twitter if you want to yell at me

00:00:40,989 --> 00:00:46,999
my day job is working on retail software

00:00:43,820 --> 00:00:50,719
at a small company called Sonic you I do

00:00:46,999 --> 00:00:52,909
Django stuff there in my free time I am

00:00:50,719 --> 00:00:54,679
a twisted core developer and release

00:00:52,909 --> 00:00:57,859
manager so far I've released two

00:00:54,679 --> 00:00:59,359
versions 13.2 and 14 bucks zero and when

00:00:57,859 --> 00:01:01,519
i first started sonic you i was writing

00:00:59,359 --> 00:01:04,100
Django like twisted which there were

00:01:01,519 --> 00:01:07,130
four patches to remove the camel case so

00:01:04,100 --> 00:01:11,450
that was fun I've compiled this talk

00:01:07,130 --> 00:01:13,850
from I'm been making a book almost and

00:01:11,450 --> 00:01:15,410
I've been putting it all up here so if

00:01:13,850 --> 00:01:18,940
you want to know anything about or

00:01:15,410 --> 00:01:21,560
elaborates then up here probably has it

00:01:18,940 --> 00:01:23,990
so I'm here that I'm here to talk about

00:01:21,560 --> 00:01:26,330
building better web AP is why we need

00:01:23,990 --> 00:01:28,540
them how we can make them better and how

00:01:26,330 --> 00:01:31,160
we can make them much easier to write

00:01:28,540 --> 00:01:33,050
but since not everyone has a Web API

00:01:31,160 --> 00:01:35,960
some people build products without them

00:01:33,050 --> 00:01:37,400
I think I'll just go into just short

00:01:35,960 --> 00:01:39,470
what they are and what benefits they

00:01:37,400 --> 00:01:43,610
give us both its developers and as

00:01:39,470 --> 00:01:45,800
businesses api's are how applications

00:01:43,610 --> 00:01:47,810
basically talk they is how they access

00:01:45,800 --> 00:01:50,060
things and aren't themselves through

00:01:47,810 --> 00:01:51,080
some standardized way it's being that

00:01:50,060 --> 00:01:53,630
you can have your common functionality

00:01:51,080 --> 00:01:55,580
as such as micro services for example

00:01:53,630 --> 00:01:57,950
and you can bundle them away and have

00:01:55,580 --> 00:02:01,760
them as nice discrete parts we've known

00:01:57,950 --> 00:02:05,990
interfaces you can implement the months

00:02:01,760 --> 00:02:08,869
and access them anywhere so which we've

00:02:05,990 --> 00:02:10,759
web AP is that anywhere can now be on

00:02:08,869 --> 00:02:14,599
the other side of the globe because it

00:02:10,759 --> 00:02:17,090
just talks through the internet you can

00:02:14,599 --> 00:02:18,920
break open silo of data stored in one

00:02:17,090 --> 00:02:20,780
locations so for example

00:02:18,920 --> 00:02:22,610
if you're storing like weather data or

00:02:20,780 --> 00:02:25,400
something like that from the Bureau of

00:02:22,610 --> 00:02:28,099
Meteorology you can use web api's or

00:02:25,400 --> 00:02:29,840
rather in this case ftp to download that

00:02:28,099 --> 00:02:34,160
all down and use it anywhere else so you

00:02:29,840 --> 00:02:36,560
can get data out a lot easier you can

00:02:34,160 --> 00:02:39,560
also upload data which is really good

00:02:36,560 --> 00:02:42,500
because you can have like crowdsourcing

00:02:39,560 --> 00:02:45,110
so you can have people that do a yelp

00:02:42,500 --> 00:02:46,819
they have ratings and all last night

00:02:45,110 --> 00:02:48,319
gets collated and processed in one

00:02:46,819 --> 00:02:50,269
location and then you only need to go

00:02:48,319 --> 00:02:52,220
one location you don't have to talk to

00:02:50,269 --> 00:02:55,450
500,000 people would figure out where to

00:02:52,220 --> 00:02:59,840
eat you can just go to our website and

00:02:55,450 --> 00:03:02,660
because it's done in a machine talkable

00:02:59,840 --> 00:03:04,400
language you can do it with just about

00:03:02,660 --> 00:03:06,830
anything it doesn't have to come from

00:03:04,400 --> 00:03:08,330
humans you can have for example climate

00:03:06,830 --> 00:03:10,819
control systems you can have lots and

00:03:08,330 --> 00:03:12,230
lots of lots sensors everywhere and they

00:03:10,819 --> 00:03:13,880
can point out where it's hotter where

00:03:12,230 --> 00:03:15,410
you might have leaks Microsoft did a

00:03:13,880 --> 00:03:17,720
thing where they saved a whole bunch of

00:03:15,410 --> 00:03:19,700
money just by figuring out where there

00:03:17,720 --> 00:03:23,750
were leaking stuff from their data

00:03:19,700 --> 00:03:25,850
centers there's quite obviously a lot of

00:03:23,750 --> 00:03:29,840
applications for this as most of you

00:03:25,850 --> 00:03:31,820
probably know you can grab huge amounts

00:03:29,840 --> 00:03:35,299
data store a process it do whatever you

00:03:31,820 --> 00:03:39,650
want with it you can span doubt we see

00:03:35,299 --> 00:03:42,320
to do it all up there brilliant in fact

00:03:39,650 --> 00:03:43,700
because of machines being able to do

00:03:42,320 --> 00:03:45,650
things like your little sensors and

00:03:43,700 --> 00:03:48,310
everything people call it web

00:03:45,650 --> 00:03:52,250
three-point oh the Internet of Things

00:03:48,310 --> 00:03:54,260
that's done it it's more like the

00:03:52,250 --> 00:03:56,630
programmable incident nothing's changed

00:03:54,260 --> 00:03:58,790
it's just that now we can sort of widen

00:03:56,630 --> 00:04:00,440
our reach of what we can access we don't

00:03:58,790 --> 00:04:02,390
have to access it for a Syria okay or

00:04:00,440 --> 00:04:07,000
anything like that we can access it over

00:04:02,390 --> 00:04:09,230
the web so here's some companies that do

00:04:07,000 --> 00:04:12,769
API things like lots of these companies

00:04:09,230 --> 00:04:15,440
for example male gun and Rackspace you

00:04:12,769 --> 00:04:17,359
mainly use them through their api's so

00:04:15,440 --> 00:04:20,090
there are businesses which are basically

00:04:17,359 --> 00:04:21,500
just entirely api's then you have

00:04:20,090 --> 00:04:23,720
companies like Google which for example

00:04:21,500 --> 00:04:26,690
you have the google map maps api which

00:04:23,720 --> 00:04:28,220
is very popular and the node which they

00:04:26,690 --> 00:04:30,440
mainly do service but they also have

00:04:28,220 --> 00:04:32,379
some AP ice to do things with those

00:04:30,440 --> 00:04:35,149
servers

00:04:32,379 --> 00:04:38,149
the best sort of api's are the ones

00:04:35,149 --> 00:04:40,969
which you can do anything that you could

00:04:38,149 --> 00:04:45,879
do as a person so that means that you

00:04:40,969 --> 00:04:48,679
can do interfaces that are fully rich

00:04:45,879 --> 00:04:50,149
that aren't your website so you can have

00:04:48,679 --> 00:04:52,159
mobile clients so just talk to your

00:04:50,149 --> 00:04:56,179
regular API and because it's so rich he

00:04:52,159 --> 00:04:58,579
can do anything and and because you can

00:04:56,179 --> 00:05:00,649
do anything for example with Amazon you

00:04:58,579 --> 00:05:02,509
can have machines doing it for you you

00:05:00,649 --> 00:05:04,809
can have them detect that there's a lot

00:05:02,509 --> 00:05:07,309
of load and spin up ec2 instances and

00:05:04,809 --> 00:05:08,989
spawn more web servers without any human

00:05:07,309 --> 00:05:12,319
intervention because they can do

00:05:08,989 --> 00:05:13,759
everything that we can do there's a

00:05:12,319 --> 00:05:18,169
whole bunch of benefits obviously

00:05:13,759 --> 00:05:20,119
automation and crowdsourcing and a lot

00:05:18,169 --> 00:05:22,669
of business things that you can

00:05:20,119 --> 00:05:27,079
basically use that as competition you

00:05:22,669 --> 00:05:30,279
can say you can automate this so since

00:05:27,079 --> 00:05:32,299
they're good you need to implement them

00:05:30,279 --> 00:05:34,699
the first thing you should do is think

00:05:32,299 --> 00:05:36,619
about who your users are who are we

00:05:34,699 --> 00:05:38,300
designing this for it's good to design

00:05:36,619 --> 00:05:40,429
something for someone and not just write

00:05:38,300 --> 00:05:41,509
something out and be done because then

00:05:40,429 --> 00:05:45,139
you end up with something that no one

00:05:41,509 --> 00:05:47,659
wants to use and that's not good if you

00:05:45,139 --> 00:05:49,219
design for the end user the user at the

00:05:47,659 --> 00:05:51,769
end of it that is going to be using an

00:05:49,219 --> 00:05:54,499
app or a website or a device which talks

00:05:51,769 --> 00:05:56,479
to your API you want to expose all the

00:05:54,499 --> 00:05:58,459
data that they might need you want to

00:05:56,479 --> 00:06:00,469
make sure that you can provide encrypted

00:05:58,459 --> 00:06:02,599
endpoints for example using TLS

00:06:00,469 --> 00:06:05,779
everywhere because security especially

00:06:02,599 --> 00:06:09,769
these days these days is absolutely

00:06:05,779 --> 00:06:11,269
paramount yeah and for the implements of

00:06:09,769 --> 00:06:13,459
the person at rising application all

00:06:11,269 --> 00:06:15,379
rights against your API you want to make

00:06:13,459 --> 00:06:17,360
sure that you don't surprise them that

00:06:15,379 --> 00:06:18,949
if you give them some docs that they can

00:06:17,360 --> 00:06:20,779
sort of go along and they don't have to

00:06:18,949 --> 00:06:23,479
pay very much attention it should just

00:06:20,779 --> 00:06:26,569
all makes sense you want to make it

00:06:23,479 --> 00:06:27,799
stable so that if a couple years down

00:06:26,569 --> 00:06:29,749
the line they don't have to rewrite

00:06:27,799 --> 00:06:31,339
everything and you want to provide

00:06:29,749 --> 00:06:34,099
documentation so that there's not a

00:06:31,339 --> 00:06:35,209
massive learning curve because that's if

00:06:34,099 --> 00:06:37,219
you're doing something and there's a

00:06:35,209 --> 00:06:39,289
massive learning curve where developers

00:06:37,219 --> 00:06:43,099
so attention spans are quite sure we'll

00:06:39,289 --> 00:06:45,470
just don't do something else so as far

00:06:43,099 --> 00:06:49,400
as stability the number one thing is

00:06:45,470 --> 00:06:51,500
owning you want to provide explicit

00:06:49,400 --> 00:06:53,120
versions you don't want to change have

00:06:51,500 --> 00:06:54,740
something that isn't named spaced and

00:06:53,120 --> 00:06:57,290
just change it whenever because that

00:06:54,740 --> 00:06:59,030
will break applications and just like

00:06:57,290 --> 00:07:01,310
the desktop like Microsoft's had a lot

00:06:59,030 --> 00:07:03,440
of these problems with visual c++ where

00:07:01,310 --> 00:07:05,660
you can't drop them out because they're

00:07:03,440 --> 00:07:09,980
incompatible so you need to namespace

00:07:05,660 --> 00:07:12,920
them you need to be able to provide API

00:07:09,980 --> 00:07:15,950
pinning so for example you can say I use

00:07:12,920 --> 00:07:18,440
version 1 of the API and that's all I

00:07:15,950 --> 00:07:20,360
use so you don't inadvertently push

00:07:18,440 --> 00:07:24,620
someone onto something that breaks and

00:07:20,360 --> 00:07:26,930
provide a bad user experience there's a

00:07:24,620 --> 00:07:29,960
few ways of doing it you can put in the

00:07:26,930 --> 00:07:33,200
URI for example this example from route

00:07:29,960 --> 00:07:37,310
53 puts the date of the API writing

00:07:33,200 --> 00:07:41,210
running in there stripe uses a header

00:07:37,310 --> 00:07:43,760
they update very frequently I think they

00:07:41,210 --> 00:07:45,770
do it a couple times a month and Heroku

00:07:43,760 --> 00:07:49,010
they update less frequently but they

00:07:45,770 --> 00:07:51,530
also use a header they put it in the

00:07:49,010 --> 00:07:54,050
accept header so there's a couple of

00:07:51,530 --> 00:07:55,880
different ways of doing it personally I

00:07:54,050 --> 00:07:59,930
think the best way is putting it in the

00:07:55,880 --> 00:08:03,620
URI it makes a lot of sense you don't

00:07:59,930 --> 00:08:05,570
have to fiddle with headers and it just

00:08:03,620 --> 00:08:09,650
sort of makes it a lot more obvious what

00:08:05,570 --> 00:08:11,210
version you're talking to there's two

00:08:09,650 --> 00:08:12,710
ways of doing all this multiple ways of

00:08:11,210 --> 00:08:14,180
doing this but these are the two ones

00:08:12,710 --> 00:08:15,830
like you have an entire different server

00:08:14,180 --> 00:08:17,990
that does it or a time different virtual

00:08:15,830 --> 00:08:19,910
host it doesn't or you put it all under

00:08:17,990 --> 00:08:22,400
the same one I don't it all under this

00:08:19,910 --> 00:08:25,130
all under the same one is better there's

00:08:22,400 --> 00:08:26,290
no reason why in modern web frameworks

00:08:25,130 --> 00:08:30,979
you can't have multiple implementations

00:08:26,290 --> 00:08:33,710
side-by-side as Tim berners-lee said

00:08:30,979 --> 00:08:36,080
back in 1998 cool your eyes don't change

00:08:33,710 --> 00:08:39,110
I think that should go one step further

00:08:36,080 --> 00:08:41,330
when you're providing structured data I

00:08:39,110 --> 00:08:43,219
think that this structure should not

00:08:41,330 --> 00:08:45,290
change either for human readable

00:08:43,219 --> 00:08:47,600
documents that sort of goes that the

00:08:45,290 --> 00:08:51,410
contention change but for machines

00:08:47,600 --> 00:08:53,750
content is also how it is formatted so

00:08:51,410 --> 00:08:56,140
if you make sure that the that doesn't

00:08:53,750 --> 00:08:59,089
change over the lifetime then that works

00:08:56,140 --> 00:09:01,569
there was a question when i did a dress

00:08:59,089 --> 00:09:04,100
all of this talk that if you've got

00:09:01,569 --> 00:09:06,319
version wannabe results and version 2 of

00:09:04,100 --> 00:09:09,129
a resource aren't they technically the

00:09:06,319 --> 00:09:12,579
same thing well yes but i think that

00:09:09,129 --> 00:09:15,079
breaking it enough for this is worth it

00:09:12,579 --> 00:09:16,430
because different versions will have

00:09:15,079 --> 00:09:18,259
different responses and different

00:09:16,430 --> 00:09:20,120
formatting and possibly a different

00:09:18,259 --> 00:09:22,939
resource layer you might have something

00:09:20,120 --> 00:09:26,269
that's called like cakes and then it

00:09:22,939 --> 00:09:28,879
might be changed to some other name and

00:09:26,269 --> 00:09:31,069
if you've got them all side by side it's

00:09:28,879 --> 00:09:32,600
a bit more confusing while if you have

00:09:31,069 --> 00:09:34,610
the mall namespace you can say okay

00:09:32,600 --> 00:09:38,660
cakes is a 404 we don't have to check

00:09:34,610 --> 00:09:41,410
whether it's an old version there's also

00:09:38,660 --> 00:09:44,389
been a lot of things about layout

00:09:41,410 --> 00:09:46,009
especially recently how there's been all

00:09:44,389 --> 00:09:49,490
the rest stuff I'll get to that later

00:09:46,009 --> 00:09:51,559
but in leave out we want to lay it out

00:09:49,490 --> 00:09:54,610
like it there's resources like there's

00:09:51,559 --> 00:09:58,300
bundles of data not not just functions

00:09:54,610 --> 00:10:01,220
you don't want to have like that and

00:09:58,300 --> 00:10:05,420
pass in an ID you can put that straight

00:10:01,220 --> 00:10:09,740
in the URI and that also makes a lot of

00:10:05,420 --> 00:10:13,459
sense because it is cake 14 exam in this

00:10:09,740 --> 00:10:15,709
example it's not it's not a function you

00:10:13,459 --> 00:10:17,980
can then have this is a common thing

00:10:15,709 --> 00:10:22,370
where you have a list resource which is

00:10:17,980 --> 00:10:24,499
sort of the top level of it and doing

00:10:22,370 --> 00:10:28,809
like for example a get on that will

00:10:24,499 --> 00:10:34,670
return all of them or a paginated list

00:10:28,809 --> 00:10:36,649
you can then post to create one and it

00:10:34,670 --> 00:10:38,480
gets a lot simpler when you are going

00:10:36,649 --> 00:10:41,089
multiple layers down you don't have to

00:10:38,480 --> 00:10:42,709
add more parameters to increasingly long

00:10:41,089 --> 00:10:45,050
functions you just tack things on the

00:10:42,709 --> 00:10:48,439
end of your I just like sub resources

00:10:45,050 --> 00:10:49,730
and so on and so forth and some

00:10:48,439 --> 00:10:52,459
companies might have things that go

00:10:49,730 --> 00:10:56,329
pretty deep so it makes a lot of sense

00:10:52,459 --> 00:11:00,610
there I want to rest this might be a bit

00:10:56,329 --> 00:11:03,730
controversial but oh that wrist or

00:11:00,610 --> 00:11:08,299
representational state transfer is

00:11:03,730 --> 00:11:09,990
mainly the most common way of doing it i

00:11:08,299 --> 00:11:13,020
would say doing it properly

00:11:09,990 --> 00:11:17,100
it's more or less Maps state transforms

00:11:13,020 --> 00:11:21,149
to HT two methods so for example get

00:11:17,100 --> 00:11:24,330
fetches put replaces or creates patch

00:11:21,149 --> 00:11:28,290
updates and delete removes there is one

00:11:24,330 --> 00:11:30,350
small thing that the RFC 7231 which was

00:11:28,290 --> 00:11:33,420
released I thing in April this year

00:11:30,350 --> 00:11:36,270
which did change is that post now does

00:11:33,420 --> 00:11:38,970
whatever you wanted to this was a change

00:11:36,270 --> 00:11:42,660
to fit reality where everyone just said

00:11:38,970 --> 00:11:46,950
post was everything which is it 10

00:11:42,660 --> 00:11:49,020
unfortunate but so if you're wondering

00:11:46,950 --> 00:11:51,240
what you should use with it just be

00:11:49,020 --> 00:11:53,790
pragmatic if it makes sense to use post

00:11:51,240 --> 00:11:57,990
do it if it makes sense to use put do it

00:11:53,790 --> 00:12:00,570
it's fine but just in case documented

00:11:57,990 --> 00:12:01,740
anyway you don't want to post and try

00:12:00,570 --> 00:12:04,140
and figure out what happens if you

00:12:01,740 --> 00:12:05,790
document it very clearly then there's no

00:12:04,140 --> 00:12:09,810
surprise because you can just point at

00:12:05,790 --> 00:12:13,230
it and say this is what it does speaking

00:12:09,810 --> 00:12:15,540
of documentation you should document the

00:12:13,230 --> 00:12:17,850
side effects of your API if you do one

00:12:15,540 --> 00:12:19,410
thing and that spins off for example if

00:12:17,850 --> 00:12:21,329
you create a new record and that spins

00:12:19,410 --> 00:12:22,950
off some background job you should make

00:12:21,329 --> 00:12:26,520
it very clear that that's what happens

00:12:22,950 --> 00:12:28,709
you don't want to accidentally add it

00:12:26,520 --> 00:12:30,480
add something and have all of your

00:12:28,709 --> 00:12:33,029
things go down because it takes down all

00:12:30,480 --> 00:12:35,040
your AC tues to add another thing or all

00:12:33,029 --> 00:12:36,450
of that sort of thing this is quite

00:12:35,040 --> 00:12:41,540
common sense but I thought I'd mention

00:12:36,450 --> 00:12:45,089
it anyway and don't be afraid of copying

00:12:41,540 --> 00:12:47,370
documentation stars which are good for

00:12:45,089 --> 00:12:51,029
example stripes doc says something they

00:12:47,370 --> 00:12:53,520
like a lot they have runnable examples

00:12:51,029 --> 00:12:56,370
on the side they have they explain what

00:12:53,520 --> 00:12:59,579
everything means they do a quite a good

00:12:56,370 --> 00:13:04,200
job of it so if you're writing api docs

00:12:59,579 --> 00:13:06,209
do it like this mayo gun also does it in

00:13:04,200 --> 00:13:08,490
a slightly similar way they explain

00:13:06,209 --> 00:13:12,860
their all and then they just have the

00:13:08,490 --> 00:13:15,300
examples in our own section meanwhile a

00:13:12,860 --> 00:13:18,740
company such as Lynn oh this is there

00:13:15,300 --> 00:13:22,560
this is the complete documentation for

00:13:18,740 --> 00:13:25,080
creating a domain in their DNS system

00:13:22,560 --> 00:13:26,850
and up until I mentioned it to them they

00:13:25,080 --> 00:13:28,770
even had things in there which were

00:13:26,850 --> 00:13:32,430
private and you're not actually supposed

00:13:28,770 --> 00:13:34,050
to send and they don't have examples

00:13:32,430 --> 00:13:35,430
they don't show you how to do it except

00:13:34,050 --> 00:13:39,750
on the main page and then you've got to

00:13:35,430 --> 00:13:42,750
extrapolate it and all of the responses

00:13:39,750 --> 00:13:45,839
are sort of mixed in with all of their

00:13:42,750 --> 00:13:47,880
other products so you can get own you

00:13:45,839 --> 00:13:49,770
don't you won't get them but you your

00:13:47,880 --> 00:13:52,320
library sort of have to know that

00:13:49,770 --> 00:13:55,770
there's also the other stuff going on

00:13:52,320 --> 00:13:57,540
and it's just overall very sparse a lot

00:13:55,770 --> 00:14:00,930
of it doesn't make sense for example

00:13:57,540 --> 00:14:02,730
expires expires sec what does that even

00:14:00,930 --> 00:14:05,820
mean you can sort of extrapolate it if

00:14:02,730 --> 00:14:07,560
you know dns but if you're writing

00:14:05,820 --> 00:14:09,480
against NS it doesn't make a lot of

00:14:07,560 --> 00:14:12,660
sense so you sort of need to explain it

00:14:09,480 --> 00:14:15,120
even though it might be a given so even

00:14:12,660 --> 00:14:16,880
when I was implementing this myself I

00:14:15,120 --> 00:14:19,200
had to actually go and look up some of

00:14:16,880 --> 00:14:22,800
some of the things because I was new to

00:14:19,200 --> 00:14:24,680
DNS and this did not help so please

00:14:22,800 --> 00:14:29,520
don't have your API Doc's like that

00:14:24,680 --> 00:14:33,330
please validation is also a very

00:14:29,520 --> 00:14:35,220
important thing it's great you make sure

00:14:33,330 --> 00:14:37,830
that you don't accept bad data so that

00:14:35,220 --> 00:14:39,540
you don't have to have if statements or

00:14:37,830 --> 00:14:41,040
cleaning statements further down your

00:14:39,540 --> 00:14:43,890
stack you make sure that everything that

00:14:41,040 --> 00:14:47,070
comes in is proper and as it should be

00:14:43,890 --> 00:14:49,470
it also makes users sort of implementers

00:14:47,070 --> 00:14:52,790
know that they can't just send random

00:14:49,470 --> 00:14:56,220
stuff at your API and have it accept it

00:14:52,790 --> 00:14:57,870
so it sort of makes them implement the

00:14:56,220 --> 00:15:00,030
libraries properly rather than here

00:14:57,870 --> 00:15:02,900
causing problems down the line because

00:15:00,030 --> 00:15:05,580
you accepted things a bit too liberally

00:15:02,900 --> 00:15:07,200
you should also validate your outputs

00:15:05,580 --> 00:15:09,180
because if you don't validate your

00:15:07,200 --> 00:15:12,420
outputs you were possibly becoming part

00:15:09,180 --> 00:15:14,490
of the problem there is also something

00:15:12,420 --> 00:15:16,230
for example of heart bleed how because

00:15:14,490 --> 00:15:18,270
there was nothing that was checking how

00:15:16,230 --> 00:15:20,640
much it was returning there was no

00:15:18,270 --> 00:15:23,029
validation if you have that on an API

00:15:20,640 --> 00:15:25,620
level if you accidentally for example

00:15:23,029 --> 00:15:27,540
print a string representation of a user

00:15:25,620 --> 00:15:32,370
object which has the hashed password for

00:15:27,540 --> 00:15:34,380
some reason it will get rejected you can

00:15:32,370 --> 00:15:36,250
use typed fields in jag the rest

00:15:34,380 --> 00:15:37,840
framework for your import for example

00:15:36,250 --> 00:15:41,110
so a lot of frameworks will handle this

00:15:37,840 --> 00:15:44,170
for you otherwise you can use something

00:15:41,110 --> 00:15:46,570
called JSON schema which is framework

00:15:44,170 --> 00:15:48,250
agnostic and you just get a blob of JSON

00:15:46,570 --> 00:15:51,280
and you validate it and it can tell you

00:15:48,250 --> 00:15:53,170
what went wrong and you can do things

00:15:51,280 --> 00:15:56,310
like you can say it can accept only the

00:15:53,170 --> 00:15:58,900
certain values or this certain type or a

00:15:56,310 --> 00:16:03,130
range of values and you can have nested

00:15:58,900 --> 00:16:04,330
schemas or list so it's very good if if

00:16:03,130 --> 00:16:06,220
you want to implement this sort of thing

00:16:04,330 --> 00:16:08,680
if you can't get in your framework it

00:16:06,220 --> 00:16:10,990
might be best to just put put it in

00:16:08,680 --> 00:16:14,220
front of your web servers and just have

00:16:10,990 --> 00:16:16,480
them validate everything it goes through

00:16:14,220 --> 00:16:18,460
there is also some things that you can

00:16:16,480 --> 00:16:21,400
do when you're making your API that you

00:16:18,460 --> 00:16:23,320
can make it potentially faster without

00:16:21,400 --> 00:16:24,910
learning about ops things like what

00:16:23,320 --> 00:16:28,090
hardware you're running it on just more

00:16:24,910 --> 00:16:30,970
the higher-level sort of things there is

00:16:28,090 --> 00:16:33,370
a status code in HP version 1.1 which is

00:16:30,970 --> 00:16:36,820
called 100 continue what happens is that

00:16:33,370 --> 00:16:38,380
when a clients they can if they're going

00:16:36,820 --> 00:16:42,190
to send a large amount of data they can

00:16:38,380 --> 00:16:44,170
send I expect 100 continue before I will

00:16:42,190 --> 00:16:45,700
send the request body so what they do is

00:16:44,170 --> 00:16:48,280
they send the headers then the server

00:16:45,700 --> 00:16:50,170
returns 100 okay of 100 continue if

00:16:48,280 --> 00:16:52,120
everything's okay and then it sends the

00:16:50,170 --> 00:16:54,790
request body this means if you're

00:16:52,120 --> 00:16:56,500
uploading for example a picture or

00:16:54,790 --> 00:16:59,530
something like that that might be

00:16:56,500 --> 00:17:01,660
several megabytes if they don't have an

00:16:59,530 --> 00:17:03,580
authorization token in the headers or

00:17:01,660 --> 00:17:06,750
anything like that you can reject it

00:17:03,580 --> 00:17:08,740
straight away and not tie up bandwidth

00:17:06,750 --> 00:17:10,810
unfortunately if you're using whiskey

00:17:08,740 --> 00:17:12,610
you can't use it or twisted twisted

00:17:10,810 --> 00:17:15,819
doesn't support it yet firm looking into

00:17:12,610 --> 00:17:17,890
it unfortunately the whiskey I believe

00:17:15,819 --> 00:17:20,110
the whiskey pep says the server has to

00:17:17,890 --> 00:17:23,110
handle this for you there is no way to

00:17:20,110 --> 00:17:25,050
get it to not do that so that's been

00:17:23,110 --> 00:17:27,730
unfortunate but it does exist and

00:17:25,050 --> 00:17:29,290
potentially if there's enough push for

00:17:27,730 --> 00:17:32,890
it someone could probably work at a way

00:17:29,290 --> 00:17:36,310
to get it in there if you also make sure

00:17:32,890 --> 00:17:38,740
that your workers have at least state as

00:17:36,310 --> 00:17:40,690
possible and use the database or some

00:17:38,740 --> 00:17:43,810
other external state as a single source

00:17:40,690 --> 00:17:46,120
of truth you will theoretically get

00:17:43,810 --> 00:17:47,560
better scaling because then you can have

00:17:46,120 --> 00:17:49,630
a whole bunch of servers that we can

00:17:47,560 --> 00:17:51,490
respond to any requests in

00:17:49,630 --> 00:17:53,590
any order and it doesn't matter because

00:17:51,490 --> 00:17:58,600
they all just talk to other external

00:17:53,590 --> 00:18:00,790
things so my research on this topic has

00:17:58,600 --> 00:18:02,440
been a couple of API frameworks which

00:18:00,790 --> 00:18:05,500
have sort of hacked together myself to

00:18:02,440 --> 00:18:09,310
see what's possible the first one was

00:18:05,500 --> 00:18:12,040
haddock it was a small very very clergy

00:18:09,310 --> 00:18:14,350
API framework that was just testing my

00:18:12,040 --> 00:18:15,730
ideas it revolved around versions you

00:18:14,350 --> 00:18:17,830
have a version and then you have

00:18:15,730 --> 00:18:21,730
endpoints under that version there is no

00:18:17,830 --> 00:18:23,560
opting out I then rewrote that on top of

00:18:21,730 --> 00:18:25,150
twisted web just raw twisted web

00:18:23,560 --> 00:18:28,060
resources so it actually is a lot

00:18:25,150 --> 00:18:31,240
cleaner and it has things like JSON

00:18:28,060 --> 00:18:33,490
schema integrated and I'm working on the

00:18:31,240 --> 00:18:37,060
page maker authentication which is in

00:18:33,490 --> 00:18:38,590
one or two rfcs and the 100 continue

00:18:37,060 --> 00:18:40,510
which I'm going to work on and seeing if

00:18:38,590 --> 00:18:42,990
it is actually feasible to put this in

00:18:40,510 --> 00:18:46,000
something which developers can then use

00:18:42,990 --> 00:18:47,680
so you can find it at that URL there is

00:18:46,000 --> 00:18:50,380
the doctor lewbert's body of the minute

00:18:47,680 --> 00:18:56,320
and it's very proof of concept ii but it

00:18:50,380 --> 00:18:57,790
does work somewhat so through this I've

00:18:56,320 --> 00:19:01,570
realized what our tools can do better

00:18:57,790 --> 00:19:04,300
for us since better tools let us do more

00:19:01,570 --> 00:19:07,660
things for the same effort so it's like

00:19:04,300 --> 00:19:09,610
a force multiplier and rather than

00:19:07,660 --> 00:19:11,260
having to do with ourselves our

00:19:09,610 --> 00:19:13,720
framework should do versioning for us

00:19:11,260 --> 00:19:17,710
the good news is that though who uses

00:19:13,720 --> 00:19:19,180
Jen go rest framework cool well you

00:19:17,710 --> 00:19:21,970
might know about the Kickstarter for

00:19:19,180 --> 00:19:23,800
generous framework 3 there was a stretch

00:19:21,970 --> 00:19:25,570
goal which is integrated versioning in

00:19:23,800 --> 00:19:27,850
Django rest framework and that stretch

00:19:25,570 --> 00:19:29,830
goal has been met so hopefully that'll

00:19:27,850 --> 00:19:35,140
bring that into Django rest framework

00:19:29,830 --> 00:19:37,690
and we'll all be happier validation lots

00:19:35,140 --> 00:19:42,160
of things that I am input but not output

00:19:37,690 --> 00:19:44,080
so maybe if this could be done in a

00:19:42,160 --> 00:19:46,420
middleware if you use Django or I think

00:19:44,080 --> 00:19:47,440
fast cuz it as well otherwise you can

00:19:46,420 --> 00:19:51,060
put something in front of your server

00:19:47,440 --> 00:19:53,620
please do validate your input and output

00:19:51,060 --> 00:19:56,860
it also gives you another benefit if you

00:19:53,620 --> 00:19:59,320
have your validation there you can also

00:19:56,860 --> 00:20:03,040
use that to output documentation

00:19:59,320 --> 00:20:03,460
automatically Heroku do something like

00:20:03,040 --> 00:20:06,100
this

00:20:03,460 --> 00:20:08,169
they have a tool it's called PRM d it's

00:20:06,100 --> 00:20:11,380
in Ruby and they take their JSON

00:20:08,169 --> 00:20:14,260
schemers and their API layouts and their

00:20:11,380 --> 00:20:16,510
API sort of descriptions in their

00:20:14,260 --> 00:20:20,039
schemas and then the output auto

00:20:16,510 --> 00:20:23,440
automatically formatted markdown dogs so

00:20:20,039 --> 00:20:25,090
if you documented as you go you just do

00:20:23,440 --> 00:20:27,429
one thing and you've got your API

00:20:25,090 --> 00:20:29,470
reference right there and that can be

00:20:27,429 --> 00:20:33,520
all the help when you're bootstrapping

00:20:29,470 --> 00:20:35,470
an API there's a whole bunch of things I

00:20:33,520 --> 00:20:38,500
could fit inside the 20 minutes which I

00:20:35,470 --> 00:20:40,570
wanted to talk testing is very specific

00:20:38,500 --> 00:20:43,360
to the framework but I will just say

00:20:40,570 --> 00:20:48,970
untested code is broken code please test

00:20:43,360 --> 00:20:50,880
your api test it a lot RPC over rest is

00:20:48,970 --> 00:20:54,059
something that everyone does differently

00:20:50,880 --> 00:20:57,730
usually it's just posting to something

00:20:54,059 --> 00:21:01,450
or a post with a command in us or

00:20:57,730 --> 00:21:03,130
something like that which I think rest

00:21:01,450 --> 00:21:05,230
isn't really meant for and maybe if

00:21:03,130 --> 00:21:08,409
you're doing RPC you should use an RPC

00:21:05,230 --> 00:21:13,029
thing but it is convenient to be able to

00:21:08,409 --> 00:21:14,860
do it authentication methods hvac and

00:21:13,029 --> 00:21:16,299
signature authentication is something

00:21:14,860 --> 00:21:18,640
everyone should look into rather than

00:21:16,299 --> 00:21:20,260
just using basic auth because it means

00:21:18,640 --> 00:21:22,990
that you can use the users credentials

00:21:20,260 --> 00:21:26,350
without sending them over the wire there

00:21:22,990 --> 00:21:27,580
is also using for example TLS client

00:21:26,350 --> 00:21:29,830
authentication which is something

00:21:27,580 --> 00:21:31,299
someone's mentioned where you actually

00:21:29,830 --> 00:21:34,450
just use public/private key

00:21:31,299 --> 00:21:37,360
authentication for your API which if

00:21:34,450 --> 00:21:40,149
you're wanting to be rarely secure that

00:21:37,360 --> 00:21:42,179
might be the way you want to do however

00:21:40,149 --> 00:21:44,830
all of this does fit on the website and

00:21:42,179 --> 00:21:48,370
I will be writing over this as I write

00:21:44,830 --> 00:21:50,649
my book you can find it on there it's a

00:21:48,370 --> 00:21:54,149
bit of a work in progress but I'm

00:21:50,649 --> 00:21:56,200
getting two things as it gets them and

00:21:54,149 --> 00:21:58,000
thanks for the top thanks for listening

00:21:56,200 --> 00:22:01,809
thanks for the rub a lot of people I

00:21:58,000 --> 00:22:03,520
didn't expect us that many so question

00:22:01,809 --> 00:22:05,590
time if you don't get a chance and you

00:22:03,520 --> 00:22:08,070
want to argue with me I will be around

00:22:05,590 --> 00:22:08,070
at like

00:22:13,210 --> 00:22:15,270

YouTube URL: https://www.youtube.com/watch?v=pXa4SV3E5JY


