Title: How (not) to upgrade a platform by Edward Schofield
Publication date: 2014-08-07
Playlist: PyCon Australia 2014
Description: 
	Guido admitted in his PyCon 2014 keynote that he will never again conduct a language transition like that from Python 2 to Python 3. The vast majority of Python code written in 2014 is still a ``SyntaxError`` on the latest version of Python. Some people have been wondering: will Python 3 ever take off? 

We do some data mining from PyPI to reveal what progress the community has made so far toward migrating the long tail of packages towards Python 3 and which packages are most critical in the dependency graph of unported packages. We extrapolate about when (if ever) Python 3 support will reach a tipping point after which more new code will be written in Python 3 than Python 2.

We then share our perspective on mistakes made in the Python 3 transition and lessons that we can all learn from. The lessons apply to migrating any interface -- a language, a codebase, or a web API.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:10,900 --> 00:00:16,289
this is joint work with Nathan fad June

00:00:12,820 --> 00:00:18,910
so Nathan and I have been in sort of a

00:00:16,289 --> 00:00:20,500
pulling a bit of data from pi PI over

00:00:18,910 --> 00:00:21,550
the last few months and up trying to

00:00:20,500 --> 00:00:24,520
figure out what's going to happen with

00:00:21,550 --> 00:00:28,150
Python 2 and 5 and 3 and whether the the

00:00:24,520 --> 00:00:31,000
sort of schism is going to be talked

00:00:28,150 --> 00:00:34,300
about address through the natural

00:00:31,000 --> 00:00:35,800
processes and and just yeah there's

00:00:34,300 --> 00:00:39,190
various what about lessons I've learned

00:00:35,800 --> 00:00:41,829
while writing the future package which I

00:00:39,190 --> 00:00:43,559
like to share with you all about them so

00:00:41,829 --> 00:00:46,540
in terms of it sort of yeah the

00:00:43,559 --> 00:00:49,420
perspective on on how to upgrade a

00:00:46,540 --> 00:00:52,150
platform so python is a platform in the

00:00:49,420 --> 00:00:54,280
sense that people build on top of it so

00:00:52,150 --> 00:00:58,000
that's what i mean by platform of the

00:00:54,280 --> 00:01:01,659
purposes of this today so it's about how

00:00:58,000 --> 00:01:02,979
to how to upgrade or how not to upgrade

00:01:01,659 --> 00:01:06,970
a platform and this might apply to web

00:01:02,979 --> 00:01:11,740
api's or to any any api and code or

00:01:06,970 --> 00:01:14,350
anything like that okay so um so this is

00:01:11,740 --> 00:01:16,870
a few steps so I think this is the right

00:01:14,350 --> 00:01:20,110
way to do it first of all you choose a

00:01:16,870 --> 00:01:21,580
new interface for some somewhat if

00:01:20,110 --> 00:01:24,490
there's some old interface you choose a

00:01:21,580 --> 00:01:27,040
new interface next choose a new name for

00:01:24,490 --> 00:01:28,300
that new interface okay so what's what's

00:01:27,040 --> 00:01:31,030
it could be called now and it should be

00:01:28,300 --> 00:01:33,520
called something different after that

00:01:31,030 --> 00:01:35,740
you want to keep around all the new

00:01:33,520 --> 00:01:38,470
interfaces in parallel for a few

00:01:35,740 --> 00:01:41,670
versions and then we want to deprecate

00:01:38,470 --> 00:01:43,600
the old interface and keep it around

00:01:41,670 --> 00:01:45,220
well we can deprecated it straight away

00:01:43,600 --> 00:01:48,550
but we keep it around several versions

00:01:45,220 --> 00:01:51,400
and then we remove it eventually when

00:01:48,550 --> 00:01:53,860
we're done with it so this is pretty

00:01:51,400 --> 00:01:57,729
simple I think if we follow this recipe

00:01:53,860 --> 00:02:03,549
we can upgrade a platform quite smoothly

00:01:57,729 --> 00:02:05,920
for for users all right so now there's

00:02:03,549 --> 00:02:09,310
this rule you break something change its

00:02:05,920 --> 00:02:11,860
name this is a something that I think is

00:02:09,310 --> 00:02:13,840
key to to this process and is something

00:02:11,860 --> 00:02:16,420
that was followed partly in the Python 2

00:02:13,840 --> 00:02:18,310
to 3 upgrade and partly not and i think

00:02:16,420 --> 00:02:20,609
the reasons of those instances where

00:02:18,310 --> 00:02:22,569
wasn't was that the cause of the

00:02:20,609 --> 00:02:23,910
majority of the problems with the UM

00:02:22,569 --> 00:02:27,840
with compatibility

00:02:23,910 --> 00:02:33,420
that we were seeing okay so here's a

00:02:27,840 --> 00:02:35,670
quote from Guido vaca in 2007 okay those

00:02:33,420 --> 00:02:37,320
warts that can be fixed without breaking

00:02:35,670 --> 00:02:39,480
compatibility are getting fixed in an

00:02:37,320 --> 00:02:43,380
evolutionary way but some things just

00:02:39,480 --> 00:02:47,190
can't be changed that way right so he

00:02:43,380 --> 00:02:51,720
started just you are thinking about

00:02:47,190 --> 00:02:54,180
Python 3000 probably for around the turn

00:02:51,720 --> 00:02:56,430
of the century and there was a mailing

00:02:54,180 --> 00:02:58,800
list formed in march two thousand six

00:02:56,430 --> 00:03:04,140
for discussion about why should go into

00:02:58,800 --> 00:03:07,200
Python 3 and and this continued with

00:03:04,140 --> 00:03:09,120
sort of active discussion from the core

00:03:07,200 --> 00:03:10,670
developers on lots of different features

00:03:09,120 --> 00:03:12,750
of the language and what should happen

00:03:10,670 --> 00:03:15,930
continuing until the pine tree was

00:03:12,750 --> 00:03:17,370
released which was in December 2008 ok

00:03:15,930 --> 00:03:20,460
so there was a period of two and a half

00:03:17,370 --> 00:03:22,380
years and this was for the yeah getting

00:03:20,460 --> 00:03:24,390
toward the end of that period period of

00:03:22,380 --> 00:03:26,010
that time when when everything was up

00:03:24,390 --> 00:03:28,890
for discussion okay so here's an example

00:03:26,010 --> 00:03:31,740
it's a little photo of a whiteboard

00:03:28,890 --> 00:03:36,570
during one of the the Sprint's after app

00:03:31,740 --> 00:03:39,080
icon in the US and this was on sort of

00:03:36,570 --> 00:03:42,000
it just sort of shows that these sort of

00:03:39,080 --> 00:03:43,440
depth of changes or the scale of changes

00:03:42,000 --> 00:03:49,590
that the core developers were willing to

00:03:43,440 --> 00:03:51,959
make to to python at that time now the

00:03:49,590 --> 00:03:55,920
main reason that's given nowadays main

00:03:51,959 --> 00:03:57,540
reason that piping three is sort of its

00:03:55,920 --> 00:04:01,890
incident so that just consider to be

00:03:57,540 --> 00:04:03,420
worth it is the Unicode alright so the

00:04:01,890 --> 00:04:05,790
idea was that unicode wouldn't be

00:04:03,420 --> 00:04:08,760
couldn't be upgraded well the strings

00:04:05,790 --> 00:04:12,330
couldn't be upgraded as smoothly as is

00:04:08,760 --> 00:04:14,310
we might have liked but i'm here i'll

00:04:12,330 --> 00:04:16,590
come back to this point in a moment so

00:04:14,310 --> 00:04:20,220
so the end result is a python 3 broke

00:04:16,590 --> 00:04:22,830
our code and and so in the pattern 3

00:04:20,220 --> 00:04:24,840
release notes it was here right december

00:04:22,830 --> 00:04:26,550
two thousand eight you'll find that

00:04:24,840 --> 00:04:29,340
python really hasn't changed all that

00:04:26,550 --> 00:04:31,590
much by and large we're mostly fixing

00:04:29,340 --> 00:04:34,590
well-known annoyances the warts and

00:04:31,590 --> 00:04:36,720
removing a lot of old craft that was

00:04:34,590 --> 00:04:39,740
the that was the end result of two and a

00:04:36,720 --> 00:04:43,020
half years of extensive discussions on

00:04:39,740 --> 00:04:44,970
everything yeah the Python 3 should be

00:04:43,020 --> 00:04:46,560
and shouldn't be but they're so it

00:04:44,970 --> 00:04:48,780
sounds very harmless doesn't that from

00:04:46,560 --> 00:04:52,080
that but this emits that backward

00:04:48,780 --> 00:04:55,290
compatibility was broken which is which

00:04:52,080 --> 00:04:57,240
is the reason that five years later over

00:04:55,290 --> 00:05:02,000
five years later getting up to six now

00:04:57,240 --> 00:05:06,810
that that its adoption still slow now

00:05:02,000 --> 00:05:10,560
Armand ronica is quite a colorful

00:05:06,810 --> 00:05:14,610
character and he he likes talking and

00:05:10,560 --> 00:05:17,100
vlogging about Python 3 and he he writes

00:05:14,610 --> 00:05:18,900
some so he's the author of rats organ

00:05:17,100 --> 00:05:19,980
and flasks and various other packages

00:05:18,900 --> 00:05:22,410
that deal with the interface of bytes

00:05:19,980 --> 00:05:23,880
and text but um he's sort of probably

00:05:22,410 --> 00:05:27,150
the most vocal person in the community

00:05:23,880 --> 00:05:30,750
about it so his opinion that Python 2 is

00:05:27,150 --> 00:05:32,460
the better language in in some ways so

00:05:30,750 --> 00:05:34,200
but essentially there's this there's

00:05:32,460 --> 00:05:36,570
this interesting comment here this stuff

00:05:34,200 --> 00:05:39,510
really confuses beginners and so on so

00:05:36,570 --> 00:05:41,460
there's this um this the debates so not

00:05:39,510 --> 00:05:43,800
not really over in a way but the horse

00:05:41,460 --> 00:05:47,040
bolted sort of um sort of almost six

00:05:43,800 --> 00:05:49,650
years ago so and Alex gain or weighed in

00:05:47,040 --> 00:05:54,300
on New Year's Eve that there's am a bit

00:05:49,650 --> 00:05:55,590
of an to controversy suppose unrest due

00:05:54,300 --> 00:05:57,270
to the fact that most of us are

00:05:55,590 --> 00:06:03,000
benefiting yet from Python 3 and we'd

00:05:57,270 --> 00:06:04,560
like to so Nathan and I did some data

00:06:03,000 --> 00:06:06,570
mining I guess that's a fancy term which

00:06:04,560 --> 00:06:09,060
we sort of looked at some stats we

00:06:06,570 --> 00:06:12,090
pulled from pie pie and to try to work

00:06:09,060 --> 00:06:15,630
out whether Python 3 s go to catch up is

00:06:12,090 --> 00:06:19,260
it just a matter of time and or does

00:06:15,630 --> 00:06:23,400
something big need to be done to change

00:06:19,260 --> 00:06:26,550
the current trajectory so these are the

00:06:23,400 --> 00:06:28,440
results we got in terms of Thea we

00:06:26,550 --> 00:06:30,330
started collecting data about three

00:06:28,440 --> 00:06:32,040
months ago and it's not a lot of data

00:06:30,330 --> 00:06:34,440
just three months but we can draw some

00:06:32,040 --> 00:06:36,660
conclusions from it perhaps this is the

00:06:34,440 --> 00:06:38,610
absolute package can the difference in

00:06:36,660 --> 00:06:42,390
in absolute number of packages between

00:06:38,610 --> 00:06:44,670
today and and where we were three months

00:06:42,390 --> 00:06:47,790
ago and we see

00:06:44,670 --> 00:06:50,250
it's not according to this it's not the

00:06:47,790 --> 00:06:54,150
case that Python 3 is catching up yet

00:06:50,250 --> 00:06:57,330
okay it's the differences is growing

00:06:54,150 --> 00:06:59,040
it's getting wider now this doesn't mean

00:06:57,330 --> 00:07:01,970
it will continue maybe the second

00:06:59,040 --> 00:07:05,100
derivative of this is it larger and

00:07:01,970 --> 00:07:06,810
maybe this is going to overtake it at

00:07:05,100 --> 00:07:08,040
some point that's what we can all hope

00:07:06,810 --> 00:07:11,550
and I think that's what we should be

00:07:08,040 --> 00:07:15,000
working towards but but right now it

00:07:11,550 --> 00:07:18,030
doesn't look too to us like like this is

00:07:15,000 --> 00:07:25,380
um like this is sort of cause for

00:07:18,030 --> 00:07:26,910
optimism but now so must I suppose one

00:07:25,380 --> 00:07:28,860
thing is that these these are sort of

00:07:26,910 --> 00:07:32,010
statistics from pie pie using the

00:07:28,860 --> 00:07:36,450
classifiers and those are quite dodgy so

00:07:32,010 --> 00:07:38,520
what we took was the max of of the those

00:07:36,450 --> 00:07:41,850
the number of packages labeled Python

00:07:38,520 --> 00:07:43,650
2.7 and those labeled pipe and tube and

00:07:41,850 --> 00:07:47,430
actually Python 2.7 there are many more

00:07:43,650 --> 00:07:50,940
packages label 2.7 the Python to go

00:07:47,430 --> 00:07:53,690
figure so and with Python 3 it's the

00:07:50,940 --> 00:07:56,490
opposite situation for some reason we

00:07:53,690 --> 00:07:59,280
can't discern so 3 there are many more

00:07:56,490 --> 00:08:03,030
packages labeled item 3 than any of

00:07:59,280 --> 00:08:05,610
three point four feet by 30 to 34 12.0

00:08:03,030 --> 00:08:09,330
so so anyway which of the max in both

00:08:05,610 --> 00:08:11,610
cases and just compare the Mac Max's for

00:08:09,330 --> 00:08:14,760
the number of number of packages so this

00:08:11,610 --> 00:08:18,210
is what what we see at the moment so

00:08:14,760 --> 00:08:21,030
it's not catching up yet in absolute

00:08:18,210 --> 00:08:22,800
numbers okay so if we that we also

00:08:21,030 --> 00:08:25,110
looked at the difference in relative

00:08:22,800 --> 00:08:26,760
terms and piping 3 is growing faster

00:08:25,110 --> 00:08:30,090
than Python to there and relative terms

00:08:26,760 --> 00:08:37,080
which which is a good thing it's a start

00:08:30,090 --> 00:08:40,020
okay so anyway now Guido said at PyCon

00:08:37,080 --> 00:08:42,390
that he's still optimistic that Python 3

00:08:40,020 --> 00:08:43,500
is going to that the situation five

00:08:42,390 --> 00:08:45,240
years from now is going to be a lot

00:08:43,500 --> 00:08:49,170
better than it is today with Python 3

00:08:45,240 --> 00:08:51,150
adoption he did say he said several

00:08:49,170 --> 00:08:53,889
times over the last five years that he's

00:08:51,150 --> 00:08:59,529
optimistic about this

00:08:53,889 --> 00:09:03,970
so is he right to be optimistic yeah

00:08:59,529 --> 00:09:05,799
let's um let's come back to that so now

00:09:03,970 --> 00:09:08,679
there's this topic of the pragmatism

00:09:05,799 --> 00:09:10,959
versus idealism so here is an

00:09:08,679 --> 00:09:14,049
interesting photo but um there's this um

00:09:10,959 --> 00:09:16,359
so Joe's bowl ski who's the author of

00:09:14,049 --> 00:09:18,579
the blog joel on software he wrote a

00:09:16,359 --> 00:09:20,259
long time i think it was 2004 although

00:09:18,579 --> 00:09:22,540
there may be slightly dodgy that date

00:09:20,259 --> 00:09:25,899
but he wrote about the raymond chen camp

00:09:22,540 --> 00:09:27,939
versus the msdn camp within microsoft

00:09:25,899 --> 00:09:31,299
and the the kind of difference in

00:09:27,939 --> 00:09:33,009
philosophy these two groups had and the

00:09:31,299 --> 00:09:35,350
effect that as i was playing out within

00:09:33,009 --> 00:09:36,999
microsoft and you know this the victory

00:09:35,350 --> 00:09:39,100
of the idealists over the pragmatists of

00:09:36,999 --> 00:09:40,779
microsoft directly explains why vista is

00:09:39,100 --> 00:09:44,139
getting terrible reviews and selling

00:09:40,779 --> 00:09:47,499
poorly so so he called the raymond chen

00:09:44,139 --> 00:09:49,329
camp via the pragmatists very strict

00:09:47,499 --> 00:09:53,019
about backward compatibility and doing a

00:09:49,329 --> 00:09:57,910
great job of that and and the msdn camp

00:09:53,019 --> 00:10:00,100
which was a key not on to the i

00:09:57,910 --> 00:10:04,269
suppose changes that were more

00:10:00,100 --> 00:10:06,189
far-reaching yeah probably the idealist

00:10:04,269 --> 00:10:07,869
more now i would say perhaps the victory

00:10:06,189 --> 00:10:09,489
of the idealists of the pragmatists in

00:10:07,869 --> 00:10:13,239
python directly explains why python 3

00:10:09,489 --> 00:10:14,860
has slow adoption I think Python 3 is so

00:10:13,239 --> 00:10:18,009
as we saw from those release notes it's

00:10:14,860 --> 00:10:19,899
it's really not a pragmatic upgrade or

00:10:18,009 --> 00:10:21,759
wasn't back sort of I guess the lovers

00:10:19,899 --> 00:10:25,600
have happened since then that's good but

00:10:21,759 --> 00:10:27,309
um 53.0 wasn't an upgrade driven by

00:10:25,600 --> 00:10:29,199
pragmatism except from the perspective

00:10:27,309 --> 00:10:31,499
of the developers in making the codebase

00:10:29,199 --> 00:10:36,069
easier to maintain for the long term

00:10:31,499 --> 00:10:37,419
okay so that's interesting now I'm going

00:10:36,069 --> 00:10:39,610
to go through some things about pie

00:10:37,419 --> 00:10:41,369
thing the good the bad and the ugly as I

00:10:39,610 --> 00:10:44,289
see it with the the Python 3 upgrade

00:10:41,369 --> 00:10:46,389
just very briefly so first of all the

00:10:44,289 --> 00:10:52,720
good I think these things were handled

00:10:46,389 --> 00:10:56,439
well okay so the fact that the Rays now

00:10:52,720 --> 00:10:58,839
takes an exception object without the

00:10:56,439 --> 00:11:00,850
comma that old syntax here except this

00:10:58,839 --> 00:11:02,559
with an as part of the syntax that's

00:11:00,850 --> 00:11:04,419
good that was I think these things are

00:11:02,559 --> 00:11:06,320
all handled well because they were

00:11:04,419 --> 00:11:08,210
designed to be the way

00:11:06,320 --> 00:11:09,860
was things work in piping three and

00:11:08,210 --> 00:11:14,360
there are backordered nicely to python

00:11:09,860 --> 00:11:16,730
2.6 and 2.7 and they so Python 2 evolved

00:11:14,360 --> 00:11:20,090
in the right direction in a backward

00:11:16,730 --> 00:11:22,190
compatible way so I think this is in all

00:11:20,090 --> 00:11:24,460
these instances the evolution was

00:11:22,190 --> 00:11:27,080
handled well also this fact that I'm

00:11:24,460 --> 00:11:28,820
there's a dart exists an explicit

00:11:27,080 --> 00:11:31,130
operate an hour for integer division and

00:11:28,820 --> 00:11:32,810
that's been around for a while och tools

00:11:31,130 --> 00:11:35,330
that's made less confusing instead of

00:11:32,810 --> 00:11:37,400
just a 0 that's good and the fact that

00:11:35,330 --> 00:11:39,020
this has turned into a function rather

00:11:37,400 --> 00:11:41,180
than a method call is more consistent

00:11:39,020 --> 00:11:42,860
with the language the rest of the

00:11:41,180 --> 00:11:45,350
language so I think all those are good

00:11:42,860 --> 00:11:47,750
instances of this evolutionary process

00:11:45,350 --> 00:11:49,730
and now more good instances I think this

00:11:47,750 --> 00:11:52,810
was done well it's a done for the right

00:11:49,730 --> 00:11:55,040
reasons and backported to python 2.6 in

00:11:52,810 --> 00:11:57,860
yeah in the right to the way there's

00:11:55,040 --> 00:12:00,200
this new i/o module valen python 2.6 and

00:11:57,860 --> 00:12:01,610
7 which does just what it does on Python

00:12:00,200 --> 00:12:04,880
3 and it's still available in piper

00:12:01,610 --> 00:12:06,650
three that's great so we can use use

00:12:04,880 --> 00:12:09,530
yeah sort of this nice open function

00:12:06,650 --> 00:12:11,720
with in a coding argument in a nice

00:12:09,530 --> 00:12:13,550
black tie or object and things like that

00:12:11,720 --> 00:12:15,920
so just as we can in piper three these

00:12:13,550 --> 00:12:18,410
are all handled well decided to move

00:12:15,920 --> 00:12:20,240
reduced to the funk tools module that's

00:12:18,410 --> 00:12:23,540
fine because it was actually backported

00:12:20,240 --> 00:12:25,520
unlike sister in turn for example and

00:12:23,540 --> 00:12:29,960
this helps these help with forward

00:12:25,520 --> 00:12:36,800
compatibility how we doing for time keep

00:12:29,960 --> 00:12:39,230
going so 15 15 okay all right so the bad

00:12:36,800 --> 00:12:42,740
i mentioned sister in turn this prism

00:12:39,230 --> 00:12:44,900
interim was moved but this isn't

00:12:42,740 --> 00:12:48,740
available in its this module in Python 2

00:12:44,900 --> 00:12:51,560
it was just forgotten presumably so so

00:12:48,740 --> 00:12:53,420
it the ol the new interface wasn't

00:12:51,560 --> 00:12:55,820
backported and now this isn't possible

00:12:53,420 --> 00:12:57,740
in Python to either it's been as nice

00:12:55,820 --> 00:13:01,580
reordering of a reorganization of the

00:12:57,740 --> 00:13:04,460
standard library and but this wasn't

00:13:01,580 --> 00:13:06,470
really back forward into 2.6 and 2.7 and

00:13:04,460 --> 00:13:10,040
it would have been so nice in hindsight

00:13:06,470 --> 00:13:12,140
we can see yeah if we've been able to

00:13:10,040 --> 00:13:14,950
access especially a URL live dot request

00:13:12,140 --> 00:13:18,020
it would have just made so so much i'm

00:13:14,950 --> 00:13:18,570
so many code base is able to use the new

00:13:18,020 --> 00:13:20,790
idiom

00:13:18,570 --> 00:13:23,430
which is sort of a laburnum Python 3 and

00:13:20,790 --> 00:13:25,740
without then having this kind of this

00:13:23,430 --> 00:13:29,280
intake incompatible code because the

00:13:25,740 --> 00:13:31,920
party wasn't designed to be compatible

00:13:29,280 --> 00:13:35,010
that's it really wasn't kind of on the

00:13:31,920 --> 00:13:36,450
radar initially but anyway this these

00:13:35,010 --> 00:13:38,070
could have been back for all of the new

00:13:36,450 --> 00:13:39,900
standard library modules we organized

00:13:38,070 --> 00:13:44,070
they could have been just alias as

00:13:39,900 --> 00:13:47,160
introduced but they haven't been now I

00:13:44,070 --> 00:13:50,910
think this wasn't handled well range how

00:13:47,160 --> 00:13:53,810
is an old name and a new meaning so that

00:13:50,910 --> 00:13:57,030
some breaks breaks that that rule before

00:13:53,810 --> 00:14:00,030
and these methods could have been

00:13:57,030 --> 00:14:03,140
backported but haven't been so we're

00:14:00,030 --> 00:14:08,660
stuck with next in python 2.6 which um

00:14:03,140 --> 00:14:11,340
yeah requires a some less than ideal

00:14:08,660 --> 00:14:14,250
hacks to to kind of an able to three

00:14:11,340 --> 00:14:15,600
compatible code and this is a nice idea

00:14:14,250 --> 00:14:19,110
in some ways this future built-ins

00:14:15,600 --> 00:14:22,110
module which is available in python 2.6

00:14:19,110 --> 00:14:23,910
pats superserver definitely with various

00:14:22,110 --> 00:14:26,130
buildings just as they appear in python

00:14:23,910 --> 00:14:28,620
3 that's good but this isn't available

00:14:26,130 --> 00:14:32,100
on Python 3 so it's still not possible

00:14:28,620 --> 00:14:33,720
to have a unified code base that that

00:14:32,100 --> 00:14:36,440
just sort of imports all of these

00:14:33,720 --> 00:14:39,210
expecting them to be the usual built-ins

00:14:36,440 --> 00:14:40,830
so that would be nice it was kind of

00:14:39,210 --> 00:14:41,640
done nice intention but it wasn't

00:14:40,830 --> 00:14:44,400
followed through in the sense that

00:14:41,640 --> 00:14:45,960
Python 3 doesn't have this and it could

00:14:44,400 --> 00:14:47,550
have been could have been done i think

00:14:45,960 --> 00:14:49,980
that would have been anything better but

00:14:47,550 --> 00:14:53,580
now the the ugly i think it bites object

00:14:49,980 --> 00:14:56,940
this wasn't backported it was just an

00:14:53,580 --> 00:14:58,560
alias introduced to two string and but

00:14:56,940 --> 00:15:01,320
that's very very very different from the

00:14:58,560 --> 00:15:03,660
Python 3 bytes object so so it could

00:15:01,320 --> 00:15:07,620
have been backported but it wasn't

00:15:03,660 --> 00:15:11,670
presumably because of manpower or yeah

00:15:07,620 --> 00:15:13,590
but um but I think that that would have

00:15:11,670 --> 00:15:16,470
been a good thing to ask for help for

00:15:13,590 --> 00:15:18,030
from the community so python 2.6 and

00:15:16,470 --> 00:15:21,690
seven houses by its object is like in

00:15:18,030 --> 00:15:24,780
python 3 then we we could we have a have

00:15:21,690 --> 00:15:28,530
a code bases migrating much more sort of

00:15:24,780 --> 00:15:31,290
um yeah steadily to use these new

00:15:28,530 --> 00:15:32,400
features and to bring it closer so I'm

00:15:31,290 --> 00:15:34,680
yeah I mentioned this but

00:15:32,400 --> 00:15:36,330
for now string I think is the worst of

00:15:34,680 --> 00:15:38,730
these probably because it's a new thing

00:15:36,330 --> 00:15:42,180
with an old name one thing I'm Jacob

00:15:38,730 --> 00:15:45,540
Kaplan loss said in his talk at PyCon

00:15:42,180 --> 00:15:48,090
last year Python in Australia it was

00:15:45,540 --> 00:15:51,690
that um so well when thinking about

00:15:48,090 --> 00:15:55,080
compatibility you want to eliminate the

00:15:51,690 --> 00:15:57,120
word string from your lexicon and and

00:15:55,080 --> 00:16:00,150
the word text is sometimes used and

00:15:57,120 --> 00:16:02,900
Django uses this term text to refer

00:16:00,150 --> 00:16:05,970
unambiguously to to unicode strings so

00:16:02,900 --> 00:16:09,120
perhaps just perhaps text could have

00:16:05,970 --> 00:16:11,880
been the name given to what's now a stir

00:16:09,120 --> 00:16:14,010
in Python 3 and then it could have been

00:16:11,880 --> 00:16:16,860
introduced at a Python 2 as well maybe

00:16:14,010 --> 00:16:19,550
other T prefix if necessary and we could

00:16:16,860 --> 00:16:23,760
have had had these different string and

00:16:19,550 --> 00:16:26,610
biked types in in parallel yeah but it

00:16:23,760 --> 00:16:28,800
didn't happen like that so now a couple

00:16:26,610 --> 00:16:30,000
of other little things so exec it's a

00:16:28,800 --> 00:16:32,100
bit like printing that it became a

00:16:30,000 --> 00:16:35,790
function but unlike print there's no

00:16:32,100 --> 00:16:38,610
future import for it so it's requires a

00:16:35,790 --> 00:16:42,050
bit of hackery with with a module 86 or

00:16:38,610 --> 00:16:44,850
future you tools and meta classes is is

00:16:42,050 --> 00:16:48,120
that it's a terrible in the sense that

00:16:44,850 --> 00:16:50,280
it's a syntax error on the other

00:16:48,120 --> 00:16:52,020
language whichever whichever language

00:16:50,280 --> 00:16:53,490
you you write a metaclass in it's a

00:16:52,020 --> 00:16:56,130
syntax error on the other language so

00:16:53,490 --> 00:17:01,230
there's just no way of proceeding any

00:16:56,130 --> 00:17:03,450
further and and luckily someone someone

00:17:01,230 --> 00:17:05,339
brilliant came up with a solution which

00:17:03,450 --> 00:17:07,260
was brought into the into bedroom and

00:17:05,339 --> 00:17:09,720
peters and six module um a few years ago

00:17:07,260 --> 00:17:11,940
which is kind of helped to bridge this

00:17:09,720 --> 00:17:16,530
gap somewhat but um that could have been

00:17:11,940 --> 00:17:18,420
done much more elegantly okay so now

00:17:16,530 --> 00:17:22,620
here are some interesting sort of case

00:17:18,420 --> 00:17:28,590
studies of other upgrades okay anyone

00:17:22,620 --> 00:17:30,960
know this this is um HD huger traffic on

00:17:28,590 --> 00:17:34,370
my leg leg gonna need something like

00:17:30,960 --> 00:17:37,020
that so this was the day when sweden

00:17:34,370 --> 00:17:39,840
changed from moving from from driving on

00:17:37,020 --> 00:17:42,770
the left driving on the right okay it

00:17:39,840 --> 00:17:44,330
was a day the UM the third of September

00:17:42,770 --> 00:17:52,190
and

00:17:44,330 --> 00:17:58,730
this is a picture from yeah so

00:17:52,190 --> 00:18:02,360
apparently i'm at 455 am any traffic

00:17:58,730 --> 00:18:04,340
that was out and only a small amount of

00:18:02,360 --> 00:18:06,350
trapper was allowed out on the roads

00:18:04,340 --> 00:18:09,080
that day any traffic that was on the

00:18:06,350 --> 00:18:10,970
road and the cars had to stop and slowly

00:18:09,080 --> 00:18:15,049
move to the other side of the road and

00:18:10,970 --> 00:18:16,760
then at five past 5am like you can

00:18:15,049 --> 00:18:18,409
continue driving on the other side of

00:18:16,760 --> 00:18:21,590
the road so that was how that that

00:18:18,409 --> 00:18:25,010
transition with handled and despite this

00:18:21,590 --> 00:18:26,389
picture it worked really smoothly there

00:18:25,010 --> 00:18:30,019
are actually a fewer traffic accidents

00:18:26,389 --> 00:18:31,460
that day than most other days and that

00:18:30,019 --> 00:18:33,649
can sort of continued me you sort of

00:18:31,460 --> 00:18:35,330
built up bench eventually again to the

00:18:33,649 --> 00:18:37,429
usual levels over after a period of

00:18:35,330 --> 00:18:39,080
moment mindful sober it worked really

00:18:37,429 --> 00:18:41,419
well but they had to change the road

00:18:39,080 --> 00:18:42,889
signs of a half a million road signs to

00:18:41,419 --> 00:18:48,010
the other side of the street and things

00:18:42,889 --> 00:18:51,850
like that it was a big organized process

00:18:48,010 --> 00:18:54,320
yeah it's one way to handle an upgrade

00:18:51,850 --> 00:18:56,779
yeah interesting it didn't take five

00:18:54,320 --> 00:18:59,419
years or five or six years like I we've

00:18:56,779 --> 00:19:02,510
had so far it was all done within 24

00:18:59,419 --> 00:19:04,909
hours or even hear 10 minutes really so

00:19:02,510 --> 00:19:10,429
that's that's one way to have a an

00:19:04,909 --> 00:19:16,419
upgrade a global flag day now if you use

00:19:10,429 --> 00:19:19,220
a mac and yeah that then you might be

00:19:16,419 --> 00:19:22,370
you probably use this old magsafe

00:19:19,220 --> 00:19:24,320
adapter Apple upgraded it to this this

00:19:22,370 --> 00:19:28,760
thing which is longer and skinnier and

00:19:24,320 --> 00:19:31,070
incompatible okay and they provided this

00:19:28,760 --> 00:19:34,940
this nice little converter so that's

00:19:31,070 --> 00:19:36,620
that's an option sometimes I guess I

00:19:34,940 --> 00:19:39,230
pretend to do that with a Python future

00:19:36,620 --> 00:19:41,870
package to to make it this little piece

00:19:39,230 --> 00:19:44,690
of thing that you can use to glue the

00:19:41,870 --> 00:19:46,880
old together with a new but that's

00:19:44,690 --> 00:19:48,950
that's one way to handle upgrades so to

00:19:46,880 --> 00:19:53,659
provide some adapt to interface which

00:19:48,950 --> 00:19:55,549
works now yeah this is really

00:19:53,659 --> 00:19:59,119
interesting

00:19:55,549 --> 00:20:00,649
so who remembers this yeah this worked

00:19:59,119 --> 00:20:03,739
really smoothly so this was apples

00:20:00,649 --> 00:20:06,980
transition from using a motorola cpus to

00:20:03,739 --> 00:20:09,789
intel cpus back in the ER for the early

00:20:06,980 --> 00:20:09,789
2000s

00:20:15,760 --> 00:20:22,600
okay the IBM power throughout PowerPC to

00:20:18,820 --> 00:20:25,420
Intel yeah yeah yeah so um this is um

00:20:22,600 --> 00:20:28,570
yeah it worked worked beautifully so

00:20:25,420 --> 00:20:32,260
it's a big upgrade somehow they managed

00:20:28,570 --> 00:20:34,570
to get there there are developers in

00:20:32,260 --> 00:20:36,370
their community to to just kind of

00:20:34,570 --> 00:20:38,320
follow the regular process with they

00:20:36,370 --> 00:20:40,150
laid out so they they organized it very

00:20:38,320 --> 00:20:42,880
well it was very smooth and within a

00:20:40,150 --> 00:20:45,250
couple of years people who seem to have

00:20:42,880 --> 00:20:48,910
forgotten about the old PowerPC

00:20:45,250 --> 00:20:50,890
architecture but it sort of still worked

00:20:48,910 --> 00:20:52,930
for a little while but gradually was

00:20:50,890 --> 00:20:55,840
phased out and seem to work very well so

00:20:52,930 --> 00:20:58,150
this is something we might have had as a

00:20:55,840 --> 00:21:01,930
model for for the Python 3 upgrade

00:20:58,150 --> 00:21:05,440
process yeah it's certainly possible to

00:21:01,930 --> 00:21:09,660
do very large scale d preaching upgrades

00:21:05,440 --> 00:21:12,550
of technology without it being a problem

00:21:09,660 --> 00:21:15,580
okay so from comments on the upgrade

00:21:12,550 --> 00:21:18,820
process now 2 to 3 was designed to be a

00:21:15,580 --> 00:21:21,340
tool for one-way migration from five and

00:21:18,820 --> 00:21:25,480
two code to three and leaving behind

00:21:21,340 --> 00:21:27,160
python to compatibility and the original

00:21:25,480 --> 00:21:30,550
expectation that people would do this

00:21:27,160 --> 00:21:34,000
was was wrong in the case of for

00:21:30,550 --> 00:21:35,830
libraries at least because because

00:21:34,000 --> 00:21:37,270
people maintaining libraries had the

00:21:35,830 --> 00:21:39,700
majority of their users on Piper to

00:21:37,270 --> 00:21:42,660
still so they would need to continue

00:21:39,700 --> 00:21:46,060
providing compatibility so this wasn't

00:21:42,660 --> 00:21:47,380
wasn't really the answer for that so

00:21:46,060 --> 00:21:50,200
this is something we can sort of learn

00:21:47,380 --> 00:21:52,180
from so why was this wrong we can sort

00:21:50,200 --> 00:21:55,030
of think about you know okay what can we

00:21:52,180 --> 00:21:58,120
learn from that lesson and I suppose

00:21:55,030 --> 00:22:00,520
it's that a community has mass and a

00:21:58,120 --> 00:22:04,990
community won't won't just do as they're

00:22:00,520 --> 00:22:07,780
told they're there are got there what

00:22:04,990 --> 00:22:09,880
they want to UM yeah everyone has has

00:22:07,780 --> 00:22:11,590
their own sort of reasons for using

00:22:09,880 --> 00:22:15,400
Python reasons for upgrading or not

00:22:11,590 --> 00:22:17,020
upgrade now it's some yeah now the this

00:22:15,400 --> 00:22:21,630
content of deprecation I hid this is a

00:22:17,020 --> 00:22:25,180
brick factory that's deprecated okay

00:22:21,630 --> 00:22:27,310
and a deprecation just means signaling

00:22:25,180 --> 00:22:31,630
you shouldn't use this now this poll is

00:22:27,310 --> 00:22:33,430
deprecated as well okay so it's a

00:22:31,630 --> 00:22:36,880
concept that that exists outside

00:22:33,430 --> 00:22:44,260
computing and yeah it's it's interesting

00:22:36,880 --> 00:22:46,030
we can make of this but now forward

00:22:44,260 --> 00:22:49,600
compatibility is something python has

00:22:46,030 --> 00:22:54,000
through these under under future imports

00:22:49,600 --> 00:22:58,240
in particular there are other instances

00:22:54,000 --> 00:23:01,900
now backward compatibility is I think

00:22:58,240 --> 00:23:04,210
the more powerful concept now cars the

00:23:01,900 --> 00:23:06,010
original cars were horseless carriages

00:23:04,210 --> 00:23:08,560
that's where the term car came from and

00:23:06,010 --> 00:23:11,230
they were designed not to be twice as

00:23:08,560 --> 00:23:12,790
wide as a horse-drawn carriage but about

00:23:11,230 --> 00:23:14,770
the same width so they could go on the

00:23:12,790 --> 00:23:19,710
same roads that horse drawn carriages

00:23:14,770 --> 00:23:22,090
were and they could exist in parallel so

00:23:19,710 --> 00:23:24,220
this is I think this is the more

00:23:22,090 --> 00:23:25,720
powerful concept now here's um I guess

00:23:24,220 --> 00:23:28,060
we know what this means that the next

00:23:25,720 --> 00:23:30,280
version runs the previous versions code

00:23:28,060 --> 00:23:32,020
now with our software that might mean

00:23:30,280 --> 00:23:37,000
the next version run can read the

00:23:32,020 --> 00:23:41,950
previous versions data so Microsoft and

00:23:37,000 --> 00:23:45,400
Apple have worked this out so the later

00:23:41,950 --> 00:23:47,590
versions of these office software

00:23:45,400 --> 00:23:49,840
packages can can read the earlier file

00:23:47,590 --> 00:23:52,590
formats but they express a preference to

00:23:49,840 --> 00:23:55,690
save saving fires in the new format and

00:23:52,590 --> 00:23:59,040
and over time this puts a pressure on

00:23:55,690 --> 00:24:01,810
the community to upgrade okay it's viral

00:23:59,040 --> 00:24:03,100
here's an example from keynote would you

00:24:01,810 --> 00:24:06,760
like to upgrade this created this

00:24:03,100 --> 00:24:08,440
presentation so then users of via the

00:24:06,760 --> 00:24:10,870
old version will have this pressure trip

00:24:08,440 --> 00:24:14,200
for them to upgrade as well okay so

00:24:10,870 --> 00:24:16,600
maybe we could learn a lesson from this

00:24:14,200 --> 00:24:19,630
about how to encourage upgrades so

00:24:16,600 --> 00:24:21,100
backward compatibility is yeah i think

00:24:19,630 --> 00:24:24,370
is more powerful as a concept than

00:24:21,100 --> 00:24:27,700
forward compatibility so that's that's

00:24:24,370 --> 00:24:30,040
it the lessons other if you break

00:24:27,700 --> 00:24:33,760
something change its name i think this

00:24:30,040 --> 00:24:34,150
is this is t keeping both interfaces and

00:24:33,760 --> 00:24:36,820
power

00:24:34,150 --> 00:24:40,030
and and the backward compatibility is is

00:24:36,820 --> 00:24:43,540
um is viral inherently so yeah I'm very

00:24:40,030 --> 00:24:45,520
happy to take questions on either this

00:24:43,540 --> 00:24:46,840
or or my talk from yesterday because

00:24:45,520 --> 00:24:57,580
there's no time for that if you have any

00:24:46,840 --> 00:25:03,370
questions about that thank you any

00:24:57,580 --> 00:25:04,780
questions Orion oh yes okay yeah how

00:25:03,370 --> 00:25:05,770
much of this is it too late some of

00:25:04,780 --> 00:25:08,230
those sound like things we could

00:25:05,770 --> 00:25:10,510
introduce into 3.4 or poly you know you

00:25:08,230 --> 00:25:11,980
know and a patch release on 2.7 I mean

00:25:10,510 --> 00:25:15,700
actually do them be able to do a lot of

00:25:11,980 --> 00:25:18,670
this is yeah I think a good question

00:25:15,700 --> 00:25:20,110
that I think the hardest that I think

00:25:18,670 --> 00:25:23,020
it's too late in those instances where

00:25:20,110 --> 00:25:25,390
they with a name stay the same but the

00:25:23,020 --> 00:25:29,140
behavior change so Forrester for example

00:25:25,390 --> 00:25:31,000
it's it's um too late to fix that

00:25:29,140 --> 00:25:33,810
without introducing a new thing into

00:25:31,000 --> 00:25:36,940
both something maybe like Python 2.9 and

00:25:33,810 --> 00:25:38,310
3.5 would have a text data type if we

00:25:36,940 --> 00:25:41,260
want it I don't think that would be the

00:25:38,310 --> 00:25:48,360
answer but it would least be possible to

00:25:41,260 --> 00:25:50,800
call it something else but now for I

00:25:48,360 --> 00:25:52,450
think backward compatibility is what we

00:25:50,800 --> 00:25:57,010
need as a community so your plight in

00:25:52,450 --> 00:26:00,850
3.5 can can somehow read it run python

00:25:57,010 --> 00:26:02,500
2.6 code then people will start using it

00:26:00,850 --> 00:26:04,690
and people will then be able to start

00:26:02,500 --> 00:26:06,340
writing pipe in 3 code and this is going

00:26:04,690 --> 00:26:08,080
to put a pressure on I've got a good

00:26:06,340 --> 00:26:11,020
kind of pressure on the community to

00:26:08,080 --> 00:26:13,540
upgrade yeah I haven't fully answered

00:26:11,020 --> 00:26:16,390
your question would be happy to talk to

00:26:13,540 --> 00:26:20,320
you about it afterwards that's the best

00:26:16,390 --> 00:26:22,270
I can do I see I've Tennessee hide I was

00:26:20,320 --> 00:26:24,370
really interested in the kind of package

00:26:22,270 --> 00:26:26,380
proliferation out of the various

00:26:24,370 --> 00:26:28,030
versions do you think that that's partly

00:26:26,380 --> 00:26:29,740
because of what operating systems our

00:26:28,030 --> 00:26:30,790
packaging as default versions or do you

00:26:29,740 --> 00:26:32,380
think it's because of people are

00:26:30,790 --> 00:26:35,350
invested in libraries that are on

00:26:32,380 --> 00:26:37,600
particular versions with the graph that

00:26:35,350 --> 00:26:39,430
that I showed yeah that's right yeah

00:26:37,600 --> 00:26:41,110
like a lot of like enterprise

00:26:39,430 --> 00:26:43,270
organizational environments they might

00:26:41,110 --> 00:26:44,940
still even be on like 2.6 here at about

00:26:43,270 --> 00:26:47,680
two points yeah so people might be

00:26:44,940 --> 00:26:51,070
building for pretty legacy deployments

00:26:47,680 --> 00:26:53,170
yeah and that's that's okay and so so

00:26:51,070 --> 00:26:55,000
I've heard the core developers sore some

00:26:53,170 --> 00:26:56,350
of them say that it doesn't matter some

00:26:55,000 --> 00:26:58,210
people stay in Python true forever and

00:26:56,350 --> 00:27:01,300
in a sense that's true but it does

00:26:58,210 --> 00:27:04,930
detract from the value of Python 3 in if

00:27:01,300 --> 00:27:11,650
for example Dropbox right its new jip

00:27:04,930 --> 00:27:15,910
jip compiler for x 42 only Wow yeah

00:27:11,650 --> 00:27:18,580
assuming it's released yeah yeah so but

00:27:15,910 --> 00:27:20,290
the download counts i showed it as the

00:27:18,580 --> 00:27:22,330
graphs i showed explicitly aren't for

00:27:20,290 --> 00:27:23,380
download counts there are actual number

00:27:22,330 --> 00:27:30,160
of the numbers of packages with those

00:27:23,380 --> 00:27:32,050
classifiers yeah Brian and so I enjoyed

00:27:30,160 --> 00:27:34,270
your talk yesterday as well a bit python

00:27:32,050 --> 00:27:35,970
future and sort of from what you were

00:27:34,270 --> 00:27:38,500
showing it looked like a pretty nice

00:27:35,970 --> 00:27:40,420
like not necessarily full solution but a

00:27:38,500 --> 00:27:42,880
pretty decent and easy to use compromise

00:27:40,420 --> 00:27:43,990
solution you know is the answer here

00:27:42,880 --> 00:27:45,570
it's like all right we all just start

00:27:43,990 --> 00:27:48,160
using path and future and be happy and

00:27:45,570 --> 00:27:50,470
we'll all get there together or is that

00:27:48,160 --> 00:27:54,760
not quite good enough for any particular

00:27:50,470 --> 00:28:01,390
reason hmm well it doesn't handle see

00:27:54,760 --> 00:28:04,180
extensions I think I think it's I think

00:28:01,390 --> 00:28:06,850
it's a good good option I think so you

00:28:04,180 --> 00:28:09,580
asked me yesterday about performance the

00:28:06,850 --> 00:28:11,020
range functions are somewhat slow at the

00:28:09,580 --> 00:28:12,850
moment but with most of the other

00:28:11,020 --> 00:28:16,360
functions there shouldn't be a

00:28:12,850 --> 00:28:18,190
performance hit because because of it's

00:28:16,360 --> 00:28:19,360
just basically a function that exists

00:28:18,190 --> 00:28:21,640
somewhere else under a different name

00:28:19,360 --> 00:28:24,790
and it's been made available under the

00:28:21,640 --> 00:28:28,150
Python 3 name so it's now in terms of it

00:28:24,790 --> 00:28:31,630
yeah it's I think I'm I think that that

00:28:28,150 --> 00:28:32,710
would be a good thing it provides a lot

00:28:31,630 --> 00:28:34,900
of work though I think backward

00:28:32,710 --> 00:28:38,440
compatibility is easier in a way so I'm

00:28:34,900 --> 00:28:40,810
sort of i'm sort of comfort of inclusion

00:28:38,440 --> 00:28:44,050
that a future package all well and good

00:28:40,810 --> 00:28:46,450
but then trying to get pi PI to migrate

00:28:44,050 --> 00:28:48,580
to to using this is it so it's a big

00:28:46,450 --> 00:28:50,200
effort by a lot of people but but and

00:28:48,580 --> 00:28:52,120
that's forward compatibility but if his

00:28:50,200 --> 00:28:54,640
backward compatible i get the past

00:28:52,120 --> 00:28:57,220
package worth worm a better offer auto

00:28:54,640 --> 00:29:00,550
translate feature work made it just sort

00:28:57,220 --> 00:29:03,130
of seamless to to to run python

00:29:00,550 --> 00:29:04,840
code then that would that would be

00:29:03,130 --> 00:29:06,520
easier so I was interested in the

00:29:04,840 --> 00:29:08,710
lightning talk on the sucks package

00:29:06,520 --> 00:29:10,990
yesterday that's interesting concept

00:29:08,710 --> 00:29:12,340
I've consider that idea as well running

00:29:10,990 --> 00:29:14,200
a separate Python process and having

00:29:12,340 --> 00:29:16,900
some communication I think it's worth

00:29:14,200 --> 00:29:18,190
trying all these options but i think

00:29:16,900 --> 00:29:19,900
that backward compatibility

00:29:18,190 --> 00:29:22,420
compatibility is the right thing to do

00:29:19,900 --> 00:29:24,610
aim for and i go i'm not sure if i've

00:29:22,420 --> 00:29:28,780
kind of answered your question um yeah

00:29:24,610 --> 00:29:31,120
okay all right thanks I'm hard on hey so

00:29:28,780 --> 00:29:33,700
of all the packages that you mentioned

00:29:31,120 --> 00:29:35,850
that weren't quite their future built-in

00:29:33,700 --> 00:29:39,370
it's not being in Python 3 seems like a

00:29:35,850 --> 00:29:42,340
few minutes fix so yeah can you comment

00:29:39,370 --> 00:29:44,230
on why Ethan it's not there yeah it

00:29:42,340 --> 00:29:54,490
seems like yeah we could do it tomorrow

00:29:44,230 --> 00:29:58,180
um we could yeah I suppose it's it's not

00:29:54,490 --> 00:30:00,190
very comprehensive anyway so it's it

00:29:58,180 --> 00:30:02,820
provides for maybe that several

00:30:00,190 --> 00:30:06,970
functions or so from memory and and

00:30:02,820 --> 00:30:09,280
there's no bite type in particular so so

00:30:06,970 --> 00:30:12,280
I guess I i guess the future dog

00:30:09,280 --> 00:30:13,360
built-ins package I've written it tries

00:30:12,280 --> 00:30:14,770
to provide that in any more

00:30:13,360 --> 00:30:17,530
comprehensive way so I think the idea

00:30:14,770 --> 00:30:19,740
was fine but it was not fully through

00:30:17,530 --> 00:30:26,260
consistently and is not really i sort of

00:30:19,740 --> 00:30:29,350
big enough solution yeah yeah Thank You

00:30:26,260 --> 00:30:31,060
Justin question yeah all right thanks

00:30:29,350 --> 00:30:32,620
for mentioning sucks all right but I

00:30:31,060 --> 00:30:34,960
prep the main thing is when I've looked

00:30:32,620 --> 00:30:37,030
at porting from Python 2 to 3 normally

00:30:34,960 --> 00:30:38,470
it's the Unicode type thing which is

00:30:37,030 --> 00:30:40,000
where you spend most of the time where

00:30:38,470 --> 00:30:41,680
you have to actually understand whether

00:30:40,000 --> 00:30:45,130
whether you want it to be a string or

00:30:41,680 --> 00:30:47,710
you wanted to be bites and it seems far

00:30:45,130 --> 00:30:49,510
safer to focus on doing the work in

00:30:47,710 --> 00:30:52,930
Python 3 whenever possible you get the

00:30:49,510 --> 00:30:55,060
nice super semantics etc yeah and when

00:30:52,930 --> 00:30:56,650
you're looking at your code you're going

00:30:55,060 --> 00:30:58,360
to need to differentiate anyway with

00:30:56,650 --> 00:30:59,890
your legacy code base whether these

00:30:58,360 --> 00:31:02,770
things in unicode otherwise you just

00:30:59,890 --> 00:31:04,120
stuck in Python to forever by the time

00:31:02,770 --> 00:31:05,980
you've done that work most of the other

00:31:04,120 --> 00:31:08,500
problems come out in the wash or is a

00:31:05,980 --> 00:31:10,580
little bit of using six and then before

00:31:08,500 --> 00:31:13,610
the any third party packages

00:31:10,580 --> 00:31:16,100
you sux if you really have to but just

00:31:13,610 --> 00:31:20,539
feels like Python 3 is a cleaner

00:31:16,100 --> 00:31:22,039
environment of one that should we should

00:31:20,539 --> 00:31:25,970
be encouraging people to walk yeah I

00:31:22,039 --> 00:31:28,220
agree I agree so so yeah in an ideal

00:31:25,970 --> 00:31:30,470
world there'd be people riding hood and

00:31:28,220 --> 00:31:33,110
paper three first and just providing

00:31:30,470 --> 00:31:35,059
pipe into backward compatibility or yeah

00:31:33,110 --> 00:31:37,549
compatibility through some automated

00:31:35,059 --> 00:31:40,159
tool I think yeah future would do a good

00:31:37,549 --> 00:31:42,320
job with that but yeah I think that's

00:31:40,159 --> 00:31:44,269
right it's a good type platform to

00:31:42,320 --> 00:31:47,840
target first and them and there's no

00:31:44,269 --> 00:31:49,639
real reason not to anymore but for

00:31:47,840 --> 00:31:51,769
upgrading an existing code base that's

00:31:49,639 --> 00:31:54,409
it's slightly different challenge yeah

00:31:51,769 --> 00:32:01,840
but yeah I agree with your point in

00:31:54,409 --> 00:32:01,840
general yeah I'm from anyone that's

00:32:06,490 --> 00:32:10,050
all right thank you

00:32:21,030 --> 00:32:23,090

YouTube URL: https://www.youtube.com/watch?v=7tEcZ8eDKAc


