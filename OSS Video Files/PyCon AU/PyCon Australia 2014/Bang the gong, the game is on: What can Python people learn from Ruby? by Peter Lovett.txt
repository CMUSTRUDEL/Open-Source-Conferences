Title: Bang the gong, the game is on: What can Python people learn from Ruby? by Peter Lovett
Publication date: 2014-08-17
Playlist: PyCon Australia 2014
Description: 
	What has Ruby got that Python people could learn from? Turns out quite a lot. 
Ruby's a bit of a cross between Python and Perl, and borrows heavily from them both.
What does Ruby do well that we can learn from, and also, what does Python do wonderfully? (Hint: a lot).
This presentation will give a quick overview of the major syntactic differences, an understanding of the (superior) object model (whose?), and a quick coverage of some of the Ruby standard library.
If you want a quick leg-up on Ruby vs Python, this quick tour will give that to you. And in doing so, will improve your appreciation for and understanding of Python.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:05,759 --> 00:00:09,440
love it has been a paid programmer has

00:00:07,680 --> 00:00:10,800
worked with many different languages and

00:00:09,440 --> 00:00:13,040
his talk today will be

00:00:10,800 --> 00:00:14,719
bang the gong the game is on what python

00:00:13,040 --> 00:00:17,920
people can learn from ruby

00:00:14,719 --> 00:00:17,920
thank you thank you

00:00:18,120 --> 00:00:25,199
[Applause]

00:00:21,119 --> 00:00:27,599
let's go and that is ruby

00:00:25,199 --> 00:00:28,880
so i'm peter lovett i've been a paid

00:00:27,599 --> 00:00:31,279
programmer since 82

00:00:28,880 --> 00:00:32,880
running training courses since 1985

00:00:31,279 --> 00:00:34,079
running python training courses since

00:00:32,880 --> 00:00:36,800
2007.

00:00:34,079 --> 00:00:38,559
i love python and my wife and kids god

00:00:36,800 --> 00:00:40,960
and bacon

00:00:38,559 --> 00:00:43,600
don't tell my wife about the order there

00:00:40,960 --> 00:00:45,680
i'm not sure if i got the order right

00:00:43,600 --> 00:00:46,800
and um professionally i work as a

00:00:45,680 --> 00:00:49,120
consultant and

00:00:46,800 --> 00:00:50,640
as a programmer but i also do quite a

00:00:49,120 --> 00:00:51,440
bit of training and i run training

00:00:50,640 --> 00:00:54,079
courses in c

00:00:51,440 --> 00:00:55,199
c plus plus pearl python java java ruby

00:00:54,079 --> 00:00:57,840
sql xml

00:00:55,199 --> 00:00:58,399
etc and if you're interested in that uh

00:00:57,840 --> 00:01:02,079
see me

00:00:58,399 --> 00:01:04,239
afterwards this talk

00:01:02,079 --> 00:01:06,000
is not a python versus ruby talk that

00:01:04,239 --> 00:01:08,159
would be unfair and i'm not keen on

00:01:06,000 --> 00:01:10,240
starting a religious war

00:01:08,159 --> 00:01:12,400
this talk is not a training course in

00:01:10,240 --> 00:01:15,119
ruby i can't cover a huge amount

00:01:12,400 --> 00:01:16,960
in the time we've got together this is

00:01:15,119 --> 00:01:19,280
not a full coverage of the ruby

00:01:16,960 --> 00:01:22,320
programming language

00:01:19,280 --> 00:01:23,680
and it's also not how should python the

00:01:22,320 --> 00:01:26,720
language change

00:01:23,680 --> 00:01:29,759
this is about how this course is about

00:01:26,720 --> 00:01:30,159
learning another language and in doing

00:01:29,759 --> 00:01:31,360
that

00:01:30,159 --> 00:01:33,680
hopefully you'll get a better

00:01:31,360 --> 00:01:36,960
appreciation of what python is like

00:01:33,680 --> 00:01:38,960
certain issues that python has and how

00:01:36,960 --> 00:01:41,520
ruby solves them and then maybe how

00:01:38,960 --> 00:01:42,479
how you as a python programmer can solve

00:01:41,520 --> 00:01:44,159
those issues

00:01:42,479 --> 00:01:46,159
i can remember the value of being

00:01:44,159 --> 00:01:48,479
multilingual many years ago i learnt

00:01:46,159 --> 00:01:50,000
coin a greek and i learned far more

00:01:48,479 --> 00:01:53,200
about english

00:01:50,000 --> 00:01:55,439
when i learned greek than i did about

00:01:53,200 --> 00:01:58,079
greek actually

00:01:55,439 --> 00:01:59,200
it's uh so um i am going to be going

00:01:58,079 --> 00:02:02,240
fast so

00:01:59,200 --> 00:02:05,200
buckle your seatbelt dorothy

00:02:02,240 --> 00:02:06,399
kansas is going bye-bye so what is ruby

00:02:05,200 --> 00:02:08,720
it's a programming language

00:02:06,399 --> 00:02:09,520
very closely it looks very similar as we

00:02:08,720 --> 00:02:12,560
will see to

00:02:09,520 --> 00:02:15,920
python the author is

00:02:12,560 --> 00:02:17,120
a japanese computer scientist known in

00:02:15,920 --> 00:02:20,480
the english circles as

00:02:17,120 --> 00:02:22,959
mats it's quite an interesting

00:02:20,480 --> 00:02:24,000
language it was released in 96 so a

00:02:22,959 --> 00:02:27,120
little bit

00:02:24,000 --> 00:02:29,440
newer than python and he talks about uh

00:02:27,120 --> 00:02:32,239
being inspired by python and some of the

00:02:29,440 --> 00:02:34,640
deficiencies of python when he made it

00:02:32,239 --> 00:02:36,800
having said that it's much more like

00:02:34,640 --> 00:02:37,680
pearl so it's philosophy is much more

00:02:36,800 --> 00:02:40,400
like pearl

00:02:37,680 --> 00:02:42,160
it's got a lot of pearl syntax it's got

00:02:40,400 --> 00:02:43,599
a bit of python syntax but it's actually

00:02:42,160 --> 00:02:46,959
much more like pearl so

00:02:43,599 --> 00:02:47,360
who are my pearl friends oh only a few

00:02:46,959 --> 00:02:51,120
of you

00:02:47,360 --> 00:02:53,680
oh who's ever seen pearl

00:02:51,120 --> 00:02:54,319
okay oh okay so those were the ones that

00:02:53,680 --> 00:02:56,879
uh

00:02:54,319 --> 00:02:59,120
actually like pearl those three and the

00:02:56,879 --> 00:03:01,040
rest of you are the ones that

00:02:59,120 --> 00:03:02,400
used to work in pearl before you got

00:03:01,040 --> 00:03:06,239
python

00:03:02,400 --> 00:03:08,720
i understand um rails you most is very

00:03:06,239 --> 00:03:11,040
closely aligned with ruby so rails

00:03:08,720 --> 00:03:11,760
is the web framework and that's what we

00:03:11,040 --> 00:03:15,280
call

00:03:11,760 --> 00:03:18,480
the ruby killer app by david hynemeyer

00:03:15,280 --> 00:03:20,879
hanson so

00:03:18,480 --> 00:03:23,280
uh you might be curious oh so use ruby

00:03:20,879 --> 00:03:25,440
be happy

00:03:23,280 --> 00:03:27,760
just out of curiosity uh the other day i

00:03:25,440 --> 00:03:30,799
did a uh search for ruby jobs

00:03:27,760 --> 00:03:33,360
and python jobs so we got 441 on seek

00:03:30,799 --> 00:03:36,400
for python and 358 for ruby

00:03:33,360 --> 00:03:37,680
so it's not um it's it's

00:03:36,400 --> 00:03:39,519
there's there's jobs there that's

00:03:37,680 --> 00:03:42,319
probably i should say

00:03:39,519 --> 00:03:43,680
interesting the philosophy of ruby is

00:03:42,319 --> 00:03:46,319
tim towdy

00:03:43,680 --> 00:03:47,280
anyone come across tim towdy okay all

00:03:46,319 --> 00:03:49,599
the pearl people

00:03:47,280 --> 00:03:51,519
there's more than one way to do it which

00:03:49,599 --> 00:03:53,760
is the pearl philosophy

00:03:51,519 --> 00:03:55,599
versus the python there should be one

00:03:53,760 --> 00:03:57,360
and preferably only one

00:03:55,599 --> 00:03:59,519
obvious way to do it so in python you've

00:03:57,360 --> 00:04:02,560
got really only one way to loop

00:03:59,519 --> 00:04:05,120
while one way to iterate with four and

00:04:02,560 --> 00:04:08,720
pearl gives you 15 ways to loop and pi

00:04:05,120 --> 00:04:10,799
and ruby gives you about 13.

00:04:08,720 --> 00:04:11,920
although in python that one way may not

00:04:10,799 --> 00:04:15,599
be obvious at first

00:04:11,920 --> 00:04:17,919
unless you're dutch

00:04:15,599 --> 00:04:20,799
so what does ruby got ruby has got more

00:04:17,919 --> 00:04:22,800
racing cars

00:04:20,799 --> 00:04:23,919
so rails is authored by david

00:04:22,800 --> 00:04:27,600
heinemeyer-hanson

00:04:23,919 --> 00:04:28,000
whose second job is as a formula one

00:04:27,600 --> 00:04:31,520
racing

00:04:28,000 --> 00:04:33,120
car driver so and also he's got a bit of

00:04:31,520 --> 00:04:36,240
money he uh

00:04:33,120 --> 00:04:39,120
got the zonda hh commissioned and

00:04:36,240 --> 00:04:40,400
um that's hh not for hugh hefner but for

00:04:39,120 --> 00:04:42,400
heinemeyer hanson

00:04:40,400 --> 00:04:43,680
the author of ruby he actually came

00:04:42,400 --> 00:04:46,479
first in his class

00:04:43,680 --> 00:04:49,280
in le mans this year so python needs

00:04:46,479 --> 00:04:52,560
more racing cars

00:04:49,280 --> 00:04:54,479
what else does python need ruby has a

00:04:52,560 --> 00:04:56,720
national park

00:04:54,479 --> 00:04:58,320
so there is a awesome national park

00:04:56,720 --> 00:05:00,720
probably one of my favorites

00:04:58,320 --> 00:05:01,600
um pretty close to bang in the center of

00:05:00,720 --> 00:05:04,639
australia

00:05:01,600 --> 00:05:06,320
uh ruby gap the uh actually decided the

00:05:04,639 --> 00:05:07,199
first gemstone rush in australia well

00:05:06,320 --> 00:05:10,400
before the

00:05:07,199 --> 00:05:11,840
gold rush so one of my favorite places

00:05:10,400 --> 00:05:14,080
in australia we got bogged just near

00:05:11,840 --> 00:05:14,080
there

00:05:14,240 --> 00:05:18,080
so python needs more racing cars a

00:05:16,880 --> 00:05:20,560
national park

00:05:18,080 --> 00:05:21,360
more grace both the author of pearl

00:05:20,560 --> 00:05:24,639
larry wall

00:05:21,360 --> 00:05:27,360
and the author of uh ruby mats uh

00:05:24,639 --> 00:05:28,160
both uh men of significant um faith that

00:05:27,360 --> 00:05:31,199
uh

00:05:28,160 --> 00:05:33,120
uh implementing their their faith in

00:05:31,199 --> 00:05:34,560
uh with graceful ways in the world

00:05:33,120 --> 00:05:36,240
that's good

00:05:34,560 --> 00:05:38,080
we've got monty python but they've got

00:05:36,240 --> 00:05:41,280
bacon so everything in ruby is about

00:05:38,080 --> 00:05:45,759
bacon and so python needs more bacon

00:05:41,280 --> 00:05:45,759
and we need more gemstones thank you

00:05:46,320 --> 00:05:50,000
now this is not a ruby training course

00:05:48,560 --> 00:05:54,160
but i want to give you some of the basic

00:05:50,000 --> 00:05:54,160
syntax so first up we don't have colons

00:05:54,639 --> 00:06:02,800
okay you don't have to do an indent

00:05:59,440 --> 00:06:05,759
okay you do need an end

00:06:02,800 --> 00:06:07,919
okay well that's uh okay so the syntax

00:06:05,759 --> 00:06:11,039
is different

00:06:07,919 --> 00:06:11,919
um like perl the parentheses are not

00:06:11,039 --> 00:06:15,440
needed

00:06:11,919 --> 00:06:17,680
so you so in like i didn't say this is

00:06:15,440 --> 00:06:20,960
going to be good

00:06:17,680 --> 00:06:21,840
i said so uh you can have parentheses or

00:06:20,960 --> 00:06:25,919
not

00:06:21,840 --> 00:06:27,199
take your pick uh the semicolon is

00:06:25,919 --> 00:06:29,280
available like pearl

00:06:27,199 --> 00:06:30,400
or you can use the python style end of

00:06:29,280 --> 00:06:32,639
line for

00:06:30,400 --> 00:06:36,319
uh so you can kind of write this like

00:06:32,639 --> 00:06:36,319
pearl or you can write it like python

00:06:36,400 --> 00:06:40,080
oh you can but you will need the parens

00:06:39,360 --> 00:06:43,919
or not

00:06:40,080 --> 00:06:45,840
with round print don't get me started

00:06:43,919 --> 00:06:47,680
and uh you can use quotes single quotes

00:06:45,840 --> 00:06:48,319
double quotes it also supports the back

00:06:47,680 --> 00:06:50,319
tick which

00:06:48,319 --> 00:06:51,680
executes shell commands nice bit of

00:06:50,319 --> 00:06:53,440
danger with that one and single and

00:06:51,680 --> 00:06:55,840
double are actually slightly different

00:06:53,440 --> 00:06:56,960
as we'll see some more basic syntax

00:06:55,840 --> 00:07:00,560
naming conventions

00:06:56,960 --> 00:07:02,240
unlike um python ruby is very consistent

00:07:00,560 --> 00:07:04,080
in the naming conventions that they use

00:07:02,240 --> 00:07:07,120
internally much more like java

00:07:04,080 --> 00:07:09,280
gets things uh very convenient very uh

00:07:07,120 --> 00:07:11,120
consistent although python 3 is

00:07:09,280 --> 00:07:13,919
certainly

00:07:11,120 --> 00:07:16,080
heading better more in that direction

00:07:13,919 --> 00:07:20,080
for my um

00:07:16,080 --> 00:07:20,080
my pearl friends there you go sigils

00:07:20,240 --> 00:07:26,560
i'm not getting much applause here

00:07:23,440 --> 00:07:30,000
dollar zero anyone

00:07:26,560 --> 00:07:33,759
any guesses program

00:07:30,000 --> 00:07:36,400
name cesar v zero of course

00:07:33,759 --> 00:07:36,400
dollar dollar

00:07:37,039 --> 00:07:40,880
pid yep same as same as shell really

00:07:39,199 --> 00:07:42,960
dollar colon

00:07:40,880 --> 00:07:44,160
and good luck i'm guessing that one

00:07:42,960 --> 00:07:48,400
that's your cis path

00:07:44,160 --> 00:07:48,400
your load path of course

00:07:50,639 --> 00:07:53,199
i have to say

00:07:53,840 --> 00:07:58,960
other ruby syntax ruby doesn't have

00:07:56,560 --> 00:08:00,639
until 2.0 keyword arguments

00:07:58,960 --> 00:08:03,919
and when it got them they're absolutely

00:08:00,639 --> 00:08:05,919
dreadful nothing nowhere near as good as

00:08:03,919 --> 00:08:07,280
pythons ruby does have variable

00:08:05,919 --> 00:08:10,639
interpolation with the

00:08:07,280 --> 00:08:13,680
hash curlies

00:08:10,639 --> 00:08:17,039
but we we've got the curly colon comma

00:08:13,680 --> 00:08:18,720
whoa that's awesome like

00:08:17,039 --> 00:08:21,599
it is that's like the best thing for

00:08:18,720 --> 00:08:24,639
that reason alone i'll use python

00:08:21,599 --> 00:08:27,120
um we don't have a plus plus

00:08:24,639 --> 00:08:28,879
there's no underscore underscore

00:08:27,120 --> 00:08:30,720
something or other underscore underscore

00:08:28,879 --> 00:08:32,800
assigning arrays to lists of variables

00:08:30,720 --> 00:08:36,000
unpacking is simpler and regex

00:08:32,800 --> 00:08:38,320
like perl is much much simpler

00:08:36,000 --> 00:08:40,000
so there's a typical example of a very

00:08:38,320 --> 00:08:42,000
simple ruby program

00:08:40,000 --> 00:08:43,120
you got your hash bang print for

00:08:42,000 --> 00:08:45,440
printing

00:08:43,120 --> 00:08:46,320
get s is like raw input and then calling

00:08:45,440 --> 00:08:48,640
its to

00:08:46,320 --> 00:08:50,399
underscore integer function or method

00:08:48,640 --> 00:08:52,320
really

00:08:50,399 --> 00:08:54,240
instead of doing the int of the result

00:08:52,320 --> 00:08:55,839
which looks a bit too functional this is

00:08:54,240 --> 00:08:58,959
more object oriented

00:08:55,839 --> 00:08:59,360
you've got if oh yeah fantastic let's

00:08:58,959 --> 00:09:03,519
change

00:08:59,360 --> 00:09:05,279
life again and look to be honest

00:09:03,519 --> 00:09:07,839
that's the one bit that just gets me

00:09:05,279 --> 00:09:11,120
every single

00:09:07,839 --> 00:09:13,040
is really for elsif um we don't have a

00:09:11,120 --> 00:09:15,360
in ruby we don't have that glorious

00:09:13,040 --> 00:09:15,920
range check that we can in python so we

00:09:15,360 --> 00:09:19,680
have to go

00:09:15,920 --> 00:09:20,240
and and there's no space printing with

00:09:19,680 --> 00:09:23,040
print

00:09:20,240 --> 00:09:24,880
you need the end and just as a side note

00:09:23,040 --> 00:09:25,600
in teaching rank beginners programming

00:09:24,880 --> 00:09:28,560
languages

00:09:25,600 --> 00:09:29,120
end is great getting that indent to

00:09:28,560 --> 00:09:30,880
finish

00:09:29,120 --> 00:09:32,880
is sometimes a challenge for absolute

00:09:30,880 --> 00:09:34,880
beginners

00:09:32,880 --> 00:09:36,000
some more very basic syntax true is

00:09:34,880 --> 00:09:39,200
lowercase okay

00:09:36,000 --> 00:09:41,600
good something else to remember

00:09:39,200 --> 00:09:42,240
there's a sweet little bit of for loop

00:09:41,600 --> 00:09:45,680
so

00:09:42,240 --> 00:09:48,720
clearly ruby's borrowed a lot from

00:09:45,680 --> 00:09:49,519
python well maybe it's bash that's our

00:09:48,720 --> 00:09:52,399
range

00:09:49,519 --> 00:09:53,839
and the hash curl is giving us

00:09:52,399 --> 00:09:55,600
interpolation but you can actually put

00:09:53,839 --> 00:09:59,600
code in there as well

00:09:55,600 --> 00:10:01,760
i plus 1 giving me a result of 1 2 3.

00:09:59,600 --> 00:10:03,680
got to have the end you can also use

00:10:01,760 --> 00:10:07,120
curly braces if you'd rather

00:10:03,680 --> 00:10:09,200
some basic ruby syntax one really

00:10:07,120 --> 00:10:11,600
sweet and interesting thing that comes

00:10:09,200 --> 00:10:13,600
up in ruby you can actually have

00:10:11,600 --> 00:10:15,120
a question mark or an exclamation mark

00:10:13,600 --> 00:10:17,440
as the final character

00:10:15,120 --> 00:10:19,360
in a method so if that method's

00:10:17,440 --> 00:10:22,399
returning a yes no true false

00:10:19,360 --> 00:10:24,880
ends in a question mark which actually

00:10:22,399 --> 00:10:27,920
sort of adds a lot of interest to it

00:10:24,880 --> 00:10:28,720
so you've got like string dot size which

00:10:27,920 --> 00:10:31,440
gives you the

00:10:28,720 --> 00:10:32,000
number of elements and string dot empty

00:10:31,440 --> 00:10:34,079
which tells

00:10:32,000 --> 00:10:35,200
you whether there's anything in there or

00:10:34,079 --> 00:10:37,120
not

00:10:35,200 --> 00:10:40,000
so the question mark making it very easy

00:10:37,120 --> 00:10:42,720
for me to remember that that returns a

00:10:40,000 --> 00:10:44,000
bool i don't know if this is because of

00:10:42,720 --> 00:10:46,079
the author's original

00:10:44,000 --> 00:10:47,360
non-english language but instead of up

00:10:46,079 --> 00:10:50,640
upper and lower it's

00:10:47,360 --> 00:10:51,360
up case and down case and it's start

00:10:50,640 --> 00:10:53,680
with

00:10:51,360 --> 00:10:56,399
not starts with although i can give it a

00:10:53,680 --> 00:10:58,240
list of possible prefixes which is nice

00:10:56,399 --> 00:11:01,839
i will forgive him though because his

00:10:58,240 --> 00:11:01,839
english is far better than my japanese

00:11:02,560 --> 00:11:06,240
here's a more interesting example using

00:11:04,320 --> 00:11:08,480
the built-in dir module

00:11:06,240 --> 00:11:09,680
the glob function star star getting me

00:11:08,480 --> 00:11:12,720
the direct

00:11:09,680 --> 00:11:14,160
directories and subdirectories slash

00:11:12,720 --> 00:11:18,399
square bracket a to c

00:11:14,160 --> 00:11:21,120
star dot curly r b comma p y

00:11:18,399 --> 00:11:21,920
do to build a block name is how we get

00:11:21,120 --> 00:11:24,720
the um

00:11:21,920 --> 00:11:25,440
the uh that's not really as it's the um

00:11:24,720 --> 00:11:28,160
it's the

00:11:25,440 --> 00:11:28,640
it's the variable of the in when you do

00:11:28,160 --> 00:11:32,000
a four

00:11:28,640 --> 00:11:34,399
in file name so and then there's this

00:11:32,000 --> 00:11:36,160
really interesting very pearlish this is

00:11:34,399 --> 00:11:39,200
very perl

00:11:36,160 --> 00:11:42,640
equals till to apply a regex

00:11:39,200 --> 00:11:44,320
none of this re.search business

00:11:42,640 --> 00:11:46,240
that's exactly the same as pearl for my

00:11:44,320 --> 00:11:48,079
pearl friends and interesting how you

00:11:46,240 --> 00:11:50,240
can have an if on the end of the

00:11:48,079 --> 00:11:52,160
statement rather than at the beginning

00:11:50,240 --> 00:11:54,480
again exactly straight out of pearl's

00:11:52,160 --> 00:11:54,480
book

00:11:54,880 --> 00:11:58,720
and uh it turns out that um sysadmin

00:11:56,880 --> 00:12:01,200
people like this this actually produces

00:11:58,720 --> 00:12:04,480
really quite sweet easy code to um

00:12:01,200 --> 00:12:06,639
to do i don't know if it's as readable

00:12:04,480 --> 00:12:08,839
as python

00:12:06,639 --> 00:12:11,839
but it's quite powerful that's pretty

00:12:08,839 --> 00:12:11,839
powerful

00:12:14,079 --> 00:12:18,000
that's right you could use it um as a um

00:12:16,399 --> 00:12:19,360
but you'd need the else if you had it as

00:12:18,000 --> 00:12:25,690
a um

00:12:19,360 --> 00:12:27,760
yeah yeah else none

00:12:25,690 --> 00:12:30,800
[Music]

00:12:27,760 --> 00:12:31,519
that's all the rubies constance here we

00:12:30,800 --> 00:12:34,320
go

00:12:31,519 --> 00:12:34,320
what is this print

00:12:37,839 --> 00:12:45,600
anyone anyone know python

00:12:41,920 --> 00:12:45,600
okay a few of you what is this print

00:12:49,360 --> 00:12:52,639
area of a circle yeah so the first one

00:12:50,959 --> 00:12:53,200
that prince would be the first print

00:12:52,639 --> 00:12:55,519
would

00:12:53,200 --> 00:12:55,519
print

00:12:57,440 --> 00:13:01,980
pie 3.14 blah blah blah and then this

00:13:00,560 --> 00:13:03,920
would print

00:13:01,980 --> 00:13:06,800
[Laughter]

00:13:03,920 --> 00:13:09,040
i was a little disturbed got to tell you

00:13:06,800 --> 00:13:10,399
about changing pie

00:13:09,040 --> 00:13:12,240
there's apparently some governor in

00:13:10,399 --> 00:13:15,120
texas that wanted to change it to four

00:13:12,240 --> 00:13:18,800
i'm just not a big fan of doing that

00:13:15,120 --> 00:13:21,680
that's just me maybe it's just me

00:13:18,800 --> 00:13:22,560
in ruby um it actually has a naming

00:13:21,680 --> 00:13:24,560
convention where

00:13:22,560 --> 00:13:25,760
things uh variables that start with a

00:13:24,560 --> 00:13:29,279
capital letter are

00:13:25,760 --> 00:13:32,320
constant so if i do that

00:13:29,279 --> 00:13:35,839
in ruby then it gives me pi

00:13:32,320 --> 00:13:35,839
and then a warning

00:13:36,560 --> 00:13:40,399
so thankfully all the piping people go

00:13:38,639 --> 00:13:41,920
yay well at least i can still change a

00:13:40,399 --> 00:13:43,760
constant

00:13:41,920 --> 00:13:46,079
phew i was getting a bit worried there

00:13:43,760 --> 00:13:49,760
no don't worry you can still change it

00:13:46,079 --> 00:13:51,199
but at least it will give you a warning

00:13:49,760 --> 00:13:53,279
what does that tell me as a python

00:13:51,199 --> 00:13:56,720
programmer as a python program i need to

00:13:53,279 --> 00:13:56,720
be careful about constants

00:13:57,440 --> 00:14:03,279
there that's all i'll say about that

00:13:59,199 --> 00:14:06,399
scope what is this print

00:14:03,279 --> 00:14:07,760
five awesome good

00:14:06,399 --> 00:14:10,880
maybe some of you should come to my

00:14:07,760 --> 00:14:15,199
python 101 before

00:14:10,880 --> 00:14:16,880
okay that's five and in ruby

00:14:15,199 --> 00:14:18,480
that's how it would look again we've got

00:14:16,880 --> 00:14:20,800
def just like python

00:14:18,480 --> 00:14:22,639
um you could put parens after it if you

00:14:20,800 --> 00:14:24,560
wanted in fact you can even put a colon

00:14:22,639 --> 00:14:27,440
on the end if you wanted

00:14:24,560 --> 00:14:28,800
and the call doesn't need parens but put

00:14:27,440 --> 00:14:30,639
them on if you want

00:14:28,800 --> 00:14:32,560
but this is actually quite different

00:14:30,639 --> 00:14:34,480
ruby's scope of

00:14:32,560 --> 00:14:36,480
mainline variables that'll give you a

00:14:34,480 --> 00:14:38,000
name error

00:14:36,480 --> 00:14:39,680
what does that tell me that tells me

00:14:38,000 --> 00:14:40,320
that python programmers need to be

00:14:39,680 --> 00:14:44,240
careful

00:14:40,320 --> 00:14:44,720
about scope maybe i'll give you a harder

00:14:44,240 --> 00:14:48,399
one

00:14:44,720 --> 00:14:48,399
more on scope what does that print

00:14:50,880 --> 00:14:55,519
six five good what is that print

00:14:55,600 --> 00:14:59,199
unbound excellent if you don't know that

00:14:57,600 --> 00:15:02,800
this gives you an unbound local

00:14:59,199 --> 00:15:06,079
you need to learn some more python

00:15:02,800 --> 00:15:06,959
um that that could be solved if i wanted

00:15:06,079 --> 00:15:08,240
that to work

00:15:06,959 --> 00:15:09,760
and i don't really know what i'm trying

00:15:08,240 --> 00:15:10,720
to do there so i don't really know how

00:15:09,760 --> 00:15:12,639
to solve it

00:15:10,720 --> 00:15:14,160
but one way of solving that in python is

00:15:12,639 --> 00:15:15,920
with global

00:15:14,160 --> 00:15:17,600
saying from here down within this

00:15:15,920 --> 00:15:20,720
function the name i

00:15:17,600 --> 00:15:23,360
is corresponding to global scope

00:15:20,720 --> 00:15:24,320
and that will print out global i which

00:15:23,360 --> 00:15:26,959
is 5

00:15:24,320 --> 00:15:28,160
6 and then that will have changed global

00:15:26,959 --> 00:15:30,160
i

00:15:28,160 --> 00:15:32,000
uh how does ruby do it how does ruby

00:15:30,160 --> 00:15:34,399
deal with the issue of scope

00:15:32,000 --> 00:15:34,399
like this

00:15:35,120 --> 00:15:41,839
yep them sigils a dollar prefix makes

00:15:38,880 --> 00:15:41,839
that a global variable

00:15:42,480 --> 00:15:45,120
a fluid now

00:15:46,880 --> 00:15:50,399
we're having fun are we having fun who

00:15:50,000 --> 00:15:53,839
thinks

00:15:50,399 --> 00:15:54,959
python's a great language i haven't won

00:15:53,839 --> 00:15:59,440
you over yet then

00:15:54,959 --> 00:15:59,440
no okay i'll keep going see how we go

00:15:59,759 --> 00:16:03,600
constance scope global scope

00:16:05,600 --> 00:16:11,519
ah here's one bit which i find quite

00:16:07,519 --> 00:16:15,279
nice i'm often teaching beginners python

00:16:11,519 --> 00:16:19,360
and that's a common uh structure they do

00:16:15,279 --> 00:16:21,040
and that gives me what none

00:16:19,360 --> 00:16:24,000
and it just gets me every time they go

00:16:21,040 --> 00:16:25,600
why is this print up no no

00:16:24,000 --> 00:16:27,040
well it's a mutable type but it doesn't

00:16:25,600 --> 00:16:27,630
return a copy because it's all by

00:16:27,040 --> 00:16:29,440
reference

00:16:27,630 --> 00:16:31,680
[Music]

00:16:29,440 --> 00:16:34,000
it's a bit of it's a challenge to get

00:16:31,680 --> 00:16:35,279
right because there's nothing obvious in

00:16:34,000 --> 00:16:36,720
python that will tell you this you

00:16:35,279 --> 00:16:37,519
actually have to dive into the docs and

00:16:36,720 --> 00:16:39,040
half the time

00:16:37,519 --> 00:16:40,800
the docs won't actually specifically

00:16:39,040 --> 00:16:43,040
tell you what's going on here

00:16:40,800 --> 00:16:44,720
this one the docs are helpful but in

00:16:43,040 --> 00:16:47,120
ruby

00:16:44,720 --> 00:16:47,920
the trailing exclamation mark the bang

00:16:47,120 --> 00:16:50,560
means yep

00:16:47,920 --> 00:16:51,199
this mutates the object so i can look at

00:16:50,560 --> 00:16:52,399
the method

00:16:51,199 --> 00:16:54,560
and by the way they're actually two

00:16:52,399 --> 00:16:56,079
completely different methods

00:16:54,560 --> 00:16:57,680
there's the sort method that returns a

00:16:56,079 --> 00:17:00,959
copy of the list

00:16:57,680 --> 00:17:02,880
um and the the bang which returns uh

00:17:00,959 --> 00:17:05,199
which which actually returns a reference

00:17:02,880 --> 00:17:05,839
to the to the mutated list but mutates

00:17:05,199 --> 00:17:08,240
it in

00:17:05,839 --> 00:17:10,319
in place where it is what does that tell

00:17:08,240 --> 00:17:12,319
me as a python programmer i need to be

00:17:10,319 --> 00:17:15,439
careful about mutating methods

00:17:12,319 --> 00:17:17,679
methods that mutate the object i kind of

00:17:15,439 --> 00:17:18,319
wish that python had a special return

00:17:17,679 --> 00:17:21,520
type

00:17:18,319 --> 00:17:24,000
that would go crash me

00:17:21,520 --> 00:17:26,079
if someone tried to assign it but i said

00:17:24,000 --> 00:17:27,120
this was not about how i want python to

00:17:26,079 --> 00:17:28,640
change

00:17:27,120 --> 00:17:30,799
but i do like that that's a nice

00:17:28,640 --> 00:17:31,679
indicator unfortunately in ruby it's not

00:17:30,799 --> 00:17:33,760
a mandatory

00:17:31,679 --> 00:17:35,280
so a mutating method doesn't have to

00:17:33,760 --> 00:17:37,600
have a bang trailing

00:17:35,280 --> 00:17:39,280
it'd just be a nice idea if it did and

00:17:37,600 --> 00:17:40,960
most of the standard library does give

00:17:39,280 --> 00:17:45,200
you that

00:17:40,960 --> 00:17:48,080
so for my pearl friends you've got chomp

00:17:45,200 --> 00:17:50,160
which modifies in place or you've got

00:17:48,080 --> 00:17:53,200
chomp which doesn't

00:17:50,160 --> 00:17:54,640
which which returns a change note that

00:17:53,200 --> 00:17:56,640
that's gets the function so if you'd

00:17:54,640 --> 00:17:58,480
like you could go gets parent paren dot

00:17:56,640 --> 00:18:02,799
chomp parental in

00:17:58,480 --> 00:18:02,799
but i'm over parent

00:18:02,960 --> 00:18:08,880
she's a witch so what would that print

00:18:14,640 --> 00:18:20,799
she's not a witch how can i i don't get

00:18:17,360 --> 00:18:20,799
it she's good there's an s in there

00:18:21,840 --> 00:18:25,600
that's right zero zero is false now

00:18:25,039 --> 00:18:28,320
whoops

00:18:25,600 --> 00:18:29,039
are you all sitting down oh yeah you are

00:18:28,320 --> 00:18:30,640
sitting down

00:18:29,039 --> 00:18:33,120
person up the back stand up sit down

00:18:30,640 --> 00:18:34,660
here you go in ruby

00:18:33,120 --> 00:18:37,859
zero is true

00:18:34,660 --> 00:18:37,859
[Music]

00:18:39,919 --> 00:18:45,840
what how yeah that's right

00:18:43,120 --> 00:18:48,080
zero is true so index which actually

00:18:45,840 --> 00:18:51,039
returns the same thing zero based offset

00:18:48,080 --> 00:18:51,760
of the substring within the main string

00:18:51,039 --> 00:18:54,000
returns

00:18:51,760 --> 00:18:56,559
zero if it is found at the beginning but

00:18:54,000 --> 00:18:58,480
zero is true

00:18:56,559 --> 00:18:59,919
and therefore it returns none well

00:18:58,480 --> 00:19:01,280
actually the ruby equivalent of none

00:18:59,919 --> 00:19:04,000
which is nil

00:19:01,280 --> 00:19:05,760
and nil and false are the only things

00:19:04,000 --> 00:19:07,520
that are false

00:19:05,760 --> 00:19:09,840
so it turns out this is actually really

00:19:07,520 --> 00:19:12,240
nice again beginners would expect that

00:19:09,840 --> 00:19:14,080
zero would be a true

00:19:12,240 --> 00:19:16,400
unless you've come from c c plus plus

00:19:14,080 --> 00:19:20,320
pearl java

00:19:16,400 --> 00:19:20,320
bash and well really anything

00:19:20,480 --> 00:19:25,039
but those that haven't had a programming

00:19:22,080 --> 00:19:27,520
experience this actually um

00:19:25,039 --> 00:19:29,440
uh makes sense so it's actually quite an

00:19:27,520 --> 00:19:30,320
interesting thing because really zero is

00:19:29,440 --> 00:19:33,440
an object

00:19:30,320 --> 00:19:36,160
even in python so how come that object

00:19:33,440 --> 00:19:36,160
is not true

00:19:36,480 --> 00:19:40,799
um some other uh aspects that are

00:19:40,080 --> 00:19:43,600
interesting

00:19:40,799 --> 00:19:45,600
to consider uh the object model is very

00:19:43,600 --> 00:19:48,480
heavily inspired by python

00:19:45,600 --> 00:19:50,640
but um matt sm said that he wanted a

00:19:48,480 --> 00:19:50,960
language that was more object-oriented

00:19:50,640 --> 00:19:52,480
now

00:19:50,960 --> 00:19:54,240
going how can you be more object

00:19:52,480 --> 00:19:56,000
oriented than python

00:19:54,240 --> 00:19:57,679
well there's quite a bit in python

00:19:56,000 --> 00:19:58,320
that's either not object oriented or

00:19:57,679 --> 00:19:59,760
doesn't look

00:19:58,320 --> 00:20:01,440
object oriented things like all your

00:19:59,760 --> 00:20:04,000
built-in functions like abs

00:20:01,440 --> 00:20:04,640
and raw input and int and stir and all

00:20:04,000 --> 00:20:06,720
of those

00:20:04,640 --> 00:20:08,799
they're just sort of out there floating

00:20:06,720 --> 00:20:12,159
where did they come from

00:20:08,799 --> 00:20:14,400
um so global functions those sorts of

00:20:12,159 --> 00:20:17,039
things

00:20:14,400 --> 00:20:18,080
ruby wraps all of those up in ruby

00:20:17,039 --> 00:20:20,320
everything's an object

00:20:18,080 --> 00:20:21,600
which is the same in python but in ruby

00:20:20,320 --> 00:20:24,720
quite different to

00:20:21,600 --> 00:20:25,919
python everything's an expression so you

00:20:24,720 --> 00:20:28,080
can do embedded

00:20:25,919 --> 00:20:29,919
assignments and have the result of that

00:20:28,080 --> 00:20:31,440
being something which you can then test

00:20:29,919 --> 00:20:33,840
in a while loop

00:20:31,440 --> 00:20:35,280
while test which c programmer would just

00:20:33,840 --> 00:20:38,880
naturally do

00:20:35,280 --> 00:20:42,000
and even a block of code is in fact an

00:20:38,880 --> 00:20:45,360
object just like a python compiled

00:20:42,000 --> 00:20:46,640
code object cute little interesting

00:20:45,360 --> 00:20:49,919
thing because it loves

00:20:46,640 --> 00:20:52,720
objects so much seven dot is actually a

00:20:49,919 --> 00:20:52,720
syntax error

00:20:52,799 --> 00:20:56,480
so floating point numbers have to be

00:20:54,480 --> 00:20:59,919
specified as 7.0

00:20:56,480 --> 00:21:00,880
or 0.9 because integers plain old plain

00:20:59,919 --> 00:21:02,640
interplay

00:21:00,880 --> 00:21:04,480
everyday run-of-the-mill plane just

00:21:02,640 --> 00:21:09,679
number five kind of integers

00:21:04,480 --> 00:21:09,679
have methods like five times

00:21:12,880 --> 00:21:16,240
five dot times yeah you can't use the

00:21:15,600 --> 00:21:18,880
dot there

00:21:16,240 --> 00:21:19,520
oh yeah you could yeah you'd not not not

00:21:18,880 --> 00:21:22,559
built tin

00:21:19,520 --> 00:21:23,440
but you could buy and bind the times oh

00:21:22,559 --> 00:21:25,280
isn't it yeah

00:21:23,440 --> 00:21:27,280
okay talk to me afterwards you can use

00:21:25,280 --> 00:21:28,240
dot because then it would look like a

00:21:27,280 --> 00:21:31,120
floating point ah

00:21:28,240 --> 00:21:32,400
yes you can't use the actual dot oh yeah

00:21:31,120 --> 00:21:34,799
yeah yeah if you go paren

00:21:32,400 --> 00:21:36,640
five per in yeah then you can go but

00:21:34,799 --> 00:21:38,320
that's ugly this is just like five dot

00:21:36,640 --> 00:21:40,640
times

00:21:38,320 --> 00:21:42,640
which is like a whole set of parens that

00:21:40,640 --> 00:21:45,679
you don't have to type

00:21:42,640 --> 00:21:47,520
which is

00:21:45,679 --> 00:21:49,440
oh yeah and there's those sigils those

00:21:47,520 --> 00:21:49,760
dollar signs that i um that i pointed

00:21:49,440 --> 00:21:53,600
out

00:21:49,760 --> 00:21:56,799
you also get instead of self dot it's at

00:21:53,600 --> 00:21:56,799
and you'll go of course

00:21:57,200 --> 00:22:00,960
um so you don't have to type self dot at

00:21:59,280 --> 00:22:04,240
gives you access to the

00:22:00,960 --> 00:22:06,080
um an attribute of ruby and at will give

00:22:04,240 --> 00:22:07,200
you the class shared variable static

00:22:06,080 --> 00:22:10,960
variables within the

00:22:07,200 --> 00:22:11,760
within the class classes are open so you

00:22:10,960 --> 00:22:15,200
can

00:22:11,760 --> 00:22:19,039
re-type class space fix num

00:22:15,200 --> 00:22:19,440
and do more so monkey patching is it in

00:22:19,039 --> 00:22:21,679
fact

00:22:19,440 --> 00:22:23,360
i think it's a little clearer that's a

00:22:21,679 --> 00:22:24,159
personal view all of this is a personal

00:22:23,360 --> 00:22:26,720
view by the way

00:22:24,159 --> 00:22:29,840
forgot to mention that it's very easy to

00:22:26,720 --> 00:22:34,000
inherit and extend built-in classes

00:22:29,840 --> 00:22:37,600
um ruby uh going a little further

00:22:34,000 --> 00:22:38,960
ruby environment um irb which is the

00:22:37,600 --> 00:22:41,679
interactive ruby

00:22:38,960 --> 00:22:42,240
has default command completion so if

00:22:41,679 --> 00:22:46,480
i've got

00:22:42,240 --> 00:22:49,520
um you know ruby i can whoops five dot

00:22:46,480 --> 00:22:52,159
tab tab display a 104 possibilities

00:22:49,520 --> 00:22:55,840
shot so there's all your methods of the

00:22:52,159 --> 00:22:55,840
number five

00:22:57,360 --> 00:23:02,400
so that's uh that's nice but it's def

00:23:00,000 --> 00:23:04,480
now i know ipython has default

00:23:02,400 --> 00:23:07,039
command completion but um the standard

00:23:04,480 --> 00:23:11,200
python interpreter doesn't

00:23:07,039 --> 00:23:13,360
ah i need 3.4 we all need 3.4

00:23:11,200 --> 00:23:14,720
um so irb is a bit of a cross between

00:23:13,360 --> 00:23:16,400
python and ipython

00:23:14,720 --> 00:23:18,559
um just for those that are interested in

00:23:16,400 --> 00:23:21,200
this um there is support for ipython

00:23:18,559 --> 00:23:22,320
notebook but numpy scipy and matplotlib

00:23:21,200 --> 00:23:24,159
or

00:23:22,320 --> 00:23:26,559
there is some work to get some of that

00:23:24,159 --> 00:23:28,240
into ruby

00:23:26,559 --> 00:23:31,120
this seems like a little thing but i'm

00:23:28,240 --> 00:23:32,720
often jumping between windows and unix

00:23:31,120 --> 00:23:34,880
lots of my clients run windows and i'm

00:23:32,720 --> 00:23:36,320
running python and i do a control d

00:23:34,880 --> 00:23:38,240
i know this doesn't work under windows

00:23:36,320 --> 00:23:41,520
you've got to control z

00:23:38,240 --> 00:23:41,760
irb is control d on every platform minus

00:23:41,520 --> 00:23:44,960
r

00:23:41,760 --> 00:23:49,679
debug is basically the same as pdb rdoc

00:23:44,960 --> 00:23:52,400
is similar to pi dock standard library

00:23:49,679 --> 00:23:53,840
this the standard import there is no

00:23:52,400 --> 00:23:56,799
easy as

00:23:53,840 --> 00:23:59,760
you learn to love python's import as

00:23:56,799 --> 00:24:02,880
pretty quickly when you're using ruby

00:23:59,760 --> 00:24:04,080
require takes a string which is

00:24:02,880 --> 00:24:06,880
interesting

00:24:04,080 --> 00:24:08,799
so it means that things like um paths

00:24:06,880 --> 00:24:10,640
absolute paths relative paths are

00:24:08,799 --> 00:24:12,960
actually quite obvious

00:24:10,640 --> 00:24:14,960
so now i know python has dot and dot dot

00:24:12,960 --> 00:24:16,640
and but you need to be quite careful

00:24:14,960 --> 00:24:19,120
about understanding where am i getting

00:24:16,640 --> 00:24:21,279
this module not that i'm promoting

00:24:19,120 --> 00:24:23,360
absolute paths by the way

00:24:21,279 --> 00:24:24,960
for files because that's a really bad

00:24:23,360 --> 00:24:28,320
idea but

00:24:24,960 --> 00:24:30,400
i talked about dollar colon or

00:24:28,320 --> 00:24:32,480
to be thankful you can dollar load path

00:24:30,400 --> 00:24:34,400
to see your sis path

00:24:32,480 --> 00:24:36,640
the standard library in ruby is on par

00:24:34,400 --> 00:24:39,360
with pythons

00:24:36,640 --> 00:24:41,039
as far as you know coverage and stuff uh

00:24:39,360 --> 00:24:42,480
ruby naming conventions are consistent

00:24:41,039 --> 00:24:44,400
and as i mentioned python is getting

00:24:42,480 --> 00:24:45,600
better at that

00:24:44,400 --> 00:24:50,480
other differences we don't have

00:24:45,600 --> 00:24:50,480
decorators oh i love decorators

00:24:51,279 --> 00:24:57,440
good excellent yeah applaud now

00:24:54,480 --> 00:24:58,640
um ruby has clearly borrowed a few

00:24:57,440 --> 00:25:00,480
things from python ads

00:24:58,640 --> 00:25:02,559
reminds me i forgot to put on my ruby

00:25:00,480 --> 00:25:05,679
t-shirt but anyway

00:25:02,559 --> 00:25:07,120
there is a yield yay we've got def four

00:25:05,679 --> 00:25:11,200
item in iterable

00:25:07,120 --> 00:25:12,559
is all borrowed straight from python

00:25:11,200 --> 00:25:14,720
i don't know if this is really

00:25:12,559 --> 00:25:17,679
meaningful i don't think so

00:25:14,720 --> 00:25:18,400
but anyway uh this is a module counts of

00:25:17,679 --> 00:25:20,640
the

00:25:18,400 --> 00:25:22,159
from module counts.com of the total

00:25:20,640 --> 00:25:24,000
number of modules in cpan

00:25:22,159 --> 00:25:25,360
the pearl comprehensive perl archive

00:25:24,000 --> 00:25:28,400
network um

00:25:25,360 --> 00:25:29,279
pi pi which the other day was like 46

00:25:28,400 --> 00:25:31,520
00:25:29,279 --> 00:25:32,720
and ruby gems so their modules are

00:25:31,520 --> 00:25:34,559
called gems

00:25:32,720 --> 00:25:36,880
and there's a standard installer for

00:25:34,559 --> 00:25:39,440
that gem

00:25:36,880 --> 00:25:40,400
now i do discount numbers as they're

00:25:39,440 --> 00:25:42,000
just numbers but

00:25:40,400 --> 00:25:43,840
there is quite a lot of modules

00:25:42,000 --> 00:25:46,880
available in ruby

00:25:43,840 --> 00:25:49,440
maybe i'll just say it like that

00:25:46,880 --> 00:25:50,720
um the community ah they have a

00:25:49,440 --> 00:25:54,640
conference as well

00:25:50,720 --> 00:25:56,320
uh rubycon and uh this year in february

00:25:54,640 --> 00:25:58,159
when i went um it was held at luna park

00:25:56,320 --> 00:25:59,039
so that was the view outside the uh the

00:25:58,159 --> 00:26:02,000
window

00:25:59,039 --> 00:26:02,960
got a bit distracted but because it's at

00:26:02,000 --> 00:26:06,880
luna park

00:26:02,960 --> 00:26:06,880
what can i say you know like dodgems

00:26:07,120 --> 00:26:10,799
and coney island and whereas here in

00:26:10,159 --> 00:26:12,240
brisbane

00:26:10,799 --> 00:26:14,159
no offense if you're from brisbane

00:26:12,240 --> 00:26:18,799
you've got uh fake beach

00:26:14,159 --> 00:26:20,720
and i shouldn't say things like that

00:26:18,799 --> 00:26:22,159
it's warm here i will definitely i'll

00:26:20,720 --> 00:26:24,240
give you that um

00:26:22,159 --> 00:26:25,440
interestingly there's many more women in

00:26:24,240 --> 00:26:28,320
the ruby community

00:26:25,440 --> 00:26:29,679
um at the ruby conference there's very

00:26:28,320 --> 00:26:31,840
many and i don't think that's because

00:26:29,679 --> 00:26:33,120
python community is doing anything wrong

00:26:31,840 --> 00:26:35,120
i think that's actually this is actually

00:26:33,120 --> 00:26:37,919
because of where lots of people

00:26:35,120 --> 00:26:39,679
coming into ruby so for example there's

00:26:37,919 --> 00:26:42,159
a group called rails girls and i'm

00:26:39,679 --> 00:26:43,520
extremely heartened to hear about um

00:26:42,159 --> 00:26:45,919
django girls

00:26:43,520 --> 00:26:47,760
and that's an excellent move to get lots

00:26:45,919 --> 00:26:51,039
of beginners

00:26:47,760 --> 00:26:52,720
into the into the community

00:26:51,039 --> 00:26:54,559
um they have more presence in beginners

00:26:52,720 --> 00:26:55,200
and in fact in my experience it looks

00:26:54,559 --> 00:26:57,840
like

00:26:55,200 --> 00:26:58,880
in python most python people know other

00:26:57,840 --> 00:27:00,799
languages

00:26:58,880 --> 00:27:01,919
we love python because we had to do c

00:27:00,799 --> 00:27:03,679
before

00:27:01,919 --> 00:27:05,919
or we had to do perl or we were doing

00:27:03,679 --> 00:27:07,440
bash most ruby people that's all they

00:27:05,919 --> 00:27:09,120
know they just know ruby

00:27:07,440 --> 00:27:10,480
like wow where do you get your

00:27:09,120 --> 00:27:12,559
inspiration or where do you get your

00:27:10,480 --> 00:27:14,960
idea for something else

00:27:12,559 --> 00:27:16,799
so um having said that they have a very

00:27:14,960 --> 00:27:17,760
strong presence with beginners and the

00:27:16,799 --> 00:27:20,240
ruby conf was at

00:27:17,760 --> 00:27:21,360
luna park and most ruby people only know

00:27:20,240 --> 00:27:23,360
ruby

00:27:21,360 --> 00:27:25,760
so what can we learn as python

00:27:23,360 --> 00:27:27,440
programmers what can we learn from ruby

00:27:25,760 --> 00:27:28,880
we need more racing cars that's

00:27:27,440 --> 00:27:31,039
certainly true um

00:27:28,880 --> 00:27:33,279
i don't quite have enough money to um

00:27:31,039 --> 00:27:35,679
get a began is under

00:27:33,279 --> 00:27:37,840
still saving they've got a national park

00:27:35,679 --> 00:27:40,080
we need to petition someone to get a

00:27:37,840 --> 00:27:42,480
python national park we need to be

00:27:40,080 --> 00:27:45,039
careful with constance

00:27:42,480 --> 00:27:46,000
not mutating the constants we need to be

00:27:45,039 --> 00:27:47,760
careful with scope

00:27:46,000 --> 00:27:49,679
as python programmers watch out for

00:27:47,760 --> 00:27:53,039
globals watch out for

00:27:49,679 --> 00:27:55,440
functions modifying or even accessing um

00:27:53,039 --> 00:27:56,240
the main lines variables tight coupling

00:27:55,440 --> 00:27:59,520
is a bad

00:27:56,240 --> 00:28:02,080
idea capital b capital i be careful with

00:27:59,520 --> 00:28:05,279
in place mutating methods like reverse

00:28:02,080 --> 00:28:07,279
and sort be careful with zero watch out

00:28:05,279 --> 00:28:09,600
for functions that return an offset

00:28:07,279 --> 00:28:12,960
because the caller might consider that

00:28:09,600 --> 00:28:16,559
zero was false when in fact it's

00:28:12,960 --> 00:28:19,840
uh yes i did find and consider carefully

00:28:16,559 --> 00:28:19,840
your naming conventions

00:28:20,240 --> 00:28:26,960
so credits thanks to

00:28:23,840 --> 00:28:30,159
kaiser chiefs for ruby ruby ruby

00:28:26,960 --> 00:28:32,960
buddy for helping editing that clip seek

00:28:30,159 --> 00:28:33,840
and module counts matt's for ruby cueto

00:28:32,960 --> 00:28:38,240
for

00:28:33,840 --> 00:28:38,240
python questions

00:28:40,000 --> 00:28:45,840
thank you

00:28:50,960 --> 00:28:53,039

YouTube URL: https://www.youtube.com/watch?v=m-xce-IJ8s4


