Title: (Benford's) Law and Order (Fraud) by Rhys Elsmore
Publication date: 2014-08-11
Playlist: PyCon Australia 2014
Description: 
	"On the internet, fraudulent and abusive behavior is considered especially heinous. At Heroku, the dedicated detectives who investigate these vicious felonies are members of an elite squad armed with large amounts of data and spare CPU cycles. These are their stories."

Bad behavior can wreak havoc on your web application. It might be mass-signups, fraudulent orders, spammy posts, right up to automated bots designed to work around restrictions you have set in place; this can cost you time, resources, and lots of money. All is not lost though. Despite the ongoing efforts of abusers, their activity still leaves fingerprints and clues, which you can use to your advantage.

This talk is a 101 introduction to some of the methods which you can use to separate good from bad users using a combination of data mining, statistics, and some some basic machine learning. Basically, I want to get you thinking like an internet detective.

Some of the topics I will be covering include:

- Collecting and preparing data sources.
- Effective methods for classifying existing users.
- Feature extracting; what works and what doesn't.
- Analyzing user-provided data to profile your users, and weed out the bad operators.
- Determining a user's intentions by looking at their access patterns.
- Making use of 'outliers' to find suspicious users and transactions.
- Stopping bad users before they can wreak havoc.

As this is a 101 topic I will provide some basic examples, as well as links to more in-depth resources for further reading. I would recommend this talk to developers of web applications, especially those with a large number of users, the ability to process credit cards, or with a 'free' offering. Attendees should have a basic understanding of topics such as SQL, Pandas, and some basic understanding of mathematics and statistics, although this is not essential as I will be providing links to further reading.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:05,200 --> 00:00:09,370
of skills at his side he spends a lot of

00:00:07,930 --> 00:00:11,469
his time developing models and

00:00:09,370 --> 00:00:13,150
distributed systems designed to lower

00:00:11,469 --> 00:00:16,240
the rates of abusive content and

00:00:13,150 --> 00:00:18,460
behavior on Heroku malware phishing

00:00:16,240 --> 00:00:21,099
pages ddos copyright infringement

00:00:18,460 --> 00:00:27,969
building avoidance no abuse is safe

00:00:21,099 --> 00:00:30,939
ladies and gentlemen resales more that

00:00:27,969 --> 00:00:31,660
was quite the introduction so anyway I'm

00:00:30,939 --> 00:00:33,340
going to need some audience

00:00:31,660 --> 00:00:35,110
participation normally like someone

00:00:33,340 --> 00:00:38,800
asked a question no one yells out so

00:00:35,110 --> 00:00:40,840
please yell out anyway I've got some

00:00:38,800 --> 00:00:43,300
information in this so any stories you

00:00:40,840 --> 00:00:45,010
see the names have been changed you know

00:00:43,300 --> 00:00:47,340
no no resemblance to real people at all

00:00:45,010 --> 00:00:49,510
I just don't want to get in trouble and

00:00:47,340 --> 00:00:51,160
as a bit of a note we've had some

00:00:49,510 --> 00:00:52,540
compliance changes at Heroku so I've had

00:00:51,160 --> 00:00:55,989
to remove a bit of information from my

00:00:52,540 --> 00:00:57,190
slides and change it around a bit so I'm

00:00:55,989 --> 00:00:59,079
going to work on getting that out there

00:00:57,190 --> 00:01:00,720
in terms of open sourcing a few things

00:00:59,079 --> 00:01:04,079
and getting some data sets available

00:01:00,720 --> 00:01:07,119
hopefully this sort of makes up for it

00:01:04,079 --> 00:01:09,819
but so in two thousand attend I left

00:01:07,119 --> 00:01:11,439
tech I went join the ambulance service I

00:01:09,819 --> 00:01:13,689
just had to do this bit of a lifelong

00:01:11,439 --> 00:01:16,359
ambition thing and you know change it up

00:01:13,689 --> 00:01:17,799
a bit so they had these these procedures

00:01:16,359 --> 00:01:19,479
that you follow number two is assessed

00:01:17,799 --> 00:01:20,920
the situation whenever you go to

00:01:19,479 --> 00:01:23,409
someone's house you assess what's going

00:01:20,920 --> 00:01:24,609
on so can someone tell me you turn up to

00:01:23,409 --> 00:01:28,659
this house and you hear high-pitched

00:01:24,609 --> 00:01:30,880
barking what do you expect that's right

00:01:28,659 --> 00:01:34,149
this bastard

00:01:30,880 --> 00:01:35,829
straight out yeah okay same scenario but

00:01:34,149 --> 00:01:42,460
this house high-pitched barking what do

00:01:35,829 --> 00:01:45,070
you expect now this guy all the drunk

00:01:42,460 --> 00:01:46,719
relatives but I mean you know there's

00:01:45,070 --> 00:01:48,009
detective skills use so you find

00:01:46,719 --> 00:01:49,450
medicine bottles and say it was given to

00:01:48,009 --> 00:01:51,130
the patient yesterday and all the pills

00:01:49,450 --> 00:01:52,210
are going that's that's a little bit of

00:01:51,130 --> 00:01:53,140
an indicator something's not right they

00:01:52,210 --> 00:01:55,780
could have dropped it they could have

00:01:53,140 --> 00:01:57,009
taken it all same as this place you

00:01:55,780 --> 00:01:59,740
might need cops you might need a

00:01:57,009 --> 00:02:01,810
bulldozer it just doesn't point to

00:01:59,740 --> 00:02:03,819
something you know something doesn't

00:02:01,810 --> 00:02:05,619
seem right and you know you've got a

00:02:03,819 --> 00:02:06,970
plan you go to some suburbs and you

00:02:05,619 --> 00:02:08,590
might need to be a bit consider about

00:02:06,970 --> 00:02:12,760
what sort of people you going to and

00:02:08,590 --> 00:02:15,880
plan ahead so stories are good and this

00:02:12,760 --> 00:02:19,420
will make sense of it later on so anyway

00:02:15,880 --> 00:02:21,519
this is me on Twitter ah yeah and my

00:02:19,420 --> 00:02:24,730
talk Benford's law and order fraud so

00:02:21,519 --> 00:02:25,930
anyone here a fan of law and order yeah

00:02:24,730 --> 00:02:30,790
that's right who hasn't watched it

00:02:25,930 --> 00:02:32,890
before get out I'm a big fan of

00:02:30,790 --> 00:02:34,269
detective shows and all of the law and

00:02:32,890 --> 00:02:36,160
order spin-offs I just have this

00:02:34,269 --> 00:02:39,430
unhealthy obsession with the demeanor

00:02:36,160 --> 00:02:41,890
detective Elliot Stabler so I decide to

00:02:39,430 --> 00:02:45,840
base my talk on it so Benford's law this

00:02:41,890 --> 00:02:49,000
physicist named Frank Bedford here he

00:02:45,840 --> 00:02:51,760
stated 1938 that this you know the

00:02:49,000 --> 00:02:53,319
frequency distribution of digits in many

00:02:51,760 --> 00:02:54,700
real sort of real sources of data

00:02:53,319 --> 00:02:57,250
usually turns out that they're not

00:02:54,700 --> 00:03:00,310
uniform the theory was originally

00:02:57,250 --> 00:03:02,500
started by simon newcomb in 1881 that it

00:03:00,310 --> 00:03:04,299
got taken off him so anyway numbers

00:03:02,500 --> 00:03:06,040
actually looked like this in a lot of

00:03:04,299 --> 00:03:07,569
naturally occurring datasets you know

00:03:06,040 --> 00:03:12,040
electricity bills street addresses stock

00:03:07,569 --> 00:03:14,260
prices the first digit is usually one I

00:03:12,040 --> 00:03:15,579
won't explain what why it works i mean

00:03:14,260 --> 00:03:16,959
there's plenty of articles online but

00:03:15,579 --> 00:03:19,420
it's just a bit of an interesting war

00:03:16,959 --> 00:03:21,040
there's some pretty cool uses so it's

00:03:19,420 --> 00:03:22,780
used in fraud detection so election

00:03:21,040 --> 00:03:24,250
fraud tax fraud accounting fraud and

00:03:22,780 --> 00:03:26,019
there's evidence that that's been

00:03:24,250 --> 00:03:29,139
submitted to the US courts it's actually

00:03:26,019 --> 00:03:30,880
based on this law so I don't know it's

00:03:29,139 --> 00:03:32,349
one of my favorites and it links into

00:03:30,880 --> 00:03:35,049
order fraud because that's what I do at

00:03:32,349 --> 00:03:37,840
Heroku people avoiding bills or using

00:03:35,049 --> 00:03:39,160
stolen credit cards so as said in the

00:03:37,840 --> 00:03:42,370
introduction I'm on the platform

00:03:39,160 --> 00:03:44,019
security team I lead the antabuse effort

00:03:42,370 --> 00:03:44,740
and that's stopping any nasty behavior

00:03:44,019 --> 00:03:48,760
that may cost

00:03:44,740 --> 00:03:55,210
money or take us down get ready for this

00:03:48,760 --> 00:03:56,830
is my favorite part so this is about

00:03:55,210 --> 00:03:58,330
four months after I started at Heroku

00:03:56,830 --> 00:04:00,460
and the idea of abuse started to be a

00:03:58,330 --> 00:04:02,950
first class citizen there seemed to be a

00:04:00,460 --> 00:04:04,990
few dodgy things going on it looked like

00:04:02,950 --> 00:04:08,200
it over always been there but not much

00:04:04,990 --> 00:04:10,570
attention to being paid to it so when I

00:04:08,200 --> 00:04:13,260
say abuse I talk about malware fishing

00:04:10,570 --> 00:04:18,010
facebook spam are people mine dogecoin

00:04:13,260 --> 00:04:20,080
bitcoin coinye west curious users trying

00:04:18,010 --> 00:04:22,990
to see what they can do and just email

00:04:20,080 --> 00:04:25,530
spare so on Heroku you can write an app

00:04:22,990 --> 00:04:27,970
for zero dollars that there's free plans

00:04:25,530 --> 00:04:30,220
you know the site says run what you want

00:04:27,970 --> 00:04:31,420
for free but you don't always get to run

00:04:30,220 --> 00:04:35,080
what you want for free because what we

00:04:31,420 --> 00:04:36,280
want you to run sometimes yeah I so

00:04:35,080 --> 00:04:37,270
openness that up a little bit but yeah

00:04:36,280 --> 00:04:40,210
there's some things you just shouldn't

00:04:37,270 --> 00:04:42,250
run so we did some digging around we

00:04:40,210 --> 00:04:44,470
found that we wonder stead of bad users

00:04:42,250 --> 00:04:46,180
have a credit card on file so most of

00:04:44,470 --> 00:04:48,400
our abuse was coming from free users who

00:04:46,180 --> 00:04:50,830
never gave us anything and these end

00:04:48,400 --> 00:04:52,210
users were getting clever so it's part

00:04:50,830 --> 00:04:53,980
of some preliminary investigations we

00:04:52,210 --> 00:04:56,980
came across but you know we came across

00:04:53,980 --> 00:04:58,150
people running accounts like this they'd

00:04:56,980 --> 00:05:02,050
fill up each account with free apps

00:04:58,150 --> 00:05:03,850
create a new account and move on so

00:05:02,050 --> 00:05:06,220
these people were out due out to get

00:05:03,850 --> 00:05:07,360
some free services intentionally but we

00:05:06,220 --> 00:05:10,390
also came across people who don't read

00:05:07,360 --> 00:05:11,800
the Terms of Service so you know they

00:05:10,390 --> 00:05:13,240
just thought it was okay to submit up

00:05:11,800 --> 00:05:15,310
new accounts and get unlimited compute

00:05:13,240 --> 00:05:17,440
resources for free like the world

00:05:15,310 --> 00:05:19,120
somehow owed them something if anyone's

00:05:17,440 --> 00:05:22,680
doing that in the audience don't worry I

00:05:19,120 --> 00:05:22,680
didn't mean that I will find you though

00:05:23,100 --> 00:05:27,850
so this increased abuse led to an

00:05:25,540 --> 00:05:29,380
increased cost you know these

00:05:27,850 --> 00:05:31,840
freeloaders were causing support load

00:05:29,380 --> 00:05:33,430
they were sort of causing abuse reports

00:05:31,840 --> 00:05:36,040
to come their way from Facebook Google

00:05:33,430 --> 00:05:37,450
Twitter we're having to a boot more

00:05:36,040 --> 00:05:39,840
instances due to these cryptocurrency

00:05:37,450 --> 00:05:42,670
miners it was just a pretty bad state

00:05:39,840 --> 00:05:46,240
the doing some looking around this isn't

00:05:42,670 --> 00:05:47,980
really isolated to Heroku so if you run

00:05:46,240 --> 00:05:49,060
our service people are going to take

00:05:47,980 --> 00:05:50,710
advantage of it it might be a web

00:05:49,060 --> 00:05:53,500
scraper it might be comment spam fake

00:05:50,710 --> 00:05:56,320
profiles misuse of services if there's

00:05:53,500 --> 00:06:01,570
incentive it's going to be exploited

00:05:56,320 --> 00:06:03,160
and I mean I I guess who has a service

00:06:01,570 --> 00:06:06,550
here that they run that they've seen a

00:06:03,160 --> 00:06:09,190
bit of dodgy behavior on yeah it's I

00:06:06,550 --> 00:06:10,270
mean it happens continually and you're

00:06:09,190 --> 00:06:12,850
not going to really avoid it if you do

00:06:10,270 --> 00:06:14,380
have your stuff out there on the web so

00:06:12,850 --> 00:06:17,860
that was back in August that we started

00:06:14,380 --> 00:06:20,920
looking at it and then sorry that's

00:06:17,860 --> 00:06:22,600
going to get really old so this happened

00:06:20,920 --> 00:06:23,860
back in pipeline island I was there I

00:06:22,600 --> 00:06:25,750
was giving a talk I was supposed to be

00:06:23,860 --> 00:06:30,550
away on a little bit of a trip and we

00:06:25,750 --> 00:06:32,410
just kept getting hit with issues so

00:06:30,550 --> 00:06:33,790
they're unhappy customers we had

00:06:32,410 --> 00:06:35,380
platform availability issues where

00:06:33,790 --> 00:06:37,060
people couldn't boot processes because

00:06:35,380 --> 00:06:39,070
we were out of space and those this

00:06:37,060 --> 00:06:40,450
increased operational costs so we

00:06:39,070 --> 00:06:43,030
started looking at why we were getting

00:06:40,450 --> 00:06:44,530
abused so we offer a shell where you can

00:06:43,030 --> 00:06:46,660
run something so anyone who offers a

00:06:44,530 --> 00:06:48,490
shell data service goods for sale

00:06:46,660 --> 00:06:50,920
they're going to get abused in some way

00:06:48,490 --> 00:06:52,360
uber the the photo taxi service they

00:06:50,920 --> 00:06:54,130
even have problems i'm not too sure how

00:06:52,360 --> 00:06:57,310
they get abused but i know they do from

00:06:54,130 --> 00:06:59,650
some of the reports I've seen so for us

00:06:57,310 --> 00:07:01,090
it's really easy to sign up our

00:06:59,650 --> 00:07:03,880
marketing team doesn't like anything

00:07:01,090 --> 00:07:05,500
adds friction to the process and this

00:07:03,880 --> 00:07:07,560
like a friction for our good users makes

00:07:05,500 --> 00:07:10,360
it real easy for abusive users as well

00:07:07,560 --> 00:07:12,100
there's also no moderation so we take

00:07:10,360 --> 00:07:13,690
your name email address password and

00:07:12,100 --> 00:07:15,760
you're free to spin up five applications

00:07:13,690 --> 00:07:19,690
or so without getting is anything else

00:07:15,760 --> 00:07:21,490
and this is free as in free beer you

00:07:19,690 --> 00:07:22,780
know our preliminary investigations

00:07:21,490 --> 00:07:24,040
revealed that a large amount of campaign

00:07:22,780 --> 00:07:25,900
of users were just creating a troll way

00:07:24,040 --> 00:07:27,640
email addresses to create free accounts

00:07:25,900 --> 00:07:29,620
applications to run the same thing over

00:07:27,640 --> 00:07:32,200
and over and I'll doing these fire our

00:07:29,620 --> 00:07:33,910
API you know one API called create an

00:07:32,200 --> 00:07:35,710
app and within seconds of signing up

00:07:33,910 --> 00:07:37,030
there scraping the API key and getting

00:07:35,710 --> 00:07:39,700
to work with creating these dodgy code

00:07:37,030 --> 00:07:42,220
bases so the question came up that

00:07:39,700 --> 00:07:45,040
shouldn't this be easy to solve there

00:07:42,220 --> 00:07:46,690
was lots of discourse in dialogue thrown

00:07:45,040 --> 00:07:48,070
around a lot of reasoning it should be

00:07:46,690 --> 00:07:51,520
an easy one to solve it it turns out

00:07:48,070 --> 00:07:52,990
that it's not really so first of all our

00:07:51,520 --> 00:07:56,290
marketing team forbid that we put a

00:07:52,990 --> 00:07:58,450
caption on the front page you know we've

00:07:56,290 --> 00:07:59,400
got our page here we take a three bits

00:07:58,450 --> 00:08:01,690
of information and you're good to go

00:07:59,400 --> 00:08:03,370
they didn't want to add any friction to

00:08:01,690 --> 00:08:06,970
that process and personally I was a bit

00:08:03,370 --> 00:08:07,990
sort of yeah about captures you know

00:08:06,970 --> 00:08:09,850
it's possible to use something like

00:08:07,990 --> 00:08:10,360
mechanical turk to create a bunch of

00:08:09,850 --> 00:08:12,610
free

00:08:10,360 --> 00:08:14,219
months so they were beatable I think it

00:08:12,610 --> 00:08:17,650
would just be a false sense of security

00:08:14,219 --> 00:08:19,689
static rules such as putting in email

00:08:17,650 --> 00:08:22,210
domains to check or such it's just hard

00:08:19,689 --> 00:08:23,080
to maintain you know it turns into a cat

00:08:22,210 --> 00:08:24,849
and mouse game where you're just chasing

00:08:23,080 --> 00:08:27,250
an abuser around the platform it's a

00:08:24,849 --> 00:08:29,439
place where j'en worse to be same with

00:08:27,250 --> 00:08:31,210
IP restrictions you know with

00:08:29,439 --> 00:08:33,250
availability services such as tour or

00:08:31,210 --> 00:08:34,419
cheap VPNs it's just not sustainable to

00:08:33,250 --> 00:08:36,750
chase down IPS that you should be

00:08:34,419 --> 00:08:39,039
blocking the same goes for email domains

00:08:36,750 --> 00:08:40,570
there's a bunch of services out there to

00:08:39,039 --> 00:08:43,269
provide disposable email boxes

00:08:40,570 --> 00:08:44,470
accessible via API so we'll just be

00:08:43,269 --> 00:08:47,980
chasing our tail trying to block these

00:08:44,470 --> 00:08:49,209
users and of course the the process of

00:08:47,980 --> 00:08:50,709
manually hunting these people via

00:08:49,209 --> 00:08:52,089
database queries and just spending our

00:08:50,709 --> 00:08:54,100
whole time chasing him down and blocking

00:08:52,089 --> 00:08:55,329
them it's just somewhere I didn't want

00:08:54,100 --> 00:08:57,420
to be I would look like this before we

00:08:55,329 --> 00:08:59,380
ever got to the bottom of the problem

00:08:57,420 --> 00:09:02,190
one thing that came up was manual

00:08:59,380 --> 00:09:04,149
verification and it's just a case of no

00:09:02,190 --> 00:09:06,040
manually verifying each and every one of

00:09:04,149 --> 00:09:08,019
our users it's just too much friction

00:09:06,040 --> 00:09:12,190
too much support load we don't have the

00:09:08,019 --> 00:09:14,050
people to do it so with that in mind we

00:09:12,190 --> 00:09:24,100
started down the track of looking at

00:09:14,050 --> 00:09:25,930
something a bit different so back in

00:09:24,100 --> 00:09:28,360
December I've done a few tests before

00:09:25,930 --> 00:09:30,010
and sort of as a whole world of time to

00:09:28,360 --> 00:09:31,630
get rid you know determine to find some

00:09:30,010 --> 00:09:33,730
common weeks between these users and as

00:09:31,630 --> 00:09:34,899
with the paramedic story welcome to a

00:09:33,730 --> 00:09:37,089
house topic you know walking up to a

00:09:34,899 --> 00:09:39,399
house at Christmas there was a bunch of

00:09:37,089 --> 00:09:40,750
clues floating around so the names have

00:09:39,399 --> 00:09:42,519
been changed as i said but does anyone

00:09:40,750 --> 00:09:47,470
see something strange with this list of

00:09:42,519 --> 00:09:50,230
email addresses well I guess I'll answer

00:09:47,470 --> 00:09:52,029
it up the top yeah these are users that

00:09:50,230 --> 00:09:55,329
have been classified as bad and they

00:09:52,029 --> 00:09:56,500
stand out like nothing else so one of

00:09:55,329 --> 00:09:58,870
the first things we started looking at

00:09:56,500 --> 00:10:00,070
was well we've got these ones right here

00:09:58,870 --> 00:10:02,410
and they're doing something a bit odd

00:10:00,070 --> 00:10:05,050
and it's we've given it the name of

00:10:02,410 --> 00:10:08,560
character set switches so this clue or

00:10:05,050 --> 00:10:10,180
feature of character set switches using

00:10:08,560 --> 00:10:13,149
a bit of Python like this fairly

00:10:10,180 --> 00:10:16,269
inefficient has since been reflected it

00:10:13,149 --> 00:10:18,130
looks at the number of times which the

00:10:16,269 --> 00:10:19,449
position i iterate through the string

00:10:18,130 --> 00:10:21,130
and you count the number of times the

00:10:19,449 --> 00:10:24,310
position changes from that of a letter

00:10:21,130 --> 00:10:26,800
digit or punctuation so above you can

00:10:24,310 --> 00:10:29,529
there's no there's no changes there with

00:10:26,800 --> 00:10:31,480
John at gmail no changes we've got one

00:10:29,529 --> 00:10:35,110
here because it goes from letters A to Z

00:10:31,480 --> 00:10:36,160
to the number one and it's not to get

00:10:35,110 --> 00:10:38,500
interesting when we threw some of these

00:10:36,160 --> 00:10:41,230
bad users in that's that's a fairly high

00:10:38,500 --> 00:10:42,970
number and of course we very

00:10:41,230 --> 00:10:45,190
unscientifically plotted it out in our

00:10:42,970 --> 00:10:48,100
keynote graph since we weren't able to

00:10:45,190 --> 00:10:49,960
use their notebook and yeah as you can

00:10:48,100 --> 00:10:51,220
see i mean the percentage of bad users

00:10:49,960 --> 00:10:53,230
as a number of character switches got

00:10:51,220 --> 00:10:57,339
higher so did the the percentages of bad

00:10:53,230 --> 00:10:58,690
users who had that feature one thing

00:10:57,339 --> 00:11:00,430
that stood out that we investigated was

00:10:58,690 --> 00:11:03,190
to character switches and year for the

00:11:00,430 --> 00:11:08,380
most part it was this first name dot

00:11:03,190 --> 00:11:09,850
last name format of the email address so

00:11:08,380 --> 00:11:12,910
straight away we had one feature we

00:11:09,850 --> 00:11:14,950
could use and so we started looking

00:11:12,910 --> 00:11:18,550
again and you know pulled up a bunch of

00:11:14,950 --> 00:11:21,940
names that looked like this someone tell

00:11:18,550 --> 00:11:24,400
me what stands out yeah it's one hundred

00:11:21,940 --> 00:11:26,170
percent hex characters so you know that

00:11:24,400 --> 00:11:27,640
got us to thinking is this a hash are

00:11:26,170 --> 00:11:31,540
they just hashing some random value

00:11:27,640 --> 00:11:32,740
value and signing up and of course since

00:11:31,540 --> 00:11:35,650
I have my notebook I had to plot it out

00:11:32,740 --> 00:11:36,880
in keynote as you start to get more and

00:11:35,650 --> 00:11:38,500
more hex characters in the username you

00:11:36,880 --> 00:11:39,790
start to see users you know the

00:11:38,500 --> 00:11:41,470
percentage of users rise above fifty

00:11:39,790 --> 00:11:43,060
percent and you go right to the end

00:11:41,470 --> 00:11:45,700
where a user name is about a hundred

00:11:43,060 --> 00:11:47,440
percent hex characters and their you

00:11:45,700 --> 00:11:51,250
know almost 100 ascent of the users with

00:11:47,440 --> 00:11:52,540
that feature a bad so it turns out that

00:11:51,250 --> 00:11:53,950
as this percentage don't start to

00:11:52,540 --> 00:11:56,770
increase so does our belief that you are

00:11:53,950 --> 00:11:57,880
a bad user and it turns out that the

00:11:56,770 --> 00:11:59,080
actual number was about ninety four

00:11:57,880 --> 00:12:00,370
point eight nine percent of users with a

00:11:59,080 --> 00:12:03,880
hundred sent hex characters in their

00:12:00,370 --> 00:12:06,310
email that bad users so yeah we did find

00:12:03,880 --> 00:12:13,330
a few sort of yeah issues all in the way

00:12:06,310 --> 00:12:17,589
but not many of them popped up so far so

00:12:13,330 --> 00:12:18,940
the next feature we we start doing some

00:12:17,589 --> 00:12:20,680
digging and some are grouping together

00:12:18,940 --> 00:12:23,529
and we found that some domains are

00:12:20,680 --> 00:12:25,480
absolute spare magnets looking at

00:12:23,529 --> 00:12:27,670
mail.ru it's really easy to create

00:12:25,480 --> 00:12:29,560
accounts and if you cashed up it's even

00:12:27,670 --> 00:12:31,570
easier you can buy 50,000 domains or

00:12:29,560 --> 00:12:34,390
email dmo boxes for about five hundred

00:12:31,570 --> 00:12:37,380
dollars and I personally see us being

00:12:34,390 --> 00:12:37,380
hit by that previously

00:12:37,640 --> 00:12:41,420
but I mean you think mail.ru and there's

00:12:40,160 --> 00:12:42,770
not a lot that you can you know

00:12:41,420 --> 00:12:44,180
initially we thought there wasn't a lot

00:12:42,770 --> 00:12:45,530
that we could go on in terms of feature

00:12:44,180 --> 00:12:47,480
extraction but it turns out there's a

00:12:45,530 --> 00:12:49,820
fair bit once you start looking at the

00:12:47,480 --> 00:12:52,670
vocation of mail services or the mail

00:12:49,820 --> 00:12:55,250
servers or the MX that they run some

00:12:52,670 --> 00:12:58,190
geo-information it's not to give you

00:12:55,250 --> 00:12:59,780
some pretty cool results so we've use

00:12:58,190 --> 00:13:01,190
this to tie some alerts into email

00:12:59,780 --> 00:13:02,720
domains and we get a heads-up when

00:13:01,190 --> 00:13:04,220
someone starts start signing up from an

00:13:02,720 --> 00:13:06,830
unknown domain or someone start signing

00:13:04,220 --> 00:13:08,480
up from a dodgy domain this goes

00:13:06,830 --> 00:13:15,320
straight into our hip chat room and yeah

00:13:08,480 --> 00:13:16,760
it's worked pretty well so far so when

00:13:15,320 --> 00:13:19,880
we pick out this this guy from the list

00:13:16,760 --> 00:13:21,050
of email versus looks like this and you

00:13:19,880 --> 00:13:23,690
know it doesn't seem like it's

00:13:21,050 --> 00:13:25,760
pronounceable so we put that next to

00:13:23,690 --> 00:13:28,780
something something it looks fancy nice

00:13:25,760 --> 00:13:31,450
and good and it just doesn't look right

00:13:28,780 --> 00:13:35,990
so we started looking at the end grams

00:13:31,450 --> 00:13:37,310
contained within that string so in the

00:13:35,990 --> 00:13:39,980
top example once you start splitting it

00:13:37,310 --> 00:13:44,210
out into by grams you get three three

00:13:39,980 --> 00:13:45,590
values trigrams two values so we did

00:13:44,210 --> 00:13:50,180
this for all of our clothes all of our

00:13:45,590 --> 00:13:51,920
labeled labeled email addresses so we

00:13:50,180 --> 00:13:53,660
found this this procedure of taking all

00:13:51,920 --> 00:13:55,370
these addresses and adding a start and

00:13:53,660 --> 00:13:57,110
end character and that's splitting into

00:13:55,370 --> 00:14:00,350
trigrams and counting the good versus

00:13:57,110 --> 00:14:02,330
bad number of each and then smoothing it

00:14:00,350 --> 00:14:05,480
over and throwing that into a really

00:14:02,330 --> 00:14:06,920
basic name I bay's model I gave us a

00:14:05,480 --> 00:14:09,770
pretty good probability of what's good

00:14:06,920 --> 00:14:11,900
and what's bad and I mean this is just a

00:14:09,770 --> 00:14:13,340
really quick insight but if you look at

00:14:11,900 --> 00:14:15,770
the top if an email address starts with

00:14:13,340 --> 00:14:18,320
a nine typically that engram has been

00:14:15,770 --> 00:14:21,800
seen you know 99% of users with that

00:14:18,320 --> 00:14:23,390
engram are bad it's the same as if it

00:14:21,800 --> 00:14:24,560
starts with a few other numbers and you

00:14:23,390 --> 00:14:26,000
know further down the list there's a few

00:14:24,560 --> 00:14:29,060
other interesting ones but it really

00:14:26,000 --> 00:14:30,530
points to sort of bad users something

00:14:29,060 --> 00:14:31,760
that doesn't seem pronounceable so we've

00:14:30,530 --> 00:14:33,890
turned them into three features of the

00:14:31,760 --> 00:14:36,440
percentage of missing and Gramps senator

00:14:33,890 --> 00:14:38,120
bad and grams and a risk score which is

00:14:36,440 --> 00:14:41,930
calculated via an academic paper I did

00:14:38,120 --> 00:14:44,120
forget to put the link on there but it

00:14:41,930 --> 00:14:45,410
turns out that 98.7 percent of bad users

00:14:44,120 --> 00:14:48,080
have over forty percent missing and

00:14:45,410 --> 00:14:50,450
grams in their in their email address so

00:14:48,080 --> 00:14:51,110
that's given us a really good sort of

00:14:50,450 --> 00:14:52,640
indication

00:14:51,110 --> 00:14:54,980
of who is causing you know dodgy

00:14:52,640 --> 00:14:57,920
behavior and I think this is the last

00:14:54,980 --> 00:14:59,600
one but all of these family dresses have

00:14:57,920 --> 00:15:03,050
a fair few digits in the user name and

00:14:59,600 --> 00:15:05,860
you put that out and yeah the more

00:15:03,050 --> 00:15:08,390
digits you have in your user name it's a

00:15:05,860 --> 00:15:10,310
bit more likely that you know these

00:15:08,390 --> 00:15:12,529
these bad users will use more digits in

00:15:10,310 --> 00:15:15,290
their username now for four digits it

00:15:12,529 --> 00:15:17,300
looks like a lot of people have years in

00:15:15,290 --> 00:15:23,440
their addresses so that's why that looks

00:15:17,300 --> 00:15:25,730
a bit bit different everything else now

00:15:23,440 --> 00:15:27,740
we've got about 200 features that we

00:15:25,730 --> 00:15:29,300
look at free mail addresses we're going

00:15:27,740 --> 00:15:32,329
to roll here I will hopefully open

00:15:29,300 --> 00:15:34,070
source all of them but think about that

00:15:32,329 --> 00:15:35,990
with our signup process when you put in

00:15:34,070 --> 00:15:39,320
an email address we get this great look

00:15:35,990 --> 00:15:40,160
into who you are and we're not just

00:15:39,320 --> 00:15:43,160
looking at things like that we're

00:15:40,160 --> 00:15:45,200
looking at keyboard spread so does it

00:15:43,160 --> 00:15:46,850
have a known known bad keyboard spread

00:15:45,200 --> 00:15:48,320
our tests revealed that email addresses

00:15:46,850 --> 00:15:50,810
with a low key board spread can be used

00:15:48,320 --> 00:15:52,190
by bad users and that's like this

00:15:50,810 --> 00:15:53,329
someone's staying the same part of the

00:15:52,190 --> 00:15:55,149
keyboard and typing in a few random

00:15:53,329 --> 00:15:58,250
characters versus a nice spread out

00:15:55,149 --> 00:15:59,660
along the keyboard so using a bit of a

00:15:58,250 --> 00:16:01,850
distance algorithm and assuming that

00:15:59,660 --> 00:16:03,410
you're not using a Dvorak keyboard this

00:16:01,850 --> 00:16:05,449
gives us a pretty good score to compare

00:16:03,410 --> 00:16:08,480
you behavior with it's the same with

00:16:05,449 --> 00:16:09,800
nearby key right so a low key rate tends

00:16:08,480 --> 00:16:12,890
to be asserted with repeater characters

00:16:09,800 --> 00:16:14,540
like so so someone's just typed the same

00:16:12,890 --> 00:16:18,709
digit over and over this is something

00:16:14,540 --> 00:16:20,810
that looks a bit more less repetitive so

00:16:18,709 --> 00:16:22,550
yeah I said 200 features I I don't have

00:16:20,810 --> 00:16:24,920
many tips for feature extraction it's a

00:16:22,550 --> 00:16:26,600
lot of trial and error but we've tended

00:16:24,920 --> 00:16:30,430
to focus on sort of discrete continuous

00:16:26,600 --> 00:16:32,390
values and you know categorical values

00:16:30,430 --> 00:16:34,100
where straight away from booleans

00:16:32,390 --> 00:16:35,860
because we found that they were they

00:16:34,100 --> 00:16:40,399
were affecting our models a bit too much

00:16:35,860 --> 00:16:42,829
that I guess I guess my best advice

00:16:40,399 --> 00:16:44,480
would be to get some process in place we

00:16:42,829 --> 00:16:46,370
can add in a new feature and measure out

00:16:44,480 --> 00:16:47,870
your accuracies I mean I said we're

00:16:46,370 --> 00:16:49,220
using naive Bayes I know there are more

00:16:47,870 --> 00:16:50,570
efficient algorithms out there where you

00:16:49,220 --> 00:16:52,250
can use different combinations of these

00:16:50,570 --> 00:16:53,209
features but with what we've got at the

00:16:52,250 --> 00:16:55,970
moment that's what we're being able to

00:16:53,209 --> 00:16:58,310
use and we've put that into a system

00:16:55,970 --> 00:17:00,260
that we've codenamed sleuth so every

00:16:58,310 --> 00:17:02,089
user on Heroku is within this system and

00:17:00,260 --> 00:17:03,949
every action they make readjusts their

00:17:02,089 --> 00:17:04,780
school and we get alerted when someone's

00:17:03,949 --> 00:17:07,010
got a pretty high school

00:17:04,780 --> 00:17:09,890
so this typically shows us where the

00:17:07,010 --> 00:17:11,209
action is it points us towards users who

00:17:09,890 --> 00:17:16,790
need to be labeled or who need to be

00:17:11,209 --> 00:17:18,020
investigated for bad behavior now since

00:17:16,790 --> 00:17:19,220
we do have users constantly being

00:17:18,020 --> 00:17:22,760
labeled this keeps our prior

00:17:19,220 --> 00:17:24,679
probabilities fresh so say we took

00:17:22,760 --> 00:17:26,600
someone as a mail.ru name as being bad

00:17:24,679 --> 00:17:28,520
that'll that'll bump up the count for

00:17:26,600 --> 00:17:30,650
bad users using the mail.ru domain and

00:17:28,520 --> 00:17:32,660
this allows us to operate using almost

00:17:30,650 --> 00:17:34,450
online models so I say almost because

00:17:32,660 --> 00:17:36,799
there's a little bit of latency in there

00:17:34,450 --> 00:17:38,390
so we found that raid training models

00:17:36,799 --> 00:17:40,130
via scikit-learn was this slow and

00:17:38,390 --> 00:17:42,710
cumbersome process that just introduced

00:17:40,130 --> 00:17:44,090
a whole bunch of memory play so we wrote

00:17:42,710 --> 00:17:46,910
our own native Bayes classifier on top

00:17:44,090 --> 00:17:48,470
of radisson Python and basically

00:17:46,910 --> 00:17:50,240
labeling a user it's good or bad we'll

00:17:48,470 --> 00:17:51,679
adjust the class priors and feature

00:17:50,240 --> 00:17:55,669
probability distributions in the backend

00:17:51,679 --> 00:17:57,049
pretty much straight away so we did some

00:17:55,669 --> 00:17:58,520
digging into it we found that all we

00:17:57,049 --> 00:18:03,260
need to do is maintain account of good

00:17:58,520 --> 00:18:04,429
versus bad users so using data collected

00:18:03,260 --> 00:18:06,559
from our users who being labeled

00:18:04,429 --> 00:18:08,990
manually by our staff we we get our

00:18:06,559 --> 00:18:13,460
class prior which is how many users a

00:18:08,990 --> 00:18:14,870
good versus how many users are bad we

00:18:13,460 --> 00:18:16,220
also need to maintain account of the

00:18:14,870 --> 00:18:19,400
distinct feature pair values for good

00:18:16,220 --> 00:18:20,840
and bad users so for example so we've

00:18:19,400 --> 00:18:23,090
got our user and the digits an email

00:18:20,840 --> 00:18:24,620
username and that's six we make that a

00:18:23,090 --> 00:18:27,679
distant key within Redis and we count

00:18:24,620 --> 00:18:29,750
the good versus bad users so when it

00:18:27,679 --> 00:18:31,730
comes time to score we pull out an email

00:18:29,750 --> 00:18:32,900
address we extract all their features

00:18:31,730 --> 00:18:34,400
and we look them up within the red of

00:18:32,900 --> 00:18:38,260
Starbase get the counts back and we

00:18:34,400 --> 00:18:40,520
throw that into an a Bayes classifier so

00:18:38,260 --> 00:18:42,410
apart from the first seed of values

00:18:40,520 --> 00:18:44,570
which takes about 20 minutes if you use

00:18:42,410 --> 00:18:49,040
to refresh the Rose score we typically

00:18:44,570 --> 00:18:50,419
operate on fresh data we also smooth out

00:18:49,040 --> 00:18:51,770
our dad when we retrieve it an account

00:18:50,419 --> 00:18:54,770
for missing values if Raiders doesn't

00:18:51,770 --> 00:18:57,380
return anything and what this allows us

00:18:54,770 --> 00:18:58,340
to do is operate out of band so we don't

00:18:57,380 --> 00:19:02,179
need to get involved with any other

00:18:58,340 --> 00:19:03,770
teams or put our systems in within you

00:19:02,179 --> 00:19:05,419
know next next to theirs at all it's

00:19:03,770 --> 00:19:09,770
because we operate on a WebSocket feed

00:19:05,419 --> 00:19:11,840
so all teams within Heroku have access

00:19:09,770 --> 00:19:13,580
to a web socket feed so any event that

00:19:11,840 --> 00:19:16,429
happens it gets sent through this feed

00:19:13,580 --> 00:19:18,260
to whatever system you want so what

00:19:16,429 --> 00:19:20,300
we've got we've got events going

00:19:18,260 --> 00:19:21,980
sleuth and it reacts by that and any

00:19:20,300 --> 00:19:25,760
reaction needs to happen takes place by

00:19:21,980 --> 00:19:27,200
the Heroku API so when it uses created

00:19:25,760 --> 00:19:29,390
we receive the event typically within a

00:19:27,200 --> 00:19:31,700
second we were able to score it fairly

00:19:29,390 --> 00:19:33,410
quickly and then if we need to suspend

00:19:31,700 --> 00:19:36,950
them or mark them as suspicious we're

00:19:33,410 --> 00:19:39,170
able to do that by the API same goes

00:19:36,950 --> 00:19:41,420
when we create an app it's same process

00:19:39,170 --> 00:19:43,910
so I found using this feed has been

00:19:41,420 --> 00:19:45,980
fairly you know fairly handy we're able

00:19:43,910 --> 00:19:49,300
to look at most events and then run some

00:19:45,980 --> 00:19:52,760
tests depending on what that event is

00:19:49,300 --> 00:19:54,230
now from a receiving the event to sort

00:19:52,760 --> 00:19:57,650
of making a response and taking some

00:19:54,230 --> 00:19:59,480
action takes about two seconds so if you

00:19:57,650 --> 00:20:01,070
sign up you're marked as bad within two

00:19:59,480 --> 00:20:02,690
seconds you'll be suspended and we're

00:20:01,070 --> 00:20:04,010
happy with that target it's we stop

00:20:02,690 --> 00:20:05,990
people before they're allowed to abuse

00:20:04,010 --> 00:20:10,000
before they can create malware or create

00:20:05,990 --> 00:20:11,990
a bunch of apps now using these features

00:20:10,000 --> 00:20:14,840
we're able to look at it users network

00:20:11,990 --> 00:20:16,430
as well so we collect information on IP

00:20:14,840 --> 00:20:18,350
address browser fingerprint and what

00:20:16,430 --> 00:20:21,770
your code base looks like now these are

00:20:18,350 --> 00:20:24,740
all non identifying features I'd like to

00:20:21,770 --> 00:20:25,850
say um so with this multitude of data we

00:20:24,740 --> 00:20:26,930
can link users together and this is for

00:20:25,850 --> 00:20:28,730
the purpose of finding people who are

00:20:26,930 --> 00:20:30,440
avoiding billing or you know bad

00:20:28,730 --> 00:20:31,640
behavior we're not looking at any

00:20:30,440 --> 00:20:36,320
marketing information or anything like

00:20:31,640 --> 00:20:38,570
that so this gives an interface to find

00:20:36,320 --> 00:20:40,160
users who linked together and yeah for a

00:20:38,570 --> 00:20:41,780
campaign abuse where we'll find someone

00:20:40,160 --> 00:20:43,840
from Turkey who signed up with 200 apps

00:20:41,780 --> 00:20:46,520
using different IPS and different users

00:20:43,840 --> 00:20:49,720
works fairly well it sort of gives a

00:20:46,520 --> 00:20:52,100
platform wide context of what's going on

00:20:49,720 --> 00:20:53,540
so like I said we're hoping to release

00:20:52,100 --> 00:20:56,000
bits and pieces of this and what I've

00:20:53,540 --> 00:20:59,240
got in mind is sort of datasets

00:20:56,000 --> 00:21:00,850
notebooks and our scores that we use so

00:20:59,240 --> 00:21:03,680
at the moment due to safe harbor

00:21:00,850 --> 00:21:05,240
compliance I'm looking a way to remove

00:21:03,680 --> 00:21:08,330
all the personal personal information

00:21:05,240 --> 00:21:10,940
and somehow turn it into data that I can

00:21:08,330 --> 00:21:12,680
you know give out to whoever wants it so

00:21:10,940 --> 00:21:15,350
I'd say stay tuned to the twitter

00:21:12,680 --> 00:21:19,310
updates and i'll be also releasing a few

00:21:15,350 --> 00:21:21,620
summaries of the methods that we use so

00:21:19,310 --> 00:21:24,200
once we find a bad user we have to block

00:21:21,620 --> 00:21:26,330
it so we've got two commands to their to

00:21:24,200 --> 00:21:28,880
do that the first is marking a user as

00:21:26,330 --> 00:21:30,080
suspicious so this is a user who signed

00:21:28,880 --> 00:21:31,610
up but they actually haven't done

00:21:30,080 --> 00:21:31,970
anything wrong we just think that they

00:21:31,610 --> 00:21:35,780
will

00:21:31,970 --> 00:21:37,790
so you know web set the bar pretty high

00:21:35,780 --> 00:21:39,410
for this one so anyone who signs up here

00:21:37,790 --> 00:21:41,450
unless you use a lot of digits in your

00:21:39,410 --> 00:21:44,450
user you know in your email you're not

00:21:41,450 --> 00:21:46,460
going to get marked as suspicious so

00:21:44,450 --> 00:21:47,750
what suspicious does is simply whenever

00:21:46,460 --> 00:21:49,040
you log in and you want to create an app

00:21:47,750 --> 00:21:51,740
you have to put in your credit card

00:21:49,040 --> 00:21:53,270
details before you do so this allows the

00:21:51,740 --> 00:21:55,580
incentive for abuses they have to go out

00:21:53,270 --> 00:21:57,260
and find a credit card number and it

00:21:55,580 --> 00:21:58,730
raises the bar for entry to our platform

00:21:57,260 --> 00:22:03,380
now if you're marked as a good user this

00:21:58,730 --> 00:22:05,810
isn't going to happen to you what also

00:22:03,380 --> 00:22:08,090
probably won't happen is suspension so

00:22:05,810 --> 00:22:09,890
suspension will either suspend with a

00:22:08,090 --> 00:22:11,780
warning or suspend straight away it

00:22:09,890 --> 00:22:14,150
depends on you know what threshold you

00:22:11,780 --> 00:22:15,890
hit with the score that we calculate now

00:22:14,150 --> 00:22:17,150
what suspension does it just simply

00:22:15,890 --> 00:22:18,440
shows a message that you need to get in

00:22:17,150 --> 00:22:20,750
touch with us have your account

00:22:18,440 --> 00:22:21,770
reenabled we freeze billing we stop all

00:22:20,750 --> 00:22:23,330
the apps and we make it sure that

00:22:21,770 --> 00:22:25,520
nothing can be touched with in their

00:22:23,330 --> 00:22:28,120
account if you don't reply within three

00:22:25,520 --> 00:22:30,050
months will terminate your account

00:22:28,120 --> 00:22:31,820
basically we make sure that the user

00:22:30,050 --> 00:22:34,100
can't delete anything and this preserves

00:22:31,820 --> 00:22:35,660
the crime scene lets us keep all the

00:22:34,100 --> 00:22:38,690
data we need and so we can find that

00:22:35,660 --> 00:22:40,040
user in the future if we need to now

00:22:38,690 --> 00:22:42,080
I've know I've been a bit briefed on the

00:22:40,040 --> 00:22:44,570
on how we actually scoring the users I'm

00:22:42,080 --> 00:22:47,230
hoping to change that very soon that the

00:22:44,570 --> 00:22:51,740
issues we've seen is the speed of Python

00:22:47,230 --> 00:22:53,750
so when storing these counts in Redis

00:22:51,740 --> 00:22:55,610
sometimes due to network issues or

00:22:53,750 --> 00:22:57,320
partitions we can get a bit of drift in

00:22:55,610 --> 00:22:59,510
our counts so we do need to refresh

00:22:57,320 --> 00:23:02,210
those from time to time we found that

00:22:59,510 --> 00:23:04,280
refresh knows using Python takes a good

00:23:02,210 --> 00:23:07,340
20 minutes and that puts our score is

00:23:04,280 --> 00:23:08,840
offline for about 20 minutes or so we've

00:23:07,340 --> 00:23:10,490
also found that when recalculating these

00:23:08,840 --> 00:23:12,260
these features such as the end grams

00:23:10,490 --> 00:23:15,800
where we need to store about 900,000

00:23:12,260 --> 00:23:18,530
distinct values in memory you know it it

00:23:15,800 --> 00:23:20,420
really hammers Python we've worked with

00:23:18,530 --> 00:23:22,280
a prototyping go which runs about ninety

00:23:20,420 --> 00:23:23,420
percent faster but we haven't had been

00:23:22,280 --> 00:23:25,090
worried to investigate it further at

00:23:23,420 --> 00:23:29,750
this point because all we get in memory

00:23:25,090 --> 00:23:31,400
warnings so i can see changing in the

00:23:29,750 --> 00:23:32,450
future and possibly moving to go and

00:23:31,400 --> 00:23:36,790
moving things out of the writers

00:23:32,450 --> 00:23:39,200
database into a standalone process

00:23:36,790 --> 00:23:41,390
another issue with sin is just drinking

00:23:39,200 --> 00:23:42,800
from the firehose so we're subscribing

00:23:41,390 --> 00:23:44,360
to every event that happens on the

00:23:42,800 --> 00:23:47,990
Heroku platform and where

00:23:44,360 --> 00:23:49,610
drinking from this vaios without getting

00:23:47,990 --> 00:23:51,590
a bit fancy we can only run one of these

00:23:49,610 --> 00:23:53,210
processes at one time it's a design

00:23:51,590 --> 00:23:55,100
problem it hasn't had much thought put

00:23:53,210 --> 00:23:57,530
into it but if someone adds a new event

00:23:55,100 --> 00:24:00,020
type and it happens fairly often we're

00:23:57,530 --> 00:24:02,240
going to end up like this just

00:24:00,020 --> 00:24:04,540
uncontrollable at the processes will die

00:24:02,240 --> 00:24:06,470
though you know the CPU usage will go up

00:24:04,540 --> 00:24:08,510
we're encountering more data than we

00:24:06,470 --> 00:24:10,429
know what to do with so we've had to

00:24:08,510 --> 00:24:13,400
play around with other methods including

00:24:10,429 --> 00:24:15,200
apache spark and we've had you know it

00:24:13,400 --> 00:24:17,179
we've looked at a few ways of working

00:24:15,200 --> 00:24:19,280
with this but it happens fairly rarely

00:24:17,179 --> 00:24:25,250
we've got other things to get it at way

00:24:19,280 --> 00:24:26,419
off we'll also had a few issues with

00:24:25,250 --> 00:24:28,580
feature selection because it's the

00:24:26,419 --> 00:24:29,630
slowest part of the whole process you've

00:24:28,580 --> 00:24:31,150
got to sit there and look at something I

00:24:29,630 --> 00:24:33,890
think okay how do these all match up

00:24:31,150 --> 00:24:36,910
what's distinct about this how can I

00:24:33,890 --> 00:24:38,929
turn this into something I can measure

00:24:36,910 --> 00:24:40,850
we're considering implementing some

00:24:38,929 --> 00:24:42,410
primitives so that we we can send data

00:24:40,850 --> 00:24:43,730
at our classifier and have a generic set

00:24:42,410 --> 00:24:45,650
of features extracted and check for

00:24:43,730 --> 00:24:48,020
relevance or accuracy but that's down

00:24:45,650 --> 00:24:50,230
the line it's on our backlog we really

00:24:48,020 --> 00:24:52,760
don't have time for it at the moment and

00:24:50,230 --> 00:24:54,919
with any big company team coordination

00:24:52,760 --> 00:24:56,960
so I'm clutching at straws at the moment

00:24:54,919 --> 00:24:58,130
try to fill out a talk that our team

00:24:56,960 --> 00:24:59,960
coordination is absolutely fantastic

00:24:58,130 --> 00:25:01,520
that we have the problem of events being

00:24:59,960 --> 00:25:03,770
deprecated or the structure of events

00:25:01,520 --> 00:25:05,450
changing it's a growing a pain of a

00:25:03,770 --> 00:25:08,360
company and nothing related to the code

00:25:05,450 --> 00:25:09,950
so we've had to can you know we've had

00:25:08,360 --> 00:25:12,860
to make some considerations for this

00:25:09,950 --> 00:25:14,570
when writing our code putting in a few

00:25:12,860 --> 00:25:16,640
fail-safes for if those events do change

00:25:14,570 --> 00:25:19,190
structure when they come through we're

00:25:16,640 --> 00:25:20,600
also growing so I can actually put the

00:25:19,190 --> 00:25:22,580
numbers up here because I didn't check

00:25:20,600 --> 00:25:24,049
if I was allowed to but we're getting

00:25:22,580 --> 00:25:25,490
more and more users more and more apps

00:25:24,049 --> 00:25:28,580
and this is giving us more data than we

00:25:25,490 --> 00:25:30,530
know what to do with we're also seeing

00:25:28,580 --> 00:25:31,910
the occasional misclassifications so I

00:25:30,530 --> 00:25:34,429
said before that we are automatically

00:25:31,910 --> 00:25:36,890
suspending some users fortunately that

00:25:34,429 --> 00:25:38,570
hasn't happened yet so for a real paying

00:25:36,890 --> 00:25:39,770
user who has apps running on us the

00:25:38,570 --> 00:25:41,750
worst that has happened has then been

00:25:39,770 --> 00:25:44,090
getting an email saying hey we think

00:25:41,750 --> 00:25:47,090
you're up to no good so I'm pretty happy

00:25:44,090 --> 00:25:48,200
with that and most of all the model I've

00:25:47,090 --> 00:25:50,000
shown before it doesn't stop good

00:25:48,200 --> 00:25:51,440
looking emails so if you register a

00:25:50,000 --> 00:25:54,559
domain and make names that look real and

00:25:51,440 --> 00:25:56,419
you can probably get away with it about

00:25:54,559 --> 00:25:57,960
24 to 25 percent of our bad users get

00:25:56,419 --> 00:25:59,640
past the first stage and

00:25:57,960 --> 00:26:02,760
I'm okay with that because you know

00:25:59,640 --> 00:26:04,230
people are going to use that process we

00:26:02,760 --> 00:26:05,730
can do checks on payment methods at

00:26:04,230 --> 00:26:07,350
formations your add-ons that you're

00:26:05,730 --> 00:26:09,090
using where you're coming from how

00:26:07,350 --> 00:26:12,390
you're accessing us so we catch up with

00:26:09,090 --> 00:26:13,980
most people eventually and the last

00:26:12,390 --> 00:26:15,390
issue that I bring up it's not really an

00:26:13,980 --> 00:26:18,179
issue just different algorithms for

00:26:15,390 --> 00:26:19,500
actually looking at this data so this is

00:26:18,179 --> 00:26:20,970
more of a time constraint we don't have

00:26:19,500 --> 00:26:22,980
enough bandwidth but we're reluctant to

00:26:20,970 --> 00:26:24,390
spend time on sort of looking at other

00:26:22,980 --> 00:26:26,700
algorithms giving our success at the

00:26:24,390 --> 00:26:28,320
moment this native based process works

00:26:26,700 --> 00:26:31,409
okay and when the time comes we'll look

00:26:28,320 --> 00:26:34,590
into some other methods so that's issues

00:26:31,409 --> 00:26:35,700
but what about successes so at the

00:26:34,590 --> 00:26:37,710
moment of getting a seventy-six percent

00:26:35,700 --> 00:26:40,200
hit rate on email learned via automated

00:26:37,710 --> 00:26:41,399
scanning so when a bad user signs up

00:26:40,200 --> 00:26:43,830
there's a seventy-six percent chance

00:26:41,399 --> 00:26:45,090
that they're going to get caught our

00:26:43,830 --> 00:26:46,590
false positive rate is one point five

00:26:45,090 --> 00:26:47,820
percent so one point five percent of our

00:26:46,590 --> 00:26:49,380
users who sign up they're gonna have to

00:26:47,820 --> 00:26:53,070
prepare a credit card but that's

00:26:49,380 --> 00:26:54,779
manageable for the moment now since

00:26:53,070 --> 00:26:55,890
August now prior to August we had about

00:26:54,779 --> 00:26:58,409
eight thousand users who have been

00:26:55,890 --> 00:27:01,140
suspended since 2009 around the start of

00:26:58,409 --> 00:27:04,380
when we started measuring it since

00:27:01,140 --> 00:27:06,210
August we've suspended 50,000 users so

00:27:04,380 --> 00:27:08,159
some of those users are going back to

00:27:06,210 --> 00:27:09,659
those very early days of Heroku so we've

00:27:08,159 --> 00:27:15,390
had some great success iterating over

00:27:09,659 --> 00:27:18,029
our previous data now some users are

00:27:15,390 --> 00:27:19,169
also conceding defeat I had this battle

00:27:18,029 --> 00:27:20,549
with this one kid I think with school

00:27:19,169 --> 00:27:22,559
holidays in some European country

00:27:20,549 --> 00:27:24,770
somewhere but every day he would just be

00:27:22,559 --> 00:27:27,059
trading Bitcoin miners in Bitcoin miners

00:27:24,770 --> 00:27:28,380
finally used all of these data to track

00:27:27,059 --> 00:27:30,590
him down to Twitter and send me a tweet

00:27:28,380 --> 00:27:35,100
saying hey can you please stop that

00:27:30,590 --> 00:27:36,870
didn't hear back from him and I guess

00:27:35,100 --> 00:27:38,039
our biggest success is these users being

00:27:36,870 --> 00:27:39,539
scanned in real time we're not having to

00:27:38,039 --> 00:27:43,740
wait a week before we find out any more

00:27:39,539 --> 00:27:45,090
information so what's next more data I

00:27:43,740 --> 00:27:46,950
want to get some feeds from Twitter

00:27:45,090 --> 00:27:48,149
Facebook other sources and start looking

00:27:46,950 --> 00:27:51,149
at some more data we can put together

00:27:48,149 --> 00:27:54,840
with what we have now more interesting

00:27:51,149 --> 00:27:56,100
models so one of the things I've looked

00:27:54,840 --> 00:27:57,419
at is a lot of these users when they

00:27:56,100 --> 00:27:59,279
sign up they're getting so we're getting

00:27:57,419 --> 00:28:00,630
burst of activity at certain times and I

00:27:59,279 --> 00:28:03,570
think that's got some correlation with

00:28:00,630 --> 00:28:05,399
cron so a user sign up and five minutes

00:28:03,570 --> 00:28:06,570
later they'll be verified that they'll

00:28:05,399 --> 00:28:08,190
be confirmed so I think that's got

00:28:06,570 --> 00:28:09,539
something to do with cron so we just

00:28:08,190 --> 00:28:11,760
want to look at other ways we can use

00:28:09,539 --> 00:28:13,320
the data that what we're receiving

00:28:11,760 --> 00:28:15,450
and most importantly of all open source

00:28:13,320 --> 00:28:16,770
and things so I'll be embarking on a

00:28:15,450 --> 00:28:17,880
project open source most of the work

00:28:16,770 --> 00:28:20,790
we're doing in regards to abuse

00:28:17,880 --> 00:28:22,110
detection so yeah use a mixture of

00:28:20,790 --> 00:28:23,790
static rules neighbor analysis and

00:28:22,110 --> 00:28:27,390
classification to weed out bad users and

00:28:23,790 --> 00:28:28,890
look for clues within your data we we

00:28:27,390 --> 00:28:30,810
think we're smarter than our bad users

00:28:28,890 --> 00:28:33,990
they leave dirty fingerprints everywhere

00:28:30,810 --> 00:28:35,100
they go so my biggest suggestion would

00:28:33,990 --> 00:28:37,890
be that if you offer anything of value

00:28:35,100 --> 00:28:39,990
through a web service sort of within

00:28:37,890 --> 00:28:42,780
this reach of the abuser it'll probably

00:28:39,990 --> 00:28:44,010
get abused so yeah make you see your

00:28:42,780 --> 00:28:45,360
data and try and find some patterns

00:28:44,010 --> 00:28:48,180
amongst these are these users who are

00:28:45,360 --> 00:28:50,450
abusing you so yeah that's the end of

00:28:48,180 --> 00:28:50,450
the talk

00:28:57,049 --> 00:28:59,110

YouTube URL: https://www.youtube.com/watch?v=_VO8QxIkjqY


