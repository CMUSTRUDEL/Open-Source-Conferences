Title: The Quest for the Pocket-Sized Python by Christopher Neugebauer
Publication date: 2014-08-07
Playlist: PyCon Australia 2014
Description: 
	Python's already a language of choice for developers on the web, in science, and on the desktop. In the meantime, the world of Mobile computing has exploded in the last couple of years, and developers targetting Android, iOS, and other Mobile platforms are writing their apps in Java, Objective-C, JavaScript... but definitely not Python.

But Python's a great language for solving the sort of problems that are posed in Mobile development time -- speedy development cycles, 20 years worth of libraries for solving many tasks that you throw at it, and a ready-made community to help developers. So why aren't we using Python?

This talk surveys the current landscape of Python on the major Mobile platforms, and ways you can start targeting Mobile platforms with your Python code. We'll look at considerations for Mobile web development, the state of Python-based mobile toolkits, and progress towards Python-coded native UIs.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:06,009 --> 00:00:10,450
thank you very much

00:00:08,500 --> 00:00:12,940
lovely to be here my talk is called the

00:00:10,450 --> 00:00:14,799
quest for the pocket-sized Python it is

00:00:12,940 --> 00:00:17,590
fantastic to be here for the first time

00:00:14,799 --> 00:00:19,810
at PyCon Australia as a speaker I I've

00:00:17,590 --> 00:00:21,759
been I've been told I'm an organizer

00:00:19,810 --> 00:00:25,150
this year I'm not an organizer do not

00:00:21,759 --> 00:00:27,340
believe anybody who tells you this but

00:00:25,150 --> 00:00:29,199
that is pretty much the extent of the

00:00:27,340 --> 00:00:31,000
Python stuff that I've been doing for a

00:00:29,199 --> 00:00:34,720
few years now because my professional

00:00:31,000 --> 00:00:37,360
career is as an Android developer and

00:00:34,720 --> 00:00:40,870
this is kind of sad because I work I

00:00:37,360 --> 00:00:44,050
work mostly in Java as my programming

00:00:40,870 --> 00:00:46,540
language at work which is terrible but

00:00:44,050 --> 00:00:48,700
my job is basically I work on a large

00:00:46,540 --> 00:00:51,460
scale multi-platform app this means that

00:00:48,700 --> 00:00:55,899
i touch code on Android iOS Mac OS 10

00:00:51,460 --> 00:00:57,910
windows and if if I if I get told to I

00:00:55,899 --> 00:01:00,940
write a bit of Java services code as

00:00:57,910 --> 00:01:04,780
well which is kind of sad I cry myself

00:01:00,940 --> 00:01:07,780
to sleep quite frequently so last year

00:01:04,780 --> 00:01:11,770
at PyCon canada i gave a talk on the

00:01:07,780 --> 00:01:13,510
state of python on android and a couple

00:01:11,770 --> 00:01:16,150
of months later various online for

00:01:13,510 --> 00:01:19,000
picked it up here's his reddits android

00:01:16,150 --> 00:01:20,560
section this comment here summarizes the

00:01:19,000 --> 00:01:23,260
state of that for the results of that

00:01:20,560 --> 00:01:26,770
talk in a bit of a nutshell my talk was

00:01:23,260 --> 00:01:28,810
upsetting I concluded that there isn't

00:01:26,770 --> 00:01:32,500
really a good solution for making native

00:01:28,810 --> 00:01:34,720
Android apps on Android or iOS games

00:01:32,500 --> 00:01:36,729
absolute custom user interfaces are a

00:01:34,720 --> 00:01:39,189
bit of an exception so you might be

00:01:36,729 --> 00:01:45,070
wondering has what has changed in one

00:01:39,189 --> 00:01:47,560
year has anything changed no sorry so

00:01:45,070 --> 00:01:49,299
today's talk hopefully things that are a

00:01:47,560 --> 00:01:51,310
bit less upsetting than the talker gave

00:01:49,299 --> 00:01:53,280
last year which I do strongly recommend

00:01:51,310 --> 00:01:55,990
you go and watch or read the slides for

00:01:53,280 --> 00:01:58,420
I'm going to focus mostly on people who

00:01:55,990 --> 00:02:00,579
develop real Python stuff web developers

00:01:58,420 --> 00:02:02,020
other Python enthusiasts I'm not going

00:02:00,579 --> 00:02:04,240
to cover too much about making real

00:02:02,020 --> 00:02:05,649
native app stuff like that I don't think

00:02:04,240 --> 00:02:07,420
the support is there if you want to go

00:02:05,649 --> 00:02:10,329
and develop native apps that run on

00:02:07,420 --> 00:02:11,920
Android run on iOS go check out kevy go

00:02:10,329 --> 00:02:13,959
look at brendans talk use your time

00:02:11,920 --> 00:02:16,930
machine so I'm going to talk about a

00:02:13,959 --> 00:02:19,569
couple of things mostly developing web

00:02:16,930 --> 00:02:21,500
applications and what we can do about

00:02:19,569 --> 00:02:23,300
making pure python apps

00:02:21,500 --> 00:02:25,970
that run on your choice of mobile

00:02:23,300 --> 00:02:27,350
platform and something that I was going

00:02:25,970 --> 00:02:28,970
to talk about that don't have the time

00:02:27,350 --> 00:02:32,330
for is this thing that I call hybrid

00:02:28,970 --> 00:02:33,740
approaches but to start things off we'll

00:02:32,330 --> 00:02:37,790
recap a bit about what we're talking

00:02:33,740 --> 00:02:42,610
about today so mobile devices they're a

00:02:37,790 --> 00:02:45,470
thing so I had one of these for a while

00:02:42,610 --> 00:02:48,080
it's a pretty representative mobile

00:02:45,470 --> 00:02:50,209
device basically it was a it was a

00:02:48,080 --> 00:02:52,880
device that make phone calls and send

00:02:50,209 --> 00:02:56,840
some texts it in fact had an app as well

00:02:52,880 --> 00:02:58,520
snake was fantastic but that was really

00:02:56,840 --> 00:03:01,520
the extent of what phones and these

00:02:58,520 --> 00:03:03,230
sorts of things were in the early 2000s

00:03:01,520 --> 00:03:05,750
we had this thing called the pocket pc

00:03:03,230 --> 00:03:09,410
was like a pc but scaled down so it

00:03:05,750 --> 00:03:12,170
would fit in your pocket and well this

00:03:09,410 --> 00:03:13,520
was a bad idea as well because the sort

00:03:12,170 --> 00:03:16,400
of thats what we made for these things

00:03:13,520 --> 00:03:19,400
well that's like a spreadsheet graphing

00:03:16,400 --> 00:03:21,230
chart thingy program but scaled down to

00:03:19,400 --> 00:03:23,600
actually like operate those buttons down

00:03:21,230 --> 00:03:26,239
the bottom you need a stylist to operate

00:03:23,600 --> 00:03:28,040
it and these aren't really devices that

00:03:26,239 --> 00:03:31,790
we care about anymore because you know

00:03:28,040 --> 00:03:34,070
they're all 40 use so mobile programming

00:03:31,790 --> 00:03:36,410
is we know it's basically came around in

00:03:34,070 --> 00:03:39,049
2008 and there's three aspects of them

00:03:36,410 --> 00:03:41,269
that area that we really care about the

00:03:39,049 --> 00:03:42,500
first one is capacitive touchscreens so

00:03:41,269 --> 00:03:44,959
you can actually use your thumb to

00:03:42,500 --> 00:03:48,080
operate it you know devices you can use

00:03:44,959 --> 00:03:50,269
with your hands now these require new

00:03:48,080 --> 00:03:53,540
user interface frameworks beyond what we

00:03:50,269 --> 00:03:56,239
had previously because design approaches

00:03:53,540 --> 00:03:59,290
to that older you I talk it's talk talk

00:03:56,239 --> 00:04:01,670
up didn't really cater for mobile

00:03:59,290 --> 00:04:03,620
software based keyboards means that we

00:04:01,670 --> 00:04:06,709
have to deal with you know the available

00:04:03,620 --> 00:04:09,500
amount of content on our screen changing

00:04:06,709 --> 00:04:11,480
very frequently and it also makes for

00:04:09,500 --> 00:04:13,220
users that really hate typing because

00:04:11,480 --> 00:04:17,479
software keyboards are generally awful

00:04:13,220 --> 00:04:19,190
we also lose precision from from mouse

00:04:17,479 --> 00:04:20,840
pointers because we have to use our

00:04:19,190 --> 00:04:23,000
thumbs instead of curses so you have to

00:04:20,840 --> 00:04:24,820
make our designs less dense and make

00:04:23,000 --> 00:04:27,350
points of interaction really clear and

00:04:24,820 --> 00:04:29,930
from a Python developers point of view

00:04:27,350 --> 00:04:32,930
we have this problem of app stores which

00:04:29,930 --> 00:04:34,880
basically create rules for what things

00:04:32,930 --> 00:04:35,390
can be installed on a given class of

00:04:34,880 --> 00:04:38,420
device

00:04:35,390 --> 00:04:41,060
now on both Android and iOS app stores

00:04:38,420 --> 00:04:44,060
act as the only way of discovering which

00:04:41,060 --> 00:04:45,470
apps are available for a platform so you

00:04:44,060 --> 00:04:49,430
might be wondering where Python fits

00:04:45,470 --> 00:04:51,140
into this whole situation so as with my

00:04:49,430 --> 00:04:57,380
talk last year everything is still

00:04:51,140 --> 00:05:00,050
pretty bleak so iOS lots of people use

00:04:57,380 --> 00:05:02,210
iPhones use iPads for a very long time

00:05:00,050 --> 00:05:05,480
any language that was not anointed by

00:05:02,210 --> 00:05:08,540
Apple was banned from the App Store this

00:05:05,480 --> 00:05:11,900
was sort of as a way of getting rid of

00:05:08,540 --> 00:05:13,850
flash on on iOS but languages like

00:05:11,900 --> 00:05:15,830
Python like Ruby all these other

00:05:13,850 --> 00:05:18,590
languages that aren't Objective C or C

00:05:15,830 --> 00:05:22,100
or whatever were basically banned from

00:05:18,590 --> 00:05:25,040
from iOS as collateral so Python was

00:05:22,100 --> 00:05:29,870
collateral and these days who saw the

00:05:25,040 --> 00:05:32,800
WWDC keynote back in June so these days

00:05:29,870 --> 00:05:34,970
Apple a kind of hostile towards Python

00:05:32,800 --> 00:05:37,370
basically they developed a new language

00:05:34,970 --> 00:05:39,380
called Swift and then they created some

00:05:37,370 --> 00:05:41,690
bogus benchmarks that basically made

00:05:39,380 --> 00:05:44,060
Python look as absolutely dreadful as

00:05:41,690 --> 00:05:45,710
they possibly could make it like doing

00:05:44,060 --> 00:05:48,320
complex objects sorts whatever that

00:05:45,710 --> 00:05:51,650
means or doing cpu-bound encryption

00:05:48,320 --> 00:05:55,490
which also is not particularly good in C

00:05:51,650 --> 00:06:00,650
Python so iOS is kind of sort of hostile

00:05:55,490 --> 00:06:02,270
towards towards Python as it is and the

00:06:00,650 --> 00:06:05,240
other platform that we have what we have

00:06:02,270 --> 00:06:06,830
Android and that's a bit weird we know a

00:06:05,240 --> 00:06:09,350
lot about Java the Python community

00:06:06,830 --> 00:06:12,350
knows a lot about Java jython is a thing

00:06:09,350 --> 00:06:15,760
it works really well but Android doesn't

00:06:12,350 --> 00:06:17,780
actually use the JVM it uses this weird

00:06:15,760 --> 00:06:22,010
thing that's kind of sort of like the

00:06:17,780 --> 00:06:23,660
JVM but not quite called dalvik which

00:06:22,010 --> 00:06:25,820
basically means that Jason doesn't work

00:06:23,660 --> 00:06:28,490
on Android and you can't access Java API

00:06:25,820 --> 00:06:30,080
on Android it's taken people who aren't

00:06:28,490 --> 00:06:32,870
from Google because Google you care

00:06:30,080 --> 00:06:34,310
about putting Python onto onto Android

00:06:32,870 --> 00:06:36,400
it's taken them quite some time to

00:06:34,310 --> 00:06:38,540
figure out how to make things work and

00:06:36,400 --> 00:06:40,100
since people have figured out how to

00:06:38,540 --> 00:06:42,980
make things work well Google have gone

00:06:40,100 --> 00:06:44,240
and changed things again which is very

00:06:42,980 --> 00:06:46,400
kind of them making it really difficult

00:06:44,240 --> 00:06:48,190
for us Python developers to actually get

00:06:46,400 --> 00:06:51,880
stuff onto our phones

00:06:48,190 --> 00:06:55,930
now the people who come from the web the

00:06:51,880 --> 00:06:57,580
system's world we have the privilege of

00:06:55,930 --> 00:06:59,350
being able to choose what language we

00:06:57,580 --> 00:07:01,540
use to develop now we're all set some

00:06:59,350 --> 00:07:03,730
people we like Python but in the mobile

00:07:01,540 --> 00:07:06,970
world things are odd languages are

00:07:03,730 --> 00:07:09,430
anointed as official api's tend to be

00:07:06,970 --> 00:07:12,100
written in really specialized calling

00:07:09,430 --> 00:07:14,170
formats that require the specific

00:07:12,100 --> 00:07:16,420
language you have and re-implementing

00:07:14,170 --> 00:07:18,010
the api's in some other language would

00:07:16,420 --> 00:07:19,210
be time-consuming difficult and

00:07:18,010 --> 00:07:21,190
something you would not want to do

00:07:19,210 --> 00:07:25,720
unless you were paying someone quite a

00:07:21,190 --> 00:07:27,490
bit of money Mobile is also interesting

00:07:25,720 --> 00:07:30,880
in that the platform's have consistent

00:07:27,490 --> 00:07:34,060
design standards so official ap is which

00:07:30,880 --> 00:07:35,800
require official languages make it easy

00:07:34,060 --> 00:07:37,690
for you to get at the design standards

00:07:35,800 --> 00:07:40,510
that each language each platform users

00:07:37,690 --> 00:07:42,100
and people who are implementing

00:07:40,510 --> 00:07:44,860
alternative toolkits have to play

00:07:42,100 --> 00:07:47,920
catch-up which is kind of dreadful as

00:07:44,860 --> 00:07:50,140
well and finally there doesn't appear to

00:07:47,920 --> 00:07:51,760
be any real work in making Python happen

00:07:50,140 --> 00:07:53,950
on iOS or Android coming from any

00:07:51,760 --> 00:07:55,960
commercial entities it's all happening

00:07:53,950 --> 00:07:58,720
on people's spare time in the community

00:07:55,960 --> 00:08:00,700
this means people have specific needs

00:07:58,720 --> 00:08:02,830
that are filled rather than trying to

00:08:00,700 --> 00:08:05,050
solve a general problem that will that

00:08:02,830 --> 00:08:07,419
will solve a problem as a whole it's not

00:08:05,050 --> 00:08:09,310
necessarily a bad thing but it's it's at

00:08:07,419 --> 00:08:10,960
odds with the mobile industry people are

00:08:09,310 --> 00:08:13,900
basically using tool kits that are out

00:08:10,960 --> 00:08:16,510
there people aren't interested in in

00:08:13,900 --> 00:08:19,450
making tool kits by and large so in

00:08:16,510 --> 00:08:21,160
summary mobile is not a thing that that

00:08:19,450 --> 00:08:23,470
resembles any other thing that people

00:08:21,160 --> 00:08:25,810
have been developing for and python has

00:08:23,470 --> 00:08:27,070
been artificially disadvantaged so I

00:08:25,810 --> 00:08:32,469
hope you're all happy with the state of

00:08:27,070 --> 00:08:33,910
things the world is a wonderful place so

00:08:32,469 --> 00:08:35,950
the rest of this talk is basically a

00:08:33,910 --> 00:08:39,250
grab bag of things you can do without

00:08:35,950 --> 00:08:43,000
actually coding python or making native

00:08:39,250 --> 00:08:45,000
mobile apps in python and i'm going to

00:08:43,000 --> 00:08:47,290
take a guess most people here are

00:08:45,000 --> 00:08:48,420
generally interested in the web because

00:08:47,290 --> 00:08:50,410
they're the people making

00:08:48,420 --> 00:08:53,940
consumer-facing stuff am i right in that

00:08:50,410 --> 00:08:57,700
assumption web developers here cool a

00:08:53,940 --> 00:08:59,320
reasonable number of you so this is a

00:08:57,700 --> 00:09:00,910
quick overview and some pointers as to

00:08:59,320 --> 00:09:01,900
how web developers should approach

00:09:00,910 --> 00:09:03,910
mobile development

00:09:01,900 --> 00:09:05,590
now if you're an astute observer you'll

00:09:03,910 --> 00:09:08,080
know that I'm not actually talking about

00:09:05,590 --> 00:09:09,580
Python on mobile because if you think

00:09:08,080 --> 00:09:10,960
you're a Python developer doing web

00:09:09,580 --> 00:09:12,100
front-end thing is you're also

00:09:10,960 --> 00:09:16,120
delusional because you're actually

00:09:12,100 --> 00:09:17,500
writing JavaScript so what I'm talking

00:09:16,120 --> 00:09:19,300
about is basically what you're doing

00:09:17,500 --> 00:09:21,400
with desktop web you're writing a

00:09:19,300 --> 00:09:26,230
service code in Python and you're doing

00:09:21,400 --> 00:09:27,910
HTML and jes for the user interface so

00:09:26,230 --> 00:09:30,160
the key difference between designing for

00:09:27,910 --> 00:09:32,500
full sized computers and mobile devices

00:09:30,160 --> 00:09:35,230
is to actually consider how your design

00:09:32,500 --> 00:09:36,790
will work in a touch context now touch

00:09:35,230 --> 00:09:41,160
is interesting because you have

00:09:36,790 --> 00:09:44,170
basically meet pointers as opposed to as

00:09:41,160 --> 00:09:46,990
opposed to a mouse so this is a picture

00:09:44,170 --> 00:09:48,940
out of google's design guidelines for

00:09:46,990 --> 00:09:50,440
android basically touch screens they

00:09:48,940 --> 00:09:52,870
don't have a whole bunch of precision

00:09:50,440 --> 00:09:55,630
for touching things and it's difficult

00:09:52,870 --> 00:09:57,460
to tap things precisely so designs that

00:09:55,630 --> 00:09:59,220
pack a whole bunch of things into the

00:09:57,460 --> 00:10:01,810
same place are really difficult to use

00:09:59,220 --> 00:10:04,840
so this is a thing that google call the

00:10:01,810 --> 00:10:06,370
48 pixel grid they don't actually call

00:10:04,840 --> 00:10:09,490
it that i call it that but their name is

00:10:06,370 --> 00:10:11,980
a bit weird in this design basically

00:10:09,490 --> 00:10:14,680
having touched targets to the divide

00:10:11,980 --> 00:10:16,630
that divide your grid up by 48 pixel

00:10:14,680 --> 00:10:18,490
blocks actually gives you a clear amount

00:10:16,630 --> 00:10:19,840
of spacing for your your widgets and

00:10:18,490 --> 00:10:22,450
stuff like that so you can see that

00:10:19,840 --> 00:10:24,730
button there is about 48 people or 40

00:10:22,450 --> 00:10:26,800
pixels high it has some spacing to make

00:10:24,730 --> 00:10:27,940
sure that you don't miss it this is the

00:10:26,800 --> 00:10:30,820
thing you should do on your mobile

00:10:27,940 --> 00:10:32,950
websites it means that you don't create

00:10:30,820 --> 00:10:34,720
thing by if you're densely packing your

00:10:32,950 --> 00:10:36,790
hyperlinks on on a web page for example

00:10:34,720 --> 00:10:38,650
it's very easy to accidentally touch the

00:10:36,790 --> 00:10:40,930
wrong thing so there's a rule of fun

00:10:38,650 --> 00:10:44,290
keeping your tap targets 40 pixels wide

00:10:40,930 --> 00:10:47,410
40 pixels high makes things easier to

00:10:44,290 --> 00:10:50,410
tap now cell phones are operated with

00:10:47,410 --> 00:10:53,860
hands I don't know about you I can't see

00:10:50,410 --> 00:10:58,180
through my hand it's a device I can't

00:10:53,860 --> 00:11:00,280
see through so basically if you operate

00:10:58,180 --> 00:11:02,530
a thing with your hands you generally

00:11:00,280 --> 00:11:04,840
can't see the things that are under your

00:11:02,530 --> 00:11:06,880
hands while you're using your phone so

00:11:04,840 --> 00:11:09,220
designing navigation structures so that

00:11:06,880 --> 00:11:12,010
things that you don't need to see the

00:11:09,220 --> 00:11:13,100
content for goes up the top means that

00:11:12,010 --> 00:11:15,590
it's easier

00:11:13,100 --> 00:11:17,000
to or it makes more sense to put those

00:11:15,590 --> 00:11:19,150
things there and things that you do need

00:11:17,000 --> 00:11:21,500
to see the content for down the bottom

00:11:19,150 --> 00:11:24,620
the final thing that I want to talk

00:11:21,500 --> 00:11:28,310
about in design who hears heard of

00:11:24,620 --> 00:11:33,530
responsive design who here thinks that's

00:11:28,310 --> 00:11:35,060
a good name for it okay good so I call

00:11:33,530 --> 00:11:38,990
this what I think it actually is which

00:11:35,060 --> 00:11:45,260
is constraint responsive design which is

00:11:38,990 --> 00:11:47,150
basically dealing with dealing with the

00:11:45,260 --> 00:11:50,540
available width and height of a device

00:11:47,150 --> 00:11:53,060
and changing based changing whenever the

00:11:50,540 --> 00:11:54,410
the available constraints change this is

00:11:53,060 --> 00:11:56,450
kind of important for mobile because

00:11:54,410 --> 00:11:58,190
keyboards appear and disappear quite

00:11:56,450 --> 00:12:00,590
frequently because people change their

00:11:58,190 --> 00:12:02,420
phone from portrait to landscape quite

00:12:00,590 --> 00:12:05,690
frequently and this drastically limits

00:12:02,420 --> 00:12:08,000
the space you have to display things so

00:12:05,690 --> 00:12:11,180
here's an example I have a android phone

00:12:08,000 --> 00:12:12,890
this is in portrait mode it's great for

00:12:11,180 --> 00:12:15,080
showing long pages with lots of height

00:12:12,890 --> 00:12:17,360
but not white images you can see a whole

00:12:15,080 --> 00:12:19,100
bunch of stuff is cut off and if i put

00:12:17,360 --> 00:12:22,430
my keyboard up well I lose about a third

00:12:19,100 --> 00:12:24,290
of my height and I swap over to

00:12:22,430 --> 00:12:27,050
landscape well I can see more of that

00:12:24,290 --> 00:12:29,660
picture but then if the keyboard pops up

00:12:27,050 --> 00:12:31,310
I lose sort of half of it so if you're

00:12:29,660 --> 00:12:32,870
doing design stuff you should make sure

00:12:31,310 --> 00:12:35,750
that your design works in basically

00:12:32,870 --> 00:12:37,160
every every orientation you have it with

00:12:35,750 --> 00:12:39,050
the keyboard up with a keyboard down

00:12:37,160 --> 00:12:42,080
responsive design is kind of important

00:12:39,050 --> 00:12:47,780
for that the final thing i want to touch

00:12:42,080 --> 00:12:49,760
on is is discoverability of web apps web

00:12:47,780 --> 00:12:51,740
apps have a kind of a big disadvantage

00:12:49,760 --> 00:12:55,220
compared with absolute a package for a

00:12:51,740 --> 00:12:57,170
mobile platform the web is hugely in

00:12:55,220 --> 00:12:59,210
accessible on mobile devices because

00:12:57,170 --> 00:13:01,970
software keyboards are difficult to type

00:12:59,210 --> 00:13:03,350
on coming back to pages is difficult

00:13:01,970 --> 00:13:06,050
because it's difficult to bookmark

00:13:03,350 --> 00:13:08,510
things and navigate bookmarks on mobile

00:13:06,050 --> 00:13:11,060
devices so you kind of want to be

00:13:08,510 --> 00:13:14,180
accessible on app stores and to make a

00:13:11,060 --> 00:13:17,240
point here I'm going to make an app

00:13:14,180 --> 00:13:19,400
shortcut from chrome for a for

00:13:17,240 --> 00:13:21,440
conference that i was at last week so to

00:13:19,400 --> 00:13:25,070
do that I have to open my browser I have

00:13:21,440 --> 00:13:26,810
to type a URI when the page loads and

00:13:25,070 --> 00:13:29,060
then I have to press a bunch of link

00:13:26,810 --> 00:13:32,210
target's to find a schedule and then I

00:13:29,060 --> 00:13:34,400
have to press the button here and then

00:13:32,210 --> 00:13:36,170
this really obvious button that says add

00:13:34,400 --> 00:13:38,060
to homescreen is the one they need to

00:13:36,170 --> 00:13:40,490
press and then if I forgot to add a

00:13:38,060 --> 00:13:42,590
favorite icon then the shortcut that I

00:13:40,490 --> 00:13:44,660
get on my home screen is this really

00:13:42,590 --> 00:13:47,420
obvious our page with the world on it as

00:13:44,660 --> 00:13:51,890
opposed to like a nice icon this is kind

00:13:47,420 --> 00:13:54,350
of awful the alternative is of course

00:13:51,890 --> 00:13:56,420
making yourself a nice app that goes in

00:13:54,350 --> 00:13:57,980
the in a in an app store where you

00:13:56,420 --> 00:14:03,170
search for the thing you want you select

00:13:57,980 --> 00:14:05,240
the app you want and there it is so if

00:14:03,170 --> 00:14:07,790
you want to be found on them on mobile

00:14:05,240 --> 00:14:09,800
and you absolutely insist on using the

00:14:07,790 --> 00:14:12,350
web you should make it easy to find your

00:14:09,800 --> 00:14:15,529
apps it's not that hard and it will get

00:14:12,350 --> 00:14:17,690
you get you more users so you can create

00:14:15,529 --> 00:14:19,400
a simple wrapper that puts yourself in

00:14:17,690 --> 00:14:23,510
the Play Store or in the App Store on

00:14:19,400 --> 00:14:28,250
iOS and that's sort of half the way half

00:14:23,510 --> 00:14:29,870
the way there for bonus points you can

00:14:28,250 --> 00:14:33,200
make your web app behave a bit more like

00:14:29,870 --> 00:14:35,480
a mobile app so the first thing you can

00:14:33,200 --> 00:14:36,860
do is to wrap a simple app write a

00:14:35,480 --> 00:14:39,140
simple app that basically takes a

00:14:36,860 --> 00:14:41,930
webview and loads your your page but

00:14:39,140 --> 00:14:44,990
it's a bit lazy people don't expect your

00:14:41,930 --> 00:14:47,600
expect mobile apps to work like that you

00:14:44,990 --> 00:14:50,120
need to meet users expectations apps

00:14:47,600 --> 00:14:54,320
have a certain set of implied behavior

00:14:50,120 --> 00:14:56,570
that most web apps get wrong this is

00:14:54,320 --> 00:14:59,570
things like resuming state when an app

00:14:56,570 --> 00:15:03,680
gets killed being easier to navigate

00:14:59,570 --> 00:15:05,089
forward and backward keeping 8si being

00:15:03,680 --> 00:15:07,940
able to remember you where you are and

00:15:05,089 --> 00:15:11,000
working offline so basically things that

00:15:07,940 --> 00:15:13,250
you need to do include remembering stuff

00:15:11,000 --> 00:15:15,200
off session across sessions like

00:15:13,250 --> 00:15:17,990
remaining logged in even if an app gets

00:15:15,200 --> 00:15:20,480
killed they should remember where they

00:15:17,990 --> 00:15:23,570
have were so they should launch again to

00:15:20,480 --> 00:15:26,630
the same page as as they were in when

00:15:23,570 --> 00:15:27,980
that gets killed because if you if you

00:15:26,630 --> 00:15:30,350
change apps on a mobile platform

00:15:27,980 --> 00:15:36,140
sometimes they get killed by the OS this

00:15:30,350 --> 00:15:37,850
is a thing and and basically you can do

00:15:36,140 --> 00:15:40,220
this by ensuring that every state of

00:15:37,850 --> 00:15:41,540
your web app has a unique URI

00:15:40,220 --> 00:15:43,670
and for bonus points they should

00:15:41,540 --> 00:15:46,700
function well off line using like HTML

00:15:43,670 --> 00:15:48,820
offline support tool kits like PhoneGap

00:15:46,700 --> 00:15:52,400
can be used to write full-featured

00:15:48,820 --> 00:15:54,560
wrapped html5 JavaScript apps but they

00:15:52,400 --> 00:15:56,930
can also do basic web view wrapping like

00:15:54,560 --> 00:16:02,300
I've just described it might possibly be

00:15:56,930 --> 00:16:05,420
a bit bloated here so the message here

00:16:02,300 --> 00:16:07,190
to take home is that you know lots of

00:16:05,420 --> 00:16:08,960
people may say nasty things about web

00:16:07,190 --> 00:16:11,660
apps in mobile but the truth is that if

00:16:08,960 --> 00:16:13,490
you play nicely behave like a mobile app

00:16:11,660 --> 00:16:16,070
then your users won't care that you're a

00:16:13,490 --> 00:16:18,650
web app so go and do it it makes your

00:16:16,070 --> 00:16:22,370
apps it makes your products easier to

00:16:18,650 --> 00:16:26,560
find so the next thing I want to talk

00:16:22,370 --> 00:16:29,300
about is the pursuit of basically apps

00:16:26,560 --> 00:16:33,440
written in Python running on mobile

00:16:29,300 --> 00:16:36,050
devices and when I did my survey of of

00:16:33,440 --> 00:16:38,450
Python on mobile last year I saw a bunch

00:16:36,050 --> 00:16:41,240
of contenders including including pie

00:16:38,450 --> 00:16:43,490
game including cutie but there's really

00:16:41,240 --> 00:16:48,590
only one contender now and that's Kevvy

00:16:43,490 --> 00:16:51,250
Kevvy is a kibbeh is the only thing is

00:16:48,590 --> 00:16:55,550
making progress in terms of making

00:16:51,250 --> 00:16:57,310
python run on android run on iOS now

00:16:55,550 --> 00:17:02,810
Brendan Scott just gave a really

00:16:57,310 --> 00:17:04,040
extended talk on kevy also there's quite

00:17:02,810 --> 00:17:05,900
a few talks on that that will cover

00:17:04,040 --> 00:17:08,080
Kitty better than I ever will so if you

00:17:05,900 --> 00:17:10,280
want to do that go look at those talks

00:17:08,080 --> 00:17:13,040
so for those of you who want the quick

00:17:10,280 --> 00:17:16,100
overview of what Kitty is it's really

00:17:13,040 --> 00:17:18,200
two things there's firstly a UI toolkit

00:17:16,100 --> 00:17:21,050
with custom widgets that work across

00:17:18,200 --> 00:17:24,140
multiple platforms with a bit of a focus

00:17:21,050 --> 00:17:26,150
on touch applications so people really

00:17:24,140 --> 00:17:29,090
think about this in terms of deploying

00:17:26,150 --> 00:17:31,160
python activity using heavy to deploy

00:17:29,090 --> 00:17:33,590
python on iOS to deploy it on android

00:17:31,160 --> 00:17:35,630
and then there's also a series of

00:17:33,590 --> 00:17:39,110
projects for embedding and deploying

00:17:35,630 --> 00:17:45,520
python on mobile platforms so kitty is

00:17:39,110 --> 00:17:49,460
pretty fantastic it's useful for doing a

00:17:45,520 --> 00:17:51,920
limited subset of mobile tasks kitty is

00:17:49,460 --> 00:17:54,169
really good at doing completely custom

00:17:51,920 --> 00:17:56,179
ui's so if you don't care about

00:17:54,169 --> 00:17:58,549
making your app match the native look

00:17:56,179 --> 00:18:00,320
and feel of your system then Kitty might

00:17:58,549 --> 00:18:05,600
be good it and get your cross platform

00:18:00,320 --> 00:18:09,409
app quite quickly this is a good thing

00:18:05,600 --> 00:18:14,600
if you're aiming to get so deterring my

00:18:09,409 --> 00:18:17,059
notes better so Kitty is not something

00:18:14,600 --> 00:18:19,399
for making native you eyes on mobile

00:18:17,059 --> 00:18:21,679
platforms it implements its own widget

00:18:19,399 --> 00:18:23,779
set and it does not accurately replicate

00:18:21,679 --> 00:18:25,789
the feel of UI elements as they are on

00:18:23,779 --> 00:18:27,619
their own platform so it doesn't

00:18:25,789 --> 00:18:29,029
implement the look and feel of iOS it

00:18:27,619 --> 00:18:31,429
does not implement look and feel of

00:18:29,029 --> 00:18:34,429
Android and if they do they're basically

00:18:31,429 --> 00:18:36,919
doing manual replication they lag behind

00:18:34,429 --> 00:18:38,690
other platforms they won't feel quite as

00:18:36,919 --> 00:18:40,070
good as the official widgets the

00:18:38,690 --> 00:18:42,200
exception here is where you're doing

00:18:40,070 --> 00:18:45,019
custom ui's so if you do games for

00:18:42,200 --> 00:18:48,499
example out where you an angry bird does

00:18:45,019 --> 00:18:50,179
not need to look like a button so give

00:18:48,499 --> 00:18:52,159
is a perfectly good platform to do this

00:18:50,179 --> 00:18:56,869
sort of thing with and you get to do

00:18:52,159 --> 00:18:58,940
things in Python which is really nice QB

00:18:56,869 --> 00:19:02,799
says it will run on it'll make the same

00:18:58,940 --> 00:19:05,659
app run on Android iOS Windows Mac OS 10

00:19:02,799 --> 00:19:07,759
but you need to consider whether or not

00:19:05,659 --> 00:19:10,009
an app that works in a touch context

00:19:07,759 --> 00:19:14,389
will also work in a desktop keyboard

00:19:10,009 --> 00:19:16,190
mouse context at the same time just

00:19:14,389 --> 00:19:17,749
because something will run on multiple

00:19:16,190 --> 00:19:21,049
platforms you should consider whether or

00:19:17,749 --> 00:19:22,700
not it should one thing that is

00:19:21,049 --> 00:19:25,039
substantially improved over the last

00:19:22,700 --> 00:19:28,129
couple of years is access to hardware

00:19:25,039 --> 00:19:30,830
api's on mobile platforms people care

00:19:28,129 --> 00:19:32,059
about doing things like geolocation you

00:19:30,830 --> 00:19:34,820
want to know where you are when your

00:19:32,059 --> 00:19:36,830
when your mobile accelerometer access

00:19:34,820 --> 00:19:38,690
things like that these are things that

00:19:36,830 --> 00:19:40,879
make mobile device is more interesting

00:19:38,690 --> 00:19:43,159
than desktop devices now the kitty

00:19:40,879 --> 00:19:45,139
project has been the primary driver of

00:19:43,159 --> 00:19:47,600
this they've produced a couple of

00:19:45,139 --> 00:19:50,179
projects one called pi genius and one

00:19:47,600 --> 00:19:53,929
called pi objects these are tools that

00:19:50,179 --> 00:19:56,749
wrap up complex interfaces on each

00:19:53,929 --> 00:19:59,149
platforms also they provide access to

00:19:56,749 --> 00:20:03,080
complex interfaces on each platforms

00:19:59,149 --> 00:20:05,239
preferred language so PI genius gives

00:20:03,080 --> 00:20:07,580
you access to jut the Java native

00:20:05,239 --> 00:20:07,970
interface on Android it allows you to

00:20:07,580 --> 00:20:11,000
wrap

00:20:07,970 --> 00:20:13,340
java classes in in in Python really

00:20:11,000 --> 00:20:15,500
quite quickly and pi objects does the

00:20:13,340 --> 00:20:17,300
same thing with Objective C so to give

00:20:15,500 --> 00:20:20,060
you a sort of an idea of how this works

00:20:17,300 --> 00:20:23,270
this is my first and probably got one of

00:20:20,060 --> 00:20:26,810
two code slides in this talk this is

00:20:23,270 --> 00:20:28,670
code to to wrap a to wrap an

00:20:26,810 --> 00:20:31,610
onclicklistener in android so you

00:20:28,670 --> 00:20:33,770
basically say that this is a Python Java

00:20:31,610 --> 00:20:35,570
class you say what Java interface it

00:20:33,770 --> 00:20:38,930
implements and then you go and implement

00:20:35,570 --> 00:20:41,300
the jni methods that you need to the

00:20:38,930 --> 00:20:44,960
objective-c version is also quite

00:20:41,300 --> 00:20:46,910
similar this is PI objects wrapping NS

00:20:44,960 --> 00:20:50,630
string which is the string class and

00:20:46,910 --> 00:20:51,830
Objective C it's quite easy to do but

00:20:50,630 --> 00:20:54,380
you'll notice we have this funny

00:20:51,830 --> 00:20:57,230
trailing underscore thing Objective C

00:20:54,380 --> 00:21:02,330
has a really weird method calling syntax

00:20:57,230 --> 00:21:03,620
where you interleave parameters with

00:21:02,330 --> 00:21:08,120
parameter names it doesn't quite

00:21:03,620 --> 00:21:10,520
translate well as a Python so there is a

00:21:08,120 --> 00:21:12,170
way to basically get to get to native

00:21:10,520 --> 00:21:14,570
Java and objective-c classes within

00:21:12,170 --> 00:21:17,810
Python but it requires a lot of

00:21:14,570 --> 00:21:20,270
boilerplate another kitty project that's

00:21:17,810 --> 00:21:23,110
coming around in just the last year is a

00:21:20,270 --> 00:21:25,730
thing called player which is basically a

00:21:23,110 --> 00:21:28,490
simple way from streck ting away various

00:21:25,730 --> 00:21:30,740
pieces of hardware so they provide an

00:21:28,490 --> 00:21:33,380
accelerometer class in Python which in

00:21:30,740 --> 00:21:36,080
turn calls the Android accelerometer

00:21:33,380 --> 00:21:38,810
class on on Android using the using the

00:21:36,080 --> 00:21:40,700
jni and does the same thing on iOS using

00:21:38,810 --> 00:21:44,390
a consistent interface so you can make

00:21:40,700 --> 00:21:46,460
cross platform cross-platform mobile

00:21:44,390 --> 00:21:49,670
apps that don't need to spend a lot of

00:21:46,460 --> 00:21:53,090
time implementing both the device ap is

00:21:49,670 --> 00:21:56,210
on each platform the final frontier of

00:21:53,090 --> 00:21:58,520
mobile dev in Python i think is to

00:21:56,210 --> 00:22:00,470
access each platforms native UI

00:21:58,520 --> 00:22:02,060
libraries it will be great because it

00:22:00,470 --> 00:22:05,690
means i wouldn't need to code java in my

00:22:02,060 --> 00:22:09,140
day job so the obvious candidates here

00:22:05,690 --> 00:22:11,660
are pi genius and pi objet but these are

00:22:09,140 --> 00:22:14,420
not quite there yet they seem to be

00:22:11,660 --> 00:22:18,140
aimed mostly towards supporting TV apps

00:22:14,420 --> 00:22:21,790
the bits of Android and iOS where gooeys

00:22:18,140 --> 00:22:25,160
come in are not terribly supported well

00:22:21,790 --> 00:22:27,380
bye-bye these projects yet so for

00:22:25,160 --> 00:22:29,720
example floors on Android if you want to

00:22:27,380 --> 00:22:31,340
access read-only classes these are ones

00:22:29,720 --> 00:22:34,910
that you don't need to extend you'll

00:22:31,340 --> 00:22:36,890
find there that will get you most of the

00:22:34,910 --> 00:22:39,429
device API access but if you need to

00:22:36,890 --> 00:22:42,020
extend classes you're out of luck so

00:22:39,429 --> 00:22:44,080
Android users manage classes that you

00:22:42,020 --> 00:22:48,590
need to extend in Java you can't do that

00:22:44,080 --> 00:22:51,140
from Python just yet and on iOS the

00:22:48,590 --> 00:22:53,240
interface builder actions and outlets

00:22:51,140 --> 00:22:57,770
don't work in PI objects so you can't

00:22:53,240 --> 00:23:00,770
you can't connect I OS native interface

00:22:57,770 --> 00:23:04,460
builder you is one interesting thing

00:23:00,770 --> 00:23:06,200
that I saw in the iOS 8 beta is that

00:23:04,460 --> 00:23:09,290
there's now actually a Python framework

00:23:06,200 --> 00:23:12,080
that you can deploy to iOS so while they

00:23:09,290 --> 00:23:14,600
were slagging off on python in the WWDC

00:23:12,080 --> 00:23:16,880
keynote they actually released python

00:23:14,600 --> 00:23:22,150
for iOS which i thought was kind of

00:23:16,880 --> 00:23:26,809
curious i have no idea what this means

00:23:22,150 --> 00:23:28,160
but i think i think there's something to

00:23:26,809 --> 00:23:31,990
be read into that i'm not quite sure

00:23:28,160 --> 00:23:36,650
what it is we might know in a year or so

00:23:31,990 --> 00:23:38,120
yeah I have no idea either again one

00:23:36,650 --> 00:23:39,559
thing I touched on in a longer version

00:23:38,120 --> 00:23:41,960
of this talk is something called a

00:23:39,559 --> 00:23:44,360
hybrid approach which is where you write

00:23:41,960 --> 00:23:46,400
a substantial part of your core logic in

00:23:44,360 --> 00:23:48,200
Python but write your user interface

00:23:46,400 --> 00:23:52,730
code in your platforms preferred

00:23:48,200 --> 00:23:54,500
language if you separate us if you

00:23:52,730 --> 00:23:58,669
produce a really rich web api for

00:23:54,500 --> 00:24:01,520
example that's one way of doing it so

00:23:58,669 --> 00:24:04,100
you make HTTP calls to a python service

00:24:01,520 --> 00:24:06,020
and it looks like thanks to kivi it

00:24:04,100 --> 00:24:08,809
might be possible to embed an entirely

00:24:06,020 --> 00:24:11,390
python services layer onto a native app

00:24:08,809 --> 00:24:14,240
and just write your UI code on your

00:24:11,390 --> 00:24:15,890
preferred platform have a chat to me

00:24:14,240 --> 00:24:17,929
later a bit more if you want to know a

00:24:15,890 --> 00:24:19,549
bit more about this I do something

00:24:17,929 --> 00:24:23,090
similar in my day job just not with

00:24:19,549 --> 00:24:25,280
Python so this brings us to the end of

00:24:23,090 --> 00:24:27,080
the talk there hasn't been much real

00:24:25,280 --> 00:24:28,400
progress in getting full apps that fit

00:24:27,080 --> 00:24:31,429
in with the rest of the system working

00:24:28,400 --> 00:24:33,020
on Python and this is sad but there's

00:24:31,429 --> 00:24:35,530
still a place to the Python coder in the

00:24:33,020 --> 00:24:39,680
mobile world

00:24:35,530 --> 00:24:42,230
so firstly we know that mobile sucks in

00:24:39,680 --> 00:24:44,840
general and Python support on mobile

00:24:42,230 --> 00:24:49,220
also sucks but it's still possible to

00:24:44,840 --> 00:24:51,410
write lots of Python on your back end

00:24:49,220 --> 00:24:54,830
and make your front end in other

00:24:51,410 --> 00:24:56,720
languages that's the end of the talk as

00:24:54,830 --> 00:24:58,280
far as scheduled time is concerned I

00:24:56,720 --> 00:25:00,230
have like five minutes for questions I

00:24:58,280 --> 00:25:08,270
guess yep you have five minutes

00:25:00,230 --> 00:25:10,550
fantastic questions I'm entirely

00:25:08,270 --> 00:25:13,670
surprised by this first questioner yes

00:25:10,550 --> 00:25:15,440
um I would never ask a question and the

00:25:13,670 --> 00:25:18,530
user we talk to particular about Android

00:25:15,440 --> 00:25:19,930
but also in iOS about whether it's the

00:25:18,530 --> 00:25:21,950
limitations here are they technical

00:25:19,930 --> 00:25:24,200
impossibilities or just a matter of

00:25:21,950 --> 00:25:27,410
man-hours and women hours of resources

00:25:24,200 --> 00:25:29,900
being thrown at the problem okay so in

00:25:27,410 --> 00:25:32,150
the case of Android and the jni there is

00:25:29,900 --> 00:25:35,630
a fundamental technical limitation in

00:25:32,150 --> 00:25:38,930
terms of extending java classes over the

00:25:35,630 --> 00:25:41,270
java native interface that's something

00:25:38,930 --> 00:25:44,170
that will not be solved without doing

00:25:41,270 --> 00:25:47,060
some level I suspect of code generation

00:25:44,170 --> 00:25:49,400
during a build phase so producing

00:25:47,060 --> 00:25:51,170
something that will implement the subset

00:25:49,400 --> 00:25:53,810
of methods that you want to override on

00:25:51,170 --> 00:25:55,870
the Python side but giving an interface

00:25:53,810 --> 00:25:58,700
so you can implement it on the on the

00:25:55,870 --> 00:26:02,690
Python side which is basically how pi

00:25:58,700 --> 00:26:04,400
genius works in the case of iOS I'm not

00:26:02,690 --> 00:26:07,130
sure whether or not that's a technical

00:26:04,400 --> 00:26:10,130
limitation the PI objective-c bridge on

00:26:07,130 --> 00:26:12,530
Mac OS 10 definitely supports the

00:26:10,130 --> 00:26:14,480
interface builder stuff I'm not sure if

00:26:12,530 --> 00:26:17,840
there is actually a limit on on iOS

00:26:14,480 --> 00:26:19,130
though okay um to that end in about 20

00:26:17,840 --> 00:26:21,110
minutes half an hour's time I'm getting

00:26:19,130 --> 00:26:22,880
a lightning talk which may be relevant

00:26:21,110 --> 00:26:25,700
to your interests if on that particular

00:26:22,880 --> 00:26:27,800
topic so on the iOS seidel were maybe

00:26:25,700 --> 00:26:31,490
I'll just leave it at that shell oh okay

00:26:27,800 --> 00:26:33,520
cool alternatively you can get someone

00:26:31,490 --> 00:26:38,780
working on python that runs on dalvik

00:26:33,520 --> 00:26:41,180
they're saying well yes Richard yes

00:26:38,780 --> 00:26:42,679
hello I wonder if you could just touch a

00:26:41,180 --> 00:26:47,220
little bit more on this concept of

00:26:42,679 --> 00:26:50,400
having a native UI with a Python service

00:26:47,220 --> 00:26:52,169
okay so C Python will definitely run on

00:26:50,400 --> 00:26:55,110
Android this is how QV works it will run

00:26:52,169 --> 00:26:59,220
on iOS once again that's how QV does its

00:26:55,110 --> 00:27:03,120
thing I suspect it should be possible to

00:26:59,220 --> 00:27:05,340
call into Python from a from a Java

00:27:03,120 --> 00:27:06,659
activity because once again kivi somehow

00:27:05,340 --> 00:27:09,240
needs to bootstrap and Android

00:27:06,659 --> 00:27:11,610
application keep you somehow needs to

00:27:09,240 --> 00:27:14,750
bootstrap an objective-c application in

00:27:11,610 --> 00:27:14,750
order to launch the Python interpreter

00:27:14,809 --> 00:27:22,740
there could be an avenue for extra work

00:27:18,030 --> 00:27:25,049
of so for work here in actually making a

00:27:22,740 --> 00:27:28,020
rapper that will allow you to call into

00:27:25,049 --> 00:27:31,530
Python from the preferred language of

00:27:28,020 --> 00:27:35,760
your platform I haven't seen it done yet

00:27:31,530 --> 00:27:38,460
but everything seems to be there it just

00:27:35,760 --> 00:27:43,409
is something that hasn't been done but

00:27:38,460 --> 00:27:45,480
it should be Tennessee I'm not ask a

00:27:43,409 --> 00:27:47,850
really ignorant question I think on

00:27:45,480 --> 00:27:49,320
Android the ideas that the applications

00:27:47,850 --> 00:27:51,270
in theory is supposed to be able to

00:27:49,320 --> 00:27:52,919
basically provide services to each other

00:27:51,270 --> 00:27:54,450
right couldn't you basically do a two

00:27:52,919 --> 00:27:56,340
application process where one

00:27:54,450 --> 00:27:58,620
applications in Python providing

00:27:56,340 --> 00:28:03,059
services and another one's and like a

00:27:58,620 --> 00:28:06,000
Java app that consume services yes you

00:28:03,059 --> 00:28:07,860
could theoretically do that the question

00:28:06,000 --> 00:28:09,450
is how you sort of provide the interface

00:28:07,860 --> 00:28:13,049
and that's an unanswered question at the

00:28:09,450 --> 00:28:17,700
moment like HTTP might be a way to do it

00:28:13,049 --> 00:28:22,919
badly but that could work as a way of

00:28:17,700 --> 00:28:26,070
doing inter language communication yeah

00:28:22,919 --> 00:28:28,559
so I've used could / or phonegap yeah

00:28:26,070 --> 00:28:29,909
sure with web applications and I'm just

00:28:28,559 --> 00:28:32,000
wondering do you think there's giving it

00:28:29,909 --> 00:28:34,260
those work going on with transpiring

00:28:32,000 --> 00:28:36,419
Python across to JavaScript that that

00:28:34,260 --> 00:28:39,450
might be another way to develop

00:28:36,419 --> 00:28:42,900
cross-platform apps with Python yeah if

00:28:39,450 --> 00:28:45,690
you're happy to tolerate if you're happy

00:28:42,900 --> 00:28:47,850
to tolerate a web browser as your as

00:28:45,690 --> 00:28:52,470
your front end then absolutely that

00:28:47,850 --> 00:28:56,070
would be a good way to do it go see Ryan

00:28:52,470 --> 00:28:58,200
Kelly's talk tomorrow on pipe ijs for

00:28:56,070 --> 00:29:01,600
more on there

00:28:58,200 --> 00:29:03,249
this is yes so if you're happy to

00:29:01,600 --> 00:29:05,470
tolerate the web as a front end then

00:29:03,249 --> 00:29:08,249
that would be an interesting thing to do

00:29:05,470 --> 00:29:11,200
it just depends on the power of your of

00:29:08,249 --> 00:29:13,509
your phone to interpret the massive

00:29:11,200 --> 00:29:16,360
block of JavaScript that is your Python

00:29:13,509 --> 00:29:18,279
interpreter it should work right now

00:29:16,360 --> 00:29:20,950
it's just whether you would want it to

00:29:18,279 --> 00:29:26,909
work or not is a different question any

00:29:20,950 --> 00:29:39,389
others any other questions all right oh

00:29:26,909 --> 00:29:39,389
you have one minute ish thank you

00:29:39,450 --> 00:29:42,990
everyone Chris

00:29:51,920 --> 00:29:53,980

YouTube URL: https://www.youtube.com/watch?v=R1neKbS7UZM


