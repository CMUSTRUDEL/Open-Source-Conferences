Title: Software Component Architectures and circuits? by James Mills
Publication date: 2014-08-05
Playlist: PyCon Australia 2014
Description: 
	Python Asynchronous Frameworks are plentiful in the Python Community. There is Twisted, gevent, Tornado, asynccore and now with Python 3.4, asyncio. circuits is not yet another Asynchronous Framework (although it does support Async I/O) but a strong well defined Component Architecture for building complex software with changing requirements. If you have ever developed with Zope or Kamaelia you will be familiar with the "Component" concept. circuits offers a unique perspective on Component Architectures and offers a novel way to design, implement and deploy complex software.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:05,259 --> 00:00:10,950
also please go easy on me this talk is

00:00:09,200 --> 00:00:13,580
on software

00:00:10,950 --> 00:00:16,139
textures specifically the circuits

00:00:13,580 --> 00:00:20,430
piping framework so circuits is a Python

00:00:16,139 --> 00:00:24,270
frame way my name is obviously James

00:00:20,430 --> 00:00:26,939
Mills I'm also anonymity known on the

00:00:24,270 --> 00:00:28,470
web is pro logic you've probably seen

00:00:26,939 --> 00:00:31,739
someone of repositories and Python

00:00:28,470 --> 00:00:36,690
packages I may have contributed to um

00:00:31,739 --> 00:00:39,360
I'm a Python web developer python Esther

00:00:36,690 --> 00:00:44,910
if you want to call it that I do a lot

00:00:39,360 --> 00:00:50,930
of work in the web space um open source

00:00:44,910 --> 00:00:53,850
enthusiast obviously proud father and

00:00:50,930 --> 00:00:56,340
those sorts of things you'll have to

00:00:53,850 --> 00:00:57,720
forgive me I probably just I probably

00:00:56,340 --> 00:00:59,700
shouldn't even do this I actually can't

00:00:57,720 --> 00:01:01,230
see that well I'm vision impaired so

00:00:59,700 --> 00:01:06,240
i'll try not to talk to the slides as

00:01:01,230 --> 00:01:08,610
best I can that's better so some of the

00:01:06,240 --> 00:01:11,520
things that I've done recently I've

00:01:08,610 --> 00:01:13,290
worked at Griffith University I've had

00:01:11,520 --> 00:01:16,079
to recently change jobs because of the

00:01:13,290 --> 00:01:18,840
contractual issues restructures of that

00:01:16,079 --> 00:01:20,969
sort of thing I worked on two major

00:01:18,840 --> 00:01:22,770
systems there the turnover content

00:01:20,969 --> 00:01:24,539
management system which is basically

00:01:22,770 --> 00:01:28,049
written in plone with a lot of custom

00:01:24,539 --> 00:01:29,880
packages plan itself is actually built

00:01:28,049 --> 00:01:32,959
on soap I'm sure all of you familiar

00:01:29,880 --> 00:01:36,420
with soap as a component architecture

00:01:32,959 --> 00:01:39,079
and I've also worked on another sort of

00:01:36,420 --> 00:01:41,130
side project along that called the

00:01:39,079 --> 00:01:44,189
climate change adaptation and

00:01:41,130 --> 00:01:46,619
visualization tool it sounds like a bit

00:01:44,189 --> 00:01:50,270
of a convoluted name it's essentially a

00:01:46,619 --> 00:01:52,289
climate model data browser for big data

00:01:50,270 --> 00:01:55,229
that gets churned out of high

00:01:52,289 --> 00:01:57,319
performance computing clusters I've done

00:01:55,229 --> 00:02:00,869
various other things over the years

00:01:57,319 --> 00:02:04,459
wiki's content motion systems IRC BOTS

00:02:00,869 --> 00:02:04,459
everyone's written in IRC bot

00:02:08,510 --> 00:02:15,900
so what is circuits as as I just alluded

00:02:14,190 --> 00:02:18,150
to before circuits is a Python framework

00:02:15,900 --> 00:02:20,850
it has no external dependencies it's all

00:02:18,150 --> 00:02:22,620
written in pure parking so there's no c

00:02:20,850 --> 00:02:25,560
extensions to compile when installing it

00:02:22,620 --> 00:02:31,140
you can pip install circuits and it

00:02:25,560 --> 00:02:32,760
should install pretty quickly probably

00:02:31,140 --> 00:02:34,920
most importantly is that circuit sees a

00:02:32,760 --> 00:02:36,390
component architecture will cover a

00:02:34,920 --> 00:02:41,280
little bit more on that in the next few

00:02:36,390 --> 00:02:44,760
slides it's event-driven supports

00:02:41,280 --> 00:02:46,740
asynchronous i/o and co routines it's

00:02:44,760 --> 00:02:49,710
probably always supported asynchronous

00:02:46,740 --> 00:02:52,680
i/o but that's not the space that

00:02:49,710 --> 00:02:55,470
circuits really sort of competes in its

00:02:52,680 --> 00:02:56,940
more around architecting software and

00:02:55,470 --> 00:03:01,320
trying to create more maintainable

00:02:56,940 --> 00:03:04,800
software circuits also has a web

00:03:01,320 --> 00:03:06,210
framework and plays nicely with other

00:03:04,800 --> 00:03:10,739
libraries and frameworks including

00:03:06,210 --> 00:03:12,300
tornado twisted recently I've done some

00:03:10,739 --> 00:03:14,850
work in actually integrating circuits

00:03:12,300 --> 00:03:16,350
with twisted that is that to say that we

00:03:14,850 --> 00:03:17,970
can actually run twisted protocols and

00:03:16,350 --> 00:03:23,820
applications on top of the circuits

00:03:17,970 --> 00:03:26,970
framework um actually can't see this

00:03:23,820 --> 00:03:29,840
titles of these slides shouldn't do that

00:03:26,970 --> 00:03:29,840
all right

00:03:32,670 --> 00:03:37,599
i'm pretty sure that slide says

00:03:35,430 --> 00:03:39,250
something about component architectures

00:03:37,599 --> 00:03:42,940
so a lot of this has been borrowed from

00:03:39,250 --> 00:03:45,280
the track project anyone that's been in

00:03:42,940 --> 00:03:47,230
the Python space for a while has

00:03:45,280 --> 00:03:48,670
probably heard of edge wall software and

00:03:47,230 --> 00:03:51,700
the original track project management

00:03:48,670 --> 00:03:53,709
system it was probably one of the most

00:03:51,700 --> 00:03:56,950
nicest component architectures I've ever

00:03:53,709 --> 00:03:58,480
come across and a lot of the definitions

00:03:56,950 --> 00:04:02,849
I've taken have been borrowed from there

00:03:58,480 --> 00:04:05,799
so a component is a object that

00:04:02,849 --> 00:04:08,019
basically gives you a service to become

00:04:05,799 --> 00:04:09,640
some kind wrapped up service they're

00:04:08,019 --> 00:04:13,000
generally Singleton's but they don't

00:04:09,640 --> 00:04:15,160
have to do in my opinion circuits did

00:04:13,000 --> 00:04:16,989
support singletons while back but we

00:04:15,160 --> 00:04:21,060
removed it because well if you want to

00:04:16,989 --> 00:04:23,430
do it you can do it yourself so

00:04:21,060 --> 00:04:25,750
essentially components is all about

00:04:23,430 --> 00:04:27,100
interaction between various components

00:04:25,750 --> 00:04:29,680
and always coupled way and the

00:04:27,100 --> 00:04:32,620
definition there that has been liberally

00:04:29,680 --> 00:04:34,090
borrowed from the track website is one

00:04:32,620 --> 00:04:36,160
that I sort of like that I like to

00:04:34,090 --> 00:04:37,960
simplify it a little bit so components

00:04:36,160 --> 00:04:40,150
are essentially a way of declaring

00:04:37,960 --> 00:04:41,260
extinction points and then extending

00:04:40,150 --> 00:04:44,729
that component without the other

00:04:41,260 --> 00:04:44,729
component knowing that it was extended

00:04:49,020 --> 00:04:55,180
so here's just a little diagram that was

00:04:53,199 --> 00:04:56,590
also taken from the track website which

00:04:55,180 --> 00:05:00,070
sort of illustrates the points you have

00:04:56,590 --> 00:05:01,750
a a component on on one side and

00:05:00,070 --> 00:05:03,160
declaring an extension point another

00:05:01,750 --> 00:05:04,630
component on the other side that sort of

00:05:03,160 --> 00:05:05,650
extends that component but the two

00:05:04,630 --> 00:05:08,940
components don't really know about each

00:05:05,650 --> 00:05:11,110
other and you might have third component

00:05:08,940 --> 00:05:12,789
so when you start to treat everything as

00:05:11,110 --> 00:05:14,620
components and the interface between two

00:05:12,789 --> 00:05:17,500
components as events which is what

00:05:14,620 --> 00:05:20,110
circuits uses to declare various things

00:05:17,500 --> 00:05:22,539
that can occur between components you

00:05:20,110 --> 00:05:25,620
start to end up with a bit of a nice way

00:05:22,539 --> 00:05:27,820
of structuring your application and

00:05:25,620 --> 00:05:29,289
extending it you know depending on

00:05:27,820 --> 00:05:34,030
requirements changes and all that sort

00:05:29,289 --> 00:05:36,940
of stuff there are some other similar

00:05:34,030 --> 00:05:39,310
projects so is a component architecture

00:05:36,940 --> 00:05:43,510
and these oak component architecture in

00:05:39,310 --> 00:05:45,160
school there is a couple of others I've

00:05:43,510 --> 00:05:48,430
not actually really used any of them

00:05:45,160 --> 00:05:51,250
there's pipe pipe ass I believe but it

00:05:48,430 --> 00:05:57,060
looks like it's dead camila i believe is

00:05:51,250 --> 00:05:59,260
still actively actively developed and

00:05:57,060 --> 00:06:05,199
one other one which i covering the

00:05:59,260 --> 00:06:07,090
neighbor if you look up python

00:06:05,199 --> 00:06:09,550
concurrency in the 99 bottles of beer on

00:06:07,090 --> 00:06:12,340
the wall on the python wiki this is

00:06:09,550 --> 00:06:13,960
where some of these can put some of

00:06:12,340 --> 00:06:17,310
these examples have come from so things

00:06:13,960 --> 00:06:17,310
that look a bit componenti

00:06:22,790 --> 00:06:28,770
okay so just a little bit of background

00:06:26,700 --> 00:06:32,220
on circuits where some of the the name

00:06:28,770 --> 00:06:34,230
came from so the name of circuits was

00:06:32,220 --> 00:06:37,919
chosen to sort of a little bit analogous

00:06:34,230 --> 00:06:39,810
to building electronic circuitry so you

00:06:37,919 --> 00:06:42,750
can think of components as your sort of

00:06:39,810 --> 00:06:46,169
a breadboard events as signals between

00:06:42,750 --> 00:06:47,250
components and that sort of things so

00:06:46,169 --> 00:06:49,020
that's sort of where the names come from

00:06:47,250 --> 00:06:52,830
so you could so it's the framework

00:06:49,020 --> 00:06:54,180
components events it's pretty much where

00:06:52,830 --> 00:07:03,930
that neighbors come from and sort of

00:06:54,180 --> 00:07:06,090
stuff for quite a number of years just a

00:07:03,930 --> 00:07:07,770
little bit more about the history circus

00:07:06,090 --> 00:07:10,530
was originally inspired from my

00:07:07,770 --> 00:07:14,010
undergraduate days about a decade or so

00:07:10,530 --> 00:07:16,050
ago by the late Professor Jeff Dromi who

00:07:14,010 --> 00:07:19,320
taught behavior trees and genetic

00:07:16,050 --> 00:07:21,090
software engineering which sort of is a

00:07:19,320 --> 00:07:24,570
little bit like you know component

00:07:21,090 --> 00:07:26,280
architectures sadly he died of cancer

00:07:24,570 --> 00:07:29,729
few not number of years ago I won't go

00:07:26,280 --> 00:07:31,919
into genetic software engineering or his

00:07:29,729 --> 00:07:33,390
work in behavior trees feel free to look

00:07:31,919 --> 00:07:36,750
that up that's where some of the

00:07:33,390 --> 00:07:39,780
inspiration came from it originally was

00:07:36,750 --> 00:07:41,700
actually written in Java so the first

00:07:39,780 --> 00:07:43,530
prototype of what the circuits framework

00:07:41,700 --> 00:07:49,740
is was actually written in Java from

00:07:43,530 --> 00:07:53,940
time ago so we've been developing it

00:07:49,740 --> 00:07:56,610
since 2004 a few people in the community

00:07:53,940 --> 00:07:59,190
that do discover circuits often ask me

00:07:56,610 --> 00:08:01,830
why it's not as you know a lot more

00:07:59,190 --> 00:08:03,810
popular than it should be my answer to

00:08:01,830 --> 00:08:06,380
that is because I'm an engineer and I

00:08:03,810 --> 00:08:06,380
suck at marketing

00:08:13,080 --> 00:08:18,640
yeah so we've seen a number of

00:08:15,700 --> 00:08:20,890
contributors I'm not the only guy on

00:08:18,640 --> 00:08:23,350
this project it's not just a one-off

00:08:20,890 --> 00:08:25,300
thing sit around for a while it's been

00:08:23,350 --> 00:08:27,130
used in a few different places some

00:08:25,300 --> 00:08:29,200
people use it for web application

00:08:27,130 --> 00:08:32,830
development which you'll probably see in

00:08:29,200 --> 00:08:35,650
the next slide I believe with various

00:08:32,830 --> 00:08:37,690
contributors myself alicia has probably

00:08:35,650 --> 00:08:41,380
been one of our biggest contributors

00:08:37,690 --> 00:08:44,050
along with Michael lip Justin Grigori

00:08:41,380 --> 00:08:46,480
from the US here uses circuits quite

00:08:44,050 --> 00:08:49,230
extensively to build his web

00:08:46,480 --> 00:08:51,400
applications for all of these clients a

00:08:49,230 --> 00:08:53,020
few other people that I probably

00:08:51,400 --> 00:08:55,330
actually can't see from here and the

00:08:53,020 --> 00:08:57,790
memory eludes me for now this has been

00:08:55,330 --> 00:09:00,240
taken from materials churn so these are

00:08:57,790 --> 00:09:03,340
all the people that have contributed

00:09:00,240 --> 00:09:12,160
either extensively or a little bit more

00:09:03,340 --> 00:09:16,690
than one or two commits or bug fixes so

00:09:12,160 --> 00:09:21,340
this is what it looks like I can just

00:09:16,690 --> 00:09:24,520
talk yet so this is your classic echo

00:09:21,340 --> 00:09:27,520
server you've probably seen examples

00:09:24,520 --> 00:09:30,190
like this from twisted maybe I'm not

00:09:27,520 --> 00:09:32,440
sure I've ever seen a tornado one so

00:09:30,190 --> 00:09:34,870
bunch of imports at the top the first

00:09:32,440 --> 00:09:39,670
thing to note is that you subclass

00:09:34,870 --> 00:09:41,680
component we have a handler decorator so

00:09:39,670 --> 00:09:43,990
we define a event handler called read

00:09:41,680 --> 00:09:46,350
and we basically you know throw back at

00:09:43,990 --> 00:09:51,370
the client the data that we received

00:09:46,350 --> 00:09:54,550
instantiate this component and run it so

00:09:51,370 --> 00:09:56,980
as circuits is event-driven and supports

00:09:54,550 --> 00:09:59,290
asynchronous i/o it obviously also does

00:09:56,980 --> 00:10:02,710
have an event loop so when you run

00:09:59,290 --> 00:10:03,760
components it runs the about loop knows

00:10:02,710 --> 00:10:05,590
about all the other component has been

00:10:03,760 --> 00:10:06,910
registered in the system and these

00:10:05,590 --> 00:10:09,120
components start interacting with each

00:10:06,910 --> 00:10:09,120
other

00:10:12,459 --> 00:10:19,399
so I can just go back to that previous

00:10:16,790 --> 00:10:23,149
slide one of the things that we've done

00:10:19,399 --> 00:10:24,709
in circuits for a long time is building

00:10:23,149 --> 00:10:27,709
some tools that allow you to visualize

00:10:24,709 --> 00:10:30,410
how the structure of your application as

00:10:27,709 --> 00:10:32,419
you're as you're going long or just to

00:10:30,410 --> 00:10:34,309
sort of get a visual idea of you know

00:10:32,419 --> 00:10:36,290
how the components are wired up and put

00:10:34,309 --> 00:10:37,699
together and how they interact so you

00:10:36,290 --> 00:10:40,459
can see there's right at the bottom

00:10:37,699 --> 00:10:43,299
there's a select polar so circuits has a

00:10:40,459 --> 00:10:47,779
number of built-in Polar's select 2 KQ

00:10:43,299 --> 00:10:50,869
pole and a pole you can select which one

00:10:47,779 --> 00:10:53,689
you want circuits does not automatically

00:10:50,869 --> 00:10:56,839
use the one for your platform you've got

00:10:53,689 --> 00:10:59,299
to sort of explicitly do that then

00:10:56,839 --> 00:11:01,160
you've got your main app component 2 TSP

00:10:59,299 --> 00:11:02,749
server component and I believe there's a

00:11:01,160 --> 00:11:06,199
debugging component on the side there as

00:11:02,749 --> 00:11:07,879
well so when that top-level component in

00:11:06,199 --> 00:11:14,389
the graph runs all of those components

00:11:07,879 --> 00:11:16,579
interact with each other I believe

00:11:14,389 --> 00:11:18,949
that's a bit cut off there this is what

00:11:16,579 --> 00:11:20,389
it looks like in the latest development

00:11:18,949 --> 00:11:22,970
version of circuits so just sort of

00:11:20,389 --> 00:11:24,259
swapped out some of the underlying tools

00:11:22,970 --> 00:11:26,419
we've used to generate these graphs

00:11:24,259 --> 00:11:28,279
originally it was pied often graph is I

00:11:26,419 --> 00:11:29,569
think this is Network X and graph this

00:11:28,279 --> 00:11:33,290
and somewhat the Python libraries

00:11:29,569 --> 00:11:35,569
doesn't look that great so you know if

00:11:33,290 --> 00:11:36,679
there are any good UI designers that

00:11:35,569 --> 00:11:40,569
know how to make these things look

00:11:36,679 --> 00:11:40,569
prettier can we talk to me

00:11:49,310 --> 00:12:00,350
I think that slides those demos um just

00:11:53,900 --> 00:12:03,290
how are we going to time probably heaps

00:12:00,350 --> 00:12:07,700
of time it um alright so let's see if we

00:12:03,290 --> 00:12:11,510
can do some kind of demo believe that

00:12:07,700 --> 00:12:15,400
works except that this isn't showing my

00:12:11,510 --> 00:12:19,180
terminal oh no there we are it does

00:12:15,400 --> 00:12:19,180
excuse me for one minute

00:12:35,900 --> 00:12:44,050
mmm

00:12:38,350 --> 00:12:48,100
drag it to the screen there we go all

00:12:44,050 --> 00:12:49,750
right that's better so that was the

00:12:48,100 --> 00:12:51,730
example that you saw it in one of the

00:12:49,750 --> 00:12:55,710
earlier slides just a very simple hello

00:12:51,730 --> 00:12:55,710
world the code is absolutely identical

00:12:58,410 --> 00:13:11,170
as far as I can do this we'll see if we

00:13:07,090 --> 00:13:14,260
can run the echo server demo there was

00:13:11,170 --> 00:13:17,800
talk earlier that I attended about a

00:13:14,260 --> 00:13:30,640
live demos being bad I will try to make

00:13:17,800 --> 00:13:36,970
these things work I believe that's

00:13:30,640 --> 00:13:39,390
connected on some port somewhere let me

00:13:36,970 --> 00:13:39,390
just check

00:13:48,230 --> 00:14:06,500
for 10,000 of course apparently I can't

00:14:02,360 --> 00:14:09,530
use one can't you see X I actually use

00:14:06,500 --> 00:14:10,940
unix as my ID on that as a day today

00:14:09,530 --> 00:14:15,050
development so you think I'd be better

00:14:10,940 --> 00:14:17,810
at this during live demonstrations so

00:14:15,050 --> 00:14:24,070
hopefully that has done exactly what we

00:14:17,810 --> 00:14:24,070
expect to do as a very quick don't worry

00:14:26,290 --> 00:14:34,160
suppose I have to drag this back to the

00:14:28,400 --> 00:14:35,930
other screen right um so just a couple

00:14:34,160 --> 00:14:38,300
of quick thing is just to show you that

00:14:35,930 --> 00:14:42,700
it works and I'm not just you know

00:14:38,300 --> 00:14:48,020
haven't just developed this yesterday um

00:14:42,700 --> 00:14:50,570
ok so the core API of circuits you've

00:14:48,020 --> 00:14:56,180
probably seen some of it in the examples

00:14:50,570 --> 00:14:59,450
from before so we have fire call wait

00:14:56,180 --> 00:15:02,300
these are our core API is that every

00:14:59,450 --> 00:15:05,060
component knows about one of the talks

00:15:02,300 --> 00:15:06,890
earlier in lesser known data structures

00:15:05,060 --> 00:15:09,620
talked about meta classes so circuits

00:15:06,890 --> 00:15:11,300
does use meta classes it uses it

00:15:09,620 --> 00:15:14,420
primarily to give the programmer

00:15:11,300 --> 00:15:17,050
convenience so every component that you

00:15:14,420 --> 00:15:19,670
subclass from component every method

00:15:17,050 --> 00:15:23,600
basically gets automatically decorated

00:15:19,670 --> 00:15:25,700
as an event handler in some of the

00:15:23,600 --> 00:15:27,620
examples I showed you before we also

00:15:25,700 --> 00:15:30,740
have the app handle or decorator so

00:15:27,620 --> 00:15:34,160
circuits also supports both explicit and

00:15:30,740 --> 00:15:36,140
implicit ways of doing things just to

00:15:34,160 --> 00:15:39,820
sort of satisfy both crowds that you

00:15:36,140 --> 00:15:39,820
know like implicit most explicit things

00:15:41,110 --> 00:15:47,650
so

00:15:44,010 --> 00:15:49,320
component registration and so you

00:15:47,650 --> 00:15:52,330
register components by calling register

00:15:49,320 --> 00:15:54,340
one component to another you can d

00:15:52,330 --> 00:15:55,780
register and by calling unregister on

00:15:54,340 --> 00:15:57,780
that component which will take it out of

00:15:55,780 --> 00:16:02,080
the component graph and will no longer

00:15:57,780 --> 00:16:04,450
cooperate in events some of the

00:16:02,080 --> 00:16:06,160
convenience that we've also built into

00:16:04,450 --> 00:16:08,170
all components as well which I won't go

00:16:06,160 --> 00:16:09,610
into here is that components can

00:16:08,170 --> 00:16:12,850
actually be added together using the app

00:16:09,610 --> 00:16:15,550
operator and the the plus equals

00:16:12,850 --> 00:16:16,540
operator so we overloaded those in

00:16:15,550 --> 00:16:19,780
components so that you can basically

00:16:16,540 --> 00:16:29,020
compose components in sort of a very

00:16:19,780 --> 00:16:33,940
nice syntactic sugar or sort of way so

00:16:29,020 --> 00:16:35,440
these are the ways in which you spin up

00:16:33,940 --> 00:16:37,210
your component graph your top-level

00:16:35,440 --> 00:16:38,620
component graph so typically you

00:16:37,210 --> 00:16:40,570
register a bunch of components together

00:16:38,620 --> 00:16:43,990
and you either start that component

00:16:40,570 --> 00:16:47,380
graph in a separate thread which isn't

00:16:43,990 --> 00:16:50,470
typical but we do use it in the unit

00:16:47,380 --> 00:16:54,100
tests you can also use that for you know

00:16:50,470 --> 00:16:55,210
interactive shell you know register a

00:16:54,100 --> 00:16:56,230
bunch of components start them in

00:16:55,210 --> 00:16:59,380
threaded mode then you can sort of

00:16:56,230 --> 00:17:02,340
player play with it typically though you

00:16:59,380 --> 00:17:06,640
just run the component on the top level

00:17:02,340 --> 00:17:07,930
the very top component and then you can

00:17:06,640 --> 00:17:11,160
also call stop on it which will

00:17:07,930 --> 00:17:11,160
basically terminate the system

00:17:14,949 --> 00:17:22,370
so here's where we are now circuits has

00:17:19,970 --> 00:17:26,179
been developed for over ten years so we

00:17:22,370 --> 00:17:30,700
have our core API we have our core

00:17:26,179 --> 00:17:38,419
components so base component component

00:17:30,700 --> 00:17:42,049
debugger we have a daemon component in

00:17:38,419 --> 00:17:43,850
our application namespace we doubt if we

00:17:42,049 --> 00:17:45,260
did have a few more but they kind of

00:17:43,850 --> 00:17:47,450
sucked a bit so we removed them in the

00:17:45,260 --> 00:17:49,940
latest version they weren't very

00:17:47,450 --> 00:17:51,860
asynchronous we had a configuration

00:17:49,940 --> 00:17:54,200
management configuration component but

00:17:51,860 --> 00:17:56,480
it sort of just wrapped around config

00:17:54,200 --> 00:18:01,010
parser something anyone can wrap around

00:17:56,480 --> 00:18:02,870
conflict puzzle and we have a whole

00:18:01,010 --> 00:18:07,580
bunch of i/o components as it expects we

00:18:02,870 --> 00:18:10,100
have file component serial component and

00:18:07,580 --> 00:18:11,630
also the inotify component which only

00:18:10,100 --> 00:18:14,630
works on linux so if you try and do this

00:18:11,630 --> 00:18:20,150
on OSX or Windows the import won't be

00:18:14,630 --> 00:18:22,059
available we have a whole bunch of

00:18:20,150 --> 00:18:24,919
networking components obviously so

00:18:22,059 --> 00:18:27,620
circuits does have a whole built-in

00:18:24,919 --> 00:18:30,410
component library so we've got unix

00:18:27,620 --> 00:18:33,590
server sockets TCP socket to UDP sockets

00:18:30,410 --> 00:18:35,480
all that sort of stuff one thing to note

00:18:33,590 --> 00:18:38,660
about circuits compared with something

00:18:35,480 --> 00:18:40,490
like gee event is we don't we don't

00:18:38,660 --> 00:18:43,070
monkey patch any of the standard library

00:18:40,490 --> 00:18:48,559
so these are all independently developed

00:18:43,070 --> 00:18:50,540
components bear in mind though that we

00:18:48,559 --> 00:18:53,030
didn't really largely right one of the

00:18:50,540 --> 00:18:55,370
polling stuff we borrowed from other

00:18:53,030 --> 00:18:56,780
people and try to learn from the the

00:18:55,370 --> 00:18:58,010
best of libraries out there so a lot of

00:18:56,780 --> 00:18:59,990
the polling code was actually borrowed

00:18:58,010 --> 00:19:02,900
directly from twisted so sorry twisted

00:18:59,990 --> 00:19:06,850
developers just means that you know

00:19:02,900 --> 00:19:06,850
stuff works as you expected

00:19:10,050 --> 00:19:16,540
we don't have very many protocols I did

00:19:14,530 --> 00:19:17,770
mention before earlier that there is a

00:19:16,540 --> 00:19:20,260
little bit of work that I've done a

00:19:17,770 --> 00:19:23,230
little while ago to integrate circuits

00:19:20,260 --> 00:19:24,910
and twisted so circuits can run twisted

00:19:23,230 --> 00:19:28,360
protocols and have tested this and there

00:19:24,910 --> 00:19:30,880
is so it's in the circuits a repository

00:19:28,360 --> 00:19:34,060
on good bucket I haven't published it

00:19:30,880 --> 00:19:36,940
yet I think I feel that probably more

00:19:34,060 --> 00:19:39,090
work needs to be done needless to say

00:19:36,940 --> 00:19:43,000
circuits doesn't have very many

00:19:39,090 --> 00:19:46,570
protocols we have web protocol IRC

00:19:43,000 --> 00:19:50,440
protocol HTTP line protocol that's about

00:19:46,570 --> 00:19:53,380
at the moment hmm one of the things

00:19:50,440 --> 00:19:56,350
that's I found frustrating about writing

00:19:53,380 --> 00:19:59,680
little web servers sorry little socket

00:19:56,350 --> 00:20:01,630
servers that do interesting stuff is

00:19:59,680 --> 00:20:03,400
that a lot of protocol libraries and a

00:20:01,630 --> 00:20:05,760
lot of libraries that handle various

00:20:03,400 --> 00:20:07,780
protocols aren't very framework agnostic

00:20:05,760 --> 00:20:10,150
one of the ones that I have found that

00:20:07,780 --> 00:20:12,310
is I think it's called DNS lib so there

00:20:10,150 --> 00:20:17,200
is an example of circuits using DNS lib

00:20:12,310 --> 00:20:19,210
to basically be a DNS resolver but a lot

00:20:17,200 --> 00:20:22,510
of libraries definitely work well with

00:20:19,210 --> 00:20:25,390
other frameworks I think you'd probably

00:20:22,510 --> 00:20:27,130
see a lot of new async stuff hitting the

00:20:25,390 --> 00:20:28,840
Python package index at least I have so

00:20:27,130 --> 00:20:32,070
lots of people putting a lot of

00:20:28,840 --> 00:20:32,070
protocols to a cinco

00:20:39,050 --> 00:20:46,470
so circuits also has a web framework

00:20:42,590 --> 00:20:48,420
Justin Grigori uses it a lot I use it a

00:20:46,470 --> 00:20:51,780
lot as well so we kind of try to eat our

00:20:48,420 --> 00:20:54,990
own dog food as such a lot of circuits

00:20:51,780 --> 00:20:56,010
web components were also borrowed so we

00:20:54,990 --> 00:20:59,130
didn't really write a lot of this from

00:20:56,010 --> 00:21:01,980
scratch it is wsj are compatible so we

00:20:59,130 --> 00:21:06,390
have gateway and application so we can

00:21:01,980 --> 00:21:08,790
graft things like the mercurial hg do on

00:21:06,390 --> 00:21:13,110
to a circuit web application we've got

00:21:08,790 --> 00:21:16,410
various our PC components various ways

00:21:13,110 --> 00:21:17,780
of routing your eyes two controllers all

00:21:16,410 --> 00:21:21,480
that sort of stuff it works pretty well

00:21:17,780 --> 00:21:24,240
I've used in production quite a lot for

00:21:21,480 --> 00:21:32,880
various projects it could be better

00:21:24,240 --> 00:21:36,540
everything could be there so this is

00:21:32,880 --> 00:21:38,610
sort of where we want to go it's been

00:21:36,540 --> 00:21:42,030
around for a while I'd certainly like to

00:21:38,610 --> 00:21:45,870
see more more interested persons more

00:21:42,030 --> 00:21:47,370
more developers more contributors we'd

00:21:45,870 --> 00:21:50,210
like more protocols that are

00:21:47,370 --> 00:21:50,210
documentation

00:21:56,269 --> 00:22:01,370
more um maybe more application

00:21:58,799 --> 00:22:04,169
components a better fit better website

00:22:01,370 --> 00:22:06,779
this talk these slides are actually on

00:22:04,169 --> 00:22:08,970
pike on circuits framework com so if its

00:22:06,779 --> 00:22:12,750
framework com is actually linked website

00:22:08,970 --> 00:22:13,769
for circuits it actually uses a content

00:22:12,750 --> 00:22:16,549
management system that i wrote in

00:22:13,769 --> 00:22:19,019
circuits itself all of my websites do

00:22:16,549 --> 00:22:26,970
but forgive me it doesn't look very

00:22:19,019 --> 00:22:28,289
pretty it looks pretty plain boring so

00:22:26,970 --> 00:22:31,110
here's some of the ways that you can

00:22:28,289 --> 00:22:36,870
contribute we have a circuits channel on

00:22:31,110 --> 00:22:41,070
freenode sees about 30 odd people quite

00:22:36,870 --> 00:22:44,250
consistently that's where we discuss and

00:22:41,070 --> 00:22:46,769
must remain development contribute bug

00:22:44,250 --> 00:22:50,970
fixes improvements pull requests our

00:22:46,769 --> 00:22:53,970
repos are hosted on on bitbucket under

00:22:50,970 --> 00:22:58,320
the circuits team start using it in your

00:22:53,970 --> 00:23:00,649
projects it's a it's a framework it

00:22:58,320 --> 00:23:02,700
doesn't it does do asynchronous i/o

00:23:00,649 --> 00:23:03,929
that's not its key strength is key

00:23:02,700 --> 00:23:06,419
strengths in the architecture and the

00:23:03,929 --> 00:23:07,769
components in being able to architect

00:23:06,419 --> 00:23:11,029
your software in a loosely coupled way

00:23:07,769 --> 00:23:13,260
with better maintaining the software

00:23:11,029 --> 00:23:19,070
sort of some of the same arguments is

00:23:13,260 --> 00:23:22,580
the sub component architecture questions

00:23:19,070 --> 00:23:22,580
thank you and

00:23:39,860 --> 00:23:44,159
can you talk a little bit about the

00:23:42,059 --> 00:23:45,990
tools that you've got to debug what's

00:23:44,159 --> 00:23:47,940
going on when let's say you're using a

00:23:45,990 --> 00:23:48,990
web protocol and a request arrived and

00:23:47,940 --> 00:23:50,340
then there's a million different Evans

00:23:48,990 --> 00:23:52,770
being fired all over the place across

00:23:50,340 --> 00:23:55,110
many components how do you get to

00:23:52,770 --> 00:23:57,539
understand what happened yep that's it

00:23:55,110 --> 00:23:59,760
it's a perfectly valid question and so

00:23:57,539 --> 00:24:01,380
circuits is event-driven and has a

00:23:59,760 --> 00:24:03,150
built-in component called the debugger

00:24:01,380 --> 00:24:05,570
which is capable of listening to all

00:24:03,150 --> 00:24:07,950
events that occur throughout the system

00:24:05,570 --> 00:24:10,500
it logs them to standard error by

00:24:07,950 --> 00:24:11,640
default and there are also various ways

00:24:10,500 --> 00:24:12,990
in which you can basically grab those

00:24:11,640 --> 00:24:14,490
events and log them too so you know

00:24:12,990 --> 00:24:19,080
something like log stash if you wanted

00:24:14,490 --> 00:24:20,190
to the example I showed before there was

00:24:19,080 --> 00:24:21,870
a bunch of stuff being printed to

00:24:20,190 --> 00:24:25,130
standard out that was actually the

00:24:21,870 --> 00:24:25,130
debugger in inaction

00:24:33,149 --> 00:24:38,559
I've actually looked at the project once

00:24:35,590 --> 00:24:41,289
or twice but never quite found out

00:24:38,559 --> 00:24:44,109
whether it had what i was looking for is

00:24:41,289 --> 00:24:46,509
is the documentation one of the parts

00:24:44,109 --> 00:24:47,769
you think is keeping it from people sort

00:24:46,509 --> 00:24:53,259
of finding it when they go looking for

00:24:47,769 --> 00:24:54,820
the Python frameworks yes I think so but

00:24:53,259 --> 00:24:57,519
also I think it's a little bit of the

00:24:54,820 --> 00:24:59,559
community as well so circuits has

00:24:57,519 --> 00:25:01,059
existed for over over 10 years but

00:24:59,559 --> 00:25:03,429
there's sort of a rhetoric and the

00:25:01,059 --> 00:25:05,499
community to use twisted for all stuff

00:25:03,429 --> 00:25:07,529
asynchronous so we don't try and compete

00:25:05,499 --> 00:25:09,190
on that that space but yes absolutely

00:25:07,529 --> 00:25:11,169
documentation is one of the things that

00:25:09,190 --> 00:25:12,879
we struggle with and I think all

00:25:11,169 --> 00:25:14,739
developers struggle with we've tried to

00:25:12,879 --> 00:25:16,570
improve it over the number of years it's

00:25:14,739 --> 00:25:19,419
a lot better now it's on read the docs

00:25:16,570 --> 00:25:25,559
so so could start with the docks thank

00:25:19,419 --> 00:25:25,559
you any other questions

00:25:36,450 --> 00:25:40,800
so the question was why did we drop the

00:25:38,430 --> 00:25:42,570
configuration component the reason we

00:25:40,800 --> 00:25:44,660
dropped it was one of the things that we

00:25:42,570 --> 00:25:47,190
like to do in circuits because we do

00:25:44,660 --> 00:25:50,010
natively support asynchronous i/o and

00:25:47,190 --> 00:25:53,250
circuits is inherently event-driven I

00:25:50,010 --> 00:25:54,870
really wanted a configuration management

00:25:53,250 --> 00:25:57,390
component that actually supported

00:25:54,870 --> 00:25:59,670
asynchronous i/o so in future perhaps

00:25:57,390 --> 00:26:01,200
maybe we might reintroduce it but

00:25:59,670 --> 00:26:02,700
actually wrap around the file component

00:26:01,200 --> 00:26:04,260
rather than just wrapping around the

00:26:02,700 --> 00:26:13,800
config puzzle which might actually block

00:26:04,260 --> 00:26:15,270
your event allu one more question what

00:26:13,800 --> 00:26:18,270
is the main selling point of circuits

00:26:15,270 --> 00:26:20,580
over twisted sorry the main the main

00:26:18,270 --> 00:26:22,050
selling point of circuits over twisted

00:26:20,580 --> 00:26:24,720
how would you how would you pitch that

00:26:22,050 --> 00:26:25,920
to someone who considered using twisted

00:26:24,720 --> 00:26:29,780
for a project how would how would you

00:26:25,920 --> 00:26:32,130
differentiate yourself yeah um okay so

00:26:29,780 --> 00:26:33,480
those of you familiar with twisted are

00:26:32,130 --> 00:26:35,880
probably familiar with defers and

00:26:33,480 --> 00:26:38,130
callbacks and upper backs so this

00:26:35,880 --> 00:26:41,010
doesn't really have such a notion as

00:26:38,130 --> 00:26:45,720
such we use promises and we also support

00:26:41,010 --> 00:26:47,430
co routines so there are really robaxin

00:26:45,720 --> 00:26:50,250
callbacks they are sort of semi

00:26:47,430 --> 00:26:52,230
supported but anyone that's used twisted

00:26:50,250 --> 00:26:53,370
you know eventually euro backs and

00:26:52,230 --> 00:26:55,080
callbacks and your chain start becoming

00:26:53,370 --> 00:26:57,750
very long and convoluted but becomes

00:26:55,080 --> 00:27:00,620
very difficult to debug so circuits

00:26:57,750 --> 00:27:04,700
wasn't designed to use deference as such

00:27:00,620 --> 00:27:08,400
a lot of people do come to circuits from

00:27:04,700 --> 00:27:10,770
twisted often say and I quote that they

00:27:08,400 --> 00:27:12,570
find it rather elegant so I take that as

00:27:10,770 --> 00:27:15,230
a bit of a confident that I think that's

00:27:12,570 --> 00:27:15,230
the main selling point

00:27:21,040 --> 00:27:26,050
there are no other questions thank you

00:27:23,870 --> 00:27:26,050
very much

00:27:34,060 --> 00:27:36,120

YouTube URL: https://www.youtube.com/watch?v=DGrbp0LOH84


