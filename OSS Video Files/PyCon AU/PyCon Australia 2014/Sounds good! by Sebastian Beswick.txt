Title: Sounds good! by Sebastian Beswick
Publication date: 2014-08-11
Playlist: PyCon Australia 2014
Description: 
	Do you know if it’s worth upgrading your Spotify account to stream songs at 320kb/s?

An understanding of the fundamentals of computer sound is essential for the well-rounded IT professional. Audio is a field that is teeming with jargon, but it doesn’t have to be so scary! In this session we’ll go back to basics and take a look at the core components of sound, including how we (as humans) perceive sounds, and how we can represent them within a computer. By the end of this session, you'll know enough to go home and create your own simple synthesiser!

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:05,180 --> 00:00:10,650
alright good afternoon everyone so our

00:00:08,549 --> 00:00:12,809
next speaker is Sebastian bears week and

00:00:10,650 --> 00:00:14,339
he was with the Tasmanian Youth

00:00:12,809 --> 00:00:16,619
Orchestra and the Hobart Wind Symphony

00:00:14,339 --> 00:00:18,810
but now he lives in melbourne as an iOS

00:00:16,619 --> 00:00:28,560
developer his talk today is called

00:00:18,810 --> 00:00:30,810
sounds good please welcome him thanks

00:00:28,560 --> 00:00:33,180
guys so thanks for coming today yeah I

00:00:30,810 --> 00:00:35,040
work as an iOS developer in Melbourne I

00:00:33,180 --> 00:00:37,080
first attended High Khan when understand

00:00:35,040 --> 00:00:41,370
in Hobart a couple of years ago while I

00:00:37,080 --> 00:00:43,649
was studying honours down at you tez so

00:00:41,370 --> 00:00:45,270
today we're going to take a look at what

00:00:43,649 --> 00:00:48,149
sound actually is and how we can

00:00:45,270 --> 00:00:49,590
represent it inside a computer we're

00:00:48,149 --> 00:00:52,199
going to talk about how sounds can be

00:00:49,590 --> 00:00:54,300
described in the physical or analog

00:00:52,199 --> 00:00:55,410
world and then how we can use this

00:00:54,300 --> 00:00:59,640
knowledge to create a digital

00:00:55,410 --> 00:01:02,039
representation for sound after this

00:00:59,640 --> 00:01:03,629
we'll talk about the basic recipe for

00:01:02,039 --> 00:01:05,399
implementing a software synthesizer and

00:01:03,629 --> 00:01:07,979
we're going to finish up with a live

00:01:05,399 --> 00:01:11,009
demo where we use PI audio to build our

00:01:07,979 --> 00:01:15,060
own simple synthesizer but first things

00:01:11,009 --> 00:01:16,619
first what actually is sound now sound

00:01:15,060 --> 00:01:19,020
is a sequence of waves of varying

00:01:16,619 --> 00:01:21,660
pressure that are propagating through a

00:01:19,020 --> 00:01:25,229
medium which is usually air and we can

00:01:21,660 --> 00:01:27,599
think of these as vibrations now there

00:01:25,229 --> 00:01:30,450
are three key components that we use to

00:01:27,599 --> 00:01:32,369
physically quantify sounds the first

00:01:30,450 --> 00:01:35,009
component is a thing called pitch now

00:01:32,369 --> 00:01:37,440
everyone has a an inherent understanding

00:01:35,009 --> 00:01:40,140
of what the pitch of a note is and the

00:01:37,440 --> 00:01:43,080
relative pictures between two notes so

00:01:40,140 --> 00:01:44,819
imagine you've got a guitar and you

00:01:43,080 --> 00:01:45,959
pluck the highest string on a guitar you

00:01:44,819 --> 00:01:47,729
know that it's going to make a high time

00:01:45,959 --> 00:01:50,940
if you plug the lower string you know

00:01:47,729 --> 00:01:52,890
it's going to make a lower tone now the

00:01:50,940 --> 00:01:55,229
the pitch of a musical sound is

00:01:52,890 --> 00:01:58,080
essentially governed by the frequency of

00:01:55,229 --> 00:02:00,929
the sound wave which is really just the

00:01:58,080 --> 00:02:05,129
speed at which the pressure fluctuations

00:02:00,929 --> 00:02:11,060
are occurring at we perceive faster

00:02:05,129 --> 00:02:14,250
vibrations as high pitches and and as

00:02:11,060 --> 00:02:15,660
slower vibrations as lower pitches and

00:02:14,250 --> 00:02:16,730
this is this what we call the frequency

00:02:15,660 --> 00:02:19,129
of the sound and we

00:02:16,730 --> 00:02:22,280
this in Hertz or oscillations per second

00:02:19,129 --> 00:02:26,019
and as humans we can hear sound in the

00:02:22,280 --> 00:02:26,019
range of about 20 hertz to 20 kilohertz

00:02:29,769 --> 00:02:34,670
now the second key aspect of sound is a

00:02:32,330 --> 00:02:36,560
thing that's called amplitude going back

00:02:34,670 --> 00:02:39,340
to our wave description of sound the

00:02:36,560 --> 00:02:42,489
amplitude is the the degree of change

00:02:39,340 --> 00:02:44,750
between a high pressure and low pressure

00:02:42,489 --> 00:02:46,760
but we can think of the amplitude of a

00:02:44,750 --> 00:02:49,310
sound as its loudness or its volume and

00:02:46,760 --> 00:02:53,180
it's basically governed by how much

00:02:49,310 --> 00:02:55,459
energy went into producing the sound so

00:02:53,180 --> 00:02:57,590
when we talk about sounds as being waves

00:02:55,459 --> 00:02:59,090
they are quite literally waved just like

00:02:57,590 --> 00:03:00,769
that sine wave on the screen there so

00:02:59,090 --> 00:03:03,739
they they also like repeatedly from high

00:03:00,769 --> 00:03:05,450
to low and oscillators a very

00:03:03,739 --> 00:03:07,400
fundamental components in sound

00:03:05,450 --> 00:03:11,870
synthesizers as we'll see during the

00:03:07,400 --> 00:03:13,879
demo so we've seen that two of the very

00:03:11,870 --> 00:03:17,780
important characteristics of defining

00:03:13,879 --> 00:03:19,609
sound pitch and amplitude remember that

00:03:17,780 --> 00:03:22,760
we can think of amplitude as being

00:03:19,609 --> 00:03:25,130
loudness and pitchers being the the

00:03:22,760 --> 00:03:26,959
frequency of the sound so we know what

00:03:25,130 --> 00:03:30,079
pitch and amplitude are now what's left

00:03:26,959 --> 00:03:33,980
over what's left is a thing called

00:03:30,079 --> 00:03:37,040
tambor and it is pronounced Tambor and I

00:03:33,980 --> 00:03:38,180
really love this definition so Tambor is

00:03:37,040 --> 00:03:40,099
the psycho acousticians

00:03:38,180 --> 00:03:41,810
multi-dimensional wastebasket category

00:03:40,099 --> 00:03:43,430
for everything that can't be labeled

00:03:41,810 --> 00:03:44,810
pitcher and a picture or loudness so

00:03:43,430 --> 00:03:46,540
basically you have pitch you have

00:03:44,810 --> 00:03:48,650
amplitude and then you have all the rest

00:03:46,540 --> 00:03:50,299
and this is the thing that actually

00:03:48,650 --> 00:03:52,609
allows us to quantify the difference

00:03:50,299 --> 00:03:55,190
between two sounds of identical pitch

00:03:52,609 --> 00:04:00,139
and amplitude and sometimes you hear

00:03:55,190 --> 00:04:02,450
this referred to as tone color we can

00:04:00,139 --> 00:04:04,910
break tamper down into two very basic

00:04:02,450 --> 00:04:06,819
physical properties the harmonic content

00:04:04,910 --> 00:04:09,349
or the spectrum of the sound and the

00:04:06,819 --> 00:04:11,870
envelope of the sound we're going to

00:04:09,349 --> 00:04:13,760
have a quick look at what spectrum is

00:04:11,870 --> 00:04:16,000
now and we'll come back to envelopes

00:04:13,760 --> 00:04:16,000
later

00:04:18,870 --> 00:04:23,840
so when you hear a sound you're not

00:04:21,840 --> 00:04:26,160
actually hearing one single frequency

00:04:23,840 --> 00:04:29,280
because all sounds are actually composed

00:04:26,160 --> 00:04:32,340
of many different frequencies sounding

00:04:29,280 --> 00:04:34,650
together so for example when you when

00:04:32,340 --> 00:04:36,210
you pluck that string on your guitar a

00:04:34,650 --> 00:04:37,770
way but what we call the fundamental

00:04:36,210 --> 00:04:39,330
frequency is generated which in the

00:04:37,770 --> 00:04:42,570
guitar in the low string of a guitar

00:04:39,330 --> 00:04:44,729
that's about 82 hurts that's not all

00:04:42,570 --> 00:04:47,340
also a very large number of higher

00:04:44,729 --> 00:04:49,139
frequency tones are generated we call

00:04:47,340 --> 00:04:50,729
these tones partials or harmonics

00:04:49,139 --> 00:04:54,630
because they're based on the the

00:04:50,729 --> 00:04:55,740
mathematical harmonic series so our low

00:04:54,630 --> 00:04:59,070
guitar string has a fundamental

00:04:55,740 --> 00:05:01,380
frequency that resonates at 82 hurts but

00:04:59,070 --> 00:05:04,020
it also contains energy at all these

00:05:01,380 --> 00:05:05,760
other harmonic frequencies now the the

00:05:04,020 --> 00:05:09,330
amplitude of these partials of these

00:05:05,760 --> 00:05:12,030
other frequencies is generally lower or

00:05:09,330 --> 00:05:13,380
less loud than the fundamental tone and

00:05:12,030 --> 00:05:16,110
generally also the amplitude of each

00:05:13,380 --> 00:05:17,930
partial is different so basically we can

00:05:16,110 --> 00:05:20,760
say that a large part of a sound tambor

00:05:17,930 --> 00:05:24,479
or tone color is determined by the

00:05:20,760 --> 00:05:27,650
harmonic content of the signal so take a

00:05:24,479 --> 00:05:27,650
listen to these two sounds here

00:05:36,139 --> 00:05:40,560
now we can tell but both of those towns

00:05:38,610 --> 00:05:41,879
with the same note that with the same

00:05:40,560 --> 00:05:44,550
pitch so they were standing at the same

00:05:41,879 --> 00:05:46,289
frequency and also at about the same

00:05:44,550 --> 00:05:49,650
amplitude but they sounded really very

00:05:46,289 --> 00:05:51,330
obviously different this is what the

00:05:49,650 --> 00:05:55,050
waveform of the first sound looks like

00:05:51,330 --> 00:05:58,080
and it's a pure sine wave resonating at

00:05:55,050 --> 00:06:00,780
440 Hertz oh 440 cycles per second and

00:05:58,080 --> 00:06:02,490
that's what its waveform looks like if

00:06:00,780 --> 00:06:04,590
we were to perform a Fourier transform

00:06:02,490 --> 00:06:06,659
on a very small segment of this wave

00:06:04,590 --> 00:06:08,789
which would give us a pot of amplitude

00:06:06,659 --> 00:06:11,819
against frequency we get a chart that

00:06:08,789 --> 00:06:13,979
looks like this now in this graph here

00:06:11,819 --> 00:06:18,930
amplitude is represented on the x-axis

00:06:13,979 --> 00:06:20,789
and frequency is represented on why we

00:06:18,930 --> 00:06:22,860
can see here that most of the power in

00:06:20,789 --> 00:06:24,569
this sound that big blue band is

00:06:22,860 --> 00:06:26,940
centered directly on the 440 Hertz

00:06:24,569 --> 00:06:28,440
frequency band so this diagram is very

00:06:26,940 --> 00:06:31,710
similar to the sort of thing that you

00:06:28,440 --> 00:06:40,520
would see in say a graphic equalizer on

00:06:31,710 --> 00:06:44,419
your stereo system yes no hopefully not

00:06:40,520 --> 00:06:44,419
was it very loud at the front

00:06:50,680 --> 00:06:57,789
oh I say jury during the demo there will

00:06:53,979 --> 00:07:04,930
be a bit of white noise playing you're

00:06:57,789 --> 00:07:06,759
welcome so this is what the spectrogram

00:07:04,930 --> 00:07:08,139
if the second sound looks like and you

00:07:06,759 --> 00:07:12,039
can see that they're still there's still

00:07:08,139 --> 00:07:14,500
a large peak at 440 Hertz but there's

00:07:12,039 --> 00:07:16,720
also lots of power in a lot of other

00:07:14,500 --> 00:07:19,210
frequencies so even though we still

00:07:16,720 --> 00:07:22,210
heard that sound as 440 Hertz or a con

00:07:19,210 --> 00:07:25,120
today we heard that it's tamper changed

00:07:22,210 --> 00:07:26,770
and hence we can conclude that tambry is

00:07:25,120 --> 00:07:31,660
actually a result of multiple

00:07:26,770 --> 00:07:35,020
frequencies sounding simultaneously so

00:07:31,660 --> 00:07:38,979
that was looking at Tamra's being the

00:07:35,020 --> 00:07:40,479
the harmonic content of a sound and I

00:07:38,979 --> 00:07:43,930
think really the other important aspect

00:07:40,479 --> 00:07:46,210
of how I sounds Tambor changes is

00:07:43,930 --> 00:07:47,979
related to how its loudness actually

00:07:46,210 --> 00:07:50,470
changes over the period of time that the

00:07:47,979 --> 00:07:52,300
sound is playing so if you imagine a

00:07:50,470 --> 00:07:54,490
snare drum and you whack it with a stick

00:07:52,300 --> 00:07:56,919
it makes a really loud noise and then

00:07:54,490 --> 00:08:00,370
gets quiet really quickly but if you

00:07:56,919 --> 00:08:02,560
whacked a gong with a soft mallet it

00:08:00,370 --> 00:08:04,300
starts off reasonably softly then it

00:08:02,560 --> 00:08:06,880
gradually builds up to being quite loud

00:08:04,300 --> 00:08:09,849
and it decays and dies down over a very

00:08:06,880 --> 00:08:12,960
long period of time so obviously this

00:08:09,849 --> 00:08:16,120
has this this has a very big impact on

00:08:12,960 --> 00:08:18,039
what the sound actually sounds like so

00:08:16,120 --> 00:08:20,229
you can imagine that two sounds with the

00:08:18,039 --> 00:08:22,780
same pitch amplitude and harmonic

00:08:20,229 --> 00:08:26,039
structure will sound radically different

00:08:22,780 --> 00:08:28,419
if they're sustained level is different

00:08:26,039 --> 00:08:30,250
this has actually been simplified for

00:08:28,419 --> 00:08:32,979
sound synthesis into something that we

00:08:30,250 --> 00:08:34,779
call the adsr model which is represented

00:08:32,979 --> 00:08:40,300
with adsr envelopes and we'll take a

00:08:34,779 --> 00:08:42,250
look at what they are now so an idea

00:08:40,300 --> 00:08:44,800
sigh envelope represents the four basic

00:08:42,250 --> 00:08:47,160
components to the amplitude of a sound

00:08:44,800 --> 00:08:50,020
and the way that that changes over time

00:08:47,160 --> 00:08:51,490
first component is attack and this is

00:08:50,020 --> 00:08:53,740
the time it takes for the sound to reach

00:08:51,490 --> 00:08:56,680
its maximum amplitude after it starts

00:08:53,740 --> 00:09:00,700
playing so snare drum has a very quick

00:08:56,680 --> 00:09:03,750
attack Gong has a very slow one then the

00:09:00,700 --> 00:09:06,750
decay time which is the time it takes

00:09:03,750 --> 00:09:08,370
the sound to reduce its amplitude until

00:09:06,750 --> 00:09:10,590
it reaches what we call it sustained or

00:09:08,370 --> 00:09:12,420
a sustained level which is the confident

00:09:10,590 --> 00:09:14,880
the the constant amplitude of the sound

00:09:12,420 --> 00:09:16,410
after the attacks being delivered while

00:09:14,880 --> 00:09:18,780
the tones being consistently produced

00:09:16,410 --> 00:09:19,980
and finally its release time which is

00:09:18,780 --> 00:09:22,440
the amount of time it takes for the

00:09:19,980 --> 00:09:25,530
amplitude of the sound to reach zero

00:09:22,440 --> 00:09:28,710
when it finishes playing let's actually

00:09:25,530 --> 00:09:32,970
look at an example of how this how these

00:09:28,710 --> 00:09:35,310
adsr envelope envelopes work by looking

00:09:32,970 --> 00:09:38,460
at the way a clarinet actually produces

00:09:35,310 --> 00:09:41,040
a sound in the real world so that

00:09:38,460 --> 00:09:42,420
picture on the right there is a clarinet

00:09:41,040 --> 00:09:44,400
mouthpiece with a wooden read attached

00:09:42,420 --> 00:09:47,340
what happens when a clown enters gets

00:09:44,400 --> 00:09:49,410
their clarinet out and starts blowing

00:09:47,340 --> 00:09:52,680
across that Reed is that the reed starts

00:09:49,410 --> 00:09:55,460
vibrating which produces a sound that

00:09:52,680 --> 00:09:55,460
sounds something like this

00:09:55,750 --> 00:10:02,990
so when the player starts playing they

00:10:01,190 --> 00:10:05,030
start the clarinet making sound by

00:10:02,990 --> 00:10:07,220
hitting the clarinet reed with the tip

00:10:05,030 --> 00:10:09,350
of their tone which produces the attack

00:10:07,220 --> 00:10:12,140
phase which is a short kind of sharp

00:10:09,350 --> 00:10:14,930
sound and it's it's why you hear a very

00:10:12,140 --> 00:10:17,780
defined start to the note almost

00:10:14,930 --> 00:10:18,890
instantaneously after they do this the

00:10:17,780 --> 00:10:20,360
air that they're passing through their

00:10:18,890 --> 00:10:22,670
mouth blowing into the instrument across

00:10:20,360 --> 00:10:25,520
the reed starts the reed to cause

00:10:22,670 --> 00:10:27,110
vibrating which actually starts the

00:10:25,520 --> 00:10:31,210
whole a column of air inside the whole

00:10:27,110 --> 00:10:35,120
instrument to vibrate the time it takes

00:10:31,210 --> 00:10:37,370
initially very high amplitude of the

00:10:35,120 --> 00:10:38,840
attack or the tongue sound to subside to

00:10:37,370 --> 00:10:41,000
the dynamic level that the player

00:10:38,840 --> 00:10:45,020
chooses to play his long tonit is called

00:10:41,000 --> 00:10:47,990
the decay time and the the clarinet

00:10:45,020 --> 00:10:49,310
sound is going to remain at that

00:10:47,990 --> 00:10:51,410
sustained level for as long as the

00:10:49,310 --> 00:10:54,110
player passes a constant stream of air

00:10:51,410 --> 00:10:55,610
through their instrument finally when

00:10:54,110 --> 00:10:58,400
they want to stop making sound on the

00:10:55,610 --> 00:11:01,070
instrument they just basically stop

00:10:58,400 --> 00:11:03,770
blowing air into it which makes the read

00:11:01,070 --> 00:11:06,290
slowly stop vibrating which which

00:11:03,770 --> 00:11:08,420
gradually really reduces the amplitude

00:11:06,290 --> 00:11:12,830
of the sound down to zero which is the

00:11:08,420 --> 00:11:15,290
release phase so that's the adsr model

00:11:12,830 --> 00:11:17,390
of amplitude envelopes obviously in the

00:11:15,290 --> 00:11:19,640
real world it's it's quite a bit more

00:11:17,390 --> 00:11:21,710
complicated than this because musicians

00:11:19,640 --> 00:11:26,420
are able to make very kind of subtle

00:11:21,710 --> 00:11:29,750
changes to their tone as they're playing

00:11:26,420 --> 00:11:33,800
but adsr is actually really a very good

00:11:29,750 --> 00:11:37,850
first approximation to making really

00:11:33,800 --> 00:11:39,410
realistic synthesized sounds so now

00:11:37,850 --> 00:11:41,360
we've seen the basics of how analog

00:11:39,410 --> 00:11:42,920
sounds work in the real world let's see

00:11:41,360 --> 00:11:46,780
how we can store them digitally so that

00:11:42,920 --> 00:11:46,780
we can use them inside a computer

00:11:49,470 --> 00:11:54,130
now in the real world the properties

00:11:52,630 --> 00:11:56,320
that define sounds such as their

00:11:54,130 --> 00:11:58,870
amplitude and pitch exist as infinite

00:11:56,320 --> 00:12:00,700
continuum so that means that basically

00:11:58,870 --> 00:12:03,640
these these properties can change

00:12:00,700 --> 00:12:06,400
infinitesimally to produce a very

00:12:03,640 --> 00:12:08,530
slightly different sound for example we

00:12:06,400 --> 00:12:11,470
can represent sound as continuously

00:12:08,530 --> 00:12:13,480
changing radio waves or distortions in

00:12:11,470 --> 00:12:15,550
some sort of physical media such as the

00:12:13,480 --> 00:12:17,860
bumps on a record groove and we we refer

00:12:15,550 --> 00:12:20,920
to these representations as analog sound

00:12:17,860 --> 00:12:23,890
representations but obviously computers

00:12:20,920 --> 00:12:25,570
aren't analog their digital so we have

00:12:23,890 --> 00:12:27,280
to discretize or digital eyes these

00:12:25,570 --> 00:12:29,800
signals before they can be stored for

00:12:27,280 --> 00:12:31,300
playback within a computer so that means

00:12:29,800 --> 00:12:33,690
that the sound has to be broken down

00:12:31,300 --> 00:12:38,050
into a whole series of discrete parts

00:12:33,690 --> 00:12:40,030
rather than an analog signal so

00:12:38,050 --> 00:12:42,580
obviously in the real world sounds are

00:12:40,030 --> 00:12:45,670
analog signals and when we record them

00:12:42,580 --> 00:12:47,980
what we have to do is convert the analog

00:12:45,670 --> 00:12:51,910
signal into a digital signal in a

00:12:47,980 --> 00:12:54,610
process that we call transduction now

00:12:51,910 --> 00:12:56,770
take her to I actually convert an audio

00:12:54,610 --> 00:12:58,660
signal from a real world and log signal

00:12:56,770 --> 00:13:00,880
to a digital signal that we can use

00:12:58,660 --> 00:13:03,730
within a computer we use a transducer

00:13:00,880 --> 00:13:06,640
such as a microphone what the microphone

00:13:03,730 --> 00:13:10,270
actually does is it takes a measurement

00:13:06,640 --> 00:13:12,880
of the amplitude of a sound at each

00:13:10,270 --> 00:13:15,520
discrete point in time and then converts

00:13:12,880 --> 00:13:18,610
it to a voltage which can be stored as a

00:13:15,520 --> 00:13:20,470
floating point representation if this

00:13:18,610 --> 00:13:24,640
microphone takes a lot of measurements

00:13:20,470 --> 00:13:27,480
at evenly spaced intervals then this

00:13:24,640 --> 00:13:30,430
process can easily be reversed by

00:13:27,480 --> 00:13:31,960
sending that recorded signal that we

00:13:30,430 --> 00:13:34,210
took from the microphone to a speaker

00:13:31,960 --> 00:13:37,680
and really speakers and microphones are

00:13:34,210 --> 00:13:40,540
actually almost exactly the same thing

00:13:37,680 --> 00:13:42,790
when we perform this process it results

00:13:40,540 --> 00:13:44,410
in the standard form that we use to

00:13:42,790 --> 00:13:46,720
represent sound within computers which

00:13:44,410 --> 00:13:49,020
is called a pulse code modulation or PCM

00:13:46,720 --> 00:13:49,020
sound

00:13:51,780 --> 00:13:56,370
but how can we actually make a sound

00:13:53,770 --> 00:13:58,690
from scratch now the most simple tone

00:13:56,370 --> 00:14:01,930
just like we heard before is the pure

00:13:58,690 --> 00:14:03,610
sine tone so if we generate a sine wave

00:14:01,930 --> 00:14:05,830
and then periodically measure its

00:14:03,610 --> 00:14:07,630
amplitude then we've done basically the

00:14:05,830 --> 00:14:08,860
same thing that a microphone does but

00:14:07,630 --> 00:14:11,080
we've done it our groove maclee rather

00:14:08,860 --> 00:14:12,760
than physically and we call each of

00:14:11,080 --> 00:14:16,480
these piecewise measurements a sample of

00:14:12,760 --> 00:14:18,160
sound so we have to take a lot of these

00:14:16,480 --> 00:14:20,410
samples and we have to choose how often

00:14:18,160 --> 00:14:22,780
we're going to take them we call this

00:14:20,410 --> 00:14:25,480
the sampling rate now up to a point the

00:14:22,780 --> 00:14:27,430
higher the sampling rate IE the more

00:14:25,480 --> 00:14:28,690
samples that you take per second the

00:14:27,430 --> 00:14:31,120
more measurements of amplitude that you

00:14:28,690 --> 00:14:32,740
take the more accurate the digital

00:14:31,120 --> 00:14:36,070
representation of your sounds going to

00:14:32,740 --> 00:14:38,770
be the sampling rate on this diagram is

00:14:36,070 --> 00:14:41,470
the horizontal increment now the other

00:14:38,770 --> 00:14:44,170
factor governing the the fidelity of

00:14:41,470 --> 00:14:46,720
digital audio is how many discrete

00:14:44,170 --> 00:14:49,270
values we actually use to store the

00:14:46,720 --> 00:14:52,840
amplitude at each point in time so

00:14:49,270 --> 00:14:54,340
that's basically the the resolution that

00:14:52,840 --> 00:14:56,080
we're storing the measurement at and

00:14:54,340 --> 00:14:58,990
this is governed obviously by how many

00:14:56,080 --> 00:15:01,390
bits we assign to store each measurement

00:14:58,990 --> 00:15:03,880
and it's the vertical step on this graph

00:15:01,390 --> 00:15:05,710
we call this the bit depth and this

00:15:03,880 --> 00:15:08,170
sound here has a bit depth of four so

00:15:05,710 --> 00:15:10,450
you can represent every point on that

00:15:08,170 --> 00:15:14,110
chart as an approximation using four

00:15:10,450 --> 00:15:15,460
bits because we necessarily have a very

00:15:14,110 --> 00:15:17,920
limited number of bits in which to

00:15:15,460 --> 00:15:20,140
storage sample at each point in time we

00:15:17,920 --> 00:15:24,870
have to set obviously a clamp each

00:15:20,140 --> 00:15:24,870
sample to a discreet step

00:15:26,279 --> 00:15:32,519
so sound synthesis synthesis is the

00:15:29,579 --> 00:15:35,009
process of producing an audio signal by

00:15:32,519 --> 00:15:38,129
means of applying an algorithm or

00:15:35,009 --> 00:15:40,699
performing a computation as opposed to

00:15:38,129 --> 00:15:44,309
simply producing or reproducing a sound

00:15:40,699 --> 00:15:47,730
so synthesis is the act of generating

00:15:44,309 --> 00:15:49,110
some samples either from nothing or by

00:15:47,730 --> 00:15:52,649
performing some sort of transformation

00:15:49,110 --> 00:15:53,819
on an existing signal now there are

00:15:52,649 --> 00:15:55,019
heaps of different types of sound

00:15:53,819 --> 00:15:56,699
synthesis but we don't have very much

00:15:55,019 --> 00:15:58,860
time today so we're just going to look

00:15:56,699 --> 00:16:02,160
at generating a very simple pure sine

00:15:58,860 --> 00:16:03,360
tone and this really is very easy I'm

00:16:02,160 --> 00:16:05,819
going to summarize this as simply as

00:16:03,360 --> 00:16:08,279
possible to produce a synthesized sound

00:16:05,819 --> 00:16:11,100
literally all you need to do is create a

00:16:08,279 --> 00:16:13,379
buffer put a heap of samples in it and

00:16:11,100 --> 00:16:20,999
then send it off to the sound card to

00:16:13,379 --> 00:16:23,370
have it rendered as audio so generating

00:16:20,999 --> 00:16:24,749
the sets of samples that we use to

00:16:23,370 --> 00:16:26,610
represent the sound in a synthesizer

00:16:24,749 --> 00:16:29,490
that is going to play is actually quite

00:16:26,610 --> 00:16:31,500
simple and after these samples we have

00:16:29,490 --> 00:16:33,029
to send them to the sound cut so that it

00:16:31,500 --> 00:16:36,569
can send audio off to our speakers for

00:16:33,029 --> 00:16:38,100
it to be played this is obviously a very

00:16:36,569 --> 00:16:41,399
low level interaction and it's

00:16:38,100 --> 00:16:45,059
platform-specific so it's a prime

00:16:41,399 --> 00:16:48,180
candidate really to be to be kind of

00:16:45,059 --> 00:16:49,980
externalized to an external library so

00:16:48,180 --> 00:16:51,750
we're about to do a demo for this

00:16:49,980 --> 00:16:54,149
example we're going to use the the PI

00:16:51,750 --> 00:16:58,259
audio module which provides python

00:16:54,149 --> 00:17:01,079
bindings for the the cross-platform port

00:16:58,259 --> 00:17:02,389
audio library actually when I was doing

00:17:01,079 --> 00:17:05,819
research for this talk I actually

00:17:02,389 --> 00:17:07,439
realized that port audio was actually

00:17:05,819 --> 00:17:12,720
written by one of my mates back in

00:17:07,439 --> 00:17:16,559
Melbourne Ross Ben Gina and yeah he's

00:17:12,720 --> 00:17:19,100
had a ported to a python so let's crack

00:17:16,559 --> 00:17:19,100
into a demo

00:17:22,809 --> 00:17:26,559
so what we're going to do here is we're

00:17:24,879 --> 00:17:33,850
going to implement a very simple sound

00:17:26,559 --> 00:17:35,980
synthesizer from scratch and hopefully

00:17:33,850 --> 00:17:42,159
by the end of it we'll be hearing some

00:17:35,980 --> 00:17:44,259
sounds that we've created so the first

00:17:42,159 --> 00:17:48,970
thing I'm going to do here is I'm going

00:17:44,259 --> 00:17:50,860
to import the PI audio module then I'm

00:17:48,970 --> 00:18:00,220
going to initialize a priori object

00:17:50,860 --> 00:18:01,299
using its standard initializer now we're

00:18:00,220 --> 00:18:04,210
going to do is we're going to open an

00:18:01,299 --> 00:18:06,759
audio stream which we're going to use

00:18:04,210 --> 00:18:08,649
later on for sending samples to and

00:18:06,759 --> 00:18:17,200
having that played by the sounds in the

00:18:08,649 --> 00:18:18,789
sound subsystem so what I've got here is

00:18:17,200 --> 00:18:20,169
just a couple of variables that we're

00:18:18,789 --> 00:18:22,720
going to use I'm going to set the audio

00:18:20,169 --> 00:18:25,509
format to PA float32 which corresponds

00:18:22,720 --> 00:18:27,629
to 32-bit floats for sampling width of

00:18:25,509 --> 00:18:31,629
32 bits which is reasonably standard

00:18:27,629 --> 00:18:34,809
I've set the sampling rate to 44100

00:18:31,629 --> 00:18:37,899
samples per second which is CD quality

00:18:34,809 --> 00:18:40,619
44.1 k sound will set the number of

00:18:37,899 --> 00:18:43,749
channels to 12 indicate that we want

00:18:40,619 --> 00:18:45,970
mono audio so what this means is that

00:18:43,749 --> 00:18:47,639
the same signal will just be played out

00:18:45,970 --> 00:18:50,379
of both our speakers in a stereo system

00:18:47,639 --> 00:18:51,820
as opposed to usual stereo where you

00:18:50,379 --> 00:18:55,299
have a different signal being played out

00:18:51,820 --> 00:18:57,879
of each speaker and finally I'll set the

00:18:55,299 --> 00:19:00,220
short output sound flag to true display

00:18:57,879 --> 00:19:03,519
just indicates to high audio that it

00:19:00,220 --> 00:19:05,289
should start playing sound immediately

00:19:03,519 --> 00:19:07,619
as soon as that buffer starts to get

00:19:05,289 --> 00:19:07,619
filled up

00:19:10,350 --> 00:19:17,500
perfect so that's our initializer and

00:19:14,470 --> 00:19:21,390
once we've opened this dream we can

00:19:17,500 --> 00:19:21,390
start writing our sound samples to it

00:19:27,860 --> 00:19:32,260
so this is our main audio loop now this

00:19:29,990 --> 00:19:35,000
is a process that's going to be repeated

00:19:32,260 --> 00:19:36,830
many times so we need to generate a lot

00:19:35,000 --> 00:19:39,650
of samples we need to continuously

00:19:36,830 --> 00:19:43,070
generate samples so that we have

00:19:39,650 --> 00:19:45,080
continuous audio playing so what happens

00:19:43,070 --> 00:19:46,429
here is in this audio loop we're going

00:19:45,080 --> 00:19:48,049
to generate a whole heap of samples and

00:19:46,429 --> 00:19:51,950
then we're going to write them to the

00:19:48,049 --> 00:19:53,809
soundstream using stream right this

00:19:51,950 --> 00:19:56,090
stream then will once it has some

00:19:53,809 --> 00:19:59,240
samples in it it blocks until it's

00:19:56,090 --> 00:20:02,090
finished playing all their samples and

00:19:59,240 --> 00:20:03,830
it's ready for more so this loop runs

00:20:02,090 --> 00:20:06,110
every single time more audio is needed

00:20:03,830 --> 00:20:07,640
so we call it the main audio Lou and the

00:20:06,110 --> 00:20:10,070
main audio loop is really the back of

00:20:07,640 --> 00:20:13,160
the the the backbone of every sound

00:20:10,070 --> 00:20:14,900
synthesizer I've just passed this out

00:20:13,160 --> 00:20:19,460
for the moment we'll come back to it in

00:20:14,900 --> 00:20:20,750
a sec after we've cleaned up clean up

00:20:19,460 --> 00:20:22,370
very simple very boring all we're doing

00:20:20,750 --> 00:20:24,200
here we're asking the stream to stop

00:20:22,370 --> 00:20:26,600
playing audio then we'll close the

00:20:24,200 --> 00:20:34,970
stream and finally will terminate the

00:20:26,600 --> 00:20:36,470
instance of pi audio now let's take a

00:20:34,970 --> 00:20:39,400
look at what we're actually going to put

00:20:36,470 --> 00:20:39,400
in the main audio loop

00:20:47,230 --> 00:20:52,730
so as I said before the backbone the

00:20:50,330 --> 00:20:54,320
workhorse of our synthesizer is the main

00:20:52,730 --> 00:20:56,570
audio loop and this is where the samples

00:20:54,320 --> 00:20:59,240
are actually going to be generated now

00:20:56,570 --> 00:21:02,660
pi audio can run this loop in either

00:20:59,240 --> 00:21:04,130
blocking mode or call back mode if you

00:21:02,660 --> 00:21:06,020
choose to use callback mode then you'll

00:21:04,130 --> 00:21:08,030
get a call back on a high priority

00:21:06,020 --> 00:21:10,940
thread asking you to generate more

00:21:08,030 --> 00:21:13,700
samples as they're needed obviously this

00:21:10,940 --> 00:21:14,900
is this is a much more beneficial than

00:21:13,700 --> 00:21:16,460
running in blocking mode because it

00:21:14,900 --> 00:21:19,220
means that you can perform other

00:21:16,460 --> 00:21:21,800
computations while your sound is being

00:21:19,220 --> 00:21:24,200
played but for simplicity today we're

00:21:21,800 --> 00:21:25,370
just going to run in blocking mode but

00:21:24,200 --> 00:21:29,000
if you don't play with this at home I do

00:21:25,370 --> 00:21:31,670
recommend using callback mode so we'll

00:21:29,000 --> 00:21:34,090
start off here by initializing a list of

00:21:31,670 --> 00:21:34,090
raw frames

00:21:39,150 --> 00:21:45,820
and this is where we're going to

00:21:41,290 --> 00:21:47,590
actually store our set of samples each

00:21:45,820 --> 00:21:50,500
time we run through this main audio loop

00:21:47,590 --> 00:22:04,690
we're going to generate 1024 frames of

00:21:50,500 --> 00:22:09,520
audio or 1024 samples so go for frame in

00:22:04,690 --> 00:22:12,040
range 1024 now for the moment let's just

00:22:09,520 --> 00:22:15,240
make each of our samples a random number

00:22:12,040 --> 00:22:15,240
between negative 1 and 1

00:22:23,760 --> 00:22:27,900
going to import numpy here's what

00:22:32,480 --> 00:22:38,730
and we'll also set the the amplitude of

00:22:35,490 --> 00:22:40,290
our sound to unity or one when we

00:22:38,730 --> 00:22:44,340
produce these samples they have to be

00:22:40,290 --> 00:22:47,040
clamped within the range negative 1 to

00:22:44,340 --> 00:22:48,410
positive 1 otherwise bad things will

00:22:47,040 --> 00:22:51,900
happen if you want to allow the sound

00:22:48,410 --> 00:22:54,180
you just reduce the amplitude so that

00:22:51,900 --> 00:22:55,560
they exist within a smaller range you

00:22:54,180 --> 00:22:58,530
should never you should never produce a

00:22:55,560 --> 00:23:01,490
sample less than negative 1 or greater

00:22:58,530 --> 00:23:01,490
than positive 1

00:23:07,299 --> 00:23:19,269
so drop our amplitude in here instead of

00:23:10,720 --> 00:23:30,190
21 and we'll multiply our sample by the

00:23:19,269 --> 00:23:34,029
amplitude that we want so now we've got

00:23:30,190 --> 00:23:43,029
here is a list of all frames a loop that

00:23:34,029 --> 00:23:44,590
generates us some samples almost so

00:23:43,029 --> 00:23:48,059
we'll just append each sample as we

00:23:44,590 --> 00:23:48,059
generate it to our list of raw frames

00:23:49,169 --> 00:23:53,460
has anyone seen if I made any mistakes

00:23:51,340 --> 00:23:53,460
yet

00:24:00,490 --> 00:24:03,660
oh thank you

00:24:05,710 --> 00:24:18,309
perfect good glad we got that out of the

00:24:09,580 --> 00:24:26,130
way early no actually they don't neither

00:24:18,309 --> 00:24:26,130
of them do hopefully so we'll see soon

00:24:26,909 --> 00:24:31,450
so now we have we have our list of raw

00:24:29,230 --> 00:24:32,860
frames and all we need to do is write

00:24:31,450 --> 00:24:38,409
them to the stream so that they can be

00:24:32,860 --> 00:24:44,580
played by our Sam card I'm going to drop

00:24:38,409 --> 00:24:44,580
this in here and all we're doing here is

00:24:45,240 --> 00:24:50,200
using the umpire to make sure that these

00:24:48,100 --> 00:24:53,549
are 32-bit floats and we're writing them

00:24:50,200 --> 00:24:58,140
just as a string directly to that stream

00:24:53,549 --> 00:24:58,140
so let's crack open a terminal

00:25:05,600 --> 00:25:18,750
and see if we've done any good there we

00:25:15,060 --> 00:25:25,590
go Toby so we've got here is some white

00:25:18,750 --> 00:25:26,970
noise and now white noise occurs when

00:25:25,590 --> 00:25:28,740
there's an even distribution of power

00:25:26,970 --> 00:25:30,510
along every frequency band so what

00:25:28,740 --> 00:25:32,730
happened is we filled up our sample

00:25:30,510 --> 00:25:40,290
buffer with just random numbers so just

00:25:32,730 --> 00:25:42,060
junk and we got white noise but let's

00:25:40,290 --> 00:25:44,910
get rid of that terrible white noise

00:25:42,060 --> 00:25:48,630
generator and look at how we can make a

00:25:44,910 --> 00:25:50,130
synthesizer produce a nice sign tone so

00:25:48,630 --> 00:25:52,050
what we're going to need to do here to

00:25:50,130 --> 00:25:54,060
do this is we're just going to need to

00:25:52,050 --> 00:25:56,850
generate a sine wave and then

00:25:54,060 --> 00:26:07,620
periodically measure its amplitude as we

00:25:56,850 --> 00:26:09,560
move along the wave so we're going to

00:26:07,620 --> 00:26:13,140
create our sign tone at a frequency of

00:26:09,560 --> 00:26:21,540
440 Hertz or an a so it's going to

00:26:13,140 --> 00:26:24,360
oscillate 440 times per second and as we

00:26:21,540 --> 00:26:28,020
move along the sine wave we're going to

00:26:24,360 --> 00:26:29,640
start at position theta equal zero so

00:26:28,020 --> 00:26:32,760
right at the the origin of that sine

00:26:29,640 --> 00:26:34,380
wave so what we'll do is we'll take our

00:26:32,760 --> 00:26:38,220
first measurement of the sine wave and

00:26:34,380 --> 00:26:43,130
store it in our sample buffer so I'm

00:26:38,220 --> 00:26:48,230
going to delete that line there and

00:26:43,130 --> 00:26:48,230
replace it with sine of theta

00:26:49,590 --> 00:26:54,360
and so that's our first sample of the

00:26:51,990 --> 00:26:59,820
sine wave right at the start which will

00:26:54,360 --> 00:27:01,289
give us a sign of 0 which is 0 and after

00:26:59,820 --> 00:27:03,270
we sample this sine wave the first time

00:27:01,289 --> 00:27:04,950
before every time we sample it again we

00:27:03,270 --> 00:27:08,309
need to move along the wave just enough

00:27:04,950 --> 00:27:11,340
to ensure that we're taking exactly 44.1

00:27:08,309 --> 00:27:13,200
thousand measurements of sound of evenly

00:27:11,340 --> 00:27:15,510
spaced measurements of sound per second

00:27:13,200 --> 00:27:19,500
just like we told the PI audio

00:27:15,510 --> 00:27:21,029
initializer that we would to do this I'm

00:27:19,500 --> 00:27:22,890
going to create a variable called theta

00:27:21,029 --> 00:27:26,090
increment which is going to going to

00:27:22,890 --> 00:27:30,110
control how far we move along the wave

00:27:26,090 --> 00:27:30,110
at each step

00:27:35,680 --> 00:27:40,840
so I'm just going to top that in there

00:27:37,300 --> 00:27:43,510
now the period of sine is 2pi radians if

00:27:40,840 --> 00:27:46,390
you remember back from trick and when we

00:27:43,510 --> 00:27:49,090
multiply that by our frequency of 440

00:27:46,390 --> 00:27:53,200
Hertz to set the pitch of the note to an

00:27:49,090 --> 00:27:55,210
a what we talked to that is to get our

00:27:53,200 --> 00:27:57,100
actual theta increment is we divide this

00:27:55,210 --> 00:27:58,840
by the sampling rate which gives us a

00:27:57,100 --> 00:28:00,670
results in units of radians per sample

00:27:58,840 --> 00:28:04,630
and allows us to move along that sine

00:28:00,670 --> 00:28:09,960
wave to ensure that we take 44.1

00:28:04,630 --> 00:28:12,160
thousand measurements of it per second

00:28:09,960 --> 00:28:16,630
so obviously after we've taken a measure

00:28:12,160 --> 00:28:18,040
after we've taken a measurement of that

00:28:16,630 --> 00:28:20,040
sine wave and then appended to our

00:28:18,040 --> 00:28:22,300
frames array we need to increment

00:28:20,040 --> 00:28:27,880
theater by that theater increment

00:28:22,300 --> 00:28:30,670
variable and the last thing I'm going to

00:28:27,880 --> 00:28:38,800
do here is just drop a little ah thank

00:28:30,670 --> 00:28:41,650
you the last thing we're going to do

00:28:38,800 --> 00:28:44,680
here is drop in a conditional to ensure

00:28:41,650 --> 00:28:48,660
that our theta remains between 0 and 2

00:28:44,680 --> 00:28:55,060
pi because we know that sine waves

00:28:48,660 --> 00:28:56,830
oscillate periodically and repeatedly so

00:28:55,060 --> 00:29:05,140
we could if we wanted to be a bit more

00:28:56,830 --> 00:29:10,870
clever we could if we wanted to be more

00:29:05,140 --> 00:29:13,180
clever actually we could actually we

00:29:10,870 --> 00:29:14,620
could we could pre calculate because we

00:29:13,180 --> 00:29:16,360
know the signs never going to change we

00:29:14,620 --> 00:29:18,370
could pre calculate all our samples and

00:29:16,360 --> 00:29:19,720
just store them in a lookup table and

00:29:18,370 --> 00:29:21,550
instead of actually computing the value

00:29:19,720 --> 00:29:23,440
of sine again every single time we need

00:29:21,550 --> 00:29:24,730
a new sample we could be much more

00:29:23,440 --> 00:29:28,600
efficient and just look it up from a

00:29:24,730 --> 00:29:33,250
table but we're lazy today so I'm not

00:29:28,600 --> 00:29:38,500
going to do that I'm going to crack that

00:29:33,250 --> 00:29:41,070
open in the terminal again what we call

00:29:38,500 --> 00:29:41,070
it seemed to drop by

00:29:41,550 --> 00:29:48,370
I'm perfect so there's our nice pure

00:29:45,550 --> 00:29:53,680
sine tone resonating at a frequency of

00:29:48,370 --> 00:29:55,930
440 Hertz we can change this frequency

00:29:53,680 --> 00:29:58,630
here to anything we want so we change it

00:29:55,930 --> 00:30:02,050
to 818 we get a sine wave an octave

00:29:58,630 --> 00:30:05,500
higher and similarly we can set it to

00:30:02,050 --> 00:30:08,380
any value we want so that's it that's

00:30:05,500 --> 00:30:16,740
our very simple synthesizer using Python

00:30:08,380 --> 00:30:16,740
and PI audio thank you

00:30:29,510 --> 00:30:31,570

YouTube URL: https://www.youtube.com/watch?v=RGhmPyJKcjU


