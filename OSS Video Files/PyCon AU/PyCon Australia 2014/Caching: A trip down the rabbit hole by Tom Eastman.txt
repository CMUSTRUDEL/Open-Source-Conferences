Title: Caching: A trip down the rabbit hole by Tom Eastman
Publication date: 2014-08-05
Playlist: PyCon Australia 2014
Description: 
	The question: How do I make my website fast?

If that sounds like a loaded question to you: good, we're on the same page.

In this talk I will give you a full overview of one of the most powerful and headache-inducing tools in the web-developer's kit: caching.

This is a talk for all experience levels, from beginner to seriously brain-melty. The code and scenarios we'll be exploring are within the context of a Django project, but the principles are applicable to all of web development.

We'll begin our journey in the light, warm land of web browser caches: learning how you can make your users' web browsers do all the work for you. Making your site feel rocket-fast and responsive with little more than some finely crafted HTTP response headers.

From there, we'll begin our descent into the underworld of server-level caching, using reverse-proxies such as Varnish or Nginx that shield the application code from having to do any work. What they do, how they can help, and more important -- when do they *not* help, and when do you have to go deeper.

Finally we'll explore the dark art of application-level caching. Whether it's caching whole responses, partial responses, preventing repetitive SQL queries or expensive API response serialization calls. And, if our brains haven't exploded yet, we might throw in some asynchronous cached-view-generation  just for good measure.

Whether you're a hobbyist or a grizzled veteran, you should come out of this talk with a few new tricks up your sleeve for making all your sites do more with less work.

Expect references from -- depending on mood -- Alice in Wonderland, The Matrix, or Dante Alighieri's "Inferno".

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:16,939 --> 00:00:21,960
cool of course it's a django talk what

00:00:19,320 --> 00:00:23,580
else would it be so yeah for those who

00:00:21,960 --> 00:00:26,039
don't know me my name is tom eastman i

00:00:23,580 --> 00:00:28,080
am a developer and open source

00:00:26,039 --> 00:00:31,320
technologist at catalyst IT in

00:00:28,080 --> 00:00:33,180
wellington and i'm the only one from

00:00:31,320 --> 00:00:34,530
wellington at catalyst here today but

00:00:33,180 --> 00:00:35,820
where are my colleagues where my

00:00:34,530 --> 00:00:38,640
australian colleagues we got one over

00:00:35,820 --> 00:00:41,850
there and i thought we had a couple

00:00:38,640 --> 00:00:42,870
others in here oh well come and talk to

00:00:41,850 --> 00:00:43,829
me if you want to work in Wellington

00:00:42,870 --> 00:00:47,760
come and talk to them if you want to

00:00:43,829 --> 00:00:50,370
work in Sydney or Melbourne my expertise

00:00:47,760 --> 00:00:51,690
is in Python in general and Django in

00:00:50,370 --> 00:00:56,100
particular I've been working with Jenga

00:00:51,690 --> 00:00:57,750
for eight years now and this year I'm

00:00:56,100 --> 00:00:59,430
actually doing something which is very

00:00:57,750 --> 00:01:01,379
similar to what I did at last year's

00:00:59,430 --> 00:01:03,270
pike on a you where I gave two talks and

00:01:01,379 --> 00:01:05,820
one of them was full of good ideas and

00:01:03,270 --> 00:01:08,189
best practices and then the other one

00:01:05,820 --> 00:01:10,320
was full of really really bad ideas and

00:01:08,189 --> 00:01:13,710
terrible things so today is the one that

00:01:10,320 --> 00:01:15,150
is ostensibly good ideas and tomorrow if

00:01:13,710 --> 00:01:18,360
you come to my talk you'll hear me

00:01:15,150 --> 00:01:19,860
explain how to delete your entire home

00:01:18,360 --> 00:01:21,510
directory with a single line of llamo or

00:01:19,860 --> 00:01:22,890
do a port scan with someone else's XML

00:01:21,510 --> 00:01:25,790
parser so if you want to hear about some

00:01:22,890 --> 00:01:29,610
really bad ideas come to tomorrow's talk

00:01:25,790 --> 00:01:32,760
but today I'm here to talk about caching

00:01:29,610 --> 00:01:35,610
and to talk about caching you have to

00:01:32,760 --> 00:01:38,280
decide well that doesn't really narrow

00:01:35,610 --> 00:01:42,750
it down does it has anyone here heard

00:01:38,280 --> 00:01:47,250
the saying that Eskimos have like 230

00:01:42,750 --> 00:01:49,159
words for snow you know falling snow or

00:01:47,250 --> 00:01:51,900
ground snow or yellow snow or whatever

00:01:49,159 --> 00:01:52,950
it's not actually true most people also

00:01:51,900 --> 00:01:54,840
know that it's not actually true attack

00:01:52,950 --> 00:01:58,409
is a Wikipedia page all about how not

00:01:54,840 --> 00:02:00,750
true it is but it points to an

00:01:58,409 --> 00:02:02,189
interesting problem which is when there

00:02:00,750 --> 00:02:04,560
are many different varieties of the same

00:02:02,189 --> 00:02:05,820
thing a nomenclature tends to emerge so

00:02:04,560 --> 00:02:07,770
that you can differentiate between all

00:02:05,820 --> 00:02:09,299
the different varieties in the tech

00:02:07,770 --> 00:02:12,480
industry we seem to have the opposite

00:02:09,299 --> 00:02:17,010
problem when it comes to casing we have

00:02:12,480 --> 00:02:18,180
one word and it means everything so how

00:02:17,010 --> 00:02:20,389
many different kinds of caching are

00:02:18,180 --> 00:02:20,389
there

00:02:26,000 --> 00:02:31,109
so every time something ever is going

00:02:28,829 --> 00:02:34,140
slow you try not to have to redo it and

00:02:31,109 --> 00:02:36,359
so you make a case and so caching

00:02:34,140 --> 00:02:39,959
happens absolutely everywhere in every

00:02:36,359 --> 00:02:43,469
piece of computing and we use the same

00:02:39,959 --> 00:02:44,400
word for all of it so you can have two

00:02:43,469 --> 00:02:46,680
people who know everything in that

00:02:44,400 --> 00:02:48,209
casing and they can try to talk to each

00:02:46,680 --> 00:02:49,950
other and they just won't be able to

00:02:48,209 --> 00:02:54,389
communicate with each other it's almost

00:02:49,950 --> 00:02:56,790
like being pro developers I didn't just

00:02:54,389 --> 00:02:59,849
say that so what I might what I'm trying

00:02:56,790 --> 00:03:03,480
to actually get through today is I want

00:02:59,849 --> 00:03:04,799
to give you a tour of the kinds of

00:03:03,480 --> 00:03:09,599
casing that you'll end up in countering

00:03:04,799 --> 00:03:11,549
as a web developer starting with well so

00:03:09,599 --> 00:03:14,579
first of all even just what i just said

00:03:11,549 --> 00:03:17,400
would take a semester so I'm trying to

00:03:14,579 --> 00:03:21,659
give you a brief tour and some tricks

00:03:17,400 --> 00:03:23,310
that you can do and if you already know

00:03:21,659 --> 00:03:24,870
this stuff then hopefully you're in a

00:03:23,310 --> 00:03:27,900
different talk and if you're new to this

00:03:24,870 --> 00:03:29,849
stuff I don't know I'm going to try and

00:03:27,900 --> 00:03:31,979
cover a lot of material so I really want

00:03:29,849 --> 00:03:34,049
to do is have everyone here sort of come

00:03:31,979 --> 00:03:35,189
out of the room with one thing that they

00:03:34,049 --> 00:03:37,739
hadn't tried yet that they suddenly

00:03:35,189 --> 00:03:39,810
think oh maybe I should try that and

00:03:37,739 --> 00:03:41,370
i'll post the slides when i'm done

00:03:39,810 --> 00:03:42,750
because the links at the end are

00:03:41,370 --> 00:03:45,870
actually the most important part of this

00:03:42,750 --> 00:03:47,759
because everything that i'm talking

00:03:45,870 --> 00:03:50,189
about here has been explained better by

00:03:47,759 --> 00:03:51,359
someone else in a blog post or tutorial

00:03:50,189 --> 00:03:54,269
somewhere else and usually that person

00:03:51,359 --> 00:03:56,099
is mark nottingham for those who know

00:03:54,269 --> 00:03:58,470
him it turned out I was looking for

00:03:56,099 --> 00:03:59,639
material for this talk and I found his

00:03:58,470 --> 00:04:00,870
caching tutorial which covered

00:03:59,639 --> 00:04:01,949
everything I wanted to say and suddenly

00:04:00,870 --> 00:04:05,370
I wasn't sure if I should bother giving

00:04:01,949 --> 00:04:09,090
it but i'm giving it anyway so that's

00:04:05,370 --> 00:04:10,409
the point here's a quick rundown of the

00:04:09,090 --> 00:04:13,290
sorts of things that i'm going to try

00:04:10,409 --> 00:04:15,109
and get through today and i'm actually

00:04:13,290 --> 00:04:18,359
going to gloss over some of these and

00:04:15,109 --> 00:04:21,780
spend more time on basically the first

00:04:18,359 --> 00:04:23,159
one and the last two but when you're

00:04:21,780 --> 00:04:26,940
talking about web development you're

00:04:23,159 --> 00:04:28,560
talking about the web browsers case you

00:04:26,940 --> 00:04:30,270
know internet explorer has a cage chrome

00:04:28,560 --> 00:04:31,680
has a crash or you might be talking

00:04:30,270 --> 00:04:32,729
about the transparent proxy that always

00:04:31,680 --> 00:04:33,960
screws you up when you

00:04:32,729 --> 00:04:37,259
talking when you're trying to use your

00:04:33,960 --> 00:04:39,719
ISP or your company is hidden behind a

00:04:37,259 --> 00:04:41,009
squid case or something like that or

00:04:39,719 --> 00:04:43,289
you're talking about content delivery

00:04:41,009 --> 00:04:46,139
networks or you're talking about reverse

00:04:43,289 --> 00:04:48,839
proxies like varnish as Simon was

00:04:46,139 --> 00:04:51,029
covering in the previous talk or you're

00:04:48,839 --> 00:04:52,559
talking about memcached or Redis also as

00:04:51,029 --> 00:04:54,659
Simon was covering in the previous talk

00:04:52,559 --> 00:04:56,610
all of this stuff just falls under the

00:04:54,659 --> 00:04:58,979
term casing and then if we get through

00:04:56,610 --> 00:05:01,439
all that I have a few bonus tricks that

00:04:58,979 --> 00:05:02,669
I want to talk about at the end but

00:05:01,439 --> 00:05:05,719
we're going to actually spend most of

00:05:02,669 --> 00:05:08,309
our time on web browser caching because

00:05:05,719 --> 00:05:10,229
it's the part where you can get the most

00:05:08,309 --> 00:05:13,559
win for the least work you just have to

00:05:10,229 --> 00:05:18,689
know a little bit more than maybe you

00:05:13,559 --> 00:05:20,699
were familiar with in terms of if you're

00:05:18,689 --> 00:05:22,860
new to web development as I was when I

00:05:20,699 --> 00:05:24,389
started digging through this you know

00:05:22,860 --> 00:05:27,509
that you're writing code that generates

00:05:24,389 --> 00:05:29,370
an HTML page and that's not actually the

00:05:27,509 --> 00:05:32,779
whole story because you're writing code

00:05:29,370 --> 00:05:34,949
that generates an HTTP response and

00:05:32,779 --> 00:05:37,789
that's where you actually have more

00:05:34,949 --> 00:05:37,789
power than you thought you did

00:05:37,999 --> 00:05:42,990
everyone's familiar with clearing their

00:05:40,050 --> 00:05:44,459
case on their web browser it's about as

00:05:42,990 --> 00:05:46,770
common advice as have you tried turning

00:05:44,459 --> 00:05:48,599
it off or on again but you want to be

00:05:46,770 --> 00:05:49,889
able to do more things with that case

00:05:48,599 --> 00:05:53,009
you want to be able to take advantage of

00:05:49,889 --> 00:05:55,800
it and use it smoothly and have it work

00:05:53,009 --> 00:05:57,689
for you than the other way around so I'm

00:05:55,800 --> 00:06:00,539
going to cover just a couple of the

00:05:57,689 --> 00:06:03,330
things that HTTP gives you that HTML

00:06:00,539 --> 00:06:05,550
doesn't and this is all stuff that is

00:06:03,330 --> 00:06:07,949
very easy to implement using any modern

00:06:05,550 --> 00:06:10,080
web framework once you know about it and

00:06:07,949 --> 00:06:11,399
want to take advantage of it the key

00:06:10,080 --> 00:06:12,719
point is the browser cache actually

00:06:11,399 --> 00:06:14,879
isn't your enemy it's not the thing

00:06:12,719 --> 00:06:19,800
that's preventing the guy using your

00:06:14,879 --> 00:06:22,349
site from getting the latest stuff from

00:06:19,800 --> 00:06:25,409
your page it's it's trying to help it's

00:06:22,349 --> 00:06:29,610
always trying almost always trying to

00:06:25,409 --> 00:06:31,709
help it's not always trying to help I

00:06:29,610 --> 00:06:33,270
actually thought I had a good grasp on

00:06:31,709 --> 00:06:34,259
this stuff and I was ready for this talk

00:06:33,270 --> 00:06:36,839
and I thought I knew what I was talking

00:06:34,259 --> 00:06:38,009
about and then an external tester for

00:06:36,839 --> 00:06:40,680
the project I've been working on came

00:06:38,009 --> 00:06:45,649
back and said hey absolutely nothing is

00:06:40,680 --> 00:06:45,649
working in IE and I was like okay

00:06:48,950 --> 00:06:52,440
catalyst is an open source open source

00:06:51,030 --> 00:06:54,150
shop we use open source tools for

00:06:52,440 --> 00:06:55,800
everything and we have IE and you know

00:06:54,150 --> 00:06:58,740
various windows instances for testing

00:06:55,800 --> 00:06:59,820
but we don't like using them so we do

00:06:58,740 --> 00:07:03,000
all of our testing and development

00:06:59,820 --> 00:07:05,040
against browsers that work and then we

00:07:03,000 --> 00:07:07,710
end up having to belatedly test our

00:07:05,040 --> 00:07:09,570
stuff against browsers people use and

00:07:07,710 --> 00:07:14,640
there's a dichotomy there which is no

00:07:09,570 --> 00:07:16,890
fun so web browser caching there's two

00:07:14,640 --> 00:07:19,230
concepts that matter there's validation

00:07:16,890 --> 00:07:23,010
and there's freshness and if you can get

00:07:19,230 --> 00:07:23,970
your head around both of these and it

00:07:23,010 --> 00:07:25,350
took me a little while because I never

00:07:23,970 --> 00:07:26,700
actually called these by their by their

00:07:25,350 --> 00:07:28,260
names apparently this is the proper name

00:07:26,700 --> 00:07:29,640
but if you get a head around these two

00:07:28,260 --> 00:07:32,690
concepts then controlling the web

00:07:29,640 --> 00:07:36,270
browser case becomes a lot simpler

00:07:32,690 --> 00:07:38,520
validation is how does the browser ask

00:07:36,270 --> 00:07:46,380
the server if the version it has in its

00:07:38,520 --> 00:07:50,040
cache is still okay to use if it doesn't

00:07:46,380 --> 00:07:51,510
have a way to ask that question your web

00:07:50,040 --> 00:07:54,360
browser has no choice but to either

00:07:51,510 --> 00:07:55,620
guess and just use the you know page or

00:07:54,360 --> 00:07:58,760
image or whatever that it hasn't it's

00:07:55,620 --> 00:08:00,960
cash or grab the whole thing every time

00:07:58,760 --> 00:08:02,370
neither of which are ideal one of them

00:08:00,960 --> 00:08:04,680
will hit your server too much and the

00:08:02,370 --> 00:08:08,340
other one will just end up showing you

00:08:04,680 --> 00:08:10,350
the wrong stuff all the time so what you

00:08:08,340 --> 00:08:13,620
need to be doing is always providing a

00:08:10,350 --> 00:08:15,120
way for the browser to say hey is this

00:08:13,620 --> 00:08:16,800
page still the version that I've got

00:08:15,120 --> 00:08:19,890
without actually having to get the whole

00:08:16,800 --> 00:08:23,190
thing every time freshness is about case

00:08:19,890 --> 00:08:25,560
control it's about being able to tell

00:08:23,190 --> 00:08:27,840
the web browser hey you don't even need

00:08:25,560 --> 00:08:29,940
to ask me you can use this image that

00:08:27,840 --> 00:08:31,440
you've got in your case for the next six

00:08:29,940 --> 00:08:33,240
hundred years it's never going to change

00:08:31,440 --> 00:08:35,160
or the next minute because this is a

00:08:33,240 --> 00:08:39,210
news website and we update it once a

00:08:35,160 --> 00:08:41,040
minute so if you get a good grasp on

00:08:39,210 --> 00:08:44,760
these two things in the web browser and

00:08:41,040 --> 00:08:46,170
how to control them your whole day goes

00:08:44,760 --> 00:08:47,700
a lot easier and actually everything

00:08:46,170 --> 00:08:49,920
else just falls into place a lot better

00:08:47,700 --> 00:08:51,540
you want to end up looking at something

00:08:49,920 --> 00:08:54,060
like this whenever a web browser hits

00:08:51,540 --> 00:08:57,560
your web page who knows what HTTP

00:08:54,060 --> 00:08:57,560
response three or four means

00:08:57,670 --> 00:09:02,180
cool actually not that many i was i was

00:08:59,959 --> 00:09:03,860
worried that i was going to be just

00:09:02,180 --> 00:09:05,089
talking to people who knew all this

00:09:03,860 --> 00:09:08,329
stuff back to front and I was quite

00:09:05,089 --> 00:09:11,930
nervous about that who knows what HTTP

00:09:08,329 --> 00:09:14,870
200 maids who knows what 404 means right

00:09:11,930 --> 00:09:16,430
every lucky I saw you great no that's

00:09:14,870 --> 00:09:17,509
fantastic so 44 is the one that you

00:09:16,430 --> 00:09:19,519
always see because you've gone to a

00:09:17,509 --> 00:09:22,339
thing that doesn't exist 200 means

00:09:19,519 --> 00:09:25,399
you've got what you asked for 30 for

00:09:22,339 --> 00:09:28,339
means you don't need it because you've

00:09:25,399 --> 00:09:31,939
already got it so what you're looking at

00:09:28,339 --> 00:09:33,709
here is a web page that is already

00:09:31,939 --> 00:09:36,160
stored in the case on a web browser and

00:09:33,709 --> 00:09:38,809
when it goes back to that page it's

00:09:36,160 --> 00:09:40,850
asking the server hey do I need to get a

00:09:38,809 --> 00:09:42,079
new version of this image or this page

00:09:40,850 --> 00:09:44,360
do I need to get a new version of this

00:09:42,079 --> 00:09:47,209
javascript file and the server is able

00:09:44,360 --> 00:09:49,430
to say no the one you've got is fine 30

00:09:47,209 --> 00:09:52,009
for means it's not been modified since

00:09:49,430 --> 00:09:54,709
last time you don't need to download it

00:09:52,009 --> 00:09:59,149
again so all of these requests are super

00:09:54,709 --> 00:10:00,410
fast because none of them are whole

00:09:59,149 --> 00:10:01,850
download so this page is pretty heavy

00:10:00,410 --> 00:10:03,769
it's got angular it's you know a

00:10:01,850 --> 00:10:07,999
megabyte or two but that download I

00:10:03,769 --> 00:10:10,399
can't read that what does that say 7.2

00:10:07,999 --> 00:10:12,079
kilobytes so once it's all pre-loaded

00:10:10,399 --> 00:10:16,879
you know the it's basically something

00:10:12,079 --> 00:10:21,410
that you can do at modem speeds now to

00:10:16,879 --> 00:10:23,480
do that you have to give the browser the

00:10:21,410 --> 00:10:26,749
means so that it can ask if the page has

00:10:23,480 --> 00:10:28,220
been updated and there's two I think

00:10:26,749 --> 00:10:31,339
only two but there's two that matter

00:10:28,220 --> 00:10:34,970
there's two fields in HTTP that you can

00:10:31,339 --> 00:10:38,679
control that have this information one

00:10:34,970 --> 00:10:43,220
of them is the last modified field in

00:10:38,679 --> 00:10:45,829
HTTP so with a site that's doing the

00:10:43,220 --> 00:10:48,110
right thing when you receive what did I

00:10:45,829 --> 00:10:50,329
pull I pulled a comic from injure for

00:10:48,110 --> 00:10:52,220
this um I can't even remember what it

00:10:50,329 --> 00:10:53,480
was actually was something to do with

00:10:52,220 --> 00:10:58,069
Loki because everything under is

00:10:53,480 --> 00:11:01,699
something to do with Loki that image was

00:10:58,069 --> 00:11:05,660
last modified on the server on Thursday

00:11:01,699 --> 00:11:07,399
the 31st of July 2014 so that last

00:11:05,660 --> 00:11:08,660
modified header in the response headers

00:11:07,399 --> 00:11:10,639
which is the bottom half

00:11:08,660 --> 00:11:13,750
is stored in the case along with the

00:11:10,639 --> 00:11:16,250
image sword in the web browsers cache

00:11:13,750 --> 00:11:20,329
next time you go to that page the web

00:11:16,250 --> 00:11:22,970
browser just has to ask it adds do I

00:11:20,329 --> 00:11:26,060
have a pointer I do so in the request

00:11:22,970 --> 00:11:28,490
the next time the browser can just say

00:11:26,060 --> 00:11:30,740
hey has this page been modified since

00:11:28,490 --> 00:11:32,720
this timestamp and the server can look

00:11:30,740 --> 00:11:34,579
at that and go no it hasn't I'll just

00:11:32,720 --> 00:11:37,639
return a 304 rather than sending them

00:11:34,579 --> 00:11:41,240
the whole 70 kilobyte or 700 kilobyte or

00:11:37,639 --> 00:11:43,910
seven megabyte image so three or four

00:11:41,240 --> 00:11:49,670
very tiny response really quick back and

00:11:43,910 --> 00:11:51,170
forth the trick is so that is something

00:11:49,670 --> 00:11:53,810
that you pretty much get for free with

00:11:51,170 --> 00:11:55,850
any static web server because every file

00:11:53,810 --> 00:11:57,410
on your web server every image has a

00:11:55,850 --> 00:12:00,199
time stamp on it has a last modified

00:11:57,410 --> 00:12:03,579
date or create a date or whatever it is

00:12:00,199 --> 00:12:06,740
that file systems do with files and

00:12:03,579 --> 00:12:09,680
apache and engine X and all of those

00:12:06,740 --> 00:12:11,329
just treat it right they use I think I

00:12:09,680 --> 00:12:15,170
don't think you have to configure that

00:12:11,329 --> 00:12:16,970
they just use that timestamp as the last

00:12:15,170 --> 00:12:18,529
modified and if you stuck a new HTML

00:12:16,970 --> 00:12:21,920
file and there are a new image there it

00:12:18,529 --> 00:12:23,420
would use it but for a dynamic web page

00:12:21,920 --> 00:12:25,130
you have to invent that timestamp

00:12:23,420 --> 00:12:26,689
yourself because of course you're

00:12:25,130 --> 00:12:30,050
generating the web page every time you

00:12:26,689 --> 00:12:32,089
hit your django site in Django you have

00:12:30,050 --> 00:12:36,529
a mechanism to do this which is

00:12:32,089 --> 00:12:39,350
implemented as a decorator that you

00:12:36,529 --> 00:12:41,029
would stick on your view now I'm not

00:12:39,350 --> 00:12:43,069
going to go into too much detail about

00:12:41,029 --> 00:12:45,230
how to do this i'm just going to explain

00:12:43,069 --> 00:12:48,259
that it is there because i kind of want

00:12:45,230 --> 00:12:50,000
you guys to rely on Katie Cunningham's

00:12:48,259 --> 00:12:53,050
advice from her keynote yesterday which

00:12:50,000 --> 00:12:55,250
is the documentation isn't scary and

00:12:53,050 --> 00:12:57,230
especially the Django documentation I

00:12:55,250 --> 00:12:59,360
say this every time I give a talk the

00:12:57,230 --> 00:13:00,769
Django documentation is the best piece

00:12:59,360 --> 00:13:03,410
of technical documentation on any

00:13:00,769 --> 00:13:06,589
project I've ever read and you can learn

00:13:03,410 --> 00:13:08,389
so much about Django and HTTP and HTML

00:13:06,589 --> 00:13:13,069
and web development practices in general

00:13:08,389 --> 00:13:14,360
just by reading it there are new Django

00:13:13,069 --> 00:13:19,990
people here who can give me cookies for

00:13:14,360 --> 00:13:19,990
that plug no Russell ran away

00:13:20,180 --> 00:13:27,810
but let's say you have your django model

00:13:24,870 --> 00:13:30,330
and it has a time stamp for example like

00:13:27,810 --> 00:13:33,390
an auto updated and what is it auto now

00:13:30,330 --> 00:13:36,690
time stamp which is updated every time

00:13:33,390 --> 00:13:38,010
you save the row that's the sort of

00:13:36,690 --> 00:13:40,080
thing that could make a really

00:13:38,010 --> 00:13:41,340
appropriate last modified time stamp for

00:13:40,080 --> 00:13:43,590
your view especially if you're talking

00:13:41,340 --> 00:13:46,620
in terms of standard Django stuff like a

00:13:43,590 --> 00:13:48,420
detail view where you're where you have

00:13:46,620 --> 00:13:50,490
a page that corresponds to an object and

00:13:48,420 --> 00:13:52,650
that object has a time stamp on it you

00:13:50,490 --> 00:13:55,230
can use that time stamp as a last

00:13:52,650 --> 00:13:58,020
modified value and that means that every

00:13:55,230 --> 00:14:00,000
time the person goes to that page they

00:13:58,020 --> 00:14:01,800
don't need to they'll be able to get the

00:14:00,000 --> 00:14:02,760
30 for Django will provide the three or

00:14:01,800 --> 00:14:07,530
four instead of making them down load

00:14:02,760 --> 00:14:09,210
the page again the time time stamps can

00:14:07,530 --> 00:14:12,650
also be really useful if you have like a

00:14:09,210 --> 00:14:12,650
page that updates at midnight every day

00:14:14,630 --> 00:14:22,170
you just need a date that you can use in

00:14:18,690 --> 00:14:24,540
my project I have a lot of API calls

00:14:22,170 --> 00:14:25,860
that provide lists of objects so you'll

00:14:24,540 --> 00:14:28,110
have something that has like a thousand

00:14:25,860 --> 00:14:29,400
objects in it and the last modified time

00:14:28,110 --> 00:14:32,310
stamp is always just the most recent

00:14:29,400 --> 00:14:34,200
time stamp on any of those objects and

00:14:32,310 --> 00:14:36,270
if you index that then it's also really

00:14:34,200 --> 00:14:40,640
fast or you can cash whatever the most

00:14:36,270 --> 00:14:43,020
recent value is but the key point is

00:14:40,640 --> 00:14:45,180
Django gives you a decorator that adds

00:14:43,020 --> 00:14:49,160
that header and then it will smartly

00:14:45,180 --> 00:14:53,220
return a 304 if the time stamp matches

00:14:49,160 --> 00:14:55,050
so that right there solves an awful lot

00:14:53,220 --> 00:14:56,940
of the problem and gives web browsers a

00:14:55,050 --> 00:14:58,260
cheat sheet that they can use to not

00:14:56,940 --> 00:15:01,680
have to download your site over and over

00:14:58,260 --> 00:15:03,660
again when it hits if time stamps are

00:15:01,680 --> 00:15:05,550
difficult for you for whatever reason

00:15:03,660 --> 00:15:07,080
and there could be a number of them like

00:15:05,550 --> 00:15:08,790
access control rules or anything else

00:15:07,080 --> 00:15:11,370
and you need a more flexible way of

00:15:08,790 --> 00:15:15,510
determining whether pages changed or not

00:15:11,370 --> 00:15:21,360
you have the other mechanism that HTTP

00:15:15,510 --> 00:15:23,040
provides which is an e-tag etags have

00:15:21,360 --> 00:15:24,330
the bonus that they're totally arbitrary

00:15:23,040 --> 00:15:26,550
they're nothing to do with the time

00:15:24,330 --> 00:15:31,410
stamp it's not if modified since it's

00:15:26,550 --> 00:15:33,459
just here is an opaque identifier and it

00:15:31,410 --> 00:15:37,569
means whatever you wanted it to mean

00:15:33,459 --> 00:15:40,360
you wrote it and the web browser will

00:15:37,569 --> 00:15:42,670
ask hey last time I came here I got

00:15:40,360 --> 00:15:45,639
given this e tag is this still the

00:15:42,670 --> 00:15:47,110
current one and if it's not then the web

00:15:45,639 --> 00:15:52,300
page will generate the whole response

00:15:47,110 --> 00:15:54,639
and return it and if it is then you'll

00:15:52,300 --> 00:15:55,720
get that three or four and the server

00:15:54,639 --> 00:15:58,079
doesn't have to do any work and the

00:15:55,720 --> 00:16:00,249
browser doesn't have to do any work and

00:15:58,079 --> 00:16:01,749
again the e-tag is completely arbitrary

00:16:00,249 --> 00:16:03,459
they can be whatever you want it to be

00:16:01,749 --> 00:16:05,649
which can be incredibly powerful and

00:16:03,459 --> 00:16:08,379
flexible and Django gives you some of

00:16:05,649 --> 00:16:12,399
this for completely for free you there's

00:16:08,379 --> 00:16:14,290
a setting use e tags and if you turn

00:16:12,399 --> 00:16:17,199
that on then every single thing that

00:16:14,290 --> 00:16:19,360
your django server outputs will have an

00:16:17,199 --> 00:16:20,829
e-tag embedded and that etag is

00:16:19,360 --> 00:16:24,879
calculated by generating the whole

00:16:20,829 --> 00:16:27,699
response and doing an md5 sum of the

00:16:24,879 --> 00:16:32,319
response to get a hexadecimal value and

00:16:27,699 --> 00:16:34,449
that value is yuri tag so the downside

00:16:32,319 --> 00:16:36,449
of using that is that it doesn't save

00:16:34,449 --> 00:16:39,459
your server any work at all because

00:16:36,449 --> 00:16:43,240
you'll go to a web page on your site and

00:16:39,459 --> 00:16:45,069
it will generate the whole response then

00:16:43,240 --> 00:16:46,779
it will calculate the md5 sum of it and

00:16:45,069 --> 00:16:49,869
that's when it will notice that the

00:16:46,779 --> 00:16:53,110
e-tag is the same as the one that the

00:16:49,869 --> 00:16:54,999
browser sent you and return the 304 so

00:16:53,110 --> 00:16:56,829
what you are saving is the download time

00:16:54,999 --> 00:16:58,119
it'll do the whole response and then

00:16:56,829 --> 00:17:02,170
it'll work out oh I don't need to send

00:16:58,119 --> 00:17:05,260
this response the guy already has it so

00:17:02,170 --> 00:17:08,260
if you want to be smarter than that and

00:17:05,260 --> 00:17:10,179
work out whether you need to bother

00:17:08,260 --> 00:17:12,010
generating the response before you can

00:17:10,179 --> 00:17:16,149
return to 304 you've got to write your

00:17:12,010 --> 00:17:19,000
own etag function and here's an example

00:17:16,149 --> 00:17:20,890
of a really really complicated one this

00:17:19,000 --> 00:17:22,539
is ripped straight out of my project and

00:17:20,890 --> 00:17:23,649
I'm being a bit coy about what my

00:17:22,539 --> 00:17:25,209
project does because it's not been

00:17:23,649 --> 00:17:26,380
released yet but it's a tool for schools

00:17:25,209 --> 00:17:27,850
and it's a tool for teachers so that's

00:17:26,380 --> 00:17:30,370
why you think see things like school ID

00:17:27,850 --> 00:17:31,450
in there and stuff like that and you

00:17:30,370 --> 00:17:33,760
don't need to worry about too much of

00:17:31,450 --> 00:17:36,460
this stuff all you need to really

00:17:33,760 --> 00:17:38,230
realize is in order to get my a tag for

00:17:36,460 --> 00:17:39,850
any page I'm grabbing a bunch of

00:17:38,230 --> 00:17:41,980
information that I think is important

00:17:39,850 --> 00:17:45,399
like what the query was what the path

00:17:41,980 --> 00:17:46,030
was the school ID of the person who

00:17:45,399 --> 00:17:47,080
happens to be

00:17:46,030 --> 00:17:48,910
logged in that's important in the

00:17:47,080 --> 00:17:51,640
context of my project I'm putting all

00:17:48,910 --> 00:17:55,090
this stuff into a dictionary and then I

00:17:51,640 --> 00:17:59,140
am some arbitrary things from other

00:17:55,090 --> 00:18:02,890
views details about their access control

00:17:59,140 --> 00:18:06,430
and then I am turning that dictionary

00:18:02,890 --> 00:18:09,070
into a string and then I am just md

00:18:06,430 --> 00:18:10,330
fiving that string now it looks like

00:18:09,070 --> 00:18:12,100
it's actually a fair amount of work and

00:18:10,330 --> 00:18:15,810
it actually is a couple database queries

00:18:12,100 --> 00:18:20,290
and it it's not the cheapest function

00:18:15,810 --> 00:18:21,520
but what it buys me is not having to

00:18:20,290 --> 00:18:23,530
generate the whole response and the

00:18:21,520 --> 00:18:31,780
whole response could be a very large API

00:18:23,530 --> 00:18:42,970
call Chris I actually don't and I

00:18:31,780 --> 00:18:44,950
probably ought to in but in sorry in

00:18:42,970 --> 00:18:46,930
practice it actually generates hits

00:18:44,950 --> 00:18:49,120
fairly often but it is a thing that I've

00:18:46,930 --> 00:18:50,200
been well I was I was grabbing this code

00:18:49,120 --> 00:18:51,450
out of it i was like i wonder if i'm

00:18:50,200 --> 00:18:55,060
about to show them a thing with a bug

00:18:51,450 --> 00:18:57,220
and i could well be and so the so the

00:18:55,060 --> 00:18:59,050
answer to that is that code might have a

00:18:57,220 --> 00:19:02,050
bug and i would do it by turning it into

00:18:59,050 --> 00:19:03,960
a set or an order decked either one

00:19:02,050 --> 00:19:08,110
would solve the problem perfectly

00:19:03,960 --> 00:19:10,000
ordered dates they don't if you use our

00:19:08,110 --> 00:19:11,440
epr to represent them or convert a

00:19:10,000 --> 00:19:13,330
string i think that they look a little

00:19:11,440 --> 00:19:14,950
different from a regular dictionary so i

00:19:13,330 --> 00:19:18,550
would need to change the way I'm string

00:19:14,950 --> 00:19:21,520
of fiying it but yes so this is this

00:19:18,550 --> 00:19:25,060
might not be yeah cool thank you this is

00:19:21,520 --> 00:19:28,180
crowd-sourced debugging but the point

00:19:25,060 --> 00:19:29,770
that I want to get across is the e-tag

00:19:28,180 --> 00:19:31,450
function is completely arbitrary and you

00:19:29,770 --> 00:19:33,490
can make it as complex as you want and

00:19:31,450 --> 00:19:38,200
it gives you a lot more flexibility than

00:19:33,490 --> 00:19:39,940
just a timestamp so with those to mekin

00:19:38,200 --> 00:19:42,280
and I haven't even shown you how to

00:19:39,940 --> 00:19:43,420
incorporate this into django but it's in

00:19:42,280 --> 00:19:45,070
the documentation there it's another

00:19:43,420 --> 00:19:47,290
decorator it's called etag it's really

00:19:45,070 --> 00:19:48,940
easy to find and if you're interested in

00:19:47,290 --> 00:19:50,890
this stuff read that documentation

00:19:48,940 --> 00:19:54,460
before you take my advice because its

00:19:50,890 --> 00:19:56,710
advice as better as you can see but it

00:19:54,460 --> 00:19:59,260
works and you end up not having to

00:19:56,710 --> 00:19:59,570
repeat work on the server when the web

00:19:59,260 --> 00:20:03,020
browser

00:19:59,570 --> 00:20:06,080
someone's like hitting refresh a lot so

00:20:03,020 --> 00:20:08,270
those are the two mechanisms that HTTP

00:20:06,080 --> 00:20:09,650
gives you for validation I'm not sure if

00:20:08,270 --> 00:20:11,240
there's more but those are the two that

00:20:09,650 --> 00:20:13,610
everybody uses and if you start digging

00:20:11,240 --> 00:20:15,020
down deeper you might get into things

00:20:13,610 --> 00:20:16,820
that a lot of web servers don't support

00:20:15,020 --> 00:20:18,950
or maybe proxies don't support that can

00:20:16,820 --> 00:20:20,990
end up happening etag supports pretty

00:20:18,950 --> 00:20:24,890
pervasive now but it wasn't even as

00:20:20,990 --> 00:20:27,350
recently as five years ago I think so

00:20:24,890 --> 00:20:30,830
the second topic in browser validation

00:20:27,350 --> 00:20:32,600
and browser caching control is actually

00:20:30,830 --> 00:20:36,290
telling the browser how you want it to

00:20:32,600 --> 00:20:38,930
catch something and that's defining a

00:20:36,290 --> 00:20:40,940
freshness value for it and that means

00:20:38,930 --> 00:20:42,950
how long is how long can I keep this

00:20:40,940 --> 00:20:45,050
thing in the case before I need to

00:20:42,950 --> 00:20:46,220
either revalidate it or throw it away or

00:20:45,050 --> 00:20:49,160
do I have to throw it away in the first

00:20:46,220 --> 00:20:52,130
place and assignment also covered this

00:20:49,160 --> 00:20:53,870
in his talk there's two mechanisms is

00:20:52,130 --> 00:20:56,840
the old-school way which is the expires

00:20:53,870 --> 00:21:00,110
header and that one Django doesn't

00:20:56,840 --> 00:21:03,220
actually give you a decorator to set

00:21:00,110 --> 00:21:05,360
this I don't think but Django's caching

00:21:03,220 --> 00:21:07,580
infrastructure when you Keysha page in

00:21:05,360 --> 00:21:13,520
Django which will cover a bit later does

00:21:07,580 --> 00:21:15,260
add this header the timestamp literally

00:21:13,520 --> 00:21:17,750
just means you can keep this in the case

00:21:15,260 --> 00:21:19,220
for until this time is up and then you

00:21:17,750 --> 00:21:22,340
need to check with me if I have a new

00:21:19,220 --> 00:21:24,020
one to give you and if it's a page that

00:21:22,340 --> 00:21:25,970
updates every day you could set it to

00:21:24,020 --> 00:21:27,230
midnight or if it's a page that you

00:21:25,970 --> 00:21:28,760
really just want them to check every

00:21:27,230 --> 00:21:30,880
hour to make sure it hasn't updated then

00:21:28,760 --> 00:21:33,640
you can set it to a minute later

00:21:30,880 --> 00:21:38,270
standard web browser configuration

00:21:33,640 --> 00:21:40,460
Apache for example has a lot of in mod

00:21:38,270 --> 00:21:43,250
expires it has a lot of pragmas which

00:21:40,460 --> 00:21:44,930
let you say if it's an image set the

00:21:43,250 --> 00:21:48,080
expires to a month after the access date

00:21:44,930 --> 00:21:49,820
if it's JavaScript set it to ten minutes

00:21:48,080 --> 00:21:53,030
you know it's pretty arbitrary like that

00:21:49,820 --> 00:21:57,170
and it doesn't cover a lot of

00:21:53,030 --> 00:22:01,190
circumstances and so in HTTP 1.1 which

00:21:57,170 --> 00:22:03,170
is hell it is HTTP 1.1 15 years it's old

00:22:01,190 --> 00:22:05,270
and people are still playing catch-up

00:22:03,170 --> 00:22:06,920
and trying to implement it meanwhile

00:22:05,270 --> 00:22:09,850
mark Nottingham again is trying to

00:22:06,920 --> 00:22:09,850
invent HTTP to

00:22:11,180 --> 00:22:15,710
the case-control header was implemented

00:22:12,920 --> 00:22:19,760
in HTTP 1.1 and it has a lot more

00:22:15,710 --> 00:22:23,750
control and it provides a lot more

00:22:19,760 --> 00:22:26,270
mechanisms for tuning how you want pages

00:22:23,750 --> 00:22:31,240
to be treated by Katia's either at the

00:22:26,270 --> 00:22:31,240
web browser and or the proxy end and

00:22:32,290 --> 00:22:36,320
django gives you a decorator that lets

00:22:34,460 --> 00:22:40,000
you arbitrarily set all of the

00:22:36,320 --> 00:22:43,550
individual options that this header

00:22:40,000 --> 00:22:45,620
provides you and I'm only glossing over

00:22:43,550 --> 00:22:49,330
it here but the key the key things that

00:22:45,620 --> 00:22:51,260
I want to point out our that max age is

00:22:49,330 --> 00:22:54,050
essentially the replacement for the

00:22:51,260 --> 00:22:55,580
expires value in the other header so it

00:22:54,050 --> 00:23:00,110
supersedes it according to the protocol

00:22:55,580 --> 00:23:02,690
and rather than being an arbitrary time

00:23:00,110 --> 00:23:05,780
stamp it is you know the amount of time

00:23:02,690 --> 00:23:08,720
since you first downloaded it so

00:23:05,780 --> 00:23:11,270
something set like this public in max

00:23:08,720 --> 00:23:13,370
age 60 means first of all if you've got

00:23:11,270 --> 00:23:15,530
a squid proxy in the way of your web

00:23:13,370 --> 00:23:18,920
browser and the server thats good proxy

00:23:15,530 --> 00:23:20,780
is totally invited to k on your

00:23:18,920 --> 00:23:23,000
behalf because it's a public resource

00:23:20,780 --> 00:23:24,380
you would you'd stick private there if

00:23:23,000 --> 00:23:26,810
it was like a logged-in thing that you

00:23:24,380 --> 00:23:30,950
didn't want the intermediary proxies to

00:23:26,810 --> 00:23:32,900
talk about and keep it for a minute and

00:23:30,950 --> 00:23:34,280
after a minute you can still keep it but

00:23:32,900 --> 00:23:36,980
you have to revalidate against the

00:23:34,280 --> 00:23:39,380
server and then there's a bunch of other

00:23:36,980 --> 00:23:40,640
options like notation no store and the

00:23:39,380 --> 00:23:42,020
distinction between those is a little

00:23:40,640 --> 00:23:43,910
weird and browsers implement them

00:23:42,020 --> 00:23:46,460
differently and that's where that I 10

00:23:43,910 --> 00:23:47,960
thing happened that I didn't just tell

00:23:46,460 --> 00:23:51,530
you guys about because it was

00:23:47,960 --> 00:23:54,350
embarrassing and so there's a lot of

00:23:51,530 --> 00:23:57,890
scope for tuning how a browser Katia's

00:23:54,350 --> 00:24:00,500
stuff here and I recommend you read it

00:23:57,890 --> 00:24:03,290
it's actually I can't believe I'm going

00:24:00,500 --> 00:24:05,210
to say this but the HTTP 1.1 spec on

00:24:03,290 --> 00:24:07,400
this stuff is actually kind of readable

00:24:05,210 --> 00:24:13,250
and and you should totally go and read

00:24:07,400 --> 00:24:14,900
it I I did all this stuff through trial

00:24:13,250 --> 00:24:16,730
and error and I have a colleague who

00:24:14,900 --> 00:24:18,920
just is like well it's just in the RFC

00:24:16,730 --> 00:24:20,210
because he's the sort of person who he

00:24:18,920 --> 00:24:21,890
was starting on the Django project with

00:24:20,210 --> 00:24:23,750
me he hadn't used Django before and he's

00:24:21,890 --> 00:24:25,580
like okay I'll read the documentation

00:24:23,750 --> 00:24:28,880
tonight and I'll be ready tomorrow and

00:24:25,580 --> 00:24:31,730
he reads RFC's and then he internalizes

00:24:28,880 --> 00:24:33,050
them and then I ask him things he's like

00:24:31,730 --> 00:24:35,630
why are you asking me it's in the RFC

00:24:33,050 --> 00:24:37,460
and he doesn't get that I'm asking him

00:24:35,630 --> 00:24:45,140
because it's in the RFC and he's read it

00:24:37,460 --> 00:24:48,200
and I don't want to so so the

00:24:45,140 --> 00:24:50,900
case-control header takes a little bit

00:24:48,200 --> 00:24:53,000
of trial and error just because web

00:24:50,900 --> 00:24:56,810
browsers and cases sometimes treat it a

00:24:53,000 --> 00:25:00,380
little bit differently so those are the

00:24:56,810 --> 00:25:02,180
those are the two header manipulating

00:25:00,380 --> 00:25:05,720
things that you can do to make life

00:25:02,180 --> 00:25:08,080
easier on your browser what I want to

00:25:05,720 --> 00:25:12,440
cover next is the best practice for

00:25:08,080 --> 00:25:13,970
static files and for probably websites

00:25:12,440 --> 00:25:15,410
in general in modern times if I can be

00:25:13,970 --> 00:25:21,710
opinionated which i can because i'm

00:25:15,410 --> 00:25:24,650
standing here every site has dynamic

00:25:21,710 --> 00:25:27,650
pages be they generated by Django or

00:25:24,650 --> 00:25:29,480
generated by an API or flask or whatever

00:25:27,650 --> 00:25:33,320
and then they have their static assets

00:25:29,480 --> 00:25:36,080
their JavaScript their images and all

00:25:33,320 --> 00:25:39,410
the usual style sheets and stuff that I

00:25:36,080 --> 00:25:42,470
can't write I'm not very good at style

00:25:39,410 --> 00:25:45,830
sheets and those things should be cached

00:25:42,470 --> 00:25:47,450
forever you should never ever expect a

00:25:45,830 --> 00:25:51,140
web browser or ask a web browser to

00:25:47,450 --> 00:25:54,710
download the same image twice and what's

00:25:51,140 --> 00:25:58,160
cool is this has become fairly standard

00:25:54,710 --> 00:26:00,430
practice for big websites but it was

00:25:58,160 --> 00:26:02,540
always kind of inaccessible for for

00:26:00,430 --> 00:26:04,220
developers because actually making this

00:26:02,540 --> 00:26:06,380
happen took a lot of clever coding until

00:26:04,220 --> 00:26:11,330
someone came and did it for you which is

00:26:06,380 --> 00:26:15,020
awesome but static assets should have an

00:26:11,330 --> 00:26:16,610
expiry time on them of like 30 years if

00:26:15,020 --> 00:26:19,490
you have an image embedded on your web

00:26:16,610 --> 00:26:20,900
page once it's downloaded it should stay

00:26:19,490 --> 00:26:23,240
in the browser cache forever and it

00:26:20,900 --> 00:26:26,480
should never ever have to even ask if

00:26:23,240 --> 00:26:27,680
it's been updated and if that sounds

00:26:26,480 --> 00:26:29,600
weird because of course you're changing

00:26:27,680 --> 00:26:30,710
your JavaScript all the time and you're

00:26:29,600 --> 00:26:31,910
changing your style sheets all the time

00:26:30,710 --> 00:26:33,800
during development you don't want to

00:26:31,910 --> 00:26:36,440
have to dot them to cash every time you

00:26:33,800 --> 00:26:38,410
certainly can't ask your customers to

00:26:36,440 --> 00:26:41,000
reset the

00:26:38,410 --> 00:26:44,180
you fix all that by changing the URL

00:26:41,000 --> 00:26:46,520
every time the file changes and that

00:26:44,180 --> 00:26:50,000
also immediate like when you first see

00:26:46,520 --> 00:26:54,050
it it sounds hard and it would be if

00:26:50,000 --> 00:26:58,850
someone hadn't done it for you so Django

00:26:54,050 --> 00:27:02,330
now as of 1.3 or 1.4 or a couple

00:26:58,850 --> 00:27:04,370
releases ago now has a static files app

00:27:02,330 --> 00:27:06,740
which is where you generally handle your

00:27:04,370 --> 00:27:08,360
static files from and it has a couple

00:27:06,740 --> 00:27:12,080
back-end storage mechanisms and one of

00:27:08,360 --> 00:27:13,730
them is the cached case static files

00:27:12,080 --> 00:27:15,110
storage it almost looks like Java when

00:27:13,730 --> 00:27:18,680
you string all the words together like

00:27:15,110 --> 00:27:20,900
that and what it does is when you run

00:27:18,680 --> 00:27:22,100
collect static and it copies all your

00:27:20,900 --> 00:27:24,410
static files into the place where you're

00:27:22,100 --> 00:27:28,040
hosting them from it renames them at the

00:27:24,410 --> 00:27:32,180
same time and it renames them to the

00:27:28,040 --> 00:27:33,890
file and then a chunk of mush right here

00:27:32,180 --> 00:27:39,830
which is actually the hash of the file

00:27:33,890 --> 00:27:41,600
sorry and it also if you're using the

00:27:39,830 --> 00:27:42,920
right template tag in your templates all

00:27:41,600 --> 00:27:47,930
of your links are automatically updated

00:27:42,920 --> 00:27:50,450
to that string as well and because of

00:27:47,930 --> 00:27:55,040
that you can have something in whatever

00:27:50,450 --> 00:27:59,030
piece of web server is hosting these

00:27:55,040 --> 00:28:04,340
files that looks something like this

00:27:59,030 --> 00:28:05,870
where if your static file has a thing

00:28:04,340 --> 00:28:07,760
that looks like an indie 5 some in it

00:28:05,870 --> 00:28:09,640
which happens to be how long 12 digits

00:28:07,760 --> 00:28:13,730
long that's how long the Django one

00:28:09,640 --> 00:28:16,910
truncates the md5 to set the expiry date

00:28:13,730 --> 00:28:18,560
to Max and Max is actually I think it's

00:28:16,910 --> 00:28:20,300
like the the max of the big integer it's

00:28:18,560 --> 00:28:22,670
like 20 36 in any of them people aren't

00:28:20,300 --> 00:28:28,730
going to have to refresh their cage very

00:28:22,670 --> 00:28:30,800
often and that's where a web page after

00:28:28,730 --> 00:28:33,620
the first hit suddenly becomes just

00:28:30,800 --> 00:28:36,740
insanely fast because even if you hit

00:28:33,620 --> 00:28:38,300
refresh it'll Italy it'll only

00:28:36,740 --> 00:28:39,830
revalidate it won't have to download all

00:28:38,300 --> 00:28:41,930
the assets again and as if people keep

00:28:39,830 --> 00:28:44,000
coming back to your site they never have

00:28:41,930 --> 00:28:45,980
to download the same file twice and if

00:28:44,000 --> 00:28:49,610
you change that file it'll change names

00:28:45,980 --> 00:28:50,179
and they will get the next thing right

00:28:49,610 --> 00:28:51,860
away so

00:28:50,179 --> 00:28:55,190
that's the best of all possible worlds

00:28:51,860 --> 00:28:57,289
where if an update does happen they'll

00:28:55,190 --> 00:29:00,919
see it right away but if the nup date

00:28:57,289 --> 00:29:05,059
hasn't happened it will never need to

00:29:00,919 --> 00:29:06,470
even ask the server because the HTML

00:29:05,059 --> 00:29:08,840
that you've generated in your django

00:29:06,470 --> 00:29:10,220
view covers all of that because the file

00:29:08,840 --> 00:29:15,440
names that it's pointing to are going to

00:29:10,220 --> 00:29:17,029
change every time your code changes also

00:29:15,440 --> 00:29:18,320
for bonus credit if you are already

00:29:17,029 --> 00:29:19,789
doing this and you want to move forward

00:29:18,320 --> 00:29:21,559
there's a third party library code

00:29:19,789 --> 00:29:23,240
Django pipeline which does oldest and

00:29:21,559 --> 00:29:26,799
more it does a lot of cool stuff like

00:29:23,240 --> 00:29:28,700
minification of your JavaScript and

00:29:26,799 --> 00:29:31,399
compressing all your style sheets down

00:29:28,700 --> 00:29:35,720
into one style sheet so if you're if you

00:29:31,399 --> 00:29:37,399
if you a perfectionist you you want to

00:29:35,720 --> 00:29:41,210
have a look at that as well because it's

00:29:37,399 --> 00:29:42,619
awesome so this is the biggest part of

00:29:41,210 --> 00:29:45,639
my talk which is good because we're

00:29:42,619 --> 00:29:50,330
running low on time already but um that

00:29:45,639 --> 00:29:52,159
if you if you follow those rules you can

00:29:50,330 --> 00:29:53,840
end up making your site really really

00:29:52,159 --> 00:29:57,110
use fast and approachable and

00:29:53,840 --> 00:29:58,669
cooperative with browser Katia's without

00:29:57,110 --> 00:30:00,889
a lot of work that stuff kind of comes

00:29:58,669 --> 00:30:03,759
for free Django pipeline is a bit harder

00:30:00,889 --> 00:30:08,090
last modified is kind of easy etags

00:30:03,759 --> 00:30:11,179
require a little bit of planning but

00:30:08,090 --> 00:30:18,049
none of that is hard work and the win is

00:30:11,179 --> 00:30:21,379
really quite profound so on to the

00:30:18,049 --> 00:30:23,480
second circle of our quest down the

00:30:21,379 --> 00:30:27,470
inferno web caching proxies and I'm

00:30:23,480 --> 00:30:29,899
really just glossing over this because I

00:30:27,470 --> 00:30:31,190
haven't had to deal too much with the

00:30:29,899 --> 00:30:32,779
intricacies of having to deal with

00:30:31,190 --> 00:30:36,529
someone's third party cash which is

00:30:32,779 --> 00:30:40,360
messing around with your stuff except

00:30:36,529 --> 00:30:42,619
for telstraclear are just being real a

00:30:40,360 --> 00:30:46,639
word I shouldn't say cuz of code of

00:30:42,619 --> 00:30:49,129
conduct on my home internet connection

00:30:46,639 --> 00:30:51,279
so we won't go there but transparent

00:30:49,129 --> 00:30:53,389
proxies are not fun to have to deal with

00:30:51,279 --> 00:30:57,230
mark Nottingham again this was in his

00:30:53,389 --> 00:30:58,609
casing tutorial the key point is you

00:30:57,230 --> 00:31:02,320
have to live with them anyway they're

00:30:58,609 --> 00:31:02,320
gonna be there you can't get around them

00:31:02,480 --> 00:31:05,179
that's not entirely true you don't

00:31:03,770 --> 00:31:07,040
necessarily have to worry about them too

00:31:05,179 --> 00:31:08,240
much if your site is pure SSL and that's

00:31:07,040 --> 00:31:10,250
one of the reasons why I haven't had to

00:31:08,240 --> 00:31:12,200
worry about them too much my sites

00:31:10,250 --> 00:31:14,840
entirely behind SSL and that usually

00:31:12,200 --> 00:31:17,270
means that the third-party proxies in

00:31:14,840 --> 00:31:18,650
the middle just pass it through unless

00:31:17,270 --> 00:31:20,419
submit in the middle proxy which

00:31:18,650 --> 00:31:24,440
actually does happen in a lot of

00:31:20,419 --> 00:31:25,940
organizations the bad news is in in the

00:31:24,440 --> 00:31:28,340
old days you didn't have a lot you could

00:31:25,940 --> 00:31:29,809
do to control their behavior and the

00:31:28,340 --> 00:31:33,410
good news is that the case control

00:31:29,809 --> 00:31:35,600
header is offering you some options for

00:31:33,410 --> 00:31:37,880
tuning the behavior of these cases for

00:31:35,600 --> 00:31:39,110
example this is the side that you saw

00:31:37,880 --> 00:31:44,360
before but it's got a couple extra

00:31:39,110 --> 00:31:46,210
options on it private might the I have

00:31:44,360 --> 00:31:49,130
to say might in all of these places the

00:31:46,210 --> 00:31:51,830
the proxy might cooperate with the

00:31:49,130 --> 00:31:54,559
private head or a not k the proxy

00:31:51,830 --> 00:31:55,520
might obey the proxy revalidate it kind

00:31:54,559 --> 00:31:59,360
of depends on the version of the

00:31:55,520 --> 00:32:01,730
software they are using but part of the

00:31:59,360 --> 00:32:03,950
point that I want to make about these

00:32:01,730 --> 00:32:06,290
sorts of proxies is that your work at

00:32:03,950 --> 00:32:07,970
the first level pays off all that work

00:32:06,290 --> 00:32:09,770
you did about making validation quick

00:32:07,970 --> 00:32:12,200
and easy so that your site can just

00:32:09,770 --> 00:32:14,660
return 30 fours and all that work of

00:32:12,200 --> 00:32:18,980
just working out on a per view or out

00:32:14,660 --> 00:32:20,540
for your whole site how long you can

00:32:18,980 --> 00:32:22,610
afford for something to be cached for on

00:32:20,540 --> 00:32:24,260
the browser that stuff usually really

00:32:22,610 --> 00:32:25,640
helps when dealing with these proxies as

00:32:24,260 --> 00:32:27,740
well and you'll find that they're a lot

00:32:25,640 --> 00:32:29,480
less painful when you're providing them

00:32:27,740 --> 00:32:32,140
what they need to know so that they

00:32:29,480 --> 00:32:35,480
don't have to guess and get it wrong and

00:32:32,140 --> 00:32:39,559
start delivering the wrong fav icon when

00:32:35,480 --> 00:32:43,370
you've updated your branding chapter for

00:32:39,559 --> 00:32:46,549
reverse proxies so I just went from

00:32:43,370 --> 00:32:48,820
circles two chapters and I if you're

00:32:46,549 --> 00:32:51,440
wondering about my Roman numeral there

00:32:48,820 --> 00:32:53,809
it's kind of part of the point that I'm

00:32:51,440 --> 00:32:54,740
it's not a bug honest it's part of the

00:32:53,809 --> 00:32:55,850
point that I'm trying to make about how

00:32:54,740 --> 00:32:57,559
people don't really follow the stick

00:32:55,850 --> 00:33:00,290
when they're implementing this stuff

00:32:57,559 --> 00:33:03,559
terribly well or writing the slides for

00:33:00,290 --> 00:33:05,720
their talks so reverse proxies are the

00:33:03,559 --> 00:33:09,410
proxies you do control and they sit in

00:33:05,720 --> 00:33:12,530
front of your web server or as was it

00:33:09,410 --> 00:33:13,880
Simon let's talk yep was talking about

00:33:12,530 --> 00:33:15,830
his was actually just behind the engine

00:33:13,880 --> 00:33:18,019
next layer but if

00:33:15,830 --> 00:33:20,330
like the best computer science ii

00:33:18,019 --> 00:33:24,860
solution ever which is if your server is

00:33:20,330 --> 00:33:26,659
slow i had another one and that's pretty

00:33:24,860 --> 00:33:28,460
much all there is to it if your if your

00:33:26,659 --> 00:33:30,200
website is slow and you want it to be

00:33:28,460 --> 00:33:33,740
faster put a faster one in front and

00:33:30,200 --> 00:33:35,510
maybe magic will happen and actually

00:33:33,740 --> 00:33:36,890
magic can happen I'm going to gloss over

00:33:35,510 --> 00:33:38,500
this because Simon actually covered it

00:33:36,890 --> 00:33:42,880
really well in the previous talk but

00:33:38,500 --> 00:33:47,120
varnish has kind of become the standard

00:33:42,880 --> 00:33:50,539
reverse proxy for open source projects

00:33:47,120 --> 00:33:53,480
or a lot of projects in general the

00:33:50,539 --> 00:33:57,320
varnish is a caching HTTP reverse proxy

00:33:53,480 --> 00:33:58,940
and it is really really fast it's fast

00:33:57,320 --> 00:34:00,950
enough that the documentation says it's

00:33:58,940 --> 00:34:03,500
usually bound by the speed of the

00:34:00,950 --> 00:34:07,669
network so if you have 70,000

00:34:03,500 --> 00:34:09,649
connections to your server it's probably

00:34:07,669 --> 00:34:11,599
just going to be fine with it you'll

00:34:09,649 --> 00:34:12,679
just you'll just blow your your modem

00:34:11,599 --> 00:34:16,820
out of the water or your switch or

00:34:12,679 --> 00:34:18,800
whatever varnish in its most basic

00:34:16,820 --> 00:34:20,899
configuration will forward requests to

00:34:18,800 --> 00:34:23,599
the server you specify and obey the case

00:34:20,899 --> 00:34:26,389
control directives in the response as

00:34:23,599 --> 00:34:28,159
Simon said its default configuration is

00:34:26,389 --> 00:34:29,990
fairly conservative and it won't

00:34:28,159 --> 00:34:33,470
necessarily catch a lot of stuff off the

00:34:29,990 --> 00:34:35,089
off the bat but as he also demonstrated

00:34:33,470 --> 00:34:38,000
and I'm not going to demonstrate here

00:34:35,089 --> 00:34:39,830
but i'm just warning you varnish is a

00:34:38,000 --> 00:34:41,510
programming language and a technology

00:34:39,830 --> 00:34:44,720
stack in its own right so it's a whole

00:34:41,510 --> 00:34:46,220
nother set of things that you need to

00:34:44,720 --> 00:34:49,389
learn if you're going to play with it

00:34:46,220 --> 00:34:55,960
and it's a lot of fun to learn no sorry

00:34:49,389 --> 00:34:58,190
it's the opposite it's the other thing I

00:34:55,960 --> 00:35:00,050
don't think he actually mentioned it but

00:34:58,190 --> 00:35:02,180
the VCL the varnish configuration

00:35:00,050 --> 00:35:04,970
language it is a language that is

00:35:02,180 --> 00:35:08,060
literally compiled into C and then

00:35:04,970 --> 00:35:10,280
compiled into machine code and stuck in

00:35:08,060 --> 00:35:12,470
the middle of varnish it's not a it's

00:35:10,280 --> 00:35:15,080
not a set of switches it's not a set of

00:35:12,470 --> 00:35:17,060
configuration options you write the code

00:35:15,080 --> 00:35:19,760
to it's like a mad lib for a web server

00:35:17,060 --> 00:35:21,500
you you were it it's a it's a fast web

00:35:19,760 --> 00:35:23,240
server with gaps in it and you write in

00:35:21,500 --> 00:35:27,170
the code that you want to happen in

00:35:23,240 --> 00:35:28,550
those gaps varnish and I have a bit of a

00:35:27,170 --> 00:35:28,860
love/hate relationship because I run it

00:35:28,550 --> 00:35:31,260
on

00:35:28,860 --> 00:35:32,880
sites and I accidentally got into the

00:35:31,260 --> 00:35:35,850
habit of drinking jägermeister while

00:35:32,880 --> 00:35:37,560
debugging varnish and the first time it

00:35:35,850 --> 00:35:39,510
was just coincidence and the second time

00:35:37,560 --> 00:35:46,170
was enemy action where I was my own

00:35:39,510 --> 00:35:47,760
enemy but it is amazingly cool and fast

00:35:46,170 --> 00:35:51,900
and you can do really cool stuff once

00:35:47,760 --> 00:35:53,280
you get the hang of it this is the

00:35:51,900 --> 00:35:54,660
solution for first of all you have to

00:35:53,280 --> 00:35:56,460
control your own technology stack if

00:35:54,660 --> 00:35:58,050
your if you don't have the ability to

00:35:56,460 --> 00:36:02,460
deploy varnish then obviously this isn't

00:35:58,050 --> 00:36:04,770
even an option but if you do and if

00:36:02,460 --> 00:36:08,520
you're in a situation where you have a

00:36:04,770 --> 00:36:12,030
page that renders slow and it doesn't

00:36:08,520 --> 00:36:13,770
really matter and you can cash it for a

00:36:12,030 --> 00:36:16,800
while like like stale data isn't

00:36:13,770 --> 00:36:18,410
critical varnish is something that you

00:36:16,800 --> 00:36:22,320
can put in front of it and it just

00:36:18,410 --> 00:36:24,690
solves so many problems like he

00:36:22,320 --> 00:36:27,900
mentioned just the 60-second cash for

00:36:24,690 --> 00:36:30,630
that for that hacker news you know spike

00:36:27,900 --> 00:36:34,170
of 10,000 hits something like that can

00:36:30,630 --> 00:36:35,730
really save your day you can do anything

00:36:34,170 --> 00:36:37,260
with varnish because like i said it's

00:36:35,730 --> 00:36:42,090
actually a programming language in its

00:36:37,260 --> 00:36:43,800
own right that was just some stuff that

00:36:42,090 --> 00:36:45,180
i came off the top of my head we have

00:36:43,800 --> 00:36:47,610
projects at catalyst that you can talk

00:36:45,180 --> 00:36:49,890
to me or andrew bogut later which do

00:36:47,610 --> 00:36:52,500
some truly insane things with varnish

00:36:49,890 --> 00:36:54,180
like use it to load balance amongst

00:36:52,500 --> 00:36:56,960
multiple backends which then generate

00:36:54,180 --> 00:36:59,550
the response and feed that response into

00:36:56,960 --> 00:37:01,920
RabbitMQ which transmits that response

00:36:59,550 --> 00:37:03,660
to other caged areas in its own sort of

00:37:01,920 --> 00:37:08,190
impromptu CD and I don't even know this

00:37:03,660 --> 00:37:09,510
is not my some people that my company do

00:37:08,190 --> 00:37:14,730
strange things with technology and

00:37:09,510 --> 00:37:16,830
they're scary finally I want to talk

00:37:14,730 --> 00:37:18,810
about cashing in the application itself

00:37:16,830 --> 00:37:21,090
so where you're actually writing Django

00:37:18,810 --> 00:37:24,330
code encasing stuff to speed up your own

00:37:21,090 --> 00:37:27,210
responses Django in particular again has

00:37:24,330 --> 00:37:29,370
an amazingly cool cash framework and

00:37:27,210 --> 00:37:31,440
wrappers around a lot of this you know

00:37:29,370 --> 00:37:33,990
Redis or memcached or it has its own

00:37:31,440 --> 00:37:36,560
local memory storage and it has it

00:37:33,990 --> 00:37:40,140
presents the same API for all of them

00:37:36,560 --> 00:37:42,750
and it gives you immense power and

00:37:40,140 --> 00:37:44,250
control over well just

00:37:42,750 --> 00:37:49,700
a set of tools that are really

00:37:44,250 --> 00:37:52,410
straightforward and clean to use how you

00:37:49,700 --> 00:37:54,180
how you do casing within your app really

00:37:52,410 --> 00:37:55,410
does vary depending on the framework

00:37:54,180 --> 00:37:57,450
you're using i am just sticking to

00:37:55,410 --> 00:38:01,620
django but these principles do apply to

00:37:57,450 --> 00:38:05,190
everything django has a quick switch

00:38:01,620 --> 00:38:06,810
which will case your entire site you

00:38:05,190 --> 00:38:09,660
said a few global variables you add a

00:38:06,810 --> 00:38:11,280
little a few pieces of middleware and as

00:38:09,660 --> 00:38:13,110
long as your site's largely public this

00:38:11,280 --> 00:38:14,580
is a really good win this is basically

00:38:13,110 --> 00:38:17,160
giving you varnish without varnish

00:38:14,580 --> 00:38:20,940
because it's basically if the page has

00:38:17,160 --> 00:38:22,800
been generated keep it and then don't

00:38:20,940 --> 00:38:27,000
bother generating it again for however

00:38:22,800 --> 00:38:28,500
long you set that to and just instantly

00:38:27,000 --> 00:38:33,450
tuned down the amount of work that your

00:38:28,500 --> 00:38:36,080
server ever has to do k tioning on a per

00:38:33,450 --> 00:38:39,180
view basis is just is almost as easy

00:38:36,080 --> 00:38:42,930
again you know add a decorator to your

00:38:39,180 --> 00:38:44,040
to your to your view and it will catch

00:38:42,930 --> 00:38:46,080
it for the appropriate time that'll set

00:38:44,040 --> 00:38:47,460
the appropriate expiry header so that

00:38:46,080 --> 00:38:48,750
the web browser also knows that if you

00:38:47,460 --> 00:38:51,930
hit refresh right away you'd still get

00:38:48,750 --> 00:38:53,610
the same page so it's not only cashing

00:38:51,930 --> 00:38:54,720
it at the back end but also providing

00:38:53,610 --> 00:38:59,910
the web browser that means 2k

00:38:54,720 --> 00:39:02,940
further down the stack I'm demonstrating

00:38:59,910 --> 00:39:05,880
how you use the decorator here and how

00:39:02,940 --> 00:39:09,120
you have to do it here I really do like

00:39:05,880 --> 00:39:10,680
class-based views in Django but this is

00:39:09,120 --> 00:39:12,030
not one of the reasons why when you're

00:39:10,680 --> 00:39:14,610
trying to add decorators to class-based

00:39:12,030 --> 00:39:16,200
views it's a nightmare but the

00:39:14,610 --> 00:39:18,480
documentation makes it reasonably

00:39:16,200 --> 00:39:20,070
obvious what you have to do it certainly

00:39:18,480 --> 00:39:25,620
doesn't explain why you have to jump

00:39:20,070 --> 00:39:26,760
through those hoops bonus trick what if

00:39:25,620 --> 00:39:33,990
you want to have your cake and eat it

00:39:26,760 --> 00:39:36,120
too on your actual web pages as well as

00:39:33,990 --> 00:39:38,070
your static files where you want it to

00:39:36,120 --> 00:39:41,700
be cached so that it's really quick to

00:39:38,070 --> 00:39:45,510
generate but if the data changes you

00:39:41,700 --> 00:39:49,770
want to instantly be able to refresh

00:39:45,510 --> 00:39:51,690
people's web browsers so that they're

00:39:49,770 --> 00:39:54,650
not stuck there so they're not stuck

00:39:51,690 --> 00:39:54,650
looking at a stale page

00:39:55,440 --> 00:39:58,750
this was this was a trick that I

00:39:57,430 --> 00:40:00,130
invented and i'm going to show you the

00:39:58,750 --> 00:40:03,010
code really briefly because chris will

00:40:00,130 --> 00:40:07,090
find another bug in it and I'd rather he

00:40:03,010 --> 00:40:08,800
did that outside of the talk um but

00:40:07,090 --> 00:40:11,740
here's the here's the thing that I

00:40:08,800 --> 00:40:14,020
invented well that I came up with and

00:40:11,740 --> 00:40:16,720
then stumbled around and and it fell

00:40:14,020 --> 00:40:18,610
over a bunch but if you're etag is

00:40:16,720 --> 00:40:22,240
clever enough you can use it as your

00:40:18,610 --> 00:40:24,340
tation key and memcached so i added a

00:40:22,240 --> 00:40:27,970
lot of stuff to my a tag as you saw in

00:40:24,340 --> 00:40:30,880
that code earlier and then that see that

00:40:27,970 --> 00:40:35,050
hash that I get out of it I can actually

00:40:30,880 --> 00:40:39,070
use as a key in my back end cash so that

00:40:35,050 --> 00:40:43,450
if I can generate my etag so a browser

00:40:39,070 --> 00:40:46,570
will ask me for an e-tag and i will go

00:40:43,450 --> 00:40:48,390
okay that e-tag is already in the case i

00:40:46,570 --> 00:40:52,380
can pull it out and return it right away

00:40:48,390 --> 00:40:56,170
or if the browser has never seen that

00:40:52,380 --> 00:40:57,850
etag so sorry if the browser has never

00:40:56,170 --> 00:40:59,500
been to that page and you go there it

00:40:57,850 --> 00:41:01,660
doesn't ask does the C tag match because

00:40:59,500 --> 00:41:03,460
it's never seen it but the first thing

00:41:01,660 --> 00:41:05,140
that my code does is it generates what

00:41:03,460 --> 00:41:07,120
the e-tag would be for that page and

00:41:05,140 --> 00:41:08,530
then rather than generating the response

00:41:07,120 --> 00:41:12,310
to that page which again might be a one

00:41:08,530 --> 00:41:15,610
megabyte API call it checks the case

00:41:12,310 --> 00:41:17,800
first and it can pull that out that's

00:41:15,610 --> 00:41:20,740
turned out to be quite a useful little

00:41:17,800 --> 00:41:21,850
trick and it's probably a perfect

00:41:20,740 --> 00:41:24,970
example of premature optimization

00:41:21,850 --> 00:41:27,040
because I spent quite a while fiddling

00:41:24,970 --> 00:41:29,170
with this system before I actually had

00:41:27,040 --> 00:41:31,090
any reason to believe that the scale of

00:41:29,170 --> 00:41:33,340
this project would even need something

00:41:31,090 --> 00:41:34,690
that ridiculous but I was having fun and

00:41:33,340 --> 00:41:37,840
no one was checking up on what I was

00:41:34,690 --> 00:41:41,290
doing at the time so I i had i had kind

00:41:37,840 --> 00:41:42,790
of fun with it and this is not really

00:41:41,290 --> 00:41:46,600
useful to show but that's the code

00:41:42,790 --> 00:41:52,620
that's basically doing it and it's not

00:41:46,600 --> 00:41:54,640
doing much more complicated than oh my

00:41:52,620 --> 00:41:59,380
laptop is starting to freak out but

00:41:54,640 --> 00:42:03,940
that's okay because i'm almost done do I

00:41:59,380 --> 00:42:06,700
still have a mouse pointer I do let's

00:42:03,940 --> 00:42:07,970
see when you're eat AG function get the

00:42:06,700 --> 00:42:10,730
key out of it

00:42:07,970 --> 00:42:12,170
try and get that out of the case if you

00:42:10,730 --> 00:42:14,000
didn't get it out of the case then

00:42:12,170 --> 00:42:16,790
generate the response to get indication

00:42:14,000 --> 00:42:18,980
return it otherwise just return it so

00:42:16,790 --> 00:42:20,510
it's the same casing it's the same sort

00:42:18,980 --> 00:42:21,710
of check vacation return it or generated

00:42:20,510 --> 00:42:23,510
and return it that you see everywhere

00:42:21,710 --> 00:42:25,369
else including the Django documentation

00:42:23,510 --> 00:42:28,400
for the low level occasionally I which

00:42:25,369 --> 00:42:29,869
I've run out of time to cover and it's

00:42:28,400 --> 00:42:31,430
just doing it using the e-tag which is a

00:42:29,869 --> 00:42:34,250
really useful sort of doubling of

00:42:31,430 --> 00:42:35,510
principles finally the bonus bonus trick

00:42:34,250 --> 00:42:40,030
which is something that I really wanted

00:42:35,510 --> 00:42:43,030
to write in time for this talk which is

00:42:40,030 --> 00:42:45,170
turning your views into celery tasks and

00:42:43,030 --> 00:42:46,730
returning the old result of the view

00:42:45,170 --> 00:42:48,560
while asynchronously running the view

00:42:46,730 --> 00:42:49,700
and storing it in your cage and I

00:42:48,560 --> 00:42:51,200
thought that would be a really cool way

00:42:49,700 --> 00:42:52,790
to finish off the talk but I ran out of

00:42:51,200 --> 00:42:54,680
time to write it I'm running out of time

00:42:52,790 --> 00:42:56,000
to talk about it and in the time that I

00:42:54,680 --> 00:42:57,940
had actually thought that this is a

00:42:56,000 --> 00:43:01,609
great idea someone else went and did it

00:42:57,940 --> 00:43:03,790
and I haven't tried this yet but I'm

00:43:01,609 --> 00:43:07,400
going to because it looks awesome and

00:43:03,790 --> 00:43:09,380
it's just d couple your views entirely

00:43:07,400 --> 00:43:11,540
from having to be run synchronously and

00:43:09,380 --> 00:43:13,369
I think that that's probably about as

00:43:11,540 --> 00:43:16,700
brain melty as you would want to get in

00:43:13,369 --> 00:43:19,310
this space but um I hope this works

00:43:16,700 --> 00:43:22,960
because it's something that I've wanted

00:43:19,310 --> 00:43:25,400
to do for ages so we're finishing up the

00:43:22,960 --> 00:43:28,099
lessons learned is we need more words

00:43:25,400 --> 00:43:29,500
vacationing because caching is I've SAT

00:43:28,099 --> 00:43:32,599
here and I've said the word casing like

00:43:29,500 --> 00:43:36,050
800 times in the last 45 minutes and we

00:43:32,599 --> 00:43:37,430
need better words and the biggest win is

00:43:36,050 --> 00:43:38,510
just giving the web browser the right

00:43:37,430 --> 00:43:41,270
information because that information

00:43:38,510 --> 00:43:44,510
also propagates up through the proxies

00:43:41,270 --> 00:43:45,589
on the way and at Katia's in it and it

00:43:44,510 --> 00:43:47,420
goes through you know your front end

00:43:45,589 --> 00:43:49,400
proxy will make it will make varnish

00:43:47,420 --> 00:43:53,540
easier to configure if you decide to use

00:43:49,400 --> 00:43:55,220
varnish after that what you decide to

00:43:53,540 --> 00:43:57,560
cache really does depend on where the

00:43:55,220 --> 00:43:59,000
slow points are so this this stuff like

00:43:57,560 --> 00:44:01,310
the validation and the case freshness

00:43:59,000 --> 00:44:03,200
stuff you should always do this probably

00:44:01,310 --> 00:44:06,140
just because it's good HTTP and it's

00:44:03,200 --> 00:44:09,220
good protocol but then after that what

00:44:06,140 --> 00:44:11,240
you case really does depend on what you

00:44:09,220 --> 00:44:12,380
wear the slow points are and at that

00:44:11,240 --> 00:44:16,339
point maybe you actually need to start

00:44:12,380 --> 00:44:17,780
measuring measurement is useful and it

00:44:16,339 --> 00:44:19,970
can be a real pain in the butt to debug

00:44:17,780 --> 00:44:21,109
but it's totally worth it and I'm going

00:44:19,970 --> 00:44:21,349
to put these slides online because

00:44:21,109 --> 00:44:23,329
there's all

00:44:21,349 --> 00:44:25,460
lot of rotating reading material that

00:44:23,329 --> 00:44:27,710
covers all the same stuff you can get

00:44:25,460 --> 00:44:28,940
really good at it quite easily just by

00:44:27,710 --> 00:44:32,119
learning a little bit more than you

00:44:28,940 --> 00:44:35,210
already do and i wish i had known these

00:44:32,119 --> 00:44:36,410
tutorials were here when i was beating

00:44:35,210 --> 00:44:41,349
my head against a brick wall trying to

00:44:36,410 --> 00:44:41,349
learn this stuff thank you so much

00:44:52,770 --> 00:44:54,830

YouTube URL: https://www.youtube.com/watch?v=bIWnQ3F1eLA


