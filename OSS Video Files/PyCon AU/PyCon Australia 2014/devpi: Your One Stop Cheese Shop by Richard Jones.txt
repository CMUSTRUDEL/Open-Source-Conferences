Title: devpi: Your One Stop Cheese Shop by Richard Jones
Publication date: 2014-08-11
Playlist: PyCon Australia 2014
Description: 
	Modern Python developers depend on a large number of 3rd party packages. This in turn introduces a problem: how to manage those packages for rapid, reliable deployment in a world where the central repository - PyPi (the Cheese Shop) - is out of their control. Additionally, private packages may be developed which need to seamlessly be integrated into the deployment systems.

In this talk I will present devpi, a PyPI (Cheese Shop) server and packaging/testing/release tool. I will cover its reasons for existing, its many capabilities and configuration for some common scenarios.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:05,840 --> 00:00:10,469
welcome thanks for coming so this is the

00:00:09,150 --> 00:00:12,600
last talk in the breakout room we've got

00:00:10,469 --> 00:00:14,280
the lightning talks after this but your

00:00:12,600 --> 00:00:16,350
last speaker is Richard Jones is the

00:00:14,280 --> 00:00:19,350
creator of and is still responsible for

00:00:16,350 --> 00:00:20,880
pi PI the Python package index and the

00:00:19,350 --> 00:00:24,859
talk today with your dev PI your one

00:00:20,880 --> 00:00:24,859
stop cheese shop please welcome Richard

00:00:29,359 --> 00:00:35,520
thanks something I need to clear up

00:00:32,009 --> 00:00:39,260
right a start a talk is that the Python

00:00:35,520 --> 00:00:41,790
package index has had a number of names

00:00:39,260 --> 00:00:44,010
right and start people were referring to

00:00:41,790 --> 00:00:47,790
it as pi PI and the problem with that

00:00:44,010 --> 00:00:50,220
was that we were sprinting at one of the

00:00:47,790 --> 00:00:52,110
us PI cons and people would come up to

00:00:50,220 --> 00:00:56,130
the table and say is this the pi PI

00:00:52,110 --> 00:00:57,660
sprint and we'd say yeah and they'd sit

00:00:56,130 --> 00:00:59,730
down and we talk about you know what we

00:00:57,660 --> 00:01:04,769
were doing and then they'd get up and go

00:00:59,730 --> 00:01:06,689
to the other pi PI sprint so we Barry

00:01:04,769 --> 00:01:08,939
Warsaw who was there he's he's better at

00:01:06,689 --> 00:01:10,640
naming things and I am he decided that

00:01:08,939 --> 00:01:12,299
we should call it the cheese shop

00:01:10,640 --> 00:01:16,799
unfortunately that wasn't very popular

00:01:12,299 --> 00:01:18,719
with people wearing suits so it's now

00:01:16,799 --> 00:01:21,420
again called the Python package index or

00:01:18,719 --> 00:01:23,490
pi pi which just rolls off the tongue I

00:01:21,420 --> 00:01:25,229
will probably refer to it mostly as the

00:01:23,490 --> 00:01:26,429
cheese shop during this talk and it's

00:01:25,229 --> 00:01:27,289
just so we're clear that's what I'm

00:01:26,429 --> 00:01:30,090
talking about

00:01:27,289 --> 00:01:33,719
okay so dev PI is what I'm here to talk

00:01:30,090 --> 00:01:37,499
about though so what is there PI at its

00:01:33,719 --> 00:01:39,899
most basic it is a proxy mirror for the

00:01:37,499 --> 00:01:43,289
cheese shop it can act as a local self

00:01:39,899 --> 00:01:45,899
updating caching mirror that works with

00:01:43,289 --> 00:01:47,609
pip to install packages and it can

00:01:45,899 --> 00:01:52,049
basically isolate you from network

00:01:47,609 --> 00:01:55,499
issues getting to the cheese shop it can

00:01:52,049 --> 00:01:58,170
also act as a private index itself

00:01:55,499 --> 00:02:02,279
allowing you to upload packages to it to

00:01:58,170 --> 00:02:05,039
be then installed using people a bit of

00:02:02,279 --> 00:02:09,780
kind of history about how we got to

00:02:05,039 --> 00:02:11,459
needing something like dev PI so in 2003

00:02:09,780 --> 00:02:14,670
the cheese shop was created as a place

00:02:11,459 --> 00:02:17,970
to collect links to Python packages or

00:02:14,670 --> 00:02:18,540
Python software it didn't stall or any

00:02:17,970 --> 00:02:20,489
packages

00:02:18,540 --> 00:02:25,140
itself that was added later on a couple

00:02:20,489 --> 00:02:27,180
of years later so and then about seven

00:02:25,140 --> 00:02:28,980
or eight years later CI or continuous

00:02:27,180 --> 00:02:31,829
integration systems became very popular

00:02:28,980 --> 00:02:33,780
and the cheese shop was hit really hard

00:02:31,829 --> 00:02:35,909
as suddenly all these people were

00:02:33,780 --> 00:02:38,060
installing all these Jenkins errs and

00:02:35,909 --> 00:02:41,430
and all those sorts of things and

00:02:38,060 --> 00:02:44,420
pointing directly at this one server to

00:02:41,430 --> 00:02:47,430
obtain all of their installation files

00:02:44,420 --> 00:02:50,219
so we did a few things to try and cope

00:02:47,430 --> 00:02:51,900
with that we added mirroring and an

00:02:50,219 --> 00:02:55,290
actual mirroring protocol and set up

00:02:51,900 --> 00:02:57,689
some mirrors they didn't work so well we

00:02:55,290 --> 00:03:00,180
cleaned up the way that package is

00:02:57,689 --> 00:03:02,010
discovered so that we preferred to find

00:03:00,180 --> 00:03:03,959
packages on the cheese shop itself

00:03:02,010 --> 00:03:06,750
packages that were stored externally

00:03:03,959 --> 00:03:11,040
we're very much a special case now we

00:03:06,750 --> 00:03:14,220
added a CDN using fastly to cache the

00:03:11,040 --> 00:03:17,189
packages in geographically diverse

00:03:14,220 --> 00:03:19,470
locations so the for example in

00:03:17,189 --> 00:03:21,419
Australia we use a case that's up in

00:03:19,470 --> 00:03:24,449
Singapore which means we get much faster

00:03:21,419 --> 00:03:27,629
response times to installation to

00:03:24,449 --> 00:03:31,769
receiving those files we added wheels to

00:03:27,629 --> 00:03:34,979
also speed up installation for mac and

00:03:31,769 --> 00:03:36,540
Windows users Linux users sorry all of

00:03:34,979 --> 00:03:39,389
those things accelerated the

00:03:36,540 --> 00:03:41,430
installation process so installing

00:03:39,389 --> 00:03:44,280
things today using the cheese shop is

00:03:41,430 --> 00:03:48,599
significantly faster than it was about

00:03:44,280 --> 00:03:51,720
three years ago we're doing some more

00:03:48,599 --> 00:03:55,019
work we're looking to clean up that

00:03:51,720 --> 00:03:57,449
externally hosted packages thing even

00:03:55,019 --> 00:04:00,449
more so at the moment to install a

00:03:57,449 --> 00:04:03,689
package that's not stored on the cheese

00:04:00,449 --> 00:04:05,579
shop we do HTML scraping to find links

00:04:03,689 --> 00:04:08,729
to things that might be packaged files

00:04:05,579 --> 00:04:13,409
stored on some random web server there's

00:04:08,729 --> 00:04:15,419
an explicit external index proposal

00:04:13,409 --> 00:04:17,430
that's up for review at the moment that

00:04:15,419 --> 00:04:19,049
we're working on cleaning up so that

00:04:17,430 --> 00:04:21,150
people who want to store their packages

00:04:19,049 --> 00:04:23,340
outside of the cheese shop can will

00:04:21,150 --> 00:04:26,039
actually set up and kind of a mini

00:04:23,340 --> 00:04:29,159
cheese shop of their own we're also

00:04:26,039 --> 00:04:31,050
looking at cleaning up metadata and

00:04:29,159 --> 00:04:32,399
and that's that's an ongoing effort as

00:04:31,050 --> 00:04:34,770
well but it's not as very much as

00:04:32,399 --> 00:04:36,689
related as what we're doing today what

00:04:34,770 --> 00:04:38,909
I'm talking about today we're also

00:04:36,689 --> 00:04:41,789
redeveloping the cheese shop codebase

00:04:38,909 --> 00:04:43,699
itself but it's intended to be

00:04:41,789 --> 00:04:46,800
completely compatible with the current

00:04:43,699 --> 00:04:48,239
API compatible with the current service

00:04:46,800 --> 00:04:49,800
so again that won't really affect what

00:04:48,239 --> 00:04:52,019
we're talking about today the internet

00:04:49,800 --> 00:04:56,969
though that's still an issue we can't

00:04:52,019 --> 00:04:59,119
really do much about that so there's a

00:04:56,969 --> 00:05:01,589
whole lot of these caching proxy

00:04:59,119 --> 00:05:04,459
mirroring things out there because

00:05:01,589 --> 00:05:07,979
basically they're pretty easy to write

00:05:04,459 --> 00:05:10,679
and I actually did a survey of them

00:05:07,979 --> 00:05:13,019
about a year ago and wrote a blog post

00:05:10,679 --> 00:05:14,969
so that you can kind of see the list of

00:05:13,019 --> 00:05:17,519
them in the middle they're the mostly

00:05:14,969 --> 00:05:21,349
bit crap they're not maintained

00:05:17,519 --> 00:05:23,939
generally they're not tested generally

00:05:21,349 --> 00:05:25,829
and I was so unimpressed with the

00:05:23,939 --> 00:05:28,559
general a lot of them that I ended up

00:05:25,829 --> 00:05:30,779
writing my own and it was crap in its

00:05:28,559 --> 00:05:33,240
own special ways so I was just adding to

00:05:30,779 --> 00:05:35,789
the mess and then a little while later I

00:05:33,240 --> 00:05:39,509
discovered dev pie and so you know don't

00:05:35,789 --> 00:05:40,589
use mine it's terrible the thing about

00:05:39,509 --> 00:05:43,139
death pie has been around for a little

00:05:40,589 --> 00:05:46,079
while but it initially had a dependency

00:05:43,139 --> 00:05:48,479
on Redis for storing its local data and

00:05:46,079 --> 00:05:51,959
the author got rid of that so it's much

00:05:48,479 --> 00:05:55,409
easy to install now so compared to all

00:05:51,959 --> 00:05:58,289
those solutions the nice thing about dev

00:05:55,409 --> 00:06:01,339
pie is its principled in the way it's

00:05:58,289 --> 00:06:05,669
been developed in the way it operates

00:06:01,339 --> 00:06:09,029
most importantly it wraps the existing

00:06:05,669 --> 00:06:12,329
tool base so things like pip for

00:06:09,029 --> 00:06:14,219
installing things the packaging foe

00:06:12,329 --> 00:06:17,219
module that is used by a bunch of things

00:06:14,219 --> 00:06:18,809
dist utils it kind of wraps all of that

00:06:17,219 --> 00:06:22,800
and works with them rather than

00:06:18,809 --> 00:06:25,529
developing something wholly new things

00:06:22,800 --> 00:06:27,689
like Python set up top PI upload works

00:06:25,529 --> 00:06:29,819
when you're pointing at a dev PI

00:06:27,689 --> 00:06:31,139
instance and pip install works when

00:06:29,819 --> 00:06:35,699
you're pointing at Adelphi instance you

00:06:31,139 --> 00:06:37,439
have to do anything they just work it

00:06:35,699 --> 00:06:41,189
also provides functionality out of the

00:06:37,439 --> 00:06:42,780
box to do new ways of managing your your

00:06:41,189 --> 00:06:45,240
packages

00:06:42,780 --> 00:06:47,160
and controlling releases of packages and

00:06:45,240 --> 00:06:51,630
it's extensible so you can add new

00:06:47,160 --> 00:06:53,550
functionality where it's missing testing

00:06:51,630 --> 00:06:56,400
as I said has been neglected by most of

00:06:53,550 --> 00:06:58,830
the solutions in this space but dev PI

00:06:56,400 --> 00:07:03,110
just the server alone has got hundreds

00:06:58,830 --> 00:07:05,550
of tests unit tests and when it was

00:07:03,110 --> 00:07:09,540
there was a new release done about a

00:07:05,550 --> 00:07:12,390
year ago and it was then stress tested

00:07:09,540 --> 00:07:14,490
against the entire content of the cheese

00:07:12,390 --> 00:07:16,680
shop some thirty five forty thousand

00:07:14,490 --> 00:07:19,200
packages to make sure it worked with all

00:07:16,680 --> 00:07:20,850
of the packages that were on there and

00:07:19,200 --> 00:07:23,160
I'm pretty sure none of the other proxy

00:07:20,850 --> 00:07:28,230
mirrors can conclude that they work with

00:07:23,160 --> 00:07:29,910
all of those and finally it's really

00:07:28,230 --> 00:07:32,820
simple to use and I'll be showing you

00:07:29,910 --> 00:07:35,430
the vertical simple it is to use it in a

00:07:32,820 --> 00:07:37,440
moment but more importantly it's

00:07:35,430 --> 00:07:40,770
supported you can actually get paid

00:07:37,440 --> 00:07:42,630
support for it if you want but the

00:07:40,770 --> 00:07:45,690
author is very careful to make sure that

00:07:42,630 --> 00:07:47,910
migration between versions is kind of

00:07:45,690 --> 00:07:51,180
automatic it has an export and import

00:07:47,910 --> 00:07:52,260
facility built into itself and when you

00:07:51,180 --> 00:07:54,510
get a new release you can just say

00:07:52,260 --> 00:07:57,840
update yourself and it does this virtual

00:07:54,510 --> 00:07:59,220
end export import dance thing to just

00:07:57,840 --> 00:08:05,700
migrate you over to the new version

00:07:59,220 --> 00:08:08,040
which is really quite nice so a pipe a

00:08:05,700 --> 00:08:11,580
caching proxy what do we mean by all of

00:08:08,040 --> 00:08:15,540
that the general idea is just to isolate

00:08:11,580 --> 00:08:19,979
you from the network or the instability

00:08:15,540 --> 00:08:22,590
of the the cheese shop itself dev PI its

00:08:19,979 --> 00:08:25,650
core principle core idea is to be

00:08:22,590 --> 00:08:28,370
efficient and accurate and without

00:08:25,650 --> 00:08:33,409
needing a complete mirror of the entire

00:08:28,370 --> 00:08:36,360
something like 75 gigabytes of packages

00:08:33,409 --> 00:08:37,950
having said that all of the files that

00:08:36,360 --> 00:08:40,560
are available on the cheese shop are

00:08:37,950 --> 00:08:43,860
visible in a dev PI index so when you

00:08:40,560 --> 00:08:46,200
view the index you'll see everything but

00:08:43,860 --> 00:08:48,360
the file content and the metadata about

00:08:46,200 --> 00:08:52,410
those things isn't fetched until you

00:08:48,360 --> 00:08:55,260
attempt an installation and then it goes

00:08:52,410 --> 00:08:56,610
off automatically retrieves the files it

00:08:55,260 --> 00:08:59,130
works with the

00:08:56,610 --> 00:09:01,470
changelog api that's built into the

00:08:59,130 --> 00:09:03,570
cheese shop so it's not just a straight

00:09:01,470 --> 00:09:05,910
web service there's there's sorry not a

00:09:03,570 --> 00:09:08,070
straight file web server there's a

00:09:05,910 --> 00:09:10,350
changelog api in there that the dev PI

00:09:08,070 --> 00:09:12,360
server can use to intelligently figure

00:09:10,350 --> 00:09:16,920
out what packages have changed since

00:09:12,360 --> 00:09:19,290
some some timestamp the nice thing about

00:09:16,920 --> 00:09:22,079
dev PI as opposed to most of the other

00:09:19,290 --> 00:09:24,480
proxy mirrors is that all those files

00:09:22,079 --> 00:09:28,500
distort externally to the cheese shop

00:09:24,480 --> 00:09:30,269
are also cached so and there's not a

00:09:28,500 --> 00:09:33,240
huge number of those it's something like

00:09:30,269 --> 00:09:35,579
I think it's something like seven or

00:09:33,240 --> 00:09:38,070
eight percent of the packages that are

00:09:35,579 --> 00:09:41,550
indexed on the cheese shop are hosted

00:09:38,070 --> 00:09:45,600
externally but it means that as a user

00:09:41,550 --> 00:09:47,220
of the dev PI server you don't have to

00:09:45,600 --> 00:09:49,980
care where that file originally was

00:09:47,220 --> 00:09:51,600
hosted you can be offline and you can

00:09:49,980 --> 00:09:53,190
still install it regardless of where

00:09:51,600 --> 00:09:58,640
that file was really originally stored

00:09:53,190 --> 00:10:01,949
which is really nice yeah

00:09:58,640 --> 00:10:05,640
so the default installation of Deb PI

00:10:01,949 --> 00:10:09,630
includes a single index in it which is a

00:10:05,640 --> 00:10:13,949
mirror index and it's at the URL of

00:10:09,630 --> 00:10:15,839
route slash pi pi and it's automatically

00:10:13,949 --> 00:10:19,560
set up to proxy the main cheese shop

00:10:15,839 --> 00:10:21,300
server the nice thing about dev pide is

00:10:19,560 --> 00:10:23,760
that you can extend that as i've said

00:10:21,300 --> 00:10:26,100
before with multiple indexes which you

00:10:23,760 --> 00:10:28,500
can then upload things to these are

00:10:26,100 --> 00:10:32,040
called staging indexes and you can have

00:10:28,500 --> 00:10:34,940
multiple user spaces and access control

00:10:32,040 --> 00:10:38,490
over each of those user spaces to

00:10:34,940 --> 00:10:42,029
restrict certain you know teams or

00:10:38,490 --> 00:10:46,260
whatever - or users - who are able to

00:10:42,029 --> 00:10:48,390
access files - to those indexes download

00:10:46,260 --> 00:10:50,730
is open there's no controls over

00:10:48,390 --> 00:10:52,260
download yet because nobody has ever

00:10:50,730 --> 00:10:56,839
actually has actually said they would

00:10:52,260 --> 00:10:56,839
want it but it might be added

00:11:01,290 --> 00:11:06,360
so deaf player has built-in support for

00:11:03,930 --> 00:11:09,210
kind of moving releases around between

00:11:06,360 --> 00:11:11,400
indexes internally as well and I'll talk

00:11:09,210 --> 00:11:14,880
about how how that's useful in a little

00:11:11,400 --> 00:11:18,530
bit the nice thing about the indexes is

00:11:14,880 --> 00:11:23,010
they can inherit from each other so as

00:11:18,530 --> 00:11:26,250
as a developer and using something using

00:11:23,010 --> 00:11:30,780
dev PI as both a mirror and as a as a

00:11:26,250 --> 00:11:32,610
private index this is the sort of the

00:11:30,780 --> 00:11:36,000
basic sort of configuration you might

00:11:32,610 --> 00:11:40,170
use where the cheese shop is is mirrored

00:11:36,000 --> 00:11:41,790
using the root pi PI mirror which is as

00:11:40,170 --> 00:11:43,950
I say automatically setup then you

00:11:41,790 --> 00:11:47,610
create your own staging index any

00:11:43,950 --> 00:11:49,890
installation operation like any pip

00:11:47,610 --> 00:11:54,060
install that you perform you pointed at

00:11:49,890 --> 00:11:55,800
the user dev URL of your dev PI and it

00:11:54,060 --> 00:11:58,230
inherits all other packages from the

00:11:55,800 --> 00:12:01,230
mirror so you only have to have the

00:11:58,230 --> 00:12:03,510
single index that you're pointing at you

00:12:01,230 --> 00:12:05,790
can upload new packages to that user dev

00:12:03,510 --> 00:12:07,980
which are your private packages or you

00:12:05,790 --> 00:12:10,560
could upload ones that perhaps override

00:12:07,980 --> 00:12:12,780
something that's on the public server

00:12:10,560 --> 00:12:21,420
say if you need a local patch or

00:12:12,780 --> 00:12:23,460
something yeah so it's fully compatible

00:12:21,420 --> 00:12:26,520
with all the current tools so you set up

00:12:23,460 --> 00:12:29,190
that PI upload even upload Doc's works

00:12:26,520 --> 00:12:31,920
and unlike the cheese shop which for

00:12:29,190 --> 00:12:34,200
some reason it doesn't have versioned

00:12:31,920 --> 00:12:37,410
upload of documentation Delphi has

00:12:34,200 --> 00:12:40,350
versioned upload of documentation which

00:12:37,410 --> 00:12:42,330
means that if you look at the the

00:12:40,350 --> 00:12:45,150
current posting on the cheese shop under

00:12:42,330 --> 00:12:46,890
Python hosted org where we put all of

00:12:45,150 --> 00:12:49,680
the documentation that people upload to

00:12:46,890 --> 00:12:54,120
their packages there's no version in the

00:12:49,680 --> 00:12:56,100
URL but in dev PI there is and again pip

00:12:54,120 --> 00:12:58,290
install works you don't have to do

00:12:56,100 --> 00:13:00,030
anything to your client-side tools to

00:12:58,290 --> 00:13:01,980
make this work except say use this

00:13:00,030 --> 00:13:03,450
different index and those those

00:13:01,980 --> 00:13:07,800
different index flags have been built

00:13:03,450 --> 00:13:10,650
into these tools forever the files that

00:13:07,800 --> 00:13:14,970
are served by dev PI include an md5 hash

00:13:10,650 --> 00:13:16,829
of the content in the in the URL so

00:13:14,970 --> 00:13:18,509
you can put if you wish to you can put

00:13:16,829 --> 00:13:21,360
an engine X or something on the front of

00:13:18,509 --> 00:13:22,529
this to serve the static content and it

00:13:21,360 --> 00:13:25,199
can do really nice things with

00:13:22,529 --> 00:13:31,410
high-performance serving of that content

00:13:25,199 --> 00:13:32,819
which is nice all right oh yes so one of

00:13:31,410 --> 00:13:36,899
the other nice things that's built into

00:13:32,819 --> 00:13:40,079
dev pie is the support for testing the

00:13:36,899 --> 00:13:42,060
packages that you've uploaded to it so

00:13:40,079 --> 00:13:43,259
if you're using tox and you should be

00:13:42,060 --> 00:13:45,029
using tops and I'll tell you about that

00:13:43,259 --> 00:13:47,610
why why why you should be using tox

00:13:45,029 --> 00:13:50,639
later but if you're using tox it can

00:13:47,610 --> 00:13:53,129
generate a test result file which can be

00:13:50,639 --> 00:13:54,959
uploaded and attached to the package in

00:13:53,129 --> 00:13:56,970
the dev PI instance and you can go and

00:13:54,959 --> 00:14:00,180
look at the packages to see that the

00:13:56,970 --> 00:14:01,860
test results in there and you can

00:14:00,180 --> 00:14:05,540
trigger that automatically to fire

00:14:01,860 --> 00:14:05,540
something with Jenkins or what have you

00:14:07,910 --> 00:14:11,670
and I'll come I'll come back to this

00:14:09,959 --> 00:14:14,370
concept and show you a kind of a

00:14:11,670 --> 00:14:16,529
workflow or a situation where that's

00:14:14,370 --> 00:14:22,230
useful but the nice thing about this is

00:14:16,529 --> 00:14:24,449
that it means that the file that you so

00:14:22,230 --> 00:14:26,569
you package up your software as a

00:14:24,449 --> 00:14:29,699
package you put it up in the index you

00:14:26,569 --> 00:14:33,360
you can run your tests against that file

00:14:29,699 --> 00:14:35,399
that that that packaged release and then

00:14:33,360 --> 00:14:39,059
that is the file that can then be pushed

00:14:35,399 --> 00:14:41,579
out to the world unmodified if those

00:14:39,059 --> 00:14:45,000
tests all pass and the index records

00:14:41,579 --> 00:14:50,490
that the the has a record of that

00:14:45,000 --> 00:14:52,129
testing it's nice the DEF PI client tool

00:14:50,490 --> 00:14:57,449
has a bunch of other stuff built into it

00:14:52,129 --> 00:14:58,980
to manage the dev PI server just useful

00:14:57,449 --> 00:15:02,459
stuff one of the nice things is that

00:14:58,980 --> 00:15:04,529
there's a straight JSON API that you can

00:15:02,459 --> 00:15:06,509
poke at to get information or change

00:15:04,529 --> 00:15:08,309
information if you if you decide that

00:15:06,509 --> 00:15:15,209
the other things don't go quite far

00:15:08,309 --> 00:15:17,939
enough so some use cases the most basic

00:15:15,209 --> 00:15:20,759
use case which is one that I use on my

00:15:17,939 --> 00:15:24,000
laptop is just have a straight dev PI

00:15:20,759 --> 00:15:26,870
install no modification that I can use

00:15:24,000 --> 00:15:30,440
to isolate myself from the

00:15:26,870 --> 00:15:33,740
Internet and and and and have much

00:15:30,440 --> 00:15:37,580
faster installations simple to install

00:15:33,740 --> 00:15:41,720
your pip install dev PI dev PI server

00:15:37,580 --> 00:15:43,970
has its own start/stop restart status

00:15:41,720 --> 00:15:45,440
all those things built into it so your

00:15:43,970 --> 00:15:47,990
def place start puts it in the

00:15:45,440 --> 00:15:49,610
background it's got some log files it

00:15:47,990 --> 00:15:51,710
stores its files away it tells you where

00:15:49,610 --> 00:15:55,130
it does all this stuff tells you the URL

00:15:51,710 --> 00:15:57,860
that it's serving on and then you run

00:15:55,130 --> 00:16:00,050
your pip install against that URL and it

00:15:57,860 --> 00:16:01,370
grab your grab the packages and then

00:16:00,050 --> 00:16:03,529
you're offline once you've done that

00:16:01,370 --> 00:16:05,960
install once you can pull the plug and

00:16:03,529 --> 00:16:08,480
you're offline you can optionally

00:16:05,960 --> 00:16:14,450
configure the URL in your pip config

00:16:08,480 --> 00:16:15,980
file and I'll come back to that so those

00:16:14,450 --> 00:16:17,600
I was talking about that concept of an

00:16:15,980 --> 00:16:19,339
inherited index where you're doing some

00:16:17,600 --> 00:16:21,100
development you want to push a you want

00:16:19,339 --> 00:16:23,450
to push out a file that you're releasing

00:16:21,100 --> 00:16:26,570
so you can put it up push it up to your

00:16:23,450 --> 00:16:30,440
dev index and you know run some tests

00:16:26,570 --> 00:16:33,380
against it you create an index using the

00:16:30,440 --> 00:16:35,690
dev PI can command line client and

00:16:33,380 --> 00:16:38,770
you're basically telling it with what

00:16:35,690 --> 00:16:42,620
the URL is that it should be created at

00:16:38,770 --> 00:16:44,420
so sorry creating a user and then each

00:16:42,620 --> 00:16:46,990
user can have multiple indexes so you

00:16:44,420 --> 00:16:49,430
could have a dev and a release index

00:16:46,990 --> 00:16:51,320
here I'm just creating the user is

00:16:49,430 --> 00:16:53,950
called user possibly I should have

00:16:51,320 --> 00:16:57,980
called it a different name but anyway

00:16:53,950 --> 00:17:03,650
dev PI user is the command and dev PI

00:16:57,980 --> 00:17:05,900
index create an index for that user oh

00:17:03,650 --> 00:17:08,390
and the basis equals root is saying

00:17:05,900 --> 00:17:15,290
inherit everything from that other index

00:17:08,390 --> 00:17:17,449
inside dev PI then to use that index you

00:17:15,290 --> 00:17:19,220
have to log in as the user you can

00:17:17,449 --> 00:17:22,040
optionally set a password here

00:17:19,220 --> 00:17:23,329
I didn't bother for the purposes of what

00:17:22,040 --> 00:17:27,319
I've captured here but you can set a

00:17:23,329 --> 00:17:29,600
password to protect that looking you can

00:17:27,319 --> 00:17:31,910
also there's experimental support for

00:17:29,600 --> 00:17:36,800
having SSL client certificates to have

00:17:31,910 --> 00:17:45,310
the authentication of that that that

00:17:36,800 --> 00:17:49,160
access right so then to release files

00:17:45,310 --> 00:17:52,580
using and work with that index we say

00:17:49,160 --> 00:17:56,120
dev PI use and that that index URL and

00:17:52,580 --> 00:17:58,730
that basically tells the dev Pike client

00:17:56,120 --> 00:18:03,650
that that's the index it should be using

00:17:58,730 --> 00:18:08,240
for subsequent commands you can work in

00:18:03,650 --> 00:18:11,120
an option in the use command here - -

00:18:08,240 --> 00:18:14,390
set config and that will go off and edit

00:18:11,120 --> 00:18:16,640
the four different places that our

00:18:14,390 --> 00:18:20,540
wonderful packaging tools use to

00:18:16,640 --> 00:18:23,480
configure the indexes that they use so

00:18:20,540 --> 00:18:25,690
you pip configure disk Lib configure I

00:18:23,480 --> 00:18:28,760
forget the other two setup tools I think

00:18:25,690 --> 00:18:30,650
and it's all those to switch the indeed

00:18:28,760 --> 00:18:33,440
there are default indexes over to using

00:18:30,650 --> 00:18:35,510
that index so this is what I do on my

00:18:33,440 --> 00:18:37,640
laptop typically after I've got dev PI

00:18:35,510 --> 00:18:40,850
up and running I say def PI use set

00:18:37,640 --> 00:18:43,160
config and the local URL and then all of

00:18:40,850 --> 00:18:44,960
my PIP commands all of my talks all of

00:18:43,160 --> 00:18:51,010
everything else will just start using

00:18:44,960 --> 00:18:53,480
the index on my laptop this implies that

00:18:51,010 --> 00:18:55,370
sorry this command implies that we've

00:18:53,480 --> 00:18:59,630
previously done the creation and and

00:18:55,370 --> 00:19:01,490
logged in and stuff yeah dev PI's got a

00:18:59,630 --> 00:19:04,970
bunch of convenience tools built into it

00:19:01,490 --> 00:19:09,800
like upload so what this is going to do

00:19:04,970 --> 00:19:13,190
is run effectively run set up top PI STS

00:19:09,800 --> 00:19:16,160
be distilled whatever and uploads the

00:19:13,190 --> 00:19:19,340
resulting files to your staging index

00:19:16,160 --> 00:19:21,380
your user dev index it also does a thing

00:19:19,340 --> 00:19:23,600
called a version control system clean

00:19:21,380 --> 00:19:25,810
build if you're inside a directory

00:19:23,600 --> 00:19:29,360
that's a git or a mercurial repository

00:19:25,810 --> 00:19:31,670
so exports that repository out to a

00:19:29,360 --> 00:19:33,710
temporary directory and does the build

00:19:31,670 --> 00:19:35,420
there so it reduces the chance that

00:19:33,710 --> 00:19:37,460
you've stuffed up and not checked in a

00:19:35,420 --> 00:19:38,990
file you've got some other files in

00:19:37,460 --> 00:19:40,670
there that shouldn't be released and

00:19:38,990 --> 00:19:44,840
that sort of stuff so the chances of

00:19:40,670 --> 00:19:46,970
pollution or accidents is reduced also

00:19:44,840 --> 00:19:48,740
def PI upload doesn't use dist utils to

00:19:46,970 --> 00:19:50,280
do the upload so it actually you can do

00:19:48,740 --> 00:19:55,650
SSL upload

00:19:50,280 --> 00:19:57,480
which is nice secure then the testing

00:19:55,650 --> 00:19:59,040
stuff is fired off simply by saying dev

00:19:57,480 --> 00:20:01,740
PI test and the name of the package that

00:19:59,040 --> 00:20:05,070
you just uploaded that will then

00:20:01,740 --> 00:20:06,840
download that file from the index unpack

00:20:05,070 --> 00:20:09,120
it in a temporary directory and run

00:20:06,840 --> 00:20:10,770
talks and so it'll just automatically

00:20:09,120 --> 00:20:12,480
looks at your look at your tox dot ini'

00:20:10,770 --> 00:20:14,730
file and run the tests that are

00:20:12,480 --> 00:20:16,980
appropriate in there when it's done it

00:20:14,730 --> 00:20:19,350
uploads the result JSON file back to the

00:20:16,980 --> 00:20:20,820
dev PI server and you can do that in

00:20:19,350 --> 00:20:22,920
multiple environments so you're testing

00:20:20,820 --> 00:20:24,990
across different operating systems or

00:20:22,920 --> 00:20:27,870
whatever and again you can fire this off

00:20:24,990 --> 00:20:30,450
automatically in response to the upload

00:20:27,870 --> 00:20:33,300
command you can fire off a Jenkins that

00:20:30,450 --> 00:20:35,430
does that automatically if you like and

00:20:33,300 --> 00:20:39,270
once you're happy that your testing is

00:20:35,430 --> 00:20:41,610
complete you say def PI push the package

00:20:39,270 --> 00:20:44,760
and the version that your you've just

00:20:41,610 --> 00:20:47,970
uploaded and you say we're pushing to an

00:20:44,760 --> 00:20:49,620
actual Python package index colon the

00:20:47,970 --> 00:20:51,120
name of the Python package index and

00:20:49,620 --> 00:20:56,130
that there's the name that comes out of

00:20:51,120 --> 00:20:58,980
your dot py your cheese shop I see your

00:20:56,130 --> 00:21:00,510
pipe IRC file that's the name that's

00:20:58,980 --> 00:21:02,670
actually in there that tells you it

00:21:00,510 --> 00:21:04,470
tells it the credentials to use for that

00:21:02,670 --> 00:21:05,880
term for that push and again that'll go

00:21:04,470 --> 00:21:08,370
over SSL because that's not using

00:21:05,880 --> 00:21:12,090
district tools either so it's kind of

00:21:08,370 --> 00:21:14,670
like what twine does to do the upload

00:21:12,090 --> 00:21:17,090
twines another tool for managing

00:21:14,670 --> 00:21:19,320
uploading of files to the cheese shop

00:21:17,090 --> 00:21:23,250
but this is integrate this is basically

00:21:19,320 --> 00:21:24,870
pulling the file from the dev by staging

00:21:23,250 --> 00:21:26,850
index the one that you've run your tests

00:21:24,870 --> 00:21:30,810
against and it's pushing that exact file

00:21:26,850 --> 00:21:32,700
out to the cheese shop so the actual

00:21:30,810 --> 00:21:35,010
thing being released is the thing that

00:21:32,700 --> 00:21:36,810
you've actually tested not some git

00:21:35,010 --> 00:21:38,730
checkout and of course we know how

00:21:36,810 --> 00:21:41,010
reliable get checkouts are being

00:21:38,730 --> 00:21:44,480
consistent so it's you know it's

00:21:41,010 --> 00:21:46,950
actually the thing that you've tested

00:21:44,480 --> 00:21:49,140
the final thing I want to talk about is

00:21:46,950 --> 00:21:52,320
a scenario I want to talk about is kind

00:21:49,140 --> 00:21:55,830
of a company deployment so I've talked

00:21:52,320 --> 00:21:56,750
about a kind of a silo you know cheese

00:21:55,830 --> 00:21:59,340
shop

00:21:56,750 --> 00:22:01,770
cheese shop mirror and then a staging

00:21:59,340 --> 00:22:03,040
index for a single user it's pretty

00:22:01,770 --> 00:22:04,780
simple too then how

00:22:03,040 --> 00:22:07,990
that branch out to have multiple

00:22:04,780 --> 00:22:10,300
projects sitting underneath you know and

00:22:07,990 --> 00:22:12,040
and this this is again this could be

00:22:10,300 --> 00:22:13,270
simplified I know that I'm sorry this

00:22:12,040 --> 00:22:14,410
could be a simplified version of

00:22:13,270 --> 00:22:17,500
whatever might go on in your

00:22:14,410 --> 00:22:18,940
organization but you can have your

00:22:17,500 --> 00:22:25,920
team's running in their own dev

00:22:18,940 --> 00:22:28,330
instances and so these two these two

00:22:25,920 --> 00:22:30,070
indexes at the bottom are the ones that

00:22:28,330 --> 00:22:32,140
teams push their files up to and do

00:22:30,070 --> 00:22:34,840
their testing against their the

00:22:32,140 --> 00:22:37,840
pre-release sort of staging areas and

00:22:34,840 --> 00:22:40,450
once those files are being tested and

00:22:37,840 --> 00:22:42,910
have been okayed they can be pushed up

00:22:40,450 --> 00:22:45,100
to the company release staging area and

00:22:42,910 --> 00:22:46,960
then that might just be where they stop

00:22:45,100 --> 00:22:48,370
that but that could be if it's a company

00:22:46,960 --> 00:22:50,110
thing they could be private packages

00:22:48,370 --> 00:22:52,000
that's where they stop but then if

00:22:50,110 --> 00:22:54,070
they're then released out into the wilds

00:22:52,000 --> 00:22:56,320
so for example if it's not OpenStack

00:22:54,070 --> 00:23:00,720
project then they can be pushed out to

00:22:56,320 --> 00:23:03,970
the to the wide world from there the

00:23:00,720 --> 00:23:07,300
indexes have a an attribute called

00:23:03,970 --> 00:23:09,640
volatility which means that the dev

00:23:07,300 --> 00:23:12,100
index is at the bottom there are marked

00:23:09,640 --> 00:23:14,800
volatile which basically means you can

00:23:12,100 --> 00:23:17,890
re upload a file of the same version to

00:23:14,800 --> 00:23:19,540
those indexes to replace content so if

00:23:17,890 --> 00:23:21,870
you've uploaded a file in the tests and

00:23:19,540 --> 00:23:25,120
pass you can still upload another file

00:23:21,870 --> 00:23:26,890
the release index would be marked not

00:23:25,120 --> 00:23:28,540
volatile so once a release has been

00:23:26,890 --> 00:23:30,940
pushed up there and other people are

00:23:28,540 --> 00:23:32,770
starting to use it it can't be replaced

00:23:30,940 --> 00:23:37,750
which is just like the cheese shop

00:23:32,770 --> 00:23:39,670
itself except for that loophole and to

00:23:37,750 --> 00:23:43,720
do that release instead of doing that

00:23:39,670 --> 00:23:45,220
push to pi PI colon pi PI you just

00:23:43,720 --> 00:23:47,140
released your company slash really it

00:23:45,220 --> 00:23:49,150
pushed a company slash release and then

00:23:47,140 --> 00:23:51,250
from there again you could do a release

00:23:49,150 --> 00:23:54,790
from there to buy PA :

00:23:51,250 --> 00:23:57,040
pi PI something that was added in the

00:23:54,790 --> 00:24:00,640
most recent version of dare Pi which was

00:23:57,040 --> 00:24:04,180
released last week is replication which

00:24:00,640 --> 00:24:06,220
is fairly simple to use replication of

00:24:04,180 --> 00:24:11,620
the device service so you run a single

00:24:06,220 --> 00:24:14,110
server and then the intent here is to

00:24:11,620 --> 00:24:16,420
provide high availability or faster

00:24:14,110 --> 00:24:17,559
installs through Geographic closeness or

00:24:16,420 --> 00:24:19,870
what

00:24:17,559 --> 00:24:23,520
and so you run your your server as usual

00:24:19,870 --> 00:24:26,470
but then you have replicant replicate

00:24:23,520 --> 00:24:28,900
replicated servers which just where

00:24:26,470 --> 00:24:31,539
they're in their configuration just

00:24:28,900 --> 00:24:33,640
points at that master server and then

00:24:31,539 --> 00:24:35,559
any changes in the master server are

00:24:33,640 --> 00:24:39,850
just replicated out to those those other

00:24:35,559 --> 00:24:43,320
servers you can also I sorry any changes

00:24:39,850 --> 00:24:46,870
made to those remotes those replicate

00:24:43,320 --> 00:24:49,539
replicas servers propagated back up to

00:24:46,870 --> 00:24:51,820
the master as well so teams can have

00:24:49,539 --> 00:24:54,010
their their servers sitting close to

00:24:51,820 --> 00:24:56,110
them if they're geographically separated

00:24:54,010 --> 00:24:58,390
and they push up to their local server

00:24:56,110 --> 00:25:00,700
those changes then pushed up to the to

00:24:58,390 --> 00:25:02,320
the master server as well and again this

00:25:00,700 --> 00:25:05,010
experimental support for SSL

00:25:02,320 --> 00:25:08,799
Certificates business for between or

00:25:05,010 --> 00:25:13,960
protecting these the replica replication

00:25:08,799 --> 00:25:15,549
protocol too many words I've got a few

00:25:13,960 --> 00:25:17,620
more minutes so I'm just going to

00:25:15,549 --> 00:25:20,049
quickly talk about some complementary

00:25:17,620 --> 00:25:23,409
tools that you'll you might run into in

00:25:20,049 --> 00:25:25,929
the dev PI space talks which is awesome

00:25:23,409 --> 00:25:27,490
and you should use it tox is goal is to

00:25:25,929 --> 00:25:30,190
automate and standardized testing in

00:25:27,490 --> 00:25:32,740
Python along with dev PI and to a lesser

00:25:30,190 --> 00:25:35,409
extent pilot test it's part of a larger

00:25:32,740 --> 00:25:37,059
vision of making packaging and testing

00:25:35,409 --> 00:25:47,970
and releasing Python software a lot

00:25:37,059 --> 00:25:47,970
easier that's a basic tox tiny hold on

00:25:48,270 --> 00:26:01,030
that's a basic tox dot ini' okay oh just

00:25:56,080 --> 00:26:03,610
give me a sec I somehow I managed to

00:26:01,030 --> 00:26:06,070
apply the blank master to some of these

00:26:03,610 --> 00:26:08,230
slides accidentally so this is a basic

00:26:06,070 --> 00:26:10,659
tox not any and what it's saying you put

00:26:08,230 --> 00:26:12,850
it in the top level of your of your

00:26:10,659 --> 00:26:16,419
project in the same level as you set up

00:26:12,850 --> 00:26:19,240
top PI and it basically says to run your

00:26:16,419 --> 00:26:22,299
unit tests in a Python 2.7 in a Python

00:26:19,240 --> 00:26:25,750
3.4 environment so that PI 2 7 PI 3 4

00:26:22,299 --> 00:26:27,429
are tokens that tox recognizes as being

00:26:25,750 --> 00:26:29,520
environments that it knows about that

00:26:27,429 --> 00:26:32,070
are built into tox

00:26:29,520 --> 00:26:34,590
and for each of those environments we

00:26:32,070 --> 00:26:36,720
install pi test the dependency is PI

00:26:34,590 --> 00:26:38,820
test you could have a dependency here of

00:26:36,720 --> 00:26:41,460
minus our requirements dot text if you

00:26:38,820 --> 00:26:44,490
have lots of dependencies or - are

00:26:41,460 --> 00:26:46,800
requirements - test dot text or

00:26:44,490 --> 00:26:48,240
something like that ok and it installs

00:26:46,800 --> 00:26:50,910
those things into a new virtual

00:26:48,240 --> 00:26:53,760
environment for that environment and

00:26:50,910 --> 00:26:55,710
then it runs the testing command which

00:26:53,760 --> 00:27:01,050
in this case is PI dot test you could

00:26:55,710 --> 00:27:03,360
use knows but don't so running tox so

00:27:01,050 --> 00:27:05,640
running tox will now create a virtual

00:27:03,360 --> 00:27:08,520
end for each of those environment spike

00:27:05,640 --> 00:27:10,200
Python 27 Python 3.4 and then run PI

00:27:08,520 --> 00:27:12,450
test in each of those and give it a

00:27:10,200 --> 00:27:16,710
report at the end of all of those runs

00:27:12,450 --> 00:27:20,910
and this is a very simple example I've

00:27:16,710 --> 00:27:22,770
I've used tox to fire off JavaScript

00:27:20,910 --> 00:27:26,600
testing and flake eight tests and

00:27:22,770 --> 00:27:26,600
coverage and all those things as well

00:27:27,350 --> 00:27:30,270
it's all these features it's got all

00:27:29,280 --> 00:27:32,360
these features I'm not going to go over

00:27:30,270 --> 00:27:35,610
these it's really cool you should use it

00:27:32,360 --> 00:27:38,580
but again the idea that it's simplifying

00:27:35,610 --> 00:27:40,380
testing making it easier to control your

00:27:38,580 --> 00:27:42,990
test runs making it easier to invoke

00:27:40,380 --> 00:27:45,690
your test runs and consistent so all you

00:27:42,990 --> 00:27:47,910
have to do is type tox and that's it and

00:27:45,690 --> 00:27:49,710
all of the installation around is

00:27:47,910 --> 00:27:52,110
managed all around your tests and

00:27:49,710 --> 00:27:54,240
isolation around your tests is managed

00:27:52,110 --> 00:27:56,880
for you if you're using dev PI tests

00:27:54,240 --> 00:27:59,910
it's creating a whole new thing for that

00:27:56,880 --> 00:28:02,360
package that you're testing for you all

00:27:59,910 --> 00:28:04,620
handled which i think is quite nice

00:28:02,360 --> 00:28:07,020
there's integration with Jenkins if you

00:28:04,620 --> 00:28:07,950
like that sort of thing so the other

00:28:07,020 --> 00:28:10,380
thing I want to Quinn can quickly

00:28:07,950 --> 00:28:12,480
mention is Bandersnatch which is what

00:28:10,380 --> 00:28:15,180
you should use if you really absolutely

00:28:12,480 --> 00:28:17,790
for some bizarre reason really need that

00:28:15,180 --> 00:28:20,760
70 gigabyte mirror of the cheese shop

00:28:17,790 --> 00:28:23,280
you don't get all the external packages

00:28:20,760 --> 00:28:25,320
because Bandersnatch doesn't do that

00:28:23,280 --> 00:28:27,900
thing the dev PI does by spidering and

00:28:25,320 --> 00:28:30,990
finding those packages just gives you

00:28:27,900 --> 00:28:32,370
the stuff that's hosted on there I'm yet

00:28:30,990 --> 00:28:34,500
to find somebody who can give me a

00:28:32,370 --> 00:28:37,950
really good reason why they want a 70

00:28:34,500 --> 00:28:40,470
gigabyte mirror ok you can you can you

00:28:37,950 --> 00:28:42,290
can mention it but so you can do this

00:28:40,470 --> 00:28:45,600
though ok it exists

00:28:42,290 --> 00:28:47,850
I'm genuinely interested so you can do

00:28:45,600 --> 00:28:49,530
it though this exists it uses a protocol

00:28:47,850 --> 00:28:53,100
to get you a proper mirror that's up to

00:28:49,530 --> 00:29:00,270
date and and low effort and all that

00:28:53,100 --> 00:29:02,790
jazz so yeah that's there this is a neat

00:29:00,270 --> 00:29:05,160
thing it takes a list of Python packages

00:29:02,790 --> 00:29:07,590
specified in like a requirements dot txt

00:29:05,160 --> 00:29:09,929
file and fills the DEF pay index with

00:29:07,590 --> 00:29:13,080
them so if you have a project and you

00:29:09,929 --> 00:29:16,740
don't want to run your something to your

00:29:13,080 --> 00:29:18,720
something artificial if you want to just

00:29:16,740 --> 00:29:20,520
quickly load up all those packages into

00:29:18,720 --> 00:29:23,760
your into your dev PI then you just run

00:29:20,520 --> 00:29:26,580
dear PI builder ok so that's all I'm

00:29:23,760 --> 00:29:30,510
going to say there's the URL to the dev

00:29:26,580 --> 00:29:34,429
PI stuffs and we've got oh a minute or

00:29:30,510 --> 00:29:34,429
two for questions I think

00:29:39,950 --> 00:29:46,960
or statements as they may be okay my

00:29:42,680 --> 00:29:48,920
need yeah yeah I am in theory planning

00:29:46,960 --> 00:29:53,210
yeah well that's different

00:29:48,920 --> 00:29:54,920
and Eid and I'm like this would be a

00:29:53,210 --> 00:29:57,020
very interesting set of people could

00:29:54,920 --> 00:29:58,850
cash locally but we could take part with

00:29:57,020 --> 00:30:00,140
us yeah we'd have to do something

00:29:58,850 --> 00:30:01,850
different as well though it's so that we

00:30:00,140 --> 00:30:03,950
can get all those externals but we could

00:30:01,850 --> 00:30:05,900
figure something out there yeah yeah

00:30:03,950 --> 00:30:12,250
yeah okay cool let's make you head of

00:30:05,900 --> 00:30:14,660
the text yes okay I wait okay questions

00:30:12,250 --> 00:30:15,890
quickly same use case every year there's

00:30:14,660 --> 00:30:17,960
a bunch of web developers meeting in the

00:30:15,890 --> 00:30:20,750
UK locking themselves up for a week in a

00:30:17,960 --> 00:30:26,750
fault no internet for anyone and they

00:30:20,750 --> 00:30:30,830
could yeah yeah yeah that sort of

00:30:26,750 --> 00:30:32,690
environment sure but no but

00:30:30,830 --> 00:30:34,430
organizations which actually have an

00:30:32,690 --> 00:30:36,710
internet connection running a full

00:30:34,430 --> 00:30:39,020
Bandersnatch mirror just I don't know

00:30:36,710 --> 00:30:41,180
just as a plus-one I've been to dev foot

00:30:39,020 --> 00:30:42,830
and we do indeed take mirrors of things

00:30:41,180 --> 00:30:44,360
like the whole of Wikipedia the entire

00:30:42,830 --> 00:30:50,750
stack overview dump and this will be

00:30:44,360 --> 00:30:52,100
awesome okay fine and use my invitation

00:30:50,750 --> 00:30:54,140
to these things oh you should totally

00:30:52,100 --> 00:30:55,400
come it's great fun um what you said

00:30:54,140 --> 00:31:02,000
don't use knows why shouldn't we use

00:30:55,400 --> 00:31:04,370
knows are terrible no sorry I I've had

00:31:02,000 --> 00:31:07,480
extensive use of both nose and pie tests

00:31:04,370 --> 00:31:11,300
and I just much prefer pie tests

00:31:07,480 --> 00:31:13,400
discovery of tests and its management of

00:31:11,300 --> 00:31:16,910
the test run in terms of capture of

00:31:13,400 --> 00:31:19,910
logging and errors its interrogation of

00:31:16,910 --> 00:31:21,980
errors is much more in-depth so the

00:31:19,910 --> 00:31:25,520
report that you get it has much more

00:31:21,980 --> 00:31:27,080
detail about exactly what went wrong so

00:31:25,520 --> 00:31:29,210
it doesn't just say this assertion

00:31:27,080 --> 00:31:31,010
failed it tells you this assertion

00:31:29,210 --> 00:31:33,050
failed because these are the values that

00:31:31,010 --> 00:31:34,970
were in the assertion and that is

00:31:33,050 --> 00:31:37,190
incredibly valuable especially when it

00:31:34,970 --> 00:31:39,020
can be like to lists as like well that

00:31:37,190 --> 00:31:41,840
it failed because the lists weren't the

00:31:39,020 --> 00:31:45,050
same I was like all that great knows PI

00:31:41,840 --> 00:31:49,860
test says because the element 9 was

00:31:45,050 --> 00:31:52,990
different and these are the values okay

00:31:49,860 --> 00:31:55,480
one of the many many reasons why maven

00:31:52,990 --> 00:31:58,269
for quick questions are an integrative

00:31:55,480 --> 00:31:59,860
phrase you're trying to elicit

00:31:58,269 --> 00:32:01,539
information it's not for this statement

00:31:59,860 --> 00:32:03,970
and then goes into a question so one of

00:32:01,539 --> 00:32:06,009
the reasons why maven proxies really

00:32:03,970 --> 00:32:09,220
suck is because they download the full

00:32:06,009 --> 00:32:11,889
version of the artifact from the the

00:32:09,220 --> 00:32:13,600
source server before then sending the

00:32:11,889 --> 00:32:15,940
first buy it back to the client who just

00:32:13,600 --> 00:32:17,139
originally requested it so this is in

00:32:15,940 --> 00:32:19,059
the case that you're showing where you

00:32:17,139 --> 00:32:21,610
have a proxy server between you and pi

00:32:19,059 --> 00:32:23,230
PI and you have a cache miss right so

00:32:21,610 --> 00:32:25,120
because it takes so long to get that

00:32:23,230 --> 00:32:26,470
first bite often the clients end up

00:32:25,120 --> 00:32:28,360
timing out I just

00:32:26,470 --> 00:32:30,340
I believe def PI start streaming it

00:32:28,360 --> 00:32:32,440
straight away excellent certainly my

00:32:30,340 --> 00:32:35,789
implementation did so I hope it does

00:32:32,440 --> 00:32:35,789
because mine was crappy

00:32:39,899 --> 00:32:46,389
is there an intention to eventually make

00:32:43,210 --> 00:32:49,210
this slate for pi PI it's cheese shop to

00:32:46,389 --> 00:32:51,399
be a blessed version of dev PI is this

00:32:49,210 --> 00:32:53,529
it already is the Python package index

00:32:51,399 --> 00:32:59,440
has blessed this as a tool that is good

00:32:53,529 --> 00:33:01,960
and and similarly Bandersnatch yeah if

00:32:59,440 --> 00:33:04,690
you go if you if you can't remember all

00:33:01,960 --> 00:33:07,899
of this and you're a little bit lost go

00:33:04,690 --> 00:33:10,570
to the packaging dot python.org URL

00:33:07,899 --> 00:33:12,850
which is where the python packaging user

00:33:10,570 --> 00:33:14,440
guide exists now it's the central

00:33:12,850 --> 00:33:16,809
location for documentation about

00:33:14,440 --> 00:33:19,539
packaging there's a link there about

00:33:16,809 --> 00:33:24,159
caching and mirroring and it talks about

00:33:19,539 --> 00:33:26,940
dev PI and bonus nature time for so

00:33:24,159 --> 00:33:26,940
thank you very much Richard

00:33:28,930 --> 00:33:30,990
you

00:33:37,520 --> 00:33:39,580

YouTube URL: https://www.youtube.com/watch?v=pZTiAkwiPgI


