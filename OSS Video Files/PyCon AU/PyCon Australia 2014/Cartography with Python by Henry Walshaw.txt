Title: Cartography with Python by Henry Walshaw
Publication date: 2014-08-26
Playlist: PyCon Australia 2014
Description: 
	PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:10,240 --> 00:00:12,960
hi guys um

00:00:11,200 --> 00:00:14,400
yeah today i'm here to give a brief

00:00:12,960 --> 00:00:17,199
tutorial

00:00:14,400 --> 00:00:18,000
on a bit of an overview of the python

00:00:17,199 --> 00:00:21,119
ecosystem

00:00:18,000 --> 00:00:24,160
for spatial analysis and spatial data

00:00:21,119 --> 00:00:26,720
and ideally be able to produce a nice

00:00:24,160 --> 00:00:28,560
good-looking map at the end now i'm

00:00:26,720 --> 00:00:31,439
apologizing now if i seem a bit

00:00:28,560 --> 00:00:33,040
unprepared or this goes too quickly

00:00:31,439 --> 00:00:35,360
i kind of found out about this what

00:00:33,040 --> 00:00:36,800
three days ago so

00:00:35,360 --> 00:00:38,399
this is a bit of a rush job but

00:00:36,800 --> 00:00:41,040
hopefully it'll be informative

00:00:38,399 --> 00:00:43,600
and i'm more than happy to ask answer

00:00:41,040 --> 00:00:45,200
questions at the end

00:00:43,600 --> 00:00:47,680
okay the first thing i'm going to start

00:00:45,200 --> 00:00:48,719
with is the kind of the key idea the key

00:00:47,680 --> 00:00:51,199
quote

00:00:48,719 --> 00:00:52,079
that tells us what spatial analysis is

00:00:51,199 --> 00:00:54,559
all about

00:00:52,079 --> 00:00:56,559
the basic idea is that everything in

00:00:54,559 --> 00:00:57,440
some way is similar to everything else

00:00:56,559 --> 00:00:59,600
in the world

00:00:57,440 --> 00:01:00,800
doesn't matter where you are but if

00:00:59,600 --> 00:01:02,640
you're closer to something

00:01:00,800 --> 00:01:04,799
you're more likely to be similar to that

00:01:02,640 --> 00:01:06,640
than you are if you're further away

00:01:04,799 --> 00:01:08,400
if you look at say darwin's finches in

00:01:06,640 --> 00:01:10,159
the galapagos the closer they were

00:01:08,400 --> 00:01:11,680
together they were more the same species

00:01:10,159 --> 00:01:13,439
as they got further away the species

00:01:11,680 --> 00:01:16,320
diverged pretty similar

00:01:13,439 --> 00:01:17,759
but not quite the same and that quote's

00:01:16,320 --> 00:01:20,799
been around for a long time

00:01:17,759 --> 00:01:22,799
and gis if you don't know what gis is

00:01:20,799 --> 00:01:26,159
it's geographic information systems

00:01:22,799 --> 00:01:28,560
gis is everywhere so i

00:01:26,159 --> 00:01:29,280
will hopefully be understanding that

00:01:28,560 --> 00:01:31,520
great

00:01:29,280 --> 00:01:33,040
so one of the things with gis is it's a

00:01:31,520 --> 00:01:33,439
broad discipline that's been around

00:01:33,040 --> 00:01:35,520
since

00:01:33,439 --> 00:01:37,360
actually the 1970s a lot of people don't

00:01:35,520 --> 00:01:37,920
know that but it's been around it was

00:01:37,360 --> 00:01:40,720
started

00:01:37,920 --> 00:01:42,000
in canada and then it moved very quickly

00:01:40,720 --> 00:01:42,880
into the united states for the

00:01:42,000 --> 00:01:44,880
department of

00:01:42,880 --> 00:01:46,479
defense they started a computer mapping

00:01:44,880 --> 00:01:48,960
group and

00:01:46,479 --> 00:01:49,840
it's really only grown from there but

00:01:48,960 --> 00:01:52,399
the real

00:01:49,840 --> 00:01:53,439
resurgence of gis in the public

00:01:52,399 --> 00:01:56,399
consciousness

00:01:53,439 --> 00:01:57,280
has come from google maps google maps

00:01:56,399 --> 00:02:00,880
came out in

00:01:57,280 --> 00:02:01,920
about 2005 2006. before that no one

00:02:00,880 --> 00:02:03,759
really cared

00:02:01,920 --> 00:02:04,960
about spatial data you know if we were

00:02:03,759 --> 00:02:05,600
honest doesn't matter where it's

00:02:04,960 --> 00:02:08,080
happening it's

00:02:05,600 --> 00:02:08,879
somewhere else not here until we saw

00:02:08,080 --> 00:02:12,319
google maps

00:02:08,879 --> 00:02:13,760
and then closely on google maps as hills

00:02:12,319 --> 00:02:15,360
google earth and one of the really nice

00:02:13,760 --> 00:02:16,160
things about google earth is you can

00:02:15,360 --> 00:02:18,720
look at

00:02:16,160 --> 00:02:20,160
the whole world or you can zoom in and

00:02:18,720 --> 00:02:23,200
have a look at your own house from

00:02:20,160 --> 00:02:26,560
you know just on the street

00:02:23,200 --> 00:02:28,560
so why python well happily

00:02:26,560 --> 00:02:31,120
python is the primary scripting language

00:02:28,560 --> 00:02:32,879
for all of the major gis

00:02:31,120 --> 00:02:35,440
systems in the world so it's the major

00:02:32,879 --> 00:02:37,280
scripting language of esri arcgis

00:02:35,440 --> 00:02:38,720
which is the largest if you don't know

00:02:37,280 --> 00:02:40,879
it um

00:02:38,720 --> 00:02:43,680
gis proprietary system in the world it

00:02:40,879 --> 00:02:46,239
has about 42 percent of market share

00:02:43,680 --> 00:02:47,519
which if you know much about economics

00:02:46,239 --> 00:02:50,400
would be something that coke

00:02:47,519 --> 00:02:51,360
or mcdonald's would kill for so they do

00:02:50,400 --> 00:02:54,560
quite well

00:02:51,360 --> 00:02:56,959
the other primary gis that python use

00:02:54,560 --> 00:02:58,239
that is used uses python as its primary

00:02:56,959 --> 00:03:02,239
scripting language

00:02:58,239 --> 00:03:05,040
is qgis qgis now is the largest

00:03:02,239 --> 00:03:07,040
open source gis system in the world so

00:03:05,040 --> 00:03:09,200
if you haven't used qgis before

00:03:07,040 --> 00:03:10,239
i really recommend it go take a look

00:03:09,200 --> 00:03:13,519
qgis.org

00:03:10,239 --> 00:03:16,560
it's a great piece of software and it's

00:03:13,519 --> 00:03:18,319
built in qt all the python extensions

00:03:16,560 --> 00:03:19,440
are available online there's a simple

00:03:18,319 --> 00:03:22,800
download manager

00:03:19,440 --> 00:03:23,440
it's brilliant and it's used by so many

00:03:22,800 --> 00:03:25,680
more as well

00:03:23,440 --> 00:03:27,440
so now because python has got such a

00:03:25,680 --> 00:03:29,200
large level of popularity

00:03:27,440 --> 00:03:31,680
within the gis community and within the

00:03:29,200 --> 00:03:34,159
sciences as a whole and within

00:03:31,680 --> 00:03:35,840
engineering and i t and within

00:03:34,159 --> 00:03:37,200
everything else

00:03:35,840 --> 00:03:39,360
more and more systems are actually

00:03:37,200 --> 00:03:42,239
building in their own python apis

00:03:39,360 --> 00:03:43,120
so we have grass gis which has its own

00:03:42,239 --> 00:03:45,840
proprietary

00:03:43,120 --> 00:03:47,120
scripting language now has a python api

00:03:45,840 --> 00:03:50,720
as of last year

00:03:47,120 --> 00:03:52,319
we have um pitney bowes mapinfo

00:03:50,720 --> 00:03:53,840
they've got map basic but they're now

00:03:52,319 --> 00:03:56,959
also moving towards their own

00:03:53,840 --> 00:03:58,879
proprietary python api as well

00:03:56,959 --> 00:04:01,120
so you know it's very quickly taking

00:03:58,879 --> 00:04:02,400
over the industry which is great

00:04:01,120 --> 00:04:04,000
because it means you need to learn at

00:04:02,400 --> 00:04:05,680
once and then your skills are very

00:04:04,000 --> 00:04:06,799
transferable

00:04:05,680 --> 00:04:08,080
one of the biggest flaws though

00:04:06,799 --> 00:04:10,560
unfortunately is everything seems to be

00:04:08,080 --> 00:04:13,120
stuck in python 2.7

00:04:10,560 --> 00:04:15,840
one day things will migrate but for now

00:04:13,120 --> 00:04:15,840
not so much

00:04:16,000 --> 00:04:20,160
so a quick brief introduction to spatial

00:04:19,440 --> 00:04:22,240
data

00:04:20,160 --> 00:04:24,800
i'm not sure can i have a hand here who

00:04:22,240 --> 00:04:26,639
does gis who's played with gis before

00:04:24,800 --> 00:04:27,919
right okay everyone in the room this is

00:04:26,639 --> 00:04:31,120
really easy um

00:04:27,919 --> 00:04:32,800
so great don't need to explain this

00:04:31,120 --> 00:04:34,400
so there's a few basic spatial data

00:04:32,800 --> 00:04:35,600
types you all know this points lines

00:04:34,400 --> 00:04:38,160
polygons

00:04:35,600 --> 00:04:39,440
um and rasters and then you can look at

00:04:38,160 --> 00:04:40,960
networks and you can look at temporal

00:04:39,440 --> 00:04:44,080
data and all sorts of other

00:04:40,960 --> 00:04:44,639
weird and wonderful things and then a

00:04:44,080 --> 00:04:48,160
feature

00:04:44,639 --> 00:04:50,160
some kind of object in a gis sense is a

00:04:48,160 --> 00:04:51,520
geometry of some sort with some

00:04:50,160 --> 00:04:54,840
attributes attached to it

00:04:51,520 --> 00:04:56,240
great easy we also have projections in

00:04:54,840 --> 00:04:58,240
gis

00:04:56,240 --> 00:05:00,000
so i'm not sure if you've seen this ever

00:04:58,240 --> 00:05:02,720
before

00:05:00,000 --> 00:05:03,759
this is actually a closer representation

00:05:02,720 --> 00:05:06,080
of how the earth

00:05:03,759 --> 00:05:07,280
really looks in space than you would

00:05:06,080 --> 00:05:10,000
find with your nice globe

00:05:07,280 --> 00:05:11,199
the globe is a nice approximation but

00:05:10,000 --> 00:05:14,000
it's a bit of a lie

00:05:11,199 --> 00:05:15,680
so is the was it oblate spheroid which

00:05:14,000 --> 00:05:17,120
is the squashed globe

00:05:15,680 --> 00:05:19,039
the earth actually looks more like a

00:05:17,120 --> 00:05:22,240
potato floating in space

00:05:19,039 --> 00:05:23,360
so what we actually have is a real

00:05:22,240 --> 00:05:26,000
problem in gis

00:05:23,360 --> 00:05:27,600
is our computer screens in fact all the

00:05:26,000 --> 00:05:29,120
tools that we use are in two dimensions

00:05:27,600 --> 00:05:30,080
you've seen a map is on a flat piece of

00:05:29,120 --> 00:05:33,600
paper

00:05:30,080 --> 00:05:35,759
we need to get from this potato to a map

00:05:33,600 --> 00:05:37,039
and what we can do is we use projection

00:05:35,759 --> 00:05:40,080
systems to do that

00:05:37,039 --> 00:05:42,080
now projections uh have two components

00:05:40,080 --> 00:05:43,360
projections have a datum which is the

00:05:42,080 --> 00:05:45,199
model of the sphere

00:05:43,360 --> 00:05:46,639
the best represents the surface of the

00:05:45,199 --> 00:05:48,320
oblate spheroid

00:05:46,639 --> 00:05:49,680
at any given point on the planet and

00:05:48,320 --> 00:05:51,600
then we actually have the projection

00:05:49,680 --> 00:05:54,160
which is which is the transformation

00:05:51,600 --> 00:05:55,520
from the surface of that sphere to a

00:05:54,160 --> 00:05:57,440
two-dimensional space

00:05:55,520 --> 00:06:00,160
now what this is you'll see the color

00:05:57,440 --> 00:06:03,280
scheme here the color scheme is the

00:06:00,160 --> 00:06:05,919
difference in height

00:06:03,280 --> 00:06:06,880
of the earth's surface from the spheroid

00:06:05,919 --> 00:06:09,280
at all these points

00:06:06,880 --> 00:06:10,639
so red means that the earth's surface is

00:06:09,280 --> 00:06:12,240
higher than the spheroid

00:06:10,639 --> 00:06:14,000
blue means that the earth's surface is

00:06:12,240 --> 00:06:16,160
lower than the spheroid so

00:06:14,000 --> 00:06:18,720
this is the grs-80 it's pretty common

00:06:16,160 --> 00:06:20,639
it's used everywhere

00:06:18,720 --> 00:06:21,520
so it's a good idea to know what we talk

00:06:20,639 --> 00:06:22,240
about when we're talking about

00:06:21,520 --> 00:06:23,360
projections

00:06:22,240 --> 00:06:25,600
because we start with something like

00:06:23,360 --> 00:06:27,440
this latitude and longitude this is a

00:06:25,600 --> 00:06:29,520
plate car projection

00:06:27,440 --> 00:06:30,960
uh basically what this does is it sets

00:06:29,520 --> 00:06:33,759
latitude and longitude

00:06:30,960 --> 00:06:35,360
to equal in every direction so we have

00:06:33,759 --> 00:06:37,039
our simple

00:06:35,360 --> 00:06:38,560
x and y and we can draw a bunch of

00:06:37,039 --> 00:06:40,639
circles on the map it's

00:06:38,560 --> 00:06:42,560
really easy to do it's called a tissue

00:06:40,639 --> 00:06:44,240
index which is done by a frenchman many

00:06:42,560 --> 00:06:46,080
many years ago

00:06:44,240 --> 00:06:47,759
and what this set of circles does is it

00:06:46,080 --> 00:06:49,199
shows us on the map

00:06:47,759 --> 00:06:50,720
when we change the projection from

00:06:49,199 --> 00:06:51,360
something like the plate car projection

00:06:50,720 --> 00:06:53,440
to

00:06:51,360 --> 00:06:55,599
the standard mercator projection this

00:06:53,440 --> 00:06:58,160
shows us the distortion

00:06:55,599 --> 00:07:00,160
as we move further away from the equator

00:06:58,160 --> 00:07:03,520
in this projection

00:07:00,160 --> 00:07:06,000
now this next projection here

00:07:03,520 --> 00:07:07,599
is a disconnected projection now it's

00:07:06,000 --> 00:07:08,880
important to know

00:07:07,599 --> 00:07:10,479
what we look at when we're looking at

00:07:08,880 --> 00:07:11,120
the properties of our projections

00:07:10,479 --> 00:07:13,840
because

00:07:11,120 --> 00:07:14,560
a projection is just a representation of

00:07:13,840 --> 00:07:17,199
our data

00:07:14,560 --> 00:07:18,319
in a two-dimensional space which means

00:07:17,199 --> 00:07:19,840
that there are a few properties of

00:07:18,319 --> 00:07:22,639
projections that's worth knowing about

00:07:19,840 --> 00:07:23,440
the first is that a projection can only

00:07:22,639 --> 00:07:25,919
preserve

00:07:23,440 --> 00:07:26,880
some features of your data so it can

00:07:25,919 --> 00:07:29,599
only preserve

00:07:26,880 --> 00:07:31,360
some of the area the shape the direction

00:07:29,599 --> 00:07:33,919
the distance

00:07:31,360 --> 00:07:34,960
the bearing you can't ever preserve them

00:07:33,919 --> 00:07:36,080
all because it's not a true

00:07:34,960 --> 00:07:39,759
representation

00:07:36,080 --> 00:07:41,039
of the world as a 3d sphere

00:07:39,759 --> 00:07:42,720
and this is worth knowing because it's

00:07:41,039 --> 00:07:43,759
important when we're looking at

00:07:42,720 --> 00:07:46,479
something like

00:07:43,759 --> 00:07:47,440
a map to know what purpose that map was

00:07:46,479 --> 00:07:50,639
designed for

00:07:47,440 --> 00:07:52,560
this projection here is really nice

00:07:50,639 --> 00:07:54,319
for the sort of viewing the true shape

00:07:52,560 --> 00:07:56,319
of countries and the true area and the

00:07:54,319 --> 00:07:58,720
true size of countries

00:07:56,319 --> 00:08:00,000
as a whole but it's worthless if you're

00:07:58,720 --> 00:08:01,680
trying to find the direction from point

00:08:00,000 --> 00:08:03,120
a to point b

00:08:01,680 --> 00:08:04,960
the mercator projection which was

00:08:03,120 --> 00:08:08,560
invented in the 18

00:08:04,960 --> 00:08:11,039
1700s by a frenchman maker

00:08:08,560 --> 00:08:12,400
is great if you're looking at sailing

00:08:11,039 --> 00:08:13,680
across an ocean because

00:08:12,400 --> 00:08:15,919
great lines are represented in the

00:08:13,680 --> 00:08:18,720
mercator projection as a straight line

00:08:15,919 --> 00:08:19,120
but everything else not so much you can

00:08:18,720 --> 00:08:21,120
see

00:08:19,120 --> 00:08:22,560
the further you get from the equator the

00:08:21,120 --> 00:08:26,319
more distortion there is

00:08:22,560 --> 00:08:27,759
in the map and then

00:08:26,319 --> 00:08:29,520
i'm going to move on to what i'm going

00:08:27,759 --> 00:08:30,160
to try and achieve today so our goal

00:08:29,520 --> 00:08:33,440
today

00:08:30,160 --> 00:08:34,479
is to make a map pretty obvious this is

00:08:33,440 --> 00:08:35,680
gis

00:08:34,479 --> 00:08:37,599
everyone loves looking at a map at the

00:08:35,680 --> 00:08:39,680
end it's you know it's always fun

00:08:37,599 --> 00:08:41,440
and the goal is to see if we have a data

00:08:39,680 --> 00:08:42,240
set containing the locations of a bunch

00:08:41,440 --> 00:08:43,839
of tweets

00:08:42,240 --> 00:08:45,040
which i've you know gathered over the

00:08:43,839 --> 00:08:46,000
last couple of days since i've been in

00:08:45,040 --> 00:08:47,839
the conference

00:08:46,000 --> 00:08:49,440
in and around the conference center can

00:08:47,839 --> 00:08:50,480
i make a map can i show that these

00:08:49,440 --> 00:08:52,959
tweets are on the map

00:08:50,480 --> 00:08:54,160
and then can i show how or if these

00:08:52,959 --> 00:08:55,839
tweets are clustered could i do some

00:08:54,160 --> 00:08:58,399
basic spatial analysis

00:08:55,839 --> 00:09:00,080
and can i do it in python and hopefully

00:08:58,399 --> 00:09:01,040
this image will make a bit more sense as

00:09:00,080 --> 00:09:04,320
we go through

00:09:01,040 --> 00:09:06,080
but for now i'll leave it as it is

00:09:04,320 --> 00:09:07,519
and the first thing we want to look at

00:09:06,080 --> 00:09:11,600
is the fiona library

00:09:07,519 --> 00:09:14,240
now who here has used gdl and or ogr

00:09:11,600 --> 00:09:14,880
everyone okay for those that haven't got

00:09:14,240 --> 00:09:16,480
ogr

00:09:14,880 --> 00:09:18,480
uh data reading and transformation

00:09:16,480 --> 00:09:20,160
libraries which take spatial data and

00:09:18,480 --> 00:09:20,800
convert from one format to another and

00:09:20,160 --> 00:09:22,080
can do various

00:09:20,800 --> 00:09:23,920
spatial operations like filtering in the

00:09:22,080 --> 00:09:26,640
rest they've also got

00:09:23,920 --> 00:09:28,959
their own python bindings unfortunately

00:09:26,640 --> 00:09:31,279
the python bindings for gdal and ogr

00:09:28,959 --> 00:09:32,000
are pretty straight simple c python

00:09:31,279 --> 00:09:34,240
bindings

00:09:32,000 --> 00:09:35,200
they're not very forgiving so things

00:09:34,240 --> 00:09:37,519
like if

00:09:35,200 --> 00:09:38,240
this data set didn't exist and i tried

00:09:37,519 --> 00:09:40,959
to do this

00:09:38,240 --> 00:09:42,560
in gdal ogr this would and tried to open

00:09:40,959 --> 00:09:44,720
it i should say

00:09:42,560 --> 00:09:45,839
this wouldn't raise an error typically

00:09:44,720 --> 00:09:47,519
i'd expect

00:09:45,839 --> 00:09:50,160
when i try and open a file that doesn't

00:09:47,519 --> 00:09:52,640
exist python io error

00:09:50,160 --> 00:09:53,279
gdl doesn't do that it just returns none

00:09:52,640 --> 00:09:55,040
so your

00:09:53,279 --> 00:09:56,880
your program will keep going with this

00:09:55,040 --> 00:09:58,160
none object your none data set

00:09:56,880 --> 00:10:00,560
until you try and do something a bit

00:09:58,160 --> 00:10:02,640
more interesting and then it will fail

00:10:00,560 --> 00:10:04,240
so there's a lot of issues there it says

00:10:02,640 --> 00:10:04,880
also quite difficult to get access to

00:10:04,240 --> 00:10:07,440
your data

00:10:04,880 --> 00:10:08,880
they've improved remarkably in the past

00:10:07,440 --> 00:10:11,440
few years it used to be

00:10:08,880 --> 00:10:12,880
even longer and more complex than it is

00:10:11,440 --> 00:10:15,120
in this code sample at the bottom here

00:10:12,880 --> 00:10:18,959
to get vector data out of ogr

00:10:15,120 --> 00:10:23,200
but it's still not very nice fiona

00:10:18,959 --> 00:10:25,839
is a drop-in replacement for ogr

00:10:23,200 --> 00:10:26,320
he makes a couple of assumptions the

00:10:25,839 --> 00:10:28,480
first

00:10:26,320 --> 00:10:29,600
main one being that you have a

00:10:28,480 --> 00:10:33,440
consistent schemer

00:10:29,600 --> 00:10:35,680
so fiona unlike ogr will only work

00:10:33,440 --> 00:10:38,000
on things like shapefiles or mapinfo tab

00:10:35,680 --> 00:10:40,640
files which have a consistent table

00:10:38,000 --> 00:10:41,519
for the most part this is fine but for

00:10:40,640 --> 00:10:42,640
other times

00:10:41,519 --> 00:10:44,880
when you're trying to read something

00:10:42,640 --> 00:10:47,760
like a geojson file or

00:10:44,880 --> 00:10:48,640
various others various point files point

00:10:47,760 --> 00:10:52,320
data sets

00:10:48,640 --> 00:10:54,240
this can be a problem happily geojson is

00:10:52,320 --> 00:10:56,160
a json file which i'll show you in a sec

00:10:54,240 --> 00:10:57,839
which you can just read in python anyway

00:10:56,160 --> 00:10:59,519
and one of the stated goals of fiona is

00:10:57,839 --> 00:11:01,120
that if you're connecting to a database

00:10:59,519 --> 00:11:04,959
you shouldn't be using fiona there are

00:11:01,120 --> 00:11:04,959
other better python tools to do that

00:11:05,440 --> 00:11:09,519
so one of the things has anyone here

00:11:07,040 --> 00:11:11,440
heard seen geojson before

00:11:09,519 --> 00:11:12,800
yes everyone okay this has pretty much

00:11:11,440 --> 00:11:14,399
become standard now

00:11:12,800 --> 00:11:16,320
for transferring spatial data across the

00:11:14,399 --> 00:11:18,880
web at least for things like

00:11:16,320 --> 00:11:20,079
basic web mapping and passing data

00:11:18,880 --> 00:11:22,240
around it's pretty

00:11:20,079 --> 00:11:23,839
obvious it's a json object so a json

00:11:22,240 --> 00:11:26,160
object with a geometry

00:11:23,839 --> 00:11:27,519
parameter which within that geometry

00:11:26,160 --> 00:11:29,440
parameter has the type

00:11:27,519 --> 00:11:32,000
of geometry which is point line polygon

00:11:29,440 --> 00:11:35,040
the rest as well as the coordinates

00:11:32,000 --> 00:11:36,560
and a properties parameter which has

00:11:35,040 --> 00:11:38,399
all the actual attributes on your

00:11:36,560 --> 00:11:39,120
feature this is really easy to work with

00:11:38,399 --> 00:11:40,880
because

00:11:39,120 --> 00:11:42,720
in python this is represented as a

00:11:40,880 --> 00:11:43,519
dictionary object everyone can get data

00:11:42,720 --> 00:11:45,760
in and out

00:11:43,519 --> 00:11:47,680
using the owner like that and it's very

00:11:45,760 --> 00:11:48,160
easy in fiona to just open your spatial

00:11:47,680 --> 00:11:50,000
data

00:11:48,160 --> 00:11:51,360
look through access all your data as a

00:11:50,000 --> 00:11:54,320
dictionary and

00:11:51,360 --> 00:11:55,440
pull out everything that you need so say

00:11:54,320 --> 00:11:56,480
i've got a shapefile that contains a

00:11:55,440 --> 00:12:00,560
bunch of tweets

00:11:56,480 --> 00:12:03,440
and i open that shapefile in fiona i can

00:12:00,560 --> 00:12:04,480
read in those tweets really easily and

00:12:03,440 --> 00:12:08,079
if i wanted to

00:12:04,480 --> 00:12:09,920
i could produce a map at the other end

00:12:08,079 --> 00:12:11,600
so if i'm just looking around the

00:12:09,920 --> 00:12:14,560
brisbane convention center

00:12:11,600 --> 00:12:15,839
i really only care about features that

00:12:14,560 --> 00:12:17,760
are pretty close by

00:12:15,839 --> 00:12:19,519
fiona also offers a lot of options for

00:12:17,760 --> 00:12:22,639
filtering your data

00:12:19,519 --> 00:12:23,839
this is just one way to do it

00:12:22,639 --> 00:12:26,399
so filtering your data is really

00:12:23,839 --> 00:12:27,600
important because really after a while

00:12:26,399 --> 00:12:29,440
there's only going to be a subset of

00:12:27,600 --> 00:12:31,120
data that you're interested in if i have

00:12:29,440 --> 00:12:34,160
tens of thousands of tweets available

00:12:31,120 --> 00:12:35,600
i don't but if i did then i'd only

00:12:34,160 --> 00:12:39,279
really care about tweets in a

00:12:35,600 --> 00:12:40,399
specific area for this job okay

00:12:39,279 --> 00:12:41,680
the other thing i'm going to do because

00:12:40,399 --> 00:12:43,440
i want to cluster my data is i'm going

00:12:41,680 --> 00:12:45,120
to use the standard scipy clustering

00:12:43,440 --> 00:12:48,079
tools

00:12:45,120 --> 00:12:49,360
which means that all i want is a numpy

00:12:48,079 --> 00:12:50,720
array of the coordinates

00:12:49,360 --> 00:12:52,639
and that's actually really easy to get

00:12:50,720 --> 00:12:53,279
because i know that this data is a point

00:12:52,639 --> 00:12:55,040
data set

00:12:53,279 --> 00:12:56,639
so i can simply loop through then

00:12:55,040 --> 00:12:57,200
because it's a dictionary i can really

00:12:56,639 --> 00:12:58,959
easily

00:12:57,200 --> 00:13:02,160
grab out the coordinates and drop them

00:12:58,959 --> 00:13:04,839
into a numpy array

00:13:02,160 --> 00:13:06,240
as i said if i'm going to build a set of

00:13:04,839 --> 00:13:08,079
clusters

00:13:06,240 --> 00:13:09,440
this is probably a bit by the way but

00:13:08,079 --> 00:13:10,560
it's really easy there's a lot of tools

00:13:09,440 --> 00:13:13,519
available

00:13:10,560 --> 00:13:14,480
everyone's seen this conference a bunch

00:13:13,519 --> 00:13:17,360
of talks

00:13:14,480 --> 00:13:18,839
about scikit-learn which has a lot of

00:13:17,360 --> 00:13:21,680
clustering available

00:13:18,839 --> 00:13:22,880
and there's also the standard scipy

00:13:21,680 --> 00:13:25,440
clustering libraries

00:13:22,880 --> 00:13:26,480
now this is actually not too hard to do

00:13:25,440 --> 00:13:28,560
this is pretty basic

00:13:26,480 --> 00:13:30,399
a hierarchical clustering system is

00:13:28,560 --> 00:13:33,680
basically grouping things

00:13:30,399 --> 00:13:36,079
not into a set number of clusters but

00:13:33,680 --> 00:13:37,200
instead by how far away from each other

00:13:36,079 --> 00:13:39,839
they are

00:13:37,200 --> 00:13:40,480
so in this case i care about clusters of

00:13:39,839 --> 00:13:42,560
points

00:13:40,480 --> 00:13:46,000
where the points are within 100 meters

00:13:42,560 --> 00:13:46,000
of each other really simple

00:13:46,079 --> 00:13:50,720
then i'm going to use shapely now

00:13:48,880 --> 00:13:53,920
shapely you may or may not know

00:13:50,720 --> 00:13:56,720
is a vector library for

00:13:53,920 --> 00:13:58,560
python shapely allows you to manipulate

00:13:56,720 --> 00:14:00,160
vectors create new vectors so points

00:13:58,560 --> 00:14:02,160
lines polygons multipoints

00:14:00,160 --> 00:14:04,800
multipolygons and it's really easy to

00:14:02,160 --> 00:14:07,600
use it has an interface for

00:14:04,800 --> 00:14:09,199
numpy arrays and it also has an

00:14:07,600 --> 00:14:10,800
interface for geojson

00:14:09,199 --> 00:14:12,880
entities so you can simply read a

00:14:10,800 --> 00:14:14,560
geometry as a geojson object

00:14:12,880 --> 00:14:16,800
dump it out as a numpy array or the

00:14:14,560 --> 00:14:17,839
reverse do any kind of operation on it

00:14:16,800 --> 00:14:20,240
that you want

00:14:17,839 --> 00:14:23,199
and you know it's very simple nicely

00:14:20,240 --> 00:14:23,199
pythonic library

00:14:23,680 --> 00:14:28,480
here we're just going to very simply

00:14:26,000 --> 00:14:32,079
take our clustered arrays

00:14:28,480 --> 00:14:33,600
and then we're going to put a convex

00:14:32,079 --> 00:14:36,079
hull around them now convex hull

00:14:33,600 --> 00:14:37,519
is basically a region that looks like

00:14:36,079 --> 00:14:40,160
that region on the top there

00:14:37,519 --> 00:14:40,959
which is the uh maximum region that is

00:14:40,160 --> 00:14:43,680
convex

00:14:40,959 --> 00:14:44,000
that can contain all the points from our

00:14:43,680 --> 00:14:47,440
data

00:14:44,000 --> 00:14:50,000
set um

00:14:47,440 --> 00:14:50,800
and i'm going to do that like so i'm

00:14:50,000 --> 00:14:52,079
then

00:14:50,800 --> 00:14:54,000
going to put a buffer around it to make

00:14:52,079 --> 00:14:56,079
it look a bit more pretty

00:14:54,000 --> 00:14:57,279
and you can see there the last line

00:14:56,079 --> 00:14:59,839
shapely geometry

00:14:57,279 --> 00:15:01,120
as multi-point chords simply just taking

00:14:59,839 --> 00:15:03,440
a numpy array

00:15:01,120 --> 00:15:05,760
casting it to a shapely geometry type

00:15:03,440 --> 00:15:07,600
then i'm building a convex hull object

00:15:05,760 --> 00:15:10,959
then i'm buffering that convex hull

00:15:07,600 --> 00:15:12,800
object really simple really pythonic

00:15:10,959 --> 00:15:16,000
and that way i can end up with a lot of

00:15:12,800 --> 00:15:17,760
points and some convex hulls around them

00:15:16,000 --> 00:15:19,040
which is nice but probably doesn't tell

00:15:17,760 --> 00:15:20,880
us a whole lot by itself

00:15:19,040 --> 00:15:22,399
there's no reference here i don't know

00:15:20,880 --> 00:15:25,440
what i'm looking at

00:15:22,399 --> 00:15:26,560
so we want to look at putting maybe a

00:15:25,440 --> 00:15:27,680
picture in the background or some

00:15:26,560 --> 00:15:29,279
imagery

00:15:27,680 --> 00:15:32,160
and that's where rasterio comes in

00:15:29,279 --> 00:15:33,360
rasterio is the equivalent of fiona but

00:15:32,160 --> 00:15:34,880
for raster data

00:15:33,360 --> 00:15:37,120
so if you're looking at imagery of any

00:15:34,880 --> 00:15:38,880
kind rasteria is the place to go

00:15:37,120 --> 00:15:41,680
it's a drop-in replacement for the gdelt

00:15:38,880 --> 00:15:43,920
library and allows you to

00:15:41,680 --> 00:15:46,079
really quickly and easily read in your

00:15:43,920 --> 00:15:48,800
data filter your data by a

00:15:46,079 --> 00:15:50,079
given region and get a numpy array

00:15:48,800 --> 00:15:52,959
because its continuous data

00:15:50,079 --> 00:15:54,560
is really easily represented as a numpy

00:15:52,959 --> 00:15:56,959
array

00:15:54,560 --> 00:15:58,720
and again gdal itself is not very

00:15:56,959 --> 00:15:59,680
friendly if you ever tried to use the gl

00:15:58,720 --> 00:16:02,639
python bindings

00:15:59,680 --> 00:16:03,839
again it quickly breaks if you get the

00:16:02,639 --> 00:16:05,600
wrong path

00:16:03,839 --> 00:16:07,040
if you get any of the parameters wrong

00:16:05,600 --> 00:16:08,959
and yeah it's not a particularly nice

00:16:07,040 --> 00:16:12,480
library to use so rest stereo

00:16:08,959 --> 00:16:12,480
much easier much more pythonic

00:16:12,800 --> 00:16:16,079
one quick warning for those that don't

00:16:14,240 --> 00:16:18,800
know in gdal

00:16:16,079 --> 00:16:20,320
and in resterio and in any python

00:16:18,800 --> 00:16:23,519
spatial library

00:16:20,320 --> 00:16:25,279
raster bands are measured from band one

00:16:23,519 --> 00:16:27,279
because of the landsat specification so

00:16:25,279 --> 00:16:29,759
band one in a raster in python

00:16:27,279 --> 00:16:31,600
is the same as band one in a landsat

00:16:29,759 --> 00:16:33,440
raster not zero this is

00:16:31,600 --> 00:16:34,720
really just quick aside but it's a

00:16:33,440 --> 00:16:36,160
really important one to know because

00:16:34,720 --> 00:16:39,360
everything else everywhere is indexed on

00:16:36,160 --> 00:16:42,560
zero this is index on one

00:16:39,360 --> 00:16:43,360
but we now have a numpy array and i can

00:16:42,560 --> 00:16:45,440
do things like

00:16:43,360 --> 00:16:47,519
quickly plotting that array out with

00:16:45,440 --> 00:16:49,360
matplotlib i am show

00:16:47,519 --> 00:16:50,880
that's really easy to do everyone's done

00:16:49,360 --> 00:16:52,240
that before and i get a nice little

00:16:50,880 --> 00:16:55,360
picture here

00:16:52,240 --> 00:16:57,360
but again having that there isn't

00:16:55,360 --> 00:17:00,399
particularly useful by itself

00:16:57,360 --> 00:17:03,360
so in comes cardo pi now has anyone used

00:17:00,399 --> 00:17:06,959
matplotlib basemap before

00:17:03,360 --> 00:17:09,760
one couple okay it's not very friendly

00:17:06,959 --> 00:17:10,640
um it takes a lot of work to get a nice

00:17:09,760 --> 00:17:14,160
looking map

00:17:10,640 --> 00:17:16,319
in matplotlib base map so the british

00:17:14,160 --> 00:17:18,079
uh office of meteorology or british

00:17:16,319 --> 00:17:20,400
british mint office i should say

00:17:18,079 --> 00:17:21,199
um built cartoba it's been around or

00:17:20,400 --> 00:17:23,760
they've had

00:17:21,199 --> 00:17:25,679
in production since about 2012 but it's

00:17:23,760 --> 00:17:27,600
really only gone live in the last

00:17:25,679 --> 00:17:30,240
six to twelve months it's available on

00:17:27,600 --> 00:17:32,080
github um it's a bit of a killer because

00:17:30,240 --> 00:17:33,280
it's actually not in the cheese shop so

00:17:32,080 --> 00:17:35,679
if you want to get access to this

00:17:33,280 --> 00:17:37,760
go to the github repository download it

00:17:35,679 --> 00:17:41,120
oh hell

00:17:37,760 --> 00:17:41,120
and install it yourself

00:17:41,200 --> 00:17:44,720
but happily every map in this

00:17:42,880 --> 00:17:46,160
presentation was made in cardiff

00:17:44,720 --> 00:17:48,400
it's actually really easy to use it's

00:17:46,160 --> 00:17:52,240
really fast

00:17:48,400 --> 00:17:54,960
so in carter pi as a quick aside

00:17:52,240 --> 00:17:56,559
every object has a projection because

00:17:54,960 --> 00:17:58,240
we're concerned with spatial data

00:17:56,559 --> 00:18:00,000
everything has to have a projection

00:17:58,240 --> 00:18:02,080
including the canvas itself

00:18:00,000 --> 00:18:04,960
and what this means is that cuddle pie

00:18:02,080 --> 00:18:06,080
can reproject data on the fly

00:18:04,960 --> 00:18:08,160
so if i have data in different

00:18:06,080 --> 00:18:09,120
projections if for example my raster

00:18:08,160 --> 00:18:12,160
data

00:18:09,120 --> 00:18:14,720
which is in um a projection a

00:18:12,160 --> 00:18:16,559
say utm zone 56 south which is what

00:18:14,720 --> 00:18:19,679
we're in

00:18:16,559 --> 00:18:20,799
and my tweets for instance are just lats

00:18:19,679 --> 00:18:24,000
and longs

00:18:20,799 --> 00:18:26,480
so they're in simple wgs 84 lat long

00:18:24,000 --> 00:18:28,080
then cuddle pi as long as it's told what

00:18:26,480 --> 00:18:29,760
projection the data is in

00:18:28,080 --> 00:18:32,400
and what projection the output frame is

00:18:29,760 --> 00:18:34,960
in will do the reprojection on the fly

00:18:32,400 --> 00:18:35,520
on the map for you that and that makes

00:18:34,960 --> 00:18:38,000
it life

00:18:35,520 --> 00:18:39,039
a whole lot easier and it's really easy

00:18:38,000 --> 00:18:41,600
to make

00:18:39,039 --> 00:18:42,080
a projection in cardo pi i won't explain

00:18:41,600 --> 00:18:44,400
now

00:18:42,080 --> 00:18:45,520
what an epsg zone is i'm not sure i've

00:18:44,400 --> 00:18:48,720
got much time left

00:18:45,520 --> 00:18:49,200
but we'll keep going in the in the

00:18:48,720 --> 00:18:52,960
meantime

00:18:49,200 --> 00:18:55,200
cool 10 minutes easy so an eps g

00:18:52,960 --> 00:18:56,799
number id is really easy to build a

00:18:55,200 --> 00:18:58,039
projection card pipe from

00:18:56,799 --> 00:18:59,840
uh you can grab those online

00:18:58,039 --> 00:19:02,880
spatialreference.org

00:18:59,840 --> 00:19:04,799
great the other tip i really have here

00:19:02,880 --> 00:19:05,919
is really important is if you can

00:19:04,799 --> 00:19:07,840
possibly avoid it

00:19:05,919 --> 00:19:10,000
and you've got a raster image don't try

00:19:07,840 --> 00:19:11,679
and reproject it it's lossy

00:19:10,000 --> 00:19:13,440
and takes a long time and a lot of

00:19:11,679 --> 00:19:14,799
memory if you've got vector data

00:19:13,440 --> 00:19:16,640
it's really easy to reproject that

00:19:14,799 --> 00:19:18,400
because it's just a simple

00:19:16,640 --> 00:19:20,559
point-to-point reprojection

00:19:18,400 --> 00:19:22,320
rasters have a have that but they also

00:19:20,559 --> 00:19:23,440
need to be interpolated so if you can

00:19:22,320 --> 00:19:24,240
keep the raster in the original

00:19:23,440 --> 00:19:25,520
projection

00:19:24,240 --> 00:19:27,919
your life is going to be a whole lot

00:19:25,520 --> 00:19:27,919
easier

00:19:28,480 --> 00:19:33,760
okay then if i want to

00:19:31,600 --> 00:19:35,600
it's simply a matter of setting the

00:19:33,760 --> 00:19:37,840
projection on the map

00:19:35,600 --> 00:19:39,360
one line of code adding some gridlines

00:19:37,840 --> 00:19:41,120
because i can

00:19:39,360 --> 00:19:42,799
adding some data so i'm going to add my

00:19:41,120 --> 00:19:44,240
image and you can just see that this is

00:19:42,799 --> 00:19:46,240
straight matplotlib

00:19:44,240 --> 00:19:47,919
imagery the only differences here are

00:19:46,240 --> 00:19:51,600
the transformation

00:19:47,919 --> 00:19:53,840
object which is my cardo pi projection

00:19:51,600 --> 00:19:55,520
and the extent for the images so the

00:19:53,840 --> 00:19:56,799
extent is just the bound of the image

00:19:55,520 --> 00:19:58,400
because the image itself

00:19:56,799 --> 00:19:59,919
contains no better data about where it

00:19:58,400 --> 00:20:01,679
is in space

00:19:59,919 --> 00:20:02,960
and then i can simply add that and if i

00:20:01,679 --> 00:20:05,440
want to cardify

00:20:02,960 --> 00:20:06,880
really simply supports adding shapely

00:20:05,440 --> 00:20:08,080
geometries to the map

00:20:06,880 --> 00:20:09,200
so if i have a stack of shapely

00:20:08,080 --> 00:20:09,919
geometries because i've done some

00:20:09,200 --> 00:20:11,760
analysis

00:20:09,919 --> 00:20:13,440
and got some clusters then i can really

00:20:11,760 --> 00:20:14,080
simply add those with the add geometries

00:20:13,440 --> 00:20:16,799
feature

00:20:14,080 --> 00:20:17,360
now i know having used shapely for a

00:20:16,799 --> 00:20:19,679
while

00:20:17,360 --> 00:20:21,600
it has been for a while a massive pain

00:20:19,679 --> 00:20:24,159
to plot shapely geometries out

00:20:21,600 --> 00:20:24,720
this makes it really easy because in

00:20:24,159 --> 00:20:28,960
those

00:20:24,720 --> 00:20:31,440
simple lines of code i have that

00:20:28,960 --> 00:20:33,039
and this is a map showing tweets in and

00:20:31,440 --> 00:20:35,679
around the brisbane convention center

00:20:33,039 --> 00:20:36,799
with some clusters as convex hulls the

00:20:35,679 --> 00:20:38,159
imagery in the background

00:20:36,799 --> 00:20:39,600
i've got some gridlines on top if i

00:20:38,159 --> 00:20:41,280
wanted to i could start adding scale

00:20:39,600 --> 00:20:44,559
bars i can add titles and i can

00:20:41,280 --> 00:20:45,840
add labels um and really that's all

00:20:44,559 --> 00:20:47,919
there is to it i mean

00:20:45,840 --> 00:20:49,360
going from simply reading your basic

00:20:47,919 --> 00:20:52,480
data

00:20:49,360 --> 00:20:54,880
in using fiona and rasterio

00:20:52,480 --> 00:20:55,840
to plotting it on a nice looking map

00:20:54,880 --> 00:20:57,840
with cardify

00:20:55,840 --> 00:20:59,120
has actually become a whole lot easier

00:20:57,840 --> 00:21:00,400
in the last say

00:20:59,120 --> 00:21:02,720
six to twelve months than it has been

00:21:00,400 --> 00:21:05,200
previously and that opens up i think

00:21:02,720 --> 00:21:06,720
the gis python library even further so

00:21:05,200 --> 00:21:07,600
not only now can we actually do the

00:21:06,720 --> 00:21:09,520
analysis

00:21:07,600 --> 00:21:11,840
and do all the hard work we can start to

00:21:09,520 --> 00:21:14,880
do things like automating map production

00:21:11,840 --> 00:21:15,360
if for example you need to look at all

00:21:14,880 --> 00:21:16,880
the

00:21:15,360 --> 00:21:18,400
weather data that we have that's coming

00:21:16,880 --> 00:21:19,679
in from the bureau of met which is why

00:21:18,400 --> 00:21:21,039
cardify is there

00:21:19,679 --> 00:21:22,240
and you need to do some calculations and

00:21:21,039 --> 00:21:22,880
then you need to produce some maps on

00:21:22,240 --> 00:21:24,159
the other end

00:21:22,880 --> 00:21:25,919
you don't want someone doing that

00:21:24,159 --> 00:21:26,960
manually this makes it easy because you

00:21:25,919 --> 00:21:29,120
can go through

00:21:26,960 --> 00:21:30,000
and do it consistently in every time in

00:21:29,120 --> 00:21:33,039
the same way

00:21:30,000 --> 00:21:33,840
set up these parameters and i think this

00:21:33,039 --> 00:21:35,919
looks all right

00:21:33,840 --> 00:21:37,200
it's not great but you know for 12 lines

00:21:35,919 --> 00:21:40,559
of code it's pretty good

00:21:37,200 --> 00:21:45,520
and really that's all there is to it so

00:21:40,559 --> 00:21:48,799
um so

00:21:45,520 --> 00:21:52,080
um no

00:21:48,799 --> 00:21:55,440
sorry i'll put it back up haha

00:21:52,080 --> 00:21:55,440
everyone's a two can two kids are cool

00:21:57,200 --> 00:22:00,720
uh no these aren't just tweets about the

00:21:59,440 --> 00:22:01,919
conference these are just tweets in

00:22:00,720 --> 00:22:04,480
general i'll show you just

00:22:01,919 --> 00:22:05,520
my ipython notebook in a sec how i can

00:22:04,480 --> 00:22:07,760
get tweets out

00:22:05,520 --> 00:22:09,360
um this is just tweets in general and

00:22:07,760 --> 00:22:10,880
these were only the tweets until i sort

00:22:09,360 --> 00:22:13,360
of did this slide at about

00:22:10,880 --> 00:22:15,679
i know midnight on friday so if i want

00:22:13,360 --> 00:22:19,520
to look at a bit more data

00:22:15,679 --> 00:22:19,520
i will jump across to my

00:22:19,760 --> 00:22:24,480
ipython notebook and you can see all the

00:22:21,840 --> 00:22:28,799
code that's hopefully

00:22:24,480 --> 00:22:28,799
great okay can everyone see this

00:22:29,760 --> 00:22:33,760
sweet good great all right you can see

00:22:32,320 --> 00:22:35,520
all the code that's involved import some

00:22:33,760 --> 00:22:37,280
libraries

00:22:35,520 --> 00:22:38,720
just set up some standard projection

00:22:37,280 --> 00:22:41,120
stuff so

00:22:38,720 --> 00:22:42,400
um basically if i'm interested in

00:22:41,120 --> 00:22:43,919
knowing what projections are

00:22:42,400 --> 00:22:45,600
and i want to know where things are for

00:22:43,919 --> 00:22:46,640
example the brisbane convention center

00:22:45,600 --> 00:22:48,640
i've got the position of that in

00:22:46,640 --> 00:22:49,600
latitude and longitude it's really easy

00:22:48,640 --> 00:22:51,440
to take that point

00:22:49,600 --> 00:22:54,320
project it in space and get an answer

00:22:51,440 --> 00:22:57,600
out the other side

00:22:54,320 --> 00:23:00,799
um i'll just quickly oh jeez

00:22:57,600 --> 00:23:05,039
skipping way ahead sorry

00:23:00,799 --> 00:23:07,840
ah the devils are doing live demos

00:23:05,039 --> 00:23:08,480
all right i should remember this so if i

00:23:07,840 --> 00:23:11,520
input that

00:23:08,480 --> 00:23:14,720
do that do that set up some things okay

00:23:11,520 --> 00:23:18,000
here i can really simply uh

00:23:14,720 --> 00:23:20,720
set up my evenings okay

00:23:18,000 --> 00:23:22,400
here is my simple reading of my points

00:23:20,720 --> 00:23:24,960
into an umpire array

00:23:22,400 --> 00:23:26,480
i already showed you this so this is

00:23:24,960 --> 00:23:27,679
just simply opening a shapefile

00:23:26,480 --> 00:23:31,120
and that's all the code that there needs

00:23:27,679 --> 00:23:31,120
to be in fiona it's great

00:23:31,360 --> 00:23:34,640
this is just making a cluster seen that

00:23:33,360 --> 00:23:35,280
these are all my classes at the other

00:23:34,640 --> 00:23:36,880
end

00:23:35,280 --> 00:23:38,320
so you can see the numbers there rash

00:23:36,880 --> 00:23:39,200
stereo now you'll notice there's a bit

00:23:38,320 --> 00:23:41,120
more code here

00:23:39,200 --> 00:23:42,480
because the actual image i've got is

00:23:41,120 --> 00:23:44,159
huge and

00:23:42,480 --> 00:23:45,520
quite a fine resolution part of the

00:23:44,159 --> 00:23:46,320
reason that i want to cut it down so

00:23:45,520 --> 00:23:48,960
much

00:23:46,320 --> 00:23:51,279
is that my computer will quickly run out

00:23:48,960 --> 00:23:53,200
of memory

00:23:51,279 --> 00:23:54,480
so you'll notice here that i'm doing a

00:23:53,200 --> 00:23:56,880
couple of calculations

00:23:54,480 --> 00:23:57,919
with source.define and the source of

00:23:56,880 --> 00:24:00,159
define is just a quick

00:23:57,919 --> 00:24:01,760
matrix transformation to transform from

00:24:00,159 --> 00:24:02,640
column references to projected

00:24:01,760 --> 00:24:04,960
references

00:24:02,640 --> 00:24:07,039
and the tilde source solid phone does

00:24:04,960 --> 00:24:09,520
the reverse

00:24:07,039 --> 00:24:10,880
okay but that just reads in my chunk of

00:24:09,520 --> 00:24:14,159
data

00:24:10,880 --> 00:24:15,760
that i care about okay and this is

00:24:14,159 --> 00:24:17,039
basically all the code there is to

00:24:15,760 --> 00:24:18,799
making a map now you notice there's a

00:24:17,039 --> 00:24:20,720
bunch of lines commented out here

00:24:18,799 --> 00:24:22,159
i don't need those at all it's just

00:24:20,720 --> 00:24:23,520
these are some features that i was using

00:24:22,159 --> 00:24:25,919
when i was making my slides

00:24:23,520 --> 00:24:26,880
to add a coastline to add uh land

00:24:25,919 --> 00:24:29,039
polygons

00:24:26,880 --> 00:24:30,320
to block out things to add uh state

00:24:29,039 --> 00:24:31,919
boundaries and the rest that's actually

00:24:30,320 --> 00:24:33,120
really easy to do cutter pie offers a

00:24:31,919 --> 00:24:36,240
lot of these

00:24:33,120 --> 00:24:36,240
and i can just do this on the fly

00:24:37,039 --> 00:24:41,440
and hopefully assuming that this doesn't

00:24:39,600 --> 00:24:43,760
break on me

00:24:41,440 --> 00:24:43,760
yes

00:24:44,559 --> 00:24:49,279
okay so here we have a lot more tweets

00:24:46,960 --> 00:24:52,240
um shockingly this was done yesterday

00:24:49,279 --> 00:24:53,360
last night um which is great but we

00:24:52,240 --> 00:24:56,240
still don't really know

00:24:53,360 --> 00:24:57,200
who's tweeting about the python stuff so

00:24:56,240 --> 00:24:58,960
if i was curious

00:24:57,200 --> 00:25:01,279
and that's the kind of person that i am

00:24:58,960 --> 00:25:04,880
i've actually taken from these tweets

00:25:01,279 --> 00:25:06,400
um the number of um

00:25:04,880 --> 00:25:07,760
people that mentioned python in the name

00:25:06,400 --> 00:25:08,159
i can do a quick relational analysis

00:25:07,760 --> 00:25:10,880
using

00:25:08,159 --> 00:25:11,760
pytal which i'll leave off for now

00:25:10,880 --> 00:25:13,600
because

00:25:11,760 --> 00:25:16,720
um you probably don't care for that

00:25:13,600 --> 00:25:16,720
again he's drawing a map

00:25:17,919 --> 00:25:20,400
there we go

00:25:23,360 --> 00:25:26,640
so here we can see highly spatially

00:25:25,520 --> 00:25:28,799
dependent tweets

00:25:26,640 --> 00:25:30,080
hmm that's suspicious um and if i wanted

00:25:28,799 --> 00:25:32,720
to just check that against the actual

00:25:30,080 --> 00:25:32,720
number of tweets

00:25:33,919 --> 00:25:37,039
there you go there's all the tweets

00:25:35,600 --> 00:25:39,919
about python

00:25:37,039 --> 00:25:43,840
and that's me done any questions or the

00:25:39,919 --> 00:25:43,840

YouTube URL: https://www.youtube.com/watch?v=MtCdglJiEwM


