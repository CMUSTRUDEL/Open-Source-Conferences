Title: Serialization formats aren't toys by Tom Eastman
Publication date: 2014-08-07
Playlist: PyCon Australia 2014
Description: 
	Do you have an API? 

Do you accept input from users? Do you accept it in XML? What about YAML? Or maybe JSON? How safe are you?

Are you sure?

It’s not in the OWASP Top 10, but you don’t have to look far to hear stories of security vulnerabilities involving deserialization of user input. Why do they keep happening?

In this talk I’ll go over what the threat is, how you are making yourself vulnerable and how to mitigate the problem. I’ll cover the features (not bugs, features) of formats like XML, YAML, and JSON that make them surprisingly dangerous, and how to protect your code from them.

Because here’s the thing: If you are using, say, a compliant, properly implemented XML parser to parse your XML, you are NOT safe. Possibly quite the opposite.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:05,240 --> 00:00:11,030
they we have serialization formats

00:00:07,700 --> 00:00:12,950
aren't toys with tom eastman tom is a

00:00:11,030 --> 00:00:15,410
senior Python developer and technical

00:00:12,950 --> 00:00:17,300
lead for catalyst IT New Zealand's

00:00:15,410 --> 00:00:19,610
largest company specializing in open

00:00:17,300 --> 00:00:21,410
source prior to that he worked as a

00:00:19,610 --> 00:00:23,420
developer and system administrator for

00:00:21,410 --> 00:00:25,970
the University of Otago faculty of

00:00:23,420 --> 00:00:28,910
medicine and as a computer science tutor

00:00:25,970 --> 00:00:31,310
for same tom is also the director of

00:00:28,910 --> 00:00:32,660
this year's Kiwi pycon and we'll be

00:00:31,310 --> 00:00:34,910
spending significant amounts of time

00:00:32,660 --> 00:00:37,190
trying to convince you all to try to fly

00:00:34,910 --> 00:00:39,140
to Wellington for more python fun five

00:00:37,190 --> 00:00:47,930
weeks after pike on au has concluded

00:00:39,140 --> 00:00:55,000
thank you Tom you guys should all play

00:00:47,930 --> 00:00:55,000
the Wellington five weeks from now so

00:00:55,119 --> 00:01:05,720
probably not um so my name is Tom feed

00:01:01,760 --> 00:01:08,479
Becky already uh and i am an open source

00:01:05,720 --> 00:01:12,380
type just says so i'm even labeled that

00:01:08,479 --> 00:01:15,649
way i'm a Python developer and i have

00:01:12,380 --> 00:01:18,950
delusions of DevOps I'm not a security

00:01:15,649 --> 00:01:21,079
expert or a penetration tester but all

00:01:18,950 --> 00:01:23,240
my drinking buddies are and so I've

00:01:21,079 --> 00:01:24,560
developed a healthy paranoid worldview

00:01:23,240 --> 00:01:26,780
because I don't like it when they break

00:01:24,560 --> 00:01:30,020
my toys which actually one of them is

00:01:26,780 --> 00:01:31,159
doing tomorrow a contractor is going to

00:01:30,020 --> 00:01:33,200
be breaking my project I've been working

00:01:31,159 --> 00:01:33,829
on for two years which is going to mean

00:01:33,200 --> 00:01:37,819
that I'm going to be a little

00:01:33,829 --> 00:01:40,030
preoccupied during the sprints and who

00:01:37,819 --> 00:01:42,829
are you guys who here today is actually

00:01:40,030 --> 00:01:45,770
in the security industry whose a

00:01:42,829 --> 00:01:48,069
penetration tester or a security test or

00:01:45,770 --> 00:01:52,579
works for a security company or a hacker

00:01:48,069 --> 00:01:54,079
someone dangerous that guy he knows

00:01:52,579 --> 00:01:55,369
everything I'm going to be talking about

00:01:54,079 --> 00:01:58,310
today and he's going to be smiling

00:01:55,369 --> 00:01:59,749
smugly through the entire talk if you're

00:01:58,310 --> 00:02:01,249
an IT security professional you already

00:01:59,749 --> 00:02:03,200
know all this stuff if you're a

00:02:01,249 --> 00:02:04,880
developer you might know it but you

00:02:03,200 --> 00:02:06,649
might not and you have to know that it's

00:02:04,880 --> 00:02:10,300
even a thing or you're gonna get in a

00:02:06,649 --> 00:02:10,300
lot of trouble without even realizing it

00:02:10,630 --> 00:02:15,110
it's this is one of those topics where

00:02:13,069 --> 00:02:17,550
if you know about it it seems obvious it

00:02:15,110 --> 00:02:18,990
seems remedial but the same

00:02:17,550 --> 00:02:20,700
keep happening over and over again so

00:02:18,990 --> 00:02:23,070
some people just need to be told so if

00:02:20,700 --> 00:02:25,850
this is new to you today spread the word

00:02:23,070 --> 00:02:28,650
I am going to be talking about

00:02:25,850 --> 00:02:30,150
serialization formats or markup

00:02:28,650 --> 00:02:32,340
languages or whatever you call them I

00:02:30,150 --> 00:02:35,640
basically just mean formats that

00:02:32,340 --> 00:02:36,720
structured data that doesn't in a way

00:02:35,640 --> 00:02:37,950
that doesn't suck so we can get

00:02:36,720 --> 00:02:40,560
information out of them there's a

00:02:37,950 --> 00:02:43,290
billion of them in all kinds of

00:02:40,560 --> 00:02:44,820
languages and uses and all of them have

00:02:43,290 --> 00:02:46,470
little surprises tucked away that you

00:02:44,820 --> 00:02:48,900
probably didn't realize when you just

00:02:46,470 --> 00:02:51,720
went you know Jason load or yamo

00:02:48,900 --> 00:02:55,320
download all of them are too smart for

00:02:51,720 --> 00:02:56,190
their own good today I'm just talking

00:02:55,320 --> 00:02:59,100
about three of them I'm going to be

00:02:56,190 --> 00:03:00,510
talking about llamo XML and Jason but

00:02:59,100 --> 00:03:02,760
they're just examples of my larger point

00:03:00,510 --> 00:03:06,090
because this this pattern just kind of

00:03:02,760 --> 00:03:10,050
repeats itself over and over again who's

00:03:06,090 --> 00:03:11,490
familiar with the OWASP top 10 the stuff

00:03:10,050 --> 00:03:13,260
that I'm going to be talking about is

00:03:11,490 --> 00:03:15,240
not on the OWASP top 10 because it's

00:03:13,260 --> 00:03:17,150
actually somewhere around 11 or 13 and

00:03:15,240 --> 00:03:19,320
that just means no one knows about it

00:03:17,150 --> 00:03:22,800
sorry hands up who doesn't know about

00:03:19,320 --> 00:03:25,320
the top 10 okay a couple of great google

00:03:22,800 --> 00:03:28,230
it after the talk and read up on the

00:03:25,320 --> 00:03:31,200
OWASP top 10 it is a yearly ish notes

00:03:28,230 --> 00:03:34,260
like to buy yearly compiled list of the

00:03:31,200 --> 00:03:36,450
top 10 web vulnerabilities if you are a

00:03:34,260 --> 00:03:38,730
web developer and you are not intimately

00:03:36,450 --> 00:03:41,310
familiar with the top 10 euro liability

00:03:38,730 --> 00:03:42,480
to your project and that can be fixed

00:03:41,310 --> 00:03:43,860
you just have to go there and you just

00:03:42,480 --> 00:03:46,020
have to read up on this stuff and learn

00:03:43,860 --> 00:03:47,940
how to defend yourself against these

00:03:46,020 --> 00:03:51,780
very well known exploits that will be

00:03:47,940 --> 00:03:53,100
attempted on your sights I've been

00:03:51,780 --> 00:03:55,680
working on a project for the last two

00:03:53,100 --> 00:03:57,090
years where one of the non-functional

00:03:55,680 --> 00:03:58,650
requirements was that defenses were in

00:03:57,090 --> 00:03:59,760
place for everything in the OS top 10

00:03:58,650 --> 00:04:01,620
and I thought I had done a really good

00:03:59,760 --> 00:04:03,000
job of that partly because i was using

00:04:01,620 --> 00:04:05,850
django and you get a lot of good defense

00:04:03,000 --> 00:04:07,440
for free and then i went to a talk by a

00:04:05,850 --> 00:04:08,550
penetration tester named mike howarth

00:04:07,440 --> 00:04:10,890
who's an old colleague of mine from

00:04:08,550 --> 00:04:13,290
university and he showed me some stuff

00:04:10,890 --> 00:04:16,230
in XML that scared the crap out of me

00:04:13,290 --> 00:04:18,150
and I went back from the pub back to

00:04:16,230 --> 00:04:20,970
work tried it out on my own project and

00:04:18,150 --> 00:04:25,530
made my servers blow up so I decided to

00:04:20,970 --> 00:04:27,120
take this more seriously because the

00:04:25,530 --> 00:04:28,680
problem is an attacker only needs to

00:04:27,120 --> 00:04:29,580
know one thing that you don't about the

00:04:28,680 --> 00:04:34,199
system that you're using

00:04:29,580 --> 00:04:36,289
and they can break in and there's a lot

00:04:34,199 --> 00:04:41,069
of things that you might think you know

00:04:36,289 --> 00:04:42,629
in yeah the really smart hackers know

00:04:41,069 --> 00:04:44,250
all of the features in all this software

00:04:42,629 --> 00:04:46,409
so when you're using a tool and they can

00:04:44,250 --> 00:04:48,750
go hey I wonder if they knew to turn off

00:04:46,409 --> 00:04:51,629
such and such maybe you didn't because

00:04:48,750 --> 00:04:55,560
you didn't really care everything I'm

00:04:51,629 --> 00:04:58,110
going to talk about is not a bug it is a

00:04:55,560 --> 00:04:59,699
feature this is all stuff that when

00:04:58,110 --> 00:05:03,000
these languages were designed this was

00:04:59,699 --> 00:05:04,199
intentionally put in as a thing that hey

00:05:03,000 --> 00:05:05,789
what a great idea let's let's make sure

00:05:04,199 --> 00:05:08,599
XML does this hey what a great idea

00:05:05,789 --> 00:05:10,650
let's make sure yeah mo does this

00:05:08,599 --> 00:05:13,469
nothing that I'm talking about today is

00:05:10,650 --> 00:05:18,210
a bug the more compliant your XML parser

00:05:13,469 --> 00:05:19,289
is the more vulnerable you are is that

00:05:18,210 --> 00:05:23,430
very readable to everyone in the

00:05:19,289 --> 00:05:25,650
audience it's okay so this is a really

00:05:23,430 --> 00:05:27,810
tiny bottle app it's a little tiny web

00:05:25,650 --> 00:05:31,379
app and it's doing something really

00:05:27,810 --> 00:05:33,870
really simple which is it has 33

00:05:31,379 --> 00:05:35,669
endpoints and if you post yeah Mille to

00:05:33,870 --> 00:05:38,219
one of them it just runs it through the

00:05:35,669 --> 00:05:40,680
Python llamo parser and if you post XML

00:05:38,219 --> 00:05:42,330
to it it runs it through the Python XML

00:05:40,680 --> 00:05:45,060
parser and then the third one is

00:05:42,330 --> 00:05:46,319
actually the lxml Python parser which is

00:05:45,060 --> 00:05:48,560
not the standard library one but it's

00:05:46,319 --> 00:05:52,740
the one that practically everyone uses

00:05:48,560 --> 00:05:55,919
and the key point that I want to draw

00:05:52,740 --> 00:05:57,960
your attention to here is in each of

00:05:55,919 --> 00:06:00,000
these examples I'm doing the bare

00:05:57,960 --> 00:06:02,969
minimum that it would take to go from a

00:06:00,000 --> 00:06:05,539
text file with some XML in it to a

00:06:02,969 --> 00:06:09,839
useful data structure that you can use

00:06:05,539 --> 00:06:12,089
because when you think about it loading

00:06:09,839 --> 00:06:13,650
data into your project loading data into

00:06:12,089 --> 00:06:15,479
your program is the least interesting

00:06:13,650 --> 00:06:17,849
part of your day you want to do that as

00:06:15,479 --> 00:06:20,460
quickly as possible you don't care you

00:06:17,849 --> 00:06:22,979
go you're using an ID and you go okay

00:06:20,460 --> 00:06:25,650
this is yamo file import yeah mo hey we

00:06:22,979 --> 00:06:26,909
have a llamo module yeah MoDOT tab look

00:06:25,650 --> 00:06:28,620
at the autocomplete oh there's a thing

00:06:26,909 --> 00:06:31,139
called load yeah mo download it takes a

00:06:28,620 --> 00:06:32,190
file we're done and that's all you care

00:06:31,139 --> 00:06:34,500
about because you want the data you

00:06:32,190 --> 00:06:40,979
don't care about that'sthat's that's as

00:06:34,500 --> 00:06:42,389
far as you're gonna dig so all of my

00:06:40,979 --> 00:06:43,589
examples that I'm going to just talk

00:06:42,389 --> 00:06:44,819
about here we're just using this piece

00:06:43,589 --> 00:06:47,459
of code that I was doing just to check

00:06:44,819 --> 00:06:49,529
and see what happens we'll start with

00:06:47,459 --> 00:06:51,930
the ammo because it's actually been

00:06:49,529 --> 00:06:55,319
quite topical lately thank goodness XML

00:06:51,930 --> 00:06:58,050
is not topical anymore um yeah most been

00:06:55,319 --> 00:06:59,880
around since 2001 ish and it's really

00:06:58,050 --> 00:07:03,810
popular in languages like Ruby and

00:06:59,880 --> 00:07:07,649
Python and probably none else I don't

00:07:03,810 --> 00:07:09,300
know oh no uses doesn't it it pretends

00:07:07,649 --> 00:07:12,389
to be a human readable serialization

00:07:09,300 --> 00:07:13,709
format they human readable never works

00:07:12,389 --> 00:07:19,080
when it comes to actual serialization

00:07:13,709 --> 00:07:22,020
does it and what we're here is an

00:07:19,080 --> 00:07:24,539
example use of that silly little web app

00:07:22,020 --> 00:07:27,569
that I had written which is I posted the

00:07:24,539 --> 00:07:29,819
text its line numbers on the left and I

00:07:27,569 --> 00:07:31,289
posted a bit of Gamal to the Amal

00:07:29,819 --> 00:07:33,719
endpoint and what I got back was a

00:07:31,289 --> 00:07:36,509
Python dictionary okay so is everyone

00:07:33,719 --> 00:07:39,509
with me so far yeah really really simple

00:07:36,509 --> 00:07:40,949
stuff yeah mo just uses a key value that

00:07:39,509 --> 00:07:42,479
almost looks exactly like a Python

00:07:40,949 --> 00:07:45,060
dictionary anyway and what I get back

00:07:42,479 --> 00:07:47,880
out is the parsed version of that Python

00:07:45,060 --> 00:07:51,120
dictionary so far so good key value all

00:07:47,880 --> 00:07:53,940
strings yeah mo has the standard set of

00:07:51,120 --> 00:07:56,279
data type as bullion's I know it has

00:07:53,940 --> 00:07:58,800
numbers it's got strings and then it has

00:07:56,279 --> 00:08:00,569
some extensions and the extensions are

00:07:58,800 --> 00:08:02,639
actually really really handy here's an

00:08:00,569 --> 00:08:05,099
example of one of them so we've got my

00:08:02,639 --> 00:08:06,990
name last name email address and then

00:08:05,099 --> 00:08:09,659
that snippet of yamel at the top there

00:08:06,990 --> 00:08:11,399
that's a special tag that says this is

00:08:09,659 --> 00:08:16,169
actually a Python object which is a date

00:08:11,399 --> 00:08:18,089
time date and so what it does is it

00:08:16,169 --> 00:08:20,069
grabs the date-time module and it grabs

00:08:18,089 --> 00:08:21,569
the data object and it passes in those

00:08:20,069 --> 00:08:25,620
arguments for the constructor and then

00:08:21,569 --> 00:08:31,709
you get your object where's the security

00:08:25,620 --> 00:08:33,269
guy is he grinning yet so anyway one of

00:08:31,709 --> 00:08:34,649
the cool things of the ammo the Python

00:08:33,269 --> 00:08:35,789
llamo parser is that if that molecule

00:08:34,649 --> 00:08:38,039
hasn't been loaded it'll just go ahead

00:08:35,789 --> 00:08:41,010
and load it for you because it's really

00:08:38,039 --> 00:08:44,060
convenient that way i did a shipper go

00:08:41,010 --> 00:08:44,060
down 81 spine just then

00:08:45,640 --> 00:08:52,570
ok so imagine someone was posting

00:08:49,490 --> 00:08:55,400
something to your yeah Mel endpoint and

00:08:52,570 --> 00:09:01,280
they decided to put that tagging sorry

00:08:55,400 --> 00:09:05,330
oh oh yeah we're just getting started so

00:09:01,280 --> 00:09:09,130
suddenly you've got interpolated into

00:09:05,330 --> 00:09:12,160
the parse dictionary the contents of my

00:09:09,130 --> 00:09:14,900
project directory my talk directory and

00:09:12,160 --> 00:09:17,990
I was like wow that actually worked far

00:09:14,900 --> 00:09:23,600
better than I thought it would how far

00:09:17,990 --> 00:09:26,380
can we go with this so send in a Python

00:09:23,600 --> 00:09:29,090
thing oh hi Scott system RM star I

00:09:26,380 --> 00:09:30,710
thought to myself I sure want to do this

00:09:29,090 --> 00:09:34,550
before I push enter and I was like f

00:09:30,710 --> 00:09:37,970
push enter and as you can see I did the

00:09:34,550 --> 00:09:45,050
contents trick again and suddenly no

00:09:37,970 --> 00:09:47,330
files so I had to rewrite that code that

00:09:45,050 --> 00:09:54,350
you saw at the start there and I had to

00:09:47,330 --> 00:09:55,580
rewrite my notes for the talk luckily

00:09:54,350 --> 00:09:57,290
there weren't too many files in there

00:09:55,580 --> 00:09:59,150
you'll note you'll note that I was

00:09:57,290 --> 00:10:04,040
reckless and pushed enter when it says

00:09:59,150 --> 00:10:05,600
RM star I didn't put RF there oh there's

00:10:04,040 --> 00:10:10,450
some part of my brain still had a

00:10:05,600 --> 00:10:13,820
self-preservation instinct okay so

00:10:10,450 --> 00:10:15,650
that's egregious right any any llamo

00:10:13,820 --> 00:10:17,000
thing can run any shell command just

00:10:15,650 --> 00:10:19,760
like that and of course it's a it's got

00:10:17,000 --> 00:10:23,200
access to the full Python library surely

00:10:19,760 --> 00:10:27,220
this doesn't happen in real life right

00:10:23,200 --> 00:10:29,510
so here's piston and tasty pie in 2011

00:10:27,220 --> 00:10:32,570
as far as I'm aware the Django rest

00:10:29,510 --> 00:10:33,560
framework didn't have this problem but

00:10:32,570 --> 00:10:38,120
it had other problems we'll get to

00:10:33,560 --> 00:10:39,800
naturally so these both hit the same

00:10:38,120 --> 00:10:45,680
error really early on they were just

00:10:39,800 --> 00:10:47,420
using gamma dot load and you could send

00:10:45,680 --> 00:10:49,760
and this I mean this is actually a REST

00:10:47,420 --> 00:10:52,160
API right so it's open to the Internet

00:10:49,760 --> 00:10:53,630
and it's an open invitation for everyone

00:10:52,160 --> 00:10:55,290
to just run whatever come in they want

00:10:53,630 --> 00:10:57,240
it on your server

00:10:55,290 --> 00:11:04,889
which is you know software-as-a-service

00:10:57,240 --> 00:11:06,600
right this is puppet I gave these guys

00:11:04,889 --> 00:11:08,100
so much more credit this was the thing

00:11:06,600 --> 00:11:10,709
that actually prompted made him to write

00:11:08,100 --> 00:11:13,290
this talk because when this happened I i

00:11:10,709 --> 00:11:18,959
cried i was like no puppet I believed in

00:11:13,290 --> 00:11:20,940
you um and the same exact problem no ah

00:11:18,959 --> 00:11:22,560
this is Ruby on Rails sorry I've got my

00:11:20,940 --> 00:11:24,089
slides around the wrong way this is Ruby

00:11:22,560 --> 00:11:28,649
on Rails and I had no faith in them and

00:11:24,089 --> 00:11:30,029
this is totally expected and this is

00:11:28,649 --> 00:11:33,420
Ruby on Rails and i have no faith in

00:11:30,029 --> 00:11:36,810
them and it's totally expected however

00:11:33,420 --> 00:11:39,839
in Ruby's defense the Ruby llamo parser

00:11:36,810 --> 00:11:41,430
does not go out and load the module so

00:11:39,839 --> 00:11:42,690
the guys who exploited this Ruby on

00:11:41,430 --> 00:11:44,100
Rails vulnerability which you probably

00:11:42,690 --> 00:11:45,600
remember from last year because everyone

00:11:44,100 --> 00:11:50,040
was laughing at and I think because

00:11:45,600 --> 00:11:51,269
we're mean that way they had to go

00:11:50,040 --> 00:11:52,560
through the Ruby on Rails code base

00:11:51,269 --> 00:11:54,300
until they found a thing that was

00:11:52,560 --> 00:11:55,920
already loaded in memory that would then

00:11:54,300 --> 00:11:57,810
eval code and that's how they got their

00:11:55,920 --> 00:11:59,100
code execution in the pipe the Python

00:11:57,810 --> 00:12:00,660
one we'll just load that module for you

00:11:59,100 --> 00:12:04,350
the Python module we'll just load the

00:12:00,660 --> 00:12:05,190
exact for you and here's the puppet one

00:12:04,350 --> 00:12:09,269
and this is the one that really

00:12:05,190 --> 00:12:13,079
disappointed me and here's the node 1

00:12:09,269 --> 00:12:14,639
and I didn't care but but you see it's

00:12:13,079 --> 00:12:17,550
the same it's the same mistake every

00:12:14,639 --> 00:12:22,410
time and they say hey maybe you should

00:12:17,550 --> 00:12:24,420
use safe load instead and maybe it

00:12:22,410 --> 00:12:25,709
should have been safe from the start but

00:12:24,420 --> 00:12:27,389
actually the node one's hilarious

00:12:25,709 --> 00:12:28,980
because there was no such thing as safe

00:12:27,389 --> 00:12:30,420
load until someone started exploiting

00:12:28,980 --> 00:12:33,779
this and then they wrote safe load

00:12:30,420 --> 00:12:35,550
really fast so I've preempted myself a

00:12:33,779 --> 00:12:37,440
little bit how do you protect yourself

00:12:35,550 --> 00:12:39,720
from this one you've got to make the

00:12:37,440 --> 00:12:42,000
parser stupid you've got to make it

00:12:39,720 --> 00:12:43,290
stupid enough to be safe because people

00:12:42,000 --> 00:12:46,829
are going to take advantage of whatever

00:12:43,290 --> 00:12:49,290
you expose to the wider world in Python

00:12:46,829 --> 00:12:51,149
this is really really easy the yamo

00:12:49,290 --> 00:12:52,649
module has two methods one's called

00:12:51,149 --> 00:12:55,170
llamo dot load which is what I was using

00:12:52,649 --> 00:12:57,959
the other one is yellow dots safe load

00:12:55,170 --> 00:13:02,550
it says that's what it says on the tin

00:12:57,959 --> 00:13:03,810
but um Ruby you have to do something a

00:13:02,550 --> 00:13:06,209
little bit weirder you have to get an

00:13:03,810 --> 00:13:07,560
extra ruby gem that sanitizes it which

00:13:06,209 --> 00:13:09,390
goes in and monkey patch

00:13:07,560 --> 00:13:11,100
the yamo library to do the right thing

00:13:09,390 --> 00:13:12,960
and that sounded really weird to me

00:13:11,100 --> 00:13:14,760
until I talked to a ruby developer and

00:13:12,960 --> 00:13:15,750
they said yeah this is how Ruby works

00:13:14,760 --> 00:13:25,860
everything just monkey patches

00:13:15,750 --> 00:13:29,370
everything but yeah that's that's the mo

00:13:25,860 --> 00:13:34,050
and yeah animals got nothing on eczema

00:13:29,370 --> 00:13:36,270
so who uses xml in their day job last

00:13:34,050 --> 00:13:39,180
time I gave this talk I didn't and now I

00:13:36,270 --> 00:13:42,360
do because I had to rewrite my project

00:13:39,180 --> 00:13:43,890
to incorporate sam'l so now i have xml

00:13:42,360 --> 00:13:45,930
facing the wild and it's being pen

00:13:43,890 --> 00:13:49,200
tested tomorrow and you'll see shortly

00:13:45,930 --> 00:13:50,279
why I'm nervous about that i was going

00:13:49,200 --> 00:13:52,800
to think of something else to call this

00:13:50,279 --> 00:13:55,800
section like fun with xml or dangerous

00:13:52,800 --> 00:14:00,510
xml but but just having that word up

00:13:55,800 --> 00:14:04,260
there isn't scary enough so sorry who

00:14:00,510 --> 00:14:05,730
has used xml everybody great so this is

00:14:04,260 --> 00:14:08,279
totally familiar to everyone this is a

00:14:05,730 --> 00:14:09,870
tiny little xml file and it has an

00:14:08,279 --> 00:14:11,250
entity in it and that entity is for a

00:14:09,870 --> 00:14:13,290
unicode character which is actually that

00:14:11,250 --> 00:14:17,100
little smiley face right there so

00:14:13,290 --> 00:14:18,830
everyone's with me so far but xml is

00:14:17,100 --> 00:14:21,780
more than just kind of a declarative

00:14:18,830 --> 00:14:24,690
elements and attributes and text thing

00:14:21,780 --> 00:14:28,589
because you can define xml documents in

00:14:24,690 --> 00:14:30,720
xml and so you can put something in

00:14:28,589 --> 00:14:32,490
there like doctype foo so now I've

00:14:30,720 --> 00:14:36,360
created a thing called a document foo

00:14:32,490 --> 00:14:38,820
and in that I've created an entity

00:14:36,360 --> 00:14:41,100
called smiley which is just that same

00:14:38,820 --> 00:14:42,690
entity that I was using a second ago but

00:14:41,100 --> 00:14:44,940
now I have a little alias for it so

00:14:42,690 --> 00:14:46,950
ampersand smiley now means that unicode

00:14:44,940 --> 00:14:48,540
character and the response that you get

00:14:46,950 --> 00:14:52,700
out of the xml parser is exactly the

00:14:48,540 --> 00:14:54,780
same so I've just defined an element and

00:14:52,700 --> 00:14:57,690
just made life a little bit easier for

00:14:54,780 --> 00:14:59,459
myself and that's I think how old the

00:14:57,690 --> 00:15:01,310
element entities and stuff in HTML and

00:14:59,459 --> 00:15:05,940
all those sort of things are are built

00:15:01,310 --> 00:15:10,310
at least an XHTML but you can do it

00:15:05,940 --> 00:15:14,370
recursively so I've created there an

00:15:10,310 --> 00:15:16,570
entity called s for an entity called s4

00:15:14,370 --> 00:15:18,520
which is a whole lot of s 3 s

00:15:16,570 --> 00:15:22,750
and an s3 is defined as a whole lot of

00:15:18,520 --> 00:15:25,510
s2 and s2 is a whole lot of smileys and

00:15:22,750 --> 00:15:28,360
suddenly in my actual document there yay

00:15:25,510 --> 00:15:33,330
smile with an S 4 in it I get a couple

00:15:28,360 --> 00:15:39,130
hundred smileys who's having fun so far

00:15:33,330 --> 00:15:42,870
who knows what the name is for this this

00:15:39,130 --> 00:15:42,870
is called the billion laughs attack oh

00:15:44,550 --> 00:15:48,490
okay actually but that's a lie anyway

00:15:47,170 --> 00:15:50,650
this is not the billion laughs attack

00:15:48,490 --> 00:15:53,080
this is the 168 million last attack

00:15:50,650 --> 00:15:55,360
because i cropped one roll off of each

00:15:53,080 --> 00:16:00,280
road to just fit it on the side so it's

00:15:55,360 --> 00:16:02,290
only it's only 168 million now you see

00:16:00,280 --> 00:16:04,870
that response smoking ruin right there

00:16:02,290 --> 00:16:07,120
the simple fact is your XML parser tries

00:16:04,870 --> 00:16:10,300
to do all of that in memory and it blows

00:16:07,120 --> 00:16:14,320
out two terabytes and you get at least

00:16:10,300 --> 00:16:16,960
you get a 500 of some kind and you might

00:16:14,320 --> 00:16:19,390
get an out of him an killer on your

00:16:16,960 --> 00:16:25,270
linux box or a seg fold or whatever but

00:16:19,390 --> 00:16:27,550
it all falls over in a heap and on my

00:16:25,270 --> 00:16:30,790
little parser i never got to try this

00:16:27,550 --> 00:16:33,220
because i copy and pasted the billion

00:16:30,790 --> 00:16:36,430
last attack into my editor and I was

00:16:33,220 --> 00:16:38,200
about to run it on my you know just curl

00:16:36,430 --> 00:16:43,450
upload it to my little service but my

00:16:38,200 --> 00:16:45,700
laptop exploded and died my editor had

00:16:43,450 --> 00:16:52,030
decided oh he's typing XML let's make

00:16:45,700 --> 00:16:56,170
sure it's valid so so I i doused myself

00:16:52,030 --> 00:17:04,570
before I could even douse myself I'm an

00:16:56,170 --> 00:17:06,280
emacs user uh-huh yeah so MX is really

00:17:04,570 --> 00:17:10,600
helpful with its xml until you're trying

00:17:06,280 --> 00:17:12,430
to craft dangerous XML so that's that's

00:17:10,600 --> 00:17:14,260
that's and that's a memory attack that's

00:17:12,430 --> 00:17:16,660
an XML bomb it's really similar to a

00:17:14,260 --> 00:17:18,339
gzip bomb or zip bom or did any of you

00:17:16,660 --> 00:17:24,160
when you were young or more like last

00:17:18,339 --> 00:17:25,870
week compress 10 billion zeros in an

00:17:24,160 --> 00:17:27,430
email to someone and they would unzip it

00:17:25,870 --> 00:17:29,480
in their computer would fall over that's

00:17:27,430 --> 00:17:32,330
that's literally all this is

00:17:29,480 --> 00:17:35,540
it's the same deal just you can do it to

00:17:32,330 --> 00:17:36,559
enterprise web systems and the more

00:17:35,540 --> 00:17:40,490
enterprise you the better because they

00:17:36,559 --> 00:17:42,350
all use XML so that's just a bomb and

00:17:40,490 --> 00:17:43,730
maybe you can protect yourself from that

00:17:42,350 --> 00:17:47,150
by limiting the amount of memory that

00:17:43,730 --> 00:17:50,690
your XML is going to use but entities

00:17:47,150 --> 00:17:53,720
don't have to just be defined in your

00:17:50,690 --> 00:17:56,419
document entities can come from anywhere

00:17:53,720 --> 00:18:02,830
so i can define an entity called LSB

00:17:56,419 --> 00:18:02,830
release and i can point it to a URL that

00:18:03,220 --> 00:18:11,450
works just fine with the standard

00:18:05,690 --> 00:18:13,460
library python xml parser it will

00:18:11,450 --> 00:18:15,650
happily load etsy password and just

00:18:13,460 --> 00:18:18,500
throw it into the XML document and if

00:18:15,650 --> 00:18:22,700
you running on that on a web service the

00:18:18,500 --> 00:18:24,350
XML will get put in and if the user for

00:18:22,700 --> 00:18:25,910
some reason gets to see the XML like if

00:18:24,350 --> 00:18:27,740
it shows an error if it says like oh

00:18:25,910 --> 00:18:30,169
there was an error in your XML and it

00:18:27,740 --> 00:18:33,040
shows you your XML it'll show you the

00:18:30,169 --> 00:18:35,780
parsed canonicalize XML which will have

00:18:33,040 --> 00:18:37,760
NC password in it etsy shadow in it I

00:18:35,780 --> 00:18:41,179
see shadows usually owned by root but

00:18:37,760 --> 00:18:44,179
we're talking enterprise and enterprise

00:18:41,179 --> 00:18:45,620
people tend to run their java things as

00:18:44,179 --> 00:18:48,250
root when they're listening on the

00:18:45,620 --> 00:18:51,590
public internet and you don't believe me

00:18:48,250 --> 00:18:53,720
but I've been told it's true but the guy

00:18:51,590 --> 00:18:58,520
who told me it's true refused to tell me

00:18:53,720 --> 00:18:59,600
who and I can tell I understand why and

00:18:58,520 --> 00:19:01,190
of course it can read its own source

00:18:59,600 --> 00:19:03,200
code which means that it can read

00:19:01,190 --> 00:19:05,000
whatever files whatever configuration

00:19:03,200 --> 00:19:06,830
files it has so it could read you know

00:19:05,000 --> 00:19:08,960
database passwords and you could just

00:19:06,830 --> 00:19:11,090
find your way in from there but it

00:19:08,960 --> 00:19:14,780
doesn't have to be a file URL it can be

00:19:11,090 --> 00:19:16,280
an HTTP URL have you ever wanted to be

00:19:14,780 --> 00:19:17,660
able to do a port scan of someone's

00:19:16,280 --> 00:19:22,280
internal network just by playing with

00:19:17,660 --> 00:19:25,640
their XML server not me because I'm a

00:19:22,280 --> 00:19:26,809
good person but um but it works and I

00:19:25,640 --> 00:19:33,530
know people who have played with this

00:19:26,809 --> 00:19:35,870
you can send a piece of XML and say yeah

00:19:33,530 --> 00:19:37,730
let's just start exploring the internal

00:19:35,870 --> 00:19:39,919
network and you're not limited to https

00:19:37,730 --> 00:19:41,990
port number you can set that to port 110

00:19:39,919 --> 00:19:43,220
and obviously it's not going to give you

00:19:41,990 --> 00:19:44,750
an HTTP response but

00:19:43,220 --> 00:19:45,740
whew time how long it takes to give you

00:19:44,750 --> 00:19:47,720
an error you'll know if it's something

00:19:45,740 --> 00:19:49,520
was listening on that port seek out

00:19:47,720 --> 00:19:51,500
their internal smtp servers seek out

00:19:49,520 --> 00:19:55,970
their internal pop3 servers explore

00:19:51,500 --> 00:20:00,700
their dmz don't do this you will get

00:19:55,970 --> 00:20:03,799
arrested uh-hum yeah so actually I

00:20:00,700 --> 00:20:06,200
should have probably put a disclaimer at

00:20:03,799 --> 00:20:08,480
the top of this whole thing don't do any

00:20:06,200 --> 00:20:12,799
of this stuff except protect yourself

00:20:08,480 --> 00:20:15,559
from it surely this doesn't happen in

00:20:12,799 --> 00:20:17,750
real life I'm not even going to try to

00:20:15,559 --> 00:20:19,700
show you a montage but it really really

00:20:17,750 --> 00:20:22,730
does and it's one of the really really

00:20:19,700 --> 00:20:26,510
important tools in a penetration testers

00:20:22,730 --> 00:20:28,809
arsenal because people are getting

00:20:26,510 --> 00:20:31,490
pretty familiar with SQL injection and

00:20:28,809 --> 00:20:33,710
although SQL injection still happens

00:20:31,490 --> 00:20:35,690
like it is still number one the

00:20:33,710 --> 00:20:37,220
interesting projects are usually

00:20:35,690 --> 00:20:38,630
protected from it Django is very well

00:20:37,220 --> 00:20:44,390
protected from SQL injection if you're

00:20:38,630 --> 00:20:51,169
using the RM you're safe knock on some

00:20:44,390 --> 00:20:52,760
wood somewhere I'm too scared that I'll

00:20:51,169 --> 00:20:56,480
find out this happens more often than it

00:20:52,760 --> 00:21:01,240
not happens but it's it's an education

00:20:56,480 --> 00:21:04,600
problem you you're loading XML in and

00:21:01,240 --> 00:21:07,130
thank you you're loading XML in and

00:21:04,600 --> 00:21:09,350
you're just wanting some structured data

00:21:07,130 --> 00:21:11,480
but what you're getting is everything

00:21:09,350 --> 00:21:13,539
that XML offers and XML offers more than

00:21:11,480 --> 00:21:15,860
that and the better your parser and

00:21:13,539 --> 00:21:20,059
everyone here knows better than to use

00:21:15,860 --> 00:21:23,059
regex to parse XML and yet that's safe

00:21:20,059 --> 00:21:26,990
right I mean that's not at least going

00:21:23,059 --> 00:21:30,309
to start pinging outside servers so how

00:21:26,990 --> 00:21:30,309
do you protect yourself from this

00:21:30,520 --> 00:21:36,200
unfortunately because it's XML all of

00:21:34,130 --> 00:21:37,580
this stuff is features of it and it's

00:21:36,200 --> 00:21:41,630
really hard to protect yourself from

00:21:37,580 --> 00:21:43,010
this stuff because you you basically

00:21:41,630 --> 00:21:47,840
have to the whole the whole

00:21:43,010 --> 00:21:49,070
system this is yeah this is this is sort

00:21:47,840 --> 00:21:51,440
of the standard checklist to make sure

00:21:49,070 --> 00:21:54,260
that your XML service is is safe and

00:21:51,440 --> 00:21:55,380
that's a lot of work to go through but

00:21:54,260 --> 00:21:58,040
it comes down to the same thing

00:21:55,380 --> 00:22:00,120
which is make the parser stupid and

00:21:58,040 --> 00:22:03,300
thankfully Python does have a solution

00:22:00,120 --> 00:22:05,760
that it's now defused XML I think it's

00:22:03,300 --> 00:22:07,500
actually intended to go into the

00:22:05,760 --> 00:22:09,060
standard library at some point but it's

00:22:07,500 --> 00:22:10,500
and it's a third-party library which is

00:22:09,060 --> 00:22:15,510
sort of been officially sanctioned by

00:22:10,500 --> 00:22:18,660
smart people and most of the web

00:22:15,510 --> 00:22:20,550
services that used to be vulnerable to

00:22:18,660 --> 00:22:22,430
this stuff like the Jenga rest framework

00:22:20,550 --> 00:22:25,500
was vulnerable to some of this xml stuff

00:22:22,430 --> 00:22:28,890
up until I think it was March last year

00:22:25,500 --> 00:22:30,750
that they finally put diffused XML in

00:22:28,890 --> 00:22:36,210
there as an intermediary layer of their

00:22:30,750 --> 00:22:39,150
XML parsing and that protects you from

00:22:36,210 --> 00:22:41,520
most of this obvious stuff but in other

00:22:39,150 --> 00:22:42,780
languages I haven't done that research

00:22:41,520 --> 00:22:45,780
you're kind of on your own and there's

00:22:42,780 --> 00:22:48,600
probably equivalence to you know

00:22:45,780 --> 00:22:50,700
sanitized and safe XML parsing in other

00:22:48,600 --> 00:22:52,830
libraries but you have to know that you

00:22:50,700 --> 00:22:55,140
need to be using those or you'll get

00:22:52,830 --> 00:22:57,620
caught out so if you're doing projects

00:22:55,140 --> 00:23:02,160
in other languages make sure you are

00:22:57,620 --> 00:23:07,500
aware of making the parser stupid enough

00:23:02,160 --> 00:23:10,830
that you're safe so finally move on to

00:23:07,500 --> 00:23:13,350
the last one Jason Jason is a really

00:23:10,830 --> 00:23:15,480
really stripped-down format it might be

00:23:13,350 --> 00:23:17,550
finally stupid enough to generally trust

00:23:15,480 --> 00:23:20,250
because it really is just strings and

00:23:17,550 --> 00:23:22,050
numbers and I think bullion's and key

00:23:20,250 --> 00:23:23,220
value and lists and I think I just went

00:23:22,050 --> 00:23:25,890
through the whole spec there's not even

00:23:23,220 --> 00:23:29,760
comments right so did I miss anything or

00:23:25,890 --> 00:23:33,150
is that everything that Jason does sorry

00:23:29,760 --> 00:23:35,580
no no as well so that's stupid enough to

00:23:33,150 --> 00:23:38,310
actually be safe but only if you use a

00:23:35,580 --> 00:23:40,200
stupid enough parser and what was the

00:23:38,310 --> 00:23:42,060
design decision that everyone thought or

00:23:40,200 --> 00:23:43,830
the designers of Jason thought was

00:23:42,060 --> 00:23:48,540
incredibly clever you could just use

00:23:43,830 --> 00:23:52,230
eval eval is not a stupid enough parser

00:23:48,540 --> 00:23:54,300
eval is a JavaScript interpreter so if

00:23:52,230 --> 00:23:58,040
you're using eval to parse your

00:23:54,300 --> 00:24:01,680
JavaScript you're in a terrible place

00:23:58,040 --> 00:24:05,460
and surely no one does that in real life

00:24:01,680 --> 00:24:08,190
but here we are at w3schools com and

00:24:05,460 --> 00:24:08,750
it's their explanation page about Jason

00:24:08,190 --> 00:24:11,330
and

00:24:08,750 --> 00:24:13,790
check it out right here eval can be used

00:24:11,330 --> 00:24:16,040
to convert Jason text into a JavaScript

00:24:13,790 --> 00:24:17,570
object it's right there it's their top

00:24:16,040 --> 00:24:21,710
recommendation this is why Jason is so

00:24:17,570 --> 00:24:25,030
good but that's w3schools no one has any

00:24:21,710 --> 00:24:32,000
respect for them Jason here's Jason org

00:24:25,030 --> 00:24:33,350
and there it is right there in the

00:24:32,000 --> 00:24:36,260
explanation check it out you can just

00:24:33,350 --> 00:24:39,170
use eval now I'm being very slightly

00:24:36,260 --> 00:24:41,630
unfair because a little bit further down

00:24:39,170 --> 00:24:43,460
about where my knee would be on that

00:24:41,630 --> 00:24:44,900
page there's actually a warding a little

00:24:43,460 --> 00:24:46,400
warning saying oh by the way that might

00:24:44,900 --> 00:24:48,800
be security implications maybe you

00:24:46,400 --> 00:24:50,390
shouldn't do this but why is that below

00:24:48,800 --> 00:24:53,570
the things saying hey look how easy it

00:24:50,390 --> 00:24:54,950
is same thing here it's a little bit

00:24:53,570 --> 00:24:56,810
further down the page but it's there

00:24:54,950 --> 00:24:58,970
they do have a little warning below oh

00:24:56,810 --> 00:25:00,440
you can just use eval now someone trying

00:24:58,970 --> 00:25:02,030
to use Jason what are they going to do

00:25:00,440 --> 00:25:06,620
they're going to go oh you can use eval

00:25:02,030 --> 00:25:08,900
and stop reading and the warning saying

00:25:06,620 --> 00:25:14,150
you must not use eval is a little bit

00:25:08,900 --> 00:25:18,410
further down which breaks my heart so

00:25:14,150 --> 00:25:21,070
the lesson is beware of flexibility if a

00:25:18,410 --> 00:25:23,360
tool sells itself as look what I can do

00:25:21,070 --> 00:25:24,530
watch out because you don't want it to

00:25:23,360 --> 00:25:26,420
be able to do all kinds of things you

00:25:24,530 --> 00:25:28,300
want it to be able to do the dumbest

00:25:26,420 --> 00:25:32,150
possible thing if it's exposed to

00:25:28,300 --> 00:25:33,320
possible bad actors at all and when it

00:25:32,150 --> 00:25:36,680
comes to any of these things that are

00:25:33,320 --> 00:25:38,270
exposed to outside turn off every single

00:25:36,680 --> 00:25:40,370
feature that you can possibly find that

00:25:38,270 --> 00:25:47,650
you're not using find them and turn them

00:25:40,370 --> 00:25:47,650
off keep it simple thank you very much

00:25:55,000 --> 00:25:59,049
are there any questions

00:26:04,519 --> 00:26:07,580
this is more a fun fact than the

00:26:06,229 --> 00:26:11,239
question but did you know that you can

00:26:07,580 --> 00:26:14,059
actually pass some JSON with pythons

00:26:11,239 --> 00:26:18,320
email statement and yes I've seen that

00:26:14,059 --> 00:26:21,529
in production no I didn't know the

00:26:18,320 --> 00:26:22,549
second part but yeah I guess like lists

00:26:21,529 --> 00:26:24,879
and a few other ones are close enough

00:26:22,549 --> 00:26:29,690
that you just totally could do that

00:26:24,879 --> 00:26:31,609
Python has to someone someone will have

00:26:29,690 --> 00:26:34,639
to refresh my memory but there's there's

00:26:31,609 --> 00:26:38,089
eval and there's exec in Python and eval

00:26:34,639 --> 00:26:41,269
there's actually another eval in Python

00:26:38,089 --> 00:26:42,769
now which is only for the simple data

00:26:41,269 --> 00:26:44,149
structure that's almost like the Jason

00:26:42,769 --> 00:26:46,609
of it I don't remember what it's cold

00:26:44,149 --> 00:26:48,289
it's in the ast module Canadian refresh

00:26:46,609 --> 00:26:50,629
my memory does anyone know what I'm

00:26:48,289 --> 00:26:52,369
talking about there's eval and then

00:26:50,629 --> 00:26:54,049
there's a dumb eval that won't call

00:26:52,369 --> 00:26:55,759
functions or anything it'll just parse

00:26:54,049 --> 00:26:59,539
lists and string literals and a few

00:26:55,759 --> 00:27:03,440
other things like that sorry that's

00:26:59,539 --> 00:27:05,149
probably it and you probably still don't

00:27:03,440 --> 00:27:11,440
want to use it but I but there's a use

00:27:05,149 --> 00:27:11,440
case for that obviously sorry

00:27:16,710 --> 00:27:22,380
hmm that's not besides they'd be

00:27:20,970 --> 00:27:26,659
underscores everywhere would be really

00:27:22,380 --> 00:27:26,659
ugly any other questions

00:27:31,140 --> 00:27:33,920
hmm

00:27:34,770 --> 00:27:38,280
oh i glossed over that because i did

00:27:37,140 --> 00:27:39,600
that research a long time ago and i

00:27:38,280 --> 00:27:43,140
can't remember all of it but here's what

00:27:39,600 --> 00:27:44,370
i think i remember lxml yeah sorry this

00:27:43,140 --> 00:27:45,870
is actually probably pretty implement

00:27:44,370 --> 00:27:48,000
this would be important if there weren't

00:27:45,870 --> 00:27:52,920
diffuse XML the answer is used diffused

00:27:48,000 --> 00:27:55,200
XML but lxml has memory protection if

00:27:52,920 --> 00:27:56,460
you drop an XML bomb on it it probably

00:27:55,200 --> 00:27:58,920
won't blow out the memory you'll just

00:27:56,460 --> 00:28:01,320
get an exception thrown because it hits

00:27:58,920 --> 00:28:03,900
like 65 k or something and says hey your

00:28:01,320 --> 00:28:07,100
XML is really big set a set this option

00:28:03,900 --> 00:28:09,660
if you really want to do this the

00:28:07,100 --> 00:28:14,250
standard library one I think was happy

00:28:09,660 --> 00:28:17,390
to do the local file xxe is what that's

00:28:14,250 --> 00:28:21,600
called external entity expands expansion

00:28:17,390 --> 00:28:24,210
the standard library XML was happy to do

00:28:21,600 --> 00:28:29,700
that but it was incapable of doing the

00:28:24,210 --> 00:28:33,330
the URL 1 and L xml that's actually

00:28:29,700 --> 00:28:35,130
turned off by default so in lxml you

00:28:33,330 --> 00:28:36,960
have to turn on an extra options one of

00:28:35,130 --> 00:28:41,280
the few places where the default is safe

00:28:36,960 --> 00:28:43,830
in XML you have to turn on an option to

00:28:41,280 --> 00:28:47,250
allow it to ping outside servers to get

00:28:43,830 --> 00:28:51,630
external entities so that's that was

00:28:47,250 --> 00:28:53,190
really the only safe default that I saw

00:28:51,630 --> 00:28:56,640
the other the other point that I kind of

00:28:53,190 --> 00:28:59,130
want to make is that the the culture is

00:28:56,640 --> 00:29:00,510
shifting modern frameworks like I think

00:28:59,130 --> 00:29:01,920
Django's starting to do it but they're

00:29:00,510 --> 00:29:03,570
starting to reverse that whole load

00:29:01,920 --> 00:29:07,410
versus safe load thing does anyone here

00:29:03,570 --> 00:29:09,150
use angularjs an angular they finally

00:29:07,410 --> 00:29:12,180
made the smart idea of when you're

00:29:09,150 --> 00:29:13,230
binding HTML to an element you can tell

00:29:12,180 --> 00:29:14,990
i'm not a front-end developer i don't

00:29:13,230 --> 00:29:17,400
know what i'm talking about but um

00:29:14,990 --> 00:29:20,430
that's called bind and it does all the

00:29:17,400 --> 00:29:22,170
sanitization it escapes the HTML and if

00:29:20,430 --> 00:29:23,640
you want to use the one that is a

00:29:22,170 --> 00:29:26,100
possible risk of cross-site scripting

00:29:23,640 --> 00:29:27,930
you have to use the one called unsafe

00:29:26,100 --> 00:29:29,610
bind right so you actually have to use

00:29:27,930 --> 00:29:31,260
the function that says unsafe in the

00:29:29,610 --> 00:29:32,790
name that's what llamo should have done

00:29:31,260 --> 00:29:34,800
from the start and so the culture is

00:29:32,790 --> 00:29:36,510
shifting modern libraries seem to

00:29:34,800 --> 00:29:40,130
realize that the default needs to be the

00:29:36,510 --> 00:29:43,380
safe won and the unsafe one needs to be

00:29:40,130 --> 00:29:46,220
you know make them type in I really

00:29:43,380 --> 00:29:46,220
shouldn't be doing this but

00:29:47,670 --> 00:29:51,000
is that right

00:29:54,950 --> 00:30:07,029
that's giving debbie on a lot of credit

00:29:56,809 --> 00:30:07,029
sure anyone else cool thank you so much

00:30:14,440 --> 00:30:16,500

YouTube URL: https://www.youtube.com/watch?v=LrW-HSHP0ws


