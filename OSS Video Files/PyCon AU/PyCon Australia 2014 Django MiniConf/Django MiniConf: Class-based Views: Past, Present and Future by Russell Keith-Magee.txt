Title: Django MiniConf: Class-based Views: Past, Present and Future by Russell Keith-Magee
Publication date: 2014-08-18
Playlist: PyCon Australia 2014 Django MiniConf
Description: 
	PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:03,580 --> 00:00:09,520
and make sure your your interests have

00:00:06,009 --> 00:00:10,389
been covered so in particular why am I

00:00:09,520 --> 00:00:13,179
here today I'm here to talk about

00:00:10,389 --> 00:00:14,469
class-based views in particular so the

00:00:13,179 --> 00:00:16,900
reason I'm here talking about this is

00:00:14,469 --> 00:00:19,029
that they were introduced in Django 1.3

00:00:16,900 --> 00:00:21,189
as a wonderful new feature but they have

00:00:19,029 --> 00:00:24,850
not been shall we say greeted with

00:00:21,189 --> 00:00:26,380
universal enthusiasm so let's clear up

00:00:24,850 --> 00:00:28,630
the mess what are clear at class-based

00:00:26,380 --> 00:00:31,449
views why do they exist and why should

00:00:28,630 --> 00:00:33,790
anyone care now I'd like to emphasize

00:00:31,449 --> 00:00:35,860
this isn't a tutorial it's an attempt to

00:00:33,790 --> 00:00:37,269
set the big picture straight in the hope

00:00:35,860 --> 00:00:39,400
that by getting the big picture straight

00:00:37,269 --> 00:00:40,780
some of the broader discussions about

00:00:39,400 --> 00:00:42,250
class-based views that ago that I keep

00:00:40,780 --> 00:00:43,989
seeing on mailing lists or topics that

00:00:42,250 --> 00:00:46,299
keep coming up on Twitter will have a

00:00:43,989 --> 00:00:50,470
slightly better direction or at least be

00:00:46,299 --> 00:00:51,879
stop being so badly wrong so okay we're

00:00:50,470 --> 00:00:52,869
talking about big picture pictures here

00:00:51,879 --> 00:00:54,729
okay so if we're talking about big

00:00:52,869 --> 00:00:56,440
picture we've got to explain why we've

00:00:54,729 --> 00:00:58,659
got what we've got so it helps to know

00:00:56,440 --> 00:01:03,489
where we've come from in the beginning

00:00:58,659 --> 00:01:04,689
it was 2005 Django is there to build

00:01:03,489 --> 00:01:06,130
websites we've got the wonderful

00:01:04,689 --> 00:01:07,150
introduction this morning from Simon

00:01:06,130 --> 00:01:09,640
Millison about what happened in those

00:01:07,150 --> 00:01:11,710
early years it's open sourced in July of

00:01:09,640 --> 00:01:15,220
2005 it's there to help you build

00:01:11,710 --> 00:01:17,440
websites views exist views are the way

00:01:15,220 --> 00:01:19,870
that you display content there are lots

00:01:17,440 --> 00:01:24,220
of common patterns in views we all like

00:01:19,870 --> 00:01:26,080
being dry the generic views weren't

00:01:24,220 --> 00:01:29,560
there in the first public code release

00:01:26,080 --> 00:01:33,190
in 2005 they were added John July 25th

00:01:29,560 --> 00:01:35,409
in relaying revision 304 so the 300 and

00:01:33,190 --> 00:01:38,020
forth commits in our public repository

00:01:35,409 --> 00:01:40,330
after we went open source why were they

00:01:38,020 --> 00:01:41,560
added well because there are common

00:01:40,330 --> 00:01:43,180
patterns there are things you end up

00:01:41,560 --> 00:01:46,540
doing all the time when you're building

00:01:43,180 --> 00:01:50,500
building generic views so refactor all

00:01:46,540 --> 00:01:52,570
things there are common stuff that you

00:01:50,500 --> 00:01:54,220
do you need to be able to display a

00:01:52,570 --> 00:01:56,200
template you need to be able to display

00:01:54,220 --> 00:01:58,570
a single object you need a better

00:01:56,200 --> 00:02:00,220
display a list of objects you want to be

00:01:58,570 --> 00:02:02,260
able to create a display and create a

00:02:00,220 --> 00:02:04,659
form and then perform create update

00:02:02,260 --> 00:02:06,010
delete type operations upon it and again

00:02:04,659 --> 00:02:07,930
because this is a Django comes from a

00:02:06,010 --> 00:02:09,580
journalism background displaying data

00:02:07,930 --> 00:02:14,430
archive show me all the articles that

00:02:09,580 --> 00:02:16,330
were written in 2005 in August etc etc

00:02:14,430 --> 00:02:17,470
the things that are common here though

00:02:16,330 --> 00:02:19,600
is that every view is

00:02:17,470 --> 00:02:21,640
function and in the generic comment

00:02:19,600 --> 00:02:23,290
generic view context those confer those

00:02:21,640 --> 00:02:25,450
views can then be configured using

00:02:23,290 --> 00:02:27,880
arguments so let's take a common example

00:02:25,450 --> 00:02:30,940
here is a generic view being done

00:02:27,880 --> 00:02:32,770
written written longhand in in Django so

00:02:30,940 --> 00:02:34,810
we've got an edit book we want to edit

00:02:32,770 --> 00:02:36,670
some record about a book we get a book

00:02:34,810 --> 00:02:38,800
ID as part of their view ID as part of

00:02:36,670 --> 00:02:42,160
our views arguments we're going to edit

00:02:38,800 --> 00:02:43,900
a book with ID book ID first off we've

00:02:42,160 --> 00:02:45,430
gotta get that book we do a try-catch to

00:02:43,900 --> 00:02:47,140
say ok go to the database get the

00:02:45,430 --> 00:02:50,140
content of that book and if it doesn't

00:02:47,140 --> 00:02:51,850
exist razor 404 ok then we don't do a

00:02:50,140 --> 00:02:54,400
bit of fur form for management here if

00:02:51,850 --> 00:02:56,800
the request is a is a post then we need

00:02:54,400 --> 00:02:58,270
to construct form populate that form

00:02:56,800 --> 00:02:59,260
with data that's come from the post and

00:02:58,270 --> 00:03:01,240
with the fact that it's from this

00:02:59,260 --> 00:03:02,800
particular book instance if the form

00:03:01,240 --> 00:03:04,570
turns out to be valid then we save the

00:03:02,800 --> 00:03:06,640
form saves the object but that's the

00:03:04,570 --> 00:03:08,800
object and we redirect to wherever the

00:03:06,640 --> 00:03:11,740
the home of that book object comes from

00:03:08,800 --> 00:03:13,390
if it's not a post if it's a get request

00:03:11,740 --> 00:03:14,530
then we just need to instantiate the

00:03:13,390 --> 00:03:17,380
form we don't have to do anything with

00:03:14,530 --> 00:03:19,300
with post data and at the end of the day

00:03:17,380 --> 00:03:20,980
what we need to do is then render using

00:03:19,300 --> 00:03:22,540
some particular templates and context

00:03:20,980 --> 00:03:24,670
has the object we're rendering in the

00:03:22,540 --> 00:03:27,190
form we're rendering render that back to

00:03:24,670 --> 00:03:29,380
the user ok nothing surprising there if

00:03:27,190 --> 00:03:30,489
you use Django that's completely by it

00:03:29,380 --> 00:03:33,730
would have written that code many many

00:03:30,489 --> 00:03:36,100
times before you then get that view and

00:03:33,730 --> 00:03:38,110
you attach it to your URL pattern so you

00:03:36,100 --> 00:03:41,709
have a URL pattern says when I ask for

00:03:38,110 --> 00:03:43,450
book number three the regular expression

00:03:41,709 --> 00:03:44,769
will match their court book ID pass that

00:03:43,450 --> 00:03:46,420
in the book I did a book view as the

00:03:44,769 --> 00:03:49,989
function and for convenience sake we're

00:03:46,420 --> 00:03:52,570
going to call that URL in a book the

00:03:49,989 --> 00:03:55,150
idea behind generic views is to say the

00:03:52,570 --> 00:03:57,070
view we wrote is exactly the same for

00:03:55,150 --> 00:04:00,280
every object we're likely to want to do

00:03:57,070 --> 00:04:01,989
that with except for the word book so

00:04:00,280 --> 00:04:04,330
let's find a way of abstracting that out

00:04:01,989 --> 00:04:07,420
and what you end up with is the after

00:04:04,330 --> 00:04:09,910
you replace your custom handwritten view

00:04:07,420 --> 00:04:12,880
with boilerplate code with generic

00:04:09,910 --> 00:04:15,400
update object you pass in the model you

00:04:12,880 --> 00:04:17,229
want to deal with book and you use all

00:04:15,400 --> 00:04:19,330
the internal magic that Django has in

00:04:17,229 --> 00:04:20,979
terms of knowing what our book is to

00:04:19,330 --> 00:04:22,270
automatically generate the form and then

00:04:20,979 --> 00:04:25,060
work through the logic for the rest of

00:04:22,270 --> 00:04:27,700
that that edit view objet a view view

00:04:25,060 --> 00:04:28,750
method now important to point out this

00:04:27,700 --> 00:04:31,000
code doesn't actually work anymore

00:04:28,750 --> 00:04:32,560
because of class base views the

00:04:31,000 --> 00:04:35,080
the original generic methods have been

00:04:32,560 --> 00:04:37,120
deprecated but this was as of Django one

00:04:35,080 --> 00:04:38,770
point oh the way you did it there was a

00:04:37,120 --> 00:04:43,180
bunch of functions in the library for

00:04:38,770 --> 00:04:44,680
doing generic views and so okay this is

00:04:43,180 --> 00:04:46,000
being done with book if we want to

00:04:44,680 --> 00:04:48,760
switch it over and instead of editing

00:04:46,000 --> 00:04:50,590
books we want to edit authors you do

00:04:48,760 --> 00:04:52,090
exactly the same thing you replace the

00:04:50,590 --> 00:04:54,820
references to book with the references

00:04:52,090 --> 00:04:56,200
to author update the URL pattern for the

00:04:54,820 --> 00:04:58,270
site where we're we're mounting it you

00:04:56,200 --> 00:04:59,620
update the name of the URL and that's

00:04:58,270 --> 00:05:01,270
all the code you need to write you don't

00:04:59,620 --> 00:05:05,730
need to write the boilerplate off this

00:05:01,270 --> 00:05:09,180
is how a form works ever again fantastic

00:05:05,730 --> 00:05:12,190
so why is there a problem here ok well

00:05:09,180 --> 00:05:14,500
the configuration of that view is

00:05:12,190 --> 00:05:17,200
entirely constrained by what you can

00:05:14,500 --> 00:05:19,660
pass in as an argument there's no

00:05:17,200 --> 00:05:22,750
control over the flow of logic inside

00:05:19,660 --> 00:05:25,120
that view and there's no reuse between

00:05:22,750 --> 00:05:27,490
views if there is logic that needs to be

00:05:25,120 --> 00:05:29,200
that that is consistent between views so

00:05:27,490 --> 00:05:32,410
for example if you want to instantiate a

00:05:29,200 --> 00:05:33,760
different form based upon some property

00:05:32,410 --> 00:05:35,260
of the object that's been requested you

00:05:33,760 --> 00:05:37,300
know if it's a library book they want

00:05:35,260 --> 00:05:38,290
this form if it's a personal collection

00:05:37,300 --> 00:05:40,330
book you want to render it render that

00:05:38,290 --> 00:05:43,419
form you can't really do that using

00:05:40,330 --> 00:05:46,060
function based generic views let's say

00:05:43,419 --> 00:05:48,040
you want to perform logic after form

00:05:46,060 --> 00:05:50,770
validation but perform the floor before

00:05:48,040 --> 00:05:53,370
the form is saved well unless you can

00:05:50,770 --> 00:05:56,320
put that logic in the forms save method

00:05:53,370 --> 00:05:58,660
generic function based views don't give

00:05:56,320 --> 00:06:00,340
you a mechanism for doing that what if

00:05:58,660 --> 00:06:01,900
you want to pass in extra arguments to

00:06:00,340 --> 00:06:04,120
the form instantiation like say for

00:06:01,900 --> 00:06:05,050
example the request because that's kind

00:06:04,120 --> 00:06:06,520
of going to have some useful information

00:06:05,050 --> 00:06:09,450
in there like the user who is currently

00:06:06,520 --> 00:06:11,110
logged in well you can't do that either

00:06:09,450 --> 00:06:12,790
what if he referred if you've got

00:06:11,110 --> 00:06:15,070
something like common permission logic

00:06:12,790 --> 00:06:16,540
that you want to run well unless you can

00:06:15,070 --> 00:06:20,440
put that in a decorator around the

00:06:16,540 --> 00:06:24,160
entire view we can't do that either ok

00:06:20,440 --> 00:06:25,900
so how do we address these problems well

00:06:24,160 --> 00:06:27,940
you can keep adding new functional entry

00:06:25,900 --> 00:06:30,100
points you can keep making the the the

00:06:27,940 --> 00:06:32,080
the prototype of the generic functional

00:06:30,100 --> 00:06:33,820
view more and more complicated which is

00:06:32,080 --> 00:06:36,520
what we did for a very long time version

00:06:33,820 --> 00:06:38,800
1.1 1.2 added a bunch of new arguments

00:06:36,520 --> 00:06:40,240
to enter provide new configuration

00:06:38,800 --> 00:06:43,750
points and provide new configuration

00:06:40,240 --> 00:06:44,770
arguments but eventually you kind of

00:06:43,750 --> 00:06:46,360
just end up Paul

00:06:44,770 --> 00:06:49,810
implementing half of the features of

00:06:46,360 --> 00:06:51,610
class inheritance so here's an example

00:06:49,810 --> 00:06:53,590
of this in practice let's say you go

00:06:51,610 --> 00:06:54,909
back to our edit book example view if

00:06:53,590 --> 00:06:57,659
we've written this code manually it's

00:06:54,909 --> 00:07:02,349
easy to say well if the form is valid

00:06:57,659 --> 00:07:04,150
before saving do something you just drop

00:07:02,349 --> 00:07:05,470
in book don't prepare or whatever other

00:07:04,150 --> 00:07:08,289
function the functional logic that you

00:07:05,470 --> 00:07:09,340
want and you do it but if you've got the

00:07:08,289 --> 00:07:11,289
jet fuel but this is a generic

00:07:09,340 --> 00:07:14,050
functional based view that entry point

00:07:11,289 --> 00:07:16,330
doesn't exist so what do we need to do

00:07:14,050 --> 00:07:17,889
if if we were clever we might be able to

00:07:16,330 --> 00:07:20,169
sneak that it's think that save method

00:07:17,889 --> 00:07:23,650
into the forms logic but that won't

00:07:20,169 --> 00:07:24,880
necessarily be the right place say

00:07:23,650 --> 00:07:26,680
something like popping up a flash

00:07:24,880 --> 00:07:28,150
notification I message you want the user

00:07:26,680 --> 00:07:30,460
to see the next time they view the page

00:07:28,150 --> 00:07:32,050
that's not really a form action that's

00:07:30,460 --> 00:07:33,400
kind of something that's about behavior

00:07:32,050 --> 00:07:35,199
your way your system your system to work

00:07:33,400 --> 00:07:36,940
and sticking that logic in your form

00:07:35,199 --> 00:07:38,500
because that's the only place you can

00:07:36,940 --> 00:07:41,229
put it is the wrong the wrong way to

00:07:38,500 --> 00:07:42,280
look at our continuous system another

00:07:41,229 --> 00:07:44,229
example is something like commission

00:07:42,280 --> 00:07:45,729
checks on individual objects this is

00:07:44,229 --> 00:07:48,639
something that needs to be done on every

00:07:45,729 --> 00:07:50,740
view that other that looks at a single

00:07:48,639 --> 00:07:52,840
object you can't really put that in a

00:07:50,740 --> 00:07:54,940
decorator around the outside of the view

00:07:52,840 --> 00:07:57,159
you need to be in deep in the weeds in

00:07:54,940 --> 00:08:00,310
the logic of your generic view so that's

00:07:57,159 --> 00:08:02,949
kind of hard to do so we need to

00:08:00,310 --> 00:08:04,840
refactor all the things clearly let's go

00:08:02,949 --> 00:08:06,550
class-based if all we're going to be

00:08:04,840 --> 00:08:08,440
doing is badly re-implementing all the

00:08:06,550 --> 00:08:10,229
features of class inheritance then okay

00:08:08,440 --> 00:08:12,340
let's just use class inheritance

00:08:10,229 --> 00:08:13,900
subclassing gives you the ability to say

00:08:12,340 --> 00:08:15,310
here is a piece of logic I'm going to

00:08:13,900 --> 00:08:17,050
subclass to change the piece at st.

00:08:15,310 --> 00:08:18,699
changes to change this and override that

00:08:17,050 --> 00:08:21,159
specific piece of logic that's exactly

00:08:18,699 --> 00:08:22,960
what classes are supposed to do and you

00:08:21,159 --> 00:08:26,440
can use mix-ins to then compose behavior

00:08:22,960 --> 00:08:28,090
out of different areas fantastic not

00:08:26,440 --> 00:08:29,349
quite that simple though there are lots

00:08:28,090 --> 00:08:31,719
of details that need to be sorted out

00:08:29,349 --> 00:08:34,539
the discussion around class-based views

00:08:31,719 --> 00:08:37,149
went on for many many years there were a

00:08:34,539 --> 00:08:39,940
number of draft attempts at this jacket

00:08:37,149 --> 00:08:42,190
capital Moss Joseph Cochran's been

00:08:39,940 --> 00:08:44,079
Fishman all had attempts at doing a

00:08:42,190 --> 00:08:45,459
class-based view framework which got to

00:08:44,079 --> 00:08:46,899
various levels of completion been

00:08:45,459 --> 00:08:50,020
fishman's is probably the most complete

00:08:46,899 --> 00:08:51,610
before I got involved and it all evolved

00:08:50,020 --> 00:08:52,779
on each other a sort of building on

00:08:51,610 --> 00:08:55,270
building on building on the work of the

00:08:52,779 --> 00:08:56,709
previous one I'm here because I I'm

00:08:55,270 --> 00:08:57,610
responsible for the final push I took

00:08:56,709 --> 00:08:59,230
the work

00:08:57,610 --> 00:09:00,940
that Ben and Joseph and Jacob had been

00:08:59,230 --> 00:09:02,620
working on and turn it into the final

00:09:00,940 --> 00:09:04,060
patch that we all know as what we now

00:09:02,620 --> 00:09:09,339
have is Django's generic class-based

00:09:04,060 --> 00:09:12,120
views and that landed in Django 1.3 and

00:09:09,339 --> 00:09:15,220
that's where the wheels fell off why

00:09:12,120 --> 00:09:17,050
well there's a couple of reasons firstly

00:09:15,220 --> 00:09:19,630
there was lots of confusion over what

00:09:17,050 --> 00:09:22,360
class-based views are and what they can

00:09:19,630 --> 00:09:24,459
be used for there's two very distinct

00:09:22,360 --> 00:09:27,640
purposes two very distinct use cases

00:09:24,459 --> 00:09:30,810
here in class based views and they were

00:09:27,640 --> 00:09:32,680
wrapped up in a single commit second

00:09:30,810 --> 00:09:34,690
implementation the implementation of

00:09:32,680 --> 00:09:36,880
class based views isn't immediately

00:09:34,690 --> 00:09:38,680
obvious it does some a couple of

00:09:36,880 --> 00:09:39,970
slightly odd things which if you're all

00:09:38,680 --> 00:09:40,959
coming at this for the first time in

00:09:39,970 --> 00:09:43,089
thinking well I'm going to build my own

00:09:40,959 --> 00:09:44,350
class-based view the way Django has done

00:09:43,089 --> 00:09:46,209
it is probably not the way that you

00:09:44,350 --> 00:09:47,560
would do it as a first pass the reason

00:09:46,209 --> 00:09:49,060
we do it differently is that we did the

00:09:47,560 --> 00:09:52,630
first pass and then we realize the

00:09:49,060 --> 00:09:55,360
problems with it the third criticism is

00:09:52,630 --> 00:09:57,100
what's referred to as ravioli code I'll

00:09:55,360 --> 00:09:58,540
come come back to this ravioli code is a

00:09:57,100 --> 00:10:01,209
term that was actually coined by one of

00:09:58,540 --> 00:10:02,380
the Django core team Luke plant and it's

00:10:01,209 --> 00:10:03,940
an architectural concern it's a

00:10:02,380 --> 00:10:05,500
legitimate criticism what does it mean

00:10:03,940 --> 00:10:07,240
I'll come back to that in a second and

00:10:05,500 --> 00:10:08,470
probably the last one of all

00:10:07,240 --> 00:10:10,149
particularly given our keynote speaker

00:10:08,470 --> 00:10:12,850
this morning the the worst part was the

00:10:10,149 --> 00:10:14,500
bad documentation I take full and

00:10:12,850 --> 00:10:16,089
complete responsibility responsibility

00:10:14,500 --> 00:10:18,120
for the appalling state of the

00:10:16,089 --> 00:10:21,550
documentation when it landed in 1.3

00:10:18,120 --> 00:10:22,899
since that time marked Hamlin and danny

00:10:21,550 --> 00:10:25,390
green field and a number of others have

00:10:22,899 --> 00:10:28,390
done a great job at improving the mess

00:10:25,390 --> 00:10:30,220
that I left if nothing else it serves as

00:10:28,390 --> 00:10:31,420
a wonderful example of why the person

00:10:30,220 --> 00:10:33,610
who built it shouldn't write the docs

00:10:31,420 --> 00:10:34,600
because I was just too far deep in the

00:10:33,610 --> 00:10:39,430
weeds to come up with a good set of

00:10:34,600 --> 00:10:43,060
documentation so Eric Cooper I will do

00:10:39,430 --> 00:10:44,709
it better next time okay so let's go

00:10:43,060 --> 00:10:47,410
over those those those four problems in

00:10:44,709 --> 00:10:49,480
depth first one is purpose when people

00:10:47,410 --> 00:10:51,370
talk about class-based views there's

00:10:49,480 --> 00:10:53,079
confusion over exactly what they're

00:10:51,370 --> 00:10:54,760
talking about they could actually mean

00:10:53,079 --> 00:10:57,459
one of two different things are they

00:10:54,760 --> 00:10:59,199
talking about class-based views or are

00:10:57,459 --> 00:11:03,670
they talking about class-based generic

00:10:59,199 --> 00:11:06,029
views there was one commit but two very

00:11:03,670 --> 00:11:09,339
distinct features in that commit a

00:11:06,029 --> 00:11:11,730
class-based view is just the class-based

00:11:09,339 --> 00:11:14,709
analog of a view function

00:11:11,730 --> 00:11:17,860
django says that the prototype of the

00:11:14,709 --> 00:11:19,810
the operating definition of what you can

00:11:17,860 --> 00:11:21,370
execute is a view a view is just a

00:11:19,810 --> 00:11:23,170
callable that takes a request and

00:11:21,370 --> 00:11:24,910
returns a response due to the wonders

00:11:23,170 --> 00:11:28,209
that is Python that means it can be a

00:11:24,910 --> 00:11:30,579
class as well and so a class-based view

00:11:28,209 --> 00:11:33,249
is just how do you write a class that

00:11:30,579 --> 00:11:35,319
can be used as a view it doesn't have

00:11:33,249 --> 00:11:36,699
any of the extra stuff about creates and

00:11:35,319 --> 00:11:39,610
updates and all the rest of it is purely

00:11:36,699 --> 00:11:42,220
by purely method based HTTP verb

00:11:39,610 --> 00:11:44,350
dispatch by which I mean HTTP verbs are

00:11:42,220 --> 00:11:46,300
the gets the posts that puts the deletes

00:11:44,350 --> 00:11:49,930
the the protocol level definitions of

00:11:46,300 --> 00:11:52,360
what HTTP does class based views just

00:11:49,930 --> 00:11:58,589
provide a wrap implementation of getting

00:11:52,360 --> 00:12:00,430
access to that okay so what do I mean

00:11:58,589 --> 00:12:02,680
once upon a time you would write a

00:12:00,430 --> 00:12:05,259
function that is a that you deploy into

00:12:02,680 --> 00:12:07,269
your URL patterns in as of Django 1.3

00:12:05,259 --> 00:12:09,339
you can write a class-based view you

00:12:07,269 --> 00:12:11,379
have a class called my view it extends

00:12:09,339 --> 00:12:13,300
view it implements a method called get

00:12:11,379 --> 00:12:15,249
it implements a method called post and

00:12:13,300 --> 00:12:20,319
they are used to handle surprise

00:12:15,249 --> 00:12:22,000
surprise gets and posts along the way

00:12:20,319 --> 00:12:23,470
because it is class base because you are

00:12:22,000 --> 00:12:25,389
inheriting functionality from somewhere

00:12:23,470 --> 00:12:28,149
else you get automatic options handling

00:12:25,389 --> 00:12:30,339
so HTTP has this verb called options we

00:12:28,149 --> 00:12:32,829
can say what can I do to this can I do

00:12:30,339 --> 00:12:34,389
again can I do a post we know which

00:12:32,829 --> 00:12:36,610
methods you've defined so we can answer

00:12:34,389 --> 00:12:38,980
that question for you automatically we

00:12:36,610 --> 00:12:40,870
do automatic naive hedera handling again

00:12:38,980 --> 00:12:43,839
head is a type of request you can issue

00:12:40,870 --> 00:12:45,819
to a HTTP server and it says essentially

00:12:43,839 --> 00:12:47,649
give me back the headers but not the

00:12:45,819 --> 00:12:50,199
body of this request for this over the

00:12:47,649 --> 00:12:52,750
request for this resource we can do that

00:12:50,199 --> 00:12:54,519
by just doing a get and not giving you

00:12:52,750 --> 00:12:55,870
the body now okay that's obviously not

00:12:54,519 --> 00:12:57,370
the most efficient way of doing it

00:12:55,870 --> 00:12:59,170
because you ask your computing the body

00:12:57,370 --> 00:13:00,910
you're just not returning it but as a

00:12:59,170 --> 00:13:02,350
first pass it's a reasonable

00:13:00,910 --> 00:13:05,740
approximation and it will enable you to

00:13:02,350 --> 00:13:08,709
support head requests it also gives you

00:13:05,740 --> 00:13:11,439
an automatic HTTP 405 for unknown verbs

00:13:08,709 --> 00:13:13,660
so if you have written a server and you

00:13:11,439 --> 00:13:16,480
say well like I don't want to handle

00:13:13,660 --> 00:13:18,490
puts you don't provide a put method it

00:13:16,480 --> 00:13:21,610
won't handle a put and it will return

00:13:18,490 --> 00:13:23,740
HTTP 405 I only accept head options get

00:13:21,610 --> 00:13:25,059
and pushed or whatever whatever subset

00:13:23,740 --> 00:13:26,859
you've actually define interest

00:13:25,059 --> 00:13:29,829
if you do that on a function based

00:13:26,859 --> 00:13:32,709
Django view and you pass input it will

00:13:29,829 --> 00:13:35,769
just return it as a get which might be

00:13:32,709 --> 00:13:36,849
right but probably isn't so effectively

00:13:35,769 --> 00:13:38,199
what we've done here is provide a

00:13:36,849 --> 00:13:42,159
framework to let you actually give you

00:13:38,199 --> 00:13:44,559
better HTTP protocol support okay so

00:13:42,159 --> 00:13:47,319
that's class-based views class-based

00:13:44,559 --> 00:13:50,499
generic views take that class based view

00:13:47,319 --> 00:13:53,559
base and then creates analogues of the

00:13:50,499 --> 00:13:57,039
existing generic views that were in

00:13:53,559 --> 00:13:59,379
Django school so they create update list

00:13:57,039 --> 00:14:01,689
archive data archive type type type

00:13:59,379 --> 00:14:02,859
mecha functionality addressing with

00:14:01,689 --> 00:14:04,359
limitations of the functional approach

00:14:02,859 --> 00:14:06,159
and that you know we need to be able to

00:14:04,359 --> 00:14:07,479
create a different form or control the

00:14:06,159 --> 00:14:09,969
process by which forms are instantiated

00:14:07,479 --> 00:14:13,989
or put logic into a different place in

00:14:09,969 --> 00:14:15,759
the validation chain but it was the the

00:14:13,989 --> 00:14:18,879
mandate for what was committed is

00:14:15,759 --> 00:14:19,749
replace exactly what is there not to try

00:14:18,879 --> 00:14:21,279
and come up with a whole bunch of new

00:14:19,749 --> 00:14:24,069
functionality its replace what was there

00:14:21,279 --> 00:14:25,689
with something a little bit better the

00:14:24,069 --> 00:14:27,309
catch is that by addressing all those

00:14:25,689 --> 00:14:28,719
limitations there's a whole new body of

00:14:27,309 --> 00:14:30,369
knowledge that you need to acquire and

00:14:28,719 --> 00:14:32,409
this is where the documentation fell

00:14:30,369 --> 00:14:34,839
down how to how and where you extend

00:14:32,409 --> 00:14:36,909
those classes becomes the knowledge you

00:14:34,839 --> 00:14:38,559
have to have it's also the basis of the

00:14:36,909 --> 00:14:42,189
ravioli criticism again which I'll come

00:14:38,559 --> 00:14:43,209
to in just a moment the second criticism

00:14:42,189 --> 00:14:46,269
that gets leveled against class-based

00:14:43,209 --> 00:14:48,219
views is the implementation choice the

00:14:46,269 --> 00:14:51,099
approach we talked and we ultimately get

00:14:48,219 --> 00:14:52,869
isn't the obvious one okay when you

00:14:51,099 --> 00:14:55,449
deploy a class-based view you have to

00:14:52,869 --> 00:14:56,679
have this as view call and most people

00:14:55,449 --> 00:15:00,519
sort of say well why don't you just use

00:14:56,679 --> 00:15:02,919
call there is a reason for that that in

00:15:00,519 --> 00:15:05,049
itself is an entire talk as to why we

00:15:02,919 --> 00:15:07,719
went down this path the good news is the

00:15:05,049 --> 00:15:10,599
decision process is documented if you go

00:15:07,719 --> 00:15:12,519
to Django's wiki we actually have the

00:15:10,599 --> 00:15:14,559
design decisions fully documented for

00:15:12,519 --> 00:15:16,749
what we looked at what we considered and

00:15:14,559 --> 00:15:18,789
why we reject the things we rejected

00:15:16,749 --> 00:15:20,289
it's worth reading just to sort of see

00:15:18,789 --> 00:15:22,449
how we got where we are and we're trying

00:15:20,289 --> 00:15:24,069
to do this more and more with new

00:15:22,449 --> 00:15:26,829
features excuse me as they get added to

00:15:24,069 --> 00:15:29,529
django the the debt process that adrian

00:15:26,829 --> 00:15:30,849
sort of informally announced and then we

00:15:29,529 --> 00:15:33,129
haven't really done great work with the

00:15:30,849 --> 00:15:35,949
kind of is an advanced version of this

00:15:33,129 --> 00:15:37,239
what we've currently got on the wiki so

00:15:35,949 --> 00:15:38,350
yeah if you want to know why we've got

00:15:37,239 --> 00:15:40,000
what we've got there's a very

00:15:38,350 --> 00:15:41,620
good reason why and it's to protect

00:15:40,000 --> 00:15:44,400
essentially developers from making

00:15:41,620 --> 00:15:48,780
mistakes that are potentially very very

00:15:44,400 --> 00:15:52,630
potentially very very dangerous okay so

00:15:48,780 --> 00:15:54,700
ravioli the ravioli criticism comes

00:15:52,630 --> 00:15:56,890
about because there's a lot of there's a

00:15:54,700 --> 00:15:58,750
very steep learning curve our goal was

00:15:56,890 --> 00:16:00,610
to replace function of based generic

00:15:58,750 --> 00:16:02,440
views with class-based generic views

00:16:00,610 --> 00:16:04,360
that were exactly the same and to show

00:16:02,440 --> 00:16:08,320
what the class based approach could

00:16:04,360 --> 00:16:10,180
allow you to then do our endpoint views

00:16:08,320 --> 00:16:12,280
that are used by people at the end of

00:16:10,180 --> 00:16:14,500
the day I constructed out of a series of

00:16:12,280 --> 00:16:16,750
much smaller mix-ins each of which

00:16:14,500 --> 00:16:21,130
implements a small part of that larger

00:16:16,750 --> 00:16:23,320
functionality ravioli code is a term

00:16:21,130 --> 00:16:24,730
that was the raised by Luke plant and it

00:16:23,320 --> 00:16:26,260
effectively it's what it's describing is

00:16:24,730 --> 00:16:29,200
the fact that what's the end package is

00:16:26,260 --> 00:16:30,370
delicious and attractive you don't want

00:16:29,200 --> 00:16:33,370
to ask too many questions about the

00:16:30,370 --> 00:16:35,620
internals they're minced and they're

00:16:33,370 --> 00:16:38,050
unclear and very very hard to pick apart

00:16:35,620 --> 00:16:40,120
and if you're an expert you can make

00:16:38,050 --> 00:16:42,400
great ravioli but if you're a newcomer

00:16:40,120 --> 00:16:44,410
coming out a piece of ravioli you can't

00:16:42,400 --> 00:16:46,870
work out the recipe without going and

00:16:44,410 --> 00:16:48,730
doing your three-year cooking course now

00:16:46,870 --> 00:16:50,740
this is an entirely legitimate criticism

00:16:48,730 --> 00:16:52,180
the the generics that the class

00:16:50,740 --> 00:16:54,160
hierarchy that exists in class based

00:16:52,180 --> 00:16:56,290
views is very complex and in order to

00:16:54,160 --> 00:16:58,000
use them at all you kind of need to wrap

00:16:56,290 --> 00:17:00,880
your head space around the whole thing

00:16:58,000 --> 00:17:04,660
and that's hard because it's there's a

00:17:00,880 --> 00:17:06,730
lot of stuff there the minimum quantum

00:17:04,660 --> 00:17:09,730
that you need to understand in order to

00:17:06,730 --> 00:17:11,560
use any of it is ordered effectively and

00:17:09,730 --> 00:17:14,710
that's not good it's very hard to

00:17:11,560 --> 00:17:16,330
document I know because I failed the

00:17:14,710 --> 00:17:18,940
documentation is now much better in that

00:17:16,330 --> 00:17:20,950
regard but that's the problem we've got

00:17:18,940 --> 00:17:22,450
there is this learning curve and when

00:17:20,950 --> 00:17:24,820
we've got a framework that's designed to

00:17:22,450 --> 00:17:26,920
be accessible and friendly to newcomers

00:17:24,820 --> 00:17:31,000
having a steep learning curve is a bad

00:17:26,920 --> 00:17:34,480
thing so here's my ravioli cooking

00:17:31,000 --> 00:17:37,360
course let's take that original view

00:17:34,480 --> 00:17:40,330
that we started with and break it down

00:17:37,360 --> 00:17:42,370
taking even more pseudocode II kind of

00:17:40,330 --> 00:17:45,070
versions of the rent of you edit view is

00:17:42,370 --> 00:17:47,620
essentially get an object if it's a post

00:17:45,070 --> 00:17:50,710
get the form if it's valid handle the

00:17:47,620 --> 00:17:51,350
form and redirect if it's not valid

00:17:50,710 --> 00:17:53,960
handle

00:17:51,350 --> 00:17:58,010
failure in some way otherwise get the

00:17:53,960 --> 00:18:00,700
form without any any any any posted post

00:17:58,010 --> 00:18:03,289
data interaction and return a response

00:18:00,700 --> 00:18:04,760
the way that Django's class-based view

00:18:03,289 --> 00:18:08,870
your class based generic view framework

00:18:04,760 --> 00:18:10,820
works at this is this so we start with a

00:18:08,870 --> 00:18:13,309
single object content a single object

00:18:10,820 --> 00:18:16,100
mix in we have an object we're dealing

00:18:13,309 --> 00:18:18,320
with viewing a single object the

00:18:16,100 --> 00:18:19,760
behavior to get a single object is

00:18:18,320 --> 00:18:21,320
consistent regardless of whether you're

00:18:19,760 --> 00:18:23,510
creating it updating it all the rest you

00:18:21,320 --> 00:18:25,490
just need to be able to do again so

00:18:23,510 --> 00:18:28,250
we've got a single object mix in we also

00:18:25,490 --> 00:18:29,659
have a descendant of single coin object

00:18:28,250 --> 00:18:31,130
mixing which is a context mix in which

00:18:29,659 --> 00:18:32,659
says how do I get that information and

00:18:31,130 --> 00:18:37,070
stick it into a context i'm going to use

00:18:32,659 --> 00:18:38,870
at the end of the day we need to be able

00:18:37,070 --> 00:18:41,900
to say okay this is a view that's going

00:18:38,870 --> 00:18:45,110
to deal with gets posts and puts so we

00:18:41,900 --> 00:18:47,330
have a process for view that knows how

00:18:45,110 --> 00:18:51,980
to do the basic logic around if i'm a

00:18:47,330 --> 00:18:53,929
post otherwise do this other thing we

00:18:51,980 --> 00:18:55,340
have a single object template response

00:18:53,929 --> 00:18:58,100
mixing i'm sorry haven't we have a form

00:18:55,340 --> 00:19:00,620
mixing that says okay well if if i'm

00:18:58,100 --> 00:19:01,789
dealing with a form in particular if I'm

00:19:00,620 --> 00:19:02,929
dealing with our model form because

00:19:01,789 --> 00:19:05,360
there's a model for mixed in there as

00:19:02,929 --> 00:19:06,980
well the model form says this is

00:19:05,360 --> 00:19:09,409
particularly how you instantiate our

00:19:06,980 --> 00:19:10,820
form when it is a model form but some of

00:19:09,409 --> 00:19:13,429
the base behavior about how you deal

00:19:10,820 --> 00:19:15,559
with forms you need to know if the form

00:19:13,429 --> 00:19:17,240
is valid if the form is not valid handle

00:19:15,559 --> 00:19:18,950
the form if it's successful handle the

00:19:17,240 --> 00:19:20,419
form of us not successful all of those

00:19:18,950 --> 00:19:22,610
functionality is just part of the basic

00:19:20,419 --> 00:19:24,260
form mix in which is then extended

00:19:22,610 --> 00:19:25,490
further up into a model for mixing

00:19:24,260 --> 00:19:27,140
because if you know you're dealing with

00:19:25,490 --> 00:19:30,640
a model form there's a few specific

00:19:27,140 --> 00:19:33,770
things that you can specialize even more

00:19:30,640 --> 00:19:36,260
then we have a single object template

00:19:33,770 --> 00:19:38,299
response mix in which says okay I am

00:19:36,260 --> 00:19:40,640
rendering a template and the template is

00:19:38,299 --> 00:19:42,950
to rekar is showing you the result of

00:19:40,640 --> 00:19:45,080
dealing with a single object it takes

00:19:42,950 --> 00:19:47,990
the result of the single objects context

00:19:45,080 --> 00:19:49,400
and puts it into a template that is

00:19:47,990 --> 00:19:51,230
being rendered and it is a template

00:19:49,400 --> 00:19:53,330
response mix in that takes it and turns

00:19:51,230 --> 00:19:57,470
it into rendered content via a template

00:19:53,330 --> 00:19:59,690
and then at the whole top of it oh sorry

00:19:57,470 --> 00:20:01,010
yeah so at the top of it is the update

00:19:59,690 --> 00:20:03,380
view and base update view which kind of

00:20:01,010 --> 00:20:03,700
wraps around the logic to say okay well

00:20:03,380 --> 00:20:05,049
this is

00:20:03,700 --> 00:20:06,309
how we pull all those pieces together

00:20:05,049 --> 00:20:09,220
into a view we can actually do something

00:20:06,309 --> 00:20:10,779
with we end up with nine classes to do

00:20:09,220 --> 00:20:13,240
the simple task that previously used to

00:20:10,779 --> 00:20:14,590
be one function this is the ravioli

00:20:13,240 --> 00:20:17,980
because you kind of need to know all of

00:20:14,590 --> 00:20:19,990
those in order to extend it the upside

00:20:17,980 --> 00:20:22,389
is once you do change has become

00:20:19,990 --> 00:20:25,389
relatively simple so for example we want

00:20:22,389 --> 00:20:26,679
to say create instead of update an

00:20:25,389 --> 00:20:27,850
object well all you need to do is change

00:20:26,679 --> 00:20:30,370
the bit at the top the way you're

00:20:27,850 --> 00:20:32,169
instantiated is slightly different okay

00:20:30,370 --> 00:20:34,929
so instead of getting an object based

00:20:32,169 --> 00:20:37,330
upon ID we are creating a new object

00:20:34,929 --> 00:20:39,190
from scratch the only you really

00:20:37,330 --> 00:20:41,350
need to change is the instantiate object

00:20:39,190 --> 00:20:44,789
which is the bit that's handled by base

00:20:41,350 --> 00:20:47,500
create view previously base update view

00:20:44,789 --> 00:20:49,059
okay so what about if we don't want to

00:20:47,500 --> 00:20:50,559
change whether it's a create to an

00:20:49,059 --> 00:20:52,360
update what we want to do is instead of

00:20:50,559 --> 00:20:55,149
returning a template what we want to

00:20:52,360 --> 00:20:56,590
return is a JSON response well okay

00:20:55,149 --> 00:20:58,630
again all you've got to do is change the

00:20:56,590 --> 00:20:59,950
bit down the bottom the way you're

00:20:58,630 --> 00:21:01,690
dealing with a single object the way

00:20:59,950 --> 00:21:03,820
you're rendering a context none of that

00:21:01,690 --> 00:21:05,919
has changed all that's changing is the

00:21:03,820 --> 00:21:07,750
object you've got needs to be pushed to

00:21:05,919 --> 00:21:09,639
Jason instead of being pushed through a

00:21:07,750 --> 00:21:11,320
template so you change the one thing at

00:21:09,639 --> 00:21:13,240
the bottom the single object Jason

00:21:11,320 --> 00:21:14,649
response mix out mix in and it stops

00:21:13,240 --> 00:21:16,720
using template language and it starts

00:21:14,649 --> 00:21:18,639
using JSON instead and there's a whole

00:21:16,720 --> 00:21:20,679
bunch you know obviously this is every

00:21:18,639 --> 00:21:22,269
one of those classes has two or three

00:21:20,679 --> 00:21:25,690
extension points you can get into to

00:21:22,269 --> 00:21:27,039
control the workflow around work fall

00:21:25,690 --> 00:21:28,779
around around the what's on the left

00:21:27,039 --> 00:21:30,490
hand side the basic flow workflow of

00:21:28,779 --> 00:21:33,519
dealing with a create or update type

00:21:30,490 --> 00:21:34,809
view it also means we've got reusable

00:21:33,519 --> 00:21:36,460
logic so if you want to write your own

00:21:34,809 --> 00:21:38,019
custom view that is doing something

00:21:36,460 --> 00:21:40,659
particularly fancy but it's doing it to

00:21:38,019 --> 00:21:42,250
a single object you can pull in the

00:21:40,659 --> 00:21:45,309
single object mix in and just exploit

00:21:42,250 --> 00:21:46,690
the logic that is there so what does

00:21:45,309 --> 00:21:48,639
that look like in deployment well ok

00:21:46,690 --> 00:21:52,149
once upon a time we had our generic not

00:21:48,639 --> 00:21:54,220
update object and that was a function

00:21:52,149 --> 00:21:55,809
and the function we pass in an argument

00:21:54,220 --> 00:21:58,330
that says the model we want to deal with

00:21:55,809 --> 00:21:59,860
it's a book and it gets called and

00:21:58,330 --> 00:22:02,710
invoked and it just gets handled as I

00:21:59,860 --> 00:22:04,809
view it behaves like a view after class

00:22:02,710 --> 00:22:06,580
based generic views what do we do almost

00:22:04,809 --> 00:22:07,870
exactly the same thing there's change

00:22:06,580 --> 00:22:09,159
from lowercase to uppercase because

00:22:07,870 --> 00:22:11,769
we're dealing with pepper and classes

00:22:09,159 --> 00:22:14,500
have other coast names we have a little

00:22:11,769 --> 00:22:16,179
bit of extra because view bit and we're

00:22:14,500 --> 00:22:16,860
passing in the model we want to model we

00:22:16,179 --> 00:22:22,950
want to work with

00:22:16,860 --> 00:22:24,480
as an argument okay the the catch here

00:22:22,950 --> 00:22:25,830
and the bit that most people get get

00:22:24,480 --> 00:22:26,929
stuck on when they say hang on why

00:22:25,830 --> 00:22:28,860
you're doing this this seems weird

00:22:26,929 --> 00:22:30,690
couldn't class base use be a whole lot

00:22:28,860 --> 00:22:32,910
easier if we didn't have that is why is

00:22:30,690 --> 00:22:35,730
add view required essentially it's

00:22:32,910 --> 00:22:38,730
required so make sure that the state of

00:22:35,730 --> 00:22:41,190
a view is unique between requests the

00:22:38,730 --> 00:22:43,080
the simple approach just make the view

00:22:41,190 --> 00:22:45,480
of just make the class callable means

00:22:43,080 --> 00:22:48,510
that if you've got to users using that

00:22:45,480 --> 00:22:50,280
same class instance at the same time one

00:22:48,510 --> 00:22:52,620
person can potentially see what's going

00:22:50,280 --> 00:22:53,760
on on the other object which means all

00:22:52,620 --> 00:22:56,820
the sudden you've got state leakage

00:22:53,760 --> 00:22:58,230
between two different users okay so that

00:22:56,820 --> 00:23:00,600
means you've got potentially a whole

00:22:58,230 --> 00:23:01,950
bunch of security problems and the only

00:23:00,600 --> 00:23:04,020
real defense you've got against this is

00:23:01,950 --> 00:23:05,700
a don't store anything on the class

00:23:04,020 --> 00:23:09,390
instance variables of the class will

00:23:05,700 --> 00:23:11,429
cause security problems which okay sure

00:23:09,390 --> 00:23:13,020
we could do that but that's kind of like

00:23:11,429 --> 00:23:15,510
saying here's an elephant gun new user

00:23:13,020 --> 00:23:18,450
please don't point it at anyone it's

00:23:15,510 --> 00:23:20,730
it's asking for trouble and so we we

00:23:18,450 --> 00:23:23,600
avoided asking for trouble by by getting

00:23:20,730 --> 00:23:25,320
the trouble out of the way or the other

00:23:23,600 --> 00:23:27,360
the thing that's interesting is that

00:23:25,320 --> 00:23:29,400
Django's own source bio source code

00:23:27,360 --> 00:23:32,370
actually makes that exact mistake if you

00:23:29,400 --> 00:23:34,559
look at djangos admin Django's admin is

00:23:32,370 --> 00:23:39,290
a class-based view that is behaving as a

00:23:34,559 --> 00:23:42,270
callable so if you ever store anything

00:23:39,290 --> 00:23:45,480
stateful on your model admin it

00:23:42,270 --> 00:23:46,530
potentially will link between uses or

00:23:45,480 --> 00:23:49,799
different delete between different

00:23:46,530 --> 00:23:51,179
requests now the good news is that all

00:23:49,799 --> 00:23:53,309
of the documented ways that you use

00:23:51,179 --> 00:23:54,480
Django's admin don't tell you to do that

00:23:53,309 --> 00:23:55,980
and there is no like but there are

00:23:54,480 --> 00:23:58,380
patterns the patterns that are out there

00:23:55,980 --> 00:23:59,760
for using Django's admin walk you away

00:23:58,380 --> 00:24:01,140
from doing the bad thing but it's worth

00:23:59,760 --> 00:24:07,710
knowing it's there because you know hey

00:24:01,140 --> 00:24:09,450
we made the same mistake okay so we can

00:24:07,710 --> 00:24:11,820
clarify or gawky arizona where

00:24:09,450 --> 00:24:14,160
instantiating update view using as view

00:24:11,820 --> 00:24:16,260
right in the URL pattern but we can

00:24:14,160 --> 00:24:18,540
actually also do that that syntax is

00:24:16,260 --> 00:24:21,600
essentially just a syntactic sugar

00:24:18,540 --> 00:24:23,370
around defining a subclass that has an

00:24:21,600 --> 00:24:25,950
argument or have that has a class-based

00:24:23,370 --> 00:24:27,179
attribute model equals book or you can

00:24:25,950 --> 00:24:28,890
subclass it and do a whole bunch of

00:24:27,179 --> 00:24:30,250
other esting things like overriding

00:24:28,890 --> 00:24:31,450
individual methods

00:24:30,250 --> 00:24:33,940
if you do that then instead of having

00:24:31,450 --> 00:24:35,740
the passing in arguments to as view you

00:24:33,940 --> 00:24:39,340
just instantiate the class that has the

00:24:35,740 --> 00:24:40,840
arguments you want as of you but other

00:24:39,340 --> 00:24:41,950
than using up you know three more lines

00:24:40,840 --> 00:24:43,180
of code why would you actually want to

00:24:41,950 --> 00:24:45,010
do this well it's because you can do a

00:24:43,180 --> 00:24:47,920
lot more to update view you can do

00:24:45,010 --> 00:24:51,160
things like add form valid as a class

00:24:47,920 --> 00:24:52,780
method but as a method on the class what

00:24:51,160 --> 00:24:54,520
does that do well okay it means when he

00:24:52,780 --> 00:24:56,620
gets the point where you're dealing with

00:24:54,520 --> 00:24:59,920
the update and it says okay establish

00:24:56,620 --> 00:25:03,520
that this form is valid if it's valid

00:24:59,920 --> 00:25:04,930
call form valid by default on a model on

00:25:03,520 --> 00:25:06,160
a class-based you know an update view

00:25:04,930 --> 00:25:07,690
that's dealing with a Model View it will

00:25:06,160 --> 00:25:09,250
call formed on save and it's essentially

00:25:07,690 --> 00:25:11,110
all that does but if you want to get in

00:25:09,250 --> 00:25:13,210
there and do something else like say our

00:25:11,110 --> 00:25:15,460
object process the model doc process we

00:25:13,210 --> 00:25:16,660
had before you can do that you just got

00:25:15,460 --> 00:25:17,590
to inject yourself into the end of the

00:25:16,660 --> 00:25:19,870
workflow if you want to do something

00:25:17,590 --> 00:25:20,830
after willing you just go super call you

00:25:19,870 --> 00:25:24,340
put something after the super and you

00:25:20,830 --> 00:25:25,720
return the value at your knee what about

00:25:24,340 --> 00:25:28,660
things like permissions mix-ins okay

00:25:25,720 --> 00:25:30,400
well you've got you can you can have a

00:25:28,660 --> 00:25:32,830
get object it's kind of a mechanism by

00:25:30,400 --> 00:25:35,590
which a single object a single object

00:25:32,830 --> 00:25:37,420
mixing does its thing it's just get

00:25:35,590 --> 00:25:39,820
object so if you can override the way

00:25:37,420 --> 00:25:43,030
that get object works you can inject

00:25:39,820 --> 00:25:44,950
permission logic so you know any any any

00:25:43,030 --> 00:25:47,410
attempt by the database to anybody by

00:25:44,950 --> 00:25:48,700
the view to get an object will go

00:25:47,410 --> 00:25:50,410
through your permissions hierarchy as

00:25:48,700 --> 00:25:52,210
well and return 04 04 or whatever

00:25:50,410 --> 00:25:56,500
whatever responses you want to have that

00:25:52,210 --> 00:25:58,510
comes out of that okay now as a side

00:25:56,500 --> 00:25:59,770
note the formed form valid override in

00:25:58,510 --> 00:26:01,180
the previous slide could also have been

00:25:59,770 --> 00:26:03,220
done as a mix in it's just a question of

00:26:01,180 --> 00:26:05,230
how reusable that logic would have been

00:26:03,220 --> 00:26:07,180
in practice a specific post save

00:26:05,230 --> 00:26:09,670
behavior probably doesn't have a whole

00:26:07,180 --> 00:26:11,200
lot of widespread reuse potential so are

00:26:09,670 --> 00:26:12,850
you and overwrite in a subclass makes

00:26:11,200 --> 00:26:14,050
sense permission checking is something

00:26:12,850 --> 00:26:15,850
that's more likely to be widespread

00:26:14,050 --> 00:26:19,720
behavior so a mixing is probably

00:26:15,850 --> 00:26:21,760
warranted on that on that basis okay so

00:26:19,720 --> 00:26:23,790
like I said the price you pay for all

00:26:21,760 --> 00:26:26,500
that tasty ravioli is a learning curve

00:26:23,790 --> 00:26:27,970
how do you know that get object is the

00:26:26,500 --> 00:26:30,610
method you need to overwrite how do you

00:26:27,970 --> 00:26:33,160
know that form valid is the right entry

00:26:30,610 --> 00:26:36,370
point for that logic the only fix for

00:26:33,160 --> 00:26:38,500
that is documentation and like I said

00:26:36,370 --> 00:26:40,210
the technical term for the state of

00:26:38,500 --> 00:26:42,190
Jango's documentation for generic

00:26:40,210 --> 00:26:43,929
generic class-based views when they

00:26:42,190 --> 00:26:44,050
landed the technical term was that they

00:26:43,929 --> 00:26:47,020
were

00:26:44,050 --> 00:26:48,880
bad it got all the details one hundred

00:26:47,020 --> 00:26:50,520
percent correct but completely missed

00:26:48,880 --> 00:26:52,900
the big picture it's like the the

00:26:50,520 --> 00:26:54,610
analogy about the person floating by on

00:26:52,900 --> 00:26:56,500
a hop on a hot air balloon past a hot

00:26:54,610 --> 00:26:58,090
tall tall building yells out of the top

00:26:56,500 --> 00:26:59,470
of a hot air balloon hey mate can you

00:26:58,090 --> 00:27:01,150
tell me where I am and the guy in the

00:26:59,470 --> 00:27:03,640
building says yeah you're in a hot air

00:27:01,150 --> 00:27:08,710
balloon completely correct but utterly

00:27:03,640 --> 00:27:10,840
useless is information so we the big

00:27:08,710 --> 00:27:12,040
picture is right but the details so the

00:27:10,840 --> 00:27:13,510
details are correct but the big picture

00:27:12,040 --> 00:27:15,010
is completely missing the documentation

00:27:13,510 --> 00:27:16,540
is a much better in that regard and

00:27:15,010 --> 00:27:19,810
there are projects out there like marked

00:27:16,540 --> 00:27:21,760
Hamlin c CB v co uk which is essentially

00:27:19,810 --> 00:27:23,980
an interactive exploration of the

00:27:21,760 --> 00:27:25,180
methods in class based views to try and

00:27:23,980 --> 00:27:28,150
work out maybe where you should be

00:27:25,180 --> 00:27:31,690
injecting logic in there's also a couple

00:27:28,150 --> 00:27:33,400
of framework level decisions that the

00:27:31,690 --> 00:27:35,380
core team or more broadly the Django

00:27:33,400 --> 00:27:37,060
community kind of needs to make for

00:27:35,380 --> 00:27:39,430
example take something like a login

00:27:37,060 --> 00:27:41,470
required functionality I want to be able

00:27:39,430 --> 00:27:42,790
to control who can see this view they

00:27:41,470 --> 00:27:46,240
need to be logged in order to see this

00:27:42,790 --> 00:27:48,130
view do you do this as a decorator do

00:27:46,240 --> 00:27:51,610
you do this as mixing do to it as a

00:27:48,130 --> 00:27:54,730
class decorator there are multiple ways

00:27:51,610 --> 00:27:57,820
to do it depending upon exactly where

00:27:54,730 --> 00:27:59,320
you want to inject that logic we kind of

00:27:57,820 --> 00:28:00,370
as a community or as a particular as a

00:27:59,320 --> 00:28:01,720
core team but also broadly as a

00:28:00,370 --> 00:28:04,240
community need to bite the bullet and

00:28:01,720 --> 00:28:06,790
just kind of pick one document it and

00:28:04,240 --> 00:28:10,690
then ship a login required mixing

00:28:06,790 --> 00:28:12,580
decorator whatever as part of that okay

00:28:10,690 --> 00:28:14,260
so where do we go from here well

00:28:12,580 --> 00:28:15,400
documentation can always improve like I

00:28:14,260 --> 00:28:16,810
said it so it's a lot better than it

00:28:15,400 --> 00:28:18,520
used to be but that's not to say it

00:28:16,810 --> 00:28:19,930
couldn't get a lot better still there

00:28:18,520 --> 00:28:21,010
are probably still there are some

00:28:19,930 --> 00:28:22,750
high-level decisions that need to be

00:28:21,010 --> 00:28:23,890
documented and that's kind of hinging on

00:28:22,750 --> 00:28:26,560
actually having the decision being made

00:28:23,890 --> 00:28:27,670
in the first place we can extend what is

00:28:26,560 --> 00:28:30,520
already there like I said the original

00:28:27,670 --> 00:28:32,230
the original as a scope constraint

00:28:30,520 --> 00:28:34,690
exercise the original project basically

00:28:32,230 --> 00:28:37,030
said we are replacing the old generic

00:28:34,690 --> 00:28:38,560
views and that's it we could have kept

00:28:37,030 --> 00:28:40,300
going because there are things that the

00:28:38,560 --> 00:28:42,610
original generic class-based views don't

00:28:40,300 --> 00:28:45,220
do obvious one there's no handling for

00:28:42,610 --> 00:28:46,990
forms sets in the original generic views

00:28:45,220 --> 00:28:50,080
so Django's class-based generic views

00:28:46,990 --> 00:28:53,020
don't handle form sets there's also the

00:28:50,080 --> 00:28:55,750
you know the inline plus form set or

00:28:53,020 --> 00:28:58,290
form plus in line so the classic model

00:28:55,750 --> 00:29:00,240
that the admin has of here's the details

00:28:58,290 --> 00:29:02,250
one object and all the objects that are

00:29:00,240 --> 00:29:04,560
related to that object as tabular in

00:29:02,250 --> 00:29:06,660
lines underneath we don't have a generic

00:29:04,560 --> 00:29:10,470
based way of looking at that sort of

00:29:06,660 --> 00:29:12,210
structure even though Adnan doesn't so

00:29:10,470 --> 00:29:14,070
why haven't we added those in the

00:29:12,210 --> 00:29:17,070
intervening years it's been what three

00:29:14,070 --> 00:29:19,170
four years since 1.3 landed so it's been

00:29:17,070 --> 00:29:23,160
a while why hasn't this sort of stuff

00:29:19,170 --> 00:29:26,190
happened well okay two reasons the first

00:29:23,160 --> 00:29:29,760
is a lack of enthusiasm at the risk of

00:29:26,190 --> 00:29:32,220
sounding all woe is me this can operate

00:29:29,760 --> 00:29:34,560
as an active lesson to everyone as to

00:29:32,220 --> 00:29:37,380
how words that are spoken online have

00:29:34,560 --> 00:29:39,330
consequences I spent a lot of time

00:29:37,380 --> 00:29:41,610
working on class-based generic views I

00:29:39,330 --> 00:29:42,630
did that on the back of three or four

00:29:41,610 --> 00:29:43,920
other people who have spent a lot of

00:29:42,630 --> 00:29:46,020
time working on class-based generic

00:29:43,920 --> 00:29:47,880
views we asked for feedback we got

00:29:46,020 --> 00:29:50,160
feedback we integrated that feedback and

00:29:47,880 --> 00:29:54,180
the design evolved over many many years

00:29:50,160 --> 00:29:55,980
and even today years after the

00:29:54,180 --> 00:29:58,380
class-based views discussions have been

00:29:55,980 --> 00:30:00,120
committed and it's all there I spend I

00:29:58,380 --> 00:30:01,620
keep running into these discussions

00:30:00,120 --> 00:30:03,060
where I'm having to defend decisions

00:30:01,620 --> 00:30:04,890
that I have defended many times in the

00:30:03,060 --> 00:30:06,960
past and I can point them and say the

00:30:04,890 --> 00:30:08,970
decision was made over here and there's

00:30:06,960 --> 00:30:10,320
a reason we made it and eventually just

00:30:08,970 --> 00:30:11,520
the enthusiasm for running into the

00:30:10,320 --> 00:30:14,820
Lions Den and having to defend this

00:30:11,520 --> 00:30:16,290
stuff one more time it just it becomes

00:30:14,820 --> 00:30:19,950
so exhausting is that it's easier to go

00:30:16,290 --> 00:30:22,230
find another problem to solve others who

00:30:19,950 --> 00:30:25,590
might have volunteered then also get

00:30:22,230 --> 00:30:27,330
scared off by this environment so the

00:30:25,590 --> 00:30:30,150
next time you jump on Twitter and vent

00:30:27,330 --> 00:30:31,440
your spleen about something and you

00:30:30,150 --> 00:30:33,510
aren't planning to follow that tweet

00:30:31,440 --> 00:30:35,790
with and here's a patch to make it

00:30:33,510 --> 00:30:37,590
better please consider the consequences

00:30:35,790 --> 00:30:39,420
of your words because just getting out

00:30:37,590 --> 00:30:40,980
there and venting about how this sucks

00:30:39,420 --> 00:30:42,720
and it will never improve and how could

00:30:40,980 --> 00:30:45,120
the guys have been so dumb for doing it

00:30:42,720 --> 00:30:46,410
this way really does suck the oxygen out

00:30:45,120 --> 00:30:50,670
of the room for getting anything done

00:30:46,410 --> 00:30:52,320
with volunteers okay but enthusiasm is

00:30:50,670 --> 00:30:54,000
one reason and okay that's I don't win

00:30:52,320 --> 00:30:56,730
this on a bad note there is another

00:30:54,000 --> 00:30:58,470
reason before we start charging into new

00:30:56,730 --> 00:31:02,010
features I'd like to ask the community

00:30:58,470 --> 00:31:05,490
more broadly a question have we solved

00:31:02,010 --> 00:31:08,550
the wrong problem if we go back to 30

00:31:05,490 --> 00:31:10,380
odd slides ago I put this this up as a

00:31:08,550 --> 00:31:11,549
list of features the generic views had

00:31:10,380 --> 00:31:12,840
to solve we have

00:31:11,549 --> 00:31:14,429
be able to supply a template you have to

00:31:12,840 --> 00:31:16,769
be able display a single object you have

00:31:14,429 --> 00:31:18,570
to better display a list of objects it's

00:31:16,769 --> 00:31:19,830
a better platform create update and

00:31:18,570 --> 00:31:24,509
delete that form you have to be able to

00:31:19,830 --> 00:31:26,879
display a data archive in 2005 that was

00:31:24,509 --> 00:31:28,529
a common list that was what websites did

00:31:26,879 --> 00:31:32,789
and it was revolutionary to get to do

00:31:28,529 --> 00:31:35,159
that in one line modern web sites have

00:31:32,789 --> 00:31:37,559
different problems or at least much more

00:31:35,159 --> 00:31:40,289
involved variants of the same problems

00:31:37,559 --> 00:31:42,360
you look at a modern website that's

00:31:40,289 --> 00:31:43,619
going to hold its own in into the the

00:31:42,360 --> 00:31:46,440
field of apps that are being developed

00:31:43,619 --> 00:31:48,210
right now you don't just have an object

00:31:46,440 --> 00:31:50,279
per page you've got multiple forms

00:31:48,210 --> 00:31:51,929
multiple form sets per page and you may

00:31:50,279 --> 00:31:53,730
only be submitting some of them because

00:31:51,929 --> 00:31:55,049
you've got a complex user interface and

00:31:53,730 --> 00:31:58,980
only some of that information is being

00:31:55,049 --> 00:32:00,690
committed it's not just a list it's a

00:31:58,980 --> 00:32:02,190
continuous scrolling list rather than

00:32:00,690 --> 00:32:04,529
imaginating store it's a dynamically

00:32:02,190 --> 00:32:06,090
updating list based upon data that's

00:32:04,529 --> 00:32:09,989
coming in dynamic coming in coming in

00:32:06,090 --> 00:32:12,269
live off the wire you don't go to a form

00:32:09,989 --> 00:32:14,100
editor form and hit submit you may well

00:32:12,269 --> 00:32:16,679
have to have a JAX support in place

00:32:14,100 --> 00:32:18,259
editing for for a view of something

00:32:16,679 --> 00:32:20,700
that's currently in the database or

00:32:18,259 --> 00:32:23,489
on-screen validation for a form that's

00:32:20,700 --> 00:32:25,320
currently there we've got things like P

00:32:23,489 --> 00:32:27,090
Jack's you know github user interface

00:32:25,320 --> 00:32:28,470
where it doesn't look like the pages

00:32:27,090 --> 00:32:29,820
actually reloading you've kind of got

00:32:28,470 --> 00:32:31,409
this banner that's always there and

00:32:29,820 --> 00:32:33,239
there's content that moves underneath it

00:32:31,409 --> 00:32:34,590
the URL changes but the content is

00:32:33,239 --> 00:32:36,659
always there or the header is always

00:32:34,590 --> 00:32:38,369
there so it looks like it's a persistent

00:32:36,659 --> 00:32:42,419
application there are clever ways of

00:32:38,369 --> 00:32:43,859
doing it's called P jacks you've got you

00:32:42,419 --> 00:32:45,629
might want to do multiple actions per

00:32:43,859 --> 00:32:47,429
page it's not just here's a form hit

00:32:45,629 --> 00:32:48,690
submit its well here's the edit and

00:32:47,429 --> 00:32:50,190
here's the delete and here's this other

00:32:48,690 --> 00:32:53,220
thing and you want all those buttons to

00:32:50,190 --> 00:32:55,409
be on one page you've also got rich

00:32:53,220 --> 00:32:56,999
JavaScript driven user interfaces the

00:32:55,409 --> 00:32:59,129
emergence of frameworks like react and

00:32:56,999 --> 00:33:00,989
angular and ember these are all part of

00:32:59,129 --> 00:33:04,739
building very rich client side

00:33:00,989 --> 00:33:06,769
experiences Django has historically for

00:33:04,739 --> 00:33:08,609
as a result of where it's come from

00:33:06,769 --> 00:33:10,289
stood there and said okay we're a

00:33:08,609 --> 00:33:12,749
server-side framework this isn't our

00:33:10,289 --> 00:33:14,249
problem to solve it's up to you to build

00:33:12,749 --> 00:33:16,200
the client and we'll build the server

00:33:14,249 --> 00:33:18,570
and give you tools but these days the

00:33:16,200 --> 00:33:20,369
two need to interact really closely and

00:33:18,570 --> 00:33:21,720
this is why things like no J's get get

00:33:20,369 --> 00:33:23,850
really good traction because you just

00:33:21,720 --> 00:33:25,170
build the one language on both ends for

00:33:23,850 --> 00:33:26,580
the love of God I'd like

00:33:25,170 --> 00:33:29,190
to not have to build JavaScript for a

00:33:26,580 --> 00:33:32,070
living particularly not on the server so

00:33:29,190 --> 00:33:33,540
is that our only option how do surely we

00:33:32,070 --> 00:33:36,000
must there must be a better way here if

00:33:33,540 --> 00:33:38,310
we can get better integration between a

00:33:36,000 --> 00:33:39,720
client-side framework and Joe and Django

00:33:38,310 --> 00:33:42,300
then I think we should be pursuing that

00:33:39,720 --> 00:33:44,100
in particular the concept of API driven

00:33:42,300 --> 00:33:46,620
user interfaces if you're trying to

00:33:44,100 --> 00:33:49,080
build a product really what you're doing

00:33:46,620 --> 00:33:51,780
is you've got a user interface a user

00:33:49,080 --> 00:33:54,930
interface is just a way to let meet push

00:33:51,780 --> 00:33:57,630
buttons on a website so that then other

00:33:54,930 --> 00:33:59,100
people who aren't meet can build

00:33:57,630 --> 00:34:01,230
computers that will talk to your website

00:33:59,100 --> 00:34:02,370
if meet can push a button why shouldn't

00:34:01,230 --> 00:34:04,770
and a computer be able to push that

00:34:02,370 --> 00:34:07,320
button as well and if we start thinking

00:34:04,770 --> 00:34:10,200
about your user interface as an API that

00:34:07,320 --> 00:34:11,730
has a skin that a human can use then you

00:34:10,200 --> 00:34:14,669
start thinking about your projects in a

00:34:11,730 --> 00:34:16,770
couple of the different way so you know

00:34:14,669 --> 00:34:18,419
a modern web site is just an API with a

00:34:16,770 --> 00:34:20,100
user interface so user interface as a

00:34:18,419 --> 00:34:21,870
way to get me to invoke that API in a

00:34:20,100 --> 00:34:25,890
way to visualize the results of that API

00:34:21,870 --> 00:34:28,140
in a way that MIT can understand it now

00:34:25,890 --> 00:34:29,910
I hope that the value of API is broadly

00:34:28,140 --> 00:34:31,590
is something we kind of just take for

00:34:29,910 --> 00:34:33,810
granted as engineers who have been doing

00:34:31,590 --> 00:34:37,110
this but if we rethink the way that

00:34:33,810 --> 00:34:39,060
we're building applications and treat ap

00:34:37,110 --> 00:34:40,440
izes documented version first class

00:34:39,060 --> 00:34:42,150
citizens and sort of know they are the

00:34:40,440 --> 00:34:44,370
primary primary reason for how we build

00:34:42,150 --> 00:34:46,470
this stuff then that enables others to

00:34:44,370 --> 00:34:47,910
remix and reuse that data it enables

00:34:46,470 --> 00:34:50,610
other people to build alternate user

00:34:47,910 --> 00:34:52,260
interfaces to your data you know and it

00:34:50,610 --> 00:34:53,460
there isn't any I can't think of any

00:34:52,260 --> 00:34:55,020
reason why an appropriately

00:34:53,460 --> 00:34:56,790
authenticated automated process

00:34:55,020 --> 00:34:59,570
shouldn't be able to do everything that

00:34:56,790 --> 00:35:02,370
appropriately authenticated human can do

00:34:59,570 --> 00:35:03,780
if we treat ap Isis for his class

00:35:02,370 --> 00:35:05,310
citizens then all this sort of stuff

00:35:03,780 --> 00:35:06,660
happens for free and you don't have to

00:35:05,310 --> 00:35:08,550
worry about this god-awful interface

00:35:06,660 --> 00:35:10,020
that the transport department has left

00:35:08,550 --> 00:35:11,820
you with for working out where the buses

00:35:10,020 --> 00:35:14,070
are kind of come on time you can build a

00:35:11,820 --> 00:35:18,360
better one because you've got access to

00:35:14,070 --> 00:35:20,130
the data now API driven you API driven

00:35:18,360 --> 00:35:22,080
server-side interactions are really easy

00:35:20,130 --> 00:35:23,430
in Django the API part is easy to solve

00:35:22,080 --> 00:35:25,230
we've got dear Django rest framework

00:35:23,430 --> 00:35:27,270
we've got tasty pie we've got others

00:35:25,230 --> 00:35:29,820
that are in the community but we still

00:35:27,270 --> 00:35:31,710
need to have that view side of things we

00:35:29,820 --> 00:35:34,500
need to be able to represent the ideas

00:35:31,710 --> 00:35:36,510
of navigation and composition and in

00:35:34,500 --> 00:35:37,420
order better do that we need to have a

00:35:36,510 --> 00:35:40,319
strong base

00:35:37,420 --> 00:35:43,869
framework my argument is that

00:35:40,319 --> 00:35:45,400
class-based views potentially provide

00:35:43,869 --> 00:35:47,079
that framework notice I'm saying

00:35:45,400 --> 00:35:49,930
class-based views here not class-based

00:35:47,079 --> 00:35:51,010
generic views I think generic views are

00:35:49,930 --> 00:35:53,230
solving the wrong problem they're trying

00:35:51,010 --> 00:35:56,349
to solve the 2005 problem we need a new

00:35:53,230 --> 00:35:58,150
set of class based views that look at

00:35:56,349 --> 00:36:00,250
this problem slightly differently that

00:35:58,150 --> 00:36:03,400
look at the problems we have on websites

00:36:00,250 --> 00:36:07,660
today how do we build that how do we

00:36:03,400 --> 00:36:08,920
build that to interact with an API now

00:36:07,660 --> 00:36:10,329
how can I say with confidence that

00:36:08,920 --> 00:36:13,059
class-based views provide that framework

00:36:10,329 --> 00:36:15,010
well because it's already basically

00:36:13,059 --> 00:36:17,770
being being done it's called Jango

00:36:15,010 --> 00:36:19,809
contrib admin janki's Jango's admin is

00:36:17,770 --> 00:36:21,609
at its core a class-based view it's not

00:36:19,809 --> 00:36:23,559
using Django's class-based view

00:36:21,609 --> 00:36:27,010
framework but it uses something that's

00:36:23,559 --> 00:36:28,750
sufficiently closes to be you know to be

00:36:27,010 --> 00:36:30,640
honest a the analogy holds its

00:36:28,750 --> 00:36:32,410
implemented using a symbol single single

00:36:30,640 --> 00:36:35,530
call method which again like I said

00:36:32,410 --> 00:36:36,880
before has this security problem but you

00:36:35,530 --> 00:36:38,950
know we could avoid that by migrating

00:36:36,880 --> 00:36:40,690
janko's admin to to our own call based

00:36:38,950 --> 00:36:42,490
framework and eating our own dog food it

00:36:40,690 --> 00:36:43,960
doesn't have HTTP verb support which

00:36:42,490 --> 00:36:46,770
Django's class place for your framework

00:36:43,960 --> 00:36:48,910
does and it suffers from state problems

00:36:46,770 --> 00:36:50,619
the good news is that all that stuff

00:36:48,910 --> 00:36:52,210
probably doesn't matter it's relatively

00:36:50,619 --> 00:36:53,710
easy to adapt around those problems and

00:36:52,210 --> 00:36:55,329
get Django's and we could migrate

00:36:53,710 --> 00:36:57,010
Django's atom into our own class based

00:36:55,329 --> 00:36:58,630
few framework but I'm also not

00:36:57,010 --> 00:37:01,030
necessarily saying that Django's admin

00:36:58,630 --> 00:37:02,470
is where we should be starting or at

00:37:01,030 --> 00:37:03,730
least at djangos admin as it currently

00:37:02,470 --> 00:37:05,170
stands is where we should be starting

00:37:03,730 --> 00:37:07,930
what I'm what I'm kind of talking about

00:37:05,170 --> 00:37:09,670
here is that admin as an idea is a

00:37:07,930 --> 00:37:12,220
website that has all these problems

00:37:09,670 --> 00:37:13,900
there is an API that's there we need to

00:37:12,220 --> 00:37:16,059
be able to manipulate objects at a row

00:37:13,900 --> 00:37:17,710
level we need you better put a pretty

00:37:16,059 --> 00:37:19,510
user interface on top of that user info

00:37:17,710 --> 00:37:21,520
on top of that API that lets you see a

00:37:19,510 --> 00:37:22,869
list of all the available objects and an

00:37:21,520 --> 00:37:25,119
object and all of its related objects

00:37:22,869 --> 00:37:26,380
and make it easy to go to say well

00:37:25,119 --> 00:37:28,089
here's these four bits of core

00:37:26,380 --> 00:37:30,359
functionality they want to interact with

00:37:28,089 --> 00:37:33,339
this list we interact with this object

00:37:30,359 --> 00:37:35,500
it's also something that is a very very

00:37:33,339 --> 00:37:36,990
big blue sky project I have ideas I

00:37:35,500 --> 00:37:39,940
certainly don't have all the answers

00:37:36,990 --> 00:37:42,309
it's a it's a blue sky project but it's

00:37:39,940 --> 00:37:43,660
one that I am interested in and as an

00:37:42,309 --> 00:37:46,270
interesting side effect it also doesn't

00:37:43,660 --> 00:37:48,160
need to be part of Jango's core Django's

00:37:46,270 --> 00:37:49,690
admin is distributed as part of core but

00:37:48,160 --> 00:37:50,870
that's really a conceit of packaging

00:37:49,690 --> 00:37:53,990
it's born because of the

00:37:50,870 --> 00:37:56,630
fact that in 2005 pip install Django

00:37:53,990 --> 00:37:58,340
didn't exist you had easy install and it

00:37:56,630 --> 00:38:00,020
is installed depending upon where the

00:37:58,340 --> 00:38:02,530
moon was wouldn't necessarily bring in

00:38:00,020 --> 00:38:05,150
all its golf its dependencies that

00:38:02,530 --> 00:38:08,660
problem has been fixed we know how to do

00:38:05,150 --> 00:38:10,100
that now so we can have a package that

00:38:08,660 --> 00:38:11,960
is completely external to core that

00:38:10,100 --> 00:38:14,480
plays around this space and build a much

00:38:11,960 --> 00:38:17,390
richer API driven introspective

00:38:14,480 --> 00:38:20,870
class-based admin that is the kind of

00:38:17,390 --> 00:38:23,510
framework we can work forward and Django

00:38:20,870 --> 00:38:26,000
out this new invitation of admin admin

00:38:23,510 --> 00:38:28,670
is really just one manifestation of the

00:38:26,000 --> 00:38:29,900
broader set of API driven user

00:38:28,670 --> 00:38:32,570
interfaces that have pieces of

00:38:29,900 --> 00:38:34,180
functionality on a page in a sense admin

00:38:32,570 --> 00:38:37,280
is really just a very very an

00:38:34,180 --> 00:38:38,900
introspective application of the API for

00:38:37,280 --> 00:38:42,110
building this type of sweb site that we

00:38:38,900 --> 00:38:44,720
could have so this is essentially a call

00:38:42,110 --> 00:38:46,220
to action here in discussion when you're

00:38:44,720 --> 00:38:47,570
talking about class-based views please

00:38:46,220 --> 00:38:49,700
be clear about whether you're talking

00:38:47,570 --> 00:38:52,460
about class-based views or class-based

00:38:49,700 --> 00:38:54,290
generic views I will wear a lot of the

00:38:52,460 --> 00:38:56,450
the faults with class-based generic

00:38:54,290 --> 00:38:58,580
views a lot of it is documentation

00:38:56,450 --> 00:39:01,300
related that's not to say they couldn't

00:38:58,580 --> 00:39:03,860
be improved Doc's can always be improved

00:39:01,300 --> 00:39:06,380
there are patches that are sitting there

00:39:03,860 --> 00:39:09,050
in Django's ticket tree like 1888 30

00:39:06,380 --> 00:39:11,120
which is a extensions to exam goes

00:39:09,050 --> 00:39:12,080
existing class-based views to make a

00:39:11,120 --> 00:39:14,180
whole bunch of other things more

00:39:12,080 --> 00:39:15,890
possible if you're interested in making

00:39:14,180 --> 00:39:18,080
what is there better there are ways you

00:39:15,890 --> 00:39:19,520
can contribute in a practical way but

00:39:18,080 --> 00:39:21,050
more broadly I'd like to encourage

00:39:19,520 --> 00:39:24,130
people to think about the bigger problem

00:39:21,050 --> 00:39:26,270
here Django's long-term long-term future

00:39:24,130 --> 00:39:27,650
depends upon us being able to compete

00:39:26,270 --> 00:39:29,240
with the meteors in the nodes of the

00:39:27,650 --> 00:39:31,220
world who are going out there saying

00:39:29,240 --> 00:39:33,560
look at this wonderful demo in 2005

00:39:31,220 --> 00:39:35,960
building a blog in fit in 10 minutes was

00:39:33,560 --> 00:39:37,610
a huge accomplishment now you're going

00:39:35,960 --> 00:39:39,410
out and competing with meteor who are

00:39:37,610 --> 00:39:41,960
building real-time chat service in five

00:39:39,410 --> 00:39:44,150
minutes we don't have a good answer for

00:39:41,960 --> 00:39:45,410
that and we should because if we're

00:39:44,150 --> 00:39:46,550
going to be a long term project we need

00:39:45,410 --> 00:39:49,940
to see where the way the wind is blowing

00:39:46,550 --> 00:39:51,680
and be able to adapt to it and Django's

00:39:49,940 --> 00:39:53,480
admin for me at least is a very useful

00:39:51,680 --> 00:39:55,130
case study of a complex piece of

00:39:53,480 --> 00:39:57,830
functionality that is directly

00:39:55,130 --> 00:40:01,090
applicable to this problem so with that

00:39:57,830 --> 00:40:01,090
open the floor for questions

00:40:08,580 --> 00:40:10,640

YouTube URL: https://www.youtube.com/watch?v=_UyBkkRlylY


