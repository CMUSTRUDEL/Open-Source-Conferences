Title: Django MiniConf: Lightning talks
Publication date: 2014-08-09
Playlist: PyCon Australia 2014 Django MiniConf
Description: 
	PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:03,800 --> 00:00:10,320
spare time side projects mainly to do

00:00:06,630 --> 00:00:14,400
with music and I use a lot of rest api

00:00:10,320 --> 00:00:18,090
is like Rdio spotify musicbrainz there's

00:00:14,400 --> 00:00:20,640
a lot of them and accessing rest api is

00:00:18,090 --> 00:00:23,279
isn't too hard these days they're most

00:00:20,640 --> 00:00:26,070
most of them are in Jason and as you

00:00:23,279 --> 00:00:27,990
know Jason maps to Python dictionaries

00:00:26,070 --> 00:00:31,859
really easily there's still quite a bit

00:00:27,990 --> 00:00:35,430
of boilerplate you need to do and so for

00:00:31,859 --> 00:00:38,129
example here's three endpoints from

00:00:35,430 --> 00:00:40,590
different music AP is that are all about

00:00:38,129 --> 00:00:42,629
just getting a single artist so I

00:00:40,590 --> 00:00:45,870
thought well maybe you could make it a

00:00:42,629 --> 00:00:50,910
lot easier and use the Jenga or arm or M

00:00:45,870 --> 00:00:52,800
syntax and so with Django when you can

00:00:50,910 --> 00:00:56,219
use REST API as as though there were

00:00:52,800 --> 00:01:00,539
Django models and they look exactly the

00:00:56,219 --> 00:01:02,370
same as regular Jenga or RM queries the

00:01:00,539 --> 00:01:05,700
only difference is that when you call a

00:01:02,370 --> 00:01:09,299
method on a django wam object it will

00:01:05,700 --> 00:01:12,750
request a rest resource from the server

00:01:09,299 --> 00:01:15,299
behind the scenes so you can think of it

00:01:12,750 --> 00:01:18,470
as being kind of like a web page PHP API

00:01:15,299 --> 00:01:20,790
to object relational mapping mapper well

00:01:18,470 --> 00:01:25,619
sort of figure out at Madge's together

00:01:20,790 --> 00:01:29,189
and so looks like that and another

00:01:25,619 --> 00:01:32,820
advantage is that you kind of limited to

00:01:29,189 --> 00:01:35,880
whatever methods the rest api provider

00:01:32,820 --> 00:01:39,180
provides so for example with the Twitter

00:01:35,880 --> 00:01:42,450
API you can get all the tweets sorted by

00:01:39,180 --> 00:01:44,880
the window last tweeted but you can't

00:01:42,450 --> 00:01:49,409
get them ordered by how many retweets

00:01:44,880 --> 00:01:51,899
they've had but with Django Wayne you

00:01:49,409 --> 00:01:54,840
can do any query that Django Oren can do

00:01:51,899 --> 00:01:58,530
and that's because it inherits from the

00:01:54,840 --> 00:02:00,899
Django our model so what is the wine

00:01:58,530 --> 00:02:03,030
bottle this is this is it here it's

00:02:00,899 --> 00:02:05,250
three lines of code basically it has

00:02:03,030 --> 00:02:08,100
this special lamp manager that's that

00:02:05,250 --> 00:02:12,210
guy and that's where all the magic

00:02:08,100 --> 00:02:15,420
happens so in order to use Jenga when

00:02:12,210 --> 00:02:16,720
you first need to create a wam model so

00:02:15,420 --> 00:02:18,700
here's a very simple

00:02:16,720 --> 00:02:22,840
example and it pretty much looks the

00:02:18,700 --> 00:03:06,610
same as a regular Django model so try to

00:02:22,840 --> 00:03:12,820
give you a demo um where are we yeah

00:03:06,610 --> 00:03:14,680
it's okay so here in this example I'm

00:03:12,820 --> 00:03:17,020
using a Twitter user model and i'm

00:03:14,680 --> 00:03:24,940
getting my latest tweets using their

00:03:17,020 --> 00:03:27,480
jungle or I'm syntax there we go there's

00:03:24,940 --> 00:03:27,480
the tweet

00:03:29,500 --> 00:03:36,870
and we can get this time we can sort by

00:03:33,220 --> 00:03:41,860
retweet count for the Django con tweets

00:03:36,870 --> 00:03:44,680
yes and I think that's from last year

00:03:41,860 --> 00:03:49,690
but we've got one of that Katie cunning

00:03:44,680 --> 00:03:52,090
it's number three pretty good okay so it

00:03:49,690 --> 00:03:54,850
also has this parameter you can pass one

00:03:52,090 --> 00:03:57,190
minute where you can go wham pages equal

00:03:54,850 --> 00:03:59,320
to all and it will handle the rest

00:03:57,190 --> 00:04:03,640
framework rest paging for you behind the

00:03:59,320 --> 00:04:08,110
scenes so you can see their URLs that

00:04:03,640 --> 00:04:12,850
are getting cold here here we go it is

00:04:08,110 --> 00:04:21,010
the first request and slowing down a bit

00:04:12,850 --> 00:04:25,090
that theme is about four pages so this

00:04:21,010 --> 00:04:27,430
is coming from devops bharat here we go

00:04:25,090 --> 00:04:32,680
number one tweet big tada is anything

00:04:27,430 --> 00:04:33,700
which is crush excel I'm nearly out of

00:04:32,680 --> 00:04:37,540
shower so there's a few more examples

00:04:33,700 --> 00:04:40,450
that you can look at at the github repo

00:04:37,540 --> 00:04:43,360
and I haven't put it on Popeye yet but i

00:04:40,450 --> 00:04:56,260
will use jacobs advice and how to do it

00:04:43,360 --> 00:04:58,639
all talking later alright next speaker

00:04:56,260 --> 00:05:01,650
is brian way

00:04:58,639 --> 00:05:04,760
hi I'm Brian May I work for fee-free

00:05:01,650 --> 00:05:07,070
Alliance and that we provide

00:05:04,760 --> 00:05:12,660
supercomputer surfaces and

00:05:07,070 --> 00:05:17,250
supercomputers for researchers and I'm

00:05:12,660 --> 00:05:21,270
responsible in my day-to-day job per

00:05:17,250 --> 00:05:24,960
oggi which is what we use for managing

00:05:21,270 --> 00:05:27,419
our users on your projects and people

00:05:24,960 --> 00:05:30,540
can now login and apply for accounts of

00:05:27,419 --> 00:05:33,360
that sort of thing so groggy is I it's

00:05:30,540 --> 00:05:37,950
entirely open source suck cluster

00:05:33,360 --> 00:05:40,139
account management system and as an

00:05:37,950 --> 00:05:43,740
example of their screenshot fancy a

00:05:40,139 --> 00:05:47,220
screenshot as accurate as of several

00:05:43,740 --> 00:05:52,500
days ago of our main cluster we've got

00:05:47,220 --> 00:05:54,690
at be free formerly known as feedback so

00:05:52,500 --> 00:05:59,490
as p.m. developments entirely open

00:05:54,690 --> 00:06:03,360
source open development / codes of

00:05:59,490 --> 00:06:08,870
howling github and it's got a test

00:06:03,360 --> 00:06:12,000
framework and Guerra for code review and

00:06:08,870 --> 00:06:16,620
it's got lots of features or as a debian

00:06:12,000 --> 00:06:19,080
develop of I get Debian packages and I'm

00:06:16,620 --> 00:06:21,780
attempting to get all the dependent

00:06:19,080 --> 00:06:23,729
packages in debian at the moment or five

00:06:21,780 --> 00:06:27,000
has two extra moments that are currently

00:06:23,729 --> 00:06:33,570
stored in waiting in New for a full

00:06:27,000 --> 00:06:40,050
manual approval and you have has lots of

00:06:33,570 --> 00:06:42,510
work still to go so yeah parag is also

00:06:40,050 --> 00:06:45,150
unique sense or problems that i haven't

00:06:42,510 --> 00:06:47,880
seen addressed elsewhere and lots of

00:06:45,150 --> 00:06:50,389
works being made to make it a standard

00:06:47,880 --> 00:06:50,389
solution

00:06:57,119 --> 00:07:01,449
and the best part of all less than five

00:07:00,129 --> 00:07:04,539
minutes that means more lightning talks

00:07:01,449 --> 00:07:06,309
our next speaker is ground Dalton who is

00:07:04,539 --> 00:07:09,819
apparently going to be a very grumpy old

00:07:06,309 --> 00:07:14,759
man according this so excellent okay

00:07:09,819 --> 00:07:18,639
hands up anyone who's ever used mod wsgi

00:07:14,759 --> 00:07:20,979
how many are still using it yes a lot

00:07:18,639 --> 00:07:22,329
not not good people leaving on me it's

00:07:20,979 --> 00:07:24,369
not it's not good I don't like when

00:07:22,329 --> 00:07:26,139
people leave so part of the reason

00:07:24,369 --> 00:07:27,969
people don't like Madhuri is they feel

00:07:26,139 --> 00:07:31,629
is too hard to set up and get right to

00:07:27,969 --> 00:07:33,189
default setups I just been Apache and

00:07:31,629 --> 00:07:35,409
not favorable to because they set up the

00:07:33,189 --> 00:07:39,159
PHP so I'm going to show you a quicker

00:07:35,409 --> 00:07:41,309
much better way of doing things so what

00:07:39,159 --> 00:07:43,599
I've been working on is this new thing

00:07:41,309 --> 00:07:46,469
effectively just go I should point out

00:07:43,599 --> 00:07:48,539
first that I've actually got in here a

00:07:46,469 --> 00:07:51,399
django app sitting in this directory

00:07:48,539 --> 00:07:53,169
I've created a virtual environment I've

00:07:51,399 --> 00:07:54,189
activated it I've got the egg back

00:07:53,169 --> 00:07:56,739
running so I have done all that in

00:07:54,189 --> 00:08:07,929
advance so just prove it I will actually

00:07:56,739 --> 00:08:14,079
run it okay so django app run do all

00:08:07,929 --> 00:08:16,659
that now what I'm going to do it here we

00:08:14,079 --> 00:08:23,319
want to get mod wsgi talk very long

00:08:16,659 --> 00:08:30,299
process isn't it oh good network is

00:08:23,319 --> 00:08:30,299
working done installed

00:08:32,539 --> 00:08:41,969
we want to run it it's running it's

00:08:40,740 --> 00:08:43,890
automatically gone generated

00:08:41,969 --> 00:08:46,580
configuration and that's just a little

00:08:43,890 --> 00:08:53,850
splash screams proving it's working I

00:08:46,580 --> 00:08:57,150
want to run it with a actual script the

00:08:53,850 --> 00:08:58,650
world and it's working so it's got an

00:08:57,150 --> 00:09:01,080
automatically then mounted dad where's

00:08:58,650 --> 00:09:02,760
capitation was running but I've had a

00:09:01,080 --> 00:09:09,150
django app here oh I saw your step

00:09:02,760 --> 00:09:11,010
better than that so got my django app

00:09:09,150 --> 00:09:14,850
already shows that was running now i

00:09:11,010 --> 00:09:18,240
want to modify my settings file and i

00:09:14,850 --> 00:09:21,270
want to do two things in it i'm going to

00:09:18,240 --> 00:09:25,470
add in mod whiskey server into the

00:09:21,270 --> 00:09:27,750
stalled apps and I want to have a patchy

00:09:25,470 --> 00:09:30,150
moderate real handle static files so I'm

00:09:27,750 --> 00:09:33,810
going to put in a static route I'm going

00:09:30,150 --> 00:09:35,010
to then click my static files and I

00:09:33,810 --> 00:09:36,900
really don't understand why people don't

00:09:35,010 --> 00:09:39,690
accept what he said why I have to press

00:09:36,900 --> 00:09:45,480
us on this a decorating I've done that

00:09:39,690 --> 00:09:46,890
I'm then going to go and do but we're

00:09:45,480 --> 00:09:49,529
cutting your head here so we'll just do

00:09:46,890 --> 00:09:53,850
this one first so running Django

00:09:49,529 --> 00:09:58,260
management man run mod whiskey that has

00:09:53,850 --> 00:09:59,760
gone and run up Django under modules

00:09:58,260 --> 00:10:07,800
with mud whiskey no configuration

00:09:59,760 --> 00:10:14,820
required at all and just be even tricky

00:10:07,800 --> 00:10:20,610
i can go reload on changes tell you that

00:10:14,820 --> 00:10:23,949
right now there there's crop a cop

00:10:20,610 --> 00:10:29,149
chopping things off so let's

00:10:23,949 --> 00:10:31,040
yeah we'll do the one okay so this time

00:10:29,149 --> 00:10:37,639
we're going to go back over here so

00:10:31,040 --> 00:10:41,149
normal page let's go in and edit the

00:10:37,639 --> 00:10:44,089
URLs uncomment that line so I've changed

00:10:41,149 --> 00:10:46,279
that app I have not restarted apache and

00:10:44,089 --> 00:10:50,029
it's very low delicate just like your

00:10:46,279 --> 00:10:53,329
normal Django developing server now by

00:10:50,029 --> 00:10:55,730
default that we will go and run one

00:10:53,329 --> 00:10:57,499
single process which has five Fred's I

00:10:55,730 --> 00:10:59,600
think so it's a multi-threaded

00:10:57,499 --> 00:11:02,540
configuration but if your code is not

00:10:59,600 --> 00:11:08,720
safe for multi-threaded you can always

00:11:02,540 --> 00:11:10,339
go off here and go right it was one now

00:11:08,720 --> 00:11:13,759
you've got five processes and one Fred

00:11:10,339 --> 00:11:16,759
so and it does it all for you that's all

00:11:13,759 --> 00:11:18,980
running in mods keys demon mode which is

00:11:16,759 --> 00:11:24,800
preferred set up lots of different

00:11:18,980 --> 00:11:28,759
command line options not as many as

00:11:24,800 --> 00:11:31,009
uwsgi but a lot of lot of saying

00:11:28,759 --> 00:11:33,470
defaults are put in their side specially

00:11:31,009 --> 00:11:36,079
curated a configuration which I believe

00:11:33,470 --> 00:11:38,300
is a very good starting point and you've

00:11:36,079 --> 00:11:39,889
got the options there which you can go

00:11:38,300 --> 00:11:42,800
from there now it is possible to

00:11:39,889 --> 00:11:46,399
actually do something like this and

00:11:42,800 --> 00:11:48,769
running at a time this will actually

00:11:46,399 --> 00:11:51,610
just generate the configuration only and

00:11:48,769 --> 00:11:54,740
I can then actually go in there and then

00:11:51,610 --> 00:11:57,649
separately without using the management

00:11:54,740 --> 00:11:59,509
command do that that is run my server

00:11:57,649 --> 00:12:01,069
now I could have gotten a specified a

00:11:59,509 --> 00:12:02,959
user and group there generate that

00:12:01,069 --> 00:12:05,329
config I could then take that and run it

00:12:02,959 --> 00:12:08,529
as root and you've got your config for

00:12:05,329 --> 00:12:08,529
the whole system

00:12:17,510 --> 00:12:21,840
life I guess up they would get okay cool

00:12:20,580 --> 00:12:23,970
thank you very much this is Hawk out

00:12:21,840 --> 00:12:26,520
talking about twisted hello something is

00:12:23,970 --> 00:12:28,860
C 10k and asynchronous and all of that

00:12:26,520 --> 00:12:32,790
stuff WTF is twisted or al amongst

00:12:28,860 --> 00:12:34,500
ponies okay there is a longer version if

00:12:32,790 --> 00:12:36,750
you google that I'm whole cow I'm a

00:12:34,500 --> 00:12:39,450
twisted core dev and release manager for

00:12:36,750 --> 00:12:41,250
the past year so twisting one slide

00:12:39,450 --> 00:12:43,530
twisted is a framework for writing

00:12:41,250 --> 00:12:45,960
network applications in Python it's best

00:12:43,530 --> 00:12:48,120
known for deferred twisted asynchronous

00:12:45,960 --> 00:12:51,360
abstraction it contains protocol

00:12:48,120 --> 00:12:54,600
implementations for HTTP SMTP IMAP dns

00:12:51,360 --> 00:12:56,460
all sorts of things the reason you want

00:12:54,600 --> 00:12:58,620
to use it is that for i 0 blocking

00:12:56,460 --> 00:13:01,770
applications it has a higher performance

00:12:58,620 --> 00:13:04,200
is very stable and mature code base has

00:13:01,770 --> 00:13:07,290
quite high test coverage and a great

00:13:04,200 --> 00:13:08,750
community so essentially there's a

00:13:07,290 --> 00:13:11,100
couple of things that makes it different

00:13:08,750 --> 00:13:12,530
this is things that the twisted

00:13:11,100 --> 00:13:15,630
communities learned over the years

00:13:12,530 --> 00:13:18,720
subclassing is bad multiple inheritance

00:13:15,630 --> 00:13:21,840
is really bad time base releases a king

00:13:18,720 --> 00:13:25,470
we go by year so 14 pornos first release

00:13:21,840 --> 00:13:28,670
in 2014 it's better to release the api's

00:13:25,470 --> 00:13:31,620
in an early RAW format then not at all

00:13:28,670 --> 00:13:35,790
everything needs tests and everything

00:13:31,620 --> 00:13:37,800
needs reviewing and only bad api's can't

00:13:35,790 --> 00:13:39,900
be unit tested so if you're looking at

00:13:37,800 --> 00:13:41,780
some code you can't unit test it we

00:13:39,900 --> 00:13:44,490
generally try and rework it so you can

00:13:41,780 --> 00:13:45,720
we also have a fleet of build slave so

00:13:44,490 --> 00:13:49,320
we make sure it works on everything from

00:13:45,720 --> 00:13:53,640
red hats who are going to to windows to

00:13:49,320 --> 00:13:55,710
the OSX all sorts of things essentially

00:13:53,640 --> 00:13:58,940
how to ister worse are short mostly

00:13:55,710 --> 00:14:01,350
correct over you we use the event loop

00:13:58,940 --> 00:14:03,120
essentially it's a reactor it just spins

00:14:01,350 --> 00:14:05,520
around in an infinite loop going over

00:14:03,120 --> 00:14:07,830
and over and over waiting for some input

00:14:05,520 --> 00:14:11,490
or output to be ready once it's ready it

00:14:07,830 --> 00:14:13,320
fires off an event and if while you're

00:14:11,490 --> 00:14:16,910
waiting for IO it waits for other tasks

00:14:13,320 --> 00:14:19,650
oh well it's waning it runs over tasks

00:14:16,910 --> 00:14:22,140
utilize the reactor used to thirds which

00:14:19,650 --> 00:14:25,110
is essentially an IOU for a result it's

00:14:22,140 --> 00:14:28,470
sort of like futures or jQuery defer

00:14:25,110 --> 00:14:30,120
or a couple other things like that it

00:14:28,470 --> 00:14:31,560
contains callback chain which is a

00:14:30,120 --> 00:14:35,209
series of functions that are running

00:14:31,560 --> 00:14:37,529
sequence after that result is appeared

00:14:35,209 --> 00:14:41,250
we have event loop integrations for

00:14:37,529 --> 00:14:45,000
select a Paul KQ g TK and QT plus a few

00:14:41,250 --> 00:14:49,670
others plus the windows one which I ocp

00:14:45,000 --> 00:14:53,100
that's it so there's the callback chain

00:14:49,670 --> 00:14:54,779
the easiest way to understand it is like

00:14:53,100 --> 00:14:55,980
a production line you have something

00:14:54,779 --> 00:14:59,250
that happens and you pass it through

00:14:55,980 --> 00:15:02,579
sets of blocks that's essentially the

00:14:59,250 --> 00:15:04,829
callback train each function is called

00:15:02,579 --> 00:15:07,170
with the last one as its first argument

00:15:04,829 --> 00:15:10,320
and you can pass another one's using

00:15:07,170 --> 00:15:11,940
lambdas they can return either a roll

00:15:10,320 --> 00:15:13,860
result or they can return another

00:15:11,940 --> 00:15:15,899
deferred so if you've got some I oh that

00:15:13,860 --> 00:15:18,480
does some stuff and then it waits for

00:15:15,899 --> 00:15:20,160
some more I oh you can do that error

00:15:18,480 --> 00:15:22,200
handling is done by something similar

00:15:20,160 --> 00:15:24,420
called herb acts which is essentially a

00:15:22,200 --> 00:15:26,399
synchronous error handlers it'll catch

00:15:24,420 --> 00:15:27,570
all errors they occur on the chamber for

00:15:26,399 --> 00:15:29,190
it so you can have something at the

00:15:27,570 --> 00:15:30,990
start a whole bunch of whole bunch of

00:15:29,190 --> 00:15:34,199
callbacks and in an back which will

00:15:30,990 --> 00:15:35,490
catch the whole thing automatically the

00:15:34,199 --> 00:15:37,230
benefits of running your code like this

00:15:35,490 --> 00:15:39,149
is that forces you to break it up into

00:15:37,230 --> 00:15:41,070
logical pieces you have an input and you

00:15:39,149 --> 00:15:44,010
have an output and you can't do any i/o

00:15:41,070 --> 00:15:45,750
in inside it so you take your input and

00:15:44,010 --> 00:15:48,350
you do something to it so you end up we

00:15:45,750 --> 00:15:50,339
have a lot of sensible transforms

00:15:48,350 --> 00:15:52,290
encourages we use because you have to

00:15:50,339 --> 00:15:53,730
make these things small to fit you can't

00:15:52,290 --> 00:15:55,410
do any i/o so if you're doing one thing

00:15:53,730 --> 00:15:58,050
a lot of times you can just use that

00:15:55,410 --> 00:16:00,449
little section you can also cancel them

00:15:58,050 --> 00:16:03,209
if you don't want the result anymore so

00:16:00,449 --> 00:16:04,829
you can stop a long-running process if

00:16:03,209 --> 00:16:06,089
the implementation handles it for

00:16:04,829 --> 00:16:08,970
example if you're doing a bit big

00:16:06,089 --> 00:16:11,699
database query it discourages global

00:16:08,970 --> 00:16:14,519
mutable state by forcing you to interact

00:16:11,699 --> 00:16:16,769
with everything else if you run them if

00:16:14,519 --> 00:16:18,990
you put global variables in it will

00:16:16,769 --> 00:16:21,899
destroy them because you will end up

00:16:18,990 --> 00:16:23,880
rewriting them no global mutable state

00:16:21,899 --> 00:16:25,649
means that scaling is pretty much just

00:16:23,880 --> 00:16:30,120
run up another server there's no state

00:16:25,649 --> 00:16:32,459
there that's kind so it just works it's

00:16:30,120 --> 00:16:35,220
so what can twist it do we have a

00:16:32,459 --> 00:16:37,800
flashlight KPI called Klein I am the

00:16:35,220 --> 00:16:39,030
release manager of that as well saratoga

00:16:37,800 --> 00:16:42,900
HB API

00:16:39,030 --> 00:16:45,180
framework which I wrote or there's a

00:16:42,900 --> 00:16:47,550
presentation on that on Sunday we've got

00:16:45,180 --> 00:16:50,340
stuck in it audubon which is a WebSocket

00:16:47,550 --> 00:16:52,320
spire to vendo and also Wham you can

00:16:50,340 --> 00:16:55,230
also do static file serving really

00:16:52,320 --> 00:16:59,460
easily this is a short code example of

00:16:55,230 --> 00:17:01,380
how that works really simple here's my

00:16:59,460 --> 00:17:03,750
saratoga HTTP API so that gives you a

00:17:01,380 --> 00:17:06,180
complete version 2 API we've input and

00:17:03,750 --> 00:17:09,330
output checking as email implementations

00:17:06,180 --> 00:17:11,690
DNS implementations implementations for

00:17:09,330 --> 00:17:13,890
chat and a whole bunch of other things

00:17:11,690 --> 00:17:16,740
you can use these links if you want to

00:17:13,890 --> 00:17:19,590
know more twisted ox2 for the win other

00:17:16,740 --> 00:17:21,360
stuff and thank you and just reminder I

00:17:19,590 --> 00:17:31,890
do have a talk on sunday and i will be

00:17:21,360 --> 00:17:37,680
talking about HP api next up is katie

00:17:31,890 --> 00:17:38,760
cunningham hi everybody I am going to

00:17:37,680 --> 00:17:40,230
take five minutes to tell you about

00:17:38,760 --> 00:17:41,850
things that you need to stop doing

00:17:40,230 --> 00:17:45,030
because you're keeping your sites from

00:17:41,850 --> 00:17:47,190
being accessible so first of all who am

00:17:45,030 --> 00:17:50,580
I I wrote this book accessibility

00:17:47,190 --> 00:17:52,140
handbook from O'Reilly first of all stop

00:17:50,580 --> 00:17:54,600
thinking that accessibility is just

00:17:52,140 --> 00:17:56,520
about blind people it includes them but

00:17:54,600 --> 00:17:58,800
it also includes people who have low

00:17:56,520 --> 00:18:00,720
vision so they do not have 2020 vision

00:17:58,800 --> 00:18:03,120
no matter what you do people who are

00:18:00,720 --> 00:18:05,790
colorblind the physically handicapped

00:18:03,120 --> 00:18:07,500
the cognitively disabled and the hearing

00:18:05,790 --> 00:18:10,370
disabled including the deaf but also

00:18:07,500 --> 00:18:13,380
including people who have hearing loss

00:18:10,370 --> 00:18:17,370
you need to stop doing this in your CSS

00:18:13,380 --> 00:18:19,260
resets outline is none or zero when you

00:18:17,370 --> 00:18:21,450
have keep people who can only use their

00:18:19,260 --> 00:18:23,610
keyboard to get around they need outline

00:18:21,450 --> 00:18:26,700
to be something usually the browser

00:18:23,610 --> 00:18:28,440
default and nobody actually remembers to

00:18:26,700 --> 00:18:30,270
style it they have resist so I'm going

00:18:28,440 --> 00:18:32,820
to go back and restyle it and they never

00:18:30,270 --> 00:18:35,460
do you want to know why nobody actually

00:18:32,820 --> 00:18:37,110
knows what it does from what I but I

00:18:35,460 --> 00:18:40,350
talked to designers who've been doing

00:18:37,110 --> 00:18:41,610
this for 10 15 you know 20 years they

00:18:40,350 --> 00:18:44,580
don't remember what outline actually

00:18:41,610 --> 00:18:48,000
does if it messes up your styling you

00:18:44,580 --> 00:18:51,240
have much bigger problems using tables

00:18:48,000 --> 00:18:52,830
as layout I can't believe I still have

00:18:51,240 --> 00:18:55,320
to keep putting this slide up

00:18:52,830 --> 00:18:57,240
year after year because I every year I

00:18:55,320 --> 00:19:00,840
find somebody else he's like yeah but

00:18:57,240 --> 00:19:02,909
but it's really easy tables are for

00:19:00,840 --> 00:19:06,330
tabular data if you can sort it than it

00:19:02,909 --> 00:19:14,610
should be in a table use CSS properly

00:19:06,330 --> 00:19:22,230
God it is your job do not use artsy

00:19:14,610 --> 00:19:23,700
contrast do not demand a precision on

00:19:22,230 --> 00:19:26,940
your website if you say you don't demand

00:19:23,700 --> 00:19:29,669
precision well to use radio buttons or

00:19:26,940 --> 00:19:33,149
check boxes do you know how to label an

00:19:29,669 --> 00:19:35,789
ID them properly no then you're

00:19:33,149 --> 00:19:37,980
demanding precision this is what your

00:19:35,789 --> 00:19:40,679
form should look like you should have a

00:19:37,980 --> 00:19:43,019
label for every input and you should

00:19:40,679 --> 00:19:45,299
have an ID that matches that label that

00:19:43,019 --> 00:19:47,429
way if they click on the text then it

00:19:45,299 --> 00:19:51,299
actually toggles the check box or the

00:19:47,429 --> 00:19:53,909
radio button it's like magic do not

00:19:51,299 --> 00:19:56,429
misuse headers headers are for section

00:19:53,909 --> 00:19:58,980
headings are you using them for styles

00:19:56,429 --> 00:20:03,809
once again have you forgotten how CSS

00:19:58,980 --> 00:20:09,029
works do not have crab aped HTML does

00:20:03,809 --> 00:20:11,010
your HTML validate oh my god why not you

00:20:09,029 --> 00:20:13,019
can use Firebug and chrome to figure out

00:20:11,010 --> 00:20:17,549
everything that's going wrong make sure

00:20:13,019 --> 00:20:21,750
your HTML validates and fix it this is

00:20:17,549 --> 00:20:24,600
again your job do you want to know more

00:20:21,750 --> 00:20:27,720
my toxins tougher of my website the real

00:20:24,600 --> 00:20:30,720
Katie net you can also read my book it's

00:20:27,720 --> 00:20:32,880
available at a Riley I'm an Amazon and

00:20:30,720 --> 00:20:36,090
you can also if you feel to ask me any

00:20:32,880 --> 00:20:37,950
question you want at K cunning I'm also

00:20:36,090 --> 00:20:40,850
going to be giving a keynote tomorrow on

00:20:37,950 --> 00:20:40,850
accessibility

00:20:47,930 --> 00:20:59,310
all right next up is Elena Williams

00:20:50,910 --> 00:21:00,930
talking about younger girls mom um this

00:20:59,310 --> 00:21:02,730
is just a really quick heads up in case

00:21:00,930 --> 00:21:04,740
you weren't aware there's this brand-new

00:21:02,730 --> 00:21:07,050
shiny spanking phenomenon phenomenon

00:21:04,740 --> 00:21:09,360
called Jango girls it's only just

00:21:07,050 --> 00:21:11,700
invented if you haven't heard of it Ruby

00:21:09,360 --> 00:21:13,320
girls has been around for ages we've

00:21:11,700 --> 00:21:16,830
always kind of been to be kind in this

00:21:13,320 --> 00:21:19,890
this was invented the last euro python

00:21:16,830 --> 00:21:21,870
by the 20 la sala sitar ski and Allison

00:21:19,890 --> 00:21:25,860
Jessica who were responsible for the

00:21:21,870 --> 00:21:28,470
awesome euro Django con about the circus

00:21:25,860 --> 00:21:31,440
a couple of years ago and they decided

00:21:28,470 --> 00:21:33,600
to take on this initiative they ran this

00:21:31,440 --> 00:21:35,430
for the first time last week and had

00:21:33,600 --> 00:21:39,000
tremendous success I'm just mentioning

00:21:35,430 --> 00:21:41,160
this to you as an audience because we're

00:21:39,000 --> 00:21:44,730
definitely i'm running this event on

00:21:41,160 --> 00:21:47,370
monday and we've got 20 new girls we're

00:21:44,730 --> 00:21:50,430
going to be introducing to code & 0 half

00:21:47,370 --> 00:21:54,120
know how to code after and if you are

00:21:50,430 --> 00:21:56,010
interested in running such an event we

00:21:54,120 --> 00:21:57,840
have a format and although its branch

00:21:56,010 --> 00:21:59,370
shiny new it's something that should

00:21:57,840 --> 00:22:00,810
probably be out there in the world and

00:21:59,370 --> 00:22:04,770
the other thing is has been a huge

00:22:00,810 --> 00:22:05,790
demand for it I'm this is the second one

00:22:04,770 --> 00:22:10,290
that's going to be running they

00:22:05,790 --> 00:22:13,430
currently have 50 50 cities have

00:22:10,290 --> 00:22:16,140
expressed interest in the last month and

00:22:13,430 --> 00:22:18,090
16 new events have already been

00:22:16,140 --> 00:22:21,210
organized since this has been invented

00:22:18,090 --> 00:22:24,990
so um this is probably going to be a

00:22:21,210 --> 00:22:29,070
thing um and I will ask for more tops

00:22:24,990 --> 00:22:31,410
more details tomorrow in the pike on

00:22:29,070 --> 00:22:33,600
lightning talks i'm seeking open source

00:22:31,410 --> 00:22:35,250
projects to invite our girls to you

00:22:33,600 --> 00:22:37,640
because i'm just on this crazy mission

00:22:35,250 --> 00:22:40,590
to get more girls in open source and

00:22:37,640 --> 00:22:41,880
this is a method of doing it so if you

00:22:40,590 --> 00:22:43,830
have an open source project that would

00:22:41,880 --> 00:22:46,260
be interested in taking on people more

00:22:43,830 --> 00:22:48,330
people please listen tomorrow my

00:22:46,260 --> 00:22:50,490
lightning talk or just make contact or

00:22:48,330 --> 00:22:53,310
contact somebody who might be able to

00:22:50,490 --> 00:22:55,980
contact me and then there's the more

00:22:53,310 --> 00:22:56,730
details as django girls or / australia

00:22:55,980 --> 00:23:05,919
and

00:22:56,730 --> 00:23:09,970
well he's putting on papers writer and

00:23:05,919 --> 00:23:13,509
last of all we've got Sam Bishop okay

00:23:09,970 --> 00:23:16,059
I've been building a new tool and that

00:23:13,509 --> 00:23:17,860
tool is a theology now for those who

00:23:16,059 --> 00:23:20,679
don't have any knowledge of zoology

00:23:17,860 --> 00:23:22,749
that's the study of snakes now I

00:23:20,679 --> 00:23:25,240
normally look after servers be it

00:23:22,749 --> 00:23:27,700
physical a virtual and that gets very

00:23:25,240 --> 00:23:31,149
boring but it means I spend a lot of

00:23:27,700 --> 00:23:33,190
time with Jenkins and Jenkins has some

00:23:31,149 --> 00:23:36,220
really really clever stuff in it like

00:23:33,190 --> 00:23:38,320
the check style sweet and the other

00:23:36,220 --> 00:23:41,529
static code analysis tools that can be

00:23:38,320 --> 00:23:44,139
used by people who use Java code and not

00:23:41,529 --> 00:23:47,679
really by anyone who isn't because as

00:23:44,139 --> 00:23:50,860
you can see Jenkins isn't very good with

00:23:47,679 --> 00:23:53,950
Python it's in fact pretty bad at

00:23:50,860 --> 00:23:55,990
dealing with Python statically when you

00:23:53,950 --> 00:23:58,330
see the actual plugins that do the

00:23:55,990 --> 00:24:02,139
static code analysis you'll notice

00:23:58,330 --> 00:24:05,259
there's not exactly a very good list one

00:24:02,139 --> 00:24:09,820
of those can do text files and the other

00:24:05,259 --> 00:24:13,149
is looking for the word to do now that's

00:24:09,820 --> 00:24:16,749
not exactly hard so the fact that the

00:24:13,149 --> 00:24:18,399
only two yeses in that table the fact

00:24:16,749 --> 00:24:21,340
that those plugins are so simple that

00:24:18,399 --> 00:24:24,580
they work with everything means that the

00:24:21,340 --> 00:24:27,460
sort of is just kind of sad and that sad

00:24:24,580 --> 00:24:30,340
sort of there is actually even worse the

00:24:27,460 --> 00:24:32,259
warnings module that one's actually a

00:24:30,340 --> 00:24:35,980
Swiss Army knife it's designed to look

00:24:32,259 --> 00:24:37,869
for anything via regex so it's not much

00:24:35,980 --> 00:24:40,690
better than those two yeses it's just

00:24:37,869 --> 00:24:43,899
got more development now it's also not

00:24:40,690 --> 00:24:45,940
very clever at all when you actually use

00:24:43,899 --> 00:24:49,269
the warnings plugin for Python what you

00:24:45,940 --> 00:24:52,509
get is a really low grained output

00:24:49,269 --> 00:24:54,999
whereas you run Pepe Torp island on a

00:24:52,509 --> 00:24:57,100
code project you get warning levels it

00:24:54,999 --> 00:25:00,220
says this is a refactor suggestion or

00:24:57,100 --> 00:25:02,559
this is just a style change when you run

00:25:00,220 --> 00:25:06,309
it through the warnings blood in you get

00:25:02,559 --> 00:25:08,169
one level it's broken so whereas it

00:25:06,309 --> 00:25:09,299
might say you have 200 problems in

00:25:08,169 --> 00:25:10,529
Pyland

00:25:09,299 --> 00:25:14,759
you'll get back three and a half

00:25:10,529 --> 00:25:17,460
thousand from Jenkins so I started

00:25:14,759 --> 00:25:21,419
trying to fix it and so I began building

00:25:17,460 --> 00:25:24,210
this it's a very clever wrapper it's

00:25:21,419 --> 00:25:26,340
actually wrapping a whole bunch of other

00:25:24,210 --> 00:25:28,679
tools to get out the exact outputs

00:25:26,340 --> 00:25:31,080
needed to fill each of the plugins in

00:25:28,679 --> 00:25:33,779
the Jenkins pipeline so it's doing the

00:25:31,080 --> 00:25:36,419
pep 257 manually since no one else seems

00:25:33,779 --> 00:25:39,379
to do it it's running radon instead of

00:25:36,419 --> 00:25:41,669
mackade because radon gives module level

00:25:39,379 --> 00:25:44,369
complexity output that can be used to

00:25:41,669 --> 00:25:46,769
build matching output for the complexity

00:25:44,369 --> 00:25:48,480
management tool which means that python

00:25:46,769 --> 00:25:51,169
is actually the only other language

00:25:48,480 --> 00:25:54,029
besides net to have native support for

00:25:51,169 --> 00:25:57,230
complexity graphs and forward tracking

00:25:54,029 --> 00:26:00,659
in jenkins with this plugin and

00:25:57,230 --> 00:26:02,909
prospector which actually gives json

00:26:00,659 --> 00:26:05,369
which is a fantastic help because it

00:26:02,909 --> 00:26:08,309
lets me do all of those in one pass and

00:26:05,369 --> 00:26:10,919
then clone bigger which can be given

00:26:08,309 --> 00:26:12,539
enough info to skip your migrations

00:26:10,919 --> 00:26:14,700
because if anyone's ever tried to look

00:26:12,539 --> 00:26:17,009
for duplicate code they'll have

00:26:14,700 --> 00:26:19,739
discovered that migrations are really

00:26:17,009 --> 00:26:21,149
bad just cut off below the bottom

00:26:19,739 --> 00:26:23,700
because I didn't know the resolution is

00:26:21,149 --> 00:26:25,320
my discovery that if you run clone

00:26:23,700 --> 00:26:28,710
digger on a moderate-sized Django

00:26:25,320 --> 00:26:32,940
project it takes 8.9 gigabytes of memory

00:26:28,710 --> 00:26:35,279
and doesn't finish for six days I got

00:26:32,940 --> 00:26:39,359
very curious and how bad this was and I

00:26:35,279 --> 00:26:41,429
let it run on ec2 it also runs the unit

00:26:39,359 --> 00:26:43,019
tests because there's no point taking

00:26:41,429 --> 00:26:45,570
care of all of this and not finishing

00:26:43,019 --> 00:26:47,489
the job and what it's doing is it's

00:26:45,570 --> 00:26:50,129
actually looking inside the project

00:26:47,489 --> 00:26:52,230
statically looking for Django imports

00:26:50,129 --> 00:26:54,330
and then performs an abstract syntax

00:26:52,230 --> 00:26:56,850
tree pass in order to discover what

00:26:54,330 --> 00:26:58,529
Django apps you're using and then uses

00:26:56,850 --> 00:27:01,080
that to be able to run the tests without

00:26:58,529 --> 00:27:03,480
breaking because sometimes you'll find

00:27:01,080 --> 00:27:05,850
your test suite won't work at all like

00:27:03,480 --> 00:27:08,220
if you build a site on mezzanine but

00:27:05,850 --> 00:27:10,499
never give it a site the test suite just

00:27:08,220 --> 00:27:13,679
fails it says you haven't got a site

00:27:10,499 --> 00:27:15,480
specified I can't start but if you're

00:27:13,679 --> 00:27:18,059
doing it this way you can test each one

00:27:15,480 --> 00:27:21,779
at a time and get the output and merge

00:27:18,059 --> 00:27:23,290
it but there are things not yet finished

00:27:21,779 --> 00:27:25,870
and that's where it starts

00:27:23,290 --> 00:27:28,120
so at the moment I'm parallelizing the

00:27:25,870 --> 00:27:29,830
test suite and adding the rest of the

00:27:28,120 --> 00:27:33,160
test runner functionality but the rest

00:27:29,830 --> 00:27:35,020
is started and already on pi PI and

00:27:33,160 --> 00:27:37,270
github if you want to look it up by name

00:27:35,020 --> 00:27:41,880
and begin having a look to see if you

00:27:37,270 --> 00:27:41,880
want that output in Jenkins so that's it

00:27:44,640 --> 00:27:47,740
all right that's the big thing you do

00:27:46,690 --> 00:27:49,920
all of our lightning speakers this

00:27:47,740 --> 00:27:49,920
afternoon

00:27:59,420 --> 00:28:01,480

YouTube URL: https://www.youtube.com/watch?v=MoQs_4DO-h4


