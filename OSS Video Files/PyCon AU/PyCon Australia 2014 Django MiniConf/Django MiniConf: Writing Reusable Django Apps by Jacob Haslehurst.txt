Title: Django MiniConf: Writing Reusable Django Apps by Jacob Haslehurst
Publication date: 2014-08-09
Playlist: PyCon Australia 2014 Django MiniConf
Description: 
	PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:03,550 --> 00:00:07,500
everyone welcome Jacob hazlehurst

00:00:09,990 --> 00:00:15,580
good afternoon everyone hope everyone

00:00:13,209 --> 00:00:18,520
had a good lunch today I'll be talking

00:00:15,580 --> 00:00:20,050
about writing reasonable django apps my

00:00:18,520 --> 00:00:22,300
name is Jacob as Russell's introduced me

00:00:20,050 --> 00:00:25,539
you can find me on Twitter at H said

00:00:22,300 --> 00:00:28,570
wire underscore I live in Melbourne how

00:00:25,539 --> 00:00:31,990
about 7 degrees at the moment and I work

00:00:28,570 --> 00:00:34,570
for a company called gizmag in my free

00:00:31,990 --> 00:00:36,370
time I enjoy taking photos I also

00:00:34,570 --> 00:00:37,660
enjoyed making music if you'd like to

00:00:36,370 --> 00:00:39,250
talk about either of those things as

00:00:37,660 --> 00:00:42,660
well as the content of this talk I'd be

00:00:39,250 --> 00:00:46,360
more than happy later over the weekend

00:00:42,660 --> 00:00:48,550
ok so summary this talk it's going to

00:00:46,360 --> 00:00:51,460
happen in three parts first we're going

00:00:48,550 --> 00:00:52,870
to look at what reusable apps are second

00:00:51,460 --> 00:00:56,350
we're going to walk through step by step

00:00:52,870 --> 00:00:58,660
and create a reusable app third we're

00:00:56,350 --> 00:01:00,910
going to look at how Django 1.7 has

00:00:58,660 --> 00:01:06,640
changed how we go about creating

00:01:00,910 --> 00:01:08,590
reusable apps ok first what are

00:01:06,640 --> 00:01:11,110
reasonable apps I think you can

00:01:08,590 --> 00:01:13,649
succinctly describes what apps as apps

00:01:11,110 --> 00:01:16,330
that can be used in any Django project

00:01:13,649 --> 00:01:19,240
typically i'd say a good reasonable app

00:01:16,330 --> 00:01:24,459
is an app that solves one problem or a

00:01:19,240 --> 00:01:27,009
very tightly scoped problem and so as a

00:01:24,459 --> 00:01:28,780
as a kind of average django developer

00:01:27,009 --> 00:01:31,929
why would you want to be creating a

00:01:28,780 --> 00:01:34,149
reasonable app first of all it allows

00:01:31,929 --> 00:01:36,429
you to reuse your code between your

00:01:34,149 --> 00:01:38,470
projects so if you find yourself solving

00:01:36,429 --> 00:01:39,729
the same problem in multiple projects

00:01:38,470 --> 00:01:41,819
you can pull that out put in a

00:01:39,729 --> 00:01:44,500
reasonable app and then is that in both

00:01:41,819 --> 00:01:46,660
on top of that it also allows you to

00:01:44,500 --> 00:01:48,160
share your work with others the odds are

00:01:46,660 --> 00:01:50,679
if you're trying to solve the same

00:01:48,160 --> 00:01:55,030
problem twice other people are probably

00:01:50,679 --> 00:01:56,830
going to benefit from that as well next

00:01:55,030 --> 00:01:59,830
it helps reduce the size and the

00:01:56,830 --> 00:02:01,690
complexity of your project which which

00:01:59,830 --> 00:02:03,420
helps with the maintainability of the

00:02:01,690 --> 00:02:06,940
project itself by pulling out

00:02:03,420 --> 00:02:10,270
complicated things into its separate own

00:02:06,940 --> 00:02:12,489
little app a side benefit of that is it

00:02:10,270 --> 00:02:15,129
means you can independently test that

00:02:12,489 --> 00:02:17,140
reasonable app and you can you can split

00:02:15,129 --> 00:02:19,590
apart that the tests and have them

00:02:17,140 --> 00:02:22,360
sitting coexisting

00:02:19,590 --> 00:02:24,879
okay so that's the basics let's have a

00:02:22,360 --> 00:02:27,519
look at a couple of good reusable apps

00:02:24,879 --> 00:02:29,560
to kind of get a feel for what we should

00:02:27,519 --> 00:02:33,879
strive for when we're writing reasonable

00:02:29,560 --> 00:02:36,280
apps first we have Django Taggart Django

00:02:33,879 --> 00:02:40,450
target is a generic tagging app by alex

00:02:36,280 --> 00:02:43,239
gainer it uses it's a very generic way

00:02:40,450 --> 00:02:46,239
of adding tags to various models and

00:02:43,239 --> 00:02:50,140
it's very easily can plug in and it's

00:02:46,239 --> 00:02:53,049
very adjustable so that you can get it

00:02:50,140 --> 00:02:55,900
to work how you need to work next we

00:02:53,049 --> 00:02:57,579
have Django image kit which is a generic

00:02:55,900 --> 00:03:00,579
way of resizing images once again

00:02:57,579 --> 00:03:03,459
solving a very core problem that a lot

00:03:00,579 --> 00:03:06,370
of people face and then third we have

00:03:03,459 --> 00:03:08,319
Python social off which solves the very

00:03:06,370 --> 00:03:11,110
common problem of needing to do social

00:03:08,319 --> 00:03:12,549
login for our websites one thing that's

00:03:11,110 --> 00:03:15,220
interesting about Python social loss is

00:03:12,549 --> 00:03:17,640
it's not just a django app it plugs into

00:03:15,220 --> 00:03:21,400
the variety of python web frameworks

00:03:17,640 --> 00:03:22,780
okay so so those three apps can seem

00:03:21,400 --> 00:03:24,940
quite abstract they can seem like

00:03:22,780 --> 00:03:26,739
someone else much better than me has

00:03:24,940 --> 00:03:28,480
written those apps but there's no way I

00:03:26,739 --> 00:03:29,829
could have written an app like that so

00:03:28,480 --> 00:03:32,889
I'll have a look at a couple of apps

00:03:29,829 --> 00:03:35,230
that we've written a gizmag to maybe set

00:03:32,889 --> 00:03:38,079
set the standard that anyone can really

00:03:35,230 --> 00:03:40,060
write nap first we've written a little

00:03:38,079 --> 00:03:43,989
app called Jango generic follow which

00:03:40,060 --> 00:03:46,989
just simply allows users in your your

00:03:43,989 --> 00:03:50,079
site to just follow anything we've

00:03:46,989 --> 00:03:52,060
needed to implement this so that when we

00:03:50,079 --> 00:03:54,549
have multiple writers and editors

00:03:52,060 --> 00:03:56,319
working on the same article together the

00:03:54,549 --> 00:03:58,410
law kind of follow that article and I'll

00:03:56,319 --> 00:04:01,329
get notifications about what's going on

00:03:58,410 --> 00:04:03,790
and then second we've written an app

00:04:01,329 --> 00:04:06,459
called remote fixtures which allows us

00:04:03,790 --> 00:04:08,739
to share our our fixtures between a

00:04:06,459 --> 00:04:11,920
development machines we often find when

00:04:08,739 --> 00:04:13,329
we're trying to to debug problems having

00:04:11,920 --> 00:04:19,510
the same fixture data on both computers

00:04:13,329 --> 00:04:20,859
really helps okay so that's the theory

00:04:19,510 --> 00:04:23,289
the underlying theory out of the way

00:04:20,859 --> 00:04:25,360
let's go through a bit of a worked

00:04:23,289 --> 00:04:28,599
example and write ourselves a ratings

00:04:25,360 --> 00:04:30,039
app it's got got one simple requirement

00:04:28,599 --> 00:04:32,500
and that's that users should be able to

00:04:30,039 --> 00:04:35,620
rate any instance of any model in

00:04:32,500 --> 00:04:37,750
reject up what down online ratings are

00:04:35,620 --> 00:04:41,620
quite polarizing so we'll call it Django

00:04:37,750 --> 00:04:45,160
polarize okay so let's look at the basic

00:04:41,620 --> 00:04:47,290
setup first use the github create

00:04:45,160 --> 00:04:49,390
repository page and we'll get that to

00:04:47,290 --> 00:04:51,070
initialize the repository for us and

00:04:49,390 --> 00:04:52,780
we'll get it to add in a Python get

00:04:51,070 --> 00:04:55,090
ignore with a bunch of useful get ignore

00:04:52,780 --> 00:04:57,460
things in there for us and we'll also

00:04:55,090 --> 00:04:59,770
get it to add an MIT license for us so

00:04:57,460 --> 00:05:02,710
that other people know that it's free

00:04:59,770 --> 00:05:04,210
and permissible to be used and then we

00:05:02,710 --> 00:05:07,540
when we submit that we we have our

00:05:04,210 --> 00:05:09,910
projector and we now clean it down onto

00:05:07,540 --> 00:05:11,350
our development machine when we start

00:05:09,910 --> 00:05:13,030
off we have two files we have our

00:05:11,350 --> 00:05:15,160
license and now read me that github is

00:05:13,030 --> 00:05:17,860
generated for us and now we're going to

00:05:15,160 --> 00:05:19,900
create a polarized app and then inside

00:05:17,860 --> 00:05:22,990
of it place it in a pile into models pie

00:05:19,900 --> 00:05:25,690
I find when i'm working on a reasonable

00:05:22,990 --> 00:05:27,100
app i like to symlink that app into the

00:05:25,690 --> 00:05:29,710
main project i'm working on at the time

00:05:27,100 --> 00:05:31,630
so in this case gizmag and that means i

00:05:29,710 --> 00:05:33,970
can work on on the gizmag project

00:05:31,630 --> 00:05:35,050
alongside this reusable app and I can

00:05:33,970 --> 00:05:37,780
make sure that they're integrating

00:05:35,050 --> 00:05:40,540
together properly then I just add in

00:05:37,780 --> 00:05:45,430
polarized into the install apps for

00:05:40,540 --> 00:05:47,200
gizmag okay let's have a look at the

00:05:45,430 --> 00:05:48,640
models and the migrations and the little

00:05:47,200 --> 00:05:52,390
tricks that will have to pull to get it

00:05:48,640 --> 00:05:55,330
to work in a reusable app first up so

00:05:52,390 --> 00:05:58,270
the simple model here for our rating

00:05:55,330 --> 00:06:00,550
there's two things of note first we're

00:05:58,270 --> 00:06:03,040
using a generic foreign key so it's a

00:06:00,550 --> 00:06:04,780
link to the target of the rating generic

00:06:03,040 --> 00:06:06,160
foreign keys are very useful for this

00:06:04,780 --> 00:06:08,470
sort of thing in a reasonable app where

00:06:06,160 --> 00:06:10,150
you're not quite sure how your app is

00:06:08,470 --> 00:06:12,970
going to be used in conjunction with

00:06:10,150 --> 00:06:15,970
other people's projects the second thing

00:06:12,970 --> 00:06:17,650
to note is when foreign key to the user

00:06:15,970 --> 00:06:20,320
model you have to make sure to use the

00:06:17,650 --> 00:06:21,820
auth user model setting if you try to

00:06:20,320 --> 00:06:25,870
hard coded it won't work if someone's

00:06:21,820 --> 00:06:27,400
using a custom user model now we're

00:06:25,870 --> 00:06:31,300
going to start off talking using south's

00:06:27,400 --> 00:06:33,520
migrations we're on skipper migration

00:06:31,300 --> 00:06:37,270
this is run from the gizmag project to

00:06:33,520 --> 00:06:39,580
generate our South migrations and out

00:06:37,270 --> 00:06:40,960
pops our migrations note it's in the

00:06:39,580 --> 00:06:44,979
South migrations because they're using

00:06:40,960 --> 00:06:46,090
South version 1 and where we've got this

00:06:44,979 --> 00:06:47,919
in place and

00:06:46,090 --> 00:06:50,770
now we're good to go to run our

00:06:47,919 --> 00:06:53,020
migrations I giant migrations file here

00:06:50,770 --> 00:06:54,760
and there's a few there's one little

00:06:53,020 --> 00:06:57,310
trick you have to pull here and thats

00:06:54,760 --> 00:06:59,889
everywhere that the foreign key is being

00:06:57,310 --> 00:07:03,280
foreign key to the user will have to

00:06:59,889 --> 00:07:05,550
manually go and switch that over to a

00:07:03,280 --> 00:07:11,530
user model string that we've dynamically

00:07:05,550 --> 00:07:13,479
generated okay so that's a migrations

00:07:11,530 --> 00:07:16,570
and our models a deloitte now let's talk

00:07:13,479 --> 00:07:19,210
about testing we have to create a few

00:07:16,570 --> 00:07:20,740
new files here first we have our model

00:07:19,210 --> 00:07:23,020
mix-ins file and that's going to contain

00:07:20,740 --> 00:07:25,000
the code that are about to test then we

00:07:23,020 --> 00:07:28,870
have another app called tests that sits

00:07:25,000 --> 00:07:30,669
adjacent to to our polarized up this

00:07:28,870 --> 00:07:33,460
contains things specific to tests that

00:07:30,669 --> 00:07:36,310
we don't want to be installed when we're

00:07:33,460 --> 00:07:38,110
working with our app finally up the top

00:07:36,310 --> 00:07:39,880
here we have our run tests and that's

00:07:38,110 --> 00:07:43,630
going to be the script that are kind of

00:07:39,880 --> 00:07:45,070
kicks off the test running process so

00:07:43,630 --> 00:07:46,419
then we have a simple model mix in here

00:07:45,070 --> 00:07:48,789
don't really have to bother reading this

00:07:46,419 --> 00:07:51,039
code but it just provides a method to

00:07:48,789 --> 00:07:54,520
get the the rating totals so the total

00:07:51,039 --> 00:07:57,820
ratings for a given rating target and

00:07:54,520 --> 00:08:01,450
then over in our test models are we've

00:07:57,820 --> 00:08:03,910
got our text a text snippet model here

00:08:01,450 --> 00:08:07,210
which is solely for the use of testing

00:08:03,910 --> 00:08:12,760
and we're applying that mix into that

00:08:07,210 --> 00:08:14,380
model then we have our test here it's

00:08:12,760 --> 00:08:15,880
not really worth reading this test once

00:08:14,380 --> 00:08:18,190
again but it's just a simple test that

00:08:15,880 --> 00:08:21,700
creates a few ratings and make sure that

00:08:18,190 --> 00:08:23,860
the numbers add up correctly so we've

00:08:21,700 --> 00:08:25,510
got our up here and we want to be able

00:08:23,860 --> 00:08:28,630
to run these tests when there's no

00:08:25,510 --> 00:08:32,830
project around so how do we do that we

00:08:28,630 --> 00:08:34,599
use our run tests higher file there's

00:08:32,830 --> 00:08:36,969
the two things that are interesting in

00:08:34,599 --> 00:08:38,979
this run tests file are the first is

00:08:36,969 --> 00:08:41,140
that we have to manually configure the

00:08:38,979 --> 00:08:42,909
settings here so we specify what data

00:08:41,140 --> 00:08:45,640
base back in we want to use and we

00:08:42,909 --> 00:08:48,160
specify what apps we won installed for

00:08:45,640 --> 00:08:50,430
running these tests and then next we are

00:08:48,160 --> 00:08:53,290
just use the execute from command line

00:08:50,430 --> 00:08:56,770
Jengo management function to kick off

00:08:53,290 --> 00:08:59,500
our test running and then when we when

00:08:56,770 --> 00:09:03,010
we run out run tests script it runs

00:08:59,500 --> 00:09:05,380
or work okay so we've got that working

00:09:03,010 --> 00:09:07,270
on our local computers but now we want

00:09:05,380 --> 00:09:10,060
to we want to be getting this working on

00:09:07,270 --> 00:09:12,070
continuous integration so that every

00:09:10,060 --> 00:09:14,070
time a push goes out and every time

00:09:12,070 --> 00:09:17,650
someone maybe submits a pull request and

00:09:14,070 --> 00:09:19,480
suggests changes for our app we want to

00:09:17,650 --> 00:09:24,190
know that it's working socially that we

00:09:19,480 --> 00:09:26,950
have to set up Travis CI first we create

00:09:24,190 --> 00:09:29,350
this Travis yml file and then inside of

00:09:26,950 --> 00:09:32,320
that we specify a bit of a build matrix

00:09:29,350 --> 00:09:34,360
of various versions of python and django

00:09:32,320 --> 00:09:36,490
that we want to support so we're saying

00:09:34,360 --> 00:09:40,450
here that we want to support pythons

00:09:36,490 --> 00:09:44,530
version 27 34 and Django's 15 16 and 17

00:09:40,450 --> 00:09:49,330
release candidate to then once we've got

00:09:44,530 --> 00:09:51,640
that in place we log into Travis turn on

00:09:49,330 --> 00:09:53,890
that repository that we we want to do

00:09:51,640 --> 00:09:57,610
with and it'll go and do our build for

00:09:53,890 --> 00:09:59,380
us what's really cool about Travis is

00:09:57,610 --> 00:10:02,440
the way it does the build matrix so we

00:09:59,380 --> 00:10:04,630
know that across various versions of

00:10:02,440 --> 00:10:06,540
Django and python that this app that

00:10:04,630 --> 00:10:08,800
we're writing is going to be working

00:10:06,540 --> 00:10:11,500
then when we click into it to one of

00:10:08,800 --> 00:10:14,440
these builds will see that the run tests

00:10:11,500 --> 00:10:18,070
output the same as we would if it was

00:10:14,440 --> 00:10:19,620
running on our local computers okay so

00:10:18,070 --> 00:10:22,240
we've got our testing in place

00:10:19,620 --> 00:10:23,890
everything is kind of good to go now we

00:10:22,240 --> 00:10:25,060
need to package this up and distribute

00:10:23,890 --> 00:10:28,690
it so that other people can go and

00:10:25,060 --> 00:10:31,440
install it to do this we create a set up

00:10:28,690 --> 00:10:35,260
a pipe in the root of our repository and

00:10:31,440 --> 00:10:37,720
then inside of that are we use the setup

00:10:35,260 --> 00:10:39,490
function from setuptools to define

00:10:37,720 --> 00:10:42,480
things like the name of the package the

00:10:39,490 --> 00:10:44,440
version number and then we also define

00:10:42,480 --> 00:10:47,260
what the packages are that we want

00:10:44,440 --> 00:10:49,090
installed so in this case where we're

00:10:47,260 --> 00:10:51,930
excluding tests because we don't want

00:10:49,090 --> 00:10:55,210
that installed when someone installs it

00:10:51,930 --> 00:10:57,550
then we're also defining what the

00:10:55,210 --> 00:10:59,980
requirements are to install this so for

00:10:57,550 --> 00:11:03,790
this we require Django verte version

00:10:59,980 --> 00:11:06,310
greater than 1.5 now once that's in

00:11:03,790 --> 00:11:09,730
place we run set up by register and that

00:11:06,310 --> 00:11:12,550
registers the name of this package

00:11:09,730 --> 00:11:13,420
against your pipe I account and then

00:11:12,550 --> 00:11:15,730
you're on set up by

00:11:13,420 --> 00:11:18,480
estes upload and that uploads the source

00:11:15,730 --> 00:11:21,340
distribution of the package to pai pai

00:11:18,480 --> 00:11:23,620
now from any computer you can run pip

00:11:21,340 --> 00:11:26,410
install django polarize and it'll go and

00:11:23,620 --> 00:11:28,690
install this package for us as well as

00:11:26,410 --> 00:11:30,430
that you get the nice pretty pi PI page

00:11:28,690 --> 00:11:34,510
which will show your stuff like download

00:11:30,430 --> 00:11:36,550
counts the final thing when when dealing

00:11:34,510 --> 00:11:39,250
with writing a package is you obviously

00:11:36,550 --> 00:11:40,590
need to document it there's a few kind

00:11:39,250 --> 00:11:44,710
of sections that I think are important

00:11:40,590 --> 00:11:47,200
first it's important to talk about

00:11:44,710 --> 00:11:50,290
compatibility so in this case we require

00:11:47,200 --> 00:11:52,750
Django greater than or equal to 1.5 and

00:11:50,290 --> 00:11:55,330
we're optionally require South greater

00:11:52,750 --> 00:11:59,020
than equal to 10 if you're using angry

00:11:55,330 --> 00:12:01,330
15 or 16 then you'll want installation

00:11:59,020 --> 00:12:02,560
instructions so here that we want to pip

00:12:01,330 --> 00:12:05,950
install it and then add it to our

00:12:02,560 --> 00:12:09,040
install apps then finally cert some

00:12:05,950 --> 00:12:12,310
usage instructions so a bit about how to

00:12:09,040 --> 00:12:15,070
go and create a rating and then how to

00:12:12,310 --> 00:12:17,290
use out get ratings total get ratings

00:12:15,070 --> 00:12:22,660
totals mixing to get those ratings

00:12:17,290 --> 00:12:24,340
totals okay so that's that's how

00:12:22,660 --> 00:12:26,950
everything kind of works for up to

00:12:24,340 --> 00:12:29,860
django 16 now let's have a bit of a look

00:12:26,950 --> 00:12:32,710
at how Django 17 has has changed it up a

00:12:29,860 --> 00:12:35,290
bit first there's a big a pre factor

00:12:32,710 --> 00:12:37,150
that's landed and that's it's completely

00:12:35,290 --> 00:12:42,190
under the hood change the way apps are

00:12:37,150 --> 00:12:43,900
loaded into the app registry to to work

00:12:42,190 --> 00:12:46,690
with this this new way apps work we

00:12:43,900 --> 00:12:49,540
create an app spot inside of our inside

00:12:46,690 --> 00:12:52,210
of our polarized up and then we define

00:12:49,540 --> 00:12:55,210
an app config in this case or we're

00:12:52,210 --> 00:12:58,870
defining is just the name and the boast

00:12:55,210 --> 00:13:02,230
name of our app where this really shines

00:12:58,870 --> 00:13:05,290
is when you need to hook up signals and

00:13:02,230 --> 00:13:06,900
to hook those up you'll put them inside

00:13:05,290 --> 00:13:09,520
the ready method of the app.config

00:13:06,900 --> 00:13:10,990
formally these will put in the models da

00:13:09,520 --> 00:13:13,000
pyar for the app but that wasn't really

00:13:10,990 --> 00:13:14,770
the right place and cause all these

00:13:13,000 --> 00:13:17,860
weird issues that the ready method is

00:13:14,770 --> 00:13:19,560
the right place for those to be put to

00:13:17,860 --> 00:13:22,390
hook that all up to django we then

00:13:19,560 --> 00:13:24,640
inside of our in it pyar for our app we

00:13:22,390 --> 00:13:26,950
just say that the fault app which just

00:13:24,640 --> 00:13:27,190
say that the default app config is the

00:13:26,950 --> 00:13:31,300
dot

00:13:27,190 --> 00:13:34,360
path to a config the other big change as

00:13:31,300 --> 00:13:37,390
we've heard earlier from andrew is the

00:13:34,360 --> 00:13:40,840
migrations framework to create these

00:13:37,390 --> 00:13:42,880
migrations we run python manage pie make

00:13:40,840 --> 00:13:45,340
migrations polarize and once again this

00:13:42,880 --> 00:13:47,230
is run from the gizmag project that

00:13:45,340 --> 00:13:49,060
we're dealing with earlier and obviously

00:13:47,230 --> 00:13:52,870
the gizmag project has to be running

00:13:49,060 --> 00:13:55,240
Django 17 when we run that it creates

00:13:52,870 --> 00:13:58,810
our migrations and it creates that

00:13:55,240 --> 00:14:03,700
migration for us and then we put our

00:13:58,810 --> 00:14:06,490
pretty new Drango 17 migration and the

00:14:03,700 --> 00:14:08,620
thing we had to do earlier with the the

00:14:06,490 --> 00:14:15,130
magic to get the user model working it's

00:14:08,620 --> 00:14:18,640
done for us now okay so so with all that

00:14:15,130 --> 00:14:20,200
said we can see that it's true that

00:14:18,640 --> 00:14:23,830
writing a reusable app does have

00:14:20,200 --> 00:14:25,260
non-trivial overhead the lines with the

00:14:23,830 --> 00:14:28,780
star next to them they're the ones

00:14:25,260 --> 00:14:31,570
directly related to our app and then the

00:14:28,780 --> 00:14:33,190
other ones are just extra stuff that we

00:14:31,570 --> 00:14:36,190
need to be able to write this app as a

00:14:33,190 --> 00:14:37,750
reasonable app so maybe maybe half is is

00:14:36,190 --> 00:14:39,850
directly related to our app and then the

00:14:37,750 --> 00:14:43,870
other half is extra work we have to do

00:14:39,850 --> 00:14:46,870
to get it working I think however that

00:14:43,870 --> 00:14:49,690
the benefits are often win out in the

00:14:46,870 --> 00:14:52,210
outweigh the extra work required in

00:14:49,690 --> 00:14:54,520
writing a reasonable app it helps reduce

00:14:52,210 --> 00:14:57,010
the size of your projects helps reduce

00:14:54,520 --> 00:14:59,770
the complexity of your projects and it

00:14:57,010 --> 00:15:02,290
helps you share your work between your

00:14:59,770 --> 00:15:05,280
own projects and with others thanks for

00:15:02,290 --> 00:15:05,280
listening any questions

00:15:17,240 --> 00:15:21,209
ok so again if anyone has any questions

00:15:19,110 --> 00:15:23,160
just make your way to the mic rolling

00:15:21,209 --> 00:15:24,209
anything started ok so you've shown lots

00:15:23,160 --> 00:15:26,009
of stuff here you work through and

00:15:24,209 --> 00:15:27,839
you've got this app template here is it

00:15:26,009 --> 00:15:29,459
genuinely that cookie cutter though I'm

00:15:27,839 --> 00:15:30,449
using that as a bit of a lead here that

00:15:29,459 --> 00:15:32,879
there are projects that will do the

00:15:30,449 --> 00:15:34,170
cookie cutting for you how much of that

00:15:32,879 --> 00:15:35,910
needs to vary from project to project

00:15:34,170 --> 00:15:38,939
and how much of it is opt in on some of

00:15:35,910 --> 00:15:40,589
those things um it really depends what

00:15:38,939 --> 00:15:42,240
what you're trying to solve like a lot

00:15:40,589 --> 00:15:45,180
of stuff here we were dealing with same

00:15:42,240 --> 00:15:48,959
models and getting models to work in

00:15:45,180 --> 00:15:51,029
reasonable apps so you have to do that

00:15:48,959 --> 00:15:53,759
you have to apply the same process but

00:15:51,029 --> 00:15:55,350
across all reasonable apps there's for

00:15:53,759 --> 00:15:57,420
each different sort of feature of Jango

00:15:55,350 --> 00:15:59,519
there are slight variations on how you

00:15:57,420 --> 00:16:03,170
would have to approach writing something

00:15:59,519 --> 00:16:05,279
if you're writing it as a reasonable app

00:16:03,170 --> 00:16:07,680
my question kind of leads on from that

00:16:05,279 --> 00:16:10,589
actually in it I've seen things like how

00:16:07,680 --> 00:16:13,740
to run tests or you know how to lay out

00:16:10,589 --> 00:16:15,899
a project or even you know whether to

00:16:13,740 --> 00:16:17,579
use rst or mark down for the removal you

00:16:15,899 --> 00:16:18,930
know different in different projects and

00:16:17,579 --> 00:16:20,610
I'm kind of wondering it is there a

00:16:18,930 --> 00:16:23,189
central place I can go to to find out

00:16:20,610 --> 00:16:26,370
this is the best way of writing a

00:16:23,189 --> 00:16:28,769
reusable app um terms of structure so

00:16:26,370 --> 00:16:30,930
the app template I've got on the slide

00:16:28,769 --> 00:16:32,730
there that's that's the kind of template

00:16:30,930 --> 00:16:34,949
that I've developed from from looking at

00:16:32,730 --> 00:16:36,930
various other projects and how they've

00:16:34,949 --> 00:16:39,870
been structured and that's that's the

00:16:36,930 --> 00:16:44,129
way that I I'll go to to start up

00:16:39,870 --> 00:16:45,990
writing my own reasonable apps there's

00:16:44,129 --> 00:16:48,689
obviously various other ways that people

00:16:45,990 --> 00:16:51,589
can construct their apps but this is the

00:16:48,689 --> 00:16:54,629
the way that I've sort of gathered is

00:16:51,589 --> 00:16:56,399
the best way to approach it and you

00:16:54,629 --> 00:16:58,110
mentioned a cookie cutter oh sorry yeah

00:16:56,399 --> 00:17:01,230
okay so I cookie cutter is a project

00:16:58,110 --> 00:17:04,020
that is run run by Audrey Roy Roy

00:17:01,230 --> 00:17:06,270
Greenfield now it's essentially you can

00:17:04,020 --> 00:17:09,209
build a repository that contains a

00:17:06,270 --> 00:17:10,949
template for our projects not just for a

00:17:09,209 --> 00:17:12,600
web page now so here is here is my

00:17:10,949 --> 00:17:14,189
template and it's my set up top I file

00:17:12,600 --> 00:17:16,470
am I Travis dog yeah Mel file and

00:17:14,189 --> 00:17:19,679
whatnot where the braces say and the

00:17:16,470 --> 00:17:21,230
name of my project is put it here and

00:17:19,679 --> 00:17:22,970
you run cookie cutter over that

00:17:21,230 --> 00:17:24,230
and you end up with a whole new project

00:17:22,970 --> 00:17:26,209
with directories and all the rest of it

00:17:24,230 --> 00:17:28,910
with the name substitute of where the

00:17:26,209 --> 00:17:31,400
names need to go so there are there are

00:17:28,910 --> 00:17:33,710
tools to do templating of entire

00:17:31,400 --> 00:17:35,809
projects not just templating of of a nap

00:17:33,710 --> 00:17:37,520
I would just follow on from that though

00:17:35,809 --> 00:17:39,260
if we've got people here who are

00:17:37,520 --> 00:17:40,760
interested about generic forms people

00:17:39,260 --> 00:17:42,470
who want to know what the best practices

00:17:40,760 --> 00:17:44,090
are that sounds like there may be great

00:17:42,470 --> 00:17:47,510
to put into a into the tutorial for

00:17:44,090 --> 00:17:49,130
Django itself there is a tutorial 6 I

00:17:47,510 --> 00:17:51,320
think which is about how to package up

00:17:49,130 --> 00:17:53,660
your code to reuse it but it's obviously

00:17:51,320 --> 00:17:54,980
very very early stage or is it doesn't

00:17:53,660 --> 00:17:58,070
go anywhere near as far as Yammer and

00:17:54,980 --> 00:17:59,450
things like that we have sprints we can

00:17:58,070 --> 00:18:01,340
contribute we can make things bigger and

00:17:59,450 --> 00:18:02,570
better so you know it doesn't make your

00:18:01,340 --> 00:18:03,559
incidence printing on come and see us

00:18:02,570 --> 00:18:10,460
during the spring so we can make that

00:18:03,559 --> 00:18:13,570
happen ok if there's no other questions

00:18:10,460 --> 00:18:13,570
thank you very much Jacob

00:18:22,759 --> 00:18:24,820

YouTube URL: https://www.youtube.com/watch?v=VvvKP_GaPmw


