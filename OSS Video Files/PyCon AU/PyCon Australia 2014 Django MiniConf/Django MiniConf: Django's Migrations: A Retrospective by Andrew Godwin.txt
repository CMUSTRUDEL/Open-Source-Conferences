Title: Django MiniConf: Django's Migrations: A Retrospective by Andrew Godwin
Publication date: 2014-08-17
Playlist: PyCon Australia 2014 Django MiniConf
Description: 
	PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:03,570 --> 00:00:07,920
it's talks about like the ideas behind

00:00:05,760 --> 00:00:09,120
it the general sort of code examples

00:00:07,920 --> 00:00:10,860
implantation this is more about the

00:00:09,120 --> 00:00:12,749
architecture and thinking and the

00:00:10,860 --> 00:00:15,839
iteration I went through to try and get

00:00:12,749 --> 00:00:17,850
nailed down this new design also worth

00:00:15,839 --> 00:00:20,220
mentioning I work for eventbrite we were

00:00:17,850 --> 00:00:22,349
very graciously sent me here we are of

00:00:20,220 --> 00:00:23,670
course hiring hello we have any obvious

00:00:22,349 --> 00:00:25,949
in Melbourne starting up too so if

00:00:23,670 --> 00:00:27,029
you're in Melbourne or consider moving

00:00:25,949 --> 00:00:28,410
there please come on talk to me you're

00:00:27,029 --> 00:00:31,380
Simon down here at some point we'd have

00:00:28,410 --> 00:00:33,210
you talked to you yes migrations they

00:00:31,380 --> 00:00:34,470
are pretty good this is my professional

00:00:33,210 --> 00:00:37,200
opinion after service seven years of

00:00:34,470 --> 00:00:39,870
doing them but the problem was of course

00:00:37,200 --> 00:00:42,449
the South was very much outliving its

00:00:39,870 --> 00:00:43,860
usefulness South is a seven year old

00:00:42,449 --> 00:00:46,980
design from when I was a much more

00:00:43,860 --> 00:00:48,809
junior developer it has some key design

00:00:46,980 --> 00:00:51,149
issues that I had to sort of overcome

00:00:48,809 --> 00:00:53,160
and work around and by the end of it

00:00:51,149 --> 00:00:54,750
like django had moved so far in those

00:00:53,160 --> 00:00:57,600
interviewed in seven years that the

00:00:54,750 --> 00:00:59,640
solution was always unworkable and so i

00:00:57,600 --> 00:01:01,379
had to basically sort of sit down and

00:00:59,640 --> 00:01:03,420
work out what would wander and wrong

00:01:01,379 --> 00:01:04,590
what needs to be fixed and how to go

00:01:03,420 --> 00:01:06,390
about that like what can I take from

00:01:04,590 --> 00:01:07,979
South what can I take the lessons learn

00:01:06,390 --> 00:01:11,009
the things that work for things that

00:01:07,979 --> 00:01:12,990
didn't move them across and so I can't

00:01:11,009 --> 00:01:14,960
with a sort of initial plan I said okay

00:01:12,990 --> 00:01:18,119
what we'll do and this is about sort of

00:01:14,960 --> 00:01:20,549
2011 I think circle 2011-2012 I have

00:01:18,119 --> 00:01:22,770
this plan will have Django and we'll

00:01:20,549 --> 00:01:24,630
take Django or give it so there's nice

00:01:22,770 --> 00:01:29,009
abstraction over schema changes so like

00:01:24,630 --> 00:01:33,030
me ORM abstract / changing data oh so we

00:01:29,009 --> 00:01:35,340
go I need to make sure what lesson very

00:01:33,030 --> 00:01:40,939
buddy never ever have your internet on

00:01:35,340 --> 00:01:44,780
during the presentation here we go oh

00:01:40,939 --> 00:01:47,820
right sorry about that as I was saying

00:01:44,780 --> 00:01:49,770
so I had a social plan with her Django

00:01:47,820 --> 00:01:52,920
abstracting of the schema changes likely

00:01:49,770 --> 00:01:54,840
to the RM and we would abstract so we

00:01:52,920 --> 00:01:56,430
sort of changed the IOM's have all the

00:01:54,840 --> 00:01:58,140
right hooks because like South has a

00:01:56,430 --> 00:01:59,909
module South hacks if you look at source

00:01:58,140 --> 00:02:02,189
code doc hacks is with all the horrible

00:01:59,909 --> 00:02:04,140
things like changing apps at runtime and

00:02:02,189 --> 00:02:05,729
stuff lives in South so like well well

00:02:04,140 --> 00:02:08,100
how else I've done properly in Django

00:02:05,729 --> 00:02:09,750
then we'll have a set of South to that

00:02:08,100 --> 00:02:11,370
has all the nice stuff and a better user

00:02:09,750 --> 00:02:12,930
interface and Bend migration formats and

00:02:11,370 --> 00:02:13,890
all this stuff and I thought I was

00:02:12,930 --> 00:02:16,170
thinking about this and talking with

00:02:13,890 --> 00:02:17,160
other cool developers and people just

00:02:16,170 --> 00:02:19,800
saying like

00:02:17,160 --> 00:02:21,510
why make this separate like while Django

00:02:19,800 --> 00:02:24,000
is on the general run to try and make or

00:02:21,510 --> 00:02:25,500
not too fat migrations are such a key

00:02:24,000 --> 00:02:28,020
thing everyone basically use this out

00:02:25,500 --> 00:02:29,280
they should probably be part of call and

00:02:28,020 --> 00:02:32,190
so we have this revised plan we said

00:02:29,280 --> 00:02:34,560
okay how about we just have this thing

00:02:32,190 --> 00:02:35,940
where Django has migrations built in so

00:02:34,560 --> 00:02:37,710
you know it's moving over that stuff in

00:02:35,940 --> 00:02:39,540
then we have a back port of the new

00:02:37,710 --> 00:02:42,570
migration format to the old version of

00:02:39,540 --> 00:02:43,650
Django South too so you can ship the new

00:02:42,570 --> 00:02:46,200
migration fight with your new

00:02:43,650 --> 00:02:48,630
applications and then if your users are

00:02:46,200 --> 00:02:51,390
still on 1.4 1.5 they can still use the

00:02:48,630 --> 00:02:54,180
format and this was the plan as of

00:02:51,390 --> 00:02:56,370
around oh let's say 3-4 months ago and

00:02:54,180 --> 00:02:59,430
then I tried writing South too it's

00:02:56,370 --> 00:03:01,440
almost impossible as you'll see some of

00:02:59,430 --> 00:03:03,960
the features in the new migrations are

00:03:01,440 --> 00:03:05,970
very reliant on new parts of Django that

00:03:03,960 --> 00:03:08,160
came 1.7 as well and there's so much

00:03:05,970 --> 00:03:11,340
extra work that the revised revised plan

00:03:08,160 --> 00:03:13,200
is there's nothing there so South has

00:03:11,340 --> 00:03:15,150
has received one final version upgrade

00:03:13,200 --> 00:03:18,690
which allows it to coexist with Django

00:03:15,150 --> 00:03:20,340
1.7 not in running inside it but it will

00:03:18,690 --> 00:03:22,290
now look for a separate name directory

00:03:20,340 --> 00:03:23,670
of migrations so you can ship two sets

00:03:22,290 --> 00:03:26,190
with an application it'll just work by

00:03:23,670 --> 00:03:27,270
default and this is the best sort of

00:03:26,190 --> 00:03:30,270
general thing that you come up with

00:03:27,270 --> 00:03:32,190
because otherwise it would just be it's

00:03:30,270 --> 00:03:35,700
too much work at that point already and

00:03:32,190 --> 00:03:37,830
so how this new stuff is laid out is

00:03:35,700 --> 00:03:39,090
very interesting so I try to keep that

00:03:37,830 --> 00:03:40,830
sort of initial separation look back

00:03:39,090 --> 00:03:42,900
here there's there's this separation of

00:03:40,830 --> 00:03:44,700
concerns like a scheme of stuff on one

00:03:42,900 --> 00:03:46,709
side and the actual implementation on

00:03:44,700 --> 00:03:49,200
the other side so I try to keep the same

00:03:46,709 --> 00:03:50,640
kind of thing so we have this part of

00:03:49,200 --> 00:03:52,320
Django that it's a schema changes the

00:03:50,640 --> 00:03:53,820
schema editor which is the abstraction I

00:03:52,320 --> 00:03:55,650
talked about earlier field

00:03:53,820 --> 00:03:57,270
deconstruction which is about making

00:03:55,650 --> 00:03:59,250
fields tell you how do you remake

00:03:57,270 --> 00:04:00,780
yourself so like if I have a field

00:03:59,250 --> 00:04:03,209
instance I can say deconstruct says

00:04:00,780 --> 00:04:05,400
hello I match are filled with maclin 255

00:04:03,209 --> 00:04:07,290
and you reconstruct me this way because

00:04:05,400 --> 00:04:10,020
fields on properly intersexual otherwise

00:04:07,290 --> 00:04:13,560
and also we have this new thing on

00:04:10,020 --> 00:04:15,750
models where you can assign models to

00:04:13,560 --> 00:04:18,450
individual versions or sort of apps

00:04:15,750 --> 00:04:20,040
registries so there's more this means

00:04:18,450 --> 00:04:22,109
you can have seven different versions of

00:04:20,040 --> 00:04:23,910
the model in Django at once so I can

00:04:22,109 --> 00:04:25,289
have all the historical versions sitting

00:04:23,910 --> 00:04:27,690
in it to each other and pick the right

00:04:25,289 --> 00:04:29,910
one based on my context i also have

00:04:27,690 --> 00:04:30,540
migration stuff migrations is course the

00:04:29,910 --> 00:04:33,510
more complex

00:04:30,540 --> 00:04:35,970
part of this operations here are the

00:04:33,510 --> 00:04:37,470
sort of abstracted concepts of like what

00:04:35,970 --> 00:04:39,630
do you do like things like create model

00:04:37,470 --> 00:04:41,790
or add fields or rename field and things

00:04:39,630 --> 00:04:44,010
like that they sort of a general sort of

00:04:41,790 --> 00:04:46,560
data container almost the loader in the

00:04:44,010 --> 00:04:48,360
graph are this sort of it the graph is

00:04:46,560 --> 00:04:49,560
literally a graph of dependencies and

00:04:48,360 --> 00:04:51,270
the loader is a thing that reads the

00:04:49,560 --> 00:04:52,500
file system it reads the database it

00:04:51,270 --> 00:04:54,390
works out what's going on it sort of

00:04:52,500 --> 00:04:56,790
swaps things in and out based on supple

00:04:54,390 --> 00:04:58,260
models and squashing all that stuff and

00:04:56,790 --> 00:05:00,690
gives gives the rest of the code base

00:04:58,260 --> 00:05:02,100
here we have these migrations these are

00:05:00,690 --> 00:05:03,360
the dependencies and then you can say I

00:05:02,100 --> 00:05:04,530
want to run this one it gives your

00:05:03,360 --> 00:05:06,180
dependency list of you should run all

00:05:04,530 --> 00:05:08,370
these in order in this exact order and

00:05:06,180 --> 00:05:10,560
then you can work a lot to do the

00:05:08,370 --> 00:05:13,350
executor work sample to do you give it a

00:05:10,560 --> 00:05:15,420
plan of migrations and it goes ok these

00:05:13,350 --> 00:05:16,470
migrations it tries it's sort of see

00:05:15,420 --> 00:05:17,990
that them and done and runs and they

00:05:16,470 --> 00:05:20,520
haven't been done all that kind of stuff

00:05:17,990 --> 00:05:21,840
I'll go through the actual way this

00:05:20,520 --> 00:05:24,600
works in a second as well as a sort of

00:05:21,840 --> 00:05:26,430
overview the author detector is are we

00:05:24,600 --> 00:05:28,200
the most complex part of the Django

00:05:26,430 --> 00:05:30,210
migrations are a look this is the thing

00:05:28,200 --> 00:05:31,980
that takes an existing migration of

00:05:30,210 --> 00:05:34,440
state your current project state and

00:05:31,980 --> 00:05:37,230
says how do you get from a to be like

00:05:34,440 --> 00:05:38,850
you know if we see no models here with

00:05:37,230 --> 00:05:41,010
full models here it's very obvious you

00:05:38,850 --> 00:05:42,600
add four models but if it looks like one

00:05:41,010 --> 00:05:44,460
model has been changed and you might

00:05:42,600 --> 00:05:45,780
read in the field and you've changed one

00:05:44,460 --> 00:05:47,040
of the ordering options and you know

00:05:45,780 --> 00:05:51,840
that I'm it has to go through and work

00:05:47,040 --> 00:05:58,200
all this stuff oh its problems long

00:05:51,840 --> 00:05:59,370
slides and after all this stuff and then

00:05:58,200 --> 00:06:00,720
has to sort of work out the right

00:05:59,370 --> 00:06:03,690
dependence the order because of course

00:06:00,720 --> 00:06:05,130
at some point you can make a foreign key

00:06:03,690 --> 00:06:06,510
before the model it lives on and all it

00:06:05,130 --> 00:06:08,310
points to have been created so you got

00:06:06,510 --> 00:06:10,500
all these different dependencies the

00:06:08,310 --> 00:06:12,270
optimizer takes a big list of migrations

00:06:10,500 --> 00:06:14,250
and shrink them down so it knows example

00:06:12,270 --> 00:06:15,660
but if you have create model than add

00:06:14,250 --> 00:06:17,490
field it can collapse that into one

00:06:15,660 --> 00:06:19,260
create model because there you know the

00:06:17,490 --> 00:06:20,550
same it knows you have great modern

00:06:19,260 --> 00:06:21,660
fleet model you can clutter to nothing

00:06:20,550 --> 00:06:24,270
and certain all these hidden

00:06:21,660 --> 00:06:26,360
optimizations and then finally state is

00:06:24,270 --> 00:06:28,470
this thing where you can do

00:06:26,360 --> 00:06:30,120
representations and work on the RM

00:06:28,470 --> 00:06:31,290
without actually having models around

00:06:30,120 --> 00:06:33,510
there's a way of doing very quick

00:06:31,290 --> 00:06:35,850
iteration and sort of doing changes that

00:06:33,510 --> 00:06:38,190
you'll see in a second but the way that

00:06:35,850 --> 00:06:39,840
certainly works and this is a slightly

00:06:38,190 --> 00:06:42,330
confusing flowchart but I'll go through

00:06:39,840 --> 00:06:43,490
it so when you run make migrations the

00:06:42,330 --> 00:06:46,310
first thing that happens is the other

00:06:43,490 --> 00:06:49,849
detector goes ah okay we've been we've

00:06:46,310 --> 00:06:51,319
been told to detect changes and so all

00:06:49,849 --> 00:06:52,669
the detector gets fed the current state

00:06:51,319 --> 00:06:55,130
of your project which is very easily

00:06:52,669 --> 00:06:56,750
taken from your model spot file and it

00:06:55,130 --> 00:06:58,610
gets fed that the latest migration state

00:06:56,750 --> 00:07:02,030
which is just pile of Django who say

00:06:58,610 --> 00:07:04,400
give me the statements happens and in

00:07:02,030 --> 00:07:06,169
fact this left-hand column here is also

00:07:04,400 --> 00:07:08,150
to goes okay I you decide a state it

00:07:06,169 --> 00:07:11,180
asked the loader can I have a state but

00:07:08,150 --> 00:07:12,620
only goes okay and then our state I have

00:07:11,180 --> 00:07:13,789
all these operations and can you apply

00:07:12,620 --> 00:07:15,530
them in memory and work out what the

00:07:13,789 --> 00:07:18,319
state the project is and so this happens

00:07:15,530 --> 00:07:20,240
that's great it has this thing the

00:07:18,319 --> 00:07:22,520
second part getting that project state

00:07:20,240 --> 00:07:25,039
or sat our state and says hello state

00:07:22,520 --> 00:07:27,229
can you give me a copy of yourself from

00:07:25,039 --> 00:07:29,060
the live models and so the state class

00:07:27,229 --> 00:07:30,860
goes and looks with live models and it

00:07:29,060 --> 00:07:32,630
deconstructs the fields those all the

00:07:30,860 --> 00:07:33,919
model options and it takes all those

00:07:32,630 --> 00:07:35,690
things and makes these sort of

00:07:33,919 --> 00:07:38,090
dictionaries and representations of what

00:07:35,690 --> 00:07:39,770
that means in memory and then with these

00:07:38,090 --> 00:07:42,680
two sets of things that are basically

00:07:39,770 --> 00:07:44,300
the same format that both in States fuel

00:07:42,680 --> 00:07:46,099
to detect soak and then take those two

00:07:44,300 --> 00:07:47,900
and diff them it has a whole load of

00:07:46,099 --> 00:07:49,490
rules like okay we're going to get the

00:07:47,900 --> 00:07:51,259
different sets of different model names

00:07:49,490 --> 00:07:52,729
and do like sep subtractions will get

00:07:51,259 --> 00:07:54,800
added models and then set intersection

00:07:52,729 --> 00:07:55,880
and then work out what's been change

00:07:54,800 --> 00:07:57,710
from that and there's a whole lot of

00:07:55,880 --> 00:07:59,570
rules in there but the idea is that it

00:07:57,710 --> 00:08:01,009
goes through crunches to all these

00:07:59,570 --> 00:08:03,469
differences and then at the end of it

00:08:01,009 --> 00:08:05,750
what it spits out it's a very long and

00:08:03,469 --> 00:08:08,630
the bose list of migrations operations

00:08:05,750 --> 00:08:10,310
in particularly it always always splits

00:08:08,630 --> 00:08:11,840
out foreign keys and create models it

00:08:10,310 --> 00:08:14,479
always splits out a few other things and

00:08:11,840 --> 00:08:16,819
then it's the optimizers job that for

00:08:14,479 --> 00:08:18,199
their to take this very robust list and

00:08:16,819 --> 00:08:20,690
try and class it down as far as possible

00:08:18,199 --> 00:08:22,190
so generally if you in Django if you add

00:08:20,690 --> 00:08:23,780
a couple of models you'll see it just

00:08:22,190 --> 00:08:25,580
has three operations called crate model

00:08:23,780 --> 00:08:27,380
internally is probably made nine or ten

00:08:25,580 --> 00:08:29,150
the optimizer has come through and

00:08:27,380 --> 00:08:30,949
shrunk them all down to nothing as part

00:08:29,150 --> 00:08:33,020
of all three as part of that process

00:08:30,949 --> 00:08:34,729
what this means is that we can have

00:08:33,020 --> 00:08:43,909
individual dependencies on those

00:08:34,729 --> 00:08:45,620
operations so sorry so as you sort of do

00:08:43,909 --> 00:08:47,270
those individual operations we can

00:08:45,620 --> 00:08:48,770
declare that okay making a foreign key

00:08:47,270 --> 00:08:50,480
depends on these two moles being created

00:08:48,770 --> 00:08:52,850
deleting them all depends on making them

00:08:50,480 --> 00:08:54,650
all have deleted first and like the code

00:08:52,850 --> 00:08:56,200
in there works out all the stuff and

00:08:54,650 --> 00:08:58,330
works out what to do and may

00:08:56,200 --> 00:08:59,920
sure that at the end of the day your

00:08:58,330 --> 00:09:02,680
dependencies and your overall migrations

00:08:59,920 --> 00:09:06,340
are being done correctly even more

00:09:02,680 --> 00:09:07,960
importantly even more importantly what

00:09:06,340 --> 00:09:10,000
it can do is it can make sure that you

00:09:07,960 --> 00:09:11,410
got no circular dependencies say I make

00:09:10,000 --> 00:09:13,900
two models that have fallen keys to each

00:09:11,410 --> 00:09:15,550
other and the old Django we can make

00:09:13,900 --> 00:09:16,930
them or that'd be amazing but if

00:09:15,550 --> 00:09:19,180
they're in two different applications in

00:09:16,930 --> 00:09:21,010
migrations we can't have them in my

00:09:19,180 --> 00:09:23,590
migration that's not possible and so

00:09:21,010 --> 00:09:26,200
this code can sit there and go well we

00:09:23,590 --> 00:09:27,850
have you know these these models aren't

00:09:26,200 --> 00:09:29,860
actually just treat models there Crick

00:09:27,850 --> 00:09:32,050
model and foreign key and we can take

00:09:29,860 --> 00:09:33,970
those to have one migration of correct

00:09:32,050 --> 00:09:35,530
model one no correct model and foreign

00:09:33,970 --> 00:09:37,390
key and then one of just foreign key and

00:09:35,530 --> 00:09:40,180
spit out that circular dependency into a

00:09:37,390 --> 00:09:41,650
nice linear one finally you take all

00:09:40,180 --> 00:09:42,790
these up optimized migrations and you

00:09:41,650 --> 00:09:45,250
write them out with the writer which is

00:09:42,790 --> 00:09:46,870
basically a formatting so his emotions

00:09:45,250 --> 00:09:49,180
make me some Python files and it comes

00:09:46,870 --> 00:09:51,880
out my great is it it'll be different

00:09:49,180 --> 00:09:54,190
obviously my great you go into the

00:09:51,880 --> 00:09:56,170
executor instead that goes through a

00:09:54,190 --> 00:09:57,760
voter in the graph and state and a few

00:09:56,170 --> 00:09:59,650
other things to find the models on this

00:09:57,760 --> 00:10:01,510
fund migrations on disk load them into

00:09:59,650 --> 00:10:03,220
memory work out what they mean and have

00:10:01,510 --> 00:10:06,250
sort of versions of the models in memory

00:10:03,220 --> 00:10:07,720
for all those things it then takes a

00:10:06,250 --> 00:10:09,760
decision operations it calls the

00:10:07,720 --> 00:10:11,500
operation says hello here is your own

00:10:09,760 --> 00:10:14,290
operation here it's a state I found a

00:10:11,500 --> 00:10:15,910
few run and the operation is then cools

00:10:14,290 --> 00:10:17,830
down to the schemer editor and says okay

00:10:15,910 --> 00:10:19,240
you need to run create model you need to

00:10:17,830 --> 00:10:21,910
run add field and does all the sort of

00:10:19,240 --> 00:10:23,440
individual low-level stuff for you in

00:10:21,910 --> 00:10:25,960
particular things like rename model

00:10:23,440 --> 00:10:27,670
don't just rename the muzzle in the tape

00:10:25,960 --> 00:10:29,110
database they also rename the foreign

00:10:27,670 --> 00:10:31,600
keys pointing to it so they've often

00:10:29,110 --> 00:10:32,800
more than one operation and finally when

00:10:31,600 --> 00:10:34,390
it's been done successfully it's the

00:10:32,800 --> 00:10:35,230
recorder this thing that sort of marks

00:10:34,390 --> 00:10:38,470
whether things have been done in the

00:10:35,230 --> 00:10:39,940
database just says yet we've done it

00:10:38,470 --> 00:10:41,440
marks it in there and then next time

00:10:39,940 --> 00:10:43,510
round we can say we've done this one we

00:10:41,440 --> 00:10:44,980
can not do it again so that's how

00:10:43,510 --> 00:10:46,720
migrations keep track of what's been

00:10:44,980 --> 00:10:50,590
apply there's this big table called

00:10:46,720 --> 00:10:52,270
migration at Daniel migrations but the

00:10:50,590 --> 00:10:54,970
upshot of all this is that this is a

00:10:52,270 --> 00:10:56,740
very different design to Seth South was

00:10:54,970 --> 00:10:58,360
very much simpler than this in

00:10:56,740 --> 00:11:00,160
particular it's also detected was very

00:10:58,360 --> 00:11:02,170
very poor and could not support it

00:11:00,160 --> 00:11:05,890
nowhere near as many things as this one

00:11:02,170 --> 00:11:07,300
does and so people often say oh Andrews

00:11:05,890 --> 00:11:10,269
move south and Django

00:11:07,300 --> 00:11:11,410
is kind of true we have added migrations

00:11:10,269 --> 00:11:14,019
of Django they are very different to

00:11:11,410 --> 00:11:16,240
south as a user to you externally

00:11:14,019 --> 00:11:18,700
they'll look mostly similar and in

00:11:16,240 --> 00:11:20,709
particular you'll have the same migrate

00:11:18,700 --> 00:11:22,690
command but things like making

00:11:20,709 --> 00:11:24,490
migrations is now called make migrations

00:11:22,690 --> 00:11:26,769
rather than something like skewer

00:11:24,490 --> 00:11:28,060
migration as was with all and things are

00:11:26,769 --> 00:11:29,950
made all at once and dependencies are

00:11:28,060 --> 00:11:33,190
done for you and many other niceties

00:11:29,950 --> 00:11:34,870
have appeared over the time one of the

00:11:33,190 --> 00:11:37,240
biggest wins i think is the new format

00:11:34,870 --> 00:11:40,000
so one of my one of my main goals going

00:11:37,240 --> 00:11:43,149
into designing Django migrations was

00:11:40,000 --> 00:11:45,399
getting rid of this any of you use south

00:11:43,149 --> 00:11:47,950
recognizes as a South migration so for

00:11:45,399 --> 00:11:49,899
reference this top tiny section here is

00:11:47,950 --> 00:11:52,990
that five lines this is the actual

00:11:49,899 --> 00:11:57,100
logical migration down here is how South

00:11:52,990 --> 00:11:59,440
used to store all of its state so it has

00:11:57,100 --> 00:12:01,660
every single model in your app and

00:11:59,440 --> 00:12:03,670
appendices all see realized out these

00:12:01,660 --> 00:12:05,350
big dictionaries and if there's one

00:12:03,670 --> 00:12:06,700
mistake or you've merged branches and

00:12:05,350 --> 00:12:08,620
stuff this doesn't match and everything

00:12:06,700 --> 00:12:10,660
blows up so this is obviously not

00:12:08,620 --> 00:12:12,880
acceptable and so one of my big things

00:12:10,660 --> 00:12:14,529
was how do we get rid of that and so the

00:12:12,880 --> 00:12:16,720
new version looks like this and as you

00:12:14,529 --> 00:12:18,310
can see the operations I mentioned

00:12:16,720 --> 00:12:21,130
earlier there is one operation it's

00:12:18,310 --> 00:12:23,589
declarative is very simple and the way

00:12:21,130 --> 00:12:25,839
we work out state is that we simply run

00:12:23,589 --> 00:12:28,420
through all of the operations in memory

00:12:25,839 --> 00:12:31,029
on these state objects so when I blowed

00:12:28,420 --> 00:12:32,380
my migrations I load save the 10 files I

00:12:31,029 --> 00:12:35,500
load the 2004 oceans inside them

00:12:32,380 --> 00:12:37,360
combined I take an empty empty state and

00:12:35,500 --> 00:12:39,459
say just run them in memory because

00:12:37,360 --> 00:12:41,440
every operation has a run in memory and

00:12:39,459 --> 00:12:42,940
a run on database version and so we run

00:12:41,440 --> 00:12:45,279
through all of the memory we get a

00:12:42,940 --> 00:12:47,410
result when we go okay that's what it

00:12:45,279 --> 00:12:49,870
looks like and so we can set example the

00:12:47,410 --> 00:12:51,790
ad field operation the state version

00:12:49,870 --> 00:12:53,320
takes a state add the field to the

00:12:51,790 --> 00:12:55,839
sector fields dictionary and returns it

00:12:53,320 --> 00:12:57,699
but the database version actually makes

00:12:55,839 --> 00:12:59,410
them one in the scheme editor and this

00:12:57,699 --> 00:13:01,060
way we can end up with that nice

00:12:59,410 --> 00:13:02,980
comparable state we can do detection

00:13:01,060 --> 00:13:04,120
against without having that giant state

00:13:02,980 --> 00:13:07,089
of the bottom of the file it's a much

00:13:04,120 --> 00:13:09,610
easier simpler way of doing this it's

00:13:07,089 --> 00:13:11,649
also used to feed the scheme editor so

00:13:09,610 --> 00:13:13,390
things like sequel light they don't

00:13:11,649 --> 00:13:15,339
actually have things like alter table

00:13:13,390 --> 00:13:18,399
it's a massive hack that you should be

00:13:15,339 --> 00:13:19,959
very happy we provide in skating sequel

00:13:18,399 --> 00:13:20,720
light you can do two things add columns

00:13:19,959 --> 00:13:23,149
and drop table

00:13:20,720 --> 00:13:24,529
everything else is not there which is

00:13:23,149 --> 00:13:26,120
fair it's not going to be doing that

00:13:24,529 --> 00:13:28,370
kind of stuff but so for example if

00:13:26,120 --> 00:13:30,379
we're trying to pull to a column we

00:13:28,370 --> 00:13:32,149
actually make a whole new table and then

00:13:30,379 --> 00:13:33,800
call the data across the old table

00:13:32,149 --> 00:13:35,689
rename it back to the old name again and

00:13:33,800 --> 00:13:37,250
so for that stuff we need the state

00:13:35,689 --> 00:13:39,050
around so we can make the table from it

00:13:37,250 --> 00:13:40,730
and so that's fact we used to be feed

00:13:39,050 --> 00:13:42,649
state into every operation staying in

00:13:40,730 --> 00:13:43,910
case you need it he's copy of the models

00:13:42,649 --> 00:13:48,199
that they should look so you can sort of

00:13:43,910 --> 00:13:50,029
work from that but this is all well

00:13:48,199 --> 00:13:52,160
Amanda for mrs. the final design ended

00:13:50,029 --> 00:13:54,860
up with over many many months and

00:13:52,160 --> 00:13:56,420
unfortunately I was hoping that by the

00:13:54,860 --> 00:13:59,389
time I got here 1.7 will be released

00:13:56,420 --> 00:14:00,410
alas not quite we're on the second

00:13:59,389 --> 00:14:02,360
release candidate we're getting pretty

00:14:00,410 --> 00:14:05,269
close now but there are a lot of

00:14:02,360 --> 00:14:06,500
complexities with migrations that keep

00:14:05,269 --> 00:14:08,420
popping up in the race dockers list but

00:14:06,500 --> 00:14:09,620
we're very close but of those things

00:14:08,420 --> 00:14:11,120
that popped up over the last three or

00:14:09,620 --> 00:14:12,649
four months one of the major problems

00:14:11,120 --> 00:14:14,750
that went wrong like one of the things

00:14:12,649 --> 00:14:16,670
that I never planned for in my initial

00:14:14,750 --> 00:14:20,089
design of this like say up about a year

00:14:16,670 --> 00:14:22,879
ago the main one is wobble models I hate

00:14:20,089 --> 00:14:27,620
these things I'm not blaming anyone in

00:14:22,879 --> 00:14:29,329
particular but they are a right pain and

00:14:27,620 --> 00:14:32,389
to explain why the right pane here is a

00:14:29,329 --> 00:14:34,610
chart so supple models for those I don't

00:14:32,389 --> 00:14:35,839
know our way of in particular in Django

00:14:34,610 --> 00:14:37,850
Bernie supported one is swapping out the

00:14:35,839 --> 00:14:40,069
author user model for your own custom

00:14:37,850 --> 00:14:41,750
one this sounds amazing all the user is

00:14:40,069 --> 00:14:43,610
old and crusty and who wants it really

00:14:41,750 --> 00:14:47,269
it requires things like a single a

00:14:43,610 --> 00:14:50,000
single name field and so what you do is

00:14:47,269 --> 00:14:51,790
you just said a setting and then as soon

00:14:50,000 --> 00:14:54,230
you're setting setting it repair it's a

00:14:51,790 --> 00:14:56,000
problem here is say I had some

00:14:54,230 --> 00:14:59,300
dependencies like this so my app here

00:14:56,000 --> 00:15:01,009
depends on or fuser model that's great

00:14:59,300 --> 00:15:02,990
it depends on off that's fantastic I

00:15:01,009 --> 00:15:05,480
change the setting the very next thing I

00:15:02,990 --> 00:15:07,430
want any command is matted Erie parented

00:15:05,480 --> 00:15:09,410
it's completely different and then

00:15:07,430 --> 00:15:11,180
things just get crazy and then no one

00:15:09,410 --> 00:15:12,410
knows what happening but there's a

00:15:11,180 --> 00:15:14,809
rubber duck on the tab bridge and

00:15:12,410 --> 00:15:18,019
everything's blown up the problem is you

00:15:14,809 --> 00:15:19,850
can't tell at runtime what's going to be

00:15:18,019 --> 00:15:21,980
parrot what's can be depending on what

00:15:19,850 --> 00:15:23,870
like it's this magical setting changes

00:15:21,980 --> 00:15:25,370
everything and particular if you change

00:15:23,870 --> 00:15:26,930
it when you've applied migrations we

00:15:25,370 --> 00:15:28,819
can't tell what's happened there's no

00:15:26,930 --> 00:15:30,230
comparative real estate we can't say

00:15:28,819 --> 00:15:32,059
you've changed it let's change of the

00:15:30,230 --> 00:15:34,459
foreign keys nothing happens and so all

00:15:32,059 --> 00:15:34,670
the bugs here are like I change this and

00:15:34,459 --> 00:15:36,680
it

00:15:34,670 --> 00:15:39,170
up and whatever and also the foreign

00:15:36,680 --> 00:15:41,330
keys and I proper and in the end we've

00:15:39,170 --> 00:15:43,610
we've solved it there is one caveat you

00:15:41,330 --> 00:15:46,040
cannot change orth user model during

00:15:43,610 --> 00:15:48,710
migrations you couldn't anyway before in

00:15:46,040 --> 00:15:50,570
Django but changing all these and model

00:15:48,710 --> 00:15:53,300
requires you stills and manually repoint

00:15:50,570 --> 00:15:54,380
every photon key because it's really not

00:15:53,300 --> 00:15:55,610
feasible to the other thing I'm sorry

00:15:54,380 --> 00:15:56,990
about that but it's just the way I asked

00:15:55,610 --> 00:16:00,020
happen if you want to release in this

00:15:56,990 --> 00:16:02,930
century I'm migrated out another one

00:16:00,020 --> 00:16:05,300
this is fun so what this this cropped

00:16:02,930 --> 00:16:08,240
I've only two months ago actually what

00:16:05,300 --> 00:16:10,490
happens is people have acts of

00:16:08,240 --> 00:16:11,810
migrations an accident migrations we

00:16:10,490 --> 00:16:13,040
support this there's there's two

00:16:11,810 --> 00:16:14,900
different choices in general up at seven

00:16:13,040 --> 00:16:16,610
if you've not got migrations it runs the

00:16:14,900 --> 00:16:18,080
old sink DB code behind the scenes which

00:16:16,610 --> 00:16:21,380
will go away in threes of time but it's

00:16:18,080 --> 00:16:24,230
still there and people had foreign keys

00:16:21,380 --> 00:16:25,730
from a which is migrated to be which is

00:16:24,230 --> 00:16:28,550
a migrated to see which is migrated

00:16:25,730 --> 00:16:31,250
that's fine but it's not really because

00:16:28,550 --> 00:16:32,840
b exists outside of dependencies there's

00:16:31,250 --> 00:16:35,390
no way of telling B is a black box to

00:16:32,840 --> 00:16:37,070
migrations as far as it knows be like

00:16:35,390 --> 00:16:39,230
all it can do is ensure that B's sink

00:16:37,070 --> 00:16:41,060
DP'd before migrations of run so in

00:16:39,230 --> 00:16:44,330
particular if be depends on migration

00:16:41,060 --> 00:16:45,890
app will be gets run first be can't make

00:16:44,330 --> 00:16:47,630
foreign keys tables that exist yet and

00:16:45,890 --> 00:16:51,110
so you have this horrible thing where

00:16:47,630 --> 00:16:53,270
you can't actually depend on migrated

00:16:51,110 --> 00:16:55,550
apps from migrated apps and this was

00:16:53,270 --> 00:16:58,760
fine until we put migrations into all of

00:16:55,550 --> 00:17:00,110
jagged contrib so jangan hundred off and

00:16:58,760 --> 00:17:01,420
comments and sessions of other things

00:17:00,110 --> 00:17:04,460
are now all have migrations

00:17:01,420 --> 00:17:05,840
unfortunately the fixed of this was

00:17:04,460 --> 00:17:07,910
terrible you to flip migrations in their

00:17:05,840 --> 00:17:11,060
apps sorry about that but that's how

00:17:07,910 --> 00:17:12,710
happen not having migrations is

00:17:11,060 --> 00:17:14,810
deprecated anyway it's on a 33 Willy

00:17:12,710 --> 00:17:17,440
cycle but this is one thing to look out

00:17:14,810 --> 00:17:21,200
for that we couldn't fix quite in time

00:17:17,440 --> 00:17:23,270
test persistence now this is fun this

00:17:21,200 --> 00:17:27,260
wouldn't be a problem except for my

00:17:23,270 --> 00:17:30,520
sequel so when you run tests Django

00:17:27,260 --> 00:17:33,320
promises you that the data that you had

00:17:30,520 --> 00:17:35,150
after Davis creation so initial data in

00:17:33,320 --> 00:17:37,520
the old version and data migrations in

00:17:35,150 --> 00:17:39,560
migrations will be the same for every

00:17:37,520 --> 00:17:40,610
test on post grades and other times will

00:17:39,560 --> 00:17:41,720
databases this is great to do

00:17:40,610 --> 00:17:43,610
transactions we roll out the

00:17:41,720 --> 00:17:45,940
transactions all is good we start again

00:17:43,610 --> 00:17:48,580
fantastic on my I Sam

00:17:45,940 --> 00:17:51,159
there's no interactions because he wants

00:17:48,580 --> 00:17:53,440
those that they slow and boring and so

00:17:51,159 --> 00:17:56,860
what we used to do in Django is we used

00:17:53,440 --> 00:17:58,539
to take your database flush drop all the

00:17:56,860 --> 00:18:00,309
tables make them all again and rerun

00:17:58,539 --> 00:18:02,950
initial data sounds fun sounds fantastic

00:18:00,309 --> 00:18:04,750
right it's not that bad it's a little

00:18:02,950 --> 00:18:06,970
bit slow but like a dropping crate and

00:18:04,750 --> 00:18:10,059
reload is not too bad but with

00:18:06,970 --> 00:18:11,740
migrations you can't just reload data

00:18:10,059 --> 00:18:13,059
you have to go through the entire

00:18:11,740 --> 00:18:15,490
migration sack again there's no way of

00:18:13,059 --> 00:18:16,960
doing just individual parts of it and so

00:18:15,490 --> 00:18:19,779
with the hat we have of this is that

00:18:16,960 --> 00:18:22,840
when you run tests we actually run on

00:18:19,779 --> 00:18:25,029
migrations serialize the results into an

00:18:22,840 --> 00:18:27,159
in-memory fixture and then if you've got

00:18:25,029 --> 00:18:29,019
my sequel or you are in transaction test

00:18:27,159 --> 00:18:30,909
cases we just reload that fixture we

00:18:29,019 --> 00:18:32,409
have a memory every time if you're not

00:18:30,909 --> 00:18:33,850
running transaction test cases on my

00:18:32,409 --> 00:18:35,740
sequel you'll never see this code about

00:18:33,850 --> 00:18:36,850
impact you for this is the thing we have

00:18:35,740 --> 00:18:39,279
to support people who are trying to do

00:18:36,850 --> 00:18:41,769
that stuff they're also these

00:18:39,279 --> 00:18:42,970
wonderfully random meta options I had

00:18:41,769 --> 00:18:44,470
forgotten half of these resistors which

00:18:42,970 --> 00:18:46,809
is a big problem when people try to use

00:18:44,470 --> 00:18:48,220
the migrations in particular order with

00:18:46,809 --> 00:18:50,350
respect to as I plate we have that I had

00:18:48,220 --> 00:18:52,120
seen that flight for six years but all

00:18:50,350 --> 00:18:53,710
these random options in the mess of

00:18:52,120 --> 00:18:56,440
class of models change database table

00:18:53,710 --> 00:18:57,759
like this adds a field most people here

00:18:56,440 --> 00:18:59,440
probably probably never used it but as a

00:18:57,759 --> 00:19:01,360
field cool uncle order and tell singles

00:18:59,440 --> 00:19:03,129
matically and so there to go through and

00:19:01,360 --> 00:19:05,259
work out knee operations all this stuff

00:19:03,129 --> 00:19:07,330
like if you change different things how

00:19:05,259 --> 00:19:08,679
does it affect stuff if you change in

00:19:07,330 --> 00:19:10,419
its together for example which may give

00:19:08,679 --> 00:19:12,370
indexes and all this kind of working

00:19:10,419 --> 00:19:13,570
through the long tail of heaters in

00:19:12,370 --> 00:19:17,940
Django bigness stuff working and

00:19:13,570 --> 00:19:20,610
polished off proxy models also not great

00:19:17,940 --> 00:19:23,409
because they look like normal models

00:19:20,610 --> 00:19:24,669
that I have database I thought right

00:19:23,409 --> 00:19:26,289
property models will just ignore them

00:19:24,669 --> 00:19:27,940
for migrations all's well all's good in

00:19:26,289 --> 00:19:29,769
the world except of course people want

00:19:27,940 --> 00:19:31,570
to use them data migrations and they

00:19:29,769 --> 00:19:33,549
actually put you talk the code and and

00:19:31,570 --> 00:19:35,740
things and so it a whole new set of my

00:19:33,549 --> 00:19:37,990
great things for making proxy models and

00:19:35,740 --> 00:19:39,549
not doing like you had to work out this

00:19:37,990 --> 00:19:41,139
epoxy model and say well we shouldn't do

00:19:39,549 --> 00:19:42,909
this on it and ignore it and there's

00:19:41,139 --> 00:19:44,320
whole always if so like if it's a proxy

00:19:42,909 --> 00:19:46,870
don't do anything otherwise do all the

00:19:44,320 --> 00:19:50,019
things so that was a long involved

00:19:46,870 --> 00:19:51,159
process but we close Django admin seven

00:19:50,019 --> 00:19:52,870
is getting very very close to done

00:19:51,159 --> 00:19:54,809
there's one blocker left at least there

00:19:52,870 --> 00:19:58,389
was last night a bit not more this point

00:19:54,809 --> 00:19:59,900
and we are to rc's in we looking very

00:19:58,389 --> 00:20:02,270
stable the polish is very far

00:19:59,900 --> 00:20:03,770
like we could have just released it but

00:20:02,270 --> 00:20:07,010
Django has a commitment to quality and

00:20:03,770 --> 00:20:08,450
quality control and so it's important to

00:20:07,010 --> 00:20:09,860
me and 6th and the rest of the core team

00:20:08,450 --> 00:20:13,460
that we have a good quality release so

00:20:09,860 --> 00:20:15,110
hopefully jake 1p7 coming to server near

00:20:13,460 --> 00:20:17,030
you very soon look out for announcements

00:20:15,110 --> 00:20:18,950
and please test the rc's we bother

00:20:17,030 --> 00:20:20,330
release with no bugs than Reese with a

00:20:18,950 --> 00:20:23,950
bug and even if it delays it a little

00:20:20,330 --> 00:20:23,950
bit yeah thank you very much

00:20:33,420 --> 00:20:35,480

YouTube URL: https://www.youtube.com/watch?v=MzZidRJShYQ


