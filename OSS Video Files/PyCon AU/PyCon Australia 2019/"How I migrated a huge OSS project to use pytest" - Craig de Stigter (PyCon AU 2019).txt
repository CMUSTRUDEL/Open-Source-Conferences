Title: "How I migrated a huge OSS project to use pytest" - Craig de Stigter (PyCon AU 2019)
Publication date: 2019-08-03
Playlist: PyCon Australia 2019
Description: 
	Craig de Stigter

Over a couple of months in 2018 I developed a script for refactoring GDAL's ancient and arcane test suite to use Pytest. The final pull request was over 118,000 lines. This talk covers how I did it and what I learned.

https://2019.pycon-au.org/talks/how-i-migrated-a-huge-oss-project-to-use-pytest

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 2 - 6 2019.

Video licence: CC BY-NC-SA 4.0 - https://creativecommons.org/licenses/by-nc-sa/4.0/

Python, PyCon, PyConAU

Sat Aug  3 14:50:00 2019 at C3.3
Captions: 
	00:00:03,170 --> 00:00:13,110
alright ladies and gentlemen now we've

00:00:06,600 --> 00:00:15,630
got Chris sorry Craig talking about how

00:00:13,110 --> 00:00:25,410
to I also reflected a huge open source

00:00:15,630 --> 00:00:26,279
software project to use PI test thank

00:00:25,410 --> 00:00:29,670
you

00:00:26,279 --> 00:00:31,500
hi my name is Craig distinct err it's

00:00:29,670 --> 00:00:34,399
good to be here this is my second pack

00:00:31,500 --> 00:00:36,690
on a you and my first presenting and

00:00:34,399 --> 00:00:39,210
this is about a journey that I went on

00:00:36,690 --> 00:00:43,230
last year through the dips of automated

00:00:39,210 --> 00:00:45,300
refactoring in Python I've been working

00:00:43,230 --> 00:00:48,690
at a company called coordinates for the

00:00:45,300 --> 00:00:50,879
last 11 years which is a while now and

00:00:48,690 --> 00:00:52,530
I'm still there because it's basically

00:00:50,879 --> 00:00:54,870
my dream job because I get to play

00:00:52,530 --> 00:00:57,120
around with Python all day every day and

00:00:54,870 --> 00:00:59,780
also it's something to do with GIS data

00:00:57,120 --> 00:00:59,780
and that's cool too

00:01:00,210 --> 00:01:05,119
in that 11 years I've played around with

00:01:02,070 --> 00:01:08,130
tools like 2:00 to 3:00 and future rise

00:01:05,119 --> 00:01:12,240
some of you might have used and black

00:01:08,130 --> 00:01:13,590
more recently who's used black here cool

00:01:12,240 --> 00:01:17,909
that's good if you haven't you should

00:01:13,590 --> 00:01:22,290
it's really good and they the thing that

00:01:17,909 --> 00:01:23,640
black does is it reformats your code and

00:01:22,290 --> 00:01:25,110
it does so without asking you many

00:01:23,640 --> 00:01:29,600
questions and in fact it's very

00:01:25,110 --> 00:01:32,460
uncomfortable and that's good because

00:01:29,600 --> 00:01:34,380
formatting code is boring and no one

00:01:32,460 --> 00:01:36,990
cares about it and so it's nice to just

00:01:34,380 --> 00:01:39,450
have it turn some ugly code into some

00:01:36,990 --> 00:01:41,130
nice code and just you don't have to

00:01:39,450 --> 00:01:44,909
worry about how your code is formatted

00:01:41,130 --> 00:01:46,470
any more black takes care of it and when

00:01:44,909 --> 00:01:49,200
I switch to this a few years ago I

00:01:46,470 --> 00:01:51,329
thought that's so cool that's such a

00:01:49,200 --> 00:01:53,670
cool thing that it can like I understand

00:01:51,329 --> 00:01:54,960
my code and it can safely reorganize it

00:01:53,670 --> 00:01:58,200
for me without me having to think too

00:01:54,960 --> 00:02:00,060
hard about it and what if I could do

00:01:58,200 --> 00:02:03,840
something like this what if I could

00:02:00,060 --> 00:02:05,820
write code that rewrites my code maybe I

00:02:03,840 --> 00:02:08,459
could do something awesome with it and

00:02:05,820 --> 00:02:10,379
that's about where I left that for a

00:02:08,459 --> 00:02:11,580
while there just bubbled up in my head

00:02:10,379 --> 00:02:12,350
and I thought that's cool they could do

00:02:11,580 --> 00:02:16,970
something like that

00:02:12,350 --> 00:02:20,510
maybe one day and that specific thing I

00:02:16,970 --> 00:02:23,660
wanted to do at the time was we had a

00:02:20,510 --> 00:02:26,060
big test suite which was written using

00:02:23,660 --> 00:02:28,400
the standard Lib unit test module so had

00:02:26,060 --> 00:02:31,070
you know unit test test case everywhere

00:02:28,400 --> 00:02:32,450
and that was fine for a while and then

00:02:31,070 --> 00:02:34,610
we switched the pie taste and pie taste

00:02:32,450 --> 00:02:37,270
is awesome and and I wanted to kind of

00:02:34,610 --> 00:02:39,940
rewrite our tests to a pie taste style

00:02:37,270 --> 00:02:42,800
whose use PI test here

00:02:39,940 --> 00:02:46,100
excellent if you haven't you should

00:02:42,800 --> 00:02:49,700
it is also awesome and what PI test does

00:02:46,100 --> 00:02:52,640
is what is to taste side by side and the

00:02:49,700 --> 00:02:56,000
one on the left is a an old-school you

00:02:52,640 --> 00:02:58,790
know standard you know test thing and it

00:02:56,000 --> 00:03:01,760
kind of looks a bit like Java and the

00:02:58,790 --> 00:03:04,640
one on the right is a PI taste test and

00:03:01,760 --> 00:03:07,280
it's it's shorter it's a bit prettier

00:03:04,640 --> 00:03:09,440
it's much more flexible and we're going

00:03:07,280 --> 00:03:12,770
to that maybe a little bit but not right

00:03:09,440 --> 00:03:15,890
now and so and the other thing I should

00:03:12,770 --> 00:03:18,170
say is that the PI test the test runner

00:03:15,890 --> 00:03:22,130
in PI taste is backwards compatible with

00:03:18,170 --> 00:03:24,200
these old unit test test cases so we'll

00:03:22,130 --> 00:03:25,850
run those for you so you if you switch

00:03:24,200 --> 00:03:27,860
to PI tests you don't have to

00:03:25,850 --> 00:03:30,950
immediately rewrite all of your tests it

00:03:27,860 --> 00:03:33,770
will mostly run the mezes and so we

00:03:30,950 --> 00:03:35,270
switched to piety and we had all this

00:03:33,770 --> 00:03:36,770
old stuff lying around that we didn't

00:03:35,270 --> 00:03:39,350
touch because it would be a mess of

00:03:36,770 --> 00:03:42,020
effort to rewrite it but it bothered me

00:03:39,350 --> 00:03:44,420
and every time I had to interact with

00:03:42,020 --> 00:03:46,310
one or change something in one and a

00:03:44,420 --> 00:03:48,620
head to type self dot assert equal or

00:03:46,310 --> 00:03:50,930
whatever and or you know just even see

00:03:48,620 --> 00:03:53,270
that on my screen it really irritated me

00:03:50,930 --> 00:03:55,820
and I wanted to change it and I wanted

00:03:53,270 --> 00:03:57,470
to fix it but it was never worth the

00:03:55,820 --> 00:04:04,460
time commitment cuz there's thousands of

00:03:57,470 --> 00:04:08,240
these yeah and then I went to this talk

00:04:04,460 --> 00:04:11,270
last year at PyCon a you this is the

00:04:08,240 --> 00:04:12,740
talk by John Reese at Facebook and he

00:04:11,270 --> 00:04:14,960
did this talk on refactoring code with

00:04:12,740 --> 00:04:17,690
the standard library did anyone else

00:04:14,960 --> 00:04:19,760
here go to that talk there are a few

00:04:17,690 --> 00:04:21,260
people if you haven't and you're

00:04:19,760 --> 00:04:23,090
interested in the stuff I recommend it

00:04:21,260 --> 00:04:25,190
because he goes he does a much more

00:04:23,090 --> 00:04:26,150
gentle introduction to automated

00:04:25,190 --> 00:04:27,440
refactoring

00:04:26,150 --> 00:04:32,330
covers a lot of things I'm just going to

00:04:27,440 --> 00:04:34,699
gloss over and this is a yeah

00:04:32,330 --> 00:04:38,780
so John recent Facebook released at the

00:04:34,699 --> 00:04:40,820
same time a library called bola and it

00:04:38,780 --> 00:04:45,260
essentially is a library that you can

00:04:40,820 --> 00:04:48,199
use to write scripts that modify your

00:04:45,260 --> 00:04:51,380
code and so he gave this example on his

00:04:48,199 --> 00:04:52,669
website and he wanted to look for

00:04:51,380 --> 00:04:55,040
comments that say to do

00:04:52,669 --> 00:04:57,350
internationalization followed by a print

00:04:55,040 --> 00:04:59,539
statement and he wanted to automatically

00:04:57,350 --> 00:05:02,419
add a translation function to the print

00:04:59,539 --> 00:05:04,880
statement and remove the comment so

00:05:02,419 --> 00:05:08,840
that's he wrote some code and he ran it

00:05:04,880 --> 00:05:11,060
and it did that and I thought that was

00:05:08,840 --> 00:05:12,320
cool and I went off and downloaded

00:05:11,060 --> 00:05:14,780
Bowler and played around the foot a

00:05:12,320 --> 00:05:16,460
little bit and I made a few easy wins

00:05:14,780 --> 00:05:18,620
through our code base I don't know what

00:05:16,460 --> 00:05:21,440
I did immediately but maybe I replaced

00:05:18,620 --> 00:05:24,110
self not assert equal with a normal

00:05:21,440 --> 00:05:26,120
assert statement and I thought that was

00:05:24,110 --> 00:05:28,900
cool when I mentioned it to rob the CTO

00:05:26,120 --> 00:05:33,639
of coordinates and then I went to bed

00:05:28,900 --> 00:05:38,300
and then I woke up in the morning and

00:05:33,639 --> 00:05:41,030
Rob head just casually volunteered me on

00:05:38,300 --> 00:05:46,490
this massive open-source project to work

00:05:41,030 --> 00:05:49,910
on their test suite thanks Rob and this

00:05:46,490 --> 00:05:51,650
project was called G dal I don't expect

00:05:49,910 --> 00:05:54,289
a lot of hands but has anyone here used

00:05:51,650 --> 00:06:01,250
GDL yeah there's a few ok more than I

00:05:54,289 --> 00:06:04,030
expected um G Dell is a well jido it is

00:06:01,250 --> 00:06:06,320
the geographic data abstraction library

00:06:04,030 --> 00:06:09,590
and it's a bit of a mouthful but just

00:06:06,320 --> 00:06:12,020
called genome and working at coordinates

00:06:09,590 --> 00:06:13,610
we do things with geographic data and

00:06:12,020 --> 00:06:18,620
hence we use this library quite a lot

00:06:13,610 --> 00:06:22,760
under the hood and it's a big C++ thing

00:06:18,620 --> 00:06:24,470
and it has Python bindings and so all of

00:06:22,760 --> 00:06:29,780
almost all the tests are written in

00:06:24,470 --> 00:06:32,419
Python and in great fear I did a line

00:06:29,780 --> 00:06:34,010
count on the Python test suite and found

00:06:32,419 --> 00:06:37,390
out it was two hundred and seventy one

00:06:34,010 --> 00:06:37,390
thousand lines of code

00:06:39,439 --> 00:06:43,669
so what's wrong with them why do they

00:06:41,389 --> 00:06:45,289
need refactoring because I was like I

00:06:43,669 --> 00:06:48,289
don't know it sounds interesting but

00:06:45,289 --> 00:06:49,999
this is a big project probably what was

00:06:48,289 --> 00:06:55,159
wrong with them well they're 20 years

00:06:49,999 --> 00:06:56,659
old to start with and they did not use

00:06:55,159 --> 00:06:58,639
the unit test library in the standard

00:06:56,659 --> 00:07:00,229
lab or pie tastes or anything fancy like

00:06:58,639 --> 00:07:02,989
that they were just using a homegrown

00:07:00,229 --> 00:07:07,099
like in-house thing that was built by a

00:07:02,989 --> 00:07:09,499
C++ developers and nothing against C++

00:07:07,099 --> 00:07:13,239
developers but a lot of it was not very

00:07:09,499 --> 00:07:16,069
pythonic there was a lot of boilerplate

00:07:13,239 --> 00:07:17,899
it was very hard to drill into failures

00:07:16,069 --> 00:07:20,329
so if you had a failure

00:07:17,899 --> 00:07:21,829
how would you isolate that failure and

00:07:20,329 --> 00:07:23,719
run it by itself over and over again

00:07:21,829 --> 00:07:26,329
while you iterate on the fix it turns

00:07:23,719 --> 00:07:28,939
out you can't run an individual test in

00:07:26,329 --> 00:07:30,379
the old taste we you could run the file

00:07:28,939 --> 00:07:32,479
that it's in but if the file had a

00:07:30,379 --> 00:07:36,849
hundred tests you you're running a

00:07:32,479 --> 00:07:42,349
hundred tests and if it's low tough

00:07:36,849 --> 00:07:45,379
there was ugly output and this last one

00:07:42,349 --> 00:07:48,559
is a problem those hundred tests and

00:07:45,379 --> 00:07:50,149
that file must be run in order and the

00:07:48,559 --> 00:07:53,389
old test we'd only let you run them in

00:07:50,149 --> 00:07:54,919
order and so if the first test had a

00:07:53,389 --> 00:07:58,610
problem and didn't run the rest would

00:07:54,919 --> 00:08:00,499
not run and that's because the first

00:07:58,610 --> 00:08:02,839
test would do setup and the second test

00:08:00,499 --> 00:08:05,689
would rely on that setup so they were

00:08:02,839 --> 00:08:07,759
not independent and this actually is

00:08:05,689 --> 00:08:10,159
something that I never fixed but maybe

00:08:07,759 --> 00:08:12,339
hopefully I improved on a little bit but

00:08:10,159 --> 00:08:15,409
there yeah they needed help a little bit

00:08:12,339 --> 00:08:17,679
it was just a very inflexible test suite

00:08:15,409 --> 00:08:20,479
and it needed a bit of a little work

00:08:17,679 --> 00:08:25,550
care and attention I'll give you an

00:08:20,479 --> 00:08:26,839
example this is a this is actually not

00:08:25,550 --> 00:08:28,610
one of GDL states but it's very

00:08:26,839 --> 00:08:30,439
characteristic of their style that kind

00:08:28,610 --> 00:08:33,680
of made it up for a slide but anyway

00:08:30,439 --> 00:08:35,629
sorry um so the test does a little bit

00:08:33,680 --> 00:08:37,610
of work at the top and then you might

00:08:35,629 --> 00:08:39,769
see that instead of an assertion or you

00:08:37,610 --> 00:08:43,189
know a self dot assert equal or anything

00:08:39,769 --> 00:08:45,259
it's got an F statement and if the F

00:08:43,189 --> 00:08:49,699
statement kind of fails it will return

00:08:45,259 --> 00:08:52,190
fail otherwise it will return success so

00:08:49,699 --> 00:08:54,350
that the test contract here is that test

00:08:52,190 --> 00:08:56,150
must return a value and if they return

00:08:54,350 --> 00:08:58,460
failed they fail if they return success

00:08:56,150 --> 00:09:00,140
they succeed and if they return

00:08:58,460 --> 00:09:03,230
something else I have no idea what

00:09:00,140 --> 00:09:08,210
happens if they return if they raise an

00:09:03,230 --> 00:09:11,000
exception for whatever reason the rest

00:09:08,210 --> 00:09:12,620
of the file never runs because that was

00:09:11,000 --> 00:09:14,780
not really something that the test run I

00:09:12,620 --> 00:09:17,720
could deal with I think it did a track

00:09:14,780 --> 00:09:19,040
sit around the whole test module so if

00:09:17,720 --> 00:09:20,420
there's 100 tests and the first one

00:09:19,040 --> 00:09:22,760
throws an exception it will catch that

00:09:20,420 --> 00:09:27,080
and start on the next file and skip

00:09:22,760 --> 00:09:30,350
their other tests there is some other

00:09:27,080 --> 00:09:36,230
issues here there's this thing called

00:09:30,350 --> 00:09:38,870
GDL test that post reason and I guess

00:09:36,230 --> 00:09:40,190
the point of this originally was that if

00:09:38,870 --> 00:09:41,840
you're returning fail you're kind of

00:09:40,190 --> 00:09:43,850
losing some context about what happened

00:09:41,840 --> 00:09:45,950
this test failed but we don't know why

00:09:43,850 --> 00:09:47,660
so they wanted a way to elect add a

00:09:45,950 --> 00:09:51,620
string to that to say it failed because

00:09:47,660 --> 00:09:53,210
of whatever and so there you can put a

00:09:51,620 --> 00:09:55,130
string and I think it probably just

00:09:53,210 --> 00:09:57,560
stands up and stand it out usually I

00:09:55,130 --> 00:10:02,540
don't think anything magic happened with

00:09:57,560 --> 00:10:05,480
it but about 95 percent of the time that

00:10:02,540 --> 00:10:09,560
this was called and gee Dells codebase

00:10:05,480 --> 00:10:12,710
it was called with the string fail so

00:10:09,560 --> 00:10:14,720
these were not terribly helpful and so I

00:10:12,710 --> 00:10:15,980
thought because it's not being used for

00:10:14,720 --> 00:10:18,530
anything useful let's just get rid of it

00:10:15,980 --> 00:10:20,030
it's pointless and and same with the

00:10:18,530 --> 00:10:21,260
print statement there that is printing

00:10:20,030 --> 00:10:26,240
something useful

00:10:21,260 --> 00:10:27,500
I guess if that check something was

00:10:26,240 --> 00:10:28,700
different than what you're expected then

00:10:27,500 --> 00:10:33,560
you want to know what it actually was

00:10:28,700 --> 00:10:35,300
right and there's no way to get that

00:10:33,560 --> 00:10:36,620
from the return value of this test so we

00:10:35,300 --> 00:10:38,780
just needed to print it to stand it out

00:10:36,620 --> 00:10:40,370
and they make sense and if so if you get

00:10:38,780 --> 00:10:42,950
a failure here you might just have to

00:10:40,370 --> 00:10:46,040
scroll up a little bit and see okay the

00:10:42,950 --> 00:10:47,570
the CS thing was one two three four that

00:10:46,040 --> 00:10:48,740
makes sense and is one more thing that I

00:10:47,570 --> 00:10:51,080
don't like about this test

00:10:48,740 --> 00:10:54,380
and that is the G Alba unlink down the

00:10:51,080 --> 00:10:57,530
bottom it's I guess the first line of

00:10:54,380 --> 00:10:59,780
the test creates a file out death and

00:10:57,530 --> 00:11:02,120
the last line of the test there before

00:10:59,780 --> 00:11:04,209
it returns is cleaning up that thing

00:11:02,120 --> 00:11:06,610
it's deleting it so

00:11:04,209 --> 00:11:09,009
if this test failed or if it through an

00:11:06,610 --> 00:11:11,439
exception that fire would never get

00:11:09,009 --> 00:11:13,709
cleaned up I guess until the next time

00:11:11,439 --> 00:11:15,579
you run the tests on this test passes

00:11:13,709 --> 00:11:17,199
and I just don't think that that's

00:11:15,579 --> 00:11:20,949
something that tests should need to take

00:11:17,199 --> 00:11:23,619
care of themselves so I would like this

00:11:20,949 --> 00:11:28,869
test to look a bit like this down the

00:11:23,619 --> 00:11:33,040
bottom there so I'll just say what's

00:11:28,869 --> 00:11:35,129
good about this one is obviously will

00:11:33,040 --> 00:11:37,689
tend the eff statement into an assertion

00:11:35,129 --> 00:11:40,360
we've gotten rid of the return values

00:11:37,689 --> 00:11:43,559
now the test contractors if this test

00:11:40,360 --> 00:11:47,110
raises an exception that failed

00:11:43,559 --> 00:11:50,980
otherwise it worked there's no return

00:11:47,110 --> 00:11:52,749
values GDL test the post reason went

00:11:50,980 --> 00:11:55,749
away because it was pointless to start

00:11:52,749 --> 00:11:57,790
with the print statement if you're using

00:11:55,749 --> 00:11:59,350
PI test for this the print statement is

00:11:57,790 --> 00:12:00,759
actually not needed anymore and that's

00:11:59,350 --> 00:12:03,369
because PI test does a little bit of

00:12:00,759 --> 00:12:06,939
magic here if you have an assertion and

00:12:03,369 --> 00:12:09,040
the assertion fails parties will print

00:12:06,939 --> 00:12:10,809
out the values of all the expressions

00:12:09,040 --> 00:12:14,980
and sub expressions in there assert

00:12:10,809 --> 00:12:20,110
statement so PI test will say assertion

00:12:14,980 --> 00:12:21,220
error 1 2 3 4 is not equal to 4 7 8 3 so

00:12:20,110 --> 00:12:24,879
we no longer need that print statement

00:12:21,220 --> 00:12:28,299
to print out that CS thing and there's

00:12:24,879 --> 00:12:31,299
one more change here that G Delta unlink

00:12:28,299 --> 00:12:34,809
has disappeared and I've gotten rid of

00:12:31,299 --> 00:12:37,470
it because you might see that that

00:12:34,809 --> 00:12:41,110
little tempter argument to the test

00:12:37,470 --> 00:12:43,600
this is what's called a PI test fixture

00:12:41,110 --> 00:12:45,279
and there's some built-in 2 pi test but

00:12:43,600 --> 00:12:47,529
you can define your own ones it's really

00:12:45,279 --> 00:12:49,779
easy to make and a fixture is just

00:12:47,529 --> 00:12:51,699
basically some code that runs it's

00:12:49,779 --> 00:12:54,339
guaranteed to run before and after your

00:12:51,699 --> 00:12:55,899
test so it can in this case what it

00:12:54,339 --> 00:12:58,929
would do is make a directory in the

00:12:55,899 --> 00:13:00,369
current directory called temp and then

00:12:58,929 --> 00:13:02,410
once the test is finished whether it

00:13:00,369 --> 00:13:03,970
succeeded or failed it will remove their

00:13:02,410 --> 00:13:07,149
directory including all the contents so

00:13:03,970 --> 00:13:08,799
they're out dot F has just disappeared

00:13:07,149 --> 00:13:11,410
I like this taste much better it's

00:13:08,799 --> 00:13:14,019
prettier I don't have to think too hard

00:13:11,410 --> 00:13:15,130
about it and just kind of does what I

00:13:14,019 --> 00:13:17,530
want

00:13:15,130 --> 00:13:19,990
so I just like to point out you will

00:13:17,530 --> 00:13:25,270
never be able to do this with a regex

00:13:19,990 --> 00:13:27,340
for a place you know you can you can do

00:13:25,270 --> 00:13:28,780
that manually easily but if you try and

00:13:27,340 --> 00:13:30,940
do this with a Find and Replace on your

00:13:28,780 --> 00:13:31,540
code base to to change a thousand of

00:13:30,940 --> 00:13:35,710
these at once

00:13:31,540 --> 00:13:37,150
good luck it's really hard I don't care

00:13:35,710 --> 00:13:38,830
what kind of rejects was a DUI you're

00:13:37,150 --> 00:13:41,530
not going to be able to do that so we

00:13:38,830 --> 00:13:44,790
need something better and what we need

00:13:41,530 --> 00:13:47,020
is syntax aware refactoring we need

00:13:44,790 --> 00:13:49,000
basically a Find and Replace for

00:13:47,020 --> 00:13:54,250
structured data and the structured data

00:13:49,000 --> 00:13:58,030
here is a Python syntax tree and it

00:13:54,250 --> 00:14:02,110
turns out that Python defines a pattern

00:13:58,030 --> 00:14:05,830
grammar for doing syntax searches on

00:14:02,110 --> 00:14:07,170
pythons and Dex trees so it's a complex

00:14:05,830 --> 00:14:09,820
thing

00:14:07,170 --> 00:14:12,700
Python actually defines not only a

00:14:09,820 --> 00:14:14,830
syntax tree but it defines a grammar for

00:14:12,700 --> 00:14:19,000
a language you can use to search their

00:14:14,830 --> 00:14:21,160
syntax tree and things like and the the

00:14:19,000 --> 00:14:23,650
Lib two-to-three module in the standard

00:14:21,160 --> 00:14:26,680
Lib implements a bunch of functions

00:14:23,650 --> 00:14:29,860
around it's and text and Bowler uses it

00:14:26,680 --> 00:14:33,460
and black uses it so I'm going to go

00:14:29,860 --> 00:14:35,470
through this this is essentially a

00:14:33,460 --> 00:14:37,870
little Find and Replace I'm just going

00:14:35,470 --> 00:14:40,120
to try and remove just one feature of

00:14:37,870 --> 00:14:42,040
that that test yeah I'm just going to

00:14:40,120 --> 00:14:46,090
get rid of the GDL test off post reason

00:14:42,040 --> 00:14:48,280
call so we'll go through this we're

00:14:46,090 --> 00:14:51,280
creating a bowler query so this is the

00:14:48,280 --> 00:14:52,360
library that Facebook released and the

00:14:51,280 --> 00:14:56,050
bowler query is going to look at some

00:14:52,360 --> 00:14:58,480
Python files and that select there is

00:14:56,050 --> 00:15:00,940
we're gonna look for a pattern and this

00:14:58,480 --> 00:15:03,460
isn't a we're not looking for some text

00:15:00,940 --> 00:15:06,910
we're looking for some nodes of a syntax

00:15:03,460 --> 00:15:08,590
tree and once we found those nodes we're

00:15:06,910 --> 00:15:11,140
going to call modify on it and pass it a

00:15:08,590 --> 00:15:13,650
callback so that callback is going to

00:15:11,140 --> 00:15:17,050
make some changes to the syntax tree and

00:15:13,650 --> 00:15:18,340
execute just is just do it so I'll

00:15:17,050 --> 00:15:20,260
ignore the callback for a sick let's

00:15:18,340 --> 00:15:23,230
just go back to this pattern because

00:15:20,260 --> 00:15:24,910
it's complicated it looks very

00:15:23,230 --> 00:15:27,150
complicated it's actually very easy to

00:15:24,910 --> 00:15:27,150
learn

00:15:27,319 --> 00:15:36,329
yeah what we're looking for here is a

00:15:33,470 --> 00:15:40,050
simple statement the the angle brackets

00:15:36,329 --> 00:15:42,660
just denote nesting so this is a tree of

00:15:40,050 --> 00:15:45,649
stuff and yeah we're looking for a

00:15:42,660 --> 00:15:47,970
simple statement that contains one

00:15:45,649 --> 00:15:49,199
function call power there just means

00:15:47,970 --> 00:15:52,350
function call I don't know why they call

00:15:49,199 --> 00:15:59,569
the power a function called - G Delta

00:15:52,350 --> 00:16:01,800
first reason with one string argument so

00:15:59,569 --> 00:16:03,980
yeah that's what we're looking for so

00:16:01,800 --> 00:16:08,009
we're looking for a simple statement

00:16:03,980 --> 00:16:11,429
that contains one function call - G

00:16:08,009 --> 00:16:14,009
Delta stop post reason with one string

00:16:11,429 --> 00:16:16,920
argument and I'll just point out that we

00:16:14,009 --> 00:16:19,079
are capturing the string argument into a

00:16:16,920 --> 00:16:21,300
variable called reason this is a little

00:16:19,079 --> 00:16:23,160
bit like a regex like a named group in

00:16:21,300 --> 00:16:24,149
the ridges so we're looking for this

00:16:23,160 --> 00:16:26,100
thing and then we're just going to

00:16:24,149 --> 00:16:28,860
capture that string argument into a

00:16:26,100 --> 00:16:31,019
thing called reason right now that we've

00:16:28,860 --> 00:16:32,519
found that we've called select and given

00:16:31,019 --> 00:16:34,620
in a pattern we've found some nodes

00:16:32,519 --> 00:16:37,649
hopefully in our Python file now we're

00:16:34,620 --> 00:16:39,269
going to pass them to our callback now a

00:16:37,649 --> 00:16:42,240
bowler callback takes three arguments

00:16:39,269 --> 00:16:43,679
got the node which is the outermost node

00:16:42,240 --> 00:16:48,089
of our pattern in this case it's the

00:16:43,679 --> 00:16:50,249
simple statement node it takes capture

00:16:48,089 --> 00:16:52,110
which is a debt containing anything you

00:16:50,249 --> 00:16:55,019
captured so in this case that will just

00:16:52,110 --> 00:16:56,759
include the reasons string and it takes

00:16:55,019 --> 00:17:00,389
a file name that the Python file that we

00:16:56,759 --> 00:17:04,169
operating on so this function that I

00:17:00,389 --> 00:17:08,699
wrote just looks at the reason and if

00:17:04,169 --> 00:17:13,559
the reason is fail it removes the entire

00:17:08,699 --> 00:17:19,289
statement cool there was a lot to unpack

00:17:13,559 --> 00:17:19,589
here this is what it does boom got rid

00:17:19,289 --> 00:17:22,980
of it

00:17:19,589 --> 00:17:30,419
yay and you might say to me there was a

00:17:22,980 --> 00:17:33,899
lot of work dude you're right but then I

00:17:30,419 --> 00:17:35,760
ran it on the codebase and that got rid

00:17:33,899 --> 00:17:37,230
of almost nine thousand lines of

00:17:35,760 --> 00:17:38,180
pointless code just that little thing

00:17:37,230 --> 00:17:40,640
that I just wrote

00:17:38,180 --> 00:17:43,430
and I was like really wow this is

00:17:40,640 --> 00:17:44,900
amazing I got really excited and I'm in

00:17:43,430 --> 00:17:48,920
a bit crazy and I just wrote this for

00:17:44,900 --> 00:17:51,560
everything and I'll just whip through

00:17:48,920 --> 00:17:53,930
some of the other things pie taste

00:17:51,560 --> 00:17:56,420
expects tits to be named taste something

00:17:53,930 --> 00:17:58,760
and the tests weren't already so I made

00:17:56,420 --> 00:18:01,630
some logic which looked for nodes that

00:17:58,760 --> 00:18:04,160
were functions and looked like tests and

00:18:01,630 --> 00:18:08,030
we're not already named like that and I

00:18:04,160 --> 00:18:12,110
just renamed them I got rid of those

00:18:08,030 --> 00:18:13,580
fail and success returned bellies took

00:18:12,110 --> 00:18:18,440
quite a bit of work to cover all the

00:18:13,580 --> 00:18:20,990
different cases here but it was worth it

00:18:18,440 --> 00:18:25,010
because the different just this was

00:18:20,990 --> 00:18:26,690
about 50,000 lines so saved a lot of

00:18:25,010 --> 00:18:31,700
pointless code and I made things a lot

00:18:26,690 --> 00:18:33,520
prettier just by doing that I found a

00:18:31,700 --> 00:18:36,680
lot of things that were doing

00:18:33,520 --> 00:18:38,780
tracks it's just to fight just to make

00:18:36,680 --> 00:18:40,820
sure an exception happened and if it

00:18:38,780 --> 00:18:41,960
didn't happen and it was a failure and I

00:18:40,820 --> 00:18:49,450
just replaced it with I just thought

00:18:41,960 --> 00:18:54,230
raises because that's what it does and I

00:18:49,450 --> 00:18:58,250
did a lot more and I kept at this every

00:18:54,230 --> 00:19:01,160
night for often for hours and it was

00:18:58,250 --> 00:19:04,090
really fun and I loved it and my wife

00:19:01,160 --> 00:19:07,520
didn't really appreciate it

00:19:04,090 --> 00:19:13,310
it was borderline obsessive okay it

00:19:07,520 --> 00:19:18,080
wasn't really borderline and my wife was

00:19:13,310 --> 00:19:21,400
unhappy she was not impressed but the

00:19:18,080 --> 00:19:24,290
stuff was just so cool

00:19:21,400 --> 00:19:28,820
so I spent hours every evening on it for

00:19:24,290 --> 00:19:32,060
ages and in the meantime GTL kept going

00:19:28,820 --> 00:19:34,610
what a surprise and Gina was a very

00:19:32,060 --> 00:19:38,360
active project okay it's not the Linux

00:19:34,610 --> 00:19:40,790
kernel but you can see one week there

00:19:38,360 --> 00:19:42,740
they had heated commits but maybe there

00:19:40,790 --> 00:19:46,630
was a sprint or something but most weeks

00:19:42,740 --> 00:19:49,100
they would do 20 30 40 commits and

00:19:46,630 --> 00:19:53,600
almost every commit touches the test

00:19:49,100 --> 00:19:55,790
suite that's a good thing probably but I

00:19:53,600 --> 00:19:59,270
since I was basically rewriting the test

00:19:55,790 --> 00:20:02,210
suite almost every commit conflicted

00:19:59,270 --> 00:20:03,770
with what I was doing so I couldn't

00:20:02,210 --> 00:20:07,100
possibly keep up with that and I

00:20:03,770 --> 00:20:08,990
couldn't resolve all the conflict so I

00:20:07,100 --> 00:20:11,210
needed a strategy for avoiding conflict

00:20:08,990 --> 00:20:12,710
I needed a way that I could say okay

00:20:11,210 --> 00:20:16,790
look this is a million conflicts here

00:20:12,710 --> 00:20:20,210
but I don't care it doesn't matter and I

00:20:16,790 --> 00:20:23,000
came out with a few rules to avoid those

00:20:20,210 --> 00:20:24,890
conflicts first one was I should keep my

00:20:23,000 --> 00:20:27,110
manual changes and my automated changes

00:20:24,890 --> 00:20:28,730
separate I didn't know I say I was doing

00:20:27,110 --> 00:20:30,140
an automated refactor but there was

00:20:28,730 --> 00:20:32,510
actually quite a bit of manual stuff

00:20:30,140 --> 00:20:34,400
that I needed to do or just wasn't worth

00:20:32,510 --> 00:20:36,020
automating or you know like I had to

00:20:34,400 --> 00:20:37,670
write the fixtures that automated

00:20:36,020 --> 00:20:39,680
changes would use and that kind of thing

00:20:37,670 --> 00:20:42,320
so I did have a bunch of manual commits

00:20:39,680 --> 00:20:43,760
and I had to keep those completely

00:20:42,320 --> 00:20:48,530
separate from our automated commits

00:20:43,760 --> 00:20:51,430
because I was rebasing my stuff on top

00:20:48,530 --> 00:20:53,690
of upstream and I was rebasing

00:20:51,430 --> 00:20:57,530
these points that probably in backwards

00:20:53,690 --> 00:21:00,620
order really I was rebasing because I

00:20:57,530 --> 00:21:03,500
had to rebase I wasn't merging I don't

00:21:00,620 --> 00:21:06,200
know if you get expert or whatever but

00:21:03,500 --> 00:21:08,600
sorry about all the get stuff I was

00:21:06,200 --> 00:21:10,550
rebasing because I had to rebase and the

00:21:08,600 --> 00:21:16,070
reason I had to rebase was the only way

00:21:10,550 --> 00:21:16,909
I could avoid conflict was to not try to

00:21:16,070 --> 00:21:18,830
resolve

00:21:16,909 --> 00:21:23,090
it turns out that resolving conflicts on

00:21:18,830 --> 00:21:25,249
automated commits is a big waste of time

00:21:23,090 --> 00:21:27,349
if you can recreate your commitment in

00:21:25,249 --> 00:21:28,519
seconds by running a script that's much

00:21:27,349 --> 00:21:33,159
faster than trying to resolve the

00:21:28,519 --> 00:21:36,019
conflict so what I would do was I would

00:21:33,159 --> 00:21:38,389
reverse my initial manual commits on top

00:21:36,019 --> 00:21:40,340
of whatever was upstream and then I

00:21:38,389 --> 00:21:42,229
would just recreate all of my automated

00:21:40,340 --> 00:21:44,059
changes on top of that and that took a

00:21:42,229 --> 00:21:46,210
while because there's a lot of files and

00:21:44,059 --> 00:21:48,799
old but you know like a few minutes and

00:21:46,210 --> 00:21:51,169
then I would maybe a black couple manual

00:21:48,799 --> 00:21:55,909
changes on top of that and I would do

00:21:51,169 --> 00:22:00,710
this every day in the final world will

00:21:55,909 --> 00:22:03,379
say is had to prevent myself from fixing

00:22:00,710 --> 00:22:04,999
everything because I knew this was going

00:22:03,379 --> 00:22:07,460
to be a big change and every change I

00:22:04,999 --> 00:22:08,720
make was a potential conflict with

00:22:07,460 --> 00:22:11,149
something that someone else was going to

00:22:08,720 --> 00:22:14,029
do so I had to physically restrain

00:22:11,149 --> 00:22:15,289
myself almost because there's so much

00:22:14,029 --> 00:22:17,330
that needed fixing and it was like I

00:22:15,289 --> 00:22:22,820
must fix it and that's been said no I'm

00:22:17,330 --> 00:22:24,950
not going to so all this rebasing and

00:22:22,820 --> 00:22:27,409
stuff took time you know like I would

00:22:24,950 --> 00:22:29,869
sit down to do some code and and I first

00:22:27,409 --> 00:22:32,210
have to pull in the latest changes and

00:22:29,869 --> 00:22:34,340
forget how to rebase things and like I'm

00:22:32,210 --> 00:22:36,519
a programmer and I hate doing busy work

00:22:34,340 --> 00:22:39,440
like that so I wrote a script to do it

00:22:36,519 --> 00:22:42,739
it was a bash script not a Python script

00:22:39,440 --> 00:22:44,330
sorry but essentially it called my

00:22:42,739 --> 00:22:51,489
Python script a lot and committed the

00:22:44,330 --> 00:22:51,489
changes for me and it did this

00:22:55,059 --> 00:22:58,669
and it's just the playing on my

00:22:57,139 --> 00:23:00,049
automated changes there one at a time

00:22:58,669 --> 00:23:06,049
and committing them to the git

00:23:00,049 --> 00:23:07,489
repository and any second now burn and

00:23:06,049 --> 00:23:09,019
all that stuff at the end is just cherry

00:23:07,489 --> 00:23:11,840
picking a bunch of manual commits that I

00:23:09,019 --> 00:23:13,399
had already done on the branch so did

00:23:11,840 --> 00:23:17,960
all automated changes and then added all

00:23:13,399 --> 00:23:22,879
the manual stuff on top and it was so

00:23:17,960 --> 00:23:27,769
satisfying to watch and this is the

00:23:22,879 --> 00:23:29,539
script more or less and it just yeah it

00:23:27,769 --> 00:23:32,690
goes through a bunch of commits get some

00:23:29,539 --> 00:23:36,830
commit messages from somewhere applies

00:23:32,690 --> 00:23:38,330
the changes converts them and then down

00:23:36,830 --> 00:23:40,340
the bottom there just cherry-picks a

00:23:38,330 --> 00:23:43,970
bunch of manual commits from another

00:23:40,340 --> 00:23:51,590
branch and yeah and every time I ran it

00:23:43,970 --> 00:23:54,409
I just felt awesome so at this point I'm

00:23:51,590 --> 00:23:55,809
gonna just say some things about when

00:23:54,409 --> 00:24:01,489
this is a good idea because I think

00:23:55,809 --> 00:24:03,230
usually it's a terrible idea it's a good

00:24:01,489 --> 00:24:07,429
idea if you're working on very large

00:24:03,230 --> 00:24:10,399
projects where it is you know where it's

00:24:07,429 --> 00:24:12,289
worth the effort if you can write your

00:24:10,399 --> 00:24:15,639
automated change and make it a massive

00:24:12,289 --> 00:24:18,350
difference then you maybe should do it

00:24:15,639 --> 00:24:21,289
it's a good idea if your code is very

00:24:18,350 --> 00:24:24,919
well tested like if you're a refactoring

00:24:21,289 --> 00:24:27,409
a test suite if your code is not well

00:24:24,919 --> 00:24:30,499
tested you're gonna end up with a 50,000

00:24:27,409 --> 00:24:32,659
line death and no one let me tell you no

00:24:30,499 --> 00:24:34,700
one is going to look at your change no

00:24:32,659 --> 00:24:38,059
one cares that they don't give that much

00:24:34,700 --> 00:24:39,440
anyway because that's a lot of lines and

00:24:38,059 --> 00:24:42,259
it's gonna take them hours and hours and

00:24:39,440 --> 00:24:44,029
hours so the only thing that's going to

00:24:42,259 --> 00:24:45,049
look at your code is the test suite so

00:24:44,029 --> 00:24:49,369
if you don't have a good test suite

00:24:45,049 --> 00:24:51,789
don't do this and it's a useful thing to

00:24:49,369 --> 00:24:56,239
do when you cannot use a regex

00:24:51,789 --> 00:24:58,609
but mostly you can use a rigid and it

00:24:56,239 --> 00:25:01,909
will be safe enough especially if your

00:24:58,609 --> 00:25:04,009
test we is good if you have to rename a

00:25:01,909 --> 00:25:07,429
function and all the places that call

00:25:04,009 --> 00:25:08,060
that function then maybe you can do that

00:25:07,429 --> 00:25:11,780
with a rigid

00:25:08,060 --> 00:25:14,470
so no bother with this there anyway I

00:25:11,780 --> 00:25:14,470
got here

00:25:14,920 --> 00:25:20,090
now I told some people 100,000 line

00:25:17,420 --> 00:25:21,470
chain lines changed and I guess that's

00:25:20,090 --> 00:25:24,560
if you add the additions in the

00:25:21,470 --> 00:25:27,950
subtractions which is various ways of

00:25:24,560 --> 00:25:32,180
doing this it's okay don't read about it

00:25:27,950 --> 00:25:35,750
um so my PA was big and how do I get

00:25:32,180 --> 00:25:38,270
this baby merged because no one can

00:25:35,750 --> 00:25:40,010
review this they just can't so I'm just

00:25:38,270 --> 00:25:42,350
going to stress again I had to keep the

00:25:40,010 --> 00:25:44,380
automated changes separate not just

00:25:42,350 --> 00:25:47,690
because of conflicts but also because

00:25:44,380 --> 00:25:49,520
that way on github someone can look at

00:25:47,690 --> 00:25:51,860
an automated commit no it's an automated

00:25:49,520 --> 00:25:54,470
commit look at the first 10 lines and

00:25:51,860 --> 00:25:57,710
say oh I know what this does I'll skip

00:25:54,470 --> 00:26:00,410
the remaining 20,000 lines and it makes

00:25:57,710 --> 00:26:02,270
a much more reviewable and the other

00:26:00,410 --> 00:26:04,310
thing was I had to keep my commit

00:26:02,270 --> 00:26:06,620
history sane and I was rebasing anyway

00:26:04,310 --> 00:26:08,960
so I just made sure that I sort of

00:26:06,620 --> 00:26:12,440
squashed bug fixes and to the commit

00:26:08,960 --> 00:26:14,570
that caused the bug so that people gonna

00:26:12,440 --> 00:26:18,740
look at an individual commit hopefully a

00:26:14,570 --> 00:26:20,330
manual one and just like not have to say

00:26:18,740 --> 00:26:23,030
I look you've got heaps of bugs here

00:26:20,330 --> 00:26:24,500
when I'm reviewing I like to review a

00:26:23,030 --> 00:26:26,210
whole pull request at once but obviously

00:26:24,500 --> 00:26:27,530
that was not possible with this so you

00:26:26,210 --> 00:26:30,680
need to be able to look at an individual

00:26:27,530 --> 00:26:34,940
commit and have it makes sense so how do

00:26:30,680 --> 00:26:37,910
I get humans to merge this I will finish

00:26:34,940 --> 00:26:39,620
with a few tips for this I guess be

00:26:37,910 --> 00:26:41,510
polite and humble that probably

00:26:39,620 --> 00:26:43,340
hopefully goes without saying no one

00:26:41,510 --> 00:26:48,200
wants to read your poor request if they

00:26:43,340 --> 00:26:49,940
think you're an um get early

00:26:48,200 --> 00:26:52,460
feedback before you commit and I don't

00:26:49,940 --> 00:26:55,430
mean get commit I mean before you invest

00:26:52,460 --> 00:26:57,590
yourself in this project you need to

00:26:55,430 --> 00:26:59,060
probably check the mailing list and talk

00:26:57,590 --> 00:27:00,770
to some core developers and see if it's

00:26:59,060 --> 00:27:03,290
something that they would actually care

00:27:00,770 --> 00:27:06,820
about and in in my case they did they

00:27:03,290 --> 00:27:09,350
said yeah the core developers of GDL

00:27:06,820 --> 00:27:11,300
hated the taste sweet like with a

00:27:09,350 --> 00:27:12,920
passion and they were like yes anything

00:27:11,300 --> 00:27:15,260
you can do that will make that better is

00:27:12,920 --> 00:27:17,460
going to be we're going to merge that so

00:27:15,260 --> 00:27:21,690
that was really encouraging and

00:27:17,460 --> 00:27:23,010
yeah leave out controversial stuff there

00:27:21,690 --> 00:27:25,230
was a few things I wanted to do but I

00:27:23,010 --> 00:27:27,150
was like I don't know if people will

00:27:25,230 --> 00:27:29,460
think this is as awesome as I think it

00:27:27,150 --> 00:27:31,920
is and I don't want to jeopardize my

00:27:29,460 --> 00:27:33,420
massive pull request to you know I don't

00:27:31,920 --> 00:27:34,620
want there to be discussion on whether

00:27:33,420 --> 00:27:37,410
it should be merged I want it to be

00:27:34,620 --> 00:27:41,160
obviously emerging all be responsive to

00:27:37,410 --> 00:27:44,970
questions be patient and give people

00:27:41,160 --> 00:27:48,330
something that they think is cool and I

00:27:44,970 --> 00:27:51,560
think the little things count here in my

00:27:48,330 --> 00:27:53,640
case I installed pie taste sugar in the

00:27:51,560 --> 00:27:57,350
development environment by default and

00:27:53,640 --> 00:28:00,000
purchased sugar just gives you green

00:27:57,350 --> 00:28:02,910
Unicode check marks when tests pass

00:28:00,000 --> 00:28:06,060
instead of boring white dot and I think

00:28:02,910 --> 00:28:10,170
that helped and well I got wait got

00:28:06,060 --> 00:28:11,910
merged which was cool and I don't think

00:28:10,170 --> 00:28:13,560
even well is listening but anyway huge

00:28:11,910 --> 00:28:16,620
thanks to him and everyone else he

00:28:13,560 --> 00:28:22,140
reviewed it and it was a good time I

00:28:16,620 --> 00:28:26,270
would do it again probably my wife might

00:28:22,140 --> 00:28:26,270

YouTube URL: https://www.youtube.com/watch?v=SLbOWiz4KSs


