Title: "Logging Rethought 2: The Actions of Frank Taylor Jr." - Markus Holtermann (PyCon AU 2019)
Publication date: 2019-08-03
Playlist: PyCon Australia 2019
Description: 
	Markus Holtermann

We build services, potentially used by thousands or even millions of people. And despite all the testing we do, some interactions with these services will not work out the way we hope. Wouldnâ€™t it be great to reconstruct what let to a problem and analyze if the problem occurred at other times?

https://2019.pycon-au.org/talks/logging-rethought-2-the-actions-of-frank-taylor-jr

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 2 - 6 2019.

Video licence: CC BY-NC-SA 4.0 - https://creativecommons.org/licenses/by-nc-sa/4.0/

Python, PyCon, PyConAU

Sat Aug  3 13:30:00 2019 at C3.4 & C3.5
Captions: 
	00:00:00,089 --> 00:00:03,920
hello good afternoon everyone lovely to

00:00:03,300 --> 00:00:08,760
see you all here

00:00:03,920 --> 00:00:11,370
this afternoon we're in the sea 3.4 sea

00:00:08,760 --> 00:00:13,200
3.5 room for the afternoon session we

00:00:11,370 --> 00:00:15,780
have three very interesting speakers

00:00:13,200 --> 00:00:19,109
lined up for you this afternoon our

00:00:15,780 --> 00:00:21,240
first one is Marcus Holterman Marcus

00:00:19,109 --> 00:00:23,580
Holtmann works as a back-end and

00:00:21,240 --> 00:00:26,099
infrastructure engineer at Crate OH

00:00:23,580 --> 00:00:29,099
he has been a django core contributor

00:00:26,099 --> 00:00:30,990
since early to 2015 it's a member of the

00:00:29,099 --> 00:00:33,899
security and operations team within

00:00:30,990 --> 00:00:36,300
django and has organized django con

00:00:33,899 --> 00:00:40,790
conferences has been the project lead

00:00:36,300 --> 00:00:43,379
the german Ubuntu users dot d a

00:00:40,790 --> 00:00:45,770
community support platform where he's

00:00:43,379 --> 00:00:49,079
discovered Python and Django in 2010

00:00:45,770 --> 00:00:50,710
please give a warm world warm welcome to

00:00:49,079 --> 00:00:54,350
Marcus

00:00:50,710 --> 00:00:54,350
[Applause]

00:00:56,090 --> 00:01:01,380
good afternoon everybody thanks all for

00:00:59,160 --> 00:01:03,290
coming and thank you for the Python

00:01:01,380 --> 00:01:05,580
organizers for making this happen and

00:01:03,290 --> 00:01:12,270
yeah I think they deserve a round of

00:01:05,580 --> 00:01:15,360
applause and wasn't a lunch grained

00:01:12,270 --> 00:01:16,860
yesterday and today delicious today I

00:01:15,360 --> 00:01:20,370
want to talk to you about logging and

00:01:16,860 --> 00:01:23,910
the wavy look to logging today and all

00:01:20,370 --> 00:01:26,550
the problems that are there or that I

00:01:23,910 --> 00:01:28,740
think are there before I go into the

00:01:26,550 --> 00:01:32,040
depth of this talk let me give you a

00:01:28,740 --> 00:01:35,190
brief introduction about me I'm a Yaris

00:01:32,040 --> 00:01:37,320
or I mentioned member of the Django team

00:01:35,190 --> 00:01:39,270
or the Django team been contributing to

00:01:37,320 --> 00:01:41,610
the Django migration framework after it

00:01:39,270 --> 00:01:44,670
landed but I'm focusing on the security

00:01:41,610 --> 00:01:48,509
and operations systems and parts of the

00:01:44,670 --> 00:01:50,640
Django project these days and in my day

00:01:48,509 --> 00:01:53,550
job I work for criteria which is the

00:01:50,640 --> 00:01:56,910
company behind the open-source big data

00:01:53,550 --> 00:01:59,940
or IOT data machine data database crates

00:01:56,910 --> 00:02:03,270
DB so if you do work in that area or

00:01:59,940 --> 00:02:06,300
interested in IOT sensor data find me

00:02:03,270 --> 00:02:08,340
let's talk about that as well as next

00:02:06,300 --> 00:02:12,450
door or additionally to this topic I'm

00:02:08,340 --> 00:02:14,850
talking about today let me start with

00:02:12,450 --> 00:02:16,800
the problem we are facing we build

00:02:14,850 --> 00:02:18,960
services use per hundreds thousands

00:02:16,800 --> 00:02:22,560
hopefully maybe even millions of people

00:02:18,960 --> 00:02:25,380
every day and hopefully for months and

00:02:22,560 --> 00:02:28,530
years to come and a lot of these

00:02:25,380 --> 00:02:31,560
services run smoothly until they don't

00:02:28,530 --> 00:02:34,410
and when they don't somebody is probably

00:02:31,560 --> 00:02:36,569
going to be woken up at woken up at 3:00

00:02:34,410 --> 00:02:39,630
a.m. at night and needs to figure out

00:02:36,569 --> 00:02:41,490
what's wrong and the approach we have

00:02:39,630 --> 00:02:43,380
these days in order to get this done and

00:02:41,490 --> 00:02:46,440
figure out what's wrong if we look at

00:02:43,380 --> 00:02:48,480
log files and lock messages and then try

00:02:46,440 --> 00:02:50,850
to figure out what actually happened and

00:02:48,480 --> 00:02:54,660
how to fix that and how to go from there

00:02:50,850 --> 00:02:56,790
and when we write Python applications

00:02:54,660 --> 00:02:58,500
and want to do that and want to do

00:02:56,790 --> 00:03:02,159
logging and write lock messages

00:02:58,500 --> 00:03:04,769
information to wherever we do probably

00:03:02,159 --> 00:03:05,810
use the Python standard library built in

00:03:04,769 --> 00:03:08,120
logging framework

00:03:05,810 --> 00:03:10,580
and that looks probably a bit like this

00:03:08,120 --> 00:03:13,220
we import logging we create a logo with

00:03:10,580 --> 00:03:16,370
some name and then we do local dot error

00:03:13,220 --> 00:03:20,240
and some message and provides some

00:03:16,370 --> 00:03:24,110
arguments that we put in there this is

00:03:20,240 --> 00:03:25,880
great all the important information in

00:03:24,110 --> 00:03:29,420
there because in this for example in

00:03:25,880 --> 00:03:31,520
this car example well we log in or user

00:03:29,420 --> 00:03:33,470
probably tries to log in and there's

00:03:31,520 --> 00:03:36,230
some connectivity issue we have a bit of

00:03:33,470 --> 00:03:38,900
context and information and the message

00:03:36,230 --> 00:03:41,810
that is comprehensible and yeah contains

00:03:38,900 --> 00:03:43,489
a lot of information that we can use we

00:03:41,810 --> 00:03:45,770
lock the message to a file or some

00:03:43,489 --> 00:03:47,930
servers network whatever the

00:03:45,770 --> 00:03:51,410
infrastructure requires and desires and

00:03:47,930 --> 00:03:53,660
then something like this comes out of it

00:03:51,410 --> 00:03:55,670
so logging field because connection to

00:03:53,660 --> 00:03:58,250
an authentication provider Google timed

00:03:55,670 --> 00:03:59,300
out this happen at that particular time

00:03:58,250 --> 00:04:02,150
it's an error

00:03:59,300 --> 00:04:03,590
it happened on server or one there's a

00:04:02,150 --> 00:04:05,120
lot of information there if you didn't

00:04:03,590 --> 00:04:07,220
put there explicitly that happened to

00:04:05,120 --> 00:04:09,200
show up this is great we can do a lot of

00:04:07,220 --> 00:04:11,750
things with this because we can now log

00:04:09,200 --> 00:04:13,880
into server one and see what happened

00:04:11,750 --> 00:04:15,820
and maybe look for a lot more what

00:04:13,880 --> 00:04:18,260
message to all see if we can find

00:04:15,820 --> 00:04:23,240
whatever might be the problem on this

00:04:18,260 --> 00:04:25,729
machine but the problem is finding this

00:04:23,240 --> 00:04:29,330
log message is actually tricky and hard

00:04:25,729 --> 00:04:32,330
and the bigger problem in the first

00:04:29,330 --> 00:04:36,290
place because when you run a bunch of

00:04:32,330 --> 00:04:38,300
machines and figuring oh oh one that's

00:04:36,290 --> 00:04:41,600
probably more than ten or more than nine

00:04:38,300 --> 00:04:44,270
because it's two digit numbers and you

00:04:41,600 --> 00:04:46,700
will try to need to find this message

00:04:44,270 --> 00:04:49,880
among a hundred thousand other messages

00:04:46,700 --> 00:04:54,380
messages so finding this one message is

00:04:49,880 --> 00:04:57,770
actually key problem and if you then

00:04:54,380 --> 00:05:01,430
found that it's up to you to deduce the

00:04:57,770 --> 00:05:03,110
actual meaning of this message and well

00:05:01,430 --> 00:05:05,570
most of you are probably in English

00:05:03,110 --> 00:05:07,760
native speakers or have been speaking

00:05:05,570 --> 00:05:09,050
English for a long time and are good at

00:05:07,760 --> 00:05:12,320
speaking English but there's a bunch of

00:05:09,050 --> 00:05:14,120
engineers out there who are not so for

00:05:12,320 --> 00:05:16,280
them if they have decent enough English

00:05:14,120 --> 00:05:18,290
skills they can figure that out as well

00:05:16,280 --> 00:05:21,000
if they are not

00:05:18,290 --> 00:05:21,480
well that's a bit of nation that's a bit

00:05:21,000 --> 00:05:24,810
of a problem

00:05:21,480 --> 00:05:26,910
and well we probably should figure out a

00:05:24,810 --> 00:05:28,700
way for them to be able to do that as

00:05:26,910 --> 00:05:32,940
well if they work in an international

00:05:28,700 --> 00:05:36,840
organization or company but I think

00:05:32,940 --> 00:05:40,110
moreover this way of rocking itself is

00:05:36,840 --> 00:05:44,670
broken because it's not actually very

00:05:40,110 --> 00:05:48,210
helpful because these messages like a

00:05:44,670 --> 00:05:50,220
key set of information there's a bunch

00:05:48,210 --> 00:05:52,830
of stuff that this message doesn't not

00:05:50,220 --> 00:05:54,950
contain that would actually be helpful

00:05:52,830 --> 00:05:57,570
when I try to figure out what went wrong

00:05:54,950 --> 00:06:00,000
for example what the IP and when the

00:05:57,570 --> 00:06:01,020
host was but this server tried to

00:06:00,000 --> 00:06:04,860
connect to in the first place

00:06:01,020 --> 00:06:05,460
and what was the timeout limit in the

00:06:04,860 --> 00:06:08,040
first place

00:06:05,460 --> 00:06:10,680
was it a millisecond or was it five

00:06:08,040 --> 00:06:12,870
minutes there's a bit of a difference

00:06:10,680 --> 00:06:15,300
and depending on your data and that set

00:06:12,870 --> 00:06:17,340
up on network setup and milliseconds is

00:06:15,300 --> 00:06:20,970
probably too short five minutes is

00:06:17,340 --> 00:06:23,190
probably too long and there's a bunch of

00:06:20,970 --> 00:06:26,040
things made that we didn't contain there

00:06:23,190 --> 00:06:27,710
and how many other attempts were made to

00:06:26,040 --> 00:06:31,950
that service in the first place that

00:06:27,710 --> 00:06:34,860
possibly failed as well as well and was

00:06:31,950 --> 00:06:36,630
it only to that service that something

00:06:34,860 --> 00:06:39,480
failed or were there other services

00:06:36,630 --> 00:06:42,870
involved and was it only that that one

00:06:39,480 --> 00:06:45,660
server that failed or and maybe the

00:06:42,870 --> 00:06:48,290
entire fleet had problems and this is

00:06:45,660 --> 00:06:52,910
all information that you can't really

00:06:48,290 --> 00:06:58,290
well derive from that string of text

00:06:52,910 --> 00:07:00,810
this it's true pros there's no structure

00:06:58,290 --> 00:07:04,110
there so how about we had some structure

00:07:00,810 --> 00:07:08,610
to our logs because once we have

00:07:04,110 --> 00:07:11,970
structure we can use software to take

00:07:08,610 --> 00:07:15,420
this structural information and do

00:07:11,970 --> 00:07:17,670
something with it and analyze this these

00:07:15,420 --> 00:07:23,550
lock messages and analyze whatever is

00:07:17,670 --> 00:07:25,950
there and yeah there's a Python library

00:07:23,550 --> 00:07:28,170
order of their codes to our clock which

00:07:25,950 --> 00:07:30,300
looks very very similar to Python

00:07:28,170 --> 00:07:31,940
standard library so instead of doing

00:07:30,300 --> 00:07:35,510
import logging you do

00:07:31,940 --> 00:07:39,290
let's try clock you create a locker and

00:07:35,510 --> 00:07:41,030
you lose lager dot error throw in an

00:07:39,290 --> 00:07:43,430
action or an event or whatever you want

00:07:41,030 --> 00:07:45,320
to call it and then a bunch of key value

00:07:43,430 --> 00:07:50,690
pairs for additional information you

00:07:45,320 --> 00:07:53,180
want to contain in your bot message you

00:07:50,690 --> 00:07:55,640
can print this to a command line or to a

00:07:53,180 --> 00:07:59,500
text file if you fall for your user

00:07:55,640 --> 00:08:03,950
interactions in a user interaction

00:07:59,500 --> 00:08:05,180
environment TTY or what not and this is

00:08:03,950 --> 00:08:06,830
something you can really still read it

00:08:05,180 --> 00:08:12,320
still contains the same information in

00:08:06,830 --> 00:08:15,170
fact it even contains more and when you

00:08:12,320 --> 00:08:17,360
do structured locking and then think

00:08:15,170 --> 00:08:20,060
about a locks aggregator lock service

00:08:17,360 --> 00:08:22,040
that collects all the locks you want and

00:08:20,060 --> 00:08:27,940
you have structured and you probably

00:08:22,040 --> 00:08:31,700
want some universally used structural

00:08:27,940 --> 00:08:36,050
type or encoding like I don't know maybe

00:08:31,700 --> 00:08:38,930
Jason you see this looks just the same

00:08:36,050 --> 00:08:41,930
as before but it contains all the same

00:08:38,930 --> 00:08:44,720
information but now because we have

00:08:41,930 --> 00:08:47,810
logging we have Jason or some structural

00:08:44,720 --> 00:08:51,350
data we can take the structural data and

00:08:47,810 --> 00:08:55,280
put it into database that can deal with

00:08:51,350 --> 00:08:57,350
that try to be elastic whatever is

00:08:55,280 --> 00:08:59,540
out there post Chris Jason field doesn't

00:08:57,350 --> 00:09:01,640
really matter because once you have the

00:08:59,540 --> 00:09:04,670
structural deep data and once you have

00:09:01,640 --> 00:09:07,130
it in a place that can deal with lots of

00:09:04,670 --> 00:09:11,330
this information you can suddenly print

00:09:07,130 --> 00:09:14,060
and draw this whole thing so what you

00:09:11,330 --> 00:09:15,320
see is what you understand because when

00:09:14,060 --> 00:09:18,080
we think about the questions we had

00:09:15,320 --> 00:09:21,560
before when you look at these graphs

00:09:18,080 --> 00:09:25,030
that you now can suddenly generate and

00:09:21,560 --> 00:09:29,270
create and draw with tools like Ravana

00:09:25,030 --> 00:09:32,140
you see that the yellow spike will not

00:09:29,270 --> 00:09:36,410
be a singular incident you see that it's

00:09:32,140 --> 00:09:39,830
what is 40-something events at the top

00:09:36,410 --> 00:09:42,740
where something went wrong all the green

00:09:39,830 --> 00:09:45,410
messages are successful authentication

00:09:42,740 --> 00:09:48,470
requests and you can see a pet

00:09:45,410 --> 00:09:50,359
throughout the day and the yellow one is

00:09:48,470 --> 00:09:53,509
pretty much just at the bottom that's

00:09:50,359 --> 00:09:55,999
this general noise that failed that's

00:09:53,509 --> 00:09:58,879
fine let's call it that but then this

00:09:55,999 --> 00:10:02,179
spike around 12 p.m. or 12:30

00:09:58,879 --> 00:10:04,159
yes something went wrong and you see

00:10:02,179 --> 00:10:05,479
that by looking at the graph you don't

00:10:04,159 --> 00:10:08,839
even need to scroll through a billion

00:10:05,479 --> 00:10:12,259
records of locks so I think this is far

00:10:08,839 --> 00:10:17,449
more suitable and far more useable to

00:10:12,259 --> 00:10:20,209
any engineer who needs to look at when

00:10:17,449 --> 00:10:23,709
something possibly happened and get a

00:10:20,209 --> 00:10:26,329
better feeling for what happened and

00:10:23,709 --> 00:10:27,709
because a picture says more than a

00:10:26,329 --> 00:10:29,449
thousand words and it's not just a

00:10:27,709 --> 00:10:33,019
saying it actually is the case in this

00:10:29,449 --> 00:10:35,179
in this particular case now when we look

00:10:33,019 --> 00:10:37,579
at different looks and different

00:10:35,179 --> 00:10:40,669
messages and aggregate them or draw them

00:10:37,579 --> 00:10:45,439
slightly differently we get for example

00:10:40,669 --> 00:10:47,839
this graph now the blue line which again

00:10:45,439 --> 00:10:50,959
still represents the the daily pattern

00:10:47,839 --> 00:10:53,659
of requests that can come in a debug

00:10:50,959 --> 00:10:56,269
messages yeah I guess that you expect

00:10:53,659 --> 00:11:00,979
this graph to follow your daily routine

00:10:56,269 --> 00:11:03,619
of visitors but under the green the

00:11:00,979 --> 00:11:07,269
green line at the bottom our info locks

00:11:03,619 --> 00:11:11,359
and yeah maybe this is not the best

00:11:07,269 --> 00:11:16,639
mocked up image there but it's just a

00:11:11,359 --> 00:11:18,549
general general line of or mostly a

00:11:16,639 --> 00:11:21,799
horizontal line of messages that come in

00:11:18,549 --> 00:11:24,079
there's nothing wrong with that but then

00:11:21,799 --> 00:11:27,409
all the sudden you have this red spike

00:11:24,079 --> 00:11:31,369
there and when you look at it closely

00:11:27,409 --> 00:11:35,539
you see that it goes up from 12 to 12 or

00:11:31,369 --> 00:11:38,119
5 or whatever by just a tiny bit now

00:11:35,539 --> 00:11:42,019
when you do operations in a company and

00:11:38,119 --> 00:11:44,149
you see something like this depend you

00:11:42,019 --> 00:11:47,749
could imagine that somebody did

00:11:44,149 --> 00:11:49,339
something at 12 that broke something so

00:11:47,749 --> 00:11:53,559
possibly a configuration change that's

00:11:49,339 --> 00:11:56,119
screwed up a single server okay

00:11:53,559 --> 00:11:58,180
hopefully your continuous delivery would

00:11:56,119 --> 00:12:01,870
have called that

00:11:58,180 --> 00:12:04,660
parently didn't because then it's 15 you

00:12:01,870 --> 00:12:08,220
see it this error rate go up a bit more

00:12:04,660 --> 00:12:11,140
even more and now this is positive

00:12:08,220 --> 00:12:12,460
probably been the threshold when this

00:12:11,140 --> 00:12:14,380
error was caught in your continuous

00:12:12,460 --> 00:12:16,300
delivery either go rollback or bought

00:12:14,380 --> 00:12:19,959
the whole thing the whole deployment

00:12:16,300 --> 00:12:21,220
process it didn't maybe because you

00:12:19,959 --> 00:12:23,830
don't have continuous delivery and you

00:12:21,220 --> 00:12:25,540
don't look at locs and you do the whole

00:12:23,830 --> 00:12:31,570
fleet pretty much over after server

00:12:25,540 --> 00:12:36,970
yourself manually so at 12:30 or you go

00:12:31,570 --> 00:12:41,880
up there and everything fails that's sad

00:12:36,970 --> 00:12:45,670
you don't want that so when you do have

00:12:41,880 --> 00:12:49,120
structured logs you can do you can

00:12:45,670 --> 00:12:51,580
another analyze the amount of logs that

00:12:49,120 --> 00:12:53,860
come in with errors and add thresholds

00:12:51,580 --> 00:12:56,709
and monitoring alerting to those

00:12:53,860 --> 00:12:58,180
thresholds and this is very specific to

00:12:56,709 --> 00:13:00,220
your environment and very specific to

00:12:58,180 --> 00:13:03,940
your particular use case of where you

00:13:00,220 --> 00:13:06,520
log what you log and so on but the idea

00:13:03,940 --> 00:13:08,860
here is that again once you have a

00:13:06,520 --> 00:13:11,320
diagram in the graph that shows you hey

00:13:08,860 --> 00:13:14,860
there's something wrong you can look at

00:13:11,320 --> 00:13:17,820
it and you are within seconds you could

00:13:14,860 --> 00:13:20,170
within seconds you see something's up

00:13:17,820 --> 00:13:22,480
now this is one part of logging of

00:13:20,170 --> 00:13:25,209
structural logging this is one that's

00:13:22,480 --> 00:13:27,670
even more helpful even more interesting

00:13:25,209 --> 00:13:30,130
particularly when you then started

00:13:27,670 --> 00:13:32,709
looking at the actual log messages so

00:13:30,130 --> 00:13:35,620
far we've only looked look at the

00:13:32,709 --> 00:13:37,870
frequency of certain logs when you start

00:13:35,620 --> 00:13:41,709
and do event tracing or lock tracing

00:13:37,870 --> 00:13:43,510
what you do is you add the phone first

00:13:41,709 --> 00:13:46,150
moment you see a request coming into

00:13:43,510 --> 00:13:49,060
your system you give this request a

00:13:46,150 --> 00:13:51,040
unique ID and you take this ID and pass

00:13:49,060 --> 00:13:54,070
it along to any two requests throughout

00:13:51,040 --> 00:13:56,649
the entire system when you do a request

00:13:54,070 --> 00:13:57,880
up post to some other of your services

00:13:56,649 --> 00:14:00,220
to create something in your micro

00:13:57,880 --> 00:14:05,230
service infrastructure go pass this

00:14:00,220 --> 00:14:07,660
request ID or trace ID along if you do

00:14:05,230 --> 00:14:10,150
your whatever refers to an external API

00:14:07,660 --> 00:14:10,950
do that as well if you lock something

00:14:10,150 --> 00:14:14,510
too

00:14:10,950 --> 00:14:18,240
is any of your services past this

00:14:14,510 --> 00:14:20,940
lockness ID along because all the sudden

00:14:18,240 --> 00:14:24,510
all these log messages you can then

00:14:20,940 --> 00:14:27,360
filter on this ID and because locks are

00:14:24,510 --> 00:14:29,640
chronological by time assuming that

00:14:27,360 --> 00:14:34,140
times are synchronized across all

00:14:29,640 --> 00:14:37,230
servers all the sudden you can just look

00:14:34,140 --> 00:14:39,540
for all lock messages correlating to

00:14:37,230 --> 00:14:41,730
this one ID get sawed them in

00:14:39,540 --> 00:14:43,670
chronological order and see what

00:14:41,730 --> 00:14:47,550
actually happened and can trace back

00:14:43,670 --> 00:14:53,190
what your system did because assumingly

00:14:47,550 --> 00:14:58,250
you have proper logging so with this we

00:14:53,190 --> 00:15:01,230
can do and we can make sure that all the

00:14:58,250 --> 00:15:04,040
micro services that we've built and that

00:15:01,230 --> 00:15:07,620
we've created and interconnected our

00:15:04,040 --> 00:15:10,170
actually providing locks that are

00:15:07,620 --> 00:15:12,590
meaningful when you collect them and

00:15:10,170 --> 00:15:15,360
aggregate them and put them together and

00:15:12,590 --> 00:15:18,230
I'm not sure how many of you here use

00:15:15,360 --> 00:15:22,020
Django I have used Django in the past

00:15:18,230 --> 00:15:23,880
that's a fair bit when you want to do

00:15:22,020 --> 00:15:26,030
that in Django and want to create one of

00:15:23,880 --> 00:15:29,400
those lock IDs or trace IDs

00:15:26,030 --> 00:15:32,970
you can you need to you can use a

00:15:29,400 --> 00:15:36,930
middleware like this it takes the

00:15:32,970 --> 00:15:38,700
request it either takes the request ID -

00:15:36,930 --> 00:15:41,730
and it's when the incoming requests

00:15:38,700 --> 00:15:43,650
already has one or it creates a new one

00:15:41,730 --> 00:15:46,320
puts it on a request object and then

00:15:43,650 --> 00:15:48,470
whenever you do something somewhere down

00:15:46,320 --> 00:15:52,830
there down the line in your application

00:15:48,470 --> 00:15:54,150
you have to trace out the available but

00:15:52,830 --> 00:15:55,680
furthermore the interest that's the

00:15:54,150 --> 00:15:58,050
interesting part about struct look at

00:15:55,680 --> 00:15:59,940
this point where it goes far beyond what

00:15:58,050 --> 00:16:03,390
the Python standard library can do you

00:15:59,940 --> 00:16:07,170
see this logger new here struct rock has

00:16:03,390 --> 00:16:07,890
this thread safe straight local logger

00:16:07,170 --> 00:16:12,810
instance

00:16:07,890 --> 00:16:15,660
so in this middleware for every request

00:16:12,810 --> 00:16:18,000
we recreate the logger object and attach

00:16:15,660 --> 00:16:19,580
some information to this blogger and

00:16:18,000 --> 00:16:22,200
every message this log is going to write

00:16:19,580 --> 00:16:23,280
will have this trace ID in there you

00:16:22,200 --> 00:16:25,020
don't need to pass it along

00:16:23,280 --> 00:16:27,270
extra by everything

00:16:25,020 --> 00:16:30,660
time you lock something it's just gonna

00:16:27,270 --> 00:16:33,720
be there and similarly when you for

00:16:30,660 --> 00:16:35,550
example want to lock the county locked

00:16:33,720 --> 00:16:38,070
in use ID you can do something similar

00:16:35,550 --> 00:16:39,779
if the user is authenticated you bind

00:16:38,070 --> 00:16:42,690
this additional information to the

00:16:39,779 --> 00:16:44,160
current logger and it's just gonna be

00:16:42,690 --> 00:16:45,839
locked every single time you lock

00:16:44,160 --> 00:16:48,240
something you don't need to worry about

00:16:45,839 --> 00:16:51,510
that anymore and with that you can

00:16:48,240 --> 00:16:53,490
create contexts and all kinds of nice

00:16:51,510 --> 00:16:56,820
and shiny things you want to call it

00:16:53,490 --> 00:16:59,250
like that that's so awful lot of I think

00:16:56,820 --> 00:17:01,560
problems when you do logging because you

00:16:59,250 --> 00:17:04,110
don't need to worry about oh I should

00:17:01,560 --> 00:17:07,050
have added this variable to the lock

00:17:04,110 --> 00:17:09,209
message and now the problem occurs and I

00:17:07,050 --> 00:17:12,240
have no clue what it was so once you

00:17:09,209 --> 00:17:14,339
attach it it's there and because we

00:17:12,240 --> 00:17:16,949
create the middle the new log every

00:17:14,339 --> 00:17:19,620
single request that comes in it's fine

00:17:16,949 --> 00:17:21,660
because the previous requests of blaga

00:17:19,620 --> 00:17:23,839
is going to be overwritten and thus

00:17:21,660 --> 00:17:26,910
you're not leaking data across request

00:17:23,839 --> 00:17:31,890
now with logging all this interesting

00:17:26,910 --> 00:17:33,740
and all this helpful information we do

00:17:31,890 --> 00:17:39,480
have a bit of a problem at least since

00:17:33,740 --> 00:17:41,490
August not August May last year who

00:17:39,480 --> 00:17:43,640
remembers what happened on May 25th last

00:17:41,490 --> 00:17:43,640
year

00:17:45,890 --> 00:17:53,850
exactly we do have European users and

00:17:48,420 --> 00:17:55,710
one high if you log information make

00:17:53,850 --> 00:17:57,210
sure your log information or when you

00:17:55,710 --> 00:17:58,620
store information make sure you store

00:17:57,210 --> 00:18:01,530
information log information that you are

00:17:58,620 --> 00:18:03,630
allowed to store and lock because that's

00:18:01,530 --> 00:18:07,110
probably something that you very likely

00:18:03,630 --> 00:18:12,420
should not are not allowed to do and but

00:18:07,110 --> 00:18:14,910
even more so and this is don't lock ever

00:18:12,420 --> 00:18:17,640
any secrets ever unless you want to show

00:18:14,910 --> 00:18:21,660
up in a list of companies like Facebook

00:18:17,640 --> 00:18:23,880
github Twitter so it seems to be common

00:18:21,660 --> 00:18:25,590
practice by some of those large

00:18:23,880 --> 00:18:28,380
organizations that logging secrets is a

00:18:25,590 --> 00:18:33,540
good idea and I would recommend against

00:18:28,380 --> 00:18:37,559
that and it's not so be explicit with

00:18:33,540 --> 00:18:38,430
what you lock and make sure that the

00:18:37,559 --> 00:18:43,650
lock the

00:18:38,430 --> 00:18:45,750
the stuff you log is what the wherever

00:18:43,650 --> 00:18:49,920
you log something is secure and safe and

00:18:45,750 --> 00:18:52,110
not like this good open as AWS three

00:18:49,920 --> 00:18:56,400
packets that have also become common

00:18:52,110 --> 00:18:58,860
practice and yeah be explicit when

00:18:56,400 --> 00:19:02,970
whatever you lock because this will end

00:18:58,860 --> 00:19:06,060
up on some storage and for better or

00:19:02,970 --> 00:19:08,400
worse we'll eventually maybe be exposed

00:19:06,060 --> 00:19:13,670
to somebody who shouldn't have access so

00:19:08,400 --> 00:19:16,500
when you lock something then it's then

00:19:13,670 --> 00:19:18,090
do the former because then you are

00:19:16,500 --> 00:19:19,620
explicit I want to lock the fool

00:19:18,090 --> 00:19:21,870
objecting with this string and the lure

00:19:19,620 --> 00:19:24,780
and and Lauren with that string the

00:19:21,870 --> 00:19:27,320
lower one whatever you slap onto that

00:19:24,780 --> 00:19:30,330
object will end up in the locks and

00:19:27,320 --> 00:19:37,350
trust me you do not know what's on the

00:19:30,330 --> 00:19:41,600
objects you suddenly start lock now who

00:19:37,350 --> 00:19:44,670
the heck is Frank Taylor jr. let me

00:19:41,600 --> 00:19:47,070
answer this question by asking who in

00:19:44,670 --> 00:19:51,420
the room knows the movie catch me if you

00:19:47,070 --> 00:19:51,960
can yep that's a few more than I

00:19:51,420 --> 00:19:55,890
expected

00:19:51,960 --> 00:19:58,080
ok that's good so there was this main

00:19:55,890 --> 00:19:59,910
character in this this movie called

00:19:58,080 --> 00:20:02,570
which is young if it's a cop young con

00:19:59,910 --> 00:20:06,300
artist called Frank William Abagnale and

00:20:02,570 --> 00:20:09,510
he figures out several cons to play and

00:20:06,300 --> 00:20:12,840
airlines hotels banks and all kinds of

00:20:09,510 --> 00:20:14,700
companies and organizations and the

00:20:12,840 --> 00:20:17,790
problem essentially is that nobody's

00:20:14,700 --> 00:20:21,630
able to trace him until years to come

00:20:17,790 --> 00:20:23,520
and this is one of the one of the things

00:20:21,630 --> 00:20:25,860
there that is very interesting and very

00:20:23,520 --> 00:20:29,010
well explained in the movie I think it's

00:20:25,860 --> 00:20:32,010
for example the way how he uses and

00:20:29,010 --> 00:20:34,980
forges checks that are used in the

00:20:32,010 --> 00:20:38,850
United States very much at that point I

00:20:34,980 --> 00:20:41,610
understand still so what he does is for

00:20:38,850 --> 00:20:43,800
example that he changes the ABA routing

00:20:41,610 --> 00:20:47,460
number on those checks to for example

00:20:43,800 --> 00:20:51,470
make Oh to which refers to the New York

00:20:47,460 --> 00:20:54,590
on the East Coast to change it to a 1/2

00:20:51,470 --> 00:20:56,710
so 212 which means the check would have

00:20:54,590 --> 00:21:00,590
been issued by a bank on the west coast

00:20:56,710 --> 00:21:02,990
now back in the days that meant that

00:21:00,590 --> 00:21:06,080
this check was going to be physically

00:21:02,990 --> 00:21:09,409
transported from the one coast all the

00:21:06,080 --> 00:21:11,299
way to the other until then the bank on

00:21:09,409 --> 00:21:13,909
the other side of the country said yeah

00:21:11,299 --> 00:21:15,679
now this is not a valid check at which

00:21:13,909 --> 00:21:17,840
point is going to go back all the way to

00:21:15,679 --> 00:21:21,730
the East Coast where it was issued or

00:21:17,840 --> 00:21:25,340
was was brought into the system and oh

00:21:21,730 --> 00:21:28,759
this is not a valid check well I guess

00:21:25,340 --> 00:21:31,100
we haven't been paid then so by figuring

00:21:28,759 --> 00:21:33,169
this out and figuring out how long it

00:21:31,100 --> 00:21:35,629
took for this checks to go all through

00:21:33,169 --> 00:21:37,519
the country and coming back he was able

00:21:35,629 --> 00:21:40,370
to reuse Tex was wrong

00:21:37,519 --> 00:21:43,159
check ID or check numbers in one place

00:21:40,370 --> 00:21:44,870
for quite a while until he moved on and

00:21:43,159 --> 00:21:48,590
then on and on and on again until you

00:21:44,870 --> 00:21:50,330
came back to a walls and yeah there was

00:21:48,590 --> 00:21:53,779
a kind of an interesting aspect and

00:21:50,330 --> 00:21:55,549
perspective on how to four checks but

00:21:53,779 --> 00:21:59,149
not even that he was able to figure out

00:21:55,549 --> 00:22:01,730
that some checks are accepted by some

00:21:59,149 --> 00:22:05,419
companies or by hotel my payment checks

00:22:01,730 --> 00:22:08,240
from by Airlines are more worth than or

00:22:05,419 --> 00:22:10,100
more valid and then some other pay slips

00:22:08,240 --> 00:22:12,559
or pay checks from other companies and

00:22:10,100 --> 00:22:16,309
that's what held accept them to a higher

00:22:12,559 --> 00:22:18,259
amount than others and all that by

00:22:16,309 --> 00:22:20,090
observing and all that was possible

00:22:18,259 --> 00:22:25,940
because nobody was able to trace him for

00:22:20,090 --> 00:22:29,320
quite a while now that's pretty much the

00:22:25,940 --> 00:22:31,399
end of the talk except for I have a demo

00:22:29,320 --> 00:22:35,360
actually I have an example because I'm

00:22:31,399 --> 00:22:37,460
afraid of live demos so I have this

00:22:35,360 --> 00:22:41,179
bucket on post set up in a github

00:22:37,460 --> 00:22:46,490
repository that you can see here get lab

00:22:41,179 --> 00:22:51,409
so I get lab which contains essentially

00:22:46,490 --> 00:22:54,830
a creative instance graph Anna and then

00:22:51,409 --> 00:22:58,279
to Jango applications that's a very

00:22:54,830 --> 00:23:00,500
fancy very secure banking site where you

00:22:58,279 --> 00:23:02,419
can add money withdraw money but also

00:23:00,500 --> 00:23:04,470
can wire money between those banks or

00:23:02,419 --> 00:23:06,330
between accounts and

00:23:04,470 --> 00:23:08,909
an airline where you can book flights

00:23:06,330 --> 00:23:11,879
with one of those accounts and then a

00:23:08,909 --> 00:23:15,389
bunch of services in the back and when

00:23:11,879 --> 00:23:17,369
you log in or set this thing up and play

00:23:15,389 --> 00:23:19,799
around with it and go to the graph on

00:23:17,369 --> 00:23:23,629
our dashboard you can see all kinds of

00:23:19,799 --> 00:23:27,960
locks and like graphs show up just as an

00:23:23,629 --> 00:23:31,830
experiment as a bit of an example of how

00:23:27,960 --> 00:23:33,989
the whole thing could look like so this

00:23:31,830 --> 00:23:36,809
is one of the banks this is the a line

00:23:33,989 --> 00:23:39,539
with a bunch of flights booked this is

00:23:36,809 --> 00:23:43,109
the dashboard obviously very usable

00:23:39,539 --> 00:23:48,679
graphs that I was able to produce by

00:23:43,109 --> 00:23:51,720
myself by clicking and browsers database

00:23:48,679 --> 00:23:53,399
look at it create a bit create the admin

00:23:51,720 --> 00:23:56,340
interface there with a bunch of log

00:23:53,399 --> 00:23:58,950
messages and this is the idea here this

00:23:56,340 --> 00:24:02,519
you have your locks stored somewhere and

00:23:58,950 --> 00:24:06,119
now we have shown or talked about all

00:24:02,519 --> 00:24:08,580
this you can visualize your locks and

00:24:06,119 --> 00:24:10,230
the frequency of your logs but also you

00:24:08,580 --> 00:24:12,779
want to be able to see little log

00:24:10,230 --> 00:24:15,059
message itself so what you can then do

00:24:12,779 --> 00:24:17,519
in an admin interface on any query

00:24:15,059 --> 00:24:19,139
interface of your database where or

00:24:17,519 --> 00:24:22,499
walkservice a calculator whatever

00:24:19,139 --> 00:24:25,379
wherever you store the messages you

00:24:22,499 --> 00:24:27,659
query the database for the locks within

00:24:25,379 --> 00:24:32,070
a certain time range and all the

00:24:27,659 --> 00:24:34,049
information is there all right here

00:24:32,070 --> 00:24:38,720
again the link for the for the example

00:24:34,049 --> 00:24:41,600
and yeah I think I'm almost out of time

00:24:38,720 --> 00:24:48,429
not sure thank you

00:24:41,600 --> 00:24:50,570
[Applause]

00:24:48,429 --> 00:24:54,470
Thank You Marcus for a very interesting

00:24:50,570 --> 00:24:57,320
talk thank you thank you have an

00:24:54,470 --> 00:24:59,840
appreciation for attending thank you we

00:24:57,320 --> 00:25:00,380
do have five minutes would you like to

00:24:59,840 --> 00:25:03,640
take questions

00:25:00,380 --> 00:25:03,640
sure sure

00:25:08,990 --> 00:25:12,740
any recommendations on logging

00:25:10,910 --> 00:25:21,080
exceptions and especially change

00:25:12,740 --> 00:25:24,830
exceptions lock them exception would be

00:25:21,080 --> 00:25:27,950
my first choice if you so there's this

00:25:24,830 --> 00:25:32,080
this exception tracing I guess we're in

00:25:27,950 --> 00:25:35,240
the web is probably most common century

00:25:32,080 --> 00:25:37,490
so we do have Sentry hooked up to our

00:25:35,240 --> 00:25:40,429
web services such that whenever there's

00:25:37,490 --> 00:25:44,320
a server error this bubbles up there and

00:25:40,429 --> 00:25:49,929
is handled outside of the regular usual

00:25:44,320 --> 00:25:51,890
exception and error logging and I

00:25:49,929 --> 00:25:54,110
wouldn't object to logging those

00:25:51,890 --> 00:25:57,890
exceptions there and in your usual walk

00:25:54,110 --> 00:25:59,630
messages either you need to serialize

00:25:57,890 --> 00:26:07,940
them some house maybe C or Eliza stack

00:25:59,630 --> 00:26:11,059
trace it's yeah hi

00:26:07,940 --> 00:26:13,549
can you suggest some tool which works

00:26:11,059 --> 00:26:16,760
well with start logging to pass them and

00:26:13,549 --> 00:26:19,190
visualize them so this truck clock uses

00:26:16,760 --> 00:26:21,890
the pattern library that provides the

00:26:19,190 --> 00:26:27,679
interface for your Python code the

00:26:21,890 --> 00:26:32,480
example I have a on here users so struck

00:26:27,679 --> 00:26:35,059
talk has an interface for for printer I

00:26:32,480 --> 00:26:38,150
believe or transformer which are you

00:26:35,059 --> 00:26:41,090
essentially take and convert the whole

00:26:38,150 --> 00:26:42,650
thing to Jason and then dump it using

00:26:41,090 --> 00:26:45,140
Python standard library logging feature

00:26:42,650 --> 00:26:48,410
to dump it into a spooled file order or

00:26:45,140 --> 00:26:52,220
whatever it's called there and then I

00:26:48,410 --> 00:26:55,900
use und to fetch those logs from work

00:26:52,220 --> 00:26:58,580
files and throw them into a crate

00:26:55,900 --> 00:26:59,390
there's heaps of other services that you

00:26:58,580 --> 00:27:07,190
can hook up there

00:26:59,390 --> 00:27:07,820
thank you thanks for the talk it was

00:27:07,190 --> 00:27:10,429
awesome

00:27:07,820 --> 00:27:12,710
I've been having a lot of trouble

00:27:10,429 --> 00:27:14,900
selling the idea of a structural logs

00:27:12,710 --> 00:27:17,510
for developers I have a lot of pushback

00:27:14,900 --> 00:27:19,820
that they say that it's not so

00:27:17,510 --> 00:27:23,450
expressive as you know writing in

00:27:19,820 --> 00:27:25,280
English and while I don't believe that I

00:27:23,450 --> 00:27:27,290
know that they do believe that do you

00:27:25,280 --> 00:27:30,040
have experiences selling these to

00:27:27,290 --> 00:27:30,040
developers

00:27:32,660 --> 00:27:41,390
how do i phrase this can you come back

00:27:35,180 --> 00:27:44,440
to me with the solution for that I'm

00:27:41,390 --> 00:27:48,050
still at a point where I to get this

00:27:44,440 --> 00:27:49,520
world all this mom I'm not quite at a

00:27:48,050 --> 00:27:57,710
point we're just gonna do that overnight

00:27:49,520 --> 00:28:02,060
um have you been into the keynote this

00:27:57,710 --> 00:28:06,130
morning I think it's a very good point

00:28:02,060 --> 00:28:09,800
of it kind of it's a bit new and shiny I

00:28:06,130 --> 00:28:13,040
think my current approaches to to go and

00:28:09,800 --> 00:28:16,520
try through the visualization argue that

00:28:13,040 --> 00:28:19,660
hey I can already see when something is

00:28:16,520 --> 00:28:22,280
about to go horribly wrong we can then

00:28:19,660 --> 00:28:24,770
we have that possibility to mitigate

00:28:22,280 --> 00:28:28,570
something which we don't have right now

00:28:24,770 --> 00:28:32,140
at all so you have this tiny bit of

00:28:28,570 --> 00:28:34,820
pre-emptive risk assessments that you

00:28:32,140 --> 00:28:41,990
yeah that look after today's keynote

00:28:34,820 --> 00:28:43,430
that would be my next attempt poetry

00:28:41,990 --> 00:28:45,110
this is a comment regarding that

00:28:43,430 --> 00:28:53,330
question then I'm happy to take that

00:28:45,110 --> 00:28:54,560
afterwards but okay I was probably hit

00:28:53,330 --> 00:28:57,370
on one more question

00:28:54,560 --> 00:28:57,370
the father

00:29:00,080 --> 00:29:05,100
so just in regards to the structure of

00:29:03,299 --> 00:29:06,840
it you end up with very verbose messages

00:29:05,100 --> 00:29:09,059
and you suggesting that this is great

00:29:06,840 --> 00:29:11,070
for scale applications and one of the

00:29:09,059 --> 00:29:13,470
things we ran into is we had to really

00:29:11,070 --> 00:29:15,149
truncate our messages too in order to be

00:29:13,470 --> 00:29:16,440
able to keep within bandwidth limits and

00:29:15,149 --> 00:29:18,570
things of the services that were using

00:29:16,440 --> 00:29:19,830
for logging across multiple services I'm

00:29:18,570 --> 00:29:21,240
just wondering if you've had an

00:29:19,830 --> 00:29:22,889
experience around that and if you have

00:29:21,240 --> 00:29:24,929
tips or techniques about how to do

00:29:22,889 --> 00:29:26,370
structured logging when you've got it

00:29:24,929 --> 00:29:28,320
we've got to be careful about verbosity

00:29:26,370 --> 00:29:31,639
of your messages you mean did you mean

00:29:28,320 --> 00:29:33,809
did the event IDs or the message of the

00:29:31,639 --> 00:29:36,090
action or whatever you're wrapping a

00:29:33,809 --> 00:29:37,380
JSON structure around you your messages

00:29:36,090 --> 00:29:39,059
when you need to try and keep that

00:29:37,380 --> 00:29:40,289
you've got a lot of extra metadata there

00:29:39,059 --> 00:29:44,070
that you're having to capture which you

00:29:40,289 --> 00:29:47,639
can add up on a scaled system sure

00:29:44,070 --> 00:29:57,210
but I don't see the problem there yet

00:29:47,639 --> 00:29:59,789
anyway I mean it's a matter of how long

00:29:57,210 --> 00:30:01,740
do you need to store your logs and maybe

00:29:59,789 --> 00:30:04,620
you can go at some point and okay we

00:30:01,740 --> 00:30:06,120
want to preserve the some information in

00:30:04,620 --> 00:30:08,789
the locks and you can scrape everything

00:30:06,120 --> 00:30:10,289
else from you you have a job that runs

00:30:08,789 --> 00:30:15,029
through all blockers my work message is

00:30:10,289 --> 00:30:16,620
improve some information yeah

00:30:15,029 --> 00:30:18,000
that's what we have done pool thank you

00:30:16,620 --> 00:30:18,970
very much Marcus for a very interesting

00:30:18,000 --> 00:30:24,739
talk thank you

00:30:18,970 --> 00:30:24,739

YouTube URL: https://www.youtube.com/watch?v=SdfEsPEPOEg


