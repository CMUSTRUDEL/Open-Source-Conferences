Title: "Opening Doors with JSON Web Tokens" - Ben Dechrai (PyCon AU 2019)
Publication date: 2019-08-02
Playlist: PyCon Australia 2019
Description: 
	Ben Dechrai

As the old saying goes, when one door closes, it can only be reopened when identify yourself with a valid JSON Web Token.This talk introduces JWT, secure authentication, and delegated authority, to demonstrate how to secure IoT devices without exposing them to the internet.

https://2019.pycon-au.org/talks/opening-doors-with-json-web-tokens

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 2 - 6 2019.

Video licence: CC BY-NC-SA 4.0 - https://creativecommons.org/licenses/by-nc-sa/4.0/

Python, PyCon, PyConAU

Fri Aug  2 09:30:00 2019 at Cockle Bay
Captions: 
	00:00:00,000 --> 00:00:07,549
Bend's much better at that than I am so

00:00:02,250 --> 00:00:07,549
let's give him a round welcome thank you

00:00:07,849 --> 00:00:13,230
thanks both something you mentioned

00:00:10,800 --> 00:00:14,370
about spaces like this being really good

00:00:13,230 --> 00:00:15,960
for people who are interested in

00:00:14,370 --> 00:00:18,539
security but are intimidated by the

00:00:15,960 --> 00:00:19,890
hacker type things really resonates with

00:00:18,539 --> 00:00:21,990
me I think it's a great idea I love the

00:00:19,890 --> 00:00:24,600
fact that these exists and I've been in

00:00:21,990 --> 00:00:27,029
security for I don't know 10 15 years

00:00:24,600 --> 00:00:28,980
and I still don't go to a lot of those

00:00:27,029 --> 00:00:30,510
hacker conferences because they seem to

00:00:28,980 --> 00:00:32,189
be more hardcore and I'd prefer the

00:00:30,510 --> 00:00:33,989
developer scene so thank you for putting

00:00:32,189 --> 00:00:37,500
this on and creating that space for the

00:00:33,989 --> 00:00:40,020
community so as mentioned we have a door

00:00:37,500 --> 00:00:41,879
my name is Ben deck Roy and I work for

00:00:40,020 --> 00:00:43,590
auth0 I usually have another slide that

00:00:41,879 --> 00:00:45,300
I was just about to show you with a

00:00:43,590 --> 00:00:49,020
picture of my mug but it's right here so

00:00:45,300 --> 00:00:52,289
I didn't need that slide I want to talk

00:00:49,020 --> 00:00:53,600
to you today about security naturally

00:00:52,289 --> 00:00:56,640
that's why we're here

00:00:53,600 --> 00:00:59,280
specifically thinking of different ways

00:00:56,640 --> 00:01:00,870
of how we can use existing security

00:00:59,280 --> 00:01:02,370
models to secure things that perhaps we

00:01:00,870 --> 00:01:04,379
haven't thought of before or things that

00:01:02,370 --> 00:01:06,960
we have tried to secure as in the case

00:01:04,379 --> 00:01:09,180
of the Amazon lock that didn't work out

00:01:06,960 --> 00:01:11,369
so well so let's have a look at a couple

00:01:09,180 --> 00:01:12,990
of examples I'm picking on Amazon lock

00:01:11,369 --> 00:01:15,960
here only because they were the ones

00:01:12,990 --> 00:01:17,070
that kind of almost pioneer the space or

00:01:15,960 --> 00:01:19,710
at least they were the work third the

00:01:17,070 --> 00:01:21,330
organization that were the the most

00:01:19,710 --> 00:01:23,610
public about creating an

00:01:21,330 --> 00:01:26,520
internet-connected door lock to

00:01:23,610 --> 00:01:28,530
facilitate the delivery of your goods

00:01:26,520 --> 00:01:29,880
behind your door and my understanding is

00:01:28,530 --> 00:01:31,560
that it was more prevalent in the u.s.

00:01:29,880 --> 00:01:33,420
there are certain areas where people

00:01:31,560 --> 00:01:34,950
will drive by another as a package on a

00:01:33,420 --> 00:01:37,079
doorstep they'll just get out of their

00:01:34,950 --> 00:01:38,159
car and take it and drive away I don't

00:01:37,079 --> 00:01:39,509
think we have that much of a problem

00:01:38,159 --> 00:01:41,549
with that in Australia but if the

00:01:39,509 --> 00:01:43,890
solution that Amazon were trying to

00:01:41,549 --> 00:01:46,350
create was to allow people to have

00:01:43,890 --> 00:01:47,850
deliveries made securely and left behind

00:01:46,350 --> 00:01:50,430
their door so that nobody could steal

00:01:47,850 --> 00:01:51,210
them which was a great idea obviously

00:01:50,430 --> 00:01:53,070
there were some technical

00:01:51,210 --> 00:01:56,219
implementations of fell a bit short so

00:01:53,070 --> 00:01:57,990
the first one happened in November 2017

00:01:56,219 --> 00:02:00,600
this was I think about three months

00:01:57,990 --> 00:02:03,390
after or two months after Amazon lock

00:02:00,600 --> 00:02:07,680
first got released or at least went into

00:02:03,390 --> 00:02:12,000
public use and the the issue with it was

00:02:07,680 --> 00:02:13,480
that a rogue courier who had access to

00:02:12,000 --> 00:02:16,060
your house would be able to

00:02:13,480 --> 00:02:19,209
get further access to your house without

00:02:16,060 --> 00:02:21,129
you knowing so let's take a step through

00:02:19,209 --> 00:02:23,769
about how it was supposed to work on

00:02:21,129 --> 00:02:26,080
what actually happened so you have a

00:02:23,769 --> 00:02:28,030
door it's your home you've got a

00:02:26,080 --> 00:02:29,620
delivery coming so the delivery driver

00:02:28,030 --> 00:02:31,390
comes along in their truck and gets out

00:02:29,620 --> 00:02:32,590
and they've got a package to deliver so

00:02:31,390 --> 00:02:34,690
what would happen is they'd get their

00:02:32,590 --> 00:02:36,730
mobile device out which will connect off

00:02:34,690 --> 00:02:39,130
to the cloud to an Amazon service

00:02:36,730 --> 00:02:40,180
somewhere in order to say I'm at the

00:02:39,130 --> 00:02:41,799
place where I'm supposed to make a

00:02:40,180 --> 00:02:45,580
delivery and I need access to the house

00:02:41,799 --> 00:02:46,870
a code would be sent back to the device

00:02:45,580 --> 00:02:49,000
which would be then transmitted via

00:02:46,870 --> 00:02:50,230
bluetooth to the door and the door would

00:02:49,000 --> 00:02:53,110
then make a connection to the Internet

00:02:50,230 --> 00:02:55,090
to say I've just received this request

00:02:53,110 --> 00:02:57,940
for open and the Amazon service would

00:02:55,090 --> 00:02:59,530
say yes you're fine to open so the final

00:02:57,940 --> 00:03:03,090
level of control was that the cloud

00:02:59,530 --> 00:03:06,640
service saying yes a simple boolean or a

00:03:03,090 --> 00:03:08,739
confirmation code of some sort so the

00:03:06,640 --> 00:03:11,290
issue is that also those there's a

00:03:08,739 --> 00:03:12,610
camera so you could choose there's an

00:03:11,290 --> 00:03:14,110
optional extra to install a camera

00:03:12,610 --> 00:03:15,940
inside their house you usually put it on

00:03:14,110 --> 00:03:17,319
like a table near the front door so that

00:03:15,940 --> 00:03:19,540
you can actually get footage of the door

00:03:17,319 --> 00:03:21,489
being opened delivery being left and the

00:03:19,540 --> 00:03:23,260
door being closed again and if you're at

00:03:21,489 --> 00:03:24,730
all interested in watching these kind of

00:03:23,260 --> 00:03:26,380
videos there are there are some on

00:03:24,730 --> 00:03:28,780
YouTube they're highly interesting and

00:03:26,380 --> 00:03:30,310
usually what happens is because there

00:03:28,780 --> 00:03:32,590
was a lot of concern from Amazon about

00:03:30,310 --> 00:03:34,389
security and privacy of people's homes a

00:03:32,590 --> 00:03:35,620
lot of them will not actually look

00:03:34,389 --> 00:03:36,880
they'll just put the package down and

00:03:35,620 --> 00:03:37,900
close the door again and not even look

00:03:36,880 --> 00:03:39,190
in the house in case I don't know

00:03:37,900 --> 00:03:40,840
there's somebody walking around naked or

00:03:39,190 --> 00:03:42,819
the cats thrown up or something I'm not

00:03:40,840 --> 00:03:44,859
sure but they wanted to make sure that

00:03:42,819 --> 00:03:46,090
people felt secure and that their

00:03:44,859 --> 00:03:47,799
privacy was being respected to those

00:03:46,090 --> 00:03:49,600
this camera that was allowing people to

00:03:47,799 --> 00:03:52,329
see in real time but also after the fact

00:03:49,600 --> 00:03:56,799
what happened so the way the hack worked

00:03:52,329 --> 00:03:58,840
is that the delivery driver could access

00:03:56,799 --> 00:04:00,489
the door cause at one lock close the

00:03:58,840 --> 00:04:02,230
door again now the way that the doors

00:04:00,489 --> 00:04:03,670
would be locked is through a Bluetooth

00:04:02,230 --> 00:04:05,290
connection again they would send a lock

00:04:03,670 --> 00:04:07,150
signal so the door wouldn't lock

00:04:05,290 --> 00:04:09,250
automatically so what they could do is

00:04:07,150 --> 00:04:12,190
they could close the door and then

00:04:09,250 --> 00:04:14,230
because the the camera was connected via

00:04:12,190 --> 00:04:16,209
Wi-Fi to the home network they would

00:04:14,230 --> 00:04:17,739
just flood the network and create a

00:04:16,209 --> 00:04:19,389
denial of service attack on the access

00:04:17,739 --> 00:04:21,609
point which would mean the camera would

00:04:19,389 --> 00:04:23,950
drop off camera wouldn't have internet

00:04:21,609 --> 00:04:25,150
connection anymore so in a lot of cases

00:04:23,950 --> 00:04:26,349
you'd think well if the camera doesn't

00:04:25,150 --> 00:04:27,220
have internet connection then surely

00:04:26,349 --> 00:04:28,690
when I'm looking at the video

00:04:27,220 --> 00:04:30,310
feed there would be no video feed so I'd

00:04:28,690 --> 00:04:32,560
know there's something wrong but the way

00:04:30,310 --> 00:04:33,910
that they managed the transmission of

00:04:32,560 --> 00:04:36,040
those images was they would take a

00:04:33,910 --> 00:04:38,230
picture every I don't know two or three

00:04:36,040 --> 00:04:39,370
times a second it wasn't a high frame

00:04:38,230 --> 00:04:40,480
rate but you don't need a high frame

00:04:39,370 --> 00:04:42,400
rate for seeing somebody leaving a

00:04:40,480 --> 00:04:43,840
package so we take a photo every now and

00:04:42,400 --> 00:04:45,820
then and they would send it up to a

00:04:43,840 --> 00:04:48,580
service and your device would show you

00:04:45,820 --> 00:04:50,310
the latest photo so what happens when

00:04:48,580 --> 00:04:53,530
the camera goes off line for a minute

00:04:50,310 --> 00:04:55,570
you're showing the latest photo from a

00:04:53,530 --> 00:04:56,830
minute ago where the doors closed

00:04:55,570 --> 00:04:58,150
meanwhile they've opened the door again

00:04:56,830 --> 00:04:59,170
because it's not locked they've gone in

00:04:58,150 --> 00:05:00,490
they've ransacked your house they've

00:04:59,170 --> 00:05:02,950
taken all that and if they're nice

00:05:00,490 --> 00:05:05,980
they'll lock the door on the way out so

00:05:02,950 --> 00:05:07,810
that was the the first issue three

00:05:05,980 --> 00:05:09,390
months later four months later another

00:05:07,810 --> 00:05:11,550
issue came along so they fixed that

00:05:09,390 --> 00:05:14,080
essentially what they did was they

00:05:11,550 --> 00:05:16,450
changed the software so that if the

00:05:14,080 --> 00:05:17,950
there hadn't been a photo sent for like

00:05:16,450 --> 00:05:19,270
ten seconds or so then your device would

00:05:17,950 --> 00:05:20,560
share the show the fact that there was

00:05:19,270 --> 00:05:23,590
no photo so that was their solution to

00:05:20,560 --> 00:05:25,419
that problem then another one came along

00:05:23,590 --> 00:05:27,190
so this one I don't think was actually

00:05:25,419 --> 00:05:28,270
done in real life like nobody was

00:05:27,190 --> 00:05:30,940
actually robbed through this mechanism

00:05:28,270 --> 00:05:32,320
but there was a proof of concept using

00:05:30,940 --> 00:05:34,530
the fact that the Bluetooth connection

00:05:32,320 --> 00:05:36,430
was used to lock and unlock the door

00:05:34,530 --> 00:05:40,240
what would happen is some malicious

00:05:36,430 --> 00:05:42,370
person or some proof of concept white

00:05:40,240 --> 00:05:44,950
hat hacker who had no malicious intent

00:05:42,370 --> 00:05:46,540
would come along and leave a package at

00:05:44,950 --> 00:05:47,650
the side of your door and inside that

00:05:46,540 --> 00:05:49,630
package would be a little Bluetooth

00:05:47,650 --> 00:05:51,910
Bluetooth transmitter but it was off it

00:05:49,630 --> 00:05:53,110
was also kind of detecting Bluetooth to

00:05:51,910 --> 00:05:56,229
see if there was any Bluetooth around

00:05:53,110 --> 00:05:58,390
but of course Bluetooth being mostly

00:05:56,229 --> 00:05:59,530
secure paired system who wouldn't be

00:05:58,390 --> 00:06:00,790
able to read the data but it would be

00:05:59,530 --> 00:06:02,950
able to detect if there was anything on

00:06:00,790 --> 00:06:04,930
that frequency and then they go away and

00:06:02,950 --> 00:06:06,910
they don't even need to hide nearby

00:06:04,930 --> 00:06:08,850
meanwhile delivery driver comes along

00:06:06,910 --> 00:06:10,930
unlocks the door puts the package inside

00:06:08,850 --> 00:06:13,120
but as soon as they've unlocked the door

00:06:10,930 --> 00:06:14,350
there's been a Bluetooth signal and this

00:06:13,120 --> 00:06:15,490
little device would pick up the fact

00:06:14,350 --> 00:06:16,840
that there's been a Bluetooth signal and

00:06:15,490 --> 00:06:18,790
would activate and then it would create

00:06:16,840 --> 00:06:22,780
a Bluetooth denial of service attack so

00:06:18,790 --> 00:06:24,640
it would flood the Bluetooth spectrum so

00:06:22,780 --> 00:06:27,820
that when the delivery driver tried to

00:06:24,640 --> 00:06:31,180
lock that all it wouldn't work so you

00:06:27,820 --> 00:06:32,940
would probably expect that software on a

00:06:31,180 --> 00:06:36,039
device when you press the lock button

00:06:32,940 --> 00:06:38,140
that when it says locked the door is

00:06:36,039 --> 00:06:39,480
locked what actually happened within the

00:06:38,140 --> 00:06:41,970
software is that

00:06:39,480 --> 00:06:44,580
connection with timeout and then I would

00:06:41,970 --> 00:06:46,410
say locked even though the door wasn't

00:06:44,580 --> 00:06:47,580
locked so the delivery driver wouldn't

00:06:46,410 --> 00:06:50,520
necessarily be aware that the door

00:06:47,580 --> 00:06:52,230
wasn't locked and then the person can

00:06:50,520 --> 00:06:54,180
come along afterwards and pick up the

00:06:52,230 --> 00:06:55,980
package from inside your house and take

00:06:54,180 --> 00:06:58,590
the package that you had delivered and

00:06:55,980 --> 00:07:00,630
also the package they left there so

00:06:58,590 --> 00:07:02,430
there's no no evidence at all of what

00:07:00,630 --> 00:07:04,530
went wrong and meanwhile you come home

00:07:02,430 --> 00:07:05,550
to an unlocked door because even if they

00:07:04,530 --> 00:07:06,570
wanted to they don't have the mechanism

00:07:05,550 --> 00:07:08,610
to lock the door

00:07:06,570 --> 00:07:09,930
you can unlock door and no package you

00:07:08,610 --> 00:07:14,700
can't escaped and the dogs being sick

00:07:09,930 --> 00:07:16,130
instead wonderful life so I thought to

00:07:14,700 --> 00:07:20,220
myself there's got to be a better way

00:07:16,130 --> 00:07:23,580
how can we use existing technologies and

00:07:20,220 --> 00:07:24,990
protocols to secure a door which toward

00:07:23,580 --> 00:07:27,570
intents and purposes shouldn't really be

00:07:24,990 --> 00:07:29,190
internet connected in my mind there's no

00:07:27,570 --> 00:07:33,090
good reason to have a door connected to

00:07:29,190 --> 00:07:35,280
the Internet but we want to have

00:07:33,090 --> 00:07:37,590
potentially the ability to have a remote

00:07:35,280 --> 00:07:39,180
system control access to that door but

00:07:37,590 --> 00:07:40,770
how do we do that if we don't have an

00:07:39,180 --> 00:07:42,240
interconnected so I thought well first

00:07:40,770 --> 00:07:44,460
step first let's just take that into

00:07:42,240 --> 00:07:46,290
account connection out I don't want that

00:07:44,460 --> 00:07:48,090
at all let's work on the basis there's

00:07:46,290 --> 00:07:49,830
no connection at all how do I get

00:07:48,090 --> 00:07:54,930
information to the door to be able to

00:07:49,830 --> 00:07:56,640
unlock the the the lockable so we have a

00:07:54,930 --> 00:07:59,340
device and the device will make a

00:07:56,640 --> 00:08:01,530
connection to the internet for some kind

00:07:59,340 --> 00:08:03,540
of access and in this case we're going

00:08:01,530 --> 00:08:04,800
to add an identity provider in there so

00:08:03,540 --> 00:08:06,360
the identity provider is going to allow

00:08:04,800 --> 00:08:08,340
the person to login provide some kind of

00:08:06,360 --> 00:08:09,600
credentials about who they are and this

00:08:08,340 --> 00:08:12,150
could be automatic because of course the

00:08:09,600 --> 00:08:13,680
app you're already logged into so they

00:08:12,150 --> 00:08:15,390
make a request and in response they get

00:08:13,680 --> 00:08:18,570
a token and that token they can then

00:08:15,390 --> 00:08:20,520
pass to the door via NFC NFC is a

00:08:18,570 --> 00:08:22,320
close-range communication protocol you

00:08:20,520 --> 00:08:23,370
have to be present there is no reason

00:08:22,320 --> 00:08:26,040
you would want to be able to unlock a

00:08:23,370 --> 00:08:28,920
door if you weren't at the door so NFC

00:08:26,040 --> 00:08:32,010
is a perfectly valid mechanism for

00:08:28,920 --> 00:08:35,160
transferring this information and then

00:08:32,010 --> 00:08:37,890
the advantage shouldn't buttons before

00:08:35,160 --> 00:08:39,150
I'm ready the advantage with the token

00:08:37,890 --> 00:08:40,530
that comes back if we look at a JSON web

00:08:39,150 --> 00:08:43,620
token anybody here familiar with JSON

00:08:40,530 --> 00:08:45,720
web tokens anybody understand the format

00:08:43,620 --> 00:08:48,680
of a JSON web token and how they say

00:08:45,720 --> 00:08:52,260
self validate okay we'll go through that

00:08:48,680 --> 00:08:53,329
in a bit but essentially they can be

00:08:52,260 --> 00:08:54,860
validated without

00:08:53,329 --> 00:08:56,779
requiring communication back to the

00:08:54,860 --> 00:08:58,579
identity provider so the door is able to

00:08:56,779 --> 00:09:01,489
take that code and look at it and go yes

00:08:58,579 --> 00:09:02,779
this is valid I'm going to unlock so how

00:09:01,489 --> 00:09:05,600
does this work we step back and look at

00:09:02,779 --> 00:09:07,339
how the data flow works so we've got our

00:09:05,600 --> 00:09:08,329
devices here we've got the mobile app

00:09:07,339 --> 00:09:09,379
we've got the door that we want to

00:09:08,329 --> 00:09:12,439
unlock and we've got our identity

00:09:09,379 --> 00:09:14,600
provider so if anybody here has done any

00:09:12,439 --> 00:09:16,970
kind of a warfare open ID connected type

00:09:14,600 --> 00:09:18,709
application configuration before within

00:09:16,970 --> 00:09:20,660
the identity provider you'll create a

00:09:18,709 --> 00:09:22,129
new application and as part of that

00:09:20,660 --> 00:09:23,420
you'll get three main bits of

00:09:22,129 --> 00:09:26,029
information that you need you get a

00:09:23,420 --> 00:09:29,329
public and a private key and you get a

00:09:26,029 --> 00:09:31,339
client ID there's also a version with a

00:09:29,329 --> 00:09:35,480
pre-shared key but we don't want to use

00:09:31,339 --> 00:09:36,619
that because pre-shared keys are usually

00:09:35,480 --> 00:09:38,899
only in environments where you trust

00:09:36,619 --> 00:09:41,059
every every part of the application and

00:09:38,899 --> 00:09:44,660
in this case the mobile device that

00:09:41,059 --> 00:09:48,379
we're using is potentially not within

00:09:44,660 --> 00:09:50,540
the ecosystem of systems of devices that

00:09:48,379 --> 00:09:52,009
we control so we're going to use RSA

00:09:50,540 --> 00:09:53,869
which is a public-private key hashing

00:09:52,009 --> 00:09:56,059
signature in order to validate the JSON

00:09:53,869 --> 00:09:57,829
web token so a JSON web token will have

00:09:56,059 --> 00:10:00,230
a head or a payload in the signature and

00:09:57,829 --> 00:10:03,169
the signature based on a public private

00:10:00,230 --> 00:10:06,230
key will allow any system who has the

00:10:03,169 --> 00:10:07,459
public key to verify that the the header

00:10:06,230 --> 00:10:09,889
and the payload haven't been modified

00:10:07,459 --> 00:10:12,079
and that's why we can use any data in

00:10:09,889 --> 00:10:14,449
the payload with certainty there's been

00:10:12,079 --> 00:10:16,220
no modification to it without having to

00:10:14,449 --> 00:10:18,739
connect to the identity provider to make

00:10:16,220 --> 00:10:20,239
sure the token is actually valid some of

00:10:18,739 --> 00:10:21,799
you might be familiar with opaque tokens

00:10:20,239 --> 00:10:24,769
when you talk to AP eyes and they're

00:10:21,799 --> 00:10:26,329
more on what was randomized 30 40 50

00:10:24,769 --> 00:10:27,679
character type strings you'd have to go

00:10:26,329 --> 00:10:29,419
off to the identity provider and say his

00:10:27,679 --> 00:10:30,739
as the valid token and what's the scope

00:10:29,419 --> 00:10:33,319
of use that I'm allowed to use that to

00:10:30,739 --> 00:10:35,329
open for what what is the permissions or

00:10:33,319 --> 00:10:37,100
the access levels that I have within the

00:10:35,329 --> 00:10:38,779
business logic that I run based on this

00:10:37,100 --> 00:10:41,089
token but with a JSON web token you can

00:10:38,779 --> 00:10:42,559
encapsulate that all inside and the end

00:10:41,089 --> 00:10:43,759
application can verify that without

00:10:42,559 --> 00:10:45,470
talking to the identity provider which

00:10:43,759 --> 00:10:46,850
is perfect for the door because it can't

00:10:45,470 --> 00:10:49,519
talk to the identity provider it has no

00:10:46,850 --> 00:10:50,959
internet connection so we have the

00:10:49,519 --> 00:10:54,369
public private key and the first one

00:10:50,959 --> 00:10:57,290
there is the client ID will send the

00:10:54,369 --> 00:10:58,459
private key and the client ID and put

00:10:57,290 --> 00:11:00,739
that into the applications running on

00:10:58,459 --> 00:11:02,539
the mobile phone and will send a copy of

00:11:00,739 --> 00:11:05,029
a public key and we'll put that on the

00:11:02,539 --> 00:11:06,439
applications running on the door so the

00:11:05,029 --> 00:11:07,999
door can now use that public key for

00:11:06,439 --> 00:11:11,539
verifying any JSON web tokens to come

00:11:07,999 --> 00:11:12,649
back so that's the pre setup now we want

00:11:11,539 --> 00:11:14,029
to work out how the logger is going to

00:11:12,649 --> 00:11:15,679
work so obviously we're going to have a

00:11:14,029 --> 00:11:17,749
cloud component at some point because we

00:11:15,679 --> 00:11:20,929
need to log in so the mobile application

00:11:17,749 --> 00:11:23,179
is going to launch like a webview inside

00:11:20,929 --> 00:11:24,860
for authentication and into that it's

00:11:23,179 --> 00:11:26,240
going to pass the client ID this allows

00:11:24,860 --> 00:11:28,100
the webview to make a request the

00:11:26,240 --> 00:11:31,129
identity provider with that client ID

00:11:28,100 --> 00:11:32,449
and say give me the log in form for me

00:11:31,129 --> 00:11:33,589
to be able to authenticate myself so

00:11:32,449 --> 00:11:36,289
this login form is now for your

00:11:33,589 --> 00:11:37,850
particular application the user will

00:11:36,289 --> 00:11:39,350
then type in their credentials send

00:11:37,850 --> 00:11:40,879
those off to the identity provider the

00:11:39,350 --> 00:11:42,949
identity provider can then look up those

00:11:40,879 --> 00:11:44,449
credentials in its database and work out

00:11:42,949 --> 00:11:46,429
whether for that client ID those

00:11:44,449 --> 00:11:48,110
credentials are valid and assuming they

00:11:46,429 --> 00:11:50,569
are it'll generate some kind of

00:11:48,110 --> 00:11:53,959
authorization code that authorization

00:11:50,569 --> 00:11:55,879
code is short remembered one-time

00:11:53,959 --> 00:11:58,399
password essentially and that it'll

00:11:55,879 --> 00:11:59,869
return back to the webview and the

00:11:58,399 --> 00:12:02,239
webview will then return that back to

00:11:59,869 --> 00:12:03,739
the mobile application so the mobile app

00:12:02,239 --> 00:12:04,970
that you have now doesn't know what the

00:12:03,739 --> 00:12:07,989
user name password are they were typed

00:12:04,970 --> 00:12:10,939
into the browser it doesn't know

00:12:07,989 --> 00:12:12,769
anything about who you are other than it

00:12:10,939 --> 00:12:14,749
has this axis or this authorization code

00:12:12,769 --> 00:12:19,730
but it can take this authorization code

00:12:14,749 --> 00:12:22,789
and the client ID a bit of a setter and

00:12:19,730 --> 00:12:24,709
the private key and send those back to

00:12:22,789 --> 00:12:27,379
the identity server and say for this

00:12:24,709 --> 00:12:30,169
client ID and with the authorization

00:12:27,379 --> 00:12:33,589
that I have by sending you the private

00:12:30,169 --> 00:12:35,539
key does this or code match anything

00:12:33,589 --> 00:12:38,600
that you recognize the identity provider

00:12:35,539 --> 00:12:40,279
will say well the IDS match the private

00:12:38,600 --> 00:12:41,959
keys match and the auth code matches

00:12:40,279 --> 00:12:44,149
Ben's login Ben just logged in now and I

00:12:41,959 --> 00:12:45,379
use this authorization code so what I'm

00:12:44,149 --> 00:12:47,839
going to do now is create an identity

00:12:45,379 --> 00:12:49,220
token and an access token for Ben I'm

00:12:47,839 --> 00:12:51,169
going to return those back to the mobile

00:12:49,220 --> 00:12:53,839
application so the mobile app now has

00:12:51,169 --> 00:12:56,419
the access code and the identity of the

00:12:53,839 --> 00:12:57,949
access token and the identity token for

00:12:56,419 --> 00:13:00,189
me for my login without needing to know

00:12:57,949 --> 00:13:03,049
my credentials but we've got a

00:13:00,189 --> 00:13:04,429
full-circle flow there of of

00:13:03,049 --> 00:13:06,319
authorization to make sure that it knows

00:13:04,429 --> 00:13:08,629
who I am and that access token can now

00:13:06,319 --> 00:13:11,629
be used to make requests to api's on my

00:13:08,629 --> 00:13:13,970
behalf so we now simply take that access

00:13:11,629 --> 00:13:16,459
to a consent of our NFC to the door on

00:13:13,970 --> 00:13:17,720
the door having the public key is able

00:13:16,459 --> 00:13:20,060
to generate a

00:13:17,720 --> 00:13:22,250
signature for the payload and the header

00:13:20,060 --> 00:13:24,110
and if it matches the signature in the

00:13:22,250 --> 00:13:27,020
token that it just received then it

00:13:24,110 --> 00:13:34,700
knows the token is trustworthy and it

00:13:27,020 --> 00:13:37,300
can act on it make sense so that's what

00:13:34,700 --> 00:13:37,300
I'm going to demo today

00:13:39,880 --> 00:13:45,870
at the moment it's like the driver is

00:13:42,730 --> 00:13:45,870
authenticating themselves or

00:13:48,700 --> 00:13:54,190
sure that the the who's at the door so I

00:13:53,170 --> 00:13:55,870
still want to be able to add something

00:13:54,190 --> 00:13:56,890
like a camera ring but the camera might

00:13:55,870 --> 00:13:58,870
need instant access

00:13:56,890 --> 00:14:00,130
but on the other hand if we enable a

00:13:58,870 --> 00:14:01,450
Bluetooth connection between the door

00:14:00,130 --> 00:14:03,310
and the mobile device we can use

00:14:01,450 --> 00:14:06,310
Bluetooth which has got a higher data

00:14:03,310 --> 00:14:09,220
throughput to take video footage even if

00:14:06,310 --> 00:14:10,900
it's low framerate for video footage and

00:14:09,220 --> 00:14:13,060
send it via the mobile phone to the

00:14:10,900 --> 00:14:15,880
cloud so that somebody can see that on

00:14:13,060 --> 00:14:18,370
their phone or their their device so I

00:14:15,880 --> 00:14:20,650
could see who's at my door again without

00:14:18,370 --> 00:14:21,880
the door needing direct into access I'm

00:14:20,650 --> 00:14:24,400
not so worried about Bluetooth being

00:14:21,880 --> 00:14:26,320
intercepted or denial-of-service taken

00:14:24,400 --> 00:14:27,690
down I don't take them down there's

00:14:26,320 --> 00:14:30,130
actually a word but we'll go with it

00:14:27,690 --> 00:14:31,150
because if that's not working then I

00:14:30,130 --> 00:14:32,950
don't get a signal therefore I know

00:14:31,150 --> 00:14:34,120
there there's something wrong but it's

00:14:32,950 --> 00:14:35,530
it's not going to affect the

00:14:34,120 --> 00:14:37,840
authentication side of it it's only

00:14:35,530 --> 00:14:39,040
identification side of it and then the

00:14:37,840 --> 00:14:40,510
next step after that is I want to create

00:14:39,040 --> 00:14:42,160
some kind of connection between the

00:14:40,510 --> 00:14:43,870
identity provider and the user so when

00:14:42,160 --> 00:14:44,890
somebody arrives at the door I can see

00:14:43,870 --> 00:14:46,870
the footage of who's at the door

00:14:44,890 --> 00:14:49,150
but then I've got the right to say yes

00:14:46,870 --> 00:14:52,090
or no rather than the person at the door

00:14:49,150 --> 00:14:53,410
having the right to say yes or no which

00:14:52,090 --> 00:14:55,660
could be done by some kind of

00:14:53,410 --> 00:14:58,120
multi-factor authentication I didn't so

00:14:55,660 --> 00:15:03,310
I'll see how I go on that but let's go

00:14:58,120 --> 00:15:05,380
straight to the demo so this is I like

00:15:03,310 --> 00:15:08,620
doing demos because they're a bit of fun

00:15:05,380 --> 00:15:10,630
they can sometimes go wrong sometimes

00:15:08,620 --> 00:15:12,010
more than not and so we'll see how it

00:15:10,630 --> 00:15:16,300
goes this particular demo has got quite

00:15:12,010 --> 00:15:18,220
a few moving parts so bear with me while

00:15:16,300 --> 00:15:20,740
we try and get it working so hopefully

00:15:18,220 --> 00:15:23,560
you can all see what's that thing you

00:15:20,740 --> 00:15:25,230
seem to be finding v advisor useful rate

00:15:23,560 --> 00:15:28,660
Visor no not really

00:15:25,230 --> 00:15:33,250
ok so this should be a live view of my

00:15:28,660 --> 00:15:37,360
mobile phone good this is a highly

00:15:33,250 --> 00:15:39,730
secure very vetted pair programmed

00:15:37,360 --> 00:15:41,440
mobile application that I wrote myself I

00:15:39,730 --> 00:15:45,190
came up with a logo myself as well I'm

00:15:41,440 --> 00:15:47,260
very proud essentially what I did was I

00:15:45,190 --> 00:15:50,200
jumped onto the old Sierra website and I

00:15:47,260 --> 00:15:52,570
downloaded the sample code for Android

00:15:50,200 --> 00:15:54,580
and then I found some rogue code

00:15:52,570 --> 00:15:56,950
somewhere that writes data onto an NFC

00:15:54,580 --> 00:15:59,470
card and I mangled the two together and

00:15:56,950 --> 00:16:01,540
it happened to work beyond that I'm not

00:15:59,470 --> 00:16:02,330
a Java developer I don't know what's

00:16:01,540 --> 00:16:07,350
going on

00:16:02,330 --> 00:16:09,480
I also have a access card so this is

00:16:07,350 --> 00:16:11,640
your standard NFC type access card that

00:16:09,480 --> 00:16:12,900
you'd use to swipe into any building the

00:16:11,640 --> 00:16:15,720
only difference of course is that

00:16:12,900 --> 00:16:18,540
instead of having a value like this is

00:16:15,720 --> 00:16:20,010
employee number 742 and then they look

00:16:18,540 --> 00:16:21,270
up on an external system do we have

00:16:20,010 --> 00:16:23,340
access and the door unlocks which is how

00:16:21,270 --> 00:16:25,620
most of the systems work this one has a

00:16:23,340 --> 00:16:30,180
an access token on it which has an

00:16:25,620 --> 00:16:32,550
expiry meanwhile I also have Raspberry

00:16:30,180 --> 00:16:34,680
Pi running over here except there's a

00:16:32,550 --> 00:16:36,000
broken pipe it's always gonna be

00:16:34,680 --> 00:16:40,040
something that goes wrong right and to

00:16:36,000 --> 00:16:40,040
see if we can connect to this again

00:16:46,640 --> 00:16:55,020
excellent did I just break something I

00:16:49,200 --> 00:16:56,820
heard it move nothing nothing like so

00:16:55,020 --> 00:16:58,560
this is a highly secure door there's no

00:16:56,820 --> 00:17:01,470
way to get through this door at all

00:16:58,560 --> 00:17:04,020
there is no way around it there is no

00:17:01,470 --> 00:17:06,320
way at all that I could get to the back

00:17:04,020 --> 00:17:08,339
system here the controls all the governs

00:17:06,320 --> 00:17:13,740
you can't kick the door down

00:17:08,339 --> 00:17:17,730
it's made of really strong fabric and

00:17:13,740 --> 00:17:19,290
plywood but let's pretend that it's

00:17:17,730 --> 00:17:20,940
highly secure so the way that we've

00:17:19,290 --> 00:17:23,010
designed this here we've got an NFC

00:17:20,940 --> 00:17:25,589
reader on the front there's a connected

00:17:23,010 --> 00:17:27,030
via actually there's a reason why I have

00:17:25,589 --> 00:17:29,310
visor running so you can see a close-up

00:17:27,030 --> 00:17:31,140
so let's do this again and I'm going to

00:17:29,310 --> 00:17:31,380
get a camera up so hopefully this will

00:17:31,140 --> 00:17:37,260
work

00:17:31,380 --> 00:17:39,030
Oh latency is awesome all right oh yeah

00:17:37,260 --> 00:17:40,160
it's that beginner for everyone can you

00:17:39,030 --> 00:17:43,320
kind of make out what's going on here

00:17:40,160 --> 00:17:45,090
cool if you need me to slow down or you

00:17:43,320 --> 00:17:47,190
know just holler so we've got an NFC

00:17:45,090 --> 00:17:48,590
card here and this normally plugs

00:17:47,190 --> 00:17:50,670
straight on top of a Raspberry Pi

00:17:48,590 --> 00:17:51,690
however we don't want the Raspberry Pi

00:17:50,670 --> 00:17:52,860
on the front of the door because

00:17:51,690 --> 00:17:54,570
otherwise somebody could just short the

00:17:52,860 --> 00:17:56,100
pins unlocked at all it's always got to

00:17:54,570 --> 00:17:57,900
be in a secure environment right the

00:17:56,100 --> 00:18:01,380
other side of it all but nobody can get

00:17:57,900 --> 00:18:03,630
to so we've got the NFC reader on the

00:18:01,380 --> 00:18:05,220
front here we've got the the cable that

00:18:03,630 --> 00:18:07,680
runs through the back which goes into

00:18:05,220 --> 00:18:10,110
the Raspberry Pi and then from the

00:18:07,680 --> 00:18:12,360
Raspberry Pi that cable actually splits

00:18:10,110 --> 00:18:15,110
at this point and also goes off into

00:18:12,360 --> 00:18:16,610
this little connector there

00:18:15,110 --> 00:18:17,870
I don't if you can make jello I'm gonna

00:18:16,610 --> 00:18:23,360
turn the door answer there's more light

00:18:17,870 --> 00:18:24,919
on it now we're all locked in alright we

00:18:23,360 --> 00:18:27,950
need to get out because there's this

00:18:24,919 --> 00:18:29,990
crazy man on the stage so we've got down

00:18:27,950 --> 00:18:32,269
here this ribbon cable goes into this

00:18:29,990 --> 00:18:33,830
little connector there which I don't

00:18:32,269 --> 00:18:35,809
even quite make out then connects to

00:18:33,830 --> 00:18:38,120
this this ribbon cable here which is for

00:18:35,809 --> 00:18:40,850
the server and that servo highly

00:18:38,120 --> 00:18:43,429
technically moves that a white plastic

00:18:40,850 --> 00:18:45,919
arm that bit there and pulls this very

00:18:43,429 --> 00:18:49,610
fragile metal string which is attached

00:18:45,919 --> 00:18:52,149
by a very oddly inserted screws to pull

00:18:49,610 --> 00:18:54,830
a piece of wood this piece of wood here

00:18:52,149 --> 00:18:56,750
that's actually part of a paint stirrer

00:18:54,830 --> 00:19:00,820
handle that I got from Bunnings it's

00:18:56,750 --> 00:19:00,820
very strong there's no way through so

00:19:01,210 --> 00:19:07,820
anyway right so let's see how this goes

00:19:04,429 --> 00:19:09,440
I'm going to take my I'm going to

00:19:07,820 --> 00:19:12,610
destroy the stage first I'm gonna take

00:19:09,440 --> 00:19:15,019
my NFC card and we're gonna hold it in

00:19:12,610 --> 00:19:16,250
now you didn't feel that because I'm the

00:19:15,019 --> 00:19:18,769
only one holding the phone but there was

00:19:16,250 --> 00:19:20,720
a small vibration trust me on that I'm

00:19:18,769 --> 00:19:22,370
an expert there's a small vibration

00:19:20,720 --> 00:19:24,110
which means there's a detector there's

00:19:22,370 --> 00:19:26,240
an NFC card and you buy so I'm gonna hit

00:19:24,110 --> 00:19:27,830
the login button and if you notice it

00:19:26,240 --> 00:19:29,840
goes off to been decorate or zero calm

00:19:27,830 --> 00:19:32,240
so it's actually hitting the identity

00:19:29,840 --> 00:19:33,769
provider and because I tested this demo

00:19:32,240 --> 00:19:35,690
this morning already because I'm clever

00:19:33,769 --> 00:19:38,720
like that I'm already logged in I've

00:19:35,690 --> 00:19:40,460
already got an account and it's because

00:19:38,720 --> 00:19:42,230
I was a cookie it's locked me in or from

00:19:40,460 --> 00:19:45,409
automatically and it's entered the JSON

00:19:42,230 --> 00:19:47,269
web token back to the phone so the

00:19:45,409 --> 00:19:48,919
Android app now has the JSON web token

00:19:47,269 --> 00:19:50,690
in memory if I now click on the create

00:19:48,919 --> 00:19:52,340
door pass button you'll see at the

00:19:50,690 --> 00:19:54,620
bottom just near the powered by it says

00:19:52,340 --> 00:19:59,809
door pass created successfully thank

00:19:54,620 --> 00:20:01,580
heavens for that all right so now the

00:19:59,809 --> 00:20:04,880
expiry on the JSON web token we just got

00:20:01,580 --> 00:20:06,519
sent to me is 60 seconds do you think

00:20:04,880 --> 00:20:10,159
I've been talking for 60 seconds yet

00:20:06,519 --> 00:20:12,500
that's quite possible so let me just

00:20:10,159 --> 00:20:17,880
make sure you can see both of these

00:20:12,500 --> 00:20:19,919
things just for fun

00:20:17,880 --> 00:20:26,820
and then I'll go back to the camera on

00:20:19,919 --> 00:20:27,840
here yeah all right so the dot dot on

00:20:26,820 --> 00:20:30,240
the right you can't actually tell

00:20:27,840 --> 00:20:32,070
because it's dot dot dot on every line

00:20:30,240 --> 00:20:33,510
but it's saying that every second it's

00:20:32,070 --> 00:20:35,510
basically the I'm waiting for some kind

00:20:33,510 --> 00:20:38,700
of instruction so if I come over here

00:20:35,510 --> 00:20:40,799
over here turn the door and bin all

00:20:38,700 --> 00:20:42,750
right so there's the NFC card reader I'm

00:20:40,799 --> 00:20:44,039
just gonna because this is very strong

00:20:42,750 --> 00:20:45,539
I'm going to just push the door in

00:20:44,039 --> 00:20:47,030
slightly so I don't break anything if it

00:20:45,539 --> 00:20:50,940
unlocks

00:20:47,030 --> 00:20:52,770
can you tell them doing well so if I now

00:20:50,940 --> 00:20:54,809
take this card and I hold it to the NFC

00:20:52,770 --> 00:20:57,780
reader we'll see oh there we go it

00:20:54,809 --> 00:21:00,780
expired 27 seconds ago I was hoping that

00:20:57,780 --> 00:21:02,220
would happen so now we've got a sort of

00:21:00,780 --> 00:21:03,510
proof of concept we can see the tokens

00:21:02,220 --> 00:21:05,039
been passed through access is being

00:21:03,510 --> 00:21:07,350
denied because we've got an expiry in

00:21:05,039 --> 00:21:09,450
there so let's just switch over to here

00:21:07,350 --> 00:21:10,620
again I'm gonna have to login again and

00:21:09,450 --> 00:21:12,450
the reason for that is I need a new to

00:21:10,620 --> 00:21:13,950
access to open if I've burnt the old

00:21:12,450 --> 00:21:16,080
access token back on again then that

00:21:13,950 --> 00:21:18,690
obviously wouldn't help so let's write

00:21:16,080 --> 00:21:20,280
that to the card this time I definitely

00:21:18,690 --> 00:21:23,000
you need to push this in and this time

00:21:20,280 --> 00:21:26,030
we can have a look at what's going on

00:21:23,000 --> 00:21:26,030
down here

00:21:28,640 --> 00:21:32,280
my phone is running the Wi-Fi as well

00:21:30,720 --> 00:21:33,750
that evidence connected to so that's

00:21:32,280 --> 00:21:37,169
probably why it's a bit slow if I now

00:21:33,750 --> 00:21:40,860
unlock it there we go so you can see the

00:21:37,169 --> 00:21:44,640
door can be unlocked and now it's locked

00:21:40,860 --> 00:21:47,460
in so that's it that's the demo so what

00:21:44,640 --> 00:21:49,049
I want to do really in terms of like

00:21:47,460 --> 00:21:55,530
what's the point of what I've just been

00:21:49,049 --> 00:21:56,570
doing is we software engineers often are

00:21:55,530 --> 00:21:59,460
in a position where we're given

00:21:56,570 --> 00:22:03,270
requirements we're giving something that

00:21:59,460 --> 00:22:04,830
we can sell to a customer and we often

00:22:03,270 --> 00:22:06,720
come up with ways that are a little more

00:22:04,830 --> 00:22:08,100
convoluted than perhaps need to be there

00:22:06,720 --> 00:22:11,130
are plenty of standards and libraries

00:22:08,100 --> 00:22:13,230
out there that we could use but whether

00:22:11,130 --> 00:22:15,510
or not we suffer from the not invented

00:22:13,230 --> 00:22:18,299
here syndrome or whether it's just

00:22:15,510 --> 00:22:20,580
because we like the challenge of solving

00:22:18,299 --> 00:22:23,159
a problem in interesting innovative ways

00:22:20,580 --> 00:22:25,860
sometimes as we create in the way that

00:22:23,159 --> 00:22:27,360
Amazon did no fault I mean we all create

00:22:25,860 --> 00:22:29,440
buggy code and we all create systems

00:22:27,360 --> 00:22:31,419
that need patching and

00:22:29,440 --> 00:22:33,789
and rethinking and redesigning at some

00:22:31,419 --> 00:22:35,620
point in the future but if we think

00:22:33,789 --> 00:22:37,179
outside of the box and think well okay

00:22:35,620 --> 00:22:39,279
so we're unlocking a door but what if

00:22:37,179 --> 00:22:41,259
the door is just an API and what if the

00:22:39,279 --> 00:22:43,330
mobile phone is just a device that

00:22:41,259 --> 00:22:47,470
somebody uses to log in to connect to an

00:22:43,330 --> 00:22:50,919
API and say unlock me then we can take

00:22:47,470 --> 00:22:53,320
the existing processes and systems that

00:22:50,919 --> 00:22:54,580
we have re-implement them in different

00:22:53,320 --> 00:22:57,129
ways that we haven't necessary thought

00:22:54,580 --> 00:22:59,429
about before and creating potentially

00:22:57,129 --> 00:23:01,299
interesting definitely a lot more fun

00:22:59,429 --> 00:23:05,220
something that you might be able to talk

00:23:01,299 --> 00:23:07,029
about on stage an excuse to build a door

00:23:05,220 --> 00:23:09,789
but at the end of the day something

00:23:07,029 --> 00:23:12,879
that's more maintainable more secure and

00:23:09,789 --> 00:23:14,259
something that when you move on or when

00:23:12,879 --> 00:23:16,149
you bring new members onto the team

00:23:14,259 --> 00:23:18,429
there's existing documentation out there

00:23:16,149 --> 00:23:20,350
already about how open ID Connect works

00:23:18,429 --> 00:23:22,990
and how orth works you don't have to

00:23:20,350 --> 00:23:24,879
learn a brand new system again you don't

00:23:22,990 --> 00:23:37,029
have to maintain the custom code that

00:23:24,879 --> 00:23:39,580
you wrote so I want you to take let's

00:23:37,029 --> 00:23:42,450
fiction right off I want you to take

00:23:39,580 --> 00:23:44,679
away from this the idea that there are

00:23:42,450 --> 00:23:47,169
there are ways of implementing solutions

00:23:44,679 --> 00:23:49,389
that use existing processes and

00:23:47,169 --> 00:23:50,740
libraries but it can still be fun to do

00:23:49,389 --> 00:23:52,480
it that way and it's going to save you a

00:23:50,740 --> 00:23:53,500
lot of headaches in the future if you

00:23:52,480 --> 00:23:55,120
want to have a look at any of the code

00:23:53,500 --> 00:23:56,980
that I've written up here there's an

00:23:55,120 --> 00:23:59,139
Android and the Raspberry Pi library

00:23:56,980 --> 00:24:00,970
there there's also because for one of

00:23:59,139 --> 00:24:02,590
the talks that I gave it turns out that

00:24:00,970 --> 00:24:05,080
if you don't put the raspberry PI's into

00:24:02,590 --> 00:24:07,539
those metal protective plastic

00:24:05,080 --> 00:24:10,240
anti-static bags and stick them through

00:24:07,539 --> 00:24:11,769
an airport scanner they've they fry and

00:24:10,240 --> 00:24:13,450
when you get to another country and they

00:24:11,769 --> 00:24:14,470
don't actually sell the same NFC cards

00:24:13,450 --> 00:24:16,000
you need to redesign the whole thing

00:24:14,470 --> 00:24:17,620
from scratch and use a an Arduino

00:24:16,000 --> 00:24:21,100
instead so there's no Trina library

00:24:17,620 --> 00:24:23,850
there as well for you if you like I'm

00:24:21,100 --> 00:24:26,889
told that we have time for questions and

00:24:23,850 --> 00:24:28,299
I invite any of you to come up and have

00:24:26,889 --> 00:24:31,240
a look at the door in person if you want

00:24:28,299 --> 00:24:32,230
and I also have some like t-shirts and

00:24:31,240 --> 00:24:37,000
stickers if you want to come grab one of

00:24:32,230 --> 00:24:39,580
those thank you very we also have a

00:24:37,000 --> 00:24:42,129
thank you to you oh thank you it was

00:24:39,580 --> 00:24:43,119
gonna have a little foil hat but we

00:24:42,129 --> 00:24:46,269
didn't get around to that

00:24:43,119 --> 00:24:49,330
I have one implanted so if I just do

00:24:46,269 --> 00:24:51,009
that and you say it's fine if anyone has

00:24:49,330 --> 00:24:53,139
any questions I'm gonna make you come to

00:24:51,009 --> 00:24:55,210
me at the middle here so that I don't

00:24:53,139 --> 00:24:56,980
have to run around the room so any

00:24:55,210 --> 00:24:58,210
questions please come through you don't

00:24:56,980 --> 00:25:03,429
have to be on cameras they'll worry

00:24:58,210 --> 00:25:09,070
about that nothing at all yes because I

00:25:03,429 --> 00:25:12,369
have questions Hey I think that was

00:25:09,070 --> 00:25:14,500
really cool um I suppose presumably the

00:25:12,369 --> 00:25:16,990
Raspberry Pi there if it's not Internet

00:25:14,500 --> 00:25:17,619
connected kind of then relies on like a

00:25:16,990 --> 00:25:20,100
robust

00:25:17,619 --> 00:25:22,299
real-time clock or something in there

00:25:20,100 --> 00:25:24,159
because I guess otherwise you could

00:25:22,299 --> 00:25:29,529
pretend it's in the past and use an old

00:25:24,159 --> 00:25:30,970
token and yes short answer yes I suppose

00:25:29,529 --> 00:25:32,889
if you were concerned about that and

00:25:30,970 --> 00:25:34,570
it's a valid concern you could implement

00:25:32,889 --> 00:25:35,200
within the application the connective ir

00:25:34,570 --> 00:25:37,509
NFC

00:25:35,200 --> 00:25:40,360
a time stamp so you'd then be trusting

00:25:37,509 --> 00:25:42,369
the device you could potentially encode

00:25:40,360 --> 00:25:44,679
it some way into the JSON web token as

00:25:42,369 --> 00:25:45,909
well although you've got the latency

00:25:44,679 --> 00:25:47,200
between it being generated and being

00:25:45,909 --> 00:25:48,909
passed through there are number ways you

00:25:47,200 --> 00:25:51,220
could get information through in terms

00:25:48,909 --> 00:25:52,899
of timing the other issue in terms of

00:25:51,220 --> 00:25:54,519
the Raspberry Pi not being

00:25:52,899 --> 00:25:57,399
interconnected is it makes really hard

00:25:54,519 --> 00:26:01,990
to prepare updates so if you want to

00:25:57,399 --> 00:26:03,279
rotate the public key or you want to fix

00:26:01,990 --> 00:26:05,139
a bug or something you're gonna have to

00:26:03,279 --> 00:26:06,309
roll software patches out in a really

00:26:05,139 --> 00:26:14,820
interesting way very different mechanism

00:26:06,309 --> 00:26:14,820
yeah any other questions at all

00:26:16,539 --> 00:26:25,190
next one thank you for that that was fun

00:26:21,619 --> 00:26:27,169
um just it work working with Internet of

00:26:25,190 --> 00:26:29,450
Things very low compute devices

00:26:27,169 --> 00:26:33,350
obviously the example that you use use

00:26:29,450 --> 00:26:36,440
cryptography to sign the key um have you

00:26:33,350 --> 00:26:39,860
any experience with with kind of very

00:26:36,440 --> 00:26:41,179
light cryptography a kind of protocols

00:26:39,860 --> 00:26:43,519
or anything like that for those devices

00:26:41,179 --> 00:26:45,679
that can't and do the heavy lifting of

00:26:43,519 --> 00:26:46,909
crypto another good question and one of

00:26:45,679 --> 00:26:49,879
the issues that I was facing with the

00:26:46,909 --> 00:26:51,860
Android hack that I am that I had to do

00:26:49,879 --> 00:26:54,049
the the previous conference the issue

00:26:51,860 --> 00:26:55,490
with the the Android devices there's a

00:26:54,049 --> 00:26:57,169
limited amount of memory and you can't

00:26:55,490 --> 00:26:58,909
actually stole a whole JSON web token in

00:26:57,169 --> 00:27:01,220
there so whereas normally you would

00:26:58,909 --> 00:27:02,659
process data as a stream there's no

00:27:01,220 --> 00:27:03,769
point in processing in a stream because

00:27:02,659 --> 00:27:05,059
by the time you get to the signature

00:27:03,769 --> 00:27:06,350
you've forgotten what the information is

00:27:05,059 --> 00:27:08,600
that you can recreate the signature for

00:27:06,350 --> 00:27:10,940
so in that case what I did was I use the

00:27:08,600 --> 00:27:12,980
Android as a basically a serial through

00:27:10,940 --> 00:27:15,289
put into a Raspberry Pi if you're doing

00:27:12,980 --> 00:27:16,850
anything to do with JSON web tokens the

00:27:15,289 --> 00:27:18,529
Raspberry Pi is going to give you a lot

00:27:16,850 --> 00:27:21,350
better leverage or something with bit

00:27:18,529 --> 00:27:23,509
more memory I haven't had the need to

00:27:21,350 --> 00:27:27,950
look into ways of doing it all on an

00:27:23,509 --> 00:27:29,149
Arduino interestingly I don't know if

00:27:27,950 --> 00:27:34,159
I'm allowed to mention this and is going

00:27:29,149 --> 00:27:36,049
to be recorded there may be some news

00:27:34,159 --> 00:27:37,669
coming up about auth0 and android at

00:27:36,049 --> 00:27:39,289
some point in the future that's I'll

00:27:37,669 --> 00:27:42,429
leave it at that maybe I can tell you

00:27:39,289 --> 00:27:42,429
and I'm not like during the break

00:27:49,899 --> 00:27:52,909
what was your question because maybe

00:27:51,769 --> 00:27:54,529
some of the people would be interested

00:27:52,909 --> 00:27:55,669
in hearing what the figure did and then

00:27:54,529 --> 00:28:00,919
you can give us the answer as well and I

00:27:55,669 --> 00:28:03,739
can take a break it's in rather complex

00:28:00,919 --> 00:28:06,379
I guess having so much communication

00:28:03,739 --> 00:28:09,129
back and forth understanding that you

00:28:06,379 --> 00:28:12,710
get the keys initially and all of that

00:28:09,129 --> 00:28:14,299
or think something simpler there's the

00:28:12,710 --> 00:28:16,580
when you're looking at the multi-factor

00:28:14,299 --> 00:28:18,379
authentication stuff you get this single

00:28:16,580 --> 00:28:21,139
code and it kind of pops up on your

00:28:18,379 --> 00:28:23,149
screen for like X seconds yeah

00:28:21,139 --> 00:28:24,799
is there something where it can just

00:28:23,149 --> 00:28:26,690
kind of use that where I'm the first

00:28:24,799 --> 00:28:28,970
communication it just verifies who you

00:28:26,690 --> 00:28:31,700
are and then just sends back that single

00:28:28,970 --> 00:28:33,559
code so and then verifies and it'll only

00:28:31,700 --> 00:28:36,409
work that once and you only get it from

00:28:33,559 --> 00:28:39,679
the provider that once sure so that

00:28:36,409 --> 00:28:41,749
token mechanism is mostly transparent

00:28:39,679 --> 00:28:43,159
it's the same way that or phone / ID

00:28:41,749 --> 00:28:44,149
Kinect works there's always a lot of

00:28:43,159 --> 00:28:46,519
communication going backwards and

00:28:44,149 --> 00:28:47,809
forwards and between three points in

00:28:46,519 --> 00:28:49,789
order to close the loop and make sure

00:28:47,809 --> 00:28:51,259
there's no injection because the mobile

00:28:49,789 --> 00:28:53,600
device or if you're doing like a single

00:28:51,259 --> 00:28:55,309
page app they are untrusted they're

00:28:53,600 --> 00:28:56,600
running in a browser on a remote device

00:28:55,309 --> 00:28:59,179
therefore you can't trust everything

00:28:56,600 --> 00:29:00,649
that comes in is user generated data so

00:28:59,179 --> 00:29:02,419
you need to kind of go back and close

00:29:00,649 --> 00:29:04,129
the gap again with that authorization

00:29:02,419 --> 00:29:06,830
code and a server-to-server

00:29:04,129 --> 00:29:09,080
communication or in order to ensure that

00:29:06,830 --> 00:29:10,519
nothing's being modified on the way so

00:29:09,080 --> 00:29:12,049
it looks complex when you're looking at

00:29:10,519 --> 00:29:13,519
the flow diagram but from the user

00:29:12,049 --> 00:29:14,720
experience perspective all they see is a

00:29:13,519 --> 00:29:16,549
login form and the next thing they see

00:29:14,720 --> 00:29:18,320
is whatever they requested it's just so

00:29:16,549 --> 00:29:20,330
there's seven hops in there instead of

00:29:18,320 --> 00:29:21,499
three in order to get to that point so I

00:29:20,330 --> 00:29:23,440
wouldn't be too worried about the

00:29:21,499 --> 00:29:25,220
complexity of the authorization flow

00:29:23,440 --> 00:29:27,019
because that's what's actually keeping

00:29:25,220 --> 00:29:29,269
your secure in terms of two-factor

00:29:27,019 --> 00:29:32,330
authentication making that easier it's

00:29:29,269 --> 00:29:33,769
it's a similar process so you would send

00:29:32,330 --> 00:29:35,330
a request to the server it still needs

00:29:33,769 --> 00:29:37,340
to be able to create some kind of secure

00:29:35,330 --> 00:29:40,220
session between the untrusted users

00:29:37,340 --> 00:29:42,049
device the API and the identity service

00:29:40,220 --> 00:29:44,029
it's just now also adding on to that an

00:29:42,049 --> 00:29:45,350
SMS or a push notification or whatever

00:29:44,029 --> 00:29:47,989
mechanism you're using for multi-factor

00:29:45,350 --> 00:29:50,779
authentication as an additional step so

00:29:47,989 --> 00:29:51,710
from a auth flow perspective is actual

00:29:50,779 --> 00:29:53,450
making it more complicated

00:29:51,710 --> 00:29:54,440
but again from the user perspective it's

00:29:53,450 --> 00:29:56,359
not actually it doesn't actually look

00:29:54,440 --> 00:29:59,239
that complicated it doesn't feel that

00:29:56,359 --> 00:30:00,859
complicated rather yeah thank you that's

00:29:59,239 --> 00:30:02,370
right is that the answer you came up

00:30:00,859 --> 00:30:07,870
with as well

00:30:02,370 --> 00:30:10,330
okay I guess one of the things I was

00:30:07,870 --> 00:30:13,750
trying to reason about is you say you

00:30:10,330 --> 00:30:15,700
have a public key on each door yeah if

00:30:13,750 --> 00:30:19,299
you're mass-producing these door locks

00:30:15,700 --> 00:30:20,980
how would you manage the keys for all

00:30:19,299 --> 00:30:23,580
these public keys are these nine into

00:30:20,980 --> 00:30:25,899
connect non-internet connected doors

00:30:23,580 --> 00:30:27,820
like obviously said rotations hard

00:30:25,899 --> 00:30:29,980
because you know yeah it's not internet

00:30:27,820 --> 00:30:33,309
connected but how would you manage that

00:30:29,980 --> 00:30:35,289
initial deployment in the same way I

00:30:33,309 --> 00:30:38,080
guess as you'd you'd manage any

00:30:35,289 --> 00:30:40,299
deployment for large-scale hardware that

00:30:38,080 --> 00:30:42,399
you ship to people's houses there's ways

00:30:40,299 --> 00:30:45,520
of burning things and having an

00:30:42,399 --> 00:30:47,020
automated process for locking in certain

00:30:45,520 --> 00:30:49,779
different API keys like for example

00:30:47,020 --> 00:30:52,600
Telstra ship at hundreds of modems every

00:30:49,779 --> 00:30:54,490
day and the SSID and the password are

00:30:52,600 --> 00:30:55,600
printed onto the base and it's set up

00:30:54,490 --> 00:30:56,950
automatically for that so there's

00:30:55,600 --> 00:30:59,260
there's processes already within

00:30:56,950 --> 00:31:01,570
large-scale manufacturing to make that

00:30:59,260 --> 00:31:02,770
happen I'm nowhere near the point of

00:31:01,570 --> 00:31:03,789
large-scale manufacturing so I don't

00:31:02,770 --> 00:31:04,899
actually know the ins and outs of that

00:31:03,789 --> 00:31:07,330
yet but I'm hoping to be there within

00:31:04,899 --> 00:31:10,450
the next three or four months years or

00:31:07,330 --> 00:31:13,809
decades rather one thing you could do

00:31:10,450 --> 00:31:15,640
because if you work on the assumption

00:31:13,809 --> 00:31:17,860
that you can trust all of the locks

00:31:15,640 --> 00:31:19,419
because you create them and there's

00:31:17,860 --> 00:31:20,890
possibly some questions about whether

00:31:19,419 --> 00:31:22,779
that's something you can assume but

00:31:20,890 --> 00:31:24,580
let's assume that that is fine you could

00:31:22,779 --> 00:31:26,799
potentially have one public/private key

00:31:24,580 --> 00:31:31,169
pair for all the locks and then what we

00:31:26,799 --> 00:31:35,320
can do is if we have a look at the pole

00:31:31,169 --> 00:31:38,169
NFC code that we have here at the top

00:31:35,320 --> 00:31:41,049
here we've got our public key and then

00:31:38,169 --> 00:31:42,850
here we have an audience so anytime you

00:31:41,049 --> 00:31:45,429
generate an access code or an access

00:31:42,850 --> 00:31:47,559
token within the identity provider type

00:31:45,429 --> 00:31:50,260
ID token access token JSON web token

00:31:47,559 --> 00:31:51,789
type thing one of the key value pairs

00:31:50,260 --> 00:31:53,980
that you can put it into or you usually

00:31:51,789 --> 00:31:56,380
put into an access tokens payload is an

00:31:53,980 --> 00:31:58,600
audience and the audience is basically a

00:31:56,380 --> 00:32:01,210
URI that represents the system that's

00:31:58,600 --> 00:32:02,710
allowed to consume that token now of

00:32:01,210 --> 00:32:05,649
course the JSON web token itself is

00:32:02,710 --> 00:32:06,909
plain text its base 64 your uncoded but

00:32:05,649 --> 00:32:09,010
you can decode it and read all of the

00:32:06,909 --> 00:32:10,960
data it's not secure it's not encrypted

00:32:09,010 --> 00:32:13,000
you can get encrypted ones but for

00:32:10,960 --> 00:32:14,470
intent all intents and purposes they're

00:32:13,000 --> 00:32:15,539
plaintext bits of information so you

00:32:14,470 --> 00:32:17,279
don't want to put sensitive

00:32:15,539 --> 00:32:19,710
information in there and at the same

00:32:17,279 --> 00:32:21,899
time you could have a rogue door wow I

00:32:19,710 --> 00:32:23,850
don't never use that phrase a rogue door

00:32:21,899 --> 00:32:25,950
you could have a rogue door that will

00:32:23,850 --> 00:32:27,690
accept your access token even though it

00:32:25,950 --> 00:32:29,850
the audience doesn't specify that door

00:32:27,690 --> 00:32:32,399
but that's a rogue implementation you as

00:32:29,850 --> 00:32:33,749
a developer of this system would say

00:32:32,399 --> 00:32:34,979
well I need to make sure that I'm door

00:32:33,749 --> 00:32:36,299
number one therefore I'm only going to

00:32:34,979 --> 00:32:38,220
accept tokens that are issued for door

00:32:36,299 --> 00:32:40,499
number one so you can put that into the

00:32:38,220 --> 00:32:43,440
the token has the acceptable audience

00:32:40,499 --> 00:32:45,629
for the token recipient so you could

00:32:43,440 --> 00:32:47,279
have the same public key now you might

00:32:45,629 --> 00:32:49,019
want to if you're going for a mess scale

00:32:47,279 --> 00:32:50,700
if you're doing a deployment within one

00:32:49,019 --> 00:32:51,960
organization for example then maybe you

00:32:50,700 --> 00:32:53,340
can have the same public private key for

00:32:51,960 --> 00:32:54,899
all the doors it within that physical

00:32:53,340 --> 00:32:56,279
building because it's going to be easier

00:32:54,899 --> 00:32:57,749
to update and it's a controlled

00:32:56,279 --> 00:32:58,619
environment if you're shipping them out

00:32:57,749 --> 00:33:00,210
and they're going to be sold on the

00:32:58,619 --> 00:33:01,590
shelves of Bunnings then maybe you want

00:33:00,210 --> 00:33:05,729
to try and find a way of doing public

00:33:01,590 --> 00:33:06,919
private keys separately for each one and

00:33:05,729 --> 00:33:09,210
in terms of how you do that with

00:33:06,919 --> 00:33:11,330
creating all the keys or sarah has an

00:33:09,210 --> 00:33:14,220
awesome API management a peeper

00:33:11,330 --> 00:33:16,649
something management API an API for

00:33:14,220 --> 00:33:18,269
managing your zero side of things not

00:33:16,649 --> 00:33:19,529
the login but actually your dashboard

00:33:18,269 --> 00:33:20,429
environment so you don't even need to

00:33:19,529 --> 00:33:21,989
log in and create all of the

00:33:20,429 --> 00:33:30,269
applications yourself you could script

00:33:21,989 --> 00:33:33,809
all of that thanks Ben that was awesome

00:33:30,269 --> 00:33:35,700
you made the point during your talk of

00:33:33,809 --> 00:33:38,039
the value of using well understood

00:33:35,700 --> 00:33:39,570
platforms and tools and that so that the

00:33:38,039 --> 00:33:42,450
next guy who comes along or girl who

00:33:39,570 --> 00:33:44,729
comes along can reason about what you're

00:33:42,450 --> 00:33:46,859
doing and it cetera I'm part of a

00:33:44,729 --> 00:33:48,779
makerspace and it seems to be a rite of

00:33:46,859 --> 00:33:51,359
passage for maker spaces that someone

00:33:48,779 --> 00:33:53,340
decides to make a system like the one on

00:33:51,359 --> 00:33:56,869
your door probably sometimes about as

00:33:53,340 --> 00:33:59,489
secure as the one in your book

00:33:56,869 --> 00:34:01,409
very secure thank you and this is

00:33:59,489 --> 00:34:05,820
actually my front door if I got the

00:34:01,409 --> 00:34:07,619
moment my house totally yes I guess my

00:34:05,820 --> 00:34:09,720
question is everyone keeps really

00:34:07,619 --> 00:34:11,250
implementing the wheel and are you aware

00:34:09,720 --> 00:34:14,490
of any good open-source projects that

00:34:11,250 --> 00:34:15,839
say this is a door management system

00:34:14,490 --> 00:34:18,899
that we can all use that we can all

00:34:15,839 --> 00:34:21,059
contribute to that sort of specifically

00:34:18,899 --> 00:34:23,010
a door management system there's there's

00:34:21,059 --> 00:34:25,710
a whole niche that I never thought would

00:34:23,010 --> 00:34:27,899
be a requirement but let's create one I

00:34:25,710 --> 00:34:29,250
think you could probably get away with

00:34:27,899 --> 00:34:32,490
using something

00:34:29,250 --> 00:34:34,230
home assistant which is the open source

00:34:32,490 --> 00:34:35,910
platform that'll just spin up on a

00:34:34,230 --> 00:34:38,400
Raspberry Pi and you could use something

00:34:35,910 --> 00:34:39,630
like that as well as an identity

00:34:38,400 --> 00:34:42,419
provider if you wanted to run your own

00:34:39,630 --> 00:34:46,830
you can get ki cloak which is a locally

00:34:42,419 --> 00:34:47,790
running compliant ID provider or you can

00:34:46,830 --> 00:34:49,890
spin off into the cloud and use

00:34:47,790 --> 00:34:54,270
something like all-zero but in terms of

00:34:49,890 --> 00:34:55,260
a particular existing firm for door

00:34:54,270 --> 00:34:57,690
management I would say there's probably

00:34:55,260 --> 00:34:59,970
not one I mean there might be some for

00:34:57,690 --> 00:35:01,830
the traditional ways that doors work in

00:34:59,970 --> 00:35:03,540
terms of normal access within office

00:35:01,830 --> 00:35:06,780
buildings which doesn't use JSON web

00:35:03,540 --> 00:35:09,630
tokens it uses essentially of an

00:35:06,780 --> 00:35:11,220
infinitely long lived token that gets

00:35:09,630 --> 00:35:13,560
verified every time from a central

00:35:11,220 --> 00:35:14,430
service you might be able to find that

00:35:13,560 --> 00:35:14,850
but I don't think that's what you're

00:35:14,430 --> 00:35:17,640
after

00:35:14,850 --> 00:35:21,240
well I was thinking more the system that

00:35:17,640 --> 00:35:24,570
manages the the door latch and the RFID

00:35:21,240 --> 00:35:25,890
and all that sort of thing maybe more

00:35:24,570 --> 00:35:30,720
for different kinds of also that's sort

00:35:25,890 --> 00:35:33,050
of different times that types of warth

00:35:30,720 --> 00:35:37,050
would be an interesting one to add in

00:35:33,050 --> 00:35:38,670
and in fact there's a new one that like

00:35:37,050 --> 00:35:42,540
in terms of all flows this one here is

00:35:38,670 --> 00:35:43,500
using the I always figured the names of

00:35:42,540 --> 00:35:45,810
all the different flows I think it's

00:35:43,500 --> 00:35:46,830
implicit it's one of your first there's

00:35:45,810 --> 00:35:49,740
a new one coming out called the Vice

00:35:46,830 --> 00:35:50,820
flow which is really useful would work

00:35:49,740 --> 00:35:52,770
well in this the door would need

00:35:50,820 --> 00:35:55,230
internet connectivity but it actually

00:35:52,770 --> 00:35:57,690
becomes part of their back to back

00:35:55,230 --> 00:36:02,370
authentication flow verification system

00:35:57,690 --> 00:36:04,050
so it's most useful if you have like a I

00:36:02,370 --> 00:36:06,030
don't know playstation connected a TV

00:36:04,050 --> 00:36:08,250
and you need to log into some systems

00:36:06,030 --> 00:36:10,020
and you're using like the controller to

00:36:08,250 --> 00:36:14,160
type your password in it's nasty right

00:36:10,020 --> 00:36:16,200
so a device flow will allow the display

00:36:14,160 --> 00:36:18,570
for the PlayStation or your whatever it

00:36:16,200 --> 00:36:21,390
is you are connected to show a QR code

00:36:18,570 --> 00:36:22,980
or some kind of URL maybe and then by

00:36:21,390 --> 00:36:25,500
clicking on that your the device that

00:36:22,980 --> 00:36:27,390
you're using to scan the QR code becomes

00:36:25,500 --> 00:36:29,430
the authentication vector so you log in

00:36:27,390 --> 00:36:33,330
there and the token is then passed to

00:36:29,430 --> 00:36:35,910
the device device which is why it's

00:36:33,330 --> 00:36:38,070
called device flow and authenticate so

00:36:35,910 --> 00:36:39,780
you've got a better way of putting your

00:36:38,070 --> 00:36:41,280
credentials in so if you looked at

00:36:39,780 --> 00:36:42,510
device flow as a mechanism for this you

00:36:41,280 --> 00:36:43,380
could actually use something like push

00:36:42,510 --> 00:36:47,489
no to

00:36:43,380 --> 00:36:50,669
pass woodless authentication with QR

00:36:47,489 --> 00:36:51,630
code and device flow and roll a door

00:36:50,669 --> 00:36:52,949
lock mechanism that way

00:36:51,630 --> 00:36:56,609
so I think there are so many different

00:36:52,949 --> 00:36:58,650
ways of doing it that having one system

00:36:56,609 --> 00:37:01,650
that will provide a framework or a

00:36:58,650 --> 00:37:03,630
library to support that probably not out

00:37:01,650 --> 00:37:06,059
there yet but when you create it let me

00:37:03,630 --> 00:37:12,599
know and I'll be happy to to try it out

00:37:06,059 --> 00:37:14,369
I can give you some insight baseball on

00:37:12,599 --> 00:37:17,159
that from prior to working in the super

00:37:14,369 --> 00:37:20,849
secure smart home space I worked for in

00:37:17,159 --> 00:37:22,919
the physical security space and there is

00:37:20,849 --> 00:37:26,819
actually a company who does a thing that

00:37:22,919 --> 00:37:30,359
is all offline and in there RFID cards

00:37:26,819 --> 00:37:32,519
they do viral key distribution now that

00:37:30,359 --> 00:37:33,839
opens so many questions about how are

00:37:32,519 --> 00:37:35,159
you making sure that the viral key

00:37:33,839 --> 00:37:38,969
distribution is a key you want

00:37:35,159 --> 00:37:40,169
distributed but theoretically they've

00:37:38,969 --> 00:37:42,569
thought about that but of course it's

00:37:40,169 --> 00:37:44,729
all closed source and who knows but the

00:37:42,569 --> 00:37:47,279
other interesting thing from a hardware

00:37:44,729 --> 00:37:50,880
perspective is there is a sort of

00:37:47,279 --> 00:37:52,589
standard called Wiegand and that is how

00:37:50,880 --> 00:37:53,939
your reader on the outside is supposed

00:37:52,589 --> 00:37:56,219
to connect to your Hardware on the

00:37:53,939 --> 00:37:58,199
inside so it's all data there's no way

00:37:56,219 --> 00:38:00,599
to rip out off the wall and short the

00:37:58,199 --> 00:38:01,979
lock or anything like that so that then

00:38:00,599 --> 00:38:03,809
you have a door control panel on the

00:38:01,979 --> 00:38:06,329
inside I don't know if anyone's made an

00:38:03,809 --> 00:38:08,339
open-source panel but wouldn't be that

00:38:06,329 --> 00:38:10,289
hard to rip off one of the commercial

00:38:08,339 --> 00:38:12,239
ones anyway because they're basically a

00:38:10,289 --> 00:38:17,640
weekend thing a microcontroller and some

00:38:12,239 --> 00:38:19,349
relays yeah absolutely so for the

00:38:17,640 --> 00:38:21,900
recording when you say rip off you mean

00:38:19,349 --> 00:38:23,519
inspired by I cannot personally condone

00:38:21,900 --> 00:38:27,269
or endorse any kind of ripping off of

00:38:23,519 --> 00:38:29,549
anything but anyway just in case you

00:38:27,269 --> 00:38:31,499
wanted to go exploring that's the the

00:38:29,549 --> 00:38:33,059
place to start most of them because they

00:38:31,499 --> 00:38:34,409
don't have nice pretty enclosures on

00:38:33,059 --> 00:38:36,869
them have all the photos of their

00:38:34,409 --> 00:38:38,099
circuit boards out there I don't think

00:38:36,869 --> 00:38:39,329
in fairness any of them actually

00:38:38,099 --> 00:38:41,249
consider their circuit boards

00:38:39,329 --> 00:38:44,369
particularly secretive or anything

00:38:41,249 --> 00:38:47,130
they're all about their software we

00:38:44,369 --> 00:38:48,719
don't have time for any more oh look we

00:38:47,130 --> 00:38:51,659
will squeeze in one more because you got

00:38:48,719 --> 00:38:53,549
in before I said it but then we've got

00:38:51,659 --> 00:38:56,809
morning tea I'll come to you seeing as

00:38:53,549 --> 00:38:56,809
I'm gonna be nice now

00:38:59,670 --> 00:39:02,950
thank you very much for that is good to

00:39:01,600 --> 00:39:05,440
see other people with circuit boards and

00:39:02,950 --> 00:39:06,910
why it's going everywhere was there any

00:39:05,440 --> 00:39:08,650
particular security reason you

00:39:06,910 --> 00:39:10,750
associated the private key with the user

00:39:08,650 --> 00:39:12,610
instead of with the device because if

00:39:10,750 --> 00:39:13,990
you associate privately but the user

00:39:12,610 --> 00:39:15,790
you've got to get somehow hundreds of

00:39:13,990 --> 00:39:18,790
potentially public keys into these

00:39:15,790 --> 00:39:20,830
devices we jump connected so the the

00:39:18,790 --> 00:39:22,810
public private key is based on the

00:39:20,830 --> 00:39:24,610
application which is the terminology

00:39:22,810 --> 00:39:27,100
used within all Syria and how it works

00:39:24,610 --> 00:39:30,850
within other identity providers so it's

00:39:27,100 --> 00:39:33,700
it's the it's locked into the treat the

00:39:30,850 --> 00:39:36,040
doors the API the API has the public key

00:39:33,700 --> 00:39:37,600
and then the mobile device has the

00:39:36,040 --> 00:39:40,590
private key purely for being able to

00:39:37,600 --> 00:39:42,520
connect to the identity provider as a

00:39:40,590 --> 00:39:43,930
authentication mechanism does that mean

00:39:42,520 --> 00:39:46,120
every mobile device would have the same

00:39:43,930 --> 00:39:47,770
private key then as with the question

00:39:46,120 --> 00:39:49,450
before on how you'd roll that out you

00:39:47,770 --> 00:39:51,370
could have the same for every device and

00:39:49,450 --> 00:39:53,770
every door or you could rotate them you

00:39:51,370 --> 00:39:55,630
could have an application you have a an

00:39:53,770 --> 00:39:59,500
application within the the dashboard

00:39:55,630 --> 00:40:02,590
setting per implementation what's the

00:39:59,500 --> 00:40:05,140
time the standard usually for rolling

00:40:02,590 --> 00:40:07,630
out any kind of mobile app is that you

00:40:05,140 --> 00:40:09,340
would use the same key because it's an

00:40:07,630 --> 00:40:10,570
application that runs but is running on

00:40:09,340 --> 00:40:13,060
this device in this device in this

00:40:10,570 --> 00:40:14,980
device and it's a way of logging in but

00:40:13,060 --> 00:40:18,100
of course then you're facing the the key

00:40:14,980 --> 00:40:19,210
rotation constraint you can roll update

00:40:18,100 --> 00:40:20,380
air to the mobile phones quite easily

00:40:19,210 --> 00:40:23,350
but you can't roll them out to the door

00:40:20,380 --> 00:40:24,910
it has a yearly okay I I'm it's that

00:40:23,350 --> 00:40:26,470
fact that it was and the security

00:40:24,910 --> 00:40:28,000
Association was with the application not

00:40:26,470 --> 00:40:33,630
with the user yeah it's not the user

00:40:28,000 --> 00:40:36,670
okay thank you very much thank you we

00:40:33,630 --> 00:40:39,360
will give Ben a round of applause

00:40:36,670 --> 00:40:39,360

YouTube URL: https://www.youtube.com/watch?v=Lrp3l8yKOyY


