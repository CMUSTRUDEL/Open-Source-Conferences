Title: "Goodbye Print Statements, Hello Debugger!" - Nina Zakharenko (PyCon AU 2019)
Publication date: 2019-08-03
Playlist: PyCon Australia 2019
Description: 
	Nina Zakharenko

Still debugging your code with print statements? Learn how to level up your ability to troubleshoot complex code situations by using the power of a fully-featured debugger in this talk aimed at all levels of programming ability.

https://2019.pycon-au.org/talks/goodbye-print-statements-hello-debugger

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 2 - 6 2019.

Video licence: CC BY-NC-SA 4.0 - https://creativecommons.org/licenses/by-nc-sa/4.0/

Python, PyCon, PyConAU

Sat Aug  3 11:10:00 2019 at Cockle Bay
Captions: 
	00:00:00,199 --> 00:00:05,790
all right welcome back everybody thank

00:00:03,270 --> 00:00:07,470
you very much for coming so a next

00:00:05,790 --> 00:00:08,910
speaker for this session is Nina's a

00:00:07,470 --> 00:00:11,070
Korean curry with her talk

00:00:08,910 --> 00:00:14,960
goodbye print statements hello debugger

00:00:11,070 --> 00:00:14,960
let's make her welcome thank you

00:00:18,140 --> 00:00:22,970
hello PyCon Australia good morning my

00:00:22,140 --> 00:00:26,310
name is Nina

00:00:22,970 --> 00:00:29,550
show of hands totally no judgment zone

00:00:26,310 --> 00:00:32,460
here when you run into a bug in your

00:00:29,550 --> 00:00:34,950
code that needs investigating how many

00:00:32,460 --> 00:00:40,350
of you use print to debug your code oh

00:00:34,950 --> 00:00:44,969
wow okay the majority of you you're in

00:00:40,350 --> 00:00:47,760
the right place how many of you use P DB

00:00:44,969 --> 00:00:50,190
or IP DB for command-line debugging okay

00:00:47,760 --> 00:00:54,600
maybe about 10 percent and then how many

00:00:50,190 --> 00:00:57,570
of you use the debugger in your IDE okay

00:00:54,600 --> 00:01:00,270
maybe about 20 percent um today I'm

00:00:57,570 --> 00:01:02,520
going to talk to you about the benefits

00:01:00,270 --> 00:01:03,899
of using debuggers when programming in

00:01:02,520 --> 00:01:05,909
Python I'm going to show you a few

00:01:03,899 --> 00:01:07,560
different types and hopefully you're all

00:01:05,909 --> 00:01:09,030
going to learn something new in this

00:01:07,560 --> 00:01:11,430
talk the slides are going to be

00:01:09,030 --> 00:01:13,140
available afterwards there are plenty of

00:01:11,430 --> 00:01:15,150
additional resources throughout just

00:01:13,140 --> 00:01:16,710
download them to follow the links and

00:01:15,150 --> 00:01:21,659
they're gonna be available at you know

00:01:16,710 --> 00:01:23,610
dot 2/8 u19 and that link is present

00:01:21,659 --> 00:01:26,360
throughout the slides so don't feel the

00:01:23,610 --> 00:01:29,700
need to jot it down you know right away

00:01:26,360 --> 00:01:32,460
so a little bit about me I work at

00:01:29,700 --> 00:01:35,700
Microsoft as a Python cloud developer

00:01:32,460 --> 00:01:38,009
advocate where I focus on making PS code

00:01:35,700 --> 00:01:39,380
and as you're easier to use for Python

00:01:38,009 --> 00:01:42,299
developers everywhere

00:01:39,380 --> 00:01:45,149
that's the keep mascot for our team bit

00:01:42,299 --> 00:01:46,740
if you think that is cute please find me

00:01:45,149 --> 00:01:49,320
out in the hallway afterwards for a

00:01:46,740 --> 00:01:54,750
sticker and I might even have some

00:01:49,320 --> 00:01:57,000
contraband Clippy stickers to share I've

00:01:54,750 --> 00:01:59,130
written software for over a decade at

00:01:57,000 --> 00:02:00,780
companies like meetup reddit and HBO and

00:01:59,130 --> 00:02:04,350
I've worked on projects big and small in

00:02:00,780 --> 00:02:06,570
a wide variety of organizations I think

00:02:04,350 --> 00:02:09,959
it would be fun to try something during

00:02:06,570 --> 00:02:11,160
this talk if you're if you're learning

00:02:09,959 --> 00:02:13,170
something new

00:02:11,160 --> 00:02:15,060
go ahead and share tweet you can use the

00:02:13,170 --> 00:02:17,940
hashtag Pike on a you and if you'd like

00:02:15,060 --> 00:02:21,180
to tag me on Twitter at nnj a it's like

00:02:17,940 --> 00:02:23,490
ninja without the I now what are you

00:02:21,180 --> 00:02:25,170
going to learn today I'm gonna talk

00:02:23,490 --> 00:02:27,080
about why you should use the buggers I'm

00:02:25,170 --> 00:02:30,030
gonna cover breakpoints and other

00:02:27,080 --> 00:02:33,720
debugger fundamentals you talk about my

00:02:30,030 --> 00:02:36,690
workflow some tools pdb IP DBE ide use

00:02:33,720 --> 00:02:38,880
the new breakpoint method and python 3 7

00:02:36,690 --> 00:02:40,740
and then I'm going to cover some demos

00:02:38,880 --> 00:02:43,920
tips and tricks and some guidance on

00:02:40,740 --> 00:02:47,670
when to use what but a quick disclaimer

00:02:43,920 --> 00:02:49,830
that this is my way you know there are

00:02:47,670 --> 00:02:51,450
many tools and workflows available for

00:02:49,830 --> 00:02:53,700
debugging I'm gonna show you the

00:02:51,450 --> 00:02:55,290
workflow that I use that doesn't mean

00:02:53,700 --> 00:02:57,270
it's gonna be the right one for you so

00:02:55,290 --> 00:03:01,200
choose what works best for your

00:02:57,270 --> 00:03:03,360
situation now if you're already using

00:03:01,200 --> 00:03:06,660
prints you might be wondering what's the

00:03:03,360 --> 00:03:09,540
point of using debuggers at all the

00:03:06,660 --> 00:03:11,430
problem with print is print doesn't

00:03:09,540 --> 00:03:13,830
really give you a lot of context if

00:03:11,430 --> 00:03:15,830
you've put prints in your code probably

00:03:13,830 --> 00:03:17,700
pretty familiar with the process of

00:03:15,830 --> 00:03:19,530
tweaking what you're printing out

00:03:17,700 --> 00:03:31,830
because you got it wrong and then adding

00:03:19,530 --> 00:03:33,540
something else you know you're you might

00:03:31,830 --> 00:03:35,460
add something else and then rerun your

00:03:33,540 --> 00:03:37,320
code and then tweak your formatting and

00:03:35,460 --> 00:03:41,010
run it again and it's a little bit

00:03:37,320 --> 00:03:47,640
tedious right so I'm going to show you a

00:03:41,010 --> 00:03:49,440
little demo application and it kind of

00:03:47,640 --> 00:03:55,160
looks like this it's a little bit of a

00:03:49,440 --> 00:03:55,160
flask app and yep

00:04:08,739 --> 00:04:15,030
how's that can everyone hear me is that

00:04:11,319 --> 00:04:15,030
better okay great

00:04:15,040 --> 00:04:19,449
my favorite cheesy joke is that if

00:04:17,500 --> 00:04:22,169
technology worked like we expected it to

00:04:19,449 --> 00:04:27,280
we would all be out of a job

00:04:22,169 --> 00:04:29,320
yeah so here we have just a little flask

00:04:27,280 --> 00:04:32,530
application it has feed get hub Search

00:04:29,320 --> 00:04:40,720
API for a handful of languages and it

00:04:32,530 --> 00:04:43,150
lists some popular ones by stars and the

00:04:40,720 --> 00:04:45,040
EPI data here comes back as JSON you

00:04:43,150 --> 00:04:46,540
know pretty standard stuff something

00:04:45,040 --> 00:04:49,810
that the majority of us have probably

00:04:46,540 --> 00:04:52,900
ought to do and the meat of the code

00:04:49,810 --> 00:04:55,750
here is we're going to call an API in

00:04:52,900 --> 00:04:57,729
this repos with most stars method and

00:04:55,750 --> 00:05:02,910
we're going to get some JSON back from

00:04:57,729 --> 00:05:05,169
the API so how would we debug an issue

00:05:02,910 --> 00:05:07,180
with this with print because working

00:05:05,169 --> 00:05:08,770
with JSON can be kind of annoying right

00:05:07,180 --> 00:05:12,840
sometimes data doesn't show up how you

00:05:08,770 --> 00:05:17,620
expect to other tens there are large

00:05:12,840 --> 00:05:21,550
nested data structures and so you might

00:05:17,620 --> 00:05:23,740
go into your code here and you know go

00:05:21,550 --> 00:05:25,419
into this method and we get some items

00:05:23,740 --> 00:05:29,800
back and maybe I'm just going to throw a

00:05:25,419 --> 00:05:33,070
print in there and you know if we go

00:05:29,800 --> 00:05:35,200
back and we run that code and then I'm

00:05:33,070 --> 00:05:37,510
just gonna click on that link to visit

00:05:35,200 --> 00:05:41,200
our website and I'm gonna get my print

00:05:37,510 --> 00:05:43,690
back and you know this sucks and so then

00:05:41,200 --> 00:05:45,370
you go through the iterations of you

00:05:43,690 --> 00:05:53,070
know figuring out what keys you want and

00:05:45,370 --> 00:05:55,860
modifying things and you know genius so

00:05:53,070 --> 00:05:58,479
here's where a debugger can help because

00:05:55,860 --> 00:06:00,580
with the debugger you're using a tool

00:05:58,479 --> 00:06:02,050
made for the job a debugger is gonna

00:06:00,580 --> 00:06:04,780
drop you into the point of execution

00:06:02,050 --> 00:06:06,220
allowing you not just to see the string

00:06:04,780 --> 00:06:08,440
representation of what you're trying to

00:06:06,220 --> 00:06:10,389
examine but it's gonna actually allow

00:06:08,440 --> 00:06:12,789
you to call it to examine the arguments

00:06:10,389 --> 00:06:14,740
to a given function to examine other

00:06:12,789 --> 00:06:18,789
values and variables and the scope and a

00:06:14,740 --> 00:06:19,310
lot more a debugger lets you examine the

00:06:18,789 --> 00:06:21,770
state

00:06:19,310 --> 00:06:24,230
of a running program you can even write

00:06:21,770 --> 00:06:26,120
new snippets of code change values

00:06:24,230 --> 00:06:28,970
experiment to your heart's content here

00:06:26,120 --> 00:06:32,690
a lot of folks starting out in Python or

00:06:28,970 --> 00:06:34,760
even experts I've met you know senior

00:06:32,690 --> 00:06:36,650
architects and developers who still use

00:06:34,760 --> 00:06:39,800
print statements our prints because

00:06:36,650 --> 00:06:41,540
that's what they're used to it just

00:06:39,800 --> 00:06:43,520
seems like there's too much overhead too

00:06:41,540 --> 00:06:45,350
much stuff to learn you know using print

00:06:43,520 --> 00:06:46,790
is so familiar but I really want to show

00:06:45,350 --> 00:06:48,740
you that there's nothing to be afraid of

00:06:46,790 --> 00:06:50,060
you can get started with debuggers in no

00:06:48,740 --> 00:06:52,970
time at all and it's really going to

00:06:50,060 --> 00:06:54,770
supercharge how you write your code and

00:06:52,970 --> 00:06:57,110
how you find bugs and you're not gonna

00:06:54,770 --> 00:06:58,880
have to clean up print statements

00:06:57,110 --> 00:07:00,350
littered all over your code when you're

00:06:58,880 --> 00:07:03,320
trying to examine the state of multiple

00:07:00,350 --> 00:07:05,090
objects once I gave up using print to

00:07:03,320 --> 00:07:09,200
debug my productivity as a programmer

00:07:05,090 --> 00:07:11,830
really increased and your skin too so

00:07:09,200 --> 00:07:16,370
let's take a look at what debugging

00:07:11,830 --> 00:07:19,270
might look like going back to our code

00:07:16,370 --> 00:07:23,540
here I'm just going to take this out and

00:07:19,270 --> 00:07:26,120
notice that this is Python 37 and in

00:07:23,540 --> 00:07:29,360
Python 37 there's a new breakpoint

00:07:26,120 --> 00:07:31,010
method right there and by default with

00:07:29,360 --> 00:07:34,610
nothing set it's going to drop you into

00:07:31,010 --> 00:07:37,669
the pdb debugger pdb is included in the

00:07:34,610 --> 00:07:42,710
standard library so going back to our

00:07:37,669 --> 00:07:44,260
terminal let's run that and I'm just

00:07:42,710 --> 00:07:48,260
going to click on that link there and

00:07:44,260 --> 00:07:51,650
we'll see now there's an arrow here so

00:07:48,260 --> 00:07:54,530
this tells me we're in the execution

00:07:51,650 --> 00:07:56,990
flow I am and now I'm here I see a PDB

00:07:54,530 --> 00:08:00,710
prompt and that means I've hit my

00:07:56,990 --> 00:08:03,560
breakpoint and I can start debugging so

00:08:00,710 --> 00:08:05,300
there are a few useful methods that you

00:08:03,560 --> 00:08:08,150
can do here I can do list that's going

00:08:05,300 --> 00:08:13,880
to show me exactly where in the code I

00:08:08,150 --> 00:08:15,770
am I can examine the variables in my

00:08:13,880 --> 00:08:18,050
workspace so I can find out the length

00:08:15,770 --> 00:08:20,690
of items let's say I want to just play

00:08:18,050 --> 00:08:23,840
around and get the very first item you

00:08:20,690 --> 00:08:26,570
know I can easily do that and just pull

00:08:23,840 --> 00:08:29,570
it out or even grab a slice you know

00:08:26,570 --> 00:08:33,770
type of that item it's a dictionary

00:08:29,570 --> 00:08:38,510
I can even interact and that's going to

00:08:33,770 --> 00:08:44,710
drop me into Python Ripple that has all

00:08:38,510 --> 00:08:47,180
of the same variables available so to

00:08:44,710 --> 00:08:50,150
exit the interactive console I would hit

00:08:47,180 --> 00:08:52,910
control D once and then to exit

00:08:50,150 --> 00:08:55,340
debugging I can either do a key or a

00:08:52,910 --> 00:08:57,700
control D to exit but in this case I'm

00:08:55,340 --> 00:09:02,860
gonna type continue and let my program

00:08:57,700 --> 00:09:07,460
finish running a little bit better right

00:09:02,860 --> 00:09:14,480
it's gonna save you some time but wait

00:09:07,460 --> 00:09:16,730
there's more because at the end of the

00:09:14,480 --> 00:09:19,340
day I'm finding and fixing bugs it's a

00:09:16,730 --> 00:09:20,900
process of confirming one by one that

00:09:19,340 --> 00:09:23,150
the things that you believe to be true

00:09:20,900 --> 00:09:25,550
about the code are actually true and

00:09:23,150 --> 00:09:29,810
when you find an assumption that isn't

00:09:25,550 --> 00:09:32,720
you found a clue there's a few types of

00:09:29,810 --> 00:09:34,610
debuggers that we can use command line

00:09:32,720 --> 00:09:36,530
ones PDD is included in the standard

00:09:34,610 --> 00:09:38,060
library it's a great option it's

00:09:36,530 --> 00:09:41,540
portable you don't need to install

00:09:38,060 --> 00:09:45,560
anything else at all I tend to use IP DB

00:09:41,540 --> 00:09:47,450
it has nice ipython like features like

00:09:45,560 --> 00:09:49,100
syntax highlighting better tab

00:09:47,450 --> 00:09:51,320
completion and that's what I'm going to

00:09:49,100 --> 00:09:55,730
be showing you in my demos today you can

00:09:51,320 --> 00:09:59,330
get I PDB via pip install IP DB and

00:09:55,730 --> 00:10:03,140
there are a lot more options in this

00:09:59,330 --> 00:10:04,580
category so using ipython command line

00:10:03,140 --> 00:10:07,820
debugging might look something like this

00:10:04,580 --> 00:10:09,440
and if you're not comfortable on the

00:10:07,820 --> 00:10:11,930
command line or you prefer graphical

00:10:09,440 --> 00:10:13,460
tools or you already use an IDE there

00:10:11,930 --> 00:10:14,930
are plenty of options that are available

00:10:13,460 --> 00:10:18,080
as well

00:10:14,930 --> 00:10:20,390
pyou DB is kind of a mix of both it's a

00:10:18,080 --> 00:10:23,870
kind of a graphical CLI

00:10:20,390 --> 00:10:26,540
then there are IDE s I use Visual Studio

00:10:23,870 --> 00:10:28,750
code for my daily editor so that's what

00:10:26,540 --> 00:10:31,190
I'm going to be showing you in my demos

00:10:28,750 --> 00:10:35,660
pycharm also has a great debugger and

00:10:31,190 --> 00:10:39,020
many others and so a IDE debugger might

00:10:35,660 --> 00:10:41,390
look something like this the foundation

00:10:39,020 --> 00:10:42,300
of either of these methods of debugging

00:10:41,390 --> 00:10:47,570
is the break

00:10:42,300 --> 00:10:50,340
point a breakpoint is like a trap

00:10:47,570 --> 00:10:52,290
so you're just kind of you know walking

00:10:50,340 --> 00:10:54,450
along and you trip on something it's

00:10:52,290 --> 00:10:57,720
your break point it's gonna stop the

00:10:54,450 --> 00:11:00,570
flow of execution in your program

00:10:57,720 --> 00:11:04,080
like I said in Python 37 you can use

00:11:00,570 --> 00:11:07,530
break point it's really nice a really

00:11:04,080 --> 00:11:10,260
great reason for upgrading because there

00:11:07,530 --> 00:11:12,390
are quite a few advantages you can set

00:11:10,260 --> 00:11:15,870
your debugger of choice via an

00:11:12,390 --> 00:11:18,600
environment variable so I prefer IPTV

00:11:15,870 --> 00:11:23,120
now but I might want to use something

00:11:18,600 --> 00:11:25,980
else later and by setting the breakpoint

00:11:23,120 --> 00:11:27,450
environment variable to how you would

00:11:25,980 --> 00:11:29,990
set a breakpoint in your tool I can

00:11:27,450 --> 00:11:32,430
easily switch it out later in the future

00:11:29,990 --> 00:11:33,720
another advantage with break point is

00:11:32,430 --> 00:11:37,440
that there is an environment variable

00:11:33,720 --> 00:11:41,190
that you can set a flag that will allow

00:11:37,440 --> 00:11:42,990
you to skip any breakpoints in execution

00:11:41,190 --> 00:11:47,340
I'm going to talk about why that's

00:11:42,990 --> 00:11:50,400
important a little bit later on okay if

00:11:47,340 --> 00:11:52,950
you're not running Python 3 7 there are

00:11:50,400 --> 00:11:54,960
other ways to separate points for CLI

00:11:52,950 --> 00:11:58,320
debugging you can add them directly to

00:11:54,960 --> 00:12:00,990
your code for PDB it's just PDB you know

00:11:58,320 --> 00:12:05,670
import PDB and then PDB set trace for IP

00:12:00,990 --> 00:12:07,260
DB just add an eye to both places or the

00:12:05,670 --> 00:12:10,710
second way is you can set them

00:12:07,260 --> 00:12:15,300
interactively so you can run a PDB as a

00:12:10,710 --> 00:12:16,830
module with that - em flag and then you

00:12:15,300 --> 00:12:20,610
can just type in where you want your

00:12:16,830 --> 00:12:22,500
breakpoints to be know that with option

00:12:20,610 --> 00:12:26,070
number one you know this is a little bit

00:12:22,500 --> 00:12:30,990
harder to disable and with option number

00:12:26,070 --> 00:12:32,760
two if your code moves around your

00:12:30,990 --> 00:12:37,110
breakpoint line numbers might change

00:12:32,760 --> 00:12:39,990
right so I prefer using number one the

00:12:37,110 --> 00:12:44,760
first approach exclusively but to eat

00:12:39,990 --> 00:12:46,590
your own and they're just really kind of

00:12:44,760 --> 00:12:48,630
a handful of debugger fundamentals

00:12:46,590 --> 00:12:51,360
there's five really important commands

00:12:48,630 --> 00:12:54,150
and you you can learn more about your

00:12:51,360 --> 00:12:56,200
tooling as you use it and figure out

00:12:54,150 --> 00:12:57,550
what you need but there

00:12:56,200 --> 00:13:00,880
only a handful of things you need to be

00:12:57,550 --> 00:13:03,040
productive the first is L for list or ll

00:13:00,880 --> 00:13:04,840
for long list that's going to print out

00:13:03,040 --> 00:13:06,940
the code around the breakpoint that was

00:13:04,840 --> 00:13:09,820
hit and is going to go to the next line

00:13:06,940 --> 00:13:11,860
s is step in queue so if there's a

00:13:09,820 --> 00:13:13,570
method being called it's going to jump

00:13:11,860 --> 00:13:16,210
into that method otherwise it's just

00:13:13,570 --> 00:13:19,660
going to go to the next line C is going

00:13:16,210 --> 00:13:22,600
to continue until the next breakpoint or

00:13:19,660 --> 00:13:25,840
the program completes and then most

00:13:22,600 --> 00:13:27,670
importantly H for help with an optional

00:13:25,840 --> 00:13:31,510
command if you forget what any of these

00:13:27,670 --> 00:13:36,610
do you can just bring up helpful help

00:13:31,510 --> 00:13:39,460
menu and there are lots of other really

00:13:36,610 --> 00:13:41,500
useful commands like R for a return that

00:13:39,460 --> 00:13:43,240
jumps to the return for the current

00:13:41,500 --> 00:13:44,560
function and execution which could be

00:13:43,240 --> 00:13:49,810
useful if you have multiple return

00:13:44,560 --> 00:13:51,310
statements or J will let you jump to a

00:13:49,810 --> 00:13:54,520
line and that will help you break out of

00:13:51,310 --> 00:13:57,010
a loop but start with the basic commands

00:13:54,520 --> 00:13:58,780
have things in as you need them there's

00:13:57,010 --> 00:14:01,750
gonna be a link to download this cheat

00:13:58,780 --> 00:14:08,110
sheet on my website and yes my cheat

00:14:01,750 --> 00:14:10,510
sheets do match my hair okay so let's

00:14:08,110 --> 00:14:13,350
see a little bit more of debugging in

00:14:10,510 --> 00:14:13,350
the CLI

00:14:20,450 --> 00:14:26,040
okay coming back here

00:14:23,300 --> 00:14:33,470
the first thing I'm gonna want to do is

00:14:26,040 --> 00:14:33,470
set my Python breakpoint to PDD and

00:14:34,310 --> 00:14:47,029
there we go so now i pdb is going to be

00:14:37,920 --> 00:14:50,790
my debugger and i'm going to move my

00:14:47,029 --> 00:14:55,410
breakpoint here further up in this

00:14:50,790 --> 00:14:58,760
method to just above where i'm creating

00:14:55,410 --> 00:15:03,660
my query and i'm going to save that and

00:14:58,760 --> 00:15:05,490
then i'm gonna run flask and i'm just

00:15:03,660 --> 00:15:08,760
gonna you know instead of having to open

00:15:05,490 --> 00:15:12,900
up the browser i'm just gonna curl which

00:15:08,760 --> 00:15:20,430
will hit my web server and kick off my

00:15:12,900 --> 00:15:23,940
debugger okay so one second here it

00:15:20,430 --> 00:15:31,650
looks like my python breakpoint is not

00:15:23,940 --> 00:15:36,089
set what's going on here aha

00:15:31,650 --> 00:15:38,210
Thank You debugging with a roomful of

00:15:36,089 --> 00:15:38,210
people

00:15:39,480 --> 00:15:45,960
all right thank you

00:15:40,530 --> 00:15:48,450
let's run that and that and there we go

00:15:45,960 --> 00:15:50,640
there's my nice syntax highlighting and

00:15:48,450 --> 00:15:53,490
you'll see a tap complete and all of

00:15:50,640 --> 00:15:57,020
that so now I have a method here where

00:15:53,490 --> 00:16:00,930
I'm creating the query I can enter s

00:15:57,020 --> 00:16:04,430
remember S stands for step and that's

00:16:00,930 --> 00:16:07,980
going to bring me into the create query

00:16:04,430 --> 00:16:09,510
method if I hit L for a list it's going

00:16:07,980 --> 00:16:11,310
to kind of show me where I am

00:16:09,510 --> 00:16:13,740
in the code this looks a little bit

00:16:11,310 --> 00:16:17,730
better if your terminal font size isn't

00:16:13,740 --> 00:16:19,589
bumped all the way up I can do a for

00:16:17,730 --> 00:16:22,589
arcs that's going to tell me what

00:16:19,589 --> 00:16:25,320
arguments the method was called with and

00:16:22,589 --> 00:16:27,720
then n is going to continue on to the

00:16:25,320 --> 00:16:30,780
next line and just like with the

00:16:27,720 --> 00:16:32,640
interpreter Oh some thing you might bump

00:16:30,780 --> 00:16:36,390
into and I still do is

00:16:32,640 --> 00:16:38,550
I'm on line 19 but my query variable

00:16:36,390 --> 00:16:41,190
hasn't actually been defined yet so I

00:16:38,550 --> 00:16:42,720
just need to hit next to go to the next

00:16:41,190 --> 00:16:46,500
line and then I can see what my query

00:16:42,720 --> 00:16:49,560
looks like hitting our will bring me to

00:16:46,500 --> 00:16:51,360
the return and now I can see my fully

00:16:49,560 --> 00:16:53,790
assembled query so these are the

00:16:51,360 --> 00:16:55,649
languages that I have selected and this

00:16:53,790 --> 00:17:00,120
is the minimum number of stars for the

00:16:55,649 --> 00:17:00,779
projects that I want to see if I hit n

00:17:00,120 --> 00:17:03,450
again

00:17:00,779 --> 00:17:05,880
that's now going to pop pop me up one

00:17:03,450 --> 00:17:08,250
level on the stack you know back to the

00:17:05,880 --> 00:17:11,220
repos with most stars method that called

00:17:08,250 --> 00:17:14,870
that create query method and then I can

00:17:11,220 --> 00:17:20,790
kind of go ahead and hit next to just

00:17:14,870 --> 00:17:23,880
continue on there is there are a few

00:17:20,790 --> 00:17:25,949
other really helpful shortcuts one is P

00:17:23,880 --> 00:17:33,860
for print and then double P for pretty

00:17:25,949 --> 00:17:38,900
print so if I wanted to pretty print the

00:17:33,860 --> 00:17:38,900
keys available in my items dictionary

00:17:43,850 --> 00:17:53,220
let's just pick that out if I wanted to

00:17:46,760 --> 00:17:57,390
just print those out oh right I'm sorry

00:17:53,220 --> 00:18:02,400
what I wanted to be doing is looking at

00:17:57,390 --> 00:18:04,830
the very first item okay here we go so

00:18:02,400 --> 00:18:08,610
that's a pretty print of all the Kia's

00:18:04,830 --> 00:18:12,960
that this json dictionary has i'm gonna

00:18:08,610 --> 00:18:16,530
save that to handy variable here another

00:18:12,960 --> 00:18:22,970
nice thing about tab complete here is if

00:18:16,530 --> 00:18:26,520
I hit tab right now yeah IP DB gives me

00:18:22,970 --> 00:18:29,250
you know some pretty helpful suggestions

00:18:26,520 --> 00:18:30,809
there and I want to make sure to close

00:18:29,250 --> 00:18:35,870
that out and there we go

00:18:30,809 --> 00:18:35,870
so I mean huge time-saving tool for me

00:18:36,080 --> 00:18:42,510
and I'm going to continue that and put

00:18:39,090 --> 00:18:50,169
it out okay

00:18:42,510 --> 00:18:52,510
what about debugging in IDE s since I

00:18:50,169 --> 00:18:54,130
like vs code that's what I'm gonna use

00:18:52,510 --> 00:18:56,289
for my daily editor so I'm going to be

00:18:54,130 --> 00:18:58,419
showing its debug capabilities here

00:18:56,289 --> 00:19:01,899
there's just a few setup steps you need

00:18:58,419 --> 00:19:03,190
to download via code the s code comes

00:19:01,899 --> 00:19:04,899
pretty bare-bones

00:19:03,190 --> 00:19:07,000
and the power there is with

00:19:04,899 --> 00:19:11,799
customizations and you're going to need

00:19:07,000 --> 00:19:13,570
to install the Python extension for the

00:19:11,799 --> 00:19:14,799
best experience and then you're also

00:19:13,570 --> 00:19:16,299
going to need to create a debugger

00:19:14,799 --> 00:19:19,389
configuration that looks something like

00:19:16,299 --> 00:19:21,730
this and visual breakpoints are going to

00:19:19,389 --> 00:19:23,350
come up as you're debugging but they

00:19:21,730 --> 00:19:25,600
really just mapped to the same concepts

00:19:23,350 --> 00:19:29,590
we talked about the play arrow is

00:19:25,600 --> 00:19:32,169
continue the arrow that's kind of

00:19:29,590 --> 00:19:34,990
jumping over a well that's next the down

00:19:32,169 --> 00:19:40,210
arrow is step the up arrows up and then

00:19:34,990 --> 00:19:50,169
green reset and red stop button so let's

00:19:40,210 --> 00:19:54,100
look at debugging and BS code I'm gonna

00:19:50,169 --> 00:20:00,130
go ahead and run this back when you want

00:19:54,100 --> 00:20:05,980
to debug in an IDE what you're likely to

00:20:00,130 --> 00:20:07,450
do is you're gonna click on the left

00:20:05,980 --> 00:20:09,970
side of the line number that's called

00:20:07,450 --> 00:20:11,350
the gutter and that's going to set this

00:20:09,970 --> 00:20:13,570
red dot breakpoint

00:20:11,350 --> 00:20:15,700
let me just scroll up so everyone can

00:20:13,570 --> 00:20:17,169
see that it's right there and then in vs

00:20:15,700 --> 00:20:20,710
code you're gonna click on this icon

00:20:17,169 --> 00:20:24,970
here very helpfully no bugs right it's

00:20:20,710 --> 00:20:27,669
like the best icon and this is going to

00:20:24,970 --> 00:20:28,840
bring you up to the debugger window if

00:20:27,669 --> 00:20:30,610
you're just setting up for the first

00:20:28,840 --> 00:20:32,590
time you might not see anything in this

00:20:30,610 --> 00:20:33,940
drop-down so you want to make sure to

00:20:32,590 --> 00:20:35,590
add a configuration and there will be

00:20:33,940 --> 00:20:38,139
some helpful defaults here I'm going to

00:20:35,590 --> 00:20:41,409
select flask because that's what my app

00:20:38,139 --> 00:20:45,970
is and then I'm going to hit on play

00:20:41,409 --> 00:20:48,850
here and you'll see that this code has

00:20:45,970 --> 00:20:50,590
changed the bar on the bottom is now

00:20:48,850 --> 00:20:52,299
orange instead of blue and that's

00:20:50,590 --> 00:20:56,340
letting me know that there's an

00:20:52,299 --> 00:20:56,340
interactive debugger session

00:20:57,100 --> 00:21:03,759
so I'm just going to click on that and

00:20:58,889 --> 00:21:06,250
now I have a yellow arrow telling me

00:21:03,759 --> 00:21:10,779
where my breakpoint was triggered where

00:21:06,250 --> 00:21:12,880
I am in the point of execution and one

00:21:10,779 --> 00:21:16,860
of the really nice things about this

00:21:12,880 --> 00:21:21,130
graphical debugger is I can mouse over

00:21:16,860 --> 00:21:25,470
these variables and my stuff is right

00:21:21,130 --> 00:21:29,980
there right so kind of a lot less typing

00:21:25,470 --> 00:21:31,990
if I want I can use these buttons or I

00:21:29,980 --> 00:21:33,610
can also hover over them and it's going

00:21:31,990 --> 00:21:37,929
to tell me what the keyboard shortcut is

00:21:33,610 --> 00:21:40,570
to activate them there's also something

00:21:37,929 --> 00:21:43,149
called a watch here so these are

00:21:40,570 --> 00:21:44,799
variables that I just really kind of

00:21:43,149 --> 00:21:46,000
want to keep track of and I can add them

00:21:44,799 --> 00:21:50,529
in this little window and they'll always

00:21:46,000 --> 00:21:54,610
be available there's a debug console as

00:21:50,529 --> 00:21:56,289
well so it'll be kind of down here at

00:21:54,610 --> 00:22:00,059
the bottom you just have to go to your

00:21:56,289 --> 00:22:02,649
debug console and there's a really nice

00:22:00,059 --> 00:22:05,620
interactive debug console with like

00:22:02,649 --> 00:22:10,570
autocomplete and everything available as

00:22:05,620 --> 00:22:12,580
well and then here on the bottom you can

00:22:10,570 --> 00:22:15,730
select which breakpoints you want to

00:22:12,580 --> 00:22:19,440
activate so I'm going to disable this

00:22:15,730 --> 00:22:24,990
one for now and I'm going to re-enable

00:22:19,440 --> 00:22:30,250
my breakpoint in index dot HTML and

00:22:24,990 --> 00:22:31,990
index dot HTML is a template so if I go

00:22:30,250 --> 00:22:38,679
ahead and hit play I'm going to see that

00:22:31,990 --> 00:22:40,690
my template that my template breakpoint

00:22:38,679 --> 00:22:44,139
was hit right and so now you can mouse

00:22:40,690 --> 00:22:46,779
over and see what all of these variables

00:22:44,139 --> 00:22:48,190
are set to which is really really nice

00:22:46,779 --> 00:22:50,669
for those of you who have written

00:22:48,190 --> 00:22:50,669
templates

00:22:55,020 --> 00:23:01,780
okay so there are a lot of options when

00:22:58,090 --> 00:23:03,550
do you use what tool like I said I

00:23:01,780 --> 00:23:05,500
rarely use pdb from the standard library

00:23:03,550 --> 00:23:07,120
I find the functionality a little bit

00:23:05,500 --> 00:23:08,470
limited but it's really good to know

00:23:07,120 --> 00:23:10,450
about if you're working on a machine

00:23:08,470 --> 00:23:13,240
where you can't install additional

00:23:10,450 --> 00:23:15,640
dependencies for example my personal

00:23:13,240 --> 00:23:18,730
preference for most small programs and

00:23:15,640 --> 00:23:20,110
scripts I use i PDB you know sometimes

00:23:18,730 --> 00:23:22,000
they just want to work from the command

00:23:20,110 --> 00:23:25,680
line that's where I'm most productive I

00:23:22,000 --> 00:23:29,020
tend to reach for ID debugging when my

00:23:25,680 --> 00:23:31,270
objects get complex or my code base gets

00:23:29,020 --> 00:23:34,480
really large or I need to dive in and

00:23:31,270 --> 00:23:37,870
debug templates but she's the strategy

00:23:34,480 --> 00:23:41,760
that works best for you now a few tips

00:23:37,870 --> 00:23:41,760
and tricks I wanted to share with you a

00:23:41,850 --> 00:23:47,230
really simple one this one took me a

00:23:44,500 --> 00:23:49,510
really long time to figure out I've I've

00:23:47,230 --> 00:23:52,450
wasted a lot of time in my coding career

00:23:49,510 --> 00:23:55,210
just pressing n for next or pressing

00:23:52,450 --> 00:23:57,160
enter to rerun the next command but if

00:23:55,210 --> 00:23:58,360
your debugger is stuck in a loop you

00:23:57,160 --> 00:24:01,300
know maybe you're looping over a really

00:23:58,360 --> 00:24:04,870
large collection you can use J to jump

00:24:01,300 --> 00:24:07,150
to a line outside of it on the CLI or in

00:24:04,870 --> 00:24:10,900
a graphical debugger just set the next

00:24:07,150 --> 00:24:12,610
breakpoint and continue onwards for

00:24:10,900 --> 00:24:14,290
those of you who went to Melanie

00:24:12,610 --> 00:24:16,600
Crutchfield's talk yesterday you know

00:24:14,290 --> 00:24:18,940
how important tests are so if you ever

00:24:16,600 --> 00:24:22,000
get stuck figuring out why a test is

00:24:18,940 --> 00:24:24,220
failing there a break point in that unit

00:24:22,000 --> 00:24:30,330
test I do that all the time it's so

00:24:24,220 --> 00:24:34,180
handy this is one of my favorite hacks I

00:24:30,330 --> 00:24:38,170
showed you that you can enter interact

00:24:34,180 --> 00:24:42,990
to enter just a Python repple from your

00:24:38,170 --> 00:24:45,190
debugger but you can set up a PDB RC

00:24:42,990 --> 00:24:47,770
configuration file and there's a link to

00:24:45,190 --> 00:24:49,990
download mine at the bottom and I've set

00:24:47,770 --> 00:24:52,120
up an alias called interact I but

00:24:49,990 --> 00:24:53,920
instead of dumping me into the Python or

00:24:52,120 --> 00:24:59,140
Apple is going to dump me into an

00:24:53,920 --> 00:25:00,610
ipython rebel and I okay I'll demo that

00:24:59,140 --> 00:25:03,390
for like three seconds because I think

00:25:00,610 --> 00:25:03,390
it's really cool

00:25:03,670 --> 00:25:14,570
so going back into my code I'm just

00:25:06,950 --> 00:25:18,309
going to set a breakpoint here again and

00:25:14,570 --> 00:25:19,520
let's run that here and let's hit that

00:25:18,309 --> 00:25:21,860
okay

00:25:19,520 --> 00:25:25,670
so I showed you interact right this is

00:25:21,860 --> 00:25:27,800
just kind of built-in oops that's not

00:25:25,670 --> 00:25:31,760
what I wanted to do I hit ctrl C instead

00:25:27,800 --> 00:25:34,460
of control D let's do that okay so with

00:25:31,760 --> 00:25:38,330
my new alias interact I I can enter an i

00:25:34,460 --> 00:25:41,300
python Ruppel which is fantastic right i

00:25:38,330 --> 00:25:44,390
can see all the same variables here but

00:25:41,300 --> 00:25:46,070
i'm not going to talk about ipython too

00:25:44,390 --> 00:25:48,200
much but there's a really useful thing

00:25:46,070 --> 00:25:51,530
here called c paste that will let you

00:25:48,200 --> 00:25:54,770
paste in multi-line multi-line methods

00:25:51,530 --> 00:26:00,460
with no problem at all so that one's a

00:25:54,770 --> 00:26:04,490
super nice trick and you just have to do

00:26:00,460 --> 00:26:10,880
ctrl D to exit ipython ctrl D to exit I

00:26:04,490 --> 00:26:14,960
P DB and as a bonus in the latest

00:26:10,880 --> 00:26:16,460
release of yes code the it's officially

00:26:14,960 --> 00:26:17,750
gonna be released in August but I'm

00:26:16,460 --> 00:26:23,059
going to show you a little preview now

00:26:17,750 --> 00:26:24,500
there's Jupiter notebook debugging which

00:26:23,059 --> 00:26:26,720
for those of you who do chip it or

00:26:24,500 --> 00:26:29,120
notebooks I think you might really

00:26:26,720 --> 00:26:29,750
appreciate this keep an eye out for the

00:26:29,120 --> 00:26:33,590
announcement

00:26:29,750 --> 00:26:35,540
aka DMS / pi blog but once you have that

00:26:33,590 --> 00:26:38,210
latest update if you go to a notebook

00:26:35,540 --> 00:26:39,559
you should just see debug cell here and

00:26:38,210 --> 00:26:41,990
that's gonna kick off the debugger and

00:26:39,559 --> 00:26:44,300
let you do line by line debugging and

00:26:41,990 --> 00:26:45,800
there's Jupiter notebook including what

00:26:44,300 --> 00:26:52,040
these like really nice like hover

00:26:45,800 --> 00:26:53,720
actions so definitely check that out and

00:26:52,040 --> 00:26:55,760
if you got just here you don't want to

00:26:53,720 --> 00:26:59,300
leave your breakpoints in production

00:26:55,760 --> 00:27:01,280
code it could halt your entire running

00:26:59,300 --> 00:27:04,220
program you don't want to be responsible

00:27:01,280 --> 00:27:05,540
for that if you use Python 37 and break

00:27:04,220 --> 00:27:07,460
point you can use an environment

00:27:05,540 --> 00:27:10,070
variable to prevent that but it's really

00:27:07,460 --> 00:27:12,260
still best practice to not commit code

00:27:10,070 --> 00:27:14,630
with breakpoints in it so a tip here is

00:27:12,260 --> 00:27:16,880
to use get pre-commit hooks you can

00:27:14,630 --> 00:27:19,580
prevent commits that match conditions

00:27:16,880 --> 00:27:21,920
I use pre - commit comm there's a lot of

00:27:19,580 --> 00:27:24,560
built-in ones it's written in Python you

00:27:21,920 --> 00:27:26,900
can just pip install / - commit and

00:27:24,560 --> 00:27:31,280
there's a debug that's - statements hook

00:27:26,900 --> 00:27:33,460
checks for PDP IP DB breakpoint and all

00:27:31,280 --> 00:27:37,820
the rest and it's kind of smart it uses

00:27:33,460 --> 00:27:39,950
the ast it doesn't just you know check

00:27:37,820 --> 00:27:41,150
for those keywords in a file and it's

00:27:39,950 --> 00:27:43,580
going to be a lot easier to future-proof

00:27:41,150 --> 00:27:46,160
as you know python the language grows

00:27:43,580 --> 00:27:47,660
and you debuggers become available and

00:27:46,160 --> 00:27:50,180
you can set up other pre-commit hooks

00:27:47,660 --> 00:27:53,350
for example to run a linter to check for

00:27:50,180 --> 00:27:56,660
trailing whitespace unused imports etc

00:27:53,350 --> 00:27:58,610
okay so by now you should have a basic

00:27:56,660 --> 00:28:00,620
understanding of how the bugging works

00:27:58,610 --> 00:28:03,050
in Python as well as the tools available

00:28:00,620 --> 00:28:06,290
from PDD in the standard library -

00:28:03,050 --> 00:28:08,120
graphical debugging and i des and using

00:28:06,290 --> 00:28:09,800
a debugger for your own code base is

00:28:08,120 --> 00:28:12,110
really going to supercharge your

00:28:09,800 --> 00:28:14,660
productivity for you know fun school or

00:28:12,110 --> 00:28:16,880
work and I've hope I've given you the

00:28:14,660 --> 00:28:20,720
confidence today to say goodbye to print

00:28:16,880 --> 00:28:22,640
and hello to the debugger a few

00:28:20,720 --> 00:28:25,100
additional resources are in the slides a

00:28:22,640 --> 00:28:27,260
nice interactive tutorial believe

00:28:25,100 --> 00:28:28,910
Anthony Shaw wrote this great article

00:28:27,260 --> 00:28:31,790
python through 7's new built-in

00:28:28,910 --> 00:28:34,700
breakpoint and a quick shout-out to Thea

00:28:31,790 --> 00:28:36,890
flowers who wrote the code that I used

00:28:34,700 --> 00:28:40,340
for caching the results of my API calls

00:28:36,890 --> 00:28:43,790
offline thank you so much please

00:28:40,340 --> 00:28:48,290
download the slides Nina dot - slash au

00:28:43,790 --> 00:28:50,150
19 follow me on Twitter and nja and if

00:28:48,290 --> 00:28:54,170
you'd like to check out what Microsoft

00:28:50,150 --> 00:28:59,170
is doing with Python visit akms slash a

00:28:54,170 --> 00:28:59,170
u-19 py thank you so much

00:29:04,250 --> 00:29:09,150
Thank You Nina so we have this mug as a

00:29:07,830 --> 00:29:10,770
gift for our speakers talking about

00:29:09,150 --> 00:29:12,570
appreciation thanks so much

00:29:10,770 --> 00:29:14,190
and if you'd like to talk more with Nina

00:29:12,570 --> 00:29:15,390
about debugging you can catch her in the

00:29:14,190 --> 00:29:17,310
hallways or maybe at lunch

00:29:15,390 --> 00:29:19,200
now we have a 10-minute break before the

00:29:17,310 --> 00:29:22,460
next speaker yeah and if you'd like a

00:29:19,200 --> 00:29:22,460

YouTube URL: https://www.youtube.com/watch?v=HHrVBKZLolg


