Title: "Extracting tabular data from PDFs with Camelot & Excalibur" - Vinayak Mehta (PyCon AU 2019)
Publication date: 2019-08-02
Playlist: PyCon Australia 2019
Description: 
	Vinayak Mehta

Extracting tables from PDFs is hard. The Portable Document Format was not designed for tabular data. Sadly, a lot of open data is shared as PDFs and getting tables out for analysis is a pain. Camelot and Excalibur can help you extract tabular data from PDFs very easily!

https://2019.pycon-au.org/talks/extracting-tabular-data-from-pdfs-with-camelot-excalibur

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 2 - 6 2019.

Video licence: CC BY-NC-SA 4.0 - https://creativecommons.org/licenses/by-nc-sa/4.0/

Python, PyCon, PyConAU

Fri Aug  2 10:30:00 2019 at C3.6
Captions: 
	00:00:05,810 --> 00:00:12,179
thank you hello everybody is everyone

00:00:09,330 --> 00:00:15,179
having a good time so far are you

00:00:12,179 --> 00:00:16,410
excited to be at PyCon Australia let's

00:00:15,179 --> 00:00:23,220
give it up for the organizers for

00:00:16,410 --> 00:00:25,199
organizing such a wonderful evening so

00:00:23,220 --> 00:00:27,990
hi I'm Vinayak Mehta

00:00:25,199 --> 00:00:30,570
I'm from Bangalore India and i'm the

00:00:27,990 --> 00:00:33,989
author of Camelot an Excalibur the two

00:00:30,570 --> 00:00:35,820
Python packages that this talk is about

00:00:33,989 --> 00:00:38,160
I'm also an organizer for PI data

00:00:35,820 --> 00:00:40,860
Bangalore we just started in June this

00:00:38,160 --> 00:00:43,559
year and we are doing like one meter

00:00:40,860 --> 00:00:46,860
every month and we'll possibly do a

00:00:43,559 --> 00:00:48,480
pied-a-terre conference next year so if

00:00:46,860 --> 00:00:50,190
you are evident Bangalore and you want

00:00:48,480 --> 00:00:52,140
to give a talk at a meet-up you you can

00:00:50,190 --> 00:00:56,460
just simply open an issue on that github

00:00:52,140 --> 00:00:59,730
repo during the day I'm a data engineer

00:00:56,460 --> 00:01:02,520
at gooferz which is an online grocery

00:00:59,730 --> 00:01:04,860
delivery service in India if you want to

00:01:02,520 --> 00:01:09,780
like know more about the kind of stuff I

00:01:04,860 --> 00:01:13,799
work on you can catch me afterwards cool

00:01:09,780 --> 00:01:15,420
so in this talk I just like show you how

00:01:13,799 --> 00:01:19,200
you can use Camelot and Excalibur to

00:01:15,420 --> 00:01:21,180
extract tables from PDFs very easily so

00:01:19,200 --> 00:01:23,220
this is the high-level overview overview

00:01:21,180 --> 00:01:26,790
we'll go through the history of the

00:01:23,220 --> 00:01:28,619
Portable Document format I'll touch upon

00:01:26,790 --> 00:01:31,920
some of the problems I faced while

00:01:28,619 --> 00:01:34,590
extracting tables from PDF files then

00:01:31,920 --> 00:01:36,890
I'll show you like I demonstrate how you

00:01:34,590 --> 00:01:39,750
can use Camelot and Excalibur to do that

00:01:36,890 --> 00:01:42,990
then we discuss the project it would

00:01:39,750 --> 00:01:46,970
Maps and do a Q&A if we have time and

00:01:42,990 --> 00:01:49,710
yeah there'll be some fun pies in fact

00:01:46,970 --> 00:01:54,479
so let's begin with the first part by

00:01:49,710 --> 00:01:58,439
his Python called Python yeah correct

00:01:54,479 --> 00:02:01,020
so he finally began implementing the

00:01:58,439 --> 00:02:02,969
language Guido van Rossum was also

00:02:01,020 --> 00:02:06,450
reading the published steps from Monty

00:02:02,969 --> 00:02:09,239
Python's Flying Circus which is BBC

00:02:06,450 --> 00:02:10,560
comedy series from the 70s and he

00:02:09,239 --> 00:02:11,700
thought that in he did a name that was

00:02:10,560 --> 00:02:13,890
short unique

00:02:11,700 --> 00:02:17,000
slightly mysterious and so we have

00:02:13,890 --> 00:02:21,540
Python cool let's go through the history

00:02:17,000 --> 00:02:24,420
so PDF for the PDF format came out of

00:02:21,540 --> 00:02:27,420
the Camelot project which was like and

00:02:24,420 --> 00:02:29,730
it started almost 30 years ago this is a

00:02:27,420 --> 00:02:33,209
six page memo by Jay monarch the

00:02:29,730 --> 00:02:36,450
co-founder of Adobe Mary he details the

00:02:33,209 --> 00:02:39,810
goals of the project so just some quick

00:02:36,450 --> 00:02:42,330
fact it was created in the early 1990s

00:02:39,810 --> 00:02:45,959
by Adobe predates the world wide web in

00:02:42,330 --> 00:02:49,560
HTML it was proprietary initially but it

00:02:45,959 --> 00:02:53,880
was released as an ISO standard with

00:02:49,560 --> 00:02:56,459
version 1.7 in 2008 and since then 13

00:02:53,880 --> 00:02:59,120
versions have been released so the goal

00:02:56,459 --> 00:03:01,910
of the project was that the documents

00:02:59,120 --> 00:03:05,459
like should be viewable on any display

00:03:01,910 --> 00:03:07,920
like it shouldn't matter what ways

00:03:05,459 --> 00:03:09,569
you're using to look at a document they

00:03:07,920 --> 00:03:12,090
should look the same on like across

00:03:09,569 --> 00:03:15,120
machine configurations across networks

00:03:12,090 --> 00:03:18,209
and they should be like they should

00:03:15,120 --> 00:03:21,799
print the same on ma printer and the

00:03:18,209 --> 00:03:25,530
same as the author intended and bootable

00:03:21,799 --> 00:03:28,650
it was it came out like from a subset of

00:03:25,530 --> 00:03:31,130
the Pugh script language which is a page

00:03:28,650 --> 00:03:35,730
description language by Adobe itself

00:03:31,130 --> 00:03:38,959
PostScript itself is quite broad in like

00:03:35,730 --> 00:03:42,510
most other functionality wasn't needed

00:03:38,959 --> 00:03:44,069
the PDF format encapsulate components

00:03:42,510 --> 00:03:47,120
required to build and render a document

00:03:44,069 --> 00:03:49,829
which include your like takes phones

00:03:47,120 --> 00:03:51,930
vector graphics and raster images and

00:03:49,829 --> 00:03:54,269
all these components are kind of

00:03:51,930 --> 00:03:55,650
packaged within the within a PDF file

00:03:54,269 --> 00:04:00,500
and they travel with the file wherever

00:03:55,650 --> 00:04:04,859
it goes so like at a very high level all

00:04:00,500 --> 00:04:09,030
these components are placed like on a 2d

00:04:04,859 --> 00:04:11,069
page relative to the bottom left corner

00:04:09,030 --> 00:04:17,340
of that page which you can think of as

00:04:11,069 --> 00:04:19,979
an origin of a 2d plane so like voids

00:04:17,340 --> 00:04:22,440
are simulated by placing some characters

00:04:19,979 --> 00:04:24,120
closer than others in sentences are

00:04:22,440 --> 00:04:27,900
simulated by placing

00:04:24,120 --> 00:04:31,139
it's relatively far apart how I like how

00:04:27,900 --> 00:04:33,240
our tables simulated then by just

00:04:31,139 --> 00:04:36,440
placing these characters in words like

00:04:33,240 --> 00:04:39,360
they would appear in a spreadsheet

00:04:36,440 --> 00:04:43,560
relative to the bottom left origin of

00:04:39,360 --> 00:04:45,810
course so there's the PDF format has no

00:04:43,560 --> 00:04:49,380
internal representation of a table

00:04:45,810 --> 00:04:51,810
structure all these like characters and

00:04:49,380 --> 00:04:54,690
words that you see the PDF format

00:04:51,810 --> 00:04:56,760
doesn't understand that like what which

00:04:54,690 --> 00:05:00,050
of these words constitute a row in which

00:04:56,760 --> 00:05:03,060
of these words constitute a column in

00:05:00,050 --> 00:05:05,280
like because of that it's a pain to

00:05:03,060 --> 00:05:08,370
extract these tables for analysis

00:05:05,280 --> 00:05:11,430
analysis sadly a lot of open data is

00:05:08,370 --> 00:05:13,740
released as PDF files like there are

00:05:11,430 --> 00:05:17,280
possibly millions or like billions of

00:05:13,740 --> 00:05:19,139
these PDF files out there in yeah

00:05:17,280 --> 00:05:22,380
basically it's a pain to extract a table

00:05:19,139 --> 00:05:26,430
out like from a PDF which is different

00:05:22,380 --> 00:05:29,490
from a CSV because all of the data is

00:05:26,430 --> 00:05:32,210
stored in plain text in each line in

00:05:29,490 --> 00:05:35,820
that plain text file is a row in each

00:05:32,210 --> 00:05:38,250
item in that row is a column so in it's

00:05:35,820 --> 00:05:40,830
pretty human readable so you can like

00:05:38,250 --> 00:05:42,120
understand what the table structure by

00:05:40,830 --> 00:05:45,840
just looking at a CSV file

00:05:42,120 --> 00:05:48,450
or maybe a JSON file in both of these

00:05:45,840 --> 00:05:51,360
formats can be read directly into pandas

00:05:48,450 --> 00:05:55,710
or any other data analysis tool or

00:05:51,360 --> 00:06:00,060
library and use for analysis now let's

00:05:55,710 --> 00:06:03,510
go back to PDF PDF love it so if if

00:06:00,060 --> 00:06:07,610
you've ever tried to do this like if you

00:06:03,510 --> 00:06:10,110
if you've ever tried to execute a s--t

00:06:07,610 --> 00:06:14,639
text from a PDF file you would have seen

00:06:10,110 --> 00:06:17,099
this it's very hard to look at pic get

00:06:14,639 --> 00:06:22,740
anything out of a pedophile by just

00:06:17,099 --> 00:06:27,330
selecting and copying it and so like in

00:06:22,740 --> 00:06:29,280
2016 I was working on extracting tables

00:06:27,330 --> 00:06:32,159
from a lot of PDF files which were

00:06:29,280 --> 00:06:35,010
released as open data and these are some

00:06:32,159 --> 00:06:37,570
of the PDF files I've worked with you

00:06:35,010 --> 00:06:39,820
can imagine that doing this

00:06:37,570 --> 00:06:42,370
on hundreds of different types of table

00:06:39,820 --> 00:06:45,630
structures and hundreds of pages would

00:06:42,370 --> 00:06:49,780
have been like it's not scalable right

00:06:45,630 --> 00:06:52,000
so like what do you do when you like

00:06:49,780 --> 00:06:54,190
like come across a problem like this you

00:06:52,000 --> 00:06:58,180
look for existing tools that might have

00:06:54,190 --> 00:07:00,870
already solved that problem so the first

00:06:58,180 --> 00:07:04,870
tool that I found that worked kind of

00:07:00,870 --> 00:07:07,540
like well was tabular it's Java based

00:07:04,870 --> 00:07:09,540
it's open source it has it has a nice

00:07:07,540 --> 00:07:12,220
web interface

00:07:09,540 --> 00:07:15,420
there's also PDF plumber' which is pison

00:07:12,220 --> 00:07:18,370
based in open source PDF tables which

00:07:15,420 --> 00:07:20,230
which is like which was released as an

00:07:18,370 --> 00:07:22,500
open source package but then later they

00:07:20,230 --> 00:07:26,140
converted it to a proprietary service

00:07:22,500 --> 00:07:28,450
PDF table extract which is unfortunately

00:07:26,140 --> 00:07:31,360
no longer maintained in there like a

00:07:28,450 --> 00:07:33,820
plethora of open like free and paid

00:07:31,360 --> 00:07:36,370
online services that you can use to like

00:07:33,820 --> 00:07:42,850
do this this is one of the service that

00:07:36,370 --> 00:07:45,610
I tried but they have a problem so this

00:07:42,850 --> 00:07:48,370
is a page out of a weekly disease

00:07:45,610 --> 00:07:51,280
outbreaks report released by the

00:07:48,370 --> 00:07:54,880
Ministry of Health and Family Welfare in

00:07:51,280 --> 00:07:57,640
India it like tells you the number of

00:07:54,880 --> 00:07:59,980
cases the number of deaths for different

00:07:57,640 --> 00:08:03,550
diseases in various Indian districts in

00:07:59,980 --> 00:08:07,930
a comment on like what action was taken

00:08:03,550 --> 00:08:09,430
- like against that outbreak so this is

00:08:07,930 --> 00:08:12,280
the result when we pass it through

00:08:09,430 --> 00:08:16,420
tabular you can see that the headers are

00:08:12,280 --> 00:08:19,060
split into different rules in the the

00:08:16,420 --> 00:08:22,810
comments column has like shifted places

00:08:19,060 --> 00:08:24,520
into like multiple columns this is the

00:08:22,810 --> 00:08:26,950
output when you pass it through PDF

00:08:24,520 --> 00:08:31,450
tables it is slightly better but it

00:08:26,950 --> 00:08:35,770
costs money and yeah it's still not a

00:08:31,450 --> 00:08:41,919
very nice output so a solution that I

00:08:35,770 --> 00:08:45,010
tried but yeah so then like many paths a

00:08:41,919 --> 00:08:47,080
PDF through these tools and you get only

00:08:45,010 --> 00:08:48,700
like you get a result which is not very

00:08:47,080 --> 00:08:50,020
nice to work with and you can't do

00:08:48,700 --> 00:08:53,620
anything about it which is

00:08:50,020 --> 00:08:56,800
kind of frustrating one solution that I

00:08:53,620 --> 00:08:59,529
tried was using PDF to text which is a

00:08:56,800 --> 00:09:01,360
command-line utility that is installed

00:08:59,529 --> 00:09:05,680
on many Linux systems under popular

00:09:01,360 --> 00:09:08,680
utils you can just like you can use the

00:09:05,680 --> 00:09:10,660
layout argument that it has to convert a

00:09:08,680 --> 00:09:13,000
PDF file into a text file and it will

00:09:10,660 --> 00:09:16,600
basically preserve the layout of that

00:09:13,000 --> 00:09:19,390
PDF file using spaces but there's the

00:09:16,600 --> 00:09:21,190
problem with this solution to that like

00:09:19,390 --> 00:09:23,350
you have to basically write custom code

00:09:21,190 --> 00:09:27,220
for each different type of PDF table

00:09:23,350 --> 00:09:29,560
structure that was extracted which is

00:09:27,220 --> 00:09:31,990
again like not scalable you can't write

00:09:29,560 --> 00:09:34,330
keep writing custom code for hundreds of

00:09:31,990 --> 00:09:37,360
different types of PDF table structures

00:09:34,330 --> 00:09:40,570
in like hundreds in basically different

00:09:37,360 --> 00:09:43,029
types of structures cool so this is a

00:09:40,570 --> 00:09:45,670
solution that we came up with that sushi

00:09:43,029 --> 00:09:48,959
comes to overcome basically the problem

00:09:45,670 --> 00:09:52,000
of not having a configurable tool which

00:09:48,959 --> 00:09:54,040
which Lee gave you some parameters that

00:09:52,000 --> 00:09:56,110
you could tweak to like get a better

00:09:54,040 --> 00:10:01,060
table output so that you won't start

00:09:56,110 --> 00:10:04,240
with zero and what one situation and to

00:10:01,060 --> 00:10:07,120
overcome the like the problem that we

00:10:04,240 --> 00:10:08,290
faced which were those tools that they

00:10:07,120 --> 00:10:13,779
were not developer friendly they were

00:10:08,290 --> 00:10:15,149
not configurable so via Camelot it works

00:10:13,779 --> 00:10:20,290
well out of the box

00:10:15,149 --> 00:10:23,050
it recognizes tables in most like in

00:10:20,290 --> 00:10:25,690
most cases without you having to do

00:10:23,050 --> 00:10:28,660
anything and like for other cases there

00:10:25,690 --> 00:10:30,810
are various options that the library

00:10:28,660 --> 00:10:35,440
offers that you can tweak for example

00:10:30,810 --> 00:10:37,390
stay he could you could give in like a

00:10:35,440 --> 00:10:41,589
table area for the library to look

00:10:37,390 --> 00:10:43,899
tables in you could also pass any column

00:10:41,589 --> 00:10:45,459
separators for example if that I library

00:10:43,899 --> 00:10:48,790
recognized only one column in a table

00:10:45,459 --> 00:10:52,329
you could say no there are actually five

00:10:48,790 --> 00:10:55,149
columns in the table at these offsets a

00:10:52,329 --> 00:10:57,190
lot of feature that a lot of users like

00:10:55,149 --> 00:10:59,920
is visual debugging and plotting using

00:10:57,190 --> 00:11:00,940
matplotlib this enables you to basically

00:10:59,920 --> 00:11:04,900
see what the

00:11:00,940 --> 00:11:07,330
like duties these you can visualize all

00:11:04,900 --> 00:11:09,250
the different components in the PDF that

00:11:07,330 --> 00:11:13,900
the library he found and where it found

00:11:09,250 --> 00:11:16,540
them you can then export those tables to

00:11:13,900 --> 00:11:19,360
multiple formats including like CSV

00:11:16,540 --> 00:11:21,370
Jason in Excel or an HTML file or even

00:11:19,360 --> 00:11:24,010
just get a panda's data frame out of

00:11:21,370 --> 00:11:25,810
that PDF so that you can directly

00:11:24,010 --> 00:11:29,740
integrate it with your data analysis

00:11:25,810 --> 00:11:31,780
workflows and it's vital based MIT

00:11:29,740 --> 00:11:35,470
license and the documentation is

00:11:31,780 --> 00:11:38,680
excellent it has like a lot of examples

00:11:35,470 --> 00:11:40,150
for you to look at like about the

00:11:38,680 --> 00:11:44,860
different parameters that the liability

00:11:40,150 --> 00:11:47,040
office so let's do a short demo this is

00:11:44,860 --> 00:11:50,020
the same page that I showed you earlier

00:11:47,040 --> 00:11:53,830
that we passed through turbulent PDF

00:11:50,020 --> 00:12:01,300
tables let me just launch a Jupiter

00:11:53,830 --> 00:12:04,330
notebook so it's not really a demo it's

00:12:01,300 --> 00:12:06,640
a Jupiter notebook I've already like to

00:12:04,330 --> 00:12:12,520
run it because life coding works only

00:12:06,640 --> 00:12:14,470
like 50 50 50 % of the time so like you

00:12:12,520 --> 00:12:18,010
just to use a library you just import

00:12:14,470 --> 00:12:20,110
camelot then you just do a camel or eat

00:12:18,010 --> 00:12:23,620
PDF and pass in the file path to that

00:12:20,110 --> 00:12:27,250
PDF file it the API is similar to pandas

00:12:23,620 --> 00:12:31,540
read API which like read CSV or read

00:12:27,250 --> 00:12:33,610
HTML then you get a table list object

00:12:31,540 --> 00:12:37,630
which is basically a container of tables

00:12:33,610 --> 00:12:41,020
here we see that it recognized one table

00:12:37,630 --> 00:12:44,080
in that PDF in on that PDF page in India

00:12:41,020 --> 00:12:46,960
there is one table in there so and then

00:12:44,080 --> 00:12:49,660
you can access each table object using

00:12:46,960 --> 00:12:51,610
an index so if you do a tables 0 you

00:12:49,660 --> 00:12:55,260
will see that like the shape of the

00:12:51,610 --> 00:12:57,610
table which is like 7 rows and n columns

00:12:55,260 --> 00:13:01,210
it will also give you a parsing to put

00:12:57,610 --> 00:13:03,660
so the accuracy here means the accuracy

00:13:01,210 --> 00:13:06,850
with which the library was able to

00:13:03,660 --> 00:13:08,800
assign these different text boxes into

00:13:06,850 --> 00:13:12,210
different cells that it recognized as

00:13:08,800 --> 00:13:12,210
like in the table

00:13:13,230 --> 00:13:21,340
in the like do you want me to zoom in we

00:13:19,600 --> 00:13:24,370
can go like good questions at the end

00:13:21,340 --> 00:13:26,590
and then you can get the data frame Oh

00:13:24,370 --> 00:13:28,750
India you can like basically it will

00:13:26,590 --> 00:13:31,210
basically tell you the order in which

00:13:28,750 --> 00:13:33,220
the table was found on that PDF page you

00:13:31,210 --> 00:13:36,130
can get a data frame out using a table

00:13:33,220 --> 00:13:39,430
0df and this is the data frame that we

00:13:36,130 --> 00:13:42,280
get for this table which you can see is

00:13:39,430 --> 00:13:45,430
like a nice table to work with you get

00:13:42,280 --> 00:13:47,710
the comments column like intact they

00:13:45,430 --> 00:13:50,410
call the comments on a single cell and

00:13:47,710 --> 00:13:55,150
then you can export all these tables as

00:13:50,410 --> 00:13:56,770
a CSV if you do in LS it will just like

00:13:55,150 --> 00:13:59,170
it shows that the CSV file that it

00:13:56,770 --> 00:14:01,330
exported you can pass in different

00:13:59,170 --> 00:14:04,330
format to this tables not export

00:14:01,330 --> 00:14:06,460
function and then this is the visual

00:14:04,330 --> 00:14:09,430
debugging thing that I was talking about

00:14:06,460 --> 00:14:13,450
so you can visualize the text that was

00:14:09,430 --> 00:14:16,090
found on that PDF page you can plot the

00:14:13,450 --> 00:14:20,140
grid that the library recognized for the

00:14:16,090 --> 00:14:22,780
table you can plot the table areas that

00:14:20,140 --> 00:14:24,700
were found on a PDF page you can find

00:14:22,780 --> 00:14:27,060
plot the lines that were found you can

00:14:24,700 --> 00:14:30,670
plot the intersections that were found

00:14:27,060 --> 00:14:31,750
these are basically to just tweak like

00:14:30,670 --> 00:14:34,150
the different parameters that the

00:14:31,750 --> 00:14:35,980
library offers so if you don't see many

00:14:34,150 --> 00:14:37,710
intersections on a PDF page you could

00:14:35,980 --> 00:14:40,210
just wave a parameter and then see if

00:14:37,710 --> 00:14:42,760
new intersections were recognized or not

00:14:40,210 --> 00:14:46,630
and then you will probably have a better

00:14:42,760 --> 00:14:51,550
result so this is the documentation it's

00:14:46,630 --> 00:14:53,740
um read the docs let me zoom in so you

00:14:51,550 --> 00:14:56,920
can take go to the advanced usage

00:14:53,740 --> 00:14:58,900
section in like it will tell you about

00:14:56,920 --> 00:15:01,720
various parameters that the library

00:14:58,900 --> 00:15:04,930
offers so this is the visual debugging

00:15:01,720 --> 00:15:07,839
section and then you can specify column

00:15:04,930 --> 00:15:10,750
separators you can flag superscripts and

00:15:07,839 --> 00:15:12,550
subscripts so in this case the

00:15:10,750 --> 00:15:14,530
superscript doesn't matter because the

00:15:12,550 --> 00:15:17,950
number occurs after a decimal but what

00:15:14,530 --> 00:15:20,470
if it was 10 to the power 1 it will

00:15:17,950 --> 00:15:23,640
become 1 0 1 which would fudge up your

00:15:20,470 --> 00:15:26,610
results kind of and then you can

00:15:23,640 --> 00:15:28,320
strip characters from the text so you

00:15:26,610 --> 00:15:30,330
can basically strip garbage values out

00:15:28,320 --> 00:15:32,910
of the text rings that were found on a

00:15:30,330 --> 00:15:34,380
PDF page so make here we can see that

00:15:32,910 --> 00:15:37,020
there are multiple dots that you don't

00:15:34,380 --> 00:15:40,500
really need and you can just strip them

00:15:37,020 --> 00:15:42,210
by specifying this argument in there

00:15:40,500 --> 00:15:46,680
like some other arguments that you can

00:15:42,210 --> 00:15:53,970
also look at when you go back whoo let's

00:15:46,680 --> 00:15:55,830
go back to the presentation so I just

00:15:53,970 --> 00:15:58,410
included this image in case the Jupiter

00:15:55,830 --> 00:16:00,330
notebook somehow it didn't work

00:15:58,410 --> 00:16:03,150
camelid also comes with a command line

00:16:00,330 --> 00:16:05,730
interface that you can use the

00:16:03,150 --> 00:16:08,100
installation is pretty easy using corner

00:16:05,730 --> 00:16:10,200
so you can just do a corner install

00:16:08,100 --> 00:16:12,480
Camelot - pi and specify the channel

00:16:10,200 --> 00:16:13,290
which is kind of Forge and that you

00:16:12,480 --> 00:16:15,780
don't need to care about the

00:16:13,290 --> 00:16:17,430
dependencies if you're using corner but

00:16:15,780 --> 00:16:19,440
if you're using pip you will need to

00:16:17,430 --> 00:16:21,840
install some dependencies first which

00:16:19,440 --> 00:16:24,420
art he can go script and then you can

00:16:21,840 --> 00:16:27,540
simply do a paper installer Camelot - pi

00:16:24,420 --> 00:16:29,850
and CV in square brackets CV because

00:16:27,540 --> 00:16:32,160
there are multiple extras in this

00:16:29,850 --> 00:16:34,500
package in the one you need is CV

00:16:32,160 --> 00:16:37,890
because it installs open CV with the

00:16:34,500 --> 00:16:40,410
package so how it works

00:16:37,890 --> 00:16:42,480
it's basically built on top of PDF minor

00:16:40,410 --> 00:16:44,820
which is the Python like a great Python

00:16:42,480 --> 00:16:46,950
library that gives you all the

00:16:44,820 --> 00:16:50,300
components all the text components on a

00:16:46,950 --> 00:16:52,620
PDF page along with their XY locations

00:16:50,300 --> 00:16:54,720
it comes with two parsing flavors

00:16:52,620 --> 00:16:57,300
ladders in-stream then these names were

00:16:54,720 --> 00:16:59,820
inspired from tabular itself lattice

00:16:57,300 --> 00:17:03,210
looks for lines on a PDF page to

00:16:59,820 --> 00:17:05,550
identify table so this table has lines

00:17:03,210 --> 00:17:07,680
so you will probably use lattice but if

00:17:05,550 --> 00:17:12,240
the table didn't have lines you would

00:17:07,680 --> 00:17:14,699
like you should use stream so lattice

00:17:12,240 --> 00:17:17,430
converts the PDF page into an image

00:17:14,699 --> 00:17:21,230
using go script and then uses OpenCV to

00:17:17,430 --> 00:17:24,570
identify lines on that page and stream

00:17:21,230 --> 00:17:27,420
basically looks for text edges on a page

00:17:24,570 --> 00:17:30,900
so that means basically how your text is

00:17:27,420 --> 00:17:33,110
aligned left right or center like to

00:17:30,900 --> 00:17:36,240
perform that table representation in

00:17:33,110 --> 00:17:37,380
this is a disclaimer that download right

00:17:36,240 --> 00:17:40,380
now only works that takes

00:17:37,380 --> 00:17:43,770
believes in not scan documents so if you

00:17:40,380 --> 00:17:45,360
can click and drag and select anything

00:17:43,770 --> 00:17:48,690
on your PDF that means that is takes

00:17:45,360 --> 00:17:52,380
based in if you can undo that that means

00:17:48,690 --> 00:17:56,730
it's it's so look we have a fun fact

00:17:52,380 --> 00:17:59,280
sign so like you would be funding by

00:17:56,730 --> 00:18:00,570
it's called Hamlet so it's as you can

00:17:59,280 --> 00:18:03,210
already guess it was named after the

00:18:00,570 --> 00:18:06,030
Camelot project which is also the name

00:18:03,210 --> 00:18:09,000
of a castle in Monty Python and the Holy

00:18:06,030 --> 00:18:11,310
Grail which is based on in Arthurian

00:18:09,000 --> 00:18:14,790
legend on the earth routine legend

00:18:11,310 --> 00:18:16,980
another fun fact the Python package

00:18:14,790 --> 00:18:19,260
index was called the cheese shop based

00:18:16,980 --> 00:18:21,570
on the Monty Python cheese shop sketch

00:18:19,260 --> 00:18:25,860
you should definitely check out Monty

00:18:21,570 --> 00:18:28,620
Python's Flying Circus but yeah what if

00:18:25,860 --> 00:18:30,420
you don't want to write code catalogue

00:18:28,620 --> 00:18:34,620
comes with a web interface that you can

00:18:30,420 --> 00:18:36,810
use directly so after installing

00:18:34,620 --> 00:18:39,090
excalibur which we'll come to later you

00:18:36,810 --> 00:18:41,400
can just do an Excalibur web server and

00:18:39,090 --> 00:18:45,020
then go to localhost colon 5000 which is

00:18:41,400 --> 00:18:49,350
the port to like use at them interface

00:18:45,020 --> 00:18:51,060
why it's calibre web interface is like

00:18:49,350 --> 00:18:52,470
for most people easier to use then a

00:18:51,060 --> 00:18:55,020
Python liability

00:18:52,470 --> 00:18:58,110
I guess not here because a lot of us are

00:18:55,020 --> 00:19:03,440
Python developers because we add Python

00:18:58,110 --> 00:19:07,080
and you can basically save these duels

00:19:03,440 --> 00:19:09,480
like which are basically a JSON of all

00:19:07,080 --> 00:19:13,140
the extraction parameters that Camelot

00:19:09,480 --> 00:19:14,670
in really take as an input in since it's

00:19:13,140 --> 00:19:17,190
on your machine your data is safe with

00:19:14,670 --> 00:19:19,860
you you can work on it in the safety of

00:19:17,190 --> 00:19:22,320
your own home and it's architected so

00:19:19,860 --> 00:19:23,430
that you can use salary for parallel and

00:19:22,320 --> 00:19:27,660
distributed workloads

00:19:23,430 --> 00:19:31,080
by default it uses multi processing so

00:19:27,660 --> 00:19:34,890
let's do a quick demo we can just launch

00:19:31,080 --> 00:19:37,350
this caliber web server and then you can

00:19:34,890 --> 00:19:41,880
go to Luke Rose 5000 this is the

00:19:37,350 --> 00:19:44,250
interface you upload your file you can

00:19:41,880 --> 00:19:48,120
set in page numbers by default it takes

00:19:44,250 --> 00:19:49,420
1 is the page number then you need to

00:19:48,120 --> 00:19:51,880
refresh it because

00:19:49,420 --> 00:19:55,390
have started a background job to convert

00:19:51,880 --> 00:19:57,820
that page into an image so here you can

00:19:55,390 --> 00:20:01,380
like basically use these different

00:19:57,820 --> 00:20:04,179
options you can auto detect a table or

00:20:01,380 --> 00:20:06,130
you can basically select the different

00:20:04,179 --> 00:20:09,100
parameters that Camelot can take as an

00:20:06,130 --> 00:20:11,110
input you can select the lick the flavor

00:20:09,100 --> 00:20:13,929
and then you click on view and download

00:20:11,110 --> 00:20:17,440
data this again starts a background job

00:20:13,929 --> 00:20:19,630
and then you can see that data like on

00:20:17,440 --> 00:20:24,160
the interface itself and then download

00:20:19,630 --> 00:20:26,650
it in whatever format you want but what

00:20:24,160 --> 00:20:31,179
if your table like is buried in some

00:20:26,650 --> 00:20:34,750
corner of your PDF we will again wait

00:20:31,179 --> 00:20:37,960
for it to convert it into an image so

00:20:34,750 --> 00:20:40,750
this is the PDF the table is buried like

00:20:37,960 --> 00:20:43,419
on the right and like in between some

00:20:40,750 --> 00:20:45,370
paragraphs so in those cases Camelot

00:20:43,419 --> 00:20:48,820
won't be able to recognize it here you

00:20:45,370 --> 00:20:52,030
can just like that table select stream

00:20:48,820 --> 00:20:54,160
because there are no lines that are like

00:20:52,030 --> 00:20:57,669
specifying the table you can add a

00:20:54,160 --> 00:20:59,950
column using this but in this case we

00:20:57,669 --> 00:21:02,770
don't need a column separator because

00:20:59,950 --> 00:21:05,559
we've already given the library a

00:21:02,770 --> 00:21:08,530
specific area to look into so we just

00:21:05,559 --> 00:21:10,660
remove it by double clicking then again

00:21:08,530 --> 00:21:14,820
you view and download or you click on

00:21:10,660 --> 00:21:14,820
download and you get the table out

00:21:18,110 --> 00:21:25,320
[Applause]

00:21:22,920 --> 00:21:27,060
so installation is again pretty simple

00:21:25,320 --> 00:21:29,610
after installing the dependencies you

00:21:27,060 --> 00:21:36,690
just do a pip install Excalibur - pipe

00:21:29,610 --> 00:21:38,400
and again fun fact as you can give it is

00:21:36,690 --> 00:21:40,470
named after the legendary sort of King

00:21:38,400 --> 00:21:42,540
Arthur another fun fact the

00:21:40,470 --> 00:21:45,000
metasyntactic variables in the Python

00:21:42,540 --> 00:21:47,220
documentation are called spam in eggs

00:21:45,000 --> 00:21:50,280
instead of the instead of the

00:21:47,220 --> 00:21:52,470
traditional foo and bar based on the

00:21:50,280 --> 00:21:56,340
monty python spam sketch should check it

00:21:52,470 --> 00:21:58,350
out cool so this is the road map for

00:21:56,340 --> 00:22:02,250
both these project the first thing that

00:21:58,350 --> 00:22:03,270
we are looking to remove like the first

00:22:02,250 --> 00:22:05,130
thing that we are looking to do is to

00:22:03,270 --> 00:22:06,960
move both scripted and open CVS

00:22:05,130 --> 00:22:10,080
requirements because a lot of people

00:22:06,960 --> 00:22:11,940
face issues like with installing go

00:22:10,080 --> 00:22:14,520
script because of different operating

00:22:11,940 --> 00:22:15,960
systems then there are like other

00:22:14,520 --> 00:22:19,500
performance in web interface

00:22:15,960 --> 00:22:21,360
enhancements that we need to do we we

00:22:19,500 --> 00:22:23,310
are also planned to add OCR support for

00:22:21,360 --> 00:22:25,530
scanned documents and then maybe your

00:22:23,310 --> 00:22:28,410
favorite feature you can like come talk

00:22:25,530 --> 00:22:30,960
to me afterwards I would like to thank

00:22:28,410 --> 00:22:33,030
Demeter and headed off for some of the

00:22:30,960 --> 00:22:35,670
content that you saw on this

00:22:33,030 --> 00:22:38,550
presentation today he's a contributor

00:22:35,670 --> 00:22:40,860
for like to both these projects in cool

00:22:38,550 --> 00:22:43,380
you can just find me on github here and

00:22:40,860 --> 00:22:47,880
you can find the projects on github here

00:22:43,380 --> 00:22:50,960
and yeah that was that I hope you find

00:22:47,880 --> 00:22:50,960
these projects useful

00:22:56,890 --> 00:23:06,080
thank you for such a great talk do we

00:22:59,990 --> 00:23:11,300
have any questions yes great thank you

00:23:06,080 --> 00:23:14,000
just the system handle tables that are

00:23:11,300 --> 00:23:16,120
spread across multiple pages yeah so you

00:23:14,000 --> 00:23:19,880
can basically specify a page numbers

00:23:16,120 --> 00:23:22,220
like based on the pages in the PDF where

00:23:19,880 --> 00:23:24,050
tables are on and it will give you

00:23:22,220 --> 00:23:29,680
separate data frames for those tables in

00:23:24,050 --> 00:23:32,180
a table list good I thank you

00:23:29,680 --> 00:23:33,740
not long ago I was given a quick task of

00:23:32,180 --> 00:23:36,020
going through a hundred day reports

00:23:33,740 --> 00:23:37,100
where the site supervisor had given a

00:23:36,020 --> 00:23:38,720
heading and then a bunch of bullet

00:23:37,100 --> 00:23:40,550
points for each heading and I looked at

00:23:38,720 --> 00:23:42,710
your tool and then figured that because

00:23:40,550 --> 00:23:45,160
it wasn't a table your tool wouldn't

00:23:42,710 --> 00:23:48,440
apply but you gave us the hint that

00:23:45,160 --> 00:23:50,210
there is no actual table type so could

00:23:48,440 --> 00:23:53,240
you tool handle more semi structured

00:23:50,210 --> 00:23:56,180
PDFs instead of outright tables so I

00:23:53,240 --> 00:23:58,490
guess you could just lick a table area

00:23:56,180 --> 00:23:59,990
based on the bulleted list that you

00:23:58,490 --> 00:24:02,330
specified in I think you should be able

00:23:59,990 --> 00:24:13,430
to get that bulleted list in separate

00:24:02,330 --> 00:24:15,500
rows of I'm curious to learn a little

00:24:13,430 --> 00:24:16,520
bit more about social cops but was it

00:24:15,500 --> 00:24:19,040
sounds like that's where you did a lot

00:24:16,520 --> 00:24:19,940
of work with it what social cops it

00:24:19,040 --> 00:24:22,280
sounds like that's where you did a lot

00:24:19,940 --> 00:24:24,620
of the development if you tall yeah so

00:24:22,280 --> 00:24:31,370
like the tool was developed when I was

00:24:24,620 --> 00:24:33,020
working at social cops first of all I

00:24:31,370 --> 00:24:35,900
just got so excited that I Steve our

00:24:33,020 --> 00:24:38,000
accuracy between but I just just curious

00:24:35,900 --> 00:24:40,070
about what that accuracy is measure is

00:24:38,000 --> 00:24:41,990
in how that's calculated and behind the

00:24:40,070 --> 00:24:45,740
scenes how does it know how accurate it

00:24:41,990 --> 00:24:48,260
is that's something that um so like B is

00:24:45,740 --> 00:24:50,420
done the table that the library found on

00:24:48,260 --> 00:24:52,850
a table it would have some coordinates

00:24:50,420 --> 00:24:54,050
for the table and then it would have it

00:24:52,850 --> 00:24:57,950
would have some coordinates for each

00:24:54,050 --> 00:24:59,720
cell and then like it gate the textbox

00:24:57,950 --> 00:25:03,770
is out of PDF finder which has their own

00:24:59,720 --> 00:25:06,790
coordinates now like like when it like a

00:25:03,770 --> 00:25:08,999
science HD textbox to a table cell it

00:25:06,790 --> 00:25:11,909
like how perfectly it lies

00:25:08,999 --> 00:25:22,889
and that's how the accuracy is

00:25:11,909 --> 00:25:24,749
calculated so I just noticed between the

00:25:22,889 --> 00:25:28,469
lattice and stream you had an example

00:25:24,749 --> 00:25:29,939
where there was a lattice based table so

00:25:28,469 --> 00:25:33,539
presumably you're reading the the

00:25:29,939 --> 00:25:37,709
structure of the cells from the the

00:25:33,539 --> 00:25:40,709
pixels between them but does the lattice

00:25:37,709 --> 00:25:42,389
scanning also include the stream

00:25:40,709 --> 00:25:45,059
scanning because there was one where you

00:25:42,389 --> 00:25:47,489
had a lattice structure but then the

00:25:45,059 --> 00:25:49,499
main body of the table was all delimited

00:25:47,489 --> 00:25:51,629
by tabs does it does it do both at the

00:25:49,499 --> 00:25:54,419
same time no they are like quite

00:25:51,629 --> 00:25:56,309
separate they're like lattice will use

00:25:54,419 --> 00:25:58,769
OpenCV to detect some lines but stream

00:25:56,309 --> 00:26:00,929
will just process the text like the

00:25:58,769 --> 00:26:03,539
alignment of the text to basically guess

00:26:00,929 --> 00:26:07,529
the table like structure okay but they

00:26:03,539 --> 00:26:17,639
are separate we have time for one more

00:26:07,529 --> 00:26:21,859
question yeah I was just wondering cases

00:26:17,639 --> 00:26:25,369
where your tool actually breaks so

00:26:21,859 --> 00:26:28,049
basically scan documents is one case

00:26:25,369 --> 00:26:31,169
because it wouldn't be able to get the

00:26:28,049 --> 00:26:33,239
text box like the text out and you would

00:26:31,169 --> 00:26:35,549
have to do some kind of an OCR step

00:26:33,239 --> 00:26:39,239
before actually like getting the text

00:26:35,549 --> 00:26:40,919
out and like for most other cases you

00:26:39,239 --> 00:26:43,079
can be like actually tweak the

00:26:40,919 --> 00:26:45,389
parameters to get to the result that you

00:26:43,079 --> 00:26:47,729
want so it gets quite configurable in

00:26:45,389 --> 00:26:51,919
that way but they aren't a lot of cases

00:26:47,729 --> 00:26:51,919
where it breaks like very net breaks

00:26:52,039 --> 00:26:56,849
okay oh thank you again Vinayak we'll

00:26:54,899 --> 00:26:59,779
give you such a great talk and small

00:26:56,849 --> 00:26:59,779
token of our appreciation

00:26:59,860 --> 00:27:01,920

YouTube URL: https://www.youtube.com/watch?v=99A9Fz6uHAA


